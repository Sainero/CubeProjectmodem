
cmwx1zzabz_0xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e9b8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000161c  0801ea78  0801ea78  0002ea78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08020094  08020094  00030094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0802009c  0802009c  0003009c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080200a0  080200a0  000300a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000023c  20000000  080200a4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000015c8  2000023c  080202e0  0004023c  2**2
                  ALLOC
  8 ._user_heap_stack 00000804  20001804  080202e0  00041804  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  0004023c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00059671  00000000  00000000  00040264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000b19b  00000000  00000000  000998d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002cc8  00000000  00000000  000a4a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000028b0  00000000  00000000  000a7738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00023f0c  00000000  00000000  000a9fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003fa89  00000000  00000000  000cdef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000b4bb4  00000000  00000000  0010d97d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001c2531  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a660  00000000  00000000  001c2584  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000023c 	.word	0x2000023c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0801ea60 	.word	0x0801ea60

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000240 	.word	0x20000240
 8000104:	0801ea60 	.word	0x0801ea60

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdrcmple>:
 8000404:	4684      	mov	ip, r0
 8000406:	1c10      	adds	r0, r2, #0
 8000408:	4662      	mov	r2, ip
 800040a:	468c      	mov	ip, r1
 800040c:	1c19      	adds	r1, r3, #0
 800040e:	4663      	mov	r3, ip
 8000410:	e000      	b.n	8000414 <__aeabi_cdcmpeq>
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_cdcmpeq>:
 8000414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000416:	f001 faab 	bl	8001970 <__ledf2>
 800041a:	2800      	cmp	r0, #0
 800041c:	d401      	bmi.n	8000422 <__aeabi_cdcmpeq+0xe>
 800041e:	2100      	movs	r1, #0
 8000420:	42c8      	cmn	r0, r1
 8000422:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000424 <__aeabi_dcmpeq>:
 8000424:	b510      	push	{r4, lr}
 8000426:	f001 f9f5 	bl	8001814 <__eqdf2>
 800042a:	4240      	negs	r0, r0
 800042c:	3001      	adds	r0, #1
 800042e:	bd10      	pop	{r4, pc}

08000430 <__aeabi_dcmplt>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f001 fa9d 	bl	8001970 <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	db01      	blt.n	800043e <__aeabi_dcmplt+0xe>
 800043a:	2000      	movs	r0, #0
 800043c:	bd10      	pop	{r4, pc}
 800043e:	2001      	movs	r0, #1
 8000440:	bd10      	pop	{r4, pc}
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__aeabi_dcmple>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 fa93 	bl	8001970 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	dd01      	ble.n	8000452 <__aeabi_dcmple+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmpgt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fa17 	bl	800188c <__gedf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dc01      	bgt.n	8000466 <__aeabi_dcmpgt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpge>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fa0d 	bl	800188c <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	da01      	bge.n	800047a <__aeabi_dcmpge+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_ldivmod>:
 8000480:	2b00      	cmp	r3, #0
 8000482:	d115      	bne.n	80004b0 <__aeabi_ldivmod+0x30>
 8000484:	2a00      	cmp	r2, #0
 8000486:	d113      	bne.n	80004b0 <__aeabi_ldivmod+0x30>
 8000488:	2900      	cmp	r1, #0
 800048a:	db06      	blt.n	800049a <__aeabi_ldivmod+0x1a>
 800048c:	dc01      	bgt.n	8000492 <__aeabi_ldivmod+0x12>
 800048e:	2800      	cmp	r0, #0
 8000490:	d006      	beq.n	80004a0 <__aeabi_ldivmod+0x20>
 8000492:	2000      	movs	r0, #0
 8000494:	43c0      	mvns	r0, r0
 8000496:	0841      	lsrs	r1, r0, #1
 8000498:	e002      	b.n	80004a0 <__aeabi_ldivmod+0x20>
 800049a:	2180      	movs	r1, #128	; 0x80
 800049c:	0609      	lsls	r1, r1, #24
 800049e:	2000      	movs	r0, #0
 80004a0:	b407      	push	{r0, r1, r2}
 80004a2:	4802      	ldr	r0, [pc, #8]	; (80004ac <__aeabi_ldivmod+0x2c>)
 80004a4:	a101      	add	r1, pc, #4	; (adr r1, 80004ac <__aeabi_ldivmod+0x2c>)
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	9002      	str	r0, [sp, #8]
 80004aa:	bd03      	pop	{r0, r1, pc}
 80004ac:	ffffff55 	.word	0xffffff55
 80004b0:	b403      	push	{r0, r1}
 80004b2:	4668      	mov	r0, sp
 80004b4:	b501      	push	{r0, lr}
 80004b6:	9802      	ldr	r0, [sp, #8]
 80004b8:	f000 f938 	bl	800072c <__gnu_ldivmod_helper>
 80004bc:	9b01      	ldr	r3, [sp, #4]
 80004be:	469e      	mov	lr, r3
 80004c0:	b002      	add	sp, #8
 80004c2:	bc0c      	pop	{r2, r3}
 80004c4:	4770      	bx	lr
 80004c6:	46c0      	nop			; (mov r8, r8)

080004c8 <__aeabi_uldivmod>:
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d111      	bne.n	80004f0 <__aeabi_uldivmod+0x28>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	d10f      	bne.n	80004f0 <__aeabi_uldivmod+0x28>
 80004d0:	2900      	cmp	r1, #0
 80004d2:	d100      	bne.n	80004d6 <__aeabi_uldivmod+0xe>
 80004d4:	2800      	cmp	r0, #0
 80004d6:	d002      	beq.n	80004de <__aeabi_uldivmod+0x16>
 80004d8:	2100      	movs	r1, #0
 80004da:	43c9      	mvns	r1, r1
 80004dc:	1c08      	adds	r0, r1, #0
 80004de:	b407      	push	{r0, r1, r2}
 80004e0:	4802      	ldr	r0, [pc, #8]	; (80004ec <__aeabi_uldivmod+0x24>)
 80004e2:	a102      	add	r1, pc, #8	; (adr r1, 80004ec <__aeabi_uldivmod+0x24>)
 80004e4:	1840      	adds	r0, r0, r1
 80004e6:	9002      	str	r0, [sp, #8]
 80004e8:	bd03      	pop	{r0, r1, pc}
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	ffffff15 	.word	0xffffff15
 80004f0:	b403      	push	{r0, r1}
 80004f2:	4668      	mov	r0, sp
 80004f4:	b501      	push	{r0, lr}
 80004f6:	9802      	ldr	r0, [sp, #8]
 80004f8:	f000 f84c 	bl	8000594 <__udivmoddi4>
 80004fc:	9b01      	ldr	r3, [sp, #4]
 80004fe:	469e      	mov	lr, r3
 8000500:	b002      	add	sp, #8
 8000502:	bc0c      	pop	{r2, r3}
 8000504:	4770      	bx	lr
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_lmul>:
 8000508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800050a:	0415      	lsls	r5, r2, #16
 800050c:	0c2d      	lsrs	r5, r5, #16
 800050e:	000f      	movs	r7, r1
 8000510:	0001      	movs	r1, r0
 8000512:	002e      	movs	r6, r5
 8000514:	46c6      	mov	lr, r8
 8000516:	4684      	mov	ip, r0
 8000518:	0400      	lsls	r0, r0, #16
 800051a:	0c14      	lsrs	r4, r2, #16
 800051c:	0c00      	lsrs	r0, r0, #16
 800051e:	0c09      	lsrs	r1, r1, #16
 8000520:	4346      	muls	r6, r0
 8000522:	434d      	muls	r5, r1
 8000524:	4360      	muls	r0, r4
 8000526:	4361      	muls	r1, r4
 8000528:	1940      	adds	r0, r0, r5
 800052a:	0c34      	lsrs	r4, r6, #16
 800052c:	1824      	adds	r4, r4, r0
 800052e:	b500      	push	{lr}
 8000530:	42a5      	cmp	r5, r4
 8000532:	d903      	bls.n	800053c <__aeabi_lmul+0x34>
 8000534:	2080      	movs	r0, #128	; 0x80
 8000536:	0240      	lsls	r0, r0, #9
 8000538:	4680      	mov	r8, r0
 800053a:	4441      	add	r1, r8
 800053c:	0c25      	lsrs	r5, r4, #16
 800053e:	186d      	adds	r5, r5, r1
 8000540:	4661      	mov	r1, ip
 8000542:	4359      	muls	r1, r3
 8000544:	437a      	muls	r2, r7
 8000546:	0430      	lsls	r0, r6, #16
 8000548:	1949      	adds	r1, r1, r5
 800054a:	0424      	lsls	r4, r4, #16
 800054c:	0c00      	lsrs	r0, r0, #16
 800054e:	1820      	adds	r0, r4, r0
 8000550:	1889      	adds	r1, r1, r2
 8000552:	bc80      	pop	{r7}
 8000554:	46b8      	mov	r8, r7
 8000556:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000558 <__aeabi_d2uiz>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	2200      	movs	r2, #0
 800055c:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <__aeabi_d2uiz+0x38>)
 800055e:	0004      	movs	r4, r0
 8000560:	000d      	movs	r5, r1
 8000562:	f7ff ff83 	bl	800046c <__aeabi_dcmpge>
 8000566:	2800      	cmp	r0, #0
 8000568:	d104      	bne.n	8000574 <__aeabi_d2uiz+0x1c>
 800056a:	0020      	movs	r0, r4
 800056c:	0029      	movs	r1, r5
 800056e:	f002 f86d 	bl	800264c <__aeabi_d2iz>
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <__aeabi_d2uiz+0x38>)
 8000576:	2200      	movs	r2, #0
 8000578:	0020      	movs	r0, r4
 800057a:	0029      	movs	r1, r5
 800057c:	f001 fcd4 	bl	8001f28 <__aeabi_dsub>
 8000580:	f002 f864 	bl	800264c <__aeabi_d2iz>
 8000584:	2380      	movs	r3, #128	; 0x80
 8000586:	061b      	lsls	r3, r3, #24
 8000588:	469c      	mov	ip, r3
 800058a:	4460      	add	r0, ip
 800058c:	e7f1      	b.n	8000572 <__aeabi_d2uiz+0x1a>
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	41e00000 	.word	0x41e00000

08000594 <__udivmoddi4>:
 8000594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000596:	4657      	mov	r7, sl
 8000598:	464e      	mov	r6, r9
 800059a:	4645      	mov	r5, r8
 800059c:	46de      	mov	lr, fp
 800059e:	b5e0      	push	{r5, r6, r7, lr}
 80005a0:	0004      	movs	r4, r0
 80005a2:	000d      	movs	r5, r1
 80005a4:	4692      	mov	sl, r2
 80005a6:	4699      	mov	r9, r3
 80005a8:	b083      	sub	sp, #12
 80005aa:	428b      	cmp	r3, r1
 80005ac:	d830      	bhi.n	8000610 <__udivmoddi4+0x7c>
 80005ae:	d02d      	beq.n	800060c <__udivmoddi4+0x78>
 80005b0:	4649      	mov	r1, r9
 80005b2:	4650      	mov	r0, sl
 80005b4:	f002 f93c 	bl	8002830 <__clzdi2>
 80005b8:	0029      	movs	r1, r5
 80005ba:	0006      	movs	r6, r0
 80005bc:	0020      	movs	r0, r4
 80005be:	f002 f937 	bl	8002830 <__clzdi2>
 80005c2:	1a33      	subs	r3, r6, r0
 80005c4:	4698      	mov	r8, r3
 80005c6:	3b20      	subs	r3, #32
 80005c8:	469b      	mov	fp, r3
 80005ca:	d433      	bmi.n	8000634 <__udivmoddi4+0xa0>
 80005cc:	465a      	mov	r2, fp
 80005ce:	4653      	mov	r3, sl
 80005d0:	4093      	lsls	r3, r2
 80005d2:	4642      	mov	r2, r8
 80005d4:	001f      	movs	r7, r3
 80005d6:	4653      	mov	r3, sl
 80005d8:	4093      	lsls	r3, r2
 80005da:	001e      	movs	r6, r3
 80005dc:	42af      	cmp	r7, r5
 80005de:	d83a      	bhi.n	8000656 <__udivmoddi4+0xc2>
 80005e0:	42af      	cmp	r7, r5
 80005e2:	d100      	bne.n	80005e6 <__udivmoddi4+0x52>
 80005e4:	e078      	b.n	80006d8 <__udivmoddi4+0x144>
 80005e6:	465b      	mov	r3, fp
 80005e8:	1ba4      	subs	r4, r4, r6
 80005ea:	41bd      	sbcs	r5, r7
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	da00      	bge.n	80005f2 <__udivmoddi4+0x5e>
 80005f0:	e075      	b.n	80006de <__udivmoddi4+0x14a>
 80005f2:	2200      	movs	r2, #0
 80005f4:	2300      	movs	r3, #0
 80005f6:	9200      	str	r2, [sp, #0]
 80005f8:	9301      	str	r3, [sp, #4]
 80005fa:	2301      	movs	r3, #1
 80005fc:	465a      	mov	r2, fp
 80005fe:	4093      	lsls	r3, r2
 8000600:	9301      	str	r3, [sp, #4]
 8000602:	2301      	movs	r3, #1
 8000604:	4642      	mov	r2, r8
 8000606:	4093      	lsls	r3, r2
 8000608:	9300      	str	r3, [sp, #0]
 800060a:	e028      	b.n	800065e <__udivmoddi4+0xca>
 800060c:	4282      	cmp	r2, r0
 800060e:	d9cf      	bls.n	80005b0 <__udivmoddi4+0x1c>
 8000610:	2200      	movs	r2, #0
 8000612:	2300      	movs	r3, #0
 8000614:	9200      	str	r2, [sp, #0]
 8000616:	9301      	str	r3, [sp, #4]
 8000618:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <__udivmoddi4+0x8e>
 800061e:	601c      	str	r4, [r3, #0]
 8000620:	605d      	str	r5, [r3, #4]
 8000622:	9800      	ldr	r0, [sp, #0]
 8000624:	9901      	ldr	r1, [sp, #4]
 8000626:	b003      	add	sp, #12
 8000628:	bcf0      	pop	{r4, r5, r6, r7}
 800062a:	46bb      	mov	fp, r7
 800062c:	46b2      	mov	sl, r6
 800062e:	46a9      	mov	r9, r5
 8000630:	46a0      	mov	r8, r4
 8000632:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000634:	4642      	mov	r2, r8
 8000636:	2320      	movs	r3, #32
 8000638:	1a9b      	subs	r3, r3, r2
 800063a:	4652      	mov	r2, sl
 800063c:	40da      	lsrs	r2, r3
 800063e:	4641      	mov	r1, r8
 8000640:	0013      	movs	r3, r2
 8000642:	464a      	mov	r2, r9
 8000644:	408a      	lsls	r2, r1
 8000646:	0017      	movs	r7, r2
 8000648:	4642      	mov	r2, r8
 800064a:	431f      	orrs	r7, r3
 800064c:	4653      	mov	r3, sl
 800064e:	4093      	lsls	r3, r2
 8000650:	001e      	movs	r6, r3
 8000652:	42af      	cmp	r7, r5
 8000654:	d9c4      	bls.n	80005e0 <__udivmoddi4+0x4c>
 8000656:	2200      	movs	r2, #0
 8000658:	2300      	movs	r3, #0
 800065a:	9200      	str	r2, [sp, #0]
 800065c:	9301      	str	r3, [sp, #4]
 800065e:	4643      	mov	r3, r8
 8000660:	2b00      	cmp	r3, #0
 8000662:	d0d9      	beq.n	8000618 <__udivmoddi4+0x84>
 8000664:	07fb      	lsls	r3, r7, #31
 8000666:	0872      	lsrs	r2, r6, #1
 8000668:	431a      	orrs	r2, r3
 800066a:	4646      	mov	r6, r8
 800066c:	087b      	lsrs	r3, r7, #1
 800066e:	e00e      	b.n	800068e <__udivmoddi4+0xfa>
 8000670:	42ab      	cmp	r3, r5
 8000672:	d101      	bne.n	8000678 <__udivmoddi4+0xe4>
 8000674:	42a2      	cmp	r2, r4
 8000676:	d80c      	bhi.n	8000692 <__udivmoddi4+0xfe>
 8000678:	1aa4      	subs	r4, r4, r2
 800067a:	419d      	sbcs	r5, r3
 800067c:	2001      	movs	r0, #1
 800067e:	1924      	adds	r4, r4, r4
 8000680:	416d      	adcs	r5, r5
 8000682:	2100      	movs	r1, #0
 8000684:	3e01      	subs	r6, #1
 8000686:	1824      	adds	r4, r4, r0
 8000688:	414d      	adcs	r5, r1
 800068a:	2e00      	cmp	r6, #0
 800068c:	d006      	beq.n	800069c <__udivmoddi4+0x108>
 800068e:	42ab      	cmp	r3, r5
 8000690:	d9ee      	bls.n	8000670 <__udivmoddi4+0xdc>
 8000692:	3e01      	subs	r6, #1
 8000694:	1924      	adds	r4, r4, r4
 8000696:	416d      	adcs	r5, r5
 8000698:	2e00      	cmp	r6, #0
 800069a:	d1f8      	bne.n	800068e <__udivmoddi4+0xfa>
 800069c:	9800      	ldr	r0, [sp, #0]
 800069e:	9901      	ldr	r1, [sp, #4]
 80006a0:	465b      	mov	r3, fp
 80006a2:	1900      	adds	r0, r0, r4
 80006a4:	4169      	adcs	r1, r5
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	db24      	blt.n	80006f4 <__udivmoddi4+0x160>
 80006aa:	002b      	movs	r3, r5
 80006ac:	465a      	mov	r2, fp
 80006ae:	4644      	mov	r4, r8
 80006b0:	40d3      	lsrs	r3, r2
 80006b2:	002a      	movs	r2, r5
 80006b4:	40e2      	lsrs	r2, r4
 80006b6:	001c      	movs	r4, r3
 80006b8:	465b      	mov	r3, fp
 80006ba:	0015      	movs	r5, r2
 80006bc:	2b00      	cmp	r3, #0
 80006be:	db2a      	blt.n	8000716 <__udivmoddi4+0x182>
 80006c0:	0026      	movs	r6, r4
 80006c2:	409e      	lsls	r6, r3
 80006c4:	0033      	movs	r3, r6
 80006c6:	0026      	movs	r6, r4
 80006c8:	4647      	mov	r7, r8
 80006ca:	40be      	lsls	r6, r7
 80006cc:	0032      	movs	r2, r6
 80006ce:	1a80      	subs	r0, r0, r2
 80006d0:	4199      	sbcs	r1, r3
 80006d2:	9000      	str	r0, [sp, #0]
 80006d4:	9101      	str	r1, [sp, #4]
 80006d6:	e79f      	b.n	8000618 <__udivmoddi4+0x84>
 80006d8:	42a3      	cmp	r3, r4
 80006da:	d8bc      	bhi.n	8000656 <__udivmoddi4+0xc2>
 80006dc:	e783      	b.n	80005e6 <__udivmoddi4+0x52>
 80006de:	4642      	mov	r2, r8
 80006e0:	2320      	movs	r3, #32
 80006e2:	2100      	movs	r1, #0
 80006e4:	1a9b      	subs	r3, r3, r2
 80006e6:	2200      	movs	r2, #0
 80006e8:	9100      	str	r1, [sp, #0]
 80006ea:	9201      	str	r2, [sp, #4]
 80006ec:	2201      	movs	r2, #1
 80006ee:	40da      	lsrs	r2, r3
 80006f0:	9201      	str	r2, [sp, #4]
 80006f2:	e786      	b.n	8000602 <__udivmoddi4+0x6e>
 80006f4:	4642      	mov	r2, r8
 80006f6:	2320      	movs	r3, #32
 80006f8:	1a9b      	subs	r3, r3, r2
 80006fa:	002a      	movs	r2, r5
 80006fc:	4646      	mov	r6, r8
 80006fe:	409a      	lsls	r2, r3
 8000700:	0023      	movs	r3, r4
 8000702:	40f3      	lsrs	r3, r6
 8000704:	4644      	mov	r4, r8
 8000706:	4313      	orrs	r3, r2
 8000708:	002a      	movs	r2, r5
 800070a:	40e2      	lsrs	r2, r4
 800070c:	001c      	movs	r4, r3
 800070e:	465b      	mov	r3, fp
 8000710:	0015      	movs	r5, r2
 8000712:	2b00      	cmp	r3, #0
 8000714:	dad4      	bge.n	80006c0 <__udivmoddi4+0x12c>
 8000716:	4642      	mov	r2, r8
 8000718:	002f      	movs	r7, r5
 800071a:	2320      	movs	r3, #32
 800071c:	0026      	movs	r6, r4
 800071e:	4097      	lsls	r7, r2
 8000720:	1a9b      	subs	r3, r3, r2
 8000722:	40de      	lsrs	r6, r3
 8000724:	003b      	movs	r3, r7
 8000726:	4333      	orrs	r3, r6
 8000728:	e7cd      	b.n	80006c6 <__udivmoddi4+0x132>
 800072a:	46c0      	nop			; (mov r8, r8)

0800072c <__gnu_ldivmod_helper>:
 800072c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800072e:	46ce      	mov	lr, r9
 8000730:	4647      	mov	r7, r8
 8000732:	b580      	push	{r7, lr}
 8000734:	4691      	mov	r9, r2
 8000736:	4698      	mov	r8, r3
 8000738:	0004      	movs	r4, r0
 800073a:	000d      	movs	r5, r1
 800073c:	f002 f884 	bl	8002848 <__divdi3>
 8000740:	0007      	movs	r7, r0
 8000742:	000e      	movs	r6, r1
 8000744:	0002      	movs	r2, r0
 8000746:	000b      	movs	r3, r1
 8000748:	4648      	mov	r0, r9
 800074a:	4641      	mov	r1, r8
 800074c:	f7ff fedc 	bl	8000508 <__aeabi_lmul>
 8000750:	1a24      	subs	r4, r4, r0
 8000752:	418d      	sbcs	r5, r1
 8000754:	9b08      	ldr	r3, [sp, #32]
 8000756:	0038      	movs	r0, r7
 8000758:	0031      	movs	r1, r6
 800075a:	601c      	str	r4, [r3, #0]
 800075c:	605d      	str	r5, [r3, #4]
 800075e:	bcc0      	pop	{r6, r7}
 8000760:	46b9      	mov	r9, r7
 8000762:	46b0      	mov	r8, r6
 8000764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000766:	46c0      	nop			; (mov r8, r8)

08000768 <__aeabi_fsub>:
 8000768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800076a:	4646      	mov	r6, r8
 800076c:	46d6      	mov	lr, sl
 800076e:	464f      	mov	r7, r9
 8000770:	0243      	lsls	r3, r0, #9
 8000772:	0a5b      	lsrs	r3, r3, #9
 8000774:	00da      	lsls	r2, r3, #3
 8000776:	4694      	mov	ip, r2
 8000778:	024a      	lsls	r2, r1, #9
 800077a:	b5c0      	push	{r6, r7, lr}
 800077c:	0044      	lsls	r4, r0, #1
 800077e:	0a56      	lsrs	r6, r2, #9
 8000780:	1c05      	adds	r5, r0, #0
 8000782:	46b0      	mov	r8, r6
 8000784:	0e24      	lsrs	r4, r4, #24
 8000786:	004e      	lsls	r6, r1, #1
 8000788:	0992      	lsrs	r2, r2, #6
 800078a:	001f      	movs	r7, r3
 800078c:	0020      	movs	r0, r4
 800078e:	4692      	mov	sl, r2
 8000790:	0fed      	lsrs	r5, r5, #31
 8000792:	0e36      	lsrs	r6, r6, #24
 8000794:	0fc9      	lsrs	r1, r1, #31
 8000796:	2eff      	cmp	r6, #255	; 0xff
 8000798:	d100      	bne.n	800079c <__aeabi_fsub+0x34>
 800079a:	e07f      	b.n	800089c <__aeabi_fsub+0x134>
 800079c:	2201      	movs	r2, #1
 800079e:	4051      	eors	r1, r2
 80007a0:	428d      	cmp	r5, r1
 80007a2:	d051      	beq.n	8000848 <__aeabi_fsub+0xe0>
 80007a4:	1ba2      	subs	r2, r4, r6
 80007a6:	4691      	mov	r9, r2
 80007a8:	2a00      	cmp	r2, #0
 80007aa:	dc00      	bgt.n	80007ae <__aeabi_fsub+0x46>
 80007ac:	e07e      	b.n	80008ac <__aeabi_fsub+0x144>
 80007ae:	2e00      	cmp	r6, #0
 80007b0:	d100      	bne.n	80007b4 <__aeabi_fsub+0x4c>
 80007b2:	e099      	b.n	80008e8 <__aeabi_fsub+0x180>
 80007b4:	2cff      	cmp	r4, #255	; 0xff
 80007b6:	d100      	bne.n	80007ba <__aeabi_fsub+0x52>
 80007b8:	e08c      	b.n	80008d4 <__aeabi_fsub+0x16c>
 80007ba:	2380      	movs	r3, #128	; 0x80
 80007bc:	4652      	mov	r2, sl
 80007be:	04db      	lsls	r3, r3, #19
 80007c0:	431a      	orrs	r2, r3
 80007c2:	4692      	mov	sl, r2
 80007c4:	464a      	mov	r2, r9
 80007c6:	2301      	movs	r3, #1
 80007c8:	2a1b      	cmp	r2, #27
 80007ca:	dc08      	bgt.n	80007de <__aeabi_fsub+0x76>
 80007cc:	4653      	mov	r3, sl
 80007ce:	2120      	movs	r1, #32
 80007d0:	40d3      	lsrs	r3, r2
 80007d2:	1a89      	subs	r1, r1, r2
 80007d4:	4652      	mov	r2, sl
 80007d6:	408a      	lsls	r2, r1
 80007d8:	1e51      	subs	r1, r2, #1
 80007da:	418a      	sbcs	r2, r1
 80007dc:	4313      	orrs	r3, r2
 80007de:	4662      	mov	r2, ip
 80007e0:	1ad3      	subs	r3, r2, r3
 80007e2:	015a      	lsls	r2, r3, #5
 80007e4:	d400      	bmi.n	80007e8 <__aeabi_fsub+0x80>
 80007e6:	e0f3      	b.n	80009d0 <__aeabi_fsub+0x268>
 80007e8:	019b      	lsls	r3, r3, #6
 80007ea:	099e      	lsrs	r6, r3, #6
 80007ec:	0030      	movs	r0, r6
 80007ee:	f002 f801 	bl	80027f4 <__clzsi2>
 80007f2:	3805      	subs	r0, #5
 80007f4:	4086      	lsls	r6, r0
 80007f6:	4284      	cmp	r4, r0
 80007f8:	dd00      	ble.n	80007fc <__aeabi_fsub+0x94>
 80007fa:	e0f7      	b.n	80009ec <__aeabi_fsub+0x284>
 80007fc:	0032      	movs	r2, r6
 80007fe:	1b04      	subs	r4, r0, r4
 8000800:	2020      	movs	r0, #32
 8000802:	3401      	adds	r4, #1
 8000804:	40e2      	lsrs	r2, r4
 8000806:	1b04      	subs	r4, r0, r4
 8000808:	40a6      	lsls	r6, r4
 800080a:	0033      	movs	r3, r6
 800080c:	1e5e      	subs	r6, r3, #1
 800080e:	41b3      	sbcs	r3, r6
 8000810:	2400      	movs	r4, #0
 8000812:	4313      	orrs	r3, r2
 8000814:	075a      	lsls	r2, r3, #29
 8000816:	d004      	beq.n	8000822 <__aeabi_fsub+0xba>
 8000818:	220f      	movs	r2, #15
 800081a:	401a      	ands	r2, r3
 800081c:	2a04      	cmp	r2, #4
 800081e:	d000      	beq.n	8000822 <__aeabi_fsub+0xba>
 8000820:	3304      	adds	r3, #4
 8000822:	015a      	lsls	r2, r3, #5
 8000824:	d400      	bmi.n	8000828 <__aeabi_fsub+0xc0>
 8000826:	e0d6      	b.n	80009d6 <__aeabi_fsub+0x26e>
 8000828:	1c62      	adds	r2, r4, #1
 800082a:	2cfe      	cmp	r4, #254	; 0xfe
 800082c:	d100      	bne.n	8000830 <__aeabi_fsub+0xc8>
 800082e:	e0da      	b.n	80009e6 <__aeabi_fsub+0x27e>
 8000830:	019b      	lsls	r3, r3, #6
 8000832:	0a5f      	lsrs	r7, r3, #9
 8000834:	b2d0      	uxtb	r0, r2
 8000836:	05c0      	lsls	r0, r0, #23
 8000838:	4338      	orrs	r0, r7
 800083a:	07ed      	lsls	r5, r5, #31
 800083c:	4328      	orrs	r0, r5
 800083e:	bce0      	pop	{r5, r6, r7}
 8000840:	46ba      	mov	sl, r7
 8000842:	46b1      	mov	r9, r6
 8000844:	46a8      	mov	r8, r5
 8000846:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000848:	1ba2      	subs	r2, r4, r6
 800084a:	4691      	mov	r9, r2
 800084c:	2a00      	cmp	r2, #0
 800084e:	dd63      	ble.n	8000918 <__aeabi_fsub+0x1b0>
 8000850:	2e00      	cmp	r6, #0
 8000852:	d100      	bne.n	8000856 <__aeabi_fsub+0xee>
 8000854:	e099      	b.n	800098a <__aeabi_fsub+0x222>
 8000856:	2cff      	cmp	r4, #255	; 0xff
 8000858:	d03c      	beq.n	80008d4 <__aeabi_fsub+0x16c>
 800085a:	2380      	movs	r3, #128	; 0x80
 800085c:	4652      	mov	r2, sl
 800085e:	04db      	lsls	r3, r3, #19
 8000860:	431a      	orrs	r2, r3
 8000862:	4692      	mov	sl, r2
 8000864:	464a      	mov	r2, r9
 8000866:	2301      	movs	r3, #1
 8000868:	2a1b      	cmp	r2, #27
 800086a:	dc08      	bgt.n	800087e <__aeabi_fsub+0x116>
 800086c:	4653      	mov	r3, sl
 800086e:	2120      	movs	r1, #32
 8000870:	40d3      	lsrs	r3, r2
 8000872:	1a89      	subs	r1, r1, r2
 8000874:	4652      	mov	r2, sl
 8000876:	408a      	lsls	r2, r1
 8000878:	1e51      	subs	r1, r2, #1
 800087a:	418a      	sbcs	r2, r1
 800087c:	4313      	orrs	r3, r2
 800087e:	4463      	add	r3, ip
 8000880:	015a      	lsls	r2, r3, #5
 8000882:	d400      	bmi.n	8000886 <__aeabi_fsub+0x11e>
 8000884:	e0a4      	b.n	80009d0 <__aeabi_fsub+0x268>
 8000886:	3401      	adds	r4, #1
 8000888:	2cff      	cmp	r4, #255	; 0xff
 800088a:	d100      	bne.n	800088e <__aeabi_fsub+0x126>
 800088c:	e0ab      	b.n	80009e6 <__aeabi_fsub+0x27e>
 800088e:	2201      	movs	r2, #1
 8000890:	4997      	ldr	r1, [pc, #604]	; (8000af0 <__aeabi_fsub+0x388>)
 8000892:	401a      	ands	r2, r3
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	400b      	ands	r3, r1
 8000898:	4313      	orrs	r3, r2
 800089a:	e7bb      	b.n	8000814 <__aeabi_fsub+0xac>
 800089c:	2a00      	cmp	r2, #0
 800089e:	d032      	beq.n	8000906 <__aeabi_fsub+0x19e>
 80008a0:	428d      	cmp	r5, r1
 80008a2:	d035      	beq.n	8000910 <__aeabi_fsub+0x1a8>
 80008a4:	22ff      	movs	r2, #255	; 0xff
 80008a6:	4252      	negs	r2, r2
 80008a8:	4691      	mov	r9, r2
 80008aa:	44a1      	add	r9, r4
 80008ac:	464a      	mov	r2, r9
 80008ae:	2a00      	cmp	r2, #0
 80008b0:	d051      	beq.n	8000956 <__aeabi_fsub+0x1ee>
 80008b2:	1b30      	subs	r0, r6, r4
 80008b4:	2c00      	cmp	r4, #0
 80008b6:	d000      	beq.n	80008ba <__aeabi_fsub+0x152>
 80008b8:	e09c      	b.n	80009f4 <__aeabi_fsub+0x28c>
 80008ba:	4663      	mov	r3, ip
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d100      	bne.n	80008c2 <__aeabi_fsub+0x15a>
 80008c0:	e0df      	b.n	8000a82 <__aeabi_fsub+0x31a>
 80008c2:	3801      	subs	r0, #1
 80008c4:	2800      	cmp	r0, #0
 80008c6:	d100      	bne.n	80008ca <__aeabi_fsub+0x162>
 80008c8:	e0f7      	b.n	8000aba <__aeabi_fsub+0x352>
 80008ca:	2eff      	cmp	r6, #255	; 0xff
 80008cc:	d000      	beq.n	80008d0 <__aeabi_fsub+0x168>
 80008ce:	e099      	b.n	8000a04 <__aeabi_fsub+0x29c>
 80008d0:	000d      	movs	r5, r1
 80008d2:	4643      	mov	r3, r8
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d100      	bne.n	80008da <__aeabi_fsub+0x172>
 80008d8:	e085      	b.n	80009e6 <__aeabi_fsub+0x27e>
 80008da:	2780      	movs	r7, #128	; 0x80
 80008dc:	03ff      	lsls	r7, r7, #15
 80008de:	431f      	orrs	r7, r3
 80008e0:	027f      	lsls	r7, r7, #9
 80008e2:	20ff      	movs	r0, #255	; 0xff
 80008e4:	0a7f      	lsrs	r7, r7, #9
 80008e6:	e7a6      	b.n	8000836 <__aeabi_fsub+0xce>
 80008e8:	4652      	mov	r2, sl
 80008ea:	2a00      	cmp	r2, #0
 80008ec:	d074      	beq.n	80009d8 <__aeabi_fsub+0x270>
 80008ee:	2201      	movs	r2, #1
 80008f0:	4252      	negs	r2, r2
 80008f2:	4690      	mov	r8, r2
 80008f4:	44c1      	add	r9, r8
 80008f6:	464a      	mov	r2, r9
 80008f8:	2a00      	cmp	r2, #0
 80008fa:	d100      	bne.n	80008fe <__aeabi_fsub+0x196>
 80008fc:	e0c8      	b.n	8000a90 <__aeabi_fsub+0x328>
 80008fe:	2cff      	cmp	r4, #255	; 0xff
 8000900:	d000      	beq.n	8000904 <__aeabi_fsub+0x19c>
 8000902:	e75f      	b.n	80007c4 <__aeabi_fsub+0x5c>
 8000904:	e7e6      	b.n	80008d4 <__aeabi_fsub+0x16c>
 8000906:	2201      	movs	r2, #1
 8000908:	4051      	eors	r1, r2
 800090a:	42a9      	cmp	r1, r5
 800090c:	d000      	beq.n	8000910 <__aeabi_fsub+0x1a8>
 800090e:	e749      	b.n	80007a4 <__aeabi_fsub+0x3c>
 8000910:	22ff      	movs	r2, #255	; 0xff
 8000912:	4252      	negs	r2, r2
 8000914:	4691      	mov	r9, r2
 8000916:	44a1      	add	r9, r4
 8000918:	464a      	mov	r2, r9
 800091a:	2a00      	cmp	r2, #0
 800091c:	d043      	beq.n	80009a6 <__aeabi_fsub+0x23e>
 800091e:	1b31      	subs	r1, r6, r4
 8000920:	2c00      	cmp	r4, #0
 8000922:	d100      	bne.n	8000926 <__aeabi_fsub+0x1be>
 8000924:	e08c      	b.n	8000a40 <__aeabi_fsub+0x2d8>
 8000926:	2eff      	cmp	r6, #255	; 0xff
 8000928:	d100      	bne.n	800092c <__aeabi_fsub+0x1c4>
 800092a:	e092      	b.n	8000a52 <__aeabi_fsub+0x2ea>
 800092c:	2380      	movs	r3, #128	; 0x80
 800092e:	4662      	mov	r2, ip
 8000930:	04db      	lsls	r3, r3, #19
 8000932:	431a      	orrs	r2, r3
 8000934:	4694      	mov	ip, r2
 8000936:	2301      	movs	r3, #1
 8000938:	291b      	cmp	r1, #27
 800093a:	dc09      	bgt.n	8000950 <__aeabi_fsub+0x1e8>
 800093c:	2020      	movs	r0, #32
 800093e:	4663      	mov	r3, ip
 8000940:	4662      	mov	r2, ip
 8000942:	40cb      	lsrs	r3, r1
 8000944:	1a41      	subs	r1, r0, r1
 8000946:	408a      	lsls	r2, r1
 8000948:	0011      	movs	r1, r2
 800094a:	1e48      	subs	r0, r1, #1
 800094c:	4181      	sbcs	r1, r0
 800094e:	430b      	orrs	r3, r1
 8000950:	0034      	movs	r4, r6
 8000952:	4453      	add	r3, sl
 8000954:	e794      	b.n	8000880 <__aeabi_fsub+0x118>
 8000956:	22fe      	movs	r2, #254	; 0xfe
 8000958:	1c66      	adds	r6, r4, #1
 800095a:	4232      	tst	r2, r6
 800095c:	d164      	bne.n	8000a28 <__aeabi_fsub+0x2c0>
 800095e:	2c00      	cmp	r4, #0
 8000960:	d000      	beq.n	8000964 <__aeabi_fsub+0x1fc>
 8000962:	e082      	b.n	8000a6a <__aeabi_fsub+0x302>
 8000964:	4663      	mov	r3, ip
 8000966:	2b00      	cmp	r3, #0
 8000968:	d100      	bne.n	800096c <__aeabi_fsub+0x204>
 800096a:	e0ab      	b.n	8000ac4 <__aeabi_fsub+0x35c>
 800096c:	4653      	mov	r3, sl
 800096e:	2b00      	cmp	r3, #0
 8000970:	d100      	bne.n	8000974 <__aeabi_fsub+0x20c>
 8000972:	e760      	b.n	8000836 <__aeabi_fsub+0xce>
 8000974:	4663      	mov	r3, ip
 8000976:	4652      	mov	r2, sl
 8000978:	1a9b      	subs	r3, r3, r2
 800097a:	015a      	lsls	r2, r3, #5
 800097c:	d400      	bmi.n	8000980 <__aeabi_fsub+0x218>
 800097e:	e0aa      	b.n	8000ad6 <__aeabi_fsub+0x36e>
 8000980:	4663      	mov	r3, ip
 8000982:	4652      	mov	r2, sl
 8000984:	000d      	movs	r5, r1
 8000986:	1ad3      	subs	r3, r2, r3
 8000988:	e744      	b.n	8000814 <__aeabi_fsub+0xac>
 800098a:	4652      	mov	r2, sl
 800098c:	2a00      	cmp	r2, #0
 800098e:	d023      	beq.n	80009d8 <__aeabi_fsub+0x270>
 8000990:	2201      	movs	r2, #1
 8000992:	4252      	negs	r2, r2
 8000994:	4690      	mov	r8, r2
 8000996:	44c1      	add	r9, r8
 8000998:	464a      	mov	r2, r9
 800099a:	2a00      	cmp	r2, #0
 800099c:	d075      	beq.n	8000a8a <__aeabi_fsub+0x322>
 800099e:	2cff      	cmp	r4, #255	; 0xff
 80009a0:	d000      	beq.n	80009a4 <__aeabi_fsub+0x23c>
 80009a2:	e75f      	b.n	8000864 <__aeabi_fsub+0xfc>
 80009a4:	e796      	b.n	80008d4 <__aeabi_fsub+0x16c>
 80009a6:	26fe      	movs	r6, #254	; 0xfe
 80009a8:	3401      	adds	r4, #1
 80009aa:	4226      	tst	r6, r4
 80009ac:	d153      	bne.n	8000a56 <__aeabi_fsub+0x2ee>
 80009ae:	2800      	cmp	r0, #0
 80009b0:	d172      	bne.n	8000a98 <__aeabi_fsub+0x330>
 80009b2:	4663      	mov	r3, ip
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d100      	bne.n	80009ba <__aeabi_fsub+0x252>
 80009b8:	e093      	b.n	8000ae2 <__aeabi_fsub+0x37a>
 80009ba:	4653      	mov	r3, sl
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d100      	bne.n	80009c2 <__aeabi_fsub+0x25a>
 80009c0:	e739      	b.n	8000836 <__aeabi_fsub+0xce>
 80009c2:	4463      	add	r3, ip
 80009c4:	2400      	movs	r4, #0
 80009c6:	015a      	lsls	r2, r3, #5
 80009c8:	d502      	bpl.n	80009d0 <__aeabi_fsub+0x268>
 80009ca:	4a4a      	ldr	r2, [pc, #296]	; (8000af4 <__aeabi_fsub+0x38c>)
 80009cc:	3401      	adds	r4, #1
 80009ce:	4013      	ands	r3, r2
 80009d0:	075a      	lsls	r2, r3, #29
 80009d2:	d000      	beq.n	80009d6 <__aeabi_fsub+0x26e>
 80009d4:	e720      	b.n	8000818 <__aeabi_fsub+0xb0>
 80009d6:	08db      	lsrs	r3, r3, #3
 80009d8:	2cff      	cmp	r4, #255	; 0xff
 80009da:	d100      	bne.n	80009de <__aeabi_fsub+0x276>
 80009dc:	e77a      	b.n	80008d4 <__aeabi_fsub+0x16c>
 80009de:	025b      	lsls	r3, r3, #9
 80009e0:	0a5f      	lsrs	r7, r3, #9
 80009e2:	b2e0      	uxtb	r0, r4
 80009e4:	e727      	b.n	8000836 <__aeabi_fsub+0xce>
 80009e6:	20ff      	movs	r0, #255	; 0xff
 80009e8:	2700      	movs	r7, #0
 80009ea:	e724      	b.n	8000836 <__aeabi_fsub+0xce>
 80009ec:	4b41      	ldr	r3, [pc, #260]	; (8000af4 <__aeabi_fsub+0x38c>)
 80009ee:	1a24      	subs	r4, r4, r0
 80009f0:	4033      	ands	r3, r6
 80009f2:	e70f      	b.n	8000814 <__aeabi_fsub+0xac>
 80009f4:	2eff      	cmp	r6, #255	; 0xff
 80009f6:	d100      	bne.n	80009fa <__aeabi_fsub+0x292>
 80009f8:	e76a      	b.n	80008d0 <__aeabi_fsub+0x168>
 80009fa:	2380      	movs	r3, #128	; 0x80
 80009fc:	4662      	mov	r2, ip
 80009fe:	04db      	lsls	r3, r3, #19
 8000a00:	431a      	orrs	r2, r3
 8000a02:	4694      	mov	ip, r2
 8000a04:	2301      	movs	r3, #1
 8000a06:	281b      	cmp	r0, #27
 8000a08:	dc09      	bgt.n	8000a1e <__aeabi_fsub+0x2b6>
 8000a0a:	2420      	movs	r4, #32
 8000a0c:	4663      	mov	r3, ip
 8000a0e:	4662      	mov	r2, ip
 8000a10:	40c3      	lsrs	r3, r0
 8000a12:	1a20      	subs	r0, r4, r0
 8000a14:	4082      	lsls	r2, r0
 8000a16:	0010      	movs	r0, r2
 8000a18:	1e44      	subs	r4, r0, #1
 8000a1a:	41a0      	sbcs	r0, r4
 8000a1c:	4303      	orrs	r3, r0
 8000a1e:	4652      	mov	r2, sl
 8000a20:	000d      	movs	r5, r1
 8000a22:	0034      	movs	r4, r6
 8000a24:	1ad3      	subs	r3, r2, r3
 8000a26:	e6dc      	b.n	80007e2 <__aeabi_fsub+0x7a>
 8000a28:	4663      	mov	r3, ip
 8000a2a:	4652      	mov	r2, sl
 8000a2c:	1a9e      	subs	r6, r3, r2
 8000a2e:	0173      	lsls	r3, r6, #5
 8000a30:	d417      	bmi.n	8000a62 <__aeabi_fsub+0x2fa>
 8000a32:	2e00      	cmp	r6, #0
 8000a34:	d000      	beq.n	8000a38 <__aeabi_fsub+0x2d0>
 8000a36:	e6d9      	b.n	80007ec <__aeabi_fsub+0x84>
 8000a38:	2500      	movs	r5, #0
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	2700      	movs	r7, #0
 8000a3e:	e6fa      	b.n	8000836 <__aeabi_fsub+0xce>
 8000a40:	4663      	mov	r3, ip
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d044      	beq.n	8000ad0 <__aeabi_fsub+0x368>
 8000a46:	3901      	subs	r1, #1
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	d04c      	beq.n	8000ae6 <__aeabi_fsub+0x37e>
 8000a4c:	2eff      	cmp	r6, #255	; 0xff
 8000a4e:	d000      	beq.n	8000a52 <__aeabi_fsub+0x2ea>
 8000a50:	e771      	b.n	8000936 <__aeabi_fsub+0x1ce>
 8000a52:	4643      	mov	r3, r8
 8000a54:	e73e      	b.n	80008d4 <__aeabi_fsub+0x16c>
 8000a56:	2cff      	cmp	r4, #255	; 0xff
 8000a58:	d0c5      	beq.n	80009e6 <__aeabi_fsub+0x27e>
 8000a5a:	4652      	mov	r2, sl
 8000a5c:	4462      	add	r2, ip
 8000a5e:	0853      	lsrs	r3, r2, #1
 8000a60:	e7b6      	b.n	80009d0 <__aeabi_fsub+0x268>
 8000a62:	4663      	mov	r3, ip
 8000a64:	000d      	movs	r5, r1
 8000a66:	1ad6      	subs	r6, r2, r3
 8000a68:	e6c0      	b.n	80007ec <__aeabi_fsub+0x84>
 8000a6a:	4662      	mov	r2, ip
 8000a6c:	2a00      	cmp	r2, #0
 8000a6e:	d116      	bne.n	8000a9e <__aeabi_fsub+0x336>
 8000a70:	4653      	mov	r3, sl
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d000      	beq.n	8000a78 <__aeabi_fsub+0x310>
 8000a76:	e72b      	b.n	80008d0 <__aeabi_fsub+0x168>
 8000a78:	2780      	movs	r7, #128	; 0x80
 8000a7a:	2500      	movs	r5, #0
 8000a7c:	20ff      	movs	r0, #255	; 0xff
 8000a7e:	03ff      	lsls	r7, r7, #15
 8000a80:	e6d9      	b.n	8000836 <__aeabi_fsub+0xce>
 8000a82:	000d      	movs	r5, r1
 8000a84:	4643      	mov	r3, r8
 8000a86:	0034      	movs	r4, r6
 8000a88:	e7a6      	b.n	80009d8 <__aeabi_fsub+0x270>
 8000a8a:	4653      	mov	r3, sl
 8000a8c:	4463      	add	r3, ip
 8000a8e:	e6f7      	b.n	8000880 <__aeabi_fsub+0x118>
 8000a90:	4663      	mov	r3, ip
 8000a92:	4652      	mov	r2, sl
 8000a94:	1a9b      	subs	r3, r3, r2
 8000a96:	e6a4      	b.n	80007e2 <__aeabi_fsub+0x7a>
 8000a98:	4662      	mov	r2, ip
 8000a9a:	2a00      	cmp	r2, #0
 8000a9c:	d0d9      	beq.n	8000a52 <__aeabi_fsub+0x2ea>
 8000a9e:	4652      	mov	r2, sl
 8000aa0:	2a00      	cmp	r2, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_fsub+0x33e>
 8000aa4:	e716      	b.n	80008d4 <__aeabi_fsub+0x16c>
 8000aa6:	2280      	movs	r2, #128	; 0x80
 8000aa8:	03d2      	lsls	r2, r2, #15
 8000aaa:	4213      	tst	r3, r2
 8000aac:	d100      	bne.n	8000ab0 <__aeabi_fsub+0x348>
 8000aae:	e711      	b.n	80008d4 <__aeabi_fsub+0x16c>
 8000ab0:	4640      	mov	r0, r8
 8000ab2:	4210      	tst	r0, r2
 8000ab4:	d000      	beq.n	8000ab8 <__aeabi_fsub+0x350>
 8000ab6:	e70d      	b.n	80008d4 <__aeabi_fsub+0x16c>
 8000ab8:	e70a      	b.n	80008d0 <__aeabi_fsub+0x168>
 8000aba:	4652      	mov	r2, sl
 8000abc:	000d      	movs	r5, r1
 8000abe:	0034      	movs	r4, r6
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	e68e      	b.n	80007e2 <__aeabi_fsub+0x7a>
 8000ac4:	4653      	mov	r3, sl
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d008      	beq.n	8000adc <__aeabi_fsub+0x374>
 8000aca:	000d      	movs	r5, r1
 8000acc:	4647      	mov	r7, r8
 8000ace:	e6b2      	b.n	8000836 <__aeabi_fsub+0xce>
 8000ad0:	4643      	mov	r3, r8
 8000ad2:	0034      	movs	r4, r6
 8000ad4:	e780      	b.n	80009d8 <__aeabi_fsub+0x270>
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d000      	beq.n	8000adc <__aeabi_fsub+0x374>
 8000ada:	e779      	b.n	80009d0 <__aeabi_fsub+0x268>
 8000adc:	2500      	movs	r5, #0
 8000ade:	2700      	movs	r7, #0
 8000ae0:	e6a9      	b.n	8000836 <__aeabi_fsub+0xce>
 8000ae2:	4647      	mov	r7, r8
 8000ae4:	e6a7      	b.n	8000836 <__aeabi_fsub+0xce>
 8000ae6:	4653      	mov	r3, sl
 8000ae8:	0034      	movs	r4, r6
 8000aea:	4463      	add	r3, ip
 8000aec:	e6c8      	b.n	8000880 <__aeabi_fsub+0x118>
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	7dffffff 	.word	0x7dffffff
 8000af4:	fbffffff 	.word	0xfbffffff

08000af8 <__aeabi_ui2f>:
 8000af8:	b570      	push	{r4, r5, r6, lr}
 8000afa:	1e05      	subs	r5, r0, #0
 8000afc:	d00e      	beq.n	8000b1c <__aeabi_ui2f+0x24>
 8000afe:	f001 fe79 	bl	80027f4 <__clzsi2>
 8000b02:	239e      	movs	r3, #158	; 0x9e
 8000b04:	0004      	movs	r4, r0
 8000b06:	1a1b      	subs	r3, r3, r0
 8000b08:	2b96      	cmp	r3, #150	; 0x96
 8000b0a:	dc0c      	bgt.n	8000b26 <__aeabi_ui2f+0x2e>
 8000b0c:	2808      	cmp	r0, #8
 8000b0e:	dd01      	ble.n	8000b14 <__aeabi_ui2f+0x1c>
 8000b10:	3c08      	subs	r4, #8
 8000b12:	40a5      	lsls	r5, r4
 8000b14:	026d      	lsls	r5, r5, #9
 8000b16:	0a6d      	lsrs	r5, r5, #9
 8000b18:	b2d8      	uxtb	r0, r3
 8000b1a:	e001      	b.n	8000b20 <__aeabi_ui2f+0x28>
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	2500      	movs	r5, #0
 8000b20:	05c0      	lsls	r0, r0, #23
 8000b22:	4328      	orrs	r0, r5
 8000b24:	bd70      	pop	{r4, r5, r6, pc}
 8000b26:	2b99      	cmp	r3, #153	; 0x99
 8000b28:	dd09      	ble.n	8000b3e <__aeabi_ui2f+0x46>
 8000b2a:	0002      	movs	r2, r0
 8000b2c:	0029      	movs	r1, r5
 8000b2e:	321b      	adds	r2, #27
 8000b30:	4091      	lsls	r1, r2
 8000b32:	1e4a      	subs	r2, r1, #1
 8000b34:	4191      	sbcs	r1, r2
 8000b36:	2205      	movs	r2, #5
 8000b38:	1a12      	subs	r2, r2, r0
 8000b3a:	40d5      	lsrs	r5, r2
 8000b3c:	430d      	orrs	r5, r1
 8000b3e:	2c05      	cmp	r4, #5
 8000b40:	dd01      	ble.n	8000b46 <__aeabi_ui2f+0x4e>
 8000b42:	1f62      	subs	r2, r4, #5
 8000b44:	4095      	lsls	r5, r2
 8000b46:	0029      	movs	r1, r5
 8000b48:	4e08      	ldr	r6, [pc, #32]	; (8000b6c <__aeabi_ui2f+0x74>)
 8000b4a:	4031      	ands	r1, r6
 8000b4c:	076a      	lsls	r2, r5, #29
 8000b4e:	d009      	beq.n	8000b64 <__aeabi_ui2f+0x6c>
 8000b50:	200f      	movs	r0, #15
 8000b52:	4028      	ands	r0, r5
 8000b54:	2804      	cmp	r0, #4
 8000b56:	d005      	beq.n	8000b64 <__aeabi_ui2f+0x6c>
 8000b58:	3104      	adds	r1, #4
 8000b5a:	014a      	lsls	r2, r1, #5
 8000b5c:	d502      	bpl.n	8000b64 <__aeabi_ui2f+0x6c>
 8000b5e:	239f      	movs	r3, #159	; 0x9f
 8000b60:	4031      	ands	r1, r6
 8000b62:	1b1b      	subs	r3, r3, r4
 8000b64:	0189      	lsls	r1, r1, #6
 8000b66:	0a4d      	lsrs	r5, r1, #9
 8000b68:	b2d8      	uxtb	r0, r3
 8000b6a:	e7d9      	b.n	8000b20 <__aeabi_ui2f+0x28>
 8000b6c:	fbffffff 	.word	0xfbffffff

08000b70 <__aeabi_dadd>:
 8000b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b72:	464f      	mov	r7, r9
 8000b74:	46d6      	mov	lr, sl
 8000b76:	4646      	mov	r6, r8
 8000b78:	000d      	movs	r5, r1
 8000b7a:	0001      	movs	r1, r0
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	b5c0      	push	{r6, r7, lr}
 8000b80:	0017      	movs	r7, r2
 8000b82:	032b      	lsls	r3, r5, #12
 8000b84:	0a5a      	lsrs	r2, r3, #9
 8000b86:	0f4b      	lsrs	r3, r1, #29
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	00ca      	lsls	r2, r1, #3
 8000b8c:	4691      	mov	r9, r2
 8000b8e:	0302      	lsls	r2, r0, #12
 8000b90:	006e      	lsls	r6, r5, #1
 8000b92:	0041      	lsls	r1, r0, #1
 8000b94:	0a52      	lsrs	r2, r2, #9
 8000b96:	0fec      	lsrs	r4, r5, #31
 8000b98:	0f7d      	lsrs	r5, r7, #29
 8000b9a:	4315      	orrs	r5, r2
 8000b9c:	0d76      	lsrs	r6, r6, #21
 8000b9e:	0d49      	lsrs	r1, r1, #21
 8000ba0:	0fc0      	lsrs	r0, r0, #31
 8000ba2:	4682      	mov	sl, r0
 8000ba4:	46ac      	mov	ip, r5
 8000ba6:	00ff      	lsls	r7, r7, #3
 8000ba8:	1a72      	subs	r2, r6, r1
 8000baa:	4284      	cmp	r4, r0
 8000bac:	d100      	bne.n	8000bb0 <__aeabi_dadd+0x40>
 8000bae:	e098      	b.n	8000ce2 <__aeabi_dadd+0x172>
 8000bb0:	2a00      	cmp	r2, #0
 8000bb2:	dc00      	bgt.n	8000bb6 <__aeabi_dadd+0x46>
 8000bb4:	e081      	b.n	8000cba <__aeabi_dadd+0x14a>
 8000bb6:	2900      	cmp	r1, #0
 8000bb8:	d100      	bne.n	8000bbc <__aeabi_dadd+0x4c>
 8000bba:	e0b6      	b.n	8000d2a <__aeabi_dadd+0x1ba>
 8000bbc:	49c9      	ldr	r1, [pc, #804]	; (8000ee4 <__aeabi_dadd+0x374>)
 8000bbe:	428e      	cmp	r6, r1
 8000bc0:	d100      	bne.n	8000bc4 <__aeabi_dadd+0x54>
 8000bc2:	e172      	b.n	8000eaa <__aeabi_dadd+0x33a>
 8000bc4:	2180      	movs	r1, #128	; 0x80
 8000bc6:	0028      	movs	r0, r5
 8000bc8:	0409      	lsls	r1, r1, #16
 8000bca:	4308      	orrs	r0, r1
 8000bcc:	4684      	mov	ip, r0
 8000bce:	2a38      	cmp	r2, #56	; 0x38
 8000bd0:	dd00      	ble.n	8000bd4 <__aeabi_dadd+0x64>
 8000bd2:	e15e      	b.n	8000e92 <__aeabi_dadd+0x322>
 8000bd4:	2a1f      	cmp	r2, #31
 8000bd6:	dd00      	ble.n	8000bda <__aeabi_dadd+0x6a>
 8000bd8:	e1ee      	b.n	8000fb8 <__aeabi_dadd+0x448>
 8000bda:	2020      	movs	r0, #32
 8000bdc:	0039      	movs	r1, r7
 8000bde:	4665      	mov	r5, ip
 8000be0:	1a80      	subs	r0, r0, r2
 8000be2:	4087      	lsls	r7, r0
 8000be4:	40d1      	lsrs	r1, r2
 8000be6:	4085      	lsls	r5, r0
 8000be8:	430d      	orrs	r5, r1
 8000bea:	0039      	movs	r1, r7
 8000bec:	1e4f      	subs	r7, r1, #1
 8000bee:	41b9      	sbcs	r1, r7
 8000bf0:	4667      	mov	r7, ip
 8000bf2:	40d7      	lsrs	r7, r2
 8000bf4:	4329      	orrs	r1, r5
 8000bf6:	1bdb      	subs	r3, r3, r7
 8000bf8:	464a      	mov	r2, r9
 8000bfa:	1a55      	subs	r5, r2, r1
 8000bfc:	45a9      	cmp	r9, r5
 8000bfe:	4189      	sbcs	r1, r1
 8000c00:	4249      	negs	r1, r1
 8000c02:	1a5b      	subs	r3, r3, r1
 8000c04:	4698      	mov	r8, r3
 8000c06:	4643      	mov	r3, r8
 8000c08:	021b      	lsls	r3, r3, #8
 8000c0a:	d400      	bmi.n	8000c0e <__aeabi_dadd+0x9e>
 8000c0c:	e0cc      	b.n	8000da8 <__aeabi_dadd+0x238>
 8000c0e:	4643      	mov	r3, r8
 8000c10:	025b      	lsls	r3, r3, #9
 8000c12:	0a5b      	lsrs	r3, r3, #9
 8000c14:	4698      	mov	r8, r3
 8000c16:	4643      	mov	r3, r8
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d100      	bne.n	8000c1e <__aeabi_dadd+0xae>
 8000c1c:	e12c      	b.n	8000e78 <__aeabi_dadd+0x308>
 8000c1e:	4640      	mov	r0, r8
 8000c20:	f001 fde8 	bl	80027f4 <__clzsi2>
 8000c24:	0001      	movs	r1, r0
 8000c26:	3908      	subs	r1, #8
 8000c28:	2220      	movs	r2, #32
 8000c2a:	0028      	movs	r0, r5
 8000c2c:	4643      	mov	r3, r8
 8000c2e:	1a52      	subs	r2, r2, r1
 8000c30:	408b      	lsls	r3, r1
 8000c32:	40d0      	lsrs	r0, r2
 8000c34:	408d      	lsls	r5, r1
 8000c36:	4303      	orrs	r3, r0
 8000c38:	428e      	cmp	r6, r1
 8000c3a:	dd00      	ble.n	8000c3e <__aeabi_dadd+0xce>
 8000c3c:	e117      	b.n	8000e6e <__aeabi_dadd+0x2fe>
 8000c3e:	1b8e      	subs	r6, r1, r6
 8000c40:	1c72      	adds	r2, r6, #1
 8000c42:	2a1f      	cmp	r2, #31
 8000c44:	dd00      	ble.n	8000c48 <__aeabi_dadd+0xd8>
 8000c46:	e1a7      	b.n	8000f98 <__aeabi_dadd+0x428>
 8000c48:	2120      	movs	r1, #32
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	002e      	movs	r6, r5
 8000c4e:	1a89      	subs	r1, r1, r2
 8000c50:	408d      	lsls	r5, r1
 8000c52:	4088      	lsls	r0, r1
 8000c54:	40d6      	lsrs	r6, r2
 8000c56:	40d3      	lsrs	r3, r2
 8000c58:	1e69      	subs	r1, r5, #1
 8000c5a:	418d      	sbcs	r5, r1
 8000c5c:	4330      	orrs	r0, r6
 8000c5e:	4698      	mov	r8, r3
 8000c60:	2600      	movs	r6, #0
 8000c62:	4305      	orrs	r5, r0
 8000c64:	076b      	lsls	r3, r5, #29
 8000c66:	d009      	beq.n	8000c7c <__aeabi_dadd+0x10c>
 8000c68:	230f      	movs	r3, #15
 8000c6a:	402b      	ands	r3, r5
 8000c6c:	2b04      	cmp	r3, #4
 8000c6e:	d005      	beq.n	8000c7c <__aeabi_dadd+0x10c>
 8000c70:	1d2b      	adds	r3, r5, #4
 8000c72:	42ab      	cmp	r3, r5
 8000c74:	41ad      	sbcs	r5, r5
 8000c76:	426d      	negs	r5, r5
 8000c78:	44a8      	add	r8, r5
 8000c7a:	001d      	movs	r5, r3
 8000c7c:	4643      	mov	r3, r8
 8000c7e:	021b      	lsls	r3, r3, #8
 8000c80:	d400      	bmi.n	8000c84 <__aeabi_dadd+0x114>
 8000c82:	e094      	b.n	8000dae <__aeabi_dadd+0x23e>
 8000c84:	4b97      	ldr	r3, [pc, #604]	; (8000ee4 <__aeabi_dadd+0x374>)
 8000c86:	1c72      	adds	r2, r6, #1
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d100      	bne.n	8000c8e <__aeabi_dadd+0x11e>
 8000c8c:	e09d      	b.n	8000dca <__aeabi_dadd+0x25a>
 8000c8e:	4641      	mov	r1, r8
 8000c90:	4b95      	ldr	r3, [pc, #596]	; (8000ee8 <__aeabi_dadd+0x378>)
 8000c92:	08ed      	lsrs	r5, r5, #3
 8000c94:	4019      	ands	r1, r3
 8000c96:	000b      	movs	r3, r1
 8000c98:	0552      	lsls	r2, r2, #21
 8000c9a:	0749      	lsls	r1, r1, #29
 8000c9c:	025b      	lsls	r3, r3, #9
 8000c9e:	4329      	orrs	r1, r5
 8000ca0:	0b1b      	lsrs	r3, r3, #12
 8000ca2:	0d52      	lsrs	r2, r2, #21
 8000ca4:	0512      	lsls	r2, r2, #20
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	07e4      	lsls	r4, r4, #31
 8000caa:	4323      	orrs	r3, r4
 8000cac:	0008      	movs	r0, r1
 8000cae:	0019      	movs	r1, r3
 8000cb0:	bce0      	pop	{r5, r6, r7}
 8000cb2:	46ba      	mov	sl, r7
 8000cb4:	46b1      	mov	r9, r6
 8000cb6:	46a8      	mov	r8, r5
 8000cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cba:	2a00      	cmp	r2, #0
 8000cbc:	d043      	beq.n	8000d46 <__aeabi_dadd+0x1d6>
 8000cbe:	1b8a      	subs	r2, r1, r6
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d000      	beq.n	8000cc6 <__aeabi_dadd+0x156>
 8000cc4:	e12a      	b.n	8000f1c <__aeabi_dadd+0x3ac>
 8000cc6:	464c      	mov	r4, r9
 8000cc8:	431c      	orrs	r4, r3
 8000cca:	d100      	bne.n	8000cce <__aeabi_dadd+0x15e>
 8000ccc:	e1d1      	b.n	8001072 <__aeabi_dadd+0x502>
 8000cce:	1e54      	subs	r4, r2, #1
 8000cd0:	2a01      	cmp	r2, #1
 8000cd2:	d100      	bne.n	8000cd6 <__aeabi_dadd+0x166>
 8000cd4:	e21f      	b.n	8001116 <__aeabi_dadd+0x5a6>
 8000cd6:	4d83      	ldr	r5, [pc, #524]	; (8000ee4 <__aeabi_dadd+0x374>)
 8000cd8:	42aa      	cmp	r2, r5
 8000cda:	d100      	bne.n	8000cde <__aeabi_dadd+0x16e>
 8000cdc:	e272      	b.n	80011c4 <__aeabi_dadd+0x654>
 8000cde:	0022      	movs	r2, r4
 8000ce0:	e123      	b.n	8000f2a <__aeabi_dadd+0x3ba>
 8000ce2:	2a00      	cmp	r2, #0
 8000ce4:	dc00      	bgt.n	8000ce8 <__aeabi_dadd+0x178>
 8000ce6:	e098      	b.n	8000e1a <__aeabi_dadd+0x2aa>
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d042      	beq.n	8000d72 <__aeabi_dadd+0x202>
 8000cec:	497d      	ldr	r1, [pc, #500]	; (8000ee4 <__aeabi_dadd+0x374>)
 8000cee:	428e      	cmp	r6, r1
 8000cf0:	d100      	bne.n	8000cf4 <__aeabi_dadd+0x184>
 8000cf2:	e0da      	b.n	8000eaa <__aeabi_dadd+0x33a>
 8000cf4:	2180      	movs	r1, #128	; 0x80
 8000cf6:	0028      	movs	r0, r5
 8000cf8:	0409      	lsls	r1, r1, #16
 8000cfa:	4308      	orrs	r0, r1
 8000cfc:	4684      	mov	ip, r0
 8000cfe:	2a38      	cmp	r2, #56	; 0x38
 8000d00:	dd00      	ble.n	8000d04 <__aeabi_dadd+0x194>
 8000d02:	e129      	b.n	8000f58 <__aeabi_dadd+0x3e8>
 8000d04:	2a1f      	cmp	r2, #31
 8000d06:	dc00      	bgt.n	8000d0a <__aeabi_dadd+0x19a>
 8000d08:	e187      	b.n	800101a <__aeabi_dadd+0x4aa>
 8000d0a:	0011      	movs	r1, r2
 8000d0c:	4665      	mov	r5, ip
 8000d0e:	3920      	subs	r1, #32
 8000d10:	40cd      	lsrs	r5, r1
 8000d12:	2a20      	cmp	r2, #32
 8000d14:	d004      	beq.n	8000d20 <__aeabi_dadd+0x1b0>
 8000d16:	2040      	movs	r0, #64	; 0x40
 8000d18:	4661      	mov	r1, ip
 8000d1a:	1a82      	subs	r2, r0, r2
 8000d1c:	4091      	lsls	r1, r2
 8000d1e:	430f      	orrs	r7, r1
 8000d20:	0039      	movs	r1, r7
 8000d22:	1e4f      	subs	r7, r1, #1
 8000d24:	41b9      	sbcs	r1, r7
 8000d26:	430d      	orrs	r5, r1
 8000d28:	e11b      	b.n	8000f62 <__aeabi_dadd+0x3f2>
 8000d2a:	0029      	movs	r1, r5
 8000d2c:	4339      	orrs	r1, r7
 8000d2e:	d100      	bne.n	8000d32 <__aeabi_dadd+0x1c2>
 8000d30:	e0b5      	b.n	8000e9e <__aeabi_dadd+0x32e>
 8000d32:	1e51      	subs	r1, r2, #1
 8000d34:	2a01      	cmp	r2, #1
 8000d36:	d100      	bne.n	8000d3a <__aeabi_dadd+0x1ca>
 8000d38:	e1ab      	b.n	8001092 <__aeabi_dadd+0x522>
 8000d3a:	486a      	ldr	r0, [pc, #424]	; (8000ee4 <__aeabi_dadd+0x374>)
 8000d3c:	4282      	cmp	r2, r0
 8000d3e:	d100      	bne.n	8000d42 <__aeabi_dadd+0x1d2>
 8000d40:	e1b2      	b.n	80010a8 <__aeabi_dadd+0x538>
 8000d42:	000a      	movs	r2, r1
 8000d44:	e743      	b.n	8000bce <__aeabi_dadd+0x5e>
 8000d46:	4969      	ldr	r1, [pc, #420]	; (8000eec <__aeabi_dadd+0x37c>)
 8000d48:	1c75      	adds	r5, r6, #1
 8000d4a:	420d      	tst	r5, r1
 8000d4c:	d000      	beq.n	8000d50 <__aeabi_dadd+0x1e0>
 8000d4e:	e0cf      	b.n	8000ef0 <__aeabi_dadd+0x380>
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d000      	beq.n	8000d56 <__aeabi_dadd+0x1e6>
 8000d54:	e193      	b.n	800107e <__aeabi_dadd+0x50e>
 8000d56:	4649      	mov	r1, r9
 8000d58:	4319      	orrs	r1, r3
 8000d5a:	d100      	bne.n	8000d5e <__aeabi_dadd+0x1ee>
 8000d5c:	e1d1      	b.n	8001102 <__aeabi_dadd+0x592>
 8000d5e:	4661      	mov	r1, ip
 8000d60:	4339      	orrs	r1, r7
 8000d62:	d000      	beq.n	8000d66 <__aeabi_dadd+0x1f6>
 8000d64:	e1e3      	b.n	800112e <__aeabi_dadd+0x5be>
 8000d66:	4649      	mov	r1, r9
 8000d68:	0758      	lsls	r0, r3, #29
 8000d6a:	08c9      	lsrs	r1, r1, #3
 8000d6c:	4301      	orrs	r1, r0
 8000d6e:	08db      	lsrs	r3, r3, #3
 8000d70:	e026      	b.n	8000dc0 <__aeabi_dadd+0x250>
 8000d72:	0029      	movs	r1, r5
 8000d74:	4339      	orrs	r1, r7
 8000d76:	d100      	bne.n	8000d7a <__aeabi_dadd+0x20a>
 8000d78:	e091      	b.n	8000e9e <__aeabi_dadd+0x32e>
 8000d7a:	1e51      	subs	r1, r2, #1
 8000d7c:	2a01      	cmp	r2, #1
 8000d7e:	d005      	beq.n	8000d8c <__aeabi_dadd+0x21c>
 8000d80:	4858      	ldr	r0, [pc, #352]	; (8000ee4 <__aeabi_dadd+0x374>)
 8000d82:	4282      	cmp	r2, r0
 8000d84:	d100      	bne.n	8000d88 <__aeabi_dadd+0x218>
 8000d86:	e18f      	b.n	80010a8 <__aeabi_dadd+0x538>
 8000d88:	000a      	movs	r2, r1
 8000d8a:	e7b8      	b.n	8000cfe <__aeabi_dadd+0x18e>
 8000d8c:	003d      	movs	r5, r7
 8000d8e:	444d      	add	r5, r9
 8000d90:	454d      	cmp	r5, r9
 8000d92:	4189      	sbcs	r1, r1
 8000d94:	4463      	add	r3, ip
 8000d96:	4698      	mov	r8, r3
 8000d98:	4249      	negs	r1, r1
 8000d9a:	4488      	add	r8, r1
 8000d9c:	4643      	mov	r3, r8
 8000d9e:	2602      	movs	r6, #2
 8000da0:	021b      	lsls	r3, r3, #8
 8000da2:	d500      	bpl.n	8000da6 <__aeabi_dadd+0x236>
 8000da4:	e0eb      	b.n	8000f7e <__aeabi_dadd+0x40e>
 8000da6:	3e01      	subs	r6, #1
 8000da8:	076b      	lsls	r3, r5, #29
 8000daa:	d000      	beq.n	8000dae <__aeabi_dadd+0x23e>
 8000dac:	e75c      	b.n	8000c68 <__aeabi_dadd+0xf8>
 8000dae:	4643      	mov	r3, r8
 8000db0:	08e9      	lsrs	r1, r5, #3
 8000db2:	075a      	lsls	r2, r3, #29
 8000db4:	4311      	orrs	r1, r2
 8000db6:	0032      	movs	r2, r6
 8000db8:	08db      	lsrs	r3, r3, #3
 8000dba:	484a      	ldr	r0, [pc, #296]	; (8000ee4 <__aeabi_dadd+0x374>)
 8000dbc:	4282      	cmp	r2, r0
 8000dbe:	d021      	beq.n	8000e04 <__aeabi_dadd+0x294>
 8000dc0:	031b      	lsls	r3, r3, #12
 8000dc2:	0552      	lsls	r2, r2, #21
 8000dc4:	0b1b      	lsrs	r3, r3, #12
 8000dc6:	0d52      	lsrs	r2, r2, #21
 8000dc8:	e76c      	b.n	8000ca4 <__aeabi_dadd+0x134>
 8000dca:	2300      	movs	r3, #0
 8000dcc:	2100      	movs	r1, #0
 8000dce:	e769      	b.n	8000ca4 <__aeabi_dadd+0x134>
 8000dd0:	002a      	movs	r2, r5
 8000dd2:	433a      	orrs	r2, r7
 8000dd4:	d069      	beq.n	8000eaa <__aeabi_dadd+0x33a>
 8000dd6:	464a      	mov	r2, r9
 8000dd8:	0758      	lsls	r0, r3, #29
 8000dda:	08d1      	lsrs	r1, r2, #3
 8000ddc:	08da      	lsrs	r2, r3, #3
 8000dde:	2380      	movs	r3, #128	; 0x80
 8000de0:	031b      	lsls	r3, r3, #12
 8000de2:	4308      	orrs	r0, r1
 8000de4:	421a      	tst	r2, r3
 8000de6:	d007      	beq.n	8000df8 <__aeabi_dadd+0x288>
 8000de8:	0029      	movs	r1, r5
 8000dea:	08ed      	lsrs	r5, r5, #3
 8000dec:	421d      	tst	r5, r3
 8000dee:	d103      	bne.n	8000df8 <__aeabi_dadd+0x288>
 8000df0:	002a      	movs	r2, r5
 8000df2:	08ff      	lsrs	r7, r7, #3
 8000df4:	0748      	lsls	r0, r1, #29
 8000df6:	4338      	orrs	r0, r7
 8000df8:	0f43      	lsrs	r3, r0, #29
 8000dfa:	00c1      	lsls	r1, r0, #3
 8000dfc:	075b      	lsls	r3, r3, #29
 8000dfe:	08c9      	lsrs	r1, r1, #3
 8000e00:	4319      	orrs	r1, r3
 8000e02:	0013      	movs	r3, r2
 8000e04:	000a      	movs	r2, r1
 8000e06:	431a      	orrs	r2, r3
 8000e08:	d100      	bne.n	8000e0c <__aeabi_dadd+0x29c>
 8000e0a:	e213      	b.n	8001234 <__aeabi_dadd+0x6c4>
 8000e0c:	2280      	movs	r2, #128	; 0x80
 8000e0e:	0312      	lsls	r2, r2, #12
 8000e10:	4313      	orrs	r3, r2
 8000e12:	031b      	lsls	r3, r3, #12
 8000e14:	4a33      	ldr	r2, [pc, #204]	; (8000ee4 <__aeabi_dadd+0x374>)
 8000e16:	0b1b      	lsrs	r3, r3, #12
 8000e18:	e744      	b.n	8000ca4 <__aeabi_dadd+0x134>
 8000e1a:	2a00      	cmp	r2, #0
 8000e1c:	d04b      	beq.n	8000eb6 <__aeabi_dadd+0x346>
 8000e1e:	1b8a      	subs	r2, r1, r6
 8000e20:	2e00      	cmp	r6, #0
 8000e22:	d100      	bne.n	8000e26 <__aeabi_dadd+0x2b6>
 8000e24:	e0e7      	b.n	8000ff6 <__aeabi_dadd+0x486>
 8000e26:	482f      	ldr	r0, [pc, #188]	; (8000ee4 <__aeabi_dadd+0x374>)
 8000e28:	4281      	cmp	r1, r0
 8000e2a:	d100      	bne.n	8000e2e <__aeabi_dadd+0x2be>
 8000e2c:	e195      	b.n	800115a <__aeabi_dadd+0x5ea>
 8000e2e:	2080      	movs	r0, #128	; 0x80
 8000e30:	0400      	lsls	r0, r0, #16
 8000e32:	4303      	orrs	r3, r0
 8000e34:	2a38      	cmp	r2, #56	; 0x38
 8000e36:	dd00      	ble.n	8000e3a <__aeabi_dadd+0x2ca>
 8000e38:	e143      	b.n	80010c2 <__aeabi_dadd+0x552>
 8000e3a:	2a1f      	cmp	r2, #31
 8000e3c:	dd00      	ble.n	8000e40 <__aeabi_dadd+0x2d0>
 8000e3e:	e1db      	b.n	80011f8 <__aeabi_dadd+0x688>
 8000e40:	2020      	movs	r0, #32
 8000e42:	001d      	movs	r5, r3
 8000e44:	464e      	mov	r6, r9
 8000e46:	1a80      	subs	r0, r0, r2
 8000e48:	4085      	lsls	r5, r0
 8000e4a:	40d6      	lsrs	r6, r2
 8000e4c:	4335      	orrs	r5, r6
 8000e4e:	464e      	mov	r6, r9
 8000e50:	4086      	lsls	r6, r0
 8000e52:	0030      	movs	r0, r6
 8000e54:	40d3      	lsrs	r3, r2
 8000e56:	1e46      	subs	r6, r0, #1
 8000e58:	41b0      	sbcs	r0, r6
 8000e5a:	449c      	add	ip, r3
 8000e5c:	4305      	orrs	r5, r0
 8000e5e:	19ed      	adds	r5, r5, r7
 8000e60:	42bd      	cmp	r5, r7
 8000e62:	419b      	sbcs	r3, r3
 8000e64:	425b      	negs	r3, r3
 8000e66:	4463      	add	r3, ip
 8000e68:	4698      	mov	r8, r3
 8000e6a:	000e      	movs	r6, r1
 8000e6c:	e07f      	b.n	8000f6e <__aeabi_dadd+0x3fe>
 8000e6e:	4a1e      	ldr	r2, [pc, #120]	; (8000ee8 <__aeabi_dadd+0x378>)
 8000e70:	1a76      	subs	r6, r6, r1
 8000e72:	4013      	ands	r3, r2
 8000e74:	4698      	mov	r8, r3
 8000e76:	e6f5      	b.n	8000c64 <__aeabi_dadd+0xf4>
 8000e78:	0028      	movs	r0, r5
 8000e7a:	f001 fcbb 	bl	80027f4 <__clzsi2>
 8000e7e:	0001      	movs	r1, r0
 8000e80:	3118      	adds	r1, #24
 8000e82:	291f      	cmp	r1, #31
 8000e84:	dc00      	bgt.n	8000e88 <__aeabi_dadd+0x318>
 8000e86:	e6cf      	b.n	8000c28 <__aeabi_dadd+0xb8>
 8000e88:	002b      	movs	r3, r5
 8000e8a:	3808      	subs	r0, #8
 8000e8c:	4083      	lsls	r3, r0
 8000e8e:	2500      	movs	r5, #0
 8000e90:	e6d2      	b.n	8000c38 <__aeabi_dadd+0xc8>
 8000e92:	4662      	mov	r2, ip
 8000e94:	433a      	orrs	r2, r7
 8000e96:	0011      	movs	r1, r2
 8000e98:	1e4f      	subs	r7, r1, #1
 8000e9a:	41b9      	sbcs	r1, r7
 8000e9c:	e6ac      	b.n	8000bf8 <__aeabi_dadd+0x88>
 8000e9e:	4649      	mov	r1, r9
 8000ea0:	0758      	lsls	r0, r3, #29
 8000ea2:	08c9      	lsrs	r1, r1, #3
 8000ea4:	4301      	orrs	r1, r0
 8000ea6:	08db      	lsrs	r3, r3, #3
 8000ea8:	e787      	b.n	8000dba <__aeabi_dadd+0x24a>
 8000eaa:	4649      	mov	r1, r9
 8000eac:	075a      	lsls	r2, r3, #29
 8000eae:	08c9      	lsrs	r1, r1, #3
 8000eb0:	4311      	orrs	r1, r2
 8000eb2:	08db      	lsrs	r3, r3, #3
 8000eb4:	e7a6      	b.n	8000e04 <__aeabi_dadd+0x294>
 8000eb6:	490d      	ldr	r1, [pc, #52]	; (8000eec <__aeabi_dadd+0x37c>)
 8000eb8:	1c70      	adds	r0, r6, #1
 8000eba:	4208      	tst	r0, r1
 8000ebc:	d000      	beq.n	8000ec0 <__aeabi_dadd+0x350>
 8000ebe:	e0bb      	b.n	8001038 <__aeabi_dadd+0x4c8>
 8000ec0:	2e00      	cmp	r6, #0
 8000ec2:	d000      	beq.n	8000ec6 <__aeabi_dadd+0x356>
 8000ec4:	e114      	b.n	80010f0 <__aeabi_dadd+0x580>
 8000ec6:	4649      	mov	r1, r9
 8000ec8:	4319      	orrs	r1, r3
 8000eca:	d100      	bne.n	8000ece <__aeabi_dadd+0x35e>
 8000ecc:	e175      	b.n	80011ba <__aeabi_dadd+0x64a>
 8000ece:	0029      	movs	r1, r5
 8000ed0:	4339      	orrs	r1, r7
 8000ed2:	d000      	beq.n	8000ed6 <__aeabi_dadd+0x366>
 8000ed4:	e17e      	b.n	80011d4 <__aeabi_dadd+0x664>
 8000ed6:	4649      	mov	r1, r9
 8000ed8:	0758      	lsls	r0, r3, #29
 8000eda:	08c9      	lsrs	r1, r1, #3
 8000edc:	4301      	orrs	r1, r0
 8000ede:	08db      	lsrs	r3, r3, #3
 8000ee0:	e76e      	b.n	8000dc0 <__aeabi_dadd+0x250>
 8000ee2:	46c0      	nop			; (mov r8, r8)
 8000ee4:	000007ff 	.word	0x000007ff
 8000ee8:	ff7fffff 	.word	0xff7fffff
 8000eec:	000007fe 	.word	0x000007fe
 8000ef0:	4649      	mov	r1, r9
 8000ef2:	1bcd      	subs	r5, r1, r7
 8000ef4:	4661      	mov	r1, ip
 8000ef6:	1a58      	subs	r0, r3, r1
 8000ef8:	45a9      	cmp	r9, r5
 8000efa:	4189      	sbcs	r1, r1
 8000efc:	4249      	negs	r1, r1
 8000efe:	4688      	mov	r8, r1
 8000f00:	0001      	movs	r1, r0
 8000f02:	4640      	mov	r0, r8
 8000f04:	1a09      	subs	r1, r1, r0
 8000f06:	4688      	mov	r8, r1
 8000f08:	0209      	lsls	r1, r1, #8
 8000f0a:	d500      	bpl.n	8000f0e <__aeabi_dadd+0x39e>
 8000f0c:	e0a6      	b.n	800105c <__aeabi_dadd+0x4ec>
 8000f0e:	4641      	mov	r1, r8
 8000f10:	4329      	orrs	r1, r5
 8000f12:	d000      	beq.n	8000f16 <__aeabi_dadd+0x3a6>
 8000f14:	e67f      	b.n	8000c16 <__aeabi_dadd+0xa6>
 8000f16:	2300      	movs	r3, #0
 8000f18:	2400      	movs	r4, #0
 8000f1a:	e751      	b.n	8000dc0 <__aeabi_dadd+0x250>
 8000f1c:	4cc7      	ldr	r4, [pc, #796]	; (800123c <__aeabi_dadd+0x6cc>)
 8000f1e:	42a1      	cmp	r1, r4
 8000f20:	d100      	bne.n	8000f24 <__aeabi_dadd+0x3b4>
 8000f22:	e0c7      	b.n	80010b4 <__aeabi_dadd+0x544>
 8000f24:	2480      	movs	r4, #128	; 0x80
 8000f26:	0424      	lsls	r4, r4, #16
 8000f28:	4323      	orrs	r3, r4
 8000f2a:	2a38      	cmp	r2, #56	; 0x38
 8000f2c:	dc54      	bgt.n	8000fd8 <__aeabi_dadd+0x468>
 8000f2e:	2a1f      	cmp	r2, #31
 8000f30:	dd00      	ble.n	8000f34 <__aeabi_dadd+0x3c4>
 8000f32:	e0cc      	b.n	80010ce <__aeabi_dadd+0x55e>
 8000f34:	2420      	movs	r4, #32
 8000f36:	4648      	mov	r0, r9
 8000f38:	1aa4      	subs	r4, r4, r2
 8000f3a:	001d      	movs	r5, r3
 8000f3c:	464e      	mov	r6, r9
 8000f3e:	40a0      	lsls	r0, r4
 8000f40:	40d6      	lsrs	r6, r2
 8000f42:	40a5      	lsls	r5, r4
 8000f44:	0004      	movs	r4, r0
 8000f46:	40d3      	lsrs	r3, r2
 8000f48:	4662      	mov	r2, ip
 8000f4a:	4335      	orrs	r5, r6
 8000f4c:	1e66      	subs	r6, r4, #1
 8000f4e:	41b4      	sbcs	r4, r6
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	469c      	mov	ip, r3
 8000f54:	4325      	orrs	r5, r4
 8000f56:	e044      	b.n	8000fe2 <__aeabi_dadd+0x472>
 8000f58:	4662      	mov	r2, ip
 8000f5a:	433a      	orrs	r2, r7
 8000f5c:	0015      	movs	r5, r2
 8000f5e:	1e6f      	subs	r7, r5, #1
 8000f60:	41bd      	sbcs	r5, r7
 8000f62:	444d      	add	r5, r9
 8000f64:	454d      	cmp	r5, r9
 8000f66:	4189      	sbcs	r1, r1
 8000f68:	4249      	negs	r1, r1
 8000f6a:	4688      	mov	r8, r1
 8000f6c:	4498      	add	r8, r3
 8000f6e:	4643      	mov	r3, r8
 8000f70:	021b      	lsls	r3, r3, #8
 8000f72:	d400      	bmi.n	8000f76 <__aeabi_dadd+0x406>
 8000f74:	e718      	b.n	8000da8 <__aeabi_dadd+0x238>
 8000f76:	4bb1      	ldr	r3, [pc, #708]	; (800123c <__aeabi_dadd+0x6cc>)
 8000f78:	3601      	adds	r6, #1
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	d049      	beq.n	8001012 <__aeabi_dadd+0x4a2>
 8000f7e:	4642      	mov	r2, r8
 8000f80:	4baf      	ldr	r3, [pc, #700]	; (8001240 <__aeabi_dadd+0x6d0>)
 8000f82:	2101      	movs	r1, #1
 8000f84:	401a      	ands	r2, r3
 8000f86:	0013      	movs	r3, r2
 8000f88:	086a      	lsrs	r2, r5, #1
 8000f8a:	400d      	ands	r5, r1
 8000f8c:	4315      	orrs	r5, r2
 8000f8e:	07d9      	lsls	r1, r3, #31
 8000f90:	085b      	lsrs	r3, r3, #1
 8000f92:	4698      	mov	r8, r3
 8000f94:	430d      	orrs	r5, r1
 8000f96:	e665      	b.n	8000c64 <__aeabi_dadd+0xf4>
 8000f98:	0018      	movs	r0, r3
 8000f9a:	3e1f      	subs	r6, #31
 8000f9c:	40f0      	lsrs	r0, r6
 8000f9e:	2a20      	cmp	r2, #32
 8000fa0:	d003      	beq.n	8000faa <__aeabi_dadd+0x43a>
 8000fa2:	2140      	movs	r1, #64	; 0x40
 8000fa4:	1a8a      	subs	r2, r1, r2
 8000fa6:	4093      	lsls	r3, r2
 8000fa8:	431d      	orrs	r5, r3
 8000faa:	1e69      	subs	r1, r5, #1
 8000fac:	418d      	sbcs	r5, r1
 8000fae:	2300      	movs	r3, #0
 8000fb0:	2600      	movs	r6, #0
 8000fb2:	4698      	mov	r8, r3
 8000fb4:	4305      	orrs	r5, r0
 8000fb6:	e6f7      	b.n	8000da8 <__aeabi_dadd+0x238>
 8000fb8:	0011      	movs	r1, r2
 8000fba:	4665      	mov	r5, ip
 8000fbc:	3920      	subs	r1, #32
 8000fbe:	40cd      	lsrs	r5, r1
 8000fc0:	2a20      	cmp	r2, #32
 8000fc2:	d004      	beq.n	8000fce <__aeabi_dadd+0x45e>
 8000fc4:	2040      	movs	r0, #64	; 0x40
 8000fc6:	4661      	mov	r1, ip
 8000fc8:	1a82      	subs	r2, r0, r2
 8000fca:	4091      	lsls	r1, r2
 8000fcc:	430f      	orrs	r7, r1
 8000fce:	0039      	movs	r1, r7
 8000fd0:	1e4f      	subs	r7, r1, #1
 8000fd2:	41b9      	sbcs	r1, r7
 8000fd4:	4329      	orrs	r1, r5
 8000fd6:	e60f      	b.n	8000bf8 <__aeabi_dadd+0x88>
 8000fd8:	464a      	mov	r2, r9
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	001d      	movs	r5, r3
 8000fde:	1e6b      	subs	r3, r5, #1
 8000fe0:	419d      	sbcs	r5, r3
 8000fe2:	1b7d      	subs	r5, r7, r5
 8000fe4:	42af      	cmp	r7, r5
 8000fe6:	419b      	sbcs	r3, r3
 8000fe8:	4662      	mov	r2, ip
 8000fea:	425b      	negs	r3, r3
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	4698      	mov	r8, r3
 8000ff0:	4654      	mov	r4, sl
 8000ff2:	000e      	movs	r6, r1
 8000ff4:	e607      	b.n	8000c06 <__aeabi_dadd+0x96>
 8000ff6:	4648      	mov	r0, r9
 8000ff8:	4318      	orrs	r0, r3
 8000ffa:	d100      	bne.n	8000ffe <__aeabi_dadd+0x48e>
 8000ffc:	e0b3      	b.n	8001166 <__aeabi_dadd+0x5f6>
 8000ffe:	1e50      	subs	r0, r2, #1
 8001000:	2a01      	cmp	r2, #1
 8001002:	d100      	bne.n	8001006 <__aeabi_dadd+0x496>
 8001004:	e10d      	b.n	8001222 <__aeabi_dadd+0x6b2>
 8001006:	4d8d      	ldr	r5, [pc, #564]	; (800123c <__aeabi_dadd+0x6cc>)
 8001008:	42aa      	cmp	r2, r5
 800100a:	d100      	bne.n	800100e <__aeabi_dadd+0x49e>
 800100c:	e0a5      	b.n	800115a <__aeabi_dadd+0x5ea>
 800100e:	0002      	movs	r2, r0
 8001010:	e710      	b.n	8000e34 <__aeabi_dadd+0x2c4>
 8001012:	0032      	movs	r2, r6
 8001014:	2300      	movs	r3, #0
 8001016:	2100      	movs	r1, #0
 8001018:	e644      	b.n	8000ca4 <__aeabi_dadd+0x134>
 800101a:	2120      	movs	r1, #32
 800101c:	0038      	movs	r0, r7
 800101e:	1a89      	subs	r1, r1, r2
 8001020:	4665      	mov	r5, ip
 8001022:	408f      	lsls	r7, r1
 8001024:	408d      	lsls	r5, r1
 8001026:	40d0      	lsrs	r0, r2
 8001028:	1e79      	subs	r1, r7, #1
 800102a:	418f      	sbcs	r7, r1
 800102c:	4305      	orrs	r5, r0
 800102e:	433d      	orrs	r5, r7
 8001030:	4667      	mov	r7, ip
 8001032:	40d7      	lsrs	r7, r2
 8001034:	19db      	adds	r3, r3, r7
 8001036:	e794      	b.n	8000f62 <__aeabi_dadd+0x3f2>
 8001038:	4a80      	ldr	r2, [pc, #512]	; (800123c <__aeabi_dadd+0x6cc>)
 800103a:	4290      	cmp	r0, r2
 800103c:	d100      	bne.n	8001040 <__aeabi_dadd+0x4d0>
 800103e:	e0ec      	b.n	800121a <__aeabi_dadd+0x6aa>
 8001040:	0039      	movs	r1, r7
 8001042:	4449      	add	r1, r9
 8001044:	4549      	cmp	r1, r9
 8001046:	4192      	sbcs	r2, r2
 8001048:	4463      	add	r3, ip
 800104a:	4252      	negs	r2, r2
 800104c:	189b      	adds	r3, r3, r2
 800104e:	07dd      	lsls	r5, r3, #31
 8001050:	0849      	lsrs	r1, r1, #1
 8001052:	085b      	lsrs	r3, r3, #1
 8001054:	4698      	mov	r8, r3
 8001056:	0006      	movs	r6, r0
 8001058:	430d      	orrs	r5, r1
 800105a:	e6a5      	b.n	8000da8 <__aeabi_dadd+0x238>
 800105c:	464a      	mov	r2, r9
 800105e:	1abd      	subs	r5, r7, r2
 8001060:	42af      	cmp	r7, r5
 8001062:	4189      	sbcs	r1, r1
 8001064:	4662      	mov	r2, ip
 8001066:	4249      	negs	r1, r1
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	1a5b      	subs	r3, r3, r1
 800106c:	4698      	mov	r8, r3
 800106e:	4654      	mov	r4, sl
 8001070:	e5d1      	b.n	8000c16 <__aeabi_dadd+0xa6>
 8001072:	076c      	lsls	r4, r5, #29
 8001074:	08f9      	lsrs	r1, r7, #3
 8001076:	4321      	orrs	r1, r4
 8001078:	08eb      	lsrs	r3, r5, #3
 800107a:	0004      	movs	r4, r0
 800107c:	e69d      	b.n	8000dba <__aeabi_dadd+0x24a>
 800107e:	464a      	mov	r2, r9
 8001080:	431a      	orrs	r2, r3
 8001082:	d175      	bne.n	8001170 <__aeabi_dadd+0x600>
 8001084:	4661      	mov	r1, ip
 8001086:	4339      	orrs	r1, r7
 8001088:	d114      	bne.n	80010b4 <__aeabi_dadd+0x544>
 800108a:	2380      	movs	r3, #128	; 0x80
 800108c:	2400      	movs	r4, #0
 800108e:	031b      	lsls	r3, r3, #12
 8001090:	e6bc      	b.n	8000e0c <__aeabi_dadd+0x29c>
 8001092:	464a      	mov	r2, r9
 8001094:	1bd5      	subs	r5, r2, r7
 8001096:	45a9      	cmp	r9, r5
 8001098:	4189      	sbcs	r1, r1
 800109a:	4662      	mov	r2, ip
 800109c:	4249      	negs	r1, r1
 800109e:	1a9b      	subs	r3, r3, r2
 80010a0:	1a5b      	subs	r3, r3, r1
 80010a2:	4698      	mov	r8, r3
 80010a4:	2601      	movs	r6, #1
 80010a6:	e5ae      	b.n	8000c06 <__aeabi_dadd+0x96>
 80010a8:	464a      	mov	r2, r9
 80010aa:	08d1      	lsrs	r1, r2, #3
 80010ac:	075a      	lsls	r2, r3, #29
 80010ae:	4311      	orrs	r1, r2
 80010b0:	08db      	lsrs	r3, r3, #3
 80010b2:	e6a7      	b.n	8000e04 <__aeabi_dadd+0x294>
 80010b4:	4663      	mov	r3, ip
 80010b6:	08f9      	lsrs	r1, r7, #3
 80010b8:	075a      	lsls	r2, r3, #29
 80010ba:	4654      	mov	r4, sl
 80010bc:	4311      	orrs	r1, r2
 80010be:	08db      	lsrs	r3, r3, #3
 80010c0:	e6a0      	b.n	8000e04 <__aeabi_dadd+0x294>
 80010c2:	464a      	mov	r2, r9
 80010c4:	4313      	orrs	r3, r2
 80010c6:	001d      	movs	r5, r3
 80010c8:	1e6b      	subs	r3, r5, #1
 80010ca:	419d      	sbcs	r5, r3
 80010cc:	e6c7      	b.n	8000e5e <__aeabi_dadd+0x2ee>
 80010ce:	0014      	movs	r4, r2
 80010d0:	001e      	movs	r6, r3
 80010d2:	3c20      	subs	r4, #32
 80010d4:	40e6      	lsrs	r6, r4
 80010d6:	2a20      	cmp	r2, #32
 80010d8:	d005      	beq.n	80010e6 <__aeabi_dadd+0x576>
 80010da:	2440      	movs	r4, #64	; 0x40
 80010dc:	1aa2      	subs	r2, r4, r2
 80010de:	4093      	lsls	r3, r2
 80010e0:	464a      	mov	r2, r9
 80010e2:	431a      	orrs	r2, r3
 80010e4:	4691      	mov	r9, r2
 80010e6:	464d      	mov	r5, r9
 80010e8:	1e6b      	subs	r3, r5, #1
 80010ea:	419d      	sbcs	r5, r3
 80010ec:	4335      	orrs	r5, r6
 80010ee:	e778      	b.n	8000fe2 <__aeabi_dadd+0x472>
 80010f0:	464a      	mov	r2, r9
 80010f2:	431a      	orrs	r2, r3
 80010f4:	d000      	beq.n	80010f8 <__aeabi_dadd+0x588>
 80010f6:	e66b      	b.n	8000dd0 <__aeabi_dadd+0x260>
 80010f8:	076b      	lsls	r3, r5, #29
 80010fa:	08f9      	lsrs	r1, r7, #3
 80010fc:	4319      	orrs	r1, r3
 80010fe:	08eb      	lsrs	r3, r5, #3
 8001100:	e680      	b.n	8000e04 <__aeabi_dadd+0x294>
 8001102:	4661      	mov	r1, ip
 8001104:	4339      	orrs	r1, r7
 8001106:	d054      	beq.n	80011b2 <__aeabi_dadd+0x642>
 8001108:	4663      	mov	r3, ip
 800110a:	08f9      	lsrs	r1, r7, #3
 800110c:	075c      	lsls	r4, r3, #29
 800110e:	4321      	orrs	r1, r4
 8001110:	08db      	lsrs	r3, r3, #3
 8001112:	0004      	movs	r4, r0
 8001114:	e654      	b.n	8000dc0 <__aeabi_dadd+0x250>
 8001116:	464a      	mov	r2, r9
 8001118:	1abd      	subs	r5, r7, r2
 800111a:	42af      	cmp	r7, r5
 800111c:	4189      	sbcs	r1, r1
 800111e:	4662      	mov	r2, ip
 8001120:	4249      	negs	r1, r1
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	1a5b      	subs	r3, r3, r1
 8001126:	4698      	mov	r8, r3
 8001128:	0004      	movs	r4, r0
 800112a:	2601      	movs	r6, #1
 800112c:	e56b      	b.n	8000c06 <__aeabi_dadd+0x96>
 800112e:	464a      	mov	r2, r9
 8001130:	1bd5      	subs	r5, r2, r7
 8001132:	45a9      	cmp	r9, r5
 8001134:	4189      	sbcs	r1, r1
 8001136:	4662      	mov	r2, ip
 8001138:	4249      	negs	r1, r1
 800113a:	1a9a      	subs	r2, r3, r2
 800113c:	1a52      	subs	r2, r2, r1
 800113e:	4690      	mov	r8, r2
 8001140:	0212      	lsls	r2, r2, #8
 8001142:	d532      	bpl.n	80011aa <__aeabi_dadd+0x63a>
 8001144:	464a      	mov	r2, r9
 8001146:	1abd      	subs	r5, r7, r2
 8001148:	42af      	cmp	r7, r5
 800114a:	4189      	sbcs	r1, r1
 800114c:	4662      	mov	r2, ip
 800114e:	4249      	negs	r1, r1
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	1a5b      	subs	r3, r3, r1
 8001154:	4698      	mov	r8, r3
 8001156:	0004      	movs	r4, r0
 8001158:	e584      	b.n	8000c64 <__aeabi_dadd+0xf4>
 800115a:	4663      	mov	r3, ip
 800115c:	08f9      	lsrs	r1, r7, #3
 800115e:	075a      	lsls	r2, r3, #29
 8001160:	4311      	orrs	r1, r2
 8001162:	08db      	lsrs	r3, r3, #3
 8001164:	e64e      	b.n	8000e04 <__aeabi_dadd+0x294>
 8001166:	08f9      	lsrs	r1, r7, #3
 8001168:	0768      	lsls	r0, r5, #29
 800116a:	4301      	orrs	r1, r0
 800116c:	08eb      	lsrs	r3, r5, #3
 800116e:	e624      	b.n	8000dba <__aeabi_dadd+0x24a>
 8001170:	4662      	mov	r2, ip
 8001172:	433a      	orrs	r2, r7
 8001174:	d100      	bne.n	8001178 <__aeabi_dadd+0x608>
 8001176:	e698      	b.n	8000eaa <__aeabi_dadd+0x33a>
 8001178:	464a      	mov	r2, r9
 800117a:	08d1      	lsrs	r1, r2, #3
 800117c:	075a      	lsls	r2, r3, #29
 800117e:	4311      	orrs	r1, r2
 8001180:	08da      	lsrs	r2, r3, #3
 8001182:	2380      	movs	r3, #128	; 0x80
 8001184:	031b      	lsls	r3, r3, #12
 8001186:	421a      	tst	r2, r3
 8001188:	d008      	beq.n	800119c <__aeabi_dadd+0x62c>
 800118a:	4660      	mov	r0, ip
 800118c:	08c5      	lsrs	r5, r0, #3
 800118e:	421d      	tst	r5, r3
 8001190:	d104      	bne.n	800119c <__aeabi_dadd+0x62c>
 8001192:	4654      	mov	r4, sl
 8001194:	002a      	movs	r2, r5
 8001196:	08f9      	lsrs	r1, r7, #3
 8001198:	0743      	lsls	r3, r0, #29
 800119a:	4319      	orrs	r1, r3
 800119c:	0f4b      	lsrs	r3, r1, #29
 800119e:	00c9      	lsls	r1, r1, #3
 80011a0:	075b      	lsls	r3, r3, #29
 80011a2:	08c9      	lsrs	r1, r1, #3
 80011a4:	4319      	orrs	r1, r3
 80011a6:	0013      	movs	r3, r2
 80011a8:	e62c      	b.n	8000e04 <__aeabi_dadd+0x294>
 80011aa:	4641      	mov	r1, r8
 80011ac:	4329      	orrs	r1, r5
 80011ae:	d000      	beq.n	80011b2 <__aeabi_dadd+0x642>
 80011b0:	e5fa      	b.n	8000da8 <__aeabi_dadd+0x238>
 80011b2:	2300      	movs	r3, #0
 80011b4:	000a      	movs	r2, r1
 80011b6:	2400      	movs	r4, #0
 80011b8:	e602      	b.n	8000dc0 <__aeabi_dadd+0x250>
 80011ba:	076b      	lsls	r3, r5, #29
 80011bc:	08f9      	lsrs	r1, r7, #3
 80011be:	4319      	orrs	r1, r3
 80011c0:	08eb      	lsrs	r3, r5, #3
 80011c2:	e5fd      	b.n	8000dc0 <__aeabi_dadd+0x250>
 80011c4:	4663      	mov	r3, ip
 80011c6:	08f9      	lsrs	r1, r7, #3
 80011c8:	075b      	lsls	r3, r3, #29
 80011ca:	4319      	orrs	r1, r3
 80011cc:	4663      	mov	r3, ip
 80011ce:	0004      	movs	r4, r0
 80011d0:	08db      	lsrs	r3, r3, #3
 80011d2:	e617      	b.n	8000e04 <__aeabi_dadd+0x294>
 80011d4:	003d      	movs	r5, r7
 80011d6:	444d      	add	r5, r9
 80011d8:	4463      	add	r3, ip
 80011da:	454d      	cmp	r5, r9
 80011dc:	4189      	sbcs	r1, r1
 80011de:	4698      	mov	r8, r3
 80011e0:	4249      	negs	r1, r1
 80011e2:	4488      	add	r8, r1
 80011e4:	4643      	mov	r3, r8
 80011e6:	021b      	lsls	r3, r3, #8
 80011e8:	d400      	bmi.n	80011ec <__aeabi_dadd+0x67c>
 80011ea:	e5dd      	b.n	8000da8 <__aeabi_dadd+0x238>
 80011ec:	4642      	mov	r2, r8
 80011ee:	4b14      	ldr	r3, [pc, #80]	; (8001240 <__aeabi_dadd+0x6d0>)
 80011f0:	2601      	movs	r6, #1
 80011f2:	401a      	ands	r2, r3
 80011f4:	4690      	mov	r8, r2
 80011f6:	e5d7      	b.n	8000da8 <__aeabi_dadd+0x238>
 80011f8:	0010      	movs	r0, r2
 80011fa:	001e      	movs	r6, r3
 80011fc:	3820      	subs	r0, #32
 80011fe:	40c6      	lsrs	r6, r0
 8001200:	2a20      	cmp	r2, #32
 8001202:	d005      	beq.n	8001210 <__aeabi_dadd+0x6a0>
 8001204:	2040      	movs	r0, #64	; 0x40
 8001206:	1a82      	subs	r2, r0, r2
 8001208:	4093      	lsls	r3, r2
 800120a:	464a      	mov	r2, r9
 800120c:	431a      	orrs	r2, r3
 800120e:	4691      	mov	r9, r2
 8001210:	464d      	mov	r5, r9
 8001212:	1e6b      	subs	r3, r5, #1
 8001214:	419d      	sbcs	r5, r3
 8001216:	4335      	orrs	r5, r6
 8001218:	e621      	b.n	8000e5e <__aeabi_dadd+0x2ee>
 800121a:	0002      	movs	r2, r0
 800121c:	2300      	movs	r3, #0
 800121e:	2100      	movs	r1, #0
 8001220:	e540      	b.n	8000ca4 <__aeabi_dadd+0x134>
 8001222:	464a      	mov	r2, r9
 8001224:	19d5      	adds	r5, r2, r7
 8001226:	42bd      	cmp	r5, r7
 8001228:	4189      	sbcs	r1, r1
 800122a:	4463      	add	r3, ip
 800122c:	4698      	mov	r8, r3
 800122e:	4249      	negs	r1, r1
 8001230:	4488      	add	r8, r1
 8001232:	e5b3      	b.n	8000d9c <__aeabi_dadd+0x22c>
 8001234:	2100      	movs	r1, #0
 8001236:	4a01      	ldr	r2, [pc, #4]	; (800123c <__aeabi_dadd+0x6cc>)
 8001238:	000b      	movs	r3, r1
 800123a:	e533      	b.n	8000ca4 <__aeabi_dadd+0x134>
 800123c:	000007ff 	.word	0x000007ff
 8001240:	ff7fffff 	.word	0xff7fffff

08001244 <__aeabi_ddiv>:
 8001244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001246:	4657      	mov	r7, sl
 8001248:	464e      	mov	r6, r9
 800124a:	4645      	mov	r5, r8
 800124c:	46de      	mov	lr, fp
 800124e:	b5e0      	push	{r5, r6, r7, lr}
 8001250:	4681      	mov	r9, r0
 8001252:	0005      	movs	r5, r0
 8001254:	030c      	lsls	r4, r1, #12
 8001256:	0048      	lsls	r0, r1, #1
 8001258:	4692      	mov	sl, r2
 800125a:	001f      	movs	r7, r3
 800125c:	b085      	sub	sp, #20
 800125e:	0b24      	lsrs	r4, r4, #12
 8001260:	0d40      	lsrs	r0, r0, #21
 8001262:	0fce      	lsrs	r6, r1, #31
 8001264:	2800      	cmp	r0, #0
 8001266:	d059      	beq.n	800131c <__aeabi_ddiv+0xd8>
 8001268:	4b87      	ldr	r3, [pc, #540]	; (8001488 <__aeabi_ddiv+0x244>)
 800126a:	4298      	cmp	r0, r3
 800126c:	d100      	bne.n	8001270 <__aeabi_ddiv+0x2c>
 800126e:	e098      	b.n	80013a2 <__aeabi_ddiv+0x15e>
 8001270:	0f6b      	lsrs	r3, r5, #29
 8001272:	00e4      	lsls	r4, r4, #3
 8001274:	431c      	orrs	r4, r3
 8001276:	2380      	movs	r3, #128	; 0x80
 8001278:	041b      	lsls	r3, r3, #16
 800127a:	4323      	orrs	r3, r4
 800127c:	4698      	mov	r8, r3
 800127e:	4b83      	ldr	r3, [pc, #524]	; (800148c <__aeabi_ddiv+0x248>)
 8001280:	00ed      	lsls	r5, r5, #3
 8001282:	469b      	mov	fp, r3
 8001284:	2300      	movs	r3, #0
 8001286:	4699      	mov	r9, r3
 8001288:	4483      	add	fp, r0
 800128a:	9300      	str	r3, [sp, #0]
 800128c:	033c      	lsls	r4, r7, #12
 800128e:	007b      	lsls	r3, r7, #1
 8001290:	4650      	mov	r0, sl
 8001292:	0b24      	lsrs	r4, r4, #12
 8001294:	0d5b      	lsrs	r3, r3, #21
 8001296:	0fff      	lsrs	r7, r7, #31
 8001298:	2b00      	cmp	r3, #0
 800129a:	d067      	beq.n	800136c <__aeabi_ddiv+0x128>
 800129c:	4a7a      	ldr	r2, [pc, #488]	; (8001488 <__aeabi_ddiv+0x244>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d018      	beq.n	80012d4 <__aeabi_ddiv+0x90>
 80012a2:	497a      	ldr	r1, [pc, #488]	; (800148c <__aeabi_ddiv+0x248>)
 80012a4:	0f42      	lsrs	r2, r0, #29
 80012a6:	468c      	mov	ip, r1
 80012a8:	00e4      	lsls	r4, r4, #3
 80012aa:	4659      	mov	r1, fp
 80012ac:	4314      	orrs	r4, r2
 80012ae:	2280      	movs	r2, #128	; 0x80
 80012b0:	4463      	add	r3, ip
 80012b2:	0412      	lsls	r2, r2, #16
 80012b4:	1acb      	subs	r3, r1, r3
 80012b6:	4314      	orrs	r4, r2
 80012b8:	469b      	mov	fp, r3
 80012ba:	00c2      	lsls	r2, r0, #3
 80012bc:	2000      	movs	r0, #0
 80012be:	0033      	movs	r3, r6
 80012c0:	407b      	eors	r3, r7
 80012c2:	469a      	mov	sl, r3
 80012c4:	464b      	mov	r3, r9
 80012c6:	2b0f      	cmp	r3, #15
 80012c8:	d900      	bls.n	80012cc <__aeabi_ddiv+0x88>
 80012ca:	e0ef      	b.n	80014ac <__aeabi_ddiv+0x268>
 80012cc:	4970      	ldr	r1, [pc, #448]	; (8001490 <__aeabi_ddiv+0x24c>)
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	58cb      	ldr	r3, [r1, r3]
 80012d2:	469f      	mov	pc, r3
 80012d4:	4b6f      	ldr	r3, [pc, #444]	; (8001494 <__aeabi_ddiv+0x250>)
 80012d6:	4652      	mov	r2, sl
 80012d8:	469c      	mov	ip, r3
 80012da:	4322      	orrs	r2, r4
 80012dc:	44e3      	add	fp, ip
 80012de:	2a00      	cmp	r2, #0
 80012e0:	d000      	beq.n	80012e4 <__aeabi_ddiv+0xa0>
 80012e2:	e095      	b.n	8001410 <__aeabi_ddiv+0x1cc>
 80012e4:	4649      	mov	r1, r9
 80012e6:	2302      	movs	r3, #2
 80012e8:	4319      	orrs	r1, r3
 80012ea:	4689      	mov	r9, r1
 80012ec:	2400      	movs	r4, #0
 80012ee:	2002      	movs	r0, #2
 80012f0:	e7e5      	b.n	80012be <__aeabi_ddiv+0x7a>
 80012f2:	2300      	movs	r3, #0
 80012f4:	2400      	movs	r4, #0
 80012f6:	2500      	movs	r5, #0
 80012f8:	4652      	mov	r2, sl
 80012fa:	051b      	lsls	r3, r3, #20
 80012fc:	4323      	orrs	r3, r4
 80012fe:	07d2      	lsls	r2, r2, #31
 8001300:	4313      	orrs	r3, r2
 8001302:	0028      	movs	r0, r5
 8001304:	0019      	movs	r1, r3
 8001306:	b005      	add	sp, #20
 8001308:	bcf0      	pop	{r4, r5, r6, r7}
 800130a:	46bb      	mov	fp, r7
 800130c:	46b2      	mov	sl, r6
 800130e:	46a9      	mov	r9, r5
 8001310:	46a0      	mov	r8, r4
 8001312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001314:	2400      	movs	r4, #0
 8001316:	2500      	movs	r5, #0
 8001318:	4b5b      	ldr	r3, [pc, #364]	; (8001488 <__aeabi_ddiv+0x244>)
 800131a:	e7ed      	b.n	80012f8 <__aeabi_ddiv+0xb4>
 800131c:	464b      	mov	r3, r9
 800131e:	4323      	orrs	r3, r4
 8001320:	4698      	mov	r8, r3
 8001322:	d100      	bne.n	8001326 <__aeabi_ddiv+0xe2>
 8001324:	e089      	b.n	800143a <__aeabi_ddiv+0x1f6>
 8001326:	2c00      	cmp	r4, #0
 8001328:	d100      	bne.n	800132c <__aeabi_ddiv+0xe8>
 800132a:	e1e0      	b.n	80016ee <__aeabi_ddiv+0x4aa>
 800132c:	0020      	movs	r0, r4
 800132e:	f001 fa61 	bl	80027f4 <__clzsi2>
 8001332:	0001      	movs	r1, r0
 8001334:	0002      	movs	r2, r0
 8001336:	390b      	subs	r1, #11
 8001338:	231d      	movs	r3, #29
 800133a:	1a5b      	subs	r3, r3, r1
 800133c:	4649      	mov	r1, r9
 800133e:	0010      	movs	r0, r2
 8001340:	40d9      	lsrs	r1, r3
 8001342:	3808      	subs	r0, #8
 8001344:	4084      	lsls	r4, r0
 8001346:	000b      	movs	r3, r1
 8001348:	464d      	mov	r5, r9
 800134a:	4323      	orrs	r3, r4
 800134c:	4698      	mov	r8, r3
 800134e:	4085      	lsls	r5, r0
 8001350:	4851      	ldr	r0, [pc, #324]	; (8001498 <__aeabi_ddiv+0x254>)
 8001352:	033c      	lsls	r4, r7, #12
 8001354:	1a83      	subs	r3, r0, r2
 8001356:	469b      	mov	fp, r3
 8001358:	2300      	movs	r3, #0
 800135a:	4699      	mov	r9, r3
 800135c:	9300      	str	r3, [sp, #0]
 800135e:	007b      	lsls	r3, r7, #1
 8001360:	4650      	mov	r0, sl
 8001362:	0b24      	lsrs	r4, r4, #12
 8001364:	0d5b      	lsrs	r3, r3, #21
 8001366:	0fff      	lsrs	r7, r7, #31
 8001368:	2b00      	cmp	r3, #0
 800136a:	d197      	bne.n	800129c <__aeabi_ddiv+0x58>
 800136c:	4652      	mov	r2, sl
 800136e:	4322      	orrs	r2, r4
 8001370:	d055      	beq.n	800141e <__aeabi_ddiv+0x1da>
 8001372:	2c00      	cmp	r4, #0
 8001374:	d100      	bne.n	8001378 <__aeabi_ddiv+0x134>
 8001376:	e1ca      	b.n	800170e <__aeabi_ddiv+0x4ca>
 8001378:	0020      	movs	r0, r4
 800137a:	f001 fa3b 	bl	80027f4 <__clzsi2>
 800137e:	0002      	movs	r2, r0
 8001380:	3a0b      	subs	r2, #11
 8001382:	231d      	movs	r3, #29
 8001384:	0001      	movs	r1, r0
 8001386:	1a9b      	subs	r3, r3, r2
 8001388:	4652      	mov	r2, sl
 800138a:	3908      	subs	r1, #8
 800138c:	40da      	lsrs	r2, r3
 800138e:	408c      	lsls	r4, r1
 8001390:	4314      	orrs	r4, r2
 8001392:	4652      	mov	r2, sl
 8001394:	408a      	lsls	r2, r1
 8001396:	4b41      	ldr	r3, [pc, #260]	; (800149c <__aeabi_ddiv+0x258>)
 8001398:	4458      	add	r0, fp
 800139a:	469b      	mov	fp, r3
 800139c:	4483      	add	fp, r0
 800139e:	2000      	movs	r0, #0
 80013a0:	e78d      	b.n	80012be <__aeabi_ddiv+0x7a>
 80013a2:	464b      	mov	r3, r9
 80013a4:	4323      	orrs	r3, r4
 80013a6:	4698      	mov	r8, r3
 80013a8:	d140      	bne.n	800142c <__aeabi_ddiv+0x1e8>
 80013aa:	2308      	movs	r3, #8
 80013ac:	4699      	mov	r9, r3
 80013ae:	3b06      	subs	r3, #6
 80013b0:	2500      	movs	r5, #0
 80013b2:	4683      	mov	fp, r0
 80013b4:	9300      	str	r3, [sp, #0]
 80013b6:	e769      	b.n	800128c <__aeabi_ddiv+0x48>
 80013b8:	46b2      	mov	sl, r6
 80013ba:	9b00      	ldr	r3, [sp, #0]
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d0a9      	beq.n	8001314 <__aeabi_ddiv+0xd0>
 80013c0:	2b03      	cmp	r3, #3
 80013c2:	d100      	bne.n	80013c6 <__aeabi_ddiv+0x182>
 80013c4:	e211      	b.n	80017ea <__aeabi_ddiv+0x5a6>
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d093      	beq.n	80012f2 <__aeabi_ddiv+0xae>
 80013ca:	4a35      	ldr	r2, [pc, #212]	; (80014a0 <__aeabi_ddiv+0x25c>)
 80013cc:	445a      	add	r2, fp
 80013ce:	2a00      	cmp	r2, #0
 80013d0:	dc00      	bgt.n	80013d4 <__aeabi_ddiv+0x190>
 80013d2:	e13c      	b.n	800164e <__aeabi_ddiv+0x40a>
 80013d4:	076b      	lsls	r3, r5, #29
 80013d6:	d000      	beq.n	80013da <__aeabi_ddiv+0x196>
 80013d8:	e1a7      	b.n	800172a <__aeabi_ddiv+0x4e6>
 80013da:	08ed      	lsrs	r5, r5, #3
 80013dc:	4643      	mov	r3, r8
 80013de:	01db      	lsls	r3, r3, #7
 80013e0:	d506      	bpl.n	80013f0 <__aeabi_ddiv+0x1ac>
 80013e2:	4642      	mov	r2, r8
 80013e4:	4b2f      	ldr	r3, [pc, #188]	; (80014a4 <__aeabi_ddiv+0x260>)
 80013e6:	401a      	ands	r2, r3
 80013e8:	4690      	mov	r8, r2
 80013ea:	2280      	movs	r2, #128	; 0x80
 80013ec:	00d2      	lsls	r2, r2, #3
 80013ee:	445a      	add	r2, fp
 80013f0:	4b2d      	ldr	r3, [pc, #180]	; (80014a8 <__aeabi_ddiv+0x264>)
 80013f2:	429a      	cmp	r2, r3
 80013f4:	dc8e      	bgt.n	8001314 <__aeabi_ddiv+0xd0>
 80013f6:	4643      	mov	r3, r8
 80013f8:	0552      	lsls	r2, r2, #21
 80013fa:	0758      	lsls	r0, r3, #29
 80013fc:	025c      	lsls	r4, r3, #9
 80013fe:	4305      	orrs	r5, r0
 8001400:	0b24      	lsrs	r4, r4, #12
 8001402:	0d53      	lsrs	r3, r2, #21
 8001404:	e778      	b.n	80012f8 <__aeabi_ddiv+0xb4>
 8001406:	46ba      	mov	sl, r7
 8001408:	46a0      	mov	r8, r4
 800140a:	0015      	movs	r5, r2
 800140c:	9000      	str	r0, [sp, #0]
 800140e:	e7d4      	b.n	80013ba <__aeabi_ddiv+0x176>
 8001410:	464a      	mov	r2, r9
 8001412:	2303      	movs	r3, #3
 8001414:	431a      	orrs	r2, r3
 8001416:	4691      	mov	r9, r2
 8001418:	2003      	movs	r0, #3
 800141a:	4652      	mov	r2, sl
 800141c:	e74f      	b.n	80012be <__aeabi_ddiv+0x7a>
 800141e:	4649      	mov	r1, r9
 8001420:	2301      	movs	r3, #1
 8001422:	4319      	orrs	r1, r3
 8001424:	4689      	mov	r9, r1
 8001426:	2400      	movs	r4, #0
 8001428:	2001      	movs	r0, #1
 800142a:	e748      	b.n	80012be <__aeabi_ddiv+0x7a>
 800142c:	230c      	movs	r3, #12
 800142e:	4699      	mov	r9, r3
 8001430:	3b09      	subs	r3, #9
 8001432:	46a0      	mov	r8, r4
 8001434:	4683      	mov	fp, r0
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	e728      	b.n	800128c <__aeabi_ddiv+0x48>
 800143a:	2304      	movs	r3, #4
 800143c:	4699      	mov	r9, r3
 800143e:	2300      	movs	r3, #0
 8001440:	469b      	mov	fp, r3
 8001442:	3301      	adds	r3, #1
 8001444:	2500      	movs	r5, #0
 8001446:	9300      	str	r3, [sp, #0]
 8001448:	e720      	b.n	800128c <__aeabi_ddiv+0x48>
 800144a:	2300      	movs	r3, #0
 800144c:	2480      	movs	r4, #128	; 0x80
 800144e:	469a      	mov	sl, r3
 8001450:	2500      	movs	r5, #0
 8001452:	4b0d      	ldr	r3, [pc, #52]	; (8001488 <__aeabi_ddiv+0x244>)
 8001454:	0324      	lsls	r4, r4, #12
 8001456:	e74f      	b.n	80012f8 <__aeabi_ddiv+0xb4>
 8001458:	2380      	movs	r3, #128	; 0x80
 800145a:	4641      	mov	r1, r8
 800145c:	031b      	lsls	r3, r3, #12
 800145e:	4219      	tst	r1, r3
 8001460:	d008      	beq.n	8001474 <__aeabi_ddiv+0x230>
 8001462:	421c      	tst	r4, r3
 8001464:	d106      	bne.n	8001474 <__aeabi_ddiv+0x230>
 8001466:	431c      	orrs	r4, r3
 8001468:	0324      	lsls	r4, r4, #12
 800146a:	46ba      	mov	sl, r7
 800146c:	0015      	movs	r5, r2
 800146e:	4b06      	ldr	r3, [pc, #24]	; (8001488 <__aeabi_ddiv+0x244>)
 8001470:	0b24      	lsrs	r4, r4, #12
 8001472:	e741      	b.n	80012f8 <__aeabi_ddiv+0xb4>
 8001474:	2480      	movs	r4, #128	; 0x80
 8001476:	4643      	mov	r3, r8
 8001478:	0324      	lsls	r4, r4, #12
 800147a:	431c      	orrs	r4, r3
 800147c:	0324      	lsls	r4, r4, #12
 800147e:	46b2      	mov	sl, r6
 8001480:	4b01      	ldr	r3, [pc, #4]	; (8001488 <__aeabi_ddiv+0x244>)
 8001482:	0b24      	lsrs	r4, r4, #12
 8001484:	e738      	b.n	80012f8 <__aeabi_ddiv+0xb4>
 8001486:	46c0      	nop			; (mov r8, r8)
 8001488:	000007ff 	.word	0x000007ff
 800148c:	fffffc01 	.word	0xfffffc01
 8001490:	0801ffb0 	.word	0x0801ffb0
 8001494:	fffff801 	.word	0xfffff801
 8001498:	fffffc0d 	.word	0xfffffc0d
 800149c:	000003f3 	.word	0x000003f3
 80014a0:	000003ff 	.word	0x000003ff
 80014a4:	feffffff 	.word	0xfeffffff
 80014a8:	000007fe 	.word	0x000007fe
 80014ac:	4544      	cmp	r4, r8
 80014ae:	d200      	bcs.n	80014b2 <__aeabi_ddiv+0x26e>
 80014b0:	e116      	b.n	80016e0 <__aeabi_ddiv+0x49c>
 80014b2:	d100      	bne.n	80014b6 <__aeabi_ddiv+0x272>
 80014b4:	e111      	b.n	80016da <__aeabi_ddiv+0x496>
 80014b6:	2301      	movs	r3, #1
 80014b8:	425b      	negs	r3, r3
 80014ba:	469c      	mov	ip, r3
 80014bc:	002e      	movs	r6, r5
 80014be:	4640      	mov	r0, r8
 80014c0:	2500      	movs	r5, #0
 80014c2:	44e3      	add	fp, ip
 80014c4:	0223      	lsls	r3, r4, #8
 80014c6:	0e14      	lsrs	r4, r2, #24
 80014c8:	431c      	orrs	r4, r3
 80014ca:	0c1b      	lsrs	r3, r3, #16
 80014cc:	4699      	mov	r9, r3
 80014ce:	0423      	lsls	r3, r4, #16
 80014d0:	0c1f      	lsrs	r7, r3, #16
 80014d2:	0212      	lsls	r2, r2, #8
 80014d4:	4649      	mov	r1, r9
 80014d6:	9200      	str	r2, [sp, #0]
 80014d8:	9701      	str	r7, [sp, #4]
 80014da:	f7fe fea3 	bl	8000224 <__aeabi_uidivmod>
 80014de:	0002      	movs	r2, r0
 80014e0:	437a      	muls	r2, r7
 80014e2:	040b      	lsls	r3, r1, #16
 80014e4:	0c31      	lsrs	r1, r6, #16
 80014e6:	4680      	mov	r8, r0
 80014e8:	4319      	orrs	r1, r3
 80014ea:	428a      	cmp	r2, r1
 80014ec:	d90b      	bls.n	8001506 <__aeabi_ddiv+0x2c2>
 80014ee:	2301      	movs	r3, #1
 80014f0:	425b      	negs	r3, r3
 80014f2:	469c      	mov	ip, r3
 80014f4:	1909      	adds	r1, r1, r4
 80014f6:	44e0      	add	r8, ip
 80014f8:	428c      	cmp	r4, r1
 80014fa:	d804      	bhi.n	8001506 <__aeabi_ddiv+0x2c2>
 80014fc:	428a      	cmp	r2, r1
 80014fe:	d902      	bls.n	8001506 <__aeabi_ddiv+0x2c2>
 8001500:	1e83      	subs	r3, r0, #2
 8001502:	4698      	mov	r8, r3
 8001504:	1909      	adds	r1, r1, r4
 8001506:	1a88      	subs	r0, r1, r2
 8001508:	4649      	mov	r1, r9
 800150a:	f7fe fe8b 	bl	8000224 <__aeabi_uidivmod>
 800150e:	0409      	lsls	r1, r1, #16
 8001510:	468c      	mov	ip, r1
 8001512:	0431      	lsls	r1, r6, #16
 8001514:	4666      	mov	r6, ip
 8001516:	9a01      	ldr	r2, [sp, #4]
 8001518:	0c09      	lsrs	r1, r1, #16
 800151a:	4342      	muls	r2, r0
 800151c:	0003      	movs	r3, r0
 800151e:	4331      	orrs	r1, r6
 8001520:	428a      	cmp	r2, r1
 8001522:	d904      	bls.n	800152e <__aeabi_ddiv+0x2ea>
 8001524:	1909      	adds	r1, r1, r4
 8001526:	3b01      	subs	r3, #1
 8001528:	428c      	cmp	r4, r1
 800152a:	d800      	bhi.n	800152e <__aeabi_ddiv+0x2ea>
 800152c:	e111      	b.n	8001752 <__aeabi_ddiv+0x50e>
 800152e:	1a89      	subs	r1, r1, r2
 8001530:	4642      	mov	r2, r8
 8001532:	9e00      	ldr	r6, [sp, #0]
 8001534:	0412      	lsls	r2, r2, #16
 8001536:	431a      	orrs	r2, r3
 8001538:	0c33      	lsrs	r3, r6, #16
 800153a:	001f      	movs	r7, r3
 800153c:	0c10      	lsrs	r0, r2, #16
 800153e:	4690      	mov	r8, r2
 8001540:	9302      	str	r3, [sp, #8]
 8001542:	0413      	lsls	r3, r2, #16
 8001544:	0432      	lsls	r2, r6, #16
 8001546:	0c16      	lsrs	r6, r2, #16
 8001548:	0032      	movs	r2, r6
 800154a:	0c1b      	lsrs	r3, r3, #16
 800154c:	435a      	muls	r2, r3
 800154e:	9603      	str	r6, [sp, #12]
 8001550:	437b      	muls	r3, r7
 8001552:	4346      	muls	r6, r0
 8001554:	4378      	muls	r0, r7
 8001556:	0c17      	lsrs	r7, r2, #16
 8001558:	46bc      	mov	ip, r7
 800155a:	199b      	adds	r3, r3, r6
 800155c:	4463      	add	r3, ip
 800155e:	429e      	cmp	r6, r3
 8001560:	d903      	bls.n	800156a <__aeabi_ddiv+0x326>
 8001562:	2680      	movs	r6, #128	; 0x80
 8001564:	0276      	lsls	r6, r6, #9
 8001566:	46b4      	mov	ip, r6
 8001568:	4460      	add	r0, ip
 800156a:	0c1e      	lsrs	r6, r3, #16
 800156c:	1830      	adds	r0, r6, r0
 800156e:	0416      	lsls	r6, r2, #16
 8001570:	041b      	lsls	r3, r3, #16
 8001572:	0c36      	lsrs	r6, r6, #16
 8001574:	199e      	adds	r6, r3, r6
 8001576:	4281      	cmp	r1, r0
 8001578:	d200      	bcs.n	800157c <__aeabi_ddiv+0x338>
 800157a:	e09c      	b.n	80016b6 <__aeabi_ddiv+0x472>
 800157c:	d100      	bne.n	8001580 <__aeabi_ddiv+0x33c>
 800157e:	e097      	b.n	80016b0 <__aeabi_ddiv+0x46c>
 8001580:	1bae      	subs	r6, r5, r6
 8001582:	1a09      	subs	r1, r1, r0
 8001584:	42b5      	cmp	r5, r6
 8001586:	4180      	sbcs	r0, r0
 8001588:	4240      	negs	r0, r0
 800158a:	1a08      	subs	r0, r1, r0
 800158c:	4284      	cmp	r4, r0
 800158e:	d100      	bne.n	8001592 <__aeabi_ddiv+0x34e>
 8001590:	e111      	b.n	80017b6 <__aeabi_ddiv+0x572>
 8001592:	4649      	mov	r1, r9
 8001594:	f7fe fe46 	bl	8000224 <__aeabi_uidivmod>
 8001598:	9a01      	ldr	r2, [sp, #4]
 800159a:	040b      	lsls	r3, r1, #16
 800159c:	4342      	muls	r2, r0
 800159e:	0c31      	lsrs	r1, r6, #16
 80015a0:	0005      	movs	r5, r0
 80015a2:	4319      	orrs	r1, r3
 80015a4:	428a      	cmp	r2, r1
 80015a6:	d907      	bls.n	80015b8 <__aeabi_ddiv+0x374>
 80015a8:	1909      	adds	r1, r1, r4
 80015aa:	3d01      	subs	r5, #1
 80015ac:	428c      	cmp	r4, r1
 80015ae:	d803      	bhi.n	80015b8 <__aeabi_ddiv+0x374>
 80015b0:	428a      	cmp	r2, r1
 80015b2:	d901      	bls.n	80015b8 <__aeabi_ddiv+0x374>
 80015b4:	1e85      	subs	r5, r0, #2
 80015b6:	1909      	adds	r1, r1, r4
 80015b8:	1a88      	subs	r0, r1, r2
 80015ba:	4649      	mov	r1, r9
 80015bc:	f7fe fe32 	bl	8000224 <__aeabi_uidivmod>
 80015c0:	0409      	lsls	r1, r1, #16
 80015c2:	468c      	mov	ip, r1
 80015c4:	0431      	lsls	r1, r6, #16
 80015c6:	4666      	mov	r6, ip
 80015c8:	9a01      	ldr	r2, [sp, #4]
 80015ca:	0c09      	lsrs	r1, r1, #16
 80015cc:	4342      	muls	r2, r0
 80015ce:	0003      	movs	r3, r0
 80015d0:	4331      	orrs	r1, r6
 80015d2:	428a      	cmp	r2, r1
 80015d4:	d907      	bls.n	80015e6 <__aeabi_ddiv+0x3a2>
 80015d6:	1909      	adds	r1, r1, r4
 80015d8:	3b01      	subs	r3, #1
 80015da:	428c      	cmp	r4, r1
 80015dc:	d803      	bhi.n	80015e6 <__aeabi_ddiv+0x3a2>
 80015de:	428a      	cmp	r2, r1
 80015e0:	d901      	bls.n	80015e6 <__aeabi_ddiv+0x3a2>
 80015e2:	1e83      	subs	r3, r0, #2
 80015e4:	1909      	adds	r1, r1, r4
 80015e6:	9e03      	ldr	r6, [sp, #12]
 80015e8:	1a89      	subs	r1, r1, r2
 80015ea:	0032      	movs	r2, r6
 80015ec:	042d      	lsls	r5, r5, #16
 80015ee:	431d      	orrs	r5, r3
 80015f0:	9f02      	ldr	r7, [sp, #8]
 80015f2:	042b      	lsls	r3, r5, #16
 80015f4:	0c1b      	lsrs	r3, r3, #16
 80015f6:	435a      	muls	r2, r3
 80015f8:	437b      	muls	r3, r7
 80015fa:	469c      	mov	ip, r3
 80015fc:	0c28      	lsrs	r0, r5, #16
 80015fe:	4346      	muls	r6, r0
 8001600:	0c13      	lsrs	r3, r2, #16
 8001602:	44b4      	add	ip, r6
 8001604:	4463      	add	r3, ip
 8001606:	4378      	muls	r0, r7
 8001608:	429e      	cmp	r6, r3
 800160a:	d903      	bls.n	8001614 <__aeabi_ddiv+0x3d0>
 800160c:	2680      	movs	r6, #128	; 0x80
 800160e:	0276      	lsls	r6, r6, #9
 8001610:	46b4      	mov	ip, r6
 8001612:	4460      	add	r0, ip
 8001614:	0c1e      	lsrs	r6, r3, #16
 8001616:	0412      	lsls	r2, r2, #16
 8001618:	041b      	lsls	r3, r3, #16
 800161a:	0c12      	lsrs	r2, r2, #16
 800161c:	1830      	adds	r0, r6, r0
 800161e:	189b      	adds	r3, r3, r2
 8001620:	4281      	cmp	r1, r0
 8001622:	d306      	bcc.n	8001632 <__aeabi_ddiv+0x3ee>
 8001624:	d002      	beq.n	800162c <__aeabi_ddiv+0x3e8>
 8001626:	2301      	movs	r3, #1
 8001628:	431d      	orrs	r5, r3
 800162a:	e6ce      	b.n	80013ca <__aeabi_ddiv+0x186>
 800162c:	2b00      	cmp	r3, #0
 800162e:	d100      	bne.n	8001632 <__aeabi_ddiv+0x3ee>
 8001630:	e6cb      	b.n	80013ca <__aeabi_ddiv+0x186>
 8001632:	1861      	adds	r1, r4, r1
 8001634:	1e6e      	subs	r6, r5, #1
 8001636:	42a1      	cmp	r1, r4
 8001638:	d200      	bcs.n	800163c <__aeabi_ddiv+0x3f8>
 800163a:	e0a4      	b.n	8001786 <__aeabi_ddiv+0x542>
 800163c:	4281      	cmp	r1, r0
 800163e:	d200      	bcs.n	8001642 <__aeabi_ddiv+0x3fe>
 8001640:	e0c9      	b.n	80017d6 <__aeabi_ddiv+0x592>
 8001642:	d100      	bne.n	8001646 <__aeabi_ddiv+0x402>
 8001644:	e0d9      	b.n	80017fa <__aeabi_ddiv+0x5b6>
 8001646:	0035      	movs	r5, r6
 8001648:	e7ed      	b.n	8001626 <__aeabi_ddiv+0x3e2>
 800164a:	2501      	movs	r5, #1
 800164c:	426d      	negs	r5, r5
 800164e:	2101      	movs	r1, #1
 8001650:	1a89      	subs	r1, r1, r2
 8001652:	2938      	cmp	r1, #56	; 0x38
 8001654:	dd00      	ble.n	8001658 <__aeabi_ddiv+0x414>
 8001656:	e64c      	b.n	80012f2 <__aeabi_ddiv+0xae>
 8001658:	291f      	cmp	r1, #31
 800165a:	dc00      	bgt.n	800165e <__aeabi_ddiv+0x41a>
 800165c:	e07f      	b.n	800175e <__aeabi_ddiv+0x51a>
 800165e:	231f      	movs	r3, #31
 8001660:	425b      	negs	r3, r3
 8001662:	1a9a      	subs	r2, r3, r2
 8001664:	4643      	mov	r3, r8
 8001666:	40d3      	lsrs	r3, r2
 8001668:	2920      	cmp	r1, #32
 800166a:	d004      	beq.n	8001676 <__aeabi_ddiv+0x432>
 800166c:	4644      	mov	r4, r8
 800166e:	4a65      	ldr	r2, [pc, #404]	; (8001804 <__aeabi_ddiv+0x5c0>)
 8001670:	445a      	add	r2, fp
 8001672:	4094      	lsls	r4, r2
 8001674:	4325      	orrs	r5, r4
 8001676:	1e6a      	subs	r2, r5, #1
 8001678:	4195      	sbcs	r5, r2
 800167a:	2207      	movs	r2, #7
 800167c:	432b      	orrs	r3, r5
 800167e:	0015      	movs	r5, r2
 8001680:	2400      	movs	r4, #0
 8001682:	401d      	ands	r5, r3
 8001684:	421a      	tst	r2, r3
 8001686:	d100      	bne.n	800168a <__aeabi_ddiv+0x446>
 8001688:	e0a1      	b.n	80017ce <__aeabi_ddiv+0x58a>
 800168a:	220f      	movs	r2, #15
 800168c:	2400      	movs	r4, #0
 800168e:	401a      	ands	r2, r3
 8001690:	2a04      	cmp	r2, #4
 8001692:	d100      	bne.n	8001696 <__aeabi_ddiv+0x452>
 8001694:	e098      	b.n	80017c8 <__aeabi_ddiv+0x584>
 8001696:	1d1a      	adds	r2, r3, #4
 8001698:	429a      	cmp	r2, r3
 800169a:	419b      	sbcs	r3, r3
 800169c:	425b      	negs	r3, r3
 800169e:	18e4      	adds	r4, r4, r3
 80016a0:	0013      	movs	r3, r2
 80016a2:	0222      	lsls	r2, r4, #8
 80016a4:	d400      	bmi.n	80016a8 <__aeabi_ddiv+0x464>
 80016a6:	e08f      	b.n	80017c8 <__aeabi_ddiv+0x584>
 80016a8:	2301      	movs	r3, #1
 80016aa:	2400      	movs	r4, #0
 80016ac:	2500      	movs	r5, #0
 80016ae:	e623      	b.n	80012f8 <__aeabi_ddiv+0xb4>
 80016b0:	42b5      	cmp	r5, r6
 80016b2:	d300      	bcc.n	80016b6 <__aeabi_ddiv+0x472>
 80016b4:	e764      	b.n	8001580 <__aeabi_ddiv+0x33c>
 80016b6:	4643      	mov	r3, r8
 80016b8:	1e5a      	subs	r2, r3, #1
 80016ba:	9b00      	ldr	r3, [sp, #0]
 80016bc:	469c      	mov	ip, r3
 80016be:	4465      	add	r5, ip
 80016c0:	001f      	movs	r7, r3
 80016c2:	429d      	cmp	r5, r3
 80016c4:	419b      	sbcs	r3, r3
 80016c6:	425b      	negs	r3, r3
 80016c8:	191b      	adds	r3, r3, r4
 80016ca:	18c9      	adds	r1, r1, r3
 80016cc:	428c      	cmp	r4, r1
 80016ce:	d23a      	bcs.n	8001746 <__aeabi_ddiv+0x502>
 80016d0:	4288      	cmp	r0, r1
 80016d2:	d863      	bhi.n	800179c <__aeabi_ddiv+0x558>
 80016d4:	d060      	beq.n	8001798 <__aeabi_ddiv+0x554>
 80016d6:	4690      	mov	r8, r2
 80016d8:	e752      	b.n	8001580 <__aeabi_ddiv+0x33c>
 80016da:	42aa      	cmp	r2, r5
 80016dc:	d900      	bls.n	80016e0 <__aeabi_ddiv+0x49c>
 80016de:	e6ea      	b.n	80014b6 <__aeabi_ddiv+0x272>
 80016e0:	4643      	mov	r3, r8
 80016e2:	07de      	lsls	r6, r3, #31
 80016e4:	0858      	lsrs	r0, r3, #1
 80016e6:	086b      	lsrs	r3, r5, #1
 80016e8:	431e      	orrs	r6, r3
 80016ea:	07ed      	lsls	r5, r5, #31
 80016ec:	e6ea      	b.n	80014c4 <__aeabi_ddiv+0x280>
 80016ee:	4648      	mov	r0, r9
 80016f0:	f001 f880 	bl	80027f4 <__clzsi2>
 80016f4:	0001      	movs	r1, r0
 80016f6:	0002      	movs	r2, r0
 80016f8:	3115      	adds	r1, #21
 80016fa:	3220      	adds	r2, #32
 80016fc:	291c      	cmp	r1, #28
 80016fe:	dc00      	bgt.n	8001702 <__aeabi_ddiv+0x4be>
 8001700:	e61a      	b.n	8001338 <__aeabi_ddiv+0xf4>
 8001702:	464b      	mov	r3, r9
 8001704:	3808      	subs	r0, #8
 8001706:	4083      	lsls	r3, r0
 8001708:	2500      	movs	r5, #0
 800170a:	4698      	mov	r8, r3
 800170c:	e620      	b.n	8001350 <__aeabi_ddiv+0x10c>
 800170e:	f001 f871 	bl	80027f4 <__clzsi2>
 8001712:	0003      	movs	r3, r0
 8001714:	001a      	movs	r2, r3
 8001716:	3215      	adds	r2, #21
 8001718:	3020      	adds	r0, #32
 800171a:	2a1c      	cmp	r2, #28
 800171c:	dc00      	bgt.n	8001720 <__aeabi_ddiv+0x4dc>
 800171e:	e630      	b.n	8001382 <__aeabi_ddiv+0x13e>
 8001720:	4654      	mov	r4, sl
 8001722:	3b08      	subs	r3, #8
 8001724:	2200      	movs	r2, #0
 8001726:	409c      	lsls	r4, r3
 8001728:	e635      	b.n	8001396 <__aeabi_ddiv+0x152>
 800172a:	230f      	movs	r3, #15
 800172c:	402b      	ands	r3, r5
 800172e:	2b04      	cmp	r3, #4
 8001730:	d100      	bne.n	8001734 <__aeabi_ddiv+0x4f0>
 8001732:	e652      	b.n	80013da <__aeabi_ddiv+0x196>
 8001734:	2305      	movs	r3, #5
 8001736:	425b      	negs	r3, r3
 8001738:	42ab      	cmp	r3, r5
 800173a:	419b      	sbcs	r3, r3
 800173c:	3504      	adds	r5, #4
 800173e:	425b      	negs	r3, r3
 8001740:	08ed      	lsrs	r5, r5, #3
 8001742:	4498      	add	r8, r3
 8001744:	e64a      	b.n	80013dc <__aeabi_ddiv+0x198>
 8001746:	428c      	cmp	r4, r1
 8001748:	d1c5      	bne.n	80016d6 <__aeabi_ddiv+0x492>
 800174a:	42af      	cmp	r7, r5
 800174c:	d9c0      	bls.n	80016d0 <__aeabi_ddiv+0x48c>
 800174e:	4690      	mov	r8, r2
 8001750:	e716      	b.n	8001580 <__aeabi_ddiv+0x33c>
 8001752:	428a      	cmp	r2, r1
 8001754:	d800      	bhi.n	8001758 <__aeabi_ddiv+0x514>
 8001756:	e6ea      	b.n	800152e <__aeabi_ddiv+0x2ea>
 8001758:	1e83      	subs	r3, r0, #2
 800175a:	1909      	adds	r1, r1, r4
 800175c:	e6e7      	b.n	800152e <__aeabi_ddiv+0x2ea>
 800175e:	4a2a      	ldr	r2, [pc, #168]	; (8001808 <__aeabi_ddiv+0x5c4>)
 8001760:	0028      	movs	r0, r5
 8001762:	445a      	add	r2, fp
 8001764:	4643      	mov	r3, r8
 8001766:	4095      	lsls	r5, r2
 8001768:	4093      	lsls	r3, r2
 800176a:	40c8      	lsrs	r0, r1
 800176c:	1e6a      	subs	r2, r5, #1
 800176e:	4195      	sbcs	r5, r2
 8001770:	4644      	mov	r4, r8
 8001772:	4303      	orrs	r3, r0
 8001774:	432b      	orrs	r3, r5
 8001776:	40cc      	lsrs	r4, r1
 8001778:	075a      	lsls	r2, r3, #29
 800177a:	d092      	beq.n	80016a2 <__aeabi_ddiv+0x45e>
 800177c:	220f      	movs	r2, #15
 800177e:	401a      	ands	r2, r3
 8001780:	2a04      	cmp	r2, #4
 8001782:	d188      	bne.n	8001696 <__aeabi_ddiv+0x452>
 8001784:	e78d      	b.n	80016a2 <__aeabi_ddiv+0x45e>
 8001786:	0035      	movs	r5, r6
 8001788:	4281      	cmp	r1, r0
 800178a:	d000      	beq.n	800178e <__aeabi_ddiv+0x54a>
 800178c:	e74b      	b.n	8001626 <__aeabi_ddiv+0x3e2>
 800178e:	9a00      	ldr	r2, [sp, #0]
 8001790:	4293      	cmp	r3, r2
 8001792:	d000      	beq.n	8001796 <__aeabi_ddiv+0x552>
 8001794:	e747      	b.n	8001626 <__aeabi_ddiv+0x3e2>
 8001796:	e618      	b.n	80013ca <__aeabi_ddiv+0x186>
 8001798:	42ae      	cmp	r6, r5
 800179a:	d99c      	bls.n	80016d6 <__aeabi_ddiv+0x492>
 800179c:	2302      	movs	r3, #2
 800179e:	425b      	negs	r3, r3
 80017a0:	469c      	mov	ip, r3
 80017a2:	9b00      	ldr	r3, [sp, #0]
 80017a4:	44e0      	add	r8, ip
 80017a6:	469c      	mov	ip, r3
 80017a8:	4465      	add	r5, ip
 80017aa:	429d      	cmp	r5, r3
 80017ac:	419b      	sbcs	r3, r3
 80017ae:	425b      	negs	r3, r3
 80017b0:	191b      	adds	r3, r3, r4
 80017b2:	18c9      	adds	r1, r1, r3
 80017b4:	e6e4      	b.n	8001580 <__aeabi_ddiv+0x33c>
 80017b6:	4a15      	ldr	r2, [pc, #84]	; (800180c <__aeabi_ddiv+0x5c8>)
 80017b8:	445a      	add	r2, fp
 80017ba:	2a00      	cmp	r2, #0
 80017bc:	dc00      	bgt.n	80017c0 <__aeabi_ddiv+0x57c>
 80017be:	e744      	b.n	800164a <__aeabi_ddiv+0x406>
 80017c0:	2301      	movs	r3, #1
 80017c2:	2500      	movs	r5, #0
 80017c4:	4498      	add	r8, r3
 80017c6:	e609      	b.n	80013dc <__aeabi_ddiv+0x198>
 80017c8:	0765      	lsls	r5, r4, #29
 80017ca:	0264      	lsls	r4, r4, #9
 80017cc:	0b24      	lsrs	r4, r4, #12
 80017ce:	08db      	lsrs	r3, r3, #3
 80017d0:	431d      	orrs	r5, r3
 80017d2:	2300      	movs	r3, #0
 80017d4:	e590      	b.n	80012f8 <__aeabi_ddiv+0xb4>
 80017d6:	9e00      	ldr	r6, [sp, #0]
 80017d8:	3d02      	subs	r5, #2
 80017da:	0072      	lsls	r2, r6, #1
 80017dc:	42b2      	cmp	r2, r6
 80017de:	41bf      	sbcs	r7, r7
 80017e0:	427f      	negs	r7, r7
 80017e2:	193c      	adds	r4, r7, r4
 80017e4:	1909      	adds	r1, r1, r4
 80017e6:	9200      	str	r2, [sp, #0]
 80017e8:	e7ce      	b.n	8001788 <__aeabi_ddiv+0x544>
 80017ea:	2480      	movs	r4, #128	; 0x80
 80017ec:	4643      	mov	r3, r8
 80017ee:	0324      	lsls	r4, r4, #12
 80017f0:	431c      	orrs	r4, r3
 80017f2:	0324      	lsls	r4, r4, #12
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <__aeabi_ddiv+0x5cc>)
 80017f6:	0b24      	lsrs	r4, r4, #12
 80017f8:	e57e      	b.n	80012f8 <__aeabi_ddiv+0xb4>
 80017fa:	9a00      	ldr	r2, [sp, #0]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d3ea      	bcc.n	80017d6 <__aeabi_ddiv+0x592>
 8001800:	0035      	movs	r5, r6
 8001802:	e7c4      	b.n	800178e <__aeabi_ddiv+0x54a>
 8001804:	0000043e 	.word	0x0000043e
 8001808:	0000041e 	.word	0x0000041e
 800180c:	000003ff 	.word	0x000003ff
 8001810:	000007ff 	.word	0x000007ff

08001814 <__eqdf2>:
 8001814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001816:	464f      	mov	r7, r9
 8001818:	4646      	mov	r6, r8
 800181a:	46d6      	mov	lr, sl
 800181c:	4694      	mov	ip, r2
 800181e:	4691      	mov	r9, r2
 8001820:	031a      	lsls	r2, r3, #12
 8001822:	0b12      	lsrs	r2, r2, #12
 8001824:	4d18      	ldr	r5, [pc, #96]	; (8001888 <__eqdf2+0x74>)
 8001826:	b5c0      	push	{r6, r7, lr}
 8001828:	004c      	lsls	r4, r1, #1
 800182a:	030f      	lsls	r7, r1, #12
 800182c:	4692      	mov	sl, r2
 800182e:	005a      	lsls	r2, r3, #1
 8001830:	0006      	movs	r6, r0
 8001832:	4680      	mov	r8, r0
 8001834:	0b3f      	lsrs	r7, r7, #12
 8001836:	2001      	movs	r0, #1
 8001838:	0d64      	lsrs	r4, r4, #21
 800183a:	0fc9      	lsrs	r1, r1, #31
 800183c:	0d52      	lsrs	r2, r2, #21
 800183e:	0fdb      	lsrs	r3, r3, #31
 8001840:	42ac      	cmp	r4, r5
 8001842:	d00a      	beq.n	800185a <__eqdf2+0x46>
 8001844:	42aa      	cmp	r2, r5
 8001846:	d003      	beq.n	8001850 <__eqdf2+0x3c>
 8001848:	4294      	cmp	r4, r2
 800184a:	d101      	bne.n	8001850 <__eqdf2+0x3c>
 800184c:	4557      	cmp	r7, sl
 800184e:	d00d      	beq.n	800186c <__eqdf2+0x58>
 8001850:	bce0      	pop	{r5, r6, r7}
 8001852:	46ba      	mov	sl, r7
 8001854:	46b1      	mov	r9, r6
 8001856:	46a8      	mov	r8, r5
 8001858:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800185a:	003d      	movs	r5, r7
 800185c:	4335      	orrs	r5, r6
 800185e:	d1f7      	bne.n	8001850 <__eqdf2+0x3c>
 8001860:	42a2      	cmp	r2, r4
 8001862:	d1f5      	bne.n	8001850 <__eqdf2+0x3c>
 8001864:	4652      	mov	r2, sl
 8001866:	4665      	mov	r5, ip
 8001868:	432a      	orrs	r2, r5
 800186a:	d1f1      	bne.n	8001850 <__eqdf2+0x3c>
 800186c:	2001      	movs	r0, #1
 800186e:	45c8      	cmp	r8, r9
 8001870:	d1ee      	bne.n	8001850 <__eqdf2+0x3c>
 8001872:	4299      	cmp	r1, r3
 8001874:	d006      	beq.n	8001884 <__eqdf2+0x70>
 8001876:	2c00      	cmp	r4, #0
 8001878:	d1ea      	bne.n	8001850 <__eqdf2+0x3c>
 800187a:	433e      	orrs	r6, r7
 800187c:	0030      	movs	r0, r6
 800187e:	1e46      	subs	r6, r0, #1
 8001880:	41b0      	sbcs	r0, r6
 8001882:	e7e5      	b.n	8001850 <__eqdf2+0x3c>
 8001884:	2000      	movs	r0, #0
 8001886:	e7e3      	b.n	8001850 <__eqdf2+0x3c>
 8001888:	000007ff 	.word	0x000007ff

0800188c <__gedf2>:
 800188c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800188e:	464e      	mov	r6, r9
 8001890:	4645      	mov	r5, r8
 8001892:	4657      	mov	r7, sl
 8001894:	46de      	mov	lr, fp
 8001896:	0004      	movs	r4, r0
 8001898:	0018      	movs	r0, r3
 800189a:	b5e0      	push	{r5, r6, r7, lr}
 800189c:	0016      	movs	r6, r2
 800189e:	031b      	lsls	r3, r3, #12
 80018a0:	0b1b      	lsrs	r3, r3, #12
 80018a2:	4d32      	ldr	r5, [pc, #200]	; (800196c <__gedf2+0xe0>)
 80018a4:	030f      	lsls	r7, r1, #12
 80018a6:	004a      	lsls	r2, r1, #1
 80018a8:	4699      	mov	r9, r3
 80018aa:	0043      	lsls	r3, r0, #1
 80018ac:	46a4      	mov	ip, r4
 80018ae:	46b0      	mov	r8, r6
 80018b0:	0b3f      	lsrs	r7, r7, #12
 80018b2:	0d52      	lsrs	r2, r2, #21
 80018b4:	0fc9      	lsrs	r1, r1, #31
 80018b6:	0d5b      	lsrs	r3, r3, #21
 80018b8:	0fc0      	lsrs	r0, r0, #31
 80018ba:	42aa      	cmp	r2, r5
 80018bc:	d029      	beq.n	8001912 <__gedf2+0x86>
 80018be:	42ab      	cmp	r3, r5
 80018c0:	d018      	beq.n	80018f4 <__gedf2+0x68>
 80018c2:	2a00      	cmp	r2, #0
 80018c4:	d12a      	bne.n	800191c <__gedf2+0x90>
 80018c6:	433c      	orrs	r4, r7
 80018c8:	46a3      	mov	fp, r4
 80018ca:	4265      	negs	r5, r4
 80018cc:	4165      	adcs	r5, r4
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d102      	bne.n	80018d8 <__gedf2+0x4c>
 80018d2:	464c      	mov	r4, r9
 80018d4:	4326      	orrs	r6, r4
 80018d6:	d027      	beq.n	8001928 <__gedf2+0x9c>
 80018d8:	2d00      	cmp	r5, #0
 80018da:	d115      	bne.n	8001908 <__gedf2+0x7c>
 80018dc:	4281      	cmp	r1, r0
 80018de:	d028      	beq.n	8001932 <__gedf2+0xa6>
 80018e0:	2002      	movs	r0, #2
 80018e2:	3901      	subs	r1, #1
 80018e4:	4008      	ands	r0, r1
 80018e6:	3801      	subs	r0, #1
 80018e8:	bcf0      	pop	{r4, r5, r6, r7}
 80018ea:	46bb      	mov	fp, r7
 80018ec:	46b2      	mov	sl, r6
 80018ee:	46a9      	mov	r9, r5
 80018f0:	46a0      	mov	r8, r4
 80018f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018f4:	464d      	mov	r5, r9
 80018f6:	432e      	orrs	r6, r5
 80018f8:	d12f      	bne.n	800195a <__gedf2+0xce>
 80018fa:	2a00      	cmp	r2, #0
 80018fc:	d1ee      	bne.n	80018dc <__gedf2+0x50>
 80018fe:	433c      	orrs	r4, r7
 8001900:	4265      	negs	r5, r4
 8001902:	4165      	adcs	r5, r4
 8001904:	2d00      	cmp	r5, #0
 8001906:	d0e9      	beq.n	80018dc <__gedf2+0x50>
 8001908:	2800      	cmp	r0, #0
 800190a:	d1ed      	bne.n	80018e8 <__gedf2+0x5c>
 800190c:	2001      	movs	r0, #1
 800190e:	4240      	negs	r0, r0
 8001910:	e7ea      	b.n	80018e8 <__gedf2+0x5c>
 8001912:	003d      	movs	r5, r7
 8001914:	4325      	orrs	r5, r4
 8001916:	d120      	bne.n	800195a <__gedf2+0xce>
 8001918:	4293      	cmp	r3, r2
 800191a:	d0eb      	beq.n	80018f4 <__gedf2+0x68>
 800191c:	2b00      	cmp	r3, #0
 800191e:	d1dd      	bne.n	80018dc <__gedf2+0x50>
 8001920:	464c      	mov	r4, r9
 8001922:	4326      	orrs	r6, r4
 8001924:	d1da      	bne.n	80018dc <__gedf2+0x50>
 8001926:	e7db      	b.n	80018e0 <__gedf2+0x54>
 8001928:	465b      	mov	r3, fp
 800192a:	2000      	movs	r0, #0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d0db      	beq.n	80018e8 <__gedf2+0x5c>
 8001930:	e7d6      	b.n	80018e0 <__gedf2+0x54>
 8001932:	429a      	cmp	r2, r3
 8001934:	dc0a      	bgt.n	800194c <__gedf2+0xc0>
 8001936:	dbe7      	blt.n	8001908 <__gedf2+0x7c>
 8001938:	454f      	cmp	r7, r9
 800193a:	d8d1      	bhi.n	80018e0 <__gedf2+0x54>
 800193c:	d010      	beq.n	8001960 <__gedf2+0xd4>
 800193e:	2000      	movs	r0, #0
 8001940:	454f      	cmp	r7, r9
 8001942:	d2d1      	bcs.n	80018e8 <__gedf2+0x5c>
 8001944:	2900      	cmp	r1, #0
 8001946:	d0e1      	beq.n	800190c <__gedf2+0x80>
 8001948:	0008      	movs	r0, r1
 800194a:	e7cd      	b.n	80018e8 <__gedf2+0x5c>
 800194c:	4243      	negs	r3, r0
 800194e:	4158      	adcs	r0, r3
 8001950:	2302      	movs	r3, #2
 8001952:	4240      	negs	r0, r0
 8001954:	4018      	ands	r0, r3
 8001956:	3801      	subs	r0, #1
 8001958:	e7c6      	b.n	80018e8 <__gedf2+0x5c>
 800195a:	2002      	movs	r0, #2
 800195c:	4240      	negs	r0, r0
 800195e:	e7c3      	b.n	80018e8 <__gedf2+0x5c>
 8001960:	45c4      	cmp	ip, r8
 8001962:	d8bd      	bhi.n	80018e0 <__gedf2+0x54>
 8001964:	2000      	movs	r0, #0
 8001966:	45c4      	cmp	ip, r8
 8001968:	d2be      	bcs.n	80018e8 <__gedf2+0x5c>
 800196a:	e7eb      	b.n	8001944 <__gedf2+0xb8>
 800196c:	000007ff 	.word	0x000007ff

08001970 <__ledf2>:
 8001970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001972:	464e      	mov	r6, r9
 8001974:	4645      	mov	r5, r8
 8001976:	4657      	mov	r7, sl
 8001978:	46de      	mov	lr, fp
 800197a:	0004      	movs	r4, r0
 800197c:	0018      	movs	r0, r3
 800197e:	b5e0      	push	{r5, r6, r7, lr}
 8001980:	0016      	movs	r6, r2
 8001982:	031b      	lsls	r3, r3, #12
 8001984:	0b1b      	lsrs	r3, r3, #12
 8001986:	4d31      	ldr	r5, [pc, #196]	; (8001a4c <__ledf2+0xdc>)
 8001988:	030f      	lsls	r7, r1, #12
 800198a:	004a      	lsls	r2, r1, #1
 800198c:	4699      	mov	r9, r3
 800198e:	0043      	lsls	r3, r0, #1
 8001990:	46a4      	mov	ip, r4
 8001992:	46b0      	mov	r8, r6
 8001994:	0b3f      	lsrs	r7, r7, #12
 8001996:	0d52      	lsrs	r2, r2, #21
 8001998:	0fc9      	lsrs	r1, r1, #31
 800199a:	0d5b      	lsrs	r3, r3, #21
 800199c:	0fc0      	lsrs	r0, r0, #31
 800199e:	42aa      	cmp	r2, r5
 80019a0:	d011      	beq.n	80019c6 <__ledf2+0x56>
 80019a2:	42ab      	cmp	r3, r5
 80019a4:	d014      	beq.n	80019d0 <__ledf2+0x60>
 80019a6:	2a00      	cmp	r2, #0
 80019a8:	d12f      	bne.n	8001a0a <__ledf2+0x9a>
 80019aa:	433c      	orrs	r4, r7
 80019ac:	46a3      	mov	fp, r4
 80019ae:	4265      	negs	r5, r4
 80019b0:	4165      	adcs	r5, r4
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d114      	bne.n	80019e0 <__ledf2+0x70>
 80019b6:	464c      	mov	r4, r9
 80019b8:	4326      	orrs	r6, r4
 80019ba:	d111      	bne.n	80019e0 <__ledf2+0x70>
 80019bc:	465b      	mov	r3, fp
 80019be:	2000      	movs	r0, #0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d017      	beq.n	80019f4 <__ledf2+0x84>
 80019c4:	e010      	b.n	80019e8 <__ledf2+0x78>
 80019c6:	003d      	movs	r5, r7
 80019c8:	4325      	orrs	r5, r4
 80019ca:	d112      	bne.n	80019f2 <__ledf2+0x82>
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d11c      	bne.n	8001a0a <__ledf2+0x9a>
 80019d0:	464d      	mov	r5, r9
 80019d2:	432e      	orrs	r6, r5
 80019d4:	d10d      	bne.n	80019f2 <__ledf2+0x82>
 80019d6:	2a00      	cmp	r2, #0
 80019d8:	d104      	bne.n	80019e4 <__ledf2+0x74>
 80019da:	433c      	orrs	r4, r7
 80019dc:	4265      	negs	r5, r4
 80019de:	4165      	adcs	r5, r4
 80019e0:	2d00      	cmp	r5, #0
 80019e2:	d10d      	bne.n	8001a00 <__ledf2+0x90>
 80019e4:	4281      	cmp	r1, r0
 80019e6:	d016      	beq.n	8001a16 <__ledf2+0xa6>
 80019e8:	2002      	movs	r0, #2
 80019ea:	3901      	subs	r1, #1
 80019ec:	4008      	ands	r0, r1
 80019ee:	3801      	subs	r0, #1
 80019f0:	e000      	b.n	80019f4 <__ledf2+0x84>
 80019f2:	2002      	movs	r0, #2
 80019f4:	bcf0      	pop	{r4, r5, r6, r7}
 80019f6:	46bb      	mov	fp, r7
 80019f8:	46b2      	mov	sl, r6
 80019fa:	46a9      	mov	r9, r5
 80019fc:	46a0      	mov	r8, r4
 80019fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a00:	2800      	cmp	r0, #0
 8001a02:	d1f7      	bne.n	80019f4 <__ledf2+0x84>
 8001a04:	2001      	movs	r0, #1
 8001a06:	4240      	negs	r0, r0
 8001a08:	e7f4      	b.n	80019f4 <__ledf2+0x84>
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1ea      	bne.n	80019e4 <__ledf2+0x74>
 8001a0e:	464c      	mov	r4, r9
 8001a10:	4326      	orrs	r6, r4
 8001a12:	d1e7      	bne.n	80019e4 <__ledf2+0x74>
 8001a14:	e7e8      	b.n	80019e8 <__ledf2+0x78>
 8001a16:	429a      	cmp	r2, r3
 8001a18:	dd06      	ble.n	8001a28 <__ledf2+0xb8>
 8001a1a:	4243      	negs	r3, r0
 8001a1c:	4158      	adcs	r0, r3
 8001a1e:	2302      	movs	r3, #2
 8001a20:	4240      	negs	r0, r0
 8001a22:	4018      	ands	r0, r3
 8001a24:	3801      	subs	r0, #1
 8001a26:	e7e5      	b.n	80019f4 <__ledf2+0x84>
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	dbe9      	blt.n	8001a00 <__ledf2+0x90>
 8001a2c:	454f      	cmp	r7, r9
 8001a2e:	d8db      	bhi.n	80019e8 <__ledf2+0x78>
 8001a30:	d006      	beq.n	8001a40 <__ledf2+0xd0>
 8001a32:	2000      	movs	r0, #0
 8001a34:	454f      	cmp	r7, r9
 8001a36:	d2dd      	bcs.n	80019f4 <__ledf2+0x84>
 8001a38:	2900      	cmp	r1, #0
 8001a3a:	d0e3      	beq.n	8001a04 <__ledf2+0x94>
 8001a3c:	0008      	movs	r0, r1
 8001a3e:	e7d9      	b.n	80019f4 <__ledf2+0x84>
 8001a40:	45c4      	cmp	ip, r8
 8001a42:	d8d1      	bhi.n	80019e8 <__ledf2+0x78>
 8001a44:	2000      	movs	r0, #0
 8001a46:	45c4      	cmp	ip, r8
 8001a48:	d2d4      	bcs.n	80019f4 <__ledf2+0x84>
 8001a4a:	e7f5      	b.n	8001a38 <__ledf2+0xc8>
 8001a4c:	000007ff 	.word	0x000007ff

08001a50 <__aeabi_dmul>:
 8001a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a52:	4657      	mov	r7, sl
 8001a54:	464e      	mov	r6, r9
 8001a56:	4645      	mov	r5, r8
 8001a58:	46de      	mov	lr, fp
 8001a5a:	b5e0      	push	{r5, r6, r7, lr}
 8001a5c:	4698      	mov	r8, r3
 8001a5e:	030c      	lsls	r4, r1, #12
 8001a60:	004b      	lsls	r3, r1, #1
 8001a62:	0006      	movs	r6, r0
 8001a64:	4692      	mov	sl, r2
 8001a66:	b087      	sub	sp, #28
 8001a68:	0b24      	lsrs	r4, r4, #12
 8001a6a:	0d5b      	lsrs	r3, r3, #21
 8001a6c:	0fcf      	lsrs	r7, r1, #31
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d06c      	beq.n	8001b4c <__aeabi_dmul+0xfc>
 8001a72:	4add      	ldr	r2, [pc, #884]	; (8001de8 <__aeabi_dmul+0x398>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d100      	bne.n	8001a7a <__aeabi_dmul+0x2a>
 8001a78:	e086      	b.n	8001b88 <__aeabi_dmul+0x138>
 8001a7a:	0f42      	lsrs	r2, r0, #29
 8001a7c:	00e4      	lsls	r4, r4, #3
 8001a7e:	4314      	orrs	r4, r2
 8001a80:	2280      	movs	r2, #128	; 0x80
 8001a82:	0412      	lsls	r2, r2, #16
 8001a84:	4314      	orrs	r4, r2
 8001a86:	4ad9      	ldr	r2, [pc, #868]	; (8001dec <__aeabi_dmul+0x39c>)
 8001a88:	00c5      	lsls	r5, r0, #3
 8001a8a:	4694      	mov	ip, r2
 8001a8c:	4463      	add	r3, ip
 8001a8e:	9300      	str	r3, [sp, #0]
 8001a90:	2300      	movs	r3, #0
 8001a92:	4699      	mov	r9, r3
 8001a94:	469b      	mov	fp, r3
 8001a96:	4643      	mov	r3, r8
 8001a98:	4642      	mov	r2, r8
 8001a9a:	031e      	lsls	r6, r3, #12
 8001a9c:	0fd2      	lsrs	r2, r2, #31
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	4650      	mov	r0, sl
 8001aa2:	4690      	mov	r8, r2
 8001aa4:	0b36      	lsrs	r6, r6, #12
 8001aa6:	0d5b      	lsrs	r3, r3, #21
 8001aa8:	d100      	bne.n	8001aac <__aeabi_dmul+0x5c>
 8001aaa:	e078      	b.n	8001b9e <__aeabi_dmul+0x14e>
 8001aac:	4ace      	ldr	r2, [pc, #824]	; (8001de8 <__aeabi_dmul+0x398>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d01d      	beq.n	8001aee <__aeabi_dmul+0x9e>
 8001ab2:	49ce      	ldr	r1, [pc, #824]	; (8001dec <__aeabi_dmul+0x39c>)
 8001ab4:	0f42      	lsrs	r2, r0, #29
 8001ab6:	468c      	mov	ip, r1
 8001ab8:	9900      	ldr	r1, [sp, #0]
 8001aba:	4463      	add	r3, ip
 8001abc:	00f6      	lsls	r6, r6, #3
 8001abe:	468c      	mov	ip, r1
 8001ac0:	4316      	orrs	r6, r2
 8001ac2:	2280      	movs	r2, #128	; 0x80
 8001ac4:	449c      	add	ip, r3
 8001ac6:	0412      	lsls	r2, r2, #16
 8001ac8:	4663      	mov	r3, ip
 8001aca:	4316      	orrs	r6, r2
 8001acc:	00c2      	lsls	r2, r0, #3
 8001ace:	2000      	movs	r0, #0
 8001ad0:	9300      	str	r3, [sp, #0]
 8001ad2:	9900      	ldr	r1, [sp, #0]
 8001ad4:	4643      	mov	r3, r8
 8001ad6:	3101      	adds	r1, #1
 8001ad8:	468c      	mov	ip, r1
 8001ada:	4649      	mov	r1, r9
 8001adc:	407b      	eors	r3, r7
 8001ade:	9301      	str	r3, [sp, #4]
 8001ae0:	290f      	cmp	r1, #15
 8001ae2:	d900      	bls.n	8001ae6 <__aeabi_dmul+0x96>
 8001ae4:	e07e      	b.n	8001be4 <__aeabi_dmul+0x194>
 8001ae6:	4bc2      	ldr	r3, [pc, #776]	; (8001df0 <__aeabi_dmul+0x3a0>)
 8001ae8:	0089      	lsls	r1, r1, #2
 8001aea:	5859      	ldr	r1, [r3, r1]
 8001aec:	468f      	mov	pc, r1
 8001aee:	4652      	mov	r2, sl
 8001af0:	9b00      	ldr	r3, [sp, #0]
 8001af2:	4332      	orrs	r2, r6
 8001af4:	d000      	beq.n	8001af8 <__aeabi_dmul+0xa8>
 8001af6:	e156      	b.n	8001da6 <__aeabi_dmul+0x356>
 8001af8:	49bb      	ldr	r1, [pc, #748]	; (8001de8 <__aeabi_dmul+0x398>)
 8001afa:	2600      	movs	r6, #0
 8001afc:	468c      	mov	ip, r1
 8001afe:	4463      	add	r3, ip
 8001b00:	4649      	mov	r1, r9
 8001b02:	9300      	str	r3, [sp, #0]
 8001b04:	2302      	movs	r3, #2
 8001b06:	4319      	orrs	r1, r3
 8001b08:	4689      	mov	r9, r1
 8001b0a:	2002      	movs	r0, #2
 8001b0c:	e7e1      	b.n	8001ad2 <__aeabi_dmul+0x82>
 8001b0e:	4643      	mov	r3, r8
 8001b10:	9301      	str	r3, [sp, #4]
 8001b12:	0034      	movs	r4, r6
 8001b14:	0015      	movs	r5, r2
 8001b16:	4683      	mov	fp, r0
 8001b18:	465b      	mov	r3, fp
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d05e      	beq.n	8001bdc <__aeabi_dmul+0x18c>
 8001b1e:	2b03      	cmp	r3, #3
 8001b20:	d100      	bne.n	8001b24 <__aeabi_dmul+0xd4>
 8001b22:	e1f3      	b.n	8001f0c <__aeabi_dmul+0x4bc>
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d000      	beq.n	8001b2a <__aeabi_dmul+0xda>
 8001b28:	e118      	b.n	8001d5c <__aeabi_dmul+0x30c>
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	2400      	movs	r4, #0
 8001b2e:	2500      	movs	r5, #0
 8001b30:	9b01      	ldr	r3, [sp, #4]
 8001b32:	0512      	lsls	r2, r2, #20
 8001b34:	4322      	orrs	r2, r4
 8001b36:	07db      	lsls	r3, r3, #31
 8001b38:	431a      	orrs	r2, r3
 8001b3a:	0028      	movs	r0, r5
 8001b3c:	0011      	movs	r1, r2
 8001b3e:	b007      	add	sp, #28
 8001b40:	bcf0      	pop	{r4, r5, r6, r7}
 8001b42:	46bb      	mov	fp, r7
 8001b44:	46b2      	mov	sl, r6
 8001b46:	46a9      	mov	r9, r5
 8001b48:	46a0      	mov	r8, r4
 8001b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b4c:	0025      	movs	r5, r4
 8001b4e:	4305      	orrs	r5, r0
 8001b50:	d100      	bne.n	8001b54 <__aeabi_dmul+0x104>
 8001b52:	e141      	b.n	8001dd8 <__aeabi_dmul+0x388>
 8001b54:	2c00      	cmp	r4, #0
 8001b56:	d100      	bne.n	8001b5a <__aeabi_dmul+0x10a>
 8001b58:	e1ad      	b.n	8001eb6 <__aeabi_dmul+0x466>
 8001b5a:	0020      	movs	r0, r4
 8001b5c:	f000 fe4a 	bl	80027f4 <__clzsi2>
 8001b60:	0001      	movs	r1, r0
 8001b62:	0002      	movs	r2, r0
 8001b64:	390b      	subs	r1, #11
 8001b66:	231d      	movs	r3, #29
 8001b68:	0010      	movs	r0, r2
 8001b6a:	1a5b      	subs	r3, r3, r1
 8001b6c:	0031      	movs	r1, r6
 8001b6e:	0035      	movs	r5, r6
 8001b70:	3808      	subs	r0, #8
 8001b72:	4084      	lsls	r4, r0
 8001b74:	40d9      	lsrs	r1, r3
 8001b76:	4085      	lsls	r5, r0
 8001b78:	430c      	orrs	r4, r1
 8001b7a:	489e      	ldr	r0, [pc, #632]	; (8001df4 <__aeabi_dmul+0x3a4>)
 8001b7c:	1a83      	subs	r3, r0, r2
 8001b7e:	9300      	str	r3, [sp, #0]
 8001b80:	2300      	movs	r3, #0
 8001b82:	4699      	mov	r9, r3
 8001b84:	469b      	mov	fp, r3
 8001b86:	e786      	b.n	8001a96 <__aeabi_dmul+0x46>
 8001b88:	0005      	movs	r5, r0
 8001b8a:	4325      	orrs	r5, r4
 8001b8c:	d000      	beq.n	8001b90 <__aeabi_dmul+0x140>
 8001b8e:	e11c      	b.n	8001dca <__aeabi_dmul+0x37a>
 8001b90:	2208      	movs	r2, #8
 8001b92:	9300      	str	r3, [sp, #0]
 8001b94:	2302      	movs	r3, #2
 8001b96:	2400      	movs	r4, #0
 8001b98:	4691      	mov	r9, r2
 8001b9a:	469b      	mov	fp, r3
 8001b9c:	e77b      	b.n	8001a96 <__aeabi_dmul+0x46>
 8001b9e:	4652      	mov	r2, sl
 8001ba0:	4332      	orrs	r2, r6
 8001ba2:	d100      	bne.n	8001ba6 <__aeabi_dmul+0x156>
 8001ba4:	e10a      	b.n	8001dbc <__aeabi_dmul+0x36c>
 8001ba6:	2e00      	cmp	r6, #0
 8001ba8:	d100      	bne.n	8001bac <__aeabi_dmul+0x15c>
 8001baa:	e176      	b.n	8001e9a <__aeabi_dmul+0x44a>
 8001bac:	0030      	movs	r0, r6
 8001bae:	f000 fe21 	bl	80027f4 <__clzsi2>
 8001bb2:	0002      	movs	r2, r0
 8001bb4:	3a0b      	subs	r2, #11
 8001bb6:	231d      	movs	r3, #29
 8001bb8:	0001      	movs	r1, r0
 8001bba:	1a9b      	subs	r3, r3, r2
 8001bbc:	4652      	mov	r2, sl
 8001bbe:	3908      	subs	r1, #8
 8001bc0:	40da      	lsrs	r2, r3
 8001bc2:	408e      	lsls	r6, r1
 8001bc4:	4316      	orrs	r6, r2
 8001bc6:	4652      	mov	r2, sl
 8001bc8:	408a      	lsls	r2, r1
 8001bca:	9b00      	ldr	r3, [sp, #0]
 8001bcc:	4989      	ldr	r1, [pc, #548]	; (8001df4 <__aeabi_dmul+0x3a4>)
 8001bce:	1a18      	subs	r0, r3, r0
 8001bd0:	0003      	movs	r3, r0
 8001bd2:	468c      	mov	ip, r1
 8001bd4:	4463      	add	r3, ip
 8001bd6:	2000      	movs	r0, #0
 8001bd8:	9300      	str	r3, [sp, #0]
 8001bda:	e77a      	b.n	8001ad2 <__aeabi_dmul+0x82>
 8001bdc:	2400      	movs	r4, #0
 8001bde:	2500      	movs	r5, #0
 8001be0:	4a81      	ldr	r2, [pc, #516]	; (8001de8 <__aeabi_dmul+0x398>)
 8001be2:	e7a5      	b.n	8001b30 <__aeabi_dmul+0xe0>
 8001be4:	0c2f      	lsrs	r7, r5, #16
 8001be6:	042d      	lsls	r5, r5, #16
 8001be8:	0c2d      	lsrs	r5, r5, #16
 8001bea:	002b      	movs	r3, r5
 8001bec:	0c11      	lsrs	r1, r2, #16
 8001bee:	0412      	lsls	r2, r2, #16
 8001bf0:	0c12      	lsrs	r2, r2, #16
 8001bf2:	4353      	muls	r3, r2
 8001bf4:	4698      	mov	r8, r3
 8001bf6:	0013      	movs	r3, r2
 8001bf8:	0028      	movs	r0, r5
 8001bfa:	437b      	muls	r3, r7
 8001bfc:	4699      	mov	r9, r3
 8001bfe:	4348      	muls	r0, r1
 8001c00:	4448      	add	r0, r9
 8001c02:	4683      	mov	fp, r0
 8001c04:	4640      	mov	r0, r8
 8001c06:	000b      	movs	r3, r1
 8001c08:	0c00      	lsrs	r0, r0, #16
 8001c0a:	4682      	mov	sl, r0
 8001c0c:	4658      	mov	r0, fp
 8001c0e:	437b      	muls	r3, r7
 8001c10:	4450      	add	r0, sl
 8001c12:	9302      	str	r3, [sp, #8]
 8001c14:	4581      	cmp	r9, r0
 8001c16:	d906      	bls.n	8001c26 <__aeabi_dmul+0x1d6>
 8001c18:	469a      	mov	sl, r3
 8001c1a:	2380      	movs	r3, #128	; 0x80
 8001c1c:	025b      	lsls	r3, r3, #9
 8001c1e:	4699      	mov	r9, r3
 8001c20:	44ca      	add	sl, r9
 8001c22:	4653      	mov	r3, sl
 8001c24:	9302      	str	r3, [sp, #8]
 8001c26:	0c03      	lsrs	r3, r0, #16
 8001c28:	469b      	mov	fp, r3
 8001c2a:	4643      	mov	r3, r8
 8001c2c:	041b      	lsls	r3, r3, #16
 8001c2e:	0400      	lsls	r0, r0, #16
 8001c30:	0c1b      	lsrs	r3, r3, #16
 8001c32:	4698      	mov	r8, r3
 8001c34:	0003      	movs	r3, r0
 8001c36:	4443      	add	r3, r8
 8001c38:	9304      	str	r3, [sp, #16]
 8001c3a:	0c33      	lsrs	r3, r6, #16
 8001c3c:	4699      	mov	r9, r3
 8001c3e:	002b      	movs	r3, r5
 8001c40:	0436      	lsls	r6, r6, #16
 8001c42:	0c36      	lsrs	r6, r6, #16
 8001c44:	4373      	muls	r3, r6
 8001c46:	4698      	mov	r8, r3
 8001c48:	0033      	movs	r3, r6
 8001c4a:	437b      	muls	r3, r7
 8001c4c:	469a      	mov	sl, r3
 8001c4e:	464b      	mov	r3, r9
 8001c50:	435d      	muls	r5, r3
 8001c52:	435f      	muls	r7, r3
 8001c54:	4643      	mov	r3, r8
 8001c56:	4455      	add	r5, sl
 8001c58:	0c18      	lsrs	r0, r3, #16
 8001c5a:	1940      	adds	r0, r0, r5
 8001c5c:	4582      	cmp	sl, r0
 8001c5e:	d903      	bls.n	8001c68 <__aeabi_dmul+0x218>
 8001c60:	2380      	movs	r3, #128	; 0x80
 8001c62:	025b      	lsls	r3, r3, #9
 8001c64:	469a      	mov	sl, r3
 8001c66:	4457      	add	r7, sl
 8001c68:	0c05      	lsrs	r5, r0, #16
 8001c6a:	19eb      	adds	r3, r5, r7
 8001c6c:	9305      	str	r3, [sp, #20]
 8001c6e:	4643      	mov	r3, r8
 8001c70:	041d      	lsls	r5, r3, #16
 8001c72:	0c2d      	lsrs	r5, r5, #16
 8001c74:	0400      	lsls	r0, r0, #16
 8001c76:	1940      	adds	r0, r0, r5
 8001c78:	0c25      	lsrs	r5, r4, #16
 8001c7a:	0424      	lsls	r4, r4, #16
 8001c7c:	0c24      	lsrs	r4, r4, #16
 8001c7e:	0027      	movs	r7, r4
 8001c80:	4357      	muls	r7, r2
 8001c82:	436a      	muls	r2, r5
 8001c84:	4690      	mov	r8, r2
 8001c86:	002a      	movs	r2, r5
 8001c88:	0c3b      	lsrs	r3, r7, #16
 8001c8a:	469a      	mov	sl, r3
 8001c8c:	434a      	muls	r2, r1
 8001c8e:	4361      	muls	r1, r4
 8001c90:	4441      	add	r1, r8
 8001c92:	4451      	add	r1, sl
 8001c94:	4483      	add	fp, r0
 8001c96:	4588      	cmp	r8, r1
 8001c98:	d903      	bls.n	8001ca2 <__aeabi_dmul+0x252>
 8001c9a:	2380      	movs	r3, #128	; 0x80
 8001c9c:	025b      	lsls	r3, r3, #9
 8001c9e:	4698      	mov	r8, r3
 8001ca0:	4442      	add	r2, r8
 8001ca2:	043f      	lsls	r7, r7, #16
 8001ca4:	0c0b      	lsrs	r3, r1, #16
 8001ca6:	0c3f      	lsrs	r7, r7, #16
 8001ca8:	0409      	lsls	r1, r1, #16
 8001caa:	19c9      	adds	r1, r1, r7
 8001cac:	0027      	movs	r7, r4
 8001cae:	4698      	mov	r8, r3
 8001cb0:	464b      	mov	r3, r9
 8001cb2:	4377      	muls	r7, r6
 8001cb4:	435c      	muls	r4, r3
 8001cb6:	436e      	muls	r6, r5
 8001cb8:	435d      	muls	r5, r3
 8001cba:	0c3b      	lsrs	r3, r7, #16
 8001cbc:	4699      	mov	r9, r3
 8001cbe:	19a4      	adds	r4, r4, r6
 8001cc0:	444c      	add	r4, r9
 8001cc2:	4442      	add	r2, r8
 8001cc4:	9503      	str	r5, [sp, #12]
 8001cc6:	42a6      	cmp	r6, r4
 8001cc8:	d904      	bls.n	8001cd4 <__aeabi_dmul+0x284>
 8001cca:	2380      	movs	r3, #128	; 0x80
 8001ccc:	025b      	lsls	r3, r3, #9
 8001cce:	4698      	mov	r8, r3
 8001cd0:	4445      	add	r5, r8
 8001cd2:	9503      	str	r5, [sp, #12]
 8001cd4:	9b02      	ldr	r3, [sp, #8]
 8001cd6:	043f      	lsls	r7, r7, #16
 8001cd8:	445b      	add	r3, fp
 8001cda:	001e      	movs	r6, r3
 8001cdc:	4283      	cmp	r3, r0
 8001cde:	4180      	sbcs	r0, r0
 8001ce0:	0423      	lsls	r3, r4, #16
 8001ce2:	4698      	mov	r8, r3
 8001ce4:	9b05      	ldr	r3, [sp, #20]
 8001ce6:	0c3f      	lsrs	r7, r7, #16
 8001ce8:	4447      	add	r7, r8
 8001cea:	4698      	mov	r8, r3
 8001cec:	1876      	adds	r6, r6, r1
 8001cee:	428e      	cmp	r6, r1
 8001cf0:	4189      	sbcs	r1, r1
 8001cf2:	4447      	add	r7, r8
 8001cf4:	4240      	negs	r0, r0
 8001cf6:	183d      	adds	r5, r7, r0
 8001cf8:	46a8      	mov	r8, r5
 8001cfa:	4693      	mov	fp, r2
 8001cfc:	4249      	negs	r1, r1
 8001cfe:	468a      	mov	sl, r1
 8001d00:	44c3      	add	fp, r8
 8001d02:	429f      	cmp	r7, r3
 8001d04:	41bf      	sbcs	r7, r7
 8001d06:	4580      	cmp	r8, r0
 8001d08:	4180      	sbcs	r0, r0
 8001d0a:	9b03      	ldr	r3, [sp, #12]
 8001d0c:	44da      	add	sl, fp
 8001d0e:	4698      	mov	r8, r3
 8001d10:	4653      	mov	r3, sl
 8001d12:	4240      	negs	r0, r0
 8001d14:	427f      	negs	r7, r7
 8001d16:	4307      	orrs	r7, r0
 8001d18:	0c24      	lsrs	r4, r4, #16
 8001d1a:	4593      	cmp	fp, r2
 8001d1c:	4192      	sbcs	r2, r2
 8001d1e:	458a      	cmp	sl, r1
 8001d20:	4189      	sbcs	r1, r1
 8001d22:	193f      	adds	r7, r7, r4
 8001d24:	0ddc      	lsrs	r4, r3, #23
 8001d26:	9b04      	ldr	r3, [sp, #16]
 8001d28:	0275      	lsls	r5, r6, #9
 8001d2a:	431d      	orrs	r5, r3
 8001d2c:	1e68      	subs	r0, r5, #1
 8001d2e:	4185      	sbcs	r5, r0
 8001d30:	4653      	mov	r3, sl
 8001d32:	4252      	negs	r2, r2
 8001d34:	4249      	negs	r1, r1
 8001d36:	430a      	orrs	r2, r1
 8001d38:	18bf      	adds	r7, r7, r2
 8001d3a:	4447      	add	r7, r8
 8001d3c:	0df6      	lsrs	r6, r6, #23
 8001d3e:	027f      	lsls	r7, r7, #9
 8001d40:	4335      	orrs	r5, r6
 8001d42:	025a      	lsls	r2, r3, #9
 8001d44:	433c      	orrs	r4, r7
 8001d46:	4315      	orrs	r5, r2
 8001d48:	01fb      	lsls	r3, r7, #7
 8001d4a:	d400      	bmi.n	8001d4e <__aeabi_dmul+0x2fe>
 8001d4c:	e0c1      	b.n	8001ed2 <__aeabi_dmul+0x482>
 8001d4e:	2101      	movs	r1, #1
 8001d50:	086a      	lsrs	r2, r5, #1
 8001d52:	400d      	ands	r5, r1
 8001d54:	4315      	orrs	r5, r2
 8001d56:	07e2      	lsls	r2, r4, #31
 8001d58:	4315      	orrs	r5, r2
 8001d5a:	0864      	lsrs	r4, r4, #1
 8001d5c:	4926      	ldr	r1, [pc, #152]	; (8001df8 <__aeabi_dmul+0x3a8>)
 8001d5e:	4461      	add	r1, ip
 8001d60:	2900      	cmp	r1, #0
 8001d62:	dd56      	ble.n	8001e12 <__aeabi_dmul+0x3c2>
 8001d64:	076b      	lsls	r3, r5, #29
 8001d66:	d009      	beq.n	8001d7c <__aeabi_dmul+0x32c>
 8001d68:	220f      	movs	r2, #15
 8001d6a:	402a      	ands	r2, r5
 8001d6c:	2a04      	cmp	r2, #4
 8001d6e:	d005      	beq.n	8001d7c <__aeabi_dmul+0x32c>
 8001d70:	1d2a      	adds	r2, r5, #4
 8001d72:	42aa      	cmp	r2, r5
 8001d74:	41ad      	sbcs	r5, r5
 8001d76:	426d      	negs	r5, r5
 8001d78:	1964      	adds	r4, r4, r5
 8001d7a:	0015      	movs	r5, r2
 8001d7c:	01e3      	lsls	r3, r4, #7
 8001d7e:	d504      	bpl.n	8001d8a <__aeabi_dmul+0x33a>
 8001d80:	2180      	movs	r1, #128	; 0x80
 8001d82:	4a1e      	ldr	r2, [pc, #120]	; (8001dfc <__aeabi_dmul+0x3ac>)
 8001d84:	00c9      	lsls	r1, r1, #3
 8001d86:	4014      	ands	r4, r2
 8001d88:	4461      	add	r1, ip
 8001d8a:	4a1d      	ldr	r2, [pc, #116]	; (8001e00 <__aeabi_dmul+0x3b0>)
 8001d8c:	4291      	cmp	r1, r2
 8001d8e:	dd00      	ble.n	8001d92 <__aeabi_dmul+0x342>
 8001d90:	e724      	b.n	8001bdc <__aeabi_dmul+0x18c>
 8001d92:	0762      	lsls	r2, r4, #29
 8001d94:	08ed      	lsrs	r5, r5, #3
 8001d96:	0264      	lsls	r4, r4, #9
 8001d98:	0549      	lsls	r1, r1, #21
 8001d9a:	4315      	orrs	r5, r2
 8001d9c:	0b24      	lsrs	r4, r4, #12
 8001d9e:	0d4a      	lsrs	r2, r1, #21
 8001da0:	e6c6      	b.n	8001b30 <__aeabi_dmul+0xe0>
 8001da2:	9701      	str	r7, [sp, #4]
 8001da4:	e6b8      	b.n	8001b18 <__aeabi_dmul+0xc8>
 8001da6:	4a10      	ldr	r2, [pc, #64]	; (8001de8 <__aeabi_dmul+0x398>)
 8001da8:	2003      	movs	r0, #3
 8001daa:	4694      	mov	ip, r2
 8001dac:	4463      	add	r3, ip
 8001dae:	464a      	mov	r2, r9
 8001db0:	9300      	str	r3, [sp, #0]
 8001db2:	2303      	movs	r3, #3
 8001db4:	431a      	orrs	r2, r3
 8001db6:	4691      	mov	r9, r2
 8001db8:	4652      	mov	r2, sl
 8001dba:	e68a      	b.n	8001ad2 <__aeabi_dmul+0x82>
 8001dbc:	4649      	mov	r1, r9
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	4319      	orrs	r1, r3
 8001dc2:	4689      	mov	r9, r1
 8001dc4:	2600      	movs	r6, #0
 8001dc6:	2001      	movs	r0, #1
 8001dc8:	e683      	b.n	8001ad2 <__aeabi_dmul+0x82>
 8001dca:	220c      	movs	r2, #12
 8001dcc:	9300      	str	r3, [sp, #0]
 8001dce:	2303      	movs	r3, #3
 8001dd0:	0005      	movs	r5, r0
 8001dd2:	4691      	mov	r9, r2
 8001dd4:	469b      	mov	fp, r3
 8001dd6:	e65e      	b.n	8001a96 <__aeabi_dmul+0x46>
 8001dd8:	2304      	movs	r3, #4
 8001dda:	4699      	mov	r9, r3
 8001ddc:	2300      	movs	r3, #0
 8001dde:	9300      	str	r3, [sp, #0]
 8001de0:	3301      	adds	r3, #1
 8001de2:	2400      	movs	r4, #0
 8001de4:	469b      	mov	fp, r3
 8001de6:	e656      	b.n	8001a96 <__aeabi_dmul+0x46>
 8001de8:	000007ff 	.word	0x000007ff
 8001dec:	fffffc01 	.word	0xfffffc01
 8001df0:	0801fff0 	.word	0x0801fff0
 8001df4:	fffffc0d 	.word	0xfffffc0d
 8001df8:	000003ff 	.word	0x000003ff
 8001dfc:	feffffff 	.word	0xfeffffff
 8001e00:	000007fe 	.word	0x000007fe
 8001e04:	2300      	movs	r3, #0
 8001e06:	2480      	movs	r4, #128	; 0x80
 8001e08:	2500      	movs	r5, #0
 8001e0a:	4a44      	ldr	r2, [pc, #272]	; (8001f1c <__aeabi_dmul+0x4cc>)
 8001e0c:	9301      	str	r3, [sp, #4]
 8001e0e:	0324      	lsls	r4, r4, #12
 8001e10:	e68e      	b.n	8001b30 <__aeabi_dmul+0xe0>
 8001e12:	2001      	movs	r0, #1
 8001e14:	1a40      	subs	r0, r0, r1
 8001e16:	2838      	cmp	r0, #56	; 0x38
 8001e18:	dd00      	ble.n	8001e1c <__aeabi_dmul+0x3cc>
 8001e1a:	e686      	b.n	8001b2a <__aeabi_dmul+0xda>
 8001e1c:	281f      	cmp	r0, #31
 8001e1e:	dd5b      	ble.n	8001ed8 <__aeabi_dmul+0x488>
 8001e20:	221f      	movs	r2, #31
 8001e22:	0023      	movs	r3, r4
 8001e24:	4252      	negs	r2, r2
 8001e26:	1a51      	subs	r1, r2, r1
 8001e28:	40cb      	lsrs	r3, r1
 8001e2a:	0019      	movs	r1, r3
 8001e2c:	2820      	cmp	r0, #32
 8001e2e:	d003      	beq.n	8001e38 <__aeabi_dmul+0x3e8>
 8001e30:	4a3b      	ldr	r2, [pc, #236]	; (8001f20 <__aeabi_dmul+0x4d0>)
 8001e32:	4462      	add	r2, ip
 8001e34:	4094      	lsls	r4, r2
 8001e36:	4325      	orrs	r5, r4
 8001e38:	1e6a      	subs	r2, r5, #1
 8001e3a:	4195      	sbcs	r5, r2
 8001e3c:	002a      	movs	r2, r5
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	2107      	movs	r1, #7
 8001e42:	000d      	movs	r5, r1
 8001e44:	2400      	movs	r4, #0
 8001e46:	4015      	ands	r5, r2
 8001e48:	4211      	tst	r1, r2
 8001e4a:	d05b      	beq.n	8001f04 <__aeabi_dmul+0x4b4>
 8001e4c:	210f      	movs	r1, #15
 8001e4e:	2400      	movs	r4, #0
 8001e50:	4011      	ands	r1, r2
 8001e52:	2904      	cmp	r1, #4
 8001e54:	d053      	beq.n	8001efe <__aeabi_dmul+0x4ae>
 8001e56:	1d11      	adds	r1, r2, #4
 8001e58:	4291      	cmp	r1, r2
 8001e5a:	4192      	sbcs	r2, r2
 8001e5c:	4252      	negs	r2, r2
 8001e5e:	18a4      	adds	r4, r4, r2
 8001e60:	000a      	movs	r2, r1
 8001e62:	0223      	lsls	r3, r4, #8
 8001e64:	d54b      	bpl.n	8001efe <__aeabi_dmul+0x4ae>
 8001e66:	2201      	movs	r2, #1
 8001e68:	2400      	movs	r4, #0
 8001e6a:	2500      	movs	r5, #0
 8001e6c:	e660      	b.n	8001b30 <__aeabi_dmul+0xe0>
 8001e6e:	2380      	movs	r3, #128	; 0x80
 8001e70:	031b      	lsls	r3, r3, #12
 8001e72:	421c      	tst	r4, r3
 8001e74:	d009      	beq.n	8001e8a <__aeabi_dmul+0x43a>
 8001e76:	421e      	tst	r6, r3
 8001e78:	d107      	bne.n	8001e8a <__aeabi_dmul+0x43a>
 8001e7a:	4333      	orrs	r3, r6
 8001e7c:	031c      	lsls	r4, r3, #12
 8001e7e:	4643      	mov	r3, r8
 8001e80:	0015      	movs	r5, r2
 8001e82:	0b24      	lsrs	r4, r4, #12
 8001e84:	4a25      	ldr	r2, [pc, #148]	; (8001f1c <__aeabi_dmul+0x4cc>)
 8001e86:	9301      	str	r3, [sp, #4]
 8001e88:	e652      	b.n	8001b30 <__aeabi_dmul+0xe0>
 8001e8a:	2280      	movs	r2, #128	; 0x80
 8001e8c:	0312      	lsls	r2, r2, #12
 8001e8e:	4314      	orrs	r4, r2
 8001e90:	0324      	lsls	r4, r4, #12
 8001e92:	4a22      	ldr	r2, [pc, #136]	; (8001f1c <__aeabi_dmul+0x4cc>)
 8001e94:	0b24      	lsrs	r4, r4, #12
 8001e96:	9701      	str	r7, [sp, #4]
 8001e98:	e64a      	b.n	8001b30 <__aeabi_dmul+0xe0>
 8001e9a:	f000 fcab 	bl	80027f4 <__clzsi2>
 8001e9e:	0003      	movs	r3, r0
 8001ea0:	001a      	movs	r2, r3
 8001ea2:	3215      	adds	r2, #21
 8001ea4:	3020      	adds	r0, #32
 8001ea6:	2a1c      	cmp	r2, #28
 8001ea8:	dc00      	bgt.n	8001eac <__aeabi_dmul+0x45c>
 8001eaa:	e684      	b.n	8001bb6 <__aeabi_dmul+0x166>
 8001eac:	4656      	mov	r6, sl
 8001eae:	3b08      	subs	r3, #8
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	409e      	lsls	r6, r3
 8001eb4:	e689      	b.n	8001bca <__aeabi_dmul+0x17a>
 8001eb6:	f000 fc9d 	bl	80027f4 <__clzsi2>
 8001eba:	0001      	movs	r1, r0
 8001ebc:	0002      	movs	r2, r0
 8001ebe:	3115      	adds	r1, #21
 8001ec0:	3220      	adds	r2, #32
 8001ec2:	291c      	cmp	r1, #28
 8001ec4:	dc00      	bgt.n	8001ec8 <__aeabi_dmul+0x478>
 8001ec6:	e64e      	b.n	8001b66 <__aeabi_dmul+0x116>
 8001ec8:	0034      	movs	r4, r6
 8001eca:	3808      	subs	r0, #8
 8001ecc:	2500      	movs	r5, #0
 8001ece:	4084      	lsls	r4, r0
 8001ed0:	e653      	b.n	8001b7a <__aeabi_dmul+0x12a>
 8001ed2:	9b00      	ldr	r3, [sp, #0]
 8001ed4:	469c      	mov	ip, r3
 8001ed6:	e741      	b.n	8001d5c <__aeabi_dmul+0x30c>
 8001ed8:	4912      	ldr	r1, [pc, #72]	; (8001f24 <__aeabi_dmul+0x4d4>)
 8001eda:	0022      	movs	r2, r4
 8001edc:	4461      	add	r1, ip
 8001ede:	002e      	movs	r6, r5
 8001ee0:	408d      	lsls	r5, r1
 8001ee2:	408a      	lsls	r2, r1
 8001ee4:	40c6      	lsrs	r6, r0
 8001ee6:	1e69      	subs	r1, r5, #1
 8001ee8:	418d      	sbcs	r5, r1
 8001eea:	4332      	orrs	r2, r6
 8001eec:	432a      	orrs	r2, r5
 8001eee:	40c4      	lsrs	r4, r0
 8001ef0:	0753      	lsls	r3, r2, #29
 8001ef2:	d0b6      	beq.n	8001e62 <__aeabi_dmul+0x412>
 8001ef4:	210f      	movs	r1, #15
 8001ef6:	4011      	ands	r1, r2
 8001ef8:	2904      	cmp	r1, #4
 8001efa:	d1ac      	bne.n	8001e56 <__aeabi_dmul+0x406>
 8001efc:	e7b1      	b.n	8001e62 <__aeabi_dmul+0x412>
 8001efe:	0765      	lsls	r5, r4, #29
 8001f00:	0264      	lsls	r4, r4, #9
 8001f02:	0b24      	lsrs	r4, r4, #12
 8001f04:	08d2      	lsrs	r2, r2, #3
 8001f06:	4315      	orrs	r5, r2
 8001f08:	2200      	movs	r2, #0
 8001f0a:	e611      	b.n	8001b30 <__aeabi_dmul+0xe0>
 8001f0c:	2280      	movs	r2, #128	; 0x80
 8001f0e:	0312      	lsls	r2, r2, #12
 8001f10:	4314      	orrs	r4, r2
 8001f12:	0324      	lsls	r4, r4, #12
 8001f14:	4a01      	ldr	r2, [pc, #4]	; (8001f1c <__aeabi_dmul+0x4cc>)
 8001f16:	0b24      	lsrs	r4, r4, #12
 8001f18:	e60a      	b.n	8001b30 <__aeabi_dmul+0xe0>
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	000007ff 	.word	0x000007ff
 8001f20:	0000043e 	.word	0x0000043e
 8001f24:	0000041e 	.word	0x0000041e

08001f28 <__aeabi_dsub>:
 8001f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f2a:	4657      	mov	r7, sl
 8001f2c:	464e      	mov	r6, r9
 8001f2e:	4645      	mov	r5, r8
 8001f30:	46de      	mov	lr, fp
 8001f32:	0004      	movs	r4, r0
 8001f34:	b5e0      	push	{r5, r6, r7, lr}
 8001f36:	001f      	movs	r7, r3
 8001f38:	0010      	movs	r0, r2
 8001f3a:	030b      	lsls	r3, r1, #12
 8001f3c:	0f62      	lsrs	r2, r4, #29
 8001f3e:	004e      	lsls	r6, r1, #1
 8001f40:	0fcd      	lsrs	r5, r1, #31
 8001f42:	0a5b      	lsrs	r3, r3, #9
 8001f44:	0339      	lsls	r1, r7, #12
 8001f46:	4313      	orrs	r3, r2
 8001f48:	0a49      	lsrs	r1, r1, #9
 8001f4a:	00e2      	lsls	r2, r4, #3
 8001f4c:	0f44      	lsrs	r4, r0, #29
 8001f4e:	4321      	orrs	r1, r4
 8001f50:	4cc2      	ldr	r4, [pc, #776]	; (800225c <__aeabi_dsub+0x334>)
 8001f52:	4691      	mov	r9, r2
 8001f54:	4692      	mov	sl, r2
 8001f56:	00c0      	lsls	r0, r0, #3
 8001f58:	007a      	lsls	r2, r7, #1
 8001f5a:	4680      	mov	r8, r0
 8001f5c:	0d76      	lsrs	r6, r6, #21
 8001f5e:	0d52      	lsrs	r2, r2, #21
 8001f60:	0fff      	lsrs	r7, r7, #31
 8001f62:	42a2      	cmp	r2, r4
 8001f64:	d100      	bne.n	8001f68 <__aeabi_dsub+0x40>
 8001f66:	e0b4      	b.n	80020d2 <__aeabi_dsub+0x1aa>
 8001f68:	2401      	movs	r4, #1
 8001f6a:	4067      	eors	r7, r4
 8001f6c:	46bb      	mov	fp, r7
 8001f6e:	42bd      	cmp	r5, r7
 8001f70:	d100      	bne.n	8001f74 <__aeabi_dsub+0x4c>
 8001f72:	e088      	b.n	8002086 <__aeabi_dsub+0x15e>
 8001f74:	1ab4      	subs	r4, r6, r2
 8001f76:	46a4      	mov	ip, r4
 8001f78:	2c00      	cmp	r4, #0
 8001f7a:	dc00      	bgt.n	8001f7e <__aeabi_dsub+0x56>
 8001f7c:	e0b2      	b.n	80020e4 <__aeabi_dsub+0x1bc>
 8001f7e:	2a00      	cmp	r2, #0
 8001f80:	d100      	bne.n	8001f84 <__aeabi_dsub+0x5c>
 8001f82:	e0c5      	b.n	8002110 <__aeabi_dsub+0x1e8>
 8001f84:	4ab5      	ldr	r2, [pc, #724]	; (800225c <__aeabi_dsub+0x334>)
 8001f86:	4296      	cmp	r6, r2
 8001f88:	d100      	bne.n	8001f8c <__aeabi_dsub+0x64>
 8001f8a:	e28b      	b.n	80024a4 <__aeabi_dsub+0x57c>
 8001f8c:	2280      	movs	r2, #128	; 0x80
 8001f8e:	0412      	lsls	r2, r2, #16
 8001f90:	4311      	orrs	r1, r2
 8001f92:	4662      	mov	r2, ip
 8001f94:	2a38      	cmp	r2, #56	; 0x38
 8001f96:	dd00      	ble.n	8001f9a <__aeabi_dsub+0x72>
 8001f98:	e1a1      	b.n	80022de <__aeabi_dsub+0x3b6>
 8001f9a:	2a1f      	cmp	r2, #31
 8001f9c:	dd00      	ble.n	8001fa0 <__aeabi_dsub+0x78>
 8001f9e:	e216      	b.n	80023ce <__aeabi_dsub+0x4a6>
 8001fa0:	2720      	movs	r7, #32
 8001fa2:	000c      	movs	r4, r1
 8001fa4:	1abf      	subs	r7, r7, r2
 8001fa6:	40bc      	lsls	r4, r7
 8001fa8:	0002      	movs	r2, r0
 8001faa:	46a0      	mov	r8, r4
 8001fac:	4664      	mov	r4, ip
 8001fae:	40b8      	lsls	r0, r7
 8001fb0:	40e2      	lsrs	r2, r4
 8001fb2:	4644      	mov	r4, r8
 8001fb4:	4314      	orrs	r4, r2
 8001fb6:	0002      	movs	r2, r0
 8001fb8:	1e50      	subs	r0, r2, #1
 8001fba:	4182      	sbcs	r2, r0
 8001fbc:	4660      	mov	r0, ip
 8001fbe:	40c1      	lsrs	r1, r0
 8001fc0:	4322      	orrs	r2, r4
 8001fc2:	1a5b      	subs	r3, r3, r1
 8001fc4:	4649      	mov	r1, r9
 8001fc6:	1a8c      	subs	r4, r1, r2
 8001fc8:	45a1      	cmp	r9, r4
 8001fca:	4192      	sbcs	r2, r2
 8001fcc:	4252      	negs	r2, r2
 8001fce:	1a9b      	subs	r3, r3, r2
 8001fd0:	4698      	mov	r8, r3
 8001fd2:	4643      	mov	r3, r8
 8001fd4:	021b      	lsls	r3, r3, #8
 8001fd6:	d400      	bmi.n	8001fda <__aeabi_dsub+0xb2>
 8001fd8:	e117      	b.n	800220a <__aeabi_dsub+0x2e2>
 8001fda:	4643      	mov	r3, r8
 8001fdc:	025b      	lsls	r3, r3, #9
 8001fde:	0a5b      	lsrs	r3, r3, #9
 8001fe0:	4698      	mov	r8, r3
 8001fe2:	4643      	mov	r3, r8
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d100      	bne.n	8001fea <__aeabi_dsub+0xc2>
 8001fe8:	e16c      	b.n	80022c4 <__aeabi_dsub+0x39c>
 8001fea:	4640      	mov	r0, r8
 8001fec:	f000 fc02 	bl	80027f4 <__clzsi2>
 8001ff0:	0002      	movs	r2, r0
 8001ff2:	3a08      	subs	r2, #8
 8001ff4:	2120      	movs	r1, #32
 8001ff6:	0020      	movs	r0, r4
 8001ff8:	4643      	mov	r3, r8
 8001ffa:	1a89      	subs	r1, r1, r2
 8001ffc:	4093      	lsls	r3, r2
 8001ffe:	40c8      	lsrs	r0, r1
 8002000:	4094      	lsls	r4, r2
 8002002:	4303      	orrs	r3, r0
 8002004:	4296      	cmp	r6, r2
 8002006:	dd00      	ble.n	800200a <__aeabi_dsub+0xe2>
 8002008:	e157      	b.n	80022ba <__aeabi_dsub+0x392>
 800200a:	1b96      	subs	r6, r2, r6
 800200c:	1c71      	adds	r1, r6, #1
 800200e:	291f      	cmp	r1, #31
 8002010:	dd00      	ble.n	8002014 <__aeabi_dsub+0xec>
 8002012:	e1cb      	b.n	80023ac <__aeabi_dsub+0x484>
 8002014:	2220      	movs	r2, #32
 8002016:	0018      	movs	r0, r3
 8002018:	0026      	movs	r6, r4
 800201a:	1a52      	subs	r2, r2, r1
 800201c:	4094      	lsls	r4, r2
 800201e:	4090      	lsls	r0, r2
 8002020:	40ce      	lsrs	r6, r1
 8002022:	40cb      	lsrs	r3, r1
 8002024:	1e62      	subs	r2, r4, #1
 8002026:	4194      	sbcs	r4, r2
 8002028:	4330      	orrs	r0, r6
 800202a:	4698      	mov	r8, r3
 800202c:	2600      	movs	r6, #0
 800202e:	4304      	orrs	r4, r0
 8002030:	0763      	lsls	r3, r4, #29
 8002032:	d009      	beq.n	8002048 <__aeabi_dsub+0x120>
 8002034:	230f      	movs	r3, #15
 8002036:	4023      	ands	r3, r4
 8002038:	2b04      	cmp	r3, #4
 800203a:	d005      	beq.n	8002048 <__aeabi_dsub+0x120>
 800203c:	1d23      	adds	r3, r4, #4
 800203e:	42a3      	cmp	r3, r4
 8002040:	41a4      	sbcs	r4, r4
 8002042:	4264      	negs	r4, r4
 8002044:	44a0      	add	r8, r4
 8002046:	001c      	movs	r4, r3
 8002048:	4643      	mov	r3, r8
 800204a:	021b      	lsls	r3, r3, #8
 800204c:	d400      	bmi.n	8002050 <__aeabi_dsub+0x128>
 800204e:	e0df      	b.n	8002210 <__aeabi_dsub+0x2e8>
 8002050:	4b82      	ldr	r3, [pc, #520]	; (800225c <__aeabi_dsub+0x334>)
 8002052:	3601      	adds	r6, #1
 8002054:	429e      	cmp	r6, r3
 8002056:	d100      	bne.n	800205a <__aeabi_dsub+0x132>
 8002058:	e0fb      	b.n	8002252 <__aeabi_dsub+0x32a>
 800205a:	4642      	mov	r2, r8
 800205c:	4b80      	ldr	r3, [pc, #512]	; (8002260 <__aeabi_dsub+0x338>)
 800205e:	08e4      	lsrs	r4, r4, #3
 8002060:	401a      	ands	r2, r3
 8002062:	0013      	movs	r3, r2
 8002064:	0571      	lsls	r1, r6, #21
 8002066:	0752      	lsls	r2, r2, #29
 8002068:	025b      	lsls	r3, r3, #9
 800206a:	4322      	orrs	r2, r4
 800206c:	0b1b      	lsrs	r3, r3, #12
 800206e:	0d49      	lsrs	r1, r1, #21
 8002070:	0509      	lsls	r1, r1, #20
 8002072:	07ed      	lsls	r5, r5, #31
 8002074:	4319      	orrs	r1, r3
 8002076:	4329      	orrs	r1, r5
 8002078:	0010      	movs	r0, r2
 800207a:	bcf0      	pop	{r4, r5, r6, r7}
 800207c:	46bb      	mov	fp, r7
 800207e:	46b2      	mov	sl, r6
 8002080:	46a9      	mov	r9, r5
 8002082:	46a0      	mov	r8, r4
 8002084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002086:	1ab4      	subs	r4, r6, r2
 8002088:	46a4      	mov	ip, r4
 800208a:	2c00      	cmp	r4, #0
 800208c:	dd58      	ble.n	8002140 <__aeabi_dsub+0x218>
 800208e:	2a00      	cmp	r2, #0
 8002090:	d100      	bne.n	8002094 <__aeabi_dsub+0x16c>
 8002092:	e09e      	b.n	80021d2 <__aeabi_dsub+0x2aa>
 8002094:	4a71      	ldr	r2, [pc, #452]	; (800225c <__aeabi_dsub+0x334>)
 8002096:	4296      	cmp	r6, r2
 8002098:	d100      	bne.n	800209c <__aeabi_dsub+0x174>
 800209a:	e13b      	b.n	8002314 <__aeabi_dsub+0x3ec>
 800209c:	2280      	movs	r2, #128	; 0x80
 800209e:	0412      	lsls	r2, r2, #16
 80020a0:	4311      	orrs	r1, r2
 80020a2:	4662      	mov	r2, ip
 80020a4:	2a38      	cmp	r2, #56	; 0x38
 80020a6:	dd00      	ble.n	80020aa <__aeabi_dsub+0x182>
 80020a8:	e0c1      	b.n	800222e <__aeabi_dsub+0x306>
 80020aa:	2a1f      	cmp	r2, #31
 80020ac:	dc00      	bgt.n	80020b0 <__aeabi_dsub+0x188>
 80020ae:	e1bb      	b.n	8002428 <__aeabi_dsub+0x500>
 80020b0:	000c      	movs	r4, r1
 80020b2:	3a20      	subs	r2, #32
 80020b4:	40d4      	lsrs	r4, r2
 80020b6:	0022      	movs	r2, r4
 80020b8:	4664      	mov	r4, ip
 80020ba:	2c20      	cmp	r4, #32
 80020bc:	d004      	beq.n	80020c8 <__aeabi_dsub+0x1a0>
 80020be:	2740      	movs	r7, #64	; 0x40
 80020c0:	1b3f      	subs	r7, r7, r4
 80020c2:	40b9      	lsls	r1, r7
 80020c4:	4308      	orrs	r0, r1
 80020c6:	4680      	mov	r8, r0
 80020c8:	4644      	mov	r4, r8
 80020ca:	1e61      	subs	r1, r4, #1
 80020cc:	418c      	sbcs	r4, r1
 80020ce:	4314      	orrs	r4, r2
 80020d0:	e0b1      	b.n	8002236 <__aeabi_dsub+0x30e>
 80020d2:	000c      	movs	r4, r1
 80020d4:	4304      	orrs	r4, r0
 80020d6:	d02a      	beq.n	800212e <__aeabi_dsub+0x206>
 80020d8:	46bb      	mov	fp, r7
 80020da:	42bd      	cmp	r5, r7
 80020dc:	d02d      	beq.n	800213a <__aeabi_dsub+0x212>
 80020de:	4c61      	ldr	r4, [pc, #388]	; (8002264 <__aeabi_dsub+0x33c>)
 80020e0:	46a4      	mov	ip, r4
 80020e2:	44b4      	add	ip, r6
 80020e4:	4664      	mov	r4, ip
 80020e6:	2c00      	cmp	r4, #0
 80020e8:	d05c      	beq.n	80021a4 <__aeabi_dsub+0x27c>
 80020ea:	1b94      	subs	r4, r2, r6
 80020ec:	46a4      	mov	ip, r4
 80020ee:	2e00      	cmp	r6, #0
 80020f0:	d000      	beq.n	80020f4 <__aeabi_dsub+0x1cc>
 80020f2:	e115      	b.n	8002320 <__aeabi_dsub+0x3f8>
 80020f4:	464d      	mov	r5, r9
 80020f6:	431d      	orrs	r5, r3
 80020f8:	d100      	bne.n	80020fc <__aeabi_dsub+0x1d4>
 80020fa:	e1c3      	b.n	8002484 <__aeabi_dsub+0x55c>
 80020fc:	1e65      	subs	r5, r4, #1
 80020fe:	2c01      	cmp	r4, #1
 8002100:	d100      	bne.n	8002104 <__aeabi_dsub+0x1dc>
 8002102:	e20c      	b.n	800251e <__aeabi_dsub+0x5f6>
 8002104:	4e55      	ldr	r6, [pc, #340]	; (800225c <__aeabi_dsub+0x334>)
 8002106:	42b4      	cmp	r4, r6
 8002108:	d100      	bne.n	800210c <__aeabi_dsub+0x1e4>
 800210a:	e1f8      	b.n	80024fe <__aeabi_dsub+0x5d6>
 800210c:	46ac      	mov	ip, r5
 800210e:	e10e      	b.n	800232e <__aeabi_dsub+0x406>
 8002110:	000a      	movs	r2, r1
 8002112:	4302      	orrs	r2, r0
 8002114:	d100      	bne.n	8002118 <__aeabi_dsub+0x1f0>
 8002116:	e136      	b.n	8002386 <__aeabi_dsub+0x45e>
 8002118:	0022      	movs	r2, r4
 800211a:	3a01      	subs	r2, #1
 800211c:	2c01      	cmp	r4, #1
 800211e:	d100      	bne.n	8002122 <__aeabi_dsub+0x1fa>
 8002120:	e1c6      	b.n	80024b0 <__aeabi_dsub+0x588>
 8002122:	4c4e      	ldr	r4, [pc, #312]	; (800225c <__aeabi_dsub+0x334>)
 8002124:	45a4      	cmp	ip, r4
 8002126:	d100      	bne.n	800212a <__aeabi_dsub+0x202>
 8002128:	e0f4      	b.n	8002314 <__aeabi_dsub+0x3ec>
 800212a:	4694      	mov	ip, r2
 800212c:	e731      	b.n	8001f92 <__aeabi_dsub+0x6a>
 800212e:	2401      	movs	r4, #1
 8002130:	4067      	eors	r7, r4
 8002132:	46bb      	mov	fp, r7
 8002134:	42bd      	cmp	r5, r7
 8002136:	d000      	beq.n	800213a <__aeabi_dsub+0x212>
 8002138:	e71c      	b.n	8001f74 <__aeabi_dsub+0x4c>
 800213a:	4c4a      	ldr	r4, [pc, #296]	; (8002264 <__aeabi_dsub+0x33c>)
 800213c:	46a4      	mov	ip, r4
 800213e:	44b4      	add	ip, r6
 8002140:	4664      	mov	r4, ip
 8002142:	2c00      	cmp	r4, #0
 8002144:	d100      	bne.n	8002148 <__aeabi_dsub+0x220>
 8002146:	e0cf      	b.n	80022e8 <__aeabi_dsub+0x3c0>
 8002148:	1b94      	subs	r4, r2, r6
 800214a:	46a4      	mov	ip, r4
 800214c:	2e00      	cmp	r6, #0
 800214e:	d100      	bne.n	8002152 <__aeabi_dsub+0x22a>
 8002150:	e15c      	b.n	800240c <__aeabi_dsub+0x4e4>
 8002152:	4e42      	ldr	r6, [pc, #264]	; (800225c <__aeabi_dsub+0x334>)
 8002154:	42b2      	cmp	r2, r6
 8002156:	d100      	bne.n	800215a <__aeabi_dsub+0x232>
 8002158:	e1ec      	b.n	8002534 <__aeabi_dsub+0x60c>
 800215a:	2680      	movs	r6, #128	; 0x80
 800215c:	0436      	lsls	r6, r6, #16
 800215e:	4333      	orrs	r3, r6
 8002160:	4664      	mov	r4, ip
 8002162:	2c38      	cmp	r4, #56	; 0x38
 8002164:	dd00      	ble.n	8002168 <__aeabi_dsub+0x240>
 8002166:	e1b3      	b.n	80024d0 <__aeabi_dsub+0x5a8>
 8002168:	2c1f      	cmp	r4, #31
 800216a:	dd00      	ble.n	800216e <__aeabi_dsub+0x246>
 800216c:	e238      	b.n	80025e0 <__aeabi_dsub+0x6b8>
 800216e:	2620      	movs	r6, #32
 8002170:	1b36      	subs	r6, r6, r4
 8002172:	001c      	movs	r4, r3
 8002174:	40b4      	lsls	r4, r6
 8002176:	464f      	mov	r7, r9
 8002178:	46a0      	mov	r8, r4
 800217a:	4664      	mov	r4, ip
 800217c:	40e7      	lsrs	r7, r4
 800217e:	4644      	mov	r4, r8
 8002180:	433c      	orrs	r4, r7
 8002182:	464f      	mov	r7, r9
 8002184:	40b7      	lsls	r7, r6
 8002186:	003e      	movs	r6, r7
 8002188:	1e77      	subs	r7, r6, #1
 800218a:	41be      	sbcs	r6, r7
 800218c:	4334      	orrs	r4, r6
 800218e:	4666      	mov	r6, ip
 8002190:	40f3      	lsrs	r3, r6
 8002192:	18c9      	adds	r1, r1, r3
 8002194:	1824      	adds	r4, r4, r0
 8002196:	4284      	cmp	r4, r0
 8002198:	419b      	sbcs	r3, r3
 800219a:	425b      	negs	r3, r3
 800219c:	4698      	mov	r8, r3
 800219e:	0016      	movs	r6, r2
 80021a0:	4488      	add	r8, r1
 80021a2:	e04e      	b.n	8002242 <__aeabi_dsub+0x31a>
 80021a4:	4a30      	ldr	r2, [pc, #192]	; (8002268 <__aeabi_dsub+0x340>)
 80021a6:	1c74      	adds	r4, r6, #1
 80021a8:	4214      	tst	r4, r2
 80021aa:	d000      	beq.n	80021ae <__aeabi_dsub+0x286>
 80021ac:	e0d6      	b.n	800235c <__aeabi_dsub+0x434>
 80021ae:	464a      	mov	r2, r9
 80021b0:	431a      	orrs	r2, r3
 80021b2:	2e00      	cmp	r6, #0
 80021b4:	d000      	beq.n	80021b8 <__aeabi_dsub+0x290>
 80021b6:	e15b      	b.n	8002470 <__aeabi_dsub+0x548>
 80021b8:	2a00      	cmp	r2, #0
 80021ba:	d100      	bne.n	80021be <__aeabi_dsub+0x296>
 80021bc:	e1a5      	b.n	800250a <__aeabi_dsub+0x5e2>
 80021be:	000a      	movs	r2, r1
 80021c0:	4302      	orrs	r2, r0
 80021c2:	d000      	beq.n	80021c6 <__aeabi_dsub+0x29e>
 80021c4:	e1bb      	b.n	800253e <__aeabi_dsub+0x616>
 80021c6:	464a      	mov	r2, r9
 80021c8:	0759      	lsls	r1, r3, #29
 80021ca:	08d2      	lsrs	r2, r2, #3
 80021cc:	430a      	orrs	r2, r1
 80021ce:	08db      	lsrs	r3, r3, #3
 80021d0:	e027      	b.n	8002222 <__aeabi_dsub+0x2fa>
 80021d2:	000a      	movs	r2, r1
 80021d4:	4302      	orrs	r2, r0
 80021d6:	d100      	bne.n	80021da <__aeabi_dsub+0x2b2>
 80021d8:	e174      	b.n	80024c4 <__aeabi_dsub+0x59c>
 80021da:	0022      	movs	r2, r4
 80021dc:	3a01      	subs	r2, #1
 80021de:	2c01      	cmp	r4, #1
 80021e0:	d005      	beq.n	80021ee <__aeabi_dsub+0x2c6>
 80021e2:	4c1e      	ldr	r4, [pc, #120]	; (800225c <__aeabi_dsub+0x334>)
 80021e4:	45a4      	cmp	ip, r4
 80021e6:	d100      	bne.n	80021ea <__aeabi_dsub+0x2c2>
 80021e8:	e094      	b.n	8002314 <__aeabi_dsub+0x3ec>
 80021ea:	4694      	mov	ip, r2
 80021ec:	e759      	b.n	80020a2 <__aeabi_dsub+0x17a>
 80021ee:	4448      	add	r0, r9
 80021f0:	4548      	cmp	r0, r9
 80021f2:	4192      	sbcs	r2, r2
 80021f4:	185b      	adds	r3, r3, r1
 80021f6:	4698      	mov	r8, r3
 80021f8:	0004      	movs	r4, r0
 80021fa:	4252      	negs	r2, r2
 80021fc:	4490      	add	r8, r2
 80021fe:	4643      	mov	r3, r8
 8002200:	2602      	movs	r6, #2
 8002202:	021b      	lsls	r3, r3, #8
 8002204:	d500      	bpl.n	8002208 <__aeabi_dsub+0x2e0>
 8002206:	e0c4      	b.n	8002392 <__aeabi_dsub+0x46a>
 8002208:	3e01      	subs	r6, #1
 800220a:	0763      	lsls	r3, r4, #29
 800220c:	d000      	beq.n	8002210 <__aeabi_dsub+0x2e8>
 800220e:	e711      	b.n	8002034 <__aeabi_dsub+0x10c>
 8002210:	4643      	mov	r3, r8
 8002212:	46b4      	mov	ip, r6
 8002214:	0759      	lsls	r1, r3, #29
 8002216:	08e2      	lsrs	r2, r4, #3
 8002218:	430a      	orrs	r2, r1
 800221a:	08db      	lsrs	r3, r3, #3
 800221c:	490f      	ldr	r1, [pc, #60]	; (800225c <__aeabi_dsub+0x334>)
 800221e:	458c      	cmp	ip, r1
 8002220:	d040      	beq.n	80022a4 <__aeabi_dsub+0x37c>
 8002222:	4661      	mov	r1, ip
 8002224:	031b      	lsls	r3, r3, #12
 8002226:	0549      	lsls	r1, r1, #21
 8002228:	0b1b      	lsrs	r3, r3, #12
 800222a:	0d49      	lsrs	r1, r1, #21
 800222c:	e720      	b.n	8002070 <__aeabi_dsub+0x148>
 800222e:	4301      	orrs	r1, r0
 8002230:	000c      	movs	r4, r1
 8002232:	1e61      	subs	r1, r4, #1
 8002234:	418c      	sbcs	r4, r1
 8002236:	444c      	add	r4, r9
 8002238:	454c      	cmp	r4, r9
 800223a:	4192      	sbcs	r2, r2
 800223c:	4252      	negs	r2, r2
 800223e:	4690      	mov	r8, r2
 8002240:	4498      	add	r8, r3
 8002242:	4643      	mov	r3, r8
 8002244:	021b      	lsls	r3, r3, #8
 8002246:	d5e0      	bpl.n	800220a <__aeabi_dsub+0x2e2>
 8002248:	4b04      	ldr	r3, [pc, #16]	; (800225c <__aeabi_dsub+0x334>)
 800224a:	3601      	adds	r6, #1
 800224c:	429e      	cmp	r6, r3
 800224e:	d000      	beq.n	8002252 <__aeabi_dsub+0x32a>
 8002250:	e09f      	b.n	8002392 <__aeabi_dsub+0x46a>
 8002252:	0031      	movs	r1, r6
 8002254:	2300      	movs	r3, #0
 8002256:	2200      	movs	r2, #0
 8002258:	e70a      	b.n	8002070 <__aeabi_dsub+0x148>
 800225a:	46c0      	nop			; (mov r8, r8)
 800225c:	000007ff 	.word	0x000007ff
 8002260:	ff7fffff 	.word	0xff7fffff
 8002264:	fffff801 	.word	0xfffff801
 8002268:	000007fe 	.word	0x000007fe
 800226c:	2a00      	cmp	r2, #0
 800226e:	d100      	bne.n	8002272 <__aeabi_dsub+0x34a>
 8002270:	e160      	b.n	8002534 <__aeabi_dsub+0x60c>
 8002272:	000a      	movs	r2, r1
 8002274:	4302      	orrs	r2, r0
 8002276:	d04d      	beq.n	8002314 <__aeabi_dsub+0x3ec>
 8002278:	464a      	mov	r2, r9
 800227a:	075c      	lsls	r4, r3, #29
 800227c:	08d2      	lsrs	r2, r2, #3
 800227e:	4322      	orrs	r2, r4
 8002280:	2480      	movs	r4, #128	; 0x80
 8002282:	08db      	lsrs	r3, r3, #3
 8002284:	0324      	lsls	r4, r4, #12
 8002286:	4223      	tst	r3, r4
 8002288:	d007      	beq.n	800229a <__aeabi_dsub+0x372>
 800228a:	08ce      	lsrs	r6, r1, #3
 800228c:	4226      	tst	r6, r4
 800228e:	d104      	bne.n	800229a <__aeabi_dsub+0x372>
 8002290:	465d      	mov	r5, fp
 8002292:	0033      	movs	r3, r6
 8002294:	08c2      	lsrs	r2, r0, #3
 8002296:	0749      	lsls	r1, r1, #29
 8002298:	430a      	orrs	r2, r1
 800229a:	0f51      	lsrs	r1, r2, #29
 800229c:	00d2      	lsls	r2, r2, #3
 800229e:	08d2      	lsrs	r2, r2, #3
 80022a0:	0749      	lsls	r1, r1, #29
 80022a2:	430a      	orrs	r2, r1
 80022a4:	0011      	movs	r1, r2
 80022a6:	4319      	orrs	r1, r3
 80022a8:	d100      	bne.n	80022ac <__aeabi_dsub+0x384>
 80022aa:	e1c8      	b.n	800263e <__aeabi_dsub+0x716>
 80022ac:	2180      	movs	r1, #128	; 0x80
 80022ae:	0309      	lsls	r1, r1, #12
 80022b0:	430b      	orrs	r3, r1
 80022b2:	031b      	lsls	r3, r3, #12
 80022b4:	49d5      	ldr	r1, [pc, #852]	; (800260c <__aeabi_dsub+0x6e4>)
 80022b6:	0b1b      	lsrs	r3, r3, #12
 80022b8:	e6da      	b.n	8002070 <__aeabi_dsub+0x148>
 80022ba:	49d5      	ldr	r1, [pc, #852]	; (8002610 <__aeabi_dsub+0x6e8>)
 80022bc:	1ab6      	subs	r6, r6, r2
 80022be:	400b      	ands	r3, r1
 80022c0:	4698      	mov	r8, r3
 80022c2:	e6b5      	b.n	8002030 <__aeabi_dsub+0x108>
 80022c4:	0020      	movs	r0, r4
 80022c6:	f000 fa95 	bl	80027f4 <__clzsi2>
 80022ca:	0002      	movs	r2, r0
 80022cc:	3218      	adds	r2, #24
 80022ce:	2a1f      	cmp	r2, #31
 80022d0:	dc00      	bgt.n	80022d4 <__aeabi_dsub+0x3ac>
 80022d2:	e68f      	b.n	8001ff4 <__aeabi_dsub+0xcc>
 80022d4:	0023      	movs	r3, r4
 80022d6:	3808      	subs	r0, #8
 80022d8:	4083      	lsls	r3, r0
 80022da:	2400      	movs	r4, #0
 80022dc:	e692      	b.n	8002004 <__aeabi_dsub+0xdc>
 80022de:	4308      	orrs	r0, r1
 80022e0:	0002      	movs	r2, r0
 80022e2:	1e50      	subs	r0, r2, #1
 80022e4:	4182      	sbcs	r2, r0
 80022e6:	e66d      	b.n	8001fc4 <__aeabi_dsub+0x9c>
 80022e8:	4cca      	ldr	r4, [pc, #808]	; (8002614 <__aeabi_dsub+0x6ec>)
 80022ea:	1c72      	adds	r2, r6, #1
 80022ec:	4222      	tst	r2, r4
 80022ee:	d000      	beq.n	80022f2 <__aeabi_dsub+0x3ca>
 80022f0:	e0ad      	b.n	800244e <__aeabi_dsub+0x526>
 80022f2:	464a      	mov	r2, r9
 80022f4:	431a      	orrs	r2, r3
 80022f6:	2e00      	cmp	r6, #0
 80022f8:	d1b8      	bne.n	800226c <__aeabi_dsub+0x344>
 80022fa:	2a00      	cmp	r2, #0
 80022fc:	d100      	bne.n	8002300 <__aeabi_dsub+0x3d8>
 80022fe:	e158      	b.n	80025b2 <__aeabi_dsub+0x68a>
 8002300:	000a      	movs	r2, r1
 8002302:	4302      	orrs	r2, r0
 8002304:	d000      	beq.n	8002308 <__aeabi_dsub+0x3e0>
 8002306:	e159      	b.n	80025bc <__aeabi_dsub+0x694>
 8002308:	464a      	mov	r2, r9
 800230a:	0759      	lsls	r1, r3, #29
 800230c:	08d2      	lsrs	r2, r2, #3
 800230e:	430a      	orrs	r2, r1
 8002310:	08db      	lsrs	r3, r3, #3
 8002312:	e786      	b.n	8002222 <__aeabi_dsub+0x2fa>
 8002314:	464a      	mov	r2, r9
 8002316:	0759      	lsls	r1, r3, #29
 8002318:	08d2      	lsrs	r2, r2, #3
 800231a:	430a      	orrs	r2, r1
 800231c:	08db      	lsrs	r3, r3, #3
 800231e:	e7c1      	b.n	80022a4 <__aeabi_dsub+0x37c>
 8002320:	4dba      	ldr	r5, [pc, #744]	; (800260c <__aeabi_dsub+0x6e4>)
 8002322:	42aa      	cmp	r2, r5
 8002324:	d100      	bne.n	8002328 <__aeabi_dsub+0x400>
 8002326:	e11e      	b.n	8002566 <__aeabi_dsub+0x63e>
 8002328:	2580      	movs	r5, #128	; 0x80
 800232a:	042d      	lsls	r5, r5, #16
 800232c:	432b      	orrs	r3, r5
 800232e:	4664      	mov	r4, ip
 8002330:	2c38      	cmp	r4, #56	; 0x38
 8002332:	dc5d      	bgt.n	80023f0 <__aeabi_dsub+0x4c8>
 8002334:	2c1f      	cmp	r4, #31
 8002336:	dd00      	ble.n	800233a <__aeabi_dsub+0x412>
 8002338:	e0d0      	b.n	80024dc <__aeabi_dsub+0x5b4>
 800233a:	2520      	movs	r5, #32
 800233c:	4667      	mov	r7, ip
 800233e:	1b2d      	subs	r5, r5, r4
 8002340:	464e      	mov	r6, r9
 8002342:	001c      	movs	r4, r3
 8002344:	40fe      	lsrs	r6, r7
 8002346:	40ac      	lsls	r4, r5
 8002348:	4334      	orrs	r4, r6
 800234a:	464e      	mov	r6, r9
 800234c:	40ae      	lsls	r6, r5
 800234e:	0035      	movs	r5, r6
 8002350:	40fb      	lsrs	r3, r7
 8002352:	1e6e      	subs	r6, r5, #1
 8002354:	41b5      	sbcs	r5, r6
 8002356:	1ac9      	subs	r1, r1, r3
 8002358:	432c      	orrs	r4, r5
 800235a:	e04e      	b.n	80023fa <__aeabi_dsub+0x4d2>
 800235c:	464a      	mov	r2, r9
 800235e:	1a14      	subs	r4, r2, r0
 8002360:	45a1      	cmp	r9, r4
 8002362:	4192      	sbcs	r2, r2
 8002364:	4252      	negs	r2, r2
 8002366:	4690      	mov	r8, r2
 8002368:	1a5f      	subs	r7, r3, r1
 800236a:	003a      	movs	r2, r7
 800236c:	4647      	mov	r7, r8
 800236e:	1bd2      	subs	r2, r2, r7
 8002370:	4690      	mov	r8, r2
 8002372:	0212      	lsls	r2, r2, #8
 8002374:	d500      	bpl.n	8002378 <__aeabi_dsub+0x450>
 8002376:	e08b      	b.n	8002490 <__aeabi_dsub+0x568>
 8002378:	4642      	mov	r2, r8
 800237a:	4322      	orrs	r2, r4
 800237c:	d000      	beq.n	8002380 <__aeabi_dsub+0x458>
 800237e:	e630      	b.n	8001fe2 <__aeabi_dsub+0xba>
 8002380:	2300      	movs	r3, #0
 8002382:	2500      	movs	r5, #0
 8002384:	e74d      	b.n	8002222 <__aeabi_dsub+0x2fa>
 8002386:	464a      	mov	r2, r9
 8002388:	0759      	lsls	r1, r3, #29
 800238a:	08d2      	lsrs	r2, r2, #3
 800238c:	430a      	orrs	r2, r1
 800238e:	08db      	lsrs	r3, r3, #3
 8002390:	e744      	b.n	800221c <__aeabi_dsub+0x2f4>
 8002392:	4642      	mov	r2, r8
 8002394:	4b9e      	ldr	r3, [pc, #632]	; (8002610 <__aeabi_dsub+0x6e8>)
 8002396:	0861      	lsrs	r1, r4, #1
 8002398:	401a      	ands	r2, r3
 800239a:	0013      	movs	r3, r2
 800239c:	2201      	movs	r2, #1
 800239e:	4014      	ands	r4, r2
 80023a0:	430c      	orrs	r4, r1
 80023a2:	07da      	lsls	r2, r3, #31
 80023a4:	085b      	lsrs	r3, r3, #1
 80023a6:	4698      	mov	r8, r3
 80023a8:	4314      	orrs	r4, r2
 80023aa:	e641      	b.n	8002030 <__aeabi_dsub+0x108>
 80023ac:	001a      	movs	r2, r3
 80023ae:	3e1f      	subs	r6, #31
 80023b0:	40f2      	lsrs	r2, r6
 80023b2:	0016      	movs	r6, r2
 80023b4:	2920      	cmp	r1, #32
 80023b6:	d003      	beq.n	80023c0 <__aeabi_dsub+0x498>
 80023b8:	2240      	movs	r2, #64	; 0x40
 80023ba:	1a51      	subs	r1, r2, r1
 80023bc:	408b      	lsls	r3, r1
 80023be:	431c      	orrs	r4, r3
 80023c0:	1e62      	subs	r2, r4, #1
 80023c2:	4194      	sbcs	r4, r2
 80023c4:	2300      	movs	r3, #0
 80023c6:	4334      	orrs	r4, r6
 80023c8:	4698      	mov	r8, r3
 80023ca:	2600      	movs	r6, #0
 80023cc:	e71d      	b.n	800220a <__aeabi_dsub+0x2e2>
 80023ce:	000c      	movs	r4, r1
 80023d0:	3a20      	subs	r2, #32
 80023d2:	40d4      	lsrs	r4, r2
 80023d4:	0022      	movs	r2, r4
 80023d6:	4664      	mov	r4, ip
 80023d8:	2c20      	cmp	r4, #32
 80023da:	d004      	beq.n	80023e6 <__aeabi_dsub+0x4be>
 80023dc:	2740      	movs	r7, #64	; 0x40
 80023de:	1b3f      	subs	r7, r7, r4
 80023e0:	40b9      	lsls	r1, r7
 80023e2:	4308      	orrs	r0, r1
 80023e4:	4680      	mov	r8, r0
 80023e6:	4644      	mov	r4, r8
 80023e8:	1e61      	subs	r1, r4, #1
 80023ea:	418c      	sbcs	r4, r1
 80023ec:	4322      	orrs	r2, r4
 80023ee:	e5e9      	b.n	8001fc4 <__aeabi_dsub+0x9c>
 80023f0:	464c      	mov	r4, r9
 80023f2:	4323      	orrs	r3, r4
 80023f4:	001c      	movs	r4, r3
 80023f6:	1e63      	subs	r3, r4, #1
 80023f8:	419c      	sbcs	r4, r3
 80023fa:	1b04      	subs	r4, r0, r4
 80023fc:	42a0      	cmp	r0, r4
 80023fe:	419b      	sbcs	r3, r3
 8002400:	425b      	negs	r3, r3
 8002402:	1acb      	subs	r3, r1, r3
 8002404:	4698      	mov	r8, r3
 8002406:	465d      	mov	r5, fp
 8002408:	0016      	movs	r6, r2
 800240a:	e5e2      	b.n	8001fd2 <__aeabi_dsub+0xaa>
 800240c:	464e      	mov	r6, r9
 800240e:	431e      	orrs	r6, r3
 8002410:	d100      	bne.n	8002414 <__aeabi_dsub+0x4ec>
 8002412:	e0ae      	b.n	8002572 <__aeabi_dsub+0x64a>
 8002414:	1e66      	subs	r6, r4, #1
 8002416:	2c01      	cmp	r4, #1
 8002418:	d100      	bne.n	800241c <__aeabi_dsub+0x4f4>
 800241a:	e0fd      	b.n	8002618 <__aeabi_dsub+0x6f0>
 800241c:	4f7b      	ldr	r7, [pc, #492]	; (800260c <__aeabi_dsub+0x6e4>)
 800241e:	42bc      	cmp	r4, r7
 8002420:	d100      	bne.n	8002424 <__aeabi_dsub+0x4fc>
 8002422:	e107      	b.n	8002634 <__aeabi_dsub+0x70c>
 8002424:	46b4      	mov	ip, r6
 8002426:	e69b      	b.n	8002160 <__aeabi_dsub+0x238>
 8002428:	4664      	mov	r4, ip
 800242a:	2220      	movs	r2, #32
 800242c:	1b12      	subs	r2, r2, r4
 800242e:	000c      	movs	r4, r1
 8002430:	4094      	lsls	r4, r2
 8002432:	0007      	movs	r7, r0
 8002434:	4090      	lsls	r0, r2
 8002436:	46a0      	mov	r8, r4
 8002438:	4664      	mov	r4, ip
 800243a:	1e42      	subs	r2, r0, #1
 800243c:	4190      	sbcs	r0, r2
 800243e:	4662      	mov	r2, ip
 8002440:	40e7      	lsrs	r7, r4
 8002442:	4644      	mov	r4, r8
 8002444:	40d1      	lsrs	r1, r2
 8002446:	433c      	orrs	r4, r7
 8002448:	4304      	orrs	r4, r0
 800244a:	185b      	adds	r3, r3, r1
 800244c:	e6f3      	b.n	8002236 <__aeabi_dsub+0x30e>
 800244e:	4c6f      	ldr	r4, [pc, #444]	; (800260c <__aeabi_dsub+0x6e4>)
 8002450:	42a2      	cmp	r2, r4
 8002452:	d100      	bne.n	8002456 <__aeabi_dsub+0x52e>
 8002454:	e0d5      	b.n	8002602 <__aeabi_dsub+0x6da>
 8002456:	4448      	add	r0, r9
 8002458:	185b      	adds	r3, r3, r1
 800245a:	4548      	cmp	r0, r9
 800245c:	4189      	sbcs	r1, r1
 800245e:	4249      	negs	r1, r1
 8002460:	185b      	adds	r3, r3, r1
 8002462:	07dc      	lsls	r4, r3, #31
 8002464:	0840      	lsrs	r0, r0, #1
 8002466:	085b      	lsrs	r3, r3, #1
 8002468:	4698      	mov	r8, r3
 800246a:	0016      	movs	r6, r2
 800246c:	4304      	orrs	r4, r0
 800246e:	e6cc      	b.n	800220a <__aeabi_dsub+0x2e2>
 8002470:	2a00      	cmp	r2, #0
 8002472:	d000      	beq.n	8002476 <__aeabi_dsub+0x54e>
 8002474:	e082      	b.n	800257c <__aeabi_dsub+0x654>
 8002476:	000a      	movs	r2, r1
 8002478:	4302      	orrs	r2, r0
 800247a:	d140      	bne.n	80024fe <__aeabi_dsub+0x5d6>
 800247c:	2380      	movs	r3, #128	; 0x80
 800247e:	2500      	movs	r5, #0
 8002480:	031b      	lsls	r3, r3, #12
 8002482:	e713      	b.n	80022ac <__aeabi_dsub+0x384>
 8002484:	074b      	lsls	r3, r1, #29
 8002486:	08c2      	lsrs	r2, r0, #3
 8002488:	431a      	orrs	r2, r3
 800248a:	465d      	mov	r5, fp
 800248c:	08cb      	lsrs	r3, r1, #3
 800248e:	e6c5      	b.n	800221c <__aeabi_dsub+0x2f4>
 8002490:	464a      	mov	r2, r9
 8002492:	1a84      	subs	r4, r0, r2
 8002494:	42a0      	cmp	r0, r4
 8002496:	4192      	sbcs	r2, r2
 8002498:	1acb      	subs	r3, r1, r3
 800249a:	4252      	negs	r2, r2
 800249c:	1a9b      	subs	r3, r3, r2
 800249e:	4698      	mov	r8, r3
 80024a0:	465d      	mov	r5, fp
 80024a2:	e59e      	b.n	8001fe2 <__aeabi_dsub+0xba>
 80024a4:	464a      	mov	r2, r9
 80024a6:	0759      	lsls	r1, r3, #29
 80024a8:	08d2      	lsrs	r2, r2, #3
 80024aa:	430a      	orrs	r2, r1
 80024ac:	08db      	lsrs	r3, r3, #3
 80024ae:	e6f9      	b.n	80022a4 <__aeabi_dsub+0x37c>
 80024b0:	464a      	mov	r2, r9
 80024b2:	1a14      	subs	r4, r2, r0
 80024b4:	45a1      	cmp	r9, r4
 80024b6:	4192      	sbcs	r2, r2
 80024b8:	1a5b      	subs	r3, r3, r1
 80024ba:	4252      	negs	r2, r2
 80024bc:	1a9b      	subs	r3, r3, r2
 80024be:	4698      	mov	r8, r3
 80024c0:	2601      	movs	r6, #1
 80024c2:	e586      	b.n	8001fd2 <__aeabi_dsub+0xaa>
 80024c4:	464a      	mov	r2, r9
 80024c6:	0759      	lsls	r1, r3, #29
 80024c8:	08d2      	lsrs	r2, r2, #3
 80024ca:	430a      	orrs	r2, r1
 80024cc:	08db      	lsrs	r3, r3, #3
 80024ce:	e6a5      	b.n	800221c <__aeabi_dsub+0x2f4>
 80024d0:	464c      	mov	r4, r9
 80024d2:	4323      	orrs	r3, r4
 80024d4:	001c      	movs	r4, r3
 80024d6:	1e63      	subs	r3, r4, #1
 80024d8:	419c      	sbcs	r4, r3
 80024da:	e65b      	b.n	8002194 <__aeabi_dsub+0x26c>
 80024dc:	4665      	mov	r5, ip
 80024de:	001e      	movs	r6, r3
 80024e0:	3d20      	subs	r5, #32
 80024e2:	40ee      	lsrs	r6, r5
 80024e4:	2c20      	cmp	r4, #32
 80024e6:	d005      	beq.n	80024f4 <__aeabi_dsub+0x5cc>
 80024e8:	2540      	movs	r5, #64	; 0x40
 80024ea:	1b2d      	subs	r5, r5, r4
 80024ec:	40ab      	lsls	r3, r5
 80024ee:	464c      	mov	r4, r9
 80024f0:	431c      	orrs	r4, r3
 80024f2:	46a2      	mov	sl, r4
 80024f4:	4654      	mov	r4, sl
 80024f6:	1e63      	subs	r3, r4, #1
 80024f8:	419c      	sbcs	r4, r3
 80024fa:	4334      	orrs	r4, r6
 80024fc:	e77d      	b.n	80023fa <__aeabi_dsub+0x4d2>
 80024fe:	074b      	lsls	r3, r1, #29
 8002500:	08c2      	lsrs	r2, r0, #3
 8002502:	431a      	orrs	r2, r3
 8002504:	465d      	mov	r5, fp
 8002506:	08cb      	lsrs	r3, r1, #3
 8002508:	e6cc      	b.n	80022a4 <__aeabi_dsub+0x37c>
 800250a:	000a      	movs	r2, r1
 800250c:	4302      	orrs	r2, r0
 800250e:	d100      	bne.n	8002512 <__aeabi_dsub+0x5ea>
 8002510:	e736      	b.n	8002380 <__aeabi_dsub+0x458>
 8002512:	074b      	lsls	r3, r1, #29
 8002514:	08c2      	lsrs	r2, r0, #3
 8002516:	431a      	orrs	r2, r3
 8002518:	465d      	mov	r5, fp
 800251a:	08cb      	lsrs	r3, r1, #3
 800251c:	e681      	b.n	8002222 <__aeabi_dsub+0x2fa>
 800251e:	464a      	mov	r2, r9
 8002520:	1a84      	subs	r4, r0, r2
 8002522:	42a0      	cmp	r0, r4
 8002524:	4192      	sbcs	r2, r2
 8002526:	1acb      	subs	r3, r1, r3
 8002528:	4252      	negs	r2, r2
 800252a:	1a9b      	subs	r3, r3, r2
 800252c:	4698      	mov	r8, r3
 800252e:	465d      	mov	r5, fp
 8002530:	2601      	movs	r6, #1
 8002532:	e54e      	b.n	8001fd2 <__aeabi_dsub+0xaa>
 8002534:	074b      	lsls	r3, r1, #29
 8002536:	08c2      	lsrs	r2, r0, #3
 8002538:	431a      	orrs	r2, r3
 800253a:	08cb      	lsrs	r3, r1, #3
 800253c:	e6b2      	b.n	80022a4 <__aeabi_dsub+0x37c>
 800253e:	464a      	mov	r2, r9
 8002540:	1a14      	subs	r4, r2, r0
 8002542:	45a1      	cmp	r9, r4
 8002544:	4192      	sbcs	r2, r2
 8002546:	1a5f      	subs	r7, r3, r1
 8002548:	4252      	negs	r2, r2
 800254a:	1aba      	subs	r2, r7, r2
 800254c:	4690      	mov	r8, r2
 800254e:	0212      	lsls	r2, r2, #8
 8002550:	d56b      	bpl.n	800262a <__aeabi_dsub+0x702>
 8002552:	464a      	mov	r2, r9
 8002554:	1a84      	subs	r4, r0, r2
 8002556:	42a0      	cmp	r0, r4
 8002558:	4192      	sbcs	r2, r2
 800255a:	1acb      	subs	r3, r1, r3
 800255c:	4252      	negs	r2, r2
 800255e:	1a9b      	subs	r3, r3, r2
 8002560:	4698      	mov	r8, r3
 8002562:	465d      	mov	r5, fp
 8002564:	e564      	b.n	8002030 <__aeabi_dsub+0x108>
 8002566:	074b      	lsls	r3, r1, #29
 8002568:	08c2      	lsrs	r2, r0, #3
 800256a:	431a      	orrs	r2, r3
 800256c:	465d      	mov	r5, fp
 800256e:	08cb      	lsrs	r3, r1, #3
 8002570:	e698      	b.n	80022a4 <__aeabi_dsub+0x37c>
 8002572:	074b      	lsls	r3, r1, #29
 8002574:	08c2      	lsrs	r2, r0, #3
 8002576:	431a      	orrs	r2, r3
 8002578:	08cb      	lsrs	r3, r1, #3
 800257a:	e64f      	b.n	800221c <__aeabi_dsub+0x2f4>
 800257c:	000a      	movs	r2, r1
 800257e:	4302      	orrs	r2, r0
 8002580:	d090      	beq.n	80024a4 <__aeabi_dsub+0x57c>
 8002582:	464a      	mov	r2, r9
 8002584:	075c      	lsls	r4, r3, #29
 8002586:	08d2      	lsrs	r2, r2, #3
 8002588:	4314      	orrs	r4, r2
 800258a:	2280      	movs	r2, #128	; 0x80
 800258c:	08db      	lsrs	r3, r3, #3
 800258e:	0312      	lsls	r2, r2, #12
 8002590:	4213      	tst	r3, r2
 8002592:	d008      	beq.n	80025a6 <__aeabi_dsub+0x67e>
 8002594:	08ce      	lsrs	r6, r1, #3
 8002596:	4216      	tst	r6, r2
 8002598:	d105      	bne.n	80025a6 <__aeabi_dsub+0x67e>
 800259a:	08c0      	lsrs	r0, r0, #3
 800259c:	0749      	lsls	r1, r1, #29
 800259e:	4308      	orrs	r0, r1
 80025a0:	0004      	movs	r4, r0
 80025a2:	465d      	mov	r5, fp
 80025a4:	0033      	movs	r3, r6
 80025a6:	0f61      	lsrs	r1, r4, #29
 80025a8:	00e2      	lsls	r2, r4, #3
 80025aa:	0749      	lsls	r1, r1, #29
 80025ac:	08d2      	lsrs	r2, r2, #3
 80025ae:	430a      	orrs	r2, r1
 80025b0:	e678      	b.n	80022a4 <__aeabi_dsub+0x37c>
 80025b2:	074b      	lsls	r3, r1, #29
 80025b4:	08c2      	lsrs	r2, r0, #3
 80025b6:	431a      	orrs	r2, r3
 80025b8:	08cb      	lsrs	r3, r1, #3
 80025ba:	e632      	b.n	8002222 <__aeabi_dsub+0x2fa>
 80025bc:	4448      	add	r0, r9
 80025be:	185b      	adds	r3, r3, r1
 80025c0:	4548      	cmp	r0, r9
 80025c2:	4192      	sbcs	r2, r2
 80025c4:	4698      	mov	r8, r3
 80025c6:	4252      	negs	r2, r2
 80025c8:	4490      	add	r8, r2
 80025ca:	4643      	mov	r3, r8
 80025cc:	0004      	movs	r4, r0
 80025ce:	021b      	lsls	r3, r3, #8
 80025d0:	d400      	bmi.n	80025d4 <__aeabi_dsub+0x6ac>
 80025d2:	e61a      	b.n	800220a <__aeabi_dsub+0x2e2>
 80025d4:	4642      	mov	r2, r8
 80025d6:	4b0e      	ldr	r3, [pc, #56]	; (8002610 <__aeabi_dsub+0x6e8>)
 80025d8:	2601      	movs	r6, #1
 80025da:	401a      	ands	r2, r3
 80025dc:	4690      	mov	r8, r2
 80025de:	e614      	b.n	800220a <__aeabi_dsub+0x2e2>
 80025e0:	4666      	mov	r6, ip
 80025e2:	001f      	movs	r7, r3
 80025e4:	3e20      	subs	r6, #32
 80025e6:	40f7      	lsrs	r7, r6
 80025e8:	2c20      	cmp	r4, #32
 80025ea:	d005      	beq.n	80025f8 <__aeabi_dsub+0x6d0>
 80025ec:	2640      	movs	r6, #64	; 0x40
 80025ee:	1b36      	subs	r6, r6, r4
 80025f0:	40b3      	lsls	r3, r6
 80025f2:	464c      	mov	r4, r9
 80025f4:	431c      	orrs	r4, r3
 80025f6:	46a2      	mov	sl, r4
 80025f8:	4654      	mov	r4, sl
 80025fa:	1e63      	subs	r3, r4, #1
 80025fc:	419c      	sbcs	r4, r3
 80025fe:	433c      	orrs	r4, r7
 8002600:	e5c8      	b.n	8002194 <__aeabi_dsub+0x26c>
 8002602:	0011      	movs	r1, r2
 8002604:	2300      	movs	r3, #0
 8002606:	2200      	movs	r2, #0
 8002608:	e532      	b.n	8002070 <__aeabi_dsub+0x148>
 800260a:	46c0      	nop			; (mov r8, r8)
 800260c:	000007ff 	.word	0x000007ff
 8002610:	ff7fffff 	.word	0xff7fffff
 8002614:	000007fe 	.word	0x000007fe
 8002618:	464a      	mov	r2, r9
 800261a:	1814      	adds	r4, r2, r0
 800261c:	4284      	cmp	r4, r0
 800261e:	4192      	sbcs	r2, r2
 8002620:	185b      	adds	r3, r3, r1
 8002622:	4698      	mov	r8, r3
 8002624:	4252      	negs	r2, r2
 8002626:	4490      	add	r8, r2
 8002628:	e5e9      	b.n	80021fe <__aeabi_dsub+0x2d6>
 800262a:	4642      	mov	r2, r8
 800262c:	4322      	orrs	r2, r4
 800262e:	d100      	bne.n	8002632 <__aeabi_dsub+0x70a>
 8002630:	e6a6      	b.n	8002380 <__aeabi_dsub+0x458>
 8002632:	e5ea      	b.n	800220a <__aeabi_dsub+0x2e2>
 8002634:	074b      	lsls	r3, r1, #29
 8002636:	08c2      	lsrs	r2, r0, #3
 8002638:	431a      	orrs	r2, r3
 800263a:	08cb      	lsrs	r3, r1, #3
 800263c:	e632      	b.n	80022a4 <__aeabi_dsub+0x37c>
 800263e:	2200      	movs	r2, #0
 8002640:	4901      	ldr	r1, [pc, #4]	; (8002648 <__aeabi_dsub+0x720>)
 8002642:	0013      	movs	r3, r2
 8002644:	e514      	b.n	8002070 <__aeabi_dsub+0x148>
 8002646:	46c0      	nop			; (mov r8, r8)
 8002648:	000007ff 	.word	0x000007ff

0800264c <__aeabi_d2iz>:
 800264c:	000a      	movs	r2, r1
 800264e:	b530      	push	{r4, r5, lr}
 8002650:	4c13      	ldr	r4, [pc, #76]	; (80026a0 <__aeabi_d2iz+0x54>)
 8002652:	0053      	lsls	r3, r2, #1
 8002654:	0309      	lsls	r1, r1, #12
 8002656:	0005      	movs	r5, r0
 8002658:	0b09      	lsrs	r1, r1, #12
 800265a:	2000      	movs	r0, #0
 800265c:	0d5b      	lsrs	r3, r3, #21
 800265e:	0fd2      	lsrs	r2, r2, #31
 8002660:	42a3      	cmp	r3, r4
 8002662:	dd04      	ble.n	800266e <__aeabi_d2iz+0x22>
 8002664:	480f      	ldr	r0, [pc, #60]	; (80026a4 <__aeabi_d2iz+0x58>)
 8002666:	4283      	cmp	r3, r0
 8002668:	dd02      	ble.n	8002670 <__aeabi_d2iz+0x24>
 800266a:	4b0f      	ldr	r3, [pc, #60]	; (80026a8 <__aeabi_d2iz+0x5c>)
 800266c:	18d0      	adds	r0, r2, r3
 800266e:	bd30      	pop	{r4, r5, pc}
 8002670:	2080      	movs	r0, #128	; 0x80
 8002672:	0340      	lsls	r0, r0, #13
 8002674:	4301      	orrs	r1, r0
 8002676:	480d      	ldr	r0, [pc, #52]	; (80026ac <__aeabi_d2iz+0x60>)
 8002678:	1ac0      	subs	r0, r0, r3
 800267a:	281f      	cmp	r0, #31
 800267c:	dd08      	ble.n	8002690 <__aeabi_d2iz+0x44>
 800267e:	480c      	ldr	r0, [pc, #48]	; (80026b0 <__aeabi_d2iz+0x64>)
 8002680:	1ac3      	subs	r3, r0, r3
 8002682:	40d9      	lsrs	r1, r3
 8002684:	000b      	movs	r3, r1
 8002686:	4258      	negs	r0, r3
 8002688:	2a00      	cmp	r2, #0
 800268a:	d1f0      	bne.n	800266e <__aeabi_d2iz+0x22>
 800268c:	0018      	movs	r0, r3
 800268e:	e7ee      	b.n	800266e <__aeabi_d2iz+0x22>
 8002690:	4c08      	ldr	r4, [pc, #32]	; (80026b4 <__aeabi_d2iz+0x68>)
 8002692:	40c5      	lsrs	r5, r0
 8002694:	46a4      	mov	ip, r4
 8002696:	4463      	add	r3, ip
 8002698:	4099      	lsls	r1, r3
 800269a:	000b      	movs	r3, r1
 800269c:	432b      	orrs	r3, r5
 800269e:	e7f2      	b.n	8002686 <__aeabi_d2iz+0x3a>
 80026a0:	000003fe 	.word	0x000003fe
 80026a4:	0000041d 	.word	0x0000041d
 80026a8:	7fffffff 	.word	0x7fffffff
 80026ac:	00000433 	.word	0x00000433
 80026b0:	00000413 	.word	0x00000413
 80026b4:	fffffbed 	.word	0xfffffbed

080026b8 <__aeabi_i2d>:
 80026b8:	b570      	push	{r4, r5, r6, lr}
 80026ba:	2800      	cmp	r0, #0
 80026bc:	d016      	beq.n	80026ec <__aeabi_i2d+0x34>
 80026be:	17c3      	asrs	r3, r0, #31
 80026c0:	18c5      	adds	r5, r0, r3
 80026c2:	405d      	eors	r5, r3
 80026c4:	0fc4      	lsrs	r4, r0, #31
 80026c6:	0028      	movs	r0, r5
 80026c8:	f000 f894 	bl	80027f4 <__clzsi2>
 80026cc:	4a11      	ldr	r2, [pc, #68]	; (8002714 <__aeabi_i2d+0x5c>)
 80026ce:	1a12      	subs	r2, r2, r0
 80026d0:	280a      	cmp	r0, #10
 80026d2:	dc16      	bgt.n	8002702 <__aeabi_i2d+0x4a>
 80026d4:	0003      	movs	r3, r0
 80026d6:	002e      	movs	r6, r5
 80026d8:	3315      	adds	r3, #21
 80026da:	409e      	lsls	r6, r3
 80026dc:	230b      	movs	r3, #11
 80026de:	1a18      	subs	r0, r3, r0
 80026e0:	40c5      	lsrs	r5, r0
 80026e2:	0553      	lsls	r3, r2, #21
 80026e4:	032d      	lsls	r5, r5, #12
 80026e6:	0b2d      	lsrs	r5, r5, #12
 80026e8:	0d5b      	lsrs	r3, r3, #21
 80026ea:	e003      	b.n	80026f4 <__aeabi_i2d+0x3c>
 80026ec:	2400      	movs	r4, #0
 80026ee:	2300      	movs	r3, #0
 80026f0:	2500      	movs	r5, #0
 80026f2:	2600      	movs	r6, #0
 80026f4:	051b      	lsls	r3, r3, #20
 80026f6:	432b      	orrs	r3, r5
 80026f8:	07e4      	lsls	r4, r4, #31
 80026fa:	4323      	orrs	r3, r4
 80026fc:	0030      	movs	r0, r6
 80026fe:	0019      	movs	r1, r3
 8002700:	bd70      	pop	{r4, r5, r6, pc}
 8002702:	380b      	subs	r0, #11
 8002704:	4085      	lsls	r5, r0
 8002706:	0553      	lsls	r3, r2, #21
 8002708:	032d      	lsls	r5, r5, #12
 800270a:	2600      	movs	r6, #0
 800270c:	0b2d      	lsrs	r5, r5, #12
 800270e:	0d5b      	lsrs	r3, r3, #21
 8002710:	e7f0      	b.n	80026f4 <__aeabi_i2d+0x3c>
 8002712:	46c0      	nop			; (mov r8, r8)
 8002714:	0000041e 	.word	0x0000041e

08002718 <__aeabi_ui2d>:
 8002718:	b510      	push	{r4, lr}
 800271a:	1e04      	subs	r4, r0, #0
 800271c:	d010      	beq.n	8002740 <__aeabi_ui2d+0x28>
 800271e:	f000 f869 	bl	80027f4 <__clzsi2>
 8002722:	4b0f      	ldr	r3, [pc, #60]	; (8002760 <__aeabi_ui2d+0x48>)
 8002724:	1a1b      	subs	r3, r3, r0
 8002726:	280a      	cmp	r0, #10
 8002728:	dc11      	bgt.n	800274e <__aeabi_ui2d+0x36>
 800272a:	220b      	movs	r2, #11
 800272c:	0021      	movs	r1, r4
 800272e:	1a12      	subs	r2, r2, r0
 8002730:	40d1      	lsrs	r1, r2
 8002732:	3015      	adds	r0, #21
 8002734:	030a      	lsls	r2, r1, #12
 8002736:	055b      	lsls	r3, r3, #21
 8002738:	4084      	lsls	r4, r0
 800273a:	0b12      	lsrs	r2, r2, #12
 800273c:	0d5b      	lsrs	r3, r3, #21
 800273e:	e001      	b.n	8002744 <__aeabi_ui2d+0x2c>
 8002740:	2300      	movs	r3, #0
 8002742:	2200      	movs	r2, #0
 8002744:	051b      	lsls	r3, r3, #20
 8002746:	4313      	orrs	r3, r2
 8002748:	0020      	movs	r0, r4
 800274a:	0019      	movs	r1, r3
 800274c:	bd10      	pop	{r4, pc}
 800274e:	0022      	movs	r2, r4
 8002750:	380b      	subs	r0, #11
 8002752:	4082      	lsls	r2, r0
 8002754:	055b      	lsls	r3, r3, #21
 8002756:	0312      	lsls	r2, r2, #12
 8002758:	2400      	movs	r4, #0
 800275a:	0b12      	lsrs	r2, r2, #12
 800275c:	0d5b      	lsrs	r3, r3, #21
 800275e:	e7f1      	b.n	8002744 <__aeabi_ui2d+0x2c>
 8002760:	0000041e 	.word	0x0000041e

08002764 <__aeabi_f2d>:
 8002764:	b570      	push	{r4, r5, r6, lr}
 8002766:	0043      	lsls	r3, r0, #1
 8002768:	0246      	lsls	r6, r0, #9
 800276a:	0fc4      	lsrs	r4, r0, #31
 800276c:	20fe      	movs	r0, #254	; 0xfe
 800276e:	0e1b      	lsrs	r3, r3, #24
 8002770:	1c59      	adds	r1, r3, #1
 8002772:	0a75      	lsrs	r5, r6, #9
 8002774:	4208      	tst	r0, r1
 8002776:	d00c      	beq.n	8002792 <__aeabi_f2d+0x2e>
 8002778:	22e0      	movs	r2, #224	; 0xe0
 800277a:	0092      	lsls	r2, r2, #2
 800277c:	4694      	mov	ip, r2
 800277e:	076d      	lsls	r5, r5, #29
 8002780:	0b36      	lsrs	r6, r6, #12
 8002782:	4463      	add	r3, ip
 8002784:	051b      	lsls	r3, r3, #20
 8002786:	4333      	orrs	r3, r6
 8002788:	07e4      	lsls	r4, r4, #31
 800278a:	4323      	orrs	r3, r4
 800278c:	0028      	movs	r0, r5
 800278e:	0019      	movs	r1, r3
 8002790:	bd70      	pop	{r4, r5, r6, pc}
 8002792:	2b00      	cmp	r3, #0
 8002794:	d114      	bne.n	80027c0 <__aeabi_f2d+0x5c>
 8002796:	2d00      	cmp	r5, #0
 8002798:	d01b      	beq.n	80027d2 <__aeabi_f2d+0x6e>
 800279a:	0028      	movs	r0, r5
 800279c:	f000 f82a 	bl	80027f4 <__clzsi2>
 80027a0:	280a      	cmp	r0, #10
 80027a2:	dc1c      	bgt.n	80027de <__aeabi_f2d+0x7a>
 80027a4:	230b      	movs	r3, #11
 80027a6:	002a      	movs	r2, r5
 80027a8:	1a1b      	subs	r3, r3, r0
 80027aa:	40da      	lsrs	r2, r3
 80027ac:	0003      	movs	r3, r0
 80027ae:	3315      	adds	r3, #21
 80027b0:	409d      	lsls	r5, r3
 80027b2:	4b0e      	ldr	r3, [pc, #56]	; (80027ec <__aeabi_f2d+0x88>)
 80027b4:	0312      	lsls	r2, r2, #12
 80027b6:	1a1b      	subs	r3, r3, r0
 80027b8:	055b      	lsls	r3, r3, #21
 80027ba:	0b16      	lsrs	r6, r2, #12
 80027bc:	0d5b      	lsrs	r3, r3, #21
 80027be:	e7e1      	b.n	8002784 <__aeabi_f2d+0x20>
 80027c0:	2d00      	cmp	r5, #0
 80027c2:	d009      	beq.n	80027d8 <__aeabi_f2d+0x74>
 80027c4:	0b32      	lsrs	r2, r6, #12
 80027c6:	2680      	movs	r6, #128	; 0x80
 80027c8:	0336      	lsls	r6, r6, #12
 80027ca:	4b09      	ldr	r3, [pc, #36]	; (80027f0 <__aeabi_f2d+0x8c>)
 80027cc:	076d      	lsls	r5, r5, #29
 80027ce:	4316      	orrs	r6, r2
 80027d0:	e7d8      	b.n	8002784 <__aeabi_f2d+0x20>
 80027d2:	2300      	movs	r3, #0
 80027d4:	2600      	movs	r6, #0
 80027d6:	e7d5      	b.n	8002784 <__aeabi_f2d+0x20>
 80027d8:	2600      	movs	r6, #0
 80027da:	4b05      	ldr	r3, [pc, #20]	; (80027f0 <__aeabi_f2d+0x8c>)
 80027dc:	e7d2      	b.n	8002784 <__aeabi_f2d+0x20>
 80027de:	0003      	movs	r3, r0
 80027e0:	002a      	movs	r2, r5
 80027e2:	3b0b      	subs	r3, #11
 80027e4:	409a      	lsls	r2, r3
 80027e6:	2500      	movs	r5, #0
 80027e8:	e7e3      	b.n	80027b2 <__aeabi_f2d+0x4e>
 80027ea:	46c0      	nop			; (mov r8, r8)
 80027ec:	00000389 	.word	0x00000389
 80027f0:	000007ff 	.word	0x000007ff

080027f4 <__clzsi2>:
 80027f4:	211c      	movs	r1, #28
 80027f6:	2301      	movs	r3, #1
 80027f8:	041b      	lsls	r3, r3, #16
 80027fa:	4298      	cmp	r0, r3
 80027fc:	d301      	bcc.n	8002802 <__clzsi2+0xe>
 80027fe:	0c00      	lsrs	r0, r0, #16
 8002800:	3910      	subs	r1, #16
 8002802:	0a1b      	lsrs	r3, r3, #8
 8002804:	4298      	cmp	r0, r3
 8002806:	d301      	bcc.n	800280c <__clzsi2+0x18>
 8002808:	0a00      	lsrs	r0, r0, #8
 800280a:	3908      	subs	r1, #8
 800280c:	091b      	lsrs	r3, r3, #4
 800280e:	4298      	cmp	r0, r3
 8002810:	d301      	bcc.n	8002816 <__clzsi2+0x22>
 8002812:	0900      	lsrs	r0, r0, #4
 8002814:	3904      	subs	r1, #4
 8002816:	a202      	add	r2, pc, #8	; (adr r2, 8002820 <__clzsi2+0x2c>)
 8002818:	5c10      	ldrb	r0, [r2, r0]
 800281a:	1840      	adds	r0, r0, r1
 800281c:	4770      	bx	lr
 800281e:	46c0      	nop			; (mov r8, r8)
 8002820:	02020304 	.word	0x02020304
 8002824:	01010101 	.word	0x01010101
	...

08002830 <__clzdi2>:
 8002830:	b510      	push	{r4, lr}
 8002832:	2900      	cmp	r1, #0
 8002834:	d103      	bne.n	800283e <__clzdi2+0xe>
 8002836:	f7ff ffdd 	bl	80027f4 <__clzsi2>
 800283a:	3020      	adds	r0, #32
 800283c:	e002      	b.n	8002844 <__clzdi2+0x14>
 800283e:	1c08      	adds	r0, r1, #0
 8002840:	f7ff ffd8 	bl	80027f4 <__clzsi2>
 8002844:	bd10      	pop	{r4, pc}
 8002846:	46c0      	nop			; (mov r8, r8)

08002848 <__divdi3>:
 8002848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800284a:	4657      	mov	r7, sl
 800284c:	464e      	mov	r6, r9
 800284e:	4645      	mov	r5, r8
 8002850:	46de      	mov	lr, fp
 8002852:	b5e0      	push	{r5, r6, r7, lr}
 8002854:	000f      	movs	r7, r1
 8002856:	0019      	movs	r1, r3
 8002858:	2300      	movs	r3, #0
 800285a:	0006      	movs	r6, r0
 800285c:	4698      	mov	r8, r3
 800285e:	0010      	movs	r0, r2
 8002860:	b083      	sub	sp, #12
 8002862:	2f00      	cmp	r7, #0
 8002864:	da07      	bge.n	8002876 <__divdi3+0x2e>
 8002866:	0033      	movs	r3, r6
 8002868:	003c      	movs	r4, r7
 800286a:	2700      	movs	r7, #0
 800286c:	425e      	negs	r6, r3
 800286e:	41a7      	sbcs	r7, r4
 8002870:	2301      	movs	r3, #1
 8002872:	425b      	negs	r3, r3
 8002874:	4698      	mov	r8, r3
 8002876:	2900      	cmp	r1, #0
 8002878:	da07      	bge.n	800288a <__divdi3+0x42>
 800287a:	4643      	mov	r3, r8
 800287c:	43db      	mvns	r3, r3
 800287e:	000c      	movs	r4, r1
 8002880:	4698      	mov	r8, r3
 8002882:	0003      	movs	r3, r0
 8002884:	2100      	movs	r1, #0
 8002886:	4258      	negs	r0, r3
 8002888:	41a1      	sbcs	r1, r4
 800288a:	0034      	movs	r4, r6
 800288c:	003d      	movs	r5, r7
 800288e:	4682      	mov	sl, r0
 8002890:	4689      	mov	r9, r1
 8002892:	42b9      	cmp	r1, r7
 8002894:	d86a      	bhi.n	800296c <__divdi3+0x124>
 8002896:	d067      	beq.n	8002968 <__divdi3+0x120>
 8002898:	4649      	mov	r1, r9
 800289a:	4650      	mov	r0, sl
 800289c:	f7ff ffc8 	bl	8002830 <__clzdi2>
 80028a0:	4683      	mov	fp, r0
 80028a2:	0039      	movs	r1, r7
 80028a4:	0030      	movs	r0, r6
 80028a6:	f7ff ffc3 	bl	8002830 <__clzdi2>
 80028aa:	465b      	mov	r3, fp
 80028ac:	1a1b      	subs	r3, r3, r0
 80028ae:	469c      	mov	ip, r3
 80028b0:	3b20      	subs	r3, #32
 80028b2:	469b      	mov	fp, r3
 80028b4:	d46b      	bmi.n	800298e <__divdi3+0x146>
 80028b6:	4658      	mov	r0, fp
 80028b8:	4651      	mov	r1, sl
 80028ba:	4081      	lsls	r1, r0
 80028bc:	4660      	mov	r0, ip
 80028be:	000b      	movs	r3, r1
 80028c0:	4651      	mov	r1, sl
 80028c2:	4081      	lsls	r1, r0
 80028c4:	000a      	movs	r2, r1
 80028c6:	42bb      	cmp	r3, r7
 80028c8:	d900      	bls.n	80028cc <__divdi3+0x84>
 80028ca:	e072      	b.n	80029b2 <__divdi3+0x16a>
 80028cc:	42bb      	cmp	r3, r7
 80028ce:	d100      	bne.n	80028d2 <__divdi3+0x8a>
 80028d0:	e079      	b.n	80029c6 <__divdi3+0x17e>
 80028d2:	0034      	movs	r4, r6
 80028d4:	003d      	movs	r5, r7
 80028d6:	4659      	mov	r1, fp
 80028d8:	1aa4      	subs	r4, r4, r2
 80028da:	419d      	sbcs	r5, r3
 80028dc:	2900      	cmp	r1, #0
 80028de:	da00      	bge.n	80028e2 <__divdi3+0x9a>
 80028e0:	e074      	b.n	80029cc <__divdi3+0x184>
 80028e2:	2100      	movs	r1, #0
 80028e4:	2000      	movs	r0, #0
 80028e6:	2601      	movs	r6, #1
 80028e8:	9000      	str	r0, [sp, #0]
 80028ea:	9101      	str	r1, [sp, #4]
 80028ec:	4659      	mov	r1, fp
 80028ee:	408e      	lsls	r6, r1
 80028f0:	9601      	str	r6, [sp, #4]
 80028f2:	4661      	mov	r1, ip
 80028f4:	2601      	movs	r6, #1
 80028f6:	408e      	lsls	r6, r1
 80028f8:	4661      	mov	r1, ip
 80028fa:	9600      	str	r6, [sp, #0]
 80028fc:	2900      	cmp	r1, #0
 80028fe:	d05f      	beq.n	80029c0 <__divdi3+0x178>
 8002900:	07d9      	lsls	r1, r3, #31
 8002902:	0856      	lsrs	r6, r2, #1
 8002904:	430e      	orrs	r6, r1
 8002906:	085f      	lsrs	r7, r3, #1
 8002908:	4661      	mov	r1, ip
 800290a:	2201      	movs	r2, #1
 800290c:	2300      	movs	r3, #0
 800290e:	e00c      	b.n	800292a <__divdi3+0xe2>
 8002910:	42af      	cmp	r7, r5
 8002912:	d101      	bne.n	8002918 <__divdi3+0xd0>
 8002914:	42a6      	cmp	r6, r4
 8002916:	d80a      	bhi.n	800292e <__divdi3+0xe6>
 8002918:	1ba4      	subs	r4, r4, r6
 800291a:	41bd      	sbcs	r5, r7
 800291c:	1924      	adds	r4, r4, r4
 800291e:	416d      	adcs	r5, r5
 8002920:	3901      	subs	r1, #1
 8002922:	18a4      	adds	r4, r4, r2
 8002924:	415d      	adcs	r5, r3
 8002926:	2900      	cmp	r1, #0
 8002928:	d006      	beq.n	8002938 <__divdi3+0xf0>
 800292a:	42af      	cmp	r7, r5
 800292c:	d9f0      	bls.n	8002910 <__divdi3+0xc8>
 800292e:	3901      	subs	r1, #1
 8002930:	1924      	adds	r4, r4, r4
 8002932:	416d      	adcs	r5, r5
 8002934:	2900      	cmp	r1, #0
 8002936:	d1f8      	bne.n	800292a <__divdi3+0xe2>
 8002938:	9800      	ldr	r0, [sp, #0]
 800293a:	9901      	ldr	r1, [sp, #4]
 800293c:	465b      	mov	r3, fp
 800293e:	1900      	adds	r0, r0, r4
 8002940:	4169      	adcs	r1, r5
 8002942:	2b00      	cmp	r3, #0
 8002944:	db4d      	blt.n	80029e2 <__divdi3+0x19a>
 8002946:	002e      	movs	r6, r5
 8002948:	002c      	movs	r4, r5
 800294a:	40de      	lsrs	r6, r3
 800294c:	4663      	mov	r3, ip
 800294e:	40dc      	lsrs	r4, r3
 8002950:	465b      	mov	r3, fp
 8002952:	2b00      	cmp	r3, #0
 8002954:	db55      	blt.n	8002a02 <__divdi3+0x1ba>
 8002956:	0034      	movs	r4, r6
 8002958:	409c      	lsls	r4, r3
 800295a:	0023      	movs	r3, r4
 800295c:	4664      	mov	r4, ip
 800295e:	40a6      	lsls	r6, r4
 8002960:	0032      	movs	r2, r6
 8002962:	1a80      	subs	r0, r0, r2
 8002964:	4199      	sbcs	r1, r3
 8002966:	e003      	b.n	8002970 <__divdi3+0x128>
 8002968:	42b0      	cmp	r0, r6
 800296a:	d995      	bls.n	8002898 <__divdi3+0x50>
 800296c:	2000      	movs	r0, #0
 800296e:	2100      	movs	r1, #0
 8002970:	4643      	mov	r3, r8
 8002972:	2b00      	cmp	r3, #0
 8002974:	d004      	beq.n	8002980 <__divdi3+0x138>
 8002976:	0003      	movs	r3, r0
 8002978:	000c      	movs	r4, r1
 800297a:	2100      	movs	r1, #0
 800297c:	4258      	negs	r0, r3
 800297e:	41a1      	sbcs	r1, r4
 8002980:	b003      	add	sp, #12
 8002982:	bcf0      	pop	{r4, r5, r6, r7}
 8002984:	46bb      	mov	fp, r7
 8002986:	46b2      	mov	sl, r6
 8002988:	46a9      	mov	r9, r5
 800298a:	46a0      	mov	r8, r4
 800298c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800298e:	4662      	mov	r2, ip
 8002990:	4648      	mov	r0, r9
 8002992:	2320      	movs	r3, #32
 8002994:	4651      	mov	r1, sl
 8002996:	4090      	lsls	r0, r2
 8002998:	1a9b      	subs	r3, r3, r2
 800299a:	40d9      	lsrs	r1, r3
 800299c:	0003      	movs	r3, r0
 800299e:	9100      	str	r1, [sp, #0]
 80029a0:	9900      	ldr	r1, [sp, #0]
 80029a2:	4660      	mov	r0, ip
 80029a4:	430b      	orrs	r3, r1
 80029a6:	4651      	mov	r1, sl
 80029a8:	4081      	lsls	r1, r0
 80029aa:	000a      	movs	r2, r1
 80029ac:	42bb      	cmp	r3, r7
 80029ae:	d800      	bhi.n	80029b2 <__divdi3+0x16a>
 80029b0:	e78c      	b.n	80028cc <__divdi3+0x84>
 80029b2:	2100      	movs	r1, #0
 80029b4:	2000      	movs	r0, #0
 80029b6:	9000      	str	r0, [sp, #0]
 80029b8:	9101      	str	r1, [sp, #4]
 80029ba:	4661      	mov	r1, ip
 80029bc:	2900      	cmp	r1, #0
 80029be:	d19f      	bne.n	8002900 <__divdi3+0xb8>
 80029c0:	9800      	ldr	r0, [sp, #0]
 80029c2:	9901      	ldr	r1, [sp, #4]
 80029c4:	e7d4      	b.n	8002970 <__divdi3+0x128>
 80029c6:	42b1      	cmp	r1, r6
 80029c8:	d8f3      	bhi.n	80029b2 <__divdi3+0x16a>
 80029ca:	e782      	b.n	80028d2 <__divdi3+0x8a>
 80029cc:	4661      	mov	r1, ip
 80029ce:	2620      	movs	r6, #32
 80029d0:	2701      	movs	r7, #1
 80029d2:	1a76      	subs	r6, r6, r1
 80029d4:	2000      	movs	r0, #0
 80029d6:	2100      	movs	r1, #0
 80029d8:	40f7      	lsrs	r7, r6
 80029da:	9000      	str	r0, [sp, #0]
 80029dc:	9101      	str	r1, [sp, #4]
 80029de:	9701      	str	r7, [sp, #4]
 80029e0:	e787      	b.n	80028f2 <__divdi3+0xaa>
 80029e2:	4662      	mov	r2, ip
 80029e4:	2320      	movs	r3, #32
 80029e6:	1a9b      	subs	r3, r3, r2
 80029e8:	002a      	movs	r2, r5
 80029ea:	409a      	lsls	r2, r3
 80029ec:	0026      	movs	r6, r4
 80029ee:	0013      	movs	r3, r2
 80029f0:	4662      	mov	r2, ip
 80029f2:	40d6      	lsrs	r6, r2
 80029f4:	002c      	movs	r4, r5
 80029f6:	431e      	orrs	r6, r3
 80029f8:	4663      	mov	r3, ip
 80029fa:	40dc      	lsrs	r4, r3
 80029fc:	465b      	mov	r3, fp
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	daa9      	bge.n	8002956 <__divdi3+0x10e>
 8002a02:	4662      	mov	r2, ip
 8002a04:	2320      	movs	r3, #32
 8002a06:	0035      	movs	r5, r6
 8002a08:	4094      	lsls	r4, r2
 8002a0a:	1a9b      	subs	r3, r3, r2
 8002a0c:	40dd      	lsrs	r5, r3
 8002a0e:	0023      	movs	r3, r4
 8002a10:	432b      	orrs	r3, r5
 8002a12:	e7a3      	b.n	800295c <__divdi3+0x114>

08002a14 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8002a18:	f002 f81c 	bl	8004a54 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8002a1c:	f000 f80e 	bl	8002a3c <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8002a20:	46c0      	nop			; (mov r8, r8)
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	425b      	negs	r3, r3
 8002a2e:	0018      	movs	r0, r3
 8002a30:	f019 fd98 	bl	801c564 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 8002a34:	46c0      	nop			; (mov r8, r8)
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
	...

08002a3c <LoRaWAN_Init>:
//MX_I2C1_Init(hi2c1);
//MX_USART2_Init();
/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af04      	add	r7, sp, #16
	   	bmp280.addr = BMP280_I2C_ADDRESS_0;
	   	bmp280.i2c = &hi2c1;
*/
	   //float pressure1, temperature1, humidity1;
  /* USER CODE END LoRaWAN_Init_1 */
  LED_Init(LED_BLUE);
 8002a42:	2002      	movs	r0, #2
 8002a44:	f002 ff54 	bl	80058f0 <BSP_LED_Init>
  LED_Init(LED_RED1);
 8002a48:	2001      	movs	r0, #1
 8002a4a:	f002 ff51 	bl	80058f0 <BSP_LED_Init>
  LED_Init(LED_RED2);
 8002a4e:	2003      	movs	r0, #3
 8002a50:	f002 ff4e 	bl	80058f0 <BSP_LED_Init>
  /* Get LoRa APP version*/
//  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION:        V%X.%X.%X\r\n",
//          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_MAIN_SHIFT),
//          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB1_SHIFT),
//          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB2_SHIFT));
  APP_LOG(TS_OFF, VLEVEL_M, "###### Версия протокола:   V%X.%X.%X\r\n",
 8002a54:	4b3c      	ldr	r3, [pc, #240]	; (8002b48 <LoRaWAN_Init+0x10c>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	9202      	str	r2, [sp, #8]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	9201      	str	r2, [sp, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	9200      	str	r2, [sp, #0]
 8002a62:	2200      	movs	r2, #0
 8002a64:	2100      	movs	r1, #0
 8002a66:	2002      	movs	r0, #2
 8002a68:	f019 f9ba 	bl	801bde0 <UTIL_ADV_TRACE_COND_FSend>
//          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB1_SHIFT),
//          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB2_SHIFT)); // версия радио Middleware
  // APP_LOG(TS_OFF, VLEVEL_M, "MW_:   V%X.%X.%X\r\n",
//  APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ==== EEEPROM EST====\r\n");
  //	 (uint8_t) buffer[20]);
  UTIL_TIMER_Create(&TxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 8002a6c:	4b37      	ldr	r3, [pc, #220]	; (8002b4c <LoRaWAN_Init+0x110>)
 8002a6e:	2201      	movs	r2, #1
 8002a70:	4251      	negs	r1, r2
 8002a72:	4837      	ldr	r0, [pc, #220]	; (8002b50 <LoRaWAN_Init+0x114>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	9200      	str	r2, [sp, #0]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f01a f845 	bl	801cb08 <UTIL_TIMER_Create>
  // HAL_LPTIM_Counter_Start_IT(&hlptim,1000);
 // HAL_LPTIM_TimeOut_Start(&TxLedTimer, uint32_t Period, uint32_t Timeout);
  //  HAL_LPTIM_TimeOut_Start(&TxLedTimer,5000,1000);
   UTIL_TIMER_Create(&RxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 8002a7e:	4b35      	ldr	r3, [pc, #212]	; (8002b54 <LoRaWAN_Init+0x118>)
 8002a80:	2201      	movs	r2, #1
 8002a82:	4251      	negs	r1, r2
 8002a84:	4834      	ldr	r0, [pc, #208]	; (8002b58 <LoRaWAN_Init+0x11c>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	9200      	str	r2, [sp, #0]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f01a f83c 	bl	801cb08 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, 0xFFFFFFFFU, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 8002a90:	4b32      	ldr	r3, [pc, #200]	; (8002b5c <LoRaWAN_Init+0x120>)
 8002a92:	2201      	movs	r2, #1
 8002a94:	4251      	negs	r1, r2
 8002a96:	4832      	ldr	r0, [pc, #200]	; (8002b60 <LoRaWAN_Init+0x124>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	9200      	str	r2, [sp, #0]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f01a f833 	bl	801cb08 <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&TxLedTimer, 500);// 3 стр отрубают светодиоды если их не будет,
 8002aa2:	23fa      	movs	r3, #250	; 0xfa
 8002aa4:	005a      	lsls	r2, r3, #1
 8002aa6:	4b2a      	ldr	r3, [pc, #168]	; (8002b50 <LoRaWAN_Init+0x114>)
 8002aa8:	0011      	movs	r1, r2
 8002aaa:	0018      	movs	r0, r3
 8002aac:	f01a f954 	bl	801cd58 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&RxLedTimer, 500);
 8002ab0:	23fa      	movs	r3, #250	; 0xfa
 8002ab2:	005a      	lsls	r2, r3, #1
 8002ab4:	4b28      	ldr	r3, [pc, #160]	; (8002b58 <LoRaWAN_Init+0x11c>)
 8002ab6:	0011      	movs	r1, r2
 8002ab8:	0018      	movs	r0, r3
 8002aba:	f01a f94d 	bl	801cd58 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&JoinLedTimer, 500);
 8002abe:	23fa      	movs	r3, #250	; 0xfa
 8002ac0:	005a      	lsls	r2, r3, #1
 8002ac2:	4b27      	ldr	r3, [pc, #156]	; (8002b60 <LoRaWAN_Init+0x124>)
 8002ac4:	0011      	movs	r1, r2
 8002ac6:	0018      	movs	r0, r3
 8002ac8:	f01a f946 	bl	801cd58 <UTIL_TIMER_SetPeriod>
 // bmp280_read_float(&bmp280, &temperature1, &pressure1, &humidity1);
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 8002acc:	4b25      	ldr	r3, [pc, #148]	; (8002b64 <LoRaWAN_Init+0x128>)
 8002ace:	001a      	movs	r2, r3
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	2001      	movs	r0, #1
 8002ad4:	f019 fe28 	bl	801c728 <UTIL_SEQ_RegTask>
 8002ad8:	4b23      	ldr	r3, [pc, #140]	; (8002b68 <LoRaWAN_Init+0x12c>)
 8002ada:	001a      	movs	r2, r3
 8002adc:	2100      	movs	r1, #0
 8002ade:	2002      	movs	r0, #2
 8002ae0:	f019 fe22 	bl	801c728 <UTIL_SEQ_RegTask>
  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 8002ae4:	f000 fba0 	bl	8003228 <LoraInfo_Init>
  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks);
 8002ae8:	4b20      	ldr	r3, [pc, #128]	; (8002b6c <LoRaWAN_Init+0x130>)
 8002aea:	0018      	movs	r0, r3
 8002aec:	f00b f998 	bl	800de20 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 8002af0:	4b1f      	ldr	r3, [pc, #124]	; (8002b70 <LoRaWAN_Init+0x134>)
 8002af2:	0018      	movs	r0, r3
 8002af4:	f00b f9da 	bl	800deac <LmHandlerConfigure>

  UTIL_TIMER_Start(&JoinLedTimer);
 8002af8:	4b19      	ldr	r3, [pc, #100]	; (8002b60 <LoRaWAN_Init+0x124>)
 8002afa:	0018      	movs	r0, r3
 8002afc:	f01a f83c 	bl	801cb78 <UTIL_TIMER_Start>
  // HAL_LPTIM_Counter_Start_IT(&JoinLedTimer,1000); // попытка переделать светодиодом под LPTIM
  LmHandlerJoin(ActivationType);
 8002b00:	4b1c      	ldr	r3, [pc, #112]	; (8002b74 <LoRaWAN_Init+0x138>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	0018      	movs	r0, r3
 8002b06:	f00b fae3 	bl	800e0d0 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 8002b0a:	4b1b      	ldr	r3, [pc, #108]	; (8002b78 <LoRaWAN_Init+0x13c>)
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d113      	bne.n	8002b3a <LoRaWAN_Init+0xfe>
  {
    /* send every time timer elapses */

    UTIL_TIMER_Create(&TxTimer,  0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 8002b12:	4b1a      	ldr	r3, [pc, #104]	; (8002b7c <LoRaWAN_Init+0x140>)
 8002b14:	2201      	movs	r2, #1
 8002b16:	4251      	negs	r1, r2
 8002b18:	4819      	ldr	r0, [pc, #100]	; (8002b80 <LoRaWAN_Init+0x144>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	9200      	str	r2, [sp, #0]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f019 fff2 	bl	801cb08 <UTIL_TIMER_Create>
    UTIL_TIMER_SetPeriod(&TxTimer,  APP_TX_DUTYCYCLE);
 8002b24:	4a17      	ldr	r2, [pc, #92]	; (8002b84 <LoRaWAN_Init+0x148>)
 8002b26:	4b16      	ldr	r3, [pc, #88]	; (8002b80 <LoRaWAN_Init+0x144>)
 8002b28:	0011      	movs	r1, r2
 8002b2a:	0018      	movs	r0, r3
 8002b2c:	f01a f914 	bl	801cd58 <UTIL_TIMER_SetPeriod>
    //  HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
    //  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
    //HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI); // NEW
      UTIL_TIMER_Start(&TxTimer);
 8002b30:	4b13      	ldr	r3, [pc, #76]	; (8002b80 <LoRaWAN_Init+0x144>)
 8002b32:	0018      	movs	r0, r3
 8002b34:	f01a f820 	bl	801cb78 <UTIL_TIMER_Start>
  /* bmp280_init_default_params(&bmp280.params);
   	bmp280.addr = BMP280_I2C_ADDRESS_0;
   	bmp280.i2c = &hi2c1;
   	*/
  /* USER CODE END LoRaWAN_Init_Last */
}
 8002b38:	e003      	b.n	8002b42 <LoRaWAN_Init+0x106>
    BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	2000      	movs	r0, #0
 8002b3e:	f002 ff99 	bl	8005a74 <BSP_PB_Init>
}
 8002b42:	46c0      	nop			; (mov r8, r8)
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	0801ea88 	.word	0x0801ea88
 8002b4c:	08002f9d 	.word	0x08002f9d
 8002b50:	20000364 	.word	0x20000364
 8002b54:	08002fb3 	.word	0x08002fb3
 8002b58:	2000037c 	.word	0x2000037c
 8002b5c:	08002fc9 	.word	0x08002fc9
 8002b60:	20000394 	.word	0x20000394
 8002b64:	0800e015 	.word	0x0800e015
 8002b68:	08002cbd 	.word	0x08002cbd
 8002b6c:	2000000c 	.word	0x2000000c
 8002b70:	2000002c 	.word	0x2000002c
 8002b74:	20000008 	.word	0x20000008
 8002b78:	2000034b 	.word	0x2000034b
 8002b7c:	08002f79 	.word	0x08002f79
 8002b80:	2000034c 	.word	0x2000034c
 8002b84:	00002710 	.word	0x00002710

08002b88 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 8002b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b8a:	b089      	sub	sp, #36	; 0x24
 8002b8c:	af06      	add	r7, sp, #24
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */

  /* USER CODE END OnRxData_1 */
  if ((appData != NULL) && (params != NULL))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d100      	bne.n	8002b9a <OnRxData+0x12>
 8002b98:	e07a      	b.n	8002c90 <OnRxData+0x108>
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d100      	bne.n	8002ba2 <OnRxData+0x1a>
 8002ba0:	e076      	b.n	8002c90 <OnRxData+0x108>
  {
    LED_On(LED_BLUE);
 8002ba2:	2002      	movs	r0, #2
 8002ba4:	f002 ff12 	bl	80059cc <BSP_LED_On>
    static const char *slotStrings[] = { "1", "2", "C", "C Multicast", "B Ping-Slot", "B Multicast Ping-Slot" };

//    APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Indication ==========\r\n");
    APP_LOG(TS_OFF, VLEVEL_M, "\r\n ========== Индикация приёма данных ==========\r\n");
 8002ba8:	4b3e      	ldr	r3, [pc, #248]	; (8002ca4 <OnRxData+0x11c>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	2100      	movs	r1, #0
 8002bae:	2002      	movs	r0, #2
 8002bb0:	f019 f916 	bl	801bde0 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, " D/L FRAME:%04d | SLOT:%s | PORT:%d | DR:%d | RSSI:%d | SNR:%d\r\n",
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	683a      	ldr	r2, [r7, #0]
 8002bba:	7b12      	ldrb	r2, [r2, #12]
 8002bbc:	b252      	sxtb	r2, r2
 8002bbe:	0011      	movs	r1, r2
 8002bc0:	4a39      	ldr	r2, [pc, #228]	; (8002ca8 <OnRxData+0x120>)
 8002bc2:	0089      	lsls	r1, r1, #2
 8002bc4:	588a      	ldr	r2, [r1, r2]
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	7809      	ldrb	r1, [r1, #0]
 8002bca:	0008      	movs	r0, r1
 8002bcc:	6839      	ldr	r1, [r7, #0]
 8002bce:	7889      	ldrb	r1, [r1, #2]
 8002bd0:	b249      	sxtb	r1, r1
 8002bd2:	000c      	movs	r4, r1
 8002bd4:	6839      	ldr	r1, [r7, #0]
 8002bd6:	78c9      	ldrb	r1, [r1, #3]
 8002bd8:	b249      	sxtb	r1, r1
 8002bda:	000d      	movs	r5, r1
 8002bdc:	6839      	ldr	r1, [r7, #0]
 8002bde:	7909      	ldrb	r1, [r1, #4]
 8002be0:	b249      	sxtb	r1, r1
 8002be2:	000e      	movs	r6, r1
 8002be4:	4931      	ldr	r1, [pc, #196]	; (8002cac <OnRxData+0x124>)
 8002be6:	9605      	str	r6, [sp, #20]
 8002be8:	9504      	str	r5, [sp, #16]
 8002bea:	9403      	str	r4, [sp, #12]
 8002bec:	9002      	str	r0, [sp, #8]
 8002bee:	9201      	str	r2, [sp, #4]
 8002bf0:	9300      	str	r3, [sp, #0]
 8002bf2:	000b      	movs	r3, r1
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	2003      	movs	r0, #3
 8002bfa:	f019 f8f1 	bl	801bde0 <UTIL_ADV_TRACE_COND_FSend>
            params->DownlinkCounter, slotStrings[params->RxSlot], appData->Port, params->Datarate, params->Rssi, params->Snr);
    switch (appData->Port)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d020      	beq.n	8002c48 <OnRxData+0xc0>
 8002c06:	2b03      	cmp	r3, #3
 8002c08:	d144      	bne.n	8002c94 <OnRxData+0x10c>
    {
      case LORAWAN_SWITCH_CLASS_PORT:
        /*this port switches the class*/
        if (appData->BufferSize == 1)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	785b      	ldrb	r3, [r3, #1]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d116      	bne.n	8002c40 <OnRxData+0xb8>
        {
          switch (appData->Buffer[0])
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d00d      	beq.n	8002c38 <OnRxData+0xb0>
 8002c1c:	dc12      	bgt.n	8002c44 <OnRxData+0xbc>
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d002      	beq.n	8002c28 <OnRxData+0xa0>
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d004      	beq.n	8002c30 <OnRxData+0xa8>
            {
              LmHandlerRequestClass(CLASS_C);
              break;
            }
            default:
              break;
 8002c26:	e00d      	b.n	8002c44 <OnRxData+0xbc>
              LmHandlerRequestClass(CLASS_A);
 8002c28:	2000      	movs	r0, #0
 8002c2a:	f00b fbab 	bl	800e384 <LmHandlerRequestClass>
              break;
 8002c2e:	e00a      	b.n	8002c46 <OnRxData+0xbe>
              LmHandlerRequestClass(CLASS_B);
 8002c30:	2001      	movs	r0, #1
 8002c32:	f00b fba7 	bl	800e384 <LmHandlerRequestClass>
              break;
 8002c36:	e006      	b.n	8002c46 <OnRxData+0xbe>
              LmHandlerRequestClass(CLASS_C);
 8002c38:	2002      	movs	r0, #2
 8002c3a:	f00b fba3 	bl	800e384 <LmHandlerRequestClass>
              break;
 8002c3e:	e002      	b.n	8002c46 <OnRxData+0xbe>
          }
        }
 8002c40:	46c0      	nop			; (mov r8, r8)
 8002c42:	e02a      	b.n	8002c9a <OnRxData+0x112>
              break;
 8002c44:	46c0      	nop			; (mov r8, r8)
        break;
 8002c46:	e028      	b.n	8002c9a <OnRxData+0x112>
      case LORAWAN_USER_APP_PORT:
        if (appData->BufferSize == 1)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	785b      	ldrb	r3, [r3, #1]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d123      	bne.n	8002c98 <OnRxData+0x110>
        {
          AppLedStateOn = appData->Buffer[0] & 0x01;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	2201      	movs	r2, #1
 8002c58:	4013      	ands	r3, r2
 8002c5a:	b2da      	uxtb	r2, r3
 8002c5c:	4b14      	ldr	r3, [pc, #80]	; (8002cb0 <OnRxData+0x128>)
 8002c5e:	701a      	strb	r2, [r3, #0]
          if (AppLedStateOn == RESET)
 8002c60:	4b13      	ldr	r3, [pc, #76]	; (8002cb0 <OnRxData+0x128>)
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d109      	bne.n	8002c7c <OnRxData+0xf4>
          {
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
 8002c68:	4b12      	ldr	r3, [pc, #72]	; (8002cb4 <OnRxData+0x12c>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	2003      	movs	r0, #3
 8002c70:	f019 f8b6 	bl	801bde0 <UTIL_ADV_TRACE_COND_FSend>

            LED_Off(LED_RED1);
 8002c74:	2001      	movs	r0, #1
 8002c76:	f002 fec5 	bl	8005a04 <BSP_LED_Off>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");

            LED_On(LED_RED1);
          }
        }
        break;
 8002c7a:	e00d      	b.n	8002c98 <OnRxData+0x110>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 8002c7c:	4b0e      	ldr	r3, [pc, #56]	; (8002cb8 <OnRxData+0x130>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	2100      	movs	r1, #0
 8002c82:	2003      	movs	r0, #3
 8002c84:	f019 f8ac 	bl	801bde0 <UTIL_ADV_TRACE_COND_FSend>
            LED_On(LED_RED1);
 8002c88:	2001      	movs	r0, #1
 8002c8a:	f002 fe9f 	bl	80059cc <BSP_LED_On>
        break;
 8002c8e:	e003      	b.n	8002c98 <OnRxData+0x110>
        /* USER CODE BEGIN OnRxData_Switch_default */

        /* USER CODE END OnRxData_Switch_default */
        break;
    }
  }
 8002c90:	46c0      	nop			; (mov r8, r8)
 8002c92:	e002      	b.n	8002c9a <OnRxData+0x112>
        break;
 8002c94:	46c0      	nop			; (mov r8, r8)
 8002c96:	e000      	b.n	8002c9a <OnRxData+0x112>
        break;
 8002c98:	46c0      	nop			; (mov r8, r8)

  /* USER CODE BEGIN OnRxData_2 */

  /* USER CODE END OnRxData_2 */
}
 8002c9a:	46c0      	nop			; (mov r8, r8)
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	b003      	add	sp, #12
 8002ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ca2:	46c0      	nop			; (mov r8, r8)
 8002ca4:	0801eac0 	.word	0x0801eac0
 8002ca8:	20000034 	.word	0x20000034
 8002cac:	0801eb08 	.word	0x0801eb08
 8002cb0:	2000034a 	.word	0x2000034a
 8002cb4:	0801eb4c 	.word	0x0801eb4c
 8002cb8:	0801eb58 	.word	0x0801eb58

08002cbc <SendTxData>:

static void SendTxData(void)
{
 8002cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cbe:	b0e3      	sub	sp, #396	; 0x18c
 8002cc0:	af06      	add	r7, sp, #24
	// uint8_t payload = "textovik";
	 uint16_t pressure = 0;
 8002cc2:	23b7      	movs	r3, #183	; 0xb7
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	18fb      	adds	r3, r7, r3
 8002cc8:	2200      	movs	r2, #0
 8002cca:	801a      	strh	r2, [r3, #0]
	 int16_t temperature = 0;
 8002ccc:	23b6      	movs	r3, #182	; 0xb6
 8002cce:	005b      	lsls	r3, r3, #1
 8002cd0:	18fb      	adds	r3, r7, r3
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	801a      	strh	r2, [r3, #0]
  	//int16_t temperature = 0;
  	uint16_t Defbuff;  // для счётчика с охранной кнопки
  sensor_t sensor_data;
  uint16_t size;
  uint8_t Datasens[256];
  UTIL_TIMER_Time_t nextTxIn = 0;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	63bb      	str	r3, [r7, #56]	; 0x38
  bmp280_params_t params;
	RTC_TimeTypeDef sTime1;
  	RTC_DateTypeDef sDate1;
  	uint8_t buffer[20];
  	volatile uint16_t adc = 0;
 8002cda:	4b93      	ldr	r3, [pc, #588]	; (8002f28 <SendTxData+0x26c>)
 8002cdc:	22b8      	movs	r2, #184	; 0xb8
 8002cde:	0052      	lsls	r2, r2, #1
 8002ce0:	4694      	mov	ip, r2
 8002ce2:	44bc      	add	ip, r7
 8002ce4:	4463      	add	r3, ip
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	801a      	strh	r2, [r3, #0]
#ifdef CAYENNE_LPP
  uint8_t channel = 0;
#else
   uint16_t humidity = 0;
 8002cea:	23b5      	movs	r3, #181	; 0xb5
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	18fb      	adds	r3, r7, r3
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	801a      	strh	r2, [r3, #0]
  uint32_t i = 0;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	22b2      	movs	r2, #178	; 0xb2
 8002cf8:	0052      	lsls	r2, r2, #1
 8002cfa:	18ba      	adds	r2, r7, r2
 8002cfc:	6013      	str	r3, [r2, #0]
  int32_t latitude = 0;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	22b0      	movs	r2, #176	; 0xb0
 8002d02:	0052      	lsls	r2, r2, #1
 8002d04:	18ba      	adds	r2, r7, r2
 8002d06:	6013      	str	r3, [r2, #0]
  int32_t longitude = 0;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	22ae      	movs	r2, #174	; 0xae
 8002d0c:	0052      	lsls	r2, r2, #1
 8002d0e:	18ba      	adds	r2, r7, r2
 8002d10:	6013      	str	r3, [r2, #0]
  uint16_t altitudeGps = 0;
 8002d12:	23ad      	movs	r3, #173	; 0xad
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	18fb      	adds	r3, r7, r3
 8002d18:	2200      	movs	r2, #0
 8002d1a:	801a      	strh	r2, [r3, #0]
  #else
   temperature = (SYS_GetTemperatureLevel() >> 8);
  #endif  /* SENSOR_ENABLED */
  /*  pressure    = (uint16_t)(sensor_data.pressure * 100 / 10);      /* in hPa / 10 */

    AppData.Port = LORAWAN_USER_APP_PORT;
 8002d1c:	4b83      	ldr	r3, [pc, #524]	; (8002f2c <SendTxData+0x270>)
 8002d1e:	2202      	movs	r2, #2
 8002d20:	701a      	strb	r2, [r3, #0]
  //
  // MX_I2C1_Init();
 // MX_USART2_Init();
  // MX_I2C1_Init();
  // BSP_SPI1_Init();
  BSP_I2C1_Init();
 8002d22:	f002 fc9d 	bl	8005660 <BSP_I2C1_Init>
  MX_ADC_Init();
 8002d26:	f000 fab3 	bl	8003290 <MX_ADC_Init>
  MX_LPTIM1_Init();
 8002d2a:	f000 f9f7 	bl	800311c <MX_LPTIM1_Init>

  HAL_LPTIM_Encoder_Start_IT(&hlptim1, 1000);
 8002d2e:	23fa      	movs	r3, #250	; 0xfa
 8002d30:	009a      	lsls	r2, r3, #2
 8002d32:	4b7f      	ldr	r3, [pc, #508]	; (8002f30 <SendTxData+0x274>)
 8002d34:	0011      	movs	r1, r2
 8002d36:	0018      	movs	r0, r3
 8002d38:	f001 fba8 	bl	800448c <HAL_LPTIM_Encoder_Start_IT>
    		 */
  // MX_I2C1_Init();
 // HAL_I2C_GetState;// cntGetValue(&Defbuff);  // здесь будет сбор значения вскрытий// HTS221_Init(pObj);//HTS221_GetCapabilities(pObj, Capabilities);  //  HAL_LPTIM_Counter_Start_IT(&hlptim1,1000);
  // HAL_LPTIM_Counter_Start_IT(&hlptim1,1000);
    //	  HAL_Delay(200);  //	UTIL_TIMER_Create(&ReadLedTimer, 0xFFFFFFFFU, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);  // UTIL_TIMER_SetPeriod(&ReadLedTimer, 5000);  	//UTIL_TIMER_Create(&RxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
  	  bmp280_init_default_params(&bmp280.params);
 8002d3c:	4b7d      	ldr	r3, [pc, #500]	; (8002f34 <SendTxData+0x278>)
 8002d3e:	0018      	movs	r0, r3
 8002d40:	f01a fbb6 	bl	801d4b0 <bmp280_init_default_params>
    	bmp280.addr = BMP280_I2C_ADDRESS_0;
 8002d44:	4b7c      	ldr	r3, [pc, #496]	; (8002f38 <SendTxData+0x27c>)
 8002d46:	2276      	movs	r2, #118	; 0x76
 8002d48:	849a      	strh	r2, [r3, #36]	; 0x24
    	bmp280.i2c = &hi2c1;
 8002d4a:	4b7b      	ldr	r3, [pc, #492]	; (8002f38 <SendTxData+0x27c>)
 8002d4c:	4a7b      	ldr	r2, [pc, #492]	; (8002f3c <SendTxData+0x280>)
 8002d4e:	629a      	str	r2, [r3, #40]	; 0x28
    	bmp280_init(&bmp280, &bmp280.params);
 8002d50:	4a78      	ldr	r2, [pc, #480]	; (8002f34 <SendTxData+0x278>)
 8002d52:	4b79      	ldr	r3, [pc, #484]	; (8002f38 <SendTxData+0x27c>)
 8002d54:	0011      	movs	r1, r2
 8002d56:	0018      	movs	r0, r3
 8002d58:	f01a fd3e 	bl	801d7d8 <bmp280_init>
    	HAL_Delay(2000);
 8002d5c:	23fa      	movs	r3, #250	; 0xfa
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	0018      	movs	r0, r3
 8002d62:	f002 f834 	bl	8004dce <HAL_Delay>
    	 // HTS221_GetCapabilities(&hts221, temperature);
  // bmp280.i2c = &hi2c1;
  //  bmp280_read_float(&bmp280, &temperature1, &pressure1, &humidity1); старое
    	// HAL_Delay(100);
//    	 bmp280_read_float(&bmp280, &temperature1, &pressure1, &humidity1);
    	 bmp280_read_fixed(&bmp280, &temperaturei, &pressurei, &humidityi);
 8002d66:	4b76      	ldr	r3, [pc, #472]	; (8002f40 <SendTxData+0x284>)
 8002d68:	4a76      	ldr	r2, [pc, #472]	; (8002f44 <SendTxData+0x288>)
 8002d6a:	4977      	ldr	r1, [pc, #476]	; (8002f48 <SendTxData+0x28c>)
 8002d6c:	4872      	ldr	r0, [pc, #456]	; (8002f38 <SendTxData+0x27c>)
 8002d6e:	f01b f833 	bl	801ddd8 <bmp280_read_fixed>
    	 int32_t temp_decimal = temperaturei % 100; // Получаем 2-ю цифру после запятой
 8002d72:	4b75      	ldr	r3, [pc, #468]	; (8002f48 <SendTxData+0x28c>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2164      	movs	r1, #100	; 0x64
 8002d78:	0018      	movs	r0, r3
 8002d7a:	f7fd fb3d 	bl	80003f8 <__aeabi_idivmod>
 8002d7e:	000b      	movs	r3, r1
 8002d80:	22aa      	movs	r2, #170	; 0xaa
 8002d82:	0052      	lsls	r2, r2, #1
 8002d84:	18ba      	adds	r2, r7, r2
 8002d86:	6013      	str	r3, [r2, #0]
//    	HAL_Delay(200);
//    	APP_LOG(TS_OFF, VLEVEL_M, " Температура:%d | Влажность:%d\r\n", Datasens, Datasens);
//    	 APP_LOG(TS_OFF, VLEVEL_M, " Номер модема:%d | Температура:%d | Влажность:%d | Период передачи:%d сек | Заряд батареи:%d%\r\n",
//    		       		numberdev, temperaturei, humidityi, per, chargebattery);

    	 if(bmp280.dig_T1!=0)
 8002d88:	4b6b      	ldr	r3, [pc, #428]	; (8002f38 <SendTxData+0x27c>)
 8002d8a:	881b      	ldrh	r3, [r3, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d006      	beq.n	8002d9e <SendTxData+0xe2>
    	//*/
    	{
//    	  APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ==== Temp, hum sensor Init ====\r\n");
    	  APP_LOG(TS_OFF, VLEVEL_M, " Датчик измерения активен \n");
 8002d90:	4b6e      	ldr	r3, [pc, #440]	; (8002f4c <SendTxData+0x290>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	2100      	movs	r1, #0
 8002d96:	2002      	movs	r0, #2
 8002d98:	f019 f822 	bl	801bde0 <UTIL_ADV_TRACE_COND_FSend>
 8002d9c:	e005      	b.n	8002daa <SendTxData+0xee>
    	} //*/
    	 else
    	 {

//    		 APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ==== Sensor initialization failed ====\r\n");
    		 APP_LOG(TS_OFF, VLEVEL_M, "<  Ошибка инициализации датчика >  \r\n");
 8002d9e:	4b6c      	ldr	r3, [pc, #432]	; (8002f50 <SendTxData+0x294>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	2100      	movs	r1, #0
 8002da4:	2002      	movs	r0, #2
 8002da6:	f019 f81b 	bl	801bde0 <UTIL_ADV_TRACE_COND_FSend>
    	 }

    	 if(temperaturei/100>=1 && temperaturei/100<=30)
 8002daa:	4b67      	ldr	r3, [pc, #412]	; (8002f48 <SendTxData+0x28c>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2b63      	cmp	r3, #99	; 0x63
 8002db0:	dd0b      	ble.n	8002dca <SendTxData+0x10e>
 8002db2:	4b65      	ldr	r3, [pc, #404]	; (8002f48 <SendTxData+0x28c>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a67      	ldr	r2, [pc, #412]	; (8002f54 <SendTxData+0x298>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	dc06      	bgt.n	8002dca <SendTxData+0x10e>
//    		 if(temperature1>=1 && temperature1<=30 && pressure1>=1)
    	     	//*/
    	  {
//    	     	  APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ==== All parameters normal ====\r\n");
    	     	  APP_LOG(TS_OFF, VLEVEL_M, " Параметры окружающей среды в норме \r\n");
 8002dbc:	4b66      	ldr	r3, [pc, #408]	; (8002f58 <SendTxData+0x29c>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	2002      	movs	r0, #2
 8002dc4:	f019 f80c 	bl	801bde0 <UTIL_ADV_TRACE_COND_FSend>
 8002dc8:	e005      	b.n	8002dd6 <SendTxData+0x11a>
    	  } //*/
    	     	 else
    	   {
//    	     		 APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ==== Accident ====\r\n");
    	       		 APP_LOG(TS_OFF, VLEVEL_M, " < Отклонение от нормы > \r\n");
 8002dca:	4b64      	ldr	r3, [pc, #400]	; (8002f5c <SendTxData+0x2a0>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	2100      	movs	r1, #0
 8002dd0:	2002      	movs	r0, #2
 8002dd2:	f019 f805 	bl	801bde0 <UTIL_ADV_TRACE_COND_FSend>
    	   }
    	 numberdev = 0x01;  // new 0b00010001
 8002dd6:	4b62      	ldr	r3, [pc, #392]	; (8002f60 <SendTxData+0x2a4>)
 8002dd8:	2201      	movs	r2, #1
 8002dda:	801a      	strh	r2, [r3, #0]
    	 per = 0xA; // new
 8002ddc:	4b61      	ldr	r3, [pc, #388]	; (8002f64 <SendTxData+0x2a8>)
 8002dde:	220a      	movs	r2, #10
 8002de0:	801a      	strh	r2, [r3, #0]
  // AppData.Buffer[i++] = (uint8_t)temperature1 >> 8 ;
  //  AppData.Buffer[i++] = (int)humidity1 >> 16;


    //AppData.Buffer[i++] = 0x00;
     AppData.Buffer[i++] = numberdev; // new номер устройства
 8002de2:	4b5f      	ldr	r3, [pc, #380]	; (8002f60 <SendTxData+0x2a4>)
 8002de4:	2000      	movs	r0, #0
 8002de6:	5e18      	ldrsh	r0, [r3, r0]
 8002de8:	4b50      	ldr	r3, [pc, #320]	; (8002f2c <SendTxData+0x270>)
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	26b2      	movs	r6, #178	; 0xb2
 8002dee:	0076      	lsls	r6, r6, #1
 8002df0:	19bb      	adds	r3, r7, r6
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	1c59      	adds	r1, r3, #1
 8002df6:	19bc      	adds	r4, r7, r6
 8002df8:	6021      	str	r1, [r4, #0]
 8002dfa:	18d3      	adds	r3, r2, r3
 8002dfc:	b2c2      	uxtb	r2, r0
 8002dfe:	701a      	strb	r2, [r3, #0]
     AppData.Buffer[i++] = temperaturei;
 8002e00:	4b51      	ldr	r3, [pc, #324]	; (8002f48 <SendTxData+0x28c>)
 8002e02:	6818      	ldr	r0, [r3, #0]
 8002e04:	4b49      	ldr	r3, [pc, #292]	; (8002f2c <SendTxData+0x270>)
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	19bb      	adds	r3, r7, r6
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	1c59      	adds	r1, r3, #1
 8002e0e:	19bc      	adds	r4, r7, r6
 8002e10:	6021      	str	r1, [r4, #0]
 8002e12:	18d3      	adds	r3, r2, r3
 8002e14:	b2c2      	uxtb	r2, r0
 8002e16:	701a      	strb	r2, [r3, #0]
     AppData.Buffer[i++] = humidityi;
 8002e18:	4b49      	ldr	r3, [pc, #292]	; (8002f40 <SendTxData+0x284>)
 8002e1a:	6818      	ldr	r0, [r3, #0]
 8002e1c:	4b43      	ldr	r3, [pc, #268]	; (8002f2c <SendTxData+0x270>)
 8002e1e:	685a      	ldr	r2, [r3, #4]
 8002e20:	19bb      	adds	r3, r7, r6
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	1c59      	adds	r1, r3, #1
 8002e26:	19bc      	adds	r4, r7, r6
 8002e28:	6021      	str	r1, [r4, #0]
 8002e2a:	18d3      	adds	r3, r2, r3
 8002e2c:	b2c2      	uxtb	r2, r0
 8002e2e:	701a      	strb	r2, [r3, #0]
     AppData.Buffer[i++] = per; // new период включения прибора
 8002e30:	4b4c      	ldr	r3, [pc, #304]	; (8002f64 <SendTxData+0x2a8>)
 8002e32:	2000      	movs	r0, #0
 8002e34:	5e18      	ldrsh	r0, [r3, r0]
 8002e36:	4b3d      	ldr	r3, [pc, #244]	; (8002f2c <SendTxData+0x270>)
 8002e38:	685a      	ldr	r2, [r3, #4]
 8002e3a:	19bb      	adds	r3, r7, r6
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	1c59      	adds	r1, r3, #1
 8002e40:	19bc      	adds	r4, r7, r6
 8002e42:	6021      	str	r1, [r4, #0]
 8002e44:	18d3      	adds	r3, r2, r3
 8002e46:	b2c2      	uxtb	r2, r0
 8002e48:	701a      	strb	r2, [r3, #0]
//     temperatureint = temperature1;
//     humidityint = humidity1;
      // AppData.Buffer[i++] = BAT_CR2032; // new заряд батареи, CR2032 старая батарейка, новая LS14500
  // SYS_GetBatteryLevel(); // new заряд батареи
     chargebattery = GetBatteryLevel(); // new заряд батареи
 8002e4a:	f001 fe2f 	bl	8004aac <GetBatteryLevel>
 8002e4e:	0003      	movs	r3, r0
 8002e50:	b21a      	sxth	r2, r3
 8002e52:	4b45      	ldr	r3, [pc, #276]	; (8002f68 <SendTxData+0x2ac>)
 8002e54:	801a      	strh	r2, [r3, #0]
  // AppData.Buffer[i++] = batteryLevel; // new заряд батареи
     AppData.Buffer[i++] = chargebattery;
 8002e56:	4b44      	ldr	r3, [pc, #272]	; (8002f68 <SendTxData+0x2ac>)
 8002e58:	2000      	movs	r0, #0
 8002e5a:	5e18      	ldrsh	r0, [r3, r0]
 8002e5c:	4b33      	ldr	r3, [pc, #204]	; (8002f2c <SendTxData+0x270>)
 8002e5e:	685a      	ldr	r2, [r3, #4]
 8002e60:	19bb      	adds	r3, r7, r6
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	1c59      	adds	r1, r3, #1
 8002e66:	19bc      	adds	r4, r7, r6
 8002e68:	6021      	str	r1, [r4, #0]
 8002e6a:	18d3      	adds	r3, r2, r3
 8002e6c:	b2c2      	uxtb	r2, r0
 8002e6e:	701a      	strb	r2, [r3, #0]
//     HAL_Delay(1000);
//     APP_LOG(TS_OFF, VLEVEL_M, " Номер модема:%d | Температура:%d | Влажность:%d | Период передачи:%d сек | Заряд батареи:%d%\r\n",
//       		numberdev, temperatureint, humidityint, per, chargebattery);
//     APP_LOG(TS_OFF, VLEVEL_M, "Заряд батареи:%d\r\n", chargebattery);
     HAL_Delay(200);
 8002e70:	20c8      	movs	r0, #200	; 0xc8
 8002e72:	f001 ffac 	bl	8004dce <HAL_Delay>

		 APP_LOG(TS_OFF, VLEVEL_M, " Номер устройства:%d | Температура:%d,%02d °C | Влажность:%d%  | Период передачи:%d сек | Заряд батареи:%d%\r\n",
 8002e76:	4b3a      	ldr	r3, [pc, #232]	; (8002f60 <SendTxData+0x2a4>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	5e9b      	ldrsh	r3, [r3, r2]
 8002e7c:	001c      	movs	r4, r3
 8002e7e:	4b32      	ldr	r3, [pc, #200]	; (8002f48 <SendTxData+0x28c>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2164      	movs	r1, #100	; 0x64
 8002e84:	0018      	movs	r0, r3
 8002e86:	f7fd f9d1 	bl	800022c <__divsi3>
 8002e8a:	0003      	movs	r3, r0
 8002e8c:	001d      	movs	r5, r3
 8002e8e:	4b2c      	ldr	r3, [pc, #176]	; (8002f40 <SendTxData+0x284>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	22fa      	movs	r2, #250	; 0xfa
 8002e94:	0091      	lsls	r1, r2, #2
 8002e96:	0018      	movs	r0, r3
 8002e98:	f7fd f9c8 	bl	800022c <__divsi3>
 8002e9c:	0003      	movs	r3, r0
 8002e9e:	0019      	movs	r1, r3
 8002ea0:	4b30      	ldr	r3, [pc, #192]	; (8002f64 <SendTxData+0x2a8>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	5e9b      	ldrsh	r3, [r3, r2]
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	4b2f      	ldr	r3, [pc, #188]	; (8002f68 <SendTxData+0x2ac>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	5e9b      	ldrsh	r3, [r3, r2]
 8002eae:	4a2f      	ldr	r2, [pc, #188]	; (8002f6c <SendTxData+0x2b0>)
 8002eb0:	9305      	str	r3, [sp, #20]
 8002eb2:	9004      	str	r0, [sp, #16]
 8002eb4:	9103      	str	r1, [sp, #12]
 8002eb6:	23aa      	movs	r3, #170	; 0xaa
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	18fb      	adds	r3, r7, r3
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	9302      	str	r3, [sp, #8]
 8002ec0:	9501      	str	r5, [sp, #4]
 8002ec2:	9400      	str	r4, [sp, #0]
 8002ec4:	0013      	movs	r3, r2
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	2100      	movs	r1, #0
 8002eca:	2002      	movs	r0, #2
 8002ecc:	f018 ff88 	bl	801bde0 <UTIL_ADV_TRACE_COND_FSend>
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);

	   }
*/
  AppData.BufferSize = i;
 8002ed0:	19bb      	adds	r3, r7, r6
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	b2da      	uxtb	r2, r3
 8002ed6:	4b15      	ldr	r3, [pc, #84]	; (8002f2c <SendTxData+0x270>)
 8002ed8:	705a      	strb	r2, [r3, #1]
  /*  #endif /* CAYENNE_LPP */

   if (LORAMAC_HANDLER_SUCCESS == LmHandlerSend(&AppData, LORAWAN_DEFAULT_CONFIRMED_MSG_STATE, &nextTxIn, false))
 8002eda:	2338      	movs	r3, #56	; 0x38
 8002edc:	18fa      	adds	r2, r7, r3
 8002ede:	4813      	ldr	r0, [pc, #76]	; (8002f2c <SendTxData+0x270>)
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	f00b f97c 	bl	800e1e0 <LmHandlerSend>
 8002ee8:	1e03      	subs	r3, r0, #0
 8002eea:	d106      	bne.n	8002efa <SendTxData+0x23e>
  {
	  APP_LOG(TS_OFF, VLEVEL_L, " Запрос на подключение отправлен\r\n");
 8002eec:	4b20      	ldr	r3, [pc, #128]	; (8002f70 <SendTxData+0x2b4>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	2001      	movs	r0, #1
 8002ef4:	f018 ff74 	bl	801bde0 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_L, " Следующий запрос на отправку через : ~%d секунд\r\n", (nextTxIn / 1000));
  }
  /* USER CODE BEGIN SendTxData_2 */
  // HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
  /* USER CODE END SendTxData_2 */
}
 8002ef8:	e011      	b.n	8002f1e <SendTxData+0x262>
  else if (nextTxIn > 0)
 8002efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00e      	beq.n	8002f1e <SendTxData+0x262>
    APP_LOG(TS_OFF, VLEVEL_L, " Следующий запрос на отправку через : ~%d секунд\r\n", (nextTxIn / 1000));
 8002f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f02:	22fa      	movs	r2, #250	; 0xfa
 8002f04:	0091      	lsls	r1, r2, #2
 8002f06:	0018      	movs	r0, r3
 8002f08:	f7fd f906 	bl	8000118 <__udivsi3>
 8002f0c:	0003      	movs	r3, r0
 8002f0e:	001a      	movs	r2, r3
 8002f10:	4b18      	ldr	r3, [pc, #96]	; (8002f74 <SendTxData+0x2b8>)
 8002f12:	9200      	str	r2, [sp, #0]
 8002f14:	2200      	movs	r2, #0
 8002f16:	2100      	movs	r1, #0
 8002f18:	2001      	movs	r0, #1
 8002f1a:	f018 ff61 	bl	801bde0 <UTIL_ADV_TRACE_COND_FSend>
}
 8002f1e:	46c0      	nop			; (mov r8, r8)
 8002f20:	46bd      	mov	sp, r7
 8002f22:	b05d      	add	sp, #372	; 0x174
 8002f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f26:	46c0      	nop			; (mov r8, r8)
 8002f28:	fffffe92 	.word	0xfffffe92
 8002f2c:	20000000 	.word	0x20000000
 8002f30:	20001474 	.word	0x20001474
 8002f34:	20001594 	.word	0x20001594
 8002f38:	20001568 	.word	0x20001568
 8002f3c:	200013b8 	.word	0x200013b8
 8002f40:	2000150c 	.word	0x2000150c
 8002f44:	20001464 	.word	0x20001464
 8002f48:	200014cc 	.word	0x200014cc
 8002f4c:	0801eb64 	.word	0x0801eb64
 8002f50:	0801eb98 	.word	0x0801eb98
 8002f54:	00000c1b 	.word	0x00000c1b
 8002f58:	0801ebd8 	.word	0x0801ebd8
 8002f5c:	0801ec20 	.word	0x0801ec20
 8002f60:	2000159c 	.word	0x2000159c
 8002f64:	20001358 	.word	0x20001358
 8002f68:	200003ac 	.word	0x200003ac
 8002f6c:	0801ec50 	.word	0x0801ec50
 8002f70:	0801ed00 	.word	0x0801ed00
 8002f74:	0801ed40 	.word	0x0801ed40

08002f78 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 8002f80:	2100      	movs	r1, #0
 8002f82:	2002      	movs	r0, #2
 8002f84:	f019 fbf4 	bl	801c770 <UTIL_SEQ_SetTask>
 // HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 8002f88:	4b03      	ldr	r3, [pc, #12]	; (8002f98 <OnTxTimerEvent+0x20>)
 8002f8a:	0018      	movs	r0, r3
 8002f8c:	f019 fdf4 	bl	801cb78 <UTIL_TIMER_Start>
 // UTIL_TIMER_Stop(&TxTimer); // попытка передать только одно сообщение
//HAL_LPTIM_Counter_Start_IT(&hlptim1,1000);
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 8002f90:	46c0      	nop			; (mov r8, r8)
 8002f92:	46bd      	mov	sp, r7
 8002f94:	b002      	add	sp, #8
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	2000034c 	.word	0x2000034c

08002f9c <OnTxTimerLedEvent>:

static void OnTxTimerLedEvent(void *context)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerLedEvent_1 */

  /* USER CODE END OnTxTimerLedEvent_1 */
  LED_Off(LED_RED2);
 8002fa4:	2003      	movs	r0, #3
 8002fa6:	f002 fd2d 	bl	8005a04 <BSP_LED_Off>
  /* USER CODE BEGIN OnTxTimerLedEvent_2 */

  /* USER CODE END OnTxTimerLedEvent_2 */
}
 8002faa:	46c0      	nop			; (mov r8, r8)
 8002fac:	46bd      	mov	sp, r7
 8002fae:	b002      	add	sp, #8
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b082      	sub	sp, #8
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnRxTimerLedEvent_1 */

  /* USER CODE END OnRxTimerLedEvent_1 */
  LED_Off(LED_BLUE) ;
 8002fba:	2002      	movs	r0, #2
 8002fbc:	f002 fd22 	bl	8005a04 <BSP_LED_Off>
  /* USER CODE BEGIN OnRxTimerLedEvent_2 */

  /* USER CODE END OnRxTimerLedEvent_2 */
}
 8002fc0:	46c0      	nop			; (mov r8, r8)
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	b002      	add	sp, #8
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinTimerLedEvent_1 */

  /* USER CODE END OnJoinTimerLedEvent_1 */
  LED_Toggle(LED_RED1) ;
 8002fd0:	2001      	movs	r0, #1
 8002fd2:	f002 fd33 	bl	8005a3c <BSP_LED_Toggle>
  /* USER CODE BEGIN OnJoinTimerLedEvent_2 */

  /* USER CODE END OnJoinTimerLedEvent_2 */
}
 8002fd6:	46c0      	nop			; (mov r8, r8)
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	b002      	add	sp, #8
 8002fdc:	bd80      	pop	{r7, pc}
	...

08002fe0 <OnTxData>:

static void OnTxData(LmHandlerTxParams_t *params)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af04      	add	r7, sp, #16
 8002fe6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */

  /* USER CODE END OnTxData_1 */
  if ((params != NULL) && (params->IsMcpsConfirm != 0))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d042      	beq.n	8003074 <OnTxData+0x94>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d03e      	beq.n	8003074 <OnTxData+0x94>
  {
    LED_On(LED_RED2) ;
 8002ff6:	2003      	movs	r0, #3
 8002ff8:	f002 fce8 	bl	80059cc <BSP_LED_On>
   // LED_Off(LED_RED2);

    UTIL_TIMER_Start(&TxLedTimer);
 8002ffc:	4b1f      	ldr	r3, [pc, #124]	; (800307c <OnTxData+0x9c>)
 8002ffe:	0018      	movs	r0, r3
 8003000:	f019 fdba 	bl	801cb78 <UTIL_TIMER_Start>
    //HAL_LPTIM_Counter_Start_IT(&TxTimer,1000);
//    APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirmation =============\r\n");
    APP_LOG(TS_OFF, VLEVEL_M, " MCPS Подтверждение \r");
 8003004:	4b1e      	ldr	r3, [pc, #120]	; (8003080 <OnTxData+0xa0>)
 8003006:	2200      	movs	r2, #0
 8003008:	2100      	movs	r1, #0
 800300a:	2002      	movs	r0, #2
 800300c:	f018 fee8 	bl	801bde0 <UTIL_ADV_TRACE_COND_FSend>
//            params->AppData.Port, params->Datarate, params->TxPower,params->Channel);
//    int8_t txPower2 = 7;
//    LmHandlerSetTxPower(txPower2);
//    APP_LOG(TS_OFF, VLEVEL_M, " Номер посылки:%01d | Порт:%d | Мощность:%d | Канал связи:%d\r\n",
//    		params->UplinkCounter, params->AppData.Port, params->TxPower, params->Channel);
    APP_LOG(TS_OFF, VLEVEL_M, " Номер посылки:%01d | Порт:%d | Канал связи:%d\r",
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	7b12      	ldrb	r2, [r2, #12]
 8003018:	0011      	movs	r1, r2
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	7d52      	ldrb	r2, [r2, #21]
 800301e:	0010      	movs	r0, r2
 8003020:	4a18      	ldr	r2, [pc, #96]	; (8003084 <OnTxData+0xa4>)
 8003022:	9002      	str	r0, [sp, #8]
 8003024:	9101      	str	r1, [sp, #4]
 8003026:	9300      	str	r3, [sp, #0]
 8003028:	0013      	movs	r3, r2
 800302a:	2200      	movs	r2, #0
 800302c:	2100      	movs	r1, #0
 800302e:	2002      	movs	r0, #2
 8003030:	f018 fed6 	bl	801bde0 <UTIL_ADV_TRACE_COND_FSend>
       		params->UplinkCounter, params->AppData.Port, params->Channel);
    APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 8003034:	4b14      	ldr	r3, [pc, #80]	; (8003088 <OnTxData+0xa8>)
 8003036:	2200      	movs	r2, #0
 8003038:	2100      	movs	r1, #0
 800303a:	2003      	movs	r0, #3
 800303c:	f018 fed0 	bl	801bde0 <UTIL_ADV_TRACE_COND_FSend>
//    APP_LOG(TS_OFF, VLEVEL_M, " | c:");
    if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	789b      	ldrb	r3, [r3, #2]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d10f      	bne.n	8003068 <OnTxData+0x88>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "\r\n CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	78db      	ldrb	r3, [r3, #3]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <OnTxData+0x74>
 8003050:	4b0e      	ldr	r3, [pc, #56]	; (800308c <OnTxData+0xac>)
 8003052:	e000      	b.n	8003056 <OnTxData+0x76>
 8003054:	4b0e      	ldr	r3, [pc, #56]	; (8003090 <OnTxData+0xb0>)
 8003056:	4a0f      	ldr	r2, [pc, #60]	; (8003094 <OnTxData+0xb4>)
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	0013      	movs	r3, r2
 800305c:	2200      	movs	r2, #0
 800305e:	2100      	movs	r1, #0
 8003060:	2003      	movs	r0, #3
 8003062:	f018 febd 	bl	801bde0 <UTIL_ADV_TRACE_COND_FSend>
  }

  /* USER CODE BEGIN OnTxData_2 */

  /* USER CODE END OnTxData_2 */
}
 8003066:	e005      	b.n	8003074 <OnTxData+0x94>
      APP_LOG(TS_OFF, VLEVEL_H, "\r\n UNCONFIRMED\r\n");
 8003068:	4b0b      	ldr	r3, [pc, #44]	; (8003098 <OnTxData+0xb8>)
 800306a:	2200      	movs	r2, #0
 800306c:	2100      	movs	r1, #0
 800306e:	2003      	movs	r0, #3
 8003070:	f018 feb6 	bl	801bde0 <UTIL_ADV_TRACE_COND_FSend>
}
 8003074:	46c0      	nop			; (mov r8, r8)
 8003076:	46bd      	mov	sp, r7
 8003078:	b002      	add	sp, #8
 800307a:	bd80      	pop	{r7, pc}
 800307c:	20000364 	.word	0x20000364
 8003080:	0801ed98 	.word	0x0801ed98
 8003084:	0801edbc 	.word	0x0801edbc
 8003088:	0801ee08 	.word	0x0801ee08
 800308c:	0801ee18 	.word	0x0801ee18
 8003090:	0801ee1c 	.word	0x0801ee1c
 8003094:	0801ee24 	.word	0x0801ee24
 8003098:	0801ee38 	.word	0x0801ee38

0800309c <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */

  /* USER CODE END OnJoinRequest_1 */
  if (joinParams != NULL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d029      	beq.n	80030fe <OnJoinRequest+0x62>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	785b      	ldrb	r3, [r3, #1]
 80030ae:	b25b      	sxtb	r3, r3
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d11e      	bne.n	80030f2 <OnJoinRequest+0x56>
    {
      UTIL_TIMER_Stop(&JoinLedTimer);
 80030b4:	4b14      	ldr	r3, [pc, #80]	; (8003108 <OnJoinRequest+0x6c>)
 80030b6:	0018      	movs	r0, r3
 80030b8:	f019 fdd6 	bl	801cc68 <UTIL_TIMER_Stop>

      LED_Off(LED_RED1) ;
 80030bc:	2001      	movs	r0, #1
 80030be:	f002 fca1 	bl	8005a04 <BSP_LED_Off>

//      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
      APP_LOG(TS_OFF, VLEVEL_M, " Устройство подключено \r\n  ");
 80030c2:	4b12      	ldr	r3, [pc, #72]	; (800310c <OnJoinRequest+0x70>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	2100      	movs	r1, #0
 80030c8:	2002      	movs	r0, #2
 80030ca:	f018 fe89 	bl	801bde0 <UTIL_ADV_TRACE_COND_FSend>
      //if (joinParams->Mode == ACTIVATION_TYPE_ABP) //
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	789b      	ldrb	r3, [r3, #2]
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d106      	bne.n	80030e4 <OnJoinRequest+0x48>
      {
//        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
        APP_LOG(TS_OFF, VLEVEL_M, " Активация по персонализации  \r\n");
 80030d6:	4b0e      	ldr	r3, [pc, #56]	; (8003110 <OnJoinRequest+0x74>)
 80030d8:	2200      	movs	r2, #0
 80030da:	2100      	movs	r1, #0
 80030dc:	2002      	movs	r0, #2
 80030de:	f018 fe7f 	bl	801bde0 <UTIL_ADV_TRACE_COND_FSend>
  }

  /* USER CODE BEGIN OnJoinRequest_2 */

  /* USER CODE END OnJoinRequest_2 */
}
 80030e2:	e00c      	b.n	80030fe <OnJoinRequest+0x62>
        APP_LOG(TS_OFF, VLEVEL_M, " Активация по воздуху  \r\n");
 80030e4:	4b0b      	ldr	r3, [pc, #44]	; (8003114 <OnJoinRequest+0x78>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	2100      	movs	r1, #0
 80030ea:	2002      	movs	r0, #2
 80030ec:	f018 fe78 	bl	801bde0 <UTIL_ADV_TRACE_COND_FSend>
}
 80030f0:	e005      	b.n	80030fe <OnJoinRequest+0x62>
      APP_LOG(TS_OFF, VLEVEL_M, " < Подключение к базовой станции не удалось > \r\n");
 80030f2:	4b09      	ldr	r3, [pc, #36]	; (8003118 <OnJoinRequest+0x7c>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	2100      	movs	r1, #0
 80030f8:	2002      	movs	r0, #2
 80030fa:	f018 fe71 	bl	801bde0 <UTIL_ADV_TRACE_COND_FSend>
}
 80030fe:	46c0      	nop			; (mov r8, r8)
 8003100:	46bd      	mov	sp, r7
 8003102:	b002      	add	sp, #8
 8003104:	bd80      	pop	{r7, pc}
 8003106:	46c0      	nop			; (mov r8, r8)
 8003108:	20000394 	.word	0x20000394
 800310c:	0801ee4c 	.word	0x0801ee4c
 8003110:	0801ee7c 	.word	0x0801ee7c
 8003114:	0801eeb8 	.word	0x0801eeb8
 8003118:	0801eee4 	.word	0x0801eee4

0800311c <MX_LPTIM1_Init>:
  }
  */
/*

 */ static void MX_LPTIM1_Init(void) // new
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
	  hlptim1.Instance = LPTIM1;
 8003120:	4b13      	ldr	r3, [pc, #76]	; (8003170 <MX_LPTIM1_Init+0x54>)
 8003122:	4a14      	ldr	r2, [pc, #80]	; (8003174 <MX_LPTIM1_Init+0x58>)
 8003124:	601a      	str	r2, [r3, #0]
	  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8003126:	4b12      	ldr	r3, [pc, #72]	; (8003170 <MX_LPTIM1_Init+0x54>)
 8003128:	2200      	movs	r2, #0
 800312a:	605a      	str	r2, [r3, #4]
	  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 800312c:	4b10      	ldr	r3, [pc, #64]	; (8003170 <MX_LPTIM1_Init+0x54>)
 800312e:	2200      	movs	r2, #0
 8003130:	609a      	str	r2, [r3, #8]
	  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 8003132:	4b0f      	ldr	r3, [pc, #60]	; (8003170 <MX_LPTIM1_Init+0x54>)
 8003134:	2200      	movs	r2, #0
 8003136:	60da      	str	r2, [r3, #12]
	  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 8003138:	4b0d      	ldr	r3, [pc, #52]	; (8003170 <MX_LPTIM1_Init+0x54>)
 800313a:	2200      	movs	r2, #0
 800313c:	611a      	str	r2, [r3, #16]
	  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800313e:	4b0c      	ldr	r3, [pc, #48]	; (8003170 <MX_LPTIM1_Init+0x54>)
 8003140:	4a0d      	ldr	r2, [pc, #52]	; (8003178 <MX_LPTIM1_Init+0x5c>)
 8003142:	615a      	str	r2, [r3, #20]
	  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8003144:	4b0a      	ldr	r3, [pc, #40]	; (8003170 <MX_LPTIM1_Init+0x54>)
 8003146:	2200      	movs	r2, #0
 8003148:	621a      	str	r2, [r3, #32]
	  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 800314a:	4b09      	ldr	r3, [pc, #36]	; (8003170 <MX_LPTIM1_Init+0x54>)
 800314c:	2200      	movs	r2, #0
 800314e:	625a      	str	r2, [r3, #36]	; 0x24
	  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 8003150:	4b07      	ldr	r3, [pc, #28]	; (8003170 <MX_LPTIM1_Init+0x54>)
 8003152:	2280      	movs	r2, #128	; 0x80
 8003154:	0412      	lsls	r2, r2, #16
 8003156:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8003158:	4b05      	ldr	r3, [pc, #20]	; (8003170 <MX_LPTIM1_Init+0x54>)
 800315a:	0018      	movs	r0, r3
 800315c:	f001 f914 	bl	8004388 <HAL_LPTIM_Init>
 8003160:	1e03      	subs	r3, r0, #0
 8003162:	d001      	beq.n	8003168 <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 8003164:	f000 fbea 	bl	800393c <Error_Handler>
  /*
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8003168:	46c0      	nop			; (mov r8, r8)
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	46c0      	nop			; (mov r8, r8)
 8003170:	20001474 	.word	0x20001474
 8003174:	40007c00 	.word	0x40007c00
 8003178:	0000ffff 	.word	0x0000ffff

0800317c <HAL_LPTIM_MspInit>:
  void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
  {
 800317c:	b590      	push	{r4, r7, lr}
 800317e:	b089      	sub	sp, #36	; 0x24
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003184:	240c      	movs	r4, #12
 8003186:	193b      	adds	r3, r7, r4
 8003188:	0018      	movs	r0, r3
 800318a:	2314      	movs	r3, #20
 800318c:	001a      	movs	r2, r3
 800318e:	2100      	movs	r1, #0
 8003190:	f01a fec3 	bl	801df1a <memset>
    if(hlptim->Instance==LPTIM1)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a1b      	ldr	r2, [pc, #108]	; (8003208 <HAL_LPTIM_MspInit+0x8c>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d130      	bne.n	8003200 <HAL_LPTIM_MspInit+0x84>
    {
    /* USER CODE BEGIN LPTIM1_MspInit 0 */

    /* USER CODE END LPTIM1_MspInit 0 */
      /* Peripheral clock enable */
      __HAL_RCC_LPTIM1_CLK_ENABLE();
 800319e:	4b1b      	ldr	r3, [pc, #108]	; (800320c <HAL_LPTIM_MspInit+0x90>)
 80031a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031a2:	4b1a      	ldr	r3, [pc, #104]	; (800320c <HAL_LPTIM_MspInit+0x90>)
 80031a4:	2180      	movs	r1, #128	; 0x80
 80031a6:	0609      	lsls	r1, r1, #24
 80031a8:	430a      	orrs	r2, r1
 80031aa:	639a      	str	r2, [r3, #56]	; 0x38

      __HAL_RCC_GPIOB_CLK_ENABLE();
 80031ac:	4b17      	ldr	r3, [pc, #92]	; (800320c <HAL_LPTIM_MspInit+0x90>)
 80031ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031b0:	4b16      	ldr	r3, [pc, #88]	; (800320c <HAL_LPTIM_MspInit+0x90>)
 80031b2:	2102      	movs	r1, #2
 80031b4:	430a      	orrs	r2, r1
 80031b6:	62da      	str	r2, [r3, #44]	; 0x2c
 80031b8:	4b14      	ldr	r3, [pc, #80]	; (800320c <HAL_LPTIM_MspInit+0x90>)
 80031ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031bc:	2202      	movs	r2, #2
 80031be:	4013      	ands	r3, r2
 80031c0:	60bb      	str	r3, [r7, #8]
 80031c2:	68bb      	ldr	r3, [r7, #8]
      /**LPTIM1 GPIO Configuration
      PB5     ------> LPTIM1_IN1
      PB7     ------> LPTIM1_IN2
      */
      GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80031c4:	0021      	movs	r1, r4
 80031c6:	187b      	adds	r3, r7, r1
 80031c8:	22a0      	movs	r2, #160	; 0xa0
 80031ca:	601a      	str	r2, [r3, #0]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031cc:	187b      	adds	r3, r7, r1
 80031ce:	2202      	movs	r2, #2
 80031d0:	605a      	str	r2, [r3, #4]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d2:	187b      	adds	r3, r7, r1
 80031d4:	2200      	movs	r2, #0
 80031d6:	609a      	str	r2, [r3, #8]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031d8:	187b      	adds	r3, r7, r1
 80031da:	2200      	movs	r2, #0
 80031dc:	60da      	str	r2, [r3, #12]
      GPIO_InitStruct.Alternate = GPIO_AF2_LPTIM1;
 80031de:	187b      	adds	r3, r7, r1
 80031e0:	2202      	movs	r2, #2
 80031e2:	611a      	str	r2, [r3, #16]
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031e4:	187b      	adds	r3, r7, r1
 80031e6:	4a0a      	ldr	r2, [pc, #40]	; (8003210 <HAL_LPTIM_MspInit+0x94>)
 80031e8:	0019      	movs	r1, r3
 80031ea:	0010      	movs	r0, r2
 80031ec:	f004 fbcc 	bl	8007988 <HAL_GPIO_Init>

      /* LPTIM1 interrupt Init */
      HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 80031f0:	2200      	movs	r2, #0
 80031f2:	2100      	movs	r1, #0
 80031f4:	200d      	movs	r0, #13
 80031f6:	f003 fecd 	bl	8006f94 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 80031fa:	200d      	movs	r0, #13
 80031fc:	f003 fedf 	bl	8006fbe <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN LPTIM1_MspInit 1 */

    /* USER CODE END LPTIM1_MspInit 1 */
    }

  }
 8003200:	46c0      	nop			; (mov r8, r8)
 8003202:	46bd      	mov	sp, r7
 8003204:	b009      	add	sp, #36	; 0x24
 8003206:	bd90      	pop	{r4, r7, pc}
 8003208:	40007c00 	.word	0x40007c00
 800320c:	40021000 	.word	0x40021000
 8003210:	50000400 	.word	0x50000400

08003214 <OnMacProcessNotify>:
    }

  }

static void OnMacProcessNotify(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 8003218:	2100      	movs	r1, #0
 800321a:	2001      	movs	r0, #1
 800321c:	f019 faa8 	bl	801c770 <UTIL_SEQ_SetTask>
  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 8003220:	46c0      	nop			; (mov r8, r8)
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
	...

08003228 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 800322c:	4b12      	ldr	r3, [pc, #72]	; (8003278 <LoraInfo_Init+0x50>)
 800322e:	2200      	movs	r2, #0
 8003230:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 8003232:	4b11      	ldr	r3, [pc, #68]	; (8003278 <LoraInfo_Init+0x50>)
 8003234:	2200      	movs	r2, #0
 8003236:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 8003238:	4b0f      	ldr	r3, [pc, #60]	; (8003278 <LoraInfo_Init+0x50>)
 800323a:	2200      	movs	r2, #0
 800323c:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800323e:	4b0e      	ldr	r3, [pc, #56]	; (8003278 <LoraInfo_Init+0x50>)
 8003240:	2200      	movs	r2, #0
 8003242:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433) ;
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868) ;
 8003244:	4b0c      	ldr	r3, [pc, #48]	; (8003278 <LoraInfo_Init+0x50>)
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	2220      	movs	r2, #32
 800324a:	431a      	orrs	r2, r3
 800324c:	4b0a      	ldr	r3, [pc, #40]	; (8003278 <LoraInfo_Init+0x50>)
 800324e:	605a      	str	r2, [r3, #4]
#endif /* REGION_US915 */
#ifdef REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864) ;
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 8003250:	4b09      	ldr	r3, [pc, #36]	; (8003278 <LoraInfo_Init+0x50>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d106      	bne.n	8003266 <LoraInfo_Init+0x3e>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 8003258:	4b08      	ldr	r3, [pc, #32]	; (800327c <LoraInfo_Init+0x54>)
 800325a:	2200      	movs	r2, #0
 800325c:	2100      	movs	r1, #0
 800325e:	2000      	movs	r0, #0
 8003260:	f018 fdbe 	bl	801bde0 <UTIL_ADV_TRACE_COND_FSend>
    while (1) {} /* At least one region shall be defined */
 8003264:	e7fe      	b.n	8003264 <LoraInfo_Init+0x3c>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 8003266:	4b04      	ldr	r3, [pc, #16]	; (8003278 <LoraInfo_Init+0x50>)
 8003268:	2200      	movs	r2, #0
 800326a:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 800326c:	4b02      	ldr	r3, [pc, #8]	; (8003278 <LoraInfo_Init+0x50>)
 800326e:	2203      	movs	r2, #3
 8003270:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALISATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 8003272:	46c0      	nop			; (mov r8, r8)
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	200003b0 	.word	0x200003b0
 800327c:	0801ef84 	.word	0x0801ef84

08003280 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 8003284:	4b01      	ldr	r3, [pc, #4]	; (800328c <LoraInfo_GetPtr+0xc>)
}
 8003286:	0018      	movs	r0, r3
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	200003b0 	.word	0x200003b0

08003290 <MX_ADC_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC init function */
void MX_ADC_Init(void)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	af00      	add	r7, sp, #0

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance  = ADC1;
 8003294:	4b22      	ldr	r3, [pc, #136]	; (8003320 <MX_ADC_Init+0x90>)
 8003296:	4a23      	ldr	r2, [pc, #140]	; (8003324 <MX_ADC_Init+0x94>)
 8003298:	601a      	str	r2, [r3, #0]

  hadc1.Init.OversamplingMode      = DISABLE;
 800329a:	4b21      	ldr	r3, [pc, #132]	; (8003320 <MX_ADC_Init+0x90>)
 800329c:	2200      	movs	r2, #0
 800329e:	63da      	str	r2, [r3, #60]	; 0x3c

  hadc1.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 80032a0:	4b1f      	ldr	r3, [pc, #124]	; (8003320 <MX_ADC_Init+0x90>)
 80032a2:	2280      	movs	r2, #128	; 0x80
 80032a4:	0612      	lsls	r2, r2, #24
 80032a6:	605a      	str	r2, [r3, #4]
  hadc1.Init.LowPowerAutoPowerOff  = DISABLE;
 80032a8:	4b1d      	ldr	r3, [pc, #116]	; (8003320 <MX_ADC_Init+0x90>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	61da      	str	r2, [r3, #28]
  hadc1.Init.LowPowerFrequencyMode = ENABLE;
 80032ae:	4b1c      	ldr	r3, [pc, #112]	; (8003320 <MX_ADC_Init+0x90>)
 80032b0:	2201      	movs	r2, #1
 80032b2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.LowPowerAutoWait      = DISABLE;
 80032b4:	4b1a      	ldr	r3, [pc, #104]	; (8003320 <MX_ADC_Init+0x90>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	619a      	str	r2, [r3, #24]
  hadc1.Init.Resolution            = ADC_RESOLUTION_12B;
 80032ba:	4b19      	ldr	r3, [pc, #100]	; (8003320 <MX_ADC_Init+0x90>)
 80032bc:	2200      	movs	r2, #0
 80032be:	609a      	str	r2, [r3, #8]
  hadc1.Init.SamplingTime          = ADC_SAMPLETIME_160CYCLES_5;
 80032c0:	4b17      	ldr	r3, [pc, #92]	; (8003320 <MX_ADC_Init+0x90>)
 80032c2:	2207      	movs	r2, #7
 80032c4:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.ScanConvMode          = ADC_SCAN_DIRECTION_FORWARD;
 80032c6:	4b16      	ldr	r3, [pc, #88]	; (8003320 <MX_ADC_Init+0x90>)
 80032c8:	2201      	movs	r2, #1
 80032ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 80032cc:	4b14      	ldr	r3, [pc, #80]	; (8003320 <MX_ADC_Init+0x90>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ContinuousConvMode    = DISABLE;
 80032d2:	4b13      	ldr	r3, [pc, #76]	; (8003320 <MX_ADC_Init+0x90>)
 80032d4:	2220      	movs	r2, #32
 80032d6:	2100      	movs	r1, #0
 80032d8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80032da:	4b11      	ldr	r3, [pc, #68]	; (8003320 <MX_ADC_Init+0x90>)
 80032dc:	2221      	movs	r2, #33	; 0x21
 80032de:	2100      	movs	r1, #0
 80032e0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80032e2:	4b0f      	ldr	r3, [pc, #60]	; (8003320 <MX_ADC_Init+0x90>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 80032e8:	4b0d      	ldr	r3, [pc, #52]	; (8003320 <MX_ADC_Init+0x90>)
 80032ea:	2204      	movs	r2, #4
 80032ec:	615a      	str	r2, [r3, #20]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80032ee:	4b0c      	ldr	r3, [pc, #48]	; (8003320 <MX_ADC_Init+0x90>)
 80032f0:	222c      	movs	r2, #44	; 0x2c
 80032f2:	2100      	movs	r1, #0
 80032f4:	5499      	strb	r1, [r3, r2]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80032f6:	4b0a      	ldr	r3, [pc, #40]	; (8003320 <MX_ADC_Init+0x90>)
 80032f8:	0018      	movs	r0, r3
 80032fa:	f003 f819 	bl	8006330 <HAL_ADC_Init>
 80032fe:	1e03      	subs	r3, r0, #0
 8003300:	d001      	beq.n	8003306 <MX_ADC_Init+0x76>
  {
    Error_Handler();
 8003302:	f000 fb1b 	bl	800393c <Error_Handler>
  }

  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 8003306:	4b06      	ldr	r3, [pc, #24]	; (8003320 <MX_ADC_Init+0x90>)
 8003308:	2100      	movs	r1, #0
 800330a:	0018      	movs	r0, r3
 800330c:	f003 fd02 	bl	8006d14 <HAL_ADCEx_Calibration_Start>
 8003310:	1e03      	subs	r3, r0, #0
 8003312:	d001      	beq.n	8003318 <MX_ADC_Init+0x88>
  {
    Error_Handler();
 8003314:	f000 fb12 	bl	800393c <Error_Handler>
  }
}
 8003318:	46c0      	nop			; (mov r8, r8)
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	46c0      	nop			; (mov r8, r8)
 8003320:	20001408 	.word	0x20001408
 8003324:	40012400 	.word	0x40012400

08003328 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle)
{
 8003328:	b590      	push	{r4, r7, lr}
 800332a:	b089      	sub	sp, #36	; 0x24
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]

  if (adcHandle->Instance == ADC1)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a12      	ldr	r2, [pc, #72]	; (8003380 <HAL_ADC_MspInit+0x58>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d11e      	bne.n	8003378 <HAL_ADC_MspInit+0x50>
  {
    /* USER CODE BEGIN ADC_MspInit 0 */
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800333a:	240c      	movs	r4, #12
 800333c:	193b      	adds	r3, r7, r4
 800333e:	0018      	movs	r0, r3
 8003340:	2314      	movs	r3, #20
 8003342:	001a      	movs	r2, r3
 8003344:	2100      	movs	r1, #0
 8003346:	f01a fde8 	bl	801df1a <memset>

    /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800334a:	4b0e      	ldr	r3, [pc, #56]	; (8003384 <HAL_ADC_MspInit+0x5c>)
 800334c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800334e:	4b0d      	ldr	r3, [pc, #52]	; (8003384 <HAL_ADC_MspInit+0x5c>)
 8003350:	2180      	movs	r1, #128	; 0x80
 8003352:	0089      	lsls	r1, r1, #2
 8003354:	430a      	orrs	r2, r1
 8003356:	635a      	str	r2, [r3, #52]	; 0x34
    /* USER CODE BEGIN ADC_MspInit 1 */
    GPIO_InitStruct.Pin = GPIO_PIN_4; //N
 8003358:	193b      	adds	r3, r7, r4
 800335a:	2210      	movs	r2, #16
 800335c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG; //N
 800335e:	193b      	adds	r3, r7, r4
 8003360:	2203      	movs	r2, #3
 8003362:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL; //N
 8003364:	193b      	adds	r3, r7, r4
 8003366:	2200      	movs	r2, #0
 8003368:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //N
 800336a:	193a      	adds	r2, r7, r4
 800336c:	23a0      	movs	r3, #160	; 0xa0
 800336e:	05db      	lsls	r3, r3, #23
 8003370:	0011      	movs	r1, r2
 8003372:	0018      	movs	r0, r3
 8003374:	f004 fb08 	bl	8007988 <HAL_GPIO_Init>
    /* USER CODE END ADC_MspInit 1
     * */
  }
}
 8003378:	46c0      	nop			; (mov r8, r8)
 800337a:	46bd      	mov	sp, r7
 800337c:	b009      	add	sp, #36	; 0x24
 800337e:	bd90      	pop	{r4, r7, pc}
 8003380:	40012400 	.word	0x40012400
 8003384:	40021000 	.word	0x40021000

08003388 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef *adcHandle)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]

  if (adcHandle->Instance == ADC1)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a0f      	ldr	r2, [pc, #60]	; (80033d4 <HAL_ADC_MspDeInit+0x4c>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d118      	bne.n	80033cc <HAL_ADC_MspDeInit+0x44>
  {
    /* USER CODE BEGIN ADC_MspDeInit 0 */

    /* USER CODE END ADC_MspDeInit 0 */

    __HAL_RCC_ADC1_FORCE_RESET();
 800339a:	4b0f      	ldr	r3, [pc, #60]	; (80033d8 <HAL_ADC_MspDeInit+0x50>)
 800339c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800339e:	4b0e      	ldr	r3, [pc, #56]	; (80033d8 <HAL_ADC_MspDeInit+0x50>)
 80033a0:	2180      	movs	r1, #128	; 0x80
 80033a2:	0089      	lsls	r1, r1, #2
 80033a4:	430a      	orrs	r2, r1
 80033a6:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_RCC_ADC1_RELEASE_RESET();
 80033a8:	4b0b      	ldr	r3, [pc, #44]	; (80033d8 <HAL_ADC_MspDeInit+0x50>)
 80033aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033ac:	4b0a      	ldr	r3, [pc, #40]	; (80033d8 <HAL_ADC_MspDeInit+0x50>)
 80033ae:	490b      	ldr	r1, [pc, #44]	; (80033dc <HAL_ADC_MspDeInit+0x54>)
 80033b0:	400a      	ands	r2, r1
 80033b2:	625a      	str	r2, [r3, #36]	; 0x24
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 80033b4:	4b08      	ldr	r3, [pc, #32]	; (80033d8 <HAL_ADC_MspDeInit+0x50>)
 80033b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033b8:	4b07      	ldr	r3, [pc, #28]	; (80033d8 <HAL_ADC_MspDeInit+0x50>)
 80033ba:	4908      	ldr	r1, [pc, #32]	; (80033dc <HAL_ADC_MspDeInit+0x54>)
 80033bc:	400a      	ands	r2, r1
 80033be:	635a      	str	r2, [r3, #52]	; 0x34
    /* USER CODE BEGIN ADC_MspDeInit 1 */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);//N
 80033c0:	23a0      	movs	r3, #160	; 0xa0
 80033c2:	05db      	lsls	r3, r3, #23
 80033c4:	2110      	movs	r1, #16
 80033c6:	0018      	movs	r0, r3
 80033c8:	f004 fc5c 	bl	8007c84 <HAL_GPIO_DeInit>
    /* USER CODE END ADC_MspDeInit 1 */
  }
}
 80033cc:	46c0      	nop			; (mov r8, r8)
 80033ce:	46bd      	mov	sp, r7
 80033d0:	b002      	add	sp, #8
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	40012400 	.word	0x40012400
 80033d8:	40021000 	.word	0x40021000
 80033dc:	fffffdff 	.word	0xfffffdff

080033e0 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc1.Instance = ADC1;
 80033e4:	4b02      	ldr	r3, [pc, #8]	; (80033f0 <SYS_InitMeasurement+0x10>)
 80033e6:	4a03      	ldr	r2, [pc, #12]	; (80033f4 <SYS_InitMeasurement+0x14>)
 80033e8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 80033ea:	46c0      	nop			; (mov r8, r8)
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	20001408 	.word	0x20001408
 80033f4:	40012400 	.word	0x40012400

080033f8 <SYS_GetTemperatureLevel>:

  /* USER CODE END SYS_DeInitMeasurement_1 */
}

int16_t SYS_GetTemperatureLevel(void)
{
 80033f8:	b5b0      	push	{r4, r5, r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetTemperatureLevel_1 */

  /* USER CODE END SYS_GetTemperatureLevel_1 */
  int16_t temperatureDegreeC = 0;
 80033fe:	250e      	movs	r5, #14
 8003400:	197b      	adds	r3, r7, r5
 8003402:	2200      	movs	r2, #0
 8003404:	801a      	strh	r2, [r3, #0]
  uint32_t measuredLevel = 0;
 8003406:	2300      	movs	r3, #0
 8003408:	60bb      	str	r3, [r7, #8]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 800340a:	1dbc      	adds	r4, r7, #6
 800340c:	f000 f83c 	bl	8003488 <SYS_GetBatteryLevel>
 8003410:	0003      	movs	r3, r0
 8003412:	8023      	strh	r3, [r4, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8003414:	4b18      	ldr	r3, [pc, #96]	; (8003478 <SYS_GetTemperatureLevel+0x80>)
 8003416:	0018      	movs	r0, r3
 8003418:	f000 f864 	bl	80034e4 <ADC_ReadChannels>
 800341c:	0003      	movs	r3, r0
 800341e:	60bb      	str	r3, [r7, #8]

  temperatureDegreeC = COMPUTE_TEMPERATURE(measuredLevel, batteryLevelmV);
 8003420:	1dbb      	adds	r3, r7, #6
 8003422:	881b      	ldrh	r3, [r3, #0]
 8003424:	68ba      	ldr	r2, [r7, #8]
 8003426:	4353      	muls	r3, r2
 8003428:	4914      	ldr	r1, [pc, #80]	; (800347c <SYS_GetTemperatureLevel+0x84>)
 800342a:	0018      	movs	r0, r3
 800342c:	f7fc fe74 	bl	8000118 <__udivsi3>
 8003430:	0003      	movs	r3, r0
 8003432:	001a      	movs	r2, r3
 8003434:	4b12      	ldr	r3, [pc, #72]	; (8003480 <SYS_GetTemperatureLevel+0x88>)
 8003436:	881b      	ldrh	r3, [r3, #0]
 8003438:	1ad2      	subs	r2, r2, r3
 800343a:	0013      	movs	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	189b      	adds	r3, r3, r2
 8003440:	011b      	lsls	r3, r3, #4
 8003442:	021b      	lsls	r3, r3, #8
 8003444:	4a0f      	ldr	r2, [pc, #60]	; (8003484 <SYS_GetTemperatureLevel+0x8c>)
 8003446:	8812      	ldrh	r2, [r2, #0]
 8003448:	0011      	movs	r1, r2
 800344a:	4a0d      	ldr	r2, [pc, #52]	; (8003480 <SYS_GetTemperatureLevel+0x88>)
 800344c:	8812      	ldrh	r2, [r2, #0]
 800344e:	1a8a      	subs	r2, r1, r2
 8003450:	0011      	movs	r1, r2
 8003452:	0018      	movs	r0, r3
 8003454:	f7fc feea 	bl	800022c <__divsi3>
 8003458:	0003      	movs	r3, r0
 800345a:	b29b      	uxth	r3, r3
 800345c:	22f0      	movs	r2, #240	; 0xf0
 800345e:	0152      	lsls	r2, r2, #5
 8003460:	4694      	mov	ip, r2
 8003462:	4463      	add	r3, ip
 8003464:	b29a      	uxth	r2, r3
 8003466:	197b      	adds	r3, r7, r5
 8003468:	801a      	strh	r2, [r3, #0]

//  APP_LOG(TS_ON, VLEVEL_L, "temp= %d\n\r", temperatureDegreeC >> 8);

  return (int16_t) temperatureDegreeC;
 800346a:	197b      	adds	r3, r7, r5
 800346c:	2200      	movs	r2, #0
 800346e:	5e9b      	ldrsh	r3, [r3, r2]
  /* USER CODE BEGIN SYS_GetTemperatureLevel_2 */

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}
 8003470:	0018      	movs	r0, r3
 8003472:	46bd      	mov	sp, r7
 8003474:	b004      	add	sp, #16
 8003476:	bdb0      	pop	{r4, r5, r7, pc}
 8003478:	48040000 	.word	0x48040000
 800347c:	00000bb8 	.word	0x00000bb8
 8003480:	1ff8007a 	.word	0x1ff8007a
 8003484:	1ff8007e 	.word	0x1ff8007e

08003488 <SYS_GetBatteryLevel>:

uint16_t SYS_GetBatteryLevel(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 800348e:	1dbb      	adds	r3, r7, #6
 8003490:	2200      	movs	r2, #0
 8003492:	801a      	strh	r2, [r3, #0]
  uint32_t measuredLevel = 0;
 8003494:	2300      	movs	r3, #0
 8003496:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8003498:	4b0f      	ldr	r3, [pc, #60]	; (80034d8 <SYS_GetBatteryLevel+0x50>)
 800349a:	0018      	movs	r0, r3
 800349c:	f000 f822 	bl	80034e4 <ADC_ReadChannels>
 80034a0:	0003      	movs	r3, r0
 80034a2:	603b      	str	r3, [r7, #0]

  if (measuredLevel == 0)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d103      	bne.n	80034b2 <SYS_GetBatteryLevel+0x2a>
  {
    batteryLevelmV = 0;
 80034aa:	1dbb      	adds	r3, r7, #6
 80034ac:	2200      	movs	r2, #0
 80034ae:	801a      	strh	r2, [r3, #0]
 80034b0:	e00c      	b.n	80034cc <SYS_GetBatteryLevel+0x44>
  }
  else
  {
    batteryLevelmV = (((uint32_t) VDDA_VREFINT_CAL * (*VREFINT_CAL)) / measuredLevel);
 80034b2:	4b0a      	ldr	r3, [pc, #40]	; (80034dc <SYS_GetBatteryLevel+0x54>)
 80034b4:	881b      	ldrh	r3, [r3, #0]
 80034b6:	001a      	movs	r2, r3
 80034b8:	4b09      	ldr	r3, [pc, #36]	; (80034e0 <SYS_GetBatteryLevel+0x58>)
 80034ba:	4353      	muls	r3, r2
 80034bc:	6839      	ldr	r1, [r7, #0]
 80034be:	0018      	movs	r0, r3
 80034c0:	f7fc fe2a 	bl	8000118 <__udivsi3>
 80034c4:	0003      	movs	r3, r0
 80034c6:	001a      	movs	r2, r3
 80034c8:	1dbb      	adds	r3, r7, #6
 80034ca:	801a      	strh	r2, [r3, #0]
  }

  return batteryLevelmV;
 80034cc:	1dbb      	adds	r3, r7, #6
 80034ce:	881b      	ldrh	r3, [r3, #0]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 80034d0:	0018      	movs	r0, r3
 80034d2:	46bd      	mov	sp, r7
 80034d4:	b002      	add	sp, #8
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	44020000 	.word	0x44020000
 80034dc:	1ff80078 	.word	0x1ff80078
 80034e0:	00000bb8 	.word	0x00000bb8

080034e4 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 80034e4:	b590      	push	{r4, r7, lr}
 80034e6:	b087      	sub	sp, #28
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 80034ec:	2300      	movs	r3, #0
 80034ee:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80034f0:	230c      	movs	r3, #12
 80034f2:	18fb      	adds	r3, r7, r3
 80034f4:	0018      	movs	r0, r3
 80034f6:	2308      	movs	r3, #8
 80034f8:	001a      	movs	r2, r3
 80034fa:	2100      	movs	r1, #0
 80034fc:	f01a fd0d 	bl	801df1a <memset>

  MX_ADC_Init();
 8003500:	f7ff fec6 	bl	8003290 <MX_ADC_Init>

  /* wait the the Vrefint used by adc is set */
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VREFINTRDY) == RESET) {};
 8003504:	46c0      	nop			; (mov r8, r8)
 8003506:	4b2c      	ldr	r3, [pc, #176]	; (80035b8 <ADC_ReadChannels+0xd4>)
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	2208      	movs	r2, #8
 800350c:	4013      	ands	r3, r2
 800350e:	2b08      	cmp	r3, #8
 8003510:	d1f9      	bne.n	8003506 <ADC_ReadChannels+0x22>

  __HAL_RCC_ADC1_CLK_ENABLE();
 8003512:	4b2a      	ldr	r3, [pc, #168]	; (80035bc <ADC_ReadChannels+0xd8>)
 8003514:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003516:	4b29      	ldr	r3, [pc, #164]	; (80035bc <ADC_ReadChannels+0xd8>)
 8003518:	2180      	movs	r1, #128	; 0x80
 800351a:	0089      	lsls	r1, r1, #2
 800351c:	430a      	orrs	r2, r1
 800351e:	635a      	str	r2, [r3, #52]	; 0x34

  /*calibrate ADC if any calibraiton hardware*/
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8003520:	4b27      	ldr	r3, [pc, #156]	; (80035c0 <ADC_ReadChannels+0xdc>)
 8003522:	2100      	movs	r1, #0
 8003524:	0018      	movs	r0, r3
 8003526:	f003 fbf5 	bl	8006d14 <HAL_ADCEx_Calibration_Start>

  /* Deselects all channels*/
  sConfig.Channel = ADC_CHANNEL_MASK;
 800352a:	240c      	movs	r4, #12
 800352c:	193b      	adds	r3, r7, r4
 800352e:	4a25      	ldr	r2, [pc, #148]	; (80035c4 <ADC_ReadChannels+0xe0>)
 8003530:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8003532:	193b      	adds	r3, r7, r4
 8003534:	4a24      	ldr	r2, [pc, #144]	; (80035c8 <ADC_ReadChannels+0xe4>)
 8003536:	605a      	str	r2, [r3, #4]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8003538:	193a      	adds	r2, r7, r4
 800353a:	4b21      	ldr	r3, [pc, #132]	; (80035c0 <ADC_ReadChannels+0xdc>)
 800353c:	0011      	movs	r1, r2
 800353e:	0018      	movs	r0, r3
 8003540:	f003 fa3c 	bl	80069bc <HAL_ADC_ConfigChannel>

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8003544:	0021      	movs	r1, r4
 8003546:	187b      	adds	r3, r7, r1
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800354c:	187b      	adds	r3, r7, r1
 800354e:	2280      	movs	r2, #128	; 0x80
 8003550:	0152      	lsls	r2, r2, #5
 8003552:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003554:	187a      	adds	r2, r7, r1
 8003556:	4b1a      	ldr	r3, [pc, #104]	; (80035c0 <ADC_ReadChannels+0xdc>)
 8003558:	0011      	movs	r1, r2
 800355a:	0018      	movs	r0, r3
 800355c:	f003 fa2e 	bl	80069bc <HAL_ADC_ConfigChannel>
 8003560:	1e03      	subs	r3, r0, #0
 8003562:	d001      	beq.n	8003568 <ADC_ReadChannels+0x84>
  {
    Error_Handler();
 8003564:	f000 f9ea 	bl	800393c <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc1) != HAL_OK)
 8003568:	4b15      	ldr	r3, [pc, #84]	; (80035c0 <ADC_ReadChannels+0xdc>)
 800356a:	0018      	movs	r0, r3
 800356c:	f003 f8f0 	bl	8006750 <HAL_ADC_Start>
 8003570:	1e03      	subs	r3, r0, #0
 8003572:	d001      	beq.n	8003578 <ADC_ReadChannels+0x94>
  {
    /* Start Error */
    Error_Handler();
 8003574:	f000 f9e2 	bl	800393c <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8003578:	2301      	movs	r3, #1
 800357a:	425a      	negs	r2, r3
 800357c:	4b10      	ldr	r3, [pc, #64]	; (80035c0 <ADC_ReadChannels+0xdc>)
 800357e:	0011      	movs	r1, r2
 8003580:	0018      	movs	r0, r3
 8003582:	f003 f979 	bl	8006878 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc1) ;   /* it calls also ADC_Disable() */
 8003586:	4b0e      	ldr	r3, [pc, #56]	; (80035c0 <ADC_ReadChannels+0xdc>)
 8003588:	0018      	movs	r0, r3
 800358a:	f003 f935 	bl	80067f8 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc1);
 800358e:	4b0c      	ldr	r3, [pc, #48]	; (80035c0 <ADC_ReadChannels+0xdc>)
 8003590:	0018      	movs	r0, r3
 8003592:	f003 fa07 	bl	80069a4 <HAL_ADC_GetValue>
 8003596:	0003      	movs	r3, r0
 8003598:	617b      	str	r3, [r7, #20]

  HAL_ADC_DeInit(&hadc1);
 800359a:	4b09      	ldr	r3, [pc, #36]	; (80035c0 <ADC_ReadChannels+0xdc>)
 800359c:	0018      	movs	r0, r3
 800359e:	f003 f83b 	bl	8006618 <HAL_ADC_DeInit>

  __HAL_RCC_ADC1_CLK_DISABLE();
 80035a2:	4b06      	ldr	r3, [pc, #24]	; (80035bc <ADC_ReadChannels+0xd8>)
 80035a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035a6:	4b05      	ldr	r3, [pc, #20]	; (80035bc <ADC_ReadChannels+0xd8>)
 80035a8:	4908      	ldr	r1, [pc, #32]	; (80035cc <ADC_ReadChannels+0xe8>)
 80035aa:	400a      	ands	r2, r1
 80035ac:	635a      	str	r2, [r3, #52]	; 0x34

  return ADCxConvertedValues;
 80035ae:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 80035b0:	0018      	movs	r0, r3
 80035b2:	46bd      	mov	sp, r7
 80035b4:	b007      	add	sp, #28
 80035b6:	bd90      	pop	{r4, r7, pc}
 80035b8:	40007000 	.word	0x40007000
 80035bc:	40021000 	.word	0x40021000
 80035c0:	20001408 	.word	0x20001408
 80035c4:	0007ffff 	.word	0x0007ffff
 80035c8:	00001001 	.word	0x00001001
 80035cc:	fffffdff 	.word	0xfffffdff

080035d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */

  __HAL_RCC_DMA1_CLK_ENABLE();
 80035d6:	4b0c      	ldr	r3, [pc, #48]	; (8003608 <MX_DMA_Init+0x38>)
 80035d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035da:	4b0b      	ldr	r3, [pc, #44]	; (8003608 <MX_DMA_Init+0x38>)
 80035dc:	2101      	movs	r1, #1
 80035de:	430a      	orrs	r2, r1
 80035e0:	631a      	str	r2, [r3, #48]	; 0x30
 80035e2:	4b09      	ldr	r3, [pc, #36]	; (8003608 <MX_DMA_Init+0x38>)
 80035e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e6:	2201      	movs	r2, #1
 80035e8:	4013      	ands	r3, r2
 80035ea:	607b      	str	r3, [r7, #4]
 80035ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80035ee:	2200      	movs	r2, #0
 80035f0:	2100      	movs	r1, #0
 80035f2:	200b      	movs	r0, #11
 80035f4:	f003 fcce 	bl	8006f94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80035f8:	200b      	movs	r0, #11
 80035fa:	f003 fce0 	bl	8006fbe <HAL_NVIC_EnableIRQ>

}
 80035fe:	46c0      	nop			; (mov r8, r8)
 8003600:	46bd      	mov	sp, r7
 8003602:	b002      	add	sp, #8
 8003604:	bd80      	pop	{r7, pc}
 8003606:	46c0      	nop			; (mov r8, r8)
 8003608:	40021000 	.word	0x40021000

0800360c <EEPROM_WRITE_DATA>:

	}
	HAL_FLASHEx_DATAEEPROM_Lock();
}
 void EEPROM_WRITE_DATA(uint32_t addrepr, void *dataeprom, uint32_t sizeepr) // метод записи от АКТИВ
 {
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
	if ((addrepr < STM32L072_EEPROM_START_ADDR) || (addrepr >= STM32L072_EEPROM_END_ADDR))
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	4a1c      	ldr	r2, [pc, #112]	; (800368c <EEPROM_WRITE_DATA+0x80>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d903      	bls.n	8003628 <EEPROM_WRITE_DATA+0x1c>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	4a1b      	ldr	r2, [pc, #108]	; (8003690 <EEPROM_WRITE_DATA+0x84>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d90b      	bls.n	8003640 <EEPROM_WRITE_DATA+0x34>
//			return EEPROM_ADDR_ERROR;
//		return;
	if ((sizeepr % 4 != 0) || ( sizeepr > STM32L072_EEPROM_END_ADDR - addrepr))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2203      	movs	r2, #3
 800362c:	4013      	ands	r3, r2
 800362e:	d105      	bne.n	800363c <EEPROM_WRITE_DATA+0x30>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	4a18      	ldr	r2, [pc, #96]	; (8003694 <EEPROM_WRITE_DATA+0x88>)
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	429a      	cmp	r2, r3
 800363a:	d901      	bls.n	8003640 <EEPROM_WRITE_DATA+0x34>
//			return EEPROM_SIZE_ERROR;
//		return;

	HAL_FLASHEx_DATAEEPROM_Unlock();            // Разблокировка памяти для чтения и записи с EEPROM
 800363c:	f004 f8e4 	bl	8007808 <HAL_FLASHEx_DATAEEPROM_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);  // Сброс флага write protect
 8003640:	4b15      	ldr	r3, [pc, #84]	; (8003698 <EEPROM_WRITE_DATA+0x8c>)
 8003642:	2280      	movs	r2, #128	; 0x80
 8003644:	0052      	lsls	r2, r2, #1
 8003646:	619a      	str	r2, [r3, #24]
		for(uint32_t i = 0; i < sizeepr / 4 ; i++)
 8003648:	2300      	movs	r3, #0
 800364a:	617b      	str	r3, [r7, #20]
 800364c:	e013      	b.n	8003676 <EEPROM_WRITE_DATA+0x6a>
		{
			if (HAL_FLASHEx_DATAEEPROM_Erase(addrepr) != HAL_OK) {
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	0018      	movs	r0, r3
 8003652:	f004 f915 	bl	8007880 <HAL_FLASHEx_DATAEEPROM_Erase>
//				return EEPROM_ERASE_ERROR;
//				return;
			}
			if (HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addrepr, ((uint32_t*)dataeprom)[i]) != HAL_OK) {
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	68ba      	ldr	r2, [r7, #8]
 800365c:	18d3      	adds	r3, r2, r3
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	0019      	movs	r1, r3
 8003664:	2000      	movs	r0, #0
 8003666:	f004 f937 	bl	80078d8 <HAL_FLASHEx_DATAEEPROM_Program>
//				return EEPROM_WRITE_ERROR;
//				return;
		    }

			addrepr = addrepr + 4;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	3304      	adds	r3, #4
 800366e:	60fb      	str	r3, [r7, #12]
		for(uint32_t i = 0; i < sizeepr / 4 ; i++)
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	3301      	adds	r3, #1
 8003674:	617b      	str	r3, [r7, #20]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	089b      	lsrs	r3, r3, #2
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	429a      	cmp	r2, r3
 800367e:	d3e6      	bcc.n	800364e <EEPROM_WRITE_DATA+0x42>
			}
  	HAL_FLASHEx_DATAEEPROM_Lock();
 8003680:	f004 f8f0 	bl	8007864 <HAL_FLASHEx_DATAEEPROM_Lock>
// 	return EEPROM_SOK;
 }
 8003684:	46c0      	nop			; (mov r8, r8)
 8003686:	46bd      	mov	sp, r7
 8003688:	b006      	add	sp, #24
 800368a:	bd80      	pop	{r7, pc}
 800368c:	0807ffff 	.word	0x0807ffff
 8003690:	080807ff 	.word	0x080807ff
 8003694:	08080800 	.word	0x08080800
 8003698:	40022000 	.word	0x40022000

0800369c <EEPROM_Read_Data>:
   uint32_t readData;
   readData = *(__IO uint32_t*)(EEPROM_BASE_ADDR); // Чтение данных из EEPROM
   return readData;
 }

 void EEPROM_Read_Data(uint32_t addrepr, void *dataeprom, uint32_t sizeepr) {  // чтение от АКТИВ
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]

	 if ((addrepr < STM32L072_EEPROM_START_ADDR) || (addrepr >= STM32L072_EEPROM_END_ADDR))
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	4a1b      	ldr	r2, [pc, #108]	; (8003718 <EEPROM_Read_Data+0x7c>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d903      	bls.n	80036b8 <EEPROM_Read_Data+0x1c>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	4a1a      	ldr	r2, [pc, #104]	; (800371c <EEPROM_Read_Data+0x80>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d903      	bls.n	80036c0 <EEPROM_Read_Data+0x24>
//		 return EEPROM_ADDR_ERROR;
		  printf("Ошибка записи по адресу из EEPROM\n");
 80036b8:	4b19      	ldr	r3, [pc, #100]	; (8003720 <EEPROM_Read_Data+0x84>)
 80036ba:	0018      	movs	r0, r3
 80036bc:	f01a fca8 	bl	801e010 <puts>
//	 	 return;
	 if ((sizeepr % 4 != 0) || ( sizeepr > STM32L072_EEPROM_END_ADDR - addrepr))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2203      	movs	r2, #3
 80036c4:	4013      	ands	r3, r2
 80036c6:	d105      	bne.n	80036d4 <EEPROM_Read_Data+0x38>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	4a16      	ldr	r2, [pc, #88]	; (8003724 <EEPROM_Read_Data+0x88>)
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d903      	bls.n	80036dc <EEPROM_Read_Data+0x40>
//		 return EEPROM_SIZE_ERROR;
		  printf("Ошибка размера данных из EEPROM\n");
 80036d4:	4b14      	ldr	r3, [pc, #80]	; (8003728 <EEPROM_Read_Data+0x8c>)
 80036d6:	0018      	movs	r0, r3
 80036d8:	f01a fc9a 	bl	801e010 <puts>
//	 	 return;
	for(uint32_t i = 0; i < sizeepr / 4 ; i++) {
 80036dc:	2300      	movs	r3, #0
 80036de:	617b      	str	r3, [r7, #20]
 80036e0:	e00f      	b.n	8003702 <EEPROM_Read_Data+0x66>
		((uint8_t*)dataeprom)[i] = *(uint8_t*)(addrepr + i);
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	18d3      	adds	r3, r2, r3
 80036e8:	0019      	movs	r1, r3
 80036ea:	68ba      	ldr	r2, [r7, #8]
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	18d3      	adds	r3, r2, r3
 80036f0:	780a      	ldrb	r2, [r1, #0]
 80036f2:	701a      	strb	r2, [r3, #0]
		  printf("Данные успешно записаны и прочитаны из EEPROM\n");
 80036f4:	4b0d      	ldr	r3, [pc, #52]	; (800372c <EEPROM_Read_Data+0x90>)
 80036f6:	0018      	movs	r0, r3
 80036f8:	f01a fc8a 	bl	801e010 <puts>
	for(uint32_t i = 0; i < sizeepr / 4 ; i++) {
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	3301      	adds	r3, #1
 8003700:	617b      	str	r3, [r7, #20]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	089b      	lsrs	r3, r3, #2
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	429a      	cmp	r2, r3
 800370a:	d3ea      	bcc.n	80036e2 <EEPROM_Read_Data+0x46>
//		  return;
		}
	 // 	return EEPROM_SOK;
  }
 800370c:	46c0      	nop			; (mov r8, r8)
 800370e:	46c0      	nop			; (mov r8, r8)
 8003710:	46bd      	mov	sp, r7
 8003712:	b006      	add	sp, #24
 8003714:	bd80      	pop	{r7, pc}
 8003716:	46c0      	nop			; (mov r8, r8)
 8003718:	0807ffff 	.word	0x0807ffff
 800371c:	080807ff 	.word	0x080807ff
 8003720:	0801efe4 	.word	0x0801efe4
 8003724:	08080800 	.word	0x08080800
 8003728:	0801f01c 	.word	0x0801f01c
 800372c:	0801f054 	.word	0x0801f054

08003730 <EEPROM_CLEAR>:

 void EEPROM_CLEAR(void) {    // Очистка записи статистики от АКТИВ
 8003730:	b580      	push	{r7, lr}
 8003732:	b086      	sub	sp, #24
 8003734:	af00      	add	r7, sp, #0

	uint32_t address = 0;
 8003736:	2300      	movs	r3, #0
 8003738:	613b      	str	r3, [r7, #16]
	uint32_t Dataepr = 0;
 800373a:	2300      	movs	r3, #0
 800373c:	607b      	str	r3, [r7, #4]
    uint32_t max = 250;
 800373e:	23fa      	movs	r3, #250	; 0xfa
 8003740:	60fb      	str	r3, [r7, #12]
    uint32_t pause = 10;
 8003742:	230a      	movs	r3, #10
 8003744:	60bb      	str	r3, [r7, #8]
    	for (uint32_t i = 0; i < max; i++) {
 8003746:	2300      	movs	r3, #0
 8003748:	617b      	str	r3, [r7, #20]
 800374a:	e012      	b.n	8003772 <EEPROM_CLEAR+0x42>
    		address = STM32L072_EEPROM_START_ADDR + i * 4;
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	4a0d      	ldr	r2, [pc, #52]	; (8003784 <EEPROM_CLEAR+0x54>)
 8003750:	4694      	mov	ip, r2
 8003752:	4463      	add	r3, ip
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	613b      	str	r3, [r7, #16]
    		EEPROM_WRITE_DATA(address, &Dataepr, 4);
 8003758:	1d39      	adds	r1, r7, #4
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	2204      	movs	r2, #4
 800375e:	0018      	movs	r0, r3
 8003760:	f7ff ff54 	bl	800360c <EEPROM_WRITE_DATA>
    		HAL_Delay(pause);
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	0018      	movs	r0, r3
 8003768:	f001 fb31 	bl	8004dce <HAL_Delay>
    	for (uint32_t i = 0; i < max; i++) {
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	3301      	adds	r3, #1
 8003770:	617b      	str	r3, [r7, #20]
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	429a      	cmp	r2, r3
 8003778:	d3e8      	bcc.n	800374c <EEPROM_CLEAR+0x1c>
  }
 }
 800377a:	46c0      	nop			; (mov r8, r8)
 800377c:	46c0      	nop			; (mov r8, r8)
 800377e:	46bd      	mov	sp, r7
 8003780:	b006      	add	sp, #24
 8003782:	bd80      	pop	{r7, pc}
 8003784:	02020000 	.word	0x02020000

08003788 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800378e:	f002 fd55 	bl	800623c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003792:	f000 f83d 	bl	8003810 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_LoRaWAN_Init();
 8003796:	f7ff f93d 	bl	8002a14 <MX_LoRaWAN_Init>
      	   		size = sprintf((char *)Data, "BMP280: found %s\n", bme280p ? "BME280" : "BMP280");
      	 	HAL_UART_Transmit(&husart2, Data, size, 1000);
      	 	*/
  //      uint16_t eepromBaseAddress = 0x08080000; // Пример адреса EEPROM
  	  #define eepromBaseAddress 0x08080000UL
        uint8_t dataToWrite[] = {0x01, 0x02, 0x03}; // Пример данных для записи
 800379a:	003b      	movs	r3, r7
 800379c:	4a1a      	ldr	r2, [pc, #104]	; (8003808 <main+0x80>)
 800379e:	8811      	ldrh	r1, [r2, #0]
 80037a0:	8019      	strh	r1, [r3, #0]
 80037a2:	7892      	ldrb	r2, [r2, #2]
 80037a4:	709a      	strb	r2, [r3, #2]
        uint8_t dataToWrite1 = 10; // Пример данных для записи
 80037a6:	1dfb      	adds	r3, r7, #7
 80037a8:	220a      	movs	r2, #10
 80037aa:	701a      	strb	r2, [r3, #0]
        uint8_t dataSize = sizeof(dataToWrite1); // Размер данных
 80037ac:	1dbb      	adds	r3, r7, #6
 80037ae:	2201      	movs	r2, #1
 80037b0:	701a      	strb	r2, [r3, #0]
  //      HAL_Delay(1000);
//        EEPROM_CLEAR();
//        EEPROM_WRITE_DATA(STM32L072_EEPROM_START_ADDR, dataToWrite1, dataSize);
  //    FLASHEx_EEPROM_WRITE(0, params->DownlinkCounter, sizeof(params->DownlinkCounter));
  //      dataeprom = dataToWrite;
        EEPROM_CLEAR();      // возможный вариант
 80037b2:	f7ff ffbd 	bl	8003730 <EEPROM_CLEAR>
        EEPROM_WRITE_DATA(eepromBaseAddress, dataToWrite1, dataSize); // возможный вариант
 80037b6:	1dfb      	adds	r3, r7, #7
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	0019      	movs	r1, r3
 80037bc:	1dbb      	adds	r3, r7, #6
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	4812      	ldr	r0, [pc, #72]	; (800380c <main+0x84>)
 80037c2:	001a      	movs	r2, r3
 80037c4:	f7ff ff22 	bl	800360c <EEPROM_WRITE_DATA>
        uint8_t datareadepr = 0; // Прочитанные данные
 80037c8:	1d7b      	adds	r3, r7, #5
 80037ca:	2200      	movs	r2, #0
 80037cc:	701a      	strb	r2, [r3, #0]
//        EEPROM_ReadData();
        uint8_t datareadeprerror = 2; // Буфер ошибки
 80037ce:	1d3b      	adds	r3, r7, #4
 80037d0:	2202      	movs	r2, #2
 80037d2:	701a      	strb	r2, [r3, #0]
        EEPROM_Read_Data(eepromBaseAddress, datareadepr, dataSize); //  возможный вариант
 80037d4:	1d7b      	adds	r3, r7, #5
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	0019      	movs	r1, r3
 80037da:	1dbb      	adds	r3, r7, #6
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	480b      	ldr	r0, [pc, #44]	; (800380c <main+0x84>)
 80037e0:	001a      	movs	r2, r3
 80037e2:	f7ff ff5b 	bl	800369c <EEPROM_Read_Data>
//        datareadepr =  EEPROM_ReadData();
//        datareadepr = EEPROM_Read_Data();
//        memcmp(datareadepr,dataToWrite);
         if (datareadepr == dataToWrite1)
 80037e6:	1d7a      	adds	r2, r7, #5
 80037e8:	1dfb      	adds	r3, r7, #7
 80037ea:	7812      	ldrb	r2, [r2, #0]
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d103      	bne.n	80037fa <main+0x72>
        {
        	datareadeprerror = 100;
 80037f2:	1d3b      	adds	r3, r7, #4
 80037f4:	2264      	movs	r2, #100	; 0x64
 80037f6:	701a      	strb	r2, [r3, #0]
 80037f8:	e002      	b.n	8003800 <main+0x78>
        }
        else {
            // Прочитанные данные не соответствуют записанным данным
            // Выполняйте необходимые действия здесь
//               printf("Ошибка при записи или чтении данных из EEPROM\n");
            datareadeprerror =  0;
 80037fa:	1d3b      	adds	r3, r7, #4
 80037fc:	2200      	movs	r2, #0
 80037fe:	701a      	strb	r2, [r3, #0]
    /* USER CODE END WHILE */
	  // HAL_LPTIM_Counter_Start_IT(&hlptim1,1000);
	  // HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
	  // HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);

    MX_LoRaWAN_Process();
 8003800:	f7ff f911 	bl	8002a26 <MX_LoRaWAN_Process>
 8003804:	e7fc      	b.n	8003800 <main+0x78>
 8003806:	46c0      	nop			; (mov r8, r8)
 8003808:	0801f0a4 	.word	0x0801f0a4
 800380c:	08080000 	.word	0x08080000

08003810 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) //NEW С МЭЙНА
{
 8003810:	b590      	push	{r4, r7, lr}
 8003812:	b09d      	sub	sp, #116	; 0x74
 8003814:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003816:	2438      	movs	r4, #56	; 0x38
 8003818:	193b      	adds	r3, r7, r4
 800381a:	0018      	movs	r0, r3
 800381c:	2338      	movs	r3, #56	; 0x38
 800381e:	001a      	movs	r2, r3
 8003820:	2100      	movs	r1, #0
 8003822:	f01a fb7a 	bl	801df1a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003826:	2324      	movs	r3, #36	; 0x24
 8003828:	18fb      	adds	r3, r7, r3
 800382a:	0018      	movs	r0, r3
 800382c:	2314      	movs	r3, #20
 800382e:	001a      	movs	r2, r3
 8003830:	2100      	movs	r1, #0
 8003832:	f01a fb72 	bl	801df1a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003836:	003b      	movs	r3, r7
 8003838:	0018      	movs	r0, r3
 800383a:	2324      	movs	r3, #36	; 0x24
 800383c:	001a      	movs	r2, r3
 800383e:	2100      	movs	r1, #0
 8003840:	f01a fb6b 	bl	801df1a <memset>
  /* Enable HSE Oscillator and Activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 8003844:	0021      	movs	r1, r4
 8003846:	187b      	adds	r3, r7, r1
 8003848:	2202      	movs	r2, #2
 800384a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState            = RCC_HSE_OFF;
 800384c:	187b      	adds	r3, r7, r1
 800384e:	2200      	movs	r2, #0
 8003850:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 8003852:	187b      	adds	r3, r7, r1
 8003854:	2201      	movs	r2, #1
 8003856:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;// n
 8003858:	187b      	adds	r3, r7, r1
 800385a:	2201      	movs	r2, #1
 800385c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800385e:	187b      	adds	r3, r7, r1
 8003860:	2210      	movs	r2, #16
 8003862:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 8003864:	187b      	adds	r3, r7, r1
 8003866:	2202      	movs	r2, #2
 8003868:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
 800386a:	187b      	adds	r3, r7, r1
 800386c:	2200      	movs	r2, #0
 800386e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLLMUL_6;
 8003870:	187b      	adds	r3, r7, r1
 8003872:	2280      	movs	r2, #128	; 0x80
 8003874:	0312      	lsls	r2, r2, #12
 8003876:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 8003878:	187b      	adds	r3, r7, r1
 800387a:	2280      	movs	r2, #128	; 0x80
 800387c:	0412      	lsls	r2, r2, #16
 800387e:	635a      	str	r2, [r3, #52]	; 0x34

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003880:	187b      	adds	r3, r7, r1
 8003882:	0018      	movs	r0, r3
 8003884:	f005 f9f6 	bl	8008c74 <HAL_RCC_OscConfig>
 8003888:	1e03      	subs	r3, r0, #0
 800388a:	d001      	beq.n	8003890 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800388c:	f000 f856 	bl	800393c <Error_Handler>
  }

  /* Set Voltage scale1 as MCU will run at 32MHz */
__HAL_RCC_PWR_CLK_ENABLE();
 8003890:	4b27      	ldr	r3, [pc, #156]	; (8003930 <SystemClock_Config+0x120>)
 8003892:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003894:	4b26      	ldr	r3, [pc, #152]	; (8003930 <SystemClock_Config+0x120>)
 8003896:	2180      	movs	r1, #128	; 0x80
 8003898:	0549      	lsls	r1, r1, #21
 800389a:	430a      	orrs	r2, r1
 800389c:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800389e:	4b25      	ldr	r3, [pc, #148]	; (8003934 <SystemClock_Config+0x124>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a25      	ldr	r2, [pc, #148]	; (8003938 <SystemClock_Config+0x128>)
 80038a4:	401a      	ands	r2, r3
 80038a6:	4b23      	ldr	r3, [pc, #140]	; (8003934 <SystemClock_Config+0x124>)
 80038a8:	2180      	movs	r1, #128	; 0x80
 80038aa:	0109      	lsls	r1, r1, #4
 80038ac:	430a      	orrs	r2, r1
 80038ae:	601a      	str	r2, [r3, #0]

  /* Poll VOSF bit of in PWR_CSR. Wait until it is reset to 0 */
 while (__HAL_PWR_GET_FLAG(PWR_FLAG_VOS) != RESET) {};
 80038b0:	46c0      	nop			; (mov r8, r8)
 80038b2:	4b20      	ldr	r3, [pc, #128]	; (8003934 <SystemClock_Config+0x124>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	2210      	movs	r2, #16
 80038b8:	4013      	ands	r3, r2
 80038ba:	2b10      	cmp	r3, #16
 80038bc:	d0f9      	beq.n	80038b2 <SystemClock_Config+0xa2>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
  clocks dividers */
 RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 80038be:	2124      	movs	r1, #36	; 0x24
 80038c0:	187b      	adds	r3, r7, r1
 80038c2:	220f      	movs	r2, #15
 80038c4:	601a      	str	r2, [r3, #0]
		 | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038c6:	187b      	adds	r3, r7, r1
 80038c8:	2203      	movs	r2, #3
 80038ca:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038cc:	187b      	adds	r3, r7, r1
 80038ce:	2200      	movs	r2, #0
 80038d0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80038d2:	187b      	adds	r3, r7, r1
 80038d4:	2200      	movs	r2, #0
 80038d6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80038d8:	187b      	adds	r3, r7, r1
 80038da:	2200      	movs	r2, #0
 80038dc:	611a      	str	r2, [r3, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80038de:	187b      	adds	r3, r7, r1
 80038e0:	2101      	movs	r1, #1
 80038e2:	0018      	movs	r0, r3
 80038e4:	f005 fd9a 	bl	800941c <HAL_RCC_ClockConfig>
 80038e8:	1e03      	subs	r3, r0, #0
 80038ea:	d001      	beq.n	80038f0 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 80038ec:	f000 f826 	bl	800393c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80038f0:	003b      	movs	r3, r7
 80038f2:	22ab      	movs	r2, #171	; 0xab
 80038f4:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_LPTIM1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80038f6:	003b      	movs	r3, r7
 80038f8:	2200      	movs	r2, #0
 80038fa:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80038fc:	003b      	movs	r3, r7
 80038fe:	2200      	movs	r2, #0
 8003900:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003902:	003b      	movs	r3, r7
 8003904:	2200      	movs	r2, #0
 8003906:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003908:	003b      	movs	r3, r7
 800390a:	2280      	movs	r2, #128	; 0x80
 800390c:	0292      	lsls	r2, r2, #10
 800390e:	605a      	str	r2, [r3, #4]
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 8003910:	003b      	movs	r3, r7
 8003912:	2200      	movs	r2, #0
 8003914:	61da      	str	r2, [r3, #28]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003916:	003b      	movs	r3, r7
 8003918:	0018      	movs	r0, r3
 800391a:	f005 ffa3 	bl	8009864 <HAL_RCCEx_PeriphCLKConfig>
 800391e:	1e03      	subs	r3, r0, #0
 8003920:	d001      	beq.n	8003926 <SystemClock_Config+0x116>
  {
    Error_Handler();
 8003922:	f000 f80b 	bl	800393c <Error_Handler>
  }
}
 8003926:	46c0      	nop			; (mov r8, r8)
 8003928:	46bd      	mov	sp, r7
 800392a:	b01d      	add	sp, #116	; 0x74
 800392c:	bd90      	pop	{r4, r7, pc}
 800392e:	46c0      	nop			; (mov r8, r8)
 8003930:	40021000 	.word	0x40021000
 8003934:	40007000 	.word	0x40007000
 8003938:	ffffe7ff 	.word	0xffffe7ff

0800393c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while (1)
 8003940:	e7fe      	b.n	8003940 <Error_Handler+0x4>
	...

08003944 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b090      	sub	sp, #64	; 0x40
 8003948:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 800394a:	232c      	movs	r3, #44	; 0x2c
 800394c:	18fb      	adds	r3, r7, r3
 800394e:	0018      	movs	r0, r3
 8003950:	2314      	movs	r3, #20
 8003952:	001a      	movs	r2, r3
 8003954:	2100      	movs	r1, #0
 8003956:	f01a fae0 	bl	801df1a <memset>
  RTC_DateTypeDef sDate = {0};
 800395a:	2328      	movs	r3, #40	; 0x28
 800395c:	18fb      	adds	r3, r7, r3
 800395e:	2200      	movs	r2, #0
 8003960:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8003962:	003b      	movs	r3, r7
 8003964:	0018      	movs	r0, r3
 8003966:	2328      	movs	r3, #40	; 0x28
 8003968:	001a      	movs	r2, r3
 800396a:	2100      	movs	r1, #0
 800396c:	f01a fad5 	bl	801df1a <memset>

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003970:	4b41      	ldr	r3, [pc, #260]	; (8003a78 <MX_RTC_Init+0x134>)
 8003972:	4a42      	ldr	r2, [pc, #264]	; (8003a7c <MX_RTC_Init+0x138>)
 8003974:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003976:	4b40      	ldr	r3, [pc, #256]	; (8003a78 <MX_RTC_Init+0x134>)
 8003978:	2200      	movs	r2, #0
 800397a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 800397c:	4b3e      	ldr	r3, [pc, #248]	; (8003a78 <MX_RTC_Init+0x134>)
 800397e:	221f      	movs	r2, #31
 8003980:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = RTC_PREDIV_S;
 8003982:	4b3d      	ldr	r3, [pc, #244]	; (8003a78 <MX_RTC_Init+0x134>)
 8003984:	4a3e      	ldr	r2, [pc, #248]	; (8003a80 <MX_RTC_Init+0x13c>)
 8003986:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003988:	4b3b      	ldr	r3, [pc, #236]	; (8003a78 <MX_RTC_Init+0x134>)
 800398a:	2200      	movs	r2, #0
 800398c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800398e:	4b3a      	ldr	r3, [pc, #232]	; (8003a78 <MX_RTC_Init+0x134>)
 8003990:	2200      	movs	r2, #0
 8003992:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003994:	4b38      	ldr	r3, [pc, #224]	; (8003a78 <MX_RTC_Init+0x134>)
 8003996:	2200      	movs	r2, #0
 8003998:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800399a:	4b37      	ldr	r3, [pc, #220]	; (8003a78 <MX_RTC_Init+0x134>)
 800399c:	2200      	movs	r2, #0
 800399e:	61da      	str	r2, [r3, #28]

  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80039a0:	4b35      	ldr	r3, [pc, #212]	; (8003a78 <MX_RTC_Init+0x134>)
 80039a2:	0018      	movs	r0, r3
 80039a4:	f006 f8b4 	bl	8009b10 <HAL_RTC_Init>
 80039a8:	1e03      	subs	r3, r0, #0
 80039aa:	d001      	beq.n	80039b0 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 80039ac:	f7ff ffc6 	bl	800393c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80039b0:	212c      	movs	r1, #44	; 0x2c
 80039b2:	187b      	adds	r3, r7, r1
 80039b4:	2200      	movs	r2, #0
 80039b6:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 80039b8:	187b      	adds	r3, r7, r1
 80039ba:	2200      	movs	r2, #0
 80039bc:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 80039be:	187b      	adds	r3, r7, r1
 80039c0:	2200      	movs	r2, #0
 80039c2:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80039c4:	187b      	adds	r3, r7, r1
 80039c6:	2200      	movs	r2, #0
 80039c8:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80039ca:	187b      	adds	r3, r7, r1
 80039cc:	2200      	movs	r2, #0
 80039ce:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80039d0:	1879      	adds	r1, r7, r1
 80039d2:	4b29      	ldr	r3, [pc, #164]	; (8003a78 <MX_RTC_Init+0x134>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	0018      	movs	r0, r3
 80039d8:	f006 f938 	bl	8009c4c <HAL_RTC_SetTime>
 80039dc:	1e03      	subs	r3, r0, #0
 80039de:	d001      	beq.n	80039e4 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 80039e0:	f7ff ffac 	bl	800393c <Error_Handler>
  }

  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80039e4:	2128      	movs	r1, #40	; 0x28
 80039e6:	187b      	adds	r3, r7, r1
 80039e8:	2201      	movs	r2, #1
 80039ea:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80039ec:	187b      	adds	r3, r7, r1
 80039ee:	2201      	movs	r2, #1
 80039f0:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 80039f2:	187b      	adds	r3, r7, r1
 80039f4:	2201      	movs	r2, #1
 80039f6:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 80039f8:	187b      	adds	r3, r7, r1
 80039fa:	2200      	movs	r2, #0
 80039fc:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80039fe:	1879      	adds	r1, r7, r1
 8003a00:	4b1d      	ldr	r3, [pc, #116]	; (8003a78 <MX_RTC_Init+0x134>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	0018      	movs	r0, r3
 8003a06:	f006 fa41 	bl	8009e8c <HAL_RTC_SetDate>
 8003a0a:	1e03      	subs	r3, r0, #0
 8003a0c:	d001      	beq.n	8003a12 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8003a0e:	f7ff ff95 	bl	800393c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8003a12:	003b      	movs	r3, r7
 8003a14:	2200      	movs	r2, #0
 8003a16:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8003a18:	003b      	movs	r3, r7
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8003a1e:	003b      	movs	r3, r7
 8003a20:	2200      	movs	r2, #0
 8003a22:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8003a24:	003b      	movs	r3, r7
 8003a26:	2200      	movs	r2, #0
 8003a28:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003a2a:	003b      	movs	r3, r7
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003a30:	003b      	movs	r3, r7
 8003a32:	2200      	movs	r2, #0
 8003a34:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8003a36:	003b      	movs	r3, r7
 8003a38:	2200      	movs	r2, #0
 8003a3a:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_SS14_10;
 8003a3c:	003b      	movs	r3, r7
 8003a3e:	22a0      	movs	r2, #160	; 0xa0
 8003a40:	0512      	lsls	r2, r2, #20
 8003a42:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003a44:	003b      	movs	r3, r7
 8003a46:	2200      	movs	r2, #0
 8003a48:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 30;
 8003a4a:	003b      	movs	r3, r7
 8003a4c:	2220      	movs	r2, #32
 8003a4e:	211e      	movs	r1, #30
 8003a50:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8003a52:	003b      	movs	r3, r7
 8003a54:	2280      	movs	r2, #128	; 0x80
 8003a56:	0052      	lsls	r2, r2, #1
 8003a58:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8003a5a:	0039      	movs	r1, r7
 8003a5c:	4b06      	ldr	r3, [pc, #24]	; (8003a78 <MX_RTC_Init+0x134>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	0018      	movs	r0, r3
 8003a62:	f006 fb0f 	bl	800a084 <HAL_RTC_SetAlarm_IT>
 8003a66:	1e03      	subs	r3, r0, #0
 8003a68:	d001      	beq.n	8003a6e <MX_RTC_Init+0x12a>
  {
    Error_Handler();
 8003a6a:	f7ff ff67 	bl	800393c <Error_Handler>
  }

}
 8003a6e:	46c0      	nop			; (mov r8, r8)
 8003a70:	46bd      	mov	sp, r7
 8003a72:	b010      	add	sp, #64	; 0x40
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	46c0      	nop			; (mov r8, r8)
 8003a78:	200014a4 	.word	0x200014a4
 8003a7c:	40002800 	.word	0x40002800
 8003a80:	000003ff 	.word	0x000003ff

08003a84 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef *rtcHandle)
{
 8003a84:	b590      	push	{r4, r7, lr}
 8003a86:	b091      	sub	sp, #68	; 0x44
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]

  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a8c:	2408      	movs	r4, #8
 8003a8e:	193b      	adds	r3, r7, r4
 8003a90:	0018      	movs	r0, r3
 8003a92:	2338      	movs	r3, #56	; 0x38
 8003a94:	001a      	movs	r2, r3
 8003a96:	2100      	movs	r1, #0
 8003a98:	f01a fa3f 	bl	801df1a <memset>
  if (rtcHandle->Instance == RTC)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a16      	ldr	r2, [pc, #88]	; (8003afc <HAL_RTC_MspInit+0x78>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d126      	bne.n	8003af4 <HAL_RTC_MspInit+0x70>
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /** Initializes the peripherals clocks
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 8003aa6:	193b      	adds	r3, r7, r4
 8003aa8:	2204      	movs	r2, #4
 8003aaa:	601a      	str	r2, [r3, #0]
    RCC_OscInitStruct.LSEState = RCC_LSE_ON; // SWAP OFF НО ТОЛКУ ТО? Спасёт ли это при моей проблеме
 8003aac:	193b      	adds	r3, r7, r4
 8003aae:	2280      	movs	r2, #128	; 0x80
 8003ab0:	0052      	lsls	r2, r2, #1
 8003ab2:	609a      	str	r2, [r3, #8]
    RCC_OscInitStruct.LSIState = RCC_LSI_OFF;// SWAP ON
 8003ab4:	193b      	adds	r3, r7, r4
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	615a      	str	r2, [r3, #20]
    RCC_OscInitStruct.HSEState = RCC_HSE_OFF;
 8003aba:	193b      	adds	r3, r7, r4
 8003abc:	2200      	movs	r2, #0
 8003abe:	605a      	str	r2, [r3, #4]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003ac0:	193b      	adds	r3, r7, r4
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ac6:	193b      	adds	r3, r7, r4
 8003ac8:	0018      	movs	r0, r3
 8003aca:	f005 f8d3 	bl	8008c74 <HAL_RCC_OscConfig>
 8003ace:	1e03      	subs	r3, r0, #0
 8003ad0:	d001      	beq.n	8003ad6 <HAL_RTC_MspInit+0x52>
    {
      Error_Handler();
 8003ad2:	f7ff ff33 	bl	800393c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003ad6:	4b0a      	ldr	r3, [pc, #40]	; (8003b00 <HAL_RTC_MspInit+0x7c>)
 8003ad8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ada:	4b09      	ldr	r3, [pc, #36]	; (8003b00 <HAL_RTC_MspInit+0x7c>)
 8003adc:	2180      	movs	r1, #128	; 0x80
 8003ade:	02c9      	lsls	r1, r1, #11
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	651a      	str	r2, [r3, #80]	; 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	2002      	movs	r0, #2
 8003aea:	f003 fa53 	bl	8006f94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn); // вот это отрубать еси шо
 8003aee:	2002      	movs	r0, #2
 8003af0:	f003 fa65 	bl	8006fbe <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN RTC_MspInit 1 */

    /* USER CODE END RTC_MspInit 1 */
  }
}
 8003af4:	46c0      	nop			; (mov r8, r8)
 8003af6:	46bd      	mov	sp, r7
 8003af8:	b011      	add	sp, #68	; 0x44
 8003afa:	bd90      	pop	{r4, r7, pc}
 8003afc:	40002800 	.word	0x40002800
 8003b00:	40021000 	.word	0x40021000

08003b04 <LL_RTC_TIME_GetSubSecond>:
  * @rmtoll SSR          SS            LL_RTC_TIME_GetSubSecond
  * @param  RTCx RTC Instance
  * @retval Sub second value (number between 0 and 65535)
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b10:	041b      	lsls	r3, r3, #16
 8003b12:	0c1b      	lsrs	r3, r3, #16
}
 8003b14:	0018      	movs	r0, r3
 8003b16:	46bd      	mov	sp, r7
 8003b18:	b002      	add	sp, #8
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <RTC_IF_Init>:
/* USER CODE BEGIN Exported_Functions */

/* USER CODE END Exported_Functions */

UTIL_TIMER_Status_t RTC_IF_Init(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b08a      	sub	sp, #40	; 0x28
 8003b20:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;

  if (RTC_Initalized == false)
 8003b22:	4b16      	ldr	r3, [pc, #88]	; (8003b7c <RTC_IF_Init+0x60>)
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	2201      	movs	r2, #1
 8003b28:	4053      	eors	r3, r2
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d01f      	beq.n	8003b70 <RTC_IF_Init+0x54>
    RTC_IF_DBG_PRINTF("RTC_init\n\r");

    /* ##-1- Configure the RTC clock source ###################################### */

    /* Select LSE as RTC clock source */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003b30:	1d3b      	adds	r3, r7, #4
 8003b32:	2220      	movs	r2, #32
 8003b34:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003b36:	1d3b      	adds	r3, r7, #4
 8003b38:	2280      	movs	r2, #128	; 0x80
 8003b3a:	0252      	lsls	r2, r2, #9
 8003b3c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b3e:	1d3b      	adds	r3, r7, #4
 8003b40:	0018      	movs	r0, r3
 8003b42:	f005 fe8f 	bl	8009864 <HAL_RCCEx_PeriphCLKConfig>
 8003b46:	1e03      	subs	r3, r0, #0
 8003b48:	d000      	beq.n	8003b4c <RTC_IF_Init+0x30>
    {
      /* Initialization Error */
      while (1);
 8003b4a:	e7fe      	b.n	8003b4a <RTC_IF_Init+0x2e>
    }

    MX_RTC_Init();
 8003b4c:	f7ff fefa 	bl	8003944 <MX_RTC_Init>

    /** Configure the Alarm A */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8003b50:	2380      	movs	r3, #128	; 0x80
 8003b52:	005a      	lsls	r2, r3, #1
 8003b54:	4b0a      	ldr	r3, [pc, #40]	; (8003b80 <RTC_IF_Init+0x64>)
 8003b56:	0011      	movs	r1, r2
 8003b58:	0018      	movs	r0, r3
 8003b5a:	f006 fbdf 	bl	800a31c <HAL_RTC_DeactivateAlarm>
    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8003b5e:	4b08      	ldr	r3, [pc, #32]	; (8003b80 <RTC_IF_Init+0x64>)
 8003b60:	0018      	movs	r0, r3
 8003b62:	f006 fd89 	bl	800a678 <HAL_RTCEx_EnableBypassShadow>

    RTC_IF_SetTimerContext();
 8003b66:	f000 f859 	bl	8003c1c <RTC_IF_SetTimerContext>

    RTC_Initalized = true;
 8003b6a:	4b04      	ldr	r3, [pc, #16]	; (8003b7c <RTC_IF_Init+0x60>)
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	701a      	strb	r2, [r3, #0]
  }
  return UTIL_TIMER_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	0018      	movs	r0, r3
 8003b74:	46bd      	mov	sp, r7
 8003b76:	b00a      	add	sp, #40	; 0x28
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	46c0      	nop			; (mov r8, r8)
 8003b7c:	200003c0 	.word	0x200003c0
 8003b80:	200014a4 	.word	0x200014a4

08003b84 <RTC_IF_StartTimer>:

UTIL_TIMER_Status_t RTC_IF_StartTimer(uint32_t timeout)
{
 8003b84:	b590      	push	{r4, r7, lr}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* we don't go in Low Power mode for timeout below MIN_ALARM_DELAY */
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - RTC_IF_GetTimerElapsedTime())))
 8003b8c:	4b14      	ldr	r3, [pc, #80]	; (8003be0 <RTC_IF_StartTimer+0x5c>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	5e9b      	ldrsh	r3, [r3, r2]
 8003b92:	3303      	adds	r3, #3
 8003b94:	001c      	movs	r4, r3
 8003b96:	f000 f861 	bl	8003c5c <RTC_IF_GetTimerElapsedTime>
 8003b9a:	0002      	movs	r2, r0
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	1a9b      	subs	r3, r3, r2
 8003ba0:	429c      	cmp	r4, r3
 8003ba2:	d204      	bcs.n	8003bae <RTC_IF_StartTimer+0x2a>
  {
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_ENABLE);
 8003ba4:	2100      	movs	r1, #0
 8003ba6:	2002      	movs	r0, #2
 8003ba8:	f018 fbd2 	bl	801c350 <UTIL_LPM_SetStopMode>
 8003bac:	e003      	b.n	8003bb6 <RTC_IF_StartTimer+0x32>
  }
  else
  {
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_DISABLE);
 8003bae:	2101      	movs	r1, #1
 8003bb0:	2002      	movs	r0, #2
 8003bb2:	f018 fbcd 	bl	801c350 <UTIL_LPM_SetStopMode>
  }

  /*In case stop mode is required */
  if (UTIL_LPM_GetMode() == UTIL_LPM_STOPMODE)
 8003bb6:	f018 fc2b 	bl	801c410 <UTIL_LPM_GetMode>
 8003bba:	0003      	movs	r3, r0
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d106      	bne.n	8003bce <RTC_IF_StartTimer+0x4a>
  {
    timeout = timeout -  McuWakeUpTimeCal;
 8003bc0:	4b07      	ldr	r3, [pc, #28]	; (8003be0 <RTC_IF_StartTimer+0x5c>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	5e9b      	ldrsh	r3, [r3, r2]
 8003bc6:	001a      	movs	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	1a9b      	subs	r3, r3, r2
 8003bcc:	607b      	str	r3, [r7, #4]
  }

  RTC_StartWakeUpAlarm(timeout);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	0018      	movs	r0, r3
 8003bd2:	f000 f959 	bl	8003e88 <RTC_StartWakeUpAlarm>
  return UTIL_TIMER_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	0018      	movs	r0, r3
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	b003      	add	sp, #12
 8003bde:	bd90      	pop	{r4, r7, pc}
 8003be0:	200003c2 	.word	0x200003c2

08003be4 <RTC_IF_StopTimer>:

UTIL_TIMER_Status_t RTC_IF_StopTimer(void)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	af00      	add	r7, sp, #0
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8003be8:	4b0a      	ldr	r3, [pc, #40]	; (8003c14 <RTC_IF_StopTimer+0x30>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	22ff      	movs	r2, #255	; 0xff
 8003bf0:	401a      	ands	r2, r3
 8003bf2:	4b08      	ldr	r3, [pc, #32]	; (8003c14 <RTC_IF_StopTimer+0x30>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4908      	ldr	r1, [pc, #32]	; (8003c18 <RTC_IF_StopTimer+0x34>)
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	60da      	str	r2, [r3, #12]
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8003bfc:	2380      	movs	r3, #128	; 0x80
 8003bfe:	005a      	lsls	r2, r3, #1
 8003c00:	4b04      	ldr	r3, [pc, #16]	; (8003c14 <RTC_IF_StopTimer+0x30>)
 8003c02:	0011      	movs	r1, r2
 8003c04:	0018      	movs	r0, r3
 8003c06:	f006 fb89 	bl	800a31c <HAL_RTC_DeactivateAlarm>
  return UTIL_TIMER_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	0018      	movs	r0, r3
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	46c0      	nop			; (mov r8, r8)
 8003c14:	200014a4 	.word	0x200014a4
 8003c18:	fffffe7f 	.word	0xfffffe7f

08003c1c <RTC_IF_SetTimerContext>:

uint32_t RTC_IF_SetTimerContext(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext.Rtc_Time = RTC_GetCalendarValue(&RtcTimerContext.RTC_Calndr_Date, &RtcTimerContext.RTC_Calndr_Time);
 8003c20:	4a06      	ldr	r2, [pc, #24]	; (8003c3c <RTC_IF_SetTimerContext+0x20>)
 8003c22:	4b07      	ldr	r3, [pc, #28]	; (8003c40 <RTC_IF_SetTimerContext+0x24>)
 8003c24:	0011      	movs	r1, r2
 8003c26:	0018      	movs	r0, r3
 8003c28:	f000 fa94 	bl	8004154 <RTC_GetCalendarValue>
 8003c2c:	0002      	movs	r2, r0
 8003c2e:	4b05      	ldr	r3, [pc, #20]	; (8003c44 <RTC_IF_SetTimerContext+0x28>)
 8003c30:	601a      	str	r2, [r3, #0]
  RTC_IF_DBG_PRINTF("RTC_IF_SetTimerContext=%d\n\r", RtcTimerContext.Rtc_Time);
  /*return time context*/
  return (uint32_t) RtcTimerContext.Rtc_Time;
 8003c32:	4b04      	ldr	r3, [pc, #16]	; (8003c44 <RTC_IF_SetTimerContext+0x28>)
 8003c34:	681b      	ldr	r3, [r3, #0]
}
 8003c36:	0018      	movs	r0, r3
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	200003f0 	.word	0x200003f0
 8003c40:	20000404 	.word	0x20000404
 8003c44:	200003ec 	.word	0x200003ec

08003c48 <RTC_IF_GetTimerContext>:

uint32_t RTC_IF_GetTimerContext(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
  RTC_IF_DBG_PRINTF("RTC_IF_GetTimerContext=%d\n\r", RtcTimerContext.Rtc_Time);
  /*return time context*/
  return (uint32_t) RtcTimerContext.Rtc_Time;
 8003c4c:	4b02      	ldr	r3, [pc, #8]	; (8003c58 <RTC_IF_GetTimerContext+0x10>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
}
 8003c50:	0018      	movs	r0, r3
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	46c0      	nop			; (mov r8, r8)
 8003c58:	200003ec 	.word	0x200003ec

08003c5c <RTC_IF_GetTimerElapsedTime>:

uint32_t RTC_IF_GetTimerElapsedTime(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b088      	sub	sp, #32
 8003c60:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_DateTypeDef RTC_DateStruct;

  uint32_t CalendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8003c62:	2308      	movs	r3, #8
 8003c64:	18fa      	adds	r2, r7, r3
 8003c66:	1d3b      	adds	r3, r7, #4
 8003c68:	0011      	movs	r1, r2
 8003c6a:	0018      	movs	r0, r3
 8003c6c:	f000 fa72 	bl	8004154 <RTC_GetCalendarValue>
 8003c70:	0003      	movs	r3, r0
 8003c72:	61fb      	str	r3, [r7, #28]

  return ((uint32_t)(CalendarValue - RtcTimerContext.Rtc_Time));
 8003c74:	4b03      	ldr	r3, [pc, #12]	; (8003c84 <RTC_IF_GetTimerElapsedTime+0x28>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	69fa      	ldr	r2, [r7, #28]
 8003c7a:	1ad3      	subs	r3, r2, r3
}
 8003c7c:	0018      	movs	r0, r3
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	b008      	add	sp, #32
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	200003ec 	.word	0x200003ec

08003c88 <RTC_IF_GetTimerValue>:

uint32_t RTC_IF_GetTimerValue(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b088      	sub	sp, #32
 8003c8c:	af00      	add	r7, sp, #0
  uint32_t CalendarValue = 0;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_DateTypeDef RTC_DateStruct;

  if (RTC_Initalized == true)
 8003c92:	4b09      	ldr	r3, [pc, #36]	; (8003cb8 <RTC_IF_GetTimerValue+0x30>)
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d008      	beq.n	8003cac <RTC_IF_GetTimerValue+0x24>
  {
    CalendarValue = (uint32_t) RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8003c9a:	2308      	movs	r3, #8
 8003c9c:	18fa      	adds	r2, r7, r3
 8003c9e:	1d3b      	adds	r3, r7, #4
 8003ca0:	0011      	movs	r1, r2
 8003ca2:	0018      	movs	r0, r3
 8003ca4:	f000 fa56 	bl	8004154 <RTC_GetCalendarValue>
 8003ca8:	0003      	movs	r3, r0
 8003caa:	61fb      	str	r3, [r7, #28]
  }
  return CalendarValue;
 8003cac:	69fb      	ldr	r3, [r7, #28]
}
 8003cae:	0018      	movs	r0, r3
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	b008      	add	sp, #32
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	46c0      	nop			; (mov r8, r8)
 8003cb8:	200003c0 	.word	0x200003c0

08003cbc <RTC_IF_GetMinimumTimeout>:

uint32_t RTC_IF_GetMinimumTimeout(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	af00      	add	r7, sp, #0
  return (MIN_ALARM_DELAY);
 8003cc0:	2303      	movs	r3, #3
}
 8003cc2:	0018      	movs	r0, r3
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <RTC_IF_Convert_ms2Tick>:

uint32_t RTC_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8003cc8:	b5b0      	push	{r4, r5, r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 8003cd0:	6879      	ldr	r1, [r7, #4]
 8003cd2:	000a      	movs	r2, r1
 8003cd4:	2100      	movs	r1, #0
 8003cd6:	000b      	movs	r3, r1
 8003cd8:	0e51      	lsrs	r1, r2, #25
 8003cda:	01dd      	lsls	r5, r3, #7
 8003cdc:	430d      	orrs	r5, r1
 8003cde:	01d4      	lsls	r4, r2, #7
 8003ce0:	227d      	movs	r2, #125	; 0x7d
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	0020      	movs	r0, r4
 8003ce6:	0029      	movs	r1, r5
 8003ce8:	f7fc fbee 	bl	80004c8 <__aeabi_uldivmod>
 8003cec:	0002      	movs	r2, r0
 8003cee:	000b      	movs	r3, r1
 8003cf0:	0013      	movs	r3, r2
}
 8003cf2:	0018      	movs	r0, r3
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	b002      	add	sp, #8
 8003cf8:	bdb0      	pop	{r4, r5, r7, pc}

08003cfa <RTC_IF_Convert_Tick2ms>:

uint32_t RTC_IF_Convert_Tick2ms(uint32_t tick)
{
 8003cfa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cfc:	b089      	sub	sp, #36	; 0x24
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	61f8      	str	r0, [r7, #28]
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	613b      	str	r3, [r7, #16]
 8003d06:	2300      	movs	r3, #0
 8003d08:	617b      	str	r3, [r7, #20]
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	0ed1      	lsrs	r1, r2, #27
 8003d10:	0158      	lsls	r0, r3, #5
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	4308      	orrs	r0, r1
 8003d18:	60f8      	str	r0, [r7, #12]
 8003d1a:	0153      	lsls	r3, r2, #5
 8003d1c:	60bb      	str	r3, [r7, #8]
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	68fc      	ldr	r4, [r7, #12]
 8003d22:	6939      	ldr	r1, [r7, #16]
 8003d24:	697a      	ldr	r2, [r7, #20]
 8003d26:	1a5b      	subs	r3, r3, r1
 8003d28:	4194      	sbcs	r4, r2
 8003d2a:	001a      	movs	r2, r3
 8003d2c:	0023      	movs	r3, r4
 8003d2e:	0f91      	lsrs	r1, r2, #30
 8003d30:	0098      	lsls	r0, r3, #2
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	4308      	orrs	r0, r1
 8003d38:	6078      	str	r0, [r7, #4]
 8003d3a:	0093      	lsls	r3, r2, #2
 8003d3c:	603b      	str	r3, [r7, #0]
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	6838      	ldr	r0, [r7, #0]
 8003d44:	6879      	ldr	r1, [r7, #4]
 8003d46:	1812      	adds	r2, r2, r0
 8003d48:	414b      	adcs	r3, r1
 8003d4a:	0659      	lsls	r1, r3, #25
 8003d4c:	09d0      	lsrs	r0, r2, #7
 8003d4e:	0005      	movs	r5, r0
 8003d50:	0028      	movs	r0, r5
 8003d52:	4308      	orrs	r0, r1
 8003d54:	0005      	movs	r5, r0
 8003d56:	09db      	lsrs	r3, r3, #7
 8003d58:	001e      	movs	r6, r3
 8003d5a:	002b      	movs	r3, r5
}
 8003d5c:	0018      	movs	r0, r3
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	b009      	add	sp, #36	; 0x24
 8003d62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d64 <RTC_IF_DelayMs>:

void RTC_IF_DelayMs(uint32_t delay)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  uint32_t delayValue = 0;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = 0;
 8003d70:	2300      	movs	r3, #0
 8003d72:	60bb      	str	r3, [r7, #8]

  delayValue = RTC_IF_Convert_ms2Tick(delay);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	0018      	movs	r0, r3
 8003d78:	f7ff ffa6 	bl	8003cc8 <RTC_IF_Convert_ms2Tick>
 8003d7c:	0003      	movs	r3, r0
 8003d7e:	60fb      	str	r3, [r7, #12]

  /* Wait delay ms */
  timeout = RTC_IF_GetTimerValue();
 8003d80:	f7ff ff82 	bl	8003c88 <RTC_IF_GetTimerValue>
 8003d84:	0003      	movs	r3, r0
 8003d86:	60bb      	str	r3, [r7, #8]
  while (((RTC_IF_GetTimerValue() - timeout)) < delayValue)
 8003d88:	e000      	b.n	8003d8c <RTC_IF_DelayMs+0x28>
  {
    __NOP();
 8003d8a:	46c0      	nop			; (mov r8, r8)
  while (((RTC_IF_GetTimerValue() - timeout)) < delayValue)
 8003d8c:	f7ff ff7c 	bl	8003c88 <RTC_IF_GetTimerValue>
 8003d90:	0002      	movs	r2, r0
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d8f6      	bhi.n	8003d8a <RTC_IF_DelayMs+0x26>
  }
}
 8003d9c:	46c0      	nop			; (mov r8, r8)
 8003d9e:	46c0      	nop			; (mov r8, r8)
 8003da0:	46bd      	mov	sp, r7
 8003da2:	b004      	add	sp, #16
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  RtcHandle: RTC handle
  * @retval None
  */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *RtcHandle)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b082      	sub	sp, #8
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_IRQ_Handler();
 8003dae:	f019 f807 	bl	801cdc0 <UTIL_TIMER_IRQ_Handler>
}
 8003db2:	46c0      	nop			; (mov r8, r8)
 8003db4:	46bd      	mov	sp, r7
 8003db6:	b002      	add	sp, #8
 8003db8:	bd80      	pop	{r7, pc}

08003dba <RTC_IF_GetTime>:

uint32_t RTC_IF_GetTime(uint16_t *mSeconds)
{
 8003dba:	b5b0      	push	{r4, r5, r7, lr}
 8003dbc:	b08c      	sub	sp, #48	; 0x30
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef RTC_TimeStruct ;
  RTC_DateTypeDef RTC_DateStruct;
  uint32_t ticks;

  uint64_t calendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8003dc2:	230c      	movs	r3, #12
 8003dc4:	18fa      	adds	r2, r7, r3
 8003dc6:	2308      	movs	r3, #8
 8003dc8:	18fb      	adds	r3, r7, r3
 8003dca:	0011      	movs	r1, r2
 8003dcc:	0018      	movs	r0, r3
 8003dce:	f000 f9c1 	bl	8004154 <RTC_GetCalendarValue>
 8003dd2:	0003      	movs	r3, r0
 8003dd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t seconds = (uint32_t)(calendarValue >> RTC_N_PREDIV_S);
 8003dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ddc:	059b      	lsls	r3, r3, #22
 8003dde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003de0:	0a94      	lsrs	r4, r2, #10
 8003de2:	431c      	orrs	r4, r3
 8003de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de6:	0a9d      	lsrs	r5, r3, #10
 8003de8:	0023      	movs	r3, r4
 8003dea:	627b      	str	r3, [r7, #36]	; 0x24

  ticks = (uint32_t) calendarValue & RTC_PREDIV_S;
 8003dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dee:	059b      	lsls	r3, r3, #22
 8003df0:	0d9b      	lsrs	r3, r3, #22
 8003df2:	623b      	str	r3, [r7, #32]

  *mSeconds = RTC_IF_Convert_Tick2ms(ticks);
 8003df4:	6a3b      	ldr	r3, [r7, #32]
 8003df6:	0018      	movs	r0, r3
 8003df8:	f7ff ff7f 	bl	8003cfa <RTC_IF_Convert_Tick2ms>
 8003dfc:	0003      	movs	r3, r0
 8003dfe:	b29a      	uxth	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	801a      	strh	r2, [r3, #0]

  return seconds;
 8003e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003e06:	0018      	movs	r0, r3
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	b00c      	add	sp, #48	; 0x30
 8003e0c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003e10 <RTC_IF_BkUp_Write_Seconds>:

void RTC_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	4b04      	ldr	r3, [pc, #16]	; (8003e2c <RTC_IF_BkUp_Write_Seconds+0x1c>)
 8003e1c:	2100      	movs	r1, #0
 8003e1e:	0018      	movs	r0, r3
 8003e20:	f006 fc00 	bl	800a624 <HAL_RTCEx_BKUPWrite>
}
 8003e24:	46c0      	nop			; (mov r8, r8)
 8003e26:	46bd      	mov	sp, r7
 8003e28:	b002      	add	sp, #8
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	200014a4 	.word	0x200014a4

08003e30 <RTC_IF_BkUp_Write_SubSeconds>:

void RTC_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	4b04      	ldr	r3, [pc, #16]	; (8003e4c <RTC_IF_BkUp_Write_SubSeconds+0x1c>)
 8003e3c:	2101      	movs	r1, #1
 8003e3e:	0018      	movs	r0, r3
 8003e40:	f006 fbf0 	bl	800a624 <HAL_RTCEx_BKUPWrite>
}
 8003e44:	46c0      	nop			; (mov r8, r8)
 8003e46:	46bd      	mov	sp, r7
 8003e48:	b002      	add	sp, #8
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	200014a4 	.word	0x200014a4

08003e50 <RTC_IF_BkUp_Read_Seconds>:

uint32_t RTC_IF_BkUp_Read_Seconds(void)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	af00      	add	r7, sp, #0
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8003e54:	4b04      	ldr	r3, [pc, #16]	; (8003e68 <RTC_IF_BkUp_Read_Seconds+0x18>)
 8003e56:	2100      	movs	r1, #0
 8003e58:	0018      	movs	r0, r3
 8003e5a:	f006 fbf9 	bl	800a650 <HAL_RTCEx_BKUPRead>
 8003e5e:	0003      	movs	r3, r0
}
 8003e60:	0018      	movs	r0, r3
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	46c0      	nop			; (mov r8, r8)
 8003e68:	200014a4 	.word	0x200014a4

08003e6c <RTC_IF_BkUp_Read_SubSeconds>:

uint32_t RTC_IF_BkUp_Read_SubSeconds(void)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	af00      	add	r7, sp, #0
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8003e70:	4b04      	ldr	r3, [pc, #16]	; (8003e84 <RTC_IF_BkUp_Read_SubSeconds+0x18>)
 8003e72:	2101      	movs	r1, #1
 8003e74:	0018      	movs	r0, r3
 8003e76:	f006 fbeb 	bl	800a650 <HAL_RTCEx_BKUPRead>
 8003e7a:	0003      	movs	r3, r0
}
 8003e7c:	0018      	movs	r0, r3
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	46c0      	nop			; (mov r8, r8)
 8003e84:	200014a4 	.word	0x200014a4

08003e88 <RTC_StartWakeUpAlarm>:
 * @note  alarm in RtcTimerContext.Rtc_Time + timeoutValue
 * @param timeoutValue in ticks
 * @retval none
 */
static void RTC_StartWakeUpAlarm(uint32_t timeoutValue)
{
 8003e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e8a:	b08d      	sub	sp, #52	; 0x34
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  uint16_t rtcAlarmSubSeconds = 0;
 8003e90:	242e      	movs	r4, #46	; 0x2e
 8003e92:	193b      	adds	r3, r7, r4
 8003e94:	2200      	movs	r2, #0
 8003e96:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmSeconds = 0;
 8003e98:	232c      	movs	r3, #44	; 0x2c
 8003e9a:	18fb      	adds	r3, r7, r3
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmMinutes = 0;
 8003ea0:	232a      	movs	r3, #42	; 0x2a
 8003ea2:	18fb      	adds	r3, r7, r3
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmHours = 0;
 8003ea8:	2328      	movs	r3, #40	; 0x28
 8003eaa:	18fb      	adds	r3, r7, r3
 8003eac:	2200      	movs	r2, #0
 8003eae:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmDays = 0;
 8003eb0:	2526      	movs	r5, #38	; 0x26
 8003eb2:	197b      	adds	r3, r7, r5
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	801a      	strh	r2, [r3, #0]
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 8003eb8:	2610      	movs	r6, #16
 8003eba:	19ba      	adds	r2, r7, r6
 8003ebc:	4b9b      	ldr	r3, [pc, #620]	; (800412c <RTC_StartWakeUpAlarm+0x2a4>)
 8003ebe:	3304      	adds	r3, #4
 8003ec0:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003ec2:	c223      	stmia	r2!, {r0, r1, r5}
 8003ec4:	cb03      	ldmia	r3!, {r0, r1}
 8003ec6:	c203      	stmia	r2!, {r0, r1}
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 8003ec8:	230c      	movs	r3, #12
 8003eca:	001d      	movs	r5, r3
 8003ecc:	18fb      	adds	r3, r7, r3
 8003ece:	4a97      	ldr	r2, [pc, #604]	; (800412c <RTC_StartWakeUpAlarm+0x2a4>)
 8003ed0:	6992      	ldr	r2, [r2, #24]
 8003ed2:	601a      	str	r2, [r3, #0]

  RTC_IF_StopTimer();
 8003ed4:	f7ff fe86 	bl	8003be4 <RTC_IF_StopTimer>


  /*reverse counter */
  rtcAlarmSubSeconds =  RTC_PREDIV_S - RTC_TimeStruct.SubSeconds;
 8003ed8:	19bb      	adds	r3, r7, r6
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	193b      	adds	r3, r7, r4
 8003ee0:	4993      	ldr	r1, [pc, #588]	; (8004130 <RTC_StartWakeUpAlarm+0x2a8>)
 8003ee2:	1a8a      	subs	r2, r1, r2
 8003ee4:	801a      	strh	r2, [r3, #0]
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	059b      	lsls	r3, r3, #22
 8003eec:	0d9b      	lsrs	r3, r3, #22
 8003eee:	b299      	uxth	r1, r3
 8003ef0:	193b      	adds	r3, r7, r4
 8003ef2:	193a      	adds	r2, r7, r4
 8003ef4:	8812      	ldrh	r2, [r2, #0]
 8003ef6:	188a      	adds	r2, r1, r2
 8003ef8:	801a      	strh	r2, [r3, #0]
  /* convert timeout  to seconds */
  timeoutValue >>= RTC_N_PREDIV_S;  /* convert timeout  in seconds */
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	0a9b      	lsrs	r3, r3, #10
 8003efe:	607b      	str	r3, [r7, #4]

  /*convert microsecs to RTC format and add to 'Now' */
  rtcAlarmDays =  RTC_DateStruct.Date;
 8003f00:	002b      	movs	r3, r5
 8003f02:	18fb      	adds	r3, r7, r3
 8003f04:	789a      	ldrb	r2, [r3, #2]
 8003f06:	2526      	movs	r5, #38	; 0x26
 8003f08:	197b      	adds	r3, r7, r5
 8003f0a:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1DAY)
 8003f0c:	e00a      	b.n	8003f24 <RTC_StartWakeUpAlarm+0x9c>
  {
    timeoutValue -= SECONDS_IN_1DAY;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a88      	ldr	r2, [pc, #544]	; (8004134 <RTC_StartWakeUpAlarm+0x2ac>)
 8003f12:	4694      	mov	ip, r2
 8003f14:	4463      	add	r3, ip
 8003f16:	607b      	str	r3, [r7, #4]
    rtcAlarmDays++;
 8003f18:	2126      	movs	r1, #38	; 0x26
 8003f1a:	187b      	adds	r3, r7, r1
 8003f1c:	881a      	ldrh	r2, [r3, #0]
 8003f1e:	187b      	adds	r3, r7, r1
 8003f20:	3201      	adds	r2, #1
 8003f22:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1DAY)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a84      	ldr	r2, [pc, #528]	; (8004138 <RTC_StartWakeUpAlarm+0x2b0>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d8f0      	bhi.n	8003f0e <RTC_StartWakeUpAlarm+0x86>
  }

  /* calc hours */
  rtcAlarmHours = RTC_TimeStruct.Hours;
 8003f2c:	2310      	movs	r3, #16
 8003f2e:	18fb      	adds	r3, r7, r3
 8003f30:	781a      	ldrb	r2, [r3, #0]
 8003f32:	2328      	movs	r3, #40	; 0x28
 8003f34:	18fb      	adds	r3, r7, r3
 8003f36:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1HOUR)
 8003f38:	e00a      	b.n	8003f50 <RTC_StartWakeUpAlarm+0xc8>
  {
    timeoutValue -= SECONDS_IN_1HOUR;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a7f      	ldr	r2, [pc, #508]	; (800413c <RTC_StartWakeUpAlarm+0x2b4>)
 8003f3e:	4694      	mov	ip, r2
 8003f40:	4463      	add	r3, ip
 8003f42:	607b      	str	r3, [r7, #4]
    rtcAlarmHours++;
 8003f44:	2128      	movs	r1, #40	; 0x28
 8003f46:	187b      	adds	r3, r7, r1
 8003f48:	881a      	ldrh	r2, [r3, #0]
 8003f4a:	187b      	adds	r3, r7, r1
 8003f4c:	3201      	adds	r2, #1
 8003f4e:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1HOUR)
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	23e1      	movs	r3, #225	; 0xe1
 8003f54:	011b      	lsls	r3, r3, #4
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d2ef      	bcs.n	8003f3a <RTC_StartWakeUpAlarm+0xb2>
  }

  /* calc minutes */
  rtcAlarmMinutes = RTC_TimeStruct.Minutes;
 8003f5a:	2310      	movs	r3, #16
 8003f5c:	18fb      	adds	r3, r7, r3
 8003f5e:	785a      	ldrb	r2, [r3, #1]
 8003f60:	232a      	movs	r3, #42	; 0x2a
 8003f62:	18fb      	adds	r3, r7, r3
 8003f64:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 8003f66:	e008      	b.n	8003f7a <RTC_StartWakeUpAlarm+0xf2>
  {
    timeoutValue -= SECONDS_IN_1MINUTE;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	3b3c      	subs	r3, #60	; 0x3c
 8003f6c:	607b      	str	r3, [r7, #4]
    rtcAlarmMinutes++;
 8003f6e:	212a      	movs	r1, #42	; 0x2a
 8003f70:	187b      	adds	r3, r7, r1
 8003f72:	881a      	ldrh	r2, [r3, #0]
 8003f74:	187b      	adds	r3, r7, r1
 8003f76:	3201      	adds	r2, #1
 8003f78:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2b3b      	cmp	r3, #59	; 0x3b
 8003f7e:	d8f3      	bhi.n	8003f68 <RTC_StartWakeUpAlarm+0xe0>
  }

  /* calc seconds */
  rtcAlarmSeconds =  RTC_TimeStruct.Seconds + timeoutValue;
 8003f80:	2310      	movs	r3, #16
 8003f82:	18fb      	adds	r3, r7, r3
 8003f84:	789b      	ldrb	r3, [r3, #2]
 8003f86:	b299      	uxth	r1, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	232c      	movs	r3, #44	; 0x2c
 8003f8e:	18fb      	adds	r3, r7, r3
 8003f90:	188a      	adds	r2, r1, r2
 8003f92:	801a      	strh	r2, [r3, #0]

  /***** correct for modulo********/
  while (rtcAlarmSubSeconds >= (RTC_PREDIV_S + 1))
 8003f94:	e00d      	b.n	8003fb2 <RTC_StartWakeUpAlarm+0x12a>
  {
    rtcAlarmSubSeconds -= (RTC_PREDIV_S + 1);
 8003f96:	222e      	movs	r2, #46	; 0x2e
 8003f98:	18bb      	adds	r3, r7, r2
 8003f9a:	18ba      	adds	r2, r7, r2
 8003f9c:	8812      	ldrh	r2, [r2, #0]
 8003f9e:	4968      	ldr	r1, [pc, #416]	; (8004140 <RTC_StartWakeUpAlarm+0x2b8>)
 8003fa0:	468c      	mov	ip, r1
 8003fa2:	4462      	add	r2, ip
 8003fa4:	801a      	strh	r2, [r3, #0]
    rtcAlarmSeconds++;
 8003fa6:	212c      	movs	r1, #44	; 0x2c
 8003fa8:	187b      	adds	r3, r7, r1
 8003faa:	881a      	ldrh	r2, [r3, #0]
 8003fac:	187b      	adds	r3, r7, r1
 8003fae:	3201      	adds	r2, #1
 8003fb0:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmSubSeconds >= (RTC_PREDIV_S + 1))
 8003fb2:	232e      	movs	r3, #46	; 0x2e
 8003fb4:	18fb      	adds	r3, r7, r3
 8003fb6:	881a      	ldrh	r2, [r3, #0]
 8003fb8:	2380      	movs	r3, #128	; 0x80
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d2ea      	bcs.n	8003f96 <RTC_StartWakeUpAlarm+0x10e>
  }

  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 8003fc0:	e00b      	b.n	8003fda <RTC_StartWakeUpAlarm+0x152>
  {
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 8003fc2:	222c      	movs	r2, #44	; 0x2c
 8003fc4:	18bb      	adds	r3, r7, r2
 8003fc6:	18ba      	adds	r2, r7, r2
 8003fc8:	8812      	ldrh	r2, [r2, #0]
 8003fca:	3a3c      	subs	r2, #60	; 0x3c
 8003fcc:	801a      	strh	r2, [r3, #0]
    rtcAlarmMinutes++;
 8003fce:	212a      	movs	r1, #42	; 0x2a
 8003fd0:	187b      	adds	r3, r7, r1
 8003fd2:	881a      	ldrh	r2, [r3, #0]
 8003fd4:	187b      	adds	r3, r7, r1
 8003fd6:	3201      	adds	r2, #1
 8003fd8:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 8003fda:	232c      	movs	r3, #44	; 0x2c
 8003fdc:	18fb      	adds	r3, r7, r3
 8003fde:	881b      	ldrh	r3, [r3, #0]
 8003fe0:	2b3b      	cmp	r3, #59	; 0x3b
 8003fe2:	d8ee      	bhi.n	8003fc2 <RTC_StartWakeUpAlarm+0x13a>
  }

  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 8003fe4:	e00b      	b.n	8003ffe <RTC_StartWakeUpAlarm+0x176>
  {
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 8003fe6:	222a      	movs	r2, #42	; 0x2a
 8003fe8:	18bb      	adds	r3, r7, r2
 8003fea:	18ba      	adds	r2, r7, r2
 8003fec:	8812      	ldrh	r2, [r2, #0]
 8003fee:	3a3c      	subs	r2, #60	; 0x3c
 8003ff0:	801a      	strh	r2, [r3, #0]
    rtcAlarmHours++;
 8003ff2:	2128      	movs	r1, #40	; 0x28
 8003ff4:	187b      	adds	r3, r7, r1
 8003ff6:	881a      	ldrh	r2, [r3, #0]
 8003ff8:	187b      	adds	r3, r7, r1
 8003ffa:	3201      	adds	r2, #1
 8003ffc:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 8003ffe:	232a      	movs	r3, #42	; 0x2a
 8004000:	18fb      	adds	r3, r7, r3
 8004002:	881b      	ldrh	r3, [r3, #0]
 8004004:	2b3b      	cmp	r3, #59	; 0x3b
 8004006:	d8ee      	bhi.n	8003fe6 <RTC_StartWakeUpAlarm+0x15e>
  }

  while (rtcAlarmHours >= HOURS_IN_1DAY)
 8004008:	e00b      	b.n	8004022 <RTC_StartWakeUpAlarm+0x19a>
  {
    rtcAlarmHours -= HOURS_IN_1DAY;
 800400a:	2228      	movs	r2, #40	; 0x28
 800400c:	18bb      	adds	r3, r7, r2
 800400e:	18ba      	adds	r2, r7, r2
 8004010:	8812      	ldrh	r2, [r2, #0]
 8004012:	3a18      	subs	r2, #24
 8004014:	801a      	strh	r2, [r3, #0]
    rtcAlarmDays++;
 8004016:	2126      	movs	r1, #38	; 0x26
 8004018:	187b      	adds	r3, r7, r1
 800401a:	881a      	ldrh	r2, [r3, #0]
 800401c:	187b      	adds	r3, r7, r1
 800401e:	3201      	adds	r2, #1
 8004020:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmHours >= HOURS_IN_1DAY)
 8004022:	2328      	movs	r3, #40	; 0x28
 8004024:	18fb      	adds	r3, r7, r3
 8004026:	881b      	ldrh	r3, [r3, #0]
 8004028:	2b17      	cmp	r3, #23
 800402a:	d8ee      	bhi.n	800400a <RTC_StartWakeUpAlarm+0x182>
  }

  if (RTC_DateStruct.Year % 4 == 0)
 800402c:	210c      	movs	r1, #12
 800402e:	187b      	adds	r3, r7, r1
 8004030:	78db      	ldrb	r3, [r3, #3]
 8004032:	2203      	movs	r2, #3
 8004034:	4013      	ands	r3, r2
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b00      	cmp	r3, #0
 800403a:	d119      	bne.n	8004070 <RTC_StartWakeUpAlarm+0x1e8>
  {
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 800403c:	187b      	adds	r3, r7, r1
 800403e:	785b      	ldrb	r3, [r3, #1]
 8004040:	3b01      	subs	r3, #1
 8004042:	4a40      	ldr	r2, [pc, #256]	; (8004144 <RTC_StartWakeUpAlarm+0x2bc>)
 8004044:	5cd3      	ldrb	r3, [r2, r3]
 8004046:	b29b      	uxth	r3, r3
 8004048:	2426      	movs	r4, #38	; 0x26
 800404a:	193a      	adds	r2, r7, r4
 800404c:	8812      	ldrh	r2, [r2, #0]
 800404e:	429a      	cmp	r2, r3
 8004050:	d928      	bls.n	80040a4 <RTC_StartWakeUpAlarm+0x21c>
    {
      rtcAlarmDays = rtcAlarmDays % DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ];
 8004052:	193b      	adds	r3, r7, r4
 8004054:	8818      	ldrh	r0, [r3, #0]
 8004056:	187b      	adds	r3, r7, r1
 8004058:	785b      	ldrb	r3, [r3, #1]
 800405a:	3b01      	subs	r3, #1
 800405c:	4a39      	ldr	r2, [pc, #228]	; (8004144 <RTC_StartWakeUpAlarm+0x2bc>)
 800405e:	5cd3      	ldrb	r3, [r2, r3]
 8004060:	0019      	movs	r1, r3
 8004062:	f7fc f9c9 	bl	80003f8 <__aeabi_idivmod>
 8004066:	000b      	movs	r3, r1
 8004068:	001a      	movs	r2, r3
 800406a:	193b      	adds	r3, r7, r4
 800406c:	801a      	strh	r2, [r3, #0]
 800406e:	e019      	b.n	80040a4 <RTC_StartWakeUpAlarm+0x21c>
    }
  }
  else
  {
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 8004070:	210c      	movs	r1, #12
 8004072:	187b      	adds	r3, r7, r1
 8004074:	785b      	ldrb	r3, [r3, #1]
 8004076:	3b01      	subs	r3, #1
 8004078:	4a33      	ldr	r2, [pc, #204]	; (8004148 <RTC_StartWakeUpAlarm+0x2c0>)
 800407a:	5cd3      	ldrb	r3, [r2, r3]
 800407c:	b29b      	uxth	r3, r3
 800407e:	2426      	movs	r4, #38	; 0x26
 8004080:	193a      	adds	r2, r7, r4
 8004082:	8812      	ldrh	r2, [r2, #0]
 8004084:	429a      	cmp	r2, r3
 8004086:	d90d      	bls.n	80040a4 <RTC_StartWakeUpAlarm+0x21c>
    {
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 8004088:	193b      	adds	r3, r7, r4
 800408a:	8818      	ldrh	r0, [r3, #0]
 800408c:	187b      	adds	r3, r7, r1
 800408e:	785b      	ldrb	r3, [r3, #1]
 8004090:	3b01      	subs	r3, #1
 8004092:	4a2d      	ldr	r2, [pc, #180]	; (8004148 <RTC_StartWakeUpAlarm+0x2c0>)
 8004094:	5cd3      	ldrb	r3, [r2, r3]
 8004096:	0019      	movs	r1, r3
 8004098:	f7fc f9ae 	bl	80003f8 <__aeabi_idivmod>
 800409c:	000b      	movs	r3, r1
 800409e:	001a      	movs	r2, r3
 80040a0:	193b      	adds	r3, r7, r4
 80040a2:	801a      	strh	r2, [r3, #0]
    }
  }

  /* Set RTC_AlarmStructure with calculated values*/
  RTC_AlarmStructure.AlarmTime.SubSeconds = RTC_PREDIV_S - rtcAlarmSubSeconds;
 80040a4:	232e      	movs	r3, #46	; 0x2e
 80040a6:	18fb      	adds	r3, r7, r3
 80040a8:	881b      	ldrh	r3, [r3, #0]
 80040aa:	4a21      	ldr	r2, [pc, #132]	; (8004130 <RTC_StartWakeUpAlarm+0x2a8>)
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	001a      	movs	r2, r3
 80040b0:	4b26      	ldr	r3, [pc, #152]	; (800414c <RTC_StartWakeUpAlarm+0x2c4>)
 80040b2:	605a      	str	r2, [r3, #4]
  RTC_AlarmStructure.AlarmSubSecondMask  = RTC_ALARMSUBSECONDMASK;
 80040b4:	4b25      	ldr	r3, [pc, #148]	; (800414c <RTC_StartWakeUpAlarm+0x2c4>)
 80040b6:	22a0      	movs	r2, #160	; 0xa0
 80040b8:	0512      	lsls	r2, r2, #20
 80040ba:	619a      	str	r2, [r3, #24]
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 80040bc:	232c      	movs	r3, #44	; 0x2c
 80040be:	18fb      	adds	r3, r7, r3
 80040c0:	881b      	ldrh	r3, [r3, #0]
 80040c2:	b2da      	uxtb	r2, r3
 80040c4:	4b21      	ldr	r3, [pc, #132]	; (800414c <RTC_StartWakeUpAlarm+0x2c4>)
 80040c6:	709a      	strb	r2, [r3, #2]
  RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 80040c8:	232a      	movs	r3, #42	; 0x2a
 80040ca:	18fb      	adds	r3, r7, r3
 80040cc:	881b      	ldrh	r3, [r3, #0]
 80040ce:	b2da      	uxtb	r2, r3
 80040d0:	4b1e      	ldr	r3, [pc, #120]	; (800414c <RTC_StartWakeUpAlarm+0x2c4>)
 80040d2:	705a      	strb	r2, [r3, #1]
  RTC_AlarmStructure.AlarmTime.Hours   = rtcAlarmHours;
 80040d4:	2328      	movs	r3, #40	; 0x28
 80040d6:	18fb      	adds	r3, r7, r3
 80040d8:	881b      	ldrh	r3, [r3, #0]
 80040da:	b2da      	uxtb	r2, r3
 80040dc:	4b1b      	ldr	r3, [pc, #108]	; (800414c <RTC_StartWakeUpAlarm+0x2c4>)
 80040de:	701a      	strb	r2, [r3, #0]
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 80040e0:	2326      	movs	r3, #38	; 0x26
 80040e2:	18fb      	adds	r3, r7, r3
 80040e4:	881b      	ldrh	r3, [r3, #0]
 80040e6:	b2d9      	uxtb	r1, r3
 80040e8:	4b18      	ldr	r3, [pc, #96]	; (800414c <RTC_StartWakeUpAlarm+0x2c4>)
 80040ea:	2220      	movs	r2, #32
 80040ec:	5499      	strb	r1, [r3, r2]
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 80040ee:	2310      	movs	r3, #16
 80040f0:	18fb      	adds	r3, r7, r3
 80040f2:	78da      	ldrb	r2, [r3, #3]
 80040f4:	4b15      	ldr	r3, [pc, #84]	; (800414c <RTC_StartWakeUpAlarm+0x2c4>)
 80040f6:	70da      	strb	r2, [r3, #3]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80040f8:	4b14      	ldr	r3, [pc, #80]	; (800414c <RTC_StartWakeUpAlarm+0x2c4>)
 80040fa:	2200      	movs	r2, #0
 80040fc:	61da      	str	r2, [r3, #28]
  RTC_AlarmStructure.AlarmMask       = RTC_ALARMMASK_NONE;
 80040fe:	4b13      	ldr	r3, [pc, #76]	; (800414c <RTC_StartWakeUpAlarm+0x2c4>)
 8004100:	2200      	movs	r2, #0
 8004102:	615a      	str	r2, [r3, #20]
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8004104:	4b11      	ldr	r3, [pc, #68]	; (800414c <RTC_StartWakeUpAlarm+0x2c4>)
 8004106:	2280      	movs	r2, #128	; 0x80
 8004108:	0052      	lsls	r2, r2, #1
 800410a:	625a      	str	r2, [r3, #36]	; 0x24
  RTC_AlarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800410c:	4b0f      	ldr	r3, [pc, #60]	; (800414c <RTC_StartWakeUpAlarm+0x2c4>)
 800410e:	2200      	movs	r2, #0
 8004110:	60da      	str	r2, [r3, #12]
  RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004112:	4b0e      	ldr	r3, [pc, #56]	; (800414c <RTC_StartWakeUpAlarm+0x2c4>)
 8004114:	2200      	movs	r2, #0
 8004116:	611a      	str	r2, [r3, #16]

  /* Set RTC_Alarm */
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 8004118:	490c      	ldr	r1, [pc, #48]	; (800414c <RTC_StartWakeUpAlarm+0x2c4>)
 800411a:	4b0d      	ldr	r3, [pc, #52]	; (8004150 <RTC_StartWakeUpAlarm+0x2c8>)
 800411c:	2200      	movs	r2, #0
 800411e:	0018      	movs	r0, r3
 8004120:	f005 ffb0 	bl	800a084 <HAL_RTC_SetAlarm_IT>
}
 8004124:	46c0      	nop			; (mov r8, r8)
 8004126:	46bd      	mov	sp, r7
 8004128:	b00d      	add	sp, #52	; 0x34
 800412a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800412c:	200003ec 	.word	0x200003ec
 8004130:	000003ff 	.word	0x000003ff
 8004134:	fffeae80 	.word	0xfffeae80
 8004138:	0001517f 	.word	0x0001517f
 800413c:	fffff1f0 	.word	0xfffff1f0
 8004140:	fffffc00 	.word	0xfffffc00
 8004144:	0801f0b4 	.word	0x0801f0b4
 8004148:	0801f0a8 	.word	0x0801f0a8
 800414c:	200003c4 	.word	0x200003c4
 8004150:	200014a4 	.word	0x200014a4

08004154 <RTC_GetCalendarValue>:
  * @param pointer to RTC_DateStruct
  * @param pointer to RTC_TimeStruct
  * @retval time in ticks
  */
static uint32_t RTC_GetCalendarValue(RTC_DateTypeDef *RTC_DateStruct, RTC_TimeTypeDef *RTC_TimeStruct)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b086      	sub	sp, #24
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  uint32_t calendarValue = 0;
 800415e:	2300      	movs	r3, #0
 8004160:	617b      	str	r3, [r7, #20]
  uint32_t first_read;
  uint32_t correction;

  /* Get Time and Date*/
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8004162:	6839      	ldr	r1, [r7, #0]
 8004164:	4b42      	ldr	r3, [pc, #264]	; (8004270 <RTC_GetCalendarValue+0x11c>)
 8004166:	2200      	movs	r2, #0
 8004168:	0018      	movs	r0, r3
 800416a:	f005 fe33 	bl	8009dd4 <HAL_RTC_GetTime>

  /* make sure it is correct due to asynchronus nature of RTC*/
  do
  {
    first_read = LL_RTC_TIME_GetSubSecond(RTC);
 800416e:	4b41      	ldr	r3, [pc, #260]	; (8004274 <RTC_GetCalendarValue+0x120>)
 8004170:	0018      	movs	r0, r3
 8004172:	f7ff fcc7 	bl	8003b04 <LL_RTC_TIME_GetSubSecond>
 8004176:	0003      	movs	r3, r0
 8004178:	613b      	str	r3, [r7, #16]
    HAL_RTC_GetDate(&hrtc, RTC_DateStruct, RTC_FORMAT_BIN);
 800417a:	6879      	ldr	r1, [r7, #4]
 800417c:	4b3c      	ldr	r3, [pc, #240]	; (8004270 <RTC_GetCalendarValue+0x11c>)
 800417e:	2200      	movs	r2, #0
 8004180:	0018      	movs	r0, r3
 8004182:	f005 ff31 	bl	8009fe8 <HAL_RTC_GetDate>
    HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8004186:	6839      	ldr	r1, [r7, #0]
 8004188:	4b39      	ldr	r3, [pc, #228]	; (8004270 <RTC_GetCalendarValue+0x11c>)
 800418a:	2200      	movs	r2, #0
 800418c:	0018      	movs	r0, r3
 800418e:	f005 fe21 	bl	8009dd4 <HAL_RTC_GetTime>

  } while (first_read != LL_RTC_TIME_GetSubSecond(RTC));
 8004192:	4b38      	ldr	r3, [pc, #224]	; (8004274 <RTC_GetCalendarValue+0x120>)
 8004194:	0018      	movs	r0, r3
 8004196:	f7ff fcb5 	bl	8003b04 <LL_RTC_TIME_GetSubSecond>
 800419a:	0002      	movs	r2, r0
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	4293      	cmp	r3, r2
 80041a0:	d1e5      	bne.n	800416e <RTC_GetCalendarValue+0x1a>

  /* calculte amount of elapsed days since 01/01/2000 */
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	78db      	ldrb	r3, [r3, #3]
 80041a6:	001a      	movs	r2, r3
 80041a8:	4b33      	ldr	r3, [pc, #204]	; (8004278 <RTC_GetCalendarValue+0x124>)
 80041aa:	4353      	muls	r3, r2
 80041ac:	3303      	adds	r3, #3
 80041ae:	089b      	lsrs	r3, r3, #2
 80041b0:	617b      	str	r3, [r7, #20]

  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	78db      	ldrb	r3, [r3, #3]
 80041b6:	2203      	movs	r2, #3
 80041b8:	4013      	ands	r3, r2
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d101      	bne.n	80041c4 <RTC_GetCalendarValue+0x70>
 80041c0:	4b2e      	ldr	r3, [pc, #184]	; (800427c <RTC_GetCalendarValue+0x128>)
 80041c2:	e000      	b.n	80041c6 <RTC_GetCalendarValue+0x72>
 80041c4:	4b2e      	ldr	r3, [pc, #184]	; (8004280 <RTC_GetCalendarValue+0x12c>)
 80041c6:	60fb      	str	r3, [r7, #12]

  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	785b      	ldrb	r3, [r3, #1]
 80041cc:	1e5a      	subs	r2, r3, #1
 80041ce:	0013      	movs	r3, r2
 80041d0:	011b      	lsls	r3, r3, #4
 80041d2:	1a9b      	subs	r3, r3, r2
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	189b      	adds	r3, r3, r2
 80041d8:	3301      	adds	r3, #1
 80041da:	2b00      	cmp	r3, #0
 80041dc:	da00      	bge.n	80041e0 <RTC_GetCalendarValue+0x8c>
 80041de:	3301      	adds	r3, #1
 80041e0:	105b      	asrs	r3, r3, #1
 80041e2:	0019      	movs	r1, r3
                         2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	785b      	ldrb	r3, [r3, #1]
 80041e8:	3b01      	subs	r3, #1
 80041ea:	005b      	lsls	r3, r3, #1
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	40da      	lsrs	r2, r3
 80041f0:	0013      	movs	r3, r2
 80041f2:	2203      	movs	r2, #3
 80041f4:	4013      	ands	r3, r2
 80041f6:	1acb      	subs	r3, r1, r3
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	18d3      	adds	r3, r2, r3
 80041fc:	617b      	str	r3, [r7, #20]

  calendarValue += (RTC_DateStruct->Date - 1);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	789b      	ldrb	r3, [r3, #2]
 8004202:	001a      	movs	r2, r3
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	18d3      	adds	r3, r2, r3
 8004208:	3b01      	subs	r3, #1
 800420a:	617b      	str	r3, [r7, #20]

  /* convert from days to seconds */
  calendarValue *= SECONDS_IN_1DAY;
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	0013      	movs	r3, r2
 8004210:	005b      	lsls	r3, r3, #1
 8004212:	189b      	adds	r3, r3, r2
 8004214:	011a      	lsls	r2, r3, #4
 8004216:	1ad2      	subs	r2, r2, r3
 8004218:	0113      	lsls	r3, r2, #4
 800421a:	1a9b      	subs	r3, r3, r2
 800421c:	01db      	lsls	r3, r3, #7
 800421e:	617b      	str	r3, [r7, #20]

  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	789b      	ldrb	r3, [r3, #2]
 8004224:	0019      	movs	r1, r3
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
                    ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	001a      	movs	r2, r3
 800422c:	0013      	movs	r3, r2
 800422e:	011b      	lsls	r3, r3, #4
 8004230:	1a9b      	subs	r3, r3, r2
 8004232:	011a      	lsls	r2, r3, #4
 8004234:	1ad2      	subs	r2, r2, r3
 8004236:	0113      	lsls	r3, r2, #4
 8004238:	001a      	movs	r2, r3
 800423a:	0010      	movs	r0, r2
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	785b      	ldrb	r3, [r3, #1]
 8004240:	001a      	movs	r2, r3
 8004242:	0013      	movs	r3, r2
 8004244:	011b      	lsls	r3, r3, #4
 8004246:	1a9b      	subs	r3, r3, r2
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	18c3      	adds	r3, r0, r3
 800424c:	18cb      	adds	r3, r1, r3
  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	18d3      	adds	r3, r2, r3
 8004252:	617b      	str	r3, [r7, #20]

  calendarValue = (calendarValue << RTC_N_PREDIV_S) + (RTC_PREDIV_S - RTC_TimeStruct->SubSeconds);
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	029a      	lsls	r2, r3, #10
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	4a09      	ldr	r2, [pc, #36]	; (8004284 <RTC_GetCalendarValue+0x130>)
 8004260:	4694      	mov	ip, r2
 8004262:	4463      	add	r3, ip
 8004264:	617b      	str	r3, [r7, #20]

  return (calendarValue);
 8004266:	697b      	ldr	r3, [r7, #20]
}
 8004268:	0018      	movs	r0, r3
 800426a:	46bd      	mov	sp, r7
 800426c:	b006      	add	sp, #24
 800426e:	bd80      	pop	{r7, pc}
 8004270:	200014a4 	.word	0x200014a4
 8004274:	40002800 	.word	0x40002800
 8004278:	000005b5 	.word	0x000005b5
 800427c:	00445550 	.word	0x00445550
 8004280:	0099aaa0 	.word	0x0099aaa0
 8004284:	000003ff 	.word	0x000003ff

08004288 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 800428c:	46c0      	nop			; (mov r8, r8)
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8004296:	46c0      	nop			; (mov r8, r8)
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042a2:	f3ef 8310 	mrs	r3, PRIMASK
 80042a6:	607b      	str	r3, [r7, #4]
  return(result);
 80042a8:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 80042aa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80042ac:	b672      	cpsid	i
}
 80042ae:	46c0      	nop			; (mov r8, r8)

  Sx_Board_IoDeInit();
 80042b0:	f001 fd74 	bl	8005d9c <CMWX1ZZABZ0XX_RADIO_IoDeInit>

  HAL_ADC_MspDeInit(&hadc1);
 80042b4:	4b0b      	ldr	r3, [pc, #44]	; (80042e4 <PWR_EnterStopMode+0x48>)
 80042b6:	0018      	movs	r0, r3
 80042b8:	f7ff f866 	bl	8003388 <HAL_ADC_MspDeInit>

  /*clear wake up flag*/
  SET_BIT(PWR->CR, PWR_CR_CWUF);
 80042bc:	4b0a      	ldr	r3, [pc, #40]	; (80042e8 <PWR_EnterStopMode+0x4c>)
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	4b09      	ldr	r3, [pc, #36]	; (80042e8 <PWR_EnterStopMode+0x4c>)
 80042c2:	2104      	movs	r1, #4
 80042c4:	430a      	orrs	r2, r1
 80042c6:	601a      	str	r2, [r3, #0]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	f383 8810 	msr	PRIMASK, r3
}
 80042d2:	46c0      	nop			; (mov r8, r8)

  UTILS_EXIT_CRITICAL_SECTION();

  /* Enter Stop Mode */
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80042d4:	2101      	movs	r1, #1
 80042d6:	2001      	movs	r0, #1
 80042d8:	f004 fc54 	bl	8008b84 <HAL_PWR_EnterSTOPMode>
}
 80042dc:	46c0      	nop			; (mov r8, r8)
 80042de:	46bd      	mov	sp, r7
 80042e0:	b004      	add	sp, #16
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	20001408 	.word	0x20001408
 80042e8:	40007000 	.word	0x40007000

080042ec <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042f2:	f3ef 8310 	mrs	r3, PRIMASK
 80042f6:	60bb      	str	r3, [r7, #8]
  return(result);
 80042f8:	68bb      	ldr	r3, [r7, #8]
  /* Disable IRQ while the MCU is not running on HSI */

  UTILS_ENTER_CRITICAL_SECTION();
 80042fa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80042fc:	b672      	cpsid	i
}
 80042fe:	46c0      	nop			; (mov r8, r8)

  /* After wake-up from STOP reconfigure the system clock */
  /* Enable HSI */
  __HAL_RCC_HSI_ENABLE();
 8004300:	4b19      	ldr	r3, [pc, #100]	; (8004368 <PWR_ExitStopMode+0x7c>)
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	4b18      	ldr	r3, [pc, #96]	; (8004368 <PWR_ExitStopMode+0x7c>)
 8004306:	2101      	movs	r1, #1
 8004308:	430a      	orrs	r2, r1
 800430a:	601a      	str	r2, [r3, #0]

  /* Wait till HSI is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {}
 800430c:	46c0      	nop			; (mov r8, r8)
 800430e:	4b16      	ldr	r3, [pc, #88]	; (8004368 <PWR_ExitStopMode+0x7c>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2204      	movs	r2, #4
 8004314:	4013      	ands	r3, r2
 8004316:	d0fa      	beq.n	800430e <PWR_ExitStopMode+0x22>

  /* Enable PLL */
  __HAL_RCC_PLL_ENABLE();
 8004318:	4b13      	ldr	r3, [pc, #76]	; (8004368 <PWR_ExitStopMode+0x7c>)
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	4b12      	ldr	r3, [pc, #72]	; (8004368 <PWR_ExitStopMode+0x7c>)
 800431e:	2180      	movs	r1, #128	; 0x80
 8004320:	0449      	lsls	r1, r1, #17
 8004322:	430a      	orrs	r2, r1
 8004324:	601a      	str	r2, [r3, #0]
  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {}
 8004326:	46c0      	nop			; (mov r8, r8)
 8004328:	4b0f      	ldr	r3, [pc, #60]	; (8004368 <PWR_ExitStopMode+0x7c>)
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	2380      	movs	r3, #128	; 0x80
 800432e:	049b      	lsls	r3, r3, #18
 8004330:	4013      	ands	r3, r2
 8004332:	d0f9      	beq.n	8004328 <PWR_ExitStopMode+0x3c>

  /* Select PLL as system clock source */
  __HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_PLLCLK);
 8004334:	4b0c      	ldr	r3, [pc, #48]	; (8004368 <PWR_ExitStopMode+0x7c>)
 8004336:	68da      	ldr	r2, [r3, #12]
 8004338:	4b0b      	ldr	r3, [pc, #44]	; (8004368 <PWR_ExitStopMode+0x7c>)
 800433a:	2103      	movs	r1, #3
 800433c:	430a      	orrs	r2, r1
 800433e:	60da      	str	r2, [r3, #12]

  /* Wait till PLL is used as system clock source */
  while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {}
 8004340:	46c0      	nop			; (mov r8, r8)
 8004342:	4b09      	ldr	r3, [pc, #36]	; (8004368 <PWR_ExitStopMode+0x7c>)
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	220c      	movs	r2, #12
 8004348:	4013      	ands	r3, r2
 800434a:	2b0c      	cmp	r3, #12
 800434c:	d1f9      	bne.n	8004342 <PWR_ExitStopMode+0x56>

  /* initializes the peripherals */
  Sx_Board_IoInit();
 800434e:	f001 fc1f 	bl	8005b90 <CMWX1ZZABZ0XX_RADIO_IoInit>
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f383 8810 	msr	PRIMASK, r3
}
 800435c:	46c0      	nop			; (mov r8, r8)

  UTILS_EXIT_CRITICAL_SECTION();
}
 800435e:	46c0      	nop			; (mov r8, r8)
 8004360:	46bd      	mov	sp, r7
 8004362:	b004      	add	sp, #16
 8004364:	bd80      	pop	{r7, pc}
 8004366:	46c0      	nop			; (mov r8, r8)
 8004368:	40021000 	.word	0x40021000

0800436c <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	af00      	add	r7, sp, #0
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8004370:	2101      	movs	r1, #1
 8004372:	2000      	movs	r0, #0
 8004374:	f004 fbae 	bl	8008ad4 <HAL_PWR_EnterSLEEPMode>
}
 8004378:	46c0      	nop			; (mov r8, r8)
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 800437e:	b580      	push	{r7, lr}
 8004380:	af00      	add	r7, sp, #0
}
 8004382:	46c0      	nop			; (mov r8, r8)
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d101      	bne.n	800439a <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e06e      	b.n	8004478 <HAL_LPTIM_Init+0xf0>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	222e      	movs	r2, #46	; 0x2e
 800439e:	5c9b      	ldrb	r3, [r3, r2]
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d107      	bne.n	80043b6 <HAL_LPTIM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	222d      	movs	r2, #45	; 0x2d
 80043aa:	2100      	movs	r1, #0
 80043ac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	0018      	movs	r0, r3
 80043b2:	f7fe fee3 	bl	800317c <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	222e      	movs	r2, #46	; 0x2e
 80043ba:	2102      	movs	r1, #2
 80043bc:	5499      	strb	r1, [r3, r2]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	60fb      	str	r3, [r7, #12]

  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d103      	bne.n	80043d6 <HAL_LPTIM_Init+0x4e>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL));
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2206      	movs	r2, #6
 80043d2:	4393      	bics	r3, r2
 80043d4:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	4a29      	ldr	r2, [pc, #164]	; (8004480 <HAL_LPTIM_Init+0xf8>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d003      	beq.n	80043e8 <HAL_LPTIM_Init+0x60>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRIGSEL));
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	4a28      	ldr	r2, [pc, #160]	; (8004484 <HAL_LPTIM_Init+0xfc>)
 80043e4:	4013      	ands	r3, r2
 80043e6:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d103      	bne.n	80043f8 <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_CKFLT));
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	22d8      	movs	r2, #216	; 0xd8
 80043f4:	4393      	bics	r3, r2
 80043f6:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, CKPOL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	4a23      	ldr	r2, [pc, #140]	; (8004488 <HAL_LPTIM_Init+0x100>)
 80043fc:	4013      	ands	r3, r2
 80043fe:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004408:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 800440e:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8004414:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 800441a:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	4313      	orrs	r3, r2
 8004420:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d107      	bne.n	800443a <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004432:	4313      	orrs	r3, r2
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	4313      	orrs	r3, r2
 8004438:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the active edge or edges used by the counter only if LPTIM is
   * clocked by an external clock source
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	2b01      	cmp	r3, #1
 8004440:	d104      	bne.n	800444c <HAL_LPTIM_Init+0xc4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	4313      	orrs	r3, r2
 800444a:	60fb      	str	r3, [r7, #12]
  }

  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	695b      	ldr	r3, [r3, #20]
 8004450:	4a0b      	ldr	r2, [pc, #44]	; (8004480 <HAL_LPTIM_Init+0xf8>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d007      	beq.n	8004466 <HAL_LPTIM_Init+0xde>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source |
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source |
 800445e:	4313      	orrs	r3, r2
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	4313      	orrs	r3, r2
 8004464:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	60da      	str	r2, [r3, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	222e      	movs	r2, #46	; 0x2e
 8004472:	2101      	movs	r1, #1
 8004474:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	0018      	movs	r0, r3
 800447a:	46bd      	mov	sp, r7
 800447c:	b004      	add	sp, #16
 800447e:	bd80      	pop	{r7, pc}
 8004480:	0000ffff 	.word	0x0000ffff
 8004484:	ffff1fff 	.word	0xffff1fff
 8004488:	ff19f1f8 	.word	0xff19f1f8

0800448c <HAL_LPTIM_Encoder_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Encoder_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
  assert_param(hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC);
  assert_param(hlptim->Init.Clock.Prescaler == LPTIM_PRESCALER_DIV1);
  assert_param(IS_LPTIM_CLOCK_POLARITY(hlptim->Init.UltraLowPowerClock.Polarity));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	222e      	movs	r2, #46	; 0x2e
 800449a:	2102      	movs	r1, #2
 800449c:	5499      	strb	r1, [r3, r2]

  /* Configure edge sensitivity for encoder mode */
  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	60fb      	str	r3, [r7, #12]

  /* Clear CKPOL bits */
  tmpcfgr &= (uint32_t)(~LPTIM_CFGR_CKPOL);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2206      	movs	r2, #6
 80044aa:	4393      	bics	r3, r2
 80044ac:	60fb      	str	r3, [r7, #12]

  /* Set Input polarity */
  tmpcfgr |=  hlptim->Init.UltraLowPowerClock.Polarity;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	60fb      	str	r3, [r7, #12]

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	60da      	str	r2, [r3, #12]

  /* Set ENC bit to enable the encoder interface */
  hlptim->Instance->CFGR |= LPTIM_CFGR_ENC;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68da      	ldr	r2, [r3, #12]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2180      	movs	r1, #128	; 0x80
 80044cc:	0449      	lsls	r1, r1, #17
 80044ce:	430a      	orrs	r2, r1
 80044d0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	691a      	ldr	r2, [r3, #16]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2101      	movs	r1, #1
 80044de:	430a      	orrs	r2, r1
 80044e0:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2210      	movs	r2, #16
 80044e8:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	683a      	ldr	r2, [r7, #0]
 80044f0:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2110      	movs	r1, #16
 80044f6:	0018      	movs	r0, r3
 80044f8:	f000 f922 	bl	8004740 <LPTIM_WaitForFlag>
 80044fc:	0003      	movs	r3, r0
 80044fe:	2b03      	cmp	r3, #3
 8004500:	d101      	bne.n	8004506 <HAL_LPTIM_Encoder_Start_IT+0x7a>
  {
    return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e031      	b.n	800456a <HAL_LPTIM_Encoder_Start_IT+0xde>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	0018      	movs	r0, r3
 800450a:	f000 f951 	bl	80047b0 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	0018      	movs	r0, r3
 8004512:	f000 f908 	bl	8004726 <HAL_LPTIM_GetState>
 8004516:	0003      	movs	r3, r0
 8004518:	2b03      	cmp	r3, #3
 800451a:	d101      	bne.n	8004520 <HAL_LPTIM_Encoder_Start_IT+0x94>
  {
    return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e024      	b.n	800456a <HAL_LPTIM_Encoder_Start_IT+0xde>
  }

  /* Enable "switch to down direction" interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_DOWN);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	689a      	ldr	r2, [r3, #8]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2140      	movs	r1, #64	; 0x40
 800452c:	430a      	orrs	r2, r1
 800452e:	609a      	str	r2, [r3, #8]

  /* Enable "switch to up direction" interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_UP);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	689a      	ldr	r2, [r3, #8]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2120      	movs	r1, #32
 800453c:	430a      	orrs	r2, r1
 800453e:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	691a      	ldr	r2, [r3, #16]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2101      	movs	r1, #1
 800454c:	430a      	orrs	r2, r1
 800454e:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	691a      	ldr	r2, [r3, #16]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2104      	movs	r1, #4
 800455c:	430a      	orrs	r2, r1
 800455e:	611a      	str	r2, [r3, #16]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	222e      	movs	r2, #46	; 0x2e
 8004564:	2101      	movs	r1, #1
 8004566:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	0018      	movs	r0, r3
 800456c:	46bd      	mov	sp, r7
 800456e:	b004      	add	sp, #16
 8004570:	bd80      	pop	{r7, pc}

08004572 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8004572:	b580      	push	{r7, lr}
 8004574:	b082      	sub	sp, #8
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2201      	movs	r2, #1
 8004582:	4013      	ands	r3, r2
 8004584:	2b01      	cmp	r3, #1
 8004586:	d10e      	bne.n	80045a6 <HAL_LPTIM_IRQHandler+0x34>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	2201      	movs	r2, #1
 8004590:	4013      	ands	r3, r2
 8004592:	2b01      	cmp	r3, #1
 8004594:	d107      	bne.n	80045a6 <HAL_LPTIM_IRQHandler+0x34>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2201      	movs	r2, #1
 800459c:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	0018      	movs	r0, r3
 80045a2:	f000 f888 	bl	80046b6 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2202      	movs	r2, #2
 80045ae:	4013      	ands	r3, r2
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d10e      	bne.n	80045d2 <HAL_LPTIM_IRQHandler+0x60>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	2202      	movs	r2, #2
 80045bc:	4013      	ands	r3, r2
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d107      	bne.n	80045d2 <HAL_LPTIM_IRQHandler+0x60>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2202      	movs	r2, #2
 80045c8:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	0018      	movs	r0, r3
 80045ce:	f000 f87a 	bl	80046c6 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2204      	movs	r2, #4
 80045da:	4013      	ands	r3, r2
 80045dc:	2b04      	cmp	r3, #4
 80045de:	d10e      	bne.n	80045fe <HAL_LPTIM_IRQHandler+0x8c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	2204      	movs	r2, #4
 80045e8:	4013      	ands	r3, r2
 80045ea:	2b04      	cmp	r3, #4
 80045ec:	d107      	bne.n	80045fe <HAL_LPTIM_IRQHandler+0x8c>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2204      	movs	r2, #4
 80045f4:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	0018      	movs	r0, r3
 80045fa:	f000 f86c 	bl	80046d6 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2208      	movs	r2, #8
 8004606:	4013      	ands	r3, r2
 8004608:	2b08      	cmp	r3, #8
 800460a:	d10e      	bne.n	800462a <HAL_LPTIM_IRQHandler+0xb8>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	2208      	movs	r2, #8
 8004614:	4013      	ands	r3, r2
 8004616:	2b08      	cmp	r3, #8
 8004618:	d107      	bne.n	800462a <HAL_LPTIM_IRQHandler+0xb8>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2208      	movs	r2, #8
 8004620:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	0018      	movs	r0, r3
 8004626:	f000 f85e 	bl	80046e6 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2210      	movs	r2, #16
 8004632:	4013      	ands	r3, r2
 8004634:	2b10      	cmp	r3, #16
 8004636:	d10e      	bne.n	8004656 <HAL_LPTIM_IRQHandler+0xe4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	2210      	movs	r2, #16
 8004640:	4013      	ands	r3, r2
 8004642:	2b10      	cmp	r3, #16
 8004644:	d107      	bne.n	8004656 <HAL_LPTIM_IRQHandler+0xe4>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2210      	movs	r2, #16
 800464c:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	0018      	movs	r0, r3
 8004652:	f000 f850 	bl	80046f6 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2220      	movs	r2, #32
 800465e:	4013      	ands	r3, r2
 8004660:	2b20      	cmp	r3, #32
 8004662:	d10e      	bne.n	8004682 <HAL_LPTIM_IRQHandler+0x110>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	2220      	movs	r2, #32
 800466c:	4013      	ands	r3, r2
 800466e:	2b20      	cmp	r3, #32
 8004670:	d107      	bne.n	8004682 <HAL_LPTIM_IRQHandler+0x110>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2220      	movs	r2, #32
 8004678:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	0018      	movs	r0, r3
 800467e:	f000 f842 	bl	8004706 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2240      	movs	r2, #64	; 0x40
 800468a:	4013      	ands	r3, r2
 800468c:	2b40      	cmp	r3, #64	; 0x40
 800468e:	d10e      	bne.n	80046ae <HAL_LPTIM_IRQHandler+0x13c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	2240      	movs	r2, #64	; 0x40
 8004698:	4013      	ands	r3, r2
 800469a:	2b40      	cmp	r3, #64	; 0x40
 800469c:	d107      	bne.n	80046ae <HAL_LPTIM_IRQHandler+0x13c>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2240      	movs	r2, #64	; 0x40
 80046a4:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	0018      	movs	r0, r3
 80046aa:	f000 f834 	bl	8004716 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 80046ae:	46c0      	nop			; (mov r8, r8)
 80046b0:	46bd      	mov	sp, r7
 80046b2:	b002      	add	sp, #8
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b082      	sub	sp, #8
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 80046be:	46c0      	nop			; (mov r8, r8)
 80046c0:	46bd      	mov	sp, r7
 80046c2:	b002      	add	sp, #8
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b082      	sub	sp, #8
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 80046ce:	46c0      	nop			; (mov r8, r8)
 80046d0:	46bd      	mov	sp, r7
 80046d2:	b002      	add	sp, #8
 80046d4:	bd80      	pop	{r7, pc}

080046d6 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 80046d6:	b580      	push	{r7, lr}
 80046d8:	b082      	sub	sp, #8
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 80046de:	46c0      	nop			; (mov r8, r8)
 80046e0:	46bd      	mov	sp, r7
 80046e2:	b002      	add	sp, #8
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b082      	sub	sp, #8
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 80046ee:	46c0      	nop			; (mov r8, r8)
 80046f0:	46bd      	mov	sp, r7
 80046f2:	b002      	add	sp, #8
 80046f4:	bd80      	pop	{r7, pc}

080046f6 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80046f6:	b580      	push	{r7, lr}
 80046f8:	b082      	sub	sp, #8
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 80046fe:	46c0      	nop			; (mov r8, r8)
 8004700:	46bd      	mov	sp, r7
 8004702:	b002      	add	sp, #8
 8004704:	bd80      	pop	{r7, pc}

08004706 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004706:	b580      	push	{r7, lr}
 8004708:	b082      	sub	sp, #8
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 800470e:	46c0      	nop			; (mov r8, r8)
 8004710:	46bd      	mov	sp, r7
 8004712:	b002      	add	sp, #8
 8004714:	bd80      	pop	{r7, pc}

08004716 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004716:	b580      	push	{r7, lr}
 8004718:	b082      	sub	sp, #8
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 800471e:	46c0      	nop			; (mov r8, r8)
 8004720:	46bd      	mov	sp, r7
 8004722:	b002      	add	sp, #8
 8004724:	bd80      	pop	{r7, pc}

08004726 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8004726:	b580      	push	{r7, lr}
 8004728:	b082      	sub	sp, #8
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	222e      	movs	r2, #46	; 0x2e
 8004732:	5c9b      	ldrb	r3, [r3, r2]
 8004734:	b2db      	uxtb	r3, r3
}
 8004736:	0018      	movs	r0, r3
 8004738:	46bd      	mov	sp, r7
 800473a:	b002      	add	sp, #8
 800473c:	bd80      	pop	{r7, pc}
	...

08004740 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 800474a:	230f      	movs	r3, #15
 800474c:	18fb      	adds	r3, r7, r3
 800474e:	2200      	movs	r2, #0
 8004750:	701a      	strb	r2, [r3, #0]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8004752:	4b15      	ldr	r3, [pc, #84]	; (80047a8 <LPTIM_WaitForFlag+0x68>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4915      	ldr	r1, [pc, #84]	; (80047ac <LPTIM_WaitForFlag+0x6c>)
 8004758:	0018      	movs	r0, r3
 800475a:	f7fb fcdd 	bl	8000118 <__udivsi3>
 800475e:	0003      	movs	r3, r0
 8004760:	001a      	movs	r2, r3
 8004762:	0013      	movs	r3, r2
 8004764:	015b      	lsls	r3, r3, #5
 8004766:	1a9b      	subs	r3, r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	189b      	adds	r3, r3, r2
 800476c:	00db      	lsls	r3, r3, #3
 800476e:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	3b01      	subs	r3, #1
 8004774:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d103      	bne.n	8004784 <LPTIM_WaitForFlag+0x44>
    {
      result = HAL_TIMEOUT;
 800477c:	230f      	movs	r3, #15
 800477e:	18fb      	adds	r3, r7, r3
 8004780:	2203      	movs	r2, #3
 8004782:	701a      	strb	r2, [r3, #0]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	683a      	ldr	r2, [r7, #0]
 800478c:	4013      	ands	r3, r2
 800478e:	683a      	ldr	r2, [r7, #0]
 8004790:	429a      	cmp	r2, r3
 8004792:	d002      	beq.n	800479a <LPTIM_WaitForFlag+0x5a>
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1ea      	bne.n	8004770 <LPTIM_WaitForFlag+0x30>

  return result;
 800479a:	230f      	movs	r3, #15
 800479c:	18fb      	adds	r3, r7, r3
 800479e:	781b      	ldrb	r3, [r3, #0]
}
 80047a0:	0018      	movs	r0, r3
 80047a2:	46bd      	mov	sp, r7
 80047a4:	b004      	add	sp, #16
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	20000070 	.word	0x20000070
 80047ac:	00004e20 	.word	0x00004e20

080047b0 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b088      	sub	sp, #32
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 80047b8:	2300      	movs	r3, #0
 80047ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80047bc:	b672      	cpsid	i
}
 80047be:	46c0      	nop			; (mov r8, r8)

  __disable_irq();

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	001a      	movs	r2, r3
 80047c6:	4b55      	ldr	r3, [pc, #340]	; (800491c <LPTIM_Disable+0x16c>)
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d106      	bne.n	80047da <LPTIM_Disable+0x2a>
  {
    case LPTIM1_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 80047cc:	4b54      	ldr	r3, [pc, #336]	; (8004920 <LPTIM_Disable+0x170>)
 80047ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047d0:	23c0      	movs	r3, #192	; 0xc0
 80047d2:	031b      	lsls	r3, r3, #12
 80047d4:	4013      	ands	r3, r2
 80047d6:	61fb      	str	r3, [r7, #28]
      break;
 80047d8:	e000      	b.n	80047dc <LPTIM_Disable+0x2c>
    default:
      break;
 80047da:	46c0      	nop			; (mov r8, r8)
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	61bb      	str	r3, [r7, #24]
  tmpCFGR = hlptim->Instance->CFGR;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	617b      	str	r3, [r7, #20]
  tmpCMP = hlptim->Instance->CMP;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	695b      	ldr	r3, [r3, #20]
 80047f2:	613b      	str	r3, [r7, #16]
  tmpARR = hlptim->Instance->ARR;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	60fb      	str	r3, [r7, #12]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	001a      	movs	r2, r3
 8004802:	4b46      	ldr	r3, [pc, #280]	; (800491c <LPTIM_Disable+0x16c>)
 8004804:	429a      	cmp	r2, r3
 8004806:	d10d      	bne.n	8004824 <LPTIM_Disable+0x74>
  {
    case LPTIM1_BASE:
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8004808:	4b45      	ldr	r3, [pc, #276]	; (8004920 <LPTIM_Disable+0x170>)
 800480a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800480c:	4b44      	ldr	r3, [pc, #272]	; (8004920 <LPTIM_Disable+0x170>)
 800480e:	2180      	movs	r1, #128	; 0x80
 8004810:	0609      	lsls	r1, r1, #24
 8004812:	430a      	orrs	r2, r1
 8004814:	629a      	str	r2, [r3, #40]	; 0x28
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8004816:	4b42      	ldr	r3, [pc, #264]	; (8004920 <LPTIM_Disable+0x170>)
 8004818:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800481a:	4b41      	ldr	r3, [pc, #260]	; (8004920 <LPTIM_Disable+0x170>)
 800481c:	0052      	lsls	r2, r2, #1
 800481e:	0852      	lsrs	r2, r2, #1
 8004820:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004822:	e000      	b.n	8004826 <LPTIM_Disable+0x76>
    default:
      break;
 8004824:	46c0      	nop			; (mov r8, r8)
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d102      	bne.n	8004832 <LPTIM_Disable+0x82>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d05b      	beq.n	80048ea <LPTIM_Disable+0x13a>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	001a      	movs	r2, r3
 8004838:	4b38      	ldr	r3, [pc, #224]	; (800491c <LPTIM_Disable+0x16c>)
 800483a:	429a      	cmp	r2, r3
 800483c:	d106      	bne.n	800484c <LPTIM_Disable+0x9c>
    {
      case LPTIM1_BASE:
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 800483e:	4b38      	ldr	r3, [pc, #224]	; (8004920 <LPTIM_Disable+0x170>)
 8004840:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004842:	4b37      	ldr	r3, [pc, #220]	; (8004920 <LPTIM_Disable+0x170>)
 8004844:	4937      	ldr	r1, [pc, #220]	; (8004924 <LPTIM_Disable+0x174>)
 8004846:	400a      	ands	r2, r1
 8004848:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800484a:	e000      	b.n	800484e <LPTIM_Disable+0x9e>
      default:
        break;
 800484c:	46c0      	nop			; (mov r8, r8)
    }

    if (tmpCMP != 0UL)
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d01b      	beq.n	800488c <LPTIM_Disable+0xdc>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	691a      	ldr	r2, [r3, #16]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2101      	movs	r1, #1
 8004860:	430a      	orrs	r2, r1
 8004862:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	693a      	ldr	r2, [r7, #16]
 800486a:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2108      	movs	r1, #8
 8004870:	0018      	movs	r0, r3
 8004872:	f7ff ff65 	bl	8004740 <LPTIM_WaitForFlag>
 8004876:	0003      	movs	r3, r0
 8004878:	2b03      	cmp	r3, #3
 800487a:	d103      	bne.n	8004884 <LPTIM_Disable+0xd4>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	222e      	movs	r2, #46	; 0x2e
 8004880:	2103      	movs	r1, #3
 8004882:	5499      	strb	r1, [r3, r2]
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2208      	movs	r2, #8
 800488a:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d01b      	beq.n	80048ca <LPTIM_Disable+0x11a>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	691a      	ldr	r2, [r3, #16]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2101      	movs	r1, #1
 800489e:	430a      	orrs	r2, r1
 80048a0:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2110      	movs	r1, #16
 80048ae:	0018      	movs	r0, r3
 80048b0:	f7ff ff46 	bl	8004740 <LPTIM_WaitForFlag>
 80048b4:	0003      	movs	r3, r0
 80048b6:	2b03      	cmp	r3, #3
 80048b8:	d103      	bne.n	80048c2 <LPTIM_Disable+0x112>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	222e      	movs	r2, #46	; 0x2e
 80048be:	2103      	movs	r1, #3
 80048c0:	5499      	strb	r1, [r3, r2]
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2210      	movs	r2, #16
 80048c8:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	001a      	movs	r2, r3
 80048d0:	4b12      	ldr	r3, [pc, #72]	; (800491c <LPTIM_Disable+0x16c>)
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d10b      	bne.n	80048ee <LPTIM_Disable+0x13e>
    {
      case LPTIM1_BASE:
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 80048d6:	4b12      	ldr	r3, [pc, #72]	; (8004920 <LPTIM_Disable+0x170>)
 80048d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048da:	4a12      	ldr	r2, [pc, #72]	; (8004924 <LPTIM_Disable+0x174>)
 80048dc:	4013      	ands	r3, r2
 80048de:	0019      	movs	r1, r3
 80048e0:	4b0f      	ldr	r3, [pc, #60]	; (8004920 <LPTIM_Disable+0x170>)
 80048e2:	69fa      	ldr	r2, [r7, #28]
 80048e4:	430a      	orrs	r2, r1
 80048e6:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80048e8:	e002      	b.n	80048f0 <LPTIM_Disable+0x140>
      default:
        break;
    }
  }
 80048ea:	46c0      	nop			; (mov r8, r8)
 80048ec:	e000      	b.n	80048f0 <LPTIM_Disable+0x140>
        break;
 80048ee:	46c0      	nop			; (mov r8, r8)

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	691a      	ldr	r2, [r3, #16]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2101      	movs	r1, #1
 80048fc:	438a      	bics	r2, r1
 80048fe:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	69ba      	ldr	r2, [r7, #24]
 8004906:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	697a      	ldr	r2, [r7, #20]
 800490e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8004910:	b662      	cpsie	i
}
 8004912:	46c0      	nop			; (mov r8, r8)

  __enable_irq();
}
 8004914:	46c0      	nop			; (mov r8, r8)
 8004916:	46bd      	mov	sp, r7
 8004918:	b008      	add	sp, #32
 800491a:	bd80      	pop	{r7, pc}
 800491c:	40007c00 	.word	0x40007c00
 8004920:	40021000 	.word	0x40021000
 8004924:	fff3ffff 	.word	0xfff3ffff

08004928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800492c:	4b0d      	ldr	r3, [pc, #52]	; (8004964 <HAL_MspInit+0x3c>)
 800492e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004930:	4b0c      	ldr	r3, [pc, #48]	; (8004964 <HAL_MspInit+0x3c>)
 8004932:	2180      	movs	r1, #128	; 0x80
 8004934:	0549      	lsls	r1, r1, #21
 8004936:	430a      	orrs	r2, r1
 8004938:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable the Power Voltage Detector */
  HAL_PWR_DisablePVD();
 800493a:	f004 f8bd 	bl	8008ab8 <HAL_PWR_DisablePVD>

  /* Enables the Ultra Low Power mode */
  HAL_PWREx_EnableUltraLowPower();
 800493e:	f004 f98b 	bl	8008c58 <HAL_PWREx_EnableUltraLowPower>

  __HAL_FLASH_SLEEP_POWERDOWN_ENABLE();
 8004942:	4b09      	ldr	r3, [pc, #36]	; (8004968 <HAL_MspInit+0x40>)
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	4b08      	ldr	r3, [pc, #32]	; (8004968 <HAL_MspInit+0x40>)
 8004948:	2108      	movs	r1, #8
 800494a:	430a      	orrs	r2, r1
 800494c:	601a      	str	r2, [r3, #0]

  /*In debug mode, e.g. when DBGMCU is activated, Arm core has always clocks
   * And will not wait that the FLACH is ready to be read. It can miss in this
   * case the first instruction. To overcome this issue, the flash remain clcoked during sleep mode
   */
  DBG(__HAL_FLASH_SLEEP_POWERDOWN_DISABLE(););
 800494e:	4b06      	ldr	r3, [pc, #24]	; (8004968 <HAL_MspInit+0x40>)
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	4b05      	ldr	r3, [pc, #20]	; (8004968 <HAL_MspInit+0x40>)
 8004954:	2108      	movs	r1, #8
 8004956:	438a      	bics	r2, r1
 8004958:	601a      	str	r2, [r3, #0]

#ifdef ENABLE_FAST_WAKEUP
  /*Enable fast wakeUp*/
  HAL_PWREx_EnableFastWakeUp();
 800495a:	f004 f96f 	bl	8008c3c <HAL_PWREx_EnableFastWakeUp>
#endif

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800495e:	46c0      	nop			; (mov r8, r8)
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	40021000 	.word	0x40021000
 8004968:	40022000 	.word	0x40022000

0800496c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004970:	46c0      	nop			; (mov r8, r8)
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004976:	b580      	push	{r7, lr}
 8004978:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    __NOP();
 800497a:	46c0      	nop			; (mov r8, r8)
 800497c:	e7fd      	b.n	800497a <HardFault_Handler+0x4>

0800497e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800497e:	b580      	push	{r7, lr}
 8004980:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004982:	46c0      	nop			; (mov r8, r8)
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800498c:	46c0      	nop			; (mov r8, r8)
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}

08004992 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004992:	b580      	push	{r7, lr}
 8004994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004996:	f001 fc71 	bl	800627c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800499a:	46c0      	nop			; (mov r8, r8)
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <EXTI0_1_IRQHandler>:
/*void PPP_IRQHandler(void)
{
}*/

void EXTI0_1_IRQHandler(void)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	af00      	add	r7, sp, #0
#if (defined(CMWX1ZZABZ0XX))
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 80049a4:	4b05      	ldr	r3, [pc, #20]	; (80049bc <EXTI0_1_IRQHandler+0x1c>)
 80049a6:	0018      	movs	r0, r3
 80049a8:	f002 fdfc 	bl	80075a4 <HAL_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_1);
 80049ac:	4b04      	ldr	r3, [pc, #16]	; (80049c0 <EXTI0_1_IRQHandler+0x20>)
 80049ae:	0018      	movs	r0, r3
 80049b0:	f002 fdf8 	bl	80075a4 <HAL_EXTI_IRQHandler>
#endif
}
 80049b4:	46c0      	nop			; (mov r8, r8)
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	46c0      	nop			; (mov r8, r8)
 80049bc:	20001704 	.word	0x20001704
 80049c0:	200016fc 	.word	0x200016fc

080049c4 <EXTI2_3_IRQHandler>:

void EXTI2_3_IRQHandler(void)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	af00      	add	r7, sp, #0
#if (defined(SX1276MB1MAS) | defined(SX1276MB1LAS) | defined(SX1272MB2DAS))
  HAL_EXTI_IRQHandler(&H_EXTI_3);
#endif
}
 80049c8:	46c0      	nop			; (mov r8, r8)
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
	...

080049d0 <EXTI4_15_IRQHandler>:

void EXTI4_15_IRQHandler(void)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	af00      	add	r7, sp, #0
  HAL_EXTI_IRQHandler(&H_EXTI_4);
 80049d4:	4b05      	ldr	r3, [pc, #20]	; (80049ec <EXTI4_15_IRQHandler+0x1c>)
 80049d6:	0018      	movs	r0, r3
 80049d8:	f002 fde4 	bl	80075a4 <HAL_EXTI_IRQHandler>
#if (defined(SX1276MB1MAS) | defined(SX1276MB1LAS) | defined(SX1272MB2DAS))
  HAL_EXTI_IRQHandler(&H_EXTI_10);
#endif

#if (defined(CMWX1ZZABZ0XX))
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 80049dc:	4b04      	ldr	r3, [pc, #16]	; (80049f0 <EXTI4_15_IRQHandler+0x20>)
 80049de:	0018      	movs	r0, r3
 80049e0:	f002 fde0 	bl	80075a4 <HAL_EXTI_IRQHandler>
#endif
}
 80049e4:	46c0      	nop			; (mov r8, r8)
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	46c0      	nop			; (mov r8, r8)
 80049ec:	200016f4 	.word	0x200016f4
 80049f0:	2000170c 	.word	0x2000170c

080049f4 <DMA1_Channel4_5_6_7_IRQHandler>:

void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(husart2.hdmatx);
 80049f8:	4b03      	ldr	r3, [pc, #12]	; (8004a08 <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 80049fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049fc:	0018      	movs	r0, r3
 80049fe:	f002 fcc2 	bl	8007386 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8004a02:	46c0      	nop			; (mov r8, r8)
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	2000166c 	.word	0x2000166c

08004a0c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&husart2);
 8004a10:	4b03      	ldr	r3, [pc, #12]	; (8004a20 <USART2_IRQHandler+0x14>)
 8004a12:	0018      	movs	r0, r3
 8004a14:	f006 fae2 	bl	800afdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004a18:	46c0      	nop			; (mov r8, r8)
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	46c0      	nop			; (mov r8, r8)
 8004a20:	2000166c 	.word	0x2000166c

08004a24 <LPTIM1_IRQHandler>:
/**
  * @brief This function handles LPTIM1 global interrupt / LPTIM1 wake-up interrupt through EXTI line 29.
  */
void LPTIM1_IRQHandler(void)// New
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8004a28:	4b03      	ldr	r3, [pc, #12]	; (8004a38 <LPTIM1_IRQHandler+0x14>)
 8004a2a:	0018      	movs	r0, r3
 8004a2c:	f7ff fda1 	bl	8004572 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8004a30:	46c0      	nop			; (mov r8, r8)
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	46c0      	nop			; (mov r8, r8)
 8004a38:	20001474 	.word	0x20001474

08004a3c <RTC_IRQHandler>:
/*}*/



void RTC_IRQHandler(void)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc); // тоже поднимает из сна sx1276 и плату
 8004a40:	4b03      	ldr	r3, [pc, #12]	; (8004a50 <RTC_IRQHandler+0x14>)
 8004a42:	0018      	movs	r0, r3
 8004a44:	f005 fd0a 	bl	800a45c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8004a48:	46c0      	nop			; (mov r8, r8)
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	46c0      	nop			; (mov r8, r8)
 8004a50:	200014a4 	.word	0x200014a4

08004a54 <SystemApp_Init>:
  * @brief initialises the system (dbg pins, trace, mbmux, systiemr, LPM, ...)
  * @param none
  * @retval  none
  */
void SystemApp_Init(void)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /*Initialises timer and RTC*/
  UTIL_TIMER_Init();
 8004a58:	f018 f846 	bl	801cae8 <UTIL_TIMER_Init>

  Gpio_PreInit();
 8004a5c:	f000 f8f6 	bl	8004c4c <Gpio_PreInit>

  /* Configure the debug mode*/
  DBG_Init();
 8004a60:	f000 f9c2 	bl	8004de8 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8004a64:	f017 f99c 	bl	801bda0 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8004a68:	4b0b      	ldr	r3, [pc, #44]	; (8004a98 <SystemApp_Init+0x44>)
 8004a6a:	0018      	movs	r0, r3
 8004a6c:	f017 fa50 	bl	801bf10 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8004a70:	2002      	movs	r0, #2
 8004a72:	f017 fa5b 	bl	801bf2c <UTIL_ADV_TRACE_SetVerboseLevel>
  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8004a76:	f7fe fcb3 	bl	80033e0 <SYS_InitMeasurement>

  Sx_Board_Bus_Init();
 8004a7a:	f001 fabd 	bl	8005ff8 <CMWX1ZZABZ0XX_RADIO_Bus_Init>

  Sx_Board_IoInit();
 8004a7e:	f001 f887 	bl	8005b90 <CMWX1ZZABZ0XX_RADIO_IoInit>

  /*Initialize the Sensors */
  EnvSensors_Init(); //  dell
 8004a82:	f000 fa55 	bl	8004f30 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8004a86:	f017 fc53 	bl	801c330 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8004a8a:	2101      	movs	r1, #1
 8004a8c:	2001      	movs	r0, #1
 8004a8e:	f017 fc8f 	bl	801c3b0 <UTIL_LPM_SetOffMode>
#error LOW_POWER_DISABLE not defined
#endif /* LOW_POWER_DISABLE */
  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8004a92:	46c0      	nop			; (mov r8, r8)
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	08004c01 	.word	0x08004c01

08004a9c <UTIL_SEQ_Idle>:
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  * @param none
  * @retval  none
  */
void UTIL_SEQ_Idle(void)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8004aa0:	f017 fce8 	bl	801c474 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8004aa4:	46c0      	nop			; (mov r8, r8)
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
	...

08004aac <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8004aac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004aae:	b085      	sub	sp, #20
 8004ab0:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 8004ab2:	250f      	movs	r5, #15
 8004ab4:	197b      	adds	r3, r7, r5
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8004aba:	260c      	movs	r6, #12
 8004abc:	19bc      	adds	r4, r7, r6
 8004abe:	f7fe fce3 	bl	8003488 <SYS_GetBatteryLevel>
 8004ac2:	0003      	movs	r3, r0
 8004ac4:	8023      	strh	r3, [r4, #0]

  /* Convert batterey level from mV to linea scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8004ac6:	19bb      	adds	r3, r7, r6
 8004ac8:	881b      	ldrh	r3, [r3, #0]
 8004aca:	4a18      	ldr	r2, [pc, #96]	; (8004b2c <GetBatteryLevel+0x80>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d903      	bls.n	8004ad8 <GetBatteryLevel+0x2c>
  {
//    batteryLevel = LORAWAN_MAX_BAT;
	  batteryLevel = 100;
 8004ad0:	197b      	adds	r3, r7, r5
 8004ad2:	2264      	movs	r2, #100	; 0x64
 8004ad4:	701a      	strb	r2, [r3, #0]
 8004ad6:	e021      	b.n	8004b1c <GetBatteryLevel+0x70>
  }
  else if (batteryLevelmV < VDD_MIN)
 8004ad8:	230c      	movs	r3, #12
 8004ada:	18fb      	adds	r3, r7, r3
 8004adc:	881a      	ldrh	r2, [r3, #0]
 8004ade:	23e1      	movs	r3, #225	; 0xe1
 8004ae0:	00db      	lsls	r3, r3, #3
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d204      	bcs.n	8004af0 <GetBatteryLevel+0x44>
  {
    batteryLevel = 0;
 8004ae6:	230f      	movs	r3, #15
 8004ae8:	18fb      	adds	r3, r7, r3
 8004aea:	2200      	movs	r2, #0
 8004aec:	701a      	strb	r2, [r3, #0]
 8004aee:	e015      	b.n	8004b1c <GetBatteryLevel+0x70>
  }
  else
  {
//    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
    uint32_t batteryRange = VDD_BAT - VDD_MIN;
 8004af0:	2396      	movs	r3, #150	; 0x96
 8004af2:	00db      	lsls	r3, r3, #3
 8004af4:	60bb      	str	r3, [r7, #8]
    uint32_t batteryRemaining = batteryLevelmV - VDD_MIN;
 8004af6:	230c      	movs	r3, #12
 8004af8:	18fb      	adds	r3, r7, r3
 8004afa:	881b      	ldrh	r3, [r3, #0]
 8004afc:	4a0c      	ldr	r2, [pc, #48]	; (8004b30 <GetBatteryLevel+0x84>)
 8004afe:	4694      	mov	ip, r2
 8004b00:	4463      	add	r3, ip
 8004b02:	607b      	str	r3, [r7, #4]
    batteryLevel = (batteryRemaining * 100) / batteryRange;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2264      	movs	r2, #100	; 0x64
 8004b08:	4353      	muls	r3, r2
 8004b0a:	68b9      	ldr	r1, [r7, #8]
 8004b0c:	0018      	movs	r0, r3
 8004b0e:	f7fb fb03 	bl	8000118 <__udivsi3>
 8004b12:	0003      	movs	r3, r0
 8004b14:	001a      	movs	r2, r3
 8004b16:	230f      	movs	r3, #15
 8004b18:	18fb      	adds	r3, r7, r3
 8004b1a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8004b1c:	230f      	movs	r3, #15
 8004b1e:	18fb      	adds	r3, r7, r3
 8004b20:	781b      	ldrb	r3, [r3, #0]
}
 8004b22:	0018      	movs	r0, r3
 8004b24:	46bd      	mov	sp, r7
 8004b26:	b005      	add	sp, #20
 8004b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b2a:	46c0      	nop			; (mov r8, r8)
 8004b2c:	00000bb8 	.word	0x00000bb8
 8004b30:	fffff8f8 	.word	0xfffff8f8

08004b34 <GetTemperatureLevel>:

uint16_t GetTemperatureLevel(void)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b082      	sub	sp, #8
 8004b38:	af00      	add	r7, sp, #0
  uint16_t temperatureLevel = 0;
 8004b3a:	1dbb      	adds	r3, r7, #6
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	801a      	strh	r2, [r3, #0]

  temperatureLevel = (uint16_t)(SYS_GetTemperatureLevel() / 256);
 8004b40:	f7fe fc5a 	bl	80033f8 <SYS_GetTemperatureLevel>
 8004b44:	1e03      	subs	r3, r0, #0
 8004b46:	da00      	bge.n	8004b4a <GetTemperatureLevel+0x16>
 8004b48:	33ff      	adds	r3, #255	; 0xff
 8004b4a:	121b      	asrs	r3, r3, #8
 8004b4c:	b21a      	sxth	r2, r3
 8004b4e:	1dbb      	adds	r3, r7, #6
 8004b50:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8004b52:	1dbb      	adds	r3, r7, #6
 8004b54:	881b      	ldrh	r3, [r3, #0]
}
 8004b56:	0018      	movs	r0, r3
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	b002      	add	sp, #8
 8004b5c:	bd80      	pop	{r7, pc}

08004b5e <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8004b5e:	b590      	push	{r4, r7, lr}
 8004b60:	b085      	sub	sp, #20
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8004b66:	f001 fb9b 	bl	80062a0 <HAL_GetUIDw0>
 8004b6a:	0004      	movs	r4, r0
 8004b6c:	f001 fbac 	bl	80062c8 <HAL_GetUIDw2>
 8004b70:	0003      	movs	r3, r0
 8004b72:	18e3      	adds	r3, r4, r3
 8004b74:	60fb      	str	r3, [r7, #12]
  uint32_t ID_2_val = HAL_GetUIDw1();
 8004b76:	f001 fb9d 	bl	80062b4 <HAL_GetUIDw1>
 8004b7a:	0003      	movs	r3, r0
 8004b7c:	60bb      	str	r3, [r7, #8]

  id[7] = (ID_1_3_val) >> 24;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	0e1a      	lsrs	r2, r3, #24
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	3307      	adds	r3, #7
 8004b86:	b2d2      	uxtb	r2, r2
 8004b88:	701a      	strb	r2, [r3, #0]
  id[6] = (ID_1_3_val) >> 16;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	0c1a      	lsrs	r2, r3, #16
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	3306      	adds	r3, #6
 8004b92:	b2d2      	uxtb	r2, r2
 8004b94:	701a      	strb	r2, [r3, #0]
  id[5] = (ID_1_3_val) >> 8;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	0a1a      	lsrs	r2, r3, #8
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	3305      	adds	r3, #5
 8004b9e:	b2d2      	uxtb	r2, r2
 8004ba0:	701a      	strb	r2, [r3, #0]
  id[4] = (ID_1_3_val);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	3304      	adds	r3, #4
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	b2d2      	uxtb	r2, r2
 8004baa:	701a      	strb	r2, [r3, #0]
  id[3] = (ID_2_val) >> 24;
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	0e1a      	lsrs	r2, r3, #24
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	3303      	adds	r3, #3
 8004bb4:	b2d2      	uxtb	r2, r2
 8004bb6:	701a      	strb	r2, [r3, #0]
  id[2] = (ID_2_val) >> 16;
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	0c1a      	lsrs	r2, r3, #16
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	3302      	adds	r3, #2
 8004bc0:	b2d2      	uxtb	r2, r2
 8004bc2:	701a      	strb	r2, [r3, #0]
  id[1] = (ID_2_val) >> 8;
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	0a1a      	lsrs	r2, r3, #8
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	3301      	adds	r3, #1
 8004bcc:	b2d2      	uxtb	r2, r2
 8004bce:	701a      	strb	r2, [r3, #0]
  id[0] = (ID_2_val);
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	b2da      	uxtb	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8004bd8:	46c0      	nop			; (mov r8, r8)
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	b005      	add	sp, #20
 8004bde:	bd90      	pop	{r4, r7, pc}

08004be0 <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 8004be0:	b5b0      	push	{r4, r5, r7, lr}
 8004be2:	af00      	add	r7, sp, #0
  return ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8004be4:	f001 fb5c 	bl	80062a0 <HAL_GetUIDw0>
 8004be8:	0004      	movs	r4, r0
 8004bea:	f001 fb63 	bl	80062b4 <HAL_GetUIDw1>
 8004bee:	0003      	movs	r3, r0
 8004bf0:	405c      	eors	r4, r3
 8004bf2:	f001 fb69 	bl	80062c8 <HAL_GetUIDw2>
 8004bf6:	0003      	movs	r3, r0
 8004bf8:	4063      	eors	r3, r4
}
 8004bfa:	0018      	movs	r0, r3
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bdb0      	pop	{r4, r5, r7, pc}

08004c00 <TimestampNow>:

/* USER CODE END ExF */

/* Private functions ---------------------------------------------------------*/
static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8004c00:	b590      	push	{r4, r7, lr}
 8004c02:	b087      	sub	sp, #28
 8004c04:	af02      	add	r7, sp, #8
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8004c0a:	2408      	movs	r4, #8
 8004c0c:	193b      	adds	r3, r7, r4
 8004c0e:	0018      	movs	r0, r3
 8004c10:	f017 ff08 	bl	801ca24 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8004c14:	0022      	movs	r2, r4
 8004c16:	18bb      	adds	r3, r7, r2
 8004c18:	6819      	ldr	r1, [r3, #0]
 8004c1a:	18bb      	adds	r3, r7, r2
 8004c1c:	2204      	movs	r2, #4
 8004c1e:	5e9b      	ldrsh	r3, [r3, r2]
 8004c20:	4a09      	ldr	r2, [pc, #36]	; (8004c48 <TimestampNow+0x48>)
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	9300      	str	r3, [sp, #0]
 8004c26:	000b      	movs	r3, r1
 8004c28:	2110      	movs	r1, #16
 8004c2a:	f000 f8a9 	bl	8004d80 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	0018      	movs	r0, r3
 8004c32:	f7fb fa69 	bl	8000108 <strlen>
 8004c36:	0003      	movs	r3, r0
 8004c38:	b29a      	uxth	r2, r3
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8004c3e:	46c0      	nop			; (mov r8, r8)
 8004c40:	46bd      	mov	sp, r7
 8004c42:	b005      	add	sp, #20
 8004c44:	bd90      	pop	{r4, r7, pc}
 8004c46:	46c0      	nop			; (mov r8, r8)
 8004c48:	0801f118 	.word	0x0801f118

08004c4c <Gpio_PreInit>:

static void Gpio_PreInit(void)
{
 8004c4c:	b590      	push	{r4, r7, lr}
 8004c4e:	b08b      	sub	sp, #44	; 0x2c
 8004c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Gpio_PreInit_1 */

  /* USER CODE END Gpio_PreInit_1 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c52:	2414      	movs	r4, #20
 8004c54:	193b      	adds	r3, r7, r4
 8004c56:	0018      	movs	r0, r3
 8004c58:	2314      	movs	r3, #20
 8004c5a:	001a      	movs	r2, r3
 8004c5c:	2100      	movs	r1, #0
 8004c5e:	f019 f95c 	bl	801df1a <memset>
  /* Configure all IOs in analog input              */
  /* Except PA143 and PA14 (SWCLK and SWD) for debug*/
  /* PA13 and PA14 are configured in debug_init     */
  /* Configure all GPIO as analog to reduce current consumption on non used IOs */
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c62:	4b38      	ldr	r3, [pc, #224]	; (8004d44 <Gpio_PreInit+0xf8>)
 8004c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c66:	4b37      	ldr	r3, [pc, #220]	; (8004d44 <Gpio_PreInit+0xf8>)
 8004c68:	2101      	movs	r1, #1
 8004c6a:	430a      	orrs	r2, r1
 8004c6c:	62da      	str	r2, [r3, #44]	; 0x2c
 8004c6e:	4b35      	ldr	r3, [pc, #212]	; (8004d44 <Gpio_PreInit+0xf8>)
 8004c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c72:	2201      	movs	r2, #1
 8004c74:	4013      	ands	r3, r2
 8004c76:	613b      	str	r3, [r7, #16]
 8004c78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c7a:	4b32      	ldr	r3, [pc, #200]	; (8004d44 <Gpio_PreInit+0xf8>)
 8004c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c7e:	4b31      	ldr	r3, [pc, #196]	; (8004d44 <Gpio_PreInit+0xf8>)
 8004c80:	2102      	movs	r1, #2
 8004c82:	430a      	orrs	r2, r1
 8004c84:	62da      	str	r2, [r3, #44]	; 0x2c
 8004c86:	4b2f      	ldr	r3, [pc, #188]	; (8004d44 <Gpio_PreInit+0xf8>)
 8004c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8a:	2202      	movs	r2, #2
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	60fb      	str	r3, [r7, #12]
 8004c90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c92:	4b2c      	ldr	r3, [pc, #176]	; (8004d44 <Gpio_PreInit+0xf8>)
 8004c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c96:	4b2b      	ldr	r3, [pc, #172]	; (8004d44 <Gpio_PreInit+0xf8>)
 8004c98:	2104      	movs	r1, #4
 8004c9a:	430a      	orrs	r2, r1
 8004c9c:	62da      	str	r2, [r3, #44]	; 0x2c
 8004c9e:	4b29      	ldr	r3, [pc, #164]	; (8004d44 <Gpio_PreInit+0xf8>)
 8004ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca2:	2204      	movs	r2, #4
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	60bb      	str	r3, [r7, #8]
 8004ca8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004caa:	4b26      	ldr	r3, [pc, #152]	; (8004d44 <Gpio_PreInit+0xf8>)
 8004cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cae:	4b25      	ldr	r3, [pc, #148]	; (8004d44 <Gpio_PreInit+0xf8>)
 8004cb0:	2180      	movs	r1, #128	; 0x80
 8004cb2:	430a      	orrs	r2, r1
 8004cb4:	62da      	str	r2, [r3, #44]	; 0x2c
 8004cb6:	4b23      	ldr	r3, [pc, #140]	; (8004d44 <Gpio_PreInit+0xf8>)
 8004cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cba:	2280      	movs	r2, #128	; 0x80
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	607b      	str	r3, [r7, #4]
 8004cc0:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004cc2:	193b      	adds	r3, r7, r4
 8004cc4:	2203      	movs	r2, #3
 8004cc6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cc8:	193b      	adds	r3, r7, r4
 8004cca:	2200      	movs	r2, #0
 8004ccc:	609a      	str	r2, [r3, #8]
  /* All GPIOs except debug pins (SWCLK and SWD) */
  GPIO_InitStruct.Pin = GPIO_PIN_All & (~(GPIO_PIN_13 | GPIO_PIN_14));
 8004cce:	193b      	adds	r3, r7, r4
 8004cd0:	4a1d      	ldr	r2, [pc, #116]	; (8004d48 <Gpio_PreInit+0xfc>)
 8004cd2:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cd4:	193a      	adds	r2, r7, r4
 8004cd6:	23a0      	movs	r3, #160	; 0xa0
 8004cd8:	05db      	lsls	r3, r3, #23
 8004cda:	0011      	movs	r1, r2
 8004cdc:	0018      	movs	r0, r3
 8004cde:	f002 fe53 	bl	8007988 <HAL_GPIO_Init>

  /* All GPIOs */
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 8004ce2:	193b      	adds	r3, r7, r4
 8004ce4:	4a19      	ldr	r2, [pc, #100]	; (8004d4c <Gpio_PreInit+0x100>)
 8004ce6:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ce8:	193b      	adds	r3, r7, r4
 8004cea:	4a19      	ldr	r2, [pc, #100]	; (8004d50 <Gpio_PreInit+0x104>)
 8004cec:	0019      	movs	r1, r3
 8004cee:	0010      	movs	r0, r2
 8004cf0:	f002 fe4a 	bl	8007988 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004cf4:	193b      	adds	r3, r7, r4
 8004cf6:	4a17      	ldr	r2, [pc, #92]	; (8004d54 <Gpio_PreInit+0x108>)
 8004cf8:	0019      	movs	r1, r3
 8004cfa:	0010      	movs	r0, r2
 8004cfc:	f002 fe44 	bl	8007988 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004d00:	193b      	adds	r3, r7, r4
 8004d02:	4a15      	ldr	r2, [pc, #84]	; (8004d58 <Gpio_PreInit+0x10c>)
 8004d04:	0019      	movs	r1, r3
 8004d06:	0010      	movs	r0, r2
 8004d08:	f002 fe3e 	bl	8007988 <HAL_GPIO_Init>

  /* Disable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_DISABLE();
 8004d0c:	4b0d      	ldr	r3, [pc, #52]	; (8004d44 <Gpio_PreInit+0xf8>)
 8004d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d10:	4b0c      	ldr	r3, [pc, #48]	; (8004d44 <Gpio_PreInit+0xf8>)
 8004d12:	2101      	movs	r1, #1
 8004d14:	438a      	bics	r2, r1
 8004d16:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_DISABLE();
 8004d18:	4b0a      	ldr	r3, [pc, #40]	; (8004d44 <Gpio_PreInit+0xf8>)
 8004d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d1c:	4b09      	ldr	r3, [pc, #36]	; (8004d44 <Gpio_PreInit+0xf8>)
 8004d1e:	2102      	movs	r1, #2
 8004d20:	438a      	bics	r2, r1
 8004d22:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_DISABLE();
 8004d24:	4b07      	ldr	r3, [pc, #28]	; (8004d44 <Gpio_PreInit+0xf8>)
 8004d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d28:	4b06      	ldr	r3, [pc, #24]	; (8004d44 <Gpio_PreInit+0xf8>)
 8004d2a:	2104      	movs	r1, #4
 8004d2c:	438a      	bics	r2, r1
 8004d2e:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_DISABLE();
 8004d30:	4b04      	ldr	r3, [pc, #16]	; (8004d44 <Gpio_PreInit+0xf8>)
 8004d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d34:	4b03      	ldr	r3, [pc, #12]	; (8004d44 <Gpio_PreInit+0xf8>)
 8004d36:	2180      	movs	r1, #128	; 0x80
 8004d38:	438a      	bics	r2, r1
 8004d3a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* USER CODE BEGIN Gpio_PreInit_2 */

  /* USER CODE END Gpio_PreInit_2 */
}
 8004d3c:	46c0      	nop			; (mov r8, r8)
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	b00b      	add	sp, #44	; 0x2c
 8004d42:	bd90      	pop	{r4, r7, pc}
 8004d44:	40021000 	.word	0x40021000
 8004d48:	00009fff 	.word	0x00009fff
 8004d4c:	0000ffff 	.word	0x0000ffff
 8004d50:	50000400 	.word	0x50000400
 8004d54:	50000800 	.word	0x50000800
 8004d58:	50001c00 	.word	0x50001c00

08004d5c <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8004d60:	2101      	movs	r1, #1
 8004d62:	2004      	movs	r0, #4
 8004d64:	f017 faf4 	bl	801c350 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8004d68:	46c0      	nop			; (mov r8, r8)
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8004d72:	2100      	movs	r1, #0
 8004d74:	2004      	movs	r0, #4
 8004d76:	f017 faeb 	bl	801c350 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8004d7a:	46c0      	nop			; (mov r8, r8)
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8004d80:	b40c      	push	{r2, r3}
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b084      	sub	sp, #16
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
 8004d8a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8004d8c:	231c      	movs	r3, #28
 8004d8e:	18fb      	adds	r3, r7, r3
 8004d90:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8004d92:	6839      	ldr	r1, [r7, #0]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	69ba      	ldr	r2, [r7, #24]
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f018 fa6f 	bl	801d27c <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8004d9e:	46c0      	nop			; (mov r8, r8)
 8004da0:	46bd      	mov	sp, r7
 8004da2:	b004      	add	sp, #16
 8004da4:	bc80      	pop	{r7}
 8004da6:	bc08      	pop	{r3}
 8004da8:	b002      	add	sp, #8
 8004daa:	4718      	bx	r3

08004dac <HAL_InitTick>:
  * @brief  don't enable systick
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8004db6:	0018      	movs	r0, r3
 8004db8:	46bd      	mov	sp, r7
 8004dba:	b002      	add	sp, #8
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <HAL_GetTick>:
  * @brief Provide a tick value in millisecond measured using RTC
  * @note This function overwrites the __weak one from HAL
  * @retval tick value
  */
uint32_t HAL_GetTick(void)
{
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return RTC_IF_GetTimerValue();
 8004dc2:	f7fe ff61 	bl	8003c88 <RTC_IF_GetTimerValue>
 8004dc6:	0003      	movs	r3, r0
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 8004dc8:	0018      	movs	r0, r3
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}

08004dce <HAL_Delay>:
  * @brief This function provides delay (in ms)
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8004dce:	b580      	push	{r7, lr}
 8004dd0:	b082      	sub	sp, #8
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  RTC_IF_DelayMs(Delay);   /* based on RTC */
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	0018      	movs	r0, r3
 8004dda:	f7fe ffc3 	bl	8003d64 <RTC_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8004dde:	46c0      	nop			; (mov r8, r8)
 8004de0:	46bd      	mov	sp, r7
 8004de2:	b002      	add	sp, #8
 8004de4:	bd80      	pop	{r7, pc}
	...

08004de8 <DBG_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void DBG_Init(void)
{
 8004de8:	b590      	push	{r4, r7, lr}
 8004dea:	b08b      	sub	sp, #44	; 0x2c
 8004dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DBG_Init_1 */

  /* USER CODE END DBG_Init_1 */
#if defined (DEBUGGER_ON) && ( DEBUGGER_ON == 1 )
  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8004dee:	2414      	movs	r4, #20
 8004df0:	193b      	adds	r3, r7, r4
 8004df2:	0018      	movs	r0, r3
 8004df4:	2314      	movs	r3, #20
 8004df6:	001a      	movs	r2, r3
 8004df8:	2100      	movs	r1, #0
 8004dfa:	f019 f88e 	bl	801df1a <memset>

  /* Enable the GPIO Clock */
  DGB_LINE1_CLK_ENABLE();
 8004dfe:	4b4a      	ldr	r3, [pc, #296]	; (8004f28 <DBG_Init+0x140>)
 8004e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e02:	4b49      	ldr	r3, [pc, #292]	; (8004f28 <DBG_Init+0x140>)
 8004e04:	2102      	movs	r1, #2
 8004e06:	430a      	orrs	r2, r1
 8004e08:	62da      	str	r2, [r3, #44]	; 0x2c
 8004e0a:	4b47      	ldr	r3, [pc, #284]	; (8004f28 <DBG_Init+0x140>)
 8004e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0e:	2202      	movs	r2, #2
 8004e10:	4013      	ands	r3, r2
 8004e12:	613b      	str	r3, [r7, #16]
 8004e14:	693b      	ldr	r3, [r7, #16]
  DGB_LINE2_CLK_ENABLE();
 8004e16:	4b44      	ldr	r3, [pc, #272]	; (8004f28 <DBG_Init+0x140>)
 8004e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e1a:	4b43      	ldr	r3, [pc, #268]	; (8004f28 <DBG_Init+0x140>)
 8004e1c:	2102      	movs	r1, #2
 8004e1e:	430a      	orrs	r2, r1
 8004e20:	62da      	str	r2, [r3, #44]	; 0x2c
 8004e22:	4b41      	ldr	r3, [pc, #260]	; (8004f28 <DBG_Init+0x140>)
 8004e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e26:	2202      	movs	r2, #2
 8004e28:	4013      	ands	r3, r2
 8004e2a:	60fb      	str	r3, [r7, #12]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
  DGB_LINE3_CLK_ENABLE();
 8004e2e:	4b3e      	ldr	r3, [pc, #248]	; (8004f28 <DBG_Init+0x140>)
 8004e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e32:	4b3d      	ldr	r3, [pc, #244]	; (8004f28 <DBG_Init+0x140>)
 8004e34:	2102      	movs	r1, #2
 8004e36:	430a      	orrs	r2, r1
 8004e38:	62da      	str	r2, [r3, #44]	; 0x2c
 8004e3a:	4b3b      	ldr	r3, [pc, #236]	; (8004f28 <DBG_Init+0x140>)
 8004e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3e:	2202      	movs	r2, #2
 8004e40:	4013      	ands	r3, r2
 8004e42:	60bb      	str	r3, [r7, #8]
 8004e44:	68bb      	ldr	r3, [r7, #8]
  DGB_LINE4_CLK_ENABLE();
 8004e46:	4b38      	ldr	r3, [pc, #224]	; (8004f28 <DBG_Init+0x140>)
 8004e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e4a:	4b37      	ldr	r3, [pc, #220]	; (8004f28 <DBG_Init+0x140>)
 8004e4c:	2102      	movs	r1, #2
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	62da      	str	r2, [r3, #44]	; 0x2c
 8004e52:	4b35      	ldr	r3, [pc, #212]	; (8004f28 <DBG_Init+0x140>)
 8004e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e56:	2202      	movs	r2, #2
 8004e58:	4013      	ands	r3, r2
 8004e5a:	607b      	str	r3, [r7, #4]
 8004e5c:	687b      	ldr	r3, [r7, #4]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8004e5e:	0021      	movs	r1, r4
 8004e60:	187b      	adds	r3, r7, r1
 8004e62:	2201      	movs	r2, #1
 8004e64:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull   = GPIO_PULLUP;
 8004e66:	187b      	adds	r3, r7, r1
 8004e68:	2201      	movs	r2, #1
 8004e6a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed  = GPIO_SPEED_HIGH;
 8004e6c:	187b      	adds	r3, r7, r1
 8004e6e:	2203      	movs	r2, #3
 8004e70:	60da      	str	r2, [r3, #12]

  GPIO_InitStruct.Pin    = DGB_LINE1_PIN;
 8004e72:	187b      	adds	r3, r7, r1
 8004e74:	2280      	movs	r2, #128	; 0x80
 8004e76:	0152      	lsls	r2, r2, #5
 8004e78:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(DGB_LINE1_PORT, &GPIO_InitStruct);
 8004e7a:	000c      	movs	r4, r1
 8004e7c:	187b      	adds	r3, r7, r1
 8004e7e:	4a2b      	ldr	r2, [pc, #172]	; (8004f2c <DBG_Init+0x144>)
 8004e80:	0019      	movs	r1, r3
 8004e82:	0010      	movs	r0, r2
 8004e84:	f002 fd80 	bl	8007988 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = DGB_LINE2_PIN;
 8004e88:	0021      	movs	r1, r4
 8004e8a:	187b      	adds	r3, r7, r1
 8004e8c:	2280      	movs	r2, #128	; 0x80
 8004e8e:	0192      	lsls	r2, r2, #6
 8004e90:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(DGB_LINE2_PORT, &GPIO_InitStruct);
 8004e92:	000c      	movs	r4, r1
 8004e94:	187b      	adds	r3, r7, r1
 8004e96:	4a25      	ldr	r2, [pc, #148]	; (8004f2c <DBG_Init+0x144>)
 8004e98:	0019      	movs	r1, r3
 8004e9a:	0010      	movs	r0, r2
 8004e9c:	f002 fd74 	bl	8007988 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = DGB_LINE3_PIN;
 8004ea0:	0021      	movs	r1, r4
 8004ea2:	187b      	adds	r3, r7, r1
 8004ea4:	2280      	movs	r2, #128	; 0x80
 8004ea6:	01d2      	lsls	r2, r2, #7
 8004ea8:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(DGB_LINE3_PORT, &GPIO_InitStruct);
 8004eaa:	000c      	movs	r4, r1
 8004eac:	187b      	adds	r3, r7, r1
 8004eae:	4a1f      	ldr	r2, [pc, #124]	; (8004f2c <DBG_Init+0x144>)
 8004eb0:	0019      	movs	r1, r3
 8004eb2:	0010      	movs	r0, r2
 8004eb4:	f002 fd68 	bl	8007988 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = DGB_LINE4_PIN;
 8004eb8:	0021      	movs	r1, r4
 8004eba:	187b      	adds	r3, r7, r1
 8004ebc:	2280      	movs	r2, #128	; 0x80
 8004ebe:	0212      	lsls	r2, r2, #8
 8004ec0:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(DGB_LINE4_PORT, &GPIO_InitStruct);
 8004ec2:	187b      	adds	r3, r7, r1
 8004ec4:	4a19      	ldr	r2, [pc, #100]	; (8004f2c <DBG_Init+0x144>)
 8004ec6:	0019      	movs	r1, r3
 8004ec8:	0010      	movs	r0, r2
 8004eca:	f002 fd5d 	bl	8007988 <HAL_GPIO_Init>

  /* Reset debug Pins */
  HAL_GPIO_WritePin(DGB_LINE1_PORT, DGB_LINE1_PIN, GPIO_PIN_RESET);
 8004ece:	2380      	movs	r3, #128	; 0x80
 8004ed0:	015b      	lsls	r3, r3, #5
 8004ed2:	4816      	ldr	r0, [pc, #88]	; (8004f2c <DBG_Init+0x144>)
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	0019      	movs	r1, r3
 8004ed8:	f002 ffd3 	bl	8007e82 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DGB_LINE2_PORT, DGB_LINE2_PIN, GPIO_PIN_RESET);
 8004edc:	2380      	movs	r3, #128	; 0x80
 8004ede:	019b      	lsls	r3, r3, #6
 8004ee0:	4812      	ldr	r0, [pc, #72]	; (8004f2c <DBG_Init+0x144>)
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	0019      	movs	r1, r3
 8004ee6:	f002 ffcc 	bl	8007e82 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DGB_LINE3_PORT, DGB_LINE3_PIN, GPIO_PIN_RESET);
 8004eea:	2380      	movs	r3, #128	; 0x80
 8004eec:	01db      	lsls	r3, r3, #7
 8004eee:	480f      	ldr	r0, [pc, #60]	; (8004f2c <DBG_Init+0x144>)
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	0019      	movs	r1, r3
 8004ef4:	f002 ffc5 	bl	8007e82 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DGB_LINE4_PORT, DGB_LINE4_PIN, GPIO_PIN_RESET);
 8004ef8:	2380      	movs	r3, #128	; 0x80
 8004efa:	021b      	lsls	r3, r3, #8
 8004efc:	480b      	ldr	r0, [pc, #44]	; (8004f2c <DBG_Init+0x144>)
 8004efe:	2200      	movs	r2, #0
 8004f00:	0019      	movs	r1, r3
 8004f02:	f002 ffbe 	bl	8007e82 <HAL_GPIO_WritePin>

  __HAL_RCC_DBGMCU_CLK_ENABLE();
 8004f06:	4b08      	ldr	r3, [pc, #32]	; (8004f28 <DBG_Init+0x140>)
 8004f08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f0a:	4b07      	ldr	r3, [pc, #28]	; (8004f28 <DBG_Init+0x140>)
 8004f0c:	2180      	movs	r1, #128	; 0x80
 8004f0e:	03c9      	lsls	r1, r1, #15
 8004f10:	430a      	orrs	r2, r1
 8004f12:	635a      	str	r2, [r3, #52]	; 0x34

  HAL_DBGMCU_EnableDBGSleepMode();
 8004f14:	f001 f9e2 	bl	80062dc <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8004f18:	f001 f9ee 	bl	80062f8 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8004f1c:	f001 f9fa 	bl	8006314 <HAL_DBGMCU_EnableDBGStandbyMode>
#error "DEBUGGER_ON not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */
  /* USER CODE BEGIN DBG_Init_Last */

  /* USER CODE END DBG_Init_Last */
}
 8004f20:	46c0      	nop			; (mov r8, r8)
 8004f22:	46bd      	mov	sp, r7
 8004f24:	b00b      	add	sp, #44	; 0x2c
 8004f26:	bd90      	pop	{r4, r7, pc}
 8004f28:	40021000 	.word	0x40021000
 8004f2c:	50000400 	.word	0x50000400

08004f30 <EnvSensors_Init>:

  /* USER CODE END EnvSensors_Read_Last */
}

void  EnvSensors_Init(void)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	af00      	add	r7, sp, #0
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  /* USER CODE BEGIN EnvSensors_Init_Last */

  /* USER CODE END EnvSensors_Init_Last */
}
 8004f34:	46c0      	nop			; (mov r8, r8)
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
	...

08004f3c <MX_USART2_Init>:
DMA_HandleTypeDef hdma_tx;

/* USART2 init function */

void MX_USART2_Init(void)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	af00      	add	r7, sp, #0

  husart2.Instance        = USART2;
 8004f40:	4b10      	ldr	r3, [pc, #64]	; (8004f84 <MX_USART2_Init+0x48>)
 8004f42:	4a11      	ldr	r2, [pc, #68]	; (8004f88 <MX_USART2_Init+0x4c>)
 8004f44:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate   = USART_BAUDRATE;
 8004f46:	4b0f      	ldr	r3, [pc, #60]	; (8004f84 <MX_USART2_Init+0x48>)
 8004f48:	22e1      	movs	r2, #225	; 0xe1
 8004f4a:	0252      	lsls	r2, r2, #9
 8004f4c:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004f4e:	4b0d      	ldr	r3, [pc, #52]	; (8004f84 <MX_USART2_Init+0x48>)
 8004f50:	2200      	movs	r2, #0
 8004f52:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits   = UART_STOPBITS_1;
 8004f54:	4b0b      	ldr	r3, [pc, #44]	; (8004f84 <MX_USART2_Init+0x48>)
 8004f56:	2200      	movs	r2, #0
 8004f58:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity     = UART_PARITY_NONE;
 8004f5a:	4b0a      	ldr	r3, [pc, #40]	; (8004f84 <MX_USART2_Init+0x48>)
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode       = UART_MODE_TX;
 8004f60:	4b08      	ldr	r3, [pc, #32]	; (8004f84 <MX_USART2_Init+0x48>)
 8004f62:	2208      	movs	r2, #8
 8004f64:	615a      	str	r2, [r3, #20]
  husart2.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8004f66:	4b07      	ldr	r3, [pc, #28]	; (8004f84 <MX_USART2_Init+0x48>)
 8004f68:	2200      	movs	r2, #0
 8004f6a:	619a      	str	r2, [r3, #24]

  if (HAL_UART_Init(&husart2) != HAL_OK)
 8004f6c:	4b05      	ldr	r3, [pc, #20]	; (8004f84 <MX_USART2_Init+0x48>)
 8004f6e:	0018      	movs	r0, r3
 8004f70:	f005 fef6 	bl	800ad60 <HAL_UART_Init>
 8004f74:	1e03      	subs	r3, r0, #0
 8004f76:	d001      	beq.n	8004f7c <MX_USART2_Init+0x40>
  {
    Error_Handler();
 8004f78:	f7fe fce0 	bl	800393c <Error_Handler>
  }
}
 8004f7c:	46c0      	nop			; (mov r8, r8)
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	46c0      	nop			; (mov r8, r8)
 8004f84:	2000166c 	.word	0x2000166c
 8004f88:	40004400 	.word	0x40004400

08004f8c <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle)
{
 8004f8c:	b590      	push	{r4, r7, lr}
 8004f8e:	b095      	sub	sp, #84	; 0x54
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f94:	233c      	movs	r3, #60	; 0x3c
 8004f96:	18fb      	adds	r3, r7, r3
 8004f98:	0018      	movs	r0, r3
 8004f9a:	2314      	movs	r3, #20
 8004f9c:	001a      	movs	r2, r3
 8004f9e:	2100      	movs	r1, #0
 8004fa0:	f018 ffbb 	bl	801df1a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004fa4:	2418      	movs	r4, #24
 8004fa6:	193b      	adds	r3, r7, r4
 8004fa8:	0018      	movs	r0, r3
 8004faa:	2324      	movs	r3, #36	; 0x24
 8004fac:	001a      	movs	r2, r3
 8004fae:	2100      	movs	r1, #0
 8004fb0:	f018 ffb3 	bl	801df1a <memset>
  if (uartHandle->Instance == USART2)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a57      	ldr	r2, [pc, #348]	; (8005118 <HAL_UART_MspInit+0x18c>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d000      	beq.n	8004fc0 <HAL_UART_MspInit+0x34>
 8004fbe:	e0a6      	b.n	800510e <HAL_UART_MspInit+0x182>

    /* USER CODE END USART2_MspInit 0 */

    /* Enable peripherals and GPIO Clocks */
    /* Enable GPIO TX/RX clock */
    USARTx_TX_GPIO_CLK_ENABLE();
 8004fc0:	4b56      	ldr	r3, [pc, #344]	; (800511c <HAL_UART_MspInit+0x190>)
 8004fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fc4:	4b55      	ldr	r3, [pc, #340]	; (800511c <HAL_UART_MspInit+0x190>)
 8004fc6:	2101      	movs	r1, #1
 8004fc8:	430a      	orrs	r2, r1
 8004fca:	62da      	str	r2, [r3, #44]	; 0x2c
 8004fcc:	4b53      	ldr	r3, [pc, #332]	; (800511c <HAL_UART_MspInit+0x190>)
 8004fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	617b      	str	r3, [r7, #20]
 8004fd6:	697b      	ldr	r3, [r7, #20]
    USARTx_RX_GPIO_CLK_ENABLE();
 8004fd8:	4b50      	ldr	r3, [pc, #320]	; (800511c <HAL_UART_MspInit+0x190>)
 8004fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fdc:	4b4f      	ldr	r3, [pc, #316]	; (800511c <HAL_UART_MspInit+0x190>)
 8004fde:	2101      	movs	r1, #1
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	62da      	str	r2, [r3, #44]	; 0x2c
 8004fe4:	4b4d      	ldr	r3, [pc, #308]	; (800511c <HAL_UART_MspInit+0x190>)
 8004fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe8:	2201      	movs	r2, #1
 8004fea:	4013      	ands	r3, r2
 8004fec:	613b      	str	r3, [r7, #16]
 8004fee:	693b      	ldr	r3, [r7, #16]

    /* Enable USARTx clock */
    __USART2_CLK_ENABLE();
 8004ff0:	4b4a      	ldr	r3, [pc, #296]	; (800511c <HAL_UART_MspInit+0x190>)
 8004ff2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ff4:	4b49      	ldr	r3, [pc, #292]	; (800511c <HAL_UART_MspInit+0x190>)
 8004ff6:	2180      	movs	r1, #128	; 0x80
 8004ff8:	0289      	lsls	r1, r1, #10
 8004ffa:	430a      	orrs	r2, r1
 8004ffc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable DMA clock */
    DMAx_CLK_ENABLE();
 8004ffe:	4b47      	ldr	r3, [pc, #284]	; (800511c <HAL_UART_MspInit+0x190>)
 8005000:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005002:	4b46      	ldr	r3, [pc, #280]	; (800511c <HAL_UART_MspInit+0x190>)
 8005004:	2101      	movs	r1, #1
 8005006:	430a      	orrs	r2, r1
 8005008:	631a      	str	r2, [r3, #48]	; 0x30
 800500a:	4b44      	ldr	r3, [pc, #272]	; (800511c <HAL_UART_MspInit+0x190>)
 800500c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500e:	2201      	movs	r2, #1
 8005010:	4013      	ands	r3, r2
 8005012:	60fb      	str	r3, [r7, #12]
 8005014:	68fb      	ldr	r3, [r7, #12]

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005016:	4b41      	ldr	r3, [pc, #260]	; (800511c <HAL_UART_MspInit+0x190>)
 8005018:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800501a:	4b40      	ldr	r3, [pc, #256]	; (800511c <HAL_UART_MspInit+0x190>)
 800501c:	2180      	movs	r1, #128	; 0x80
 800501e:	0289      	lsls	r1, r1, #10
 8005020:	430a      	orrs	r2, r1
 8005022:	639a      	str	r2, [r3, #56]	; 0x38

    /* Select SYSTEM clock for USART2 commuincation TX/RX */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005024:	193b      	adds	r3, r7, r4
 8005026:	2202      	movs	r2, #2
 8005028:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 800502a:	193b      	adds	r3, r7, r4
 800502c:	2204      	movs	r2, #4
 800502e:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005030:	193b      	adds	r3, r7, r4
 8005032:	0018      	movs	r0, r3
 8005034:	f004 fc16 	bl	8009864 <HAL_RCCEx_PeriphCLKConfig>
 8005038:	1e03      	subs	r3, r0, #0
 800503a:	d001      	beq.n	8005040 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 800503c:	f7fe fc7e 	bl	800393c <Error_Handler>

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
      */
    GPIO_InitStruct.Pin = USARTx_TX_Pin;
 8005040:	243c      	movs	r4, #60	; 0x3c
 8005042:	193b      	adds	r3, r7, r4
 8005044:	2204      	movs	r2, #4
 8005046:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005048:	193b      	adds	r3, r7, r4
 800504a:	2202      	movs	r2, #2
 800504c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800504e:	193b      	adds	r3, r7, r4
 8005050:	2200      	movs	r2, #0
 8005052:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8005054:	193b      	adds	r3, r7, r4
 8005056:	2203      	movs	r2, #3
 8005058:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = USARTx_TX_AF;
 800505a:	193b      	adds	r3, r7, r4
 800505c:	2204      	movs	r2, #4
 800505e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 8005060:	193a      	adds	r2, r7, r4
 8005062:	23a0      	movs	r3, #160	; 0xa0
 8005064:	05db      	lsls	r3, r3, #23
 8005066:	0011      	movs	r1, r2
 8005068:	0018      	movs	r0, r3
 800506a:	f002 fc8d 	bl	8007988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USARTx_RX_Pin;
 800506e:	0021      	movs	r1, r4
 8005070:	187b      	adds	r3, r7, r1
 8005072:	2208      	movs	r2, #8
 8005074:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005076:	187b      	adds	r3, r7, r1
 8005078:	2202      	movs	r2, #2
 800507a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800507c:	187b      	adds	r3, r7, r1
 800507e:	2200      	movs	r2, #0
 8005080:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8005082:	187b      	adds	r3, r7, r1
 8005084:	2203      	movs	r2, #3
 8005086:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8005088:	187b      	adds	r3, r7, r1
 800508a:	2204      	movs	r2, #4
 800508c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 800508e:	187a      	adds	r2, r7, r1
 8005090:	23a0      	movs	r3, #160	; 0xa0
 8005092:	05db      	lsls	r3, r3, #23
 8005094:	0011      	movs	r1, r2
 8005096:	0018      	movs	r0, r3
 8005098:	f002 fc76 	bl	8007988 <HAL_GPIO_Init>


    /* USART2 DMA Init */
    /* USART2_TX Init */
    /* Configure the DMA handler for Transmission process */
    hdma_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 800509c:	4b20      	ldr	r3, [pc, #128]	; (8005120 <HAL_UART_MspInit+0x194>)
 800509e:	4a21      	ldr	r2, [pc, #132]	; (8005124 <HAL_UART_MspInit+0x198>)
 80050a0:	601a      	str	r2, [r3, #0]
    hdma_tx.Init.Request             = USARTx_TX_DMA_REQUEST;
 80050a2:	4b1f      	ldr	r3, [pc, #124]	; (8005120 <HAL_UART_MspInit+0x194>)
 80050a4:	2204      	movs	r2, #4
 80050a6:	605a      	str	r2, [r3, #4]
    hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80050a8:	4b1d      	ldr	r3, [pc, #116]	; (8005120 <HAL_UART_MspInit+0x194>)
 80050aa:	2210      	movs	r2, #16
 80050ac:	609a      	str	r2, [r3, #8]
    hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80050ae:	4b1c      	ldr	r3, [pc, #112]	; (8005120 <HAL_UART_MspInit+0x194>)
 80050b0:	2200      	movs	r2, #0
 80050b2:	60da      	str	r2, [r3, #12]
    hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 80050b4:	4b1a      	ldr	r3, [pc, #104]	; (8005120 <HAL_UART_MspInit+0x194>)
 80050b6:	2280      	movs	r2, #128	; 0x80
 80050b8:	611a      	str	r2, [r3, #16]
    hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80050ba:	4b19      	ldr	r3, [pc, #100]	; (8005120 <HAL_UART_MspInit+0x194>)
 80050bc:	2200      	movs	r2, #0
 80050be:	615a      	str	r2, [r3, #20]
    hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 80050c0:	4b17      	ldr	r3, [pc, #92]	; (8005120 <HAL_UART_MspInit+0x194>)
 80050c2:	2200      	movs	r2, #0
 80050c4:	619a      	str	r2, [r3, #24]
    hdma_tx.Init.Mode                = DMA_NORMAL;
 80050c6:	4b16      	ldr	r3, [pc, #88]	; (8005120 <HAL_UART_MspInit+0x194>)
 80050c8:	2200      	movs	r2, #0
 80050ca:	61da      	str	r2, [r3, #28]
    hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
 80050cc:	4b14      	ldr	r3, [pc, #80]	; (8005120 <HAL_UART_MspInit+0x194>)
 80050ce:	2200      	movs	r2, #0
 80050d0:	621a      	str	r2, [r3, #32]

    if (HAL_DMA_Init(&hdma_tx) != HAL_OK)
 80050d2:	4b13      	ldr	r3, [pc, #76]	; (8005120 <HAL_UART_MspInit+0x194>)
 80050d4:	0018      	movs	r0, r3
 80050d6:	f001 ff93 	bl	8007000 <HAL_DMA_Init>
 80050da:	1e03      	subs	r3, r0, #0
 80050dc:	d001      	beq.n	80050e2 <HAL_UART_MspInit+0x156>
    {
      Error_Handler();
 80050de:	f7fe fc2d 	bl	800393c <Error_Handler>
    }


    /* Associate the initialized DMA handle to the UART handle */
    __HAL_LINKDMA(uartHandle, hdmatx, hdma_tx);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a0e      	ldr	r2, [pc, #56]	; (8005120 <HAL_UART_MspInit+0x194>)
 80050e6:	66da      	str	r2, [r3, #108]	; 0x6c
 80050e8:	4b0d      	ldr	r3, [pc, #52]	; (8005120 <HAL_UART_MspInit+0x194>)
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	629a      	str	r2, [r3, #40]	; 0x28

    /* Configure the NVIC for DMA */
    /* NVIC configuration for DMA transfer complete interrupt (USART1_TX) */
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 80050ee:	2201      	movs	r2, #1
 80050f0:	2100      	movs	r1, #0
 80050f2:	200b      	movs	r0, #11
 80050f4:	f001 ff4e 	bl	8006f94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 80050f8:	200b      	movs	r0, #11
 80050fa:	f001 ff60 	bl	8006fbe <HAL_NVIC_EnableIRQ>

    /* NVIC for USART, to catch the TX complete */
    HAL_NVIC_SetPriority(USARTx_IRQn, USARTx_DMA_Priority, 1);
 80050fe:	2201      	movs	r2, #1
 8005100:	2100      	movs	r1, #0
 8005102:	201c      	movs	r0, #28
 8005104:	f001 ff46 	bl	8006f94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_IRQn);
 8005108:	201c      	movs	r0, #28
 800510a:	f001 ff58 	bl	8006fbe <HAL_NVIC_EnableIRQ>

    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }
}
 800510e:	46c0      	nop			; (mov r8, r8)
 8005110:	46bd      	mov	sp, r7
 8005112:	b015      	add	sp, #84	; 0x54
 8005114:	bd90      	pop	{r4, r7, pc}
 8005116:	46c0      	nop			; (mov r8, r8)
 8005118:	40004400 	.word	0x40004400
 800511c:	40021000 	.word	0x40021000
 8005120:	20001624 	.word	0x20001624
 8005124:	40020080 	.word	0x40020080

08005128 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef *uartHandle)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]

  if (uartHandle->Instance == USART2)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a0d      	ldr	r2, [pc, #52]	; (800516c <HAL_UART_MspDeInit+0x44>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d113      	bne.n	8005162 <HAL_UART_MspDeInit+0x3a>
  {
    /* USER CODE BEGIN USART2_MspDeInit 0 */

    /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 800513a:	4b0d      	ldr	r3, [pc, #52]	; (8005170 <HAL_UART_MspDeInit+0x48>)
 800513c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800513e:	4b0c      	ldr	r3, [pc, #48]	; (8005170 <HAL_UART_MspDeInit+0x48>)
 8005140:	490c      	ldr	r1, [pc, #48]	; (8005174 <HAL_UART_MspDeInit+0x4c>)
 8005142:	400a      	ands	r2, r1
 8005144:	639a      	str	r2, [r3, #56]	; 0x38

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
      */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 8005146:	23a0      	movs	r3, #160	; 0xa0
 8005148:	05db      	lsls	r3, r3, #23
 800514a:	210c      	movs	r1, #12
 800514c:	0018      	movs	r0, r3
 800514e:	f002 fd99 	bl	8007c84 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005156:	0018      	movs	r0, r3
 8005158:	f001 ffca 	bl	80070f0 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800515c:	201c      	movs	r0, #28
 800515e:	f001 ff3e 	bl	8006fde <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN USART2_MspDeInit 1 */

    /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8005162:	46c0      	nop			; (mov r8, r8)
 8005164:	46bd      	mov	sp, r7
 8005166:	b002      	add	sp, #8
 8005168:	bd80      	pop	{r7, pc}
 800516a:	46c0      	nop			; (mov r8, r8)
 800516c:	40004400 	.word	0x40004400
 8005170:	40021000 	.word	0x40021000
 8005174:	fffdffff 	.word	0xfffdffff

08005178 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8005180:	4b05      	ldr	r3, [pc, #20]	; (8005198 <vcom_Init+0x20>)
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	601a      	str	r2, [r3, #0]
  MX_DMA_Init();
 8005186:	f7fe fa23 	bl	80035d0 <MX_DMA_Init>
  MX_USART2_Init();
 800518a:	f7ff fed7 	bl	8004f3c <MX_USART2_Init>
  return UTIL_ADV_TRACE_OK;
 800518e:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8005190:	0018      	movs	r0, r3
 8005192:	46bd      	mov	sp, r7
 8005194:	b002      	add	sp, #8
 8005196:	bd80      	pop	{r7, pc}
 8005198:	20000408 	.word	0x20000408

0800519c <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
 80051a0:	4b0b      	ldr	r3, [pc, #44]	; (80051d0 <vcom_DeInit+0x34>)
 80051a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051a4:	4b0a      	ldr	r3, [pc, #40]	; (80051d0 <vcom_DeInit+0x34>)
 80051a6:	2180      	movs	r1, #128	; 0x80
 80051a8:	0289      	lsls	r1, r1, #10
 80051aa:	430a      	orrs	r2, r1
 80051ac:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_USART2_RELEASE_RESET();
 80051ae:	4b08      	ldr	r3, [pc, #32]	; (80051d0 <vcom_DeInit+0x34>)
 80051b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051b2:	4b07      	ldr	r3, [pc, #28]	; (80051d0 <vcom_DeInit+0x34>)
 80051b4:	4907      	ldr	r1, [pc, #28]	; (80051d4 <vcom_DeInit+0x38>)
 80051b6:	400a      	ands	r2, r1
 80051b8:	629a      	str	r2, [r3, #40]	; 0x28

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&UartHandle);
 80051ba:	4b07      	ldr	r3, [pc, #28]	; (80051d8 <vcom_DeInit+0x3c>)
 80051bc:	0018      	movs	r0, r3
 80051be:	f7ff ffb3 	bl	8005128 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* temporary while waiting CR 50840: MX implementation of  MX_DMA_DeInit() */
  /* For the time being user should change manually the channel according to the MX settings */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80051c2:	200b      	movs	r0, #11
 80051c4:	f001 ff0b 	bl	8006fde <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 80051c8:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 80051ca:	0018      	movs	r0, r3
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	40021000 	.word	0x40021000
 80051d4:	fffdffff 	.word	0xfffdffff
 80051d8:	2000166c 	.word	0x2000166c

080051dc <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	000a      	movs	r2, r1
 80051e6:	1cbb      	adds	r3, r7, #2
 80051e8:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&UartHandle, p_data, size);
 80051ea:	1cbb      	adds	r3, r7, #2
 80051ec:	881a      	ldrh	r2, [r3, #0]
 80051ee:	6879      	ldr	r1, [r7, #4]
 80051f0:	4b04      	ldr	r3, [pc, #16]	; (8005204 <vcom_Trace_DMA+0x28>)
 80051f2:	0018      	movs	r0, r3
 80051f4:	f005 fe60 	bl	800aeb8 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 80051f8:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 80051fa:	0018      	movs	r0, r3
 80051fc:	46bd      	mov	sp, r7
 80051fe:	b002      	add	sp, #8
 8005200:	bd80      	pop	{r7, pc}
 8005202:	46c0      	nop			; (mov r8, r8)
 8005204:	2000166c 	.word	0x2000166c

08005208 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8005210:	4b1d      	ldr	r3, [pc, #116]	; (8005288 <vcom_ReceiveInit+0x80>)
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	601a      	str	r2, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8005216:	2108      	movs	r1, #8
 8005218:	187b      	adds	r3, r7, r1
 800521a:	2280      	movs	r2, #128	; 0x80
 800521c:	0392      	lsls	r2, r2, #14
 800521e:	601a      	str	r2, [r3, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&UartHandle, WakeUpSelection);
 8005220:	187b      	adds	r3, r7, r1
 8005222:	481a      	ldr	r0, [pc, #104]	; (800528c <vcom_ReceiveInit+0x84>)
 8005224:	6819      	ldr	r1, [r3, #0]
 8005226:	685a      	ldr	r2, [r3, #4]
 8005228:	f006 ff9e 	bl	800c168 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&UartHandle, USART_ISR_BUSY) == SET);
 800522c:	46c0      	nop			; (mov r8, r8)
 800522e:	4b17      	ldr	r3, [pc, #92]	; (800528c <vcom_ReceiveInit+0x84>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	69da      	ldr	r2, [r3, #28]
 8005234:	2380      	movs	r3, #128	; 0x80
 8005236:	025b      	lsls	r3, r3, #9
 8005238:	401a      	ands	r2, r3
 800523a:	2380      	movs	r3, #128	; 0x80
 800523c:	025b      	lsls	r3, r3, #9
 800523e:	429a      	cmp	r2, r3
 8005240:	d0f5      	beq.n	800522e <vcom_ReceiveInit+0x26>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&UartHandle, USART_ISR_REACK) == RESET);
 8005242:	46c0      	nop			; (mov r8, r8)
 8005244:	4b11      	ldr	r3, [pc, #68]	; (800528c <vcom_ReceiveInit+0x84>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	69da      	ldr	r2, [r3, #28]
 800524a:	2380      	movs	r3, #128	; 0x80
 800524c:	03db      	lsls	r3, r3, #15
 800524e:	401a      	ands	r2, r3
 8005250:	2380      	movs	r3, #128	; 0x80
 8005252:	03db      	lsls	r3, r3, #15
 8005254:	429a      	cmp	r2, r3
 8005256:	d1f5      	bne.n	8005244 <vcom_ReceiveInit+0x3c>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&UartHandle, UART_IT_WUF);
 8005258:	4b0c      	ldr	r3, [pc, #48]	; (800528c <vcom_ReceiveInit+0x84>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	689a      	ldr	r2, [r3, #8]
 800525e:	4b0b      	ldr	r3, [pc, #44]	; (800528c <vcom_ReceiveInit+0x84>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2180      	movs	r1, #128	; 0x80
 8005264:	03c9      	lsls	r1, r1, #15
 8005266:	430a      	orrs	r2, r1
 8005268:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&UartHandle);
 800526a:	4b08      	ldr	r3, [pc, #32]	; (800528c <vcom_ReceiveInit+0x84>)
 800526c:	0018      	movs	r0, r3
 800526e:	f006 ffe1 	bl	800c234 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&UartHandle, &charRx, 1);
 8005272:	4907      	ldr	r1, [pc, #28]	; (8005290 <vcom_ReceiveInit+0x88>)
 8005274:	4b05      	ldr	r3, [pc, #20]	; (800528c <vcom_ReceiveInit+0x84>)
 8005276:	2201      	movs	r2, #1
 8005278:	0018      	movs	r0, r3
 800527a:	f005 fdc5 	bl	800ae08 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 800527e:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8005280:	0018      	movs	r0, r3
 8005282:	46bd      	mov	sp, r7
 8005284:	b004      	add	sp, #16
 8005286:	bd80      	pop	{r7, pc}
 8005288:	2000040c 	.word	0x2000040c
 800528c:	2000166c 	.word	0x2000166c
 8005290:	200016f0 	.word	0x200016f0

08005294 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b082      	sub	sp, #8
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 800529c:	4b03      	ldr	r3, [pc, #12]	; (80052ac <HAL_UART_TxCpltCallback+0x18>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2000      	movs	r0, #0
 80052a2:	4798      	blx	r3
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 80052a4:	46c0      	nop			; (mov r8, r8)
 80052a6:	46bd      	mov	sp, r7
 80052a8:	b002      	add	sp, #8
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	20000408 	.word	0x20000408

080052b0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == UartHandle->ErrorCode))
 80052b8:	4b0c      	ldr	r3, [pc, #48]	; (80052ec <HAL_UART_RxCpltCallback+0x3c>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d00a      	beq.n	80052d6 <HAL_UART_RxCpltCallback+0x26>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2280      	movs	r2, #128	; 0x80
 80052c4:	589b      	ldr	r3, [r3, r2]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d105      	bne.n	80052d6 <HAL_UART_RxCpltCallback+0x26>
  {
    RxCpltCallback(&charRx, 1, 0);
 80052ca:	4b08      	ldr	r3, [pc, #32]	; (80052ec <HAL_UART_RxCpltCallback+0x3c>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4808      	ldr	r0, [pc, #32]	; (80052f0 <HAL_UART_RxCpltCallback+0x40>)
 80052d0:	2200      	movs	r2, #0
 80052d2:	2101      	movs	r1, #1
 80052d4:	4798      	blx	r3
  }
  HAL_UART_Receive_IT(UartHandle, &charRx, 1);
 80052d6:	4906      	ldr	r1, [pc, #24]	; (80052f0 <HAL_UART_RxCpltCallback+0x40>)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	0018      	movs	r0, r3
 80052de:	f005 fd93 	bl	800ae08 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 80052e2:	46c0      	nop			; (mov r8, r8)
 80052e4:	46bd      	mov	sp, r7
 80052e6:	b002      	add	sp, #8
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	46c0      	nop			; (mov r8, r8)
 80052ec:	2000040c 	.word	0x2000040c
 80052f0:	200016f0 	.word	0x200016f0

080052f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80052f4:	480d      	ldr	r0, [pc, #52]	; (800532c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80052f6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80052f8:	480d      	ldr	r0, [pc, #52]	; (8005330 <LoopForever+0x6>)
  ldr r1, =_edata
 80052fa:	490e      	ldr	r1, [pc, #56]	; (8005334 <LoopForever+0xa>)
  ldr r2, =_sidata
 80052fc:	4a0e      	ldr	r2, [pc, #56]	; (8005338 <LoopForever+0xe>)
  movs r3, #0
 80052fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005300:	e002      	b.n	8005308 <LoopCopyDataInit>

08005302 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005302:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005304:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005306:	3304      	adds	r3, #4

08005308 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005308:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800530a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800530c:	d3f9      	bcc.n	8005302 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800530e:	4a0b      	ldr	r2, [pc, #44]	; (800533c <LoopForever+0x12>)
  ldr r4, =_ebss
 8005310:	4c0b      	ldr	r4, [pc, #44]	; (8005340 <LoopForever+0x16>)
  movs r3, #0
 8005312:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005314:	e001      	b.n	800531a <LoopFillZerobss>

08005316 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005316:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005318:	3204      	adds	r2, #4

0800531a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800531a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800531c:	d3fb      	bcc.n	8005316 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800531e:	f000 ff4f 	bl	80061c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005322:	f018 fdcd 	bl	801dec0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005326:	f7fe fa2f 	bl	8003788 <main>

0800532a <LoopForever>:

LoopForever:
    b LoopForever
 800532a:	e7fe      	b.n	800532a <LoopForever>
   ldr   r0, =_estack
 800532c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8005330:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005334:	2000023c 	.word	0x2000023c
  ldr r2, =_sidata
 8005338:	080200a4 	.word	0x080200a4
  ldr r2, =_sbss
 800533c:	2000023c 	.word	0x2000023c
  ldr r4, =_ebss
 8005340:	20001804 	.word	0x20001804

08005344 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005344:	e7fe      	b.n	8005344 <ADC1_COMP_IRQHandler>

08005346 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005346:	b580      	push	{r7, lr}
 8005348:	b086      	sub	sp, #24
 800534a:	af00      	add	r7, sp, #0
 800534c:	60f8      	str	r0, [r7, #12]
 800534e:	60b9      	str	r1, [r7, #8]
 8005350:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005352:	2300      	movs	r3, #0
 8005354:	617b      	str	r3, [r7, #20]
 8005356:	e00a      	b.n	800536e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005358:	e000      	b.n	800535c <_read+0x16>
 800535a:	bf00      	nop
 800535c:	0001      	movs	r1, r0
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	1c5a      	adds	r2, r3, #1
 8005362:	60ba      	str	r2, [r7, #8]
 8005364:	b2ca      	uxtb	r2, r1
 8005366:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	3301      	adds	r3, #1
 800536c:	617b      	str	r3, [r7, #20]
 800536e:	697a      	ldr	r2, [r7, #20]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	429a      	cmp	r2, r3
 8005374:	dbf0      	blt.n	8005358 <_read+0x12>
	}

return len;
 8005376:	687b      	ldr	r3, [r7, #4]
}
 8005378:	0018      	movs	r0, r3
 800537a:	46bd      	mov	sp, r7
 800537c:	b006      	add	sp, #24
 800537e:	bd80      	pop	{r7, pc}

08005380 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b086      	sub	sp, #24
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800538c:	2300      	movs	r3, #0
 800538e:	617b      	str	r3, [r7, #20]
 8005390:	e009      	b.n	80053a6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	1c5a      	adds	r2, r3, #1
 8005396:	60ba      	str	r2, [r7, #8]
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	0018      	movs	r0, r3
 800539c:	e000      	b.n	80053a0 <_write+0x20>
 800539e:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	3301      	adds	r3, #1
 80053a4:	617b      	str	r3, [r7, #20]
 80053a6:	697a      	ldr	r2, [r7, #20]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	dbf1      	blt.n	8005392 <_write+0x12>
	}
	return len;
 80053ae:	687b      	ldr	r3, [r7, #4]
}
 80053b0:	0018      	movs	r0, r3
 80053b2:	46bd      	mov	sp, r7
 80053b4:	b006      	add	sp, #24
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <_sbrk>:

caddr_t _sbrk(int incr)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80053c0:	4b11      	ldr	r3, [pc, #68]	; (8005408 <_sbrk+0x50>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d102      	bne.n	80053ce <_sbrk+0x16>
		heap_end = &end;
 80053c8:	4b0f      	ldr	r3, [pc, #60]	; (8005408 <_sbrk+0x50>)
 80053ca:	4a10      	ldr	r2, [pc, #64]	; (800540c <_sbrk+0x54>)
 80053cc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80053ce:	4b0e      	ldr	r3, [pc, #56]	; (8005408 <_sbrk+0x50>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80053d4:	4b0c      	ldr	r3, [pc, #48]	; (8005408 <_sbrk+0x50>)
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	18d2      	adds	r2, r2, r3
 80053dc:	466b      	mov	r3, sp
 80053de:	429a      	cmp	r2, r3
 80053e0:	d907      	bls.n	80053f2 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80053e2:	f018 fd67 	bl	801deb4 <__errno>
 80053e6:	0003      	movs	r3, r0
 80053e8:	220c      	movs	r2, #12
 80053ea:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80053ec:	2301      	movs	r3, #1
 80053ee:	425b      	negs	r3, r3
 80053f0:	e006      	b.n	8005400 <_sbrk+0x48>
	}

	heap_end += incr;
 80053f2:	4b05      	ldr	r3, [pc, #20]	; (8005408 <_sbrk+0x50>)
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	18d2      	adds	r2, r2, r3
 80053fa:	4b03      	ldr	r3, [pc, #12]	; (8005408 <_sbrk+0x50>)
 80053fc:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 80053fe:	68fb      	ldr	r3, [r7, #12]
}
 8005400:	0018      	movs	r0, r3
 8005402:	46bd      	mov	sp, r7
 8005404:	b004      	add	sp, #16
 8005406:	bd80      	pop	{r7, pc}
 8005408:	20000414 	.word	0x20000414
 800540c:	20001808 	.word	0x20001808

08005410 <_close>:

int _close(int file)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
	return -1;
 8005418:	2301      	movs	r3, #1
 800541a:	425b      	negs	r3, r3
}
 800541c:	0018      	movs	r0, r3
 800541e:	46bd      	mov	sp, r7
 8005420:	b002      	add	sp, #8
 8005422:	bd80      	pop	{r7, pc}

08005424 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b082      	sub	sp, #8
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	2280      	movs	r2, #128	; 0x80
 8005432:	0192      	lsls	r2, r2, #6
 8005434:	605a      	str	r2, [r3, #4]
	return 0;
 8005436:	2300      	movs	r3, #0
}
 8005438:	0018      	movs	r0, r3
 800543a:	46bd      	mov	sp, r7
 800543c:	b002      	add	sp, #8
 800543e:	bd80      	pop	{r7, pc}

08005440 <_isatty>:

int _isatty(int file)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
	return 1;
 8005448:	2301      	movs	r3, #1
}
 800544a:	0018      	movs	r0, r3
 800544c:	46bd      	mov	sp, r7
 800544e:	b002      	add	sp, #8
 8005450:	bd80      	pop	{r7, pc}

08005452 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005452:	b580      	push	{r7, lr}
 8005454:	b084      	sub	sp, #16
 8005456:	af00      	add	r7, sp, #0
 8005458:	60f8      	str	r0, [r7, #12]
 800545a:	60b9      	str	r1, [r7, #8]
 800545c:	607a      	str	r2, [r7, #4]
	return 0;
 800545e:	2300      	movs	r3, #0
}
 8005460:	0018      	movs	r0, r3
 8005462:	46bd      	mov	sp, r7
 8005464:	b004      	add	sp, #16
 8005466:	bd80      	pop	{r7, pc}

08005468 <BSP_SPI1_Init>:
  * @brief  Initializes SPI HAL.
  * @retval None
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800546e:	2300      	movs	r3, #0
 8005470:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 8005472:	4b0d      	ldr	r3, [pc, #52]	; (80054a8 <BSP_SPI1_Init+0x40>)
 8005474:	4a0d      	ldr	r2, [pc, #52]	; (80054ac <BSP_SPI1_Init+0x44>)
 8005476:	601a      	str	r2, [r3, #0]
  if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8005478:	4b0b      	ldr	r3, [pc, #44]	; (80054a8 <BSP_SPI1_Init+0x40>)
 800547a:	0018      	movs	r0, r3
 800547c:	f005 fb8f 	bl	800ab9e <HAL_SPI_GetState>
 8005480:	1e03      	subs	r3, r0, #0
 8005482:	d10c      	bne.n	800549e <BSP_SPI1_Init+0x36>
  {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0)
    /* Init the SPI Msp */
    SPI1_MspInit(&hspi1);
 8005484:	4b08      	ldr	r3, [pc, #32]	; (80054a8 <BSP_SPI1_Init+0x40>)
 8005486:	0018      	movs	r0, r3
 8005488:	f000 f87e 	bl	8005588 <SPI1_MspInit>
      }
    }
#endif

    /* Init the SPI */
    if (MX_SPI1_Init(&hspi1) != HAL_OK)
 800548c:	4b06      	ldr	r3, [pc, #24]	; (80054a8 <BSP_SPI1_Init+0x40>)
 800548e:	0018      	movs	r0, r3
 8005490:	f000 f830 	bl	80054f4 <MX_SPI1_Init>
 8005494:	1e03      	subs	r3, r0, #0
 8005496:	d002      	beq.n	800549e <BSP_SPI1_Init+0x36>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8005498:	2308      	movs	r3, #8
 800549a:	425b      	negs	r3, r3
 800549c:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 800549e:	687b      	ldr	r3, [r7, #4]
}
 80054a0:	0018      	movs	r0, r3
 80054a2:	46bd      	mov	sp, r7
 80054a4:	b002      	add	sp, #8
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	20001510 	.word	0x20001510
 80054ac:	40013000 	.word	0x40013000

080054b0 <BSP_SPI1_SendRecv>:
  * @param  pData: Data
  * @param  len: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t len)
{
 80054b0:	b590      	push	{r4, r7, lr}
 80054b2:	b089      	sub	sp, #36	; 0x24
 80054b4:	af02      	add	r7, sp, #8
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	1dbb      	adds	r3, r7, #6
 80054bc:	801a      	strh	r2, [r3, #0]
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 80054be:	2306      	movs	r3, #6
 80054c0:	425b      	negs	r3, r3
 80054c2:	617b      	str	r3, [r7, #20]

  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 80054c4:	1dbb      	adds	r3, r7, #6
 80054c6:	881c      	ldrh	r4, [r3, #0]
 80054c8:	68ba      	ldr	r2, [r7, #8]
 80054ca:	68f9      	ldr	r1, [r7, #12]
 80054cc:	4808      	ldr	r0, [pc, #32]	; (80054f0 <BSP_SPI1_SendRecv+0x40>)
 80054ce:	23fa      	movs	r3, #250	; 0xfa
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	9300      	str	r3, [sp, #0]
 80054d4:	0023      	movs	r3, r4
 80054d6:	f005 f9a7 	bl	800a828 <HAL_SPI_TransmitReceive>
 80054da:	1e03      	subs	r3, r0, #0
 80054dc:	d102      	bne.n	80054e4 <BSP_SPI1_SendRecv+0x34>
  {
    ret = len;
 80054de:	1dbb      	adds	r3, r7, #6
 80054e0:	881b      	ldrh	r3, [r3, #0]
 80054e2:	617b      	str	r3, [r7, #20]
  }
  return ret;
 80054e4:	697b      	ldr	r3, [r7, #20]
}
 80054e6:	0018      	movs	r0, r3
 80054e8:	46bd      	mov	sp, r7
 80054ea:	b007      	add	sp, #28
 80054ec:	bd90      	pop	{r4, r7, pc}
 80054ee:	46c0      	nop			; (mov r8, r8)
 80054f0:	20001510 	.word	0x20001510

080054f4 <MX_SPI1_Init>:
}

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef *hspi)
{
 80054f4:	b590      	push	{r4, r7, lr}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80054fc:	240f      	movs	r4, #15
 80054fe:	193b      	adds	r3, r7, r4
 8005500:	2200      	movs	r2, #0
 8005502:	701a      	strb	r2, [r3, #0]
  hspi->Instance = SPI1;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a1e      	ldr	r2, [pc, #120]	; (8005580 <MX_SPI1_Init+0x8c>)
 8005508:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2282      	movs	r2, #130	; 0x82
 800550e:	0052      	lsls	r2, r2, #1
 8005510:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2280      	movs	r2, #128	; 0x80
 800552e:	0092      	lsls	r2, r2, #2
 8005530:	619a      	str	r2, [r3, #24]
  /* SPI1 is on APB2 for L0x3 -> HAL_RCC_GetPCLK2Freq */
  hspi->Init.BaudRatePrescaler = SPI_GetPrescaler(HAL_RCC_GetPCLK2Freq(), RADIO_SPI_BAUDRATE);
 8005532:	f004 f981 	bl	8009838 <HAL_RCC_GetPCLK2Freq>
 8005536:	0003      	movs	r3, r0
 8005538:	4a12      	ldr	r2, [pc, #72]	; (8005584 <MX_SPI1_Init+0x90>)
 800553a:	0011      	movs	r1, r2
 800553c:	0018      	movs	r0, r3
 800553e:	f000 f867 	bl	8005610 <SPI_GetPrescaler>
 8005542:	0002      	movs	r2, r0
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2207      	movs	r2, #7
 800555e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	0018      	movs	r0, r3
 8005564:	f005 f8c4 	bl	800a6f0 <HAL_SPI_Init>
 8005568:	1e03      	subs	r3, r0, #0
 800556a:	d002      	beq.n	8005572 <MX_SPI1_Init+0x7e>
  {
    ret = HAL_ERROR;
 800556c:	193b      	adds	r3, r7, r4
 800556e:	2201      	movs	r2, #1
 8005570:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8005572:	230f      	movs	r3, #15
 8005574:	18fb      	adds	r3, r7, r3
 8005576:	781b      	ldrb	r3, [r3, #0]
}
 8005578:	0018      	movs	r0, r3
 800557a:	46bd      	mov	sp, r7
 800557c:	b005      	add	sp, #20
 800557e:	bd90      	pop	{r4, r7, pc}
 8005580:	40013000 	.word	0x40013000
 8005584:	00989680 	.word	0x00989680

08005588 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef *spiHandle)
{
 8005588:	b590      	push	{r4, r7, lr}
 800558a:	b089      	sub	sp, #36	; 0x24
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /* Enable Peripheral clock */
  __HAL_RCC_SPI1_CLK_ENABLE();
 8005590:	4b1d      	ldr	r3, [pc, #116]	; (8005608 <SPI1_MspInit+0x80>)
 8005592:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005594:	4b1c      	ldr	r3, [pc, #112]	; (8005608 <SPI1_MspInit+0x80>)
 8005596:	2180      	movs	r1, #128	; 0x80
 8005598:	0149      	lsls	r1, r1, #5
 800559a:	430a      	orrs	r2, r1
 800559c:	635a      	str	r2, [r3, #52]	; 0x34
  /**SPI1 GPIO Configuration
  PA5     ------> SPI1_SCK
  PA6     ------> SPI1_MISO
  PA7     ------> SPI1_MOSI
    */
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800559e:	240c      	movs	r4, #12
 80055a0:	193b      	adds	r3, r7, r4
 80055a2:	2202      	movs	r2, #2
 80055a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055a6:	193b      	adds	r3, r7, r4
 80055a8:	2200      	movs	r2, #0
 80055aa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055ac:	193b      	adds	r3, r7, r4
 80055ae:	2203      	movs	r2, #3
 80055b0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 80055b2:	193b      	adds	r3, r7, r4
 80055b4:	2200      	movs	r2, #0
 80055b6:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 80055b8:	193b      	adds	r3, r7, r4
 80055ba:	2280      	movs	r2, #128	; 0x80
 80055bc:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80055be:	193a      	adds	r2, r7, r4
 80055c0:	23a0      	movs	r3, #160	; 0xa0
 80055c2:	05db      	lsls	r3, r3, #23
 80055c4:	0011      	movs	r1, r2
 80055c6:	0018      	movs	r0, r3
 80055c8:	f002 f9de 	bl	8007988 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 80055cc:	193b      	adds	r3, r7, r4
 80055ce:	2200      	movs	r2, #0
 80055d0:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 80055d2:	193b      	adds	r3, r7, r4
 80055d4:	2240      	movs	r2, #64	; 0x40
 80055d6:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 80055d8:	193a      	adds	r2, r7, r4
 80055da:	23a0      	movs	r3, #160	; 0xa0
 80055dc:	05db      	lsls	r3, r3, #23
 80055de:	0011      	movs	r1, r2
 80055e0:	0018      	movs	r0, r3
 80055e2:	f002 f9d1 	bl	8007988 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 80055e6:	193b      	adds	r3, r7, r4
 80055e8:	2200      	movs	r2, #0
 80055ea:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 80055ec:	193b      	adds	r3, r7, r4
 80055ee:	2208      	movs	r2, #8
 80055f0:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 80055f2:	193b      	adds	r3, r7, r4
 80055f4:	4a05      	ldr	r2, [pc, #20]	; (800560c <SPI1_MspInit+0x84>)
 80055f6:	0019      	movs	r1, r3
 80055f8:	0010      	movs	r0, r2
 80055fa:	f002 f9c5 	bl	8007988 <HAL_GPIO_Init>


  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 80055fe:	46c0      	nop			; (mov r8, r8)
 8005600:	46bd      	mov	sp, r7
 8005602:	b009      	add	sp, #36	; 0x24
 8005604:	bd90      	pop	{r4, r7, pc}
 8005606:	46c0      	nop			; (mov r8, r8)
 8005608:	40021000 	.word	0x40021000
 800560c:	50000400 	.word	0x50000400

08005610 <SPI_GetPrescaler>:

  /* USER CODE END SPI1_MspDeInit 1 */
}

static uint32_t SPI_GetPrescaler(uint32_t clock_src_hz, uint32_t baudrate_mbps)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b086      	sub	sp, #24
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  uint32_t divisor = 0;
 800561a:	2300      	movs	r3, #0
 800561c:	617b      	str	r3, [r7, #20]
  uint32_t spi_clk = clock_src_hz;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	613b      	str	r3, [r7, #16]
  uint32_t presc = 0;
 8005622:	2300      	movs	r3, #0
 8005624:	60fb      	str	r3, [r7, #12]
    SPI_BAUDRATEPRESCALER_64,
    SPI_BAUDRATEPRESCALER_128,
    SPI_BAUDRATEPRESCALER_256,
  };

  while (spi_clk > baudrate_mbps)
 8005626:	e00d      	b.n	8005644 <SPI_GetPrescaler+0x34>
  {
    presc = baudrate[divisor];
 8005628:	4b0c      	ldr	r3, [pc, #48]	; (800565c <SPI_GetPrescaler+0x4c>)
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	0092      	lsls	r2, r2, #2
 800562e:	58d3      	ldr	r3, [r2, r3]
 8005630:	60fb      	str	r3, [r7, #12]
    if (++divisor > 7)
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	3301      	adds	r3, #1
 8005636:	617b      	str	r3, [r7, #20]
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	2b07      	cmp	r3, #7
 800563c:	d807      	bhi.n	800564e <SPI_GetPrescaler+0x3e>
    {
      break;
    }

    spi_clk = (spi_clk >> 1);
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	085b      	lsrs	r3, r3, #1
 8005642:	613b      	str	r3, [r7, #16]
  while (spi_clk > baudrate_mbps)
 8005644:	693a      	ldr	r2, [r7, #16]
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	429a      	cmp	r2, r3
 800564a:	d8ed      	bhi.n	8005628 <SPI_GetPrescaler+0x18>
 800564c:	e000      	b.n	8005650 <SPI_GetPrescaler+0x40>
      break;
 800564e:	46c0      	nop			; (mov r8, r8)
  }

  return presc;
 8005650:	68fb      	ldr	r3, [r7, #12]
}
 8005652:	0018      	movs	r0, r3
 8005654:	46bd      	mov	sp, r7
 8005656:	b006      	add	sp, #24
 8005658:	bd80      	pop	{r7, pc}
 800565a:	46c0      	nop			; (mov r8, r8)
 800565c:	0801f134 	.word	0x0801f134

08005660 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8005666:	2300      	movs	r3, #0
 8005668:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 800566a:	4b19      	ldr	r3, [pc, #100]	; (80056d0 <BSP_I2C1_Init+0x70>)
 800566c:	4a19      	ldr	r2, [pc, #100]	; (80056d4 <BSP_I2C1_Init+0x74>)
 800566e:	601a      	str	r2, [r3, #0]

  if (I2C1InitCounter++ == 0)
 8005670:	4b19      	ldr	r3, [pc, #100]	; (80056d8 <BSP_I2C1_Init+0x78>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	1c59      	adds	r1, r3, #1
 8005676:	4a18      	ldr	r2, [pc, #96]	; (80056d8 <BSP_I2C1_Init+0x78>)
 8005678:	6011      	str	r1, [r2, #0]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d123      	bne.n	80056c6 <BSP_I2C1_Init+0x66>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 800567e:	4b14      	ldr	r3, [pc, #80]	; (80056d0 <BSP_I2C1_Init+0x70>)
 8005680:	0018      	movs	r0, r3
 8005682:	f002 ff37 	bl	80084f4 <HAL_I2C_GetState>
 8005686:	1e03      	subs	r3, r0, #0
 8005688:	d11d      	bne.n	80056c6 <BSP_I2C1_Init+0x66>
    {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 800568a:	4b11      	ldr	r3, [pc, #68]	; (80056d0 <BSP_I2C1_Init+0x70>)
 800568c:	0018      	movs	r0, r3
 800568e:	f000 f873 	bl	8005778 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
#endif
      if (ret == BSP_ERROR_NONE)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d116      	bne.n	80056c6 <BSP_I2C1_Init+0x66>
      {
        /* Init the I2C */
        if (MX_I2C1_Init(&hi2c1) != HAL_OK)
 8005698:	4b0d      	ldr	r3, [pc, #52]	; (80056d0 <BSP_I2C1_Init+0x70>)
 800569a:	0018      	movs	r0, r3
 800569c:	f000 f81e 	bl	80056dc <MX_I2C1_Init>
 80056a0:	1e03      	subs	r3, r0, #0
 80056a2:	d003      	beq.n	80056ac <BSP_I2C1_Init+0x4c>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80056a4:	2308      	movs	r3, #8
 80056a6:	425b      	negs	r3, r3
 80056a8:	607b      	str	r3, [r7, #4]
 80056aa:	e00c      	b.n	80056c6 <BSP_I2C1_Init+0x66>
        }
        else if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80056ac:	4b08      	ldr	r3, [pc, #32]	; (80056d0 <BSP_I2C1_Init+0x70>)
 80056ae:	2100      	movs	r1, #0
 80056b0:	0018      	movs	r0, r3
 80056b2:	f003 f969 	bl	8008988 <HAL_I2CEx_ConfigAnalogFilter>
 80056b6:	1e03      	subs	r3, r0, #0
 80056b8:	d003      	beq.n	80056c2 <BSP_I2C1_Init+0x62>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80056ba:	2308      	movs	r3, #8
 80056bc:	425b      	negs	r3, r3
 80056be:	607b      	str	r3, [r7, #4]
 80056c0:	e001      	b.n	80056c6 <BSP_I2C1_Init+0x66>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 80056c2:	2300      	movs	r3, #0
 80056c4:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 80056c6:	687b      	ldr	r3, [r7, #4]
}
 80056c8:	0018      	movs	r0, r3
 80056ca:	46bd      	mov	sp, r7
 80056cc:	b002      	add	sp, #8
 80056ce:	bd80      	pop	{r7, pc}
 80056d0:	200013b8 	.word	0x200013b8
 80056d4:	40005400 	.word	0x40005400
 80056d8:	20000418 	.word	0x20000418

080056dc <MX_I2C1_Init>:
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef *hi2c)
{
 80056dc:	b590      	push	{r4, r7, lr}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80056e4:	240f      	movs	r4, #15
 80056e6:	193b      	adds	r3, r7, r4
 80056e8:	2200      	movs	r2, #0
 80056ea:	701a      	strb	r2, [r3, #0]
  hi2c->Instance = I2C1;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a20      	ldr	r2, [pc, #128]	; (8005770 <MX_I2C1_Init+0x94>)
 80056f0:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00707CBB;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a1f      	ldr	r2, [pc, #124]	; (8005774 <MX_I2C1_Init+0x98>)
 80056f6:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2201      	movs	r2, #1
 8005702:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	0018      	movs	r0, r3
 8005726:	f002 fbe5 	bl	8007ef4 <HAL_I2C_Init>
 800572a:	1e03      	subs	r3, r0, #0
 800572c:	d002      	beq.n	8005734 <MX_I2C1_Init+0x58>
  {
    ret = HAL_ERROR;
 800572e:	193b      	adds	r3, r7, r4
 8005730:	2201      	movs	r2, #1
 8005732:	701a      	strb	r2, [r3, #0]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2100      	movs	r1, #0
 8005738:	0018      	movs	r0, r3
 800573a:	f003 f925 	bl	8008988 <HAL_I2CEx_ConfigAnalogFilter>
 800573e:	1e03      	subs	r3, r0, #0
 8005740:	d003      	beq.n	800574a <MX_I2C1_Init+0x6e>
  {
    ret = HAL_ERROR;
 8005742:	230f      	movs	r3, #15
 8005744:	18fb      	adds	r3, r7, r3
 8005746:	2201      	movs	r2, #1
 8005748:	701a      	strb	r2, [r3, #0]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2100      	movs	r1, #0
 800574e:	0018      	movs	r0, r3
 8005750:	f003 f966 	bl	8008a20 <HAL_I2CEx_ConfigDigitalFilter>
 8005754:	1e03      	subs	r3, r0, #0
 8005756:	d003      	beq.n	8005760 <MX_I2C1_Init+0x84>
  {
    ret = HAL_ERROR;
 8005758:	230f      	movs	r3, #15
 800575a:	18fb      	adds	r3, r7, r3
 800575c:	2201      	movs	r2, #1
 800575e:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8005760:	230f      	movs	r3, #15
 8005762:	18fb      	adds	r3, r7, r3
 8005764:	781b      	ldrb	r3, [r3, #0]
}
 8005766:	0018      	movs	r0, r3
 8005768:	46bd      	mov	sp, r7
 800576a:	b005      	add	sp, #20
 800576c:	bd90      	pop	{r4, r7, pc}
 800576e:	46c0      	nop			; (mov r8, r8)
 8005770:	40005400 	.word	0x40005400
 8005774:	00707cbb 	.word	0x00707cbb

08005778 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef *i2cHandle)
{
 8005778:	b590      	push	{r4, r7, lr}
 800577a:	b089      	sub	sp, #36	; 0x24
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005780:	4b22      	ldr	r3, [pc, #136]	; (800580c <I2C1_MspInit+0x94>)
 8005782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005784:	4b21      	ldr	r3, [pc, #132]	; (800580c <I2C1_MspInit+0x94>)
 8005786:	2102      	movs	r1, #2
 8005788:	430a      	orrs	r2, r1
 800578a:	62da      	str	r2, [r3, #44]	; 0x2c
 800578c:	4b1f      	ldr	r3, [pc, #124]	; (800580c <I2C1_MspInit+0x94>)
 800578e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005790:	2202      	movs	r2, #2
 8005792:	4013      	ands	r3, r2
 8005794:	60bb      	str	r3, [r7, #8]
 8005796:	68bb      	ldr	r3, [r7, #8]
  /**I2C1 GPIO Configuration
  PB8     ------> I2C1_SCL
  PB9     ------> I2C1_SDA
    */
  GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8005798:	210c      	movs	r1, #12
 800579a:	187b      	adds	r3, r7, r1
 800579c:	2280      	movs	r2, #128	; 0x80
 800579e:	0052      	lsls	r2, r2, #1
 80057a0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80057a2:	000c      	movs	r4, r1
 80057a4:	193b      	adds	r3, r7, r4
 80057a6:	2212      	movs	r2, #18
 80057a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80057aa:	193b      	adds	r3, r7, r4
 80057ac:	2201      	movs	r2, #1
 80057ae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057b0:	193b      	adds	r3, r7, r4
 80057b2:	2203      	movs	r2, #3
 80057b4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 80057b6:	193b      	adds	r3, r7, r4
 80057b8:	2204      	movs	r2, #4
 80057ba:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 80057bc:	193b      	adds	r3, r7, r4
 80057be:	4a14      	ldr	r2, [pc, #80]	; (8005810 <I2C1_MspInit+0x98>)
 80057c0:	0019      	movs	r1, r3
 80057c2:	0010      	movs	r0, r2
 80057c4:	f002 f8e0 	bl	8007988 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 80057c8:	0021      	movs	r1, r4
 80057ca:	187b      	adds	r3, r7, r1
 80057cc:	2280      	movs	r2, #128	; 0x80
 80057ce:	0092      	lsls	r2, r2, #2
 80057d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80057d2:	187b      	adds	r3, r7, r1
 80057d4:	2212      	movs	r2, #18
 80057d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80057d8:	187b      	adds	r3, r7, r1
 80057da:	2201      	movs	r2, #1
 80057dc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057de:	187b      	adds	r3, r7, r1
 80057e0:	2203      	movs	r2, #3
 80057e2:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 80057e4:	187b      	adds	r3, r7, r1
 80057e6:	2204      	movs	r2, #4
 80057e8:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 80057ea:	187b      	adds	r3, r7, r1
 80057ec:	4a08      	ldr	r2, [pc, #32]	; (8005810 <I2C1_MspInit+0x98>)
 80057ee:	0019      	movs	r1, r3
 80057f0:	0010      	movs	r0, r2
 80057f2:	f002 f8c9 	bl	8007988 <HAL_GPIO_Init>

  /* Peripheral clock enable */
  __HAL_RCC_I2C1_CLK_ENABLE();
 80057f6:	4b05      	ldr	r3, [pc, #20]	; (800580c <I2C1_MspInit+0x94>)
 80057f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057fa:	4b04      	ldr	r3, [pc, #16]	; (800580c <I2C1_MspInit+0x94>)
 80057fc:	2180      	movs	r1, #128	; 0x80
 80057fe:	0389      	lsls	r1, r1, #14
 8005800:	430a      	orrs	r2, r1
 8005802:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8005804:	46c0      	nop			; (mov r8, r8)
 8005806:	46bd      	mov	sp, r7
 8005808:	b009      	add	sp, #36	; 0x24
 800580a:	bd90      	pop	{r4, r7, pc}
 800580c:	40021000 	.word	0x40021000
 8005810:	50000400 	.word	0x50000400

08005814 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005814:	b590      	push	{r4, r7, lr}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	0002      	movs	r2, r0
 800581c:	6039      	str	r1, [r7, #0]
 800581e:	1dfb      	adds	r3, r7, #7
 8005820:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005822:	1dfb      	adds	r3, r7, #7
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	2b7f      	cmp	r3, #127	; 0x7f
 8005828:	d828      	bhi.n	800587c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800582a:	4a2f      	ldr	r2, [pc, #188]	; (80058e8 <__NVIC_SetPriority+0xd4>)
 800582c:	1dfb      	adds	r3, r7, #7
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	b25b      	sxtb	r3, r3
 8005832:	089b      	lsrs	r3, r3, #2
 8005834:	33c0      	adds	r3, #192	; 0xc0
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	589b      	ldr	r3, [r3, r2]
 800583a:	1dfa      	adds	r2, r7, #7
 800583c:	7812      	ldrb	r2, [r2, #0]
 800583e:	0011      	movs	r1, r2
 8005840:	2203      	movs	r2, #3
 8005842:	400a      	ands	r2, r1
 8005844:	00d2      	lsls	r2, r2, #3
 8005846:	21ff      	movs	r1, #255	; 0xff
 8005848:	4091      	lsls	r1, r2
 800584a:	000a      	movs	r2, r1
 800584c:	43d2      	mvns	r2, r2
 800584e:	401a      	ands	r2, r3
 8005850:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	019b      	lsls	r3, r3, #6
 8005856:	22ff      	movs	r2, #255	; 0xff
 8005858:	401a      	ands	r2, r3
 800585a:	1dfb      	adds	r3, r7, #7
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	0018      	movs	r0, r3
 8005860:	2303      	movs	r3, #3
 8005862:	4003      	ands	r3, r0
 8005864:	00db      	lsls	r3, r3, #3
 8005866:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005868:	481f      	ldr	r0, [pc, #124]	; (80058e8 <__NVIC_SetPriority+0xd4>)
 800586a:	1dfb      	adds	r3, r7, #7
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	b25b      	sxtb	r3, r3
 8005870:	089b      	lsrs	r3, r3, #2
 8005872:	430a      	orrs	r2, r1
 8005874:	33c0      	adds	r3, #192	; 0xc0
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800587a:	e031      	b.n	80058e0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800587c:	4a1b      	ldr	r2, [pc, #108]	; (80058ec <__NVIC_SetPriority+0xd8>)
 800587e:	1dfb      	adds	r3, r7, #7
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	0019      	movs	r1, r3
 8005884:	230f      	movs	r3, #15
 8005886:	400b      	ands	r3, r1
 8005888:	3b08      	subs	r3, #8
 800588a:	089b      	lsrs	r3, r3, #2
 800588c:	3306      	adds	r3, #6
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	18d3      	adds	r3, r2, r3
 8005892:	3304      	adds	r3, #4
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	1dfa      	adds	r2, r7, #7
 8005898:	7812      	ldrb	r2, [r2, #0]
 800589a:	0011      	movs	r1, r2
 800589c:	2203      	movs	r2, #3
 800589e:	400a      	ands	r2, r1
 80058a0:	00d2      	lsls	r2, r2, #3
 80058a2:	21ff      	movs	r1, #255	; 0xff
 80058a4:	4091      	lsls	r1, r2
 80058a6:	000a      	movs	r2, r1
 80058a8:	43d2      	mvns	r2, r2
 80058aa:	401a      	ands	r2, r3
 80058ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	019b      	lsls	r3, r3, #6
 80058b2:	22ff      	movs	r2, #255	; 0xff
 80058b4:	401a      	ands	r2, r3
 80058b6:	1dfb      	adds	r3, r7, #7
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	0018      	movs	r0, r3
 80058bc:	2303      	movs	r3, #3
 80058be:	4003      	ands	r3, r0
 80058c0:	00db      	lsls	r3, r3, #3
 80058c2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80058c4:	4809      	ldr	r0, [pc, #36]	; (80058ec <__NVIC_SetPriority+0xd8>)
 80058c6:	1dfb      	adds	r3, r7, #7
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	001c      	movs	r4, r3
 80058cc:	230f      	movs	r3, #15
 80058ce:	4023      	ands	r3, r4
 80058d0:	3b08      	subs	r3, #8
 80058d2:	089b      	lsrs	r3, r3, #2
 80058d4:	430a      	orrs	r2, r1
 80058d6:	3306      	adds	r3, #6
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	18c3      	adds	r3, r0, r3
 80058dc:	3304      	adds	r3, #4
 80058de:	601a      	str	r2, [r3, #0]
}
 80058e0:	46c0      	nop			; (mov r8, r8)
 80058e2:	46bd      	mov	sp, r7
 80058e4:	b003      	add	sp, #12
 80058e6:	bd90      	pop	{r4, r7, pc}
 80058e8:	e000e100 	.word	0xe000e100
 80058ec:	e000ed00 	.word	0xe000ed00

080058f0 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b08c      	sub	sp, #48	; 0x30
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	0002      	movs	r2, r0
 80058f8:	1dfb      	adds	r3, r7, #7
 80058fa:	701a      	strb	r2, [r3, #0]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80058fc:	1dfb      	adds	r3, r7, #7
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	2b03      	cmp	r3, #3
 8005902:	d02f      	beq.n	8005964 <BSP_LED_Init+0x74>
 8005904:	dc3a      	bgt.n	800597c <BSP_LED_Init+0x8c>
 8005906:	2b02      	cmp	r3, #2
 8005908:	d01f      	beq.n	800594a <BSP_LED_Init+0x5a>
 800590a:	dc37      	bgt.n	800597c <BSP_LED_Init+0x8c>
 800590c:	2b00      	cmp	r3, #0
 800590e:	d002      	beq.n	8005916 <BSP_LED_Init+0x26>
 8005910:	2b01      	cmp	r3, #1
 8005912:	d00d      	beq.n	8005930 <BSP_LED_Init+0x40>
 8005914:	e032      	b.n	800597c <BSP_LED_Init+0x8c>
 8005916:	4b2a      	ldr	r3, [pc, #168]	; (80059c0 <BSP_LED_Init+0xd0>)
 8005918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800591a:	4b29      	ldr	r3, [pc, #164]	; (80059c0 <BSP_LED_Init+0xd0>)
 800591c:	2102      	movs	r1, #2
 800591e:	430a      	orrs	r2, r1
 8005920:	62da      	str	r2, [r3, #44]	; 0x2c
 8005922:	4b27      	ldr	r3, [pc, #156]	; (80059c0 <BSP_LED_Init+0xd0>)
 8005924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005926:	2202      	movs	r2, #2
 8005928:	4013      	ands	r3, r2
 800592a:	61bb      	str	r3, [r7, #24]
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	e025      	b.n	800597c <BSP_LED_Init+0x8c>
 8005930:	4b23      	ldr	r3, [pc, #140]	; (80059c0 <BSP_LED_Init+0xd0>)
 8005932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005934:	4b22      	ldr	r3, [pc, #136]	; (80059c0 <BSP_LED_Init+0xd0>)
 8005936:	2101      	movs	r1, #1
 8005938:	430a      	orrs	r2, r1
 800593a:	62da      	str	r2, [r3, #44]	; 0x2c
 800593c:	4b20      	ldr	r3, [pc, #128]	; (80059c0 <BSP_LED_Init+0xd0>)
 800593e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005940:	2201      	movs	r2, #1
 8005942:	4013      	ands	r3, r2
 8005944:	617b      	str	r3, [r7, #20]
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	e018      	b.n	800597c <BSP_LED_Init+0x8c>
 800594a:	4b1d      	ldr	r3, [pc, #116]	; (80059c0 <BSP_LED_Init+0xd0>)
 800594c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800594e:	4b1c      	ldr	r3, [pc, #112]	; (80059c0 <BSP_LED_Init+0xd0>)
 8005950:	2102      	movs	r1, #2
 8005952:	430a      	orrs	r2, r1
 8005954:	62da      	str	r2, [r3, #44]	; 0x2c
 8005956:	4b1a      	ldr	r3, [pc, #104]	; (80059c0 <BSP_LED_Init+0xd0>)
 8005958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800595a:	2202      	movs	r2, #2
 800595c:	4013      	ands	r3, r2
 800595e:	613b      	str	r3, [r7, #16]
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	e00b      	b.n	800597c <BSP_LED_Init+0x8c>
 8005964:	4b16      	ldr	r3, [pc, #88]	; (80059c0 <BSP_LED_Init+0xd0>)
 8005966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005968:	4b15      	ldr	r3, [pc, #84]	; (80059c0 <BSP_LED_Init+0xd0>)
 800596a:	2102      	movs	r1, #2
 800596c:	430a      	orrs	r2, r1
 800596e:	62da      	str	r2, [r3, #44]	; 0x2c
 8005970:	4b13      	ldr	r3, [pc, #76]	; (80059c0 <BSP_LED_Init+0xd0>)
 8005972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005974:	2202      	movs	r2, #2
 8005976:	4013      	ands	r3, r2
 8005978:	60fb      	str	r3, [r7, #12]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	46c0      	nop			; (mov r8, r8)

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 800597e:	1dfb      	adds	r3, r7, #7
 8005980:	781a      	ldrb	r2, [r3, #0]
 8005982:	4b10      	ldr	r3, [pc, #64]	; (80059c4 <BSP_LED_Init+0xd4>)
 8005984:	0052      	lsls	r2, r2, #1
 8005986:	5ad3      	ldrh	r3, [r2, r3]
 8005988:	001a      	movs	r2, r3
 800598a:	211c      	movs	r1, #28
 800598c:	187b      	adds	r3, r7, r1
 800598e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005990:	187b      	adds	r3, r7, r1
 8005992:	2201      	movs	r2, #1
 8005994:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005996:	187b      	adds	r3, r7, r1
 8005998:	2200      	movs	r2, #0
 800599a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800599c:	187b      	adds	r3, r7, r1
 800599e:	2203      	movs	r2, #3
 80059a0:	60da      	str	r2, [r3, #12]

  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 80059a2:	1dfb      	adds	r3, r7, #7
 80059a4:	781a      	ldrb	r2, [r3, #0]
 80059a6:	4b08      	ldr	r3, [pc, #32]	; (80059c8 <BSP_LED_Init+0xd8>)
 80059a8:	0092      	lsls	r2, r2, #2
 80059aa:	58d3      	ldr	r3, [r2, r3]
 80059ac:	187a      	adds	r2, r7, r1
 80059ae:	0011      	movs	r1, r2
 80059b0:	0018      	movs	r0, r3
 80059b2:	f001 ffe9 	bl	8007988 <HAL_GPIO_Init>
}
 80059b6:	46c0      	nop			; (mov r8, r8)
 80059b8:	46bd      	mov	sp, r7
 80059ba:	b00c      	add	sp, #48	; 0x30
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	46c0      	nop			; (mov r8, r8)
 80059c0:	40021000 	.word	0x40021000
 80059c4:	0801f154 	.word	0x0801f154
 80059c8:	2000004c 	.word	0x2000004c

080059cc <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	0002      	movs	r2, r0
 80059d4:	1dfb      	adds	r3, r7, #7
 80059d6:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80059d8:	1dfb      	adds	r3, r7, #7
 80059da:	781a      	ldrb	r2, [r3, #0]
 80059dc:	4b07      	ldr	r3, [pc, #28]	; (80059fc <BSP_LED_On+0x30>)
 80059de:	0092      	lsls	r2, r2, #2
 80059e0:	58d0      	ldr	r0, [r2, r3]
 80059e2:	1dfb      	adds	r3, r7, #7
 80059e4:	781a      	ldrb	r2, [r3, #0]
 80059e6:	4b06      	ldr	r3, [pc, #24]	; (8005a00 <BSP_LED_On+0x34>)
 80059e8:	0052      	lsls	r2, r2, #1
 80059ea:	5ad3      	ldrh	r3, [r2, r3]
 80059ec:	2201      	movs	r2, #1
 80059ee:	0019      	movs	r1, r3
 80059f0:	f002 fa47 	bl	8007e82 <HAL_GPIO_WritePin>
}
 80059f4:	46c0      	nop			; (mov r8, r8)
 80059f6:	46bd      	mov	sp, r7
 80059f8:	b002      	add	sp, #8
 80059fa:	bd80      	pop	{r7, pc}
 80059fc:	2000004c 	.word	0x2000004c
 8005a00:	0801f154 	.word	0x0801f154

08005a04 <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	0002      	movs	r2, r0
 8005a0c:	1dfb      	adds	r3, r7, #7
 8005a0e:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8005a10:	1dfb      	adds	r3, r7, #7
 8005a12:	781a      	ldrb	r2, [r3, #0]
 8005a14:	4b07      	ldr	r3, [pc, #28]	; (8005a34 <BSP_LED_Off+0x30>)
 8005a16:	0092      	lsls	r2, r2, #2
 8005a18:	58d0      	ldr	r0, [r2, r3]
 8005a1a:	1dfb      	adds	r3, r7, #7
 8005a1c:	781a      	ldrb	r2, [r3, #0]
 8005a1e:	4b06      	ldr	r3, [pc, #24]	; (8005a38 <BSP_LED_Off+0x34>)
 8005a20:	0052      	lsls	r2, r2, #1
 8005a22:	5ad3      	ldrh	r3, [r2, r3]
 8005a24:	2200      	movs	r2, #0
 8005a26:	0019      	movs	r1, r3
 8005a28:	f002 fa2b 	bl	8007e82 <HAL_GPIO_WritePin>
}
 8005a2c:	46c0      	nop			; (mov r8, r8)
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	b002      	add	sp, #8
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	2000004c 	.word	0x2000004c
 8005a38:	0801f154 	.word	0x0801f154

08005a3c <BSP_LED_Toggle>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	0002      	movs	r2, r0
 8005a44:	1dfb      	adds	r3, r7, #7
 8005a46:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8005a48:	1dfb      	adds	r3, r7, #7
 8005a4a:	781a      	ldrb	r2, [r3, #0]
 8005a4c:	4b07      	ldr	r3, [pc, #28]	; (8005a6c <BSP_LED_Toggle+0x30>)
 8005a4e:	0092      	lsls	r2, r2, #2
 8005a50:	58d0      	ldr	r0, [r2, r3]
 8005a52:	1dfb      	adds	r3, r7, #7
 8005a54:	781a      	ldrb	r2, [r3, #0]
 8005a56:	4b06      	ldr	r3, [pc, #24]	; (8005a70 <BSP_LED_Toggle+0x34>)
 8005a58:	0052      	lsls	r2, r2, #1
 8005a5a:	5ad3      	ldrh	r3, [r2, r3]
 8005a5c:	0019      	movs	r1, r3
 8005a5e:	f002 fa2d 	bl	8007ebc <HAL_GPIO_TogglePin>
}
 8005a62:	46c0      	nop			; (mov r8, r8)
 8005a64:	46bd      	mov	sp, r7
 8005a66:	b002      	add	sp, #8
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	46c0      	nop			; (mov r8, r8)
 8005a6c:	2000004c 	.word	0x2000004c
 8005a70:	0801f154 	.word	0x0801f154

08005a74 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b088      	sub	sp, #32
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	0002      	movs	r2, r0
 8005a7c:	1dfb      	adds	r3, r7, #7
 8005a7e:	701a      	strb	r2, [r3, #0]
 8005a80:	1dbb      	adds	r3, r7, #6
 8005a82:	1c0a      	adds	r2, r1, #0
 8005a84:	701a      	strb	r2, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8005a86:	4b2b      	ldr	r3, [pc, #172]	; (8005b34 <BSP_PB_Init+0xc0>)
 8005a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a8a:	4b2a      	ldr	r3, [pc, #168]	; (8005b34 <BSP_PB_Init+0xc0>)
 8005a8c:	2102      	movs	r1, #2
 8005a8e:	430a      	orrs	r2, r1
 8005a90:	62da      	str	r2, [r3, #44]	; 0x2c
 8005a92:	4b28      	ldr	r3, [pc, #160]	; (8005b34 <BSP_PB_Init+0xc0>)
 8005a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a96:	2202      	movs	r2, #2
 8005a98:	4013      	ands	r3, r2
 8005a9a:	60bb      	str	r3, [r7, #8]
 8005a9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a9e:	4b25      	ldr	r3, [pc, #148]	; (8005b34 <BSP_PB_Init+0xc0>)
 8005aa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005aa2:	4b24      	ldr	r3, [pc, #144]	; (8005b34 <BSP_PB_Init+0xc0>)
 8005aa4:	2101      	movs	r1, #1
 8005aa6:	430a      	orrs	r2, r1
 8005aa8:	635a      	str	r2, [r3, #52]	; 0x34

  if (ButtonMode == BUTTON_MODE_GPIO)
 8005aaa:	1dbb      	adds	r3, r7, #6
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d117      	bne.n	8005ae2 <BSP_PB_Init+0x6e>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8005ab2:	2304      	movs	r3, #4
 8005ab4:	001a      	movs	r2, r3
 8005ab6:	210c      	movs	r1, #12
 8005ab8:	187b      	adds	r3, r7, r1
 8005aba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005abc:	187b      	adds	r3, r7, r1
 8005abe:	2200      	movs	r2, #0
 8005ac0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005ac2:	187b      	adds	r3, r7, r1
 8005ac4:	2202      	movs	r2, #2
 8005ac6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ac8:	187b      	adds	r3, r7, r1
 8005aca:	2203      	movs	r2, #3
 8005acc:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8005ace:	1dfb      	adds	r3, r7, #7
 8005ad0:	781a      	ldrb	r2, [r3, #0]
 8005ad2:	4b19      	ldr	r3, [pc, #100]	; (8005b38 <BSP_PB_Init+0xc4>)
 8005ad4:	0092      	lsls	r2, r2, #2
 8005ad6:	58d3      	ldr	r3, [r2, r3]
 8005ad8:	187a      	adds	r2, r7, r1
 8005ada:	0011      	movs	r1, r2
 8005adc:	0018      	movs	r0, r3
 8005ade:	f001 ff53 	bl	8007988 <HAL_GPIO_Init>
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
 8005ae2:	1dbb      	adds	r3, r7, #6
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d11f      	bne.n	8005b2a <BSP_PB_Init+0xb6>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8005aea:	2304      	movs	r3, #4
 8005aec:	001a      	movs	r2, r3
 8005aee:	210c      	movs	r1, #12
 8005af0:	187b      	adds	r3, r7, r1
 8005af2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005af4:	187b      	adds	r3, r7, r1
 8005af6:	2200      	movs	r2, #0
 8005af8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005afa:	187b      	adds	r3, r7, r1
 8005afc:	4a0f      	ldr	r2, [pc, #60]	; (8005b3c <BSP_PB_Init+0xc8>)
 8005afe:	605a      	str	r2, [r3, #4]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8005b00:	1dfb      	adds	r3, r7, #7
 8005b02:	781a      	ldrb	r2, [r3, #0]
 8005b04:	4b0c      	ldr	r3, [pc, #48]	; (8005b38 <BSP_PB_Init+0xc4>)
 8005b06:	0092      	lsls	r2, r2, #2
 8005b08:	58d3      	ldr	r3, [r2, r3]
 8005b0a:	187a      	adds	r2, r7, r1
 8005b0c:	0011      	movs	r1, r2
 8005b0e:	0018      	movs	r0, r3
 8005b10:	f001 ff3a 	bl	8007988 <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x03);
 8005b14:	2306      	movs	r3, #6
 8005b16:	b25b      	sxtb	r3, r3
 8005b18:	2103      	movs	r1, #3
 8005b1a:	0018      	movs	r0, r3
 8005b1c:	f7ff fe7a 	bl	8005814 <__NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8005b20:	2306      	movs	r3, #6
 8005b22:	b25b      	sxtb	r3, r3
 8005b24:	0018      	movs	r0, r3
 8005b26:	f001 fa4a 	bl	8006fbe <HAL_NVIC_EnableIRQ>
  }
}
 8005b2a:	46c0      	nop			; (mov r8, r8)
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	b008      	add	sp, #32
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	46c0      	nop			; (mov r8, r8)
 8005b34:	40021000 	.word	0x40021000
 8005b38:	2000005c 	.word	0x2000005c
 8005b3c:	10110000 	.word	0x10110000

08005b40 <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>:
static void CMWX1ZZABZ0XX_RADIO_SPI_IoInit(SPI_HandleTypeDef *spiHandle);
static void CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit(void);

/* Exported functions ---------------------------------------------------------*/
uint32_t CMWX1ZZABZ0XX_RADIO_GetWakeUpTime(void)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	af00      	add	r7, sp, #0
  return  BOARD_WAKEUP_TIME;
 8005b44:	2305      	movs	r3, #5
}
 8005b46:	0018      	movs	r0, r3
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <CMWX1ZZABZ0XX_RADIO_SetXO>:

void CMWX1ZZABZ0XX_RADIO_SetXO(uint8_t state)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	0002      	movs	r2, r0
 8005b54:	1dfb      	adds	r3, r7, #7
 8005b56:	701a      	strb	r2, [r3, #0]

  if (state == SET)
 8005b58:	1dfb      	adds	r3, r7, #7
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d10b      	bne.n	8005b78 <CMWX1ZZABZ0XX_RADIO_SetXO+0x2c>
  {
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_SET);
 8005b60:	2380      	movs	r3, #128	; 0x80
 8005b62:	0159      	lsls	r1, r3, #5
 8005b64:	23a0      	movs	r3, #160	; 0xa0
 8005b66:	05db      	lsls	r3, r3, #23
 8005b68:	2201      	movs	r2, #1
 8005b6a:	0018      	movs	r0, r3
 8005b6c:	f002 f989 	bl	8007e82 <HAL_GPIO_WritePin>

    HAL_Delay(BOARD_WAKEUP_TIME);   //start up time of TCXO
 8005b70:	2005      	movs	r0, #5
 8005b72:	f7ff f92c 	bl	8004dce <HAL_Delay>
  }
  else
  {
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_RESET);
  }
}
 8005b76:	e007      	b.n	8005b88 <CMWX1ZZABZ0XX_RADIO_SetXO+0x3c>
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_RESET);
 8005b78:	2380      	movs	r3, #128	; 0x80
 8005b7a:	0159      	lsls	r1, r3, #5
 8005b7c:	23a0      	movs	r3, #160	; 0xa0
 8005b7e:	05db      	lsls	r3, r3, #23
 8005b80:	2200      	movs	r2, #0
 8005b82:	0018      	movs	r0, r3
 8005b84:	f002 f97d 	bl	8007e82 <HAL_GPIO_WritePin>
}
 8005b88:	46c0      	nop			; (mov r8, r8)
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	b002      	add	sp, #8
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <CMWX1ZZABZ0XX_RADIO_IoInit>:
void CMWX1ZZABZ0XX_RADIO_IoInit(void)
{
 8005b90:	b590      	push	{r4, r7, lr}
 8005b92:	b0a7      	sub	sp, #156	; 0x9c
 8005b94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct = {0};
 8005b96:	2480      	movs	r4, #128	; 0x80
 8005b98:	193b      	adds	r3, r7, r4
 8005b9a:	0018      	movs	r0, r3
 8005b9c:	2314      	movs	r3, #20
 8005b9e:	001a      	movs	r2, r3
 8005ba0:	2100      	movs	r1, #0
 8005ba2:	f018 f9ba 	bl	801df1a <memset>
  SPI_HandleTypeDef dummy_hspi;

  /* Enable DIO GPIO clock */
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8005ba6:	4b78      	ldr	r3, [pc, #480]	; (8005d88 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005baa:	4b77      	ldr	r3, [pc, #476]	; (8005d88 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005bac:	2102      	movs	r1, #2
 8005bae:	430a      	orrs	r2, r1
 8005bb0:	62da      	str	r2, [r3, #44]	; 0x2c
 8005bb2:	4b75      	ldr	r3, [pc, #468]	; (8005d88 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb6:	2202      	movs	r2, #2
 8005bb8:	4013      	ands	r3, r2
 8005bba:	627b      	str	r3, [r7, #36]	; 0x24
 8005bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8005bbe:	4b72      	ldr	r3, [pc, #456]	; (8005d88 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bc2:	4b71      	ldr	r3, [pc, #452]	; (8005d88 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005bc4:	2102      	movs	r1, #2
 8005bc6:	430a      	orrs	r2, r1
 8005bc8:	62da      	str	r2, [r3, #44]	; 0x2c
 8005bca:	4b6f      	ldr	r3, [pc, #444]	; (8005d88 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bce:	2202      	movs	r2, #2
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	623b      	str	r3, [r7, #32]
 8005bd4:	6a3b      	ldr	r3, [r7, #32]
  RADIO_DIO_2_GPIO_CLK_ENABLE();
 8005bd6:	4b6c      	ldr	r3, [pc, #432]	; (8005d88 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bda:	4b6b      	ldr	r3, [pc, #428]	; (8005d88 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005bdc:	2102      	movs	r1, #2
 8005bde:	430a      	orrs	r2, r1
 8005be0:	62da      	str	r2, [r3, #44]	; 0x2c
 8005be2:	4b69      	ldr	r3, [pc, #420]	; (8005d88 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be6:	2202      	movs	r2, #2
 8005be8:	4013      	ands	r3, r2
 8005bea:	61fb      	str	r3, [r7, #28]
 8005bec:	69fb      	ldr	r3, [r7, #28]
  RADIO_DIO_3_GPIO_CLK_ENABLE();
 8005bee:	4b66      	ldr	r3, [pc, #408]	; (8005d88 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bf2:	4b65      	ldr	r3, [pc, #404]	; (8005d88 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005bf4:	2104      	movs	r1, #4
 8005bf6:	430a      	orrs	r2, r1
 8005bf8:	62da      	str	r2, [r3, #44]	; 0x2c
 8005bfa:	4b63      	ldr	r3, [pc, #396]	; (8005d88 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bfe:	2204      	movs	r2, #4
 8005c00:	4013      	ands	r3, r2
 8005c02:	61bb      	str	r3, [r7, #24]
 8005c04:	69bb      	ldr	r3, [r7, #24]
#if( RADIO_DIOn > 5 )
  RADIO_DIO_5_GPIO_CLK_ENABLE();
#endif

  /* DIO IO Init */
  initStruct.Pull = GPIO_PULLDOWN;
 8005c06:	193b      	adds	r3, r7, r4
 8005c08:	2202      	movs	r2, #2
 8005c0a:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8005c0c:	193b      	adds	r3, r7, r4
 8005c0e:	2203      	movs	r2, #3
 8005c10:	60da      	str	r2, [r3, #12]

  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8005c12:	2300      	movs	r3, #0
 8005c14:	2294      	movs	r2, #148	; 0x94
 8005c16:	18ba      	adds	r2, r7, r2
 8005c18:	6013      	str	r3, [r2, #0]
 8005c1a:	e020      	b.n	8005c5e <CMWX1ZZABZ0XX_RADIO_IoInit+0xce>
  {
    initStruct.Mode = RADIO_DIO_MODE[i];
 8005c1c:	4b5b      	ldr	r3, [pc, #364]	; (8005d8c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1fc>)
 8005c1e:	2194      	movs	r1, #148	; 0x94
 8005c20:	187a      	adds	r2, r7, r1
 8005c22:	6812      	ldr	r2, [r2, #0]
 8005c24:	0092      	lsls	r2, r2, #2
 8005c26:	58d2      	ldr	r2, [r2, r3]
 8005c28:	2080      	movs	r0, #128	; 0x80
 8005c2a:	183b      	adds	r3, r7, r0
 8005c2c:	605a      	str	r2, [r3, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8005c2e:	4b58      	ldr	r3, [pc, #352]	; (8005d90 <CMWX1ZZABZ0XX_RADIO_IoInit+0x200>)
 8005c30:	187a      	adds	r2, r7, r1
 8005c32:	6812      	ldr	r2, [r2, #0]
 8005c34:	0052      	lsls	r2, r2, #1
 8005c36:	5ad3      	ldrh	r3, [r2, r3]
 8005c38:	001a      	movs	r2, r3
 8005c3a:	183b      	adds	r3, r7, r0
 8005c3c:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8005c3e:	4b55      	ldr	r3, [pc, #340]	; (8005d94 <CMWX1ZZABZ0XX_RADIO_IoInit+0x204>)
 8005c40:	000c      	movs	r4, r1
 8005c42:	187a      	adds	r2, r7, r1
 8005c44:	6812      	ldr	r2, [r2, #0]
 8005c46:	0092      	lsls	r2, r2, #2
 8005c48:	58d3      	ldr	r3, [r2, r3]
 8005c4a:	183a      	adds	r2, r7, r0
 8005c4c:	0011      	movs	r1, r2
 8005c4e:	0018      	movs	r0, r3
 8005c50:	f001 fe9a 	bl	8007988 <HAL_GPIO_Init>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8005c54:	193b      	adds	r3, r7, r4
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	3301      	adds	r3, #1
 8005c5a:	193a      	adds	r2, r7, r4
 8005c5c:	6013      	str	r3, [r2, #0]
 8005c5e:	2394      	movs	r3, #148	; 0x94
 8005c60:	18fb      	adds	r3, r7, r3
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2b03      	cmp	r3, #3
 8005c66:	d9d9      	bls.n	8005c1c <CMWX1ZZABZ0XX_RADIO_IoInit+0x8c>
  }


  /* SPI IO Init */
  /* Normally done by the HAL_MSP callback but not for this applic */
  CMWX1ZZABZ0XX_RADIO_SPI_IoInit(&dummy_hspi);
 8005c68:	2328      	movs	r3, #40	; 0x28
 8005c6a:	18fb      	adds	r3, r7, r3
 8005c6c:	0018      	movs	r0, r3
 8005c6e:	f000 fa07 	bl	8006080 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit>

  /* NSS initialization */
  initStruct.Pin = RADIO_NSS_PIN;
 8005c72:	2480      	movs	r4, #128	; 0x80
 8005c74:	193b      	adds	r3, r7, r4
 8005c76:	2280      	movs	r2, #128	; 0x80
 8005c78:	0212      	lsls	r2, r2, #8
 8005c7a:	601a      	str	r2, [r3, #0]
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c7c:	193b      	adds	r3, r7, r4
 8005c7e:	2201      	movs	r2, #1
 8005c80:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_PULLUP;
 8005c82:	193b      	adds	r3, r7, r4
 8005c84:	2201      	movs	r2, #1
 8005c86:	609a      	str	r2, [r3, #8]

  /* Enable NSS */
  RADIO_NSS_CLK_ENABLE();
 8005c88:	4b3f      	ldr	r3, [pc, #252]	; (8005d88 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c8c:	4b3e      	ldr	r3, [pc, #248]	; (8005d88 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005c8e:	2101      	movs	r1, #1
 8005c90:	430a      	orrs	r2, r1
 8005c92:	62da      	str	r2, [r3, #44]	; 0x2c
 8005c94:	4b3c      	ldr	r3, [pc, #240]	; (8005d88 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c98:	2201      	movs	r2, #1
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	617b      	str	r3, [r7, #20]
 8005c9e:	697b      	ldr	r3, [r7, #20]
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 8005ca0:	193a      	adds	r2, r7, r4
 8005ca2:	23a0      	movs	r3, #160	; 0xa0
 8005ca4:	05db      	lsls	r3, r3, #23
 8005ca6:	0011      	movs	r1, r2
 8005ca8:	0018      	movs	r0, r3
 8005caa:	f001 fe6d 	bl	8007988 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 8005cae:	2380      	movs	r3, #128	; 0x80
 8005cb0:	0219      	lsls	r1, r3, #8
 8005cb2:	23a0      	movs	r3, #160	; 0xa0
 8005cb4:	05db      	lsls	r3, r3, #23
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	0018      	movs	r0, r3
 8005cba:	f002 f8e2 	bl	8007e82 <HAL_GPIO_WritePin>

  /* Antenna IO Init */
  RADIO_TCXO_VCC_CLK_ENABLE();
 8005cbe:	4b32      	ldr	r3, [pc, #200]	; (8005d88 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cc2:	4b31      	ldr	r3, [pc, #196]	; (8005d88 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005cc4:	2101      	movs	r1, #1
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	62da      	str	r2, [r3, #44]	; 0x2c
 8005cca:	4b2f      	ldr	r3, [pc, #188]	; (8005d88 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cce:	2201      	movs	r2, #1
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	613b      	str	r3, [r7, #16]
 8005cd4:	693b      	ldr	r3, [r7, #16]
  RADIO_ANT_SWITCH_CLK_ENABLE_RX();
 8005cd6:	4b2c      	ldr	r3, [pc, #176]	; (8005d88 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cda:	4b2b      	ldr	r3, [pc, #172]	; (8005d88 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005cdc:	2101      	movs	r1, #1
 8005cde:	430a      	orrs	r2, r1
 8005ce0:	62da      	str	r2, [r3, #44]	; 0x2c
 8005ce2:	4b29      	ldr	r3, [pc, #164]	; (8005d88 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	4013      	ands	r3, r2
 8005cea:	60fb      	str	r3, [r7, #12]
 8005cec:	68fb      	ldr	r3, [r7, #12]
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_BOOST();
 8005cee:	4b26      	ldr	r3, [pc, #152]	; (8005d88 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cf2:	4b25      	ldr	r3, [pc, #148]	; (8005d88 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005cf4:	2104      	movs	r1, #4
 8005cf6:	430a      	orrs	r2, r1
 8005cf8:	62da      	str	r2, [r3, #44]	; 0x2c
 8005cfa:	4b23      	ldr	r3, [pc, #140]	; (8005d88 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cfe:	2204      	movs	r2, #4
 8005d00:	4013      	ands	r3, r2
 8005d02:	60bb      	str	r3, [r7, #8]
 8005d04:	68bb      	ldr	r3, [r7, #8]
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_RFO();
 8005d06:	4b20      	ldr	r3, [pc, #128]	; (8005d88 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d0a:	4b1f      	ldr	r3, [pc, #124]	; (8005d88 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005d0c:	2104      	movs	r1, #4
 8005d0e:	430a      	orrs	r2, r1
 8005d10:	62da      	str	r2, [r3, #44]	; 0x2c
 8005d12:	4b1d      	ldr	r3, [pc, #116]	; (8005d88 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d16:	2204      	movs	r2, #4
 8005d18:	4013      	ands	r3, r2
 8005d1a:	607b      	str	r3, [r7, #4]
 8005d1c:	687b      	ldr	r3, [r7, #4]


  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005d1e:	193b      	adds	r3, r7, r4
 8005d20:	2201      	movs	r2, #1
 8005d22:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_NOPULL;
 8005d24:	193b      	adds	r3, r7, r4
 8005d26:	2200      	movs	r2, #0
 8005d28:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8005d2a:	193b      	adds	r3, r7, r4
 8005d2c:	2203      	movs	r2, #3
 8005d2e:	60da      	str	r2, [r3, #12]

  initStruct.Pin = RADIO_TCXO_VCC_PIN;
 8005d30:	193b      	adds	r3, r7, r4
 8005d32:	2280      	movs	r2, #128	; 0x80
 8005d34:	0152      	lsls	r2, r2, #5
 8005d36:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_TCXO_VCC_PORT, &initStruct);
 8005d38:	193a      	adds	r2, r7, r4
 8005d3a:	23a0      	movs	r3, #160	; 0xa0
 8005d3c:	05db      	lsls	r3, r3, #23
 8005d3e:	0011      	movs	r1, r2
 8005d40:	0018      	movs	r0, r3
 8005d42:	f001 fe21 	bl	8007988 <HAL_GPIO_Init>

  initStruct.Pin = RADIO_ANT_SWITCH_PIN_RX;
 8005d46:	193b      	adds	r3, r7, r4
 8005d48:	2202      	movs	r2, #2
 8005d4a:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_RX, &initStruct);
 8005d4c:	193a      	adds	r2, r7, r4
 8005d4e:	23a0      	movs	r3, #160	; 0xa0
 8005d50:	05db      	lsls	r3, r3, #23
 8005d52:	0011      	movs	r1, r2
 8005d54:	0018      	movs	r0, r3
 8005d56:	f001 fe17 	bl	8007988 <HAL_GPIO_Init>

  initStruct.Pin = RADIO_ANT_SWITCH_PIN_TX_BOOST;
 8005d5a:	193b      	adds	r3, r7, r4
 8005d5c:	2202      	movs	r2, #2
 8005d5e:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_BOOST, &initStruct);
 8005d60:	193b      	adds	r3, r7, r4
 8005d62:	4a0d      	ldr	r2, [pc, #52]	; (8005d98 <CMWX1ZZABZ0XX_RADIO_IoInit+0x208>)
 8005d64:	0019      	movs	r1, r3
 8005d66:	0010      	movs	r0, r2
 8005d68:	f001 fe0e 	bl	8007988 <HAL_GPIO_Init>

  initStruct.Pin = RADIO_ANT_SWITCH_PIN_TX_RFO;
 8005d6c:	193b      	adds	r3, r7, r4
 8005d6e:	2204      	movs	r2, #4
 8005d70:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_RFO, &initStruct);
 8005d72:	193b      	adds	r3, r7, r4
 8005d74:	4a08      	ldr	r2, [pc, #32]	; (8005d98 <CMWX1ZZABZ0XX_RADIO_IoInit+0x208>)
 8005d76:	0019      	movs	r1, r3
 8005d78:	0010      	movs	r0, r2
 8005d7a:	f001 fe05 	bl	8007988 <HAL_GPIO_Init>
}
 8005d7e:	46c0      	nop			; (mov r8, r8)
 8005d80:	46bd      	mov	sp, r7
 8005d82:	b027      	add	sp, #156	; 0x9c
 8005d84:	bd90      	pop	{r4, r7, pc}
 8005d86:	46c0      	nop			; (mov r8, r8)
 8005d88:	40021000 	.word	0x40021000
 8005d8c:	0801f190 	.word	0x0801f190
 8005d90:	0801f188 	.word	0x0801f188
 8005d94:	20000060 	.word	0x20000060
 8005d98:	50000800 	.word	0x50000800

08005d9c <CMWX1ZZABZ0XX_RADIO_IoDeInit>:

void CMWX1ZZABZ0XX_RADIO_IoDeInit(void)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b086      	sub	sp, #24
 8005da0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct = {0};
 8005da2:	003b      	movs	r3, r7
 8005da4:	0018      	movs	r0, r3
 8005da6:	2314      	movs	r3, #20
 8005da8:	001a      	movs	r2, r3
 8005daa:	2100      	movs	r1, #0
 8005dac:	f018 f8b5 	bl	801df1a <memset>

  /* DIO IO DeInit */

  initStruct.Pull = GPIO_PULLDOWN;
 8005db0:	003b      	movs	r3, r7
 8005db2:	2202      	movs	r2, #2
 8005db4:	609a      	str	r2, [r3, #8]

  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8005db6:	2300      	movs	r3, #0
 8005db8:	617b      	str	r3, [r7, #20]
 8005dba:	e018      	b.n	8005dee <CMWX1ZZABZ0XX_RADIO_IoDeInit+0x52>
  {
    initStruct.Mode = RADIO_DIO_MODE[i];
 8005dbc:	4b10      	ldr	r3, [pc, #64]	; (8005e00 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0x64>)
 8005dbe:	697a      	ldr	r2, [r7, #20]
 8005dc0:	0092      	lsls	r2, r2, #2
 8005dc2:	58d2      	ldr	r2, [r2, r3]
 8005dc4:	003b      	movs	r3, r7
 8005dc6:	605a      	str	r2, [r3, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8005dc8:	4b0e      	ldr	r3, [pc, #56]	; (8005e04 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0x68>)
 8005dca:	697a      	ldr	r2, [r7, #20]
 8005dcc:	0052      	lsls	r2, r2, #1
 8005dce:	5ad3      	ldrh	r3, [r2, r3]
 8005dd0:	001a      	movs	r2, r3
 8005dd2:	003b      	movs	r3, r7
 8005dd4:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8005dd6:	4b0c      	ldr	r3, [pc, #48]	; (8005e08 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0x6c>)
 8005dd8:	697a      	ldr	r2, [r7, #20]
 8005dda:	0092      	lsls	r2, r2, #2
 8005ddc:	58d3      	ldr	r3, [r2, r3]
 8005dde:	003a      	movs	r2, r7
 8005de0:	0011      	movs	r1, r2
 8005de2:	0018      	movs	r0, r3
 8005de4:	f001 fdd0 	bl	8007988 <HAL_GPIO_Init>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	3301      	adds	r3, #1
 8005dec:	617b      	str	r3, [r7, #20]
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	2b03      	cmp	r3, #3
 8005df2:	d9e3      	bls.n	8005dbc <CMWX1ZZABZ0XX_RADIO_IoDeInit+0x20>
  }

  /* SPI IO DeInit */
  CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit();
 8005df4:	f000 f9a4 	bl	8006140 <CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit>
  /* NSS IO DeInit is not done */

  /* Antenna IO DeInit is not done */

  /* Reset IO DeInit is not done */
}
 8005df8:	46c0      	nop			; (mov r8, r8)
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	b006      	add	sp, #24
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	0801f190 	.word	0x0801f190
 8005e04:	0801f188 	.word	0x0801f188
 8005e08:	20000060 	.word	0x20000060

08005e0c <CMWX1ZZABZ0XX_RADIO_IoIrqInit>:

void CMWX1ZZABZ0XX_RADIO_IoIrqInit(DioIrqHandler **irqHandlers)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b086      	sub	sp, #24
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e14:	f3ef 8310 	mrs	r3, PRIMASK
 8005e18:	60fb      	str	r3, [r7, #12]
  return(result);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
  CRITICAL_SECTION_BEGIN();
 8005e1c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005e1e:	b672      	cpsid	i
}
 8005e20:	46c0      	nop			; (mov r8, r8)
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8005e22:	2300      	movs	r3, #0
 8005e24:	617b      	str	r3, [r7, #20]
 8005e26:	e02f      	b.n	8005e88 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x7c>
  {
    HAL_EXTI_GetHandle(&hRADIO_DIO_exti[i], RADIO_DIO_EXTI_LINE[i]);
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	00da      	lsls	r2, r3, #3
 8005e2c:	4b1d      	ldr	r3, [pc, #116]	; (8005ea4 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x98>)
 8005e2e:	18d0      	adds	r0, r2, r3
 8005e30:	4b1d      	ldr	r3, [pc, #116]	; (8005ea8 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x9c>)
 8005e32:	697a      	ldr	r2, [r7, #20]
 8005e34:	0092      	lsls	r2, r2, #2
 8005e36:	58d3      	ldr	r3, [r2, r3]
 8005e38:	0019      	movs	r1, r3
 8005e3a:	f001 fba1 	bl	8007580 <HAL_EXTI_GetHandle>
    HAL_EXTI_RegisterCallback(&hRADIO_DIO_exti[i], HAL_EXTI_COMMON_CB_ID, irqHandlers[i]);
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	00da      	lsls	r2, r3, #3
 8005e42:	4b18      	ldr	r3, [pc, #96]	; (8005ea4 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x98>)
 8005e44:	18d0      	adds	r0, r2, r3
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	18d3      	adds	r3, r2, r3
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	001a      	movs	r2, r3
 8005e52:	2100      	movs	r1, #0
 8005e54:	f001 fb73 	bl	800753e <HAL_EXTI_RegisterCallback>
    HAL_NVIC_SetPriority(RADIO_DIO_IRQn[i], RADIO_DIO_IT_PRIO[i], 0x00);
 8005e58:	4a14      	ldr	r2, [pc, #80]	; (8005eac <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0xa0>)
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	18d3      	adds	r3, r2, r3
 8005e5e:	2000      	movs	r0, #0
 8005e60:	5618      	ldrsb	r0, [r3, r0]
 8005e62:	4b13      	ldr	r3, [pc, #76]	; (8005eb0 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0xa4>)
 8005e64:	697a      	ldr	r2, [r7, #20]
 8005e66:	0092      	lsls	r2, r2, #2
 8005e68:	58d3      	ldr	r3, [r2, r3]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	0019      	movs	r1, r3
 8005e6e:	f001 f891 	bl	8006f94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RADIO_DIO_IRQn[i]);
 8005e72:	4a0e      	ldr	r2, [pc, #56]	; (8005eac <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0xa0>)
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	18d3      	adds	r3, r2, r3
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	b25b      	sxtb	r3, r3
 8005e7c:	0018      	movs	r0, r3
 8005e7e:	f001 f89e 	bl	8006fbe <HAL_NVIC_EnableIRQ>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	3301      	adds	r3, #1
 8005e86:	617b      	str	r3, [r7, #20]
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	2b03      	cmp	r3, #3
 8005e8c:	d9cc      	bls.n	8005e28 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x1c>
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	f383 8810 	msr	PRIMASK, r3
}
 8005e98:	46c0      	nop			; (mov r8, r8)
  }
  CRITICAL_SECTION_END();
}
 8005e9a:	46c0      	nop			; (mov r8, r8)
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	b006      	add	sp, #24
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	46c0      	nop			; (mov r8, r8)
 8005ea4:	200016f4 	.word	0x200016f4
 8005ea8:	0801f164 	.word	0x0801f164
 8005eac:	0801f184 	.word	0x0801f184
 8005eb0:	0801f174 	.word	0x0801f174

08005eb4 <CMWX1ZZABZ0XX_RADIO_GetPaSelect>:
{
  HAL_EXTI_IRQHandler(&hRADIO_DIO_exti[DIO]);
}

TxConfig_TypeDef CMWX1ZZABZ0XX_RADIO_GetPaSelect(uint32_t channel)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b082      	sub	sp, #8
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  return CONF_RFO_LP_HP;
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	0018      	movs	r0, r3
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	b002      	add	sp, #8
 8005ec4:	bd80      	pop	{r7, pc}
	...

08005ec8 <CMWX1ZZABZ0XX_RADIO_SetAntSw>:



void CMWX1ZZABZ0XX_RADIO_SetAntSw(RfSw_TypeDef state)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	0002      	movs	r2, r0
 8005ed0:	1dfb      	adds	r3, r7, #7
 8005ed2:	701a      	strb	r2, [r3, #0]

  switch (state)
 8005ed4:	1dfb      	adds	r3, r7, #7
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	2b04      	cmp	r3, #4
 8005eda:	d82e      	bhi.n	8005f3a <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x72>
 8005edc:	009a      	lsls	r2, r3, #2
 8005ede:	4b23      	ldr	r3, [pc, #140]	; (8005f6c <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa4>)
 8005ee0:	18d3      	adds	r3, r2, r3
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	469f      	mov	pc, r3
  {
    case RFSW_RX:
    {
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, GPIO_PIN_SET);
 8005ee6:	23a0      	movs	r3, #160	; 0xa0
 8005ee8:	05db      	lsls	r3, r3, #23
 8005eea:	2201      	movs	r2, #1
 8005eec:	2102      	movs	r1, #2
 8005eee:	0018      	movs	r0, r3
 8005ef0:	f001 ffc7 	bl	8007e82 <HAL_GPIO_WritePin>
      break;
 8005ef4:	e036      	b.n	8005f64 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x9c>
    }
    case RFSW_RFO_LP:
    {
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, GPIO_PIN_SET);
 8005ef6:	4b1e      	ldr	r3, [pc, #120]	; (8005f70 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 8005ef8:	2201      	movs	r2, #1
 8005efa:	2104      	movs	r1, #4
 8005efc:	0018      	movs	r0, r3
 8005efe:	f001 ffc0 	bl	8007e82 <HAL_GPIO_WritePin>
      break;
 8005f02:	e02f      	b.n	8005f64 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x9c>
    }
    case RFSW_RFO_HP:
    {
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_SET);
 8005f04:	4b1a      	ldr	r3, [pc, #104]	; (8005f70 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 8005f06:	2201      	movs	r2, #1
 8005f08:	2102      	movs	r1, #2
 8005f0a:	0018      	movs	r0, r3
 8005f0c:	f001 ffb9 	bl	8007e82 <HAL_GPIO_WritePin>
      break;
 8005f10:	e028      	b.n	8005f64 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x9c>
    case RFSW_RFO_LF:
    {
      break;
    }
    case RFSW_OFF:
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, GPIO_PIN_RESET);
 8005f12:	23a0      	movs	r3, #160	; 0xa0
 8005f14:	05db      	lsls	r3, r3, #23
 8005f16:	2200      	movs	r2, #0
 8005f18:	2102      	movs	r1, #2
 8005f1a:	0018      	movs	r0, r3
 8005f1c:	f001 ffb1 	bl	8007e82 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, GPIO_PIN_RESET);
 8005f20:	4b13      	ldr	r3, [pc, #76]	; (8005f70 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 8005f22:	2200      	movs	r2, #0
 8005f24:	2104      	movs	r1, #4
 8005f26:	0018      	movs	r0, r3
 8005f28:	f001 ffab 	bl	8007e82 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 8005f2c:	4b10      	ldr	r3, [pc, #64]	; (8005f70 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 8005f2e:	2200      	movs	r2, #0
 8005f30:	2102      	movs	r1, #2
 8005f32:	0018      	movs	r0, r3
 8005f34:	f001 ffa5 	bl	8007e82 <HAL_GPIO_WritePin>
      break;
 8005f38:	e014      	b.n	8005f64 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x9c>
    default:
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, GPIO_PIN_RESET);
 8005f3a:	23a0      	movs	r3, #160	; 0xa0
 8005f3c:	05db      	lsls	r3, r3, #23
 8005f3e:	2200      	movs	r2, #0
 8005f40:	2102      	movs	r1, #2
 8005f42:	0018      	movs	r0, r3
 8005f44:	f001 ff9d 	bl	8007e82 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, GPIO_PIN_RESET);
 8005f48:	4b09      	ldr	r3, [pc, #36]	; (8005f70 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	2104      	movs	r1, #4
 8005f4e:	0018      	movs	r0, r3
 8005f50:	f001 ff97 	bl	8007e82 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 8005f54:	4b06      	ldr	r3, [pc, #24]	; (8005f70 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 8005f56:	2200      	movs	r2, #0
 8005f58:	2102      	movs	r1, #2
 8005f5a:	0018      	movs	r0, r3
 8005f5c:	f001 ff91 	bl	8007e82 <HAL_GPIO_WritePin>

      break;
 8005f60:	e000      	b.n	8005f64 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x9c>
      break;
 8005f62:	46c0      	nop			; (mov r8, r8)
  }
}
 8005f64:	46c0      	nop			; (mov r8, r8)
 8005f66:	46bd      	mov	sp, r7
 8005f68:	b002      	add	sp, #8
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	0801f1a0 	.word	0x0801f1a0
 8005f70:	50000800 	.word	0x50000800

08005f74 <CMWX1ZZABZ0XX_RADIO_CheckRfFrequency>:

bool CMWX1ZZABZ0XX_RADIO_CheckRfFrequency(uint32_t frequency)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b082      	sub	sp, #8
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  // Implement check. Currently all frequencies are supported
  return true;
 8005f7c:	2301      	movs	r3, #1
}
 8005f7e:	0018      	movs	r0, r3
 8005f80:	46bd      	mov	sp, r7
 8005f82:	b002      	add	sp, #8
 8005f84:	bd80      	pop	{r7, pc}
	...

08005f88 <CMWX1ZZABZ0XX_RADIO_Reset>:

void CMWX1ZZABZ0XX_RADIO_Reset(void)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b086      	sub	sp, #24
 8005f8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct = { 0 };
 8005f8e:	1d3b      	adds	r3, r7, #4
 8005f90:	0018      	movs	r0, r3
 8005f92:	2314      	movs	r3, #20
 8005f94:	001a      	movs	r2, r3
 8005f96:	2100      	movs	r1, #0
 8005f98:	f017 ffbf 	bl	801df1a <memset>

  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005f9c:	1d3b      	adds	r3, r7, #4
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_NOPULL;
 8005fa2:	1d3b      	adds	r3, r7, #4
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8005fa8:	1d3b      	adds	r3, r7, #4
 8005faa:	2203      	movs	r2, #3
 8005fac:	60da      	str	r2, [r3, #12]
  initStruct.Pin = RADIO_RESET_PIN;
 8005fae:	1d3b      	adds	r3, r7, #4
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	601a      	str	r2, [r3, #0]

  // Set RESET pin to 0
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8005fb4:	1d3b      	adds	r3, r7, #4
 8005fb6:	4a0f      	ldr	r2, [pc, #60]	; (8005ff4 <CMWX1ZZABZ0XX_RADIO_Reset+0x6c>)
 8005fb8:	0019      	movs	r1, r3
 8005fba:	0010      	movs	r0, r2
 8005fbc:	f001 fce4 	bl	8007988 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_RESET_PORT, RADIO_RESET_PIN, GPIO_PIN_RESET);
 8005fc0:	4b0c      	ldr	r3, [pc, #48]	; (8005ff4 <CMWX1ZZABZ0XX_RADIO_Reset+0x6c>)
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	2101      	movs	r1, #1
 8005fc6:	0018      	movs	r0, r3
 8005fc8:	f001 ff5b 	bl	8007e82 <HAL_GPIO_WritePin>

  // Wait 1 ms
  HAL_Delay(1);
 8005fcc:	2001      	movs	r0, #1
 8005fce:	f7fe fefe 	bl	8004dce <HAL_Delay>

  // Configure RESET as input
  initStruct.Mode = GPIO_NOPULL;
 8005fd2:	1d3b      	adds	r3, r7, #4
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	605a      	str	r2, [r3, #4]
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8005fd8:	1d3b      	adds	r3, r7, #4
 8005fda:	4a06      	ldr	r2, [pc, #24]	; (8005ff4 <CMWX1ZZABZ0XX_RADIO_Reset+0x6c>)
 8005fdc:	0019      	movs	r1, r3
 8005fde:	0010      	movs	r0, r2
 8005fe0:	f001 fcd2 	bl	8007988 <HAL_GPIO_Init>

  // Wait 6 ms
  HAL_Delay(6);
 8005fe4:	2006      	movs	r0, #6
 8005fe6:	f7fe fef2 	bl	8004dce <HAL_Delay>
}
 8005fea:	46c0      	nop			; (mov r8, r8)
 8005fec:	46bd      	mov	sp, r7
 8005fee:	b006      	add	sp, #24
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	46c0      	nop			; (mov r8, r8)
 8005ff4:	50000800 	.word	0x50000800

08005ff8 <CMWX1ZZABZ0XX_RADIO_Bus_Init>:

/* Bus mapping to SPI */

void CMWX1ZZABZ0XX_RADIO_Bus_Init(void)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	af00      	add	r7, sp, #0
  RADIO_SPI_Init();
 8005ffc:	f7ff fa34 	bl	8005468 <BSP_SPI1_Init>
}
 8006000:	46c0      	nop			; (mov r8, r8)
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}

08006006 <CMWX1ZZABZ0XX_RADIO_SendRecv>:
  * @brief  Send Receive data via SPI
  * @param  Data to send
  * @retval Received data
  */
uint16_t CMWX1ZZABZ0XX_RADIO_SendRecv(uint16_t txData)
{
 8006006:	b590      	push	{r4, r7, lr}
 8006008:	b085      	sub	sp, #20
 800600a:	af00      	add	r7, sp, #0
 800600c:	0002      	movs	r2, r0
 800600e:	1dbb      	adds	r3, r7, #6
 8006010:	801a      	strh	r2, [r3, #0]
  uint16_t rxData ;

  /*RADIO_SPI_SendRecv(( uint8_t * ) &txData, ( uint8_t* ) &rxData, 1);*/
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 8006012:	240e      	movs	r4, #14
 8006014:	1939      	adds	r1, r7, r4
 8006016:	1dbb      	adds	r3, r7, #6
 8006018:	2201      	movs	r2, #1
 800601a:	0018      	movs	r0, r3
 800601c:	f7ff fa48 	bl	80054b0 <BSP_SPI1_SendRecv>

  return rxData;
 8006020:	193b      	adds	r3, r7, r4
 8006022:	881b      	ldrh	r3, [r3, #0]
}
 8006024:	0018      	movs	r0, r3
 8006026:	46bd      	mov	sp, r7
 8006028:	b005      	add	sp, #20
 800602a:	bd90      	pop	{r4, r7, pc}

0800602c <CMWX1ZZABZ0XX_RADIO_ChipSelect>:

void CMWX1ZZABZ0XX_RADIO_ChipSelect(int32_t state)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  if (state == 0)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d108      	bne.n	800604c <CMWX1ZZABZ0XX_RADIO_ChipSelect+0x20>
  {
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_RESET);
 800603a:	2380      	movs	r3, #128	; 0x80
 800603c:	0219      	lsls	r1, r3, #8
 800603e:	23a0      	movs	r3, #160	; 0xa0
 8006040:	05db      	lsls	r3, r3, #23
 8006042:	2200      	movs	r2, #0
 8006044:	0018      	movs	r0, r3
 8006046:	f001 ff1c 	bl	8007e82 <HAL_GPIO_WritePin>
  }
  else
  {
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
  }
}
 800604a:	e007      	b.n	800605c <CMWX1ZZABZ0XX_RADIO_ChipSelect+0x30>
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 800604c:	2380      	movs	r3, #128	; 0x80
 800604e:	0219      	lsls	r1, r3, #8
 8006050:	23a0      	movs	r3, #160	; 0xa0
 8006052:	05db      	lsls	r3, r3, #23
 8006054:	2201      	movs	r2, #1
 8006056:	0018      	movs	r0, r3
 8006058:	f001 ff13 	bl	8007e82 <HAL_GPIO_WritePin>
}
 800605c:	46c0      	nop			; (mov r8, r8)
 800605e:	46bd      	mov	sp, r7
 8006060:	b002      	add	sp, #8
 8006062:	bd80      	pop	{r7, pc}

08006064 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>:

uint32_t CMWX1ZZABZ0XX_RADIO_GetDio1PinState(void)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(RADIO_DIO_1_PORT, RADIO_DIO_1_PIN);
 8006068:	4b04      	ldr	r3, [pc, #16]	; (800607c <CMWX1ZZABZ0XX_RADIO_GetDio1PinState+0x18>)
 800606a:	2102      	movs	r1, #2
 800606c:	0018      	movs	r0, r3
 800606e:	f001 feeb 	bl	8007e48 <HAL_GPIO_ReadPin>
 8006072:	0003      	movs	r3, r0
}
 8006074:	0018      	movs	r0, r3
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	46c0      	nop			; (mov r8, r8)
 800607c:	50000400 	.word	0x50000400

08006080 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit>:
  * @brief  Initializes SPI MSP.
  * @param  hspi  SPI handler
  * @retval None
*/
static void CMWX1ZZABZ0XX_RADIO_SPI_IoInit(SPI_HandleTypeDef *spiHandle)
{
 8006080:	b590      	push	{r4, r7, lr}
 8006082:	b08b      	sub	sp, #44	; 0x2c
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /* Enable Peripheral clock */
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 8006088:	4b2b      	ldr	r3, [pc, #172]	; (8006138 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 800608a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800608c:	4b2a      	ldr	r3, [pc, #168]	; (8006138 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 800608e:	2102      	movs	r1, #2
 8006090:	430a      	orrs	r2, r1
 8006092:	62da      	str	r2, [r3, #44]	; 0x2c
 8006094:	4b28      	ldr	r3, [pc, #160]	; (8006138 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 8006096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006098:	2202      	movs	r2, #2
 800609a:	4013      	ands	r3, r2
 800609c:	613b      	str	r3, [r7, #16]
 800609e:	693b      	ldr	r3, [r7, #16]
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 80060a0:	4b25      	ldr	r3, [pc, #148]	; (8006138 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 80060a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060a4:	4b24      	ldr	r3, [pc, #144]	; (8006138 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 80060a6:	2101      	movs	r1, #1
 80060a8:	430a      	orrs	r2, r1
 80060aa:	62da      	str	r2, [r3, #44]	; 0x2c
 80060ac:	4b22      	ldr	r3, [pc, #136]	; (8006138 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 80060ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b0:	2201      	movs	r2, #1
 80060b2:	4013      	ands	r3, r2
 80060b4:	60fb      	str	r3, [r7, #12]
 80060b6:	68fb      	ldr	r3, [r7, #12]
  RADIO_SPI_MISO_GPIO_CLK_ENABLE();
 80060b8:	4b1f      	ldr	r3, [pc, #124]	; (8006138 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 80060ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060bc:	4b1e      	ldr	r3, [pc, #120]	; (8006138 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 80060be:	2101      	movs	r1, #1
 80060c0:	430a      	orrs	r2, r1
 80060c2:	62da      	str	r2, [r3, #44]	; 0x2c
 80060c4:	4b1c      	ldr	r3, [pc, #112]	; (8006138 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 80060c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c8:	2201      	movs	r2, #1
 80060ca:	4013      	ands	r3, r2
 80060cc:	60bb      	str	r3, [r7, #8]
 80060ce:	68bb      	ldr	r3, [r7, #8]
  /**SPI1 GPIO Configuration
  PA5     ------> SPI1_SCK
  PA6     ------> SPI1_MISO
  PA7     ------> SPI1_MOSI
    */
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060d0:	2414      	movs	r4, #20
 80060d2:	193b      	adds	r3, r7, r4
 80060d4:	2202      	movs	r2, #2
 80060d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80060d8:	193b      	adds	r3, r7, r4
 80060da:	2202      	movs	r2, #2
 80060dc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060de:	193b      	adds	r3, r7, r4
 80060e0:	2203      	movs	r2, #3
 80060e2:	60da      	str	r2, [r3, #12]

  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
 80060e4:	193b      	adds	r3, r7, r4
 80060e6:	2200      	movs	r2, #0
 80060e8:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 80060ea:	193b      	adds	r3, r7, r4
 80060ec:	2280      	movs	r2, #128	; 0x80
 80060ee:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80060f0:	193a      	adds	r2, r7, r4
 80060f2:	23a0      	movs	r3, #160	; 0xa0
 80060f4:	05db      	lsls	r3, r3, #23
 80060f6:	0011      	movs	r1, r2
 80060f8:	0018      	movs	r0, r3
 80060fa:	f001 fc45 	bl	8007988 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_MISO_GPIO_AF;
 80060fe:	193b      	adds	r3, r7, r4
 8006100:	2200      	movs	r2, #0
 8006102:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 8006104:	193b      	adds	r3, r7, r4
 8006106:	2240      	movs	r2, #64	; 0x40
 8006108:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 800610a:	193a      	adds	r2, r7, r4
 800610c:	23a0      	movs	r3, #160	; 0xa0
 800610e:	05db      	lsls	r3, r3, #23
 8006110:	0011      	movs	r1, r2
 8006112:	0018      	movs	r0, r3
 8006114:	f001 fc38 	bl	8007988 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_SCK_GPIO_AF;
 8006118:	193b      	adds	r3, r7, r4
 800611a:	2200      	movs	r2, #0
 800611c:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 800611e:	193b      	adds	r3, r7, r4
 8006120:	2208      	movs	r2, #8
 8006122:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8006124:	193b      	adds	r3, r7, r4
 8006126:	4a05      	ldr	r2, [pc, #20]	; (800613c <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xbc>)
 8006128:	0019      	movs	r1, r3
 800612a:	0010      	movs	r0, r2
 800612c:	f001 fc2c 	bl	8007988 <HAL_GPIO_Init>
}
 8006130:	46c0      	nop			; (mov r8, r8)
 8006132:	46bd      	mov	sp, r7
 8006134:	b00b      	add	sp, #44	; 0x2c
 8006136:	bd90      	pop	{r4, r7, pc}
 8006138:	40021000 	.word	0x40021000
 800613c:	50000400 	.word	0x50000400

08006140 <CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit>:
  * @brief  DeInitializes SPI MSP.
  * @param  hspi  SPI handler
  * @retval None
  */
static void CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit(void)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b086      	sub	sp, #24
 8006144:	af00      	add	r7, sp, #0

  /* DeInitialize Peripheral GPIOs */
  /* Instead of using HAL_GPIO_DeInit() which set ANALOG mode
     it's preferred to set in OUTPUT_PP mode, with the pins set to 0 */

  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006146:	1d3b      	adds	r3, r7, #4
 8006148:	2201      	movs	r2, #1
 800614a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800614c:	1d3b      	adds	r3, r7, #4
 800614e:	2202      	movs	r2, #2
 8006150:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8006152:	1d3b      	adds	r3, r7, #4
 8006154:	2280      	movs	r2, #128	; 0x80
 8006156:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8006158:	1d3a      	adds	r2, r7, #4
 800615a:	23a0      	movs	r3, #160	; 0xa0
 800615c:	05db      	lsls	r3, r3, #23
 800615e:	0011      	movs	r1, r2
 8006160:	0018      	movs	r0, r3
 8006162:	f001 fc11 	bl	8007988 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 8006166:	1d3b      	adds	r3, r7, #4
 8006168:	2240      	movs	r2, #64	; 0x40
 800616a:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 800616c:	1d3a      	adds	r2, r7, #4
 800616e:	23a0      	movs	r3, #160	; 0xa0
 8006170:	05db      	lsls	r3, r3, #23
 8006172:	0011      	movs	r1, r2
 8006174:	0018      	movs	r0, r3
 8006176:	f001 fc07 	bl	8007988 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 800617a:	1d3b      	adds	r3, r7, #4
 800617c:	2208      	movs	r2, #8
 800617e:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8006180:	1d3b      	adds	r3, r7, #4
 8006182:	4a0e      	ldr	r2, [pc, #56]	; (80061bc <CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit+0x7c>)
 8006184:	0019      	movs	r1, r3
 8006186:	0010      	movs	r0, r2
 8006188:	f001 fbfe 	bl	8007988 <HAL_GPIO_Init>


  HAL_GPIO_WritePin(RADIO_SPI_MOSI_GPIO_PORT, RADIO_SPI_MOSI_GPIO_PIN, GPIO_PIN_RESET);
 800618c:	23a0      	movs	r3, #160	; 0xa0
 800618e:	05db      	lsls	r3, r3, #23
 8006190:	2200      	movs	r2, #0
 8006192:	2180      	movs	r1, #128	; 0x80
 8006194:	0018      	movs	r0, r3
 8006196:	f001 fe74 	bl	8007e82 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_MISO_GPIO_PORT, RADIO_SPI_MISO_GPIO_PIN, GPIO_PIN_RESET);
 800619a:	23a0      	movs	r3, #160	; 0xa0
 800619c:	05db      	lsls	r3, r3, #23
 800619e:	2200      	movs	r2, #0
 80061a0:	2140      	movs	r1, #64	; 0x40
 80061a2:	0018      	movs	r0, r3
 80061a4:	f001 fe6d 	bl	8007e82 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_SCK_GPIO_PORT, RADIO_SPI_SCK_GPIO_PIN, GPIO_PIN_RESET);
 80061a8:	4b04      	ldr	r3, [pc, #16]	; (80061bc <CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit+0x7c>)
 80061aa:	2200      	movs	r2, #0
 80061ac:	2108      	movs	r1, #8
 80061ae:	0018      	movs	r0, r3
 80061b0:	f001 fe67 	bl	8007e82 <HAL_GPIO_WritePin>

}
 80061b4:	46c0      	nop			; (mov r8, r8)
 80061b6:	46bd      	mov	sp, r7
 80061b8:	b006      	add	sp, #24
 80061ba:	bd80      	pop	{r7, pc}
 80061bc:	50000400 	.word	0x50000400

080061c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 80061c4:	4b17      	ldr	r3, [pc, #92]	; (8006224 <SystemInit+0x64>)
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	4b16      	ldr	r3, [pc, #88]	; (8006224 <SystemInit+0x64>)
 80061ca:	2180      	movs	r1, #128	; 0x80
 80061cc:	0049      	lsls	r1, r1, #1
 80061ce:	430a      	orrs	r2, r1
 80061d0:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 80061d2:	4b14      	ldr	r3, [pc, #80]	; (8006224 <SystemInit+0x64>)
 80061d4:	68da      	ldr	r2, [r3, #12]
 80061d6:	4b13      	ldr	r3, [pc, #76]	; (8006224 <SystemInit+0x64>)
 80061d8:	4913      	ldr	r1, [pc, #76]	; (8006228 <SystemInit+0x68>)
 80061da:	400a      	ands	r2, r1
 80061dc:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80061de:	4b11      	ldr	r3, [pc, #68]	; (8006224 <SystemInit+0x64>)
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	4b10      	ldr	r3, [pc, #64]	; (8006224 <SystemInit+0x64>)
 80061e4:	4911      	ldr	r1, [pc, #68]	; (800622c <SystemInit+0x6c>)
 80061e6:	400a      	ands	r2, r1
 80061e8:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80061ea:	4b0e      	ldr	r3, [pc, #56]	; (8006224 <SystemInit+0x64>)
 80061ec:	689a      	ldr	r2, [r3, #8]
 80061ee:	4b0d      	ldr	r3, [pc, #52]	; (8006224 <SystemInit+0x64>)
 80061f0:	2101      	movs	r1, #1
 80061f2:	438a      	bics	r2, r1
 80061f4:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80061f6:	4b0b      	ldr	r3, [pc, #44]	; (8006224 <SystemInit+0x64>)
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	4b0a      	ldr	r3, [pc, #40]	; (8006224 <SystemInit+0x64>)
 80061fc:	490c      	ldr	r1, [pc, #48]	; (8006230 <SystemInit+0x70>)
 80061fe:	400a      	ands	r2, r1
 8006200:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8006202:	4b08      	ldr	r3, [pc, #32]	; (8006224 <SystemInit+0x64>)
 8006204:	68da      	ldr	r2, [r3, #12]
 8006206:	4b07      	ldr	r3, [pc, #28]	; (8006224 <SystemInit+0x64>)
 8006208:	490a      	ldr	r1, [pc, #40]	; (8006234 <SystemInit+0x74>)
 800620a:	400a      	ands	r2, r1
 800620c:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800620e:	4b05      	ldr	r3, [pc, #20]	; (8006224 <SystemInit+0x64>)
 8006210:	2200      	movs	r2, #0
 8006212:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006214:	4b08      	ldr	r3, [pc, #32]	; (8006238 <SystemInit+0x78>)
 8006216:	2280      	movs	r2, #128	; 0x80
 8006218:	0512      	lsls	r2, r2, #20
 800621a:	609a      	str	r2, [r3, #8]
#endif
}
 800621c:	46c0      	nop			; (mov r8, r8)
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
 8006222:	46c0      	nop			; (mov r8, r8)
 8006224:	40021000 	.word	0x40021000
 8006228:	88ff400c 	.word	0x88ff400c
 800622c:	fef6fff6 	.word	0xfef6fff6
 8006230:	fffbffff 	.word	0xfffbffff
 8006234:	ff02ffff 	.word	0xff02ffff
 8006238:	e000ed00 	.word	0xe000ed00

0800623c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b082      	sub	sp, #8
 8006240:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006242:	1dfb      	adds	r3, r7, #7
 8006244:	2200      	movs	r2, #0
 8006246:	701a      	strb	r2, [r3, #0]
#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
#endif /* PREREAD_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006248:	4b0b      	ldr	r3, [pc, #44]	; (8006278 <HAL_Init+0x3c>)
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	4b0a      	ldr	r3, [pc, #40]	; (8006278 <HAL_Init+0x3c>)
 800624e:	2102      	movs	r1, #2
 8006250:	430a      	orrs	r2, r1
 8006252:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006254:	2003      	movs	r0, #3
 8006256:	f7fe fda9 	bl	8004dac <HAL_InitTick>
 800625a:	1e03      	subs	r3, r0, #0
 800625c:	d003      	beq.n	8006266 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800625e:	1dfb      	adds	r3, r7, #7
 8006260:	2201      	movs	r2, #1
 8006262:	701a      	strb	r2, [r3, #0]
 8006264:	e001      	b.n	800626a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006266:	f7fe fb5f 	bl	8004928 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800626a:	1dfb      	adds	r3, r7, #7
 800626c:	781b      	ldrb	r3, [r3, #0]
}
 800626e:	0018      	movs	r0, r3
 8006270:	46bd      	mov	sp, r7
 8006272:	b002      	add	sp, #8
 8006274:	bd80      	pop	{r7, pc}
 8006276:	46c0      	nop			; (mov r8, r8)
 8006278:	40022000 	.word	0x40022000

0800627c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006280:	4b05      	ldr	r3, [pc, #20]	; (8006298 <HAL_IncTick+0x1c>)
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	001a      	movs	r2, r3
 8006286:	4b05      	ldr	r3, [pc, #20]	; (800629c <HAL_IncTick+0x20>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	18d2      	adds	r2, r2, r3
 800628c:	4b03      	ldr	r3, [pc, #12]	; (800629c <HAL_IncTick+0x20>)
 800628e:	601a      	str	r2, [r3, #0]
}
 8006290:	46c0      	nop			; (mov r8, r8)
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	46c0      	nop			; (mov r8, r8)
 8006298:	20000078 	.word	0x20000078
 800629c:	20001714 	.word	0x20001714

080062a0 <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 80062a4:	4b02      	ldr	r3, [pc, #8]	; (80062b0 <HAL_GetUIDw0+0x10>)
 80062a6:	681b      	ldr	r3, [r3, #0]
}
 80062a8:	0018      	movs	r0, r3
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	46c0      	nop			; (mov r8, r8)
 80062b0:	1ff80050 	.word	0x1ff80050

080062b4 <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 80062b8:	4b02      	ldr	r3, [pc, #8]	; (80062c4 <HAL_GetUIDw1+0x10>)
 80062ba:	681b      	ldr	r3, [r3, #0]
}
 80062bc:	0018      	movs	r0, r3
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	46c0      	nop			; (mov r8, r8)
 80062c4:	1ff80054 	.word	0x1ff80054

080062c8 <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 80062cc:	4b02      	ldr	r3, [pc, #8]	; (80062d8 <HAL_GetUIDw2+0x10>)
 80062ce:	681b      	ldr	r3, [r3, #0]
}
 80062d0:	0018      	movs	r0, r3
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	46c0      	nop			; (mov r8, r8)
 80062d8:	1ff80064 	.word	0x1ff80064

080062dc <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enables the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80062e0:	4b04      	ldr	r3, [pc, #16]	; (80062f4 <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 80062e2:	685a      	ldr	r2, [r3, #4]
 80062e4:	4b03      	ldr	r3, [pc, #12]	; (80062f4 <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 80062e6:	2101      	movs	r1, #1
 80062e8:	430a      	orrs	r2, r1
 80062ea:	605a      	str	r2, [r3, #4]
}
 80062ec:	46c0      	nop			; (mov r8, r8)
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	46c0      	nop			; (mov r8, r8)
 80062f4:	40015800 	.word	0x40015800

080062f8 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enables the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80062fc:	4b04      	ldr	r3, [pc, #16]	; (8006310 <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 80062fe:	685a      	ldr	r2, [r3, #4]
 8006300:	4b03      	ldr	r3, [pc, #12]	; (8006310 <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 8006302:	2102      	movs	r1, #2
 8006304:	430a      	orrs	r2, r1
 8006306:	605a      	str	r2, [r3, #4]
}
 8006308:	46c0      	nop			; (mov r8, r8)
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	46c0      	nop			; (mov r8, r8)
 8006310:	40015800 	.word	0x40015800

08006314 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enables the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8006318:	4b04      	ldr	r3, [pc, #16]	; (800632c <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 800631a:	685a      	ldr	r2, [r3, #4]
 800631c:	4b03      	ldr	r3, [pc, #12]	; (800632c <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 800631e:	2104      	movs	r1, #4
 8006320:	430a      	orrs	r2, r1
 8006322:	605a      	str	r2, [r3, #4]
}
 8006324:	46c0      	nop			; (mov r8, r8)
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	46c0      	nop			; (mov r8, r8)
 800632c:	40015800 	.word	0x40015800

08006330 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d101      	bne.n	8006342 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e159      	b.n	80065f6 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006346:	2b00      	cmp	r3, #0
 8006348:	d10a      	bne.n	8006360 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2250      	movs	r2, #80	; 0x50
 8006354:	2100      	movs	r1, #0
 8006356:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	0018      	movs	r0, r3
 800635c:	f7fc ffe4 	bl	8003328 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006364:	2210      	movs	r2, #16
 8006366:	4013      	ands	r3, r2
 8006368:	2b10      	cmp	r3, #16
 800636a:	d005      	beq.n	8006378 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	2204      	movs	r2, #4
 8006374:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8006376:	d00b      	beq.n	8006390 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800637c:	2210      	movs	r2, #16
 800637e:	431a      	orrs	r2, r3
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2250      	movs	r2, #80	; 0x50
 8006388:	2100      	movs	r1, #0
 800638a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	e132      	b.n	80065f6 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006394:	4a9a      	ldr	r2, [pc, #616]	; (8006600 <HAL_ADC_Init+0x2d0>)
 8006396:	4013      	ands	r3, r2
 8006398:	2202      	movs	r2, #2
 800639a:	431a      	orrs	r2, r3
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	2203      	movs	r2, #3
 80063a8:	4013      	ands	r3, r2
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d108      	bne.n	80063c0 <HAL_ADC_Init+0x90>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2201      	movs	r2, #1
 80063b6:	4013      	ands	r3, r2
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d101      	bne.n	80063c0 <HAL_ADC_Init+0x90>
 80063bc:	2301      	movs	r3, #1
 80063be:	e000      	b.n	80063c2 <HAL_ADC_Init+0x92>
 80063c0:	2300      	movs	r3, #0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d149      	bne.n	800645a <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	685a      	ldr	r2, [r3, #4]
 80063ca:	23c0      	movs	r3, #192	; 0xc0
 80063cc:	061b      	lsls	r3, r3, #24
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d00b      	beq.n	80063ea <HAL_ADC_Init+0xba>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	685a      	ldr	r2, [r3, #4]
 80063d6:	2380      	movs	r3, #128	; 0x80
 80063d8:	05db      	lsls	r3, r3, #23
 80063da:	429a      	cmp	r2, r3
 80063dc:	d005      	beq.n	80063ea <HAL_ADC_Init+0xba>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	685a      	ldr	r2, [r3, #4]
 80063e2:	2380      	movs	r3, #128	; 0x80
 80063e4:	061b      	lsls	r3, r3, #24
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d111      	bne.n	800640e <HAL_ADC_Init+0xde>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	691a      	ldr	r2, [r3, #16]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	0092      	lsls	r2, r2, #2
 80063f6:	0892      	lsrs	r2, r2, #2
 80063f8:	611a      	str	r2, [r3, #16]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	6919      	ldr	r1, [r3, #16]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	685a      	ldr	r2, [r3, #4]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	430a      	orrs	r2, r1
 800640a:	611a      	str	r2, [r3, #16]
 800640c:	e014      	b.n	8006438 <HAL_ADC_Init+0x108>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	691a      	ldr	r2, [r3, #16]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	0092      	lsls	r2, r2, #2
 800641a:	0892      	lsrs	r2, r2, #2
 800641c:	611a      	str	r2, [r3, #16]
 800641e:	4b79      	ldr	r3, [pc, #484]	; (8006604 <HAL_ADC_Init+0x2d4>)
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	4b78      	ldr	r3, [pc, #480]	; (8006604 <HAL_ADC_Init+0x2d4>)
 8006424:	4978      	ldr	r1, [pc, #480]	; (8006608 <HAL_ADC_Init+0x2d8>)
 8006426:	400a      	ands	r2, r1
 8006428:	601a      	str	r2, [r3, #0]
 800642a:	4b76      	ldr	r3, [pc, #472]	; (8006604 <HAL_ADC_Init+0x2d4>)
 800642c:	6819      	ldr	r1, [r3, #0]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	685a      	ldr	r2, [r3, #4]
 8006432:	4b74      	ldr	r3, [pc, #464]	; (8006604 <HAL_ADC_Init+0x2d4>)
 8006434:	430a      	orrs	r2, r1
 8006436:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68da      	ldr	r2, [r3, #12]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	2118      	movs	r1, #24
 8006444:	438a      	bics	r2, r1
 8006446:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68d9      	ldr	r1, [r3, #12]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	689a      	ldr	r2, [r3, #8]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	430a      	orrs	r2, r1
 8006458:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800645a:	4b6a      	ldr	r3, [pc, #424]	; (8006604 <HAL_ADC_Init+0x2d4>)
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	4b69      	ldr	r3, [pc, #420]	; (8006604 <HAL_ADC_Init+0x2d4>)
 8006460:	496a      	ldr	r1, [pc, #424]	; (800660c <HAL_ADC_Init+0x2dc>)
 8006462:	400a      	ands	r2, r1
 8006464:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8006466:	4b67      	ldr	r3, [pc, #412]	; (8006604 <HAL_ADC_Init+0x2d4>)
 8006468:	6819      	ldr	r1, [r3, #0]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800646e:	065a      	lsls	r2, r3, #25
 8006470:	4b64      	ldr	r3, [pc, #400]	; (8006604 <HAL_ADC_Init+0x2d4>)
 8006472:	430a      	orrs	r2, r1
 8006474:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	689a      	ldr	r2, [r3, #8]
 800647c:	2380      	movs	r3, #128	; 0x80
 800647e:	055b      	lsls	r3, r3, #21
 8006480:	4013      	ands	r3, r2
 8006482:	d108      	bne.n	8006496 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	689a      	ldr	r2, [r3, #8]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2180      	movs	r1, #128	; 0x80
 8006490:	0549      	lsls	r1, r1, #21
 8006492:	430a      	orrs	r2, r1
 8006494:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68da      	ldr	r2, [r3, #12]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	495b      	ldr	r1, [pc, #364]	; (8006610 <HAL_ADC_Init+0x2e0>)
 80064a2:	400a      	ands	r2, r1
 80064a4:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	68d9      	ldr	r1, [r3, #12]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	691b      	ldr	r3, [r3, #16]
 80064b4:	2b02      	cmp	r3, #2
 80064b6:	d101      	bne.n	80064bc <HAL_ADC_Init+0x18c>
 80064b8:	2304      	movs	r3, #4
 80064ba:	e000      	b.n	80064be <HAL_ADC_Init+0x18e>
 80064bc:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80064be:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2020      	movs	r0, #32
 80064c4:	5c1b      	ldrb	r3, [r3, r0]
 80064c6:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80064c8:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	202c      	movs	r0, #44	; 0x2c
 80064ce:	5c1b      	ldrb	r3, [r3, r0]
 80064d0:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80064d2:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80064d8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	699b      	ldr	r3, [r3, #24]
 80064de:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80064e0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	69db      	ldr	r3, [r3, #28]
 80064e6:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80064e8:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	430a      	orrs	r2, r1
 80064f0:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064f6:	23c2      	movs	r3, #194	; 0xc2
 80064f8:	33ff      	adds	r3, #255	; 0xff
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d00b      	beq.n	8006516 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	68d9      	ldr	r1, [r3, #12]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800650c:	431a      	orrs	r2, r3
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	430a      	orrs	r2, r1
 8006514:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2221      	movs	r2, #33	; 0x21
 800651a:	5c9b      	ldrb	r3, [r3, r2]
 800651c:	2b01      	cmp	r3, #1
 800651e:	d11a      	bne.n	8006556 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2220      	movs	r2, #32
 8006524:	5c9b      	ldrb	r3, [r3, r2]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d109      	bne.n	800653e <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68da      	ldr	r2, [r3, #12]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2180      	movs	r1, #128	; 0x80
 8006536:	0249      	lsls	r1, r1, #9
 8006538:	430a      	orrs	r2, r1
 800653a:	60da      	str	r2, [r3, #12]
 800653c:	e00b      	b.n	8006556 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006542:	2220      	movs	r2, #32
 8006544:	431a      	orrs	r2, r3
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800654e:	2201      	movs	r2, #1
 8006550:	431a      	orrs	r2, r3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800655a:	2b01      	cmp	r3, #1
 800655c:	d11f      	bne.n	800659e <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	691a      	ldr	r2, [r3, #16]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	492a      	ldr	r1, [pc, #168]	; (8006614 <HAL_ADC_Init+0x2e4>)
 800656a:	400a      	ands	r2, r1
 800656c:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	6919      	ldr	r1, [r3, #16]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800657c:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8006582:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	430a      	orrs	r2, r1
 800658a:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	691a      	ldr	r2, [r3, #16]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	2101      	movs	r1, #1
 8006598:	430a      	orrs	r2, r1
 800659a:	611a      	str	r2, [r3, #16]
 800659c:	e00e      	b.n	80065bc <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	691b      	ldr	r3, [r3, #16]
 80065a4:	2201      	movs	r2, #1
 80065a6:	4013      	ands	r3, r2
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d107      	bne.n	80065bc <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	691a      	ldr	r2, [r3, #16]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2101      	movs	r1, #1
 80065b8:	438a      	bics	r2, r1
 80065ba:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	695a      	ldr	r2, [r3, #20]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	2107      	movs	r1, #7
 80065c8:	438a      	bics	r2, r1
 80065ca:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	6959      	ldr	r1, [r3, #20]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	430a      	orrs	r2, r1
 80065dc:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065e8:	2203      	movs	r2, #3
 80065ea:	4393      	bics	r3, r2
 80065ec:	2201      	movs	r2, #1
 80065ee:	431a      	orrs	r2, r3
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	0018      	movs	r0, r3
 80065f8:	46bd      	mov	sp, r7
 80065fa:	b002      	add	sp, #8
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	46c0      	nop			; (mov r8, r8)
 8006600:	fffffefd 	.word	0xfffffefd
 8006604:	40012708 	.word	0x40012708
 8006608:	ffc3ffff 	.word	0xffc3ffff
 800660c:	fdffffff 	.word	0xfdffffff
 8006610:	fffe0219 	.word	0xfffe0219
 8006614:	fffffc03 	.word	0xfffffc03

08006618 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 8006618:	b5b0      	push	{r4, r5, r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006620:	230f      	movs	r3, #15
 8006622:	18fb      	adds	r3, r7, r3
 8006624:	2200      	movs	r2, #0
 8006626:	701a      	strb	r2, [r3, #0]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d101      	bne.n	8006632 <HAL_ADC_DeInit+0x1a>
  {
    return HAL_ERROR;
 800662e:	2301      	movs	r3, #1
 8006630:	e07d      	b.n	800672e <HAL_ADC_DeInit+0x116>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006636:	2202      	movs	r2, #2
 8006638:	431a      	orrs	r2, r3
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800663e:	250f      	movs	r5, #15
 8006640:	197c      	adds	r4, r7, r5
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	0018      	movs	r0, r3
 8006646:	f000 faff 	bl	8006c48 <ADC_ConversionStop>
 800664a:	0003      	movs	r3, r0
 800664c:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800664e:	197b      	adds	r3, r7, r5
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d10d      	bne.n	8006672 <HAL_ADC_DeInit+0x5a>
  {   
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8006656:	197c      	adds	r4, r7, r5
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	0018      	movs	r0, r3
 800665c:	f000 fa94 	bl	8006b88 <ADC_Disable>
 8006660:	0003      	movs	r3, r0
 8006662:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status != HAL_ERROR)
 8006664:	197b      	adds	r3, r7, r5
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	2b01      	cmp	r3, #1
 800666a:	d002      	beq.n	8006672 <HAL_ADC_DeInit+0x5a>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	655a      	str	r2, [r3, #84]	; 0x54
  }
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (tmp_hal_status != HAL_ERROR)
 8006672:	230f      	movs	r3, #15
 8006674:	18fb      	adds	r3, r7, r3
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	2b01      	cmp	r3, #1
 800667a:	d051      	beq.n	8006720 <HAL_ADC_DeInit+0x108>
  {
    
    /* ========== Reset ADC registers ========== */
    /* Reset register IER */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	685a      	ldr	r2, [r3, #4]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	492c      	ldr	r1, [pc, #176]	; (8006738 <HAL_ADC_DeInit+0x120>)
 8006688:	400a      	ands	r2, r1
 800668a:	605a      	str	r2, [r3, #4]
                                ADC_IT_EOC | ADC_IT_RDY | ADC_IT_EOSMP ));
  
        
    /* Reset register ISR */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a2a      	ldr	r2, [pc, #168]	; (800673c <HAL_ADC_DeInit+0x124>)
 8006692:	601a      	str	r2, [r3, #0]
    
    /* Reset register CR */
    /* Disable voltage regulator */
    /* Note: Regulator disable useful for power saving */
    /* Reset ADVREGEN bit */
    hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	689a      	ldr	r2, [r3, #8]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4928      	ldr	r1, [pc, #160]	; (8006740 <HAL_ADC_DeInit+0x128>)
 80066a0:	400a      	ands	r2, r1
 80066a2:	609a      	str	r2, [r3, #8]
    
    /* Bits ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode "read-set": no direct reset applicable */
    /* No action */
    
    /* Reset register CFGR1 */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWDCH  | ADC_CFGR1_AWDEN  | ADC_CFGR1_AWDSGL | \
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68da      	ldr	r2, [r3, #12]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4925      	ldr	r1, [pc, #148]	; (8006744 <HAL_ADC_DeInit+0x12c>)
 80066b0:	400a      	ands	r2, r1
 80066b2:	60da      	str	r2, [r3, #12]
                               ADC_CFGR1_CONT   | ADC_CFGR1_OVRMOD | ADC_CFGR1_EXTEN  | \
                               ADC_CFGR1_EXTSEL | ADC_CFGR1_ALIGN  | ADC_CFGR1_RES    | \
                               ADC_CFGR1_SCANDIR| ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);
  
    /* Reset register CFGR2 */
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	691a      	ldr	r2, [r3, #16]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4922      	ldr	r1, [pc, #136]	; (8006748 <HAL_ADC_DeInit+0x130>)
 80066c0:	400a      	ands	r2, r1
 80066c2:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSE  | ADC_CFGR2_CKMODE );
  
    
    /* Reset register SMPR */
    hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	695a      	ldr	r2, [r3, #20]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2107      	movs	r1, #7
 80066d0:	438a      	bics	r2, r1
 80066d2:	615a      	str	r2, [r3, #20]
    
    /* Reset register TR */
    hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	6a1a      	ldr	r2, [r3, #32]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	491b      	ldr	r1, [pc, #108]	; (800674c <HAL_ADC_DeInit+0x134>)
 80066e0:	400a      	ands	r2, r1
 80066e2:	621a      	str	r2, [r3, #32]
    
    /* Reset register CALFACT */
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	22b4      	movs	r2, #180	; 0xb4
 80066ea:	589a      	ldr	r2, [r3, r2]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	217f      	movs	r1, #127	; 0x7f
 80066f2:	438a      	bics	r2, r1
 80066f4:	21b4      	movs	r1, #180	; 0xb4
 80066f6:	505a      	str	r2, [r3, r1]
    
    /* Reset register DR */
    /* bits in access mode read only, no direct reset applicable*/
  
    /* Reset register CALFACT */
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	22b4      	movs	r2, #180	; 0xb4
 80066fe:	589a      	ldr	r2, [r3, r2]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	217f      	movs	r1, #127	; 0x7f
 8006706:	438a      	bics	r2, r1
 8006708:	21b4      	movs	r1, #180	; 0xb4
 800670a:	505a      	str	r2, [r3, r1]
    
    /* DeInit the low level hardware */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware */
    HAL_ADC_MspDeInit(hadc);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	0018      	movs	r0, r3
 8006710:	f7fc fe3a 	bl	8003388 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	655a      	str	r2, [r3, #84]	; 0x54
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2250      	movs	r2, #80	; 0x50
 8006724:	2100      	movs	r1, #0
 8006726:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8006728:	230f      	movs	r3, #15
 800672a:	18fb      	adds	r3, r7, r3
 800672c:	781b      	ldrb	r3, [r3, #0]
}
 800672e:	0018      	movs	r0, r3
 8006730:	46bd      	mov	sp, r7
 8006732:	b004      	add	sp, #16
 8006734:	bdb0      	pop	{r4, r5, r7, pc}
 8006736:	46c0      	nop			; (mov r8, r8)
 8006738:	fffff760 	.word	0xfffff760
 800673c:	0000089f 	.word	0x0000089f
 8006740:	efffffff 	.word	0xefffffff
 8006744:	833e0200 	.word	0x833e0200
 8006748:	3ffffc02 	.word	0x3ffffc02
 800674c:	f000f000 	.word	0xf000f000

08006750 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8006750:	b590      	push	{r4, r7, lr}
 8006752:	b085      	sub	sp, #20
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006758:	230f      	movs	r3, #15
 800675a:	18fb      	adds	r3, r7, r3
 800675c:	2200      	movs	r2, #0
 800675e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	2204      	movs	r2, #4
 8006768:	4013      	ands	r3, r2
 800676a:	d138      	bne.n	80067de <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2250      	movs	r2, #80	; 0x50
 8006770:	5c9b      	ldrb	r3, [r3, r2]
 8006772:	2b01      	cmp	r3, #1
 8006774:	d101      	bne.n	800677a <HAL_ADC_Start+0x2a>
 8006776:	2302      	movs	r3, #2
 8006778:	e038      	b.n	80067ec <HAL_ADC_Start+0x9c>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2250      	movs	r2, #80	; 0x50
 800677e:	2101      	movs	r1, #1
 8006780:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	69db      	ldr	r3, [r3, #28]
 8006786:	2b01      	cmp	r3, #1
 8006788:	d007      	beq.n	800679a <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800678a:	230f      	movs	r3, #15
 800678c:	18fc      	adds	r4, r7, r3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	0018      	movs	r0, r3
 8006792:	f000 f999 	bl	8006ac8 <ADC_Enable>
 8006796:	0003      	movs	r3, r0
 8006798:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800679a:	230f      	movs	r3, #15
 800679c:	18fb      	adds	r3, r7, r3
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d120      	bne.n	80067e6 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067a8:	4a12      	ldr	r2, [pc, #72]	; (80067f4 <HAL_ADC_Start+0xa4>)
 80067aa:	4013      	ands	r3, r2
 80067ac:	2280      	movs	r2, #128	; 0x80
 80067ae:	0052      	lsls	r2, r2, #1
 80067b0:	431a      	orrs	r2, r3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2250      	movs	r2, #80	; 0x50
 80067c0:	2100      	movs	r1, #0
 80067c2:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	221c      	movs	r2, #28
 80067ca:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	689a      	ldr	r2, [r3, #8]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	2104      	movs	r1, #4
 80067d8:	430a      	orrs	r2, r1
 80067da:	609a      	str	r2, [r3, #8]
 80067dc:	e003      	b.n	80067e6 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80067de:	230f      	movs	r3, #15
 80067e0:	18fb      	adds	r3, r7, r3
 80067e2:	2202      	movs	r2, #2
 80067e4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80067e6:	230f      	movs	r3, #15
 80067e8:	18fb      	adds	r3, r7, r3
 80067ea:	781b      	ldrb	r3, [r3, #0]
}
 80067ec:	0018      	movs	r0, r3
 80067ee:	46bd      	mov	sp, r7
 80067f0:	b005      	add	sp, #20
 80067f2:	bd90      	pop	{r4, r7, pc}
 80067f4:	fffff0fe 	.word	0xfffff0fe

080067f8 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80067f8:	b5b0      	push	{r4, r5, r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006800:	230f      	movs	r3, #15
 8006802:	18fb      	adds	r3, r7, r3
 8006804:	2200      	movs	r2, #0
 8006806:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2250      	movs	r2, #80	; 0x50
 800680c:	5c9b      	ldrb	r3, [r3, r2]
 800680e:	2b01      	cmp	r3, #1
 8006810:	d101      	bne.n	8006816 <HAL_ADC_Stop+0x1e>
 8006812:	2302      	movs	r3, #2
 8006814:	e029      	b.n	800686a <HAL_ADC_Stop+0x72>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2250      	movs	r2, #80	; 0x50
 800681a:	2101      	movs	r1, #1
 800681c:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800681e:	250f      	movs	r5, #15
 8006820:	197c      	adds	r4, r7, r5
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	0018      	movs	r0, r3
 8006826:	f000 fa0f 	bl	8006c48 <ADC_ConversionStop>
 800682a:	0003      	movs	r3, r0
 800682c:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800682e:	197b      	adds	r3, r7, r5
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d112      	bne.n	800685c <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8006836:	197c      	adds	r4, r7, r5
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	0018      	movs	r0, r3
 800683c:	f000 f9a4 	bl	8006b88 <ADC_Disable>
 8006840:	0003      	movs	r3, r0
 8006842:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8006844:	197b      	adds	r3, r7, r5
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d107      	bne.n	800685c <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006850:	4a08      	ldr	r2, [pc, #32]	; (8006874 <HAL_ADC_Stop+0x7c>)
 8006852:	4013      	ands	r3, r2
 8006854:	2201      	movs	r2, #1
 8006856:	431a      	orrs	r2, r3
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2250      	movs	r2, #80	; 0x50
 8006860:	2100      	movs	r1, #0
 8006862:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8006864:	230f      	movs	r3, #15
 8006866:	18fb      	adds	r3, r7, r3
 8006868:	781b      	ldrb	r3, [r3, #0]
}
 800686a:	0018      	movs	r0, r3
 800686c:	46bd      	mov	sp, r7
 800686e:	b004      	add	sp, #16
 8006870:	bdb0      	pop	{r4, r5, r7, pc}
 8006872:	46c0      	nop			; (mov r8, r8)
 8006874:	fffffefe 	.word	0xfffffefe

08006878 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006882:	2300      	movs	r3, #0
 8006884:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8006886:	2300      	movs	r3, #0
 8006888:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	695b      	ldr	r3, [r3, #20]
 800688e:	2b08      	cmp	r3, #8
 8006890:	d102      	bne.n	8006898 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8006892:	2308      	movs	r3, #8
 8006894:	60fb      	str	r3, [r7, #12]
 8006896:	e014      	b.n	80068c2 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	2201      	movs	r2, #1
 80068a0:	4013      	ands	r3, r2
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d10b      	bne.n	80068be <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068aa:	2220      	movs	r2, #32
 80068ac:	431a      	orrs	r2, r3
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2250      	movs	r2, #80	; 0x50
 80068b6:	2100      	movs	r1, #0
 80068b8:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	e06c      	b.n	8006998 <HAL_ADC_PollForConversion+0x120>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80068be:	230c      	movs	r3, #12
 80068c0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80068c2:	f7fe fa7c 	bl	8004dbe <HAL_GetTick>
 80068c6:	0003      	movs	r3, r0
 80068c8:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80068ca:	e019      	b.n	8006900 <HAL_ADC_PollForConversion+0x88>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	3301      	adds	r3, #1
 80068d0:	d016      	beq.n	8006900 <HAL_ADC_PollForConversion+0x88>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d007      	beq.n	80068e8 <HAL_ADC_PollForConversion+0x70>
 80068d8:	f7fe fa71 	bl	8004dbe <HAL_GetTick>
 80068dc:	0002      	movs	r2, r0
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	1ad3      	subs	r3, r2, r3
 80068e2:	683a      	ldr	r2, [r7, #0]
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d20b      	bcs.n	8006900 <HAL_ADC_PollForConversion+0x88>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ec:	2204      	movs	r2, #4
 80068ee:	431a      	orrs	r2, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2250      	movs	r2, #80	; 0x50
 80068f8:	2100      	movs	r1, #0
 80068fa:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 80068fc:	2303      	movs	r3, #3
 80068fe:	e04b      	b.n	8006998 <HAL_ADC_PollForConversion+0x120>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	4013      	ands	r3, r2
 800690a:	d0df      	beq.n	80068cc <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006910:	2280      	movs	r2, #128	; 0x80
 8006912:	0092      	lsls	r2, r2, #2
 8006914:	431a      	orrs	r2, r3
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68da      	ldr	r2, [r3, #12]
 8006920:	23c0      	movs	r3, #192	; 0xc0
 8006922:	011b      	lsls	r3, r3, #4
 8006924:	4013      	ands	r3, r2
 8006926:	d12e      	bne.n	8006986 <HAL_ADC_PollForConversion+0x10e>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2220      	movs	r2, #32
 800692c:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800692e:	2b00      	cmp	r3, #0
 8006930:	d129      	bne.n	8006986 <HAL_ADC_PollForConversion+0x10e>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	2208      	movs	r2, #8
 800693a:	4013      	ands	r3, r2
 800693c:	2b08      	cmp	r3, #8
 800693e:	d122      	bne.n	8006986 <HAL_ADC_PollForConversion+0x10e>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	2204      	movs	r2, #4
 8006948:	4013      	ands	r3, r2
 800694a:	d110      	bne.n	800696e <HAL_ADC_PollForConversion+0xf6>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	685a      	ldr	r2, [r3, #4]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	210c      	movs	r1, #12
 8006958:	438a      	bics	r2, r1
 800695a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006960:	4a0f      	ldr	r2, [pc, #60]	; (80069a0 <HAL_ADC_PollForConversion+0x128>)
 8006962:	4013      	ands	r3, r2
 8006964:	2201      	movs	r2, #1
 8006966:	431a      	orrs	r2, r3
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	655a      	str	r2, [r3, #84]	; 0x54
 800696c:	e00b      	b.n	8006986 <HAL_ADC_PollForConversion+0x10e>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006972:	2220      	movs	r2, #32
 8006974:	431a      	orrs	r2, r3
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800697e:	2201      	movs	r2, #1
 8006980:	431a      	orrs	r2, r3
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	699b      	ldr	r3, [r3, #24]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d103      	bne.n	8006996 <HAL_ADC_PollForConversion+0x11e>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	220c      	movs	r2, #12
 8006994:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 8006996:	2300      	movs	r3, #0
}
 8006998:	0018      	movs	r0, r3
 800699a:	46bd      	mov	sp, r7
 800699c:	b004      	add	sp, #16
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	fffffefe 	.word	0xfffffefe

080069a4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b082      	sub	sp, #8
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80069b2:	0018      	movs	r0, r3
 80069b4:	46bd      	mov	sp, r7
 80069b6:	b002      	add	sp, #8
 80069b8:	bd80      	pop	{r7, pc}
	...

080069bc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b082      	sub	sp, #8
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2250      	movs	r2, #80	; 0x50
 80069ca:	5c9b      	ldrb	r3, [r3, r2]
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d101      	bne.n	80069d4 <HAL_ADC_ConfigChannel+0x18>
 80069d0:	2302      	movs	r3, #2
 80069d2:	e06c      	b.n	8006aae <HAL_ADC_ConfigChannel+0xf2>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2250      	movs	r2, #80	; 0x50
 80069d8:	2101      	movs	r1, #1
 80069da:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	2204      	movs	r2, #4
 80069e4:	4013      	ands	r3, r2
 80069e6:	d00b      	beq.n	8006a00 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ec:	2220      	movs	r2, #32
 80069ee:	431a      	orrs	r2, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2250      	movs	r2, #80	; 0x50
 80069f8:	2100      	movs	r1, #0
 80069fa:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	e056      	b.n	8006aae <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	4a2c      	ldr	r2, [pc, #176]	; (8006ab8 <HAL_ADC_ConfigChannel+0xfc>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d028      	beq.n	8006a5c <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	035b      	lsls	r3, r3, #13
 8006a16:	0b5a      	lsrs	r2, r3, #13
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	430a      	orrs	r2, r1
 8006a1e:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	2380      	movs	r3, #128	; 0x80
 8006a26:	02db      	lsls	r3, r3, #11
 8006a28:	4013      	ands	r3, r2
 8006a2a:	d009      	beq.n	8006a40 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8006a2c:	4b23      	ldr	r3, [pc, #140]	; (8006abc <HAL_ADC_ConfigChannel+0x100>)
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	4b22      	ldr	r3, [pc, #136]	; (8006abc <HAL_ADC_ConfigChannel+0x100>)
 8006a32:	2180      	movs	r1, #128	; 0x80
 8006a34:	0409      	lsls	r1, r1, #16
 8006a36:	430a      	orrs	r2, r1
 8006a38:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8006a3a:	200a      	movs	r0, #10
 8006a3c:	f000 f94a 	bl	8006cd4 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	2380      	movs	r3, #128	; 0x80
 8006a46:	029b      	lsls	r3, r3, #10
 8006a48:	4013      	ands	r3, r2
 8006a4a:	d02b      	beq.n	8006aa4 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8006a4c:	4b1b      	ldr	r3, [pc, #108]	; (8006abc <HAL_ADC_ConfigChannel+0x100>)
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	4b1a      	ldr	r3, [pc, #104]	; (8006abc <HAL_ADC_ConfigChannel+0x100>)
 8006a52:	2180      	movs	r1, #128	; 0x80
 8006a54:	03c9      	lsls	r1, r1, #15
 8006a56:	430a      	orrs	r2, r1
 8006a58:	601a      	str	r2, [r3, #0]
 8006a5a:	e023      	b.n	8006aa4 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	035b      	lsls	r3, r3, #13
 8006a68:	0b5b      	lsrs	r3, r3, #13
 8006a6a:	43d9      	mvns	r1, r3
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	400a      	ands	r2, r1
 8006a72:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	2380      	movs	r3, #128	; 0x80
 8006a7a:	02db      	lsls	r3, r3, #11
 8006a7c:	4013      	ands	r3, r2
 8006a7e:	d005      	beq.n	8006a8c <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8006a80:	4b0e      	ldr	r3, [pc, #56]	; (8006abc <HAL_ADC_ConfigChannel+0x100>)
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	4b0d      	ldr	r3, [pc, #52]	; (8006abc <HAL_ADC_ConfigChannel+0x100>)
 8006a86:	490e      	ldr	r1, [pc, #56]	; (8006ac0 <HAL_ADC_ConfigChannel+0x104>)
 8006a88:	400a      	ands	r2, r1
 8006a8a:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	2380      	movs	r3, #128	; 0x80
 8006a92:	029b      	lsls	r3, r3, #10
 8006a94:	4013      	ands	r3, r2
 8006a96:	d005      	beq.n	8006aa4 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8006a98:	4b08      	ldr	r3, [pc, #32]	; (8006abc <HAL_ADC_ConfigChannel+0x100>)
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	4b07      	ldr	r3, [pc, #28]	; (8006abc <HAL_ADC_ConfigChannel+0x100>)
 8006a9e:	4909      	ldr	r1, [pc, #36]	; (8006ac4 <HAL_ADC_ConfigChannel+0x108>)
 8006aa0:	400a      	ands	r2, r1
 8006aa2:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2250      	movs	r2, #80	; 0x50
 8006aa8:	2100      	movs	r1, #0
 8006aaa:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8006aac:	2300      	movs	r3, #0
}
 8006aae:	0018      	movs	r0, r3
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	b002      	add	sp, #8
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	46c0      	nop			; (mov r8, r8)
 8006ab8:	00001001 	.word	0x00001001
 8006abc:	40012708 	.word	0x40012708
 8006ac0:	ff7fffff 	.word	0xff7fffff
 8006ac4:	ffbfffff 	.word	0xffbfffff

08006ac8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	2203      	movs	r2, #3
 8006adc:	4013      	ands	r3, r2
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d108      	bne.n	8006af4 <ADC_Enable+0x2c>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2201      	movs	r2, #1
 8006aea:	4013      	ands	r3, r2
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d101      	bne.n	8006af4 <ADC_Enable+0x2c>
 8006af0:	2301      	movs	r3, #1
 8006af2:	e000      	b.n	8006af6 <ADC_Enable+0x2e>
 8006af4:	2300      	movs	r3, #0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d13f      	bne.n	8006b7a <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	4a20      	ldr	r2, [pc, #128]	; (8006b84 <ADC_Enable+0xbc>)
 8006b02:	4013      	ands	r3, r2
 8006b04:	d00d      	beq.n	8006b22 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b0a:	2210      	movs	r2, #16
 8006b0c:	431a      	orrs	r2, r3
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b16:	2201      	movs	r2, #1
 8006b18:	431a      	orrs	r2, r3
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e02c      	b.n	8006b7c <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	689a      	ldr	r2, [r3, #8]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2101      	movs	r1, #1
 8006b2e:	430a      	orrs	r2, r1
 8006b30:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8006b32:	2001      	movs	r0, #1
 8006b34:	f000 f8ce 	bl	8006cd4 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8006b38:	f7fe f941 	bl	8004dbe <HAL_GetTick>
 8006b3c:	0003      	movs	r3, r0
 8006b3e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006b40:	e014      	b.n	8006b6c <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006b42:	f7fe f93c 	bl	8004dbe <HAL_GetTick>
 8006b46:	0002      	movs	r2, r0
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	1ad3      	subs	r3, r2, r3
 8006b4c:	2b0a      	cmp	r3, #10
 8006b4e:	d90d      	bls.n	8006b6c <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b54:	2210      	movs	r2, #16
 8006b56:	431a      	orrs	r2, r3
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b60:	2201      	movs	r2, #1
 8006b62:	431a      	orrs	r2, r3
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	e007      	b.n	8006b7c <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	2201      	movs	r2, #1
 8006b74:	4013      	ands	r3, r2
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d1e3      	bne.n	8006b42 <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8006b7a:	2300      	movs	r3, #0
}
 8006b7c:	0018      	movs	r0, r3
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	b004      	add	sp, #16
 8006b82:	bd80      	pop	{r7, pc}
 8006b84:	80000017 	.word	0x80000017

08006b88 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006b90:	2300      	movs	r3, #0
 8006b92:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	2203      	movs	r2, #3
 8006b9c:	4013      	ands	r3, r2
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d108      	bne.n	8006bb4 <ADC_Disable+0x2c>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	4013      	ands	r3, r2
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d101      	bne.n	8006bb4 <ADC_Disable+0x2c>
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e000      	b.n	8006bb6 <ADC_Disable+0x2e>
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d041      	beq.n	8006c3e <ADC_Disable+0xb6>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	2205      	movs	r2, #5
 8006bc2:	4013      	ands	r3, r2
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d110      	bne.n	8006bea <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	689a      	ldr	r2, [r3, #8]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	2102      	movs	r1, #2
 8006bd4:	430a      	orrs	r2, r1
 8006bd6:	609a      	str	r2, [r3, #8]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	2203      	movs	r2, #3
 8006bde:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006be0:	f7fe f8ed 	bl	8004dbe <HAL_GetTick>
 8006be4:	0003      	movs	r3, r0
 8006be6:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8006be8:	e022      	b.n	8006c30 <ADC_Disable+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bee:	2210      	movs	r2, #16
 8006bf0:	431a      	orrs	r2, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	431a      	orrs	r2, r3
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	e01c      	b.n	8006c40 <ADC_Disable+0xb8>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006c06:	f7fe f8da 	bl	8004dbe <HAL_GetTick>
 8006c0a:	0002      	movs	r2, r0
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	1ad3      	subs	r3, r2, r3
 8006c10:	2b0a      	cmp	r3, #10
 8006c12:	d90d      	bls.n	8006c30 <ADC_Disable+0xa8>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c18:	2210      	movs	r2, #16
 8006c1a:	431a      	orrs	r2, r3
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c24:	2201      	movs	r2, #1
 8006c26:	431a      	orrs	r2, r3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e007      	b.n	8006c40 <ADC_Disable+0xb8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	2201      	movs	r2, #1
 8006c38:	4013      	ands	r3, r2
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d0e3      	beq.n	8006c06 <ADC_Disable+0x7e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	0018      	movs	r0, r3
 8006c42:	46bd      	mov	sp, r7
 8006c44:	b004      	add	sp, #16
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006c50:	2300      	movs	r3, #0
 8006c52:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	2204      	movs	r2, #4
 8006c5c:	4013      	ands	r3, r2
 8006c5e:	d034      	beq.n	8006cca <ADC_ConversionStop+0x82>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	2204      	movs	r2, #4
 8006c68:	4013      	ands	r3, r2
 8006c6a:	2b04      	cmp	r3, #4
 8006c6c:	d10d      	bne.n	8006c8a <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	2202      	movs	r2, #2
 8006c76:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8006c78:	d107      	bne.n	8006c8a <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	689a      	ldr	r2, [r3, #8]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2110      	movs	r1, #16
 8006c86:	430a      	orrs	r2, r1
 8006c88:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006c8a:	f7fe f898 	bl	8004dbe <HAL_GetTick>
 8006c8e:	0003      	movs	r3, r0
 8006c90:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8006c92:	e014      	b.n	8006cbe <ADC_ConversionStop+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8006c94:	f7fe f893 	bl	8004dbe <HAL_GetTick>
 8006c98:	0002      	movs	r2, r0
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	1ad3      	subs	r3, r2, r3
 8006c9e:	2b0a      	cmp	r3, #10
 8006ca0:	d90d      	bls.n	8006cbe <ADC_ConversionStop+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ca6:	2210      	movs	r2, #16
 8006ca8:	431a      	orrs	r2, r3
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	655a      	str	r2, [r3, #84]	; 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	431a      	orrs	r2, r3
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e006      	b.n	8006ccc <ADC_ConversionStop+0x84>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	2204      	movs	r2, #4
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	d1e4      	bne.n	8006c94 <ADC_ConversionStop+0x4c>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8006cca:	2300      	movs	r3, #0
}
 8006ccc:	0018      	movs	r0, r3
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	b004      	add	sp, #16
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8006cdc:	4b0b      	ldr	r3, [pc, #44]	; (8006d0c <ADC_DelayMicroSecond+0x38>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	490b      	ldr	r1, [pc, #44]	; (8006d10 <ADC_DelayMicroSecond+0x3c>)
 8006ce2:	0018      	movs	r0, r3
 8006ce4:	f7f9 fa18 	bl	8000118 <__udivsi3>
 8006ce8:	0003      	movs	r3, r0
 8006cea:	001a      	movs	r2, r3
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	4353      	muls	r3, r2
 8006cf0:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8006cf2:	e002      	b.n	8006cfa <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	3b01      	subs	r3, #1
 8006cf8:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d1f9      	bne.n	8006cf4 <ADC_DelayMicroSecond+0x20>
  } 
}
 8006d00:	46c0      	nop			; (mov r8, r8)
 8006d02:	46c0      	nop			; (mov r8, r8)
 8006d04:	46bd      	mov	sp, r7
 8006d06:	b004      	add	sp, #16
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	46c0      	nop			; (mov r8, r8)
 8006d0c:	20000070 	.word	0x20000070
 8006d10:	000f4240 	.word	0x000f4240

08006d14 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b086      	sub	sp, #24
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006d1e:	2317      	movs	r3, #23
 8006d20:	18fb      	adds	r3, r7, r3
 8006d22:	2200      	movs	r2, #0
 8006d24:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8006d26:	2300      	movs	r3, #0
 8006d28:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2250      	movs	r2, #80	; 0x50
 8006d32:	5c9b      	ldrb	r3, [r3, r2]
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d101      	bne.n	8006d3c <HAL_ADCEx_Calibration_Start+0x28>
 8006d38:	2302      	movs	r3, #2
 8006d3a:	e07a      	b.n	8006e32 <HAL_ADCEx_Calibration_Start+0x11e>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2250      	movs	r2, #80	; 0x50
 8006d40:	2101      	movs	r1, #1
 8006d42:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	2203      	movs	r2, #3
 8006d4c:	4013      	ands	r3, r2
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d108      	bne.n	8006d64 <HAL_ADCEx_Calibration_Start+0x50>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	4013      	ands	r3, r2
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d101      	bne.n	8006d64 <HAL_ADCEx_Calibration_Start+0x50>
 8006d60:	2301      	movs	r3, #1
 8006d62:	e000      	b.n	8006d66 <HAL_ADCEx_Calibration_Start+0x52>
 8006d64:	2300      	movs	r3, #0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d152      	bne.n	8006e10 <HAL_ADCEx_Calibration_Start+0xfc>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d6e:	4a33      	ldr	r2, [pc, #204]	; (8006e3c <HAL_ADCEx_Calibration_Start+0x128>)
 8006d70:	4013      	ands	r3, r2
 8006d72:	2202      	movs	r2, #2
 8006d74:	431a      	orrs	r2, r3
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	2203      	movs	r2, #3
 8006d82:	4013      	ands	r3, r2
 8006d84:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68da      	ldr	r2, [r3, #12]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	2103      	movs	r1, #3
 8006d92:	438a      	bics	r2, r1
 8006d94:	60da      	str	r2, [r3, #12]
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	689a      	ldr	r2, [r3, #8]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2180      	movs	r1, #128	; 0x80
 8006da2:	0609      	lsls	r1, r1, #24
 8006da4:	430a      	orrs	r2, r1
 8006da6:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8006da8:	f7fe f809 	bl	8004dbe <HAL_GetTick>
 8006dac:	0003      	movs	r3, r0
 8006dae:	613b      	str	r3, [r7, #16]
    
    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8006db0:	e014      	b.n	8006ddc <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8006db2:	f7fe f804 	bl	8004dbe <HAL_GetTick>
 8006db6:	0002      	movs	r2, r0
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	1ad3      	subs	r3, r2, r3
 8006dbc:	2b0a      	cmp	r3, #10
 8006dbe:	d90d      	bls.n	8006ddc <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dc4:	2212      	movs	r2, #18
 8006dc6:	4393      	bics	r3, r2
 8006dc8:	2210      	movs	r2, #16
 8006dca:	431a      	orrs	r2, r3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2250      	movs	r2, #80	; 0x50
 8006dd4:	2100      	movs	r1, #0
 8006dd6:	5499      	strb	r1, [r3, r2]
        
        return HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	e02a      	b.n	8006e32 <HAL_ADCEx_Calibration_Start+0x11e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	0fdb      	lsrs	r3, r3, #31
 8006de4:	07da      	lsls	r2, r3, #31
 8006de6:	2380      	movs	r3, #128	; 0x80
 8006de8:	061b      	lsls	r3, r3, #24
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d0e1      	beq.n	8006db2 <HAL_ADCEx_Calibration_Start+0x9e>
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	68d9      	ldr	r1, [r3, #12]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	68fa      	ldr	r2, [r7, #12]
 8006dfa:	430a      	orrs	r2, r1
 8006dfc:	60da      	str	r2, [r3, #12]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e02:	2203      	movs	r2, #3
 8006e04:	4393      	bics	r3, r2
 8006e06:	2201      	movs	r2, #1
 8006e08:	431a      	orrs	r2, r3
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	655a      	str	r2, [r3, #84]	; 0x54
 8006e0e:	e009      	b.n	8006e24 <HAL_ADCEx_Calibration_Start+0x110>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e14:	2220      	movs	r2, #32
 8006e16:	431a      	orrs	r2, r3
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 8006e1c:	2317      	movs	r3, #23
 8006e1e:	18fb      	adds	r3, r7, r3
 8006e20:	2201      	movs	r2, #1
 8006e22:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2250      	movs	r2, #80	; 0x50
 8006e28:	2100      	movs	r1, #0
 8006e2a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8006e2c:	2317      	movs	r3, #23
 8006e2e:	18fb      	adds	r3, r7, r3
 8006e30:	781b      	ldrb	r3, [r3, #0]
}
 8006e32:	0018      	movs	r0, r3
 8006e34:	46bd      	mov	sp, r7
 8006e36:	b006      	add	sp, #24
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	46c0      	nop			; (mov r8, r8)
 8006e3c:	fffffefd 	.word	0xfffffefd

08006e40 <__NVIC_EnableIRQ>:
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b082      	sub	sp, #8
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	0002      	movs	r2, r0
 8006e48:	1dfb      	adds	r3, r7, #7
 8006e4a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006e4c:	1dfb      	adds	r3, r7, #7
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	2b7f      	cmp	r3, #127	; 0x7f
 8006e52:	d809      	bhi.n	8006e68 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e54:	1dfb      	adds	r3, r7, #7
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	001a      	movs	r2, r3
 8006e5a:	231f      	movs	r3, #31
 8006e5c:	401a      	ands	r2, r3
 8006e5e:	4b04      	ldr	r3, [pc, #16]	; (8006e70 <__NVIC_EnableIRQ+0x30>)
 8006e60:	2101      	movs	r1, #1
 8006e62:	4091      	lsls	r1, r2
 8006e64:	000a      	movs	r2, r1
 8006e66:	601a      	str	r2, [r3, #0]
}
 8006e68:	46c0      	nop			; (mov r8, r8)
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	b002      	add	sp, #8
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	e000e100 	.word	0xe000e100

08006e74 <__NVIC_DisableIRQ>:
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b082      	sub	sp, #8
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	0002      	movs	r2, r0
 8006e7c:	1dfb      	adds	r3, r7, #7
 8006e7e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006e80:	1dfb      	adds	r3, r7, #7
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	2b7f      	cmp	r3, #127	; 0x7f
 8006e86:	d810      	bhi.n	8006eaa <__NVIC_DisableIRQ+0x36>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e88:	1dfb      	adds	r3, r7, #7
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	001a      	movs	r2, r3
 8006e8e:	231f      	movs	r3, #31
 8006e90:	4013      	ands	r3, r2
 8006e92:	4908      	ldr	r1, [pc, #32]	; (8006eb4 <__NVIC_DisableIRQ+0x40>)
 8006e94:	2201      	movs	r2, #1
 8006e96:	409a      	lsls	r2, r3
 8006e98:	0013      	movs	r3, r2
 8006e9a:	2280      	movs	r2, #128	; 0x80
 8006e9c:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006e9e:	f3bf 8f4f 	dsb	sy
}
 8006ea2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8006ea4:	f3bf 8f6f 	isb	sy
}
 8006ea8:	46c0      	nop			; (mov r8, r8)
}
 8006eaa:	46c0      	nop			; (mov r8, r8)
 8006eac:	46bd      	mov	sp, r7
 8006eae:	b002      	add	sp, #8
 8006eb0:	bd80      	pop	{r7, pc}
 8006eb2:	46c0      	nop			; (mov r8, r8)
 8006eb4:	e000e100 	.word	0xe000e100

08006eb8 <__NVIC_SetPriority>:
{
 8006eb8:	b590      	push	{r4, r7, lr}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	0002      	movs	r2, r0
 8006ec0:	6039      	str	r1, [r7, #0]
 8006ec2:	1dfb      	adds	r3, r7, #7
 8006ec4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006ec6:	1dfb      	adds	r3, r7, #7
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	2b7f      	cmp	r3, #127	; 0x7f
 8006ecc:	d828      	bhi.n	8006f20 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006ece:	4a2f      	ldr	r2, [pc, #188]	; (8006f8c <__NVIC_SetPriority+0xd4>)
 8006ed0:	1dfb      	adds	r3, r7, #7
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	b25b      	sxtb	r3, r3
 8006ed6:	089b      	lsrs	r3, r3, #2
 8006ed8:	33c0      	adds	r3, #192	; 0xc0
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	589b      	ldr	r3, [r3, r2]
 8006ede:	1dfa      	adds	r2, r7, #7
 8006ee0:	7812      	ldrb	r2, [r2, #0]
 8006ee2:	0011      	movs	r1, r2
 8006ee4:	2203      	movs	r2, #3
 8006ee6:	400a      	ands	r2, r1
 8006ee8:	00d2      	lsls	r2, r2, #3
 8006eea:	21ff      	movs	r1, #255	; 0xff
 8006eec:	4091      	lsls	r1, r2
 8006eee:	000a      	movs	r2, r1
 8006ef0:	43d2      	mvns	r2, r2
 8006ef2:	401a      	ands	r2, r3
 8006ef4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	019b      	lsls	r3, r3, #6
 8006efa:	22ff      	movs	r2, #255	; 0xff
 8006efc:	401a      	ands	r2, r3
 8006efe:	1dfb      	adds	r3, r7, #7
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	0018      	movs	r0, r3
 8006f04:	2303      	movs	r3, #3
 8006f06:	4003      	ands	r3, r0
 8006f08:	00db      	lsls	r3, r3, #3
 8006f0a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006f0c:	481f      	ldr	r0, [pc, #124]	; (8006f8c <__NVIC_SetPriority+0xd4>)
 8006f0e:	1dfb      	adds	r3, r7, #7
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	b25b      	sxtb	r3, r3
 8006f14:	089b      	lsrs	r3, r3, #2
 8006f16:	430a      	orrs	r2, r1
 8006f18:	33c0      	adds	r3, #192	; 0xc0
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	501a      	str	r2, [r3, r0]
}
 8006f1e:	e031      	b.n	8006f84 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006f20:	4a1b      	ldr	r2, [pc, #108]	; (8006f90 <__NVIC_SetPriority+0xd8>)
 8006f22:	1dfb      	adds	r3, r7, #7
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	0019      	movs	r1, r3
 8006f28:	230f      	movs	r3, #15
 8006f2a:	400b      	ands	r3, r1
 8006f2c:	3b08      	subs	r3, #8
 8006f2e:	089b      	lsrs	r3, r3, #2
 8006f30:	3306      	adds	r3, #6
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	18d3      	adds	r3, r2, r3
 8006f36:	3304      	adds	r3, #4
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	1dfa      	adds	r2, r7, #7
 8006f3c:	7812      	ldrb	r2, [r2, #0]
 8006f3e:	0011      	movs	r1, r2
 8006f40:	2203      	movs	r2, #3
 8006f42:	400a      	ands	r2, r1
 8006f44:	00d2      	lsls	r2, r2, #3
 8006f46:	21ff      	movs	r1, #255	; 0xff
 8006f48:	4091      	lsls	r1, r2
 8006f4a:	000a      	movs	r2, r1
 8006f4c:	43d2      	mvns	r2, r2
 8006f4e:	401a      	ands	r2, r3
 8006f50:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	019b      	lsls	r3, r3, #6
 8006f56:	22ff      	movs	r2, #255	; 0xff
 8006f58:	401a      	ands	r2, r3
 8006f5a:	1dfb      	adds	r3, r7, #7
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	0018      	movs	r0, r3
 8006f60:	2303      	movs	r3, #3
 8006f62:	4003      	ands	r3, r0
 8006f64:	00db      	lsls	r3, r3, #3
 8006f66:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006f68:	4809      	ldr	r0, [pc, #36]	; (8006f90 <__NVIC_SetPriority+0xd8>)
 8006f6a:	1dfb      	adds	r3, r7, #7
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	001c      	movs	r4, r3
 8006f70:	230f      	movs	r3, #15
 8006f72:	4023      	ands	r3, r4
 8006f74:	3b08      	subs	r3, #8
 8006f76:	089b      	lsrs	r3, r3, #2
 8006f78:	430a      	orrs	r2, r1
 8006f7a:	3306      	adds	r3, #6
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	18c3      	adds	r3, r0, r3
 8006f80:	3304      	adds	r3, #4
 8006f82:	601a      	str	r2, [r3, #0]
}
 8006f84:	46c0      	nop			; (mov r8, r8)
 8006f86:	46bd      	mov	sp, r7
 8006f88:	b003      	add	sp, #12
 8006f8a:	bd90      	pop	{r4, r7, pc}
 8006f8c:	e000e100 	.word	0xe000e100
 8006f90:	e000ed00 	.word	0xe000ed00

08006f94 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	60b9      	str	r1, [r7, #8]
 8006f9c:	607a      	str	r2, [r7, #4]
 8006f9e:	210f      	movs	r1, #15
 8006fa0:	187b      	adds	r3, r7, r1
 8006fa2:	1c02      	adds	r2, r0, #0
 8006fa4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8006fa6:	68ba      	ldr	r2, [r7, #8]
 8006fa8:	187b      	adds	r3, r7, r1
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	b25b      	sxtb	r3, r3
 8006fae:	0011      	movs	r1, r2
 8006fb0:	0018      	movs	r0, r3
 8006fb2:	f7ff ff81 	bl	8006eb8 <__NVIC_SetPriority>
}
 8006fb6:	46c0      	nop			; (mov r8, r8)
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	b004      	add	sp, #16
 8006fbc:	bd80      	pop	{r7, pc}

08006fbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006fbe:	b580      	push	{r7, lr}
 8006fc0:	b082      	sub	sp, #8
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	0002      	movs	r2, r0
 8006fc6:	1dfb      	adds	r3, r7, #7
 8006fc8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006fca:	1dfb      	adds	r3, r7, #7
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	b25b      	sxtb	r3, r3
 8006fd0:	0018      	movs	r0, r3
 8006fd2:	f7ff ff35 	bl	8006e40 <__NVIC_EnableIRQ>
}
 8006fd6:	46c0      	nop			; (mov r8, r8)
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	b002      	add	sp, #8
 8006fdc:	bd80      	pop	{r7, pc}

08006fde <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006fde:	b580      	push	{r7, lr}
 8006fe0:	b082      	sub	sp, #8
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	0002      	movs	r2, r0
 8006fe6:	1dfb      	adds	r3, r7, #7
 8006fe8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006fea:	1dfb      	adds	r3, r7, #7
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	b25b      	sxtb	r3, r3
 8006ff0:	0018      	movs	r0, r3
 8006ff2:	f7ff ff3f 	bl	8006e74 <__NVIC_DisableIRQ>
}
 8006ff6:	46c0      	nop			; (mov r8, r8)
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	b002      	add	sp, #8
 8006ffc:	bd80      	pop	{r7, pc}
	...

08007000 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b084      	sub	sp, #16
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d101      	bne.n	8007012 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	e061      	b.n	80070d6 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a32      	ldr	r2, [pc, #200]	; (80070e0 <HAL_DMA_Init+0xe0>)
 8007018:	4694      	mov	ip, r2
 800701a:	4463      	add	r3, ip
 800701c:	2114      	movs	r1, #20
 800701e:	0018      	movs	r0, r3
 8007020:	f7f9 f87a 	bl	8000118 <__udivsi3>
 8007024:	0003      	movs	r3, r0
 8007026:	009a      	lsls	r2, r3, #2
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	4a2d      	ldr	r2, [pc, #180]	; (80070e4 <HAL_DMA_Init+0xe4>)
 8007030:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2225      	movs	r2, #37	; 0x25
 8007036:	2102      	movs	r1, #2
 8007038:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	4a28      	ldr	r2, [pc, #160]	; (80070e8 <HAL_DMA_Init+0xe8>)
 8007046:	4013      	ands	r3, r2
 8007048:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007052:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	691b      	ldr	r3, [r3, #16]
 8007058:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800705e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	699b      	ldr	r3, [r3, #24]
 8007064:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800706a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6a1b      	ldr	r3, [r3, #32]
 8007070:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007072:	68fa      	ldr	r2, [r7, #12]
 8007074:	4313      	orrs	r3, r2
 8007076:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	68fa      	ldr	r2, [r7, #12]
 800707e:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	689a      	ldr	r2, [r3, #8]
 8007084:	2380      	movs	r3, #128	; 0x80
 8007086:	01db      	lsls	r3, r3, #7
 8007088:	429a      	cmp	r2, r3
 800708a:	d018      	beq.n	80070be <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800708c:	4b17      	ldr	r3, [pc, #92]	; (80070ec <HAL_DMA_Init+0xec>)
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007094:	211c      	movs	r1, #28
 8007096:	400b      	ands	r3, r1
 8007098:	210f      	movs	r1, #15
 800709a:	4099      	lsls	r1, r3
 800709c:	000b      	movs	r3, r1
 800709e:	43d9      	mvns	r1, r3
 80070a0:	4b12      	ldr	r3, [pc, #72]	; (80070ec <HAL_DMA_Init+0xec>)
 80070a2:	400a      	ands	r2, r1
 80070a4:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80070a6:	4b11      	ldr	r3, [pc, #68]	; (80070ec <HAL_DMA_Init+0xec>)
 80070a8:	6819      	ldr	r1, [r3, #0]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	685a      	ldr	r2, [r3, #4]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070b2:	201c      	movs	r0, #28
 80070b4:	4003      	ands	r3, r0
 80070b6:	409a      	lsls	r2, r3
 80070b8:	4b0c      	ldr	r3, [pc, #48]	; (80070ec <HAL_DMA_Init+0xec>)
 80070ba:	430a      	orrs	r2, r1
 80070bc:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2225      	movs	r2, #37	; 0x25
 80070c8:	2101      	movs	r1, #1
 80070ca:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2224      	movs	r2, #36	; 0x24
 80070d0:	2100      	movs	r1, #0
 80070d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80070d4:	2300      	movs	r3, #0
}
 80070d6:	0018      	movs	r0, r3
 80070d8:	46bd      	mov	sp, r7
 80070da:	b004      	add	sp, #16
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	46c0      	nop			; (mov r8, r8)
 80070e0:	bffdfff8 	.word	0xbffdfff8
 80070e4:	40020000 	.word	0x40020000
 80070e8:	ffff800f 	.word	0xffff800f
 80070ec:	400200a8 	.word	0x400200a8

080070f0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b082      	sub	sp, #8
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d101      	bne.n	8007102 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	e04a      	b.n	8007198 <HAL_DMA_DeInit+0xa8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	2101      	movs	r1, #1
 800710e:	438a      	bics	r2, r1
 8007110:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a22      	ldr	r2, [pc, #136]	; (80071a0 <HAL_DMA_DeInit+0xb0>)
 8007118:	4694      	mov	ip, r2
 800711a:	4463      	add	r3, ip
 800711c:	2114      	movs	r1, #20
 800711e:	0018      	movs	r0, r3
 8007120:	f7f8 fffa 	bl	8000118 <__udivsi3>
 8007124:	0003      	movs	r3, r0
 8007126:	009a      	lsls	r2, r3, #2
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	4a1d      	ldr	r2, [pc, #116]	; (80071a4 <HAL_DMA_DeInit+0xb4>)
 8007130:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	2200      	movs	r2, #0
 8007138:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800713e:	221c      	movs	r2, #28
 8007140:	401a      	ands	r2, r3
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007146:	2101      	movs	r1, #1
 8007148:	4091      	lsls	r1, r2
 800714a:	000a      	movs	r2, r1
 800714c:	605a      	str	r2, [r3, #4]

  /* Reset DMA channel selection register */
  /* DMA1 */
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800714e:	4b16      	ldr	r3, [pc, #88]	; (80071a8 <HAL_DMA_DeInit+0xb8>)
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007156:	211c      	movs	r1, #28
 8007158:	400b      	ands	r3, r1
 800715a:	210f      	movs	r1, #15
 800715c:	4099      	lsls	r1, r3
 800715e:	000b      	movs	r3, r1
 8007160:	43d9      	mvns	r1, r3
 8007162:	4b11      	ldr	r3, [pc, #68]	; (80071a8 <HAL_DMA_DeInit+0xb8>)
 8007164:	400a      	ands	r2, r1
 8007166:	601a      	str	r2, [r3, #0]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2225      	movs	r2, #37	; 0x25
 800718a:	2100      	movs	r1, #0
 800718c:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2224      	movs	r2, #36	; 0x24
 8007192:	2100      	movs	r1, #0
 8007194:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007196:	2300      	movs	r3, #0
}
 8007198:	0018      	movs	r0, r3
 800719a:	46bd      	mov	sp, r7
 800719c:	b002      	add	sp, #8
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	bffdfff8 	.word	0xbffdfff8
 80071a4:	40020000 	.word	0x40020000
 80071a8:	400200a8 	.word	0x400200a8

080071ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b086      	sub	sp, #24
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	607a      	str	r2, [r7, #4]
 80071b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80071ba:	2317      	movs	r3, #23
 80071bc:	18fb      	adds	r3, r7, r3
 80071be:	2200      	movs	r2, #0
 80071c0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2224      	movs	r2, #36	; 0x24
 80071c6:	5c9b      	ldrb	r3, [r3, r2]
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d101      	bne.n	80071d0 <HAL_DMA_Start_IT+0x24>
 80071cc:	2302      	movs	r3, #2
 80071ce:	e04f      	b.n	8007270 <HAL_DMA_Start_IT+0xc4>
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2224      	movs	r2, #36	; 0x24
 80071d4:	2101      	movs	r1, #1
 80071d6:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2225      	movs	r2, #37	; 0x25
 80071dc:	5c9b      	ldrb	r3, [r3, r2]
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d13a      	bne.n	800725a <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2225      	movs	r2, #37	; 0x25
 80071e8:	2102      	movs	r1, #2
 80071ea:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2200      	movs	r2, #0
 80071f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	2101      	movs	r1, #1
 80071fe:	438a      	bics	r2, r1
 8007200:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	68b9      	ldr	r1, [r7, #8]
 8007208:	68f8      	ldr	r0, [r7, #12]
 800720a:	f000 f96a 	bl	80074e2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007212:	2b00      	cmp	r3, #0
 8007214:	d008      	beq.n	8007228 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	210e      	movs	r1, #14
 8007222:	430a      	orrs	r2, r1
 8007224:	601a      	str	r2, [r3, #0]
 8007226:	e00f      	b.n	8007248 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2104      	movs	r1, #4
 8007234:	438a      	bics	r2, r1
 8007236:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	210a      	movs	r1, #10
 8007244:	430a      	orrs	r2, r1
 8007246:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	2101      	movs	r1, #1
 8007254:	430a      	orrs	r2, r1
 8007256:	601a      	str	r2, [r3, #0]
 8007258:	e007      	b.n	800726a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2224      	movs	r2, #36	; 0x24
 800725e:	2100      	movs	r1, #0
 8007260:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8007262:	2317      	movs	r3, #23
 8007264:	18fb      	adds	r3, r7, r3
 8007266:	2202      	movs	r2, #2
 8007268:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800726a:	2317      	movs	r3, #23
 800726c:	18fb      	adds	r3, r7, r3
 800726e:	781b      	ldrb	r3, [r3, #0]
}
 8007270:	0018      	movs	r0, r3
 8007272:	46bd      	mov	sp, r7
 8007274:	b006      	add	sp, #24
 8007276:	bd80      	pop	{r7, pc}

08007278 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b084      	sub	sp, #16
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007280:	230f      	movs	r3, #15
 8007282:	18fb      	adds	r3, r7, r3
 8007284:	2200      	movs	r2, #0
 8007286:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2225      	movs	r2, #37	; 0x25
 800728c:	5c9b      	ldrb	r3, [r3, r2]
 800728e:	b2db      	uxtb	r3, r3
 8007290:	2b02      	cmp	r3, #2
 8007292:	d008      	beq.n	80072a6 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2204      	movs	r2, #4
 8007298:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2224      	movs	r2, #36	; 0x24
 800729e:	2100      	movs	r1, #0
 80072a0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80072a2:	2301      	movs	r3, #1
 80072a4:	e024      	b.n	80072f0 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	210e      	movs	r1, #14
 80072b2:	438a      	bics	r2, r1
 80072b4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	2101      	movs	r1, #1
 80072c2:	438a      	bics	r2, r1
 80072c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072ca:	221c      	movs	r2, #28
 80072cc:	401a      	ands	r2, r3
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d2:	2101      	movs	r1, #1
 80072d4:	4091      	lsls	r1, r2
 80072d6:	000a      	movs	r2, r1
 80072d8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2225      	movs	r2, #37	; 0x25
 80072de:	2101      	movs	r1, #1
 80072e0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2224      	movs	r2, #36	; 0x24
 80072e6:	2100      	movs	r1, #0
 80072e8:	5499      	strb	r1, [r3, r2]

    return status;
 80072ea:	230f      	movs	r3, #15
 80072ec:	18fb      	adds	r3, r7, r3
 80072ee:	781b      	ldrb	r3, [r3, #0]
  }
}
 80072f0:	0018      	movs	r0, r3
 80072f2:	46bd      	mov	sp, r7
 80072f4:	b004      	add	sp, #16
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007300:	210f      	movs	r1, #15
 8007302:	187b      	adds	r3, r7, r1
 8007304:	2200      	movs	r2, #0
 8007306:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2225      	movs	r2, #37	; 0x25
 800730c:	5c9b      	ldrb	r3, [r3, r2]
 800730e:	b2db      	uxtb	r3, r3
 8007310:	2b02      	cmp	r3, #2
 8007312:	d006      	beq.n	8007322 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2204      	movs	r2, #4
 8007318:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800731a:	187b      	adds	r3, r7, r1
 800731c:	2201      	movs	r2, #1
 800731e:	701a      	strb	r2, [r3, #0]
 8007320:	e02a      	b.n	8007378 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	210e      	movs	r1, #14
 800732e:	438a      	bics	r2, r1
 8007330:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	2101      	movs	r1, #1
 800733e:	438a      	bics	r2, r1
 8007340:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007346:	221c      	movs	r2, #28
 8007348:	401a      	ands	r2, r3
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800734e:	2101      	movs	r1, #1
 8007350:	4091      	lsls	r1, r2
 8007352:	000a      	movs	r2, r1
 8007354:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2225      	movs	r2, #37	; 0x25
 800735a:	2101      	movs	r1, #1
 800735c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2224      	movs	r2, #36	; 0x24
 8007362:	2100      	movs	r1, #0
 8007364:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800736a:	2b00      	cmp	r3, #0
 800736c:	d004      	beq.n	8007378 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	0010      	movs	r0, r2
 8007376:	4798      	blx	r3
    }
  }
  return status;
 8007378:	230f      	movs	r3, #15
 800737a:	18fb      	adds	r3, r7, r3
 800737c:	781b      	ldrb	r3, [r3, #0]
}
 800737e:	0018      	movs	r0, r3
 8007380:	46bd      	mov	sp, r7
 8007382:	b004      	add	sp, #16
 8007384:	bd80      	pop	{r7, pc}

08007386 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007386:	b580      	push	{r7, lr}
 8007388:	b084      	sub	sp, #16
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073a2:	221c      	movs	r2, #28
 80073a4:	4013      	ands	r3, r2
 80073a6:	2204      	movs	r2, #4
 80073a8:	409a      	lsls	r2, r3
 80073aa:	0013      	movs	r3, r2
 80073ac:	68fa      	ldr	r2, [r7, #12]
 80073ae:	4013      	ands	r3, r2
 80073b0:	d026      	beq.n	8007400 <HAL_DMA_IRQHandler+0x7a>
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	2204      	movs	r2, #4
 80073b6:	4013      	ands	r3, r2
 80073b8:	d022      	beq.n	8007400 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	2220      	movs	r2, #32
 80073c2:	4013      	ands	r3, r2
 80073c4:	d107      	bne.n	80073d6 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	2104      	movs	r1, #4
 80073d2:	438a      	bics	r2, r1
 80073d4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073da:	221c      	movs	r2, #28
 80073dc:	401a      	ands	r2, r3
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e2:	2104      	movs	r1, #4
 80073e4:	4091      	lsls	r1, r2
 80073e6:	000a      	movs	r2, r1
 80073e8:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d100      	bne.n	80073f4 <HAL_DMA_IRQHandler+0x6e>
 80073f2:	e071      	b.n	80074d8 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	0010      	movs	r0, r2
 80073fc:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 80073fe:	e06b      	b.n	80074d8 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007404:	221c      	movs	r2, #28
 8007406:	4013      	ands	r3, r2
 8007408:	2202      	movs	r2, #2
 800740a:	409a      	lsls	r2, r3
 800740c:	0013      	movs	r3, r2
 800740e:	68fa      	ldr	r2, [r7, #12]
 8007410:	4013      	ands	r3, r2
 8007412:	d02d      	beq.n	8007470 <HAL_DMA_IRQHandler+0xea>
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	2202      	movs	r2, #2
 8007418:	4013      	ands	r3, r2
 800741a:	d029      	beq.n	8007470 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	2220      	movs	r2, #32
 8007424:	4013      	ands	r3, r2
 8007426:	d10b      	bne.n	8007440 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	210a      	movs	r1, #10
 8007434:	438a      	bics	r2, r1
 8007436:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2225      	movs	r2, #37	; 0x25
 800743c:	2101      	movs	r1, #1
 800743e:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007444:	221c      	movs	r2, #28
 8007446:	401a      	ands	r2, r3
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744c:	2102      	movs	r1, #2
 800744e:	4091      	lsls	r1, r2
 8007450:	000a      	movs	r2, r1
 8007452:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2224      	movs	r2, #36	; 0x24
 8007458:	2100      	movs	r1, #0
 800745a:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007460:	2b00      	cmp	r3, #0
 8007462:	d039      	beq.n	80074d8 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	0010      	movs	r0, r2
 800746c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800746e:	e033      	b.n	80074d8 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007474:	221c      	movs	r2, #28
 8007476:	4013      	ands	r3, r2
 8007478:	2208      	movs	r2, #8
 800747a:	409a      	lsls	r2, r3
 800747c:	0013      	movs	r3, r2
 800747e:	68fa      	ldr	r2, [r7, #12]
 8007480:	4013      	ands	r3, r2
 8007482:	d02a      	beq.n	80074da <HAL_DMA_IRQHandler+0x154>
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	2208      	movs	r2, #8
 8007488:	4013      	ands	r3, r2
 800748a:	d026      	beq.n	80074da <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	210e      	movs	r1, #14
 8007498:	438a      	bics	r2, r1
 800749a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074a0:	221c      	movs	r2, #28
 80074a2:	401a      	ands	r2, r3
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a8:	2101      	movs	r1, #1
 80074aa:	4091      	lsls	r1, r2
 80074ac:	000a      	movs	r2, r1
 80074ae:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2201      	movs	r2, #1
 80074b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2225      	movs	r2, #37	; 0x25
 80074ba:	2101      	movs	r1, #1
 80074bc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2224      	movs	r2, #36	; 0x24
 80074c2:	2100      	movs	r1, #0
 80074c4:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d005      	beq.n	80074da <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	0010      	movs	r0, r2
 80074d6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80074d8:	46c0      	nop			; (mov r8, r8)
 80074da:	46c0      	nop			; (mov r8, r8)
}
 80074dc:	46bd      	mov	sp, r7
 80074de:	b004      	add	sp, #16
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b084      	sub	sp, #16
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	60f8      	str	r0, [r7, #12]
 80074ea:	60b9      	str	r1, [r7, #8]
 80074ec:	607a      	str	r2, [r7, #4]
 80074ee:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074f4:	221c      	movs	r2, #28
 80074f6:	401a      	ands	r2, r3
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074fc:	2101      	movs	r1, #1
 80074fe:	4091      	lsls	r1, r2
 8007500:	000a      	movs	r2, r1
 8007502:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	683a      	ldr	r2, [r7, #0]
 800750a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	2b10      	cmp	r3, #16
 8007512:	d108      	bne.n	8007526 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	68ba      	ldr	r2, [r7, #8]
 8007522:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007524:	e007      	b.n	8007536 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	68ba      	ldr	r2, [r7, #8]
 800752c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	60da      	str	r2, [r3, #12]
}
 8007536:	46c0      	nop			; (mov r8, r8)
 8007538:	46bd      	mov	sp, r7
 800753a:	b004      	add	sp, #16
 800753c:	bd80      	pop	{r7, pc}

0800753e <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800753e:	b580      	push	{r7, lr}
 8007540:	b086      	sub	sp, #24
 8007542:	af00      	add	r7, sp, #0
 8007544:	60f8      	str	r0, [r7, #12]
 8007546:	607a      	str	r2, [r7, #4]
 8007548:	200b      	movs	r0, #11
 800754a:	183b      	adds	r3, r7, r0
 800754c:	1c0a      	adds	r2, r1, #0
 800754e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007550:	2317      	movs	r3, #23
 8007552:	18fb      	adds	r3, r7, r3
 8007554:	2200      	movs	r2, #0
 8007556:	701a      	strb	r2, [r3, #0]

  switch (CallbackID)
 8007558:	183b      	adds	r3, r7, r0
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d103      	bne.n	8007568 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	605a      	str	r2, [r3, #4]
      break;
 8007566:	e004      	b.n	8007572 <HAL_EXTI_RegisterCallback+0x34>

    default:
      status = HAL_ERROR;
 8007568:	2317      	movs	r3, #23
 800756a:	18fb      	adds	r3, r7, r3
 800756c:	2201      	movs	r2, #1
 800756e:	701a      	strb	r2, [r3, #0]
      break;
 8007570:	46c0      	nop			; (mov r8, r8)
  }

  return status;
 8007572:	2317      	movs	r3, #23
 8007574:	18fb      	adds	r3, r7, r3
 8007576:	781b      	ldrb	r3, [r3, #0]
}
 8007578:	0018      	movs	r0, r3
 800757a:	46bd      	mov	sp, r7
 800757c:	b006      	add	sp, #24
 800757e:	bd80      	pop	{r7, pc}

08007580 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b082      	sub	sp, #8
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d101      	bne.n	8007594 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	e003      	b.n	800759c <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	683a      	ldr	r2, [r7, #0]
 8007598:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800759a:	2300      	movs	r3, #0
  }
}
 800759c:	0018      	movs	r0, r3
 800759e:	46bd      	mov	sp, r7
 80075a0:	b002      	add	sp, #8
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	221f      	movs	r2, #31
 80075b2:	4013      	ands	r3, r2
 80075b4:	2201      	movs	r2, #1
 80075b6:	409a      	lsls	r2, r3
 80075b8:	0013      	movs	r3, r2
 80075ba:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 80075bc:	4b0a      	ldr	r3, [pc, #40]	; (80075e8 <HAL_EXTI_IRQHandler+0x44>)
 80075be:	695a      	ldr	r2, [r3, #20]
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	4013      	ands	r3, r2
 80075c4:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d009      	beq.n	80075e0 <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 80075cc:	4b06      	ldr	r3, [pc, #24]	; (80075e8 <HAL_EXTI_IRQHandler+0x44>)
 80075ce:	68fa      	ldr	r2, [r7, #12]
 80075d0:	615a      	str	r2, [r3, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d002      	beq.n	80075e0 <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	4798      	blx	r3
    }
  }
}
 80075e0:	46c0      	nop			; (mov r8, r8)
 80075e2:	46bd      	mov	sp, r7
 80075e4:	b004      	add	sp, #16
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	40010400 	.word	0x40010400

080075ec <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80075f4:	f7fd fbe3 	bl	8004dbe <HAL_GetTick>
 80075f8:	0003      	movs	r3, r0
 80075fa:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80075fc:	e00f      	b.n	800761e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	3301      	adds	r3, #1
 8007602:	d00c      	beq.n	800761e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d007      	beq.n	800761a <FLASH_WaitForLastOperation+0x2e>
 800760a:	f7fd fbd8 	bl	8004dbe <HAL_GetTick>
 800760e:	0002      	movs	r2, r0
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	1ad3      	subs	r3, r2, r3
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	429a      	cmp	r2, r3
 8007618:	d201      	bcs.n	800761e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800761a:	2303      	movs	r3, #3
 800761c:	e052      	b.n	80076c4 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800761e:	4b2b      	ldr	r3, [pc, #172]	; (80076cc <FLASH_WaitForLastOperation+0xe0>)
 8007620:	699b      	ldr	r3, [r3, #24]
 8007622:	2201      	movs	r2, #1
 8007624:	4013      	ands	r3, r2
 8007626:	2b01      	cmp	r3, #1
 8007628:	d0e9      	beq.n	80075fe <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800762a:	4b28      	ldr	r3, [pc, #160]	; (80076cc <FLASH_WaitForLastOperation+0xe0>)
 800762c:	699b      	ldr	r3, [r3, #24]
 800762e:	2202      	movs	r2, #2
 8007630:	4013      	ands	r3, r2
 8007632:	2b02      	cmp	r3, #2
 8007634:	d102      	bne.n	800763c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007636:	4b25      	ldr	r3, [pc, #148]	; (80076cc <FLASH_WaitForLastOperation+0xe0>)
 8007638:	2202      	movs	r2, #2
 800763a:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800763c:	4b23      	ldr	r3, [pc, #140]	; (80076cc <FLASH_WaitForLastOperation+0xe0>)
 800763e:	699a      	ldr	r2, [r3, #24]
 8007640:	2380      	movs	r3, #128	; 0x80
 8007642:	005b      	lsls	r3, r3, #1
 8007644:	401a      	ands	r2, r3
 8007646:	2380      	movs	r3, #128	; 0x80
 8007648:	005b      	lsls	r3, r3, #1
 800764a:	429a      	cmp	r2, r3
 800764c:	d035      	beq.n	80076ba <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800764e:	4b1f      	ldr	r3, [pc, #124]	; (80076cc <FLASH_WaitForLastOperation+0xe0>)
 8007650:	699a      	ldr	r2, [r3, #24]
 8007652:	2380      	movs	r3, #128	; 0x80
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8007658:	2380      	movs	r3, #128	; 0x80
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	429a      	cmp	r2, r3
 800765e:	d02c      	beq.n	80076ba <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8007660:	4b1a      	ldr	r3, [pc, #104]	; (80076cc <FLASH_WaitForLastOperation+0xe0>)
 8007662:	699a      	ldr	r2, [r3, #24]
 8007664:	2380      	movs	r3, #128	; 0x80
 8007666:	00db      	lsls	r3, r3, #3
 8007668:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800766a:	2380      	movs	r3, #128	; 0x80
 800766c:	00db      	lsls	r3, r3, #3
 800766e:	429a      	cmp	r2, r3
 8007670:	d023      	beq.n	80076ba <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8007672:	4b16      	ldr	r3, [pc, #88]	; (80076cc <FLASH_WaitForLastOperation+0xe0>)
 8007674:	699a      	ldr	r2, [r3, #24]
 8007676:	2380      	movs	r3, #128	; 0x80
 8007678:	011b      	lsls	r3, r3, #4
 800767a:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800767c:	2380      	movs	r3, #128	; 0x80
 800767e:	011b      	lsls	r3, r3, #4
 8007680:	429a      	cmp	r2, r3
 8007682:	d01a      	beq.n	80076ba <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8007684:	4b11      	ldr	r3, [pc, #68]	; (80076cc <FLASH_WaitForLastOperation+0xe0>)
 8007686:	699a      	ldr	r2, [r3, #24]
 8007688:	2380      	movs	r3, #128	; 0x80
 800768a:	019b      	lsls	r3, r3, #6
 800768c:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800768e:	2380      	movs	r3, #128	; 0x80
 8007690:	019b      	lsls	r3, r3, #6
 8007692:	429a      	cmp	r2, r3
 8007694:	d011      	beq.n	80076ba <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8007696:	4b0d      	ldr	r3, [pc, #52]	; (80076cc <FLASH_WaitForLastOperation+0xe0>)
 8007698:	699a      	ldr	r2, [r3, #24]
 800769a:	2380      	movs	r3, #128	; 0x80
 800769c:	029b      	lsls	r3, r3, #10
 800769e:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 80076a0:	2380      	movs	r3, #128	; 0x80
 80076a2:	029b      	lsls	r3, r3, #10
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d008      	beq.n	80076ba <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 80076a8:	4b08      	ldr	r3, [pc, #32]	; (80076cc <FLASH_WaitForLastOperation+0xe0>)
 80076aa:	699a      	ldr	r2, [r3, #24]
 80076ac:	2380      	movs	r3, #128	; 0x80
 80076ae:	025b      	lsls	r3, r3, #9
 80076b0:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 80076b2:	2380      	movs	r3, #128	; 0x80
 80076b4:	025b      	lsls	r3, r3, #9
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d103      	bne.n	80076c2 <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 80076ba:	f000 f809 	bl	80076d0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	e000      	b.n	80076c4 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 80076c2:	2300      	movs	r3, #0
}
 80076c4:	0018      	movs	r0, r3
 80076c6:	46bd      	mov	sp, r7
 80076c8:	b004      	add	sp, #16
 80076ca:	bd80      	pop	{r7, pc}
 80076cc:	40022000 	.word	0x40022000

080076d0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b082      	sub	sp, #8
 80076d4:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 80076d6:	2300      	movs	r3, #0
 80076d8:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80076da:	4b49      	ldr	r3, [pc, #292]	; (8007800 <FLASH_SetErrorCode+0x130>)
 80076dc:	699a      	ldr	r2, [r3, #24]
 80076de:	2380      	movs	r3, #128	; 0x80
 80076e0:	005b      	lsls	r3, r3, #1
 80076e2:	401a      	ands	r2, r3
 80076e4:	2380      	movs	r3, #128	; 0x80
 80076e6:	005b      	lsls	r3, r3, #1
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d10a      	bne.n	8007702 <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80076ec:	4b45      	ldr	r3, [pc, #276]	; (8007804 <FLASH_SetErrorCode+0x134>)
 80076ee:	695b      	ldr	r3, [r3, #20]
 80076f0:	2202      	movs	r2, #2
 80076f2:	431a      	orrs	r2, r3
 80076f4:	4b43      	ldr	r3, [pc, #268]	; (8007804 <FLASH_SetErrorCode+0x134>)
 80076f6:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2280      	movs	r2, #128	; 0x80
 80076fc:	0052      	lsls	r2, r2, #1
 80076fe:	4313      	orrs	r3, r2
 8007700:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8007702:	4b3f      	ldr	r3, [pc, #252]	; (8007800 <FLASH_SetErrorCode+0x130>)
 8007704:	699a      	ldr	r2, [r3, #24]
 8007706:	2380      	movs	r3, #128	; 0x80
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	401a      	ands	r2, r3
 800770c:	2380      	movs	r3, #128	; 0x80
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	429a      	cmp	r2, r3
 8007712:	d10a      	bne.n	800772a <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8007714:	4b3b      	ldr	r3, [pc, #236]	; (8007804 <FLASH_SetErrorCode+0x134>)
 8007716:	695b      	ldr	r3, [r3, #20]
 8007718:	2201      	movs	r2, #1
 800771a:	431a      	orrs	r2, r3
 800771c:	4b39      	ldr	r3, [pc, #228]	; (8007804 <FLASH_SetErrorCode+0x134>)
 800771e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2280      	movs	r2, #128	; 0x80
 8007724:	0092      	lsls	r2, r2, #2
 8007726:	4313      	orrs	r3, r2
 8007728:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 800772a:	4b35      	ldr	r3, [pc, #212]	; (8007800 <FLASH_SetErrorCode+0x130>)
 800772c:	699a      	ldr	r2, [r3, #24]
 800772e:	2380      	movs	r3, #128	; 0x80
 8007730:	00db      	lsls	r3, r3, #3
 8007732:	401a      	ands	r2, r3
 8007734:	2380      	movs	r3, #128	; 0x80
 8007736:	00db      	lsls	r3, r3, #3
 8007738:	429a      	cmp	r2, r3
 800773a:	d10a      	bne.n	8007752 <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800773c:	4b31      	ldr	r3, [pc, #196]	; (8007804 <FLASH_SetErrorCode+0x134>)
 800773e:	695b      	ldr	r3, [r3, #20]
 8007740:	2208      	movs	r2, #8
 8007742:	431a      	orrs	r2, r3
 8007744:	4b2f      	ldr	r3, [pc, #188]	; (8007804 <FLASH_SetErrorCode+0x134>)
 8007746:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2280      	movs	r2, #128	; 0x80
 800774c:	00d2      	lsls	r2, r2, #3
 800774e:	4313      	orrs	r3, r2
 8007750:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8007752:	4b2b      	ldr	r3, [pc, #172]	; (8007800 <FLASH_SetErrorCode+0x130>)
 8007754:	699a      	ldr	r2, [r3, #24]
 8007756:	2380      	movs	r3, #128	; 0x80
 8007758:	011b      	lsls	r3, r3, #4
 800775a:	401a      	ands	r2, r3
 800775c:	2380      	movs	r3, #128	; 0x80
 800775e:	011b      	lsls	r3, r3, #4
 8007760:	429a      	cmp	r2, r3
 8007762:	d10a      	bne.n	800777a <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8007764:	4b27      	ldr	r3, [pc, #156]	; (8007804 <FLASH_SetErrorCode+0x134>)
 8007766:	695b      	ldr	r3, [r3, #20]
 8007768:	2204      	movs	r2, #4
 800776a:	431a      	orrs	r2, r3
 800776c:	4b25      	ldr	r3, [pc, #148]	; (8007804 <FLASH_SetErrorCode+0x134>)
 800776e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2280      	movs	r2, #128	; 0x80
 8007774:	0112      	lsls	r2, r2, #4
 8007776:	4313      	orrs	r3, r2
 8007778:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800777a:	4b21      	ldr	r3, [pc, #132]	; (8007800 <FLASH_SetErrorCode+0x130>)
 800777c:	699a      	ldr	r2, [r3, #24]
 800777e:	2380      	movs	r3, #128	; 0x80
 8007780:	019b      	lsls	r3, r3, #6
 8007782:	401a      	ands	r2, r3
 8007784:	2380      	movs	r3, #128	; 0x80
 8007786:	019b      	lsls	r3, r3, #6
 8007788:	429a      	cmp	r2, r3
 800778a:	d10a      	bne.n	80077a2 <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800778c:	4b1d      	ldr	r3, [pc, #116]	; (8007804 <FLASH_SetErrorCode+0x134>)
 800778e:	695b      	ldr	r3, [r3, #20]
 8007790:	2210      	movs	r2, #16
 8007792:	431a      	orrs	r2, r3
 8007794:	4b1b      	ldr	r3, [pc, #108]	; (8007804 <FLASH_SetErrorCode+0x134>)
 8007796:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2280      	movs	r2, #128	; 0x80
 800779c:	0192      	lsls	r2, r2, #6
 800779e:	4313      	orrs	r3, r2
 80077a0:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 80077a2:	4b17      	ldr	r3, [pc, #92]	; (8007800 <FLASH_SetErrorCode+0x130>)
 80077a4:	699a      	ldr	r2, [r3, #24]
 80077a6:	2380      	movs	r3, #128	; 0x80
 80077a8:	029b      	lsls	r3, r3, #10
 80077aa:	401a      	ands	r2, r3
 80077ac:	2380      	movs	r3, #128	; 0x80
 80077ae:	029b      	lsls	r3, r3, #10
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d109      	bne.n	80077c8 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 80077b4:	4b13      	ldr	r3, [pc, #76]	; (8007804 <FLASH_SetErrorCode+0x134>)
 80077b6:	695b      	ldr	r3, [r3, #20]
 80077b8:	2220      	movs	r2, #32
 80077ba:	431a      	orrs	r2, r3
 80077bc:	4b11      	ldr	r3, [pc, #68]	; (8007804 <FLASH_SetErrorCode+0x134>)
 80077be:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2220      	movs	r2, #32
 80077c4:	4313      	orrs	r3, r2
 80077c6:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 80077c8:	4b0d      	ldr	r3, [pc, #52]	; (8007800 <FLASH_SetErrorCode+0x130>)
 80077ca:	699a      	ldr	r2, [r3, #24]
 80077cc:	2380      	movs	r3, #128	; 0x80
 80077ce:	025b      	lsls	r3, r3, #9
 80077d0:	401a      	ands	r2, r3
 80077d2:	2380      	movs	r3, #128	; 0x80
 80077d4:	025b      	lsls	r3, r3, #9
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d10a      	bne.n	80077f0 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 80077da:	4b0a      	ldr	r3, [pc, #40]	; (8007804 <FLASH_SetErrorCode+0x134>)
 80077dc:	695b      	ldr	r3, [r3, #20]
 80077de:	2240      	movs	r2, #64	; 0x40
 80077e0:	431a      	orrs	r2, r3
 80077e2:	4b08      	ldr	r3, [pc, #32]	; (8007804 <FLASH_SetErrorCode+0x134>)
 80077e4:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2280      	movs	r2, #128	; 0x80
 80077ea:	0252      	lsls	r2, r2, #9
 80077ec:	4313      	orrs	r3, r2
 80077ee:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80077f0:	4b03      	ldr	r3, [pc, #12]	; (8007800 <FLASH_SetErrorCode+0x130>)
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	619a      	str	r2, [r3, #24]
}  
 80077f6:	46c0      	nop			; (mov r8, r8)
 80077f8:	46bd      	mov	sp, r7
 80077fa:	b002      	add	sp, #8
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	46c0      	nop			; (mov r8, r8)
 8007800:	40022000 	.word	0x40022000
 8007804:	20001718 	.word	0x20001718

08007808 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b084      	sub	sp, #16
 800780c:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800780e:	4b12      	ldr	r3, [pc, #72]	; (8007858 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	2201      	movs	r2, #1
 8007814:	4013      	ands	r3, r2
 8007816:	d019      	beq.n	800784c <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007818:	f3ef 8310 	mrs	r3, PRIMASK
 800781c:	607b      	str	r3, [r7, #4]
  return(result);
 800781e:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 8007820:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8007822:	b672      	cpsid	i
}
 8007824:	46c0      	nop			; (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 8007826:	4b0c      	ldr	r3, [pc, #48]	; (8007858 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8007828:	4a0c      	ldr	r2, [pc, #48]	; (800785c <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 800782a:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 800782c:	4b0a      	ldr	r3, [pc, #40]	; (8007858 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800782e:	4a0c      	ldr	r2, [pc, #48]	; (8007860 <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 8007830:	60da      	str	r2, [r3, #12]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	f383 8810 	msr	PRIMASK, r3
}
 800783c:	46c0      	nop			; (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800783e:	4b06      	ldr	r3, [pc, #24]	; (8007858 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	2201      	movs	r2, #1
 8007844:	4013      	ands	r3, r2
 8007846:	d001      	beq.n	800784c <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 8007848:	2301      	movs	r3, #1
 800784a:	e000      	b.n	800784e <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 800784c:	2300      	movs	r3, #0
}
 800784e:	0018      	movs	r0, r3
 8007850:	46bd      	mov	sp, r7
 8007852:	b004      	add	sp, #16
 8007854:	bd80      	pop	{r7, pc}
 8007856:	46c0      	nop			; (mov r8, r8)
 8007858:	40022000 	.word	0x40022000
 800785c:	89abcdef 	.word	0x89abcdef
 8007860:	02030405 	.word	0x02030405

08007864 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8007868:	4b04      	ldr	r3, [pc, #16]	; (800787c <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800786a:	685a      	ldr	r2, [r3, #4]
 800786c:	4b03      	ldr	r3, [pc, #12]	; (800787c <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800786e:	2101      	movs	r1, #1
 8007870:	430a      	orrs	r2, r1
 8007872:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 8007874:	2300      	movs	r3, #0
}
 8007876:	0018      	movs	r0, r3
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}
 800787c:	40022000 	.word	0x40022000

08007880 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 8007880:	b5b0      	push	{r4, r5, r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007888:	250f      	movs	r5, #15
 800788a:	197b      	adds	r3, r7, r5
 800788c:	2200      	movs	r2, #0
 800788e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8007890:	197c      	adds	r4, r7, r5
 8007892:	4b0f      	ldr	r3, [pc, #60]	; (80078d0 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 8007894:	0018      	movs	r0, r3
 8007896:	f7ff fea9 	bl	80075ec <FLASH_WaitForLastOperation>
 800789a:	0003      	movs	r3, r0
 800789c:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800789e:	0029      	movs	r1, r5
 80078a0:	187b      	adds	r3, r7, r1
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d10c      	bne.n	80078c2 <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80078a8:	4b0a      	ldr	r3, [pc, #40]	; (80078d4 <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 80078aa:	2200      	movs	r2, #0
 80078ac:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2200      	movs	r2, #0
 80078b2:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80078b4:	187c      	adds	r4, r7, r1
 80078b6:	4b06      	ldr	r3, [pc, #24]	; (80078d0 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 80078b8:	0018      	movs	r0, r3
 80078ba:	f7ff fe97 	bl	80075ec <FLASH_WaitForLastOperation>
 80078be:	0003      	movs	r3, r0
 80078c0:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 80078c2:	230f      	movs	r3, #15
 80078c4:	18fb      	adds	r3, r7, r3
 80078c6:	781b      	ldrb	r3, [r3, #0]
}  
 80078c8:	0018      	movs	r0, r3
 80078ca:	46bd      	mov	sp, r7
 80078cc:	b004      	add	sp, #16
 80078ce:	bdb0      	pop	{r4, r5, r7, pc}
 80078d0:	0000c350 	.word	0x0000c350
 80078d4:	20001718 	.word	0x20001718

080078d8 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 80078d8:	b5b0      	push	{r4, r5, r7, lr}
 80078da:	b086      	sub	sp, #24
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80078e4:	2317      	movs	r3, #23
 80078e6:	18fb      	adds	r3, r7, r3
 80078e8:	2201      	movs	r2, #1
 80078ea:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80078ec:	4b24      	ldr	r3, [pc, #144]	; (8007980 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 80078ee:	7c1b      	ldrb	r3, [r3, #16]
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d101      	bne.n	80078f8 <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 80078f4:	2302      	movs	r3, #2
 80078f6:	e03e      	b.n	8007976 <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 80078f8:	4b21      	ldr	r3, [pc, #132]	; (8007980 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 80078fa:	2201      	movs	r2, #1
 80078fc:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80078fe:	2517      	movs	r5, #23
 8007900:	197c      	adds	r4, r7, r5
 8007902:	4b20      	ldr	r3, [pc, #128]	; (8007984 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 8007904:	0018      	movs	r0, r3
 8007906:	f7ff fe71 	bl	80075ec <FLASH_WaitForLastOperation>
 800790a:	0003      	movs	r3, r0
 800790c:	7023      	strb	r3, [r4, #0]
//  status = HAL_OK;
  
  if(status == HAL_OK)
 800790e:	197b      	adds	r3, r7, r5
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d129      	bne.n	800796a <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007916:	4b1a      	ldr	r3, [pc, #104]	; (8007980 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8007918:	2200      	movs	r2, #0
 800791a:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2b02      	cmp	r3, #2
 8007920:	d103      	bne.n	800792a <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	687a      	ldr	r2, [r7, #4]
 8007926:	601a      	str	r2, [r3, #0]
 8007928:	e013      	b.n	8007952 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2b01      	cmp	r3, #1
 800792e:	d104      	bne.n	800793a <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	b292      	uxth	r2, r2
 8007936:	801a      	strh	r2, [r3, #0]
 8007938:	e00b      	b.n	8007952 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d104      	bne.n	800794a <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	b2d2      	uxtb	r2, r2
 8007946:	701a      	strb	r2, [r3, #0]
 8007948:	e003      	b.n	8007952 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 800794a:	2317      	movs	r3, #23
 800794c:	18fb      	adds	r3, r7, r3
 800794e:	2201      	movs	r2, #1
 8007950:	701a      	strb	r2, [r3, #0]
    }

    if (status != HAL_OK)
 8007952:	2217      	movs	r2, #23
 8007954:	18bb      	adds	r3, r7, r2
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d006      	beq.n	800796a <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800795c:	18bc      	adds	r4, r7, r2
 800795e:	4b09      	ldr	r3, [pc, #36]	; (8007984 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 8007960:	0018      	movs	r0, r3
 8007962:	f7ff fe43 	bl	80075ec <FLASH_WaitForLastOperation>
 8007966:	0003      	movs	r3, r0
 8007968:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800796a:	4b05      	ldr	r3, [pc, #20]	; (8007980 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800796c:	2200      	movs	r2, #0
 800796e:	741a      	strb	r2, [r3, #16]

  return status;
 8007970:	2317      	movs	r3, #23
 8007972:	18fb      	adds	r3, r7, r3
 8007974:	781b      	ldrb	r3, [r3, #0]
}
 8007976:	0018      	movs	r0, r3
 8007978:	46bd      	mov	sp, r7
 800797a:	b006      	add	sp, #24
 800797c:	bdb0      	pop	{r4, r5, r7, pc}
 800797e:	46c0      	nop			; (mov r8, r8)
 8007980:	20001718 	.word	0x20001718
 8007984:	0000c350 	.word	0x0000c350

08007988 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b086      	sub	sp, #24
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007992:	2300      	movs	r3, #0
 8007994:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007996:	2300      	movs	r3, #0
 8007998:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800799a:	2300      	movs	r3, #0
 800799c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800799e:	e155      	b.n	8007c4c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	2101      	movs	r1, #1
 80079a6:	697a      	ldr	r2, [r7, #20]
 80079a8:	4091      	lsls	r1, r2
 80079aa:	000a      	movs	r2, r1
 80079ac:	4013      	ands	r3, r2
 80079ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d100      	bne.n	80079b8 <HAL_GPIO_Init+0x30>
 80079b6:	e146      	b.n	8007c46 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d00b      	beq.n	80079d8 <HAL_GPIO_Init+0x50>
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	2b02      	cmp	r3, #2
 80079c6:	d007      	beq.n	80079d8 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80079cc:	2b11      	cmp	r3, #17
 80079ce:	d003      	beq.n	80079d8 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	2b12      	cmp	r3, #18
 80079d6:	d130      	bne.n	8007a3a <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	005b      	lsls	r3, r3, #1
 80079e2:	2203      	movs	r2, #3
 80079e4:	409a      	lsls	r2, r3
 80079e6:	0013      	movs	r3, r2
 80079e8:	43da      	mvns	r2, r3
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	4013      	ands	r3, r2
 80079ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	68da      	ldr	r2, [r3, #12]
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	005b      	lsls	r3, r3, #1
 80079f8:	409a      	lsls	r2, r3
 80079fa:	0013      	movs	r3, r2
 80079fc:	693a      	ldr	r2, [r7, #16]
 80079fe:	4313      	orrs	r3, r2
 8007a00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	693a      	ldr	r2, [r7, #16]
 8007a06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007a0e:	2201      	movs	r2, #1
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	409a      	lsls	r2, r3
 8007a14:	0013      	movs	r3, r2
 8007a16:	43da      	mvns	r2, r3
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	4013      	ands	r3, r2
 8007a1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	091b      	lsrs	r3, r3, #4
 8007a24:	2201      	movs	r2, #1
 8007a26:	401a      	ands	r2, r3
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	409a      	lsls	r2, r3
 8007a2c:	0013      	movs	r3, r2
 8007a2e:	693a      	ldr	r2, [r7, #16]
 8007a30:	4313      	orrs	r3, r2
 8007a32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	693a      	ldr	r2, [r7, #16]
 8007a38:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	68db      	ldr	r3, [r3, #12]
 8007a3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	005b      	lsls	r3, r3, #1
 8007a44:	2203      	movs	r2, #3
 8007a46:	409a      	lsls	r2, r3
 8007a48:	0013      	movs	r3, r2
 8007a4a:	43da      	mvns	r2, r3
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	4013      	ands	r3, r2
 8007a50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	689a      	ldr	r2, [r3, #8]
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	005b      	lsls	r3, r3, #1
 8007a5a:	409a      	lsls	r2, r3
 8007a5c:	0013      	movs	r3, r2
 8007a5e:	693a      	ldr	r2, [r7, #16]
 8007a60:	4313      	orrs	r3, r2
 8007a62:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	693a      	ldr	r2, [r7, #16]
 8007a68:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	2b02      	cmp	r3, #2
 8007a70:	d003      	beq.n	8007a7a <HAL_GPIO_Init+0xf2>
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	2b12      	cmp	r3, #18
 8007a78:	d123      	bne.n	8007ac2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	08da      	lsrs	r2, r3, #3
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	3208      	adds	r2, #8
 8007a82:	0092      	lsls	r2, r2, #2
 8007a84:	58d3      	ldr	r3, [r2, r3]
 8007a86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	2207      	movs	r2, #7
 8007a8c:	4013      	ands	r3, r2
 8007a8e:	009b      	lsls	r3, r3, #2
 8007a90:	220f      	movs	r2, #15
 8007a92:	409a      	lsls	r2, r3
 8007a94:	0013      	movs	r3, r2
 8007a96:	43da      	mvns	r2, r3
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	4013      	ands	r3, r2
 8007a9c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	691a      	ldr	r2, [r3, #16]
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	2107      	movs	r1, #7
 8007aa6:	400b      	ands	r3, r1
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	409a      	lsls	r2, r3
 8007aac:	0013      	movs	r3, r2
 8007aae:	693a      	ldr	r2, [r7, #16]
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	08da      	lsrs	r2, r3, #3
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	3208      	adds	r2, #8
 8007abc:	0092      	lsls	r2, r2, #2
 8007abe:	6939      	ldr	r1, [r7, #16]
 8007ac0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	005b      	lsls	r3, r3, #1
 8007acc:	2203      	movs	r2, #3
 8007ace:	409a      	lsls	r2, r3
 8007ad0:	0013      	movs	r3, r2
 8007ad2:	43da      	mvns	r2, r3
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	4013      	ands	r3, r2
 8007ad8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	2203      	movs	r2, #3
 8007ae0:	401a      	ands	r2, r3
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	005b      	lsls	r3, r3, #1
 8007ae6:	409a      	lsls	r2, r3
 8007ae8:	0013      	movs	r3, r2
 8007aea:	693a      	ldr	r2, [r7, #16]
 8007aec:	4313      	orrs	r3, r2
 8007aee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	693a      	ldr	r2, [r7, #16]
 8007af4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	685a      	ldr	r2, [r3, #4]
 8007afa:	2380      	movs	r3, #128	; 0x80
 8007afc:	055b      	lsls	r3, r3, #21
 8007afe:	4013      	ands	r3, r2
 8007b00:	d100      	bne.n	8007b04 <HAL_GPIO_Init+0x17c>
 8007b02:	e0a0      	b.n	8007c46 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b04:	4b57      	ldr	r3, [pc, #348]	; (8007c64 <HAL_GPIO_Init+0x2dc>)
 8007b06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b08:	4b56      	ldr	r3, [pc, #344]	; (8007c64 <HAL_GPIO_Init+0x2dc>)
 8007b0a:	2101      	movs	r1, #1
 8007b0c:	430a      	orrs	r2, r1
 8007b0e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8007b10:	4a55      	ldr	r2, [pc, #340]	; (8007c68 <HAL_GPIO_Init+0x2e0>)
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	089b      	lsrs	r3, r3, #2
 8007b16:	3302      	adds	r3, #2
 8007b18:	009b      	lsls	r3, r3, #2
 8007b1a:	589b      	ldr	r3, [r3, r2]
 8007b1c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	2203      	movs	r2, #3
 8007b22:	4013      	ands	r3, r2
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	220f      	movs	r2, #15
 8007b28:	409a      	lsls	r2, r3
 8007b2a:	0013      	movs	r3, r2
 8007b2c:	43da      	mvns	r2, r3
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	4013      	ands	r3, r2
 8007b32:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8007b34:	687a      	ldr	r2, [r7, #4]
 8007b36:	23a0      	movs	r3, #160	; 0xa0
 8007b38:	05db      	lsls	r3, r3, #23
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d01f      	beq.n	8007b7e <HAL_GPIO_Init+0x1f6>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	4a4a      	ldr	r2, [pc, #296]	; (8007c6c <HAL_GPIO_Init+0x2e4>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d019      	beq.n	8007b7a <HAL_GPIO_Init+0x1f2>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	4a49      	ldr	r2, [pc, #292]	; (8007c70 <HAL_GPIO_Init+0x2e8>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d013      	beq.n	8007b76 <HAL_GPIO_Init+0x1ee>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	4a48      	ldr	r2, [pc, #288]	; (8007c74 <HAL_GPIO_Init+0x2ec>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d00d      	beq.n	8007b72 <HAL_GPIO_Init+0x1ea>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	4a47      	ldr	r2, [pc, #284]	; (8007c78 <HAL_GPIO_Init+0x2f0>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d007      	beq.n	8007b6e <HAL_GPIO_Init+0x1e6>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4a46      	ldr	r2, [pc, #280]	; (8007c7c <HAL_GPIO_Init+0x2f4>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d101      	bne.n	8007b6a <HAL_GPIO_Init+0x1e2>
 8007b66:	2305      	movs	r3, #5
 8007b68:	e00a      	b.n	8007b80 <HAL_GPIO_Init+0x1f8>
 8007b6a:	2306      	movs	r3, #6
 8007b6c:	e008      	b.n	8007b80 <HAL_GPIO_Init+0x1f8>
 8007b6e:	2304      	movs	r3, #4
 8007b70:	e006      	b.n	8007b80 <HAL_GPIO_Init+0x1f8>
 8007b72:	2303      	movs	r3, #3
 8007b74:	e004      	b.n	8007b80 <HAL_GPIO_Init+0x1f8>
 8007b76:	2302      	movs	r3, #2
 8007b78:	e002      	b.n	8007b80 <HAL_GPIO_Init+0x1f8>
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	e000      	b.n	8007b80 <HAL_GPIO_Init+0x1f8>
 8007b7e:	2300      	movs	r3, #0
 8007b80:	697a      	ldr	r2, [r7, #20]
 8007b82:	2103      	movs	r1, #3
 8007b84:	400a      	ands	r2, r1
 8007b86:	0092      	lsls	r2, r2, #2
 8007b88:	4093      	lsls	r3, r2
 8007b8a:	693a      	ldr	r2, [r7, #16]
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007b90:	4935      	ldr	r1, [pc, #212]	; (8007c68 <HAL_GPIO_Init+0x2e0>)
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	089b      	lsrs	r3, r3, #2
 8007b96:	3302      	adds	r3, #2
 8007b98:	009b      	lsls	r3, r3, #2
 8007b9a:	693a      	ldr	r2, [r7, #16]
 8007b9c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007b9e:	4b38      	ldr	r3, [pc, #224]	; (8007c80 <HAL_GPIO_Init+0x2f8>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	43da      	mvns	r2, r3
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	4013      	ands	r3, r2
 8007bac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	685a      	ldr	r2, [r3, #4]
 8007bb2:	2380      	movs	r3, #128	; 0x80
 8007bb4:	025b      	lsls	r3, r3, #9
 8007bb6:	4013      	ands	r3, r2
 8007bb8:	d003      	beq.n	8007bc2 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8007bba:	693a      	ldr	r2, [r7, #16]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8007bc2:	4b2f      	ldr	r3, [pc, #188]	; (8007c80 <HAL_GPIO_Init+0x2f8>)
 8007bc4:	693a      	ldr	r2, [r7, #16]
 8007bc6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8007bc8:	4b2d      	ldr	r3, [pc, #180]	; (8007c80 <HAL_GPIO_Init+0x2f8>)
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	43da      	mvns	r2, r3
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	4013      	ands	r3, r2
 8007bd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	685a      	ldr	r2, [r3, #4]
 8007bdc:	2380      	movs	r3, #128	; 0x80
 8007bde:	029b      	lsls	r3, r3, #10
 8007be0:	4013      	ands	r3, r2
 8007be2:	d003      	beq.n	8007bec <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8007be4:	693a      	ldr	r2, [r7, #16]
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	4313      	orrs	r3, r2
 8007bea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8007bec:	4b24      	ldr	r3, [pc, #144]	; (8007c80 <HAL_GPIO_Init+0x2f8>)
 8007bee:	693a      	ldr	r2, [r7, #16]
 8007bf0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007bf2:	4b23      	ldr	r3, [pc, #140]	; (8007c80 <HAL_GPIO_Init+0x2f8>)
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	43da      	mvns	r2, r3
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	4013      	ands	r3, r2
 8007c00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	685a      	ldr	r2, [r3, #4]
 8007c06:	2380      	movs	r3, #128	; 0x80
 8007c08:	035b      	lsls	r3, r3, #13
 8007c0a:	4013      	ands	r3, r2
 8007c0c:	d003      	beq.n	8007c16 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8007c0e:	693a      	ldr	r2, [r7, #16]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8007c16:	4b1a      	ldr	r3, [pc, #104]	; (8007c80 <HAL_GPIO_Init+0x2f8>)
 8007c18:	693a      	ldr	r2, [r7, #16]
 8007c1a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8007c1c:	4b18      	ldr	r3, [pc, #96]	; (8007c80 <HAL_GPIO_Init+0x2f8>)
 8007c1e:	68db      	ldr	r3, [r3, #12]
 8007c20:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	43da      	mvns	r2, r3
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	4013      	ands	r3, r2
 8007c2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	685a      	ldr	r2, [r3, #4]
 8007c30:	2380      	movs	r3, #128	; 0x80
 8007c32:	039b      	lsls	r3, r3, #14
 8007c34:	4013      	ands	r3, r2
 8007c36:	d003      	beq.n	8007c40 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8007c38:	693a      	ldr	r2, [r7, #16]
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8007c40:	4b0f      	ldr	r3, [pc, #60]	; (8007c80 <HAL_GPIO_Init+0x2f8>)
 8007c42:	693a      	ldr	r2, [r7, #16]
 8007c44:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	3301      	adds	r3, #1
 8007c4a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	681a      	ldr	r2, [r3, #0]
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	40da      	lsrs	r2, r3
 8007c54:	1e13      	subs	r3, r2, #0
 8007c56:	d000      	beq.n	8007c5a <HAL_GPIO_Init+0x2d2>
 8007c58:	e6a2      	b.n	80079a0 <HAL_GPIO_Init+0x18>
  }
}
 8007c5a:	46c0      	nop			; (mov r8, r8)
 8007c5c:	46c0      	nop			; (mov r8, r8)
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	b006      	add	sp, #24
 8007c62:	bd80      	pop	{r7, pc}
 8007c64:	40021000 	.word	0x40021000
 8007c68:	40010000 	.word	0x40010000
 8007c6c:	50000400 	.word	0x50000400
 8007c70:	50000800 	.word	0x50000800
 8007c74:	50000c00 	.word	0x50000c00
 8007c78:	50001000 	.word	0x50001000
 8007c7c:	50001c00 	.word	0x50001c00
 8007c80:	40010400 	.word	0x40010400

08007c84 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b086      	sub	sp, #24
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007c92:	2300      	movs	r3, #0
 8007c94:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 8007c96:	2300      	movs	r3, #0
 8007c98:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 8007c9a:	e0bc      	b.n	8007e16 <HAL_GPIO_DeInit+0x192>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	409a      	lsls	r2, r3
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	4013      	ands	r3, r2
 8007ca6:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d100      	bne.n	8007cb0 <HAL_GPIO_DeInit+0x2c>
 8007cae:	e0af      	b.n	8007e10 <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8007cb0:	4a5e      	ldr	r2, [pc, #376]	; (8007e2c <HAL_GPIO_DeInit+0x1a8>)
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	089b      	lsrs	r3, r3, #2
 8007cb6:	3302      	adds	r3, #2
 8007cb8:	009b      	lsls	r3, r3, #2
 8007cba:	589b      	ldr	r3, [r3, r2]
 8007cbc:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	2203      	movs	r2, #3
 8007cc2:	4013      	ands	r3, r2
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	220f      	movs	r2, #15
 8007cc8:	409a      	lsls	r2, r3
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	4013      	ands	r3, r2
 8007cce:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	23a0      	movs	r3, #160	; 0xa0
 8007cd4:	05db      	lsls	r3, r3, #23
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d01f      	beq.n	8007d1a <HAL_GPIO_DeInit+0x96>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	4a54      	ldr	r2, [pc, #336]	; (8007e30 <HAL_GPIO_DeInit+0x1ac>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d019      	beq.n	8007d16 <HAL_GPIO_DeInit+0x92>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	4a53      	ldr	r2, [pc, #332]	; (8007e34 <HAL_GPIO_DeInit+0x1b0>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d013      	beq.n	8007d12 <HAL_GPIO_DeInit+0x8e>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	4a52      	ldr	r2, [pc, #328]	; (8007e38 <HAL_GPIO_DeInit+0x1b4>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d00d      	beq.n	8007d0e <HAL_GPIO_DeInit+0x8a>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	4a51      	ldr	r2, [pc, #324]	; (8007e3c <HAL_GPIO_DeInit+0x1b8>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d007      	beq.n	8007d0a <HAL_GPIO_DeInit+0x86>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	4a50      	ldr	r2, [pc, #320]	; (8007e40 <HAL_GPIO_DeInit+0x1bc>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d101      	bne.n	8007d06 <HAL_GPIO_DeInit+0x82>
 8007d02:	2305      	movs	r3, #5
 8007d04:	e00a      	b.n	8007d1c <HAL_GPIO_DeInit+0x98>
 8007d06:	2306      	movs	r3, #6
 8007d08:	e008      	b.n	8007d1c <HAL_GPIO_DeInit+0x98>
 8007d0a:	2304      	movs	r3, #4
 8007d0c:	e006      	b.n	8007d1c <HAL_GPIO_DeInit+0x98>
 8007d0e:	2303      	movs	r3, #3
 8007d10:	e004      	b.n	8007d1c <HAL_GPIO_DeInit+0x98>
 8007d12:	2302      	movs	r3, #2
 8007d14:	e002      	b.n	8007d1c <HAL_GPIO_DeInit+0x98>
 8007d16:	2301      	movs	r3, #1
 8007d18:	e000      	b.n	8007d1c <HAL_GPIO_DeInit+0x98>
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	697a      	ldr	r2, [r7, #20]
 8007d1e:	2103      	movs	r1, #3
 8007d20:	400a      	ands	r2, r1
 8007d22:	0092      	lsls	r2, r2, #2
 8007d24:	4093      	lsls	r3, r2
 8007d26:	68fa      	ldr	r2, [r7, #12]
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	d132      	bne.n	8007d92 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007d2c:	4b45      	ldr	r3, [pc, #276]	; (8007e44 <HAL_GPIO_DeInit+0x1c0>)
 8007d2e:	681a      	ldr	r2, [r3, #0]
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	43d9      	mvns	r1, r3
 8007d34:	4b43      	ldr	r3, [pc, #268]	; (8007e44 <HAL_GPIO_DeInit+0x1c0>)
 8007d36:	400a      	ands	r2, r1
 8007d38:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8007d3a:	4b42      	ldr	r3, [pc, #264]	; (8007e44 <HAL_GPIO_DeInit+0x1c0>)
 8007d3c:	685a      	ldr	r2, [r3, #4]
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	43d9      	mvns	r1, r3
 8007d42:	4b40      	ldr	r3, [pc, #256]	; (8007e44 <HAL_GPIO_DeInit+0x1c0>)
 8007d44:	400a      	ands	r2, r1
 8007d46:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007d48:	4b3e      	ldr	r3, [pc, #248]	; (8007e44 <HAL_GPIO_DeInit+0x1c0>)
 8007d4a:	689a      	ldr	r2, [r3, #8]
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	43d9      	mvns	r1, r3
 8007d50:	4b3c      	ldr	r3, [pc, #240]	; (8007e44 <HAL_GPIO_DeInit+0x1c0>)
 8007d52:	400a      	ands	r2, r1
 8007d54:	609a      	str	r2, [r3, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007d56:	4b3b      	ldr	r3, [pc, #236]	; (8007e44 <HAL_GPIO_DeInit+0x1c0>)
 8007d58:	68da      	ldr	r2, [r3, #12]
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	43d9      	mvns	r1, r3
 8007d5e:	4b39      	ldr	r3, [pc, #228]	; (8007e44 <HAL_GPIO_DeInit+0x1c0>)
 8007d60:	400a      	ands	r2, r1
 8007d62:	60da      	str	r2, [r3, #12]
        
        tmp = (0x0FUL) << (4U * (position & 0x03U));
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	2203      	movs	r2, #3
 8007d68:	4013      	ands	r3, r2
 8007d6a:	009b      	lsls	r3, r3, #2
 8007d6c:	220f      	movs	r2, #15
 8007d6e:	409a      	lsls	r2, r3
 8007d70:	0013      	movs	r3, r2
 8007d72:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007d74:	4a2d      	ldr	r2, [pc, #180]	; (8007e2c <HAL_GPIO_DeInit+0x1a8>)
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	089b      	lsrs	r3, r3, #2
 8007d7a:	3302      	adds	r3, #2
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	589a      	ldr	r2, [r3, r2]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	43d9      	mvns	r1, r3
 8007d84:	4829      	ldr	r0, [pc, #164]	; (8007e2c <HAL_GPIO_DeInit+0x1a8>)
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	089b      	lsrs	r3, r3, #2
 8007d8a:	400a      	ands	r2, r1
 8007d8c:	3302      	adds	r3, #2
 8007d8e:	009b      	lsls	r3, r3, #2
 8007d90:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	005b      	lsls	r3, r3, #1
 8007d9a:	2103      	movs	r1, #3
 8007d9c:	4099      	lsls	r1, r3
 8007d9e:	000b      	movs	r3, r1
 8007da0:	431a      	orrs	r2, r3
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	08da      	lsrs	r2, r3, #3
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	3208      	adds	r2, #8
 8007dae:	0092      	lsls	r2, r2, #2
 8007db0:	58d3      	ldr	r3, [r2, r3]
 8007db2:	697a      	ldr	r2, [r7, #20]
 8007db4:	2107      	movs	r1, #7
 8007db6:	400a      	ands	r2, r1
 8007db8:	0092      	lsls	r2, r2, #2
 8007dba:	210f      	movs	r1, #15
 8007dbc:	4091      	lsls	r1, r2
 8007dbe:	000a      	movs	r2, r1
 8007dc0:	43d1      	mvns	r1, r2
 8007dc2:	697a      	ldr	r2, [r7, #20]
 8007dc4:	08d2      	lsrs	r2, r2, #3
 8007dc6:	4019      	ands	r1, r3
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	3208      	adds	r2, #8
 8007dcc:	0092      	lsls	r2, r2, #2
 8007dce:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	68db      	ldr	r3, [r3, #12]
 8007dd4:	697a      	ldr	r2, [r7, #20]
 8007dd6:	0052      	lsls	r2, r2, #1
 8007dd8:	2103      	movs	r1, #3
 8007dda:	4091      	lsls	r1, r2
 8007ddc:	000a      	movs	r2, r1
 8007dde:	43d2      	mvns	r2, r2
 8007de0:	401a      	ands	r2, r3
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	2101      	movs	r1, #1
 8007dec:	697a      	ldr	r2, [r7, #20]
 8007dee:	4091      	lsls	r1, r2
 8007df0:	000a      	movs	r2, r1
 8007df2:	43d2      	mvns	r2, r2
 8007df4:	401a      	ands	r2, r3
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	689b      	ldr	r3, [r3, #8]
 8007dfe:	697a      	ldr	r2, [r7, #20]
 8007e00:	0052      	lsls	r2, r2, #1
 8007e02:	2103      	movs	r1, #3
 8007e04:	4091      	lsls	r1, r2
 8007e06:	000a      	movs	r2, r1
 8007e08:	43d2      	mvns	r2, r2
 8007e0a:	401a      	ands	r2, r3
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	609a      	str	r2, [r3, #8]
    }
    position++;
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	3301      	adds	r3, #1
 8007e14:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 8007e16:	683a      	ldr	r2, [r7, #0]
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	40da      	lsrs	r2, r3
 8007e1c:	1e13      	subs	r3, r2, #0
 8007e1e:	d000      	beq.n	8007e22 <HAL_GPIO_DeInit+0x19e>
 8007e20:	e73c      	b.n	8007c9c <HAL_GPIO_DeInit+0x18>
  }
}
 8007e22:	46c0      	nop			; (mov r8, r8)
 8007e24:	46c0      	nop			; (mov r8, r8)
 8007e26:	46bd      	mov	sp, r7
 8007e28:	b006      	add	sp, #24
 8007e2a:	bd80      	pop	{r7, pc}
 8007e2c:	40010000 	.word	0x40010000
 8007e30:	50000400 	.word	0x50000400
 8007e34:	50000800 	.word	0x50000800
 8007e38:	50000c00 	.word	0x50000c00
 8007e3c:	50001000 	.word	0x50001000
 8007e40:	50001c00 	.word	0x50001c00
 8007e44:	40010400 	.word	0x40010400

08007e48 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	000a      	movs	r2, r1
 8007e52:	1cbb      	adds	r3, r7, #2
 8007e54:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	691b      	ldr	r3, [r3, #16]
 8007e5a:	1cba      	adds	r2, r7, #2
 8007e5c:	8812      	ldrh	r2, [r2, #0]
 8007e5e:	4013      	ands	r3, r2
 8007e60:	d004      	beq.n	8007e6c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8007e62:	230f      	movs	r3, #15
 8007e64:	18fb      	adds	r3, r7, r3
 8007e66:	2201      	movs	r2, #1
 8007e68:	701a      	strb	r2, [r3, #0]
 8007e6a:	e003      	b.n	8007e74 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007e6c:	230f      	movs	r3, #15
 8007e6e:	18fb      	adds	r3, r7, r3
 8007e70:	2200      	movs	r2, #0
 8007e72:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8007e74:	230f      	movs	r3, #15
 8007e76:	18fb      	adds	r3, r7, r3
 8007e78:	781b      	ldrb	r3, [r3, #0]
}
 8007e7a:	0018      	movs	r0, r3
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	b004      	add	sp, #16
 8007e80:	bd80      	pop	{r7, pc}

08007e82 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007e82:	b580      	push	{r7, lr}
 8007e84:	b082      	sub	sp, #8
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]
 8007e8a:	0008      	movs	r0, r1
 8007e8c:	0011      	movs	r1, r2
 8007e8e:	1cbb      	adds	r3, r7, #2
 8007e90:	1c02      	adds	r2, r0, #0
 8007e92:	801a      	strh	r2, [r3, #0]
 8007e94:	1c7b      	adds	r3, r7, #1
 8007e96:	1c0a      	adds	r2, r1, #0
 8007e98:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007e9a:	1c7b      	adds	r3, r7, #1
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d004      	beq.n	8007eac <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007ea2:	1cbb      	adds	r3, r7, #2
 8007ea4:	881a      	ldrh	r2, [r3, #0]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8007eaa:	e003      	b.n	8007eb4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8007eac:	1cbb      	adds	r3, r7, #2
 8007eae:	881a      	ldrh	r2, [r3, #0]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007eb4:	46c0      	nop			; (mov r8, r8)
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	b002      	add	sp, #8
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b084      	sub	sp, #16
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	000a      	movs	r2, r1
 8007ec6:	1cbb      	adds	r3, r7, #2
 8007ec8:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	695b      	ldr	r3, [r3, #20]
 8007ece:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007ed0:	1cbb      	adds	r3, r7, #2
 8007ed2:	881b      	ldrh	r3, [r3, #0]
 8007ed4:	68fa      	ldr	r2, [r7, #12]
 8007ed6:	4013      	ands	r3, r2
 8007ed8:	041a      	lsls	r2, r3, #16
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	43db      	mvns	r3, r3
 8007ede:	1cb9      	adds	r1, r7, #2
 8007ee0:	8809      	ldrh	r1, [r1, #0]
 8007ee2:	400b      	ands	r3, r1
 8007ee4:	431a      	orrs	r2, r3
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	619a      	str	r2, [r3, #24]
}
 8007eea:	46c0      	nop			; (mov r8, r8)
 8007eec:	46bd      	mov	sp, r7
 8007eee:	b004      	add	sp, #16
 8007ef0:	bd80      	pop	{r7, pc}
	...

08007ef4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d101      	bne.n	8007f06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007f02:	2301      	movs	r3, #1
 8007f04:	e082      	b.n	800800c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2241      	movs	r2, #65	; 0x41
 8007f0a:	5c9b      	ldrb	r3, [r3, r2]
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d107      	bne.n	8007f22 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2240      	movs	r2, #64	; 0x40
 8007f16:	2100      	movs	r1, #0
 8007f18:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	0018      	movs	r0, r3
 8007f1e:	f000 f87f 	bl	8008020 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2241      	movs	r2, #65	; 0x41
 8007f26:	2124      	movs	r1, #36	; 0x24
 8007f28:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	681a      	ldr	r2, [r3, #0]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	2101      	movs	r1, #1
 8007f36:	438a      	bics	r2, r1
 8007f38:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	685a      	ldr	r2, [r3, #4]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4934      	ldr	r1, [pc, #208]	; (8008014 <HAL_I2C_Init+0x120>)
 8007f44:	400a      	ands	r2, r1
 8007f46:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	689a      	ldr	r2, [r3, #8]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4931      	ldr	r1, [pc, #196]	; (8008018 <HAL_I2C_Init+0x124>)
 8007f54:	400a      	ands	r2, r1
 8007f56:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	68db      	ldr	r3, [r3, #12]
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d108      	bne.n	8007f72 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	689a      	ldr	r2, [r3, #8]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	2180      	movs	r1, #128	; 0x80
 8007f6a:	0209      	lsls	r1, r1, #8
 8007f6c:	430a      	orrs	r2, r1
 8007f6e:	609a      	str	r2, [r3, #8]
 8007f70:	e007      	b.n	8007f82 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	689a      	ldr	r2, [r3, #8]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	2184      	movs	r1, #132	; 0x84
 8007f7c:	0209      	lsls	r1, r1, #8
 8007f7e:	430a      	orrs	r2, r1
 8007f80:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	2b02      	cmp	r3, #2
 8007f88:	d104      	bne.n	8007f94 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	2280      	movs	r2, #128	; 0x80
 8007f90:	0112      	lsls	r2, r2, #4
 8007f92:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	685a      	ldr	r2, [r3, #4]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	491f      	ldr	r1, [pc, #124]	; (800801c <HAL_I2C_Init+0x128>)
 8007fa0:	430a      	orrs	r2, r1
 8007fa2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	68da      	ldr	r2, [r3, #12]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	491a      	ldr	r1, [pc, #104]	; (8008018 <HAL_I2C_Init+0x124>)
 8007fb0:	400a      	ands	r2, r1
 8007fb2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	691a      	ldr	r2, [r3, #16]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	695b      	ldr	r3, [r3, #20]
 8007fbc:	431a      	orrs	r2, r3
 8007fbe:	0011      	movs	r1, r2
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	699b      	ldr	r3, [r3, #24]
 8007fc4:	021a      	lsls	r2, r3, #8
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	430a      	orrs	r2, r1
 8007fcc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	69d9      	ldr	r1, [r3, #28]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6a1a      	ldr	r2, [r3, #32]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	430a      	orrs	r2, r1
 8007fdc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	2101      	movs	r1, #1
 8007fea:	430a      	orrs	r2, r1
 8007fec:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2241      	movs	r2, #65	; 0x41
 8007ff8:	2120      	movs	r1, #32
 8007ffa:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2242      	movs	r2, #66	; 0x42
 8008006:	2100      	movs	r1, #0
 8008008:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800800a:	2300      	movs	r3, #0
}
 800800c:	0018      	movs	r0, r3
 800800e:	46bd      	mov	sp, r7
 8008010:	b002      	add	sp, #8
 8008012:	bd80      	pop	{r7, pc}
 8008014:	f0ffffff 	.word	0xf0ffffff
 8008018:	ffff7fff 	.word	0xffff7fff
 800801c:	02008000 	.word	0x02008000

08008020 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b082      	sub	sp, #8
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8008028:	46c0      	nop			; (mov r8, r8)
 800802a:	46bd      	mov	sp, r7
 800802c:	b002      	add	sp, #8
 800802e:	bd80      	pop	{r7, pc}

08008030 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008030:	b590      	push	{r4, r7, lr}
 8008032:	b089      	sub	sp, #36	; 0x24
 8008034:	af02      	add	r7, sp, #8
 8008036:	60f8      	str	r0, [r7, #12]
 8008038:	000c      	movs	r4, r1
 800803a:	0010      	movs	r0, r2
 800803c:	0019      	movs	r1, r3
 800803e:	230a      	movs	r3, #10
 8008040:	18fb      	adds	r3, r7, r3
 8008042:	1c22      	adds	r2, r4, #0
 8008044:	801a      	strh	r2, [r3, #0]
 8008046:	2308      	movs	r3, #8
 8008048:	18fb      	adds	r3, r7, r3
 800804a:	1c02      	adds	r2, r0, #0
 800804c:	801a      	strh	r2, [r3, #0]
 800804e:	1dbb      	adds	r3, r7, #6
 8008050:	1c0a      	adds	r2, r1, #0
 8008052:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2241      	movs	r2, #65	; 0x41
 8008058:	5c9b      	ldrb	r3, [r3, r2]
 800805a:	b2db      	uxtb	r3, r3
 800805c:	2b20      	cmp	r3, #32
 800805e:	d000      	beq.n	8008062 <HAL_I2C_Mem_Write+0x32>
 8008060:	e10c      	b.n	800827c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008064:	2b00      	cmp	r3, #0
 8008066:	d004      	beq.n	8008072 <HAL_I2C_Mem_Write+0x42>
 8008068:	232c      	movs	r3, #44	; 0x2c
 800806a:	18fb      	adds	r3, r7, r3
 800806c:	881b      	ldrh	r3, [r3, #0]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d105      	bne.n	800807e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2280      	movs	r2, #128	; 0x80
 8008076:	0092      	lsls	r2, r2, #2
 8008078:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800807a:	2301      	movs	r3, #1
 800807c:	e0ff      	b.n	800827e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2240      	movs	r2, #64	; 0x40
 8008082:	5c9b      	ldrb	r3, [r3, r2]
 8008084:	2b01      	cmp	r3, #1
 8008086:	d101      	bne.n	800808c <HAL_I2C_Mem_Write+0x5c>
 8008088:	2302      	movs	r3, #2
 800808a:	e0f8      	b.n	800827e <HAL_I2C_Mem_Write+0x24e>
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2240      	movs	r2, #64	; 0x40
 8008090:	2101      	movs	r1, #1
 8008092:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008094:	f7fc fe93 	bl	8004dbe <HAL_GetTick>
 8008098:	0003      	movs	r3, r0
 800809a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800809c:	2380      	movs	r3, #128	; 0x80
 800809e:	0219      	lsls	r1, r3, #8
 80080a0:	68f8      	ldr	r0, [r7, #12]
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	9300      	str	r3, [sp, #0]
 80080a6:	2319      	movs	r3, #25
 80080a8:	2201      	movs	r2, #1
 80080aa:	f000 fb17 	bl	80086dc <I2C_WaitOnFlagUntilTimeout>
 80080ae:	1e03      	subs	r3, r0, #0
 80080b0:	d001      	beq.n	80080b6 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80080b2:	2301      	movs	r3, #1
 80080b4:	e0e3      	b.n	800827e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2241      	movs	r2, #65	; 0x41
 80080ba:	2121      	movs	r1, #33	; 0x21
 80080bc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2242      	movs	r2, #66	; 0x42
 80080c2:	2140      	movs	r1, #64	; 0x40
 80080c4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2200      	movs	r2, #0
 80080ca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	222c      	movs	r2, #44	; 0x2c
 80080d6:	18ba      	adds	r2, r7, r2
 80080d8:	8812      	ldrh	r2, [r2, #0]
 80080da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2200      	movs	r2, #0
 80080e0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80080e2:	1dbb      	adds	r3, r7, #6
 80080e4:	881c      	ldrh	r4, [r3, #0]
 80080e6:	2308      	movs	r3, #8
 80080e8:	18fb      	adds	r3, r7, r3
 80080ea:	881a      	ldrh	r2, [r3, #0]
 80080ec:	230a      	movs	r3, #10
 80080ee:	18fb      	adds	r3, r7, r3
 80080f0:	8819      	ldrh	r1, [r3, #0]
 80080f2:	68f8      	ldr	r0, [r7, #12]
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	9301      	str	r3, [sp, #4]
 80080f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080fa:	9300      	str	r3, [sp, #0]
 80080fc:	0023      	movs	r3, r4
 80080fe:	f000 fa05 	bl	800850c <I2C_RequestMemoryWrite>
 8008102:	1e03      	subs	r3, r0, #0
 8008104:	d005      	beq.n	8008112 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2240      	movs	r2, #64	; 0x40
 800810a:	2100      	movs	r1, #0
 800810c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800810e:	2301      	movs	r3, #1
 8008110:	e0b5      	b.n	800827e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008116:	b29b      	uxth	r3, r3
 8008118:	2bff      	cmp	r3, #255	; 0xff
 800811a:	d911      	bls.n	8008140 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	22ff      	movs	r2, #255	; 0xff
 8008120:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008126:	b2da      	uxtb	r2, r3
 8008128:	2380      	movs	r3, #128	; 0x80
 800812a:	045c      	lsls	r4, r3, #17
 800812c:	230a      	movs	r3, #10
 800812e:	18fb      	adds	r3, r7, r3
 8008130:	8819      	ldrh	r1, [r3, #0]
 8008132:	68f8      	ldr	r0, [r7, #12]
 8008134:	2300      	movs	r3, #0
 8008136:	9300      	str	r3, [sp, #0]
 8008138:	0023      	movs	r3, r4
 800813a:	f000 fbef 	bl	800891c <I2C_TransferConfig>
 800813e:	e012      	b.n	8008166 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008144:	b29a      	uxth	r2, r3
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800814e:	b2da      	uxtb	r2, r3
 8008150:	2380      	movs	r3, #128	; 0x80
 8008152:	049c      	lsls	r4, r3, #18
 8008154:	230a      	movs	r3, #10
 8008156:	18fb      	adds	r3, r7, r3
 8008158:	8819      	ldrh	r1, [r3, #0]
 800815a:	68f8      	ldr	r0, [r7, #12]
 800815c:	2300      	movs	r3, #0
 800815e:	9300      	str	r3, [sp, #0]
 8008160:	0023      	movs	r3, r4
 8008162:	f000 fbdb 	bl	800891c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008166:	697a      	ldr	r2, [r7, #20]
 8008168:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	0018      	movs	r0, r3
 800816e:	f000 faf4 	bl	800875a <I2C_WaitOnTXISFlagUntilTimeout>
 8008172:	1e03      	subs	r3, r0, #0
 8008174:	d001      	beq.n	800817a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8008176:	2301      	movs	r3, #1
 8008178:	e081      	b.n	800827e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800817e:	781a      	ldrb	r2, [r3, #0]
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800818a:	1c5a      	adds	r2, r3, #1
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008194:	b29b      	uxth	r3, r3
 8008196:	3b01      	subs	r3, #1
 8008198:	b29a      	uxth	r2, r3
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081a2:	3b01      	subs	r3, #1
 80081a4:	b29a      	uxth	r2, r3
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d03a      	beq.n	800822a <HAL_I2C_Mem_Write+0x1fa>
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d136      	bne.n	800822a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80081bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081be:	68f8      	ldr	r0, [r7, #12]
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	9300      	str	r3, [sp, #0]
 80081c4:	0013      	movs	r3, r2
 80081c6:	2200      	movs	r2, #0
 80081c8:	2180      	movs	r1, #128	; 0x80
 80081ca:	f000 fa87 	bl	80086dc <I2C_WaitOnFlagUntilTimeout>
 80081ce:	1e03      	subs	r3, r0, #0
 80081d0:	d001      	beq.n	80081d6 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80081d2:	2301      	movs	r3, #1
 80081d4:	e053      	b.n	800827e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081da:	b29b      	uxth	r3, r3
 80081dc:	2bff      	cmp	r3, #255	; 0xff
 80081de:	d911      	bls.n	8008204 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	22ff      	movs	r2, #255	; 0xff
 80081e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081ea:	b2da      	uxtb	r2, r3
 80081ec:	2380      	movs	r3, #128	; 0x80
 80081ee:	045c      	lsls	r4, r3, #17
 80081f0:	230a      	movs	r3, #10
 80081f2:	18fb      	adds	r3, r7, r3
 80081f4:	8819      	ldrh	r1, [r3, #0]
 80081f6:	68f8      	ldr	r0, [r7, #12]
 80081f8:	2300      	movs	r3, #0
 80081fa:	9300      	str	r3, [sp, #0]
 80081fc:	0023      	movs	r3, r4
 80081fe:	f000 fb8d 	bl	800891c <I2C_TransferConfig>
 8008202:	e012      	b.n	800822a <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008208:	b29a      	uxth	r2, r3
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008212:	b2da      	uxtb	r2, r3
 8008214:	2380      	movs	r3, #128	; 0x80
 8008216:	049c      	lsls	r4, r3, #18
 8008218:	230a      	movs	r3, #10
 800821a:	18fb      	adds	r3, r7, r3
 800821c:	8819      	ldrh	r1, [r3, #0]
 800821e:	68f8      	ldr	r0, [r7, #12]
 8008220:	2300      	movs	r3, #0
 8008222:	9300      	str	r3, [sp, #0]
 8008224:	0023      	movs	r3, r4
 8008226:	f000 fb79 	bl	800891c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800822e:	b29b      	uxth	r3, r3
 8008230:	2b00      	cmp	r3, #0
 8008232:	d198      	bne.n	8008166 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008234:	697a      	ldr	r2, [r7, #20]
 8008236:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	0018      	movs	r0, r3
 800823c:	f000 facc 	bl	80087d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008240:	1e03      	subs	r3, r0, #0
 8008242:	d001      	beq.n	8008248 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8008244:	2301      	movs	r3, #1
 8008246:	e01a      	b.n	800827e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	2220      	movs	r2, #32
 800824e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	685a      	ldr	r2, [r3, #4]
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	490b      	ldr	r1, [pc, #44]	; (8008288 <HAL_I2C_Mem_Write+0x258>)
 800825c:	400a      	ands	r2, r1
 800825e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2241      	movs	r2, #65	; 0x41
 8008264:	2120      	movs	r1, #32
 8008266:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2242      	movs	r2, #66	; 0x42
 800826c:	2100      	movs	r1, #0
 800826e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2240      	movs	r2, #64	; 0x40
 8008274:	2100      	movs	r1, #0
 8008276:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008278:	2300      	movs	r3, #0
 800827a:	e000      	b.n	800827e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 800827c:	2302      	movs	r3, #2
  }
}
 800827e:	0018      	movs	r0, r3
 8008280:	46bd      	mov	sp, r7
 8008282:	b007      	add	sp, #28
 8008284:	bd90      	pop	{r4, r7, pc}
 8008286:	46c0      	nop			; (mov r8, r8)
 8008288:	fe00e800 	.word	0xfe00e800

0800828c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800828c:	b590      	push	{r4, r7, lr}
 800828e:	b089      	sub	sp, #36	; 0x24
 8008290:	af02      	add	r7, sp, #8
 8008292:	60f8      	str	r0, [r7, #12]
 8008294:	000c      	movs	r4, r1
 8008296:	0010      	movs	r0, r2
 8008298:	0019      	movs	r1, r3
 800829a:	230a      	movs	r3, #10
 800829c:	18fb      	adds	r3, r7, r3
 800829e:	1c22      	adds	r2, r4, #0
 80082a0:	801a      	strh	r2, [r3, #0]
 80082a2:	2308      	movs	r3, #8
 80082a4:	18fb      	adds	r3, r7, r3
 80082a6:	1c02      	adds	r2, r0, #0
 80082a8:	801a      	strh	r2, [r3, #0]
 80082aa:	1dbb      	adds	r3, r7, #6
 80082ac:	1c0a      	adds	r2, r1, #0
 80082ae:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2241      	movs	r2, #65	; 0x41
 80082b4:	5c9b      	ldrb	r3, [r3, r2]
 80082b6:	b2db      	uxtb	r3, r3
 80082b8:	2b20      	cmp	r3, #32
 80082ba:	d000      	beq.n	80082be <HAL_I2C_Mem_Read+0x32>
 80082bc:	e110      	b.n	80084e0 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80082be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d004      	beq.n	80082ce <HAL_I2C_Mem_Read+0x42>
 80082c4:	232c      	movs	r3, #44	; 0x2c
 80082c6:	18fb      	adds	r3, r7, r3
 80082c8:	881b      	ldrh	r3, [r3, #0]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d105      	bne.n	80082da <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	2280      	movs	r2, #128	; 0x80
 80082d2:	0092      	lsls	r2, r2, #2
 80082d4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80082d6:	2301      	movs	r3, #1
 80082d8:	e103      	b.n	80084e2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2240      	movs	r2, #64	; 0x40
 80082de:	5c9b      	ldrb	r3, [r3, r2]
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d101      	bne.n	80082e8 <HAL_I2C_Mem_Read+0x5c>
 80082e4:	2302      	movs	r3, #2
 80082e6:	e0fc      	b.n	80084e2 <HAL_I2C_Mem_Read+0x256>
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2240      	movs	r2, #64	; 0x40
 80082ec:	2101      	movs	r1, #1
 80082ee:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80082f0:	f7fc fd65 	bl	8004dbe <HAL_GetTick>
 80082f4:	0003      	movs	r3, r0
 80082f6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80082f8:	2380      	movs	r3, #128	; 0x80
 80082fa:	0219      	lsls	r1, r3, #8
 80082fc:	68f8      	ldr	r0, [r7, #12]
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	9300      	str	r3, [sp, #0]
 8008302:	2319      	movs	r3, #25
 8008304:	2201      	movs	r2, #1
 8008306:	f000 f9e9 	bl	80086dc <I2C_WaitOnFlagUntilTimeout>
 800830a:	1e03      	subs	r3, r0, #0
 800830c:	d001      	beq.n	8008312 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800830e:	2301      	movs	r3, #1
 8008310:	e0e7      	b.n	80084e2 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2241      	movs	r2, #65	; 0x41
 8008316:	2122      	movs	r1, #34	; 0x22
 8008318:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2242      	movs	r2, #66	; 0x42
 800831e:	2140      	movs	r1, #64	; 0x40
 8008320:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2200      	movs	r2, #0
 8008326:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800832c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	222c      	movs	r2, #44	; 0x2c
 8008332:	18ba      	adds	r2, r7, r2
 8008334:	8812      	ldrh	r2, [r2, #0]
 8008336:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2200      	movs	r2, #0
 800833c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800833e:	1dbb      	adds	r3, r7, #6
 8008340:	881c      	ldrh	r4, [r3, #0]
 8008342:	2308      	movs	r3, #8
 8008344:	18fb      	adds	r3, r7, r3
 8008346:	881a      	ldrh	r2, [r3, #0]
 8008348:	230a      	movs	r3, #10
 800834a:	18fb      	adds	r3, r7, r3
 800834c:	8819      	ldrh	r1, [r3, #0]
 800834e:	68f8      	ldr	r0, [r7, #12]
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	9301      	str	r3, [sp, #4]
 8008354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008356:	9300      	str	r3, [sp, #0]
 8008358:	0023      	movs	r3, r4
 800835a:	f000 f93b 	bl	80085d4 <I2C_RequestMemoryRead>
 800835e:	1e03      	subs	r3, r0, #0
 8008360:	d005      	beq.n	800836e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2240      	movs	r2, #64	; 0x40
 8008366:	2100      	movs	r1, #0
 8008368:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800836a:	2301      	movs	r3, #1
 800836c:	e0b9      	b.n	80084e2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008372:	b29b      	uxth	r3, r3
 8008374:	2bff      	cmp	r3, #255	; 0xff
 8008376:	d911      	bls.n	800839c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	22ff      	movs	r2, #255	; 0xff
 800837c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008382:	b2da      	uxtb	r2, r3
 8008384:	2380      	movs	r3, #128	; 0x80
 8008386:	045c      	lsls	r4, r3, #17
 8008388:	230a      	movs	r3, #10
 800838a:	18fb      	adds	r3, r7, r3
 800838c:	8819      	ldrh	r1, [r3, #0]
 800838e:	68f8      	ldr	r0, [r7, #12]
 8008390:	4b56      	ldr	r3, [pc, #344]	; (80084ec <HAL_I2C_Mem_Read+0x260>)
 8008392:	9300      	str	r3, [sp, #0]
 8008394:	0023      	movs	r3, r4
 8008396:	f000 fac1 	bl	800891c <I2C_TransferConfig>
 800839a:	e012      	b.n	80083c2 <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083a0:	b29a      	uxth	r2, r3
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083aa:	b2da      	uxtb	r2, r3
 80083ac:	2380      	movs	r3, #128	; 0x80
 80083ae:	049c      	lsls	r4, r3, #18
 80083b0:	230a      	movs	r3, #10
 80083b2:	18fb      	adds	r3, r7, r3
 80083b4:	8819      	ldrh	r1, [r3, #0]
 80083b6:	68f8      	ldr	r0, [r7, #12]
 80083b8:	4b4c      	ldr	r3, [pc, #304]	; (80084ec <HAL_I2C_Mem_Read+0x260>)
 80083ba:	9300      	str	r3, [sp, #0]
 80083bc:	0023      	movs	r3, r4
 80083be:	f000 faad 	bl	800891c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80083c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083c4:	68f8      	ldr	r0, [r7, #12]
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	9300      	str	r3, [sp, #0]
 80083ca:	0013      	movs	r3, r2
 80083cc:	2200      	movs	r2, #0
 80083ce:	2104      	movs	r1, #4
 80083d0:	f000 f984 	bl	80086dc <I2C_WaitOnFlagUntilTimeout>
 80083d4:	1e03      	subs	r3, r0, #0
 80083d6:	d001      	beq.n	80083dc <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	e082      	b.n	80084e2 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e6:	b2d2      	uxtb	r2, r2
 80083e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ee:	1c5a      	adds	r2, r3, #1
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083f8:	3b01      	subs	r3, #1
 80083fa:	b29a      	uxth	r2, r3
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008404:	b29b      	uxth	r3, r3
 8008406:	3b01      	subs	r3, #1
 8008408:	b29a      	uxth	r2, r3
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008412:	b29b      	uxth	r3, r3
 8008414:	2b00      	cmp	r3, #0
 8008416:	d03a      	beq.n	800848e <HAL_I2C_Mem_Read+0x202>
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800841c:	2b00      	cmp	r3, #0
 800841e:	d136      	bne.n	800848e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008420:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008422:	68f8      	ldr	r0, [r7, #12]
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	9300      	str	r3, [sp, #0]
 8008428:	0013      	movs	r3, r2
 800842a:	2200      	movs	r2, #0
 800842c:	2180      	movs	r1, #128	; 0x80
 800842e:	f000 f955 	bl	80086dc <I2C_WaitOnFlagUntilTimeout>
 8008432:	1e03      	subs	r3, r0, #0
 8008434:	d001      	beq.n	800843a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8008436:	2301      	movs	r3, #1
 8008438:	e053      	b.n	80084e2 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800843e:	b29b      	uxth	r3, r3
 8008440:	2bff      	cmp	r3, #255	; 0xff
 8008442:	d911      	bls.n	8008468 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	22ff      	movs	r2, #255	; 0xff
 8008448:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800844e:	b2da      	uxtb	r2, r3
 8008450:	2380      	movs	r3, #128	; 0x80
 8008452:	045c      	lsls	r4, r3, #17
 8008454:	230a      	movs	r3, #10
 8008456:	18fb      	adds	r3, r7, r3
 8008458:	8819      	ldrh	r1, [r3, #0]
 800845a:	68f8      	ldr	r0, [r7, #12]
 800845c:	2300      	movs	r3, #0
 800845e:	9300      	str	r3, [sp, #0]
 8008460:	0023      	movs	r3, r4
 8008462:	f000 fa5b 	bl	800891c <I2C_TransferConfig>
 8008466:	e012      	b.n	800848e <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800846c:	b29a      	uxth	r2, r3
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008476:	b2da      	uxtb	r2, r3
 8008478:	2380      	movs	r3, #128	; 0x80
 800847a:	049c      	lsls	r4, r3, #18
 800847c:	230a      	movs	r3, #10
 800847e:	18fb      	adds	r3, r7, r3
 8008480:	8819      	ldrh	r1, [r3, #0]
 8008482:	68f8      	ldr	r0, [r7, #12]
 8008484:	2300      	movs	r3, #0
 8008486:	9300      	str	r3, [sp, #0]
 8008488:	0023      	movs	r3, r4
 800848a:	f000 fa47 	bl	800891c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008492:	b29b      	uxth	r3, r3
 8008494:	2b00      	cmp	r3, #0
 8008496:	d194      	bne.n	80083c2 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008498:	697a      	ldr	r2, [r7, #20]
 800849a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	0018      	movs	r0, r3
 80084a0:	f000 f99a 	bl	80087d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80084a4:	1e03      	subs	r3, r0, #0
 80084a6:	d001      	beq.n	80084ac <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80084a8:	2301      	movs	r3, #1
 80084aa:	e01a      	b.n	80084e2 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	2220      	movs	r2, #32
 80084b2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	685a      	ldr	r2, [r3, #4]
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	490c      	ldr	r1, [pc, #48]	; (80084f0 <HAL_I2C_Mem_Read+0x264>)
 80084c0:	400a      	ands	r2, r1
 80084c2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2241      	movs	r2, #65	; 0x41
 80084c8:	2120      	movs	r1, #32
 80084ca:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2242      	movs	r2, #66	; 0x42
 80084d0:	2100      	movs	r1, #0
 80084d2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2240      	movs	r2, #64	; 0x40
 80084d8:	2100      	movs	r1, #0
 80084da:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80084dc:	2300      	movs	r3, #0
 80084de:	e000      	b.n	80084e2 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80084e0:	2302      	movs	r3, #2
  }
}
 80084e2:	0018      	movs	r0, r3
 80084e4:	46bd      	mov	sp, r7
 80084e6:	b007      	add	sp, #28
 80084e8:	bd90      	pop	{r4, r7, pc}
 80084ea:	46c0      	nop			; (mov r8, r8)
 80084ec:	80002400 	.word	0x80002400
 80084f0:	fe00e800 	.word	0xfe00e800

080084f4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b082      	sub	sp, #8
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2241      	movs	r2, #65	; 0x41
 8008500:	5c9b      	ldrb	r3, [r3, r2]
 8008502:	b2db      	uxtb	r3, r3
}
 8008504:	0018      	movs	r0, r3
 8008506:	46bd      	mov	sp, r7
 8008508:	b002      	add	sp, #8
 800850a:	bd80      	pop	{r7, pc}

0800850c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800850c:	b5b0      	push	{r4, r5, r7, lr}
 800850e:	b086      	sub	sp, #24
 8008510:	af02      	add	r7, sp, #8
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	000c      	movs	r4, r1
 8008516:	0010      	movs	r0, r2
 8008518:	0019      	movs	r1, r3
 800851a:	250a      	movs	r5, #10
 800851c:	197b      	adds	r3, r7, r5
 800851e:	1c22      	adds	r2, r4, #0
 8008520:	801a      	strh	r2, [r3, #0]
 8008522:	2308      	movs	r3, #8
 8008524:	18fb      	adds	r3, r7, r3
 8008526:	1c02      	adds	r2, r0, #0
 8008528:	801a      	strh	r2, [r3, #0]
 800852a:	1dbb      	adds	r3, r7, #6
 800852c:	1c0a      	adds	r2, r1, #0
 800852e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008530:	1dbb      	adds	r3, r7, #6
 8008532:	881b      	ldrh	r3, [r3, #0]
 8008534:	b2da      	uxtb	r2, r3
 8008536:	2380      	movs	r3, #128	; 0x80
 8008538:	045c      	lsls	r4, r3, #17
 800853a:	197b      	adds	r3, r7, r5
 800853c:	8819      	ldrh	r1, [r3, #0]
 800853e:	68f8      	ldr	r0, [r7, #12]
 8008540:	4b23      	ldr	r3, [pc, #140]	; (80085d0 <I2C_RequestMemoryWrite+0xc4>)
 8008542:	9300      	str	r3, [sp, #0]
 8008544:	0023      	movs	r3, r4
 8008546:	f000 f9e9 	bl	800891c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800854a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800854c:	6a39      	ldr	r1, [r7, #32]
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	0018      	movs	r0, r3
 8008552:	f000 f902 	bl	800875a <I2C_WaitOnTXISFlagUntilTimeout>
 8008556:	1e03      	subs	r3, r0, #0
 8008558:	d001      	beq.n	800855e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800855a:	2301      	movs	r3, #1
 800855c:	e033      	b.n	80085c6 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800855e:	1dbb      	adds	r3, r7, #6
 8008560:	881b      	ldrh	r3, [r3, #0]
 8008562:	2b01      	cmp	r3, #1
 8008564:	d107      	bne.n	8008576 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008566:	2308      	movs	r3, #8
 8008568:	18fb      	adds	r3, r7, r3
 800856a:	881b      	ldrh	r3, [r3, #0]
 800856c:	b2da      	uxtb	r2, r3
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	629a      	str	r2, [r3, #40]	; 0x28
 8008574:	e019      	b.n	80085aa <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008576:	2308      	movs	r3, #8
 8008578:	18fb      	adds	r3, r7, r3
 800857a:	881b      	ldrh	r3, [r3, #0]
 800857c:	0a1b      	lsrs	r3, r3, #8
 800857e:	b29b      	uxth	r3, r3
 8008580:	b2da      	uxtb	r2, r3
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800858a:	6a39      	ldr	r1, [r7, #32]
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	0018      	movs	r0, r3
 8008590:	f000 f8e3 	bl	800875a <I2C_WaitOnTXISFlagUntilTimeout>
 8008594:	1e03      	subs	r3, r0, #0
 8008596:	d001      	beq.n	800859c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8008598:	2301      	movs	r3, #1
 800859a:	e014      	b.n	80085c6 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800859c:	2308      	movs	r3, #8
 800859e:	18fb      	adds	r3, r7, r3
 80085a0:	881b      	ldrh	r3, [r3, #0]
 80085a2:	b2da      	uxtb	r2, r3
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80085aa:	6a3a      	ldr	r2, [r7, #32]
 80085ac:	68f8      	ldr	r0, [r7, #12]
 80085ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b0:	9300      	str	r3, [sp, #0]
 80085b2:	0013      	movs	r3, r2
 80085b4:	2200      	movs	r2, #0
 80085b6:	2180      	movs	r1, #128	; 0x80
 80085b8:	f000 f890 	bl	80086dc <I2C_WaitOnFlagUntilTimeout>
 80085bc:	1e03      	subs	r3, r0, #0
 80085be:	d001      	beq.n	80085c4 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80085c0:	2301      	movs	r3, #1
 80085c2:	e000      	b.n	80085c6 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80085c4:	2300      	movs	r3, #0
}
 80085c6:	0018      	movs	r0, r3
 80085c8:	46bd      	mov	sp, r7
 80085ca:	b004      	add	sp, #16
 80085cc:	bdb0      	pop	{r4, r5, r7, pc}
 80085ce:	46c0      	nop			; (mov r8, r8)
 80085d0:	80002000 	.word	0x80002000

080085d4 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80085d4:	b5b0      	push	{r4, r5, r7, lr}
 80085d6:	b086      	sub	sp, #24
 80085d8:	af02      	add	r7, sp, #8
 80085da:	60f8      	str	r0, [r7, #12]
 80085dc:	000c      	movs	r4, r1
 80085de:	0010      	movs	r0, r2
 80085e0:	0019      	movs	r1, r3
 80085e2:	250a      	movs	r5, #10
 80085e4:	197b      	adds	r3, r7, r5
 80085e6:	1c22      	adds	r2, r4, #0
 80085e8:	801a      	strh	r2, [r3, #0]
 80085ea:	2308      	movs	r3, #8
 80085ec:	18fb      	adds	r3, r7, r3
 80085ee:	1c02      	adds	r2, r0, #0
 80085f0:	801a      	strh	r2, [r3, #0]
 80085f2:	1dbb      	adds	r3, r7, #6
 80085f4:	1c0a      	adds	r2, r1, #0
 80085f6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80085f8:	1dbb      	adds	r3, r7, #6
 80085fa:	881b      	ldrh	r3, [r3, #0]
 80085fc:	b2da      	uxtb	r2, r3
 80085fe:	197b      	adds	r3, r7, r5
 8008600:	8819      	ldrh	r1, [r3, #0]
 8008602:	68f8      	ldr	r0, [r7, #12]
 8008604:	4b23      	ldr	r3, [pc, #140]	; (8008694 <I2C_RequestMemoryRead+0xc0>)
 8008606:	9300      	str	r3, [sp, #0]
 8008608:	2300      	movs	r3, #0
 800860a:	f000 f987 	bl	800891c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800860e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008610:	6a39      	ldr	r1, [r7, #32]
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	0018      	movs	r0, r3
 8008616:	f000 f8a0 	bl	800875a <I2C_WaitOnTXISFlagUntilTimeout>
 800861a:	1e03      	subs	r3, r0, #0
 800861c:	d001      	beq.n	8008622 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800861e:	2301      	movs	r3, #1
 8008620:	e033      	b.n	800868a <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008622:	1dbb      	adds	r3, r7, #6
 8008624:	881b      	ldrh	r3, [r3, #0]
 8008626:	2b01      	cmp	r3, #1
 8008628:	d107      	bne.n	800863a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800862a:	2308      	movs	r3, #8
 800862c:	18fb      	adds	r3, r7, r3
 800862e:	881b      	ldrh	r3, [r3, #0]
 8008630:	b2da      	uxtb	r2, r3
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	629a      	str	r2, [r3, #40]	; 0x28
 8008638:	e019      	b.n	800866e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800863a:	2308      	movs	r3, #8
 800863c:	18fb      	adds	r3, r7, r3
 800863e:	881b      	ldrh	r3, [r3, #0]
 8008640:	0a1b      	lsrs	r3, r3, #8
 8008642:	b29b      	uxth	r3, r3
 8008644:	b2da      	uxtb	r2, r3
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800864c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800864e:	6a39      	ldr	r1, [r7, #32]
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	0018      	movs	r0, r3
 8008654:	f000 f881 	bl	800875a <I2C_WaitOnTXISFlagUntilTimeout>
 8008658:	1e03      	subs	r3, r0, #0
 800865a:	d001      	beq.n	8008660 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 800865c:	2301      	movs	r3, #1
 800865e:	e014      	b.n	800868a <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008660:	2308      	movs	r3, #8
 8008662:	18fb      	adds	r3, r7, r3
 8008664:	881b      	ldrh	r3, [r3, #0]
 8008666:	b2da      	uxtb	r2, r3
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800866e:	6a3a      	ldr	r2, [r7, #32]
 8008670:	68f8      	ldr	r0, [r7, #12]
 8008672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008674:	9300      	str	r3, [sp, #0]
 8008676:	0013      	movs	r3, r2
 8008678:	2200      	movs	r2, #0
 800867a:	2140      	movs	r1, #64	; 0x40
 800867c:	f000 f82e 	bl	80086dc <I2C_WaitOnFlagUntilTimeout>
 8008680:	1e03      	subs	r3, r0, #0
 8008682:	d001      	beq.n	8008688 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8008684:	2301      	movs	r3, #1
 8008686:	e000      	b.n	800868a <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8008688:	2300      	movs	r3, #0
}
 800868a:	0018      	movs	r0, r3
 800868c:	46bd      	mov	sp, r7
 800868e:	b004      	add	sp, #16
 8008690:	bdb0      	pop	{r4, r5, r7, pc}
 8008692:	46c0      	nop			; (mov r8, r8)
 8008694:	80002000 	.word	0x80002000

08008698 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b082      	sub	sp, #8
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	699b      	ldr	r3, [r3, #24]
 80086a6:	2202      	movs	r2, #2
 80086a8:	4013      	ands	r3, r2
 80086aa:	2b02      	cmp	r3, #2
 80086ac:	d103      	bne.n	80086b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	2200      	movs	r2, #0
 80086b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	699b      	ldr	r3, [r3, #24]
 80086bc:	2201      	movs	r2, #1
 80086be:	4013      	ands	r3, r2
 80086c0:	2b01      	cmp	r3, #1
 80086c2:	d007      	beq.n	80086d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	699a      	ldr	r2, [r3, #24]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	2101      	movs	r1, #1
 80086d0:	430a      	orrs	r2, r1
 80086d2:	619a      	str	r2, [r3, #24]
  }
}
 80086d4:	46c0      	nop			; (mov r8, r8)
 80086d6:	46bd      	mov	sp, r7
 80086d8:	b002      	add	sp, #8
 80086da:	bd80      	pop	{r7, pc}

080086dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b084      	sub	sp, #16
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	60f8      	str	r0, [r7, #12]
 80086e4:	60b9      	str	r1, [r7, #8]
 80086e6:	603b      	str	r3, [r7, #0]
 80086e8:	1dfb      	adds	r3, r7, #7
 80086ea:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80086ec:	e021      	b.n	8008732 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	3301      	adds	r3, #1
 80086f2:	d01e      	beq.n	8008732 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086f4:	f7fc fb63 	bl	8004dbe <HAL_GetTick>
 80086f8:	0002      	movs	r2, r0
 80086fa:	69bb      	ldr	r3, [r7, #24]
 80086fc:	1ad3      	subs	r3, r2, r3
 80086fe:	683a      	ldr	r2, [r7, #0]
 8008700:	429a      	cmp	r2, r3
 8008702:	d302      	bcc.n	800870a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d113      	bne.n	8008732 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800870e:	2220      	movs	r2, #32
 8008710:	431a      	orrs	r2, r3
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2241      	movs	r2, #65	; 0x41
 800871a:	2120      	movs	r1, #32
 800871c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2242      	movs	r2, #66	; 0x42
 8008722:	2100      	movs	r1, #0
 8008724:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2240      	movs	r2, #64	; 0x40
 800872a:	2100      	movs	r1, #0
 800872c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800872e:	2301      	movs	r3, #1
 8008730:	e00f      	b.n	8008752 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	699b      	ldr	r3, [r3, #24]
 8008738:	68ba      	ldr	r2, [r7, #8]
 800873a:	4013      	ands	r3, r2
 800873c:	68ba      	ldr	r2, [r7, #8]
 800873e:	1ad3      	subs	r3, r2, r3
 8008740:	425a      	negs	r2, r3
 8008742:	4153      	adcs	r3, r2
 8008744:	b2db      	uxtb	r3, r3
 8008746:	001a      	movs	r2, r3
 8008748:	1dfb      	adds	r3, r7, #7
 800874a:	781b      	ldrb	r3, [r3, #0]
 800874c:	429a      	cmp	r2, r3
 800874e:	d0ce      	beq.n	80086ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008750:	2300      	movs	r3, #0
}
 8008752:	0018      	movs	r0, r3
 8008754:	46bd      	mov	sp, r7
 8008756:	b004      	add	sp, #16
 8008758:	bd80      	pop	{r7, pc}

0800875a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800875a:	b580      	push	{r7, lr}
 800875c:	b084      	sub	sp, #16
 800875e:	af00      	add	r7, sp, #0
 8008760:	60f8      	str	r0, [r7, #12]
 8008762:	60b9      	str	r1, [r7, #8]
 8008764:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008766:	e02b      	b.n	80087c0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8008768:	687a      	ldr	r2, [r7, #4]
 800876a:	68b9      	ldr	r1, [r7, #8]
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	0018      	movs	r0, r3
 8008770:	f000 f86e 	bl	8008850 <I2C_IsAcknowledgeFailed>
 8008774:	1e03      	subs	r3, r0, #0
 8008776:	d001      	beq.n	800877c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008778:	2301      	movs	r3, #1
 800877a:	e029      	b.n	80087d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	3301      	adds	r3, #1
 8008780:	d01e      	beq.n	80087c0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008782:	f7fc fb1c 	bl	8004dbe <HAL_GetTick>
 8008786:	0002      	movs	r2, r0
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	1ad3      	subs	r3, r2, r3
 800878c:	68ba      	ldr	r2, [r7, #8]
 800878e:	429a      	cmp	r2, r3
 8008790:	d302      	bcc.n	8008798 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d113      	bne.n	80087c0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800879c:	2220      	movs	r2, #32
 800879e:	431a      	orrs	r2, r3
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2241      	movs	r2, #65	; 0x41
 80087a8:	2120      	movs	r1, #32
 80087aa:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2242      	movs	r2, #66	; 0x42
 80087b0:	2100      	movs	r1, #0
 80087b2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2240      	movs	r2, #64	; 0x40
 80087b8:	2100      	movs	r1, #0
 80087ba:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80087bc:	2301      	movs	r3, #1
 80087be:	e007      	b.n	80087d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	699b      	ldr	r3, [r3, #24]
 80087c6:	2202      	movs	r2, #2
 80087c8:	4013      	ands	r3, r2
 80087ca:	2b02      	cmp	r3, #2
 80087cc:	d1cc      	bne.n	8008768 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80087ce:	2300      	movs	r3, #0
}
 80087d0:	0018      	movs	r0, r3
 80087d2:	46bd      	mov	sp, r7
 80087d4:	b004      	add	sp, #16
 80087d6:	bd80      	pop	{r7, pc}

080087d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b084      	sub	sp, #16
 80087dc:	af00      	add	r7, sp, #0
 80087de:	60f8      	str	r0, [r7, #12]
 80087e0:	60b9      	str	r1, [r7, #8]
 80087e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80087e4:	e028      	b.n	8008838 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	68b9      	ldr	r1, [r7, #8]
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	0018      	movs	r0, r3
 80087ee:	f000 f82f 	bl	8008850 <I2C_IsAcknowledgeFailed>
 80087f2:	1e03      	subs	r3, r0, #0
 80087f4:	d001      	beq.n	80087fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80087f6:	2301      	movs	r3, #1
 80087f8:	e026      	b.n	8008848 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087fa:	f7fc fae0 	bl	8004dbe <HAL_GetTick>
 80087fe:	0002      	movs	r2, r0
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	1ad3      	subs	r3, r2, r3
 8008804:	68ba      	ldr	r2, [r7, #8]
 8008806:	429a      	cmp	r2, r3
 8008808:	d302      	bcc.n	8008810 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d113      	bne.n	8008838 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008814:	2220      	movs	r2, #32
 8008816:	431a      	orrs	r2, r3
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2241      	movs	r2, #65	; 0x41
 8008820:	2120      	movs	r1, #32
 8008822:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2242      	movs	r2, #66	; 0x42
 8008828:	2100      	movs	r1, #0
 800882a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2240      	movs	r2, #64	; 0x40
 8008830:	2100      	movs	r1, #0
 8008832:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8008834:	2301      	movs	r3, #1
 8008836:	e007      	b.n	8008848 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	699b      	ldr	r3, [r3, #24]
 800883e:	2220      	movs	r2, #32
 8008840:	4013      	ands	r3, r2
 8008842:	2b20      	cmp	r3, #32
 8008844:	d1cf      	bne.n	80087e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008846:	2300      	movs	r3, #0
}
 8008848:	0018      	movs	r0, r3
 800884a:	46bd      	mov	sp, r7
 800884c:	b004      	add	sp, #16
 800884e:	bd80      	pop	{r7, pc}

08008850 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	699b      	ldr	r3, [r3, #24]
 8008862:	2210      	movs	r2, #16
 8008864:	4013      	ands	r3, r2
 8008866:	2b10      	cmp	r3, #16
 8008868:	d151      	bne.n	800890e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800886a:	e021      	b.n	80088b0 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	3301      	adds	r3, #1
 8008870:	d01e      	beq.n	80088b0 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008872:	f7fc faa4 	bl	8004dbe <HAL_GetTick>
 8008876:	0002      	movs	r2, r0
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	1ad3      	subs	r3, r2, r3
 800887c:	68ba      	ldr	r2, [r7, #8]
 800887e:	429a      	cmp	r2, r3
 8008880:	d302      	bcc.n	8008888 <I2C_IsAcknowledgeFailed+0x38>
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d113      	bne.n	80088b0 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800888c:	2220      	movs	r2, #32
 800888e:	431a      	orrs	r2, r3
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2241      	movs	r2, #65	; 0x41
 8008898:	2120      	movs	r1, #32
 800889a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2242      	movs	r2, #66	; 0x42
 80088a0:	2100      	movs	r1, #0
 80088a2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2240      	movs	r2, #64	; 0x40
 80088a8:	2100      	movs	r1, #0
 80088aa:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80088ac:	2301      	movs	r3, #1
 80088ae:	e02f      	b.n	8008910 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	699b      	ldr	r3, [r3, #24]
 80088b6:	2220      	movs	r2, #32
 80088b8:	4013      	ands	r3, r2
 80088ba:	2b20      	cmp	r3, #32
 80088bc:	d1d6      	bne.n	800886c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	2210      	movs	r2, #16
 80088c4:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	2220      	movs	r2, #32
 80088cc:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	0018      	movs	r0, r3
 80088d2:	f7ff fee1 	bl	8008698 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	685a      	ldr	r2, [r3, #4]
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	490d      	ldr	r1, [pc, #52]	; (8008918 <I2C_IsAcknowledgeFailed+0xc8>)
 80088e2:	400a      	ands	r2, r1
 80088e4:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088ea:	2204      	movs	r2, #4
 80088ec:	431a      	orrs	r2, r3
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2241      	movs	r2, #65	; 0x41
 80088f6:	2120      	movs	r1, #32
 80088f8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2242      	movs	r2, #66	; 0x42
 80088fe:	2100      	movs	r1, #0
 8008900:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2240      	movs	r2, #64	; 0x40
 8008906:	2100      	movs	r1, #0
 8008908:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800890a:	2301      	movs	r3, #1
 800890c:	e000      	b.n	8008910 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800890e:	2300      	movs	r3, #0
}
 8008910:	0018      	movs	r0, r3
 8008912:	46bd      	mov	sp, r7
 8008914:	b004      	add	sp, #16
 8008916:	bd80      	pop	{r7, pc}
 8008918:	fe00e800 	.word	0xfe00e800

0800891c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800891c:	b590      	push	{r4, r7, lr}
 800891e:	b085      	sub	sp, #20
 8008920:	af00      	add	r7, sp, #0
 8008922:	60f8      	str	r0, [r7, #12]
 8008924:	0008      	movs	r0, r1
 8008926:	0011      	movs	r1, r2
 8008928:	607b      	str	r3, [r7, #4]
 800892a:	240a      	movs	r4, #10
 800892c:	193b      	adds	r3, r7, r4
 800892e:	1c02      	adds	r2, r0, #0
 8008930:	801a      	strh	r2, [r3, #0]
 8008932:	2009      	movs	r0, #9
 8008934:	183b      	adds	r3, r7, r0
 8008936:	1c0a      	adds	r2, r1, #0
 8008938:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	6a3a      	ldr	r2, [r7, #32]
 8008942:	0d51      	lsrs	r1, r2, #21
 8008944:	2280      	movs	r2, #128	; 0x80
 8008946:	00d2      	lsls	r2, r2, #3
 8008948:	400a      	ands	r2, r1
 800894a:	490e      	ldr	r1, [pc, #56]	; (8008984 <I2C_TransferConfig+0x68>)
 800894c:	430a      	orrs	r2, r1
 800894e:	43d2      	mvns	r2, r2
 8008950:	401a      	ands	r2, r3
 8008952:	0011      	movs	r1, r2
 8008954:	193b      	adds	r3, r7, r4
 8008956:	881b      	ldrh	r3, [r3, #0]
 8008958:	059b      	lsls	r3, r3, #22
 800895a:	0d9a      	lsrs	r2, r3, #22
 800895c:	183b      	adds	r3, r7, r0
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	0418      	lsls	r0, r3, #16
 8008962:	23ff      	movs	r3, #255	; 0xff
 8008964:	041b      	lsls	r3, r3, #16
 8008966:	4003      	ands	r3, r0
 8008968:	431a      	orrs	r2, r3
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	431a      	orrs	r2, r3
 800896e:	6a3b      	ldr	r3, [r7, #32]
 8008970:	431a      	orrs	r2, r3
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	430a      	orrs	r2, r1
 8008978:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800897a:	46c0      	nop			; (mov r8, r8)
 800897c:	46bd      	mov	sp, r7
 800897e:	b005      	add	sp, #20
 8008980:	bd90      	pop	{r4, r7, pc}
 8008982:	46c0      	nop			; (mov r8, r8)
 8008984:	03ff63ff 	.word	0x03ff63ff

08008988 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b082      	sub	sp, #8
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2241      	movs	r2, #65	; 0x41
 8008996:	5c9b      	ldrb	r3, [r3, r2]
 8008998:	b2db      	uxtb	r3, r3
 800899a:	2b20      	cmp	r3, #32
 800899c:	d138      	bne.n	8008a10 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2240      	movs	r2, #64	; 0x40
 80089a2:	5c9b      	ldrb	r3, [r3, r2]
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	d101      	bne.n	80089ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80089a8:	2302      	movs	r3, #2
 80089aa:	e032      	b.n	8008a12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2240      	movs	r2, #64	; 0x40
 80089b0:	2101      	movs	r1, #1
 80089b2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2241      	movs	r2, #65	; 0x41
 80089b8:	2124      	movs	r1, #36	; 0x24
 80089ba:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	681a      	ldr	r2, [r3, #0]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	2101      	movs	r1, #1
 80089c8:	438a      	bics	r2, r1
 80089ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	681a      	ldr	r2, [r3, #0]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4911      	ldr	r1, [pc, #68]	; (8008a1c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80089d8:	400a      	ands	r2, r1
 80089da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	6819      	ldr	r1, [r3, #0]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	683a      	ldr	r2, [r7, #0]
 80089e8:	430a      	orrs	r2, r1
 80089ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	681a      	ldr	r2, [r3, #0]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	2101      	movs	r1, #1
 80089f8:	430a      	orrs	r2, r1
 80089fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2241      	movs	r2, #65	; 0x41
 8008a00:	2120      	movs	r1, #32
 8008a02:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2240      	movs	r2, #64	; 0x40
 8008a08:	2100      	movs	r1, #0
 8008a0a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	e000      	b.n	8008a12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008a10:	2302      	movs	r3, #2
  }
}
 8008a12:	0018      	movs	r0, r3
 8008a14:	46bd      	mov	sp, r7
 8008a16:	b002      	add	sp, #8
 8008a18:	bd80      	pop	{r7, pc}
 8008a1a:	46c0      	nop			; (mov r8, r8)
 8008a1c:	ffffefff 	.word	0xffffefff

08008a20 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b084      	sub	sp, #16
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
 8008a28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2241      	movs	r2, #65	; 0x41
 8008a2e:	5c9b      	ldrb	r3, [r3, r2]
 8008a30:	b2db      	uxtb	r3, r3
 8008a32:	2b20      	cmp	r3, #32
 8008a34:	d139      	bne.n	8008aaa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2240      	movs	r2, #64	; 0x40
 8008a3a:	5c9b      	ldrb	r3, [r3, r2]
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d101      	bne.n	8008a44 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008a40:	2302      	movs	r3, #2
 8008a42:	e033      	b.n	8008aac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2240      	movs	r2, #64	; 0x40
 8008a48:	2101      	movs	r1, #1
 8008a4a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2241      	movs	r2, #65	; 0x41
 8008a50:	2124      	movs	r1, #36	; 0x24
 8008a52:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	681a      	ldr	r2, [r3, #0]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	2101      	movs	r1, #1
 8008a60:	438a      	bics	r2, r1
 8008a62:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	4a11      	ldr	r2, [pc, #68]	; (8008ab4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8008a70:	4013      	ands	r3, r2
 8008a72:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	021b      	lsls	r3, r3, #8
 8008a78:	68fa      	ldr	r2, [r7, #12]
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	68fa      	ldr	r2, [r7, #12]
 8008a84:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	681a      	ldr	r2, [r3, #0]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	2101      	movs	r1, #1
 8008a92:	430a      	orrs	r2, r1
 8008a94:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2241      	movs	r2, #65	; 0x41
 8008a9a:	2120      	movs	r1, #32
 8008a9c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2240      	movs	r2, #64	; 0x40
 8008aa2:	2100      	movs	r1, #0
 8008aa4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	e000      	b.n	8008aac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008aaa:	2302      	movs	r3, #2
  }
}
 8008aac:	0018      	movs	r0, r3
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	b004      	add	sp, #16
 8008ab2:	bd80      	pop	{r7, pc}
 8008ab4:	fffff0ff 	.word	0xfffff0ff

08008ab8 <HAL_PWR_DisablePVD>:
/**
  * @brief Disables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	af00      	add	r7, sp, #0
  /* Disable the power voltage detector */
  CLEAR_BIT(PWR->CR, PWR_CR_PVDE);
 8008abc:	4b04      	ldr	r3, [pc, #16]	; (8008ad0 <HAL_PWR_DisablePVD+0x18>)
 8008abe:	681a      	ldr	r2, [r3, #0]
 8008ac0:	4b03      	ldr	r3, [pc, #12]	; (8008ad0 <HAL_PWR_DisablePVD+0x18>)
 8008ac2:	2110      	movs	r1, #16
 8008ac4:	438a      	bics	r2, r1
 8008ac6:	601a      	str	r2, [r3, #0]
}
 8008ac8:	46c0      	nop			; (mov r8, r8)
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
 8008ace:	46c0      	nop			; (mov r8, r8)
 8008ad0:	40007000 	.word	0x40007000

08008ad4 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b086      	sub	sp, #24
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	000a      	movs	r2, r1
 8008ade:	1cfb      	adds	r3, r7, #3
 8008ae0:	701a      	strb	r2, [r3, #0]
   uint32_t tmpreg = 0U;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8008ae6:	4b23      	ldr	r3, [pc, #140]	; (8008b74 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8008ae8:	681a      	ldr	r2, [r3, #0]
 8008aea:	2380      	movs	r3, #128	; 0x80
 8008aec:	009b      	lsls	r3, r3, #2
 8008aee:	4013      	ands	r3, r2
 8008af0:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8008af2:	4b21      	ldr	r3, [pc, #132]	; (8008b78 <HAL_PWR_EnterSLEEPMode+0xa4>)
 8008af4:	6a1b      	ldr	r3, [r3, #32]
 8008af6:	2201      	movs	r2, #1
 8008af8:	4013      	ands	r3, r2
 8008afa:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d008      	beq.n	8008b14 <HAL_PWR_EnterSLEEPMode+0x40>
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d005      	beq.n	8008b14 <HAL_PWR_EnterSLEEPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8008b08:	4b1a      	ldr	r3, [pc, #104]	; (8008b74 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8008b0a:	681a      	ldr	r2, [r3, #0]
 8008b0c:	4b19      	ldr	r3, [pc, #100]	; (8008b74 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8008b0e:	491b      	ldr	r1, [pc, #108]	; (8008b7c <HAL_PWR_EnterSLEEPMode+0xa8>)
 8008b10:	400a      	ands	r2, r1
 8008b12:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Sleep mode ---------------------------------*/
  tmpreg = PWR->CR;
 8008b14:	4b17      	ldr	r3, [pc, #92]	; (8008b74 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	617b      	str	r3, [r7, #20]

  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	2203      	movs	r2, #3
 8008b1e:	4393      	bics	r3, r2
 8008b20:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8008b22:	697a      	ldr	r2, [r7, #20]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	4313      	orrs	r3, r2
 8008b28:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8008b2a:	4b12      	ldr	r3, [pc, #72]	; (8008b74 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8008b2c:	697a      	ldr	r2, [r7, #20]
 8008b2e:	601a      	str	r2, [r3, #0]
  
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008b30:	4b13      	ldr	r3, [pc, #76]	; (8008b80 <HAL_PWR_EnterSLEEPMode+0xac>)
 8008b32:	691a      	ldr	r2, [r3, #16]
 8008b34:	4b12      	ldr	r3, [pc, #72]	; (8008b80 <HAL_PWR_EnterSLEEPMode+0xac>)
 8008b36:	2104      	movs	r1, #4
 8008b38:	438a      	bics	r2, r1
 8008b3a:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8008b3c:	1cfb      	adds	r3, r7, #3
 8008b3e:	781b      	ldrb	r3, [r3, #0]
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d101      	bne.n	8008b48 <HAL_PWR_EnterSLEEPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8008b44:	bf30      	wfi
 8008b46:	e002      	b.n	8008b4e <HAL_PWR_EnterSLEEPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8008b48:	bf40      	sev
    __WFE();
 8008b4a:	bf20      	wfe
    __WFE();
 8008b4c:	bf20      	wfe
  }

  if((ulpbit != 0) && (vrefinbit != 0))
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d009      	beq.n	8008b68 <HAL_PWR_EnterSLEEPMode+0x94>
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d006      	beq.n	8008b68 <HAL_PWR_EnterSLEEPMode+0x94>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8008b5a:	4b06      	ldr	r3, [pc, #24]	; (8008b74 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8008b5c:	681a      	ldr	r2, [r3, #0]
 8008b5e:	4b05      	ldr	r3, [pc, #20]	; (8008b74 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8008b60:	2180      	movs	r1, #128	; 0x80
 8008b62:	0089      	lsls	r1, r1, #2
 8008b64:	430a      	orrs	r2, r1
 8008b66:	601a      	str	r2, [r3, #0]
  }

  /* Additional NOP to ensure all pending instructions are flushed before entering low power mode */
  __NOP();
 8008b68:	46c0      	nop			; (mov r8, r8)

}
 8008b6a:	46c0      	nop			; (mov r8, r8)
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	b006      	add	sp, #24
 8008b70:	bd80      	pop	{r7, pc}
 8008b72:	46c0      	nop			; (mov r8, r8)
 8008b74:	40007000 	.word	0x40007000
 8008b78:	40010000 	.word	0x40010000
 8008b7c:	fffffdff 	.word	0xfffffdff
 8008b80:	e000ed00 	.word	0xe000ed00

08008b84 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b086      	sub	sp, #24
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	000a      	movs	r2, r1
 8008b8e:	1cfb      	adds	r3, r7, #3
 8008b90:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8008b92:	2300      	movs	r3, #0
 8008b94:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8008b96:	4b25      	ldr	r3, [pc, #148]	; (8008c2c <HAL_PWR_EnterSTOPMode+0xa8>)
 8008b98:	681a      	ldr	r2, [r3, #0]
 8008b9a:	2380      	movs	r3, #128	; 0x80
 8008b9c:	009b      	lsls	r3, r3, #2
 8008b9e:	4013      	ands	r3, r2
 8008ba0:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8008ba2:	4b23      	ldr	r3, [pc, #140]	; (8008c30 <HAL_PWR_EnterSTOPMode+0xac>)
 8008ba4:	6a1b      	ldr	r3, [r3, #32]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	4013      	ands	r3, r2
 8008baa:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d008      	beq.n	8008bc4 <HAL_PWR_EnterSTOPMode+0x40>
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d005      	beq.n	8008bc4 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8008bb8:	4b1c      	ldr	r3, [pc, #112]	; (8008c2c <HAL_PWR_EnterSTOPMode+0xa8>)
 8008bba:	681a      	ldr	r2, [r3, #0]
 8008bbc:	4b1b      	ldr	r3, [pc, #108]	; (8008c2c <HAL_PWR_EnterSTOPMode+0xa8>)
 8008bbe:	491d      	ldr	r1, [pc, #116]	; (8008c34 <HAL_PWR_EnterSTOPMode+0xb0>)
 8008bc0:	400a      	ands	r2, r1
 8008bc2:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8008bc4:	4b19      	ldr	r3, [pc, #100]	; (8008c2c <HAL_PWR_EnterSTOPMode+0xa8>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	2203      	movs	r2, #3
 8008bce:	4393      	bics	r3, r2
 8008bd0:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8008bd2:	697a      	ldr	r2, [r7, #20]
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8008bda:	4b14      	ldr	r3, [pc, #80]	; (8008c2c <HAL_PWR_EnterSTOPMode+0xa8>)
 8008bdc:	697a      	ldr	r2, [r7, #20]
 8008bde:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008be0:	4b15      	ldr	r3, [pc, #84]	; (8008c38 <HAL_PWR_EnterSTOPMode+0xb4>)
 8008be2:	691a      	ldr	r2, [r3, #16]
 8008be4:	4b14      	ldr	r3, [pc, #80]	; (8008c38 <HAL_PWR_EnterSTOPMode+0xb4>)
 8008be6:	2104      	movs	r1, #4
 8008be8:	430a      	orrs	r2, r1
 8008bea:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8008bec:	1cfb      	adds	r3, r7, #3
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	d101      	bne.n	8008bf8 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8008bf4:	bf30      	wfi
 8008bf6:	e002      	b.n	8008bfe <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8008bf8:	bf40      	sev
    __WFE();
 8008bfa:	bf20      	wfe
    __WFE();
 8008bfc:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008bfe:	4b0e      	ldr	r3, [pc, #56]	; (8008c38 <HAL_PWR_EnterSTOPMode+0xb4>)
 8008c00:	691a      	ldr	r2, [r3, #16]
 8008c02:	4b0d      	ldr	r3, [pc, #52]	; (8008c38 <HAL_PWR_EnterSTOPMode+0xb4>)
 8008c04:	2104      	movs	r1, #4
 8008c06:	438a      	bics	r2, r1
 8008c08:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d009      	beq.n	8008c24 <HAL_PWR_EnterSTOPMode+0xa0>
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d006      	beq.n	8008c24 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8008c16:	4b05      	ldr	r3, [pc, #20]	; (8008c2c <HAL_PWR_EnterSTOPMode+0xa8>)
 8008c18:	681a      	ldr	r2, [r3, #0]
 8008c1a:	4b04      	ldr	r3, [pc, #16]	; (8008c2c <HAL_PWR_EnterSTOPMode+0xa8>)
 8008c1c:	2180      	movs	r1, #128	; 0x80
 8008c1e:	0089      	lsls	r1, r1, #2
 8008c20:	430a      	orrs	r2, r1
 8008c22:	601a      	str	r2, [r3, #0]
  }
}
 8008c24:	46c0      	nop			; (mov r8, r8)
 8008c26:	46bd      	mov	sp, r7
 8008c28:	b006      	add	sp, #24
 8008c2a:	bd80      	pop	{r7, pc}
 8008c2c:	40007000 	.word	0x40007000
 8008c30:	40010000 	.word	0x40010000
 8008c34:	fffffdff 	.word	0xfffffdff
 8008c38:	e000ed00 	.word	0xe000ed00

08008c3c <HAL_PWREx_EnableFastWakeUp>:
  *        Means, when ULP = 1 and FWU = 1 :VREFINT startup time is ignored when 
  *        exiting from low power mode.
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	af00      	add	r7, sp, #0
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 8008c40:	4b04      	ldr	r3, [pc, #16]	; (8008c54 <HAL_PWREx_EnableFastWakeUp+0x18>)
 8008c42:	681a      	ldr	r2, [r3, #0]
 8008c44:	4b03      	ldr	r3, [pc, #12]	; (8008c54 <HAL_PWREx_EnableFastWakeUp+0x18>)
 8008c46:	2180      	movs	r1, #128	; 0x80
 8008c48:	00c9      	lsls	r1, r1, #3
 8008c4a:	430a      	orrs	r2, r1
 8008c4c:	601a      	str	r2, [r3, #0]
}
 8008c4e:	46c0      	nop			; (mov r8, r8)
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}
 8008c54:	40007000 	.word	0x40007000

08008c58 <HAL_PWREx_EnableUltraLowPower>:
/**
  * @brief  Enables the Ultra Low Power mode
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	af00      	add	r7, sp, #0
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 8008c5c:	4b04      	ldr	r3, [pc, #16]	; (8008c70 <HAL_PWREx_EnableUltraLowPower+0x18>)
 8008c5e:	681a      	ldr	r2, [r3, #0]
 8008c60:	4b03      	ldr	r3, [pc, #12]	; (8008c70 <HAL_PWREx_EnableUltraLowPower+0x18>)
 8008c62:	2180      	movs	r1, #128	; 0x80
 8008c64:	0089      	lsls	r1, r1, #2
 8008c66:	430a      	orrs	r2, r1
 8008c68:	601a      	str	r2, [r3, #0]
}
 8008c6a:	46c0      	nop			; (mov r8, r8)
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}
 8008c70:	40007000 	.word	0x40007000

08008c74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008c74:	b5b0      	push	{r4, r5, r7, lr}
 8008c76:	b08a      	sub	sp, #40	; 0x28
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d102      	bne.n	8008c88 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008c82:	2301      	movs	r3, #1
 8008c84:	f000 fbbf 	bl	8009406 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008c88:	4bc9      	ldr	r3, [pc, #804]	; (8008fb0 <HAL_RCC_OscConfig+0x33c>)
 8008c8a:	68db      	ldr	r3, [r3, #12]
 8008c8c:	220c      	movs	r2, #12
 8008c8e:	4013      	ands	r3, r2
 8008c90:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008c92:	4bc7      	ldr	r3, [pc, #796]	; (8008fb0 <HAL_RCC_OscConfig+0x33c>)
 8008c94:	68da      	ldr	r2, [r3, #12]
 8008c96:	2380      	movs	r3, #128	; 0x80
 8008c98:	025b      	lsls	r3, r3, #9
 8008c9a:	4013      	ands	r3, r2
 8008c9c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	4013      	ands	r3, r2
 8008ca6:	d100      	bne.n	8008caa <HAL_RCC_OscConfig+0x36>
 8008ca8:	e07e      	b.n	8008da8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008caa:	69fb      	ldr	r3, [r7, #28]
 8008cac:	2b08      	cmp	r3, #8
 8008cae:	d007      	beq.n	8008cc0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008cb0:	69fb      	ldr	r3, [r7, #28]
 8008cb2:	2b0c      	cmp	r3, #12
 8008cb4:	d112      	bne.n	8008cdc <HAL_RCC_OscConfig+0x68>
 8008cb6:	69ba      	ldr	r2, [r7, #24]
 8008cb8:	2380      	movs	r3, #128	; 0x80
 8008cba:	025b      	lsls	r3, r3, #9
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d10d      	bne.n	8008cdc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008cc0:	4bbb      	ldr	r3, [pc, #748]	; (8008fb0 <HAL_RCC_OscConfig+0x33c>)
 8008cc2:	681a      	ldr	r2, [r3, #0]
 8008cc4:	2380      	movs	r3, #128	; 0x80
 8008cc6:	029b      	lsls	r3, r3, #10
 8008cc8:	4013      	ands	r3, r2
 8008cca:	d100      	bne.n	8008cce <HAL_RCC_OscConfig+0x5a>
 8008ccc:	e06b      	b.n	8008da6 <HAL_RCC_OscConfig+0x132>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d167      	bne.n	8008da6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	f000 fb95 	bl	8009406 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	685a      	ldr	r2, [r3, #4]
 8008ce0:	2380      	movs	r3, #128	; 0x80
 8008ce2:	025b      	lsls	r3, r3, #9
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	d107      	bne.n	8008cf8 <HAL_RCC_OscConfig+0x84>
 8008ce8:	4bb1      	ldr	r3, [pc, #708]	; (8008fb0 <HAL_RCC_OscConfig+0x33c>)
 8008cea:	681a      	ldr	r2, [r3, #0]
 8008cec:	4bb0      	ldr	r3, [pc, #704]	; (8008fb0 <HAL_RCC_OscConfig+0x33c>)
 8008cee:	2180      	movs	r1, #128	; 0x80
 8008cf0:	0249      	lsls	r1, r1, #9
 8008cf2:	430a      	orrs	r2, r1
 8008cf4:	601a      	str	r2, [r3, #0]
 8008cf6:	e027      	b.n	8008d48 <HAL_RCC_OscConfig+0xd4>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	685a      	ldr	r2, [r3, #4]
 8008cfc:	23a0      	movs	r3, #160	; 0xa0
 8008cfe:	02db      	lsls	r3, r3, #11
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d10e      	bne.n	8008d22 <HAL_RCC_OscConfig+0xae>
 8008d04:	4baa      	ldr	r3, [pc, #680]	; (8008fb0 <HAL_RCC_OscConfig+0x33c>)
 8008d06:	681a      	ldr	r2, [r3, #0]
 8008d08:	4ba9      	ldr	r3, [pc, #676]	; (8008fb0 <HAL_RCC_OscConfig+0x33c>)
 8008d0a:	2180      	movs	r1, #128	; 0x80
 8008d0c:	02c9      	lsls	r1, r1, #11
 8008d0e:	430a      	orrs	r2, r1
 8008d10:	601a      	str	r2, [r3, #0]
 8008d12:	4ba7      	ldr	r3, [pc, #668]	; (8008fb0 <HAL_RCC_OscConfig+0x33c>)
 8008d14:	681a      	ldr	r2, [r3, #0]
 8008d16:	4ba6      	ldr	r3, [pc, #664]	; (8008fb0 <HAL_RCC_OscConfig+0x33c>)
 8008d18:	2180      	movs	r1, #128	; 0x80
 8008d1a:	0249      	lsls	r1, r1, #9
 8008d1c:	430a      	orrs	r2, r1
 8008d1e:	601a      	str	r2, [r3, #0]
 8008d20:	e012      	b.n	8008d48 <HAL_RCC_OscConfig+0xd4>
 8008d22:	4ba3      	ldr	r3, [pc, #652]	; (8008fb0 <HAL_RCC_OscConfig+0x33c>)
 8008d24:	681a      	ldr	r2, [r3, #0]
 8008d26:	4ba2      	ldr	r3, [pc, #648]	; (8008fb0 <HAL_RCC_OscConfig+0x33c>)
 8008d28:	49a2      	ldr	r1, [pc, #648]	; (8008fb4 <HAL_RCC_OscConfig+0x340>)
 8008d2a:	400a      	ands	r2, r1
 8008d2c:	601a      	str	r2, [r3, #0]
 8008d2e:	4ba0      	ldr	r3, [pc, #640]	; (8008fb0 <HAL_RCC_OscConfig+0x33c>)
 8008d30:	681a      	ldr	r2, [r3, #0]
 8008d32:	2380      	movs	r3, #128	; 0x80
 8008d34:	025b      	lsls	r3, r3, #9
 8008d36:	4013      	ands	r3, r2
 8008d38:	60fb      	str	r3, [r7, #12]
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	4b9c      	ldr	r3, [pc, #624]	; (8008fb0 <HAL_RCC_OscConfig+0x33c>)
 8008d3e:	681a      	ldr	r2, [r3, #0]
 8008d40:	4b9b      	ldr	r3, [pc, #620]	; (8008fb0 <HAL_RCC_OscConfig+0x33c>)
 8008d42:	499d      	ldr	r1, [pc, #628]	; (8008fb8 <HAL_RCC_OscConfig+0x344>)
 8008d44:	400a      	ands	r2, r1
 8008d46:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d015      	beq.n	8008d7c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d50:	f7fc f835 	bl	8004dbe <HAL_GetTick>
 8008d54:	0003      	movs	r3, r0
 8008d56:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008d58:	e009      	b.n	8008d6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008d5a:	f7fc f830 	bl	8004dbe <HAL_GetTick>
 8008d5e:	0002      	movs	r2, r0
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	1ad3      	subs	r3, r2, r3
 8008d64:	2b64      	cmp	r3, #100	; 0x64
 8008d66:	d902      	bls.n	8008d6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008d68:	2303      	movs	r3, #3
 8008d6a:	f000 fb4c 	bl	8009406 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008d6e:	4b90      	ldr	r3, [pc, #576]	; (8008fb0 <HAL_RCC_OscConfig+0x33c>)
 8008d70:	681a      	ldr	r2, [r3, #0]
 8008d72:	2380      	movs	r3, #128	; 0x80
 8008d74:	029b      	lsls	r3, r3, #10
 8008d76:	4013      	ands	r3, r2
 8008d78:	d0ef      	beq.n	8008d5a <HAL_RCC_OscConfig+0xe6>
 8008d7a:	e015      	b.n	8008da8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d7c:	f7fc f81f 	bl	8004dbe <HAL_GetTick>
 8008d80:	0003      	movs	r3, r0
 8008d82:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008d84:	e008      	b.n	8008d98 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008d86:	f7fc f81a 	bl	8004dbe <HAL_GetTick>
 8008d8a:	0002      	movs	r2, r0
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	1ad3      	subs	r3, r2, r3
 8008d90:	2b64      	cmp	r3, #100	; 0x64
 8008d92:	d901      	bls.n	8008d98 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8008d94:	2303      	movs	r3, #3
 8008d96:	e336      	b.n	8009406 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008d98:	4b85      	ldr	r3, [pc, #532]	; (8008fb0 <HAL_RCC_OscConfig+0x33c>)
 8008d9a:	681a      	ldr	r2, [r3, #0]
 8008d9c:	2380      	movs	r3, #128	; 0x80
 8008d9e:	029b      	lsls	r3, r3, #10
 8008da0:	4013      	ands	r3, r2
 8008da2:	d1f0      	bne.n	8008d86 <HAL_RCC_OscConfig+0x112>
 8008da4:	e000      	b.n	8008da8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008da6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	2202      	movs	r2, #2
 8008dae:	4013      	ands	r3, r2
 8008db0:	d100      	bne.n	8008db4 <HAL_RCC_OscConfig+0x140>
 8008db2:	e099      	b.n	8008ee8 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	68db      	ldr	r3, [r3, #12]
 8008db8:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8008dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dbc:	2220      	movs	r2, #32
 8008dbe:	4013      	ands	r3, r2
 8008dc0:	d009      	beq.n	8008dd6 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8008dc2:	4b7b      	ldr	r3, [pc, #492]	; (8008fb0 <HAL_RCC_OscConfig+0x33c>)
 8008dc4:	681a      	ldr	r2, [r3, #0]
 8008dc6:	4b7a      	ldr	r3, [pc, #488]	; (8008fb0 <HAL_RCC_OscConfig+0x33c>)
 8008dc8:	2120      	movs	r1, #32
 8008dca:	430a      	orrs	r2, r1
 8008dcc:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8008dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd0:	2220      	movs	r2, #32
 8008dd2:	4393      	bics	r3, r2
 8008dd4:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008dd6:	69fb      	ldr	r3, [r7, #28]
 8008dd8:	2b04      	cmp	r3, #4
 8008dda:	d005      	beq.n	8008de8 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008ddc:	69fb      	ldr	r3, [r7, #28]
 8008dde:	2b0c      	cmp	r3, #12
 8008de0:	d13e      	bne.n	8008e60 <HAL_RCC_OscConfig+0x1ec>
 8008de2:	69bb      	ldr	r3, [r7, #24]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d13b      	bne.n	8008e60 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8008de8:	4b71      	ldr	r3, [pc, #452]	; (8008fb0 <HAL_RCC_OscConfig+0x33c>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	2204      	movs	r2, #4
 8008dee:	4013      	ands	r3, r2
 8008df0:	d004      	beq.n	8008dfc <HAL_RCC_OscConfig+0x188>
 8008df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d101      	bne.n	8008dfc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	e304      	b.n	8009406 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008dfc:	4b6c      	ldr	r3, [pc, #432]	; (8008fb0 <HAL_RCC_OscConfig+0x33c>)
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	4a6e      	ldr	r2, [pc, #440]	; (8008fbc <HAL_RCC_OscConfig+0x348>)
 8008e02:	4013      	ands	r3, r2
 8008e04:	0019      	movs	r1, r3
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	691b      	ldr	r3, [r3, #16]
 8008e0a:	021a      	lsls	r2, r3, #8
 8008e0c:	4b68      	ldr	r3, [pc, #416]	; (8008fb0 <HAL_RCC_OscConfig+0x33c>)
 8008e0e:	430a      	orrs	r2, r1
 8008e10:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8008e12:	4b67      	ldr	r3, [pc, #412]	; (8008fb0 <HAL_RCC_OscConfig+0x33c>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	2209      	movs	r2, #9
 8008e18:	4393      	bics	r3, r2
 8008e1a:	0019      	movs	r1, r3
 8008e1c:	4b64      	ldr	r3, [pc, #400]	; (8008fb0 <HAL_RCC_OscConfig+0x33c>)
 8008e1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e20:	430a      	orrs	r2, r1
 8008e22:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008e24:	f000 fc42 	bl	80096ac <HAL_RCC_GetSysClockFreq>
 8008e28:	0001      	movs	r1, r0
 8008e2a:	4b61      	ldr	r3, [pc, #388]	; (8008fb0 <HAL_RCC_OscConfig+0x33c>)
 8008e2c:	68db      	ldr	r3, [r3, #12]
 8008e2e:	091b      	lsrs	r3, r3, #4
 8008e30:	220f      	movs	r2, #15
 8008e32:	4013      	ands	r3, r2
 8008e34:	4a62      	ldr	r2, [pc, #392]	; (8008fc0 <HAL_RCC_OscConfig+0x34c>)
 8008e36:	5cd3      	ldrb	r3, [r2, r3]
 8008e38:	000a      	movs	r2, r1
 8008e3a:	40da      	lsrs	r2, r3
 8008e3c:	4b61      	ldr	r3, [pc, #388]	; (8008fc4 <HAL_RCC_OscConfig+0x350>)
 8008e3e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8008e40:	4b61      	ldr	r3, [pc, #388]	; (8008fc8 <HAL_RCC_OscConfig+0x354>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	2513      	movs	r5, #19
 8008e46:	197c      	adds	r4, r7, r5
 8008e48:	0018      	movs	r0, r3
 8008e4a:	f7fb ffaf 	bl	8004dac <HAL_InitTick>
 8008e4e:	0003      	movs	r3, r0
 8008e50:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8008e52:	197b      	adds	r3, r7, r5
 8008e54:	781b      	ldrb	r3, [r3, #0]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d046      	beq.n	8008ee8 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8008e5a:	197b      	adds	r3, r7, r5
 8008e5c:	781b      	ldrb	r3, [r3, #0]
 8008e5e:	e2d2      	b.n	8009406 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8008e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d027      	beq.n	8008eb6 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8008e66:	4b52      	ldr	r3, [pc, #328]	; (8008fb0 <HAL_RCC_OscConfig+0x33c>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	2209      	movs	r2, #9
 8008e6c:	4393      	bics	r3, r2
 8008e6e:	0019      	movs	r1, r3
 8008e70:	4b4f      	ldr	r3, [pc, #316]	; (8008fb0 <HAL_RCC_OscConfig+0x33c>)
 8008e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e74:	430a      	orrs	r2, r1
 8008e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e78:	f7fb ffa1 	bl	8004dbe <HAL_GetTick>
 8008e7c:	0003      	movs	r3, r0
 8008e7e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008e80:	e008      	b.n	8008e94 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008e82:	f7fb ff9c 	bl	8004dbe <HAL_GetTick>
 8008e86:	0002      	movs	r2, r0
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	1ad3      	subs	r3, r2, r3
 8008e8c:	2b02      	cmp	r3, #2
 8008e8e:	d901      	bls.n	8008e94 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8008e90:	2303      	movs	r3, #3
 8008e92:	e2b8      	b.n	8009406 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008e94:	4b46      	ldr	r3, [pc, #280]	; (8008fb0 <HAL_RCC_OscConfig+0x33c>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	2204      	movs	r2, #4
 8008e9a:	4013      	ands	r3, r2
 8008e9c:	d0f1      	beq.n	8008e82 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e9e:	4b44      	ldr	r3, [pc, #272]	; (8008fb0 <HAL_RCC_OscConfig+0x33c>)
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	4a46      	ldr	r2, [pc, #280]	; (8008fbc <HAL_RCC_OscConfig+0x348>)
 8008ea4:	4013      	ands	r3, r2
 8008ea6:	0019      	movs	r1, r3
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	691b      	ldr	r3, [r3, #16]
 8008eac:	021a      	lsls	r2, r3, #8
 8008eae:	4b40      	ldr	r3, [pc, #256]	; (8008fb0 <HAL_RCC_OscConfig+0x33c>)
 8008eb0:	430a      	orrs	r2, r1
 8008eb2:	605a      	str	r2, [r3, #4]
 8008eb4:	e018      	b.n	8008ee8 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008eb6:	4b3e      	ldr	r3, [pc, #248]	; (8008fb0 <HAL_RCC_OscConfig+0x33c>)
 8008eb8:	681a      	ldr	r2, [r3, #0]
 8008eba:	4b3d      	ldr	r3, [pc, #244]	; (8008fb0 <HAL_RCC_OscConfig+0x33c>)
 8008ebc:	2101      	movs	r1, #1
 8008ebe:	438a      	bics	r2, r1
 8008ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ec2:	f7fb ff7c 	bl	8004dbe <HAL_GetTick>
 8008ec6:	0003      	movs	r3, r0
 8008ec8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008eca:	e008      	b.n	8008ede <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008ecc:	f7fb ff77 	bl	8004dbe <HAL_GetTick>
 8008ed0:	0002      	movs	r2, r0
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	1ad3      	subs	r3, r2, r3
 8008ed6:	2b02      	cmp	r3, #2
 8008ed8:	d901      	bls.n	8008ede <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8008eda:	2303      	movs	r3, #3
 8008edc:	e293      	b.n	8009406 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008ede:	4b34      	ldr	r3, [pc, #208]	; (8008fb0 <HAL_RCC_OscConfig+0x33c>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	2204      	movs	r2, #4
 8008ee4:	4013      	ands	r3, r2
 8008ee6:	d1f1      	bne.n	8008ecc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	2210      	movs	r2, #16
 8008eee:	4013      	ands	r3, r2
 8008ef0:	d100      	bne.n	8008ef4 <HAL_RCC_OscConfig+0x280>
 8008ef2:	e0a2      	b.n	800903a <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008ef4:	69fb      	ldr	r3, [r7, #28]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d140      	bne.n	8008f7c <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008efa:	4b2d      	ldr	r3, [pc, #180]	; (8008fb0 <HAL_RCC_OscConfig+0x33c>)
 8008efc:	681a      	ldr	r2, [r3, #0]
 8008efe:	2380      	movs	r3, #128	; 0x80
 8008f00:	009b      	lsls	r3, r3, #2
 8008f02:	4013      	ands	r3, r2
 8008f04:	d005      	beq.n	8008f12 <HAL_RCC_OscConfig+0x29e>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	69db      	ldr	r3, [r3, #28]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d101      	bne.n	8008f12 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8008f0e:	2301      	movs	r3, #1
 8008f10:	e279      	b.n	8009406 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008f12:	4b27      	ldr	r3, [pc, #156]	; (8008fb0 <HAL_RCC_OscConfig+0x33c>)
 8008f14:	685b      	ldr	r3, [r3, #4]
 8008f16:	4a2d      	ldr	r2, [pc, #180]	; (8008fcc <HAL_RCC_OscConfig+0x358>)
 8008f18:	4013      	ands	r3, r2
 8008f1a:	0019      	movs	r1, r3
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008f20:	4b23      	ldr	r3, [pc, #140]	; (8008fb0 <HAL_RCC_OscConfig+0x33c>)
 8008f22:	430a      	orrs	r2, r1
 8008f24:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008f26:	4b22      	ldr	r3, [pc, #136]	; (8008fb0 <HAL_RCC_OscConfig+0x33c>)
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	021b      	lsls	r3, r3, #8
 8008f2c:	0a19      	lsrs	r1, r3, #8
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6a1b      	ldr	r3, [r3, #32]
 8008f32:	061a      	lsls	r2, r3, #24
 8008f34:	4b1e      	ldr	r3, [pc, #120]	; (8008fb0 <HAL_RCC_OscConfig+0x33c>)
 8008f36:	430a      	orrs	r2, r1
 8008f38:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f3e:	0b5b      	lsrs	r3, r3, #13
 8008f40:	3301      	adds	r3, #1
 8008f42:	2280      	movs	r2, #128	; 0x80
 8008f44:	0212      	lsls	r2, r2, #8
 8008f46:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8008f48:	4b19      	ldr	r3, [pc, #100]	; (8008fb0 <HAL_RCC_OscConfig+0x33c>)
 8008f4a:	68db      	ldr	r3, [r3, #12]
 8008f4c:	091b      	lsrs	r3, r3, #4
 8008f4e:	210f      	movs	r1, #15
 8008f50:	400b      	ands	r3, r1
 8008f52:	491b      	ldr	r1, [pc, #108]	; (8008fc0 <HAL_RCC_OscConfig+0x34c>)
 8008f54:	5ccb      	ldrb	r3, [r1, r3]
 8008f56:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8008f58:	4b1a      	ldr	r3, [pc, #104]	; (8008fc4 <HAL_RCC_OscConfig+0x350>)
 8008f5a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8008f5c:	4b1a      	ldr	r3, [pc, #104]	; (8008fc8 <HAL_RCC_OscConfig+0x354>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	2513      	movs	r5, #19
 8008f62:	197c      	adds	r4, r7, r5
 8008f64:	0018      	movs	r0, r3
 8008f66:	f7fb ff21 	bl	8004dac <HAL_InitTick>
 8008f6a:	0003      	movs	r3, r0
 8008f6c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8008f6e:	197b      	adds	r3, r7, r5
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d061      	beq.n	800903a <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8008f76:	197b      	adds	r3, r7, r5
 8008f78:	781b      	ldrb	r3, [r3, #0]
 8008f7a:	e244      	b.n	8009406 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	69db      	ldr	r3, [r3, #28]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d040      	beq.n	8009006 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008f84:	4b0a      	ldr	r3, [pc, #40]	; (8008fb0 <HAL_RCC_OscConfig+0x33c>)
 8008f86:	681a      	ldr	r2, [r3, #0]
 8008f88:	4b09      	ldr	r3, [pc, #36]	; (8008fb0 <HAL_RCC_OscConfig+0x33c>)
 8008f8a:	2180      	movs	r1, #128	; 0x80
 8008f8c:	0049      	lsls	r1, r1, #1
 8008f8e:	430a      	orrs	r2, r1
 8008f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f92:	f7fb ff14 	bl	8004dbe <HAL_GetTick>
 8008f96:	0003      	movs	r3, r0
 8008f98:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8008f9a:	e019      	b.n	8008fd0 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008f9c:	f7fb ff0f 	bl	8004dbe <HAL_GetTick>
 8008fa0:	0002      	movs	r2, r0
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	1ad3      	subs	r3, r2, r3
 8008fa6:	2b02      	cmp	r3, #2
 8008fa8:	d912      	bls.n	8008fd0 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8008faa:	2303      	movs	r3, #3
 8008fac:	e22b      	b.n	8009406 <HAL_RCC_OscConfig+0x792>
 8008fae:	46c0      	nop			; (mov r8, r8)
 8008fb0:	40021000 	.word	0x40021000
 8008fb4:	fffeffff 	.word	0xfffeffff
 8008fb8:	fffbffff 	.word	0xfffbffff
 8008fbc:	ffffe0ff 	.word	0xffffe0ff
 8008fc0:	0801f1b4 	.word	0x0801f1b4
 8008fc4:	20000070 	.word	0x20000070
 8008fc8:	20000074 	.word	0x20000074
 8008fcc:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8008fd0:	4bca      	ldr	r3, [pc, #808]	; (80092fc <HAL_RCC_OscConfig+0x688>)
 8008fd2:	681a      	ldr	r2, [r3, #0]
 8008fd4:	2380      	movs	r3, #128	; 0x80
 8008fd6:	009b      	lsls	r3, r3, #2
 8008fd8:	4013      	ands	r3, r2
 8008fda:	d0df      	beq.n	8008f9c <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008fdc:	4bc7      	ldr	r3, [pc, #796]	; (80092fc <HAL_RCC_OscConfig+0x688>)
 8008fde:	685b      	ldr	r3, [r3, #4]
 8008fe0:	4ac7      	ldr	r2, [pc, #796]	; (8009300 <HAL_RCC_OscConfig+0x68c>)
 8008fe2:	4013      	ands	r3, r2
 8008fe4:	0019      	movs	r1, r3
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008fea:	4bc4      	ldr	r3, [pc, #784]	; (80092fc <HAL_RCC_OscConfig+0x688>)
 8008fec:	430a      	orrs	r2, r1
 8008fee:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008ff0:	4bc2      	ldr	r3, [pc, #776]	; (80092fc <HAL_RCC_OscConfig+0x688>)
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	021b      	lsls	r3, r3, #8
 8008ff6:	0a19      	lsrs	r1, r3, #8
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6a1b      	ldr	r3, [r3, #32]
 8008ffc:	061a      	lsls	r2, r3, #24
 8008ffe:	4bbf      	ldr	r3, [pc, #764]	; (80092fc <HAL_RCC_OscConfig+0x688>)
 8009000:	430a      	orrs	r2, r1
 8009002:	605a      	str	r2, [r3, #4]
 8009004:	e019      	b.n	800903a <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8009006:	4bbd      	ldr	r3, [pc, #756]	; (80092fc <HAL_RCC_OscConfig+0x688>)
 8009008:	681a      	ldr	r2, [r3, #0]
 800900a:	4bbc      	ldr	r3, [pc, #752]	; (80092fc <HAL_RCC_OscConfig+0x688>)
 800900c:	49bd      	ldr	r1, [pc, #756]	; (8009304 <HAL_RCC_OscConfig+0x690>)
 800900e:	400a      	ands	r2, r1
 8009010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009012:	f7fb fed4 	bl	8004dbe <HAL_GetTick>
 8009016:	0003      	movs	r3, r0
 8009018:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800901a:	e008      	b.n	800902e <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800901c:	f7fb fecf 	bl	8004dbe <HAL_GetTick>
 8009020:	0002      	movs	r2, r0
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	1ad3      	subs	r3, r2, r3
 8009026:	2b02      	cmp	r3, #2
 8009028:	d901      	bls.n	800902e <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800902a:	2303      	movs	r3, #3
 800902c:	e1eb      	b.n	8009406 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800902e:	4bb3      	ldr	r3, [pc, #716]	; (80092fc <HAL_RCC_OscConfig+0x688>)
 8009030:	681a      	ldr	r2, [r3, #0]
 8009032:	2380      	movs	r3, #128	; 0x80
 8009034:	009b      	lsls	r3, r3, #2
 8009036:	4013      	ands	r3, r2
 8009038:	d1f0      	bne.n	800901c <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	2208      	movs	r2, #8
 8009040:	4013      	ands	r3, r2
 8009042:	d036      	beq.n	80090b2 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	695b      	ldr	r3, [r3, #20]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d019      	beq.n	8009080 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800904c:	4bab      	ldr	r3, [pc, #684]	; (80092fc <HAL_RCC_OscConfig+0x688>)
 800904e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009050:	4baa      	ldr	r3, [pc, #680]	; (80092fc <HAL_RCC_OscConfig+0x688>)
 8009052:	2101      	movs	r1, #1
 8009054:	430a      	orrs	r2, r1
 8009056:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009058:	f7fb feb1 	bl	8004dbe <HAL_GetTick>
 800905c:	0003      	movs	r3, r0
 800905e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009060:	e008      	b.n	8009074 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009062:	f7fb feac 	bl	8004dbe <HAL_GetTick>
 8009066:	0002      	movs	r2, r0
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	1ad3      	subs	r3, r2, r3
 800906c:	2b02      	cmp	r3, #2
 800906e:	d901      	bls.n	8009074 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8009070:	2303      	movs	r3, #3
 8009072:	e1c8      	b.n	8009406 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009074:	4ba1      	ldr	r3, [pc, #644]	; (80092fc <HAL_RCC_OscConfig+0x688>)
 8009076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009078:	2202      	movs	r2, #2
 800907a:	4013      	ands	r3, r2
 800907c:	d0f1      	beq.n	8009062 <HAL_RCC_OscConfig+0x3ee>
 800907e:	e018      	b.n	80090b2 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009080:	4b9e      	ldr	r3, [pc, #632]	; (80092fc <HAL_RCC_OscConfig+0x688>)
 8009082:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009084:	4b9d      	ldr	r3, [pc, #628]	; (80092fc <HAL_RCC_OscConfig+0x688>)
 8009086:	2101      	movs	r1, #1
 8009088:	438a      	bics	r2, r1
 800908a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800908c:	f7fb fe97 	bl	8004dbe <HAL_GetTick>
 8009090:	0003      	movs	r3, r0
 8009092:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009094:	e008      	b.n	80090a8 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009096:	f7fb fe92 	bl	8004dbe <HAL_GetTick>
 800909a:	0002      	movs	r2, r0
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	1ad3      	subs	r3, r2, r3
 80090a0:	2b02      	cmp	r3, #2
 80090a2:	d901      	bls.n	80090a8 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80090a4:	2303      	movs	r3, #3
 80090a6:	e1ae      	b.n	8009406 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80090a8:	4b94      	ldr	r3, [pc, #592]	; (80092fc <HAL_RCC_OscConfig+0x688>)
 80090aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090ac:	2202      	movs	r2, #2
 80090ae:	4013      	ands	r3, r2
 80090b0:	d1f1      	bne.n	8009096 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	2204      	movs	r2, #4
 80090b8:	4013      	ands	r3, r2
 80090ba:	d100      	bne.n	80090be <HAL_RCC_OscConfig+0x44a>
 80090bc:	e0ae      	b.n	800921c <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80090be:	2023      	movs	r0, #35	; 0x23
 80090c0:	183b      	adds	r3, r7, r0
 80090c2:	2200      	movs	r2, #0
 80090c4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80090c6:	4b8d      	ldr	r3, [pc, #564]	; (80092fc <HAL_RCC_OscConfig+0x688>)
 80090c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090ca:	2380      	movs	r3, #128	; 0x80
 80090cc:	055b      	lsls	r3, r3, #21
 80090ce:	4013      	ands	r3, r2
 80090d0:	d109      	bne.n	80090e6 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80090d2:	4b8a      	ldr	r3, [pc, #552]	; (80092fc <HAL_RCC_OscConfig+0x688>)
 80090d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090d6:	4b89      	ldr	r3, [pc, #548]	; (80092fc <HAL_RCC_OscConfig+0x688>)
 80090d8:	2180      	movs	r1, #128	; 0x80
 80090da:	0549      	lsls	r1, r1, #21
 80090dc:	430a      	orrs	r2, r1
 80090de:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80090e0:	183b      	adds	r3, r7, r0
 80090e2:	2201      	movs	r2, #1
 80090e4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80090e6:	4b88      	ldr	r3, [pc, #544]	; (8009308 <HAL_RCC_OscConfig+0x694>)
 80090e8:	681a      	ldr	r2, [r3, #0]
 80090ea:	2380      	movs	r3, #128	; 0x80
 80090ec:	005b      	lsls	r3, r3, #1
 80090ee:	4013      	ands	r3, r2
 80090f0:	d11a      	bne.n	8009128 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80090f2:	4b85      	ldr	r3, [pc, #532]	; (8009308 <HAL_RCC_OscConfig+0x694>)
 80090f4:	681a      	ldr	r2, [r3, #0]
 80090f6:	4b84      	ldr	r3, [pc, #528]	; (8009308 <HAL_RCC_OscConfig+0x694>)
 80090f8:	2180      	movs	r1, #128	; 0x80
 80090fa:	0049      	lsls	r1, r1, #1
 80090fc:	430a      	orrs	r2, r1
 80090fe:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009100:	f7fb fe5d 	bl	8004dbe <HAL_GetTick>
 8009104:	0003      	movs	r3, r0
 8009106:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009108:	e008      	b.n	800911c <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800910a:	f7fb fe58 	bl	8004dbe <HAL_GetTick>
 800910e:	0002      	movs	r2, r0
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	1ad3      	subs	r3, r2, r3
 8009114:	2b64      	cmp	r3, #100	; 0x64
 8009116:	d901      	bls.n	800911c <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8009118:	2303      	movs	r3, #3
 800911a:	e174      	b.n	8009406 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800911c:	4b7a      	ldr	r3, [pc, #488]	; (8009308 <HAL_RCC_OscConfig+0x694>)
 800911e:	681a      	ldr	r2, [r3, #0]
 8009120:	2380      	movs	r3, #128	; 0x80
 8009122:	005b      	lsls	r3, r3, #1
 8009124:	4013      	ands	r3, r2
 8009126:	d0f0      	beq.n	800910a <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	689a      	ldr	r2, [r3, #8]
 800912c:	2380      	movs	r3, #128	; 0x80
 800912e:	005b      	lsls	r3, r3, #1
 8009130:	429a      	cmp	r2, r3
 8009132:	d107      	bne.n	8009144 <HAL_RCC_OscConfig+0x4d0>
 8009134:	4b71      	ldr	r3, [pc, #452]	; (80092fc <HAL_RCC_OscConfig+0x688>)
 8009136:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009138:	4b70      	ldr	r3, [pc, #448]	; (80092fc <HAL_RCC_OscConfig+0x688>)
 800913a:	2180      	movs	r1, #128	; 0x80
 800913c:	0049      	lsls	r1, r1, #1
 800913e:	430a      	orrs	r2, r1
 8009140:	651a      	str	r2, [r3, #80]	; 0x50
 8009142:	e031      	b.n	80091a8 <HAL_RCC_OscConfig+0x534>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	689b      	ldr	r3, [r3, #8]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d10c      	bne.n	8009166 <HAL_RCC_OscConfig+0x4f2>
 800914c:	4b6b      	ldr	r3, [pc, #428]	; (80092fc <HAL_RCC_OscConfig+0x688>)
 800914e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009150:	4b6a      	ldr	r3, [pc, #424]	; (80092fc <HAL_RCC_OscConfig+0x688>)
 8009152:	496c      	ldr	r1, [pc, #432]	; (8009304 <HAL_RCC_OscConfig+0x690>)
 8009154:	400a      	ands	r2, r1
 8009156:	651a      	str	r2, [r3, #80]	; 0x50
 8009158:	4b68      	ldr	r3, [pc, #416]	; (80092fc <HAL_RCC_OscConfig+0x688>)
 800915a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800915c:	4b67      	ldr	r3, [pc, #412]	; (80092fc <HAL_RCC_OscConfig+0x688>)
 800915e:	496b      	ldr	r1, [pc, #428]	; (800930c <HAL_RCC_OscConfig+0x698>)
 8009160:	400a      	ands	r2, r1
 8009162:	651a      	str	r2, [r3, #80]	; 0x50
 8009164:	e020      	b.n	80091a8 <HAL_RCC_OscConfig+0x534>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	689a      	ldr	r2, [r3, #8]
 800916a:	23a0      	movs	r3, #160	; 0xa0
 800916c:	00db      	lsls	r3, r3, #3
 800916e:	429a      	cmp	r2, r3
 8009170:	d10e      	bne.n	8009190 <HAL_RCC_OscConfig+0x51c>
 8009172:	4b62      	ldr	r3, [pc, #392]	; (80092fc <HAL_RCC_OscConfig+0x688>)
 8009174:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009176:	4b61      	ldr	r3, [pc, #388]	; (80092fc <HAL_RCC_OscConfig+0x688>)
 8009178:	2180      	movs	r1, #128	; 0x80
 800917a:	00c9      	lsls	r1, r1, #3
 800917c:	430a      	orrs	r2, r1
 800917e:	651a      	str	r2, [r3, #80]	; 0x50
 8009180:	4b5e      	ldr	r3, [pc, #376]	; (80092fc <HAL_RCC_OscConfig+0x688>)
 8009182:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009184:	4b5d      	ldr	r3, [pc, #372]	; (80092fc <HAL_RCC_OscConfig+0x688>)
 8009186:	2180      	movs	r1, #128	; 0x80
 8009188:	0049      	lsls	r1, r1, #1
 800918a:	430a      	orrs	r2, r1
 800918c:	651a      	str	r2, [r3, #80]	; 0x50
 800918e:	e00b      	b.n	80091a8 <HAL_RCC_OscConfig+0x534>
 8009190:	4b5a      	ldr	r3, [pc, #360]	; (80092fc <HAL_RCC_OscConfig+0x688>)
 8009192:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009194:	4b59      	ldr	r3, [pc, #356]	; (80092fc <HAL_RCC_OscConfig+0x688>)
 8009196:	495b      	ldr	r1, [pc, #364]	; (8009304 <HAL_RCC_OscConfig+0x690>)
 8009198:	400a      	ands	r2, r1
 800919a:	651a      	str	r2, [r3, #80]	; 0x50
 800919c:	4b57      	ldr	r3, [pc, #348]	; (80092fc <HAL_RCC_OscConfig+0x688>)
 800919e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80091a0:	4b56      	ldr	r3, [pc, #344]	; (80092fc <HAL_RCC_OscConfig+0x688>)
 80091a2:	495a      	ldr	r1, [pc, #360]	; (800930c <HAL_RCC_OscConfig+0x698>)
 80091a4:	400a      	ands	r2, r1
 80091a6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	689b      	ldr	r3, [r3, #8]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d015      	beq.n	80091dc <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80091b0:	f7fb fe05 	bl	8004dbe <HAL_GetTick>
 80091b4:	0003      	movs	r3, r0
 80091b6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80091b8:	e009      	b.n	80091ce <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80091ba:	f7fb fe00 	bl	8004dbe <HAL_GetTick>
 80091be:	0002      	movs	r2, r0
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	1ad3      	subs	r3, r2, r3
 80091c4:	4a52      	ldr	r2, [pc, #328]	; (8009310 <HAL_RCC_OscConfig+0x69c>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d901      	bls.n	80091ce <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80091ca:	2303      	movs	r3, #3
 80091cc:	e11b      	b.n	8009406 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80091ce:	4b4b      	ldr	r3, [pc, #300]	; (80092fc <HAL_RCC_OscConfig+0x688>)
 80091d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80091d2:	2380      	movs	r3, #128	; 0x80
 80091d4:	009b      	lsls	r3, r3, #2
 80091d6:	4013      	ands	r3, r2
 80091d8:	d0ef      	beq.n	80091ba <HAL_RCC_OscConfig+0x546>
 80091da:	e014      	b.n	8009206 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80091dc:	f7fb fdef 	bl	8004dbe <HAL_GetTick>
 80091e0:	0003      	movs	r3, r0
 80091e2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80091e4:	e009      	b.n	80091fa <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80091e6:	f7fb fdea 	bl	8004dbe <HAL_GetTick>
 80091ea:	0002      	movs	r2, r0
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	1ad3      	subs	r3, r2, r3
 80091f0:	4a47      	ldr	r2, [pc, #284]	; (8009310 <HAL_RCC_OscConfig+0x69c>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d901      	bls.n	80091fa <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80091f6:	2303      	movs	r3, #3
 80091f8:	e105      	b.n	8009406 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80091fa:	4b40      	ldr	r3, [pc, #256]	; (80092fc <HAL_RCC_OscConfig+0x688>)
 80091fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80091fe:	2380      	movs	r3, #128	; 0x80
 8009200:	009b      	lsls	r3, r3, #2
 8009202:	4013      	ands	r3, r2
 8009204:	d1ef      	bne.n	80091e6 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8009206:	2323      	movs	r3, #35	; 0x23
 8009208:	18fb      	adds	r3, r7, r3
 800920a:	781b      	ldrb	r3, [r3, #0]
 800920c:	2b01      	cmp	r3, #1
 800920e:	d105      	bne.n	800921c <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009210:	4b3a      	ldr	r3, [pc, #232]	; (80092fc <HAL_RCC_OscConfig+0x688>)
 8009212:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009214:	4b39      	ldr	r3, [pc, #228]	; (80092fc <HAL_RCC_OscConfig+0x688>)
 8009216:	493f      	ldr	r1, [pc, #252]	; (8009314 <HAL_RCC_OscConfig+0x6a0>)
 8009218:	400a      	ands	r2, r1
 800921a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	2220      	movs	r2, #32
 8009222:	4013      	ands	r3, r2
 8009224:	d049      	beq.n	80092ba <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	699b      	ldr	r3, [r3, #24]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d026      	beq.n	800927c <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800922e:	4b33      	ldr	r3, [pc, #204]	; (80092fc <HAL_RCC_OscConfig+0x688>)
 8009230:	689a      	ldr	r2, [r3, #8]
 8009232:	4b32      	ldr	r3, [pc, #200]	; (80092fc <HAL_RCC_OscConfig+0x688>)
 8009234:	2101      	movs	r1, #1
 8009236:	430a      	orrs	r2, r1
 8009238:	609a      	str	r2, [r3, #8]
 800923a:	4b30      	ldr	r3, [pc, #192]	; (80092fc <HAL_RCC_OscConfig+0x688>)
 800923c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800923e:	4b2f      	ldr	r3, [pc, #188]	; (80092fc <HAL_RCC_OscConfig+0x688>)
 8009240:	2101      	movs	r1, #1
 8009242:	430a      	orrs	r2, r1
 8009244:	635a      	str	r2, [r3, #52]	; 0x34
 8009246:	4b34      	ldr	r3, [pc, #208]	; (8009318 <HAL_RCC_OscConfig+0x6a4>)
 8009248:	6a1a      	ldr	r2, [r3, #32]
 800924a:	4b33      	ldr	r3, [pc, #204]	; (8009318 <HAL_RCC_OscConfig+0x6a4>)
 800924c:	2180      	movs	r1, #128	; 0x80
 800924e:	0189      	lsls	r1, r1, #6
 8009250:	430a      	orrs	r2, r1
 8009252:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009254:	f7fb fdb3 	bl	8004dbe <HAL_GetTick>
 8009258:	0003      	movs	r3, r0
 800925a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800925c:	e008      	b.n	8009270 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800925e:	f7fb fdae 	bl	8004dbe <HAL_GetTick>
 8009262:	0002      	movs	r2, r0
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	1ad3      	subs	r3, r2, r3
 8009268:	2b02      	cmp	r3, #2
 800926a:	d901      	bls.n	8009270 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 800926c:	2303      	movs	r3, #3
 800926e:	e0ca      	b.n	8009406 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009270:	4b22      	ldr	r3, [pc, #136]	; (80092fc <HAL_RCC_OscConfig+0x688>)
 8009272:	689b      	ldr	r3, [r3, #8]
 8009274:	2202      	movs	r2, #2
 8009276:	4013      	ands	r3, r2
 8009278:	d0f1      	beq.n	800925e <HAL_RCC_OscConfig+0x5ea>
 800927a:	e01e      	b.n	80092ba <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800927c:	4b1f      	ldr	r3, [pc, #124]	; (80092fc <HAL_RCC_OscConfig+0x688>)
 800927e:	689a      	ldr	r2, [r3, #8]
 8009280:	4b1e      	ldr	r3, [pc, #120]	; (80092fc <HAL_RCC_OscConfig+0x688>)
 8009282:	2101      	movs	r1, #1
 8009284:	438a      	bics	r2, r1
 8009286:	609a      	str	r2, [r3, #8]
 8009288:	4b23      	ldr	r3, [pc, #140]	; (8009318 <HAL_RCC_OscConfig+0x6a4>)
 800928a:	6a1a      	ldr	r2, [r3, #32]
 800928c:	4b22      	ldr	r3, [pc, #136]	; (8009318 <HAL_RCC_OscConfig+0x6a4>)
 800928e:	4923      	ldr	r1, [pc, #140]	; (800931c <HAL_RCC_OscConfig+0x6a8>)
 8009290:	400a      	ands	r2, r1
 8009292:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009294:	f7fb fd93 	bl	8004dbe <HAL_GetTick>
 8009298:	0003      	movs	r3, r0
 800929a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800929c:	e008      	b.n	80092b0 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800929e:	f7fb fd8e 	bl	8004dbe <HAL_GetTick>
 80092a2:	0002      	movs	r2, r0
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	1ad3      	subs	r3, r2, r3
 80092a8:	2b02      	cmp	r3, #2
 80092aa:	d901      	bls.n	80092b0 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80092ac:	2303      	movs	r3, #3
 80092ae:	e0aa      	b.n	8009406 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80092b0:	4b12      	ldr	r3, [pc, #72]	; (80092fc <HAL_RCC_OscConfig+0x688>)
 80092b2:	689b      	ldr	r3, [r3, #8]
 80092b4:	2202      	movs	r2, #2
 80092b6:	4013      	ands	r3, r2
 80092b8:	d1f1      	bne.n	800929e <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d100      	bne.n	80092c4 <HAL_RCC_OscConfig+0x650>
 80092c2:	e09f      	b.n	8009404 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80092c4:	69fb      	ldr	r3, [r7, #28]
 80092c6:	2b0c      	cmp	r3, #12
 80092c8:	d100      	bne.n	80092cc <HAL_RCC_OscConfig+0x658>
 80092ca:	e078      	b.n	80093be <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092d0:	2b02      	cmp	r3, #2
 80092d2:	d159      	bne.n	8009388 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80092d4:	4b09      	ldr	r3, [pc, #36]	; (80092fc <HAL_RCC_OscConfig+0x688>)
 80092d6:	681a      	ldr	r2, [r3, #0]
 80092d8:	4b08      	ldr	r3, [pc, #32]	; (80092fc <HAL_RCC_OscConfig+0x688>)
 80092da:	4911      	ldr	r1, [pc, #68]	; (8009320 <HAL_RCC_OscConfig+0x6ac>)
 80092dc:	400a      	ands	r2, r1
 80092de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80092e0:	f7fb fd6d 	bl	8004dbe <HAL_GetTick>
 80092e4:	0003      	movs	r3, r0
 80092e6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80092e8:	e01c      	b.n	8009324 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80092ea:	f7fb fd68 	bl	8004dbe <HAL_GetTick>
 80092ee:	0002      	movs	r2, r0
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	1ad3      	subs	r3, r2, r3
 80092f4:	2b02      	cmp	r3, #2
 80092f6:	d915      	bls.n	8009324 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80092f8:	2303      	movs	r3, #3
 80092fa:	e084      	b.n	8009406 <HAL_RCC_OscConfig+0x792>
 80092fc:	40021000 	.word	0x40021000
 8009300:	ffff1fff 	.word	0xffff1fff
 8009304:	fffffeff 	.word	0xfffffeff
 8009308:	40007000 	.word	0x40007000
 800930c:	fffffbff 	.word	0xfffffbff
 8009310:	00001388 	.word	0x00001388
 8009314:	efffffff 	.word	0xefffffff
 8009318:	40010000 	.word	0x40010000
 800931c:	ffffdfff 	.word	0xffffdfff
 8009320:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8009324:	4b3a      	ldr	r3, [pc, #232]	; (8009410 <HAL_RCC_OscConfig+0x79c>)
 8009326:	681a      	ldr	r2, [r3, #0]
 8009328:	2380      	movs	r3, #128	; 0x80
 800932a:	049b      	lsls	r3, r3, #18
 800932c:	4013      	ands	r3, r2
 800932e:	d1dc      	bne.n	80092ea <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009330:	4b37      	ldr	r3, [pc, #220]	; (8009410 <HAL_RCC_OscConfig+0x79c>)
 8009332:	68db      	ldr	r3, [r3, #12]
 8009334:	4a37      	ldr	r2, [pc, #220]	; (8009414 <HAL_RCC_OscConfig+0x7a0>)
 8009336:	4013      	ands	r3, r2
 8009338:	0019      	movs	r1, r3
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009342:	431a      	orrs	r2, r3
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009348:	431a      	orrs	r2, r3
 800934a:	4b31      	ldr	r3, [pc, #196]	; (8009410 <HAL_RCC_OscConfig+0x79c>)
 800934c:	430a      	orrs	r2, r1
 800934e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009350:	4b2f      	ldr	r3, [pc, #188]	; (8009410 <HAL_RCC_OscConfig+0x79c>)
 8009352:	681a      	ldr	r2, [r3, #0]
 8009354:	4b2e      	ldr	r3, [pc, #184]	; (8009410 <HAL_RCC_OscConfig+0x79c>)
 8009356:	2180      	movs	r1, #128	; 0x80
 8009358:	0449      	lsls	r1, r1, #17
 800935a:	430a      	orrs	r2, r1
 800935c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800935e:	f7fb fd2e 	bl	8004dbe <HAL_GetTick>
 8009362:	0003      	movs	r3, r0
 8009364:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8009366:	e008      	b.n	800937a <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009368:	f7fb fd29 	bl	8004dbe <HAL_GetTick>
 800936c:	0002      	movs	r2, r0
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	1ad3      	subs	r3, r2, r3
 8009372:	2b02      	cmp	r3, #2
 8009374:	d901      	bls.n	800937a <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8009376:	2303      	movs	r3, #3
 8009378:	e045      	b.n	8009406 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800937a:	4b25      	ldr	r3, [pc, #148]	; (8009410 <HAL_RCC_OscConfig+0x79c>)
 800937c:	681a      	ldr	r2, [r3, #0]
 800937e:	2380      	movs	r3, #128	; 0x80
 8009380:	049b      	lsls	r3, r3, #18
 8009382:	4013      	ands	r3, r2
 8009384:	d0f0      	beq.n	8009368 <HAL_RCC_OscConfig+0x6f4>
 8009386:	e03d      	b.n	8009404 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009388:	4b21      	ldr	r3, [pc, #132]	; (8009410 <HAL_RCC_OscConfig+0x79c>)
 800938a:	681a      	ldr	r2, [r3, #0]
 800938c:	4b20      	ldr	r3, [pc, #128]	; (8009410 <HAL_RCC_OscConfig+0x79c>)
 800938e:	4922      	ldr	r1, [pc, #136]	; (8009418 <HAL_RCC_OscConfig+0x7a4>)
 8009390:	400a      	ands	r2, r1
 8009392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009394:	f7fb fd13 	bl	8004dbe <HAL_GetTick>
 8009398:	0003      	movs	r3, r0
 800939a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800939c:	e008      	b.n	80093b0 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800939e:	f7fb fd0e 	bl	8004dbe <HAL_GetTick>
 80093a2:	0002      	movs	r2, r0
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	1ad3      	subs	r3, r2, r3
 80093a8:	2b02      	cmp	r3, #2
 80093aa:	d901      	bls.n	80093b0 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80093ac:	2303      	movs	r3, #3
 80093ae:	e02a      	b.n	8009406 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80093b0:	4b17      	ldr	r3, [pc, #92]	; (8009410 <HAL_RCC_OscConfig+0x79c>)
 80093b2:	681a      	ldr	r2, [r3, #0]
 80093b4:	2380      	movs	r3, #128	; 0x80
 80093b6:	049b      	lsls	r3, r3, #18
 80093b8:	4013      	ands	r3, r2
 80093ba:	d1f0      	bne.n	800939e <HAL_RCC_OscConfig+0x72a>
 80093bc:	e022      	b.n	8009404 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093c2:	2b01      	cmp	r3, #1
 80093c4:	d101      	bne.n	80093ca <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80093c6:	2301      	movs	r3, #1
 80093c8:	e01d      	b.n	8009406 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80093ca:	4b11      	ldr	r3, [pc, #68]	; (8009410 <HAL_RCC_OscConfig+0x79c>)
 80093cc:	68db      	ldr	r3, [r3, #12]
 80093ce:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80093d0:	69ba      	ldr	r2, [r7, #24]
 80093d2:	2380      	movs	r3, #128	; 0x80
 80093d4:	025b      	lsls	r3, r3, #9
 80093d6:	401a      	ands	r2, r3
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093dc:	429a      	cmp	r2, r3
 80093de:	d10f      	bne.n	8009400 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80093e0:	69ba      	ldr	r2, [r7, #24]
 80093e2:	23f0      	movs	r3, #240	; 0xf0
 80093e4:	039b      	lsls	r3, r3, #14
 80093e6:	401a      	ands	r2, r3
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80093ec:	429a      	cmp	r2, r3
 80093ee:	d107      	bne.n	8009400 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80093f0:	69ba      	ldr	r2, [r7, #24]
 80093f2:	23c0      	movs	r3, #192	; 0xc0
 80093f4:	041b      	lsls	r3, r3, #16
 80093f6:	401a      	ands	r2, r3
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80093fc:	429a      	cmp	r2, r3
 80093fe:	d001      	beq.n	8009404 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8009400:	2301      	movs	r3, #1
 8009402:	e000      	b.n	8009406 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8009404:	2300      	movs	r3, #0
}
 8009406:	0018      	movs	r0, r3
 8009408:	46bd      	mov	sp, r7
 800940a:	b00a      	add	sp, #40	; 0x28
 800940c:	bdb0      	pop	{r4, r5, r7, pc}
 800940e:	46c0      	nop			; (mov r8, r8)
 8009410:	40021000 	.word	0x40021000
 8009414:	ff02ffff 	.word	0xff02ffff
 8009418:	feffffff 	.word	0xfeffffff

0800941c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800941c:	b5b0      	push	{r4, r5, r7, lr}
 800941e:	b084      	sub	sp, #16
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
 8009424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d101      	bne.n	8009430 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800942c:	2301      	movs	r3, #1
 800942e:	e128      	b.n	8009682 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009430:	4b96      	ldr	r3, [pc, #600]	; (800968c <HAL_RCC_ClockConfig+0x270>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	2201      	movs	r2, #1
 8009436:	4013      	ands	r3, r2
 8009438:	683a      	ldr	r2, [r7, #0]
 800943a:	429a      	cmp	r2, r3
 800943c:	d91e      	bls.n	800947c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800943e:	4b93      	ldr	r3, [pc, #588]	; (800968c <HAL_RCC_ClockConfig+0x270>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	2201      	movs	r2, #1
 8009444:	4393      	bics	r3, r2
 8009446:	0019      	movs	r1, r3
 8009448:	4b90      	ldr	r3, [pc, #576]	; (800968c <HAL_RCC_ClockConfig+0x270>)
 800944a:	683a      	ldr	r2, [r7, #0]
 800944c:	430a      	orrs	r2, r1
 800944e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009450:	f7fb fcb5 	bl	8004dbe <HAL_GetTick>
 8009454:	0003      	movs	r3, r0
 8009456:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009458:	e009      	b.n	800946e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800945a:	f7fb fcb0 	bl	8004dbe <HAL_GetTick>
 800945e:	0002      	movs	r2, r0
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	1ad3      	subs	r3, r2, r3
 8009464:	4a8a      	ldr	r2, [pc, #552]	; (8009690 <HAL_RCC_ClockConfig+0x274>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d901      	bls.n	800946e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800946a:	2303      	movs	r3, #3
 800946c:	e109      	b.n	8009682 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800946e:	4b87      	ldr	r3, [pc, #540]	; (800968c <HAL_RCC_ClockConfig+0x270>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	2201      	movs	r2, #1
 8009474:	4013      	ands	r3, r2
 8009476:	683a      	ldr	r2, [r7, #0]
 8009478:	429a      	cmp	r2, r3
 800947a:	d1ee      	bne.n	800945a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	2202      	movs	r2, #2
 8009482:	4013      	ands	r3, r2
 8009484:	d009      	beq.n	800949a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009486:	4b83      	ldr	r3, [pc, #524]	; (8009694 <HAL_RCC_ClockConfig+0x278>)
 8009488:	68db      	ldr	r3, [r3, #12]
 800948a:	22f0      	movs	r2, #240	; 0xf0
 800948c:	4393      	bics	r3, r2
 800948e:	0019      	movs	r1, r3
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	689a      	ldr	r2, [r3, #8]
 8009494:	4b7f      	ldr	r3, [pc, #508]	; (8009694 <HAL_RCC_ClockConfig+0x278>)
 8009496:	430a      	orrs	r2, r1
 8009498:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	2201      	movs	r2, #1
 80094a0:	4013      	ands	r3, r2
 80094a2:	d100      	bne.n	80094a6 <HAL_RCC_ClockConfig+0x8a>
 80094a4:	e089      	b.n	80095ba <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	685b      	ldr	r3, [r3, #4]
 80094aa:	2b02      	cmp	r3, #2
 80094ac:	d107      	bne.n	80094be <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80094ae:	4b79      	ldr	r3, [pc, #484]	; (8009694 <HAL_RCC_ClockConfig+0x278>)
 80094b0:	681a      	ldr	r2, [r3, #0]
 80094b2:	2380      	movs	r3, #128	; 0x80
 80094b4:	029b      	lsls	r3, r3, #10
 80094b6:	4013      	ands	r3, r2
 80094b8:	d120      	bne.n	80094fc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80094ba:	2301      	movs	r3, #1
 80094bc:	e0e1      	b.n	8009682 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	685b      	ldr	r3, [r3, #4]
 80094c2:	2b03      	cmp	r3, #3
 80094c4:	d107      	bne.n	80094d6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80094c6:	4b73      	ldr	r3, [pc, #460]	; (8009694 <HAL_RCC_ClockConfig+0x278>)
 80094c8:	681a      	ldr	r2, [r3, #0]
 80094ca:	2380      	movs	r3, #128	; 0x80
 80094cc:	049b      	lsls	r3, r3, #18
 80094ce:	4013      	ands	r3, r2
 80094d0:	d114      	bne.n	80094fc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80094d2:	2301      	movs	r3, #1
 80094d4:	e0d5      	b.n	8009682 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	685b      	ldr	r3, [r3, #4]
 80094da:	2b01      	cmp	r3, #1
 80094dc:	d106      	bne.n	80094ec <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80094de:	4b6d      	ldr	r3, [pc, #436]	; (8009694 <HAL_RCC_ClockConfig+0x278>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	2204      	movs	r2, #4
 80094e4:	4013      	ands	r3, r2
 80094e6:	d109      	bne.n	80094fc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80094e8:	2301      	movs	r3, #1
 80094ea:	e0ca      	b.n	8009682 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80094ec:	4b69      	ldr	r3, [pc, #420]	; (8009694 <HAL_RCC_ClockConfig+0x278>)
 80094ee:	681a      	ldr	r2, [r3, #0]
 80094f0:	2380      	movs	r3, #128	; 0x80
 80094f2:	009b      	lsls	r3, r3, #2
 80094f4:	4013      	ands	r3, r2
 80094f6:	d101      	bne.n	80094fc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80094f8:	2301      	movs	r3, #1
 80094fa:	e0c2      	b.n	8009682 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80094fc:	4b65      	ldr	r3, [pc, #404]	; (8009694 <HAL_RCC_ClockConfig+0x278>)
 80094fe:	68db      	ldr	r3, [r3, #12]
 8009500:	2203      	movs	r2, #3
 8009502:	4393      	bics	r3, r2
 8009504:	0019      	movs	r1, r3
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	685a      	ldr	r2, [r3, #4]
 800950a:	4b62      	ldr	r3, [pc, #392]	; (8009694 <HAL_RCC_ClockConfig+0x278>)
 800950c:	430a      	orrs	r2, r1
 800950e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009510:	f7fb fc55 	bl	8004dbe <HAL_GetTick>
 8009514:	0003      	movs	r3, r0
 8009516:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	685b      	ldr	r3, [r3, #4]
 800951c:	2b02      	cmp	r3, #2
 800951e:	d111      	bne.n	8009544 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009520:	e009      	b.n	8009536 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009522:	f7fb fc4c 	bl	8004dbe <HAL_GetTick>
 8009526:	0002      	movs	r2, r0
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	1ad3      	subs	r3, r2, r3
 800952c:	4a58      	ldr	r2, [pc, #352]	; (8009690 <HAL_RCC_ClockConfig+0x274>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d901      	bls.n	8009536 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8009532:	2303      	movs	r3, #3
 8009534:	e0a5      	b.n	8009682 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009536:	4b57      	ldr	r3, [pc, #348]	; (8009694 <HAL_RCC_ClockConfig+0x278>)
 8009538:	68db      	ldr	r3, [r3, #12]
 800953a:	220c      	movs	r2, #12
 800953c:	4013      	ands	r3, r2
 800953e:	2b08      	cmp	r3, #8
 8009540:	d1ef      	bne.n	8009522 <HAL_RCC_ClockConfig+0x106>
 8009542:	e03a      	b.n	80095ba <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	685b      	ldr	r3, [r3, #4]
 8009548:	2b03      	cmp	r3, #3
 800954a:	d111      	bne.n	8009570 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800954c:	e009      	b.n	8009562 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800954e:	f7fb fc36 	bl	8004dbe <HAL_GetTick>
 8009552:	0002      	movs	r2, r0
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	1ad3      	subs	r3, r2, r3
 8009558:	4a4d      	ldr	r2, [pc, #308]	; (8009690 <HAL_RCC_ClockConfig+0x274>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d901      	bls.n	8009562 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800955e:	2303      	movs	r3, #3
 8009560:	e08f      	b.n	8009682 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009562:	4b4c      	ldr	r3, [pc, #304]	; (8009694 <HAL_RCC_ClockConfig+0x278>)
 8009564:	68db      	ldr	r3, [r3, #12]
 8009566:	220c      	movs	r2, #12
 8009568:	4013      	ands	r3, r2
 800956a:	2b0c      	cmp	r3, #12
 800956c:	d1ef      	bne.n	800954e <HAL_RCC_ClockConfig+0x132>
 800956e:	e024      	b.n	80095ba <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	2b01      	cmp	r3, #1
 8009576:	d11b      	bne.n	80095b0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8009578:	e009      	b.n	800958e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800957a:	f7fb fc20 	bl	8004dbe <HAL_GetTick>
 800957e:	0002      	movs	r2, r0
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	1ad3      	subs	r3, r2, r3
 8009584:	4a42      	ldr	r2, [pc, #264]	; (8009690 <HAL_RCC_ClockConfig+0x274>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d901      	bls.n	800958e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800958a:	2303      	movs	r3, #3
 800958c:	e079      	b.n	8009682 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800958e:	4b41      	ldr	r3, [pc, #260]	; (8009694 <HAL_RCC_ClockConfig+0x278>)
 8009590:	68db      	ldr	r3, [r3, #12]
 8009592:	220c      	movs	r2, #12
 8009594:	4013      	ands	r3, r2
 8009596:	2b04      	cmp	r3, #4
 8009598:	d1ef      	bne.n	800957a <HAL_RCC_ClockConfig+0x15e>
 800959a:	e00e      	b.n	80095ba <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800959c:	f7fb fc0f 	bl	8004dbe <HAL_GetTick>
 80095a0:	0002      	movs	r2, r0
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	1ad3      	subs	r3, r2, r3
 80095a6:	4a3a      	ldr	r2, [pc, #232]	; (8009690 <HAL_RCC_ClockConfig+0x274>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d901      	bls.n	80095b0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80095ac:	2303      	movs	r3, #3
 80095ae:	e068      	b.n	8009682 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80095b0:	4b38      	ldr	r3, [pc, #224]	; (8009694 <HAL_RCC_ClockConfig+0x278>)
 80095b2:	68db      	ldr	r3, [r3, #12]
 80095b4:	220c      	movs	r2, #12
 80095b6:	4013      	ands	r3, r2
 80095b8:	d1f0      	bne.n	800959c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80095ba:	4b34      	ldr	r3, [pc, #208]	; (800968c <HAL_RCC_ClockConfig+0x270>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	2201      	movs	r2, #1
 80095c0:	4013      	ands	r3, r2
 80095c2:	683a      	ldr	r2, [r7, #0]
 80095c4:	429a      	cmp	r2, r3
 80095c6:	d21e      	bcs.n	8009606 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80095c8:	4b30      	ldr	r3, [pc, #192]	; (800968c <HAL_RCC_ClockConfig+0x270>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	2201      	movs	r2, #1
 80095ce:	4393      	bics	r3, r2
 80095d0:	0019      	movs	r1, r3
 80095d2:	4b2e      	ldr	r3, [pc, #184]	; (800968c <HAL_RCC_ClockConfig+0x270>)
 80095d4:	683a      	ldr	r2, [r7, #0]
 80095d6:	430a      	orrs	r2, r1
 80095d8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80095da:	f7fb fbf0 	bl	8004dbe <HAL_GetTick>
 80095de:	0003      	movs	r3, r0
 80095e0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80095e2:	e009      	b.n	80095f8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80095e4:	f7fb fbeb 	bl	8004dbe <HAL_GetTick>
 80095e8:	0002      	movs	r2, r0
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	1ad3      	subs	r3, r2, r3
 80095ee:	4a28      	ldr	r2, [pc, #160]	; (8009690 <HAL_RCC_ClockConfig+0x274>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d901      	bls.n	80095f8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80095f4:	2303      	movs	r3, #3
 80095f6:	e044      	b.n	8009682 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80095f8:	4b24      	ldr	r3, [pc, #144]	; (800968c <HAL_RCC_ClockConfig+0x270>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	2201      	movs	r2, #1
 80095fe:	4013      	ands	r3, r2
 8009600:	683a      	ldr	r2, [r7, #0]
 8009602:	429a      	cmp	r2, r3
 8009604:	d1ee      	bne.n	80095e4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	2204      	movs	r2, #4
 800960c:	4013      	ands	r3, r2
 800960e:	d009      	beq.n	8009624 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009610:	4b20      	ldr	r3, [pc, #128]	; (8009694 <HAL_RCC_ClockConfig+0x278>)
 8009612:	68db      	ldr	r3, [r3, #12]
 8009614:	4a20      	ldr	r2, [pc, #128]	; (8009698 <HAL_RCC_ClockConfig+0x27c>)
 8009616:	4013      	ands	r3, r2
 8009618:	0019      	movs	r1, r3
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	68da      	ldr	r2, [r3, #12]
 800961e:	4b1d      	ldr	r3, [pc, #116]	; (8009694 <HAL_RCC_ClockConfig+0x278>)
 8009620:	430a      	orrs	r2, r1
 8009622:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	2208      	movs	r2, #8
 800962a:	4013      	ands	r3, r2
 800962c:	d00a      	beq.n	8009644 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800962e:	4b19      	ldr	r3, [pc, #100]	; (8009694 <HAL_RCC_ClockConfig+0x278>)
 8009630:	68db      	ldr	r3, [r3, #12]
 8009632:	4a1a      	ldr	r2, [pc, #104]	; (800969c <HAL_RCC_ClockConfig+0x280>)
 8009634:	4013      	ands	r3, r2
 8009636:	0019      	movs	r1, r3
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	691b      	ldr	r3, [r3, #16]
 800963c:	00da      	lsls	r2, r3, #3
 800963e:	4b15      	ldr	r3, [pc, #84]	; (8009694 <HAL_RCC_ClockConfig+0x278>)
 8009640:	430a      	orrs	r2, r1
 8009642:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009644:	f000 f832 	bl	80096ac <HAL_RCC_GetSysClockFreq>
 8009648:	0001      	movs	r1, r0
 800964a:	4b12      	ldr	r3, [pc, #72]	; (8009694 <HAL_RCC_ClockConfig+0x278>)
 800964c:	68db      	ldr	r3, [r3, #12]
 800964e:	091b      	lsrs	r3, r3, #4
 8009650:	220f      	movs	r2, #15
 8009652:	4013      	ands	r3, r2
 8009654:	4a12      	ldr	r2, [pc, #72]	; (80096a0 <HAL_RCC_ClockConfig+0x284>)
 8009656:	5cd3      	ldrb	r3, [r2, r3]
 8009658:	000a      	movs	r2, r1
 800965a:	40da      	lsrs	r2, r3
 800965c:	4b11      	ldr	r3, [pc, #68]	; (80096a4 <HAL_RCC_ClockConfig+0x288>)
 800965e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8009660:	4b11      	ldr	r3, [pc, #68]	; (80096a8 <HAL_RCC_ClockConfig+0x28c>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	250b      	movs	r5, #11
 8009666:	197c      	adds	r4, r7, r5
 8009668:	0018      	movs	r0, r3
 800966a:	f7fb fb9f 	bl	8004dac <HAL_InitTick>
 800966e:	0003      	movs	r3, r0
 8009670:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8009672:	197b      	adds	r3, r7, r5
 8009674:	781b      	ldrb	r3, [r3, #0]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d002      	beq.n	8009680 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800967a:	197b      	adds	r3, r7, r5
 800967c:	781b      	ldrb	r3, [r3, #0]
 800967e:	e000      	b.n	8009682 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8009680:	2300      	movs	r3, #0
}
 8009682:	0018      	movs	r0, r3
 8009684:	46bd      	mov	sp, r7
 8009686:	b004      	add	sp, #16
 8009688:	bdb0      	pop	{r4, r5, r7, pc}
 800968a:	46c0      	nop			; (mov r8, r8)
 800968c:	40022000 	.word	0x40022000
 8009690:	00001388 	.word	0x00001388
 8009694:	40021000 	.word	0x40021000
 8009698:	fffff8ff 	.word	0xfffff8ff
 800969c:	ffffc7ff 	.word	0xffffc7ff
 80096a0:	0801f1b4 	.word	0x0801f1b4
 80096a4:	20000070 	.word	0x20000070
 80096a8:	20000074 	.word	0x20000074

080096ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80096ac:	b5b0      	push	{r4, r5, r7, lr}
 80096ae:	b08e      	sub	sp, #56	; 0x38
 80096b0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80096b2:	4b4c      	ldr	r3, [pc, #304]	; (80097e4 <HAL_RCC_GetSysClockFreq+0x138>)
 80096b4:	68db      	ldr	r3, [r3, #12]
 80096b6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80096b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096ba:	230c      	movs	r3, #12
 80096bc:	4013      	ands	r3, r2
 80096be:	2b0c      	cmp	r3, #12
 80096c0:	d014      	beq.n	80096ec <HAL_RCC_GetSysClockFreq+0x40>
 80096c2:	d900      	bls.n	80096c6 <HAL_RCC_GetSysClockFreq+0x1a>
 80096c4:	e07b      	b.n	80097be <HAL_RCC_GetSysClockFreq+0x112>
 80096c6:	2b04      	cmp	r3, #4
 80096c8:	d002      	beq.n	80096d0 <HAL_RCC_GetSysClockFreq+0x24>
 80096ca:	2b08      	cmp	r3, #8
 80096cc:	d00b      	beq.n	80096e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80096ce:	e076      	b.n	80097be <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80096d0:	4b44      	ldr	r3, [pc, #272]	; (80097e4 <HAL_RCC_GetSysClockFreq+0x138>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	2210      	movs	r2, #16
 80096d6:	4013      	ands	r3, r2
 80096d8:	d002      	beq.n	80096e0 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80096da:	4b43      	ldr	r3, [pc, #268]	; (80097e8 <HAL_RCC_GetSysClockFreq+0x13c>)
 80096dc:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80096de:	e07c      	b.n	80097da <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80096e0:	4b42      	ldr	r3, [pc, #264]	; (80097ec <HAL_RCC_GetSysClockFreq+0x140>)
 80096e2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80096e4:	e079      	b.n	80097da <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80096e6:	4b42      	ldr	r3, [pc, #264]	; (80097f0 <HAL_RCC_GetSysClockFreq+0x144>)
 80096e8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80096ea:	e076      	b.n	80097da <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80096ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ee:	0c9a      	lsrs	r2, r3, #18
 80096f0:	230f      	movs	r3, #15
 80096f2:	401a      	ands	r2, r3
 80096f4:	4b3f      	ldr	r3, [pc, #252]	; (80097f4 <HAL_RCC_GetSysClockFreq+0x148>)
 80096f6:	5c9b      	ldrb	r3, [r3, r2]
 80096f8:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80096fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096fc:	0d9a      	lsrs	r2, r3, #22
 80096fe:	2303      	movs	r3, #3
 8009700:	4013      	ands	r3, r2
 8009702:	3301      	adds	r3, #1
 8009704:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009706:	4b37      	ldr	r3, [pc, #220]	; (80097e4 <HAL_RCC_GetSysClockFreq+0x138>)
 8009708:	68da      	ldr	r2, [r3, #12]
 800970a:	2380      	movs	r3, #128	; 0x80
 800970c:	025b      	lsls	r3, r3, #9
 800970e:	4013      	ands	r3, r2
 8009710:	d01a      	beq.n	8009748 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8009712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009714:	61bb      	str	r3, [r7, #24]
 8009716:	2300      	movs	r3, #0
 8009718:	61fb      	str	r3, [r7, #28]
 800971a:	4a35      	ldr	r2, [pc, #212]	; (80097f0 <HAL_RCC_GetSysClockFreq+0x144>)
 800971c:	2300      	movs	r3, #0
 800971e:	69b8      	ldr	r0, [r7, #24]
 8009720:	69f9      	ldr	r1, [r7, #28]
 8009722:	f7f6 fef1 	bl	8000508 <__aeabi_lmul>
 8009726:	0002      	movs	r2, r0
 8009728:	000b      	movs	r3, r1
 800972a:	0010      	movs	r0, r2
 800972c:	0019      	movs	r1, r3
 800972e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009730:	613b      	str	r3, [r7, #16]
 8009732:	2300      	movs	r3, #0
 8009734:	617b      	str	r3, [r7, #20]
 8009736:	693a      	ldr	r2, [r7, #16]
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	f7f6 fec5 	bl	80004c8 <__aeabi_uldivmod>
 800973e:	0002      	movs	r2, r0
 8009740:	000b      	movs	r3, r1
 8009742:	0013      	movs	r3, r2
 8009744:	637b      	str	r3, [r7, #52]	; 0x34
 8009746:	e037      	b.n	80097b8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8009748:	4b26      	ldr	r3, [pc, #152]	; (80097e4 <HAL_RCC_GetSysClockFreq+0x138>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	2210      	movs	r2, #16
 800974e:	4013      	ands	r3, r2
 8009750:	d01a      	beq.n	8009788 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8009752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009754:	60bb      	str	r3, [r7, #8]
 8009756:	2300      	movs	r3, #0
 8009758:	60fb      	str	r3, [r7, #12]
 800975a:	4a23      	ldr	r2, [pc, #140]	; (80097e8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800975c:	2300      	movs	r3, #0
 800975e:	68b8      	ldr	r0, [r7, #8]
 8009760:	68f9      	ldr	r1, [r7, #12]
 8009762:	f7f6 fed1 	bl	8000508 <__aeabi_lmul>
 8009766:	0002      	movs	r2, r0
 8009768:	000b      	movs	r3, r1
 800976a:	0010      	movs	r0, r2
 800976c:	0019      	movs	r1, r3
 800976e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009770:	603b      	str	r3, [r7, #0]
 8009772:	2300      	movs	r3, #0
 8009774:	607b      	str	r3, [r7, #4]
 8009776:	683a      	ldr	r2, [r7, #0]
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f7f6 fea5 	bl	80004c8 <__aeabi_uldivmod>
 800977e:	0002      	movs	r2, r0
 8009780:	000b      	movs	r3, r1
 8009782:	0013      	movs	r3, r2
 8009784:	637b      	str	r3, [r7, #52]	; 0x34
 8009786:	e017      	b.n	80097b8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8009788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800978a:	0018      	movs	r0, r3
 800978c:	2300      	movs	r3, #0
 800978e:	0019      	movs	r1, r3
 8009790:	4a16      	ldr	r2, [pc, #88]	; (80097ec <HAL_RCC_GetSysClockFreq+0x140>)
 8009792:	2300      	movs	r3, #0
 8009794:	f7f6 feb8 	bl	8000508 <__aeabi_lmul>
 8009798:	0002      	movs	r2, r0
 800979a:	000b      	movs	r3, r1
 800979c:	0010      	movs	r0, r2
 800979e:	0019      	movs	r1, r3
 80097a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a2:	001c      	movs	r4, r3
 80097a4:	2300      	movs	r3, #0
 80097a6:	001d      	movs	r5, r3
 80097a8:	0022      	movs	r2, r4
 80097aa:	002b      	movs	r3, r5
 80097ac:	f7f6 fe8c 	bl	80004c8 <__aeabi_uldivmod>
 80097b0:	0002      	movs	r2, r0
 80097b2:	000b      	movs	r3, r1
 80097b4:	0013      	movs	r3, r2
 80097b6:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80097b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097ba:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80097bc:	e00d      	b.n	80097da <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80097be:	4b09      	ldr	r3, [pc, #36]	; (80097e4 <HAL_RCC_GetSysClockFreq+0x138>)
 80097c0:	685b      	ldr	r3, [r3, #4]
 80097c2:	0b5b      	lsrs	r3, r3, #13
 80097c4:	2207      	movs	r2, #7
 80097c6:	4013      	ands	r3, r2
 80097c8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80097ca:	6a3b      	ldr	r3, [r7, #32]
 80097cc:	3301      	adds	r3, #1
 80097ce:	2280      	movs	r2, #128	; 0x80
 80097d0:	0212      	lsls	r2, r2, #8
 80097d2:	409a      	lsls	r2, r3
 80097d4:	0013      	movs	r3, r2
 80097d6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80097d8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80097da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80097dc:	0018      	movs	r0, r3
 80097de:	46bd      	mov	sp, r7
 80097e0:	b00e      	add	sp, #56	; 0x38
 80097e2:	bdb0      	pop	{r4, r5, r7, pc}
 80097e4:	40021000 	.word	0x40021000
 80097e8:	003d0900 	.word	0x003d0900
 80097ec:	00f42400 	.word	0x00f42400
 80097f0:	007a1200 	.word	0x007a1200
 80097f4:	0801f1cc 	.word	0x0801f1cc

080097f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80097fc:	4b02      	ldr	r3, [pc, #8]	; (8009808 <HAL_RCC_GetHCLKFreq+0x10>)
 80097fe:	681b      	ldr	r3, [r3, #0]
}
 8009800:	0018      	movs	r0, r3
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}
 8009806:	46c0      	nop			; (mov r8, r8)
 8009808:	20000070 	.word	0x20000070

0800980c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009810:	f7ff fff2 	bl	80097f8 <HAL_RCC_GetHCLKFreq>
 8009814:	0001      	movs	r1, r0
 8009816:	4b06      	ldr	r3, [pc, #24]	; (8009830 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009818:	68db      	ldr	r3, [r3, #12]
 800981a:	0a1b      	lsrs	r3, r3, #8
 800981c:	2207      	movs	r2, #7
 800981e:	4013      	ands	r3, r2
 8009820:	4a04      	ldr	r2, [pc, #16]	; (8009834 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009822:	5cd3      	ldrb	r3, [r2, r3]
 8009824:	40d9      	lsrs	r1, r3
 8009826:	000b      	movs	r3, r1
}
 8009828:	0018      	movs	r0, r3
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}
 800982e:	46c0      	nop			; (mov r8, r8)
 8009830:	40021000 	.word	0x40021000
 8009834:	0801f1c4 	.word	0x0801f1c4

08009838 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800983c:	f7ff ffdc 	bl	80097f8 <HAL_RCC_GetHCLKFreq>
 8009840:	0001      	movs	r1, r0
 8009842:	4b06      	ldr	r3, [pc, #24]	; (800985c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009844:	68db      	ldr	r3, [r3, #12]
 8009846:	0adb      	lsrs	r3, r3, #11
 8009848:	2207      	movs	r2, #7
 800984a:	4013      	ands	r3, r2
 800984c:	4a04      	ldr	r2, [pc, #16]	; (8009860 <HAL_RCC_GetPCLK2Freq+0x28>)
 800984e:	5cd3      	ldrb	r3, [r2, r3]
 8009850:	40d9      	lsrs	r1, r3
 8009852:	000b      	movs	r3, r1
}
 8009854:	0018      	movs	r0, r3
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}
 800985a:	46c0      	nop			; (mov r8, r8)
 800985c:	40021000 	.word	0x40021000
 8009860:	0801f1c4 	.word	0x0801f1c4

08009864 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b086      	sub	sp, #24
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800986c:	2017      	movs	r0, #23
 800986e:	183b      	adds	r3, r7, r0
 8009870:	2200      	movs	r2, #0
 8009872:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	2220      	movs	r2, #32
 800987a:	4013      	ands	r3, r2
 800987c:	d100      	bne.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800987e:	e0c2      	b.n	8009a06 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009880:	4b98      	ldr	r3, [pc, #608]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009882:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009884:	2380      	movs	r3, #128	; 0x80
 8009886:	055b      	lsls	r3, r3, #21
 8009888:	4013      	ands	r3, r2
 800988a:	d109      	bne.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800988c:	4b95      	ldr	r3, [pc, #596]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800988e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009890:	4b94      	ldr	r3, [pc, #592]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009892:	2180      	movs	r1, #128	; 0x80
 8009894:	0549      	lsls	r1, r1, #21
 8009896:	430a      	orrs	r2, r1
 8009898:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800989a:	183b      	adds	r3, r7, r0
 800989c:	2201      	movs	r2, #1
 800989e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80098a0:	4b91      	ldr	r3, [pc, #580]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80098a2:	681a      	ldr	r2, [r3, #0]
 80098a4:	2380      	movs	r3, #128	; 0x80
 80098a6:	005b      	lsls	r3, r3, #1
 80098a8:	4013      	ands	r3, r2
 80098aa:	d11a      	bne.n	80098e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80098ac:	4b8e      	ldr	r3, [pc, #568]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80098ae:	681a      	ldr	r2, [r3, #0]
 80098b0:	4b8d      	ldr	r3, [pc, #564]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80098b2:	2180      	movs	r1, #128	; 0x80
 80098b4:	0049      	lsls	r1, r1, #1
 80098b6:	430a      	orrs	r2, r1
 80098b8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80098ba:	f7fb fa80 	bl	8004dbe <HAL_GetTick>
 80098be:	0003      	movs	r3, r0
 80098c0:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80098c2:	e008      	b.n	80098d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80098c4:	f7fb fa7b 	bl	8004dbe <HAL_GetTick>
 80098c8:	0002      	movs	r2, r0
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	1ad3      	subs	r3, r2, r3
 80098ce:	2b64      	cmp	r3, #100	; 0x64
 80098d0:	d901      	bls.n	80098d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80098d2:	2303      	movs	r3, #3
 80098d4:	e102      	b.n	8009adc <HAL_RCCEx_PeriphCLKConfig+0x278>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80098d6:	4b84      	ldr	r3, [pc, #528]	; (8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80098d8:	681a      	ldr	r2, [r3, #0]
 80098da:	2380      	movs	r3, #128	; 0x80
 80098dc:	005b      	lsls	r3, r3, #1
 80098de:	4013      	ands	r3, r2
 80098e0:	d0f0      	beq.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80098e2:	4b80      	ldr	r3, [pc, #512]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80098e4:	681a      	ldr	r2, [r3, #0]
 80098e6:	23c0      	movs	r3, #192	; 0xc0
 80098e8:	039b      	lsls	r3, r3, #14
 80098ea:	4013      	ands	r3, r2
 80098ec:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	685a      	ldr	r2, [r3, #4]
 80098f2:	23c0      	movs	r3, #192	; 0xc0
 80098f4:	039b      	lsls	r3, r3, #14
 80098f6:	4013      	ands	r3, r2
 80098f8:	68fa      	ldr	r2, [r7, #12]
 80098fa:	429a      	cmp	r2, r3
 80098fc:	d013      	beq.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	685a      	ldr	r2, [r3, #4]
 8009902:	23c0      	movs	r3, #192	; 0xc0
 8009904:	029b      	lsls	r3, r3, #10
 8009906:	401a      	ands	r2, r3
 8009908:	23c0      	movs	r3, #192	; 0xc0
 800990a:	029b      	lsls	r3, r3, #10
 800990c:	429a      	cmp	r2, r3
 800990e:	d10a      	bne.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009910:	4b74      	ldr	r3, [pc, #464]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009912:	681a      	ldr	r2, [r3, #0]
 8009914:	2380      	movs	r3, #128	; 0x80
 8009916:	029b      	lsls	r3, r3, #10
 8009918:	401a      	ands	r2, r3
 800991a:	2380      	movs	r3, #128	; 0x80
 800991c:	029b      	lsls	r3, r3, #10
 800991e:	429a      	cmp	r2, r3
 8009920:	d101      	bne.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8009922:	2301      	movs	r3, #1
 8009924:	e0da      	b.n	8009adc <HAL_RCCEx_PeriphCLKConfig+0x278>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8009926:	4b6f      	ldr	r3, [pc, #444]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009928:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800992a:	23c0      	movs	r3, #192	; 0xc0
 800992c:	029b      	lsls	r3, r3, #10
 800992e:	4013      	ands	r3, r2
 8009930:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d03b      	beq.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	685a      	ldr	r2, [r3, #4]
 800993c:	23c0      	movs	r3, #192	; 0xc0
 800993e:	029b      	lsls	r3, r3, #10
 8009940:	4013      	ands	r3, r2
 8009942:	68fa      	ldr	r2, [r7, #12]
 8009944:	429a      	cmp	r2, r3
 8009946:	d033      	beq.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	2220      	movs	r2, #32
 800994e:	4013      	ands	r3, r2
 8009950:	d02e      	beq.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8009952:	4b64      	ldr	r3, [pc, #400]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009956:	4a65      	ldr	r2, [pc, #404]	; (8009aec <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8009958:	4013      	ands	r3, r2
 800995a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800995c:	4b61      	ldr	r3, [pc, #388]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800995e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009960:	4b60      	ldr	r3, [pc, #384]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009962:	2180      	movs	r1, #128	; 0x80
 8009964:	0309      	lsls	r1, r1, #12
 8009966:	430a      	orrs	r2, r1
 8009968:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800996a:	4b5e      	ldr	r3, [pc, #376]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800996c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800996e:	4b5d      	ldr	r3, [pc, #372]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009970:	495f      	ldr	r1, [pc, #380]	; (8009af0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8009972:	400a      	ands	r2, r1
 8009974:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8009976:	4b5b      	ldr	r3, [pc, #364]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009978:	68fa      	ldr	r2, [r7, #12]
 800997a:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800997c:	68fa      	ldr	r2, [r7, #12]
 800997e:	2380      	movs	r3, #128	; 0x80
 8009980:	005b      	lsls	r3, r3, #1
 8009982:	4013      	ands	r3, r2
 8009984:	d014      	beq.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009986:	f7fb fa1a 	bl	8004dbe <HAL_GetTick>
 800998a:	0003      	movs	r3, r0
 800998c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800998e:	e009      	b.n	80099a4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009990:	f7fb fa15 	bl	8004dbe <HAL_GetTick>
 8009994:	0002      	movs	r2, r0
 8009996:	693b      	ldr	r3, [r7, #16]
 8009998:	1ad3      	subs	r3, r2, r3
 800999a:	4a56      	ldr	r2, [pc, #344]	; (8009af4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d901      	bls.n	80099a4 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80099a0:	2303      	movs	r3, #3
 80099a2:	e09b      	b.n	8009adc <HAL_RCCEx_PeriphCLKConfig+0x278>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80099a4:	4b4f      	ldr	r3, [pc, #316]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80099a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80099a8:	2380      	movs	r3, #128	; 0x80
 80099aa:	009b      	lsls	r3, r3, #2
 80099ac:	4013      	ands	r3, r2
 80099ae:	d0ef      	beq.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	685a      	ldr	r2, [r3, #4]
 80099b4:	23c0      	movs	r3, #192	; 0xc0
 80099b6:	029b      	lsls	r3, r3, #10
 80099b8:	401a      	ands	r2, r3
 80099ba:	23c0      	movs	r3, #192	; 0xc0
 80099bc:	029b      	lsls	r3, r3, #10
 80099be:	429a      	cmp	r2, r3
 80099c0:	d10c      	bne.n	80099dc <HAL_RCCEx_PeriphCLKConfig+0x178>
 80099c2:	4b48      	ldr	r3, [pc, #288]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	4a4c      	ldr	r2, [pc, #304]	; (8009af8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80099c8:	4013      	ands	r3, r2
 80099ca:	0019      	movs	r1, r3
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	685a      	ldr	r2, [r3, #4]
 80099d0:	23c0      	movs	r3, #192	; 0xc0
 80099d2:	039b      	lsls	r3, r3, #14
 80099d4:	401a      	ands	r2, r3
 80099d6:	4b43      	ldr	r3, [pc, #268]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80099d8:	430a      	orrs	r2, r1
 80099da:	601a      	str	r2, [r3, #0]
 80099dc:	4b41      	ldr	r3, [pc, #260]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80099de:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	685a      	ldr	r2, [r3, #4]
 80099e4:	23c0      	movs	r3, #192	; 0xc0
 80099e6:	029b      	lsls	r3, r3, #10
 80099e8:	401a      	ands	r2, r3
 80099ea:	4b3e      	ldr	r3, [pc, #248]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80099ec:	430a      	orrs	r2, r1
 80099ee:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80099f0:	2317      	movs	r3, #23
 80099f2:	18fb      	adds	r3, r7, r3
 80099f4:	781b      	ldrb	r3, [r3, #0]
 80099f6:	2b01      	cmp	r3, #1
 80099f8:	d105      	bne.n	8009a06 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80099fa:	4b3a      	ldr	r3, [pc, #232]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80099fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099fe:	4b39      	ldr	r3, [pc, #228]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a00:	493e      	ldr	r1, [pc, #248]	; (8009afc <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8009a02:	400a      	ands	r2, r1
 8009a04:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	4013      	ands	r3, r2
 8009a0e:	d009      	beq.n	8009a24 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009a10:	4b34      	ldr	r3, [pc, #208]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a14:	2203      	movs	r2, #3
 8009a16:	4393      	bics	r3, r2
 8009a18:	0019      	movs	r1, r3
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	689a      	ldr	r2, [r3, #8]
 8009a1e:	4b31      	ldr	r3, [pc, #196]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a20:	430a      	orrs	r2, r1
 8009a22:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	2202      	movs	r2, #2
 8009a2a:	4013      	ands	r3, r2
 8009a2c:	d009      	beq.n	8009a42 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009a2e:	4b2d      	ldr	r3, [pc, #180]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a32:	220c      	movs	r2, #12
 8009a34:	4393      	bics	r3, r2
 8009a36:	0019      	movs	r1, r3
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	68da      	ldr	r2, [r3, #12]
 8009a3c:	4b29      	ldr	r3, [pc, #164]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a3e:	430a      	orrs	r2, r1
 8009a40:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	2204      	movs	r2, #4
 8009a48:	4013      	ands	r3, r2
 8009a4a:	d009      	beq.n	8009a60 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009a4c:	4b25      	ldr	r3, [pc, #148]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a50:	4a2b      	ldr	r2, [pc, #172]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8009a52:	4013      	ands	r3, r2
 8009a54:	0019      	movs	r1, r3
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	691a      	ldr	r2, [r3, #16]
 8009a5a:	4b22      	ldr	r3, [pc, #136]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a5c:	430a      	orrs	r2, r1
 8009a5e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	2208      	movs	r2, #8
 8009a66:	4013      	ands	r3, r2
 8009a68:	d009      	beq.n	8009a7e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009a6a:	4b1e      	ldr	r3, [pc, #120]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a6e:	4a25      	ldr	r2, [pc, #148]	; (8009b04 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8009a70:	4013      	ands	r3, r2
 8009a72:	0019      	movs	r1, r3
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	695a      	ldr	r2, [r3, #20]
 8009a78:	4b1a      	ldr	r3, [pc, #104]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a7a:	430a      	orrs	r2, r1
 8009a7c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681a      	ldr	r2, [r3, #0]
 8009a82:	2380      	movs	r3, #128	; 0x80
 8009a84:	005b      	lsls	r3, r3, #1
 8009a86:	4013      	ands	r3, r2
 8009a88:	d009      	beq.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009a8a:	4b16      	ldr	r3, [pc, #88]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a8e:	4a17      	ldr	r2, [pc, #92]	; (8009aec <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8009a90:	4013      	ands	r3, r2
 8009a92:	0019      	movs	r1, r3
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	699a      	ldr	r2, [r3, #24]
 8009a98:	4b12      	ldr	r3, [pc, #72]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a9a:	430a      	orrs	r2, r1
 8009a9c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	2240      	movs	r2, #64	; 0x40
 8009aa4:	4013      	ands	r3, r2
 8009aa6:	d009      	beq.n	8009abc <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009aa8:	4b0e      	ldr	r3, [pc, #56]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009aaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009aac:	4a16      	ldr	r2, [pc, #88]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8009aae:	4013      	ands	r3, r2
 8009ab0:	0019      	movs	r1, r3
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6a1a      	ldr	r2, [r3, #32]
 8009ab6:	4b0b      	ldr	r3, [pc, #44]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009ab8:	430a      	orrs	r2, r1
 8009aba:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	2280      	movs	r2, #128	; 0x80
 8009ac2:	4013      	ands	r3, r2
 8009ac4:	d009      	beq.n	8009ada <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8009ac6:	4b07      	ldr	r3, [pc, #28]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009aca:	4a10      	ldr	r2, [pc, #64]	; (8009b0c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8009acc:	4013      	ands	r3, r2
 8009ace:	0019      	movs	r1, r3
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	69da      	ldr	r2, [r3, #28]
 8009ad4:	4b03      	ldr	r3, [pc, #12]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009ad6:	430a      	orrs	r2, r1
 8009ad8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009ada:	2300      	movs	r3, #0
}
 8009adc:	0018      	movs	r0, r3
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	b006      	add	sp, #24
 8009ae2:	bd80      	pop	{r7, pc}
 8009ae4:	40021000 	.word	0x40021000
 8009ae8:	40007000 	.word	0x40007000
 8009aec:	fffcffff 	.word	0xfffcffff
 8009af0:	fff7ffff 	.word	0xfff7ffff
 8009af4:	00001388 	.word	0x00001388
 8009af8:	ffcfffff 	.word	0xffcfffff
 8009afc:	efffffff 	.word	0xefffffff
 8009b00:	fffff3ff 	.word	0xfffff3ff
 8009b04:	ffffcfff 	.word	0xffffcfff
 8009b08:	fbffffff 	.word	0xfbffffff
 8009b0c:	fff3ffff 	.word	0xfff3ffff

08009b10 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b082      	sub	sp, #8
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d101      	bne.n	8009b22 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8009b1e:	2301      	movs	r3, #1
 8009b20:	e08e      	b.n	8009c40 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2221      	movs	r2, #33	; 0x21
 8009b26:	5c9b      	ldrb	r3, [r3, r2]
 8009b28:	b2db      	uxtb	r3, r3
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d107      	bne.n	8009b3e <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2220      	movs	r2, #32
 8009b32:	2100      	movs	r1, #0
 8009b34:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	0018      	movs	r0, r3
 8009b3a:	f7f9 ffa3 	bl	8003a84 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2221      	movs	r2, #33	; 0x21
 8009b42:	2102      	movs	r1, #2
 8009b44:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	22ca      	movs	r2, #202	; 0xca
 8009b4c:	625a      	str	r2, [r3, #36]	; 0x24
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	2253      	movs	r2, #83	; 0x53
 8009b54:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	0018      	movs	r0, r3
 8009b5a:	f000 fcf4 	bl	800a546 <RTC_EnterInitMode>
 8009b5e:	1e03      	subs	r3, r0, #0
 8009b60:	d009      	beq.n	8009b76 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	22ff      	movs	r2, #255	; 0xff
 8009b68:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2221      	movs	r2, #33	; 0x21
 8009b6e:	2104      	movs	r1, #4
 8009b70:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8009b72:	2301      	movs	r3, #1
 8009b74:	e064      	b.n	8009c40 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	689a      	ldr	r2, [r3, #8]
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	4931      	ldr	r1, [pc, #196]	; (8009c48 <HAL_RTC_Init+0x138>)
 8009b82:	400a      	ands	r2, r1
 8009b84:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	6899      	ldr	r1, [r3, #8]
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	685a      	ldr	r2, [r3, #4]
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	691b      	ldr	r3, [r3, #16]
 8009b94:	431a      	orrs	r2, r3
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	699b      	ldr	r3, [r3, #24]
 8009b9a:	431a      	orrs	r2, r3
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	430a      	orrs	r2, r1
 8009ba2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	687a      	ldr	r2, [r7, #4]
 8009baa:	68d2      	ldr	r2, [r2, #12]
 8009bac:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	6919      	ldr	r1, [r3, #16]
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	689b      	ldr	r3, [r3, #8]
 8009bb8:	041a      	lsls	r2, r3, #16
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	430a      	orrs	r2, r1
 8009bc0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	68da      	ldr	r2, [r3, #12]
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	2180      	movs	r1, #128	; 0x80
 8009bce:	438a      	bics	r2, r1
 8009bd0:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	2103      	movs	r1, #3
 8009bde:	438a      	bics	r2, r1
 8009be0:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	69da      	ldr	r2, [r3, #28]
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	695b      	ldr	r3, [r3, #20]
 8009bf0:	431a      	orrs	r2, r3
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	430a      	orrs	r2, r1
 8009bf8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	689b      	ldr	r3, [r3, #8]
 8009c00:	2220      	movs	r2, #32
 8009c02:	4013      	ands	r3, r2
 8009c04:	d113      	bne.n	8009c2e <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	0018      	movs	r0, r3
 8009c0a:	f000 fc75 	bl	800a4f8 <HAL_RTC_WaitForSynchro>
 8009c0e:	1e03      	subs	r3, r0, #0
 8009c10:	d00d      	beq.n	8009c2e <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	22ff      	movs	r2, #255	; 0xff
 8009c18:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2221      	movs	r2, #33	; 0x21
 8009c1e:	2104      	movs	r1, #4
 8009c20:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2220      	movs	r2, #32
 8009c26:	2100      	movs	r1, #0
 8009c28:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	e008      	b.n	8009c40 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	22ff      	movs	r2, #255	; 0xff
 8009c34:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2221      	movs	r2, #33	; 0x21
 8009c3a:	2101      	movs	r1, #1
 8009c3c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009c3e:	2300      	movs	r3, #0
  }
}
 8009c40:	0018      	movs	r0, r3
 8009c42:	46bd      	mov	sp, r7
 8009c44:	b002      	add	sp, #8
 8009c46:	bd80      	pop	{r7, pc}
 8009c48:	ff8fffbf 	.word	0xff8fffbf

08009c4c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009c4c:	b590      	push	{r4, r7, lr}
 8009c4e:	b087      	sub	sp, #28
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	60f8      	str	r0, [r7, #12]
 8009c54:	60b9      	str	r1, [r7, #8]
 8009c56:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	2220      	movs	r2, #32
 8009c5c:	5c9b      	ldrb	r3, [r3, r2]
 8009c5e:	2b01      	cmp	r3, #1
 8009c60:	d101      	bne.n	8009c66 <HAL_RTC_SetTime+0x1a>
 8009c62:	2302      	movs	r3, #2
 8009c64:	e0ad      	b.n	8009dc2 <HAL_RTC_SetTime+0x176>
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	2220      	movs	r2, #32
 8009c6a:	2101      	movs	r1, #1
 8009c6c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	2221      	movs	r2, #33	; 0x21
 8009c72:	2102      	movs	r1, #2
 8009c74:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d125      	bne.n	8009cc8 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	689b      	ldr	r3, [r3, #8]
 8009c82:	2240      	movs	r2, #64	; 0x40
 8009c84:	4013      	ands	r3, r2
 8009c86:	d102      	bne.n	8009c8e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	781b      	ldrb	r3, [r3, #0]
 8009c92:	0018      	movs	r0, r3
 8009c94:	f000 fc81 	bl	800a59a <RTC_ByteToBcd2>
 8009c98:	0003      	movs	r3, r0
 8009c9a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	785b      	ldrb	r3, [r3, #1]
 8009ca0:	0018      	movs	r0, r3
 8009ca2:	f000 fc7a 	bl	800a59a <RTC_ByteToBcd2>
 8009ca6:	0003      	movs	r3, r0
 8009ca8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009caa:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	789b      	ldrb	r3, [r3, #2]
 8009cb0:	0018      	movs	r0, r3
 8009cb2:	f000 fc72 	bl	800a59a <RTC_ByteToBcd2>
 8009cb6:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8009cb8:	0022      	movs	r2, r4
 8009cba:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	78db      	ldrb	r3, [r3, #3]
 8009cc0:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009cc2:	4313      	orrs	r3, r2
 8009cc4:	617b      	str	r3, [r7, #20]
 8009cc6:	e017      	b.n	8009cf8 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	689b      	ldr	r3, [r3, #8]
 8009cce:	2240      	movs	r2, #64	; 0x40
 8009cd0:	4013      	ands	r3, r2
 8009cd2:	d102      	bne.n	8009cda <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	781b      	ldrb	r3, [r3, #0]
 8009cde:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	785b      	ldrb	r3, [r3, #1]
 8009ce4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009ce6:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8009ce8:	68ba      	ldr	r2, [r7, #8]
 8009cea:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8009cec:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	78db      	ldrb	r3, [r3, #3]
 8009cf2:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009cf4:	4313      	orrs	r3, r2
 8009cf6:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	22ca      	movs	r2, #202	; 0xca
 8009cfe:	625a      	str	r2, [r3, #36]	; 0x24
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	2253      	movs	r2, #83	; 0x53
 8009d06:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	0018      	movs	r0, r3
 8009d0c:	f000 fc1b 	bl	800a546 <RTC_EnterInitMode>
 8009d10:	1e03      	subs	r3, r0, #0
 8009d12:	d00d      	beq.n	8009d30 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	22ff      	movs	r2, #255	; 0xff
 8009d1a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	2221      	movs	r2, #33	; 0x21
 8009d20:	2104      	movs	r1, #4
 8009d22:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	2220      	movs	r2, #32
 8009d28:	2100      	movs	r1, #0
 8009d2a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	e048      	b.n	8009dc2 <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	697a      	ldr	r2, [r7, #20]
 8009d36:	4925      	ldr	r1, [pc, #148]	; (8009dcc <HAL_RTC_SetTime+0x180>)
 8009d38:	400a      	ands	r2, r1
 8009d3a:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	689a      	ldr	r2, [r3, #8]
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	4922      	ldr	r1, [pc, #136]	; (8009dd0 <HAL_RTC_SetTime+0x184>)
 8009d48:	400a      	ands	r2, r1
 8009d4a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	6899      	ldr	r1, [r3, #8]
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	68da      	ldr	r2, [r3, #12]
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	691b      	ldr	r3, [r3, #16]
 8009d5a:	431a      	orrs	r2, r3
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	430a      	orrs	r2, r1
 8009d62:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	68da      	ldr	r2, [r3, #12]
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	2180      	movs	r1, #128	; 0x80
 8009d70:	438a      	bics	r2, r1
 8009d72:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	689b      	ldr	r3, [r3, #8]
 8009d7a:	2220      	movs	r2, #32
 8009d7c:	4013      	ands	r3, r2
 8009d7e:	d113      	bne.n	8009da8 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	0018      	movs	r0, r3
 8009d84:	f000 fbb8 	bl	800a4f8 <HAL_RTC_WaitForSynchro>
 8009d88:	1e03      	subs	r3, r0, #0
 8009d8a:	d00d      	beq.n	8009da8 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	22ff      	movs	r2, #255	; 0xff
 8009d92:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	2221      	movs	r2, #33	; 0x21
 8009d98:	2104      	movs	r1, #4
 8009d9a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	2220      	movs	r2, #32
 8009da0:	2100      	movs	r1, #0
 8009da2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8009da4:	2301      	movs	r3, #1
 8009da6:	e00c      	b.n	8009dc2 <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	22ff      	movs	r2, #255	; 0xff
 8009dae:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	2221      	movs	r2, #33	; 0x21
 8009db4:	2101      	movs	r1, #1
 8009db6:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	2220      	movs	r2, #32
 8009dbc:	2100      	movs	r1, #0
 8009dbe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009dc0:	2300      	movs	r3, #0
  }
}
 8009dc2:	0018      	movs	r0, r3
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	b007      	add	sp, #28
 8009dc8:	bd90      	pop	{r4, r7, pc}
 8009dca:	46c0      	nop			; (mov r8, r8)
 8009dcc:	007f7f7f 	.word	0x007f7f7f
 8009dd0:	fffbffff 	.word	0xfffbffff

08009dd4 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b086      	sub	sp, #24
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	60f8      	str	r0, [r7, #12]
 8009ddc:	60b9      	str	r1, [r7, #8]
 8009dde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	691b      	ldr	r3, [r3, #16]
 8009df0:	045b      	lsls	r3, r3, #17
 8009df2:	0c5a      	lsrs	r2, r3, #17
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	4a22      	ldr	r2, [pc, #136]	; (8009e88 <HAL_RTC_GetTime+0xb4>)
 8009e00:	4013      	ands	r3, r2
 8009e02:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	0c1b      	lsrs	r3, r3, #16
 8009e08:	b2db      	uxtb	r3, r3
 8009e0a:	223f      	movs	r2, #63	; 0x3f
 8009e0c:	4013      	ands	r3, r2
 8009e0e:	b2da      	uxtb	r2, r3
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	0a1b      	lsrs	r3, r3, #8
 8009e18:	b2db      	uxtb	r3, r3
 8009e1a:	227f      	movs	r2, #127	; 0x7f
 8009e1c:	4013      	ands	r3, r2
 8009e1e:	b2da      	uxtb	r2, r3
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	b2db      	uxtb	r3, r3
 8009e28:	227f      	movs	r2, #127	; 0x7f
 8009e2a:	4013      	ands	r3, r2
 8009e2c:	b2da      	uxtb	r2, r3
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	0c1b      	lsrs	r3, r3, #16
 8009e36:	b2db      	uxtb	r3, r3
 8009e38:	2240      	movs	r2, #64	; 0x40
 8009e3a:	4013      	ands	r3, r2
 8009e3c:	b2da      	uxtb	r2, r3
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d11a      	bne.n	8009e7e <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	781b      	ldrb	r3, [r3, #0]
 8009e4c:	0018      	movs	r0, r3
 8009e4e:	f000 fbcc 	bl	800a5ea <RTC_Bcd2ToByte>
 8009e52:	0003      	movs	r3, r0
 8009e54:	001a      	movs	r2, r3
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	785b      	ldrb	r3, [r3, #1]
 8009e5e:	0018      	movs	r0, r3
 8009e60:	f000 fbc3 	bl	800a5ea <RTC_Bcd2ToByte>
 8009e64:	0003      	movs	r3, r0
 8009e66:	001a      	movs	r2, r3
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	789b      	ldrb	r3, [r3, #2]
 8009e70:	0018      	movs	r0, r3
 8009e72:	f000 fbba 	bl	800a5ea <RTC_Bcd2ToByte>
 8009e76:	0003      	movs	r3, r0
 8009e78:	001a      	movs	r2, r3
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8009e7e:	2300      	movs	r3, #0
}
 8009e80:	0018      	movs	r0, r3
 8009e82:	46bd      	mov	sp, r7
 8009e84:	b006      	add	sp, #24
 8009e86:	bd80      	pop	{r7, pc}
 8009e88:	007f7f7f 	.word	0x007f7f7f

08009e8c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009e8c:	b590      	push	{r4, r7, lr}
 8009e8e:	b087      	sub	sp, #28
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	60f8      	str	r0, [r7, #12]
 8009e94:	60b9      	str	r1, [r7, #8]
 8009e96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	2220      	movs	r2, #32
 8009e9c:	5c9b      	ldrb	r3, [r3, r2]
 8009e9e:	2b01      	cmp	r3, #1
 8009ea0:	d101      	bne.n	8009ea6 <HAL_RTC_SetDate+0x1a>
 8009ea2:	2302      	movs	r3, #2
 8009ea4:	e099      	b.n	8009fda <HAL_RTC_SetDate+0x14e>
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	2220      	movs	r2, #32
 8009eaa:	2101      	movs	r1, #1
 8009eac:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	2221      	movs	r2, #33	; 0x21
 8009eb2:	2102      	movs	r1, #2
 8009eb4:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d10e      	bne.n	8009eda <HAL_RTC_SetDate+0x4e>
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	785b      	ldrb	r3, [r3, #1]
 8009ec0:	001a      	movs	r2, r3
 8009ec2:	2310      	movs	r3, #16
 8009ec4:	4013      	ands	r3, r2
 8009ec6:	d008      	beq.n	8009eda <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	785b      	ldrb	r3, [r3, #1]
 8009ecc:	2210      	movs	r2, #16
 8009ece:	4393      	bics	r3, r2
 8009ed0:	b2db      	uxtb	r3, r3
 8009ed2:	330a      	adds	r3, #10
 8009ed4:	b2da      	uxtb	r2, r3
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d11c      	bne.n	8009f1a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	78db      	ldrb	r3, [r3, #3]
 8009ee4:	0018      	movs	r0, r3
 8009ee6:	f000 fb58 	bl	800a59a <RTC_ByteToBcd2>
 8009eea:	0003      	movs	r3, r0
 8009eec:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	785b      	ldrb	r3, [r3, #1]
 8009ef2:	0018      	movs	r0, r3
 8009ef4:	f000 fb51 	bl	800a59a <RTC_ByteToBcd2>
 8009ef8:	0003      	movs	r3, r0
 8009efa:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009efc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	789b      	ldrb	r3, [r3, #2]
 8009f02:	0018      	movs	r0, r3
 8009f04:	f000 fb49 	bl	800a59a <RTC_ByteToBcd2>
 8009f08:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8009f0a:	0022      	movs	r2, r4
 8009f0c:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	781b      	ldrb	r3, [r3, #0]
 8009f12:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009f14:	4313      	orrs	r3, r2
 8009f16:	617b      	str	r3, [r7, #20]
 8009f18:	e00e      	b.n	8009f38 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	78db      	ldrb	r3, [r3, #3]
 8009f1e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	785b      	ldrb	r3, [r3, #1]
 8009f24:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009f26:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8009f28:	68ba      	ldr	r2, [r7, #8]
 8009f2a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8009f2c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	781b      	ldrb	r3, [r3, #0]
 8009f32:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009f34:	4313      	orrs	r3, r2
 8009f36:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	22ca      	movs	r2, #202	; 0xca
 8009f3e:	625a      	str	r2, [r3, #36]	; 0x24
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	2253      	movs	r2, #83	; 0x53
 8009f46:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	0018      	movs	r0, r3
 8009f4c:	f000 fafb 	bl	800a546 <RTC_EnterInitMode>
 8009f50:	1e03      	subs	r3, r0, #0
 8009f52:	d00d      	beq.n	8009f70 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	22ff      	movs	r2, #255	; 0xff
 8009f5a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	2221      	movs	r2, #33	; 0x21
 8009f60:	2104      	movs	r1, #4
 8009f62:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	2220      	movs	r2, #32
 8009f68:	2100      	movs	r1, #0
 8009f6a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	e034      	b.n	8009fda <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	697a      	ldr	r2, [r7, #20]
 8009f76:	491b      	ldr	r1, [pc, #108]	; (8009fe4 <HAL_RTC_SetDate+0x158>)
 8009f78:	400a      	ands	r2, r1
 8009f7a:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	68da      	ldr	r2, [r3, #12]
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	2180      	movs	r1, #128	; 0x80
 8009f88:	438a      	bics	r2, r1
 8009f8a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	689b      	ldr	r3, [r3, #8]
 8009f92:	2220      	movs	r2, #32
 8009f94:	4013      	ands	r3, r2
 8009f96:	d113      	bne.n	8009fc0 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	0018      	movs	r0, r3
 8009f9c:	f000 faac 	bl	800a4f8 <HAL_RTC_WaitForSynchro>
 8009fa0:	1e03      	subs	r3, r0, #0
 8009fa2:	d00d      	beq.n	8009fc0 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	22ff      	movs	r2, #255	; 0xff
 8009faa:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	2221      	movs	r2, #33	; 0x21
 8009fb0:	2104      	movs	r1, #4
 8009fb2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	2220      	movs	r2, #32
 8009fb8:	2100      	movs	r1, #0
 8009fba:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	e00c      	b.n	8009fda <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	22ff      	movs	r2, #255	; 0xff
 8009fc6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	2221      	movs	r2, #33	; 0x21
 8009fcc:	2101      	movs	r1, #1
 8009fce:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2220      	movs	r2, #32
 8009fd4:	2100      	movs	r1, #0
 8009fd6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009fd8:	2300      	movs	r3, #0
  }
}
 8009fda:	0018      	movs	r0, r3
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	b007      	add	sp, #28
 8009fe0:	bd90      	pop	{r4, r7, pc}
 8009fe2:	46c0      	nop			; (mov r8, r8)
 8009fe4:	00ffff3f 	.word	0x00ffff3f

08009fe8 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b086      	sub	sp, #24
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	60f8      	str	r0, [r7, #12]
 8009ff0:	60b9      	str	r1, [r7, #8]
 8009ff2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	685b      	ldr	r3, [r3, #4]
 8009ffa:	4a21      	ldr	r2, [pc, #132]	; (800a080 <HAL_RTC_GetDate+0x98>)
 8009ffc:	4013      	ands	r3, r2
 8009ffe:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	0c1b      	lsrs	r3, r3, #16
 800a004:	b2da      	uxtb	r2, r3
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800a00a:	697b      	ldr	r3, [r7, #20]
 800a00c:	0a1b      	lsrs	r3, r3, #8
 800a00e:	b2db      	uxtb	r3, r3
 800a010:	221f      	movs	r2, #31
 800a012:	4013      	ands	r3, r2
 800a014:	b2da      	uxtb	r2, r3
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	b2db      	uxtb	r3, r3
 800a01e:	223f      	movs	r2, #63	; 0x3f
 800a020:	4013      	ands	r3, r2
 800a022:	b2da      	uxtb	r2, r3
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	0b5b      	lsrs	r3, r3, #13
 800a02c:	b2db      	uxtb	r3, r3
 800a02e:	2207      	movs	r2, #7
 800a030:	4013      	ands	r3, r2
 800a032:	b2da      	uxtb	r2, r3
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d11a      	bne.n	800a074 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	78db      	ldrb	r3, [r3, #3]
 800a042:	0018      	movs	r0, r3
 800a044:	f000 fad1 	bl	800a5ea <RTC_Bcd2ToByte>
 800a048:	0003      	movs	r3, r0
 800a04a:	001a      	movs	r2, r3
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	785b      	ldrb	r3, [r3, #1]
 800a054:	0018      	movs	r0, r3
 800a056:	f000 fac8 	bl	800a5ea <RTC_Bcd2ToByte>
 800a05a:	0003      	movs	r3, r0
 800a05c:	001a      	movs	r2, r3
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	789b      	ldrb	r3, [r3, #2]
 800a066:	0018      	movs	r0, r3
 800a068:	f000 fabf 	bl	800a5ea <RTC_Bcd2ToByte>
 800a06c:	0003      	movs	r3, r0
 800a06e:	001a      	movs	r2, r3
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800a074:	2300      	movs	r3, #0
}
 800a076:	0018      	movs	r0, r3
 800a078:	46bd      	mov	sp, r7
 800a07a:	b006      	add	sp, #24
 800a07c:	bd80      	pop	{r7, pc}
 800a07e:	46c0      	nop			; (mov r8, r8)
 800a080:	00ffff3f 	.word	0x00ffff3f

0800a084 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800a084:	b590      	push	{r4, r7, lr}
 800a086:	b089      	sub	sp, #36	; 0x24
 800a088:	af00      	add	r7, sp, #0
 800a08a:	60f8      	str	r0, [r7, #12]
 800a08c:	60b9      	str	r1, [r7, #8]
 800a08e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	2220      	movs	r2, #32
 800a094:	5c9b      	ldrb	r3, [r3, r2]
 800a096:	2b01      	cmp	r3, #1
 800a098:	d101      	bne.n	800a09e <HAL_RTC_SetAlarm_IT+0x1a>
 800a09a:	2302      	movs	r3, #2
 800a09c:	e130      	b.n	800a300 <HAL_RTC_SetAlarm_IT+0x27c>
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	2220      	movs	r2, #32
 800a0a2:	2101      	movs	r1, #1
 800a0a4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	2221      	movs	r2, #33	; 0x21
 800a0aa:	2102      	movs	r1, #2
 800a0ac:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d136      	bne.n	800a122 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	689b      	ldr	r3, [r3, #8]
 800a0ba:	2240      	movs	r2, #64	; 0x40
 800a0bc:	4013      	ands	r3, r2
 800a0be:	d102      	bne.n	800a0c6 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800a0c0:	68bb      	ldr	r3, [r7, #8]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800a0c6:	68bb      	ldr	r3, [r7, #8]
 800a0c8:	781b      	ldrb	r3, [r3, #0]
 800a0ca:	0018      	movs	r0, r3
 800a0cc:	f000 fa65 	bl	800a59a <RTC_ByteToBcd2>
 800a0d0:	0003      	movs	r3, r0
 800a0d2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	785b      	ldrb	r3, [r3, #1]
 800a0d8:	0018      	movs	r0, r3
 800a0da:	f000 fa5e 	bl	800a59a <RTC_ByteToBcd2>
 800a0de:	0003      	movs	r3, r0
 800a0e0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800a0e2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	789b      	ldrb	r3, [r3, #2]
 800a0e8:	0018      	movs	r0, r3
 800a0ea:	f000 fa56 	bl	800a59a <RTC_ByteToBcd2>
 800a0ee:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800a0f0:	0022      	movs	r2, r4
 800a0f2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	78db      	ldrb	r3, [r3, #3]
 800a0f8:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800a0fa:	431a      	orrs	r2, r3
 800a0fc:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800a0fe:	68bb      	ldr	r3, [r7, #8]
 800a100:	2220      	movs	r2, #32
 800a102:	5c9b      	ldrb	r3, [r3, r2]
 800a104:	0018      	movs	r0, r3
 800a106:	f000 fa48 	bl	800a59a <RTC_ByteToBcd2>
 800a10a:	0003      	movs	r3, r0
 800a10c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800a10e:	0022      	movs	r2, r4
 800a110:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800a116:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800a11c:	4313      	orrs	r3, r2
 800a11e:	61fb      	str	r3, [r7, #28]
 800a120:	e022      	b.n	800a168 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	689b      	ldr	r3, [r3, #8]
 800a128:	2240      	movs	r2, #64	; 0x40
 800a12a:	4013      	ands	r3, r2
 800a12c:	d102      	bne.n	800a134 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	2200      	movs	r2, #0
 800a132:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	781b      	ldrb	r3, [r3, #0]
 800a138:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	785b      	ldrb	r3, [r3, #1]
 800a13e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800a140:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800a142:	68ba      	ldr	r2, [r7, #8]
 800a144:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800a146:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	78db      	ldrb	r3, [r3, #3]
 800a14c:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800a14e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	2120      	movs	r1, #32
 800a154:	5c5b      	ldrb	r3, [r3, r1]
 800a156:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800a158:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800a15e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800a164:	4313      	orrs	r3, r2
 800a166:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	685a      	ldr	r2, [r3, #4]
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	699b      	ldr	r3, [r3, #24]
 800a170:	4313      	orrs	r3, r2
 800a172:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	22ca      	movs	r2, #202	; 0xca
 800a17a:	625a      	str	r2, [r3, #36]	; 0x24
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	2253      	movs	r2, #83	; 0x53
 800a182:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a188:	2380      	movs	r3, #128	; 0x80
 800a18a:	005b      	lsls	r3, r3, #1
 800a18c:	429a      	cmp	r2, r3
 800a18e:	d14e      	bne.n	800a22e <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	689a      	ldr	r2, [r3, #8]
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	495b      	ldr	r1, [pc, #364]	; (800a308 <HAL_RTC_SetAlarm_IT+0x284>)
 800a19c:	400a      	ands	r2, r1
 800a19e:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	68db      	ldr	r3, [r3, #12]
 800a1a6:	22ff      	movs	r2, #255	; 0xff
 800a1a8:	401a      	ands	r2, r3
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	4957      	ldr	r1, [pc, #348]	; (800a30c <HAL_RTC_SetAlarm_IT+0x288>)
 800a1b0:	430a      	orrs	r2, r1
 800a1b2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a1b4:	f7fa fe03 	bl	8004dbe <HAL_GetTick>
 800a1b8:	0003      	movs	r3, r0
 800a1ba:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800a1bc:	e016      	b.n	800a1ec <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a1be:	f7fa fdfe 	bl	8004dbe <HAL_GetTick>
 800a1c2:	0002      	movs	r2, r0
 800a1c4:	697b      	ldr	r3, [r7, #20]
 800a1c6:	1ad2      	subs	r2, r2, r3
 800a1c8:	23fa      	movs	r3, #250	; 0xfa
 800a1ca:	009b      	lsls	r3, r3, #2
 800a1cc:	429a      	cmp	r2, r3
 800a1ce:	d90d      	bls.n	800a1ec <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	22ff      	movs	r2, #255	; 0xff
 800a1d6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	2221      	movs	r2, #33	; 0x21
 800a1dc:	2103      	movs	r1, #3
 800a1de:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	2220      	movs	r2, #32
 800a1e4:	2100      	movs	r1, #0
 800a1e6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a1e8:	2303      	movs	r3, #3
 800a1ea:	e089      	b.n	800a300 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	68db      	ldr	r3, [r3, #12]
 800a1f2:	2201      	movs	r2, #1
 800a1f4:	4013      	ands	r3, r2
 800a1f6:	d0e2      	beq.n	800a1be <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	69fa      	ldr	r2, [r7, #28]
 800a1fe:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	69ba      	ldr	r2, [r7, #24]
 800a206:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	689a      	ldr	r2, [r3, #8]
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	2180      	movs	r1, #128	; 0x80
 800a214:	0049      	lsls	r1, r1, #1
 800a216:	430a      	orrs	r2, r1
 800a218:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	689a      	ldr	r2, [r3, #8]
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	2180      	movs	r1, #128	; 0x80
 800a226:	0149      	lsls	r1, r1, #5
 800a228:	430a      	orrs	r2, r1
 800a22a:	609a      	str	r2, [r3, #8]
 800a22c:	e04d      	b.n	800a2ca <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	689a      	ldr	r2, [r3, #8]
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	4935      	ldr	r1, [pc, #212]	; (800a310 <HAL_RTC_SetAlarm_IT+0x28c>)
 800a23a:	400a      	ands	r2, r1
 800a23c:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	68db      	ldr	r3, [r3, #12]
 800a244:	22ff      	movs	r2, #255	; 0xff
 800a246:	401a      	ands	r2, r3
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	4931      	ldr	r1, [pc, #196]	; (800a314 <HAL_RTC_SetAlarm_IT+0x290>)
 800a24e:	430a      	orrs	r2, r1
 800a250:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a252:	f7fa fdb4 	bl	8004dbe <HAL_GetTick>
 800a256:	0003      	movs	r3, r0
 800a258:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800a25a:	e016      	b.n	800a28a <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a25c:	f7fa fdaf 	bl	8004dbe <HAL_GetTick>
 800a260:	0002      	movs	r2, r0
 800a262:	697b      	ldr	r3, [r7, #20]
 800a264:	1ad2      	subs	r2, r2, r3
 800a266:	23fa      	movs	r3, #250	; 0xfa
 800a268:	009b      	lsls	r3, r3, #2
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d90d      	bls.n	800a28a <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	22ff      	movs	r2, #255	; 0xff
 800a274:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	2221      	movs	r2, #33	; 0x21
 800a27a:	2103      	movs	r1, #3
 800a27c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	2220      	movs	r2, #32
 800a282:	2100      	movs	r1, #0
 800a284:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a286:	2303      	movs	r3, #3
 800a288:	e03a      	b.n	800a300 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	68db      	ldr	r3, [r3, #12]
 800a290:	2202      	movs	r2, #2
 800a292:	4013      	ands	r3, r2
 800a294:	d0e2      	beq.n	800a25c <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	69fa      	ldr	r2, [r7, #28]
 800a29c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	69ba      	ldr	r2, [r7, #24]
 800a2a4:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	689a      	ldr	r2, [r3, #8]
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	2180      	movs	r1, #128	; 0x80
 800a2b2:	0089      	lsls	r1, r1, #2
 800a2b4:	430a      	orrs	r2, r1
 800a2b6:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	689a      	ldr	r2, [r3, #8]
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	2180      	movs	r1, #128	; 0x80
 800a2c4:	0189      	lsls	r1, r1, #6
 800a2c6:	430a      	orrs	r2, r1
 800a2c8:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800a2ca:	4b13      	ldr	r3, [pc, #76]	; (800a318 <HAL_RTC_SetAlarm_IT+0x294>)
 800a2cc:	681a      	ldr	r2, [r3, #0]
 800a2ce:	4b12      	ldr	r3, [pc, #72]	; (800a318 <HAL_RTC_SetAlarm_IT+0x294>)
 800a2d0:	2180      	movs	r1, #128	; 0x80
 800a2d2:	0289      	lsls	r1, r1, #10
 800a2d4:	430a      	orrs	r2, r1
 800a2d6:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800a2d8:	4b0f      	ldr	r3, [pc, #60]	; (800a318 <HAL_RTC_SetAlarm_IT+0x294>)
 800a2da:	689a      	ldr	r2, [r3, #8]
 800a2dc:	4b0e      	ldr	r3, [pc, #56]	; (800a318 <HAL_RTC_SetAlarm_IT+0x294>)
 800a2de:	2180      	movs	r1, #128	; 0x80
 800a2e0:	0289      	lsls	r1, r1, #10
 800a2e2:	430a      	orrs	r2, r1
 800a2e4:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	22ff      	movs	r2, #255	; 0xff
 800a2ec:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	2221      	movs	r2, #33	; 0x21
 800a2f2:	2101      	movs	r1, #1
 800a2f4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	2220      	movs	r2, #32
 800a2fa:	2100      	movs	r1, #0
 800a2fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a2fe:	2300      	movs	r3, #0
}
 800a300:	0018      	movs	r0, r3
 800a302:	46bd      	mov	sp, r7
 800a304:	b009      	add	sp, #36	; 0x24
 800a306:	bd90      	pop	{r4, r7, pc}
 800a308:	fffffeff 	.word	0xfffffeff
 800a30c:	fffffe7f 	.word	0xfffffe7f
 800a310:	fffffdff 	.word	0xfffffdff
 800a314:	fffffd7f 	.word	0xfffffd7f
 800a318:	40010400 	.word	0x40010400

0800a31c <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b084      	sub	sp, #16
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
 800a324:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2220      	movs	r2, #32
 800a32a:	5c9b      	ldrb	r3, [r3, r2]
 800a32c:	2b01      	cmp	r3, #1
 800a32e:	d101      	bne.n	800a334 <HAL_RTC_DeactivateAlarm+0x18>
 800a330:	2302      	movs	r3, #2
 800a332:	e086      	b.n	800a442 <HAL_RTC_DeactivateAlarm+0x126>
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2220      	movs	r2, #32
 800a338:	2101      	movs	r1, #1
 800a33a:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2221      	movs	r2, #33	; 0x21
 800a340:	2102      	movs	r1, #2
 800a342:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	22ca      	movs	r2, #202	; 0xca
 800a34a:	625a      	str	r2, [r3, #36]	; 0x24
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	2253      	movs	r2, #83	; 0x53
 800a352:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 800a354:	683a      	ldr	r2, [r7, #0]
 800a356:	2380      	movs	r3, #128	; 0x80
 800a358:	005b      	lsls	r3, r3, #1
 800a35a:	429a      	cmp	r2, r3
 800a35c:	d132      	bne.n	800a3c4 <HAL_RTC_DeactivateAlarm+0xa8>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	689a      	ldr	r2, [r3, #8]
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	4938      	ldr	r1, [pc, #224]	; (800a44c <HAL_RTC_DeactivateAlarm+0x130>)
 800a36a:	400a      	ands	r2, r1
 800a36c:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	689a      	ldr	r2, [r3, #8]
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	4935      	ldr	r1, [pc, #212]	; (800a450 <HAL_RTC_DeactivateAlarm+0x134>)
 800a37a:	400a      	ands	r2, r1
 800a37c:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 800a37e:	f7fa fd1e 	bl	8004dbe <HAL_GetTick>
 800a382:	0003      	movs	r3, r0
 800a384:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800a386:	e016      	b.n	800a3b6 <HAL_RTC_DeactivateAlarm+0x9a>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a388:	f7fa fd19 	bl	8004dbe <HAL_GetTick>
 800a38c:	0002      	movs	r2, r0
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	1ad2      	subs	r2, r2, r3
 800a392:	23fa      	movs	r3, #250	; 0xfa
 800a394:	009b      	lsls	r3, r3, #2
 800a396:	429a      	cmp	r2, r3
 800a398:	d90d      	bls.n	800a3b6 <HAL_RTC_DeactivateAlarm+0x9a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	22ff      	movs	r2, #255	; 0xff
 800a3a0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2221      	movs	r2, #33	; 0x21
 800a3a6:	2103      	movs	r1, #3
 800a3a8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2220      	movs	r2, #32
 800a3ae:	2100      	movs	r1, #0
 800a3b0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a3b2:	2303      	movs	r3, #3
 800a3b4:	e045      	b.n	800a442 <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	68db      	ldr	r3, [r3, #12]
 800a3bc:	2201      	movs	r2, #1
 800a3be:	4013      	ands	r3, r2
 800a3c0:	d0e2      	beq.n	800a388 <HAL_RTC_DeactivateAlarm+0x6c>
 800a3c2:	e031      	b.n	800a428 <HAL_RTC_DeactivateAlarm+0x10c>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	689a      	ldr	r2, [r3, #8]
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	4921      	ldr	r1, [pc, #132]	; (800a454 <HAL_RTC_DeactivateAlarm+0x138>)
 800a3d0:	400a      	ands	r2, r1
 800a3d2:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	689a      	ldr	r2, [r3, #8]
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	491e      	ldr	r1, [pc, #120]	; (800a458 <HAL_RTC_DeactivateAlarm+0x13c>)
 800a3e0:	400a      	ands	r2, r1
 800a3e2:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 800a3e4:	f7fa fceb 	bl	8004dbe <HAL_GetTick>
 800a3e8:	0003      	movs	r3, r0
 800a3ea:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800a3ec:	e016      	b.n	800a41c <HAL_RTC_DeactivateAlarm+0x100>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a3ee:	f7fa fce6 	bl	8004dbe <HAL_GetTick>
 800a3f2:	0002      	movs	r2, r0
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	1ad2      	subs	r2, r2, r3
 800a3f8:	23fa      	movs	r3, #250	; 0xfa
 800a3fa:	009b      	lsls	r3, r3, #2
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	d90d      	bls.n	800a41c <HAL_RTC_DeactivateAlarm+0x100>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	22ff      	movs	r2, #255	; 0xff
 800a406:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2221      	movs	r2, #33	; 0x21
 800a40c:	2103      	movs	r1, #3
 800a40e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2220      	movs	r2, #32
 800a414:	2100      	movs	r1, #0
 800a416:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a418:	2303      	movs	r3, #3
 800a41a:	e012      	b.n	800a442 <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	68db      	ldr	r3, [r3, #12]
 800a422:	2202      	movs	r2, #2
 800a424:	4013      	ands	r3, r2
 800a426:	d0e2      	beq.n	800a3ee <HAL_RTC_DeactivateAlarm+0xd2>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	22ff      	movs	r2, #255	; 0xff
 800a42e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2221      	movs	r2, #33	; 0x21
 800a434:	2101      	movs	r1, #1
 800a436:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2220      	movs	r2, #32
 800a43c:	2100      	movs	r1, #0
 800a43e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a440:	2300      	movs	r3, #0
}
 800a442:	0018      	movs	r0, r3
 800a444:	46bd      	mov	sp, r7
 800a446:	b004      	add	sp, #16
 800a448:	bd80      	pop	{r7, pc}
 800a44a:	46c0      	nop			; (mov r8, r8)
 800a44c:	fffffeff 	.word	0xfffffeff
 800a450:	ffffefff 	.word	0xffffefff
 800a454:	fffffdff 	.word	0xfffffdff
 800a458:	ffffdfff 	.word	0xffffdfff

0800a45c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b082      	sub	sp, #8
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	689a      	ldr	r2, [r3, #8]
 800a46a:	2380      	movs	r3, #128	; 0x80
 800a46c:	015b      	lsls	r3, r3, #5
 800a46e:	4013      	ands	r3, r2
 800a470:	d014      	beq.n	800a49c <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	68da      	ldr	r2, [r3, #12]
 800a478:	2380      	movs	r3, #128	; 0x80
 800a47a:	005b      	lsls	r3, r3, #1
 800a47c:	4013      	ands	r3, r2
 800a47e:	d00d      	beq.n	800a49c <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	0018      	movs	r0, r3
 800a484:	f7f9 fc8f 	bl	8003da6 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	68db      	ldr	r3, [r3, #12]
 800a48e:	22ff      	movs	r2, #255	; 0xff
 800a490:	401a      	ands	r2, r3
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	4915      	ldr	r1, [pc, #84]	; (800a4ec <HAL_RTC_AlarmIRQHandler+0x90>)
 800a498:	430a      	orrs	r2, r1
 800a49a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	689a      	ldr	r2, [r3, #8]
 800a4a2:	2380      	movs	r3, #128	; 0x80
 800a4a4:	019b      	lsls	r3, r3, #6
 800a4a6:	4013      	ands	r3, r2
 800a4a8:	d014      	beq.n	800a4d4 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	68da      	ldr	r2, [r3, #12]
 800a4b0:	2380      	movs	r3, #128	; 0x80
 800a4b2:	009b      	lsls	r3, r3, #2
 800a4b4:	4013      	ands	r3, r2
 800a4b6:	d00d      	beq.n	800a4d4 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	0018      	movs	r0, r3
 800a4bc:	f000 f910 	bl	800a6e0 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	68db      	ldr	r3, [r3, #12]
 800a4c6:	22ff      	movs	r2, #255	; 0xff
 800a4c8:	401a      	ands	r2, r3
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	4908      	ldr	r1, [pc, #32]	; (800a4f0 <HAL_RTC_AlarmIRQHandler+0x94>)
 800a4d0:	430a      	orrs	r2, r1
 800a4d2:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800a4d4:	4b07      	ldr	r3, [pc, #28]	; (800a4f4 <HAL_RTC_AlarmIRQHandler+0x98>)
 800a4d6:	2280      	movs	r2, #128	; 0x80
 800a4d8:	0292      	lsls	r2, r2, #10
 800a4da:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2221      	movs	r2, #33	; 0x21
 800a4e0:	2101      	movs	r1, #1
 800a4e2:	5499      	strb	r1, [r3, r2]
}
 800a4e4:	46c0      	nop			; (mov r8, r8)
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	b002      	add	sp, #8
 800a4ea:	bd80      	pop	{r7, pc}
 800a4ec:	fffffe7f 	.word	0xfffffe7f
 800a4f0:	fffffd7f 	.word	0xfffffd7f
 800a4f4:	40010400 	.word	0x40010400

0800a4f8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b084      	sub	sp, #16
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	68da      	ldr	r2, [r3, #12]
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	21a0      	movs	r1, #160	; 0xa0
 800a50c:	438a      	bics	r2, r1
 800a50e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800a510:	f7fa fc55 	bl	8004dbe <HAL_GetTick>
 800a514:	0003      	movs	r3, r0
 800a516:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a518:	e00a      	b.n	800a530 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a51a:	f7fa fc50 	bl	8004dbe <HAL_GetTick>
 800a51e:	0002      	movs	r2, r0
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	1ad2      	subs	r2, r2, r3
 800a524:	23fa      	movs	r3, #250	; 0xfa
 800a526:	009b      	lsls	r3, r3, #2
 800a528:	429a      	cmp	r2, r3
 800a52a:	d901      	bls.n	800a530 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800a52c:	2303      	movs	r3, #3
 800a52e:	e006      	b.n	800a53e <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	68db      	ldr	r3, [r3, #12]
 800a536:	2220      	movs	r2, #32
 800a538:	4013      	ands	r3, r2
 800a53a:	d0ee      	beq.n	800a51a <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 800a53c:	2300      	movs	r3, #0
}
 800a53e:	0018      	movs	r0, r3
 800a540:	46bd      	mov	sp, r7
 800a542:	b004      	add	sp, #16
 800a544:	bd80      	pop	{r7, pc}

0800a546 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a546:	b580      	push	{r7, lr}
 800a548:	b084      	sub	sp, #16
 800a54a:	af00      	add	r7, sp, #0
 800a54c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	68db      	ldr	r3, [r3, #12]
 800a554:	2240      	movs	r2, #64	; 0x40
 800a556:	4013      	ands	r3, r2
 800a558:	d11a      	bne.n	800a590 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	2201      	movs	r2, #1
 800a560:	4252      	negs	r2, r2
 800a562:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a564:	f7fa fc2b 	bl	8004dbe <HAL_GetTick>
 800a568:	0003      	movs	r3, r0
 800a56a:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a56c:	e00a      	b.n	800a584 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a56e:	f7fa fc26 	bl	8004dbe <HAL_GetTick>
 800a572:	0002      	movs	r2, r0
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	1ad2      	subs	r2, r2, r3
 800a578:	23fa      	movs	r3, #250	; 0xfa
 800a57a:	009b      	lsls	r3, r3, #2
 800a57c:	429a      	cmp	r2, r3
 800a57e:	d901      	bls.n	800a584 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 800a580:	2303      	movs	r3, #3
 800a582:	e006      	b.n	800a592 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	68db      	ldr	r3, [r3, #12]
 800a58a:	2240      	movs	r2, #64	; 0x40
 800a58c:	4013      	ands	r3, r2
 800a58e:	d0ee      	beq.n	800a56e <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800a590:	2300      	movs	r3, #0
}
 800a592:	0018      	movs	r0, r3
 800a594:	46bd      	mov	sp, r7
 800a596:	b004      	add	sp, #16
 800a598:	bd80      	pop	{r7, pc}

0800a59a <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a59a:	b580      	push	{r7, lr}
 800a59c:	b084      	sub	sp, #16
 800a59e:	af00      	add	r7, sp, #0
 800a5a0:	0002      	movs	r2, r0
 800a5a2:	1dfb      	adds	r3, r7, #7
 800a5a4:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800a5aa:	230b      	movs	r3, #11
 800a5ac:	18fb      	adds	r3, r7, r3
 800a5ae:	1dfa      	adds	r2, r7, #7
 800a5b0:	7812      	ldrb	r2, [r2, #0]
 800a5b2:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 800a5b4:	e008      	b.n	800a5c8 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	3301      	adds	r3, #1
 800a5ba:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800a5bc:	220b      	movs	r2, #11
 800a5be:	18bb      	adds	r3, r7, r2
 800a5c0:	18ba      	adds	r2, r7, r2
 800a5c2:	7812      	ldrb	r2, [r2, #0]
 800a5c4:	3a0a      	subs	r2, #10
 800a5c6:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 800a5c8:	210b      	movs	r1, #11
 800a5ca:	187b      	adds	r3, r7, r1
 800a5cc:	781b      	ldrb	r3, [r3, #0]
 800a5ce:	2b09      	cmp	r3, #9
 800a5d0:	d8f1      	bhi.n	800a5b6 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	b2db      	uxtb	r3, r3
 800a5d6:	011b      	lsls	r3, r3, #4
 800a5d8:	b2da      	uxtb	r2, r3
 800a5da:	187b      	adds	r3, r7, r1
 800a5dc:	781b      	ldrb	r3, [r3, #0]
 800a5de:	4313      	orrs	r3, r2
 800a5e0:	b2db      	uxtb	r3, r3
}
 800a5e2:	0018      	movs	r0, r3
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	b004      	add	sp, #16
 800a5e8:	bd80      	pop	{r7, pc}

0800a5ea <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800a5ea:	b580      	push	{r7, lr}
 800a5ec:	b084      	sub	sp, #16
 800a5ee:	af00      	add	r7, sp, #0
 800a5f0:	0002      	movs	r2, r0
 800a5f2:	1dfb      	adds	r3, r7, #7
 800a5f4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800a5f6:	1dfb      	adds	r3, r7, #7
 800a5f8:	781b      	ldrb	r3, [r3, #0]
 800a5fa:	091b      	lsrs	r3, r3, #4
 800a5fc:	b2db      	uxtb	r3, r3
 800a5fe:	001a      	movs	r2, r3
 800a600:	0013      	movs	r3, r2
 800a602:	009b      	lsls	r3, r3, #2
 800a604:	189b      	adds	r3, r3, r2
 800a606:	005b      	lsls	r3, r3, #1
 800a608:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	b2da      	uxtb	r2, r3
 800a60e:	1dfb      	adds	r3, r7, #7
 800a610:	781b      	ldrb	r3, [r3, #0]
 800a612:	210f      	movs	r1, #15
 800a614:	400b      	ands	r3, r1
 800a616:	b2db      	uxtb	r3, r3
 800a618:	18d3      	adds	r3, r2, r3
 800a61a:	b2db      	uxtb	r3, r3
}
 800a61c:	0018      	movs	r0, r3
 800a61e:	46bd      	mov	sp, r7
 800a620:	b004      	add	sp, #16
 800a622:	bd80      	pop	{r7, pc}

0800a624 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b086      	sub	sp, #24
 800a628:	af00      	add	r7, sp, #0
 800a62a:	60f8      	str	r0, [r7, #12]
 800a62c:	60b9      	str	r1, [r7, #8]
 800a62e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	3350      	adds	r3, #80	; 0x50
 800a636:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	009b      	lsls	r3, r3, #2
 800a63c:	697a      	ldr	r2, [r7, #20]
 800a63e:	18d3      	adds	r3, r2, r3
 800a640:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	687a      	ldr	r2, [r7, #4]
 800a646:	601a      	str	r2, [r3, #0]
}
 800a648:	46c0      	nop			; (mov r8, r8)
 800a64a:	46bd      	mov	sp, r7
 800a64c:	b006      	add	sp, #24
 800a64e:	bd80      	pop	{r7, pc}

0800a650 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b084      	sub	sp, #16
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	6039      	str	r1, [r7, #0]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	3350      	adds	r3, #80	; 0x50
 800a660:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	009b      	lsls	r3, r3, #2
 800a666:	68fa      	ldr	r2, [r7, #12]
 800a668:	18d3      	adds	r3, r2, r3
 800a66a:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
}
 800a670:	0018      	movs	r0, r3
 800a672:	46bd      	mov	sp, r7
 800a674:	b004      	add	sp, #16
 800a676:	bd80      	pop	{r7, pc}

0800a678 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b082      	sub	sp, #8
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2220      	movs	r2, #32
 800a684:	5c9b      	ldrb	r3, [r3, r2]
 800a686:	2b01      	cmp	r3, #1
 800a688:	d101      	bne.n	800a68e <HAL_RTCEx_EnableBypassShadow+0x16>
 800a68a:	2302      	movs	r3, #2
 800a68c:	e024      	b.n	800a6d8 <HAL_RTCEx_EnableBypassShadow+0x60>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2220      	movs	r2, #32
 800a692:	2101      	movs	r1, #1
 800a694:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2221      	movs	r2, #33	; 0x21
 800a69a:	2102      	movs	r1, #2
 800a69c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	22ca      	movs	r2, #202	; 0xca
 800a6a4:	625a      	str	r2, [r3, #36]	; 0x24
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	2253      	movs	r2, #83	; 0x53
 800a6ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	689a      	ldr	r2, [r3, #8]
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	2120      	movs	r1, #32
 800a6ba:	430a      	orrs	r2, r1
 800a6bc:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	22ff      	movs	r2, #255	; 0xff
 800a6c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2221      	movs	r2, #33	; 0x21
 800a6ca:	2101      	movs	r1, #1
 800a6cc:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2220      	movs	r2, #32
 800a6d2:	2100      	movs	r1, #0
 800a6d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a6d6:	2300      	movs	r3, #0
}
 800a6d8:	0018      	movs	r0, r3
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	b002      	add	sp, #8
 800a6de:	bd80      	pop	{r7, pc}

0800a6e0 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b082      	sub	sp, #8
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800a6e8:	46c0      	nop			; (mov r8, r8)
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	b002      	add	sp, #8
 800a6ee:	bd80      	pop	{r7, pc}

0800a6f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b082      	sub	sp, #8
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d101      	bne.n	800a702 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a6fe:	2301      	movs	r3, #1
 800a700:	e083      	b.n	800a80a <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a706:	2b00      	cmp	r3, #0
 800a708:	d109      	bne.n	800a71e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	685a      	ldr	r2, [r3, #4]
 800a70e:	2382      	movs	r3, #130	; 0x82
 800a710:	005b      	lsls	r3, r3, #1
 800a712:	429a      	cmp	r2, r3
 800a714:	d009      	beq.n	800a72a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2200      	movs	r2, #0
 800a71a:	61da      	str	r2, [r3, #28]
 800a71c:	e005      	b.n	800a72a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2200      	movs	r2, #0
 800a722:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2200      	movs	r2, #0
 800a728:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2200      	movs	r2, #0
 800a72e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2251      	movs	r2, #81	; 0x51
 800a734:	5c9b      	ldrb	r3, [r3, r2]
 800a736:	b2db      	uxtb	r3, r3
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d107      	bne.n	800a74c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2250      	movs	r2, #80	; 0x50
 800a740:	2100      	movs	r1, #0
 800a742:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	0018      	movs	r0, r3
 800a748:	f000 f866 	bl	800a818 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2251      	movs	r2, #81	; 0x51
 800a750:	2102      	movs	r1, #2
 800a752:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	681a      	ldr	r2, [r3, #0]
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	2140      	movs	r1, #64	; 0x40
 800a760:	438a      	bics	r2, r1
 800a762:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	685a      	ldr	r2, [r3, #4]
 800a768:	2382      	movs	r3, #130	; 0x82
 800a76a:	005b      	lsls	r3, r3, #1
 800a76c:	401a      	ands	r2, r3
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6899      	ldr	r1, [r3, #8]
 800a772:	2384      	movs	r3, #132	; 0x84
 800a774:	021b      	lsls	r3, r3, #8
 800a776:	400b      	ands	r3, r1
 800a778:	431a      	orrs	r2, r3
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	68d9      	ldr	r1, [r3, #12]
 800a77e:	2380      	movs	r3, #128	; 0x80
 800a780:	011b      	lsls	r3, r3, #4
 800a782:	400b      	ands	r3, r1
 800a784:	431a      	orrs	r2, r3
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	691b      	ldr	r3, [r3, #16]
 800a78a:	2102      	movs	r1, #2
 800a78c:	400b      	ands	r3, r1
 800a78e:	431a      	orrs	r2, r3
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	695b      	ldr	r3, [r3, #20]
 800a794:	2101      	movs	r1, #1
 800a796:	400b      	ands	r3, r1
 800a798:	431a      	orrs	r2, r3
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6999      	ldr	r1, [r3, #24]
 800a79e:	2380      	movs	r3, #128	; 0x80
 800a7a0:	009b      	lsls	r3, r3, #2
 800a7a2:	400b      	ands	r3, r1
 800a7a4:	431a      	orrs	r2, r3
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	69db      	ldr	r3, [r3, #28]
 800a7aa:	2138      	movs	r1, #56	; 0x38
 800a7ac:	400b      	ands	r3, r1
 800a7ae:	431a      	orrs	r2, r3
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6a1b      	ldr	r3, [r3, #32]
 800a7b4:	2180      	movs	r1, #128	; 0x80
 800a7b6:	400b      	ands	r3, r1
 800a7b8:	431a      	orrs	r2, r3
 800a7ba:	0011      	movs	r1, r2
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a7c0:	2380      	movs	r3, #128	; 0x80
 800a7c2:	019b      	lsls	r3, r3, #6
 800a7c4:	401a      	ands	r2, r3
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	430a      	orrs	r2, r1
 800a7cc:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	699b      	ldr	r3, [r3, #24]
 800a7d2:	0c1b      	lsrs	r3, r3, #16
 800a7d4:	2204      	movs	r2, #4
 800a7d6:	4013      	ands	r3, r2
 800a7d8:	0019      	movs	r1, r3
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7de:	2210      	movs	r2, #16
 800a7e0:	401a      	ands	r2, r3
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	430a      	orrs	r2, r1
 800a7e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	69da      	ldr	r2, [r3, #28]
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	4907      	ldr	r1, [pc, #28]	; (800a814 <HAL_SPI_Init+0x124>)
 800a7f6:	400a      	ands	r2, r1
 800a7f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2251      	movs	r2, #81	; 0x51
 800a804:	2101      	movs	r1, #1
 800a806:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a808:	2300      	movs	r3, #0
}
 800a80a:	0018      	movs	r0, r3
 800a80c:	46bd      	mov	sp, r7
 800a80e:	b002      	add	sp, #8
 800a810:	bd80      	pop	{r7, pc}
 800a812:	46c0      	nop			; (mov r8, r8)
 800a814:	fffff7ff 	.word	0xfffff7ff

0800a818 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b082      	sub	sp, #8
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800a820:	46c0      	nop			; (mov r8, r8)
 800a822:	46bd      	mov	sp, r7
 800a824:	b002      	add	sp, #8
 800a826:	bd80      	pop	{r7, pc}

0800a828 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b08c      	sub	sp, #48	; 0x30
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	60f8      	str	r0, [r7, #12]
 800a830:	60b9      	str	r1, [r7, #8]
 800a832:	607a      	str	r2, [r7, #4]
 800a834:	001a      	movs	r2, r3
 800a836:	1cbb      	adds	r3, r7, #2
 800a838:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a83a:	2301      	movs	r3, #1
 800a83c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a83e:	232b      	movs	r3, #43	; 0x2b
 800a840:	18fb      	adds	r3, r7, r3
 800a842:	2200      	movs	r2, #0
 800a844:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	2250      	movs	r2, #80	; 0x50
 800a84a:	5c9b      	ldrb	r3, [r3, r2]
 800a84c:	2b01      	cmp	r3, #1
 800a84e:	d101      	bne.n	800a854 <HAL_SPI_TransmitReceive+0x2c>
 800a850:	2302      	movs	r3, #2
 800a852:	e1a0      	b.n	800ab96 <HAL_SPI_TransmitReceive+0x36e>
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	2250      	movs	r2, #80	; 0x50
 800a858:	2101      	movs	r1, #1
 800a85a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a85c:	f7fa faaf 	bl	8004dbe <HAL_GetTick>
 800a860:	0003      	movs	r3, r0
 800a862:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a864:	2023      	movs	r0, #35	; 0x23
 800a866:	183b      	adds	r3, r7, r0
 800a868:	68fa      	ldr	r2, [r7, #12]
 800a86a:	2151      	movs	r1, #81	; 0x51
 800a86c:	5c52      	ldrb	r2, [r2, r1]
 800a86e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	685b      	ldr	r3, [r3, #4]
 800a874:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a876:	231a      	movs	r3, #26
 800a878:	18fb      	adds	r3, r7, r3
 800a87a:	1cba      	adds	r2, r7, #2
 800a87c:	8812      	ldrh	r2, [r2, #0]
 800a87e:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a880:	183b      	adds	r3, r7, r0
 800a882:	781b      	ldrb	r3, [r3, #0]
 800a884:	2b01      	cmp	r3, #1
 800a886:	d011      	beq.n	800a8ac <HAL_SPI_TransmitReceive+0x84>
 800a888:	69fa      	ldr	r2, [r7, #28]
 800a88a:	2382      	movs	r3, #130	; 0x82
 800a88c:	005b      	lsls	r3, r3, #1
 800a88e:	429a      	cmp	r2, r3
 800a890:	d107      	bne.n	800a8a2 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	689b      	ldr	r3, [r3, #8]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d103      	bne.n	800a8a2 <HAL_SPI_TransmitReceive+0x7a>
 800a89a:	183b      	adds	r3, r7, r0
 800a89c:	781b      	ldrb	r3, [r3, #0]
 800a89e:	2b04      	cmp	r3, #4
 800a8a0:	d004      	beq.n	800a8ac <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800a8a2:	232b      	movs	r3, #43	; 0x2b
 800a8a4:	18fb      	adds	r3, r7, r3
 800a8a6:	2202      	movs	r2, #2
 800a8a8:	701a      	strb	r2, [r3, #0]
    goto error;
 800a8aa:	e169      	b.n	800ab80 <HAL_SPI_TransmitReceive+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d006      	beq.n	800a8c0 <HAL_SPI_TransmitReceive+0x98>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d003      	beq.n	800a8c0 <HAL_SPI_TransmitReceive+0x98>
 800a8b8:	1cbb      	adds	r3, r7, #2
 800a8ba:	881b      	ldrh	r3, [r3, #0]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d104      	bne.n	800a8ca <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800a8c0:	232b      	movs	r3, #43	; 0x2b
 800a8c2:	18fb      	adds	r3, r7, r3
 800a8c4:	2201      	movs	r2, #1
 800a8c6:	701a      	strb	r2, [r3, #0]
    goto error;
 800a8c8:	e15a      	b.n	800ab80 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	2251      	movs	r2, #81	; 0x51
 800a8ce:	5c9b      	ldrb	r3, [r3, r2]
 800a8d0:	b2db      	uxtb	r3, r3
 800a8d2:	2b04      	cmp	r3, #4
 800a8d4:	d003      	beq.n	800a8de <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	2251      	movs	r2, #81	; 0x51
 800a8da:	2105      	movs	r1, #5
 800a8dc:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	687a      	ldr	r2, [r7, #4]
 800a8e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	1cba      	adds	r2, r7, #2
 800a8ee:	8812      	ldrh	r2, [r2, #0]
 800a8f0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	1cba      	adds	r2, r7, #2
 800a8f6:	8812      	ldrh	r2, [r2, #0]
 800a8f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	68ba      	ldr	r2, [r7, #8]
 800a8fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	1cba      	adds	r2, r7, #2
 800a904:	8812      	ldrh	r2, [r2, #0]
 800a906:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	1cba      	adds	r2, r7, #2
 800a90c:	8812      	ldrh	r2, [r2, #0]
 800a90e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	2200      	movs	r2, #0
 800a914:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	2200      	movs	r2, #0
 800a91a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	2240      	movs	r2, #64	; 0x40
 800a924:	4013      	ands	r3, r2
 800a926:	2b40      	cmp	r3, #64	; 0x40
 800a928:	d007      	beq.n	800a93a <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	681a      	ldr	r2, [r3, #0]
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	2140      	movs	r1, #64	; 0x40
 800a936:	430a      	orrs	r2, r1
 800a938:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	68da      	ldr	r2, [r3, #12]
 800a93e:	2380      	movs	r3, #128	; 0x80
 800a940:	011b      	lsls	r3, r3, #4
 800a942:	429a      	cmp	r2, r3
 800a944:	d000      	beq.n	800a948 <HAL_SPI_TransmitReceive+0x120>
 800a946:	e07a      	b.n	800aa3e <HAL_SPI_TransmitReceive+0x216>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	685b      	ldr	r3, [r3, #4]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d004      	beq.n	800a95a <HAL_SPI_TransmitReceive+0x132>
 800a950:	231a      	movs	r3, #26
 800a952:	18fb      	adds	r3, r7, r3
 800a954:	881b      	ldrh	r3, [r3, #0]
 800a956:	2b01      	cmp	r3, #1
 800a958:	d166      	bne.n	800aa28 <HAL_SPI_TransmitReceive+0x200>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a95e:	881a      	ldrh	r2, [r3, #0]
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a96a:	1c9a      	adds	r2, r3, #2
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a974:	b29b      	uxth	r3, r3
 800a976:	3b01      	subs	r3, #1
 800a978:	b29a      	uxth	r2, r3
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a97e:	e053      	b.n	800aa28 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	689b      	ldr	r3, [r3, #8]
 800a986:	2202      	movs	r2, #2
 800a988:	4013      	ands	r3, r2
 800a98a:	2b02      	cmp	r3, #2
 800a98c:	d11b      	bne.n	800a9c6 <HAL_SPI_TransmitReceive+0x19e>
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a992:	b29b      	uxth	r3, r3
 800a994:	2b00      	cmp	r3, #0
 800a996:	d016      	beq.n	800a9c6 <HAL_SPI_TransmitReceive+0x19e>
 800a998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a99a:	2b01      	cmp	r3, #1
 800a99c:	d113      	bne.n	800a9c6 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9a2:	881a      	ldrh	r2, [r3, #0]
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9ae:	1c9a      	adds	r2, r3, #2
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a9b8:	b29b      	uxth	r3, r3
 800a9ba:	3b01      	subs	r3, #1
 800a9bc:	b29a      	uxth	r2, r3
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	689b      	ldr	r3, [r3, #8]
 800a9cc:	2201      	movs	r2, #1
 800a9ce:	4013      	ands	r3, r2
 800a9d0:	2b01      	cmp	r3, #1
 800a9d2:	d119      	bne.n	800aa08 <HAL_SPI_TransmitReceive+0x1e0>
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a9d8:	b29b      	uxth	r3, r3
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d014      	beq.n	800aa08 <HAL_SPI_TransmitReceive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	68da      	ldr	r2, [r3, #12]
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9e8:	b292      	uxth	r2, r2
 800a9ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9f0:	1c9a      	adds	r2, r3, #2
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a9fa:	b29b      	uxth	r3, r3
 800a9fc:	3b01      	subs	r3, #1
 800a9fe:	b29a      	uxth	r2, r3
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800aa04:	2301      	movs	r3, #1
 800aa06:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800aa08:	f7fa f9d9 	bl	8004dbe <HAL_GetTick>
 800aa0c:	0002      	movs	r2, r0
 800aa0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa10:	1ad3      	subs	r3, r2, r3
 800aa12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa14:	429a      	cmp	r2, r3
 800aa16:	d807      	bhi.n	800aa28 <HAL_SPI_TransmitReceive+0x200>
 800aa18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa1a:	3301      	adds	r3, #1
 800aa1c:	d004      	beq.n	800aa28 <HAL_SPI_TransmitReceive+0x200>
      {
        errorcode = HAL_TIMEOUT;
 800aa1e:	232b      	movs	r3, #43	; 0x2b
 800aa20:	18fb      	adds	r3, r7, r3
 800aa22:	2203      	movs	r2, #3
 800aa24:	701a      	strb	r2, [r3, #0]
        goto error;
 800aa26:	e0ab      	b.n	800ab80 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aa2c:	b29b      	uxth	r3, r3
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d1a6      	bne.n	800a980 <HAL_SPI_TransmitReceive+0x158>
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa36:	b29b      	uxth	r3, r3
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d1a1      	bne.n	800a980 <HAL_SPI_TransmitReceive+0x158>
 800aa3c:	e07f      	b.n	800ab3e <HAL_SPI_TransmitReceive+0x316>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	685b      	ldr	r3, [r3, #4]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d005      	beq.n	800aa52 <HAL_SPI_TransmitReceive+0x22a>
 800aa46:	231a      	movs	r3, #26
 800aa48:	18fb      	adds	r3, r7, r3
 800aa4a:	881b      	ldrh	r3, [r3, #0]
 800aa4c:	2b01      	cmp	r3, #1
 800aa4e:	d000      	beq.n	800aa52 <HAL_SPI_TransmitReceive+0x22a>
 800aa50:	e06b      	b.n	800ab2a <HAL_SPI_TransmitReceive+0x302>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	330c      	adds	r3, #12
 800aa5c:	7812      	ldrb	r2, [r2, #0]
 800aa5e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa64:	1c5a      	adds	r2, r3, #1
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aa6e:	b29b      	uxth	r3, r3
 800aa70:	3b01      	subs	r3, #1
 800aa72:	b29a      	uxth	r2, r3
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aa78:	e057      	b.n	800ab2a <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	689b      	ldr	r3, [r3, #8]
 800aa80:	2202      	movs	r2, #2
 800aa82:	4013      	ands	r3, r2
 800aa84:	2b02      	cmp	r3, #2
 800aa86:	d11c      	bne.n	800aac2 <HAL_SPI_TransmitReceive+0x29a>
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aa8c:	b29b      	uxth	r3, r3
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d017      	beq.n	800aac2 <HAL_SPI_TransmitReceive+0x29a>
 800aa92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa94:	2b01      	cmp	r3, #1
 800aa96:	d114      	bne.n	800aac2 <HAL_SPI_TransmitReceive+0x29a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	330c      	adds	r3, #12
 800aaa2:	7812      	ldrb	r2, [r2, #0]
 800aaa4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaaa:	1c5a      	adds	r2, r3, #1
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aab4:	b29b      	uxth	r3, r3
 800aab6:	3b01      	subs	r3, #1
 800aab8:	b29a      	uxth	r2, r3
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800aabe:	2300      	movs	r3, #0
 800aac0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	689b      	ldr	r3, [r3, #8]
 800aac8:	2201      	movs	r2, #1
 800aaca:	4013      	ands	r3, r2
 800aacc:	2b01      	cmp	r3, #1
 800aace:	d119      	bne.n	800ab04 <HAL_SPI_TransmitReceive+0x2dc>
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aad4:	b29b      	uxth	r3, r3
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d014      	beq.n	800ab04 <HAL_SPI_TransmitReceive+0x2dc>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	68da      	ldr	r2, [r3, #12]
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aae4:	b2d2      	uxtb	r2, r2
 800aae6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaec:	1c5a      	adds	r2, r3, #1
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aaf6:	b29b      	uxth	r3, r3
 800aaf8:	3b01      	subs	r3, #1
 800aafa:	b29a      	uxth	r2, r3
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ab00:	2301      	movs	r3, #1
 800ab02:	62fb      	str	r3, [r7, #44]	; 0x2c
       // HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ab04:	f7fa f95b 	bl	8004dbe <HAL_GetTick>
 800ab08:	0002      	movs	r2, r0
 800ab0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab0c:	1ad3      	subs	r3, r2, r3
 800ab0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ab10:	429a      	cmp	r2, r3
 800ab12:	d802      	bhi.n	800ab1a <HAL_SPI_TransmitReceive+0x2f2>
 800ab14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab16:	3301      	adds	r3, #1
 800ab18:	d102      	bne.n	800ab20 <HAL_SPI_TransmitReceive+0x2f8>
 800ab1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d104      	bne.n	800ab2a <HAL_SPI_TransmitReceive+0x302>
      {
        errorcode = HAL_TIMEOUT;
 800ab20:	232b      	movs	r3, #43	; 0x2b
 800ab22:	18fb      	adds	r3, r7, r3
 800ab24:	2203      	movs	r2, #3
 800ab26:	701a      	strb	r2, [r3, #0]
        goto error;
 800ab28:	e02a      	b.n	800ab80 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ab2e:	b29b      	uxth	r3, r3
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d1a2      	bne.n	800aa7a <HAL_SPI_TransmitReceive+0x252>
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab38:	b29b      	uxth	r3, r3
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d19d      	bne.n	800aa7a <HAL_SPI_TransmitReceive+0x252>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ab3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	0018      	movs	r0, r3
 800ab46:	f000 f8c5 	bl	800acd4 <SPI_EndRxTxTransaction>
 800ab4a:	1e03      	subs	r3, r0, #0
 800ab4c:	d007      	beq.n	800ab5e <HAL_SPI_TransmitReceive+0x336>
  {
    errorcode = HAL_ERROR;
 800ab4e:	232b      	movs	r3, #43	; 0x2b
 800ab50:	18fb      	adds	r3, r7, r3
 800ab52:	2201      	movs	r2, #1
 800ab54:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	2220      	movs	r2, #32
 800ab5a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800ab5c:	e010      	b.n	800ab80 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	689b      	ldr	r3, [r3, #8]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d10b      	bne.n	800ab7e <HAL_SPI_TransmitReceive+0x356>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ab66:	2300      	movs	r3, #0
 800ab68:	617b      	str	r3, [r7, #20]
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	68db      	ldr	r3, [r3, #12]
 800ab70:	617b      	str	r3, [r7, #20]
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	689b      	ldr	r3, [r3, #8]
 800ab78:	617b      	str	r3, [r7, #20]
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	e000      	b.n	800ab80 <HAL_SPI_TransmitReceive+0x358>
  }

error :
 800ab7e:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	2251      	movs	r2, #81	; 0x51
 800ab84:	2101      	movs	r1, #1
 800ab86:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	2250      	movs	r2, #80	; 0x50
 800ab8c:	2100      	movs	r1, #0
 800ab8e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800ab90:	232b      	movs	r3, #43	; 0x2b
 800ab92:	18fb      	adds	r3, r7, r3
 800ab94:	781b      	ldrb	r3, [r3, #0]
}
 800ab96:	0018      	movs	r0, r3
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	b00c      	add	sp, #48	; 0x30
 800ab9c:	bd80      	pop	{r7, pc}

0800ab9e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800ab9e:	b580      	push	{r7, lr}
 800aba0:	b082      	sub	sp, #8
 800aba2:	af00      	add	r7, sp, #0
 800aba4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2251      	movs	r2, #81	; 0x51
 800abaa:	5c9b      	ldrb	r3, [r3, r2]
 800abac:	b2db      	uxtb	r3, r3
}
 800abae:	0018      	movs	r0, r3
 800abb0:	46bd      	mov	sp, r7
 800abb2:	b002      	add	sp, #8
 800abb4:	bd80      	pop	{r7, pc}
	...

0800abb8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b088      	sub	sp, #32
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	60f8      	str	r0, [r7, #12]
 800abc0:	60b9      	str	r1, [r7, #8]
 800abc2:	603b      	str	r3, [r7, #0]
 800abc4:	1dfb      	adds	r3, r7, #7
 800abc6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800abc8:	f7fa f8f9 	bl	8004dbe <HAL_GetTick>
 800abcc:	0002      	movs	r2, r0
 800abce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abd0:	1a9b      	subs	r3, r3, r2
 800abd2:	683a      	ldr	r2, [r7, #0]
 800abd4:	18d3      	adds	r3, r2, r3
 800abd6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800abd8:	f7fa f8f1 	bl	8004dbe <HAL_GetTick>
 800abdc:	0003      	movs	r3, r0
 800abde:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800abe0:	4b3a      	ldr	r3, [pc, #232]	; (800accc <SPI_WaitFlagStateUntilTimeout+0x114>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	015b      	lsls	r3, r3, #5
 800abe6:	0d1b      	lsrs	r3, r3, #20
 800abe8:	69fa      	ldr	r2, [r7, #28]
 800abea:	4353      	muls	r3, r2
 800abec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800abee:	e058      	b.n	800aca2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	3301      	adds	r3, #1
 800abf4:	d055      	beq.n	800aca2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800abf6:	f7fa f8e2 	bl	8004dbe <HAL_GetTick>
 800abfa:	0002      	movs	r2, r0
 800abfc:	69bb      	ldr	r3, [r7, #24]
 800abfe:	1ad3      	subs	r3, r2, r3
 800ac00:	69fa      	ldr	r2, [r7, #28]
 800ac02:	429a      	cmp	r2, r3
 800ac04:	d902      	bls.n	800ac0c <SPI_WaitFlagStateUntilTimeout+0x54>
 800ac06:	69fb      	ldr	r3, [r7, #28]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d142      	bne.n	800ac92 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	685a      	ldr	r2, [r3, #4]
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	21e0      	movs	r1, #224	; 0xe0
 800ac18:	438a      	bics	r2, r1
 800ac1a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	685a      	ldr	r2, [r3, #4]
 800ac20:	2382      	movs	r3, #130	; 0x82
 800ac22:	005b      	lsls	r3, r3, #1
 800ac24:	429a      	cmp	r2, r3
 800ac26:	d113      	bne.n	800ac50 <SPI_WaitFlagStateUntilTimeout+0x98>
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	689a      	ldr	r2, [r3, #8]
 800ac2c:	2380      	movs	r3, #128	; 0x80
 800ac2e:	021b      	lsls	r3, r3, #8
 800ac30:	429a      	cmp	r2, r3
 800ac32:	d005      	beq.n	800ac40 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	689a      	ldr	r2, [r3, #8]
 800ac38:	2380      	movs	r3, #128	; 0x80
 800ac3a:	00db      	lsls	r3, r3, #3
 800ac3c:	429a      	cmp	r2, r3
 800ac3e:	d107      	bne.n	800ac50 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	681a      	ldr	r2, [r3, #0]
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	2140      	movs	r1, #64	; 0x40
 800ac4c:	438a      	bics	r2, r1
 800ac4e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ac54:	2380      	movs	r3, #128	; 0x80
 800ac56:	019b      	lsls	r3, r3, #6
 800ac58:	429a      	cmp	r2, r3
 800ac5a:	d110      	bne.n	800ac7e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	681a      	ldr	r2, [r3, #0]
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	491a      	ldr	r1, [pc, #104]	; (800acd0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800ac68:	400a      	ands	r2, r1
 800ac6a:	601a      	str	r2, [r3, #0]
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	681a      	ldr	r2, [r3, #0]
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	2180      	movs	r1, #128	; 0x80
 800ac78:	0189      	lsls	r1, r1, #6
 800ac7a:	430a      	orrs	r2, r1
 800ac7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	2251      	movs	r2, #81	; 0x51
 800ac82:	2101      	movs	r1, #1
 800ac84:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	2250      	movs	r2, #80	; 0x50
 800ac8a:	2100      	movs	r1, #0
 800ac8c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800ac8e:	2303      	movs	r3, #3
 800ac90:	e017      	b.n	800acc2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800ac92:	697b      	ldr	r3, [r7, #20]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d101      	bne.n	800ac9c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800ac98:	2300      	movs	r3, #0
 800ac9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	3b01      	subs	r3, #1
 800aca0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	689b      	ldr	r3, [r3, #8]
 800aca8:	68ba      	ldr	r2, [r7, #8]
 800acaa:	4013      	ands	r3, r2
 800acac:	68ba      	ldr	r2, [r7, #8]
 800acae:	1ad3      	subs	r3, r2, r3
 800acb0:	425a      	negs	r2, r3
 800acb2:	4153      	adcs	r3, r2
 800acb4:	b2db      	uxtb	r3, r3
 800acb6:	001a      	movs	r2, r3
 800acb8:	1dfb      	adds	r3, r7, #7
 800acba:	781b      	ldrb	r3, [r3, #0]
 800acbc:	429a      	cmp	r2, r3
 800acbe:	d197      	bne.n	800abf0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800acc0:	2300      	movs	r3, #0
}
 800acc2:	0018      	movs	r0, r3
 800acc4:	46bd      	mov	sp, r7
 800acc6:	b008      	add	sp, #32
 800acc8:	bd80      	pop	{r7, pc}
 800acca:	46c0      	nop			; (mov r8, r8)
 800accc:	20000070 	.word	0x20000070
 800acd0:	ffffdfff 	.word	0xffffdfff

0800acd4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b088      	sub	sp, #32
 800acd8:	af02      	add	r7, sp, #8
 800acda:	60f8      	str	r0, [r7, #12]
 800acdc:	60b9      	str	r1, [r7, #8]
 800acde:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800ace0:	4b1d      	ldr	r3, [pc, #116]	; (800ad58 <SPI_EndRxTxTransaction+0x84>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	491d      	ldr	r1, [pc, #116]	; (800ad5c <SPI_EndRxTxTransaction+0x88>)
 800ace6:	0018      	movs	r0, r3
 800ace8:	f7f5 fa16 	bl	8000118 <__udivsi3>
 800acec:	0003      	movs	r3, r0
 800acee:	001a      	movs	r2, r3
 800acf0:	0013      	movs	r3, r2
 800acf2:	015b      	lsls	r3, r3, #5
 800acf4:	1a9b      	subs	r3, r3, r2
 800acf6:	009b      	lsls	r3, r3, #2
 800acf8:	189b      	adds	r3, r3, r2
 800acfa:	00db      	lsls	r3, r3, #3
 800acfc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	685a      	ldr	r2, [r3, #4]
 800ad02:	2382      	movs	r3, #130	; 0x82
 800ad04:	005b      	lsls	r3, r3, #1
 800ad06:	429a      	cmp	r2, r3
 800ad08:	d112      	bne.n	800ad30 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ad0a:	68ba      	ldr	r2, [r7, #8]
 800ad0c:	68f8      	ldr	r0, [r7, #12]
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	9300      	str	r3, [sp, #0]
 800ad12:	0013      	movs	r3, r2
 800ad14:	2200      	movs	r2, #0
 800ad16:	2180      	movs	r1, #128	; 0x80
 800ad18:	f7ff ff4e 	bl	800abb8 <SPI_WaitFlagStateUntilTimeout>
 800ad1c:	1e03      	subs	r3, r0, #0
 800ad1e:	d016      	beq.n	800ad4e <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad24:	2220      	movs	r2, #32
 800ad26:	431a      	orrs	r2, r3
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800ad2c:	2303      	movs	r3, #3
 800ad2e:	e00f      	b.n	800ad50 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d00a      	beq.n	800ad4c <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 800ad36:	697b      	ldr	r3, [r7, #20]
 800ad38:	3b01      	subs	r3, #1
 800ad3a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	689b      	ldr	r3, [r3, #8]
 800ad42:	2280      	movs	r2, #128	; 0x80
 800ad44:	4013      	ands	r3, r2
 800ad46:	2b80      	cmp	r3, #128	; 0x80
 800ad48:	d0f2      	beq.n	800ad30 <SPI_EndRxTxTransaction+0x5c>
 800ad4a:	e000      	b.n	800ad4e <SPI_EndRxTxTransaction+0x7a>
        break;
 800ad4c:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 800ad4e:	2300      	movs	r3, #0
}
 800ad50:	0018      	movs	r0, r3
 800ad52:	46bd      	mov	sp, r7
 800ad54:	b006      	add	sp, #24
 800ad56:	bd80      	pop	{r7, pc}
 800ad58:	20000070 	.word	0x20000070
 800ad5c:	016e3600 	.word	0x016e3600

0800ad60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b082      	sub	sp, #8
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d101      	bne.n	800ad72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ad6e:	2301      	movs	r3, #1
 800ad70:	e044      	b.n	800adfc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d107      	bne.n	800ad8a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	2274      	movs	r2, #116	; 0x74
 800ad7e:	2100      	movs	r1, #0
 800ad80:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	0018      	movs	r0, r3
 800ad86:	f7fa f901 	bl	8004f8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2224      	movs	r2, #36	; 0x24
 800ad8e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	681a      	ldr	r2, [r3, #0]
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	2101      	movs	r1, #1
 800ad9c:	438a      	bics	r2, r1
 800ad9e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	0018      	movs	r0, r3
 800ada4:	f000 fb3a 	bl	800b41c <UART_SetConfig>
 800ada8:	0003      	movs	r3, r0
 800adaa:	2b01      	cmp	r3, #1
 800adac:	d101      	bne.n	800adb2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800adae:	2301      	movs	r3, #1
 800adb0:	e024      	b.n	800adfc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d003      	beq.n	800adc2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	0018      	movs	r0, r3
 800adbe:	f000 fdeb 	bl	800b998 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	685a      	ldr	r2, [r3, #4]
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	490d      	ldr	r1, [pc, #52]	; (800ae04 <HAL_UART_Init+0xa4>)
 800adce:	400a      	ands	r2, r1
 800add0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	689a      	ldr	r2, [r3, #8]
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	212a      	movs	r1, #42	; 0x2a
 800adde:	438a      	bics	r2, r1
 800ade0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	681a      	ldr	r2, [r3, #0]
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	2101      	movs	r1, #1
 800adee:	430a      	orrs	r2, r1
 800adf0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	0018      	movs	r0, r3
 800adf6:	f000 fe83 	bl	800bb00 <UART_CheckIdleState>
 800adfa:	0003      	movs	r3, r0
}
 800adfc:	0018      	movs	r0, r3
 800adfe:	46bd      	mov	sp, r7
 800ae00:	b002      	add	sp, #8
 800ae02:	bd80      	pop	{r7, pc}
 800ae04:	ffffb7ff 	.word	0xffffb7ff

0800ae08 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b084      	sub	sp, #16
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	60f8      	str	r0, [r7, #12]
 800ae10:	60b9      	str	r1, [r7, #8]
 800ae12:	1dbb      	adds	r3, r7, #6
 800ae14:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae1a:	2b20      	cmp	r3, #32
 800ae1c:	d144      	bne.n	800aea8 <HAL_UART_Receive_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 800ae1e:	68bb      	ldr	r3, [r7, #8]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d003      	beq.n	800ae2c <HAL_UART_Receive_IT+0x24>
 800ae24:	1dbb      	adds	r3, r7, #6
 800ae26:	881b      	ldrh	r3, [r3, #0]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d101      	bne.n	800ae30 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800ae2c:	2301      	movs	r3, #1
 800ae2e:	e03c      	b.n	800aeaa <HAL_UART_Receive_IT+0xa2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	689a      	ldr	r2, [r3, #8]
 800ae34:	2380      	movs	r3, #128	; 0x80
 800ae36:	015b      	lsls	r3, r3, #5
 800ae38:	429a      	cmp	r2, r3
 800ae3a:	d109      	bne.n	800ae50 <HAL_UART_Receive_IT+0x48>
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	691b      	ldr	r3, [r3, #16]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d105      	bne.n	800ae50 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	2201      	movs	r2, #1
 800ae48:	4013      	ands	r3, r2
 800ae4a:	d001      	beq.n	800ae50 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	e02c      	b.n	800aeaa <HAL_UART_Receive_IT+0xa2>
      }
    }

    __HAL_LOCK(huart);
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	2274      	movs	r2, #116	; 0x74
 800ae54:	5c9b      	ldrb	r3, [r3, r2]
 800ae56:	2b01      	cmp	r3, #1
 800ae58:	d101      	bne.n	800ae5e <HAL_UART_Receive_IT+0x56>
 800ae5a:	2302      	movs	r3, #2
 800ae5c:	e025      	b.n	800aeaa <HAL_UART_Receive_IT+0xa2>
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	2274      	movs	r2, #116	; 0x74
 800ae62:	2101      	movs	r1, #1
 800ae64:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	2200      	movs	r2, #0
 800ae6a:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	4a10      	ldr	r2, [pc, #64]	; (800aeb4 <HAL_UART_Receive_IT+0xac>)
 800ae72:	4293      	cmp	r3, r2
 800ae74:	d00f      	beq.n	800ae96 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	685a      	ldr	r2, [r3, #4]
 800ae7c:	2380      	movs	r3, #128	; 0x80
 800ae7e:	041b      	lsls	r3, r3, #16
 800ae80:	4013      	ands	r3, r2
 800ae82:	d008      	beq.n	800ae96 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	681a      	ldr	r2, [r3, #0]
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	2180      	movs	r1, #128	; 0x80
 800ae90:	04c9      	lsls	r1, r1, #19
 800ae92:	430a      	orrs	r2, r1
 800ae94:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 800ae96:	1dbb      	adds	r3, r7, #6
 800ae98:	881a      	ldrh	r2, [r3, #0]
 800ae9a:	68b9      	ldr	r1, [r7, #8]
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	0018      	movs	r0, r3
 800aea0:	f000 fef4 	bl	800bc8c <UART_Start_Receive_IT>
 800aea4:	0003      	movs	r3, r0
 800aea6:	e000      	b.n	800aeaa <HAL_UART_Receive_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 800aea8:	2302      	movs	r3, #2
  }
}
 800aeaa:	0018      	movs	r0, r3
 800aeac:	46bd      	mov	sp, r7
 800aeae:	b004      	add	sp, #16
 800aeb0:	bd80      	pop	{r7, pc}
 800aeb2:	46c0      	nop			; (mov r8, r8)
 800aeb4:	40004800 	.word	0x40004800

0800aeb8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b084      	sub	sp, #16
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	60f8      	str	r0, [r7, #12]
 800aec0:	60b9      	str	r1, [r7, #8]
 800aec2:	1dbb      	adds	r3, r7, #6
 800aec4:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aeca:	2b20      	cmp	r3, #32
 800aecc:	d000      	beq.n	800aed0 <HAL_UART_Transmit_DMA+0x18>
 800aece:	e079      	b.n	800afc4 <HAL_UART_Transmit_DMA+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d003      	beq.n	800aede <HAL_UART_Transmit_DMA+0x26>
 800aed6:	1dbb      	adds	r3, r7, #6
 800aed8:	881b      	ldrh	r3, [r3, #0]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d101      	bne.n	800aee2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800aede:	2301      	movs	r3, #1
 800aee0:	e071      	b.n	800afc6 <HAL_UART_Transmit_DMA+0x10e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	689a      	ldr	r2, [r3, #8]
 800aee6:	2380      	movs	r3, #128	; 0x80
 800aee8:	015b      	lsls	r3, r3, #5
 800aeea:	429a      	cmp	r2, r3
 800aeec:	d109      	bne.n	800af02 <HAL_UART_Transmit_DMA+0x4a>
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	691b      	ldr	r3, [r3, #16]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d105      	bne.n	800af02 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	2201      	movs	r2, #1
 800aefa:	4013      	ands	r3, r2
 800aefc:	d001      	beq.n	800af02 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 800aefe:	2301      	movs	r3, #1
 800af00:	e061      	b.n	800afc6 <HAL_UART_Transmit_DMA+0x10e>
      }
    }

    __HAL_LOCK(huart);
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	2274      	movs	r2, #116	; 0x74
 800af06:	5c9b      	ldrb	r3, [r3, r2]
 800af08:	2b01      	cmp	r3, #1
 800af0a:	d101      	bne.n	800af10 <HAL_UART_Transmit_DMA+0x58>
 800af0c:	2302      	movs	r3, #2
 800af0e:	e05a      	b.n	800afc6 <HAL_UART_Transmit_DMA+0x10e>
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	2274      	movs	r2, #116	; 0x74
 800af14:	2101      	movs	r1, #1
 800af16:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	68ba      	ldr	r2, [r7, #8]
 800af1c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	1dba      	adds	r2, r7, #6
 800af22:	2150      	movs	r1, #80	; 0x50
 800af24:	8812      	ldrh	r2, [r2, #0]
 800af26:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	1dba      	adds	r2, r7, #6
 800af2c:	2152      	movs	r1, #82	; 0x52
 800af2e:	8812      	ldrh	r2, [r2, #0]
 800af30:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	2280      	movs	r2, #128	; 0x80
 800af36:	2100      	movs	r1, #0
 800af38:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	2221      	movs	r2, #33	; 0x21
 800af3e:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af44:	2b00      	cmp	r3, #0
 800af46:	d02b      	beq.n	800afa0 <HAL_UART_Transmit_DMA+0xe8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af4c:	4a20      	ldr	r2, [pc, #128]	; (800afd0 <HAL_UART_Transmit_DMA+0x118>)
 800af4e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af54:	4a1f      	ldr	r2, [pc, #124]	; (800afd4 <HAL_UART_Transmit_DMA+0x11c>)
 800af56:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af5c:	4a1e      	ldr	r2, [pc, #120]	; (800afd8 <HAL_UART_Transmit_DMA+0x120>)
 800af5e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af64:	2200      	movs	r2, #0
 800af66:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af70:	0019      	movs	r1, r3
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	3328      	adds	r3, #40	; 0x28
 800af78:	001a      	movs	r2, r3
 800af7a:	1dbb      	adds	r3, r7, #6
 800af7c:	881b      	ldrh	r3, [r3, #0]
 800af7e:	f7fc f915 	bl	80071ac <HAL_DMA_Start_IT>
 800af82:	1e03      	subs	r3, r0, #0
 800af84:	d00c      	beq.n	800afa0 <HAL_UART_Transmit_DMA+0xe8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	2280      	movs	r2, #128	; 0x80
 800af8a:	2110      	movs	r1, #16
 800af8c:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	2274      	movs	r2, #116	; 0x74
 800af92:	2100      	movs	r1, #0
 800af94:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	2220      	movs	r2, #32
 800af9a:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 800af9c:	2301      	movs	r3, #1
 800af9e:	e012      	b.n	800afc6 <HAL_UART_Transmit_DMA+0x10e>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	2240      	movs	r2, #64	; 0x40
 800afa6:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	2274      	movs	r2, #116	; 0x74
 800afac:	2100      	movs	r1, #0
 800afae:	5499      	strb	r1, [r3, r2]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	689a      	ldr	r2, [r3, #8]
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	2180      	movs	r1, #128	; 0x80
 800afbc:	430a      	orrs	r2, r1
 800afbe:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800afc0:	2300      	movs	r3, #0
 800afc2:	e000      	b.n	800afc6 <HAL_UART_Transmit_DMA+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800afc4:	2302      	movs	r3, #2
  }
}
 800afc6:	0018      	movs	r0, r3
 800afc8:	46bd      	mov	sp, r7
 800afca:	b004      	add	sp, #16
 800afcc:	bd80      	pop	{r7, pc}
 800afce:	46c0      	nop			; (mov r8, r8)
 800afd0:	0800be31 	.word	0x0800be31
 800afd4:	0800be85 	.word	0x0800be85
 800afd8:	0800bea3 	.word	0x0800bea3

0800afdc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b088      	sub	sp, #32
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	69db      	ldr	r3, [r3, #28]
 800afea:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	689b      	ldr	r3, [r3, #8]
 800affa:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800affc:	69fb      	ldr	r3, [r7, #28]
 800affe:	4ab5      	ldr	r2, [pc, #724]	; (800b2d4 <HAL_UART_IRQHandler+0x2f8>)
 800b000:	4013      	ands	r3, r2
 800b002:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800b004:	693b      	ldr	r3, [r7, #16]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d112      	bne.n	800b030 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800b00a:	69fb      	ldr	r3, [r7, #28]
 800b00c:	2220      	movs	r2, #32
 800b00e:	4013      	ands	r3, r2
 800b010:	d00e      	beq.n	800b030 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b012:	69bb      	ldr	r3, [r7, #24]
 800b014:	2220      	movs	r2, #32
 800b016:	4013      	ands	r3, r2
 800b018:	d00a      	beq.n	800b030 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d100      	bne.n	800b024 <HAL_UART_IRQHandler+0x48>
 800b022:	e1d1      	b.n	800b3c8 <HAL_UART_IRQHandler+0x3ec>
      {
        huart->RxISR(huart);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b028:	687a      	ldr	r2, [r7, #4]
 800b02a:	0010      	movs	r0, r2
 800b02c:	4798      	blx	r3
      }
      return;
 800b02e:	e1cb      	b.n	800b3c8 <HAL_UART_IRQHandler+0x3ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b030:	693b      	ldr	r3, [r7, #16]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d100      	bne.n	800b038 <HAL_UART_IRQHandler+0x5c>
 800b036:	e0d9      	b.n	800b1ec <HAL_UART_IRQHandler+0x210>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800b038:	697b      	ldr	r3, [r7, #20]
 800b03a:	2201      	movs	r2, #1
 800b03c:	4013      	ands	r3, r2
 800b03e:	d104      	bne.n	800b04a <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800b040:	69bb      	ldr	r3, [r7, #24]
 800b042:	4aa5      	ldr	r2, [pc, #660]	; (800b2d8 <HAL_UART_IRQHandler+0x2fc>)
 800b044:	4013      	ands	r3, r2
 800b046:	d100      	bne.n	800b04a <HAL_UART_IRQHandler+0x6e>
 800b048:	e0d0      	b.n	800b1ec <HAL_UART_IRQHandler+0x210>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b04a:	69fb      	ldr	r3, [r7, #28]
 800b04c:	2201      	movs	r2, #1
 800b04e:	4013      	ands	r3, r2
 800b050:	d010      	beq.n	800b074 <HAL_UART_IRQHandler+0x98>
 800b052:	69ba      	ldr	r2, [r7, #24]
 800b054:	2380      	movs	r3, #128	; 0x80
 800b056:	005b      	lsls	r3, r3, #1
 800b058:	4013      	ands	r3, r2
 800b05a:	d00b      	beq.n	800b074 <HAL_UART_IRQHandler+0x98>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	2201      	movs	r2, #1
 800b062:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2280      	movs	r2, #128	; 0x80
 800b068:	589b      	ldr	r3, [r3, r2]
 800b06a:	2201      	movs	r2, #1
 800b06c:	431a      	orrs	r2, r3
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	2180      	movs	r1, #128	; 0x80
 800b072:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b074:	69fb      	ldr	r3, [r7, #28]
 800b076:	2202      	movs	r2, #2
 800b078:	4013      	ands	r3, r2
 800b07a:	d00f      	beq.n	800b09c <HAL_UART_IRQHandler+0xc0>
 800b07c:	697b      	ldr	r3, [r7, #20]
 800b07e:	2201      	movs	r2, #1
 800b080:	4013      	ands	r3, r2
 800b082:	d00b      	beq.n	800b09c <HAL_UART_IRQHandler+0xc0>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	2202      	movs	r2, #2
 800b08a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2280      	movs	r2, #128	; 0x80
 800b090:	589b      	ldr	r3, [r3, r2]
 800b092:	2204      	movs	r2, #4
 800b094:	431a      	orrs	r2, r3
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2180      	movs	r1, #128	; 0x80
 800b09a:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b09c:	69fb      	ldr	r3, [r7, #28]
 800b09e:	2204      	movs	r2, #4
 800b0a0:	4013      	ands	r3, r2
 800b0a2:	d00f      	beq.n	800b0c4 <HAL_UART_IRQHandler+0xe8>
 800b0a4:	697b      	ldr	r3, [r7, #20]
 800b0a6:	2201      	movs	r2, #1
 800b0a8:	4013      	ands	r3, r2
 800b0aa:	d00b      	beq.n	800b0c4 <HAL_UART_IRQHandler+0xe8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	2204      	movs	r2, #4
 800b0b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2280      	movs	r2, #128	; 0x80
 800b0b8:	589b      	ldr	r3, [r3, r2]
 800b0ba:	2202      	movs	r2, #2
 800b0bc:	431a      	orrs	r2, r3
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2180      	movs	r1, #128	; 0x80
 800b0c2:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b0c4:	69fb      	ldr	r3, [r7, #28]
 800b0c6:	2208      	movs	r2, #8
 800b0c8:	4013      	ands	r3, r2
 800b0ca:	d013      	beq.n	800b0f4 <HAL_UART_IRQHandler+0x118>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b0cc:	69bb      	ldr	r3, [r7, #24]
 800b0ce:	2220      	movs	r2, #32
 800b0d0:	4013      	ands	r3, r2
 800b0d2:	d103      	bne.n	800b0dc <HAL_UART_IRQHandler+0x100>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800b0d4:	697b      	ldr	r3, [r7, #20]
 800b0d6:	2201      	movs	r2, #1
 800b0d8:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b0da:	d00b      	beq.n	800b0f4 <HAL_UART_IRQHandler+0x118>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	2208      	movs	r2, #8
 800b0e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2280      	movs	r2, #128	; 0x80
 800b0e8:	589b      	ldr	r3, [r3, r2]
 800b0ea:	2208      	movs	r2, #8
 800b0ec:	431a      	orrs	r2, r3
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2180      	movs	r1, #128	; 0x80
 800b0f2:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b0f4:	69fa      	ldr	r2, [r7, #28]
 800b0f6:	2380      	movs	r3, #128	; 0x80
 800b0f8:	011b      	lsls	r3, r3, #4
 800b0fa:	4013      	ands	r3, r2
 800b0fc:	d011      	beq.n	800b122 <HAL_UART_IRQHandler+0x146>
 800b0fe:	69ba      	ldr	r2, [r7, #24]
 800b100:	2380      	movs	r3, #128	; 0x80
 800b102:	04db      	lsls	r3, r3, #19
 800b104:	4013      	ands	r3, r2
 800b106:	d00c      	beq.n	800b122 <HAL_UART_IRQHandler+0x146>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	2280      	movs	r2, #128	; 0x80
 800b10e:	0112      	lsls	r2, r2, #4
 800b110:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2280      	movs	r2, #128	; 0x80
 800b116:	589b      	ldr	r3, [r3, r2]
 800b118:	2220      	movs	r2, #32
 800b11a:	431a      	orrs	r2, r3
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2180      	movs	r1, #128	; 0x80
 800b120:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2280      	movs	r2, #128	; 0x80
 800b126:	589b      	ldr	r3, [r3, r2]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d100      	bne.n	800b12e <HAL_UART_IRQHandler+0x152>
 800b12c:	e14e      	b.n	800b3cc <HAL_UART_IRQHandler+0x3f0>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800b12e:	69fb      	ldr	r3, [r7, #28]
 800b130:	2220      	movs	r2, #32
 800b132:	4013      	ands	r3, r2
 800b134:	d00c      	beq.n	800b150 <HAL_UART_IRQHandler+0x174>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b136:	69bb      	ldr	r3, [r7, #24]
 800b138:	2220      	movs	r2, #32
 800b13a:	4013      	ands	r3, r2
 800b13c:	d008      	beq.n	800b150 <HAL_UART_IRQHandler+0x174>
      {
        if (huart->RxISR != NULL)
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b142:	2b00      	cmp	r3, #0
 800b144:	d004      	beq.n	800b150 <HAL_UART_IRQHandler+0x174>
        {
          huart->RxISR(huart);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b14a:	687a      	ldr	r2, [r7, #4]
 800b14c:	0010      	movs	r0, r2
 800b14e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2280      	movs	r2, #128	; 0x80
 800b154:	589b      	ldr	r3, [r3, r2]
 800b156:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	689b      	ldr	r3, [r3, #8]
 800b15e:	2240      	movs	r2, #64	; 0x40
 800b160:	4013      	ands	r3, r2
 800b162:	2b40      	cmp	r3, #64	; 0x40
 800b164:	d003      	beq.n	800b16e <HAL_UART_IRQHandler+0x192>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	2228      	movs	r2, #40	; 0x28
 800b16a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b16c:	d033      	beq.n	800b1d6 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	0018      	movs	r0, r3
 800b172:	f000 fe2d 	bl	800bdd0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	689b      	ldr	r3, [r3, #8]
 800b17c:	2240      	movs	r2, #64	; 0x40
 800b17e:	4013      	ands	r3, r2
 800b180:	2b40      	cmp	r3, #64	; 0x40
 800b182:	d123      	bne.n	800b1cc <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	689a      	ldr	r2, [r3, #8]
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	2140      	movs	r1, #64	; 0x40
 800b190:	438a      	bics	r2, r1
 800b192:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d012      	beq.n	800b1c2 <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1a0:	4a4e      	ldr	r2, [pc, #312]	; (800b2dc <HAL_UART_IRQHandler+0x300>)
 800b1a2:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1a8:	0018      	movs	r0, r3
 800b1aa:	f7fc f8a5 	bl	80072f8 <HAL_DMA_Abort_IT>
 800b1ae:	1e03      	subs	r3, r0, #0
 800b1b0:	d01a      	beq.n	800b1e8 <HAL_UART_IRQHandler+0x20c>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1bc:	0018      	movs	r0, r3
 800b1be:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1c0:	e012      	b.n	800b1e8 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	0018      	movs	r0, r3
 800b1c6:	f000 f915 	bl	800b3f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1ca:	e00d      	b.n	800b1e8 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	0018      	movs	r0, r3
 800b1d0:	f000 f910 	bl	800b3f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1d4:	e008      	b.n	800b1e8 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	0018      	movs	r0, r3
 800b1da:	f000 f90b 	bl	800b3f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2280      	movs	r2, #128	; 0x80
 800b1e2:	2100      	movs	r1, #0
 800b1e4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800b1e6:	e0f1      	b.n	800b3cc <HAL_UART_IRQHandler+0x3f0>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1e8:	46c0      	nop			; (mov r8, r8)
    return;
 800b1ea:	e0ef      	b.n	800b3cc <HAL_UART_IRQHandler+0x3f0>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b1f0:	2b01      	cmp	r3, #1
 800b1f2:	d000      	beq.n	800b1f6 <HAL_UART_IRQHandler+0x21a>
 800b1f4:	e0b5      	b.n	800b362 <HAL_UART_IRQHandler+0x386>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800b1f6:	69fb      	ldr	r3, [r7, #28]
 800b1f8:	2210      	movs	r2, #16
 800b1fa:	4013      	ands	r3, r2
 800b1fc:	d100      	bne.n	800b200 <HAL_UART_IRQHandler+0x224>
 800b1fe:	e0b0      	b.n	800b362 <HAL_UART_IRQHandler+0x386>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800b200:	69bb      	ldr	r3, [r7, #24]
 800b202:	2210      	movs	r2, #16
 800b204:	4013      	ands	r3, r2
 800b206:	d100      	bne.n	800b20a <HAL_UART_IRQHandler+0x22e>
 800b208:	e0ab      	b.n	800b362 <HAL_UART_IRQHandler+0x386>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	2210      	movs	r2, #16
 800b210:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	689b      	ldr	r3, [r3, #8]
 800b218:	2240      	movs	r2, #64	; 0x40
 800b21a:	4013      	ands	r3, r2
 800b21c:	2b40      	cmp	r3, #64	; 0x40
 800b21e:	d161      	bne.n	800b2e4 <HAL_UART_IRQHandler+0x308>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	685a      	ldr	r2, [r3, #4]
 800b228:	2108      	movs	r1, #8
 800b22a:	187b      	adds	r3, r7, r1
 800b22c:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 800b22e:	187b      	adds	r3, r7, r1
 800b230:	881b      	ldrh	r3, [r3, #0]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d100      	bne.n	800b238 <HAL_UART_IRQHandler+0x25c>
 800b236:	e0cb      	b.n	800b3d0 <HAL_UART_IRQHandler+0x3f4>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2258      	movs	r2, #88	; 0x58
 800b23c:	5a9b      	ldrh	r3, [r3, r2]
 800b23e:	187a      	adds	r2, r7, r1
 800b240:	8812      	ldrh	r2, [r2, #0]
 800b242:	429a      	cmp	r2, r3
 800b244:	d300      	bcc.n	800b248 <HAL_UART_IRQHandler+0x26c>
 800b246:	e0c3      	b.n	800b3d0 <HAL_UART_IRQHandler+0x3f4>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	187a      	adds	r2, r7, r1
 800b24c:	215a      	movs	r1, #90	; 0x5a
 800b24e:	8812      	ldrh	r2, [r2, #0]
 800b250:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	2220      	movs	r2, #32
 800b25c:	4013      	ands	r3, r2
 800b25e:	d12a      	bne.n	800b2b6 <HAL_UART_IRQHandler+0x2da>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	681a      	ldr	r2, [r3, #0]
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	491d      	ldr	r1, [pc, #116]	; (800b2e0 <HAL_UART_IRQHandler+0x304>)
 800b26c:	400a      	ands	r2, r1
 800b26e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	689a      	ldr	r2, [r3, #8]
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	2101      	movs	r1, #1
 800b27c:	438a      	bics	r2, r1
 800b27e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	689a      	ldr	r2, [r3, #8]
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	2140      	movs	r1, #64	; 0x40
 800b28c:	438a      	bics	r2, r1
 800b28e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2220      	movs	r2, #32
 800b294:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2200      	movs	r2, #0
 800b29a:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	681a      	ldr	r2, [r3, #0]
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	2110      	movs	r1, #16
 800b2a8:	438a      	bics	r2, r1
 800b2aa:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2b0:	0018      	movs	r0, r3
 800b2b2:	f7fb ffe1 	bl	8007278 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2258      	movs	r2, #88	; 0x58
 800b2ba:	5a9a      	ldrh	r2, [r3, r2]
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	215a      	movs	r1, #90	; 0x5a
 800b2c0:	5a5b      	ldrh	r3, [r3, r1]
 800b2c2:	b29b      	uxth	r3, r3
 800b2c4:	1ad3      	subs	r3, r2, r3
 800b2c6:	b29a      	uxth	r2, r3
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	0011      	movs	r1, r2
 800b2cc:	0018      	movs	r0, r3
 800b2ce:	f000 f899 	bl	800b404 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800b2d2:	e07d      	b.n	800b3d0 <HAL_UART_IRQHandler+0x3f4>
 800b2d4:	0000080f 	.word	0x0000080f
 800b2d8:	04000120 	.word	0x04000120
 800b2dc:	0800bf25 	.word	0x0800bf25
 800b2e0:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2258      	movs	r2, #88	; 0x58
 800b2e8:	5a99      	ldrh	r1, [r3, r2]
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	225a      	movs	r2, #90	; 0x5a
 800b2ee:	5a9b      	ldrh	r3, [r3, r2]
 800b2f0:	b29a      	uxth	r2, r3
 800b2f2:	200a      	movs	r0, #10
 800b2f4:	183b      	adds	r3, r7, r0
 800b2f6:	1a8a      	subs	r2, r1, r2
 800b2f8:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	225a      	movs	r2, #90	; 0x5a
 800b2fe:	5a9b      	ldrh	r3, [r3, r2]
 800b300:	b29b      	uxth	r3, r3
 800b302:	2b00      	cmp	r3, #0
 800b304:	d100      	bne.n	800b308 <HAL_UART_IRQHandler+0x32c>
 800b306:	e065      	b.n	800b3d4 <HAL_UART_IRQHandler+0x3f8>
          &&(nb_rx_data > 0U) )
 800b308:	183b      	adds	r3, r7, r0
 800b30a:	881b      	ldrh	r3, [r3, #0]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d061      	beq.n	800b3d4 <HAL_UART_IRQHandler+0x3f8>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	681a      	ldr	r2, [r3, #0]
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	4931      	ldr	r1, [pc, #196]	; (800b3e0 <HAL_UART_IRQHandler+0x404>)
 800b31c:	400a      	ands	r2, r1
 800b31e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	689a      	ldr	r2, [r3, #8]
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	2101      	movs	r1, #1
 800b32c:	438a      	bics	r2, r1
 800b32e:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2220      	movs	r2, #32
 800b334:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2200      	movs	r2, #0
 800b33a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2200      	movs	r2, #0
 800b340:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	681a      	ldr	r2, [r3, #0]
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	2110      	movs	r1, #16
 800b34e:	438a      	bics	r2, r1
 800b350:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b352:	183b      	adds	r3, r7, r0
 800b354:	881a      	ldrh	r2, [r3, #0]
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	0011      	movs	r1, r2
 800b35a:	0018      	movs	r0, r3
 800b35c:	f000 f852 	bl	800b404 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800b360:	e038      	b.n	800b3d4 <HAL_UART_IRQHandler+0x3f8>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b362:	69fa      	ldr	r2, [r7, #28]
 800b364:	2380      	movs	r3, #128	; 0x80
 800b366:	035b      	lsls	r3, r3, #13
 800b368:	4013      	ands	r3, r2
 800b36a:	d00e      	beq.n	800b38a <HAL_UART_IRQHandler+0x3ae>
 800b36c:	697a      	ldr	r2, [r7, #20]
 800b36e:	2380      	movs	r3, #128	; 0x80
 800b370:	03db      	lsls	r3, r3, #15
 800b372:	4013      	ands	r3, r2
 800b374:	d009      	beq.n	800b38a <HAL_UART_IRQHandler+0x3ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	2280      	movs	r2, #128	; 0x80
 800b37c:	0352      	lsls	r2, r2, #13
 800b37e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	0018      	movs	r0, r3
 800b384:	f000 fee8 	bl	800c158 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b388:	e027      	b.n	800b3da <HAL_UART_IRQHandler+0x3fe>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b38a:	69fb      	ldr	r3, [r7, #28]
 800b38c:	2280      	movs	r2, #128	; 0x80
 800b38e:	4013      	ands	r3, r2
 800b390:	d00d      	beq.n	800b3ae <HAL_UART_IRQHandler+0x3d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b392:	69bb      	ldr	r3, [r7, #24]
 800b394:	2280      	movs	r2, #128	; 0x80
 800b396:	4013      	ands	r3, r2
 800b398:	d009      	beq.n	800b3ae <HAL_UART_IRQHandler+0x3d2>
  {
    if (huart->TxISR != NULL)
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d01a      	beq.n	800b3d8 <HAL_UART_IRQHandler+0x3fc>
    {
      huart->TxISR(huart);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b3a6:	687a      	ldr	r2, [r7, #4]
 800b3a8:	0010      	movs	r0, r2
 800b3aa:	4798      	blx	r3
    }
    return;
 800b3ac:	e014      	b.n	800b3d8 <HAL_UART_IRQHandler+0x3fc>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b3ae:	69fb      	ldr	r3, [r7, #28]
 800b3b0:	2240      	movs	r2, #64	; 0x40
 800b3b2:	4013      	ands	r3, r2
 800b3b4:	d011      	beq.n	800b3da <HAL_UART_IRQHandler+0x3fe>
 800b3b6:	69bb      	ldr	r3, [r7, #24]
 800b3b8:	2240      	movs	r2, #64	; 0x40
 800b3ba:	4013      	ands	r3, r2
 800b3bc:	d00d      	beq.n	800b3da <HAL_UART_IRQHandler+0x3fe>
  {
    UART_EndTransmit_IT(huart);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	0018      	movs	r0, r3
 800b3c2:	f000 fdc6 	bl	800bf52 <UART_EndTransmit_IT>
    return;
 800b3c6:	e008      	b.n	800b3da <HAL_UART_IRQHandler+0x3fe>
      return;
 800b3c8:	46c0      	nop			; (mov r8, r8)
 800b3ca:	e006      	b.n	800b3da <HAL_UART_IRQHandler+0x3fe>
    return;
 800b3cc:	46c0      	nop			; (mov r8, r8)
 800b3ce:	e004      	b.n	800b3da <HAL_UART_IRQHandler+0x3fe>
      return;
 800b3d0:	46c0      	nop			; (mov r8, r8)
 800b3d2:	e002      	b.n	800b3da <HAL_UART_IRQHandler+0x3fe>
      return;
 800b3d4:	46c0      	nop			; (mov r8, r8)
 800b3d6:	e000      	b.n	800b3da <HAL_UART_IRQHandler+0x3fe>
    return;
 800b3d8:	46c0      	nop			; (mov r8, r8)
  }

}
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	b008      	add	sp, #32
 800b3de:	bd80      	pop	{r7, pc}
 800b3e0:	fffffedf 	.word	0xfffffedf

0800b3e4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b082      	sub	sp, #8
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b3ec:	46c0      	nop			; (mov r8, r8)
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	b002      	add	sp, #8
 800b3f2:	bd80      	pop	{r7, pc}

0800b3f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b082      	sub	sp, #8
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b3fc:	46c0      	nop			; (mov r8, r8)
 800b3fe:	46bd      	mov	sp, r7
 800b400:	b002      	add	sp, #8
 800b402:	bd80      	pop	{r7, pc}

0800b404 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b082      	sub	sp, #8
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
 800b40c:	000a      	movs	r2, r1
 800b40e:	1cbb      	adds	r3, r7, #2
 800b410:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b412:	46c0      	nop			; (mov r8, r8)
 800b414:	46bd      	mov	sp, r7
 800b416:	b002      	add	sp, #8
 800b418:	bd80      	pop	{r7, pc}
	...

0800b41c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b41c:	b5b0      	push	{r4, r5, r7, lr}
 800b41e:	b08e      	sub	sp, #56	; 0x38
 800b420:	af00      	add	r7, sp, #0
 800b422:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b424:	231a      	movs	r3, #26
 800b426:	2218      	movs	r2, #24
 800b428:	4694      	mov	ip, r2
 800b42a:	44bc      	add	ip, r7
 800b42c:	4463      	add	r3, ip
 800b42e:	2200      	movs	r2, #0
 800b430:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b432:	69fb      	ldr	r3, [r7, #28]
 800b434:	689a      	ldr	r2, [r3, #8]
 800b436:	69fb      	ldr	r3, [r7, #28]
 800b438:	691b      	ldr	r3, [r3, #16]
 800b43a:	431a      	orrs	r2, r3
 800b43c:	69fb      	ldr	r3, [r7, #28]
 800b43e:	695b      	ldr	r3, [r3, #20]
 800b440:	431a      	orrs	r2, r3
 800b442:	69fb      	ldr	r3, [r7, #28]
 800b444:	69db      	ldr	r3, [r3, #28]
 800b446:	4313      	orrs	r3, r2
 800b448:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b44a:	69fb      	ldr	r3, [r7, #28]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	4ab0      	ldr	r2, [pc, #704]	; (800b714 <UART_SetConfig+0x2f8>)
 800b452:	4013      	ands	r3, r2
 800b454:	0019      	movs	r1, r3
 800b456:	69fb      	ldr	r3, [r7, #28]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b45c:	430a      	orrs	r2, r1
 800b45e:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b460:	69fb      	ldr	r3, [r7, #28]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	685b      	ldr	r3, [r3, #4]
 800b466:	4aac      	ldr	r2, [pc, #688]	; (800b718 <UART_SetConfig+0x2fc>)
 800b468:	4013      	ands	r3, r2
 800b46a:	0019      	movs	r1, r3
 800b46c:	69fb      	ldr	r3, [r7, #28]
 800b46e:	68da      	ldr	r2, [r3, #12]
 800b470:	69fb      	ldr	r3, [r7, #28]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	430a      	orrs	r2, r1
 800b476:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b478:	69fb      	ldr	r3, [r7, #28]
 800b47a:	699b      	ldr	r3, [r3, #24]
 800b47c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b47e:	69fb      	ldr	r3, [r7, #28]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	4aa6      	ldr	r2, [pc, #664]	; (800b71c <UART_SetConfig+0x300>)
 800b484:	4293      	cmp	r3, r2
 800b486:	d004      	beq.n	800b492 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b488:	69fb      	ldr	r3, [r7, #28]
 800b48a:	6a1b      	ldr	r3, [r3, #32]
 800b48c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b48e:	4313      	orrs	r3, r2
 800b490:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b492:	69fb      	ldr	r3, [r7, #28]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	689b      	ldr	r3, [r3, #8]
 800b498:	4aa1      	ldr	r2, [pc, #644]	; (800b720 <UART_SetConfig+0x304>)
 800b49a:	4013      	ands	r3, r2
 800b49c:	0019      	movs	r1, r3
 800b49e:	69fb      	ldr	r3, [r7, #28]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b4a4:	430a      	orrs	r2, r1
 800b4a6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b4a8:	69fb      	ldr	r3, [r7, #28]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	4a9d      	ldr	r2, [pc, #628]	; (800b724 <UART_SetConfig+0x308>)
 800b4ae:	4293      	cmp	r3, r2
 800b4b0:	d136      	bne.n	800b520 <UART_SetConfig+0x104>
 800b4b2:	4b9d      	ldr	r3, [pc, #628]	; (800b728 <UART_SetConfig+0x30c>)
 800b4b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4b6:	2203      	movs	r2, #3
 800b4b8:	4013      	ands	r3, r2
 800b4ba:	2b03      	cmp	r3, #3
 800b4bc:	d020      	beq.n	800b500 <UART_SetConfig+0xe4>
 800b4be:	d827      	bhi.n	800b510 <UART_SetConfig+0xf4>
 800b4c0:	2b02      	cmp	r3, #2
 800b4c2:	d00d      	beq.n	800b4e0 <UART_SetConfig+0xc4>
 800b4c4:	d824      	bhi.n	800b510 <UART_SetConfig+0xf4>
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d002      	beq.n	800b4d0 <UART_SetConfig+0xb4>
 800b4ca:	2b01      	cmp	r3, #1
 800b4cc:	d010      	beq.n	800b4f0 <UART_SetConfig+0xd4>
 800b4ce:	e01f      	b.n	800b510 <UART_SetConfig+0xf4>
 800b4d0:	231b      	movs	r3, #27
 800b4d2:	2218      	movs	r2, #24
 800b4d4:	4694      	mov	ip, r2
 800b4d6:	44bc      	add	ip, r7
 800b4d8:	4463      	add	r3, ip
 800b4da:	2201      	movs	r2, #1
 800b4dc:	701a      	strb	r2, [r3, #0]
 800b4de:	e0c5      	b.n	800b66c <UART_SetConfig+0x250>
 800b4e0:	231b      	movs	r3, #27
 800b4e2:	2218      	movs	r2, #24
 800b4e4:	4694      	mov	ip, r2
 800b4e6:	44bc      	add	ip, r7
 800b4e8:	4463      	add	r3, ip
 800b4ea:	2202      	movs	r2, #2
 800b4ec:	701a      	strb	r2, [r3, #0]
 800b4ee:	e0bd      	b.n	800b66c <UART_SetConfig+0x250>
 800b4f0:	231b      	movs	r3, #27
 800b4f2:	2218      	movs	r2, #24
 800b4f4:	4694      	mov	ip, r2
 800b4f6:	44bc      	add	ip, r7
 800b4f8:	4463      	add	r3, ip
 800b4fa:	2204      	movs	r2, #4
 800b4fc:	701a      	strb	r2, [r3, #0]
 800b4fe:	e0b5      	b.n	800b66c <UART_SetConfig+0x250>
 800b500:	231b      	movs	r3, #27
 800b502:	2218      	movs	r2, #24
 800b504:	4694      	mov	ip, r2
 800b506:	44bc      	add	ip, r7
 800b508:	4463      	add	r3, ip
 800b50a:	2208      	movs	r2, #8
 800b50c:	701a      	strb	r2, [r3, #0]
 800b50e:	e0ad      	b.n	800b66c <UART_SetConfig+0x250>
 800b510:	231b      	movs	r3, #27
 800b512:	2218      	movs	r2, #24
 800b514:	4694      	mov	ip, r2
 800b516:	44bc      	add	ip, r7
 800b518:	4463      	add	r3, ip
 800b51a:	2210      	movs	r2, #16
 800b51c:	701a      	strb	r2, [r3, #0]
 800b51e:	e0a5      	b.n	800b66c <UART_SetConfig+0x250>
 800b520:	69fb      	ldr	r3, [r7, #28]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	4a81      	ldr	r2, [pc, #516]	; (800b72c <UART_SetConfig+0x310>)
 800b526:	4293      	cmp	r3, r2
 800b528:	d136      	bne.n	800b598 <UART_SetConfig+0x17c>
 800b52a:	4b7f      	ldr	r3, [pc, #508]	; (800b728 <UART_SetConfig+0x30c>)
 800b52c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b52e:	220c      	movs	r2, #12
 800b530:	4013      	ands	r3, r2
 800b532:	2b0c      	cmp	r3, #12
 800b534:	d020      	beq.n	800b578 <UART_SetConfig+0x15c>
 800b536:	d827      	bhi.n	800b588 <UART_SetConfig+0x16c>
 800b538:	2b08      	cmp	r3, #8
 800b53a:	d00d      	beq.n	800b558 <UART_SetConfig+0x13c>
 800b53c:	d824      	bhi.n	800b588 <UART_SetConfig+0x16c>
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d002      	beq.n	800b548 <UART_SetConfig+0x12c>
 800b542:	2b04      	cmp	r3, #4
 800b544:	d010      	beq.n	800b568 <UART_SetConfig+0x14c>
 800b546:	e01f      	b.n	800b588 <UART_SetConfig+0x16c>
 800b548:	231b      	movs	r3, #27
 800b54a:	2218      	movs	r2, #24
 800b54c:	4694      	mov	ip, r2
 800b54e:	44bc      	add	ip, r7
 800b550:	4463      	add	r3, ip
 800b552:	2200      	movs	r2, #0
 800b554:	701a      	strb	r2, [r3, #0]
 800b556:	e089      	b.n	800b66c <UART_SetConfig+0x250>
 800b558:	231b      	movs	r3, #27
 800b55a:	2218      	movs	r2, #24
 800b55c:	4694      	mov	ip, r2
 800b55e:	44bc      	add	ip, r7
 800b560:	4463      	add	r3, ip
 800b562:	2202      	movs	r2, #2
 800b564:	701a      	strb	r2, [r3, #0]
 800b566:	e081      	b.n	800b66c <UART_SetConfig+0x250>
 800b568:	231b      	movs	r3, #27
 800b56a:	2218      	movs	r2, #24
 800b56c:	4694      	mov	ip, r2
 800b56e:	44bc      	add	ip, r7
 800b570:	4463      	add	r3, ip
 800b572:	2204      	movs	r2, #4
 800b574:	701a      	strb	r2, [r3, #0]
 800b576:	e079      	b.n	800b66c <UART_SetConfig+0x250>
 800b578:	231b      	movs	r3, #27
 800b57a:	2218      	movs	r2, #24
 800b57c:	4694      	mov	ip, r2
 800b57e:	44bc      	add	ip, r7
 800b580:	4463      	add	r3, ip
 800b582:	2208      	movs	r2, #8
 800b584:	701a      	strb	r2, [r3, #0]
 800b586:	e071      	b.n	800b66c <UART_SetConfig+0x250>
 800b588:	231b      	movs	r3, #27
 800b58a:	2218      	movs	r2, #24
 800b58c:	4694      	mov	ip, r2
 800b58e:	44bc      	add	ip, r7
 800b590:	4463      	add	r3, ip
 800b592:	2210      	movs	r2, #16
 800b594:	701a      	strb	r2, [r3, #0]
 800b596:	e069      	b.n	800b66c <UART_SetConfig+0x250>
 800b598:	69fb      	ldr	r3, [r7, #28]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	4a64      	ldr	r2, [pc, #400]	; (800b730 <UART_SetConfig+0x314>)
 800b59e:	4293      	cmp	r3, r2
 800b5a0:	d107      	bne.n	800b5b2 <UART_SetConfig+0x196>
 800b5a2:	231b      	movs	r3, #27
 800b5a4:	2218      	movs	r2, #24
 800b5a6:	4694      	mov	ip, r2
 800b5a8:	44bc      	add	ip, r7
 800b5aa:	4463      	add	r3, ip
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	701a      	strb	r2, [r3, #0]
 800b5b0:	e05c      	b.n	800b66c <UART_SetConfig+0x250>
 800b5b2:	69fb      	ldr	r3, [r7, #28]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	4a5f      	ldr	r2, [pc, #380]	; (800b734 <UART_SetConfig+0x318>)
 800b5b8:	4293      	cmp	r3, r2
 800b5ba:	d107      	bne.n	800b5cc <UART_SetConfig+0x1b0>
 800b5bc:	231b      	movs	r3, #27
 800b5be:	2218      	movs	r2, #24
 800b5c0:	4694      	mov	ip, r2
 800b5c2:	44bc      	add	ip, r7
 800b5c4:	4463      	add	r3, ip
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	701a      	strb	r2, [r3, #0]
 800b5ca:	e04f      	b.n	800b66c <UART_SetConfig+0x250>
 800b5cc:	69fb      	ldr	r3, [r7, #28]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	4a52      	ldr	r2, [pc, #328]	; (800b71c <UART_SetConfig+0x300>)
 800b5d2:	4293      	cmp	r3, r2
 800b5d4:	d143      	bne.n	800b65e <UART_SetConfig+0x242>
 800b5d6:	4b54      	ldr	r3, [pc, #336]	; (800b728 <UART_SetConfig+0x30c>)
 800b5d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b5da:	23c0      	movs	r3, #192	; 0xc0
 800b5dc:	011b      	lsls	r3, r3, #4
 800b5de:	4013      	ands	r3, r2
 800b5e0:	22c0      	movs	r2, #192	; 0xc0
 800b5e2:	0112      	lsls	r2, r2, #4
 800b5e4:	4293      	cmp	r3, r2
 800b5e6:	d02a      	beq.n	800b63e <UART_SetConfig+0x222>
 800b5e8:	22c0      	movs	r2, #192	; 0xc0
 800b5ea:	0112      	lsls	r2, r2, #4
 800b5ec:	4293      	cmp	r3, r2
 800b5ee:	d82e      	bhi.n	800b64e <UART_SetConfig+0x232>
 800b5f0:	2280      	movs	r2, #128	; 0x80
 800b5f2:	0112      	lsls	r2, r2, #4
 800b5f4:	4293      	cmp	r3, r2
 800b5f6:	d012      	beq.n	800b61e <UART_SetConfig+0x202>
 800b5f8:	2280      	movs	r2, #128	; 0x80
 800b5fa:	0112      	lsls	r2, r2, #4
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	d826      	bhi.n	800b64e <UART_SetConfig+0x232>
 800b600:	2b00      	cmp	r3, #0
 800b602:	d004      	beq.n	800b60e <UART_SetConfig+0x1f2>
 800b604:	2280      	movs	r2, #128	; 0x80
 800b606:	00d2      	lsls	r2, r2, #3
 800b608:	4293      	cmp	r3, r2
 800b60a:	d010      	beq.n	800b62e <UART_SetConfig+0x212>
 800b60c:	e01f      	b.n	800b64e <UART_SetConfig+0x232>
 800b60e:	231b      	movs	r3, #27
 800b610:	2218      	movs	r2, #24
 800b612:	4694      	mov	ip, r2
 800b614:	44bc      	add	ip, r7
 800b616:	4463      	add	r3, ip
 800b618:	2200      	movs	r2, #0
 800b61a:	701a      	strb	r2, [r3, #0]
 800b61c:	e026      	b.n	800b66c <UART_SetConfig+0x250>
 800b61e:	231b      	movs	r3, #27
 800b620:	2218      	movs	r2, #24
 800b622:	4694      	mov	ip, r2
 800b624:	44bc      	add	ip, r7
 800b626:	4463      	add	r3, ip
 800b628:	2202      	movs	r2, #2
 800b62a:	701a      	strb	r2, [r3, #0]
 800b62c:	e01e      	b.n	800b66c <UART_SetConfig+0x250>
 800b62e:	231b      	movs	r3, #27
 800b630:	2218      	movs	r2, #24
 800b632:	4694      	mov	ip, r2
 800b634:	44bc      	add	ip, r7
 800b636:	4463      	add	r3, ip
 800b638:	2204      	movs	r2, #4
 800b63a:	701a      	strb	r2, [r3, #0]
 800b63c:	e016      	b.n	800b66c <UART_SetConfig+0x250>
 800b63e:	231b      	movs	r3, #27
 800b640:	2218      	movs	r2, #24
 800b642:	4694      	mov	ip, r2
 800b644:	44bc      	add	ip, r7
 800b646:	4463      	add	r3, ip
 800b648:	2208      	movs	r2, #8
 800b64a:	701a      	strb	r2, [r3, #0]
 800b64c:	e00e      	b.n	800b66c <UART_SetConfig+0x250>
 800b64e:	231b      	movs	r3, #27
 800b650:	2218      	movs	r2, #24
 800b652:	4694      	mov	ip, r2
 800b654:	44bc      	add	ip, r7
 800b656:	4463      	add	r3, ip
 800b658:	2210      	movs	r2, #16
 800b65a:	701a      	strb	r2, [r3, #0]
 800b65c:	e006      	b.n	800b66c <UART_SetConfig+0x250>
 800b65e:	231b      	movs	r3, #27
 800b660:	2218      	movs	r2, #24
 800b662:	4694      	mov	ip, r2
 800b664:	44bc      	add	ip, r7
 800b666:	4463      	add	r3, ip
 800b668:	2210      	movs	r2, #16
 800b66a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b66c:	69fb      	ldr	r3, [r7, #28]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	4a2a      	ldr	r2, [pc, #168]	; (800b71c <UART_SetConfig+0x300>)
 800b672:	4293      	cmp	r3, r2
 800b674:	d000      	beq.n	800b678 <UART_SetConfig+0x25c>
 800b676:	e09e      	b.n	800b7b6 <UART_SetConfig+0x39a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b678:	231b      	movs	r3, #27
 800b67a:	2218      	movs	r2, #24
 800b67c:	4694      	mov	ip, r2
 800b67e:	44bc      	add	ip, r7
 800b680:	4463      	add	r3, ip
 800b682:	781b      	ldrb	r3, [r3, #0]
 800b684:	2b08      	cmp	r3, #8
 800b686:	d01d      	beq.n	800b6c4 <UART_SetConfig+0x2a8>
 800b688:	dc20      	bgt.n	800b6cc <UART_SetConfig+0x2b0>
 800b68a:	2b04      	cmp	r3, #4
 800b68c:	d015      	beq.n	800b6ba <UART_SetConfig+0x29e>
 800b68e:	dc1d      	bgt.n	800b6cc <UART_SetConfig+0x2b0>
 800b690:	2b00      	cmp	r3, #0
 800b692:	d002      	beq.n	800b69a <UART_SetConfig+0x27e>
 800b694:	2b02      	cmp	r3, #2
 800b696:	d005      	beq.n	800b6a4 <UART_SetConfig+0x288>
 800b698:	e018      	b.n	800b6cc <UART_SetConfig+0x2b0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b69a:	f7fe f8b7 	bl	800980c <HAL_RCC_GetPCLK1Freq>
 800b69e:	0003      	movs	r3, r0
 800b6a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b6a2:	e01d      	b.n	800b6e0 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b6a4:	4b20      	ldr	r3, [pc, #128]	; (800b728 <UART_SetConfig+0x30c>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	2210      	movs	r2, #16
 800b6aa:	4013      	ands	r3, r2
 800b6ac:	d002      	beq.n	800b6b4 <UART_SetConfig+0x298>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800b6ae:	4b22      	ldr	r3, [pc, #136]	; (800b738 <UART_SetConfig+0x31c>)
 800b6b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b6b2:	e015      	b.n	800b6e0 <UART_SetConfig+0x2c4>
          pclk = (uint32_t) HSI_VALUE;
 800b6b4:	4b21      	ldr	r3, [pc, #132]	; (800b73c <UART_SetConfig+0x320>)
 800b6b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b6b8:	e012      	b.n	800b6e0 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b6ba:	f7fd fff7 	bl	80096ac <HAL_RCC_GetSysClockFreq>
 800b6be:	0003      	movs	r3, r0
 800b6c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b6c2:	e00d      	b.n	800b6e0 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b6c4:	2380      	movs	r3, #128	; 0x80
 800b6c6:	021b      	lsls	r3, r3, #8
 800b6c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b6ca:	e009      	b.n	800b6e0 <UART_SetConfig+0x2c4>
      default:
        pclk = 0U;
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b6d0:	231a      	movs	r3, #26
 800b6d2:	2218      	movs	r2, #24
 800b6d4:	4694      	mov	ip, r2
 800b6d6:	44bc      	add	ip, r7
 800b6d8:	4463      	add	r3, ip
 800b6da:	2201      	movs	r2, #1
 800b6dc:	701a      	strb	r2, [r3, #0]
        break;
 800b6de:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b6e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d100      	bne.n	800b6e8 <UART_SetConfig+0x2cc>
 800b6e6:	e13c      	b.n	800b962 <UART_SetConfig+0x546>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b6e8:	69fb      	ldr	r3, [r7, #28]
 800b6ea:	685a      	ldr	r2, [r3, #4]
 800b6ec:	0013      	movs	r3, r2
 800b6ee:	005b      	lsls	r3, r3, #1
 800b6f0:	189b      	adds	r3, r3, r2
 800b6f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6f4:	429a      	cmp	r2, r3
 800b6f6:	d305      	bcc.n	800b704 <UART_SetConfig+0x2e8>
          (pclk > (4096U * huart->Init.BaudRate)))
 800b6f8:	69fb      	ldr	r3, [r7, #28]
 800b6fa:	685b      	ldr	r3, [r3, #4]
 800b6fc:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b6fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b700:	429a      	cmp	r2, r3
 800b702:	d91d      	bls.n	800b740 <UART_SetConfig+0x324>
      {
        ret = HAL_ERROR;
 800b704:	231a      	movs	r3, #26
 800b706:	2218      	movs	r2, #24
 800b708:	4694      	mov	ip, r2
 800b70a:	44bc      	add	ip, r7
 800b70c:	4463      	add	r3, ip
 800b70e:	2201      	movs	r2, #1
 800b710:	701a      	strb	r2, [r3, #0]
 800b712:	e126      	b.n	800b962 <UART_SetConfig+0x546>
 800b714:	efff69f3 	.word	0xefff69f3
 800b718:	ffffcfff 	.word	0xffffcfff
 800b71c:	40004800 	.word	0x40004800
 800b720:	fffff4ff 	.word	0xfffff4ff
 800b724:	40013800 	.word	0x40013800
 800b728:	40021000 	.word	0x40021000
 800b72c:	40004400 	.word	0x40004400
 800b730:	40004c00 	.word	0x40004c00
 800b734:	40005000 	.word	0x40005000
 800b738:	003d0900 	.word	0x003d0900
 800b73c:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800b740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b742:	613b      	str	r3, [r7, #16]
 800b744:	2300      	movs	r3, #0
 800b746:	617b      	str	r3, [r7, #20]
 800b748:	6939      	ldr	r1, [r7, #16]
 800b74a:	697a      	ldr	r2, [r7, #20]
 800b74c:	000b      	movs	r3, r1
 800b74e:	0e1b      	lsrs	r3, r3, #24
 800b750:	0010      	movs	r0, r2
 800b752:	0205      	lsls	r5, r0, #8
 800b754:	431d      	orrs	r5, r3
 800b756:	000b      	movs	r3, r1
 800b758:	021c      	lsls	r4, r3, #8
 800b75a:	69fb      	ldr	r3, [r7, #28]
 800b75c:	685b      	ldr	r3, [r3, #4]
 800b75e:	085b      	lsrs	r3, r3, #1
 800b760:	60bb      	str	r3, [r7, #8]
 800b762:	2300      	movs	r3, #0
 800b764:	60fb      	str	r3, [r7, #12]
 800b766:	68b8      	ldr	r0, [r7, #8]
 800b768:	68f9      	ldr	r1, [r7, #12]
 800b76a:	1900      	adds	r0, r0, r4
 800b76c:	4169      	adcs	r1, r5
 800b76e:	69fb      	ldr	r3, [r7, #28]
 800b770:	685b      	ldr	r3, [r3, #4]
 800b772:	603b      	str	r3, [r7, #0]
 800b774:	2300      	movs	r3, #0
 800b776:	607b      	str	r3, [r7, #4]
 800b778:	683a      	ldr	r2, [r7, #0]
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f7f4 fea4 	bl	80004c8 <__aeabi_uldivmod>
 800b780:	0002      	movs	r2, r0
 800b782:	000b      	movs	r3, r1
 800b784:	0013      	movs	r3, r2
 800b786:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b788:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b78a:	23c0      	movs	r3, #192	; 0xc0
 800b78c:	009b      	lsls	r3, r3, #2
 800b78e:	429a      	cmp	r2, r3
 800b790:	d309      	bcc.n	800b7a6 <UART_SetConfig+0x38a>
 800b792:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b794:	2380      	movs	r3, #128	; 0x80
 800b796:	035b      	lsls	r3, r3, #13
 800b798:	429a      	cmp	r2, r3
 800b79a:	d204      	bcs.n	800b7a6 <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 800b79c:	69fb      	ldr	r3, [r7, #28]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7a2:	60da      	str	r2, [r3, #12]
 800b7a4:	e0dd      	b.n	800b962 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 800b7a6:	231a      	movs	r3, #26
 800b7a8:	2218      	movs	r2, #24
 800b7aa:	4694      	mov	ip, r2
 800b7ac:	44bc      	add	ip, r7
 800b7ae:	4463      	add	r3, ip
 800b7b0:	2201      	movs	r2, #1
 800b7b2:	701a      	strb	r2, [r3, #0]
 800b7b4:	e0d5      	b.n	800b962 <UART_SetConfig+0x546>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b7b6:	69fb      	ldr	r3, [r7, #28]
 800b7b8:	69da      	ldr	r2, [r3, #28]
 800b7ba:	2380      	movs	r3, #128	; 0x80
 800b7bc:	021b      	lsls	r3, r3, #8
 800b7be:	429a      	cmp	r2, r3
 800b7c0:	d000      	beq.n	800b7c4 <UART_SetConfig+0x3a8>
 800b7c2:	e074      	b.n	800b8ae <UART_SetConfig+0x492>
  {
    switch (clocksource)
 800b7c4:	231b      	movs	r3, #27
 800b7c6:	2218      	movs	r2, #24
 800b7c8:	4694      	mov	ip, r2
 800b7ca:	44bc      	add	ip, r7
 800b7cc:	4463      	add	r3, ip
 800b7ce:	781b      	ldrb	r3, [r3, #0]
 800b7d0:	2b08      	cmp	r3, #8
 800b7d2:	d822      	bhi.n	800b81a <UART_SetConfig+0x3fe>
 800b7d4:	009a      	lsls	r2, r3, #2
 800b7d6:	4b6b      	ldr	r3, [pc, #428]	; (800b984 <UART_SetConfig+0x568>)
 800b7d8:	18d3      	adds	r3, r2, r3
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b7de:	f7fe f815 	bl	800980c <HAL_RCC_GetPCLK1Freq>
 800b7e2:	0003      	movs	r3, r0
 800b7e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b7e6:	e022      	b.n	800b82e <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b7e8:	f7fe f826 	bl	8009838 <HAL_RCC_GetPCLK2Freq>
 800b7ec:	0003      	movs	r3, r0
 800b7ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b7f0:	e01d      	b.n	800b82e <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b7f2:	4b65      	ldr	r3, [pc, #404]	; (800b988 <UART_SetConfig+0x56c>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	2210      	movs	r2, #16
 800b7f8:	4013      	ands	r3, r2
 800b7fa:	d002      	beq.n	800b802 <UART_SetConfig+0x3e6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800b7fc:	4b63      	ldr	r3, [pc, #396]	; (800b98c <UART_SetConfig+0x570>)
 800b7fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b800:	e015      	b.n	800b82e <UART_SetConfig+0x412>
          pclk = (uint32_t) HSI_VALUE;
 800b802:	4b63      	ldr	r3, [pc, #396]	; (800b990 <UART_SetConfig+0x574>)
 800b804:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b806:	e012      	b.n	800b82e <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b808:	f7fd ff50 	bl	80096ac <HAL_RCC_GetSysClockFreq>
 800b80c:	0003      	movs	r3, r0
 800b80e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b810:	e00d      	b.n	800b82e <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b812:	2380      	movs	r3, #128	; 0x80
 800b814:	021b      	lsls	r3, r3, #8
 800b816:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b818:	e009      	b.n	800b82e <UART_SetConfig+0x412>
      default:
        pclk = 0U;
 800b81a:	2300      	movs	r3, #0
 800b81c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b81e:	231a      	movs	r3, #26
 800b820:	2218      	movs	r2, #24
 800b822:	4694      	mov	ip, r2
 800b824:	44bc      	add	ip, r7
 800b826:	4463      	add	r3, ip
 800b828:	2201      	movs	r2, #1
 800b82a:	701a      	strb	r2, [r3, #0]
        break;
 800b82c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b82e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b830:	2b00      	cmp	r3, #0
 800b832:	d100      	bne.n	800b836 <UART_SetConfig+0x41a>
 800b834:	e095      	b.n	800b962 <UART_SetConfig+0x546>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b838:	005a      	lsls	r2, r3, #1
 800b83a:	69fb      	ldr	r3, [r7, #28]
 800b83c:	685b      	ldr	r3, [r3, #4]
 800b83e:	085b      	lsrs	r3, r3, #1
 800b840:	18d2      	adds	r2, r2, r3
 800b842:	69fb      	ldr	r3, [r7, #28]
 800b844:	685b      	ldr	r3, [r3, #4]
 800b846:	0019      	movs	r1, r3
 800b848:	0010      	movs	r0, r2
 800b84a:	f7f4 fc65 	bl	8000118 <__udivsi3>
 800b84e:	0003      	movs	r3, r0
 800b850:	b29b      	uxth	r3, r3
 800b852:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b856:	2b0f      	cmp	r3, #15
 800b858:	d921      	bls.n	800b89e <UART_SetConfig+0x482>
 800b85a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b85c:	2380      	movs	r3, #128	; 0x80
 800b85e:	025b      	lsls	r3, r3, #9
 800b860:	429a      	cmp	r2, r3
 800b862:	d21c      	bcs.n	800b89e <UART_SetConfig+0x482>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b866:	b29a      	uxth	r2, r3
 800b868:	200e      	movs	r0, #14
 800b86a:	2418      	movs	r4, #24
 800b86c:	193b      	adds	r3, r7, r4
 800b86e:	181b      	adds	r3, r3, r0
 800b870:	210f      	movs	r1, #15
 800b872:	438a      	bics	r2, r1
 800b874:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b878:	085b      	lsrs	r3, r3, #1
 800b87a:	b29b      	uxth	r3, r3
 800b87c:	2207      	movs	r2, #7
 800b87e:	4013      	ands	r3, r2
 800b880:	b299      	uxth	r1, r3
 800b882:	193b      	adds	r3, r7, r4
 800b884:	181b      	adds	r3, r3, r0
 800b886:	193a      	adds	r2, r7, r4
 800b888:	1812      	adds	r2, r2, r0
 800b88a:	8812      	ldrh	r2, [r2, #0]
 800b88c:	430a      	orrs	r2, r1
 800b88e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800b890:	69fb      	ldr	r3, [r7, #28]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	193a      	adds	r2, r7, r4
 800b896:	1812      	adds	r2, r2, r0
 800b898:	8812      	ldrh	r2, [r2, #0]
 800b89a:	60da      	str	r2, [r3, #12]
 800b89c:	e061      	b.n	800b962 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800b89e:	231a      	movs	r3, #26
 800b8a0:	2218      	movs	r2, #24
 800b8a2:	4694      	mov	ip, r2
 800b8a4:	44bc      	add	ip, r7
 800b8a6:	4463      	add	r3, ip
 800b8a8:	2201      	movs	r2, #1
 800b8aa:	701a      	strb	r2, [r3, #0]
 800b8ac:	e059      	b.n	800b962 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b8ae:	231b      	movs	r3, #27
 800b8b0:	2218      	movs	r2, #24
 800b8b2:	4694      	mov	ip, r2
 800b8b4:	44bc      	add	ip, r7
 800b8b6:	4463      	add	r3, ip
 800b8b8:	781b      	ldrb	r3, [r3, #0]
 800b8ba:	2b08      	cmp	r3, #8
 800b8bc:	d822      	bhi.n	800b904 <UART_SetConfig+0x4e8>
 800b8be:	009a      	lsls	r2, r3, #2
 800b8c0:	4b34      	ldr	r3, [pc, #208]	; (800b994 <UART_SetConfig+0x578>)
 800b8c2:	18d3      	adds	r3, r2, r3
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b8c8:	f7fd ffa0 	bl	800980c <HAL_RCC_GetPCLK1Freq>
 800b8cc:	0003      	movs	r3, r0
 800b8ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b8d0:	e022      	b.n	800b918 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b8d2:	f7fd ffb1 	bl	8009838 <HAL_RCC_GetPCLK2Freq>
 800b8d6:	0003      	movs	r3, r0
 800b8d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b8da:	e01d      	b.n	800b918 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b8dc:	4b2a      	ldr	r3, [pc, #168]	; (800b988 <UART_SetConfig+0x56c>)
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	2210      	movs	r2, #16
 800b8e2:	4013      	ands	r3, r2
 800b8e4:	d002      	beq.n	800b8ec <UART_SetConfig+0x4d0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800b8e6:	4b29      	ldr	r3, [pc, #164]	; (800b98c <UART_SetConfig+0x570>)
 800b8e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b8ea:	e015      	b.n	800b918 <UART_SetConfig+0x4fc>
          pclk = (uint32_t) HSI_VALUE;
 800b8ec:	4b28      	ldr	r3, [pc, #160]	; (800b990 <UART_SetConfig+0x574>)
 800b8ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b8f0:	e012      	b.n	800b918 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b8f2:	f7fd fedb 	bl	80096ac <HAL_RCC_GetSysClockFreq>
 800b8f6:	0003      	movs	r3, r0
 800b8f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b8fa:	e00d      	b.n	800b918 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b8fc:	2380      	movs	r3, #128	; 0x80
 800b8fe:	021b      	lsls	r3, r3, #8
 800b900:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b902:	e009      	b.n	800b918 <UART_SetConfig+0x4fc>
      default:
        pclk = 0U;
 800b904:	2300      	movs	r3, #0
 800b906:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b908:	231a      	movs	r3, #26
 800b90a:	2218      	movs	r2, #24
 800b90c:	4694      	mov	ip, r2
 800b90e:	44bc      	add	ip, r7
 800b910:	4463      	add	r3, ip
 800b912:	2201      	movs	r2, #1
 800b914:	701a      	strb	r2, [r3, #0]
        break;
 800b916:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800b918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d021      	beq.n	800b962 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b91e:	69fb      	ldr	r3, [r7, #28]
 800b920:	685b      	ldr	r3, [r3, #4]
 800b922:	085a      	lsrs	r2, r3, #1
 800b924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b926:	18d2      	adds	r2, r2, r3
 800b928:	69fb      	ldr	r3, [r7, #28]
 800b92a:	685b      	ldr	r3, [r3, #4]
 800b92c:	0019      	movs	r1, r3
 800b92e:	0010      	movs	r0, r2
 800b930:	f7f4 fbf2 	bl	8000118 <__udivsi3>
 800b934:	0003      	movs	r3, r0
 800b936:	b29b      	uxth	r3, r3
 800b938:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b93a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b93c:	2b0f      	cmp	r3, #15
 800b93e:	d909      	bls.n	800b954 <UART_SetConfig+0x538>
 800b940:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b942:	2380      	movs	r3, #128	; 0x80
 800b944:	025b      	lsls	r3, r3, #9
 800b946:	429a      	cmp	r2, r3
 800b948:	d204      	bcs.n	800b954 <UART_SetConfig+0x538>
      {
        huart->Instance->BRR = usartdiv;
 800b94a:	69fb      	ldr	r3, [r7, #28]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b950:	60da      	str	r2, [r3, #12]
 800b952:	e006      	b.n	800b962 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800b954:	231a      	movs	r3, #26
 800b956:	2218      	movs	r2, #24
 800b958:	4694      	mov	ip, r2
 800b95a:	44bc      	add	ip, r7
 800b95c:	4463      	add	r3, ip
 800b95e:	2201      	movs	r2, #1
 800b960:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b962:	69fb      	ldr	r3, [r7, #28]
 800b964:	2200      	movs	r2, #0
 800b966:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800b968:	69fb      	ldr	r3, [r7, #28]
 800b96a:	2200      	movs	r2, #0
 800b96c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800b96e:	231a      	movs	r3, #26
 800b970:	2218      	movs	r2, #24
 800b972:	4694      	mov	ip, r2
 800b974:	44bc      	add	ip, r7
 800b976:	4463      	add	r3, ip
 800b978:	781b      	ldrb	r3, [r3, #0]
}
 800b97a:	0018      	movs	r0, r3
 800b97c:	46bd      	mov	sp, r7
 800b97e:	b00e      	add	sp, #56	; 0x38
 800b980:	bdb0      	pop	{r4, r5, r7, pc}
 800b982:	46c0      	nop			; (mov r8, r8)
 800b984:	0801f1d8 	.word	0x0801f1d8
 800b988:	40021000 	.word	0x40021000
 800b98c:	003d0900 	.word	0x003d0900
 800b990:	00f42400 	.word	0x00f42400
 800b994:	0801f1fc 	.word	0x0801f1fc

0800b998 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b082      	sub	sp, #8
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9a4:	2201      	movs	r2, #1
 800b9a6:	4013      	ands	r3, r2
 800b9a8:	d00b      	beq.n	800b9c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	685b      	ldr	r3, [r3, #4]
 800b9b0:	4a4a      	ldr	r2, [pc, #296]	; (800badc <UART_AdvFeatureConfig+0x144>)
 800b9b2:	4013      	ands	r3, r2
 800b9b4:	0019      	movs	r1, r3
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	430a      	orrs	r2, r1
 800b9c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9c6:	2202      	movs	r2, #2
 800b9c8:	4013      	ands	r3, r2
 800b9ca:	d00b      	beq.n	800b9e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	685b      	ldr	r3, [r3, #4]
 800b9d2:	4a43      	ldr	r2, [pc, #268]	; (800bae0 <UART_AdvFeatureConfig+0x148>)
 800b9d4:	4013      	ands	r3, r2
 800b9d6:	0019      	movs	r1, r3
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	430a      	orrs	r2, r1
 800b9e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9e8:	2204      	movs	r2, #4
 800b9ea:	4013      	ands	r3, r2
 800b9ec:	d00b      	beq.n	800ba06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	685b      	ldr	r3, [r3, #4]
 800b9f4:	4a3b      	ldr	r2, [pc, #236]	; (800bae4 <UART_AdvFeatureConfig+0x14c>)
 800b9f6:	4013      	ands	r3, r2
 800b9f8:	0019      	movs	r1, r3
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	430a      	orrs	r2, r1
 800ba04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba0a:	2208      	movs	r2, #8
 800ba0c:	4013      	ands	r3, r2
 800ba0e:	d00b      	beq.n	800ba28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	685b      	ldr	r3, [r3, #4]
 800ba16:	4a34      	ldr	r2, [pc, #208]	; (800bae8 <UART_AdvFeatureConfig+0x150>)
 800ba18:	4013      	ands	r3, r2
 800ba1a:	0019      	movs	r1, r3
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	430a      	orrs	r2, r1
 800ba26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba2c:	2210      	movs	r2, #16
 800ba2e:	4013      	ands	r3, r2
 800ba30:	d00b      	beq.n	800ba4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	689b      	ldr	r3, [r3, #8]
 800ba38:	4a2c      	ldr	r2, [pc, #176]	; (800baec <UART_AdvFeatureConfig+0x154>)
 800ba3a:	4013      	ands	r3, r2
 800ba3c:	0019      	movs	r1, r3
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	430a      	orrs	r2, r1
 800ba48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba4e:	2220      	movs	r2, #32
 800ba50:	4013      	ands	r3, r2
 800ba52:	d00b      	beq.n	800ba6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	689b      	ldr	r3, [r3, #8]
 800ba5a:	4a25      	ldr	r2, [pc, #148]	; (800baf0 <UART_AdvFeatureConfig+0x158>)
 800ba5c:	4013      	ands	r3, r2
 800ba5e:	0019      	movs	r1, r3
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	430a      	orrs	r2, r1
 800ba6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba70:	2240      	movs	r2, #64	; 0x40
 800ba72:	4013      	ands	r3, r2
 800ba74:	d01d      	beq.n	800bab2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	685b      	ldr	r3, [r3, #4]
 800ba7c:	4a1d      	ldr	r2, [pc, #116]	; (800baf4 <UART_AdvFeatureConfig+0x15c>)
 800ba7e:	4013      	ands	r3, r2
 800ba80:	0019      	movs	r1, r3
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	430a      	orrs	r2, r1
 800ba8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ba92:	2380      	movs	r3, #128	; 0x80
 800ba94:	035b      	lsls	r3, r3, #13
 800ba96:	429a      	cmp	r2, r3
 800ba98:	d10b      	bne.n	800bab2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	685b      	ldr	r3, [r3, #4]
 800baa0:	4a15      	ldr	r2, [pc, #84]	; (800baf8 <UART_AdvFeatureConfig+0x160>)
 800baa2:	4013      	ands	r3, r2
 800baa4:	0019      	movs	r1, r3
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	430a      	orrs	r2, r1
 800bab0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bab6:	2280      	movs	r2, #128	; 0x80
 800bab8:	4013      	ands	r3, r2
 800baba:	d00b      	beq.n	800bad4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	685b      	ldr	r3, [r3, #4]
 800bac2:	4a0e      	ldr	r2, [pc, #56]	; (800bafc <UART_AdvFeatureConfig+0x164>)
 800bac4:	4013      	ands	r3, r2
 800bac6:	0019      	movs	r1, r3
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	430a      	orrs	r2, r1
 800bad2:	605a      	str	r2, [r3, #4]
  }
}
 800bad4:	46c0      	nop			; (mov r8, r8)
 800bad6:	46bd      	mov	sp, r7
 800bad8:	b002      	add	sp, #8
 800bada:	bd80      	pop	{r7, pc}
 800badc:	fffdffff 	.word	0xfffdffff
 800bae0:	fffeffff 	.word	0xfffeffff
 800bae4:	fffbffff 	.word	0xfffbffff
 800bae8:	ffff7fff 	.word	0xffff7fff
 800baec:	ffffefff 	.word	0xffffefff
 800baf0:	ffffdfff 	.word	0xffffdfff
 800baf4:	ffefffff 	.word	0xffefffff
 800baf8:	ff9fffff 	.word	0xff9fffff
 800bafc:	fff7ffff 	.word	0xfff7ffff

0800bb00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b086      	sub	sp, #24
 800bb04:	af02      	add	r7, sp, #8
 800bb06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2280      	movs	r2, #128	; 0x80
 800bb0c:	2100      	movs	r1, #0
 800bb0e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bb10:	f7f9 f955 	bl	8004dbe <HAL_GetTick>
 800bb14:	0003      	movs	r3, r0
 800bb16:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	2208      	movs	r2, #8
 800bb20:	4013      	ands	r3, r2
 800bb22:	2b08      	cmp	r3, #8
 800bb24:	d10c      	bne.n	800bb40 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	2280      	movs	r2, #128	; 0x80
 800bb2a:	0391      	lsls	r1, r2, #14
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	4a17      	ldr	r2, [pc, #92]	; (800bb8c <UART_CheckIdleState+0x8c>)
 800bb30:	9200      	str	r2, [sp, #0]
 800bb32:	2200      	movs	r2, #0
 800bb34:	f000 f82c 	bl	800bb90 <UART_WaitOnFlagUntilTimeout>
 800bb38:	1e03      	subs	r3, r0, #0
 800bb3a:	d001      	beq.n	800bb40 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bb3c:	2303      	movs	r3, #3
 800bb3e:	e021      	b.n	800bb84 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	2204      	movs	r2, #4
 800bb48:	4013      	ands	r3, r2
 800bb4a:	2b04      	cmp	r3, #4
 800bb4c:	d10c      	bne.n	800bb68 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	2280      	movs	r2, #128	; 0x80
 800bb52:	03d1      	lsls	r1, r2, #15
 800bb54:	6878      	ldr	r0, [r7, #4]
 800bb56:	4a0d      	ldr	r2, [pc, #52]	; (800bb8c <UART_CheckIdleState+0x8c>)
 800bb58:	9200      	str	r2, [sp, #0]
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	f000 f818 	bl	800bb90 <UART_WaitOnFlagUntilTimeout>
 800bb60:	1e03      	subs	r3, r0, #0
 800bb62:	d001      	beq.n	800bb68 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bb64:	2303      	movs	r3, #3
 800bb66:	e00d      	b.n	800bb84 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2220      	movs	r2, #32
 800bb6c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2220      	movs	r2, #32
 800bb72:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2200      	movs	r2, #0
 800bb78:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2274      	movs	r2, #116	; 0x74
 800bb7e:	2100      	movs	r1, #0
 800bb80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bb82:	2300      	movs	r3, #0
}
 800bb84:	0018      	movs	r0, r3
 800bb86:	46bd      	mov	sp, r7
 800bb88:	b004      	add	sp, #16
 800bb8a:	bd80      	pop	{r7, pc}
 800bb8c:	01ffffff 	.word	0x01ffffff

0800bb90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b084      	sub	sp, #16
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	60f8      	str	r0, [r7, #12]
 800bb98:	60b9      	str	r1, [r7, #8]
 800bb9a:	603b      	str	r3, [r7, #0]
 800bb9c:	1dfb      	adds	r3, r7, #7
 800bb9e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bba0:	e05e      	b.n	800bc60 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bba2:	69bb      	ldr	r3, [r7, #24]
 800bba4:	3301      	adds	r3, #1
 800bba6:	d05b      	beq.n	800bc60 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bba8:	f7f9 f909 	bl	8004dbe <HAL_GetTick>
 800bbac:	0002      	movs	r2, r0
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	1ad3      	subs	r3, r2, r3
 800bbb2:	69ba      	ldr	r2, [r7, #24]
 800bbb4:	429a      	cmp	r2, r3
 800bbb6:	d302      	bcc.n	800bbbe <UART_WaitOnFlagUntilTimeout+0x2e>
 800bbb8:	69bb      	ldr	r3, [r7, #24]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d11b      	bne.n	800bbf6 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	681a      	ldr	r2, [r3, #0]
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	492f      	ldr	r1, [pc, #188]	; (800bc88 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800bbca:	400a      	ands	r2, r1
 800bbcc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	689a      	ldr	r2, [r3, #8]
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	2101      	movs	r1, #1
 800bbda:	438a      	bics	r2, r1
 800bbdc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	2220      	movs	r2, #32
 800bbe2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	2220      	movs	r2, #32
 800bbe8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	2274      	movs	r2, #116	; 0x74
 800bbee:	2100      	movs	r1, #0
 800bbf0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800bbf2:	2303      	movs	r3, #3
 800bbf4:	e044      	b.n	800bc80 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	2204      	movs	r2, #4
 800bbfe:	4013      	ands	r3, r2
 800bc00:	d02e      	beq.n	800bc60 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	69da      	ldr	r2, [r3, #28]
 800bc08:	2380      	movs	r3, #128	; 0x80
 800bc0a:	011b      	lsls	r3, r3, #4
 800bc0c:	401a      	ands	r2, r3
 800bc0e:	2380      	movs	r3, #128	; 0x80
 800bc10:	011b      	lsls	r3, r3, #4
 800bc12:	429a      	cmp	r2, r3
 800bc14:	d124      	bne.n	800bc60 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	2280      	movs	r2, #128	; 0x80
 800bc1c:	0112      	lsls	r2, r2, #4
 800bc1e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	681a      	ldr	r2, [r3, #0]
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	4917      	ldr	r1, [pc, #92]	; (800bc88 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800bc2c:	400a      	ands	r2, r1
 800bc2e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	689a      	ldr	r2, [r3, #8]
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	2101      	movs	r1, #1
 800bc3c:	438a      	bics	r2, r1
 800bc3e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	2220      	movs	r2, #32
 800bc44:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	2220      	movs	r2, #32
 800bc4a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	2280      	movs	r2, #128	; 0x80
 800bc50:	2120      	movs	r1, #32
 800bc52:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	2274      	movs	r2, #116	; 0x74
 800bc58:	2100      	movs	r1, #0
 800bc5a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800bc5c:	2303      	movs	r3, #3
 800bc5e:	e00f      	b.n	800bc80 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	69db      	ldr	r3, [r3, #28]
 800bc66:	68ba      	ldr	r2, [r7, #8]
 800bc68:	4013      	ands	r3, r2
 800bc6a:	68ba      	ldr	r2, [r7, #8]
 800bc6c:	1ad3      	subs	r3, r2, r3
 800bc6e:	425a      	negs	r2, r3
 800bc70:	4153      	adcs	r3, r2
 800bc72:	b2db      	uxtb	r3, r3
 800bc74:	001a      	movs	r2, r3
 800bc76:	1dfb      	adds	r3, r7, #7
 800bc78:	781b      	ldrb	r3, [r3, #0]
 800bc7a:	429a      	cmp	r2, r3
 800bc7c:	d091      	beq.n	800bba2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bc7e:	2300      	movs	r3, #0
}
 800bc80:	0018      	movs	r0, r3
 800bc82:	46bd      	mov	sp, r7
 800bc84:	b004      	add	sp, #16
 800bc86:	bd80      	pop	{r7, pc}
 800bc88:	fffffe5f 	.word	0xfffffe5f

0800bc8c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b084      	sub	sp, #16
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	60f8      	str	r0, [r7, #12]
 800bc94:	60b9      	str	r1, [r7, #8]
 800bc96:	1dbb      	adds	r3, r7, #6
 800bc98:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	68ba      	ldr	r2, [r7, #8]
 800bc9e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	1dba      	adds	r2, r7, #6
 800bca4:	2158      	movs	r1, #88	; 0x58
 800bca6:	8812      	ldrh	r2, [r2, #0]
 800bca8:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	1dba      	adds	r2, r7, #6
 800bcae:	215a      	movs	r1, #90	; 0x5a
 800bcb0:	8812      	ldrh	r2, [r2, #0]
 800bcb2:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	689a      	ldr	r2, [r3, #8]
 800bcbe:	2380      	movs	r3, #128	; 0x80
 800bcc0:	015b      	lsls	r3, r3, #5
 800bcc2:	429a      	cmp	r2, r3
 800bcc4:	d10d      	bne.n	800bce2 <UART_Start_Receive_IT+0x56>
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	691b      	ldr	r3, [r3, #16]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d104      	bne.n	800bcd8 <UART_Start_Receive_IT+0x4c>
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	225c      	movs	r2, #92	; 0x5c
 800bcd2:	4932      	ldr	r1, [pc, #200]	; (800bd9c <UART_Start_Receive_IT+0x110>)
 800bcd4:	5299      	strh	r1, [r3, r2]
 800bcd6:	e02e      	b.n	800bd36 <UART_Start_Receive_IT+0xaa>
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	225c      	movs	r2, #92	; 0x5c
 800bcdc:	21ff      	movs	r1, #255	; 0xff
 800bcde:	5299      	strh	r1, [r3, r2]
 800bce0:	e029      	b.n	800bd36 <UART_Start_Receive_IT+0xaa>
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	689b      	ldr	r3, [r3, #8]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d10d      	bne.n	800bd06 <UART_Start_Receive_IT+0x7a>
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	691b      	ldr	r3, [r3, #16]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d104      	bne.n	800bcfc <UART_Start_Receive_IT+0x70>
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	225c      	movs	r2, #92	; 0x5c
 800bcf6:	21ff      	movs	r1, #255	; 0xff
 800bcf8:	5299      	strh	r1, [r3, r2]
 800bcfa:	e01c      	b.n	800bd36 <UART_Start_Receive_IT+0xaa>
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	225c      	movs	r2, #92	; 0x5c
 800bd00:	217f      	movs	r1, #127	; 0x7f
 800bd02:	5299      	strh	r1, [r3, r2]
 800bd04:	e017      	b.n	800bd36 <UART_Start_Receive_IT+0xaa>
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	689a      	ldr	r2, [r3, #8]
 800bd0a:	2380      	movs	r3, #128	; 0x80
 800bd0c:	055b      	lsls	r3, r3, #21
 800bd0e:	429a      	cmp	r2, r3
 800bd10:	d10d      	bne.n	800bd2e <UART_Start_Receive_IT+0xa2>
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	691b      	ldr	r3, [r3, #16]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d104      	bne.n	800bd24 <UART_Start_Receive_IT+0x98>
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	225c      	movs	r2, #92	; 0x5c
 800bd1e:	217f      	movs	r1, #127	; 0x7f
 800bd20:	5299      	strh	r1, [r3, r2]
 800bd22:	e008      	b.n	800bd36 <UART_Start_Receive_IT+0xaa>
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	225c      	movs	r2, #92	; 0x5c
 800bd28:	213f      	movs	r1, #63	; 0x3f
 800bd2a:	5299      	strh	r1, [r3, r2]
 800bd2c:	e003      	b.n	800bd36 <UART_Start_Receive_IT+0xaa>
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	225c      	movs	r2, #92	; 0x5c
 800bd32:	2100      	movs	r1, #0
 800bd34:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	2280      	movs	r2, #128	; 0x80
 800bd3a:	2100      	movs	r1, #0
 800bd3c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	2222      	movs	r2, #34	; 0x22
 800bd42:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	689a      	ldr	r2, [r3, #8]
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	2101      	movs	r1, #1
 800bd50:	430a      	orrs	r2, r1
 800bd52:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	689a      	ldr	r2, [r3, #8]
 800bd58:	2380      	movs	r3, #128	; 0x80
 800bd5a:	015b      	lsls	r3, r3, #5
 800bd5c:	429a      	cmp	r2, r3
 800bd5e:	d107      	bne.n	800bd70 <UART_Start_Receive_IT+0xe4>
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	691b      	ldr	r3, [r3, #16]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d103      	bne.n	800bd70 <UART_Start_Receive_IT+0xe4>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	4a0d      	ldr	r2, [pc, #52]	; (800bda0 <UART_Start_Receive_IT+0x114>)
 800bd6c:	665a      	str	r2, [r3, #100]	; 0x64
 800bd6e:	e002      	b.n	800bd76 <UART_Start_Receive_IT+0xea>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	4a0c      	ldr	r2, [pc, #48]	; (800bda4 <UART_Start_Receive_IT+0x118>)
 800bd74:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	2274      	movs	r2, #116	; 0x74
 800bd7a:	2100      	movs	r1, #0
 800bd7c:	5499      	strb	r1, [r3, r2]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	681a      	ldr	r2, [r3, #0]
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	2190      	movs	r1, #144	; 0x90
 800bd8a:	0049      	lsls	r1, r1, #1
 800bd8c:	430a      	orrs	r2, r1
 800bd8e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800bd90:	2300      	movs	r3, #0
}
 800bd92:	0018      	movs	r0, r3
 800bd94:	46bd      	mov	sp, r7
 800bd96:	b004      	add	sp, #16
 800bd98:	bd80      	pop	{r7, pc}
 800bd9a:	46c0      	nop			; (mov r8, r8)
 800bd9c:	000001ff 	.word	0x000001ff
 800bda0:	0800c071 	.word	0x0800c071
 800bda4:	0800bf89 	.word	0x0800bf89

0800bda8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b082      	sub	sp, #8
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	681a      	ldr	r2, [r3, #0]
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	21c0      	movs	r1, #192	; 0xc0
 800bdbc:	438a      	bics	r2, r1
 800bdbe:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2220      	movs	r2, #32
 800bdc4:	679a      	str	r2, [r3, #120]	; 0x78
}
 800bdc6:	46c0      	nop			; (mov r8, r8)
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	b002      	add	sp, #8
 800bdcc:	bd80      	pop	{r7, pc}
	...

0800bdd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b082      	sub	sp, #8
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	681a      	ldr	r2, [r3, #0]
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	4912      	ldr	r1, [pc, #72]	; (800be2c <UART_EndRxTransfer+0x5c>)
 800bde4:	400a      	ands	r2, r1
 800bde6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	689a      	ldr	r2, [r3, #8]
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	2101      	movs	r1, #1
 800bdf4:	438a      	bics	r2, r1
 800bdf6:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bdfc:	2b01      	cmp	r3, #1
 800bdfe:	d107      	bne.n	800be10 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	681a      	ldr	r2, [r3, #0]
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	2110      	movs	r1, #16
 800be0c:	438a      	bics	r2, r1
 800be0e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2220      	movs	r2, #32
 800be14:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	2200      	movs	r2, #0
 800be1a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2200      	movs	r2, #0
 800be20:	665a      	str	r2, [r3, #100]	; 0x64
}
 800be22:	46c0      	nop			; (mov r8, r8)
 800be24:	46bd      	mov	sp, r7
 800be26:	b002      	add	sp, #8
 800be28:	bd80      	pop	{r7, pc}
 800be2a:	46c0      	nop			; (mov r8, r8)
 800be2c:	fffffedf 	.word	0xfffffedf

0800be30 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b084      	sub	sp, #16
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be3c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	2220      	movs	r2, #32
 800be46:	4013      	ands	r3, r2
 800be48:	d114      	bne.n	800be74 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0U;
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	2252      	movs	r2, #82	; 0x52
 800be4e:	2100      	movs	r1, #0
 800be50:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	689a      	ldr	r2, [r3, #8]
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	2180      	movs	r1, #128	; 0x80
 800be5e:	438a      	bics	r2, r1
 800be60:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	681a      	ldr	r2, [r3, #0]
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	2140      	movs	r1, #64	; 0x40
 800be6e:	430a      	orrs	r2, r1
 800be70:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800be72:	e003      	b.n	800be7c <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	0018      	movs	r0, r3
 800be78:	f7f9 fa0c 	bl	8005294 <HAL_UART_TxCpltCallback>
}
 800be7c:	46c0      	nop			; (mov r8, r8)
 800be7e:	46bd      	mov	sp, r7
 800be80:	b004      	add	sp, #16
 800be82:	bd80      	pop	{r7, pc}

0800be84 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b084      	sub	sp, #16
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be90:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	0018      	movs	r0, r3
 800be96:	f7ff faa5 	bl	800b3e4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800be9a:	46c0      	nop			; (mov r8, r8)
 800be9c:	46bd      	mov	sp, r7
 800be9e:	b004      	add	sp, #16
 800bea0:	bd80      	pop	{r7, pc}

0800bea2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bea2:	b580      	push	{r7, lr}
 800bea4:	b086      	sub	sp, #24
 800bea6:	af00      	add	r7, sp, #0
 800bea8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800beae:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800beb0:	697b      	ldr	r3, [r7, #20]
 800beb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800beb4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800beb6:	697b      	ldr	r3, [r7, #20]
 800beb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800beba:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bebc:	697b      	ldr	r3, [r7, #20]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	689b      	ldr	r3, [r3, #8]
 800bec2:	2280      	movs	r2, #128	; 0x80
 800bec4:	4013      	ands	r3, r2
 800bec6:	2b80      	cmp	r3, #128	; 0x80
 800bec8:	d10a      	bne.n	800bee0 <UART_DMAError+0x3e>
 800beca:	693b      	ldr	r3, [r7, #16]
 800becc:	2b21      	cmp	r3, #33	; 0x21
 800bece:	d107      	bne.n	800bee0 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bed0:	697b      	ldr	r3, [r7, #20]
 800bed2:	2252      	movs	r2, #82	; 0x52
 800bed4:	2100      	movs	r1, #0
 800bed6:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800bed8:	697b      	ldr	r3, [r7, #20]
 800beda:	0018      	movs	r0, r3
 800bedc:	f7ff ff64 	bl	800bda8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bee0:	697b      	ldr	r3, [r7, #20]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	689b      	ldr	r3, [r3, #8]
 800bee6:	2240      	movs	r2, #64	; 0x40
 800bee8:	4013      	ands	r3, r2
 800beea:	2b40      	cmp	r3, #64	; 0x40
 800beec:	d10a      	bne.n	800bf04 <UART_DMAError+0x62>
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	2b22      	cmp	r3, #34	; 0x22
 800bef2:	d107      	bne.n	800bf04 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bef4:	697b      	ldr	r3, [r7, #20]
 800bef6:	225a      	movs	r2, #90	; 0x5a
 800bef8:	2100      	movs	r1, #0
 800befa:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800befc:	697b      	ldr	r3, [r7, #20]
 800befe:	0018      	movs	r0, r3
 800bf00:	f7ff ff66 	bl	800bdd0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bf04:	697b      	ldr	r3, [r7, #20]
 800bf06:	2280      	movs	r2, #128	; 0x80
 800bf08:	589b      	ldr	r3, [r3, r2]
 800bf0a:	2210      	movs	r2, #16
 800bf0c:	431a      	orrs	r2, r3
 800bf0e:	697b      	ldr	r3, [r7, #20]
 800bf10:	2180      	movs	r1, #128	; 0x80
 800bf12:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bf14:	697b      	ldr	r3, [r7, #20]
 800bf16:	0018      	movs	r0, r3
 800bf18:	f7ff fa6c 	bl	800b3f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bf1c:	46c0      	nop			; (mov r8, r8)
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	b006      	add	sp, #24
 800bf22:	bd80      	pop	{r7, pc}

0800bf24 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b084      	sub	sp, #16
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf30:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	225a      	movs	r2, #90	; 0x5a
 800bf36:	2100      	movs	r1, #0
 800bf38:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	2252      	movs	r2, #82	; 0x52
 800bf3e:	2100      	movs	r1, #0
 800bf40:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	0018      	movs	r0, r3
 800bf46:	f7ff fa55 	bl	800b3f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bf4a:	46c0      	nop			; (mov r8, r8)
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	b004      	add	sp, #16
 800bf50:	bd80      	pop	{r7, pc}

0800bf52 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bf52:	b580      	push	{r7, lr}
 800bf54:	b082      	sub	sp, #8
 800bf56:	af00      	add	r7, sp, #0
 800bf58:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	681a      	ldr	r2, [r3, #0]
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	2140      	movs	r1, #64	; 0x40
 800bf66:	438a      	bics	r2, r1
 800bf68:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2220      	movs	r2, #32
 800bf6e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2200      	movs	r2, #0
 800bf74:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	0018      	movs	r0, r3
 800bf7a:	f7f9 f98b 	bl	8005294 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bf7e:	46c0      	nop			; (mov r8, r8)
 800bf80:	46bd      	mov	sp, r7
 800bf82:	b002      	add	sp, #8
 800bf84:	bd80      	pop	{r7, pc}
	...

0800bf88 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b084      	sub	sp, #16
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800bf90:	200e      	movs	r0, #14
 800bf92:	183b      	adds	r3, r7, r0
 800bf94:	687a      	ldr	r2, [r7, #4]
 800bf96:	215c      	movs	r1, #92	; 0x5c
 800bf98:	5a52      	ldrh	r2, [r2, r1]
 800bf9a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bfa0:	2b22      	cmp	r3, #34	; 0x22
 800bfa2:	d157      	bne.n	800c054 <UART_RxISR_8BIT+0xcc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bfaa:	210c      	movs	r1, #12
 800bfac:	187b      	adds	r3, r7, r1
 800bfae:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800bfb0:	187b      	adds	r3, r7, r1
 800bfb2:	881b      	ldrh	r3, [r3, #0]
 800bfb4:	b2da      	uxtb	r2, r3
 800bfb6:	183b      	adds	r3, r7, r0
 800bfb8:	881b      	ldrh	r3, [r3, #0]
 800bfba:	b2d9      	uxtb	r1, r3
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfc0:	400a      	ands	r2, r1
 800bfc2:	b2d2      	uxtb	r2, r2
 800bfc4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfca:	1c5a      	adds	r2, r3, #1
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	225a      	movs	r2, #90	; 0x5a
 800bfd4:	5a9b      	ldrh	r3, [r3, r2]
 800bfd6:	b29b      	uxth	r3, r3
 800bfd8:	3b01      	subs	r3, #1
 800bfda:	b299      	uxth	r1, r3
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	225a      	movs	r2, #90	; 0x5a
 800bfe0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	225a      	movs	r2, #90	; 0x5a
 800bfe6:	5a9b      	ldrh	r3, [r3, r2]
 800bfe8:	b29b      	uxth	r3, r3
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d13a      	bne.n	800c064 <UART_RxISR_8BIT+0xdc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	681a      	ldr	r2, [r3, #0]
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	491c      	ldr	r1, [pc, #112]	; (800c06c <UART_RxISR_8BIT+0xe4>)
 800bffa:	400a      	ands	r2, r1
 800bffc:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	689a      	ldr	r2, [r3, #8]
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	2101      	movs	r1, #1
 800c00a:	438a      	bics	r2, r1
 800c00c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	2220      	movs	r2, #32
 800c012:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2200      	movs	r2, #0
 800c018:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c01e:	2b01      	cmp	r3, #1
 800c020:	d110      	bne.n	800c044 <UART_RxISR_8BIT+0xbc>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	681a      	ldr	r2, [r3, #0]
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	2110      	movs	r1, #16
 800c02e:	438a      	bics	r2, r1
 800c030:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	2258      	movs	r2, #88	; 0x58
 800c036:	5a9a      	ldrh	r2, [r3, r2]
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	0011      	movs	r1, r2
 800c03c:	0018      	movs	r0, r3
 800c03e:	f7ff f9e1 	bl	800b404 <HAL_UARTEx_RxEventCallback>
 800c042:	e003      	b.n	800c04c <UART_RxISR_8BIT+0xc4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	0018      	movs	r0, r3
 800c048:	f7f9 f932 	bl	80052b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2200      	movs	r2, #0
 800c050:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c052:	e007      	b.n	800c064 <UART_RxISR_8BIT+0xdc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	699a      	ldr	r2, [r3, #24]
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	2108      	movs	r1, #8
 800c060:	430a      	orrs	r2, r1
 800c062:	619a      	str	r2, [r3, #24]
}
 800c064:	46c0      	nop			; (mov r8, r8)
 800c066:	46bd      	mov	sp, r7
 800c068:	b004      	add	sp, #16
 800c06a:	bd80      	pop	{r7, pc}
 800c06c:	fffffedf 	.word	0xfffffedf

0800c070 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b084      	sub	sp, #16
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c078:	200e      	movs	r0, #14
 800c07a:	183b      	adds	r3, r7, r0
 800c07c:	687a      	ldr	r2, [r7, #4]
 800c07e:	215c      	movs	r1, #92	; 0x5c
 800c080:	5a52      	ldrh	r2, [r2, r1]
 800c082:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c088:	2b22      	cmp	r3, #34	; 0x22
 800c08a:	d157      	bne.n	800c13c <UART_RxISR_16BIT+0xcc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c092:	210c      	movs	r1, #12
 800c094:	187b      	adds	r3, r7, r1
 800c096:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c09c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800c09e:	187b      	adds	r3, r7, r1
 800c0a0:	183a      	adds	r2, r7, r0
 800c0a2:	881b      	ldrh	r3, [r3, #0]
 800c0a4:	8812      	ldrh	r2, [r2, #0]
 800c0a6:	4013      	ands	r3, r2
 800c0a8:	b29a      	uxth	r2, r3
 800c0aa:	68bb      	ldr	r3, [r7, #8]
 800c0ac:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0b2:	1c9a      	adds	r2, r3, #2
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	225a      	movs	r2, #90	; 0x5a
 800c0bc:	5a9b      	ldrh	r3, [r3, r2]
 800c0be:	b29b      	uxth	r3, r3
 800c0c0:	3b01      	subs	r3, #1
 800c0c2:	b299      	uxth	r1, r3
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	225a      	movs	r2, #90	; 0x5a
 800c0c8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	225a      	movs	r2, #90	; 0x5a
 800c0ce:	5a9b      	ldrh	r3, [r3, r2]
 800c0d0:	b29b      	uxth	r3, r3
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d13a      	bne.n	800c14c <UART_RxISR_16BIT+0xdc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	681a      	ldr	r2, [r3, #0]
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	491c      	ldr	r1, [pc, #112]	; (800c154 <UART_RxISR_16BIT+0xe4>)
 800c0e2:	400a      	ands	r2, r1
 800c0e4:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	689a      	ldr	r2, [r3, #8]
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	2101      	movs	r1, #1
 800c0f2:	438a      	bics	r2, r1
 800c0f4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	2220      	movs	r2, #32
 800c0fa:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2200      	movs	r2, #0
 800c100:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c106:	2b01      	cmp	r3, #1
 800c108:	d110      	bne.n	800c12c <UART_RxISR_16BIT+0xbc>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	681a      	ldr	r2, [r3, #0]
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	2110      	movs	r1, #16
 800c116:	438a      	bics	r2, r1
 800c118:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	2258      	movs	r2, #88	; 0x58
 800c11e:	5a9a      	ldrh	r2, [r3, r2]
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	0011      	movs	r1, r2
 800c124:	0018      	movs	r0, r3
 800c126:	f7ff f96d 	bl	800b404 <HAL_UARTEx_RxEventCallback>
 800c12a:	e003      	b.n	800c134 <UART_RxISR_16BIT+0xc4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	0018      	movs	r0, r3
 800c130:	f7f9 f8be 	bl	80052b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2200      	movs	r2, #0
 800c138:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c13a:	e007      	b.n	800c14c <UART_RxISR_16BIT+0xdc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	699a      	ldr	r2, [r3, #24]
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	2108      	movs	r1, #8
 800c148:	430a      	orrs	r2, r1
 800c14a:	619a      	str	r2, [r3, #24]
}
 800c14c:	46c0      	nop			; (mov r8, r8)
 800c14e:	46bd      	mov	sp, r7
 800c150:	b004      	add	sp, #16
 800c152:	bd80      	pop	{r7, pc}
 800c154:	fffffedf 	.word	0xfffffedf

0800c158 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b082      	sub	sp, #8
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c160:	46c0      	nop			; (mov r8, r8)
 800c162:	46bd      	mov	sp, r7
 800c164:	b002      	add	sp, #8
 800c166:	bd80      	pop	{r7, pc}

0800c168 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b088      	sub	sp, #32
 800c16c:	af02      	add	r7, sp, #8
 800c16e:	60f8      	str	r0, [r7, #12]
 800c170:	1d3b      	adds	r3, r7, #4
 800c172:	6019      	str	r1, [r3, #0]
 800c174:	605a      	str	r2, [r3, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c176:	2317      	movs	r3, #23
 800c178:	18fb      	adds	r3, r7, r3
 800c17a:	2200      	movs	r2, #0
 800c17c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	2274      	movs	r2, #116	; 0x74
 800c182:	5c9b      	ldrb	r3, [r3, r2]
 800c184:	2b01      	cmp	r3, #1
 800c186:	d101      	bne.n	800c18c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x24>
 800c188:	2302      	movs	r3, #2
 800c18a:	e04a      	b.n	800c222 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xba>
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	2274      	movs	r2, #116	; 0x74
 800c190:	2101      	movs	r1, #1
 800c192:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	2224      	movs	r2, #36	; 0x24
 800c198:	679a      	str	r2, [r3, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	681a      	ldr	r2, [r3, #0]
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	2101      	movs	r1, #1
 800c1a6:	438a      	bics	r2, r1
 800c1a8:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	689b      	ldr	r3, [r3, #8]
 800c1b0:	4a1e      	ldr	r2, [pc, #120]	; (800c22c <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc4>)
 800c1b2:	4013      	ands	r3, r2
 800c1b4:	0019      	movs	r1, r3
 800c1b6:	1d3b      	adds	r3, r7, #4
 800c1b8:	681a      	ldr	r2, [r3, #0]
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	430a      	orrs	r2, r1
 800c1c0:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800c1c2:	1d3b      	adds	r3, r7, #4
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d105      	bne.n	800c1d6 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x6e>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800c1ca:	1d3b      	adds	r3, r7, #4
 800c1cc:	68f8      	ldr	r0, [r7, #12]
 800c1ce:	6819      	ldr	r1, [r3, #0]
 800c1d0:	685a      	ldr	r2, [r3, #4]
 800c1d2:	f000 f84f 	bl	800c274 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	681a      	ldr	r2, [r3, #0]
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	2101      	movs	r1, #1
 800c1e2:	430a      	orrs	r2, r1
 800c1e4:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c1e6:	f7f8 fdea 	bl	8004dbe <HAL_GetTick>
 800c1ea:	0003      	movs	r3, r0
 800c1ec:	613b      	str	r3, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c1ee:	693b      	ldr	r3, [r7, #16]
 800c1f0:	2280      	movs	r2, #128	; 0x80
 800c1f2:	03d1      	lsls	r1, r2, #15
 800c1f4:	68f8      	ldr	r0, [r7, #12]
 800c1f6:	4a0e      	ldr	r2, [pc, #56]	; (800c230 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc8>)
 800c1f8:	9200      	str	r2, [sp, #0]
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	f7ff fcc8 	bl	800bb90 <UART_WaitOnFlagUntilTimeout>
 800c200:	1e03      	subs	r3, r0, #0
 800c202:	d004      	beq.n	800c20e <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa6>
  {
    status = HAL_TIMEOUT;
 800c204:	2317      	movs	r3, #23
 800c206:	18fb      	adds	r3, r7, r3
 800c208:	2203      	movs	r2, #3
 800c20a:	701a      	strb	r2, [r3, #0]
 800c20c:	e002      	b.n	800c214 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xac>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	2220      	movs	r2, #32
 800c212:	679a      	str	r2, [r3, #120]	; 0x78
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	2274      	movs	r2, #116	; 0x74
 800c218:	2100      	movs	r1, #0
 800c21a:	5499      	strb	r1, [r3, r2]

  return status;
 800c21c:	2317      	movs	r3, #23
 800c21e:	18fb      	adds	r3, r7, r3
 800c220:	781b      	ldrb	r3, [r3, #0]
}
 800c222:	0018      	movs	r0, r3
 800c224:	46bd      	mov	sp, r7
 800c226:	b006      	add	sp, #24
 800c228:	bd80      	pop	{r7, pc}
 800c22a:	46c0      	nop			; (mov r8, r8)
 800c22c:	ffcfffff 	.word	0xffcfffff
 800c230:	01ffffff 	.word	0x01ffffff

0800c234 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800c234:	b580      	push	{r7, lr}
 800c236:	b082      	sub	sp, #8
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2274      	movs	r2, #116	; 0x74
 800c240:	5c9b      	ldrb	r3, [r3, r2]
 800c242:	2b01      	cmp	r3, #1
 800c244:	d101      	bne.n	800c24a <HAL_UARTEx_EnableStopMode+0x16>
 800c246:	2302      	movs	r3, #2
 800c248:	e010      	b.n	800c26c <HAL_UARTEx_EnableStopMode+0x38>
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	2274      	movs	r2, #116	; 0x74
 800c24e:	2101      	movs	r1, #1
 800c250:	5499      	strb	r1, [r3, r2]

  /* Set UESM bit */
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	681a      	ldr	r2, [r3, #0]
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	2102      	movs	r1, #2
 800c25e:	430a      	orrs	r2, r1
 800c260:	601a      	str	r2, [r3, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2274      	movs	r2, #116	; 0x74
 800c266:	2100      	movs	r1, #0
 800c268:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c26a:	2300      	movs	r3, #0
}
 800c26c:	0018      	movs	r0, r3
 800c26e:	46bd      	mov	sp, r7
 800c270:	b002      	add	sp, #8
 800c272:	bd80      	pop	{r7, pc}

0800c274 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800c274:	b580      	push	{r7, lr}
 800c276:	b084      	sub	sp, #16
 800c278:	af00      	add	r7, sp, #0
 800c27a:	60f8      	str	r0, [r7, #12]
 800c27c:	1d3b      	adds	r3, r7, #4
 800c27e:	6019      	str	r1, [r3, #0]
 800c280:	605a      	str	r2, [r3, #4]
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	685b      	ldr	r3, [r3, #4]
 800c288:	2210      	movs	r2, #16
 800c28a:	4393      	bics	r3, r2
 800c28c:	001a      	movs	r2, r3
 800c28e:	1d3b      	adds	r3, r7, #4
 800c290:	889b      	ldrh	r3, [r3, #4]
 800c292:	0019      	movs	r1, r3
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	430a      	orrs	r2, r1
 800c29a:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	685b      	ldr	r3, [r3, #4]
 800c2a2:	021b      	lsls	r3, r3, #8
 800c2a4:	0a19      	lsrs	r1, r3, #8
 800c2a6:	1d3b      	adds	r3, r7, #4
 800c2a8:	799b      	ldrb	r3, [r3, #6]
 800c2aa:	061a      	lsls	r2, r3, #24
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	430a      	orrs	r2, r1
 800c2b2:	605a      	str	r2, [r3, #4]
}
 800c2b4:	46c0      	nop			; (mov r8, r8)
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	b004      	add	sp, #16
 800c2ba:	bd80      	pop	{r7, pc}

0800c2bc <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b082      	sub	sp, #8
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	33f1      	adds	r3, #241	; 0xf1
 800c2c8:	2210      	movs	r2, #16
 800c2ca:	2100      	movs	r1, #0
 800c2cc:	0018      	movs	r0, r3
 800c2ce:	f00d f951 	bl	8019574 <memset1>
    ctx->M_n = 0;
 800c2d2:	687a      	ldr	r2, [r7, #4]
 800c2d4:	238a      	movs	r3, #138	; 0x8a
 800c2d6:	005b      	lsls	r3, r3, #1
 800c2d8:	2100      	movs	r1, #0
 800c2da:	50d1      	str	r1, [r2, r3]
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	22f0      	movs	r2, #240	; 0xf0
 800c2e0:	2100      	movs	r1, #0
 800c2e2:	0018      	movs	r0, r3
 800c2e4:	f00d f946 	bl	8019574 <memset1>
}
 800c2e8:	46c0      	nop			; (mov r8, r8)
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	b002      	add	sp, #8
 800c2ee:	bd80      	pop	{r7, pc}

0800c2f0 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b082      	sub	sp, #8
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
 800c2f8:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800c2fa:	687a      	ldr	r2, [r7, #4]
 800c2fc:	683b      	ldr	r3, [r7, #0]
 800c2fe:	2110      	movs	r1, #16
 800c300:	0018      	movs	r0, r3
 800c302:	f000 feaf 	bl	800d064 <lorawan_aes_set_key>
}
 800c306:	46c0      	nop			; (mov r8, r8)
 800c308:	46bd      	mov	sp, r7
 800c30a:	b002      	add	sp, #8
 800c30c:	bd80      	pop	{r7, pc}

0800c30e <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800c30e:	b590      	push	{r4, r7, lr}
 800c310:	b08d      	sub	sp, #52	; 0x34
 800c312:	af00      	add	r7, sp, #0
 800c314:	60f8      	str	r0, [r7, #12]
 800c316:	60b9      	str	r1, [r7, #8]
 800c318:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800c31a:	68fa      	ldr	r2, [r7, #12]
 800c31c:	238a      	movs	r3, #138	; 0x8a
 800c31e:	005b      	lsls	r3, r3, #1
 800c320:	58d3      	ldr	r3, [r2, r3]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d100      	bne.n	800c328 <AES_CMAC_Update+0x1a>
 800c326:	e0a4      	b.n	800c472 <AES_CMAC_Update+0x164>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800c328:	68fa      	ldr	r2, [r7, #12]
 800c32a:	238a      	movs	r3, #138	; 0x8a
 800c32c:	005b      	lsls	r3, r3, #1
 800c32e:	58d3      	ldr	r3, [r2, r3]
 800c330:	2210      	movs	r2, #16
 800c332:	1ad2      	subs	r2, r2, r3
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	4293      	cmp	r3, r2
 800c338:	d900      	bls.n	800c33c <AES_CMAC_Update+0x2e>
 800c33a:	0013      	movs	r3, r2
 800c33c:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	1c9a      	adds	r2, r3, #2
 800c342:	32ff      	adds	r2, #255	; 0xff
 800c344:	68f9      	ldr	r1, [r7, #12]
 800c346:	238a      	movs	r3, #138	; 0x8a
 800c348:	005b      	lsls	r3, r3, #1
 800c34a:	58cb      	ldr	r3, [r1, r3]
 800c34c:	18d3      	adds	r3, r2, r3
 800c34e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c350:	b292      	uxth	r2, r2
 800c352:	68b9      	ldr	r1, [r7, #8]
 800c354:	0018      	movs	r0, r3
 800c356:	f00d f8cf 	bl	80194f8 <memcpy1>
        ctx->M_n += mlen;
 800c35a:	68fa      	ldr	r2, [r7, #12]
 800c35c:	238a      	movs	r3, #138	; 0x8a
 800c35e:	005b      	lsls	r3, r3, #1
 800c360:	58d2      	ldr	r2, [r2, r3]
 800c362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c364:	18d1      	adds	r1, r2, r3
 800c366:	68fa      	ldr	r2, [r7, #12]
 800c368:	238a      	movs	r3, #138	; 0x8a
 800c36a:	005b      	lsls	r3, r3, #1
 800c36c:	50d1      	str	r1, [r2, r3]
        if( ctx->M_n < 16 || len == mlen )
 800c36e:	68fa      	ldr	r2, [r7, #12]
 800c370:	238a      	movs	r3, #138	; 0x8a
 800c372:	005b      	lsls	r3, r3, #1
 800c374:	58d3      	ldr	r3, [r2, r3]
 800c376:	2b0f      	cmp	r3, #15
 800c378:	d800      	bhi.n	800c37c <AES_CMAC_Update+0x6e>
 800c37a:	e08c      	b.n	800c496 <AES_CMAC_Update+0x188>
 800c37c:	687a      	ldr	r2, [r7, #4]
 800c37e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c380:	429a      	cmp	r2, r3
 800c382:	d100      	bne.n	800c386 <AES_CMAC_Update+0x78>
 800c384:	e087      	b.n	800c496 <AES_CMAC_Update+0x188>
            return;
        XOR( ctx->M_last, ctx->X );
 800c386:	2300      	movs	r3, #0
 800c388:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c38a:	e018      	b.n	800c3be <AES_CMAC_Update+0xb0>
 800c38c:	68fa      	ldr	r2, [r7, #12]
 800c38e:	21f1      	movs	r1, #241	; 0xf1
 800c390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c392:	18d3      	adds	r3, r2, r3
 800c394:	185b      	adds	r3, r3, r1
 800c396:	781a      	ldrb	r2, [r3, #0]
 800c398:	68f8      	ldr	r0, [r7, #12]
 800c39a:	2302      	movs	r3, #2
 800c39c:	33ff      	adds	r3, #255	; 0xff
 800c39e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c3a0:	1841      	adds	r1, r0, r1
 800c3a2:	18cb      	adds	r3, r1, r3
 800c3a4:	781b      	ldrb	r3, [r3, #0]
 800c3a6:	4053      	eors	r3, r2
 800c3a8:	b2d8      	uxtb	r0, r3
 800c3aa:	68fa      	ldr	r2, [r7, #12]
 800c3ac:	21f1      	movs	r1, #241	; 0xf1
 800c3ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3b0:	18d3      	adds	r3, r2, r3
 800c3b2:	185b      	adds	r3, r3, r1
 800c3b4:	1c02      	adds	r2, r0, #0
 800c3b6:	701a      	strb	r2, [r3, #0]
 800c3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ba:	3301      	adds	r3, #1
 800c3bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c3be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3c0:	2b0f      	cmp	r3, #15
 800c3c2:	dde3      	ble.n	800c38c <AES_CMAC_Update+0x7e>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	33f1      	adds	r3, #241	; 0xf1
 800c3c8:	0019      	movs	r1, r3
 800c3ca:	2414      	movs	r4, #20
 800c3cc:	193b      	adds	r3, r7, r4
 800c3ce:	2210      	movs	r2, #16
 800c3d0:	0018      	movs	r0, r3
 800c3d2:	f00d f891 	bl	80194f8 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800c3d6:	68fa      	ldr	r2, [r7, #12]
 800c3d8:	1939      	adds	r1, r7, r4
 800c3da:	193b      	adds	r3, r7, r4
 800c3dc:	0018      	movs	r0, r3
 800c3de:	f000 ff7d 	bl	800d2dc <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	33f1      	adds	r3, #241	; 0xf1
 800c3e6:	1939      	adds	r1, r7, r4
 800c3e8:	2210      	movs	r2, #16
 800c3ea:	0018      	movs	r0, r3
 800c3ec:	f00d f884 	bl	80194f8 <memcpy1>

        data += mlen;
 800c3f0:	68ba      	ldr	r2, [r7, #8]
 800c3f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3f4:	18d3      	adds	r3, r2, r3
 800c3f6:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800c3f8:	687a      	ldr	r2, [r7, #4]
 800c3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3fc:	1ad3      	subs	r3, r2, r3
 800c3fe:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800c400:	e037      	b.n	800c472 <AES_CMAC_Update+0x164>
    { /* not last block */

        XOR( data, ctx->X );
 800c402:	2300      	movs	r3, #0
 800c404:	62bb      	str	r3, [r7, #40]	; 0x28
 800c406:	e015      	b.n	800c434 <AES_CMAC_Update+0x126>
 800c408:	68fa      	ldr	r2, [r7, #12]
 800c40a:	21f1      	movs	r1, #241	; 0xf1
 800c40c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c40e:	18d3      	adds	r3, r2, r3
 800c410:	185b      	adds	r3, r3, r1
 800c412:	781a      	ldrb	r2, [r3, #0]
 800c414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c416:	68b9      	ldr	r1, [r7, #8]
 800c418:	18cb      	adds	r3, r1, r3
 800c41a:	781b      	ldrb	r3, [r3, #0]
 800c41c:	4053      	eors	r3, r2
 800c41e:	b2d8      	uxtb	r0, r3
 800c420:	68fa      	ldr	r2, [r7, #12]
 800c422:	21f1      	movs	r1, #241	; 0xf1
 800c424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c426:	18d3      	adds	r3, r2, r3
 800c428:	185b      	adds	r3, r3, r1
 800c42a:	1c02      	adds	r2, r0, #0
 800c42c:	701a      	strb	r2, [r3, #0]
 800c42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c430:	3301      	adds	r3, #1
 800c432:	62bb      	str	r3, [r7, #40]	; 0x28
 800c434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c436:	2b0f      	cmp	r3, #15
 800c438:	dde6      	ble.n	800c408 <AES_CMAC_Update+0xfa>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	33f1      	adds	r3, #241	; 0xf1
 800c43e:	0019      	movs	r1, r3
 800c440:	2414      	movs	r4, #20
 800c442:	193b      	adds	r3, r7, r4
 800c444:	2210      	movs	r2, #16
 800c446:	0018      	movs	r0, r3
 800c448:	f00d f856 	bl	80194f8 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800c44c:	68fa      	ldr	r2, [r7, #12]
 800c44e:	1939      	adds	r1, r7, r4
 800c450:	193b      	adds	r3, r7, r4
 800c452:	0018      	movs	r0, r3
 800c454:	f000 ff42 	bl	800d2dc <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	33f1      	adds	r3, #241	; 0xf1
 800c45c:	1939      	adds	r1, r7, r4
 800c45e:	2210      	movs	r2, #16
 800c460:	0018      	movs	r0, r3
 800c462:	f00d f849 	bl	80194f8 <memcpy1>

        data += 16;
 800c466:	68bb      	ldr	r3, [r7, #8]
 800c468:	3310      	adds	r3, #16
 800c46a:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	3b10      	subs	r3, #16
 800c470:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	2b10      	cmp	r3, #16
 800c476:	d8c4      	bhi.n	800c402 <AES_CMAC_Update+0xf4>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	3302      	adds	r3, #2
 800c47c:	33ff      	adds	r3, #255	; 0xff
 800c47e:	687a      	ldr	r2, [r7, #4]
 800c480:	b292      	uxth	r2, r2
 800c482:	68b9      	ldr	r1, [r7, #8]
 800c484:	0018      	movs	r0, r3
 800c486:	f00d f837 	bl	80194f8 <memcpy1>
    ctx->M_n = len;
 800c48a:	68fa      	ldr	r2, [r7, #12]
 800c48c:	238a      	movs	r3, #138	; 0x8a
 800c48e:	005b      	lsls	r3, r3, #1
 800c490:	6879      	ldr	r1, [r7, #4]
 800c492:	50d1      	str	r1, [r2, r3]
 800c494:	e000      	b.n	800c498 <AES_CMAC_Update+0x18a>
            return;
 800c496:	46c0      	nop			; (mov r8, r8)
}
 800c498:	46bd      	mov	sp, r7
 800c49a:	b00d      	add	sp, #52	; 0x34
 800c49c:	bd90      	pop	{r4, r7, pc}

0800c49e <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800c49e:	b590      	push	{r4, r7, lr}
 800c4a0:	b093      	sub	sp, #76	; 0x4c
 800c4a2:	af00      	add	r7, sp, #0
 800c4a4:	6078      	str	r0, [r7, #4]
 800c4a6:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800c4a8:	241c      	movs	r4, #28
 800c4aa:	193b      	adds	r3, r7, r4
 800c4ac:	2210      	movs	r2, #16
 800c4ae:	2100      	movs	r1, #0
 800c4b0:	0018      	movs	r0, r3
 800c4b2:	f00d f85f 	bl	8019574 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800c4b6:	683a      	ldr	r2, [r7, #0]
 800c4b8:	1939      	adds	r1, r7, r4
 800c4ba:	193b      	adds	r3, r7, r4
 800c4bc:	0018      	movs	r0, r3
 800c4be:	f000 ff0d 	bl	800d2dc <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800c4c2:	193b      	adds	r3, r7, r4
 800c4c4:	781b      	ldrb	r3, [r3, #0]
 800c4c6:	b25b      	sxtb	r3, r3
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	da2e      	bge.n	800c52a <AES_CMAC_Final+0x8c>
    {
        LSHIFT( K, K );
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	647b      	str	r3, [r7, #68]	; 0x44
 800c4d0:	e018      	b.n	800c504 <AES_CMAC_Final+0x66>
 800c4d2:	201c      	movs	r0, #28
 800c4d4:	183a      	adds	r2, r7, r0
 800c4d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c4d8:	18d3      	adds	r3, r2, r3
 800c4da:	781b      	ldrb	r3, [r3, #0]
 800c4dc:	005b      	lsls	r3, r3, #1
 800c4de:	b25a      	sxtb	r2, r3
 800c4e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c4e2:	3301      	adds	r3, #1
 800c4e4:	1839      	adds	r1, r7, r0
 800c4e6:	5ccb      	ldrb	r3, [r1, r3]
 800c4e8:	09db      	lsrs	r3, r3, #7
 800c4ea:	b2db      	uxtb	r3, r3
 800c4ec:	b25b      	sxtb	r3, r3
 800c4ee:	4313      	orrs	r3, r2
 800c4f0:	b25b      	sxtb	r3, r3
 800c4f2:	b2d9      	uxtb	r1, r3
 800c4f4:	183a      	adds	r2, r7, r0
 800c4f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c4f8:	18d3      	adds	r3, r2, r3
 800c4fa:	1c0a      	adds	r2, r1, #0
 800c4fc:	701a      	strb	r2, [r3, #0]
 800c4fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c500:	3301      	adds	r3, #1
 800c502:	647b      	str	r3, [r7, #68]	; 0x44
 800c504:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c506:	2b0e      	cmp	r3, #14
 800c508:	dde3      	ble.n	800c4d2 <AES_CMAC_Final+0x34>
 800c50a:	211c      	movs	r1, #28
 800c50c:	187b      	adds	r3, r7, r1
 800c50e:	7bdb      	ldrb	r3, [r3, #15]
 800c510:	18db      	adds	r3, r3, r3
 800c512:	b2da      	uxtb	r2, r3
 800c514:	187b      	adds	r3, r7, r1
 800c516:	73da      	strb	r2, [r3, #15]
        K[15] ^= 0x87;
 800c518:	187b      	adds	r3, r7, r1
 800c51a:	7bdb      	ldrb	r3, [r3, #15]
 800c51c:	2279      	movs	r2, #121	; 0x79
 800c51e:	4252      	negs	r2, r2
 800c520:	4053      	eors	r3, r2
 800c522:	b2da      	uxtb	r2, r3
 800c524:	187b      	adds	r3, r7, r1
 800c526:	73da      	strb	r2, [r3, #15]
 800c528:	e025      	b.n	800c576 <AES_CMAC_Final+0xd8>
    }
    else
        LSHIFT( K, K );
 800c52a:	2300      	movs	r3, #0
 800c52c:	643b      	str	r3, [r7, #64]	; 0x40
 800c52e:	e018      	b.n	800c562 <AES_CMAC_Final+0xc4>
 800c530:	201c      	movs	r0, #28
 800c532:	183a      	adds	r2, r7, r0
 800c534:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c536:	18d3      	adds	r3, r2, r3
 800c538:	781b      	ldrb	r3, [r3, #0]
 800c53a:	005b      	lsls	r3, r3, #1
 800c53c:	b25a      	sxtb	r2, r3
 800c53e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c540:	3301      	adds	r3, #1
 800c542:	1839      	adds	r1, r7, r0
 800c544:	5ccb      	ldrb	r3, [r1, r3]
 800c546:	09db      	lsrs	r3, r3, #7
 800c548:	b2db      	uxtb	r3, r3
 800c54a:	b25b      	sxtb	r3, r3
 800c54c:	4313      	orrs	r3, r2
 800c54e:	b25b      	sxtb	r3, r3
 800c550:	b2d9      	uxtb	r1, r3
 800c552:	183a      	adds	r2, r7, r0
 800c554:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c556:	18d3      	adds	r3, r2, r3
 800c558:	1c0a      	adds	r2, r1, #0
 800c55a:	701a      	strb	r2, [r3, #0]
 800c55c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c55e:	3301      	adds	r3, #1
 800c560:	643b      	str	r3, [r7, #64]	; 0x40
 800c562:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c564:	2b0e      	cmp	r3, #14
 800c566:	dde3      	ble.n	800c530 <AES_CMAC_Final+0x92>
 800c568:	211c      	movs	r1, #28
 800c56a:	187b      	adds	r3, r7, r1
 800c56c:	7bdb      	ldrb	r3, [r3, #15]
 800c56e:	18db      	adds	r3, r3, r3
 800c570:	b2da      	uxtb	r2, r3
 800c572:	187b      	adds	r3, r7, r1
 800c574:	73da      	strb	r2, [r3, #15]

    if( ctx->M_n == 16 )
 800c576:	683a      	ldr	r2, [r7, #0]
 800c578:	238a      	movs	r3, #138	; 0x8a
 800c57a:	005b      	lsls	r3, r3, #1
 800c57c:	58d3      	ldr	r3, [r2, r3]
 800c57e:	2b10      	cmp	r3, #16
 800c580:	d11f      	bne.n	800c5c2 <AES_CMAC_Final+0x124>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800c582:	2300      	movs	r3, #0
 800c584:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c586:	e018      	b.n	800c5ba <AES_CMAC_Final+0x11c>
 800c588:	6839      	ldr	r1, [r7, #0]
 800c58a:	2302      	movs	r3, #2
 800c58c:	33ff      	adds	r3, #255	; 0xff
 800c58e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c590:	188a      	adds	r2, r1, r2
 800c592:	18d3      	adds	r3, r2, r3
 800c594:	781a      	ldrb	r2, [r3, #0]
 800c596:	231c      	movs	r3, #28
 800c598:	18f9      	adds	r1, r7, r3
 800c59a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c59c:	18cb      	adds	r3, r1, r3
 800c59e:	781b      	ldrb	r3, [r3, #0]
 800c5a0:	4053      	eors	r3, r2
 800c5a2:	b2d8      	uxtb	r0, r3
 800c5a4:	6839      	ldr	r1, [r7, #0]
 800c5a6:	2302      	movs	r3, #2
 800c5a8:	33ff      	adds	r3, #255	; 0xff
 800c5aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c5ac:	188a      	adds	r2, r1, r2
 800c5ae:	18d3      	adds	r3, r2, r3
 800c5b0:	1c02      	adds	r2, r0, #0
 800c5b2:	701a      	strb	r2, [r3, #0]
 800c5b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5b6:	3301      	adds	r3, #1
 800c5b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5bc:	2b0f      	cmp	r3, #15
 800c5be:	dde3      	ble.n	800c588 <AES_CMAC_Final+0xea>
 800c5c0:	e09f      	b.n	800c702 <AES_CMAC_Final+0x264>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800c5c2:	231c      	movs	r3, #28
 800c5c4:	18fb      	adds	r3, r7, r3
 800c5c6:	781b      	ldrb	r3, [r3, #0]
 800c5c8:	b25b      	sxtb	r3, r3
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	da2e      	bge.n	800c62c <AES_CMAC_Final+0x18e>
        {
            LSHIFT( K, K );
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	63bb      	str	r3, [r7, #56]	; 0x38
 800c5d2:	e018      	b.n	800c606 <AES_CMAC_Final+0x168>
 800c5d4:	201c      	movs	r0, #28
 800c5d6:	183a      	adds	r2, r7, r0
 800c5d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5da:	18d3      	adds	r3, r2, r3
 800c5dc:	781b      	ldrb	r3, [r3, #0]
 800c5de:	005b      	lsls	r3, r3, #1
 800c5e0:	b25a      	sxtb	r2, r3
 800c5e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5e4:	3301      	adds	r3, #1
 800c5e6:	1839      	adds	r1, r7, r0
 800c5e8:	5ccb      	ldrb	r3, [r1, r3]
 800c5ea:	09db      	lsrs	r3, r3, #7
 800c5ec:	b2db      	uxtb	r3, r3
 800c5ee:	b25b      	sxtb	r3, r3
 800c5f0:	4313      	orrs	r3, r2
 800c5f2:	b25b      	sxtb	r3, r3
 800c5f4:	b2d9      	uxtb	r1, r3
 800c5f6:	183a      	adds	r2, r7, r0
 800c5f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5fa:	18d3      	adds	r3, r2, r3
 800c5fc:	1c0a      	adds	r2, r1, #0
 800c5fe:	701a      	strb	r2, [r3, #0]
 800c600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c602:	3301      	adds	r3, #1
 800c604:	63bb      	str	r3, [r7, #56]	; 0x38
 800c606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c608:	2b0e      	cmp	r3, #14
 800c60a:	dde3      	ble.n	800c5d4 <AES_CMAC_Final+0x136>
 800c60c:	211c      	movs	r1, #28
 800c60e:	187b      	adds	r3, r7, r1
 800c610:	7bdb      	ldrb	r3, [r3, #15]
 800c612:	18db      	adds	r3, r3, r3
 800c614:	b2da      	uxtb	r2, r3
 800c616:	187b      	adds	r3, r7, r1
 800c618:	73da      	strb	r2, [r3, #15]
            K[15] ^= 0x87;
 800c61a:	187b      	adds	r3, r7, r1
 800c61c:	7bdb      	ldrb	r3, [r3, #15]
 800c61e:	2279      	movs	r2, #121	; 0x79
 800c620:	4252      	negs	r2, r2
 800c622:	4053      	eors	r3, r2
 800c624:	b2da      	uxtb	r2, r3
 800c626:	187b      	adds	r3, r7, r1
 800c628:	73da      	strb	r2, [r3, #15]
 800c62a:	e025      	b.n	800c678 <AES_CMAC_Final+0x1da>
        }
        else
            LSHIFT( K, K );
 800c62c:	2300      	movs	r3, #0
 800c62e:	637b      	str	r3, [r7, #52]	; 0x34
 800c630:	e018      	b.n	800c664 <AES_CMAC_Final+0x1c6>
 800c632:	201c      	movs	r0, #28
 800c634:	183a      	adds	r2, r7, r0
 800c636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c638:	18d3      	adds	r3, r2, r3
 800c63a:	781b      	ldrb	r3, [r3, #0]
 800c63c:	005b      	lsls	r3, r3, #1
 800c63e:	b25a      	sxtb	r2, r3
 800c640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c642:	3301      	adds	r3, #1
 800c644:	1839      	adds	r1, r7, r0
 800c646:	5ccb      	ldrb	r3, [r1, r3]
 800c648:	09db      	lsrs	r3, r3, #7
 800c64a:	b2db      	uxtb	r3, r3
 800c64c:	b25b      	sxtb	r3, r3
 800c64e:	4313      	orrs	r3, r2
 800c650:	b25b      	sxtb	r3, r3
 800c652:	b2d9      	uxtb	r1, r3
 800c654:	183a      	adds	r2, r7, r0
 800c656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c658:	18d3      	adds	r3, r2, r3
 800c65a:	1c0a      	adds	r2, r1, #0
 800c65c:	701a      	strb	r2, [r3, #0]
 800c65e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c660:	3301      	adds	r3, #1
 800c662:	637b      	str	r3, [r7, #52]	; 0x34
 800c664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c666:	2b0e      	cmp	r3, #14
 800c668:	dde3      	ble.n	800c632 <AES_CMAC_Final+0x194>
 800c66a:	211c      	movs	r1, #28
 800c66c:	187b      	adds	r3, r7, r1
 800c66e:	7bdb      	ldrb	r3, [r3, #15]
 800c670:	18db      	adds	r3, r3, r3
 800c672:	b2da      	uxtb	r2, r3
 800c674:	187b      	adds	r3, r7, r1
 800c676:	73da      	strb	r2, [r3, #15]

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800c678:	683a      	ldr	r2, [r7, #0]
 800c67a:	238a      	movs	r3, #138	; 0x8a
 800c67c:	005b      	lsls	r3, r3, #1
 800c67e:	58d2      	ldr	r2, [r2, r3]
 800c680:	6839      	ldr	r1, [r7, #0]
 800c682:	2302      	movs	r3, #2
 800c684:	33ff      	adds	r3, #255	; 0xff
 800c686:	188a      	adds	r2, r1, r2
 800c688:	18d3      	adds	r3, r2, r3
 800c68a:	2280      	movs	r2, #128	; 0x80
 800c68c:	701a      	strb	r2, [r3, #0]
        while( ++ctx->M_n < 16 )
 800c68e:	e00a      	b.n	800c6a6 <AES_CMAC_Final+0x208>
            ctx->M_last[ctx->M_n] = 0;
 800c690:	683a      	ldr	r2, [r7, #0]
 800c692:	238a      	movs	r3, #138	; 0x8a
 800c694:	005b      	lsls	r3, r3, #1
 800c696:	58d2      	ldr	r2, [r2, r3]
 800c698:	6839      	ldr	r1, [r7, #0]
 800c69a:	2302      	movs	r3, #2
 800c69c:	33ff      	adds	r3, #255	; 0xff
 800c69e:	188a      	adds	r2, r1, r2
 800c6a0:	18d3      	adds	r3, r2, r3
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	701a      	strb	r2, [r3, #0]
        while( ++ctx->M_n < 16 )
 800c6a6:	683a      	ldr	r2, [r7, #0]
 800c6a8:	238a      	movs	r3, #138	; 0x8a
 800c6aa:	005b      	lsls	r3, r3, #1
 800c6ac:	58d3      	ldr	r3, [r2, r3]
 800c6ae:	1c59      	adds	r1, r3, #1
 800c6b0:	683a      	ldr	r2, [r7, #0]
 800c6b2:	238a      	movs	r3, #138	; 0x8a
 800c6b4:	005b      	lsls	r3, r3, #1
 800c6b6:	50d1      	str	r1, [r2, r3]
 800c6b8:	683a      	ldr	r2, [r7, #0]
 800c6ba:	238a      	movs	r3, #138	; 0x8a
 800c6bc:	005b      	lsls	r3, r3, #1
 800c6be:	58d3      	ldr	r3, [r2, r3]
 800c6c0:	2b0f      	cmp	r3, #15
 800c6c2:	d9e5      	bls.n	800c690 <AES_CMAC_Final+0x1f2>

        XOR( K, ctx->M_last );
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	633b      	str	r3, [r7, #48]	; 0x30
 800c6c8:	e018      	b.n	800c6fc <AES_CMAC_Final+0x25e>
 800c6ca:	6839      	ldr	r1, [r7, #0]
 800c6cc:	2302      	movs	r3, #2
 800c6ce:	33ff      	adds	r3, #255	; 0xff
 800c6d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6d2:	188a      	adds	r2, r1, r2
 800c6d4:	18d3      	adds	r3, r2, r3
 800c6d6:	781a      	ldrb	r2, [r3, #0]
 800c6d8:	231c      	movs	r3, #28
 800c6da:	18f9      	adds	r1, r7, r3
 800c6dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6de:	18cb      	adds	r3, r1, r3
 800c6e0:	781b      	ldrb	r3, [r3, #0]
 800c6e2:	4053      	eors	r3, r2
 800c6e4:	b2d8      	uxtb	r0, r3
 800c6e6:	6839      	ldr	r1, [r7, #0]
 800c6e8:	2302      	movs	r3, #2
 800c6ea:	33ff      	adds	r3, #255	; 0xff
 800c6ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6ee:	188a      	adds	r2, r1, r2
 800c6f0:	18d3      	adds	r3, r2, r3
 800c6f2:	1c02      	adds	r2, r0, #0
 800c6f4:	701a      	strb	r2, [r3, #0]
 800c6f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6f8:	3301      	adds	r3, #1
 800c6fa:	633b      	str	r3, [r7, #48]	; 0x30
 800c6fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6fe:	2b0f      	cmp	r3, #15
 800c700:	dde3      	ble.n	800c6ca <AES_CMAC_Final+0x22c>
    }
    XOR( ctx->M_last, ctx->X );
 800c702:	2300      	movs	r3, #0
 800c704:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c706:	e018      	b.n	800c73a <AES_CMAC_Final+0x29c>
 800c708:	683a      	ldr	r2, [r7, #0]
 800c70a:	21f1      	movs	r1, #241	; 0xf1
 800c70c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c70e:	18d3      	adds	r3, r2, r3
 800c710:	185b      	adds	r3, r3, r1
 800c712:	781a      	ldrb	r2, [r3, #0]
 800c714:	6838      	ldr	r0, [r7, #0]
 800c716:	2302      	movs	r3, #2
 800c718:	33ff      	adds	r3, #255	; 0xff
 800c71a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c71c:	1841      	adds	r1, r0, r1
 800c71e:	18cb      	adds	r3, r1, r3
 800c720:	781b      	ldrb	r3, [r3, #0]
 800c722:	4053      	eors	r3, r2
 800c724:	b2d8      	uxtb	r0, r3
 800c726:	683a      	ldr	r2, [r7, #0]
 800c728:	21f1      	movs	r1, #241	; 0xf1
 800c72a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c72c:	18d3      	adds	r3, r2, r3
 800c72e:	185b      	adds	r3, r3, r1
 800c730:	1c02      	adds	r2, r0, #0
 800c732:	701a      	strb	r2, [r3, #0]
 800c734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c736:	3301      	adds	r3, #1
 800c738:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c73a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c73c:	2b0f      	cmp	r3, #15
 800c73e:	dde3      	ble.n	800c708 <AES_CMAC_Final+0x26a>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	33f1      	adds	r3, #241	; 0xf1
 800c744:	0019      	movs	r1, r3
 800c746:	240c      	movs	r4, #12
 800c748:	193b      	adds	r3, r7, r4
 800c74a:	2210      	movs	r2, #16
 800c74c:	0018      	movs	r0, r3
 800c74e:	f00c fed3 	bl	80194f8 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800c752:	683a      	ldr	r2, [r7, #0]
 800c754:	6879      	ldr	r1, [r7, #4]
 800c756:	193b      	adds	r3, r7, r4
 800c758:	0018      	movs	r0, r3
 800c75a:	f000 fdbf 	bl	800d2dc <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800c75e:	231c      	movs	r3, #28
 800c760:	18fb      	adds	r3, r7, r3
 800c762:	2210      	movs	r2, #16
 800c764:	2100      	movs	r1, #0
 800c766:	0018      	movs	r0, r3
 800c768:	f00c ff04 	bl	8019574 <memset1>
}
 800c76c:	46c0      	nop			; (mov r8, r8)
 800c76e:	46bd      	mov	sp, r7
 800c770:	b013      	add	sp, #76	; 0x4c
 800c772:	bd90      	pop	{r4, r7, pc}

0800c774 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b082      	sub	sp, #8
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
 800c77c:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800c77e:	683b      	ldr	r3, [r7, #0]
 800c780:	781a      	ldrb	r2, [r3, #0]
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	3301      	adds	r3, #1
 800c78a:	683a      	ldr	r2, [r7, #0]
 800c78c:	7852      	ldrb	r2, [r2, #1]
 800c78e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	3302      	adds	r3, #2
 800c794:	683a      	ldr	r2, [r7, #0]
 800c796:	7892      	ldrb	r2, [r2, #2]
 800c798:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	3303      	adds	r3, #3
 800c79e:	683a      	ldr	r2, [r7, #0]
 800c7a0:	78d2      	ldrb	r2, [r2, #3]
 800c7a2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	3304      	adds	r3, #4
 800c7a8:	683a      	ldr	r2, [r7, #0]
 800c7aa:	7912      	ldrb	r2, [r2, #4]
 800c7ac:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	3305      	adds	r3, #5
 800c7b2:	683a      	ldr	r2, [r7, #0]
 800c7b4:	7952      	ldrb	r2, [r2, #5]
 800c7b6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	3306      	adds	r3, #6
 800c7bc:	683a      	ldr	r2, [r7, #0]
 800c7be:	7992      	ldrb	r2, [r2, #6]
 800c7c0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	3307      	adds	r3, #7
 800c7c6:	683a      	ldr	r2, [r7, #0]
 800c7c8:	79d2      	ldrb	r2, [r2, #7]
 800c7ca:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	3308      	adds	r3, #8
 800c7d0:	683a      	ldr	r2, [r7, #0]
 800c7d2:	7a12      	ldrb	r2, [r2, #8]
 800c7d4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	3309      	adds	r3, #9
 800c7da:	683a      	ldr	r2, [r7, #0]
 800c7dc:	7a52      	ldrb	r2, [r2, #9]
 800c7de:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	330a      	adds	r3, #10
 800c7e4:	683a      	ldr	r2, [r7, #0]
 800c7e6:	7a92      	ldrb	r2, [r2, #10]
 800c7e8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	330b      	adds	r3, #11
 800c7ee:	683a      	ldr	r2, [r7, #0]
 800c7f0:	7ad2      	ldrb	r2, [r2, #11]
 800c7f2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	330c      	adds	r3, #12
 800c7f8:	683a      	ldr	r2, [r7, #0]
 800c7fa:	7b12      	ldrb	r2, [r2, #12]
 800c7fc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	330d      	adds	r3, #13
 800c802:	683a      	ldr	r2, [r7, #0]
 800c804:	7b52      	ldrb	r2, [r2, #13]
 800c806:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	330e      	adds	r3, #14
 800c80c:	683a      	ldr	r2, [r7, #0]
 800c80e:	7b92      	ldrb	r2, [r2, #14]
 800c810:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	330f      	adds	r3, #15
 800c816:	683a      	ldr	r2, [r7, #0]
 800c818:	7bd2      	ldrb	r2, [r2, #15]
 800c81a:	701a      	strb	r2, [r3, #0]
#endif
}
 800c81c:	46c0      	nop			; (mov r8, r8)
 800c81e:	46bd      	mov	sp, r7
 800c820:	b002      	add	sp, #8
 800c822:	bd80      	pop	{r7, pc}

0800c824 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b084      	sub	sp, #16
 800c828:	af00      	add	r7, sp, #0
 800c82a:	60f8      	str	r0, [r7, #12]
 800c82c:	60b9      	str	r1, [r7, #8]
 800c82e:	1dfb      	adds	r3, r7, #7
 800c830:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800c832:	e007      	b.n	800c844 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800c834:	68ba      	ldr	r2, [r7, #8]
 800c836:	1c53      	adds	r3, r2, #1
 800c838:	60bb      	str	r3, [r7, #8]
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	1c59      	adds	r1, r3, #1
 800c83e:	60f9      	str	r1, [r7, #12]
 800c840:	7812      	ldrb	r2, [r2, #0]
 800c842:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800c844:	1dfb      	adds	r3, r7, #7
 800c846:	781b      	ldrb	r3, [r3, #0]
 800c848:	1dfa      	adds	r2, r7, #7
 800c84a:	1e59      	subs	r1, r3, #1
 800c84c:	7011      	strb	r1, [r2, #0]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d1f0      	bne.n	800c834 <copy_block_nn+0x10>
}
 800c852:	46c0      	nop			; (mov r8, r8)
 800c854:	46c0      	nop			; (mov r8, r8)
 800c856:	46bd      	mov	sp, r7
 800c858:	b004      	add	sp, #16
 800c85a:	bd80      	pop	{r7, pc}

0800c85c <xor_block>:

static void xor_block( void *d, const void *s )
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b082      	sub	sp, #8
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
 800c864:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	781a      	ldrb	r2, [r3, #0]
 800c86a:	683b      	ldr	r3, [r7, #0]
 800c86c:	781b      	ldrb	r3, [r3, #0]
 800c86e:	4053      	eors	r3, r2
 800c870:	b2da      	uxtb	r2, r3
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	3301      	adds	r3, #1
 800c87a:	7819      	ldrb	r1, [r3, #0]
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	3301      	adds	r3, #1
 800c880:	781a      	ldrb	r2, [r3, #0]
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	3301      	adds	r3, #1
 800c886:	404a      	eors	r2, r1
 800c888:	b2d2      	uxtb	r2, r2
 800c88a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	3302      	adds	r3, #2
 800c890:	7819      	ldrb	r1, [r3, #0]
 800c892:	683b      	ldr	r3, [r7, #0]
 800c894:	3302      	adds	r3, #2
 800c896:	781a      	ldrb	r2, [r3, #0]
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	3302      	adds	r3, #2
 800c89c:	404a      	eors	r2, r1
 800c89e:	b2d2      	uxtb	r2, r2
 800c8a0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	3303      	adds	r3, #3
 800c8a6:	7819      	ldrb	r1, [r3, #0]
 800c8a8:	683b      	ldr	r3, [r7, #0]
 800c8aa:	3303      	adds	r3, #3
 800c8ac:	781a      	ldrb	r2, [r3, #0]
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	3303      	adds	r3, #3
 800c8b2:	404a      	eors	r2, r1
 800c8b4:	b2d2      	uxtb	r2, r2
 800c8b6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	3304      	adds	r3, #4
 800c8bc:	7819      	ldrb	r1, [r3, #0]
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	3304      	adds	r3, #4
 800c8c2:	781a      	ldrb	r2, [r3, #0]
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	3304      	adds	r3, #4
 800c8c8:	404a      	eors	r2, r1
 800c8ca:	b2d2      	uxtb	r2, r2
 800c8cc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	3305      	adds	r3, #5
 800c8d2:	7819      	ldrb	r1, [r3, #0]
 800c8d4:	683b      	ldr	r3, [r7, #0]
 800c8d6:	3305      	adds	r3, #5
 800c8d8:	781a      	ldrb	r2, [r3, #0]
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	3305      	adds	r3, #5
 800c8de:	404a      	eors	r2, r1
 800c8e0:	b2d2      	uxtb	r2, r2
 800c8e2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	3306      	adds	r3, #6
 800c8e8:	7819      	ldrb	r1, [r3, #0]
 800c8ea:	683b      	ldr	r3, [r7, #0]
 800c8ec:	3306      	adds	r3, #6
 800c8ee:	781a      	ldrb	r2, [r3, #0]
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	3306      	adds	r3, #6
 800c8f4:	404a      	eors	r2, r1
 800c8f6:	b2d2      	uxtb	r2, r2
 800c8f8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	3307      	adds	r3, #7
 800c8fe:	7819      	ldrb	r1, [r3, #0]
 800c900:	683b      	ldr	r3, [r7, #0]
 800c902:	3307      	adds	r3, #7
 800c904:	781a      	ldrb	r2, [r3, #0]
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	3307      	adds	r3, #7
 800c90a:	404a      	eors	r2, r1
 800c90c:	b2d2      	uxtb	r2, r2
 800c90e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	3308      	adds	r3, #8
 800c914:	7819      	ldrb	r1, [r3, #0]
 800c916:	683b      	ldr	r3, [r7, #0]
 800c918:	3308      	adds	r3, #8
 800c91a:	781a      	ldrb	r2, [r3, #0]
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	3308      	adds	r3, #8
 800c920:	404a      	eors	r2, r1
 800c922:	b2d2      	uxtb	r2, r2
 800c924:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	3309      	adds	r3, #9
 800c92a:	7819      	ldrb	r1, [r3, #0]
 800c92c:	683b      	ldr	r3, [r7, #0]
 800c92e:	3309      	adds	r3, #9
 800c930:	781a      	ldrb	r2, [r3, #0]
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	3309      	adds	r3, #9
 800c936:	404a      	eors	r2, r1
 800c938:	b2d2      	uxtb	r2, r2
 800c93a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	330a      	adds	r3, #10
 800c940:	7819      	ldrb	r1, [r3, #0]
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	330a      	adds	r3, #10
 800c946:	781a      	ldrb	r2, [r3, #0]
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	330a      	adds	r3, #10
 800c94c:	404a      	eors	r2, r1
 800c94e:	b2d2      	uxtb	r2, r2
 800c950:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	330b      	adds	r3, #11
 800c956:	7819      	ldrb	r1, [r3, #0]
 800c958:	683b      	ldr	r3, [r7, #0]
 800c95a:	330b      	adds	r3, #11
 800c95c:	781a      	ldrb	r2, [r3, #0]
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	330b      	adds	r3, #11
 800c962:	404a      	eors	r2, r1
 800c964:	b2d2      	uxtb	r2, r2
 800c966:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	330c      	adds	r3, #12
 800c96c:	7819      	ldrb	r1, [r3, #0]
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	330c      	adds	r3, #12
 800c972:	781a      	ldrb	r2, [r3, #0]
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	330c      	adds	r3, #12
 800c978:	404a      	eors	r2, r1
 800c97a:	b2d2      	uxtb	r2, r2
 800c97c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	330d      	adds	r3, #13
 800c982:	7819      	ldrb	r1, [r3, #0]
 800c984:	683b      	ldr	r3, [r7, #0]
 800c986:	330d      	adds	r3, #13
 800c988:	781a      	ldrb	r2, [r3, #0]
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	330d      	adds	r3, #13
 800c98e:	404a      	eors	r2, r1
 800c990:	b2d2      	uxtb	r2, r2
 800c992:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	330e      	adds	r3, #14
 800c998:	7819      	ldrb	r1, [r3, #0]
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	330e      	adds	r3, #14
 800c99e:	781a      	ldrb	r2, [r3, #0]
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	330e      	adds	r3, #14
 800c9a4:	404a      	eors	r2, r1
 800c9a6:	b2d2      	uxtb	r2, r2
 800c9a8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	330f      	adds	r3, #15
 800c9ae:	7819      	ldrb	r1, [r3, #0]
 800c9b0:	683b      	ldr	r3, [r7, #0]
 800c9b2:	330f      	adds	r3, #15
 800c9b4:	781a      	ldrb	r2, [r3, #0]
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	330f      	adds	r3, #15
 800c9ba:	404a      	eors	r2, r1
 800c9bc:	b2d2      	uxtb	r2, r2
 800c9be:	701a      	strb	r2, [r3, #0]
#endif
}
 800c9c0:	46c0      	nop			; (mov r8, r8)
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	b002      	add	sp, #8
 800c9c6:	bd80      	pop	{r7, pc}

0800c9c8 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b084      	sub	sp, #16
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	60f8      	str	r0, [r7, #12]
 800c9d0:	60b9      	str	r1, [r7, #8]
 800c9d2:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800c9d4:	68bb      	ldr	r3, [r7, #8]
 800c9d6:	781a      	ldrb	r2, [r3, #0]
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	781b      	ldrb	r3, [r3, #0]
 800c9dc:	4053      	eors	r3, r2
 800c9de:	b2da      	uxtb	r2, r3
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800c9e4:	68bb      	ldr	r3, [r7, #8]
 800c9e6:	3301      	adds	r3, #1
 800c9e8:	7819      	ldrb	r1, [r3, #0]
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	3301      	adds	r3, #1
 800c9ee:	781a      	ldrb	r2, [r3, #0]
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	3301      	adds	r3, #1
 800c9f4:	404a      	eors	r2, r1
 800c9f6:	b2d2      	uxtb	r2, r2
 800c9f8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800c9fa:	68bb      	ldr	r3, [r7, #8]
 800c9fc:	3302      	adds	r3, #2
 800c9fe:	7819      	ldrb	r1, [r3, #0]
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	3302      	adds	r3, #2
 800ca04:	781a      	ldrb	r2, [r3, #0]
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	3302      	adds	r3, #2
 800ca0a:	404a      	eors	r2, r1
 800ca0c:	b2d2      	uxtb	r2, r2
 800ca0e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800ca10:	68bb      	ldr	r3, [r7, #8]
 800ca12:	3303      	adds	r3, #3
 800ca14:	7819      	ldrb	r1, [r3, #0]
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	3303      	adds	r3, #3
 800ca1a:	781a      	ldrb	r2, [r3, #0]
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	3303      	adds	r3, #3
 800ca20:	404a      	eors	r2, r1
 800ca22:	b2d2      	uxtb	r2, r2
 800ca24:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800ca26:	68bb      	ldr	r3, [r7, #8]
 800ca28:	3304      	adds	r3, #4
 800ca2a:	7819      	ldrb	r1, [r3, #0]
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	3304      	adds	r3, #4
 800ca30:	781a      	ldrb	r2, [r3, #0]
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	3304      	adds	r3, #4
 800ca36:	404a      	eors	r2, r1
 800ca38:	b2d2      	uxtb	r2, r2
 800ca3a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800ca3c:	68bb      	ldr	r3, [r7, #8]
 800ca3e:	3305      	adds	r3, #5
 800ca40:	7819      	ldrb	r1, [r3, #0]
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	3305      	adds	r3, #5
 800ca46:	781a      	ldrb	r2, [r3, #0]
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	3305      	adds	r3, #5
 800ca4c:	404a      	eors	r2, r1
 800ca4e:	b2d2      	uxtb	r2, r2
 800ca50:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800ca52:	68bb      	ldr	r3, [r7, #8]
 800ca54:	3306      	adds	r3, #6
 800ca56:	7819      	ldrb	r1, [r3, #0]
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	3306      	adds	r3, #6
 800ca5c:	781a      	ldrb	r2, [r3, #0]
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	3306      	adds	r3, #6
 800ca62:	404a      	eors	r2, r1
 800ca64:	b2d2      	uxtb	r2, r2
 800ca66:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800ca68:	68bb      	ldr	r3, [r7, #8]
 800ca6a:	3307      	adds	r3, #7
 800ca6c:	7819      	ldrb	r1, [r3, #0]
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	3307      	adds	r3, #7
 800ca72:	781a      	ldrb	r2, [r3, #0]
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	3307      	adds	r3, #7
 800ca78:	404a      	eors	r2, r1
 800ca7a:	b2d2      	uxtb	r2, r2
 800ca7c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800ca7e:	68bb      	ldr	r3, [r7, #8]
 800ca80:	3308      	adds	r3, #8
 800ca82:	7819      	ldrb	r1, [r3, #0]
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	3308      	adds	r3, #8
 800ca88:	781a      	ldrb	r2, [r3, #0]
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	3308      	adds	r3, #8
 800ca8e:	404a      	eors	r2, r1
 800ca90:	b2d2      	uxtb	r2, r2
 800ca92:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800ca94:	68bb      	ldr	r3, [r7, #8]
 800ca96:	3309      	adds	r3, #9
 800ca98:	7819      	ldrb	r1, [r3, #0]
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	3309      	adds	r3, #9
 800ca9e:	781a      	ldrb	r2, [r3, #0]
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	3309      	adds	r3, #9
 800caa4:	404a      	eors	r2, r1
 800caa6:	b2d2      	uxtb	r2, r2
 800caa8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800caaa:	68bb      	ldr	r3, [r7, #8]
 800caac:	330a      	adds	r3, #10
 800caae:	7819      	ldrb	r1, [r3, #0]
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	330a      	adds	r3, #10
 800cab4:	781a      	ldrb	r2, [r3, #0]
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	330a      	adds	r3, #10
 800caba:	404a      	eors	r2, r1
 800cabc:	b2d2      	uxtb	r2, r2
 800cabe:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800cac0:	68bb      	ldr	r3, [r7, #8]
 800cac2:	330b      	adds	r3, #11
 800cac4:	7819      	ldrb	r1, [r3, #0]
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	330b      	adds	r3, #11
 800caca:	781a      	ldrb	r2, [r3, #0]
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	330b      	adds	r3, #11
 800cad0:	404a      	eors	r2, r1
 800cad2:	b2d2      	uxtb	r2, r2
 800cad4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800cad6:	68bb      	ldr	r3, [r7, #8]
 800cad8:	330c      	adds	r3, #12
 800cada:	7819      	ldrb	r1, [r3, #0]
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	330c      	adds	r3, #12
 800cae0:	781a      	ldrb	r2, [r3, #0]
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	330c      	adds	r3, #12
 800cae6:	404a      	eors	r2, r1
 800cae8:	b2d2      	uxtb	r2, r2
 800caea:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800caec:	68bb      	ldr	r3, [r7, #8]
 800caee:	330d      	adds	r3, #13
 800caf0:	7819      	ldrb	r1, [r3, #0]
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	330d      	adds	r3, #13
 800caf6:	781a      	ldrb	r2, [r3, #0]
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	330d      	adds	r3, #13
 800cafc:	404a      	eors	r2, r1
 800cafe:	b2d2      	uxtb	r2, r2
 800cb00:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800cb02:	68bb      	ldr	r3, [r7, #8]
 800cb04:	330e      	adds	r3, #14
 800cb06:	7819      	ldrb	r1, [r3, #0]
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	330e      	adds	r3, #14
 800cb0c:	781a      	ldrb	r2, [r3, #0]
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	330e      	adds	r3, #14
 800cb12:	404a      	eors	r2, r1
 800cb14:	b2d2      	uxtb	r2, r2
 800cb16:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800cb18:	68bb      	ldr	r3, [r7, #8]
 800cb1a:	330f      	adds	r3, #15
 800cb1c:	7819      	ldrb	r1, [r3, #0]
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	330f      	adds	r3, #15
 800cb22:	781a      	ldrb	r2, [r3, #0]
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	330f      	adds	r3, #15
 800cb28:	404a      	eors	r2, r1
 800cb2a:	b2d2      	uxtb	r2, r2
 800cb2c:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800cb2e:	46c0      	nop			; (mov r8, r8)
 800cb30:	46bd      	mov	sp, r7
 800cb32:	b004      	add	sp, #16
 800cb34:	bd80      	pop	{r7, pc}

0800cb36 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800cb36:	b580      	push	{r7, lr}
 800cb38:	b082      	sub	sp, #8
 800cb3a:	af00      	add	r7, sp, #0
 800cb3c:	6078      	str	r0, [r7, #4]
 800cb3e:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800cb40:	683a      	ldr	r2, [r7, #0]
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	0011      	movs	r1, r2
 800cb46:	0018      	movs	r0, r3
 800cb48:	f7ff fe88 	bl	800c85c <xor_block>
}
 800cb4c:	46c0      	nop			; (mov r8, r8)
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	b002      	add	sp, #8
 800cb52:	bd80      	pop	{r7, pc}

0800cb54 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b084      	sub	sp, #16
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	781b      	ldrb	r3, [r3, #0]
 800cb60:	001a      	movs	r2, r3
 800cb62:	4b4c      	ldr	r3, [pc, #304]	; (800cc94 <shift_sub_rows+0x140>)
 800cb64:	5c9a      	ldrb	r2, [r3, r2]
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	701a      	strb	r2, [r3, #0]
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	3304      	adds	r3, #4
 800cb6e:	781b      	ldrb	r3, [r3, #0]
 800cb70:	0019      	movs	r1, r3
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	3304      	adds	r3, #4
 800cb76:	4a47      	ldr	r2, [pc, #284]	; (800cc94 <shift_sub_rows+0x140>)
 800cb78:	5c52      	ldrb	r2, [r2, r1]
 800cb7a:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	3308      	adds	r3, #8
 800cb80:	781b      	ldrb	r3, [r3, #0]
 800cb82:	0019      	movs	r1, r3
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	3308      	adds	r3, #8
 800cb88:	4a42      	ldr	r2, [pc, #264]	; (800cc94 <shift_sub_rows+0x140>)
 800cb8a:	5c52      	ldrb	r2, [r2, r1]
 800cb8c:	701a      	strb	r2, [r3, #0]
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	330c      	adds	r3, #12
 800cb92:	781b      	ldrb	r3, [r3, #0]
 800cb94:	0019      	movs	r1, r3
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	330c      	adds	r3, #12
 800cb9a:	4a3e      	ldr	r2, [pc, #248]	; (800cc94 <shift_sub_rows+0x140>)
 800cb9c:	5c52      	ldrb	r2, [r2, r1]
 800cb9e:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800cba0:	200f      	movs	r0, #15
 800cba2:	183b      	adds	r3, r7, r0
 800cba4:	687a      	ldr	r2, [r7, #4]
 800cba6:	7852      	ldrb	r2, [r2, #1]
 800cba8:	701a      	strb	r2, [r3, #0]
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	3305      	adds	r3, #5
 800cbae:	781b      	ldrb	r3, [r3, #0]
 800cbb0:	0019      	movs	r1, r3
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	3301      	adds	r3, #1
 800cbb6:	4a37      	ldr	r2, [pc, #220]	; (800cc94 <shift_sub_rows+0x140>)
 800cbb8:	5c52      	ldrb	r2, [r2, r1]
 800cbba:	701a      	strb	r2, [r3, #0]
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	3309      	adds	r3, #9
 800cbc0:	781b      	ldrb	r3, [r3, #0]
 800cbc2:	0019      	movs	r1, r3
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	3305      	adds	r3, #5
 800cbc8:	4a32      	ldr	r2, [pc, #200]	; (800cc94 <shift_sub_rows+0x140>)
 800cbca:	5c52      	ldrb	r2, [r2, r1]
 800cbcc:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	330d      	adds	r3, #13
 800cbd2:	781b      	ldrb	r3, [r3, #0]
 800cbd4:	0019      	movs	r1, r3
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	3309      	adds	r3, #9
 800cbda:	4a2e      	ldr	r2, [pc, #184]	; (800cc94 <shift_sub_rows+0x140>)
 800cbdc:	5c52      	ldrb	r2, [r2, r1]
 800cbde:	701a      	strb	r2, [r3, #0]
 800cbe0:	183b      	adds	r3, r7, r0
 800cbe2:	781a      	ldrb	r2, [r3, #0]
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	330d      	adds	r3, #13
 800cbe8:	492a      	ldr	r1, [pc, #168]	; (800cc94 <shift_sub_rows+0x140>)
 800cbea:	5c8a      	ldrb	r2, [r1, r2]
 800cbec:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800cbee:	183b      	adds	r3, r7, r0
 800cbf0:	687a      	ldr	r2, [r7, #4]
 800cbf2:	7892      	ldrb	r2, [r2, #2]
 800cbf4:	701a      	strb	r2, [r3, #0]
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	330a      	adds	r3, #10
 800cbfa:	781b      	ldrb	r3, [r3, #0]
 800cbfc:	0019      	movs	r1, r3
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	3302      	adds	r3, #2
 800cc02:	4a24      	ldr	r2, [pc, #144]	; (800cc94 <shift_sub_rows+0x140>)
 800cc04:	5c52      	ldrb	r2, [r2, r1]
 800cc06:	701a      	strb	r2, [r3, #0]
 800cc08:	183b      	adds	r3, r7, r0
 800cc0a:	781a      	ldrb	r2, [r3, #0]
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	330a      	adds	r3, #10
 800cc10:	4920      	ldr	r1, [pc, #128]	; (800cc94 <shift_sub_rows+0x140>)
 800cc12:	5c8a      	ldrb	r2, [r1, r2]
 800cc14:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800cc16:	183b      	adds	r3, r7, r0
 800cc18:	687a      	ldr	r2, [r7, #4]
 800cc1a:	7992      	ldrb	r2, [r2, #6]
 800cc1c:	701a      	strb	r2, [r3, #0]
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	330e      	adds	r3, #14
 800cc22:	781b      	ldrb	r3, [r3, #0]
 800cc24:	0019      	movs	r1, r3
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	3306      	adds	r3, #6
 800cc2a:	4a1a      	ldr	r2, [pc, #104]	; (800cc94 <shift_sub_rows+0x140>)
 800cc2c:	5c52      	ldrb	r2, [r2, r1]
 800cc2e:	701a      	strb	r2, [r3, #0]
 800cc30:	183b      	adds	r3, r7, r0
 800cc32:	781a      	ldrb	r2, [r3, #0]
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	330e      	adds	r3, #14
 800cc38:	4916      	ldr	r1, [pc, #88]	; (800cc94 <shift_sub_rows+0x140>)
 800cc3a:	5c8a      	ldrb	r2, [r1, r2]
 800cc3c:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800cc3e:	183b      	adds	r3, r7, r0
 800cc40:	687a      	ldr	r2, [r7, #4]
 800cc42:	7bd2      	ldrb	r2, [r2, #15]
 800cc44:	701a      	strb	r2, [r3, #0]
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	330b      	adds	r3, #11
 800cc4a:	781b      	ldrb	r3, [r3, #0]
 800cc4c:	0019      	movs	r1, r3
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	330f      	adds	r3, #15
 800cc52:	4a10      	ldr	r2, [pc, #64]	; (800cc94 <shift_sub_rows+0x140>)
 800cc54:	5c52      	ldrb	r2, [r2, r1]
 800cc56:	701a      	strb	r2, [r3, #0]
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	3307      	adds	r3, #7
 800cc5c:	781b      	ldrb	r3, [r3, #0]
 800cc5e:	0019      	movs	r1, r3
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	330b      	adds	r3, #11
 800cc64:	4a0b      	ldr	r2, [pc, #44]	; (800cc94 <shift_sub_rows+0x140>)
 800cc66:	5c52      	ldrb	r2, [r2, r1]
 800cc68:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	3303      	adds	r3, #3
 800cc6e:	781b      	ldrb	r3, [r3, #0]
 800cc70:	0019      	movs	r1, r3
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	3307      	adds	r3, #7
 800cc76:	4a07      	ldr	r2, [pc, #28]	; (800cc94 <shift_sub_rows+0x140>)
 800cc78:	5c52      	ldrb	r2, [r2, r1]
 800cc7a:	701a      	strb	r2, [r3, #0]
 800cc7c:	183b      	adds	r3, r7, r0
 800cc7e:	781a      	ldrb	r2, [r3, #0]
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	3303      	adds	r3, #3
 800cc84:	4903      	ldr	r1, [pc, #12]	; (800cc94 <shift_sub_rows+0x140>)
 800cc86:	5c8a      	ldrb	r2, [r1, r2]
 800cc88:	701a      	strb	r2, [r3, #0]
}
 800cc8a:	46c0      	nop			; (mov r8, r8)
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	b004      	add	sp, #16
 800cc90:	bd80      	pop	{r7, pc}
 800cc92:	46c0      	nop			; (mov r8, r8)
 800cc94:	0801f220 	.word	0x0801f220

0800cc98 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800cc98:	b590      	push	{r4, r7, lr}
 800cc9a:	b087      	sub	sp, #28
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800cca0:	687a      	ldr	r2, [r7, #4]
 800cca2:	2408      	movs	r4, #8
 800cca4:	193b      	adds	r3, r7, r4
 800cca6:	0011      	movs	r1, r2
 800cca8:	0018      	movs	r0, r3
 800ccaa:	f7ff fd63 	bl	800c774 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800ccae:	0020      	movs	r0, r4
 800ccb0:	183b      	adds	r3, r7, r0
 800ccb2:	781b      	ldrb	r3, [r3, #0]
 800ccb4:	001a      	movs	r2, r3
 800ccb6:	4be8      	ldr	r3, [pc, #928]	; (800d058 <mix_sub_columns+0x3c0>)
 800ccb8:	5c9a      	ldrb	r2, [r3, r2]
 800ccba:	183b      	adds	r3, r7, r0
 800ccbc:	795b      	ldrb	r3, [r3, #5]
 800ccbe:	0019      	movs	r1, r3
 800ccc0:	4be6      	ldr	r3, [pc, #920]	; (800d05c <mix_sub_columns+0x3c4>)
 800ccc2:	5c5b      	ldrb	r3, [r3, r1]
 800ccc4:	4053      	eors	r3, r2
 800ccc6:	b2da      	uxtb	r2, r3
 800ccc8:	183b      	adds	r3, r7, r0
 800ccca:	7a9b      	ldrb	r3, [r3, #10]
 800cccc:	0019      	movs	r1, r3
 800ccce:	4be4      	ldr	r3, [pc, #912]	; (800d060 <mix_sub_columns+0x3c8>)
 800ccd0:	5c5b      	ldrb	r3, [r3, r1]
 800ccd2:	4053      	eors	r3, r2
 800ccd4:	b2da      	uxtb	r2, r3
 800ccd6:	183b      	adds	r3, r7, r0
 800ccd8:	7bdb      	ldrb	r3, [r3, #15]
 800ccda:	0019      	movs	r1, r3
 800ccdc:	4be0      	ldr	r3, [pc, #896]	; (800d060 <mix_sub_columns+0x3c8>)
 800ccde:	5c5b      	ldrb	r3, [r3, r1]
 800cce0:	4053      	eors	r3, r2
 800cce2:	b2da      	uxtb	r2, r3
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800cce8:	183b      	adds	r3, r7, r0
 800ccea:	781b      	ldrb	r3, [r3, #0]
 800ccec:	001a      	movs	r2, r3
 800ccee:	4bdc      	ldr	r3, [pc, #880]	; (800d060 <mix_sub_columns+0x3c8>)
 800ccf0:	5c9a      	ldrb	r2, [r3, r2]
 800ccf2:	183b      	adds	r3, r7, r0
 800ccf4:	795b      	ldrb	r3, [r3, #5]
 800ccf6:	0019      	movs	r1, r3
 800ccf8:	4bd7      	ldr	r3, [pc, #860]	; (800d058 <mix_sub_columns+0x3c0>)
 800ccfa:	5c5b      	ldrb	r3, [r3, r1]
 800ccfc:	4053      	eors	r3, r2
 800ccfe:	b2da      	uxtb	r2, r3
 800cd00:	183b      	adds	r3, r7, r0
 800cd02:	7a9b      	ldrb	r3, [r3, #10]
 800cd04:	0019      	movs	r1, r3
 800cd06:	4bd5      	ldr	r3, [pc, #852]	; (800d05c <mix_sub_columns+0x3c4>)
 800cd08:	5c5b      	ldrb	r3, [r3, r1]
 800cd0a:	4053      	eors	r3, r2
 800cd0c:	b2d9      	uxtb	r1, r3
 800cd0e:	183b      	adds	r3, r7, r0
 800cd10:	7bdb      	ldrb	r3, [r3, #15]
 800cd12:	001a      	movs	r2, r3
 800cd14:	4bd2      	ldr	r3, [pc, #840]	; (800d060 <mix_sub_columns+0x3c8>)
 800cd16:	5c9a      	ldrb	r2, [r3, r2]
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	3301      	adds	r3, #1
 800cd1c:	404a      	eors	r2, r1
 800cd1e:	b2d2      	uxtb	r2, r2
 800cd20:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800cd22:	183b      	adds	r3, r7, r0
 800cd24:	781b      	ldrb	r3, [r3, #0]
 800cd26:	001a      	movs	r2, r3
 800cd28:	4bcd      	ldr	r3, [pc, #820]	; (800d060 <mix_sub_columns+0x3c8>)
 800cd2a:	5c9a      	ldrb	r2, [r3, r2]
 800cd2c:	183b      	adds	r3, r7, r0
 800cd2e:	795b      	ldrb	r3, [r3, #5]
 800cd30:	0019      	movs	r1, r3
 800cd32:	4bcb      	ldr	r3, [pc, #812]	; (800d060 <mix_sub_columns+0x3c8>)
 800cd34:	5c5b      	ldrb	r3, [r3, r1]
 800cd36:	4053      	eors	r3, r2
 800cd38:	b2da      	uxtb	r2, r3
 800cd3a:	183b      	adds	r3, r7, r0
 800cd3c:	7a9b      	ldrb	r3, [r3, #10]
 800cd3e:	0019      	movs	r1, r3
 800cd40:	4bc5      	ldr	r3, [pc, #788]	; (800d058 <mix_sub_columns+0x3c0>)
 800cd42:	5c5b      	ldrb	r3, [r3, r1]
 800cd44:	4053      	eors	r3, r2
 800cd46:	b2d9      	uxtb	r1, r3
 800cd48:	183b      	adds	r3, r7, r0
 800cd4a:	7bdb      	ldrb	r3, [r3, #15]
 800cd4c:	001a      	movs	r2, r3
 800cd4e:	4bc3      	ldr	r3, [pc, #780]	; (800d05c <mix_sub_columns+0x3c4>)
 800cd50:	5c9a      	ldrb	r2, [r3, r2]
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	3302      	adds	r3, #2
 800cd56:	404a      	eors	r2, r1
 800cd58:	b2d2      	uxtb	r2, r2
 800cd5a:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800cd5c:	183b      	adds	r3, r7, r0
 800cd5e:	781b      	ldrb	r3, [r3, #0]
 800cd60:	001a      	movs	r2, r3
 800cd62:	4bbe      	ldr	r3, [pc, #760]	; (800d05c <mix_sub_columns+0x3c4>)
 800cd64:	5c9a      	ldrb	r2, [r3, r2]
 800cd66:	183b      	adds	r3, r7, r0
 800cd68:	795b      	ldrb	r3, [r3, #5]
 800cd6a:	0019      	movs	r1, r3
 800cd6c:	4bbc      	ldr	r3, [pc, #752]	; (800d060 <mix_sub_columns+0x3c8>)
 800cd6e:	5c5b      	ldrb	r3, [r3, r1]
 800cd70:	4053      	eors	r3, r2
 800cd72:	b2da      	uxtb	r2, r3
 800cd74:	183b      	adds	r3, r7, r0
 800cd76:	7a9b      	ldrb	r3, [r3, #10]
 800cd78:	0019      	movs	r1, r3
 800cd7a:	4bb9      	ldr	r3, [pc, #740]	; (800d060 <mix_sub_columns+0x3c8>)
 800cd7c:	5c5b      	ldrb	r3, [r3, r1]
 800cd7e:	4053      	eors	r3, r2
 800cd80:	b2d9      	uxtb	r1, r3
 800cd82:	183b      	adds	r3, r7, r0
 800cd84:	7bdb      	ldrb	r3, [r3, #15]
 800cd86:	001a      	movs	r2, r3
 800cd88:	4bb3      	ldr	r3, [pc, #716]	; (800d058 <mix_sub_columns+0x3c0>)
 800cd8a:	5c9a      	ldrb	r2, [r3, r2]
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	3303      	adds	r3, #3
 800cd90:	404a      	eors	r2, r1
 800cd92:	b2d2      	uxtb	r2, r2
 800cd94:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800cd96:	183b      	adds	r3, r7, r0
 800cd98:	791b      	ldrb	r3, [r3, #4]
 800cd9a:	001a      	movs	r2, r3
 800cd9c:	4bae      	ldr	r3, [pc, #696]	; (800d058 <mix_sub_columns+0x3c0>)
 800cd9e:	5c9a      	ldrb	r2, [r3, r2]
 800cda0:	183b      	adds	r3, r7, r0
 800cda2:	7a5b      	ldrb	r3, [r3, #9]
 800cda4:	0019      	movs	r1, r3
 800cda6:	4bad      	ldr	r3, [pc, #692]	; (800d05c <mix_sub_columns+0x3c4>)
 800cda8:	5c5b      	ldrb	r3, [r3, r1]
 800cdaa:	4053      	eors	r3, r2
 800cdac:	b2da      	uxtb	r2, r3
 800cdae:	183b      	adds	r3, r7, r0
 800cdb0:	7b9b      	ldrb	r3, [r3, #14]
 800cdb2:	0019      	movs	r1, r3
 800cdb4:	4baa      	ldr	r3, [pc, #680]	; (800d060 <mix_sub_columns+0x3c8>)
 800cdb6:	5c5b      	ldrb	r3, [r3, r1]
 800cdb8:	4053      	eors	r3, r2
 800cdba:	b2d9      	uxtb	r1, r3
 800cdbc:	183b      	adds	r3, r7, r0
 800cdbe:	78db      	ldrb	r3, [r3, #3]
 800cdc0:	001a      	movs	r2, r3
 800cdc2:	4ba7      	ldr	r3, [pc, #668]	; (800d060 <mix_sub_columns+0x3c8>)
 800cdc4:	5c9a      	ldrb	r2, [r3, r2]
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	3304      	adds	r3, #4
 800cdca:	404a      	eors	r2, r1
 800cdcc:	b2d2      	uxtb	r2, r2
 800cdce:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800cdd0:	183b      	adds	r3, r7, r0
 800cdd2:	791b      	ldrb	r3, [r3, #4]
 800cdd4:	001a      	movs	r2, r3
 800cdd6:	4ba2      	ldr	r3, [pc, #648]	; (800d060 <mix_sub_columns+0x3c8>)
 800cdd8:	5c9a      	ldrb	r2, [r3, r2]
 800cdda:	183b      	adds	r3, r7, r0
 800cddc:	7a5b      	ldrb	r3, [r3, #9]
 800cdde:	0019      	movs	r1, r3
 800cde0:	4b9d      	ldr	r3, [pc, #628]	; (800d058 <mix_sub_columns+0x3c0>)
 800cde2:	5c5b      	ldrb	r3, [r3, r1]
 800cde4:	4053      	eors	r3, r2
 800cde6:	b2da      	uxtb	r2, r3
 800cde8:	183b      	adds	r3, r7, r0
 800cdea:	7b9b      	ldrb	r3, [r3, #14]
 800cdec:	0019      	movs	r1, r3
 800cdee:	4b9b      	ldr	r3, [pc, #620]	; (800d05c <mix_sub_columns+0x3c4>)
 800cdf0:	5c5b      	ldrb	r3, [r3, r1]
 800cdf2:	4053      	eors	r3, r2
 800cdf4:	b2d9      	uxtb	r1, r3
 800cdf6:	183b      	adds	r3, r7, r0
 800cdf8:	78db      	ldrb	r3, [r3, #3]
 800cdfa:	001a      	movs	r2, r3
 800cdfc:	4b98      	ldr	r3, [pc, #608]	; (800d060 <mix_sub_columns+0x3c8>)
 800cdfe:	5c9a      	ldrb	r2, [r3, r2]
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	3305      	adds	r3, #5
 800ce04:	404a      	eors	r2, r1
 800ce06:	b2d2      	uxtb	r2, r2
 800ce08:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800ce0a:	183b      	adds	r3, r7, r0
 800ce0c:	791b      	ldrb	r3, [r3, #4]
 800ce0e:	001a      	movs	r2, r3
 800ce10:	4b93      	ldr	r3, [pc, #588]	; (800d060 <mix_sub_columns+0x3c8>)
 800ce12:	5c9a      	ldrb	r2, [r3, r2]
 800ce14:	183b      	adds	r3, r7, r0
 800ce16:	7a5b      	ldrb	r3, [r3, #9]
 800ce18:	0019      	movs	r1, r3
 800ce1a:	4b91      	ldr	r3, [pc, #580]	; (800d060 <mix_sub_columns+0x3c8>)
 800ce1c:	5c5b      	ldrb	r3, [r3, r1]
 800ce1e:	4053      	eors	r3, r2
 800ce20:	b2da      	uxtb	r2, r3
 800ce22:	183b      	adds	r3, r7, r0
 800ce24:	7b9b      	ldrb	r3, [r3, #14]
 800ce26:	0019      	movs	r1, r3
 800ce28:	4b8b      	ldr	r3, [pc, #556]	; (800d058 <mix_sub_columns+0x3c0>)
 800ce2a:	5c5b      	ldrb	r3, [r3, r1]
 800ce2c:	4053      	eors	r3, r2
 800ce2e:	b2d9      	uxtb	r1, r3
 800ce30:	183b      	adds	r3, r7, r0
 800ce32:	78db      	ldrb	r3, [r3, #3]
 800ce34:	001a      	movs	r2, r3
 800ce36:	4b89      	ldr	r3, [pc, #548]	; (800d05c <mix_sub_columns+0x3c4>)
 800ce38:	5c9a      	ldrb	r2, [r3, r2]
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	3306      	adds	r3, #6
 800ce3e:	404a      	eors	r2, r1
 800ce40:	b2d2      	uxtb	r2, r2
 800ce42:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800ce44:	183b      	adds	r3, r7, r0
 800ce46:	791b      	ldrb	r3, [r3, #4]
 800ce48:	001a      	movs	r2, r3
 800ce4a:	4b84      	ldr	r3, [pc, #528]	; (800d05c <mix_sub_columns+0x3c4>)
 800ce4c:	5c9a      	ldrb	r2, [r3, r2]
 800ce4e:	183b      	adds	r3, r7, r0
 800ce50:	7a5b      	ldrb	r3, [r3, #9]
 800ce52:	0019      	movs	r1, r3
 800ce54:	4b82      	ldr	r3, [pc, #520]	; (800d060 <mix_sub_columns+0x3c8>)
 800ce56:	5c5b      	ldrb	r3, [r3, r1]
 800ce58:	4053      	eors	r3, r2
 800ce5a:	b2da      	uxtb	r2, r3
 800ce5c:	183b      	adds	r3, r7, r0
 800ce5e:	7b9b      	ldrb	r3, [r3, #14]
 800ce60:	0019      	movs	r1, r3
 800ce62:	4b7f      	ldr	r3, [pc, #508]	; (800d060 <mix_sub_columns+0x3c8>)
 800ce64:	5c5b      	ldrb	r3, [r3, r1]
 800ce66:	4053      	eors	r3, r2
 800ce68:	b2d9      	uxtb	r1, r3
 800ce6a:	183b      	adds	r3, r7, r0
 800ce6c:	78db      	ldrb	r3, [r3, #3]
 800ce6e:	001a      	movs	r2, r3
 800ce70:	4b79      	ldr	r3, [pc, #484]	; (800d058 <mix_sub_columns+0x3c0>)
 800ce72:	5c9a      	ldrb	r2, [r3, r2]
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	3307      	adds	r3, #7
 800ce78:	404a      	eors	r2, r1
 800ce7a:	b2d2      	uxtb	r2, r2
 800ce7c:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800ce7e:	183b      	adds	r3, r7, r0
 800ce80:	7a1b      	ldrb	r3, [r3, #8]
 800ce82:	001a      	movs	r2, r3
 800ce84:	4b74      	ldr	r3, [pc, #464]	; (800d058 <mix_sub_columns+0x3c0>)
 800ce86:	5c9a      	ldrb	r2, [r3, r2]
 800ce88:	183b      	adds	r3, r7, r0
 800ce8a:	7b5b      	ldrb	r3, [r3, #13]
 800ce8c:	0019      	movs	r1, r3
 800ce8e:	4b73      	ldr	r3, [pc, #460]	; (800d05c <mix_sub_columns+0x3c4>)
 800ce90:	5c5b      	ldrb	r3, [r3, r1]
 800ce92:	4053      	eors	r3, r2
 800ce94:	b2da      	uxtb	r2, r3
 800ce96:	183b      	adds	r3, r7, r0
 800ce98:	789b      	ldrb	r3, [r3, #2]
 800ce9a:	0019      	movs	r1, r3
 800ce9c:	4b70      	ldr	r3, [pc, #448]	; (800d060 <mix_sub_columns+0x3c8>)
 800ce9e:	5c5b      	ldrb	r3, [r3, r1]
 800cea0:	4053      	eors	r3, r2
 800cea2:	b2d9      	uxtb	r1, r3
 800cea4:	183b      	adds	r3, r7, r0
 800cea6:	79db      	ldrb	r3, [r3, #7]
 800cea8:	001a      	movs	r2, r3
 800ceaa:	4b6d      	ldr	r3, [pc, #436]	; (800d060 <mix_sub_columns+0x3c8>)
 800ceac:	5c9a      	ldrb	r2, [r3, r2]
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	3308      	adds	r3, #8
 800ceb2:	404a      	eors	r2, r1
 800ceb4:	b2d2      	uxtb	r2, r2
 800ceb6:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800ceb8:	183b      	adds	r3, r7, r0
 800ceba:	7a1b      	ldrb	r3, [r3, #8]
 800cebc:	001a      	movs	r2, r3
 800cebe:	4b68      	ldr	r3, [pc, #416]	; (800d060 <mix_sub_columns+0x3c8>)
 800cec0:	5c9a      	ldrb	r2, [r3, r2]
 800cec2:	183b      	adds	r3, r7, r0
 800cec4:	7b5b      	ldrb	r3, [r3, #13]
 800cec6:	0019      	movs	r1, r3
 800cec8:	4b63      	ldr	r3, [pc, #396]	; (800d058 <mix_sub_columns+0x3c0>)
 800ceca:	5c5b      	ldrb	r3, [r3, r1]
 800cecc:	4053      	eors	r3, r2
 800cece:	b2da      	uxtb	r2, r3
 800ced0:	183b      	adds	r3, r7, r0
 800ced2:	789b      	ldrb	r3, [r3, #2]
 800ced4:	0019      	movs	r1, r3
 800ced6:	4b61      	ldr	r3, [pc, #388]	; (800d05c <mix_sub_columns+0x3c4>)
 800ced8:	5c5b      	ldrb	r3, [r3, r1]
 800ceda:	4053      	eors	r3, r2
 800cedc:	b2d9      	uxtb	r1, r3
 800cede:	183b      	adds	r3, r7, r0
 800cee0:	79db      	ldrb	r3, [r3, #7]
 800cee2:	001a      	movs	r2, r3
 800cee4:	4b5e      	ldr	r3, [pc, #376]	; (800d060 <mix_sub_columns+0x3c8>)
 800cee6:	5c9a      	ldrb	r2, [r3, r2]
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	3309      	adds	r3, #9
 800ceec:	404a      	eors	r2, r1
 800ceee:	b2d2      	uxtb	r2, r2
 800cef0:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800cef2:	183b      	adds	r3, r7, r0
 800cef4:	7a1b      	ldrb	r3, [r3, #8]
 800cef6:	001a      	movs	r2, r3
 800cef8:	4b59      	ldr	r3, [pc, #356]	; (800d060 <mix_sub_columns+0x3c8>)
 800cefa:	5c9a      	ldrb	r2, [r3, r2]
 800cefc:	183b      	adds	r3, r7, r0
 800cefe:	7b5b      	ldrb	r3, [r3, #13]
 800cf00:	0019      	movs	r1, r3
 800cf02:	4b57      	ldr	r3, [pc, #348]	; (800d060 <mix_sub_columns+0x3c8>)
 800cf04:	5c5b      	ldrb	r3, [r3, r1]
 800cf06:	4053      	eors	r3, r2
 800cf08:	b2da      	uxtb	r2, r3
 800cf0a:	183b      	adds	r3, r7, r0
 800cf0c:	789b      	ldrb	r3, [r3, #2]
 800cf0e:	0019      	movs	r1, r3
 800cf10:	4b51      	ldr	r3, [pc, #324]	; (800d058 <mix_sub_columns+0x3c0>)
 800cf12:	5c5b      	ldrb	r3, [r3, r1]
 800cf14:	4053      	eors	r3, r2
 800cf16:	b2d9      	uxtb	r1, r3
 800cf18:	183b      	adds	r3, r7, r0
 800cf1a:	79db      	ldrb	r3, [r3, #7]
 800cf1c:	001a      	movs	r2, r3
 800cf1e:	4b4f      	ldr	r3, [pc, #316]	; (800d05c <mix_sub_columns+0x3c4>)
 800cf20:	5c9a      	ldrb	r2, [r3, r2]
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	330a      	adds	r3, #10
 800cf26:	404a      	eors	r2, r1
 800cf28:	b2d2      	uxtb	r2, r2
 800cf2a:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800cf2c:	183b      	adds	r3, r7, r0
 800cf2e:	7a1b      	ldrb	r3, [r3, #8]
 800cf30:	001a      	movs	r2, r3
 800cf32:	4b4a      	ldr	r3, [pc, #296]	; (800d05c <mix_sub_columns+0x3c4>)
 800cf34:	5c9a      	ldrb	r2, [r3, r2]
 800cf36:	183b      	adds	r3, r7, r0
 800cf38:	7b5b      	ldrb	r3, [r3, #13]
 800cf3a:	0019      	movs	r1, r3
 800cf3c:	4b48      	ldr	r3, [pc, #288]	; (800d060 <mix_sub_columns+0x3c8>)
 800cf3e:	5c5b      	ldrb	r3, [r3, r1]
 800cf40:	4053      	eors	r3, r2
 800cf42:	b2da      	uxtb	r2, r3
 800cf44:	183b      	adds	r3, r7, r0
 800cf46:	789b      	ldrb	r3, [r3, #2]
 800cf48:	0019      	movs	r1, r3
 800cf4a:	4b45      	ldr	r3, [pc, #276]	; (800d060 <mix_sub_columns+0x3c8>)
 800cf4c:	5c5b      	ldrb	r3, [r3, r1]
 800cf4e:	4053      	eors	r3, r2
 800cf50:	b2d9      	uxtb	r1, r3
 800cf52:	183b      	adds	r3, r7, r0
 800cf54:	79db      	ldrb	r3, [r3, #7]
 800cf56:	001a      	movs	r2, r3
 800cf58:	4b3f      	ldr	r3, [pc, #252]	; (800d058 <mix_sub_columns+0x3c0>)
 800cf5a:	5c9a      	ldrb	r2, [r3, r2]
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	330b      	adds	r3, #11
 800cf60:	404a      	eors	r2, r1
 800cf62:	b2d2      	uxtb	r2, r2
 800cf64:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800cf66:	183b      	adds	r3, r7, r0
 800cf68:	7b1b      	ldrb	r3, [r3, #12]
 800cf6a:	001a      	movs	r2, r3
 800cf6c:	4b3a      	ldr	r3, [pc, #232]	; (800d058 <mix_sub_columns+0x3c0>)
 800cf6e:	5c9a      	ldrb	r2, [r3, r2]
 800cf70:	183b      	adds	r3, r7, r0
 800cf72:	785b      	ldrb	r3, [r3, #1]
 800cf74:	0019      	movs	r1, r3
 800cf76:	4b39      	ldr	r3, [pc, #228]	; (800d05c <mix_sub_columns+0x3c4>)
 800cf78:	5c5b      	ldrb	r3, [r3, r1]
 800cf7a:	4053      	eors	r3, r2
 800cf7c:	b2da      	uxtb	r2, r3
 800cf7e:	183b      	adds	r3, r7, r0
 800cf80:	799b      	ldrb	r3, [r3, #6]
 800cf82:	0019      	movs	r1, r3
 800cf84:	4b36      	ldr	r3, [pc, #216]	; (800d060 <mix_sub_columns+0x3c8>)
 800cf86:	5c5b      	ldrb	r3, [r3, r1]
 800cf88:	4053      	eors	r3, r2
 800cf8a:	b2d9      	uxtb	r1, r3
 800cf8c:	183b      	adds	r3, r7, r0
 800cf8e:	7adb      	ldrb	r3, [r3, #11]
 800cf90:	001a      	movs	r2, r3
 800cf92:	4b33      	ldr	r3, [pc, #204]	; (800d060 <mix_sub_columns+0x3c8>)
 800cf94:	5c9a      	ldrb	r2, [r3, r2]
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	330c      	adds	r3, #12
 800cf9a:	404a      	eors	r2, r1
 800cf9c:	b2d2      	uxtb	r2, r2
 800cf9e:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800cfa0:	183b      	adds	r3, r7, r0
 800cfa2:	7b1b      	ldrb	r3, [r3, #12]
 800cfa4:	001a      	movs	r2, r3
 800cfa6:	4b2e      	ldr	r3, [pc, #184]	; (800d060 <mix_sub_columns+0x3c8>)
 800cfa8:	5c9a      	ldrb	r2, [r3, r2]
 800cfaa:	183b      	adds	r3, r7, r0
 800cfac:	785b      	ldrb	r3, [r3, #1]
 800cfae:	0019      	movs	r1, r3
 800cfb0:	4b29      	ldr	r3, [pc, #164]	; (800d058 <mix_sub_columns+0x3c0>)
 800cfb2:	5c5b      	ldrb	r3, [r3, r1]
 800cfb4:	4053      	eors	r3, r2
 800cfb6:	b2da      	uxtb	r2, r3
 800cfb8:	183b      	adds	r3, r7, r0
 800cfba:	799b      	ldrb	r3, [r3, #6]
 800cfbc:	0019      	movs	r1, r3
 800cfbe:	4b27      	ldr	r3, [pc, #156]	; (800d05c <mix_sub_columns+0x3c4>)
 800cfc0:	5c5b      	ldrb	r3, [r3, r1]
 800cfc2:	4053      	eors	r3, r2
 800cfc4:	b2d9      	uxtb	r1, r3
 800cfc6:	183b      	adds	r3, r7, r0
 800cfc8:	7adb      	ldrb	r3, [r3, #11]
 800cfca:	001a      	movs	r2, r3
 800cfcc:	4b24      	ldr	r3, [pc, #144]	; (800d060 <mix_sub_columns+0x3c8>)
 800cfce:	5c9a      	ldrb	r2, [r3, r2]
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	330d      	adds	r3, #13
 800cfd4:	404a      	eors	r2, r1
 800cfd6:	b2d2      	uxtb	r2, r2
 800cfd8:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800cfda:	183b      	adds	r3, r7, r0
 800cfdc:	7b1b      	ldrb	r3, [r3, #12]
 800cfde:	001a      	movs	r2, r3
 800cfe0:	4b1f      	ldr	r3, [pc, #124]	; (800d060 <mix_sub_columns+0x3c8>)
 800cfe2:	5c9a      	ldrb	r2, [r3, r2]
 800cfe4:	183b      	adds	r3, r7, r0
 800cfe6:	785b      	ldrb	r3, [r3, #1]
 800cfe8:	0019      	movs	r1, r3
 800cfea:	4b1d      	ldr	r3, [pc, #116]	; (800d060 <mix_sub_columns+0x3c8>)
 800cfec:	5c5b      	ldrb	r3, [r3, r1]
 800cfee:	4053      	eors	r3, r2
 800cff0:	b2da      	uxtb	r2, r3
 800cff2:	183b      	adds	r3, r7, r0
 800cff4:	799b      	ldrb	r3, [r3, #6]
 800cff6:	0019      	movs	r1, r3
 800cff8:	4b17      	ldr	r3, [pc, #92]	; (800d058 <mix_sub_columns+0x3c0>)
 800cffa:	5c5b      	ldrb	r3, [r3, r1]
 800cffc:	4053      	eors	r3, r2
 800cffe:	b2d9      	uxtb	r1, r3
 800d000:	183b      	adds	r3, r7, r0
 800d002:	7adb      	ldrb	r3, [r3, #11]
 800d004:	001a      	movs	r2, r3
 800d006:	4b15      	ldr	r3, [pc, #84]	; (800d05c <mix_sub_columns+0x3c4>)
 800d008:	5c9a      	ldrb	r2, [r3, r2]
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	330e      	adds	r3, #14
 800d00e:	404a      	eors	r2, r1
 800d010:	b2d2      	uxtb	r2, r2
 800d012:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800d014:	183b      	adds	r3, r7, r0
 800d016:	7b1b      	ldrb	r3, [r3, #12]
 800d018:	001a      	movs	r2, r3
 800d01a:	4b10      	ldr	r3, [pc, #64]	; (800d05c <mix_sub_columns+0x3c4>)
 800d01c:	5c9a      	ldrb	r2, [r3, r2]
 800d01e:	183b      	adds	r3, r7, r0
 800d020:	785b      	ldrb	r3, [r3, #1]
 800d022:	0019      	movs	r1, r3
 800d024:	4b0e      	ldr	r3, [pc, #56]	; (800d060 <mix_sub_columns+0x3c8>)
 800d026:	5c5b      	ldrb	r3, [r3, r1]
 800d028:	4053      	eors	r3, r2
 800d02a:	b2da      	uxtb	r2, r3
 800d02c:	183b      	adds	r3, r7, r0
 800d02e:	799b      	ldrb	r3, [r3, #6]
 800d030:	0019      	movs	r1, r3
 800d032:	4b0b      	ldr	r3, [pc, #44]	; (800d060 <mix_sub_columns+0x3c8>)
 800d034:	5c5b      	ldrb	r3, [r3, r1]
 800d036:	4053      	eors	r3, r2
 800d038:	b2d9      	uxtb	r1, r3
 800d03a:	183b      	adds	r3, r7, r0
 800d03c:	7adb      	ldrb	r3, [r3, #11]
 800d03e:	001a      	movs	r2, r3
 800d040:	4b05      	ldr	r3, [pc, #20]	; (800d058 <mix_sub_columns+0x3c0>)
 800d042:	5c9a      	ldrb	r2, [r3, r2]
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	330f      	adds	r3, #15
 800d048:	404a      	eors	r2, r1
 800d04a:	b2d2      	uxtb	r2, r2
 800d04c:	701a      	strb	r2, [r3, #0]
  }
 800d04e:	46c0      	nop			; (mov r8, r8)
 800d050:	46bd      	mov	sp, r7
 800d052:	b007      	add	sp, #28
 800d054:	bd90      	pop	{r4, r7, pc}
 800d056:	46c0      	nop			; (mov r8, r8)
 800d058:	0801f320 	.word	0x0801f320
 800d05c:	0801f420 	.word	0x0801f420
 800d060:	0801f220 	.word	0x0801f220

0800d064 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800d064:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d066:	b087      	sub	sp, #28
 800d068:	af00      	add	r7, sp, #0
 800d06a:	60f8      	str	r0, [r7, #12]
 800d06c:	607a      	str	r2, [r7, #4]
 800d06e:	200b      	movs	r0, #11
 800d070:	183b      	adds	r3, r7, r0
 800d072:	1c0a      	adds	r2, r1, #0
 800d074:	701a      	strb	r2, [r3, #0]
    uint8_t cc, rc, hi;

    switch( keylen )
 800d076:	183b      	adds	r3, r7, r0
 800d078:	781b      	ldrb	r3, [r3, #0]
 800d07a:	3b10      	subs	r3, #16
 800d07c:	2210      	movs	r2, #16
 800d07e:	429a      	cmp	r2, r3
 800d080:	4192      	sbcs	r2, r2
 800d082:	4252      	negs	r2, r2
 800d084:	b2d2      	uxtb	r2, r2
 800d086:	2a00      	cmp	r2, #0
 800d088:	d109      	bne.n	800d09e <lorawan_aes_set_key+0x3a>
 800d08a:	2201      	movs	r2, #1
 800d08c:	409a      	lsls	r2, r3
 800d08e:	0013      	movs	r3, r2
 800d090:	4a90      	ldr	r2, [pc, #576]	; (800d2d4 <lorawan_aes_set_key+0x270>)
 800d092:	4013      	ands	r3, r2
 800d094:	1e5a      	subs	r2, r3, #1
 800d096:	4193      	sbcs	r3, r2
 800d098:	b2db      	uxtb	r3, r3
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d105      	bne.n	800d0aa <lorawan_aes_set_key+0x46>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	22f0      	movs	r2, #240	; 0xf0
 800d0a2:	2100      	movs	r1, #0
 800d0a4:	5499      	strb	r1, [r3, r2]
        return ( uint8_t )-1;
 800d0a6:	23ff      	movs	r3, #255	; 0xff
 800d0a8:	e10f      	b.n	800d2ca <lorawan_aes_set_key+0x266>
        break;
 800d0aa:	46c0      	nop			; (mov r8, r8)
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800d0ac:	6878      	ldr	r0, [r7, #4]
 800d0ae:	240b      	movs	r4, #11
 800d0b0:	193b      	adds	r3, r7, r4
 800d0b2:	781a      	ldrb	r2, [r3, #0]
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	0019      	movs	r1, r3
 800d0b8:	f7ff fbb4 	bl	800c824 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800d0bc:	0020      	movs	r0, r4
 800d0be:	183b      	adds	r3, r7, r0
 800d0c0:	781b      	ldrb	r3, [r3, #0]
 800d0c2:	331c      	adds	r3, #28
 800d0c4:	b2da      	uxtb	r2, r3
 800d0c6:	2111      	movs	r1, #17
 800d0c8:	187b      	adds	r3, r7, r1
 800d0ca:	0092      	lsls	r2, r2, #2
 800d0cc:	701a      	strb	r2, [r3, #0]
    ctx->rnd = (hi >> 4) - 1;
 800d0ce:	187b      	adds	r3, r7, r1
 800d0d0:	781b      	ldrb	r3, [r3, #0]
 800d0d2:	091b      	lsrs	r3, r3, #4
 800d0d4:	b2db      	uxtb	r3, r3
 800d0d6:	3b01      	subs	r3, #1
 800d0d8:	b2d9      	uxtb	r1, r3
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	22f0      	movs	r2, #240	; 0xf0
 800d0de:	5499      	strb	r1, [r3, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800d0e0:	2317      	movs	r3, #23
 800d0e2:	18fb      	adds	r3, r7, r3
 800d0e4:	183a      	adds	r2, r7, r0
 800d0e6:	7812      	ldrb	r2, [r2, #0]
 800d0e8:	701a      	strb	r2, [r3, #0]
 800d0ea:	2316      	movs	r3, #22
 800d0ec:	18fb      	adds	r3, r7, r3
 800d0ee:	2201      	movs	r2, #1
 800d0f0:	701a      	strb	r2, [r3, #0]
 800d0f2:	e0e0      	b.n	800d2b6 <lorawan_aes_set_key+0x252>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800d0f4:	2017      	movs	r0, #23
 800d0f6:	183b      	adds	r3, r7, r0
 800d0f8:	781b      	ldrb	r3, [r3, #0]
 800d0fa:	1f1a      	subs	r2, r3, #4
 800d0fc:	2415      	movs	r4, #21
 800d0fe:	193b      	adds	r3, r7, r4
 800d100:	6879      	ldr	r1, [r7, #4]
 800d102:	5c8a      	ldrb	r2, [r1, r2]
 800d104:	701a      	strb	r2, [r3, #0]
        t1 = ctx->ksch[cc - 3];
 800d106:	183b      	adds	r3, r7, r0
 800d108:	781b      	ldrb	r3, [r3, #0]
 800d10a:	1eda      	subs	r2, r3, #3
 800d10c:	2514      	movs	r5, #20
 800d10e:	197b      	adds	r3, r7, r5
 800d110:	6879      	ldr	r1, [r7, #4]
 800d112:	5c8a      	ldrb	r2, [r1, r2]
 800d114:	701a      	strb	r2, [r3, #0]
        t2 = ctx->ksch[cc - 2];
 800d116:	183b      	adds	r3, r7, r0
 800d118:	781b      	ldrb	r3, [r3, #0]
 800d11a:	1e9a      	subs	r2, r3, #2
 800d11c:	2613      	movs	r6, #19
 800d11e:	19bb      	adds	r3, r7, r6
 800d120:	6879      	ldr	r1, [r7, #4]
 800d122:	5c8a      	ldrb	r2, [r1, r2]
 800d124:	701a      	strb	r2, [r3, #0]
        t3 = ctx->ksch[cc - 1];
 800d126:	183b      	adds	r3, r7, r0
 800d128:	781b      	ldrb	r3, [r3, #0]
 800d12a:	1e5a      	subs	r2, r3, #1
 800d12c:	2312      	movs	r3, #18
 800d12e:	18fb      	adds	r3, r7, r3
 800d130:	6879      	ldr	r1, [r7, #4]
 800d132:	5c8a      	ldrb	r2, [r1, r2]
 800d134:	701a      	strb	r2, [r3, #0]
        if( cc % keylen == 0 )
 800d136:	183a      	adds	r2, r7, r0
 800d138:	210b      	movs	r1, #11
 800d13a:	187b      	adds	r3, r7, r1
 800d13c:	7812      	ldrb	r2, [r2, #0]
 800d13e:	781b      	ldrb	r3, [r3, #0]
 800d140:	0019      	movs	r1, r3
 800d142:	0010      	movs	r0, r2
 800d144:	f7f3 f86e 	bl	8000224 <__aeabi_uidivmod>
 800d148:	000b      	movs	r3, r1
 800d14a:	b2db      	uxtb	r3, r3
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d13b      	bne.n	800d1c8 <lorawan_aes_set_key+0x164>
        {
            tt = t0;
 800d150:	2210      	movs	r2, #16
 800d152:	18bb      	adds	r3, r7, r2
 800d154:	193a      	adds	r2, r7, r4
 800d156:	7812      	ldrb	r2, [r2, #0]
 800d158:	701a      	strb	r2, [r3, #0]
            t0 = s_box(t1) ^ rc;
 800d15a:	197b      	adds	r3, r7, r5
 800d15c:	781b      	ldrb	r3, [r3, #0]
 800d15e:	4a5e      	ldr	r2, [pc, #376]	; (800d2d8 <lorawan_aes_set_key+0x274>)
 800d160:	5cd1      	ldrb	r1, [r2, r3]
 800d162:	193b      	adds	r3, r7, r4
 800d164:	2016      	movs	r0, #22
 800d166:	183a      	adds	r2, r7, r0
 800d168:	7812      	ldrb	r2, [r2, #0]
 800d16a:	404a      	eors	r2, r1
 800d16c:	701a      	strb	r2, [r3, #0]
            t1 = s_box(t2);
 800d16e:	19bb      	adds	r3, r7, r6
 800d170:	781a      	ldrb	r2, [r3, #0]
 800d172:	197b      	adds	r3, r7, r5
 800d174:	4958      	ldr	r1, [pc, #352]	; (800d2d8 <lorawan_aes_set_key+0x274>)
 800d176:	5c8a      	ldrb	r2, [r1, r2]
 800d178:	701a      	strb	r2, [r3, #0]
            t2 = s_box(t3);
 800d17a:	2412      	movs	r4, #18
 800d17c:	193b      	adds	r3, r7, r4
 800d17e:	781a      	ldrb	r2, [r3, #0]
 800d180:	19bb      	adds	r3, r7, r6
 800d182:	4955      	ldr	r1, [pc, #340]	; (800d2d8 <lorawan_aes_set_key+0x274>)
 800d184:	5c8a      	ldrb	r2, [r1, r2]
 800d186:	701a      	strb	r2, [r3, #0]
            t3 = s_box(tt);
 800d188:	2210      	movs	r2, #16
 800d18a:	18bb      	adds	r3, r7, r2
 800d18c:	781a      	ldrb	r2, [r3, #0]
 800d18e:	193b      	adds	r3, r7, r4
 800d190:	4951      	ldr	r1, [pc, #324]	; (800d2d8 <lorawan_aes_set_key+0x274>)
 800d192:	5c8a      	ldrb	r2, [r1, r2]
 800d194:	701a      	strb	r2, [r3, #0]
            rc = f2(rc);
 800d196:	183b      	adds	r3, r7, r0
 800d198:	781b      	ldrb	r3, [r3, #0]
 800d19a:	005b      	lsls	r3, r3, #1
 800d19c:	b25a      	sxtb	r2, r3
 800d19e:	0004      	movs	r4, r0
 800d1a0:	183b      	adds	r3, r7, r0
 800d1a2:	781b      	ldrb	r3, [r3, #0]
 800d1a4:	09db      	lsrs	r3, r3, #7
 800d1a6:	b2db      	uxtb	r3, r3
 800d1a8:	1c19      	adds	r1, r3, #0
 800d1aa:	1c0b      	adds	r3, r1, #0
 800d1ac:	18db      	adds	r3, r3, r3
 800d1ae:	185b      	adds	r3, r3, r1
 800d1b0:	1c19      	adds	r1, r3, #0
 800d1b2:	00c8      	lsls	r0, r1, #3
 800d1b4:	1c19      	adds	r1, r3, #0
 800d1b6:	1c03      	adds	r3, r0, #0
 800d1b8:	18cb      	adds	r3, r1, r3
 800d1ba:	b2db      	uxtb	r3, r3
 800d1bc:	b25b      	sxtb	r3, r3
 800d1be:	4053      	eors	r3, r2
 800d1c0:	b25a      	sxtb	r2, r3
 800d1c2:	193b      	adds	r3, r7, r4
 800d1c4:	701a      	strb	r2, [r3, #0]
 800d1c6:	e02d      	b.n	800d224 <lorawan_aes_set_key+0x1c0>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800d1c8:	210b      	movs	r1, #11
 800d1ca:	187b      	adds	r3, r7, r1
 800d1cc:	781b      	ldrb	r3, [r3, #0]
 800d1ce:	2b18      	cmp	r3, #24
 800d1d0:	d928      	bls.n	800d224 <lorawan_aes_set_key+0x1c0>
 800d1d2:	2317      	movs	r3, #23
 800d1d4:	18fa      	adds	r2, r7, r3
 800d1d6:	187b      	adds	r3, r7, r1
 800d1d8:	7812      	ldrb	r2, [r2, #0]
 800d1da:	781b      	ldrb	r3, [r3, #0]
 800d1dc:	0019      	movs	r1, r3
 800d1de:	0010      	movs	r0, r2
 800d1e0:	f7f3 f820 	bl	8000224 <__aeabi_uidivmod>
 800d1e4:	000b      	movs	r3, r1
 800d1e6:	b2db      	uxtb	r3, r3
 800d1e8:	2b10      	cmp	r3, #16
 800d1ea:	d11b      	bne.n	800d224 <lorawan_aes_set_key+0x1c0>
        {
            t0 = s_box(t0);
 800d1ec:	2115      	movs	r1, #21
 800d1ee:	187b      	adds	r3, r7, r1
 800d1f0:	781a      	ldrb	r2, [r3, #0]
 800d1f2:	187b      	adds	r3, r7, r1
 800d1f4:	4938      	ldr	r1, [pc, #224]	; (800d2d8 <lorawan_aes_set_key+0x274>)
 800d1f6:	5c8a      	ldrb	r2, [r1, r2]
 800d1f8:	701a      	strb	r2, [r3, #0]
            t1 = s_box(t1);
 800d1fa:	2114      	movs	r1, #20
 800d1fc:	187b      	adds	r3, r7, r1
 800d1fe:	781a      	ldrb	r2, [r3, #0]
 800d200:	187b      	adds	r3, r7, r1
 800d202:	4935      	ldr	r1, [pc, #212]	; (800d2d8 <lorawan_aes_set_key+0x274>)
 800d204:	5c8a      	ldrb	r2, [r1, r2]
 800d206:	701a      	strb	r2, [r3, #0]
            t2 = s_box(t2);
 800d208:	2113      	movs	r1, #19
 800d20a:	187b      	adds	r3, r7, r1
 800d20c:	781a      	ldrb	r2, [r3, #0]
 800d20e:	187b      	adds	r3, r7, r1
 800d210:	4931      	ldr	r1, [pc, #196]	; (800d2d8 <lorawan_aes_set_key+0x274>)
 800d212:	5c8a      	ldrb	r2, [r1, r2]
 800d214:	701a      	strb	r2, [r3, #0]
            t3 = s_box(t3);
 800d216:	2112      	movs	r1, #18
 800d218:	187b      	adds	r3, r7, r1
 800d21a:	781a      	ldrb	r2, [r3, #0]
 800d21c:	187b      	adds	r3, r7, r1
 800d21e:	492e      	ldr	r1, [pc, #184]	; (800d2d8 <lorawan_aes_set_key+0x274>)
 800d220:	5c8a      	ldrb	r2, [r1, r2]
 800d222:	701a      	strb	r2, [r3, #0]
        }
        tt = cc - keylen;
 800d224:	2410      	movs	r4, #16
 800d226:	193b      	adds	r3, r7, r4
 800d228:	2017      	movs	r0, #23
 800d22a:	1839      	adds	r1, r7, r0
 800d22c:	220b      	movs	r2, #11
 800d22e:	18ba      	adds	r2, r7, r2
 800d230:	7809      	ldrb	r1, [r1, #0]
 800d232:	7812      	ldrb	r2, [r2, #0]
 800d234:	1a8a      	subs	r2, r1, r2
 800d236:	701a      	strb	r2, [r3, #0]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800d238:	193b      	adds	r3, r7, r4
 800d23a:	781b      	ldrb	r3, [r3, #0]
 800d23c:	687a      	ldr	r2, [r7, #4]
 800d23e:	5cd1      	ldrb	r1, [r2, r3]
 800d240:	183b      	adds	r3, r7, r0
 800d242:	781b      	ldrb	r3, [r3, #0]
 800d244:	2215      	movs	r2, #21
 800d246:	18ba      	adds	r2, r7, r2
 800d248:	7812      	ldrb	r2, [r2, #0]
 800d24a:	404a      	eors	r2, r1
 800d24c:	b2d1      	uxtb	r1, r2
 800d24e:	687a      	ldr	r2, [r7, #4]
 800d250:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800d252:	193b      	adds	r3, r7, r4
 800d254:	781b      	ldrb	r3, [r3, #0]
 800d256:	3301      	adds	r3, #1
 800d258:	687a      	ldr	r2, [r7, #4]
 800d25a:	5cd1      	ldrb	r1, [r2, r3]
 800d25c:	183b      	adds	r3, r7, r0
 800d25e:	781b      	ldrb	r3, [r3, #0]
 800d260:	3301      	adds	r3, #1
 800d262:	2214      	movs	r2, #20
 800d264:	18ba      	adds	r2, r7, r2
 800d266:	7812      	ldrb	r2, [r2, #0]
 800d268:	404a      	eors	r2, r1
 800d26a:	b2d1      	uxtb	r1, r2
 800d26c:	687a      	ldr	r2, [r7, #4]
 800d26e:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800d270:	193b      	adds	r3, r7, r4
 800d272:	781b      	ldrb	r3, [r3, #0]
 800d274:	3302      	adds	r3, #2
 800d276:	687a      	ldr	r2, [r7, #4]
 800d278:	5cd1      	ldrb	r1, [r2, r3]
 800d27a:	183b      	adds	r3, r7, r0
 800d27c:	781b      	ldrb	r3, [r3, #0]
 800d27e:	3302      	adds	r3, #2
 800d280:	2213      	movs	r2, #19
 800d282:	18ba      	adds	r2, r7, r2
 800d284:	7812      	ldrb	r2, [r2, #0]
 800d286:	404a      	eors	r2, r1
 800d288:	b2d1      	uxtb	r1, r2
 800d28a:	687a      	ldr	r2, [r7, #4]
 800d28c:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800d28e:	193b      	adds	r3, r7, r4
 800d290:	781b      	ldrb	r3, [r3, #0]
 800d292:	3303      	adds	r3, #3
 800d294:	687a      	ldr	r2, [r7, #4]
 800d296:	5cd1      	ldrb	r1, [r2, r3]
 800d298:	183b      	adds	r3, r7, r0
 800d29a:	781b      	ldrb	r3, [r3, #0]
 800d29c:	3303      	adds	r3, #3
 800d29e:	2212      	movs	r2, #18
 800d2a0:	18ba      	adds	r2, r7, r2
 800d2a2:	7812      	ldrb	r2, [r2, #0]
 800d2a4:	404a      	eors	r2, r1
 800d2a6:	b2d1      	uxtb	r1, r2
 800d2a8:	687a      	ldr	r2, [r7, #4]
 800d2aa:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800d2ac:	183b      	adds	r3, r7, r0
 800d2ae:	183a      	adds	r2, r7, r0
 800d2b0:	7812      	ldrb	r2, [r2, #0]
 800d2b2:	3204      	adds	r2, #4
 800d2b4:	701a      	strb	r2, [r3, #0]
 800d2b6:	2317      	movs	r3, #23
 800d2b8:	18fa      	adds	r2, r7, r3
 800d2ba:	2311      	movs	r3, #17
 800d2bc:	18fb      	adds	r3, r7, r3
 800d2be:	7812      	ldrb	r2, [r2, #0]
 800d2c0:	781b      	ldrb	r3, [r3, #0]
 800d2c2:	429a      	cmp	r2, r3
 800d2c4:	d200      	bcs.n	800d2c8 <lorawan_aes_set_key+0x264>
 800d2c6:	e715      	b.n	800d0f4 <lorawan_aes_set_key+0x90>
    }
    return 0;
 800d2c8:	2300      	movs	r3, #0
}
 800d2ca:	0018      	movs	r0, r3
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	b007      	add	sp, #28
 800d2d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2d2:	46c0      	nop			; (mov r8, r8)
 800d2d4:	00010101 	.word	0x00010101
 800d2d8:	0801f220 	.word	0x0801f220

0800d2dc <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800d2dc:	b5b0      	push	{r4, r5, r7, lr}
 800d2de:	b08a      	sub	sp, #40	; 0x28
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	60f8      	str	r0, [r7, #12]
 800d2e4:	60b9      	str	r1, [r7, #8]
 800d2e6:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	22f0      	movs	r2, #240	; 0xf0
 800d2ec:	5c9b      	ldrb	r3, [r3, r2]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d039      	beq.n	800d366 <lorawan_aes_encrypt+0x8a>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800d2f2:	687a      	ldr	r2, [r7, #4]
 800d2f4:	68f9      	ldr	r1, [r7, #12]
 800d2f6:	2314      	movs	r3, #20
 800d2f8:	18fb      	adds	r3, r7, r3
 800d2fa:	0018      	movs	r0, r3
 800d2fc:	f7ff fb64 	bl	800c9c8 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800d300:	2327      	movs	r3, #39	; 0x27
 800d302:	18fb      	adds	r3, r7, r3
 800d304:	2201      	movs	r2, #1
 800d306:	701a      	strb	r2, [r3, #0]
 800d308:	e014      	b.n	800d334 <lorawan_aes_encrypt+0x58>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800d30a:	2514      	movs	r5, #20
 800d30c:	197b      	adds	r3, r7, r5
 800d30e:	0018      	movs	r0, r3
 800d310:	f7ff fcc2 	bl	800cc98 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2427      	movs	r4, #39	; 0x27
 800d318:	193a      	adds	r2, r7, r4
 800d31a:	7812      	ldrb	r2, [r2, #0]
 800d31c:	0112      	lsls	r2, r2, #4
 800d31e:	189a      	adds	r2, r3, r2
 800d320:	197b      	adds	r3, r7, r5
 800d322:	0011      	movs	r1, r2
 800d324:	0018      	movs	r0, r3
 800d326:	f7ff fc06 	bl	800cb36 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800d32a:	193b      	adds	r3, r7, r4
 800d32c:	193a      	adds	r2, r7, r4
 800d32e:	7812      	ldrb	r2, [r2, #0]
 800d330:	3201      	adds	r2, #1
 800d332:	701a      	strb	r2, [r3, #0]
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	22f0      	movs	r2, #240	; 0xf0
 800d338:	5c9b      	ldrb	r3, [r3, r2]
 800d33a:	2427      	movs	r4, #39	; 0x27
 800d33c:	193a      	adds	r2, r7, r4
 800d33e:	7812      	ldrb	r2, [r2, #0]
 800d340:	429a      	cmp	r2, r3
 800d342:	d3e2      	bcc.n	800d30a <lorawan_aes_encrypt+0x2e>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800d344:	2514      	movs	r5, #20
 800d346:	197b      	adds	r3, r7, r5
 800d348:	0018      	movs	r0, r3
 800d34a:	f7ff fc03 	bl	800cb54 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	193a      	adds	r2, r7, r4
 800d352:	7812      	ldrb	r2, [r2, #0]
 800d354:	0112      	lsls	r2, r2, #4
 800d356:	189a      	adds	r2, r3, r2
 800d358:	1979      	adds	r1, r7, r5
 800d35a:	68bb      	ldr	r3, [r7, #8]
 800d35c:	0018      	movs	r0, r3
 800d35e:	f7ff fb33 	bl	800c9c8 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800d362:	2300      	movs	r3, #0
 800d364:	e000      	b.n	800d368 <lorawan_aes_encrypt+0x8c>
        return ( uint8_t )-1;
 800d366:	23ff      	movs	r3, #255	; 0xff
}
 800d368:	0018      	movs	r0, r3
 800d36a:	46bd      	mov	sp, r7
 800d36c:	b00a      	add	sp, #40	; 0x28
 800d36e:	bdb0      	pop	{r4, r5, r7, pc}

0800d370 <GetKeyByID>:
 * \param[IN]  keyID          - Key identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID(KeyIdentifier_t keyID, Key_t **keyItem)
{
 800d370:	b580      	push	{r7, lr}
 800d372:	b084      	sub	sp, #16
 800d374:	af00      	add	r7, sp, #0
 800d376:	0002      	movs	r2, r0
 800d378:	6039      	str	r1, [r7, #0]
 800d37a:	1dfb      	adds	r3, r7, #7
 800d37c:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800d37e:	230f      	movs	r3, #15
 800d380:	18fb      	adds	r3, r7, r3
 800d382:	2200      	movs	r2, #0
 800d384:	701a      	strb	r2, [r3, #0]
 800d386:	e020      	b.n	800d3ca <GetKeyByID+0x5a>
  {
    if (SeNvmCtx.KeyList[i].KeyID == keyID)
 800d388:	200f      	movs	r0, #15
 800d38a:	183b      	adds	r3, r7, r0
 800d38c:	781a      	ldrb	r2, [r3, #0]
 800d38e:	4914      	ldr	r1, [pc, #80]	; (800d3e0 <GetKeyByID+0x70>)
 800d390:	0013      	movs	r3, r2
 800d392:	011b      	lsls	r3, r3, #4
 800d394:	189b      	adds	r3, r3, r2
 800d396:	18cb      	adds	r3, r1, r3
 800d398:	3310      	adds	r3, #16
 800d39a:	781b      	ldrb	r3, [r3, #0]
 800d39c:	1dfa      	adds	r2, r7, #7
 800d39e:	7812      	ldrb	r2, [r2, #0]
 800d3a0:	429a      	cmp	r2, r3
 800d3a2:	d10c      	bne.n	800d3be <GetKeyByID+0x4e>
    {
      *keyItem = &(SeNvmCtx.KeyList[i]);
 800d3a4:	183b      	adds	r3, r7, r0
 800d3a6:	781a      	ldrb	r2, [r3, #0]
 800d3a8:	0013      	movs	r3, r2
 800d3aa:	011b      	lsls	r3, r3, #4
 800d3ac:	189b      	adds	r3, r3, r2
 800d3ae:	3310      	adds	r3, #16
 800d3b0:	001a      	movs	r2, r3
 800d3b2:	4b0b      	ldr	r3, [pc, #44]	; (800d3e0 <GetKeyByID+0x70>)
 800d3b4:	18d2      	adds	r2, r2, r3
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	601a      	str	r2, [r3, #0]
      return SECURE_ELEMENT_SUCCESS;
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	e00b      	b.n	800d3d6 <GetKeyByID+0x66>
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800d3be:	210f      	movs	r1, #15
 800d3c0:	187b      	adds	r3, r7, r1
 800d3c2:	781a      	ldrb	r2, [r3, #0]
 800d3c4:	187b      	adds	r3, r7, r1
 800d3c6:	3201      	adds	r2, #1
 800d3c8:	701a      	strb	r2, [r3, #0]
 800d3ca:	230f      	movs	r3, #15
 800d3cc:	18fb      	adds	r3, r7, r3
 800d3ce:	781b      	ldrb	r3, [r3, #0]
 800d3d0:	2b09      	cmp	r3, #9
 800d3d2:	d9d9      	bls.n	800d388 <GetKeyByID+0x18>
    }
  }
  return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d3d4:	2303      	movs	r3, #3
}
 800d3d6:	0018      	movs	r0, r3
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	b004      	add	sp, #16
 800d3dc:	bd80      	pop	{r7, pc}
 800d3de:	46c0      	nop			; (mov r8, r8)
 800d3e0:	2000007c 	.word	0x2000007c

0800d3e4 <DummyCB>:

/*
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB(void)
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	af00      	add	r7, sp, #0
  return;
 800d3e8:	46c0      	nop			; (mov r8, r8)
}
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	bd80      	pop	{r7, pc}
	...

0800d3f0 <ComputeCmac>:
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                         uint32_t *cmac)
{
 800d3f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3f2:	b0d1      	sub	sp, #324	; 0x144
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	60f8      	str	r0, [r7, #12]
 800d3f8:	60b9      	str	r1, [r7, #8]
 800d3fa:	0019      	movs	r1, r3
 800d3fc:	4b40      	ldr	r3, [pc, #256]	; (800d500 <ComputeCmac+0x110>)
 800d3fe:	20a0      	movs	r0, #160	; 0xa0
 800d400:	0040      	lsls	r0, r0, #1
 800d402:	4684      	mov	ip, r0
 800d404:	44bc      	add	ip, r7
 800d406:	4463      	add	r3, ip
 800d408:	801a      	strh	r2, [r3, #0]
 800d40a:	4b3e      	ldr	r3, [pc, #248]	; (800d504 <ComputeCmac+0x114>)
 800d40c:	22a0      	movs	r2, #160	; 0xa0
 800d40e:	0052      	lsls	r2, r2, #1
 800d410:	4694      	mov	ip, r2
 800d412:	44bc      	add	ip, r7
 800d414:	4463      	add	r3, ip
 800d416:	1c0a      	adds	r2, r1, #0
 800d418:	701a      	strb	r2, [r3, #0]
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800d41a:	2340      	movs	r3, #64	; 0x40
 800d41c:	33ff      	adds	r3, #255	; 0xff
 800d41e:	18fb      	adds	r3, r7, r3
 800d420:	2206      	movs	r2, #6
 800d422:	701a      	strb	r2, [r3, #0]
  if ((buffer == NULL) || (cmac == NULL))
 800d424:	68bb      	ldr	r3, [r7, #8]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d008      	beq.n	800d43c <ComputeCmac+0x4c>
 800d42a:	23a8      	movs	r3, #168	; 0xa8
 800d42c:	005b      	lsls	r3, r3, #1
 800d42e:	2208      	movs	r2, #8
 800d430:	4694      	mov	ip, r2
 800d432:	44bc      	add	ip, r7
 800d434:	4463      	add	r3, ip
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d101      	bne.n	800d440 <ComputeCmac+0x50>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800d43c:	2302      	movs	r3, #2
 800d43e:	e05a      	b.n	800d4f6 <ComputeCmac+0x106>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  uint8_t Cmac[16];
  AES_CMAC_CTX aesCmacCtx[1];

  AES_CMAC_Init(aesCmacCtx);
 800d440:	2514      	movs	r5, #20
 800d442:	197b      	adds	r3, r7, r5
 800d444:	0018      	movs	r0, r3
 800d446:	f7fe ff39 	bl	800c2bc <AES_CMAC_Init>

  Key_t *keyItem;
  retval = GetKeyByID(keyID, &keyItem);
 800d44a:	2640      	movs	r6, #64	; 0x40
 800d44c:	36ff      	adds	r6, #255	; 0xff
 800d44e:	19bc      	adds	r4, r7, r6
 800d450:	2310      	movs	r3, #16
 800d452:	18fa      	adds	r2, r7, r3
 800d454:	4b2b      	ldr	r3, [pc, #172]	; (800d504 <ComputeCmac+0x114>)
 800d456:	21a0      	movs	r1, #160	; 0xa0
 800d458:	0049      	lsls	r1, r1, #1
 800d45a:	468c      	mov	ip, r1
 800d45c:	44bc      	add	ip, r7
 800d45e:	4463      	add	r3, ip
 800d460:	781b      	ldrb	r3, [r3, #0]
 800d462:	0011      	movs	r1, r2
 800d464:	0018      	movs	r0, r3
 800d466:	f7ff ff83 	bl	800d370 <GetKeyByID>
 800d46a:	0003      	movs	r3, r0
 800d46c:	7023      	strb	r3, [r4, #0]

  if (retval == SECURE_ELEMENT_SUCCESS)
 800d46e:	19bb      	adds	r3, r7, r6
 800d470:	781b      	ldrb	r3, [r3, #0]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d13b      	bne.n	800d4ee <ComputeCmac+0xfe>
  {
    AES_CMAC_SetKey(aesCmacCtx, keyItem->KeyValue);
 800d476:	693b      	ldr	r3, [r7, #16]
 800d478:	1c5a      	adds	r2, r3, #1
 800d47a:	197b      	adds	r3, r7, r5
 800d47c:	0011      	movs	r1, r2
 800d47e:	0018      	movs	r0, r3
 800d480:	f7fe ff36 	bl	800c2f0 <AES_CMAC_SetKey>

    if (micBxBuffer != NULL)
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d005      	beq.n	800d496 <ComputeCmac+0xa6>
    {
      AES_CMAC_Update(aesCmacCtx, micBxBuffer, 16);
 800d48a:	68f9      	ldr	r1, [r7, #12]
 800d48c:	197b      	adds	r3, r7, r5
 800d48e:	2210      	movs	r2, #16
 800d490:	0018      	movs	r0, r3
 800d492:	f7fe ff3c 	bl	800c30e <AES_CMAC_Update>
    }

    AES_CMAC_Update(aesCmacCtx, buffer, size);
 800d496:	4b1a      	ldr	r3, [pc, #104]	; (800d500 <ComputeCmac+0x110>)
 800d498:	22a0      	movs	r2, #160	; 0xa0
 800d49a:	0052      	lsls	r2, r2, #1
 800d49c:	4694      	mov	ip, r2
 800d49e:	44bc      	add	ip, r7
 800d4a0:	4463      	add	r3, ip
 800d4a2:	881a      	ldrh	r2, [r3, #0]
 800d4a4:	68b9      	ldr	r1, [r7, #8]
 800d4a6:	2414      	movs	r4, #20
 800d4a8:	193b      	adds	r3, r7, r4
 800d4aa:	0018      	movs	r0, r3
 800d4ac:	f7fe ff2f 	bl	800c30e <AES_CMAC_Update>

    AES_CMAC_Final(Cmac, aesCmacCtx);
 800d4b0:	193a      	adds	r2, r7, r4
 800d4b2:	2496      	movs	r4, #150	; 0x96
 800d4b4:	0064      	lsls	r4, r4, #1
 800d4b6:	193b      	adds	r3, r7, r4
 800d4b8:	0011      	movs	r1, r2
 800d4ba:	0018      	movs	r0, r3
 800d4bc:	f7fe ffef 	bl	800c49e <AES_CMAC_Final>

    /* Bring into the required format */
    *cmac = (uint32_t)((uint32_t) Cmac[3] << 24 | (uint32_t) Cmac[2] << 16 | (uint32_t) Cmac[1] << 8 |
 800d4c0:	0021      	movs	r1, r4
 800d4c2:	187b      	adds	r3, r7, r1
 800d4c4:	78db      	ldrb	r3, [r3, #3]
 800d4c6:	061a      	lsls	r2, r3, #24
 800d4c8:	187b      	adds	r3, r7, r1
 800d4ca:	789b      	ldrb	r3, [r3, #2]
 800d4cc:	041b      	lsls	r3, r3, #16
 800d4ce:	431a      	orrs	r2, r3
 800d4d0:	187b      	adds	r3, r7, r1
 800d4d2:	785b      	ldrb	r3, [r3, #1]
 800d4d4:	021b      	lsls	r3, r3, #8
 800d4d6:	4313      	orrs	r3, r2
                       (uint32_t) Cmac[0]);
 800d4d8:	187a      	adds	r2, r7, r1
 800d4da:	7812      	ldrb	r2, [r2, #0]
    *cmac = (uint32_t)((uint32_t) Cmac[3] << 24 | (uint32_t) Cmac[2] << 16 | (uint32_t) Cmac[1] << 8 |
 800d4dc:	431a      	orrs	r2, r3
 800d4de:	23a8      	movs	r3, #168	; 0xa8
 800d4e0:	005b      	lsls	r3, r3, #1
 800d4e2:	2108      	movs	r1, #8
 800d4e4:	468c      	mov	ip, r1
 800d4e6:	44bc      	add	ip, r7
 800d4e8:	4463      	add	r3, ip
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	601a      	str	r2, [r3, #0]
  {
    retval = SECURE_ELEMENT_ERROR;
  }
#endif /* LORAWAN_KMS */

  return retval;
 800d4ee:	2340      	movs	r3, #64	; 0x40
 800d4f0:	33ff      	adds	r3, #255	; 0xff
 800d4f2:	18fb      	adds	r3, r7, r3
 800d4f4:	781b      	ldrb	r3, [r3, #0]
}
 800d4f6:	0018      	movs	r0, r3
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	b051      	add	sp, #324	; 0x144
 800d4fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d4fe:	46c0      	nop			; (mov r8, r8)
 800d500:	fffffec6 	.word	0xfffffec6
 800d504:	fffffec5 	.word	0xfffffec5

0800d508 <SecureElementInit>:
/*
 * API functions
 */

SecureElementStatus_t SecureElementInit(SecureElementNvmEvent seNvmCtxChanged)
{
 800d508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d50a:	46de      	mov	lr, fp
 800d50c:	4657      	mov	r7, sl
 800d50e:	464e      	mov	r6, r9
 800d510:	4645      	mov	r5, r8
 800d512:	b5e0      	push	{r5, r6, r7, lr}
 800d514:	b099      	sub	sp, #100	; 0x64
 800d516:	af10      	add	r7, sp, #64	; 0x40
 800d518:	6178      	str	r0, [r7, #20]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  Key_t *keyItem;
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800d51a:	250f      	movs	r5, #15
 800d51c:	2610      	movs	r6, #16
 800d51e:	19bb      	adds	r3, r7, r6
 800d520:	195b      	adds	r3, r3, r5
 800d522:	2206      	movs	r2, #6
 800d524:	701a      	strb	r2, [r3, #0]

  /* Initialize LoRaWAN Key List buffer */
  memcpy1((uint8_t *)(SeNvmCtx.KeyList), (const uint8_t *)InitialKeyList, sizeof(Key_t)*NUM_OF_KEYS);
 800d526:	49dd      	ldr	r1, [pc, #884]	; (800d89c <SecureElementInit+0x394>)
 800d528:	4bdd      	ldr	r3, [pc, #884]	; (800d8a0 <SecureElementInit+0x398>)
 800d52a:	22aa      	movs	r2, #170	; 0xaa
 800d52c:	0018      	movs	r0, r3
 800d52e:	f00b ffe3 	bl	80194f8 <memcpy1>

  retval = GetKeyByID(APP_KEY, &keyItem);
 800d532:	19bb      	adds	r3, r7, r6
 800d534:	195c      	adds	r4, r3, r5
 800d536:	2308      	movs	r3, #8
 800d538:	2210      	movs	r2, #16
 800d53a:	4694      	mov	ip, r2
 800d53c:	44bc      	add	ip, r7
 800d53e:	4463      	add	r3, ip
 800d540:	0019      	movs	r1, r3
 800d542:	2000      	movs	r0, #0
 800d544:	f7ff ff14 	bl	800d370 <GetKeyByID>
 800d548:	0003      	movs	r3, r0
 800d54a:	7023      	strb	r3, [r4, #0]
  KEY_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800d54c:	4bd5      	ldr	r3, [pc, #852]	; (800d8a4 <SecureElementInit+0x39c>)
 800d54e:	2200      	movs	r2, #0
 800d550:	2100      	movs	r1, #0
 800d552:	2002      	movs	r0, #2
 800d554:	f00e fc44 	bl	801bde0 <UTIL_ADV_TRACE_COND_FSend>
  if (retval == SECURE_ELEMENT_SUCCESS)
 800d558:	19bb      	adds	r3, r7, r6
 800d55a:	195b      	adds	r3, r3, r5
 800d55c:	781b      	ldrb	r3, [r3, #0]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d14f      	bne.n	800d602 <SecureElementInit+0xfa>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### AppKey:  %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\r\n", HEX16(keyItem->KeyValue));
 800d562:	69bb      	ldr	r3, [r7, #24]
 800d564:	785b      	ldrb	r3, [r3, #1]
 800d566:	001d      	movs	r5, r3
 800d568:	69bb      	ldr	r3, [r7, #24]
 800d56a:	789b      	ldrb	r3, [r3, #2]
 800d56c:	001e      	movs	r6, r3
 800d56e:	69bb      	ldr	r3, [r7, #24]
 800d570:	78db      	ldrb	r3, [r3, #3]
 800d572:	469c      	mov	ip, r3
 800d574:	69bb      	ldr	r3, [r7, #24]
 800d576:	791b      	ldrb	r3, [r3, #4]
 800d578:	4698      	mov	r8, r3
 800d57a:	69bb      	ldr	r3, [r7, #24]
 800d57c:	795b      	ldrb	r3, [r3, #5]
 800d57e:	4699      	mov	r9, r3
 800d580:	69bb      	ldr	r3, [r7, #24]
 800d582:	799b      	ldrb	r3, [r3, #6]
 800d584:	469a      	mov	sl, r3
 800d586:	69bb      	ldr	r3, [r7, #24]
 800d588:	79db      	ldrb	r3, [r3, #7]
 800d58a:	469b      	mov	fp, r3
 800d58c:	69bb      	ldr	r3, [r7, #24]
 800d58e:	7a1b      	ldrb	r3, [r3, #8]
 800d590:	613b      	str	r3, [r7, #16]
 800d592:	69bb      	ldr	r3, [r7, #24]
 800d594:	7a5b      	ldrb	r3, [r3, #9]
 800d596:	60fb      	str	r3, [r7, #12]
 800d598:	69bb      	ldr	r3, [r7, #24]
 800d59a:	7a9b      	ldrb	r3, [r3, #10]
 800d59c:	60bb      	str	r3, [r7, #8]
 800d59e:	69bb      	ldr	r3, [r7, #24]
 800d5a0:	7adb      	ldrb	r3, [r3, #11]
 800d5a2:	607b      	str	r3, [r7, #4]
 800d5a4:	69bb      	ldr	r3, [r7, #24]
 800d5a6:	7b1b      	ldrb	r3, [r3, #12]
 800d5a8:	603b      	str	r3, [r7, #0]
 800d5aa:	69bb      	ldr	r3, [r7, #24]
 800d5ac:	7b5b      	ldrb	r3, [r3, #13]
 800d5ae:	001c      	movs	r4, r3
 800d5b0:	69bb      	ldr	r3, [r7, #24]
 800d5b2:	7b9b      	ldrb	r3, [r3, #14]
 800d5b4:	0018      	movs	r0, r3
 800d5b6:	69bb      	ldr	r3, [r7, #24]
 800d5b8:	7bdb      	ldrb	r3, [r3, #15]
 800d5ba:	0019      	movs	r1, r3
 800d5bc:	69bb      	ldr	r3, [r7, #24]
 800d5be:	7c1b      	ldrb	r3, [r3, #16]
 800d5c0:	4ab9      	ldr	r2, [pc, #740]	; (800d8a8 <SecureElementInit+0x3a0>)
 800d5c2:	930f      	str	r3, [sp, #60]	; 0x3c
 800d5c4:	910e      	str	r1, [sp, #56]	; 0x38
 800d5c6:	900d      	str	r0, [sp, #52]	; 0x34
 800d5c8:	940c      	str	r4, [sp, #48]	; 0x30
 800d5ca:	6839      	ldr	r1, [r7, #0]
 800d5cc:	910b      	str	r1, [sp, #44]	; 0x2c
 800d5ce:	6879      	ldr	r1, [r7, #4]
 800d5d0:	910a      	str	r1, [sp, #40]	; 0x28
 800d5d2:	68b9      	ldr	r1, [r7, #8]
 800d5d4:	9109      	str	r1, [sp, #36]	; 0x24
 800d5d6:	68f9      	ldr	r1, [r7, #12]
 800d5d8:	9108      	str	r1, [sp, #32]
 800d5da:	693b      	ldr	r3, [r7, #16]
 800d5dc:	9307      	str	r3, [sp, #28]
 800d5de:	465b      	mov	r3, fp
 800d5e0:	9306      	str	r3, [sp, #24]
 800d5e2:	4653      	mov	r3, sl
 800d5e4:	9305      	str	r3, [sp, #20]
 800d5e6:	464b      	mov	r3, r9
 800d5e8:	9304      	str	r3, [sp, #16]
 800d5ea:	4643      	mov	r3, r8
 800d5ec:	9303      	str	r3, [sp, #12]
 800d5ee:	4663      	mov	r3, ip
 800d5f0:	9302      	str	r3, [sp, #8]
 800d5f2:	9601      	str	r6, [sp, #4]
 800d5f4:	9500      	str	r5, [sp, #0]
 800d5f6:	0013      	movs	r3, r2
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	2100      	movs	r1, #0
 800d5fc:	2002      	movs	r0, #2
 800d5fe:	f00e fbef 	bl	801bde0 <UTIL_ADV_TRACE_COND_FSend>
  }
  retval = GetKeyByID(NWK_KEY, &keyItem);
 800d602:	250f      	movs	r5, #15
 800d604:	2610      	movs	r6, #16
 800d606:	19bb      	adds	r3, r7, r6
 800d608:	195c      	adds	r4, r3, r5
 800d60a:	2308      	movs	r3, #8
 800d60c:	2210      	movs	r2, #16
 800d60e:	4694      	mov	ip, r2
 800d610:	44bc      	add	ip, r7
 800d612:	4463      	add	r3, ip
 800d614:	0019      	movs	r1, r3
 800d616:	2001      	movs	r0, #1
 800d618:	f7ff feaa 	bl	800d370 <GetKeyByID>
 800d61c:	0003      	movs	r3, r0
 800d61e:	7023      	strb	r3, [r4, #0]
  if (retval == SECURE_ELEMENT_SUCCESS)
 800d620:	19bb      	adds	r3, r7, r6
 800d622:	195b      	adds	r3, r3, r5
 800d624:	781b      	ldrb	r3, [r3, #0]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d14f      	bne.n	800d6ca <SecureElementInit+0x1c2>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:  %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\r\n", HEX16(keyItem->KeyValue));
 800d62a:	69bb      	ldr	r3, [r7, #24]
 800d62c:	785b      	ldrb	r3, [r3, #1]
 800d62e:	001d      	movs	r5, r3
 800d630:	69bb      	ldr	r3, [r7, #24]
 800d632:	789b      	ldrb	r3, [r3, #2]
 800d634:	001e      	movs	r6, r3
 800d636:	69bb      	ldr	r3, [r7, #24]
 800d638:	78db      	ldrb	r3, [r3, #3]
 800d63a:	469c      	mov	ip, r3
 800d63c:	69bb      	ldr	r3, [r7, #24]
 800d63e:	791b      	ldrb	r3, [r3, #4]
 800d640:	4698      	mov	r8, r3
 800d642:	69bb      	ldr	r3, [r7, #24]
 800d644:	795b      	ldrb	r3, [r3, #5]
 800d646:	4699      	mov	r9, r3
 800d648:	69bb      	ldr	r3, [r7, #24]
 800d64a:	799b      	ldrb	r3, [r3, #6]
 800d64c:	469a      	mov	sl, r3
 800d64e:	69bb      	ldr	r3, [r7, #24]
 800d650:	79db      	ldrb	r3, [r3, #7]
 800d652:	469b      	mov	fp, r3
 800d654:	69bb      	ldr	r3, [r7, #24]
 800d656:	7a1b      	ldrb	r3, [r3, #8]
 800d658:	613b      	str	r3, [r7, #16]
 800d65a:	69bb      	ldr	r3, [r7, #24]
 800d65c:	7a5b      	ldrb	r3, [r3, #9]
 800d65e:	60fb      	str	r3, [r7, #12]
 800d660:	69bb      	ldr	r3, [r7, #24]
 800d662:	7a9b      	ldrb	r3, [r3, #10]
 800d664:	60bb      	str	r3, [r7, #8]
 800d666:	69bb      	ldr	r3, [r7, #24]
 800d668:	7adb      	ldrb	r3, [r3, #11]
 800d66a:	607b      	str	r3, [r7, #4]
 800d66c:	69bb      	ldr	r3, [r7, #24]
 800d66e:	7b1b      	ldrb	r3, [r3, #12]
 800d670:	603b      	str	r3, [r7, #0]
 800d672:	69bb      	ldr	r3, [r7, #24]
 800d674:	7b5b      	ldrb	r3, [r3, #13]
 800d676:	001c      	movs	r4, r3
 800d678:	69bb      	ldr	r3, [r7, #24]
 800d67a:	7b9b      	ldrb	r3, [r3, #14]
 800d67c:	0018      	movs	r0, r3
 800d67e:	69bb      	ldr	r3, [r7, #24]
 800d680:	7bdb      	ldrb	r3, [r3, #15]
 800d682:	0019      	movs	r1, r3
 800d684:	69bb      	ldr	r3, [r7, #24]
 800d686:	7c1b      	ldrb	r3, [r3, #16]
 800d688:	4a88      	ldr	r2, [pc, #544]	; (800d8ac <SecureElementInit+0x3a4>)
 800d68a:	930f      	str	r3, [sp, #60]	; 0x3c
 800d68c:	910e      	str	r1, [sp, #56]	; 0x38
 800d68e:	900d      	str	r0, [sp, #52]	; 0x34
 800d690:	940c      	str	r4, [sp, #48]	; 0x30
 800d692:	6839      	ldr	r1, [r7, #0]
 800d694:	910b      	str	r1, [sp, #44]	; 0x2c
 800d696:	6879      	ldr	r1, [r7, #4]
 800d698:	910a      	str	r1, [sp, #40]	; 0x28
 800d69a:	68b9      	ldr	r1, [r7, #8]
 800d69c:	9109      	str	r1, [sp, #36]	; 0x24
 800d69e:	68f9      	ldr	r1, [r7, #12]
 800d6a0:	9108      	str	r1, [sp, #32]
 800d6a2:	693b      	ldr	r3, [r7, #16]
 800d6a4:	9307      	str	r3, [sp, #28]
 800d6a6:	465b      	mov	r3, fp
 800d6a8:	9306      	str	r3, [sp, #24]
 800d6aa:	4653      	mov	r3, sl
 800d6ac:	9305      	str	r3, [sp, #20]
 800d6ae:	464b      	mov	r3, r9
 800d6b0:	9304      	str	r3, [sp, #16]
 800d6b2:	4643      	mov	r3, r8
 800d6b4:	9303      	str	r3, [sp, #12]
 800d6b6:	4663      	mov	r3, ip
 800d6b8:	9302      	str	r3, [sp, #8]
 800d6ba:	9601      	str	r6, [sp, #4]
 800d6bc:	9500      	str	r5, [sp, #0]
 800d6be:	0013      	movs	r3, r2
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	2100      	movs	r1, #0
 800d6c4:	2002      	movs	r0, #2
 800d6c6:	f00e fb8b 	bl	801bde0 <UTIL_ADV_TRACE_COND_FSend>
  }
  KEY_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800d6ca:	4b79      	ldr	r3, [pc, #484]	; (800d8b0 <SecureElementInit+0x3a8>)
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	2100      	movs	r1, #0
 800d6d0:	2002      	movs	r0, #2
 800d6d2:	f00e fb85 	bl	801bde0 <UTIL_ADV_TRACE_COND_FSend>
  retval = GetKeyByID(APP_S_KEY, &keyItem);
 800d6d6:	250f      	movs	r5, #15
 800d6d8:	2610      	movs	r6, #16
 800d6da:	19bb      	adds	r3, r7, r6
 800d6dc:	195c      	adds	r4, r3, r5
 800d6de:	2308      	movs	r3, #8
 800d6e0:	2210      	movs	r2, #16
 800d6e2:	4694      	mov	ip, r2
 800d6e4:	44bc      	add	ip, r7
 800d6e6:	4463      	add	r3, ip
 800d6e8:	0019      	movs	r1, r3
 800d6ea:	2003      	movs	r0, #3
 800d6ec:	f7ff fe40 	bl	800d370 <GetKeyByID>
 800d6f0:	0003      	movs	r3, r0
 800d6f2:	7023      	strb	r3, [r4, #0]
  if (retval == SECURE_ELEMENT_SUCCESS)
 800d6f4:	19bb      	adds	r3, r7, r6
 800d6f6:	195b      	adds	r3, r3, r5
 800d6f8:	781b      	ldrb	r3, [r3, #0]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d14f      	bne.n	800d79e <SecureElementInit+0x296>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### AppSKey: %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\r\n", HEX16(keyItem->KeyValue));
 800d6fe:	69bb      	ldr	r3, [r7, #24]
 800d700:	785b      	ldrb	r3, [r3, #1]
 800d702:	001d      	movs	r5, r3
 800d704:	69bb      	ldr	r3, [r7, #24]
 800d706:	789b      	ldrb	r3, [r3, #2]
 800d708:	001e      	movs	r6, r3
 800d70a:	69bb      	ldr	r3, [r7, #24]
 800d70c:	78db      	ldrb	r3, [r3, #3]
 800d70e:	469c      	mov	ip, r3
 800d710:	69bb      	ldr	r3, [r7, #24]
 800d712:	791b      	ldrb	r3, [r3, #4]
 800d714:	4698      	mov	r8, r3
 800d716:	69bb      	ldr	r3, [r7, #24]
 800d718:	795b      	ldrb	r3, [r3, #5]
 800d71a:	4699      	mov	r9, r3
 800d71c:	69bb      	ldr	r3, [r7, #24]
 800d71e:	799b      	ldrb	r3, [r3, #6]
 800d720:	469a      	mov	sl, r3
 800d722:	69bb      	ldr	r3, [r7, #24]
 800d724:	79db      	ldrb	r3, [r3, #7]
 800d726:	469b      	mov	fp, r3
 800d728:	69bb      	ldr	r3, [r7, #24]
 800d72a:	7a1b      	ldrb	r3, [r3, #8]
 800d72c:	613b      	str	r3, [r7, #16]
 800d72e:	69bb      	ldr	r3, [r7, #24]
 800d730:	7a5b      	ldrb	r3, [r3, #9]
 800d732:	60fb      	str	r3, [r7, #12]
 800d734:	69bb      	ldr	r3, [r7, #24]
 800d736:	7a9b      	ldrb	r3, [r3, #10]
 800d738:	60bb      	str	r3, [r7, #8]
 800d73a:	69bb      	ldr	r3, [r7, #24]
 800d73c:	7adb      	ldrb	r3, [r3, #11]
 800d73e:	607b      	str	r3, [r7, #4]
 800d740:	69bb      	ldr	r3, [r7, #24]
 800d742:	7b1b      	ldrb	r3, [r3, #12]
 800d744:	603b      	str	r3, [r7, #0]
 800d746:	69bb      	ldr	r3, [r7, #24]
 800d748:	7b5b      	ldrb	r3, [r3, #13]
 800d74a:	001c      	movs	r4, r3
 800d74c:	69bb      	ldr	r3, [r7, #24]
 800d74e:	7b9b      	ldrb	r3, [r3, #14]
 800d750:	0018      	movs	r0, r3
 800d752:	69bb      	ldr	r3, [r7, #24]
 800d754:	7bdb      	ldrb	r3, [r3, #15]
 800d756:	0019      	movs	r1, r3
 800d758:	69bb      	ldr	r3, [r7, #24]
 800d75a:	7c1b      	ldrb	r3, [r3, #16]
 800d75c:	4a55      	ldr	r2, [pc, #340]	; (800d8b4 <SecureElementInit+0x3ac>)
 800d75e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d760:	910e      	str	r1, [sp, #56]	; 0x38
 800d762:	900d      	str	r0, [sp, #52]	; 0x34
 800d764:	940c      	str	r4, [sp, #48]	; 0x30
 800d766:	6839      	ldr	r1, [r7, #0]
 800d768:	910b      	str	r1, [sp, #44]	; 0x2c
 800d76a:	6879      	ldr	r1, [r7, #4]
 800d76c:	910a      	str	r1, [sp, #40]	; 0x28
 800d76e:	68b9      	ldr	r1, [r7, #8]
 800d770:	9109      	str	r1, [sp, #36]	; 0x24
 800d772:	68f9      	ldr	r1, [r7, #12]
 800d774:	9108      	str	r1, [sp, #32]
 800d776:	693b      	ldr	r3, [r7, #16]
 800d778:	9307      	str	r3, [sp, #28]
 800d77a:	465b      	mov	r3, fp
 800d77c:	9306      	str	r3, [sp, #24]
 800d77e:	4653      	mov	r3, sl
 800d780:	9305      	str	r3, [sp, #20]
 800d782:	464b      	mov	r3, r9
 800d784:	9304      	str	r3, [sp, #16]
 800d786:	4643      	mov	r3, r8
 800d788:	9303      	str	r3, [sp, #12]
 800d78a:	4663      	mov	r3, ip
 800d78c:	9302      	str	r3, [sp, #8]
 800d78e:	9601      	str	r6, [sp, #4]
 800d790:	9500      	str	r5, [sp, #0]
 800d792:	0013      	movs	r3, r2
 800d794:	2200      	movs	r2, #0
 800d796:	2100      	movs	r1, #0
 800d798:	2002      	movs	r0, #2
 800d79a:	f00e fb21 	bl	801bde0 <UTIL_ADV_TRACE_COND_FSend>
  }
  retval = GetKeyByID(NWK_S_KEY, &keyItem);
 800d79e:	250f      	movs	r5, #15
 800d7a0:	2610      	movs	r6, #16
 800d7a2:	19bb      	adds	r3, r7, r6
 800d7a4:	195c      	adds	r4, r3, r5
 800d7a6:	2308      	movs	r3, #8
 800d7a8:	2210      	movs	r2, #16
 800d7aa:	4694      	mov	ip, r2
 800d7ac:	44bc      	add	ip, r7
 800d7ae:	4463      	add	r3, ip
 800d7b0:	0019      	movs	r1, r3
 800d7b2:	2002      	movs	r0, #2
 800d7b4:	f7ff fddc 	bl	800d370 <GetKeyByID>
 800d7b8:	0003      	movs	r3, r0
 800d7ba:	7023      	strb	r3, [r4, #0]
  if (retval == SECURE_ELEMENT_SUCCESS)
 800d7bc:	19bb      	adds	r3, r7, r6
 800d7be:	195b      	adds	r3, r3, r5
 800d7c0:	781b      	ldrb	r3, [r3, #0]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d14f      	bne.n	800d866 <SecureElementInit+0x35e>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey: %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\r\n", HEX16(keyItem->KeyValue));
 800d7c6:	69bb      	ldr	r3, [r7, #24]
 800d7c8:	785b      	ldrb	r3, [r3, #1]
 800d7ca:	001d      	movs	r5, r3
 800d7cc:	69bb      	ldr	r3, [r7, #24]
 800d7ce:	789b      	ldrb	r3, [r3, #2]
 800d7d0:	001e      	movs	r6, r3
 800d7d2:	69bb      	ldr	r3, [r7, #24]
 800d7d4:	78db      	ldrb	r3, [r3, #3]
 800d7d6:	469c      	mov	ip, r3
 800d7d8:	69bb      	ldr	r3, [r7, #24]
 800d7da:	791b      	ldrb	r3, [r3, #4]
 800d7dc:	4698      	mov	r8, r3
 800d7de:	69bb      	ldr	r3, [r7, #24]
 800d7e0:	795b      	ldrb	r3, [r3, #5]
 800d7e2:	4699      	mov	r9, r3
 800d7e4:	69bb      	ldr	r3, [r7, #24]
 800d7e6:	799b      	ldrb	r3, [r3, #6]
 800d7e8:	469a      	mov	sl, r3
 800d7ea:	69bb      	ldr	r3, [r7, #24]
 800d7ec:	79db      	ldrb	r3, [r3, #7]
 800d7ee:	469b      	mov	fp, r3
 800d7f0:	69bb      	ldr	r3, [r7, #24]
 800d7f2:	7a1b      	ldrb	r3, [r3, #8]
 800d7f4:	613b      	str	r3, [r7, #16]
 800d7f6:	69bb      	ldr	r3, [r7, #24]
 800d7f8:	7a5b      	ldrb	r3, [r3, #9]
 800d7fa:	60fb      	str	r3, [r7, #12]
 800d7fc:	69bb      	ldr	r3, [r7, #24]
 800d7fe:	7a9b      	ldrb	r3, [r3, #10]
 800d800:	60bb      	str	r3, [r7, #8]
 800d802:	69bb      	ldr	r3, [r7, #24]
 800d804:	7adb      	ldrb	r3, [r3, #11]
 800d806:	607b      	str	r3, [r7, #4]
 800d808:	69bb      	ldr	r3, [r7, #24]
 800d80a:	7b1b      	ldrb	r3, [r3, #12]
 800d80c:	603b      	str	r3, [r7, #0]
 800d80e:	69bb      	ldr	r3, [r7, #24]
 800d810:	7b5b      	ldrb	r3, [r3, #13]
 800d812:	001c      	movs	r4, r3
 800d814:	69bb      	ldr	r3, [r7, #24]
 800d816:	7b9b      	ldrb	r3, [r3, #14]
 800d818:	0018      	movs	r0, r3
 800d81a:	69bb      	ldr	r3, [r7, #24]
 800d81c:	7bdb      	ldrb	r3, [r3, #15]
 800d81e:	0019      	movs	r1, r3
 800d820:	69bb      	ldr	r3, [r7, #24]
 800d822:	7c1b      	ldrb	r3, [r3, #16]
 800d824:	4a24      	ldr	r2, [pc, #144]	; (800d8b8 <SecureElementInit+0x3b0>)
 800d826:	930f      	str	r3, [sp, #60]	; 0x3c
 800d828:	910e      	str	r1, [sp, #56]	; 0x38
 800d82a:	900d      	str	r0, [sp, #52]	; 0x34
 800d82c:	940c      	str	r4, [sp, #48]	; 0x30
 800d82e:	6839      	ldr	r1, [r7, #0]
 800d830:	910b      	str	r1, [sp, #44]	; 0x2c
 800d832:	6879      	ldr	r1, [r7, #4]
 800d834:	910a      	str	r1, [sp, #40]	; 0x28
 800d836:	68b9      	ldr	r1, [r7, #8]
 800d838:	9109      	str	r1, [sp, #36]	; 0x24
 800d83a:	68f9      	ldr	r1, [r7, #12]
 800d83c:	9108      	str	r1, [sp, #32]
 800d83e:	693b      	ldr	r3, [r7, #16]
 800d840:	9307      	str	r3, [sp, #28]
 800d842:	465b      	mov	r3, fp
 800d844:	9306      	str	r3, [sp, #24]
 800d846:	4653      	mov	r3, sl
 800d848:	9305      	str	r3, [sp, #20]
 800d84a:	464b      	mov	r3, r9
 800d84c:	9304      	str	r3, [sp, #16]
 800d84e:	4643      	mov	r3, r8
 800d850:	9303      	str	r3, [sp, #12]
 800d852:	4663      	mov	r3, ip
 800d854:	9302      	str	r3, [sp, #8]
 800d856:	9601      	str	r6, [sp, #4]
 800d858:	9500      	str	r5, [sp, #0]
 800d85a:	0013      	movs	r3, r2
 800d85c:	2200      	movs	r2, #0
 800d85e:	2100      	movs	r1, #0
 800d860:	2002      	movs	r0, #2
 800d862:	f00e fabd 	bl	801bde0 <UTIL_ADV_TRACE_COND_FSend>
  SeNvmCtx.KeyList[itr].KeyID = SLOT_RAND_ZERO_KEY;

#endif /* LORAWAN_KMS */

  /* Assign callback */
  if (seNvmCtxChanged != 0)
 800d866:	697b      	ldr	r3, [r7, #20]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d003      	beq.n	800d874 <SecureElementInit+0x36c>
  {
    SeNvmCtxChanged = seNvmCtxChanged;
 800d86c:	4b13      	ldr	r3, [pc, #76]	; (800d8bc <SecureElementInit+0x3b4>)
 800d86e:	697a      	ldr	r2, [r7, #20]
 800d870:	601a      	str	r2, [r3, #0]
 800d872:	e002      	b.n	800d87a <SecureElementInit+0x372>
  }
  else
  {
    SeNvmCtxChanged = DummyCB;
 800d874:	4b11      	ldr	r3, [pc, #68]	; (800d8bc <SecureElementInit+0x3b4>)
 800d876:	4a12      	ldr	r2, [pc, #72]	; (800d8c0 <SecureElementInit+0x3b8>)
 800d878:	601a      	str	r2, [r3, #0]
  }

#if !defined( SECURE_ELEMENT_PRE_PROVISIONED )
#if ( STATIC_DEVICE_EUI == 0 )
  /* Get a DevEUI from MCU unique ID */
  GetUniqueId(SeNvmCtx.DevEui);
 800d87a:	4b12      	ldr	r3, [pc, #72]	; (800d8c4 <SecureElementInit+0x3bc>)
 800d87c:	0018      	movs	r0, r3
 800d87e:	f7f7 f96e 	bl	8004b5e <GetUniqueId>
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
  SeNvmCtxChanged();
 800d882:	4b0e      	ldr	r3, [pc, #56]	; (800d8bc <SecureElementInit+0x3b4>)
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	4798      	blx	r3

  return SECURE_ELEMENT_SUCCESS;
 800d888:	2300      	movs	r3, #0
}
 800d88a:	0018      	movs	r0, r3
 800d88c:	46bd      	mov	sp, r7
 800d88e:	b009      	add	sp, #36	; 0x24
 800d890:	bcf0      	pop	{r4, r5, r6, r7}
 800d892:	46bb      	mov	fp, r7
 800d894:	46b2      	mov	sl, r6
 800d896:	46a9      	mov	r9, r5
 800d898:	46a0      	mov	r8, r4
 800d89a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d89c:	0801f520 	.word	0x0801f520
 800d8a0:	2000008c 	.word	0x2000008c
 800d8a4:	0801f5cc 	.word	0x0801f5cc
 800d8a8:	0801f5e4 	.word	0x0801f5e4
 800d8ac:	0801f648 	.word	0x0801f648
 800d8b0:	0801f6ac 	.word	0x0801f6ac
 800d8b4:	0801f6c4 	.word	0x0801f6c4
 800d8b8:	0801f728 	.word	0x0801f728
 800d8bc:	2000041c 	.word	0x2000041c
 800d8c0:	0800d3e5 	.word	0x0800d3e5
 800d8c4:	2000007c 	.word	0x2000007c

0800d8c8 <SecureElementRestoreNvmCtx>:
  return SECURE_ELEMENT_SUCCESS;
#endif /* LORAWAN_KMS == 1 */
}

SecureElementStatus_t SecureElementRestoreNvmCtx(void *seNvmCtx)
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b082      	sub	sp, #8
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
  /* Restore nvm context */
  if (seNvmCtx != 0)
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d007      	beq.n	800d8e6 <SecureElementRestoreNvmCtx+0x1e>
  {
    memcpy1((uint8_t *) &SeNvmCtx, (uint8_t *) seNvmCtx, sizeof(SeNvmCtx));
 800d8d6:	6879      	ldr	r1, [r7, #4]
 800d8d8:	4b05      	ldr	r3, [pc, #20]	; (800d8f0 <SecureElementRestoreNvmCtx+0x28>)
 800d8da:	22ba      	movs	r2, #186	; 0xba
 800d8dc:	0018      	movs	r0, r3
 800d8de:	f00b fe0b 	bl	80194f8 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	e000      	b.n	800d8e8 <SecureElementRestoreNvmCtx+0x20>
  }
  else
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800d8e6:	2302      	movs	r3, #2
  }
}
 800d8e8:	0018      	movs	r0, r3
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	b002      	add	sp, #8
 800d8ee:	bd80      	pop	{r7, pc}
 800d8f0:	2000007c 	.word	0x2000007c

0800d8f4 <SecureElementGetNvmCtx>:

void *SecureElementGetNvmCtx(size_t *seNvmCtxSize)
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b082      	sub	sp, #8
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	6078      	str	r0, [r7, #4]
  *seNvmCtxSize = sizeof(SeNvmCtx);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	22ba      	movs	r2, #186	; 0xba
 800d900:	601a      	str	r2, [r3, #0]
  return &SeNvmCtx;
 800d902:	4b02      	ldr	r3, [pc, #8]	; (800d90c <SecureElementGetNvmCtx+0x18>)
}
 800d904:	0018      	movs	r0, r3
 800d906:	46bd      	mov	sp, r7
 800d908:	b002      	add	sp, #8
 800d90a:	bd80      	pop	{r7, pc}
 800d90c:	2000007c 	.word	0x2000007c

0800d910 <SecureElementSetKey>:

SecureElementStatus_t SecureElementSetKey(KeyIdentifier_t keyID, uint8_t *key)
{
 800d910:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d912:	b089      	sub	sp, #36	; 0x24
 800d914:	af00      	add	r7, sp, #0
 800d916:	0002      	movs	r2, r0
 800d918:	6039      	str	r1, [r7, #0]
 800d91a:	1dfb      	adds	r3, r7, #7
 800d91c:	701a      	strb	r2, [r3, #0]
  if (key == NULL)
 800d91e:	683b      	ldr	r3, [r7, #0]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d101      	bne.n	800d928 <SecureElementSetKey+0x18>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800d924:	2302      	movs	r3, #2
 800d926:	e064      	b.n	800d9f2 <SecureElementSetKey+0xe2>
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800d928:	231f      	movs	r3, #31
 800d92a:	18fb      	adds	r3, r7, r3
 800d92c:	2200      	movs	r2, #0
 800d92e:	701a      	strb	r2, [r3, #0]
 800d930:	e059      	b.n	800d9e6 <SecureElementSetKey+0xd6>
  {
    if (SeNvmCtx.KeyList[i].KeyID == keyID)
 800d932:	231f      	movs	r3, #31
 800d934:	18fb      	adds	r3, r7, r3
 800d936:	781a      	ldrb	r2, [r3, #0]
 800d938:	4930      	ldr	r1, [pc, #192]	; (800d9fc <SecureElementSetKey+0xec>)
 800d93a:	0013      	movs	r3, r2
 800d93c:	011b      	lsls	r3, r3, #4
 800d93e:	189b      	adds	r3, r3, r2
 800d940:	18cb      	adds	r3, r1, r3
 800d942:	3310      	adds	r3, #16
 800d944:	781b      	ldrb	r3, [r3, #0]
 800d946:	1dfa      	adds	r2, r7, #7
 800d948:	7812      	ldrb	r2, [r2, #0]
 800d94a:	429a      	cmp	r2, r3
 800d94c:	d145      	bne.n	800d9da <SecureElementSetKey+0xca>
    {
#if ( LORAMAC_MAX_MC_CTX == 1 )
      if (keyID == MC_KEY_0)
 800d94e:	1dfb      	adds	r3, r7, #7
 800d950:	781b      	ldrb	r3, [r3, #0]
 800d952:	2b80      	cmp	r3, #128	; 0x80
 800d954:	d12c      	bne.n	800d9b0 <SecureElementSetKey+0xa0>
#else /* LORAMAC_MAX_MC_CTX > 1 */
      if ((keyID == MC_KEY_0) || (keyID == MC_KEY_1) || (keyID == MC_KEY_2) || (keyID == MC_KEY_3))
#endif /* LORAMAC_MAX_MC_CTX */
      {
        /* Decrypt the key if its a Mckey */
        SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800d956:	251e      	movs	r5, #30
 800d958:	197b      	adds	r3, r7, r5
 800d95a:	2206      	movs	r2, #6
 800d95c:	701a      	strb	r2, [r3, #0]
        uint8_t decryptedKey[16] = { 0 };
 800d95e:	260c      	movs	r6, #12
 800d960:	19bb      	adds	r3, r7, r6
 800d962:	2200      	movs	r2, #0
 800d964:	601a      	str	r2, [r3, #0]
 800d966:	3304      	adds	r3, #4
 800d968:	220c      	movs	r2, #12
 800d96a:	2100      	movs	r1, #0
 800d96c:	0018      	movs	r0, r3
 800d96e:	f010 fad4 	bl	801df1a <memset>

        retval = SecureElementAesEncrypt(key, 16, MC_KE_KEY, decryptedKey);
 800d972:	197c      	adds	r4, r7, r5
 800d974:	19bb      	adds	r3, r7, r6
 800d976:	6838      	ldr	r0, [r7, #0]
 800d978:	227f      	movs	r2, #127	; 0x7f
 800d97a:	2110      	movs	r1, #16
 800d97c:	f000 f8a5 	bl	800daca <SecureElementAesEncrypt>
 800d980:	0003      	movs	r3, r0
 800d982:	7023      	strb	r3, [r4, #0]

        memcpy1(SeNvmCtx.KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE);
 800d984:	231f      	movs	r3, #31
 800d986:	18fb      	adds	r3, r7, r3
 800d988:	781a      	ldrb	r2, [r3, #0]
 800d98a:	0013      	movs	r3, r2
 800d98c:	011b      	lsls	r3, r3, #4
 800d98e:	189b      	adds	r3, r3, r2
 800d990:	3310      	adds	r3, #16
 800d992:	001a      	movs	r2, r3
 800d994:	4b19      	ldr	r3, [pc, #100]	; (800d9fc <SecureElementSetKey+0xec>)
 800d996:	18d3      	adds	r3, r2, r3
 800d998:	3301      	adds	r3, #1
 800d99a:	19b9      	adds	r1, r7, r6
 800d99c:	2210      	movs	r2, #16
 800d99e:	0018      	movs	r0, r3
 800d9a0:	f00b fdaa 	bl	80194f8 <memcpy1>
        SeNvmCtxChanged();
 800d9a4:	4b16      	ldr	r3, [pc, #88]	; (800da00 <SecureElementSetKey+0xf0>)
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	4798      	blx	r3

        return retval;
 800d9aa:	197b      	adds	r3, r7, r5
 800d9ac:	781b      	ldrb	r3, [r3, #0]
 800d9ae:	e020      	b.n	800d9f2 <SecureElementSetKey+0xe2>
      }
      else
      {
        memcpy1(SeNvmCtx.KeyList[i].KeyValue, key, SE_KEY_SIZE);
 800d9b0:	231f      	movs	r3, #31
 800d9b2:	18fb      	adds	r3, r7, r3
 800d9b4:	781a      	ldrb	r2, [r3, #0]
 800d9b6:	0013      	movs	r3, r2
 800d9b8:	011b      	lsls	r3, r3, #4
 800d9ba:	189b      	adds	r3, r3, r2
 800d9bc:	3310      	adds	r3, #16
 800d9be:	001a      	movs	r2, r3
 800d9c0:	4b0e      	ldr	r3, [pc, #56]	; (800d9fc <SecureElementSetKey+0xec>)
 800d9c2:	18d3      	adds	r3, r2, r3
 800d9c4:	3301      	adds	r3, #1
 800d9c6:	6839      	ldr	r1, [r7, #0]
 800d9c8:	2210      	movs	r2, #16
 800d9ca:	0018      	movs	r0, r3
 800d9cc:	f00b fd94 	bl	80194f8 <memcpy1>
        SeNvmCtxChanged();
 800d9d0:	4b0b      	ldr	r3, [pc, #44]	; (800da00 <SecureElementSetKey+0xf0>)
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	4798      	blx	r3
        return SECURE_ELEMENT_SUCCESS;
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	e00b      	b.n	800d9f2 <SecureElementSetKey+0xe2>
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800d9da:	211f      	movs	r1, #31
 800d9dc:	187b      	adds	r3, r7, r1
 800d9de:	781a      	ldrb	r2, [r3, #0]
 800d9e0:	187b      	adds	r3, r7, r1
 800d9e2:	3201      	adds	r2, #1
 800d9e4:	701a      	strb	r2, [r3, #0]
 800d9e6:	231f      	movs	r3, #31
 800d9e8:	18fb      	adds	r3, r7, r3
 800d9ea:	781b      	ldrb	r3, [r3, #0]
 800d9ec:	2b09      	cmp	r3, #9
 800d9ee:	d9a0      	bls.n	800d932 <SecureElementSetKey+0x22>
      }
    }
  }
  return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d9f0:	2303      	movs	r3, #3
#else /* LORAWAN_KMS == 1 */
  /* Indexes are already stored at init or when deriving the key */
  CK_OBJECT_HANDLE keyIndex;
  return GetKeyIndexByID(keyID, &keyIndex);
#endif /* LORAWAN_KMS */
}
 800d9f2:	0018      	movs	r0, r3
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	b009      	add	sp, #36	; 0x24
 800d9f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9fa:	46c0      	nop			; (mov r8, r8)
 800d9fc:	2000007c 	.word	0x2000007c
 800da00:	2000041c 	.word	0x2000041c

0800da04 <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size,
                                                  KeyIdentifier_t keyID, uint32_t *cmac)
{
 800da04:	b590      	push	{r4, r7, lr}
 800da06:	b087      	sub	sp, #28
 800da08:	af02      	add	r7, sp, #8
 800da0a:	60f8      	str	r0, [r7, #12]
 800da0c:	60b9      	str	r1, [r7, #8]
 800da0e:	0019      	movs	r1, r3
 800da10:	1dbb      	adds	r3, r7, #6
 800da12:	801a      	strh	r2, [r3, #0]
 800da14:	1d7b      	adds	r3, r7, #5
 800da16:	1c0a      	adds	r2, r1, #0
 800da18:	701a      	strb	r2, [r3, #0]
  if (keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS)
 800da1a:	1d7b      	adds	r3, r7, #5
 800da1c:	781b      	ldrb	r3, [r3, #0]
 800da1e:	2b7e      	cmp	r3, #126	; 0x7e
 800da20:	d901      	bls.n	800da26 <SecureElementComputeAesCmac+0x22>
  {
    /* Never accept multicast key identifier for cmac computation */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800da22:	2303      	movs	r3, #3
 800da24:	e00b      	b.n	800da3e <SecureElementComputeAesCmac+0x3a>
  }

  return ComputeCmac(micBxBuffer, buffer, size, keyID, cmac);
 800da26:	1d7b      	adds	r3, r7, #5
 800da28:	781c      	ldrb	r4, [r3, #0]
 800da2a:	1dbb      	adds	r3, r7, #6
 800da2c:	881a      	ldrh	r2, [r3, #0]
 800da2e:	68b9      	ldr	r1, [r7, #8]
 800da30:	68f8      	ldr	r0, [r7, #12]
 800da32:	6a3b      	ldr	r3, [r7, #32]
 800da34:	9300      	str	r3, [sp, #0]
 800da36:	0023      	movs	r3, r4
 800da38:	f7ff fcda 	bl	800d3f0 <ComputeCmac>
 800da3c:	0003      	movs	r3, r0
}
 800da3e:	0018      	movs	r0, r3
 800da40:	46bd      	mov	sp, r7
 800da42:	b005      	add	sp, #20
 800da44:	bd90      	pop	{r4, r7, pc}

0800da46 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac(uint8_t *buffer, uint16_t size, uint32_t expectedCmac,
                                                 KeyIdentifier_t keyID)
{
 800da46:	b5b0      	push	{r4, r5, r7, lr}
 800da48:	b088      	sub	sp, #32
 800da4a:	af02      	add	r7, sp, #8
 800da4c:	60f8      	str	r0, [r7, #12]
 800da4e:	0008      	movs	r0, r1
 800da50:	607a      	str	r2, [r7, #4]
 800da52:	0019      	movs	r1, r3
 800da54:	230a      	movs	r3, #10
 800da56:	18fb      	adds	r3, r7, r3
 800da58:	1c02      	adds	r2, r0, #0
 800da5a:	801a      	strh	r2, [r3, #0]
 800da5c:	2309      	movs	r3, #9
 800da5e:	18fb      	adds	r3, r7, r3
 800da60:	1c0a      	adds	r2, r1, #0
 800da62:	701a      	strb	r2, [r3, #0]
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800da64:	2317      	movs	r3, #23
 800da66:	18fb      	adds	r3, r7, r3
 800da68:	2206      	movs	r2, #6
 800da6a:	701a      	strb	r2, [r3, #0]
  if (buffer == NULL)
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d101      	bne.n	800da76 <SecureElementVerifyAesCmac+0x30>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800da72:	2302      	movs	r3, #2
 800da74:	e025      	b.n	800dac2 <SecureElementVerifyAesCmac+0x7c>
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  uint32_t compCmac = 0;
 800da76:	2300      	movs	r3, #0
 800da78:	613b      	str	r3, [r7, #16]

  retval = ComputeCmac(NULL, buffer, size, keyID, &compCmac);
 800da7a:	2517      	movs	r5, #23
 800da7c:	197c      	adds	r4, r7, r5
 800da7e:	2309      	movs	r3, #9
 800da80:	18fb      	adds	r3, r7, r3
 800da82:	7818      	ldrb	r0, [r3, #0]
 800da84:	230a      	movs	r3, #10
 800da86:	18fb      	adds	r3, r7, r3
 800da88:	881a      	ldrh	r2, [r3, #0]
 800da8a:	68f9      	ldr	r1, [r7, #12]
 800da8c:	2310      	movs	r3, #16
 800da8e:	18fb      	adds	r3, r7, r3
 800da90:	9300      	str	r3, [sp, #0]
 800da92:	0003      	movs	r3, r0
 800da94:	2000      	movs	r0, #0
 800da96:	f7ff fcab 	bl	800d3f0 <ComputeCmac>
 800da9a:	0003      	movs	r3, r0
 800da9c:	7023      	strb	r3, [r4, #0]
  if (retval != SECURE_ELEMENT_SUCCESS)
 800da9e:	197b      	adds	r3, r7, r5
 800daa0:	781b      	ldrb	r3, [r3, #0]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d002      	beq.n	800daac <SecureElementVerifyAesCmac+0x66>
  {
    return retval;
 800daa6:	197b      	adds	r3, r7, r5
 800daa8:	781b      	ldrb	r3, [r3, #0]
 800daaa:	e00a      	b.n	800dac2 <SecureElementVerifyAesCmac+0x7c>
  }

  if (expectedCmac != compCmac)
 800daac:	693b      	ldr	r3, [r7, #16]
 800daae:	687a      	ldr	r2, [r7, #4]
 800dab0:	429a      	cmp	r2, r3
 800dab2:	d003      	beq.n	800dabc <SecureElementVerifyAesCmac+0x76>
  {
    retval = SECURE_ELEMENT_FAIL_CMAC;
 800dab4:	2317      	movs	r3, #23
 800dab6:	18fb      	adds	r3, r7, r3
 800dab8:	2201      	movs	r2, #1
 800daba:	701a      	strb	r2, [r3, #0]
    retval = SECURE_ELEMENT_ERROR;
  }

#endif /* LORAWAN_KMS */

  return retval;
 800dabc:	2317      	movs	r3, #23
 800dabe:	18fb      	adds	r3, r7, r3
 800dac0:	781b      	ldrb	r3, [r3, #0]
}
 800dac2:	0018      	movs	r0, r3
 800dac4:	46bd      	mov	sp, r7
 800dac6:	b006      	add	sp, #24
 800dac8:	bdb0      	pop	{r4, r5, r7, pc}

0800daca <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt(uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                              uint8_t *encBuffer)
{
 800daca:	b5b0      	push	{r4, r5, r7, lr}
 800dacc:	b0c2      	sub	sp, #264	; 0x108
 800dace:	af00      	add	r7, sp, #0
 800dad0:	60f8      	str	r0, [r7, #12]
 800dad2:	0008      	movs	r0, r1
 800dad4:	0011      	movs	r1, r2
 800dad6:	607b      	str	r3, [r7, #4]
 800dad8:	230a      	movs	r3, #10
 800dada:	18fb      	adds	r3, r7, r3
 800dadc:	1c02      	adds	r2, r0, #0
 800dade:	801a      	strh	r2, [r3, #0]
 800dae0:	2309      	movs	r3, #9
 800dae2:	18fb      	adds	r3, r7, r3
 800dae4:	1c0a      	adds	r2, r1, #0
 800dae6:	701a      	strb	r2, [r3, #0]
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800dae8:	1dfb      	adds	r3, r7, #7
 800daea:	33ff      	adds	r3, #255	; 0xff
 800daec:	2206      	movs	r2, #6
 800daee:	701a      	strb	r2, [r3, #0]
  if (buffer == NULL || encBuffer == NULL)
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d002      	beq.n	800dafc <SecureElementAesEncrypt+0x32>
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d101      	bne.n	800db00 <SecureElementAesEncrypt+0x36>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800dafc:	2302      	movs	r3, #2
 800dafe:	e051      	b.n	800dba4 <SecureElementAesEncrypt+0xda>
  }

  /* Check if the size is divisible by 16 */
  if ((size % 16) != 0)
 800db00:	230a      	movs	r3, #10
 800db02:	18fb      	adds	r3, r7, r3
 800db04:	881b      	ldrh	r3, [r3, #0]
 800db06:	220f      	movs	r2, #15
 800db08:	4013      	ands	r3, r2
 800db0a:	b29b      	uxth	r3, r3
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d001      	beq.n	800db14 <SecureElementAesEncrypt+0x4a>
  {
    return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800db10:	2305      	movs	r3, #5
 800db12:	e047      	b.n	800dba4 <SecureElementAesEncrypt+0xda>
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  lorawan_aes_context aesContext;
  memset1(aesContext.ksch, '\0', 240);
 800db14:	2514      	movs	r5, #20
 800db16:	197b      	adds	r3, r7, r5
 800db18:	22f0      	movs	r2, #240	; 0xf0
 800db1a:	2100      	movs	r1, #0
 800db1c:	0018      	movs	r0, r3
 800db1e:	f00b fd29 	bl	8019574 <memset1>

  Key_t *pItem;
  retval = GetKeyByID(keyID, &pItem);
 800db22:	1dfc      	adds	r4, r7, #7
 800db24:	34ff      	adds	r4, #255	; 0xff
 800db26:	2310      	movs	r3, #16
 800db28:	18fa      	adds	r2, r7, r3
 800db2a:	2309      	movs	r3, #9
 800db2c:	18fb      	adds	r3, r7, r3
 800db2e:	781b      	ldrb	r3, [r3, #0]
 800db30:	0011      	movs	r1, r2
 800db32:	0018      	movs	r0, r3
 800db34:	f7ff fc1c 	bl	800d370 <GetKeyByID>
 800db38:	0003      	movs	r3, r0
 800db3a:	7023      	strb	r3, [r4, #0]

  if (retval == SECURE_ELEMENT_SUCCESS)
 800db3c:	1dfb      	adds	r3, r7, #7
 800db3e:	33ff      	adds	r3, #255	; 0xff
 800db40:	781b      	ldrb	r3, [r3, #0]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d12b      	bne.n	800db9e <SecureElementAesEncrypt+0xd4>
  {
    lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800db46:	693b      	ldr	r3, [r7, #16]
 800db48:	3301      	adds	r3, #1
 800db4a:	197a      	adds	r2, r7, r5
 800db4c:	2110      	movs	r1, #16
 800db4e:	0018      	movs	r0, r3
 800db50:	f7ff fa88 	bl	800d064 <lorawan_aes_set_key>

    uint8_t block = 0;
 800db54:	2308      	movs	r3, #8
 800db56:	33ff      	adds	r3, #255	; 0xff
 800db58:	18fb      	adds	r3, r7, r3
 800db5a:	2200      	movs	r2, #0
 800db5c:	701a      	strb	r2, [r3, #0]

    while (size != 0)
 800db5e:	e019      	b.n	800db94 <SecureElementAesEncrypt+0xca>
    {
      lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800db60:	2408      	movs	r4, #8
 800db62:	34ff      	adds	r4, #255	; 0xff
 800db64:	193b      	adds	r3, r7, r4
 800db66:	781b      	ldrb	r3, [r3, #0]
 800db68:	68fa      	ldr	r2, [r7, #12]
 800db6a:	18d0      	adds	r0, r2, r3
 800db6c:	193b      	adds	r3, r7, r4
 800db6e:	781b      	ldrb	r3, [r3, #0]
 800db70:	687a      	ldr	r2, [r7, #4]
 800db72:	18d3      	adds	r3, r2, r3
 800db74:	2214      	movs	r2, #20
 800db76:	18ba      	adds	r2, r7, r2
 800db78:	0019      	movs	r1, r3
 800db7a:	f7ff fbaf 	bl	800d2dc <lorawan_aes_encrypt>
      block = block + 16;
 800db7e:	193b      	adds	r3, r7, r4
 800db80:	193a      	adds	r2, r7, r4
 800db82:	7812      	ldrb	r2, [r2, #0]
 800db84:	3210      	adds	r2, #16
 800db86:	701a      	strb	r2, [r3, #0]
      size = size - 16;
 800db88:	220a      	movs	r2, #10
 800db8a:	18bb      	adds	r3, r7, r2
 800db8c:	18ba      	adds	r2, r7, r2
 800db8e:	8812      	ldrh	r2, [r2, #0]
 800db90:	3a10      	subs	r2, #16
 800db92:	801a      	strh	r2, [r3, #0]
    while (size != 0)
 800db94:	230a      	movs	r3, #10
 800db96:	18fb      	adds	r3, r7, r3
 800db98:	881b      	ldrh	r3, [r3, #0]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d1e0      	bne.n	800db60 <SecureElementAesEncrypt+0x96>
  {
    retval = SECURE_ELEMENT_ERROR;
  }
#endif /* LORAWAN_KMS */

  return retval;
 800db9e:	1dfb      	adds	r3, r7, #7
 800dba0:	33ff      	adds	r3, #255	; 0xff
 800dba2:	781b      	ldrb	r3, [r3, #0]
}
 800dba4:	0018      	movs	r0, r3
 800dba6:	46bd      	mov	sp, r7
 800dba8:	b042      	add	sp, #264	; 0x108
 800dbaa:	bdb0      	pop	{r4, r5, r7, pc}

0800dbac <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey(Version_t version, uint8_t *input, KeyIdentifier_t rootKeyID,
                                                     KeyIdentifier_t targetKeyID)
{
 800dbac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dbae:	b08b      	sub	sp, #44	; 0x2c
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	60f8      	str	r0, [r7, #12]
 800dbb4:	60b9      	str	r1, [r7, #8]
 800dbb6:	0019      	movs	r1, r3
 800dbb8:	1dfb      	adds	r3, r7, #7
 800dbba:	701a      	strb	r2, [r3, #0]
 800dbbc:	1dbb      	adds	r3, r7, #6
 800dbbe:	1c0a      	adds	r2, r1, #0
 800dbc0:	701a      	strb	r2, [r3, #0]
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800dbc2:	2327      	movs	r3, #39	; 0x27
 800dbc4:	18fb      	adds	r3, r7, r3
 800dbc6:	2206      	movs	r2, #6
 800dbc8:	701a      	strb	r2, [r3, #0]
  if (input == NULL)
 800dbca:	68bb      	ldr	r3, [r7, #8]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d101      	bne.n	800dbd4 <SecureElementDeriveAndStoreKey+0x28>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800dbd0:	2302      	movs	r3, #2
 800dbd2:	e03c      	b.n	800dc4e <SecureElementDeriveAndStoreKey+0xa2>
  }

  /* In case of MC_KE_KEY, only McRootKey can be used as root key */
  if (targetKeyID == MC_KE_KEY)
 800dbd4:	1dbb      	adds	r3, r7, #6
 800dbd6:	781b      	ldrb	r3, [r3, #0]
 800dbd8:	2b7f      	cmp	r3, #127	; 0x7f
 800dbda:	d105      	bne.n	800dbe8 <SecureElementDeriveAndStoreKey+0x3c>
  {
    if (rootKeyID != MC_ROOT_KEY)
 800dbdc:	1dfb      	adds	r3, r7, #7
 800dbde:	781b      	ldrb	r3, [r3, #0]
 800dbe0:	2b04      	cmp	r3, #4
 800dbe2:	d001      	beq.n	800dbe8 <SecureElementDeriveAndStoreKey+0x3c>
    {
      return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800dbe4:	2303      	movs	r3, #3
 800dbe6:	e032      	b.n	800dc4e <SecureElementDeriveAndStoreKey+0xa2>
    }
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  uint8_t key[16] = { 0 };
 800dbe8:	2614      	movs	r6, #20
 800dbea:	19bb      	adds	r3, r7, r6
 800dbec:	2200      	movs	r2, #0
 800dbee:	601a      	str	r2, [r3, #0]
 800dbf0:	3304      	adds	r3, #4
 800dbf2:	220c      	movs	r2, #12
 800dbf4:	2100      	movs	r1, #0
 800dbf6:	0018      	movs	r0, r3
 800dbf8:	f010 f98f 	bl	801df1a <memset>
  /* Derive key */
  retval = SecureElementAesEncrypt(input, 16, rootKeyID, key);
 800dbfc:	2527      	movs	r5, #39	; 0x27
 800dbfe:	197c      	adds	r4, r7, r5
 800dc00:	19b9      	adds	r1, r7, r6
 800dc02:	1dfb      	adds	r3, r7, #7
 800dc04:	781a      	ldrb	r2, [r3, #0]
 800dc06:	68b8      	ldr	r0, [r7, #8]
 800dc08:	000b      	movs	r3, r1
 800dc0a:	2110      	movs	r1, #16
 800dc0c:	f7ff ff5d 	bl	800daca <SecureElementAesEncrypt>
 800dc10:	0003      	movs	r3, r0
 800dc12:	7023      	strb	r3, [r4, #0]
  if (retval != SECURE_ELEMENT_SUCCESS)
 800dc14:	197b      	adds	r3, r7, r5
 800dc16:	781b      	ldrb	r3, [r3, #0]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d002      	beq.n	800dc22 <SecureElementDeriveAndStoreKey+0x76>
  {
    return retval;
 800dc1c:	197b      	adds	r3, r7, r5
 800dc1e:	781b      	ldrb	r3, [r3, #0]
 800dc20:	e015      	b.n	800dc4e <SecureElementDeriveAndStoreKey+0xa2>
  }

  /* Store key */
  retval = SecureElementSetKey(targetKeyID, key);
 800dc22:	2527      	movs	r5, #39	; 0x27
 800dc24:	197c      	adds	r4, r7, r5
 800dc26:	2314      	movs	r3, #20
 800dc28:	18fa      	adds	r2, r7, r3
 800dc2a:	1dbb      	adds	r3, r7, #6
 800dc2c:	781b      	ldrb	r3, [r3, #0]
 800dc2e:	0011      	movs	r1, r2
 800dc30:	0018      	movs	r0, r3
 800dc32:	f7ff fe6d 	bl	800d910 <SecureElementSetKey>
 800dc36:	0003      	movs	r3, r0
 800dc38:	7023      	strb	r3, [r4, #0]
  if (retval != SECURE_ELEMENT_SUCCESS)
 800dc3a:	197b      	adds	r3, r7, r5
 800dc3c:	781b      	ldrb	r3, [r3, #0]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d002      	beq.n	800dc48 <SecureElementDeriveAndStoreKey+0x9c>
  {
    return retval;
 800dc42:	197b      	adds	r3, r7, r5
 800dc44:	781b      	ldrb	r3, [r3, #0]
 800dc46:	e002      	b.n	800dc4e <SecureElementDeriveAndStoreKey+0xa2>
  {
    retval = SECURE_ELEMENT_ERROR;
  }
#endif /* LORAWAN_KMS */

  return retval;
 800dc48:	2327      	movs	r3, #39	; 0x27
 800dc4a:	18fb      	adds	r3, r7, r3
 800dc4c:	781b      	ldrb	r3, [r3, #0]
}
 800dc4e:	0018      	movs	r0, r3
 800dc50:	46bd      	mov	sp, r7
 800dc52:	b00b      	add	sp, #44	; 0x2c
 800dc54:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dc56 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept(JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                     uint16_t devNonce, uint8_t *encJoinAccept,
                                                     uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                     uint8_t *versionMinor)
{
 800dc56:	b5b0      	push	{r4, r5, r7, lr}
 800dc58:	b086      	sub	sp, #24
 800dc5a:	af00      	add	r7, sp, #0
 800dc5c:	60b9      	str	r1, [r7, #8]
 800dc5e:	0011      	movs	r1, r2
 800dc60:	607b      	str	r3, [r7, #4]
 800dc62:	230f      	movs	r3, #15
 800dc64:	18fb      	adds	r3, r7, r3
 800dc66:	1c02      	adds	r2, r0, #0
 800dc68:	701a      	strb	r2, [r3, #0]
 800dc6a:	230c      	movs	r3, #12
 800dc6c:	18fb      	adds	r3, r7, r3
 800dc6e:	1c0a      	adds	r2, r1, #0
 800dc70:	801a      	strh	r2, [r3, #0]
  if ((encJoinAccept == NULL) || (decJoinAccept == NULL) || (versionMinor == NULL))
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d005      	beq.n	800dc84 <SecureElementProcessJoinAccept+0x2e>
 800dc78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d002      	beq.n	800dc84 <SecureElementProcessJoinAccept+0x2e>
 800dc7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d101      	bne.n	800dc88 <SecureElementProcessJoinAccept+0x32>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800dc84:	2302      	movs	r3, #2
 800dc86:	e069      	b.n	800dd5c <SecureElementProcessJoinAccept+0x106>
  }

  /* Check that frame size isn't bigger than a JoinAccept with CFList size */
  if (encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE)
 800dc88:	2328      	movs	r3, #40	; 0x28
 800dc8a:	18fb      	adds	r3, r7, r3
 800dc8c:	781b      	ldrb	r3, [r3, #0]
 800dc8e:	2b21      	cmp	r3, #33	; 0x21
 800dc90:	d901      	bls.n	800dc96 <SecureElementProcessJoinAccept+0x40>
  {
    return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800dc92:	2305      	movs	r3, #5
 800dc94:	e062      	b.n	800dd5c <SecureElementProcessJoinAccept+0x106>
  }

  /* Determine decryption key */
  KeyIdentifier_t encKeyID = NWK_KEY;
 800dc96:	2517      	movs	r5, #23
 800dc98:	197b      	adds	r3, r7, r5
 800dc9a:	2201      	movs	r2, #1
 800dc9c:	701a      	strb	r2, [r3, #0]
  {
    encKeyID = J_S_ENC_KEY;
  }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

  memcpy1(decJoinAccept, encJoinAccept, encJoinAcceptSize);
 800dc9e:	2428      	movs	r4, #40	; 0x28
 800dca0:	193b      	adds	r3, r7, r4
 800dca2:	781b      	ldrb	r3, [r3, #0]
 800dca4:	b29a      	uxth	r2, r3
 800dca6:	6879      	ldr	r1, [r7, #4]
 800dca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcaa:	0018      	movs	r0, r3
 800dcac:	f00b fc24 	bl	80194f8 <memcpy1>

  /* Decrypt JoinAccept, skip MHDR */
  if (SecureElementAesEncrypt(encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	1c58      	adds	r0, r3, #1
 800dcb4:	193b      	adds	r3, r7, r4
 800dcb6:	781b      	ldrb	r3, [r3, #0]
 800dcb8:	b29b      	uxth	r3, r3
 800dcba:	3b01      	subs	r3, #1
 800dcbc:	b299      	uxth	r1, r3
 800dcbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcc0:	1c5c      	adds	r4, r3, #1
 800dcc2:	197b      	adds	r3, r7, r5
 800dcc4:	781a      	ldrb	r2, [r3, #0]
 800dcc6:	0023      	movs	r3, r4
 800dcc8:	f7ff feff 	bl	800daca <SecureElementAesEncrypt>
 800dccc:	1e03      	subs	r3, r0, #0
 800dcce:	d001      	beq.n	800dcd4 <SecureElementProcessJoinAccept+0x7e>
                              encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE) != SECURE_ELEMENT_SUCCESS)
  {
    return SECURE_ELEMENT_FAIL_ENCRYPT;
 800dcd0:	2307      	movs	r3, #7
 800dcd2:	e043      	b.n	800dd5c <SecureElementProcessJoinAccept+0x106>
  }

  *versionMinor = ((decJoinAccept[11] & 0x80) == 0x80) ? 1 : 0;
 800dcd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcd6:	330b      	adds	r3, #11
 800dcd8:	781b      	ldrb	r3, [r3, #0]
 800dcda:	09db      	lsrs	r3, r3, #7
 800dcdc:	b2da      	uxtb	r2, r3
 800dcde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dce0:	701a      	strb	r2, [r3, #0]

  uint32_t mic = 0;
 800dce2:	2300      	movs	r3, #0
 800dce4:	613b      	str	r3, [r7, #16]

  mic = ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0);
 800dce6:	2128      	movs	r1, #40	; 0x28
 800dce8:	187b      	adds	r3, r7, r1
 800dcea:	781b      	ldrb	r3, [r3, #0]
 800dcec:	3b04      	subs	r3, #4
 800dcee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dcf0:	18d3      	adds	r3, r2, r3
 800dcf2:	781b      	ldrb	r3, [r3, #0]
 800dcf4:	613b      	str	r3, [r7, #16]
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8);
 800dcf6:	187b      	adds	r3, r7, r1
 800dcf8:	781b      	ldrb	r3, [r3, #0]
 800dcfa:	3b03      	subs	r3, #3
 800dcfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dcfe:	18d3      	adds	r3, r2, r3
 800dd00:	781b      	ldrb	r3, [r3, #0]
 800dd02:	021b      	lsls	r3, r3, #8
 800dd04:	693a      	ldr	r2, [r7, #16]
 800dd06:	4313      	orrs	r3, r2
 800dd08:	613b      	str	r3, [r7, #16]
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16);
 800dd0a:	187b      	adds	r3, r7, r1
 800dd0c:	781b      	ldrb	r3, [r3, #0]
 800dd0e:	3b02      	subs	r3, #2
 800dd10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd12:	18d3      	adds	r3, r2, r3
 800dd14:	781b      	ldrb	r3, [r3, #0]
 800dd16:	041b      	lsls	r3, r3, #16
 800dd18:	693a      	ldr	r2, [r7, #16]
 800dd1a:	4313      	orrs	r3, r2
 800dd1c:	613b      	str	r3, [r7, #16]
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24);
 800dd1e:	187b      	adds	r3, r7, r1
 800dd20:	781b      	ldrb	r3, [r3, #0]
 800dd22:	3b01      	subs	r3, #1
 800dd24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd26:	18d3      	adds	r3, r2, r3
 800dd28:	781b      	ldrb	r3, [r3, #0]
 800dd2a:	061b      	lsls	r3, r3, #24
 800dd2c:	693a      	ldr	r2, [r7, #16]
 800dd2e:	4313      	orrs	r3, r2
 800dd30:	613b      	str	r3, [r7, #16]
  /*  - Header buffer to be used for MIC computation
   *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
   *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)] */

  /* Verify mic */
  if (*versionMinor == 0)
 800dd32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd34:	781b      	ldrb	r3, [r3, #0]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d10d      	bne.n	800dd56 <SecureElementProcessJoinAccept+0x100>
  {
    /* For LoRaWAN 1.0.x
     *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
     *   CFListType) */
    if (SecureElementVerifyAesCmac(decJoinAccept, (encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE), mic, NWK_KEY) !=
 800dd3a:	187b      	adds	r3, r7, r1
 800dd3c:	781b      	ldrb	r3, [r3, #0]
 800dd3e:	b29b      	uxth	r3, r3
 800dd40:	3b04      	subs	r3, #4
 800dd42:	b299      	uxth	r1, r3
 800dd44:	693a      	ldr	r2, [r7, #16]
 800dd46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dd48:	2301      	movs	r3, #1
 800dd4a:	f7ff fe7c 	bl	800da46 <SecureElementVerifyAesCmac>
 800dd4e:	1e03      	subs	r3, r0, #0
 800dd50:	d003      	beq.n	800dd5a <SecureElementProcessJoinAccept+0x104>
        SECURE_ELEMENT_SUCCESS)
    {
      return SECURE_ELEMENT_FAIL_CMAC;
 800dd52:	2301      	movs	r3, #1
 800dd54:	e002      	b.n	800dd5c <SecureElementProcessJoinAccept+0x106>
    }
  }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
  else
  {
    return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800dd56:	2304      	movs	r3, #4
 800dd58:	e000      	b.n	800dd5c <SecureElementProcessJoinAccept+0x106>
  }

  return SECURE_ELEMENT_SUCCESS;
 800dd5a:	2300      	movs	r3, #0
}
 800dd5c:	0018      	movs	r0, r3
 800dd5e:	46bd      	mov	sp, r7
 800dd60:	b006      	add	sp, #24
 800dd62:	bdb0      	pop	{r4, r5, r7, pc}

0800dd64 <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber(uint32_t *randomNum)
{
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b082      	sub	sp, #8
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	6078      	str	r0, [r7, #4]
  if (randomNum == NULL)
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d101      	bne.n	800dd76 <SecureElementRandomNumber+0x12>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800dd72:	2302      	movs	r3, #2
 800dd74:	e006      	b.n	800dd84 <SecureElementRandomNumber+0x20>
  }
  *randomNum = Radio.Random( );
 800dd76:	4b05      	ldr	r3, [pc, #20]	; (800dd8c <SecureElementRandomNumber+0x28>)
 800dd78:	695b      	ldr	r3, [r3, #20]
 800dd7a:	4798      	blx	r3
 800dd7c:	0002      	movs	r2, r0
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	601a      	str	r2, [r3, #0]
  return SECURE_ELEMENT_SUCCESS;
 800dd82:	2300      	movs	r3, #0
}
 800dd84:	0018      	movs	r0, r3
 800dd86:	46bd      	mov	sp, r7
 800dd88:	b002      	add	sp, #8
 800dd8a:	bd80      	pop	{r7, pc}
 800dd8c:	0801fd54 	.word	0x0801fd54

0800dd90 <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui(uint8_t *devEui)
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b082      	sub	sp, #8
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
  if (devEui == NULL)
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d101      	bne.n	800dda2 <SecureElementSetDevEui+0x12>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800dd9e:	2302      	movs	r3, #2
 800dda0:	e009      	b.n	800ddb6 <SecureElementSetDevEui+0x26>
  }
  memcpy1(SeNvmCtx.DevEui, devEui, SE_EUI_SIZE);
 800dda2:	6879      	ldr	r1, [r7, #4]
 800dda4:	4b06      	ldr	r3, [pc, #24]	; (800ddc0 <SecureElementSetDevEui+0x30>)
 800dda6:	2208      	movs	r2, #8
 800dda8:	0018      	movs	r0, r3
 800ddaa:	f00b fba5 	bl	80194f8 <memcpy1>
  SeNvmCtxChanged();
 800ddae:	4b05      	ldr	r3, [pc, #20]	; (800ddc4 <SecureElementSetDevEui+0x34>)
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	4798      	blx	r3
  return SECURE_ELEMENT_SUCCESS;
 800ddb4:	2300      	movs	r3, #0
}
 800ddb6:	0018      	movs	r0, r3
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	b002      	add	sp, #8
 800ddbc:	bd80      	pop	{r7, pc}
 800ddbe:	46c0      	nop			; (mov r8, r8)
 800ddc0:	2000007c 	.word	0x2000007c
 800ddc4:	2000041c 	.word	0x2000041c

0800ddc8 <SecureElementGetDevEui>:

uint8_t *SecureElementGetDevEui(void)
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	af00      	add	r7, sp, #0
  return SeNvmCtx.DevEui;
 800ddcc:	4b01      	ldr	r3, [pc, #4]	; (800ddd4 <SecureElementGetDevEui+0xc>)
}
 800ddce:	0018      	movs	r0, r3
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	bd80      	pop	{r7, pc}
 800ddd4:	2000007c 	.word	0x2000007c

0800ddd8 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui(uint8_t *joinEui)
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b082      	sub	sp, #8
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
  if (joinEui == NULL)
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d101      	bne.n	800ddea <SecureElementSetJoinEui+0x12>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800dde6:	2302      	movs	r3, #2
 800dde8:	e009      	b.n	800ddfe <SecureElementSetJoinEui+0x26>
  }
  memcpy1(SeNvmCtx.JoinEui, joinEui, SE_EUI_SIZE);
 800ddea:	6879      	ldr	r1, [r7, #4]
 800ddec:	4b06      	ldr	r3, [pc, #24]	; (800de08 <SecureElementSetJoinEui+0x30>)
 800ddee:	2208      	movs	r2, #8
 800ddf0:	0018      	movs	r0, r3
 800ddf2:	f00b fb81 	bl	80194f8 <memcpy1>
  SeNvmCtxChanged();
 800ddf6:	4b05      	ldr	r3, [pc, #20]	; (800de0c <SecureElementSetJoinEui+0x34>)
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	4798      	blx	r3
  return SECURE_ELEMENT_SUCCESS;
 800ddfc:	2300      	movs	r3, #0
}
 800ddfe:	0018      	movs	r0, r3
 800de00:	46bd      	mov	sp, r7
 800de02:	b002      	add	sp, #8
 800de04:	bd80      	pop	{r7, pc}
 800de06:	46c0      	nop			; (mov r8, r8)
 800de08:	20000084 	.word	0x20000084
 800de0c:	2000041c 	.word	0x2000041c

0800de10 <SecureElementGetJoinEui>:

uint8_t *SecureElementGetJoinEui(void)
{
 800de10:	b580      	push	{r7, lr}
 800de12:	af00      	add	r7, sp, #0
  return SeNvmCtx.JoinEui;
 800de14:	4b01      	ldr	r3, [pc, #4]	; (800de1c <SecureElementGetJoinEui+0xc>)
}
 800de16:	0018      	movs	r0, r3
 800de18:	46bd      	mov	sp, r7
 800de1a:	bd80      	pop	{r7, pc}
 800de1c:	20000084 	.word	0x20000084

0800de20 <LmHandlerInit>:

static bool CtxRestoreDone = false;

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit(LmHandlerCallbacks_t *handlerCallbacks)
{
 800de20:	b580      	push	{r7, lr}
 800de22:	b082      	sub	sp, #8
 800de24:	af00      	add	r7, sp, #0
 800de26:	6078      	str	r0, [r7, #4]
  UTIL_MEM_cpy_8((void *)&LmHandlerCallbacks, (const void *)handlerCallbacks, sizeof(LmHandlerCallbacks_t));
 800de28:	6879      	ldr	r1, [r7, #4]
 800de2a:	4b17      	ldr	r3, [pc, #92]	; (800de88 <LmHandlerInit+0x68>)
 800de2c:	2220      	movs	r2, #32
 800de2e:	0018      	movs	r0, r3
 800de30:	f00e fb56 	bl	801c4e0 <UTIL_MEM_cpy_8>

  LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800de34:	4b15      	ldr	r3, [pc, #84]	; (800de8c <LmHandlerInit+0x6c>)
 800de36:	4a16      	ldr	r2, [pc, #88]	; (800de90 <LmHandlerInit+0x70>)
 800de38:	601a      	str	r2, [r3, #0]
  LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800de3a:	4b14      	ldr	r3, [pc, #80]	; (800de8c <LmHandlerInit+0x6c>)
 800de3c:	4a15      	ldr	r2, [pc, #84]	; (800de94 <LmHandlerInit+0x74>)
 800de3e:	605a      	str	r2, [r3, #4]
  LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800de40:	4b12      	ldr	r3, [pc, #72]	; (800de8c <LmHandlerInit+0x6c>)
 800de42:	4a15      	ldr	r2, [pc, #84]	; (800de98 <LmHandlerInit+0x78>)
 800de44:	609a      	str	r2, [r3, #8]
  LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800de46:	4b11      	ldr	r3, [pc, #68]	; (800de8c <LmHandlerInit+0x6c>)
 800de48:	4a14      	ldr	r2, [pc, #80]	; (800de9c <LmHandlerInit+0x7c>)
 800de4a:	60da      	str	r2, [r3, #12]
  LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks.GetBatteryLevel;
 800de4c:	4b0e      	ldr	r3, [pc, #56]	; (800de88 <LmHandlerInit+0x68>)
 800de4e:	681a      	ldr	r2, [r3, #0]
 800de50:	4b13      	ldr	r3, [pc, #76]	; (800dea0 <LmHandlerInit+0x80>)
 800de52:	601a      	str	r2, [r3, #0]
  LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks.GetTemperature;
 800de54:	4b0c      	ldr	r3, [pc, #48]	; (800de88 <LmHandlerInit+0x68>)
 800de56:	685a      	ldr	r2, [r3, #4]
 800de58:	4b11      	ldr	r3, [pc, #68]	; (800dea0 <LmHandlerInit+0x80>)
 800de5a:	605a      	str	r2, [r3, #4]
  LoRaMacCallbacks.NvmContextChange = NvmCtxMgmtEvent;
 800de5c:	4b10      	ldr	r3, [pc, #64]	; (800dea0 <LmHandlerInit+0x80>)
 800de5e:	4a11      	ldr	r2, [pc, #68]	; (800dea4 <LmHandlerInit+0x84>)
 800de60:	609a      	str	r2, [r3, #8]
  LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks.OnMacProcess;
 800de62:	4b09      	ldr	r3, [pc, #36]	; (800de88 <LmHandlerInit+0x68>)
 800de64:	689a      	ldr	r2, [r3, #8]
 800de66:	4b0e      	ldr	r3, [pc, #56]	; (800dea0 <LmHandlerInit+0x80>)
 800de68:	60da      	str	r2, [r3, #12]
  //SX1276SetSleep( ); // new
  /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
  if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800de6a:	4b0f      	ldr	r3, [pc, #60]	; (800dea8 <LmHandlerInit+0x88>)
 800de6c:	0019      	movs	r1, r3
 800de6e:	2000      	movs	r0, #0
 800de70:	f000 fb18 	bl	800e4a4 <LmHandlerPackageRegister>
 800de74:	1e03      	subs	r3, r0, #0
 800de76:	d002      	beq.n	800de7e <LmHandlerInit+0x5e>
  {
    return LORAMAC_HANDLER_ERROR;
 800de78:	2301      	movs	r3, #1
 800de7a:	425b      	negs	r3, r3
 800de7c:	e000      	b.n	800de80 <LmHandlerInit+0x60>
  if (LmhpDataDistributionInit() != LORAMAC_HANDLER_SUCCESS)
  {
    return LORAMAC_HANDLER_ERROR;
  }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
  return LORAMAC_HANDLER_SUCCESS;
 800de7e:	2300      	movs	r3, #0
}
 800de80:	0018      	movs	r0, r3
 800de82:	46bd      	mov	sp, r7
 800de84:	b002      	add	sp, #8
 800de86:	bd80      	pop	{r7, pc}
 800de88:	2000043c 	.word	0x2000043c
 800de8c:	2000045c 	.word	0x2000045c
 800de90:	0800e611 	.word	0x0800e611
 800de94:	0800e67d 	.word	0x0800e67d
 800de98:	0800e769 	.word	0x0800e769
 800de9c:	0800e811 	.word	0x0800e811
 800dea0:	2000046c 	.word	0x2000046c
 800dea4:	0800efaf 	.word	0x0800efaf
 800dea8:	20000150 	.word	0x20000150

0800deac <LmHandlerConfigure>:

LmHandlerErrorStatus_t LmHandlerConfigure(LmHandlerParams_t *handlerParams)
{
 800deac:	b590      	push	{r4, r7, lr}
 800deae:	b091      	sub	sp, #68	; 0x44
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]
  MibRequestConfirm_t mibReq;
  LoraInfo_t *loraInfo;

  UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800deb4:	6879      	ldr	r1, [r7, #4]
 800deb6:	4b50      	ldr	r3, [pc, #320]	; (800dff8 <LmHandlerConfigure+0x14c>)
 800deb8:	2206      	movs	r2, #6
 800deba:	0018      	movs	r0, r3
 800debc:	f00e fb10 	bl	801c4e0 <UTIL_MEM_cpy_8>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
  IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

  loraInfo = LoraInfo_GetPtr();
 800dec0:	f7f5 f9de 	bl	8003280 <LoraInfo_GetPtr>
 800dec4:	0003      	movs	r3, r0
 800dec6:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (0U != ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800dec8:	4b4b      	ldr	r3, [pc, #300]	; (800dff8 <LmHandlerConfigure+0x14c>)
 800deca:	781b      	ldrb	r3, [r3, #0]
 800decc:	001a      	movs	r2, r3
 800dece:	2301      	movs	r3, #1
 800ded0:	4093      	lsls	r3, r2
 800ded2:	001a      	movs	r2, r3
 800ded4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ded6:	685b      	ldr	r3, [r3, #4]
 800ded8:	4013      	ands	r3, r2
 800deda:	d00b      	beq.n	800def4 <LmHandlerConfigure+0x48>
  {
    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800dedc:	4b46      	ldr	r3, [pc, #280]	; (800dff8 <LmHandlerConfigure+0x14c>)
 800dede:	781a      	ldrb	r2, [r3, #0]
 800dee0:	4946      	ldr	r1, [pc, #280]	; (800dffc <LmHandlerConfigure+0x150>)
 800dee2:	4b47      	ldr	r3, [pc, #284]	; (800e000 <LmHandlerConfigure+0x154>)
 800dee4:	0018      	movs	r0, r3
 800dee6:	f004 ff87 	bl	8012df8 <LoRaMacInitialization>
 800deea:	1e03      	subs	r3, r0, #0
 800deec:	d009      	beq.n	800df02 <LmHandlerConfigure+0x56>
    {
      return LORAMAC_HANDLER_ERROR;
 800deee:	2301      	movs	r3, #1
 800def0:	425b      	negs	r3, r3
 800def2:	e07d      	b.n	800dff0 <LmHandlerConfigure+0x144>
    }
  }
  else
  {
    MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800def4:	4b43      	ldr	r3, [pc, #268]	; (800e004 <LmHandlerConfigure+0x158>)
 800def6:	2201      	movs	r2, #1
 800def8:	2100      	movs	r1, #0
 800defa:	2000      	movs	r0, #0
 800defc:	f00d ff70 	bl	801bde0 <UTIL_ADV_TRACE_COND_FSend>
    while (1) {}  /* error: Region is not defined in the MW */
 800df00:	e7fe      	b.n	800df00 <LmHandlerConfigure+0x54>
  }

  /* Try to restore from NVM and query the mac if possible. */
  if (NvmCtxMgmtRestore() == NVMCTXMGMT_STATUS_SUCCESS)
 800df02:	f001 f864 	bl	800efce <NvmCtxMgmtRestore>
 800df06:	1e03      	subs	r3, r0, #0
 800df08:	d103      	bne.n	800df12 <LmHandlerConfigure+0x66>
  {
    CtxRestoreDone = true;
 800df0a:	4b3f      	ldr	r3, [pc, #252]	; (800e008 <LmHandlerConfigure+0x15c>)
 800df0c:	2201      	movs	r2, #1
 800df0e:	701a      	strb	r2, [r3, #0]
 800df10:	e021      	b.n	800df56 <LmHandlerConfigure+0xaa>
  }
  else
  {
    CtxRestoreDone = false;
 800df12:	4b3d      	ldr	r3, [pc, #244]	; (800e008 <LmHandlerConfigure+0x15c>)
 800df14:	2200      	movs	r2, #0
 800df16:	701a      	strb	r2, [r3, #0]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    SecureElementSetObjHandler(SLOT_RAND_ZERO_KEY, KMS_ZERO_KEY_OBJECT_HANDLE);
#endif /* LORAMAC_CLASSB_ENABLED */
#endif /* LORAWAN_KMS == 1 */
    /* Read secure-element DEV_EUI and JOIN_EUI values. */
    mibReq.Type = MIB_DEV_EUI;
 800df18:	2418      	movs	r4, #24
 800df1a:	193b      	adds	r3, r7, r4
 800df1c:	2202      	movs	r2, #2
 800df1e:	701a      	strb	r2, [r3, #0]
    LoRaMacMibGetRequestConfirm(&mibReq);
 800df20:	193b      	adds	r3, r7, r4
 800df22:	0018      	movs	r0, r3
 800df24:	f005 fbca 	bl	80136bc <LoRaMacMibGetRequestConfirm>
    memcpy1(CommissioningParams.DevEui, mibReq.Param.DevEui, 8);
 800df28:	193b      	adds	r3, r7, r4
 800df2a:	6859      	ldr	r1, [r3, #4]
 800df2c:	4b37      	ldr	r3, [pc, #220]	; (800e00c <LmHandlerConfigure+0x160>)
 800df2e:	2208      	movs	r2, #8
 800df30:	0018      	movs	r0, r3
 800df32:	f00b fae1 	bl	80194f8 <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800df36:	0021      	movs	r1, r4
 800df38:	187b      	adds	r3, r7, r1
 800df3a:	2203      	movs	r2, #3
 800df3c:	701a      	strb	r2, [r3, #0]
    LoRaMacMibGetRequestConfirm(&mibReq);
 800df3e:	000c      	movs	r4, r1
 800df40:	187b      	adds	r3, r7, r1
 800df42:	0018      	movs	r0, r3
 800df44:	f005 fbba 	bl	80136bc <LoRaMacMibGetRequestConfirm>
    memcpy1(CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8);
 800df48:	193b      	adds	r3, r7, r4
 800df4a:	6859      	ldr	r1, [r3, #4]
 800df4c:	4b30      	ldr	r3, [pc, #192]	; (800e010 <LmHandlerConfigure+0x164>)
 800df4e:	2208      	movs	r2, #8
 800df50:	0018      	movs	r0, r3
 800df52:	f00b fad1 	bl	80194f8 <memcpy1>
  //DevVVEUI = ACTIVATION_TYPE_OTAA;
#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
  MW_LOG(TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

  mibReq.Type = MIB_PUBLIC_NETWORK;
 800df56:	2118      	movs	r1, #24
 800df58:	187b      	adds	r3, r7, r1
 800df5a:	220f      	movs	r2, #15
 800df5c:	701a      	strb	r2, [r3, #0]
  mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800df5e:	187b      	adds	r3, r7, r1
 800df60:	2201      	movs	r2, #1
 800df62:	711a      	strb	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 800df64:	000c      	movs	r4, r1
 800df66:	187b      	adds	r3, r7, r1
 800df68:	0018      	movs	r0, r3
 800df6a:	f005 fd05 	bl	8013978 <LoRaMacMibSetRequestConfirm>

  mibReq.Type = MIB_REPEATER_SUPPORT;
 800df6e:	0021      	movs	r1, r4
 800df70:	187b      	adds	r3, r7, r1
 800df72:	2210      	movs	r2, #16
 800df74:	701a      	strb	r2, [r3, #0]
  mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800df76:	187b      	adds	r3, r7, r1
 800df78:	2200      	movs	r2, #0
 800df7a:	711a      	strb	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 800df7c:	000c      	movs	r4, r1
 800df7e:	187b      	adds	r3, r7, r1
 800df80:	0018      	movs	r0, r3
 800df82:	f005 fcf9 	bl	8013978 <LoRaMacMibSetRequestConfirm>

  mibReq.Type = MIB_ADR;
 800df86:	0021      	movs	r1, r4
 800df88:	187b      	adds	r3, r7, r1
 800df8a:	2204      	movs	r2, #4
 800df8c:	701a      	strb	r2, [r3, #0]
  mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800df8e:	4b1a      	ldr	r3, [pc, #104]	; (800dff8 <LmHandlerConfigure+0x14c>)
 800df90:	789a      	ldrb	r2, [r3, #2]
 800df92:	187b      	adds	r3, r7, r1
 800df94:	711a      	strb	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 800df96:	000c      	movs	r4, r1
 800df98:	187b      	adds	r3, r7, r1
 800df9a:	0018      	movs	r0, r3
 800df9c:	f005 fcec 	bl	8013978 <LoRaMacMibSetRequestConfirm>

  mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800dfa0:	0021      	movs	r1, r4
 800dfa2:	187b      	adds	r3, r7, r1
 800dfa4:	2222      	movs	r2, #34	; 0x22
 800dfa6:	701a      	strb	r2, [r3, #0]
  mibReq.Param.SystemMaxRxError = 20;
 800dfa8:	187b      	adds	r3, r7, r1
 800dfaa:	2214      	movs	r2, #20
 800dfac:	605a      	str	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 800dfae:	187b      	adds	r3, r7, r1
 800dfb0:	0018      	movs	r0, r3
 800dfb2:	f005 fce1 	bl	8013978 <LoRaMacMibSetRequestConfirm>

  GetPhyParams_t getPhy;
  PhyParam_t phyParam;
  getPhy.Attribute = PHY_DUTY_CYCLE;
 800dfb6:	2110      	movs	r1, #16
 800dfb8:	187b      	adds	r3, r7, r1
 800dfba:	220f      	movs	r2, #15
 800dfbc:	701a      	strb	r2, [r3, #0]
  phyParam = RegionGetPhyParam(LmHandlerParams.ActiveRegion, &getPhy);
 800dfbe:	4b0e      	ldr	r3, [pc, #56]	; (800dff8 <LmHandlerConfigure+0x14c>)
 800dfc0:	781b      	ldrb	r3, [r3, #0]
 800dfc2:	187a      	adds	r2, r7, r1
 800dfc4:	0011      	movs	r1, r2
 800dfc6:	0018      	movs	r0, r3
 800dfc8:	f008 fe17 	bl	8016bfa <RegionGetPhyParam>
 800dfcc:	0003      	movs	r3, r0
 800dfce:	001a      	movs	r2, r3
 800dfd0:	210c      	movs	r1, #12
 800dfd2:	187b      	adds	r3, r7, r1
 800dfd4:	601a      	str	r2, [r3, #0]
  LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800dfd6:	187b      	adds	r3, r7, r1
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	1e5a      	subs	r2, r3, #1
 800dfdc:	4193      	sbcs	r3, r2
 800dfde:	b2da      	uxtb	r2, r3
 800dfe0:	4b05      	ldr	r3, [pc, #20]	; (800dff8 <LmHandlerConfigure+0x14c>)
 800dfe2:	711a      	strb	r2, [r3, #4]

  /* override previous value if reconfigure new region */
  LoRaMacTestSetDutyCycleOn(LmHandlerParams.DutyCycleEnabled);
 800dfe4:	4b04      	ldr	r3, [pc, #16]	; (800dff8 <LmHandlerConfigure+0x14c>)
 800dfe6:	791b      	ldrb	r3, [r3, #4]
 800dfe8:	0018      	movs	r0, r3
 800dfea:	f006 faf1 	bl	80145d0 <LoRaMacTestSetDutyCycleOn>

  return LORAMAC_HANDLER_SUCCESS;
 800dfee:	2300      	movs	r3, #0
}
 800dff0:	0018      	movs	r0, r3
 800dff2:	46bd      	mov	sp, r7
 800dff4:	b011      	add	sp, #68	; 0x44
 800dff6:	bd90      	pop	{r4, r7, pc}
 800dff8:	20000434 	.word	0x20000434
 800dffc:	2000046c 	.word	0x2000046c
 800e000:	2000045c 	.word	0x2000045c
 800e004:	0801f79c 	.word	0x0801f79c
 800e008:	20000586 	.word	0x20000586
 800e00c:	20000138 	.word	0x20000138
 800e010:	20000140 	.word	0x20000140

0800e014 <LmHandlerProcess>:
  }
  return false;
}

void LmHandlerProcess(void)
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b082      	sub	sp, #8
 800e018:	af00      	add	r7, sp, #0
  /* Call at first the LoRaMAC process before to run all package process features */
  /* Processes the LoRaMac events */
  LoRaMacProcess();
 800e01a:	f004 fea7 	bl	8012d6c <LoRaMacProcess>

  /* Call all packages process functions */
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 800e01e:	1dfb      	adds	r3, r7, #7
 800e020:	2200      	movs	r2, #0
 800e022:	701a      	strb	r2, [r3, #0]
 800e024:	e027      	b.n	800e076 <LmHandlerProcess+0x62>
  {
    if ((LmHandlerPackages[i] != NULL) &&
 800e026:	1dfb      	adds	r3, r7, #7
 800e028:	2200      	movs	r2, #0
 800e02a:	569a      	ldrsb	r2, [r3, r2]
 800e02c:	4b17      	ldr	r3, [pc, #92]	; (800e08c <LmHandlerProcess+0x78>)
 800e02e:	0092      	lsls	r2, r2, #2
 800e030:	58d3      	ldr	r3, [r2, r3]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d017      	beq.n	800e066 <LmHandlerProcess+0x52>
        (LmHandlerPackages[i]->Process != NULL) &&
 800e036:	1dfb      	adds	r3, r7, #7
 800e038:	2200      	movs	r2, #0
 800e03a:	569a      	ldrsb	r2, [r3, r2]
 800e03c:	4b13      	ldr	r3, [pc, #76]	; (800e08c <LmHandlerProcess+0x78>)
 800e03e:	0092      	lsls	r2, r2, #2
 800e040:	58d3      	ldr	r3, [r2, r3]
 800e042:	691b      	ldr	r3, [r3, #16]
    if ((LmHandlerPackages[i] != NULL) &&
 800e044:	2b00      	cmp	r3, #0
 800e046:	d00e      	beq.n	800e066 <LmHandlerProcess+0x52>
        (LmHandlerPackageIsInitialized(i) != false))
 800e048:	1dfb      	adds	r3, r7, #7
 800e04a:	781b      	ldrb	r3, [r3, #0]
 800e04c:	0018      	movs	r0, r3
 800e04e:	f000 fbf1 	bl	800e834 <LmHandlerPackageIsInitialized>
 800e052:	1e03      	subs	r3, r0, #0
        (LmHandlerPackages[i]->Process != NULL) &&
 800e054:	d007      	beq.n	800e066 <LmHandlerProcess+0x52>
    {
      LmHandlerPackages[i]->Process();
 800e056:	1dfb      	adds	r3, r7, #7
 800e058:	2200      	movs	r2, #0
 800e05a:	569a      	ldrsb	r2, [r3, r2]
 800e05c:	4b0b      	ldr	r3, [pc, #44]	; (800e08c <LmHandlerProcess+0x78>)
 800e05e:	0092      	lsls	r2, r2, #2
 800e060:	58d3      	ldr	r3, [r2, r3]
 800e062:	691b      	ldr	r3, [r3, #16]
 800e064:	4798      	blx	r3
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 800e066:	1dfb      	adds	r3, r7, #7
 800e068:	781b      	ldrb	r3, [r3, #0]
 800e06a:	b25b      	sxtb	r3, r3
 800e06c:	b2db      	uxtb	r3, r3
 800e06e:	3301      	adds	r3, #1
 800e070:	b2da      	uxtb	r2, r3
 800e072:	1dfb      	adds	r3, r7, #7
 800e074:	701a      	strb	r2, [r3, #0]
 800e076:	1dfb      	adds	r3, r7, #7
 800e078:	781b      	ldrb	r3, [r3, #0]
 800e07a:	b25b      	sxtb	r3, r3
 800e07c:	2b04      	cmp	r3, #4
 800e07e:	ddd2      	ble.n	800e026 <LmHandlerProcess+0x12>
    }
  }

  NvmCtxMgmtStore();
 800e080:	f000 ff9f 	bl	800efc2 <NvmCtxMgmtStore>
}
 800e084:	46c0      	nop			; (mov r8, r8)
 800e086:	46bd      	mov	sp, r7
 800e088:	b002      	add	sp, #8
 800e08a:	bd80      	pop	{r7, pc}
 800e08c:	20000420 	.word	0x20000420

0800e090 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus(void)
{
 800e090:	b5b0      	push	{r4, r5, r7, lr}
 800e092:	b08a      	sub	sp, #40	; 0x28
 800e094:	af00      	add	r7, sp, #0
  MibRequestConfirm_t mibReq;
  LoRaMacStatus_t status;

  mibReq.Type = MIB_NETWORK_ACTIVATION;
 800e096:	003b      	movs	r3, r7
 800e098:	2201      	movs	r2, #1
 800e09a:	701a      	strb	r2, [r3, #0]
  status = LoRaMacMibGetRequestConfirm(&mibReq);
 800e09c:	2527      	movs	r5, #39	; 0x27
 800e09e:	197c      	adds	r4, r7, r5
 800e0a0:	003b      	movs	r3, r7
 800e0a2:	0018      	movs	r0, r3
 800e0a4:	f005 fb0a 	bl	80136bc <LoRaMacMibGetRequestConfirm>
 800e0a8:	0003      	movs	r3, r0
 800e0aa:	7023      	strb	r3, [r4, #0]

  if (status == LORAMAC_STATUS_OK)
 800e0ac:	197b      	adds	r3, r7, r5
 800e0ae:	781b      	ldrb	r3, [r3, #0]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d107      	bne.n	800e0c4 <LmHandlerJoinStatus+0x34>
  {
    if (mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE)
 800e0b4:	003b      	movs	r3, r7
 800e0b6:	791b      	ldrb	r3, [r3, #4]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d101      	bne.n	800e0c0 <LmHandlerJoinStatus+0x30>
    {
      return LORAMAC_HANDLER_RESET;
 800e0bc:	2300      	movs	r3, #0
 800e0be:	e002      	b.n	800e0c6 <LmHandlerJoinStatus+0x36>
    }
    else
    {
      return LORAMAC_HANDLER_SET;
 800e0c0:	2301      	movs	r3, #1
 800e0c2:	e000      	b.n	800e0c6 <LmHandlerJoinStatus+0x36>
    }
  }
  else
  {
    return LORAMAC_HANDLER_RESET;
 800e0c4:	2300      	movs	r3, #0
  }
}
 800e0c6:	0018      	movs	r0, r3
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	b00a      	add	sp, #40	; 0x28
 800e0cc:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800e0d0 <LmHandlerJoin>:

void LmHandlerJoin(ActivationType_t mode)
{
 800e0d0:	b590      	push	{r4, r7, lr}
 800e0d2:	b093      	sub	sp, #76	; 0x4c
 800e0d4:	af02      	add	r7, sp, #8
 800e0d6:	0002      	movs	r2, r0
 800e0d8:	1dfb      	adds	r3, r7, #7
 800e0da:	701a      	strb	r2, [r3, #0]
  }
#endif /* ACTIVATION_BY_PERSONALISATION */
  SecureElementDeleteDerivedKeys(NULL);
#endif /* LORAWAN_KMS */

  if (mode == ACTIVATION_TYPE_OTAA)
 800e0dc:	1dfb      	adds	r3, r7, #7
 800e0de:	781b      	ldrb	r3, [r3, #0]
 800e0e0:	2b02      	cmp	r3, #2
 800e0e2:	d113      	bne.n	800e10c <LmHandlerJoin+0x3c>
  {
    MlmeReq_t mlmeReq;
    JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800e0e4:	4b37      	ldr	r3, [pc, #220]	; (800e1c4 <LmHandlerJoin+0xf4>)
 800e0e6:	2202      	movs	r2, #2
 800e0e8:	709a      	strb	r2, [r3, #2]

    LoRaMacStart();
 800e0ea:	f005 fa2d 	bl	8013548 <LoRaMacStart>

    /* Starts the OTAA join procedure */
    mlmeReq.Type = MLME_JOIN;
 800e0ee:	2108      	movs	r1, #8
 800e0f0:	187b      	adds	r3, r7, r1
 800e0f2:	2201      	movs	r2, #1
 800e0f4:	701a      	strb	r2, [r3, #0]
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800e0f6:	4b34      	ldr	r3, [pc, #208]	; (800e1c8 <LmHandlerJoin+0xf8>)
 800e0f8:	78db      	ldrb	r3, [r3, #3]
 800e0fa:	b25b      	sxtb	r3, r3
 800e0fc:	b2da      	uxtb	r2, r3
 800e0fe:	187b      	adds	r3, r7, r1
 800e100:	711a      	strb	r2, [r3, #4]
    LoRaMacMlmeRequest(&mlmeReq);
 800e102:	187b      	adds	r3, r7, r1
 800e104:	0018      	movs	r0, r3
 800e106:	f005 ffbd 	bl	8014084 <LoRaMacMlmeRequest>
    LoRaMacMibSetRequestConfirm(&mibReq);

    LmHandlerCallbacks.OnJoinRequest(&JoinParams);
    LmHandlerRequestClass(LmHandlerParams.DefaultClass);
  }
}
 800e10a:	e057      	b.n	800e1bc <LmHandlerJoin+0xec>
    JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800e10c:	4b2d      	ldr	r3, [pc, #180]	; (800e1c4 <LmHandlerJoin+0xf4>)
 800e10e:	2201      	movs	r2, #1
 800e110:	709a      	strb	r2, [r3, #2]
    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800e112:	4b2c      	ldr	r3, [pc, #176]	; (800e1c4 <LmHandlerJoin+0xf4>)
 800e114:	2200      	movs	r2, #0
 800e116:	705a      	strb	r2, [r3, #1]
    if (CtxRestoreDone == false)
 800e118:	4b2c      	ldr	r3, [pc, #176]	; (800e1cc <LmHandlerJoin+0xfc>)
 800e11a:	781b      	ldrb	r3, [r3, #0]
 800e11c:	2201      	movs	r2, #1
 800e11e:	4053      	eors	r3, r2
 800e120:	b2db      	uxtb	r3, r3
 800e122:	2b00      	cmp	r3, #0
 800e124:	d033      	beq.n	800e18e <LmHandlerJoin+0xbe>
      mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800e126:	211c      	movs	r1, #28
 800e128:	187b      	adds	r3, r7, r1
 800e12a:	2227      	movs	r2, #39	; 0x27
 800e12c:	701a      	strb	r2, [r3, #0]
      mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800e12e:	187b      	adds	r3, r7, r1
 800e130:	4a27      	ldr	r2, [pc, #156]	; (800e1d0 <LmHandlerJoin+0x100>)
 800e132:	605a      	str	r2, [r3, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 800e134:	000c      	movs	r4, r1
 800e136:	187b      	adds	r3, r7, r1
 800e138:	0018      	movs	r0, r3
 800e13a:	f005 fc1d 	bl	8013978 <LoRaMacMibSetRequestConfirm>
      mibReq.Type = MIB_NET_ID;
 800e13e:	0021      	movs	r1, r4
 800e140:	187b      	adds	r3, r7, r1
 800e142:	2205      	movs	r2, #5
 800e144:	701a      	strb	r2, [r3, #0]
      mibReq.Param.NetID = CommissioningParams.NetworkId;
 800e146:	4b23      	ldr	r3, [pc, #140]	; (800e1d4 <LmHandlerJoin+0x104>)
 800e148:	691a      	ldr	r2, [r3, #16]
 800e14a:	187b      	adds	r3, r7, r1
 800e14c:	605a      	str	r2, [r3, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 800e14e:	000c      	movs	r4, r1
 800e150:	187b      	adds	r3, r7, r1
 800e152:	0018      	movs	r0, r3
 800e154:	f005 fc10 	bl	8013978 <LoRaMacMibSetRequestConfirm>
      CommissioningParams.DevAddr = GetDevAddr();
 800e158:	f7f6 fd42 	bl	8004be0 <GetDevAddr>
 800e15c:	0002      	movs	r2, r0
 800e15e:	4b1d      	ldr	r3, [pc, #116]	; (800e1d4 <LmHandlerJoin+0x104>)
 800e160:	615a      	str	r2, [r3, #20]
      mibReq.Type = MIB_DEV_ADDR;
 800e162:	0021      	movs	r1, r4
 800e164:	187b      	adds	r3, r7, r1
 800e166:	2206      	movs	r2, #6
 800e168:	701a      	strb	r2, [r3, #0]
      mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800e16a:	4b1a      	ldr	r3, [pc, #104]	; (800e1d4 <LmHandlerJoin+0x104>)
 800e16c:	695a      	ldr	r2, [r3, #20]
 800e16e:	187b      	adds	r3, r7, r1
 800e170:	605a      	str	r2, [r3, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 800e172:	187b      	adds	r3, r7, r1
 800e174:	0018      	movs	r0, r3
 800e176:	f005 fbff 	bl	8013978 <LoRaMacMibSetRequestConfirm>
      MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr:   %08X\r\n", CommissioningParams.DevAddr);
 800e17a:	4b16      	ldr	r3, [pc, #88]	; (800e1d4 <LmHandlerJoin+0x104>)
 800e17c:	695b      	ldr	r3, [r3, #20]
 800e17e:	4a16      	ldr	r2, [pc, #88]	; (800e1d8 <LmHandlerJoin+0x108>)
 800e180:	9300      	str	r3, [sp, #0]
 800e182:	0013      	movs	r3, r2
 800e184:	2200      	movs	r2, #0
 800e186:	2100      	movs	r1, #0
 800e188:	2002      	movs	r0, #2
 800e18a:	f00d fe29 	bl	801bde0 <UTIL_ADV_TRACE_COND_FSend>
    LoRaMacStart();
 800e18e:	f005 f9db 	bl	8013548 <LoRaMacStart>
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800e192:	211c      	movs	r1, #28
 800e194:	187b      	adds	r3, r7, r1
 800e196:	2201      	movs	r2, #1
 800e198:	701a      	strb	r2, [r3, #0]
    mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800e19a:	187b      	adds	r3, r7, r1
 800e19c:	2201      	movs	r2, #1
 800e19e:	711a      	strb	r2, [r3, #4]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800e1a0:	187b      	adds	r3, r7, r1
 800e1a2:	0018      	movs	r0, r3
 800e1a4:	f005 fbe8 	bl	8013978 <LoRaMacMibSetRequestConfirm>
    LmHandlerCallbacks.OnJoinRequest(&JoinParams);
 800e1a8:	4b0c      	ldr	r3, [pc, #48]	; (800e1dc <LmHandlerJoin+0x10c>)
 800e1aa:	68db      	ldr	r3, [r3, #12]
 800e1ac:	4a05      	ldr	r2, [pc, #20]	; (800e1c4 <LmHandlerJoin+0xf4>)
 800e1ae:	0010      	movs	r0, r2
 800e1b0:	4798      	blx	r3
    LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800e1b2:	4b05      	ldr	r3, [pc, #20]	; (800e1c8 <LmHandlerJoin+0xf8>)
 800e1b4:	785b      	ldrb	r3, [r3, #1]
 800e1b6:	0018      	movs	r0, r3
 800e1b8:	f000 f8e4 	bl	800e384 <LmHandlerRequestClass>
}
 800e1bc:	46c0      	nop			; (mov r8, r8)
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	b011      	add	sp, #68	; 0x44
 800e1c2:	bd90      	pop	{r4, r7, pc}
 800e1c4:	2000015c 	.word	0x2000015c
 800e1c8:	20000434 	.word	0x20000434
 800e1cc:	20000586 	.word	0x20000586
 800e1d0:	01000300 	.word	0x01000300
 800e1d4:	20000138 	.word	0x20000138
 800e1d8:	0801f7e8 	.word	0x0801f7e8
 800e1dc:	2000043c 	.word	0x2000043c

0800e1e0 <LmHandlerSend>:
  }
}

LmHandlerErrorStatus_t LmHandlerSend(LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                     TimerTime_t *nextTxIn, bool allowDelayedTx)
{
 800e1e0:	b5b0      	push	{r4, r5, r7, lr}
 800e1e2:	b08c      	sub	sp, #48	; 0x30
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	60f8      	str	r0, [r7, #12]
 800e1e8:	0008      	movs	r0, r1
 800e1ea:	607a      	str	r2, [r7, #4]
 800e1ec:	0019      	movs	r1, r3
 800e1ee:	230b      	movs	r3, #11
 800e1f0:	18fb      	adds	r3, r7, r3
 800e1f2:	1c02      	adds	r2, r0, #0
 800e1f4:	701a      	strb	r2, [r3, #0]
 800e1f6:	230a      	movs	r3, #10
 800e1f8:	18fb      	adds	r3, r7, r3
 800e1fa:	1c0a      	adds	r2, r1, #0
 800e1fc:	701a      	strb	r2, [r3, #0]
  LoRaMacStatus_t status;
  LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800e1fe:	232f      	movs	r3, #47	; 0x2f
 800e200:	18fb      	adds	r3, r7, r3
 800e202:	22ff      	movs	r2, #255	; 0xff
 800e204:	701a      	strb	r2, [r3, #0]
  McpsReq_t mcpsReq;
  LoRaMacTxInfo_t txInfo;

  if (LoRaMacIsBusy() == true)
 800e206:	f004 fd99 	bl	8012d3c <LoRaMacIsBusy>
 800e20a:	1e03      	subs	r3, r0, #0
 800e20c:	d002      	beq.n	800e214 <LmHandlerSend+0x34>
  {
    return LORAMAC_HANDLER_BUSY_ERROR;
 800e20e:	2302      	movs	r3, #2
 800e210:	425b      	negs	r3, r3
 800e212:	e0a9      	b.n	800e368 <LmHandlerSend+0x188>
  }

  if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800e214:	f7ff ff3c 	bl	800e090 <LmHandlerJoinStatus>
 800e218:	0003      	movs	r3, r0
 800e21a:	2b01      	cmp	r3, #1
 800e21c:	d007      	beq.n	800e22e <LmHandlerSend+0x4e>
  {
    /* The network isn't yet joined, try again later. */
    LmHandlerJoin(JoinParams.Mode);
 800e21e:	4b54      	ldr	r3, [pc, #336]	; (800e370 <LmHandlerSend+0x190>)
 800e220:	789b      	ldrb	r3, [r3, #2]
 800e222:	0018      	movs	r0, r3
 800e224:	f7ff ff54 	bl	800e0d0 <LmHandlerJoin>
    return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800e228:	2303      	movs	r3, #3
 800e22a:	425b      	negs	r3, r3
 800e22c:	e09c      	b.n	800e368 <LmHandlerSend+0x188>
  }

  if ((LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() == true)
 800e22e:	4b51      	ldr	r3, [pc, #324]	; (800e374 <LmHandlerSend+0x194>)
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	68db      	ldr	r3, [r3, #12]
 800e234:	4798      	blx	r3
 800e236:	1e03      	subs	r3, r0, #0
 800e238:	d00d      	beq.n	800e256 <LmHandlerSend+0x76>
      && (appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port) && (appData->Port != 0))
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	781a      	ldrb	r2, [r3, #0]
 800e23e:	4b4d      	ldr	r3, [pc, #308]	; (800e374 <LmHandlerSend+0x194>)
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	781b      	ldrb	r3, [r3, #0]
 800e244:	429a      	cmp	r2, r3
 800e246:	d006      	beq.n	800e256 <LmHandlerSend+0x76>
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	781b      	ldrb	r3, [r3, #0]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d002      	beq.n	800e256 <LmHandlerSend+0x76>
  {
    return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800e250:	2304      	movs	r3, #4
 800e252:	425b      	negs	r3, r3
 800e254:	e088      	b.n	800e368 <LmHandlerSend+0x188>
  }

  mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800e256:	4b48      	ldr	r3, [pc, #288]	; (800e378 <LmHandlerSend+0x198>)
 800e258:	2203      	movs	r2, #3
 800e25a:	569a      	ldrsb	r2, [r3, r2]
 800e25c:	2418      	movs	r4, #24
 800e25e:	193b      	adds	r3, r7, r4
 800e260:	739a      	strb	r2, [r3, #14]
  if (LoRaMacQueryTxPossible(appData->BufferSize, &txInfo) != LORAMAC_STATUS_OK)
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	785b      	ldrb	r3, [r3, #1]
 800e266:	2214      	movs	r2, #20
 800e268:	18ba      	adds	r2, r7, r2
 800e26a:	0011      	movs	r1, r2
 800e26c:	0018      	movs	r0, r3
 800e26e:	f005 f979 	bl	8013564 <LoRaMacQueryTxPossible>
 800e272:	1e03      	subs	r3, r0, #0
 800e274:	d00c      	beq.n	800e290 <LmHandlerSend+0xb0>
  {
    /* Send empty frame in order to flush MAC commands */
    TxParams.MsgType = LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800e276:	4b41      	ldr	r3, [pc, #260]	; (800e37c <LmHandlerSend+0x19c>)
 800e278:	2200      	movs	r2, #0
 800e27a:	709a      	strb	r2, [r3, #2]
    mcpsReq.Type = MCPS_UNCONFIRMED;
 800e27c:	193b      	adds	r3, r7, r4
 800e27e:	2200      	movs	r2, #0
 800e280:	701a      	strb	r2, [r3, #0]
    mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800e282:	193b      	adds	r3, r7, r4
 800e284:	2200      	movs	r2, #0
 800e286:	609a      	str	r2, [r3, #8]
    mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800e288:	193b      	adds	r3, r7, r4
 800e28a:	2200      	movs	r2, #0
 800e28c:	819a      	strh	r2, [r3, #12]
 800e28e:	e021      	b.n	800e2d4 <LmHandlerSend+0xf4>
  }
  else
  {
    TxParams.MsgType = isTxConfirmed;
 800e290:	4b3a      	ldr	r3, [pc, #232]	; (800e37c <LmHandlerSend+0x19c>)
 800e292:	200b      	movs	r0, #11
 800e294:	183a      	adds	r2, r7, r0
 800e296:	7812      	ldrb	r2, [r2, #0]
 800e298:	709a      	strb	r2, [r3, #2]
    mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	781a      	ldrb	r2, [r3, #0]
 800e29e:	2118      	movs	r1, #24
 800e2a0:	187b      	adds	r3, r7, r1
 800e2a2:	711a      	strb	r2, [r3, #4]
    mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	785b      	ldrb	r3, [r3, #1]
 800e2a8:	b29a      	uxth	r2, r3
 800e2aa:	187b      	adds	r3, r7, r1
 800e2ac:	819a      	strh	r2, [r3, #12]
    mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	685a      	ldr	r2, [r3, #4]
 800e2b2:	187b      	adds	r3, r7, r1
 800e2b4:	609a      	str	r2, [r3, #8]
    if (isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG)
 800e2b6:	183b      	adds	r3, r7, r0
 800e2b8:	781b      	ldrb	r3, [r3, #0]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d103      	bne.n	800e2c6 <LmHandlerSend+0xe6>
    {
      mcpsReq.Type = MCPS_UNCONFIRMED;
 800e2be:	187b      	adds	r3, r7, r1
 800e2c0:	2200      	movs	r2, #0
 800e2c2:	701a      	strb	r2, [r3, #0]
 800e2c4:	e006      	b.n	800e2d4 <LmHandlerSend+0xf4>
    }
    else
    {
      mcpsReq.Type = MCPS_CONFIRMED;
 800e2c6:	2118      	movs	r1, #24
 800e2c8:	187b      	adds	r3, r7, r1
 800e2ca:	2201      	movs	r2, #1
 800e2cc:	701a      	strb	r2, [r3, #0]
      mcpsReq.Req.Confirmed.NbTrials = 8;
 800e2ce:	187b      	adds	r3, r7, r1
 800e2d0:	2208      	movs	r2, #8
 800e2d2:	73da      	strb	r2, [r3, #15]
    }
  }

  TxParams.AppData = *appData;
 800e2d4:	4b29      	ldr	r3, [pc, #164]	; (800e37c <LmHandlerSend+0x19c>)
 800e2d6:	68fa      	ldr	r2, [r7, #12]
 800e2d8:	330c      	adds	r3, #12
 800e2da:	ca03      	ldmia	r2!, {r0, r1}
 800e2dc:	c303      	stmia	r3!, {r0, r1}
  TxParams.Datarate = LmHandlerParams.TxDatarate;
 800e2de:	4b26      	ldr	r3, [pc, #152]	; (800e378 <LmHandlerSend+0x198>)
 800e2e0:	2203      	movs	r2, #3
 800e2e2:	569a      	ldrsb	r2, [r3, r2]
 800e2e4:	4b25      	ldr	r3, [pc, #148]	; (800e37c <LmHandlerSend+0x19c>)
 800e2e6:	711a      	strb	r2, [r3, #4]

  status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800e2e8:	232e      	movs	r3, #46	; 0x2e
 800e2ea:	18fc      	adds	r4, r7, r3
 800e2ec:	230a      	movs	r3, #10
 800e2ee:	18fb      	adds	r3, r7, r3
 800e2f0:	781a      	ldrb	r2, [r3, #0]
 800e2f2:	2518      	movs	r5, #24
 800e2f4:	197b      	adds	r3, r7, r5
 800e2f6:	0011      	movs	r1, r2
 800e2f8:	0018      	movs	r0, r3
 800e2fa:	f006 f81b 	bl	8014334 <LoRaMacMcpsRequest>
 800e2fe:	0003      	movs	r3, r0
 800e300:	7023      	strb	r3, [r4, #0]
  if (nextTxIn != NULL)
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d003      	beq.n	800e310 <LmHandlerSend+0x130>
  {
    *nextTxIn = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800e308:	197b      	adds	r3, r7, r5
 800e30a:	691a      	ldr	r2, [r3, #16]
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	601a      	str	r2, [r3, #0]
  }

  switch(status)
 800e310:	232e      	movs	r3, #46	; 0x2e
 800e312:	18fb      	adds	r3, r7, r3
 800e314:	781b      	ldrb	r3, [r3, #0]
 800e316:	2b11      	cmp	r3, #17
 800e318:	d81d      	bhi.n	800e356 <LmHandlerSend+0x176>
 800e31a:	009a      	lsls	r2, r3, #2
 800e31c:	4b18      	ldr	r3, [pc, #96]	; (800e380 <LmHandlerSend+0x1a0>)
 800e31e:	18d3      	adds	r3, r2, r3
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	469f      	mov	pc, r3
  {
  case LORAMAC_STATUS_OK:
    lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800e324:	232f      	movs	r3, #47	; 0x2f
 800e326:	18fb      	adds	r3, r7, r3
 800e328:	2200      	movs	r2, #0
 800e32a:	701a      	strb	r2, [r3, #0]
    break;
 800e32c:	e018      	b.n	800e360 <LmHandlerSend+0x180>
  case LORAMAC_STATUS_BUSY:
  case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
  case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
  case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
    lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800e32e:	232f      	movs	r3, #47	; 0x2f
 800e330:	18fb      	adds	r3, r7, r3
 800e332:	22fe      	movs	r2, #254	; 0xfe
 800e334:	701a      	strb	r2, [r3, #0]
    break;
 800e336:	e013      	b.n	800e360 <LmHandlerSend+0x180>
  case LORAMAC_STATUS_NO_NETWORK_JOINED:
    lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800e338:	232f      	movs	r3, #47	; 0x2f
 800e33a:	18fb      	adds	r3, r7, r3
 800e33c:	22fd      	movs	r2, #253	; 0xfd
 800e33e:	701a      	strb	r2, [r3, #0]
    break;
 800e340:	e00e      	b.n	800e360 <LmHandlerSend+0x180>
  case LORAMAC_STATUS_CRYPTO_ERROR:
    lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800e342:	232f      	movs	r3, #47	; 0x2f
 800e344:	18fb      	adds	r3, r7, r3
 800e346:	22fb      	movs	r2, #251	; 0xfb
 800e348:	701a      	strb	r2, [r3, #0]
    break;
 800e34a:	e009      	b.n	800e360 <LmHandlerSend+0x180>
  case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
    lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800e34c:	232f      	movs	r3, #47	; 0x2f
 800e34e:	18fb      	adds	r3, r7, r3
 800e350:	22fa      	movs	r2, #250	; 0xfa
 800e352:	701a      	strb	r2, [r3, #0]
    break;
 800e354:	e004      	b.n	800e360 <LmHandlerSend+0x180>
  case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
  case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
  case LORAMAC_STATUS_NO_CHANNEL_FOUND:
  case LORAMAC_STATUS_LENGTH_ERROR:
  default:
    lmhStatus = LORAMAC_HANDLER_ERROR;
 800e356:	232f      	movs	r3, #47	; 0x2f
 800e358:	18fb      	adds	r3, r7, r3
 800e35a:	22ff      	movs	r2, #255	; 0xff
 800e35c:	701a      	strb	r2, [r3, #0]
    break;
 800e35e:	46c0      	nop			; (mov r8, r8)
  }
      
  return lmhStatus;
 800e360:	232f      	movs	r3, #47	; 0x2f
 800e362:	18fb      	adds	r3, r7, r3
 800e364:	781b      	ldrb	r3, [r3, #0]
 800e366:	b25b      	sxtb	r3, r3
}
 800e368:	0018      	movs	r0, r3
 800e36a:	46bd      	mov	sp, r7
 800e36c:	b00c      	add	sp, #48	; 0x30
 800e36e:	bdb0      	pop	{r4, r5, r7, pc}
 800e370:	2000015c 	.word	0x2000015c
 800e374:	20000420 	.word	0x20000420
 800e378:	20000434 	.word	0x20000434
 800e37c:	2000047c 	.word	0x2000047c
 800e380:	0801f804 	.word	0x0801f804

0800e384 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass(DeviceClass_t newClass)
{
 800e384:	b580      	push	{r7, lr}
 800e386:	b08c      	sub	sp, #48	; 0x30
 800e388:	af00      	add	r7, sp, #0
 800e38a:	0002      	movs	r2, r0
 800e38c:	1dfb      	adds	r3, r7, #7
 800e38e:	701a      	strb	r2, [r3, #0]
  MibRequestConfirm_t mibReq;
  DeviceClass_t currentClass;
  LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800e390:	232f      	movs	r3, #47	; 0x2f
 800e392:	18fb      	adds	r3, r7, r3
 800e394:	2200      	movs	r2, #0
 800e396:	701a      	strb	r2, [r3, #0]

  if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800e398:	f7ff fe7a 	bl	800e090 <LmHandlerJoinStatus>
 800e39c:	0003      	movs	r3, r0
 800e39e:	2b01      	cmp	r3, #1
 800e3a0:	d002      	beq.n	800e3a8 <LmHandlerRequestClass+0x24>
  {
    return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800e3a2:	2303      	movs	r3, #3
 800e3a4:	425b      	negs	r3, r3
 800e3a6:	e077      	b.n	800e498 <LmHandlerRequestClass+0x114>
  }

  mibReq.Type = MIB_DEVICE_CLASS;
 800e3a8:	2108      	movs	r1, #8
 800e3aa:	187b      	adds	r3, r7, r1
 800e3ac:	2200      	movs	r2, #0
 800e3ae:	701a      	strb	r2, [r3, #0]
  if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 800e3b0:	187b      	adds	r3, r7, r1
 800e3b2:	0018      	movs	r0, r3
 800e3b4:	f005 f982 	bl	80136bc <LoRaMacMibGetRequestConfirm>
 800e3b8:	1e03      	subs	r3, r0, #0
 800e3ba:	d002      	beq.n	800e3c2 <LmHandlerRequestClass+0x3e>
  {
    return LORAMAC_HANDLER_ERROR;
 800e3bc:	2301      	movs	r3, #1
 800e3be:	425b      	negs	r3, r3
 800e3c0:	e06a      	b.n	800e498 <LmHandlerRequestClass+0x114>
  }
  currentClass = mibReq.Param.Class;
 800e3c2:	212e      	movs	r1, #46	; 0x2e
 800e3c4:	187b      	adds	r3, r7, r1
 800e3c6:	2208      	movs	r2, #8
 800e3c8:	18ba      	adds	r2, r7, r2
 800e3ca:	7912      	ldrb	r2, [r2, #4]
 800e3cc:	701a      	strb	r2, [r3, #0]

  /* Attempt to switch only if class update */
  if (currentClass != newClass)
 800e3ce:	187a      	adds	r2, r7, r1
 800e3d0:	1dfb      	adds	r3, r7, #7
 800e3d2:	7812      	ldrb	r2, [r2, #0]
 800e3d4:	781b      	ldrb	r3, [r3, #0]
 800e3d6:	429a      	cmp	r2, r3
 800e3d8:	d053      	beq.n	800e482 <LmHandlerRequestClass+0xfe>
  {
    switch (newClass)
 800e3da:	1dfb      	adds	r3, r7, #7
 800e3dc:	781b      	ldrb	r3, [r3, #0]
 800e3de:	2b02      	cmp	r3, #2
 800e3e0:	d02a      	beq.n	800e438 <LmHandlerRequestClass+0xb4>
 800e3e2:	dc50      	bgt.n	800e486 <LmHandlerRequestClass+0x102>
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d002      	beq.n	800e3ee <LmHandlerRequestClass+0x6a>
 800e3e8:	2b01      	cmp	r3, #1
 800e3ea:	d020      	beq.n	800e42e <LmHandlerRequestClass+0xaa>
          }
        }
      }
      break;
      default:
        break;
 800e3ec:	e04b      	b.n	800e486 <LmHandlerRequestClass+0x102>
        if (currentClass != CLASS_A)
 800e3ee:	232e      	movs	r3, #46	; 0x2e
 800e3f0:	18fb      	adds	r3, r7, r3
 800e3f2:	781b      	ldrb	r3, [r3, #0]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d048      	beq.n	800e48a <LmHandlerRequestClass+0x106>
          mibReq.Param.Class = CLASS_A;
 800e3f8:	2108      	movs	r1, #8
 800e3fa:	187b      	adds	r3, r7, r1
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	711a      	strb	r2, [r3, #4]
          if (LoRaMacMibSetRequestConfirm(&mibReq) == LORAMAC_STATUS_OK)
 800e400:	187b      	adds	r3, r7, r1
 800e402:	0018      	movs	r0, r3
 800e404:	f005 fab8 	bl	8013978 <LoRaMacMibSetRequestConfirm>
 800e408:	1e03      	subs	r3, r0, #0
 800e40a:	d10b      	bne.n	800e424 <LmHandlerRequestClass+0xa0>
            DisplayClassUpdate(CLASS_A);
 800e40c:	2000      	movs	r0, #0
 800e40e:	f000 fac9 	bl	800e9a4 <DisplayClassUpdate>
            if (LmHandlerCallbacks.OnClassChange != NULL)
 800e412:	4b23      	ldr	r3, [pc, #140]	; (800e4a0 <LmHandlerRequestClass+0x11c>)
 800e414:	699b      	ldr	r3, [r3, #24]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d037      	beq.n	800e48a <LmHandlerRequestClass+0x106>
              LmHandlerCallbacks.OnClassChange( CLASS_A );
 800e41a:	4b21      	ldr	r3, [pc, #132]	; (800e4a0 <LmHandlerRequestClass+0x11c>)
 800e41c:	699b      	ldr	r3, [r3, #24]
 800e41e:	2000      	movs	r0, #0
 800e420:	4798      	blx	r3
      break;
 800e422:	e032      	b.n	800e48a <LmHandlerRequestClass+0x106>
            errorStatus = LORAMAC_HANDLER_ERROR;
 800e424:	232f      	movs	r3, #47	; 0x2f
 800e426:	18fb      	adds	r3, r7, r3
 800e428:	22ff      	movs	r2, #255	; 0xff
 800e42a:	701a      	strb	r2, [r3, #0]
      break;
 800e42c:	e02d      	b.n	800e48a <LmHandlerRequestClass+0x106>
        errorStatus = LORAMAC_HANDLER_ERROR;
 800e42e:	232f      	movs	r3, #47	; 0x2f
 800e430:	18fb      	adds	r3, r7, r3
 800e432:	22ff      	movs	r2, #255	; 0xff
 800e434:	701a      	strb	r2, [r3, #0]
      break;
 800e436:	e02b      	b.n	800e490 <LmHandlerRequestClass+0x10c>
        if (currentClass != CLASS_A)
 800e438:	232e      	movs	r3, #46	; 0x2e
 800e43a:	18fb      	adds	r3, r7, r3
 800e43c:	781b      	ldrb	r3, [r3, #0]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d004      	beq.n	800e44c <LmHandlerRequestClass+0xc8>
          errorStatus = LORAMAC_HANDLER_ERROR;
 800e442:	232f      	movs	r3, #47	; 0x2f
 800e444:	18fb      	adds	r3, r7, r3
 800e446:	22ff      	movs	r2, #255	; 0xff
 800e448:	701a      	strb	r2, [r3, #0]
      break;
 800e44a:	e020      	b.n	800e48e <LmHandlerRequestClass+0x10a>
          mibReq.Param.Class = CLASS_C;
 800e44c:	2108      	movs	r1, #8
 800e44e:	187b      	adds	r3, r7, r1
 800e450:	2202      	movs	r2, #2
 800e452:	711a      	strb	r2, [r3, #4]
          if (LoRaMacMibSetRequestConfirm(&mibReq) == LORAMAC_STATUS_OK)
 800e454:	187b      	adds	r3, r7, r1
 800e456:	0018      	movs	r0, r3
 800e458:	f005 fa8e 	bl	8013978 <LoRaMacMibSetRequestConfirm>
 800e45c:	1e03      	subs	r3, r0, #0
 800e45e:	d10b      	bne.n	800e478 <LmHandlerRequestClass+0xf4>
            DisplayClassUpdate(CLASS_C);
 800e460:	2002      	movs	r0, #2
 800e462:	f000 fa9f 	bl	800e9a4 <DisplayClassUpdate>
            if (LmHandlerCallbacks.OnClassChange != NULL)
 800e466:	4b0e      	ldr	r3, [pc, #56]	; (800e4a0 <LmHandlerRequestClass+0x11c>)
 800e468:	699b      	ldr	r3, [r3, #24]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d00f      	beq.n	800e48e <LmHandlerRequestClass+0x10a>
              LmHandlerCallbacks.OnClassChange( CLASS_C );
 800e46e:	4b0c      	ldr	r3, [pc, #48]	; (800e4a0 <LmHandlerRequestClass+0x11c>)
 800e470:	699b      	ldr	r3, [r3, #24]
 800e472:	2002      	movs	r0, #2
 800e474:	4798      	blx	r3
      break;
 800e476:	e00a      	b.n	800e48e <LmHandlerRequestClass+0x10a>
            errorStatus = LORAMAC_HANDLER_ERROR;
 800e478:	232f      	movs	r3, #47	; 0x2f
 800e47a:	18fb      	adds	r3, r7, r3
 800e47c:	22ff      	movs	r2, #255	; 0xff
 800e47e:	701a      	strb	r2, [r3, #0]
      break;
 800e480:	e005      	b.n	800e48e <LmHandlerRequestClass+0x10a>
    }
  }
 800e482:	46c0      	nop			; (mov r8, r8)
 800e484:	e004      	b.n	800e490 <LmHandlerRequestClass+0x10c>
        break;
 800e486:	46c0      	nop			; (mov r8, r8)
 800e488:	e002      	b.n	800e490 <LmHandlerRequestClass+0x10c>
      break;
 800e48a:	46c0      	nop			; (mov r8, r8)
 800e48c:	e000      	b.n	800e490 <LmHandlerRequestClass+0x10c>
      break;
 800e48e:	46c0      	nop			; (mov r8, r8)
  return errorStatus;
 800e490:	232f      	movs	r3, #47	; 0x2f
 800e492:	18fb      	adds	r3, r7, r3
 800e494:	781b      	ldrb	r3, [r3, #0]
 800e496:	b25b      	sxtb	r3, r3
}
 800e498:	0018      	movs	r0, r3
 800e49a:	46bd      	mov	sp, r7
 800e49c:	b00c      	add	sp, #48	; 0x30
 800e49e:	bd80      	pop	{r7, pc}
 800e4a0:	2000043c 	.word	0x2000043c

0800e4a4 <LmHandlerPackageRegister>:

LmHandlerErrorStatus_t LmHandlerPackageRegister(uint8_t id, void *params)
{
 800e4a4:	b590      	push	{r4, r7, lr}
 800e4a6:	b085      	sub	sp, #20
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	0002      	movs	r2, r0
 800e4ac:	6039      	str	r1, [r7, #0]
 800e4ae:	1dfb      	adds	r3, r7, #7
 800e4b0:	701a      	strb	r2, [r3, #0]
  LmhPackage_t *package = NULL;
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	60fb      	str	r3, [r7, #12]
  switch (id)
 800e4b6:	1dfb      	adds	r3, r7, #7
 800e4b8:	781b      	ldrb	r3, [r3, #0]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d104      	bne.n	800e4c8 <LmHandlerPackageRegister+0x24>
  {
    case PACKAGE_ID_COMPLIANCE:
    {
      package = LmphCompliancePackageFactory();
 800e4be:	f000 fa8b 	bl	800e9d8 <LmphCompliancePackageFactory>
 800e4c2:	0003      	movs	r3, r0
 800e4c4:	60fb      	str	r3, [r7, #12]
      break;
 800e4c6:	e000      	b.n	800e4ca <LmHandlerPackageRegister+0x26>
    default:
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
      LmhpDataDistributionPackageRegister(id, &package);
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
      break;
 800e4c8:	46c0      	nop			; (mov r8, r8)
  }

  if (package != NULL)
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d028      	beq.n	800e522 <LmHandlerPackageRegister+0x7e>
  {
    LmHandlerPackages[id] = package;
 800e4d0:	1dfb      	adds	r3, r7, #7
 800e4d2:	781a      	ldrb	r2, [r3, #0]
 800e4d4:	4b16      	ldr	r3, [pc, #88]	; (800e530 <LmHandlerPackageRegister+0x8c>)
 800e4d6:	0092      	lsls	r2, r2, #2
 800e4d8:	68f9      	ldr	r1, [r7, #12]
 800e4da:	50d1      	str	r1, [r2, r3]
    LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800e4dc:	1dfb      	adds	r3, r7, #7
 800e4de:	781a      	ldrb	r2, [r3, #0]
 800e4e0:	4b13      	ldr	r3, [pc, #76]	; (800e530 <LmHandlerPackageRegister+0x8c>)
 800e4e2:	0092      	lsls	r2, r2, #2
 800e4e4:	58d3      	ldr	r3, [r2, r3]
 800e4e6:	4a13      	ldr	r2, [pc, #76]	; (800e534 <LmHandlerPackageRegister+0x90>)
 800e4e8:	621a      	str	r2, [r3, #32]
    LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800e4ea:	1dfb      	adds	r3, r7, #7
 800e4ec:	781a      	ldrb	r2, [r3, #0]
 800e4ee:	4b10      	ldr	r3, [pc, #64]	; (800e530 <LmHandlerPackageRegister+0x8c>)
 800e4f0:	0092      	lsls	r2, r2, #2
 800e4f2:	58d3      	ldr	r3, [r2, r3]
 800e4f4:	4a10      	ldr	r2, [pc, #64]	; (800e538 <LmHandlerPackageRegister+0x94>)
 800e4f6:	625a      	str	r2, [r3, #36]	; 0x24
    LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800e4f8:	1dfb      	adds	r3, r7, #7
 800e4fa:	781a      	ldrb	r2, [r3, #0]
 800e4fc:	4b0c      	ldr	r3, [pc, #48]	; (800e530 <LmHandlerPackageRegister+0x8c>)
 800e4fe:	0092      	lsls	r2, r2, #2
 800e500:	58d3      	ldr	r3, [r2, r3]
 800e502:	4a0e      	ldr	r2, [pc, #56]	; (800e53c <LmHandlerPackageRegister+0x98>)
 800e504:	629a      	str	r2, [r3, #40]	; 0x28
    LmHandlerPackages[id]->Init(params, AppData.Buffer, LORAWAN_APP_DATA_BUFFER_MAX_SIZE);
 800e506:	1dfb      	adds	r3, r7, #7
 800e508:	781a      	ldrb	r2, [r3, #0]
 800e50a:	4b09      	ldr	r3, [pc, #36]	; (800e530 <LmHandlerPackageRegister+0x8c>)
 800e50c:	0092      	lsls	r2, r2, #2
 800e50e:	58d3      	ldr	r3, [r2, r3]
 800e510:	685c      	ldr	r4, [r3, #4]
 800e512:	4b0b      	ldr	r3, [pc, #44]	; (800e540 <LmHandlerPackageRegister+0x9c>)
 800e514:	6859      	ldr	r1, [r3, #4]
 800e516:	683b      	ldr	r3, [r7, #0]
 800e518:	22f2      	movs	r2, #242	; 0xf2
 800e51a:	0018      	movs	r0, r3
 800e51c:	47a0      	blx	r4

    return LORAMAC_HANDLER_SUCCESS;
 800e51e:	2300      	movs	r3, #0
 800e520:	e001      	b.n	800e526 <LmHandlerPackageRegister+0x82>
  }
  else
  {
    return LORAMAC_HANDLER_ERROR;
 800e522:	2301      	movs	r3, #1
 800e524:	425b      	negs	r3, r3
  }
}
 800e526:	0018      	movs	r0, r3
 800e528:	46bd      	mov	sp, r7
 800e52a:	b005      	add	sp, #20
 800e52c:	bd90      	pop	{r4, r7, pc}
 800e52e:	46c0      	nop			; (mov r8, r8)
 800e530:	20000420 	.word	0x20000420
 800e534:	0800e0d1 	.word	0x0800e0d1
 800e538:	0800e1e1 	.word	0x0800e1e1
 800e53c:	0800e5dd 	.word	0x0800e5dd
 800e540:	20000170 	.word	0x20000170

0800e544 <LmHandlerGetCurrentClass>:

int32_t LmHandlerGetCurrentClass(DeviceClass_t *deviceClass)
{
 800e544:	b580      	push	{r7, lr}
 800e546:	b08c      	sub	sp, #48	; 0x30
 800e548:	af00      	add	r7, sp, #0
 800e54a:	6078      	str	r0, [r7, #4]
  MibRequestConfirm_t mibReq;
  if (deviceClass == NULL)
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d102      	bne.n	800e558 <LmHandlerGetCurrentClass+0x14>
  {
    return LORAMAC_HANDLER_ERROR;
 800e552:	2301      	movs	r3, #1
 800e554:	425b      	negs	r3, r3
 800e556:	e012      	b.n	800e57e <LmHandlerGetCurrentClass+0x3a>
  }

  mibReq.Type = MIB_DEVICE_CLASS;
 800e558:	210c      	movs	r1, #12
 800e55a:	187b      	adds	r3, r7, r1
 800e55c:	2200      	movs	r2, #0
 800e55e:	701a      	strb	r2, [r3, #0]
  if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 800e560:	187b      	adds	r3, r7, r1
 800e562:	0018      	movs	r0, r3
 800e564:	f005 f8aa 	bl	80136bc <LoRaMacMibGetRequestConfirm>
 800e568:	1e03      	subs	r3, r0, #0
 800e56a:	d002      	beq.n	800e572 <LmHandlerGetCurrentClass+0x2e>
  {
    return LORAMAC_HANDLER_ERROR;
 800e56c:	2301      	movs	r3, #1
 800e56e:	425b      	negs	r3, r3
 800e570:	e005      	b.n	800e57e <LmHandlerGetCurrentClass+0x3a>
  }

  *deviceClass = mibReq.Param.Class;
 800e572:	230c      	movs	r3, #12
 800e574:	18fb      	adds	r3, r7, r3
 800e576:	791a      	ldrb	r2, [r3, #4]
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	701a      	strb	r2, [r3, #0]
  return LORAMAC_HANDLER_SUCCESS;
 800e57c:	2300      	movs	r3, #0
}
 800e57e:	0018      	movs	r0, r3
 800e580:	46bd      	mov	sp, r7
 800e582:	b00c      	add	sp, #48	; 0x30
 800e584:	bd80      	pop	{r7, pc}
	...

0800e588 <LmHandlerGetTxDatarate>:

int32_t LmHandlerGetTxDatarate(int8_t *txDatarate)
{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b08c      	sub	sp, #48	; 0x30
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	6078      	str	r0, [r7, #4]
  MibRequestConfirm_t mibGet;
  if (txDatarate == NULL)
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d102      	bne.n	800e59c <LmHandlerGetTxDatarate+0x14>
  {
    return LORAMAC_HANDLER_ERROR;
 800e596:	2301      	movs	r3, #1
 800e598:	425b      	negs	r3, r3
 800e59a:	e018      	b.n	800e5ce <LmHandlerGetTxDatarate+0x46>
  }

  mibGet.Type = MIB_CHANNELS_DATARATE;
 800e59c:	210c      	movs	r1, #12
 800e59e:	187b      	adds	r3, r7, r1
 800e5a0:	221f      	movs	r2, #31
 800e5a2:	701a      	strb	r2, [r3, #0]
  if (LoRaMacMibGetRequestConfirm(&mibGet) != LORAMAC_STATUS_OK)
 800e5a4:	187b      	adds	r3, r7, r1
 800e5a6:	0018      	movs	r0, r3
 800e5a8:	f005 f888 	bl	80136bc <LoRaMacMibGetRequestConfirm>
 800e5ac:	1e03      	subs	r3, r0, #0
 800e5ae:	d002      	beq.n	800e5b6 <LmHandlerGetTxDatarate+0x2e>
  {
    return LORAMAC_HANDLER_ERROR;
 800e5b0:	2301      	movs	r3, #1
 800e5b2:	425b      	negs	r3, r3
 800e5b4:	e00b      	b.n	800e5ce <LmHandlerGetTxDatarate+0x46>
  }

  *txDatarate = mibGet.Param.ChannelsDatarate;
 800e5b6:	210c      	movs	r1, #12
 800e5b8:	187b      	adds	r3, r7, r1
 800e5ba:	2204      	movs	r2, #4
 800e5bc:	569a      	ldrsb	r2, [r3, r2]
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	701a      	strb	r2, [r3, #0]
  LmHandlerParams.TxDatarate = mibGet.Param.ChannelsDatarate;
 800e5c2:	187b      	adds	r3, r7, r1
 800e5c4:	2204      	movs	r2, #4
 800e5c6:	569a      	ldrsb	r2, [r3, r2]
 800e5c8:	4b03      	ldr	r3, [pc, #12]	; (800e5d8 <LmHandlerGetTxDatarate+0x50>)
 800e5ca:	70da      	strb	r2, [r3, #3]
  return LORAMAC_HANDLER_SUCCESS;
 800e5cc:	2300      	movs	r3, #0
}
 800e5ce:	0018      	movs	r0, r3
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	b00c      	add	sp, #48	; 0x30
 800e5d4:	bd80      	pop	{r7, pc}
 800e5d6:	46c0      	nop			; (mov r8, r8)
 800e5d8:	20000434 	.word	0x20000434

0800e5dc <LmHandlerDeviceTimeReq>:
#endif /* LORAMAC_CLASSB_ENABLED */
}

/* Private  functions ---------------------------------------------------------*/
static LmHandlerErrorStatus_t LmHandlerDeviceTimeReq(void)
{
 800e5dc:	b5b0      	push	{r4, r5, r7, lr}
 800e5de:	b086      	sub	sp, #24
 800e5e0:	af00      	add	r7, sp, #0
  LoRaMacStatus_t status;
  MlmeReq_t mlmeReq;

  mlmeReq.Type = MLME_DEVICE_TIME;
 800e5e2:	003b      	movs	r3, r7
 800e5e4:	220a      	movs	r2, #10
 800e5e6:	701a      	strb	r2, [r3, #0]

  status = LoRaMacMlmeRequest(&mlmeReq);
 800e5e8:	2517      	movs	r5, #23
 800e5ea:	197c      	adds	r4, r7, r5
 800e5ec:	003b      	movs	r3, r7
 800e5ee:	0018      	movs	r0, r3
 800e5f0:	f005 fd48 	bl	8014084 <LoRaMacMlmeRequest>
 800e5f4:	0003      	movs	r3, r0
 800e5f6:	7023      	strb	r3, [r4, #0]

  if (status == LORAMAC_STATUS_OK)
 800e5f8:	197b      	adds	r3, r7, r5
 800e5fa:	781b      	ldrb	r3, [r3, #0]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d101      	bne.n	800e604 <LmHandlerDeviceTimeReq+0x28>
  {
    return LORAMAC_HANDLER_SUCCESS;
 800e600:	2300      	movs	r3, #0
 800e602:	e001      	b.n	800e608 <LmHandlerDeviceTimeReq+0x2c>
  }
  else
  {
    return LORAMAC_HANDLER_ERROR;
 800e604:	2301      	movs	r3, #1
 800e606:	425b      	negs	r3, r3
  }
}
 800e608:	0018      	movs	r0, r3
 800e60a:	46bd      	mov	sp, r7
 800e60c:	b006      	add	sp, #24
 800e60e:	bdb0      	pop	{r4, r5, r7, pc}

0800e610 <McpsConfirm>:
  }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

static void McpsConfirm(McpsConfirm_t *mcpsConfirm)
{
 800e610:	b580      	push	{r7, lr}
 800e612:	b082      	sub	sp, #8
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]
  TxParams.IsMcpsConfirm = 1; // Здесь выставляется будет ли подтверждение или нет
 800e618:	4b16      	ldr	r3, [pc, #88]	; (800e674 <McpsConfirm+0x64>)
 800e61a:	2201      	movs	r2, #1
 800e61c:	701a      	strb	r2, [r3, #0]
  TxParams.Status = mcpsConfirm->Status;
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	785a      	ldrb	r2, [r3, #1]
 800e622:	4b14      	ldr	r3, [pc, #80]	; (800e674 <McpsConfirm+0x64>)
 800e624:	705a      	strb	r2, [r3, #1]
  TxParams.Datarate = mcpsConfirm->Datarate;
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	789b      	ldrb	r3, [r3, #2]
 800e62a:	b25a      	sxtb	r2, r3
 800e62c:	4b11      	ldr	r3, [pc, #68]	; (800e674 <McpsConfirm+0x64>)
 800e62e:	711a      	strb	r2, [r3, #4]
  TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	68da      	ldr	r2, [r3, #12]
 800e634:	4b0f      	ldr	r3, [pc, #60]	; (800e674 <McpsConfirm+0x64>)
 800e636:	609a      	str	r2, [r3, #8]
  TxParams.TxPower = mcpsConfirm->TxPower;
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	2203      	movs	r2, #3
 800e63c:	569a      	ldrsb	r2, [r3, r2]
 800e63e:	4b0d      	ldr	r3, [pc, #52]	; (800e674 <McpsConfirm+0x64>)
 800e640:	751a      	strb	r2, [r3, #20]
  TxParams.Channel = mcpsConfirm->Channel;
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	691b      	ldr	r3, [r3, #16]
 800e646:	b2da      	uxtb	r2, r3
 800e648:	4b0a      	ldr	r3, [pc, #40]	; (800e674 <McpsConfirm+0x64>)
 800e64a:	755a      	strb	r2, [r3, #21]
  TxParams.AckReceived = mcpsConfirm->AckReceived;
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	791b      	ldrb	r3, [r3, #4]
 800e650:	001a      	movs	r2, r3
 800e652:	4b08      	ldr	r3, [pc, #32]	; (800e674 <McpsConfirm+0x64>)
 800e654:	70da      	strb	r2, [r3, #3]

  LmHandlerCallbacks.OnTxData(&TxParams);
 800e656:	4b08      	ldr	r3, [pc, #32]	; (800e678 <McpsConfirm+0x68>)
 800e658:	691b      	ldr	r3, [r3, #16]
 800e65a:	4a06      	ldr	r2, [pc, #24]	; (800e674 <McpsConfirm+0x64>)
 800e65c:	0010      	movs	r0, r2
 800e65e:	4798      	blx	r3

  LmHandlerPackagesNotify(PACKAGE_MCPS_CONFIRM, mcpsConfirm);
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	0019      	movs	r1, r3
 800e664:	2000      	movs	r0, #0
 800e666:	f000 f907 	bl	800e878 <LmHandlerPackagesNotify>
}
 800e66a:	46c0      	nop			; (mov r8, r8)
 800e66c:	46bd      	mov	sp, r7
 800e66e:	b002      	add	sp, #8
 800e670:	bd80      	pop	{r7, pc}
 800e672:	46c0      	nop			; (mov r8, r8)
 800e674:	2000047c 	.word	0x2000047c
 800e678:	2000043c 	.word	0x2000043c

0800e67c <McpsIndication>:

static void McpsIndication(McpsIndication_t *mcpsIndication)
{
 800e67c:	b590      	push	{r4, r7, lr}
 800e67e:	b089      	sub	sp, #36	; 0x24
 800e680:	af00      	add	r7, sp, #0
 800e682:	6078      	str	r0, [r7, #4]
  LmHandlerAppData_t appData;
  DeviceClass_t deviceClass;
  RxParams.IsMcpsIndication = 1;
 800e684:	4b36      	ldr	r3, [pc, #216]	; (800e760 <McpsIndication+0xe4>)
 800e686:	2201      	movs	r2, #1
 800e688:	701a      	strb	r2, [r3, #0]
  RxParams.Status = mcpsIndication->Status;
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	785a      	ldrb	r2, [r3, #1]
 800e68e:	4b34      	ldr	r3, [pc, #208]	; (800e760 <McpsIndication+0xe4>)
 800e690:	705a      	strb	r2, [r3, #1]

  if (RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK)
 800e692:	4b33      	ldr	r3, [pc, #204]	; (800e760 <McpsIndication+0xe4>)
 800e694:	785b      	ldrb	r3, [r3, #1]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d15e      	bne.n	800e758 <McpsIndication+0xdc>
  {
    return;
  }

  if (mcpsIndication->BufferSize > 0)
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	7b1b      	ldrb	r3, [r3, #12]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d02c      	beq.n	800e6fc <McpsIndication+0x80>
  {
    RxParams.Datarate = mcpsIndication->RxDatarate;
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	791b      	ldrb	r3, [r3, #4]
 800e6a6:	b25a      	sxtb	r2, r3
 800e6a8:	4b2d      	ldr	r3, [pc, #180]	; (800e760 <McpsIndication+0xe4>)
 800e6aa:	709a      	strb	r2, [r3, #2]
    RxParams.Rssi = mcpsIndication->Rssi;
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	220e      	movs	r2, #14
 800e6b0:	5e9b      	ldrsh	r3, [r3, r2]
 800e6b2:	b25a      	sxtb	r2, r3
 800e6b4:	4b2a      	ldr	r3, [pc, #168]	; (800e760 <McpsIndication+0xe4>)
 800e6b6:	70da      	strb	r2, [r3, #3]
    RxParams.Snr = mcpsIndication->Snr;
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	2210      	movs	r2, #16
 800e6bc:	569a      	ldrsb	r2, [r3, r2]
 800e6be:	4b28      	ldr	r3, [pc, #160]	; (800e760 <McpsIndication+0xe4>)
 800e6c0:	711a      	strb	r2, [r3, #4]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	695a      	ldr	r2, [r3, #20]
 800e6c6:	4b26      	ldr	r3, [pc, #152]	; (800e760 <McpsIndication+0xe4>)
 800e6c8:	609a      	str	r2, [r3, #8]
    RxParams.RxSlot = mcpsIndication->RxSlot;
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	7c5b      	ldrb	r3, [r3, #17]
 800e6ce:	b25a      	sxtb	r2, r3
 800e6d0:	4b23      	ldr	r3, [pc, #140]	; (800e760 <McpsIndication+0xe4>)
 800e6d2:	731a      	strb	r2, [r3, #12]

    appData.Port = mcpsIndication->Port;
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	78da      	ldrb	r2, [r3, #3]
 800e6d8:	2118      	movs	r1, #24
 800e6da:	187b      	adds	r3, r7, r1
 800e6dc:	701a      	strb	r2, [r3, #0]
    appData.BufferSize = mcpsIndication->BufferSize;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	7b1a      	ldrb	r2, [r3, #12]
 800e6e2:	187b      	adds	r3, r7, r1
 800e6e4:	705a      	strb	r2, [r3, #1]
    appData.Buffer = mcpsIndication->Buffer;
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	689a      	ldr	r2, [r3, #8]
 800e6ea:	0008      	movs	r0, r1
 800e6ec:	187b      	adds	r3, r7, r1
 800e6ee:	605a      	str	r2, [r3, #4]

    LmHandlerCallbacks.OnRxData(&appData, &RxParams);
 800e6f0:	4b1c      	ldr	r3, [pc, #112]	; (800e764 <McpsIndication+0xe8>)
 800e6f2:	695b      	ldr	r3, [r3, #20]
 800e6f4:	491a      	ldr	r1, [pc, #104]	; (800e760 <McpsIndication+0xe4>)
 800e6f6:	183a      	adds	r2, r7, r0
 800e6f8:	0010      	movs	r0, r2
 800e6fa:	4798      	blx	r3
  }
   
    if( mcpsIndication->DeviceTimeAnsReceived == true )
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	7f1b      	ldrb	r3, [r3, #28]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d006      	beq.n	800e712 <McpsIndication+0x96>
    {
      if( LmHandlerCallbacks.OnSysTimeUpdate != NULL)
 800e704:	4b17      	ldr	r3, [pc, #92]	; (800e764 <McpsIndication+0xe8>)
 800e706:	69db      	ldr	r3, [r3, #28]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d002      	beq.n	800e712 <McpsIndication+0x96>
      { 
        /*callback used in Class C data transfert use case (fuota)*/
        LmHandlerCallbacks.OnSysTimeUpdate( );
 800e70c:	4b15      	ldr	r3, [pc, #84]	; (800e764 <McpsIndication+0xe8>)
 800e70e:	69db      	ldr	r3, [r3, #28]
 800e710:	4798      	blx	r3
      }  
    }  
  
  /* Call packages RxProcess function */
  LmHandlerPackagesNotify(PACKAGE_MCPS_INDICATION, mcpsIndication);
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	0019      	movs	r1, r3
 800e716:	2001      	movs	r0, #1
 800e718:	f000 f8ae 	bl	800e878 <LmHandlerPackagesNotify>
  LmHandlerGetCurrentClass(&deviceClass);
 800e71c:	2417      	movs	r4, #23
 800e71e:	193b      	adds	r3, r7, r4
 800e720:	0018      	movs	r0, r3
 800e722:	f7ff ff0f 	bl	800e544 <LmHandlerGetCurrentClass>
  if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	795b      	ldrb	r3, [r3, #5]
 800e72a:	2b01      	cmp	r3, #1
 800e72c:	d115      	bne.n	800e75a <McpsIndication+0xde>
 800e72e:	193b      	adds	r3, r7, r4
 800e730:	781b      	ldrb	r3, [r3, #0]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d111      	bne.n	800e75a <McpsIndication+0xde>
  {
    /* The server signals that it has pending data to be sent. */
    /* We schedule an uplink as soon as possible to flush the server. */

    /* Send an empty message */
    LmHandlerAppData_t appData =
 800e736:	210c      	movs	r1, #12
 800e738:	187b      	adds	r3, r7, r1
 800e73a:	2200      	movs	r2, #0
 800e73c:	701a      	strb	r2, [r3, #0]
 800e73e:	187b      	adds	r3, r7, r1
 800e740:	2200      	movs	r2, #0
 800e742:	705a      	strb	r2, [r3, #1]
 800e744:	187b      	adds	r3, r7, r1
 800e746:	2200      	movs	r2, #0
 800e748:	605a      	str	r2, [r3, #4]
    {
      .Buffer = NULL,
      .BufferSize = 0,
      .Port = 0
    };
    LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 800e74a:	1878      	adds	r0, r7, r1
 800e74c:	2301      	movs	r3, #1
 800e74e:	2200      	movs	r2, #0
 800e750:	2100      	movs	r1, #0
 800e752:	f7ff fd45 	bl	800e1e0 <LmHandlerSend>
 800e756:	e000      	b.n	800e75a <McpsIndication+0xde>
    return;
 800e758:	46c0      	nop			; (mov r8, r8)
  }
}
 800e75a:	46bd      	mov	sp, r7
 800e75c:	b009      	add	sp, #36	; 0x24
 800e75e:	bd90      	pop	{r4, r7, pc}
 800e760:	20000160 	.word	0x20000160
 800e764:	2000043c 	.word	0x2000043c

0800e768 <MlmeConfirm>:

static void MlmeConfirm(MlmeConfirm_t *mlmeConfirm)
{
 800e768:	b590      	push	{r4, r7, lr}
 800e76a:	b08d      	sub	sp, #52	; 0x34
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	6078      	str	r0, [r7, #4]
  TxParams.IsMcpsConfirm = 0;
 800e770:	4b22      	ldr	r3, [pc, #136]	; (800e7fc <MlmeConfirm+0x94>)
 800e772:	2200      	movs	r2, #0
 800e774:	701a      	strb	r2, [r3, #0]
  TxParams.Status = mlmeConfirm->Status;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	785a      	ldrb	r2, [r3, #1]
 800e77a:	4b20      	ldr	r3, [pc, #128]	; (800e7fc <MlmeConfirm+0x94>)
 800e77c:	705a      	strb	r2, [r3, #1]

  LmHandlerPackagesNotify(PACKAGE_MLME_CONFIRM, mlmeConfirm);
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	0019      	movs	r1, r3
 800e782:	2002      	movs	r0, #2
 800e784:	f000 f878 	bl	800e878 <LmHandlerPackagesNotify>

  switch (mlmeConfirm->MlmeRequest)
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	781b      	ldrb	r3, [r3, #0]
 800e78c:	2b0a      	cmp	r3, #10
 800e78e:	d02c      	beq.n	800e7ea <MlmeConfirm+0x82>
 800e790:	dc2d      	bgt.n	800e7ee <MlmeConfirm+0x86>
 800e792:	2b01      	cmp	r3, #1
 800e794:	d002      	beq.n	800e79c <MlmeConfirm+0x34>
 800e796:	2b04      	cmp	r3, #4
 800e798:	d02b      	beq.n	800e7f2 <MlmeConfirm+0x8a>
      }
    }
    break;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
      break;
 800e79a:	e028      	b.n	800e7ee <MlmeConfirm+0x86>
      mibReq.Type = MIB_DEV_ADDR;
 800e79c:	210c      	movs	r1, #12
 800e79e:	187b      	adds	r3, r7, r1
 800e7a0:	2206      	movs	r2, #6
 800e7a2:	701a      	strb	r2, [r3, #0]
      LoRaMacMibGetRequestConfirm(&mibReq);
 800e7a4:	000c      	movs	r4, r1
 800e7a6:	187b      	adds	r3, r7, r1
 800e7a8:	0018      	movs	r0, r3
 800e7aa:	f004 ff87 	bl	80136bc <LoRaMacMibGetRequestConfirm>
      CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800e7ae:	193b      	adds	r3, r7, r4
 800e7b0:	685a      	ldr	r2, [r3, #4]
 800e7b2:	4b13      	ldr	r3, [pc, #76]	; (800e800 <MlmeConfirm+0x98>)
 800e7b4:	615a      	str	r2, [r3, #20]
      LmHandlerGetTxDatarate(&JoinParams.Datarate);
 800e7b6:	4b13      	ldr	r3, [pc, #76]	; (800e804 <MlmeConfirm+0x9c>)
 800e7b8:	0018      	movs	r0, r3
 800e7ba:	f7ff fee5 	bl	800e588 <LmHandlerGetTxDatarate>
      if (mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK)
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	785b      	ldrb	r3, [r3, #1]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d108      	bne.n	800e7d8 <MlmeConfirm+0x70>
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800e7c6:	4b0f      	ldr	r3, [pc, #60]	; (800e804 <MlmeConfirm+0x9c>)
 800e7c8:	2200      	movs	r2, #0
 800e7ca:	705a      	strb	r2, [r3, #1]
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800e7cc:	4b0e      	ldr	r3, [pc, #56]	; (800e808 <MlmeConfirm+0xa0>)
 800e7ce:	785b      	ldrb	r3, [r3, #1]
 800e7d0:	0018      	movs	r0, r3
 800e7d2:	f7ff fdd7 	bl	800e384 <LmHandlerRequestClass>
 800e7d6:	e002      	b.n	800e7de <MlmeConfirm+0x76>
        JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800e7d8:	4b0a      	ldr	r3, [pc, #40]	; (800e804 <MlmeConfirm+0x9c>)
 800e7da:	22ff      	movs	r2, #255	; 0xff
 800e7dc:	705a      	strb	r2, [r3, #1]
      LmHandlerCallbacks.OnJoinRequest(&JoinParams);
 800e7de:	4b0b      	ldr	r3, [pc, #44]	; (800e80c <MlmeConfirm+0xa4>)
 800e7e0:	68db      	ldr	r3, [r3, #12]
 800e7e2:	4a08      	ldr	r2, [pc, #32]	; (800e804 <MlmeConfirm+0x9c>)
 800e7e4:	0010      	movs	r0, r2
 800e7e6:	4798      	blx	r3
    break;
 800e7e8:	e004      	b.n	800e7f4 <MlmeConfirm+0x8c>
    break;
 800e7ea:	46c0      	nop			; (mov r8, r8)
 800e7ec:	e002      	b.n	800e7f4 <MlmeConfirm+0x8c>
      break;
 800e7ee:	46c0      	nop			; (mov r8, r8)
 800e7f0:	e000      	b.n	800e7f4 <MlmeConfirm+0x8c>
    break;
 800e7f2:	46c0      	nop			; (mov r8, r8)
  }
}
 800e7f4:	46c0      	nop			; (mov r8, r8)
 800e7f6:	46bd      	mov	sp, r7
 800e7f8:	b00d      	add	sp, #52	; 0x34
 800e7fa:	bd90      	pop	{r4, r7, pc}
 800e7fc:	2000047c 	.word	0x2000047c
 800e800:	20000138 	.word	0x20000138
 800e804:	2000015c 	.word	0x2000015c
 800e808:	20000434 	.word	0x20000434
 800e80c:	2000043c 	.word	0x2000043c

0800e810 <MlmeIndication>:

static void MlmeIndication(MlmeIndication_t *mlmeIndication)
{
 800e810:	b580      	push	{r7, lr}
 800e812:	b082      	sub	sp, #8
 800e814:	af00      	add	r7, sp, #0
 800e816:	6078      	str	r0, [r7, #4]
  RxParams.IsMcpsIndication = 0;
 800e818:	4b05      	ldr	r3, [pc, #20]	; (800e830 <MlmeIndication+0x20>)
 800e81a:	2200      	movs	r2, #0
 800e81c:	701a      	strb	r2, [r3, #0]
  RxParams.Status = mlmeIndication->Status;
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	785a      	ldrb	r2, [r3, #1]
 800e822:	4b03      	ldr	r3, [pc, #12]	; (800e830 <MlmeIndication+0x20>)
 800e824:	705a      	strb	r2, [r3, #1]
      }
      break;
    }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
      break;
 800e826:	46c0      	nop			; (mov r8, r8)
  }
}
 800e828:	46c0      	nop			; (mov r8, r8)
 800e82a:	46bd      	mov	sp, r7
 800e82c:	b002      	add	sp, #8
 800e82e:	bd80      	pop	{r7, pc}
 800e830:	20000160 	.word	0x20000160

0800e834 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized(uint8_t id)
{
 800e834:	b580      	push	{r7, lr}
 800e836:	b082      	sub	sp, #8
 800e838:	af00      	add	r7, sp, #0
 800e83a:	0002      	movs	r2, r0
 800e83c:	1dfb      	adds	r3, r7, #7
 800e83e:	701a      	strb	r2, [r3, #0]
  if ((id < PKG_MAX_NUMBER) && (LmHandlerPackages[id]->IsInitialized != NULL))
 800e840:	1dfb      	adds	r3, r7, #7
 800e842:	781b      	ldrb	r3, [r3, #0]
 800e844:	2b04      	cmp	r3, #4
 800e846:	d810      	bhi.n	800e86a <LmHandlerPackageIsInitialized+0x36>
 800e848:	1dfb      	adds	r3, r7, #7
 800e84a:	781a      	ldrb	r2, [r3, #0]
 800e84c:	4b09      	ldr	r3, [pc, #36]	; (800e874 <LmHandlerPackageIsInitialized+0x40>)
 800e84e:	0092      	lsls	r2, r2, #2
 800e850:	58d3      	ldr	r3, [r2, r3]
 800e852:	689b      	ldr	r3, [r3, #8]
 800e854:	2b00      	cmp	r3, #0
 800e856:	d008      	beq.n	800e86a <LmHandlerPackageIsInitialized+0x36>
  {
    return LmHandlerPackages[id]->IsInitialized();
 800e858:	1dfb      	adds	r3, r7, #7
 800e85a:	781a      	ldrb	r2, [r3, #0]
 800e85c:	4b05      	ldr	r3, [pc, #20]	; (800e874 <LmHandlerPackageIsInitialized+0x40>)
 800e85e:	0092      	lsls	r2, r2, #2
 800e860:	58d3      	ldr	r3, [r2, r3]
 800e862:	689b      	ldr	r3, [r3, #8]
 800e864:	4798      	blx	r3
 800e866:	0003      	movs	r3, r0
 800e868:	e000      	b.n	800e86c <LmHandlerPackageIsInitialized+0x38>
  }
  else
  {
    return false;
 800e86a:	2300      	movs	r3, #0
  }
}
 800e86c:	0018      	movs	r0, r3
 800e86e:	46bd      	mov	sp, r7
 800e870:	b002      	add	sp, #8
 800e872:	bd80      	pop	{r7, pc}
 800e874:	20000420 	.word	0x20000420

0800e878 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify(PackageNotifyTypes_t notifyType, void *params)
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	b084      	sub	sp, #16
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	0002      	movs	r2, r0
 800e880:	6039      	str	r1, [r7, #0]
 800e882:	1dfb      	adds	r3, r7, #7
 800e884:	701a      	strb	r2, [r3, #0]
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 800e886:	230f      	movs	r3, #15
 800e888:	18fb      	adds	r3, r7, r3
 800e88a:	2200      	movs	r2, #0
 800e88c:	701a      	strb	r2, [r3, #0]
 800e88e:	e07b      	b.n	800e988 <LmHandlerPackagesNotify+0x110>
  {
    if (LmHandlerPackages[i] != NULL)
 800e890:	230f      	movs	r3, #15
 800e892:	18fb      	adds	r3, r7, r3
 800e894:	2200      	movs	r2, #0
 800e896:	569a      	ldrsb	r2, [r3, r2]
 800e898:	4b41      	ldr	r3, [pc, #260]	; (800e9a0 <LmHandlerPackagesNotify+0x128>)
 800e89a:	0092      	lsls	r2, r2, #2
 800e89c:	58d3      	ldr	r3, [r2, r3]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d100      	bne.n	800e8a4 <LmHandlerPackagesNotify+0x2c>
 800e8a2:	e05f      	b.n	800e964 <LmHandlerPackagesNotify+0xec>
    {
      switch (notifyType)
 800e8a4:	1dfb      	adds	r3, r7, #7
 800e8a6:	781b      	ldrb	r3, [r3, #0]
 800e8a8:	2b02      	cmp	r3, #2
 800e8aa:	d046      	beq.n	800e93a <LmHandlerPackagesNotify+0xc2>
 800e8ac:	dc5c      	bgt.n	800e968 <LmHandlerPackagesNotify+0xf0>
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d002      	beq.n	800e8b8 <LmHandlerPackagesNotify+0x40>
 800e8b2:	2b01      	cmp	r3, #1
 800e8b4:	d015      	beq.n	800e8e2 <LmHandlerPackagesNotify+0x6a>
            LmHandlerPackages[i]->OnMlmeConfirmProcess(params);
          }
          break;
        }
        default:
          break;
 800e8b6:	e057      	b.n	800e968 <LmHandlerPackagesNotify+0xf0>
          if (LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL)
 800e8b8:	210f      	movs	r1, #15
 800e8ba:	187b      	adds	r3, r7, r1
 800e8bc:	2200      	movs	r2, #0
 800e8be:	569a      	ldrsb	r2, [r3, r2]
 800e8c0:	4b37      	ldr	r3, [pc, #220]	; (800e9a0 <LmHandlerPackagesNotify+0x128>)
 800e8c2:	0092      	lsls	r2, r2, #2
 800e8c4:	58d3      	ldr	r3, [r2, r3]
 800e8c6:	695b      	ldr	r3, [r3, #20]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d04f      	beq.n	800e96c <LmHandlerPackagesNotify+0xf4>
            LmHandlerPackages[i]->OnMcpsConfirmProcess(params);
 800e8cc:	187b      	adds	r3, r7, r1
 800e8ce:	2200      	movs	r2, #0
 800e8d0:	569a      	ldrsb	r2, [r3, r2]
 800e8d2:	4b33      	ldr	r3, [pc, #204]	; (800e9a0 <LmHandlerPackagesNotify+0x128>)
 800e8d4:	0092      	lsls	r2, r2, #2
 800e8d6:	58d3      	ldr	r3, [r2, r3]
 800e8d8:	695b      	ldr	r3, [r3, #20]
 800e8da:	683a      	ldr	r2, [r7, #0]
 800e8dc:	0010      	movs	r0, r2
 800e8de:	4798      	blx	r3
          break;
 800e8e0:	e044      	b.n	800e96c <LmHandlerPackagesNotify+0xf4>
          if ((LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL) &&
 800e8e2:	210f      	movs	r1, #15
 800e8e4:	187b      	adds	r3, r7, r1
 800e8e6:	2200      	movs	r2, #0
 800e8e8:	569a      	ldrsb	r2, [r3, r2]
 800e8ea:	4b2d      	ldr	r3, [pc, #180]	; (800e9a0 <LmHandlerPackagesNotify+0x128>)
 800e8ec:	0092      	lsls	r2, r2, #2
 800e8ee:	58d3      	ldr	r3, [r2, r3]
 800e8f0:	699b      	ldr	r3, [r3, #24]
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d03c      	beq.n	800e970 <LmHandlerPackagesNotify+0xf8>
              ((LmHandlerPackages[i]->Port == ((McpsIndication_t *)params)->Port) ||
 800e8f6:	187b      	adds	r3, r7, r1
 800e8f8:	2200      	movs	r2, #0
 800e8fa:	569a      	ldrsb	r2, [r3, r2]
 800e8fc:	4b28      	ldr	r3, [pc, #160]	; (800e9a0 <LmHandlerPackagesNotify+0x128>)
 800e8fe:	0092      	lsls	r2, r2, #2
 800e900:	58d3      	ldr	r3, [r2, r3]
 800e902:	781a      	ldrb	r2, [r3, #0]
 800e904:	683b      	ldr	r3, [r7, #0]
 800e906:	78db      	ldrb	r3, [r3, #3]
          if ((LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL) &&
 800e908:	429a      	cmp	r2, r3
 800e90a:	d00a      	beq.n	800e922 <LmHandlerPackagesNotify+0xaa>
              ((LmHandlerPackages[i]->Port == ((McpsIndication_t *)params)->Port) ||
 800e90c:	187b      	adds	r3, r7, r1
 800e90e:	781b      	ldrb	r3, [r3, #0]
 800e910:	b25b      	sxtb	r3, r3
 800e912:	2b00      	cmp	r3, #0
 800e914:	d12c      	bne.n	800e970 <LmHandlerPackagesNotify+0xf8>
               ((i == PACKAGE_ID_COMPLIANCE) && (LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning()))))
 800e916:	4b22      	ldr	r3, [pc, #136]	; (800e9a0 <LmHandlerPackagesNotify+0x128>)
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	68db      	ldr	r3, [r3, #12]
 800e91c:	4798      	blx	r3
 800e91e:	1e03      	subs	r3, r0, #0
 800e920:	d026      	beq.n	800e970 <LmHandlerPackagesNotify+0xf8>
            LmHandlerPackages[i]->OnMcpsIndicationProcess(params);
 800e922:	230f      	movs	r3, #15
 800e924:	18fb      	adds	r3, r7, r3
 800e926:	2200      	movs	r2, #0
 800e928:	569a      	ldrsb	r2, [r3, r2]
 800e92a:	4b1d      	ldr	r3, [pc, #116]	; (800e9a0 <LmHandlerPackagesNotify+0x128>)
 800e92c:	0092      	lsls	r2, r2, #2
 800e92e:	58d3      	ldr	r3, [r2, r3]
 800e930:	699b      	ldr	r3, [r3, #24]
 800e932:	683a      	ldr	r2, [r7, #0]
 800e934:	0010      	movs	r0, r2
 800e936:	4798      	blx	r3
          break;
 800e938:	e01a      	b.n	800e970 <LmHandlerPackagesNotify+0xf8>
          if (LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL)
 800e93a:	210f      	movs	r1, #15
 800e93c:	187b      	adds	r3, r7, r1
 800e93e:	2200      	movs	r2, #0
 800e940:	569a      	ldrsb	r2, [r3, r2]
 800e942:	4b17      	ldr	r3, [pc, #92]	; (800e9a0 <LmHandlerPackagesNotify+0x128>)
 800e944:	0092      	lsls	r2, r2, #2
 800e946:	58d3      	ldr	r3, [r2, r3]
 800e948:	69db      	ldr	r3, [r3, #28]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d012      	beq.n	800e974 <LmHandlerPackagesNotify+0xfc>
            LmHandlerPackages[i]->OnMlmeConfirmProcess(params);
 800e94e:	187b      	adds	r3, r7, r1
 800e950:	2200      	movs	r2, #0
 800e952:	569a      	ldrsb	r2, [r3, r2]
 800e954:	4b12      	ldr	r3, [pc, #72]	; (800e9a0 <LmHandlerPackagesNotify+0x128>)
 800e956:	0092      	lsls	r2, r2, #2
 800e958:	58d3      	ldr	r3, [r2, r3]
 800e95a:	69db      	ldr	r3, [r3, #28]
 800e95c:	683a      	ldr	r2, [r7, #0]
 800e95e:	0010      	movs	r0, r2
 800e960:	4798      	blx	r3
          break;
 800e962:	e007      	b.n	800e974 <LmHandlerPackagesNotify+0xfc>
      }
    }
 800e964:	46c0      	nop			; (mov r8, r8)
 800e966:	e006      	b.n	800e976 <LmHandlerPackagesNotify+0xfe>
          break;
 800e968:	46c0      	nop			; (mov r8, r8)
 800e96a:	e004      	b.n	800e976 <LmHandlerPackagesNotify+0xfe>
          break;
 800e96c:	46c0      	nop			; (mov r8, r8)
 800e96e:	e002      	b.n	800e976 <LmHandlerPackagesNotify+0xfe>
          break;
 800e970:	46c0      	nop			; (mov r8, r8)
 800e972:	e000      	b.n	800e976 <LmHandlerPackagesNotify+0xfe>
          break;
 800e974:	46c0      	nop			; (mov r8, r8)
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 800e976:	210f      	movs	r1, #15
 800e978:	187b      	adds	r3, r7, r1
 800e97a:	781b      	ldrb	r3, [r3, #0]
 800e97c:	b25b      	sxtb	r3, r3
 800e97e:	b2db      	uxtb	r3, r3
 800e980:	3301      	adds	r3, #1
 800e982:	b2da      	uxtb	r2, r3
 800e984:	187b      	adds	r3, r7, r1
 800e986:	701a      	strb	r2, [r3, #0]
 800e988:	230f      	movs	r3, #15
 800e98a:	18fb      	adds	r3, r7, r3
 800e98c:	781b      	ldrb	r3, [r3, #0]
 800e98e:	b25b      	sxtb	r3, r3
 800e990:	2b04      	cmp	r3, #4
 800e992:	dc00      	bgt.n	800e996 <LmHandlerPackagesNotify+0x11e>
 800e994:	e77c      	b.n	800e890 <LmHandlerPackagesNotify+0x18>
  }
}
 800e996:	46c0      	nop			; (mov r8, r8)
 800e998:	46c0      	nop			; (mov r8, r8)
 800e99a:	46bd      	mov	sp, r7
 800e99c:	b004      	add	sp, #16
 800e99e:	bd80      	pop	{r7, pc}
 800e9a0:	20000420 	.word	0x20000420

0800e9a4 <DisplayClassUpdate>:

static void DisplayClassUpdate(DeviceClass_t deviceClass)
{
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b084      	sub	sp, #16
 800e9a8:	af02      	add	r7, sp, #8
 800e9aa:	0002      	movs	r2, r0
 800e9ac:	1dfb      	adds	r3, r7, #7
 800e9ae:	701a      	strb	r2, [r3, #0]
  MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800e9b0:	1dfb      	adds	r3, r7, #7
 800e9b2:	781b      	ldrb	r3, [r3, #0]
 800e9b4:	4a06      	ldr	r2, [pc, #24]	; (800e9d0 <DisplayClassUpdate+0x2c>)
 800e9b6:	5cd3      	ldrb	r3, [r2, r3]
 800e9b8:	001a      	movs	r2, r3
 800e9ba:	4b06      	ldr	r3, [pc, #24]	; (800e9d4 <DisplayClassUpdate+0x30>)
 800e9bc:	9200      	str	r2, [sp, #0]
 800e9be:	2200      	movs	r2, #0
 800e9c0:	2100      	movs	r1, #0
 800e9c2:	2002      	movs	r0, #2
 800e9c4:	f00d fa0c 	bl	801bde0 <UTIL_ADV_TRACE_COND_FSend>
}
 800e9c8:	46c0      	nop			; (mov r8, r8)
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	b002      	add	sp, #8
 800e9ce:	bd80      	pop	{r7, pc}
 800e9d0:	0801f868 	.word	0x0801f868
 800e9d4:	0801f84c 	.word	0x0801f84c

0800e9d8 <LmphCompliancePackageFactory>:
  .OnDeviceTimeRequest =        NULL,                           /* To be initialized by LmHandler */
};

/* Exported functions ---------------------------------------------------------*/
LmhPackage_t *LmphCompliancePackageFactory(void)
{
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	af00      	add	r7, sp, #0
  return &LmhpCompliancePackage;
 800e9dc:	4b01      	ldr	r3, [pc, #4]	; (800e9e4 <LmphCompliancePackageFactory+0xc>)
}
 800e9de:	0018      	movs	r0, r3
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	bd80      	pop	{r7, pc}
 800e9e4:	20000178 	.word	0x20000178

0800e9e8 <LmhpComplianceInit>:

/* Private  functions ---------------------------------------------------------*/
static void LmhpComplianceInit(void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize)
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b084      	sub	sp, #16
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	60f8      	str	r0, [r7, #12]
 800e9f0:	60b9      	str	r1, [r7, #8]
 800e9f2:	1dfb      	adds	r3, r7, #7
 800e9f4:	701a      	strb	r2, [r3, #0]
  if ((params != NULL) && (dataBuffer != NULL))
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d010      	beq.n	800ea1e <LmhpComplianceInit+0x36>
 800e9fc:	68bb      	ldr	r3, [r7, #8]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d00d      	beq.n	800ea1e <LmhpComplianceInit+0x36>
  {
    LmhpComplianceParams = (LmhpComplianceParams_t *)params;
 800ea02:	4b0c      	ldr	r3, [pc, #48]	; (800ea34 <LmhpComplianceInit+0x4c>)
 800ea04:	68fa      	ldr	r2, [r7, #12]
 800ea06:	601a      	str	r2, [r3, #0]
    ComplianceTestState.DataBuffer = dataBuffer;
 800ea08:	4b0b      	ldr	r3, [pc, #44]	; (800ea38 <LmhpComplianceInit+0x50>)
 800ea0a:	68ba      	ldr	r2, [r7, #8]
 800ea0c:	609a      	str	r2, [r3, #8]
    ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800ea0e:	4b0a      	ldr	r3, [pc, #40]	; (800ea38 <LmhpComplianceInit+0x50>)
 800ea10:	1dfa      	adds	r2, r7, #7
 800ea12:	7812      	ldrb	r2, [r2, #0]
 800ea14:	719a      	strb	r2, [r3, #6]
    ComplianceTestState.Initialized = true;
 800ea16:	4b08      	ldr	r3, [pc, #32]	; (800ea38 <LmhpComplianceInit+0x50>)
 800ea18:	2201      	movs	r2, #1
 800ea1a:	701a      	strb	r2, [r3, #0]
 800ea1c:	e006      	b.n	800ea2c <LmhpComplianceInit+0x44>
  }
  else
  {
    LmhpComplianceParams = NULL;
 800ea1e:	4b05      	ldr	r3, [pc, #20]	; (800ea34 <LmhpComplianceInit+0x4c>)
 800ea20:	2200      	movs	r2, #0
 800ea22:	601a      	str	r2, [r3, #0]
    ComplianceTestState.Initialized = false;
 800ea24:	4b04      	ldr	r3, [pc, #16]	; (800ea38 <LmhpComplianceInit+0x50>)
 800ea26:	2200      	movs	r2, #0
 800ea28:	701a      	strb	r2, [r3, #0]
  }
}
 800ea2a:	46c0      	nop			; (mov r8, r8)
 800ea2c:	46c0      	nop			; (mov r8, r8)
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	b004      	add	sp, #16
 800ea32:	bd80      	pop	{r7, pc}
 800ea34:	200005b4 	.word	0x200005b4
 800ea38:	200005a0 	.word	0x200005a0

0800ea3c <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized(void)
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	af00      	add	r7, sp, #0
  return ComplianceTestState.Initialized;
 800ea40:	4b02      	ldr	r3, [pc, #8]	; (800ea4c <LmhpComplianceIsInitialized+0x10>)
 800ea42:	781b      	ldrb	r3, [r3, #0]
}
 800ea44:	0018      	movs	r0, r3
 800ea46:	46bd      	mov	sp, r7
 800ea48:	bd80      	pop	{r7, pc}
 800ea4a:	46c0      	nop			; (mov r8, r8)
 800ea4c:	200005a0 	.word	0x200005a0

0800ea50 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning(void)
{
 800ea50:	b580      	push	{r7, lr}
 800ea52:	af00      	add	r7, sp, #0
  if (ComplianceTestState.Initialized == false)
 800ea54:	4b06      	ldr	r3, [pc, #24]	; (800ea70 <LmhpComplianceIsRunning+0x20>)
 800ea56:	781b      	ldrb	r3, [r3, #0]
 800ea58:	2201      	movs	r2, #1
 800ea5a:	4053      	eors	r3, r2
 800ea5c:	b2db      	uxtb	r3, r3
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d001      	beq.n	800ea66 <LmhpComplianceIsRunning+0x16>
  {
    return false;
 800ea62:	2300      	movs	r3, #0
 800ea64:	e001      	b.n	800ea6a <LmhpComplianceIsRunning+0x1a>
  }

  return ComplianceTestState.IsRunning;
 800ea66:	4b02      	ldr	r3, [pc, #8]	; (800ea70 <LmhpComplianceIsRunning+0x20>)
 800ea68:	785b      	ldrb	r3, [r3, #1]
}
 800ea6a:	0018      	movs	r0, r3
 800ea6c:	46bd      	mov	sp, r7
 800ea6e:	bd80      	pop	{r7, pc}
 800ea70:	200005a0 	.word	0x200005a0

0800ea74 <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm(McpsConfirm_t *mcpsConfirm)
{
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b082      	sub	sp, #8
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	6078      	str	r0, [r7, #4]
  if (ComplianceTestState.Initialized == false)
 800ea7c:	4b0e      	ldr	r3, [pc, #56]	; (800eab8 <LmhpComplianceOnMcpsConfirm+0x44>)
 800ea7e:	781b      	ldrb	r3, [r3, #0]
 800ea80:	2201      	movs	r2, #1
 800ea82:	4053      	eors	r3, r2
 800ea84:	b2db      	uxtb	r3, r3
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d112      	bne.n	800eab0 <LmhpComplianceOnMcpsConfirm+0x3c>
  {
    return;
  }

  if ((ComplianceTestState.IsRunning == true) &&
 800ea8a:	4b0b      	ldr	r3, [pc, #44]	; (800eab8 <LmhpComplianceOnMcpsConfirm+0x44>)
 800ea8c:	785b      	ldrb	r3, [r3, #1]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d00f      	beq.n	800eab2 <LmhpComplianceOnMcpsConfirm+0x3e>
      (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	781b      	ldrb	r3, [r3, #0]
  if ((ComplianceTestState.IsRunning == true) &&
 800ea96:	2b01      	cmp	r3, #1
 800ea98:	d10b      	bne.n	800eab2 <LmhpComplianceOnMcpsConfirm+0x3e>
      (mcpsConfirm->AckReceived != 0))
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	791b      	ldrb	r3, [r3, #4]
      (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d007      	beq.n	800eab2 <LmhpComplianceOnMcpsConfirm+0x3e>
  {
    /* Increment the compliance certification protocol downlink counter */
    ComplianceTestState.DownLinkCounter++;
 800eaa2:	4b05      	ldr	r3, [pc, #20]	; (800eab8 <LmhpComplianceOnMcpsConfirm+0x44>)
 800eaa4:	899b      	ldrh	r3, [r3, #12]
 800eaa6:	3301      	adds	r3, #1
 800eaa8:	b29a      	uxth	r2, r3
 800eaaa:	4b03      	ldr	r3, [pc, #12]	; (800eab8 <LmhpComplianceOnMcpsConfirm+0x44>)
 800eaac:	819a      	strh	r2, [r3, #12]
 800eaae:	e000      	b.n	800eab2 <LmhpComplianceOnMcpsConfirm+0x3e>
    return;
 800eab0:	46c0      	nop			; (mov r8, r8)
  }
}
 800eab2:	46bd      	mov	sp, r7
 800eab4:	b002      	add	sp, #8
 800eab6:	bd80      	pop	{r7, pc}
 800eab8:	200005a0 	.word	0x200005a0

0800eabc <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm(MlmeConfirm_t *mlmeConfirm)
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b082      	sub	sp, #8
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]
  if (ComplianceTestState.Initialized == false)
 800eac4:	4b0d      	ldr	r3, [pc, #52]	; (800eafc <LmhpComplianceOnMlmeConfirm+0x40>)
 800eac6:	781b      	ldrb	r3, [r3, #0]
 800eac8:	2201      	movs	r2, #1
 800eaca:	4053      	eors	r3, r2
 800eacc:	b2db      	uxtb	r3, r3
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d10f      	bne.n	800eaf2 <LmhpComplianceOnMlmeConfirm+0x36>
  {
    return;
  }

  if (mlmeConfirm->MlmeRequest == MLME_LINK_CHECK)
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	781b      	ldrb	r3, [r3, #0]
 800ead6:	2b04      	cmp	r3, #4
 800ead8:	d10c      	bne.n	800eaf4 <LmhpComplianceOnMlmeConfirm+0x38>
  {
    ComplianceTestState.LinkCheck = true;
 800eada:	4b08      	ldr	r3, [pc, #32]	; (800eafc <LmhpComplianceOnMlmeConfirm+0x40>)
 800eadc:	2201      	movs	r2, #1
 800eade:	739a      	strb	r2, [r3, #14]
    ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	7a1a      	ldrb	r2, [r3, #8]
 800eae4:	4b05      	ldr	r3, [pc, #20]	; (800eafc <LmhpComplianceOnMlmeConfirm+0x40>)
 800eae6:	73da      	strb	r2, [r3, #15]
    ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	7a5a      	ldrb	r2, [r3, #9]
 800eaec:	4b03      	ldr	r3, [pc, #12]	; (800eafc <LmhpComplianceOnMlmeConfirm+0x40>)
 800eaee:	741a      	strb	r2, [r3, #16]
 800eaf0:	e000      	b.n	800eaf4 <LmhpComplianceOnMlmeConfirm+0x38>
    return;
 800eaf2:	46c0      	nop			; (mov r8, r8)
  }
}
 800eaf4:	46bd      	mov	sp, r7
 800eaf6:	b002      	add	sp, #8
 800eaf8:	bd80      	pop	{r7, pc}
 800eafa:	46c0      	nop			; (mov r8, r8)
 800eafc:	200005a0 	.word	0x200005a0

0800eb00 <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess(void)
{
 800eb00:	b5b0      	push	{r4, r5, r7, lr}
 800eb02:	b084      	sub	sp, #16
 800eb04:	af00      	add	r7, sp, #0
  if (ComplianceTestState.Initialized == false)
 800eb06:	4b32      	ldr	r3, [pc, #200]	; (800ebd0 <LmhpComplianceTxProcess+0xd0>)
 800eb08:	781b      	ldrb	r3, [r3, #0]
 800eb0a:	2201      	movs	r2, #1
 800eb0c:	4053      	eors	r3, r2
 800eb0e:	b2db      	uxtb	r3, r3
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d002      	beq.n	800eb1a <LmhpComplianceTxProcess+0x1a>
  {
    return LORAMAC_HANDLER_ERROR;
 800eb14:	2301      	movs	r3, #1
 800eb16:	425b      	negs	r3, r3
 800eb18:	e056      	b.n	800ebc8 <LmhpComplianceTxProcess+0xc8>
  }

  if (ComplianceTestState.LinkCheck == true)
 800eb1a:	4b2d      	ldr	r3, [pc, #180]	; (800ebd0 <LmhpComplianceTxProcess+0xd0>)
 800eb1c:	7b9b      	ldrb	r3, [r3, #14]
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d019      	beq.n	800eb56 <LmhpComplianceTxProcess+0x56>
  {
    ComplianceTestState.LinkCheck = false;
 800eb22:	4b2b      	ldr	r3, [pc, #172]	; (800ebd0 <LmhpComplianceTxProcess+0xd0>)
 800eb24:	2200      	movs	r2, #0
 800eb26:	739a      	strb	r2, [r3, #14]
    ComplianceTestState.DataBufferSize = 3;
 800eb28:	4b29      	ldr	r3, [pc, #164]	; (800ebd0 <LmhpComplianceTxProcess+0xd0>)
 800eb2a:	2203      	movs	r2, #3
 800eb2c:	71da      	strb	r2, [r3, #7]
    ComplianceTestState.DataBuffer[0] = 5;
 800eb2e:	4b28      	ldr	r3, [pc, #160]	; (800ebd0 <LmhpComplianceTxProcess+0xd0>)
 800eb30:	689b      	ldr	r3, [r3, #8]
 800eb32:	2205      	movs	r2, #5
 800eb34:	701a      	strb	r2, [r3, #0]
    ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 800eb36:	4b26      	ldr	r3, [pc, #152]	; (800ebd0 <LmhpComplianceTxProcess+0xd0>)
 800eb38:	689b      	ldr	r3, [r3, #8]
 800eb3a:	3301      	adds	r3, #1
 800eb3c:	4a24      	ldr	r2, [pc, #144]	; (800ebd0 <LmhpComplianceTxProcess+0xd0>)
 800eb3e:	7bd2      	ldrb	r2, [r2, #15]
 800eb40:	701a      	strb	r2, [r3, #0]
    ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 800eb42:	4b23      	ldr	r3, [pc, #140]	; (800ebd0 <LmhpComplianceTxProcess+0xd0>)
 800eb44:	689b      	ldr	r3, [r3, #8]
 800eb46:	3302      	adds	r3, #2
 800eb48:	4a21      	ldr	r2, [pc, #132]	; (800ebd0 <LmhpComplianceTxProcess+0xd0>)
 800eb4a:	7c12      	ldrb	r2, [r2, #16]
 800eb4c:	701a      	strb	r2, [r3, #0]
    ComplianceTestState.State = 1;
 800eb4e:	4b20      	ldr	r3, [pc, #128]	; (800ebd0 <LmhpComplianceTxProcess+0xd0>)
 800eb50:	2201      	movs	r2, #1
 800eb52:	709a      	strb	r2, [r3, #2]
 800eb54:	e01c      	b.n	800eb90 <LmhpComplianceTxProcess+0x90>
  }
  else
  {
    switch (ComplianceTestState.State)
 800eb56:	4b1e      	ldr	r3, [pc, #120]	; (800ebd0 <LmhpComplianceTxProcess+0xd0>)
 800eb58:	789b      	ldrb	r3, [r3, #2]
 800eb5a:	2b01      	cmp	r3, #1
 800eb5c:	d005      	beq.n	800eb6a <LmhpComplianceTxProcess+0x6a>
 800eb5e:	2b04      	cmp	r3, #4
 800eb60:	d116      	bne.n	800eb90 <LmhpComplianceTxProcess+0x90>
    {
      case 4:
        ComplianceTestState.State = 1;
 800eb62:	4b1b      	ldr	r3, [pc, #108]	; (800ebd0 <LmhpComplianceTxProcess+0xd0>)
 800eb64:	2201      	movs	r2, #1
 800eb66:	709a      	strb	r2, [r3, #2]
        break;
 800eb68:	e012      	b.n	800eb90 <LmhpComplianceTxProcess+0x90>
      case 1:
        ComplianceTestState.DataBufferSize = 2;
 800eb6a:	4b19      	ldr	r3, [pc, #100]	; (800ebd0 <LmhpComplianceTxProcess+0xd0>)
 800eb6c:	2202      	movs	r2, #2
 800eb6e:	71da      	strb	r2, [r3, #7]
        ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 800eb70:	4b17      	ldr	r3, [pc, #92]	; (800ebd0 <LmhpComplianceTxProcess+0xd0>)
 800eb72:	899b      	ldrh	r3, [r3, #12]
 800eb74:	0a1b      	lsrs	r3, r3, #8
 800eb76:	b29a      	uxth	r2, r3
 800eb78:	4b15      	ldr	r3, [pc, #84]	; (800ebd0 <LmhpComplianceTxProcess+0xd0>)
 800eb7a:	689b      	ldr	r3, [r3, #8]
 800eb7c:	b2d2      	uxtb	r2, r2
 800eb7e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 800eb80:	4b13      	ldr	r3, [pc, #76]	; (800ebd0 <LmhpComplianceTxProcess+0xd0>)
 800eb82:	899a      	ldrh	r2, [r3, #12]
 800eb84:	4b12      	ldr	r3, [pc, #72]	; (800ebd0 <LmhpComplianceTxProcess+0xd0>)
 800eb86:	689b      	ldr	r3, [r3, #8]
 800eb88:	3301      	adds	r3, #1
 800eb8a:	b2d2      	uxtb	r2, r2
 800eb8c:	701a      	strb	r2, [r3, #0]
        break;
 800eb8e:	46c0      	nop			; (mov r8, r8)
    }
  }
  LmHandlerAppData_t appData =
 800eb90:	2508      	movs	r5, #8
 800eb92:	197b      	adds	r3, r7, r5
 800eb94:	22e0      	movs	r2, #224	; 0xe0
 800eb96:	701a      	strb	r2, [r3, #0]
  {
    .Buffer = ComplianceTestState.DataBuffer,
    .BufferSize = ComplianceTestState.DataBufferSize,
 800eb98:	4b0d      	ldr	r3, [pc, #52]	; (800ebd0 <LmhpComplianceTxProcess+0xd0>)
 800eb9a:	79da      	ldrb	r2, [r3, #7]
  LmHandlerAppData_t appData =
 800eb9c:	197b      	adds	r3, r7, r5
 800eb9e:	705a      	strb	r2, [r3, #1]
    .Buffer = ComplianceTestState.DataBuffer,
 800eba0:	4b0b      	ldr	r3, [pc, #44]	; (800ebd0 <LmhpComplianceTxProcess+0xd0>)
 800eba2:	689a      	ldr	r2, [r3, #8]
  LmHandlerAppData_t appData =
 800eba4:	197b      	adds	r3, r7, r5
 800eba6:	605a      	str	r2, [r3, #4]
    .Port = COMPLIANCE_PORT
  };
  TimerTime_t nextTxIn = 0;
 800eba8:	2300      	movs	r3, #0
 800ebaa:	607b      	str	r3, [r7, #4]

  /* Schedule next transmission */
  TimerStart(&ComplianceTxNextPacketTimer);
 800ebac:	4b09      	ldr	r3, [pc, #36]	; (800ebd4 <LmhpComplianceTxProcess+0xd4>)
 800ebae:	0018      	movs	r0, r3
 800ebb0:	f00d ffe2 	bl	801cb78 <UTIL_TIMER_Start>

  return LmhpCompliancePackage.OnSendRequest(&appData, (LmHandlerMsgTypes_t)ComplianceTestState.IsTxConfirmed, &nextTxIn,
 800ebb4:	4b08      	ldr	r3, [pc, #32]	; (800ebd8 <LmhpComplianceTxProcess+0xd8>)
 800ebb6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ebb8:	4b05      	ldr	r3, [pc, #20]	; (800ebd0 <LmhpComplianceTxProcess+0xd0>)
 800ebba:	791b      	ldrb	r3, [r3, #4]
 800ebbc:	0019      	movs	r1, r3
 800ebbe:	1d3a      	adds	r2, r7, #4
 800ebc0:	1978      	adds	r0, r7, r5
 800ebc2:	2301      	movs	r3, #1
 800ebc4:	47a0      	blx	r4
 800ebc6:	0003      	movs	r3, r0
                                             true);
}
 800ebc8:	0018      	movs	r0, r3
 800ebca:	46bd      	mov	sp, r7
 800ebcc:	b004      	add	sp, #16
 800ebce:	bdb0      	pop	{r4, r5, r7, pc}
 800ebd0:	200005a0 	.word	0x200005a0
 800ebd4:	20000588 	.word	0x20000588
 800ebd8:	20000178 	.word	0x20000178

0800ebdc <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication(McpsIndication_t *mcpsIndication)
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b0a2      	sub	sp, #136	; 0x88
 800ebe0:	af02      	add	r7, sp, #8
 800ebe2:	6078      	str	r0, [r7, #4]
  if (ComplianceTestState.Initialized == false)
 800ebe4:	4be1      	ldr	r3, [pc, #900]	; (800ef6c <LmhpComplianceOnMcpsIndication+0x390>)
 800ebe6:	781b      	ldrb	r3, [r3, #0]
 800ebe8:	2201      	movs	r2, #1
 800ebea:	4053      	eors	r3, r2
 800ebec:	b2db      	uxtb	r3, r3
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d000      	beq.n	800ebf4 <LmhpComplianceOnMcpsIndication+0x18>
 800ebf2:	e1b2      	b.n	800ef5a <LmhpComplianceOnMcpsIndication+0x37e>
  {
    return;
  }

  if (mcpsIndication->RxData == false)
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	7b5b      	ldrb	r3, [r3, #13]
 800ebf8:	2201      	movs	r2, #1
 800ebfa:	4053      	eors	r3, r2
 800ebfc:	b2db      	uxtb	r3, r3
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d000      	beq.n	800ec04 <LmhpComplianceOnMcpsIndication+0x28>
 800ec02:	e1ac      	b.n	800ef5e <LmhpComplianceOnMcpsIndication+0x382>
  {
    return;
  }

  if ((ComplianceTestState.IsRunning == true) &&
 800ec04:	4bd9      	ldr	r3, [pc, #868]	; (800ef6c <LmhpComplianceOnMcpsIndication+0x390>)
 800ec06:	785b      	ldrb	r3, [r3, #1]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d00c      	beq.n	800ec26 <LmhpComplianceOnMcpsIndication+0x4a>
      (mcpsIndication->AckReceived == 0))
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	7c9b      	ldrb	r3, [r3, #18]
 800ec10:	2201      	movs	r2, #1
 800ec12:	4053      	eors	r3, r2
 800ec14:	b2db      	uxtb	r3, r3
  if ((ComplianceTestState.IsRunning == true) &&
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d005      	beq.n	800ec26 <LmhpComplianceOnMcpsIndication+0x4a>
  {
    /* Increment the compliance certification protocol downlink counter */
    ComplianceTestState.DownLinkCounter++;
 800ec1a:	4bd4      	ldr	r3, [pc, #848]	; (800ef6c <LmhpComplianceOnMcpsIndication+0x390>)
 800ec1c:	899b      	ldrh	r3, [r3, #12]
 800ec1e:	3301      	adds	r3, #1
 800ec20:	b29a      	uxth	r2, r3
 800ec22:	4bd2      	ldr	r3, [pc, #840]	; (800ef6c <LmhpComplianceOnMcpsIndication+0x390>)
 800ec24:	819a      	strh	r2, [r3, #12]
  }

  if (mcpsIndication->Port != COMPLIANCE_PORT)
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	78db      	ldrb	r3, [r3, #3]
 800ec2a:	2be0      	cmp	r3, #224	; 0xe0
 800ec2c:	d000      	beq.n	800ec30 <LmhpComplianceOnMcpsIndication+0x54>
 800ec2e:	e198      	b.n	800ef62 <LmhpComplianceOnMcpsIndication+0x386>
  {
    return;
  }

  if (ComplianceTestState.IsRunning == false)
 800ec30:	4bce      	ldr	r3, [pc, #824]	; (800ef6c <LmhpComplianceOnMcpsIndication+0x390>)
 800ec32:	785b      	ldrb	r3, [r3, #1]
 800ec34:	2201      	movs	r2, #1
 800ec36:	4053      	eors	r3, r2
 800ec38:	b2db      	uxtb	r3, r3
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d063      	beq.n	800ed06 <LmhpComplianceOnMcpsIndication+0x12a>
  {
    /* Check compliance test enable command (i) */
    if ((mcpsIndication->BufferSize == 4) &&
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	7b1b      	ldrb	r3, [r3, #12]
 800ec42:	2b04      	cmp	r3, #4
 800ec44:	d000      	beq.n	800ec48 <LmhpComplianceOnMcpsIndication+0x6c>
 800ec46:	e1a0      	b.n	800ef8a <LmhpComplianceOnMcpsIndication+0x3ae>
        (mcpsIndication->Buffer[0] == 0x01) &&
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	689b      	ldr	r3, [r3, #8]
 800ec4c:	781b      	ldrb	r3, [r3, #0]
    if ((mcpsIndication->BufferSize == 4) &&
 800ec4e:	2b01      	cmp	r3, #1
 800ec50:	d000      	beq.n	800ec54 <LmhpComplianceOnMcpsIndication+0x78>
 800ec52:	e19a      	b.n	800ef8a <LmhpComplianceOnMcpsIndication+0x3ae>
        (mcpsIndication->Buffer[1] == 0x01) &&
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	689b      	ldr	r3, [r3, #8]
 800ec58:	3301      	adds	r3, #1
 800ec5a:	781b      	ldrb	r3, [r3, #0]
        (mcpsIndication->Buffer[0] == 0x01) &&
 800ec5c:	2b01      	cmp	r3, #1
 800ec5e:	d000      	beq.n	800ec62 <LmhpComplianceOnMcpsIndication+0x86>
 800ec60:	e193      	b.n	800ef8a <LmhpComplianceOnMcpsIndication+0x3ae>
        (mcpsIndication->Buffer[2] == 0x01) &&
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	689b      	ldr	r3, [r3, #8]
 800ec66:	3302      	adds	r3, #2
 800ec68:	781b      	ldrb	r3, [r3, #0]
        (mcpsIndication->Buffer[1] == 0x01) &&
 800ec6a:	2b01      	cmp	r3, #1
 800ec6c:	d000      	beq.n	800ec70 <LmhpComplianceOnMcpsIndication+0x94>
 800ec6e:	e18c      	b.n	800ef8a <LmhpComplianceOnMcpsIndication+0x3ae>
        (mcpsIndication->Buffer[3] == 0x01))
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	689b      	ldr	r3, [r3, #8]
 800ec74:	3303      	adds	r3, #3
 800ec76:	781b      	ldrb	r3, [r3, #0]
        (mcpsIndication->Buffer[2] == 0x01) &&
 800ec78:	2b01      	cmp	r3, #1
 800ec7a:	d000      	beq.n	800ec7e <LmhpComplianceOnMcpsIndication+0xa2>
 800ec7c:	e185      	b.n	800ef8a <LmhpComplianceOnMcpsIndication+0x3ae>
    {
      MibRequestConfirm_t mibReq;

      /* Initialize compliance test mode context */
      ComplianceTestState.IsTxConfirmed = false;
 800ec7e:	4bbb      	ldr	r3, [pc, #748]	; (800ef6c <LmhpComplianceOnMcpsIndication+0x390>)
 800ec80:	2200      	movs	r2, #0
 800ec82:	711a      	strb	r2, [r3, #4]
      ComplianceTestState.Port = 224;
 800ec84:	4bb9      	ldr	r3, [pc, #740]	; (800ef6c <LmhpComplianceOnMcpsIndication+0x390>)
 800ec86:	22e0      	movs	r2, #224	; 0xe0
 800ec88:	715a      	strb	r2, [r3, #5]
      ComplianceTestState.DataBufferSize = 2;
 800ec8a:	4bb8      	ldr	r3, [pc, #736]	; (800ef6c <LmhpComplianceOnMcpsIndication+0x390>)
 800ec8c:	2202      	movs	r2, #2
 800ec8e:	71da      	strb	r2, [r3, #7]
      ComplianceTestState.DownLinkCounter = 0;
 800ec90:	4bb6      	ldr	r3, [pc, #728]	; (800ef6c <LmhpComplianceOnMcpsIndication+0x390>)
 800ec92:	2200      	movs	r2, #0
 800ec94:	819a      	strh	r2, [r3, #12]
      ComplianceTestState.LinkCheck = false;
 800ec96:	4bb5      	ldr	r3, [pc, #724]	; (800ef6c <LmhpComplianceOnMcpsIndication+0x390>)
 800ec98:	2200      	movs	r2, #0
 800ec9a:	739a      	strb	r2, [r3, #14]
      ComplianceTestState.DemodMargin = 0;
 800ec9c:	4bb3      	ldr	r3, [pc, #716]	; (800ef6c <LmhpComplianceOnMcpsIndication+0x390>)
 800ec9e:	2200      	movs	r2, #0
 800eca0:	73da      	strb	r2, [r3, #15]
      ComplianceTestState.NbGateways = 0;
 800eca2:	4bb2      	ldr	r3, [pc, #712]	; (800ef6c <LmhpComplianceOnMcpsIndication+0x390>)
 800eca4:	2200      	movs	r2, #0
 800eca6:	741a      	strb	r2, [r3, #16]
      ComplianceTestState.IsRunning = true;
 800eca8:	4bb0      	ldr	r3, [pc, #704]	; (800ef6c <LmhpComplianceOnMcpsIndication+0x390>)
 800ecaa:	2201      	movs	r2, #1
 800ecac:	705a      	strb	r2, [r3, #1]
      ComplianceTestState.State = 1;
 800ecae:	4baf      	ldr	r3, [pc, #700]	; (800ef6c <LmhpComplianceOnMcpsIndication+0x390>)
 800ecb0:	2201      	movs	r2, #1
 800ecb2:	709a      	strb	r2, [r3, #2]

      /* Enable ADR while in compliance test mode */
      mibReq.Type = MIB_ADR;
 800ecb4:	2108      	movs	r1, #8
 800ecb6:	187b      	adds	r3, r7, r1
 800ecb8:	2204      	movs	r2, #4
 800ecba:	701a      	strb	r2, [r3, #0]
      mibReq.Param.AdrEnable = true;
 800ecbc:	187b      	adds	r3, r7, r1
 800ecbe:	2201      	movs	r2, #1
 800ecc0:	711a      	strb	r2, [r3, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 800ecc2:	187b      	adds	r3, r7, r1
 800ecc4:	0018      	movs	r0, r3
 800ecc6:	f004 fe57 	bl	8013978 <LoRaMacMibSetRequestConfirm>

      /* Disable duty cycle enforcement while in compliance test mode */
      LoRaMacTestSetDutyCycleOn(false);
 800ecca:	2000      	movs	r0, #0
 800eccc:	f005 fc80 	bl	80145d0 <LoRaMacTestSetDutyCycleOn>

      /* Stop peripherals */
      if (LmhpComplianceParams->StopPeripherals != NULL)
 800ecd0:	4ba7      	ldr	r3, [pc, #668]	; (800ef70 <LmhpComplianceOnMcpsIndication+0x394>)
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	685b      	ldr	r3, [r3, #4]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d003      	beq.n	800ece2 <LmhpComplianceOnMcpsIndication+0x106>
      {
        LmhpComplianceParams->StopPeripherals();
 800ecda:	4ba5      	ldr	r3, [pc, #660]	; (800ef70 <LmhpComplianceOnMcpsIndication+0x394>)
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	685b      	ldr	r3, [r3, #4]
 800ece0:	4798      	blx	r3
      }
      /* Initialize compliance protocol transmission timer */
      TimerInit(&ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent);
 800ece2:	4ba4      	ldr	r3, [pc, #656]	; (800ef74 <LmhpComplianceOnMcpsIndication+0x398>)
 800ece4:	2201      	movs	r2, #1
 800ece6:	4251      	negs	r1, r2
 800ece8:	48a3      	ldr	r0, [pc, #652]	; (800ef78 <LmhpComplianceOnMcpsIndication+0x39c>)
 800ecea:	2200      	movs	r2, #0
 800ecec:	9200      	str	r2, [sp, #0]
 800ecee:	2200      	movs	r2, #0
 800ecf0:	f00d ff0a 	bl	801cb08 <UTIL_TIMER_Create>
      TimerSetValue(&ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE);
 800ecf4:	4aa1      	ldr	r2, [pc, #644]	; (800ef7c <LmhpComplianceOnMcpsIndication+0x3a0>)
 800ecf6:	4ba0      	ldr	r3, [pc, #640]	; (800ef78 <LmhpComplianceOnMcpsIndication+0x39c>)
 800ecf8:	0011      	movs	r1, r2
 800ecfa:	0018      	movs	r0, r3
 800ecfc:	f00e f82c 	bl	801cd58 <UTIL_TIMER_SetPeriod>

      /* Confirm compliance test protocol activation */
      LmhpComplianceTxProcess();
 800ed00:	f7ff fefe 	bl	800eb00 <LmhpComplianceTxProcess>
 800ed04:	e141      	b.n	800ef8a <LmhpComplianceOnMcpsIndication+0x3ae>
    }
  }
  else
  {
    /* Parse compliance test protocol */
    ComplianceTestState.State = mcpsIndication->Buffer[0];
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	689b      	ldr	r3, [r3, #8]
 800ed0a:	781a      	ldrb	r2, [r3, #0]
 800ed0c:	4b97      	ldr	r3, [pc, #604]	; (800ef6c <LmhpComplianceOnMcpsIndication+0x390>)
 800ed0e:	709a      	strb	r2, [r3, #2]
    switch (ComplianceTestState.State)
 800ed10:	4b96      	ldr	r3, [pc, #600]	; (800ef6c <LmhpComplianceOnMcpsIndication+0x390>)
 800ed12:	789b      	ldrb	r3, [r3, #2]
 800ed14:	2b0a      	cmp	r3, #10
 800ed16:	d900      	bls.n	800ed1a <LmhpComplianceOnMcpsIndication+0x13e>
 800ed18:	e125      	b.n	800ef66 <LmhpComplianceOnMcpsIndication+0x38a>
 800ed1a:	009a      	lsls	r2, r3, #2
 800ed1c:	4b98      	ldr	r3, [pc, #608]	; (800ef80 <LmhpComplianceOnMcpsIndication+0x3a4>)
 800ed1e:	18d3      	adds	r3, r2, r3
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	469f      	mov	pc, r3
    {
      case 0: /* Check compliance test disable command (ii) */
      {
        MibRequestConfirm_t mibReq;

        TimerStop(&ComplianceTxNextPacketTimer);
 800ed24:	4b94      	ldr	r3, [pc, #592]	; (800ef78 <LmhpComplianceOnMcpsIndication+0x39c>)
 800ed26:	0018      	movs	r0, r3
 800ed28:	f00d ff9e 	bl	801cc68 <UTIL_TIMER_Stop>

        /* Disable compliance test mode and reset the downlink counter. */
        ComplianceTestState.DownLinkCounter = 0;
 800ed2c:	4b8f      	ldr	r3, [pc, #572]	; (800ef6c <LmhpComplianceOnMcpsIndication+0x390>)
 800ed2e:	2200      	movs	r2, #0
 800ed30:	819a      	strh	r2, [r3, #12]
        ComplianceTestState.IsRunning = false;
 800ed32:	4b8e      	ldr	r3, [pc, #568]	; (800ef6c <LmhpComplianceOnMcpsIndication+0x390>)
 800ed34:	2200      	movs	r2, #0
 800ed36:	705a      	strb	r2, [r3, #1]

        /* Restore previous ADR seeting */
        mibReq.Type = MIB_ADR;
 800ed38:	2108      	movs	r1, #8
 800ed3a:	187b      	adds	r3, r7, r1
 800ed3c:	2204      	movs	r2, #4
 800ed3e:	701a      	strb	r2, [r3, #0]
        mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800ed40:	4b8b      	ldr	r3, [pc, #556]	; (800ef70 <LmhpComplianceOnMcpsIndication+0x394>)
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	781a      	ldrb	r2, [r3, #0]
 800ed46:	187b      	adds	r3, r7, r1
 800ed48:	711a      	strb	r2, [r3, #4]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800ed4a:	187b      	adds	r3, r7, r1
 800ed4c:	0018      	movs	r0, r3
 800ed4e:	f004 fe13 	bl	8013978 <LoRaMacMibSetRequestConfirm>

        /* Enable duty cycle enforcement */
        LoRaMacTestSetDutyCycleOn(LmhpComplianceParams->DutyCycleEnabled);
 800ed52:	4b87      	ldr	r3, [pc, #540]	; (800ef70 <LmhpComplianceOnMcpsIndication+0x394>)
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	785b      	ldrb	r3, [r3, #1]
 800ed58:	0018      	movs	r0, r3
 800ed5a:	f005 fc39 	bl	80145d0 <LoRaMacTestSetDutyCycleOn>

        /* Restart peripherals */
        if (LmhpComplianceParams->StartPeripherals != NULL)
 800ed5e:	4b84      	ldr	r3, [pc, #528]	; (800ef70 <LmhpComplianceOnMcpsIndication+0x394>)
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	689b      	ldr	r3, [r3, #8]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d100      	bne.n	800ed6a <LmhpComplianceOnMcpsIndication+0x18e>
 800ed68:	e10e      	b.n	800ef88 <LmhpComplianceOnMcpsIndication+0x3ac>
        {
          LmhpComplianceParams->StartPeripherals();
 800ed6a:	4b81      	ldr	r3, [pc, #516]	; (800ef70 <LmhpComplianceOnMcpsIndication+0x394>)
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	689b      	ldr	r3, [r3, #8]
 800ed70:	4798      	blx	r3
        }
      }
      break;
 800ed72:	e109      	b.n	800ef88 <LmhpComplianceOnMcpsIndication+0x3ac>
      case 1: /* (iii, iv) */
        ComplianceTestState.DataBufferSize = 2;
 800ed74:	4b7d      	ldr	r3, [pc, #500]	; (800ef6c <LmhpComplianceOnMcpsIndication+0x390>)
 800ed76:	2202      	movs	r2, #2
 800ed78:	71da      	strb	r2, [r3, #7]
        break;
 800ed7a:	e106      	b.n	800ef8a <LmhpComplianceOnMcpsIndication+0x3ae>
      case 2: /* Enable confirmed messages (v) */
        ComplianceTestState.IsTxConfirmed = true;
 800ed7c:	4b7b      	ldr	r3, [pc, #492]	; (800ef6c <LmhpComplianceOnMcpsIndication+0x390>)
 800ed7e:	2201      	movs	r2, #1
 800ed80:	711a      	strb	r2, [r3, #4]
        ComplianceTestState.State = 1;
 800ed82:	4b7a      	ldr	r3, [pc, #488]	; (800ef6c <LmhpComplianceOnMcpsIndication+0x390>)
 800ed84:	2201      	movs	r2, #1
 800ed86:	709a      	strb	r2, [r3, #2]
        break;
 800ed88:	e0ff      	b.n	800ef8a <LmhpComplianceOnMcpsIndication+0x3ae>
      case 3:  /* Disable confirmed messages (vi) */
        ComplianceTestState.IsTxConfirmed = false;
 800ed8a:	4b78      	ldr	r3, [pc, #480]	; (800ef6c <LmhpComplianceOnMcpsIndication+0x390>)
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	711a      	strb	r2, [r3, #4]
        ComplianceTestState.State = 1;
 800ed90:	4b76      	ldr	r3, [pc, #472]	; (800ef6c <LmhpComplianceOnMcpsIndication+0x390>)
 800ed92:	2201      	movs	r2, #1
 800ed94:	709a      	strb	r2, [r3, #2]
        break;
 800ed96:	e0f8      	b.n	800ef8a <LmhpComplianceOnMcpsIndication+0x3ae>
      case 4: /* (vii) */
        ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	7b1a      	ldrb	r2, [r3, #12]
 800ed9c:	4b73      	ldr	r3, [pc, #460]	; (800ef6c <LmhpComplianceOnMcpsIndication+0x390>)
 800ed9e:	71da      	strb	r2, [r3, #7]

        ComplianceTestState.DataBuffer[0] = 4;
 800eda0:	4b72      	ldr	r3, [pc, #456]	; (800ef6c <LmhpComplianceOnMcpsIndication+0x390>)
 800eda2:	689b      	ldr	r3, [r3, #8]
 800eda4:	2204      	movs	r2, #4
 800eda6:	701a      	strb	r2, [r3, #0]
        for (uint8_t i = 1; i < MIN(ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize); i++)
 800eda8:	237f      	movs	r3, #127	; 0x7f
 800edaa:	18fb      	adds	r3, r7, r3
 800edac:	2201      	movs	r2, #1
 800edae:	701a      	strb	r2, [r3, #0]
 800edb0:	e013      	b.n	800edda <LmhpComplianceOnMcpsIndication+0x1fe>
        {
          ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	689a      	ldr	r2, [r3, #8]
 800edb6:	207f      	movs	r0, #127	; 0x7f
 800edb8:	183b      	adds	r3, r7, r0
 800edba:	781b      	ldrb	r3, [r3, #0]
 800edbc:	18d3      	adds	r3, r2, r3
 800edbe:	781a      	ldrb	r2, [r3, #0]
 800edc0:	4b6a      	ldr	r3, [pc, #424]	; (800ef6c <LmhpComplianceOnMcpsIndication+0x390>)
 800edc2:	6899      	ldr	r1, [r3, #8]
 800edc4:	183b      	adds	r3, r7, r0
 800edc6:	781b      	ldrb	r3, [r3, #0]
 800edc8:	18cb      	adds	r3, r1, r3
 800edca:	3201      	adds	r2, #1
 800edcc:	b2d2      	uxtb	r2, r2
 800edce:	701a      	strb	r2, [r3, #0]
        for (uint8_t i = 1; i < MIN(ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize); i++)
 800edd0:	183b      	adds	r3, r7, r0
 800edd2:	781a      	ldrb	r2, [r3, #0]
 800edd4:	183b      	adds	r3, r7, r0
 800edd6:	3201      	adds	r2, #1
 800edd8:	701a      	strb	r2, [r3, #0]
 800edda:	4b64      	ldr	r3, [pc, #400]	; (800ef6c <LmhpComplianceOnMcpsIndication+0x390>)
 800eddc:	799a      	ldrb	r2, [r3, #6]
 800edde:	4b63      	ldr	r3, [pc, #396]	; (800ef6c <LmhpComplianceOnMcpsIndication+0x390>)
 800ede0:	79db      	ldrb	r3, [r3, #7]
 800ede2:	1c18      	adds	r0, r3, #0
 800ede4:	1c11      	adds	r1, r2, #0
 800ede6:	b2ca      	uxtb	r2, r1
 800ede8:	b2c3      	uxtb	r3, r0
 800edea:	429a      	cmp	r2, r3
 800edec:	d900      	bls.n	800edf0 <LmhpComplianceOnMcpsIndication+0x214>
 800edee:	1c01      	adds	r1, r0, #0
 800edf0:	b2cb      	uxtb	r3, r1
 800edf2:	227f      	movs	r2, #127	; 0x7f
 800edf4:	18ba      	adds	r2, r7, r2
 800edf6:	7812      	ldrb	r2, [r2, #0]
 800edf8:	429a      	cmp	r2, r3
 800edfa:	d3da      	bcc.n	800edb2 <LmhpComplianceOnMcpsIndication+0x1d6>
        }
        break;
 800edfc:	e0c5      	b.n	800ef8a <LmhpComplianceOnMcpsIndication+0x3ae>
      case 5: /* (viii) */
      {
        MlmeReq_t mlmeReq;

        mlmeReq.Type = MLME_LINK_CHECK;
 800edfe:	2168      	movs	r1, #104	; 0x68
 800ee00:	187b      	adds	r3, r7, r1
 800ee02:	2204      	movs	r2, #4
 800ee04:	701a      	strb	r2, [r3, #0]

        LoRaMacMlmeRequest(&mlmeReq);
 800ee06:	187b      	adds	r3, r7, r1
 800ee08:	0018      	movs	r0, r3
 800ee0a:	f005 f93b 	bl	8014084 <LoRaMacMlmeRequest>
      }
      break;
 800ee0e:	e0bc      	b.n	800ef8a <LmhpComplianceOnMcpsIndication+0x3ae>
      case 6: /* (ix) */
      {
        MibRequestConfirm_t mibReq;

        TimerStop(&ComplianceTxNextPacketTimer);
 800ee10:	4b59      	ldr	r3, [pc, #356]	; (800ef78 <LmhpComplianceOnMcpsIndication+0x39c>)
 800ee12:	0018      	movs	r0, r3
 800ee14:	f00d ff28 	bl	801cc68 <UTIL_TIMER_Stop>

        /* Disable TestMode and revert back to normal operation */
        /* Disable compliance test mode and reset the downlink counter. */
        ComplianceTestState.DownLinkCounter = 0;
 800ee18:	4b54      	ldr	r3, [pc, #336]	; (800ef6c <LmhpComplianceOnMcpsIndication+0x390>)
 800ee1a:	2200      	movs	r2, #0
 800ee1c:	819a      	strh	r2, [r3, #12]
        ComplianceTestState.IsRunning = false;
 800ee1e:	4b53      	ldr	r3, [pc, #332]	; (800ef6c <LmhpComplianceOnMcpsIndication+0x390>)
 800ee20:	2200      	movs	r2, #0
 800ee22:	705a      	strb	r2, [r3, #1]

        /* Restore previous ADR seeting */
        mibReq.Type = MIB_ADR;
 800ee24:	2108      	movs	r1, #8
 800ee26:	187b      	adds	r3, r7, r1
 800ee28:	2204      	movs	r2, #4
 800ee2a:	701a      	strb	r2, [r3, #0]
        mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800ee2c:	4b50      	ldr	r3, [pc, #320]	; (800ef70 <LmhpComplianceOnMcpsIndication+0x394>)
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	781a      	ldrb	r2, [r3, #0]
 800ee32:	187b      	adds	r3, r7, r1
 800ee34:	711a      	strb	r2, [r3, #4]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800ee36:	187b      	adds	r3, r7, r1
 800ee38:	0018      	movs	r0, r3
 800ee3a:	f004 fd9d 	bl	8013978 <LoRaMacMibSetRequestConfirm>

        /* Enable duty cycle enforcement */
        LoRaMacTestSetDutyCycleOn(LmhpComplianceParams->DutyCycleEnabled);
 800ee3e:	4b4c      	ldr	r3, [pc, #304]	; (800ef70 <LmhpComplianceOnMcpsIndication+0x394>)
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	785b      	ldrb	r3, [r3, #1]
 800ee44:	0018      	movs	r0, r3
 800ee46:	f005 fbc3 	bl	80145d0 <LoRaMacTestSetDutyCycleOn>

        /* Restart peripherals */
        if (LmhpComplianceParams->StartPeripherals != NULL)
 800ee4a:	4b49      	ldr	r3, [pc, #292]	; (800ef70 <LmhpComplianceOnMcpsIndication+0x394>)
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	689b      	ldr	r3, [r3, #8]
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d003      	beq.n	800ee5c <LmhpComplianceOnMcpsIndication+0x280>
        {
          LmhpComplianceParams->StartPeripherals();
 800ee54:	4b46      	ldr	r3, [pc, #280]	; (800ef70 <LmhpComplianceOnMcpsIndication+0x394>)
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	689b      	ldr	r3, [r3, #8]
 800ee5a:	4798      	blx	r3
        }

        LmhpCompliancePackage.OnJoinRequest(ACTIVATION_TYPE_OTAA);
 800ee5c:	4b49      	ldr	r3, [pc, #292]	; (800ef84 <LmhpComplianceOnMcpsIndication+0x3a8>)
 800ee5e:	6a1b      	ldr	r3, [r3, #32]
 800ee60:	2002      	movs	r0, #2
 800ee62:	4798      	blx	r3
      }
      break;
 800ee64:	e091      	b.n	800ef8a <LmhpComplianceOnMcpsIndication+0x3ae>
      case 7: /* (x) */
      {
        MlmeReq_t mlmeReq;
        if (mcpsIndication->BufferSize == 3)
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	7b1b      	ldrb	r3, [r3, #12]
 800ee6a:	2b03      	cmp	r3, #3
 800ee6c:	d114      	bne.n	800ee98 <LmhpComplianceOnMcpsIndication+0x2bc>
        {
          mlmeReq.Type = MLME_TXCW;
 800ee6e:	2154      	movs	r1, #84	; 0x54
 800ee70:	187b      	adds	r3, r7, r1
 800ee72:	2205      	movs	r2, #5
 800ee74:	701a      	strb	r2, [r3, #0]
          mlmeReq.Req.TxCw.Timeout = (uint16_t)((mcpsIndication->Buffer[1] << 8) | mcpsIndication->Buffer[2]);
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	689b      	ldr	r3, [r3, #8]
 800ee7a:	3301      	adds	r3, #1
 800ee7c:	781b      	ldrb	r3, [r3, #0]
 800ee7e:	021b      	lsls	r3, r3, #8
 800ee80:	b21a      	sxth	r2, r3
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	689b      	ldr	r3, [r3, #8]
 800ee86:	3302      	adds	r3, #2
 800ee88:	781b      	ldrb	r3, [r3, #0]
 800ee8a:	b21b      	sxth	r3, r3
 800ee8c:	4313      	orrs	r3, r2
 800ee8e:	b21b      	sxth	r3, r3
 800ee90:	b29a      	uxth	r2, r3
 800ee92:	187b      	adds	r3, r7, r1
 800ee94:	809a      	strh	r2, [r3, #4]
 800ee96:	e031      	b.n	800eefc <LmhpComplianceOnMcpsIndication+0x320>
        }
        else if (mcpsIndication->BufferSize == 7)
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	7b1b      	ldrb	r3, [r3, #12]
 800ee9c:	2b07      	cmp	r3, #7
 800ee9e:	d12d      	bne.n	800eefc <LmhpComplianceOnMcpsIndication+0x320>
        {
          mlmeReq.Type = MLME_TXCW_1;
 800eea0:	2154      	movs	r1, #84	; 0x54
 800eea2:	187b      	adds	r3, r7, r1
 800eea4:	2206      	movs	r2, #6
 800eea6:	701a      	strb	r2, [r3, #0]
          mlmeReq.Req.TxCw.Timeout = (uint16_t)((mcpsIndication->Buffer[1] << 8) | mcpsIndication->Buffer[2]);
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	689b      	ldr	r3, [r3, #8]
 800eeac:	3301      	adds	r3, #1
 800eeae:	781b      	ldrb	r3, [r3, #0]
 800eeb0:	021b      	lsls	r3, r3, #8
 800eeb2:	b21a      	sxth	r2, r3
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	689b      	ldr	r3, [r3, #8]
 800eeb8:	3302      	adds	r3, #2
 800eeba:	781b      	ldrb	r3, [r3, #0]
 800eebc:	b21b      	sxth	r3, r3
 800eebe:	4313      	orrs	r3, r2
 800eec0:	b21b      	sxth	r3, r3
 800eec2:	b29a      	uxth	r2, r3
 800eec4:	187b      	adds	r3, r7, r1
 800eec6:	809a      	strh	r2, [r3, #4]
          mlmeReq.Req.TxCw.Frequency = (uint32_t)((mcpsIndication->Buffer[3] << 16) | (mcpsIndication->Buffer[4] << 8) | mcpsIndication->Buffer[5]) * 100;
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	689b      	ldr	r3, [r3, #8]
 800eecc:	3303      	adds	r3, #3
 800eece:	781b      	ldrb	r3, [r3, #0]
 800eed0:	041a      	lsls	r2, r3, #16
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	689b      	ldr	r3, [r3, #8]
 800eed6:	3304      	adds	r3, #4
 800eed8:	781b      	ldrb	r3, [r3, #0]
 800eeda:	021b      	lsls	r3, r3, #8
 800eedc:	431a      	orrs	r2, r3
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	689b      	ldr	r3, [r3, #8]
 800eee2:	3305      	adds	r3, #5
 800eee4:	781b      	ldrb	r3, [r3, #0]
 800eee6:	4313      	orrs	r3, r2
 800eee8:	001a      	movs	r2, r3
 800eeea:	2364      	movs	r3, #100	; 0x64
 800eeec:	435a      	muls	r2, r3
 800eeee:	187b      	adds	r3, r7, r1
 800eef0:	609a      	str	r2, [r3, #8]
          mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	689b      	ldr	r3, [r3, #8]
 800eef6:	799a      	ldrb	r2, [r3, #6]
 800eef8:	187b      	adds	r3, r7, r1
 800eefa:	731a      	strb	r2, [r3, #12]
        }
        LoRaMacMlmeRequest(&mlmeReq);
 800eefc:	2354      	movs	r3, #84	; 0x54
 800eefe:	18fb      	adds	r3, r7, r3
 800ef00:	0018      	movs	r0, r3
 800ef02:	f005 f8bf 	bl	8014084 <LoRaMacMlmeRequest>
        ComplianceTestState.State = 1;
 800ef06:	4b19      	ldr	r3, [pc, #100]	; (800ef6c <LmhpComplianceOnMcpsIndication+0x390>)
 800ef08:	2201      	movs	r2, #1
 800ef0a:	709a      	strb	r2, [r3, #2]
      }
      break;
 800ef0c:	e03d      	b.n	800ef8a <LmhpComplianceOnMcpsIndication+0x3ae>
      case 8: /* Send DeviceTimeReq */
      {
        MlmeReq_t mlmeReq;

        mlmeReq.Type = MLME_DEVICE_TIME;
 800ef0e:	2140      	movs	r1, #64	; 0x40
 800ef10:	187b      	adds	r3, r7, r1
 800ef12:	220a      	movs	r2, #10
 800ef14:	701a      	strb	r2, [r3, #0]

        LoRaMacMlmeRequest(&mlmeReq);
 800ef16:	187b      	adds	r3, r7, r1
 800ef18:	0018      	movs	r0, r3
 800ef1a:	f005 f8b3 	bl	8014084 <LoRaMacMlmeRequest>
      }
      break;
 800ef1e:	e034      	b.n	800ef8a <LmhpComplianceOnMcpsIndication+0x3ae>
      case 9: /* Switch end device Class */
      {
        MibRequestConfirm_t mibReq;

        mibReq.Type = MIB_DEVICE_CLASS;
 800ef20:	2108      	movs	r1, #8
 800ef22:	187b      	adds	r3, r7, r1
 800ef24:	2200      	movs	r2, #0
 800ef26:	701a      	strb	r2, [r3, #0]
        /* CLASS_A = 0, CLASS_B = 1, CLASS_C = 2 */
        mibReq.Param.Class = (DeviceClass_t)mcpsIndication->Buffer[1];;
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	689b      	ldr	r3, [r3, #8]
 800ef2c:	3301      	adds	r3, #1
 800ef2e:	781a      	ldrb	r2, [r3, #0]
 800ef30:	187b      	adds	r3, r7, r1
 800ef32:	711a      	strb	r2, [r3, #4]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800ef34:	187b      	adds	r3, r7, r1
 800ef36:	0018      	movs	r0, r3
 800ef38:	f004 fd1e 	bl	8013978 <LoRaMacMibSetRequestConfirm>
      }
      break;
 800ef3c:	e025      	b.n	800ef8a <LmhpComplianceOnMcpsIndication+0x3ae>
      case 10: /* Send PingSlotInfoReq */
      {
        MlmeReq_t mlmeReq;

        mlmeReq.Type = MLME_PING_SLOT_INFO;
 800ef3e:	212c      	movs	r1, #44	; 0x2c
 800ef40:	187b      	adds	r3, r7, r1
 800ef42:	220d      	movs	r2, #13
 800ef44:	701a      	strb	r2, [r3, #0]
        mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	689b      	ldr	r3, [r3, #8]
 800ef4a:	785a      	ldrb	r2, [r3, #1]
 800ef4c:	187b      	adds	r3, r7, r1
 800ef4e:	711a      	strb	r2, [r3, #4]

        LoRaMacMlmeRequest(&mlmeReq);
 800ef50:	187b      	adds	r3, r7, r1
 800ef52:	0018      	movs	r0, r3
 800ef54:	f005 f896 	bl	8014084 <LoRaMacMlmeRequest>
      }
      break;
 800ef58:	e017      	b.n	800ef8a <LmhpComplianceOnMcpsIndication+0x3ae>
    return;
 800ef5a:	46c0      	nop			; (mov r8, r8)
 800ef5c:	e015      	b.n	800ef8a <LmhpComplianceOnMcpsIndication+0x3ae>
    return;
 800ef5e:	46c0      	nop			; (mov r8, r8)
 800ef60:	e013      	b.n	800ef8a <LmhpComplianceOnMcpsIndication+0x3ae>
    return;
 800ef62:	46c0      	nop			; (mov r8, r8)
 800ef64:	e011      	b.n	800ef8a <LmhpComplianceOnMcpsIndication+0x3ae>
      default:
        break;
 800ef66:	46c0      	nop			; (mov r8, r8)
 800ef68:	e00f      	b.n	800ef8a <LmhpComplianceOnMcpsIndication+0x3ae>
 800ef6a:	46c0      	nop			; (mov r8, r8)
 800ef6c:	200005a0 	.word	0x200005a0
 800ef70:	200005b4 	.word	0x200005b4
 800ef74:	0800ef9b 	.word	0x0800ef9b
 800ef78:	20000588 	.word	0x20000588
 800ef7c:	00004e20 	.word	0x00004e20
 800ef80:	0801f87c 	.word	0x0801f87c
 800ef84:	20000178 	.word	0x20000178
      break;
 800ef88:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	b020      	add	sp, #128	; 0x80
 800ef8e:	bd80      	pop	{r7, pc}

0800ef90 <LmhpComplianceProcess>:

static void LmhpComplianceProcess(void)
{
 800ef90:	b580      	push	{r7, lr}
 800ef92:	af00      	add	r7, sp, #0
  /* Nothing to process */
}
 800ef94:	46c0      	nop			; (mov r8, r8)
 800ef96:	46bd      	mov	sp, r7
 800ef98:	bd80      	pop	{r7, pc}

0800ef9a <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent(void *context)
{
 800ef9a:	b580      	push	{r7, lr}
 800ef9c:	b082      	sub	sp, #8
 800ef9e:	af00      	add	r7, sp, #0
 800efa0:	6078      	str	r0, [r7, #4]
  LmhpComplianceTxProcess();
 800efa2:	f7ff fdad 	bl	800eb00 <LmhpComplianceTxProcess>
}
 800efa6:	46c0      	nop			; (mov r8, r8)
 800efa8:	46bd      	mov	sp, r7
 800efaa:	b002      	add	sp, #8
 800efac:	bd80      	pop	{r7, pc}

0800efae <NvmCtxMgmtEvent>:
#endif /* MAX_PERSISTENT_CTX_MGMT_ENABLED == 1 */
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

/* Exported functions ---------------------------------------------------------*/
void NvmCtxMgmtEvent(LoRaMacNvmCtxModule_t module)
{
 800efae:	b580      	push	{r7, lr}
 800efb0:	b082      	sub	sp, #8
 800efb2:	af00      	add	r7, sp, #0
 800efb4:	0002      	movs	r2, r0
 800efb6:	1dfb      	adds	r3, r7, #7
 800efb8:	701a      	strb	r2, [r3, #0]
    {
      break;
    }
  }
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800efba:	46c0      	nop			; (mov r8, r8)
 800efbc:	46bd      	mov	sp, r7
 800efbe:	b002      	add	sp, #8
 800efc0:	bd80      	pop	{r7, pc}

0800efc2 <NvmCtxMgmtStore>:

NvmCtxMgmtStatus_t NvmCtxMgmtStore(void)
{
 800efc2:	b580      	push	{r7, lr}
 800efc4:	af00      	add	r7, sp, #0
  /* Resume LoRaMac */
  LoRaMacStart();

  return NVMCTXMGMT_STATUS_SUCCESS;
#else /* CONTEXT_MANAGEMENT_ENABLED == 0 */
  return NVMCTXMGMT_STATUS_FAIL;
 800efc6:	2301      	movs	r3, #1
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800efc8:	0018      	movs	r0, r3
 800efca:	46bd      	mov	sp, r7
 800efcc:	bd80      	pop	{r7, pc}

0800efce <NvmCtxMgmtRestore>:

NvmCtxMgmtStatus_t NvmCtxMgmtRestore(void)
{
 800efce:	b580      	push	{r7, lr}
 800efd0:	af00      	add	r7, sp, #0
    LoRaMacMibSetRequestConfirm(&mibReq);
  }

  return status;
#else /* CONTEXT_MANAGEMENT_ENABLED == 0 */
  return NVMCTXMGMT_STATUS_FAIL;
 800efd2:	2301      	movs	r3, #1
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800efd4:	0018      	movs	r0, r3
 800efd6:	46bd      	mov	sp, r7
 800efd8:	bd80      	pop	{r7, pc}
	...

0800efdc <OnRadioTxDone>:
 */
static void LoRaMacHandleIndicationEvents( void );

/* Private  functions ---------------------------------------------------------*/
static void OnRadioTxDone( void )
{
 800efdc:	b5b0      	push	{r4, r5, r7, lr}
 800efde:	b082      	sub	sp, #8
 800efe0:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800efe2:	f00d ff71 	bl	801cec8 <UTIL_TIMER_GetCurrentTime>
 800efe6:	0002      	movs	r2, r0
 800efe8:	4b14      	ldr	r3, [pc, #80]	; (800f03c <OnRadioTxDone+0x60>)
 800efea:	601a      	str	r2, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800efec:	4d14      	ldr	r5, [pc, #80]	; (800f040 <OnRadioTxDone+0x64>)
 800efee:	23ce      	movs	r3, #206	; 0xce
 800eff0:	009c      	lsls	r4, r3, #2
 800eff2:	003b      	movs	r3, r7
 800eff4:	0018      	movs	r0, r3
 800eff6:	f00d fd15 	bl	801ca24 <SysTimeGet>
 800effa:	003a      	movs	r2, r7
 800effc:	192b      	adds	r3, r5, r4
 800effe:	ca03      	ldmia	r2!, {r0, r1}
 800f000:	c303      	stmia	r3!, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800f002:	4b10      	ldr	r3, [pc, #64]	; (800f044 <OnRadioTxDone+0x68>)
 800f004:	781a      	ldrb	r2, [r3, #0]
 800f006:	2110      	movs	r1, #16
 800f008:	430a      	orrs	r2, r1
 800f00a:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f00c:	4a0c      	ldr	r2, [pc, #48]	; (800f040 <OnRadioTxDone+0x64>)
 800f00e:	23d2      	movs	r3, #210	; 0xd2
 800f010:	009b      	lsls	r3, r3, #2
 800f012:	58d3      	ldr	r3, [r2, r3]
 800f014:	2b00      	cmp	r3, #0
 800f016:	d00c      	beq.n	800f032 <OnRadioTxDone+0x56>
 800f018:	4a09      	ldr	r2, [pc, #36]	; (800f040 <OnRadioTxDone+0x64>)
 800f01a:	23d2      	movs	r3, #210	; 0xd2
 800f01c:	009b      	lsls	r3, r3, #2
 800f01e:	58d3      	ldr	r3, [r2, r3]
 800f020:	68db      	ldr	r3, [r3, #12]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d005      	beq.n	800f032 <OnRadioTxDone+0x56>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f026:	4a06      	ldr	r2, [pc, #24]	; (800f040 <OnRadioTxDone+0x64>)
 800f028:	23d2      	movs	r3, #210	; 0xd2
 800f02a:	009b      	lsls	r3, r3, #2
 800f02c:	58d3      	ldr	r3, [r2, r3]
 800f02e:	68db      	ldr	r3, [r3, #12]
 800f030:	4798      	blx	r3
    }
//    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
}
 800f032:	46c0      	nop			; (mov r8, r8)
 800f034:	46bd      	mov	sp, r7
 800f036:	b002      	add	sp, #8
 800f038:	bdb0      	pop	{r4, r5, r7, pc}
 800f03a:	46c0      	nop			; (mov r8, r8)
 800f03c:	20001730 	.word	0x20001730
 800f040:	200005b8 	.word	0x200005b8
 800f044:	20000be8 	.word	0x20000be8

0800f048 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800f048:	b5b0      	push	{r4, r5, r7, lr}
 800f04a:	b084      	sub	sp, #16
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	60f8      	str	r0, [r7, #12]
 800f050:	000c      	movs	r4, r1
 800f052:	0010      	movs	r0, r2
 800f054:	0019      	movs	r1, r3
 800f056:	250a      	movs	r5, #10
 800f058:	197b      	adds	r3, r7, r5
 800f05a:	1c22      	adds	r2, r4, #0
 800f05c:	801a      	strh	r2, [r3, #0]
 800f05e:	2408      	movs	r4, #8
 800f060:	193b      	adds	r3, r7, r4
 800f062:	1c02      	adds	r2, r0, #0
 800f064:	801a      	strh	r2, [r3, #0]
 800f066:	1dfb      	adds	r3, r7, #7
 800f068:	1c0a      	adds	r2, r1, #0
 800f06a:	701a      	strb	r2, [r3, #0]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800f06c:	f00d ff2c 	bl	801cec8 <UTIL_TIMER_GetCurrentTime>
 800f070:	0002      	movs	r2, r0
 800f072:	4b16      	ldr	r3, [pc, #88]	; (800f0cc <OnRadioRxDone+0x84>)
 800f074:	601a      	str	r2, [r3, #0]
    RxDoneParams.Payload = payload;
 800f076:	4b15      	ldr	r3, [pc, #84]	; (800f0cc <OnRadioRxDone+0x84>)
 800f078:	68fa      	ldr	r2, [r7, #12]
 800f07a:	605a      	str	r2, [r3, #4]
    RxDoneParams.Size = size;
 800f07c:	4b13      	ldr	r3, [pc, #76]	; (800f0cc <OnRadioRxDone+0x84>)
 800f07e:	197a      	adds	r2, r7, r5
 800f080:	8812      	ldrh	r2, [r2, #0]
 800f082:	811a      	strh	r2, [r3, #8]
    RxDoneParams.Rssi = rssi;
 800f084:	4b11      	ldr	r3, [pc, #68]	; (800f0cc <OnRadioRxDone+0x84>)
 800f086:	193a      	adds	r2, r7, r4
 800f088:	8812      	ldrh	r2, [r2, #0]
 800f08a:	815a      	strh	r2, [r3, #10]
    RxDoneParams.Snr = snr;
 800f08c:	4b0f      	ldr	r3, [pc, #60]	; (800f0cc <OnRadioRxDone+0x84>)
 800f08e:	1dfa      	adds	r2, r7, #7
 800f090:	7812      	ldrb	r2, [r2, #0]
 800f092:	731a      	strb	r2, [r3, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800f094:	4b0e      	ldr	r3, [pc, #56]	; (800f0d0 <OnRadioRxDone+0x88>)
 800f096:	781a      	ldrb	r2, [r3, #0]
 800f098:	2108      	movs	r1, #8
 800f09a:	430a      	orrs	r2, r1
 800f09c:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f09e:	4a0d      	ldr	r2, [pc, #52]	; (800f0d4 <OnRadioRxDone+0x8c>)
 800f0a0:	23d2      	movs	r3, #210	; 0xd2
 800f0a2:	009b      	lsls	r3, r3, #2
 800f0a4:	58d3      	ldr	r3, [r2, r3]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d00c      	beq.n	800f0c4 <OnRadioRxDone+0x7c>
 800f0aa:	4a0a      	ldr	r2, [pc, #40]	; (800f0d4 <OnRadioRxDone+0x8c>)
 800f0ac:	23d2      	movs	r3, #210	; 0xd2
 800f0ae:	009b      	lsls	r3, r3, #2
 800f0b0:	58d3      	ldr	r3, [r2, r3]
 800f0b2:	68db      	ldr	r3, [r3, #12]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d005      	beq.n	800f0c4 <OnRadioRxDone+0x7c>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f0b8:	4a06      	ldr	r2, [pc, #24]	; (800f0d4 <OnRadioRxDone+0x8c>)
 800f0ba:	23d2      	movs	r3, #210	; 0xd2
 800f0bc:	009b      	lsls	r3, r3, #2
 800f0be:	58d3      	ldr	r3, [r2, r3]
 800f0c0:	68db      	ldr	r3, [r3, #12]
 800f0c2:	4798      	blx	r3
    }
//    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
}
 800f0c4:	46c0      	nop			; (mov r8, r8)
 800f0c6:	46bd      	mov	sp, r7
 800f0c8:	b004      	add	sp, #16
 800f0ca:	bdb0      	pop	{r4, r5, r7, pc}
 800f0cc:	20001734 	.word	0x20001734
 800f0d0:	20000be8 	.word	0x20000be8
 800f0d4:	200005b8 	.word	0x200005b8

0800f0d8 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800f0d8:	b580      	push	{r7, lr}
 800f0da:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800f0dc:	4b0d      	ldr	r3, [pc, #52]	; (800f114 <OnRadioTxTimeout+0x3c>)
 800f0de:	781a      	ldrb	r2, [r3, #0]
 800f0e0:	2104      	movs	r1, #4
 800f0e2:	430a      	orrs	r2, r1
 800f0e4:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f0e6:	4a0c      	ldr	r2, [pc, #48]	; (800f118 <OnRadioTxTimeout+0x40>)
 800f0e8:	23d2      	movs	r3, #210	; 0xd2
 800f0ea:	009b      	lsls	r3, r3, #2
 800f0ec:	58d3      	ldr	r3, [r2, r3]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d00c      	beq.n	800f10c <OnRadioTxTimeout+0x34>
 800f0f2:	4a09      	ldr	r2, [pc, #36]	; (800f118 <OnRadioTxTimeout+0x40>)
 800f0f4:	23d2      	movs	r3, #210	; 0xd2
 800f0f6:	009b      	lsls	r3, r3, #2
 800f0f8:	58d3      	ldr	r3, [r2, r3]
 800f0fa:	68db      	ldr	r3, [r3, #12]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d005      	beq.n	800f10c <OnRadioTxTimeout+0x34>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f100:	4a05      	ldr	r2, [pc, #20]	; (800f118 <OnRadioTxTimeout+0x40>)
 800f102:	23d2      	movs	r3, #210	; 0xd2
 800f104:	009b      	lsls	r3, r3, #2
 800f106:	58d3      	ldr	r3, [r2, r3]
 800f108:	68db      	ldr	r3, [r3, #12]
 800f10a:	4798      	blx	r3
    }
//    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
}
 800f10c:	46c0      	nop			; (mov r8, r8)
 800f10e:	46bd      	mov	sp, r7
 800f110:	bd80      	pop	{r7, pc}
 800f112:	46c0      	nop			; (mov r8, r8)
 800f114:	20000be8 	.word	0x20000be8
 800f118:	200005b8 	.word	0x200005b8

0800f11c <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800f11c:	b580      	push	{r7, lr}
 800f11e:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800f120:	4b0d      	ldr	r3, [pc, #52]	; (800f158 <OnRadioRxError+0x3c>)
 800f122:	781a      	ldrb	r2, [r3, #0]
 800f124:	2102      	movs	r1, #2
 800f126:	430a      	orrs	r2, r1
 800f128:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f12a:	4a0c      	ldr	r2, [pc, #48]	; (800f15c <OnRadioRxError+0x40>)
 800f12c:	23d2      	movs	r3, #210	; 0xd2
 800f12e:	009b      	lsls	r3, r3, #2
 800f130:	58d3      	ldr	r3, [r2, r3]
 800f132:	2b00      	cmp	r3, #0
 800f134:	d00c      	beq.n	800f150 <OnRadioRxError+0x34>
 800f136:	4a09      	ldr	r2, [pc, #36]	; (800f15c <OnRadioRxError+0x40>)
 800f138:	23d2      	movs	r3, #210	; 0xd2
 800f13a:	009b      	lsls	r3, r3, #2
 800f13c:	58d3      	ldr	r3, [r2, r3]
 800f13e:	68db      	ldr	r3, [r3, #12]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d005      	beq.n	800f150 <OnRadioRxError+0x34>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f144:	4a05      	ldr	r2, [pc, #20]	; (800f15c <OnRadioRxError+0x40>)
 800f146:	23d2      	movs	r3, #210	; 0xd2
 800f148:	009b      	lsls	r3, r3, #2
 800f14a:	58d3      	ldr	r3, [r2, r3]
 800f14c:	68db      	ldr	r3, [r3, #12]
 800f14e:	4798      	blx	r3
    }
}
 800f150:	46c0      	nop			; (mov r8, r8)
 800f152:	46bd      	mov	sp, r7
 800f154:	bd80      	pop	{r7, pc}
 800f156:	46c0      	nop			; (mov r8, r8)
 800f158:	20000be8 	.word	0x20000be8
 800f15c:	200005b8 	.word	0x200005b8

0800f160 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800f160:	b580      	push	{r7, lr}
 800f162:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800f164:	4b0d      	ldr	r3, [pc, #52]	; (800f19c <OnRadioRxTimeout+0x3c>)
 800f166:	781a      	ldrb	r2, [r3, #0]
 800f168:	2101      	movs	r1, #1
 800f16a:	430a      	orrs	r2, r1
 800f16c:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f16e:	4a0c      	ldr	r2, [pc, #48]	; (800f1a0 <OnRadioRxTimeout+0x40>)
 800f170:	23d2      	movs	r3, #210	; 0xd2
 800f172:	009b      	lsls	r3, r3, #2
 800f174:	58d3      	ldr	r3, [r2, r3]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d00c      	beq.n	800f194 <OnRadioRxTimeout+0x34>
 800f17a:	4a09      	ldr	r2, [pc, #36]	; (800f1a0 <OnRadioRxTimeout+0x40>)
 800f17c:	23d2      	movs	r3, #210	; 0xd2
 800f17e:	009b      	lsls	r3, r3, #2
 800f180:	58d3      	ldr	r3, [r2, r3]
 800f182:	68db      	ldr	r3, [r3, #12]
 800f184:	2b00      	cmp	r3, #0
 800f186:	d005      	beq.n	800f194 <OnRadioRxTimeout+0x34>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f188:	4a05      	ldr	r2, [pc, #20]	; (800f1a0 <OnRadioRxTimeout+0x40>)
 800f18a:	23d2      	movs	r3, #210	; 0xd2
 800f18c:	009b      	lsls	r3, r3, #2
 800f18e:	58d3      	ldr	r3, [r2, r3]
 800f190:	68db      	ldr	r3, [r3, #12]
 800f192:	4798      	blx	r3
    }
//    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}
 800f194:	46c0      	nop			; (mov r8, r8)
 800f196:	46bd      	mov	sp, r7
 800f198:	bd80      	pop	{r7, pc}
 800f19a:	46c0      	nop			; (mov r8, r8)
 800f19c:	20000be8 	.word	0x20000be8
 800f1a0:	200005b8 	.word	0x200005b8

0800f1a4 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	af00      	add	r7, sp, #0
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800f1a8:	4b0a      	ldr	r3, [pc, #40]	; (800f1d4 <UpdateRxSlotIdleState+0x30>)
 800f1aa:	4a0b      	ldr	r2, [pc, #44]	; (800f1d8 <UpdateRxSlotIdleState+0x34>)
 800f1ac:	589b      	ldr	r3, [r3, r2]
 800f1ae:	227c      	movs	r2, #124	; 0x7c
 800f1b0:	5c9b      	ldrb	r3, [r3, r2]
 800f1b2:	2b02      	cmp	r3, #2
 800f1b4:	d005      	beq.n	800f1c2 <UpdateRxSlotIdleState+0x1e>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800f1b6:	4a07      	ldr	r2, [pc, #28]	; (800f1d4 <UpdateRxSlotIdleState+0x30>)
 800f1b8:	2390      	movs	r3, #144	; 0x90
 800f1ba:	00db      	lsls	r3, r3, #3
 800f1bc:	2106      	movs	r1, #6
 800f1be:	54d1      	strb	r1, [r2, r3]
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800f1c0:	e004      	b.n	800f1cc <UpdateRxSlotIdleState+0x28>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800f1c2:	4a04      	ldr	r2, [pc, #16]	; (800f1d4 <UpdateRxSlotIdleState+0x30>)
 800f1c4:	2390      	movs	r3, #144	; 0x90
 800f1c6:	00db      	lsls	r3, r3, #3
 800f1c8:	2102      	movs	r1, #2
 800f1ca:	54d1      	strb	r1, [r2, r3]
}
 800f1cc:	46c0      	nop			; (mov r8, r8)
 800f1ce:	46bd      	mov	sp, r7
 800f1d0:	bd80      	pop	{r7, pc}
 800f1d2:	46c0      	nop			; (mov r8, r8)
 800f1d4:	200005b8 	.word	0x200005b8
 800f1d8:	00000484 	.word	0x00000484

0800f1dc <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800f1dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f1de:	b08f      	sub	sp, #60	; 0x3c
 800f1e0:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800f1e2:	4b59      	ldr	r3, [pc, #356]	; (800f348 <ProcessRadioTxDone+0x16c>)
 800f1e4:	4a59      	ldr	r2, [pc, #356]	; (800f34c <ProcessRadioTxDone+0x170>)
 800f1e6:	589b      	ldr	r3, [r3, r2]
 800f1e8:	227c      	movs	r2, #124	; 0x7c
 800f1ea:	5c9b      	ldrb	r3, [r3, r2]
 800f1ec:	2b02      	cmp	r3, #2
 800f1ee:	d002      	beq.n	800f1f6 <ProcessRadioTxDone+0x1a>
    {
        Radio.Sleep( );
 800f1f0:	4b57      	ldr	r3, [pc, #348]	; (800f350 <ProcessRadioTxDone+0x174>)
 800f1f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1f4:	4798      	blx	r3
    }
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800f1f6:	4a54      	ldr	r2, [pc, #336]	; (800f348 <ProcessRadioTxDone+0x16c>)
 800f1f8:	23ec      	movs	r3, #236	; 0xec
 800f1fa:	009b      	lsls	r3, r3, #2
 800f1fc:	58d2      	ldr	r2, [r2, r3]
 800f1fe:	4b55      	ldr	r3, [pc, #340]	; (800f354 <ProcessRadioTxDone+0x178>)
 800f200:	0011      	movs	r1, r2
 800f202:	0018      	movs	r0, r3
 800f204:	f00d fda8 	bl	801cd58 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800f208:	4b52      	ldr	r3, [pc, #328]	; (800f354 <ProcessRadioTxDone+0x178>)
 800f20a:	0018      	movs	r0, r3
 800f20c:	f00d fcb4 	bl	801cb78 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800f210:	4a4d      	ldr	r2, [pc, #308]	; (800f348 <ProcessRadioTxDone+0x16c>)
 800f212:	23ed      	movs	r3, #237	; 0xed
 800f214:	009b      	lsls	r3, r3, #2
 800f216:	58d2      	ldr	r2, [r2, r3]
 800f218:	4b4f      	ldr	r3, [pc, #316]	; (800f358 <ProcessRadioTxDone+0x17c>)
 800f21a:	0011      	movs	r1, r2
 800f21c:	0018      	movs	r0, r3
 800f21e:	f00d fd9b 	bl	801cd58 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800f222:	4b4d      	ldr	r3, [pc, #308]	; (800f358 <ProcessRadioTxDone+0x17c>)
 800f224:	0018      	movs	r0, r3
 800f226:	f00d fca7 	bl	801cb78 <UTIL_TIMER_Start>

    if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800f22a:	4b47      	ldr	r3, [pc, #284]	; (800f348 <ProcessRadioTxDone+0x16c>)
 800f22c:	4a47      	ldr	r2, [pc, #284]	; (800f34c <ProcessRadioTxDone+0x170>)
 800f22e:	589b      	ldr	r3, [r3, r2]
 800f230:	227c      	movs	r2, #124	; 0x7c
 800f232:	5c9b      	ldrb	r3, [r3, r2]
 800f234:	2b02      	cmp	r3, #2
 800f236:	d004      	beq.n	800f242 <ProcessRadioTxDone+0x66>
 800f238:	4b43      	ldr	r3, [pc, #268]	; (800f348 <ProcessRadioTxDone+0x16c>)
 800f23a:	4a48      	ldr	r2, [pc, #288]	; (800f35c <ProcessRadioTxDone+0x180>)
 800f23c:	5c9b      	ldrb	r3, [r3, r2]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d021      	beq.n	800f286 <ProcessRadioTxDone+0xaa>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800f242:	2120      	movs	r1, #32
 800f244:	187b      	adds	r3, r7, r1
 800f246:	2216      	movs	r2, #22
 800f248:	701a      	strb	r2, [r3, #0]
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800f24a:	4b3f      	ldr	r3, [pc, #252]	; (800f348 <ProcessRadioTxDone+0x16c>)
 800f24c:	4a3f      	ldr	r2, [pc, #252]	; (800f34c <ProcessRadioTxDone+0x170>)
 800f24e:	589b      	ldr	r3, [r3, r2]
 800f250:	781b      	ldrb	r3, [r3, #0]
 800f252:	187a      	adds	r2, r7, r1
 800f254:	0011      	movs	r1, r2
 800f256:	0018      	movs	r0, r3
 800f258:	f007 fccf 	bl	8016bfa <RegionGetPhyParam>
 800f25c:	0003      	movs	r3, r0
 800f25e:	001a      	movs	r2, r3
 800f260:	211c      	movs	r1, #28
 800f262:	187b      	adds	r3, r7, r1
 800f264:	601a      	str	r2, [r3, #0]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800f266:	4a38      	ldr	r2, [pc, #224]	; (800f348 <ProcessRadioTxDone+0x16c>)
 800f268:	23ed      	movs	r3, #237	; 0xed
 800f26a:	009b      	lsls	r3, r3, #2
 800f26c:	58d2      	ldr	r2, [r2, r3]
 800f26e:	187b      	adds	r3, r7, r1
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	18d2      	adds	r2, r2, r3
 800f274:	4b3a      	ldr	r3, [pc, #232]	; (800f360 <ProcessRadioTxDone+0x184>)
 800f276:	0011      	movs	r1, r2
 800f278:	0018      	movs	r0, r3
 800f27a:	f00d fd6d 	bl	801cd58 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800f27e:	4b38      	ldr	r3, [pc, #224]	; (800f360 <ProcessRadioTxDone+0x184>)
 800f280:	0018      	movs	r0, r3
 800f282:	f00d fc79 	bl	801cb78 <UTIL_TIMER_Start>
    }

    // Update Aggregated last tx done time
    MacCtx.NvmCtx->LastTxDoneTime = TxDoneParams.CurTime;
 800f286:	4b30      	ldr	r3, [pc, #192]	; (800f348 <ProcessRadioTxDone+0x16c>)
 800f288:	4a30      	ldr	r2, [pc, #192]	; (800f34c <ProcessRadioTxDone+0x170>)
 800f28a:	589a      	ldr	r2, [r3, r2]
 800f28c:	4b35      	ldr	r3, [pc, #212]	; (800f364 <ProcessRadioTxDone+0x188>)
 800f28e:	6819      	ldr	r1, [r3, #0]
 800f290:	23a8      	movs	r3, #168	; 0xa8
 800f292:	005b      	lsls	r3, r3, #1
 800f294:	50d1      	str	r1, [r2, r3]

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800f296:	4b2c      	ldr	r3, [pc, #176]	; (800f348 <ProcessRadioTxDone+0x16c>)
 800f298:	4a33      	ldr	r2, [pc, #204]	; (800f368 <ProcessRadioTxDone+0x18c>)
 800f29a:	5c9a      	ldrb	r2, [r3, r2]
 800f29c:	2408      	movs	r4, #8
 800f29e:	193b      	adds	r3, r7, r4
 800f2a0:	701a      	strb	r2, [r3, #0]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800f2a2:	4b30      	ldr	r3, [pc, #192]	; (800f364 <ProcessRadioTxDone+0x188>)
 800f2a4:	681a      	ldr	r2, [r3, #0]
 800f2a6:	193b      	adds	r3, r7, r4
 800f2a8:	605a      	str	r2, [r3, #4]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 800f2aa:	2328      	movs	r3, #40	; 0x28
 800f2ac:	18fb      	adds	r3, r7, r3
 800f2ae:	0018      	movs	r0, r3
 800f2b0:	f00d fbfa 	bl	801caa8 <SysTimeGetMcuTime>
 800f2b4:	4b24      	ldr	r3, [pc, #144]	; (800f348 <ProcessRadioTxDone+0x16c>)
 800f2b6:	4a25      	ldr	r2, [pc, #148]	; (800f34c <ProcessRadioTxDone+0x170>)
 800f2b8:	5898      	ldr	r0, [r3, r2]
 800f2ba:	193d      	adds	r5, r7, r4
 800f2bc:	003e      	movs	r6, r7
 800f2be:	23ac      	movs	r3, #172	; 0xac
 800f2c0:	0059      	lsls	r1, r3, #1
 800f2c2:	2328      	movs	r3, #40	; 0x28
 800f2c4:	18fa      	adds	r2, r7, r3
 800f2c6:	2404      	movs	r4, #4
 800f2c8:	1843      	adds	r3, r0, r1
 800f2ca:	191c      	adds	r4, r3, r4
 800f2cc:	466b      	mov	r3, sp
 800f2ce:	6824      	ldr	r4, [r4, #0]
 800f2d0:	601c      	str	r4, [r3, #0]
 800f2d2:	5843      	ldr	r3, [r0, r1]
 800f2d4:	6811      	ldr	r1, [r2, #0]
 800f2d6:	6852      	ldr	r2, [r2, #4]
 800f2d8:	0030      	movs	r0, r6
 800f2da:	f00d fb17 	bl	801c90c <SysTimeSub>
 800f2de:	003a      	movs	r2, r7
 800f2e0:	002b      	movs	r3, r5
 800f2e2:	330c      	adds	r3, #12
 800f2e4:	ca21      	ldmia	r2!, {r0, r5}
 800f2e6:	c321      	stmia	r3!, {r0, r5}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800f2e8:	4a17      	ldr	r2, [pc, #92]	; (800f348 <ProcessRadioTxDone+0x16c>)
 800f2ea:	2383      	movs	r3, #131	; 0x83
 800f2ec:	00db      	lsls	r3, r3, #3
 800f2ee:	58d2      	ldr	r2, [r2, r3]
 800f2f0:	2108      	movs	r1, #8
 800f2f2:	187b      	adds	r3, r7, r1
 800f2f4:	609a      	str	r2, [r3, #8]
    txDone.Joined  = true;
 800f2f6:	187b      	adds	r3, r7, r1
 800f2f8:	2201      	movs	r2, #1
 800f2fa:	705a      	strb	r2, [r3, #1]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800f2fc:	4b12      	ldr	r3, [pc, #72]	; (800f348 <ProcessRadioTxDone+0x16c>)
 800f2fe:	4a13      	ldr	r2, [pc, #76]	; (800f34c <ProcessRadioTxDone+0x170>)
 800f300:	589a      	ldr	r2, [r3, r2]
 800f302:	23b2      	movs	r3, #178	; 0xb2
 800f304:	005b      	lsls	r3, r3, #1
 800f306:	5cd3      	ldrb	r3, [r2, r3]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d102      	bne.n	800f312 <ProcessRadioTxDone+0x136>
    {
        txDone.Joined  = false;
 800f30c:	187b      	adds	r3, r7, r1
 800f30e:	2200      	movs	r2, #0
 800f310:	705a      	strb	r2, [r3, #1]
    }

    RegionSetBandTxDone( MacCtx.NvmCtx->Region, &txDone );
 800f312:	4b0d      	ldr	r3, [pc, #52]	; (800f348 <ProcessRadioTxDone+0x16c>)
 800f314:	4a0d      	ldr	r2, [pc, #52]	; (800f34c <ProcessRadioTxDone+0x170>)
 800f316:	589b      	ldr	r3, [r3, r2]
 800f318:	781b      	ldrb	r3, [r3, #0]
 800f31a:	2208      	movs	r2, #8
 800f31c:	18ba      	adds	r2, r7, r2
 800f31e:	0011      	movs	r1, r2
 800f320:	0018      	movs	r0, r3
 800f322:	f007 fc92 	bl	8016c4a <RegionSetBandTxDone>

    if( MacCtx.NodeAckRequested == false )
 800f326:	4b08      	ldr	r3, [pc, #32]	; (800f348 <ProcessRadioTxDone+0x16c>)
 800f328:	4a0c      	ldr	r2, [pc, #48]	; (800f35c <ProcessRadioTxDone+0x180>)
 800f32a:	5c9b      	ldrb	r3, [r3, r2]
 800f32c:	2201      	movs	r2, #1
 800f32e:	4053      	eors	r3, r2
 800f330:	b2db      	uxtb	r3, r3
 800f332:	2b00      	cmp	r3, #0
 800f334:	d003      	beq.n	800f33e <ProcessRadioTxDone+0x162>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f336:	4b04      	ldr	r3, [pc, #16]	; (800f348 <ProcessRadioTxDone+0x16c>)
 800f338:	4a0c      	ldr	r2, [pc, #48]	; (800f36c <ProcessRadioTxDone+0x190>)
 800f33a:	2100      	movs	r1, #0
 800f33c:	5499      	strb	r1, [r3, r2]
    }
}
 800f33e:	46c0      	nop			; (mov r8, r8)
 800f340:	46bd      	mov	sp, r7
 800f342:	b00d      	add	sp, #52	; 0x34
 800f344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f346:	46c0      	nop			; (mov r8, r8)
 800f348:	200005b8 	.word	0x200005b8
 800f34c:	00000484 	.word	0x00000484
 800f350:	0801fd54 	.word	0x0801fd54
 800f354:	20000938 	.word	0x20000938
 800f358:	20000950 	.word	0x20000950
 800f35c:	00000414 	.word	0x00000414
 800f360:	200009b0 	.word	0x200009b0
 800f364:	20001730 	.word	0x20001730
 800f368:	00000415 	.word	0x00000415
 800f36c:	0000043d 	.word	0x0000043d

0800f370 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800f370:	b580      	push	{r7, lr}
 800f372:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800f374:	4a11      	ldr	r2, [pc, #68]	; (800f3bc <PrepareRxDoneAbort+0x4c>)
 800f376:	23d0      	movs	r3, #208	; 0xd0
 800f378:	009b      	lsls	r3, r3, #2
 800f37a:	58d3      	ldr	r3, [r2, r3]
 800f37c:	2280      	movs	r2, #128	; 0x80
 800f37e:	431a      	orrs	r2, r3
 800f380:	0011      	movs	r1, r2
 800f382:	4a0e      	ldr	r2, [pc, #56]	; (800f3bc <PrepareRxDoneAbort+0x4c>)
 800f384:	23d0      	movs	r3, #208	; 0xd0
 800f386:	009b      	lsls	r3, r3, #2
 800f388:	50d1      	str	r1, [r2, r3]

    if( MacCtx.NodeAckRequested == true )
 800f38a:	4b0c      	ldr	r3, [pc, #48]	; (800f3bc <PrepareRxDoneAbort+0x4c>)
 800f38c:	4a0c      	ldr	r2, [pc, #48]	; (800f3c0 <PrepareRxDoneAbort+0x50>)
 800f38e:	5c9b      	ldrb	r3, [r3, r2]
 800f390:	2b00      	cmp	r3, #0
 800f392:	d002      	beq.n	800f39a <PrepareRxDoneAbort+0x2a>
    {
        OnAckTimeoutTimerEvent( NULL );
 800f394:	2000      	movs	r0, #0
 800f396:	f001 f98d 	bl	80106b4 <OnAckTimeoutTimerEvent>
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800f39a:	4b08      	ldr	r3, [pc, #32]	; (800f3bc <PrepareRxDoneAbort+0x4c>)
 800f39c:	4a09      	ldr	r2, [pc, #36]	; (800f3c4 <PrepareRxDoneAbort+0x54>)
 800f39e:	5c99      	ldrb	r1, [r3, r2]
 800f3a0:	2002      	movs	r0, #2
 800f3a2:	4301      	orrs	r1, r0
 800f3a4:	5499      	strb	r1, [r3, r2]
    MacCtx.MacFlags.Bits.MacDone = 1;
 800f3a6:	4b05      	ldr	r3, [pc, #20]	; (800f3bc <PrepareRxDoneAbort+0x4c>)
 800f3a8:	4a06      	ldr	r2, [pc, #24]	; (800f3c4 <PrepareRxDoneAbort+0x54>)
 800f3aa:	5c99      	ldrb	r1, [r3, r2]
 800f3ac:	2020      	movs	r0, #32
 800f3ae:	4301      	orrs	r1, r0
 800f3b0:	5499      	strb	r1, [r3, r2]

    UpdateRxSlotIdleState( );
 800f3b2:	f7ff fef7 	bl	800f1a4 <UpdateRxSlotIdleState>
}
 800f3b6:	46c0      	nop			; (mov r8, r8)
 800f3b8:	46bd      	mov	sp, r7
 800f3ba:	bd80      	pop	{r7, pc}
 800f3bc:	200005b8 	.word	0x200005b8
 800f3c0:	00000414 	.word	0x00000414
 800f3c4:	00000481 	.word	0x00000481

0800f3c8 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800f3c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f3ca:	b0a7      	sub	sp, #156	; 0x9c
 800f3cc:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800f3ce:	2380      	movs	r3, #128	; 0x80
 800f3d0:	18fb      	adds	r3, r7, r3
 800f3d2:	2213      	movs	r2, #19
 800f3d4:	701a      	strb	r2, [r3, #0]

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800f3d6:	4bdf      	ldr	r3, [pc, #892]	; (800f754 <ProcessRadioRxDone+0x38c>)
 800f3d8:	685b      	ldr	r3, [r3, #4]
 800f3da:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint16_t size = RxDoneParams.Size;
 800f3dc:	267a      	movs	r6, #122	; 0x7a
 800f3de:	19bb      	adds	r3, r7, r6
 800f3e0:	4adc      	ldr	r2, [pc, #880]	; (800f754 <ProcessRadioRxDone+0x38c>)
 800f3e2:	8912      	ldrh	r2, [r2, #8]
 800f3e4:	801a      	strh	r2, [r3, #0]
    int16_t rssi = RxDoneParams.Rssi;
 800f3e6:	2478      	movs	r4, #120	; 0x78
 800f3e8:	193b      	adds	r3, r7, r4
 800f3ea:	4ada      	ldr	r2, [pc, #872]	; (800f754 <ProcessRadioRxDone+0x38c>)
 800f3ec:	8952      	ldrh	r2, [r2, #10]
 800f3ee:	801a      	strh	r2, [r3, #0]
    int8_t snr = RxDoneParams.Snr;
 800f3f0:	2577      	movs	r5, #119	; 0x77
 800f3f2:	197b      	adds	r3, r7, r5
 800f3f4:	4ad7      	ldr	r2, [pc, #860]	; (800f754 <ProcessRadioRxDone+0x38c>)
 800f3f6:	7b12      	ldrb	r2, [r2, #12]
 800f3f8:	701a      	strb	r2, [r3, #0]

    uint8_t pktHeaderLen = 0;
 800f3fa:	2376      	movs	r3, #118	; 0x76
 800f3fc:	18fb      	adds	r3, r7, r3
 800f3fe:	2200      	movs	r2, #0
 800f400:	701a      	strb	r2, [r3, #0]

    uint32_t downLinkCounter = 0;
 800f402:	2300      	movs	r3, #0
 800f404:	607b      	str	r3, [r7, #4]
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 800f406:	4bd4      	ldr	r3, [pc, #848]	; (800f758 <ProcessRadioRxDone+0x390>)
 800f408:	4ad4      	ldr	r2, [pc, #848]	; (800f75c <ProcessRadioRxDone+0x394>)
 800f40a:	589b      	ldr	r3, [r3, r2]
 800f40c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f40e:	2284      	movs	r2, #132	; 0x84
 800f410:	18ba      	adds	r2, r7, r2
 800f412:	6013      	str	r3, [r2, #0]
    uint8_t multicast = 0;
 800f414:	2383      	movs	r3, #131	; 0x83
 800f416:	18fb      	adds	r3, r7, r3
 800f418:	2200      	movs	r2, #0
 800f41a:	701a      	strb	r2, [r3, #0]
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800f41c:	2382      	movs	r3, #130	; 0x82
 800f41e:	18fb      	adds	r3, r7, r3
 800f420:	2201      	movs	r2, #1
 800f422:	701a      	strb	r2, [r3, #0]
    FCntIdentifier_t fCntID;

    MacCtx.McpsConfirm.AckReceived = false;
 800f424:	4acc      	ldr	r2, [pc, #816]	; (800f758 <ProcessRadioRxDone+0x390>)
 800f426:	2388      	movs	r3, #136	; 0x88
 800f428:	00db      	lsls	r3, r3, #3
 800f42a:	2100      	movs	r1, #0
 800f42c:	54d1      	strb	r1, [r2, r3]
    MacCtx.McpsIndication.Rssi = rssi;
 800f42e:	4bca      	ldr	r3, [pc, #808]	; (800f758 <ProcessRadioRxDone+0x390>)
 800f430:	193a      	adds	r2, r7, r4
 800f432:	49cb      	ldr	r1, [pc, #812]	; (800f760 <ProcessRadioRxDone+0x398>)
 800f434:	8812      	ldrh	r2, [r2, #0]
 800f436:	525a      	strh	r2, [r3, r1]
    MacCtx.McpsIndication.Snr = snr;
 800f438:	4bc7      	ldr	r3, [pc, #796]	; (800f758 <ProcessRadioRxDone+0x390>)
 800f43a:	197a      	adds	r2, r7, r5
 800f43c:	49c9      	ldr	r1, [pc, #804]	; (800f764 <ProcessRadioRxDone+0x39c>)
 800f43e:	7812      	ldrb	r2, [r2, #0]
 800f440:	545a      	strb	r2, [r3, r1]
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
 800f442:	4ac5      	ldr	r2, [pc, #788]	; (800f758 <ProcessRadioRxDone+0x390>)
 800f444:	2390      	movs	r3, #144	; 0x90
 800f446:	00db      	lsls	r3, r3, #3
 800f448:	5cd1      	ldrb	r1, [r2, r3]
 800f44a:	4bc3      	ldr	r3, [pc, #780]	; (800f758 <ProcessRadioRxDone+0x390>)
 800f44c:	4ac6      	ldr	r2, [pc, #792]	; (800f768 <ProcessRadioRxDone+0x3a0>)
 800f44e:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Port = 0;
 800f450:	4bc1      	ldr	r3, [pc, #772]	; (800f758 <ProcessRadioRxDone+0x390>)
 800f452:	4ac6      	ldr	r2, [pc, #792]	; (800f76c <ProcessRadioRxDone+0x3a4>)
 800f454:	2100      	movs	r1, #0
 800f456:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Multicast = 0;
 800f458:	4bbf      	ldr	r3, [pc, #764]	; (800f758 <ProcessRadioRxDone+0x390>)
 800f45a:	4ac5      	ldr	r2, [pc, #788]	; (800f770 <ProcessRadioRxDone+0x3a8>)
 800f45c:	2100      	movs	r1, #0
 800f45e:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.FramePending = 0;
 800f460:	4bbd      	ldr	r3, [pc, #756]	; (800f758 <ProcessRadioRxDone+0x390>)
 800f462:	4ac4      	ldr	r2, [pc, #784]	; (800f774 <ProcessRadioRxDone+0x3ac>)
 800f464:	2100      	movs	r1, #0
 800f466:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Buffer = NULL;
 800f468:	4bbb      	ldr	r3, [pc, #748]	; (800f758 <ProcessRadioRxDone+0x390>)
 800f46a:	4ac3      	ldr	r2, [pc, #780]	; (800f778 <ProcessRadioRxDone+0x3b0>)
 800f46c:	2100      	movs	r1, #0
 800f46e:	5099      	str	r1, [r3, r2]
    MacCtx.McpsIndication.BufferSize = 0;
 800f470:	4ab9      	ldr	r2, [pc, #740]	; (800f758 <ProcessRadioRxDone+0x390>)
 800f472:	2385      	movs	r3, #133	; 0x85
 800f474:	00db      	lsls	r3, r3, #3
 800f476:	2100      	movs	r1, #0
 800f478:	54d1      	strb	r1, [r2, r3]
    MacCtx.McpsIndication.RxData = false;
 800f47a:	4bb7      	ldr	r3, [pc, #732]	; (800f758 <ProcessRadioRxDone+0x390>)
 800f47c:	4abf      	ldr	r2, [pc, #764]	; (800f77c <ProcessRadioRxDone+0x3b4>)
 800f47e:	2100      	movs	r1, #0
 800f480:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.AckReceived = false;
 800f482:	4bb5      	ldr	r3, [pc, #724]	; (800f758 <ProcessRadioRxDone+0x390>)
 800f484:	4abe      	ldr	r2, [pc, #760]	; (800f780 <ProcessRadioRxDone+0x3b8>)
 800f486:	2100      	movs	r1, #0
 800f488:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800f48a:	4ab3      	ldr	r2, [pc, #716]	; (800f758 <ProcessRadioRxDone+0x390>)
 800f48c:	2386      	movs	r3, #134	; 0x86
 800f48e:	00db      	lsls	r3, r3, #3
 800f490:	2100      	movs	r1, #0
 800f492:	50d1      	str	r1, [r2, r3]
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800f494:	4bb0      	ldr	r3, [pc, #704]	; (800f758 <ProcessRadioRxDone+0x390>)
 800f496:	4abb      	ldr	r2, [pc, #748]	; (800f784 <ProcessRadioRxDone+0x3bc>)
 800f498:	2100      	movs	r1, #0
 800f49a:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.DevAddress = 0;
 800f49c:	4bae      	ldr	r3, [pc, #696]	; (800f758 <ProcessRadioRxDone+0x390>)
 800f49e:	4aba      	ldr	r2, [pc, #744]	; (800f788 <ProcessRadioRxDone+0x3c0>)
 800f4a0:	2100      	movs	r1, #0
 800f4a2:	5099      	str	r1, [r3, r2]
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800f4a4:	4aac      	ldr	r2, [pc, #688]	; (800f758 <ProcessRadioRxDone+0x390>)
 800f4a6:	2387      	movs	r3, #135	; 0x87
 800f4a8:	00db      	lsls	r3, r3, #3
 800f4aa:	2100      	movs	r1, #0
 800f4ac:	54d1      	strb	r1, [r2, r3]

    Radio.Sleep( );
 800f4ae:	4bb7      	ldr	r3, [pc, #732]	; (800f78c <ProcessRadioRxDone+0x3c4>)
 800f4b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4b2:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 800f4b4:	4bb6      	ldr	r3, [pc, #728]	; (800f790 <ProcessRadioRxDone+0x3c8>)
 800f4b6:	0018      	movs	r0, r3
 800f4b8:	f00d fbd6 	bl	801cc68 <UTIL_TIMER_Stop>

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800f4bc:	19bb      	adds	r3, r7, r6
 800f4be:	881a      	ldrh	r2, [r3, #0]
 800f4c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f4c2:	0011      	movs	r1, r2
 800f4c4:	0018      	movs	r0, r3
 800f4c6:	f005 f9f1 	bl	80148ac <LoRaMacClassBRxBeacon>
 800f4ca:	1e03      	subs	r3, r0, #0
 800f4cc:	d00c      	beq.n	800f4e8 <ProcessRadioRxDone+0x120>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800f4ce:	4ba2      	ldr	r3, [pc, #648]	; (800f758 <ProcessRadioRxDone+0x390>)
 800f4d0:	193a      	adds	r2, r7, r4
 800f4d2:	49b0      	ldr	r1, [pc, #704]	; (800f794 <ProcessRadioRxDone+0x3cc>)
 800f4d4:	8812      	ldrh	r2, [r2, #0]
 800f4d6:	525a      	strh	r2, [r3, r1]
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800f4d8:	4a9f      	ldr	r2, [pc, #636]	; (800f758 <ProcessRadioRxDone+0x390>)
 800f4da:	1979      	adds	r1, r7, r5
 800f4dc:	238f      	movs	r3, #143	; 0x8f
 800f4de:	00db      	lsls	r3, r3, #3
 800f4e0:	7809      	ldrb	r1, [r1, #0]
 800f4e2:	54d1      	strb	r1, [r2, r3]
        return;
 800f4e4:	f000 fc9e 	bl	800fe24 <ProcessRadioRxDone+0xa5c>
    }
    // Check if we expect a ping or a multicast slot.
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800f4e8:	4b9b      	ldr	r3, [pc, #620]	; (800f758 <ProcessRadioRxDone+0x390>)
 800f4ea:	4a9c      	ldr	r2, [pc, #624]	; (800f75c <ProcessRadioRxDone+0x394>)
 800f4ec:	589b      	ldr	r3, [r3, r2]
 800f4ee:	227c      	movs	r2, #124	; 0x7c
 800f4f0:	5c9b      	ldrb	r3, [r3, r2]
 800f4f2:	2b01      	cmp	r3, #1
 800f4f4:	d11c      	bne.n	800f530 <ProcessRadioRxDone+0x168>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800f4f6:	f005 f9eb 	bl	80148d0 <LoRaMacClassBIsPingExpected>
 800f4fa:	1e03      	subs	r3, r0, #0
 800f4fc:	d00a      	beq.n	800f514 <ProcessRadioRxDone+0x14c>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f4fe:	2000      	movs	r0, #0
 800f500:	f005 f9a2 	bl	8014848 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800f504:	2000      	movs	r0, #0
 800f506:	f005 f9c1 	bl	801488c <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800f50a:	4b93      	ldr	r3, [pc, #588]	; (800f758 <ProcessRadioRxDone+0x390>)
 800f50c:	4a96      	ldr	r2, [pc, #600]	; (800f768 <ProcessRadioRxDone+0x3a0>)
 800f50e:	2104      	movs	r1, #4
 800f510:	5499      	strb	r1, [r3, r2]
 800f512:	e00d      	b.n	800f530 <ProcessRadioRxDone+0x168>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800f514:	f005 f9e2 	bl	80148dc <LoRaMacClassBIsMulticastExpected>
 800f518:	1e03      	subs	r3, r0, #0
 800f51a:	d009      	beq.n	800f530 <ProcessRadioRxDone+0x168>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f51c:	2000      	movs	r0, #0
 800f51e:	f005 f99d 	bl	801485c <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800f522:	2000      	movs	r0, #0
 800f524:	f005 f9ba 	bl	801489c <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800f528:	4b8b      	ldr	r3, [pc, #556]	; (800f758 <ProcessRadioRxDone+0x390>)
 800f52a:	4a8f      	ldr	r2, [pc, #572]	; (800f768 <ProcessRadioRxDone+0x3a0>)
 800f52c:	2105      	movs	r1, #5
 800f52e:	5499      	strb	r1, [r3, r2]
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800f530:	2276      	movs	r2, #118	; 0x76
 800f532:	18bb      	adds	r3, r7, r2
 800f534:	781b      	ldrb	r3, [r3, #0]
 800f536:	18ba      	adds	r2, r7, r2
 800f538:	1c59      	adds	r1, r3, #1
 800f53a:	7011      	strb	r1, [r2, #0]
 800f53c:	001a      	movs	r2, r3
 800f53e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f540:	189b      	adds	r3, r3, r2
 800f542:	781a      	ldrb	r2, [r3, #0]
 800f544:	2174      	movs	r1, #116	; 0x74
 800f546:	187b      	adds	r3, r7, r1
 800f548:	701a      	strb	r2, [r3, #0]

    switch( macHdr.Bits.MType )
 800f54a:	187b      	adds	r3, r7, r1
 800f54c:	781b      	ldrb	r3, [r3, #0]
 800f54e:	061b      	lsls	r3, r3, #24
 800f550:	0f5b      	lsrs	r3, r3, #29
 800f552:	b2db      	uxtb	r3, r3
 800f554:	2b07      	cmp	r3, #7
 800f556:	d101      	bne.n	800f55c <ProcessRadioRxDone+0x194>
 800f558:	f000 fc0c 	bl	800fd74 <ProcessRadioRxDone+0x9ac>
 800f55c:	dd01      	ble.n	800f562 <ProcessRadioRxDone+0x19a>
 800f55e:	f000 fc38 	bl	800fdd2 <ProcessRadioRxDone+0xa0a>
 800f562:	2b05      	cmp	r3, #5
 800f564:	d100      	bne.n	800f568 <ProcessRadioRxDone+0x1a0>
 800f566:	e119      	b.n	800f79c <ProcessRadioRxDone+0x3d4>
 800f568:	dd01      	ble.n	800f56e <ProcessRadioRxDone+0x1a6>
 800f56a:	f000 fc32 	bl	800fdd2 <ProcessRadioRxDone+0xa0a>
 800f56e:	2b01      	cmp	r3, #1
 800f570:	d004      	beq.n	800f57c <ProcessRadioRxDone+0x1b4>
 800f572:	2b03      	cmp	r3, #3
 800f574:	d100      	bne.n	800f578 <ProcessRadioRxDone+0x1b0>
 800f576:	e115      	b.n	800f7a4 <ProcessRadioRxDone+0x3dc>
 800f578:	f000 fc2b 	bl	800fdd2 <ProcessRadioRxDone+0xa0a>
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800f57c:	237a      	movs	r3, #122	; 0x7a
 800f57e:	18fb      	adds	r3, r7, r3
 800f580:	881b      	ldrh	r3, [r3, #0]
 800f582:	2b10      	cmp	r3, #16
 800f584:	d807      	bhi.n	800f596 <ProcessRadioRxDone+0x1ce>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f586:	4b74      	ldr	r3, [pc, #464]	; (800f758 <ProcessRadioRxDone+0x390>)
 800f588:	4a83      	ldr	r2, [pc, #524]	; (800f798 <ProcessRadioRxDone+0x3d0>)
 800f58a:	2101      	movs	r1, #1
 800f58c:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800f58e:	f7ff feef 	bl	800f370 <PrepareRxDoneAbort>
                return;
 800f592:	f000 fc47 	bl	800fe24 <ProcessRadioRxDone+0xa5c>
            }
            macMsgJoinAccept.Buffer = payload;
 800f596:	2108      	movs	r1, #8
 800f598:	187b      	adds	r3, r7, r1
 800f59a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f59c:	601a      	str	r2, [r3, #0]
            macMsgJoinAccept.BufSize = size;
 800f59e:	237a      	movs	r3, #122	; 0x7a
 800f5a0:	18fb      	adds	r3, r7, r3
 800f5a2:	881b      	ldrh	r3, [r3, #0]
 800f5a4:	b2da      	uxtb	r2, r3
 800f5a6:	187b      	adds	r3, r7, r1
 800f5a8:	711a      	strb	r2, [r3, #4]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 800f5aa:	4b6b      	ldr	r3, [pc, #428]	; (800f758 <ProcessRadioRxDone+0x390>)
 800f5ac:	4a6b      	ldr	r2, [pc, #428]	; (800f75c <ProcessRadioRxDone+0x394>)
 800f5ae:	589a      	ldr	r2, [r3, r2]
 800f5b0:	23b2      	movs	r3, #178	; 0xb2
 800f5b2:	005b      	lsls	r3, r3, #1
 800f5b4:	5cd3      	ldrb	r3, [r2, r3]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d007      	beq.n	800f5ca <ProcessRadioRxDone+0x202>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f5ba:	4b67      	ldr	r3, [pc, #412]	; (800f758 <ProcessRadioRxDone+0x390>)
 800f5bc:	4a76      	ldr	r2, [pc, #472]	; (800f798 <ProcessRadioRxDone+0x3d0>)
 800f5be:	2101      	movs	r1, #1
 800f5c0:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800f5c2:	f7ff fed5 	bl	800f370 <PrepareRxDoneAbort>
                return;
 800f5c6:	f000 fc2d 	bl	800fe24 <ProcessRadioRxDone+0xa5c>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800f5ca:	f7fe fc21 	bl	800de10 <SecureElementGetJoinEui>
 800f5ce:	0001      	movs	r1, r0
 800f5d0:	2680      	movs	r6, #128	; 0x80
 800f5d2:	19bc      	adds	r4, r7, r6
 800f5d4:	2508      	movs	r5, #8
 800f5d6:	197b      	adds	r3, r7, r5
 800f5d8:	001a      	movs	r2, r3
 800f5da:	20ff      	movs	r0, #255	; 0xff
 800f5dc:	f006 fcba 	bl	8015f54 <LoRaMacCryptoHandleJoinAccept>
 800f5e0:	0003      	movs	r3, r0
 800f5e2:	7023      	strb	r3, [r4, #0]

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800f5e4:	19bb      	adds	r3, r7, r6
 800f5e6:	781b      	ldrb	r3, [r3, #0]
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d000      	beq.n	800f5ee <ProcessRadioRxDone+0x226>
 800f5ec:	e0a7      	b.n	800f73e <ProcessRadioRxDone+0x376>
            {
                // Network ID
                MacCtx.NvmCtx->NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800f5ee:	002c      	movs	r4, r5
 800f5f0:	193b      	adds	r3, r7, r4
 800f5f2:	7a59      	ldrb	r1, [r3, #9]
 800f5f4:	4b58      	ldr	r3, [pc, #352]	; (800f758 <ProcessRadioRxDone+0x390>)
 800f5f6:	4a59      	ldr	r2, [pc, #356]	; (800f75c <ProcessRadioRxDone+0x394>)
 800f5f8:	589b      	ldr	r3, [r3, r2]
 800f5fa:	000a      	movs	r2, r1
 800f5fc:	649a      	str	r2, [r3, #72]	; 0x48
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800f5fe:	4b56      	ldr	r3, [pc, #344]	; (800f758 <ProcessRadioRxDone+0x390>)
 800f600:	4a56      	ldr	r2, [pc, #344]	; (800f75c <ProcessRadioRxDone+0x394>)
 800f602:	589b      	ldr	r3, [r3, r2]
 800f604:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800f606:	193b      	adds	r3, r7, r4
 800f608:	7a9b      	ldrb	r3, [r3, #10]
 800f60a:	021a      	lsls	r2, r3, #8
 800f60c:	4b52      	ldr	r3, [pc, #328]	; (800f758 <ProcessRadioRxDone+0x390>)
 800f60e:	4853      	ldr	r0, [pc, #332]	; (800f75c <ProcessRadioRxDone+0x394>)
 800f610:	581b      	ldr	r3, [r3, r0]
 800f612:	430a      	orrs	r2, r1
 800f614:	649a      	str	r2, [r3, #72]	; 0x48
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800f616:	4b50      	ldr	r3, [pc, #320]	; (800f758 <ProcessRadioRxDone+0x390>)
 800f618:	4a50      	ldr	r2, [pc, #320]	; (800f75c <ProcessRadioRxDone+0x394>)
 800f61a:	589b      	ldr	r3, [r3, r2]
 800f61c:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800f61e:	193b      	adds	r3, r7, r4
 800f620:	7adb      	ldrb	r3, [r3, #11]
 800f622:	041a      	lsls	r2, r3, #16
 800f624:	4b4c      	ldr	r3, [pc, #304]	; (800f758 <ProcessRadioRxDone+0x390>)
 800f626:	484d      	ldr	r0, [pc, #308]	; (800f75c <ProcessRadioRxDone+0x394>)
 800f628:	581b      	ldr	r3, [r3, r0]
 800f62a:	430a      	orrs	r2, r1
 800f62c:	649a      	str	r2, [r3, #72]	; 0x48

                // Device Address
                MacCtx.NvmCtx->DevAddr = macMsgJoinAccept.DevAddr;
 800f62e:	4b4a      	ldr	r3, [pc, #296]	; (800f758 <ProcessRadioRxDone+0x390>)
 800f630:	4a4a      	ldr	r2, [pc, #296]	; (800f75c <ProcessRadioRxDone+0x394>)
 800f632:	589b      	ldr	r3, [r3, r2]
 800f634:	0020      	movs	r0, r4
 800f636:	183a      	adds	r2, r7, r0
 800f638:	68d2      	ldr	r2, [r2, #12]
 800f63a:	64da      	str	r2, [r3, #76]	; 0x4c

                // DLSettings
                MacCtx.NvmCtx->MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800f63c:	183b      	adds	r3, r7, r0
 800f63e:	7c1b      	ldrb	r3, [r3, #16]
 800f640:	065b      	lsls	r3, r3, #25
 800f642:	0f5b      	lsrs	r3, r3, #29
 800f644:	b2d9      	uxtb	r1, r3
 800f646:	4b44      	ldr	r3, [pc, #272]	; (800f758 <ProcessRadioRxDone+0x390>)
 800f648:	4a44      	ldr	r2, [pc, #272]	; (800f75c <ProcessRadioRxDone+0x394>)
 800f64a:	589b      	ldr	r3, [r3, r2]
 800f64c:	22a5      	movs	r2, #165	; 0xa5
 800f64e:	5499      	strb	r1, [r3, r2]
                MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800f650:	183b      	adds	r3, r7, r0
 800f652:	7c1b      	ldrb	r3, [r3, #16]
 800f654:	071b      	lsls	r3, r3, #28
 800f656:	0f1b      	lsrs	r3, r3, #28
 800f658:	b2d9      	uxtb	r1, r3
 800f65a:	4b3f      	ldr	r3, [pc, #252]	; (800f758 <ProcessRadioRxDone+0x390>)
 800f65c:	4a3f      	ldr	r2, [pc, #252]	; (800f75c <ProcessRadioRxDone+0x394>)
 800f65e:	589b      	ldr	r3, [r3, r2]
 800f660:	22ac      	movs	r2, #172	; 0xac
 800f662:	5499      	strb	r1, [r3, r2]
                MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800f664:	183b      	adds	r3, r7, r0
 800f666:	7c1b      	ldrb	r3, [r3, #16]
 800f668:	071b      	lsls	r3, r3, #28
 800f66a:	0f1b      	lsrs	r3, r3, #28
 800f66c:	b2d9      	uxtb	r1, r3
 800f66e:	4b3a      	ldr	r3, [pc, #232]	; (800f758 <ProcessRadioRxDone+0x390>)
 800f670:	4a3a      	ldr	r2, [pc, #232]	; (800f75c <ProcessRadioRxDone+0x394>)
 800f672:	589b      	ldr	r3, [r3, r2]
 800f674:	22b4      	movs	r2, #180	; 0xb4
 800f676:	5499      	strb	r1, [r3, r2]

                // RxDelay
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800f678:	183b      	adds	r3, r7, r0
 800f67a:	7c59      	ldrb	r1, [r3, #17]
 800f67c:	4b36      	ldr	r3, [pc, #216]	; (800f758 <ProcessRadioRxDone+0x390>)
 800f67e:	4a37      	ldr	r2, [pc, #220]	; (800f75c <ProcessRadioRxDone+0x394>)
 800f680:	589b      	ldr	r3, [r3, r2]
 800f682:	2294      	movs	r2, #148	; 0x94
 800f684:	5099      	str	r1, [r3, r2]
                if( MacCtx.NvmCtx->MacParams.ReceiveDelay1 == 0 )
 800f686:	4b34      	ldr	r3, [pc, #208]	; (800f758 <ProcessRadioRxDone+0x390>)
 800f688:	4a34      	ldr	r2, [pc, #208]	; (800f75c <ProcessRadioRxDone+0x394>)
 800f68a:	589b      	ldr	r3, [r3, r2]
 800f68c:	2294      	movs	r2, #148	; 0x94
 800f68e:	589b      	ldr	r3, [r3, r2]
 800f690:	2b00      	cmp	r3, #0
 800f692:	d105      	bne.n	800f6a0 <ProcessRadioRxDone+0x2d8>
                {
                    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = 1;
 800f694:	4b30      	ldr	r3, [pc, #192]	; (800f758 <ProcessRadioRxDone+0x390>)
 800f696:	4a31      	ldr	r2, [pc, #196]	; (800f75c <ProcessRadioRxDone+0x394>)
 800f698:	589b      	ldr	r3, [r3, r2]
 800f69a:	2294      	movs	r2, #148	; 0x94
 800f69c:	2101      	movs	r1, #1
 800f69e:	5099      	str	r1, [r3, r2]
                }
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 *= 1000;
 800f6a0:	4b2d      	ldr	r3, [pc, #180]	; (800f758 <ProcessRadioRxDone+0x390>)
 800f6a2:	4a2e      	ldr	r2, [pc, #184]	; (800f75c <ProcessRadioRxDone+0x394>)
 800f6a4:	589b      	ldr	r3, [r3, r2]
 800f6a6:	2294      	movs	r2, #148	; 0x94
 800f6a8:	589a      	ldr	r2, [r3, r2]
 800f6aa:	4b2b      	ldr	r3, [pc, #172]	; (800f758 <ProcessRadioRxDone+0x390>)
 800f6ac:	492b      	ldr	r1, [pc, #172]	; (800f75c <ProcessRadioRxDone+0x394>)
 800f6ae:	5859      	ldr	r1, [r3, r1]
 800f6b0:	0013      	movs	r3, r2
 800f6b2:	015b      	lsls	r3, r3, #5
 800f6b4:	1a9b      	subs	r3, r3, r2
 800f6b6:	009b      	lsls	r3, r3, #2
 800f6b8:	189b      	adds	r3, r3, r2
 800f6ba:	00db      	lsls	r3, r3, #3
 800f6bc:	001a      	movs	r2, r3
 800f6be:	2394      	movs	r3, #148	; 0x94
 800f6c0:	50ca      	str	r2, [r1, r3]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 800f6c2:	4b25      	ldr	r3, [pc, #148]	; (800f758 <ProcessRadioRxDone+0x390>)
 800f6c4:	4a25      	ldr	r2, [pc, #148]	; (800f75c <ProcessRadioRxDone+0x394>)
 800f6c6:	589b      	ldr	r3, [r3, r2]
 800f6c8:	2294      	movs	r2, #148	; 0x94
 800f6ca:	589b      	ldr	r3, [r3, r2]
 800f6cc:	4a22      	ldr	r2, [pc, #136]	; (800f758 <ProcessRadioRxDone+0x390>)
 800f6ce:	4923      	ldr	r1, [pc, #140]	; (800f75c <ProcessRadioRxDone+0x394>)
 800f6d0:	5852      	ldr	r2, [r2, r1]
 800f6d2:	21fa      	movs	r1, #250	; 0xfa
 800f6d4:	0089      	lsls	r1, r1, #2
 800f6d6:	468c      	mov	ip, r1
 800f6d8:	4463      	add	r3, ip
 800f6da:	2198      	movs	r1, #152	; 0x98
 800f6dc:	5053      	str	r3, [r2, r1]

                MacCtx.NvmCtx->Version.Fields.Minor = 0;
 800f6de:	4b1e      	ldr	r3, [pc, #120]	; (800f758 <ProcessRadioRxDone+0x390>)
 800f6e0:	4a1e      	ldr	r2, [pc, #120]	; (800f75c <ProcessRadioRxDone+0x394>)
 800f6e2:	589a      	ldr	r2, [r3, r2]
 800f6e4:	23b1      	movs	r3, #177	; 0xb1
 800f6e6:	005b      	lsls	r3, r3, #1
 800f6e8:	2100      	movs	r1, #0
 800f6ea:	54d1      	strb	r1, [r2, r3]

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800f6ec:	216c      	movs	r1, #108	; 0x6c
 800f6ee:	187b      	adds	r3, r7, r1
 800f6f0:	2208      	movs	r2, #8
 800f6f2:	18ba      	adds	r2, r7, r2
 800f6f4:	3212      	adds	r2, #18
 800f6f6:	601a      	str	r2, [r3, #0]
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800f6f8:	237a      	movs	r3, #122	; 0x7a
 800f6fa:	18fb      	adds	r3, r7, r3
 800f6fc:	881b      	ldrh	r3, [r3, #0]
 800f6fe:	b2db      	uxtb	r3, r3
 800f700:	3b11      	subs	r3, #17
 800f702:	b2da      	uxtb	r2, r3
 800f704:	187b      	adds	r3, r7, r1
 800f706:	711a      	strb	r2, [r3, #4]

                RegionApplyCFList( MacCtx.NvmCtx->Region, &applyCFList );
 800f708:	4b13      	ldr	r3, [pc, #76]	; (800f758 <ProcessRadioRxDone+0x390>)
 800f70a:	4a14      	ldr	r2, [pc, #80]	; (800f75c <ProcessRadioRxDone+0x394>)
 800f70c:	589b      	ldr	r3, [r3, r2]
 800f70e:	781b      	ldrb	r3, [r3, #0]
 800f710:	187a      	adds	r2, r7, r1
 800f712:	0011      	movs	r1, r2
 800f714:	0018      	movs	r0, r3
 800f716:	f007 faf4 	bl	8016d02 <RegionApplyCFList>

                MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_OTAA;
 800f71a:	4b0f      	ldr	r3, [pc, #60]	; (800f758 <ProcessRadioRxDone+0x390>)
 800f71c:	4a0f      	ldr	r2, [pc, #60]	; (800f75c <ProcessRadioRxDone+0x394>)
 800f71e:	589a      	ldr	r2, [r3, r2]
 800f720:	23b2      	movs	r3, #178	; 0xb2
 800f722:	005b      	lsls	r3, r3, #1
 800f724:	2102      	movs	r1, #2
 800f726:	54d1      	strb	r1, [r2, r3]

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800f728:	2001      	movs	r0, #1
 800f72a:	f005 fe49 	bl	80153c0 <LoRaMacConfirmQueueIsCmdActive>
 800f72e:	1e03      	subs	r3, r0, #0
 800f730:	d100      	bne.n	800f734 <ProcessRadioRxDone+0x36c>
 800f732:	e355      	b.n	800fde0 <ProcessRadioRxDone+0xa18>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800f734:	2101      	movs	r1, #1
 800f736:	2000      	movs	r0, #0
 800f738:	f005 fda6 	bl	8015288 <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
                }
            }
            break;
 800f73c:	e350      	b.n	800fde0 <ProcessRadioRxDone+0xa18>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800f73e:	2001      	movs	r0, #1
 800f740:	f005 fe3e 	bl	80153c0 <LoRaMacConfirmQueueIsCmdActive>
 800f744:	1e03      	subs	r3, r0, #0
 800f746:	d100      	bne.n	800f74a <ProcessRadioRxDone+0x382>
 800f748:	e34a      	b.n	800fde0 <ProcessRadioRxDone+0xa18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800f74a:	2101      	movs	r1, #1
 800f74c:	2007      	movs	r0, #7
 800f74e:	f005 fd9b 	bl	8015288 <LoRaMacConfirmQueueSetStatus>
            break;
 800f752:	e345      	b.n	800fde0 <ProcessRadioRxDone+0xa18>
 800f754:	20001734 	.word	0x20001734
 800f758:	200005b8 	.word	0x200005b8
 800f75c:	00000484 	.word	0x00000484
 800f760:	0000042a 	.word	0x0000042a
 800f764:	0000042c 	.word	0x0000042c
 800f768:	0000042d 	.word	0x0000042d
 800f76c:	0000041f 	.word	0x0000041f
 800f770:	0000041e 	.word	0x0000041e
 800f774:	00000421 	.word	0x00000421
 800f778:	00000424 	.word	0x00000424
 800f77c:	00000429 	.word	0x00000429
 800f780:	0000042e 	.word	0x0000042e
 800f784:	0000041c 	.word	0x0000041c
 800f788:	00000434 	.word	0x00000434
 800f78c:	0801fd54 	.word	0x0801fd54
 800f790:	20000950 	.word	0x20000950
 800f794:	00000476 	.word	0x00000476
 800f798:	0000041d 	.word	0x0000041d
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800f79c:	4bd5      	ldr	r3, [pc, #852]	; (800faf4 <ProcessRadioRxDone+0x72c>)
 800f79e:	4ad6      	ldr	r2, [pc, #856]	; (800faf8 <ProcessRadioRxDone+0x730>)
 800f7a0:	2101      	movs	r1, #1
 800f7a2:	5499      	strb	r1, [r3, r2]
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800f7a4:	4bd3      	ldr	r3, [pc, #844]	; (800faf4 <ProcessRadioRxDone+0x72c>)
 800f7a6:	4ad5      	ldr	r2, [pc, #852]	; (800fafc <ProcessRadioRxDone+0x734>)
 800f7a8:	589b      	ldr	r3, [r3, r2]
 800f7aa:	22b9      	movs	r2, #185	; 0xb9
 800f7ac:	5c9a      	ldrb	r2, [r3, r2]
 800f7ae:	2164      	movs	r1, #100	; 0x64
 800f7b0:	187b      	adds	r3, r7, r1
 800f7b2:	709a      	strb	r2, [r3, #2]
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800f7b4:	4acf      	ldr	r2, [pc, #828]	; (800faf4 <ProcessRadioRxDone+0x72c>)
 800f7b6:	2384      	movs	r3, #132	; 0x84
 800f7b8:	00db      	lsls	r3, r3, #3
 800f7ba:	5cd3      	ldrb	r3, [r2, r3]
 800f7bc:	b25a      	sxtb	r2, r3
 800f7be:	187b      	adds	r3, r7, r1
 800f7c0:	705a      	strb	r2, [r3, #1]
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800f7c2:	187b      	adds	r3, r7, r1
 800f7c4:	220d      	movs	r2, #13
 800f7c6:	701a      	strb	r2, [r3, #0]

            // Get the maximum payload length
            if( MacCtx.NvmCtx->RepeaterSupport == true )
 800f7c8:	4bca      	ldr	r3, [pc, #808]	; (800faf4 <ProcessRadioRxDone+0x72c>)
 800f7ca:	4acc      	ldr	r2, [pc, #816]	; (800fafc <ProcessRadioRxDone+0x734>)
 800f7cc:	589b      	ldr	r3, [r3, r2]
 800f7ce:	22ca      	movs	r2, #202	; 0xca
 800f7d0:	5c9b      	ldrb	r3, [r3, r2]
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d002      	beq.n	800f7dc <ProcessRadioRxDone+0x414>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800f7d6:	187b      	adds	r3, r7, r1
 800f7d8:	220e      	movs	r2, #14
 800f7da:	701a      	strb	r2, [r3, #0]
            }

            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800f7dc:	4bc5      	ldr	r3, [pc, #788]	; (800faf4 <ProcessRadioRxDone+0x72c>)
 800f7de:	4ac7      	ldr	r2, [pc, #796]	; (800fafc <ProcessRadioRxDone+0x734>)
 800f7e0:	589b      	ldr	r3, [r3, r2]
 800f7e2:	781b      	ldrb	r3, [r3, #0]
 800f7e4:	2264      	movs	r2, #100	; 0x64
 800f7e6:	18ba      	adds	r2, r7, r2
 800f7e8:	0011      	movs	r1, r2
 800f7ea:	0018      	movs	r0, r3
 800f7ec:	f007 fa05 	bl	8016bfa <RegionGetPhyParam>
 800f7f0:	0003      	movs	r3, r0
 800f7f2:	001a      	movs	r2, r3
 800f7f4:	2360      	movs	r3, #96	; 0x60
 800f7f6:	18fb      	adds	r3, r7, r3
 800f7f8:	601a      	str	r2, [r3, #0]
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800f7fa:	237a      	movs	r3, #122	; 0x7a
 800f7fc:	18fb      	adds	r3, r7, r3
 800f7fe:	881b      	ldrh	r3, [r3, #0]
 800f800:	3b0d      	subs	r3, #13
 800f802:	b29b      	uxth	r3, r3
 800f804:	b21b      	sxth	r3, r3
 800f806:	1c1a      	adds	r2, r3, #0
 800f808:	b213      	sxth	r3, r2
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	da01      	bge.n	800f812 <ProcessRadioRxDone+0x44a>
 800f80e:	2300      	movs	r3, #0
 800f810:	1c1a      	adds	r2, r3, #0
 800f812:	b212      	sxth	r2, r2
 800f814:	2360      	movs	r3, #96	; 0x60
 800f816:	18fb      	adds	r3, r7, r3
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	b21b      	sxth	r3, r3
 800f81c:	429a      	cmp	r2, r3
 800f81e:	dc04      	bgt.n	800f82a <ProcessRadioRxDone+0x462>
 800f820:	237a      	movs	r3, #122	; 0x7a
 800f822:	18fb      	adds	r3, r7, r3
 800f824:	881b      	ldrh	r3, [r3, #0]
 800f826:	2b0b      	cmp	r3, #11
 800f828:	d806      	bhi.n	800f838 <ProcessRadioRxDone+0x470>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f82a:	4bb2      	ldr	r3, [pc, #712]	; (800faf4 <ProcessRadioRxDone+0x72c>)
 800f82c:	4ab4      	ldr	r2, [pc, #720]	; (800fb00 <ProcessRadioRxDone+0x738>)
 800f82e:	2101      	movs	r1, #1
 800f830:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800f832:	f7ff fd9d 	bl	800f370 <PrepareRxDoneAbort>
                return;
 800f836:	e2f5      	b.n	800fe24 <ProcessRadioRxDone+0xa5c>
            }
            macMsgData.Buffer = payload;
 800f838:	2130      	movs	r1, #48	; 0x30
 800f83a:	187b      	adds	r3, r7, r1
 800f83c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f83e:	601a      	str	r2, [r3, #0]
            macMsgData.BufSize = size;
 800f840:	237a      	movs	r3, #122	; 0x7a
 800f842:	18fb      	adds	r3, r7, r3
 800f844:	881b      	ldrh	r3, [r3, #0]
 800f846:	b2da      	uxtb	r2, r3
 800f848:	187b      	adds	r3, r7, r1
 800f84a:	711a      	strb	r2, [r3, #4]
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800f84c:	187b      	adds	r3, r7, r1
 800f84e:	4aad      	ldr	r2, [pc, #692]	; (800fb04 <ProcessRadioRxDone+0x73c>)
 800f850:	625a      	str	r2, [r3, #36]	; 0x24
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800f852:	0008      	movs	r0, r1
 800f854:	187b      	adds	r3, r7, r1
 800f856:	2228      	movs	r2, #40	; 0x28
 800f858:	21ff      	movs	r1, #255	; 0xff
 800f85a:	5499      	strb	r1, [r3, r2]

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800f85c:	183b      	adds	r3, r7, r0
 800f85e:	0018      	movs	r0, r3
 800f860:	f006 fee4 	bl	801662c <LoRaMacParserData>
 800f864:	1e03      	subs	r3, r0, #0
 800f866:	d006      	beq.n	800f876 <ProcessRadioRxDone+0x4ae>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f868:	4ba2      	ldr	r3, [pc, #648]	; (800faf4 <ProcessRadioRxDone+0x72c>)
 800f86a:	4aa5      	ldr	r2, [pc, #660]	; (800fb00 <ProcessRadioRxDone+0x738>)
 800f86c:	2101      	movs	r1, #1
 800f86e:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800f870:	f7ff fd7e 	bl	800f370 <PrepareRxDoneAbort>
                return;
 800f874:	e2d6      	b.n	800fe24 <ProcessRadioRxDone+0xa5c>
            }

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800f876:	2030      	movs	r0, #48	; 0x30
 800f878:	183b      	adds	r3, r7, r0
 800f87a:	689a      	ldr	r2, [r3, #8]
 800f87c:	4b9d      	ldr	r3, [pc, #628]	; (800faf4 <ProcessRadioRxDone+0x72c>)
 800f87e:	49a2      	ldr	r1, [pc, #648]	; (800fb08 <ProcessRadioRxDone+0x740>)
 800f880:	505a      	str	r2, [r3, r1]

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800f882:	1cba      	adds	r2, r7, #2
 800f884:	183b      	adds	r3, r7, r0
 800f886:	0011      	movs	r1, r2
 800f888:	0018      	movs	r0, r3
 800f88a:	f003 f861 	bl	8012950 <DetermineFrameType>
 800f88e:	1e03      	subs	r3, r0, #0
 800f890:	d006      	beq.n	800f8a0 <ProcessRadioRxDone+0x4d8>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f892:	4b98      	ldr	r3, [pc, #608]	; (800faf4 <ProcessRadioRxDone+0x72c>)
 800f894:	4a9a      	ldr	r2, [pc, #616]	; (800fb00 <ProcessRadioRxDone+0x738>)
 800f896:	2101      	movs	r1, #1
 800f898:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800f89a:	f7ff fd69 	bl	800f370 <PrepareRxDoneAbort>
                return;
 800f89e:	e2c1      	b.n	800fe24 <ProcessRadioRxDone+0xa5c>
            }

            //Check if it is a multicast message
            multicast = 0;
 800f8a0:	2383      	movs	r3, #131	; 0x83
 800f8a2:	18fb      	adds	r3, r7, r3
 800f8a4:	2200      	movs	r2, #0
 800f8a6:	701a      	strb	r2, [r3, #0]
            downLinkCounter = 0;
 800f8a8:	2300      	movs	r3, #0
 800f8aa:	607b      	str	r3, [r7, #4]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f8ac:	2381      	movs	r3, #129	; 0x81
 800f8ae:	18fb      	adds	r3, r7, r3
 800f8b0:	2200      	movs	r2, #0
 800f8b2:	701a      	strb	r2, [r3, #0]
 800f8b4:	e05b      	b.n	800f96e <ProcessRadioRxDone+0x5a6>
            {
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800f8b6:	4b8f      	ldr	r3, [pc, #572]	; (800faf4 <ProcessRadioRxDone+0x72c>)
 800f8b8:	4a90      	ldr	r2, [pc, #576]	; (800fafc <ProcessRadioRxDone+0x734>)
 800f8ba:	589a      	ldr	r2, [r3, r2]
 800f8bc:	2481      	movs	r4, #129	; 0x81
 800f8be:	193b      	adds	r3, r7, r4
 800f8c0:	781b      	ldrb	r3, [r3, #0]
 800f8c2:	212c      	movs	r1, #44	; 0x2c
 800f8c4:	434b      	muls	r3, r1
 800f8c6:	18d3      	adds	r3, r2, r3
 800f8c8:	3354      	adds	r3, #84	; 0x54
 800f8ca:	681a      	ldr	r2, [r3, #0]
 800f8cc:	2330      	movs	r3, #48	; 0x30
 800f8ce:	18fb      	adds	r3, r7, r3
 800f8d0:	689b      	ldr	r3, [r3, #8]
 800f8d2:	429a      	cmp	r2, r3
 800f8d4:	d145      	bne.n	800f962 <ProcessRadioRxDone+0x59a>
                    ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800f8d6:	4b87      	ldr	r3, [pc, #540]	; (800faf4 <ProcessRadioRxDone+0x72c>)
 800f8d8:	4a88      	ldr	r2, [pc, #544]	; (800fafc <ProcessRadioRxDone+0x734>)
 800f8da:	589a      	ldr	r2, [r3, r2]
 800f8dc:	193b      	adds	r3, r7, r4
 800f8de:	781b      	ldrb	r3, [r3, #0]
 800f8e0:	2152      	movs	r1, #82	; 0x52
 800f8e2:	202c      	movs	r0, #44	; 0x2c
 800f8e4:	4343      	muls	r3, r0
 800f8e6:	18d3      	adds	r3, r2, r3
 800f8e8:	185b      	adds	r3, r3, r1
 800f8ea:	781b      	ldrb	r3, [r3, #0]
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d038      	beq.n	800f962 <ProcessRadioRxDone+0x59a>
                {
                    multicast = 1;
 800f8f0:	2383      	movs	r3, #131	; 0x83
 800f8f2:	18fb      	adds	r3, r7, r3
 800f8f4:	2201      	movs	r2, #1
 800f8f6:	701a      	strb	r2, [r3, #0]
                    addrID = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.GroupID;
 800f8f8:	4b7e      	ldr	r3, [pc, #504]	; (800faf4 <ProcessRadioRxDone+0x72c>)
 800f8fa:	4a80      	ldr	r2, [pc, #512]	; (800fafc <ProcessRadioRxDone+0x734>)
 800f8fc:	5899      	ldr	r1, [r3, r2]
 800f8fe:	0025      	movs	r5, r4
 800f900:	193b      	adds	r3, r7, r4
 800f902:	781a      	ldrb	r2, [r3, #0]
 800f904:	2382      	movs	r3, #130	; 0x82
 800f906:	18fb      	adds	r3, r7, r3
 800f908:	2053      	movs	r0, #83	; 0x53
 800f90a:	242c      	movs	r4, #44	; 0x2c
 800f90c:	4362      	muls	r2, r4
 800f90e:	188a      	adds	r2, r1, r2
 800f910:	1812      	adds	r2, r2, r0
 800f912:	7812      	ldrb	r2, [r2, #0]
 800f914:	701a      	strb	r2, [r3, #0]
                    downLinkCounter = *( MacCtx.NvmCtx->MulticastChannelList[i].DownLinkCounter );
 800f916:	4b77      	ldr	r3, [pc, #476]	; (800faf4 <ProcessRadioRxDone+0x72c>)
 800f918:	4a78      	ldr	r2, [pc, #480]	; (800fafc <ProcessRadioRxDone+0x734>)
 800f91a:	589a      	ldr	r2, [r3, r2]
 800f91c:	002c      	movs	r4, r5
 800f91e:	193b      	adds	r3, r7, r4
 800f920:	781b      	ldrb	r3, [r3, #0]
 800f922:	212c      	movs	r1, #44	; 0x2c
 800f924:	434b      	muls	r3, r1
 800f926:	18d3      	adds	r3, r2, r3
 800f928:	3370      	adds	r3, #112	; 0x70
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	607b      	str	r3, [r7, #4]
                    address = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address;
 800f930:	4b70      	ldr	r3, [pc, #448]	; (800faf4 <ProcessRadioRxDone+0x72c>)
 800f932:	4a72      	ldr	r2, [pc, #456]	; (800fafc <ProcessRadioRxDone+0x734>)
 800f934:	589a      	ldr	r2, [r3, r2]
 800f936:	193b      	adds	r3, r7, r4
 800f938:	781b      	ldrb	r3, [r3, #0]
 800f93a:	212c      	movs	r1, #44	; 0x2c
 800f93c:	434b      	muls	r3, r1
 800f93e:	18d3      	adds	r3, r2, r3
 800f940:	3354      	adds	r3, #84	; 0x54
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	2284      	movs	r2, #132	; 0x84
 800f946:	18ba      	adds	r2, r7, r2
 800f948:	6013      	str	r3, [r2, #0]
                    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800f94a:	4b6a      	ldr	r3, [pc, #424]	; (800faf4 <ProcessRadioRxDone+0x72c>)
 800f94c:	4a6b      	ldr	r2, [pc, #428]	; (800fafc <ProcessRadioRxDone+0x734>)
 800f94e:	589b      	ldr	r3, [r3, r2]
 800f950:	227c      	movs	r2, #124	; 0x7c
 800f952:	5c9b      	ldrb	r3, [r3, r2]
 800f954:	2b02      	cmp	r3, #2
 800f956:	d110      	bne.n	800f97a <ProcessRadioRxDone+0x5b2>
                    {
                        MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800f958:	4b66      	ldr	r3, [pc, #408]	; (800faf4 <ProcessRadioRxDone+0x72c>)
 800f95a:	4a6c      	ldr	r2, [pc, #432]	; (800fb0c <ProcessRadioRxDone+0x744>)
 800f95c:	2103      	movs	r1, #3
 800f95e:	5499      	strb	r1, [r3, r2]
                    }
                    break;
 800f960:	e00b      	b.n	800f97a <ProcessRadioRxDone+0x5b2>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f962:	2181      	movs	r1, #129	; 0x81
 800f964:	187b      	adds	r3, r7, r1
 800f966:	781a      	ldrb	r2, [r3, #0]
 800f968:	187b      	adds	r3, r7, r1
 800f96a:	3201      	adds	r2, #1
 800f96c:	701a      	strb	r2, [r3, #0]
 800f96e:	2381      	movs	r3, #129	; 0x81
 800f970:	18fb      	adds	r3, r7, r3
 800f972:	781b      	ldrb	r3, [r3, #0]
 800f974:	2b00      	cmp	r3, #0
 800f976:	d09e      	beq.n	800f8b6 <ProcessRadioRxDone+0x4ee>
 800f978:	e000      	b.n	800f97c <ProcessRadioRxDone+0x5b4>
                    break;
 800f97a:	46c0      	nop			; (mov r8, r8)
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800f97c:	2383      	movs	r3, #131	; 0x83
 800f97e:	18fb      	adds	r3, r7, r3
 800f980:	781b      	ldrb	r3, [r3, #0]
 800f982:	2b01      	cmp	r3, #1
 800f984:	d119      	bne.n	800f9ba <ProcessRadioRxDone+0x5f2>
 800f986:	1cbb      	adds	r3, r7, #2
 800f988:	781b      	ldrb	r3, [r3, #0]
 800f98a:	2b03      	cmp	r3, #3
 800f98c:	d10e      	bne.n	800f9ac <ProcessRadioRxDone+0x5e4>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800f98e:	2130      	movs	r1, #48	; 0x30
 800f990:	187b      	adds	r3, r7, r1
 800f992:	7b1b      	ldrb	r3, [r3, #12]
 800f994:	2220      	movs	r2, #32
 800f996:	4013      	ands	r3, r2
 800f998:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d106      	bne.n	800f9ac <ProcessRadioRxDone+0x5e4>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800f99e:	187b      	adds	r3, r7, r1
 800f9a0:	7b1b      	ldrb	r3, [r3, #12]
 800f9a2:	2240      	movs	r2, #64	; 0x40
 800f9a4:	4013      	ands	r3, r2
 800f9a6:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d006      	beq.n	800f9ba <ProcessRadioRxDone+0x5f2>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f9ac:	4b51      	ldr	r3, [pc, #324]	; (800faf4 <ProcessRadioRxDone+0x72c>)
 800f9ae:	4a54      	ldr	r2, [pc, #336]	; (800fb00 <ProcessRadioRxDone+0x738>)
 800f9b0:	2101      	movs	r1, #1
 800f9b2:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800f9b4:	f7ff fcdc 	bl	800f370 <PrepareRxDoneAbort>
                return;
 800f9b8:	e234      	b.n	800fe24 <ProcessRadioRxDone+0xa5c>
            }

            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800f9ba:	2164      	movs	r1, #100	; 0x64
 800f9bc:	187b      	adds	r3, r7, r1
 800f9be:	2215      	movs	r2, #21
 800f9c0:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800f9c2:	4b4c      	ldr	r3, [pc, #304]	; (800faf4 <ProcessRadioRxDone+0x72c>)
 800f9c4:	4a4d      	ldr	r2, [pc, #308]	; (800fafc <ProcessRadioRxDone+0x734>)
 800f9c6:	589b      	ldr	r3, [r3, r2]
 800f9c8:	781b      	ldrb	r3, [r3, #0]
 800f9ca:	187a      	adds	r2, r7, r1
 800f9cc:	0011      	movs	r1, r2
 800f9ce:	0018      	movs	r0, r3
 800f9d0:	f007 f913 	bl	8016bfa <RegionGetPhyParam>
 800f9d4:	0003      	movs	r3, r0
 800f9d6:	001a      	movs	r2, r3
 800f9d8:	2060      	movs	r0, #96	; 0x60
 800f9da:	183b      	adds	r3, r7, r0
 800f9dc:	601a      	str	r2, [r3, #0]

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, MacCtx.NvmCtx->Version, phyParam.Value, &fCntID, &downLinkCounter );
 800f9de:	1cbb      	adds	r3, r7, #2
 800f9e0:	781d      	ldrb	r5, [r3, #0]
 800f9e2:	4b44      	ldr	r3, [pc, #272]	; (800faf4 <ProcessRadioRxDone+0x72c>)
 800f9e4:	4a45      	ldr	r2, [pc, #276]	; (800fafc <ProcessRadioRxDone+0x734>)
 800f9e6:	5899      	ldr	r1, [r3, r2]
 800f9e8:	183b      	adds	r3, r7, r0
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	b29b      	uxth	r3, r3
 800f9ee:	2280      	movs	r2, #128	; 0x80
 800f9f0:	18bc      	adds	r4, r7, r2
 800f9f2:	22b0      	movs	r2, #176	; 0xb0
 800f9f4:	0052      	lsls	r2, r2, #1
 800f9f6:	588e      	ldr	r6, [r1, r2]
 800f9f8:	2130      	movs	r1, #48	; 0x30
 800f9fa:	1879      	adds	r1, r7, r1
 800f9fc:	2082      	movs	r0, #130	; 0x82
 800f9fe:	183a      	adds	r2, r7, r0
 800fa00:	7810      	ldrb	r0, [r2, #0]
 800fa02:	1d3a      	adds	r2, r7, #4
 800fa04:	9202      	str	r2, [sp, #8]
 800fa06:	1cfa      	adds	r2, r7, #3
 800fa08:	9201      	str	r2, [sp, #4]
 800fa0a:	9300      	str	r3, [sp, #0]
 800fa0c:	0033      	movs	r3, r6
 800fa0e:	000a      	movs	r2, r1
 800fa10:	0029      	movs	r1, r5
 800fa12:	f000 fe91 	bl	8010738 <GetFCntDown>
 800fa16:	0003      	movs	r3, r0
 800fa18:	7023      	strb	r3, [r4, #0]
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800fa1a:	2280      	movs	r2, #128	; 0x80
 800fa1c:	18bb      	adds	r3, r7, r2
 800fa1e:	781b      	ldrb	r3, [r3, #0]
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d040      	beq.n	800faa6 <ProcessRadioRxDone+0x6de>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800fa24:	18bb      	adds	r3, r7, r2
 800fa26:	781b      	ldrb	r3, [r3, #0]
 800fa28:	2b07      	cmp	r3, #7
 800fa2a:	d126      	bne.n	800fa7a <ProcessRadioRxDone+0x6b2>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800fa2c:	4b31      	ldr	r3, [pc, #196]	; (800faf4 <ProcessRadioRxDone+0x72c>)
 800fa2e:	4a34      	ldr	r2, [pc, #208]	; (800fb00 <ProcessRadioRxDone+0x738>)
 800fa30:	2108      	movs	r1, #8
 800fa32:	5499      	strb	r1, [r3, r2]
                    if( ( MacCtx.NvmCtx->Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( MacCtx.NvmCtx->LastRxMic == macMsgData.MIC ) )
 800fa34:	4b2f      	ldr	r3, [pc, #188]	; (800faf4 <ProcessRadioRxDone+0x72c>)
 800fa36:	4a31      	ldr	r2, [pc, #196]	; (800fafc <ProcessRadioRxDone+0x734>)
 800fa38:	589a      	ldr	r2, [r3, r2]
 800fa3a:	23b1      	movs	r3, #177	; 0xb1
 800fa3c:	005b      	lsls	r3, r3, #1
 800fa3e:	5cd3      	ldrb	r3, [r2, r3]
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d128      	bne.n	800fa96 <ProcessRadioRxDone+0x6ce>
 800fa44:	2374      	movs	r3, #116	; 0x74
 800fa46:	18fb      	adds	r3, r7, r3
 800fa48:	781b      	ldrb	r3, [r3, #0]
 800fa4a:	221f      	movs	r2, #31
 800fa4c:	4393      	bics	r3, r2
 800fa4e:	b2db      	uxtb	r3, r3
 800fa50:	2ba0      	cmp	r3, #160	; 0xa0
 800fa52:	d120      	bne.n	800fa96 <ProcessRadioRxDone+0x6ce>
 800fa54:	4b27      	ldr	r3, [pc, #156]	; (800faf4 <ProcessRadioRxDone+0x72c>)
 800fa56:	4a29      	ldr	r2, [pc, #164]	; (800fafc <ProcessRadioRxDone+0x734>)
 800fa58:	589a      	ldr	r2, [r3, r2]
 800fa5a:	23b4      	movs	r3, #180	; 0xb4
 800fa5c:	005b      	lsls	r3, r3, #1
 800fa5e:	58d2      	ldr	r2, [r2, r3]
 800fa60:	2130      	movs	r1, #48	; 0x30
 800fa62:	187b      	adds	r3, r7, r1
 800fa64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa66:	429a      	cmp	r2, r3
 800fa68:	d115      	bne.n	800fa96 <ProcessRadioRxDone+0x6ce>
                    {
                        MacCtx.NvmCtx->SrvAckRequested = true;
 800fa6a:	4b22      	ldr	r3, [pc, #136]	; (800faf4 <ProcessRadioRxDone+0x72c>)
 800fa6c:	4a23      	ldr	r2, [pc, #140]	; (800fafc <ProcessRadioRxDone+0x734>)
 800fa6e:	589a      	ldr	r2, [r3, r2]
 800fa70:	234c      	movs	r3, #76	; 0x4c
 800fa72:	33ff      	adds	r3, #255	; 0xff
 800fa74:	2101      	movs	r1, #1
 800fa76:	54d1      	strb	r1, [r2, r3]
 800fa78:	e00d      	b.n	800fa96 <ProcessRadioRxDone+0x6ce>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800fa7a:	2380      	movs	r3, #128	; 0x80
 800fa7c:	18fb      	adds	r3, r7, r3
 800fa7e:	781b      	ldrb	r3, [r3, #0]
 800fa80:	2b08      	cmp	r3, #8
 800fa82:	d104      	bne.n	800fa8e <ProcessRadioRxDone+0x6c6>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800fa84:	4b1b      	ldr	r3, [pc, #108]	; (800faf4 <ProcessRadioRxDone+0x72c>)
 800fa86:	4a1e      	ldr	r2, [pc, #120]	; (800fb00 <ProcessRadioRxDone+0x738>)
 800fa88:	210a      	movs	r1, #10
 800fa8a:	5499      	strb	r1, [r3, r2]
 800fa8c:	e003      	b.n	800fa96 <ProcessRadioRxDone+0x6ce>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fa8e:	4b19      	ldr	r3, [pc, #100]	; (800faf4 <ProcessRadioRxDone+0x72c>)
 800fa90:	4a1b      	ldr	r2, [pc, #108]	; (800fb00 <ProcessRadioRxDone+0x738>)
 800fa92:	2101      	movs	r1, #1
 800fa94:	5499      	strb	r1, [r3, r2]
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800fa96:	6879      	ldr	r1, [r7, #4]
 800fa98:	4a16      	ldr	r2, [pc, #88]	; (800faf4 <ProcessRadioRxDone+0x72c>)
 800fa9a:	2386      	movs	r3, #134	; 0x86
 800fa9c:	00db      	lsls	r3, r3, #3
 800fa9e:	50d1      	str	r1, [r2, r3]
                PrepareRxDoneAbort( );
 800faa0:	f7ff fc66 	bl	800f370 <PrepareRxDoneAbort>
                return;
 800faa4:	e1be      	b.n	800fe24 <ProcessRadioRxDone+0xa5c>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800faa6:	1cfb      	adds	r3, r7, #3
 800faa8:	781a      	ldrb	r2, [r3, #0]
 800faaa:	687d      	ldr	r5, [r7, #4]
 800faac:	2680      	movs	r6, #128	; 0x80
 800faae:	19bc      	adds	r4, r7, r6
 800fab0:	2384      	movs	r3, #132	; 0x84
 800fab2:	18fb      	adds	r3, r7, r3
 800fab4:	6819      	ldr	r1, [r3, #0]
 800fab6:	2382      	movs	r3, #130	; 0x82
 800fab8:	18fb      	adds	r3, r7, r3
 800faba:	7818      	ldrb	r0, [r3, #0]
 800fabc:	2330      	movs	r3, #48	; 0x30
 800fabe:	18fb      	adds	r3, r7, r3
 800fac0:	9300      	str	r3, [sp, #0]
 800fac2:	002b      	movs	r3, r5
 800fac4:	f006 fb9c 	bl	8016200 <LoRaMacCryptoUnsecureMessage>
 800fac8:	0003      	movs	r3, r0
 800faca:	7023      	strb	r3, [r4, #0]
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800facc:	19bb      	adds	r3, r7, r6
 800face:	781b      	ldrb	r3, [r3, #0]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d01d      	beq.n	800fb10 <ProcessRadioRxDone+0x748>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800fad4:	19bb      	adds	r3, r7, r6
 800fad6:	781b      	ldrb	r3, [r3, #0]
 800fad8:	2b02      	cmp	r3, #2
 800fada:	d104      	bne.n	800fae6 <ProcessRadioRxDone+0x71e>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800fadc:	4b05      	ldr	r3, [pc, #20]	; (800faf4 <ProcessRadioRxDone+0x72c>)
 800fade:	4a08      	ldr	r2, [pc, #32]	; (800fb00 <ProcessRadioRxDone+0x738>)
 800fae0:	210b      	movs	r1, #11
 800fae2:	5499      	strb	r1, [r3, r2]
 800fae4:	e003      	b.n	800faee <ProcessRadioRxDone+0x726>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800fae6:	4b03      	ldr	r3, [pc, #12]	; (800faf4 <ProcessRadioRxDone+0x72c>)
 800fae8:	4a05      	ldr	r2, [pc, #20]	; (800fb00 <ProcessRadioRxDone+0x738>)
 800faea:	210c      	movs	r1, #12
 800faec:	5499      	strb	r1, [r3, r2]
                }
                PrepareRxDoneAbort( );
 800faee:	f7ff fc3f 	bl	800f370 <PrepareRxDoneAbort>
                return;
 800faf2:	e197      	b.n	800fe24 <ProcessRadioRxDone+0xa5c>
 800faf4:	200005b8 	.word	0x200005b8
 800faf8:	0000041c 	.word	0x0000041c
 800fafc:	00000484 	.word	0x00000484
 800fb00:	0000041d 	.word	0x0000041d
 800fb04:	200007f0 	.word	0x200007f0
 800fb08:	00000434 	.word	0x00000434
 800fb0c:	0000042d 	.word	0x0000042d
            }

            // Frame is valid
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800fb10:	4bc6      	ldr	r3, [pc, #792]	; (800fe2c <ProcessRadioRxDone+0xa64>)
 800fb12:	4ac7      	ldr	r2, [pc, #796]	; (800fe30 <ProcessRadioRxDone+0xa68>)
 800fb14:	2100      	movs	r1, #0
 800fb16:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Multicast = multicast;
 800fb18:	4bc4      	ldr	r3, [pc, #784]	; (800fe2c <ProcessRadioRxDone+0xa64>)
 800fb1a:	2283      	movs	r2, #131	; 0x83
 800fb1c:	18ba      	adds	r2, r7, r2
 800fb1e:	49c5      	ldr	r1, [pc, #788]	; (800fe34 <ProcessRadioRxDone+0xa6c>)
 800fb20:	7812      	ldrb	r2, [r2, #0]
 800fb22:	545a      	strb	r2, [r3, r1]
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800fb24:	2030      	movs	r0, #48	; 0x30
 800fb26:	183b      	adds	r3, r7, r0
 800fb28:	7b1b      	ldrb	r3, [r3, #12]
 800fb2a:	06db      	lsls	r3, r3, #27
 800fb2c:	0fdb      	lsrs	r3, r3, #31
 800fb2e:	b2db      	uxtb	r3, r3
 800fb30:	0019      	movs	r1, r3
 800fb32:	4bbe      	ldr	r3, [pc, #760]	; (800fe2c <ProcessRadioRxDone+0xa64>)
 800fb34:	4ac0      	ldr	r2, [pc, #768]	; (800fe38 <ProcessRadioRxDone+0xa70>)
 800fb36:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Buffer = NULL;
 800fb38:	4bbc      	ldr	r3, [pc, #752]	; (800fe2c <ProcessRadioRxDone+0xa64>)
 800fb3a:	4ac0      	ldr	r2, [pc, #768]	; (800fe3c <ProcessRadioRxDone+0xa74>)
 800fb3c:	2100      	movs	r1, #0
 800fb3e:	5099      	str	r1, [r3, r2]
            MacCtx.McpsIndication.BufferSize = 0;
 800fb40:	4aba      	ldr	r2, [pc, #744]	; (800fe2c <ProcessRadioRxDone+0xa64>)
 800fb42:	2385      	movs	r3, #133	; 0x85
 800fb44:	00db      	lsls	r3, r3, #3
 800fb46:	2100      	movs	r1, #0
 800fb48:	54d1      	strb	r1, [r2, r3]
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800fb4a:	6879      	ldr	r1, [r7, #4]
 800fb4c:	4ab7      	ldr	r2, [pc, #732]	; (800fe2c <ProcessRadioRxDone+0xa64>)
 800fb4e:	2386      	movs	r3, #134	; 0x86
 800fb50:	00db      	lsls	r3, r3, #3
 800fb52:	50d1      	str	r1, [r2, r3]
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800fb54:	183b      	adds	r3, r7, r0
 800fb56:	7b1b      	ldrb	r3, [r3, #12]
 800fb58:	069b      	lsls	r3, r3, #26
 800fb5a:	0fdb      	lsrs	r3, r3, #31
 800fb5c:	b2db      	uxtb	r3, r3
 800fb5e:	1e5a      	subs	r2, r3, #1
 800fb60:	4193      	sbcs	r3, r2
 800fb62:	b2d9      	uxtb	r1, r3
 800fb64:	4bb1      	ldr	r3, [pc, #708]	; (800fe2c <ProcessRadioRxDone+0xa64>)
 800fb66:	4ab6      	ldr	r2, [pc, #728]	; (800fe40 <ProcessRadioRxDone+0xa78>)
 800fb68:	5499      	strb	r1, [r3, r2]

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800fb6a:	4bb0      	ldr	r3, [pc, #704]	; (800fe2c <ProcessRadioRxDone+0xa64>)
 800fb6c:	4ab5      	ldr	r2, [pc, #724]	; (800fe44 <ProcessRadioRxDone+0xa7c>)
 800fb6e:	2100      	movs	r1, #0
 800fb70:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800fb72:	183b      	adds	r3, r7, r0
 800fb74:	7b1b      	ldrb	r3, [r3, #12]
 800fb76:	069b      	lsls	r3, r3, #26
 800fb78:	0fdb      	lsrs	r3, r3, #31
 800fb7a:	b2db      	uxtb	r3, r3
 800fb7c:	1e5a      	subs	r2, r3, #1
 800fb7e:	4193      	sbcs	r3, r2
 800fb80:	b2d9      	uxtb	r1, r3
 800fb82:	4aaa      	ldr	r2, [pc, #680]	; (800fe2c <ProcessRadioRxDone+0xa64>)
 800fb84:	2388      	movs	r3, #136	; 0x88
 800fb86:	00db      	lsls	r3, r3, #3
 800fb88:	54d1      	strb	r1, [r2, r3]

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 800fb8a:	4ba8      	ldr	r3, [pc, #672]	; (800fe2c <ProcessRadioRxDone+0xa64>)
 800fb8c:	4aae      	ldr	r2, [pc, #696]	; (800fe48 <ProcessRadioRxDone+0xa80>)
 800fb8e:	5c9b      	ldrb	r3, [r3, r2]
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d004      	beq.n	800fb9e <ProcessRadioRxDone+0x7d6>
                ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_2 ) )
 800fb94:	4ba5      	ldr	r3, [pc, #660]	; (800fe2c <ProcessRadioRxDone+0xa64>)
 800fb96:	4aac      	ldr	r2, [pc, #688]	; (800fe48 <ProcessRadioRxDone+0xa80>)
 800fb98:	5c9b      	ldrb	r3, [r3, r2]
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 800fb9a:	2b01      	cmp	r3, #1
 800fb9c:	d105      	bne.n	800fbaa <ProcessRadioRxDone+0x7e2>
            {
                MacCtx.NvmCtx->AdrAckCounter = 0;
 800fb9e:	4ba3      	ldr	r3, [pc, #652]	; (800fe2c <ProcessRadioRxDone+0xa64>)
 800fba0:	4aaa      	ldr	r2, [pc, #680]	; (800fe4c <ProcessRadioRxDone+0xa84>)
 800fba2:	589b      	ldr	r3, [r3, r2]
 800fba4:	2280      	movs	r2, #128	; 0x80
 800fba6:	2100      	movs	r1, #0
 800fba8:	5099      	str	r1, [r3, r2]
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800fbaa:	2383      	movs	r3, #131	; 0x83
 800fbac:	18fb      	adds	r3, r7, r3
 800fbae:	781b      	ldrb	r3, [r3, #0]
 800fbb0:	2b01      	cmp	r3, #1
 800fbb2:	d104      	bne.n	800fbbe <ProcessRadioRxDone+0x7f6>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800fbb4:	4b9d      	ldr	r3, [pc, #628]	; (800fe2c <ProcessRadioRxDone+0xa64>)
 800fbb6:	4aa6      	ldr	r2, [pc, #664]	; (800fe50 <ProcessRadioRxDone+0xa88>)
 800fbb8:	2102      	movs	r1, #2
 800fbba:	5499      	strb	r1, [r3, r2]
 800fbbc:	e02f      	b.n	800fc1e <ProcessRadioRxDone+0x856>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800fbbe:	2374      	movs	r3, #116	; 0x74
 800fbc0:	18fb      	adds	r3, r7, r3
 800fbc2:	781b      	ldrb	r3, [r3, #0]
 800fbc4:	221f      	movs	r2, #31
 800fbc6:	4393      	bics	r3, r2
 800fbc8:	b2db      	uxtb	r3, r3
 800fbca:	2ba0      	cmp	r3, #160	; 0xa0
 800fbcc:	d11c      	bne.n	800fc08 <ProcessRadioRxDone+0x840>
                {
                    MacCtx.NvmCtx->SrvAckRequested = true;
 800fbce:	4b97      	ldr	r3, [pc, #604]	; (800fe2c <ProcessRadioRxDone+0xa64>)
 800fbd0:	4a9e      	ldr	r2, [pc, #632]	; (800fe4c <ProcessRadioRxDone+0xa84>)
 800fbd2:	589a      	ldr	r2, [r3, r2]
 800fbd4:	234c      	movs	r3, #76	; 0x4c
 800fbd6:	33ff      	adds	r3, #255	; 0xff
 800fbd8:	2101      	movs	r1, #1
 800fbda:	54d1      	strb	r1, [r2, r3]
                    if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 800fbdc:	4b93      	ldr	r3, [pc, #588]	; (800fe2c <ProcessRadioRxDone+0xa64>)
 800fbde:	4a9b      	ldr	r2, [pc, #620]	; (800fe4c <ProcessRadioRxDone+0xa84>)
 800fbe0:	589a      	ldr	r2, [r3, r2]
 800fbe2:	23b1      	movs	r3, #177	; 0xb1
 800fbe4:	005b      	lsls	r3, r3, #1
 800fbe6:	5cd3      	ldrb	r3, [r2, r3]
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d108      	bne.n	800fbfe <ProcessRadioRxDone+0x836>
                    {
                        MacCtx.NvmCtx->LastRxMic = macMsgData.MIC;
 800fbec:	4b8f      	ldr	r3, [pc, #572]	; (800fe2c <ProcessRadioRxDone+0xa64>)
 800fbee:	4a97      	ldr	r2, [pc, #604]	; (800fe4c <ProcessRadioRxDone+0xa84>)
 800fbf0:	589a      	ldr	r2, [r3, r2]
 800fbf2:	2330      	movs	r3, #48	; 0x30
 800fbf4:	18fb      	adds	r3, r7, r3
 800fbf6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800fbf8:	23b4      	movs	r3, #180	; 0xb4
 800fbfa:	005b      	lsls	r3, r3, #1
 800fbfc:	50d1      	str	r1, [r2, r3]
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800fbfe:	4b8b      	ldr	r3, [pc, #556]	; (800fe2c <ProcessRadioRxDone+0xa64>)
 800fc00:	4a93      	ldr	r2, [pc, #588]	; (800fe50 <ProcessRadioRxDone+0xa88>)
 800fc02:	2101      	movs	r1, #1
 800fc04:	5499      	strb	r1, [r3, r2]
 800fc06:	e00a      	b.n	800fc1e <ProcessRadioRxDone+0x856>
                }
                else
                {
                    MacCtx.NvmCtx->SrvAckRequested = false;
 800fc08:	4b88      	ldr	r3, [pc, #544]	; (800fe2c <ProcessRadioRxDone+0xa64>)
 800fc0a:	4a90      	ldr	r2, [pc, #576]	; (800fe4c <ProcessRadioRxDone+0xa84>)
 800fc0c:	589a      	ldr	r2, [r3, r2]
 800fc0e:	234c      	movs	r3, #76	; 0x4c
 800fc10:	33ff      	adds	r3, #255	; 0xff
 800fc12:	2100      	movs	r1, #0
 800fc14:	54d1      	strb	r1, [r2, r3]
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800fc16:	4b85      	ldr	r3, [pc, #532]	; (800fe2c <ProcessRadioRxDone+0xa64>)
 800fc18:	4a8d      	ldr	r2, [pc, #564]	; (800fe50 <ProcessRadioRxDone+0xa88>)
 800fc1a:	2100      	movs	r1, #0
 800fc1c:	5499      	strb	r1, [r3, r2]
                }
            }

            RemoveMacCommands( MacCtx.McpsIndication.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800fc1e:	4b83      	ldr	r3, [pc, #524]	; (800fe2c <ProcessRadioRxDone+0xa64>)
 800fc20:	4a89      	ldr	r2, [pc, #548]	; (800fe48 <ProcessRadioRxDone+0xa80>)
 800fc22:	5c98      	ldrb	r0, [r3, r2]
 800fc24:	4b81      	ldr	r3, [pc, #516]	; (800fe2c <ProcessRadioRxDone+0xa64>)
 800fc26:	4a8b      	ldr	r2, [pc, #556]	; (800fe54 <ProcessRadioRxDone+0xa8c>)
 800fc28:	5c9a      	ldrb	r2, [r3, r2]
 800fc2a:	2330      	movs	r3, #48	; 0x30
 800fc2c:	18fb      	adds	r3, r7, r3
 800fc2e:	7b1b      	ldrb	r3, [r3, #12]
 800fc30:	1c19      	adds	r1, r3, #0
 800fc32:	f002 f94f 	bl	8011ed4 <RemoveMacCommands>

            switch( fType )
 800fc36:	1cbb      	adds	r3, r7, #2
 800fc38:	781b      	ldrb	r3, [r3, #0]
 800fc3a:	2b03      	cmp	r3, #3
 800fc3c:	d100      	bne.n	800fc40 <ProcessRadioRxDone+0x878>
 800fc3e:	e073      	b.n	800fd28 <ProcessRadioRxDone+0x960>
 800fc40:	dd00      	ble.n	800fc44 <ProcessRadioRxDone+0x87c>
 800fc42:	e089      	b.n	800fd58 <ProcessRadioRxDone+0x990>
 800fc44:	2b02      	cmp	r3, #2
 800fc46:	d055      	beq.n	800fcf4 <ProcessRadioRxDone+0x92c>
 800fc48:	dd00      	ble.n	800fc4c <ProcessRadioRxDone+0x884>
 800fc4a:	e085      	b.n	800fd58 <ProcessRadioRxDone+0x990>
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d002      	beq.n	800fc56 <ProcessRadioRxDone+0x88e>
 800fc50:	2b01      	cmp	r3, #1
 800fc52:	d030      	beq.n	800fcb6 <ProcessRadioRxDone+0x8ee>
 800fc54:	e080      	b.n	800fd58 <ProcessRadioRxDone+0x990>
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 800fc56:	2030      	movs	r0, #48	; 0x30
 800fc58:	183b      	adds	r3, r7, r0
 800fc5a:	7b1b      	ldrb	r3, [r3, #12]
 800fc5c:	071b      	lsls	r3, r3, #28
 800fc5e:	0f1b      	lsrs	r3, r3, #28
 800fc60:	b2db      	uxtb	r3, r3
 800fc62:	001c      	movs	r4, r3
 800fc64:	4b71      	ldr	r3, [pc, #452]	; (800fe2c <ProcessRadioRxDone+0xa64>)
 800fc66:	4a78      	ldr	r2, [pc, #480]	; (800fe48 <ProcessRadioRxDone+0xa80>)
 800fc68:	5c9b      	ldrb	r3, [r3, r2]
 800fc6a:	2277      	movs	r2, #119	; 0x77
 800fc6c:	18ba      	adds	r2, r7, r2
 800fc6e:	2100      	movs	r1, #0
 800fc70:	5651      	ldrsb	r1, [r2, r1]
 800fc72:	0005      	movs	r5, r0
 800fc74:	183a      	adds	r2, r7, r0
 800fc76:	3210      	adds	r2, #16
 800fc78:	0010      	movs	r0, r2
 800fc7a:	9300      	str	r3, [sp, #0]
 800fc7c:	000b      	movs	r3, r1
 800fc7e:	0022      	movs	r2, r4
 800fc80:	2100      	movs	r1, #0
 800fc82:	f000 ff4f 	bl	8010b24 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800fc86:	0028      	movs	r0, r5
 800fc88:	183b      	adds	r3, r7, r0
 800fc8a:	2220      	movs	r2, #32
 800fc8c:	5c99      	ldrb	r1, [r3, r2]
 800fc8e:	4b67      	ldr	r3, [pc, #412]	; (800fe2c <ProcessRadioRxDone+0xa64>)
 800fc90:	4a71      	ldr	r2, [pc, #452]	; (800fe58 <ProcessRadioRxDone+0xa90>)
 800fc92:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800fc94:	183b      	adds	r3, r7, r0
 800fc96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fc98:	4b64      	ldr	r3, [pc, #400]	; (800fe2c <ProcessRadioRxDone+0xa64>)
 800fc9a:	4968      	ldr	r1, [pc, #416]	; (800fe3c <ProcessRadioRxDone+0xa74>)
 800fc9c:	505a      	str	r2, [r3, r1]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800fc9e:	183b      	adds	r3, r7, r0
 800fca0:	2228      	movs	r2, #40	; 0x28
 800fca2:	5c99      	ldrb	r1, [r3, r2]
 800fca4:	4a61      	ldr	r2, [pc, #388]	; (800fe2c <ProcessRadioRxDone+0xa64>)
 800fca6:	2385      	movs	r3, #133	; 0x85
 800fca8:	00db      	lsls	r3, r3, #3
 800fcaa:	54d1      	strb	r1, [r2, r3]
                    MacCtx.McpsIndication.RxData = true;
 800fcac:	4b5f      	ldr	r3, [pc, #380]	; (800fe2c <ProcessRadioRxDone+0xa64>)
 800fcae:	4a6b      	ldr	r2, [pc, #428]	; (800fe5c <ProcessRadioRxDone+0xa94>)
 800fcb0:	2101      	movs	r1, #1
 800fcb2:	5499      	strb	r1, [r3, r2]
                    break;
 800fcb4:	e057      	b.n	800fd66 <ProcessRadioRxDone+0x99e>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 800fcb6:	2030      	movs	r0, #48	; 0x30
 800fcb8:	183b      	adds	r3, r7, r0
 800fcba:	7b1b      	ldrb	r3, [r3, #12]
 800fcbc:	071b      	lsls	r3, r3, #28
 800fcbe:	0f1b      	lsrs	r3, r3, #28
 800fcc0:	b2db      	uxtb	r3, r3
 800fcc2:	001c      	movs	r4, r3
 800fcc4:	4b59      	ldr	r3, [pc, #356]	; (800fe2c <ProcessRadioRxDone+0xa64>)
 800fcc6:	4a60      	ldr	r2, [pc, #384]	; (800fe48 <ProcessRadioRxDone+0xa80>)
 800fcc8:	5c9b      	ldrb	r3, [r3, r2]
 800fcca:	2277      	movs	r2, #119	; 0x77
 800fccc:	18ba      	adds	r2, r7, r2
 800fcce:	2100      	movs	r1, #0
 800fcd0:	5651      	ldrsb	r1, [r2, r1]
 800fcd2:	0005      	movs	r5, r0
 800fcd4:	183a      	adds	r2, r7, r0
 800fcd6:	3210      	adds	r2, #16
 800fcd8:	0010      	movs	r0, r2
 800fcda:	9300      	str	r3, [sp, #0]
 800fcdc:	000b      	movs	r3, r1
 800fcde:	0022      	movs	r2, r4
 800fce0:	2100      	movs	r1, #0
 800fce2:	f000 ff1f 	bl	8010b24 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800fce6:	197b      	adds	r3, r7, r5
 800fce8:	2220      	movs	r2, #32
 800fcea:	5c99      	ldrb	r1, [r3, r2]
 800fcec:	4b4f      	ldr	r3, [pc, #316]	; (800fe2c <ProcessRadioRxDone+0xa64>)
 800fcee:	4a5a      	ldr	r2, [pc, #360]	; (800fe58 <ProcessRadioRxDone+0xa90>)
 800fcf0:	5499      	strb	r1, [r3, r2]
                    break;
 800fcf2:	e038      	b.n	800fd66 <ProcessRadioRxDone+0x99e>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
 800fcf4:	2430      	movs	r4, #48	; 0x30
 800fcf6:	193b      	adds	r3, r7, r4
 800fcf8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800fcfa:	193b      	adds	r3, r7, r4
 800fcfc:	2228      	movs	r2, #40	; 0x28
 800fcfe:	5c99      	ldrb	r1, [r3, r2]
 800fd00:	4b4a      	ldr	r3, [pc, #296]	; (800fe2c <ProcessRadioRxDone+0xa64>)
 800fd02:	4a51      	ldr	r2, [pc, #324]	; (800fe48 <ProcessRadioRxDone+0xa80>)
 800fd04:	5c9b      	ldrb	r3, [r3, r2]
 800fd06:	2277      	movs	r2, #119	; 0x77
 800fd08:	18ba      	adds	r2, r7, r2
 800fd0a:	7812      	ldrb	r2, [r2, #0]
 800fd0c:	b252      	sxtb	r2, r2
 800fd0e:	9300      	str	r3, [sp, #0]
 800fd10:	0013      	movs	r3, r2
 800fd12:	000a      	movs	r2, r1
 800fd14:	2100      	movs	r1, #0
 800fd16:	f000 ff05 	bl	8010b24 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800fd1a:	193b      	adds	r3, r7, r4
 800fd1c:	2220      	movs	r2, #32
 800fd1e:	5c99      	ldrb	r1, [r3, r2]
 800fd20:	4b42      	ldr	r3, [pc, #264]	; (800fe2c <ProcessRadioRxDone+0xa64>)
 800fd22:	4a4d      	ldr	r2, [pc, #308]	; (800fe58 <ProcessRadioRxDone+0xa90>)
 800fd24:	5499      	strb	r1, [r3, r2]
                    break;
 800fd26:	e01e      	b.n	800fd66 <ProcessRadioRxDone+0x99e>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800fd28:	2030      	movs	r0, #48	; 0x30
 800fd2a:	183b      	adds	r3, r7, r0
 800fd2c:	2220      	movs	r2, #32
 800fd2e:	5c99      	ldrb	r1, [r3, r2]
 800fd30:	4b3e      	ldr	r3, [pc, #248]	; (800fe2c <ProcessRadioRxDone+0xa64>)
 800fd32:	4a49      	ldr	r2, [pc, #292]	; (800fe58 <ProcessRadioRxDone+0xa90>)
 800fd34:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800fd36:	183b      	adds	r3, r7, r0
 800fd38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fd3a:	4b3c      	ldr	r3, [pc, #240]	; (800fe2c <ProcessRadioRxDone+0xa64>)
 800fd3c:	493f      	ldr	r1, [pc, #252]	; (800fe3c <ProcessRadioRxDone+0xa74>)
 800fd3e:	505a      	str	r2, [r3, r1]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800fd40:	183b      	adds	r3, r7, r0
 800fd42:	2228      	movs	r2, #40	; 0x28
 800fd44:	5c99      	ldrb	r1, [r3, r2]
 800fd46:	4a39      	ldr	r2, [pc, #228]	; (800fe2c <ProcessRadioRxDone+0xa64>)
 800fd48:	2385      	movs	r3, #133	; 0x85
 800fd4a:	00db      	lsls	r3, r3, #3
 800fd4c:	54d1      	strb	r1, [r2, r3]
                    MacCtx.McpsIndication.RxData = true;
 800fd4e:	4b37      	ldr	r3, [pc, #220]	; (800fe2c <ProcessRadioRxDone+0xa64>)
 800fd50:	4a42      	ldr	r2, [pc, #264]	; (800fe5c <ProcessRadioRxDone+0xa94>)
 800fd52:	2101      	movs	r1, #1
 800fd54:	5499      	strb	r1, [r3, r2]
                    break;
 800fd56:	e006      	b.n	800fd66 <ProcessRadioRxDone+0x99e>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fd58:	4b34      	ldr	r3, [pc, #208]	; (800fe2c <ProcessRadioRxDone+0xa64>)
 800fd5a:	4a35      	ldr	r2, [pc, #212]	; (800fe30 <ProcessRadioRxDone+0xa68>)
 800fd5c:	2101      	movs	r1, #1
 800fd5e:	5499      	strb	r1, [r3, r2]
                    PrepareRxDoneAbort( );
 800fd60:	f7ff fb06 	bl	800f370 <PrepareRxDoneAbort>
                    break;
 800fd64:	46c0      	nop			; (mov r8, r8)
            }

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800fd66:	4b31      	ldr	r3, [pc, #196]	; (800fe2c <ProcessRadioRxDone+0xa64>)
 800fd68:	4a3d      	ldr	r2, [pc, #244]	; (800fe60 <ProcessRadioRxDone+0xa98>)
 800fd6a:	5c99      	ldrb	r1, [r3, r2]
 800fd6c:	2002      	movs	r0, #2
 800fd6e:	4301      	orrs	r1, r0
 800fd70:	5499      	strb	r1, [r3, r2]

            break;
 800fd72:	e036      	b.n	800fde2 <ProcessRadioRxDone+0xa1a>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800fd74:	2476      	movs	r4, #118	; 0x76
 800fd76:	193b      	adds	r3, r7, r4
 800fd78:	781b      	ldrb	r3, [r3, #0]
 800fd7a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800fd7c:	18d1      	adds	r1, r2, r3
 800fd7e:	193b      	adds	r3, r7, r4
 800fd80:	781b      	ldrb	r3, [r3, #0]
 800fd82:	b29b      	uxth	r3, r3
 800fd84:	257a      	movs	r5, #122	; 0x7a
 800fd86:	197a      	adds	r2, r7, r5
 800fd88:	8812      	ldrh	r2, [r2, #0]
 800fd8a:	1ad3      	subs	r3, r2, r3
 800fd8c:	b29a      	uxth	r2, r3
 800fd8e:	4b35      	ldr	r3, [pc, #212]	; (800fe64 <ProcessRadioRxDone+0xa9c>)
 800fd90:	0018      	movs	r0, r3
 800fd92:	f009 fbb1 	bl	80194f8 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800fd96:	4b25      	ldr	r3, [pc, #148]	; (800fe2c <ProcessRadioRxDone+0xa64>)
 800fd98:	4a2d      	ldr	r2, [pc, #180]	; (800fe50 <ProcessRadioRxDone+0xa88>)
 800fd9a:	2103      	movs	r1, #3
 800fd9c:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800fd9e:	4b23      	ldr	r3, [pc, #140]	; (800fe2c <ProcessRadioRxDone+0xa64>)
 800fda0:	4a23      	ldr	r2, [pc, #140]	; (800fe30 <ProcessRadioRxDone+0xa68>)
 800fda2:	2100      	movs	r1, #0
 800fda4:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800fda6:	4b21      	ldr	r3, [pc, #132]	; (800fe2c <ProcessRadioRxDone+0xa64>)
 800fda8:	4924      	ldr	r1, [pc, #144]	; (800fe3c <ProcessRadioRxDone+0xa74>)
 800fdaa:	4a2e      	ldr	r2, [pc, #184]	; (800fe64 <ProcessRadioRxDone+0xa9c>)
 800fdac:	505a      	str	r2, [r3, r1]
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800fdae:	197b      	adds	r3, r7, r5
 800fdb0:	881b      	ldrh	r3, [r3, #0]
 800fdb2:	b2da      	uxtb	r2, r3
 800fdb4:	193b      	adds	r3, r7, r4
 800fdb6:	781b      	ldrb	r3, [r3, #0]
 800fdb8:	1ad3      	subs	r3, r2, r3
 800fdba:	b2d9      	uxtb	r1, r3
 800fdbc:	4a1b      	ldr	r2, [pc, #108]	; (800fe2c <ProcessRadioRxDone+0xa64>)
 800fdbe:	2385      	movs	r3, #133	; 0x85
 800fdc0:	00db      	lsls	r3, r3, #3
 800fdc2:	54d1      	strb	r1, [r2, r3]

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800fdc4:	4b19      	ldr	r3, [pc, #100]	; (800fe2c <ProcessRadioRxDone+0xa64>)
 800fdc6:	4a26      	ldr	r2, [pc, #152]	; (800fe60 <ProcessRadioRxDone+0xa98>)
 800fdc8:	5c99      	ldrb	r1, [r3, r2]
 800fdca:	2002      	movs	r0, #2
 800fdcc:	4301      	orrs	r1, r0
 800fdce:	5499      	strb	r1, [r3, r2]
            break;
 800fdd0:	e007      	b.n	800fde2 <ProcessRadioRxDone+0xa1a>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fdd2:	4b16      	ldr	r3, [pc, #88]	; (800fe2c <ProcessRadioRxDone+0xa64>)
 800fdd4:	4a16      	ldr	r2, [pc, #88]	; (800fe30 <ProcessRadioRxDone+0xa68>)
 800fdd6:	2101      	movs	r1, #1
 800fdd8:	5499      	strb	r1, [r3, r2]
            PrepareRxDoneAbort( );
 800fdda:	f7ff fac9 	bl	800f370 <PrepareRxDoneAbort>
            break;
 800fdde:	e000      	b.n	800fde2 <ProcessRadioRxDone+0xa1a>
            break;
 800fde0:	46c0      	nop			; (mov r8, r8)
    }

    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 800fde2:	4b12      	ldr	r3, [pc, #72]	; (800fe2c <ProcessRadioRxDone+0xa64>)
 800fde4:	4a20      	ldr	r2, [pc, #128]	; (800fe68 <ProcessRadioRxDone+0xaa0>)
 800fde6:	5c9b      	ldrb	r3, [r3, r2]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d009      	beq.n	800fe00 <ProcessRadioRxDone+0xa38>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800fdec:	4a0f      	ldr	r2, [pc, #60]	; (800fe2c <ProcessRadioRxDone+0xa64>)
 800fdee:	2388      	movs	r3, #136	; 0x88
 800fdf0:	00db      	lsls	r3, r3, #3
 800fdf2:	5cd3      	ldrb	r3, [r2, r3]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d00d      	beq.n	800fe14 <ProcessRadioRxDone+0xa4c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800fdf8:	2000      	movs	r0, #0
 800fdfa:	f000 fc5b 	bl	80106b4 <OnAckTimeoutTimerEvent>
 800fdfe:	e009      	b.n	800fe14 <ProcessRadioRxDone+0xa4c>
        }
    }
    else
    {
        if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800fe00:	4b0a      	ldr	r3, [pc, #40]	; (800fe2c <ProcessRadioRxDone+0xa64>)
 800fe02:	4a12      	ldr	r2, [pc, #72]	; (800fe4c <ProcessRadioRxDone+0xa84>)
 800fe04:	589b      	ldr	r3, [r3, r2]
 800fe06:	227c      	movs	r2, #124	; 0x7c
 800fe08:	5c9b      	ldrb	r3, [r3, r2]
 800fe0a:	2b02      	cmp	r3, #2
 800fe0c:	d102      	bne.n	800fe14 <ProcessRadioRxDone+0xa4c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800fe0e:	2000      	movs	r0, #0
 800fe10:	f000 fc50 	bl	80106b4 <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800fe14:	4b05      	ldr	r3, [pc, #20]	; (800fe2c <ProcessRadioRxDone+0xa64>)
 800fe16:	4a12      	ldr	r2, [pc, #72]	; (800fe60 <ProcessRadioRxDone+0xa98>)
 800fe18:	5c99      	ldrb	r1, [r3, r2]
 800fe1a:	2020      	movs	r0, #32
 800fe1c:	4301      	orrs	r1, r0
 800fe1e:	5499      	strb	r1, [r3, r2]

    UpdateRxSlotIdleState( );
 800fe20:	f7ff f9c0 	bl	800f1a4 <UpdateRxSlotIdleState>
}
 800fe24:	46bd      	mov	sp, r7
 800fe26:	b023      	add	sp, #140	; 0x8c
 800fe28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe2a:	46c0      	nop			; (mov r8, r8)
 800fe2c:	200005b8 	.word	0x200005b8
 800fe30:	0000041d 	.word	0x0000041d
 800fe34:	0000041e 	.word	0x0000041e
 800fe38:	00000421 	.word	0x00000421
 800fe3c:	00000424 	.word	0x00000424
 800fe40:	0000042e 	.word	0x0000042e
 800fe44:	0000043d 	.word	0x0000043d
 800fe48:	0000042d 	.word	0x0000042d
 800fe4c:	00000484 	.word	0x00000484
 800fe50:	0000041c 	.word	0x0000041c
 800fe54:	0000043c 	.word	0x0000043c
 800fe58:	0000041f 	.word	0x0000041f
 800fe5c:	00000429 	.word	0x00000429
 800fe60:	00000481 	.word	0x00000481
 800fe64:	200007f0 	.word	0x200007f0
 800fe68:	00000414 	.word	0x00000414

0800fe6c <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800fe6c:	b580      	push	{r7, lr}
 800fe6e:	af00      	add	r7, sp, #0
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800fe70:	4b12      	ldr	r3, [pc, #72]	; (800febc <ProcessRadioTxTimeout+0x50>)
 800fe72:	4a13      	ldr	r2, [pc, #76]	; (800fec0 <ProcessRadioTxTimeout+0x54>)
 800fe74:	589b      	ldr	r3, [r3, r2]
 800fe76:	227c      	movs	r2, #124	; 0x7c
 800fe78:	5c9b      	ldrb	r3, [r3, r2]
 800fe7a:	2b02      	cmp	r3, #2
 800fe7c:	d002      	beq.n	800fe84 <ProcessRadioTxTimeout+0x18>
    {
        Radio.Sleep( );
 800fe7e:	4b11      	ldr	r3, [pc, #68]	; (800fec4 <ProcessRadioTxTimeout+0x58>)
 800fe80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe82:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800fe84:	f7ff f98e 	bl	800f1a4 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800fe88:	4b0c      	ldr	r3, [pc, #48]	; (800febc <ProcessRadioTxTimeout+0x50>)
 800fe8a:	4a0f      	ldr	r2, [pc, #60]	; (800fec8 <ProcessRadioTxTimeout+0x5c>)
 800fe8c:	2102      	movs	r1, #2
 800fe8e:	5499      	strb	r1, [r3, r2]
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800fe90:	2002      	movs	r0, #2
 800fe92:	f005 fa5b 	bl	801534c <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800fe96:	4b09      	ldr	r3, [pc, #36]	; (800febc <ProcessRadioTxTimeout+0x50>)
 800fe98:	4a0c      	ldr	r2, [pc, #48]	; (800fecc <ProcessRadioTxTimeout+0x60>)
 800fe9a:	5c9b      	ldrb	r3, [r3, r2]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d003      	beq.n	800fea8 <ProcessRadioTxTimeout+0x3c>
    {
        MacCtx.AckTimeoutRetry = true;
 800fea0:	4b06      	ldr	r3, [pc, #24]	; (800febc <ProcessRadioTxTimeout+0x50>)
 800fea2:	4a0b      	ldr	r2, [pc, #44]	; (800fed0 <ProcessRadioTxTimeout+0x64>)
 800fea4:	2101      	movs	r1, #1
 800fea6:	5499      	strb	r1, [r3, r2]
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800fea8:	4b04      	ldr	r3, [pc, #16]	; (800febc <ProcessRadioTxTimeout+0x50>)
 800feaa:	4a0a      	ldr	r2, [pc, #40]	; (800fed4 <ProcessRadioTxTimeout+0x68>)
 800feac:	5c99      	ldrb	r1, [r3, r2]
 800feae:	2020      	movs	r0, #32
 800feb0:	4301      	orrs	r1, r0
 800feb2:	5499      	strb	r1, [r3, r2]
}
 800feb4:	46c0      	nop			; (mov r8, r8)
 800feb6:	46bd      	mov	sp, r7
 800feb8:	bd80      	pop	{r7, pc}
 800feba:	46c0      	nop			; (mov r8, r8)
 800febc:	200005b8 	.word	0x200005b8
 800fec0:	00000484 	.word	0x00000484
 800fec4:	0801fd54 	.word	0x0801fd54
 800fec8:	0000043d 	.word	0x0000043d
 800fecc:	00000414 	.word	0x00000414
 800fed0:	00000413 	.word	0x00000413
 800fed4:	00000481 	.word	0x00000481

0800fed8 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800fed8:	b580      	push	{r7, lr}
 800feda:	b084      	sub	sp, #16
 800fedc:	af00      	add	r7, sp, #0
 800fede:	0002      	movs	r2, r0
 800fee0:	1dfb      	adds	r3, r7, #7
 800fee2:	701a      	strb	r2, [r3, #0]
 800fee4:	1dbb      	adds	r3, r7, #6
 800fee6:	1c0a      	adds	r2, r1, #0
 800fee8:	701a      	strb	r2, [r3, #0]
    bool classBRx = false;
 800feea:	230f      	movs	r3, #15
 800feec:	18fb      	adds	r3, r7, r3
 800feee:	2200      	movs	r2, #0
 800fef0:	701a      	strb	r2, [r3, #0]

    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800fef2:	4b4a      	ldr	r3, [pc, #296]	; (801001c <HandleRadioRxErrorTimeout+0x144>)
 800fef4:	4a4a      	ldr	r2, [pc, #296]	; (8010020 <HandleRadioRxErrorTimeout+0x148>)
 800fef6:	589b      	ldr	r3, [r3, r2]
 800fef8:	227c      	movs	r2, #124	; 0x7c
 800fefa:	5c9b      	ldrb	r3, [r3, r2]
 800fefc:	2b02      	cmp	r3, #2
 800fefe:	d002      	beq.n	800ff06 <HandleRadioRxErrorTimeout+0x2e>
    {
        Radio.Sleep( );
 800ff00:	4b48      	ldr	r3, [pc, #288]	; (8010024 <HandleRadioRxErrorTimeout+0x14c>)
 800ff02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff04:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800ff06:	f004 fcdd 	bl	80148c4 <LoRaMacClassBIsBeaconExpected>
 800ff0a:	1e03      	subs	r3, r0, #0
 800ff0c:	d009      	beq.n	800ff22 <HandleRadioRxErrorTimeout+0x4a>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800ff0e:	2002      	movs	r0, #2
 800ff10:	f004 fc90 	bl	8014834 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800ff14:	2000      	movs	r0, #0
 800ff16:	f004 fcb1 	bl	801487c <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800ff1a:	230f      	movs	r3, #15
 800ff1c:	18fb      	adds	r3, r7, r3
 800ff1e:	2201      	movs	r2, #1
 800ff20:	701a      	strb	r2, [r3, #0]
    }
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800ff22:	4b3e      	ldr	r3, [pc, #248]	; (801001c <HandleRadioRxErrorTimeout+0x144>)
 800ff24:	4a3e      	ldr	r2, [pc, #248]	; (8010020 <HandleRadioRxErrorTimeout+0x148>)
 800ff26:	589b      	ldr	r3, [r3, r2]
 800ff28:	227c      	movs	r2, #124	; 0x7c
 800ff2a:	5c9b      	ldrb	r3, [r3, r2]
 800ff2c:	2b01      	cmp	r3, #1
 800ff2e:	d11b      	bne.n	800ff68 <HandleRadioRxErrorTimeout+0x90>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800ff30:	f004 fcce 	bl	80148d0 <LoRaMacClassBIsPingExpected>
 800ff34:	1e03      	subs	r3, r0, #0
 800ff36:	d009      	beq.n	800ff4c <HandleRadioRxErrorTimeout+0x74>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800ff38:	2000      	movs	r0, #0
 800ff3a:	f004 fc85 	bl	8014848 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800ff3e:	2000      	movs	r0, #0
 800ff40:	f004 fca4 	bl	801488c <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800ff44:	230f      	movs	r3, #15
 800ff46:	18fb      	adds	r3, r7, r3
 800ff48:	2201      	movs	r2, #1
 800ff4a:	701a      	strb	r2, [r3, #0]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800ff4c:	f004 fcc6 	bl	80148dc <LoRaMacClassBIsMulticastExpected>
 800ff50:	1e03      	subs	r3, r0, #0
 800ff52:	d009      	beq.n	800ff68 <HandleRadioRxErrorTimeout+0x90>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800ff54:	2000      	movs	r0, #0
 800ff56:	f004 fc81 	bl	801485c <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800ff5a:	2000      	movs	r0, #0
 800ff5c:	f004 fc9e 	bl	801489c <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800ff60:	230f      	movs	r3, #15
 800ff62:	18fb      	adds	r3, r7, r3
 800ff64:	2201      	movs	r2, #1
 800ff66:	701a      	strb	r2, [r3, #0]
        }
    }

    if( classBRx == false )
 800ff68:	230f      	movs	r3, #15
 800ff6a:	18fb      	adds	r3, r7, r3
 800ff6c:	781b      	ldrb	r3, [r3, #0]
 800ff6e:	2201      	movs	r2, #1
 800ff70:	4053      	eors	r3, r2
 800ff72:	b2db      	uxtb	r3, r3
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d04b      	beq.n	8010010 <HandleRadioRxErrorTimeout+0x138>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800ff78:	4a28      	ldr	r2, [pc, #160]	; (801001c <HandleRadioRxErrorTimeout+0x144>)
 800ff7a:	2390      	movs	r3, #144	; 0x90
 800ff7c:	00db      	lsls	r3, r3, #3
 800ff7e:	5cd3      	ldrb	r3, [r2, r3]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d129      	bne.n	800ffd8 <HandleRadioRxErrorTimeout+0x100>
        {
            if( MacCtx.NodeAckRequested == true )
 800ff84:	4b25      	ldr	r3, [pc, #148]	; (801001c <HandleRadioRxErrorTimeout+0x144>)
 800ff86:	4a28      	ldr	r2, [pc, #160]	; (8010028 <HandleRadioRxErrorTimeout+0x150>)
 800ff88:	5c9b      	ldrb	r3, [r3, r2]
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d004      	beq.n	800ff98 <HandleRadioRxErrorTimeout+0xc0>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800ff8e:	4b23      	ldr	r3, [pc, #140]	; (801001c <HandleRadioRxErrorTimeout+0x144>)
 800ff90:	1dfa      	adds	r2, r7, #7
 800ff92:	4926      	ldr	r1, [pc, #152]	; (801002c <HandleRadioRxErrorTimeout+0x154>)
 800ff94:	7812      	ldrb	r2, [r2, #0]
 800ff96:	545a      	strb	r2, [r3, r1]
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800ff98:	1dfb      	adds	r3, r7, #7
 800ff9a:	781b      	ldrb	r3, [r3, #0]
 800ff9c:	0018      	movs	r0, r3
 800ff9e:	f005 f9d5 	bl	801534c <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( MacCtx.NvmCtx->LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800ffa2:	4b1e      	ldr	r3, [pc, #120]	; (801001c <HandleRadioRxErrorTimeout+0x144>)
 800ffa4:	4a1e      	ldr	r2, [pc, #120]	; (8010020 <HandleRadioRxErrorTimeout+0x148>)
 800ffa6:	589a      	ldr	r2, [r3, r2]
 800ffa8:	23a8      	movs	r3, #168	; 0xa8
 800ffaa:	005b      	lsls	r3, r3, #1
 800ffac:	58d3      	ldr	r3, [r2, r3]
 800ffae:	0018      	movs	r0, r3
 800ffb0:	f00c ff9e 	bl	801cef0 <UTIL_TIMER_GetElapsedTime>
 800ffb4:	0001      	movs	r1, r0
 800ffb6:	4a19      	ldr	r2, [pc, #100]	; (801001c <HandleRadioRxErrorTimeout+0x144>)
 800ffb8:	23ed      	movs	r3, #237	; 0xed
 800ffba:	009b      	lsls	r3, r3, #2
 800ffbc:	58d3      	ldr	r3, [r2, r3]
 800ffbe:	4299      	cmp	r1, r3
 800ffc0:	d326      	bcc.n	8010010 <HandleRadioRxErrorTimeout+0x138>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800ffc2:	4b1b      	ldr	r3, [pc, #108]	; (8010030 <HandleRadioRxErrorTimeout+0x158>)
 800ffc4:	0018      	movs	r0, r3
 800ffc6:	f00c fe4f 	bl	801cc68 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800ffca:	4b14      	ldr	r3, [pc, #80]	; (801001c <HandleRadioRxErrorTimeout+0x144>)
 800ffcc:	4a19      	ldr	r2, [pc, #100]	; (8010034 <HandleRadioRxErrorTimeout+0x15c>)
 800ffce:	5c99      	ldrb	r1, [r3, r2]
 800ffd0:	2020      	movs	r0, #32
 800ffd2:	4301      	orrs	r1, r0
 800ffd4:	5499      	strb	r1, [r3, r2]
 800ffd6:	e01b      	b.n	8010010 <HandleRadioRxErrorTimeout+0x138>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800ffd8:	4b10      	ldr	r3, [pc, #64]	; (801001c <HandleRadioRxErrorTimeout+0x144>)
 800ffda:	4a13      	ldr	r2, [pc, #76]	; (8010028 <HandleRadioRxErrorTimeout+0x150>)
 800ffdc:	5c9b      	ldrb	r3, [r3, r2]
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d004      	beq.n	800ffec <HandleRadioRxErrorTimeout+0x114>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800ffe2:	4b0e      	ldr	r3, [pc, #56]	; (801001c <HandleRadioRxErrorTimeout+0x144>)
 800ffe4:	1dba      	adds	r2, r7, #6
 800ffe6:	4911      	ldr	r1, [pc, #68]	; (801002c <HandleRadioRxErrorTimeout+0x154>)
 800ffe8:	7812      	ldrb	r2, [r2, #0]
 800ffea:	545a      	strb	r2, [r3, r1]
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800ffec:	1dbb      	adds	r3, r7, #6
 800ffee:	781b      	ldrb	r3, [r3, #0]
 800fff0:	0018      	movs	r0, r3
 800fff2:	f005 f9ab 	bl	801534c <LoRaMacConfirmQueueSetStatusCmn>

            if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800fff6:	4b09      	ldr	r3, [pc, #36]	; (801001c <HandleRadioRxErrorTimeout+0x144>)
 800fff8:	4a09      	ldr	r2, [pc, #36]	; (8010020 <HandleRadioRxErrorTimeout+0x148>)
 800fffa:	589b      	ldr	r3, [r3, r2]
 800fffc:	227c      	movs	r2, #124	; 0x7c
 800fffe:	5c9b      	ldrb	r3, [r3, r2]
 8010000:	2b02      	cmp	r3, #2
 8010002:	d005      	beq.n	8010010 <HandleRadioRxErrorTimeout+0x138>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 8010004:	4b05      	ldr	r3, [pc, #20]	; (801001c <HandleRadioRxErrorTimeout+0x144>)
 8010006:	4a0b      	ldr	r2, [pc, #44]	; (8010034 <HandleRadioRxErrorTimeout+0x15c>)
 8010008:	5c99      	ldrb	r1, [r3, r2]
 801000a:	2020      	movs	r0, #32
 801000c:	4301      	orrs	r1, r0
 801000e:	5499      	strb	r1, [r3, r2]
            }
        }
    }

    UpdateRxSlotIdleState( );
 8010010:	f7ff f8c8 	bl	800f1a4 <UpdateRxSlotIdleState>
}
 8010014:	46c0      	nop			; (mov r8, r8)
 8010016:	46bd      	mov	sp, r7
 8010018:	b004      	add	sp, #16
 801001a:	bd80      	pop	{r7, pc}
 801001c:	200005b8 	.word	0x200005b8
 8010020:	00000484 	.word	0x00000484
 8010024:	0801fd54 	.word	0x0801fd54
 8010028:	00000414 	.word	0x00000414
 801002c:	0000043d 	.word	0x0000043d
 8010030:	20000950 	.word	0x20000950
 8010034:	00000481 	.word	0x00000481

08010038 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 8010038:	b580      	push	{r7, lr}
 801003a:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 801003c:	2106      	movs	r1, #6
 801003e:	2005      	movs	r0, #5
 8010040:	f7ff ff4a 	bl	800fed8 <HandleRadioRxErrorTimeout>
}
 8010044:	46c0      	nop			; (mov r8, r8)
 8010046:	46bd      	mov	sp, r7
 8010048:	bd80      	pop	{r7, pc}

0801004a <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 801004a:	b580      	push	{r7, lr}
 801004c:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 801004e:	2104      	movs	r1, #4
 8010050:	2003      	movs	r0, #3
 8010052:	f7ff ff41 	bl	800fed8 <HandleRadioRxErrorTimeout>
}
 8010056:	46c0      	nop			; (mov r8, r8)
 8010058:	46bd      	mov	sp, r7
 801005a:	bd80      	pop	{r7, pc}

0801005c <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 801005c:	b580      	push	{r7, lr}
 801005e:	b084      	sub	sp, #16
 8010060:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010062:	f3ef 8310 	mrs	r3, PRIMASK
 8010066:	607b      	str	r3, [r7, #4]
  return(result);
 8010068:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 801006a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801006c:	b672      	cpsid	i
}
 801006e:	46c0      	nop			; (mov r8, r8)
    events = LoRaMacRadioEvents;
 8010070:	4b1f      	ldr	r3, [pc, #124]	; (80100f0 <LoRaMacHandleIrqEvents+0x94>)
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 8010076:	4b1e      	ldr	r3, [pc, #120]	; (80100f0 <LoRaMacHandleIrqEvents+0x94>)
 8010078:	2200      	movs	r2, #0
 801007a:	601a      	str	r2, [r3, #0]
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010080:	68bb      	ldr	r3, [r7, #8]
 8010082:	f383 8810 	msr	PRIMASK, r3
}
 8010086:	46c0      	nop			; (mov r8, r8)
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 8010088:	683b      	ldr	r3, [r7, #0]
 801008a:	2b00      	cmp	r3, #0
 801008c:	d02c      	beq.n	80100e8 <LoRaMacHandleIrqEvents+0x8c>
    {
        if( events.Events.TxDone == 1 )
 801008e:	003b      	movs	r3, r7
 8010090:	781b      	ldrb	r3, [r3, #0]
 8010092:	2210      	movs	r2, #16
 8010094:	4013      	ands	r3, r2
 8010096:	b2db      	uxtb	r3, r3
 8010098:	2b00      	cmp	r3, #0
 801009a:	d001      	beq.n	80100a0 <LoRaMacHandleIrqEvents+0x44>
        {
            ProcessRadioTxDone( );
 801009c:	f7ff f89e 	bl	800f1dc <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 80100a0:	003b      	movs	r3, r7
 80100a2:	781b      	ldrb	r3, [r3, #0]
 80100a4:	2208      	movs	r2, #8
 80100a6:	4013      	ands	r3, r2
 80100a8:	b2db      	uxtb	r3, r3
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d001      	beq.n	80100b2 <LoRaMacHandleIrqEvents+0x56>
        {
            ProcessRadioRxDone( );
 80100ae:	f7ff f98b 	bl	800f3c8 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 80100b2:	003b      	movs	r3, r7
 80100b4:	781b      	ldrb	r3, [r3, #0]
 80100b6:	2204      	movs	r2, #4
 80100b8:	4013      	ands	r3, r2
 80100ba:	b2db      	uxtb	r3, r3
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d001      	beq.n	80100c4 <LoRaMacHandleIrqEvents+0x68>
        {
            ProcessRadioTxTimeout( );
 80100c0:	f7ff fed4 	bl	800fe6c <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 80100c4:	003b      	movs	r3, r7
 80100c6:	781b      	ldrb	r3, [r3, #0]
 80100c8:	2202      	movs	r2, #2
 80100ca:	4013      	ands	r3, r2
 80100cc:	b2db      	uxtb	r3, r3
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d001      	beq.n	80100d6 <LoRaMacHandleIrqEvents+0x7a>
        {
            ProcessRadioRxError( );
 80100d2:	f7ff ffb1 	bl	8010038 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 80100d6:	003b      	movs	r3, r7
 80100d8:	781b      	ldrb	r3, [r3, #0]
 80100da:	2201      	movs	r2, #1
 80100dc:	4013      	ands	r3, r2
 80100de:	b2db      	uxtb	r3, r3
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d001      	beq.n	80100e8 <LoRaMacHandleIrqEvents+0x8c>
        {
            ProcessRadioRxTimeout( );
 80100e4:	f7ff ffb1 	bl	801004a <ProcessRadioRxTimeout>
        }
    }
}
 80100e8:	46c0      	nop			; (mov r8, r8)
 80100ea:	46bd      	mov	sp, r7
 80100ec:	b004      	add	sp, #16
 80100ee:	bd80      	pop	{r7, pc}
 80100f0:	20000be8 	.word	0x20000be8

080100f4 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 80100f4:	b580      	push	{r7, lr}
 80100f6:	b082      	sub	sp, #8
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	0002      	movs	r2, r0
 80100fc:	1dfb      	adds	r3, r7, #7
 80100fe:	701a      	strb	r2, [r3, #0]
    MacCtx.AllowRequests = requestState;
 8010100:	4b04      	ldr	r3, [pc, #16]	; (8010114 <LoRaMacEnableRequests+0x20>)
 8010102:	1dfa      	adds	r2, r7, #7
 8010104:	4904      	ldr	r1, [pc, #16]	; (8010118 <LoRaMacEnableRequests+0x24>)
 8010106:	7812      	ldrb	r2, [r2, #0]
 8010108:	545a      	strb	r2, [r3, r1]
}
 801010a:	46c0      	nop			; (mov r8, r8)
 801010c:	46bd      	mov	sp, r7
 801010e:	b002      	add	sp, #8
 8010110:	bd80      	pop	{r7, pc}
 8010112:	46c0      	nop			; (mov r8, r8)
 8010114:	200005b8 	.word	0x200005b8
 8010118:	00000482 	.word	0x00000482

0801011c <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 801011c:	b580      	push	{r7, lr}
 801011e:	b082      	sub	sp, #8
 8010120:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 8010122:	1d3b      	adds	r3, r7, #4
 8010124:	4a2c      	ldr	r2, [pc, #176]	; (80101d8 <LoRaMacHandleRequestEvents+0xbc>)
 8010126:	492d      	ldr	r1, [pc, #180]	; (80101dc <LoRaMacHandleRequestEvents+0xc0>)
 8010128:	5c52      	ldrb	r2, [r2, r1]
 801012a:	701a      	strb	r2, [r3, #0]

    if( MacCtx.MacState == LORAMAC_IDLE )
 801012c:	4a2a      	ldr	r2, [pc, #168]	; (80101d8 <LoRaMacHandleRequestEvents+0xbc>)
 801012e:	23d0      	movs	r3, #208	; 0xd0
 8010130:	009b      	lsls	r3, r3, #2
 8010132:	58d3      	ldr	r3, [r2, r3]
 8010134:	2b00      	cmp	r3, #0
 8010136:	d14a      	bne.n	80101ce <LoRaMacHandleRequestEvents+0xb2>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8010138:	4b27      	ldr	r3, [pc, #156]	; (80101d8 <LoRaMacHandleRequestEvents+0xbc>)
 801013a:	4a28      	ldr	r2, [pc, #160]	; (80101dc <LoRaMacHandleRequestEvents+0xc0>)
 801013c:	5c9b      	ldrb	r3, [r3, r2]
 801013e:	2201      	movs	r2, #1
 8010140:	4013      	ands	r3, r2
 8010142:	b2db      	uxtb	r3, r3
 8010144:	2b00      	cmp	r3, #0
 8010146:	d005      	beq.n	8010154 <LoRaMacHandleRequestEvents+0x38>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8010148:	4b23      	ldr	r3, [pc, #140]	; (80101d8 <LoRaMacHandleRequestEvents+0xbc>)
 801014a:	4a24      	ldr	r2, [pc, #144]	; (80101dc <LoRaMacHandleRequestEvents+0xc0>)
 801014c:	5c99      	ldrb	r1, [r3, r2]
 801014e:	2001      	movs	r0, #1
 8010150:	4381      	bics	r1, r0
 8010152:	5499      	strb	r1, [r3, r2]
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8010154:	4b20      	ldr	r3, [pc, #128]	; (80101d8 <LoRaMacHandleRequestEvents+0xbc>)
 8010156:	4a21      	ldr	r2, [pc, #132]	; (80101dc <LoRaMacHandleRequestEvents+0xc0>)
 8010158:	5c9b      	ldrb	r3, [r3, r2]
 801015a:	2204      	movs	r2, #4
 801015c:	4013      	ands	r3, r2
 801015e:	b2db      	uxtb	r3, r3
 8010160:	2b00      	cmp	r3, #0
 8010162:	d005      	beq.n	8010170 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8010164:	4b1c      	ldr	r3, [pc, #112]	; (80101d8 <LoRaMacHandleRequestEvents+0xbc>)
 8010166:	4a1d      	ldr	r2, [pc, #116]	; (80101dc <LoRaMacHandleRequestEvents+0xc0>)
 8010168:	5c99      	ldrb	r1, [r3, r2]
 801016a:	2004      	movs	r0, #4
 801016c:	4381      	bics	r1, r0
 801016e:	5499      	strb	r1, [r3, r2]
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8010170:	2001      	movs	r0, #1
 8010172:	f7ff ffbf 	bl	80100f4 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 8010176:	1d3b      	adds	r3, r7, #4
 8010178:	781b      	ldrb	r3, [r3, #0]
 801017a:	2201      	movs	r2, #1
 801017c:	4013      	ands	r3, r2
 801017e:	b2db      	uxtb	r3, r3
 8010180:	2b00      	cmp	r3, #0
 8010182:	d007      	beq.n	8010194 <LoRaMacHandleRequestEvents+0x78>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 8010184:	4a14      	ldr	r2, [pc, #80]	; (80101d8 <LoRaMacHandleRequestEvents+0xbc>)
 8010186:	23d1      	movs	r3, #209	; 0xd1
 8010188:	009b      	lsls	r3, r3, #2
 801018a:	58d3      	ldr	r3, [r2, r3]
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	4a14      	ldr	r2, [pc, #80]	; (80101e0 <LoRaMacHandleRequestEvents+0xc4>)
 8010190:	0010      	movs	r0, r2
 8010192:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 8010194:	1d3b      	adds	r3, r7, #4
 8010196:	781b      	ldrb	r3, [r3, #0]
 8010198:	2204      	movs	r2, #4
 801019a:	4013      	ands	r3, r2
 801019c:	b2db      	uxtb	r3, r3
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d00d      	beq.n	80101be <LoRaMacHandleRequestEvents+0xa2>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 80101a2:	4b10      	ldr	r3, [pc, #64]	; (80101e4 <LoRaMacHandleRequestEvents+0xc8>)
 80101a4:	0018      	movs	r0, r3
 80101a6:	f005 f925 	bl	80153f4 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 80101aa:	f005 f985 	bl	80154b8 <LoRaMacConfirmQueueGetCnt>
 80101ae:	1e03      	subs	r3, r0, #0
 80101b0:	d005      	beq.n	80101be <LoRaMacHandleRequestEvents+0xa2>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 80101b2:	4b09      	ldr	r3, [pc, #36]	; (80101d8 <LoRaMacHandleRequestEvents+0xbc>)
 80101b4:	4a09      	ldr	r2, [pc, #36]	; (80101dc <LoRaMacHandleRequestEvents+0xc0>)
 80101b6:	5c99      	ldrb	r1, [r3, r2]
 80101b8:	2004      	movs	r0, #4
 80101ba:	4301      	orrs	r1, r0
 80101bc:	5499      	strb	r1, [r3, r2]
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 80101be:	f004 fba8 	bl	8014912 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 80101c2:	4b05      	ldr	r3, [pc, #20]	; (80101d8 <LoRaMacHandleRequestEvents+0xbc>)
 80101c4:	4a05      	ldr	r2, [pc, #20]	; (80101dc <LoRaMacHandleRequestEvents+0xc0>)
 80101c6:	5c99      	ldrb	r1, [r3, r2]
 80101c8:	2020      	movs	r0, #32
 80101ca:	4381      	bics	r1, r0
 80101cc:	5499      	strb	r1, [r3, r2]
    }
}
 80101ce:	46c0      	nop			; (mov r8, r8)
 80101d0:	46bd      	mov	sp, r7
 80101d2:	b002      	add	sp, #8
 80101d4:	bd80      	pop	{r7, pc}
 80101d6:	46c0      	nop			; (mov r8, r8)
 80101d8:	200005b8 	.word	0x200005b8
 80101dc:	00000481 	.word	0x00000481
 80101e0:	200009f4 	.word	0x200009f4
 80101e4:	20000a08 	.word	0x20000a08

080101e8 <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 80101e8:	b580      	push	{r7, lr}
 80101ea:	b082      	sub	sp, #8
 80101ec:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 80101ee:	4a0b      	ldr	r2, [pc, #44]	; (801021c <LoRaMacHandleScheduleUplinkEvent+0x34>)
 80101f0:	23d0      	movs	r3, #208	; 0xd0
 80101f2:	009b      	lsls	r3, r3, #2
 80101f4:	58d3      	ldr	r3, [r2, r3]
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d10c      	bne.n	8010214 <LoRaMacHandleScheduleUplinkEvent+0x2c>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 80101fa:	1dfb      	adds	r3, r7, #7
 80101fc:	2200      	movs	r2, #0
 80101fe:	701a      	strb	r2, [r3, #0]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 8010200:	1dfb      	adds	r3, r7, #7
 8010202:	0018      	movs	r0, r3
 8010204:	f004 fe94 	bl	8014f30 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 8010208:	1dfb      	adds	r3, r7, #7
 801020a:	781b      	ldrb	r3, [r3, #0]
 801020c:	2b00      	cmp	r3, #0
 801020e:	d001      	beq.n	8010214 <LoRaMacHandleScheduleUplinkEvent+0x2c>
        {// Setup MLME indication
            SetMlmeScheduleUplinkIndication( );
 8010210:	f000 fc78 	bl	8010b04 <SetMlmeScheduleUplinkIndication>
        }
    }
}
 8010214:	46c0      	nop			; (mov r8, r8)
 8010216:	46bd      	mov	sp, r7
 8010218:	b002      	add	sp, #8
 801021a:	bd80      	pop	{r7, pc}
 801021c:	200005b8 	.word	0x200005b8

08010220 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 8010220:	b580      	push	{r7, lr}
 8010222:	b088      	sub	sp, #32
 8010224:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8010226:	4b26      	ldr	r3, [pc, #152]	; (80102c0 <LoRaMacHandleIndicationEvents+0xa0>)
 8010228:	4a26      	ldr	r2, [pc, #152]	; (80102c4 <LoRaMacHandleIndicationEvents+0xa4>)
 801022a:	5c9b      	ldrb	r3, [r3, r2]
 801022c:	2208      	movs	r2, #8
 801022e:	4013      	ands	r3, r2
 8010230:	b2db      	uxtb	r3, r3
 8010232:	2b00      	cmp	r3, #0
 8010234:	d00d      	beq.n	8010252 <LoRaMacHandleIndicationEvents+0x32>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8010236:	4b22      	ldr	r3, [pc, #136]	; (80102c0 <LoRaMacHandleIndicationEvents+0xa0>)
 8010238:	4a22      	ldr	r2, [pc, #136]	; (80102c4 <LoRaMacHandleIndicationEvents+0xa4>)
 801023a:	5c99      	ldrb	r1, [r3, r2]
 801023c:	2008      	movs	r0, #8
 801023e:	4381      	bics	r1, r0
 8010240:	5499      	strb	r1, [r3, r2]
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
 8010242:	4a1f      	ldr	r2, [pc, #124]	; (80102c0 <LoRaMacHandleIndicationEvents+0xa0>)
 8010244:	23d1      	movs	r3, #209	; 0xd1
 8010246:	009b      	lsls	r3, r3, #2
 8010248:	58d3      	ldr	r3, [r2, r3]
 801024a:	68db      	ldr	r3, [r3, #12]
 801024c:	4a1e      	ldr	r2, [pc, #120]	; (80102c8 <LoRaMacHandleIndicationEvents+0xa8>)
 801024e:	0010      	movs	r0, r2
 8010250:	4798      	blx	r3
    }

    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 8010252:	4b1b      	ldr	r3, [pc, #108]	; (80102c0 <LoRaMacHandleIndicationEvents+0xa0>)
 8010254:	4a1b      	ldr	r2, [pc, #108]	; (80102c4 <LoRaMacHandleIndicationEvents+0xa4>)
 8010256:	5c9b      	ldrb	r3, [r3, r2]
 8010258:	2210      	movs	r2, #16
 801025a:	4013      	ands	r3, r2
 801025c:	b2db      	uxtb	r3, r3
 801025e:	2b00      	cmp	r3, #0
 8010260:	d013      	beq.n	801028a <LoRaMacHandleIndicationEvents+0x6a>
    {
        MlmeIndication_t schduleUplinkIndication;
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 8010262:	1d3b      	adds	r3, r7, #4
 8010264:	2207      	movs	r2, #7
 8010266:	701a      	strb	r2, [r3, #0]
        schduleUplinkIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8010268:	1d3b      	adds	r3, r7, #4
 801026a:	2200      	movs	r2, #0
 801026c:	705a      	strb	r2, [r3, #1]

        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication );
 801026e:	4a14      	ldr	r2, [pc, #80]	; (80102c0 <LoRaMacHandleIndicationEvents+0xa0>)
 8010270:	23d1      	movs	r3, #209	; 0xd1
 8010272:	009b      	lsls	r3, r3, #2
 8010274:	58d3      	ldr	r3, [r2, r3]
 8010276:	68db      	ldr	r3, [r3, #12]
 8010278:	1d3a      	adds	r2, r7, #4
 801027a:	0010      	movs	r0, r2
 801027c:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 801027e:	4b10      	ldr	r3, [pc, #64]	; (80102c0 <LoRaMacHandleIndicationEvents+0xa0>)
 8010280:	4a10      	ldr	r2, [pc, #64]	; (80102c4 <LoRaMacHandleIndicationEvents+0xa4>)
 8010282:	5c99      	ldrb	r1, [r3, r2]
 8010284:	2010      	movs	r0, #16
 8010286:	4381      	bics	r1, r0
 8010288:	5499      	strb	r1, [r3, r2]
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 801028a:	4b0d      	ldr	r3, [pc, #52]	; (80102c0 <LoRaMacHandleIndicationEvents+0xa0>)
 801028c:	4a0d      	ldr	r2, [pc, #52]	; (80102c4 <LoRaMacHandleIndicationEvents+0xa4>)
 801028e:	5c9b      	ldrb	r3, [r3, r2]
 8010290:	2202      	movs	r2, #2
 8010292:	4013      	ands	r3, r2
 8010294:	b2db      	uxtb	r3, r3
 8010296:	2b00      	cmp	r3, #0
 8010298:	d00d      	beq.n	80102b6 <LoRaMacHandleIndicationEvents+0x96>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 801029a:	4b09      	ldr	r3, [pc, #36]	; (80102c0 <LoRaMacHandleIndicationEvents+0xa0>)
 801029c:	4a09      	ldr	r2, [pc, #36]	; (80102c4 <LoRaMacHandleIndicationEvents+0xa4>)
 801029e:	5c99      	ldrb	r1, [r3, r2]
 80102a0:	2002      	movs	r0, #2
 80102a2:	4381      	bics	r1, r0
 80102a4:	5499      	strb	r1, [r3, r2]
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication );
 80102a6:	4a06      	ldr	r2, [pc, #24]	; (80102c0 <LoRaMacHandleIndicationEvents+0xa0>)
 80102a8:	23d1      	movs	r3, #209	; 0xd1
 80102aa:	009b      	lsls	r3, r3, #2
 80102ac:	58d3      	ldr	r3, [r2, r3]
 80102ae:	685b      	ldr	r3, [r3, #4]
 80102b0:	4a06      	ldr	r2, [pc, #24]	; (80102cc <LoRaMacHandleIndicationEvents+0xac>)
 80102b2:	0010      	movs	r0, r2
 80102b4:	4798      	blx	r3
    }
}
 80102b6:	46c0      	nop			; (mov r8, r8)
 80102b8:	46bd      	mov	sp, r7
 80102ba:	b008      	add	sp, #32
 80102bc:	bd80      	pop	{r7, pc}
 80102be:	46c0      	nop			; (mov r8, r8)
 80102c0:	200005b8 	.word	0x200005b8
 80102c4:	00000481 	.word	0x00000481
 80102c8:	20000a1c 	.word	0x20000a1c
 80102cc:	200009d4 	.word	0x200009d4

080102d0 <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 80102d0:	b590      	push	{r4, r7, lr}
 80102d2:	b083      	sub	sp, #12
 80102d4:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 80102d6:	4b39      	ldr	r3, [pc, #228]	; (80103bc <LoRaMacHandleMcpsRequest+0xec>)
 80102d8:	4a39      	ldr	r2, [pc, #228]	; (80103c0 <LoRaMacHandleMcpsRequest+0xf0>)
 80102da:	5c9b      	ldrb	r3, [r3, r2]
 80102dc:	2201      	movs	r2, #1
 80102de:	4013      	ands	r3, r2
 80102e0:	b2db      	uxtb	r3, r3
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d066      	beq.n	80103b4 <LoRaMacHandleMcpsRequest+0xe4>
    {
        bool stopRetransmission = false;
 80102e6:	1dfb      	adds	r3, r7, #7
 80102e8:	2200      	movs	r2, #0
 80102ea:	701a      	strb	r2, [r3, #0]
        bool waitForRetransmission = false;
 80102ec:	1dbb      	adds	r3, r7, #6
 80102ee:	2200      	movs	r2, #0
 80102f0:	701a      	strb	r2, [r3, #0]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 80102f2:	4b32      	ldr	r3, [pc, #200]	; (80103bc <LoRaMacHandleMcpsRequest+0xec>)
 80102f4:	4a33      	ldr	r2, [pc, #204]	; (80103c4 <LoRaMacHandleMcpsRequest+0xf4>)
 80102f6:	5c9b      	ldrb	r3, [r3, r2]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d004      	beq.n	8010306 <LoRaMacHandleMcpsRequest+0x36>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 80102fc:	4b2f      	ldr	r3, [pc, #188]	; (80103bc <LoRaMacHandleMcpsRequest+0xec>)
 80102fe:	4a31      	ldr	r2, [pc, #196]	; (80103c4 <LoRaMacHandleMcpsRequest+0xf4>)
 8010300:	5c9b      	ldrb	r3, [r3, r2]
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8010302:	2b03      	cmp	r3, #3
 8010304:	d105      	bne.n	8010312 <LoRaMacHandleMcpsRequest+0x42>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 8010306:	1dfc      	adds	r4, r7, #7
 8010308:	f002 fb70 	bl	80129ec <CheckRetransUnconfirmedUplink>
 801030c:	0003      	movs	r3, r0
 801030e:	7023      	strb	r3, [r4, #0]
 8010310:	e026      	b.n	8010360 <LoRaMacHandleMcpsRequest+0x90>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 8010312:	4b2a      	ldr	r3, [pc, #168]	; (80103bc <LoRaMacHandleMcpsRequest+0xec>)
 8010314:	4a2b      	ldr	r2, [pc, #172]	; (80103c4 <LoRaMacHandleMcpsRequest+0xf4>)
 8010316:	5c9b      	ldrb	r3, [r3, r2]
 8010318:	2b01      	cmp	r3, #1
 801031a:	d121      	bne.n	8010360 <LoRaMacHandleMcpsRequest+0x90>
        {
            if( MacCtx.AckTimeoutRetry == true )
 801031c:	4b27      	ldr	r3, [pc, #156]	; (80103bc <LoRaMacHandleMcpsRequest+0xec>)
 801031e:	4a2a      	ldr	r2, [pc, #168]	; (80103c8 <LoRaMacHandleMcpsRequest+0xf8>)
 8010320:	5c9b      	ldrb	r3, [r3, r2]
 8010322:	2b00      	cmp	r3, #0
 8010324:	d019      	beq.n	801035a <LoRaMacHandleMcpsRequest+0x8a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 8010326:	1dfc      	adds	r4, r7, #7
 8010328:	f002 fb94 	bl	8012a54 <CheckRetransConfirmedUplink>
 801032c:	0003      	movs	r3, r0
 801032e:	7023      	strb	r3, [r4, #0]

                if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 8010330:	4b22      	ldr	r3, [pc, #136]	; (80103bc <LoRaMacHandleMcpsRequest+0xec>)
 8010332:	4a26      	ldr	r2, [pc, #152]	; (80103cc <LoRaMacHandleMcpsRequest+0xfc>)
 8010334:	589a      	ldr	r2, [r3, r2]
 8010336:	23b1      	movs	r3, #177	; 0xb1
 8010338:	005b      	lsls	r3, r3, #1
 801033a:	5cd3      	ldrb	r3, [r2, r3]
 801033c:	2b00      	cmp	r3, #0
 801033e:	d10f      	bne.n	8010360 <LoRaMacHandleMcpsRequest+0x90>
                {
                    if( stopRetransmission == false )
 8010340:	1dfb      	adds	r3, r7, #7
 8010342:	781b      	ldrb	r3, [r3, #0]
 8010344:	2201      	movs	r2, #1
 8010346:	4053      	eors	r3, r2
 8010348:	b2db      	uxtb	r3, r3
 801034a:	2b00      	cmp	r3, #0
 801034c:	d002      	beq.n	8010354 <LoRaMacHandleMcpsRequest+0x84>
                    {
                        AckTimeoutRetriesProcess( );
 801034e:	f002 fbf5 	bl	8012b3c <AckTimeoutRetriesProcess>
 8010352:	e005      	b.n	8010360 <LoRaMacHandleMcpsRequest+0x90>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 8010354:	f002 fc40 	bl	8012bd8 <AckTimeoutRetriesFinalize>
 8010358:	e002      	b.n	8010360 <LoRaMacHandleMcpsRequest+0x90>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 801035a:	1dbb      	adds	r3, r7, #6
 801035c:	2201      	movs	r2, #1
 801035e:	701a      	strb	r2, [r3, #0]
            }
        }

        if( stopRetransmission == true )
 8010360:	1dfb      	adds	r3, r7, #7
 8010362:	781b      	ldrb	r3, [r3, #0]
 8010364:	2b00      	cmp	r3, #0
 8010366:	d011      	beq.n	801038c <LoRaMacHandleMcpsRequest+0xbc>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 8010368:	4b19      	ldr	r3, [pc, #100]	; (80103d0 <LoRaMacHandleMcpsRequest+0x100>)
 801036a:	0018      	movs	r0, r3
 801036c:	f00c fc7c 	bl	801cc68 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8010370:	4a12      	ldr	r2, [pc, #72]	; (80103bc <LoRaMacHandleMcpsRequest+0xec>)
 8010372:	23d0      	movs	r3, #208	; 0xd0
 8010374:	009b      	lsls	r3, r3, #2
 8010376:	58d3      	ldr	r3, [r2, r3]
 8010378:	2220      	movs	r2, #32
 801037a:	4393      	bics	r3, r2
 801037c:	0019      	movs	r1, r3
 801037e:	4a0f      	ldr	r2, [pc, #60]	; (80103bc <LoRaMacHandleMcpsRequest+0xec>)
 8010380:	23d0      	movs	r3, #208	; 0xd0
 8010382:	009b      	lsls	r3, r3, #2
 8010384:	50d1      	str	r1, [r2, r3]
            StopRetransmission( );
 8010386:	f002 fb8d 	bl	8012aa4 <StopRetransmission>
            MacCtx.AckTimeoutRetry = false;
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 801038a:	e013      	b.n	80103b4 <LoRaMacHandleMcpsRequest+0xe4>
        else if( waitForRetransmission == false )
 801038c:	1dbb      	adds	r3, r7, #6
 801038e:	781b      	ldrb	r3, [r3, #0]
 8010390:	2201      	movs	r2, #1
 8010392:	4053      	eors	r3, r2
 8010394:	b2db      	uxtb	r3, r3
 8010396:	2b00      	cmp	r3, #0
 8010398:	d00c      	beq.n	80103b4 <LoRaMacHandleMcpsRequest+0xe4>
            MacCtx.MacFlags.Bits.MacDone = 0;
 801039a:	4b08      	ldr	r3, [pc, #32]	; (80103bc <LoRaMacHandleMcpsRequest+0xec>)
 801039c:	4a08      	ldr	r2, [pc, #32]	; (80103c0 <LoRaMacHandleMcpsRequest+0xf0>)
 801039e:	5c99      	ldrb	r1, [r3, r2]
 80103a0:	2020      	movs	r0, #32
 80103a2:	4381      	bics	r1, r0
 80103a4:	5499      	strb	r1, [r3, r2]
            MacCtx.AckTimeoutRetry = false;
 80103a6:	4b05      	ldr	r3, [pc, #20]	; (80103bc <LoRaMacHandleMcpsRequest+0xec>)
 80103a8:	4a07      	ldr	r2, [pc, #28]	; (80103c8 <LoRaMacHandleMcpsRequest+0xf8>)
 80103aa:	2100      	movs	r1, #0
 80103ac:	5499      	strb	r1, [r3, r2]
            OnTxDelayedTimerEvent( NULL );
 80103ae:	2000      	movs	r0, #0
 80103b0:	f000 f8a2 	bl	80104f8 <OnTxDelayedTimerEvent>
}
 80103b4:	46c0      	nop			; (mov r8, r8)
 80103b6:	46bd      	mov	sp, r7
 80103b8:	b003      	add	sp, #12
 80103ba:	bd90      	pop	{r4, r7, pc}
 80103bc:	200005b8 	.word	0x200005b8
 80103c0:	00000481 	.word	0x00000481
 80103c4:	0000043c 	.word	0x0000043c
 80103c8:	00000413 	.word	0x00000413
 80103cc:	00000484 	.word	0x00000484
 80103d0:	20000920 	.word	0x20000920

080103d4 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 80103d4:	b580      	push	{r7, lr}
 80103d6:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80103d8:	4b1d      	ldr	r3, [pc, #116]	; (8010450 <LoRaMacHandleMlmeRequest+0x7c>)
 80103da:	4a1e      	ldr	r2, [pc, #120]	; (8010454 <LoRaMacHandleMlmeRequest+0x80>)
 80103dc:	5c9b      	ldrb	r3, [r3, r2]
 80103de:	2204      	movs	r2, #4
 80103e0:	4013      	ands	r3, r2
 80103e2:	b2db      	uxtb	r3, r3
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d02f      	beq.n	8010448 <LoRaMacHandleMlmeRequest+0x74>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 80103e8:	2001      	movs	r0, #1
 80103ea:	f004 ffe9 	bl	80153c0 <LoRaMacConfirmQueueIsCmdActive>
 80103ee:	1e03      	subs	r3, r0, #0
 80103f0:	d015      	beq.n	801041e <LoRaMacHandleMlmeRequest+0x4a>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 80103f2:	2001      	movs	r0, #1
 80103f4:	f004 ff7c 	bl	80152f0 <LoRaMacConfirmQueueGetStatus>
 80103f8:	1e03      	subs	r3, r0, #0
 80103fa:	d104      	bne.n	8010406 <LoRaMacHandleMlmeRequest+0x32>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 80103fc:	4a14      	ldr	r2, [pc, #80]	; (8010450 <LoRaMacHandleMlmeRequest+0x7c>)
 80103fe:	2382      	movs	r3, #130	; 0x82
 8010400:	00db      	lsls	r3, r3, #3
 8010402:	2100      	movs	r1, #0
 8010404:	54d1      	strb	r1, [r2, r3]
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010406:	4a12      	ldr	r2, [pc, #72]	; (8010450 <LoRaMacHandleMlmeRequest+0x7c>)
 8010408:	23d0      	movs	r3, #208	; 0xd0
 801040a:	009b      	lsls	r3, r3, #2
 801040c:	58d3      	ldr	r3, [r2, r3]
 801040e:	2202      	movs	r2, #2
 8010410:	4393      	bics	r3, r2
 8010412:	0019      	movs	r1, r3
 8010414:	4a0e      	ldr	r2, [pc, #56]	; (8010450 <LoRaMacHandleMlmeRequest+0x7c>)
 8010416:	23d0      	movs	r3, #208	; 0xd0
 8010418:	009b      	lsls	r3, r3, #2
 801041a:	50d1      	str	r1, [r2, r3]
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
    }
}
 801041c:	e014      	b.n	8010448 <LoRaMacHandleMlmeRequest+0x74>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 801041e:	2005      	movs	r0, #5
 8010420:	f004 ffce 	bl	80153c0 <LoRaMacConfirmQueueIsCmdActive>
 8010424:	1e03      	subs	r3, r0, #0
 8010426:	d104      	bne.n	8010432 <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 8010428:	2006      	movs	r0, #6
 801042a:	f004 ffc9 	bl	80153c0 <LoRaMacConfirmQueueIsCmdActive>
 801042e:	1e03      	subs	r3, r0, #0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8010430:	d00a      	beq.n	8010448 <LoRaMacHandleMlmeRequest+0x74>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010432:	4a07      	ldr	r2, [pc, #28]	; (8010450 <LoRaMacHandleMlmeRequest+0x7c>)
 8010434:	23d0      	movs	r3, #208	; 0xd0
 8010436:	009b      	lsls	r3, r3, #2
 8010438:	58d3      	ldr	r3, [r2, r3]
 801043a:	2202      	movs	r2, #2
 801043c:	4393      	bics	r3, r2
 801043e:	0019      	movs	r1, r3
 8010440:	4a03      	ldr	r2, [pc, #12]	; (8010450 <LoRaMacHandleMlmeRequest+0x7c>)
 8010442:	23d0      	movs	r3, #208	; 0xd0
 8010444:	009b      	lsls	r3, r3, #2
 8010446:	50d1      	str	r1, [r2, r3]
}
 8010448:	46c0      	nop			; (mov r8, r8)
 801044a:	46bd      	mov	sp, r7
 801044c:	bd80      	pop	{r7, pc}
 801044e:	46c0      	nop			; (mov r8, r8)
 8010450:	200005b8 	.word	0x200005b8
 8010454:	00000481 	.word	0x00000481

08010458 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 8010458:	b580      	push	{r7, lr}
 801045a:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 801045c:	200c      	movs	r0, #12
 801045e:	f004 ffaf 	bl	80153c0 <LoRaMacConfirmQueueIsCmdActive>
 8010462:	1e03      	subs	r3, r0, #0
 8010464:	d01c      	beq.n	80104a0 <LoRaMacCheckForBeaconAcquisition+0x48>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8010466:	4b10      	ldr	r3, [pc, #64]	; (80104a8 <LoRaMacCheckForBeaconAcquisition+0x50>)
 8010468:	4a10      	ldr	r2, [pc, #64]	; (80104ac <LoRaMacCheckForBeaconAcquisition+0x54>)
 801046a:	5c9b      	ldrb	r3, [r3, r2]
 801046c:	2201      	movs	r2, #1
 801046e:	4013      	ands	r3, r2
 8010470:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8010472:	2b00      	cmp	r3, #0
 8010474:	d114      	bne.n	80104a0 <LoRaMacCheckForBeaconAcquisition+0x48>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8010476:	4b0c      	ldr	r3, [pc, #48]	; (80104a8 <LoRaMacCheckForBeaconAcquisition+0x50>)
 8010478:	4a0c      	ldr	r2, [pc, #48]	; (80104ac <LoRaMacCheckForBeaconAcquisition+0x54>)
 801047a:	5c9b      	ldrb	r3, [r3, r2]
 801047c:	2204      	movs	r2, #4
 801047e:	4013      	ands	r3, r2
 8010480:	b2db      	uxtb	r3, r3
 8010482:	2b00      	cmp	r3, #0
 8010484:	d00c      	beq.n	80104a0 <LoRaMacCheckForBeaconAcquisition+0x48>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010486:	4a08      	ldr	r2, [pc, #32]	; (80104a8 <LoRaMacCheckForBeaconAcquisition+0x50>)
 8010488:	23d0      	movs	r3, #208	; 0xd0
 801048a:	009b      	lsls	r3, r3, #2
 801048c:	58d3      	ldr	r3, [r2, r3]
 801048e:	2202      	movs	r2, #2
 8010490:	4393      	bics	r3, r2
 8010492:	0019      	movs	r1, r3
 8010494:	4a04      	ldr	r2, [pc, #16]	; (80104a8 <LoRaMacCheckForBeaconAcquisition+0x50>)
 8010496:	23d0      	movs	r3, #208	; 0xd0
 8010498:	009b      	lsls	r3, r3, #2
 801049a:	50d1      	str	r1, [r2, r3]
            return 0x01;
 801049c:	2301      	movs	r3, #1
 801049e:	e000      	b.n	80104a2 <LoRaMacCheckForBeaconAcquisition+0x4a>
        }
    }
    return 0x00;
 80104a0:	2300      	movs	r3, #0
}
 80104a2:	0018      	movs	r0, r3
 80104a4:	46bd      	mov	sp, r7
 80104a6:	bd80      	pop	{r7, pc}
 80104a8:	200005b8 	.word	0x200005b8
 80104ac:	00000481 	.word	0x00000481

080104b0 <LoRaMacCheckForRxAbort>:

static void LoRaMacCheckForRxAbort( void )
{
 80104b0:	b580      	push	{r7, lr}
 80104b2:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 80104b4:	4a0f      	ldr	r2, [pc, #60]	; (80104f4 <LoRaMacCheckForRxAbort+0x44>)
 80104b6:	23d0      	movs	r3, #208	; 0xd0
 80104b8:	009b      	lsls	r3, r3, #2
 80104ba:	58d3      	ldr	r3, [r2, r3]
 80104bc:	2280      	movs	r2, #128	; 0x80
 80104be:	4013      	ands	r3, r2
 80104c0:	d015      	beq.n	80104ee <LoRaMacCheckForRxAbort+0x3e>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 80104c2:	4a0c      	ldr	r2, [pc, #48]	; (80104f4 <LoRaMacCheckForRxAbort+0x44>)
 80104c4:	23d0      	movs	r3, #208	; 0xd0
 80104c6:	009b      	lsls	r3, r3, #2
 80104c8:	58d3      	ldr	r3, [r2, r3]
 80104ca:	2280      	movs	r2, #128	; 0x80
 80104cc:	4393      	bics	r3, r2
 80104ce:	0019      	movs	r1, r3
 80104d0:	4a08      	ldr	r2, [pc, #32]	; (80104f4 <LoRaMacCheckForRxAbort+0x44>)
 80104d2:	23d0      	movs	r3, #208	; 0xd0
 80104d4:	009b      	lsls	r3, r3, #2
 80104d6:	50d1      	str	r1, [r2, r3]
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80104d8:	4a06      	ldr	r2, [pc, #24]	; (80104f4 <LoRaMacCheckForRxAbort+0x44>)
 80104da:	23d0      	movs	r3, #208	; 0xd0
 80104dc:	009b      	lsls	r3, r3, #2
 80104de:	58d3      	ldr	r3, [r2, r3]
 80104e0:	2202      	movs	r2, #2
 80104e2:	4393      	bics	r3, r2
 80104e4:	0019      	movs	r1, r3
 80104e6:	4a03      	ldr	r2, [pc, #12]	; (80104f4 <LoRaMacCheckForRxAbort+0x44>)
 80104e8:	23d0      	movs	r3, #208	; 0xd0
 80104ea:	009b      	lsls	r3, r3, #2
 80104ec:	50d1      	str	r1, [r2, r3]
    }
}
 80104ee:	46c0      	nop			; (mov r8, r8)
 80104f0:	46bd      	mov	sp, r7
 80104f2:	bd80      	pop	{r7, pc}
 80104f4:	200005b8 	.word	0x200005b8

080104f8 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 80104f8:	b580      	push	{r7, lr}
 80104fa:	b082      	sub	sp, #8
 80104fc:	af00      	add	r7, sp, #0
 80104fe:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 8010500:	4b19      	ldr	r3, [pc, #100]	; (8010568 <OnTxDelayedTimerEvent+0x70>)
 8010502:	0018      	movs	r0, r3
 8010504:	f00c fbb0 	bl	801cc68 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8010508:	4a18      	ldr	r2, [pc, #96]	; (801056c <OnTxDelayedTimerEvent+0x74>)
 801050a:	23d0      	movs	r3, #208	; 0xd0
 801050c:	009b      	lsls	r3, r3, #2
 801050e:	58d3      	ldr	r3, [r2, r3]
 8010510:	2220      	movs	r2, #32
 8010512:	4393      	bics	r3, r2
 8010514:	0019      	movs	r1, r3
 8010516:	4a15      	ldr	r2, [pc, #84]	; (801056c <OnTxDelayedTimerEvent+0x74>)
 8010518:	23d0      	movs	r3, #208	; 0xd0
 801051a:	009b      	lsls	r3, r3, #2
 801051c:	50d1      	str	r1, [r2, r3]

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 801051e:	2001      	movs	r0, #1
 8010520:	f001 fb5a 	bl	8011bd8 <ScheduleTx>
 8010524:	1e03      	subs	r3, r0, #0
 8010526:	d01a      	beq.n	801055e <OnTxDelayedTimerEvent+0x66>
 8010528:	2b0b      	cmp	r3, #11
 801052a:	d018      	beq.n	801055e <OnTxDelayedTimerEvent+0x66>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 801052c:	4b0f      	ldr	r3, [pc, #60]	; (801056c <OnTxDelayedTimerEvent+0x74>)
 801052e:	4a10      	ldr	r2, [pc, #64]	; (8010570 <OnTxDelayedTimerEvent+0x78>)
 8010530:	589b      	ldr	r3, [r3, r2]
 8010532:	2285      	movs	r2, #133	; 0x85
 8010534:	569b      	ldrsb	r3, [r3, r2]
 8010536:	b2d9      	uxtb	r1, r3
 8010538:	4b0c      	ldr	r3, [pc, #48]	; (801056c <OnTxDelayedTimerEvent+0x74>)
 801053a:	4a0e      	ldr	r2, [pc, #56]	; (8010574 <OnTxDelayedTimerEvent+0x7c>)
 801053c:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 801053e:	4b0b      	ldr	r3, [pc, #44]	; (801056c <OnTxDelayedTimerEvent+0x74>)
 8010540:	4a0d      	ldr	r2, [pc, #52]	; (8010578 <OnTxDelayedTimerEvent+0x80>)
 8010542:	5c99      	ldrb	r1, [r3, r2]
 8010544:	4b09      	ldr	r3, [pc, #36]	; (801056c <OnTxDelayedTimerEvent+0x74>)
 8010546:	4a0d      	ldr	r2, [pc, #52]	; (801057c <OnTxDelayedTimerEvent+0x84>)
 8010548:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 801054a:	4b08      	ldr	r3, [pc, #32]	; (801056c <OnTxDelayedTimerEvent+0x74>)
 801054c:	4a0c      	ldr	r2, [pc, #48]	; (8010580 <OnTxDelayedTimerEvent+0x88>)
 801054e:	2109      	movs	r1, #9
 8010550:	5499      	strb	r1, [r3, r2]
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 8010552:	2009      	movs	r0, #9
 8010554:	f004 fefa 	bl	801534c <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 8010558:	f002 faa4 	bl	8012aa4 <StopRetransmission>
            break;
 801055c:	e000      	b.n	8010560 <OnTxDelayedTimerEvent+0x68>
            break;
 801055e:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8010560:	46c0      	nop			; (mov r8, r8)
 8010562:	46bd      	mov	sp, r7
 8010564:	b002      	add	sp, #8
 8010566:	bd80      	pop	{r7, pc}
 8010568:	20000920 	.word	0x20000920
 801056c:	200005b8 	.word	0x200005b8
 8010570:	00000484 	.word	0x00000484
 8010574:	0000043e 	.word	0x0000043e
 8010578:	00000412 	.word	0x00000412
 801057c:	00000441 	.word	0x00000441
 8010580:	0000043d 	.word	0x0000043d

08010584 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 8010584:	b580      	push	{r7, lr}
 8010586:	b082      	sub	sp, #8
 8010588:	af00      	add	r7, sp, #0
 801058a:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 801058c:	4b19      	ldr	r3, [pc, #100]	; (80105f4 <OnRxWindow1TimerEvent+0x70>)
 801058e:	4a1a      	ldr	r2, [pc, #104]	; (80105f8 <OnRxWindow1TimerEvent+0x74>)
 8010590:	5c99      	ldrb	r1, [r3, r2]
 8010592:	4a18      	ldr	r2, [pc, #96]	; (80105f4 <OnRxWindow1TimerEvent+0x70>)
 8010594:	23ee      	movs	r3, #238	; 0xee
 8010596:	009b      	lsls	r3, r3, #2
 8010598:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow1Config.DrOffset = MacCtx.NvmCtx->MacParams.Rx1DrOffset;
 801059a:	4b16      	ldr	r3, [pc, #88]	; (80105f4 <OnRxWindow1TimerEvent+0x70>)
 801059c:	4a17      	ldr	r2, [pc, #92]	; (80105fc <OnRxWindow1TimerEvent+0x78>)
 801059e:	589b      	ldr	r3, [r3, r2]
 80105a0:	22a5      	movs	r2, #165	; 0xa5
 80105a2:	5c9b      	ldrb	r3, [r3, r2]
 80105a4:	b259      	sxtb	r1, r3
 80105a6:	4b13      	ldr	r3, [pc, #76]	; (80105f4 <OnRxWindow1TimerEvent+0x70>)
 80105a8:	4a15      	ldr	r2, [pc, #84]	; (8010600 <OnRxWindow1TimerEvent+0x7c>)
 80105aa:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80105ac:	4b11      	ldr	r3, [pc, #68]	; (80105f4 <OnRxWindow1TimerEvent+0x70>)
 80105ae:	4a13      	ldr	r2, [pc, #76]	; (80105fc <OnRxWindow1TimerEvent+0x78>)
 80105b0:	589b      	ldr	r3, [r3, r2]
 80105b2:	22b9      	movs	r2, #185	; 0xb9
 80105b4:	5c99      	ldrb	r1, [r3, r2]
 80105b6:	4a0f      	ldr	r2, [pc, #60]	; (80105f4 <OnRxWindow1TimerEvent+0x70>)
 80105b8:	23f2      	movs	r3, #242	; 0xf2
 80105ba:	009b      	lsls	r3, r3, #2
 80105bc:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow1Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 80105be:	4b0d      	ldr	r3, [pc, #52]	; (80105f4 <OnRxWindow1TimerEvent+0x70>)
 80105c0:	4a0e      	ldr	r2, [pc, #56]	; (80105fc <OnRxWindow1TimerEvent+0x78>)
 80105c2:	589b      	ldr	r3, [r3, r2]
 80105c4:	22ca      	movs	r2, #202	; 0xca
 80105c6:	5c99      	ldrb	r1, [r3, r2]
 80105c8:	4b0a      	ldr	r3, [pc, #40]	; (80105f4 <OnRxWindow1TimerEvent+0x70>)
 80105ca:	4a0e      	ldr	r2, [pc, #56]	; (8010604 <OnRxWindow1TimerEvent+0x80>)
 80105cc:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.RxContinuous = false;
 80105ce:	4b09      	ldr	r3, [pc, #36]	; (80105f4 <OnRxWindow1TimerEvent+0x70>)
 80105d0:	4a0d      	ldr	r2, [pc, #52]	; (8010608 <OnRxWindow1TimerEvent+0x84>)
 80105d2:	2100      	movs	r1, #0
 80105d4:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 80105d6:	4b07      	ldr	r3, [pc, #28]	; (80105f4 <OnRxWindow1TimerEvent+0x70>)
 80105d8:	4a0c      	ldr	r2, [pc, #48]	; (801060c <OnRxWindow1TimerEvent+0x88>)
 80105da:	2100      	movs	r1, #0
 80105dc:	5499      	strb	r1, [r3, r2]

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 80105de:	4a0c      	ldr	r2, [pc, #48]	; (8010610 <OnRxWindow1TimerEvent+0x8c>)
 80105e0:	4b0c      	ldr	r3, [pc, #48]	; (8010614 <OnRxWindow1TimerEvent+0x90>)
 80105e2:	0011      	movs	r1, r2
 80105e4:	0018      	movs	r0, r3
 80105e6:	f001 fd9d 	bl	8012124 <RxWindowSetup>
}
 80105ea:	46c0      	nop			; (mov r8, r8)
 80105ec:	46bd      	mov	sp, r7
 80105ee:	b002      	add	sp, #8
 80105f0:	bd80      	pop	{r7, pc}
 80105f2:	46c0      	nop			; (mov r8, r8)
 80105f4:	200005b8 	.word	0x200005b8
 80105f8:	00000415 	.word	0x00000415
 80105fc:	00000484 	.word	0x00000484
 8010600:	000003bb 	.word	0x000003bb
 8010604:	000003c9 	.word	0x000003c9
 8010608:	000003ca 	.word	0x000003ca
 801060c:	000003cb 	.word	0x000003cb
 8010610:	20000970 	.word	0x20000970
 8010614:	20000938 	.word	0x20000938

08010618 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 8010618:	b580      	push	{r7, lr}
 801061a:	b082      	sub	sp, #8
 801061c:	af00      	add	r7, sp, #0
 801061e:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8010620:	4a1c      	ldr	r2, [pc, #112]	; (8010694 <OnRxWindow2TimerEvent+0x7c>)
 8010622:	2390      	movs	r3, #144	; 0x90
 8010624:	00db      	lsls	r3, r3, #3
 8010626:	5cd3      	ldrb	r3, [r2, r3]
 8010628:	2b00      	cmp	r3, #0
 801062a:	d02f      	beq.n	801068c <OnRxWindow2TimerEvent+0x74>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 801062c:	4b19      	ldr	r3, [pc, #100]	; (8010694 <OnRxWindow2TimerEvent+0x7c>)
 801062e:	4a1a      	ldr	r2, [pc, #104]	; (8010698 <OnRxWindow2TimerEvent+0x80>)
 8010630:	5c99      	ldrb	r1, [r3, r2]
 8010632:	4a18      	ldr	r2, [pc, #96]	; (8010694 <OnRxWindow2TimerEvent+0x7c>)
 8010634:	23f3      	movs	r3, #243	; 0xf3
 8010636:	009b      	lsls	r3, r3, #2
 8010638:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 801063a:	4b16      	ldr	r3, [pc, #88]	; (8010694 <OnRxWindow2TimerEvent+0x7c>)
 801063c:	4a17      	ldr	r2, [pc, #92]	; (801069c <OnRxWindow2TimerEvent+0x84>)
 801063e:	589b      	ldr	r3, [r3, r2]
 8010640:	22a8      	movs	r2, #168	; 0xa8
 8010642:	5899      	ldr	r1, [r3, r2]
 8010644:	4a13      	ldr	r2, [pc, #76]	; (8010694 <OnRxWindow2TimerEvent+0x7c>)
 8010646:	23f4      	movs	r3, #244	; 0xf4
 8010648:	009b      	lsls	r3, r3, #2
 801064a:	50d1      	str	r1, [r2, r3]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 801064c:	4b11      	ldr	r3, [pc, #68]	; (8010694 <OnRxWindow2TimerEvent+0x7c>)
 801064e:	4a13      	ldr	r2, [pc, #76]	; (801069c <OnRxWindow2TimerEvent+0x84>)
 8010650:	589b      	ldr	r3, [r3, r2]
 8010652:	22b9      	movs	r2, #185	; 0xb9
 8010654:	5c99      	ldrb	r1, [r3, r2]
 8010656:	4a0f      	ldr	r2, [pc, #60]	; (8010694 <OnRxWindow2TimerEvent+0x7c>)
 8010658:	23f7      	movs	r3, #247	; 0xf7
 801065a:	009b      	lsls	r3, r3, #2
 801065c:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 801065e:	4b0d      	ldr	r3, [pc, #52]	; (8010694 <OnRxWindow2TimerEvent+0x7c>)
 8010660:	4a0e      	ldr	r2, [pc, #56]	; (801069c <OnRxWindow2TimerEvent+0x84>)
 8010662:	589b      	ldr	r3, [r3, r2]
 8010664:	22ca      	movs	r2, #202	; 0xca
 8010666:	5c99      	ldrb	r1, [r3, r2]
 8010668:	4b0a      	ldr	r3, [pc, #40]	; (8010694 <OnRxWindow2TimerEvent+0x7c>)
 801066a:	4a0d      	ldr	r2, [pc, #52]	; (80106a0 <OnRxWindow2TimerEvent+0x88>)
 801066c:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxContinuous = false;
 801066e:	4b09      	ldr	r3, [pc, #36]	; (8010694 <OnRxWindow2TimerEvent+0x7c>)
 8010670:	4a0c      	ldr	r2, [pc, #48]	; (80106a4 <OnRxWindow2TimerEvent+0x8c>)
 8010672:	2100      	movs	r1, #0
 8010674:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8010676:	4b07      	ldr	r3, [pc, #28]	; (8010694 <OnRxWindow2TimerEvent+0x7c>)
 8010678:	4a0b      	ldr	r2, [pc, #44]	; (80106a8 <OnRxWindow2TimerEvent+0x90>)
 801067a:	2101      	movs	r1, #1
 801067c:	5499      	strb	r1, [r3, r2]

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 801067e:	4a0b      	ldr	r2, [pc, #44]	; (80106ac <OnRxWindow2TimerEvent+0x94>)
 8010680:	4b0b      	ldr	r3, [pc, #44]	; (80106b0 <OnRxWindow2TimerEvent+0x98>)
 8010682:	0011      	movs	r1, r2
 8010684:	0018      	movs	r0, r3
 8010686:	f001 fd4d 	bl	8012124 <RxWindowSetup>
 801068a:	e000      	b.n	801068e <OnRxWindow2TimerEvent+0x76>
        return;
 801068c:	46c0      	nop			; (mov r8, r8)
}
 801068e:	46bd      	mov	sp, r7
 8010690:	b002      	add	sp, #8
 8010692:	bd80      	pop	{r7, pc}
 8010694:	200005b8 	.word	0x200005b8
 8010698:	00000415 	.word	0x00000415
 801069c:	00000484 	.word	0x00000484
 80106a0:	000003dd 	.word	0x000003dd
 80106a4:	000003de 	.word	0x000003de
 80106a8:	000003df 	.word	0x000003df
 80106ac:	20000984 	.word	0x20000984
 80106b0:	20000950 	.word	0x20000950

080106b4 <OnAckTimeoutTimerEvent>:

static void OnAckTimeoutTimerEvent( void* context )
{
 80106b4:	b580      	push	{r7, lr}
 80106b6:	b082      	sub	sp, #8
 80106b8:	af00      	add	r7, sp, #0
 80106ba:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 80106bc:	4b18      	ldr	r3, [pc, #96]	; (8010720 <OnAckTimeoutTimerEvent+0x6c>)
 80106be:	0018      	movs	r0, r3
 80106c0:	f00c fad2 	bl	801cc68 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 80106c4:	4b17      	ldr	r3, [pc, #92]	; (8010724 <OnAckTimeoutTimerEvent+0x70>)
 80106c6:	4a18      	ldr	r2, [pc, #96]	; (8010728 <OnAckTimeoutTimerEvent+0x74>)
 80106c8:	5c9b      	ldrb	r3, [r3, r2]
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d003      	beq.n	80106d6 <OnAckTimeoutTimerEvent+0x22>
    {
        MacCtx.AckTimeoutRetry = true;
 80106ce:	4b15      	ldr	r3, [pc, #84]	; (8010724 <OnAckTimeoutTimerEvent+0x70>)
 80106d0:	4a16      	ldr	r2, [pc, #88]	; (801072c <OnAckTimeoutTimerEvent+0x78>)
 80106d2:	2101      	movs	r1, #1
 80106d4:	5499      	strb	r1, [r3, r2]
    }
    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 80106d6:	4b13      	ldr	r3, [pc, #76]	; (8010724 <OnAckTimeoutTimerEvent+0x70>)
 80106d8:	4a15      	ldr	r2, [pc, #84]	; (8010730 <OnAckTimeoutTimerEvent+0x7c>)
 80106da:	589b      	ldr	r3, [r3, r2]
 80106dc:	227c      	movs	r2, #124	; 0x7c
 80106de:	5c9b      	ldrb	r3, [r3, r2]
 80106e0:	2b02      	cmp	r3, #2
 80106e2:	d105      	bne.n	80106f0 <OnAckTimeoutTimerEvent+0x3c>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 80106e4:	4b0f      	ldr	r3, [pc, #60]	; (8010724 <OnAckTimeoutTimerEvent+0x70>)
 80106e6:	4a13      	ldr	r2, [pc, #76]	; (8010734 <OnAckTimeoutTimerEvent+0x80>)
 80106e8:	5c99      	ldrb	r1, [r3, r2]
 80106ea:	2020      	movs	r0, #32
 80106ec:	4301      	orrs	r1, r0
 80106ee:	5499      	strb	r1, [r3, r2]
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80106f0:	4a0c      	ldr	r2, [pc, #48]	; (8010724 <OnAckTimeoutTimerEvent+0x70>)
 80106f2:	23d2      	movs	r3, #210	; 0xd2
 80106f4:	009b      	lsls	r3, r3, #2
 80106f6:	58d3      	ldr	r3, [r2, r3]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d00c      	beq.n	8010716 <OnAckTimeoutTimerEvent+0x62>
 80106fc:	4a09      	ldr	r2, [pc, #36]	; (8010724 <OnAckTimeoutTimerEvent+0x70>)
 80106fe:	23d2      	movs	r3, #210	; 0xd2
 8010700:	009b      	lsls	r3, r3, #2
 8010702:	58d3      	ldr	r3, [r2, r3]
 8010704:	68db      	ldr	r3, [r3, #12]
 8010706:	2b00      	cmp	r3, #0
 8010708:	d005      	beq.n	8010716 <OnAckTimeoutTimerEvent+0x62>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 801070a:	4a06      	ldr	r2, [pc, #24]	; (8010724 <OnAckTimeoutTimerEvent+0x70>)
 801070c:	23d2      	movs	r3, #210	; 0xd2
 801070e:	009b      	lsls	r3, r3, #2
 8010710:	58d3      	ldr	r3, [r2, r3]
 8010712:	68db      	ldr	r3, [r3, #12]
 8010714:	4798      	blx	r3
    }
}
 8010716:	46c0      	nop			; (mov r8, r8)
 8010718:	46bd      	mov	sp, r7
 801071a:	b002      	add	sp, #8
 801071c:	bd80      	pop	{r7, pc}
 801071e:	46c0      	nop			; (mov r8, r8)
 8010720:	200009b0 	.word	0x200009b0
 8010724:	200005b8 	.word	0x200005b8
 8010728:	00000414 	.word	0x00000414
 801072c:	00000413 	.word	0x00000413
 8010730:	00000484 	.word	0x00000484
 8010734:	00000481 	.word	0x00000481

08010738 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 8010738:	b590      	push	{r4, r7, lr}
 801073a:	b085      	sub	sp, #20
 801073c:	af00      	add	r7, sp, #0
 801073e:	60ba      	str	r2, [r7, #8]
 8010740:	607b      	str	r3, [r7, #4]
 8010742:	230f      	movs	r3, #15
 8010744:	18fb      	adds	r3, r7, r3
 8010746:	1c02      	adds	r2, r0, #0
 8010748:	701a      	strb	r2, [r3, #0]
 801074a:	230e      	movs	r3, #14
 801074c:	18fb      	adds	r3, r7, r3
 801074e:	1c0a      	adds	r2, r1, #0
 8010750:	701a      	strb	r2, [r3, #0]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 8010752:	68bb      	ldr	r3, [r7, #8]
 8010754:	2b00      	cmp	r3, #0
 8010756:	d005      	beq.n	8010764 <GetFCntDown+0x2c>
 8010758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801075a:	2b00      	cmp	r3, #0
 801075c:	d002      	beq.n	8010764 <GetFCntDown+0x2c>
 801075e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010760:	2b00      	cmp	r3, #0
 8010762:	d101      	bne.n	8010768 <GetFCntDown+0x30>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010764:	230a      	movs	r3, #10
 8010766:	e033      	b.n	80107d0 <GetFCntDown+0x98>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 8010768:	230f      	movs	r3, #15
 801076a:	18fb      	adds	r3, r7, r3
 801076c:	781b      	ldrb	r3, [r3, #0]
 801076e:	2b00      	cmp	r3, #0
 8010770:	d01a      	beq.n	80107a8 <GetFCntDown+0x70>
 8010772:	2b01      	cmp	r3, #1
 8010774:	d11c      	bne.n	80107b0 <GetFCntDown+0x78>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 8010776:	1d3b      	adds	r3, r7, #4
 8010778:	789b      	ldrb	r3, [r3, #2]
 801077a:	2b01      	cmp	r3, #1
 801077c:	d110      	bne.n	80107a0 <GetFCntDown+0x68>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 801077e:	220e      	movs	r2, #14
 8010780:	18bb      	adds	r3, r7, r2
 8010782:	781b      	ldrb	r3, [r3, #0]
 8010784:	2b00      	cmp	r3, #0
 8010786:	d003      	beq.n	8010790 <GetFCntDown+0x58>
 8010788:	18bb      	adds	r3, r7, r2
 801078a:	781b      	ldrb	r3, [r3, #0]
 801078c:	2b03      	cmp	r3, #3
 801078e:	d103      	bne.n	8010798 <GetFCntDown+0x60>
                {
                    *fCntID = A_FCNT_DOWN;
 8010790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010792:	2202      	movs	r2, #2
 8010794:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 8010796:	e00d      	b.n	80107b4 <GetFCntDown+0x7c>
                    *fCntID = N_FCNT_DOWN;
 8010798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801079a:	2201      	movs	r2, #1
 801079c:	701a      	strb	r2, [r3, #0]
            break;
 801079e:	e009      	b.n	80107b4 <GetFCntDown+0x7c>
                *fCntID = FCNT_DOWN;
 80107a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107a2:	2203      	movs	r2, #3
 80107a4:	701a      	strb	r2, [r3, #0]
            break;
 80107a6:	e005      	b.n	80107b4 <GetFCntDown+0x7c>
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 80107a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107aa:	2204      	movs	r2, #4
 80107ac:	701a      	strb	r2, [r3, #0]
            break;
 80107ae:	e001      	b.n	80107b4 <GetFCntDown+0x7c>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 1 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 80107b0:	2305      	movs	r3, #5
 80107b2:	e00d      	b.n	80107d0 <GetFCntDown+0x98>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 80107b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107b6:	7818      	ldrb	r0, [r3, #0]
 80107b8:	68bb      	ldr	r3, [r7, #8]
 80107ba:	89db      	ldrh	r3, [r3, #14]
 80107bc:	001c      	movs	r4, r3
 80107be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80107c0:	2320      	movs	r3, #32
 80107c2:	18fb      	adds	r3, r7, r3
 80107c4:	8819      	ldrh	r1, [r3, #0]
 80107c6:	0013      	movs	r3, r2
 80107c8:	0022      	movs	r2, r4
 80107ca:	f005 faa1 	bl	8015d10 <LoRaMacCryptoGetFCntDown>
 80107ce:	0003      	movs	r3, r0
}
 80107d0:	0018      	movs	r0, r3
 80107d2:	46bd      	mov	sp, r7
 80107d4:	b005      	add	sp, #20
 80107d6:	bd90      	pop	{r4, r7, pc}

080107d8 <SwitchClass>:

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 80107d8:	b5b0      	push	{r4, r5, r7, lr}
 80107da:	b084      	sub	sp, #16
 80107dc:	af00      	add	r7, sp, #0
 80107de:	0002      	movs	r2, r0
 80107e0:	1dfb      	adds	r3, r7, #7
 80107e2:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80107e4:	230f      	movs	r3, #15
 80107e6:	18fb      	adds	r3, r7, r3
 80107e8:	2203      	movs	r2, #3
 80107ea:	701a      	strb	r2, [r3, #0]

    switch( MacCtx.NvmCtx->DeviceClass )
 80107ec:	4b82      	ldr	r3, [pc, #520]	; (80109f8 <SwitchClass+0x220>)
 80107ee:	4a83      	ldr	r2, [pc, #524]	; (80109fc <SwitchClass+0x224>)
 80107f0:	589b      	ldr	r3, [r3, r2]
 80107f2:	227c      	movs	r2, #124	; 0x7c
 80107f4:	5c9b      	ldrb	r3, [r3, r2]
 80107f6:	2b02      	cmp	r3, #2
 80107f8:	d100      	bne.n	80107fc <SwitchClass+0x24>
 80107fa:	e0de      	b.n	80109ba <SwitchClass+0x1e2>
 80107fc:	dd00      	ble.n	8010800 <SwitchClass+0x28>
 80107fe:	e0f4      	b.n	80109ea <SwitchClass+0x212>
 8010800:	2b00      	cmp	r3, #0
 8010802:	d003      	beq.n	801080c <SwitchClass+0x34>
 8010804:	2b01      	cmp	r3, #1
 8010806:	d100      	bne.n	801080a <SwitchClass+0x32>
 8010808:	e0c2      	b.n	8010990 <SwitchClass+0x1b8>
 801080a:	e0ee      	b.n	80109ea <SwitchClass+0x212>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 801080c:	1dfb      	adds	r3, r7, #7
 801080e:	781b      	ldrb	r3, [r3, #0]
 8010810:	2b00      	cmp	r3, #0
 8010812:	d10b      	bne.n	801082c <SwitchClass+0x54>
            {
                // Revert back RxC parameters
                MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 8010814:	4b78      	ldr	r3, [pc, #480]	; (80109f8 <SwitchClass+0x220>)
 8010816:	4a79      	ldr	r2, [pc, #484]	; (80109fc <SwitchClass+0x224>)
 8010818:	589a      	ldr	r2, [r3, r2]
 801081a:	4b77      	ldr	r3, [pc, #476]	; (80109f8 <SwitchClass+0x220>)
 801081c:	4977      	ldr	r1, [pc, #476]	; (80109fc <SwitchClass+0x224>)
 801081e:	585b      	ldr	r3, [r3, r1]
 8010820:	20b0      	movs	r0, #176	; 0xb0
 8010822:	21a8      	movs	r1, #168	; 0xa8
 8010824:	181b      	adds	r3, r3, r0
 8010826:	1852      	adds	r2, r2, r1
 8010828:	ca03      	ldmia	r2!, {r0, r1}
 801082a:	c303      	stmia	r3!, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 801082c:	1dfb      	adds	r3, r7, #7
 801082e:	781b      	ldrb	r3, [r3, #0]
 8010830:	2b01      	cmp	r3, #1
 8010832:	d113      	bne.n	801085c <SwitchClass+0x84>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 8010834:	250f      	movs	r5, #15
 8010836:	197c      	adds	r4, r7, r5
 8010838:	1dfb      	adds	r3, r7, #7
 801083a:	781b      	ldrb	r3, [r3, #0]
 801083c:	0018      	movs	r0, r3
 801083e:	f004 f86d 	bl	801491c <LoRaMacClassBSwitchClass>
 8010842:	0003      	movs	r3, r0
 8010844:	7023      	strb	r3, [r4, #0]
                if( status == LORAMAC_STATUS_OK )
 8010846:	197b      	adds	r3, r7, r5
 8010848:	781b      	ldrb	r3, [r3, #0]
 801084a:	2b00      	cmp	r3, #0
 801084c:	d106      	bne.n	801085c <SwitchClass+0x84>
                {
                    MacCtx.NvmCtx->DeviceClass = deviceClass;
 801084e:	4b6a      	ldr	r3, [pc, #424]	; (80109f8 <SwitchClass+0x220>)
 8010850:	4a6a      	ldr	r2, [pc, #424]	; (80109fc <SwitchClass+0x224>)
 8010852:	589b      	ldr	r3, [r3, r2]
 8010854:	1dfa      	adds	r2, r7, #7
 8010856:	217c      	movs	r1, #124	; 0x7c
 8010858:	7812      	ldrb	r2, [r2, #0]
 801085a:	545a      	strb	r2, [r3, r1]
                }
            }

            if( deviceClass == CLASS_C )
 801085c:	1dfb      	adds	r3, r7, #7
 801085e:	781b      	ldrb	r3, [r3, #0]
 8010860:	2b02      	cmp	r3, #2
 8010862:	d000      	beq.n	8010866 <SwitchClass+0x8e>
 8010864:	e0bc      	b.n	80109e0 <SwitchClass+0x208>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 8010866:	4b64      	ldr	r3, [pc, #400]	; (80109f8 <SwitchClass+0x220>)
 8010868:	4a64      	ldr	r2, [pc, #400]	; (80109fc <SwitchClass+0x224>)
 801086a:	589b      	ldr	r3, [r3, r2]
 801086c:	1dfa      	adds	r2, r7, #7
 801086e:	217c      	movs	r1, #124	; 0x7c
 8010870:	7812      	ldrb	r2, [r2, #0]
 8010872:	545a      	strb	r2, [r3, r1]

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8010874:	4860      	ldr	r0, [pc, #384]	; (80109f8 <SwitchClass+0x220>)
 8010876:	23f8      	movs	r3, #248	; 0xf8
 8010878:	009b      	lsls	r3, r3, #2
 801087a:	495f      	ldr	r1, [pc, #380]	; (80109f8 <SwitchClass+0x220>)
 801087c:	22f3      	movs	r2, #243	; 0xf3
 801087e:	0092      	lsls	r2, r2, #2
 8010880:	18c3      	adds	r3, r0, r3
 8010882:	188a      	adds	r2, r1, r2
 8010884:	ca13      	ldmia	r2!, {r0, r1, r4}
 8010886:	c313      	stmia	r3!, {r0, r1, r4}
 8010888:	ca03      	ldmia	r2!, {r0, r1}
 801088a:	c303      	stmia	r3!, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801088c:	4b5a      	ldr	r3, [pc, #360]	; (80109f8 <SwitchClass+0x220>)
 801088e:	4a5c      	ldr	r2, [pc, #368]	; (8010a00 <SwitchClass+0x228>)
 8010890:	2102      	movs	r1, #2
 8010892:	5499      	strb	r1, [r3, r2]

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8010894:	230e      	movs	r3, #14
 8010896:	18fb      	adds	r3, r7, r3
 8010898:	2200      	movs	r2, #0
 801089a:	701a      	strb	r2, [r3, #0]
 801089c:	e064      	b.n	8010968 <SwitchClass+0x190>
                {
                    if( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true )
 801089e:	4b56      	ldr	r3, [pc, #344]	; (80109f8 <SwitchClass+0x220>)
 80108a0:	4a56      	ldr	r2, [pc, #344]	; (80109fc <SwitchClass+0x224>)
 80108a2:	589a      	ldr	r2, [r3, r2]
 80108a4:	240e      	movs	r4, #14
 80108a6:	193b      	adds	r3, r7, r4
 80108a8:	781b      	ldrb	r3, [r3, #0]
 80108aa:	b25b      	sxtb	r3, r3
 80108ac:	2152      	movs	r1, #82	; 0x52
 80108ae:	202c      	movs	r0, #44	; 0x2c
 80108b0:	4343      	muls	r3, r0
 80108b2:	18d3      	adds	r3, r2, r3
 80108b4:	185b      	adds	r3, r3, r1
 80108b6:	781b      	ldrb	r3, [r3, #0]
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d04c      	beq.n	8010956 <SwitchClass+0x17e>
                    {
                        MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 80108bc:	4b4e      	ldr	r3, [pc, #312]	; (80109f8 <SwitchClass+0x220>)
 80108be:	4a4f      	ldr	r2, [pc, #316]	; (80109fc <SwitchClass+0x224>)
 80108c0:	5899      	ldr	r1, [r3, r2]
 80108c2:	193b      	adds	r3, r7, r4
 80108c4:	781b      	ldrb	r3, [r3, #0]
 80108c6:	b25b      	sxtb	r3, r3
 80108c8:	4a4b      	ldr	r2, [pc, #300]	; (80109f8 <SwitchClass+0x220>)
 80108ca:	484c      	ldr	r0, [pc, #304]	; (80109fc <SwitchClass+0x224>)
 80108cc:	5812      	ldr	r2, [r2, r0]
 80108ce:	202c      	movs	r0, #44	; 0x2c
 80108d0:	4343      	muls	r3, r0
 80108d2:	18cb      	adds	r3, r1, r3
 80108d4:	3368      	adds	r3, #104	; 0x68
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	21b0      	movs	r1, #176	; 0xb0
 80108da:	5053      	str	r3, [r2, r1]
                        MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 80108dc:	4b46      	ldr	r3, [pc, #280]	; (80109f8 <SwitchClass+0x220>)
 80108de:	4a47      	ldr	r2, [pc, #284]	; (80109fc <SwitchClass+0x224>)
 80108e0:	589a      	ldr	r2, [r3, r2]
 80108e2:	193b      	adds	r3, r7, r4
 80108e4:	781b      	ldrb	r3, [r3, #0]
 80108e6:	b25b      	sxtb	r3, r3
 80108e8:	216c      	movs	r1, #108	; 0x6c
 80108ea:	202c      	movs	r0, #44	; 0x2c
 80108ec:	4343      	muls	r3, r0
 80108ee:	18d3      	adds	r3, r2, r3
 80108f0:	185b      	adds	r3, r3, r1
 80108f2:	2100      	movs	r1, #0
 80108f4:	5659      	ldrsb	r1, [r3, r1]
 80108f6:	4b40      	ldr	r3, [pc, #256]	; (80109f8 <SwitchClass+0x220>)
 80108f8:	4a40      	ldr	r2, [pc, #256]	; (80109fc <SwitchClass+0x224>)
 80108fa:	589b      	ldr	r3, [r3, r2]
 80108fc:	b2c9      	uxtb	r1, r1
 80108fe:	22b4      	movs	r2, #180	; 0xb4
 8010900:	5499      	strb	r1, [r3, r2]

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8010902:	4b3d      	ldr	r3, [pc, #244]	; (80109f8 <SwitchClass+0x220>)
 8010904:	4a3f      	ldr	r2, [pc, #252]	; (8010a04 <SwitchClass+0x22c>)
 8010906:	5c99      	ldrb	r1, [r3, r2]
 8010908:	4a3b      	ldr	r2, [pc, #236]	; (80109f8 <SwitchClass+0x220>)
 801090a:	23f8      	movs	r3, #248	; 0xf8
 801090c:	009b      	lsls	r3, r3, #2
 801090e:	54d1      	strb	r1, [r2, r3]
                        MacCtx.RxWindowCConfig.Frequency = MacCtx.NvmCtx->MacParams.RxCChannel.Frequency;
 8010910:	4b39      	ldr	r3, [pc, #228]	; (80109f8 <SwitchClass+0x220>)
 8010912:	4a3a      	ldr	r2, [pc, #232]	; (80109fc <SwitchClass+0x224>)
 8010914:	589b      	ldr	r3, [r3, r2]
 8010916:	22b0      	movs	r2, #176	; 0xb0
 8010918:	5899      	ldr	r1, [r3, r2]
 801091a:	4a37      	ldr	r2, [pc, #220]	; (80109f8 <SwitchClass+0x220>)
 801091c:	23f9      	movs	r3, #249	; 0xf9
 801091e:	009b      	lsls	r3, r3, #2
 8010920:	50d1      	str	r1, [r2, r3]
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8010922:	4b35      	ldr	r3, [pc, #212]	; (80109f8 <SwitchClass+0x220>)
 8010924:	4a35      	ldr	r2, [pc, #212]	; (80109fc <SwitchClass+0x224>)
 8010926:	589b      	ldr	r3, [r3, r2]
 8010928:	22b9      	movs	r2, #185	; 0xb9
 801092a:	5c99      	ldrb	r1, [r3, r2]
 801092c:	4a32      	ldr	r2, [pc, #200]	; (80109f8 <SwitchClass+0x220>)
 801092e:	23fc      	movs	r3, #252	; 0xfc
 8010930:	009b      	lsls	r3, r3, #2
 8010932:	54d1      	strb	r1, [r2, r3]
                        MacCtx.RxWindowCConfig.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8010934:	4b30      	ldr	r3, [pc, #192]	; (80109f8 <SwitchClass+0x220>)
 8010936:	4a31      	ldr	r2, [pc, #196]	; (80109fc <SwitchClass+0x224>)
 8010938:	589b      	ldr	r3, [r3, r2]
 801093a:	22ca      	movs	r2, #202	; 0xca
 801093c:	5c99      	ldrb	r1, [r3, r2]
 801093e:	4b2e      	ldr	r3, [pc, #184]	; (80109f8 <SwitchClass+0x220>)
 8010940:	4a31      	ldr	r2, [pc, #196]	; (8010a08 <SwitchClass+0x230>)
 8010942:	5499      	strb	r1, [r3, r2]
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8010944:	4b2c      	ldr	r3, [pc, #176]	; (80109f8 <SwitchClass+0x220>)
 8010946:	4a2e      	ldr	r2, [pc, #184]	; (8010a00 <SwitchClass+0x228>)
 8010948:	2103      	movs	r1, #3
 801094a:	5499      	strb	r1, [r3, r2]
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 801094c:	4b2a      	ldr	r3, [pc, #168]	; (80109f8 <SwitchClass+0x220>)
 801094e:	4a2f      	ldr	r2, [pc, #188]	; (8010a0c <SwitchClass+0x234>)
 8010950:	2101      	movs	r1, #1
 8010952:	5499      	strb	r1, [r3, r2]
                        break;
 8010954:	e00e      	b.n	8010974 <SwitchClass+0x19c>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8010956:	210e      	movs	r1, #14
 8010958:	187b      	adds	r3, r7, r1
 801095a:	781b      	ldrb	r3, [r3, #0]
 801095c:	b25b      	sxtb	r3, r3
 801095e:	b2db      	uxtb	r3, r3
 8010960:	3301      	adds	r3, #1
 8010962:	b2da      	uxtb	r2, r3
 8010964:	187b      	adds	r3, r7, r1
 8010966:	701a      	strb	r2, [r3, #0]
 8010968:	230e      	movs	r3, #14
 801096a:	18fb      	adds	r3, r7, r3
 801096c:	781b      	ldrb	r3, [r3, #0]
 801096e:	b25b      	sxtb	r3, r3
 8010970:	2b00      	cmp	r3, #0
 8010972:	dd94      	ble.n	801089e <SwitchClass+0xc6>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 8010974:	4b20      	ldr	r3, [pc, #128]	; (80109f8 <SwitchClass+0x220>)
 8010976:	4a26      	ldr	r2, [pc, #152]	; (8010a10 <SwitchClass+0x238>)
 8010978:	2100      	movs	r1, #0
 801097a:	5499      	strb	r1, [r3, r2]
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 801097c:	4b25      	ldr	r3, [pc, #148]	; (8010a14 <SwitchClass+0x23c>)
 801097e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010980:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 8010982:	f001 fc01 	bl	8012188 <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 8010986:	230f      	movs	r3, #15
 8010988:	18fb      	adds	r3, r7, r3
 801098a:	2200      	movs	r2, #0
 801098c:	701a      	strb	r2, [r3, #0]
            }
            break;
 801098e:	e027      	b.n	80109e0 <SwitchClass+0x208>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 8010990:	250f      	movs	r5, #15
 8010992:	197c      	adds	r4, r7, r5
 8010994:	1dfb      	adds	r3, r7, #7
 8010996:	781b      	ldrb	r3, [r3, #0]
 8010998:	0018      	movs	r0, r3
 801099a:	f003 ffbf 	bl	801491c <LoRaMacClassBSwitchClass>
 801099e:	0003      	movs	r3, r0
 80109a0:	7023      	strb	r3, [r4, #0]
            if( status == LORAMAC_STATUS_OK )
 80109a2:	197b      	adds	r3, r7, r5
 80109a4:	781b      	ldrb	r3, [r3, #0]
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d11c      	bne.n	80109e4 <SwitchClass+0x20c>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 80109aa:	4b13      	ldr	r3, [pc, #76]	; (80109f8 <SwitchClass+0x220>)
 80109ac:	4a13      	ldr	r2, [pc, #76]	; (80109fc <SwitchClass+0x224>)
 80109ae:	589b      	ldr	r3, [r3, r2]
 80109b0:	1dfa      	adds	r2, r7, #7
 80109b2:	217c      	movs	r1, #124	; 0x7c
 80109b4:	7812      	ldrb	r2, [r2, #0]
 80109b6:	545a      	strb	r2, [r3, r1]
            }
            break;
 80109b8:	e014      	b.n	80109e4 <SwitchClass+0x20c>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 80109ba:	1dfb      	adds	r3, r7, #7
 80109bc:	781b      	ldrb	r3, [r3, #0]
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d112      	bne.n	80109e8 <SwitchClass+0x210>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 80109c2:	4b0d      	ldr	r3, [pc, #52]	; (80109f8 <SwitchClass+0x220>)
 80109c4:	4a0d      	ldr	r2, [pc, #52]	; (80109fc <SwitchClass+0x224>)
 80109c6:	589b      	ldr	r3, [r3, r2]
 80109c8:	1dfa      	adds	r2, r7, #7
 80109ca:	217c      	movs	r1, #124	; 0x7c
 80109cc:	7812      	ldrb	r2, [r2, #0]
 80109ce:	545a      	strb	r2, [r3, r1]

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 80109d0:	4b10      	ldr	r3, [pc, #64]	; (8010a14 <SwitchClass+0x23c>)
 80109d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109d4:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 80109d6:	230f      	movs	r3, #15
 80109d8:	18fb      	adds	r3, r7, r3
 80109da:	2200      	movs	r2, #0
 80109dc:	701a      	strb	r2, [r3, #0]
            }
            break;
 80109de:	e003      	b.n	80109e8 <SwitchClass+0x210>
            break;
 80109e0:	46c0      	nop			; (mov r8, r8)
 80109e2:	e002      	b.n	80109ea <SwitchClass+0x212>
            break;
 80109e4:	46c0      	nop			; (mov r8, r8)
 80109e6:	e000      	b.n	80109ea <SwitchClass+0x212>
            break;
 80109e8:	46c0      	nop			; (mov r8, r8)
        }
    }

    return status;
 80109ea:	230f      	movs	r3, #15
 80109ec:	18fb      	adds	r3, r7, r3
 80109ee:	781b      	ldrb	r3, [r3, #0]
}
 80109f0:	0018      	movs	r0, r3
 80109f2:	46bd      	mov	sp, r7
 80109f4:	b004      	add	sp, #16
 80109f6:	bdb0      	pop	{r4, r5, r7, pc}
 80109f8:	200005b8 	.word	0x200005b8
 80109fc:	00000484 	.word	0x00000484
 8010a00:	000003f3 	.word	0x000003f3
 8010a04:	00000415 	.word	0x00000415
 8010a08:	000003f1 	.word	0x000003f1
 8010a0c:	000003f2 	.word	0x000003f2
 8010a10:	00000414 	.word	0x00000414
 8010a14:	0801fd54 	.word	0x0801fd54

08010a18 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 8010a18:	b580      	push	{r7, lr}
 8010a1a:	b086      	sub	sp, #24
 8010a1c:	af00      	add	r7, sp, #0
 8010a1e:	0002      	movs	r2, r0
 8010a20:	1dfb      	adds	r3, r7, #7
 8010a22:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8010a24:	4b17      	ldr	r3, [pc, #92]	; (8010a84 <GetMaxAppPayloadWithoutFOptsLength+0x6c>)
 8010a26:	4a18      	ldr	r2, [pc, #96]	; (8010a88 <GetMaxAppPayloadWithoutFOptsLength+0x70>)
 8010a28:	589b      	ldr	r3, [r3, r2]
 8010a2a:	22b8      	movs	r2, #184	; 0xb8
 8010a2c:	5c9a      	ldrb	r2, [r3, r2]
 8010a2e:	2110      	movs	r1, #16
 8010a30:	187b      	adds	r3, r7, r1
 8010a32:	709a      	strb	r2, [r3, #2]
    getPhy.Datarate = datarate;
 8010a34:	187b      	adds	r3, r7, r1
 8010a36:	1dfa      	adds	r2, r7, #7
 8010a38:	7812      	ldrb	r2, [r2, #0]
 8010a3a:	705a      	strb	r2, [r3, #1]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8010a3c:	187b      	adds	r3, r7, r1
 8010a3e:	220d      	movs	r2, #13
 8010a40:	701a      	strb	r2, [r3, #0]

    // Get the maximum payload length
    if( MacCtx.NvmCtx->RepeaterSupport == true )
 8010a42:	4b10      	ldr	r3, [pc, #64]	; (8010a84 <GetMaxAppPayloadWithoutFOptsLength+0x6c>)
 8010a44:	4a10      	ldr	r2, [pc, #64]	; (8010a88 <GetMaxAppPayloadWithoutFOptsLength+0x70>)
 8010a46:	589b      	ldr	r3, [r3, r2]
 8010a48:	22ca      	movs	r2, #202	; 0xca
 8010a4a:	5c9b      	ldrb	r3, [r3, r2]
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d002      	beq.n	8010a56 <GetMaxAppPayloadWithoutFOptsLength+0x3e>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8010a50:	187b      	adds	r3, r7, r1
 8010a52:	220e      	movs	r2, #14
 8010a54:	701a      	strb	r2, [r3, #0]
    }

    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010a56:	4b0b      	ldr	r3, [pc, #44]	; (8010a84 <GetMaxAppPayloadWithoutFOptsLength+0x6c>)
 8010a58:	4a0b      	ldr	r2, [pc, #44]	; (8010a88 <GetMaxAppPayloadWithoutFOptsLength+0x70>)
 8010a5a:	589b      	ldr	r3, [r3, r2]
 8010a5c:	781b      	ldrb	r3, [r3, #0]
 8010a5e:	2210      	movs	r2, #16
 8010a60:	18ba      	adds	r2, r7, r2
 8010a62:	0011      	movs	r1, r2
 8010a64:	0018      	movs	r0, r3
 8010a66:	f006 f8c8 	bl	8016bfa <RegionGetPhyParam>
 8010a6a:	0003      	movs	r3, r0
 8010a6c:	001a      	movs	r2, r3
 8010a6e:	210c      	movs	r1, #12
 8010a70:	187b      	adds	r3, r7, r1
 8010a72:	601a      	str	r2, [r3, #0]

    return phyParam.Value;
 8010a74:	187b      	adds	r3, r7, r1
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	b2db      	uxtb	r3, r3
}
 8010a7a:	0018      	movs	r0, r3
 8010a7c:	46bd      	mov	sp, r7
 8010a7e:	b006      	add	sp, #24
 8010a80:	bd80      	pop	{r7, pc}
 8010a82:	46c0      	nop			; (mov r8, r8)
 8010a84:	200005b8 	.word	0x200005b8
 8010a88:	00000484 	.word	0x00000484

08010a8c <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 8010a8c:	b5b0      	push	{r4, r5, r7, lr}
 8010a8e:	b084      	sub	sp, #16
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	0004      	movs	r4, r0
 8010a94:	0008      	movs	r0, r1
 8010a96:	0011      	movs	r1, r2
 8010a98:	1dfb      	adds	r3, r7, #7
 8010a9a:	1c22      	adds	r2, r4, #0
 8010a9c:	701a      	strb	r2, [r3, #0]
 8010a9e:	1dbb      	adds	r3, r7, #6
 8010aa0:	1c02      	adds	r2, r0, #0
 8010aa2:	701a      	strb	r2, [r3, #0]
 8010aa4:	1d7b      	adds	r3, r7, #5
 8010aa6:	1c0a      	adds	r2, r1, #0
 8010aa8:	701a      	strb	r2, [r3, #0]
    uint16_t maxN = 0;
 8010aaa:	250e      	movs	r5, #14
 8010aac:	197b      	adds	r3, r7, r5
 8010aae:	2200      	movs	r2, #0
 8010ab0:	801a      	strh	r2, [r3, #0]
    uint16_t payloadSize = 0;
 8010ab2:	240c      	movs	r4, #12
 8010ab4:	193b      	adds	r3, r7, r4
 8010ab6:	2200      	movs	r2, #0
 8010ab8:	801a      	strh	r2, [r3, #0]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8010aba:	1dbb      	adds	r3, r7, #6
 8010abc:	781b      	ldrb	r3, [r3, #0]
 8010abe:	b25b      	sxtb	r3, r3
 8010ac0:	0018      	movs	r0, r3
 8010ac2:	f7ff ffa9 	bl	8010a18 <GetMaxAppPayloadWithoutFOptsLength>
 8010ac6:	0003      	movs	r3, r0
 8010ac8:	001a      	movs	r2, r3
 8010aca:	0028      	movs	r0, r5
 8010acc:	183b      	adds	r3, r7, r0
 8010ace:	801a      	strh	r2, [r3, #0]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 8010ad0:	1dfb      	adds	r3, r7, #7
 8010ad2:	781b      	ldrb	r3, [r3, #0]
 8010ad4:	b299      	uxth	r1, r3
 8010ad6:	1d7b      	adds	r3, r7, #5
 8010ad8:	781b      	ldrb	r3, [r3, #0]
 8010ada:	b29a      	uxth	r2, r3
 8010adc:	193b      	adds	r3, r7, r4
 8010ade:	188a      	adds	r2, r1, r2
 8010ae0:	801a      	strh	r2, [r3, #0]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8010ae2:	193a      	adds	r2, r7, r4
 8010ae4:	183b      	adds	r3, r7, r0
 8010ae6:	8812      	ldrh	r2, [r2, #0]
 8010ae8:	881b      	ldrh	r3, [r3, #0]
 8010aea:	429a      	cmp	r2, r3
 8010aec:	d805      	bhi.n	8010afa <ValidatePayloadLength+0x6e>
 8010aee:	193b      	adds	r3, r7, r4
 8010af0:	881b      	ldrh	r3, [r3, #0]
 8010af2:	2bff      	cmp	r3, #255	; 0xff
 8010af4:	d801      	bhi.n	8010afa <ValidatePayloadLength+0x6e>
    {
        return true;
 8010af6:	2301      	movs	r3, #1
 8010af8:	e000      	b.n	8010afc <ValidatePayloadLength+0x70>
    }
    return false;
 8010afa:	2300      	movs	r3, #0
}
 8010afc:	0018      	movs	r0, r3
 8010afe:	46bd      	mov	sp, r7
 8010b00:	b004      	add	sp, #16
 8010b02:	bdb0      	pop	{r4, r5, r7, pc}

08010b04 <SetMlmeScheduleUplinkIndication>:

static void SetMlmeScheduleUplinkIndication( void )
{
 8010b04:	b580      	push	{r7, lr}
 8010b06:	af00      	add	r7, sp, #0
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8010b08:	4b04      	ldr	r3, [pc, #16]	; (8010b1c <SetMlmeScheduleUplinkIndication+0x18>)
 8010b0a:	4a05      	ldr	r2, [pc, #20]	; (8010b20 <SetMlmeScheduleUplinkIndication+0x1c>)
 8010b0c:	5c99      	ldrb	r1, [r3, r2]
 8010b0e:	2010      	movs	r0, #16
 8010b10:	4301      	orrs	r1, r0
 8010b12:	5499      	strb	r1, [r3, r2]
}
 8010b14:	46c0      	nop			; (mov r8, r8)
 8010b16:	46bd      	mov	sp, r7
 8010b18:	bd80      	pop	{r7, pc}
 8010b1a:	46c0      	nop			; (mov r8, r8)
 8010b1c:	200005b8 	.word	0x200005b8
 8010b20:	00000481 	.word	0x00000481

08010b24 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 8010b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b26:	b0a5      	sub	sp, #148	; 0x94
 8010b28:	af02      	add	r7, sp, #8
 8010b2a:	6078      	str	r0, [r7, #4]
 8010b2c:	000c      	movs	r4, r1
 8010b2e:	0010      	movs	r0, r2
 8010b30:	0019      	movs	r1, r3
 8010b32:	1cfb      	adds	r3, r7, #3
 8010b34:	1c22      	adds	r2, r4, #0
 8010b36:	701a      	strb	r2, [r3, #0]
 8010b38:	1cbb      	adds	r3, r7, #2
 8010b3a:	1c02      	adds	r2, r0, #0
 8010b3c:	701a      	strb	r2, [r3, #0]
 8010b3e:	1c7b      	adds	r3, r7, #1
 8010b40:	1c0a      	adds	r2, r1, #0
 8010b42:	701a      	strb	r2, [r3, #0]
    uint8_t status = 0;
 8010b44:	236b      	movs	r3, #107	; 0x6b
 8010b46:	18fb      	adds	r3, r7, r3
 8010b48:	2200      	movs	r2, #0
 8010b4a:	701a      	strb	r2, [r3, #0]
    bool adrBlockFound = false;
 8010b4c:	2387      	movs	r3, #135	; 0x87
 8010b4e:	18fb      	adds	r3, r7, r3
 8010b50:	2200      	movs	r2, #0
 8010b52:	701a      	strb	r2, [r3, #0]
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8010b54:	2368      	movs	r3, #104	; 0x68
 8010b56:	18fb      	adds	r3, r7, r3
 8010b58:	2200      	movs	r2, #0
 8010b5a:	801a      	strh	r2, [r3, #0]

    while( macIndex < commandsSize )
 8010b5c:	f000 fd58 	bl	8011610 <ProcessMacCommands+0xaec>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8010b60:	1cfb      	adds	r3, r7, #3
 8010b62:	781b      	ldrb	r3, [r3, #0]
 8010b64:	687a      	ldr	r2, [r7, #4]
 8010b66:	18d3      	adds	r3, r2, r3
 8010b68:	781b      	ldrb	r3, [r3, #0]
 8010b6a:	0018      	movs	r0, r3
 8010b6c:	f004 fa06 	bl	8014f7c <LoRaMacCommandsGetCmdSize>
 8010b70:	0003      	movs	r3, r0
 8010b72:	001a      	movs	r2, r3
 8010b74:	1cfb      	adds	r3, r7, #3
 8010b76:	781b      	ldrb	r3, [r3, #0]
 8010b78:	18d2      	adds	r2, r2, r3
 8010b7a:	1cbb      	adds	r3, r7, #2
 8010b7c:	781b      	ldrb	r3, [r3, #0]
 8010b7e:	429a      	cmp	r2, r3
 8010b80:	dd01      	ble.n	8010b86 <ProcessMacCommands+0x62>
 8010b82:	f000 fd4e 	bl	8011622 <ProcessMacCommands+0xafe>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 8010b86:	1cfb      	adds	r3, r7, #3
 8010b88:	781b      	ldrb	r3, [r3, #0]
 8010b8a:	1cfa      	adds	r2, r7, #3
 8010b8c:	1c59      	adds	r1, r3, #1
 8010b8e:	7011      	strb	r1, [r2, #0]
 8010b90:	001a      	movs	r2, r3
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	189b      	adds	r3, r3, r2
 8010b96:	781b      	ldrb	r3, [r3, #0]
 8010b98:	2b13      	cmp	r3, #19
 8010b9a:	d901      	bls.n	8010ba0 <ProcessMacCommands+0x7c>
 8010b9c:	f000 fd43 	bl	8011626 <ProcessMacCommands+0xb02>
 8010ba0:	009a      	lsls	r2, r3, #2
 8010ba2:	4bee      	ldr	r3, [pc, #952]	; (8010f5c <ProcessMacCommands+0x438>)
 8010ba4:	18d3      	adds	r3, r2, r3
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	469f      	mov	pc, r3
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8010baa:	2004      	movs	r0, #4
 8010bac:	f004 fc08 	bl	80153c0 <LoRaMacConfirmQueueIsCmdActive>
 8010bb0:	1e03      	subs	r3, r0, #0
 8010bb2:	d101      	bne.n	8010bb8 <ProcessMacCommands+0x94>
 8010bb4:	f000 fd2c 	bl	8011610 <ProcessMacCommands+0xaec>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8010bb8:	2104      	movs	r1, #4
 8010bba:	2000      	movs	r0, #0
 8010bbc:	f004 fb64 	bl	8015288 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8010bc0:	1cfb      	adds	r3, r7, #3
 8010bc2:	781b      	ldrb	r3, [r3, #0]
 8010bc4:	1cfa      	adds	r2, r7, #3
 8010bc6:	1c59      	adds	r1, r3, #1
 8010bc8:	7011      	strb	r1, [r2, #0]
 8010bca:	001a      	movs	r2, r3
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	189b      	adds	r3, r3, r2
 8010bd0:	7819      	ldrb	r1, [r3, #0]
 8010bd2:	4ae3      	ldr	r2, [pc, #908]	; (8010f60 <ProcessMacCommands+0x43c>)
 8010bd4:	238b      	movs	r3, #139	; 0x8b
 8010bd6:	00db      	lsls	r3, r3, #3
 8010bd8:	54d1      	strb	r1, [r2, r3]
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8010bda:	1cfb      	adds	r3, r7, #3
 8010bdc:	781b      	ldrb	r3, [r3, #0]
 8010bde:	1cfa      	adds	r2, r7, #3
 8010be0:	1c59      	adds	r1, r3, #1
 8010be2:	7011      	strb	r1, [r2, #0]
 8010be4:	001a      	movs	r2, r3
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	189b      	adds	r3, r3, r2
 8010bea:	7819      	ldrb	r1, [r3, #0]
 8010bec:	4bdc      	ldr	r3, [pc, #880]	; (8010f60 <ProcessMacCommands+0x43c>)
 8010bee:	4add      	ldr	r2, [pc, #884]	; (8010f64 <ProcessMacCommands+0x440>)
 8010bf0:	5499      	strb	r1, [r3, r2]
                }
                break;
 8010bf2:	f000 fd0d 	bl	8011610 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 8010bf6:	2657      	movs	r6, #87	; 0x57
 8010bf8:	19bb      	adds	r3, r7, r6
 8010bfa:	2200      	movs	r2, #0
 8010bfc:	701a      	strb	r2, [r3, #0]
                int8_t linkAdrTxPower = TX_POWER_0;
 8010bfe:	2456      	movs	r4, #86	; 0x56
 8010c00:	193b      	adds	r3, r7, r4
 8010c02:	2200      	movs	r2, #0
 8010c04:	701a      	strb	r2, [r3, #0]
                uint8_t linkAdrNbRep = 0;
 8010c06:	2555      	movs	r5, #85	; 0x55
 8010c08:	197b      	adds	r3, r7, r5
 8010c0a:	2200      	movs	r2, #0
 8010c0c:	701a      	strb	r2, [r3, #0]
                uint8_t linkAdrNbBytesParsed = 0;
 8010c0e:	2354      	movs	r3, #84	; 0x54
 8010c10:	18fb      	adds	r3, r7, r3
 8010c12:	2200      	movs	r2, #0
 8010c14:	701a      	strb	r2, [r3, #0]

                if( adrBlockFound == false )
 8010c16:	2187      	movs	r1, #135	; 0x87
 8010c18:	187b      	adds	r3, r7, r1
 8010c1a:	781b      	ldrb	r3, [r3, #0]
 8010c1c:	2201      	movs	r2, #1
 8010c1e:	4053      	eors	r3, r2
 8010c20:	b2db      	uxtb	r3, r3
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d100      	bne.n	8010c28 <ProcessMacCommands+0x104>
 8010c26:	e09d      	b.n	8010d64 <ProcessMacCommands+0x240>
                {
                    adrBlockFound = true;
 8010c28:	187b      	adds	r3, r7, r1
 8010c2a:	2201      	movs	r2, #1
 8010c2c:	701a      	strb	r2, [r3, #0]

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 8010c2e:	1cfb      	adds	r3, r7, #3
 8010c30:	781b      	ldrb	r3, [r3, #0]
 8010c32:	3b01      	subs	r3, #1
 8010c34:	687a      	ldr	r2, [r7, #4]
 8010c36:	18d2      	adds	r2, r2, r3
 8010c38:	2158      	movs	r1, #88	; 0x58
 8010c3a:	187b      	adds	r3, r7, r1
 8010c3c:	605a      	str	r2, [r3, #4]
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8010c3e:	1cba      	adds	r2, r7, #2
 8010c40:	1cfb      	adds	r3, r7, #3
 8010c42:	7812      	ldrb	r2, [r2, #0]
 8010c44:	781b      	ldrb	r3, [r3, #0]
 8010c46:	1ad3      	subs	r3, r2, r3
 8010c48:	b2db      	uxtb	r3, r3
 8010c4a:	3301      	adds	r3, #1
 8010c4c:	b2da      	uxtb	r2, r3
 8010c4e:	000d      	movs	r5, r1
 8010c50:	197b      	adds	r3, r7, r5
 8010c52:	721a      	strb	r2, [r3, #8]
                    linkAdrReq.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 8010c54:	4bc2      	ldr	r3, [pc, #776]	; (8010f60 <ProcessMacCommands+0x43c>)
 8010c56:	4ac4      	ldr	r2, [pc, #784]	; (8010f68 <ProcessMacCommands+0x444>)
 8010c58:	589b      	ldr	r3, [r3, r2]
 8010c5a:	227e      	movs	r2, #126	; 0x7e
 8010c5c:	5c9a      	ldrb	r2, [r3, r2]
 8010c5e:	197b      	adds	r3, r7, r5
 8010c60:	729a      	strb	r2, [r3, #10]
                    linkAdrReq.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8010c62:	4bbf      	ldr	r3, [pc, #764]	; (8010f60 <ProcessMacCommands+0x43c>)
 8010c64:	4ac0      	ldr	r2, [pc, #768]	; (8010f68 <ProcessMacCommands+0x444>)
 8010c66:	589b      	ldr	r3, [r3, r2]
 8010c68:	22b8      	movs	r2, #184	; 0xb8
 8010c6a:	5c9a      	ldrb	r2, [r3, r2]
 8010c6c:	197b      	adds	r3, r7, r5
 8010c6e:	725a      	strb	r2, [r3, #9]
                    linkAdrReq.CurrentDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8010c70:	4bbb      	ldr	r3, [pc, #748]	; (8010f60 <ProcessMacCommands+0x43c>)
 8010c72:	4abd      	ldr	r2, [pc, #756]	; (8010f68 <ProcessMacCommands+0x444>)
 8010c74:	589b      	ldr	r3, [r3, r2]
 8010c76:	2285      	movs	r2, #133	; 0x85
 8010c78:	569a      	ldrsb	r2, [r3, r2]
 8010c7a:	197b      	adds	r3, r7, r5
 8010c7c:	72da      	strb	r2, [r3, #11]
                    linkAdrReq.CurrentTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8010c7e:	4bb8      	ldr	r3, [pc, #736]	; (8010f60 <ProcessMacCommands+0x43c>)
 8010c80:	4ab9      	ldr	r2, [pc, #740]	; (8010f68 <ProcessMacCommands+0x444>)
 8010c82:	589b      	ldr	r3, [r3, r2]
 8010c84:	2284      	movs	r2, #132	; 0x84
 8010c86:	569a      	ldrsb	r2, [r3, r2]
 8010c88:	197b      	adds	r3, r7, r5
 8010c8a:	731a      	strb	r2, [r3, #12]
                    linkAdrReq.CurrentNbRep = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 8010c8c:	4bb4      	ldr	r3, [pc, #720]	; (8010f60 <ProcessMacCommands+0x43c>)
 8010c8e:	4ab6      	ldr	r2, [pc, #728]	; (8010f68 <ProcessMacCommands+0x444>)
 8010c90:	589b      	ldr	r3, [r3, r2]
 8010c92:	22a4      	movs	r2, #164	; 0xa4
 8010c94:	5c9a      	ldrb	r2, [r3, r2]
 8010c96:	197b      	adds	r3, r7, r5
 8010c98:	735a      	strb	r2, [r3, #13]
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 8010c9a:	4bb1      	ldr	r3, [pc, #708]	; (8010f60 <ProcessMacCommands+0x43c>)
 8010c9c:	4ab2      	ldr	r2, [pc, #712]	; (8010f68 <ProcessMacCommands+0x444>)
 8010c9e:	5899      	ldr	r1, [r3, r2]
 8010ca0:	197b      	adds	r3, r7, r5
 8010ca2:	22b0      	movs	r2, #176	; 0xb0
 8010ca4:	0052      	lsls	r2, r2, #1
 8010ca6:	588a      	ldr	r2, [r1, r2]
 8010ca8:	601a      	str	r2, [r3, #0]

                    // Process the ADR requests
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 8010caa:	4bad      	ldr	r3, [pc, #692]	; (8010f60 <ProcessMacCommands+0x43c>)
 8010cac:	4aae      	ldr	r2, [pc, #696]	; (8010f68 <ProcessMacCommands+0x444>)
 8010cae:	589b      	ldr	r3, [r3, r2]
 8010cb0:	7818      	ldrb	r0, [r3, #0]
 8010cb2:	193c      	adds	r4, r7, r4
 8010cb4:	19ba      	adds	r2, r7, r6
 8010cb6:	1979      	adds	r1, r7, r5
 8010cb8:	2354      	movs	r3, #84	; 0x54
 8010cba:	18fb      	adds	r3, r7, r3
 8010cbc:	9301      	str	r3, [sp, #4]
 8010cbe:	2555      	movs	r5, #85	; 0x55
 8010cc0:	197b      	adds	r3, r7, r5
 8010cc2:	9300      	str	r3, [sp, #0]
 8010cc4:	0023      	movs	r3, r4
 8010cc6:	f006 f8a0 	bl	8016e0a <RegionLinkAdrReq>
 8010cca:	0003      	movs	r3, r0
 8010ccc:	001a      	movs	r2, r3
 8010cce:	216b      	movs	r1, #107	; 0x6b
 8010cd0:	187b      	adds	r3, r7, r1
 8010cd2:	701a      	strb	r2, [r3, #0]
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 8010cd4:	187b      	adds	r3, r7, r1
 8010cd6:	781b      	ldrb	r3, [r3, #0]
 8010cd8:	001a      	movs	r2, r3
 8010cda:	2307      	movs	r3, #7
 8010cdc:	4013      	ands	r3, r2
 8010cde:	2b07      	cmp	r3, #7
 8010ce0:	d117      	bne.n	8010d12 <ProcessMacCommands+0x1ee>
                    {
                        MacCtx.NvmCtx->MacParams.ChannelsDatarate = linkAdrDatarate;
 8010ce2:	4b9f      	ldr	r3, [pc, #636]	; (8010f60 <ProcessMacCommands+0x43c>)
 8010ce4:	4aa0      	ldr	r2, [pc, #640]	; (8010f68 <ProcessMacCommands+0x444>)
 8010ce6:	589b      	ldr	r3, [r3, r2]
 8010ce8:	19ba      	adds	r2, r7, r6
 8010cea:	2100      	movs	r1, #0
 8010cec:	5651      	ldrsb	r1, [r2, r1]
 8010cee:	2285      	movs	r2, #133	; 0x85
 8010cf0:	5499      	strb	r1, [r3, r2]
                        MacCtx.NvmCtx->MacParams.ChannelsTxPower = linkAdrTxPower;
 8010cf2:	4b9b      	ldr	r3, [pc, #620]	; (8010f60 <ProcessMacCommands+0x43c>)
 8010cf4:	4a9c      	ldr	r2, [pc, #624]	; (8010f68 <ProcessMacCommands+0x444>)
 8010cf6:	589b      	ldr	r3, [r3, r2]
 8010cf8:	2456      	movs	r4, #86	; 0x56
 8010cfa:	193a      	adds	r2, r7, r4
 8010cfc:	2100      	movs	r1, #0
 8010cfe:	5651      	ldrsb	r1, [r2, r1]
 8010d00:	2284      	movs	r2, #132	; 0x84
 8010d02:	5499      	strb	r1, [r3, r2]
                        MacCtx.NvmCtx->MacParams.ChannelsNbTrans = linkAdrNbRep;
 8010d04:	4b96      	ldr	r3, [pc, #600]	; (8010f60 <ProcessMacCommands+0x43c>)
 8010d06:	4a98      	ldr	r2, [pc, #608]	; (8010f68 <ProcessMacCommands+0x444>)
 8010d08:	589b      	ldr	r3, [r3, r2]
 8010d0a:	197a      	adds	r2, r7, r5
 8010d0c:	7811      	ldrb	r1, [r2, #0]
 8010d0e:	22a4      	movs	r2, #164	; 0xa4
 8010d10:	5499      	strb	r1, [r3, r2]
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8010d12:	2386      	movs	r3, #134	; 0x86
 8010d14:	18fb      	adds	r3, r7, r3
 8010d16:	2200      	movs	r2, #0
 8010d18:	701a      	strb	r2, [r3, #0]
 8010d1a:	e00c      	b.n	8010d36 <ProcessMacCommands+0x212>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8010d1c:	236b      	movs	r3, #107	; 0x6b
 8010d1e:	18fb      	adds	r3, r7, r3
 8010d20:	2201      	movs	r2, #1
 8010d22:	0019      	movs	r1, r3
 8010d24:	2003      	movs	r0, #3
 8010d26:	f003 ffb9 	bl	8014c9c <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8010d2a:	2186      	movs	r1, #134	; 0x86
 8010d2c:	187b      	adds	r3, r7, r1
 8010d2e:	781a      	ldrb	r2, [r3, #0]
 8010d30:	187b      	adds	r3, r7, r1
 8010d32:	3201      	adds	r2, #1
 8010d34:	701a      	strb	r2, [r3, #0]
 8010d36:	2454      	movs	r4, #84	; 0x54
 8010d38:	193b      	adds	r3, r7, r4
 8010d3a:	781b      	ldrb	r3, [r3, #0]
 8010d3c:	2105      	movs	r1, #5
 8010d3e:	0018      	movs	r0, r3
 8010d40:	f7ef f9ea 	bl	8000118 <__udivsi3>
 8010d44:	0003      	movs	r3, r0
 8010d46:	b2db      	uxtb	r3, r3
 8010d48:	2286      	movs	r2, #134	; 0x86
 8010d4a:	18ba      	adds	r2, r7, r2
 8010d4c:	7812      	ldrb	r2, [r2, #0]
 8010d4e:	429a      	cmp	r2, r3
 8010d50:	d3e4      	bcc.n	8010d1c <ProcessMacCommands+0x1f8>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 8010d52:	193b      	adds	r3, r7, r4
 8010d54:	781a      	ldrb	r2, [r3, #0]
 8010d56:	1cfb      	adds	r3, r7, #3
 8010d58:	781b      	ldrb	r3, [r3, #0]
 8010d5a:	18d3      	adds	r3, r2, r3
 8010d5c:	b2da      	uxtb	r2, r3
 8010d5e:	1cfb      	adds	r3, r7, #3
 8010d60:	3a01      	subs	r2, #1
 8010d62:	701a      	strb	r2, [r3, #0]
                }
                break;
 8010d64:	46c0      	nop			; (mov r8, r8)
 8010d66:	f000 fc53 	bl	8011610 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 8010d6a:	1cfb      	adds	r3, r7, #3
 8010d6c:	781b      	ldrb	r3, [r3, #0]
 8010d6e:	1cfa      	adds	r2, r7, #3
 8010d70:	1c59      	adds	r1, r3, #1
 8010d72:	7011      	strb	r1, [r2, #0]
 8010d74:	001a      	movs	r2, r3
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	189b      	adds	r3, r3, r2
 8010d7a:	781a      	ldrb	r2, [r3, #0]
 8010d7c:	4b78      	ldr	r3, [pc, #480]	; (8010f60 <ProcessMacCommands+0x43c>)
 8010d7e:	497a      	ldr	r1, [pc, #488]	; (8010f68 <ProcessMacCommands+0x444>)
 8010d80:	585b      	ldr	r3, [r3, r1]
 8010d82:	210f      	movs	r1, #15
 8010d84:	400a      	ands	r2, r1
 8010d86:	b2d1      	uxtb	r1, r2
 8010d88:	22c8      	movs	r2, #200	; 0xc8
 8010d8a:	5499      	strb	r1, [r3, r2]
                MacCtx.NvmCtx->AggregatedDCycle = 1 << MacCtx.NvmCtx->MaxDCycle;
 8010d8c:	4b74      	ldr	r3, [pc, #464]	; (8010f60 <ProcessMacCommands+0x43c>)
 8010d8e:	4a76      	ldr	r2, [pc, #472]	; (8010f68 <ProcessMacCommands+0x444>)
 8010d90:	589b      	ldr	r3, [r3, r2]
 8010d92:	22c8      	movs	r2, #200	; 0xc8
 8010d94:	5c9b      	ldrb	r3, [r3, r2]
 8010d96:	001a      	movs	r2, r3
 8010d98:	2301      	movs	r3, #1
 8010d9a:	4093      	lsls	r3, r2
 8010d9c:	0019      	movs	r1, r3
 8010d9e:	4b70      	ldr	r3, [pc, #448]	; (8010f60 <ProcessMacCommands+0x43c>)
 8010da0:	4a71      	ldr	r2, [pc, #452]	; (8010f68 <ProcessMacCommands+0x444>)
 8010da2:	589a      	ldr	r2, [r3, r2]
 8010da4:	b289      	uxth	r1, r1
 8010da6:	23a6      	movs	r3, #166	; 0xa6
 8010da8:	005b      	lsls	r3, r3, #1
 8010daa:	52d1      	strh	r1, [r2, r3]
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8010dac:	2368      	movs	r3, #104	; 0x68
 8010dae:	18fb      	adds	r3, r7, r3
 8010db0:	2200      	movs	r2, #0
 8010db2:	0019      	movs	r1, r3
 8010db4:	2004      	movs	r0, #4
 8010db6:	f003 ff71 	bl	8014c9c <LoRaMacCommandsAddCmd>
                break;
 8010dba:	f000 fc29 	bl	8011610 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 8010dbe:	256b      	movs	r5, #107	; 0x6b
 8010dc0:	197b      	adds	r3, r7, r5
 8010dc2:	2207      	movs	r2, #7
 8010dc4:	701a      	strb	r2, [r3, #0]

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8010dc6:	1cfb      	adds	r3, r7, #3
 8010dc8:	781b      	ldrb	r3, [r3, #0]
 8010dca:	687a      	ldr	r2, [r7, #4]
 8010dcc:	18d3      	adds	r3, r2, r3
 8010dce:	781b      	ldrb	r3, [r3, #0]
 8010dd0:	091b      	lsrs	r3, r3, #4
 8010dd2:	b2db      	uxtb	r3, r3
 8010dd4:	b25b      	sxtb	r3, r3
 8010dd6:	2207      	movs	r2, #7
 8010dd8:	4013      	ands	r3, r2
 8010dda:	b25a      	sxtb	r2, r3
 8010ddc:	204c      	movs	r0, #76	; 0x4c
 8010dde:	183b      	adds	r3, r7, r0
 8010de0:	705a      	strb	r2, [r3, #1]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8010de2:	1cfb      	adds	r3, r7, #3
 8010de4:	781b      	ldrb	r3, [r3, #0]
 8010de6:	687a      	ldr	r2, [r7, #4]
 8010de8:	18d3      	adds	r3, r2, r3
 8010dea:	781b      	ldrb	r3, [r3, #0]
 8010dec:	b25b      	sxtb	r3, r3
 8010dee:	220f      	movs	r2, #15
 8010df0:	4013      	ands	r3, r2
 8010df2:	b25a      	sxtb	r2, r3
 8010df4:	183b      	adds	r3, r7, r0
 8010df6:	701a      	strb	r2, [r3, #0]
                macIndex++;
 8010df8:	1cfb      	adds	r3, r7, #3
 8010dfa:	781a      	ldrb	r2, [r3, #0]
 8010dfc:	1cfb      	adds	r3, r7, #3
 8010dfe:	3201      	adds	r2, #1
 8010e00:	701a      	strb	r2, [r3, #0]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8010e02:	1cfb      	adds	r3, r7, #3
 8010e04:	781b      	ldrb	r3, [r3, #0]
 8010e06:	1cfa      	adds	r2, r7, #3
 8010e08:	1c59      	adds	r1, r3, #1
 8010e0a:	7011      	strb	r1, [r2, #0]
 8010e0c:	001a      	movs	r2, r3
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	189b      	adds	r3, r3, r2
 8010e12:	781b      	ldrb	r3, [r3, #0]
 8010e14:	001a      	movs	r2, r3
 8010e16:	183b      	adds	r3, r7, r0
 8010e18:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8010e1a:	1cfb      	adds	r3, r7, #3
 8010e1c:	781b      	ldrb	r3, [r3, #0]
 8010e1e:	1cfa      	adds	r2, r7, #3
 8010e20:	1c59      	adds	r1, r3, #1
 8010e22:	7011      	strb	r1, [r2, #0]
 8010e24:	001a      	movs	r2, r3
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	189b      	adds	r3, r3, r2
 8010e2a:	781b      	ldrb	r3, [r3, #0]
 8010e2c:	021a      	lsls	r2, r3, #8
 8010e2e:	183b      	adds	r3, r7, r0
 8010e30:	685b      	ldr	r3, [r3, #4]
 8010e32:	431a      	orrs	r2, r3
 8010e34:	183b      	adds	r3, r7, r0
 8010e36:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8010e38:	1cfb      	adds	r3, r7, #3
 8010e3a:	781b      	ldrb	r3, [r3, #0]
 8010e3c:	1cfa      	adds	r2, r7, #3
 8010e3e:	1c59      	adds	r1, r3, #1
 8010e40:	7011      	strb	r1, [r2, #0]
 8010e42:	001a      	movs	r2, r3
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	189b      	adds	r3, r3, r2
 8010e48:	781b      	ldrb	r3, [r3, #0]
 8010e4a:	041a      	lsls	r2, r3, #16
 8010e4c:	183b      	adds	r3, r7, r0
 8010e4e:	685b      	ldr	r3, [r3, #4]
 8010e50:	431a      	orrs	r2, r3
 8010e52:	0004      	movs	r4, r0
 8010e54:	193b      	adds	r3, r7, r4
 8010e56:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency *= 100;
 8010e58:	193b      	adds	r3, r7, r4
 8010e5a:	685b      	ldr	r3, [r3, #4]
 8010e5c:	2264      	movs	r2, #100	; 0x64
 8010e5e:	435a      	muls	r2, r3
 8010e60:	193b      	adds	r3, r7, r4
 8010e62:	605a      	str	r2, [r3, #4]

                // Perform request on region
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 8010e64:	4b3e      	ldr	r3, [pc, #248]	; (8010f60 <ProcessMacCommands+0x43c>)
 8010e66:	4a40      	ldr	r2, [pc, #256]	; (8010f68 <ProcessMacCommands+0x444>)
 8010e68:	589b      	ldr	r3, [r3, r2]
 8010e6a:	781b      	ldrb	r3, [r3, #0]
 8010e6c:	193a      	adds	r2, r7, r4
 8010e6e:	0011      	movs	r1, r2
 8010e70:	0018      	movs	r0, r3
 8010e72:	f005 ffe8 	bl	8016e46 <RegionRxParamSetupReq>
 8010e76:	0003      	movs	r3, r0
 8010e78:	001a      	movs	r2, r3
 8010e7a:	197b      	adds	r3, r7, r5
 8010e7c:	701a      	strb	r2, [r3, #0]

                if( ( status & 0x07 ) == 0x07 )
 8010e7e:	197b      	adds	r3, r7, r5
 8010e80:	781b      	ldrb	r3, [r3, #0]
 8010e82:	001a      	movs	r2, r3
 8010e84:	2307      	movs	r3, #7
 8010e86:	4013      	ands	r3, r2
 8010e88:	2b07      	cmp	r3, #7
 8010e8a:	d128      	bne.n	8010ede <ProcessMacCommands+0x3ba>
                {
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8010e8c:	193b      	adds	r3, r7, r4
 8010e8e:	2100      	movs	r1, #0
 8010e90:	5659      	ldrsb	r1, [r3, r1]
 8010e92:	4b33      	ldr	r3, [pc, #204]	; (8010f60 <ProcessMacCommands+0x43c>)
 8010e94:	4a34      	ldr	r2, [pc, #208]	; (8010f68 <ProcessMacCommands+0x444>)
 8010e96:	589b      	ldr	r3, [r3, r2]
 8010e98:	b2c9      	uxtb	r1, r1
 8010e9a:	22ac      	movs	r2, #172	; 0xac
 8010e9c:	5499      	strb	r1, [r3, r2]
                    MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8010e9e:	193b      	adds	r3, r7, r4
 8010ea0:	2100      	movs	r1, #0
 8010ea2:	5659      	ldrsb	r1, [r3, r1]
 8010ea4:	4b2e      	ldr	r3, [pc, #184]	; (8010f60 <ProcessMacCommands+0x43c>)
 8010ea6:	4a30      	ldr	r2, [pc, #192]	; (8010f68 <ProcessMacCommands+0x444>)
 8010ea8:	589b      	ldr	r3, [r3, r2]
 8010eaa:	b2c9      	uxtb	r1, r1
 8010eac:	22b4      	movs	r2, #180	; 0xb4
 8010eae:	5499      	strb	r1, [r3, r2]
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8010eb0:	4b2b      	ldr	r3, [pc, #172]	; (8010f60 <ProcessMacCommands+0x43c>)
 8010eb2:	4a2d      	ldr	r2, [pc, #180]	; (8010f68 <ProcessMacCommands+0x444>)
 8010eb4:	589a      	ldr	r2, [r3, r2]
 8010eb6:	193b      	adds	r3, r7, r4
 8010eb8:	685b      	ldr	r3, [r3, #4]
 8010eba:	21a8      	movs	r1, #168	; 0xa8
 8010ebc:	5053      	str	r3, [r2, r1]
                    MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8010ebe:	4b28      	ldr	r3, [pc, #160]	; (8010f60 <ProcessMacCommands+0x43c>)
 8010ec0:	4a29      	ldr	r2, [pc, #164]	; (8010f68 <ProcessMacCommands+0x444>)
 8010ec2:	589a      	ldr	r2, [r3, r2]
 8010ec4:	193b      	adds	r3, r7, r4
 8010ec6:	685b      	ldr	r3, [r3, #4]
 8010ec8:	21b0      	movs	r1, #176	; 0xb0
 8010eca:	5053      	str	r3, [r2, r1]
                    MacCtx.NvmCtx->MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8010ecc:	193b      	adds	r3, r7, r4
 8010ece:	2101      	movs	r1, #1
 8010ed0:	5659      	ldrsb	r1, [r3, r1]
 8010ed2:	4b23      	ldr	r3, [pc, #140]	; (8010f60 <ProcessMacCommands+0x43c>)
 8010ed4:	4a24      	ldr	r2, [pc, #144]	; (8010f68 <ProcessMacCommands+0x444>)
 8010ed6:	589b      	ldr	r3, [r3, r2]
 8010ed8:	b2c9      	uxtb	r1, r1
 8010eda:	22a5      	movs	r2, #165	; 0xa5
 8010edc:	5499      	strb	r1, [r3, r2]
                }
                macCmdPayload[0] = status;
 8010ede:	236b      	movs	r3, #107	; 0x6b
 8010ee0:	18fb      	adds	r3, r7, r3
 8010ee2:	781a      	ldrb	r2, [r3, #0]
 8010ee4:	2168      	movs	r1, #104	; 0x68
 8010ee6:	187b      	adds	r3, r7, r1
 8010ee8:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8010eea:	187b      	adds	r3, r7, r1
 8010eec:	2201      	movs	r2, #1
 8010eee:	0019      	movs	r1, r3
 8010ef0:	2005      	movs	r0, #5
 8010ef2:	f003 fed3 	bl	8014c9c <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 8010ef6:	f7ff fe05 	bl	8010b04 <SetMlmeScheduleUplinkIndication>
                break;
 8010efa:	46c0      	nop			; (mov r8, r8)
 8010efc:	e388      	b.n	8011610 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8010efe:	2185      	movs	r1, #133	; 0x85
 8010f00:	187b      	adds	r3, r7, r1
 8010f02:	22ff      	movs	r2, #255	; 0xff
 8010f04:	701a      	strb	r2, [r3, #0]
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8010f06:	4a16      	ldr	r2, [pc, #88]	; (8010f60 <ProcessMacCommands+0x43c>)
 8010f08:	23d2      	movs	r3, #210	; 0xd2
 8010f0a:	009b      	lsls	r3, r3, #2
 8010f0c:	58d3      	ldr	r3, [r2, r3]
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d00f      	beq.n	8010f32 <ProcessMacCommands+0x40e>
 8010f12:	4a13      	ldr	r2, [pc, #76]	; (8010f60 <ProcessMacCommands+0x43c>)
 8010f14:	23d2      	movs	r3, #210	; 0xd2
 8010f16:	009b      	lsls	r3, r3, #2
 8010f18:	58d3      	ldr	r3, [r2, r3]
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d008      	beq.n	8010f32 <ProcessMacCommands+0x40e>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8010f20:	4a0f      	ldr	r2, [pc, #60]	; (8010f60 <ProcessMacCommands+0x43c>)
 8010f22:	23d2      	movs	r3, #210	; 0xd2
 8010f24:	009b      	lsls	r3, r3, #2
 8010f26:	58d3      	ldr	r3, [r2, r3]
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	187c      	adds	r4, r7, r1
 8010f2c:	4798      	blx	r3
 8010f2e:	0003      	movs	r3, r0
 8010f30:	7023      	strb	r3, [r4, #0]
                }
                macCmdPayload[0] = batteryLevel;
 8010f32:	2168      	movs	r1, #104	; 0x68
 8010f34:	187b      	adds	r3, r7, r1
 8010f36:	2285      	movs	r2, #133	; 0x85
 8010f38:	18ba      	adds	r2, r7, r2
 8010f3a:	7812      	ldrb	r2, [r2, #0]
 8010f3c:	701a      	strb	r2, [r3, #0]
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8010f3e:	1c7b      	adds	r3, r7, #1
 8010f40:	781b      	ldrb	r3, [r3, #0]
 8010f42:	223f      	movs	r2, #63	; 0x3f
 8010f44:	4013      	ands	r3, r2
 8010f46:	b2da      	uxtb	r2, r3
 8010f48:	187b      	adds	r3, r7, r1
 8010f4a:	705a      	strb	r2, [r3, #1]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8010f4c:	187b      	adds	r3, r7, r1
 8010f4e:	2202      	movs	r2, #2
 8010f50:	0019      	movs	r1, r3
 8010f52:	2006      	movs	r0, #6
 8010f54:	f003 fea2 	bl	8014c9c <LoRaMacCommandsAddCmd>
                break;
 8010f58:	e35a      	b.n	8011610 <ProcessMacCommands+0xaec>
 8010f5a:	46c0      	nop			; (mov r8, r8)
 8010f5c:	0801f8b8 	.word	0x0801f8b8
 8010f60:	200005b8 	.word	0x200005b8
 8010f64:	00000459 	.word	0x00000459
 8010f68:	00000484 	.word	0x00000484
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 8010f6c:	246b      	movs	r4, #107	; 0x6b
 8010f6e:	193b      	adds	r3, r7, r4
 8010f70:	2203      	movs	r2, #3
 8010f72:	701a      	strb	r2, [r3, #0]

                newChannelReq.ChannelId = payload[macIndex++];
 8010f74:	1cfb      	adds	r3, r7, #3
 8010f76:	781b      	ldrb	r3, [r3, #0]
 8010f78:	1cfa      	adds	r2, r7, #3
 8010f7a:	1c59      	adds	r1, r3, #1
 8010f7c:	7011      	strb	r1, [r2, #0]
 8010f7e:	001a      	movs	r2, r3
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	189b      	adds	r3, r3, r2
 8010f84:	781b      	ldrb	r3, [r3, #0]
 8010f86:	b25a      	sxtb	r2, r3
 8010f88:	2544      	movs	r5, #68	; 0x44
 8010f8a:	197b      	adds	r3, r7, r5
 8010f8c:	711a      	strb	r2, [r3, #4]
                newChannelReq.NewChannel = &chParam;
 8010f8e:	197b      	adds	r3, r7, r5
 8010f90:	2038      	movs	r0, #56	; 0x38
 8010f92:	183a      	adds	r2, r7, r0
 8010f94:	601a      	str	r2, [r3, #0]

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8010f96:	1cfb      	adds	r3, r7, #3
 8010f98:	781b      	ldrb	r3, [r3, #0]
 8010f9a:	1cfa      	adds	r2, r7, #3
 8010f9c:	1c59      	adds	r1, r3, #1
 8010f9e:	7011      	strb	r1, [r2, #0]
 8010fa0:	001a      	movs	r2, r3
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	189b      	adds	r3, r3, r2
 8010fa6:	781b      	ldrb	r3, [r3, #0]
 8010fa8:	001a      	movs	r2, r3
 8010faa:	183b      	adds	r3, r7, r0
 8010fac:	601a      	str	r2, [r3, #0]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8010fae:	1cfb      	adds	r3, r7, #3
 8010fb0:	781b      	ldrb	r3, [r3, #0]
 8010fb2:	1cfa      	adds	r2, r7, #3
 8010fb4:	1c59      	adds	r1, r3, #1
 8010fb6:	7011      	strb	r1, [r2, #0]
 8010fb8:	001a      	movs	r2, r3
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	189b      	adds	r3, r3, r2
 8010fbe:	781b      	ldrb	r3, [r3, #0]
 8010fc0:	021a      	lsls	r2, r3, #8
 8010fc2:	183b      	adds	r3, r7, r0
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	431a      	orrs	r2, r3
 8010fc8:	183b      	adds	r3, r7, r0
 8010fca:	601a      	str	r2, [r3, #0]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8010fcc:	1cfb      	adds	r3, r7, #3
 8010fce:	781b      	ldrb	r3, [r3, #0]
 8010fd0:	1cfa      	adds	r2, r7, #3
 8010fd2:	1c59      	adds	r1, r3, #1
 8010fd4:	7011      	strb	r1, [r2, #0]
 8010fd6:	001a      	movs	r2, r3
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	189b      	adds	r3, r3, r2
 8010fdc:	781b      	ldrb	r3, [r3, #0]
 8010fde:	041a      	lsls	r2, r3, #16
 8010fe0:	183b      	adds	r3, r7, r0
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	431a      	orrs	r2, r3
 8010fe6:	183b      	adds	r3, r7, r0
 8010fe8:	601a      	str	r2, [r3, #0]
                chParam.Frequency *= 100;
 8010fea:	183b      	adds	r3, r7, r0
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	2264      	movs	r2, #100	; 0x64
 8010ff0:	435a      	muls	r2, r3
 8010ff2:	183b      	adds	r3, r7, r0
 8010ff4:	601a      	str	r2, [r3, #0]
                chParam.Rx1Frequency = 0;
 8010ff6:	183b      	adds	r3, r7, r0
 8010ff8:	2200      	movs	r2, #0
 8010ffa:	605a      	str	r2, [r3, #4]
                chParam.DrRange.Value = payload[macIndex++];
 8010ffc:	1cfb      	adds	r3, r7, #3
 8010ffe:	781b      	ldrb	r3, [r3, #0]
 8011000:	1cfa      	adds	r2, r7, #3
 8011002:	1c59      	adds	r1, r3, #1
 8011004:	7011      	strb	r1, [r2, #0]
 8011006:	001a      	movs	r2, r3
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	189b      	adds	r3, r3, r2
 801100c:	781b      	ldrb	r3, [r3, #0]
 801100e:	b25a      	sxtb	r2, r3
 8011010:	183b      	adds	r3, r7, r0
 8011012:	721a      	strb	r2, [r3, #8]

                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 8011014:	4ba0      	ldr	r3, [pc, #640]	; (8011298 <ProcessMacCommands+0x774>)
 8011016:	4aa1      	ldr	r2, [pc, #644]	; (801129c <ProcessMacCommands+0x778>)
 8011018:	589b      	ldr	r3, [r3, r2]
 801101a:	781b      	ldrb	r3, [r3, #0]
 801101c:	197a      	adds	r2, r7, r5
 801101e:	0011      	movs	r1, r2
 8011020:	0018      	movs	r0, r3
 8011022:	f005 ff26 	bl	8016e72 <RegionNewChannelReq>
 8011026:	0003      	movs	r3, r0
 8011028:	001a      	movs	r2, r3
 801102a:	193b      	adds	r3, r7, r4
 801102c:	701a      	strb	r2, [r3, #0]

                macCmdPayload[0] = status;
 801102e:	193b      	adds	r3, r7, r4
 8011030:	781a      	ldrb	r2, [r3, #0]
 8011032:	2168      	movs	r1, #104	; 0x68
 8011034:	187b      	adds	r3, r7, r1
 8011036:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8011038:	187b      	adds	r3, r7, r1
 801103a:	2201      	movs	r2, #1
 801103c:	0019      	movs	r1, r3
 801103e:	2007      	movs	r0, #7
 8011040:	f003 fe2c 	bl	8014c9c <LoRaMacCommandsAddCmd>
                break;
 8011044:	46c0      	nop			; (mov r8, r8)
 8011046:	e2e3      	b.n	8011610 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 8011048:	1cfb      	adds	r3, r7, #3
 801104a:	781b      	ldrb	r3, [r3, #0]
 801104c:	1cfa      	adds	r2, r7, #3
 801104e:	1c59      	adds	r1, r3, #1
 8011050:	7011      	strb	r1, [r2, #0]
 8011052:	001a      	movs	r2, r3
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	189b      	adds	r3, r3, r2
 8011058:	781a      	ldrb	r2, [r3, #0]
 801105a:	2084      	movs	r0, #132	; 0x84
 801105c:	183b      	adds	r3, r7, r0
 801105e:	210f      	movs	r1, #15
 8011060:	400a      	ands	r2, r1
 8011062:	701a      	strb	r2, [r3, #0]

                if( delay == 0 )
 8011064:	183b      	adds	r3, r7, r0
 8011066:	781b      	ldrb	r3, [r3, #0]
 8011068:	2b00      	cmp	r3, #0
 801106a:	d104      	bne.n	8011076 <ProcessMacCommands+0x552>
                {
                    delay++;
 801106c:	183b      	adds	r3, r7, r0
 801106e:	781a      	ldrb	r2, [r3, #0]
 8011070:	183b      	adds	r3, r7, r0
 8011072:	3201      	adds	r2, #1
 8011074:	701a      	strb	r2, [r3, #0]
                }
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 8011076:	2384      	movs	r3, #132	; 0x84
 8011078:	18fb      	adds	r3, r7, r3
 801107a:	781a      	ldrb	r2, [r3, #0]
 801107c:	0013      	movs	r3, r2
 801107e:	015b      	lsls	r3, r3, #5
 8011080:	1a9b      	subs	r3, r3, r2
 8011082:	009b      	lsls	r3, r3, #2
 8011084:	189b      	adds	r3, r3, r2
 8011086:	00db      	lsls	r3, r3, #3
 8011088:	0019      	movs	r1, r3
 801108a:	4b83      	ldr	r3, [pc, #524]	; (8011298 <ProcessMacCommands+0x774>)
 801108c:	4a83      	ldr	r2, [pc, #524]	; (801129c <ProcessMacCommands+0x778>)
 801108e:	589b      	ldr	r3, [r3, r2]
 8011090:	2294      	movs	r2, #148	; 0x94
 8011092:	5099      	str	r1, [r3, r2]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 8011094:	4b80      	ldr	r3, [pc, #512]	; (8011298 <ProcessMacCommands+0x774>)
 8011096:	4a81      	ldr	r2, [pc, #516]	; (801129c <ProcessMacCommands+0x778>)
 8011098:	589b      	ldr	r3, [r3, r2]
 801109a:	2294      	movs	r2, #148	; 0x94
 801109c:	589b      	ldr	r3, [r3, r2]
 801109e:	4a7e      	ldr	r2, [pc, #504]	; (8011298 <ProcessMacCommands+0x774>)
 80110a0:	497e      	ldr	r1, [pc, #504]	; (801129c <ProcessMacCommands+0x778>)
 80110a2:	5852      	ldr	r2, [r2, r1]
 80110a4:	21fa      	movs	r1, #250	; 0xfa
 80110a6:	0089      	lsls	r1, r1, #2
 80110a8:	468c      	mov	ip, r1
 80110aa:	4463      	add	r3, ip
 80110ac:	2198      	movs	r1, #152	; 0x98
 80110ae:	5053      	str	r3, [r2, r1]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 80110b0:	2368      	movs	r3, #104	; 0x68
 80110b2:	18fb      	adds	r3, r7, r3
 80110b4:	2200      	movs	r2, #0
 80110b6:	0019      	movs	r1, r3
 80110b8:	2008      	movs	r0, #8
 80110ba:	f003 fdef 	bl	8014c9c <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 80110be:	f7ff fd21 	bl	8010b04 <SetMlmeScheduleUplinkIndication>
                break;
 80110c2:	e2a5      	b.n	8011610 <ProcessMacCommands+0xaec>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 80110c4:	1cfb      	adds	r3, r7, #3
 80110c6:	781b      	ldrb	r3, [r3, #0]
 80110c8:	1cfa      	adds	r2, r7, #3
 80110ca:	1c59      	adds	r1, r3, #1
 80110cc:	7011      	strb	r1, [r2, #0]
 80110ce:	001a      	movs	r2, r3
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	189a      	adds	r2, r3, r2
 80110d4:	2076      	movs	r0, #118	; 0x76
 80110d6:	183b      	adds	r3, r7, r0
 80110d8:	7812      	ldrb	r2, [r2, #0]
 80110da:	701a      	strb	r2, [r3, #0]

                txParamSetupReq.UplinkDwellTime = 0;
 80110dc:	2134      	movs	r1, #52	; 0x34
 80110de:	187b      	adds	r3, r7, r1
 80110e0:	2200      	movs	r2, #0
 80110e2:	701a      	strb	r2, [r3, #0]
                txParamSetupReq.DownlinkDwellTime = 0;
 80110e4:	187b      	adds	r3, r7, r1
 80110e6:	2200      	movs	r2, #0
 80110e8:	705a      	strb	r2, [r3, #1]

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 80110ea:	183b      	adds	r3, r7, r0
 80110ec:	781b      	ldrb	r3, [r3, #0]
 80110ee:	2220      	movs	r2, #32
 80110f0:	4013      	ands	r3, r2
 80110f2:	d002      	beq.n	80110fa <ProcessMacCommands+0x5d6>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 80110f4:	187b      	adds	r3, r7, r1
 80110f6:	2201      	movs	r2, #1
 80110f8:	705a      	strb	r2, [r3, #1]
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 80110fa:	2376      	movs	r3, #118	; 0x76
 80110fc:	18fb      	adds	r3, r7, r3
 80110fe:	781b      	ldrb	r3, [r3, #0]
 8011100:	2210      	movs	r2, #16
 8011102:	4013      	ands	r3, r2
 8011104:	d003      	beq.n	801110e <ProcessMacCommands+0x5ea>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 8011106:	2334      	movs	r3, #52	; 0x34
 8011108:	18fb      	adds	r3, r7, r3
 801110a:	2201      	movs	r2, #1
 801110c:	701a      	strb	r2, [r3, #0]
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 801110e:	2376      	movs	r3, #118	; 0x76
 8011110:	18fb      	adds	r3, r7, r3
 8011112:	781b      	ldrb	r3, [r3, #0]
 8011114:	220f      	movs	r2, #15
 8011116:	4013      	ands	r3, r2
 8011118:	b2da      	uxtb	r2, r3
 801111a:	2434      	movs	r4, #52	; 0x34
 801111c:	193b      	adds	r3, r7, r4
 801111e:	709a      	strb	r2, [r3, #2]

                // Check the status for correctness
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 8011120:	4b5d      	ldr	r3, [pc, #372]	; (8011298 <ProcessMacCommands+0x774>)
 8011122:	4a5e      	ldr	r2, [pc, #376]	; (801129c <ProcessMacCommands+0x778>)
 8011124:	589b      	ldr	r3, [r3, r2]
 8011126:	781b      	ldrb	r3, [r3, #0]
 8011128:	193a      	adds	r2, r7, r4
 801112a:	0011      	movs	r1, r2
 801112c:	0018      	movs	r0, r3
 801112e:	f005 feb6 	bl	8016e9e <RegionTxParamSetupReq>
 8011132:	0003      	movs	r3, r0
 8011134:	3301      	adds	r3, #1
 8011136:	d050      	beq.n	80111da <ProcessMacCommands+0x6b6>
                {
                    // Accept command
                    MacCtx.NvmCtx->MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8011138:	4b57      	ldr	r3, [pc, #348]	; (8011298 <ProcessMacCommands+0x774>)
 801113a:	4a58      	ldr	r2, [pc, #352]	; (801129c <ProcessMacCommands+0x778>)
 801113c:	589b      	ldr	r3, [r3, r2]
 801113e:	193a      	adds	r2, r7, r4
 8011140:	7811      	ldrb	r1, [r2, #0]
 8011142:	22b8      	movs	r2, #184	; 0xb8
 8011144:	5499      	strb	r1, [r3, r2]
                    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8011146:	4b54      	ldr	r3, [pc, #336]	; (8011298 <ProcessMacCommands+0x774>)
 8011148:	4a54      	ldr	r2, [pc, #336]	; (801129c <ProcessMacCommands+0x778>)
 801114a:	589b      	ldr	r3, [r3, r2]
 801114c:	193a      	adds	r2, r7, r4
 801114e:	7851      	ldrb	r1, [r2, #1]
 8011150:	22b9      	movs	r2, #185	; 0xb9
 8011152:	5499      	strb	r1, [r3, r2]
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8011154:	193b      	adds	r3, r7, r4
 8011156:	789b      	ldrb	r3, [r3, #2]
 8011158:	001a      	movs	r2, r3
 801115a:	4b51      	ldr	r3, [pc, #324]	; (80112a0 <ProcessMacCommands+0x77c>)
 801115c:	5c9a      	ldrb	r2, [r3, r2]
 801115e:	4b4e      	ldr	r3, [pc, #312]	; (8011298 <ProcessMacCommands+0x774>)
 8011160:	494e      	ldr	r1, [pc, #312]	; (801129c <ProcessMacCommands+0x778>)
 8011162:	585c      	ldr	r4, [r3, r1]
 8011164:	0010      	movs	r0, r2
 8011166:	f7ef fcc7 	bl	8000af8 <__aeabi_ui2f>
 801116a:	1c03      	adds	r3, r0, #0
 801116c:	22bc      	movs	r2, #188	; 0xbc
 801116e:	50a3      	str	r3, [r4, r2]
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8011170:	212c      	movs	r1, #44	; 0x2c
 8011172:	187b      	adds	r3, r7, r1
 8011174:	2202      	movs	r2, #2
 8011176:	701a      	strb	r2, [r3, #0]
                    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8011178:	4b47      	ldr	r3, [pc, #284]	; (8011298 <ProcessMacCommands+0x774>)
 801117a:	4a48      	ldr	r2, [pc, #288]	; (801129c <ProcessMacCommands+0x778>)
 801117c:	589b      	ldr	r3, [r3, r2]
 801117e:	22b8      	movs	r2, #184	; 0xb8
 8011180:	5c9a      	ldrb	r2, [r3, r2]
 8011182:	187b      	adds	r3, r7, r1
 8011184:	709a      	strb	r2, [r3, #2]
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8011186:	4b44      	ldr	r3, [pc, #272]	; (8011298 <ProcessMacCommands+0x774>)
 8011188:	4a44      	ldr	r2, [pc, #272]	; (801129c <ProcessMacCommands+0x778>)
 801118a:	589b      	ldr	r3, [r3, r2]
 801118c:	781b      	ldrb	r3, [r3, #0]
 801118e:	187a      	adds	r2, r7, r1
 8011190:	0011      	movs	r1, r2
 8011192:	0018      	movs	r0, r3
 8011194:	f005 fd31 	bl	8016bfa <RegionGetPhyParam>
 8011198:	0003      	movs	r3, r0
 801119a:	001a      	movs	r2, r3
 801119c:	2128      	movs	r1, #40	; 0x28
 801119e:	187b      	adds	r3, r7, r1
 80111a0:	601a      	str	r2, [r3, #0]
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 80111a2:	187b      	adds	r3, r7, r1
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	b259      	sxtb	r1, r3
 80111a8:	4b3b      	ldr	r3, [pc, #236]	; (8011298 <ProcessMacCommands+0x774>)
 80111aa:	4a3c      	ldr	r2, [pc, #240]	; (801129c <ProcessMacCommands+0x778>)
 80111ac:	589b      	ldr	r3, [r3, r2]
 80111ae:	2285      	movs	r2, #133	; 0x85
 80111b0:	5698      	ldrsb	r0, [r3, r2]
 80111b2:	4b39      	ldr	r3, [pc, #228]	; (8011298 <ProcessMacCommands+0x774>)
 80111b4:	4a39      	ldr	r2, [pc, #228]	; (801129c <ProcessMacCommands+0x778>)
 80111b6:	589b      	ldr	r3, [r3, r2]
 80111b8:	1c04      	adds	r4, r0, #0
 80111ba:	1c08      	adds	r0, r1, #0
 80111bc:	b241      	sxtb	r1, r0
 80111be:	b262      	sxtb	r2, r4
 80111c0:	4291      	cmp	r1, r2
 80111c2:	da00      	bge.n	80111c6 <ProcessMacCommands+0x6a2>
 80111c4:	1c20      	adds	r0, r4, #0
 80111c6:	b241      	sxtb	r1, r0
 80111c8:	2285      	movs	r2, #133	; 0x85
 80111ca:	5499      	strb	r1, [r3, r2]

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 80111cc:	2368      	movs	r3, #104	; 0x68
 80111ce:	18fb      	adds	r3, r7, r3
 80111d0:	2200      	movs	r2, #0
 80111d2:	0019      	movs	r1, r3
 80111d4:	2009      	movs	r0, #9
 80111d6:	f003 fd61 	bl	8014c9c <LoRaMacCommandsAddCmd>
                }
                break;
 80111da:	46c0      	nop			; (mov r8, r8)
 80111dc:	e218      	b.n	8011610 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 80111de:	246b      	movs	r4, #107	; 0x6b
 80111e0:	193b      	adds	r3, r7, r4
 80111e2:	2203      	movs	r2, #3
 80111e4:	701a      	strb	r2, [r3, #0]

                dlChannelReq.ChannelId = payload[macIndex++];
 80111e6:	1cfb      	adds	r3, r7, #3
 80111e8:	781b      	ldrb	r3, [r3, #0]
 80111ea:	1cfa      	adds	r2, r7, #3
 80111ec:	1c59      	adds	r1, r3, #1
 80111ee:	7011      	strb	r1, [r2, #0]
 80111f0:	001a      	movs	r2, r3
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	189b      	adds	r3, r3, r2
 80111f6:	781a      	ldrb	r2, [r3, #0]
 80111f8:	2020      	movs	r0, #32
 80111fa:	183b      	adds	r3, r7, r0
 80111fc:	701a      	strb	r2, [r3, #0]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 80111fe:	1cfb      	adds	r3, r7, #3
 8011200:	781b      	ldrb	r3, [r3, #0]
 8011202:	1cfa      	adds	r2, r7, #3
 8011204:	1c59      	adds	r1, r3, #1
 8011206:	7011      	strb	r1, [r2, #0]
 8011208:	001a      	movs	r2, r3
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	189b      	adds	r3, r3, r2
 801120e:	781b      	ldrb	r3, [r3, #0]
 8011210:	001a      	movs	r2, r3
 8011212:	183b      	adds	r3, r7, r0
 8011214:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8011216:	1cfb      	adds	r3, r7, #3
 8011218:	781b      	ldrb	r3, [r3, #0]
 801121a:	1cfa      	adds	r2, r7, #3
 801121c:	1c59      	adds	r1, r3, #1
 801121e:	7011      	strb	r1, [r2, #0]
 8011220:	001a      	movs	r2, r3
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	189b      	adds	r3, r3, r2
 8011226:	781b      	ldrb	r3, [r3, #0]
 8011228:	021a      	lsls	r2, r3, #8
 801122a:	183b      	adds	r3, r7, r0
 801122c:	685b      	ldr	r3, [r3, #4]
 801122e:	431a      	orrs	r2, r3
 8011230:	183b      	adds	r3, r7, r0
 8011232:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8011234:	1cfb      	adds	r3, r7, #3
 8011236:	781b      	ldrb	r3, [r3, #0]
 8011238:	1cfa      	adds	r2, r7, #3
 801123a:	1c59      	adds	r1, r3, #1
 801123c:	7011      	strb	r1, [r2, #0]
 801123e:	001a      	movs	r2, r3
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	189b      	adds	r3, r3, r2
 8011244:	781b      	ldrb	r3, [r3, #0]
 8011246:	041a      	lsls	r2, r3, #16
 8011248:	183b      	adds	r3, r7, r0
 801124a:	685b      	ldr	r3, [r3, #4]
 801124c:	431a      	orrs	r2, r3
 801124e:	0001      	movs	r1, r0
 8011250:	187b      	adds	r3, r7, r1
 8011252:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency *= 100;
 8011254:	187b      	adds	r3, r7, r1
 8011256:	685b      	ldr	r3, [r3, #4]
 8011258:	2264      	movs	r2, #100	; 0x64
 801125a:	435a      	muls	r2, r3
 801125c:	187b      	adds	r3, r7, r1
 801125e:	605a      	str	r2, [r3, #4]

                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 8011260:	4b0d      	ldr	r3, [pc, #52]	; (8011298 <ProcessMacCommands+0x774>)
 8011262:	4a0e      	ldr	r2, [pc, #56]	; (801129c <ProcessMacCommands+0x778>)
 8011264:	589b      	ldr	r3, [r3, r2]
 8011266:	781b      	ldrb	r3, [r3, #0]
 8011268:	187a      	adds	r2, r7, r1
 801126a:	0011      	movs	r1, r2
 801126c:	0018      	movs	r0, r3
 801126e:	f005 fe2c 	bl	8016eca <RegionDlChannelReq>
 8011272:	0003      	movs	r3, r0
 8011274:	001a      	movs	r2, r3
 8011276:	193b      	adds	r3, r7, r4
 8011278:	701a      	strb	r2, [r3, #0]
                macCmdPayload[0] = status;
 801127a:	193b      	adds	r3, r7, r4
 801127c:	781a      	ldrb	r2, [r3, #0]
 801127e:	2168      	movs	r1, #104	; 0x68
 8011280:	187b      	adds	r3, r7, r1
 8011282:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8011284:	187b      	adds	r3, r7, r1
 8011286:	2201      	movs	r2, #1
 8011288:	0019      	movs	r1, r3
 801128a:	200a      	movs	r0, #10
 801128c:	f003 fd06 	bl	8014c9c <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 8011290:	f7ff fc38 	bl	8010b04 <SetMlmeScheduleUplinkIndication>
                break;
 8011294:	46c0      	nop			; (mov r8, r8)
 8011296:	e1bb      	b.n	8011610 <ProcessMacCommands+0xaec>
 8011298:	200005b8 	.word	0x200005b8
 801129c:	00000484 	.word	0x00000484
 80112a0:	0801f8a8 	.word	0x0801f8a8
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 80112a4:	200a      	movs	r0, #10
 80112a6:	f004 f88b 	bl	80153c0 <LoRaMacConfirmQueueIsCmdActive>
 80112aa:	1e03      	subs	r3, r0, #0
 80112ac:	d100      	bne.n	80112b0 <ProcessMacCommands+0x78c>
 80112ae:	e1af      	b.n	8011610 <ProcessMacCommands+0xaec>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 80112b0:	210a      	movs	r1, #10
 80112b2:	2000      	movs	r0, #0
 80112b4:	f003 ffe8 	bl	8015288 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 80112b8:	2418      	movs	r4, #24
 80112ba:	193b      	adds	r3, r7, r4
 80112bc:	0018      	movs	r0, r3
 80112be:	2308      	movs	r3, #8
 80112c0:	001a      	movs	r2, r3
 80112c2:	2100      	movs	r1, #0
 80112c4:	f00c fe29 	bl	801df1a <memset>
                    SysTime_t sysTime = { 0 };
 80112c8:	2510      	movs	r5, #16
 80112ca:	197b      	adds	r3, r7, r5
 80112cc:	0018      	movs	r0, r3
 80112ce:	2308      	movs	r3, #8
 80112d0:	001a      	movs	r2, r3
 80112d2:	2100      	movs	r1, #0
 80112d4:	f00c fe21 	bl	801df1a <memset>
                    SysTime_t sysTimeCurrent = { 0 };
 80112d8:	2608      	movs	r6, #8
 80112da:	19bb      	adds	r3, r7, r6
 80112dc:	0018      	movs	r0, r3
 80112de:	2308      	movs	r3, #8
 80112e0:	001a      	movs	r2, r3
 80112e2:	2100      	movs	r1, #0
 80112e4:	f00c fe19 	bl	801df1a <memset>

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 80112e8:	1cfb      	adds	r3, r7, #3
 80112ea:	781b      	ldrb	r3, [r3, #0]
 80112ec:	1cfa      	adds	r2, r7, #3
 80112ee:	1c59      	adds	r1, r3, #1
 80112f0:	7011      	strb	r1, [r2, #0]
 80112f2:	001a      	movs	r2, r3
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	189b      	adds	r3, r3, r2
 80112f8:	781b      	ldrb	r3, [r3, #0]
 80112fa:	001a      	movs	r2, r3
 80112fc:	193b      	adds	r3, r7, r4
 80112fe:	601a      	str	r2, [r3, #0]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8011300:	1cfb      	adds	r3, r7, #3
 8011302:	781b      	ldrb	r3, [r3, #0]
 8011304:	1cfa      	adds	r2, r7, #3
 8011306:	1c59      	adds	r1, r3, #1
 8011308:	7011      	strb	r1, [r2, #0]
 801130a:	001a      	movs	r2, r3
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	189b      	adds	r3, r3, r2
 8011310:	781b      	ldrb	r3, [r3, #0]
 8011312:	021a      	lsls	r2, r3, #8
 8011314:	193b      	adds	r3, r7, r4
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	431a      	orrs	r2, r3
 801131a:	0020      	movs	r0, r4
 801131c:	193b      	adds	r3, r7, r4
 801131e:	601a      	str	r2, [r3, #0]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8011320:	1cfb      	adds	r3, r7, #3
 8011322:	781b      	ldrb	r3, [r3, #0]
 8011324:	1cfa      	adds	r2, r7, #3
 8011326:	1c59      	adds	r1, r3, #1
 8011328:	7011      	strb	r1, [r2, #0]
 801132a:	001a      	movs	r2, r3
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	189b      	adds	r3, r3, r2
 8011330:	781b      	ldrb	r3, [r3, #0]
 8011332:	041a      	lsls	r2, r3, #16
 8011334:	183b      	adds	r3, r7, r0
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	431a      	orrs	r2, r3
 801133a:	183b      	adds	r3, r7, r0
 801133c:	601a      	str	r2, [r3, #0]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 801133e:	1cfb      	adds	r3, r7, #3
 8011340:	781b      	ldrb	r3, [r3, #0]
 8011342:	1cfa      	adds	r2, r7, #3
 8011344:	1c59      	adds	r1, r3, #1
 8011346:	7011      	strb	r1, [r2, #0]
 8011348:	001a      	movs	r2, r3
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	189b      	adds	r3, r3, r2
 801134e:	781b      	ldrb	r3, [r3, #0]
 8011350:	061a      	lsls	r2, r3, #24
 8011352:	183b      	adds	r3, r7, r0
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	431a      	orrs	r2, r3
 8011358:	183b      	adds	r3, r7, r0
 801135a:	601a      	str	r2, [r3, #0]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 801135c:	1cfb      	adds	r3, r7, #3
 801135e:	781b      	ldrb	r3, [r3, #0]
 8011360:	1cfa      	adds	r2, r7, #3
 8011362:	1c59      	adds	r1, r3, #1
 8011364:	7011      	strb	r1, [r2, #0]
 8011366:	001a      	movs	r2, r3
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	189b      	adds	r3, r3, r2
 801136c:	781b      	ldrb	r3, [r3, #0]
 801136e:	b21a      	sxth	r2, r3
 8011370:	183b      	adds	r3, r7, r0
 8011372:	809a      	strh	r2, [r3, #4]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8011374:	0001      	movs	r1, r0
 8011376:	183b      	adds	r3, r7, r0
 8011378:	2204      	movs	r2, #4
 801137a:	5e9b      	ldrsh	r3, [r3, r2]
 801137c:	001a      	movs	r2, r3
 801137e:	0013      	movs	r3, r2
 8011380:	015b      	lsls	r3, r3, #5
 8011382:	1a9b      	subs	r3, r3, r2
 8011384:	009b      	lsls	r3, r3, #2
 8011386:	189b      	adds	r3, r3, r2
 8011388:	00db      	lsls	r3, r3, #3
 801138a:	121b      	asrs	r3, r3, #8
 801138c:	b21a      	sxth	r2, r3
 801138e:	187b      	adds	r3, r7, r1
 8011390:	809a      	strh	r2, [r3, #4]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 8011392:	197a      	adds	r2, r7, r5
 8011394:	187b      	adds	r3, r7, r1
 8011396:	0010      	movs	r0, r2
 8011398:	0019      	movs	r1, r3
 801139a:	2308      	movs	r3, #8
 801139c:	001a      	movs	r2, r3
 801139e:	f00c fdb3 	bl	801df08 <memcpy>
                    // Add Unix to Gps epcoh offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 80113a2:	197b      	adds	r3, r7, r5
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	4aa2      	ldr	r2, [pc, #648]	; (8011630 <ProcessMacCommands+0xb0c>)
 80113a8:	189a      	adds	r2, r3, r2
 80113aa:	002c      	movs	r4, r5
 80113ac:	197b      	adds	r3, r7, r5
 80113ae:	601a      	str	r2, [r3, #0]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 80113b0:	19bb      	adds	r3, r7, r6
 80113b2:	0018      	movs	r0, r3
 80113b4:	f00b fb36 	bl	801ca24 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 80113b8:	236c      	movs	r3, #108	; 0x6c
 80113ba:	18fd      	adds	r5, r7, r3
 80113bc:	489d      	ldr	r0, [pc, #628]	; (8011634 <ProcessMacCommands+0xb10>)
 80113be:	23ce      	movs	r3, #206	; 0xce
 80113c0:	0099      	lsls	r1, r3, #2
 80113c2:	0026      	movs	r6, r4
 80113c4:	193a      	adds	r2, r7, r4
 80113c6:	2404      	movs	r4, #4
 80113c8:	1843      	adds	r3, r0, r1
 80113ca:	191c      	adds	r4, r3, r4
 80113cc:	466b      	mov	r3, sp
 80113ce:	6824      	ldr	r4, [r4, #0]
 80113d0:	601c      	str	r4, [r3, #0]
 80113d2:	5843      	ldr	r3, [r0, r1]
 80113d4:	6811      	ldr	r1, [r2, #0]
 80113d6:	6852      	ldr	r2, [r2, #4]
 80113d8:	0028      	movs	r0, r5
 80113da:	f00b fa97 	bl	801c90c <SysTimeSub>
 80113de:	0035      	movs	r5, r6
 80113e0:	197c      	adds	r4, r7, r5
 80113e2:	236c      	movs	r3, #108	; 0x6c
 80113e4:	18fb      	adds	r3, r7, r3
 80113e6:	2608      	movs	r6, #8
 80113e8:	19ba      	adds	r2, r7, r6
 80113ea:	4669      	mov	r1, sp
 80113ec:	6858      	ldr	r0, [r3, #4]
 80113ee:	6008      	str	r0, [r1, #0]
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	6811      	ldr	r1, [r2, #0]
 80113f4:	6852      	ldr	r2, [r2, #4]
 80113f6:	0020      	movs	r0, r4
 80113f8:	f00b fa32 	bl	801c860 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 80113fc:	197b      	adds	r3, r7, r5
 80113fe:	6818      	ldr	r0, [r3, #0]
 8011400:	6859      	ldr	r1, [r3, #4]
 8011402:	f00b fad7 	bl	801c9b4 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8011406:	f003 fac5 	bl	8014994 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 801140a:	4a8a      	ldr	r2, [pc, #552]	; (8011634 <ProcessMacCommands+0xb10>)
 801140c:	2387      	movs	r3, #135	; 0x87
 801140e:	00db      	lsls	r3, r3, #3
 8011410:	2101      	movs	r1, #1
 8011412:	54d1      	strb	r1, [r2, r3]
                }
                break;
 8011414:	e0fc      	b.n	8011610 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8011416:	200d      	movs	r0, #13
 8011418:	f003 ffd2 	bl	80153c0 <LoRaMacConfirmQueueIsCmdActive>
 801141c:	1e03      	subs	r3, r0, #0
 801141e:	d100      	bne.n	8011422 <ProcessMacCommands+0x8fe>
 8011420:	e0f6      	b.n	8011610 <ProcessMacCommands+0xaec>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8011422:	210d      	movs	r1, #13
 8011424:	2000      	movs	r0, #0
 8011426:	f003 ff2f 	bl	8015288 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 801142a:	4a82      	ldr	r2, [pc, #520]	; (8011634 <ProcessMacCommands+0xb10>)
 801142c:	2390      	movs	r3, #144	; 0x90
 801142e:	00db      	lsls	r3, r3, #3
 8011430:	5cd3      	ldrb	r3, [r2, r3]
 8011432:	2b04      	cmp	r3, #4
 8011434:	d100      	bne.n	8011438 <ProcessMacCommands+0x914>
 8011436:	e0eb      	b.n	8011610 <ProcessMacCommands+0xaec>
 8011438:	4a7e      	ldr	r2, [pc, #504]	; (8011634 <ProcessMacCommands+0xb10>)
 801143a:	2390      	movs	r3, #144	; 0x90
 801143c:	00db      	lsls	r3, r3, #3
 801143e:	5cd3      	ldrb	r3, [r2, r3]
 8011440:	2b05      	cmp	r3, #5
 8011442:	d100      	bne.n	8011446 <ProcessMacCommands+0x922>
 8011444:	e0e4      	b.n	8011610 <ProcessMacCommands+0xaec>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 8011446:	f003 fa86 	bl	8014956 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 801144a:	e0e1      	b.n	8011610 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 801144c:	207c      	movs	r0, #124	; 0x7c
 801144e:	183b      	adds	r3, r7, r0
 8011450:	2203      	movs	r2, #3
 8011452:	701a      	strb	r2, [r3, #0]
                uint32_t frequency = 0;
 8011454:	2300      	movs	r3, #0
 8011456:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 8011458:	1cfb      	adds	r3, r7, #3
 801145a:	781b      	ldrb	r3, [r3, #0]
 801145c:	1cfa      	adds	r2, r7, #3
 801145e:	1c59      	adds	r1, r3, #1
 8011460:	7011      	strb	r1, [r2, #0]
 8011462:	001a      	movs	r2, r3
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	189b      	adds	r3, r3, r2
 8011468:	781b      	ldrb	r3, [r3, #0]
 801146a:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 801146c:	1cfb      	adds	r3, r7, #3
 801146e:	781b      	ldrb	r3, [r3, #0]
 8011470:	1cfa      	adds	r2, r7, #3
 8011472:	1c59      	adds	r1, r3, #1
 8011474:	7011      	strb	r1, [r2, #0]
 8011476:	001a      	movs	r2, r3
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	189b      	adds	r3, r3, r2
 801147c:	781b      	ldrb	r3, [r3, #0]
 801147e:	021b      	lsls	r3, r3, #8
 8011480:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011482:	4313      	orrs	r3, r2
 8011484:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8011486:	1cfb      	adds	r3, r7, #3
 8011488:	781b      	ldrb	r3, [r3, #0]
 801148a:	1cfa      	adds	r2, r7, #3
 801148c:	1c59      	adds	r1, r3, #1
 801148e:	7011      	strb	r1, [r2, #0]
 8011490:	001a      	movs	r2, r3
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	189b      	adds	r3, r3, r2
 8011496:	781b      	ldrb	r3, [r3, #0]
 8011498:	041b      	lsls	r3, r3, #16
 801149a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801149c:	4313      	orrs	r3, r2
 801149e:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 80114a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80114a2:	2264      	movs	r2, #100	; 0x64
 80114a4:	4353      	muls	r3, r2
 80114a6:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 80114a8:	1cfb      	adds	r3, r7, #3
 80114aa:	781b      	ldrb	r3, [r3, #0]
 80114ac:	1cfa      	adds	r2, r7, #3
 80114ae:	1c59      	adds	r1, r3, #1
 80114b0:	7011      	strb	r1, [r2, #0]
 80114b2:	001a      	movs	r2, r3
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	189b      	adds	r3, r3, r2
 80114b8:	781a      	ldrb	r2, [r3, #0]
 80114ba:	2677      	movs	r6, #119	; 0x77
 80114bc:	19bb      	adds	r3, r7, r6
 80114be:	210f      	movs	r1, #15
 80114c0:	400a      	ands	r2, r1
 80114c2:	701a      	strb	r2, [r3, #0]

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 80114c4:	0005      	movs	r5, r0
 80114c6:	183c      	adds	r4, r7, r0
 80114c8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80114ca:	19bb      	adds	r3, r7, r6
 80114cc:	781b      	ldrb	r3, [r3, #0]
 80114ce:	0011      	movs	r1, r2
 80114d0:	0018      	movs	r0, r3
 80114d2:	f003 fa45 	bl	8014960 <LoRaMacClassBPingSlotChannelReq>
 80114d6:	0003      	movs	r3, r0
 80114d8:	7023      	strb	r3, [r4, #0]
                macCmdPayload[0] = status;
 80114da:	2168      	movs	r1, #104	; 0x68
 80114dc:	187b      	adds	r3, r7, r1
 80114de:	197a      	adds	r2, r7, r5
 80114e0:	7812      	ldrb	r2, [r2, #0]
 80114e2:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 80114e4:	187b      	adds	r3, r7, r1
 80114e6:	2201      	movs	r2, #1
 80114e8:	0019      	movs	r1, r3
 80114ea:	2011      	movs	r0, #17
 80114ec:	f003 fbd6 	bl	8014c9c <LoRaMacCommandsAddCmd>
                break;
 80114f0:	e08e      	b.n	8011610 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 80114f2:	200e      	movs	r0, #14
 80114f4:	f003 ff64 	bl	80153c0 <LoRaMacConfirmQueueIsCmdActive>
 80114f8:	1e03      	subs	r3, r0, #0
 80114fa:	d100      	bne.n	80114fe <ProcessMacCommands+0x9da>
 80114fc:	e088      	b.n	8011610 <ProcessMacCommands+0xaec>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 80114fe:	210e      	movs	r1, #14
 8011500:	2000      	movs	r0, #0
 8011502:	f003 fec1 	bl	8015288 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 8011506:	207e      	movs	r0, #126	; 0x7e
 8011508:	183b      	adds	r3, r7, r0
 801150a:	2200      	movs	r2, #0
 801150c:	801a      	strh	r2, [r3, #0]
                    uint8_t beaconTimingChannel = 0;
 801150e:	247d      	movs	r4, #125	; 0x7d
 8011510:	193b      	adds	r3, r7, r4
 8011512:	2200      	movs	r2, #0
 8011514:	701a      	strb	r2, [r3, #0]

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8011516:	1cfb      	adds	r3, r7, #3
 8011518:	781b      	ldrb	r3, [r3, #0]
 801151a:	1cfa      	adds	r2, r7, #3
 801151c:	1c59      	adds	r1, r3, #1
 801151e:	7011      	strb	r1, [r2, #0]
 8011520:	001a      	movs	r2, r3
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	189b      	adds	r3, r3, r2
 8011526:	781a      	ldrb	r2, [r3, #0]
 8011528:	183b      	adds	r3, r7, r0
 801152a:	801a      	strh	r2, [r3, #0]
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 801152c:	1cfb      	adds	r3, r7, #3
 801152e:	781b      	ldrb	r3, [r3, #0]
 8011530:	1cfa      	adds	r2, r7, #3
 8011532:	1c59      	adds	r1, r3, #1
 8011534:	7011      	strb	r1, [r2, #0]
 8011536:	001a      	movs	r2, r3
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	189b      	adds	r3, r3, r2
 801153c:	781b      	ldrb	r3, [r3, #0]
 801153e:	021b      	lsls	r3, r3, #8
 8011540:	b21a      	sxth	r2, r3
 8011542:	183b      	adds	r3, r7, r0
 8011544:	2100      	movs	r1, #0
 8011546:	5e5b      	ldrsh	r3, [r3, r1]
 8011548:	4313      	orrs	r3, r2
 801154a:	b21a      	sxth	r2, r3
 801154c:	183b      	adds	r3, r7, r0
 801154e:	801a      	strh	r2, [r3, #0]
                    beaconTimingChannel = payload[macIndex++];
 8011550:	1cfb      	adds	r3, r7, #3
 8011552:	781b      	ldrb	r3, [r3, #0]
 8011554:	1cfa      	adds	r2, r7, #3
 8011556:	1c59      	adds	r1, r3, #1
 8011558:	7011      	strb	r1, [r2, #0]
 801155a:	001a      	movs	r2, r3
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	189a      	adds	r2, r3, r2
 8011560:	193b      	adds	r3, r7, r4
 8011562:	7812      	ldrb	r2, [r2, #0]
 8011564:	701a      	strb	r2, [r3, #0]

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8011566:	4b34      	ldr	r3, [pc, #208]	; (8011638 <ProcessMacCommands+0xb14>)
 8011568:	681a      	ldr	r2, [r3, #0]
 801156a:	193b      	adds	r3, r7, r4
 801156c:	7819      	ldrb	r1, [r3, #0]
 801156e:	183b      	adds	r3, r7, r0
 8011570:	881b      	ldrh	r3, [r3, #0]
 8011572:	0018      	movs	r0, r3
 8011574:	f003 fa00 	bl	8014978 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 8011578:	e04a      	b.n	8011610 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 801157a:	2300      	movs	r3, #0
 801157c:	2080      	movs	r0, #128	; 0x80
 801157e:	183a      	adds	r2, r7, r0
 8011580:	6013      	str	r3, [r2, #0]

                    frequency = ( uint32_t )payload[macIndex++];
 8011582:	1cfb      	adds	r3, r7, #3
 8011584:	781b      	ldrb	r3, [r3, #0]
 8011586:	1cfa      	adds	r2, r7, #3
 8011588:	1c59      	adds	r1, r3, #1
 801158a:	7011      	strb	r1, [r2, #0]
 801158c:	001a      	movs	r2, r3
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	189b      	adds	r3, r3, r2
 8011592:	781b      	ldrb	r3, [r3, #0]
 8011594:	183a      	adds	r2, r7, r0
 8011596:	6013      	str	r3, [r2, #0]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8011598:	1cfb      	adds	r3, r7, #3
 801159a:	781b      	ldrb	r3, [r3, #0]
 801159c:	1cfa      	adds	r2, r7, #3
 801159e:	1c59      	adds	r1, r3, #1
 80115a0:	7011      	strb	r1, [r2, #0]
 80115a2:	001a      	movs	r2, r3
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	189b      	adds	r3, r3, r2
 80115a8:	781b      	ldrb	r3, [r3, #0]
 80115aa:	021b      	lsls	r3, r3, #8
 80115ac:	183a      	adds	r2, r7, r0
 80115ae:	6812      	ldr	r2, [r2, #0]
 80115b0:	4313      	orrs	r3, r2
 80115b2:	183a      	adds	r2, r7, r0
 80115b4:	6013      	str	r3, [r2, #0]
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 80115b6:	1cfb      	adds	r3, r7, #3
 80115b8:	781b      	ldrb	r3, [r3, #0]
 80115ba:	1cfa      	adds	r2, r7, #3
 80115bc:	1c59      	adds	r1, r3, #1
 80115be:	7011      	strb	r1, [r2, #0]
 80115c0:	001a      	movs	r2, r3
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	189b      	adds	r3, r3, r2
 80115c6:	781b      	ldrb	r3, [r3, #0]
 80115c8:	041b      	lsls	r3, r3, #16
 80115ca:	183a      	adds	r2, r7, r0
 80115cc:	6812      	ldr	r2, [r2, #0]
 80115ce:	4313      	orrs	r3, r2
 80115d0:	183a      	adds	r2, r7, r0
 80115d2:	6013      	str	r3, [r2, #0]
                    frequency *= 100;
 80115d4:	183b      	adds	r3, r7, r0
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	2264      	movs	r2, #100	; 0x64
 80115da:	4353      	muls	r3, r2
 80115dc:	183a      	adds	r2, r7, r0
 80115de:	6013      	str	r3, [r2, #0]

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 80115e0:	183b      	adds	r3, r7, r0
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	0018      	movs	r0, r3
 80115e6:	f003 f9da 	bl	801499e <LoRaMacClassBBeaconFreqReq>
 80115ea:	1e03      	subs	r3, r0, #0
 80115ec:	d004      	beq.n	80115f8 <ProcessMacCommands+0xad4>
                    {
                        macCmdPayload[0] = 1;
 80115ee:	2368      	movs	r3, #104	; 0x68
 80115f0:	18fb      	adds	r3, r7, r3
 80115f2:	2201      	movs	r2, #1
 80115f4:	701a      	strb	r2, [r3, #0]
 80115f6:	e003      	b.n	8011600 <ProcessMacCommands+0xadc>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 80115f8:	2368      	movs	r3, #104	; 0x68
 80115fa:	18fb      	adds	r3, r7, r3
 80115fc:	2200      	movs	r2, #0
 80115fe:	701a      	strb	r2, [r3, #0]
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8011600:	2368      	movs	r3, #104	; 0x68
 8011602:	18fb      	adds	r3, r7, r3
 8011604:	2201      	movs	r2, #1
 8011606:	0019      	movs	r1, r3
 8011608:	2013      	movs	r0, #19
 801160a:	f003 fb47 	bl	8014c9c <LoRaMacCommandsAddCmd>
                }
                break;
 801160e:	46c0      	nop			; (mov r8, r8)
    while( macIndex < commandsSize )
 8011610:	1cfa      	adds	r2, r7, #3
 8011612:	1cbb      	adds	r3, r7, #2
 8011614:	7812      	ldrb	r2, [r2, #0]
 8011616:	781b      	ldrb	r3, [r3, #0]
 8011618:	429a      	cmp	r2, r3
 801161a:	d201      	bcs.n	8011620 <ProcessMacCommands+0xafc>
 801161c:	f7ff faa0 	bl	8010b60 <ProcessMacCommands+0x3c>
 8011620:	e002      	b.n	8011628 <ProcessMacCommands+0xb04>
            return;
 8011622:	46c0      	nop			; (mov r8, r8)
 8011624:	e000      	b.n	8011628 <ProcessMacCommands+0xb04>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 8011626:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8011628:	46bd      	mov	sp, r7
 801162a:	b023      	add	sp, #140	; 0x8c
 801162c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801162e:	46c0      	nop			; (mov r8, r8)
 8011630:	12d53d80 	.word	0x12d53d80
 8011634:	200005b8 	.word	0x200005b8
 8011638:	20001734 	.word	0x20001734

0801163c <Send>:

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 801163c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801163e:	b08f      	sub	sp, #60	; 0x3c
 8011640:	af02      	add	r7, sp, #8
 8011642:	60f8      	str	r0, [r7, #12]
 8011644:	0008      	movs	r0, r1
 8011646:	607a      	str	r2, [r7, #4]
 8011648:	0019      	movs	r1, r3
 801164a:	230b      	movs	r3, #11
 801164c:	18fb      	adds	r3, r7, r3
 801164e:	1c02      	adds	r2, r0, #0
 8011650:	701a      	strb	r2, [r3, #0]
 8011652:	2308      	movs	r3, #8
 8011654:	18fb      	adds	r3, r7, r3
 8011656:	1c0a      	adds	r2, r1, #0
 8011658:	801a      	strh	r2, [r3, #0]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 801165a:	232f      	movs	r3, #47	; 0x2f
 801165c:	18fb      	adds	r3, r7, r3
 801165e:	2203      	movs	r2, #3
 8011660:	701a      	strb	r2, [r3, #0]
    int8_t datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8011662:	4b90      	ldr	r3, [pc, #576]	; (80118a4 <Send+0x268>)
 8011664:	4a90      	ldr	r2, [pc, #576]	; (80118a8 <Send+0x26c>)
 8011666:	589a      	ldr	r2, [r3, r2]
 8011668:	232e      	movs	r3, #46	; 0x2e
 801166a:	18fb      	adds	r3, r7, r3
 801166c:	2185      	movs	r1, #133	; 0x85
 801166e:	5c52      	ldrb	r2, [r2, r1]
 8011670:	701a      	strb	r2, [r3, #0]
    int8_t txPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8011672:	4b8c      	ldr	r3, [pc, #560]	; (80118a4 <Send+0x268>)
 8011674:	4a8c      	ldr	r2, [pc, #560]	; (80118a8 <Send+0x26c>)
 8011676:	589a      	ldr	r2, [r3, r2]
 8011678:	232d      	movs	r3, #45	; 0x2d
 801167a:	18fb      	adds	r3, r7, r3
 801167c:	2184      	movs	r1, #132	; 0x84
 801167e:	5c52      	ldrb	r2, [r2, r1]
 8011680:	701a      	strb	r2, [r3, #0]
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8011682:	4b88      	ldr	r3, [pc, #544]	; (80118a4 <Send+0x268>)
 8011684:	4a88      	ldr	r2, [pc, #544]	; (80118a8 <Send+0x26c>)
 8011686:	589b      	ldr	r3, [r3, r2]
 8011688:	2280      	movs	r2, #128	; 0x80
 801168a:	589b      	ldr	r3, [r3, r2]
 801168c:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 801168e:	4b85      	ldr	r3, [pc, #532]	; (80118a4 <Send+0x268>)
 8011690:	4a85      	ldr	r2, [pc, #532]	; (80118a8 <Send+0x26c>)
 8011692:	589a      	ldr	r2, [r3, r2]
 8011694:	23b2      	movs	r3, #178	; 0xb2
 8011696:	005b      	lsls	r3, r3, #1
 8011698:	5cd3      	ldrb	r3, [r2, r3]
 801169a:	2b00      	cmp	r3, #0
 801169c:	d101      	bne.n	80116a2 <Send+0x66>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 801169e:	2307      	movs	r3, #7
 80116a0:	e0fb      	b.n	801189a <Send+0x25e>
    }
    if( MacCtx.NvmCtx->MaxDCycle == 0 )
 80116a2:	4b80      	ldr	r3, [pc, #512]	; (80118a4 <Send+0x268>)
 80116a4:	4a80      	ldr	r2, [pc, #512]	; (80118a8 <Send+0x26c>)
 80116a6:	589b      	ldr	r3, [r3, r2]
 80116a8:	22c8      	movs	r2, #200	; 0xc8
 80116aa:	5c9b      	ldrb	r3, [r3, r2]
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d106      	bne.n	80116be <Send+0x82>
    {
        MacCtx.NvmCtx->AggregatedTimeOff = 0;
 80116b0:	4b7c      	ldr	r3, [pc, #496]	; (80118a4 <Send+0x268>)
 80116b2:	4a7d      	ldr	r2, [pc, #500]	; (80118a8 <Send+0x26c>)
 80116b4:	589a      	ldr	r2, [r3, r2]
 80116b6:	23aa      	movs	r3, #170	; 0xaa
 80116b8:	005b      	lsls	r3, r3, #1
 80116ba:	2100      	movs	r1, #0
 80116bc:	50d1      	str	r1, [r2, r3]
    }

    fCtrl.Value = 0;
 80116be:	242c      	movs	r4, #44	; 0x2c
 80116c0:	193b      	adds	r3, r7, r4
 80116c2:	2200      	movs	r2, #0
 80116c4:	701a      	strb	r2, [r3, #0]
    fCtrl.Bits.FOptsLen      = 0;
 80116c6:	193b      	adds	r3, r7, r4
 80116c8:	781a      	ldrb	r2, [r3, #0]
 80116ca:	210f      	movs	r1, #15
 80116cc:	438a      	bics	r2, r1
 80116ce:	701a      	strb	r2, [r3, #0]
    fCtrl.Bits.Adr           = MacCtx.NvmCtx->AdrCtrlOn;
 80116d0:	4b74      	ldr	r3, [pc, #464]	; (80118a4 <Send+0x268>)
 80116d2:	4a75      	ldr	r2, [pc, #468]	; (80118a8 <Send+0x26c>)
 80116d4:	589b      	ldr	r3, [r3, r2]
 80116d6:	227e      	movs	r2, #126	; 0x7e
 80116d8:	5c9a      	ldrb	r2, [r3, r2]
 80116da:	193b      	adds	r3, r7, r4
 80116dc:	01d0      	lsls	r0, r2, #7
 80116de:	781a      	ldrb	r2, [r3, #0]
 80116e0:	217f      	movs	r1, #127	; 0x7f
 80116e2:	400a      	ands	r2, r1
 80116e4:	1c11      	adds	r1, r2, #0
 80116e6:	1c02      	adds	r2, r0, #0
 80116e8:	430a      	orrs	r2, r1
 80116ea:	701a      	strb	r2, [r3, #0]

    // Check class b
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 80116ec:	4b6d      	ldr	r3, [pc, #436]	; (80118a4 <Send+0x268>)
 80116ee:	4a6e      	ldr	r2, [pc, #440]	; (80118a8 <Send+0x26c>)
 80116f0:	589b      	ldr	r3, [r3, r2]
 80116f2:	227c      	movs	r2, #124	; 0x7c
 80116f4:	5c9b      	ldrb	r3, [r3, r2]
 80116f6:	2b01      	cmp	r3, #1
 80116f8:	d105      	bne.n	8011706 <Send+0xca>
    {
        fCtrl.Bits.FPending      = 1;
 80116fa:	193b      	adds	r3, r7, r4
 80116fc:	781a      	ldrb	r2, [r3, #0]
 80116fe:	2110      	movs	r1, #16
 8011700:	430a      	orrs	r2, r1
 8011702:	701a      	strb	r2, [r3, #0]
 8011704:	e005      	b.n	8011712 <Send+0xd6>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 8011706:	232c      	movs	r3, #44	; 0x2c
 8011708:	18fb      	adds	r3, r7, r3
 801170a:	781a      	ldrb	r2, [r3, #0]
 801170c:	2110      	movs	r1, #16
 801170e:	438a      	bics	r2, r1
 8011710:	701a      	strb	r2, [r3, #0]
    }

    // Check server ack
    if( MacCtx.NvmCtx->SrvAckRequested == true )
 8011712:	4b64      	ldr	r3, [pc, #400]	; (80118a4 <Send+0x268>)
 8011714:	4a64      	ldr	r2, [pc, #400]	; (80118a8 <Send+0x26c>)
 8011716:	589a      	ldr	r2, [r3, r2]
 8011718:	234c      	movs	r3, #76	; 0x4c
 801171a:	33ff      	adds	r3, #255	; 0xff
 801171c:	5cd3      	ldrb	r3, [r2, r3]
 801171e:	2b00      	cmp	r3, #0
 8011720:	d005      	beq.n	801172e <Send+0xf2>
    {
        fCtrl.Bits.Ack = 1;
 8011722:	232c      	movs	r3, #44	; 0x2c
 8011724:	18fb      	adds	r3, r7, r3
 8011726:	781a      	ldrb	r2, [r3, #0]
 8011728:	2120      	movs	r1, #32
 801172a:	430a      	orrs	r2, r1
 801172c:	701a      	strb	r2, [r3, #0]
    }

    // ADR next request
    adrNext.Version = MacCtx.NvmCtx->Version;
 801172e:	4b5d      	ldr	r3, [pc, #372]	; (80118a4 <Send+0x268>)
 8011730:	4a5d      	ldr	r2, [pc, #372]	; (80118a8 <Send+0x26c>)
 8011732:	5899      	ldr	r1, [r3, r2]
 8011734:	2014      	movs	r0, #20
 8011736:	183b      	adds	r3, r7, r0
 8011738:	22b0      	movs	r2, #176	; 0xb0
 801173a:	0052      	lsls	r2, r2, #1
 801173c:	588a      	ldr	r2, [r1, r2]
 801173e:	601a      	str	r2, [r3, #0]
    adrNext.UpdateChanMask = true;
 8011740:	0001      	movs	r1, r0
 8011742:	187b      	adds	r3, r7, r1
 8011744:	2201      	movs	r2, #1
 8011746:	711a      	strb	r2, [r3, #4]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8011748:	242c      	movs	r4, #44	; 0x2c
 801174a:	193b      	adds	r3, r7, r4
 801174c:	781b      	ldrb	r3, [r3, #0]
 801174e:	061b      	lsls	r3, r3, #24
 8011750:	0fdb      	lsrs	r3, r3, #31
 8011752:	b2db      	uxtb	r3, r3
 8011754:	1e5a      	subs	r2, r3, #1
 8011756:	4193      	sbcs	r3, r2
 8011758:	b2da      	uxtb	r2, r3
 801175a:	187b      	adds	r3, r7, r1
 801175c:	715a      	strb	r2, [r3, #5]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 801175e:	4b51      	ldr	r3, [pc, #324]	; (80118a4 <Send+0x268>)
 8011760:	4a51      	ldr	r2, [pc, #324]	; (80118a8 <Send+0x26c>)
 8011762:	589b      	ldr	r3, [r3, r2]
 8011764:	2280      	movs	r2, #128	; 0x80
 8011766:	589a      	ldr	r2, [r3, r2]
 8011768:	0008      	movs	r0, r1
 801176a:	183b      	adds	r3, r7, r0
 801176c:	609a      	str	r2, [r3, #8]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 801176e:	4a4d      	ldr	r2, [pc, #308]	; (80118a4 <Send+0x268>)
 8011770:	23fd      	movs	r3, #253	; 0xfd
 8011772:	009b      	lsls	r3, r3, #2
 8011774:	5ad2      	ldrh	r2, [r2, r3]
 8011776:	183b      	adds	r3, r7, r0
 8011778:	819a      	strh	r2, [r3, #12]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 801177a:	4b4a      	ldr	r3, [pc, #296]	; (80118a4 <Send+0x268>)
 801177c:	4a4b      	ldr	r2, [pc, #300]	; (80118ac <Send+0x270>)
 801177e:	5a9a      	ldrh	r2, [r3, r2]
 8011780:	183b      	adds	r3, r7, r0
 8011782:	81da      	strh	r2, [r3, #14]
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8011784:	4b47      	ldr	r3, [pc, #284]	; (80118a4 <Send+0x268>)
 8011786:	4a48      	ldr	r2, [pc, #288]	; (80118a8 <Send+0x26c>)
 8011788:	589b      	ldr	r3, [r3, r2]
 801178a:	2285      	movs	r2, #133	; 0x85
 801178c:	569a      	ldrsb	r2, [r3, r2]
 801178e:	183b      	adds	r3, r7, r0
 8011790:	741a      	strb	r2, [r3, #16]
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8011792:	4b44      	ldr	r3, [pc, #272]	; (80118a4 <Send+0x268>)
 8011794:	4a44      	ldr	r2, [pc, #272]	; (80118a8 <Send+0x26c>)
 8011796:	589b      	ldr	r3, [r3, r2]
 8011798:	2284      	movs	r2, #132	; 0x84
 801179a:	569a      	ldrsb	r2, [r3, r2]
 801179c:	183b      	adds	r3, r7, r0
 801179e:	745a      	strb	r2, [r3, #17]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 80117a0:	4b40      	ldr	r3, [pc, #256]	; (80118a4 <Send+0x268>)
 80117a2:	4a41      	ldr	r2, [pc, #260]	; (80118a8 <Send+0x26c>)
 80117a4:	589b      	ldr	r3, [r3, r2]
 80117a6:	22b8      	movs	r2, #184	; 0xb8
 80117a8:	5c9a      	ldrb	r2, [r3, r2]
 80117aa:	183b      	adds	r3, r7, r0
 80117ac:	749a      	strb	r2, [r3, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;
 80117ae:	4b3d      	ldr	r3, [pc, #244]	; (80118a4 <Send+0x268>)
 80117b0:	4a3d      	ldr	r2, [pc, #244]	; (80118a8 <Send+0x26c>)
 80117b2:	589b      	ldr	r3, [r3, r2]
 80117b4:	781a      	ldrb	r2, [r3, #0]
 80117b6:	183b      	adds	r3, r7, r0
 80117b8:	74da      	strb	r2, [r3, #19]

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 80117ba:	4b3a      	ldr	r3, [pc, #232]	; (80118a4 <Send+0x268>)
 80117bc:	4a3a      	ldr	r2, [pc, #232]	; (80118a8 <Send+0x26c>)
 80117be:	589b      	ldr	r3, [r3, r2]
 80117c0:	3385      	adds	r3, #133	; 0x85
 80117c2:	0019      	movs	r1, r3
                                               &MacCtx.NvmCtx->MacParams.ChannelsTxPower, &adrAckCounter );
 80117c4:	4b37      	ldr	r3, [pc, #220]	; (80118a4 <Send+0x268>)
 80117c6:	4a38      	ldr	r2, [pc, #224]	; (80118a8 <Send+0x26c>)
 80117c8:	589b      	ldr	r3, [r3, r2]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 80117ca:	3384      	adds	r3, #132	; 0x84
 80117cc:	001a      	movs	r2, r3
 80117ce:	2328      	movs	r3, #40	; 0x28
 80117d0:	18fb      	adds	r3, r7, r3
 80117d2:	1838      	adds	r0, r7, r0
 80117d4:	f002 fff7 	bl	80147c6 <LoRaMacAdrCalcNext>
 80117d8:	0003      	movs	r3, r0
 80117da:	0019      	movs	r1, r3
 80117dc:	0026      	movs	r6, r4
 80117de:	193b      	adds	r3, r7, r4
 80117e0:	2201      	movs	r2, #1
 80117e2:	400a      	ands	r2, r1
 80117e4:	0190      	lsls	r0, r2, #6
 80117e6:	781a      	ldrb	r2, [r3, #0]
 80117e8:	2140      	movs	r1, #64	; 0x40
 80117ea:	438a      	bics	r2, r1
 80117ec:	1c11      	adds	r1, r2, #0
 80117ee:	1c02      	adds	r2, r0, #0
 80117f0:	430a      	orrs	r2, r1
 80117f2:	701a      	strb	r2, [r3, #0]

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 80117f4:	222f      	movs	r2, #47	; 0x2f
 80117f6:	18bc      	adds	r4, r7, r2
 80117f8:	687d      	ldr	r5, [r7, #4]
 80117fa:	230b      	movs	r3, #11
 80117fc:	18fb      	adds	r3, r7, r3
 80117fe:	781a      	ldrb	r2, [r3, #0]
 8011800:	19b9      	adds	r1, r7, r6
 8011802:	68f8      	ldr	r0, [r7, #12]
 8011804:	2308      	movs	r3, #8
 8011806:	18fb      	adds	r3, r7, r3
 8011808:	881b      	ldrh	r3, [r3, #0]
 801180a:	9300      	str	r3, [sp, #0]
 801180c:	002b      	movs	r3, r5
 801180e:	f000 fd07 	bl	8012220 <PrepareFrame>
 8011812:	0003      	movs	r3, r0
 8011814:	7023      	strb	r3, [r4, #0]

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8011816:	222f      	movs	r2, #47	; 0x2f
 8011818:	18bb      	adds	r3, r7, r2
 801181a:	781b      	ldrb	r3, [r3, #0]
 801181c:	2b00      	cmp	r3, #0
 801181e:	d003      	beq.n	8011828 <Send+0x1ec>
 8011820:	18bb      	adds	r3, r7, r2
 8011822:	781b      	ldrb	r3, [r3, #0]
 8011824:	2b0a      	cmp	r3, #10
 8011826:	d10c      	bne.n	8011842 <Send+0x206>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 8011828:	232f      	movs	r3, #47	; 0x2f
 801182a:	18fc      	adds	r4, r7, r3
 801182c:	2340      	movs	r3, #64	; 0x40
 801182e:	2208      	movs	r2, #8
 8011830:	4694      	mov	ip, r2
 8011832:	44bc      	add	ip, r7
 8011834:	4463      	add	r3, ip
 8011836:	781b      	ldrb	r3, [r3, #0]
 8011838:	0018      	movs	r0, r3
 801183a:	f000 f9cd 	bl	8011bd8 <ScheduleTx>
 801183e:	0003      	movs	r3, r0
 8011840:	7023      	strb	r3, [r4, #0]
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 8011842:	232f      	movs	r3, #47	; 0x2f
 8011844:	18fb      	adds	r3, r7, r3
 8011846:	781b      	ldrb	r3, [r3, #0]
 8011848:	2b00      	cmp	r3, #0
 801184a:	d010      	beq.n	801186e <Send+0x232>
    {
        // Bad case - restore
        // Store local variables
        MacCtx.NvmCtx->MacParams.ChannelsDatarate = datarate;
 801184c:	4b15      	ldr	r3, [pc, #84]	; (80118a4 <Send+0x268>)
 801184e:	4a16      	ldr	r2, [pc, #88]	; (80118a8 <Send+0x26c>)
 8011850:	589b      	ldr	r3, [r3, r2]
 8011852:	222e      	movs	r2, #46	; 0x2e
 8011854:	18ba      	adds	r2, r7, r2
 8011856:	2185      	movs	r1, #133	; 0x85
 8011858:	7812      	ldrb	r2, [r2, #0]
 801185a:	545a      	strb	r2, [r3, r1]
        MacCtx.NvmCtx->MacParams.ChannelsTxPower = txPower;
 801185c:	4b11      	ldr	r3, [pc, #68]	; (80118a4 <Send+0x268>)
 801185e:	4a12      	ldr	r2, [pc, #72]	; (80118a8 <Send+0x26c>)
 8011860:	589b      	ldr	r3, [r3, r2]
 8011862:	222d      	movs	r2, #45	; 0x2d
 8011864:	18ba      	adds	r2, r7, r2
 8011866:	2184      	movs	r1, #132	; 0x84
 8011868:	7812      	ldrb	r2, [r2, #0]
 801186a:	545a      	strb	r2, [r3, r1]
 801186c:	e012      	b.n	8011894 <Send+0x258>
    }
    else
    {
        // Good case
        MacCtx.NvmCtx->SrvAckRequested = false;
 801186e:	4b0d      	ldr	r3, [pc, #52]	; (80118a4 <Send+0x268>)
 8011870:	4a0d      	ldr	r2, [pc, #52]	; (80118a8 <Send+0x26c>)
 8011872:	589a      	ldr	r2, [r3, r2]
 8011874:	234c      	movs	r3, #76	; 0x4c
 8011876:	33ff      	adds	r3, #255	; 0xff
 8011878:	2100      	movs	r1, #0
 801187a:	54d1      	strb	r1, [r2, r3]
        MacCtx.NvmCtx->AdrAckCounter = adrAckCounter;
 801187c:	4b09      	ldr	r3, [pc, #36]	; (80118a4 <Send+0x268>)
 801187e:	4a0a      	ldr	r2, [pc, #40]	; (80118a8 <Send+0x26c>)
 8011880:	589b      	ldr	r3, [r3, r2]
 8011882:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011884:	2180      	movs	r1, #128	; 0x80
 8011886:	505a      	str	r2, [r3, r1]
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8011888:	f003 fa92 	bl	8014db0 <LoRaMacCommandsRemoveNoneStickyCmds>
 801188c:	1e03      	subs	r3, r0, #0
 801188e:	d001      	beq.n	8011894 <Send+0x258>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011890:	2313      	movs	r3, #19
 8011892:	e002      	b.n	801189a <Send+0x25e>
        }
    }
    return status;
 8011894:	232f      	movs	r3, #47	; 0x2f
 8011896:	18fb      	adds	r3, r7, r3
 8011898:	781b      	ldrb	r3, [r3, #0]
}
 801189a:	0018      	movs	r0, r3
 801189c:	46bd      	mov	sp, r7
 801189e:	b00d      	add	sp, #52	; 0x34
 80118a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80118a2:	46c0      	nop			; (mov r8, r8)
 80118a4:	200005b8 	.word	0x200005b8
 80118a8:	00000484 	.word	0x00000484
 80118ac:	000003f6 	.word	0x000003f6

080118b0 <SendReJoinReq>:

  static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType ) // ПОПЫТКА
{
 80118b0:	b5b0      	push	{r4, r5, r7, lr}
 80118b2:	b084      	sub	sp, #16
 80118b4:	af00      	add	r7, sp, #0
 80118b6:	0002      	movs	r2, r0
 80118b8:	1dfb      	adds	r3, r7, #7
 80118ba:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80118bc:	230e      	movs	r3, #14
 80118be:	18fb      	adds	r3, r7, r3
 80118c0:	2200      	movs	r2, #0
 80118c2:	701a      	strb	r2, [r3, #0]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0; //  не влияет
 80118c4:	240c      	movs	r4, #12
 80118c6:	193b      	adds	r3, r7, r4
 80118c8:	2200      	movs	r2, #0
 80118ca:	701a      	strb	r2, [r3, #0]
    bool allowDelayedTx = true;
 80118cc:	250f      	movs	r5, #15
 80118ce:	197b      	adds	r3, r7, r5
 80118d0:	2201      	movs	r2, #1
 80118d2:	701a      	strb	r2, [r3, #0]

    // Setup join/rejoin message
    switch( joinReqType )
 80118d4:	1dfb      	adds	r3, r7, #7
 80118d6:	781b      	ldrb	r3, [r3, #0]
 80118d8:	2bff      	cmp	r3, #255	; 0xff
 80118da:	d130      	bne.n	801193e <SendReJoinReq+0x8e>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 80118dc:	2000      	movs	r0, #0
 80118de:	f7fe ff7b 	bl	80107d8 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 80118e2:	4a21      	ldr	r2, [pc, #132]	; (8011968 <SendReJoinReq+0xb8>)
 80118e4:	2382      	movs	r3, #130	; 0x82
 80118e6:	005b      	lsls	r3, r3, #1
 80118e8:	2100      	movs	r1, #0
 80118ea:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 80118ec:	4a1e      	ldr	r2, [pc, #120]	; (8011968 <SendReJoinReq+0xb8>)
 80118ee:	2384      	movs	r3, #132	; 0x84
 80118f0:	005b      	lsls	r3, r3, #1
 80118f2:	491e      	ldr	r1, [pc, #120]	; (801196c <SendReJoinReq+0xbc>)
 80118f4:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 80118f6:	4a1c      	ldr	r2, [pc, #112]	; (8011968 <SendReJoinReq+0xb8>)
 80118f8:	2386      	movs	r3, #134	; 0x86
 80118fa:	005b      	lsls	r3, r3, #1
 80118fc:	21ff      	movs	r1, #255	; 0xff
 80118fe:	54d1      	strb	r1, [r2, r3]

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 8011900:	193b      	adds	r3, r7, r4
 8011902:	781a      	ldrb	r2, [r3, #0]
 8011904:	211f      	movs	r1, #31
 8011906:	400a      	ands	r2, r1
 8011908:	701a      	strb	r2, [r3, #0]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 801190a:	193b      	adds	r3, r7, r4
 801190c:	7819      	ldrb	r1, [r3, #0]
 801190e:	4a16      	ldr	r2, [pc, #88]	; (8011968 <SendReJoinReq+0xb8>)
 8011910:	230e      	movs	r3, #14
 8011912:	33ff      	adds	r3, #255	; 0xff
 8011914:	54d1      	strb	r1, [r2, r3]

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 8011916:	f7fc fa7b 	bl	800de10 <SecureElementGetJoinEui>
 801191a:	0001      	movs	r1, r0
 801191c:	4b14      	ldr	r3, [pc, #80]	; (8011970 <SendReJoinReq+0xc0>)
 801191e:	2208      	movs	r2, #8
 8011920:	0018      	movs	r0, r3
 8011922:	f007 fde9 	bl	80194f8 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 8011926:	f7fc fa4f 	bl	800ddc8 <SecureElementGetDevEui>
 801192a:	0001      	movs	r1, r0
 801192c:	4b11      	ldr	r3, [pc, #68]	; (8011974 <SendReJoinReq+0xc4>)
 801192e:	2208      	movs	r2, #8
 8011930:	0018      	movs	r0, r3
 8011932:	f007 fde1 	bl	80194f8 <memcpy1>

            allowDelayedTx = false;
 8011936:	197b      	adds	r3, r7, r5
 8011938:	2200      	movs	r2, #0
 801193a:	701a      	strb	r2, [r3, #0]

            break;
 801193c:	e004      	b.n	8011948 <SendReJoinReq+0x98>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 801193e:	230e      	movs	r3, #14
 8011940:	18fb      	adds	r3, r7, r3
 8011942:	2202      	movs	r2, #2
 8011944:	701a      	strb	r2, [r3, #0]
            break;
 8011946:	46c0      	nop			; (mov r8, r8)
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 8011948:	250e      	movs	r5, #14
 801194a:	197c      	adds	r4, r7, r5
 801194c:	230f      	movs	r3, #15
 801194e:	18fb      	adds	r3, r7, r3
 8011950:	781b      	ldrb	r3, [r3, #0]
 8011952:	0018      	movs	r0, r3
 8011954:	f000 f940 	bl	8011bd8 <ScheduleTx>
 8011958:	0003      	movs	r3, r0
 801195a:	7023      	strb	r3, [r4, #0]
    return status;
 801195c:	197b      	adds	r3, r7, r5
 801195e:	781b      	ldrb	r3, [r3, #0]
}
 8011960:	0018      	movs	r0, r3
 8011962:	46bd      	mov	sp, r7
 8011964:	b004      	add	sp, #16
 8011966:	bdb0      	pop	{r4, r5, r7, pc}
 8011968:	200005b8 	.word	0x200005b8
 801196c:	200005ba 	.word	0x200005ba
 8011970:	200006c6 	.word	0x200006c6
 8011974:	200006ce 	.word	0x200006ce

08011978 <CheckForClassBCollision>:
 // NEW
static LoRaMacStatus_t CheckForClassBCollision( void )
{
 8011978:	b580      	push	{r7, lr}
 801197a:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 801197c:	f002 ffa2 	bl	80148c4 <LoRaMacClassBIsBeaconExpected>
 8011980:	1e03      	subs	r3, r0, #0
 8011982:	d001      	beq.n	8011988 <CheckForClassBCollision+0x10>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8011984:	230e      	movs	r3, #14
 8011986:	e013      	b.n	80119b0 <CheckForClassBCollision+0x38>
    }

    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8011988:	4b0b      	ldr	r3, [pc, #44]	; (80119b8 <CheckForClassBCollision+0x40>)
 801198a:	4a0c      	ldr	r2, [pc, #48]	; (80119bc <CheckForClassBCollision+0x44>)
 801198c:	589b      	ldr	r3, [r3, r2]
 801198e:	227c      	movs	r2, #124	; 0x7c
 8011990:	5c9b      	ldrb	r3, [r3, r2]
 8011992:	2b01      	cmp	r3, #1
 8011994:	d10b      	bne.n	80119ae <CheckForClassBCollision+0x36>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8011996:	f002 ff9b 	bl	80148d0 <LoRaMacClassBIsPingExpected>
 801199a:	1e03      	subs	r3, r0, #0
 801199c:	d001      	beq.n	80119a2 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 801199e:	230f      	movs	r3, #15
 80119a0:	e006      	b.n	80119b0 <CheckForClassBCollision+0x38>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 80119a2:	f002 ff9b 	bl	80148dc <LoRaMacClassBIsMulticastExpected>
 80119a6:	1e03      	subs	r3, r0, #0
 80119a8:	d001      	beq.n	80119ae <CheckForClassBCollision+0x36>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 80119aa:	230f      	movs	r3, #15
 80119ac:	e000      	b.n	80119b0 <CheckForClassBCollision+0x38>
        }
    }
    return LORAMAC_STATUS_OK;
 80119ae:	2300      	movs	r3, #0
}
 80119b0:	0018      	movs	r0, r3
 80119b2:	46bd      	mov	sp, r7
 80119b4:	bd80      	pop	{r7, pc}
 80119b6:	46c0      	nop			; (mov r8, r8)
 80119b8:	200005b8 	.word	0x200005b8
 80119bc:	00000484 	.word	0x00000484

080119c0 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 80119c0:	b5b0      	push	{r4, r5, r7, lr}
 80119c2:	b082      	sub	sp, #8
 80119c4:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 80119c6:	4b44      	ldr	r3, [pc, #272]	; (8011ad8 <ComputeRxWindowParameters+0x118>)
 80119c8:	4a44      	ldr	r2, [pc, #272]	; (8011adc <ComputeRxWindowParameters+0x11c>)
 80119ca:	589b      	ldr	r3, [r3, r2]
 80119cc:	781c      	ldrb	r4, [r3, #0]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 80119ce:	4b42      	ldr	r3, [pc, #264]	; (8011ad8 <ComputeRxWindowParameters+0x118>)
 80119d0:	4a42      	ldr	r2, [pc, #264]	; (8011adc <ComputeRxWindowParameters+0x11c>)
 80119d2:	589b      	ldr	r3, [r3, r2]
 80119d4:	7818      	ldrb	r0, [r3, #0]
                                                          MacCtx.NvmCtx->MacParams.DownlinkDwellTime,
 80119d6:	4b40      	ldr	r3, [pc, #256]	; (8011ad8 <ComputeRxWindowParameters+0x118>)
 80119d8:	4a40      	ldr	r2, [pc, #256]	; (8011adc <ComputeRxWindowParameters+0x11c>)
 80119da:	589b      	ldr	r3, [r3, r2]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 80119dc:	22b9      	movs	r2, #185	; 0xb9
 80119de:	5c99      	ldrb	r1, [r3, r2]
                                                          MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 80119e0:	4b3d      	ldr	r3, [pc, #244]	; (8011ad8 <ComputeRxWindowParameters+0x118>)
 80119e2:	4a3e      	ldr	r2, [pc, #248]	; (8011adc <ComputeRxWindowParameters+0x11c>)
 80119e4:	589b      	ldr	r3, [r3, r2]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 80119e6:	2285      	movs	r2, #133	; 0x85
 80119e8:	569a      	ldrsb	r2, [r3, r2]
                                                          MacCtx.NvmCtx->MacParams.Rx1DrOffset ),
 80119ea:	4b3b      	ldr	r3, [pc, #236]	; (8011ad8 <ComputeRxWindowParameters+0x118>)
 80119ec:	4d3b      	ldr	r5, [pc, #236]	; (8011adc <ComputeRxWindowParameters+0x11c>)
 80119ee:	595b      	ldr	r3, [r3, r5]
 80119f0:	25a5      	movs	r5, #165	; 0xa5
 80119f2:	5d5b      	ldrb	r3, [r3, r5]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 80119f4:	b25b      	sxtb	r3, r3
 80119f6:	f005 fad1 	bl	8016f9c <RegionApplyDrOffset>
 80119fa:	0003      	movs	r3, r0
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 80119fc:	b259      	sxtb	r1, r3
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 80119fe:	4b36      	ldr	r3, [pc, #216]	; (8011ad8 <ComputeRxWindowParameters+0x118>)
 8011a00:	4a36      	ldr	r2, [pc, #216]	; (8011adc <ComputeRxWindowParameters+0x11c>)
 8011a02:	589b      	ldr	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8011a04:	228c      	movs	r2, #140	; 0x8c
 8011a06:	5c9a      	ldrb	r2, [r3, r2]
                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 8011a08:	4b33      	ldr	r3, [pc, #204]	; (8011ad8 <ComputeRxWindowParameters+0x118>)
 8011a0a:	4834      	ldr	r0, [pc, #208]	; (8011adc <ComputeRxWindowParameters+0x11c>)
 8011a0c:	581b      	ldr	r3, [r3, r0]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8011a0e:	2088      	movs	r0, #136	; 0x88
 8011a10:	5818      	ldr	r0, [r3, r0]
 8011a12:	4b33      	ldr	r3, [pc, #204]	; (8011ae0 <ComputeRxWindowParameters+0x120>)
 8011a14:	9300      	str	r3, [sp, #0]
 8011a16:	0003      	movs	r3, r0
 8011a18:	0020      	movs	r0, r4
 8011a1a:	f005 f99d 	bl	8016d58 <RegionComputeRxWindowParameters>
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8011a1e:	4b2e      	ldr	r3, [pc, #184]	; (8011ad8 <ComputeRxWindowParameters+0x118>)
 8011a20:	4a2e      	ldr	r2, [pc, #184]	; (8011adc <ComputeRxWindowParameters+0x11c>)
 8011a22:	589b      	ldr	r3, [r3, r2]
 8011a24:	7818      	ldrb	r0, [r3, #0]
                                     MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
 8011a26:	4b2c      	ldr	r3, [pc, #176]	; (8011ad8 <ComputeRxWindowParameters+0x118>)
 8011a28:	4a2c      	ldr	r2, [pc, #176]	; (8011adc <ComputeRxWindowParameters+0x11c>)
 8011a2a:	589b      	ldr	r3, [r3, r2]
 8011a2c:	22ac      	movs	r2, #172	; 0xac
 8011a2e:	5c9b      	ldrb	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8011a30:	b259      	sxtb	r1, r3
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 8011a32:	4b29      	ldr	r3, [pc, #164]	; (8011ad8 <ComputeRxWindowParameters+0x118>)
 8011a34:	4a29      	ldr	r2, [pc, #164]	; (8011adc <ComputeRxWindowParameters+0x11c>)
 8011a36:	589b      	ldr	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8011a38:	228c      	movs	r2, #140	; 0x8c
 8011a3a:	5c9a      	ldrb	r2, [r3, r2]
                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 8011a3c:	4b26      	ldr	r3, [pc, #152]	; (8011ad8 <ComputeRxWindowParameters+0x118>)
 8011a3e:	4c27      	ldr	r4, [pc, #156]	; (8011adc <ComputeRxWindowParameters+0x11c>)
 8011a40:	591b      	ldr	r3, [r3, r4]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8011a42:	2488      	movs	r4, #136	; 0x88
 8011a44:	591c      	ldr	r4, [r3, r4]
 8011a46:	4b27      	ldr	r3, [pc, #156]	; (8011ae4 <ComputeRxWindowParameters+0x124>)
 8011a48:	9300      	str	r3, [sp, #0]
 8011a4a:	0023      	movs	r3, r4
 8011a4c:	f005 f984 	bl	8016d58 <RegionComputeRxWindowParameters>
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8011a50:	4b21      	ldr	r3, [pc, #132]	; (8011ad8 <ComputeRxWindowParameters+0x118>)
 8011a52:	4a22      	ldr	r2, [pc, #136]	; (8011adc <ComputeRxWindowParameters+0x11c>)
 8011a54:	589b      	ldr	r3, [r3, r2]
 8011a56:	2294      	movs	r2, #148	; 0x94
 8011a58:	589b      	ldr	r3, [r3, r2]
 8011a5a:	491f      	ldr	r1, [pc, #124]	; (8011ad8 <ComputeRxWindowParameters+0x118>)
 8011a5c:	22f1      	movs	r2, #241	; 0xf1
 8011a5e:	0092      	lsls	r2, r2, #2
 8011a60:	588a      	ldr	r2, [r1, r2]
 8011a62:	1899      	adds	r1, r3, r2
 8011a64:	4a1c      	ldr	r2, [pc, #112]	; (8011ad8 <ComputeRxWindowParameters+0x118>)
 8011a66:	23ec      	movs	r3, #236	; 0xec
 8011a68:	009b      	lsls	r3, r3, #2
 8011a6a:	50d1      	str	r1, [r2, r3]
    MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8011a6c:	4b1a      	ldr	r3, [pc, #104]	; (8011ad8 <ComputeRxWindowParameters+0x118>)
 8011a6e:	4a1b      	ldr	r2, [pc, #108]	; (8011adc <ComputeRxWindowParameters+0x11c>)
 8011a70:	589b      	ldr	r3, [r3, r2]
 8011a72:	2298      	movs	r2, #152	; 0x98
 8011a74:	589b      	ldr	r3, [r3, r2]
 8011a76:	4918      	ldr	r1, [pc, #96]	; (8011ad8 <ComputeRxWindowParameters+0x118>)
 8011a78:	22f6      	movs	r2, #246	; 0xf6
 8011a7a:	0092      	lsls	r2, r2, #2
 8011a7c:	588a      	ldr	r2, [r1, r2]
 8011a7e:	1899      	adds	r1, r3, r2
 8011a80:	4a15      	ldr	r2, [pc, #84]	; (8011ad8 <ComputeRxWindowParameters+0x118>)
 8011a82:	23ed      	movs	r3, #237	; 0xed
 8011a84:	009b      	lsls	r3, r3, #2
 8011a86:	50d1      	str	r1, [r2, r3]

    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8011a88:	4b13      	ldr	r3, [pc, #76]	; (8011ad8 <ComputeRxWindowParameters+0x118>)
 8011a8a:	4a14      	ldr	r2, [pc, #80]	; (8011adc <ComputeRxWindowParameters+0x11c>)
 8011a8c:	589a      	ldr	r2, [r3, r2]
 8011a8e:	23b2      	movs	r3, #178	; 0xb2
 8011a90:	005b      	lsls	r3, r3, #1
 8011a92:	5cd3      	ldrb	r3, [r2, r3]
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d11b      	bne.n	8011ad0 <ComputeRxWindowParameters+0x110>
    {
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8011a98:	4b0f      	ldr	r3, [pc, #60]	; (8011ad8 <ComputeRxWindowParameters+0x118>)
 8011a9a:	4a10      	ldr	r2, [pc, #64]	; (8011adc <ComputeRxWindowParameters+0x11c>)
 8011a9c:	589b      	ldr	r3, [r3, r2]
 8011a9e:	229c      	movs	r2, #156	; 0x9c
 8011aa0:	589b      	ldr	r3, [r3, r2]
 8011aa2:	490d      	ldr	r1, [pc, #52]	; (8011ad8 <ComputeRxWindowParameters+0x118>)
 8011aa4:	22f1      	movs	r2, #241	; 0xf1
 8011aa6:	0092      	lsls	r2, r2, #2
 8011aa8:	588a      	ldr	r2, [r1, r2]
 8011aaa:	1899      	adds	r1, r3, r2
 8011aac:	4a0a      	ldr	r2, [pc, #40]	; (8011ad8 <ComputeRxWindowParameters+0x118>)
 8011aae:	23ec      	movs	r3, #236	; 0xec
 8011ab0:	009b      	lsls	r3, r3, #2
 8011ab2:	50d1      	str	r1, [r2, r3]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8011ab4:	4b08      	ldr	r3, [pc, #32]	; (8011ad8 <ComputeRxWindowParameters+0x118>)
 8011ab6:	4a09      	ldr	r2, [pc, #36]	; (8011adc <ComputeRxWindowParameters+0x11c>)
 8011ab8:	589b      	ldr	r3, [r3, r2]
 8011aba:	22a0      	movs	r2, #160	; 0xa0
 8011abc:	589b      	ldr	r3, [r3, r2]
 8011abe:	4906      	ldr	r1, [pc, #24]	; (8011ad8 <ComputeRxWindowParameters+0x118>)
 8011ac0:	22f6      	movs	r2, #246	; 0xf6
 8011ac2:	0092      	lsls	r2, r2, #2
 8011ac4:	588a      	ldr	r2, [r1, r2]
 8011ac6:	1899      	adds	r1, r3, r2
 8011ac8:	4a03      	ldr	r2, [pc, #12]	; (8011ad8 <ComputeRxWindowParameters+0x118>)
 8011aca:	23ed      	movs	r3, #237	; 0xed
 8011acc:	009b      	lsls	r3, r3, #2
 8011ace:	50d1      	str	r1, [r2, r3]
    }
}
 8011ad0:	46c0      	nop			; (mov r8, r8)
 8011ad2:	46bd      	mov	sp, r7
 8011ad4:	bdb0      	pop	{r4, r5, r7, pc}
 8011ad6:	46c0      	nop			; (mov r8, r8)
 8011ad8:	200005b8 	.word	0x200005b8
 8011adc:	00000484 	.word	0x00000484
 8011ae0:	20000970 	.word	0x20000970
 8011ae4:	20000984 	.word	0x20000984

08011ae8 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 8011ae8:	b580      	push	{r7, lr}
 8011aea:	b082      	sub	sp, #8
 8011aec:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 8011aee:	2300      	movs	r3, #0
 8011af0:	607b      	str	r3, [r7, #4]

    if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 8011af2:	4b15      	ldr	r3, [pc, #84]	; (8011b48 <VerifyTxFrame+0x60>)
 8011af4:	4a15      	ldr	r2, [pc, #84]	; (8011b4c <VerifyTxFrame+0x64>)
 8011af6:	589a      	ldr	r2, [r3, r2]
 8011af8:	23b2      	movs	r3, #178	; 0xb2
 8011afa:	005b      	lsls	r3, r3, #1
 8011afc:	5cd3      	ldrb	r3, [r2, r3]
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d01d      	beq.n	8011b3e <VerifyTxFrame+0x56>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8011b02:	1d3b      	adds	r3, r7, #4
 8011b04:	0018      	movs	r0, r3
 8011b06:	f003 f99f 	bl	8014e48 <LoRaMacCommandsGetSizeSerializedCmds>
 8011b0a:	1e03      	subs	r3, r0, #0
 8011b0c:	d001      	beq.n	8011b12 <VerifyTxFrame+0x2a>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011b0e:	2313      	movs	r3, #19
 8011b10:	e016      	b.n	8011b40 <VerifyTxFrame+0x58>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, MacCtx.NvmCtx->MacParams.ChannelsDatarate, macCmdsSize ) == false )
 8011b12:	4b0d      	ldr	r3, [pc, #52]	; (8011b48 <VerifyTxFrame+0x60>)
 8011b14:	4a0e      	ldr	r2, [pc, #56]	; (8011b50 <VerifyTxFrame+0x68>)
 8011b16:	5c98      	ldrb	r0, [r3, r2]
 8011b18:	4b0b      	ldr	r3, [pc, #44]	; (8011b48 <VerifyTxFrame+0x60>)
 8011b1a:	4a0c      	ldr	r2, [pc, #48]	; (8011b4c <VerifyTxFrame+0x64>)
 8011b1c:	589b      	ldr	r3, [r3, r2]
 8011b1e:	2285      	movs	r2, #133	; 0x85
 8011b20:	569b      	ldrsb	r3, [r3, r2]
 8011b22:	687a      	ldr	r2, [r7, #4]
 8011b24:	b2d2      	uxtb	r2, r2
 8011b26:	0019      	movs	r1, r3
 8011b28:	f7fe ffb0 	bl	8010a8c <ValidatePayloadLength>
 8011b2c:	0003      	movs	r3, r0
 8011b2e:	001a      	movs	r2, r3
 8011b30:	2301      	movs	r3, #1
 8011b32:	4053      	eors	r3, r2
 8011b34:	b2db      	uxtb	r3, r3
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d001      	beq.n	8011b3e <VerifyTxFrame+0x56>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 8011b3a:	2308      	movs	r3, #8
 8011b3c:	e000      	b.n	8011b40 <VerifyTxFrame+0x58>
        }
    }
    return LORAMAC_STATUS_OK;
 8011b3e:	2300      	movs	r3, #0
}
 8011b40:	0018      	movs	r0, r3
 8011b42:	46bd      	mov	sp, r7
 8011b44:	b002      	add	sp, #8
 8011b46:	bd80      	pop	{r7, pc}
 8011b48:	200005b8 	.word	0x200005b8
 8011b4c:	00000484 	.word	0x00000484
 8011b50:	00000237 	.word	0x00000237

08011b54 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 8011b54:	b590      	push	{r4, r7, lr}
 8011b56:	b083      	sub	sp, #12
 8011b58:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 8011b5a:	4a1d      	ldr	r2, [pc, #116]	; (8011bd0 <SerializeTxFrame+0x7c>)
 8011b5c:	2382      	movs	r3, #130	; 0x82
 8011b5e:	005b      	lsls	r3, r3, #1
 8011b60:	5cd3      	ldrb	r3, [r2, r3]
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d002      	beq.n	8011b6c <SerializeTxFrame+0x18>
 8011b66:	2b04      	cmp	r3, #4
 8011b68:	d015      	beq.n	8011b96 <SerializeTxFrame+0x42>
 8011b6a:	e029      	b.n	8011bc0 <SerializeTxFrame+0x6c>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8011b6c:	1dfc      	adds	r4, r7, #7
 8011b6e:	4b19      	ldr	r3, [pc, #100]	; (8011bd4 <SerializeTxFrame+0x80>)
 8011b70:	0018      	movs	r0, r3
 8011b72:	f004 fe6b 	bl	801684c <LoRaMacSerializerJoinRequest>
 8011b76:	0003      	movs	r3, r0
 8011b78:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8011b7a:	1dfb      	adds	r3, r7, #7
 8011b7c:	781b      	ldrb	r3, [r3, #0]
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d001      	beq.n	8011b86 <SerializeTxFrame+0x32>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011b82:	2311      	movs	r3, #17
 8011b84:	e01f      	b.n	8011bc6 <SerializeTxFrame+0x72>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8011b86:	4a12      	ldr	r2, [pc, #72]	; (8011bd0 <SerializeTxFrame+0x7c>)
 8011b88:	2386      	movs	r3, #134	; 0x86
 8011b8a:	005b      	lsls	r3, r3, #1
 8011b8c:	5cd3      	ldrb	r3, [r2, r3]
 8011b8e:	b29a      	uxth	r2, r3
 8011b90:	4b0f      	ldr	r3, [pc, #60]	; (8011bd0 <SerializeTxFrame+0x7c>)
 8011b92:	801a      	strh	r2, [r3, #0]
            break;
 8011b94:	e016      	b.n	8011bc4 <SerializeTxFrame+0x70>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8011b96:	1dfc      	adds	r4, r7, #7
 8011b98:	4b0e      	ldr	r3, [pc, #56]	; (8011bd4 <SerializeTxFrame+0x80>)
 8011b9a:	0018      	movs	r0, r3
 8011b9c:	f004 fef1 	bl	8016982 <LoRaMacSerializerData>
 8011ba0:	0003      	movs	r3, r0
 8011ba2:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8011ba4:	1dfb      	adds	r3, r7, #7
 8011ba6:	781b      	ldrb	r3, [r3, #0]
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d001      	beq.n	8011bb0 <SerializeTxFrame+0x5c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011bac:	2311      	movs	r3, #17
 8011bae:	e00a      	b.n	8011bc6 <SerializeTxFrame+0x72>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8011bb0:	4a07      	ldr	r2, [pc, #28]	; (8011bd0 <SerializeTxFrame+0x7c>)
 8011bb2:	2386      	movs	r3, #134	; 0x86
 8011bb4:	005b      	lsls	r3, r3, #1
 8011bb6:	5cd3      	ldrb	r3, [r2, r3]
 8011bb8:	b29a      	uxth	r2, r3
 8011bba:	4b05      	ldr	r3, [pc, #20]	; (8011bd0 <SerializeTxFrame+0x7c>)
 8011bbc:	801a      	strh	r2, [r3, #0]
            break;
 8011bbe:	e001      	b.n	8011bc4 <SerializeTxFrame+0x70>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8011bc0:	2303      	movs	r3, #3
 8011bc2:	e000      	b.n	8011bc6 <SerializeTxFrame+0x72>
    }
    return LORAMAC_STATUS_OK;
 8011bc4:	2300      	movs	r3, #0
}
 8011bc6:	0018      	movs	r0, r3
 8011bc8:	46bd      	mov	sp, r7
 8011bca:	b003      	add	sp, #12
 8011bcc:	bd90      	pop	{r4, r7, pc}
 8011bce:	46c0      	nop			; (mov r8, r8)
 8011bd0:	200005b8 	.word	0x200005b8
 8011bd4:	200006c0 	.word	0x200006c0

08011bd8 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8011bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011bda:	b091      	sub	sp, #68	; 0x44
 8011bdc:	af02      	add	r7, sp, #8
 8011bde:	0002      	movs	r2, r0
 8011be0:	230f      	movs	r3, #15
 8011be2:	18fb      	adds	r3, r7, r3
 8011be4:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011be6:	2537      	movs	r5, #55	; 0x37
 8011be8:	197b      	adds	r3, r7, r5
 8011bea:	2203      	movs	r2, #3
 8011bec:	701a      	strb	r2, [r3, #0]
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8011bee:	197c      	adds	r4, r7, r5
 8011bf0:	f7ff fec2 	bl	8011978 <CheckForClassBCollision>
 8011bf4:	0003      	movs	r3, r0
 8011bf6:	7023      	strb	r3, [r4, #0]
    if( status != LORAMAC_STATUS_OK )
 8011bf8:	002a      	movs	r2, r5
 8011bfa:	18bb      	adds	r3, r7, r2
 8011bfc:	781b      	ldrb	r3, [r3, #0]
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d002      	beq.n	8011c08 <ScheduleTx+0x30>
    {
        return status;
 8011c02:	18bb      	adds	r3, r7, r2
 8011c04:	781b      	ldrb	r3, [r3, #0]
 8011c06:	e0c3      	b.n	8011d90 <ScheduleTx+0x1b8>
    }

    // Update back-off
    CalculateBackOff( );
 8011c08:	f000 f940 	bl	8011e8c <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8011c0c:	2537      	movs	r5, #55	; 0x37
 8011c0e:	197c      	adds	r4, r7, r5
 8011c10:	f7ff ffa0 	bl	8011b54 <SerializeTxFrame>
 8011c14:	0003      	movs	r3, r0
 8011c16:	7023      	strb	r3, [r4, #0]
    if( status != LORAMAC_STATUS_OK )
 8011c18:	002a      	movs	r2, r5
 8011c1a:	18bb      	adds	r3, r7, r2
 8011c1c:	781b      	ldrb	r3, [r3, #0]
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d002      	beq.n	8011c28 <ScheduleTx+0x50>
    {
        return status;
 8011c22:	18bb      	adds	r3, r7, r2
 8011c24:	781b      	ldrb	r3, [r3, #0]
 8011c26:	e0b3      	b.n	8011d90 <ScheduleTx+0x1b8>
    }

    nextChan.AggrTimeOff = MacCtx.NvmCtx->AggregatedTimeOff;
 8011c28:	4b5b      	ldr	r3, [pc, #364]	; (8011d98 <ScheduleTx+0x1c0>)
 8011c2a:	4a5c      	ldr	r2, [pc, #368]	; (8011d9c <ScheduleTx+0x1c4>)
 8011c2c:	589a      	ldr	r2, [r3, r2]
 8011c2e:	23aa      	movs	r3, #170	; 0xaa
 8011c30:	005b      	lsls	r3, r3, #1
 8011c32:	58d2      	ldr	r2, [r2, r3]
 8011c34:	2414      	movs	r4, #20
 8011c36:	193b      	adds	r3, r7, r4
 8011c38:	601a      	str	r2, [r3, #0]
    nextChan.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8011c3a:	4b57      	ldr	r3, [pc, #348]	; (8011d98 <ScheduleTx+0x1c0>)
 8011c3c:	4a57      	ldr	r2, [pc, #348]	; (8011d9c <ScheduleTx+0x1c4>)
 8011c3e:	589b      	ldr	r3, [r3, r2]
 8011c40:	2285      	movs	r2, #133	; 0x85
 8011c42:	569a      	ldrsb	r2, [r3, r2]
 8011c44:	193b      	adds	r3, r7, r4
 8011c46:	721a      	strb	r2, [r3, #8]
    nextChan.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 8011c48:	4b53      	ldr	r3, [pc, #332]	; (8011d98 <ScheduleTx+0x1c0>)
 8011c4a:	4a54      	ldr	r2, [pc, #336]	; (8011d9c <ScheduleTx+0x1c4>)
 8011c4c:	589b      	ldr	r3, [r3, r2]
 8011c4e:	22c9      	movs	r2, #201	; 0xc9
 8011c50:	5c9a      	ldrb	r2, [r3, r2]
 8011c52:	193b      	adds	r3, r7, r4
 8011c54:	729a      	strb	r2, [r3, #10]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 8011c56:	232c      	movs	r3, #44	; 0x2c
 8011c58:	18fb      	adds	r3, r7, r3
 8011c5a:	0018      	movs	r0, r3
 8011c5c:	f00a ff24 	bl	801caa8 <SysTimeGetMcuTime>
 8011c60:	4b4d      	ldr	r3, [pc, #308]	; (8011d98 <ScheduleTx+0x1c0>)
 8011c62:	4a4e      	ldr	r2, [pc, #312]	; (8011d9c <ScheduleTx+0x1c4>)
 8011c64:	5898      	ldr	r0, [r3, r2]
 8011c66:	193d      	adds	r5, r7, r4
 8011c68:	003e      	movs	r6, r7
 8011c6a:	23ac      	movs	r3, #172	; 0xac
 8011c6c:	0059      	lsls	r1, r3, #1
 8011c6e:	232c      	movs	r3, #44	; 0x2c
 8011c70:	18fa      	adds	r2, r7, r3
 8011c72:	2404      	movs	r4, #4
 8011c74:	1843      	adds	r3, r0, r1
 8011c76:	191c      	adds	r4, r3, r4
 8011c78:	466b      	mov	r3, sp
 8011c7a:	6824      	ldr	r4, [r4, #0]
 8011c7c:	601c      	str	r4, [r3, #0]
 8011c7e:	5843      	ldr	r3, [r0, r1]
 8011c80:	6811      	ldr	r1, [r2, #0]
 8011c82:	6852      	ldr	r2, [r2, #4]
 8011c84:	0030      	movs	r0, r6
 8011c86:	f00a fe41 	bl	801c90c <SysTimeSub>
 8011c8a:	003a      	movs	r2, r7
 8011c8c:	002b      	movs	r3, r5
 8011c8e:	330c      	adds	r3, #12
 8011c90:	ca21      	ldmia	r2!, {r0, r5}
 8011c92:	c321      	stmia	r3!, {r0, r5}
    nextChan.LastAggrTx = MacCtx.NvmCtx->LastTxDoneTime;
 8011c94:	4b40      	ldr	r3, [pc, #256]	; (8011d98 <ScheduleTx+0x1c0>)
 8011c96:	4a41      	ldr	r2, [pc, #260]	; (8011d9c <ScheduleTx+0x1c4>)
 8011c98:	589a      	ldr	r2, [r3, r2]
 8011c9a:	23a8      	movs	r3, #168	; 0xa8
 8011c9c:	005b      	lsls	r3, r3, #1
 8011c9e:	58d2      	ldr	r2, [r2, r3]
 8011ca0:	2114      	movs	r1, #20
 8011ca2:	187b      	adds	r3, r7, r1
 8011ca4:	605a      	str	r2, [r3, #4]
    nextChan.LastTxIsJoinRequest = false;
 8011ca6:	187b      	adds	r3, r7, r1
 8011ca8:	2200      	movs	r2, #0
 8011caa:	751a      	strb	r2, [r3, #20]
    nextChan.Joined = true;
 8011cac:	187b      	adds	r3, r7, r1
 8011cae:	2201      	movs	r2, #1
 8011cb0:	725a      	strb	r2, [r3, #9]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8011cb2:	4b39      	ldr	r3, [pc, #228]	; (8011d98 <ScheduleTx+0x1c0>)
 8011cb4:	881a      	ldrh	r2, [r3, #0]
 8011cb6:	187b      	adds	r3, r7, r1
 8011cb8:	82da      	strh	r2, [r3, #22]

    // Setup the parameters based on the join status
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8011cba:	4b37      	ldr	r3, [pc, #220]	; (8011d98 <ScheduleTx+0x1c0>)
 8011cbc:	4a37      	ldr	r2, [pc, #220]	; (8011d9c <ScheduleTx+0x1c4>)
 8011cbe:	589a      	ldr	r2, [r3, r2]
 8011cc0:	23b2      	movs	r3, #178	; 0xb2
 8011cc2:	005b      	lsls	r3, r3, #1
 8011cc4:	5cd3      	ldrb	r3, [r2, r3]
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d105      	bne.n	8011cd6 <ScheduleTx+0xfe>
    {
        nextChan.LastTxIsJoinRequest = true;
 8011cca:	187b      	adds	r3, r7, r1
 8011ccc:	2201      	movs	r2, #1
 8011cce:	751a      	strb	r2, [r3, #20]
        nextChan.Joined = false;
 8011cd0:	187b      	adds	r3, r7, r1
 8011cd2:	2200      	movs	r2, #0
 8011cd4:	725a      	strb	r2, [r3, #9]
    }

    // Select channel
    status = RegionNextChannel( MacCtx.NvmCtx->Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &MacCtx.NvmCtx->AggregatedTimeOff );
 8011cd6:	4b30      	ldr	r3, [pc, #192]	; (8011d98 <ScheduleTx+0x1c0>)
 8011cd8:	4a30      	ldr	r2, [pc, #192]	; (8011d9c <ScheduleTx+0x1c4>)
 8011cda:	589b      	ldr	r3, [r3, r2]
 8011cdc:	7818      	ldrb	r0, [r3, #0]
 8011cde:	4b2e      	ldr	r3, [pc, #184]	; (8011d98 <ScheduleTx+0x1c0>)
 8011ce0:	4a2e      	ldr	r2, [pc, #184]	; (8011d9c <ScheduleTx+0x1c4>)
 8011ce2:	589b      	ldr	r3, [r3, r2]
 8011ce4:	3355      	adds	r3, #85	; 0x55
 8011ce6:	33ff      	adds	r3, #255	; 0xff
 8011ce8:	2637      	movs	r6, #55	; 0x37
 8011cea:	19bc      	adds	r4, r7, r6
 8011cec:	4d2c      	ldr	r5, [pc, #176]	; (8011da0 <ScheduleTx+0x1c8>)
 8011cee:	4a2d      	ldr	r2, [pc, #180]	; (8011da4 <ScheduleTx+0x1cc>)
 8011cf0:	2114      	movs	r1, #20
 8011cf2:	1879      	adds	r1, r7, r1
 8011cf4:	9300      	str	r3, [sp, #0]
 8011cf6:	002b      	movs	r3, r5
 8011cf8:	f005 f920 	bl	8016f3c <RegionNextChannel>
 8011cfc:	0003      	movs	r3, r0
 8011cfe:	7023      	strb	r3, [r4, #0]

    if( status != LORAMAC_STATUS_OK )
 8011d00:	19bb      	adds	r3, r7, r6
 8011d02:	781b      	ldrb	r3, [r3, #0]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d02c      	beq.n	8011d62 <ScheduleTx+0x18a>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 8011d08:	19bb      	adds	r3, r7, r6
 8011d0a:	781b      	ldrb	r3, [r3, #0]
 8011d0c:	2b0b      	cmp	r3, #11
 8011d0e:	d124      	bne.n	8011d5a <ScheduleTx+0x182>
 8011d10:	230f      	movs	r3, #15
 8011d12:	18fb      	adds	r3, r7, r3
 8011d14:	781b      	ldrb	r3, [r3, #0]
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d01f      	beq.n	8011d5a <ScheduleTx+0x182>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 8011d1a:	4a1f      	ldr	r2, [pc, #124]	; (8011d98 <ScheduleTx+0x1c0>)
 8011d1c:	2391      	movs	r3, #145	; 0x91
 8011d1e:	00db      	lsls	r3, r3, #3
 8011d20:	58d3      	ldr	r3, [r2, r3]
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d017      	beq.n	8011d56 <ScheduleTx+0x17e>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8011d26:	4a1c      	ldr	r2, [pc, #112]	; (8011d98 <ScheduleTx+0x1c0>)
 8011d28:	23d0      	movs	r3, #208	; 0xd0
 8011d2a:	009b      	lsls	r3, r3, #2
 8011d2c:	58d3      	ldr	r3, [r2, r3]
 8011d2e:	2220      	movs	r2, #32
 8011d30:	431a      	orrs	r2, r3
 8011d32:	0011      	movs	r1, r2
 8011d34:	4a18      	ldr	r2, [pc, #96]	; (8011d98 <ScheduleTx+0x1c0>)
 8011d36:	23d0      	movs	r3, #208	; 0xd0
 8011d38:	009b      	lsls	r3, r3, #2
 8011d3a:	50d1      	str	r1, [r2, r3]
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8011d3c:	4a16      	ldr	r2, [pc, #88]	; (8011d98 <ScheduleTx+0x1c0>)
 8011d3e:	2391      	movs	r3, #145	; 0x91
 8011d40:	00db      	lsls	r3, r3, #3
 8011d42:	58d2      	ldr	r2, [r2, r3]
 8011d44:	4b18      	ldr	r3, [pc, #96]	; (8011da8 <ScheduleTx+0x1d0>)
 8011d46:	0011      	movs	r1, r2
 8011d48:	0018      	movs	r0, r3
 8011d4a:	f00b f805 	bl	801cd58 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 8011d4e:	4b16      	ldr	r3, [pc, #88]	; (8011da8 <ScheduleTx+0x1d0>)
 8011d50:	0018      	movs	r0, r3
 8011d52:	f00a ff11 	bl	801cb78 <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 8011d56:	2300      	movs	r3, #0
 8011d58:	e01a      	b.n	8011d90 <ScheduleTx+0x1b8>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8011d5a:	2337      	movs	r3, #55	; 0x37
 8011d5c:	18fb      	adds	r3, r7, r3
 8011d5e:	781b      	ldrb	r3, [r3, #0]
 8011d60:	e016      	b.n	8011d90 <ScheduleTx+0x1b8>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 8011d62:	f7ff fe2d 	bl	80119c0 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 8011d66:	2537      	movs	r5, #55	; 0x37
 8011d68:	197c      	adds	r4, r7, r5
 8011d6a:	f7ff febd 	bl	8011ae8 <VerifyTxFrame>
 8011d6e:	0003      	movs	r3, r0
 8011d70:	7023      	strb	r3, [r4, #0]
    if( status != LORAMAC_STATUS_OK )
 8011d72:	002a      	movs	r2, r5
 8011d74:	18bb      	adds	r3, r7, r2
 8011d76:	781b      	ldrb	r3, [r3, #0]
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d002      	beq.n	8011d82 <ScheduleTx+0x1aa>
    {
        return status;
 8011d7c:	18bb      	adds	r3, r7, r2
 8011d7e:	781b      	ldrb	r3, [r3, #0]
 8011d80:	e006      	b.n	8011d90 <ScheduleTx+0x1b8>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8011d82:	4b05      	ldr	r3, [pc, #20]	; (8011d98 <ScheduleTx+0x1c0>)
 8011d84:	4a09      	ldr	r2, [pc, #36]	; (8011dac <ScheduleTx+0x1d4>)
 8011d86:	5c9b      	ldrb	r3, [r3, r2]
 8011d88:	0018      	movs	r0, r3
 8011d8a:	f000 fb99 	bl	80124c0 <SendFrameOnChannel>
 8011d8e:	0003      	movs	r3, r0
}
 8011d90:	0018      	movs	r0, r3
 8011d92:	46bd      	mov	sp, r7
 8011d94:	b00f      	add	sp, #60	; 0x3c
 8011d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d98:	200005b8 	.word	0x200005b8
 8011d9c:	00000484 	.word	0x00000484
 8011da0:	20000a40 	.word	0x20000a40
 8011da4:	200009cd 	.word	0x200009cd
 8011da8:	20000920 	.word	0x20000920
 8011dac:	00000415 	.word	0x00000415

08011db0 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8011db0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011db2:	b085      	sub	sp, #20
 8011db4:	af00      	add	r7, sp, #0
 8011db6:	0002      	movs	r2, r0
 8011db8:	1dfb      	adds	r3, r7, #7
 8011dba:	701a      	strb	r2, [r3, #0]
 8011dbc:	1dbb      	adds	r3, r7, #6
 8011dbe:	1c0a      	adds	r2, r1, #0
 8011dc0:	701a      	strb	r2, [r3, #0]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8011dc2:	230f      	movs	r3, #15
 8011dc4:	18fb      	adds	r3, r7, r3
 8011dc6:	2213      	movs	r2, #19
 8011dc8:	701a      	strb	r2, [r3, #0]
    uint32_t fCntUp = 0;
 8011dca:	2300      	movs	r3, #0
 8011dcc:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 8011dce:	4a2c      	ldr	r2, [pc, #176]	; (8011e80 <SecureFrame+0xd0>)
 8011dd0:	2382      	movs	r3, #130	; 0x82
 8011dd2:	005b      	lsls	r3, r3, #1
 8011dd4:	5cd3      	ldrb	r3, [r2, r3]
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d002      	beq.n	8011de0 <SecureFrame+0x30>
 8011dda:	2b04      	cmp	r3, #4
 8011ddc:	d016      	beq.n	8011e0c <SecureFrame+0x5c>
 8011dde:	e047      	b.n	8011e70 <SecureFrame+0xc0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8011de0:	250f      	movs	r5, #15
 8011de2:	197c      	adds	r4, r7, r5
 8011de4:	4b27      	ldr	r3, [pc, #156]	; (8011e84 <SecureFrame+0xd4>)
 8011de6:	0018      	movs	r0, r3
 8011de8:	f004 f86a 	bl	8015ec0 <LoRaMacCryptoPrepareJoinRequest>
 8011dec:	0003      	movs	r3, r0
 8011dee:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8011df0:	197b      	adds	r3, r7, r5
 8011df2:	781b      	ldrb	r3, [r3, #0]
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d001      	beq.n	8011dfc <SecureFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011df8:	2311      	movs	r3, #17
 8011dfa:	e03c      	b.n	8011e76 <SecureFrame+0xc6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8011dfc:	4a20      	ldr	r2, [pc, #128]	; (8011e80 <SecureFrame+0xd0>)
 8011dfe:	2386      	movs	r3, #134	; 0x86
 8011e00:	005b      	lsls	r3, r3, #1
 8011e02:	5cd3      	ldrb	r3, [r2, r3]
 8011e04:	b29a      	uxth	r2, r3
 8011e06:	4b1e      	ldr	r3, [pc, #120]	; (8011e80 <SecureFrame+0xd0>)
 8011e08:	801a      	strh	r2, [r3, #0]
            break;
 8011e0a:	e033      	b.n	8011e74 <SecureFrame+0xc4>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8011e0c:	2308      	movs	r3, #8
 8011e0e:	18fb      	adds	r3, r7, r3
 8011e10:	0018      	movs	r0, r3
 8011e12:	f003 ff67 	bl	8015ce4 <LoRaMacCryptoGetFCntUp>
 8011e16:	1e03      	subs	r3, r0, #0
 8011e18:	d001      	beq.n	8011e1e <SecureFrame+0x6e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8011e1a:	2312      	movs	r3, #18
 8011e1c:	e02b      	b.n	8011e76 <SecureFrame+0xc6>
            }

            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 8011e1e:	4a18      	ldr	r2, [pc, #96]	; (8011e80 <SecureFrame+0xd0>)
 8011e20:	2382      	movs	r3, #130	; 0x82
 8011e22:	00db      	lsls	r3, r3, #3
 8011e24:	5cd3      	ldrb	r3, [r2, r3]
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d104      	bne.n	8011e34 <SecureFrame+0x84>
 8011e2a:	4b15      	ldr	r3, [pc, #84]	; (8011e80 <SecureFrame+0xd0>)
 8011e2c:	4a16      	ldr	r2, [pc, #88]	; (8011e88 <SecureFrame+0xd8>)
 8011e2e:	5c9b      	ldrb	r3, [r3, r2]
 8011e30:	2b01      	cmp	r3, #1
 8011e32:	d902      	bls.n	8011e3a <SecureFrame+0x8a>
            {
                fCntUp -= 1;
 8011e34:	68bb      	ldr	r3, [r7, #8]
 8011e36:	3b01      	subs	r3, #1
 8011e38:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8011e3a:	68b8      	ldr	r0, [r7, #8]
 8011e3c:	260f      	movs	r6, #15
 8011e3e:	19bc      	adds	r4, r7, r6
 8011e40:	4d10      	ldr	r5, [pc, #64]	; (8011e84 <SecureFrame+0xd4>)
 8011e42:	1dbb      	adds	r3, r7, #6
 8011e44:	781a      	ldrb	r2, [r3, #0]
 8011e46:	1dfb      	adds	r3, r7, #7
 8011e48:	7819      	ldrb	r1, [r3, #0]
 8011e4a:	002b      	movs	r3, r5
 8011e4c:	f004 f942 	bl	80160d4 <LoRaMacCryptoSecureMessage>
 8011e50:	0003      	movs	r3, r0
 8011e52:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8011e54:	19bb      	adds	r3, r7, r6
 8011e56:	781b      	ldrb	r3, [r3, #0]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d001      	beq.n	8011e60 <SecureFrame+0xb0>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011e5c:	2311      	movs	r3, #17
 8011e5e:	e00a      	b.n	8011e76 <SecureFrame+0xc6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8011e60:	4a07      	ldr	r2, [pc, #28]	; (8011e80 <SecureFrame+0xd0>)
 8011e62:	2386      	movs	r3, #134	; 0x86
 8011e64:	005b      	lsls	r3, r3, #1
 8011e66:	5cd3      	ldrb	r3, [r2, r3]
 8011e68:	b29a      	uxth	r2, r3
 8011e6a:	4b05      	ldr	r3, [pc, #20]	; (8011e80 <SecureFrame+0xd0>)
 8011e6c:	801a      	strh	r2, [r3, #0]
            break;
 8011e6e:	e001      	b.n	8011e74 <SecureFrame+0xc4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8011e70:	2303      	movs	r3, #3
 8011e72:	e000      	b.n	8011e76 <SecureFrame+0xc6>
    }
    return LORAMAC_STATUS_OK;
 8011e74:	2300      	movs	r3, #0
}
 8011e76:	0018      	movs	r0, r3
 8011e78:	46bd      	mov	sp, r7
 8011e7a:	b005      	add	sp, #20
 8011e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e7e:	46c0      	nop			; (mov r8, r8)
 8011e80:	200005b8 	.word	0x200005b8
 8011e84:	200006c0 	.word	0x200006c0
 8011e88:	00000412 	.word	0x00000412

08011e8c <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8011e8c:	b580      	push	{r7, lr}
 8011e8e:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( MacCtx.NvmCtx->AggregatedTimeOff == 0 )
 8011e90:	4b0e      	ldr	r3, [pc, #56]	; (8011ecc <CalculateBackOff+0x40>)
 8011e92:	4a0f      	ldr	r2, [pc, #60]	; (8011ed0 <CalculateBackOff+0x44>)
 8011e94:	589a      	ldr	r2, [r3, r2]
 8011e96:	23aa      	movs	r3, #170	; 0xaa
 8011e98:	005b      	lsls	r3, r3, #1
 8011e9a:	58d3      	ldr	r3, [r2, r3]
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d111      	bne.n	8011ec4 <CalculateBackOff+0x38>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        MacCtx.NvmCtx->AggregatedTimeOff = ( MacCtx.TxTimeOnAir * MacCtx.NvmCtx->AggregatedDCycle - MacCtx.TxTimeOnAir );
 8011ea0:	4b0a      	ldr	r3, [pc, #40]	; (8011ecc <CalculateBackOff+0x40>)
 8011ea2:	4a0b      	ldr	r2, [pc, #44]	; (8011ed0 <CalculateBackOff+0x44>)
 8011ea4:	589a      	ldr	r2, [r3, r2]
 8011ea6:	23a6      	movs	r3, #166	; 0xa6
 8011ea8:	005b      	lsls	r3, r3, #1
 8011eaa:	5ad3      	ldrh	r3, [r2, r3]
 8011eac:	3b01      	subs	r3, #1
 8011eae:	4907      	ldr	r1, [pc, #28]	; (8011ecc <CalculateBackOff+0x40>)
 8011eb0:	2283      	movs	r2, #131	; 0x83
 8011eb2:	00d2      	lsls	r2, r2, #3
 8011eb4:	5889      	ldr	r1, [r1, r2]
 8011eb6:	4a05      	ldr	r2, [pc, #20]	; (8011ecc <CalculateBackOff+0x40>)
 8011eb8:	4805      	ldr	r0, [pc, #20]	; (8011ed0 <CalculateBackOff+0x44>)
 8011eba:	5812      	ldr	r2, [r2, r0]
 8011ebc:	4359      	muls	r1, r3
 8011ebe:	23aa      	movs	r3, #170	; 0xaa
 8011ec0:	005b      	lsls	r3, r3, #1
 8011ec2:	50d1      	str	r1, [r2, r3]
    }
}
 8011ec4:	46c0      	nop			; (mov r8, r8)
 8011ec6:	46bd      	mov	sp, r7
 8011ec8:	bd80      	pop	{r7, pc}
 8011eca:	46c0      	nop			; (mov r8, r8)
 8011ecc:	200005b8 	.word	0x200005b8
 8011ed0:	00000484 	.word	0x00000484

08011ed4 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8011ed4:	b580      	push	{r7, lr}
 8011ed6:	b082      	sub	sp, #8
 8011ed8:	af00      	add	r7, sp, #0
 8011eda:	1d3b      	adds	r3, r7, #4
 8011edc:	7019      	strb	r1, [r3, #0]
 8011ede:	0011      	movs	r1, r2
 8011ee0:	1dfb      	adds	r3, r7, #7
 8011ee2:	1c02      	adds	r2, r0, #0
 8011ee4:	701a      	strb	r2, [r3, #0]
 8011ee6:	1dbb      	adds	r3, r7, #6
 8011ee8:	1c0a      	adds	r2, r1, #0
 8011eea:	701a      	strb	r2, [r3, #0]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8011eec:	1dfb      	adds	r3, r7, #7
 8011eee:	781b      	ldrb	r3, [r3, #0]
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d003      	beq.n	8011efc <RemoveMacCommands+0x28>
 8011ef4:	1dfb      	adds	r3, r7, #7
 8011ef6:	781b      	ldrb	r3, [r3, #0]
 8011ef8:	2b01      	cmp	r3, #1
 8011efa:	d10f      	bne.n	8011f1c <RemoveMacCommands+0x48>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 8011efc:	1dbb      	adds	r3, r7, #6
 8011efe:	781b      	ldrb	r3, [r3, #0]
 8011f00:	2b01      	cmp	r3, #1
 8011f02:	d109      	bne.n	8011f18 <RemoveMacCommands+0x44>
        {
            if( fCtrl.Bits.Ack == 1 )
 8011f04:	1d3b      	adds	r3, r7, #4
 8011f06:	781b      	ldrb	r3, [r3, #0]
 8011f08:	2220      	movs	r2, #32
 8011f0a:	4013      	ands	r3, r2
 8011f0c:	b2db      	uxtb	r3, r3
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d004      	beq.n	8011f1c <RemoveMacCommands+0x48>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8011f12:	f002 ff75 	bl	8014e00 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 8011f16:	e001      	b.n	8011f1c <RemoveMacCommands+0x48>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8011f18:	f002 ff72 	bl	8014e00 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8011f1c:	46c0      	nop			; (mov r8, r8)
 8011f1e:	46bd      	mov	sp, r7
 8011f20:	b002      	add	sp, #8
 8011f22:	bd80      	pop	{r7, pc}

08011f24 <ResetMacParameters>:

static void ResetMacParameters( void )
{
 8011f24:	b590      	push	{r4, r7, lr}
 8011f26:	b083      	sub	sp, #12
 8011f28:	af00      	add	r7, sp, #0
    MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
 8011f2a:	4b72      	ldr	r3, [pc, #456]	; (80120f4 <ResetMacParameters+0x1d0>)
 8011f2c:	4a72      	ldr	r2, [pc, #456]	; (80120f8 <ResetMacParameters+0x1d4>)
 8011f2e:	589a      	ldr	r2, [r3, r2]
 8011f30:	23b2      	movs	r3, #178	; 0xb2
 8011f32:	005b      	lsls	r3, r3, #1
 8011f34:	2100      	movs	r1, #0
 8011f36:	54d1      	strb	r1, [r2, r3]

    // ADR counter
    MacCtx.NvmCtx->AdrAckCounter = 0;
 8011f38:	4b6e      	ldr	r3, [pc, #440]	; (80120f4 <ResetMacParameters+0x1d0>)
 8011f3a:	4a6f      	ldr	r2, [pc, #444]	; (80120f8 <ResetMacParameters+0x1d4>)
 8011f3c:	589b      	ldr	r3, [r3, r2]
 8011f3e:	2280      	movs	r2, #128	; 0x80
 8011f40:	2100      	movs	r1, #0
 8011f42:	5099      	str	r1, [r3, r2]

    MacCtx.ChannelsNbTransCounter = 0;
 8011f44:	4a6b      	ldr	r2, [pc, #428]	; (80120f4 <ResetMacParameters+0x1d0>)
 8011f46:	2382      	movs	r3, #130	; 0x82
 8011f48:	00db      	lsls	r3, r3, #3
 8011f4a:	2100      	movs	r1, #0
 8011f4c:	54d1      	strb	r1, [r2, r3]
    MacCtx.AckTimeoutRetries = 1; //
 8011f4e:	4b69      	ldr	r3, [pc, #420]	; (80120f4 <ResetMacParameters+0x1d0>)
 8011f50:	4a6a      	ldr	r2, [pc, #424]	; (80120fc <ResetMacParameters+0x1d8>)
 8011f52:	2101      	movs	r1, #1
 8011f54:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetriesCounter = 1; //
 8011f56:	4b67      	ldr	r3, [pc, #412]	; (80120f4 <ResetMacParameters+0x1d0>)
 8011f58:	4a69      	ldr	r2, [pc, #420]	; (8012100 <ResetMacParameters+0x1dc>)
 8011f5a:	2101      	movs	r1, #1
 8011f5c:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetry = false;
 8011f5e:	4b65      	ldr	r3, [pc, #404]	; (80120f4 <ResetMacParameters+0x1d0>)
 8011f60:	4a68      	ldr	r2, [pc, #416]	; (8012104 <ResetMacParameters+0x1e0>)
 8011f62:	2100      	movs	r1, #0
 8011f64:	5499      	strb	r1, [r3, r2]

    MacCtx.NvmCtx->MaxDCycle = 0;
 8011f66:	4b63      	ldr	r3, [pc, #396]	; (80120f4 <ResetMacParameters+0x1d0>)
 8011f68:	4a63      	ldr	r2, [pc, #396]	; (80120f8 <ResetMacParameters+0x1d4>)
 8011f6a:	589b      	ldr	r3, [r3, r2]
 8011f6c:	22c8      	movs	r2, #200	; 0xc8
 8011f6e:	2100      	movs	r1, #0
 8011f70:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->AggregatedDCycle = 1;
 8011f72:	4b60      	ldr	r3, [pc, #384]	; (80120f4 <ResetMacParameters+0x1d0>)
 8011f74:	4a60      	ldr	r2, [pc, #384]	; (80120f8 <ResetMacParameters+0x1d4>)
 8011f76:	589a      	ldr	r2, [r3, r2]
 8011f78:	23a6      	movs	r3, #166	; 0xa6
 8011f7a:	005b      	lsls	r3, r3, #1
 8011f7c:	2101      	movs	r1, #1
 8011f7e:	52d1      	strh	r1, [r2, r3]

    MacCtx.NvmCtx->MacParams.ChannelsTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 8011f80:	4b5c      	ldr	r3, [pc, #368]	; (80120f4 <ResetMacParameters+0x1d0>)
 8011f82:	4a5d      	ldr	r2, [pc, #372]	; (80120f8 <ResetMacParameters+0x1d4>)
 8011f84:	589a      	ldr	r2, [r3, r2]
 8011f86:	4b5b      	ldr	r3, [pc, #364]	; (80120f4 <ResetMacParameters+0x1d0>)
 8011f88:	495b      	ldr	r1, [pc, #364]	; (80120f8 <ResetMacParameters+0x1d4>)
 8011f8a:	585b      	ldr	r3, [r3, r1]
 8011f8c:	2104      	movs	r1, #4
 8011f8e:	5651      	ldrsb	r1, [r2, r1]
 8011f90:	2284      	movs	r2, #132	; 0x84
 8011f92:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 8011f94:	4b57      	ldr	r3, [pc, #348]	; (80120f4 <ResetMacParameters+0x1d0>)
 8011f96:	4a58      	ldr	r2, [pc, #352]	; (80120f8 <ResetMacParameters+0x1d4>)
 8011f98:	589a      	ldr	r2, [r3, r2]
 8011f9a:	4b56      	ldr	r3, [pc, #344]	; (80120f4 <ResetMacParameters+0x1d0>)
 8011f9c:	4956      	ldr	r1, [pc, #344]	; (80120f8 <ResetMacParameters+0x1d4>)
 8011f9e:	585b      	ldr	r3, [r3, r1]
 8011fa0:	2105      	movs	r1, #5
 8011fa2:	5651      	ldrsb	r1, [r2, r1]
 8011fa4:	2285      	movs	r2, #133	; 0x85
 8011fa6:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.Rx1DrOffset = MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset;
 8011fa8:	4b52      	ldr	r3, [pc, #328]	; (80120f4 <ResetMacParameters+0x1d0>)
 8011faa:	4a53      	ldr	r2, [pc, #332]	; (80120f8 <ResetMacParameters+0x1d4>)
 8011fac:	589a      	ldr	r2, [r3, r2]
 8011fae:	4b51      	ldr	r3, [pc, #324]	; (80120f4 <ResetMacParameters+0x1d0>)
 8011fb0:	4951      	ldr	r1, [pc, #324]	; (80120f8 <ResetMacParameters+0x1d4>)
 8011fb2:	585b      	ldr	r3, [r3, r1]
 8011fb4:	2125      	movs	r1, #37	; 0x25
 8011fb6:	5c51      	ldrb	r1, [r2, r1]
 8011fb8:	22a5      	movs	r2, #165	; 0xa5
 8011fba:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 8011fbc:	4b4d      	ldr	r3, [pc, #308]	; (80120f4 <ResetMacParameters+0x1d0>)
 8011fbe:	4a4e      	ldr	r2, [pc, #312]	; (80120f8 <ResetMacParameters+0x1d4>)
 8011fc0:	589a      	ldr	r2, [r3, r2]
 8011fc2:	4b4c      	ldr	r3, [pc, #304]	; (80120f4 <ResetMacParameters+0x1d0>)
 8011fc4:	494c      	ldr	r1, [pc, #304]	; (80120f8 <ResetMacParameters+0x1d4>)
 8011fc6:	585b      	ldr	r3, [r3, r1]
 8011fc8:	21a8      	movs	r1, #168	; 0xa8
 8011fca:	185b      	adds	r3, r3, r1
 8011fcc:	3228      	adds	r2, #40	; 0x28
 8011fce:	ca03      	ldmia	r2!, {r0, r1}
 8011fd0:	c303      	stmia	r3!, {r0, r1}
    MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 8011fd2:	4b48      	ldr	r3, [pc, #288]	; (80120f4 <ResetMacParameters+0x1d0>)
 8011fd4:	4a48      	ldr	r2, [pc, #288]	; (80120f8 <ResetMacParameters+0x1d4>)
 8011fd6:	589a      	ldr	r2, [r3, r2]
 8011fd8:	4b46      	ldr	r3, [pc, #280]	; (80120f4 <ResetMacParameters+0x1d0>)
 8011fda:	4947      	ldr	r1, [pc, #284]	; (80120f8 <ResetMacParameters+0x1d4>)
 8011fdc:	585b      	ldr	r3, [r3, r1]
 8011fde:	21b0      	movs	r1, #176	; 0xb0
 8011fe0:	185b      	adds	r3, r3, r1
 8011fe2:	3230      	adds	r2, #48	; 0x30
 8011fe4:	ca03      	ldmia	r2!, {r0, r1}
 8011fe6:	c303      	stmia	r3!, {r0, r1}
    MacCtx.NvmCtx->MacParams.UplinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime;
 8011fe8:	4b42      	ldr	r3, [pc, #264]	; (80120f4 <ResetMacParameters+0x1d0>)
 8011fea:	4a43      	ldr	r2, [pc, #268]	; (80120f8 <ResetMacParameters+0x1d4>)
 8011fec:	589a      	ldr	r2, [r3, r2]
 8011fee:	4b41      	ldr	r3, [pc, #260]	; (80120f4 <ResetMacParameters+0x1d0>)
 8011ff0:	4941      	ldr	r1, [pc, #260]	; (80120f8 <ResetMacParameters+0x1d4>)
 8011ff2:	585b      	ldr	r3, [r3, r1]
 8011ff4:	2138      	movs	r1, #56	; 0x38
 8011ff6:	5c51      	ldrb	r1, [r2, r1]
 8011ff8:	22b8      	movs	r2, #184	; 0xb8
 8011ffa:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime;
 8011ffc:	4b3d      	ldr	r3, [pc, #244]	; (80120f4 <ResetMacParameters+0x1d0>)
 8011ffe:	4a3e      	ldr	r2, [pc, #248]	; (80120f8 <ResetMacParameters+0x1d4>)
 8012000:	589a      	ldr	r2, [r3, r2]
 8012002:	4b3c      	ldr	r3, [pc, #240]	; (80120f4 <ResetMacParameters+0x1d0>)
 8012004:	493c      	ldr	r1, [pc, #240]	; (80120f8 <ResetMacParameters+0x1d4>)
 8012006:	585b      	ldr	r3, [r3, r1]
 8012008:	2139      	movs	r1, #57	; 0x39
 801200a:	5c51      	ldrb	r1, [r2, r1]
 801200c:	22b9      	movs	r2, #185	; 0xb9
 801200e:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.MaxEirp = MacCtx.NvmCtx->MacParamsDefaults.MaxEirp;
 8012010:	4b38      	ldr	r3, [pc, #224]	; (80120f4 <ResetMacParameters+0x1d0>)
 8012012:	4a39      	ldr	r2, [pc, #228]	; (80120f8 <ResetMacParameters+0x1d4>)
 8012014:	589b      	ldr	r3, [r3, r2]
 8012016:	4a37      	ldr	r2, [pc, #220]	; (80120f4 <ResetMacParameters+0x1d0>)
 8012018:	4937      	ldr	r1, [pc, #220]	; (80120f8 <ResetMacParameters+0x1d4>)
 801201a:	5852      	ldr	r2, [r2, r1]
 801201c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801201e:	21bc      	movs	r1, #188	; 0xbc
 8012020:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.AntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 8012022:	4b34      	ldr	r3, [pc, #208]	; (80120f4 <ResetMacParameters+0x1d0>)
 8012024:	4a34      	ldr	r2, [pc, #208]	; (80120f8 <ResetMacParameters+0x1d4>)
 8012026:	589b      	ldr	r3, [r3, r2]
 8012028:	4a32      	ldr	r2, [pc, #200]	; (80120f4 <ResetMacParameters+0x1d0>)
 801202a:	4933      	ldr	r1, [pc, #204]	; (80120f8 <ResetMacParameters+0x1d4>)
 801202c:	5852      	ldr	r2, [r2, r1]
 801202e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012030:	21c0      	movs	r1, #192	; 0xc0
 8012032:	5053      	str	r3, [r2, r1]

    MacCtx.NodeAckRequested = false;
 8012034:	4b2f      	ldr	r3, [pc, #188]	; (80120f4 <ResetMacParameters+0x1d0>)
 8012036:	4a34      	ldr	r2, [pc, #208]	; (8012108 <ResetMacParameters+0x1e4>)
 8012038:	2100      	movs	r1, #0
 801203a:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->SrvAckRequested = false;
 801203c:	4b2d      	ldr	r3, [pc, #180]	; (80120f4 <ResetMacParameters+0x1d0>)
 801203e:	4a2e      	ldr	r2, [pc, #184]	; (80120f8 <ResetMacParameters+0x1d4>)
 8012040:	589a      	ldr	r2, [r3, r2]
 8012042:	234c      	movs	r3, #76	; 0x4c
 8012044:	33ff      	adds	r3, #255	; 0xff
 8012046:	2100      	movs	r1, #0
 8012048:	54d1      	strb	r1, [r2, r3]

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 801204a:	003b      	movs	r3, r7
 801204c:	2201      	movs	r2, #1
 801204e:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = NULL;
 8012050:	003b      	movs	r3, r7
 8012052:	2200      	movs	r2, #0
 8012054:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8012056:	4b27      	ldr	r3, [pc, #156]	; (80120f4 <ResetMacParameters+0x1d0>)
 8012058:	4a27      	ldr	r2, [pc, #156]	; (80120f8 <ResetMacParameters+0x1d4>)
 801205a:	589b      	ldr	r3, [r3, r2]
 801205c:	781b      	ldrb	r3, [r3, #0]
 801205e:	003a      	movs	r2, r7
 8012060:	0011      	movs	r1, r2
 8012062:	0018      	movs	r0, r3
 8012064:	f004 fe05 	bl	8016c72 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8012068:	4b22      	ldr	r3, [pc, #136]	; (80120f4 <ResetMacParameters+0x1d0>)
 801206a:	4a28      	ldr	r2, [pc, #160]	; (801210c <ResetMacParameters+0x1e8>)
 801206c:	2100      	movs	r1, #0
 801206e:	5499      	strb	r1, [r3, r2]

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8012070:	4b20      	ldr	r3, [pc, #128]	; (80120f4 <ResetMacParameters+0x1d0>)
 8012072:	4a26      	ldr	r2, [pc, #152]	; (801210c <ResetMacParameters+0x1e8>)
 8012074:	5c99      	ldrb	r1, [r3, r2]
 8012076:	4a1f      	ldr	r2, [pc, #124]	; (80120f4 <ResetMacParameters+0x1d0>)
 8012078:	23f3      	movs	r3, #243	; 0xf3
 801207a:	009b      	lsls	r3, r3, #2
 801207c:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 801207e:	4b1d      	ldr	r3, [pc, #116]	; (80120f4 <ResetMacParameters+0x1d0>)
 8012080:	4a1d      	ldr	r2, [pc, #116]	; (80120f8 <ResetMacParameters+0x1d4>)
 8012082:	589b      	ldr	r3, [r3, r2]
 8012084:	22a8      	movs	r2, #168	; 0xa8
 8012086:	5899      	ldr	r1, [r3, r2]
 8012088:	4a1a      	ldr	r2, [pc, #104]	; (80120f4 <ResetMacParameters+0x1d0>)
 801208a:	23f4      	movs	r3, #244	; 0xf4
 801208c:	009b      	lsls	r3, r3, #2
 801208e:	50d1      	str	r1, [r2, r3]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8012090:	4b18      	ldr	r3, [pc, #96]	; (80120f4 <ResetMacParameters+0x1d0>)
 8012092:	4a19      	ldr	r2, [pc, #100]	; (80120f8 <ResetMacParameters+0x1d4>)
 8012094:	589b      	ldr	r3, [r3, r2]
 8012096:	22b9      	movs	r2, #185	; 0xb9
 8012098:	5c99      	ldrb	r1, [r3, r2]
 801209a:	4a16      	ldr	r2, [pc, #88]	; (80120f4 <ResetMacParameters+0x1d0>)
 801209c:	23f7      	movs	r3, #247	; 0xf7
 801209e:	009b      	lsls	r3, r3, #2
 80120a0:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 80120a2:	4b14      	ldr	r3, [pc, #80]	; (80120f4 <ResetMacParameters+0x1d0>)
 80120a4:	4a14      	ldr	r2, [pc, #80]	; (80120f8 <ResetMacParameters+0x1d4>)
 80120a6:	589b      	ldr	r3, [r3, r2]
 80120a8:	22ca      	movs	r2, #202	; 0xca
 80120aa:	5c99      	ldrb	r1, [r3, r2]
 80120ac:	4b11      	ldr	r3, [pc, #68]	; (80120f4 <ResetMacParameters+0x1d0>)
 80120ae:	4a18      	ldr	r2, [pc, #96]	; (8012110 <ResetMacParameters+0x1ec>)
 80120b0:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxContinuous = false;
 80120b2:	4b10      	ldr	r3, [pc, #64]	; (80120f4 <ResetMacParameters+0x1d0>)
 80120b4:	4a17      	ldr	r2, [pc, #92]	; (8012114 <ResetMacParameters+0x1f0>)
 80120b6:	2100      	movs	r1, #0
 80120b8:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 80120ba:	4b0e      	ldr	r3, [pc, #56]	; (80120f4 <ResetMacParameters+0x1d0>)
 80120bc:	4a16      	ldr	r2, [pc, #88]	; (8012118 <ResetMacParameters+0x1f4>)
 80120be:	2101      	movs	r1, #1
 80120c0:	5499      	strb	r1, [r3, r2]

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 80120c2:	480c      	ldr	r0, [pc, #48]	; (80120f4 <ResetMacParameters+0x1d0>)
 80120c4:	23f8      	movs	r3, #248	; 0xf8
 80120c6:	009b      	lsls	r3, r3, #2
 80120c8:	490a      	ldr	r1, [pc, #40]	; (80120f4 <ResetMacParameters+0x1d0>)
 80120ca:	22f3      	movs	r2, #243	; 0xf3
 80120cc:	0092      	lsls	r2, r2, #2
 80120ce:	18c3      	adds	r3, r0, r3
 80120d0:	188a      	adds	r2, r1, r2
 80120d2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80120d4:	c313      	stmia	r3!, {r0, r1, r4}
 80120d6:	ca03      	ldmia	r2!, {r0, r1}
 80120d8:	c303      	stmia	r3!, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80120da:	4b06      	ldr	r3, [pc, #24]	; (80120f4 <ResetMacParameters+0x1d0>)
 80120dc:	4a0f      	ldr	r2, [pc, #60]	; (801211c <ResetMacParameters+0x1f8>)
 80120de:	2101      	movs	r1, #1
 80120e0:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80120e2:	4b04      	ldr	r3, [pc, #16]	; (80120f4 <ResetMacParameters+0x1d0>)
 80120e4:	4a0e      	ldr	r2, [pc, #56]	; (8012120 <ResetMacParameters+0x1fc>)
 80120e6:	2102      	movs	r1, #2
 80120e8:	5499      	strb	r1, [r3, r2]

}
 80120ea:	46c0      	nop			; (mov r8, r8)
 80120ec:	46bd      	mov	sp, r7
 80120ee:	b003      	add	sp, #12
 80120f0:	bd90      	pop	{r4, r7, pc}
 80120f2:	46c0      	nop			; (mov r8, r8)
 80120f4:	200005b8 	.word	0x200005b8
 80120f8:	00000484 	.word	0x00000484
 80120fc:	00000411 	.word	0x00000411
 8012100:	00000412 	.word	0x00000412
 8012104:	00000413 	.word	0x00000413
 8012108:	00000414 	.word	0x00000414
 801210c:	00000415 	.word	0x00000415
 8012110:	000003dd 	.word	0x000003dd
 8012114:	000003de 	.word	0x000003de
 8012118:	000003df 	.word	0x000003df
 801211c:	000003f2 	.word	0x000003f2
 8012120:	000003f3 	.word	0x000003f3

08012124 <RxWindowSetup>:
 *
 * \param [IN] rxTimer  Window timer to be topped.
 * \param [IN] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8012124:	b580      	push	{r7, lr}
 8012126:	b082      	sub	sp, #8
 8012128:	af00      	add	r7, sp, #0
 801212a:	6078      	str	r0, [r7, #4]
 801212c:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	0018      	movs	r0, r3
 8012132:	f00a fd99 	bl	801cc68 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 8012136:	4b10      	ldr	r3, [pc, #64]	; (8012178 <RxWindowSetup+0x54>)
 8012138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801213a:	4798      	blx	r3

    if( RegionRxConfig( MacCtx.NvmCtx->Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 801213c:	4b0f      	ldr	r3, [pc, #60]	; (801217c <RxWindowSetup+0x58>)
 801213e:	4a10      	ldr	r2, [pc, #64]	; (8012180 <RxWindowSetup+0x5c>)
 8012140:	589b      	ldr	r3, [r3, r2]
 8012142:	781b      	ldrb	r3, [r3, #0]
 8012144:	4a0f      	ldr	r2, [pc, #60]	; (8012184 <RxWindowSetup+0x60>)
 8012146:	6839      	ldr	r1, [r7, #0]
 8012148:	0018      	movs	r0, r3
 801214a:	f004 fe29 	bl	8016da0 <RegionRxConfig>
 801214e:	1e03      	subs	r3, r0, #0
 8012150:	d00e      	beq.n	8012170 <RxWindowSetup+0x4c>
    {
        Radio.Rx( MacCtx.NvmCtx->MacParams.MaxRxWindow );
 8012152:	4b09      	ldr	r3, [pc, #36]	; (8012178 <RxWindowSetup+0x54>)
 8012154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012156:	4a09      	ldr	r2, [pc, #36]	; (801217c <RxWindowSetup+0x58>)
 8012158:	4909      	ldr	r1, [pc, #36]	; (8012180 <RxWindowSetup+0x5c>)
 801215a:	5852      	ldr	r2, [r2, r1]
 801215c:	2190      	movs	r1, #144	; 0x90
 801215e:	5852      	ldr	r2, [r2, r1]
 8012160:	0010      	movs	r0, r2
 8012162:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8012164:	683b      	ldr	r3, [r7, #0]
 8012166:	7cd9      	ldrb	r1, [r3, #19]
 8012168:	4a04      	ldr	r2, [pc, #16]	; (801217c <RxWindowSetup+0x58>)
 801216a:	2390      	movs	r3, #144	; 0x90
 801216c:	00db      	lsls	r3, r3, #3
 801216e:	54d1      	strb	r1, [r2, r3]
    }
}
 8012170:	46c0      	nop			; (mov r8, r8)
 8012172:	46bd      	mov	sp, r7
 8012174:	b002      	add	sp, #8
 8012176:	bd80      	pop	{r7, pc}
 8012178:	0801fd54 	.word	0x0801fd54
 801217c:	200005b8 	.word	0x200005b8
 8012180:	00000484 	.word	0x00000484
 8012184:	200009d8 	.word	0x200009d8

08012188 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8012188:	b590      	push	{r4, r7, lr}
 801218a:	b083      	sub	sp, #12
 801218c:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 801218e:	4b1d      	ldr	r3, [pc, #116]	; (8012204 <OpenContinuousRxCWindow+0x7c>)
 8012190:	4a1d      	ldr	r2, [pc, #116]	; (8012208 <OpenContinuousRxCWindow+0x80>)
 8012192:	589b      	ldr	r3, [r3, r2]
 8012194:	7818      	ldrb	r0, [r3, #0]
                                     MacCtx.NvmCtx->MacParams.RxCChannel.Datarate,
 8012196:	4b1b      	ldr	r3, [pc, #108]	; (8012204 <OpenContinuousRxCWindow+0x7c>)
 8012198:	4a1b      	ldr	r2, [pc, #108]	; (8012208 <OpenContinuousRxCWindow+0x80>)
 801219a:	589b      	ldr	r3, [r3, r2]
 801219c:	22b4      	movs	r2, #180	; 0xb4
 801219e:	5c9b      	ldrb	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 80121a0:	b259      	sxtb	r1, r3
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 80121a2:	4b18      	ldr	r3, [pc, #96]	; (8012204 <OpenContinuousRxCWindow+0x7c>)
 80121a4:	4a18      	ldr	r2, [pc, #96]	; (8012208 <OpenContinuousRxCWindow+0x80>)
 80121a6:	589b      	ldr	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 80121a8:	228c      	movs	r2, #140	; 0x8c
 80121aa:	5c9a      	ldrb	r2, [r3, r2]
                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 80121ac:	4b15      	ldr	r3, [pc, #84]	; (8012204 <OpenContinuousRxCWindow+0x7c>)
 80121ae:	4c16      	ldr	r4, [pc, #88]	; (8012208 <OpenContinuousRxCWindow+0x80>)
 80121b0:	591b      	ldr	r3, [r3, r4]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 80121b2:	2488      	movs	r4, #136	; 0x88
 80121b4:	591c      	ldr	r4, [r3, r4]
 80121b6:	4b15      	ldr	r3, [pc, #84]	; (801220c <OpenContinuousRxCWindow+0x84>)
 80121b8:	9300      	str	r3, [sp, #0]
 80121ba:	0023      	movs	r3, r4
 80121bc:	f004 fdcc 	bl	8016d58 <RegionComputeRxWindowParameters>
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80121c0:	4b10      	ldr	r3, [pc, #64]	; (8012204 <OpenContinuousRxCWindow+0x7c>)
 80121c2:	4a13      	ldr	r2, [pc, #76]	; (8012210 <OpenContinuousRxCWindow+0x88>)
 80121c4:	2102      	movs	r1, #2
 80121c6:	5499      	strb	r1, [r3, r2]
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80121c8:	4b0e      	ldr	r3, [pc, #56]	; (8012204 <OpenContinuousRxCWindow+0x7c>)
 80121ca:	4a12      	ldr	r2, [pc, #72]	; (8012214 <OpenContinuousRxCWindow+0x8c>)
 80121cc:	2101      	movs	r1, #1
 80121ce:	5499      	strb	r1, [r3, r2]

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80121d0:	4b0c      	ldr	r3, [pc, #48]	; (8012204 <OpenContinuousRxCWindow+0x7c>)
 80121d2:	4a0d      	ldr	r2, [pc, #52]	; (8012208 <OpenContinuousRxCWindow+0x80>)
 80121d4:	589b      	ldr	r3, [r3, r2]
 80121d6:	781b      	ldrb	r3, [r3, #0]
 80121d8:	4a0f      	ldr	r2, [pc, #60]	; (8012218 <OpenContinuousRxCWindow+0x90>)
 80121da:	490c      	ldr	r1, [pc, #48]	; (801220c <OpenContinuousRxCWindow+0x84>)
 80121dc:	0018      	movs	r0, r3
 80121de:	f004 fddf 	bl	8016da0 <RegionRxConfig>
 80121e2:	1e03      	subs	r3, r0, #0
 80121e4:	d00a      	beq.n	80121fc <OpenContinuousRxCWindow+0x74>
    {
        Radio.Rx( 0 ); // Continuous mode
 80121e6:	4b0d      	ldr	r3, [pc, #52]	; (801221c <OpenContinuousRxCWindow+0x94>)
 80121e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80121ea:	2000      	movs	r0, #0
 80121ec:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 80121ee:	4b05      	ldr	r3, [pc, #20]	; (8012204 <OpenContinuousRxCWindow+0x7c>)
 80121f0:	4a07      	ldr	r2, [pc, #28]	; (8012210 <OpenContinuousRxCWindow+0x88>)
 80121f2:	5c99      	ldrb	r1, [r3, r2]
 80121f4:	4a03      	ldr	r2, [pc, #12]	; (8012204 <OpenContinuousRxCWindow+0x7c>)
 80121f6:	2390      	movs	r3, #144	; 0x90
 80121f8:	00db      	lsls	r3, r3, #3
 80121fa:	54d1      	strb	r1, [r2, r3]
    }
}
 80121fc:	46c0      	nop			; (mov r8, r8)
 80121fe:	46bd      	mov	sp, r7
 8012200:	b001      	add	sp, #4
 8012202:	bd90      	pop	{r4, r7, pc}
 8012204:	200005b8 	.word	0x200005b8
 8012208:	00000484 	.word	0x00000484
 801220c:	20000998 	.word	0x20000998
 8012210:	000003f3 	.word	0x000003f3
 8012214:	000003f2 	.word	0x000003f2
 8012218:	200009d8 	.word	0x200009d8
 801221c:	0801fd54 	.word	0x0801fd54

08012220 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8012220:	b590      	push	{r4, r7, lr}
 8012222:	b089      	sub	sp, #36	; 0x24
 8012224:	af00      	add	r7, sp, #0
 8012226:	60f8      	str	r0, [r7, #12]
 8012228:	60b9      	str	r1, [r7, #8]
 801222a:	603b      	str	r3, [r7, #0]
 801222c:	1dfb      	adds	r3, r7, #7
 801222e:	701a      	strb	r2, [r3, #0]
    MacCtx.PktBufferLen = 0;
 8012230:	4b9a      	ldr	r3, [pc, #616]	; (801249c <PrepareFrame+0x27c>)
 8012232:	2200      	movs	r2, #0
 8012234:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 8012236:	4b99      	ldr	r3, [pc, #612]	; (801249c <PrepareFrame+0x27c>)
 8012238:	4a99      	ldr	r2, [pc, #612]	; (80124a0 <PrepareFrame+0x280>)
 801223a:	2100      	movs	r1, #0
 801223c:	5499      	strb	r1, [r3, r2]
    uint32_t fCntUp = 0;
 801223e:	2300      	movs	r3, #0
 8012240:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 8012242:	2300      	movs	r3, #0
 8012244:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 8012246:	231f      	movs	r3, #31
 8012248:	18fb      	adds	r3, r7, r3
 801224a:	2200      	movs	r2, #0
 801224c:	701a      	strb	r2, [r3, #0]

    if( fBuffer == NULL )
 801224e:	683b      	ldr	r3, [r7, #0]
 8012250:	2b00      	cmp	r3, #0
 8012252:	d103      	bne.n	801225c <PrepareFrame+0x3c>
    {
        fBufferSize = 0;
 8012254:	2330      	movs	r3, #48	; 0x30
 8012256:	18fb      	adds	r3, r7, r3
 8012258:	2200      	movs	r2, #0
 801225a:	801a      	strh	r2, [r3, #0]
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 801225c:	2430      	movs	r4, #48	; 0x30
 801225e:	193b      	adds	r3, r7, r4
 8012260:	881a      	ldrh	r2, [r3, #0]
 8012262:	6839      	ldr	r1, [r7, #0]
 8012264:	4b8f      	ldr	r3, [pc, #572]	; (80124a4 <PrepareFrame+0x284>)
 8012266:	0018      	movs	r0, r3
 8012268:	f007 f946 	bl	80194f8 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 801226c:	193b      	adds	r3, r7, r4
 801226e:	881b      	ldrh	r3, [r3, #0]
 8012270:	b2d9      	uxtb	r1, r3
 8012272:	4b8a      	ldr	r3, [pc, #552]	; (801249c <PrepareFrame+0x27c>)
 8012274:	4a8c      	ldr	r2, [pc, #560]	; (80124a8 <PrepareFrame+0x288>)
 8012276:	5499      	strb	r1, [r3, r2]
    MacCtx.PktBuffer[0] = macHdr->Value;
 8012278:	68fb      	ldr	r3, [r7, #12]
 801227a:	781a      	ldrb	r2, [r3, #0]
 801227c:	4b87      	ldr	r3, [pc, #540]	; (801249c <PrepareFrame+0x27c>)
 801227e:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	781b      	ldrb	r3, [r3, #0]
 8012284:	061b      	lsls	r3, r3, #24
 8012286:	0f5b      	lsrs	r3, r3, #29
 8012288:	b2db      	uxtb	r3, r3
 801228a:	2b07      	cmp	r3, #7
 801228c:	d100      	bne.n	8012290 <PrepareFrame+0x70>
 801228e:	e0e0      	b.n	8012452 <PrepareFrame+0x232>
 8012290:	dd00      	ble.n	8012294 <PrepareFrame+0x74>
 8012292:	e0f8      	b.n	8012486 <PrepareFrame+0x266>
 8012294:	2b02      	cmp	r3, #2
 8012296:	d006      	beq.n	80122a6 <PrepareFrame+0x86>
 8012298:	2b04      	cmp	r3, #4
 801229a:	d000      	beq.n	801229e <PrepareFrame+0x7e>
 801229c:	e0f3      	b.n	8012486 <PrepareFrame+0x266>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 801229e:	4b7f      	ldr	r3, [pc, #508]	; (801249c <PrepareFrame+0x27c>)
 80122a0:	4a7f      	ldr	r2, [pc, #508]	; (80124a0 <PrepareFrame+0x280>)
 80122a2:	2101      	movs	r1, #1
 80122a4:	5499      	strb	r1, [r3, r2]
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 80122a6:	4a7d      	ldr	r2, [pc, #500]	; (801249c <PrepareFrame+0x27c>)
 80122a8:	2382      	movs	r3, #130	; 0x82
 80122aa:	005b      	lsls	r3, r3, #1
 80122ac:	2104      	movs	r1, #4
 80122ae:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 80122b0:	4a7a      	ldr	r2, [pc, #488]	; (801249c <PrepareFrame+0x27c>)
 80122b2:	2384      	movs	r3, #132	; 0x84
 80122b4:	005b      	lsls	r3, r3, #1
 80122b6:	497d      	ldr	r1, [pc, #500]	; (80124ac <PrepareFrame+0x28c>)
 80122b8:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 80122ba:	4a78      	ldr	r2, [pc, #480]	; (801249c <PrepareFrame+0x27c>)
 80122bc:	2386      	movs	r3, #134	; 0x86
 80122be:	005b      	lsls	r3, r3, #1
 80122c0:	21ff      	movs	r1, #255	; 0xff
 80122c2:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 80122c4:	68fb      	ldr	r3, [r7, #12]
 80122c6:	7819      	ldrb	r1, [r3, #0]
 80122c8:	4a74      	ldr	r2, [pc, #464]	; (801249c <PrepareFrame+0x27c>)
 80122ca:	230e      	movs	r3, #14
 80122cc:	33ff      	adds	r3, #255	; 0xff
 80122ce:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 80122d0:	4a72      	ldr	r2, [pc, #456]	; (801249c <PrepareFrame+0x27c>)
 80122d2:	1df9      	adds	r1, r7, #7
 80122d4:	2394      	movs	r3, #148	; 0x94
 80122d6:	005b      	lsls	r3, r3, #1
 80122d8:	7809      	ldrb	r1, [r1, #0]
 80122da:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 80122dc:	4b6f      	ldr	r3, [pc, #444]	; (801249c <PrepareFrame+0x27c>)
 80122de:	4a74      	ldr	r2, [pc, #464]	; (80124b0 <PrepareFrame+0x290>)
 80122e0:	589b      	ldr	r3, [r3, r2]
 80122e2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80122e4:	4a6d      	ldr	r2, [pc, #436]	; (801249c <PrepareFrame+0x27c>)
 80122e6:	2388      	movs	r3, #136	; 0x88
 80122e8:	005b      	lsls	r3, r3, #1
 80122ea:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 80122ec:	68bb      	ldr	r3, [r7, #8]
 80122ee:	7819      	ldrb	r1, [r3, #0]
 80122f0:	4a6a      	ldr	r2, [pc, #424]	; (801249c <PrepareFrame+0x27c>)
 80122f2:	238a      	movs	r3, #138	; 0x8a
 80122f4:	005b      	lsls	r3, r3, #1
 80122f6:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 80122f8:	4b68      	ldr	r3, [pc, #416]	; (801249c <PrepareFrame+0x27c>)
 80122fa:	4a6b      	ldr	r2, [pc, #428]	; (80124a8 <PrepareFrame+0x288>)
 80122fc:	5c99      	ldrb	r1, [r3, r2]
 80122fe:	4a67      	ldr	r2, [pc, #412]	; (801249c <PrepareFrame+0x27c>)
 8012300:	2398      	movs	r3, #152	; 0x98
 8012302:	005b      	lsls	r3, r3, #1
 8012304:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8012306:	4a65      	ldr	r2, [pc, #404]	; (801249c <PrepareFrame+0x27c>)
 8012308:	2396      	movs	r3, #150	; 0x96
 801230a:	005b      	lsls	r3, r3, #1
 801230c:	4965      	ldr	r1, [pc, #404]	; (80124a4 <PrepareFrame+0x284>)
 801230e:	50d1      	str	r1, [r2, r3]

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8012310:	2318      	movs	r3, #24
 8012312:	18fb      	adds	r3, r7, r3
 8012314:	0018      	movs	r0, r3
 8012316:	f003 fce5 	bl	8015ce4 <LoRaMacCryptoGetFCntUp>
 801231a:	1e03      	subs	r3, r0, #0
 801231c:	d001      	beq.n	8012322 <PrepareFrame+0x102>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 801231e:	2312      	movs	r3, #18
 8012320:	e0b7      	b.n	8012492 <PrepareFrame+0x272>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8012322:	69bb      	ldr	r3, [r7, #24]
 8012324:	b299      	uxth	r1, r3
 8012326:	4a5d      	ldr	r2, [pc, #372]	; (801249c <PrepareFrame+0x27c>)
 8012328:	238b      	movs	r3, #139	; 0x8b
 801232a:	005b      	lsls	r3, r3, #1
 801232c:	52d1      	strh	r1, [r2, r3]

            // Reset confirm parameters
            MacCtx.McpsConfirm.NbRetries = 0;
 801232e:	4b5b      	ldr	r3, [pc, #364]	; (801249c <PrepareFrame+0x27c>)
 8012330:	4a60      	ldr	r2, [pc, #384]	; (80124b4 <PrepareFrame+0x294>)
 8012332:	2100      	movs	r1, #0
 8012334:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.AckReceived = false;
 8012336:	4a59      	ldr	r2, [pc, #356]	; (801249c <PrepareFrame+0x27c>)
 8012338:	2388      	movs	r3, #136	; 0x88
 801233a:	00db      	lsls	r3, r3, #3
 801233c:	2100      	movs	r1, #0
 801233e:	54d1      	strb	r1, [r2, r3]
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8012340:	69b9      	ldr	r1, [r7, #24]
 8012342:	4a56      	ldr	r2, [pc, #344]	; (801249c <PrepareFrame+0x27c>)
 8012344:	2389      	movs	r3, #137	; 0x89
 8012346:	00db      	lsls	r3, r3, #3
 8012348:	50d1      	str	r1, [r2, r3]

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 801234a:	2314      	movs	r3, #20
 801234c:	18fb      	adds	r3, r7, r3
 801234e:	0018      	movs	r0, r3
 8012350:	f002 fd7a 	bl	8014e48 <LoRaMacCommandsGetSizeSerializedCmds>
 8012354:	1e03      	subs	r3, r0, #0
 8012356:	d001      	beq.n	801235c <PrepareFrame+0x13c>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012358:	2313      	movs	r3, #19
 801235a:	e09a      	b.n	8012492 <PrepareFrame+0x272>
            }

            if( macCmdsSize > 0 )
 801235c:	697b      	ldr	r3, [r7, #20]
 801235e:	2b00      	cmp	r3, #0
 8012360:	d100      	bne.n	8012364 <PrepareFrame+0x144>
 8012362:	e092      	b.n	801248a <PrepareFrame+0x26a>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( MacCtx.NvmCtx->MacParams.ChannelsDatarate );
 8012364:	4b4d      	ldr	r3, [pc, #308]	; (801249c <PrepareFrame+0x27c>)
 8012366:	4a52      	ldr	r2, [pc, #328]	; (80124b0 <PrepareFrame+0x290>)
 8012368:	589b      	ldr	r3, [r3, r2]
 801236a:	2285      	movs	r2, #133	; 0x85
 801236c:	569b      	ldrsb	r3, [r3, r2]
 801236e:	221f      	movs	r2, #31
 8012370:	18bc      	adds	r4, r7, r2
 8012372:	0018      	movs	r0, r3
 8012374:	f7fe fb50 	bl	8010a18 <GetMaxAppPayloadWithoutFOptsLength>
 8012378:	0003      	movs	r3, r0
 801237a:	7023      	strb	r3, [r4, #0]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 801237c:	4b47      	ldr	r3, [pc, #284]	; (801249c <PrepareFrame+0x27c>)
 801237e:	4a4a      	ldr	r2, [pc, #296]	; (80124a8 <PrepareFrame+0x288>)
 8012380:	5c9b      	ldrb	r3, [r3, r2]
 8012382:	2b00      	cmp	r3, #0
 8012384:	d024      	beq.n	80123d0 <PrepareFrame+0x1b0>
 8012386:	697b      	ldr	r3, [r7, #20]
 8012388:	2b0f      	cmp	r3, #15
 801238a:	d821      	bhi.n	80123d0 <PrepareFrame+0x1b0>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 801238c:	4a4a      	ldr	r2, [pc, #296]	; (80124b8 <PrepareFrame+0x298>)
 801238e:	2314      	movs	r3, #20
 8012390:	18fb      	adds	r3, r7, r3
 8012392:	0019      	movs	r1, r3
 8012394:	200f      	movs	r0, #15
 8012396:	f002 fd6d 	bl	8014e74 <LoRaMacCommandsSerializeCmds>
 801239a:	1e03      	subs	r3, r0, #0
 801239c:	d001      	beq.n	80123a2 <PrepareFrame+0x182>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801239e:	2313      	movs	r3, #19
 80123a0:	e077      	b.n	8012492 <PrepareFrame+0x272>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 80123a2:	697b      	ldr	r3, [r7, #20]
 80123a4:	1c1a      	adds	r2, r3, #0
 80123a6:	230f      	movs	r3, #15
 80123a8:	4013      	ands	r3, r2
 80123aa:	b2da      	uxtb	r2, r3
 80123ac:	68bb      	ldr	r3, [r7, #8]
 80123ae:	210f      	movs	r1, #15
 80123b0:	400a      	ands	r2, r1
 80123b2:	0010      	movs	r0, r2
 80123b4:	781a      	ldrb	r2, [r3, #0]
 80123b6:	210f      	movs	r1, #15
 80123b8:	438a      	bics	r2, r1
 80123ba:	1c11      	adds	r1, r2, #0
 80123bc:	1c02      	adds	r2, r0, #0
 80123be:	430a      	orrs	r2, r1
 80123c0:	701a      	strb	r2, [r3, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 80123c2:	68bb      	ldr	r3, [r7, #8]
 80123c4:	7819      	ldrb	r1, [r3, #0]
 80123c6:	4a35      	ldr	r2, [pc, #212]	; (801249c <PrepareFrame+0x27c>)
 80123c8:	238a      	movs	r3, #138	; 0x8a
 80123ca:	005b      	lsls	r3, r3, #1
 80123cc:	54d1      	strb	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 80123ce:	e05c      	b.n	801248a <PrepareFrame+0x26a>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 80123d0:	4b32      	ldr	r3, [pc, #200]	; (801249c <PrepareFrame+0x27c>)
 80123d2:	4a35      	ldr	r2, [pc, #212]	; (80124a8 <PrepareFrame+0x288>)
 80123d4:	5c9b      	ldrb	r3, [r3, r2]
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d015      	beq.n	8012406 <PrepareFrame+0x1e6>
 80123da:	697b      	ldr	r3, [r7, #20]
 80123dc:	2b0f      	cmp	r3, #15
 80123de:	d912      	bls.n	8012406 <PrepareFrame+0x1e6>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 80123e0:	231f      	movs	r3, #31
 80123e2:	18fb      	adds	r3, r7, r3
 80123e4:	7818      	ldrb	r0, [r3, #0]
 80123e6:	4b2d      	ldr	r3, [pc, #180]	; (801249c <PrepareFrame+0x27c>)
 80123e8:	4a31      	ldr	r2, [pc, #196]	; (80124b0 <PrepareFrame+0x290>)
 80123ea:	589b      	ldr	r3, [r3, r2]
 80123ec:	33cb      	adds	r3, #203	; 0xcb
 80123ee:	001a      	movs	r2, r3
 80123f0:	2314      	movs	r3, #20
 80123f2:	18fb      	adds	r3, r7, r3
 80123f4:	0019      	movs	r1, r3
 80123f6:	f002 fd3d 	bl	8014e74 <LoRaMacCommandsSerializeCmds>
 80123fa:	1e03      	subs	r3, r0, #0
 80123fc:	d001      	beq.n	8012402 <PrepareFrame+0x1e2>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80123fe:	2313      	movs	r3, #19
 8012400:	e047      	b.n	8012492 <PrepareFrame+0x272>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8012402:	230a      	movs	r3, #10
 8012404:	e045      	b.n	8012492 <PrepareFrame+0x272>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8012406:	231f      	movs	r3, #31
 8012408:	18fb      	adds	r3, r7, r3
 801240a:	7818      	ldrb	r0, [r3, #0]
 801240c:	4b23      	ldr	r3, [pc, #140]	; (801249c <PrepareFrame+0x27c>)
 801240e:	4a28      	ldr	r2, [pc, #160]	; (80124b0 <PrepareFrame+0x290>)
 8012410:	589b      	ldr	r3, [r3, r2]
 8012412:	33cb      	adds	r3, #203	; 0xcb
 8012414:	001a      	movs	r2, r3
 8012416:	2314      	movs	r3, #20
 8012418:	18fb      	adds	r3, r7, r3
 801241a:	0019      	movs	r1, r3
 801241c:	f002 fd2a 	bl	8014e74 <LoRaMacCommandsSerializeCmds>
 8012420:	1e03      	subs	r3, r0, #0
 8012422:	d001      	beq.n	8012428 <PrepareFrame+0x208>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012424:	2313      	movs	r3, #19
 8012426:	e034      	b.n	8012492 <PrepareFrame+0x272>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8012428:	4a1c      	ldr	r2, [pc, #112]	; (801249c <PrepareFrame+0x27c>)
 801242a:	2394      	movs	r3, #148	; 0x94
 801242c:	005b      	lsls	r3, r3, #1
 801242e:	2100      	movs	r1, #0
 8012430:	54d1      	strb	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
 8012432:	4b1a      	ldr	r3, [pc, #104]	; (801249c <PrepareFrame+0x27c>)
 8012434:	4a1e      	ldr	r2, [pc, #120]	; (80124b0 <PrepareFrame+0x290>)
 8012436:	589b      	ldr	r3, [r3, r2]
 8012438:	33cb      	adds	r3, #203	; 0xcb
 801243a:	0019      	movs	r1, r3
 801243c:	4a17      	ldr	r2, [pc, #92]	; (801249c <PrepareFrame+0x27c>)
 801243e:	2396      	movs	r3, #150	; 0x96
 8012440:	005b      	lsls	r3, r3, #1
 8012442:	50d1      	str	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8012444:	697b      	ldr	r3, [r7, #20]
 8012446:	b2d9      	uxtb	r1, r3
 8012448:	4a14      	ldr	r2, [pc, #80]	; (801249c <PrepareFrame+0x27c>)
 801244a:	2398      	movs	r3, #152	; 0x98
 801244c:	005b      	lsls	r3, r3, #1
 801244e:	54d1      	strb	r1, [r2, r3]
            break;
 8012450:	e01b      	b.n	801248a <PrepareFrame+0x26a>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8012452:	683b      	ldr	r3, [r7, #0]
 8012454:	2b00      	cmp	r3, #0
 8012456:	d01a      	beq.n	801248e <PrepareFrame+0x26e>
 8012458:	4b10      	ldr	r3, [pc, #64]	; (801249c <PrepareFrame+0x27c>)
 801245a:	4a13      	ldr	r2, [pc, #76]	; (80124a8 <PrepareFrame+0x288>)
 801245c:	5c9b      	ldrb	r3, [r3, r2]
 801245e:	2b00      	cmp	r3, #0
 8012460:	d015      	beq.n	801248e <PrepareFrame+0x26e>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8012462:	4816      	ldr	r0, [pc, #88]	; (80124bc <PrepareFrame+0x29c>)
 8012464:	4b0d      	ldr	r3, [pc, #52]	; (801249c <PrepareFrame+0x27c>)
 8012466:	4a10      	ldr	r2, [pc, #64]	; (80124a8 <PrepareFrame+0x288>)
 8012468:	5c9b      	ldrb	r3, [r3, r2]
 801246a:	b29a      	uxth	r2, r3
 801246c:	683b      	ldr	r3, [r7, #0]
 801246e:	0019      	movs	r1, r3
 8012470:	f007 f842 	bl	80194f8 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8012474:	4b09      	ldr	r3, [pc, #36]	; (801249c <PrepareFrame+0x27c>)
 8012476:	4a0c      	ldr	r2, [pc, #48]	; (80124a8 <PrepareFrame+0x288>)
 8012478:	5c9b      	ldrb	r3, [r3, r2]
 801247a:	b29b      	uxth	r3, r3
 801247c:	3301      	adds	r3, #1
 801247e:	b29a      	uxth	r2, r3
 8012480:	4b06      	ldr	r3, [pc, #24]	; (801249c <PrepareFrame+0x27c>)
 8012482:	801a      	strh	r2, [r3, #0]
            }
            break;
 8012484:	e003      	b.n	801248e <PrepareFrame+0x26e>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012486:	2302      	movs	r3, #2
 8012488:	e003      	b.n	8012492 <PrepareFrame+0x272>
            break;
 801248a:	46c0      	nop			; (mov r8, r8)
 801248c:	e000      	b.n	8012490 <PrepareFrame+0x270>
            break;
 801248e:	46c0      	nop			; (mov r8, r8)
    }

    return LORAMAC_STATUS_OK;
 8012490:	2300      	movs	r3, #0
}
 8012492:	0018      	movs	r0, r3
 8012494:	46bd      	mov	sp, r7
 8012496:	b009      	add	sp, #36	; 0x24
 8012498:	bd90      	pop	{r4, r7, pc}
 801249a:	46c0      	nop			; (mov r8, r8)
 801249c:	200005b8 	.word	0x200005b8
 80124a0:	00000414 	.word	0x00000414
 80124a4:	200006f0 	.word	0x200006f0
 80124a8:	00000237 	.word	0x00000237
 80124ac:	200005ba 	.word	0x200005ba
 80124b0:	00000484 	.word	0x00000484
 80124b4:	00000441 	.word	0x00000441
 80124b8:	200006d0 	.word	0x200006d0
 80124bc:	200005bb 	.word	0x200005bb

080124c0 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 80124c0:	b5b0      	push	{r4, r5, r7, lr}
 80124c2:	b08a      	sub	sp, #40	; 0x28
 80124c4:	af00      	add	r7, sp, #0
 80124c6:	0002      	movs	r2, r0
 80124c8:	1dfb      	adds	r3, r7, #7
 80124ca:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80124cc:	2327      	movs	r3, #39	; 0x27
 80124ce:	18fb      	adds	r3, r7, r3
 80124d0:	2203      	movs	r2, #3
 80124d2:	701a      	strb	r2, [r3, #0]
    TxConfigParams_t txConfig;
    int8_t txPower = 10;
 80124d4:	240f      	movs	r4, #15
 80124d6:	193b      	adds	r3, r7, r4
 80124d8:	220a      	movs	r2, #10
 80124da:	701a      	strb	r2, [r3, #0]

    txConfig.Channel = channel;
 80124dc:	2110      	movs	r1, #16
 80124de:	187b      	adds	r3, r7, r1
 80124e0:	1dfa      	adds	r2, r7, #7
 80124e2:	7812      	ldrb	r2, [r2, #0]
 80124e4:	701a      	strb	r2, [r3, #0]
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 80124e6:	4b57      	ldr	r3, [pc, #348]	; (8012644 <SendFrameOnChannel+0x184>)
 80124e8:	4a57      	ldr	r2, [pc, #348]	; (8012648 <SendFrameOnChannel+0x188>)
 80124ea:	589b      	ldr	r3, [r3, r2]
 80124ec:	2285      	movs	r2, #133	; 0x85
 80124ee:	569a      	ldrsb	r2, [r3, r2]
 80124f0:	187b      	adds	r3, r7, r1
 80124f2:	705a      	strb	r2, [r3, #1]
    txConfig.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 80124f4:	4b53      	ldr	r3, [pc, #332]	; (8012644 <SendFrameOnChannel+0x184>)
 80124f6:	4a54      	ldr	r2, [pc, #336]	; (8012648 <SendFrameOnChannel+0x188>)
 80124f8:	589b      	ldr	r3, [r3, r2]
 80124fa:	2284      	movs	r2, #132	; 0x84
 80124fc:	569a      	ldrsb	r2, [r3, r2]
 80124fe:	187b      	adds	r3, r7, r1
 8012500:	709a      	strb	r2, [r3, #2]
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 8012502:	4b50      	ldr	r3, [pc, #320]	; (8012644 <SendFrameOnChannel+0x184>)
 8012504:	4a50      	ldr	r2, [pc, #320]	; (8012648 <SendFrameOnChannel+0x188>)
 8012506:	589b      	ldr	r3, [r3, r2]
 8012508:	22bc      	movs	r2, #188	; 0xbc
 801250a:	589a      	ldr	r2, [r3, r2]
 801250c:	187b      	adds	r3, r7, r1
 801250e:	605a      	str	r2, [r3, #4]
    txConfig.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 8012510:	4b4c      	ldr	r3, [pc, #304]	; (8012644 <SendFrameOnChannel+0x184>)
 8012512:	4a4d      	ldr	r2, [pc, #308]	; (8012648 <SendFrameOnChannel+0x188>)
 8012514:	589b      	ldr	r3, [r3, r2]
 8012516:	22c0      	movs	r2, #192	; 0xc0
 8012518:	589a      	ldr	r2, [r3, r2]
 801251a:	187b      	adds	r3, r7, r1
 801251c:	609a      	str	r2, [r3, #8]
    txConfig.PktLen = MacCtx.PktBufferLen;
 801251e:	4b49      	ldr	r3, [pc, #292]	; (8012644 <SendFrameOnChannel+0x184>)
 8012520:	881a      	ldrh	r2, [r3, #0]
 8012522:	187b      	adds	r3, r7, r1
 8012524:	819a      	strh	r2, [r3, #12]

    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8012526:	4b47      	ldr	r3, [pc, #284]	; (8012644 <SendFrameOnChannel+0x184>)
 8012528:	4a47      	ldr	r2, [pc, #284]	; (8012648 <SendFrameOnChannel+0x188>)
 801252a:	589b      	ldr	r3, [r3, r2]
 801252c:	7818      	ldrb	r0, [r3, #0]
 801252e:	4b47      	ldr	r3, [pc, #284]	; (801264c <SendFrameOnChannel+0x18c>)
 8012530:	193a      	adds	r2, r7, r4
 8012532:	1879      	adds	r1, r7, r1
 8012534:	f004 fc4e 	bl	8016dd4 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012538:	4b42      	ldr	r3, [pc, #264]	; (8012644 <SendFrameOnChannel+0x184>)
 801253a:	4a45      	ldr	r2, [pc, #276]	; (8012650 <SendFrameOnChannel+0x190>)
 801253c:	2101      	movs	r1, #1
 801253e:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8012540:	4b40      	ldr	r3, [pc, #256]	; (8012644 <SendFrameOnChannel+0x184>)
 8012542:	4a41      	ldr	r2, [pc, #260]	; (8012648 <SendFrameOnChannel+0x188>)
 8012544:	589b      	ldr	r3, [r3, r2]
 8012546:	2285      	movs	r2, #133	; 0x85
 8012548:	569b      	ldrsb	r3, [r3, r2]
 801254a:	b2d9      	uxtb	r1, r3
 801254c:	4b3d      	ldr	r3, [pc, #244]	; (8012644 <SendFrameOnChannel+0x184>)
 801254e:	4a41      	ldr	r2, [pc, #260]	; (8012654 <SendFrameOnChannel+0x194>)
 8012550:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.TxPower = txPower;
 8012552:	193b      	adds	r3, r7, r4
 8012554:	2100      	movs	r1, #0
 8012556:	5659      	ldrsb	r1, [r3, r1]
 8012558:	4b3a      	ldr	r3, [pc, #232]	; (8012644 <SendFrameOnChannel+0x184>)
 801255a:	4a3f      	ldr	r2, [pc, #252]	; (8012658 <SendFrameOnChannel+0x198>)
 801255c:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.Channel = channel;
 801255e:	1dfb      	adds	r3, r7, #7
 8012560:	781a      	ldrb	r2, [r3, #0]
 8012562:	4b38      	ldr	r3, [pc, #224]	; (8012644 <SendFrameOnChannel+0x184>)
 8012564:	493d      	ldr	r1, [pc, #244]	; (801265c <SendFrameOnChannel+0x19c>)
 8012566:	505a      	str	r2, [r3, r1]

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8012568:	4a36      	ldr	r2, [pc, #216]	; (8012644 <SendFrameOnChannel+0x184>)
 801256a:	2383      	movs	r3, #131	; 0x83
 801256c:	00db      	lsls	r3, r3, #3
 801256e:	58d2      	ldr	r2, [r2, r3]
 8012570:	4b34      	ldr	r3, [pc, #208]	; (8012644 <SendFrameOnChannel+0x184>)
 8012572:	493b      	ldr	r1, [pc, #236]	; (8012660 <SendFrameOnChannel+0x1a0>)
 8012574:	505a      	str	r2, [r3, r1]
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8012576:	4a33      	ldr	r2, [pc, #204]	; (8012644 <SendFrameOnChannel+0x184>)
 8012578:	2383      	movs	r3, #131	; 0x83
 801257a:	00db      	lsls	r3, r3, #3
 801257c:	58d2      	ldr	r2, [r2, r3]
 801257e:	4b31      	ldr	r3, [pc, #196]	; (8012644 <SendFrameOnChannel+0x184>)
 8012580:	4938      	ldr	r1, [pc, #224]	; (8012664 <SendFrameOnChannel+0x1a4>)
 8012582:	505a      	str	r2, [r3, r1]

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8012584:	f002 f9b0 	bl	80148e8 <LoRaMacClassBIsBeaconModeActive>
 8012588:	1e03      	subs	r3, r0, #0
 801258a:	d00d      	beq.n	80125a8 <SendFrameOnChannel+0xe8>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 801258c:	4a2d      	ldr	r2, [pc, #180]	; (8012644 <SendFrameOnChannel+0x184>)
 801258e:	2383      	movs	r3, #131	; 0x83
 8012590:	00db      	lsls	r3, r3, #3
 8012592:	58d3      	ldr	r3, [r2, r3]
 8012594:	0018      	movs	r0, r3
 8012596:	f002 fa0b 	bl	80149b0 <LoRaMacClassBIsUplinkCollision>
 801259a:	0003      	movs	r3, r0
 801259c:	623b      	str	r3, [r7, #32]

        if( collisionTime > 0 )
 801259e:	6a3b      	ldr	r3, [r7, #32]
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d001      	beq.n	80125a8 <SendFrameOnChannel+0xe8>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 80125a4:	2310      	movs	r3, #16
 80125a6:	e048      	b.n	801263a <SendFrameOnChannel+0x17a>
        }
    }

    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 80125a8:	4b26      	ldr	r3, [pc, #152]	; (8012644 <SendFrameOnChannel+0x184>)
 80125aa:	4a27      	ldr	r2, [pc, #156]	; (8012648 <SendFrameOnChannel+0x188>)
 80125ac:	589b      	ldr	r3, [r3, r2]
 80125ae:	227c      	movs	r2, #124	; 0x7c
 80125b0:	5c9b      	ldrb	r3, [r3, r2]
 80125b2:	2b01      	cmp	r3, #1
 80125b4:	d101      	bne.n	80125ba <SendFrameOnChannel+0xfa>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 80125b6:	f002 fa04 	bl	80149c2 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 80125ba:	f002 f9a5 	bl	8014908 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.Channel );
 80125be:	4b21      	ldr	r3, [pc, #132]	; (8012644 <SendFrameOnChannel+0x184>)
 80125c0:	4a21      	ldr	r2, [pc, #132]	; (8012648 <SendFrameOnChannel+0x188>)
 80125c2:	589b      	ldr	r3, [r3, r2]
 80125c4:	2285      	movs	r2, #133	; 0x85
 80125c6:	569b      	ldrsb	r3, [r3, r2]
 80125c8:	b2da      	uxtb	r2, r3
 80125ca:	4b1e      	ldr	r3, [pc, #120]	; (8012644 <SendFrameOnChannel+0x184>)
 80125cc:	4926      	ldr	r1, [pc, #152]	; (8012668 <SendFrameOnChannel+0x1a8>)
 80125ce:	5c5b      	ldrb	r3, [r3, r1]
 80125d0:	2527      	movs	r5, #39	; 0x27
 80125d2:	197c      	adds	r4, r7, r5
 80125d4:	0019      	movs	r1, r3
 80125d6:	0010      	movs	r0, r2
 80125d8:	f7ff fbea 	bl	8011db0 <SecureFrame>
 80125dc:	0003      	movs	r3, r0
 80125de:	7023      	strb	r3, [r4, #0]
    if( status != LORAMAC_STATUS_OK )
 80125e0:	197b      	adds	r3, r7, r5
 80125e2:	781b      	ldrb	r3, [r3, #0]
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d002      	beq.n	80125ee <SendFrameOnChannel+0x12e>
    {
        return status;
 80125e8:	197b      	adds	r3, r7, r5
 80125ea:	781b      	ldrb	r3, [r3, #0]
 80125ec:	e025      	b.n	801263a <SendFrameOnChannel+0x17a>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80125ee:	4a15      	ldr	r2, [pc, #84]	; (8012644 <SendFrameOnChannel+0x184>)
 80125f0:	23d0      	movs	r3, #208	; 0xd0
 80125f2:	009b      	lsls	r3, r3, #2
 80125f4:	58d3      	ldr	r3, [r2, r3]
 80125f6:	2202      	movs	r2, #2
 80125f8:	431a      	orrs	r2, r3
 80125fa:	0011      	movs	r1, r2
 80125fc:	4a11      	ldr	r2, [pc, #68]	; (8012644 <SendFrameOnChannel+0x184>)
 80125fe:	23d0      	movs	r3, #208	; 0xd0
 8012600:	009b      	lsls	r3, r3, #2
 8012602:	50d1      	str	r1, [r2, r3]
    if( MacCtx.NodeAckRequested == false )
 8012604:	4b0f      	ldr	r3, [pc, #60]	; (8012644 <SendFrameOnChannel+0x184>)
 8012606:	4a19      	ldr	r2, [pc, #100]	; (801266c <SendFrameOnChannel+0x1ac>)
 8012608:	5c9b      	ldrb	r3, [r3, r2]
 801260a:	2201      	movs	r2, #1
 801260c:	4053      	eors	r3, r2
 801260e:	b2db      	uxtb	r3, r3
 8012610:	2b00      	cmp	r3, #0
 8012612:	d009      	beq.n	8012628 <SendFrameOnChannel+0x168>
    {
        MacCtx.ChannelsNbTransCounter++;
 8012614:	4a0b      	ldr	r2, [pc, #44]	; (8012644 <SendFrameOnChannel+0x184>)
 8012616:	2382      	movs	r3, #130	; 0x82
 8012618:	00db      	lsls	r3, r3, #3
 801261a:	5cd3      	ldrb	r3, [r2, r3]
 801261c:	3301      	adds	r3, #1
 801261e:	b2d9      	uxtb	r1, r3
 8012620:	4a08      	ldr	r2, [pc, #32]	; (8012644 <SendFrameOnChannel+0x184>)
 8012622:	2382      	movs	r3, #130	; 0x82
 8012624:	00db      	lsls	r3, r3, #3
 8012626:	54d1      	strb	r1, [r2, r3]
    }

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8012628:	4b11      	ldr	r3, [pc, #68]	; (8012670 <SendFrameOnChannel+0x1b0>)
 801262a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801262c:	4a05      	ldr	r2, [pc, #20]	; (8012644 <SendFrameOnChannel+0x184>)
 801262e:	8812      	ldrh	r2, [r2, #0]
 8012630:	b2d1      	uxtb	r1, r2
 8012632:	4a10      	ldr	r2, [pc, #64]	; (8012674 <SendFrameOnChannel+0x1b4>)
 8012634:	0010      	movs	r0, r2
 8012636:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8012638:	2300      	movs	r3, #0
}
 801263a:	0018      	movs	r0, r3
 801263c:	46bd      	mov	sp, r7
 801263e:	b00a      	add	sp, #40	; 0x28
 8012640:	bdb0      	pop	{r4, r5, r7, pc}
 8012642:	46c0      	nop			; (mov r8, r8)
 8012644:	200005b8 	.word	0x200005b8
 8012648:	00000484 	.word	0x00000484
 801264c:	200009d0 	.word	0x200009d0
 8012650:	0000043d 	.word	0x0000043d
 8012654:	0000043e 	.word	0x0000043e
 8012658:	0000043f 	.word	0x0000043f
 801265c:	0000044c 	.word	0x0000044c
 8012660:	00000444 	.word	0x00000444
 8012664:	00000454 	.word	0x00000454
 8012668:	00000415 	.word	0x00000415
 801266c:	00000414 	.word	0x00000414
 8012670:	0801fd54 	.word	0x0801fd54
 8012674:	200005ba 	.word	0x200005ba

08012678 <SetTxContinuousWave>:

static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 8012678:	b580      	push	{r7, lr}
 801267a:	b086      	sub	sp, #24
 801267c:	af00      	add	r7, sp, #0
 801267e:	0002      	movs	r2, r0
 8012680:	1dbb      	adds	r3, r7, #6
 8012682:	801a      	strh	r2, [r3, #0]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 8012684:	4b1f      	ldr	r3, [pc, #124]	; (8012704 <SetTxContinuousWave+0x8c>)
 8012686:	4a20      	ldr	r2, [pc, #128]	; (8012708 <SetTxContinuousWave+0x90>)
 8012688:	5c9a      	ldrb	r2, [r3, r2]
 801268a:	2108      	movs	r1, #8
 801268c:	187b      	adds	r3, r7, r1
 801268e:	701a      	strb	r2, [r3, #0]
    continuousWave.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8012690:	4b1c      	ldr	r3, [pc, #112]	; (8012704 <SetTxContinuousWave+0x8c>)
 8012692:	4a1e      	ldr	r2, [pc, #120]	; (801270c <SetTxContinuousWave+0x94>)
 8012694:	589b      	ldr	r3, [r3, r2]
 8012696:	2285      	movs	r2, #133	; 0x85
 8012698:	569a      	ldrsb	r2, [r3, r2]
 801269a:	187b      	adds	r3, r7, r1
 801269c:	705a      	strb	r2, [r3, #1]
    continuousWave.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 801269e:	4b19      	ldr	r3, [pc, #100]	; (8012704 <SetTxContinuousWave+0x8c>)
 80126a0:	4a1a      	ldr	r2, [pc, #104]	; (801270c <SetTxContinuousWave+0x94>)
 80126a2:	589b      	ldr	r3, [r3, r2]
 80126a4:	2284      	movs	r2, #132	; 0x84
 80126a6:	569a      	ldrsb	r2, [r3, r2]
 80126a8:	187b      	adds	r3, r7, r1
 80126aa:	709a      	strb	r2, [r3, #2]
    continuousWave.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 80126ac:	4b15      	ldr	r3, [pc, #84]	; (8012704 <SetTxContinuousWave+0x8c>)
 80126ae:	4a17      	ldr	r2, [pc, #92]	; (801270c <SetTxContinuousWave+0x94>)
 80126b0:	589b      	ldr	r3, [r3, r2]
 80126b2:	22bc      	movs	r2, #188	; 0xbc
 80126b4:	589a      	ldr	r2, [r3, r2]
 80126b6:	187b      	adds	r3, r7, r1
 80126b8:	605a      	str	r2, [r3, #4]
    continuousWave.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 80126ba:	4b12      	ldr	r3, [pc, #72]	; (8012704 <SetTxContinuousWave+0x8c>)
 80126bc:	4a13      	ldr	r2, [pc, #76]	; (801270c <SetTxContinuousWave+0x94>)
 80126be:	589b      	ldr	r3, [r3, r2]
 80126c0:	22c0      	movs	r2, #192	; 0xc0
 80126c2:	589a      	ldr	r2, [r3, r2]
 80126c4:	187b      	adds	r3, r7, r1
 80126c6:	609a      	str	r2, [r3, #8]
    continuousWave.Timeout = timeout;
 80126c8:	187b      	adds	r3, r7, r1
 80126ca:	1dba      	adds	r2, r7, #6
 80126cc:	8812      	ldrh	r2, [r2, #0]
 80126ce:	819a      	strh	r2, [r3, #12]

    RegionSetContinuousWave( MacCtx.NvmCtx->Region, &continuousWave );
 80126d0:	4b0c      	ldr	r3, [pc, #48]	; (8012704 <SetTxContinuousWave+0x8c>)
 80126d2:	4a0e      	ldr	r2, [pc, #56]	; (801270c <SetTxContinuousWave+0x94>)
 80126d4:	589b      	ldr	r3, [r3, r2]
 80126d6:	781b      	ldrb	r3, [r3, #0]
 80126d8:	187a      	adds	r2, r7, r1
 80126da:	0011      	movs	r1, r2
 80126dc:	0018      	movs	r0, r3
 80126de:	f004 fc48 	bl	8016f72 <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80126e2:	4a08      	ldr	r2, [pc, #32]	; (8012704 <SetTxContinuousWave+0x8c>)
 80126e4:	23d0      	movs	r3, #208	; 0xd0
 80126e6:	009b      	lsls	r3, r3, #2
 80126e8:	58d3      	ldr	r3, [r2, r3]
 80126ea:	2202      	movs	r2, #2
 80126ec:	431a      	orrs	r2, r3
 80126ee:	0011      	movs	r1, r2
 80126f0:	4a04      	ldr	r2, [pc, #16]	; (8012704 <SetTxContinuousWave+0x8c>)
 80126f2:	23d0      	movs	r3, #208	; 0xd0
 80126f4:	009b      	lsls	r3, r3, #2
 80126f6:	50d1      	str	r1, [r2, r3]

    return LORAMAC_STATUS_OK;
 80126f8:	2300      	movs	r3, #0
}
 80126fa:	0018      	movs	r0, r3
 80126fc:	46bd      	mov	sp, r7
 80126fe:	b006      	add	sp, #24
 8012700:	bd80      	pop	{r7, pc}
 8012702:	46c0      	nop			; (mov r8, r8)
 8012704:	200005b8 	.word	0x200005b8
 8012708:	00000415 	.word	0x00000415
 801270c:	00000484 	.word	0x00000484

08012710 <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8012710:	b580      	push	{r7, lr}
 8012712:	b082      	sub	sp, #8
 8012714:	af00      	add	r7, sp, #0
 8012716:	6039      	str	r1, [r7, #0]
 8012718:	0011      	movs	r1, r2
 801271a:	1dbb      	adds	r3, r7, #6
 801271c:	1c02      	adds	r2, r0, #0
 801271e:	801a      	strh	r2, [r3, #0]
 8012720:	1d7b      	adds	r3, r7, #5
 8012722:	1c0a      	adds	r2, r1, #0
 8012724:	701a      	strb	r2, [r3, #0]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8012726:	4b0c      	ldr	r3, [pc, #48]	; (8012758 <SetTxContinuousWave1+0x48>)
 8012728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801272a:	1d7a      	adds	r2, r7, #5
 801272c:	2100      	movs	r1, #0
 801272e:	5651      	ldrsb	r1, [r2, r1]
 8012730:	1dba      	adds	r2, r7, #6
 8012732:	8812      	ldrh	r2, [r2, #0]
 8012734:	6838      	ldr	r0, [r7, #0]
 8012736:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8012738:	4a08      	ldr	r2, [pc, #32]	; (801275c <SetTxContinuousWave1+0x4c>)
 801273a:	23d0      	movs	r3, #208	; 0xd0
 801273c:	009b      	lsls	r3, r3, #2
 801273e:	58d3      	ldr	r3, [r2, r3]
 8012740:	2202      	movs	r2, #2
 8012742:	431a      	orrs	r2, r3
 8012744:	0011      	movs	r1, r2
 8012746:	4a05      	ldr	r2, [pc, #20]	; (801275c <SetTxContinuousWave1+0x4c>)
 8012748:	23d0      	movs	r3, #208	; 0xd0
 801274a:	009b      	lsls	r3, r3, #2
 801274c:	50d1      	str	r1, [r2, r3]

    return LORAMAC_STATUS_OK;
 801274e:	2300      	movs	r3, #0
}
 8012750:	0018      	movs	r0, r3
 8012752:	46bd      	mov	sp, r7
 8012754:	b002      	add	sp, #8
 8012756:	bd80      	pop	{r7, pc}
 8012758:	0801fd54 	.word	0x0801fd54
 801275c:	200005b8 	.word	0x200005b8

08012760 <GetCtxs>:

static LoRaMacCtxs_t* GetCtxs( void )
{
 8012760:	b580      	push	{r7, lr}
 8012762:	b082      	sub	sp, #8
 8012764:	af00      	add	r7, sp, #0
    Contexts.MacNvmCtx = &NvmMacCtx;
 8012766:	4b20      	ldr	r3, [pc, #128]	; (80127e8 <GetCtxs+0x88>)
 8012768:	4a20      	ldr	r2, [pc, #128]	; (80127ec <GetCtxs+0x8c>)
 801276a:	601a      	str	r2, [r3, #0]
    Contexts.MacNvmCtxSize = sizeof( NvmMacCtx );
 801276c:	4b1e      	ldr	r3, [pc, #120]	; (80127e8 <GetCtxs+0x88>)
 801276e:	22b6      	movs	r2, #182	; 0xb6
 8012770:	0052      	lsls	r2, r2, #1
 8012772:	605a      	str	r2, [r3, #4]
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 8012774:	4b1e      	ldr	r3, [pc, #120]	; (80127f0 <GetCtxs+0x90>)
 8012776:	0018      	movs	r0, r3
 8012778:	f003 faa6 	bl	8015cc8 <LoRaMacCryptoGetNvmCtx>
 801277c:	0002      	movs	r2, r0
 801277e:	4b1a      	ldr	r3, [pc, #104]	; (80127e8 <GetCtxs+0x88>)
 8012780:	611a      	str	r2, [r3, #16]
    GetNvmCtxParams_t params ={ 0 };
 8012782:	2300      	movs	r3, #0
 8012784:	607b      	str	r3, [r7, #4]
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 8012786:	4b1b      	ldr	r3, [pc, #108]	; (80127f4 <GetCtxs+0x94>)
 8012788:	4a1b      	ldr	r2, [pc, #108]	; (80127f8 <GetCtxs+0x98>)
 801278a:	589b      	ldr	r3, [r3, r2]
 801278c:	781b      	ldrb	r3, [r3, #0]
 801278e:	1d3a      	adds	r2, r7, #4
 8012790:	0011      	movs	r1, r2
 8012792:	0018      	movs	r0, r3
 8012794:	f004 fa82 	bl	8016c9c <RegionGetNvmCtx>
 8012798:	0002      	movs	r2, r0
 801279a:	4b13      	ldr	r3, [pc, #76]	; (80127e8 <GetCtxs+0x88>)
 801279c:	609a      	str	r2, [r3, #8]
    Contexts.RegionNvmCtxSize = params.nvmCtxSize;
 801279e:	687a      	ldr	r2, [r7, #4]
 80127a0:	4b11      	ldr	r3, [pc, #68]	; (80127e8 <GetCtxs+0x88>)
 80127a2:	60da      	str	r2, [r3, #12]
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
 80127a4:	4b15      	ldr	r3, [pc, #84]	; (80127fc <GetCtxs+0x9c>)
 80127a6:	0018      	movs	r0, r3
 80127a8:	f7fb f8a4 	bl	800d8f4 <SecureElementGetNvmCtx>
 80127ac:	0002      	movs	r2, r0
 80127ae:	4b0e      	ldr	r3, [pc, #56]	; (80127e8 <GetCtxs+0x88>)
 80127b0:	619a      	str	r2, [r3, #24]
    Contexts.CommandsNvmCtx = LoRaMacCommandsGetNvmCtx( &Contexts.CommandsNvmCtxSize );
 80127b2:	4b13      	ldr	r3, [pc, #76]	; (8012800 <GetCtxs+0xa0>)
 80127b4:	0018      	movs	r0, r3
 80127b6:	f002 fa63 	bl	8014c80 <LoRaMacCommandsGetNvmCtx>
 80127ba:	0002      	movs	r2, r0
 80127bc:	4b0a      	ldr	r3, [pc, #40]	; (80127e8 <GetCtxs+0x88>)
 80127be:	621a      	str	r2, [r3, #32]
    Contexts.ClassBNvmCtx = LoRaMacClassBGetNvmCtx( &Contexts.ClassBNvmCtxSize );
 80127c0:	4b10      	ldr	r3, [pc, #64]	; (8012804 <GetCtxs+0xa4>)
 80127c2:	0018      	movs	r0, r3
 80127c4:	f002 f82a 	bl	801481c <LoRaMacClassBGetNvmCtx>
 80127c8:	0002      	movs	r2, r0
 80127ca:	4b07      	ldr	r3, [pc, #28]	; (80127e8 <GetCtxs+0x88>)
 80127cc:	629a      	str	r2, [r3, #40]	; 0x28
    Contexts.ConfirmQueueNvmCtx = LoRaMacConfirmQueueGetNvmCtx( &Contexts.ConfirmQueueNvmCtxSize );
 80127ce:	4b0e      	ldr	r3, [pc, #56]	; (8012808 <GetCtxs+0xa8>)
 80127d0:	0018      	movs	r0, r3
 80127d2:	f002 fcf5 	bl	80151c0 <LoRaMacConfirmQueueGetNvmCtx>
 80127d6:	0002      	movs	r2, r0
 80127d8:	4b03      	ldr	r3, [pc, #12]	; (80127e8 <GetCtxs+0x88>)
 80127da:	631a      	str	r2, [r3, #48]	; 0x30
    return &Contexts;
 80127dc:	4b02      	ldr	r3, [pc, #8]	; (80127e8 <GetCtxs+0x88>)
}
 80127de:	0018      	movs	r0, r3
 80127e0:	46bd      	mov	sp, r7
 80127e2:	b002      	add	sp, #8
 80127e4:	bd80      	pop	{r7, pc}
 80127e6:	46c0      	nop			; (mov r8, r8)
 80127e8:	20000bb0 	.word	0x20000bb0
 80127ec:	20000a44 	.word	0x20000a44
 80127f0:	20000bc4 	.word	0x20000bc4
 80127f4:	200005b8 	.word	0x200005b8
 80127f8:	00000484 	.word	0x00000484
 80127fc:	20000bcc 	.word	0x20000bcc
 8012800:	20000bd4 	.word	0x20000bd4
 8012804:	20000bdc 	.word	0x20000bdc
 8012808:	20000be4 	.word	0x20000be4

0801280c <RestoreCtxs>:

static LoRaMacStatus_t RestoreCtxs( LoRaMacCtxs_t* contexts )
{
 801280c:	b580      	push	{r7, lr}
 801280e:	b084      	sub	sp, #16
 8012810:	af00      	add	r7, sp, #0
 8012812:	6078      	str	r0, [r7, #4]
    if( contexts == NULL )
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	2b00      	cmp	r3, #0
 8012818:	d101      	bne.n	801281e <RestoreCtxs+0x12>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801281a:	2303      	movs	r3, #3
 801281c:	e086      	b.n	801292c <RestoreCtxs+0x120>
    }
    if( MacCtx.MacState != LORAMAC_STOPPED )
 801281e:	4a45      	ldr	r2, [pc, #276]	; (8012934 <RestoreCtxs+0x128>)
 8012820:	23d0      	movs	r3, #208	; 0xd0
 8012822:	009b      	lsls	r3, r3, #2
 8012824:	58d3      	ldr	r3, [r2, r3]
 8012826:	2b01      	cmp	r3, #1
 8012828:	d001      	beq.n	801282e <RestoreCtxs+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 801282a:	2301      	movs	r3, #1
 801282c:	e07e      	b.n	801292c <RestoreCtxs+0x120>
    }

    if( contexts->MacNvmCtx != NULL )
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	2b00      	cmp	r3, #0
 8012834:	d008      	beq.n	8012848 <RestoreCtxs+0x3c>
    {
        memcpy1( ( uint8_t* ) &NvmMacCtx, ( uint8_t* ) contexts->MacNvmCtx, contexts->MacNvmCtxSize );
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	6819      	ldr	r1, [r3, #0]
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	685b      	ldr	r3, [r3, #4]
 801283e:	b29a      	uxth	r2, r3
 8012840:	4b3d      	ldr	r3, [pc, #244]	; (8012938 <RestoreCtxs+0x12c>)
 8012842:	0018      	movs	r0, r3
 8012844:	f006 fe58 	bl	80194f8 <memcpy1>
    }

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESTORE_CTX;
 8012848:	2108      	movs	r1, #8
 801284a:	187b      	adds	r3, r7, r1
 801284c:	2203      	movs	r2, #3
 801284e:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = contexts->RegionNvmCtx;
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	689a      	ldr	r2, [r3, #8]
 8012854:	187b      	adds	r3, r7, r1
 8012856:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8012858:	4b36      	ldr	r3, [pc, #216]	; (8012934 <RestoreCtxs+0x128>)
 801285a:	4a38      	ldr	r2, [pc, #224]	; (801293c <RestoreCtxs+0x130>)
 801285c:	589b      	ldr	r3, [r3, r2]
 801285e:	781b      	ldrb	r3, [r3, #0]
 8012860:	187a      	adds	r2, r7, r1
 8012862:	0011      	movs	r1, r2
 8012864:	0018      	movs	r0, r3
 8012866:	f004 fa04 	bl	8016c72 <RegionInitDefaults>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 801286a:	4b32      	ldr	r3, [pc, #200]	; (8012934 <RestoreCtxs+0x128>)
 801286c:	4a34      	ldr	r2, [pc, #208]	; (8012940 <RestoreCtxs+0x134>)
 801286e:	5c99      	ldrb	r1, [r3, r2]
 8012870:	4a30      	ldr	r2, [pc, #192]	; (8012934 <RestoreCtxs+0x128>)
 8012872:	23f8      	movs	r3, #248	; 0xf8
 8012874:	009b      	lsls	r3, r3, #2
 8012876:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindowCConfig.Frequency = MacCtx.NvmCtx->MacParams.RxCChannel.Frequency;
 8012878:	4b2e      	ldr	r3, [pc, #184]	; (8012934 <RestoreCtxs+0x128>)
 801287a:	4a30      	ldr	r2, [pc, #192]	; (801293c <RestoreCtxs+0x130>)
 801287c:	589b      	ldr	r3, [r3, r2]
 801287e:	22b0      	movs	r2, #176	; 0xb0
 8012880:	5899      	ldr	r1, [r3, r2]
 8012882:	4a2c      	ldr	r2, [pc, #176]	; (8012934 <RestoreCtxs+0x128>)
 8012884:	23f9      	movs	r3, #249	; 0xf9
 8012886:	009b      	lsls	r3, r3, #2
 8012888:	50d1      	str	r1, [r2, r3]
    MacCtx.RxWindowCConfig.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 801288a:	4b2a      	ldr	r3, [pc, #168]	; (8012934 <RestoreCtxs+0x128>)
 801288c:	4a2b      	ldr	r2, [pc, #172]	; (801293c <RestoreCtxs+0x130>)
 801288e:	589b      	ldr	r3, [r3, r2]
 8012890:	22b9      	movs	r2, #185	; 0xb9
 8012892:	5c99      	ldrb	r1, [r3, r2]
 8012894:	4a27      	ldr	r2, [pc, #156]	; (8012934 <RestoreCtxs+0x128>)
 8012896:	23fc      	movs	r3, #252	; 0xfc
 8012898:	009b      	lsls	r3, r3, #2
 801289a:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindowCConfig.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 801289c:	4b25      	ldr	r3, [pc, #148]	; (8012934 <RestoreCtxs+0x128>)
 801289e:	4a27      	ldr	r2, [pc, #156]	; (801293c <RestoreCtxs+0x130>)
 80128a0:	589b      	ldr	r3, [r3, r2]
 80128a2:	22ca      	movs	r2, #202	; 0xca
 80128a4:	5c99      	ldrb	r1, [r3, r2]
 80128a6:	4b23      	ldr	r3, [pc, #140]	; (8012934 <RestoreCtxs+0x128>)
 80128a8:	4a26      	ldr	r2, [pc, #152]	; (8012944 <RestoreCtxs+0x138>)
 80128aa:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80128ac:	4b21      	ldr	r3, [pc, #132]	; (8012934 <RestoreCtxs+0x128>)
 80128ae:	4a26      	ldr	r2, [pc, #152]	; (8012948 <RestoreCtxs+0x13c>)
 80128b0:	2101      	movs	r1, #1
 80128b2:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80128b4:	4b1f      	ldr	r3, [pc, #124]	; (8012934 <RestoreCtxs+0x128>)
 80128b6:	4a25      	ldr	r2, [pc, #148]	; (801294c <RestoreCtxs+0x140>)
 80128b8:	2102      	movs	r1, #2
 80128ba:	5499      	strb	r1, [r3, r2]

    if( SecureElementRestoreNvmCtx( contexts->SecureElementNvmCtx ) != SECURE_ELEMENT_SUCCESS )
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	699b      	ldr	r3, [r3, #24]
 80128c0:	0018      	movs	r0, r3
 80128c2:	f7fb f801 	bl	800d8c8 <SecureElementRestoreNvmCtx>
 80128c6:	1e03      	subs	r3, r0, #0
 80128c8:	d001      	beq.n	80128ce <RestoreCtxs+0xc2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80128ca:	2311      	movs	r3, #17
 80128cc:	e02e      	b.n	801292c <RestoreCtxs+0x120>
    }

    if( LoRaMacCryptoRestoreNvmCtx( contexts->CryptoNvmCtx ) != LORAMAC_CRYPTO_SUCCESS )
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	691b      	ldr	r3, [r3, #16]
 80128d2:	0018      	movs	r0, r3
 80128d4:	f003 f9e2 	bl	8015c9c <LoRaMacCryptoRestoreNvmCtx>
 80128d8:	1e03      	subs	r3, r0, #0
 80128da:	d001      	beq.n	80128e0 <RestoreCtxs+0xd4>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80128dc:	2311      	movs	r3, #17
 80128de:	e025      	b.n	801292c <RestoreCtxs+0x120>
    }

    if( LoRaMacCommandsRestoreNvmCtx( contexts->CommandsNvmCtx ) != LORAMAC_COMMANDS_SUCCESS )
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	6a1b      	ldr	r3, [r3, #32]
 80128e4:	0018      	movs	r0, r3
 80128e6:	f002 f9b5 	bl	8014c54 <LoRaMacCommandsRestoreNvmCtx>
 80128ea:	1e03      	subs	r3, r0, #0
 80128ec:	d001      	beq.n	80128f2 <RestoreCtxs+0xe6>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80128ee:	2313      	movs	r3, #19
 80128f0:	e01c      	b.n	801292c <RestoreCtxs+0x120>
    }

    if( LoRaMacClassBRestoreNvmCtx( contexts->ClassBNvmCtx ) != true )
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80128f6:	0018      	movs	r0, r3
 80128f8:	f001 ff87 	bl	801480a <LoRaMacClassBRestoreNvmCtx>
 80128fc:	0003      	movs	r3, r0
 80128fe:	001a      	movs	r2, r3
 8012900:	2301      	movs	r3, #1
 8012902:	4053      	eors	r3, r2
 8012904:	b2db      	uxtb	r3, r3
 8012906:	2b00      	cmp	r3, #0
 8012908:	d001      	beq.n	801290e <RestoreCtxs+0x102>
    {
        return LORAMAC_STATUS_CLASS_B_ERROR;
 801290a:	2314      	movs	r3, #20
 801290c:	e00e      	b.n	801292c <RestoreCtxs+0x120>
    }

    if( LoRaMacConfirmQueueRestoreNvmCtx( contexts->ConfirmQueueNvmCtx ) != true )
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012912:	0018      	movs	r0, r3
 8012914:	f002 fc3e 	bl	8015194 <LoRaMacConfirmQueueRestoreNvmCtx>
 8012918:	0003      	movs	r3, r0
 801291a:	001a      	movs	r2, r3
 801291c:	2301      	movs	r3, #1
 801291e:	4053      	eors	r3, r2
 8012920:	b2db      	uxtb	r3, r3
 8012922:	2b00      	cmp	r3, #0
 8012924:	d001      	beq.n	801292a <RestoreCtxs+0x11e>
    {
        return LORAMAC_STATUS_CONFIRM_QUEUE_ERROR;
 8012926:	2315      	movs	r3, #21
 8012928:	e000      	b.n	801292c <RestoreCtxs+0x120>
    }

    return LORAMAC_STATUS_OK;
 801292a:	2300      	movs	r3, #0
}
 801292c:	0018      	movs	r0, r3
 801292e:	46bd      	mov	sp, r7
 8012930:	b004      	add	sp, #16
 8012932:	bd80      	pop	{r7, pc}
 8012934:	200005b8 	.word	0x200005b8
 8012938:	20000a44 	.word	0x20000a44
 801293c:	00000484 	.word	0x00000484
 8012940:	00000415 	.word	0x00000415
 8012944:	000003f1 	.word	0x000003f1
 8012948:	000003f2 	.word	0x000003f2
 801294c:	000003f3 	.word	0x000003f3

08012950 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 8012950:	b580      	push	{r7, lr}
 8012952:	b082      	sub	sp, #8
 8012954:	af00      	add	r7, sp, #0
 8012956:	6078      	str	r0, [r7, #4]
 8012958:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	2b00      	cmp	r3, #0
 801295e:	d002      	beq.n	8012966 <DetermineFrameType+0x16>
 8012960:	683b      	ldr	r3, [r7, #0]
 8012962:	2b00      	cmp	r3, #0
 8012964:	d101      	bne.n	801296a <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012966:	2303      	movs	r3, #3
 8012968:	e03b      	b.n	80129e2 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	7b1b      	ldrb	r3, [r3, #12]
 801296e:	220f      	movs	r2, #15
 8012970:	4013      	ands	r3, r2
 8012972:	b2db      	uxtb	r3, r3
 8012974:	2b00      	cmp	r3, #0
 8012976:	d008      	beq.n	801298a <DetermineFrameType+0x3a>
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	2220      	movs	r2, #32
 801297c:	5c9b      	ldrb	r3, [r3, r2]
 801297e:	2b00      	cmp	r3, #0
 8012980:	d003      	beq.n	801298a <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 8012982:	683b      	ldr	r3, [r7, #0]
 8012984:	2200      	movs	r2, #0
 8012986:	701a      	strb	r2, [r3, #0]
 8012988:	e02a      	b.n	80129e0 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	2228      	movs	r2, #40	; 0x28
 801298e:	5c9b      	ldrb	r3, [r3, r2]
 8012990:	2b00      	cmp	r3, #0
 8012992:	d103      	bne.n	801299c <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8012994:	683b      	ldr	r3, [r7, #0]
 8012996:	2201      	movs	r2, #1
 8012998:	701a      	strb	r2, [r3, #0]
 801299a:	e021      	b.n	80129e0 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	7b1b      	ldrb	r3, [r3, #12]
 80129a0:	220f      	movs	r2, #15
 80129a2:	4013      	ands	r3, r2
 80129a4:	b2db      	uxtb	r3, r3
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d108      	bne.n	80129bc <DetermineFrameType+0x6c>
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	2220      	movs	r2, #32
 80129ae:	5c9b      	ldrb	r3, [r3, r2]
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d103      	bne.n	80129bc <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 80129b4:	683b      	ldr	r3, [r7, #0]
 80129b6:	2202      	movs	r2, #2
 80129b8:	701a      	strb	r2, [r3, #0]
 80129ba:	e011      	b.n	80129e0 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	7b1b      	ldrb	r3, [r3, #12]
 80129c0:	220f      	movs	r2, #15
 80129c2:	4013      	ands	r3, r2
 80129c4:	b2db      	uxtb	r3, r3
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d108      	bne.n	80129dc <DetermineFrameType+0x8c>
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	2220      	movs	r2, #32
 80129ce:	5c9b      	ldrb	r3, [r3, r2]
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d003      	beq.n	80129dc <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 80129d4:	683b      	ldr	r3, [r7, #0]
 80129d6:	2203      	movs	r2, #3
 80129d8:	701a      	strb	r2, [r3, #0]
 80129da:	e001      	b.n	80129e0 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 80129dc:	2317      	movs	r3, #23
 80129de:	e000      	b.n	80129e2 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 80129e0:	2300      	movs	r3, #0
}
 80129e2:	0018      	movs	r0, r3
 80129e4:	46bd      	mov	sp, r7
 80129e6:	b002      	add	sp, #8
 80129e8:	bd80      	pop	{r7, pc}
	...

080129ec <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 80129ec:	b580      	push	{r7, lr}
 80129ee:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 80129f0:	4a14      	ldr	r2, [pc, #80]	; (8012a44 <CheckRetransUnconfirmedUplink+0x58>)
 80129f2:	2382      	movs	r3, #130	; 0x82
 80129f4:	00db      	lsls	r3, r3, #3
 80129f6:	5cd2      	ldrb	r2, [r2, r3]
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
 80129f8:	4b12      	ldr	r3, [pc, #72]	; (8012a44 <CheckRetransUnconfirmedUplink+0x58>)
 80129fa:	4913      	ldr	r1, [pc, #76]	; (8012a48 <CheckRetransUnconfirmedUplink+0x5c>)
 80129fc:	585b      	ldr	r3, [r3, r1]
 80129fe:	21a4      	movs	r1, #164	; 0xa4
 8012a00:	5c5b      	ldrb	r3, [r3, r1]
    if( MacCtx.ChannelsNbTransCounter >=
 8012a02:	429a      	cmp	r2, r3
 8012a04:	d301      	bcc.n	8012a0a <CheckRetransUnconfirmedUplink+0x1e>
    {
        return true;
 8012a06:	2301      	movs	r3, #1
 8012a08:	e018      	b.n	8012a3c <CheckRetransUnconfirmedUplink+0x50>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8012a0a:	4b0e      	ldr	r3, [pc, #56]	; (8012a44 <CheckRetransUnconfirmedUplink+0x58>)
 8012a0c:	4a0f      	ldr	r2, [pc, #60]	; (8012a4c <CheckRetransUnconfirmedUplink+0x60>)
 8012a0e:	5c9b      	ldrb	r3, [r3, r2]
 8012a10:	2202      	movs	r2, #2
 8012a12:	4013      	ands	r3, r2
 8012a14:	b2db      	uxtb	r3, r3
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d00f      	beq.n	8012a3a <CheckRetransUnconfirmedUplink+0x4e>
    {
        // For Class A stop in each case
        if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 8012a1a:	4b0a      	ldr	r3, [pc, #40]	; (8012a44 <CheckRetransUnconfirmedUplink+0x58>)
 8012a1c:	4a0a      	ldr	r2, [pc, #40]	; (8012a48 <CheckRetransUnconfirmedUplink+0x5c>)
 8012a1e:	589b      	ldr	r3, [r3, r2]
 8012a20:	227c      	movs	r2, #124	; 0x7c
 8012a22:	5c9b      	ldrb	r3, [r3, r2]
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d101      	bne.n	8012a2c <CheckRetransUnconfirmedUplink+0x40>
        {
            return true;
 8012a28:	2301      	movs	r3, #1
 8012a2a:	e007      	b.n	8012a3c <CheckRetransUnconfirmedUplink+0x50>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 )
 8012a2c:	4b05      	ldr	r3, [pc, #20]	; (8012a44 <CheckRetransUnconfirmedUplink+0x58>)
 8012a2e:	4a08      	ldr	r2, [pc, #32]	; (8012a50 <CheckRetransUnconfirmedUplink+0x64>)
 8012a30:	5c9b      	ldrb	r3, [r3, r2]
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d101      	bne.n	8012a3a <CheckRetransUnconfirmedUplink+0x4e>
            {
                return true;
 8012a36:	2301      	movs	r3, #1
 8012a38:	e000      	b.n	8012a3c <CheckRetransUnconfirmedUplink+0x50>
            }
        }
    }
    return false;
 8012a3a:	2300      	movs	r3, #0
}
 8012a3c:	0018      	movs	r0, r3
 8012a3e:	46bd      	mov	sp, r7
 8012a40:	bd80      	pop	{r7, pc}
 8012a42:	46c0      	nop			; (mov r8, r8)
 8012a44:	200005b8 	.word	0x200005b8
 8012a48:	00000484 	.word	0x00000484
 8012a4c:	00000481 	.word	0x00000481
 8012a50:	0000042d 	.word	0x0000042d

08012a54 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8012a54:	b580      	push	{r7, lr}
 8012a56:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 8012a58:	4b0e      	ldr	r3, [pc, #56]	; (8012a94 <CheckRetransConfirmedUplink+0x40>)
 8012a5a:	4a0f      	ldr	r2, [pc, #60]	; (8012a98 <CheckRetransConfirmedUplink+0x44>)
 8012a5c:	5c9a      	ldrb	r2, [r3, r2]
        MacCtx.AckTimeoutRetries )
 8012a5e:	4b0d      	ldr	r3, [pc, #52]	; (8012a94 <CheckRetransConfirmedUplink+0x40>)
 8012a60:	490e      	ldr	r1, [pc, #56]	; (8012a9c <CheckRetransConfirmedUplink+0x48>)
 8012a62:	5c5b      	ldrb	r3, [r3, r1]
    if( MacCtx.AckTimeoutRetriesCounter >=
 8012a64:	429a      	cmp	r2, r3
 8012a66:	d301      	bcc.n	8012a6c <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 8012a68:	2301      	movs	r3, #1
 8012a6a:	e010      	b.n	8012a8e <CheckRetransConfirmedUplink+0x3a>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8012a6c:	4b09      	ldr	r3, [pc, #36]	; (8012a94 <CheckRetransConfirmedUplink+0x40>)
 8012a6e:	4a0c      	ldr	r2, [pc, #48]	; (8012aa0 <CheckRetransConfirmedUplink+0x4c>)
 8012a70:	5c9b      	ldrb	r3, [r3, r2]
 8012a72:	2202      	movs	r2, #2
 8012a74:	4013      	ands	r3, r2
 8012a76:	b2db      	uxtb	r3, r3
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d007      	beq.n	8012a8c <CheckRetransConfirmedUplink+0x38>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8012a7c:	4a05      	ldr	r2, [pc, #20]	; (8012a94 <CheckRetransConfirmedUplink+0x40>)
 8012a7e:	2388      	movs	r3, #136	; 0x88
 8012a80:	00db      	lsls	r3, r3, #3
 8012a82:	5cd3      	ldrb	r3, [r2, r3]
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d001      	beq.n	8012a8c <CheckRetransConfirmedUplink+0x38>
        {
            return true;
 8012a88:	2301      	movs	r3, #1
 8012a8a:	e000      	b.n	8012a8e <CheckRetransConfirmedUplink+0x3a>
        }
    }
    return false;
 8012a8c:	2300      	movs	r3, #0
}
 8012a8e:	0018      	movs	r0, r3
 8012a90:	46bd      	mov	sp, r7
 8012a92:	bd80      	pop	{r7, pc}
 8012a94:	200005b8 	.word	0x200005b8
 8012a98:	00000412 	.word	0x00000412
 8012a9c:	00000411 	.word	0x00000411
 8012aa0:	00000481 	.word	0x00000481

08012aa4 <StopRetransmission>:

static bool StopRetransmission( void )
{
 8012aa4:	b580      	push	{r7, lr}
 8012aa6:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8012aa8:	4b1e      	ldr	r3, [pc, #120]	; (8012b24 <StopRetransmission+0x80>)
 8012aaa:	4a1f      	ldr	r2, [pc, #124]	; (8012b28 <StopRetransmission+0x84>)
 8012aac:	5c9b      	ldrb	r3, [r3, r2]
 8012aae:	2202      	movs	r2, #2
 8012ab0:	4013      	ands	r3, r2
 8012ab2:	b2db      	uxtb	r3, r3
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d009      	beq.n	8012acc <StopRetransmission+0x28>
        ( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
 8012ab8:	4b1a      	ldr	r3, [pc, #104]	; (8012b24 <StopRetransmission+0x80>)
 8012aba:	4a1c      	ldr	r2, [pc, #112]	; (8012b2c <StopRetransmission+0x88>)
 8012abc:	5c9b      	ldrb	r3, [r3, r2]
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d013      	beq.n	8012aea <StopRetransmission+0x46>
          ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_2 ) ) )
 8012ac2:	4b18      	ldr	r3, [pc, #96]	; (8012b24 <StopRetransmission+0x80>)
 8012ac4:	4a19      	ldr	r2, [pc, #100]	; (8012b2c <StopRetransmission+0x88>)
 8012ac6:	5c9b      	ldrb	r3, [r3, r2]
        ( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
 8012ac8:	2b01      	cmp	r3, #1
 8012aca:	d00e      	beq.n	8012aea <StopRetransmission+0x46>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( MacCtx.NvmCtx->AdrCtrlOn == true )
 8012acc:	4b15      	ldr	r3, [pc, #84]	; (8012b24 <StopRetransmission+0x80>)
 8012ace:	4a18      	ldr	r2, [pc, #96]	; (8012b30 <StopRetransmission+0x8c>)
 8012ad0:	589b      	ldr	r3, [r3, r2]
 8012ad2:	227e      	movs	r2, #126	; 0x7e
 8012ad4:	5c9b      	ldrb	r3, [r3, r2]
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d007      	beq.n	8012aea <StopRetransmission+0x46>
        {
            MacCtx.NvmCtx->AdrAckCounter++;
 8012ada:	4b12      	ldr	r3, [pc, #72]	; (8012b24 <StopRetransmission+0x80>)
 8012adc:	4a14      	ldr	r2, [pc, #80]	; (8012b30 <StopRetransmission+0x8c>)
 8012ade:	589b      	ldr	r3, [r3, r2]
 8012ae0:	2280      	movs	r2, #128	; 0x80
 8012ae2:	589a      	ldr	r2, [r3, r2]
 8012ae4:	3201      	adds	r2, #1
 8012ae6:	2180      	movs	r1, #128	; 0x80
 8012ae8:	505a      	str	r2, [r3, r1]
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8012aea:	4a0e      	ldr	r2, [pc, #56]	; (8012b24 <StopRetransmission+0x80>)
 8012aec:	2382      	movs	r3, #130	; 0x82
 8012aee:	00db      	lsls	r3, r3, #3
 8012af0:	2100      	movs	r1, #0
 8012af2:	54d1      	strb	r1, [r2, r3]
    MacCtx.NodeAckRequested = false;
 8012af4:	4b0b      	ldr	r3, [pc, #44]	; (8012b24 <StopRetransmission+0x80>)
 8012af6:	4a0f      	ldr	r2, [pc, #60]	; (8012b34 <StopRetransmission+0x90>)
 8012af8:	2100      	movs	r1, #0
 8012afa:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetry = false;
 8012afc:	4b09      	ldr	r3, [pc, #36]	; (8012b24 <StopRetransmission+0x80>)
 8012afe:	4a0e      	ldr	r2, [pc, #56]	; (8012b38 <StopRetransmission+0x94>)
 8012b00:	2100      	movs	r1, #0
 8012b02:	5499      	strb	r1, [r3, r2]
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8012b04:	4a07      	ldr	r2, [pc, #28]	; (8012b24 <StopRetransmission+0x80>)
 8012b06:	23d0      	movs	r3, #208	; 0xd0
 8012b08:	009b      	lsls	r3, r3, #2
 8012b0a:	58d3      	ldr	r3, [r2, r3]
 8012b0c:	2202      	movs	r2, #2
 8012b0e:	4393      	bics	r3, r2
 8012b10:	0019      	movs	r1, r3
 8012b12:	4a04      	ldr	r2, [pc, #16]	; (8012b24 <StopRetransmission+0x80>)
 8012b14:	23d0      	movs	r3, #208	; 0xd0
 8012b16:	009b      	lsls	r3, r3, #2
 8012b18:	50d1      	str	r1, [r2, r3]

    return true;
 8012b1a:	2301      	movs	r3, #1
}
 8012b1c:	0018      	movs	r0, r3
 8012b1e:	46bd      	mov	sp, r7
 8012b20:	bd80      	pop	{r7, pc}
 8012b22:	46c0      	nop			; (mov r8, r8)
 8012b24:	200005b8 	.word	0x200005b8
 8012b28:	00000481 	.word	0x00000481
 8012b2c:	0000042d 	.word	0x0000042d
 8012b30:	00000484 	.word	0x00000484
 8012b34:	00000414 	.word	0x00000414
 8012b38:	00000413 	.word	0x00000413

08012b3c <AckTimeoutRetriesProcess>:

static void AckTimeoutRetriesProcess( void )
{
 8012b3c:	b580      	push	{r7, lr}
 8012b3e:	b084      	sub	sp, #16
 8012b40:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 8012b42:	4b21      	ldr	r3, [pc, #132]	; (8012bc8 <AckTimeoutRetriesProcess+0x8c>)
 8012b44:	4a21      	ldr	r2, [pc, #132]	; (8012bcc <AckTimeoutRetriesProcess+0x90>)
 8012b46:	5c9a      	ldrb	r2, [r3, r2]
 8012b48:	4b1f      	ldr	r3, [pc, #124]	; (8012bc8 <AckTimeoutRetriesProcess+0x8c>)
 8012b4a:	4921      	ldr	r1, [pc, #132]	; (8012bd0 <AckTimeoutRetriesProcess+0x94>)
 8012b4c:	5c5b      	ldrb	r3, [r3, r1]
 8012b4e:	429a      	cmp	r2, r3
 8012b50:	d236      	bcs.n	8012bc0 <AckTimeoutRetriesProcess+0x84>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 8012b52:	4b1d      	ldr	r3, [pc, #116]	; (8012bc8 <AckTimeoutRetriesProcess+0x8c>)
 8012b54:	4a1d      	ldr	r2, [pc, #116]	; (8012bcc <AckTimeoutRetriesProcess+0x90>)
 8012b56:	5c9b      	ldrb	r3, [r3, r2]
 8012b58:	3301      	adds	r3, #1
 8012b5a:	b2d9      	uxtb	r1, r3
 8012b5c:	4b1a      	ldr	r3, [pc, #104]	; (8012bc8 <AckTimeoutRetriesProcess+0x8c>)
 8012b5e:	4a1b      	ldr	r2, [pc, #108]	; (8012bcc <AckTimeoutRetriesProcess+0x90>)
 8012b60:	5499      	strb	r1, [r3, r2]
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 8012b62:	4b19      	ldr	r3, [pc, #100]	; (8012bc8 <AckTimeoutRetriesProcess+0x8c>)
 8012b64:	4a19      	ldr	r2, [pc, #100]	; (8012bcc <AckTimeoutRetriesProcess+0x90>)
 8012b66:	5c9b      	ldrb	r3, [r3, r2]
 8012b68:	2201      	movs	r2, #1
 8012b6a:	4013      	ands	r3, r2
 8012b6c:	b2db      	uxtb	r3, r3
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d026      	beq.n	8012bc0 <AckTimeoutRetriesProcess+0x84>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8012b72:	2108      	movs	r1, #8
 8012b74:	187b      	adds	r3, r7, r1
 8012b76:	2222      	movs	r2, #34	; 0x22
 8012b78:	701a      	strb	r2, [r3, #0]
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8012b7a:	4b13      	ldr	r3, [pc, #76]	; (8012bc8 <AckTimeoutRetriesProcess+0x8c>)
 8012b7c:	4a15      	ldr	r2, [pc, #84]	; (8012bd4 <AckTimeoutRetriesProcess+0x98>)
 8012b7e:	589b      	ldr	r3, [r3, r2]
 8012b80:	22b8      	movs	r2, #184	; 0xb8
 8012b82:	5c9a      	ldrb	r2, [r3, r2]
 8012b84:	187b      	adds	r3, r7, r1
 8012b86:	709a      	strb	r2, [r3, #2]
            getPhy.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8012b88:	4b0f      	ldr	r3, [pc, #60]	; (8012bc8 <AckTimeoutRetriesProcess+0x8c>)
 8012b8a:	4a12      	ldr	r2, [pc, #72]	; (8012bd4 <AckTimeoutRetriesProcess+0x98>)
 8012b8c:	589b      	ldr	r3, [r3, r2]
 8012b8e:	2285      	movs	r2, #133	; 0x85
 8012b90:	569a      	ldrsb	r2, [r3, r2]
 8012b92:	187b      	adds	r3, r7, r1
 8012b94:	705a      	strb	r2, [r3, #1]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012b96:	4b0c      	ldr	r3, [pc, #48]	; (8012bc8 <AckTimeoutRetriesProcess+0x8c>)
 8012b98:	4a0e      	ldr	r2, [pc, #56]	; (8012bd4 <AckTimeoutRetriesProcess+0x98>)
 8012b9a:	589b      	ldr	r3, [r3, r2]
 8012b9c:	781b      	ldrb	r3, [r3, #0]
 8012b9e:	187a      	adds	r2, r7, r1
 8012ba0:	0011      	movs	r1, r2
 8012ba2:	0018      	movs	r0, r3
 8012ba4:	f004 f829 	bl	8016bfa <RegionGetPhyParam>
 8012ba8:	0003      	movs	r3, r0
 8012baa:	001a      	movs	r2, r3
 8012bac:	1d3b      	adds	r3, r7, #4
 8012bae:	601a      	str	r2, [r3, #0]
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = phyParam.Value;
 8012bb0:	1d3b      	adds	r3, r7, #4
 8012bb2:	6819      	ldr	r1, [r3, #0]
 8012bb4:	4b04      	ldr	r3, [pc, #16]	; (8012bc8 <AckTimeoutRetriesProcess+0x8c>)
 8012bb6:	4a07      	ldr	r2, [pc, #28]	; (8012bd4 <AckTimeoutRetriesProcess+0x98>)
 8012bb8:	589b      	ldr	r3, [r3, r2]
 8012bba:	b249      	sxtb	r1, r1
 8012bbc:	2285      	movs	r2, #133	; 0x85
 8012bbe:	5499      	strb	r1, [r3, r2]
        }
    }
}
 8012bc0:	46c0      	nop			; (mov r8, r8)
 8012bc2:	46bd      	mov	sp, r7
 8012bc4:	b004      	add	sp, #16
 8012bc6:	bd80      	pop	{r7, pc}
 8012bc8:	200005b8 	.word	0x200005b8
 8012bcc:	00000412 	.word	0x00000412
 8012bd0:	00000411 	.word	0x00000411
 8012bd4:	00000484 	.word	0x00000484

08012bd8 <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 8012bd8:	b580      	push	{r7, lr}
 8012bda:	b082      	sub	sp, #8
 8012bdc:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 8012bde:	4a16      	ldr	r2, [pc, #88]	; (8012c38 <AckTimeoutRetriesFinalize+0x60>)
 8012be0:	2388      	movs	r3, #136	; 0x88
 8012be2:	00db      	lsls	r3, r3, #3
 8012be4:	5cd3      	ldrb	r3, [r2, r3]
 8012be6:	2201      	movs	r2, #1
 8012be8:	4053      	eors	r3, r2
 8012bea:	b2db      	uxtb	r3, r3
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d018      	beq.n	8012c22 <AckTimeoutRetriesFinalize+0x4a>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8012bf0:	003b      	movs	r3, r7
 8012bf2:	2202      	movs	r2, #2
 8012bf4:	711a      	strb	r2, [r3, #4]
        params.NvmCtx = Contexts.RegionNvmCtx;
 8012bf6:	4b11      	ldr	r3, [pc, #68]	; (8012c3c <AckTimeoutRetriesFinalize+0x64>)
 8012bf8:	689a      	ldr	r2, [r3, #8]
 8012bfa:	003b      	movs	r3, r7
 8012bfc:	601a      	str	r2, [r3, #0]
        RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8012bfe:	4b0e      	ldr	r3, [pc, #56]	; (8012c38 <AckTimeoutRetriesFinalize+0x60>)
 8012c00:	4a0f      	ldr	r2, [pc, #60]	; (8012c40 <AckTimeoutRetriesFinalize+0x68>)
 8012c02:	589b      	ldr	r3, [r3, r2]
 8012c04:	781b      	ldrb	r3, [r3, #0]
 8012c06:	003a      	movs	r2, r7
 8012c08:	0011      	movs	r1, r2
 8012c0a:	0018      	movs	r0, r3
 8012c0c:	f004 f831 	bl	8016c72 <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 8012c10:	4b09      	ldr	r3, [pc, #36]	; (8012c38 <AckTimeoutRetriesFinalize+0x60>)
 8012c12:	4a0c      	ldr	r2, [pc, #48]	; (8012c44 <AckTimeoutRetriesFinalize+0x6c>)
 8012c14:	2100      	movs	r1, #0
 8012c16:	5499      	strb	r1, [r3, r2]
        MacCtx.McpsConfirm.AckReceived = false;
 8012c18:	4a07      	ldr	r2, [pc, #28]	; (8012c38 <AckTimeoutRetriesFinalize+0x60>)
 8012c1a:	2388      	movs	r3, #136	; 0x88
 8012c1c:	00db      	lsls	r3, r3, #3
 8012c1e:	2100      	movs	r1, #0
 8012c20:	54d1      	strb	r1, [r2, r3]
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8012c22:	4b05      	ldr	r3, [pc, #20]	; (8012c38 <AckTimeoutRetriesFinalize+0x60>)
 8012c24:	4a08      	ldr	r2, [pc, #32]	; (8012c48 <AckTimeoutRetriesFinalize+0x70>)
 8012c26:	5c99      	ldrb	r1, [r3, r2]
 8012c28:	4b03      	ldr	r3, [pc, #12]	; (8012c38 <AckTimeoutRetriesFinalize+0x60>)
 8012c2a:	4a08      	ldr	r2, [pc, #32]	; (8012c4c <AckTimeoutRetriesFinalize+0x74>)
 8012c2c:	5499      	strb	r1, [r3, r2]
}
 8012c2e:	46c0      	nop			; (mov r8, r8)
 8012c30:	46bd      	mov	sp, r7
 8012c32:	b002      	add	sp, #8
 8012c34:	bd80      	pop	{r7, pc}
 8012c36:	46c0      	nop			; (mov r8, r8)
 8012c38:	200005b8 	.word	0x200005b8
 8012c3c:	20000bb0 	.word	0x20000bb0
 8012c40:	00000484 	.word	0x00000484
 8012c44:	00000414 	.word	0x00000414
 8012c48:	00000412 	.word	0x00000412
 8012c4c:	00000441 	.word	0x00000441

08012c50 <CallNvmCtxCallback>:

static void CallNvmCtxCallback( LoRaMacNvmCtxModule_t module )
{
 8012c50:	b580      	push	{r7, lr}
 8012c52:	b082      	sub	sp, #8
 8012c54:	af00      	add	r7, sp, #0
 8012c56:	0002      	movs	r2, r0
 8012c58:	1dfb      	adds	r3, r7, #7
 8012c5a:	701a      	strb	r2, [r3, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmContextChange != NULL ) )
 8012c5c:	4a0c      	ldr	r2, [pc, #48]	; (8012c90 <CallNvmCtxCallback+0x40>)
 8012c5e:	23d2      	movs	r3, #210	; 0xd2
 8012c60:	009b      	lsls	r3, r3, #2
 8012c62:	58d3      	ldr	r3, [r2, r3]
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d00f      	beq.n	8012c88 <CallNvmCtxCallback+0x38>
 8012c68:	4a09      	ldr	r2, [pc, #36]	; (8012c90 <CallNvmCtxCallback+0x40>)
 8012c6a:	23d2      	movs	r3, #210	; 0xd2
 8012c6c:	009b      	lsls	r3, r3, #2
 8012c6e:	58d3      	ldr	r3, [r2, r3]
 8012c70:	689b      	ldr	r3, [r3, #8]
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d008      	beq.n	8012c88 <CallNvmCtxCallback+0x38>
    {
        MacCtx.MacCallbacks->NvmContextChange( module );
 8012c76:	4a06      	ldr	r2, [pc, #24]	; (8012c90 <CallNvmCtxCallback+0x40>)
 8012c78:	23d2      	movs	r3, #210	; 0xd2
 8012c7a:	009b      	lsls	r3, r3, #2
 8012c7c:	58d3      	ldr	r3, [r2, r3]
 8012c7e:	689b      	ldr	r3, [r3, #8]
 8012c80:	1dfa      	adds	r2, r7, #7
 8012c82:	7812      	ldrb	r2, [r2, #0]
 8012c84:	0010      	movs	r0, r2
 8012c86:	4798      	blx	r3
    }
}
 8012c88:	46c0      	nop			; (mov r8, r8)
 8012c8a:	46bd      	mov	sp, r7
 8012c8c:	b002      	add	sp, #8
 8012c8e:	bd80      	pop	{r7, pc}
 8012c90:	200005b8 	.word	0x200005b8

08012c94 <EventMacNvmCtxChanged>:

static void EventMacNvmCtxChanged( void )
{
 8012c94:	b580      	push	{r7, lr}
 8012c96:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_MAC );
 8012c98:	2000      	movs	r0, #0
 8012c9a:	f7ff ffd9 	bl	8012c50 <CallNvmCtxCallback>
}
 8012c9e:	46c0      	nop			; (mov r8, r8)
 8012ca0:	46bd      	mov	sp, r7
 8012ca2:	bd80      	pop	{r7, pc}

08012ca4 <EventRegionNvmCtxChanged>:

static void EventRegionNvmCtxChanged( void )
{
 8012ca4:	b580      	push	{r7, lr}
 8012ca6:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_REGION );
 8012ca8:	2001      	movs	r0, #1
 8012caa:	f7ff ffd1 	bl	8012c50 <CallNvmCtxCallback>
}
 8012cae:	46c0      	nop			; (mov r8, r8)
 8012cb0:	46bd      	mov	sp, r7
 8012cb2:	bd80      	pop	{r7, pc}

08012cb4 <EventCryptoNvmCtxChanged>:

static void EventCryptoNvmCtxChanged( void )
{
 8012cb4:	b580      	push	{r7, lr}
 8012cb6:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CRYPTO );
 8012cb8:	2002      	movs	r0, #2
 8012cba:	f7ff ffc9 	bl	8012c50 <CallNvmCtxCallback>
}
 8012cbe:	46c0      	nop			; (mov r8, r8)
 8012cc0:	46bd      	mov	sp, r7
 8012cc2:	bd80      	pop	{r7, pc}

08012cc4 <EventSecureElementNvmCtxChanged>:

static void EventSecureElementNvmCtxChanged( void )
{
 8012cc4:	b580      	push	{r7, lr}
 8012cc6:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_SECURE_ELEMENT );
 8012cc8:	2003      	movs	r0, #3
 8012cca:	f7ff ffc1 	bl	8012c50 <CallNvmCtxCallback>
}
 8012cce:	46c0      	nop			; (mov r8, r8)
 8012cd0:	46bd      	mov	sp, r7
 8012cd2:	bd80      	pop	{r7, pc}

08012cd4 <EventCommandsNvmCtxChanged>:

static void EventCommandsNvmCtxChanged( void )
{
 8012cd4:	b580      	push	{r7, lr}
 8012cd6:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_COMMANDS );
 8012cd8:	2004      	movs	r0, #4
 8012cda:	f7ff ffb9 	bl	8012c50 <CallNvmCtxCallback>
}
 8012cde:	46c0      	nop			; (mov r8, r8)
 8012ce0:	46bd      	mov	sp, r7
 8012ce2:	bd80      	pop	{r7, pc}

08012ce4 <EventClassBNvmCtxChanged>:

static void EventClassBNvmCtxChanged( void )
{
 8012ce4:	b580      	push	{r7, lr}
 8012ce6:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CLASS_B );
 8012ce8:	2005      	movs	r0, #5
 8012cea:	f7ff ffb1 	bl	8012c50 <CallNvmCtxCallback>
}
 8012cee:	46c0      	nop			; (mov r8, r8)
 8012cf0:	46bd      	mov	sp, r7
 8012cf2:	bd80      	pop	{r7, pc}

08012cf4 <EventConfirmQueueNvmCtxChanged>:

static void EventConfirmQueueNvmCtxChanged( void )
{
 8012cf4:	b580      	push	{r7, lr}
 8012cf6:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CONFIRM_QUEUE );
 8012cf8:	2006      	movs	r0, #6
 8012cfa:	f7ff ffa9 	bl	8012c50 <CallNvmCtxCallback>
}
 8012cfe:	46c0      	nop			; (mov r8, r8)
 8012d00:	46bd      	mov	sp, r7
 8012d02:	bd80      	pop	{r7, pc}

08012d04 <IsRequestPending>:

static uint8_t IsRequestPending( void )
{
 8012d04:	b580      	push	{r7, lr}
 8012d06:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8012d08:	4b0a      	ldr	r3, [pc, #40]	; (8012d34 <IsRequestPending+0x30>)
 8012d0a:	4a0b      	ldr	r2, [pc, #44]	; (8012d38 <IsRequestPending+0x34>)
 8012d0c:	5c9b      	ldrb	r3, [r3, r2]
 8012d0e:	2204      	movs	r2, #4
 8012d10:	4013      	ands	r3, r2
 8012d12:	b2db      	uxtb	r3, r3
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d107      	bne.n	8012d28 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8012d18:	4b06      	ldr	r3, [pc, #24]	; (8012d34 <IsRequestPending+0x30>)
 8012d1a:	4a07      	ldr	r2, [pc, #28]	; (8012d38 <IsRequestPending+0x34>)
 8012d1c:	5c9b      	ldrb	r3, [r3, r2]
 8012d1e:	2201      	movs	r2, #1
 8012d20:	4013      	ands	r3, r2
 8012d22:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d001      	beq.n	8012d2c <IsRequestPending+0x28>
    {
        return 1;
 8012d28:	2301      	movs	r3, #1
 8012d2a:	e000      	b.n	8012d2e <IsRequestPending+0x2a>
    }
    return 0;
 8012d2c:	2300      	movs	r3, #0
}
 8012d2e:	0018      	movs	r0, r3
 8012d30:	46bd      	mov	sp, r7
 8012d32:	bd80      	pop	{r7, pc}
 8012d34:	200005b8 	.word	0x200005b8
 8012d38:	00000481 	.word	0x00000481

08012d3c <LoRaMacIsBusy>:

/* Exported functions ---------------------------------------------------------*/
bool LoRaMacIsBusy( void )
{
 8012d3c:	b580      	push	{r7, lr}
 8012d3e:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8012d40:	4a08      	ldr	r2, [pc, #32]	; (8012d64 <LoRaMacIsBusy+0x28>)
 8012d42:	23d0      	movs	r3, #208	; 0xd0
 8012d44:	009b      	lsls	r3, r3, #2
 8012d46:	58d3      	ldr	r3, [r2, r3]
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d106      	bne.n	8012d5a <LoRaMacIsBusy+0x1e>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 8012d4c:	4b05      	ldr	r3, [pc, #20]	; (8012d64 <LoRaMacIsBusy+0x28>)
 8012d4e:	4a06      	ldr	r2, [pc, #24]	; (8012d68 <LoRaMacIsBusy+0x2c>)
 8012d50:	5c9b      	ldrb	r3, [r3, r2]
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8012d52:	2b01      	cmp	r3, #1
 8012d54:	d101      	bne.n	8012d5a <LoRaMacIsBusy+0x1e>
    {
        return false;
 8012d56:	2300      	movs	r3, #0
 8012d58:	e000      	b.n	8012d5c <LoRaMacIsBusy+0x20>
    }
    return true;
 8012d5a:	2301      	movs	r3, #1
}
 8012d5c:	0018      	movs	r0, r3
 8012d5e:	46bd      	mov	sp, r7
 8012d60:	bd80      	pop	{r7, pc}
 8012d62:	46c0      	nop			; (mov r8, r8)
 8012d64:	200005b8 	.word	0x200005b8
 8012d68:	00000482 	.word	0x00000482

08012d6c <LoRaMacProcess>:

void LoRaMacProcess( void )
{
 8012d6c:	b580      	push	{r7, lr}
 8012d6e:	b082      	sub	sp, #8
 8012d70:	af00      	add	r7, sp, #0
    uint8_t noTx = 0x00;
 8012d72:	1dfb      	adds	r3, r7, #7
 8012d74:	2200      	movs	r2, #0
 8012d76:	701a      	strb	r2, [r3, #0]

    LoRaMacHandleIrqEvents( );
 8012d78:	f7fd f970 	bl	801005c <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 8012d7c:	f001 fe26 	bl	80149cc <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8012d80:	4b1b      	ldr	r3, [pc, #108]	; (8012df0 <LoRaMacProcess+0x84>)
 8012d82:	4a1c      	ldr	r2, [pc, #112]	; (8012df4 <LoRaMacProcess+0x88>)
 8012d84:	5c9b      	ldrb	r3, [r3, r2]
 8012d86:	2220      	movs	r2, #32
 8012d88:	4013      	ands	r3, r2
 8012d8a:	b2db      	uxtb	r3, r3
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d020      	beq.n	8012dd2 <LoRaMacProcess+0x66>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 8012d90:	2000      	movs	r0, #0
 8012d92:	f7fd f9af 	bl	80100f4 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 8012d96:	f7fd fb8b 	bl	80104b0 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 8012d9a:	f7ff ffb3 	bl	8012d04 <IsRequestPending>
 8012d9e:	1e03      	subs	r3, r0, #0
 8012da0:	d008      	beq.n	8012db4 <LoRaMacProcess+0x48>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 8012da2:	f7fd fb59 	bl	8010458 <LoRaMacCheckForBeaconAcquisition>
 8012da6:	0003      	movs	r3, r0
 8012da8:	0019      	movs	r1, r3
 8012daa:	1dfb      	adds	r3, r7, #7
 8012dac:	1dfa      	adds	r2, r7, #7
 8012dae:	7812      	ldrb	r2, [r2, #0]
 8012db0:	430a      	orrs	r2, r1
 8012db2:	701a      	strb	r2, [r3, #0]
        }

        if( noTx == 0x00 )
 8012db4:	1dfb      	adds	r3, r7, #7
 8012db6:	781b      	ldrb	r3, [r3, #0]
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d103      	bne.n	8012dc4 <LoRaMacProcess+0x58>
        {
            LoRaMacHandleMlmeRequest( );
 8012dbc:	f7fd fb0a 	bl	80103d4 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 8012dc0:	f7fd fa86 	bl	80102d0 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 8012dc4:	f7fd f9aa 	bl	801011c <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 8012dc8:	f7fd fa0e 	bl	80101e8 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8012dcc:	2001      	movs	r0, #1
 8012dce:	f7fd f991 	bl	80100f4 <LoRaMacEnableRequests>
    }
    LoRaMacHandleIndicationEvents( );
 8012dd2:	f7fd fa25 	bl	8010220 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 8012dd6:	4a06      	ldr	r2, [pc, #24]	; (8012df0 <LoRaMacProcess+0x84>)
 8012dd8:	2390      	movs	r3, #144	; 0x90
 8012dda:	00db      	lsls	r3, r3, #3
 8012ddc:	5cd3      	ldrb	r3, [r2, r3]
 8012dde:	2b02      	cmp	r3, #2
 8012de0:	d101      	bne.n	8012de6 <LoRaMacProcess+0x7a>
    {
        OpenContinuousRxCWindow( );
 8012de2:	f7ff f9d1 	bl	8012188 <OpenContinuousRxCWindow>
    }
}
 8012de6:	46c0      	nop			; (mov r8, r8)
 8012de8:	46bd      	mov	sp, r7
 8012dea:	b002      	add	sp, #8
 8012dec:	bd80      	pop	{r7, pc}
 8012dee:	46c0      	nop			; (mov r8, r8)
 8012df0:	200005b8 	.word	0x200005b8
 8012df4:	00000481 	.word	0x00000481

08012df8 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8012df8:	b5b0      	push	{r4, r5, r7, lr}
 8012dfa:	b098      	sub	sp, #96	; 0x60
 8012dfc:	af02      	add	r7, sp, #8
 8012dfe:	6178      	str	r0, [r7, #20]
 8012e00:	6139      	str	r1, [r7, #16]
 8012e02:	230f      	movs	r3, #15
 8012e04:	18fb      	adds	r3, r7, r3
 8012e06:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( ( primitives == NULL ) ||
 8012e08:	697b      	ldr	r3, [r7, #20]
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d002      	beq.n	8012e14 <LoRaMacInitialization+0x1c>
 8012e0e:	693b      	ldr	r3, [r7, #16]
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d101      	bne.n	8012e18 <LoRaMacInitialization+0x20>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012e14:	2303      	movs	r3, #3
 8012e16:	e35e      	b.n	80134d6 <LoRaMacInitialization+0x6de>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8012e18:	697b      	ldr	r3, [r7, #20]
 8012e1a:	681b      	ldr	r3, [r3, #0]
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d00b      	beq.n	8012e38 <LoRaMacInitialization+0x40>
        ( primitives->MacMcpsIndication == NULL ) ||
 8012e20:	697b      	ldr	r3, [r7, #20]
 8012e22:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d007      	beq.n	8012e38 <LoRaMacInitialization+0x40>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8012e28:	697b      	ldr	r3, [r7, #20]
 8012e2a:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d003      	beq.n	8012e38 <LoRaMacInitialization+0x40>
        ( primitives->MacMlmeIndication == NULL ) )
 8012e30:	697b      	ldr	r3, [r7, #20]
 8012e32:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d101      	bne.n	8012e3c <LoRaMacInitialization+0x44>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012e38:	2303      	movs	r3, #3
 8012e3a:	e34c      	b.n	80134d6 <LoRaMacInitialization+0x6de>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8012e3c:	230f      	movs	r3, #15
 8012e3e:	18fb      	adds	r3, r7, r3
 8012e40:	781b      	ldrb	r3, [r3, #0]
 8012e42:	0018      	movs	r0, r3
 8012e44:	f003 fec8 	bl	8016bd8 <RegionIsActive>
 8012e48:	0003      	movs	r3, r0
 8012e4a:	001a      	movs	r2, r3
 8012e4c:	2301      	movs	r3, #1
 8012e4e:	4053      	eors	r3, r2
 8012e50:	b2db      	uxtb	r3, r3
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d001      	beq.n	8012e5a <LoRaMacInitialization+0x62>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8012e56:	2309      	movs	r3, #9
 8012e58:	e33d      	b.n	80134d6 <LoRaMacInitialization+0x6de>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives, EventConfirmQueueNvmCtxChanged );
 8012e5a:	4afd      	ldr	r2, [pc, #1012]	; (8013250 <LoRaMacInitialization+0x458>)
 8012e5c:	697b      	ldr	r3, [r7, #20]
 8012e5e:	0011      	movs	r1, r2
 8012e60:	0018      	movs	r0, r3
 8012e62:	f002 f967 	bl	8015134 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &NvmMacCtx, 0x00, sizeof( LoRaMacNvmCtx_t ) );
 8012e66:	23b6      	movs	r3, #182	; 0xb6
 8012e68:	005a      	lsls	r2, r3, #1
 8012e6a:	4bfa      	ldr	r3, [pc, #1000]	; (8013254 <LoRaMacInitialization+0x45c>)
 8012e6c:	2100      	movs	r1, #0
 8012e6e:	0018      	movs	r0, r3
 8012e70:	f006 fb80 	bl	8019574 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8012e74:	4af8      	ldr	r2, [pc, #992]	; (8013258 <LoRaMacInitialization+0x460>)
 8012e76:	4bf9      	ldr	r3, [pc, #996]	; (801325c <LoRaMacInitialization+0x464>)
 8012e78:	2100      	movs	r1, #0
 8012e7a:	0018      	movs	r0, r3
 8012e7c:	f006 fb7a 	bl	8019574 <memset1>
    MacCtx.NvmCtx = &NvmMacCtx;
 8012e80:	4bf6      	ldr	r3, [pc, #984]	; (801325c <LoRaMacInitialization+0x464>)
 8012e82:	49f7      	ldr	r1, [pc, #988]	; (8013260 <LoRaMacInitialization+0x468>)
 8012e84:	4af3      	ldr	r2, [pc, #972]	; (8013254 <LoRaMacInitialization+0x45c>)
 8012e86:	505a      	str	r2, [r3, r1]

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 8012e88:	4bf4      	ldr	r3, [pc, #976]	; (801325c <LoRaMacInitialization+0x464>)
 8012e8a:	4af6      	ldr	r2, [pc, #984]	; (8013264 <LoRaMacInitialization+0x46c>)
 8012e8c:	2101      	movs	r1, #1
 8012e8e:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetries = 1;
 8012e90:	4bf2      	ldr	r3, [pc, #968]	; (801325c <LoRaMacInitialization+0x464>)
 8012e92:	4af5      	ldr	r2, [pc, #980]	; (8013268 <LoRaMacInitialization+0x470>)
 8012e94:	2101      	movs	r1, #1
 8012e96:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->Region = region;
 8012e98:	4bf0      	ldr	r3, [pc, #960]	; (801325c <LoRaMacInitialization+0x464>)
 8012e9a:	4af1      	ldr	r2, [pc, #964]	; (8013260 <LoRaMacInitialization+0x468>)
 8012e9c:	589b      	ldr	r3, [r3, r2]
 8012e9e:	220f      	movs	r2, #15
 8012ea0:	18ba      	adds	r2, r7, r2
 8012ea2:	7812      	ldrb	r2, [r2, #0]
 8012ea4:	701a      	strb	r2, [r3, #0]
    MacCtx.NvmCtx->DeviceClass = CLASS_A;
 8012ea6:	4bed      	ldr	r3, [pc, #948]	; (801325c <LoRaMacInitialization+0x464>)
 8012ea8:	4aed      	ldr	r2, [pc, #948]	; (8013260 <LoRaMacInitialization+0x468>)
 8012eaa:	589b      	ldr	r3, [r3, r2]
 8012eac:	227c      	movs	r2, #124	; 0x7c
 8012eae:	2100      	movs	r1, #0
 8012eb0:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->RepeaterSupport = false;
 8012eb2:	4bea      	ldr	r3, [pc, #936]	; (801325c <LoRaMacInitialization+0x464>)
 8012eb4:	4aea      	ldr	r2, [pc, #936]	; (8013260 <LoRaMacInitialization+0x468>)
 8012eb6:	589b      	ldr	r3, [r3, r2]
 8012eb8:	22ca      	movs	r2, #202	; 0xca
 8012eba:	2100      	movs	r1, #0
 8012ebc:	5499      	strb	r1, [r3, r2]

    // Setup version
    MacCtx.NvmCtx->Version.Value = LORAMAC_VERSION;
 8012ebe:	4be7      	ldr	r3, [pc, #924]	; (801325c <LoRaMacInitialization+0x464>)
 8012ec0:	4ae7      	ldr	r2, [pc, #924]	; (8013260 <LoRaMacInitialization+0x468>)
 8012ec2:	589a      	ldr	r2, [r3, r2]
 8012ec4:	23b0      	movs	r3, #176	; 0xb0
 8012ec6:	005b      	lsls	r3, r3, #1
 8012ec8:	49e8      	ldr	r1, [pc, #928]	; (801326c <LoRaMacInitialization+0x474>)
 8012eca:	50d1      	str	r1, [r2, r3]

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8012ecc:	2550      	movs	r5, #80	; 0x50
 8012ece:	197b      	adds	r3, r7, r5
 8012ed0:	220f      	movs	r2, #15
 8012ed2:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012ed4:	4be1      	ldr	r3, [pc, #900]	; (801325c <LoRaMacInitialization+0x464>)
 8012ed6:	4ae2      	ldr	r2, [pc, #904]	; (8013260 <LoRaMacInitialization+0x468>)
 8012ed8:	589b      	ldr	r3, [r3, r2]
 8012eda:	781b      	ldrb	r3, [r3, #0]
 8012edc:	197a      	adds	r2, r7, r5
 8012ede:	0011      	movs	r1, r2
 8012ee0:	0018      	movs	r0, r3
 8012ee2:	f003 fe8a 	bl	8016bfa <RegionGetPhyParam>
 8012ee6:	0003      	movs	r3, r0
 8012ee8:	001a      	movs	r2, r3
 8012eea:	244c      	movs	r4, #76	; 0x4c
 8012eec:	193b      	adds	r3, r7, r4
 8012eee:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->DutyCycleOn = ( bool ) phyParam.Value;
 8012ef0:	193b      	adds	r3, r7, r4
 8012ef2:	681a      	ldr	r2, [r3, #0]
 8012ef4:	4bd9      	ldr	r3, [pc, #868]	; (801325c <LoRaMacInitialization+0x464>)
 8012ef6:	49da      	ldr	r1, [pc, #872]	; (8013260 <LoRaMacInitialization+0x468>)
 8012ef8:	585b      	ldr	r3, [r3, r1]
 8012efa:	1e51      	subs	r1, r2, #1
 8012efc:	418a      	sbcs	r2, r1
 8012efe:	b2d1      	uxtb	r1, r2
 8012f00:	22c9      	movs	r2, #201	; 0xc9
 8012f02:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8012f04:	197b      	adds	r3, r7, r5
 8012f06:	220a      	movs	r2, #10
 8012f08:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012f0a:	4bd4      	ldr	r3, [pc, #848]	; (801325c <LoRaMacInitialization+0x464>)
 8012f0c:	4ad4      	ldr	r2, [pc, #848]	; (8013260 <LoRaMacInitialization+0x468>)
 8012f0e:	589b      	ldr	r3, [r3, r2]
 8012f10:	781b      	ldrb	r3, [r3, #0]
 8012f12:	197a      	adds	r2, r7, r5
 8012f14:	0011      	movs	r1, r2
 8012f16:	0018      	movs	r0, r3
 8012f18:	f003 fe6f 	bl	8016bfa <RegionGetPhyParam>
 8012f1c:	0003      	movs	r3, r0
 8012f1e:	001a      	movs	r2, r3
 8012f20:	193b      	adds	r3, r7, r4
 8012f22:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;
 8012f24:	193b      	adds	r3, r7, r4
 8012f26:	6819      	ldr	r1, [r3, #0]
 8012f28:	4bcc      	ldr	r3, [pc, #816]	; (801325c <LoRaMacInitialization+0x464>)
 8012f2a:	4acd      	ldr	r2, [pc, #820]	; (8013260 <LoRaMacInitialization+0x468>)
 8012f2c:	589b      	ldr	r3, [r3, r2]
 8012f2e:	b24a      	sxtb	r2, r1
 8012f30:	711a      	strb	r2, [r3, #4]

    getPhy.Attribute = PHY_DEF_TX_DR;
 8012f32:	197b      	adds	r3, r7, r5
 8012f34:	2206      	movs	r2, #6
 8012f36:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012f38:	4bc8      	ldr	r3, [pc, #800]	; (801325c <LoRaMacInitialization+0x464>)
 8012f3a:	4ac9      	ldr	r2, [pc, #804]	; (8013260 <LoRaMacInitialization+0x468>)
 8012f3c:	589b      	ldr	r3, [r3, r2]
 8012f3e:	781b      	ldrb	r3, [r3, #0]
 8012f40:	197a      	adds	r2, r7, r5
 8012f42:	0011      	movs	r1, r2
 8012f44:	0018      	movs	r0, r3
 8012f46:	f003 fe58 	bl	8016bfa <RegionGetPhyParam>
 8012f4a:	0003      	movs	r3, r0
 8012f4c:	001a      	movs	r2, r3
 8012f4e:	193b      	adds	r3, r7, r4
 8012f50:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;
 8012f52:	193b      	adds	r3, r7, r4
 8012f54:	6819      	ldr	r1, [r3, #0]
 8012f56:	4bc1      	ldr	r3, [pc, #772]	; (801325c <LoRaMacInitialization+0x464>)
 8012f58:	4ac1      	ldr	r2, [pc, #772]	; (8013260 <LoRaMacInitialization+0x468>)
 8012f5a:	589b      	ldr	r3, [r3, r2]
 8012f5c:	b24a      	sxtb	r2, r1
 8012f5e:	715a      	strb	r2, [r3, #5]

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8012f60:	197b      	adds	r3, r7, r5
 8012f62:	2210      	movs	r2, #16
 8012f64:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012f66:	4bbd      	ldr	r3, [pc, #756]	; (801325c <LoRaMacInitialization+0x464>)
 8012f68:	4abd      	ldr	r2, [pc, #756]	; (8013260 <LoRaMacInitialization+0x468>)
 8012f6a:	589b      	ldr	r3, [r3, r2]
 8012f6c:	781b      	ldrb	r3, [r3, #0]
 8012f6e:	197a      	adds	r2, r7, r5
 8012f70:	0011      	movs	r1, r2
 8012f72:	0018      	movs	r0, r3
 8012f74:	f003 fe41 	bl	8016bfa <RegionGetPhyParam>
 8012f78:	0003      	movs	r3, r0
 8012f7a:	001a      	movs	r2, r3
 8012f7c:	193b      	adds	r3, r7, r4
 8012f7e:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8012f80:	4bb6      	ldr	r3, [pc, #728]	; (801325c <LoRaMacInitialization+0x464>)
 8012f82:	4ab7      	ldr	r2, [pc, #732]	; (8013260 <LoRaMacInitialization+0x468>)
 8012f84:	589b      	ldr	r3, [r3, r2]
 8012f86:	193a      	adds	r2, r7, r4
 8012f88:	6812      	ldr	r2, [r2, #0]
 8012f8a:	611a      	str	r2, [r3, #16]

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8012f8c:	197b      	adds	r3, r7, r5
 8012f8e:	2211      	movs	r2, #17
 8012f90:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012f92:	4bb2      	ldr	r3, [pc, #712]	; (801325c <LoRaMacInitialization+0x464>)
 8012f94:	4ab2      	ldr	r2, [pc, #712]	; (8013260 <LoRaMacInitialization+0x468>)
 8012f96:	589b      	ldr	r3, [r3, r2]
 8012f98:	781b      	ldrb	r3, [r3, #0]
 8012f9a:	197a      	adds	r2, r7, r5
 8012f9c:	0011      	movs	r1, r2
 8012f9e:	0018      	movs	r0, r3
 8012fa0:	f003 fe2b 	bl	8016bfa <RegionGetPhyParam>
 8012fa4:	0003      	movs	r3, r0
 8012fa6:	001a      	movs	r2, r3
 8012fa8:	193b      	adds	r3, r7, r4
 8012faa:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8012fac:	4bab      	ldr	r3, [pc, #684]	; (801325c <LoRaMacInitialization+0x464>)
 8012fae:	4aac      	ldr	r2, [pc, #688]	; (8013260 <LoRaMacInitialization+0x468>)
 8012fb0:	589b      	ldr	r3, [r3, r2]
 8012fb2:	193a      	adds	r2, r7, r4
 8012fb4:	6812      	ldr	r2, [r2, #0]
 8012fb6:	615a      	str	r2, [r3, #20]

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8012fb8:	197b      	adds	r3, r7, r5
 8012fba:	2212      	movs	r2, #18
 8012fbc:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012fbe:	4ba7      	ldr	r3, [pc, #668]	; (801325c <LoRaMacInitialization+0x464>)
 8012fc0:	4aa7      	ldr	r2, [pc, #668]	; (8013260 <LoRaMacInitialization+0x468>)
 8012fc2:	589b      	ldr	r3, [r3, r2]
 8012fc4:	781b      	ldrb	r3, [r3, #0]
 8012fc6:	197a      	adds	r2, r7, r5
 8012fc8:	0011      	movs	r1, r2
 8012fca:	0018      	movs	r0, r3
 8012fcc:	f003 fe15 	bl	8016bfa <RegionGetPhyParam>
 8012fd0:	0003      	movs	r3, r0
 8012fd2:	001a      	movs	r2, r3
 8012fd4:	193b      	adds	r3, r7, r4
 8012fd6:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8012fd8:	4ba0      	ldr	r3, [pc, #640]	; (801325c <LoRaMacInitialization+0x464>)
 8012fda:	4aa1      	ldr	r2, [pc, #644]	; (8013260 <LoRaMacInitialization+0x468>)
 8012fdc:	589b      	ldr	r3, [r3, r2]
 8012fde:	193a      	adds	r2, r7, r4
 8012fe0:	6812      	ldr	r2, [r2, #0]
 8012fe2:	619a      	str	r2, [r3, #24]

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8012fe4:	197b      	adds	r3, r7, r5
 8012fe6:	2213      	movs	r2, #19
 8012fe8:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012fea:	4b9c      	ldr	r3, [pc, #624]	; (801325c <LoRaMacInitialization+0x464>)
 8012fec:	4a9c      	ldr	r2, [pc, #624]	; (8013260 <LoRaMacInitialization+0x468>)
 8012fee:	589b      	ldr	r3, [r3, r2]
 8012ff0:	781b      	ldrb	r3, [r3, #0]
 8012ff2:	197a      	adds	r2, r7, r5
 8012ff4:	0011      	movs	r1, r2
 8012ff6:	0018      	movs	r0, r3
 8012ff8:	f003 fdff 	bl	8016bfa <RegionGetPhyParam>
 8012ffc:	0003      	movs	r3, r0
 8012ffe:	001a      	movs	r2, r3
 8013000:	193b      	adds	r3, r7, r4
 8013002:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8013004:	4b95      	ldr	r3, [pc, #596]	; (801325c <LoRaMacInitialization+0x464>)
 8013006:	4a96      	ldr	r2, [pc, #600]	; (8013260 <LoRaMacInitialization+0x468>)
 8013008:	589b      	ldr	r3, [r3, r2]
 801300a:	193a      	adds	r2, r7, r4
 801300c:	6812      	ldr	r2, [r2, #0]
 801300e:	61da      	str	r2, [r3, #28]

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8013010:	197b      	adds	r3, r7, r5
 8013012:	2214      	movs	r2, #20
 8013014:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8013016:	4b91      	ldr	r3, [pc, #580]	; (801325c <LoRaMacInitialization+0x464>)
 8013018:	4a91      	ldr	r2, [pc, #580]	; (8013260 <LoRaMacInitialization+0x468>)
 801301a:	589b      	ldr	r3, [r3, r2]
 801301c:	781b      	ldrb	r3, [r3, #0]
 801301e:	197a      	adds	r2, r7, r5
 8013020:	0011      	movs	r1, r2
 8013022:	0018      	movs	r0, r3
 8013024:	f003 fde9 	bl	8016bfa <RegionGetPhyParam>
 8013028:	0003      	movs	r3, r0
 801302a:	001a      	movs	r2, r3
 801302c:	193b      	adds	r3, r7, r4
 801302e:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8013030:	4b8a      	ldr	r3, [pc, #552]	; (801325c <LoRaMacInitialization+0x464>)
 8013032:	4a8b      	ldr	r2, [pc, #556]	; (8013260 <LoRaMacInitialization+0x468>)
 8013034:	589b      	ldr	r3, [r3, r2]
 8013036:	193a      	adds	r2, r7, r4
 8013038:	6812      	ldr	r2, [r2, #0]
 801303a:	621a      	str	r2, [r3, #32]

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 801303c:	197b      	adds	r3, r7, r5
 801303e:	2217      	movs	r2, #23
 8013040:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8013042:	4b86      	ldr	r3, [pc, #536]	; (801325c <LoRaMacInitialization+0x464>)
 8013044:	4a86      	ldr	r2, [pc, #536]	; (8013260 <LoRaMacInitialization+0x468>)
 8013046:	589b      	ldr	r3, [r3, r2]
 8013048:	781b      	ldrb	r3, [r3, #0]
 801304a:	197a      	adds	r2, r7, r5
 801304c:	0011      	movs	r1, r2
 801304e:	0018      	movs	r0, r3
 8013050:	f003 fdd3 	bl	8016bfa <RegionGetPhyParam>
 8013054:	0003      	movs	r3, r0
 8013056:	001a      	movs	r2, r3
 8013058:	193b      	adds	r3, r7, r4
 801305a:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 801305c:	193b      	adds	r3, r7, r4
 801305e:	6819      	ldr	r1, [r3, #0]
 8013060:	4b7e      	ldr	r3, [pc, #504]	; (801325c <LoRaMacInitialization+0x464>)
 8013062:	4a7f      	ldr	r2, [pc, #508]	; (8013260 <LoRaMacInitialization+0x468>)
 8013064:	589b      	ldr	r3, [r3, r2]
 8013066:	b2c9      	uxtb	r1, r1
 8013068:	2225      	movs	r2, #37	; 0x25
 801306a:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 801306c:	197b      	adds	r3, r7, r5
 801306e:	2218      	movs	r2, #24
 8013070:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8013072:	4b7a      	ldr	r3, [pc, #488]	; (801325c <LoRaMacInitialization+0x464>)
 8013074:	4a7a      	ldr	r2, [pc, #488]	; (8013260 <LoRaMacInitialization+0x468>)
 8013076:	589b      	ldr	r3, [r3, r2]
 8013078:	781b      	ldrb	r3, [r3, #0]
 801307a:	197a      	adds	r2, r7, r5
 801307c:	0011      	movs	r1, r2
 801307e:	0018      	movs	r0, r3
 8013080:	f003 fdbb 	bl	8016bfa <RegionGetPhyParam>
 8013084:	0003      	movs	r3, r0
 8013086:	001a      	movs	r2, r3
 8013088:	193b      	adds	r3, r7, r4
 801308a:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 801308c:	4b73      	ldr	r3, [pc, #460]	; (801325c <LoRaMacInitialization+0x464>)
 801308e:	4a74      	ldr	r2, [pc, #464]	; (8013260 <LoRaMacInitialization+0x468>)
 8013090:	589b      	ldr	r3, [r3, r2]
 8013092:	193a      	adds	r2, r7, r4
 8013094:	6812      	ldr	r2, [r2, #0]
 8013096:	629a      	str	r2, [r3, #40]	; 0x28
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8013098:	4b70      	ldr	r3, [pc, #448]	; (801325c <LoRaMacInitialization+0x464>)
 801309a:	4a71      	ldr	r2, [pc, #452]	; (8013260 <LoRaMacInitialization+0x468>)
 801309c:	589b      	ldr	r3, [r3, r2]
 801309e:	193a      	adds	r2, r7, r4
 80130a0:	6812      	ldr	r2, [r2, #0]
 80130a2:	631a      	str	r2, [r3, #48]	; 0x30

    getPhy.Attribute = PHY_DEF_RX2_DR;
 80130a4:	197b      	adds	r3, r7, r5
 80130a6:	2219      	movs	r2, #25
 80130a8:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80130aa:	4b6c      	ldr	r3, [pc, #432]	; (801325c <LoRaMacInitialization+0x464>)
 80130ac:	4a6c      	ldr	r2, [pc, #432]	; (8013260 <LoRaMacInitialization+0x468>)
 80130ae:	589b      	ldr	r3, [r3, r2]
 80130b0:	781b      	ldrb	r3, [r3, #0]
 80130b2:	197a      	adds	r2, r7, r5
 80130b4:	0011      	movs	r1, r2
 80130b6:	0018      	movs	r0, r3
 80130b8:	f003 fd9f 	bl	8016bfa <RegionGetPhyParam>
 80130bc:	0003      	movs	r3, r0
 80130be:	001a      	movs	r2, r3
 80130c0:	193b      	adds	r3, r7, r4
 80130c2:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 80130c4:	193b      	adds	r3, r7, r4
 80130c6:	6819      	ldr	r1, [r3, #0]
 80130c8:	4b64      	ldr	r3, [pc, #400]	; (801325c <LoRaMacInitialization+0x464>)
 80130ca:	4a65      	ldr	r2, [pc, #404]	; (8013260 <LoRaMacInitialization+0x468>)
 80130cc:	589b      	ldr	r3, [r3, r2]
 80130ce:	b2c9      	uxtb	r1, r1
 80130d0:	222c      	movs	r2, #44	; 0x2c
 80130d2:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 80130d4:	193b      	adds	r3, r7, r4
 80130d6:	6819      	ldr	r1, [r3, #0]
 80130d8:	4b60      	ldr	r3, [pc, #384]	; (801325c <LoRaMacInitialization+0x464>)
 80130da:	4a61      	ldr	r2, [pc, #388]	; (8013260 <LoRaMacInitialization+0x468>)
 80130dc:	589b      	ldr	r3, [r3, r2]
 80130de:	b2c9      	uxtb	r1, r1
 80130e0:	2234      	movs	r2, #52	; 0x34
 80130e2:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 80130e4:	197b      	adds	r3, r7, r5
 80130e6:	221e      	movs	r2, #30
 80130e8:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80130ea:	4b5c      	ldr	r3, [pc, #368]	; (801325c <LoRaMacInitialization+0x464>)
 80130ec:	4a5c      	ldr	r2, [pc, #368]	; (8013260 <LoRaMacInitialization+0x468>)
 80130ee:	589b      	ldr	r3, [r3, r2]
 80130f0:	781b      	ldrb	r3, [r3, #0]
 80130f2:	197a      	adds	r2, r7, r5
 80130f4:	0011      	movs	r1, r2
 80130f6:	0018      	movs	r0, r3
 80130f8:	f003 fd7f 	bl	8016bfa <RegionGetPhyParam>
 80130fc:	0003      	movs	r3, r0
 80130fe:	001a      	movs	r2, r3
 8013100:	193b      	adds	r3, r7, r4
 8013102:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8013104:	193b      	adds	r3, r7, r4
 8013106:	6819      	ldr	r1, [r3, #0]
 8013108:	4b54      	ldr	r3, [pc, #336]	; (801325c <LoRaMacInitialization+0x464>)
 801310a:	4a55      	ldr	r2, [pc, #340]	; (8013260 <LoRaMacInitialization+0x468>)
 801310c:	589b      	ldr	r3, [r3, r2]
 801310e:	b2c9      	uxtb	r1, r1
 8013110:	2238      	movs	r2, #56	; 0x38
 8013112:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8013114:	197b      	adds	r3, r7, r5
 8013116:	221f      	movs	r2, #31
 8013118:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 801311a:	4b50      	ldr	r3, [pc, #320]	; (801325c <LoRaMacInitialization+0x464>)
 801311c:	4a50      	ldr	r2, [pc, #320]	; (8013260 <LoRaMacInitialization+0x468>)
 801311e:	589b      	ldr	r3, [r3, r2]
 8013120:	781b      	ldrb	r3, [r3, #0]
 8013122:	197a      	adds	r2, r7, r5
 8013124:	0011      	movs	r1, r2
 8013126:	0018      	movs	r0, r3
 8013128:	f003 fd67 	bl	8016bfa <RegionGetPhyParam>
 801312c:	0003      	movs	r3, r0
 801312e:	001a      	movs	r2, r3
 8013130:	193b      	adds	r3, r7, r4
 8013132:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8013134:	193b      	adds	r3, r7, r4
 8013136:	6819      	ldr	r1, [r3, #0]
 8013138:	4b48      	ldr	r3, [pc, #288]	; (801325c <LoRaMacInitialization+0x464>)
 801313a:	4a49      	ldr	r2, [pc, #292]	; (8013260 <LoRaMacInitialization+0x468>)
 801313c:	589b      	ldr	r3, [r3, r2]
 801313e:	b2c9      	uxtb	r1, r1
 8013140:	2239      	movs	r2, #57	; 0x39
 8013142:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8013144:	197b      	adds	r3, r7, r5
 8013146:	2220      	movs	r2, #32
 8013148:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 801314a:	4b44      	ldr	r3, [pc, #272]	; (801325c <LoRaMacInitialization+0x464>)
 801314c:	4a44      	ldr	r2, [pc, #272]	; (8013260 <LoRaMacInitialization+0x468>)
 801314e:	589b      	ldr	r3, [r3, r2]
 8013150:	781b      	ldrb	r3, [r3, #0]
 8013152:	197a      	adds	r2, r7, r5
 8013154:	0011      	movs	r1, r2
 8013156:	0018      	movs	r0, r3
 8013158:	f003 fd4f 	bl	8016bfa <RegionGetPhyParam>
 801315c:	0003      	movs	r3, r0
 801315e:	001a      	movs	r2, r3
 8013160:	193b      	adds	r3, r7, r4
 8013162:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.MaxEirp = phyParam.fValue;
 8013164:	4b3d      	ldr	r3, [pc, #244]	; (801325c <LoRaMacInitialization+0x464>)
 8013166:	4a3e      	ldr	r2, [pc, #248]	; (8013260 <LoRaMacInitialization+0x468>)
 8013168:	589b      	ldr	r3, [r3, r2]
 801316a:	193a      	adds	r2, r7, r4
 801316c:	6812      	ldr	r2, [r2, #0]
 801316e:	63da      	str	r2, [r3, #60]	; 0x3c

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8013170:	197b      	adds	r3, r7, r5
 8013172:	2221      	movs	r2, #33	; 0x21
 8013174:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8013176:	4b39      	ldr	r3, [pc, #228]	; (801325c <LoRaMacInitialization+0x464>)
 8013178:	4a39      	ldr	r2, [pc, #228]	; (8013260 <LoRaMacInitialization+0x468>)
 801317a:	589b      	ldr	r3, [r3, r2]
 801317c:	781b      	ldrb	r3, [r3, #0]
 801317e:	197a      	adds	r2, r7, r5
 8013180:	0011      	movs	r1, r2
 8013182:	0018      	movs	r0, r3
 8013184:	f003 fd39 	bl	8016bfa <RegionGetPhyParam>
 8013188:	0003      	movs	r3, r0
 801318a:	001a      	movs	r2, r3
 801318c:	193b      	adds	r3, r7, r4
 801318e:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = phyParam.fValue;
 8013190:	4b32      	ldr	r3, [pc, #200]	; (801325c <LoRaMacInitialization+0x464>)
 8013192:	4a33      	ldr	r2, [pc, #204]	; (8013260 <LoRaMacInitialization+0x468>)
 8013194:	589b      	ldr	r3, [r3, r2]
 8013196:	193a      	adds	r2, r7, r4
 8013198:	6812      	ldr	r2, [r2, #0]
 801319a:	641a      	str	r2, [r3, #64]	; 0x40

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 801319c:	197b      	adds	r3, r7, r5
 801319e:	220b      	movs	r2, #11
 80131a0:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80131a2:	4b2e      	ldr	r3, [pc, #184]	; (801325c <LoRaMacInitialization+0x464>)
 80131a4:	4a2e      	ldr	r2, [pc, #184]	; (8013260 <LoRaMacInitialization+0x468>)
 80131a6:	589b      	ldr	r3, [r3, r2]
 80131a8:	781b      	ldrb	r3, [r3, #0]
 80131aa:	197a      	adds	r2, r7, r5
 80131ac:	0011      	movs	r1, r2
 80131ae:	0018      	movs	r0, r3
 80131b0:	f003 fd23 	bl	8016bfa <RegionGetPhyParam>
 80131b4:	0003      	movs	r3, r0
 80131b6:	001a      	movs	r2, r3
 80131b8:	193b      	adds	r3, r7, r4
 80131ba:	601a      	str	r2, [r3, #0]
    MacCtx.AdrAckLimit = phyParam.Value;
 80131bc:	193b      	adds	r3, r7, r4
 80131be:	681b      	ldr	r3, [r3, #0]
 80131c0:	b299      	uxth	r1, r3
 80131c2:	4a26      	ldr	r2, [pc, #152]	; (801325c <LoRaMacInitialization+0x464>)
 80131c4:	23fd      	movs	r3, #253	; 0xfd
 80131c6:	009b      	lsls	r3, r3, #2
 80131c8:	52d1      	strh	r1, [r2, r3]

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 80131ca:	197b      	adds	r3, r7, r5
 80131cc:	220c      	movs	r2, #12
 80131ce:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80131d0:	4b22      	ldr	r3, [pc, #136]	; (801325c <LoRaMacInitialization+0x464>)
 80131d2:	4a23      	ldr	r2, [pc, #140]	; (8013260 <LoRaMacInitialization+0x468>)
 80131d4:	589b      	ldr	r3, [r3, r2]
 80131d6:	781b      	ldrb	r3, [r3, #0]
 80131d8:	197a      	adds	r2, r7, r5
 80131da:	0011      	movs	r1, r2
 80131dc:	0018      	movs	r0, r3
 80131de:	f003 fd0c 	bl	8016bfa <RegionGetPhyParam>
 80131e2:	0003      	movs	r3, r0
 80131e4:	001a      	movs	r2, r3
 80131e6:	193b      	adds	r3, r7, r4
 80131e8:	601a      	str	r2, [r3, #0]
    MacCtx.AdrAckDelay = phyParam.Value;
 80131ea:	193b      	adds	r3, r7, r4
 80131ec:	681b      	ldr	r3, [r3, #0]
 80131ee:	b299      	uxth	r1, r3
 80131f0:	4b1a      	ldr	r3, [pc, #104]	; (801325c <LoRaMacInitialization+0x464>)
 80131f2:	4a1f      	ldr	r2, [pc, #124]	; (8013270 <LoRaMacInitialization+0x478>)
 80131f4:	5299      	strh	r1, [r3, r2]

    // Init parameters which are not set in function ResetMacParameters
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans = 1;
 80131f6:	4b19      	ldr	r3, [pc, #100]	; (801325c <LoRaMacInitialization+0x464>)
 80131f8:	4a19      	ldr	r2, [pc, #100]	; (8013260 <LoRaMacInitialization+0x468>)
 80131fa:	589b      	ldr	r3, [r3, r2]
 80131fc:	2224      	movs	r2, #36	; 0x24
 80131fe:	2101      	movs	r1, #1
 8013200:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = 10;
 8013202:	4b16      	ldr	r3, [pc, #88]	; (801325c <LoRaMacInitialization+0x464>)
 8013204:	4a16      	ldr	r2, [pc, #88]	; (8013260 <LoRaMacInitialization+0x468>)
 8013206:	589b      	ldr	r3, [r3, r2]
 8013208:	220a      	movs	r2, #10
 801320a:	609a      	str	r2, [r3, #8]
    MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = 6;
 801320c:	4b13      	ldr	r3, [pc, #76]	; (801325c <LoRaMacInitialization+0x464>)
 801320e:	4a14      	ldr	r2, [pc, #80]	; (8013260 <LoRaMacInitialization+0x468>)
 8013210:	589b      	ldr	r3, [r3, r2]
 8013212:	2206      	movs	r2, #6
 8013214:	731a      	strb	r2, [r3, #12]

    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
 8013216:	4b11      	ldr	r3, [pc, #68]	; (801325c <LoRaMacInitialization+0x464>)
 8013218:	4a11      	ldr	r2, [pc, #68]	; (8013260 <LoRaMacInitialization+0x468>)
 801321a:	589b      	ldr	r3, [r3, r2]
 801321c:	4a0f      	ldr	r2, [pc, #60]	; (801325c <LoRaMacInitialization+0x464>)
 801321e:	4910      	ldr	r1, [pc, #64]	; (8013260 <LoRaMacInitialization+0x468>)
 8013220:	5852      	ldr	r2, [r2, r1]
 8013222:	689b      	ldr	r3, [r3, #8]
 8013224:	2188      	movs	r1, #136	; 0x88
 8013226:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols;
 8013228:	4b0c      	ldr	r3, [pc, #48]	; (801325c <LoRaMacInitialization+0x464>)
 801322a:	4a0d      	ldr	r2, [pc, #52]	; (8013260 <LoRaMacInitialization+0x468>)
 801322c:	589a      	ldr	r2, [r3, r2]
 801322e:	4b0b      	ldr	r3, [pc, #44]	; (801325c <LoRaMacInitialization+0x464>)
 8013230:	490b      	ldr	r1, [pc, #44]	; (8013260 <LoRaMacInitialization+0x468>)
 8013232:	585b      	ldr	r3, [r3, r1]
 8013234:	7b11      	ldrb	r1, [r2, #12]
 8013236:	228c      	movs	r2, #140	; 0x8c
 8013238:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.MaxRxWindow = MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow;
 801323a:	4b08      	ldr	r3, [pc, #32]	; (801325c <LoRaMacInitialization+0x464>)
 801323c:	4a08      	ldr	r2, [pc, #32]	; (8013260 <LoRaMacInitialization+0x468>)
 801323e:	589b      	ldr	r3, [r3, r2]
 8013240:	4a06      	ldr	r2, [pc, #24]	; (801325c <LoRaMacInitialization+0x464>)
 8013242:	4907      	ldr	r1, [pc, #28]	; (8013260 <LoRaMacInitialization+0x468>)
 8013244:	5852      	ldr	r2, [r2, r1]
 8013246:	691b      	ldr	r3, [r3, #16]
 8013248:	2190      	movs	r1, #144	; 0x90
 801324a:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1;
 801324c:	4b03      	ldr	r3, [pc, #12]	; (801325c <LoRaMacInitialization+0x464>)
 801324e:	e011      	b.n	8013274 <LoRaMacInitialization+0x47c>
 8013250:	08012cf5 	.word	0x08012cf5
 8013254:	20000a44 	.word	0x20000a44
 8013258:	0000048c 	.word	0x0000048c
 801325c:	200005b8 	.word	0x200005b8
 8013260:	00000484 	.word	0x00000484
 8013264:	00000412 	.word	0x00000412
 8013268:	00000411 	.word	0x00000411
 801326c:	01000300 	.word	0x01000300
 8013270:	000003f6 	.word	0x000003f6
 8013274:	4a9a      	ldr	r2, [pc, #616]	; (80134e0 <LoRaMacInitialization+0x6e8>)
 8013276:	589b      	ldr	r3, [r3, r2]
 8013278:	4a9a      	ldr	r2, [pc, #616]	; (80134e4 <LoRaMacInitialization+0x6ec>)
 801327a:	4999      	ldr	r1, [pc, #612]	; (80134e0 <LoRaMacInitialization+0x6e8>)
 801327c:	5852      	ldr	r2, [r2, r1]
 801327e:	695b      	ldr	r3, [r3, #20]
 8013280:	2194      	movs	r1, #148	; 0x94
 8013282:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2;
 8013284:	4b97      	ldr	r3, [pc, #604]	; (80134e4 <LoRaMacInitialization+0x6ec>)
 8013286:	4a96      	ldr	r2, [pc, #600]	; (80134e0 <LoRaMacInitialization+0x6e8>)
 8013288:	589b      	ldr	r3, [r3, r2]
 801328a:	4a96      	ldr	r2, [pc, #600]	; (80134e4 <LoRaMacInitialization+0x6ec>)
 801328c:	4994      	ldr	r1, [pc, #592]	; (80134e0 <LoRaMacInitialization+0x6e8>)
 801328e:	5852      	ldr	r2, [r2, r1]
 8013290:	699b      	ldr	r3, [r3, #24]
 8013292:	2198      	movs	r1, #152	; 0x98
 8013294:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1;
 8013296:	4b93      	ldr	r3, [pc, #588]	; (80134e4 <LoRaMacInitialization+0x6ec>)
 8013298:	4a91      	ldr	r2, [pc, #580]	; (80134e0 <LoRaMacInitialization+0x6e8>)
 801329a:	589b      	ldr	r3, [r3, r2]
 801329c:	4a91      	ldr	r2, [pc, #580]	; (80134e4 <LoRaMacInitialization+0x6ec>)
 801329e:	4990      	ldr	r1, [pc, #576]	; (80134e0 <LoRaMacInitialization+0x6e8>)
 80132a0:	5852      	ldr	r2, [r2, r1]
 80132a2:	69db      	ldr	r3, [r3, #28]
 80132a4:	219c      	movs	r1, #156	; 0x9c
 80132a6:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2;
 80132a8:	4b8e      	ldr	r3, [pc, #568]	; (80134e4 <LoRaMacInitialization+0x6ec>)
 80132aa:	4a8d      	ldr	r2, [pc, #564]	; (80134e0 <LoRaMacInitialization+0x6e8>)
 80132ac:	589b      	ldr	r3, [r3, r2]
 80132ae:	4a8d      	ldr	r2, [pc, #564]	; (80134e4 <LoRaMacInitialization+0x6ec>)
 80132b0:	498b      	ldr	r1, [pc, #556]	; (80134e0 <LoRaMacInitialization+0x6e8>)
 80132b2:	5852      	ldr	r2, [r2, r1]
 80132b4:	6a1b      	ldr	r3, [r3, #32]
 80132b6:	21a0      	movs	r1, #160	; 0xa0
 80132b8:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.ChannelsNbTrans = MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans;
 80132ba:	4b8a      	ldr	r3, [pc, #552]	; (80134e4 <LoRaMacInitialization+0x6ec>)
 80132bc:	4a88      	ldr	r2, [pc, #544]	; (80134e0 <LoRaMacInitialization+0x6e8>)
 80132be:	589a      	ldr	r2, [r3, r2]
 80132c0:	4b88      	ldr	r3, [pc, #544]	; (80134e4 <LoRaMacInitialization+0x6ec>)
 80132c2:	4987      	ldr	r1, [pc, #540]	; (80134e0 <LoRaMacInitialization+0x6e8>)
 80132c4:	585b      	ldr	r3, [r3, r1]
 80132c6:	2124      	movs	r1, #36	; 0x24
 80132c8:	5c51      	ldrb	r1, [r2, r1]
 80132ca:	22a4      	movs	r2, #164	; 0xa4
 80132cc:	5499      	strb	r1, [r3, r2]

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 80132ce:	211c      	movs	r1, #28
 80132d0:	187b      	adds	r3, r7, r1
 80132d2:	2200      	movs	r2, #0
 80132d4:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = NULL;
 80132d6:	187b      	adds	r3, r7, r1
 80132d8:	2200      	movs	r2, #0
 80132da:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 80132dc:	4b81      	ldr	r3, [pc, #516]	; (80134e4 <LoRaMacInitialization+0x6ec>)
 80132de:	4a80      	ldr	r2, [pc, #512]	; (80134e0 <LoRaMacInitialization+0x6e8>)
 80132e0:	589b      	ldr	r3, [r3, r2]
 80132e2:	781b      	ldrb	r3, [r3, #0]
 80132e4:	187a      	adds	r2, r7, r1
 80132e6:	0011      	movs	r1, r2
 80132e8:	0018      	movs	r0, r3
 80132ea:	f003 fcc2 	bl	8016c72 <RegionInitDefaults>

    ResetMacParameters( );
 80132ee:	f7fe fe19 	bl	8011f24 <ResetMacParameters>

    MacCtx.NvmCtx->PublicNetwork = true;
 80132f2:	4b7c      	ldr	r3, [pc, #496]	; (80134e4 <LoRaMacInitialization+0x6ec>)
 80132f4:	4a7a      	ldr	r2, [pc, #488]	; (80134e0 <LoRaMacInitialization+0x6e8>)
 80132f6:	589b      	ldr	r3, [r3, r2]
 80132f8:	227d      	movs	r2, #125	; 0x7d
 80132fa:	2101      	movs	r1, #1
 80132fc:	5499      	strb	r1, [r3, r2]

    MacCtx.MacPrimitives = primitives;
 80132fe:	4a79      	ldr	r2, [pc, #484]	; (80134e4 <LoRaMacInitialization+0x6ec>)
 8013300:	23d1      	movs	r3, #209	; 0xd1
 8013302:	009b      	lsls	r3, r3, #2
 8013304:	6979      	ldr	r1, [r7, #20]
 8013306:	50d1      	str	r1, [r2, r3]
    MacCtx.MacCallbacks = callbacks;
 8013308:	4a76      	ldr	r2, [pc, #472]	; (80134e4 <LoRaMacInitialization+0x6ec>)
 801330a:	23d2      	movs	r3, #210	; 0xd2
 801330c:	009b      	lsls	r3, r3, #2
 801330e:	6939      	ldr	r1, [r7, #16]
 8013310:	50d1      	str	r1, [r2, r3]
    MacCtx.MacFlags.Value = 0;
 8013312:	4b74      	ldr	r3, [pc, #464]	; (80134e4 <LoRaMacInitialization+0x6ec>)
 8013314:	4a74      	ldr	r2, [pc, #464]	; (80134e8 <LoRaMacInitialization+0x6f0>)
 8013316:	2100      	movs	r1, #0
 8013318:	5499      	strb	r1, [r3, r2]
    MacCtx.MacState = LORAMAC_STOPPED;
 801331a:	4a72      	ldr	r2, [pc, #456]	; (80134e4 <LoRaMacInitialization+0x6ec>)
 801331c:	23d0      	movs	r3, #208	; 0xd0
 801331e:	009b      	lsls	r3, r3, #2
 8013320:	2101      	movs	r1, #1
 8013322:	50d1      	str	r1, [r2, r3]

    // Reset duty cycle times
    MacCtx.NvmCtx->LastTxDoneTime = 0;
 8013324:	4b6f      	ldr	r3, [pc, #444]	; (80134e4 <LoRaMacInitialization+0x6ec>)
 8013326:	4a6e      	ldr	r2, [pc, #440]	; (80134e0 <LoRaMacInitialization+0x6e8>)
 8013328:	589a      	ldr	r2, [r3, r2]
 801332a:	23a8      	movs	r3, #168	; 0xa8
 801332c:	005b      	lsls	r3, r3, #1
 801332e:	2100      	movs	r1, #0
 8013330:	50d1      	str	r1, [r2, r3]
    MacCtx.NvmCtx->AggregatedTimeOff = 0;
 8013332:	4b6c      	ldr	r3, [pc, #432]	; (80134e4 <LoRaMacInitialization+0x6ec>)
 8013334:	4a6a      	ldr	r2, [pc, #424]	; (80134e0 <LoRaMacInitialization+0x6e8>)
 8013336:	589a      	ldr	r2, [r3, r2]
 8013338:	23aa      	movs	r3, #170	; 0xaa
 801333a:	005b      	lsls	r3, r3, #1
 801333c:	2100      	movs	r1, #0
 801333e:	50d1      	str	r1, [r2, r3]

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8013340:	4b6a      	ldr	r3, [pc, #424]	; (80134ec <LoRaMacInitialization+0x6f4>)
 8013342:	2201      	movs	r2, #1
 8013344:	4251      	negs	r1, r2
 8013346:	486a      	ldr	r0, [pc, #424]	; (80134f0 <LoRaMacInitialization+0x6f8>)
 8013348:	2200      	movs	r2, #0
 801334a:	9200      	str	r2, [sp, #0]
 801334c:	2200      	movs	r2, #0
 801334e:	f009 fbdb 	bl	801cb08 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8013352:	4b68      	ldr	r3, [pc, #416]	; (80134f4 <LoRaMacInitialization+0x6fc>)
 8013354:	2201      	movs	r2, #1
 8013356:	4251      	negs	r1, r2
 8013358:	4867      	ldr	r0, [pc, #412]	; (80134f8 <LoRaMacInitialization+0x700>)
 801335a:	2200      	movs	r2, #0
 801335c:	9200      	str	r2, [sp, #0]
 801335e:	2200      	movs	r2, #0
 8013360:	f009 fbd2 	bl	801cb08 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8013364:	4b65      	ldr	r3, [pc, #404]	; (80134fc <LoRaMacInitialization+0x704>)
 8013366:	2201      	movs	r2, #1
 8013368:	4251      	negs	r1, r2
 801336a:	4865      	ldr	r0, [pc, #404]	; (8013500 <LoRaMacInitialization+0x708>)
 801336c:	2200      	movs	r2, #0
 801336e:	9200      	str	r2, [sp, #0]
 8013370:	2200      	movs	r2, #0
 8013372:	f009 fbc9 	bl	801cb08 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 8013376:	4b63      	ldr	r3, [pc, #396]	; (8013504 <LoRaMacInitialization+0x70c>)
 8013378:	2201      	movs	r2, #1
 801337a:	4251      	negs	r1, r2
 801337c:	4862      	ldr	r0, [pc, #392]	; (8013508 <LoRaMacInitialization+0x710>)
 801337e:	2200      	movs	r2, #0
 8013380:	9200      	str	r2, [sp, #0]
 8013382:	2200      	movs	r2, #0
 8013384:	f009 fbc0 	bl	801cb08 <UTIL_TIMER_Create>

    // Store the current initialization time
    MacCtx.NvmCtx->InitializationTime = SysTimeGetMcuTime( );
 8013388:	4b56      	ldr	r3, [pc, #344]	; (80134e4 <LoRaMacInitialization+0x6ec>)
 801338a:	4a55      	ldr	r2, [pc, #340]	; (80134e0 <LoRaMacInitialization+0x6e8>)
 801338c:	589d      	ldr	r5, [r3, r2]
 801338e:	23ac      	movs	r3, #172	; 0xac
 8013390:	005c      	lsls	r4, r3, #1
 8013392:	003b      	movs	r3, r7
 8013394:	0018      	movs	r0, r3
 8013396:	f009 fb87 	bl	801caa8 <SysTimeGetMcuTime>
 801339a:	003a      	movs	r2, r7
 801339c:	192b      	adds	r3, r5, r4
 801339e:	ca03      	ldmia	r2!, {r0, r1}
 80133a0:	c303      	stmia	r3!, {r0, r1}

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 80133a2:	4a50      	ldr	r2, [pc, #320]	; (80134e4 <LoRaMacInitialization+0x6ec>)
 80133a4:	23d3      	movs	r3, #211	; 0xd3
 80133a6:	009b      	lsls	r3, r3, #2
 80133a8:	4958      	ldr	r1, [pc, #352]	; (801350c <LoRaMacInitialization+0x714>)
 80133aa:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 80133ac:	4a4d      	ldr	r2, [pc, #308]	; (80134e4 <LoRaMacInitialization+0x6ec>)
 80133ae:	23d5      	movs	r3, #213	; 0xd5
 80133b0:	009b      	lsls	r3, r3, #2
 80133b2:	4957      	ldr	r1, [pc, #348]	; (8013510 <LoRaMacInitialization+0x718>)
 80133b4:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 80133b6:	4a4b      	ldr	r2, [pc, #300]	; (80134e4 <LoRaMacInitialization+0x6ec>)
 80133b8:	23d7      	movs	r3, #215	; 0xd7
 80133ba:	009b      	lsls	r3, r3, #2
 80133bc:	4955      	ldr	r1, [pc, #340]	; (8013514 <LoRaMacInitialization+0x71c>)
 80133be:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 80133c0:	4a48      	ldr	r2, [pc, #288]	; (80134e4 <LoRaMacInitialization+0x6ec>)
 80133c2:	23d4      	movs	r3, #212	; 0xd4
 80133c4:	009b      	lsls	r3, r3, #2
 80133c6:	4954      	ldr	r1, [pc, #336]	; (8013518 <LoRaMacInitialization+0x720>)
 80133c8:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 80133ca:	4a46      	ldr	r2, [pc, #280]	; (80134e4 <LoRaMacInitialization+0x6ec>)
 80133cc:	23d6      	movs	r3, #214	; 0xd6
 80133ce:	009b      	lsls	r3, r3, #2
 80133d0:	4952      	ldr	r1, [pc, #328]	; (801351c <LoRaMacInitialization+0x724>)
 80133d2:	50d1      	str	r1, [r2, r3]
    Radio.Init( &MacCtx.RadioEvents );
 80133d4:	4b52      	ldr	r3, [pc, #328]	; (8013520 <LoRaMacInitialization+0x728>)
 80133d6:	681b      	ldr	r3, [r3, #0]
 80133d8:	4a52      	ldr	r2, [pc, #328]	; (8013524 <LoRaMacInitialization+0x72c>)
 80133da:	0010      	movs	r0, r2
 80133dc:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( EventSecureElementNvmCtxChanged ) != SECURE_ELEMENT_SUCCESS )
 80133de:	4b52      	ldr	r3, [pc, #328]	; (8013528 <LoRaMacInitialization+0x730>)
 80133e0:	0018      	movs	r0, r3
 80133e2:	f7fa f891 	bl	800d508 <SecureElementInit>
 80133e6:	1e03      	subs	r3, r0, #0
 80133e8:	d001      	beq.n	80133ee <LoRaMacInitialization+0x5f6>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80133ea:	2311      	movs	r3, #17
 80133ec:	e073      	b.n	80134d6 <LoRaMacInitialization+0x6de>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( EventCryptoNvmCtxChanged ) != LORAMAC_CRYPTO_SUCCESS )
 80133ee:	4b4f      	ldr	r3, [pc, #316]	; (801352c <LoRaMacInitialization+0x734>)
 80133f0:	0018      	movs	r0, r3
 80133f2:	f002 fc0d 	bl	8015c10 <LoRaMacCryptoInit>
 80133f6:	1e03      	subs	r3, r0, #0
 80133f8:	d001      	beq.n	80133fe <LoRaMacInitialization+0x606>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80133fa:	2311      	movs	r3, #17
 80133fc:	e06b      	b.n	80134d6 <LoRaMacInitialization+0x6de>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( EventCommandsNvmCtxChanged ) != LORAMAC_COMMANDS_SUCCESS )
 80133fe:	4b4c      	ldr	r3, [pc, #304]	; (8013530 <LoRaMacInitialization+0x738>)
 8013400:	0018      	movs	r0, r3
 8013402:	f001 fc0d 	bl	8014c20 <LoRaMacCommandsInit>
 8013406:	1e03      	subs	r3, r0, #0
 8013408:	d001      	beq.n	801340e <LoRaMacInitialization+0x616>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801340a:	2313      	movs	r3, #19
 801340c:	e063      	b.n	80134d6 <LoRaMacInitialization+0x6de>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( MacCtx.NvmCtx->MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 801340e:	4b35      	ldr	r3, [pc, #212]	; (80134e4 <LoRaMacInitialization+0x6ec>)
 8013410:	4a33      	ldr	r2, [pc, #204]	; (80134e0 <LoRaMacInitialization+0x6e8>)
 8013412:	589b      	ldr	r3, [r3, r2]
 8013414:	3350      	adds	r3, #80	; 0x50
 8013416:	0018      	movs	r0, r3
 8013418:	f002 fd10 	bl	8015e3c <LoRaMacCryptoSetMulticastReference>
 801341c:	1e03      	subs	r3, r0, #0
 801341e:	d001      	beq.n	8013424 <LoRaMacInitialization+0x62c>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8013420:	2311      	movs	r3, #17
 8013422:	e058      	b.n	80134d6 <LoRaMacInitialization+0x6de>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8013424:	4b3e      	ldr	r3, [pc, #248]	; (8013520 <LoRaMacInitialization+0x728>)
 8013426:	695b      	ldr	r3, [r3, #20]
 8013428:	4798      	blx	r3
 801342a:	0003      	movs	r3, r0
 801342c:	0018      	movs	r0, r3
 801342e:	f006 f83f 	bl	80194b0 <srand1>

    Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 8013432:	4b3b      	ldr	r3, [pc, #236]	; (8013520 <LoRaMacInitialization+0x728>)
 8013434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013436:	4a2b      	ldr	r2, [pc, #172]	; (80134e4 <LoRaMacInitialization+0x6ec>)
 8013438:	4929      	ldr	r1, [pc, #164]	; (80134e0 <LoRaMacInitialization+0x6e8>)
 801343a:	5852      	ldr	r2, [r2, r1]
 801343c:	217d      	movs	r1, #125	; 0x7d
 801343e:	5c52      	ldrb	r2, [r2, r1]
 8013440:	0010      	movs	r0, r2
 8013442:	4798      	blx	r3
    Radio.Sleep( );
 8013444:	4b36      	ldr	r3, [pc, #216]	; (8013520 <LoRaMacInitialization+0x728>)
 8013446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013448:	4798      	blx	r3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 801344a:	2144      	movs	r1, #68	; 0x44
 801344c:	187b      	adds	r3, r7, r1
 801344e:	2200      	movs	r2, #0
 8013450:	601a      	str	r2, [r3, #0]
    classBCallbacks.MacProcessNotify = NULL;
 8013452:	187b      	adds	r3, r7, r1
 8013454:	2200      	movs	r2, #0
 8013456:	605a      	str	r2, [r3, #4]
    if( callbacks != NULL )
 8013458:	693b      	ldr	r3, [r7, #16]
 801345a:	2b00      	cmp	r3, #0
 801345c:	d007      	beq.n	801346e <LoRaMacInitialization+0x676>
    {
        classBCallbacks.GetTemperatureLevel = callbacks->GetTemperatureLevel;
 801345e:	693b      	ldr	r3, [r7, #16]
 8013460:	685a      	ldr	r2, [r3, #4]
 8013462:	187b      	adds	r3, r7, r1
 8013464:	601a      	str	r2, [r3, #0]
        classBCallbacks.MacProcessNotify = callbacks->MacProcessNotify;
 8013466:	693b      	ldr	r3, [r7, #16]
 8013468:	68da      	ldr	r2, [r3, #12]
 801346a:	187b      	adds	r3, r7, r1
 801346c:	605a      	str	r2, [r3, #4]
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 801346e:	2124      	movs	r1, #36	; 0x24
 8013470:	187b      	adds	r3, r7, r1
 8013472:	4a30      	ldr	r2, [pc, #192]	; (8013534 <LoRaMacInitialization+0x73c>)
 8013474:	601a      	str	r2, [r3, #0]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8013476:	187b      	adds	r3, r7, r1
 8013478:	4a2f      	ldr	r2, [pc, #188]	; (8013538 <LoRaMacInitialization+0x740>)
 801347a:	605a      	str	r2, [r3, #4]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 801347c:	187b      	adds	r3, r7, r1
 801347e:	4a2f      	ldr	r2, [pc, #188]	; (801353c <LoRaMacInitialization+0x744>)
 8013480:	609a      	str	r2, [r3, #8]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8013482:	187b      	adds	r3, r7, r1
 8013484:	4a2e      	ldr	r2, [pc, #184]	; (8013540 <LoRaMacInitialization+0x748>)
 8013486:	60da      	str	r2, [r3, #12]
    classBParams.LoRaMacDevAddr = &MacCtx.NvmCtx->DevAddr;
 8013488:	4b16      	ldr	r3, [pc, #88]	; (80134e4 <LoRaMacInitialization+0x6ec>)
 801348a:	4a15      	ldr	r2, [pc, #84]	; (80134e0 <LoRaMacInitialization+0x6e8>)
 801348c:	589b      	ldr	r3, [r3, r2]
 801348e:	334c      	adds	r3, #76	; 0x4c
 8013490:	001a      	movs	r2, r3
 8013492:	187b      	adds	r3, r7, r1
 8013494:	611a      	str	r2, [r3, #16]
    classBParams.LoRaMacRegion = &MacCtx.NvmCtx->Region;
 8013496:	4b13      	ldr	r3, [pc, #76]	; (80134e4 <LoRaMacInitialization+0x6ec>)
 8013498:	4a11      	ldr	r2, [pc, #68]	; (80134e0 <LoRaMacInitialization+0x6e8>)
 801349a:	589b      	ldr	r3, [r3, r2]
 801349c:	001a      	movs	r2, r3
 801349e:	187b      	adds	r3, r7, r1
 80134a0:	615a      	str	r2, [r3, #20]
    classBParams.LoRaMacParams = &MacCtx.NvmCtx->MacParams;
 80134a2:	4b10      	ldr	r3, [pc, #64]	; (80134e4 <LoRaMacInitialization+0x6ec>)
 80134a4:	4a0e      	ldr	r2, [pc, #56]	; (80134e0 <LoRaMacInitialization+0x6e8>)
 80134a6:	589b      	ldr	r3, [r3, r2]
 80134a8:	3384      	adds	r3, #132	; 0x84
 80134aa:	001a      	movs	r2, r3
 80134ac:	187b      	adds	r3, r7, r1
 80134ae:	619a      	str	r2, [r3, #24]
    classBParams.MulticastChannels = &MacCtx.NvmCtx->MulticastChannelList[0];
 80134b0:	4b0c      	ldr	r3, [pc, #48]	; (80134e4 <LoRaMacInitialization+0x6ec>)
 80134b2:	4a0b      	ldr	r2, [pc, #44]	; (80134e0 <LoRaMacInitialization+0x6e8>)
 80134b4:	589b      	ldr	r3, [r3, r2]
 80134b6:	3350      	adds	r3, #80	; 0x50
 80134b8:	001a      	movs	r2, r3
 80134ba:	0008      	movs	r0, r1
 80134bc:	187b      	adds	r3, r7, r1
 80134be:	61da      	str	r2, [r3, #28]

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
 80134c0:	4a20      	ldr	r2, [pc, #128]	; (8013544 <LoRaMacInitialization+0x74c>)
 80134c2:	2344      	movs	r3, #68	; 0x44
 80134c4:	18f9      	adds	r1, r7, r3
 80134c6:	183b      	adds	r3, r7, r0
 80134c8:	0018      	movs	r0, r3
 80134ca:	f001 f994 	bl	80147f6 <LoRaMacClassBInit>

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 80134ce:	2001      	movs	r0, #1
 80134d0:	f7fc fe10 	bl	80100f4 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 80134d4:	2300      	movs	r3, #0
}
 80134d6:	0018      	movs	r0, r3
 80134d8:	46bd      	mov	sp, r7
 80134da:	b016      	add	sp, #88	; 0x58
 80134dc:	bdb0      	pop	{r4, r5, r7, pc}
 80134de:	46c0      	nop			; (mov r8, r8)
 80134e0:	00000484 	.word	0x00000484
 80134e4:	200005b8 	.word	0x200005b8
 80134e8:	00000481 	.word	0x00000481
 80134ec:	080104f9 	.word	0x080104f9
 80134f0:	20000920 	.word	0x20000920
 80134f4:	08010585 	.word	0x08010585
 80134f8:	20000938 	.word	0x20000938
 80134fc:	08010619 	.word	0x08010619
 8013500:	20000950 	.word	0x20000950
 8013504:	080106b5 	.word	0x080106b5
 8013508:	200009b0 	.word	0x200009b0
 801350c:	0800efdd 	.word	0x0800efdd
 8013510:	0800f049 	.word	0x0800f049
 8013514:	0800f11d 	.word	0x0800f11d
 8013518:	0800f0d9 	.word	0x0800f0d9
 801351c:	0800f161 	.word	0x0800f161
 8013520:	0801fd54 	.word	0x0801fd54
 8013524:	20000904 	.word	0x20000904
 8013528:	08012cc5 	.word	0x08012cc5
 801352c:	08012cb5 	.word	0x08012cb5
 8013530:	08012cd5 	.word	0x08012cd5
 8013534:	20000a1c 	.word	0x20000a1c
 8013538:	200009d4 	.word	0x200009d4
 801353c:	20000a08 	.word	0x20000a08
 8013540:	20000a39 	.word	0x20000a39
 8013544:	08012ce5 	.word	0x08012ce5

08013548 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8013548:	b580      	push	{r7, lr}
 801354a:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 801354c:	4a04      	ldr	r2, [pc, #16]	; (8013560 <LoRaMacStart+0x18>)
 801354e:	23d0      	movs	r3, #208	; 0xd0
 8013550:	009b      	lsls	r3, r3, #2
 8013552:	2100      	movs	r1, #0
 8013554:	50d1      	str	r1, [r2, r3]
    return LORAMAC_STATUS_OK;
 8013556:	2300      	movs	r3, #0
}
 8013558:	0018      	movs	r0, r3
 801355a:	46bd      	mov	sp, r7
 801355c:	bd80      	pop	{r7, pc}
 801355e:	46c0      	nop			; (mov r8, r8)
 8013560:	200005b8 	.word	0x200005b8

08013564 <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8013564:	b590      	push	{r4, r7, lr}
 8013566:	b08b      	sub	sp, #44	; 0x2c
 8013568:	af00      	add	r7, sp, #0
 801356a:	0002      	movs	r2, r0
 801356c:	6039      	str	r1, [r7, #0]
 801356e:	1dfb      	adds	r3, r7, #7
 8013570:	701a      	strb	r2, [r3, #0]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8013572:	4b4f      	ldr	r3, [pc, #316]	; (80136b0 <LoRaMacQueryTxPossible+0x14c>)
 8013574:	4a4f      	ldr	r2, [pc, #316]	; (80136b4 <LoRaMacQueryTxPossible+0x150>)
 8013576:	589b      	ldr	r3, [r3, r2]
 8013578:	2280      	movs	r2, #128	; 0x80
 801357a:	589b      	ldr	r3, [r3, r2]
 801357c:	613b      	str	r3, [r7, #16]
    int8_t datarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 801357e:	4b4c      	ldr	r3, [pc, #304]	; (80136b0 <LoRaMacQueryTxPossible+0x14c>)
 8013580:	4a4c      	ldr	r2, [pc, #304]	; (80136b4 <LoRaMacQueryTxPossible+0x150>)
 8013582:	589b      	ldr	r3, [r3, r2]
 8013584:	2205      	movs	r2, #5
 8013586:	569a      	ldrsb	r2, [r3, r2]
 8013588:	230f      	movs	r3, #15
 801358a:	18fb      	adds	r3, r7, r3
 801358c:	701a      	strb	r2, [r3, #0]
    int8_t txPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 801358e:	4b48      	ldr	r3, [pc, #288]	; (80136b0 <LoRaMacQueryTxPossible+0x14c>)
 8013590:	4a48      	ldr	r2, [pc, #288]	; (80136b4 <LoRaMacQueryTxPossible+0x150>)
 8013592:	589b      	ldr	r3, [r3, r2]
 8013594:	2204      	movs	r2, #4
 8013596:	569a      	ldrsb	r2, [r3, r2]
 8013598:	230e      	movs	r3, #14
 801359a:	18fb      	adds	r3, r7, r3
 801359c:	701a      	strb	r2, [r3, #0]
    size_t macCmdsSize = 0;
 801359e:	2300      	movs	r3, #0
 80135a0:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 80135a2:	683b      	ldr	r3, [r7, #0]
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d101      	bne.n	80135ac <LoRaMacQueryTxPossible+0x48>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80135a8:	2303      	movs	r3, #3
 80135aa:	e07d      	b.n	80136a8 <LoRaMacQueryTxPossible+0x144>
    }

    // Setup ADR request
    adrNext.Version = MacCtx.NvmCtx->Version;
 80135ac:	4b40      	ldr	r3, [pc, #256]	; (80136b0 <LoRaMacQueryTxPossible+0x14c>)
 80135ae:	4a41      	ldr	r2, [pc, #260]	; (80136b4 <LoRaMacQueryTxPossible+0x150>)
 80135b0:	5899      	ldr	r1, [r3, r2]
 80135b2:	2014      	movs	r0, #20
 80135b4:	183b      	adds	r3, r7, r0
 80135b6:	22b0      	movs	r2, #176	; 0xb0
 80135b8:	0052      	lsls	r2, r2, #1
 80135ba:	588a      	ldr	r2, [r1, r2]
 80135bc:	601a      	str	r2, [r3, #0]
    adrNext.UpdateChanMask = false;
 80135be:	183b      	adds	r3, r7, r0
 80135c0:	2200      	movs	r2, #0
 80135c2:	711a      	strb	r2, [r3, #4]
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 80135c4:	4b3a      	ldr	r3, [pc, #232]	; (80136b0 <LoRaMacQueryTxPossible+0x14c>)
 80135c6:	4a3b      	ldr	r2, [pc, #236]	; (80136b4 <LoRaMacQueryTxPossible+0x150>)
 80135c8:	589b      	ldr	r3, [r3, r2]
 80135ca:	227e      	movs	r2, #126	; 0x7e
 80135cc:	5c9a      	ldrb	r2, [r3, r2]
 80135ce:	183b      	adds	r3, r7, r0
 80135d0:	715a      	strb	r2, [r3, #5]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 80135d2:	4b37      	ldr	r3, [pc, #220]	; (80136b0 <LoRaMacQueryTxPossible+0x14c>)
 80135d4:	4a37      	ldr	r2, [pc, #220]	; (80136b4 <LoRaMacQueryTxPossible+0x150>)
 80135d6:	589b      	ldr	r3, [r3, r2]
 80135d8:	2280      	movs	r2, #128	; 0x80
 80135da:	589a      	ldr	r2, [r3, r2]
 80135dc:	183b      	adds	r3, r7, r0
 80135de:	609a      	str	r2, [r3, #8]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 80135e0:	4a33      	ldr	r2, [pc, #204]	; (80136b0 <LoRaMacQueryTxPossible+0x14c>)
 80135e2:	23fd      	movs	r3, #253	; 0xfd
 80135e4:	009b      	lsls	r3, r3, #2
 80135e6:	5ad2      	ldrh	r2, [r2, r3]
 80135e8:	183b      	adds	r3, r7, r0
 80135ea:	819a      	strh	r2, [r3, #12]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 80135ec:	4b30      	ldr	r3, [pc, #192]	; (80136b0 <LoRaMacQueryTxPossible+0x14c>)
 80135ee:	4a32      	ldr	r2, [pc, #200]	; (80136b8 <LoRaMacQueryTxPossible+0x154>)
 80135f0:	5a9a      	ldrh	r2, [r3, r2]
 80135f2:	183b      	adds	r3, r7, r0
 80135f4:	81da      	strh	r2, [r3, #14]
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 80135f6:	4b2e      	ldr	r3, [pc, #184]	; (80136b0 <LoRaMacQueryTxPossible+0x14c>)
 80135f8:	4a2e      	ldr	r2, [pc, #184]	; (80136b4 <LoRaMacQueryTxPossible+0x150>)
 80135fa:	589b      	ldr	r3, [r3, r2]
 80135fc:	2285      	movs	r2, #133	; 0x85
 80135fe:	569a      	ldrsb	r2, [r3, r2]
 8013600:	183b      	adds	r3, r7, r0
 8013602:	741a      	strb	r2, [r3, #16]
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8013604:	4b2a      	ldr	r3, [pc, #168]	; (80136b0 <LoRaMacQueryTxPossible+0x14c>)
 8013606:	4a2b      	ldr	r2, [pc, #172]	; (80136b4 <LoRaMacQueryTxPossible+0x150>)
 8013608:	589b      	ldr	r3, [r3, r2]
 801360a:	2284      	movs	r2, #132	; 0x84
 801360c:	569a      	ldrsb	r2, [r3, r2]
 801360e:	183b      	adds	r3, r7, r0
 8013610:	745a      	strb	r2, [r3, #17]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8013612:	4b27      	ldr	r3, [pc, #156]	; (80136b0 <LoRaMacQueryTxPossible+0x14c>)
 8013614:	4a27      	ldr	r2, [pc, #156]	; (80136b4 <LoRaMacQueryTxPossible+0x150>)
 8013616:	589b      	ldr	r3, [r3, r2]
 8013618:	22b8      	movs	r2, #184	; 0xb8
 801361a:	5c9a      	ldrb	r2, [r3, r2]
 801361c:	183b      	adds	r3, r7, r0
 801361e:	749a      	strb	r2, [r3, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;
 8013620:	4b23      	ldr	r3, [pc, #140]	; (80136b0 <LoRaMacQueryTxPossible+0x14c>)
 8013622:	4a24      	ldr	r2, [pc, #144]	; (80136b4 <LoRaMacQueryTxPossible+0x150>)
 8013624:	589b      	ldr	r3, [r3, r2]
 8013626:	781a      	ldrb	r2, [r3, #0]
 8013628:	183b      	adds	r3, r7, r0
 801362a:	74da      	strb	r2, [r3, #19]

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 801362c:	2310      	movs	r3, #16
 801362e:	18fb      	adds	r3, r7, r3
 8013630:	220e      	movs	r2, #14
 8013632:	18ba      	adds	r2, r7, r2
 8013634:	240f      	movs	r4, #15
 8013636:	1939      	adds	r1, r7, r4
 8013638:	1838      	adds	r0, r7, r0
 801363a:	f001 f8c4 	bl	80147c6 <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 801363e:	193b      	adds	r3, r7, r4
 8013640:	781b      	ldrb	r3, [r3, #0]
 8013642:	b25b      	sxtb	r3, r3
 8013644:	0018      	movs	r0, r3
 8013646:	f7fd f9e7 	bl	8010a18 <GetMaxAppPayloadWithoutFOptsLength>
 801364a:	0003      	movs	r3, r0
 801364c:	001a      	movs	r2, r3
 801364e:	683b      	ldr	r3, [r7, #0]
 8013650:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8013652:	2308      	movs	r3, #8
 8013654:	18fb      	adds	r3, r7, r3
 8013656:	0018      	movs	r0, r3
 8013658:	f001 fbf6 	bl	8014e48 <LoRaMacCommandsGetSizeSerializedCmds>
 801365c:	1e03      	subs	r3, r0, #0
 801365e:	d001      	beq.n	8013664 <LoRaMacQueryTxPossible+0x100>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013660:	2313      	movs	r3, #19
 8013662:	e021      	b.n	80136a8 <LoRaMacQueryTxPossible+0x144>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8013664:	68bb      	ldr	r3, [r7, #8]
 8013666:	2b0f      	cmp	r3, #15
 8013668:	d81a      	bhi.n	80136a0 <LoRaMacQueryTxPossible+0x13c>
 801366a:	683b      	ldr	r3, [r7, #0]
 801366c:	785b      	ldrb	r3, [r3, #1]
 801366e:	001a      	movs	r2, r3
 8013670:	68bb      	ldr	r3, [r7, #8]
 8013672:	429a      	cmp	r2, r3
 8013674:	d314      	bcc.n	80136a0 <LoRaMacQueryTxPossible+0x13c>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8013676:	683b      	ldr	r3, [r7, #0]
 8013678:	785a      	ldrb	r2, [r3, #1]
 801367a:	68bb      	ldr	r3, [r7, #8]
 801367c:	b2db      	uxtb	r3, r3
 801367e:	1ad3      	subs	r3, r2, r3
 8013680:	b2da      	uxtb	r2, r3
 8013682:	683b      	ldr	r3, [r7, #0]
 8013684:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8013686:	683b      	ldr	r3, [r7, #0]
 8013688:	785b      	ldrb	r3, [r3, #1]
 801368a:	0019      	movs	r1, r3
 801368c:	1dfb      	adds	r3, r7, #7
 801368e:	781a      	ldrb	r2, [r3, #0]
 8013690:	68bb      	ldr	r3, [r7, #8]
 8013692:	18d3      	adds	r3, r2, r3
 8013694:	4299      	cmp	r1, r3
 8013696:	d301      	bcc.n	801369c <LoRaMacQueryTxPossible+0x138>
        {
            return LORAMAC_STATUS_OK;
 8013698:	2300      	movs	r3, #0
 801369a:	e005      	b.n	80136a8 <LoRaMacQueryTxPossible+0x144>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 801369c:	2308      	movs	r3, #8
 801369e:	e003      	b.n	80136a8 <LoRaMacQueryTxPossible+0x144>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 80136a0:	683b      	ldr	r3, [r7, #0]
 80136a2:	2200      	movs	r2, #0
 80136a4:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 80136a6:	2308      	movs	r3, #8
    }
}
 80136a8:	0018      	movs	r0, r3
 80136aa:	46bd      	mov	sp, r7
 80136ac:	b00b      	add	sp, #44	; 0x2c
 80136ae:	bd90      	pop	{r4, r7, pc}
 80136b0:	200005b8 	.word	0x200005b8
 80136b4:	00000484 	.word	0x00000484
 80136b8:	000003f6 	.word	0x000003f6

080136bc <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 80136bc:	b590      	push	{r4, r7, lr}
 80136be:	b087      	sub	sp, #28
 80136c0:	af00      	add	r7, sp, #0
 80136c2:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80136c4:	2317      	movs	r3, #23
 80136c6:	18fb      	adds	r3, r7, r3
 80136c8:	2200      	movs	r2, #0
 80136ca:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d101      	bne.n	80136d6 <LoRaMacMibGetRequestConfirm+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80136d2:	2303      	movs	r3, #3
 80136d4:	e146      	b.n	8013964 <LoRaMacMibGetRequestConfirm+0x2a8>
    }

    switch( mibGet->Type )
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	781b      	ldrb	r3, [r3, #0]
 80136da:	2b28      	cmp	r3, #40	; 0x28
 80136dc:	d900      	bls.n	80136e0 <LoRaMacMibGetRequestConfirm+0x24>
 80136de:	e135      	b.n	801394c <LoRaMacMibGetRequestConfirm+0x290>
 80136e0:	009a      	lsls	r2, r3, #2
 80136e2:	4ba2      	ldr	r3, [pc, #648]	; (801396c <LoRaMacMibGetRequestConfirm+0x2b0>)
 80136e4:	18d3      	adds	r3, r2, r3
 80136e6:	681b      	ldr	r3, [r3, #0]
 80136e8:	469f      	mov	pc, r3
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = MacCtx.NvmCtx->DeviceClass;
 80136ea:	4ba1      	ldr	r3, [pc, #644]	; (8013970 <LoRaMacMibGetRequestConfirm+0x2b4>)
 80136ec:	4aa1      	ldr	r2, [pc, #644]	; (8013974 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80136ee:	589b      	ldr	r3, [r3, r2]
 80136f0:	227c      	movs	r2, #124	; 0x7c
 80136f2:	5c9a      	ldrb	r2, [r3, r2]
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	711a      	strb	r2, [r3, #4]
            break;
 80136f8:	e131      	b.n	801395e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = MacCtx.NvmCtx->NetworkActivation;
 80136fa:	4b9d      	ldr	r3, [pc, #628]	; (8013970 <LoRaMacMibGetRequestConfirm+0x2b4>)
 80136fc:	4a9d      	ldr	r2, [pc, #628]	; (8013974 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80136fe:	589a      	ldr	r2, [r3, r2]
 8013700:	23b2      	movs	r3, #178	; 0xb2
 8013702:	005b      	lsls	r3, r3, #1
 8013704:	5cd2      	ldrb	r2, [r2, r3]
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	711a      	strb	r2, [r3, #4]
            break;
 801370a:	e128      	b.n	801395e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 801370c:	f7fa fb5c 	bl	800ddc8 <SecureElementGetDevEui>
 8013710:	0002      	movs	r2, r0
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	605a      	str	r2, [r3, #4]
            break;
 8013716:	e122      	b.n	801395e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 8013718:	f7fa fb7a 	bl	800de10 <SecureElementGetJoinEui>
 801371c:	0002      	movs	r2, r0
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	605a      	str	r2, [r3, #4]
            break;
 8013722:	e11c      	b.n	801395e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = MacCtx.NvmCtx->AdrCtrlOn;
 8013724:	4b92      	ldr	r3, [pc, #584]	; (8013970 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013726:	4a93      	ldr	r2, [pc, #588]	; (8013974 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013728:	589b      	ldr	r3, [r3, r2]
 801372a:	227e      	movs	r2, #126	; 0x7e
 801372c:	5c9a      	ldrb	r2, [r3, r2]
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	711a      	strb	r2, [r3, #4]
            break;
 8013732:	e114      	b.n	801395e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = MacCtx.NvmCtx->NetID;
 8013734:	4b8e      	ldr	r3, [pc, #568]	; (8013970 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013736:	4a8f      	ldr	r2, [pc, #572]	; (8013974 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013738:	589b      	ldr	r3, [r3, r2]
 801373a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	605a      	str	r2, [r3, #4]
            break;
 8013740:	e10d      	b.n	801395e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = MacCtx.NvmCtx->DevAddr;
 8013742:	4b8b      	ldr	r3, [pc, #556]	; (8013970 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013744:	4a8b      	ldr	r2, [pc, #556]	; (8013974 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013746:	589b      	ldr	r3, [r3, r2]
 8013748:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	605a      	str	r2, [r3, #4]
            break;
 801374e:	e106      	b.n	801395e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = MacCtx.NvmCtx->PublicNetwork;
 8013750:	4b87      	ldr	r3, [pc, #540]	; (8013970 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013752:	4a88      	ldr	r2, [pc, #544]	; (8013974 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013754:	589b      	ldr	r3, [r3, r2]
 8013756:	227d      	movs	r2, #125	; 0x7d
 8013758:	5c9a      	ldrb	r2, [r3, r2]
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	711a      	strb	r2, [r3, #4]
            break;
 801375e:	e0fe      	b.n	801395e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8013760:	4b83      	ldr	r3, [pc, #524]	; (8013970 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013762:	4a84      	ldr	r2, [pc, #528]	; (8013974 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013764:	589b      	ldr	r3, [r3, r2]
 8013766:	22ca      	movs	r2, #202	; 0xca
 8013768:	5c9a      	ldrb	r2, [r3, r2]
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	711a      	strb	r2, [r3, #4]
            break;
 801376e:	e0f6      	b.n	801395e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8013770:	2110      	movs	r1, #16
 8013772:	187b      	adds	r3, r7, r1
 8013774:	221d      	movs	r2, #29
 8013776:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8013778:	4b7d      	ldr	r3, [pc, #500]	; (8013970 <LoRaMacMibGetRequestConfirm+0x2b4>)
 801377a:	4a7e      	ldr	r2, [pc, #504]	; (8013974 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801377c:	589b      	ldr	r3, [r3, r2]
 801377e:	781b      	ldrb	r3, [r3, #0]
 8013780:	187a      	adds	r2, r7, r1
 8013782:	0011      	movs	r1, r2
 8013784:	0018      	movs	r0, r3
 8013786:	f003 fa38 	bl	8016bfa <RegionGetPhyParam>
 801378a:	0003      	movs	r3, r0
 801378c:	001a      	movs	r2, r3
 801378e:	210c      	movs	r1, #12
 8013790:	187b      	adds	r3, r7, r1
 8013792:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelList = phyParam.Channels;
 8013794:	187b      	adds	r3, r7, r1
 8013796:	681a      	ldr	r2, [r3, #0]
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	605a      	str	r2, [r3, #4]
            break;
 801379c:	e0df      	b.n	801395e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 801379e:	4b74      	ldr	r3, [pc, #464]	; (8013970 <LoRaMacMibGetRequestConfirm+0x2b4>)
 80137a0:	4a74      	ldr	r2, [pc, #464]	; (8013974 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80137a2:	589a      	ldr	r2, [r3, r2]
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	21a8      	movs	r1, #168	; 0xa8
 80137a8:	3304      	adds	r3, #4
 80137aa:	1852      	adds	r2, r2, r1
 80137ac:	ca03      	ldmia	r2!, {r0, r1}
 80137ae:	c303      	stmia	r3!, {r0, r1}
            break;
 80137b0:	e0d5      	b.n	801395e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 80137b2:	4b6f      	ldr	r3, [pc, #444]	; (8013970 <LoRaMacMibGetRequestConfirm+0x2b4>)
 80137b4:	4a6f      	ldr	r2, [pc, #444]	; (8013974 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80137b6:	589a      	ldr	r2, [r3, r2]
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	3304      	adds	r3, #4
 80137bc:	3228      	adds	r2, #40	; 0x28
 80137be:	ca03      	ldmia	r2!, {r0, r1}
 80137c0:	c303      	stmia	r3!, {r0, r1}
            break;
 80137c2:	e0cc      	b.n	801395e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParams.RxCChannel;
 80137c4:	4b6a      	ldr	r3, [pc, #424]	; (8013970 <LoRaMacMibGetRequestConfirm+0x2b4>)
 80137c6:	4a6b      	ldr	r2, [pc, #428]	; (8013974 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80137c8:	589a      	ldr	r2, [r3, r2]
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	21b0      	movs	r1, #176	; 0xb0
 80137ce:	3304      	adds	r3, #4
 80137d0:	1852      	adds	r2, r2, r1
 80137d2:	ca03      	ldmia	r2!, {r0, r1}
 80137d4:	c303      	stmia	r3!, {r0, r1}
            break;
 80137d6:	e0c2      	b.n	801395e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 80137d8:	4b65      	ldr	r3, [pc, #404]	; (8013970 <LoRaMacMibGetRequestConfirm+0x2b4>)
 80137da:	4a66      	ldr	r2, [pc, #408]	; (8013974 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80137dc:	589a      	ldr	r2, [r3, r2]
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	3304      	adds	r3, #4
 80137e2:	3230      	adds	r2, #48	; 0x30
 80137e4:	ca03      	ldmia	r2!, {r0, r1}
 80137e6:	c303      	stmia	r3!, {r0, r1}
            break;
 80137e8:	e0b9      	b.n	801395e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 80137ea:	2110      	movs	r1, #16
 80137ec:	187b      	adds	r3, r7, r1
 80137ee:	221b      	movs	r2, #27
 80137f0:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80137f2:	4b5f      	ldr	r3, [pc, #380]	; (8013970 <LoRaMacMibGetRequestConfirm+0x2b4>)
 80137f4:	4a5f      	ldr	r2, [pc, #380]	; (8013974 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80137f6:	589b      	ldr	r3, [r3, r2]
 80137f8:	781b      	ldrb	r3, [r3, #0]
 80137fa:	187a      	adds	r2, r7, r1
 80137fc:	0011      	movs	r1, r2
 80137fe:	0018      	movs	r0, r3
 8013800:	f003 f9fb 	bl	8016bfa <RegionGetPhyParam>
 8013804:	0003      	movs	r3, r0
 8013806:	001a      	movs	r2, r3
 8013808:	210c      	movs	r1, #12
 801380a:	187b      	adds	r3, r7, r1
 801380c:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 801380e:	187b      	adds	r3, r7, r1
 8013810:	681a      	ldr	r2, [r3, #0]
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	605a      	str	r2, [r3, #4]
            break;
 8013816:	e0a2      	b.n	801395e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8013818:	2110      	movs	r1, #16
 801381a:	187b      	adds	r3, r7, r1
 801381c:	221a      	movs	r2, #26
 801381e:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8013820:	4b53      	ldr	r3, [pc, #332]	; (8013970 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013822:	4a54      	ldr	r2, [pc, #336]	; (8013974 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013824:	589b      	ldr	r3, [r3, r2]
 8013826:	781b      	ldrb	r3, [r3, #0]
 8013828:	187a      	adds	r2, r7, r1
 801382a:	0011      	movs	r1, r2
 801382c:	0018      	movs	r0, r3
 801382e:	f003 f9e4 	bl	8016bfa <RegionGetPhyParam>
 8013832:	0003      	movs	r3, r0
 8013834:	001a      	movs	r2, r3
 8013836:	210c      	movs	r1, #12
 8013838:	187b      	adds	r3, r7, r1
 801383a:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 801383c:	187b      	adds	r3, r7, r1
 801383e:	681a      	ldr	r2, [r3, #0]
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	605a      	str	r2, [r3, #4]
            break;
 8013844:	e08b      	b.n	801395e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 8013846:	4b4a      	ldr	r3, [pc, #296]	; (8013970 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013848:	4a4a      	ldr	r2, [pc, #296]	; (8013974 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801384a:	589b      	ldr	r3, [r3, r2]
 801384c:	22a4      	movs	r2, #164	; 0xa4
 801384e:	5c9a      	ldrb	r2, [r3, r2]
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	711a      	strb	r2, [r3, #4]
            break;
 8013854:	e083      	b.n	801395e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = MacCtx.NvmCtx->MacParams.MaxRxWindow;
 8013856:	4b46      	ldr	r3, [pc, #280]	; (8013970 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013858:	4a46      	ldr	r2, [pc, #280]	; (8013974 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801385a:	589b      	ldr	r3, [r3, r2]
 801385c:	2290      	movs	r2, #144	; 0x90
 801385e:	589a      	ldr	r2, [r3, r2]
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	605a      	str	r2, [r3, #4]
            break;
 8013864:	e07b      	b.n	801395e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = MacCtx.NvmCtx->MacParams.ReceiveDelay1;
 8013866:	4b42      	ldr	r3, [pc, #264]	; (8013970 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013868:	4a42      	ldr	r2, [pc, #264]	; (8013974 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801386a:	589b      	ldr	r3, [r3, r2]
 801386c:	2294      	movs	r2, #148	; 0x94
 801386e:	589a      	ldr	r2, [r3, r2]
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	605a      	str	r2, [r3, #4]
            break;
 8013874:	e073      	b.n	801395e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay2;
 8013876:	4b3e      	ldr	r3, [pc, #248]	; (8013970 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013878:	4a3e      	ldr	r2, [pc, #248]	; (8013974 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801387a:	589b      	ldr	r3, [r3, r2]
 801387c:	2298      	movs	r2, #152	; 0x98
 801387e:	589a      	ldr	r2, [r3, r2]
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	605a      	str	r2, [r3, #4]
            break;
 8013884:	e06b      	b.n	801395e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1;
 8013886:	4b3a      	ldr	r3, [pc, #232]	; (8013970 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013888:	4a3a      	ldr	r2, [pc, #232]	; (8013974 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801388a:	589b      	ldr	r3, [r3, r2]
 801388c:	229c      	movs	r2, #156	; 0x9c
 801388e:	589a      	ldr	r2, [r3, r2]
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	605a      	str	r2, [r3, #4]
            break;
 8013894:	e063      	b.n	801395e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2;
 8013896:	4b36      	ldr	r3, [pc, #216]	; (8013970 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013898:	4a36      	ldr	r2, [pc, #216]	; (8013974 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801389a:	589b      	ldr	r3, [r3, r2]
 801389c:	22a0      	movs	r2, #160	; 0xa0
 801389e:	589a      	ldr	r2, [r3, r2]
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	605a      	str	r2, [r3, #4]
            break;
 80138a4:	e05b      	b.n	801395e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 80138a6:	4b32      	ldr	r3, [pc, #200]	; (8013970 <LoRaMacMibGetRequestConfirm+0x2b4>)
 80138a8:	4a32      	ldr	r2, [pc, #200]	; (8013974 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80138aa:	589b      	ldr	r3, [r3, r2]
 80138ac:	2205      	movs	r2, #5
 80138ae:	569a      	ldrsb	r2, [r3, r2]
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	711a      	strb	r2, [r3, #4]
            break;
 80138b4:	e053      	b.n	801395e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 80138b6:	4b2e      	ldr	r3, [pc, #184]	; (8013970 <LoRaMacMibGetRequestConfirm+0x2b4>)
 80138b8:	4a2e      	ldr	r2, [pc, #184]	; (8013974 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80138ba:	589b      	ldr	r3, [r3, r2]
 80138bc:	2285      	movs	r2, #133	; 0x85
 80138be:	569a      	ldrsb	r2, [r3, r2]
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	711a      	strb	r2, [r3, #4]
            break;
 80138c4:	e04b      	b.n	801395e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 80138c6:	4b2a      	ldr	r3, [pc, #168]	; (8013970 <LoRaMacMibGetRequestConfirm+0x2b4>)
 80138c8:	4a2a      	ldr	r2, [pc, #168]	; (8013974 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80138ca:	589b      	ldr	r3, [r3, r2]
 80138cc:	2204      	movs	r2, #4
 80138ce:	569a      	ldrsb	r2, [r3, r2]
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	711a      	strb	r2, [r3, #4]
            break;
 80138d4:	e043      	b.n	801395e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 80138d6:	4b26      	ldr	r3, [pc, #152]	; (8013970 <LoRaMacMibGetRequestConfirm+0x2b4>)
 80138d8:	4a26      	ldr	r2, [pc, #152]	; (8013974 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80138da:	589b      	ldr	r3, [r3, r2]
 80138dc:	2284      	movs	r2, #132	; 0x84
 80138de:	569a      	ldrsb	r2, [r3, r2]
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	711a      	strb	r2, [r3, #4]
            break;
 80138e4:	e03b      	b.n	801395e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = MacCtx.NvmCtx->MacParams.SystemMaxRxError;
 80138e6:	4b22      	ldr	r3, [pc, #136]	; (8013970 <LoRaMacMibGetRequestConfirm+0x2b4>)
 80138e8:	4a22      	ldr	r2, [pc, #136]	; (8013974 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80138ea:	589b      	ldr	r3, [r3, r2]
 80138ec:	2288      	movs	r2, #136	; 0x88
 80138ee:	589a      	ldr	r2, [r3, r2]
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	605a      	str	r2, [r3, #4]
            break;
 80138f4:	e033      	b.n	801395e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = MacCtx.NvmCtx->MacParams.MinRxSymbols;
 80138f6:	4b1e      	ldr	r3, [pc, #120]	; (8013970 <LoRaMacMibGetRequestConfirm+0x2b4>)
 80138f8:	4a1e      	ldr	r2, [pc, #120]	; (8013974 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80138fa:	589b      	ldr	r3, [r3, r2]
 80138fc:	228c      	movs	r2, #140	; 0x8c
 80138fe:	5c9a      	ldrb	r2, [r3, r2]
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	711a      	strb	r2, [r3, #4]
            break;
 8013904:	e02b      	b.n	801395e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 8013906:	4b1a      	ldr	r3, [pc, #104]	; (8013970 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013908:	4a1a      	ldr	r2, [pc, #104]	; (8013974 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801390a:	589b      	ldr	r3, [r3, r2]
 801390c:	22c0      	movs	r2, #192	; 0xc0
 801390e:	589a      	ldr	r2, [r3, r2]
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	605a      	str	r2, [r3, #4]
            break;
 8013914:	e023      	b.n	801395e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = GetCtxs( );
 8013916:	f7fe ff23 	bl	8012760 <GetCtxs>
 801391a:	0002      	movs	r2, r0
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	605a      	str	r2, [r3, #4]
            break;
 8013920:	e01d      	b.n	801395e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 8013922:	4b13      	ldr	r3, [pc, #76]	; (8013970 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013924:	4a13      	ldr	r2, [pc, #76]	; (8013974 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013926:	589b      	ldr	r3, [r3, r2]
 8013928:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	605a      	str	r2, [r3, #4]
            break;
 801392e:	e016      	b.n	801395e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = MacCtx.NvmCtx->Version;
 8013930:	4b0f      	ldr	r3, [pc, #60]	; (8013970 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013932:	4a10      	ldr	r2, [pc, #64]	; (8013974 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013934:	5899      	ldr	r1, [r3, r2]
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	22b0      	movs	r2, #176	; 0xb0
 801393a:	0052      	lsls	r2, r2, #1
 801393c:	588a      	ldr	r2, [r1, r2]
 801393e:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8013940:	687c      	ldr	r4, [r7, #4]
 8013942:	f003 fb55 	bl	8016ff0 <RegionGetVersion>
 8013946:	0003      	movs	r3, r0
 8013948:	60a3      	str	r3, [r4, #8]
            break;
 801394a:	e008      	b.n	801395e <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 801394c:	2317      	movs	r3, #23
 801394e:	18fc      	adds	r4, r7, r3
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	0018      	movs	r0, r3
 8013954:	f000 ffed 	bl	8014932 <LoRaMacClassBMibGetRequestConfirm>
 8013958:	0003      	movs	r3, r0
 801395a:	7023      	strb	r3, [r4, #0]
            break;
 801395c:	46c0      	nop			; (mov r8, r8)
        }
    }
    return status;
 801395e:	2317      	movs	r3, #23
 8013960:	18fb      	adds	r3, r7, r3
 8013962:	781b      	ldrb	r3, [r3, #0]
}
 8013964:	0018      	movs	r0, r3
 8013966:	46bd      	mov	sp, r7
 8013968:	b007      	add	sp, #28
 801396a:	bd90      	pop	{r4, r7, pc}
 801396c:	0801f908 	.word	0x0801f908
 8013970:	200005b8 	.word	0x200005b8
 8013974:	00000484 	.word	0x00000484

08013978 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8013978:	b590      	push	{r4, r7, lr}
 801397a:	b087      	sub	sp, #28
 801397c:	af00      	add	r7, sp, #0
 801397e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8013980:	2317      	movs	r3, #23
 8013982:	18fb      	adds	r3, r7, r3
 8013984:	2200      	movs	r2, #0
 8013986:	701a      	strb	r2, [r3, #0]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	2b00      	cmp	r3, #0
 801398c:	d102      	bne.n	8013994 <LoRaMacMibSetRequestConfirm+0x1c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801398e:	2303      	movs	r3, #3
 8013990:	f000 fb74 	bl	801407c <LoRaMacMibSetRequestConfirm+0x704>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8013994:	4ac3      	ldr	r2, [pc, #780]	; (8013ca4 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013996:	23d0      	movs	r3, #208	; 0xd0
 8013998:	009b      	lsls	r3, r3, #2
 801399a:	58d3      	ldr	r3, [r2, r3]
 801399c:	2202      	movs	r2, #2
 801399e:	4013      	ands	r3, r2
 80139a0:	d002      	beq.n	80139a8 <LoRaMacMibSetRequestConfirm+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 80139a2:	2301      	movs	r3, #1
 80139a4:	f000 fb6a 	bl	801407c <LoRaMacMibSetRequestConfirm+0x704>
    }

    switch( mibSet->Type )
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	781b      	ldrb	r3, [r3, #0]
 80139ac:	2b27      	cmp	r3, #39	; 0x27
 80139ae:	d900      	bls.n	80139b2 <LoRaMacMibSetRequestConfirm+0x3a>
 80139b0:	e333      	b.n	801401a <LoRaMacMibSetRequestConfirm+0x6a2>
 80139b2:	009a      	lsls	r2, r3, #2
 80139b4:	4bbc      	ldr	r3, [pc, #752]	; (8013ca8 <LoRaMacMibSetRequestConfirm+0x330>)
 80139b6:	18d3      	adds	r3, r2, r3
 80139b8:	681b      	ldr	r3, [r3, #0]
 80139ba:	469f      	mov	pc, r3
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	791b      	ldrb	r3, [r3, #4]
 80139c0:	2217      	movs	r2, #23
 80139c2:	18bc      	adds	r4, r7, r2
 80139c4:	0018      	movs	r0, r3
 80139c6:	f7fc ff07 	bl	80107d8 <SwitchClass>
 80139ca:	0003      	movs	r3, r0
 80139cc:	7023      	strb	r3, [r4, #0]
            break;
 80139ce:	e34e      	b.n	801406e <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	791b      	ldrb	r3, [r3, #4]
 80139d4:	2b02      	cmp	r3, #2
 80139d6:	d008      	beq.n	80139ea <LoRaMacMibSetRequestConfirm+0x72>
            {
                MacCtx.NvmCtx->NetworkActivation = mibSet->Param.NetworkActivation;
 80139d8:	4bb2      	ldr	r3, [pc, #712]	; (8013ca4 <LoRaMacMibSetRequestConfirm+0x32c>)
 80139da:	4ab4      	ldr	r2, [pc, #720]	; (8013cac <LoRaMacMibSetRequestConfirm+0x334>)
 80139dc:	589a      	ldr	r2, [r3, r2]
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	7919      	ldrb	r1, [r3, #4]
 80139e2:	23b2      	movs	r3, #178	; 0xb2
 80139e4:	005b      	lsls	r3, r3, #1
 80139e6:	54d1      	strb	r1, [r2, r3]
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80139e8:	e341      	b.n	801406e <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80139ea:	2317      	movs	r3, #23
 80139ec:	18fb      	adds	r3, r7, r3
 80139ee:	2203      	movs	r2, #3
 80139f0:	701a      	strb	r2, [r3, #0]
            break;
 80139f2:	e33c      	b.n	801406e <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	685b      	ldr	r3, [r3, #4]
 80139f8:	0018      	movs	r0, r3
 80139fa:	f7fa f9c9 	bl	800dd90 <SecureElementSetDevEui>
 80139fe:	1e03      	subs	r3, r0, #0
 8013a00:	d100      	bne.n	8013a04 <LoRaMacMibSetRequestConfirm+0x8c>
 8013a02:	e319      	b.n	8014038 <LoRaMacMibSetRequestConfirm+0x6c0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013a04:	2317      	movs	r3, #23
 8013a06:	18fb      	adds	r3, r7, r3
 8013a08:	2203      	movs	r2, #3
 8013a0a:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013a0c:	e314      	b.n	8014038 <LoRaMacMibSetRequestConfirm+0x6c0>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	685b      	ldr	r3, [r3, #4]
 8013a12:	0018      	movs	r0, r3
 8013a14:	f7fa f9e0 	bl	800ddd8 <SecureElementSetJoinEui>
 8013a18:	1e03      	subs	r3, r0, #0
 8013a1a:	d100      	bne.n	8013a1e <LoRaMacMibSetRequestConfirm+0xa6>
 8013a1c:	e30e      	b.n	801403c <LoRaMacMibSetRequestConfirm+0x6c4>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013a1e:	2317      	movs	r3, #23
 8013a20:	18fb      	adds	r3, r7, r3
 8013a22:	2203      	movs	r2, #3
 8013a24:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013a26:	e309      	b.n	801403c <LoRaMacMibSetRequestConfirm+0x6c4>
        }
        case MIB_ADR:
        {
            MacCtx.NvmCtx->AdrCtrlOn = mibSet->Param.AdrEnable;
 8013a28:	4b9e      	ldr	r3, [pc, #632]	; (8013ca4 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013a2a:	4aa0      	ldr	r2, [pc, #640]	; (8013cac <LoRaMacMibSetRequestConfirm+0x334>)
 8013a2c:	589b      	ldr	r3, [r3, r2]
 8013a2e:	687a      	ldr	r2, [r7, #4]
 8013a30:	7911      	ldrb	r1, [r2, #4]
 8013a32:	227e      	movs	r2, #126	; 0x7e
 8013a34:	5499      	strb	r1, [r3, r2]
            break;
 8013a36:	e31a      	b.n	801406e <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_NET_ID:
        {
            MacCtx.NvmCtx->NetID = mibSet->Param.NetID;
 8013a38:	4b9a      	ldr	r3, [pc, #616]	; (8013ca4 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013a3a:	4a9c      	ldr	r2, [pc, #624]	; (8013cac <LoRaMacMibSetRequestConfirm+0x334>)
 8013a3c:	589b      	ldr	r3, [r3, r2]
 8013a3e:	687a      	ldr	r2, [r7, #4]
 8013a40:	6852      	ldr	r2, [r2, #4]
 8013a42:	649a      	str	r2, [r3, #72]	; 0x48
            break;
 8013a44:	e313      	b.n	801406e <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_DEV_ADDR:
        {
            MacCtx.NvmCtx->DevAddr = mibSet->Param.DevAddr;
 8013a46:	4b97      	ldr	r3, [pc, #604]	; (8013ca4 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013a48:	4a98      	ldr	r2, [pc, #608]	; (8013cac <LoRaMacMibSetRequestConfirm+0x334>)
 8013a4a:	589b      	ldr	r3, [r3, r2]
 8013a4c:	687a      	ldr	r2, [r7, #4]
 8013a4e:	6852      	ldr	r2, [r2, #4]
 8013a50:	64da      	str	r2, [r3, #76]	; 0x4c
            break;
 8013a52:	e30c      	b.n	801406e <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	685b      	ldr	r3, [r3, #4]
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d00a      	beq.n	8013a72 <LoRaMacMibSetRequestConfirm+0xfa>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	685b      	ldr	r3, [r3, #4]
 8013a60:	0019      	movs	r1, r3
 8013a62:	2000      	movs	r0, #0
 8013a64:	f002 fa00 	bl	8015e68 <LoRaMacCryptoSetKey>
 8013a68:	1e03      	subs	r3, r0, #0
 8013a6a:	d100      	bne.n	8013a6e <LoRaMacMibSetRequestConfirm+0xf6>
 8013a6c:	e2e8      	b.n	8014040 <LoRaMacMibSetRequestConfirm+0x6c8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013a6e:	2311      	movs	r3, #17
 8013a70:	e304      	b.n	801407c <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013a72:	2317      	movs	r3, #23
 8013a74:	18fb      	adds	r3, r7, r3
 8013a76:	2203      	movs	r2, #3
 8013a78:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013a7a:	e2e1      	b.n	8014040 <LoRaMacMibSetRequestConfirm+0x6c8>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	685b      	ldr	r3, [r3, #4]
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d00a      	beq.n	8013a9a <LoRaMacMibSetRequestConfirm+0x122>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	685b      	ldr	r3, [r3, #4]
 8013a88:	0019      	movs	r1, r3
 8013a8a:	2001      	movs	r0, #1
 8013a8c:	f002 f9ec 	bl	8015e68 <LoRaMacCryptoSetKey>
 8013a90:	1e03      	subs	r3, r0, #0
 8013a92:	d100      	bne.n	8013a96 <LoRaMacMibSetRequestConfirm+0x11e>
 8013a94:	e2d6      	b.n	8014044 <LoRaMacMibSetRequestConfirm+0x6cc>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013a96:	2311      	movs	r3, #17
 8013a98:	e2f0      	b.n	801407c <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013a9a:	2317      	movs	r3, #23
 8013a9c:	18fb      	adds	r3, r7, r3
 8013a9e:	2203      	movs	r2, #3
 8013aa0:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013aa2:	e2cf      	b.n	8014044 <LoRaMacMibSetRequestConfirm+0x6cc>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	685b      	ldr	r3, [r3, #4]
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d00a      	beq.n	8013ac2 <LoRaMacMibSetRequestConfirm+0x14a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	685b      	ldr	r3, [r3, #4]
 8013ab0:	0019      	movs	r1, r3
 8013ab2:	2002      	movs	r0, #2
 8013ab4:	f002 f9d8 	bl	8015e68 <LoRaMacCryptoSetKey>
 8013ab8:	1e03      	subs	r3, r0, #0
 8013aba:	d100      	bne.n	8013abe <LoRaMacMibSetRequestConfirm+0x146>
 8013abc:	e2c4      	b.n	8014048 <LoRaMacMibSetRequestConfirm+0x6d0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013abe:	2311      	movs	r3, #17
 8013ac0:	e2dc      	b.n	801407c <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013ac2:	2317      	movs	r3, #23
 8013ac4:	18fb      	adds	r3, r7, r3
 8013ac6:	2203      	movs	r2, #3
 8013ac8:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013aca:	e2bd      	b.n	8014048 <LoRaMacMibSetRequestConfirm+0x6d0>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	685b      	ldr	r3, [r3, #4]
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d00a      	beq.n	8013aea <LoRaMacMibSetRequestConfirm+0x172>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	685b      	ldr	r3, [r3, #4]
 8013ad8:	0019      	movs	r1, r3
 8013ada:	2003      	movs	r0, #3
 8013adc:	f002 f9c4 	bl	8015e68 <LoRaMacCryptoSetKey>
 8013ae0:	1e03      	subs	r3, r0, #0
 8013ae2:	d100      	bne.n	8013ae6 <LoRaMacMibSetRequestConfirm+0x16e>
 8013ae4:	e2b2      	b.n	801404c <LoRaMacMibSetRequestConfirm+0x6d4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013ae6:	2311      	movs	r3, #17
 8013ae8:	e2c8      	b.n	801407c <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013aea:	2317      	movs	r3, #23
 8013aec:	18fb      	adds	r3, r7, r3
 8013aee:	2203      	movs	r2, #3
 8013af0:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013af2:	e2ab      	b.n	801404c <LoRaMacMibSetRequestConfirm+0x6d4>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	685b      	ldr	r3, [r3, #4]
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d00a      	beq.n	8013b12 <LoRaMacMibSetRequestConfirm+0x19a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	685b      	ldr	r3, [r3, #4]
 8013b00:	0019      	movs	r1, r3
 8013b02:	207f      	movs	r0, #127	; 0x7f
 8013b04:	f002 f9b0 	bl	8015e68 <LoRaMacCryptoSetKey>
 8013b08:	1e03      	subs	r3, r0, #0
 8013b0a:	d100      	bne.n	8013b0e <LoRaMacMibSetRequestConfirm+0x196>
 8013b0c:	e2a0      	b.n	8014050 <LoRaMacMibSetRequestConfirm+0x6d8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013b0e:	2311      	movs	r3, #17
 8013b10:	e2b4      	b.n	801407c <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013b12:	2317      	movs	r3, #23
 8013b14:	18fb      	adds	r3, r7, r3
 8013b16:	2203      	movs	r2, #3
 8013b18:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013b1a:	e299      	b.n	8014050 <LoRaMacMibSetRequestConfirm+0x6d8>
        }
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	685b      	ldr	r3, [r3, #4]
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d00a      	beq.n	8013b3a <LoRaMacMibSetRequestConfirm+0x1c2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	685b      	ldr	r3, [r3, #4]
 8013b28:	0019      	movs	r1, r3
 8013b2a:	2080      	movs	r0, #128	; 0x80
 8013b2c:	f002 f99c 	bl	8015e68 <LoRaMacCryptoSetKey>
 8013b30:	1e03      	subs	r3, r0, #0
 8013b32:	d100      	bne.n	8013b36 <LoRaMacMibSetRequestConfirm+0x1be>
 8013b34:	e28e      	b.n	8014054 <LoRaMacMibSetRequestConfirm+0x6dc>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013b36:	2311      	movs	r3, #17
 8013b38:	e2a0      	b.n	801407c <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013b3a:	2317      	movs	r3, #23
 8013b3c:	18fb      	adds	r3, r7, r3
 8013b3e:	2203      	movs	r2, #3
 8013b40:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013b42:	e287      	b.n	8014054 <LoRaMacMibSetRequestConfirm+0x6dc>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	685b      	ldr	r3, [r3, #4]
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d00a      	beq.n	8013b62 <LoRaMacMibSetRequestConfirm+0x1ea>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	685b      	ldr	r3, [r3, #4]
 8013b50:	0019      	movs	r1, r3
 8013b52:	2081      	movs	r0, #129	; 0x81
 8013b54:	f002 f988 	bl	8015e68 <LoRaMacCryptoSetKey>
 8013b58:	1e03      	subs	r3, r0, #0
 8013b5a:	d100      	bne.n	8013b5e <LoRaMacMibSetRequestConfirm+0x1e6>
 8013b5c:	e27c      	b.n	8014058 <LoRaMacMibSetRequestConfirm+0x6e0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013b5e:	2311      	movs	r3, #17
 8013b60:	e28c      	b.n	801407c <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013b62:	2317      	movs	r3, #23
 8013b64:	18fb      	adds	r3, r7, r3
 8013b66:	2203      	movs	r2, #3
 8013b68:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013b6a:	e275      	b.n	8014058 <LoRaMacMibSetRequestConfirm+0x6e0>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	685b      	ldr	r3, [r3, #4]
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d00a      	beq.n	8013b8a <LoRaMacMibSetRequestConfirm+0x212>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	685b      	ldr	r3, [r3, #4]
 8013b78:	0019      	movs	r1, r3
 8013b7a:	2082      	movs	r0, #130	; 0x82
 8013b7c:	f002 f974 	bl	8015e68 <LoRaMacCryptoSetKey>
 8013b80:	1e03      	subs	r3, r0, #0
 8013b82:	d100      	bne.n	8013b86 <LoRaMacMibSetRequestConfirm+0x20e>
 8013b84:	e26a      	b.n	801405c <LoRaMacMibSetRequestConfirm+0x6e4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013b86:	2311      	movs	r3, #17
 8013b88:	e278      	b.n	801407c <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013b8a:	2317      	movs	r3, #23
 8013b8c:	18fb      	adds	r3, r7, r3
 8013b8e:	2203      	movs	r2, #3
 8013b90:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013b92:	e263      	b.n	801405c <LoRaMacMibSetRequestConfirm+0x6e4>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 1 */
        case MIB_PUBLIC_NETWORK:
        {
            MacCtx.NvmCtx->PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8013b94:	4b43      	ldr	r3, [pc, #268]	; (8013ca4 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013b96:	4a45      	ldr	r2, [pc, #276]	; (8013cac <LoRaMacMibSetRequestConfirm+0x334>)
 8013b98:	589b      	ldr	r3, [r3, r2]
 8013b9a:	687a      	ldr	r2, [r7, #4]
 8013b9c:	7911      	ldrb	r1, [r2, #4]
 8013b9e:	227d      	movs	r2, #125	; 0x7d
 8013ba0:	5499      	strb	r1, [r3, r2]
            Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 8013ba2:	4b43      	ldr	r3, [pc, #268]	; (8013cb0 <LoRaMacMibSetRequestConfirm+0x338>)
 8013ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013ba6:	4a3f      	ldr	r2, [pc, #252]	; (8013ca4 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013ba8:	4940      	ldr	r1, [pc, #256]	; (8013cac <LoRaMacMibSetRequestConfirm+0x334>)
 8013baa:	5852      	ldr	r2, [r2, r1]
 8013bac:	217d      	movs	r1, #125	; 0x7d
 8013bae:	5c52      	ldrb	r2, [r2, r1]
 8013bb0:	0010      	movs	r0, r2
 8013bb2:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 8013bb4:	4b3e      	ldr	r3, [pc, #248]	; (8013cb0 <LoRaMacMibSetRequestConfirm+0x338>)
 8013bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013bb8:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 8013bba:	e258      	b.n	801406e <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_REPEATER_SUPPORT:
        {
            MacCtx.NvmCtx->RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8013bbc:	4b39      	ldr	r3, [pc, #228]	; (8013ca4 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013bbe:	4a3b      	ldr	r2, [pc, #236]	; (8013cac <LoRaMacMibSetRequestConfirm+0x334>)
 8013bc0:	589b      	ldr	r3, [r3, r2]
 8013bc2:	687a      	ldr	r2, [r7, #4]
 8013bc4:	7911      	ldrb	r1, [r2, #4]
 8013bc6:	22ca      	movs	r2, #202	; 0xca
 8013bc8:	5499      	strb	r1, [r3, r2]
            break;
 8013bca:	e250      	b.n	801406e <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	7a1b      	ldrb	r3, [r3, #8]
 8013bd0:	b25a      	sxtb	r2, r3
 8013bd2:	2108      	movs	r1, #8
 8013bd4:	187b      	adds	r3, r7, r1
 8013bd6:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8013bd8:	4b32      	ldr	r3, [pc, #200]	; (8013ca4 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013bda:	4a34      	ldr	r2, [pc, #208]	; (8013cac <LoRaMacMibSetRequestConfirm+0x334>)
 8013bdc:	589b      	ldr	r3, [r3, r2]
 8013bde:	22b9      	movs	r2, #185	; 0xb9
 8013be0:	5c9a      	ldrb	r2, [r3, r2]
 8013be2:	187b      	adds	r3, r7, r1
 8013be4:	705a      	strb	r2, [r3, #1]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) != true )
 8013be6:	4b2f      	ldr	r3, [pc, #188]	; (8013ca4 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013be8:	4a30      	ldr	r2, [pc, #192]	; (8013cac <LoRaMacMibSetRequestConfirm+0x334>)
 8013bea:	589b      	ldr	r3, [r3, r2]
 8013bec:	781b      	ldrb	r3, [r3, #0]
 8013bee:	1879      	adds	r1, r7, r1
 8013bf0:	2207      	movs	r2, #7
 8013bf2:	0018      	movs	r0, r3
 8013bf4:	f003 f868 	bl	8016cc8 <RegionVerify>
 8013bf8:	0003      	movs	r3, r0
 8013bfa:	001a      	movs	r2, r3
 8013bfc:	2301      	movs	r3, #1
 8013bfe:	4053      	eors	r3, r2
 8013c00:	b2db      	uxtb	r3, r3
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d004      	beq.n	8013c10 <LoRaMacMibSetRequestConfirm+0x298>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013c06:	2317      	movs	r3, #23
 8013c08:	18fb      	adds	r3, r7, r3
 8013c0a:	2203      	movs	r2, #3
 8013c0c:	701a      	strb	r2, [r3, #0]
                {
                    MacCtx.NvmCtx->MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 8013c0e:	e22e      	b.n	801406e <LoRaMacMibSetRequestConfirm+0x6f6>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	685a      	ldr	r2, [r3, #4]
 8013c14:	2108      	movs	r1, #8
 8013c16:	187b      	adds	r3, r7, r1
 8013c18:	601a      	str	r2, [r3, #0]
                if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_FREQUENCY ) != true )
 8013c1a:	4b22      	ldr	r3, [pc, #136]	; (8013ca4 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013c1c:	4a23      	ldr	r2, [pc, #140]	; (8013cac <LoRaMacMibSetRequestConfirm+0x334>)
 8013c1e:	589b      	ldr	r3, [r3, r2]
 8013c20:	781b      	ldrb	r3, [r3, #0]
 8013c22:	1879      	adds	r1, r7, r1
 8013c24:	2200      	movs	r2, #0
 8013c26:	0018      	movs	r0, r3
 8013c28:	f003 f84e 	bl	8016cc8 <RegionVerify>
 8013c2c:	0003      	movs	r3, r0
 8013c2e:	001a      	movs	r2, r3
 8013c30:	2301      	movs	r3, #1
 8013c32:	4053      	eors	r3, r2
 8013c34:	b2db      	uxtb	r3, r3
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d004      	beq.n	8013c44 <LoRaMacMibSetRequestConfirm+0x2cc>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013c3a:	2317      	movs	r3, #23
 8013c3c:	18fb      	adds	r3, r7, r3
 8013c3e:	2203      	movs	r2, #3
 8013c40:	701a      	strb	r2, [r3, #0]
            break;
 8013c42:	e214      	b.n	801406e <LoRaMacMibSetRequestConfirm+0x6f6>
                    MacCtx.NvmCtx->MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8013c44:	4b17      	ldr	r3, [pc, #92]	; (8013ca4 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013c46:	4a19      	ldr	r2, [pc, #100]	; (8013cac <LoRaMacMibSetRequestConfirm+0x334>)
 8013c48:	589b      	ldr	r3, [r3, r2]
 8013c4a:	21a8      	movs	r1, #168	; 0xa8
 8013c4c:	687a      	ldr	r2, [r7, #4]
 8013c4e:	185b      	adds	r3, r3, r1
 8013c50:	3204      	adds	r2, #4
 8013c52:	ca03      	ldmia	r2!, {r0, r1}
 8013c54:	c303      	stmia	r3!, {r0, r1}
            break;
 8013c56:	e20a      	b.n	801406e <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	7a1b      	ldrb	r3, [r3, #8]
 8013c5c:	b25a      	sxtb	r2, r3
 8013c5e:	2108      	movs	r1, #8
 8013c60:	187b      	adds	r3, r7, r1
 8013c62:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8013c64:	4b0f      	ldr	r3, [pc, #60]	; (8013ca4 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013c66:	4a11      	ldr	r2, [pc, #68]	; (8013cac <LoRaMacMibSetRequestConfirm+0x334>)
 8013c68:	589b      	ldr	r3, [r3, r2]
 8013c6a:	22b9      	movs	r2, #185	; 0xb9
 8013c6c:	5c9a      	ldrb	r2, [r3, r2]
 8013c6e:	187b      	adds	r3, r7, r1
 8013c70:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 8013c72:	4b0c      	ldr	r3, [pc, #48]	; (8013ca4 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013c74:	4a0d      	ldr	r2, [pc, #52]	; (8013cac <LoRaMacMibSetRequestConfirm+0x334>)
 8013c76:	589b      	ldr	r3, [r3, r2]
 8013c78:	781b      	ldrb	r3, [r3, #0]
 8013c7a:	1879      	adds	r1, r7, r1
 8013c7c:	2207      	movs	r2, #7
 8013c7e:	0018      	movs	r0, r3
 8013c80:	f003 f822 	bl	8016cc8 <RegionVerify>
 8013c84:	1e03      	subs	r3, r0, #0
 8013c86:	d008      	beq.n	8013c9a <LoRaMacMibSetRequestConfirm+0x322>
            {
                MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8013c88:	4b06      	ldr	r3, [pc, #24]	; (8013ca4 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013c8a:	4a08      	ldr	r2, [pc, #32]	; (8013cac <LoRaMacMibSetRequestConfirm+0x334>)
 8013c8c:	589b      	ldr	r3, [r3, r2]
 8013c8e:	687a      	ldr	r2, [r7, #4]
 8013c90:	3328      	adds	r3, #40	; 0x28
 8013c92:	3204      	adds	r2, #4
 8013c94:	ca03      	ldmia	r2!, {r0, r1}
 8013c96:	c303      	stmia	r3!, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013c98:	e1e9      	b.n	801406e <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013c9a:	2317      	movs	r3, #23
 8013c9c:	18fb      	adds	r3, r7, r3
 8013c9e:	2203      	movs	r2, #3
 8013ca0:	701a      	strb	r2, [r3, #0]
            break;
 8013ca2:	e1e4      	b.n	801406e <LoRaMacMibSetRequestConfirm+0x6f6>
 8013ca4:	200005b8 	.word	0x200005b8
 8013ca8:	0801f9ac 	.word	0x0801f9ac
 8013cac:	00000484 	.word	0x00000484
 8013cb0:	0801fd54 	.word	0x0801fd54
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	7a1b      	ldrb	r3, [r3, #8]
 8013cb8:	b25a      	sxtb	r2, r3
 8013cba:	2108      	movs	r1, #8
 8013cbc:	187b      	adds	r3, r7, r1
 8013cbe:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8013cc0:	4bda      	ldr	r3, [pc, #872]	; (801402c <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013cc2:	4adb      	ldr	r2, [pc, #876]	; (8014030 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013cc4:	589b      	ldr	r3, [r3, r2]
 8013cc6:	22b9      	movs	r2, #185	; 0xb9
 8013cc8:	5c9a      	ldrb	r2, [r3, r2]
 8013cca:	187b      	adds	r3, r7, r1
 8013ccc:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 8013cce:	4bd7      	ldr	r3, [pc, #860]	; (801402c <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013cd0:	4ad7      	ldr	r2, [pc, #860]	; (8014030 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013cd2:	589b      	ldr	r3, [r3, r2]
 8013cd4:	781b      	ldrb	r3, [r3, #0]
 8013cd6:	1879      	adds	r1, r7, r1
 8013cd8:	2207      	movs	r2, #7
 8013cda:	0018      	movs	r0, r3
 8013cdc:	f002 fff4 	bl	8016cc8 <RegionVerify>
 8013ce0:	1e03      	subs	r3, r0, #0
 8013ce2:	d01f      	beq.n	8013d24 <LoRaMacMibSetRequestConfirm+0x3ac>
            {
                MacCtx.NvmCtx->MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8013ce4:	4bd1      	ldr	r3, [pc, #836]	; (801402c <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013ce6:	4ad2      	ldr	r2, [pc, #840]	; (8014030 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013ce8:	589b      	ldr	r3, [r3, r2]
 8013cea:	21b0      	movs	r1, #176	; 0xb0
 8013cec:	687a      	ldr	r2, [r7, #4]
 8013cee:	185b      	adds	r3, r3, r1
 8013cf0:	3204      	adds	r2, #4
 8013cf2:	ca03      	ldmia	r2!, {r0, r1}
 8013cf4:	c303      	stmia	r3!, {r0, r1}

                if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) && ( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8013cf6:	4bcd      	ldr	r3, [pc, #820]	; (801402c <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013cf8:	4acd      	ldr	r2, [pc, #820]	; (8014030 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013cfa:	589b      	ldr	r3, [r3, r2]
 8013cfc:	227c      	movs	r2, #124	; 0x7c
 8013cfe:	5c9b      	ldrb	r3, [r3, r2]
 8013d00:	2b02      	cmp	r3, #2
 8013d02:	d000      	beq.n	8013d06 <LoRaMacMibSetRequestConfirm+0x38e>
 8013d04:	e1ac      	b.n	8014060 <LoRaMacMibSetRequestConfirm+0x6e8>
 8013d06:	4bc9      	ldr	r3, [pc, #804]	; (801402c <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013d08:	4ac9      	ldr	r2, [pc, #804]	; (8014030 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013d0a:	589a      	ldr	r2, [r3, r2]
 8013d0c:	23b2      	movs	r3, #178	; 0xb2
 8013d0e:	005b      	lsls	r3, r3, #1
 8013d10:	5cd3      	ldrb	r3, [r2, r3]
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d100      	bne.n	8013d18 <LoRaMacMibSetRequestConfirm+0x3a0>
 8013d16:	e1a3      	b.n	8014060 <LoRaMacMibSetRequestConfirm+0x6e8>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8013d18:	4bc6      	ldr	r3, [pc, #792]	; (8014034 <LoRaMacMibSetRequestConfirm+0x6bc>)
 8013d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d1c:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8013d1e:	f7fe fa33 	bl	8012188 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013d22:	e19d      	b.n	8014060 <LoRaMacMibSetRequestConfirm+0x6e8>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013d24:	2317      	movs	r3, #23
 8013d26:	18fb      	adds	r3, r7, r3
 8013d28:	2203      	movs	r2, #3
 8013d2a:	701a      	strb	r2, [r3, #0]
            break;
 8013d2c:	e198      	b.n	8014060 <LoRaMacMibSetRequestConfirm+0x6e8>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	7a1b      	ldrb	r3, [r3, #8]
 8013d32:	b25a      	sxtb	r2, r3
 8013d34:	2108      	movs	r1, #8
 8013d36:	187b      	adds	r3, r7, r1
 8013d38:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8013d3a:	4bbc      	ldr	r3, [pc, #752]	; (801402c <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013d3c:	4abc      	ldr	r2, [pc, #752]	; (8014030 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013d3e:	589b      	ldr	r3, [r3, r2]
 8013d40:	22b9      	movs	r2, #185	; 0xb9
 8013d42:	5c9a      	ldrb	r2, [r3, r2]
 8013d44:	187b      	adds	r3, r7, r1
 8013d46:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 8013d48:	4bb8      	ldr	r3, [pc, #736]	; (801402c <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013d4a:	4ab9      	ldr	r2, [pc, #740]	; (8014030 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013d4c:	589b      	ldr	r3, [r3, r2]
 8013d4e:	781b      	ldrb	r3, [r3, #0]
 8013d50:	1879      	adds	r1, r7, r1
 8013d52:	2207      	movs	r2, #7
 8013d54:	0018      	movs	r0, r3
 8013d56:	f002 ffb7 	bl	8016cc8 <RegionVerify>
 8013d5a:	1e03      	subs	r3, r0, #0
 8013d5c:	d008      	beq.n	8013d70 <LoRaMacMibSetRequestConfirm+0x3f8>
            {
                MacCtx.NvmCtx->MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8013d5e:	4bb3      	ldr	r3, [pc, #716]	; (801402c <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013d60:	4ab3      	ldr	r2, [pc, #716]	; (8014030 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013d62:	589b      	ldr	r3, [r3, r2]
 8013d64:	687a      	ldr	r2, [r7, #4]
 8013d66:	3330      	adds	r3, #48	; 0x30
 8013d68:	3204      	adds	r2, #4
 8013d6a:	ca03      	ldmia	r2!, {r0, r1}
 8013d6c:	c303      	stmia	r3!, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013d6e:	e17e      	b.n	801406e <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013d70:	2317      	movs	r3, #23
 8013d72:	18fb      	adds	r3, r7, r3
 8013d74:	2203      	movs	r2, #3
 8013d76:	701a      	strb	r2, [r3, #0]
            break;
 8013d78:	e179      	b.n	801406e <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	685a      	ldr	r2, [r3, #4]
 8013d7e:	210c      	movs	r1, #12
 8013d80:	187b      	adds	r3, r7, r1
 8013d82:	601a      	str	r2, [r3, #0]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8013d84:	187b      	adds	r3, r7, r1
 8013d86:	2201      	movs	r2, #1
 8013d88:	711a      	strb	r2, [r3, #4]

            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
 8013d8a:	4ba8      	ldr	r3, [pc, #672]	; (801402c <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013d8c:	4aa8      	ldr	r2, [pc, #672]	; (8014030 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013d8e:	589b      	ldr	r3, [r3, r2]
 8013d90:	781b      	ldrb	r3, [r3, #0]
 8013d92:	187a      	adds	r2, r7, r1
 8013d94:	0011      	movs	r1, r2
 8013d96:	0018      	movs	r0, r3
 8013d98:	f002 ffc8 	bl	8016d2c <RegionChanMaskSet>
 8013d9c:	0003      	movs	r3, r0
 8013d9e:	001a      	movs	r2, r3
 8013da0:	2301      	movs	r3, #1
 8013da2:	4053      	eors	r3, r2
 8013da4:	b2db      	uxtb	r3, r3
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d100      	bne.n	8013dac <LoRaMacMibSetRequestConfirm+0x434>
 8013daa:	e15b      	b.n	8014064 <LoRaMacMibSetRequestConfirm+0x6ec>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013dac:	2317      	movs	r3, #23
 8013dae:	18fb      	adds	r3, r7, r3
 8013db0:	2203      	movs	r2, #3
 8013db2:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013db4:	e156      	b.n	8014064 <LoRaMacMibSetRequestConfirm+0x6ec>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	685a      	ldr	r2, [r3, #4]
 8013dba:	210c      	movs	r1, #12
 8013dbc:	187b      	adds	r3, r7, r1
 8013dbe:	601a      	str	r2, [r3, #0]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8013dc0:	187b      	adds	r3, r7, r1
 8013dc2:	2200      	movs	r2, #0
 8013dc4:	711a      	strb	r2, [r3, #4]

            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
 8013dc6:	4b99      	ldr	r3, [pc, #612]	; (801402c <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013dc8:	4a99      	ldr	r2, [pc, #612]	; (8014030 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013dca:	589b      	ldr	r3, [r3, r2]
 8013dcc:	781b      	ldrb	r3, [r3, #0]
 8013dce:	187a      	adds	r2, r7, r1
 8013dd0:	0011      	movs	r1, r2
 8013dd2:	0018      	movs	r0, r3
 8013dd4:	f002 ffaa 	bl	8016d2c <RegionChanMaskSet>
 8013dd8:	0003      	movs	r3, r0
 8013dda:	001a      	movs	r2, r3
 8013ddc:	2301      	movs	r3, #1
 8013dde:	4053      	eors	r3, r2
 8013de0:	b2db      	uxtb	r3, r3
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d100      	bne.n	8013de8 <LoRaMacMibSetRequestConfirm+0x470>
 8013de6:	e13f      	b.n	8014068 <LoRaMacMibSetRequestConfirm+0x6f0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013de8:	2317      	movs	r3, #23
 8013dea:	18fb      	adds	r3, r7, r3
 8013dec:	2203      	movs	r2, #3
 8013dee:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013df0:	e13a      	b.n	8014068 <LoRaMacMibSetRequestConfirm+0x6f0>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	791b      	ldrb	r3, [r3, #4]
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	d00b      	beq.n	8013e12 <LoRaMacMibSetRequestConfirm+0x49a>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8013dfe:	2b0f      	cmp	r3, #15
 8013e00:	d807      	bhi.n	8013e12 <LoRaMacMibSetRequestConfirm+0x49a>
            {
                MacCtx.NvmCtx->MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8013e02:	4b8a      	ldr	r3, [pc, #552]	; (801402c <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013e04:	4a8a      	ldr	r2, [pc, #552]	; (8014030 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013e06:	589b      	ldr	r3, [r3, r2]
 8013e08:	687a      	ldr	r2, [r7, #4]
 8013e0a:	7911      	ldrb	r1, [r2, #4]
 8013e0c:	22a4      	movs	r2, #164	; 0xa4
 8013e0e:	5499      	strb	r1, [r3, r2]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013e10:	e12d      	b.n	801406e <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013e12:	2317      	movs	r3, #23
 8013e14:	18fb      	adds	r3, r7, r3
 8013e16:	2203      	movs	r2, #3
 8013e18:	701a      	strb	r2, [r3, #0]
            break;
 8013e1a:	e128      	b.n	801406e <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            MacCtx.NvmCtx->MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8013e1c:	4b83      	ldr	r3, [pc, #524]	; (801402c <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013e1e:	4a84      	ldr	r2, [pc, #528]	; (8014030 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013e20:	589a      	ldr	r2, [r3, r2]
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	685b      	ldr	r3, [r3, #4]
 8013e26:	2190      	movs	r1, #144	; 0x90
 8013e28:	5053      	str	r3, [r2, r1]
            break;
 8013e2a:	e120      	b.n	801406e <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            MacCtx.NvmCtx->MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8013e2c:	4b7f      	ldr	r3, [pc, #508]	; (801402c <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013e2e:	4a80      	ldr	r2, [pc, #512]	; (8014030 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013e30:	589a      	ldr	r2, [r3, r2]
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	685b      	ldr	r3, [r3, #4]
 8013e36:	2194      	movs	r1, #148	; 0x94
 8013e38:	5053      	str	r3, [r2, r1]
            break;
 8013e3a:	e118      	b.n	801406e <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            MacCtx.NvmCtx->MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8013e3c:	4b7b      	ldr	r3, [pc, #492]	; (801402c <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013e3e:	4a7c      	ldr	r2, [pc, #496]	; (8014030 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013e40:	589a      	ldr	r2, [r3, r2]
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	685b      	ldr	r3, [r3, #4]
 8013e46:	2198      	movs	r1, #152	; 0x98
 8013e48:	5053      	str	r3, [r2, r1]
            break;
 8013e4a:	e110      	b.n	801406e <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8013e4c:	4b77      	ldr	r3, [pc, #476]	; (801402c <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013e4e:	4a78      	ldr	r2, [pc, #480]	; (8014030 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013e50:	589a      	ldr	r2, [r3, r2]
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	685b      	ldr	r3, [r3, #4]
 8013e56:	219c      	movs	r1, #156	; 0x9c
 8013e58:	5053      	str	r3, [r2, r1]
            break;
 8013e5a:	e108      	b.n	801406e <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8013e5c:	4b73      	ldr	r3, [pc, #460]	; (801402c <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013e5e:	4a74      	ldr	r2, [pc, #464]	; (8014030 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013e60:	589a      	ldr	r2, [r3, r2]
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	685b      	ldr	r3, [r3, #4]
 8013e66:	21a0      	movs	r1, #160	; 0xa0
 8013e68:	5053      	str	r3, [r2, r1]
            break;
 8013e6a:	e100      	b.n	801406e <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	2204      	movs	r2, #4
 8013e70:	569a      	ldrsb	r2, [r3, r2]
 8013e72:	2408      	movs	r4, #8
 8013e74:	193b      	adds	r3, r7, r4
 8013e76:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_DR ) == true )
 8013e78:	4b6c      	ldr	r3, [pc, #432]	; (801402c <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013e7a:	4a6d      	ldr	r2, [pc, #436]	; (8014030 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013e7c:	589b      	ldr	r3, [r3, r2]
 8013e7e:	781b      	ldrb	r3, [r3, #0]
 8013e80:	1939      	adds	r1, r7, r4
 8013e82:	2206      	movs	r2, #6
 8013e84:	0018      	movs	r0, r3
 8013e86:	f002 ff1f 	bl	8016cc8 <RegionVerify>
 8013e8a:	1e03      	subs	r3, r0, #0
 8013e8c:	d007      	beq.n	8013e9e <LoRaMacMibSetRequestConfirm+0x526>
            {
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = verify.DatarateParams.Datarate;
 8013e8e:	4b67      	ldr	r3, [pc, #412]	; (801402c <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013e90:	4a67      	ldr	r2, [pc, #412]	; (8014030 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013e92:	589b      	ldr	r3, [r3, r2]
 8013e94:	193a      	adds	r2, r7, r4
 8013e96:	7812      	ldrb	r2, [r2, #0]
 8013e98:	b252      	sxtb	r2, r2
 8013e9a:	715a      	strb	r2, [r3, #5]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013e9c:	e0e7      	b.n	801406e <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013e9e:	2317      	movs	r3, #23
 8013ea0:	18fb      	adds	r3, r7, r3
 8013ea2:	2203      	movs	r2, #3
 8013ea4:	701a      	strb	r2, [r3, #0]
            break;
 8013ea6:	e0e2      	b.n	801406e <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	2204      	movs	r2, #4
 8013eac:	569a      	ldrsb	r2, [r3, r2]
 8013eae:	2408      	movs	r4, #8
 8013eb0:	193b      	adds	r3, r7, r4
 8013eb2:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8013eb4:	4b5d      	ldr	r3, [pc, #372]	; (801402c <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013eb6:	4a5e      	ldr	r2, [pc, #376]	; (8014030 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013eb8:	589b      	ldr	r3, [r3, r2]
 8013eba:	22b8      	movs	r2, #184	; 0xb8
 8013ebc:	5c9a      	ldrb	r2, [r3, r2]
 8013ebe:	193b      	adds	r3, r7, r4
 8013ec0:	709a      	strb	r2, [r3, #2]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 8013ec2:	4b5a      	ldr	r3, [pc, #360]	; (801402c <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013ec4:	4a5a      	ldr	r2, [pc, #360]	; (8014030 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013ec6:	589b      	ldr	r3, [r3, r2]
 8013ec8:	781b      	ldrb	r3, [r3, #0]
 8013eca:	1939      	adds	r1, r7, r4
 8013ecc:	2205      	movs	r2, #5
 8013ece:	0018      	movs	r0, r3
 8013ed0:	f002 fefa 	bl	8016cc8 <RegionVerify>
 8013ed4:	1e03      	subs	r3, r0, #0
 8013ed6:	d008      	beq.n	8013eea <LoRaMacMibSetRequestConfirm+0x572>
            {
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 8013ed8:	4b54      	ldr	r3, [pc, #336]	; (801402c <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013eda:	4a55      	ldr	r2, [pc, #340]	; (8014030 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013edc:	589b      	ldr	r3, [r3, r2]
 8013ede:	193a      	adds	r2, r7, r4
 8013ee0:	2100      	movs	r1, #0
 8013ee2:	5651      	ldrsb	r1, [r2, r1]
 8013ee4:	2285      	movs	r2, #133	; 0x85
 8013ee6:	5499      	strb	r1, [r3, r2]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013ee8:	e0c1      	b.n	801406e <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013eea:	2317      	movs	r3, #23
 8013eec:	18fb      	adds	r3, r7, r3
 8013eee:	2203      	movs	r2, #3
 8013ef0:	701a      	strb	r2, [r3, #0]
            break;
 8013ef2:	e0bc      	b.n	801406e <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	2204      	movs	r2, #4
 8013ef8:	569a      	ldrsb	r2, [r3, r2]
 8013efa:	2408      	movs	r4, #8
 8013efc:	193b      	adds	r3, r7, r4
 8013efe:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_POWER ) == true )
 8013f00:	4b4a      	ldr	r3, [pc, #296]	; (801402c <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013f02:	4a4b      	ldr	r2, [pc, #300]	; (8014030 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013f04:	589b      	ldr	r3, [r3, r2]
 8013f06:	781b      	ldrb	r3, [r3, #0]
 8013f08:	1939      	adds	r1, r7, r4
 8013f0a:	220a      	movs	r2, #10
 8013f0c:	0018      	movs	r0, r3
 8013f0e:	f002 fedb 	bl	8016cc8 <RegionVerify>
 8013f12:	1e03      	subs	r3, r0, #0
 8013f14:	d007      	beq.n	8013f26 <LoRaMacMibSetRequestConfirm+0x5ae>
            {
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = verify.TxPower;
 8013f16:	4b45      	ldr	r3, [pc, #276]	; (801402c <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013f18:	4a45      	ldr	r2, [pc, #276]	; (8014030 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013f1a:	589b      	ldr	r3, [r3, r2]
 8013f1c:	193a      	adds	r2, r7, r4
 8013f1e:	7812      	ldrb	r2, [r2, #0]
 8013f20:	b252      	sxtb	r2, r2
 8013f22:	711a      	strb	r2, [r3, #4]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013f24:	e0a3      	b.n	801406e <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013f26:	2317      	movs	r3, #23
 8013f28:	18fb      	adds	r3, r7, r3
 8013f2a:	2203      	movs	r2, #3
 8013f2c:	701a      	strb	r2, [r3, #0]
            break;
 8013f2e:	e09e      	b.n	801406e <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	2204      	movs	r2, #4
 8013f34:	569a      	ldrsb	r2, [r3, r2]
 8013f36:	2408      	movs	r4, #8
 8013f38:	193b      	adds	r3, r7, r4
 8013f3a:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_POWER ) == true )
 8013f3c:	4b3b      	ldr	r3, [pc, #236]	; (801402c <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013f3e:	4a3c      	ldr	r2, [pc, #240]	; (8014030 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013f40:	589b      	ldr	r3, [r3, r2]
 8013f42:	781b      	ldrb	r3, [r3, #0]
 8013f44:	1939      	adds	r1, r7, r4
 8013f46:	2209      	movs	r2, #9
 8013f48:	0018      	movs	r0, r3
 8013f4a:	f002 febd 	bl	8016cc8 <RegionVerify>
 8013f4e:	1e03      	subs	r3, r0, #0
 8013f50:	d008      	beq.n	8013f64 <LoRaMacMibSetRequestConfirm+0x5ec>
            {
                MacCtx.NvmCtx->MacParams.ChannelsTxPower = verify.TxPower;
 8013f52:	4b36      	ldr	r3, [pc, #216]	; (801402c <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013f54:	4a36      	ldr	r2, [pc, #216]	; (8014030 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013f56:	589b      	ldr	r3, [r3, r2]
 8013f58:	193a      	adds	r2, r7, r4
 8013f5a:	2100      	movs	r1, #0
 8013f5c:	5651      	ldrsb	r1, [r2, r1]
 8013f5e:	2284      	movs	r2, #132	; 0x84
 8013f60:	5499      	strb	r1, [r3, r2]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013f62:	e084      	b.n	801406e <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013f64:	2317      	movs	r3, #23
 8013f66:	18fb      	adds	r3, r7, r3
 8013f68:	2203      	movs	r2, #3
 8013f6a:	701a      	strb	r2, [r3, #0]
            break;
 8013f6c:	e07f      	b.n	801406e <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8013f6e:	4b2f      	ldr	r3, [pc, #188]	; (801402c <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013f70:	4a2f      	ldr	r2, [pc, #188]	; (8014030 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013f72:	589b      	ldr	r3, [r3, r2]
 8013f74:	687a      	ldr	r2, [r7, #4]
 8013f76:	6852      	ldr	r2, [r2, #4]
 8013f78:	609a      	str	r2, [r3, #8]
 8013f7a:	4a2c      	ldr	r2, [pc, #176]	; (801402c <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013f7c:	492c      	ldr	r1, [pc, #176]	; (8014030 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013f7e:	5852      	ldr	r2, [r2, r1]
 8013f80:	689b      	ldr	r3, [r3, #8]
 8013f82:	2188      	movs	r1, #136	; 0x88
 8013f84:	5053      	str	r3, [r2, r1]
            break;
 8013f86:	e072      	b.n	801406e <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8013f88:	4b28      	ldr	r3, [pc, #160]	; (801402c <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013f8a:	4a29      	ldr	r2, [pc, #164]	; (8014030 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013f8c:	589b      	ldr	r3, [r3, r2]
 8013f8e:	687a      	ldr	r2, [r7, #4]
 8013f90:	7912      	ldrb	r2, [r2, #4]
 8013f92:	731a      	strb	r2, [r3, #12]
 8013f94:	4a25      	ldr	r2, [pc, #148]	; (801402c <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013f96:	4926      	ldr	r1, [pc, #152]	; (8014030 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013f98:	5852      	ldr	r2, [r2, r1]
 8013f9a:	7b19      	ldrb	r1, [r3, #12]
 8013f9c:	238c      	movs	r3, #140	; 0x8c
 8013f9e:	54d1      	strb	r1, [r2, r3]
            break;
 8013fa0:	e065      	b.n	801406e <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_ANTENNA_GAIN:
        {
            MacCtx.NvmCtx->MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8013fa2:	4b22      	ldr	r3, [pc, #136]	; (801402c <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013fa4:	4a22      	ldr	r2, [pc, #136]	; (8014030 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013fa6:	589a      	ldr	r2, [r3, r2]
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	685b      	ldr	r3, [r3, #4]
 8013fac:	21c0      	movs	r1, #192	; 0xc0
 8013fae:	5053      	str	r3, [r2, r1]
            break;
 8013fb0:	e05d      	b.n	801406e <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8013fb2:	4b1e      	ldr	r3, [pc, #120]	; (801402c <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013fb4:	4a1e      	ldr	r2, [pc, #120]	; (8014030 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013fb6:	589b      	ldr	r3, [r3, r2]
 8013fb8:	687a      	ldr	r2, [r7, #4]
 8013fba:	6852      	ldr	r2, [r2, #4]
 8013fbc:	641a      	str	r2, [r3, #64]	; 0x40
            break;
 8013fbe:	e056      	b.n	801406e <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_NVM_CTXS:
        {
            if( mibSet->Param.Contexts != 0 )
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	685b      	ldr	r3, [r3, #4]
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	d009      	beq.n	8013fdc <LoRaMacMibSetRequestConfirm+0x664>
            {
                status = RestoreCtxs( mibSet->Param.Contexts );
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	685b      	ldr	r3, [r3, #4]
 8013fcc:	2217      	movs	r2, #23
 8013fce:	18bc      	adds	r4, r7, r2
 8013fd0:	0018      	movs	r0, r3
 8013fd2:	f7fe fc1b 	bl	801280c <RestoreCtxs>
 8013fd6:	0003      	movs	r3, r0
 8013fd8:	7023      	strb	r3, [r4, #0]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013fda:	e048      	b.n	801406e <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013fdc:	2317      	movs	r3, #23
 8013fde:	18fb      	adds	r3, r7, r3
 8013fe0:	2203      	movs	r2, #3
 8013fe2:	701a      	strb	r2, [r3, #0]
            break;
 8013fe4:	e043      	b.n	801406e <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	799b      	ldrb	r3, [r3, #6]
 8013fea:	2b01      	cmp	r3, #1
 8013fec:	d810      	bhi.n	8014010 <LoRaMacMibSetRequestConfirm+0x698>
            {
                MacCtx.NvmCtx->Version = mibSet->Param.AbpLrWanVersion;
 8013fee:	4b0f      	ldr	r3, [pc, #60]	; (801402c <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013ff0:	4a0f      	ldr	r2, [pc, #60]	; (8014030 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013ff2:	5899      	ldr	r1, [r3, r2]
 8013ff4:	23b0      	movs	r3, #176	; 0xb0
 8013ff6:	005a      	lsls	r2, r3, #1
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	685b      	ldr	r3, [r3, #4]
 8013ffc:	508b      	str	r3, [r1, r2]

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	685b      	ldr	r3, [r3, #4]
 8014002:	0018      	movs	r0, r3
 8014004:	f001 fe3a 	bl	8015c7c <LoRaMacCryptoSetLrWanVersion>
 8014008:	1e03      	subs	r3, r0, #0
 801400a:	d02f      	beq.n	801406c <LoRaMacMibSetRequestConfirm+0x6f4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801400c:	2311      	movs	r3, #17
 801400e:	e035      	b.n	801407c <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014010:	2317      	movs	r3, #23
 8014012:	18fb      	adds	r3, r7, r3
 8014014:	2203      	movs	r2, #3
 8014016:	701a      	strb	r2, [r3, #0]
            }
            break;
 8014018:	e028      	b.n	801406c <LoRaMacMibSetRequestConfirm+0x6f4>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 801401a:	2317      	movs	r3, #23
 801401c:	18fc      	adds	r4, r7, r3
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	0018      	movs	r0, r3
 8014022:	f000 fc8f 	bl	8014944 <LoRaMacMibClassBSetRequestConfirm>
 8014026:	0003      	movs	r3, r0
 8014028:	7023      	strb	r3, [r4, #0]
            break;
 801402a:	e020      	b.n	801406e <LoRaMacMibSetRequestConfirm+0x6f6>
 801402c:	200005b8 	.word	0x200005b8
 8014030:	00000484 	.word	0x00000484
 8014034:	0801fd54 	.word	0x0801fd54
            break;
 8014038:	46c0      	nop			; (mov r8, r8)
 801403a:	e018      	b.n	801406e <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 801403c:	46c0      	nop			; (mov r8, r8)
 801403e:	e016      	b.n	801406e <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8014040:	46c0      	nop			; (mov r8, r8)
 8014042:	e014      	b.n	801406e <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8014044:	46c0      	nop			; (mov r8, r8)
 8014046:	e012      	b.n	801406e <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8014048:	46c0      	nop			; (mov r8, r8)
 801404a:	e010      	b.n	801406e <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 801404c:	46c0      	nop			; (mov r8, r8)
 801404e:	e00e      	b.n	801406e <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8014050:	46c0      	nop			; (mov r8, r8)
 8014052:	e00c      	b.n	801406e <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8014054:	46c0      	nop			; (mov r8, r8)
 8014056:	e00a      	b.n	801406e <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8014058:	46c0      	nop			; (mov r8, r8)
 801405a:	e008      	b.n	801406e <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 801405c:	46c0      	nop			; (mov r8, r8)
 801405e:	e006      	b.n	801406e <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8014060:	46c0      	nop			; (mov r8, r8)
 8014062:	e004      	b.n	801406e <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8014064:	46c0      	nop			; (mov r8, r8)
 8014066:	e002      	b.n	801406e <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8014068:	46c0      	nop			; (mov r8, r8)
 801406a:	e000      	b.n	801406e <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 801406c:	46c0      	nop			; (mov r8, r8)
        }
    }
    EventRegionNvmCtxChanged( );
 801406e:	f7fe fe19 	bl	8012ca4 <EventRegionNvmCtxChanged>
    EventMacNvmCtxChanged( );
 8014072:	f7fe fe0f 	bl	8012c94 <EventMacNvmCtxChanged>
    return status;
 8014076:	2317      	movs	r3, #23
 8014078:	18fb      	adds	r3, r7, r3
 801407a:	781b      	ldrb	r3, [r3, #0]
}
 801407c:	0018      	movs	r0, r3
 801407e:	46bd      	mov	sp, r7
 8014080:	b007      	add	sp, #28
 8014082:	bd90      	pop	{r4, r7, pc}

08014084 <LoRaMacMlmeRequest>:
    EventRegionNvmCtxChanged( );
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8014084:	b5b0      	push	{r4, r5, r7, lr}
 8014086:	b086      	sub	sp, #24
 8014088:	af00      	add	r7, sp, #0
 801408a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 801408c:	2317      	movs	r3, #23
 801408e:	18fb      	adds	r3, r7, r3
 8014090:	2202      	movs	r2, #2
 8014092:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8014094:	230c      	movs	r3, #12
 8014096:	18fb      	adds	r3, r7, r3
 8014098:	2200      	movs	r2, #0
 801409a:	801a      	strh	r2, [r3, #0]

    if( mlmeRequest == NULL )
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	2b00      	cmp	r3, #0
 80140a0:	d101      	bne.n	80140a6 <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80140a2:	2303      	movs	r3, #3
 80140a4:	e133      	b.n	801430e <LoRaMacMlmeRequest+0x28a>
    }
    if( LoRaMacIsBusy( ) == true )
 80140a6:	f7fe fe49 	bl	8012d3c <LoRaMacIsBusy>
 80140aa:	1e03      	subs	r3, r0, #0
 80140ac:	d001      	beq.n	80140b2 <LoRaMacMlmeRequest+0x2e>
    {
        return LORAMAC_STATUS_BUSY;
 80140ae:	2301      	movs	r3, #1
 80140b0:	e12d      	b.n	801430e <LoRaMacMlmeRequest+0x28a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 80140b2:	f001 fa0b 	bl	80154cc <LoRaMacConfirmQueueIsFull>
 80140b6:	1e03      	subs	r3, r0, #0
 80140b8:	d001      	beq.n	80140be <LoRaMacMlmeRequest+0x3a>
    {
        return LORAMAC_STATUS_BUSY;
 80140ba:	2301      	movs	r3, #1
 80140bc:	e127      	b.n	801430e <LoRaMacMlmeRequest+0x28a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 80140be:	f001 f9fb 	bl	80154b8 <LoRaMacConfirmQueueGetCnt>
 80140c2:	1e03      	subs	r3, r0, #0
 80140c4:	d105      	bne.n	80140d2 <LoRaMacMlmeRequest+0x4e>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 80140c6:	4b94      	ldr	r3, [pc, #592]	; (8014318 <LoRaMacMlmeRequest+0x294>)
 80140c8:	2214      	movs	r2, #20
 80140ca:	2100      	movs	r1, #0
 80140cc:	0018      	movs	r0, r3
 80140ce:	f005 fa51 	bl	8019574 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80140d2:	4b92      	ldr	r3, [pc, #584]	; (801431c <LoRaMacMlmeRequest+0x298>)
 80140d4:	4a92      	ldr	r2, [pc, #584]	; (8014320 <LoRaMacMlmeRequest+0x29c>)
 80140d6:	2101      	movs	r1, #1
 80140d8:	5499      	strb	r1, [r3, r2]

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 80140da:	4b90      	ldr	r3, [pc, #576]	; (801431c <LoRaMacMlmeRequest+0x298>)
 80140dc:	4a91      	ldr	r2, [pc, #580]	; (8014324 <LoRaMacMlmeRequest+0x2a0>)
 80140de:	5c99      	ldrb	r1, [r3, r2]
 80140e0:	2004      	movs	r0, #4
 80140e2:	4301      	orrs	r1, r0
 80140e4:	5499      	strb	r1, [r3, r2]
    queueElement.Request = mlmeRequest->Type;
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	781a      	ldrb	r2, [r3, #0]
 80140ea:	2110      	movs	r1, #16
 80140ec:	187b      	adds	r3, r7, r1
 80140ee:	701a      	strb	r2, [r3, #0]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80140f0:	187b      	adds	r3, r7, r1
 80140f2:	2201      	movs	r2, #1
 80140f4:	705a      	strb	r2, [r3, #1]
    queueElement.RestrictCommonReadyToHandle = false;
 80140f6:	187b      	adds	r3, r7, r1
 80140f8:	2200      	movs	r2, #0
 80140fa:	70da      	strb	r2, [r3, #3]

    switch( mlmeRequest->Type )
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	781b      	ldrb	r3, [r3, #0]
 8014100:	2b0e      	cmp	r3, #14
 8014102:	d900      	bls.n	8014106 <LoRaMacMlmeRequest+0x82>
 8014104:	e0d4      	b.n	80142b0 <LoRaMacMlmeRequest+0x22c>
 8014106:	009a      	lsls	r2, r3, #2
 8014108:	4b87      	ldr	r3, [pc, #540]	; (8014328 <LoRaMacMlmeRequest+0x2a4>)
 801410a:	18d3      	adds	r3, r2, r3
 801410c:	681b      	ldr	r3, [r3, #0]
 801410e:	469f      	mov	pc, r3
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8014110:	4a82      	ldr	r2, [pc, #520]	; (801431c <LoRaMacMlmeRequest+0x298>)
 8014112:	23d0      	movs	r3, #208	; 0xd0
 8014114:	009b      	lsls	r3, r3, #2
 8014116:	58d3      	ldr	r3, [r2, r3]
 8014118:	2220      	movs	r2, #32
 801411a:	4013      	ands	r3, r2
 801411c:	d001      	beq.n	8014122 <LoRaMacMlmeRequest+0x9e>
            {
                return LORAMAC_STATUS_BUSY;
 801411e:	2301      	movs	r3, #1
 8014120:	e0f5      	b.n	801430e <LoRaMacMlmeRequest+0x28a>
            }

            ResetMacParameters( );
 8014122:	f7fd feff 	bl	8011f24 <ResetMacParameters>

            MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8014126:	4b7d      	ldr	r3, [pc, #500]	; (801431c <LoRaMacMlmeRequest+0x298>)
 8014128:	4a80      	ldr	r2, [pc, #512]	; (801432c <LoRaMacMlmeRequest+0x2a8>)
 801412a:	589b      	ldr	r3, [r3, r2]
 801412c:	7818      	ldrb	r0, [r3, #0]
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	791b      	ldrb	r3, [r3, #4]
 8014132:	b259      	sxtb	r1, r3
 8014134:	4b79      	ldr	r3, [pc, #484]	; (801431c <LoRaMacMlmeRequest+0x298>)
 8014136:	4a7d      	ldr	r2, [pc, #500]	; (801432c <LoRaMacMlmeRequest+0x2a8>)
 8014138:	589c      	ldr	r4, [r3, r2]
 801413a:	2200      	movs	r2, #0
 801413c:	f002 fedb 	bl	8016ef6 <RegionAlternateDr>
 8014140:	0003      	movs	r3, r0
 8014142:	001a      	movs	r2, r3
 8014144:	2385      	movs	r3, #133	; 0x85
 8014146:	54e2      	strb	r2, [r4, r3]

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8014148:	2310      	movs	r3, #16
 801414a:	18fb      	adds	r3, r7, r3
 801414c:	2207      	movs	r2, #7
 801414e:	705a      	strb	r2, [r3, #1]

            status = SendReJoinReq( JOIN_REQ ); // попытка без реконекта
 8014150:	2517      	movs	r5, #23
 8014152:	197c      	adds	r4, r7, r5
 8014154:	20ff      	movs	r0, #255	; 0xff
 8014156:	f7fd fbab 	bl	80118b0 <SendReJoinReq>
 801415a:	0003      	movs	r3, r0
 801415c:	7023      	strb	r3, [r4, #0]

            if( status != LORAMAC_STATUS_OK )
 801415e:	197b      	adds	r3, r7, r5
 8014160:	781b      	ldrb	r3, [r3, #0]
 8014162:	2b00      	cmp	r3, #0
 8014164:	d100      	bne.n	8014168 <LoRaMacMlmeRequest+0xe4>
 8014166:	e0a5      	b.n	80142b4 <LoRaMacMlmeRequest+0x230>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8014168:	4b6c      	ldr	r3, [pc, #432]	; (801431c <LoRaMacMlmeRequest+0x298>)
 801416a:	4a70      	ldr	r2, [pc, #448]	; (801432c <LoRaMacMlmeRequest+0x2a8>)
 801416c:	589b      	ldr	r3, [r3, r2]
 801416e:	7818      	ldrb	r0, [r3, #0]
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	791b      	ldrb	r3, [r3, #4]
 8014174:	b259      	sxtb	r1, r3
 8014176:	4b69      	ldr	r3, [pc, #420]	; (801431c <LoRaMacMlmeRequest+0x298>)
 8014178:	4a6c      	ldr	r2, [pc, #432]	; (801432c <LoRaMacMlmeRequest+0x2a8>)
 801417a:	589c      	ldr	r4, [r3, r2]
 801417c:	2201      	movs	r2, #1
 801417e:	f002 feba 	bl	8016ef6 <RegionAlternateDr>
 8014182:	0003      	movs	r3, r0
 8014184:	001a      	movs	r2, r3
 8014186:	2385      	movs	r3, #133	; 0x85
 8014188:	54e2      	strb	r2, [r4, r3]
            }
            break;
 801418a:	e093      	b.n	80142b4 <LoRaMacMlmeRequest+0x230>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 801418c:	2417      	movs	r4, #23
 801418e:	193b      	adds	r3, r7, r4
 8014190:	2200      	movs	r2, #0
 8014192:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8014194:	230c      	movs	r3, #12
 8014196:	18fb      	adds	r3, r7, r3
 8014198:	2200      	movs	r2, #0
 801419a:	0019      	movs	r1, r3
 801419c:	2002      	movs	r0, #2
 801419e:	f000 fd7d 	bl	8014c9c <LoRaMacCommandsAddCmd>
 80141a2:	1e03      	subs	r3, r0, #0
 80141a4:	d100      	bne.n	80141a8 <LoRaMacMlmeRequest+0x124>
 80141a6:	e087      	b.n	80142b8 <LoRaMacMlmeRequest+0x234>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80141a8:	193b      	adds	r3, r7, r4
 80141aa:	2213      	movs	r2, #19
 80141ac:	701a      	strb	r2, [r3, #0]
            }
            break;
 80141ae:	e083      	b.n	80142b8 <LoRaMacMlmeRequest+0x234>
        }
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	889b      	ldrh	r3, [r3, #4]
 80141b4:	2217      	movs	r2, #23
 80141b6:	18bc      	adds	r4, r7, r2
 80141b8:	0018      	movs	r0, r3
 80141ba:	f7fe fa5d 	bl	8012678 <SetTxContinuousWave>
 80141be:	0003      	movs	r3, r0
 80141c0:	7023      	strb	r3, [r4, #0]
            break;
 80141c2:	e080      	b.n	80142c6 <LoRaMacMlmeRequest+0x242>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	8898      	ldrh	r0, [r3, #4]
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	6899      	ldr	r1, [r3, #8]
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	7b1b      	ldrb	r3, [r3, #12]
 80141d0:	2217      	movs	r2, #23
 80141d2:	18bc      	adds	r4, r7, r2
 80141d4:	001a      	movs	r2, r3
 80141d6:	f7fe fa9b 	bl	8012710 <SetTxContinuousWave1>
 80141da:	0003      	movs	r3, r0
 80141dc:	7023      	strb	r3, [r4, #0]
            break;
 80141de:	e072      	b.n	80142c6 <LoRaMacMlmeRequest+0x242>
        }
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80141e0:	2417      	movs	r4, #23
 80141e2:	193b      	adds	r3, r7, r4
 80141e4:	2200      	movs	r2, #0
 80141e6:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80141e8:	230c      	movs	r3, #12
 80141ea:	18fb      	adds	r3, r7, r3
 80141ec:	2200      	movs	r2, #0
 80141ee:	0019      	movs	r1, r3
 80141f0:	200d      	movs	r0, #13
 80141f2:	f000 fd53 	bl	8014c9c <LoRaMacCommandsAddCmd>
 80141f6:	1e03      	subs	r3, r0, #0
 80141f8:	d060      	beq.n	80142bc <LoRaMacMlmeRequest+0x238>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80141fa:	193b      	adds	r3, r7, r4
 80141fc:	2213      	movs	r2, #19
 80141fe:	701a      	strb	r2, [r3, #0]
            }
            break;
 8014200:	e05c      	b.n	80142bc <LoRaMacMlmeRequest+0x238>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 8014202:	4b46      	ldr	r3, [pc, #280]	; (801431c <LoRaMacMlmeRequest+0x298>)
 8014204:	4a49      	ldr	r2, [pc, #292]	; (801432c <LoRaMacMlmeRequest+0x2a8>)
 8014206:	589b      	ldr	r3, [r3, r2]
 8014208:	227c      	movs	r2, #124	; 0x7c
 801420a:	5c9b      	ldrb	r3, [r3, r2]
 801420c:	2b00      	cmp	r3, #0
 801420e:	d157      	bne.n	80142c0 <LoRaMacMlmeRequest+0x23c>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8014210:	2416      	movs	r4, #22
 8014212:	193b      	adds	r3, r7, r4
 8014214:	687a      	ldr	r2, [r7, #4]
 8014216:	7912      	ldrb	r2, [r2, #4]
 8014218:	701a      	strb	r2, [r3, #0]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	791b      	ldrb	r3, [r3, #4]
 801421e:	075b      	lsls	r3, r3, #29
 8014220:	0f5b      	lsrs	r3, r3, #29
 8014222:	b2db      	uxtb	r3, r3
 8014224:	0018      	movs	r0, r3
 8014226:	f000 fb65 	bl	80148f4 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 801422a:	210c      	movs	r1, #12
 801422c:	187b      	adds	r3, r7, r1
 801422e:	193a      	adds	r2, r7, r4
 8014230:	7812      	ldrb	r2, [r2, #0]
 8014232:	701a      	strb	r2, [r3, #0]
                status = LORAMAC_STATUS_OK;
 8014234:	2417      	movs	r4, #23
 8014236:	193b      	adds	r3, r7, r4
 8014238:	2200      	movs	r2, #0
 801423a:	701a      	strb	r2, [r3, #0]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 801423c:	187b      	adds	r3, r7, r1
 801423e:	2201      	movs	r2, #1
 8014240:	0019      	movs	r1, r3
 8014242:	2010      	movs	r0, #16
 8014244:	f000 fd2a 	bl	8014c9c <LoRaMacCommandsAddCmd>
 8014248:	1e03      	subs	r3, r0, #0
 801424a:	d039      	beq.n	80142c0 <LoRaMacMlmeRequest+0x23c>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801424c:	193b      	adds	r3, r7, r4
 801424e:	2213      	movs	r2, #19
 8014250:	701a      	strb	r2, [r3, #0]
                }
            }
            break;
 8014252:	e035      	b.n	80142c0 <LoRaMacMlmeRequest+0x23c>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8014254:	2417      	movs	r4, #23
 8014256:	193b      	adds	r3, r7, r4
 8014258:	2200      	movs	r2, #0
 801425a:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 801425c:	230c      	movs	r3, #12
 801425e:	18fb      	adds	r3, r7, r3
 8014260:	2200      	movs	r2, #0
 8014262:	0019      	movs	r1, r3
 8014264:	2012      	movs	r0, #18
 8014266:	f000 fd19 	bl	8014c9c <LoRaMacCommandsAddCmd>
 801426a:	1e03      	subs	r3, r0, #0
 801426c:	d02a      	beq.n	80142c4 <LoRaMacMlmeRequest+0x240>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801426e:	193b      	adds	r3, r7, r4
 8014270:	2213      	movs	r2, #19
 8014272:	701a      	strb	r2, [r3, #0]
            }
            break;
 8014274:	e026      	b.n	80142c4 <LoRaMacMlmeRequest+0x240>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8014276:	2310      	movs	r3, #16
 8014278:	18fb      	adds	r3, r7, r3
 801427a:	2201      	movs	r2, #1
 801427c:	70da      	strb	r2, [r3, #3]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 801427e:	f000 faf7 	bl	8014870 <LoRaMacClassBIsAcquisitionInProgress>
 8014282:	0003      	movs	r3, r0
 8014284:	001a      	movs	r2, r3
 8014286:	2301      	movs	r3, #1
 8014288:	4053      	eors	r3, r2
 801428a:	b2db      	uxtb	r3, r3
 801428c:	2b00      	cmp	r3, #0
 801428e:	d00a      	beq.n	80142a6 <LoRaMacMlmeRequest+0x222>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8014290:	2000      	movs	r0, #0
 8014292:	f000 facf 	bl	8014834 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8014296:	2000      	movs	r0, #0
 8014298:	f000 faf0 	bl	801487c <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 801429c:	2317      	movs	r3, #23
 801429e:	18fb      	adds	r3, r7, r3
 80142a0:	2200      	movs	r2, #0
 80142a2:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 80142a4:	e00f      	b.n	80142c6 <LoRaMacMlmeRequest+0x242>
                status = LORAMAC_STATUS_BUSY;
 80142a6:	2317      	movs	r3, #23
 80142a8:	18fb      	adds	r3, r7, r3
 80142aa:	2201      	movs	r2, #1
 80142ac:	701a      	strb	r2, [r3, #0]
            break;
 80142ae:	e00a      	b.n	80142c6 <LoRaMacMlmeRequest+0x242>
        }
        default:
            break;
 80142b0:	46c0      	nop			; (mov r8, r8)
 80142b2:	e008      	b.n	80142c6 <LoRaMacMlmeRequest+0x242>
            break;
 80142b4:	46c0      	nop			; (mov r8, r8)
 80142b6:	e006      	b.n	80142c6 <LoRaMacMlmeRequest+0x242>
            break;
 80142b8:	46c0      	nop			; (mov r8, r8)
 80142ba:	e004      	b.n	80142c6 <LoRaMacMlmeRequest+0x242>
            break;
 80142bc:	46c0      	nop			; (mov r8, r8)
 80142be:	e002      	b.n	80142c6 <LoRaMacMlmeRequest+0x242>
            break;
 80142c0:	46c0      	nop			; (mov r8, r8)
 80142c2:	e000      	b.n	80142c6 <LoRaMacMlmeRequest+0x242>
            break;
 80142c4:	46c0      	nop			; (mov r8, r8)
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80142c6:	4a15      	ldr	r2, [pc, #84]	; (801431c <LoRaMacMlmeRequest+0x298>)
 80142c8:	2391      	movs	r3, #145	; 0x91
 80142ca:	00db      	lsls	r3, r3, #3
 80142cc:	58d2      	ldr	r2, [r2, r3]
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 80142d2:	2317      	movs	r3, #23
 80142d4:	18fb      	adds	r3, r7, r3
 80142d6:	781b      	ldrb	r3, [r3, #0]
 80142d8:	2b00      	cmp	r3, #0
 80142da:	d00e      	beq.n	80142fa <LoRaMacMlmeRequest+0x276>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 80142dc:	f001 f8ec 	bl	80154b8 <LoRaMacConfirmQueueGetCnt>
 80142e0:	1e03      	subs	r3, r0, #0
 80142e2:	d111      	bne.n	8014308 <LoRaMacMlmeRequest+0x284>
        {
            MacCtx.NodeAckRequested = false;
 80142e4:	4b0d      	ldr	r3, [pc, #52]	; (801431c <LoRaMacMlmeRequest+0x298>)
 80142e6:	4a12      	ldr	r2, [pc, #72]	; (8014330 <LoRaMacMlmeRequest+0x2ac>)
 80142e8:	2100      	movs	r1, #0
 80142ea:	5499      	strb	r1, [r3, r2]
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 80142ec:	4b0b      	ldr	r3, [pc, #44]	; (801431c <LoRaMacMlmeRequest+0x298>)
 80142ee:	4a0d      	ldr	r2, [pc, #52]	; (8014324 <LoRaMacMlmeRequest+0x2a0>)
 80142f0:	5c99      	ldrb	r1, [r3, r2]
 80142f2:	2004      	movs	r0, #4
 80142f4:	4381      	bics	r1, r0
 80142f6:	5499      	strb	r1, [r3, r2]
 80142f8:	e006      	b.n	8014308 <LoRaMacMlmeRequest+0x284>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 80142fa:	2310      	movs	r3, #16
 80142fc:	18fb      	adds	r3, r7, r3
 80142fe:	0018      	movs	r0, r3
 8014300:	f000 ff6c 	bl	80151dc <LoRaMacConfirmQueueAdd>
        EventMacNvmCtxChanged( );
 8014304:	f7fe fcc6 	bl	8012c94 <EventMacNvmCtxChanged>
    }
    return status;
 8014308:	2317      	movs	r3, #23
 801430a:	18fb      	adds	r3, r7, r3
 801430c:	781b      	ldrb	r3, [r3, #0]
}
 801430e:	0018      	movs	r0, r3
 8014310:	46bd      	mov	sp, r7
 8014312:	b006      	add	sp, #24
 8014314:	bdb0      	pop	{r4, r5, r7, pc}
 8014316:	46c0      	nop			; (mov r8, r8)
 8014318:	20000a08 	.word	0x20000a08
 801431c:	200005b8 	.word	0x200005b8
 8014320:	00000451 	.word	0x00000451
 8014324:	00000481 	.word	0x00000481
 8014328:	0801fa4c 	.word	0x0801fa4c
 801432c:	00000484 	.word	0x00000484
 8014330:	00000414 	.word	0x00000414

08014334 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8014334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014336:	b08d      	sub	sp, #52	; 0x34
 8014338:	af02      	add	r7, sp, #8
 801433a:	6078      	str	r0, [r7, #4]
 801433c:	000a      	movs	r2, r1
 801433e:	1cfb      	adds	r3, r7, #3
 8014340:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014342:	2327      	movs	r3, #39	; 0x27
 8014344:	18fb      	adds	r3, r7, r3
 8014346:	2202      	movs	r2, #2
 8014348:	701a      	strb	r2, [r3, #0]
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 801434a:	2326      	movs	r3, #38	; 0x26
 801434c:	18fb      	adds	r3, r7, r3
 801434e:	2200      	movs	r2, #0
 8014350:	701a      	strb	r2, [r3, #0]
    void* fBuffer;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8014352:	231d      	movs	r3, #29
 8014354:	18fb      	adds	r3, r7, r3
 8014356:	2200      	movs	r2, #0
 8014358:	701a      	strb	r2, [r3, #0]
    bool readyToSend = false;
 801435a:	231c      	movs	r3, #28
 801435c:	18fb      	adds	r3, r7, r3
 801435e:	2200      	movs	r2, #0
 8014360:	701a      	strb	r2, [r3, #0]

    if( mcpsRequest == NULL )
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	2b00      	cmp	r3, #0
 8014366:	d101      	bne.n	801436c <LoRaMacMcpsRequest+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014368:	2303      	movs	r3, #3
 801436a:	e11b      	b.n	80145a4 <LoRaMacMcpsRequest+0x270>
    }
    if( LoRaMacIsBusy( ) == true )
 801436c:	f7fe fce6 	bl	8012d3c <LoRaMacIsBusy>
 8014370:	1e03      	subs	r3, r0, #0
 8014372:	d001      	beq.n	8014378 <LoRaMacMcpsRequest+0x44>
    {
        return LORAMAC_STATUS_BUSY;
 8014374:	2301      	movs	r3, #1
 8014376:	e115      	b.n	80145a4 <LoRaMacMcpsRequest+0x270>
    }

    macHdr.Value = 0;
 8014378:	230c      	movs	r3, #12
 801437a:	18fb      	adds	r3, r7, r3
 801437c:	2200      	movs	r2, #0
 801437e:	701a      	strb	r2, [r3, #0]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8014380:	4b8a      	ldr	r3, [pc, #552]	; (80145ac <LoRaMacMcpsRequest+0x278>)
 8014382:	2214      	movs	r2, #20
 8014384:	2100      	movs	r1, #0
 8014386:	0018      	movs	r0, r3
 8014388:	f005 f8f4 	bl	8019574 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801438c:	4b88      	ldr	r3, [pc, #544]	; (80145b0 <LoRaMacMcpsRequest+0x27c>)
 801438e:	4a89      	ldr	r2, [pc, #548]	; (80145b4 <LoRaMacMcpsRequest+0x280>)
 8014390:	2101      	movs	r1, #1
 8014392:	5499      	strb	r1, [r3, r2]

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 8014394:	4b86      	ldr	r3, [pc, #536]	; (80145b0 <LoRaMacMcpsRequest+0x27c>)
 8014396:	4a88      	ldr	r2, [pc, #544]	; (80145b8 <LoRaMacMcpsRequest+0x284>)
 8014398:	2101      	movs	r1, #1
 801439a:	5499      	strb	r1, [r3, r2]

    switch( mcpsRequest->Type )
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	781b      	ldrb	r3, [r3, #0]
 80143a0:	2b03      	cmp	r3, #3
 80143a2:	d056      	beq.n	8014452 <LoRaMacMcpsRequest+0x11e>
 80143a4:	dc72      	bgt.n	801448c <LoRaMacMcpsRequest+0x158>
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d002      	beq.n	80143b0 <LoRaMacMcpsRequest+0x7c>
 80143aa:	2b01      	cmp	r3, #1
 80143ac:	d024      	beq.n	80143f8 <LoRaMacMcpsRequest+0xc4>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 80143ae:	e06d      	b.n	801448c <LoRaMacMcpsRequest+0x158>
            readyToSend = true;
 80143b0:	231c      	movs	r3, #28
 80143b2:	18fb      	adds	r3, r7, r3
 80143b4:	2201      	movs	r2, #1
 80143b6:	701a      	strb	r2, [r3, #0]
            MacCtx.AckTimeoutRetries = 1;
 80143b8:	4b7d      	ldr	r3, [pc, #500]	; (80145b0 <LoRaMacMcpsRequest+0x27c>)
 80143ba:	4a80      	ldr	r2, [pc, #512]	; (80145bc <LoRaMacMcpsRequest+0x288>)
 80143bc:	2101      	movs	r1, #1
 80143be:	5499      	strb	r1, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 80143c0:	230c      	movs	r3, #12
 80143c2:	18fb      	adds	r3, r7, r3
 80143c4:	781a      	ldrb	r2, [r3, #0]
 80143c6:	211f      	movs	r1, #31
 80143c8:	400a      	ands	r2, r1
 80143ca:	1c11      	adds	r1, r2, #0
 80143cc:	2240      	movs	r2, #64	; 0x40
 80143ce:	430a      	orrs	r2, r1
 80143d0:	701a      	strb	r2, [r3, #0]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 80143d2:	2326      	movs	r3, #38	; 0x26
 80143d4:	18fb      	adds	r3, r7, r3
 80143d6:	687a      	ldr	r2, [r7, #4]
 80143d8:	7912      	ldrb	r2, [r2, #4]
 80143da:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	689b      	ldr	r3, [r3, #8]
 80143e0:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 80143e2:	231e      	movs	r3, #30
 80143e4:	18fb      	adds	r3, r7, r3
 80143e6:	687a      	ldr	r2, [r7, #4]
 80143e8:	8992      	ldrh	r2, [r2, #12]
 80143ea:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 80143ec:	231d      	movs	r3, #29
 80143ee:	18fb      	adds	r3, r7, r3
 80143f0:	687a      	ldr	r2, [r7, #4]
 80143f2:	7b92      	ldrb	r2, [r2, #14]
 80143f4:	701a      	strb	r2, [r3, #0]
            break;
 80143f6:	e04a      	b.n	801448e <LoRaMacMcpsRequest+0x15a>
            readyToSend = true;
 80143f8:	231c      	movs	r3, #28
 80143fa:	18fb      	adds	r3, r7, r3
 80143fc:	2201      	movs	r2, #1
 80143fe:	701a      	strb	r2, [r3, #0]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	7bdb      	ldrb	r3, [r3, #15]
 8014404:	1c1a      	adds	r2, r3, #0
 8014406:	b2d3      	uxtb	r3, r2
 8014408:	2b08      	cmp	r3, #8
 801440a:	d901      	bls.n	8014410 <LoRaMacMcpsRequest+0xdc>
 801440c:	2308      	movs	r3, #8
 801440e:	1c1a      	adds	r2, r3, #0
 8014410:	b2d1      	uxtb	r1, r2
 8014412:	4b67      	ldr	r3, [pc, #412]	; (80145b0 <LoRaMacMcpsRequest+0x27c>)
 8014414:	4a69      	ldr	r2, [pc, #420]	; (80145bc <LoRaMacMcpsRequest+0x288>)
 8014416:	5499      	strb	r1, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8014418:	230c      	movs	r3, #12
 801441a:	18fb      	adds	r3, r7, r3
 801441c:	781a      	ldrb	r2, [r3, #0]
 801441e:	211f      	movs	r1, #31
 8014420:	400a      	ands	r2, r1
 8014422:	1c11      	adds	r1, r2, #0
 8014424:	2280      	movs	r2, #128	; 0x80
 8014426:	4252      	negs	r2, r2
 8014428:	430a      	orrs	r2, r1
 801442a:	701a      	strb	r2, [r3, #0]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 801442c:	2326      	movs	r3, #38	; 0x26
 801442e:	18fb      	adds	r3, r7, r3
 8014430:	687a      	ldr	r2, [r7, #4]
 8014432:	7912      	ldrb	r2, [r2, #4]
 8014434:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	689b      	ldr	r3, [r3, #8]
 801443a:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 801443c:	231e      	movs	r3, #30
 801443e:	18fb      	adds	r3, r7, r3
 8014440:	687a      	ldr	r2, [r7, #4]
 8014442:	8992      	ldrh	r2, [r2, #12]
 8014444:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 8014446:	231d      	movs	r3, #29
 8014448:	18fb      	adds	r3, r7, r3
 801444a:	687a      	ldr	r2, [r7, #4]
 801444c:	7b92      	ldrb	r2, [r2, #14]
 801444e:	701a      	strb	r2, [r3, #0]
            break;
 8014450:	e01d      	b.n	801448e <LoRaMacMcpsRequest+0x15a>
            readyToSend = true;
 8014452:	231c      	movs	r3, #28
 8014454:	18fb      	adds	r3, r7, r3
 8014456:	2201      	movs	r2, #1
 8014458:	701a      	strb	r2, [r3, #0]
            MacCtx.AckTimeoutRetries = 1;
 801445a:	4b55      	ldr	r3, [pc, #340]	; (80145b0 <LoRaMacMcpsRequest+0x27c>)
 801445c:	4a57      	ldr	r2, [pc, #348]	; (80145bc <LoRaMacMcpsRequest+0x288>)
 801445e:	2101      	movs	r1, #1
 8014460:	5499      	strb	r1, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8014462:	230c      	movs	r3, #12
 8014464:	18fb      	adds	r3, r7, r3
 8014466:	781a      	ldrb	r2, [r3, #0]
 8014468:	2120      	movs	r1, #32
 801446a:	4249      	negs	r1, r1
 801446c:	430a      	orrs	r2, r1
 801446e:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	685b      	ldr	r3, [r3, #4]
 8014474:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 8014476:	231e      	movs	r3, #30
 8014478:	18fb      	adds	r3, r7, r3
 801447a:	687a      	ldr	r2, [r7, #4]
 801447c:	8912      	ldrh	r2, [r2, #8]
 801447e:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 8014480:	231d      	movs	r3, #29
 8014482:	18fb      	adds	r3, r7, r3
 8014484:	687a      	ldr	r2, [r7, #4]
 8014486:	7a92      	ldrb	r2, [r2, #10]
 8014488:	701a      	strb	r2, [r3, #0]
            break;
 801448a:	e000      	b.n	801448e <LoRaMacMcpsRequest+0x15a>
            break;
 801448c:	46c0      	nop			; (mov r8, r8)
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801448e:	2114      	movs	r1, #20
 8014490:	187b      	adds	r3, r7, r1
 8014492:	2202      	movs	r2, #2
 8014494:	701a      	strb	r2, [r3, #0]
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8014496:	4b46      	ldr	r3, [pc, #280]	; (80145b0 <LoRaMacMcpsRequest+0x27c>)
 8014498:	4a49      	ldr	r2, [pc, #292]	; (80145c0 <LoRaMacMcpsRequest+0x28c>)
 801449a:	589b      	ldr	r3, [r3, r2]
 801449c:	22b8      	movs	r2, #184	; 0xb8
 801449e:	5c9a      	ldrb	r2, [r3, r2]
 80144a0:	187b      	adds	r3, r7, r1
 80144a2:	709a      	strb	r2, [r3, #2]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80144a4:	4b42      	ldr	r3, [pc, #264]	; (80145b0 <LoRaMacMcpsRequest+0x27c>)
 80144a6:	4a46      	ldr	r2, [pc, #280]	; (80145c0 <LoRaMacMcpsRequest+0x28c>)
 80144a8:	589b      	ldr	r3, [r3, r2]
 80144aa:	781b      	ldrb	r3, [r3, #0]
 80144ac:	187a      	adds	r2, r7, r1
 80144ae:	0011      	movs	r1, r2
 80144b0:	0018      	movs	r0, r3
 80144b2:	f002 fba2 	bl	8016bfa <RegionGetPhyParam>
 80144b6:	0003      	movs	r3, r0
 80144b8:	001a      	movs	r2, r3
 80144ba:	2110      	movs	r1, #16
 80144bc:	187b      	adds	r3, r7, r1
 80144be:	601a      	str	r2, [r3, #0]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 80144c0:	187b      	adds	r3, r7, r1
 80144c2:	681b      	ldr	r3, [r3, #0]
 80144c4:	b259      	sxtb	r1, r3
 80144c6:	231d      	movs	r3, #29
 80144c8:	18fa      	adds	r2, r7, r3
 80144ca:	18fb      	adds	r3, r7, r3
 80144cc:	1c0c      	adds	r4, r1, #0
 80144ce:	781b      	ldrb	r3, [r3, #0]
 80144d0:	b258      	sxtb	r0, r3
 80144d2:	b261      	sxtb	r1, r4
 80144d4:	4288      	cmp	r0, r1
 80144d6:	da00      	bge.n	80144da <LoRaMacMcpsRequest+0x1a6>
 80144d8:	1c23      	adds	r3, r4, #0
 80144da:	7013      	strb	r3, [r2, #0]

    if( readyToSend == true )
 80144dc:	231c      	movs	r3, #28
 80144de:	18fb      	adds	r3, r7, r3
 80144e0:	781b      	ldrb	r3, [r3, #0]
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	d055      	beq.n	8014592 <LoRaMacMcpsRequest+0x25e>
    {
        if( MacCtx.NvmCtx->AdrCtrlOn == false )
 80144e6:	4b32      	ldr	r3, [pc, #200]	; (80145b0 <LoRaMacMcpsRequest+0x27c>)
 80144e8:	4a35      	ldr	r2, [pc, #212]	; (80145c0 <LoRaMacMcpsRequest+0x28c>)
 80144ea:	589b      	ldr	r3, [r3, r2]
 80144ec:	227e      	movs	r2, #126	; 0x7e
 80144ee:	5c9b      	ldrb	r3, [r3, r2]
 80144f0:	2201      	movs	r2, #1
 80144f2:	4053      	eors	r3, r2
 80144f4:	b2db      	uxtb	r3, r3
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	d022      	beq.n	8014540 <LoRaMacMcpsRequest+0x20c>
        {
            verify.DatarateParams.Datarate = datarate;
 80144fa:	2408      	movs	r4, #8
 80144fc:	193b      	adds	r3, r7, r4
 80144fe:	221d      	movs	r2, #29
 8014500:	18ba      	adds	r2, r7, r2
 8014502:	7812      	ldrb	r2, [r2, #0]
 8014504:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8014506:	4b2a      	ldr	r3, [pc, #168]	; (80145b0 <LoRaMacMcpsRequest+0x27c>)
 8014508:	4a2d      	ldr	r2, [pc, #180]	; (80145c0 <LoRaMacMcpsRequest+0x28c>)
 801450a:	589b      	ldr	r3, [r3, r2]
 801450c:	22b8      	movs	r2, #184	; 0xb8
 801450e:	5c9a      	ldrb	r2, [r3, r2]
 8014510:	193b      	adds	r3, r7, r4
 8014512:	709a      	strb	r2, [r3, #2]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 8014514:	4b26      	ldr	r3, [pc, #152]	; (80145b0 <LoRaMacMcpsRequest+0x27c>)
 8014516:	4a2a      	ldr	r2, [pc, #168]	; (80145c0 <LoRaMacMcpsRequest+0x28c>)
 8014518:	589b      	ldr	r3, [r3, r2]
 801451a:	781b      	ldrb	r3, [r3, #0]
 801451c:	1939      	adds	r1, r7, r4
 801451e:	2205      	movs	r2, #5
 8014520:	0018      	movs	r0, r3
 8014522:	f002 fbd1 	bl	8016cc8 <RegionVerify>
 8014526:	1e03      	subs	r3, r0, #0
 8014528:	d008      	beq.n	801453c <LoRaMacMcpsRequest+0x208>
            {
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 801452a:	4b21      	ldr	r3, [pc, #132]	; (80145b0 <LoRaMacMcpsRequest+0x27c>)
 801452c:	4a24      	ldr	r2, [pc, #144]	; (80145c0 <LoRaMacMcpsRequest+0x28c>)
 801452e:	589b      	ldr	r3, [r3, r2]
 8014530:	193a      	adds	r2, r7, r4
 8014532:	2100      	movs	r1, #0
 8014534:	5651      	ldrsb	r1, [r2, r1]
 8014536:	2285      	movs	r2, #133	; 0x85
 8014538:	5499      	strb	r1, [r3, r2]
 801453a:	e001      	b.n	8014540 <LoRaMacMcpsRequest+0x20c>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 801453c:	2303      	movs	r3, #3
 801453e:	e031      	b.n	80145a4 <LoRaMacMcpsRequest+0x270>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 8014540:	2627      	movs	r6, #39	; 0x27
 8014542:	19bc      	adds	r4, r7, r6
 8014544:	231e      	movs	r3, #30
 8014546:	18fb      	adds	r3, r7, r3
 8014548:	881d      	ldrh	r5, [r3, #0]
 801454a:	6a3a      	ldr	r2, [r7, #32]
 801454c:	2326      	movs	r3, #38	; 0x26
 801454e:	18fb      	adds	r3, r7, r3
 8014550:	7819      	ldrb	r1, [r3, #0]
 8014552:	230c      	movs	r3, #12
 8014554:	18f8      	adds	r0, r7, r3
 8014556:	1cfb      	adds	r3, r7, #3
 8014558:	781b      	ldrb	r3, [r3, #0]
 801455a:	9300      	str	r3, [sp, #0]
 801455c:	002b      	movs	r3, r5
 801455e:	f7fd f86d 	bl	801163c <Send>
 8014562:	0003      	movs	r3, r0
 8014564:	7023      	strb	r3, [r4, #0]
        if( status == LORAMAC_STATUS_OK )
 8014566:	19bb      	adds	r3, r7, r6
 8014568:	781b      	ldrb	r3, [r3, #0]
 801456a:	2b00      	cmp	r3, #0
 801456c:	d10d      	bne.n	801458a <LoRaMacMcpsRequest+0x256>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	7819      	ldrb	r1, [r3, #0]
 8014572:	4b0f      	ldr	r3, [pc, #60]	; (80145b0 <LoRaMacMcpsRequest+0x27c>)
 8014574:	4a13      	ldr	r2, [pc, #76]	; (80145c4 <LoRaMacMcpsRequest+0x290>)
 8014576:	5499      	strb	r1, [r3, r2]
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8014578:	4b0d      	ldr	r3, [pc, #52]	; (80145b0 <LoRaMacMcpsRequest+0x27c>)
 801457a:	4a13      	ldr	r2, [pc, #76]	; (80145c8 <LoRaMacMcpsRequest+0x294>)
 801457c:	5c99      	ldrb	r1, [r3, r2]
 801457e:	2001      	movs	r0, #1
 8014580:	4301      	orrs	r1, r0
 8014582:	5499      	strb	r1, [r3, r2]
            EventMacNvmCtxChanged( );
 8014584:	f7fe fb86 	bl	8012c94 <EventMacNvmCtxChanged>
 8014588:	e003      	b.n	8014592 <LoRaMacMcpsRequest+0x25e>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 801458a:	4b09      	ldr	r3, [pc, #36]	; (80145b0 <LoRaMacMcpsRequest+0x27c>)
 801458c:	4a0f      	ldr	r2, [pc, #60]	; (80145cc <LoRaMacMcpsRequest+0x298>)
 801458e:	2100      	movs	r1, #0
 8014590:	5499      	strb	r1, [r3, r2]
        }
    }

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8014592:	4a07      	ldr	r2, [pc, #28]	; (80145b0 <LoRaMacMcpsRequest+0x27c>)
 8014594:	2391      	movs	r3, #145	; 0x91
 8014596:	00db      	lsls	r3, r3, #3
 8014598:	58d2      	ldr	r2, [r2, r3]
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	611a      	str	r2, [r3, #16]

    return status;
 801459e:	2327      	movs	r3, #39	; 0x27
 80145a0:	18fb      	adds	r3, r7, r3
 80145a2:	781b      	ldrb	r3, [r3, #0]
}
 80145a4:	0018      	movs	r0, r3
 80145a6:	46bd      	mov	sp, r7
 80145a8:	b00b      	add	sp, #44	; 0x2c
 80145aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80145ac:	200009f4 	.word	0x200009f4
 80145b0:	200005b8 	.word	0x200005b8
 80145b4:	0000043d 	.word	0x0000043d
 80145b8:	00000412 	.word	0x00000412
 80145bc:	00000411 	.word	0x00000411
 80145c0:	00000484 	.word	0x00000484
 80145c4:	0000043c 	.word	0x0000043c
 80145c8:	00000481 	.word	0x00000481
 80145cc:	00000414 	.word	0x00000414

080145d0 <LoRaMacTestSetDutyCycleOn>:

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 80145d0:	b580      	push	{r7, lr}
 80145d2:	b084      	sub	sp, #16
 80145d4:	af00      	add	r7, sp, #0
 80145d6:	0002      	movs	r2, r0
 80145d8:	1dfb      	adds	r3, r7, #7
 80145da:	701a      	strb	r2, [r3, #0]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 80145dc:	210c      	movs	r1, #12
 80145de:	187b      	adds	r3, r7, r1
 80145e0:	1dfa      	adds	r2, r7, #7
 80145e2:	7812      	ldrb	r2, [r2, #0]
 80145e4:	701a      	strb	r2, [r3, #0]

    if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DUTY_CYCLE ) == true )
 80145e6:	4b0b      	ldr	r3, [pc, #44]	; (8014614 <LoRaMacTestSetDutyCycleOn+0x44>)
 80145e8:	4a0b      	ldr	r2, [pc, #44]	; (8014618 <LoRaMacTestSetDutyCycleOn+0x48>)
 80145ea:	589b      	ldr	r3, [r3, r2]
 80145ec:	781b      	ldrb	r3, [r3, #0]
 80145ee:	1879      	adds	r1, r7, r1
 80145f0:	220f      	movs	r2, #15
 80145f2:	0018      	movs	r0, r3
 80145f4:	f002 fb68 	bl	8016cc8 <RegionVerify>
 80145f8:	1e03      	subs	r3, r0, #0
 80145fa:	d006      	beq.n	801460a <LoRaMacTestSetDutyCycleOn+0x3a>
    {
        MacCtx.NvmCtx->DutyCycleOn = enable;
 80145fc:	4b05      	ldr	r3, [pc, #20]	; (8014614 <LoRaMacTestSetDutyCycleOn+0x44>)
 80145fe:	4a06      	ldr	r2, [pc, #24]	; (8014618 <LoRaMacTestSetDutyCycleOn+0x48>)
 8014600:	589b      	ldr	r3, [r3, r2]
 8014602:	1dfa      	adds	r2, r7, #7
 8014604:	21c9      	movs	r1, #201	; 0xc9
 8014606:	7812      	ldrb	r2, [r2, #0]
 8014608:	545a      	strb	r2, [r3, r1]
    }
}
 801460a:	46c0      	nop			; (mov r8, r8)
 801460c:	46bd      	mov	sp, r7
 801460e:	b004      	add	sp, #16
 8014610:	bd80      	pop	{r7, pc}
 8014612:	46c0      	nop			; (mov r8, r8)
 8014614:	200005b8 	.word	0x200005b8
 8014618:	00000484 	.word	0x00000484

0801461c <CalcNextV10X>:

#include "Region.h"
#include "LoRaMacAdr.h"

static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 801461c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801461e:	b08b      	sub	sp, #44	; 0x2c
 8014620:	af00      	add	r7, sp, #0
 8014622:	60f8      	str	r0, [r7, #12]
 8014624:	60b9      	str	r1, [r7, #8]
 8014626:	607a      	str	r2, [r7, #4]
 8014628:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 801462a:	2327      	movs	r3, #39	; 0x27
 801462c:	18fb      	adds	r3, r7, r3
 801462e:	2200      	movs	r2, #0
 8014630:	701a      	strb	r2, [r3, #0]
    int8_t datarate = adrNext->Datarate;
 8014632:	2426      	movs	r4, #38	; 0x26
 8014634:	193b      	adds	r3, r7, r4
 8014636:	68fa      	ldr	r2, [r7, #12]
 8014638:	7c12      	ldrb	r2, [r2, #16]
 801463a:	701a      	strb	r2, [r3, #0]
    int8_t txPower = adrNext->TxPower;
 801463c:	2325      	movs	r3, #37	; 0x25
 801463e:	18fb      	adds	r3, r7, r3
 8014640:	68fa      	ldr	r2, [r7, #12]
 8014642:	7c52      	ldrb	r2, [r2, #17]
 8014644:	701a      	strb	r2, [r3, #0]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8014646:	68fb      	ldr	r3, [r7, #12]
 8014648:	689a      	ldr	r2, [r3, #8]
 801464a:	683b      	ldr	r3, [r7, #0]
 801464c:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 801464e:	68fb      	ldr	r3, [r7, #12]
 8014650:	795b      	ldrb	r3, [r3, #5]
 8014652:	2b00      	cmp	r3, #0
 8014654:	d100      	bne.n	8014658 <CalcNextV10X+0x3c>
 8014656:	e0a5      	b.n	80147a4 <CalcNextV10X+0x188>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8014658:	211c      	movs	r1, #28
 801465a:	187b      	adds	r3, r7, r1
 801465c:	2202      	movs	r2, #2
 801465e:	701a      	strb	r2, [r3, #0]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8014660:	68fb      	ldr	r3, [r7, #12]
 8014662:	7c9a      	ldrb	r2, [r3, #18]
 8014664:	187b      	adds	r3, r7, r1
 8014666:	709a      	strb	r2, [r3, #2]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8014668:	68fb      	ldr	r3, [r7, #12]
 801466a:	7cdb      	ldrb	r3, [r3, #19]
 801466c:	187a      	adds	r2, r7, r1
 801466e:	0011      	movs	r1, r2
 8014670:	0018      	movs	r0, r3
 8014672:	f002 fac2 	bl	8016bfa <RegionGetPhyParam>
 8014676:	0003      	movs	r3, r0
 8014678:	001a      	movs	r2, r3
 801467a:	2118      	movs	r1, #24
 801467c:	187b      	adds	r3, r7, r1
 801467e:	601a      	str	r2, [r3, #0]
        minTxDatarate = phyParam.Value;
 8014680:	187b      	adds	r3, r7, r1
 8014682:	681a      	ldr	r2, [r3, #0]
 8014684:	2124      	movs	r1, #36	; 0x24
 8014686:	187b      	adds	r3, r7, r1
 8014688:	701a      	strb	r2, [r3, #0]
        datarate = MAX( datarate, minTxDatarate );
 801468a:	193a      	adds	r2, r7, r4
 801468c:	187b      	adds	r3, r7, r1
 801468e:	1939      	adds	r1, r7, r4
 8014690:	780c      	ldrb	r4, [r1, #0]
 8014692:	781b      	ldrb	r3, [r3, #0]
 8014694:	b258      	sxtb	r0, r3
 8014696:	b261      	sxtb	r1, r4
 8014698:	4288      	cmp	r0, r1
 801469a:	da00      	bge.n	801469e <CalcNextV10X+0x82>
 801469c:	1c23      	adds	r3, r4, #0
 801469e:	7013      	strb	r3, [r2, #0]

        if( datarate == minTxDatarate )
 80146a0:	2326      	movs	r3, #38	; 0x26
 80146a2:	18fa      	adds	r2, r7, r3
 80146a4:	2324      	movs	r3, #36	; 0x24
 80146a6:	18fb      	adds	r3, r7, r3
 80146a8:	7812      	ldrb	r2, [r2, #0]
 80146aa:	b252      	sxtb	r2, r2
 80146ac:	781b      	ldrb	r3, [r3, #0]
 80146ae:	b25b      	sxtb	r3, r3
 80146b0:	429a      	cmp	r2, r3
 80146b2:	d107      	bne.n	80146c4 <CalcNextV10X+0xa8>
        {
            *adrAckCounter = 0;
 80146b4:	683b      	ldr	r3, [r7, #0]
 80146b6:	2200      	movs	r2, #0
 80146b8:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 80146ba:	2327      	movs	r3, #39	; 0x27
 80146bc:	18fb      	adds	r3, r7, r3
 80146be:	2200      	movs	r2, #0
 80146c0:	701a      	strb	r2, [r3, #0]
 80146c2:	e06f      	b.n	80147a4 <CalcNextV10X+0x188>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 80146c4:	68fb      	ldr	r3, [r7, #12]
 80146c6:	689b      	ldr	r3, [r3, #8]
 80146c8:	68fa      	ldr	r2, [r7, #12]
 80146ca:	8992      	ldrh	r2, [r2, #12]
 80146cc:	4293      	cmp	r3, r2
 80146ce:	d304      	bcc.n	80146da <CalcNextV10X+0xbe>
            {
                adrAckReq = true;
 80146d0:	2327      	movs	r3, #39	; 0x27
 80146d2:	18fb      	adds	r3, r7, r3
 80146d4:	2201      	movs	r2, #1
 80146d6:	701a      	strb	r2, [r3, #0]
 80146d8:	e003      	b.n	80146e2 <CalcNextV10X+0xc6>
            }
            else
            {
                adrAckReq = false;
 80146da:	2327      	movs	r3, #39	; 0x27
 80146dc:	18fb      	adds	r3, r7, r3
 80146de:	2200      	movs	r2, #0
 80146e0:	701a      	strb	r2, [r3, #0]
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 80146e2:	68fb      	ldr	r3, [r7, #12]
 80146e4:	689b      	ldr	r3, [r3, #8]
 80146e6:	68fa      	ldr	r2, [r7, #12]
 80146e8:	8992      	ldrh	r2, [r2, #12]
 80146ea:	0011      	movs	r1, r2
 80146ec:	68fa      	ldr	r2, [r7, #12]
 80146ee:	89d2      	ldrh	r2, [r2, #14]
 80146f0:	188a      	adds	r2, r1, r2
 80146f2:	4293      	cmp	r3, r2
 80146f4:	d356      	bcc.n	80147a4 <CalcNextV10X+0x188>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 80146f6:	241c      	movs	r4, #28
 80146f8:	193b      	adds	r3, r7, r4
 80146fa:	2208      	movs	r2, #8
 80146fc:	701a      	strb	r2, [r3, #0]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80146fe:	68fb      	ldr	r3, [r7, #12]
 8014700:	7cdb      	ldrb	r3, [r3, #19]
 8014702:	193a      	adds	r2, r7, r4
 8014704:	0011      	movs	r1, r2
 8014706:	0018      	movs	r0, r3
 8014708:	f002 fa77 	bl	8016bfa <RegionGetPhyParam>
 801470c:	0003      	movs	r3, r0
 801470e:	001a      	movs	r2, r3
 8014710:	2518      	movs	r5, #24
 8014712:	197b      	adds	r3, r7, r5
 8014714:	601a      	str	r2, [r3, #0]
                txPower = phyParam.Value;
 8014716:	197b      	adds	r3, r7, r5
 8014718:	681a      	ldr	r2, [r3, #0]
 801471a:	2325      	movs	r3, #37	; 0x25
 801471c:	18fb      	adds	r3, r7, r3
 801471e:	701a      	strb	r2, [r3, #0]

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 8014720:	68fb      	ldr	r3, [r7, #12]
 8014722:	689a      	ldr	r2, [r3, #8]
 8014724:	68fb      	ldr	r3, [r7, #12]
 8014726:	89db      	ldrh	r3, [r3, #14]
 8014728:	0019      	movs	r1, r3
 801472a:	0010      	movs	r0, r2
 801472c:	f7eb fd7a 	bl	8000224 <__aeabi_uidivmod>
 8014730:	000b      	movs	r3, r1
 8014732:	2b01      	cmp	r3, #1
 8014734:	d136      	bne.n	80147a4 <CalcNextV10X+0x188>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8014736:	193b      	adds	r3, r7, r4
 8014738:	2222      	movs	r2, #34	; 0x22
 801473a:	701a      	strb	r2, [r3, #0]
                    getPhy.Datarate = datarate;
 801473c:	193b      	adds	r3, r7, r4
 801473e:	2626      	movs	r6, #38	; 0x26
 8014740:	19ba      	adds	r2, r7, r6
 8014742:	7812      	ldrb	r2, [r2, #0]
 8014744:	705a      	strb	r2, [r3, #1]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8014746:	68fb      	ldr	r3, [r7, #12]
 8014748:	7c9a      	ldrb	r2, [r3, #18]
 801474a:	193b      	adds	r3, r7, r4
 801474c:	709a      	strb	r2, [r3, #2]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 801474e:	68fb      	ldr	r3, [r7, #12]
 8014750:	7cdb      	ldrb	r3, [r3, #19]
 8014752:	193a      	adds	r2, r7, r4
 8014754:	0011      	movs	r1, r2
 8014756:	0018      	movs	r0, r3
 8014758:	f002 fa4f 	bl	8016bfa <RegionGetPhyParam>
 801475c:	0003      	movs	r3, r0
 801475e:	001a      	movs	r2, r3
 8014760:	197b      	adds	r3, r7, r5
 8014762:	601a      	str	r2, [r3, #0]
                    datarate = phyParam.Value;
 8014764:	197b      	adds	r3, r7, r5
 8014766:	681a      	ldr	r2, [r3, #0]
 8014768:	19bb      	adds	r3, r7, r6
 801476a:	701a      	strb	r2, [r3, #0]

                    if( datarate == minTxDatarate )
 801476c:	19ba      	adds	r2, r7, r6
 801476e:	2324      	movs	r3, #36	; 0x24
 8014770:	18fb      	adds	r3, r7, r3
 8014772:	7812      	ldrb	r2, [r2, #0]
 8014774:	b252      	sxtb	r2, r2
 8014776:	781b      	ldrb	r3, [r3, #0]
 8014778:	b25b      	sxtb	r3, r3
 801477a:	429a      	cmp	r2, r3
 801477c:	d112      	bne.n	80147a4 <CalcNextV10X+0x188>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 801477e:	2327      	movs	r3, #39	; 0x27
 8014780:	18fb      	adds	r3, r7, r3
 8014782:	2200      	movs	r2, #0
 8014784:	701a      	strb	r2, [r3, #0]
                        if( adrNext->UpdateChanMask == true )
 8014786:	68fb      	ldr	r3, [r7, #12]
 8014788:	791b      	ldrb	r3, [r3, #4]
 801478a:	2b00      	cmp	r3, #0
 801478c:	d00a      	beq.n	80147a4 <CalcNextV10X+0x188>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 801478e:	2110      	movs	r1, #16
 8014790:	187b      	adds	r3, r7, r1
 8014792:	2202      	movs	r2, #2
 8014794:	711a      	strb	r2, [r3, #4]
                            RegionInitDefaults( adrNext->Region, &params );
 8014796:	68fb      	ldr	r3, [r7, #12]
 8014798:	7cdb      	ldrb	r3, [r3, #19]
 801479a:	187a      	adds	r2, r7, r1
 801479c:	0011      	movs	r1, r2
 801479e:	0018      	movs	r0, r3
 80147a0:	f002 fa67 	bl	8016c72 <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 80147a4:	68bb      	ldr	r3, [r7, #8]
 80147a6:	2226      	movs	r2, #38	; 0x26
 80147a8:	18ba      	adds	r2, r7, r2
 80147aa:	7812      	ldrb	r2, [r2, #0]
 80147ac:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	2225      	movs	r2, #37	; 0x25
 80147b2:	18ba      	adds	r2, r7, r2
 80147b4:	7812      	ldrb	r2, [r2, #0]
 80147b6:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 80147b8:	2327      	movs	r3, #39	; 0x27
 80147ba:	18fb      	adds	r3, r7, r3
 80147bc:	781b      	ldrb	r3, [r3, #0]
}
 80147be:	0018      	movs	r0, r3
 80147c0:	46bd      	mov	sp, r7
 80147c2:	b00b      	add	sp, #44	; 0x2c
 80147c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080147c6 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 80147c6:	b580      	push	{r7, lr}
 80147c8:	b084      	sub	sp, #16
 80147ca:	af00      	add	r7, sp, #0
 80147cc:	60f8      	str	r0, [r7, #12]
 80147ce:	60b9      	str	r1, [r7, #8]
 80147d0:	607a      	str	r2, [r7, #4]
 80147d2:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 80147d4:	68fb      	ldr	r3, [r7, #12]
 80147d6:	789b      	ldrb	r3, [r3, #2]
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d107      	bne.n	80147ec <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 80147dc:	683b      	ldr	r3, [r7, #0]
 80147de:	687a      	ldr	r2, [r7, #4]
 80147e0:	68b9      	ldr	r1, [r7, #8]
 80147e2:	68f8      	ldr	r0, [r7, #12]
 80147e4:	f7ff ff1a 	bl	801461c <CalcNextV10X>
 80147e8:	0003      	movs	r3, r0
 80147ea:	e000      	b.n	80147ee <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 80147ec:	2300      	movs	r3, #0
}
 80147ee:	0018      	movs	r0, r3
 80147f0:	46bd      	mov	sp, r7
 80147f2:	b004      	add	sp, #16
 80147f4:	bd80      	pop	{r7, pc}

080147f6 <LoRaMacClassBInit>:
}

#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmEvent classBNvmCtxChanged )
{
 80147f6:	b580      	push	{r7, lr}
 80147f8:	b084      	sub	sp, #16
 80147fa:	af00      	add	r7, sp, #0
 80147fc:	60f8      	str	r0, [r7, #12]
 80147fe:	60b9      	str	r1, [r7, #8]
 8014800:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif // LORAMAC_CLASSB_ENABLED
}
 8014802:	46c0      	nop			; (mov r8, r8)
 8014804:	46bd      	mov	sp, r7
 8014806:	b004      	add	sp, #16
 8014808:	bd80      	pop	{r7, pc}

0801480a <LoRaMacClassBRestoreNvmCtx>:

bool LoRaMacClassBRestoreNvmCtx( void* classBNvmCtx )
{
 801480a:	b580      	push	{r7, lr}
 801480c:	b082      	sub	sp, #8
 801480e:	af00      	add	r7, sp, #0
 8014810:	6078      	str	r0, [r7, #4]
    else
    {
        return false;
    }
#else
    return true;
 8014812:	2301      	movs	r3, #1
#endif // LORAMAC_CLASSB_ENABLED
}
 8014814:	0018      	movs	r0, r3
 8014816:	46bd      	mov	sp, r7
 8014818:	b002      	add	sp, #8
 801481a:	bd80      	pop	{r7, pc}

0801481c <LoRaMacClassBGetNvmCtx>:

void* LoRaMacClassBGetNvmCtx( size_t* classBNvmCtxSize )
{
 801481c:	b580      	push	{r7, lr}
 801481e:	b082      	sub	sp, #8
 8014820:	af00      	add	r7, sp, #0
 8014822:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    *classBNvmCtxSize = sizeof( NvmCtx );
    return &NvmCtx;
#else
    *classBNvmCtxSize = 0;
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	2200      	movs	r2, #0
 8014828:	601a      	str	r2, [r3, #0]
    return NULL;
 801482a:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 801482c:	0018      	movs	r0, r3
 801482e:	46bd      	mov	sp, r7
 8014830:	b002      	add	sp, #8
 8014832:	bd80      	pop	{r7, pc}

08014834 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8014834:	b580      	push	{r7, lr}
 8014836:	b082      	sub	sp, #8
 8014838:	af00      	add	r7, sp, #0
 801483a:	0002      	movs	r2, r0
 801483c:	1dfb      	adds	r3, r7, #7
 801483e:	701a      	strb	r2, [r3, #0]
            Ctx.BeaconState = beaconState;
        }
    }
    Ctx.NvmCtx->BeaconCtx.BeaconState = Ctx.BeaconState;
#endif // LORAMAC_CLASSB_ENABLED
}
 8014840:	46c0      	nop			; (mov r8, r8)
 8014842:	46bd      	mov	sp, r7
 8014844:	b002      	add	sp, #8
 8014846:	bd80      	pop	{r7, pc}

08014848 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8014848:	b580      	push	{r7, lr}
 801484a:	b082      	sub	sp, #8
 801484c:	af00      	add	r7, sp, #0
 801484e:	0002      	movs	r2, r0
 8014850:	1dfb      	adds	r3, r7, #7
 8014852:	701a      	strb	r2, [r3, #0]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif // LORAMAC_CLASSB_ENABLED
}
 8014854:	46c0      	nop			; (mov r8, r8)
 8014856:	46bd      	mov	sp, r7
 8014858:	b002      	add	sp, #8
 801485a:	bd80      	pop	{r7, pc}

0801485c <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 801485c:	b580      	push	{r7, lr}
 801485e:	b082      	sub	sp, #8
 8014860:	af00      	add	r7, sp, #0
 8014862:	0002      	movs	r2, r0
 8014864:	1dfb      	adds	r3, r7, #7
 8014866:	701a      	strb	r2, [r3, #0]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif // LORAMAC_CLASSB_ENABLED
}
 8014868:	46c0      	nop			; (mov r8, r8)
 801486a:	46bd      	mov	sp, r7
 801486c:	b002      	add	sp, #8
 801486e:	bd80      	pop	{r7, pc}

08014870 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8014870:	b580      	push	{r7, lr}
 8014872:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8014874:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8014876:	0018      	movs	r0, r3
 8014878:	46bd      	mov	sp, r7
 801487a:	bd80      	pop	{r7, pc}

0801487c <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 801487c:	b580      	push	{r7, lr}
 801487e:	b082      	sub	sp, #8
 8014880:	af00      	add	r7, sp, #0
 8014882:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8014884:	46c0      	nop			; (mov r8, r8)
 8014886:	46bd      	mov	sp, r7
 8014888:	b002      	add	sp, #8
 801488a:	bd80      	pop	{r7, pc}

0801488c <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 801488c:	b580      	push	{r7, lr}
 801488e:	b082      	sub	sp, #8
 8014890:	af00      	add	r7, sp, #0
 8014892:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8014894:	46c0      	nop			; (mov r8, r8)
 8014896:	46bd      	mov	sp, r7
 8014898:	b002      	add	sp, #8
 801489a:	bd80      	pop	{r7, pc}

0801489c <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 801489c:	b580      	push	{r7, lr}
 801489e:	b082      	sub	sp, #8
 80148a0:	af00      	add	r7, sp, #0
 80148a2:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 80148a4:	46c0      	nop			; (mov r8, r8)
 80148a6:	46bd      	mov	sp, r7
 80148a8:	b002      	add	sp, #8
 80148aa:	bd80      	pop	{r7, pc}

080148ac <LoRaMacClassBRxBeacon>:
    }
}
#endif // LORAMAC_CLASSB_ENABLED

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 80148ac:	b580      	push	{r7, lr}
 80148ae:	b082      	sub	sp, #8
 80148b0:	af00      	add	r7, sp, #0
 80148b2:	6078      	str	r0, [r7, #4]
 80148b4:	000a      	movs	r2, r1
 80148b6:	1cbb      	adds	r3, r7, #2
 80148b8:	801a      	strh	r2, [r3, #0]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 80148ba:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 80148bc:	0018      	movs	r0, r3
 80148be:	46bd      	mov	sp, r7
 80148c0:	b002      	add	sp, #8
 80148c2:	bd80      	pop	{r7, pc}

080148c4 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 80148c4:	b580      	push	{r7, lr}
 80148c6:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80148c8:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 80148ca:	0018      	movs	r0, r3
 80148cc:	46bd      	mov	sp, r7
 80148ce:	bd80      	pop	{r7, pc}

080148d0 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 80148d0:	b580      	push	{r7, lr}
 80148d2:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80148d4:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 80148d6:	0018      	movs	r0, r3
 80148d8:	46bd      	mov	sp, r7
 80148da:	bd80      	pop	{r7, pc}

080148dc <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 80148dc:	b580      	push	{r7, lr}
 80148de:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80148e0:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 80148e2:	0018      	movs	r0, r3
 80148e4:	46bd      	mov	sp, r7
 80148e6:	bd80      	pop	{r7, pc}

080148e8 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 80148e8:	b580      	push	{r7, lr}
 80148ea:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80148ec:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 80148ee:	0018      	movs	r0, r3
 80148f0:	46bd      	mov	sp, r7
 80148f2:	bd80      	pop	{r7, pc}

080148f4 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 80148f4:	b580      	push	{r7, lr}
 80148f6:	b082      	sub	sp, #8
 80148f8:	af00      	add	r7, sp, #0
 80148fa:	0002      	movs	r2, r0
 80148fc:	1dfb      	adds	r3, r7, #7
 80148fe:	701a      	strb	r2, [r3, #0]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.NvmCtx->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    Ctx.NvmCtx->PingSlotCtx.PingPeriod = CalcPingPeriod( Ctx.NvmCtx->PingSlotCtx.PingNb );
    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
 8014900:	46c0      	nop			; (mov r8, r8)
 8014902:	46bd      	mov	sp, r7
 8014904:	b002      	add	sp, #8
 8014906:	bd80      	pop	{r7, pc}

08014908 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8014908:	b580      	push	{r7, lr}
 801490a:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 801490c:	46c0      	nop			; (mov r8, r8)
 801490e:	46bd      	mov	sp, r7
 8014910:	bd80      	pop	{r7, pc}

08014912 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8014912:	b580      	push	{r7, lr}
 8014914:	af00      	add	r7, sp, #0

        Ctx.NvmCtx->BeaconCtx.BeaconState = Ctx.BeaconState;
        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8014916:	46c0      	nop			; (mov r8, r8)
 8014918:	46bd      	mov	sp, r7
 801491a:	bd80      	pop	{r7, pc}

0801491c <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 801491c:	b580      	push	{r7, lr}
 801491e:	b082      	sub	sp, #8
 8014920:	af00      	add	r7, sp, #0
 8014922:	0002      	movs	r2, r0
 8014924:	1dfb      	adds	r3, r7, #7
 8014926:	701a      	strb	r2, [r3, #0]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014928:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
 801492a:	0018      	movs	r0, r3
 801492c:	46bd      	mov	sp, r7
 801492e:	b002      	add	sp, #8
 8014930:	bd80      	pop	{r7, pc}

08014932 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8014932:	b580      	push	{r7, lr}
 8014934:	b082      	sub	sp, #8
 8014936:	af00      	add	r7, sp, #0
 8014938:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 801493a:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
 801493c:	0018      	movs	r0, r3
 801493e:	46bd      	mov	sp, r7
 8014940:	b002      	add	sp, #8
 8014942:	bd80      	pop	{r7, pc}

08014944 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8014944:	b580      	push	{r7, lr}
 8014946:	b082      	sub	sp, #8
 8014948:	af00      	add	r7, sp, #0
 801494a:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 801494c:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
 801494e:	0018      	movs	r0, r3
 8014950:	46bd      	mov	sp, r7
 8014952:	b002      	add	sp, #8
 8014954:	bd80      	pop	{r7, pc}

08014956 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8014956:	b580      	push	{r7, lr}
 8014958:	af00      	add	r7, sp, #0
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        Ctx.NvmCtx->PingSlotCtx.Ctrl.Assigned = 1;
        NvmContextChange( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 801495a:	46c0      	nop			; (mov r8, r8)
 801495c:	46bd      	mov	sp, r7
 801495e:	bd80      	pop	{r7, pc}

08014960 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8014960:	b580      	push	{r7, lr}
 8014962:	b082      	sub	sp, #8
 8014964:	af00      	add	r7, sp, #0
 8014966:	0002      	movs	r2, r0
 8014968:	6039      	str	r1, [r7, #0]
 801496a:	1dfb      	adds	r3, r7, #7
 801496c:	701a      	strb	r2, [r3, #0]
        NvmContextChange( );
    }

    return status;
#else
    return 0;
 801496e:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8014970:	0018      	movs	r0, r3
 8014972:	46bd      	mov	sp, r7
 8014974:	b002      	add	sp, #8
 8014976:	bd80      	pop	{r7, pc}

08014978 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8014978:	b580      	push	{r7, lr}
 801497a:	b082      	sub	sp, #8
 801497c:	af00      	add	r7, sp, #0
 801497e:	603a      	str	r2, [r7, #0]
 8014980:	1dbb      	adds	r3, r7, #6
 8014982:	1c02      	adds	r2, r0, #0
 8014984:	801a      	strh	r2, [r3, #0]
 8014986:	1d7b      	adds	r3, r7, #5
 8014988:	1c0a      	adds	r2, r1, #0
 801498a:	701a      	strb	r2, [r3, #0]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 801498c:	46c0      	nop			; (mov r8, r8)
 801498e:	46bd      	mov	sp, r7
 8014990:	b002      	add	sp, #8
 8014992:	bd80      	pop	{r7, pc}

08014994 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8014994:	b580      	push	{r7, lr}
 8014996:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8014998:	46c0      	nop			; (mov r8, r8)
 801499a:	46bd      	mov	sp, r7
 801499c:	bd80      	pop	{r7, pc}

0801499e <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 801499e:	b580      	push	{r7, lr}
 80149a0:	b082      	sub	sp, #8
 80149a2:	af00      	add	r7, sp, #0
 80149a4:	6078      	str	r0, [r7, #4]
        NvmContextChange( );
        return true;
    }
    return false;
#else
    return false;
 80149a6:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 80149a8:	0018      	movs	r0, r3
 80149aa:	46bd      	mov	sp, r7
 80149ac:	b002      	add	sp, #8
 80149ae:	bd80      	pop	{r7, pc}

080149b0 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 80149b0:	b580      	push	{r7, lr}
 80149b2:	b082      	sub	sp, #8
 80149b4:	af00      	add	r7, sp, #0
 80149b6:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 80149b8:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 80149ba:	0018      	movs	r0, r3
 80149bc:	46bd      	mov	sp, r7
 80149be:	b002      	add	sp, #8
 80149c0:	bd80      	pop	{r7, pc}

080149c2 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 80149c2:	b580      	push	{r7, lr}
 80149c4:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif // LORAMAC_CLASSB_ENABLED
}
 80149c6:	46c0      	nop			; (mov r8, r8)
 80149c8:	46bd      	mov	sp, r7
 80149ca:	bd80      	pop	{r7, pc}

080149cc <LoRaMacClassBProcess>:
    }
#endif // LORAMAC_CLASSB_ENABLED
}

void LoRaMacClassBProcess( void )
{
 80149cc:	b580      	push	{r7, lr}
 80149ce:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 80149d0:	46c0      	nop			; (mov r8, r8)
 80149d2:	46bd      	mov	sp, r7
 80149d4:	bd80      	pop	{r7, pc}

080149d6 <IsSlotFree>:
 *
 * \param[IN]     slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 80149d6:	b580      	push	{r7, lr}
 80149d8:	b084      	sub	sp, #16
 80149da:	af00      	add	r7, sp, #0
 80149dc:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80149e2:	230e      	movs	r3, #14
 80149e4:	18fb      	adds	r3, r7, r3
 80149e6:	2200      	movs	r2, #0
 80149e8:	801a      	strh	r2, [r3, #0]
 80149ea:	e00f      	b.n	8014a0c <IsSlotFree+0x36>
    {
        if( mem[size] != 0x00 )
 80149ec:	230e      	movs	r3, #14
 80149ee:	18fb      	adds	r3, r7, r3
 80149f0:	881b      	ldrh	r3, [r3, #0]
 80149f2:	68ba      	ldr	r2, [r7, #8]
 80149f4:	18d3      	adds	r3, r2, r3
 80149f6:	781b      	ldrb	r3, [r3, #0]
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	d001      	beq.n	8014a00 <IsSlotFree+0x2a>
        {
            return false;
 80149fc:	2300      	movs	r3, #0
 80149fe:	e00b      	b.n	8014a18 <IsSlotFree+0x42>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8014a00:	210e      	movs	r1, #14
 8014a02:	187b      	adds	r3, r7, r1
 8014a04:	881a      	ldrh	r2, [r3, #0]
 8014a06:	187b      	adds	r3, r7, r1
 8014a08:	3201      	adds	r2, #1
 8014a0a:	801a      	strh	r2, [r3, #0]
 8014a0c:	230e      	movs	r3, #14
 8014a0e:	18fb      	adds	r3, r7, r3
 8014a10:	881b      	ldrh	r3, [r3, #0]
 8014a12:	2b0f      	cmp	r3, #15
 8014a14:	d9ea      	bls.n	80149ec <IsSlotFree+0x16>
        }
    }
    return true;
 8014a16:	2301      	movs	r3, #1
}
 8014a18:	0018      	movs	r0, r3
 8014a1a:	46bd      	mov	sp, r7
 8014a1c:	b004      	add	sp, #16
 8014a1e:	bd80      	pop	{r7, pc}

08014a20 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8014a20:	b580      	push	{r7, lr}
 8014a22:	b082      	sub	sp, #8
 8014a24:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8014a26:	1dfb      	adds	r3, r7, #7
 8014a28:	2200      	movs	r2, #0
 8014a2a:	701a      	strb	r2, [r3, #0]

    while( IsSlotFree( ( const MacCommand_t* )&NvmCtx.MacCommandSlots[itr] ) == false )
 8014a2c:	e00a      	b.n	8014a44 <MallocNewMacCommandSlot+0x24>
    {
        itr++;
 8014a2e:	1dfb      	adds	r3, r7, #7
 8014a30:	781a      	ldrb	r2, [r3, #0]
 8014a32:	1dfb      	adds	r3, r7, #7
 8014a34:	3201      	adds	r2, #1
 8014a36:	701a      	strb	r2, [r3, #0]
        if( itr == NUM_OF_MAC_COMMANDS )
 8014a38:	1dfb      	adds	r3, r7, #7
 8014a3a:	781b      	ldrb	r3, [r3, #0]
 8014a3c:	2b0f      	cmp	r3, #15
 8014a3e:	d101      	bne.n	8014a44 <MallocNewMacCommandSlot+0x24>
        {
            return NULL;
 8014a40:	2300      	movs	r3, #0
 8014a42:	e017      	b.n	8014a74 <MallocNewMacCommandSlot+0x54>
    while( IsSlotFree( ( const MacCommand_t* )&NvmCtx.MacCommandSlots[itr] ) == false )
 8014a44:	1dfb      	adds	r3, r7, #7
 8014a46:	781b      	ldrb	r3, [r3, #0]
 8014a48:	011b      	lsls	r3, r3, #4
 8014a4a:	3308      	adds	r3, #8
 8014a4c:	001a      	movs	r2, r3
 8014a4e:	4b0b      	ldr	r3, [pc, #44]	; (8014a7c <MallocNewMacCommandSlot+0x5c>)
 8014a50:	18d3      	adds	r3, r2, r3
 8014a52:	0018      	movs	r0, r3
 8014a54:	f7ff ffbf 	bl	80149d6 <IsSlotFree>
 8014a58:	0003      	movs	r3, r0
 8014a5a:	001a      	movs	r2, r3
 8014a5c:	2301      	movs	r3, #1
 8014a5e:	4053      	eors	r3, r2
 8014a60:	b2db      	uxtb	r3, r3
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d1e3      	bne.n	8014a2e <MallocNewMacCommandSlot+0xe>
        }
    }

    return &NvmCtx.MacCommandSlots[itr];
 8014a66:	1dfb      	adds	r3, r7, #7
 8014a68:	781b      	ldrb	r3, [r3, #0]
 8014a6a:	011b      	lsls	r3, r3, #4
 8014a6c:	3308      	adds	r3, #8
 8014a6e:	001a      	movs	r2, r3
 8014a70:	4b02      	ldr	r3, [pc, #8]	; (8014a7c <MallocNewMacCommandSlot+0x5c>)
 8014a72:	18d3      	adds	r3, r2, r3
}
 8014a74:	0018      	movs	r0, r3
 8014a76:	46bd      	mov	sp, r7
 8014a78:	b002      	add	sp, #8
 8014a7a:	bd80      	pop	{r7, pc}
 8014a7c:	20000bf0 	.word	0x20000bf0

08014a80 <FreeMacCommandSlot>:
 * \param[IN]     slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8014a80:	b580      	push	{r7, lr}
 8014a82:	b082      	sub	sp, #8
 8014a84:	af00      	add	r7, sp, #0
 8014a86:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	d101      	bne.n	8014a92 <FreeMacCommandSlot+0x12>
    {
        return false;
 8014a8e:	2300      	movs	r3, #0
 8014a90:	e006      	b.n	8014aa0 <FreeMacCommandSlot+0x20>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	2210      	movs	r2, #16
 8014a96:	2100      	movs	r1, #0
 8014a98:	0018      	movs	r0, r3
 8014a9a:	f004 fd6b 	bl	8019574 <memset1>

    return true;
 8014a9e:	2301      	movs	r3, #1
}
 8014aa0:	0018      	movs	r0, r3
 8014aa2:	46bd      	mov	sp, r7
 8014aa4:	b002      	add	sp, #8
 8014aa6:	bd80      	pop	{r7, pc}

08014aa8 <LinkedListInit>:
 *
 * \param[IN]     list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8014aa8:	b580      	push	{r7, lr}
 8014aaa:	b082      	sub	sp, #8
 8014aac:	af00      	add	r7, sp, #0
 8014aae:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	2b00      	cmp	r3, #0
 8014ab4:	d101      	bne.n	8014aba <LinkedListInit+0x12>
    {
        return false;
 8014ab6:	2300      	movs	r3, #0
 8014ab8:	e006      	b.n	8014ac8 <LinkedListInit+0x20>
    }

    list->First = NULL;
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	2200      	movs	r2, #0
 8014abe:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	2200      	movs	r2, #0
 8014ac4:	605a      	str	r2, [r3, #4]

    return true;
 8014ac6:	2301      	movs	r3, #1
}
 8014ac8:	0018      	movs	r0, r3
 8014aca:	46bd      	mov	sp, r7
 8014acc:	b002      	add	sp, #8
 8014ace:	bd80      	pop	{r7, pc}

08014ad0 <LinkedListAdd>:
 * \param[IN]     list           - List where the element shall be added.
 * \param[IN]     element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8014ad0:	b580      	push	{r7, lr}
 8014ad2:	b082      	sub	sp, #8
 8014ad4:	af00      	add	r7, sp, #0
 8014ad6:	6078      	str	r0, [r7, #4]
 8014ad8:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d002      	beq.n	8014ae6 <LinkedListAdd+0x16>
 8014ae0:	683b      	ldr	r3, [r7, #0]
 8014ae2:	2b00      	cmp	r3, #0
 8014ae4:	d101      	bne.n	8014aea <LinkedListAdd+0x1a>
    {
        return false;
 8014ae6:	2300      	movs	r3, #0
 8014ae8:	e015      	b.n	8014b16 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	681b      	ldr	r3, [r3, #0]
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	d102      	bne.n	8014af8 <LinkedListAdd+0x28>
    {
        list->First = element;
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	683a      	ldr	r2, [r7, #0]
 8014af6:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	685b      	ldr	r3, [r3, #4]
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	d003      	beq.n	8014b08 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	685b      	ldr	r3, [r3, #4]
 8014b04:	683a      	ldr	r2, [r7, #0]
 8014b06:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8014b08:	683b      	ldr	r3, [r7, #0]
 8014b0a:	2200      	movs	r2, #0
 8014b0c:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	683a      	ldr	r2, [r7, #0]
 8014b12:	605a      	str	r2, [r3, #4]

    return true;
 8014b14:	2301      	movs	r3, #1
}
 8014b16:	0018      	movs	r0, r3
 8014b18:	46bd      	mov	sp, r7
 8014b1a:	b002      	add	sp, #8
 8014b1c:	bd80      	pop	{r7, pc}

08014b1e <LinkedListGetPrevious>:
 * \param[IN]     list           - List
 * \param[IN]     element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8014b1e:	b580      	push	{r7, lr}
 8014b20:	b084      	sub	sp, #16
 8014b22:	af00      	add	r7, sp, #0
 8014b24:	6078      	str	r0, [r7, #4]
 8014b26:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	d002      	beq.n	8014b34 <LinkedListGetPrevious+0x16>
 8014b2e:	683b      	ldr	r3, [r7, #0]
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	d101      	bne.n	8014b38 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8014b34:	2300      	movs	r3, #0
 8014b36:	e016      	b.n	8014b66 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	681b      	ldr	r3, [r3, #0]
 8014b3c:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8014b3e:	683a      	ldr	r2, [r7, #0]
 8014b40:	68fb      	ldr	r3, [r7, #12]
 8014b42:	429a      	cmp	r2, r3
 8014b44:	d00c      	beq.n	8014b60 <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8014b46:	e002      	b.n	8014b4e <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8014b48:	68fb      	ldr	r3, [r7, #12]
 8014b4a:	681b      	ldr	r3, [r3, #0]
 8014b4c:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8014b4e:	68fb      	ldr	r3, [r7, #12]
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	d007      	beq.n	8014b64 <LinkedListGetPrevious+0x46>
 8014b54:	68fb      	ldr	r3, [r7, #12]
 8014b56:	681b      	ldr	r3, [r3, #0]
 8014b58:	683a      	ldr	r2, [r7, #0]
 8014b5a:	429a      	cmp	r2, r3
 8014b5c:	d1f4      	bne.n	8014b48 <LinkedListGetPrevious+0x2a>
 8014b5e:	e001      	b.n	8014b64 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8014b60:	2300      	movs	r3, #0
 8014b62:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8014b64:	68fb      	ldr	r3, [r7, #12]
}
 8014b66:	0018      	movs	r0, r3
 8014b68:	46bd      	mov	sp, r7
 8014b6a:	b004      	add	sp, #16
 8014b6c:	bd80      	pop	{r7, pc}

08014b6e <LinkedListRemove>:
 * \param[IN]     list           - List where the element shall be removed from.
 * \param[IN]     element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8014b6e:	b580      	push	{r7, lr}
 8014b70:	b084      	sub	sp, #16
 8014b72:	af00      	add	r7, sp, #0
 8014b74:	6078      	str	r0, [r7, #4]
 8014b76:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	d002      	beq.n	8014b84 <LinkedListRemove+0x16>
 8014b7e:	683b      	ldr	r3, [r7, #0]
 8014b80:	2b00      	cmp	r3, #0
 8014b82:	d101      	bne.n	8014b88 <LinkedListRemove+0x1a>
    {
        return false;
 8014b84:	2300      	movs	r3, #0
 8014b86:	e023      	b.n	8014bd0 <LinkedListRemove+0x62>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8014b88:	683a      	ldr	r2, [r7, #0]
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	0011      	movs	r1, r2
 8014b8e:	0018      	movs	r0, r3
 8014b90:	f7ff ffc5 	bl	8014b1e <LinkedListGetPrevious>
 8014b94:	0003      	movs	r3, r0
 8014b96:	60fb      	str	r3, [r7, #12]

    if( list->First == element )
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	681b      	ldr	r3, [r3, #0]
 8014b9c:	683a      	ldr	r2, [r7, #0]
 8014b9e:	429a      	cmp	r2, r3
 8014ba0:	d103      	bne.n	8014baa <LinkedListRemove+0x3c>
    {
        list->First = element->Next;
 8014ba2:	683b      	ldr	r3, [r7, #0]
 8014ba4:	681a      	ldr	r2, [r3, #0]
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	685b      	ldr	r3, [r3, #4]
 8014bae:	683a      	ldr	r2, [r7, #0]
 8014bb0:	429a      	cmp	r2, r3
 8014bb2:	d102      	bne.n	8014bba <LinkedListRemove+0x4c>
    {
        list->Last = PrevElement;
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	68fa      	ldr	r2, [r7, #12]
 8014bb8:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8014bba:	68fb      	ldr	r3, [r7, #12]
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	d003      	beq.n	8014bc8 <LinkedListRemove+0x5a>
    {
        PrevElement->Next = element->Next;
 8014bc0:	683b      	ldr	r3, [r7, #0]
 8014bc2:	681a      	ldr	r2, [r3, #0]
 8014bc4:	68fb      	ldr	r3, [r7, #12]
 8014bc6:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8014bc8:	683b      	ldr	r3, [r7, #0]
 8014bca:	2200      	movs	r2, #0
 8014bcc:	601a      	str	r2, [r3, #0]

    return true;
 8014bce:	2301      	movs	r3, #1
}
 8014bd0:	0018      	movs	r0, r3
 8014bd2:	46bd      	mov	sp, r7
 8014bd4:	b004      	add	sp, #16
 8014bd6:	bd80      	pop	{r7, pc}

08014bd8 <IsSticky>:
 * \param[IN]   cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8014bd8:	b580      	push	{r7, lr}
 8014bda:	b082      	sub	sp, #8
 8014bdc:	af00      	add	r7, sp, #0
 8014bde:	0002      	movs	r2, r0
 8014be0:	1dfb      	adds	r3, r7, #7
 8014be2:	701a      	strb	r2, [r3, #0]
    switch( cid )
 8014be4:	1dfb      	adds	r3, r7, #7
 8014be6:	781b      	ldrb	r3, [r3, #0]
 8014be8:	2b05      	cmp	r3, #5
 8014bea:	d003      	beq.n	8014bf4 <IsSticky+0x1c>
 8014bec:	db04      	blt.n	8014bf8 <IsSticky+0x20>
 8014bee:	3b08      	subs	r3, #8
 8014bf0:	2b02      	cmp	r3, #2
 8014bf2:	d801      	bhi.n	8014bf8 <IsSticky+0x20>
    {
        case MOTE_MAC_DL_CHANNEL_ANS:
        case MOTE_MAC_RX_PARAM_SETUP_ANS:
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
            return true;
 8014bf4:	2301      	movs	r3, #1
 8014bf6:	e000      	b.n	8014bfa <IsSticky+0x22>
        default:
            return false;
 8014bf8:	2300      	movs	r3, #0
    }
}
 8014bfa:	0018      	movs	r0, r3
 8014bfc:	46bd      	mov	sp, r7
 8014bfe:	b002      	add	sp, #8
 8014c00:	bd80      	pop	{r7, pc}
	...

08014c04 <NvmCtxCallback>:

/*
 * \brief Wrapper function for the NvmCtx
 */
static void NvmCtxCallback( void )
{
 8014c04:	b580      	push	{r7, lr}
 8014c06:	af00      	add	r7, sp, #0
    if( CommandsNvmCtxChanged != NULL )
 8014c08:	4b04      	ldr	r3, [pc, #16]	; (8014c1c <NvmCtxCallback+0x18>)
 8014c0a:	681b      	ldr	r3, [r3, #0]
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d002      	beq.n	8014c16 <NvmCtxCallback+0x12>
    {
        CommandsNvmCtxChanged( );
 8014c10:	4b02      	ldr	r3, [pc, #8]	; (8014c1c <NvmCtxCallback+0x18>)
 8014c12:	681b      	ldr	r3, [r3, #0]
 8014c14:	4798      	blx	r3
    }
}
 8014c16:	46c0      	nop			; (mov r8, r8)
 8014c18:	46bd      	mov	sp, r7
 8014c1a:	bd80      	pop	{r7, pc}
 8014c1c:	20000bec 	.word	0x20000bec

08014c20 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( LoRaMacCommandsNvmEvent commandsNvmCtxChanged )
{
 8014c20:	b580      	push	{r7, lr}
 8014c22:	b082      	sub	sp, #8
 8014c24:	af00      	add	r7, sp, #0
 8014c26:	6078      	str	r0, [r7, #4]
    // Initialize with default
    memset1( ( uint8_t* )&NvmCtx, 0, sizeof( NvmCtx ) );
 8014c28:	4b08      	ldr	r3, [pc, #32]	; (8014c4c <LoRaMacCommandsInit+0x2c>)
 8014c2a:	22fc      	movs	r2, #252	; 0xfc
 8014c2c:	2100      	movs	r1, #0
 8014c2e:	0018      	movs	r0, r3
 8014c30:	f004 fca0 	bl	8019574 <memset1>

    LinkedListInit( &NvmCtx.MacCommandList );
 8014c34:	4b05      	ldr	r3, [pc, #20]	; (8014c4c <LoRaMacCommandsInit+0x2c>)
 8014c36:	0018      	movs	r0, r3
 8014c38:	f7ff ff36 	bl	8014aa8 <LinkedListInit>

    // Assign callback
    CommandsNvmCtxChanged = commandsNvmCtxChanged;
 8014c3c:	4b04      	ldr	r3, [pc, #16]	; (8014c50 <LoRaMacCommandsInit+0x30>)
 8014c3e:	687a      	ldr	r2, [r7, #4]
 8014c40:	601a      	str	r2, [r3, #0]

    return LORAMAC_COMMANDS_SUCCESS;
 8014c42:	2300      	movs	r3, #0
}
 8014c44:	0018      	movs	r0, r3
 8014c46:	46bd      	mov	sp, r7
 8014c48:	b002      	add	sp, #8
 8014c4a:	bd80      	pop	{r7, pc}
 8014c4c:	20000bf0 	.word	0x20000bf0
 8014c50:	20000bec 	.word	0x20000bec

08014c54 <LoRaMacCommandsRestoreNvmCtx>:

LoRaMacCommandStatus_t LoRaMacCommandsRestoreNvmCtx( void* commandsNvmCtx )
{
 8014c54:	b580      	push	{r7, lr}
 8014c56:	b082      	sub	sp, #8
 8014c58:	af00      	add	r7, sp, #0
 8014c5a:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( commandsNvmCtx != NULL )
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	d007      	beq.n	8014c72 <LoRaMacCommandsRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* )&NvmCtx, ( uint8_t* )commandsNvmCtx, sizeof( NvmCtx ) );
 8014c62:	6879      	ldr	r1, [r7, #4]
 8014c64:	4b05      	ldr	r3, [pc, #20]	; (8014c7c <LoRaMacCommandsRestoreNvmCtx+0x28>)
 8014c66:	22fc      	movs	r2, #252	; 0xfc
 8014c68:	0018      	movs	r0, r3
 8014c6a:	f004 fc45 	bl	80194f8 <memcpy1>
        return LORAMAC_COMMANDS_SUCCESS;
 8014c6e:	2300      	movs	r3, #0
 8014c70:	e000      	b.n	8014c74 <LoRaMacCommandsRestoreNvmCtx+0x20>
    }
    else
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014c72:	2301      	movs	r3, #1
    }
}
 8014c74:	0018      	movs	r0, r3
 8014c76:	46bd      	mov	sp, r7
 8014c78:	b002      	add	sp, #8
 8014c7a:	bd80      	pop	{r7, pc}
 8014c7c:	20000bf0 	.word	0x20000bf0

08014c80 <LoRaMacCommandsGetNvmCtx>:

void* LoRaMacCommandsGetNvmCtx( size_t* commandsNvmCtxSize )
{
 8014c80:	b580      	push	{r7, lr}
 8014c82:	b082      	sub	sp, #8
 8014c84:	af00      	add	r7, sp, #0
 8014c86:	6078      	str	r0, [r7, #4]
    *commandsNvmCtxSize = sizeof( NvmCtx );
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	22fc      	movs	r2, #252	; 0xfc
 8014c8c:	601a      	str	r2, [r3, #0]
    return &NvmCtx;
 8014c8e:	4b02      	ldr	r3, [pc, #8]	; (8014c98 <LoRaMacCommandsGetNvmCtx+0x18>)
}
 8014c90:	0018      	movs	r0, r3
 8014c92:	46bd      	mov	sp, r7
 8014c94:	b002      	add	sp, #8
 8014c96:	bd80      	pop	{r7, pc}
 8014c98:	20000bf0 	.word	0x20000bf0

08014c9c <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8014c9c:	b590      	push	{r4, r7, lr}
 8014c9e:	b087      	sub	sp, #28
 8014ca0:	af00      	add	r7, sp, #0
 8014ca2:	60b9      	str	r1, [r7, #8]
 8014ca4:	607a      	str	r2, [r7, #4]
 8014ca6:	230f      	movs	r3, #15
 8014ca8:	18fb      	adds	r3, r7, r3
 8014caa:	1c02      	adds	r2, r0, #0
 8014cac:	701a      	strb	r2, [r3, #0]
    if( payload == NULL )
 8014cae:	68bb      	ldr	r3, [r7, #8]
 8014cb0:	2b00      	cmp	r3, #0
 8014cb2:	d101      	bne.n	8014cb8 <LoRaMacCommandsAddCmd+0x1c>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014cb4:	2301      	movs	r3, #1
 8014cb6:	e03c      	b.n	8014d32 <LoRaMacCommandsAddCmd+0x96>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8014cb8:	f7ff feb2 	bl	8014a20 <MallocNewMacCommandSlot>
 8014cbc:	0003      	movs	r3, r0
 8014cbe:	617b      	str	r3, [r7, #20]

    if( newCmd == NULL )
 8014cc0:	697b      	ldr	r3, [r7, #20]
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	d101      	bne.n	8014cca <LoRaMacCommandsAddCmd+0x2e>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8014cc6:	2302      	movs	r3, #2
 8014cc8:	e033      	b.n	8014d32 <LoRaMacCommandsAddCmd+0x96>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &NvmCtx.MacCommandList, newCmd ) == false )
 8014cca:	697a      	ldr	r2, [r7, #20]
 8014ccc:	4b1b      	ldr	r3, [pc, #108]	; (8014d3c <LoRaMacCommandsAddCmd+0xa0>)
 8014cce:	0011      	movs	r1, r2
 8014cd0:	0018      	movs	r0, r3
 8014cd2:	f7ff fefd 	bl	8014ad0 <LinkedListAdd>
 8014cd6:	0003      	movs	r3, r0
 8014cd8:	001a      	movs	r2, r3
 8014cda:	2301      	movs	r3, #1
 8014cdc:	4053      	eors	r3, r2
 8014cde:	b2db      	uxtb	r3, r3
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	d001      	beq.n	8014ce8 <LoRaMacCommandsAddCmd+0x4c>
    {
        return LORAMAC_COMMANDS_ERROR;
 8014ce4:	2305      	movs	r3, #5
 8014ce6:	e024      	b.n	8014d32 <LoRaMacCommandsAddCmd+0x96>
    }

    // Set Values
    newCmd->CID = cid;
 8014ce8:	697b      	ldr	r3, [r7, #20]
 8014cea:	240f      	movs	r4, #15
 8014cec:	193a      	adds	r2, r7, r4
 8014cee:	7812      	ldrb	r2, [r2, #0]
 8014cf0:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8014cf2:	697b      	ldr	r3, [r7, #20]
 8014cf4:	687a      	ldr	r2, [r7, #4]
 8014cf6:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8014cf8:	697b      	ldr	r3, [r7, #20]
 8014cfa:	3305      	adds	r3, #5
 8014cfc:	687a      	ldr	r2, [r7, #4]
 8014cfe:	b292      	uxth	r2, r2
 8014d00:	68b9      	ldr	r1, [r7, #8]
 8014d02:	0018      	movs	r0, r3
 8014d04:	f004 fbf8 	bl	80194f8 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8014d08:	193b      	adds	r3, r7, r4
 8014d0a:	781b      	ldrb	r3, [r3, #0]
 8014d0c:	0018      	movs	r0, r3
 8014d0e:	f7ff ff63 	bl	8014bd8 <IsSticky>
 8014d12:	0003      	movs	r3, r0
 8014d14:	001a      	movs	r2, r3
 8014d16:	697b      	ldr	r3, [r7, #20]
 8014d18:	731a      	strb	r2, [r3, #12]

    NvmCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8014d1a:	4b08      	ldr	r3, [pc, #32]	; (8014d3c <LoRaMacCommandsAddCmd+0xa0>)
 8014d1c:	22f8      	movs	r2, #248	; 0xf8
 8014d1e:	589a      	ldr	r2, [r3, r2]
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	18d3      	adds	r3, r2, r3
 8014d24:	1c5a      	adds	r2, r3, #1
 8014d26:	4b05      	ldr	r3, [pc, #20]	; (8014d3c <LoRaMacCommandsAddCmd+0xa0>)
 8014d28:	21f8      	movs	r1, #248	; 0xf8
 8014d2a:	505a      	str	r2, [r3, r1]

    NvmCtxCallback( );
 8014d2c:	f7ff ff6a 	bl	8014c04 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 8014d30:	2300      	movs	r3, #0
}
 8014d32:	0018      	movs	r0, r3
 8014d34:	46bd      	mov	sp, r7
 8014d36:	b007      	add	sp, #28
 8014d38:	bd90      	pop	{r4, r7, pc}
 8014d3a:	46c0      	nop			; (mov r8, r8)
 8014d3c:	20000bf0 	.word	0x20000bf0

08014d40 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8014d40:	b580      	push	{r7, lr}
 8014d42:	b082      	sub	sp, #8
 8014d44:	af00      	add	r7, sp, #0
 8014d46:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	d101      	bne.n	8014d52 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014d4e:	2301      	movs	r3, #1
 8014d50:	e028      	b.n	8014da4 <LoRaMacCommandsRemoveCmd+0x64>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &NvmCtx.MacCommandList, macCmd ) == false )
 8014d52:	687a      	ldr	r2, [r7, #4]
 8014d54:	4b15      	ldr	r3, [pc, #84]	; (8014dac <LoRaMacCommandsRemoveCmd+0x6c>)
 8014d56:	0011      	movs	r1, r2
 8014d58:	0018      	movs	r0, r3
 8014d5a:	f7ff ff08 	bl	8014b6e <LinkedListRemove>
 8014d5e:	0003      	movs	r3, r0
 8014d60:	001a      	movs	r2, r3
 8014d62:	2301      	movs	r3, #1
 8014d64:	4053      	eors	r3, r2
 8014d66:	b2db      	uxtb	r3, r3
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	d001      	beq.n	8014d70 <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8014d6c:	2303      	movs	r3, #3
 8014d6e:	e019      	b.n	8014da4 <LoRaMacCommandsRemoveCmd+0x64>
    }

    NvmCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8014d70:	4b0e      	ldr	r3, [pc, #56]	; (8014dac <LoRaMacCommandsRemoveCmd+0x6c>)
 8014d72:	22f8      	movs	r2, #248	; 0xf8
 8014d74:	589a      	ldr	r2, [r3, r2]
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	689b      	ldr	r3, [r3, #8]
 8014d7a:	1ad3      	subs	r3, r2, r3
 8014d7c:	1e5a      	subs	r2, r3, #1
 8014d7e:	4b0b      	ldr	r3, [pc, #44]	; (8014dac <LoRaMacCommandsRemoveCmd+0x6c>)
 8014d80:	21f8      	movs	r1, #248	; 0xf8
 8014d82:	505a      	str	r2, [r3, r1]

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	0018      	movs	r0, r3
 8014d88:	f7ff fe7a 	bl	8014a80 <FreeMacCommandSlot>
 8014d8c:	0003      	movs	r3, r0
 8014d8e:	001a      	movs	r2, r3
 8014d90:	2301      	movs	r3, #1
 8014d92:	4053      	eors	r3, r2
 8014d94:	b2db      	uxtb	r3, r3
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d001      	beq.n	8014d9e <LoRaMacCommandsRemoveCmd+0x5e>
    {
        return LORAMAC_COMMANDS_ERROR;
 8014d9a:	2305      	movs	r3, #5
 8014d9c:	e002      	b.n	8014da4 <LoRaMacCommandsRemoveCmd+0x64>
    }

    NvmCtxCallback( );
 8014d9e:	f7ff ff31 	bl	8014c04 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 8014da2:	2300      	movs	r3, #0
}
 8014da4:	0018      	movs	r0, r3
 8014da6:	46bd      	mov	sp, r7
 8014da8:	b002      	add	sp, #8
 8014daa:	bd80      	pop	{r7, pc}
 8014dac:	20000bf0 	.word	0x20000bf0

08014db0 <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8014db0:	b580      	push	{r7, lr}
 8014db2:	b082      	sub	sp, #8
 8014db4:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 8014db6:	4b11      	ldr	r3, [pc, #68]	; (8014dfc <LoRaMacCommandsRemoveNoneStickyCmds+0x4c>)
 8014db8:	681b      	ldr	r3, [r3, #0]
 8014dba:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8014dbc:	e013      	b.n	8014de6 <LoRaMacCommandsRemoveNoneStickyCmds+0x36>
    {
        if( curElement->IsSticky == false )
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	7b1b      	ldrb	r3, [r3, #12]
 8014dc2:	2201      	movs	r2, #1
 8014dc4:	4053      	eors	r3, r2
 8014dc6:	b2db      	uxtb	r3, r3
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	d009      	beq.n	8014de0 <LoRaMacCommandsRemoveNoneStickyCmds+0x30>
        {
            nexElement = curElement->Next;
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	681b      	ldr	r3, [r3, #0]
 8014dd0:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	0018      	movs	r0, r3
 8014dd6:	f7ff ffb3 	bl	8014d40 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8014dda:	683b      	ldr	r3, [r7, #0]
 8014ddc:	607b      	str	r3, [r7, #4]
 8014dde:	e002      	b.n	8014de6 <LoRaMacCommandsRemoveNoneStickyCmds+0x36>
        }
        else
        {
            curElement = curElement->Next;
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	681b      	ldr	r3, [r3, #0]
 8014de4:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	2b00      	cmp	r3, #0
 8014dea:	d1e8      	bne.n	8014dbe <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    NvmCtxCallback( );
 8014dec:	f7ff ff0a 	bl	8014c04 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 8014df0:	2300      	movs	r3, #0
}
 8014df2:	0018      	movs	r0, r3
 8014df4:	46bd      	mov	sp, r7
 8014df6:	b002      	add	sp, #8
 8014df8:	bd80      	pop	{r7, pc}
 8014dfa:	46c0      	nop			; (mov r8, r8)
 8014dfc:	20000bf0 	.word	0x20000bf0

08014e00 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8014e00:	b580      	push	{r7, lr}
 8014e02:	b082      	sub	sp, #8
 8014e04:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 8014e06:	4b0f      	ldr	r3, [pc, #60]	; (8014e44 <LoRaMacCommandsRemoveStickyAnsCmds+0x44>)
 8014e08:	681b      	ldr	r3, [r3, #0]
 8014e0a:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8014e0c:	e00f      	b.n	8014e2e <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	681b      	ldr	r3, [r3, #0]
 8014e12:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	791b      	ldrb	r3, [r3, #4]
 8014e18:	0018      	movs	r0, r3
 8014e1a:	f7ff fedd 	bl	8014bd8 <IsSticky>
 8014e1e:	1e03      	subs	r3, r0, #0
 8014e20:	d003      	beq.n	8014e2a <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	0018      	movs	r0, r3
 8014e26:	f7ff ff8b 	bl	8014d40 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8014e2a:	683b      	ldr	r3, [r7, #0]
 8014e2c:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	2b00      	cmp	r3, #0
 8014e32:	d1ec      	bne.n	8014e0e <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    NvmCtxCallback( );
 8014e34:	f7ff fee6 	bl	8014c04 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 8014e38:	2300      	movs	r3, #0
}
 8014e3a:	0018      	movs	r0, r3
 8014e3c:	46bd      	mov	sp, r7
 8014e3e:	b002      	add	sp, #8
 8014e40:	bd80      	pop	{r7, pc}
 8014e42:	46c0      	nop			; (mov r8, r8)
 8014e44:	20000bf0 	.word	0x20000bf0

08014e48 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8014e48:	b580      	push	{r7, lr}
 8014e4a:	b082      	sub	sp, #8
 8014e4c:	af00      	add	r7, sp, #0
 8014e4e:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	d101      	bne.n	8014e5a <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014e56:	2301      	movs	r3, #1
 8014e58:	e005      	b.n	8014e66 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = NvmCtx.SerializedCmdsSize;
 8014e5a:	4b05      	ldr	r3, [pc, #20]	; (8014e70 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8014e5c:	22f8      	movs	r2, #248	; 0xf8
 8014e5e:	589a      	ldr	r2, [r3, r2]
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8014e64:	2300      	movs	r3, #0
}
 8014e66:	0018      	movs	r0, r3
 8014e68:	46bd      	mov	sp, r7
 8014e6a:	b002      	add	sp, #8
 8014e6c:	bd80      	pop	{r7, pc}
 8014e6e:	46c0      	nop			; (mov r8, r8)
 8014e70:	20000bf0 	.word	0x20000bf0

08014e74 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8014e74:	b590      	push	{r4, r7, lr}
 8014e76:	b089      	sub	sp, #36	; 0x24
 8014e78:	af00      	add	r7, sp, #0
 8014e7a:	60f8      	str	r0, [r7, #12]
 8014e7c:	60b9      	str	r1, [r7, #8]
 8014e7e:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = NvmCtx.MacCommandList.First;
 8014e80:	4b2a      	ldr	r3, [pc, #168]	; (8014f2c <LoRaMacCommandsSerializeCmds+0xb8>)
 8014e82:	681b      	ldr	r3, [r3, #0]
 8014e84:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8014e86:	231b      	movs	r3, #27
 8014e88:	18fb      	adds	r3, r7, r3
 8014e8a:	2200      	movs	r2, #0
 8014e8c:	701a      	strb	r2, [r3, #0]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	d002      	beq.n	8014e9a <LoRaMacCommandsSerializeCmds+0x26>
 8014e94:	68bb      	ldr	r3, [r7, #8]
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	d12d      	bne.n	8014ef6 <LoRaMacCommandsSerializeCmds+0x82>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014e9a:	2301      	movs	r3, #1
 8014e9c:	e042      	b.n	8014f24 <LoRaMacCommandsSerializeCmds+0xb0>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8014e9e:	241b      	movs	r4, #27
 8014ea0:	193b      	adds	r3, r7, r4
 8014ea2:	781b      	ldrb	r3, [r3, #0]
 8014ea4:	68fa      	ldr	r2, [r7, #12]
 8014ea6:	1ad2      	subs	r2, r2, r3
 8014ea8:	69fb      	ldr	r3, [r7, #28]
 8014eaa:	689b      	ldr	r3, [r3, #8]
 8014eac:	3301      	adds	r3, #1
 8014eae:	429a      	cmp	r2, r3
 8014eb0:	d325      	bcc.n	8014efe <LoRaMacCommandsSerializeCmds+0x8a>
        {
            buffer[itr++] = curElement->CID;
 8014eb2:	193b      	adds	r3, r7, r4
 8014eb4:	781b      	ldrb	r3, [r3, #0]
 8014eb6:	193a      	adds	r2, r7, r4
 8014eb8:	1c59      	adds	r1, r3, #1
 8014eba:	7011      	strb	r1, [r2, #0]
 8014ebc:	001a      	movs	r2, r3
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	189b      	adds	r3, r3, r2
 8014ec2:	69fa      	ldr	r2, [r7, #28]
 8014ec4:	7912      	ldrb	r2, [r2, #4]
 8014ec6:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8014ec8:	193b      	adds	r3, r7, r4
 8014eca:	781b      	ldrb	r3, [r3, #0]
 8014ecc:	687a      	ldr	r2, [r7, #4]
 8014ece:	18d0      	adds	r0, r2, r3
 8014ed0:	69fb      	ldr	r3, [r7, #28]
 8014ed2:	1d59      	adds	r1, r3, #5
 8014ed4:	69fb      	ldr	r3, [r7, #28]
 8014ed6:	689b      	ldr	r3, [r3, #8]
 8014ed8:	b29b      	uxth	r3, r3
 8014eda:	001a      	movs	r2, r3
 8014edc:	f004 fb0c 	bl	80194f8 <memcpy1>
            itr += curElement->PayloadSize;
 8014ee0:	69fb      	ldr	r3, [r7, #28]
 8014ee2:	689b      	ldr	r3, [r3, #8]
 8014ee4:	b2d9      	uxtb	r1, r3
 8014ee6:	193b      	adds	r3, r7, r4
 8014ee8:	193a      	adds	r2, r7, r4
 8014eea:	7812      	ldrb	r2, [r2, #0]
 8014eec:	188a      	adds	r2, r1, r2
 8014eee:	701a      	strb	r2, [r3, #0]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8014ef0:	69fb      	ldr	r3, [r7, #28]
 8014ef2:	681b      	ldr	r3, [r3, #0]
 8014ef4:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8014ef6:	69fb      	ldr	r3, [r7, #28]
 8014ef8:	2b00      	cmp	r3, #0
 8014efa:	d1d0      	bne.n	8014e9e <LoRaMacCommandsSerializeCmds+0x2a>
 8014efc:	e00a      	b.n	8014f14 <LoRaMacCommandsSerializeCmds+0xa0>
            break;
 8014efe:	46c0      	nop			; (mov r8, r8)
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8014f00:	e008      	b.n	8014f14 <LoRaMacCommandsSerializeCmds+0xa0>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8014f02:	69fb      	ldr	r3, [r7, #28]
 8014f04:	681b      	ldr	r3, [r3, #0]
 8014f06:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8014f08:	69fb      	ldr	r3, [r7, #28]
 8014f0a:	0018      	movs	r0, r3
 8014f0c:	f7ff ff18 	bl	8014d40 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8014f10:	697b      	ldr	r3, [r7, #20]
 8014f12:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8014f14:	69fb      	ldr	r3, [r7, #28]
 8014f16:	2b00      	cmp	r3, #0
 8014f18:	d1f3      	bne.n	8014f02 <LoRaMacCommandsSerializeCmds+0x8e>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8014f1a:	68bb      	ldr	r3, [r7, #8]
 8014f1c:	0018      	movs	r0, r3
 8014f1e:	f7ff ff93 	bl	8014e48 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8014f22:	2300      	movs	r3, #0
}
 8014f24:	0018      	movs	r0, r3
 8014f26:	46bd      	mov	sp, r7
 8014f28:	b009      	add	sp, #36	; 0x24
 8014f2a:	bd90      	pop	{r4, r7, pc}
 8014f2c:	20000bf0 	.word	0x20000bf0

08014f30 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 8014f30:	b580      	push	{r7, lr}
 8014f32:	b084      	sub	sp, #16
 8014f34:	af00      	add	r7, sp, #0
 8014f36:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	d101      	bne.n	8014f42 <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014f3e:	2301      	movs	r3, #1
 8014f40:	e016      	b.n	8014f70 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
 8014f42:	4b0d      	ldr	r3, [pc, #52]	; (8014f78 <LoRaMacCommandsStickyCmdsPending+0x48>)
 8014f44:	681b      	ldr	r3, [r3, #0]
 8014f46:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	2200      	movs	r2, #0
 8014f4c:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 8014f4e:	e00b      	b.n	8014f68 <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 8014f50:	68fb      	ldr	r3, [r7, #12]
 8014f52:	7b1b      	ldrb	r3, [r3, #12]
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	d004      	beq.n	8014f62 <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	2201      	movs	r2, #1
 8014f5c:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 8014f5e:	2300      	movs	r3, #0
 8014f60:	e006      	b.n	8014f70 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 8014f62:	68fb      	ldr	r3, [r7, #12]
 8014f64:	681b      	ldr	r3, [r3, #0]
 8014f66:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 8014f68:	68fb      	ldr	r3, [r7, #12]
 8014f6a:	2b00      	cmp	r3, #0
 8014f6c:	d1f0      	bne.n	8014f50 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8014f6e:	2300      	movs	r3, #0
}
 8014f70:	0018      	movs	r0, r3
 8014f72:	46bd      	mov	sp, r7
 8014f74:	b004      	add	sp, #16
 8014f76:	bd80      	pop	{r7, pc}
 8014f78:	20000bf0 	.word	0x20000bf0

08014f7c <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8014f7c:	b580      	push	{r7, lr}
 8014f7e:	b084      	sub	sp, #16
 8014f80:	af00      	add	r7, sp, #0
 8014f82:	0002      	movs	r2, r0
 8014f84:	1dfb      	adds	r3, r7, #7
 8014f86:	701a      	strb	r2, [r3, #0]
    uint8_t cidSize = 0;
 8014f88:	230f      	movs	r3, #15
 8014f8a:	18fb      	adds	r3, r7, r3
 8014f8c:	2200      	movs	r2, #0
 8014f8e:	701a      	strb	r2, [r3, #0]

    // Decode Frame MAC commands
    switch( cid )
 8014f90:	1dfb      	adds	r3, r7, #7
 8014f92:	781b      	ldrb	r3, [r3, #0]
 8014f94:	2b13      	cmp	r3, #19
 8014f96:	d84a      	bhi.n	801502e <LoRaMacCommandsGetCmdSize+0xb2>
 8014f98:	009a      	lsls	r2, r3, #2
 8014f9a:	4b29      	ldr	r3, [pc, #164]	; (8015040 <LoRaMacCommandsGetCmdSize+0xc4>)
 8014f9c:	18d3      	adds	r3, r2, r3
 8014f9e:	681b      	ldr	r3, [r3, #0]
 8014fa0:	469f      	mov	pc, r3
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8014fa2:	230f      	movs	r3, #15
 8014fa4:	18fb      	adds	r3, r7, r3
 8014fa6:	2203      	movs	r2, #3
 8014fa8:	701a      	strb	r2, [r3, #0]
            break;
 8014faa:	e041      	b.n	8015030 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8014fac:	230f      	movs	r3, #15
 8014fae:	18fb      	adds	r3, r7, r3
 8014fb0:	2205      	movs	r2, #5
 8014fb2:	701a      	strb	r2, [r3, #0]
            break;
 8014fb4:	e03c      	b.n	8015030 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8014fb6:	230f      	movs	r3, #15
 8014fb8:	18fb      	adds	r3, r7, r3
 8014fba:	2202      	movs	r2, #2
 8014fbc:	701a      	strb	r2, [r3, #0]
            break;
 8014fbe:	e037      	b.n	8015030 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 8014fc0:	230f      	movs	r3, #15
 8014fc2:	18fb      	adds	r3, r7, r3
 8014fc4:	2205      	movs	r2, #5
 8014fc6:	701a      	strb	r2, [r3, #0]
            break;
 8014fc8:	e032      	b.n	8015030 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8014fca:	230f      	movs	r3, #15
 8014fcc:	18fb      	adds	r3, r7, r3
 8014fce:	2201      	movs	r2, #1
 8014fd0:	701a      	strb	r2, [r3, #0]
            break;
 8014fd2:	e02d      	b.n	8015030 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8014fd4:	230f      	movs	r3, #15
 8014fd6:	18fb      	adds	r3, r7, r3
 8014fd8:	2206      	movs	r2, #6
 8014fda:	701a      	strb	r2, [r3, #0]
            break;
 8014fdc:	e028      	b.n	8015030 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8014fde:	230f      	movs	r3, #15
 8014fe0:	18fb      	adds	r3, r7, r3
 8014fe2:	2202      	movs	r2, #2
 8014fe4:	701a      	strb	r2, [r3, #0]
            break;
 8014fe6:	e023      	b.n	8015030 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8014fe8:	230f      	movs	r3, #15
 8014fea:	18fb      	adds	r3, r7, r3
 8014fec:	2202      	movs	r2, #2
 8014fee:	701a      	strb	r2, [r3, #0]
            break;
 8014ff0:	e01e      	b.n	8015030 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8014ff2:	230f      	movs	r3, #15
 8014ff4:	18fb      	adds	r3, r7, r3
 8014ff6:	2205      	movs	r2, #5
 8014ff8:	701a      	strb	r2, [r3, #0]
            break;
 8014ffa:	e019      	b.n	8015030 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8014ffc:	230f      	movs	r3, #15
 8014ffe:	18fb      	adds	r3, r7, r3
 8015000:	2206      	movs	r2, #6
 8015002:	701a      	strb	r2, [r3, #0]
            break;
 8015004:	e014      	b.n	8015030 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8015006:	230f      	movs	r3, #15
 8015008:	18fb      	adds	r3, r7, r3
 801500a:	2201      	movs	r2, #1
 801500c:	701a      	strb	r2, [r3, #0]
            break;
 801500e:	e00f      	b.n	8015030 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 8015010:	230f      	movs	r3, #15
 8015012:	18fb      	adds	r3, r7, r3
 8015014:	2205      	movs	r2, #5
 8015016:	701a      	strb	r2, [r3, #0]
            break;
 8015018:	e00a      	b.n	8015030 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 801501a:	230f      	movs	r3, #15
 801501c:	18fb      	adds	r3, r7, r3
 801501e:	2204      	movs	r2, #4
 8015020:	701a      	strb	r2, [r3, #0]
            break;
 8015022:	e005      	b.n	8015030 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8015024:	230f      	movs	r3, #15
 8015026:	18fb      	adds	r3, r7, r3
 8015028:	2204      	movs	r2, #4
 801502a:	701a      	strb	r2, [r3, #0]
            break;
 801502c:	e000      	b.n	8015030 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 801502e:	46c0      	nop			; (mov r8, r8)
        }
    }
    return cidSize;
 8015030:	230f      	movs	r3, #15
 8015032:	18fb      	adds	r3, r7, r3
 8015034:	781b      	ldrb	r3, [r3, #0]
}
 8015036:	0018      	movs	r0, r3
 8015038:	46bd      	mov	sp, r7
 801503a:	b004      	add	sp, #16
 801503c:	bd80      	pop	{r7, pc}
 801503e:	46c0      	nop			; (mov r8, r8)
 8015040:	0801fa98 	.word	0x0801fa98

08015044 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8015044:	b580      	push	{r7, lr}
 8015046:	b082      	sub	sp, #8
 8015048:	af00      	add	r7, sp, #0
 801504a:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 801504c:	4b08      	ldr	r3, [pc, #32]	; (8015070 <IncreaseBufferPointer+0x2c>)
 801504e:	691b      	ldr	r3, [r3, #16]
 8015050:	3310      	adds	r3, #16
 8015052:	687a      	ldr	r2, [r7, #4]
 8015054:	429a      	cmp	r2, r3
 8015056:	d103      	bne.n	8015060 <IncreaseBufferPointer+0x1c>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 8015058:	4b05      	ldr	r3, [pc, #20]	; (8015070 <IncreaseBufferPointer+0x2c>)
 801505a:	691b      	ldr	r3, [r3, #16]
 801505c:	607b      	str	r3, [r7, #4]
 801505e:	e002      	b.n	8015066 <IncreaseBufferPointer+0x22>
    }
    else
    {
        // Increase
        bufferPointer++;
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	3304      	adds	r3, #4
 8015064:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8015066:	687b      	ldr	r3, [r7, #4]
}
 8015068:	0018      	movs	r0, r3
 801506a:	46bd      	mov	sp, r7
 801506c:	b002      	add	sp, #8
 801506e:	bd80      	pop	{r7, pc}
 8015070:	20000d04 	.word	0x20000d04

08015074 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8015074:	b580      	push	{r7, lr}
 8015076:	b082      	sub	sp, #8
 8015078:	af00      	add	r7, sp, #0
 801507a:	0002      	movs	r2, r0
 801507c:	1dfb      	adds	r3, r7, #7
 801507e:	701a      	strb	r2, [r3, #0]
    if( count == 0 )
 8015080:	1dfb      	adds	r3, r7, #7
 8015082:	781b      	ldrb	r3, [r3, #0]
 8015084:	2b00      	cmp	r3, #0
 8015086:	d101      	bne.n	801508c <IsListEmpty+0x18>
    {
        return true;
 8015088:	2301      	movs	r3, #1
 801508a:	e000      	b.n	801508e <IsListEmpty+0x1a>
    }
    return false;
 801508c:	2300      	movs	r3, #0
}
 801508e:	0018      	movs	r0, r3
 8015090:	46bd      	mov	sp, r7
 8015092:	b002      	add	sp, #8
 8015094:	bd80      	pop	{r7, pc}

08015096 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8015096:	b580      	push	{r7, lr}
 8015098:	b082      	sub	sp, #8
 801509a:	af00      	add	r7, sp, #0
 801509c:	0002      	movs	r2, r0
 801509e:	1dfb      	adds	r3, r7, #7
 80150a0:	701a      	strb	r2, [r3, #0]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 80150a2:	1dfb      	adds	r3, r7, #7
 80150a4:	781b      	ldrb	r3, [r3, #0]
 80150a6:	2b04      	cmp	r3, #4
 80150a8:	d901      	bls.n	80150ae <IsListFull+0x18>
    {
        return true;
 80150aa:	2301      	movs	r3, #1
 80150ac:	e000      	b.n	80150b0 <IsListFull+0x1a>
    }
    return false;
 80150ae:	2300      	movs	r3, #0
}
 80150b0:	0018      	movs	r0, r3
 80150b2:	46bd      	mov	sp, r7
 80150b4:	b002      	add	sp, #8
 80150b6:	bd80      	pop	{r7, pc}

080150b8 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 80150b8:	b580      	push	{r7, lr}
 80150ba:	b086      	sub	sp, #24
 80150bc:	af00      	add	r7, sp, #0
 80150be:	60b9      	str	r1, [r7, #8]
 80150c0:	607a      	str	r2, [r7, #4]
 80150c2:	230f      	movs	r3, #15
 80150c4:	18fb      	adds	r3, r7, r3
 80150c6:	1c02      	adds	r2, r0, #0
 80150c8:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = bufferStart;
 80150ca:	68bb      	ldr	r3, [r7, #8]
 80150cc:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 80150ce:	4b18      	ldr	r3, [pc, #96]	; (8015130 <GetElement+0x78>)
 80150d0:	691b      	ldr	r3, [r3, #16]
 80150d2:	7d1b      	ldrb	r3, [r3, #20]
 80150d4:	0018      	movs	r0, r3
 80150d6:	f7ff ffcd 	bl	8015074 <IsListEmpty>
 80150da:	1e03      	subs	r3, r0, #0
 80150dc:	d001      	beq.n	80150e2 <GetElement+0x2a>
    {
        return NULL;
 80150de:	2300      	movs	r3, #0
 80150e0:	e022      	b.n	8015128 <GetElement+0x70>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt; elementCnt++ )
 80150e2:	2313      	movs	r3, #19
 80150e4:	18fb      	adds	r3, r7, r3
 80150e6:	2200      	movs	r2, #0
 80150e8:	701a      	strb	r2, [r3, #0]
 80150ea:	e014      	b.n	8015116 <GetElement+0x5e>
    {
        if( element->Request == request )
 80150ec:	697b      	ldr	r3, [r7, #20]
 80150ee:	781b      	ldrb	r3, [r3, #0]
 80150f0:	220f      	movs	r2, #15
 80150f2:	18ba      	adds	r2, r7, r2
 80150f4:	7812      	ldrb	r2, [r2, #0]
 80150f6:	429a      	cmp	r2, r3
 80150f8:	d101      	bne.n	80150fe <GetElement+0x46>
        {
            // We have found the element
            return element;
 80150fa:	697b      	ldr	r3, [r7, #20]
 80150fc:	e014      	b.n	8015128 <GetElement+0x70>
        }
        element = IncreaseBufferPointer( element );
 80150fe:	697b      	ldr	r3, [r7, #20]
 8015100:	0018      	movs	r0, r3
 8015102:	f7ff ff9f 	bl	8015044 <IncreaseBufferPointer>
 8015106:	0003      	movs	r3, r0
 8015108:	617b      	str	r3, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt; elementCnt++ )
 801510a:	2113      	movs	r1, #19
 801510c:	187b      	adds	r3, r7, r1
 801510e:	781a      	ldrb	r2, [r3, #0]
 8015110:	187b      	adds	r3, r7, r1
 8015112:	3201      	adds	r2, #1
 8015114:	701a      	strb	r2, [r3, #0]
 8015116:	4b06      	ldr	r3, [pc, #24]	; (8015130 <GetElement+0x78>)
 8015118:	691b      	ldr	r3, [r3, #16]
 801511a:	7d1b      	ldrb	r3, [r3, #20]
 801511c:	2213      	movs	r2, #19
 801511e:	18ba      	adds	r2, r7, r2
 8015120:	7812      	ldrb	r2, [r2, #0]
 8015122:	429a      	cmp	r2, r3
 8015124:	d3e2      	bcc.n	80150ec <GetElement+0x34>
    }

    return NULL;
 8015126:	2300      	movs	r3, #0
}
 8015128:	0018      	movs	r0, r3
 801512a:	46bd      	mov	sp, r7
 801512c:	b006      	add	sp, #24
 801512e:	bd80      	pop	{r7, pc}
 8015130:	20000d04 	.word	0x20000d04

08015134 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives, LoRaMacConfirmQueueNvmEvent confirmQueueNvmCtxChanged )
{
 8015134:	b580      	push	{r7, lr}
 8015136:	b082      	sub	sp, #8
 8015138:	af00      	add	r7, sp, #0
 801513a:	6078      	str	r0, [r7, #4]
 801513c:	6039      	str	r1, [r7, #0]
    ConfirmQueueCtx.Primitives = primitives;
 801513e:	4b13      	ldr	r3, [pc, #76]	; (801518c <LoRaMacConfirmQueueInit+0x58>)
 8015140:	687a      	ldr	r2, [r7, #4]
 8015142:	601a      	str	r2, [r3, #0]

    // Assign nvm context
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;
 8015144:	4b11      	ldr	r3, [pc, #68]	; (801518c <LoRaMacConfirmQueueInit+0x58>)
 8015146:	4a12      	ldr	r2, [pc, #72]	; (8015190 <LoRaMacConfirmQueueInit+0x5c>)
 8015148:	611a      	str	r2, [r3, #16]

    // Init counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt = 0;
 801514a:	4b10      	ldr	r3, [pc, #64]	; (801518c <LoRaMacConfirmQueueInit+0x58>)
 801514c:	691b      	ldr	r3, [r3, #16]
 801514e:	2200      	movs	r2, #0
 8015150:	751a      	strb	r2, [r3, #20]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 8015152:	4b0e      	ldr	r3, [pc, #56]	; (801518c <LoRaMacConfirmQueueInit+0x58>)
 8015154:	691b      	ldr	r3, [r3, #16]
 8015156:	001a      	movs	r2, r3
 8015158:	4b0c      	ldr	r3, [pc, #48]	; (801518c <LoRaMacConfirmQueueInit+0x58>)
 801515a:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 801515c:	4b0b      	ldr	r3, [pc, #44]	; (801518c <LoRaMacConfirmQueueInit+0x58>)
 801515e:	691b      	ldr	r3, [r3, #16]
 8015160:	001a      	movs	r2, r3
 8015162:	4b0a      	ldr	r3, [pc, #40]	; (801518c <LoRaMacConfirmQueueInit+0x58>)
 8015164:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue ) );
 8015166:	4b09      	ldr	r3, [pc, #36]	; (801518c <LoRaMacConfirmQueueInit+0x58>)
 8015168:	691b      	ldr	r3, [r3, #16]
 801516a:	2214      	movs	r2, #20
 801516c:	21ff      	movs	r1, #255	; 0xff
 801516e:	0018      	movs	r0, r3
 8015170:	f004 fa00 	bl	8019574 <memset1>

    // Common status
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8015174:	4b05      	ldr	r3, [pc, #20]	; (801518c <LoRaMacConfirmQueueInit+0x58>)
 8015176:	691b      	ldr	r3, [r3, #16]
 8015178:	2201      	movs	r2, #1
 801517a:	755a      	strb	r2, [r3, #21]

    // Assign callback
    ConfirmQueueCtx.LoRaMacConfirmQueueNvmEvent = confirmQueueNvmCtxChanged;
 801517c:	4b03      	ldr	r3, [pc, #12]	; (801518c <LoRaMacConfirmQueueInit+0x58>)
 801517e:	683a      	ldr	r2, [r7, #0]
 8015180:	60da      	str	r2, [r3, #12]
}
 8015182:	46c0      	nop			; (mov r8, r8)
 8015184:	46bd      	mov	sp, r7
 8015186:	b002      	add	sp, #8
 8015188:	bd80      	pop	{r7, pc}
 801518a:	46c0      	nop			; (mov r8, r8)
 801518c:	20000d04 	.word	0x20000d04
 8015190:	20000cec 	.word	0x20000cec

08015194 <LoRaMacConfirmQueueRestoreNvmCtx>:

bool LoRaMacConfirmQueueRestoreNvmCtx( void* confirmQueueNvmCtx )
{
 8015194:	b580      	push	{r7, lr}
 8015196:	b082      	sub	sp, #8
 8015198:	af00      	add	r7, sp, #0
 801519a:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( confirmQueueNvmCtx != NULL )
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	2b00      	cmp	r3, #0
 80151a0:	d007      	beq.n	80151b2 <LoRaMacConfirmQueueRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* )&ConfirmQueueNvmCtx, ( uint8_t* ) confirmQueueNvmCtx, sizeof( ConfirmQueueNvmCtx ) );
 80151a2:	6879      	ldr	r1, [r7, #4]
 80151a4:	4b05      	ldr	r3, [pc, #20]	; (80151bc <LoRaMacConfirmQueueRestoreNvmCtx+0x28>)
 80151a6:	2216      	movs	r2, #22
 80151a8:	0018      	movs	r0, r3
 80151aa:	f004 f9a5 	bl	80194f8 <memcpy1>
        return true;
 80151ae:	2301      	movs	r3, #1
 80151b0:	e000      	b.n	80151b4 <LoRaMacConfirmQueueRestoreNvmCtx+0x20>
    }
    else
    {
        return false;
 80151b2:	2300      	movs	r3, #0
    }
}
 80151b4:	0018      	movs	r0, r3
 80151b6:	46bd      	mov	sp, r7
 80151b8:	b002      	add	sp, #8
 80151ba:	bd80      	pop	{r7, pc}
 80151bc:	20000cec 	.word	0x20000cec

080151c0 <LoRaMacConfirmQueueGetNvmCtx>:

void* LoRaMacConfirmQueueGetNvmCtx( size_t* confirmQueueNvmCtxSize )
{
 80151c0:	b580      	push	{r7, lr}
 80151c2:	b082      	sub	sp, #8
 80151c4:	af00      	add	r7, sp, #0
 80151c6:	6078      	str	r0, [r7, #4]
    *confirmQueueNvmCtxSize = sizeof( ConfirmQueueNvmCtx );
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	2216      	movs	r2, #22
 80151cc:	601a      	str	r2, [r3, #0]
    return &ConfirmQueueNvmCtx;
 80151ce:	4b02      	ldr	r3, [pc, #8]	; (80151d8 <LoRaMacConfirmQueueGetNvmCtx+0x18>)
}
 80151d0:	0018      	movs	r0, r3
 80151d2:	46bd      	mov	sp, r7
 80151d4:	b002      	add	sp, #8
 80151d6:	bd80      	pop	{r7, pc}
 80151d8:	20000cec 	.word	0x20000cec

080151dc <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 80151dc:	b580      	push	{r7, lr}
 80151de:	b082      	sub	sp, #8
 80151e0:	af00      	add	r7, sp, #0
 80151e2:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 80151e4:	4b17      	ldr	r3, [pc, #92]	; (8015244 <LoRaMacConfirmQueueAdd+0x68>)
 80151e6:	691b      	ldr	r3, [r3, #16]
 80151e8:	7d1b      	ldrb	r3, [r3, #20]
 80151ea:	0018      	movs	r0, r3
 80151ec:	f7ff ff53 	bl	8015096 <IsListFull>
 80151f0:	1e03      	subs	r3, r0, #0
 80151f2:	d001      	beq.n	80151f8 <LoRaMacConfirmQueueAdd+0x1c>
    {
        // Protect the buffer against overwrites
        return false;
 80151f4:	2300      	movs	r3, #0
 80151f6:	e021      	b.n	801523c <LoRaMacConfirmQueueAdd+0x60>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 80151f8:	4b12      	ldr	r3, [pc, #72]	; (8015244 <LoRaMacConfirmQueueAdd+0x68>)
 80151fa:	689b      	ldr	r3, [r3, #8]
 80151fc:	687a      	ldr	r2, [r7, #4]
 80151fe:	7812      	ldrb	r2, [r2, #0]
 8015200:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8015202:	4b10      	ldr	r3, [pc, #64]	; (8015244 <LoRaMacConfirmQueueAdd+0x68>)
 8015204:	689b      	ldr	r3, [r3, #8]
 8015206:	687a      	ldr	r2, [r7, #4]
 8015208:	7852      	ldrb	r2, [r2, #1]
 801520a:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 801520c:	4b0d      	ldr	r3, [pc, #52]	; (8015244 <LoRaMacConfirmQueueAdd+0x68>)
 801520e:	689b      	ldr	r3, [r3, #8]
 8015210:	687a      	ldr	r2, [r7, #4]
 8015212:	78d2      	ldrb	r2, [r2, #3]
 8015214:	70da      	strb	r2, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 8015216:	4b0b      	ldr	r3, [pc, #44]	; (8015244 <LoRaMacConfirmQueueAdd+0x68>)
 8015218:	689b      	ldr	r3, [r3, #8]
 801521a:	2200      	movs	r2, #0
 801521c:	709a      	strb	r2, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt++;
 801521e:	4b09      	ldr	r3, [pc, #36]	; (8015244 <LoRaMacConfirmQueueAdd+0x68>)
 8015220:	691b      	ldr	r3, [r3, #16]
 8015222:	7d1a      	ldrb	r2, [r3, #20]
 8015224:	3201      	adds	r2, #1
 8015226:	b2d2      	uxtb	r2, r2
 8015228:	751a      	strb	r2, [r3, #20]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 801522a:	4b06      	ldr	r3, [pc, #24]	; (8015244 <LoRaMacConfirmQueueAdd+0x68>)
 801522c:	689b      	ldr	r3, [r3, #8]
 801522e:	0018      	movs	r0, r3
 8015230:	f7ff ff08 	bl	8015044 <IncreaseBufferPointer>
 8015234:	0002      	movs	r2, r0
 8015236:	4b03      	ldr	r3, [pc, #12]	; (8015244 <LoRaMacConfirmQueueAdd+0x68>)
 8015238:	609a      	str	r2, [r3, #8]

    return true;
 801523a:	2301      	movs	r3, #1
}
 801523c:	0018      	movs	r0, r3
 801523e:	46bd      	mov	sp, r7
 8015240:	b002      	add	sp, #8
 8015242:	bd80      	pop	{r7, pc}
 8015244:	20000d04 	.word	0x20000d04

08015248 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8015248:	b580      	push	{r7, lr}
 801524a:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 801524c:	4b0d      	ldr	r3, [pc, #52]	; (8015284 <LoRaMacConfirmQueueRemoveFirst+0x3c>)
 801524e:	691b      	ldr	r3, [r3, #16]
 8015250:	7d1b      	ldrb	r3, [r3, #20]
 8015252:	0018      	movs	r0, r3
 8015254:	f7ff ff0e 	bl	8015074 <IsListEmpty>
 8015258:	1e03      	subs	r3, r0, #0
 801525a:	d001      	beq.n	8015260 <LoRaMacConfirmQueueRemoveFirst+0x18>
    {
        return false;
 801525c:	2300      	movs	r3, #0
 801525e:	e00e      	b.n	801527e <LoRaMacConfirmQueueRemoveFirst+0x36>
    }

    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt--;
 8015260:	4b08      	ldr	r3, [pc, #32]	; (8015284 <LoRaMacConfirmQueueRemoveFirst+0x3c>)
 8015262:	691b      	ldr	r3, [r3, #16]
 8015264:	7d1a      	ldrb	r2, [r3, #20]
 8015266:	3a01      	subs	r2, #1
 8015268:	b2d2      	uxtb	r2, r2
 801526a:	751a      	strb	r2, [r3, #20]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 801526c:	4b05      	ldr	r3, [pc, #20]	; (8015284 <LoRaMacConfirmQueueRemoveFirst+0x3c>)
 801526e:	685b      	ldr	r3, [r3, #4]
 8015270:	0018      	movs	r0, r3
 8015272:	f7ff fee7 	bl	8015044 <IncreaseBufferPointer>
 8015276:	0002      	movs	r2, r0
 8015278:	4b02      	ldr	r3, [pc, #8]	; (8015284 <LoRaMacConfirmQueueRemoveFirst+0x3c>)
 801527a:	605a      	str	r2, [r3, #4]

    return true;
 801527c:	2301      	movs	r3, #1
}
 801527e:	0018      	movs	r0, r3
 8015280:	46bd      	mov	sp, r7
 8015282:	bd80      	pop	{r7, pc}
 8015284:	20000d04 	.word	0x20000d04

08015288 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8015288:	b580      	push	{r7, lr}
 801528a:	b084      	sub	sp, #16
 801528c:	af00      	add	r7, sp, #0
 801528e:	0002      	movs	r2, r0
 8015290:	1dfb      	adds	r3, r7, #7
 8015292:	701a      	strb	r2, [r3, #0]
 8015294:	1dbb      	adds	r3, r7, #6
 8015296:	1c0a      	adds	r2, r1, #0
 8015298:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = NULL;
 801529a:	2300      	movs	r3, #0
 801529c:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == false )
 801529e:	4b13      	ldr	r3, [pc, #76]	; (80152ec <LoRaMacConfirmQueueSetStatus+0x64>)
 80152a0:	691b      	ldr	r3, [r3, #16]
 80152a2:	7d1b      	ldrb	r3, [r3, #20]
 80152a4:	0018      	movs	r0, r3
 80152a6:	f7ff fee5 	bl	8015074 <IsListEmpty>
 80152aa:	0003      	movs	r3, r0
 80152ac:	001a      	movs	r2, r3
 80152ae:	2301      	movs	r3, #1
 80152b0:	4053      	eors	r3, r2
 80152b2:	b2db      	uxtb	r3, r3
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	d014      	beq.n	80152e2 <LoRaMacConfirmQueueSetStatus+0x5a>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80152b8:	4b0c      	ldr	r3, [pc, #48]	; (80152ec <LoRaMacConfirmQueueSetStatus+0x64>)
 80152ba:	6859      	ldr	r1, [r3, #4]
 80152bc:	4b0b      	ldr	r3, [pc, #44]	; (80152ec <LoRaMacConfirmQueueSetStatus+0x64>)
 80152be:	689a      	ldr	r2, [r3, #8]
 80152c0:	1dbb      	adds	r3, r7, #6
 80152c2:	781b      	ldrb	r3, [r3, #0]
 80152c4:	0018      	movs	r0, r3
 80152c6:	f7ff fef7 	bl	80150b8 <GetElement>
 80152ca:	0003      	movs	r3, r0
 80152cc:	60fb      	str	r3, [r7, #12]
        if( element != NULL )
 80152ce:	68fb      	ldr	r3, [r7, #12]
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	d006      	beq.n	80152e2 <LoRaMacConfirmQueueSetStatus+0x5a>
        {
            element->Status = status;
 80152d4:	68fb      	ldr	r3, [r7, #12]
 80152d6:	1dfa      	adds	r2, r7, #7
 80152d8:	7812      	ldrb	r2, [r2, #0]
 80152da:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 80152dc:	68fb      	ldr	r3, [r7, #12]
 80152de:	2201      	movs	r2, #1
 80152e0:	709a      	strb	r2, [r3, #2]
        }
    }
}
 80152e2:	46c0      	nop			; (mov r8, r8)
 80152e4:	46bd      	mov	sp, r7
 80152e6:	b004      	add	sp, #16
 80152e8:	bd80      	pop	{r7, pc}
 80152ea:	46c0      	nop			; (mov r8, r8)
 80152ec:	20000d04 	.word	0x20000d04

080152f0 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 80152f0:	b580      	push	{r7, lr}
 80152f2:	b084      	sub	sp, #16
 80152f4:	af00      	add	r7, sp, #0
 80152f6:	0002      	movs	r2, r0
 80152f8:	1dfb      	adds	r3, r7, #7
 80152fa:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = NULL;
 80152fc:	2300      	movs	r3, #0
 80152fe:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == false )
 8015300:	4b11      	ldr	r3, [pc, #68]	; (8015348 <LoRaMacConfirmQueueGetStatus+0x58>)
 8015302:	691b      	ldr	r3, [r3, #16]
 8015304:	7d1b      	ldrb	r3, [r3, #20]
 8015306:	0018      	movs	r0, r3
 8015308:	f7ff feb4 	bl	8015074 <IsListEmpty>
 801530c:	0003      	movs	r3, r0
 801530e:	001a      	movs	r2, r3
 8015310:	2301      	movs	r3, #1
 8015312:	4053      	eors	r3, r2
 8015314:	b2db      	uxtb	r3, r3
 8015316:	2b00      	cmp	r3, #0
 8015318:	d010      	beq.n	801533c <LoRaMacConfirmQueueGetStatus+0x4c>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 801531a:	4b0b      	ldr	r3, [pc, #44]	; (8015348 <LoRaMacConfirmQueueGetStatus+0x58>)
 801531c:	6859      	ldr	r1, [r3, #4]
 801531e:	4b0a      	ldr	r3, [pc, #40]	; (8015348 <LoRaMacConfirmQueueGetStatus+0x58>)
 8015320:	689a      	ldr	r2, [r3, #8]
 8015322:	1dfb      	adds	r3, r7, #7
 8015324:	781b      	ldrb	r3, [r3, #0]
 8015326:	0018      	movs	r0, r3
 8015328:	f7ff fec6 	bl	80150b8 <GetElement>
 801532c:	0003      	movs	r3, r0
 801532e:	60fb      	str	r3, [r7, #12]
        if( element != NULL )
 8015330:	68fb      	ldr	r3, [r7, #12]
 8015332:	2b00      	cmp	r3, #0
 8015334:	d002      	beq.n	801533c <LoRaMacConfirmQueueGetStatus+0x4c>
        {
            return element->Status;
 8015336:	68fb      	ldr	r3, [r7, #12]
 8015338:	785b      	ldrb	r3, [r3, #1]
 801533a:	e000      	b.n	801533e <LoRaMacConfirmQueueGetStatus+0x4e>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 801533c:	2301      	movs	r3, #1
}
 801533e:	0018      	movs	r0, r3
 8015340:	46bd      	mov	sp, r7
 8015342:	b004      	add	sp, #16
 8015344:	bd80      	pop	{r7, pc}
 8015346:	46c0      	nop			; (mov r8, r8)
 8015348:	20000d04 	.word	0x20000d04

0801534c <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 801534c:	b580      	push	{r7, lr}
 801534e:	b084      	sub	sp, #16
 8015350:	af00      	add	r7, sp, #0
 8015352:	0002      	movs	r2, r0
 8015354:	1dfb      	adds	r3, r7, #7
 8015356:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8015358:	4b18      	ldr	r3, [pc, #96]	; (80153bc <LoRaMacConfirmQueueSetStatusCmn+0x70>)
 801535a:	685b      	ldr	r3, [r3, #4]
 801535c:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = status;
 801535e:	4b17      	ldr	r3, [pc, #92]	; (80153bc <LoRaMacConfirmQueueSetStatusCmn+0x70>)
 8015360:	691b      	ldr	r3, [r3, #16]
 8015362:	1dfa      	adds	r2, r7, #7
 8015364:	7812      	ldrb	r2, [r2, #0]
 8015366:	755a      	strb	r2, [r3, #21]

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == false )
 8015368:	4b14      	ldr	r3, [pc, #80]	; (80153bc <LoRaMacConfirmQueueSetStatusCmn+0x70>)
 801536a:	691b      	ldr	r3, [r3, #16]
 801536c:	7d1b      	ldrb	r3, [r3, #20]
 801536e:	0018      	movs	r0, r3
 8015370:	f7ff fe80 	bl	8015074 <IsListEmpty>
 8015374:	0003      	movs	r3, r0
 8015376:	001a      	movs	r2, r3
 8015378:	2301      	movs	r3, #1
 801537a:	4053      	eors	r3, r2
 801537c:	b2db      	uxtb	r3, r3
 801537e:	2b00      	cmp	r3, #0
 8015380:	d018      	beq.n	80153b4 <LoRaMacConfirmQueueSetStatusCmn+0x68>
    {
        do
        {
            element->Status = status;
 8015382:	68fb      	ldr	r3, [r7, #12]
 8015384:	1dfa      	adds	r2, r7, #7
 8015386:	7812      	ldrb	r2, [r2, #0]
 8015388:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 801538a:	68fb      	ldr	r3, [r7, #12]
 801538c:	78db      	ldrb	r3, [r3, #3]
 801538e:	2201      	movs	r2, #1
 8015390:	4053      	eors	r3, r2
 8015392:	b2db      	uxtb	r3, r3
 8015394:	2b00      	cmp	r3, #0
 8015396:	d002      	beq.n	801539e <LoRaMacConfirmQueueSetStatusCmn+0x52>
            {
                element->ReadyToHandle = true;
 8015398:	68fb      	ldr	r3, [r7, #12]
 801539a:	2201      	movs	r2, #1
 801539c:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 801539e:	68fb      	ldr	r3, [r7, #12]
 80153a0:	0018      	movs	r0, r3
 80153a2:	f7ff fe4f 	bl	8015044 <IncreaseBufferPointer>
 80153a6:	0003      	movs	r3, r0
 80153a8:	60fb      	str	r3, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 80153aa:	4b04      	ldr	r3, [pc, #16]	; (80153bc <LoRaMacConfirmQueueSetStatusCmn+0x70>)
 80153ac:	689b      	ldr	r3, [r3, #8]
 80153ae:	68fa      	ldr	r2, [r7, #12]
 80153b0:	429a      	cmp	r2, r3
 80153b2:	d1e6      	bne.n	8015382 <LoRaMacConfirmQueueSetStatusCmn+0x36>
    }
}
 80153b4:	46c0      	nop			; (mov r8, r8)
 80153b6:	46bd      	mov	sp, r7
 80153b8:	b004      	add	sp, #16
 80153ba:	bd80      	pop	{r7, pc}
 80153bc:	20000d04 	.word	0x20000d04

080153c0 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 80153c0:	b580      	push	{r7, lr}
 80153c2:	b082      	sub	sp, #8
 80153c4:	af00      	add	r7, sp, #0
 80153c6:	0002      	movs	r2, r0
 80153c8:	1dfb      	adds	r3, r7, #7
 80153ca:	701a      	strb	r2, [r3, #0]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 80153cc:	4b08      	ldr	r3, [pc, #32]	; (80153f0 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 80153ce:	6859      	ldr	r1, [r3, #4]
 80153d0:	4b07      	ldr	r3, [pc, #28]	; (80153f0 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 80153d2:	689a      	ldr	r2, [r3, #8]
 80153d4:	1dfb      	adds	r3, r7, #7
 80153d6:	781b      	ldrb	r3, [r3, #0]
 80153d8:	0018      	movs	r0, r3
 80153da:	f7ff fe6d 	bl	80150b8 <GetElement>
 80153de:	1e03      	subs	r3, r0, #0
 80153e0:	d001      	beq.n	80153e6 <LoRaMacConfirmQueueIsCmdActive+0x26>
    {
        return true;
 80153e2:	2301      	movs	r3, #1
 80153e4:	e000      	b.n	80153e8 <LoRaMacConfirmQueueIsCmdActive+0x28>
    }
    return false;
 80153e6:	2300      	movs	r3, #0
}
 80153e8:	0018      	movs	r0, r3
 80153ea:	46bd      	mov	sp, r7
 80153ec:	b002      	add	sp, #8
 80153ee:	bd80      	pop	{r7, pc}
 80153f0:	20000d04 	.word	0x20000d04

080153f4 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 80153f4:	b580      	push	{r7, lr}
 80153f6:	b084      	sub	sp, #16
 80153f8:	af00      	add	r7, sp, #0
 80153fa:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 80153fc:	4b2d      	ldr	r3, [pc, #180]	; (80154b4 <LoRaMacConfirmQueueHandleCb+0xc0>)
 80153fe:	691a      	ldr	r2, [r3, #16]
 8015400:	230e      	movs	r3, #14
 8015402:	18fb      	adds	r3, r7, r3
 8015404:	7d12      	ldrb	r2, [r2, #20]
 8015406:	701a      	strb	r2, [r3, #0]
    bool readyToHandle = false;
 8015408:	230d      	movs	r3, #13
 801540a:	18fb      	adds	r3, r7, r3
 801540c:	2200      	movs	r2, #0
 801540e:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 8015410:	230f      	movs	r3, #15
 8015412:	18fb      	adds	r3, r7, r3
 8015414:	2200      	movs	r2, #0
 8015416:	701a      	strb	r2, [r3, #0]
 8015418:	e03f      	b.n	801549a <LoRaMacConfirmQueueHandleCb+0xa6>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 801541a:	4b26      	ldr	r3, [pc, #152]	; (80154b4 <LoRaMacConfirmQueueHandleCb+0xc0>)
 801541c:	685b      	ldr	r3, [r3, #4]
 801541e:	781a      	ldrb	r2, [r3, #0]
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8015424:	4b23      	ldr	r3, [pc, #140]	; (80154b4 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8015426:	685b      	ldr	r3, [r3, #4]
 8015428:	785a      	ldrb	r2, [r3, #1]
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 801542e:	4b21      	ldr	r3, [pc, #132]	; (80154b4 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8015430:	685a      	ldr	r2, [r3, #4]
 8015432:	210d      	movs	r1, #13
 8015434:	187b      	adds	r3, r7, r1
 8015436:	7892      	ldrb	r2, [r2, #2]
 8015438:	701a      	strb	r2, [r3, #0]

        if( readyToHandle == true )
 801543a:	187b      	adds	r3, r7, r1
 801543c:	781b      	ldrb	r3, [r3, #0]
 801543e:	2b00      	cmp	r3, #0
 8015440:	d006      	beq.n	8015450 <LoRaMacConfirmQueueHandleCb+0x5c>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8015442:	4b1c      	ldr	r3, [pc, #112]	; (80154b4 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8015444:	681b      	ldr	r3, [r3, #0]
 8015446:	689b      	ldr	r3, [r3, #8]
 8015448:	687a      	ldr	r2, [r7, #4]
 801544a:	0010      	movs	r0, r2
 801544c:	4798      	blx	r3
 801544e:	e00f      	b.n	8015470 <LoRaMacConfirmQueueHandleCb+0x7c>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8015450:	4b18      	ldr	r3, [pc, #96]	; (80154b4 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8015452:	685b      	ldr	r3, [r3, #4]
 8015454:	781a      	ldrb	r2, [r3, #0]
 8015456:	2108      	movs	r1, #8
 8015458:	187b      	adds	r3, r7, r1
 801545a:	701a      	strb	r2, [r3, #0]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 801545c:	4b15      	ldr	r3, [pc, #84]	; (80154b4 <LoRaMacConfirmQueueHandleCb+0xc0>)
 801545e:	685b      	ldr	r3, [r3, #4]
 8015460:	785a      	ldrb	r2, [r3, #1]
 8015462:	187b      	adds	r3, r7, r1
 8015464:	705a      	strb	r2, [r3, #1]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8015466:	4b13      	ldr	r3, [pc, #76]	; (80154b4 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8015468:	685b      	ldr	r3, [r3, #4]
 801546a:	78da      	ldrb	r2, [r3, #3]
 801546c:	187b      	adds	r3, r7, r1
 801546e:	70da      	strb	r2, [r3, #3]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8015470:	f7ff feea 	bl	8015248 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8015474:	230d      	movs	r3, #13
 8015476:	18fb      	adds	r3, r7, r3
 8015478:	781b      	ldrb	r3, [r3, #0]
 801547a:	2201      	movs	r2, #1
 801547c:	4053      	eors	r3, r2
 801547e:	b2db      	uxtb	r3, r3
 8015480:	2b00      	cmp	r3, #0
 8015482:	d004      	beq.n	801548e <LoRaMacConfirmQueueHandleCb+0x9a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8015484:	2308      	movs	r3, #8
 8015486:	18fb      	adds	r3, r7, r3
 8015488:	0018      	movs	r0, r3
 801548a:	f7ff fea7 	bl	80151dc <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 801548e:	210f      	movs	r1, #15
 8015490:	187b      	adds	r3, r7, r1
 8015492:	781a      	ldrb	r2, [r3, #0]
 8015494:	187b      	adds	r3, r7, r1
 8015496:	3201      	adds	r2, #1
 8015498:	701a      	strb	r2, [r3, #0]
 801549a:	230f      	movs	r3, #15
 801549c:	18fa      	adds	r2, r7, r3
 801549e:	230e      	movs	r3, #14
 80154a0:	18fb      	adds	r3, r7, r3
 80154a2:	7812      	ldrb	r2, [r2, #0]
 80154a4:	781b      	ldrb	r3, [r3, #0]
 80154a6:	429a      	cmp	r2, r3
 80154a8:	d3b7      	bcc.n	801541a <LoRaMacConfirmQueueHandleCb+0x26>
        }
    }
}
 80154aa:	46c0      	nop			; (mov r8, r8)
 80154ac:	46c0      	nop			; (mov r8, r8)
 80154ae:	46bd      	mov	sp, r7
 80154b0:	b004      	add	sp, #16
 80154b2:	bd80      	pop	{r7, pc}
 80154b4:	20000d04 	.word	0x20000d04

080154b8 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 80154b8:	b580      	push	{r7, lr}
 80154ba:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 80154bc:	4b02      	ldr	r3, [pc, #8]	; (80154c8 <LoRaMacConfirmQueueGetCnt+0x10>)
 80154be:	691b      	ldr	r3, [r3, #16]
 80154c0:	7d1b      	ldrb	r3, [r3, #20]
}
 80154c2:	0018      	movs	r0, r3
 80154c4:	46bd      	mov	sp, r7
 80154c6:	bd80      	pop	{r7, pc}
 80154c8:	20000d04 	.word	0x20000d04

080154cc <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 80154cc:	b580      	push	{r7, lr}
 80154ce:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 80154d0:	4b06      	ldr	r3, [pc, #24]	; (80154ec <LoRaMacConfirmQueueIsFull+0x20>)
 80154d2:	691b      	ldr	r3, [r3, #16]
 80154d4:	7d1b      	ldrb	r3, [r3, #20]
 80154d6:	0018      	movs	r0, r3
 80154d8:	f7ff fddd 	bl	8015096 <IsListFull>
 80154dc:	1e03      	subs	r3, r0, #0
 80154de:	d001      	beq.n	80154e4 <LoRaMacConfirmQueueIsFull+0x18>
    {
        return true;
 80154e0:	2301      	movs	r3, #1
 80154e2:	e000      	b.n	80154e6 <LoRaMacConfirmQueueIsFull+0x1a>
    }
    else
    {
        return false;
 80154e4:	2300      	movs	r3, #0
    }
}
 80154e6:	0018      	movs	r0, r3
 80154e8:	46bd      	mov	sp, r7
 80154ea:	bd80      	pop	{r7, pc}
 80154ec:	20000d04 	.word	0x20000d04

080154f0 <PayloadEncrypt>:
 * \param[IN]  size             - Size of data
 * \param[IN/OUT]  buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 80154f0:	b590      	push	{r4, r7, lr}
 80154f2:	b08f      	sub	sp, #60	; 0x3c
 80154f4:	af00      	add	r7, sp, #0
 80154f6:	60f8      	str	r0, [r7, #12]
 80154f8:	0008      	movs	r0, r1
 80154fa:	0011      	movs	r1, r2
 80154fc:	607b      	str	r3, [r7, #4]
 80154fe:	230a      	movs	r3, #10
 8015500:	18fb      	adds	r3, r7, r3
 8015502:	1c02      	adds	r2, r0, #0
 8015504:	801a      	strh	r2, [r3, #0]
 8015506:	2309      	movs	r3, #9
 8015508:	18fb      	adds	r3, r7, r3
 801550a:	1c0a      	adds	r2, r1, #0
 801550c:	701a      	strb	r2, [r3, #0]
    if( buffer == 0 )
 801550e:	68fb      	ldr	r3, [r7, #12]
 8015510:	2b00      	cmp	r3, #0
 8015512:	d101      	bne.n	8015518 <PayloadEncrypt+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015514:	230a      	movs	r3, #10
 8015516:	e0ae      	b.n	8015676 <PayloadEncrypt+0x186>
    }

    uint8_t bufferIndex = 0;
 8015518:	2337      	movs	r3, #55	; 0x37
 801551a:	18fb      	adds	r3, r7, r3
 801551c:	2200      	movs	r2, #0
 801551e:	701a      	strb	r2, [r3, #0]
    uint16_t ctr = 1;
 8015520:	2334      	movs	r3, #52	; 0x34
 8015522:	18fb      	adds	r3, r7, r3
 8015524:	2201      	movs	r2, #1
 8015526:	801a      	strh	r2, [r3, #0]
    uint8_t sBlock[16] = { 0 };
 8015528:	2320      	movs	r3, #32
 801552a:	18fb      	adds	r3, r7, r3
 801552c:	2200      	movs	r2, #0
 801552e:	601a      	str	r2, [r3, #0]
 8015530:	3304      	adds	r3, #4
 8015532:	220c      	movs	r2, #12
 8015534:	2100      	movs	r1, #0
 8015536:	0018      	movs	r0, r3
 8015538:	f008 fcef 	bl	801df1a <memset>
    uint8_t aBlock[16] = { 0 };
 801553c:	2410      	movs	r4, #16
 801553e:	193b      	adds	r3, r7, r4
 8015540:	2200      	movs	r2, #0
 8015542:	601a      	str	r2, [r3, #0]
 8015544:	3304      	adds	r3, #4
 8015546:	220c      	movs	r2, #12
 8015548:	2100      	movs	r1, #0
 801554a:	0018      	movs	r0, r3
 801554c:	f008 fce5 	bl	801df1a <memset>

    aBlock[0] = 0x01;
 8015550:	0021      	movs	r1, r4
 8015552:	187b      	adds	r3, r7, r1
 8015554:	2201      	movs	r2, #1
 8015556:	701a      	strb	r2, [r3, #0]

    aBlock[5] = dir;
 8015558:	187a      	adds	r2, r7, r1
 801555a:	2340      	movs	r3, #64	; 0x40
 801555c:	2008      	movs	r0, #8
 801555e:	4684      	mov	ip, r0
 8015560:	44bc      	add	ip, r7
 8015562:	4463      	add	r3, ip
 8015564:	781b      	ldrb	r3, [r3, #0]
 8015566:	7153      	strb	r3, [r2, #5]

    aBlock[6] = address & 0xFF;
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	b2da      	uxtb	r2, r3
 801556c:	187b      	adds	r3, r7, r1
 801556e:	719a      	strb	r2, [r3, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	0a1b      	lsrs	r3, r3, #8
 8015574:	b2da      	uxtb	r2, r3
 8015576:	187b      	adds	r3, r7, r1
 8015578:	71da      	strb	r2, [r3, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	0c1b      	lsrs	r3, r3, #16
 801557e:	b2da      	uxtb	r2, r3
 8015580:	187b      	adds	r3, r7, r1
 8015582:	721a      	strb	r2, [r3, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	0e1b      	lsrs	r3, r3, #24
 8015588:	b2da      	uxtb	r2, r3
 801558a:	187b      	adds	r3, r7, r1
 801558c:	725a      	strb	r2, [r3, #9]

    aBlock[10] = frameCounter & 0xFF;
 801558e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015590:	b2da      	uxtb	r2, r3
 8015592:	187b      	adds	r3, r7, r1
 8015594:	729a      	strb	r2, [r3, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8015596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015598:	0a1b      	lsrs	r3, r3, #8
 801559a:	b2da      	uxtb	r2, r3
 801559c:	187b      	adds	r3, r7, r1
 801559e:	72da      	strb	r2, [r3, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 80155a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80155a2:	0c1b      	lsrs	r3, r3, #16
 80155a4:	b2da      	uxtb	r2, r3
 80155a6:	187b      	adds	r3, r7, r1
 80155a8:	731a      	strb	r2, [r3, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 80155aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80155ac:	0e1b      	lsrs	r3, r3, #24
 80155ae:	b2da      	uxtb	r2, r3
 80155b0:	187b      	adds	r3, r7, r1
 80155b2:	735a      	strb	r2, [r3, #13]

    while( size > 0 )
 80155b4:	e058      	b.n	8015668 <PayloadEncrypt+0x178>
    {
        aBlock[15] = ctr & 0xFF;
 80155b6:	2134      	movs	r1, #52	; 0x34
 80155b8:	187b      	adds	r3, r7, r1
 80155ba:	881b      	ldrh	r3, [r3, #0]
 80155bc:	b2da      	uxtb	r2, r3
 80155be:	2010      	movs	r0, #16
 80155c0:	183b      	adds	r3, r7, r0
 80155c2:	73da      	strb	r2, [r3, #15]
        ctr++;
 80155c4:	187b      	adds	r3, r7, r1
 80155c6:	881a      	ldrh	r2, [r3, #0]
 80155c8:	187b      	adds	r3, r7, r1
 80155ca:	3201      	adds	r2, #1
 80155cc:	801a      	strh	r2, [r3, #0]
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 80155ce:	2320      	movs	r3, #32
 80155d0:	18f9      	adds	r1, r7, r3
 80155d2:	2309      	movs	r3, #9
 80155d4:	18fb      	adds	r3, r7, r3
 80155d6:	781a      	ldrb	r2, [r3, #0]
 80155d8:	1838      	adds	r0, r7, r0
 80155da:	000b      	movs	r3, r1
 80155dc:	2110      	movs	r1, #16
 80155de:	f7f8 fa74 	bl	800daca <SecureElementAesEncrypt>
 80155e2:	1e03      	subs	r3, r0, #0
 80155e4:	d001      	beq.n	80155ea <PayloadEncrypt+0xfa>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80155e6:	230f      	movs	r3, #15
 80155e8:	e045      	b.n	8015676 <PayloadEncrypt+0x186>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 80155ea:	2333      	movs	r3, #51	; 0x33
 80155ec:	18fb      	adds	r3, r7, r3
 80155ee:	2200      	movs	r2, #0
 80155f0:	701a      	strb	r2, [r3, #0]
 80155f2:	e01f      	b.n	8015634 <PayloadEncrypt+0x144>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 80155f4:	2037      	movs	r0, #55	; 0x37
 80155f6:	183b      	adds	r3, r7, r0
 80155f8:	781a      	ldrb	r2, [r3, #0]
 80155fa:	2433      	movs	r4, #51	; 0x33
 80155fc:	193b      	adds	r3, r7, r4
 80155fe:	781b      	ldrb	r3, [r3, #0]
 8015600:	18d3      	adds	r3, r2, r3
 8015602:	001a      	movs	r2, r3
 8015604:	68fb      	ldr	r3, [r7, #12]
 8015606:	189b      	adds	r3, r3, r2
 8015608:	7819      	ldrb	r1, [r3, #0]
 801560a:	193b      	adds	r3, r7, r4
 801560c:	781b      	ldrb	r3, [r3, #0]
 801560e:	2220      	movs	r2, #32
 8015610:	18ba      	adds	r2, r7, r2
 8015612:	5cd2      	ldrb	r2, [r2, r3]
 8015614:	183b      	adds	r3, r7, r0
 8015616:	7818      	ldrb	r0, [r3, #0]
 8015618:	193b      	adds	r3, r7, r4
 801561a:	781b      	ldrb	r3, [r3, #0]
 801561c:	18c3      	adds	r3, r0, r3
 801561e:	0018      	movs	r0, r3
 8015620:	68fb      	ldr	r3, [r7, #12]
 8015622:	181b      	adds	r3, r3, r0
 8015624:	404a      	eors	r2, r1
 8015626:	b2d2      	uxtb	r2, r2
 8015628:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 801562a:	193b      	adds	r3, r7, r4
 801562c:	781a      	ldrb	r2, [r3, #0]
 801562e:	193b      	adds	r3, r7, r4
 8015630:	3201      	adds	r2, #1
 8015632:	701a      	strb	r2, [r3, #0]
 8015634:	2333      	movs	r3, #51	; 0x33
 8015636:	18fb      	adds	r3, r7, r3
 8015638:	781a      	ldrb	r2, [r3, #0]
 801563a:	230a      	movs	r3, #10
 801563c:	18fb      	adds	r3, r7, r3
 801563e:	881b      	ldrh	r3, [r3, #0]
 8015640:	b219      	sxth	r1, r3
 8015642:	2910      	cmp	r1, #16
 8015644:	dd00      	ble.n	8015648 <PayloadEncrypt+0x158>
 8015646:	2310      	movs	r3, #16
 8015648:	b21b      	sxth	r3, r3
 801564a:	429a      	cmp	r2, r3
 801564c:	dbd2      	blt.n	80155f4 <PayloadEncrypt+0x104>
        }
        size -= 16;
 801564e:	210a      	movs	r1, #10
 8015650:	187b      	adds	r3, r7, r1
 8015652:	881b      	ldrh	r3, [r3, #0]
 8015654:	3b10      	subs	r3, #16
 8015656:	b29a      	uxth	r2, r3
 8015658:	187b      	adds	r3, r7, r1
 801565a:	801a      	strh	r2, [r3, #0]
        bufferIndex += 16;
 801565c:	2237      	movs	r2, #55	; 0x37
 801565e:	18bb      	adds	r3, r7, r2
 8015660:	18ba      	adds	r2, r7, r2
 8015662:	7812      	ldrb	r2, [r2, #0]
 8015664:	3210      	adds	r2, #16
 8015666:	701a      	strb	r2, [r3, #0]
    while( size > 0 )
 8015668:	230a      	movs	r3, #10
 801566a:	18fb      	adds	r3, r7, r3
 801566c:	2200      	movs	r2, #0
 801566e:	5e9b      	ldrsh	r3, [r3, r2]
 8015670:	2b00      	cmp	r3, #0
 8015672:	dca0      	bgt.n	80155b6 <PayloadEncrypt+0xc6>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015674:	2300      	movs	r3, #0
}
 8015676:	0018      	movs	r0, r3
 8015678:	46bd      	mov	sp, r7
 801567a:	b00f      	add	sp, #60	; 0x3c
 801567c:	bd90      	pop	{r4, r7, pc}

0801567e <PrepareB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 801567e:	b5b0      	push	{r4, r5, r7, lr}
 8015680:	b082      	sub	sp, #8
 8015682:	af00      	add	r7, sp, #0
 8015684:	0005      	movs	r5, r0
 8015686:	000c      	movs	r4, r1
 8015688:	0010      	movs	r0, r2
 801568a:	0019      	movs	r1, r3
 801568c:	1dbb      	adds	r3, r7, #6
 801568e:	1c2a      	adds	r2, r5, #0
 8015690:	801a      	strh	r2, [r3, #0]
 8015692:	1d7b      	adds	r3, r7, #5
 8015694:	1c22      	adds	r2, r4, #0
 8015696:	701a      	strb	r2, [r3, #0]
 8015698:	1d3b      	adds	r3, r7, #4
 801569a:	1c02      	adds	r2, r0, #0
 801569c:	701a      	strb	r2, [r3, #0]
 801569e:	1cfb      	adds	r3, r7, #3
 80156a0:	1c0a      	adds	r2, r1, #0
 80156a2:	701a      	strb	r2, [r3, #0]
    if( b0 == 0 )
 80156a4:	6a3b      	ldr	r3, [r7, #32]
 80156a6:	2b00      	cmp	r3, #0
 80156a8:	d101      	bne.n	80156ae <PrepareB0+0x30>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80156aa:	230a      	movs	r3, #10
 80156ac:	e050      	b.n	8015750 <PrepareB0+0xd2>
    }

    b0[0] = 0x49;
 80156ae:	6a3b      	ldr	r3, [r7, #32]
 80156b0:	2249      	movs	r2, #73	; 0x49
 80156b2:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
/* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 80156b4:	6a3b      	ldr	r3, [r7, #32]
 80156b6:	3301      	adds	r3, #1
 80156b8:	2200      	movs	r2, #0
 80156ba:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 80156bc:	6a3b      	ldr	r3, [r7, #32]
 80156be:	3302      	adds	r3, #2
 80156c0:	2200      	movs	r2, #0
 80156c2:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 80156c4:	6a3b      	ldr	r3, [r7, #32]
 80156c6:	3303      	adds	r3, #3
 80156c8:	2200      	movs	r2, #0
 80156ca:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 80156cc:	6a3b      	ldr	r3, [r7, #32]
 80156ce:	3304      	adds	r3, #4
 80156d0:	2200      	movs	r2, #0
 80156d2:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 80156d4:	6a3b      	ldr	r3, [r7, #32]
 80156d6:	3305      	adds	r3, #5
 80156d8:	1cfa      	adds	r2, r7, #3
 80156da:	7812      	ldrb	r2, [r2, #0]
 80156dc:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 80156de:	6a3b      	ldr	r3, [r7, #32]
 80156e0:	3306      	adds	r3, #6
 80156e2:	69ba      	ldr	r2, [r7, #24]
 80156e4:	b2d2      	uxtb	r2, r2
 80156e6:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 80156e8:	69bb      	ldr	r3, [r7, #24]
 80156ea:	0a1a      	lsrs	r2, r3, #8
 80156ec:	6a3b      	ldr	r3, [r7, #32]
 80156ee:	3307      	adds	r3, #7
 80156f0:	b2d2      	uxtb	r2, r2
 80156f2:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 80156f4:	69bb      	ldr	r3, [r7, #24]
 80156f6:	0c1a      	lsrs	r2, r3, #16
 80156f8:	6a3b      	ldr	r3, [r7, #32]
 80156fa:	3308      	adds	r3, #8
 80156fc:	b2d2      	uxtb	r2, r2
 80156fe:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8015700:	69bb      	ldr	r3, [r7, #24]
 8015702:	0e1a      	lsrs	r2, r3, #24
 8015704:	6a3b      	ldr	r3, [r7, #32]
 8015706:	3309      	adds	r3, #9
 8015708:	b2d2      	uxtb	r2, r2
 801570a:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 801570c:	6a3b      	ldr	r3, [r7, #32]
 801570e:	330a      	adds	r3, #10
 8015710:	69fa      	ldr	r2, [r7, #28]
 8015712:	b2d2      	uxtb	r2, r2
 8015714:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8015716:	69fb      	ldr	r3, [r7, #28]
 8015718:	0a1a      	lsrs	r2, r3, #8
 801571a:	6a3b      	ldr	r3, [r7, #32]
 801571c:	330b      	adds	r3, #11
 801571e:	b2d2      	uxtb	r2, r2
 8015720:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8015722:	69fb      	ldr	r3, [r7, #28]
 8015724:	0c1a      	lsrs	r2, r3, #16
 8015726:	6a3b      	ldr	r3, [r7, #32]
 8015728:	330c      	adds	r3, #12
 801572a:	b2d2      	uxtb	r2, r2
 801572c:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 801572e:	69fb      	ldr	r3, [r7, #28]
 8015730:	0e1a      	lsrs	r2, r3, #24
 8015732:	6a3b      	ldr	r3, [r7, #32]
 8015734:	330d      	adds	r3, #13
 8015736:	b2d2      	uxtb	r2, r2
 8015738:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 801573a:	6a3b      	ldr	r3, [r7, #32]
 801573c:	330e      	adds	r3, #14
 801573e:	2200      	movs	r2, #0
 8015740:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8015742:	6a3b      	ldr	r3, [r7, #32]
 8015744:	330f      	adds	r3, #15
 8015746:	1dba      	adds	r2, r7, #6
 8015748:	8812      	ldrh	r2, [r2, #0]
 801574a:	b2d2      	uxtb	r2, r2
 801574c:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 801574e:	2300      	movs	r3, #0
}
 8015750:	0018      	movs	r0, r3
 8015752:	46bd      	mov	sp, r7
 8015754:	b002      	add	sp, #8
 8015756:	bdb0      	pop	{r4, r5, r7, pc}

08015758 <ComputeCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8015758:	b5b0      	push	{r4, r5, r7, lr}
 801575a:	b08a      	sub	sp, #40	; 0x28
 801575c:	af04      	add	r7, sp, #16
 801575e:	6078      	str	r0, [r7, #4]
 8015760:	000c      	movs	r4, r1
 8015762:	0010      	movs	r0, r2
 8015764:	0019      	movs	r1, r3
 8015766:	1cbb      	adds	r3, r7, #2
 8015768:	1c22      	adds	r2, r4, #0
 801576a:	801a      	strh	r2, [r3, #0]
 801576c:	1c7b      	adds	r3, r7, #1
 801576e:	1c02      	adds	r2, r0, #0
 8015770:	701a      	strb	r2, [r3, #0]
 8015772:	003b      	movs	r3, r7
 8015774:	1c0a      	adds	r2, r1, #0
 8015776:	701a      	strb	r2, [r3, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	2b00      	cmp	r3, #0
 801577c:	d002      	beq.n	8015784 <ComputeCmacB0+0x2c>
 801577e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015780:	2b00      	cmp	r3, #0
 8015782:	d101      	bne.n	8015788 <ComputeCmacB0+0x30>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015784:	230a      	movs	r3, #10
 8015786:	e02a      	b.n	80157de <ComputeCmacB0+0x86>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8015788:	1cbb      	adds	r3, r7, #2
 801578a:	881a      	ldrh	r2, [r3, #0]
 801578c:	2380      	movs	r3, #128	; 0x80
 801578e:	005b      	lsls	r3, r3, #1
 8015790:	429a      	cmp	r2, r3
 8015792:	d901      	bls.n	8015798 <ComputeCmacB0+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8015794:	230e      	movs	r3, #14
 8015796:	e022      	b.n	80157de <ComputeCmacB0+0x86>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8015798:	2328      	movs	r3, #40	; 0x28
 801579a:	18fb      	adds	r3, r7, r3
 801579c:	781c      	ldrb	r4, [r3, #0]
 801579e:	003b      	movs	r3, r7
 80157a0:	781a      	ldrb	r2, [r3, #0]
 80157a2:	1c7b      	adds	r3, r7, #1
 80157a4:	7819      	ldrb	r1, [r3, #0]
 80157a6:	1cbb      	adds	r3, r7, #2
 80157a8:	8818      	ldrh	r0, [r3, #0]
 80157aa:	2508      	movs	r5, #8
 80157ac:	197b      	adds	r3, r7, r5
 80157ae:	9302      	str	r3, [sp, #8]
 80157b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157b2:	9301      	str	r3, [sp, #4]
 80157b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157b6:	9300      	str	r3, [sp, #0]
 80157b8:	0023      	movs	r3, r4
 80157ba:	f7ff ff60 	bl	801567e <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 80157be:	1c7b      	adds	r3, r7, #1
 80157c0:	781c      	ldrb	r4, [r3, #0]
 80157c2:	1cbb      	adds	r3, r7, #2
 80157c4:	881a      	ldrh	r2, [r3, #0]
 80157c6:	6879      	ldr	r1, [r7, #4]
 80157c8:	1978      	adds	r0, r7, r5
 80157ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80157cc:	9300      	str	r3, [sp, #0]
 80157ce:	0023      	movs	r3, r4
 80157d0:	f7f8 f918 	bl	800da04 <SecureElementComputeAesCmac>
 80157d4:	1e03      	subs	r3, r0, #0
 80157d6:	d001      	beq.n	80157dc <ComputeCmacB0+0x84>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80157d8:	230f      	movs	r3, #15
 80157da:	e000      	b.n	80157de <ComputeCmacB0+0x86>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80157dc:	2300      	movs	r3, #0
}
 80157de:	0018      	movs	r0, r3
 80157e0:	46bd      	mov	sp, r7
 80157e2:	b006      	add	sp, #24
 80157e4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080157e8 <VerifyCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[in]  expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 80157e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80157ea:	b0cd      	sub	sp, #308	; 0x134
 80157ec:	af04      	add	r7, sp, #16
 80157ee:	6078      	str	r0, [r7, #4]
 80157f0:	000c      	movs	r4, r1
 80157f2:	0010      	movs	r0, r2
 80157f4:	0019      	movs	r1, r3
 80157f6:	4b52      	ldr	r3, [pc, #328]	; (8015940 <VerifyCmacB0+0x158>)
 80157f8:	2290      	movs	r2, #144	; 0x90
 80157fa:	0052      	lsls	r2, r2, #1
 80157fc:	4694      	mov	ip, r2
 80157fe:	44bc      	add	ip, r7
 8015800:	4463      	add	r3, ip
 8015802:	1c22      	adds	r2, r4, #0
 8015804:	801a      	strh	r2, [r3, #0]
 8015806:	4b4f      	ldr	r3, [pc, #316]	; (8015944 <VerifyCmacB0+0x15c>)
 8015808:	2290      	movs	r2, #144	; 0x90
 801580a:	0052      	lsls	r2, r2, #1
 801580c:	4694      	mov	ip, r2
 801580e:	44bc      	add	ip, r7
 8015810:	4463      	add	r3, ip
 8015812:	1c02      	adds	r2, r0, #0
 8015814:	701a      	strb	r2, [r3, #0]
 8015816:	4b4c      	ldr	r3, [pc, #304]	; (8015948 <VerifyCmacB0+0x160>)
 8015818:	2290      	movs	r2, #144	; 0x90
 801581a:	0052      	lsls	r2, r2, #1
 801581c:	4694      	mov	ip, r2
 801581e:	44bc      	add	ip, r7
 8015820:	4463      	add	r3, ip
 8015822:	1c0a      	adds	r2, r1, #0
 8015824:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	2b00      	cmp	r3, #0
 801582a:	d101      	bne.n	8015830 <VerifyCmacB0+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801582c:	230a      	movs	r3, #10
 801582e:	e083      	b.n	8015938 <VerifyCmacB0+0x150>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8015830:	4b43      	ldr	r3, [pc, #268]	; (8015940 <VerifyCmacB0+0x158>)
 8015832:	2290      	movs	r2, #144	; 0x90
 8015834:	0052      	lsls	r2, r2, #1
 8015836:	4694      	mov	ip, r2
 8015838:	44bc      	add	ip, r7
 801583a:	4463      	add	r3, ip
 801583c:	881a      	ldrh	r2, [r3, #0]
 801583e:	2380      	movs	r3, #128	; 0x80
 8015840:	005b      	lsls	r3, r3, #1
 8015842:	429a      	cmp	r2, r3
 8015844:	d901      	bls.n	801584a <VerifyCmacB0+0x62>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8015846:	230e      	movs	r3, #14
 8015848:	e076      	b.n	8015938 <VerifyCmacB0+0x150>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 801584a:	2388      	movs	r3, #136	; 0x88
 801584c:	005a      	lsls	r2, r3, #1
 801584e:	250c      	movs	r5, #12
 8015850:	197b      	adds	r3, r7, r5
 8015852:	2100      	movs	r1, #0
 8015854:	0018      	movs	r0, r3
 8015856:	f003 fe8d 	bl	8019574 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 801585a:	2398      	movs	r3, #152	; 0x98
 801585c:	005b      	lsls	r3, r3, #1
 801585e:	2208      	movs	r2, #8
 8015860:	4694      	mov	ip, r2
 8015862:	44bc      	add	ip, r7
 8015864:	4463      	add	r3, ip
 8015866:	781c      	ldrb	r4, [r3, #0]
 8015868:	4b37      	ldr	r3, [pc, #220]	; (8015948 <VerifyCmacB0+0x160>)
 801586a:	2290      	movs	r2, #144	; 0x90
 801586c:	0052      	lsls	r2, r2, #1
 801586e:	4694      	mov	ip, r2
 8015870:	44bc      	add	ip, r7
 8015872:	4463      	add	r3, ip
 8015874:	781a      	ldrb	r2, [r3, #0]
 8015876:	4b33      	ldr	r3, [pc, #204]	; (8015944 <VerifyCmacB0+0x15c>)
 8015878:	2190      	movs	r1, #144	; 0x90
 801587a:	0049      	lsls	r1, r1, #1
 801587c:	468c      	mov	ip, r1
 801587e:	44bc      	add	ip, r7
 8015880:	4463      	add	r3, ip
 8015882:	7819      	ldrb	r1, [r3, #0]
 8015884:	4b2e      	ldr	r3, [pc, #184]	; (8015940 <VerifyCmacB0+0x158>)
 8015886:	2090      	movs	r0, #144	; 0x90
 8015888:	0040      	lsls	r0, r0, #1
 801588a:	4684      	mov	ip, r0
 801588c:	44bc      	add	ip, r7
 801588e:	4463      	add	r3, ip
 8015890:	8818      	ldrh	r0, [r3, #0]
 8015892:	197b      	adds	r3, r7, r5
 8015894:	9302      	str	r3, [sp, #8]
 8015896:	239c      	movs	r3, #156	; 0x9c
 8015898:	005b      	lsls	r3, r3, #1
 801589a:	2608      	movs	r6, #8
 801589c:	46b4      	mov	ip, r6
 801589e:	44bc      	add	ip, r7
 80158a0:	4463      	add	r3, ip
 80158a2:	681b      	ldr	r3, [r3, #0]
 80158a4:	9301      	str	r3, [sp, #4]
 80158a6:	239a      	movs	r3, #154	; 0x9a
 80158a8:	005b      	lsls	r3, r3, #1
 80158aa:	2608      	movs	r6, #8
 80158ac:	46b4      	mov	ip, r6
 80158ae:	44bc      	add	ip, r7
 80158b0:	4463      	add	r3, ip
 80158b2:	681b      	ldr	r3, [r3, #0]
 80158b4:	9300      	str	r3, [sp, #0]
 80158b6:	0023      	movs	r3, r4
 80158b8:	f7ff fee1 	bl	801567e <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 80158bc:	197b      	adds	r3, r7, r5
 80158be:	3310      	adds	r3, #16
 80158c0:	4a1f      	ldr	r2, [pc, #124]	; (8015940 <VerifyCmacB0+0x158>)
 80158c2:	2190      	movs	r1, #144	; 0x90
 80158c4:	0049      	lsls	r1, r1, #1
 80158c6:	468c      	mov	ip, r1
 80158c8:	44bc      	add	ip, r7
 80158ca:	4462      	add	r2, ip
 80158cc:	8812      	ldrh	r2, [r2, #0]
 80158ce:	6879      	ldr	r1, [r7, #4]
 80158d0:	0018      	movs	r0, r3
 80158d2:	f003 fe11 	bl	80194f8 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 80158d6:	2620      	movs	r6, #32
 80158d8:	36ff      	adds	r6, #255	; 0xff
 80158da:	19bb      	adds	r3, r7, r6
 80158dc:	2206      	movs	r2, #6
 80158de:	701a      	strb	r2, [r3, #0]
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 80158e0:	4b17      	ldr	r3, [pc, #92]	; (8015940 <VerifyCmacB0+0x158>)
 80158e2:	2290      	movs	r2, #144	; 0x90
 80158e4:	0052      	lsls	r2, r2, #1
 80158e6:	4694      	mov	ip, r2
 80158e8:	44bc      	add	ip, r7
 80158ea:	4463      	add	r3, ip
 80158ec:	881b      	ldrh	r3, [r3, #0]
 80158ee:	3310      	adds	r3, #16
 80158f0:	b299      	uxth	r1, r3
 80158f2:	19bc      	adds	r4, r7, r6
 80158f4:	4b13      	ldr	r3, [pc, #76]	; (8015944 <VerifyCmacB0+0x15c>)
 80158f6:	2290      	movs	r2, #144	; 0x90
 80158f8:	0052      	lsls	r2, r2, #1
 80158fa:	4694      	mov	ip, r2
 80158fc:	44bc      	add	ip, r7
 80158fe:	4463      	add	r3, ip
 8015900:	781b      	ldrb	r3, [r3, #0]
 8015902:	229e      	movs	r2, #158	; 0x9e
 8015904:	0052      	lsls	r2, r2, #1
 8015906:	2008      	movs	r0, #8
 8015908:	4684      	mov	ip, r0
 801590a:	44bc      	add	ip, r7
 801590c:	4462      	add	r2, ip
 801590e:	6812      	ldr	r2, [r2, #0]
 8015910:	1978      	adds	r0, r7, r5
 8015912:	f7f8 f898 	bl	800da46 <SecureElementVerifyAesCmac>
 8015916:	0003      	movs	r3, r0
 8015918:	7023      	strb	r3, [r4, #0]

    if( retval == SECURE_ELEMENT_SUCCESS )
 801591a:	19bb      	adds	r3, r7, r6
 801591c:	781b      	ldrb	r3, [r3, #0]
 801591e:	2b00      	cmp	r3, #0
 8015920:	d101      	bne.n	8015926 <VerifyCmacB0+0x13e>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8015922:	2300      	movs	r3, #0
 8015924:	e008      	b.n	8015938 <VerifyCmacB0+0x150>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8015926:	2320      	movs	r3, #32
 8015928:	33ff      	adds	r3, #255	; 0xff
 801592a:	18fb      	adds	r3, r7, r3
 801592c:	781b      	ldrb	r3, [r3, #0]
 801592e:	2b01      	cmp	r3, #1
 8015930:	d101      	bne.n	8015936 <VerifyCmacB0+0x14e>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8015932:	2301      	movs	r3, #1
 8015934:	e000      	b.n	8015938 <VerifyCmacB0+0x150>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015936:	230f      	movs	r3, #15
}
 8015938:	0018      	movs	r0, r3
 801593a:	46bd      	mov	sp, r7
 801593c:	b049      	add	sp, #292	; 0x124
 801593e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015940:	fffffee2 	.word	0xfffffee2
 8015944:	fffffee1 	.word	0xfffffee1
 8015948:	fffffee0 	.word	0xfffffee0

0801594c <GetKeyAddrItem>:
 * \param[IN]  addrID          - Address identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 801594c:	b580      	push	{r7, lr}
 801594e:	b084      	sub	sp, #16
 8015950:	af00      	add	r7, sp, #0
 8015952:	0002      	movs	r2, r0
 8015954:	6039      	str	r1, [r7, #0]
 8015956:	1dfb      	adds	r3, r7, #7
 8015958:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 801595a:	230f      	movs	r3, #15
 801595c:	18fb      	adds	r3, r7, r3
 801595e:	2200      	movs	r2, #0
 8015960:	701a      	strb	r2, [r3, #0]
 8015962:	e018      	b.n	8015996 <GetKeyAddrItem+0x4a>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8015964:	210f      	movs	r1, #15
 8015966:	187b      	adds	r3, r7, r1
 8015968:	781a      	ldrb	r2, [r3, #0]
 801596a:	4b10      	ldr	r3, [pc, #64]	; (80159ac <GetKeyAddrItem+0x60>)
 801596c:	0092      	lsls	r2, r2, #2
 801596e:	5cd3      	ldrb	r3, [r2, r3]
 8015970:	1dfa      	adds	r2, r7, #7
 8015972:	7812      	ldrb	r2, [r2, #0]
 8015974:	429a      	cmp	r2, r3
 8015976:	d108      	bne.n	801598a <GetKeyAddrItem+0x3e>
        {
            *item = &( KeyAddrList[i] );
 8015978:	187b      	adds	r3, r7, r1
 801597a:	781b      	ldrb	r3, [r3, #0]
 801597c:	009a      	lsls	r2, r3, #2
 801597e:	4b0b      	ldr	r3, [pc, #44]	; (80159ac <GetKeyAddrItem+0x60>)
 8015980:	18d2      	adds	r2, r2, r3
 8015982:	683b      	ldr	r3, [r7, #0]
 8015984:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8015986:	2300      	movs	r3, #0
 8015988:	e00b      	b.n	80159a2 <GetKeyAddrItem+0x56>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 801598a:	210f      	movs	r1, #15
 801598c:	187b      	adds	r3, r7, r1
 801598e:	781a      	ldrb	r2, [r3, #0]
 8015990:	187b      	adds	r3, r7, r1
 8015992:	3201      	adds	r2, #1
 8015994:	701a      	strb	r2, [r3, #0]
 8015996:	230f      	movs	r3, #15
 8015998:	18fb      	adds	r3, r7, r3
 801599a:	781b      	ldrb	r3, [r3, #0]
 801599c:	2b01      	cmp	r3, #1
 801599e:	d9e1      	bls.n	8015964 <GetKeyAddrItem+0x18>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 80159a0:	230c      	movs	r3, #12
}
 80159a2:	0018      	movs	r0, r3
 80159a4:	46bd      	mov	sp, r7
 80159a6:	b004      	add	sp, #16
 80159a8:	bd80      	pop	{r7, pc}
 80159aa:	46c0      	nop			; (mov r8, r8)
 80159ac:	200001a4 	.word	0x200001a4

080159b0 <DeriveSessionKey10x>:
 * \param[IN]  netID          - Network Identifier
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint8_t* joinNonce, uint8_t* netID, uint8_t* devNonce )
{
 80159b0:	b590      	push	{r4, r7, lr}
 80159b2:	b089      	sub	sp, #36	; 0x24
 80159b4:	af00      	add	r7, sp, #0
 80159b6:	60b9      	str	r1, [r7, #8]
 80159b8:	607a      	str	r2, [r7, #4]
 80159ba:	603b      	str	r3, [r7, #0]
 80159bc:	230f      	movs	r3, #15
 80159be:	18fb      	adds	r3, r7, r3
 80159c0:	1c02      	adds	r2, r0, #0
 80159c2:	701a      	strb	r2, [r3, #0]
    if( ( joinNonce == 0 ) || ( netID == 0 ) || ( devNonce == 0 ) )
 80159c4:	68bb      	ldr	r3, [r7, #8]
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	d005      	beq.n	80159d6 <DeriveSessionKey10x+0x26>
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d002      	beq.n	80159d6 <DeriveSessionKey10x+0x26>
 80159d0:	683b      	ldr	r3, [r7, #0]
 80159d2:	2b00      	cmp	r3, #0
 80159d4:	d101      	bne.n	80159da <DeriveSessionKey10x+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80159d6:	230a      	movs	r3, #10
 80159d8:	e043      	b.n	8015a62 <DeriveSessionKey10x+0xb2>
    }

    uint8_t compBase[16] = { 0 };
 80159da:	2310      	movs	r3, #16
 80159dc:	18fb      	adds	r3, r7, r3
 80159de:	2200      	movs	r2, #0
 80159e0:	601a      	str	r2, [r3, #0]
 80159e2:	3304      	adds	r3, #4
 80159e4:	220c      	movs	r2, #12
 80159e6:	2100      	movs	r1, #0
 80159e8:	0018      	movs	r0, r3
 80159ea:	f008 fa96 	bl	801df1a <memset>

    switch( keyID )
 80159ee:	230f      	movs	r3, #15
 80159f0:	18fb      	adds	r3, r7, r3
 80159f2:	781b      	ldrb	r3, [r3, #0]
 80159f4:	2b02      	cmp	r3, #2
 80159f6:	d002      	beq.n	80159fe <DeriveSessionKey10x+0x4e>
 80159f8:	2b03      	cmp	r3, #3
 80159fa:	d005      	beq.n	8015a08 <DeriveSessionKey10x+0x58>
 80159fc:	e009      	b.n	8015a12 <DeriveSessionKey10x+0x62>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 80159fe:	2310      	movs	r3, #16
 8015a00:	18fb      	adds	r3, r7, r3
 8015a02:	2201      	movs	r2, #1
 8015a04:	701a      	strb	r2, [r3, #0]
            break;
 8015a06:	e006      	b.n	8015a16 <DeriveSessionKey10x+0x66>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8015a08:	2310      	movs	r3, #16
 8015a0a:	18fb      	adds	r3, r7, r3
 8015a0c:	2202      	movs	r2, #2
 8015a0e:	701a      	strb	r2, [r3, #0]
            break;
 8015a10:	e001      	b.n	8015a16 <DeriveSessionKey10x+0x66>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8015a12:	230b      	movs	r3, #11
 8015a14:	e025      	b.n	8015a62 <DeriveSessionKey10x+0xb2>
    }

    memcpy1( compBase + 1, joinNonce, 3 );
 8015a16:	2410      	movs	r4, #16
 8015a18:	193b      	adds	r3, r7, r4
 8015a1a:	3301      	adds	r3, #1
 8015a1c:	68b9      	ldr	r1, [r7, #8]
 8015a1e:	2203      	movs	r2, #3
 8015a20:	0018      	movs	r0, r3
 8015a22:	f003 fd69 	bl	80194f8 <memcpy1>
    memcpy1( compBase + 4, netID, 3 );
 8015a26:	193b      	adds	r3, r7, r4
 8015a28:	3304      	adds	r3, #4
 8015a2a:	6879      	ldr	r1, [r7, #4]
 8015a2c:	2203      	movs	r2, #3
 8015a2e:	0018      	movs	r0, r3
 8015a30:	f003 fd62 	bl	80194f8 <memcpy1>
    memcpy1( compBase + 7, devNonce, 2 );
 8015a34:	193b      	adds	r3, r7, r4
 8015a36:	3307      	adds	r3, #7
 8015a38:	6839      	ldr	r1, [r7, #0]
 8015a3a:	2202      	movs	r2, #2
 8015a3c:	0018      	movs	r0, r3
 8015a3e:	f003 fd5b 	bl	80194f8 <memcpy1>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8015a42:	4b0a      	ldr	r3, [pc, #40]	; (8015a6c <DeriveSessionKey10x+0xbc>)
 8015a44:	681b      	ldr	r3, [r3, #0]
 8015a46:	220f      	movs	r2, #15
 8015a48:	18ba      	adds	r2, r7, r2
 8015a4a:	7812      	ldrb	r2, [r2, #0]
 8015a4c:	1939      	adds	r1, r7, r4
 8015a4e:	6818      	ldr	r0, [r3, #0]
 8015a50:	0013      	movs	r3, r2
 8015a52:	2201      	movs	r2, #1
 8015a54:	f7f8 f8aa 	bl	800dbac <SecureElementDeriveAndStoreKey>
 8015a58:	1e03      	subs	r3, r0, #0
 8015a5a:	d001      	beq.n	8015a60 <DeriveSessionKey10x+0xb0>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015a5c:	230f      	movs	r3, #15
 8015a5e:	e000      	b.n	8015a62 <DeriveSessionKey10x+0xb2>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015a60:	2300      	movs	r3, #0
}
 8015a62:	0018      	movs	r0, r3
 8015a64:	46bd      	mov	sp, r7
 8015a66:	b009      	add	sp, #36	; 0x24
 8015a68:	bd90      	pop	{r4, r7, pc}
 8015a6a:	46c0      	nop			; (mov r8, r8)
 8015a6c:	20000d18 	.word	0x20000d18

08015a70 <GetLastFcntDown>:
 * \param[IN]     lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8015a70:	b580      	push	{r7, lr}
 8015a72:	b082      	sub	sp, #8
 8015a74:	af00      	add	r7, sp, #0
 8015a76:	0002      	movs	r2, r0
 8015a78:	6039      	str	r1, [r7, #0]
 8015a7a:	1dfb      	adds	r3, r7, #7
 8015a7c:	701a      	strb	r2, [r3, #0]
    if( lastDown == NULL )
 8015a7e:	683b      	ldr	r3, [r7, #0]
 8015a80:	2b00      	cmp	r3, #0
 8015a82:	d101      	bne.n	8015a88 <GetLastFcntDown+0x18>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015a84:	230a      	movs	r3, #10
 8015a86:	e039      	b.n	8015afc <GetLastFcntDown+0x8c>
    }
    switch( fCntID )
 8015a88:	1dfb      	adds	r3, r7, #7
 8015a8a:	781b      	ldrb	r3, [r3, #0]
 8015a8c:	2b04      	cmp	r3, #4
 8015a8e:	d02c      	beq.n	8015aea <GetLastFcntDown+0x7a>
 8015a90:	dc31      	bgt.n	8015af6 <GetLastFcntDown+0x86>
 8015a92:	2b03      	cmp	r3, #3
 8015a94:	d01d      	beq.n	8015ad2 <GetLastFcntDown+0x62>
 8015a96:	dc2e      	bgt.n	8015af6 <GetLastFcntDown+0x86>
 8015a98:	2b01      	cmp	r3, #1
 8015a9a:	d002      	beq.n	8015aa2 <GetLastFcntDown+0x32>
 8015a9c:	2b02      	cmp	r3, #2
 8015a9e:	d00c      	beq.n	8015aba <GetLastFcntDown+0x4a>
 8015aa0:	e029      	b.n	8015af6 <GetLastFcntDown+0x86>
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoCtx.NvmCtx->FCntList.NFCntDown;
 8015aa2:	4b18      	ldr	r3, [pc, #96]	; (8015b04 <GetLastFcntDown+0x94>)
 8015aa4:	681b      	ldr	r3, [r3, #0]
 8015aa6:	691a      	ldr	r2, [r3, #16]
 8015aa8:	683b      	ldr	r3, [r7, #0]
 8015aaa:	601a      	str	r2, [r3, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.NFCntDown;
 8015aac:	4b15      	ldr	r3, [pc, #84]	; (8015b04 <GetLastFcntDown+0x94>)
 8015aae:	681a      	ldr	r2, [r3, #0]
 8015ab0:	4b14      	ldr	r3, [pc, #80]	; (8015b04 <GetLastFcntDown+0x94>)
 8015ab2:	681b      	ldr	r3, [r3, #0]
 8015ab4:	3210      	adds	r2, #16
 8015ab6:	621a      	str	r2, [r3, #32]
            break;
 8015ab8:	e01f      	b.n	8015afa <GetLastFcntDown+0x8a>
        case A_FCNT_DOWN:
            *lastDown = CryptoCtx.NvmCtx->FCntList.AFCntDown;
 8015aba:	4b12      	ldr	r3, [pc, #72]	; (8015b04 <GetLastFcntDown+0x94>)
 8015abc:	681b      	ldr	r3, [r3, #0]
 8015abe:	695a      	ldr	r2, [r3, #20]
 8015ac0:	683b      	ldr	r3, [r7, #0]
 8015ac2:	601a      	str	r2, [r3, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.AFCntDown;
 8015ac4:	4b0f      	ldr	r3, [pc, #60]	; (8015b04 <GetLastFcntDown+0x94>)
 8015ac6:	681a      	ldr	r2, [r3, #0]
 8015ac8:	4b0e      	ldr	r3, [pc, #56]	; (8015b04 <GetLastFcntDown+0x94>)
 8015aca:	681b      	ldr	r3, [r3, #0]
 8015acc:	3214      	adds	r2, #20
 8015ace:	621a      	str	r2, [r3, #32]
            break;
 8015ad0:	e013      	b.n	8015afa <GetLastFcntDown+0x8a>
        case FCNT_DOWN:
            *lastDown = CryptoCtx.NvmCtx->FCntList.FCntDown;
 8015ad2:	4b0c      	ldr	r3, [pc, #48]	; (8015b04 <GetLastFcntDown+0x94>)
 8015ad4:	681b      	ldr	r3, [r3, #0]
 8015ad6:	699a      	ldr	r2, [r3, #24]
 8015ad8:	683b      	ldr	r3, [r7, #0]
 8015ada:	601a      	str	r2, [r3, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 8015adc:	4b09      	ldr	r3, [pc, #36]	; (8015b04 <GetLastFcntDown+0x94>)
 8015ade:	681a      	ldr	r2, [r3, #0]
 8015ae0:	4b08      	ldr	r3, [pc, #32]	; (8015b04 <GetLastFcntDown+0x94>)
 8015ae2:	681b      	ldr	r3, [r3, #0]
 8015ae4:	3218      	adds	r2, #24
 8015ae6:	621a      	str	r2, [r3, #32]
            break;
 8015ae8:	e007      	b.n	8015afa <GetLastFcntDown+0x8a>
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 8015aea:	4b06      	ldr	r3, [pc, #24]	; (8015b04 <GetLastFcntDown+0x94>)
 8015aec:	681b      	ldr	r3, [r3, #0]
 8015aee:	69da      	ldr	r2, [r3, #28]
 8015af0:	683b      	ldr	r3, [r7, #0]
 8015af2:	601a      	str	r2, [r3, #0]
            break;
 8015af4:	e001      	b.n	8015afa <GetLastFcntDown+0x8a>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 1 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8015af6:	2305      	movs	r3, #5
 8015af8:	e000      	b.n	8015afc <GetLastFcntDown+0x8c>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8015afa:	2300      	movs	r3, #0
}
 8015afc:	0018      	movs	r0, r3
 8015afe:	46bd      	mov	sp, r7
 8015b00:	b002      	add	sp, #8
 8015b02:	bd80      	pop	{r7, pc}
 8015b04:	20000d18 	.word	0x20000d18

08015b08 <CheckFCntDown>:
 * \param[IN]     currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8015b08:	b580      	push	{r7, lr}
 8015b0a:	b084      	sub	sp, #16
 8015b0c:	af00      	add	r7, sp, #0
 8015b0e:	0002      	movs	r2, r0
 8015b10:	6039      	str	r1, [r7, #0]
 8015b12:	1dfb      	adds	r3, r7, #7
 8015b14:	701a      	strb	r2, [r3, #0]
    uint32_t lastDown = 0;
 8015b16:	2300      	movs	r3, #0
 8015b18:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8015b1a:	230c      	movs	r3, #12
 8015b1c:	18fa      	adds	r2, r7, r3
 8015b1e:	1dfb      	adds	r3, r7, #7
 8015b20:	781b      	ldrb	r3, [r3, #0]
 8015b22:	0011      	movs	r1, r2
 8015b24:	0018      	movs	r0, r3
 8015b26:	f7ff ffa3 	bl	8015a70 <GetLastFcntDown>
 8015b2a:	1e03      	subs	r3, r0, #0
 8015b2c:	d001      	beq.n	8015b32 <CheckFCntDown+0x2a>
    {
        return false;
 8015b2e:	2300      	movs	r3, #0
 8015b30:	e009      	b.n	8015b46 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8015b32:	68fb      	ldr	r3, [r7, #12]
 8015b34:	683a      	ldr	r2, [r7, #0]
 8015b36:	429a      	cmp	r2, r3
 8015b38:	d802      	bhi.n	8015b40 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 8015b3a:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8015b3c:	3301      	adds	r3, #1
 8015b3e:	d101      	bne.n	8015b44 <CheckFCntDown+0x3c>
    {
        return true;
 8015b40:	2301      	movs	r3, #1
 8015b42:	e000      	b.n	8015b46 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8015b44:	2300      	movs	r3, #0
    }
}
 8015b46:	0018      	movs	r0, r3
 8015b48:	46bd      	mov	sp, r7
 8015b4a:	b004      	add	sp, #16
 8015b4c:	bd80      	pop	{r7, pc}
	...

08015b50 <UpdateFCntDown>:
 * \param[IN]     currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8015b50:	b580      	push	{r7, lr}
 8015b52:	b082      	sub	sp, #8
 8015b54:	af00      	add	r7, sp, #0
 8015b56:	0002      	movs	r2, r0
 8015b58:	6039      	str	r1, [r7, #0]
 8015b5a:	1dfb      	adds	r3, r7, #7
 8015b5c:	701a      	strb	r2, [r3, #0]
    switch( fCntID )
 8015b5e:	1dfb      	adds	r3, r7, #7
 8015b60:	781b      	ldrb	r3, [r3, #0]
 8015b62:	2b04      	cmp	r3, #4
 8015b64:	d017      	beq.n	8015b96 <UpdateFCntDown+0x46>
 8015b66:	dc1b      	bgt.n	8015ba0 <UpdateFCntDown+0x50>
 8015b68:	2b03      	cmp	r3, #3
 8015b6a:	d00f      	beq.n	8015b8c <UpdateFCntDown+0x3c>
 8015b6c:	dc18      	bgt.n	8015ba0 <UpdateFCntDown+0x50>
 8015b6e:	2b01      	cmp	r3, #1
 8015b70:	d002      	beq.n	8015b78 <UpdateFCntDown+0x28>
 8015b72:	2b02      	cmp	r3, #2
 8015b74:	d005      	beq.n	8015b82 <UpdateFCntDown+0x32>
        case MC_FCNT_DOWN_3:
            CryptoCtx.NvmCtx->FCntList.McFCntDown3 = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 1 */
        default:
            break;
 8015b76:	e013      	b.n	8015ba0 <UpdateFCntDown+0x50>
            CryptoCtx.NvmCtx->FCntList.NFCntDown = currentDown;
 8015b78:	4b0d      	ldr	r3, [pc, #52]	; (8015bb0 <UpdateFCntDown+0x60>)
 8015b7a:	681b      	ldr	r3, [r3, #0]
 8015b7c:	683a      	ldr	r2, [r7, #0]
 8015b7e:	611a      	str	r2, [r3, #16]
            break;
 8015b80:	e00f      	b.n	8015ba2 <UpdateFCntDown+0x52>
            CryptoCtx.NvmCtx->FCntList.AFCntDown = currentDown;
 8015b82:	4b0b      	ldr	r3, [pc, #44]	; (8015bb0 <UpdateFCntDown+0x60>)
 8015b84:	681b      	ldr	r3, [r3, #0]
 8015b86:	683a      	ldr	r2, [r7, #0]
 8015b88:	615a      	str	r2, [r3, #20]
            break;
 8015b8a:	e00a      	b.n	8015ba2 <UpdateFCntDown+0x52>
            CryptoCtx.NvmCtx->FCntList.FCntDown = currentDown;
 8015b8c:	4b08      	ldr	r3, [pc, #32]	; (8015bb0 <UpdateFCntDown+0x60>)
 8015b8e:	681b      	ldr	r3, [r3, #0]
 8015b90:	683a      	ldr	r2, [r7, #0]
 8015b92:	619a      	str	r2, [r3, #24]
            break;
 8015b94:	e005      	b.n	8015ba2 <UpdateFCntDown+0x52>
            CryptoCtx.NvmCtx->FCntList.McFCntDown0 = currentDown;
 8015b96:	4b06      	ldr	r3, [pc, #24]	; (8015bb0 <UpdateFCntDown+0x60>)
 8015b98:	681b      	ldr	r3, [r3, #0]
 8015b9a:	683a      	ldr	r2, [r7, #0]
 8015b9c:	61da      	str	r2, [r3, #28]
            break;
 8015b9e:	e000      	b.n	8015ba2 <UpdateFCntDown+0x52>
            break;
 8015ba0:	46c0      	nop			; (mov r8, r8)
    }
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8015ba2:	4b03      	ldr	r3, [pc, #12]	; (8015bb0 <UpdateFCntDown+0x60>)
 8015ba4:	685b      	ldr	r3, [r3, #4]
 8015ba6:	4798      	blx	r3
}
 8015ba8:	46c0      	nop			; (mov r8, r8)
 8015baa:	46bd      	mov	sp, r7
 8015bac:	b002      	add	sp, #8
 8015bae:	bd80      	pop	{r7, pc}
 8015bb0:	20000d18 	.word	0x20000d18

08015bb4 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8015bb4:	b580      	push	{r7, lr}
 8015bb6:	af00      	add	r7, sp, #0

    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 8015bb8:	4b11      	ldr	r3, [pc, #68]	; (8015c00 <ResetFCnts+0x4c>)
 8015bba:	681b      	ldr	r3, [r3, #0]
 8015bbc:	2200      	movs	r2, #0
 8015bbe:	60da      	str	r2, [r3, #12]
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8015bc0:	4b0f      	ldr	r3, [pc, #60]	; (8015c00 <ResetFCnts+0x4c>)
 8015bc2:	681b      	ldr	r3, [r3, #0]
 8015bc4:	2201      	movs	r2, #1
 8015bc6:	4252      	negs	r2, r2
 8015bc8:	611a      	str	r2, [r3, #16]
    CryptoCtx.NvmCtx->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8015bca:	4b0d      	ldr	r3, [pc, #52]	; (8015c00 <ResetFCnts+0x4c>)
 8015bcc:	681b      	ldr	r3, [r3, #0]
 8015bce:	2201      	movs	r2, #1
 8015bd0:	4252      	negs	r2, r2
 8015bd2:	615a      	str	r2, [r3, #20]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8015bd4:	4b0a      	ldr	r3, [pc, #40]	; (8015c00 <ResetFCnts+0x4c>)
 8015bd6:	681b      	ldr	r3, [r3, #0]
 8015bd8:	2201      	movs	r2, #1
 8015bda:	4252      	negs	r2, r2
 8015bdc:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 8015bde:	4b08      	ldr	r3, [pc, #32]	; (8015c00 <ResetFCnts+0x4c>)
 8015be0:	681a      	ldr	r2, [r3, #0]
 8015be2:	4b07      	ldr	r3, [pc, #28]	; (8015c00 <ResetFCnts+0x4c>)
 8015be4:	681b      	ldr	r3, [r3, #0]
 8015be6:	3218      	adds	r2, #24
 8015be8:	621a      	str	r2, [r3, #32]

    CryptoCtx.NvmCtx->FCntList.McFCntDown0 = FCNT_DOWN_INITAL_VALUE;
 8015bea:	4b05      	ldr	r3, [pc, #20]	; (8015c00 <ResetFCnts+0x4c>)
 8015bec:	681b      	ldr	r3, [r3, #0]
 8015bee:	2201      	movs	r2, #1
 8015bf0:	4252      	negs	r2, r2
 8015bf2:	61da      	str	r2, [r3, #28]
#if ( LORAMAC_MAX_MC_CTX > 1 )
    CryptoCtx.NvmCtx->FCntList.McFCntDown1 = FCNT_DOWN_INITAL_VALUE;
    CryptoCtx.NvmCtx->FCntList.McFCntDown2 = FCNT_DOWN_INITAL_VALUE;
    CryptoCtx.NvmCtx->FCntList.McFCntDown3 = FCNT_DOWN_INITAL_VALUE;
#endif /* LORAMAC_MAX_MC_CTX > 1 */
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8015bf4:	4b02      	ldr	r3, [pc, #8]	; (8015c00 <ResetFCnts+0x4c>)
 8015bf6:	685b      	ldr	r3, [r3, #4]
 8015bf8:	4798      	blx	r3
}
 8015bfa:	46c0      	nop			; (mov r8, r8)
 8015bfc:	46bd      	mov	sp, r7
 8015bfe:	bd80      	pop	{r7, pc}
 8015c00:	20000d18 	.word	0x20000d18

08015c04 <DummyCB>:

/*
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB( void )
{
 8015c04:	b580      	push	{r7, lr}
 8015c06:	af00      	add	r7, sp, #0
    return;
 8015c08:	46c0      	nop			; (mov r8, r8)
}
 8015c0a:	46bd      	mov	sp, r7
 8015c0c:	bd80      	pop	{r7, pc}
	...

08015c10 <LoRaMacCryptoInit>:
/*
 *  API functions
 */

LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmEvent cryptoNvmCtxChanged )
{
 8015c10:	b580      	push	{r7, lr}
 8015c12:	b082      	sub	sp, #8
 8015c14:	af00      	add	r7, sp, #0
 8015c16:	6078      	str	r0, [r7, #4]
    // Assign non volatile context
    CryptoCtx.NvmCtx = &NvmCryptoCtx;
 8015c18:	4b15      	ldr	r3, [pc, #84]	; (8015c70 <LoRaMacCryptoInit+0x60>)
 8015c1a:	4a16      	ldr	r2, [pc, #88]	; (8015c74 <LoRaMacCryptoInit+0x64>)
 8015c1c:	601a      	str	r2, [r3, #0]

    // Assign callback
    if( cryptoNvmCtxChanged != 0 )
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	d003      	beq.n	8015c2c <LoRaMacCryptoInit+0x1c>
    {
        CryptoCtx.EventCryptoNvmCtxChanged = cryptoNvmCtxChanged;
 8015c24:	4b12      	ldr	r3, [pc, #72]	; (8015c70 <LoRaMacCryptoInit+0x60>)
 8015c26:	687a      	ldr	r2, [r7, #4]
 8015c28:	605a      	str	r2, [r3, #4]
 8015c2a:	e002      	b.n	8015c32 <LoRaMacCryptoInit+0x22>
    }
    else
    {
        CryptoCtx.EventCryptoNvmCtxChanged = DummyCB;
 8015c2c:	4b10      	ldr	r3, [pc, #64]	; (8015c70 <LoRaMacCryptoInit+0x60>)
 8015c2e:	4a12      	ldr	r2, [pc, #72]	; (8015c78 <LoRaMacCryptoInit+0x68>)
 8015c30:	605a      	str	r2, [r3, #4]
    }

    // Initialize with default
    memset1( ( uint8_t* )CryptoCtx.NvmCtx, 0, sizeof( LoRaMacCryptoNvmCtx_t ) );
 8015c32:	4b0f      	ldr	r3, [pc, #60]	; (8015c70 <LoRaMacCryptoInit+0x60>)
 8015c34:	681b      	ldr	r3, [r3, #0]
 8015c36:	2224      	movs	r2, #36	; 0x24
 8015c38:	2100      	movs	r1, #0
 8015c3a:	0018      	movs	r0, r3
 8015c3c:	f003 fc9a 	bl	8019574 <memset1>

    // Set default LoRaWAN version
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Major = 1;
 8015c40:	4b0b      	ldr	r3, [pc, #44]	; (8015c70 <LoRaMacCryptoInit+0x60>)
 8015c42:	681b      	ldr	r3, [r3, #0]
 8015c44:	2201      	movs	r2, #1
 8015c46:	70da      	strb	r2, [r3, #3]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = 1;
 8015c48:	4b09      	ldr	r3, [pc, #36]	; (8015c70 <LoRaMacCryptoInit+0x60>)
 8015c4a:	681b      	ldr	r3, [r3, #0]
 8015c4c:	2201      	movs	r2, #1
 8015c4e:	709a      	strb	r2, [r3, #2]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Patch = 1;
 8015c50:	4b07      	ldr	r3, [pc, #28]	; (8015c70 <LoRaMacCryptoInit+0x60>)
 8015c52:	681b      	ldr	r3, [r3, #0]
 8015c54:	2201      	movs	r2, #1
 8015c56:	705a      	strb	r2, [r3, #1]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Revision = 0;
 8015c58:	4b05      	ldr	r3, [pc, #20]	; (8015c70 <LoRaMacCryptoInit+0x60>)
 8015c5a:	681b      	ldr	r3, [r3, #0]
 8015c5c:	2200      	movs	r2, #0
 8015c5e:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8015c60:	f7ff ffa8 	bl	8015bb4 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8015c64:	2300      	movs	r3, #0
}
 8015c66:	0018      	movs	r0, r3
 8015c68:	46bd      	mov	sp, r7
 8015c6a:	b002      	add	sp, #8
 8015c6c:	bd80      	pop	{r7, pc}
 8015c6e:	46c0      	nop			; (mov r8, r8)
 8015c70:	20000d18 	.word	0x20000d18
 8015c74:	20000d20 	.word	0x20000d20
 8015c78:	08015c05 	.word	0x08015c05

08015c7c <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8015c7c:	b580      	push	{r7, lr}
 8015c7e:	b082      	sub	sp, #8
 8015c80:	af00      	add	r7, sp, #0
 8015c82:	6078      	str	r0, [r7, #4]
    CryptoCtx.NvmCtx->LrWanVersion = version;
 8015c84:	4b04      	ldr	r3, [pc, #16]	; (8015c98 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8015c86:	681b      	ldr	r3, [r3, #0]
 8015c88:	687a      	ldr	r2, [r7, #4]
 8015c8a:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8015c8c:	2300      	movs	r3, #0
}
 8015c8e:	0018      	movs	r0, r3
 8015c90:	46bd      	mov	sp, r7
 8015c92:	b002      	add	sp, #8
 8015c94:	bd80      	pop	{r7, pc}
 8015c96:	46c0      	nop			; (mov r8, r8)
 8015c98:	20000d18 	.word	0x20000d18

08015c9c <LoRaMacCryptoRestoreNvmCtx>:

LoRaMacCryptoStatus_t LoRaMacCryptoRestoreNvmCtx( void* cryptoNvmCtx )
{
 8015c9c:	b580      	push	{r7, lr}
 8015c9e:	b082      	sub	sp, #8
 8015ca0:	af00      	add	r7, sp, #0
 8015ca2:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( cryptoNvmCtx != 0 )
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	2b00      	cmp	r3, #0
 8015ca8:	d007      	beq.n	8015cba <LoRaMacCryptoRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* )&NvmCryptoCtx, ( uint8_t* )cryptoNvmCtx, CRYPTO_NVM_CTX_SIZE );
 8015caa:	6879      	ldr	r1, [r7, #4]
 8015cac:	4b05      	ldr	r3, [pc, #20]	; (8015cc4 <LoRaMacCryptoRestoreNvmCtx+0x28>)
 8015cae:	2224      	movs	r2, #36	; 0x24
 8015cb0:	0018      	movs	r0, r3
 8015cb2:	f003 fc21 	bl	80194f8 <memcpy1>
        return LORAMAC_CRYPTO_SUCCESS;
 8015cb6:	2300      	movs	r3, #0
 8015cb8:	e000      	b.n	8015cbc <LoRaMacCryptoRestoreNvmCtx+0x20>
    }
    else
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015cba:	230a      	movs	r3, #10
    }
}
 8015cbc:	0018      	movs	r0, r3
 8015cbe:	46bd      	mov	sp, r7
 8015cc0:	b002      	add	sp, #8
 8015cc2:	bd80      	pop	{r7, pc}
 8015cc4:	20000d20 	.word	0x20000d20

08015cc8 <LoRaMacCryptoGetNvmCtx>:

void* LoRaMacCryptoGetNvmCtx( size_t* cryptoNvmCtxSize )
{
 8015cc8:	b580      	push	{r7, lr}
 8015cca:	b082      	sub	sp, #8
 8015ccc:	af00      	add	r7, sp, #0
 8015cce:	6078      	str	r0, [r7, #4]
    *cryptoNvmCtxSize = CRYPTO_NVM_CTX_SIZE;
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	2224      	movs	r2, #36	; 0x24
 8015cd4:	601a      	str	r2, [r3, #0]
    return &NvmCryptoCtx;
 8015cd6:	4b02      	ldr	r3, [pc, #8]	; (8015ce0 <LoRaMacCryptoGetNvmCtx+0x18>)
}
 8015cd8:	0018      	movs	r0, r3
 8015cda:	46bd      	mov	sp, r7
 8015cdc:	b002      	add	sp, #8
 8015cde:	bd80      	pop	{r7, pc}
 8015ce0:	20000d20 	.word	0x20000d20

08015ce4 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8015ce4:	b580      	push	{r7, lr}
 8015ce6:	b082      	sub	sp, #8
 8015ce8:	af00      	add	r7, sp, #0
 8015cea:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	2b00      	cmp	r3, #0
 8015cf0:	d101      	bne.n	8015cf6 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015cf2:	230a      	movs	r3, #10
 8015cf4:	e006      	b.n	8015d04 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoCtx.NvmCtx->FCntList.FCntUp + 1;
 8015cf6:	4b05      	ldr	r3, [pc, #20]	; (8015d0c <LoRaMacCryptoGetFCntUp+0x28>)
 8015cf8:	681b      	ldr	r3, [r3, #0]
 8015cfa:	68db      	ldr	r3, [r3, #12]
 8015cfc:	1c5a      	adds	r2, r3, #1
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8015d02:	2300      	movs	r3, #0
}
 8015d04:	0018      	movs	r0, r3
 8015d06:	46bd      	mov	sp, r7
 8015d08:	b002      	add	sp, #8
 8015d0a:	bd80      	pop	{r7, pc}
 8015d0c:	20000d18 	.word	0x20000d18

08015d10 <LoRaMacCryptoGetFCntDown>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 8015d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d12:	b08d      	sub	sp, #52	; 0x34
 8015d14:	af00      	add	r7, sp, #0
 8015d16:	61ba      	str	r2, [r7, #24]
 8015d18:	617b      	str	r3, [r7, #20]
 8015d1a:	230f      	movs	r3, #15
 8015d1c:	2210      	movs	r2, #16
 8015d1e:	4694      	mov	ip, r2
 8015d20:	44bc      	add	ip, r7
 8015d22:	4463      	add	r3, ip
 8015d24:	1c02      	adds	r2, r0, #0
 8015d26:	701a      	strb	r2, [r3, #0]
 8015d28:	230c      	movs	r3, #12
 8015d2a:	2210      	movs	r2, #16
 8015d2c:	4694      	mov	ip, r2
 8015d2e:	44bc      	add	ip, r7
 8015d30:	4463      	add	r3, ip
 8015d32:	1c0a      	adds	r2, r1, #0
 8015d34:	801a      	strh	r2, [r3, #0]
    uint32_t lastDown = 0;
 8015d36:	2300      	movs	r3, #0
 8015d38:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t fCntDiff = 0;
 8015d3a:	2300      	movs	r3, #0
 8015d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8015d3e:	231b      	movs	r3, #27
 8015d40:	2210      	movs	r2, #16
 8015d42:	4694      	mov	ip, r2
 8015d44:	44bc      	add	ip, r7
 8015d46:	4463      	add	r3, ip
 8015d48:	2213      	movs	r2, #19
 8015d4a:	701a      	strb	r2, [r3, #0]

    if( currentDown == NULL )
 8015d4c:	697b      	ldr	r3, [r7, #20]
 8015d4e:	2b00      	cmp	r3, #0
 8015d50:	d101      	bne.n	8015d56 <LoRaMacCryptoGetFCntDown+0x46>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015d52:	230a      	movs	r3, #10
 8015d54:	e06b      	b.n	8015e2e <LoRaMacCryptoGetFCntDown+0x11e>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8015d56:	221b      	movs	r2, #27
 8015d58:	2110      	movs	r1, #16
 8015d5a:	187b      	adds	r3, r7, r1
 8015d5c:	189e      	adds	r6, r3, r2
 8015d5e:	2314      	movs	r3, #20
 8015d60:	187a      	adds	r2, r7, r1
 8015d62:	18d2      	adds	r2, r2, r3
 8015d64:	230f      	movs	r3, #15
 8015d66:	2010      	movs	r0, #16
 8015d68:	4684      	mov	ip, r0
 8015d6a:	44bc      	add	ip, r7
 8015d6c:	4463      	add	r3, ip
 8015d6e:	781b      	ldrb	r3, [r3, #0]
 8015d70:	0011      	movs	r1, r2
 8015d72:	0018      	movs	r0, r3
 8015d74:	f7ff fe7c 	bl	8015a70 <GetLastFcntDown>
 8015d78:	0003      	movs	r3, r0
 8015d7a:	7033      	strb	r3, [r6, #0]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8015d7c:	221b      	movs	r2, #27
 8015d7e:	2110      	movs	r1, #16
 8015d80:	187b      	adds	r3, r7, r1
 8015d82:	189b      	adds	r3, r3, r2
 8015d84:	781b      	ldrb	r3, [r3, #0]
 8015d86:	2b00      	cmp	r3, #0
 8015d88:	d003      	beq.n	8015d92 <LoRaMacCryptoGetFCntDown+0x82>
    {
        return cryptoStatus;
 8015d8a:	187b      	adds	r3, r7, r1
 8015d8c:	189b      	adds	r3, r3, r2
 8015d8e:	781b      	ldrb	r3, [r3, #0]
 8015d90:	e04d      	b.n	8015e2e <LoRaMacCryptoGetFCntDown+0x11e>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 8015d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d94:	3301      	adds	r3, #1
 8015d96:	d103      	bne.n	8015da0 <LoRaMacCryptoGetFCntDown+0x90>
    {
        *currentDown = frameFcnt;
 8015d98:	697b      	ldr	r3, [r7, #20]
 8015d9a:	69ba      	ldr	r2, [r7, #24]
 8015d9c:	601a      	str	r2, [r3, #0]
 8015d9e:	e020      	b.n	8015de2 <LoRaMacCryptoGetFCntDown+0xd2>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8015da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015da2:	041b      	lsls	r3, r3, #16
 8015da4:	0c1b      	lsrs	r3, r3, #16
 8015da6:	69ba      	ldr	r2, [r7, #24]
 8015da8:	1ad3      	subs	r3, r2, r3
 8015daa:	62fb      	str	r3, [r7, #44]	; 0x2c

        if( fCntDiff > 0 )
 8015dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	dd05      	ble.n	8015dbe <LoRaMacCryptoGetFCntDown+0xae>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8015db2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015db6:	18d2      	adds	r2, r2, r3
 8015db8:	697b      	ldr	r3, [r7, #20]
 8015dba:	601a      	str	r2, [r3, #0]
 8015dbc:	e011      	b.n	8015de2 <LoRaMacCryptoGetFCntDown+0xd2>
        }
        else if( fCntDiff == 0 )
 8015dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	d104      	bne.n	8015dce <LoRaMacCryptoGetFCntDown+0xbe>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8015dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015dc6:	697b      	ldr	r3, [r7, #20]
 8015dc8:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8015dca:	2307      	movs	r3, #7
 8015dcc:	e02f      	b.n	8015e2e <LoRaMacCryptoGetFCntDown+0x11e>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8015dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dd0:	0c1b      	lsrs	r3, r3, #16
 8015dd2:	041a      	lsls	r2, r3, #16
 8015dd4:	69bb      	ldr	r3, [r7, #24]
 8015dd6:	18d3      	adds	r3, r2, r3
 8015dd8:	2280      	movs	r2, #128	; 0x80
 8015dda:	0252      	lsls	r2, r2, #9
 8015ddc:	189a      	adds	r2, r3, r2
 8015dde:	697b      	ldr	r3, [r7, #20]
 8015de0:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 8015de2:	4b15      	ldr	r3, [pc, #84]	; (8015e38 <LoRaMacCryptoGetFCntDown+0x128>)
 8015de4:	681b      	ldr	r3, [r3, #0]
 8015de6:	789b      	ldrb	r3, [r3, #2]
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	d11f      	bne.n	8015e2c <LoRaMacCryptoGetFCntDown+0x11c>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 8015dec:	697b      	ldr	r3, [r7, #20]
 8015dee:	681b      	ldr	r3, [r3, #0]
 8015df0:	60bb      	str	r3, [r7, #8]
 8015df2:	2300      	movs	r3, #0
 8015df4:	60fb      	str	r3, [r7, #12]
 8015df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015df8:	603b      	str	r3, [r7, #0]
 8015dfa:	2300      	movs	r3, #0
 8015dfc:	607b      	str	r3, [r7, #4]
 8015dfe:	68ba      	ldr	r2, [r7, #8]
 8015e00:	68fb      	ldr	r3, [r7, #12]
 8015e02:	6838      	ldr	r0, [r7, #0]
 8015e04:	6879      	ldr	r1, [r7, #4]
 8015e06:	1a12      	subs	r2, r2, r0
 8015e08:	418b      	sbcs	r3, r1
 8015e0a:	210c      	movs	r1, #12
 8015e0c:	2010      	movs	r0, #16
 8015e0e:	4684      	mov	ip, r0
 8015e10:	44bc      	add	ip, r7
 8015e12:	4461      	add	r1, ip
 8015e14:	8809      	ldrh	r1, [r1, #0]
 8015e16:	b289      	uxth	r1, r1
 8015e18:	000c      	movs	r4, r1
 8015e1a:	2100      	movs	r1, #0
 8015e1c:	000d      	movs	r5, r1
 8015e1e:	429d      	cmp	r5, r3
 8015e20:	dc04      	bgt.n	8015e2c <LoRaMacCryptoGetFCntDown+0x11c>
 8015e22:	d101      	bne.n	8015e28 <LoRaMacCryptoGetFCntDown+0x118>
 8015e24:	4294      	cmp	r4, r2
 8015e26:	d801      	bhi.n	8015e2c <LoRaMacCryptoGetFCntDown+0x11c>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 8015e28:	2308      	movs	r3, #8
 8015e2a:	e000      	b.n	8015e2e <LoRaMacCryptoGetFCntDown+0x11e>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015e2c:	2300      	movs	r3, #0
}
 8015e2e:	0018      	movs	r0, r3
 8015e30:	46bd      	mov	sp, r7
 8015e32:	b00d      	add	sp, #52	; 0x34
 8015e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e36:	46c0      	nop			; (mov r8, r8)
 8015e38:	20000d18 	.word	0x20000d18

08015e3c <LoRaMacCryptoSetMulticastReference>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8015e3c:	b580      	push	{r7, lr}
 8015e3e:	b082      	sub	sp, #8
 8015e40:	af00      	add	r7, sp, #0
 8015e42:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	2b00      	cmp	r3, #0
 8015e48:	d101      	bne.n	8015e4e <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015e4a:	230a      	movs	r3, #10
 8015e4c:	e006      	b.n	8015e5c <LoRaMacCryptoSetMulticastReference+0x20>
    }

    multicastList[0].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 8015e4e:	4b05      	ldr	r3, [pc, #20]	; (8015e64 <LoRaMacCryptoSetMulticastReference+0x28>)
 8015e50:	681b      	ldr	r3, [r3, #0]
 8015e52:	331c      	adds	r3, #28
 8015e54:	001a      	movs	r2, r3
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	621a      	str	r2, [r3, #32]
#if ( LORAMAC_MAX_MC_CTX > 1 )
    multicastList[1].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown1;
    multicastList[2].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown2;
    multicastList[3].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown3;
#endif /* LORAMAC_MAX_MC_CTX > 1 */
    return LORAMAC_CRYPTO_SUCCESS;
 8015e5a:	2300      	movs	r3, #0
}
 8015e5c:	0018      	movs	r0, r3
 8015e5e:	46bd      	mov	sp, r7
 8015e60:	b002      	add	sp, #8
 8015e62:	bd80      	pop	{r7, pc}
 8015e64:	20000d18 	.word	0x20000d18

08015e68 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8015e68:	b580      	push	{r7, lr}
 8015e6a:	b082      	sub	sp, #8
 8015e6c:	af00      	add	r7, sp, #0
 8015e6e:	0002      	movs	r2, r0
 8015e70:	6039      	str	r1, [r7, #0]
 8015e72:	1dfb      	adds	r3, r7, #7
 8015e74:	701a      	strb	r2, [r3, #0]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8015e76:	683a      	ldr	r2, [r7, #0]
 8015e78:	1dfb      	adds	r3, r7, #7
 8015e7a:	781b      	ldrb	r3, [r3, #0]
 8015e7c:	0011      	movs	r1, r2
 8015e7e:	0018      	movs	r0, r3
 8015e80:	f7f7 fd46 	bl	800d910 <SecureElementSetKey>
 8015e84:	1e03      	subs	r3, r0, #0
 8015e86:	d001      	beq.n	8015e8c <LoRaMacCryptoSetKey+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015e88:	230f      	movs	r3, #15
 8015e8a:	e014      	b.n	8015eb6 <LoRaMacCryptoSetKey+0x4e>
    }
    if( keyID == APP_KEY )
 8015e8c:	1dfb      	adds	r3, r7, #7
 8015e8e:	781b      	ldrb	r3, [r3, #0]
 8015e90:	2b00      	cmp	r3, #0
 8015e92:	d10f      	bne.n	8015eb4 <LoRaMacCryptoSetKey+0x4c>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( keyID ) != LORAMAC_CRYPTO_SUCCESS )
 8015e94:	1dfb      	adds	r3, r7, #7
 8015e96:	781b      	ldrb	r3, [r3, #0]
 8015e98:	0018      	movs	r0, r3
 8015e9a:	f000 fa79 	bl	8016390 <LoRaMacCryptoDeriveMcRootKey>
 8015e9e:	1e03      	subs	r3, r0, #0
 8015ea0:	d001      	beq.n	8015ea6 <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015ea2:	230f      	movs	r3, #15
 8015ea4:	e007      	b.n	8015eb6 <LoRaMacCryptoSetKey+0x4e>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8015ea6:	2004      	movs	r0, #4
 8015ea8:	f000 faa6 	bl	80163f8 <LoRaMacCryptoDeriveMcKEKey>
 8015eac:	1e03      	subs	r3, r0, #0
 8015eae:	d001      	beq.n	8015eb4 <LoRaMacCryptoSetKey+0x4c>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015eb0:	230f      	movs	r3, #15
 8015eb2:	e000      	b.n	8015eb6 <LoRaMacCryptoSetKey+0x4e>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8015eb4:	2300      	movs	r3, #0
}
 8015eb6:	0018      	movs	r0, r3
 8015eb8:	46bd      	mov	sp, r7
 8015eba:	b002      	add	sp, #8
 8015ebc:	bd80      	pop	{r7, pc}
	...

08015ec0 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8015ec0:	b580      	push	{r7, lr}
 8015ec2:	b086      	sub	sp, #24
 8015ec4:	af02      	add	r7, sp, #8
 8015ec6:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	d101      	bne.n	8015ed2 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015ece:	230a      	movs	r3, #10
 8015ed0:	e039      	b.n	8015f46 <LoRaMacCryptoPrepareJoinRequest+0x86>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8015ed2:	230f      	movs	r3, #15
 8015ed4:	18fb      	adds	r3, r7, r3
 8015ed6:	2201      	movs	r2, #1
 8015ed8:	701a      	strb	r2, [r3, #0]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 8015eda:	2300      	movs	r3, #0
 8015edc:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 8015ede:	2308      	movs	r3, #8
 8015ee0:	18fb      	adds	r3, r7, r3
 8015ee2:	0018      	movs	r0, r3
 8015ee4:	f7f7 ff3e 	bl	800dd64 <SecureElementRandomNumber>
    CryptoCtx.NvmCtx->DevNonce = devNonce;
 8015ee8:	68ba      	ldr	r2, [r7, #8]
 8015eea:	4b19      	ldr	r3, [pc, #100]	; (8015f50 <LoRaMacCryptoPrepareJoinRequest+0x90>)
 8015eec:	681b      	ldr	r3, [r3, #0]
 8015eee:	b292      	uxth	r2, r2
 8015ef0:	809a      	strh	r2, [r3, #4]
#else
    CryptoCtx.NvmCtx->DevNonce++;
#endif
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8015ef2:	4b17      	ldr	r3, [pc, #92]	; (8015f50 <LoRaMacCryptoPrepareJoinRequest+0x90>)
 8015ef4:	685b      	ldr	r3, [r3, #4]
 8015ef6:	4798      	blx	r3
    macMsg->DevNonce = CryptoCtx.NvmCtx->DevNonce;
 8015ef8:	4b15      	ldr	r3, [pc, #84]	; (8015f50 <LoRaMacCryptoPrepareJoinRequest+0x90>)
 8015efa:	681b      	ldr	r3, [r3, #0]
 8015efc:	889a      	ldrh	r2, [r3, #4]
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	0018      	movs	r0, r3
 8015f06:	f000 fca1 	bl	801684c <LoRaMacSerializerJoinRequest>
 8015f0a:	1e03      	subs	r3, r0, #0
 8015f0c:	d001      	beq.n	8015f12 <LoRaMacCryptoPrepareJoinRequest+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8015f0e:	2311      	movs	r3, #17
 8015f10:	e019      	b.n	8015f46 <LoRaMacCryptoPrepareJoinRequest+0x86>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	6819      	ldr	r1, [r3, #0]
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	3318      	adds	r3, #24
 8015f1a:	220f      	movs	r2, #15
 8015f1c:	18ba      	adds	r2, r7, r2
 8015f1e:	7812      	ldrb	r2, [r2, #0]
 8015f20:	9300      	str	r3, [sp, #0]
 8015f22:	0013      	movs	r3, r2
 8015f24:	2213      	movs	r2, #19
 8015f26:	2000      	movs	r0, #0
 8015f28:	f7f7 fd6c 	bl	800da04 <SecureElementComputeAesCmac>
 8015f2c:	1e03      	subs	r3, r0, #0
 8015f2e:	d001      	beq.n	8015f34 <LoRaMacCryptoPrepareJoinRequest+0x74>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015f30:	230f      	movs	r3, #15
 8015f32:	e008      	b.n	8015f46 <LoRaMacCryptoPrepareJoinRequest+0x86>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	0018      	movs	r0, r3
 8015f38:	f000 fc88 	bl	801684c <LoRaMacSerializerJoinRequest>
 8015f3c:	1e03      	subs	r3, r0, #0
 8015f3e:	d001      	beq.n	8015f44 <LoRaMacCryptoPrepareJoinRequest+0x84>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8015f40:	2311      	movs	r3, #17
 8015f42:	e000      	b.n	8015f46 <LoRaMacCryptoPrepareJoinRequest+0x86>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015f44:	2300      	movs	r3, #0
}
 8015f46:	0018      	movs	r0, r3
 8015f48:	46bd      	mov	sp, r7
 8015f4a:	b004      	add	sp, #16
 8015f4c:	bd80      	pop	{r7, pc}
 8015f4e:	46c0      	nop			; (mov r8, r8)
 8015f50:	20000d18 	.word	0x20000d18

08015f54 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8015f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015f56:	b095      	sub	sp, #84	; 0x54
 8015f58:	af04      	add	r7, sp, #16
 8015f5a:	60b9      	str	r1, [r7, #8]
 8015f5c:	607a      	str	r2, [r7, #4]
 8015f5e:	230f      	movs	r3, #15
 8015f60:	18fb      	adds	r3, r7, r3
 8015f62:	1c02      	adds	r2, r0, #0
 8015f64:	701a      	strb	r2, [r3, #0]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	d002      	beq.n	8015f72 <LoRaMacCryptoHandleJoinAccept+0x1e>
 8015f6c:	68bb      	ldr	r3, [r7, #8]
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	d101      	bne.n	8015f76 <LoRaMacCryptoHandleJoinAccept+0x22>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015f72:	230a      	movs	r3, #10
 8015f74:	e0a7      	b.n	80160c6 <LoRaMacCryptoHandleJoinAccept+0x172>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8015f76:	233f      	movs	r3, #63	; 0x3f
 8015f78:	18fb      	adds	r3, r7, r3
 8015f7a:	2213      	movs	r2, #19
 8015f7c:	701a      	strb	r2, [r3, #0]
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8015f7e:	2614      	movs	r6, #20
 8015f80:	19bb      	adds	r3, r7, r6
 8015f82:	2200      	movs	r2, #0
 8015f84:	601a      	str	r2, [r3, #0]
 8015f86:	3304      	adds	r3, #4
 8015f88:	221d      	movs	r2, #29
 8015f8a:	2100      	movs	r1, #0
 8015f8c:	0018      	movs	r0, r3
 8015f8e:	f007 ffc4 	bl	801df1a <memset>
    uint8_t versionMinor         = 0;
 8015f92:	2313      	movs	r3, #19
 8015f94:	18fb      	adds	r3, r7, r3
 8015f96:	2200      	movs	r2, #0
 8015f98:	701a      	strb	r2, [r3, #0]
    uint8_t* nonce               = ( uint8_t* )&CryptoCtx.NvmCtx->DevNonce;
 8015f9a:	4b4d      	ldr	r3, [pc, #308]	; (80160d0 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 8015f9c:	681b      	ldr	r3, [r3, #0]
 8015f9e:	3304      	adds	r3, #4
 8015fa0:	63bb      	str	r3, [r7, #56]	; 0x38
            nonce = ( uint8_t* )&CryptoCtx.NvmCtx->FCntList.RJcount1;
        }
    }
#endif

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, ( int16_t )*nonce, macMsg->Buffer,
 8015fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015fa4:	781b      	ldrb	r3, [r3, #0]
 8015fa6:	b29c      	uxth	r4, r3
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	681d      	ldr	r5, [r3, #0]
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	791b      	ldrb	r3, [r3, #4]
 8015fb0:	68b9      	ldr	r1, [r7, #8]
 8015fb2:	200f      	movs	r0, #15
 8015fb4:	183a      	adds	r2, r7, r0
 8015fb6:	7810      	ldrb	r0, [r2, #0]
 8015fb8:	2213      	movs	r2, #19
 8015fba:	18ba      	adds	r2, r7, r2
 8015fbc:	9202      	str	r2, [sp, #8]
 8015fbe:	19ba      	adds	r2, r7, r6
 8015fc0:	9201      	str	r2, [sp, #4]
 8015fc2:	9300      	str	r3, [sp, #0]
 8015fc4:	002b      	movs	r3, r5
 8015fc6:	0022      	movs	r2, r4
 8015fc8:	f7f7 fe45 	bl	800dc56 <SecureElementProcessJoinAccept>
 8015fcc:	1e03      	subs	r3, r0, #0
 8015fce:	d001      	beq.n	8015fd4 <LoRaMacCryptoHandleJoinAccept+0x80>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015fd0:	230f      	movs	r3, #15
 8015fd2:	e078      	b.n	80160c6 <LoRaMacCryptoHandleJoinAccept+0x172>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	6818      	ldr	r0, [r3, #0]
 8015fd8:	687b      	ldr	r3, [r7, #4]
 8015fda:	791b      	ldrb	r3, [r3, #4]
 8015fdc:	b29a      	uxth	r2, r3
 8015fde:	2314      	movs	r3, #20
 8015fe0:	18fb      	adds	r3, r7, r3
 8015fe2:	0019      	movs	r1, r3
 8015fe4:	f003 fa88 	bl	80194f8 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	0018      	movs	r0, r3
 8015fec:	f000 fa2e 	bl	801644c <LoRaMacParserJoinAccept>
 8015ff0:	1e03      	subs	r3, r0, #0
 8015ff2:	d001      	beq.n	8015ff8 <LoRaMacCryptoHandleJoinAccept+0xa4>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8015ff4:	2310      	movs	r3, #16
 8015ff6:	e066      	b.n	80160c6 <LoRaMacCryptoHandleJoinAccept+0x172>
            return retval;
        }
    }
#else
    // Operating in LoRaWAN 1.0.x mode
    retval = LoRaMacCryptoDeriveMcRootKey( APP_KEY );
 8015ff8:	253f      	movs	r5, #63	; 0x3f
 8015ffa:	197c      	adds	r4, r7, r5
 8015ffc:	2000      	movs	r0, #0
 8015ffe:	f000 f9c7 	bl	8016390 <LoRaMacCryptoDeriveMcRootKey>
 8016002:	0003      	movs	r3, r0
 8016004:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016006:	002a      	movs	r2, r5
 8016008:	18bb      	adds	r3, r7, r2
 801600a:	781b      	ldrb	r3, [r3, #0]
 801600c:	2b00      	cmp	r3, #0
 801600e:	d002      	beq.n	8016016 <LoRaMacCryptoHandleJoinAccept+0xc2>
    {
        return retval;
 8016010:	18bb      	adds	r3, r7, r2
 8016012:	781b      	ldrb	r3, [r3, #0]
 8016014:	e057      	b.n	80160c6 <LoRaMacCryptoHandleJoinAccept+0x172>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 8016016:	253f      	movs	r5, #63	; 0x3f
 8016018:	197c      	adds	r4, r7, r5
 801601a:	2004      	movs	r0, #4
 801601c:	f000 f9ec 	bl	80163f8 <LoRaMacCryptoDeriveMcKEKey>
 8016020:	0003      	movs	r3, r0
 8016022:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016024:	002a      	movs	r2, r5
 8016026:	18bb      	adds	r3, r7, r2
 8016028:	781b      	ldrb	r3, [r3, #0]
 801602a:	2b00      	cmp	r3, #0
 801602c:	d002      	beq.n	8016034 <LoRaMacCryptoHandleJoinAccept+0xe0>
    {
        return retval;
 801602e:	18bb      	adds	r3, r7, r2
 8016030:	781b      	ldrb	r3, [r3, #0]
 8016032:	e048      	b.n	80160c6 <LoRaMacCryptoHandleJoinAccept+0x172>
    }

    retval = DeriveSessionKey10x( APP_S_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* )&CryptoCtx.NvmCtx->DevNonce );
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	1d99      	adds	r1, r3, #6
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	3309      	adds	r3, #9
 801603c:	001a      	movs	r2, r3
 801603e:	4b24      	ldr	r3, [pc, #144]	; (80160d0 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 8016040:	681b      	ldr	r3, [r3, #0]
 8016042:	3304      	adds	r3, #4
 8016044:	253f      	movs	r5, #63	; 0x3f
 8016046:	197c      	adds	r4, r7, r5
 8016048:	2003      	movs	r0, #3
 801604a:	f7ff fcb1 	bl	80159b0 <DeriveSessionKey10x>
 801604e:	0003      	movs	r3, r0
 8016050:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016052:	197b      	adds	r3, r7, r5
 8016054:	781b      	ldrb	r3, [r3, #0]
 8016056:	2b00      	cmp	r3, #0
 8016058:	d002      	beq.n	8016060 <LoRaMacCryptoHandleJoinAccept+0x10c>
    {
        return retval;
 801605a:	197b      	adds	r3, r7, r5
 801605c:	781b      	ldrb	r3, [r3, #0]
 801605e:	e032      	b.n	80160c6 <LoRaMacCryptoHandleJoinAccept+0x172>
    }
    retval = DeriveSessionKey10x( NWK_S_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* )&CryptoCtx.NvmCtx->DevNonce );
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	1d99      	adds	r1, r3, #6
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	3309      	adds	r3, #9
 8016068:	001a      	movs	r2, r3
 801606a:	4b19      	ldr	r3, [pc, #100]	; (80160d0 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 801606c:	681b      	ldr	r3, [r3, #0]
 801606e:	3304      	adds	r3, #4
 8016070:	253f      	movs	r5, #63	; 0x3f
 8016072:	197c      	adds	r4, r7, r5
 8016074:	2002      	movs	r0, #2
 8016076:	f7ff fc9b 	bl	80159b0 <DeriveSessionKey10x>
 801607a:	0003      	movs	r3, r0
 801607c:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801607e:	197b      	adds	r3, r7, r5
 8016080:	781b      	ldrb	r3, [r3, #0]
 8016082:	2b00      	cmp	r3, #0
 8016084:	d002      	beq.n	801608c <LoRaMacCryptoHandleJoinAccept+0x138>
    {
        return retval;
 8016086:	197b      	adds	r3, r7, r5
 8016088:	781b      	ldrb	r3, [r3, #0]
 801608a:	e01c      	b.n	80160c6 <LoRaMacCryptoHandleJoinAccept+0x172>
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO */

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = versionMinor;
 801608c:	4b10      	ldr	r3, [pc, #64]	; (80160d0 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 801608e:	681b      	ldr	r3, [r3, #0]
 8016090:	2213      	movs	r2, #19
 8016092:	18ba      	adds	r2, r7, r2
 8016094:	7812      	ldrb	r2, [r2, #0]
 8016096:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    CryptoCtx.RJcount0 = 0;
#endif
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 8016098:	4b0d      	ldr	r3, [pc, #52]	; (80160d0 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 801609a:	681b      	ldr	r3, [r3, #0]
 801609c:	2200      	movs	r2, #0
 801609e:	60da      	str	r2, [r3, #12]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 80160a0:	4b0b      	ldr	r3, [pc, #44]	; (80160d0 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 80160a2:	681b      	ldr	r3, [r3, #0]
 80160a4:	2201      	movs	r2, #1
 80160a6:	4252      	negs	r2, r2
 80160a8:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 80160aa:	4b09      	ldr	r3, [pc, #36]	; (80160d0 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 80160ac:	681b      	ldr	r3, [r3, #0]
 80160ae:	2201      	movs	r2, #1
 80160b0:	4252      	negs	r2, r2
 80160b2:	611a      	str	r2, [r3, #16]
    CryptoCtx.NvmCtx->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 80160b4:	4b06      	ldr	r3, [pc, #24]	; (80160d0 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 80160b6:	681b      	ldr	r3, [r3, #0]
 80160b8:	2201      	movs	r2, #1
 80160ba:	4252      	negs	r2, r2
 80160bc:	615a      	str	r2, [r3, #20]

    CryptoCtx.EventCryptoNvmCtxChanged( );
 80160be:	4b04      	ldr	r3, [pc, #16]	; (80160d0 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 80160c0:	685b      	ldr	r3, [r3, #4]
 80160c2:	4798      	blx	r3

    return LORAMAC_CRYPTO_SUCCESS;
 80160c4:	2300      	movs	r3, #0
}
 80160c6:	0018      	movs	r0, r3
 80160c8:	46bd      	mov	sp, r7
 80160ca:	b011      	add	sp, #68	; 0x44
 80160cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80160ce:	46c0      	nop			; (mov r8, r8)
 80160d0:	20000d18 	.word	0x20000d18

080160d4 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 80160d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80160d6:	b08b      	sub	sp, #44	; 0x2c
 80160d8:	af04      	add	r7, sp, #16
 80160da:	60f8      	str	r0, [r7, #12]
 80160dc:	0008      	movs	r0, r1
 80160de:	0011      	movs	r1, r2
 80160e0:	607b      	str	r3, [r7, #4]
 80160e2:	230b      	movs	r3, #11
 80160e4:	18fb      	adds	r3, r7, r3
 80160e6:	1c02      	adds	r2, r0, #0
 80160e8:	701a      	strb	r2, [r3, #0]
 80160ea:	230a      	movs	r3, #10
 80160ec:	18fb      	adds	r3, r7, r3
 80160ee:	1c0a      	adds	r2, r1, #0
 80160f0:	701a      	strb	r2, [r3, #0]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80160f2:	2316      	movs	r3, #22
 80160f4:	18fb      	adds	r3, r7, r3
 80160f6:	2213      	movs	r2, #19
 80160f8:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 80160fa:	2317      	movs	r3, #23
 80160fc:	18fb      	adds	r3, r7, r3
 80160fe:	2203      	movs	r2, #3
 8016100:	701a      	strb	r2, [r3, #0]

    if( macMsg == NULL )
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	2b00      	cmp	r3, #0
 8016106:	d101      	bne.n	801610c <LoRaMacCryptoSecureMessage+0x38>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016108:	230a      	movs	r3, #10
 801610a:	e072      	b.n	80161f2 <LoRaMacCryptoSecureMessage+0x11e>
    }

    if( fCntUp < CryptoCtx.NvmCtx->FCntList.FCntUp )
 801610c:	4b3b      	ldr	r3, [pc, #236]	; (80161fc <LoRaMacCryptoSecureMessage+0x128>)
 801610e:	681b      	ldr	r3, [r3, #0]
 8016110:	68db      	ldr	r3, [r3, #12]
 8016112:	68fa      	ldr	r2, [r7, #12]
 8016114:	429a      	cmp	r2, r3
 8016116:	d201      	bcs.n	801611c <LoRaMacCryptoSecureMessage+0x48>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8016118:	2306      	movs	r3, #6
 801611a:	e06a      	b.n	80161f2 <LoRaMacCryptoSecureMessage+0x11e>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	2220      	movs	r2, #32
 8016120:	5c9b      	ldrb	r3, [r3, r2]
 8016122:	2b00      	cmp	r3, #0
 8016124:	d103      	bne.n	801612e <LoRaMacCryptoSecureMessage+0x5a>
    {
        // Use network session key
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8016126:	2317      	movs	r3, #23
 8016128:	18fb      	adds	r3, r7, r3
 801612a:	2202      	movs	r2, #2
 801612c:	701a      	strb	r2, [r3, #0]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    if( fCntUp > CryptoCtx.NvmCtx->FCntList.FCntUp )
 801612e:	4b33      	ldr	r3, [pc, #204]	; (80161fc <LoRaMacCryptoSecureMessage+0x128>)
 8016130:	681b      	ldr	r3, [r3, #0]
 8016132:	68db      	ldr	r3, [r3, #12]
 8016134:	68fa      	ldr	r2, [r7, #12]
 8016136:	429a      	cmp	r2, r3
 8016138:	d91c      	bls.n	8016174 <LoRaMacCryptoSecureMessage+0xa0>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801613e:	687b      	ldr	r3, [r7, #4]
 8016140:	2228      	movs	r2, #40	; 0x28
 8016142:	5c9b      	ldrb	r3, [r3, r2]
 8016144:	b219      	sxth	r1, r3
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	689d      	ldr	r5, [r3, #8]
 801614a:	2616      	movs	r6, #22
 801614c:	19bc      	adds	r4, r7, r6
 801614e:	2317      	movs	r3, #23
 8016150:	18fb      	adds	r3, r7, r3
 8016152:	781a      	ldrb	r2, [r3, #0]
 8016154:	68fb      	ldr	r3, [r7, #12]
 8016156:	9301      	str	r3, [sp, #4]
 8016158:	2300      	movs	r3, #0
 801615a:	9300      	str	r3, [sp, #0]
 801615c:	002b      	movs	r3, r5
 801615e:	f7ff f9c7 	bl	80154f0 <PayloadEncrypt>
 8016162:	0003      	movs	r3, r0
 8016164:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016166:	19bb      	adds	r3, r7, r6
 8016168:	781b      	ldrb	r3, [r3, #0]
 801616a:	2b00      	cmp	r3, #0
 801616c:	d002      	beq.n	8016174 <LoRaMacCryptoSecureMessage+0xa0>
        {
            return retval;
 801616e:	19bb      	adds	r3, r7, r6
 8016170:	781b      	ldrb	r3, [r3, #0]
 8016172:	e03e      	b.n	80161f2 <LoRaMacCryptoSecureMessage+0x11e>
        }
#endif
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	0018      	movs	r0, r3
 8016178:	f000 fc03 	bl	8016982 <LoRaMacSerializerData>
 801617c:	1e03      	subs	r3, r0, #0
 801617e:	d001      	beq.n	8016184 <LoRaMacCryptoSecureMessage+0xb0>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016180:	2311      	movs	r3, #17
 8016182:	e036      	b.n	80161f2 <LoRaMacCryptoSecureMessage+0x11e>
#endif
    {        // Use network session key
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8016184:	2117      	movs	r1, #23
 8016186:	187b      	adds	r3, r7, r1
 8016188:	2202      	movs	r2, #2
 801618a:	701a      	strb	r2, [r3, #0]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	6818      	ldr	r0, [r3, #0]
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	791b      	ldrb	r3, [r3, #4]
 8016194:	b29b      	uxth	r3, r3
 8016196:	3b04      	subs	r3, #4
 8016198:	b29d      	uxth	r5, r3
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	689b      	ldr	r3, [r3, #8]
 801619e:	687a      	ldr	r2, [r7, #4]
 80161a0:	322c      	adds	r2, #44	; 0x2c
 80161a2:	2616      	movs	r6, #22
 80161a4:	19bc      	adds	r4, r7, r6
 80161a6:	1879      	adds	r1, r7, r1
 80161a8:	7809      	ldrb	r1, [r1, #0]
 80161aa:	9203      	str	r2, [sp, #12]
 80161ac:	68fa      	ldr	r2, [r7, #12]
 80161ae:	9202      	str	r2, [sp, #8]
 80161b0:	9301      	str	r3, [sp, #4]
 80161b2:	2300      	movs	r3, #0
 80161b4:	9300      	str	r3, [sp, #0]
 80161b6:	2300      	movs	r3, #0
 80161b8:	000a      	movs	r2, r1
 80161ba:	0029      	movs	r1, r5
 80161bc:	f7ff facc 	bl	8015758 <ComputeCmacB0>
 80161c0:	0003      	movs	r3, r0
 80161c2:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80161c4:	19bb      	adds	r3, r7, r6
 80161c6:	781b      	ldrb	r3, [r3, #0]
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	d002      	beq.n	80161d2 <LoRaMacCryptoSecureMessage+0xfe>
        {
            return retval;
 80161cc:	19bb      	adds	r3, r7, r6
 80161ce:	781b      	ldrb	r3, [r3, #0]
 80161d0:	e00f      	b.n	80161f2 <LoRaMacCryptoSecureMessage+0x11e>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80161d2:	687b      	ldr	r3, [r7, #4]
 80161d4:	0018      	movs	r0, r3
 80161d6:	f000 fbd4 	bl	8016982 <LoRaMacSerializerData>
 80161da:	1e03      	subs	r3, r0, #0
 80161dc:	d001      	beq.n	80161e2 <LoRaMacCryptoSecureMessage+0x10e>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80161de:	2311      	movs	r3, #17
 80161e0:	e007      	b.n	80161f2 <LoRaMacCryptoSecureMessage+0x11e>
    }

    CryptoCtx.NvmCtx->FCntList.FCntUp = fCntUp;
 80161e2:	4b06      	ldr	r3, [pc, #24]	; (80161fc <LoRaMacCryptoSecureMessage+0x128>)
 80161e4:	681b      	ldr	r3, [r3, #0]
 80161e6:	68fa      	ldr	r2, [r7, #12]
 80161e8:	60da      	str	r2, [r3, #12]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 80161ea:	4b04      	ldr	r3, [pc, #16]	; (80161fc <LoRaMacCryptoSecureMessage+0x128>)
 80161ec:	685b      	ldr	r3, [r3, #4]
 80161ee:	4798      	blx	r3

    return LORAMAC_CRYPTO_SUCCESS;
 80161f0:	2300      	movs	r3, #0
}
 80161f2:	0018      	movs	r0, r3
 80161f4:	46bd      	mov	sp, r7
 80161f6:	b007      	add	sp, #28
 80161f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80161fa:	46c0      	nop			; (mov r8, r8)
 80161fc:	20000d18 	.word	0x20000d18

08016200 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8016200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016202:	b08b      	sub	sp, #44	; 0x2c
 8016204:	af04      	add	r7, sp, #16
 8016206:	60b9      	str	r1, [r7, #8]
 8016208:	0011      	movs	r1, r2
 801620a:	607b      	str	r3, [r7, #4]
 801620c:	230f      	movs	r3, #15
 801620e:	18fb      	adds	r3, r7, r3
 8016210:	1c02      	adds	r2, r0, #0
 8016212:	701a      	strb	r2, [r3, #0]
 8016214:	230e      	movs	r3, #14
 8016216:	18fb      	adds	r3, r7, r3
 8016218:	1c0a      	adds	r2, r1, #0
 801621a:	701a      	strb	r2, [r3, #0]
    if( macMsg == 0 )
 801621c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801621e:	2b00      	cmp	r3, #0
 8016220:	d101      	bne.n	8016226 <LoRaMacCryptoUnsecureMessage+0x26>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016222:	230a      	movs	r3, #10
 8016224:	e0ae      	b.n	8016384 <LoRaMacCryptoUnsecureMessage+0x184>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8016226:	687a      	ldr	r2, [r7, #4]
 8016228:	230e      	movs	r3, #14
 801622a:	18fb      	adds	r3, r7, r3
 801622c:	781b      	ldrb	r3, [r3, #0]
 801622e:	0011      	movs	r1, r2
 8016230:	0018      	movs	r0, r3
 8016232:	f7ff fc69 	bl	8015b08 <CheckFCntDown>
 8016236:	0003      	movs	r3, r0
 8016238:	001a      	movs	r2, r3
 801623a:	2301      	movs	r3, #1
 801623c:	4053      	eors	r3, r2
 801623e:	b2db      	uxtb	r3, r3
 8016240:	2b00      	cmp	r3, #0
 8016242:	d001      	beq.n	8016248 <LoRaMacCryptoUnsecureMessage+0x48>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8016244:	2306      	movs	r3, #6
 8016246:	e09d      	b.n	8016384 <LoRaMacCryptoUnsecureMessage+0x184>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8016248:	2315      	movs	r3, #21
 801624a:	18fb      	adds	r3, r7, r3
 801624c:	2213      	movs	r2, #19
 801624e:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8016250:	2317      	movs	r3, #23
 8016252:	18fb      	adds	r3, r7, r3
 8016254:	2203      	movs	r2, #3
 8016256:	701a      	strb	r2, [r3, #0]

#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8016258:	2314      	movs	r3, #20
 801625a:	18fb      	adds	r3, r7, r3
 801625c:	2202      	movs	r2, #2
 801625e:	701a      	strb	r2, [r3, #0]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8016260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016262:	0018      	movs	r0, r3
 8016264:	f000 f9e2 	bl	801662c <LoRaMacParserData>
 8016268:	1e03      	subs	r3, r0, #0
 801626a:	d001      	beq.n	8016270 <LoRaMacCryptoUnsecureMessage+0x70>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 801626c:	2310      	movs	r3, #16
 801626e:	e089      	b.n	8016384 <LoRaMacCryptoUnsecureMessage+0x184>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8016270:	2515      	movs	r5, #21
 8016272:	197c      	adds	r4, r7, r5
 8016274:	2310      	movs	r3, #16
 8016276:	18fa      	adds	r2, r7, r3
 8016278:	230f      	movs	r3, #15
 801627a:	18fb      	adds	r3, r7, r3
 801627c:	781b      	ldrb	r3, [r3, #0]
 801627e:	0011      	movs	r1, r2
 8016280:	0018      	movs	r0, r3
 8016282:	f7ff fb63 	bl	801594c <GetKeyAddrItem>
 8016286:	0003      	movs	r3, r0
 8016288:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801628a:	197b      	adds	r3, r7, r5
 801628c:	781b      	ldrb	r3, [r3, #0]
 801628e:	2b00      	cmp	r3, #0
 8016290:	d002      	beq.n	8016298 <LoRaMacCryptoUnsecureMessage+0x98>
    {
        return retval;
 8016292:	197b      	adds	r3, r7, r5
 8016294:	781b      	ldrb	r3, [r3, #0]
 8016296:	e075      	b.n	8016384 <LoRaMacCryptoUnsecureMessage+0x184>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8016298:	693a      	ldr	r2, [r7, #16]
 801629a:	2317      	movs	r3, #23
 801629c:	18fb      	adds	r3, r7, r3
 801629e:	7852      	ldrb	r2, [r2, #1]
 80162a0:	701a      	strb	r2, [r3, #0]
    micComputationKeyID = curItem->NwkSkey;
 80162a2:	693a      	ldr	r2, [r7, #16]
 80162a4:	2314      	movs	r3, #20
 80162a6:	18fb      	adds	r3, r7, r3
 80162a8:	7892      	ldrb	r2, [r2, #2]
 80162aa:	701a      	strb	r2, [r3, #0]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 80162ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162ae:	689b      	ldr	r3, [r3, #8]
 80162b0:	68ba      	ldr	r2, [r7, #8]
 80162b2:	429a      	cmp	r2, r3
 80162b4:	d001      	beq.n	80162ba <LoRaMacCryptoUnsecureMessage+0xba>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 80162b6:	2302      	movs	r3, #2
 80162b8:	e064      	b.n	8016384 <LoRaMacCryptoUnsecureMessage+0x184>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 80162ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162bc:	7b1b      	ldrb	r3, [r3, #12]
 80162be:	069b      	lsls	r3, r3, #26
 80162c0:	0fdb      	lsrs	r3, r3, #31
 80162c2:	b2db      	uxtb	r3, r3
 80162c4:	001a      	movs	r2, r3
 80162c6:	2016      	movs	r0, #22
 80162c8:	183b      	adds	r3, r7, r0
 80162ca:	1e51      	subs	r1, r2, #1
 80162cc:	418a      	sbcs	r2, r1
 80162ce:	701a      	strb	r2, [r3, #0]
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 80162d0:	4b2e      	ldr	r3, [pc, #184]	; (801638c <LoRaMacCryptoUnsecureMessage+0x18c>)
 80162d2:	681b      	ldr	r3, [r3, #0]
 80162d4:	789b      	ldrb	r3, [r3, #2]
 80162d6:	2b00      	cmp	r3, #0
 80162d8:	d102      	bne.n	80162e0 <LoRaMacCryptoUnsecureMessage+0xe0>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 80162da:	183b      	adds	r3, r7, r0
 80162dc:	2200      	movs	r2, #0
 80162de:	701a      	strb	r2, [r3, #0]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 80162e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162e2:	6818      	ldr	r0, [r3, #0]
 80162e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162e6:	791b      	ldrb	r3, [r3, #4]
 80162e8:	b29b      	uxth	r3, r3
 80162ea:	3b04      	subs	r3, #4
 80162ec:	b299      	uxth	r1, r3
 80162ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80162f2:	2615      	movs	r6, #21
 80162f4:	19bc      	adds	r4, r7, r6
 80162f6:	2216      	movs	r2, #22
 80162f8:	18ba      	adds	r2, r7, r2
 80162fa:	7815      	ldrb	r5, [r2, #0]
 80162fc:	2214      	movs	r2, #20
 80162fe:	18ba      	adds	r2, r7, r2
 8016300:	7812      	ldrb	r2, [r2, #0]
 8016302:	9303      	str	r3, [sp, #12]
 8016304:	687b      	ldr	r3, [r7, #4]
 8016306:	9302      	str	r3, [sp, #8]
 8016308:	68bb      	ldr	r3, [r7, #8]
 801630a:	9301      	str	r3, [sp, #4]
 801630c:	2301      	movs	r3, #1
 801630e:	9300      	str	r3, [sp, #0]
 8016310:	002b      	movs	r3, r5
 8016312:	f7ff fa69 	bl	80157e8 <VerifyCmacB0>
 8016316:	0003      	movs	r3, r0
 8016318:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801631a:	19bb      	adds	r3, r7, r6
 801631c:	781b      	ldrb	r3, [r3, #0]
 801631e:	2b00      	cmp	r3, #0
 8016320:	d002      	beq.n	8016328 <LoRaMacCryptoUnsecureMessage+0x128>
    {
        return retval;
 8016322:	19bb      	adds	r3, r7, r6
 8016324:	781b      	ldrb	r3, [r3, #0]
 8016326:	e02d      	b.n	8016384 <LoRaMacCryptoUnsecureMessage+0x184>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8016328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801632a:	2220      	movs	r2, #32
 801632c:	5c9b      	ldrb	r3, [r3, r2]
 801632e:	2b00      	cmp	r3, #0
 8016330:	d103      	bne.n	801633a <LoRaMacCryptoUnsecureMessage+0x13a>
    {
        // Use network session encryption key
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8016332:	2317      	movs	r3, #23
 8016334:	18fb      	adds	r3, r7, r3
 8016336:	2202      	movs	r2, #2
 8016338:	701a      	strb	r2, [r3, #0]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 801633a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801633c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801633e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016340:	2228      	movs	r2, #40	; 0x28
 8016342:	5c9b      	ldrb	r3, [r3, r2]
 8016344:	b219      	sxth	r1, r3
 8016346:	2615      	movs	r6, #21
 8016348:	19bc      	adds	r4, r7, r6
 801634a:	68bd      	ldr	r5, [r7, #8]
 801634c:	2317      	movs	r3, #23
 801634e:	18fb      	adds	r3, r7, r3
 8016350:	781a      	ldrb	r2, [r3, #0]
 8016352:	687b      	ldr	r3, [r7, #4]
 8016354:	9301      	str	r3, [sp, #4]
 8016356:	2301      	movs	r3, #1
 8016358:	9300      	str	r3, [sp, #0]
 801635a:	002b      	movs	r3, r5
 801635c:	f7ff f8c8 	bl	80154f0 <PayloadEncrypt>
 8016360:	0003      	movs	r3, r0
 8016362:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016364:	19bb      	adds	r3, r7, r6
 8016366:	781b      	ldrb	r3, [r3, #0]
 8016368:	2b00      	cmp	r3, #0
 801636a:	d002      	beq.n	8016372 <LoRaMacCryptoUnsecureMessage+0x172>
    {
        return retval;
 801636c:	19bb      	adds	r3, r7, r6
 801636e:	781b      	ldrb	r3, [r3, #0]
 8016370:	e008      	b.n	8016384 <LoRaMacCryptoUnsecureMessage+0x184>
            }
        } 
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 8016372:	687a      	ldr	r2, [r7, #4]
 8016374:	230e      	movs	r3, #14
 8016376:	18fb      	adds	r3, r7, r3
 8016378:	781b      	ldrb	r3, [r3, #0]
 801637a:	0011      	movs	r1, r2
 801637c:	0018      	movs	r0, r3
 801637e:	f7ff fbe7 	bl	8015b50 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8016382:	2300      	movs	r3, #0
}
 8016384:	0018      	movs	r0, r3
 8016386:	46bd      	mov	sp, r7
 8016388:	b007      	add	sp, #28
 801638a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801638c:	20000d18 	.word	0x20000d18

08016390 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( KeyIdentifier_t keyID )
{
 8016390:	b590      	push	{r4, r7, lr}
 8016392:	b087      	sub	sp, #28
 8016394:	af00      	add	r7, sp, #0
 8016396:	0002      	movs	r2, r0
 8016398:	1dfb      	adds	r3, r7, #7
 801639a:	701a      	strb	r2, [r3, #0]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 801639c:	1dfb      	adds	r3, r7, #7
 801639e:	781b      	ldrb	r3, [r3, #0]
 80163a0:	2b00      	cmp	r3, #0
 80163a2:	d001      	beq.n	80163a8 <LoRaMacCryptoDeriveMcRootKey+0x18>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80163a4:	230b      	movs	r3, #11
 80163a6:	e020      	b.n	80163ea <LoRaMacCryptoDeriveMcRootKey+0x5a>
    }
    uint8_t compBase[16] = { 0 };
 80163a8:	2408      	movs	r4, #8
 80163aa:	193b      	adds	r3, r7, r4
 80163ac:	2200      	movs	r2, #0
 80163ae:	601a      	str	r2, [r3, #0]
 80163b0:	3304      	adds	r3, #4
 80163b2:	220c      	movs	r2, #12
 80163b4:	2100      	movs	r1, #0
 80163b6:	0018      	movs	r0, r3
 80163b8:	f007 fdaf 	bl	801df1a <memset>

    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 1 )
 80163bc:	4b0d      	ldr	r3, [pc, #52]	; (80163f4 <LoRaMacCryptoDeriveMcRootKey+0x64>)
 80163be:	681b      	ldr	r3, [r3, #0]
 80163c0:	789b      	ldrb	r3, [r3, #2]
 80163c2:	2b01      	cmp	r3, #1
 80163c4:	d102      	bne.n	80163cc <LoRaMacCryptoDeriveMcRootKey+0x3c>
    {
        compBase[0] = 0x20;
 80163c6:	193b      	adds	r3, r7, r4
 80163c8:	2220      	movs	r2, #32
 80163ca:	701a      	strb	r2, [r3, #0]
    }
    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 80163cc:	4b09      	ldr	r3, [pc, #36]	; (80163f4 <LoRaMacCryptoDeriveMcRootKey+0x64>)
 80163ce:	681b      	ldr	r3, [r3, #0]
 80163d0:	1dfa      	adds	r2, r7, #7
 80163d2:	7812      	ldrb	r2, [r2, #0]
 80163d4:	2108      	movs	r1, #8
 80163d6:	1879      	adds	r1, r7, r1
 80163d8:	6818      	ldr	r0, [r3, #0]
 80163da:	2304      	movs	r3, #4
 80163dc:	f7f7 fbe6 	bl	800dbac <SecureElementDeriveAndStoreKey>
 80163e0:	1e03      	subs	r3, r0, #0
 80163e2:	d001      	beq.n	80163e8 <LoRaMacCryptoDeriveMcRootKey+0x58>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80163e4:	230f      	movs	r3, #15
 80163e6:	e000      	b.n	80163ea <LoRaMacCryptoDeriveMcRootKey+0x5a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80163e8:	2300      	movs	r3, #0
}
 80163ea:	0018      	movs	r0, r3
 80163ec:	46bd      	mov	sp, r7
 80163ee:	b007      	add	sp, #28
 80163f0:	bd90      	pop	{r4, r7, pc}
 80163f2:	46c0      	nop			; (mov r8, r8)
 80163f4:	20000d18 	.word	0x20000d18

080163f8 <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 80163f8:	b590      	push	{r4, r7, lr}
 80163fa:	b087      	sub	sp, #28
 80163fc:	af00      	add	r7, sp, #0
 80163fe:	0002      	movs	r2, r0
 8016400:	1dfb      	adds	r3, r7, #7
 8016402:	701a      	strb	r2, [r3, #0]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 8016404:	1dfb      	adds	r3, r7, #7
 8016406:	781b      	ldrb	r3, [r3, #0]
 8016408:	2b04      	cmp	r3, #4
 801640a:	d001      	beq.n	8016410 <LoRaMacCryptoDeriveMcKEKey+0x18>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 801640c:	230b      	movs	r3, #11
 801640e:	e017      	b.n	8016440 <LoRaMacCryptoDeriveMcKEKey+0x48>
    }
    uint8_t compBase[16] = { 0 };
 8016410:	2408      	movs	r4, #8
 8016412:	193b      	adds	r3, r7, r4
 8016414:	2200      	movs	r2, #0
 8016416:	601a      	str	r2, [r3, #0]
 8016418:	3304      	adds	r3, #4
 801641a:	220c      	movs	r2, #12
 801641c:	2100      	movs	r1, #0
 801641e:	0018      	movs	r0, r3
 8016420:	f007 fd7b 	bl	801df1a <memset>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 8016424:	4b08      	ldr	r3, [pc, #32]	; (8016448 <LoRaMacCryptoDeriveMcKEKey+0x50>)
 8016426:	681b      	ldr	r3, [r3, #0]
 8016428:	1dfa      	adds	r2, r7, #7
 801642a:	7812      	ldrb	r2, [r2, #0]
 801642c:	1939      	adds	r1, r7, r4
 801642e:	6818      	ldr	r0, [r3, #0]
 8016430:	237f      	movs	r3, #127	; 0x7f
 8016432:	f7f7 fbbb 	bl	800dbac <SecureElementDeriveAndStoreKey>
 8016436:	1e03      	subs	r3, r0, #0
 8016438:	d001      	beq.n	801643e <LoRaMacCryptoDeriveMcKEKey+0x46>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801643a:	230f      	movs	r3, #15
 801643c:	e000      	b.n	8016440 <LoRaMacCryptoDeriveMcKEKey+0x48>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801643e:	2300      	movs	r3, #0
}
 8016440:	0018      	movs	r0, r3
 8016442:	46bd      	mov	sp, r7
 8016444:	b007      	add	sp, #28
 8016446:	bd90      	pop	{r4, r7, pc}
 8016448:	20000d18 	.word	0x20000d18

0801644c <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 801644c:	b590      	push	{r4, r7, lr}
 801644e:	b085      	sub	sp, #20
 8016450:	af00      	add	r7, sp, #0
 8016452:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	2b00      	cmp	r3, #0
 8016458:	d003      	beq.n	8016462 <LoRaMacParserJoinAccept+0x16>
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	681b      	ldr	r3, [r3, #0]
 801645e:	2b00      	cmp	r3, #0
 8016460:	d101      	bne.n	8016466 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8016462:	2302      	movs	r3, #2
 8016464:	e0de      	b.n	8016624 <LoRaMacParserJoinAccept+0x1d8>
    }

    uint16_t bufItr = 0;
 8016466:	240e      	movs	r4, #14
 8016468:	193b      	adds	r3, r7, r4
 801646a:	2200      	movs	r2, #0
 801646c:	801a      	strh	r2, [r3, #0]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 801646e:	687b      	ldr	r3, [r7, #4]
 8016470:	681a      	ldr	r2, [r3, #0]
 8016472:	193b      	adds	r3, r7, r4
 8016474:	881b      	ldrh	r3, [r3, #0]
 8016476:	1939      	adds	r1, r7, r4
 8016478:	1c58      	adds	r0, r3, #1
 801647a:	8008      	strh	r0, [r1, #0]
 801647c:	18d3      	adds	r3, r2, r3
 801647e:	781a      	ldrb	r2, [r3, #0]
 8016480:	687b      	ldr	r3, [r7, #4]
 8016482:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	1d98      	adds	r0, r3, #6
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	681a      	ldr	r2, [r3, #0]
 801648c:	193b      	adds	r3, r7, r4
 801648e:	881b      	ldrh	r3, [r3, #0]
 8016490:	18d3      	adds	r3, r2, r3
 8016492:	2203      	movs	r2, #3
 8016494:	0019      	movs	r1, r3
 8016496:	f003 f82f 	bl	80194f8 <memcpy1>
    bufItr = bufItr + 3;
 801649a:	193b      	adds	r3, r7, r4
 801649c:	193a      	adds	r2, r7, r4
 801649e:	8812      	ldrh	r2, [r2, #0]
 80164a0:	3203      	adds	r2, #3
 80164a2:	801a      	strh	r2, [r3, #0]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	3309      	adds	r3, #9
 80164a8:	0018      	movs	r0, r3
 80164aa:	687b      	ldr	r3, [r7, #4]
 80164ac:	681a      	ldr	r2, [r3, #0]
 80164ae:	193b      	adds	r3, r7, r4
 80164b0:	881b      	ldrh	r3, [r3, #0]
 80164b2:	18d3      	adds	r3, r2, r3
 80164b4:	2203      	movs	r2, #3
 80164b6:	0019      	movs	r1, r3
 80164b8:	f003 f81e 	bl	80194f8 <memcpy1>
    bufItr = bufItr + 3;
 80164bc:	193b      	adds	r3, r7, r4
 80164be:	193a      	adds	r2, r7, r4
 80164c0:	8812      	ldrh	r2, [r2, #0]
 80164c2:	3203      	adds	r2, #3
 80164c4:	801a      	strh	r2, [r3, #0]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	681a      	ldr	r2, [r3, #0]
 80164ca:	193b      	adds	r3, r7, r4
 80164cc:	881b      	ldrh	r3, [r3, #0]
 80164ce:	1939      	adds	r1, r7, r4
 80164d0:	1c58      	adds	r0, r3, #1
 80164d2:	8008      	strh	r0, [r1, #0]
 80164d4:	18d3      	adds	r3, r2, r3
 80164d6:	781b      	ldrb	r3, [r3, #0]
 80164d8:	001a      	movs	r2, r3
 80164da:	687b      	ldr	r3, [r7, #4]
 80164dc:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	681a      	ldr	r2, [r3, #0]
 80164e2:	193b      	adds	r3, r7, r4
 80164e4:	881b      	ldrh	r3, [r3, #0]
 80164e6:	1939      	adds	r1, r7, r4
 80164e8:	1c58      	adds	r0, r3, #1
 80164ea:	8008      	strh	r0, [r1, #0]
 80164ec:	18d3      	adds	r3, r2, r3
 80164ee:	781b      	ldrb	r3, [r3, #0]
 80164f0:	021a      	lsls	r2, r3, #8
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	68db      	ldr	r3, [r3, #12]
 80164f6:	431a      	orrs	r2, r3
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	681a      	ldr	r2, [r3, #0]
 8016500:	193b      	adds	r3, r7, r4
 8016502:	881b      	ldrh	r3, [r3, #0]
 8016504:	1939      	adds	r1, r7, r4
 8016506:	1c58      	adds	r0, r3, #1
 8016508:	8008      	strh	r0, [r1, #0]
 801650a:	18d3      	adds	r3, r2, r3
 801650c:	781b      	ldrb	r3, [r3, #0]
 801650e:	041a      	lsls	r2, r3, #16
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	68db      	ldr	r3, [r3, #12]
 8016514:	431a      	orrs	r2, r3
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801651a:	687b      	ldr	r3, [r7, #4]
 801651c:	681a      	ldr	r2, [r3, #0]
 801651e:	193b      	adds	r3, r7, r4
 8016520:	881b      	ldrh	r3, [r3, #0]
 8016522:	1939      	adds	r1, r7, r4
 8016524:	1c58      	adds	r0, r3, #1
 8016526:	8008      	strh	r0, [r1, #0]
 8016528:	18d3      	adds	r3, r2, r3
 801652a:	781b      	ldrb	r3, [r3, #0]
 801652c:	061a      	lsls	r2, r3, #24
 801652e:	687b      	ldr	r3, [r7, #4]
 8016530:	68db      	ldr	r3, [r3, #12]
 8016532:	431a      	orrs	r2, r3
 8016534:	687b      	ldr	r3, [r7, #4]
 8016536:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	681a      	ldr	r2, [r3, #0]
 801653c:	193b      	adds	r3, r7, r4
 801653e:	881b      	ldrh	r3, [r3, #0]
 8016540:	1939      	adds	r1, r7, r4
 8016542:	1c58      	adds	r0, r3, #1
 8016544:	8008      	strh	r0, [r1, #0]
 8016546:	18d3      	adds	r3, r2, r3
 8016548:	781a      	ldrb	r2, [r3, #0]
 801654a:	687b      	ldr	r3, [r7, #4]
 801654c:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 801654e:	687b      	ldr	r3, [r7, #4]
 8016550:	681a      	ldr	r2, [r3, #0]
 8016552:	193b      	adds	r3, r7, r4
 8016554:	881b      	ldrh	r3, [r3, #0]
 8016556:	1939      	adds	r1, r7, r4
 8016558:	1c58      	adds	r0, r3, #1
 801655a:	8008      	strh	r0, [r1, #0]
 801655c:	18d3      	adds	r3, r2, r3
 801655e:	781a      	ldrb	r2, [r3, #0]
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	791b      	ldrb	r3, [r3, #4]
 8016568:	1f1a      	subs	r2, r3, #4
 801656a:	193b      	adds	r3, r7, r4
 801656c:	881b      	ldrh	r3, [r3, #0]
 801656e:	1ad3      	subs	r3, r2, r3
 8016570:	2b10      	cmp	r3, #16
 8016572:	d111      	bne.n	8016598 <LoRaMacParserJoinAccept+0x14c>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	3312      	adds	r3, #18
 8016578:	0018      	movs	r0, r3
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	681a      	ldr	r2, [r3, #0]
 801657e:	193b      	adds	r3, r7, r4
 8016580:	881b      	ldrh	r3, [r3, #0]
 8016582:	18d3      	adds	r3, r2, r3
 8016584:	2210      	movs	r2, #16
 8016586:	0019      	movs	r1, r3
 8016588:	f002 ffb6 	bl	80194f8 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 801658c:	193b      	adds	r3, r7, r4
 801658e:	193a      	adds	r2, r7, r4
 8016590:	8812      	ldrh	r2, [r2, #0]
 8016592:	3210      	adds	r2, #16
 8016594:	801a      	strh	r2, [r3, #0]
 8016596:	e00a      	b.n	80165ae <LoRaMacParserJoinAccept+0x162>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	791b      	ldrb	r3, [r3, #4]
 801659c:	1f1a      	subs	r2, r3, #4
 801659e:	230e      	movs	r3, #14
 80165a0:	18fb      	adds	r3, r7, r3
 80165a2:	881b      	ldrh	r3, [r3, #0]
 80165a4:	1ad3      	subs	r3, r2, r3
 80165a6:	2b00      	cmp	r3, #0
 80165a8:	dd01      	ble.n	80165ae <LoRaMacParserJoinAccept+0x162>
    {
        return LORAMAC_PARSER_FAIL;
 80165aa:	2301      	movs	r3, #1
 80165ac:	e03a      	b.n	8016624 <LoRaMacParserJoinAccept+0x1d8>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 80165ae:	687b      	ldr	r3, [r7, #4]
 80165b0:	681a      	ldr	r2, [r3, #0]
 80165b2:	240e      	movs	r4, #14
 80165b4:	193b      	adds	r3, r7, r4
 80165b6:	881b      	ldrh	r3, [r3, #0]
 80165b8:	1939      	adds	r1, r7, r4
 80165ba:	1c58      	adds	r0, r3, #1
 80165bc:	8008      	strh	r0, [r1, #0]
 80165be:	18d3      	adds	r3, r2, r3
 80165c0:	781b      	ldrb	r3, [r3, #0]
 80165c2:	001a      	movs	r2, r3
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	681a      	ldr	r2, [r3, #0]
 80165cc:	193b      	adds	r3, r7, r4
 80165ce:	881b      	ldrh	r3, [r3, #0]
 80165d0:	1939      	adds	r1, r7, r4
 80165d2:	1c58      	adds	r0, r3, #1
 80165d4:	8008      	strh	r0, [r1, #0]
 80165d6:	18d3      	adds	r3, r2, r3
 80165d8:	781b      	ldrb	r3, [r3, #0]
 80165da:	021a      	lsls	r2, r3, #8
 80165dc:	687b      	ldr	r3, [r7, #4]
 80165de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80165e0:	431a      	orrs	r2, r3
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80165e6:	687b      	ldr	r3, [r7, #4]
 80165e8:	681a      	ldr	r2, [r3, #0]
 80165ea:	193b      	adds	r3, r7, r4
 80165ec:	881b      	ldrh	r3, [r3, #0]
 80165ee:	1939      	adds	r1, r7, r4
 80165f0:	1c58      	adds	r0, r3, #1
 80165f2:	8008      	strh	r0, [r1, #0]
 80165f4:	18d3      	adds	r3, r2, r3
 80165f6:	781b      	ldrb	r3, [r3, #0]
 80165f8:	041a      	lsls	r2, r3, #16
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80165fe:	431a      	orrs	r2, r3
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	681a      	ldr	r2, [r3, #0]
 8016608:	193b      	adds	r3, r7, r4
 801660a:	881b      	ldrh	r3, [r3, #0]
 801660c:	1939      	adds	r1, r7, r4
 801660e:	1c58      	adds	r0, r3, #1
 8016610:	8008      	strh	r0, [r1, #0]
 8016612:	18d3      	adds	r3, r2, r3
 8016614:	781b      	ldrb	r3, [r3, #0]
 8016616:	061a      	lsls	r2, r3, #24
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801661c:	431a      	orrs	r2, r3
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 8016622:	2300      	movs	r3, #0
}
 8016624:	0018      	movs	r0, r3
 8016626:	46bd      	mov	sp, r7
 8016628:	b005      	add	sp, #20
 801662a:	bd90      	pop	{r4, r7, pc}

0801662c <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 801662c:	b590      	push	{r4, r7, lr}
 801662e:	b085      	sub	sp, #20
 8016630:	af00      	add	r7, sp, #0
 8016632:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8016634:	687b      	ldr	r3, [r7, #4]
 8016636:	2b00      	cmp	r3, #0
 8016638:	d003      	beq.n	8016642 <LoRaMacParserData+0x16>
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	681b      	ldr	r3, [r3, #0]
 801663e:	2b00      	cmp	r3, #0
 8016640:	d101      	bne.n	8016646 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8016642:	2302      	movs	r3, #2
 8016644:	e0fe      	b.n	8016844 <LoRaMacParserData+0x218>
    }

    uint16_t bufItr = 0;
 8016646:	240e      	movs	r4, #14
 8016648:	193b      	adds	r3, r7, r4
 801664a:	2200      	movs	r2, #0
 801664c:	801a      	strh	r2, [r3, #0]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 801664e:	687b      	ldr	r3, [r7, #4]
 8016650:	681a      	ldr	r2, [r3, #0]
 8016652:	193b      	adds	r3, r7, r4
 8016654:	881b      	ldrh	r3, [r3, #0]
 8016656:	1939      	adds	r1, r7, r4
 8016658:	1c58      	adds	r0, r3, #1
 801665a:	8008      	strh	r0, [r1, #0]
 801665c:	18d3      	adds	r3, r2, r3
 801665e:	781a      	ldrb	r2, [r3, #0]
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	681a      	ldr	r2, [r3, #0]
 8016668:	193b      	adds	r3, r7, r4
 801666a:	881b      	ldrh	r3, [r3, #0]
 801666c:	1939      	adds	r1, r7, r4
 801666e:	1c58      	adds	r0, r3, #1
 8016670:	8008      	strh	r0, [r1, #0]
 8016672:	18d3      	adds	r3, r2, r3
 8016674:	781b      	ldrb	r3, [r3, #0]
 8016676:	001a      	movs	r2, r3
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801667c:	687b      	ldr	r3, [r7, #4]
 801667e:	681a      	ldr	r2, [r3, #0]
 8016680:	193b      	adds	r3, r7, r4
 8016682:	881b      	ldrh	r3, [r3, #0]
 8016684:	1939      	adds	r1, r7, r4
 8016686:	1c58      	adds	r0, r3, #1
 8016688:	8008      	strh	r0, [r1, #0]
 801668a:	18d3      	adds	r3, r2, r3
 801668c:	781b      	ldrb	r3, [r3, #0]
 801668e:	021a      	lsls	r2, r3, #8
 8016690:	687b      	ldr	r3, [r7, #4]
 8016692:	689b      	ldr	r3, [r3, #8]
 8016694:	431a      	orrs	r2, r3
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 801669a:	687b      	ldr	r3, [r7, #4]
 801669c:	681a      	ldr	r2, [r3, #0]
 801669e:	193b      	adds	r3, r7, r4
 80166a0:	881b      	ldrh	r3, [r3, #0]
 80166a2:	1939      	adds	r1, r7, r4
 80166a4:	1c58      	adds	r0, r3, #1
 80166a6:	8008      	strh	r0, [r1, #0]
 80166a8:	18d3      	adds	r3, r2, r3
 80166aa:	781b      	ldrb	r3, [r3, #0]
 80166ac:	041a      	lsls	r2, r3, #16
 80166ae:	687b      	ldr	r3, [r7, #4]
 80166b0:	689b      	ldr	r3, [r3, #8]
 80166b2:	431a      	orrs	r2, r3
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	681a      	ldr	r2, [r3, #0]
 80166bc:	193b      	adds	r3, r7, r4
 80166be:	881b      	ldrh	r3, [r3, #0]
 80166c0:	1939      	adds	r1, r7, r4
 80166c2:	1c58      	adds	r0, r3, #1
 80166c4:	8008      	strh	r0, [r1, #0]
 80166c6:	18d3      	adds	r3, r2, r3
 80166c8:	781b      	ldrb	r3, [r3, #0]
 80166ca:	061a      	lsls	r2, r3, #24
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	689b      	ldr	r3, [r3, #8]
 80166d0:	431a      	orrs	r2, r3
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 80166d6:	687b      	ldr	r3, [r7, #4]
 80166d8:	681a      	ldr	r2, [r3, #0]
 80166da:	193b      	adds	r3, r7, r4
 80166dc:	881b      	ldrh	r3, [r3, #0]
 80166de:	1939      	adds	r1, r7, r4
 80166e0:	1c58      	adds	r0, r3, #1
 80166e2:	8008      	strh	r0, [r1, #0]
 80166e4:	18d3      	adds	r3, r2, r3
 80166e6:	781a      	ldrb	r2, [r3, #0]
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 80166ec:	687b      	ldr	r3, [r7, #4]
 80166ee:	681a      	ldr	r2, [r3, #0]
 80166f0:	193b      	adds	r3, r7, r4
 80166f2:	881b      	ldrh	r3, [r3, #0]
 80166f4:	1939      	adds	r1, r7, r4
 80166f6:	1c58      	adds	r0, r3, #1
 80166f8:	8008      	strh	r0, [r1, #0]
 80166fa:	18d3      	adds	r3, r2, r3
 80166fc:	781b      	ldrb	r3, [r3, #0]
 80166fe:	b29a      	uxth	r2, r3
 8016700:	687b      	ldr	r3, [r7, #4]
 8016702:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	681a      	ldr	r2, [r3, #0]
 8016708:	193b      	adds	r3, r7, r4
 801670a:	881b      	ldrh	r3, [r3, #0]
 801670c:	1939      	adds	r1, r7, r4
 801670e:	1c58      	adds	r0, r3, #1
 8016710:	8008      	strh	r0, [r1, #0]
 8016712:	18d3      	adds	r3, r2, r3
 8016714:	781b      	ldrb	r3, [r3, #0]
 8016716:	0219      	lsls	r1, r3, #8
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	89db      	ldrh	r3, [r3, #14]
 801671c:	b21a      	sxth	r2, r3
 801671e:	b20b      	sxth	r3, r1
 8016720:	4313      	orrs	r3, r2
 8016722:	b21b      	sxth	r3, r3
 8016724:	b29a      	uxth	r2, r3
 8016726:	687b      	ldr	r3, [r7, #4]
 8016728:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	3310      	adds	r3, #16
 801672e:	0018      	movs	r0, r3
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	681a      	ldr	r2, [r3, #0]
 8016734:	193b      	adds	r3, r7, r4
 8016736:	881b      	ldrh	r3, [r3, #0]
 8016738:	18d1      	adds	r1, r2, r3
 801673a:	687b      	ldr	r3, [r7, #4]
 801673c:	7b1b      	ldrb	r3, [r3, #12]
 801673e:	071b      	lsls	r3, r3, #28
 8016740:	0f1b      	lsrs	r3, r3, #28
 8016742:	b2db      	uxtb	r3, r3
 8016744:	b29b      	uxth	r3, r3
 8016746:	001a      	movs	r2, r3
 8016748:	f002 fed6 	bl	80194f8 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	7b1b      	ldrb	r3, [r3, #12]
 8016750:	071b      	lsls	r3, r3, #28
 8016752:	0f1b      	lsrs	r3, r3, #28
 8016754:	b2db      	uxtb	r3, r3
 8016756:	b299      	uxth	r1, r3
 8016758:	193b      	adds	r3, r7, r4
 801675a:	193a      	adds	r2, r7, r4
 801675c:	8812      	ldrh	r2, [r2, #0]
 801675e:	188a      	adds	r2, r1, r2
 8016760:	801a      	strh	r2, [r3, #0]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	2220      	movs	r2, #32
 8016766:	2100      	movs	r1, #0
 8016768:	5499      	strb	r1, [r3, r2]
    macMsg->FRMPayloadSize = 0;
 801676a:	687b      	ldr	r3, [r7, #4]
 801676c:	2228      	movs	r2, #40	; 0x28
 801676e:	2100      	movs	r1, #0
 8016770:	5499      	strb	r1, [r3, r2]

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	791b      	ldrb	r3, [r3, #4]
 8016776:	001a      	movs	r2, r3
 8016778:	193b      	adds	r3, r7, r4
 801677a:	881b      	ldrh	r3, [r3, #0]
 801677c:	1ad3      	subs	r3, r2, r3
 801677e:	2b04      	cmp	r3, #4
 8016780:	dd2e      	ble.n	80167e0 <LoRaMacParserData+0x1b4>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	681a      	ldr	r2, [r3, #0]
 8016786:	193b      	adds	r3, r7, r4
 8016788:	881b      	ldrh	r3, [r3, #0]
 801678a:	1939      	adds	r1, r7, r4
 801678c:	1c58      	adds	r0, r3, #1
 801678e:	8008      	strh	r0, [r1, #0]
 8016790:	18d3      	adds	r3, r2, r3
 8016792:	7819      	ldrb	r1, [r3, #0]
 8016794:	687b      	ldr	r3, [r7, #4]
 8016796:	2220      	movs	r2, #32
 8016798:	5499      	strb	r1, [r3, r2]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	791a      	ldrb	r2, [r3, #4]
 801679e:	193b      	adds	r3, r7, r4
 80167a0:	881b      	ldrh	r3, [r3, #0]
 80167a2:	b2db      	uxtb	r3, r3
 80167a4:	1ad3      	subs	r3, r2, r3
 80167a6:	b2db      	uxtb	r3, r3
 80167a8:	3b04      	subs	r3, #4
 80167aa:	b2d9      	uxtb	r1, r3
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	2228      	movs	r2, #40	; 0x28
 80167b0:	5499      	strb	r1, [r3, r2]
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 80167b2:	687b      	ldr	r3, [r7, #4]
 80167b4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80167b6:	687b      	ldr	r3, [r7, #4]
 80167b8:	681a      	ldr	r2, [r3, #0]
 80167ba:	193b      	adds	r3, r7, r4
 80167bc:	881b      	ldrh	r3, [r3, #0]
 80167be:	18d1      	adds	r1, r2, r3
 80167c0:	687b      	ldr	r3, [r7, #4]
 80167c2:	2228      	movs	r2, #40	; 0x28
 80167c4:	5c9b      	ldrb	r3, [r3, r2]
 80167c6:	b29b      	uxth	r3, r3
 80167c8:	001a      	movs	r2, r3
 80167ca:	f002 fe95 	bl	80194f8 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 80167ce:	687b      	ldr	r3, [r7, #4]
 80167d0:	2228      	movs	r2, #40	; 0x28
 80167d2:	5c9b      	ldrb	r3, [r3, r2]
 80167d4:	b299      	uxth	r1, r3
 80167d6:	193b      	adds	r3, r7, r4
 80167d8:	193a      	adds	r2, r7, r4
 80167da:	8812      	ldrh	r2, [r2, #0]
 80167dc:	188a      	adds	r2, r1, r2
 80167de:	801a      	strh	r2, [r3, #0]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	681a      	ldr	r2, [r3, #0]
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	791b      	ldrb	r3, [r3, #4]
 80167e8:	3b04      	subs	r3, #4
 80167ea:	18d3      	adds	r3, r2, r3
 80167ec:	781b      	ldrb	r3, [r3, #0]
 80167ee:	001a      	movs	r2, r3
 80167f0:	687b      	ldr	r3, [r7, #4]
 80167f2:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80167f8:	687b      	ldr	r3, [r7, #4]
 80167fa:	6819      	ldr	r1, [r3, #0]
 80167fc:	687b      	ldr	r3, [r7, #4]
 80167fe:	791b      	ldrb	r3, [r3, #4]
 8016800:	3b03      	subs	r3, #3
 8016802:	18cb      	adds	r3, r1, r3
 8016804:	781b      	ldrb	r3, [r3, #0]
 8016806:	021b      	lsls	r3, r3, #8
 8016808:	431a      	orrs	r2, r3
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 801680e:	687b      	ldr	r3, [r7, #4]
 8016810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016812:	687b      	ldr	r3, [r7, #4]
 8016814:	6819      	ldr	r1, [r3, #0]
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	791b      	ldrb	r3, [r3, #4]
 801681a:	3b02      	subs	r3, #2
 801681c:	18cb      	adds	r3, r1, r3
 801681e:	781b      	ldrb	r3, [r3, #0]
 8016820:	041b      	lsls	r3, r3, #16
 8016822:	431a      	orrs	r2, r3
 8016824:	687b      	ldr	r3, [r7, #4]
 8016826:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8016828:	687b      	ldr	r3, [r7, #4]
 801682a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801682c:	687b      	ldr	r3, [r7, #4]
 801682e:	6819      	ldr	r1, [r3, #0]
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	791b      	ldrb	r3, [r3, #4]
 8016834:	3b01      	subs	r3, #1
 8016836:	18cb      	adds	r3, r1, r3
 8016838:	781b      	ldrb	r3, [r3, #0]
 801683a:	061b      	lsls	r3, r3, #24
 801683c:	431a      	orrs	r2, r3
 801683e:	687b      	ldr	r3, [r7, #4]
 8016840:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8016842:	2300      	movs	r3, #0
}
 8016844:	0018      	movs	r0, r3
 8016846:	46bd      	mov	sp, r7
 8016848:	b005      	add	sp, #20
 801684a:	bd90      	pop	{r4, r7, pc}

0801684c <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 801684c:	b5b0      	push	{r4, r5, r7, lr}
 801684e:	b084      	sub	sp, #16
 8016850:	af00      	add	r7, sp, #0
 8016852:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8016854:	687b      	ldr	r3, [r7, #4]
 8016856:	2b00      	cmp	r3, #0
 8016858:	d003      	beq.n	8016862 <LoRaMacSerializerJoinRequest+0x16>
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	681b      	ldr	r3, [r3, #0]
 801685e:	2b00      	cmp	r3, #0
 8016860:	d101      	bne.n	8016866 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8016862:	2301      	movs	r3, #1
 8016864:	e089      	b.n	801697a <LoRaMacSerializerJoinRequest+0x12e>
    }

    uint16_t bufItr = 0;
 8016866:	230e      	movs	r3, #14
 8016868:	18fb      	adds	r3, r7, r3
 801686a:	2200      	movs	r2, #0
 801686c:	801a      	strh	r2, [r3, #0]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	791b      	ldrb	r3, [r3, #4]
 8016872:	2b16      	cmp	r3, #22
 8016874:	d801      	bhi.n	801687a <LoRaMacSerializerJoinRequest+0x2e>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8016876:	2302      	movs	r3, #2
 8016878:	e07f      	b.n	801697a <LoRaMacSerializerJoinRequest+0x12e>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	681a      	ldr	r2, [r3, #0]
 801687e:	240e      	movs	r4, #14
 8016880:	193b      	adds	r3, r7, r4
 8016882:	881b      	ldrh	r3, [r3, #0]
 8016884:	1939      	adds	r1, r7, r4
 8016886:	1c58      	adds	r0, r3, #1
 8016888:	8008      	strh	r0, [r1, #0]
 801688a:	18d3      	adds	r3, r2, r3
 801688c:	687a      	ldr	r2, [r7, #4]
 801688e:	7952      	ldrb	r2, [r2, #5]
 8016890:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	681a      	ldr	r2, [r3, #0]
 8016896:	193b      	adds	r3, r7, r4
 8016898:	881b      	ldrh	r3, [r3, #0]
 801689a:	18d0      	adds	r0, r2, r3
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	3306      	adds	r3, #6
 80168a0:	2208      	movs	r2, #8
 80168a2:	0019      	movs	r1, r3
 80168a4:	f002 fe44 	bl	8019530 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 80168a8:	193b      	adds	r3, r7, r4
 80168aa:	193a      	adds	r2, r7, r4
 80168ac:	8812      	ldrh	r2, [r2, #0]
 80168ae:	3208      	adds	r2, #8
 80168b0:	801a      	strh	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	681a      	ldr	r2, [r3, #0]
 80168b6:	193b      	adds	r3, r7, r4
 80168b8:	881b      	ldrh	r3, [r3, #0]
 80168ba:	18d0      	adds	r0, r2, r3
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	330e      	adds	r3, #14
 80168c0:	2208      	movs	r2, #8
 80168c2:	0019      	movs	r1, r3
 80168c4:	f002 fe34 	bl	8019530 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 80168c8:	193b      	adds	r3, r7, r4
 80168ca:	0025      	movs	r5, r4
 80168cc:	193a      	adds	r2, r7, r4
 80168ce:	8812      	ldrh	r2, [r2, #0]
 80168d0:	3208      	adds	r2, #8
 80168d2:	801a      	strh	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	8ad8      	ldrh	r0, [r3, #22]
 80168d8:	687b      	ldr	r3, [r7, #4]
 80168da:	681a      	ldr	r2, [r3, #0]
 80168dc:	197b      	adds	r3, r7, r5
 80168de:	881b      	ldrh	r3, [r3, #0]
 80168e0:	1979      	adds	r1, r7, r5
 80168e2:	1c5c      	adds	r4, r3, #1
 80168e4:	800c      	strh	r4, [r1, #0]
 80168e6:	18d3      	adds	r3, r2, r3
 80168e8:	b2c2      	uxtb	r2, r0
 80168ea:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 80168ec:	687b      	ldr	r3, [r7, #4]
 80168ee:	8adb      	ldrh	r3, [r3, #22]
 80168f0:	0a1b      	lsrs	r3, r3, #8
 80168f2:	b298      	uxth	r0, r3
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	681a      	ldr	r2, [r3, #0]
 80168f8:	197b      	adds	r3, r7, r5
 80168fa:	881b      	ldrh	r3, [r3, #0]
 80168fc:	1979      	adds	r1, r7, r5
 80168fe:	1c5c      	adds	r4, r3, #1
 8016900:	800c      	strh	r4, [r1, #0]
 8016902:	18d3      	adds	r3, r2, r3
 8016904:	b2c2      	uxtb	r2, r0
 8016906:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	6998      	ldr	r0, [r3, #24]
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	681a      	ldr	r2, [r3, #0]
 8016910:	197b      	adds	r3, r7, r5
 8016912:	881b      	ldrh	r3, [r3, #0]
 8016914:	1979      	adds	r1, r7, r5
 8016916:	1c5c      	adds	r4, r3, #1
 8016918:	800c      	strh	r4, [r1, #0]
 801691a:	18d3      	adds	r3, r2, r3
 801691c:	b2c2      	uxtb	r2, r0
 801691e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	699b      	ldr	r3, [r3, #24]
 8016924:	0a18      	lsrs	r0, r3, #8
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	681a      	ldr	r2, [r3, #0]
 801692a:	197b      	adds	r3, r7, r5
 801692c:	881b      	ldrh	r3, [r3, #0]
 801692e:	1979      	adds	r1, r7, r5
 8016930:	1c5c      	adds	r4, r3, #1
 8016932:	800c      	strh	r4, [r1, #0]
 8016934:	18d3      	adds	r3, r2, r3
 8016936:	b2c2      	uxtb	r2, r0
 8016938:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	699b      	ldr	r3, [r3, #24]
 801693e:	0c18      	lsrs	r0, r3, #16
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	681a      	ldr	r2, [r3, #0]
 8016944:	197b      	adds	r3, r7, r5
 8016946:	881b      	ldrh	r3, [r3, #0]
 8016948:	1979      	adds	r1, r7, r5
 801694a:	1c5c      	adds	r4, r3, #1
 801694c:	800c      	strh	r4, [r1, #0]
 801694e:	18d3      	adds	r3, r2, r3
 8016950:	b2c2      	uxtb	r2, r0
 8016952:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	699b      	ldr	r3, [r3, #24]
 8016958:	0e18      	lsrs	r0, r3, #24
 801695a:	687b      	ldr	r3, [r7, #4]
 801695c:	681a      	ldr	r2, [r3, #0]
 801695e:	197b      	adds	r3, r7, r5
 8016960:	881b      	ldrh	r3, [r3, #0]
 8016962:	1979      	adds	r1, r7, r5
 8016964:	1c5c      	adds	r4, r3, #1
 8016966:	800c      	strh	r4, [r1, #0]
 8016968:	18d3      	adds	r3, r2, r3
 801696a:	b2c2      	uxtb	r2, r0
 801696c:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 801696e:	197b      	adds	r3, r7, r5
 8016970:	881b      	ldrh	r3, [r3, #0]
 8016972:	b2da      	uxtb	r2, r3
 8016974:	687b      	ldr	r3, [r7, #4]
 8016976:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8016978:	2300      	movs	r3, #0
}
 801697a:	0018      	movs	r0, r3
 801697c:	46bd      	mov	sp, r7
 801697e:	b004      	add	sp, #16
 8016980:	bdb0      	pop	{r4, r5, r7, pc}

08016982 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8016982:	b5b0      	push	{r4, r5, r7, lr}
 8016984:	b084      	sub	sp, #16
 8016986:	af00      	add	r7, sp, #0
 8016988:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801698a:	687b      	ldr	r3, [r7, #4]
 801698c:	2b00      	cmp	r3, #0
 801698e:	d003      	beq.n	8016998 <LoRaMacSerializerData+0x16>
 8016990:	687b      	ldr	r3, [r7, #4]
 8016992:	681b      	ldr	r3, [r3, #0]
 8016994:	2b00      	cmp	r3, #0
 8016996:	d101      	bne.n	801699c <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8016998:	2301      	movs	r3, #1
 801699a:	e119      	b.n	8016bd0 <LoRaMacSerializerData+0x24e>
    }

    uint16_t bufItr = 0;
 801699c:	230e      	movs	r3, #14
 801699e:	18fb      	adds	r3, r7, r3
 80169a0:	2200      	movs	r2, #0
 80169a2:	801a      	strh	r2, [r3, #0]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 80169a4:	200c      	movs	r0, #12
 80169a6:	183b      	adds	r3, r7, r0
 80169a8:	2208      	movs	r2, #8
 80169aa:	801a      	strh	r2, [r3, #0]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80169ac:	687b      	ldr	r3, [r7, #4]
 80169ae:	7b1b      	ldrb	r3, [r3, #12]
 80169b0:	071b      	lsls	r3, r3, #28
 80169b2:	0f1b      	lsrs	r3, r3, #28
 80169b4:	b2db      	uxtb	r3, r3
 80169b6:	b299      	uxth	r1, r3
 80169b8:	183b      	adds	r3, r7, r0
 80169ba:	183a      	adds	r2, r7, r0
 80169bc:	8812      	ldrh	r2, [r2, #0]
 80169be:	188a      	adds	r2, r1, r2
 80169c0:	801a      	strh	r2, [r3, #0]

    if( macMsg->FRMPayloadSize > 0 )
 80169c2:	687b      	ldr	r3, [r7, #4]
 80169c4:	2228      	movs	r2, #40	; 0x28
 80169c6:	5c9b      	ldrb	r3, [r3, r2]
 80169c8:	2b00      	cmp	r3, #0
 80169ca:	d004      	beq.n	80169d6 <LoRaMacSerializerData+0x54>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 80169cc:	183b      	adds	r3, r7, r0
 80169ce:	183a      	adds	r2, r7, r0
 80169d0:	8812      	ldrh	r2, [r2, #0]
 80169d2:	3201      	adds	r2, #1
 80169d4:	801a      	strh	r2, [r3, #0]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 80169d6:	687b      	ldr	r3, [r7, #4]
 80169d8:	2228      	movs	r2, #40	; 0x28
 80169da:	5c9b      	ldrb	r3, [r3, r2]
 80169dc:	b299      	uxth	r1, r3
 80169de:	200c      	movs	r0, #12
 80169e0:	183b      	adds	r3, r7, r0
 80169e2:	183a      	adds	r2, r7, r0
 80169e4:	8812      	ldrh	r2, [r2, #0]
 80169e6:	188a      	adds	r2, r1, r2
 80169e8:	801a      	strh	r2, [r3, #0]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 80169ea:	0001      	movs	r1, r0
 80169ec:	187b      	adds	r3, r7, r1
 80169ee:	187a      	adds	r2, r7, r1
 80169f0:	8812      	ldrh	r2, [r2, #0]
 80169f2:	3204      	adds	r2, #4
 80169f4:	801a      	strh	r2, [r3, #0]

    if( macMsg->BufSize < computedBufSize )
 80169f6:	687b      	ldr	r3, [r7, #4]
 80169f8:	791b      	ldrb	r3, [r3, #4]
 80169fa:	b29b      	uxth	r3, r3
 80169fc:	187a      	adds	r2, r7, r1
 80169fe:	8812      	ldrh	r2, [r2, #0]
 8016a00:	429a      	cmp	r2, r3
 8016a02:	d901      	bls.n	8016a08 <LoRaMacSerializerData+0x86>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8016a04:	2302      	movs	r3, #2
 8016a06:	e0e3      	b.n	8016bd0 <LoRaMacSerializerData+0x24e>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	681a      	ldr	r2, [r3, #0]
 8016a0c:	250e      	movs	r5, #14
 8016a0e:	197b      	adds	r3, r7, r5
 8016a10:	881b      	ldrh	r3, [r3, #0]
 8016a12:	1979      	adds	r1, r7, r5
 8016a14:	1c58      	adds	r0, r3, #1
 8016a16:	8008      	strh	r0, [r1, #0]
 8016a18:	18d3      	adds	r3, r2, r3
 8016a1a:	687a      	ldr	r2, [r7, #4]
 8016a1c:	7952      	ldrb	r2, [r2, #5]
 8016a1e:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8016a20:	687b      	ldr	r3, [r7, #4]
 8016a22:	6898      	ldr	r0, [r3, #8]
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	681a      	ldr	r2, [r3, #0]
 8016a28:	197b      	adds	r3, r7, r5
 8016a2a:	881b      	ldrh	r3, [r3, #0]
 8016a2c:	1979      	adds	r1, r7, r5
 8016a2e:	1c5c      	adds	r4, r3, #1
 8016a30:	800c      	strh	r4, [r1, #0]
 8016a32:	18d3      	adds	r3, r2, r3
 8016a34:	b2c2      	uxtb	r2, r0
 8016a36:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8016a38:	687b      	ldr	r3, [r7, #4]
 8016a3a:	689b      	ldr	r3, [r3, #8]
 8016a3c:	0a18      	lsrs	r0, r3, #8
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	681a      	ldr	r2, [r3, #0]
 8016a42:	197b      	adds	r3, r7, r5
 8016a44:	881b      	ldrh	r3, [r3, #0]
 8016a46:	1979      	adds	r1, r7, r5
 8016a48:	1c5c      	adds	r4, r3, #1
 8016a4a:	800c      	strh	r4, [r1, #0]
 8016a4c:	18d3      	adds	r3, r2, r3
 8016a4e:	b2c2      	uxtb	r2, r0
 8016a50:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8016a52:	687b      	ldr	r3, [r7, #4]
 8016a54:	689b      	ldr	r3, [r3, #8]
 8016a56:	0c18      	lsrs	r0, r3, #16
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	681a      	ldr	r2, [r3, #0]
 8016a5c:	197b      	adds	r3, r7, r5
 8016a5e:	881b      	ldrh	r3, [r3, #0]
 8016a60:	1979      	adds	r1, r7, r5
 8016a62:	1c5c      	adds	r4, r3, #1
 8016a64:	800c      	strh	r4, [r1, #0]
 8016a66:	18d3      	adds	r3, r2, r3
 8016a68:	b2c2      	uxtb	r2, r0
 8016a6a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8016a6c:	687b      	ldr	r3, [r7, #4]
 8016a6e:	689b      	ldr	r3, [r3, #8]
 8016a70:	0e18      	lsrs	r0, r3, #24
 8016a72:	687b      	ldr	r3, [r7, #4]
 8016a74:	681a      	ldr	r2, [r3, #0]
 8016a76:	197b      	adds	r3, r7, r5
 8016a78:	881b      	ldrh	r3, [r3, #0]
 8016a7a:	1979      	adds	r1, r7, r5
 8016a7c:	1c5c      	adds	r4, r3, #1
 8016a7e:	800c      	strh	r4, [r1, #0]
 8016a80:	18d3      	adds	r3, r2, r3
 8016a82:	b2c2      	uxtb	r2, r0
 8016a84:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	681a      	ldr	r2, [r3, #0]
 8016a8a:	197b      	adds	r3, r7, r5
 8016a8c:	881b      	ldrh	r3, [r3, #0]
 8016a8e:	1979      	adds	r1, r7, r5
 8016a90:	1c58      	adds	r0, r3, #1
 8016a92:	8008      	strh	r0, [r1, #0]
 8016a94:	18d3      	adds	r3, r2, r3
 8016a96:	687a      	ldr	r2, [r7, #4]
 8016a98:	7b12      	ldrb	r2, [r2, #12]
 8016a9a:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8016a9c:	687b      	ldr	r3, [r7, #4]
 8016a9e:	89d8      	ldrh	r0, [r3, #14]
 8016aa0:	687b      	ldr	r3, [r7, #4]
 8016aa2:	681a      	ldr	r2, [r3, #0]
 8016aa4:	197b      	adds	r3, r7, r5
 8016aa6:	881b      	ldrh	r3, [r3, #0]
 8016aa8:	1979      	adds	r1, r7, r5
 8016aaa:	1c5c      	adds	r4, r3, #1
 8016aac:	800c      	strh	r4, [r1, #0]
 8016aae:	18d3      	adds	r3, r2, r3
 8016ab0:	b2c2      	uxtb	r2, r0
 8016ab2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	89db      	ldrh	r3, [r3, #14]
 8016ab8:	0a1b      	lsrs	r3, r3, #8
 8016aba:	b298      	uxth	r0, r3
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	681a      	ldr	r2, [r3, #0]
 8016ac0:	197b      	adds	r3, r7, r5
 8016ac2:	881b      	ldrh	r3, [r3, #0]
 8016ac4:	1979      	adds	r1, r7, r5
 8016ac6:	1c5c      	adds	r4, r3, #1
 8016ac8:	800c      	strh	r4, [r1, #0]
 8016aca:	18d3      	adds	r3, r2, r3
 8016acc:	b2c2      	uxtb	r2, r0
 8016ace:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8016ad0:	687b      	ldr	r3, [r7, #4]
 8016ad2:	681a      	ldr	r2, [r3, #0]
 8016ad4:	002c      	movs	r4, r5
 8016ad6:	197b      	adds	r3, r7, r5
 8016ad8:	881b      	ldrh	r3, [r3, #0]
 8016ada:	18d0      	adds	r0, r2, r3
 8016adc:	687b      	ldr	r3, [r7, #4]
 8016ade:	3310      	adds	r3, #16
 8016ae0:	0019      	movs	r1, r3
 8016ae2:	687b      	ldr	r3, [r7, #4]
 8016ae4:	7b1b      	ldrb	r3, [r3, #12]
 8016ae6:	071b      	lsls	r3, r3, #28
 8016ae8:	0f1b      	lsrs	r3, r3, #28
 8016aea:	b2db      	uxtb	r3, r3
 8016aec:	b29b      	uxth	r3, r3
 8016aee:	001a      	movs	r2, r3
 8016af0:	f002 fd02 	bl	80194f8 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	7b1b      	ldrb	r3, [r3, #12]
 8016af8:	071b      	lsls	r3, r3, #28
 8016afa:	0f1b      	lsrs	r3, r3, #28
 8016afc:	b2db      	uxtb	r3, r3
 8016afe:	b299      	uxth	r1, r3
 8016b00:	193b      	adds	r3, r7, r4
 8016b02:	193a      	adds	r2, r7, r4
 8016b04:	8812      	ldrh	r2, [r2, #0]
 8016b06:	188a      	adds	r2, r1, r2
 8016b08:	801a      	strh	r2, [r3, #0]

    if( macMsg->FRMPayloadSize > 0 )
 8016b0a:	687b      	ldr	r3, [r7, #4]
 8016b0c:	2228      	movs	r2, #40	; 0x28
 8016b0e:	5c9b      	ldrb	r3, [r3, r2]
 8016b10:	2b00      	cmp	r3, #0
 8016b12:	d00b      	beq.n	8016b2c <LoRaMacSerializerData+0x1aa>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	681a      	ldr	r2, [r3, #0]
 8016b18:	193b      	adds	r3, r7, r4
 8016b1a:	881b      	ldrh	r3, [r3, #0]
 8016b1c:	1939      	adds	r1, r7, r4
 8016b1e:	1c58      	adds	r0, r3, #1
 8016b20:	8008      	strh	r0, [r1, #0]
 8016b22:	18d3      	adds	r3, r2, r3
 8016b24:	687a      	ldr	r2, [r7, #4]
 8016b26:	2120      	movs	r1, #32
 8016b28:	5c52      	ldrb	r2, [r2, r1]
 8016b2a:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8016b2c:	687b      	ldr	r3, [r7, #4]
 8016b2e:	681a      	ldr	r2, [r3, #0]
 8016b30:	240e      	movs	r4, #14
 8016b32:	193b      	adds	r3, r7, r4
 8016b34:	881b      	ldrh	r3, [r3, #0]
 8016b36:	18d0      	adds	r0, r2, r3
 8016b38:	687b      	ldr	r3, [r7, #4]
 8016b3a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8016b3c:	687b      	ldr	r3, [r7, #4]
 8016b3e:	2228      	movs	r2, #40	; 0x28
 8016b40:	5c9b      	ldrb	r3, [r3, r2]
 8016b42:	b29b      	uxth	r3, r3
 8016b44:	001a      	movs	r2, r3
 8016b46:	f002 fcd7 	bl	80194f8 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8016b4a:	687b      	ldr	r3, [r7, #4]
 8016b4c:	2228      	movs	r2, #40	; 0x28
 8016b4e:	5c9b      	ldrb	r3, [r3, r2]
 8016b50:	b299      	uxth	r1, r3
 8016b52:	193b      	adds	r3, r7, r4
 8016b54:	193a      	adds	r2, r7, r4
 8016b56:	8812      	ldrh	r2, [r2, #0]
 8016b58:	188a      	adds	r2, r1, r2
 8016b5a:	801a      	strh	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8016b5c:	687b      	ldr	r3, [r7, #4]
 8016b5e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	681a      	ldr	r2, [r3, #0]
 8016b64:	193b      	adds	r3, r7, r4
 8016b66:	881b      	ldrh	r3, [r3, #0]
 8016b68:	0025      	movs	r5, r4
 8016b6a:	1939      	adds	r1, r7, r4
 8016b6c:	1c5c      	adds	r4, r3, #1
 8016b6e:	800c      	strh	r4, [r1, #0]
 8016b70:	18d3      	adds	r3, r2, r3
 8016b72:	b2c2      	uxtb	r2, r0
 8016b74:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8016b76:	687b      	ldr	r3, [r7, #4]
 8016b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b7a:	0a18      	lsrs	r0, r3, #8
 8016b7c:	687b      	ldr	r3, [r7, #4]
 8016b7e:	681a      	ldr	r2, [r3, #0]
 8016b80:	197b      	adds	r3, r7, r5
 8016b82:	881b      	ldrh	r3, [r3, #0]
 8016b84:	1979      	adds	r1, r7, r5
 8016b86:	1c5c      	adds	r4, r3, #1
 8016b88:	800c      	strh	r4, [r1, #0]
 8016b8a:	18d3      	adds	r3, r2, r3
 8016b8c:	b2c2      	uxtb	r2, r0
 8016b8e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8016b90:	687b      	ldr	r3, [r7, #4]
 8016b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b94:	0c18      	lsrs	r0, r3, #16
 8016b96:	687b      	ldr	r3, [r7, #4]
 8016b98:	681a      	ldr	r2, [r3, #0]
 8016b9a:	197b      	adds	r3, r7, r5
 8016b9c:	881b      	ldrh	r3, [r3, #0]
 8016b9e:	1979      	adds	r1, r7, r5
 8016ba0:	1c5c      	adds	r4, r3, #1
 8016ba2:	800c      	strh	r4, [r1, #0]
 8016ba4:	18d3      	adds	r3, r2, r3
 8016ba6:	b2c2      	uxtb	r2, r0
 8016ba8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8016baa:	687b      	ldr	r3, [r7, #4]
 8016bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016bae:	0e18      	lsrs	r0, r3, #24
 8016bb0:	687b      	ldr	r3, [r7, #4]
 8016bb2:	681a      	ldr	r2, [r3, #0]
 8016bb4:	197b      	adds	r3, r7, r5
 8016bb6:	881b      	ldrh	r3, [r3, #0]
 8016bb8:	1979      	adds	r1, r7, r5
 8016bba:	1c5c      	adds	r4, r3, #1
 8016bbc:	800c      	strh	r4, [r1, #0]
 8016bbe:	18d3      	adds	r3, r2, r3
 8016bc0:	b2c2      	uxtb	r2, r0
 8016bc2:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8016bc4:	197b      	adds	r3, r7, r5
 8016bc6:	881b      	ldrh	r3, [r3, #0]
 8016bc8:	b2da      	uxtb	r2, r3
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8016bce:	2300      	movs	r3, #0
}
 8016bd0:	0018      	movs	r0, r3
 8016bd2:	46bd      	mov	sp, r7
 8016bd4:	b004      	add	sp, #16
 8016bd6:	bdb0      	pop	{r4, r5, r7, pc}

08016bd8 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8016bd8:	b580      	push	{r7, lr}
 8016bda:	b082      	sub	sp, #8
 8016bdc:	af00      	add	r7, sp, #0
 8016bde:	0002      	movs	r2, r0
 8016be0:	1dfb      	adds	r3, r7, #7
 8016be2:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016be4:	1dfb      	adds	r3, r7, #7
 8016be6:	781b      	ldrb	r3, [r3, #0]
 8016be8:	2b05      	cmp	r3, #5
 8016bea:	d101      	bne.n	8016bf0 <RegionIsActive+0x18>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 8016bec:	2301      	movs	r3, #1
 8016bee:	e000      	b.n	8016bf2 <RegionIsActive+0x1a>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8016bf0:	2300      	movs	r3, #0
        }
    }
}
 8016bf2:	0018      	movs	r0, r3
 8016bf4:	46bd      	mov	sp, r7
 8016bf6:	b002      	add	sp, #8
 8016bf8:	bd80      	pop	{r7, pc}

08016bfa <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8016bfa:	b580      	push	{r7, lr}
 8016bfc:	b084      	sub	sp, #16
 8016bfe:	af00      	add	r7, sp, #0
 8016c00:	0002      	movs	r2, r0
 8016c02:	6039      	str	r1, [r7, #0]
 8016c04:	1dfb      	adds	r3, r7, #7
 8016c06:	701a      	strb	r2, [r3, #0]
    PhyParam_t phyParam = { 0 };
 8016c08:	2308      	movs	r3, #8
 8016c0a:	18fb      	adds	r3, r7, r3
 8016c0c:	2200      	movs	r2, #0
 8016c0e:	601a      	str	r2, [r3, #0]
    switch( region )
 8016c10:	1dfb      	adds	r3, r7, #7
 8016c12:	781b      	ldrb	r3, [r3, #0]
 8016c14:	2b05      	cmp	r3, #5
 8016c16:	d109      	bne.n	8016c2c <RegionGetPhyParam+0x32>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 8016c18:	683b      	ldr	r3, [r7, #0]
 8016c1a:	0018      	movs	r0, r3
 8016c1c:	f001 fa4e 	bl	80180bc <RegionEU868GetPhyParam>
 8016c20:	0003      	movs	r3, r0
 8016c22:	001a      	movs	r2, r3
 8016c24:	230c      	movs	r3, #12
 8016c26:	18fb      	adds	r3, r7, r3
 8016c28:	601a      	str	r2, [r3, #0]
 8016c2a:	e005      	b.n	8016c38 <RegionGetPhyParam+0x3e>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8016c2c:	230c      	movs	r3, #12
 8016c2e:	18fb      	adds	r3, r7, r3
 8016c30:	2208      	movs	r2, #8
 8016c32:	18ba      	adds	r2, r7, r2
 8016c34:	6812      	ldr	r2, [r2, #0]
 8016c36:	601a      	str	r2, [r3, #0]
 8016c38:	230c      	movs	r3, #12
 8016c3a:	18fb      	adds	r3, r7, r3
 8016c3c:	2200      	movs	r2, #0
 8016c3e:	681a      	ldr	r2, [r3, #0]
 8016c40:	0013      	movs	r3, r2
        }
    }
}
 8016c42:	0018      	movs	r0, r3
 8016c44:	46bd      	mov	sp, r7
 8016c46:	b004      	add	sp, #16
 8016c48:	bd80      	pop	{r7, pc}

08016c4a <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8016c4a:	b580      	push	{r7, lr}
 8016c4c:	b082      	sub	sp, #8
 8016c4e:	af00      	add	r7, sp, #0
 8016c50:	0002      	movs	r2, r0
 8016c52:	6039      	str	r1, [r7, #0]
 8016c54:	1dfb      	adds	r3, r7, #7
 8016c56:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016c58:	1dfb      	adds	r3, r7, #7
 8016c5a:	781b      	ldrb	r3, [r3, #0]
 8016c5c:	2b05      	cmp	r3, #5
 8016c5e:	d104      	bne.n	8016c6a <RegionSetBandTxDone+0x20>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 8016c60:	683b      	ldr	r3, [r7, #0]
 8016c62:	0018      	movs	r0, r3
 8016c64:	f001 fb4a 	bl	80182fc <RegionEU868SetBandTxDone>
 8016c68:	e000      	b.n	8016c6c <RegionSetBandTxDone+0x22>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8016c6a:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8016c6c:	46bd      	mov	sp, r7
 8016c6e:	b002      	add	sp, #8
 8016c70:	bd80      	pop	{r7, pc}

08016c72 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8016c72:	b580      	push	{r7, lr}
 8016c74:	b082      	sub	sp, #8
 8016c76:	af00      	add	r7, sp, #0
 8016c78:	0002      	movs	r2, r0
 8016c7a:	6039      	str	r1, [r7, #0]
 8016c7c:	1dfb      	adds	r3, r7, #7
 8016c7e:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016c80:	1dfb      	adds	r3, r7, #7
 8016c82:	781b      	ldrb	r3, [r3, #0]
 8016c84:	2b05      	cmp	r3, #5
 8016c86:	d104      	bne.n	8016c92 <RegionInitDefaults+0x20>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 8016c88:	683b      	ldr	r3, [r7, #0]
 8016c8a:	0018      	movs	r0, r3
 8016c8c:	f001 fb62 	bl	8018354 <RegionEU868InitDefaults>
 8016c90:	e000      	b.n	8016c94 <RegionInitDefaults+0x22>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8016c92:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8016c94:	46c0      	nop			; (mov r8, r8)
 8016c96:	46bd      	mov	sp, r7
 8016c98:	b002      	add	sp, #8
 8016c9a:	bd80      	pop	{r7, pc}

08016c9c <RegionGetNvmCtx>:

void* RegionGetNvmCtx( LoRaMacRegion_t region, GetNvmCtxParams_t* params )
{
 8016c9c:	b580      	push	{r7, lr}
 8016c9e:	b082      	sub	sp, #8
 8016ca0:	af00      	add	r7, sp, #0
 8016ca2:	0002      	movs	r2, r0
 8016ca4:	6039      	str	r1, [r7, #0]
 8016ca6:	1dfb      	adds	r3, r7, #7
 8016ca8:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016caa:	1dfb      	adds	r3, r7, #7
 8016cac:	781b      	ldrb	r3, [r3, #0]
 8016cae:	2b05      	cmp	r3, #5
 8016cb0:	d105      	bne.n	8016cbe <RegionGetNvmCtx+0x22>
        AS923_GET_NVM_CTX( );
        AU915_GET_NVM_CTX( );
        CN470_GET_NVM_CTX( );
        CN779_GET_NVM_CTX( );
        EU433_GET_NVM_CTX( );
        EU868_GET_NVM_CTX( );
 8016cb2:	683b      	ldr	r3, [r7, #0]
 8016cb4:	0018      	movs	r0, r3
 8016cb6:	f001 fbe1 	bl	801847c <RegionEU868GetNvmCtx>
 8016cba:	0003      	movs	r3, r0
 8016cbc:	e000      	b.n	8016cc0 <RegionGetNvmCtx+0x24>
        IN865_GET_NVM_CTX( );
        US915_GET_NVM_CTX( );
        RU864_GET_NVM_CTX( );
        default:
        {
           return 0;
 8016cbe:	2300      	movs	r3, #0
        }
    }
}
 8016cc0:	0018      	movs	r0, r3
 8016cc2:	46bd      	mov	sp, r7
 8016cc4:	b002      	add	sp, #8
 8016cc6:	bd80      	pop	{r7, pc}

08016cc8 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8016cc8:	b580      	push	{r7, lr}
 8016cca:	b082      	sub	sp, #8
 8016ccc:	af00      	add	r7, sp, #0
 8016cce:	6039      	str	r1, [r7, #0]
 8016cd0:	0011      	movs	r1, r2
 8016cd2:	1dfb      	adds	r3, r7, #7
 8016cd4:	1c02      	adds	r2, r0, #0
 8016cd6:	701a      	strb	r2, [r3, #0]
 8016cd8:	1dbb      	adds	r3, r7, #6
 8016cda:	1c0a      	adds	r2, r1, #0
 8016cdc:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016cde:	1dfb      	adds	r3, r7, #7
 8016ce0:	781b      	ldrb	r3, [r3, #0]
 8016ce2:	2b05      	cmp	r3, #5
 8016ce4:	d108      	bne.n	8016cf8 <RegionVerify+0x30>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 8016ce6:	1dbb      	adds	r3, r7, #6
 8016ce8:	781a      	ldrb	r2, [r3, #0]
 8016cea:	683b      	ldr	r3, [r7, #0]
 8016cec:	0011      	movs	r1, r2
 8016cee:	0018      	movs	r0, r3
 8016cf0:	f001 fbd4 	bl	801849c <RegionEU868Verify>
 8016cf4:	0003      	movs	r3, r0
 8016cf6:	e000      	b.n	8016cfa <RegionVerify+0x32>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 8016cf8:	2300      	movs	r3, #0
        }
    }
}
 8016cfa:	0018      	movs	r0, r3
 8016cfc:	46bd      	mov	sp, r7
 8016cfe:	b002      	add	sp, #8
 8016d00:	bd80      	pop	{r7, pc}

08016d02 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8016d02:	b580      	push	{r7, lr}
 8016d04:	b082      	sub	sp, #8
 8016d06:	af00      	add	r7, sp, #0
 8016d08:	0002      	movs	r2, r0
 8016d0a:	6039      	str	r1, [r7, #0]
 8016d0c:	1dfb      	adds	r3, r7, #7
 8016d0e:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016d10:	1dfb      	adds	r3, r7, #7
 8016d12:	781b      	ldrb	r3, [r3, #0]
 8016d14:	2b05      	cmp	r3, #5
 8016d16:	d104      	bne.n	8016d22 <RegionApplyCFList+0x20>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 8016d18:	683b      	ldr	r3, [r7, #0]
 8016d1a:	0018      	movs	r0, r3
 8016d1c:	f001 fc18 	bl	8018550 <RegionEU868ApplyCFList>
 8016d20:	e000      	b.n	8016d24 <RegionApplyCFList+0x22>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8016d22:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8016d24:	46c0      	nop			; (mov r8, r8)
 8016d26:	46bd      	mov	sp, r7
 8016d28:	b002      	add	sp, #8
 8016d2a:	bd80      	pop	{r7, pc}

08016d2c <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8016d2c:	b580      	push	{r7, lr}
 8016d2e:	b082      	sub	sp, #8
 8016d30:	af00      	add	r7, sp, #0
 8016d32:	0002      	movs	r2, r0
 8016d34:	6039      	str	r1, [r7, #0]
 8016d36:	1dfb      	adds	r3, r7, #7
 8016d38:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016d3a:	1dfb      	adds	r3, r7, #7
 8016d3c:	781b      	ldrb	r3, [r3, #0]
 8016d3e:	2b05      	cmp	r3, #5
 8016d40:	d105      	bne.n	8016d4e <RegionChanMaskSet+0x22>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 8016d42:	683b      	ldr	r3, [r7, #0]
 8016d44:	0018      	movs	r0, r3
 8016d46:	f001 fc93 	bl	8018670 <RegionEU868ChanMaskSet>
 8016d4a:	0003      	movs	r3, r0
 8016d4c:	e000      	b.n	8016d50 <RegionChanMaskSet+0x24>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8016d4e:	2300      	movs	r3, #0
        }
    }
}
 8016d50:	0018      	movs	r0, r3
 8016d52:	46bd      	mov	sp, r7
 8016d54:	b002      	add	sp, #8
 8016d56:	bd80      	pop	{r7, pc}

08016d58 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8016d58:	b590      	push	{r4, r7, lr}
 8016d5a:	b083      	sub	sp, #12
 8016d5c:	af00      	add	r7, sp, #0
 8016d5e:	0004      	movs	r4, r0
 8016d60:	0008      	movs	r0, r1
 8016d62:	0011      	movs	r1, r2
 8016d64:	603b      	str	r3, [r7, #0]
 8016d66:	1dfb      	adds	r3, r7, #7
 8016d68:	1c22      	adds	r2, r4, #0
 8016d6a:	701a      	strb	r2, [r3, #0]
 8016d6c:	1dbb      	adds	r3, r7, #6
 8016d6e:	1c02      	adds	r2, r0, #0
 8016d70:	701a      	strb	r2, [r3, #0]
 8016d72:	1d7b      	adds	r3, r7, #5
 8016d74:	1c0a      	adds	r2, r1, #0
 8016d76:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016d78:	1dfb      	adds	r3, r7, #7
 8016d7a:	781b      	ldrb	r3, [r3, #0]
 8016d7c:	2b05      	cmp	r3, #5
 8016d7e:	d10a      	bne.n	8016d96 <RegionComputeRxWindowParameters+0x3e>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 8016d80:	69bc      	ldr	r4, [r7, #24]
 8016d82:	683a      	ldr	r2, [r7, #0]
 8016d84:	1d7b      	adds	r3, r7, #5
 8016d86:	7819      	ldrb	r1, [r3, #0]
 8016d88:	1dbb      	adds	r3, r7, #6
 8016d8a:	2000      	movs	r0, #0
 8016d8c:	5618      	ldrsb	r0, [r3, r0]
 8016d8e:	0023      	movs	r3, r4
 8016d90:	f001 fc94 	bl	80186bc <RegionEU868ComputeRxWindowParameters>
 8016d94:	e000      	b.n	8016d98 <RegionComputeRxWindowParameters+0x40>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8016d96:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8016d98:	46c0      	nop			; (mov r8, r8)
 8016d9a:	46bd      	mov	sp, r7
 8016d9c:	b003      	add	sp, #12
 8016d9e:	bd90      	pop	{r4, r7, pc}

08016da0 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8016da0:	b580      	push	{r7, lr}
 8016da2:	b084      	sub	sp, #16
 8016da4:	af00      	add	r7, sp, #0
 8016da6:	60b9      	str	r1, [r7, #8]
 8016da8:	607a      	str	r2, [r7, #4]
 8016daa:	210f      	movs	r1, #15
 8016dac:	187b      	adds	r3, r7, r1
 8016dae:	1c02      	adds	r2, r0, #0
 8016db0:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016db2:	187b      	adds	r3, r7, r1
 8016db4:	781b      	ldrb	r3, [r3, #0]
 8016db6:	2b05      	cmp	r3, #5
 8016db8:	d107      	bne.n	8016dca <RegionRxConfig+0x2a>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8016dba:	687a      	ldr	r2, [r7, #4]
 8016dbc:	68bb      	ldr	r3, [r7, #8]
 8016dbe:	0011      	movs	r1, r2
 8016dc0:	0018      	movs	r0, r3
 8016dc2:	f001 fcdd 	bl	8018780 <RegionEU868RxConfig>
 8016dc6:	0003      	movs	r3, r0
 8016dc8:	e000      	b.n	8016dcc <RegionRxConfig+0x2c>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8016dca:	2300      	movs	r3, #0
        }
    }
}
 8016dcc:	0018      	movs	r0, r3
 8016dce:	46bd      	mov	sp, r7
 8016dd0:	b004      	add	sp, #16
 8016dd2:	bd80      	pop	{r7, pc}

08016dd4 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8016dd4:	b580      	push	{r7, lr}
 8016dd6:	b084      	sub	sp, #16
 8016dd8:	af00      	add	r7, sp, #0
 8016dda:	60b9      	str	r1, [r7, #8]
 8016ddc:	607a      	str	r2, [r7, #4]
 8016dde:	603b      	str	r3, [r7, #0]
 8016de0:	210f      	movs	r1, #15
 8016de2:	187b      	adds	r3, r7, r1
 8016de4:	1c02      	adds	r2, r0, #0
 8016de6:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016de8:	187b      	adds	r3, r7, r1
 8016dea:	781b      	ldrb	r3, [r3, #0]
 8016dec:	2b05      	cmp	r3, #5
 8016dee:	d107      	bne.n	8016e00 <RegionTxConfig+0x2c>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8016df0:	683a      	ldr	r2, [r7, #0]
 8016df2:	6879      	ldr	r1, [r7, #4]
 8016df4:	68bb      	ldr	r3, [r7, #8]
 8016df6:	0018      	movs	r0, r3
 8016df8:	f001 fdb6 	bl	8018968 <RegionEU868TxConfig>
 8016dfc:	0003      	movs	r3, r0
 8016dfe:	e000      	b.n	8016e02 <RegionTxConfig+0x2e>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8016e00:	2300      	movs	r3, #0
        }
    }
}
 8016e02:	0018      	movs	r0, r3
 8016e04:	46bd      	mov	sp, r7
 8016e06:	b004      	add	sp, #16
 8016e08:	bd80      	pop	{r7, pc}

08016e0a <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8016e0a:	b590      	push	{r4, r7, lr}
 8016e0c:	b087      	sub	sp, #28
 8016e0e:	af02      	add	r7, sp, #8
 8016e10:	60b9      	str	r1, [r7, #8]
 8016e12:	607a      	str	r2, [r7, #4]
 8016e14:	603b      	str	r3, [r7, #0]
 8016e16:	210f      	movs	r1, #15
 8016e18:	187b      	adds	r3, r7, r1
 8016e1a:	1c02      	adds	r2, r0, #0
 8016e1c:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016e1e:	187b      	adds	r3, r7, r1
 8016e20:	781b      	ldrb	r3, [r3, #0]
 8016e22:	2b05      	cmp	r3, #5
 8016e24:	d10a      	bne.n	8016e3c <RegionLinkAdrReq+0x32>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 8016e26:	6a3c      	ldr	r4, [r7, #32]
 8016e28:	683a      	ldr	r2, [r7, #0]
 8016e2a:	6879      	ldr	r1, [r7, #4]
 8016e2c:	68b8      	ldr	r0, [r7, #8]
 8016e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e30:	9300      	str	r3, [sp, #0]
 8016e32:	0023      	movs	r3, r4
 8016e34:	f001 fe84 	bl	8018b40 <RegionEU868LinkAdrReq>
 8016e38:	0003      	movs	r3, r0
 8016e3a:	e000      	b.n	8016e3e <RegionLinkAdrReq+0x34>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8016e3c:	2300      	movs	r3, #0
        }
    }
}
 8016e3e:	0018      	movs	r0, r3
 8016e40:	46bd      	mov	sp, r7
 8016e42:	b005      	add	sp, #20
 8016e44:	bd90      	pop	{r4, r7, pc}

08016e46 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8016e46:	b580      	push	{r7, lr}
 8016e48:	b082      	sub	sp, #8
 8016e4a:	af00      	add	r7, sp, #0
 8016e4c:	0002      	movs	r2, r0
 8016e4e:	6039      	str	r1, [r7, #0]
 8016e50:	1dfb      	adds	r3, r7, #7
 8016e52:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016e54:	1dfb      	adds	r3, r7, #7
 8016e56:	781b      	ldrb	r3, [r3, #0]
 8016e58:	2b05      	cmp	r3, #5
 8016e5a:	d105      	bne.n	8016e68 <RegionRxParamSetupReq+0x22>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 8016e5c:	683b      	ldr	r3, [r7, #0]
 8016e5e:	0018      	movs	r0, r3
 8016e60:	f001 ffc6 	bl	8018df0 <RegionEU868RxParamSetupReq>
 8016e64:	0003      	movs	r3, r0
 8016e66:	e000      	b.n	8016e6a <RegionRxParamSetupReq+0x24>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8016e68:	2300      	movs	r3, #0
        }
    }
}
 8016e6a:	0018      	movs	r0, r3
 8016e6c:	46bd      	mov	sp, r7
 8016e6e:	b002      	add	sp, #8
 8016e70:	bd80      	pop	{r7, pc}

08016e72 <RegionNewChannelReq>:

uint8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8016e72:	b580      	push	{r7, lr}
 8016e74:	b082      	sub	sp, #8
 8016e76:	af00      	add	r7, sp, #0
 8016e78:	0002      	movs	r2, r0
 8016e7a:	6039      	str	r1, [r7, #0]
 8016e7c:	1dfb      	adds	r3, r7, #7
 8016e7e:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016e80:	1dfb      	adds	r3, r7, #7
 8016e82:	781b      	ldrb	r3, [r3, #0]
 8016e84:	2b05      	cmp	r3, #5
 8016e86:	d105      	bne.n	8016e94 <RegionNewChannelReq+0x22>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 8016e88:	683b      	ldr	r3, [r7, #0]
 8016e8a:	0018      	movs	r0, r3
 8016e8c:	f001 fff9 	bl	8018e82 <RegionEU868NewChannelReq>
 8016e90:	0003      	movs	r3, r0
 8016e92:	e000      	b.n	8016e96 <RegionNewChannelReq+0x24>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8016e94:	2300      	movs	r3, #0
        }
    }
}
 8016e96:	0018      	movs	r0, r3
 8016e98:	46bd      	mov	sp, r7
 8016e9a:	b002      	add	sp, #8
 8016e9c:	bd80      	pop	{r7, pc}

08016e9e <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8016e9e:	b580      	push	{r7, lr}
 8016ea0:	b082      	sub	sp, #8
 8016ea2:	af00      	add	r7, sp, #0
 8016ea4:	0002      	movs	r2, r0
 8016ea6:	6039      	str	r1, [r7, #0]
 8016ea8:	1dfb      	adds	r3, r7, #7
 8016eaa:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016eac:	1dfb      	adds	r3, r7, #7
 8016eae:	781b      	ldrb	r3, [r3, #0]
 8016eb0:	2b05      	cmp	r3, #5
 8016eb2:	d105      	bne.n	8016ec0 <RegionTxParamSetupReq+0x22>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 8016eb4:	683b      	ldr	r3, [r7, #0]
 8016eb6:	0018      	movs	r0, r3
 8016eb8:	f002 f84b 	bl	8018f52 <RegionEU868TxParamSetupReq>
 8016ebc:	0003      	movs	r3, r0
 8016ebe:	e000      	b.n	8016ec2 <RegionTxParamSetupReq+0x24>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8016ec0:	2300      	movs	r3, #0
        }
    }
}
 8016ec2:	0018      	movs	r0, r3
 8016ec4:	46bd      	mov	sp, r7
 8016ec6:	b002      	add	sp, #8
 8016ec8:	bd80      	pop	{r7, pc}

08016eca <RegionDlChannelReq>:

uint8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8016eca:	b580      	push	{r7, lr}
 8016ecc:	b082      	sub	sp, #8
 8016ece:	af00      	add	r7, sp, #0
 8016ed0:	0002      	movs	r2, r0
 8016ed2:	6039      	str	r1, [r7, #0]
 8016ed4:	1dfb      	adds	r3, r7, #7
 8016ed6:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016ed8:	1dfb      	adds	r3, r7, #7
 8016eda:	781b      	ldrb	r3, [r3, #0]
 8016edc:	2b05      	cmp	r3, #5
 8016ede:	d105      	bne.n	8016eec <RegionDlChannelReq+0x22>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8016ee0:	683b      	ldr	r3, [r7, #0]
 8016ee2:	0018      	movs	r0, r3
 8016ee4:	f002 f840 	bl	8018f68 <RegionEU868DlChannelReq>
 8016ee8:	0003      	movs	r3, r0
 8016eea:	e000      	b.n	8016eee <RegionDlChannelReq+0x24>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8016eec:	2300      	movs	r3, #0
        }
    }
}
 8016eee:	0018      	movs	r0, r3
 8016ef0:	46bd      	mov	sp, r7
 8016ef2:	b002      	add	sp, #8
 8016ef4:	bd80      	pop	{r7, pc}

08016ef6 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8016ef6:	b590      	push	{r4, r7, lr}
 8016ef8:	b083      	sub	sp, #12
 8016efa:	af00      	add	r7, sp, #0
 8016efc:	0004      	movs	r4, r0
 8016efe:	0008      	movs	r0, r1
 8016f00:	0011      	movs	r1, r2
 8016f02:	1dfb      	adds	r3, r7, #7
 8016f04:	1c22      	adds	r2, r4, #0
 8016f06:	701a      	strb	r2, [r3, #0]
 8016f08:	1dbb      	adds	r3, r7, #6
 8016f0a:	1c02      	adds	r2, r0, #0
 8016f0c:	701a      	strb	r2, [r3, #0]
 8016f0e:	1d7b      	adds	r3, r7, #5
 8016f10:	1c0a      	adds	r2, r1, #0
 8016f12:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016f14:	1dfb      	adds	r3, r7, #7
 8016f16:	781b      	ldrb	r3, [r3, #0]
 8016f18:	2b05      	cmp	r3, #5
 8016f1a:	d10a      	bne.n	8016f32 <RegionAlternateDr+0x3c>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8016f1c:	1d7b      	adds	r3, r7, #5
 8016f1e:	781a      	ldrb	r2, [r3, #0]
 8016f20:	1dbb      	adds	r3, r7, #6
 8016f22:	781b      	ldrb	r3, [r3, #0]
 8016f24:	b25b      	sxtb	r3, r3
 8016f26:	0011      	movs	r1, r2
 8016f28:	0018      	movs	r0, r3
 8016f2a:	f002 f86b 	bl	8019004 <RegionEU868AlternateDr>
 8016f2e:	0003      	movs	r3, r0
 8016f30:	e000      	b.n	8016f34 <RegionAlternateDr+0x3e>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8016f32:	2300      	movs	r3, #0
        }
    }
}
 8016f34:	0018      	movs	r0, r3
 8016f36:	46bd      	mov	sp, r7
 8016f38:	b003      	add	sp, #12
 8016f3a:	bd90      	pop	{r4, r7, pc}

08016f3c <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8016f3c:	b580      	push	{r7, lr}
 8016f3e:	b084      	sub	sp, #16
 8016f40:	af00      	add	r7, sp, #0
 8016f42:	60b9      	str	r1, [r7, #8]
 8016f44:	607a      	str	r2, [r7, #4]
 8016f46:	603b      	str	r3, [r7, #0]
 8016f48:	210f      	movs	r1, #15
 8016f4a:	187b      	adds	r3, r7, r1
 8016f4c:	1c02      	adds	r2, r0, #0
 8016f4e:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016f50:	187b      	adds	r3, r7, r1
 8016f52:	781b      	ldrb	r3, [r3, #0]
 8016f54:	2b05      	cmp	r3, #5
 8016f56:	d107      	bne.n	8016f68 <RegionNextChannel+0x2c>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 8016f58:	69bb      	ldr	r3, [r7, #24]
 8016f5a:	683a      	ldr	r2, [r7, #0]
 8016f5c:	6879      	ldr	r1, [r7, #4]
 8016f5e:	68b8      	ldr	r0, [r7, #8]
 8016f60:	f002 f860 	bl	8019024 <RegionEU868NextChannel>
 8016f64:	0003      	movs	r3, r0
 8016f66:	e000      	b.n	8016f6a <RegionNextChannel+0x2e>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8016f68:	2309      	movs	r3, #9
        }
    }
}
 8016f6a:	0018      	movs	r0, r3
 8016f6c:	46bd      	mov	sp, r7
 8016f6e:	b004      	add	sp, #16
 8016f70:	bd80      	pop	{r7, pc}

08016f72 <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 8016f72:	b580      	push	{r7, lr}
 8016f74:	b082      	sub	sp, #8
 8016f76:	af00      	add	r7, sp, #0
 8016f78:	0002      	movs	r2, r0
 8016f7a:	6039      	str	r1, [r7, #0]
 8016f7c:	1dfb      	adds	r3, r7, #7
 8016f7e:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016f80:	1dfb      	adds	r3, r7, #7
 8016f82:	781b      	ldrb	r3, [r3, #0]
 8016f84:	2b05      	cmp	r3, #5
 8016f86:	d104      	bne.n	8016f92 <RegionSetContinuousWave+0x20>
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 8016f88:	683b      	ldr	r3, [r7, #0]
 8016f8a:	0018      	movs	r0, r3
 8016f8c:	f002 f9f4 	bl	8019378 <RegionEU868SetContinuousWave>
 8016f90:	e000      	b.n	8016f94 <RegionSetContinuousWave+0x22>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 8016f92:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8016f94:	46c0      	nop			; (mov r8, r8)
 8016f96:	46bd      	mov	sp, r7
 8016f98:	b002      	add	sp, #8
 8016f9a:	bd80      	pop	{r7, pc}

08016f9c <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8016f9c:	b5b0      	push	{r4, r5, r7, lr}
 8016f9e:	b082      	sub	sp, #8
 8016fa0:	af00      	add	r7, sp, #0
 8016fa2:	0005      	movs	r5, r0
 8016fa4:	000c      	movs	r4, r1
 8016fa6:	0010      	movs	r0, r2
 8016fa8:	0019      	movs	r1, r3
 8016faa:	1dfb      	adds	r3, r7, #7
 8016fac:	1c2a      	adds	r2, r5, #0
 8016fae:	701a      	strb	r2, [r3, #0]
 8016fb0:	1dbb      	adds	r3, r7, #6
 8016fb2:	1c22      	adds	r2, r4, #0
 8016fb4:	701a      	strb	r2, [r3, #0]
 8016fb6:	1d7b      	adds	r3, r7, #5
 8016fb8:	1c02      	adds	r2, r0, #0
 8016fba:	701a      	strb	r2, [r3, #0]
 8016fbc:	1d3b      	adds	r3, r7, #4
 8016fbe:	1c0a      	adds	r2, r1, #0
 8016fc0:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016fc2:	1dfb      	adds	r3, r7, #7
 8016fc4:	781b      	ldrb	r3, [r3, #0]
 8016fc6:	2b05      	cmp	r3, #5
 8016fc8:	d10c      	bne.n	8016fe4 <RegionApplyDrOffset+0x48>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 8016fca:	1d3b      	adds	r3, r7, #4
 8016fcc:	2200      	movs	r2, #0
 8016fce:	569a      	ldrsb	r2, [r3, r2]
 8016fd0:	1d7b      	adds	r3, r7, #5
 8016fd2:	2100      	movs	r1, #0
 8016fd4:	5659      	ldrsb	r1, [r3, r1]
 8016fd6:	1dbb      	adds	r3, r7, #6
 8016fd8:	781b      	ldrb	r3, [r3, #0]
 8016fda:	0018      	movs	r0, r3
 8016fdc:	f002 fa24 	bl	8019428 <RegionEU868ApplyDrOffset>
 8016fe0:	0003      	movs	r3, r0
 8016fe2:	e001      	b.n	8016fe8 <RegionApplyDrOffset+0x4c>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8016fe4:	1d7b      	adds	r3, r7, #5
 8016fe6:	781b      	ldrb	r3, [r3, #0]
        }
    }
}
 8016fe8:	0018      	movs	r0, r3
 8016fea:	46bd      	mov	sp, r7
 8016fec:	b002      	add	sp, #8
 8016fee:	bdb0      	pop	{r4, r5, r7, pc}

08016ff0 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8016ff0:	b580      	push	{r7, lr}
 8016ff2:	b082      	sub	sp, #8
 8016ff4:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8016ff6:	4b03      	ldr	r3, [pc, #12]	; (8017004 <RegionGetVersion+0x14>)
 8016ff8:	607b      	str	r3, [r7, #4]

    return version;
 8016ffa:	687b      	ldr	r3, [r7, #4]
}
 8016ffc:	0018      	movs	r0, r3
 8016ffe:	46bd      	mov	sp, r7
 8017000:	b002      	add	sp, #8
 8017002:	bd80      	pop	{r7, pc}
 8017004:	01000300 	.word	0x01000300

08017008 <GetDutyCycle>:
 */
#define DUTY_CYCLE_TIME_PERIOD              3600000
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8017008:	b5f0      	push	{r4, r5, r6, r7, lr}
 801700a:	b087      	sub	sp, #28
 801700c:	af00      	add	r7, sp, #0
 801700e:	60f8      	str	r0, [r7, #12]
 8017010:	0008      	movs	r0, r1
 8017012:	0039      	movs	r1, r7
 8017014:	600a      	str	r2, [r1, #0]
 8017016:	604b      	str	r3, [r1, #4]
 8017018:	230b      	movs	r3, #11
 801701a:	18fb      	adds	r3, r7, r3
 801701c:	1c02      	adds	r2, r0, #0
 801701e:	701a      	strb	r2, [r3, #0]
    uint16_t joinDutyCycle = RegionCommonGetJoinDc( elapsedTimeSinceStartup );
 8017020:	2514      	movs	r5, #20
 8017022:	197c      	adds	r4, r7, r5
 8017024:	003b      	movs	r3, r7
 8017026:	6818      	ldr	r0, [r3, #0]
 8017028:	6859      	ldr	r1, [r3, #4]
 801702a:	f000 f91b 	bl	8017264 <RegionCommonGetJoinDc>
 801702e:	0003      	movs	r3, r0
 8017030:	8023      	strh	r3, [r4, #0]
    uint16_t dutyCycle = band->DCycle;
 8017032:	2616      	movs	r6, #22
 8017034:	19bb      	adds	r3, r7, r6
 8017036:	68fa      	ldr	r2, [r7, #12]
 8017038:	8812      	ldrh	r2, [r2, #0]
 801703a:	801a      	strh	r2, [r3, #0]

    if( joined == false )
 801703c:	230b      	movs	r3, #11
 801703e:	18fb      	adds	r3, r7, r3
 8017040:	781b      	ldrb	r3, [r3, #0]
 8017042:	2201      	movs	r2, #1
 8017044:	4053      	eors	r3, r2
 8017046:	b2db      	uxtb	r3, r3
 8017048:	2b00      	cmp	r3, #0
 801704a:	d012      	beq.n	8017072 <GetDutyCycle+0x6a>
    {
        // Get the join duty cycle which depends on the runtime
        joinDutyCycle = RegionCommonGetJoinDc( elapsedTimeSinceStartup );
 801704c:	197c      	adds	r4, r7, r5
 801704e:	003b      	movs	r3, r7
 8017050:	6818      	ldr	r0, [r3, #0]
 8017052:	6859      	ldr	r1, [r3, #4]
 8017054:	f000 f906 	bl	8017264 <RegionCommonGetJoinDc>
 8017058:	0003      	movs	r3, r0
 801705a:	8023      	strh	r3, [r4, #0]
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 801705c:	19ba      	adds	r2, r7, r6
 801705e:	197b      	adds	r3, r7, r5
 8017060:	19b9      	adds	r1, r7, r6
 8017062:	880c      	ldrh	r4, [r1, #0]
 8017064:	881b      	ldrh	r3, [r3, #0]
 8017066:	b298      	uxth	r0, r3
 8017068:	b2a1      	uxth	r1, r4
 801706a:	4288      	cmp	r0, r1
 801706c:	d200      	bcs.n	8017070 <GetDutyCycle+0x68>
 801706e:	1c23      	adds	r3, r4, #0
 8017070:	8013      	strh	r3, [r2, #0]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8017072:	2216      	movs	r2, #22
 8017074:	18bb      	adds	r3, r7, r2
 8017076:	881b      	ldrh	r3, [r3, #0]
 8017078:	2b00      	cmp	r3, #0
 801707a:	d102      	bne.n	8017082 <GetDutyCycle+0x7a>
    {
        dutyCycle = 1;
 801707c:	18bb      	adds	r3, r7, r2
 801707e:	2201      	movs	r2, #1
 8017080:	801a      	strh	r2, [r3, #0]
    }

    return dutyCycle;
 8017082:	2316      	movs	r3, #22
 8017084:	18fb      	adds	r3, r7, r3
 8017086:	881b      	ldrh	r3, [r3, #0]
}
 8017088:	0018      	movs	r0, r3
 801708a:	46bd      	mov	sp, r7
 801708c:	b007      	add	sp, #28
 801708e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017090 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8017090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017092:	b087      	sub	sp, #28
 8017094:	af00      	add	r7, sp, #0
 8017096:	60f8      	str	r0, [r7, #12]
 8017098:	0008      	movs	r0, r1
 801709a:	0039      	movs	r1, r7
 801709c:	600a      	str	r2, [r1, #0]
 801709e:	604b      	str	r3, [r1, #4]
 80170a0:	210b      	movs	r1, #11
 80170a2:	187b      	adds	r3, r7, r1
 80170a4:	1c02      	adds	r2, r0, #0
 80170a6:	701a      	strb	r2, [r3, #0]
    uint16_t dutyCycle = band->DCycle;
 80170a8:	2614      	movs	r6, #20
 80170aa:	19bb      	adds	r3, r7, r6
 80170ac:	68fa      	ldr	r2, [r7, #12]
 80170ae:	8812      	ldrh	r2, [r2, #0]
 80170b0:	801a      	strh	r2, [r3, #0]
    uint8_t timePeriodFactor = 1;
 80170b2:	2317      	movs	r3, #23
 80170b4:	18fb      	adds	r3, r7, r3
 80170b6:	2201      	movs	r2, #1
 80170b8:	701a      	strb	r2, [r3, #0]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80170ba:	19bc      	adds	r4, r7, r6
 80170bc:	003b      	movs	r3, r7
 80170be:	000d      	movs	r5, r1
 80170c0:	187a      	adds	r2, r7, r1
 80170c2:	7811      	ldrb	r1, [r2, #0]
 80170c4:	68f8      	ldr	r0, [r7, #12]
 80170c6:	681a      	ldr	r2, [r3, #0]
 80170c8:	685b      	ldr	r3, [r3, #4]
 80170ca:	f7ff ff9d 	bl	8017008 <GetDutyCycle>
 80170ce:	0003      	movs	r3, r0
 80170d0:	8023      	strh	r3, [r4, #0]

    if( joined == false )
 80170d2:	197b      	adds	r3, r7, r5
 80170d4:	781b      	ldrb	r3, [r3, #0]
 80170d6:	2201      	movs	r2, #1
 80170d8:	4053      	eors	r3, r2
 80170da:	b2db      	uxtb	r3, r3
 80170dc:	2b00      	cmp	r3, #0
 80170de:	d00a      	beq.n	80170f6 <SetMaxTimeCredits+0x66>
    {
        // Apply a factor to increase the maximum time period of observation
        timePeriodFactor = dutyCycle / BACKOFF_DC_TIMER_PERIOD_FACTOR;
 80170e0:	19bb      	adds	r3, r7, r6
 80170e2:	881b      	ldrh	r3, [r3, #0]
 80170e4:	2164      	movs	r1, #100	; 0x64
 80170e6:	0018      	movs	r0, r3
 80170e8:	f7e9 f816 	bl	8000118 <__udivsi3>
 80170ec:	0003      	movs	r3, r0
 80170ee:	b29a      	uxth	r2, r3
 80170f0:	2317      	movs	r3, #23
 80170f2:	18fb      	adds	r3, r7, r3
 80170f4:	701a      	strb	r2, [r3, #0]
    }

    // Setup the maximum allowed credits
    band->MaxTimeCredits = DUTY_CYCLE_TIME_PERIOD * timePeriodFactor;
 80170f6:	2317      	movs	r3, #23
 80170f8:	18fb      	adds	r3, r7, r3
 80170fa:	781b      	ldrb	r3, [r3, #0]
 80170fc:	4a09      	ldr	r2, [pc, #36]	; (8017124 <SetMaxTimeCredits+0x94>)
 80170fe:	4353      	muls	r3, r2
 8017100:	001a      	movs	r2, r3
 8017102:	68fb      	ldr	r3, [r7, #12]
 8017104:	60da      	str	r2, [r3, #12]

    // In case if it is the first time, update also the current
    // time credits
    if( band->LastBandUpdateTime == 0 )
 8017106:	68fb      	ldr	r3, [r7, #12]
 8017108:	685b      	ldr	r3, [r3, #4]
 801710a:	2b00      	cmp	r3, #0
 801710c:	d103      	bne.n	8017116 <SetMaxTimeCredits+0x86>
    {
        band->TimeCredits = band->MaxTimeCredits;
 801710e:	68fb      	ldr	r3, [r7, #12]
 8017110:	68da      	ldr	r2, [r3, #12]
 8017112:	68fb      	ldr	r3, [r7, #12]
 8017114:	609a      	str	r2, [r3, #8]
    }

    return dutyCycle;
 8017116:	2314      	movs	r3, #20
 8017118:	18fb      	adds	r3, r7, r3
 801711a:	881b      	ldrh	r3, [r3, #0]
}
 801711c:	0018      	movs	r0, r3
 801711e:	46bd      	mov	sp, r7
 8017120:	b007      	add	sp, #28
 8017122:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017124:	0036ee80 	.word	0x0036ee80

08017128 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8017128:	b590      	push	{r4, r7, lr}
 801712a:	b085      	sub	sp, #20
 801712c:	af00      	add	r7, sp, #0
 801712e:	6078      	str	r0, [r7, #4]
 8017130:	000c      	movs	r4, r1
 8017132:	0010      	movs	r0, r2
 8017134:	0019      	movs	r1, r3
 8017136:	1cfb      	adds	r3, r7, #3
 8017138:	1c22      	adds	r2, r4, #0
 801713a:	701a      	strb	r2, [r3, #0]
 801713c:	1cbb      	adds	r3, r7, #2
 801713e:	1c02      	adds	r2, r0, #0
 8017140:	701a      	strb	r2, [r3, #0]
 8017142:	1c7b      	adds	r3, r7, #1
 8017144:	1c0a      	adds	r2, r1, #0
 8017146:	701a      	strb	r2, [r3, #0]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup );
 8017148:	230e      	movs	r3, #14
 801714a:	18fc      	adds	r4, r7, r3
 801714c:	2320      	movs	r3, #32
 801714e:	18fb      	adds	r3, r7, r3
 8017150:	1cfa      	adds	r2, r7, #3
 8017152:	7811      	ldrb	r1, [r2, #0]
 8017154:	6878      	ldr	r0, [r7, #4]
 8017156:	681a      	ldr	r2, [r3, #0]
 8017158:	685b      	ldr	r3, [r3, #4]
 801715a:	f7ff ff99 	bl	8017090 <SetMaxTimeCredits>
 801715e:	0003      	movs	r3, r0
 8017160:	8023      	strh	r3, [r4, #0]

    if( joined == false )
 8017162:	1cfb      	adds	r3, r7, #3
 8017164:	781b      	ldrb	r3, [r3, #0]
 8017166:	2201      	movs	r2, #1
 8017168:	4053      	eors	r3, r2
 801716a:	b2db      	uxtb	r3, r3
 801716c:	2b00      	cmp	r3, #0
 801716e:	d012      	beq.n	8017196 <UpdateTimeCredits+0x6e>
    {
        if( ( dutyCycleEnabled == false ) &&
 8017170:	1cbb      	adds	r3, r7, #2
 8017172:	781b      	ldrb	r3, [r3, #0]
 8017174:	2201      	movs	r2, #1
 8017176:	4053      	eors	r3, r2
 8017178:	b2db      	uxtb	r3, r3
 801717a:	2b00      	cmp	r3, #0
 801717c:	d016      	beq.n	80171ac <UpdateTimeCredits+0x84>
            ( lastTxIsJoinRequest == false ) )
 801717e:	1c7b      	adds	r3, r7, #1
 8017180:	781b      	ldrb	r3, [r3, #0]
 8017182:	2201      	movs	r2, #1
 8017184:	4053      	eors	r3, r2
 8017186:	b2db      	uxtb	r3, r3
        if( ( dutyCycleEnabled == false ) &&
 8017188:	2b00      	cmp	r3, #0
 801718a:	d00f      	beq.n	80171ac <UpdateTimeCredits+0x84>
        {
            // This is the case when the duty cycle is off and the last uplink frame was not a join.
            // This could happen in case of a rejoin, e.g. in compliance test mode.
            // In this special case we have to set the time off to 0, since the join duty cycle shall only
            // be applied after the first join request.
            band->TimeCredits = band->MaxTimeCredits;
 801718c:	687b      	ldr	r3, [r7, #4]
 801718e:	68da      	ldr	r2, [r3, #12]
 8017190:	687b      	ldr	r3, [r7, #4]
 8017192:	609a      	str	r2, [r3, #8]
 8017194:	e00a      	b.n	80171ac <UpdateTimeCredits+0x84>
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 8017196:	1cbb      	adds	r3, r7, #2
 8017198:	781b      	ldrb	r3, [r3, #0]
 801719a:	2201      	movs	r2, #1
 801719c:	4053      	eors	r3, r2
 801719e:	b2db      	uxtb	r3, r3
 80171a0:	2b00      	cmp	r3, #0
 80171a2:	d003      	beq.n	80171ac <UpdateTimeCredits+0x84>
        {
            band->TimeCredits = band->MaxTimeCredits;
 80171a4:	687b      	ldr	r3, [r7, #4]
 80171a6:	68da      	ldr	r2, [r3, #12]
 80171a8:	687b      	ldr	r3, [r7, #4]
 80171aa:	609a      	str	r2, [r3, #8]
        }
    }

    // Get the difference between now and the last update
    band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 80171ac:	687b      	ldr	r3, [r7, #4]
 80171ae:	685b      	ldr	r3, [r3, #4]
 80171b0:	0018      	movs	r0, r3
 80171b2:	f005 fe9d 	bl	801cef0 <UTIL_TIMER_GetElapsedTime>
 80171b6:	0002      	movs	r2, r0
 80171b8:	687b      	ldr	r3, [r7, #4]
 80171ba:	689b      	ldr	r3, [r3, #8]
 80171bc:	18d2      	adds	r2, r2, r3
 80171be:	687b      	ldr	r3, [r7, #4]
 80171c0:	609a      	str	r2, [r3, #8]

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 80171c2:	687b      	ldr	r3, [r7, #4]
 80171c4:	689a      	ldr	r2, [r3, #8]
 80171c6:	687b      	ldr	r3, [r7, #4]
 80171c8:	68db      	ldr	r3, [r3, #12]
 80171ca:	429a      	cmp	r2, r3
 80171cc:	d903      	bls.n	80171d6 <UpdateTimeCredits+0xae>
    {
        band->TimeCredits = band->MaxTimeCredits;
 80171ce:	687b      	ldr	r3, [r7, #4]
 80171d0:	68da      	ldr	r2, [r3, #12]
 80171d2:	687b      	ldr	r3, [r7, #4]
 80171d4:	609a      	str	r2, [r3, #8]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 80171d6:	687b      	ldr	r3, [r7, #4]
 80171d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80171da:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 80171dc:	230e      	movs	r3, #14
 80171de:	18fb      	adds	r3, r7, r3
 80171e0:	881b      	ldrh	r3, [r3, #0]
}
 80171e2:	0018      	movs	r0, r3
 80171e4:	46bd      	mov	sp, r7
 80171e6:	b005      	add	sp, #20
 80171e8:	bd90      	pop	{r4, r7, pc}

080171ea <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 80171ea:	b580      	push	{r7, lr}
 80171ec:	b084      	sub	sp, #16
 80171ee:	af00      	add	r7, sp, #0
 80171f0:	0002      	movs	r2, r0
 80171f2:	1dbb      	adds	r3, r7, #6
 80171f4:	801a      	strh	r2, [r3, #0]
 80171f6:	1d7b      	adds	r3, r7, #5
 80171f8:	1c0a      	adds	r2, r1, #0
 80171fa:	701a      	strb	r2, [r3, #0]
    uint8_t nbActiveBits = 0;
 80171fc:	230f      	movs	r3, #15
 80171fe:	18fb      	adds	r3, r7, r3
 8017200:	2200      	movs	r2, #0
 8017202:	701a      	strb	r2, [r3, #0]

    for( uint8_t j = 0; j < nbBits; j++ )
 8017204:	230e      	movs	r3, #14
 8017206:	18fb      	adds	r3, r7, r3
 8017208:	2200      	movs	r2, #0
 801720a:	701a      	strb	r2, [r3, #0]
 801720c:	e01b      	b.n	8017246 <CountChannels+0x5c>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 801720e:	1dbb      	adds	r3, r7, #6
 8017210:	881b      	ldrh	r3, [r3, #0]
 8017212:	200e      	movs	r0, #14
 8017214:	183a      	adds	r2, r7, r0
 8017216:	7812      	ldrb	r2, [r2, #0]
 8017218:	2101      	movs	r1, #1
 801721a:	4091      	lsls	r1, r2
 801721c:	000a      	movs	r2, r1
 801721e:	401a      	ands	r2, r3
 8017220:	183b      	adds	r3, r7, r0
 8017222:	781b      	ldrb	r3, [r3, #0]
 8017224:	2101      	movs	r1, #1
 8017226:	4099      	lsls	r1, r3
 8017228:	000b      	movs	r3, r1
 801722a:	429a      	cmp	r2, r3
 801722c:	d105      	bne.n	801723a <CountChannels+0x50>
        {
            nbActiveBits++;
 801722e:	210f      	movs	r1, #15
 8017230:	187b      	adds	r3, r7, r1
 8017232:	781a      	ldrb	r2, [r3, #0]
 8017234:	187b      	adds	r3, r7, r1
 8017236:	3201      	adds	r2, #1
 8017238:	701a      	strb	r2, [r3, #0]
    for( uint8_t j = 0; j < nbBits; j++ )
 801723a:	210e      	movs	r1, #14
 801723c:	187b      	adds	r3, r7, r1
 801723e:	781a      	ldrb	r2, [r3, #0]
 8017240:	187b      	adds	r3, r7, r1
 8017242:	3201      	adds	r2, #1
 8017244:	701a      	strb	r2, [r3, #0]
 8017246:	230e      	movs	r3, #14
 8017248:	18fa      	adds	r2, r7, r3
 801724a:	1d7b      	adds	r3, r7, #5
 801724c:	7812      	ldrb	r2, [r2, #0]
 801724e:	781b      	ldrb	r3, [r3, #0]
 8017250:	429a      	cmp	r2, r3
 8017252:	d3dc      	bcc.n	801720e <CountChannels+0x24>
        }
    }
    return nbActiveBits;
 8017254:	230f      	movs	r3, #15
 8017256:	18fb      	adds	r3, r7, r3
 8017258:	781b      	ldrb	r3, [r3, #0]
}
 801725a:	0018      	movs	r0, r3
 801725c:	46bd      	mov	sp, r7
 801725e:	b004      	add	sp, #16
 8017260:	bd80      	pop	{r7, pc}
	...

08017264 <RegionCommonGetJoinDc>:

uint16_t RegionCommonGetJoinDc( SysTime_t elapsedTime )
{
 8017264:	b580      	push	{r7, lr}
 8017266:	b084      	sub	sp, #16
 8017268:	af00      	add	r7, sp, #0
 801726a:	003b      	movs	r3, r7
 801726c:	6018      	str	r0, [r3, #0]
 801726e:	6059      	str	r1, [r3, #4]
    uint16_t dutyCycle = 0;
 8017270:	210e      	movs	r1, #14
 8017272:	187b      	adds	r3, r7, r1
 8017274:	2200      	movs	r2, #0
 8017276:	801a      	strh	r2, [r3, #0]

    if( elapsedTime.Seconds < 3600 )
 8017278:	003b      	movs	r3, r7
 801727a:	681a      	ldr	r2, [r3, #0]
 801727c:	23e1      	movs	r3, #225	; 0xe1
 801727e:	011b      	lsls	r3, r3, #4
 8017280:	429a      	cmp	r2, r3
 8017282:	d203      	bcs.n	801728c <RegionCommonGetJoinDc+0x28>
    {
        dutyCycle = BACKOFF_DC_1_HOUR;
 8017284:	187b      	adds	r3, r7, r1
 8017286:	2264      	movs	r2, #100	; 0x64
 8017288:	801a      	strh	r2, [r3, #0]
 801728a:	e00e      	b.n	80172aa <RegionCommonGetJoinDc+0x46>
    }
    else if( elapsedTime.Seconds < ( 3600 + 36000 ) )
 801728c:	003b      	movs	r3, r7
 801728e:	681b      	ldr	r3, [r3, #0]
 8017290:	4a09      	ldr	r2, [pc, #36]	; (80172b8 <RegionCommonGetJoinDc+0x54>)
 8017292:	4293      	cmp	r3, r2
 8017294:	d805      	bhi.n	80172a2 <RegionCommonGetJoinDc+0x3e>
    {
        dutyCycle = BACKOFF_DC_10_HOURS;
 8017296:	230e      	movs	r3, #14
 8017298:	18fb      	adds	r3, r7, r3
 801729a:	22fa      	movs	r2, #250	; 0xfa
 801729c:	0092      	lsls	r2, r2, #2
 801729e:	801a      	strh	r2, [r3, #0]
 80172a0:	e003      	b.n	80172aa <RegionCommonGetJoinDc+0x46>
    }
    else
    {
        dutyCycle = BACKOFF_DC_24_HOURS;
 80172a2:	230e      	movs	r3, #14
 80172a4:	18fb      	adds	r3, r7, r3
 80172a6:	4a05      	ldr	r2, [pc, #20]	; (80172bc <RegionCommonGetJoinDc+0x58>)
 80172a8:	801a      	strh	r2, [r3, #0]
    }
    return dutyCycle;
 80172aa:	230e      	movs	r3, #14
 80172ac:	18fb      	adds	r3, r7, r3
 80172ae:	881b      	ldrh	r3, [r3, #0]
}
 80172b0:	0018      	movs	r0, r3
 80172b2:	46bd      	mov	sp, r7
 80172b4:	b004      	add	sp, #16
 80172b6:	bd80      	pop	{r7, pc}
 80172b8:	00009aaf 	.word	0x00009aaf
 80172bc:	00002710 	.word	0x00002710

080172c0 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 80172c0:	b590      	push	{r4, r7, lr}
 80172c2:	b085      	sub	sp, #20
 80172c4:	af00      	add	r7, sp, #0
 80172c6:	0004      	movs	r4, r0
 80172c8:	6039      	str	r1, [r7, #0]
 80172ca:	0010      	movs	r0, r2
 80172cc:	0019      	movs	r1, r3
 80172ce:	1dfb      	adds	r3, r7, #7
 80172d0:	1c22      	adds	r2, r4, #0
 80172d2:	701a      	strb	r2, [r3, #0]
 80172d4:	1dbb      	adds	r3, r7, #6
 80172d6:	1c02      	adds	r2, r0, #0
 80172d8:	701a      	strb	r2, [r3, #0]
 80172da:	1d7b      	adds	r3, r7, #5
 80172dc:	1c0a      	adds	r2, r1, #0
 80172de:	701a      	strb	r2, [r3, #0]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 80172e0:	2320      	movs	r3, #32
 80172e2:	18fb      	adds	r3, r7, r3
 80172e4:	2200      	movs	r2, #0
 80172e6:	569a      	ldrsb	r2, [r3, r2]
 80172e8:	1d7b      	adds	r3, r7, #5
 80172ea:	2100      	movs	r1, #0
 80172ec:	5659      	ldrsb	r1, [r3, r1]
 80172ee:	1dbb      	adds	r3, r7, #6
 80172f0:	781b      	ldrb	r3, [r3, #0]
 80172f2:	b25b      	sxtb	r3, r3
 80172f4:	0018      	movs	r0, r3
 80172f6:	f000 f87c 	bl	80173f2 <RegionCommonValueInRange>
 80172fa:	1e03      	subs	r3, r0, #0
 80172fc:	d101      	bne.n	8017302 <RegionCommonChanVerifyDr+0x42>
    {
        return false;
 80172fe:	2300      	movs	r3, #0
 8017300:	e073      	b.n	80173ea <RegionCommonChanVerifyDr+0x12a>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8017302:	230f      	movs	r3, #15
 8017304:	18fb      	adds	r3, r7, r3
 8017306:	2200      	movs	r2, #0
 8017308:	701a      	strb	r2, [r3, #0]
 801730a:	230e      	movs	r3, #14
 801730c:	18fb      	adds	r3, r7, r3
 801730e:	2200      	movs	r2, #0
 8017310:	701a      	strb	r2, [r3, #0]
 8017312:	e062      	b.n	80173da <RegionCommonChanVerifyDr+0x11a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8017314:	230d      	movs	r3, #13
 8017316:	18fb      	adds	r3, r7, r3
 8017318:	2200      	movs	r2, #0
 801731a:	701a      	strb	r2, [r3, #0]
 801731c:	e04c      	b.n	80173b8 <RegionCommonChanVerifyDr+0xf8>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 801731e:	230e      	movs	r3, #14
 8017320:	18fb      	adds	r3, r7, r3
 8017322:	781b      	ldrb	r3, [r3, #0]
 8017324:	005b      	lsls	r3, r3, #1
 8017326:	683a      	ldr	r2, [r7, #0]
 8017328:	18d3      	adds	r3, r2, r3
 801732a:	881b      	ldrh	r3, [r3, #0]
 801732c:	001a      	movs	r2, r3
 801732e:	200d      	movs	r0, #13
 8017330:	183b      	adds	r3, r7, r0
 8017332:	781b      	ldrb	r3, [r3, #0]
 8017334:	411a      	asrs	r2, r3
 8017336:	0013      	movs	r3, r2
 8017338:	2201      	movs	r2, #1
 801733a:	4013      	ands	r3, r2
 801733c:	d036      	beq.n	80173ac <RegionCommonChanVerifyDr+0xec>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 801733e:	240f      	movs	r4, #15
 8017340:	193b      	adds	r3, r7, r4
 8017342:	781a      	ldrb	r2, [r3, #0]
 8017344:	183b      	adds	r3, r7, r0
 8017346:	781b      	ldrb	r3, [r3, #0]
 8017348:	18d3      	adds	r3, r2, r3
 801734a:	001a      	movs	r2, r3
 801734c:	0013      	movs	r3, r2
 801734e:	005b      	lsls	r3, r3, #1
 8017350:	189b      	adds	r3, r3, r2
 8017352:	009b      	lsls	r3, r3, #2
 8017354:	001a      	movs	r2, r3
 8017356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017358:	189b      	adds	r3, r3, r2
 801735a:	7a1b      	ldrb	r3, [r3, #8]
 801735c:	011b      	lsls	r3, r3, #4
 801735e:	b25b      	sxtb	r3, r3
 8017360:	111b      	asrs	r3, r3, #4
 8017362:	b25b      	sxtb	r3, r3
 8017364:	001a      	movs	r2, r3
 8017366:	230f      	movs	r3, #15
 8017368:	4013      	ands	r3, r2
 801736a:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 801736c:	193b      	adds	r3, r7, r4
 801736e:	781a      	ldrb	r2, [r3, #0]
 8017370:	183b      	adds	r3, r7, r0
 8017372:	781b      	ldrb	r3, [r3, #0]
 8017374:	18d3      	adds	r3, r2, r3
 8017376:	001a      	movs	r2, r3
 8017378:	0013      	movs	r3, r2
 801737a:	005b      	lsls	r3, r3, #1
 801737c:	189b      	adds	r3, r3, r2
 801737e:	009b      	lsls	r3, r3, #2
 8017380:	001a      	movs	r2, r3
 8017382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017384:	189b      	adds	r3, r3, r2
 8017386:	7a1b      	ldrb	r3, [r3, #8]
 8017388:	b25b      	sxtb	r3, r3
 801738a:	111b      	asrs	r3, r3, #4
 801738c:	b25b      	sxtb	r3, r3
 801738e:	001a      	movs	r2, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8017390:	230f      	movs	r3, #15
 8017392:	4013      	ands	r3, r2
 8017394:	b25a      	sxtb	r2, r3
 8017396:	1dbb      	adds	r3, r7, #6
 8017398:	781b      	ldrb	r3, [r3, #0]
 801739a:	b25b      	sxtb	r3, r3
 801739c:	0018      	movs	r0, r3
 801739e:	f000 f828 	bl	80173f2 <RegionCommonValueInRange>
 80173a2:	0003      	movs	r3, r0
 80173a4:	2b01      	cmp	r3, #1
 80173a6:	d101      	bne.n	80173ac <RegionCommonChanVerifyDr+0xec>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 80173a8:	2301      	movs	r3, #1
 80173aa:	e01e      	b.n	80173ea <RegionCommonChanVerifyDr+0x12a>
        for( uint8_t j = 0; j < 16; j++ )
 80173ac:	210d      	movs	r1, #13
 80173ae:	187b      	adds	r3, r7, r1
 80173b0:	781a      	ldrb	r2, [r3, #0]
 80173b2:	187b      	adds	r3, r7, r1
 80173b4:	3201      	adds	r2, #1
 80173b6:	701a      	strb	r2, [r3, #0]
 80173b8:	230d      	movs	r3, #13
 80173ba:	18fb      	adds	r3, r7, r3
 80173bc:	781b      	ldrb	r3, [r3, #0]
 80173be:	2b0f      	cmp	r3, #15
 80173c0:	d9ad      	bls.n	801731e <RegionCommonChanVerifyDr+0x5e>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80173c2:	220f      	movs	r2, #15
 80173c4:	18bb      	adds	r3, r7, r2
 80173c6:	18ba      	adds	r2, r7, r2
 80173c8:	7812      	ldrb	r2, [r2, #0]
 80173ca:	3210      	adds	r2, #16
 80173cc:	701a      	strb	r2, [r3, #0]
 80173ce:	210e      	movs	r1, #14
 80173d0:	187b      	adds	r3, r7, r1
 80173d2:	781a      	ldrb	r2, [r3, #0]
 80173d4:	187b      	adds	r3, r7, r1
 80173d6:	3201      	adds	r2, #1
 80173d8:	701a      	strb	r2, [r3, #0]
 80173da:	230f      	movs	r3, #15
 80173dc:	18fa      	adds	r2, r7, r3
 80173de:	1dfb      	adds	r3, r7, #7
 80173e0:	7812      	ldrb	r2, [r2, #0]
 80173e2:	781b      	ldrb	r3, [r3, #0]
 80173e4:	429a      	cmp	r2, r3
 80173e6:	d395      	bcc.n	8017314 <RegionCommonChanVerifyDr+0x54>
                }
            }
        }
    }
    return false;
 80173e8:	2300      	movs	r3, #0
}
 80173ea:	0018      	movs	r0, r3
 80173ec:	46bd      	mov	sp, r7
 80173ee:	b005      	add	sp, #20
 80173f0:	bd90      	pop	{r4, r7, pc}

080173f2 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 80173f2:	b590      	push	{r4, r7, lr}
 80173f4:	b083      	sub	sp, #12
 80173f6:	af00      	add	r7, sp, #0
 80173f8:	0004      	movs	r4, r0
 80173fa:	0008      	movs	r0, r1
 80173fc:	0011      	movs	r1, r2
 80173fe:	1dfb      	adds	r3, r7, #7
 8017400:	1c22      	adds	r2, r4, #0
 8017402:	701a      	strb	r2, [r3, #0]
 8017404:	1dbb      	adds	r3, r7, #6
 8017406:	1c02      	adds	r2, r0, #0
 8017408:	701a      	strb	r2, [r3, #0]
 801740a:	1d7b      	adds	r3, r7, #5
 801740c:	1c0a      	adds	r2, r1, #0
 801740e:	701a      	strb	r2, [r3, #0]
    if( ( value >= min ) && ( value <= max ) )
 8017410:	1dfa      	adds	r2, r7, #7
 8017412:	1dbb      	adds	r3, r7, #6
 8017414:	7812      	ldrb	r2, [r2, #0]
 8017416:	b252      	sxtb	r2, r2
 8017418:	781b      	ldrb	r3, [r3, #0]
 801741a:	b25b      	sxtb	r3, r3
 801741c:	429a      	cmp	r2, r3
 801741e:	db09      	blt.n	8017434 <RegionCommonValueInRange+0x42>
 8017420:	1dfa      	adds	r2, r7, #7
 8017422:	1d7b      	adds	r3, r7, #5
 8017424:	7812      	ldrb	r2, [r2, #0]
 8017426:	b252      	sxtb	r2, r2
 8017428:	781b      	ldrb	r3, [r3, #0]
 801742a:	b25b      	sxtb	r3, r3
 801742c:	429a      	cmp	r2, r3
 801742e:	dc01      	bgt.n	8017434 <RegionCommonValueInRange+0x42>
    {
        return 1;
 8017430:	2301      	movs	r3, #1
 8017432:	e000      	b.n	8017436 <RegionCommonValueInRange+0x44>
    }
    return 0;
 8017434:	2300      	movs	r3, #0
}
 8017436:	0018      	movs	r0, r3
 8017438:	46bd      	mov	sp, r7
 801743a:	b003      	add	sp, #12
 801743c:	bd90      	pop	{r4, r7, pc}

0801743e <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 801743e:	b580      	push	{r7, lr}
 8017440:	b084      	sub	sp, #16
 8017442:	af00      	add	r7, sp, #0
 8017444:	6078      	str	r0, [r7, #4]
 8017446:	0008      	movs	r0, r1
 8017448:	0011      	movs	r1, r2
 801744a:	1cfb      	adds	r3, r7, #3
 801744c:	1c02      	adds	r2, r0, #0
 801744e:	701a      	strb	r2, [r3, #0]
 8017450:	1cbb      	adds	r3, r7, #2
 8017452:	1c0a      	adds	r2, r1, #0
 8017454:	701a      	strb	r2, [r3, #0]
    uint8_t index = id / 16;
 8017456:	210f      	movs	r1, #15
 8017458:	187b      	adds	r3, r7, r1
 801745a:	1cfa      	adds	r2, r7, #3
 801745c:	7812      	ldrb	r2, [r2, #0]
 801745e:	0912      	lsrs	r2, r2, #4
 8017460:	701a      	strb	r2, [r3, #0]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8017462:	1cbb      	adds	r3, r7, #2
 8017464:	781b      	ldrb	r3, [r3, #0]
 8017466:	091b      	lsrs	r3, r3, #4
 8017468:	b2db      	uxtb	r3, r3
 801746a:	187a      	adds	r2, r7, r1
 801746c:	7812      	ldrb	r2, [r2, #0]
 801746e:	429a      	cmp	r2, r3
 8017470:	d805      	bhi.n	801747e <RegionCommonChanDisable+0x40>
 8017472:	1cfa      	adds	r2, r7, #3
 8017474:	1cbb      	adds	r3, r7, #2
 8017476:	7812      	ldrb	r2, [r2, #0]
 8017478:	781b      	ldrb	r3, [r3, #0]
 801747a:	429a      	cmp	r2, r3
 801747c:	d301      	bcc.n	8017482 <RegionCommonChanDisable+0x44>
    {
        return false;
 801747e:	2300      	movs	r3, #0
 8017480:	e01b      	b.n	80174ba <RegionCommonChanDisable+0x7c>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8017482:	200f      	movs	r0, #15
 8017484:	183b      	adds	r3, r7, r0
 8017486:	781b      	ldrb	r3, [r3, #0]
 8017488:	005b      	lsls	r3, r3, #1
 801748a:	687a      	ldr	r2, [r7, #4]
 801748c:	18d3      	adds	r3, r2, r3
 801748e:	881b      	ldrh	r3, [r3, #0]
 8017490:	b21b      	sxth	r3, r3
 8017492:	1cfa      	adds	r2, r7, #3
 8017494:	7812      	ldrb	r2, [r2, #0]
 8017496:	210f      	movs	r1, #15
 8017498:	400a      	ands	r2, r1
 801749a:	2101      	movs	r1, #1
 801749c:	4091      	lsls	r1, r2
 801749e:	000a      	movs	r2, r1
 80174a0:	b212      	sxth	r2, r2
 80174a2:	43d2      	mvns	r2, r2
 80174a4:	b212      	sxth	r2, r2
 80174a6:	4013      	ands	r3, r2
 80174a8:	b219      	sxth	r1, r3
 80174aa:	183b      	adds	r3, r7, r0
 80174ac:	781b      	ldrb	r3, [r3, #0]
 80174ae:	005b      	lsls	r3, r3, #1
 80174b0:	687a      	ldr	r2, [r7, #4]
 80174b2:	18d3      	adds	r3, r2, r3
 80174b4:	b28a      	uxth	r2, r1
 80174b6:	801a      	strh	r2, [r3, #0]

    return true;
 80174b8:	2301      	movs	r3, #1
}
 80174ba:	0018      	movs	r0, r3
 80174bc:	46bd      	mov	sp, r7
 80174be:	b004      	add	sp, #16
 80174c0:	bd80      	pop	{r7, pc}

080174c2 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 80174c2:	b590      	push	{r4, r7, lr}
 80174c4:	b085      	sub	sp, #20
 80174c6:	af00      	add	r7, sp, #0
 80174c8:	6078      	str	r0, [r7, #4]
 80174ca:	0008      	movs	r0, r1
 80174cc:	0011      	movs	r1, r2
 80174ce:	1cfb      	adds	r3, r7, #3
 80174d0:	1c02      	adds	r2, r0, #0
 80174d2:	701a      	strb	r2, [r3, #0]
 80174d4:	1cbb      	adds	r3, r7, #2
 80174d6:	1c0a      	adds	r2, r1, #0
 80174d8:	701a      	strb	r2, [r3, #0]
    uint8_t nbChannels = 0;
 80174da:	230f      	movs	r3, #15
 80174dc:	18fb      	adds	r3, r7, r3
 80174de:	2200      	movs	r2, #0
 80174e0:	701a      	strb	r2, [r3, #0]

    if( channelsMask == NULL )
 80174e2:	687b      	ldr	r3, [r7, #4]
 80174e4:	2b00      	cmp	r3, #0
 80174e6:	d101      	bne.n	80174ec <RegionCommonCountChannels+0x2a>
    {
        return 0;
 80174e8:	2300      	movs	r3, #0
 80174ea:	e027      	b.n	801753c <RegionCommonCountChannels+0x7a>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 80174ec:	230e      	movs	r3, #14
 80174ee:	18fb      	adds	r3, r7, r3
 80174f0:	1cfa      	adds	r2, r7, #3
 80174f2:	7812      	ldrb	r2, [r2, #0]
 80174f4:	701a      	strb	r2, [r3, #0]
 80174f6:	e017      	b.n	8017528 <RegionCommonCountChannels+0x66>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 80174f8:	240e      	movs	r4, #14
 80174fa:	193b      	adds	r3, r7, r4
 80174fc:	781b      	ldrb	r3, [r3, #0]
 80174fe:	005b      	lsls	r3, r3, #1
 8017500:	687a      	ldr	r2, [r7, #4]
 8017502:	18d3      	adds	r3, r2, r3
 8017504:	881b      	ldrh	r3, [r3, #0]
 8017506:	2110      	movs	r1, #16
 8017508:	0018      	movs	r0, r3
 801750a:	f7ff fe6e 	bl	80171ea <CountChannels>
 801750e:	0003      	movs	r3, r0
 8017510:	0019      	movs	r1, r3
 8017512:	220f      	movs	r2, #15
 8017514:	18bb      	adds	r3, r7, r2
 8017516:	18ba      	adds	r2, r7, r2
 8017518:	7812      	ldrb	r2, [r2, #0]
 801751a:	188a      	adds	r2, r1, r2
 801751c:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 801751e:	193b      	adds	r3, r7, r4
 8017520:	781a      	ldrb	r2, [r3, #0]
 8017522:	193b      	adds	r3, r7, r4
 8017524:	3201      	adds	r2, #1
 8017526:	701a      	strb	r2, [r3, #0]
 8017528:	230e      	movs	r3, #14
 801752a:	18fa      	adds	r2, r7, r3
 801752c:	1cbb      	adds	r3, r7, #2
 801752e:	7812      	ldrb	r2, [r2, #0]
 8017530:	781b      	ldrb	r3, [r3, #0]
 8017532:	429a      	cmp	r2, r3
 8017534:	d3e0      	bcc.n	80174f8 <RegionCommonCountChannels+0x36>
    }

    return nbChannels;
 8017536:	230f      	movs	r3, #15
 8017538:	18fb      	adds	r3, r7, r3
 801753a:	781b      	ldrb	r3, [r3, #0]
}
 801753c:	0018      	movs	r0, r3
 801753e:	46bd      	mov	sp, r7
 8017540:	b005      	add	sp, #20
 8017542:	bd90      	pop	{r4, r7, pc}

08017544 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8017544:	b580      	push	{r7, lr}
 8017546:	b086      	sub	sp, #24
 8017548:	af00      	add	r7, sp, #0
 801754a:	60f8      	str	r0, [r7, #12]
 801754c:	60b9      	str	r1, [r7, #8]
 801754e:	1dfb      	adds	r3, r7, #7
 8017550:	701a      	strb	r2, [r3, #0]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8017552:	68fb      	ldr	r3, [r7, #12]
 8017554:	2b00      	cmp	r3, #0
 8017556:	d020      	beq.n	801759a <RegionCommonChanMaskCopy+0x56>
 8017558:	68bb      	ldr	r3, [r7, #8]
 801755a:	2b00      	cmp	r3, #0
 801755c:	d01d      	beq.n	801759a <RegionCommonChanMaskCopy+0x56>
    {
        for( uint8_t i = 0; i < len; i++ )
 801755e:	2317      	movs	r3, #23
 8017560:	18fb      	adds	r3, r7, r3
 8017562:	2200      	movs	r2, #0
 8017564:	701a      	strb	r2, [r3, #0]
 8017566:	e011      	b.n	801758c <RegionCommonChanMaskCopy+0x48>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8017568:	2017      	movs	r0, #23
 801756a:	183b      	adds	r3, r7, r0
 801756c:	781b      	ldrb	r3, [r3, #0]
 801756e:	005b      	lsls	r3, r3, #1
 8017570:	68ba      	ldr	r2, [r7, #8]
 8017572:	18d2      	adds	r2, r2, r3
 8017574:	183b      	adds	r3, r7, r0
 8017576:	781b      	ldrb	r3, [r3, #0]
 8017578:	005b      	lsls	r3, r3, #1
 801757a:	68f9      	ldr	r1, [r7, #12]
 801757c:	18cb      	adds	r3, r1, r3
 801757e:	8812      	ldrh	r2, [r2, #0]
 8017580:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8017582:	183b      	adds	r3, r7, r0
 8017584:	781a      	ldrb	r2, [r3, #0]
 8017586:	183b      	adds	r3, r7, r0
 8017588:	3201      	adds	r2, #1
 801758a:	701a      	strb	r2, [r3, #0]
 801758c:	2317      	movs	r3, #23
 801758e:	18fa      	adds	r2, r7, r3
 8017590:	1dfb      	adds	r3, r7, #7
 8017592:	7812      	ldrb	r2, [r2, #0]
 8017594:	781b      	ldrb	r3, [r3, #0]
 8017596:	429a      	cmp	r2, r3
 8017598:	d3e6      	bcc.n	8017568 <RegionCommonChanMaskCopy+0x24>
        }
    }
}
 801759a:	46c0      	nop			; (mov r8, r8)
 801759c:	46bd      	mov	sp, r7
 801759e:	b006      	add	sp, #24
 80175a0:	bd80      	pop	{r7, pc}

080175a2 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80175a2:	b082      	sub	sp, #8
 80175a4:	b5b0      	push	{r4, r5, r7, lr}
 80175a6:	b086      	sub	sp, #24
 80175a8:	af00      	add	r7, sp, #0
 80175aa:	60f8      	str	r0, [r7, #12]
 80175ac:	60b9      	str	r1, [r7, #8]
 80175ae:	0011      	movs	r1, r2
 80175b0:	2204      	movs	r2, #4
 80175b2:	2028      	movs	r0, #40	; 0x28
 80175b4:	4684      	mov	ip, r0
 80175b6:	44bc      	add	ip, r7
 80175b8:	4462      	add	r2, ip
 80175ba:	6013      	str	r3, [r2, #0]
 80175bc:	1dfb      	adds	r3, r7, #7
 80175be:	1c0a      	adds	r2, r1, #0
 80175c0:	701a      	strb	r2, [r3, #0]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80175c2:	2516      	movs	r5, #22
 80175c4:	197c      	adds	r4, r7, r5
 80175c6:	2304      	movs	r3, #4
 80175c8:	2228      	movs	r2, #40	; 0x28
 80175ca:	4694      	mov	ip, r2
 80175cc:	44bc      	add	ip, r7
 80175ce:	4463      	add	r3, ip
 80175d0:	1dfa      	adds	r2, r7, #7
 80175d2:	7811      	ldrb	r1, [r2, #0]
 80175d4:	68f8      	ldr	r0, [r7, #12]
 80175d6:	681a      	ldr	r2, [r3, #0]
 80175d8:	685b      	ldr	r3, [r3, #4]
 80175da:	f7ff fd15 	bl	8017008 <GetDutyCycle>
 80175de:	0003      	movs	r3, r0
 80175e0:	8023      	strh	r3, [r4, #0]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 80175e2:	68fb      	ldr	r3, [r7, #12]
 80175e4:	689a      	ldr	r2, [r3, #8]
 80175e6:	197b      	adds	r3, r7, r5
 80175e8:	881b      	ldrh	r3, [r3, #0]
 80175ea:	68b9      	ldr	r1, [r7, #8]
 80175ec:	434b      	muls	r3, r1
 80175ee:	429a      	cmp	r2, r3
 80175f0:	d909      	bls.n	8017606 <RegionCommonSetBandTxDone+0x64>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 80175f2:	68fb      	ldr	r3, [r7, #12]
 80175f4:	689a      	ldr	r2, [r3, #8]
 80175f6:	197b      	adds	r3, r7, r5
 80175f8:	881b      	ldrh	r3, [r3, #0]
 80175fa:	68b9      	ldr	r1, [r7, #8]
 80175fc:	434b      	muls	r3, r1
 80175fe:	1ad2      	subs	r2, r2, r3
 8017600:	68fb      	ldr	r3, [r7, #12]
 8017602:	609a      	str	r2, [r3, #8]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8017604:	e002      	b.n	801760c <RegionCommonSetBandTxDone+0x6a>
        band->TimeCredits = 0;
 8017606:	68fb      	ldr	r3, [r7, #12]
 8017608:	2200      	movs	r2, #0
 801760a:	609a      	str	r2, [r3, #8]
}
 801760c:	46c0      	nop			; (mov r8, r8)
 801760e:	46bd      	mov	sp, r7
 8017610:	b006      	add	sp, #24
 8017612:	bcb0      	pop	{r4, r5, r7}
 8017614:	bc08      	pop	{r3}
 8017616:	b002      	add	sp, #8
 8017618:	4718      	bx	r3

0801761a <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 801761a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801761c:	46c6      	mov	lr, r8
 801761e:	b500      	push	{lr}
 8017620:	b08c      	sub	sp, #48	; 0x30
 8017622:	af04      	add	r7, sp, #16
 8017624:	0004      	movs	r4, r0
 8017626:	6039      	str	r1, [r7, #0]
 8017628:	0010      	movs	r0, r2
 801762a:	0019      	movs	r1, r3
 801762c:	1dfb      	adds	r3, r7, #7
 801762e:	1c22      	adds	r2, r4, #0
 8017630:	701a      	strb	r2, [r3, #0]
 8017632:	1dbb      	adds	r3, r7, #6
 8017634:	1c02      	adds	r2, r0, #0
 8017636:	701a      	strb	r2, [r3, #0]
 8017638:	1d7b      	adds	r3, r7, #5
 801763a:	1c0a      	adds	r2, r1, #0
 801763c:	701a      	strb	r2, [r3, #0]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 801763e:	2301      	movs	r3, #1
 8017640:	425b      	negs	r3, r3
 8017642:	61fb      	str	r3, [r7, #28]
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8017644:	f005 fc40 	bl	801cec8 <UTIL_TIMER_GetCurrentTime>
 8017648:	0003      	movs	r3, r0
 801764a:	617b      	str	r3, [r7, #20]
    TimerTime_t creditCosts = 0;
 801764c:	2300      	movs	r3, #0
 801764e:	613b      	str	r3, [r7, #16]
    uint16_t dutyCycle = 1;
 8017650:	230e      	movs	r3, #14
 8017652:	18fb      	adds	r3, r7, r3
 8017654:	2201      	movs	r2, #1
 8017656:	801a      	strh	r2, [r3, #0]
    uint8_t validBands = 0;
 8017658:	231b      	movs	r3, #27
 801765a:	18fb      	adds	r3, r7, r3
 801765c:	2200      	movs	r2, #0
 801765e:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0; i < nbBands; i++ )
 8017660:	231a      	movs	r3, #26
 8017662:	18fb      	adds	r3, r7, r3
 8017664:	2200      	movs	r2, #0
 8017666:	701a      	strb	r2, [r3, #0]
 8017668:	e089      	b.n	801777e <RegionCommonUpdateBandTimeOff+0x164>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 801766a:	231a      	movs	r3, #26
 801766c:	18fb      	adds	r3, r7, r3
 801766e:	781a      	ldrb	r2, [r3, #0]
 8017670:	0013      	movs	r3, r2
 8017672:	009b      	lsls	r3, r3, #2
 8017674:	189b      	adds	r3, r3, r2
 8017676:	009b      	lsls	r3, r3, #2
 8017678:	001a      	movs	r2, r3
 801767a:	683b      	ldr	r3, [r7, #0]
 801767c:	469c      	mov	ip, r3
 801767e:	4494      	add	ip, r2
 8017680:	220e      	movs	r2, #14
 8017682:	18bc      	adds	r4, r7, r2
 8017684:	2138      	movs	r1, #56	; 0x38
 8017686:	000a      	movs	r2, r1
 8017688:	187b      	adds	r3, r7, r1
 801768a:	781e      	ldrb	r6, [r3, #0]
 801768c:	1d7b      	adds	r3, r7, #5
 801768e:	781d      	ldrb	r5, [r3, #0]
 8017690:	1dfb      	adds	r3, r7, #7
 8017692:	781b      	ldrb	r3, [r3, #0]
 8017694:	4698      	mov	r8, r3
 8017696:	697b      	ldr	r3, [r7, #20]
 8017698:	9302      	str	r3, [sp, #8]
 801769a:	2304      	movs	r3, #4
 801769c:	18ba      	adds	r2, r7, r2
 801769e:	18d2      	adds	r2, r2, r3
 80176a0:	466b      	mov	r3, sp
 80176a2:	ca03      	ldmia	r2!, {r0, r1}
 80176a4:	c303      	stmia	r3!, {r0, r1}
 80176a6:	0033      	movs	r3, r6
 80176a8:	002a      	movs	r2, r5
 80176aa:	4641      	mov	r1, r8
 80176ac:	4660      	mov	r0, ip
 80176ae:	f7ff fd3b 	bl	8017128 <UpdateTimeCredits>
 80176b2:	0003      	movs	r3, r0
 80176b4:	8023      	strh	r3, [r4, #0]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 80176b6:	220e      	movs	r2, #14
 80176b8:	18bb      	adds	r3, r7, r2
 80176ba:	881a      	ldrh	r2, [r3, #0]
 80176bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80176be:	4353      	muls	r3, r2
 80176c0:	613b      	str	r3, [r7, #16]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 80176c2:	231a      	movs	r3, #26
 80176c4:	18fb      	adds	r3, r7, r3
 80176c6:	781a      	ldrb	r2, [r3, #0]
 80176c8:	0013      	movs	r3, r2
 80176ca:	009b      	lsls	r3, r3, #2
 80176cc:	189b      	adds	r3, r3, r2
 80176ce:	009b      	lsls	r3, r3, #2
 80176d0:	001a      	movs	r2, r3
 80176d2:	683b      	ldr	r3, [r7, #0]
 80176d4:	189b      	adds	r3, r3, r2
 80176d6:	689b      	ldr	r3, [r3, #8]
 80176d8:	693a      	ldr	r2, [r7, #16]
 80176da:	429a      	cmp	r2, r3
 80176dc:	d306      	bcc.n	80176ec <RegionCommonUpdateBandTimeOff+0xd2>
            ( dutyCycleEnabled == false ) )
 80176de:	1d7b      	adds	r3, r7, #5
 80176e0:	781b      	ldrb	r3, [r3, #0]
 80176e2:	2201      	movs	r2, #1
 80176e4:	4053      	eors	r3, r2
 80176e6:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 80176e8:	2b00      	cmp	r3, #0
 80176ea:	d012      	beq.n	8017712 <RegionCommonUpdateBandTimeOff+0xf8>
        {
            bands[i].ReadyForTransmission = true;
 80176ec:	231a      	movs	r3, #26
 80176ee:	18fb      	adds	r3, r7, r3
 80176f0:	781a      	ldrb	r2, [r3, #0]
 80176f2:	0013      	movs	r3, r2
 80176f4:	009b      	lsls	r3, r3, #2
 80176f6:	189b      	adds	r3, r3, r2
 80176f8:	009b      	lsls	r3, r3, #2
 80176fa:	001a      	movs	r2, r3
 80176fc:	683b      	ldr	r3, [r7, #0]
 80176fe:	189b      	adds	r3, r3, r2
 8017700:	2201      	movs	r2, #1
 8017702:	741a      	strb	r2, [r3, #16]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8017704:	211b      	movs	r1, #27
 8017706:	187b      	adds	r3, r7, r1
 8017708:	781a      	ldrb	r2, [r3, #0]
 801770a:	187b      	adds	r3, r7, r1
 801770c:	3201      	adds	r2, #1
 801770e:	701a      	strb	r2, [r3, #0]
 8017710:	e02f      	b.n	8017772 <RegionCommonUpdateBandTimeOff+0x158>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8017712:	211a      	movs	r1, #26
 8017714:	187b      	adds	r3, r7, r1
 8017716:	781a      	ldrb	r2, [r3, #0]
 8017718:	0013      	movs	r3, r2
 801771a:	009b      	lsls	r3, r3, #2
 801771c:	189b      	adds	r3, r3, r2
 801771e:	009b      	lsls	r3, r3, #2
 8017720:	001a      	movs	r2, r3
 8017722:	683b      	ldr	r3, [r7, #0]
 8017724:	189b      	adds	r3, r3, r2
 8017726:	2200      	movs	r2, #0
 8017728:	741a      	strb	r2, [r3, #16]

            if( bands[i].MaxTimeCredits > creditCosts )
 801772a:	187b      	adds	r3, r7, r1
 801772c:	781a      	ldrb	r2, [r3, #0]
 801772e:	0013      	movs	r3, r2
 8017730:	009b      	lsls	r3, r3, #2
 8017732:	189b      	adds	r3, r3, r2
 8017734:	009b      	lsls	r3, r3, #2
 8017736:	001a      	movs	r2, r3
 8017738:	683b      	ldr	r3, [r7, #0]
 801773a:	189b      	adds	r3, r3, r2
 801773c:	68db      	ldr	r3, [r3, #12]
 801773e:	693a      	ldr	r2, [r7, #16]
 8017740:	429a      	cmp	r2, r3
 8017742:	d216      	bcs.n	8017772 <RegionCommonUpdateBandTimeOff+0x158>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8017744:	187b      	adds	r3, r7, r1
 8017746:	781a      	ldrb	r2, [r3, #0]
 8017748:	0013      	movs	r3, r2
 801774a:	009b      	lsls	r3, r3, #2
 801774c:	189b      	adds	r3, r3, r2
 801774e:	009b      	lsls	r3, r3, #2
 8017750:	001a      	movs	r2, r3
 8017752:	683b      	ldr	r3, [r7, #0]
 8017754:	189b      	adds	r3, r3, r2
 8017756:	689b      	ldr	r3, [r3, #8]
 8017758:	693a      	ldr	r2, [r7, #16]
 801775a:	1ad2      	subs	r2, r2, r3
 801775c:	69fb      	ldr	r3, [r7, #28]
 801775e:	4293      	cmp	r3, r2
 8017760:	d900      	bls.n	8017764 <RegionCommonUpdateBandTimeOff+0x14a>
 8017762:	0013      	movs	r3, r2
 8017764:	61fb      	str	r3, [r7, #28]
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8017766:	211b      	movs	r1, #27
 8017768:	187b      	adds	r3, r7, r1
 801776a:	781a      	ldrb	r2, [r3, #0]
 801776c:	187b      	adds	r3, r7, r1
 801776e:	3201      	adds	r2, #1
 8017770:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < nbBands; i++ )
 8017772:	211a      	movs	r1, #26
 8017774:	187b      	adds	r3, r7, r1
 8017776:	781a      	ldrb	r2, [r3, #0]
 8017778:	187b      	adds	r3, r7, r1
 801777a:	3201      	adds	r2, #1
 801777c:	701a      	strb	r2, [r3, #0]
 801777e:	231a      	movs	r3, #26
 8017780:	18fa      	adds	r2, r7, r3
 8017782:	1dbb      	adds	r3, r7, #6
 8017784:	7812      	ldrb	r2, [r2, #0]
 8017786:	781b      	ldrb	r3, [r3, #0]
 8017788:	429a      	cmp	r2, r3
 801778a:	d200      	bcs.n	801778e <RegionCommonUpdateBandTimeOff+0x174>
 801778c:	e76d      	b.n	801766a <RegionCommonUpdateBandTimeOff+0x50>
            }
        }
    }


    if( validBands == 0 )
 801778e:	231b      	movs	r3, #27
 8017790:	18fb      	adds	r3, r7, r3
 8017792:	781b      	ldrb	r3, [r3, #0]
 8017794:	2b00      	cmp	r3, #0
 8017796:	d102      	bne.n	801779e <RegionCommonUpdateBandTimeOff+0x184>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8017798:	2301      	movs	r3, #1
 801779a:	425b      	negs	r3, r3
 801779c:	e000      	b.n	80177a0 <RegionCommonUpdateBandTimeOff+0x186>
    }
    return minTimeToWait;
 801779e:	69fb      	ldr	r3, [r7, #28]
}
 80177a0:	0018      	movs	r0, r3
 80177a2:	46bd      	mov	sp, r7
 80177a4:	b008      	add	sp, #32
 80177a6:	bc80      	pop	{r7}
 80177a8:	46b8      	mov	r8, r7
 80177aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080177ac <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 80177ac:	b580      	push	{r7, lr}
 80177ae:	b084      	sub	sp, #16
 80177b0:	af00      	add	r7, sp, #0
 80177b2:	6078      	str	r0, [r7, #4]
 80177b4:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 80177b6:	210f      	movs	r1, #15
 80177b8:	187b      	adds	r3, r7, r1
 80177ba:	2200      	movs	r2, #0
 80177bc:	701a      	strb	r2, [r3, #0]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 80177be:	687b      	ldr	r3, [r7, #4]
 80177c0:	781b      	ldrb	r3, [r3, #0]
 80177c2:	2b03      	cmp	r3, #3
 80177c4:	d140      	bne.n	8017848 <RegionCommonParseLinkAdrReq+0x9c>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 80177c6:	687b      	ldr	r3, [r7, #4]
 80177c8:	3301      	adds	r3, #1
 80177ca:	781b      	ldrb	r3, [r3, #0]
 80177cc:	b25a      	sxtb	r2, r3
 80177ce:	683b      	ldr	r3, [r7, #0]
 80177d0:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 80177d2:	683b      	ldr	r3, [r7, #0]
 80177d4:	785b      	ldrb	r3, [r3, #1]
 80177d6:	b25b      	sxtb	r3, r3
 80177d8:	220f      	movs	r2, #15
 80177da:	4013      	ands	r3, r2
 80177dc:	b25a      	sxtb	r2, r3
 80177de:	683b      	ldr	r3, [r7, #0]
 80177e0:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 80177e2:	683b      	ldr	r3, [r7, #0]
 80177e4:	785b      	ldrb	r3, [r3, #1]
 80177e6:	b25b      	sxtb	r3, r3
 80177e8:	b2db      	uxtb	r3, r3
 80177ea:	091b      	lsrs	r3, r3, #4
 80177ec:	b2db      	uxtb	r3, r3
 80177ee:	b25a      	sxtb	r2, r3
 80177f0:	683b      	ldr	r3, [r7, #0]
 80177f2:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 80177f4:	687b      	ldr	r3, [r7, #4]
 80177f6:	3302      	adds	r3, #2
 80177f8:	781b      	ldrb	r3, [r3, #0]
 80177fa:	b29a      	uxth	r2, r3
 80177fc:	683b      	ldr	r3, [r7, #0]
 80177fe:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8017800:	683b      	ldr	r3, [r7, #0]
 8017802:	889b      	ldrh	r3, [r3, #4]
 8017804:	b21a      	sxth	r2, r3
 8017806:	687b      	ldr	r3, [r7, #4]
 8017808:	3303      	adds	r3, #3
 801780a:	781b      	ldrb	r3, [r3, #0]
 801780c:	021b      	lsls	r3, r3, #8
 801780e:	b21b      	sxth	r3, r3
 8017810:	4313      	orrs	r3, r2
 8017812:	b21b      	sxth	r3, r3
 8017814:	b29a      	uxth	r2, r3
 8017816:	683b      	ldr	r3, [r7, #0]
 8017818:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 801781a:	687b      	ldr	r3, [r7, #4]
 801781c:	791a      	ldrb	r2, [r3, #4]
 801781e:	683b      	ldr	r3, [r7, #0]
 8017820:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8017822:	683b      	ldr	r3, [r7, #0]
 8017824:	781b      	ldrb	r3, [r3, #0]
 8017826:	091b      	lsrs	r3, r3, #4
 8017828:	b2db      	uxtb	r3, r3
 801782a:	2207      	movs	r2, #7
 801782c:	4013      	ands	r3, r2
 801782e:	b2da      	uxtb	r2, r3
 8017830:	683b      	ldr	r3, [r7, #0]
 8017832:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8017834:	683b      	ldr	r3, [r7, #0]
 8017836:	781b      	ldrb	r3, [r3, #0]
 8017838:	220f      	movs	r2, #15
 801783a:	4013      	ands	r3, r2
 801783c:	b2da      	uxtb	r2, r3
 801783e:	683b      	ldr	r3, [r7, #0]
 8017840:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8017842:	187b      	adds	r3, r7, r1
 8017844:	2205      	movs	r2, #5
 8017846:	701a      	strb	r2, [r3, #0]
    }
    return retIndex;
 8017848:	230f      	movs	r3, #15
 801784a:	18fb      	adds	r3, r7, r3
 801784c:	781b      	ldrb	r3, [r3, #0]
}
 801784e:	0018      	movs	r0, r3
 8017850:	46bd      	mov	sp, r7
 8017852:	b004      	add	sp, #16
 8017854:	bd80      	pop	{r7, pc}

08017856 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8017856:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017858:	b089      	sub	sp, #36	; 0x24
 801785a:	af02      	add	r7, sp, #8
 801785c:	60f8      	str	r0, [r7, #12]
 801785e:	60b9      	str	r1, [r7, #8]
 8017860:	607a      	str	r2, [r7, #4]
 8017862:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8017864:	2317      	movs	r3, #23
 8017866:	18fb      	adds	r3, r7, r3
 8017868:	68fa      	ldr	r2, [r7, #12]
 801786a:	7912      	ldrb	r2, [r2, #4]
 801786c:	701a      	strb	r2, [r3, #0]
    int8_t datarate = verifyParams->Datarate;
 801786e:	2116      	movs	r1, #22
 8017870:	187b      	adds	r3, r7, r1
 8017872:	68fa      	ldr	r2, [r7, #12]
 8017874:	7992      	ldrb	r2, [r2, #6]
 8017876:	701a      	strb	r2, [r3, #0]
    int8_t txPower = verifyParams->TxPower;
 8017878:	2015      	movs	r0, #21
 801787a:	183b      	adds	r3, r7, r0
 801787c:	68fa      	ldr	r2, [r7, #12]
 801787e:	79d2      	ldrb	r2, [r2, #7]
 8017880:	701a      	strb	r2, [r3, #0]
    int8_t nbRepetitions = verifyParams->NbRep;
 8017882:	68fb      	ldr	r3, [r7, #12]
 8017884:	7a1a      	ldrb	r2, [r3, #8]
 8017886:	2414      	movs	r4, #20
 8017888:	193b      	adds	r3, r7, r4
 801788a:	701a      	strb	r2, [r3, #0]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 801788c:	68fb      	ldr	r3, [r7, #12]
 801788e:	795b      	ldrb	r3, [r3, #5]
 8017890:	2201      	movs	r2, #1
 8017892:	4053      	eors	r3, r2
 8017894:	b2db      	uxtb	r3, r3
 8017896:	2b00      	cmp	r3, #0
 8017898:	d00b      	beq.n	80178b2 <RegionCommonLinkAdrReqVerifyParams+0x5c>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 801789a:	193b      	adds	r3, r7, r4
 801789c:	68fa      	ldr	r2, [r7, #12]
 801789e:	7ad2      	ldrb	r2, [r2, #11]
 80178a0:	701a      	strb	r2, [r3, #0]
        datarate =  verifyParams->CurrentDatarate;
 80178a2:	187b      	adds	r3, r7, r1
 80178a4:	68fa      	ldr	r2, [r7, #12]
 80178a6:	7a52      	ldrb	r2, [r2, #9]
 80178a8:	701a      	strb	r2, [r3, #0]
        txPower =  verifyParams->CurrentTxPower;
 80178aa:	183b      	adds	r3, r7, r0
 80178ac:	68fa      	ldr	r2, [r7, #12]
 80178ae:	7a92      	ldrb	r2, [r2, #10]
 80178b0:	701a      	strb	r2, [r3, #0]
    }

    if( status != 0 )
 80178b2:	2617      	movs	r6, #23
 80178b4:	19bb      	adds	r3, r7, r6
 80178b6:	781b      	ldrb	r3, [r3, #0]
 80178b8:	2b00      	cmp	r3, #0
 80178ba:	d046      	beq.n	801794a <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80178bc:	68fb      	ldr	r3, [r7, #12]
 80178be:	7b18      	ldrb	r0, [r3, #12]
 80178c0:	68fb      	ldr	r3, [r7, #12]
 80178c2:	691c      	ldr	r4, [r3, #16]
 80178c4:	68fb      	ldr	r3, [r7, #12]
 80178c6:	2514      	movs	r5, #20
 80178c8:	575d      	ldrsb	r5, [r3, r5]
 80178ca:	68fb      	ldr	r3, [r7, #12]
 80178cc:	2215      	movs	r2, #21
 80178ce:	569a      	ldrsb	r2, [r3, r2]
 80178d0:	68fb      	ldr	r3, [r7, #12]
 80178d2:	699b      	ldr	r3, [r3, #24]
 80178d4:	2116      	movs	r1, #22
 80178d6:	1879      	adds	r1, r7, r1
 80178d8:	7809      	ldrb	r1, [r1, #0]
 80178da:	b249      	sxtb	r1, r1
 80178dc:	9301      	str	r3, [sp, #4]
 80178de:	9200      	str	r2, [sp, #0]
 80178e0:	002b      	movs	r3, r5
 80178e2:	000a      	movs	r2, r1
 80178e4:	0021      	movs	r1, r4
 80178e6:	f7ff fceb 	bl	80172c0 <RegionCommonChanVerifyDr>
 80178ea:	0003      	movs	r3, r0
 80178ec:	001a      	movs	r2, r3
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 80178ee:	2301      	movs	r3, #1
 80178f0:	4053      	eors	r3, r2
 80178f2:	b2db      	uxtb	r3, r3
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80178f4:	2b00      	cmp	r3, #0
 80178f6:	d005      	beq.n	8017904 <RegionCommonLinkAdrReqVerifyParams+0xae>
        {
            status &= 0xFD; // Datarate KO
 80178f8:	19bb      	adds	r3, r7, r6
 80178fa:	19ba      	adds	r2, r7, r6
 80178fc:	7812      	ldrb	r2, [r2, #0]
 80178fe:	2102      	movs	r1, #2
 8017900:	438a      	bics	r2, r1
 8017902:	701a      	strb	r2, [r3, #0]
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8017904:	68fb      	ldr	r3, [r7, #12]
 8017906:	211d      	movs	r1, #29
 8017908:	5659      	ldrsb	r1, [r3, r1]
 801790a:	68fb      	ldr	r3, [r7, #12]
 801790c:	221c      	movs	r2, #28
 801790e:	569a      	ldrsb	r2, [r3, r2]
 8017910:	2415      	movs	r4, #21
 8017912:	193b      	adds	r3, r7, r4
 8017914:	781b      	ldrb	r3, [r3, #0]
 8017916:	b25b      	sxtb	r3, r3
 8017918:	0018      	movs	r0, r3
 801791a:	f7ff fd6a 	bl	80173f2 <RegionCommonValueInRange>
 801791e:	1e03      	subs	r3, r0, #0
 8017920:	d113      	bne.n	801794a <RegionCommonLinkAdrReqVerifyParams+0xf4>
        {
//        	verifyParams->MaxTxPower = 20;
            // Verify if the maximum TX power is exceeded Проверьте, не превышена ли максимальная мощность TX
            if( verifyParams->MaxTxPower > txPower )
 8017922:	68fb      	ldr	r3, [r7, #12]
 8017924:	7f5b      	ldrb	r3, [r3, #29]
 8017926:	b25b      	sxtb	r3, r3
 8017928:	193a      	adds	r2, r7, r4
 801792a:	7812      	ldrb	r2, [r2, #0]
 801792c:	b252      	sxtb	r2, r2
 801792e:	429a      	cmp	r2, r3
 8017930:	da04      	bge.n	801793c <RegionCommonLinkAdrReqVerifyParams+0xe6>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8017932:	193b      	adds	r3, r7, r4
 8017934:	68fa      	ldr	r2, [r7, #12]
 8017936:	7f52      	ldrb	r2, [r2, #29]
 8017938:	701a      	strb	r2, [r3, #0]
 801793a:	e006      	b.n	801794a <RegionCommonLinkAdrReqVerifyParams+0xf4>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 801793c:	2217      	movs	r2, #23
 801793e:	18bb      	adds	r3, r7, r2
 8017940:	18ba      	adds	r2, r7, r2
 8017942:	7812      	ldrb	r2, [r2, #0]
 8017944:	2104      	movs	r1, #4
 8017946:	438a      	bics	r2, r1
 8017948:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 801794a:	2317      	movs	r3, #23
 801794c:	18fb      	adds	r3, r7, r3
 801794e:	781b      	ldrb	r3, [r3, #0]
 8017950:	2b07      	cmp	r3, #7
 8017952:	d108      	bne.n	8017966 <RegionCommonLinkAdrReqVerifyParams+0x110>
    {
        if( nbRepetitions == 0 )
 8017954:	2214      	movs	r2, #20
 8017956:	18bb      	adds	r3, r7, r2
 8017958:	781b      	ldrb	r3, [r3, #0]
 801795a:	b25b      	sxtb	r3, r3
 801795c:	2b00      	cmp	r3, #0
 801795e:	d102      	bne.n	8017966 <RegionCommonLinkAdrReqVerifyParams+0x110>
        { // Restore the default value according to the LoRaWAN specification
            nbRepetitions = 1;
 8017960:	18bb      	adds	r3, r7, r2
 8017962:	2201      	movs	r2, #1
 8017964:	701a      	strb	r2, [r3, #0]
        }
    }

    // Apply changes
    *dr = datarate;
 8017966:	68bb      	ldr	r3, [r7, #8]
 8017968:	2216      	movs	r2, #22
 801796a:	18ba      	adds	r2, r7, r2
 801796c:	7812      	ldrb	r2, [r2, #0]
 801796e:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8017970:	687b      	ldr	r3, [r7, #4]
 8017972:	2215      	movs	r2, #21
 8017974:	18ba      	adds	r2, r7, r2
 8017976:	7812      	ldrb	r2, [r2, #0]
 8017978:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 801797a:	2314      	movs	r3, #20
 801797c:	18fb      	adds	r3, r7, r3
 801797e:	781a      	ldrb	r2, [r3, #0]
 8017980:	683b      	ldr	r3, [r7, #0]
 8017982:	701a      	strb	r2, [r3, #0]

    return status;
 8017984:	2317      	movs	r3, #23
 8017986:	18fb      	adds	r3, r7, r3
 8017988:	781b      	ldrb	r3, [r3, #0]
}
 801798a:	0018      	movs	r0, r3
 801798c:	46bd      	mov	sp, r7
 801798e:	b007      	add	sp, #28
 8017990:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08017994 <RegionCommonComputeSymbolTimeLoRa>:

/* ST_WORKAROUND_BEGIN: remove float/double */
uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidth )
{
 8017994:	b580      	push	{r7, lr}
 8017996:	b082      	sub	sp, #8
 8017998:	af00      	add	r7, sp, #0
 801799a:	0002      	movs	r2, r0
 801799c:	6039      	str	r1, [r7, #0]
 801799e:	1dfb      	adds	r3, r7, #7
 80179a0:	701a      	strb	r2, [r3, #0]
    return (1000000000UL/bandwidth) * (1 << phyDr);
 80179a2:	6839      	ldr	r1, [r7, #0]
 80179a4:	4806      	ldr	r0, [pc, #24]	; (80179c0 <RegionCommonComputeSymbolTimeLoRa+0x2c>)
 80179a6:	f7e8 fbb7 	bl	8000118 <__udivsi3>
 80179aa:	0003      	movs	r3, r0
 80179ac:	001a      	movs	r2, r3
 80179ae:	1dfb      	adds	r3, r7, #7
 80179b0:	781b      	ldrb	r3, [r3, #0]
 80179b2:	409a      	lsls	r2, r3
 80179b4:	0013      	movs	r3, r2
}
 80179b6:	0018      	movs	r0, r3
 80179b8:	46bd      	mov	sp, r7
 80179ba:	b002      	add	sp, #8
 80179bc:	bd80      	pop	{r7, pc}
 80179be:	46c0      	nop			; (mov r8, r8)
 80179c0:	3b9aca00 	.word	0x3b9aca00

080179c4 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDr )
{
 80179c4:	b580      	push	{r7, lr}
 80179c6:	b082      	sub	sp, #8
 80179c8:	af00      	add	r7, sp, #0
 80179ca:	0002      	movs	r2, r0
 80179cc:	1dfb      	adds	r3, r7, #7
 80179ce:	701a      	strb	r2, [r3, #0]
    // ((8 * 1000000) / 50);
    return 160000UL;
 80179d0:	4b02      	ldr	r3, [pc, #8]	; (80179dc <RegionCommonComputeSymbolTimeFsk+0x18>)
}
 80179d2:	0018      	movs	r0, r3
 80179d4:	46bd      	mov	sp, r7
 80179d6:	b002      	add	sp, #8
 80179d8:	bd80      	pop	{r7, pc}
 80179da:	46c0      	nop			; (mov r8, r8)
 80179dc:	00027100 	.word	0x00027100

080179e0 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbol, uint8_t minRxSymbols, uint32_t rxError, uint32_t wakeUpTime, uint32_t* windowTimeout, int32_t* windowOffset )
{
 80179e0:	b5b0      	push	{r4, r5, r7, lr}
 80179e2:	b084      	sub	sp, #16
 80179e4:	af00      	add	r7, sp, #0
 80179e6:	60f8      	str	r0, [r7, #12]
 80179e8:	607a      	str	r2, [r7, #4]
 80179ea:	603b      	str	r3, [r7, #0]
 80179ec:	200b      	movs	r0, #11
 80179ee:	183b      	adds	r3, r7, r0
 80179f0:	1c0a      	adds	r2, r1, #0
 80179f2:	701a      	strb	r2, [r3, #0]
  *windowTimeout = MAX( (uint32_t)2 * minRxSymbols - 8 + DIVC(2 * rxError * 1000000UL, tSymbol ), minRxSymbols);
 80179f4:	0002      	movs	r2, r0
 80179f6:	18bb      	adds	r3, r7, r2
 80179f8:	781d      	ldrb	r5, [r3, #0]
 80179fa:	18bb      	adds	r3, r7, r2
 80179fc:	781b      	ldrb	r3, [r3, #0]
 80179fe:	4a1c      	ldr	r2, [pc, #112]	; (8017a70 <RegionCommonComputeRxWindowParameters+0x90>)
 8017a00:	4694      	mov	ip, r2
 8017a02:	4463      	add	r3, ip
 8017a04:	005c      	lsls	r4, r3, #1
 8017a06:	6879      	ldr	r1, [r7, #4]
 8017a08:	000a      	movs	r2, r1
 8017a0a:	0152      	lsls	r2, r2, #5
 8017a0c:	1a52      	subs	r2, r2, r1
 8017a0e:	0193      	lsls	r3, r2, #6
 8017a10:	1a9b      	subs	r3, r3, r2
 8017a12:	00db      	lsls	r3, r3, #3
 8017a14:	185b      	adds	r3, r3, r1
 8017a16:	01db      	lsls	r3, r3, #7
 8017a18:	001a      	movs	r2, r3
 8017a1a:	68fb      	ldr	r3, [r7, #12]
 8017a1c:	18d3      	adds	r3, r2, r3
 8017a1e:	3b01      	subs	r3, #1
 8017a20:	68f9      	ldr	r1, [r7, #12]
 8017a22:	0018      	movs	r0, r3
 8017a24:	f7e8 fb78 	bl	8000118 <__udivsi3>
 8017a28:	0003      	movs	r3, r0
 8017a2a:	18e2      	adds	r2, r4, r3
 8017a2c:	002b      	movs	r3, r5
 8017a2e:	4293      	cmp	r3, r2
 8017a30:	d200      	bcs.n	8017a34 <RegionCommonComputeRxWindowParameters+0x54>
 8017a32:	0013      	movs	r3, r2
 8017a34:	6a3a      	ldr	r2, [r7, #32]
 8017a36:	6013      	str	r3, [r2, #0]
  *windowOffset = DIVC((int32_t)(4 * tSymbol - ((*windowTimeout * tSymbol) >> 1)), 1000000L) - 1 - wakeUpTime;
 8017a38:	68fb      	ldr	r3, [r7, #12]
 8017a3a:	009a      	lsls	r2, r3, #2
 8017a3c:	6a3b      	ldr	r3, [r7, #32]
 8017a3e:	681b      	ldr	r3, [r3, #0]
 8017a40:	68f9      	ldr	r1, [r7, #12]
 8017a42:	434b      	muls	r3, r1
 8017a44:	085b      	lsrs	r3, r3, #1
 8017a46:	1ad3      	subs	r3, r2, r3
 8017a48:	4a0a      	ldr	r2, [pc, #40]	; (8017a74 <RegionCommonComputeRxWindowParameters+0x94>)
 8017a4a:	4694      	mov	ip, r2
 8017a4c:	4463      	add	r3, ip
 8017a4e:	490a      	ldr	r1, [pc, #40]	; (8017a78 <RegionCommonComputeRxWindowParameters+0x98>)
 8017a50:	0018      	movs	r0, r3
 8017a52:	f7e8 fbeb 	bl	800022c <__divsi3>
 8017a56:	0003      	movs	r3, r0
 8017a58:	001a      	movs	r2, r3
 8017a5a:	683b      	ldr	r3, [r7, #0]
 8017a5c:	1ad3      	subs	r3, r2, r3
 8017a5e:	3b01      	subs	r3, #1
 8017a60:	001a      	movs	r2, r3
 8017a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a64:	601a      	str	r2, [r3, #0]
}
 8017a66:	46c0      	nop			; (mov r8, r8)
 8017a68:	46bd      	mov	sp, r7
 8017a6a:	b004      	add	sp, #16
 8017a6c:	bdb0      	pop	{r4, r5, r7, pc}
 8017a6e:	46c0      	nop			; (mov r8, r8)
 8017a70:	7ffffffc 	.word	0x7ffffffc
 8017a74:	000f423f 	.word	0x000f423f
 8017a78:	000f4240 	.word	0x000f4240

08017a7c <RegionCommonComputeTxPower>:
/* ST_WORKAROUND_END */

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8017a7c:	b5b0      	push	{r4, r5, r7, lr}
 8017a7e:	b086      	sub	sp, #24
 8017a80:	af00      	add	r7, sp, #0
 8017a82:	60b9      	str	r1, [r7, #8]
 8017a84:	607a      	str	r2, [r7, #4]
 8017a86:	210f      	movs	r1, #15
 8017a88:	187b      	adds	r3, r7, r1
 8017a8a:	1c02      	adds	r2, r0, #0
 8017a8c:	701a      	strb	r2, [r3, #0]
    int8_t phyTxPower = 14;
 8017a8e:	2417      	movs	r4, #23
 8017a90:	193b      	adds	r3, r7, r4
 8017a92:	220e      	movs	r2, #14
 8017a94:	701a      	strb	r2, [r3, #0]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8017a96:	187b      	adds	r3, r7, r1
 8017a98:	781b      	ldrb	r3, [r3, #0]
 8017a9a:	b25b      	sxtb	r3, r3
 8017a9c:	005b      	lsls	r3, r3, #1
 8017a9e:	0018      	movs	r0, r3
 8017aa0:	f7e9 f82a 	bl	8000af8 <__aeabi_ui2f>
 8017aa4:	1c03      	adds	r3, r0, #0
 8017aa6:	1c19      	adds	r1, r3, #0
 8017aa8:	68b8      	ldr	r0, [r7, #8]
 8017aaa:	f7e8 fe5d 	bl	8000768 <__aeabi_fsub>
 8017aae:	1c03      	adds	r3, r0, #0
 8017ab0:	6879      	ldr	r1, [r7, #4]
 8017ab2:	1c18      	adds	r0, r3, #0
 8017ab4:	f7e8 fe58 	bl	8000768 <__aeabi_fsub>
 8017ab8:	1c03      	adds	r3, r0, #0
 8017aba:	1c18      	adds	r0, r3, #0
 8017abc:	f7ea fe52 	bl	8002764 <__aeabi_f2d>
 8017ac0:	0002      	movs	r2, r0
 8017ac2:	000b      	movs	r3, r1
 8017ac4:	0010      	movs	r0, r2
 8017ac6:	0019      	movs	r1, r3
 8017ac8:	f006 ff40 	bl	801e94c <floor>
 8017acc:	0002      	movs	r2, r0
 8017ace:	000b      	movs	r3, r1
 8017ad0:	0025      	movs	r5, r4
 8017ad2:	193c      	adds	r4, r7, r4
 8017ad4:	0010      	movs	r0, r2
 8017ad6:	0019      	movs	r1, r3
 8017ad8:	f7ea fdb8 	bl	800264c <__aeabi_d2iz>
 8017adc:	0003      	movs	r3, r0
 8017ade:	7023      	strb	r3, [r4, #0]

    return phyTxPower;
 8017ae0:	197b      	adds	r3, r7, r5
 8017ae2:	781b      	ldrb	r3, [r3, #0]
 8017ae4:	b25b      	sxtb	r3, r3
}
 8017ae6:	0018      	movs	r0, r3
 8017ae8:	46bd      	mov	sp, r7
 8017aea:	b006      	add	sp, #24
 8017aec:	bdb0      	pop	{r4, r5, r7, pc}

08017aee <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8017aee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017af0:	b087      	sub	sp, #28
 8017af2:	af00      	add	r7, sp, #0
 8017af4:	60f8      	str	r0, [r7, #12]
 8017af6:	60b9      	str	r1, [r7, #8]
 8017af8:	607a      	str	r2, [r7, #4]
 8017afa:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8017afc:	2317      	movs	r3, #23
 8017afe:	18fb      	adds	r3, r7, r3
 8017b00:	2200      	movs	r2, #0
 8017b02:	701a      	strb	r2, [r3, #0]
    uint8_t nbRestrictedChannelsCount = 0;
 8017b04:	2316      	movs	r3, #22
 8017b06:	18fb      	adds	r3, r7, r3
 8017b08:	2200      	movs	r2, #0
 8017b0a:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8017b0c:	2315      	movs	r3, #21
 8017b0e:	18fb      	adds	r3, r7, r3
 8017b10:	2200      	movs	r2, #0
 8017b12:	701a      	strb	r2, [r3, #0]
 8017b14:	2314      	movs	r3, #20
 8017b16:	18fb      	adds	r3, r7, r3
 8017b18:	2200      	movs	r2, #0
 8017b1a:	701a      	strb	r2, [r3, #0]
 8017b1c:	e0bf      	b.n	8017c9e <RegionCommonCountNbOfEnabledChannels+0x1b0>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8017b1e:	2313      	movs	r3, #19
 8017b20:	18fb      	adds	r3, r7, r3
 8017b22:	2200      	movs	r2, #0
 8017b24:	701a      	strb	r2, [r3, #0]
 8017b26:	e0a8      	b.n	8017c7a <RegionCommonCountNbOfEnabledChannels+0x18c>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8017b28:	68fb      	ldr	r3, [r7, #12]
 8017b2a:	685a      	ldr	r2, [r3, #4]
 8017b2c:	2314      	movs	r3, #20
 8017b2e:	18fb      	adds	r3, r7, r3
 8017b30:	781b      	ldrb	r3, [r3, #0]
 8017b32:	005b      	lsls	r3, r3, #1
 8017b34:	18d3      	adds	r3, r2, r3
 8017b36:	881b      	ldrh	r3, [r3, #0]
 8017b38:	001a      	movs	r2, r3
 8017b3a:	2013      	movs	r0, #19
 8017b3c:	183b      	adds	r3, r7, r0
 8017b3e:	781b      	ldrb	r3, [r3, #0]
 8017b40:	411a      	asrs	r2, r3
 8017b42:	0013      	movs	r3, r2
 8017b44:	2201      	movs	r2, #1
 8017b46:	4013      	ands	r3, r2
 8017b48:	d100      	bne.n	8017b4c <RegionCommonCountNbOfEnabledChannels+0x5e>
 8017b4a:	e090      	b.n	8017c6e <RegionCommonCountNbOfEnabledChannels+0x180>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8017b4c:	68fb      	ldr	r3, [r7, #12]
 8017b4e:	689a      	ldr	r2, [r3, #8]
 8017b50:	2315      	movs	r3, #21
 8017b52:	18fb      	adds	r3, r7, r3
 8017b54:	7819      	ldrb	r1, [r3, #0]
 8017b56:	183b      	adds	r3, r7, r0
 8017b58:	781b      	ldrb	r3, [r3, #0]
 8017b5a:	18cb      	adds	r3, r1, r3
 8017b5c:	0019      	movs	r1, r3
 8017b5e:	000b      	movs	r3, r1
 8017b60:	005b      	lsls	r3, r3, #1
 8017b62:	185b      	adds	r3, r3, r1
 8017b64:	009b      	lsls	r3, r3, #2
 8017b66:	18d3      	adds	r3, r2, r3
 8017b68:	681b      	ldr	r3, [r3, #0]
 8017b6a:	2b00      	cmp	r3, #0
 8017b6c:	d100      	bne.n	8017b70 <RegionCommonCountNbOfEnabledChannels+0x82>
 8017b6e:	e079      	b.n	8017c64 <RegionCommonCountNbOfEnabledChannels+0x176>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8017b70:	68fb      	ldr	r3, [r7, #12]
 8017b72:	781b      	ldrb	r3, [r3, #0]
 8017b74:	2201      	movs	r2, #1
 8017b76:	4053      	eors	r3, r2
 8017b78:	b2db      	uxtb	r3, r3
 8017b7a:	2b00      	cmp	r3, #0
 8017b7c:	d00d      	beq.n	8017b9a <RegionCommonCountNbOfEnabledChannels+0xac>
                    ( countNbOfEnabledChannelsParams->JoinChannels > 0 ) )
 8017b7e:	68fb      	ldr	r3, [r7, #12]
 8017b80:	8a5b      	ldrh	r3, [r3, #18]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8017b82:	2b00      	cmp	r3, #0
 8017b84:	d009      	beq.n	8017b9a <RegionCommonCountNbOfEnabledChannels+0xac>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels & ( 1 << j ) ) == 0 )
 8017b86:	68fb      	ldr	r3, [r7, #12]
 8017b88:	8a5b      	ldrh	r3, [r3, #18]
 8017b8a:	001a      	movs	r2, r3
 8017b8c:	183b      	adds	r3, r7, r0
 8017b8e:	781b      	ldrb	r3, [r3, #0]
 8017b90:	411a      	asrs	r2, r3
 8017b92:	0013      	movs	r3, r2
 8017b94:	2201      	movs	r2, #1
 8017b96:	4013      	ands	r3, r2
 8017b98:	d066      	beq.n	8017c68 <RegionCommonCountNbOfEnabledChannels+0x17a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8017b9a:	68fb      	ldr	r3, [r7, #12]
 8017b9c:	785b      	ldrb	r3, [r3, #1]
 8017b9e:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8017ba0:	68fb      	ldr	r3, [r7, #12]
 8017ba2:	689a      	ldr	r2, [r3, #8]
 8017ba4:	2515      	movs	r5, #21
 8017ba6:	197b      	adds	r3, r7, r5
 8017ba8:	7819      	ldrb	r1, [r3, #0]
 8017baa:	2613      	movs	r6, #19
 8017bac:	19bb      	adds	r3, r7, r6
 8017bae:	781b      	ldrb	r3, [r3, #0]
 8017bb0:	18cb      	adds	r3, r1, r3
 8017bb2:	0019      	movs	r1, r3
 8017bb4:	000b      	movs	r3, r1
 8017bb6:	005b      	lsls	r3, r3, #1
 8017bb8:	185b      	adds	r3, r3, r1
 8017bba:	009b      	lsls	r3, r3, #2
 8017bbc:	18d3      	adds	r3, r2, r3
 8017bbe:	7a1b      	ldrb	r3, [r3, #8]
 8017bc0:	011b      	lsls	r3, r3, #4
 8017bc2:	b25b      	sxtb	r3, r3
 8017bc4:	111b      	asrs	r3, r3, #4
 8017bc6:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8017bc8:	001c      	movs	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8017bca:	68fb      	ldr	r3, [r7, #12]
 8017bcc:	689a      	ldr	r2, [r3, #8]
 8017bce:	197b      	adds	r3, r7, r5
 8017bd0:	7819      	ldrb	r1, [r3, #0]
 8017bd2:	19bb      	adds	r3, r7, r6
 8017bd4:	781b      	ldrb	r3, [r3, #0]
 8017bd6:	18cb      	adds	r3, r1, r3
 8017bd8:	0019      	movs	r1, r3
 8017bda:	000b      	movs	r3, r1
 8017bdc:	005b      	lsls	r3, r3, #1
 8017bde:	185b      	adds	r3, r3, r1
 8017be0:	009b      	lsls	r3, r3, #2
 8017be2:	18d3      	adds	r3, r2, r3
 8017be4:	7a1b      	ldrb	r3, [r3, #8]
 8017be6:	b25b      	sxtb	r3, r3
 8017be8:	111b      	asrs	r3, r3, #4
 8017bea:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8017bec:	001a      	movs	r2, r3
 8017bee:	0021      	movs	r1, r4
 8017bf0:	f7ff fbff 	bl	80173f2 <RegionCommonValueInRange>
 8017bf4:	1e03      	subs	r3, r0, #0
 8017bf6:	d039      	beq.n	8017c6c <RegionCommonCountNbOfEnabledChannels+0x17e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8017bf8:	68fb      	ldr	r3, [r7, #12]
 8017bfa:	68da      	ldr	r2, [r3, #12]
 8017bfc:	68fb      	ldr	r3, [r7, #12]
 8017bfe:	6899      	ldr	r1, [r3, #8]
 8017c00:	197b      	adds	r3, r7, r5
 8017c02:	7818      	ldrb	r0, [r3, #0]
 8017c04:	19bb      	adds	r3, r7, r6
 8017c06:	781b      	ldrb	r3, [r3, #0]
 8017c08:	18c3      	adds	r3, r0, r3
 8017c0a:	0018      	movs	r0, r3
 8017c0c:	0003      	movs	r3, r0
 8017c0e:	005b      	lsls	r3, r3, #1
 8017c10:	181b      	adds	r3, r3, r0
 8017c12:	009b      	lsls	r3, r3, #2
 8017c14:	18cb      	adds	r3, r1, r3
 8017c16:	7a5b      	ldrb	r3, [r3, #9]
 8017c18:	0019      	movs	r1, r3
 8017c1a:	000b      	movs	r3, r1
 8017c1c:	009b      	lsls	r3, r3, #2
 8017c1e:	185b      	adds	r3, r3, r1
 8017c20:	009b      	lsls	r3, r3, #2
 8017c22:	18d3      	adds	r3, r2, r3
 8017c24:	7c1b      	ldrb	r3, [r3, #16]
 8017c26:	2201      	movs	r2, #1
 8017c28:	4053      	eors	r3, r2
 8017c2a:	b2db      	uxtb	r3, r3
 8017c2c:	2b00      	cmp	r3, #0
 8017c2e:	d006      	beq.n	8017c3e <RegionCommonCountNbOfEnabledChannels+0x150>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8017c30:	2116      	movs	r1, #22
 8017c32:	187b      	adds	r3, r7, r1
 8017c34:	781a      	ldrb	r2, [r3, #0]
 8017c36:	187b      	adds	r3, r7, r1
 8017c38:	3201      	adds	r2, #1
 8017c3a:	701a      	strb	r2, [r3, #0]
                    continue;
 8017c3c:	e017      	b.n	8017c6e <RegionCommonCountNbOfEnabledChannels+0x180>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8017c3e:	2217      	movs	r2, #23
 8017c40:	18bb      	adds	r3, r7, r2
 8017c42:	781b      	ldrb	r3, [r3, #0]
 8017c44:	18ba      	adds	r2, r7, r2
 8017c46:	1c59      	adds	r1, r3, #1
 8017c48:	7011      	strb	r1, [r2, #0]
 8017c4a:	001a      	movs	r2, r3
 8017c4c:	68bb      	ldr	r3, [r7, #8]
 8017c4e:	189b      	adds	r3, r3, r2
 8017c50:	2215      	movs	r2, #21
 8017c52:	18b9      	adds	r1, r7, r2
 8017c54:	2213      	movs	r2, #19
 8017c56:	18ba      	adds	r2, r7, r2
 8017c58:	7809      	ldrb	r1, [r1, #0]
 8017c5a:	7812      	ldrb	r2, [r2, #0]
 8017c5c:	188a      	adds	r2, r1, r2
 8017c5e:	b2d2      	uxtb	r2, r2
 8017c60:	701a      	strb	r2, [r3, #0]
 8017c62:	e004      	b.n	8017c6e <RegionCommonCountNbOfEnabledChannels+0x180>
                    continue;
 8017c64:	46c0      	nop			; (mov r8, r8)
 8017c66:	e002      	b.n	8017c6e <RegionCommonCountNbOfEnabledChannels+0x180>
                        continue;
 8017c68:	46c0      	nop			; (mov r8, r8)
 8017c6a:	e000      	b.n	8017c6e <RegionCommonCountNbOfEnabledChannels+0x180>
                    continue;
 8017c6c:	46c0      	nop			; (mov r8, r8)
        for( uint8_t j = 0; j < 16; j++ )
 8017c6e:	2113      	movs	r1, #19
 8017c70:	187b      	adds	r3, r7, r1
 8017c72:	781a      	ldrb	r2, [r3, #0]
 8017c74:	187b      	adds	r3, r7, r1
 8017c76:	3201      	adds	r2, #1
 8017c78:	701a      	strb	r2, [r3, #0]
 8017c7a:	2313      	movs	r3, #19
 8017c7c:	18fb      	adds	r3, r7, r3
 8017c7e:	781b      	ldrb	r3, [r3, #0]
 8017c80:	2b0f      	cmp	r3, #15
 8017c82:	d800      	bhi.n	8017c86 <RegionCommonCountNbOfEnabledChannels+0x198>
 8017c84:	e750      	b.n	8017b28 <RegionCommonCountNbOfEnabledChannels+0x3a>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8017c86:	2215      	movs	r2, #21
 8017c88:	18bb      	adds	r3, r7, r2
 8017c8a:	18ba      	adds	r2, r7, r2
 8017c8c:	7812      	ldrb	r2, [r2, #0]
 8017c8e:	3210      	adds	r2, #16
 8017c90:	701a      	strb	r2, [r3, #0]
 8017c92:	2114      	movs	r1, #20
 8017c94:	187b      	adds	r3, r7, r1
 8017c96:	781a      	ldrb	r2, [r3, #0]
 8017c98:	187b      	adds	r3, r7, r1
 8017c9a:	3201      	adds	r2, #1
 8017c9c:	701a      	strb	r2, [r3, #0]
 8017c9e:	2315      	movs	r3, #21
 8017ca0:	18fb      	adds	r3, r7, r3
 8017ca2:	781b      	ldrb	r3, [r3, #0]
 8017ca4:	b29a      	uxth	r2, r3
 8017ca6:	68fb      	ldr	r3, [r7, #12]
 8017ca8:	8a1b      	ldrh	r3, [r3, #16]
 8017caa:	429a      	cmp	r2, r3
 8017cac:	d200      	bcs.n	8017cb0 <RegionCommonCountNbOfEnabledChannels+0x1c2>
 8017cae:	e736      	b.n	8017b1e <RegionCommonCountNbOfEnabledChannels+0x30>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8017cb0:	687b      	ldr	r3, [r7, #4]
 8017cb2:	2217      	movs	r2, #23
 8017cb4:	18ba      	adds	r2, r7, r2
 8017cb6:	7812      	ldrb	r2, [r2, #0]
 8017cb8:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8017cba:	683b      	ldr	r3, [r7, #0]
 8017cbc:	2216      	movs	r2, #22
 8017cbe:	18ba      	adds	r2, r7, r2
 8017cc0:	7812      	ldrb	r2, [r2, #0]
 8017cc2:	701a      	strb	r2, [r3, #0]
}
 8017cc4:	46c0      	nop			; (mov r8, r8)
 8017cc6:	46bd      	mov	sp, r7
 8017cc8:	b007      	add	sp, #28
 8017cca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017ccc <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8017ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017cce:	46c6      	mov	lr, r8
 8017cd0:	b500      	push	{lr}
 8017cd2:	b08a      	sub	sp, #40	; 0x28
 8017cd4:	af04      	add	r7, sp, #16
 8017cd6:	60f8      	str	r0, [r7, #12]
 8017cd8:	60b9      	str	r1, [r7, #8]
 8017cda:	607a      	str	r2, [r7, #4]
 8017cdc:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8017cde:	68fb      	ldr	r3, [r7, #12]
 8017ce0:	685b      	ldr	r3, [r3, #4]
 8017ce2:	0018      	movs	r0, r3
 8017ce4:	f005 f904 	bl	801cef0 <UTIL_TIMER_GetElapsedTime>
 8017ce8:	0003      	movs	r3, r0
 8017cea:	617b      	str	r3, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8017cec:	68fb      	ldr	r3, [r7, #12]
 8017cee:	681a      	ldr	r2, [r3, #0]
 8017cf0:	697b      	ldr	r3, [r7, #20]
 8017cf2:	1ad2      	subs	r2, r2, r3
 8017cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017cf6:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8017cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cfa:	2201      	movs	r2, #1
 8017cfc:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 8017cfe:	683b      	ldr	r3, [r7, #0]
 8017d00:	2200      	movs	r2, #0
 8017d02:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8017d04:	68fb      	ldr	r3, [r7, #12]
 8017d06:	685b      	ldr	r3, [r3, #4]
 8017d08:	2b00      	cmp	r3, #0
 8017d0a:	d004      	beq.n	8017d16 <RegionCommonIdentifyChannels+0x4a>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8017d0c:	68fb      	ldr	r3, [r7, #12]
 8017d0e:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8017d10:	697a      	ldr	r2, [r7, #20]
 8017d12:	429a      	cmp	r2, r3
 8017d14:	d32b      	bcc.n	8017d6e <RegionCommonIdentifyChannels+0xa2>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8017d16:	68bb      	ldr	r3, [r7, #8]
 8017d18:	2200      	movs	r2, #0
 8017d1a:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8017d1c:	68fb      	ldr	r3, [r7, #12]
 8017d1e:	69db      	ldr	r3, [r3, #28]
 8017d20:	781b      	ldrb	r3, [r3, #0]
 8017d22:	469c      	mov	ip, r3
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8017d24:	68fb      	ldr	r3, [r7, #12]
 8017d26:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8017d28:	68dc      	ldr	r4, [r3, #12]
 8017d2a:	68fb      	ldr	r3, [r7, #12]
 8017d2c:	7a5d      	ldrb	r5, [r3, #9]
 8017d2e:	68fb      	ldr	r3, [r7, #12]
 8017d30:	7a1e      	ldrb	r6, [r3, #8]
 8017d32:	68fb      	ldr	r3, [r7, #12]
 8017d34:	7d1b      	ldrb	r3, [r3, #20]
 8017d36:	4698      	mov	r8, r3
 8017d38:	68fb      	ldr	r3, [r7, #12]
 8017d3a:	699b      	ldr	r3, [r3, #24]
 8017d3c:	9303      	str	r3, [sp, #12]
 8017d3e:	68fb      	ldr	r3, [r7, #12]
 8017d40:	2204      	movs	r2, #4
 8017d42:	446a      	add	r2, sp
 8017d44:	330c      	adds	r3, #12
 8017d46:	cb03      	ldmia	r3!, {r0, r1}
 8017d48:	c203      	stmia	r2!, {r0, r1}
 8017d4a:	4643      	mov	r3, r8
 8017d4c:	9300      	str	r3, [sp, #0]
 8017d4e:	0033      	movs	r3, r6
 8017d50:	002a      	movs	r2, r5
 8017d52:	0021      	movs	r1, r4
 8017d54:	4660      	mov	r0, ip
 8017d56:	f7ff fc60 	bl	801761a <RegionCommonUpdateBandTimeOff>
 8017d5a:	0002      	movs	r2, r0
 8017d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017d5e:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8017d60:	68fb      	ldr	r3, [r7, #12]
 8017d62:	69d8      	ldr	r0, [r3, #28]
 8017d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d66:	683a      	ldr	r2, [r7, #0]
 8017d68:	6879      	ldr	r1, [r7, #4]
 8017d6a:	f7ff fec0 	bl	8017aee <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8017d6e:	683b      	ldr	r3, [r7, #0]
 8017d70:	781b      	ldrb	r3, [r3, #0]
 8017d72:	2b00      	cmp	r3, #0
 8017d74:	d004      	beq.n	8017d80 <RegionCommonIdentifyChannels+0xb4>
    {
        *nextTxDelay = 0;
 8017d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017d78:	2200      	movs	r2, #0
 8017d7a:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8017d7c:	2300      	movs	r3, #0
 8017d7e:	e006      	b.n	8017d8e <RegionCommonIdentifyChannels+0xc2>
    }
    else if( *nbRestrictedChannels > 0 )
 8017d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d82:	781b      	ldrb	r3, [r3, #0]
 8017d84:	2b00      	cmp	r3, #0
 8017d86:	d001      	beq.n	8017d8c <RegionCommonIdentifyChannels+0xc0>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8017d88:	230b      	movs	r3, #11
 8017d8a:	e000      	b.n	8017d8e <RegionCommonIdentifyChannels+0xc2>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8017d8c:	230c      	movs	r3, #12
    }
}
 8017d8e:	0018      	movs	r0, r3
 8017d90:	46bd      	mov	sp, r7
 8017d92:	b006      	add	sp, #24
 8017d94:	bc80      	pop	{r7}
 8017d96:	46b8      	mov	r8, r7
 8017d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08017d9c <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8017d9c:	b590      	push	{r4, r7, lr}
 8017d9e:	b089      	sub	sp, #36	; 0x24
 8017da0:	af00      	add	r7, sp, #0
 8017da2:	6039      	str	r1, [r7, #0]
 8017da4:	0011      	movs	r1, r2
 8017da6:	1dfb      	adds	r3, r7, #7
 8017da8:	1c02      	adds	r2, r0, #0
 8017daa:	701a      	strb	r2, [r3, #0]
 8017dac:	1dbb      	adds	r3, r7, #6
 8017dae:	1c0a      	adds	r2, r1, #0
 8017db0:	701a      	strb	r2, [r3, #0]
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 8017db2:	2308      	movs	r3, #8
 8017db4:	18fb      	adds	r3, r7, r3
 8017db6:	4a04      	ldr	r2, [pc, #16]	; (8017dc8 <RegionCommonRxConfigPrint+0x2c>)
 8017db8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8017dba:	c313      	stmia	r3!, {r0, r1, r4}
 8017dbc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8017dbe:	c313      	stmia	r3!, {r0, r1, r4}
    }
    else
    {
//        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8017dc0:	46c0      	nop			; (mov r8, r8)
 8017dc2:	46bd      	mov	sp, r7
 8017dc4:	b009      	add	sp, #36	; 0x24
 8017dc6:	bd90      	pop	{r4, r7, pc}
 8017dc8:	0801fb38 	.word	0x0801fb38

08017dcc <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8017dcc:	b580      	push	{r7, lr}
 8017dce:	b088      	sub	sp, #32
 8017dd0:	af04      	add	r7, sp, #16
 8017dd2:	6078      	str	r0, [r7, #4]
 8017dd4:	000a      	movs	r2, r1
 8017dd6:	1cfb      	adds	r3, r7, #3
 8017dd8:	701a      	strb	r2, [r3, #0]
	uint32_t freq_mhz = frequency / 1000000; // Конвертируем частоту в мегагерцы
 8017dda:	687b      	ldr	r3, [r7, #4]
 8017ddc:	4912      	ldr	r1, [pc, #72]	; (8017e28 <RegionCommonTxConfigPrint+0x5c>)
 8017dde:	0018      	movs	r0, r3
 8017de0:	f7e8 f99a 	bl	8000118 <__udivsi3>
 8017de4:	0003      	movs	r3, r0
 8017de6:	60fb      	str	r3, [r7, #12]
	uint32_t freq_decimal = (frequency % 1000000) / 100000; // Получаем 1-ю цифру после запятой
 8017de8:	687b      	ldr	r3, [r7, #4]
 8017dea:	490f      	ldr	r1, [pc, #60]	; (8017e28 <RegionCommonTxConfigPrint+0x5c>)
 8017dec:	0018      	movs	r0, r3
 8017dee:	f7e8 fa19 	bl	8000224 <__aeabi_uidivmod>
 8017df2:	000b      	movs	r3, r1
 8017df4:	490d      	ldr	r1, [pc, #52]	; (8017e2c <RegionCommonTxConfigPrint+0x60>)
 8017df6:	0018      	movs	r0, r3
 8017df8:	f7e8 f98e 	bl	8000118 <__udivsi3>
 8017dfc:	0003      	movs	r3, r0
 8017dfe:	60bb      	str	r3, [r7, #8]
//	float freq_mhz2 = frequency / 1000000.0f; // Конвертируем частоту в мегагерцы
//    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
    MW_LOG(TS_OFF, VLEVEL_M,  "\r\n Отправка на частоте %d.%d МГц по каналу скорости передачи DR%d\r\n", freq_mhz, freq_decimal, dr );
 8017e00:	1cfb      	adds	r3, r7, #3
 8017e02:	781b      	ldrb	r3, [r3, #0]
 8017e04:	b25b      	sxtb	r3, r3
 8017e06:	4a0a      	ldr	r2, [pc, #40]	; (8017e30 <RegionCommonTxConfigPrint+0x64>)
 8017e08:	9302      	str	r3, [sp, #8]
 8017e0a:	68bb      	ldr	r3, [r7, #8]
 8017e0c:	9301      	str	r3, [sp, #4]
 8017e0e:	68fb      	ldr	r3, [r7, #12]
 8017e10:	9300      	str	r3, [sp, #0]
 8017e12:	0013      	movs	r3, r2
 8017e14:	2200      	movs	r2, #0
 8017e16:	2100      	movs	r1, #0
 8017e18:	2002      	movs	r0, #2
 8017e1a:	f003 ffe1 	bl	801bde0 <UTIL_ADV_TRACE_COND_FSend>
}
 8017e1e:	46c0      	nop			; (mov r8, r8)
 8017e20:	46bd      	mov	sp, r7
 8017e22:	b004      	add	sp, #16
 8017e24:	bd80      	pop	{r7, pc}
 8017e26:	46c0      	nop			; (mov r8, r8)
 8017e28:	000f4240 	.word	0x000f4240
 8017e2c:	000186a0 	.word	0x000186a0
 8017e30:	0801fb50 	.word	0x0801fb50

08017e34 <GetNextLowerTxDr>:
 */
static RegionEU868NvmCtx_t NvmCtx;

// Static functions
static int8_t GetNextLowerTxDr( int8_t dr, int8_t minDr )
{
 8017e34:	b580      	push	{r7, lr}
 8017e36:	b084      	sub	sp, #16
 8017e38:	af00      	add	r7, sp, #0
 8017e3a:	0002      	movs	r2, r0
 8017e3c:	1dfb      	adds	r3, r7, #7
 8017e3e:	701a      	strb	r2, [r3, #0]
 8017e40:	1dbb      	adds	r3, r7, #6
 8017e42:	1c0a      	adds	r2, r1, #0
 8017e44:	701a      	strb	r2, [r3, #0]
    uint8_t nextLowerDr = 0;
 8017e46:	210f      	movs	r1, #15
 8017e48:	187b      	adds	r3, r7, r1
 8017e4a:	2200      	movs	r2, #0
 8017e4c:	701a      	strb	r2, [r3, #0]

    if( dr == minDr )
 8017e4e:	1dfa      	adds	r2, r7, #7
 8017e50:	1dbb      	adds	r3, r7, #6
 8017e52:	7812      	ldrb	r2, [r2, #0]
 8017e54:	b252      	sxtb	r2, r2
 8017e56:	781b      	ldrb	r3, [r3, #0]
 8017e58:	b25b      	sxtb	r3, r3
 8017e5a:	429a      	cmp	r2, r3
 8017e5c:	d104      	bne.n	8017e68 <GetNextLowerTxDr+0x34>
    {
        nextLowerDr = minDr;
 8017e5e:	187b      	adds	r3, r7, r1
 8017e60:	1dba      	adds	r2, r7, #6
 8017e62:	7812      	ldrb	r2, [r2, #0]
 8017e64:	701a      	strb	r2, [r3, #0]
 8017e66:	e005      	b.n	8017e74 <GetNextLowerTxDr+0x40>
    }
    else
    {
        nextLowerDr = dr - 1;
 8017e68:	1dfb      	adds	r3, r7, #7
 8017e6a:	781a      	ldrb	r2, [r3, #0]
 8017e6c:	230f      	movs	r3, #15
 8017e6e:	18fb      	adds	r3, r7, r3
 8017e70:	3a01      	subs	r2, #1
 8017e72:	701a      	strb	r2, [r3, #0]
    }
    return nextLowerDr;
 8017e74:	230f      	movs	r3, #15
 8017e76:	18fb      	adds	r3, r7, r3
 8017e78:	781b      	ldrb	r3, [r3, #0]
 8017e7a:	b25b      	sxtb	r3, r3
}
 8017e7c:	0018      	movs	r0, r3
 8017e7e:	46bd      	mov	sp, r7
 8017e80:	b004      	add	sp, #16
 8017e82:	bd80      	pop	{r7, pc}

08017e84 <GetBandwidth>:

static uint32_t GetBandwidth( uint32_t drIndex )
{
 8017e84:	b580      	push	{r7, lr}
 8017e86:	b082      	sub	sp, #8
 8017e88:	af00      	add	r7, sp, #0
 8017e8a:	6078      	str	r0, [r7, #4]
    switch( BandwidthsEU868[drIndex] )
 8017e8c:	4b09      	ldr	r3, [pc, #36]	; (8017eb4 <GetBandwidth+0x30>)
 8017e8e:	687a      	ldr	r2, [r7, #4]
 8017e90:	0092      	lsls	r2, r2, #2
 8017e92:	58d3      	ldr	r3, [r2, r3]
 8017e94:	4a08      	ldr	r2, [pc, #32]	; (8017eb8 <GetBandwidth+0x34>)
 8017e96:	4293      	cmp	r3, r2
 8017e98:	d004      	beq.n	8017ea4 <GetBandwidth+0x20>
 8017e9a:	4a08      	ldr	r2, [pc, #32]	; (8017ebc <GetBandwidth+0x38>)
 8017e9c:	4293      	cmp	r3, r2
 8017e9e:	d003      	beq.n	8017ea8 <GetBandwidth+0x24>
    {
        default:
        case 125000:
            return 0;
 8017ea0:	2300      	movs	r3, #0
 8017ea2:	e002      	b.n	8017eaa <GetBandwidth+0x26>
        case 250000:
            return 1;
 8017ea4:	2301      	movs	r3, #1
 8017ea6:	e000      	b.n	8017eaa <GetBandwidth+0x26>
        case 500000:
            return 2;
 8017ea8:	2302      	movs	r3, #2
    }
}
 8017eaa:	0018      	movs	r0, r3
 8017eac:	46bd      	mov	sp, r7
 8017eae:	b002      	add	sp, #8
 8017eb0:	bd80      	pop	{r7, pc}
 8017eb2:	46c0      	nop			; (mov r8, r8)
 8017eb4:	0801fbd8 	.word	0x0801fbd8
 8017eb8:	0003d090 	.word	0x0003d090
 8017ebc:	0007a120 	.word	0x0007a120

08017ec0 <LimitTxPower>:

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 8017ec0:	b590      	push	{r4, r7, lr}
 8017ec2:	b085      	sub	sp, #20
 8017ec4:	af00      	add	r7, sp, #0
 8017ec6:	0004      	movs	r4, r0
 8017ec8:	0008      	movs	r0, r1
 8017eca:	0011      	movs	r1, r2
 8017ecc:	603b      	str	r3, [r7, #0]
 8017ece:	1dfb      	adds	r3, r7, #7
 8017ed0:	1c22      	adds	r2, r4, #0
 8017ed2:	701a      	strb	r2, [r3, #0]
 8017ed4:	1dbb      	adds	r3, r7, #6
 8017ed6:	1c02      	adds	r2, r0, #0
 8017ed8:	701a      	strb	r2, [r3, #0]
 8017eda:	1d7b      	adds	r3, r7, #5
 8017edc:	1c0a      	adds	r2, r1, #0
 8017ede:	701a      	strb	r2, [r3, #0]
    int8_t txPowerResult = txPower;
 8017ee0:	210f      	movs	r1, #15
 8017ee2:	187b      	adds	r3, r7, r1
 8017ee4:	1dfa      	adds	r2, r7, #7
 8017ee6:	7812      	ldrb	r2, [r2, #0]
 8017ee8:	701a      	strb	r2, [r3, #0]

    // Limit tx power to the band max
    txPowerResult =  MAX( txPower, maxBandTxPower );
 8017eea:	187a      	adds	r2, r7, r1
 8017eec:	1dbb      	adds	r3, r7, #6
 8017eee:	1df9      	adds	r1, r7, #7
 8017ef0:	780c      	ldrb	r4, [r1, #0]
 8017ef2:	781b      	ldrb	r3, [r3, #0]
 8017ef4:	b258      	sxtb	r0, r3
 8017ef6:	b261      	sxtb	r1, r4
 8017ef8:	4288      	cmp	r0, r1
 8017efa:	da00      	bge.n	8017efe <LimitTxPower+0x3e>
 8017efc:	1c23      	adds	r3, r4, #0
 8017efe:	7013      	strb	r3, [r2, #0]

    return txPowerResult;
 8017f00:	230f      	movs	r3, #15
 8017f02:	18fb      	adds	r3, r7, r3
 8017f04:	781b      	ldrb	r3, [r3, #0]
 8017f06:	b25b      	sxtb	r3, r3
}
 8017f08:	0018      	movs	r0, r3
 8017f0a:	46bd      	mov	sp, r7
 8017f0c:	b005      	add	sp, #20
 8017f0e:	bd90      	pop	{r4, r7, pc}

08017f10 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8017f10:	b580      	push	{r7, lr}
 8017f12:	b082      	sub	sp, #8
 8017f14:	af00      	add	r7, sp, #0
 8017f16:	6078      	str	r0, [r7, #4]
 8017f18:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8017f1a:	4b2e      	ldr	r3, [pc, #184]	; (8017fd4 <VerifyRfFreq+0xc4>)
 8017f1c:	6a1b      	ldr	r3, [r3, #32]
 8017f1e:	687a      	ldr	r2, [r7, #4]
 8017f20:	0010      	movs	r0, r2
 8017f22:	4798      	blx	r3
 8017f24:	0003      	movs	r3, r0
 8017f26:	001a      	movs	r2, r3
 8017f28:	2301      	movs	r3, #1
 8017f2a:	4053      	eors	r3, r2
 8017f2c:	b2db      	uxtb	r3, r3
 8017f2e:	2b00      	cmp	r3, #0
 8017f30:	d001      	beq.n	8017f36 <VerifyRfFreq+0x26>
    {
        return false;
 8017f32:	2300      	movs	r3, #0
 8017f34:	e04a      	b.n	8017fcc <VerifyRfFreq+0xbc>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 8017f36:	687b      	ldr	r3, [r7, #4]
 8017f38:	4a27      	ldr	r2, [pc, #156]	; (8017fd8 <VerifyRfFreq+0xc8>)
 8017f3a:	4293      	cmp	r3, r2
 8017f3c:	d907      	bls.n	8017f4e <VerifyRfFreq+0x3e>
 8017f3e:	687b      	ldr	r3, [r7, #4]
 8017f40:	4a26      	ldr	r2, [pc, #152]	; (8017fdc <VerifyRfFreq+0xcc>)
 8017f42:	4293      	cmp	r3, r2
 8017f44:	d803      	bhi.n	8017f4e <VerifyRfFreq+0x3e>
    {
        *band = 2;
 8017f46:	683b      	ldr	r3, [r7, #0]
 8017f48:	2202      	movs	r2, #2
 8017f4a:	701a      	strb	r2, [r3, #0]
 8017f4c:	e03d      	b.n	8017fca <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 8017f4e:	687b      	ldr	r3, [r7, #4]
 8017f50:	4a22      	ldr	r2, [pc, #136]	; (8017fdc <VerifyRfFreq+0xcc>)
 8017f52:	4293      	cmp	r3, r2
 8017f54:	d907      	bls.n	8017f66 <VerifyRfFreq+0x56>
 8017f56:	687b      	ldr	r3, [r7, #4]
 8017f58:	4a21      	ldr	r2, [pc, #132]	; (8017fe0 <VerifyRfFreq+0xd0>)
 8017f5a:	4293      	cmp	r3, r2
 8017f5c:	d803      	bhi.n	8017f66 <VerifyRfFreq+0x56>
    {
        *band = 0;
 8017f5e:	683b      	ldr	r3, [r7, #0]
 8017f60:	2200      	movs	r2, #0
 8017f62:	701a      	strb	r2, [r3, #0]
 8017f64:	e031      	b.n	8017fca <VerifyRfFreq+0xba>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 8017f66:	687b      	ldr	r3, [r7, #4]
 8017f68:	4a1d      	ldr	r2, [pc, #116]	; (8017fe0 <VerifyRfFreq+0xd0>)
 8017f6a:	4293      	cmp	r3, r2
 8017f6c:	d907      	bls.n	8017f7e <VerifyRfFreq+0x6e>
 8017f6e:	687b      	ldr	r3, [r7, #4]
 8017f70:	4a1c      	ldr	r2, [pc, #112]	; (8017fe4 <VerifyRfFreq+0xd4>)
 8017f72:	4293      	cmp	r3, r2
 8017f74:	d803      	bhi.n	8017f7e <VerifyRfFreq+0x6e>
    {
        *band = 1;
 8017f76:	683b      	ldr	r3, [r7, #0]
 8017f78:	2201      	movs	r2, #1
 8017f7a:	701a      	strb	r2, [r3, #0]
 8017f7c:	e025      	b.n	8017fca <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 8017f7e:	687b      	ldr	r3, [r7, #4]
 8017f80:	4a19      	ldr	r2, [pc, #100]	; (8017fe8 <VerifyRfFreq+0xd8>)
 8017f82:	4293      	cmp	r3, r2
 8017f84:	d907      	bls.n	8017f96 <VerifyRfFreq+0x86>
 8017f86:	687b      	ldr	r3, [r7, #4]
 8017f88:	4a18      	ldr	r2, [pc, #96]	; (8017fec <VerifyRfFreq+0xdc>)
 8017f8a:	4293      	cmp	r3, r2
 8017f8c:	d803      	bhi.n	8017f96 <VerifyRfFreq+0x86>
    {
        *band = 5;
 8017f8e:	683b      	ldr	r3, [r7, #0]
 8017f90:	2205      	movs	r2, #5
 8017f92:	701a      	strb	r2, [r3, #0]
 8017f94:	e019      	b.n	8017fca <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 8017f96:	687b      	ldr	r3, [r7, #4]
 8017f98:	4a15      	ldr	r2, [pc, #84]	; (8017ff0 <VerifyRfFreq+0xe0>)
 8017f9a:	4293      	cmp	r3, r2
 8017f9c:	d907      	bls.n	8017fae <VerifyRfFreq+0x9e>
 8017f9e:	687b      	ldr	r3, [r7, #4]
 8017fa0:	4a14      	ldr	r2, [pc, #80]	; (8017ff4 <VerifyRfFreq+0xe4>)
 8017fa2:	4293      	cmp	r3, r2
 8017fa4:	d803      	bhi.n	8017fae <VerifyRfFreq+0x9e>
    {
        *band = 3;
 8017fa6:	683b      	ldr	r3, [r7, #0]
 8017fa8:	2203      	movs	r2, #3
 8017faa:	701a      	strb	r2, [r3, #0]
 8017fac:	e00d      	b.n	8017fca <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 8017fae:	687b      	ldr	r3, [r7, #4]
 8017fb0:	4a11      	ldr	r2, [pc, #68]	; (8017ff8 <VerifyRfFreq+0xe8>)
 8017fb2:	4293      	cmp	r3, r2
 8017fb4:	d907      	bls.n	8017fc6 <VerifyRfFreq+0xb6>
 8017fb6:	687b      	ldr	r3, [r7, #4]
 8017fb8:	4a10      	ldr	r2, [pc, #64]	; (8017ffc <VerifyRfFreq+0xec>)
 8017fba:	4293      	cmp	r3, r2
 8017fbc:	d803      	bhi.n	8017fc6 <VerifyRfFreq+0xb6>
    {
        *band = 4;
 8017fbe:	683b      	ldr	r3, [r7, #0]
 8017fc0:	2204      	movs	r2, #4
 8017fc2:	701a      	strb	r2, [r3, #0]
 8017fc4:	e001      	b.n	8017fca <VerifyRfFreq+0xba>
    }
    else
    {
        return false;
 8017fc6:	2300      	movs	r3, #0
 8017fc8:	e000      	b.n	8017fcc <VerifyRfFreq+0xbc>
    }
    return true;
 8017fca:	2301      	movs	r3, #1
}
 8017fcc:	0018      	movs	r0, r3
 8017fce:	46bd      	mov	sp, r7
 8017fd0:	b002      	add	sp, #8
 8017fd2:	bd80      	pop	{r7, pc}
 8017fd4:	0801fd54 	.word	0x0801fd54
 8017fd8:	337055bf 	.word	0x337055bf
 8017fdc:	338eda3f 	.word	0x338eda3f
 8017fe0:	33bca100 	.word	0x33bca100
 8017fe4:	33c5c8c0 	.word	0x33c5c8c0
 8017fe8:	33c74f5f 	.word	0x33c74f5f
 8017fec:	33cef080 	.word	0x33cef080
 8017ff0:	33d1fdbf 	.word	0x33d1fdbf
 8017ff4:	33d5ce50 	.word	0x33d5ce50
 8017ff8:	33d6919f 	.word	0x33d6919f
 8017ffc:	33db2580 	.word	0x33db2580

08018000 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8018000:	b5b0      	push	{r4, r5, r7, lr}
 8018002:	b08a      	sub	sp, #40	; 0x28
 8018004:	af04      	add	r7, sp, #16
 8018006:	0002      	movs	r2, r0
 8018008:	1dfb      	adds	r3, r7, #7
 801800a:	701a      	strb	r2, [r3, #0]
 801800c:	1d3b      	adds	r3, r7, #4
 801800e:	1c0a      	adds	r2, r1, #0
 8018010:	801a      	strh	r2, [r3, #0]
    int8_t phyDr = DataratesEU868[datarate];
 8018012:	1dfb      	adds	r3, r7, #7
 8018014:	781b      	ldrb	r3, [r3, #0]
 8018016:	b25b      	sxtb	r3, r3
 8018018:	4a26      	ldr	r2, [pc, #152]	; (80180b4 <GetTimeOnAir+0xb4>)
 801801a:	5cd2      	ldrb	r2, [r2, r3]
 801801c:	2513      	movs	r5, #19
 801801e:	197b      	adds	r3, r7, r5
 8018020:	701a      	strb	r2, [r3, #0]
    uint32_t bandwidth = GetBandwidth( datarate );
 8018022:	1dfb      	adds	r3, r7, #7
 8018024:	781b      	ldrb	r3, [r3, #0]
 8018026:	b25b      	sxtb	r3, r3
 8018028:	0018      	movs	r0, r3
 801802a:	f7ff ff2b 	bl	8017e84 <GetBandwidth>
 801802e:	0003      	movs	r3, r0
 8018030:	60fb      	str	r3, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8018032:	2300      	movs	r3, #0
 8018034:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8018036:	1dfb      	adds	r3, r7, #7
 8018038:	781b      	ldrb	r3, [r3, #0]
 801803a:	b25b      	sxtb	r3, r3
 801803c:	2b07      	cmp	r3, #7
 801803e:	d11d      	bne.n	801807c <GetTimeOnAir+0x7c>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8018040:	4b1d      	ldr	r3, [pc, #116]	; (80180b8 <GetTimeOnAir+0xb8>)
 8018042:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8018044:	197b      	adds	r3, r7, r5
 8018046:	2200      	movs	r2, #0
 8018048:	569a      	ldrsb	r2, [r3, r2]
 801804a:	0013      	movs	r3, r2
 801804c:	015b      	lsls	r3, r3, #5
 801804e:	1a9b      	subs	r3, r3, r2
 8018050:	009b      	lsls	r3, r3, #2
 8018052:	189b      	adds	r3, r3, r2
 8018054:	00db      	lsls	r3, r3, #3
 8018056:	0018      	movs	r0, r3
 8018058:	1d3b      	adds	r3, r7, #4
 801805a:	881b      	ldrh	r3, [r3, #0]
 801805c:	b2db      	uxtb	r3, r3
 801805e:	68f9      	ldr	r1, [r7, #12]
 8018060:	2201      	movs	r2, #1
 8018062:	9203      	str	r2, [sp, #12]
 8018064:	9302      	str	r3, [sp, #8]
 8018066:	2300      	movs	r3, #0
 8018068:	9301      	str	r3, [sp, #4]
 801806a:	2305      	movs	r3, #5
 801806c:	9300      	str	r3, [sp, #0]
 801806e:	2300      	movs	r3, #0
 8018070:	0002      	movs	r2, r0
 8018072:	2000      	movs	r0, #0
 8018074:	47a0      	blx	r4
 8018076:	0003      	movs	r3, r0
 8018078:	617b      	str	r3, [r7, #20]
 801807a:	e015      	b.n	80180a8 <GetTimeOnAir+0xa8>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 801807c:	4b0e      	ldr	r3, [pc, #56]	; (80180b8 <GetTimeOnAir+0xb8>)
 801807e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8018080:	2313      	movs	r3, #19
 8018082:	18fb      	adds	r3, r7, r3
 8018084:	2200      	movs	r2, #0
 8018086:	569a      	ldrsb	r2, [r3, r2]
 8018088:	1d3b      	adds	r3, r7, #4
 801808a:	881b      	ldrh	r3, [r3, #0]
 801808c:	b2db      	uxtb	r3, r3
 801808e:	68f9      	ldr	r1, [r7, #12]
 8018090:	2001      	movs	r0, #1
 8018092:	9003      	str	r0, [sp, #12]
 8018094:	9302      	str	r3, [sp, #8]
 8018096:	2300      	movs	r3, #0
 8018098:	9301      	str	r3, [sp, #4]
 801809a:	2308      	movs	r3, #8
 801809c:	9300      	str	r3, [sp, #0]
 801809e:	2301      	movs	r3, #1
 80180a0:	2001      	movs	r0, #1
 80180a2:	47a0      	blx	r4
 80180a4:	0003      	movs	r3, r0
 80180a6:	617b      	str	r3, [r7, #20]
    }
    return timeOnAir;
 80180a8:	697b      	ldr	r3, [r7, #20]
}
 80180aa:	0018      	movs	r0, r3
 80180ac:	46bd      	mov	sp, r7
 80180ae:	b006      	add	sp, #24
 80180b0:	bdb0      	pop	{r4, r5, r7, pc}
 80180b2:	46c0      	nop			; (mov r8, r8)
 80180b4:	0801fbd0 	.word	0x0801fbd0
 80180b8:	0801fd54 	.word	0x0801fd54

080180bc <RegionEU868GetPhyParam>:

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 80180bc:	b580      	push	{r7, lr}
 80180be:	b084      	sub	sp, #16
 80180c0:	af00      	add	r7, sp, #0
 80180c2:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 80180c4:	2308      	movs	r3, #8
 80180c6:	18fb      	adds	r3, r7, r3
 80180c8:	2200      	movs	r2, #0
 80180ca:	601a      	str	r2, [r3, #0]

    switch( getPhy->Attribute )
 80180cc:	687b      	ldr	r3, [r7, #4]
 80180ce:	781b      	ldrb	r3, [r3, #0]
 80180d0:	2b39      	cmp	r3, #57	; 0x39
 80180d2:	d900      	bls.n	80180d6 <RegionEU868GetPhyParam+0x1a>
 80180d4:	e0e9      	b.n	80182aa <RegionEU868GetPhyParam+0x1ee>
 80180d6:	009a      	lsls	r2, r3, #2
 80180d8:	4b7b      	ldr	r3, [pc, #492]	; (80182c8 <RegionEU868GetPhyParam+0x20c>)
 80180da:	18d3      	adds	r3, r2, r3
 80180dc:	681b      	ldr	r3, [r3, #0]
 80180de:	469f      	mov	pc, r3
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 80180e0:	2308      	movs	r3, #8
 80180e2:	18fb      	adds	r3, r7, r3
 80180e4:	2200      	movs	r2, #0
 80180e6:	601a      	str	r2, [r3, #0]
            break;
 80180e8:	e0e0      	b.n	80182ac <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 80180ea:	2308      	movs	r3, #8
 80180ec:	18fb      	adds	r3, r7, r3
 80180ee:	2200      	movs	r2, #0
 80180f0:	601a      	str	r2, [r3, #0]
            break;
 80180f2:	e0db      	b.n	80182ac <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 80180f4:	2308      	movs	r3, #8
 80180f6:	18fb      	adds	r3, r7, r3
 80180f8:	2200      	movs	r2, #0
 80180fa:	601a      	str	r2, [r3, #0]
            break;
 80180fc:	e0d6      	b.n	80182ac <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, EU868_TX_MIN_DATARATE );
 80180fe:	687b      	ldr	r3, [r7, #4]
 8018100:	785b      	ldrb	r3, [r3, #1]
 8018102:	b25b      	sxtb	r3, r3
 8018104:	2100      	movs	r1, #0
 8018106:	0018      	movs	r0, r3
 8018108:	f7ff fe94 	bl	8017e34 <GetNextLowerTxDr>
 801810c:	0003      	movs	r3, r0
 801810e:	001a      	movs	r2, r3
 8018110:	2308      	movs	r3, #8
 8018112:	18fb      	adds	r3, r7, r3
 8018114:	601a      	str	r2, [r3, #0]
            break;
 8018116:	e0c9      	b.n	80182ac <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 8018118:	2308      	movs	r3, #8
 801811a:	18fb      	adds	r3, r7, r3
 801811c:	2200      	movs	r2, #0
 801811e:	601a      	str	r2, [r3, #0]
            break;
 8018120:	e0c4      	b.n	80182ac <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8018122:	2308      	movs	r3, #8
 8018124:	18fb      	adds	r3, r7, r3
 8018126:	2200      	movs	r2, #0
 8018128:	601a      	str	r2, [r3, #0]
            break;
 801812a:	e0bf      	b.n	80182ac <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = EU868_ADR_ACK_LIMIT;
 801812c:	2308      	movs	r3, #8
 801812e:	18fb      	adds	r3, r7, r3
 8018130:	2240      	movs	r2, #64	; 0x40
 8018132:	601a      	str	r2, [r3, #0]
            break;
 8018134:	e0ba      	b.n	80182ac <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = EU868_ADR_ACK_DELAY;
 8018136:	2308      	movs	r3, #8
 8018138:	18fb      	adds	r3, r7, r3
 801813a:	2220      	movs	r2, #32
 801813c:	601a      	str	r2, [r3, #0]
            break;
 801813e:	e0b5      	b.n	80182ac <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8018140:	687b      	ldr	r3, [r7, #4]
 8018142:	785b      	ldrb	r3, [r3, #1]
 8018144:	b25b      	sxtb	r3, r3
 8018146:	001a      	movs	r2, r3
 8018148:	4b60      	ldr	r3, [pc, #384]	; (80182cc <RegionEU868GetPhyParam+0x210>)
 801814a:	5c9b      	ldrb	r3, [r3, r2]
 801814c:	001a      	movs	r2, r3
 801814e:	2308      	movs	r3, #8
 8018150:	18fb      	adds	r3, r7, r3
 8018152:	601a      	str	r2, [r3, #0]
            break;
 8018154:	e0aa      	b.n	80182ac <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8018156:	687b      	ldr	r3, [r7, #4]
 8018158:	785b      	ldrb	r3, [r3, #1]
 801815a:	b25b      	sxtb	r3, r3
 801815c:	001a      	movs	r2, r3
 801815e:	4b5c      	ldr	r3, [pc, #368]	; (80182d0 <RegionEU868GetPhyParam+0x214>)
 8018160:	5c9b      	ldrb	r3, [r3, r2]
 8018162:	001a      	movs	r2, r3
 8018164:	2308      	movs	r3, #8
 8018166:	18fb      	adds	r3, r7, r3
 8018168:	601a      	str	r2, [r3, #0]
            break;
 801816a:	e09f      	b.n	80182ac <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 801816c:	2308      	movs	r3, #8
 801816e:	18fb      	adds	r3, r7, r3
 8018170:	2201      	movs	r2, #1
 8018172:	601a      	str	r2, [r3, #0]
            break;
 8018174:	e09a      	b.n	80182ac <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8018176:	2308      	movs	r3, #8
 8018178:	18fb      	adds	r3, r7, r3
 801817a:	4a56      	ldr	r2, [pc, #344]	; (80182d4 <RegionEU868GetPhyParam+0x218>)
 801817c:	601a      	str	r2, [r3, #0]
            break;
 801817e:	e095      	b.n	80182ac <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = EU868_RECEIVE_DELAY1;
 8018180:	2308      	movs	r3, #8
 8018182:	18fb      	adds	r3, r7, r3
 8018184:	22fa      	movs	r2, #250	; 0xfa
 8018186:	0092      	lsls	r2, r2, #2
 8018188:	601a      	str	r2, [r3, #0]
            break;
 801818a:	e08f      	b.n	80182ac <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = EU868_RECEIVE_DELAY2;
 801818c:	2308      	movs	r3, #8
 801818e:	18fb      	adds	r3, r7, r3
 8018190:	22fa      	movs	r2, #250	; 0xfa
 8018192:	00d2      	lsls	r2, r2, #3
 8018194:	601a      	str	r2, [r3, #0]
            break;
 8018196:	e089      	b.n	80182ac <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = EU868_JOIN_ACCEPT_DELAY1;
 8018198:	2308      	movs	r3, #8
 801819a:	18fb      	adds	r3, r7, r3
 801819c:	4a4e      	ldr	r2, [pc, #312]	; (80182d8 <RegionEU868GetPhyParam+0x21c>)
 801819e:	601a      	str	r2, [r3, #0]
            break;
 80181a0:	e084      	b.n	80182ac <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = EU868_JOIN_ACCEPT_DELAY2;
 80181a2:	2308      	movs	r3, #8
 80181a4:	18fb      	adds	r3, r7, r3
 80181a6:	4a4d      	ldr	r2, [pc, #308]	; (80182dc <RegionEU868GetPhyParam+0x220>)
 80181a8:	601a      	str	r2, [r3, #0]
            break;
 80181aa:	e07f      	b.n	80182ac <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = EU868_MAX_FCNT_GAP;
 80181ac:	2308      	movs	r3, #8
 80181ae:	18fb      	adds	r3, r7, r3
 80181b0:	2280      	movs	r2, #128	; 0x80
 80181b2:	01d2      	lsls	r2, r2, #7
 80181b4:	601a      	str	r2, [r3, #0]
            break;
 80181b6:	e079      	b.n	80182ac <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( EU868_ACKTIMEOUT + randr( -EU868_ACK_TIMEOUT_RND, EU868_ACK_TIMEOUT_RND ) );
 80181b8:	23fa      	movs	r3, #250	; 0xfa
 80181ba:	009b      	lsls	r3, r3, #2
 80181bc:	4a48      	ldr	r2, [pc, #288]	; (80182e0 <RegionEU868GetPhyParam+0x224>)
 80181be:	0019      	movs	r1, r3
 80181c0:	0010      	movs	r0, r2
 80181c2:	f001 f983 	bl	80194cc <randr>
 80181c6:	0003      	movs	r3, r0
 80181c8:	22fa      	movs	r2, #250	; 0xfa
 80181ca:	00d2      	lsls	r2, r2, #3
 80181cc:	4694      	mov	ip, r2
 80181ce:	4463      	add	r3, ip
 80181d0:	001a      	movs	r2, r3
 80181d2:	2308      	movs	r3, #8
 80181d4:	18fb      	adds	r3, r7, r3
 80181d6:	601a      	str	r2, [r3, #0]
            break;
 80181d8:	e068      	b.n	80182ac <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = EU868_DEFAULT_RX1_DR_OFFSET;
 80181da:	2308      	movs	r3, #8
 80181dc:	18fb      	adds	r3, r7, r3
 80181de:	2200      	movs	r2, #0
 80181e0:	601a      	str	r2, [r3, #0]
            break;
 80181e2:	e063      	b.n	80182ac <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 80181e4:	2308      	movs	r3, #8
 80181e6:	18fb      	adds	r3, r7, r3
 80181e8:	4a3e      	ldr	r2, [pc, #248]	; (80182e4 <RegionEU868GetPhyParam+0x228>)
 80181ea:	601a      	str	r2, [r3, #0]
            break;
 80181ec:	e05e      	b.n	80182ac <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 80181ee:	2308      	movs	r3, #8
 80181f0:	18fb      	adds	r3, r7, r3
 80181f2:	2200      	movs	r2, #0
 80181f4:	601a      	str	r2, [r3, #0]
            break;
 80181f6:	e059      	b.n	80182ac <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsMask;
 80181f8:	2308      	movs	r3, #8
 80181fa:	18fb      	adds	r3, r7, r3
 80181fc:	4a3a      	ldr	r2, [pc, #232]	; (80182e8 <RegionEU868GetPhyParam+0x22c>)
 80181fe:	601a      	str	r2, [r3, #0]
            break;
 8018200:	e054      	b.n	80182ac <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsDefaultMask;
 8018202:	2308      	movs	r3, #8
 8018204:	18fb      	adds	r3, r7, r3
 8018206:	4a39      	ldr	r2, [pc, #228]	; (80182ec <RegionEU868GetPhyParam+0x230>)
 8018208:	601a      	str	r2, [r3, #0]
            break;
 801820a:	e04f      	b.n	80182ac <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 801820c:	2308      	movs	r3, #8
 801820e:	18fb      	adds	r3, r7, r3
 8018210:	2210      	movs	r2, #16
 8018212:	601a      	str	r2, [r3, #0]
            break;
 8018214:	e04a      	b.n	80182ac <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = NvmCtx.Channels;
 8018216:	2308      	movs	r3, #8
 8018218:	18fb      	adds	r3, r7, r3
 801821a:	4a35      	ldr	r2, [pc, #212]	; (80182f0 <RegionEU868GetPhyParam+0x234>)
 801821c:	601a      	str	r2, [r3, #0]
            break;
 801821e:	e045      	b.n	80182ac <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = 0;
 8018220:	2308      	movs	r3, #8
 8018222:	18fb      	adds	r3, r7, r3
 8018224:	2200      	movs	r2, #0
 8018226:	601a      	str	r2, [r3, #0]
            break;
 8018228:	e040      	b.n	80182ac <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 801822a:	2308      	movs	r3, #8
 801822c:	18fb      	adds	r3, r7, r3
 801822e:	2283      	movs	r2, #131	; 0x83
 8018230:	05d2      	lsls	r2, r2, #23
 8018232:	601a      	str	r2, [r3, #0]
            break;
 8018234:	e03a      	b.n	80182ac <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8018236:	2308      	movs	r3, #8
 8018238:	18fb      	adds	r3, r7, r3
 801823a:	4a2e      	ldr	r2, [pc, #184]	; (80182f4 <RegionEU868GetPhyParam+0x238>)
 801823c:	601a      	str	r2, [r3, #0]
            break;
 801823e:	e035      	b.n	80182ac <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8018240:	2308      	movs	r3, #8
 8018242:	18fb      	adds	r3, r7, r3
 8018244:	4a27      	ldr	r2, [pc, #156]	; (80182e4 <RegionEU868GetPhyParam+0x228>)
 8018246:	601a      	str	r2, [r3, #0]
            break;
 8018248:	e030      	b.n	80182ac <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 801824a:	2108      	movs	r1, #8
 801824c:	187b      	adds	r3, r7, r1
 801824e:	2211      	movs	r2, #17
 8018250:	701a      	strb	r2, [r3, #0]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8018252:	187b      	adds	r3, r7, r1
 8018254:	2202      	movs	r2, #2
 8018256:	705a      	strb	r2, [r3, #1]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 8018258:	187b      	adds	r3, r7, r1
 801825a:	2200      	movs	r2, #0
 801825c:	709a      	strb	r2, [r3, #2]
            break;
 801825e:	e025      	b.n	80182ac <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 8018260:	2308      	movs	r3, #8
 8018262:	18fb      	adds	r3, r7, r3
 8018264:	2203      	movs	r2, #3
 8018266:	601a      	str	r2, [r3, #0]
            break;
 8018268:	e020      	b.n	80182ac <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 801826a:	2308      	movs	r3, #8
 801826c:	18fb      	adds	r3, r7, r3
 801826e:	4a1d      	ldr	r2, [pc, #116]	; (80182e4 <RegionEU868GetPhyParam+0x228>)
 8018270:	601a      	str	r2, [r3, #0]
            break;
 8018272:	e01b      	b.n	80182ac <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 8018274:	2308      	movs	r3, #8
 8018276:	18fb      	adds	r3, r7, r3
 8018278:	2203      	movs	r2, #3
 801827a:	601a      	str	r2, [r3, #0]
            break;
 801827c:	e016      	b.n	80182ac <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 801827e:	687b      	ldr	r3, [r7, #4]
 8018280:	785b      	ldrb	r3, [r3, #1]
 8018282:	b25b      	sxtb	r3, r3
 8018284:	001a      	movs	r2, r3
 8018286:	4b1c      	ldr	r3, [pc, #112]	; (80182f8 <RegionEU868GetPhyParam+0x23c>)
 8018288:	5c9b      	ldrb	r3, [r3, r2]
 801828a:	001a      	movs	r2, r3
 801828c:	2308      	movs	r3, #8
 801828e:	18fb      	adds	r3, r7, r3
 8018290:	601a      	str	r2, [r3, #0]
            break;
 8018292:	e00b      	b.n	80182ac <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = GetBandwidth( getPhy->Datarate );
 8018294:	687b      	ldr	r3, [r7, #4]
 8018296:	785b      	ldrb	r3, [r3, #1]
 8018298:	b25b      	sxtb	r3, r3
 801829a:	0018      	movs	r0, r3
 801829c:	f7ff fdf2 	bl	8017e84 <GetBandwidth>
 80182a0:	0002      	movs	r2, r0
 80182a2:	2308      	movs	r3, #8
 80182a4:	18fb      	adds	r3, r7, r3
 80182a6:	601a      	str	r2, [r3, #0]
            break;
 80182a8:	e000      	b.n	80182ac <RegionEU868GetPhyParam+0x1f0>
        }
        default:
        {
            break;
 80182aa:	46c0      	nop			; (mov r8, r8)
        }
    }

    return phyParam;
 80182ac:	210c      	movs	r1, #12
 80182ae:	187b      	adds	r3, r7, r1
 80182b0:	2208      	movs	r2, #8
 80182b2:	18ba      	adds	r2, r7, r2
 80182b4:	6812      	ldr	r2, [r2, #0]
 80182b6:	601a      	str	r2, [r3, #0]
 80182b8:	187b      	adds	r3, r7, r1
 80182ba:	2200      	movs	r2, #0
 80182bc:	681a      	ldr	r2, [r3, #0]
 80182be:	0013      	movs	r3, r2
}
 80182c0:	0018      	movs	r0, r3
 80182c2:	46bd      	mov	sp, r7
 80182c4:	b004      	add	sp, #16
 80182c6:	bd80      	pop	{r7, pc}
 80182c8:	0801fc08 	.word	0x0801fc08
 80182cc:	0801fbf8 	.word	0x0801fbf8
 80182d0:	0801fc00 	.word	0x0801fc00
 80182d4:	00000bb8 	.word	0x00000bb8
 80182d8:	00001388 	.word	0x00001388
 80182dc:	00001770 	.word	0x00001770
 80182e0:	fffffc18 	.word	0xfffffc18
 80182e4:	33d3e608 	.word	0x33d3e608
 80182e8:	20000e7c 	.word	0x20000e7c
 80182ec:	20000e7e 	.word	0x20000e7e
 80182f0:	20000d44 	.word	0x20000d44
 80182f4:	4009999a 	.word	0x4009999a
 80182f8:	0801fbd0 	.word	0x0801fbd0

080182fc <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 80182fc:	b5b0      	push	{r4, r5, r7, lr}
 80182fe:	b084      	sub	sp, #16
 8018300:	af02      	add	r7, sp, #8
 8018302:	6078      	str	r0, [r7, #4]
    RegionCommonSetBandTxDone( &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band],
 8018304:	687b      	ldr	r3, [r7, #4]
 8018306:	781b      	ldrb	r3, [r3, #0]
 8018308:	0019      	movs	r1, r3
 801830a:	4a11      	ldr	r2, [pc, #68]	; (8018350 <RegionEU868SetBandTxDone+0x54>)
 801830c:	000b      	movs	r3, r1
 801830e:	005b      	lsls	r3, r3, #1
 8018310:	185b      	adds	r3, r3, r1
 8018312:	009b      	lsls	r3, r3, #2
 8018314:	18d3      	adds	r3, r2, r3
 8018316:	3309      	adds	r3, #9
 8018318:	781b      	ldrb	r3, [r3, #0]
 801831a:	001a      	movs	r2, r3
 801831c:	0013      	movs	r3, r2
 801831e:	009b      	lsls	r3, r3, #2
 8018320:	189b      	adds	r3, r3, r2
 8018322:	009b      	lsls	r3, r3, #2
 8018324:	33c0      	adds	r3, #192	; 0xc0
 8018326:	001a      	movs	r2, r3
 8018328:	4b09      	ldr	r3, [pc, #36]	; (8018350 <RegionEU868SetBandTxDone+0x54>)
 801832a:	18d0      	adds	r0, r2, r3
 801832c:	687b      	ldr	r3, [r7, #4]
 801832e:	689c      	ldr	r4, [r3, #8]
 8018330:	687b      	ldr	r3, [r7, #4]
 8018332:	785d      	ldrb	r5, [r3, #1]
 8018334:	687b      	ldr	r3, [r7, #4]
 8018336:	466a      	mov	r2, sp
 8018338:	6919      	ldr	r1, [r3, #16]
 801833a:	6011      	str	r1, [r2, #0]
 801833c:	68db      	ldr	r3, [r3, #12]
 801833e:	002a      	movs	r2, r5
 8018340:	0021      	movs	r1, r4
 8018342:	f7ff f92e 	bl	80175a2 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
}
 8018346:	46c0      	nop			; (mov r8, r8)
 8018348:	46bd      	mov	sp, r7
 801834a:	b002      	add	sp, #8
 801834c:	bdb0      	pop	{r4, r5, r7, pc}
 801834e:	46c0      	nop			; (mov r8, r8)
 8018350:	20000d44 	.word	0x20000d44

08018354 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8018354:	b590      	push	{r4, r7, lr}
 8018356:	b0ab      	sub	sp, #172	; 0xac
 8018358:	af00      	add	r7, sp, #0
 801835a:	6078      	str	r0, [r7, #4]
    Band_t bands[EU868_MAX_NB_BANDS] =
 801835c:	2430      	movs	r4, #48	; 0x30
 801835e:	193b      	adds	r3, r7, r4
 8018360:	0018      	movs	r0, r3
 8018362:	2378      	movs	r3, #120	; 0x78
 8018364:	001a      	movs	r2, r3
 8018366:	2100      	movs	r1, #0
 8018368:	f005 fdd7 	bl	801df1a <memset>
 801836c:	0021      	movs	r1, r4
 801836e:	187b      	adds	r3, r7, r1
 8018370:	2264      	movs	r2, #100	; 0x64
 8018372:	801a      	strh	r2, [r3, #0]
 8018374:	187b      	adds	r3, r7, r1
 8018376:	2264      	movs	r2, #100	; 0x64
 8018378:	829a      	strh	r2, [r3, #20]
 801837a:	187b      	adds	r3, r7, r1
 801837c:	22fa      	movs	r2, #250	; 0xfa
 801837e:	0092      	lsls	r2, r2, #2
 8018380:	851a      	strh	r2, [r3, #40]	; 0x28
 8018382:	187b      	adds	r3, r7, r1
 8018384:	220a      	movs	r2, #10
 8018386:	879a      	strh	r2, [r3, #60]	; 0x3c
 8018388:	0008      	movs	r0, r1
 801838a:	187b      	adds	r3, r7, r1
 801838c:	2250      	movs	r2, #80	; 0x50
 801838e:	2164      	movs	r1, #100	; 0x64
 8018390:	5299      	strh	r1, [r3, r2]
 8018392:	183b      	adds	r3, r7, r0
 8018394:	2264      	movs	r2, #100	; 0x64
 8018396:	21fa      	movs	r1, #250	; 0xfa
 8018398:	0089      	lsls	r1, r1, #2
 801839a:	5299      	strh	r1, [r3, r2]
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 801839c:	687b      	ldr	r3, [r7, #4]
 801839e:	791b      	ldrb	r3, [r3, #4]
 80183a0:	2b03      	cmp	r3, #3
 80183a2:	d048      	beq.n	8018436 <RegionEU868InitDefaults+0xe2>
 80183a4:	dc54      	bgt.n	8018450 <RegionEU868InitDefaults+0xfc>
 80183a6:	2b02      	cmp	r3, #2
 80183a8:	d036      	beq.n	8018418 <RegionEU868InitDefaults+0xc4>
 80183aa:	dc51      	bgt.n	8018450 <RegionEU868InitDefaults+0xfc>
 80183ac:	2b00      	cmp	r3, #0
 80183ae:	d002      	beq.n	80183b6 <RegionEU868InitDefaults+0x62>
 80183b0:	2b01      	cmp	r3, #1
 80183b2:	d021      	beq.n	80183f8 <RegionEU868InitDefaults+0xa4>
            }
            break;
        }
        default:
        {
            break;
 80183b4:	e04c      	b.n	8018450 <RegionEU868InitDefaults+0xfc>
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 80183b6:	2330      	movs	r3, #48	; 0x30
 80183b8:	18f9      	adds	r1, r7, r3
 80183ba:	4b29      	ldr	r3, [pc, #164]	; (8018460 <RegionEU868InitDefaults+0x10c>)
 80183bc:	2278      	movs	r2, #120	; 0x78
 80183be:	0018      	movs	r0, r3
 80183c0:	f001 f89a 	bl	80194f8 <memcpy1>
            NvmCtx.Channels[0] = ( ChannelParams_t ) EU868_LC1;
 80183c4:	4b27      	ldr	r3, [pc, #156]	; (8018464 <RegionEU868InitDefaults+0x110>)
 80183c6:	4a28      	ldr	r2, [pc, #160]	; (8018468 <RegionEU868InitDefaults+0x114>)
 80183c8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80183ca:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[1] = ( ChannelParams_t ) EU868_LC2;
 80183cc:	4b25      	ldr	r3, [pc, #148]	; (8018464 <RegionEU868InitDefaults+0x110>)
 80183ce:	4a27      	ldr	r2, [pc, #156]	; (801846c <RegionEU868InitDefaults+0x118>)
 80183d0:	330c      	adds	r3, #12
 80183d2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80183d4:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[2] = ( ChannelParams_t ) EU868_LC3;
 80183d6:	4b23      	ldr	r3, [pc, #140]	; (8018464 <RegionEU868InitDefaults+0x110>)
 80183d8:	4a25      	ldr	r2, [pc, #148]	; (8018470 <RegionEU868InitDefaults+0x11c>)
 80183da:	3318      	adds	r3, #24
 80183dc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80183de:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 80183e0:	4a20      	ldr	r2, [pc, #128]	; (8018464 <RegionEU868InitDefaults+0x110>)
 80183e2:	239d      	movs	r3, #157	; 0x9d
 80183e4:	005b      	lsls	r3, r3, #1
 80183e6:	2107      	movs	r1, #7
 80183e8:	52d1      	strh	r1, [r2, r3]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80183ea:	4922      	ldr	r1, [pc, #136]	; (8018474 <RegionEU868InitDefaults+0x120>)
 80183ec:	4b22      	ldr	r3, [pc, #136]	; (8018478 <RegionEU868InitDefaults+0x124>)
 80183ee:	2201      	movs	r2, #1
 80183f0:	0018      	movs	r0, r3
 80183f2:	f7ff f8a7 	bl	8017544 <RegionCommonChanMaskCopy>
            break;
 80183f6:	e02e      	b.n	8018456 <RegionEU868InitDefaults+0x102>
            NvmCtx.Channels[0].Rx1Frequency = 0;
 80183f8:	4b1a      	ldr	r3, [pc, #104]	; (8018464 <RegionEU868InitDefaults+0x110>)
 80183fa:	2200      	movs	r2, #0
 80183fc:	605a      	str	r2, [r3, #4]
            NvmCtx.Channels[1].Rx1Frequency = 0;
 80183fe:	4b19      	ldr	r3, [pc, #100]	; (8018464 <RegionEU868InitDefaults+0x110>)
 8018400:	2200      	movs	r2, #0
 8018402:	611a      	str	r2, [r3, #16]
            NvmCtx.Channels[2].Rx1Frequency = 0;
 8018404:	4b17      	ldr	r3, [pc, #92]	; (8018464 <RegionEU868InitDefaults+0x110>)
 8018406:	2200      	movs	r2, #0
 8018408:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801840a:	491a      	ldr	r1, [pc, #104]	; (8018474 <RegionEU868InitDefaults+0x120>)
 801840c:	4b1a      	ldr	r3, [pc, #104]	; (8018478 <RegionEU868InitDefaults+0x124>)
 801840e:	2201      	movs	r2, #1
 8018410:	0018      	movs	r0, r3
 8018412:	f7ff f897 	bl	8017544 <RegionCommonChanMaskCopy>
            break;
 8018416:	e01e      	b.n	8018456 <RegionEU868InitDefaults+0x102>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
 8018418:	4a12      	ldr	r2, [pc, #72]	; (8018464 <RegionEU868InitDefaults+0x110>)
 801841a:	239c      	movs	r3, #156	; 0x9c
 801841c:	005b      	lsls	r3, r3, #1
 801841e:	5ad2      	ldrh	r2, [r2, r3]
 8018420:	4910      	ldr	r1, [pc, #64]	; (8018464 <RegionEU868InitDefaults+0x110>)
 8018422:	239d      	movs	r3, #157	; 0x9d
 8018424:	005b      	lsls	r3, r3, #1
 8018426:	5acb      	ldrh	r3, [r1, r3]
 8018428:	4313      	orrs	r3, r2
 801842a:	b299      	uxth	r1, r3
 801842c:	4a0d      	ldr	r2, [pc, #52]	; (8018464 <RegionEU868InitDefaults+0x110>)
 801842e:	239c      	movs	r3, #156	; 0x9c
 8018430:	005b      	lsls	r3, r3, #1
 8018432:	52d1      	strh	r1, [r2, r3]
            break;
 8018434:	e00f      	b.n	8018456 <RegionEU868InitDefaults+0x102>
            if( params->NvmCtx != 0 )
 8018436:	687b      	ldr	r3, [r7, #4]
 8018438:	681b      	ldr	r3, [r3, #0]
 801843a:	2b00      	cmp	r3, #0
 801843c:	d00a      	beq.n	8018454 <RegionEU868InitDefaults+0x100>
                memcpy1( (uint8_t*) &NvmCtx, (uint8_t*) params->NvmCtx, sizeof( NvmCtx ) );
 801843e:	687b      	ldr	r3, [r7, #4]
 8018440:	6819      	ldr	r1, [r3, #0]
 8018442:	239e      	movs	r3, #158	; 0x9e
 8018444:	005a      	lsls	r2, r3, #1
 8018446:	4b07      	ldr	r3, [pc, #28]	; (8018464 <RegionEU868InitDefaults+0x110>)
 8018448:	0018      	movs	r0, r3
 801844a:	f001 f855 	bl	80194f8 <memcpy1>
            break;
 801844e:	e001      	b.n	8018454 <RegionEU868InitDefaults+0x100>
            break;
 8018450:	46c0      	nop			; (mov r8, r8)
 8018452:	e000      	b.n	8018456 <RegionEU868InitDefaults+0x102>
            break;
 8018454:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8018456:	46c0      	nop			; (mov r8, r8)
 8018458:	46bd      	mov	sp, r7
 801845a:	b02b      	add	sp, #172	; 0xac
 801845c:	bd90      	pop	{r4, r7, pc}
 801845e:	46c0      	nop			; (mov r8, r8)
 8018460:	20000e04 	.word	0x20000e04
 8018464:	20000d44 	.word	0x20000d44
 8018468:	0801fcf0 	.word	0x0801fcf0
 801846c:	0801fcfc 	.word	0x0801fcfc
 8018470:	0801fd08 	.word	0x0801fd08
 8018474:	20000e7e 	.word	0x20000e7e
 8018478:	20000e7c 	.word	0x20000e7c

0801847c <RegionEU868GetNvmCtx>:

void* RegionEU868GetNvmCtx( GetNvmCtxParams_t* params )
{
 801847c:	b580      	push	{r7, lr}
 801847e:	b082      	sub	sp, #8
 8018480:	af00      	add	r7, sp, #0
 8018482:	6078      	str	r0, [r7, #4]
    params->nvmCtxSize = sizeof( RegionEU868NvmCtx_t );
 8018484:	687b      	ldr	r3, [r7, #4]
 8018486:	229e      	movs	r2, #158	; 0x9e
 8018488:	0052      	lsls	r2, r2, #1
 801848a:	601a      	str	r2, [r3, #0]
    return &NvmCtx;
 801848c:	4b02      	ldr	r3, [pc, #8]	; (8018498 <RegionEU868GetNvmCtx+0x1c>)
}
 801848e:	0018      	movs	r0, r3
 8018490:	46bd      	mov	sp, r7
 8018492:	b002      	add	sp, #8
 8018494:	bd80      	pop	{r7, pc}
 8018496:	46c0      	nop			; (mov r8, r8)
 8018498:	20000d44 	.word	0x20000d44

0801849c <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 801849c:	b580      	push	{r7, lr}
 801849e:	b084      	sub	sp, #16
 80184a0:	af00      	add	r7, sp, #0
 80184a2:	6078      	str	r0, [r7, #4]
 80184a4:	000a      	movs	r2, r1
 80184a6:	1cfb      	adds	r3, r7, #3
 80184a8:	701a      	strb	r2, [r3, #0]
    switch( phyAttribute )
 80184aa:	1cfb      	adds	r3, r7, #3
 80184ac:	781b      	ldrb	r3, [r3, #0]
 80184ae:	2b0f      	cmp	r3, #15
 80184b0:	d847      	bhi.n	8018542 <RegionEU868Verify+0xa6>
 80184b2:	009a      	lsls	r2, r3, #2
 80184b4:	4b25      	ldr	r3, [pc, #148]	; (801854c <RegionEU868Verify+0xb0>)
 80184b6:	18d3      	adds	r3, r2, r3
 80184b8:	681b      	ldr	r3, [r3, #0]
 80184ba:	469f      	mov	pc, r3
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 80184bc:	210f      	movs	r1, #15
 80184be:	187b      	adds	r3, r7, r1
 80184c0:	2200      	movs	r2, #0
 80184c2:	701a      	strb	r2, [r3, #0]
            return VerifyRfFreq( verify->Frequency, &band );
 80184c4:	687b      	ldr	r3, [r7, #4]
 80184c6:	681b      	ldr	r3, [r3, #0]
 80184c8:	187a      	adds	r2, r7, r1
 80184ca:	0011      	movs	r1, r2
 80184cc:	0018      	movs	r0, r3
 80184ce:	f7ff fd1f 	bl	8017f10 <VerifyRfFreq>
 80184d2:	0003      	movs	r3, r0
 80184d4:	e036      	b.n	8018544 <RegionEU868Verify+0xa8>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 80184d6:	687b      	ldr	r3, [r7, #4]
 80184d8:	781b      	ldrb	r3, [r3, #0]
 80184da:	b25b      	sxtb	r3, r3
 80184dc:	2207      	movs	r2, #7
 80184de:	2100      	movs	r1, #0
 80184e0:	0018      	movs	r0, r3
 80184e2:	f7fe ff86 	bl	80173f2 <RegionCommonValueInRange>
 80184e6:	0003      	movs	r3, r0
 80184e8:	1e5a      	subs	r2, r3, #1
 80184ea:	4193      	sbcs	r3, r2
 80184ec:	b2db      	uxtb	r3, r3
 80184ee:	e029      	b.n	8018544 <RegionEU868Verify+0xa8>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 80184f0:	687b      	ldr	r3, [r7, #4]
 80184f2:	781b      	ldrb	r3, [r3, #0]
 80184f4:	b25b      	sxtb	r3, r3
 80184f6:	2205      	movs	r2, #5
 80184f8:	2100      	movs	r1, #0
 80184fa:	0018      	movs	r0, r3
 80184fc:	f7fe ff79 	bl	80173f2 <RegionCommonValueInRange>
 8018500:	0003      	movs	r3, r0
 8018502:	1e5a      	subs	r2, r3, #1
 8018504:	4193      	sbcs	r3, r2
 8018506:	b2db      	uxtb	r3, r3
 8018508:	e01c      	b.n	8018544 <RegionEU868Verify+0xa8>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 801850a:	687b      	ldr	r3, [r7, #4]
 801850c:	781b      	ldrb	r3, [r3, #0]
 801850e:	b25b      	sxtb	r3, r3
 8018510:	2207      	movs	r2, #7
 8018512:	2100      	movs	r1, #0
 8018514:	0018      	movs	r0, r3
 8018516:	f7fe ff6c 	bl	80173f2 <RegionCommonValueInRange>
 801851a:	0003      	movs	r3, r0
 801851c:	1e5a      	subs	r2, r3, #1
 801851e:	4193      	sbcs	r3, r2
 8018520:	b2db      	uxtb	r3, r3
 8018522:	e00f      	b.n	8018544 <RegionEU868Verify+0xa8>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8018524:	687b      	ldr	r3, [r7, #4]
 8018526:	781b      	ldrb	r3, [r3, #0]
 8018528:	b25b      	sxtb	r3, r3
 801852a:	2200      	movs	r2, #0
 801852c:	2100      	movs	r1, #0
 801852e:	0018      	movs	r0, r3
 8018530:	f7fe ff5f 	bl	80173f2 <RegionCommonValueInRange>
 8018534:	0003      	movs	r3, r0
 8018536:	1e5a      	subs	r2, r3, #1
 8018538:	4193      	sbcs	r3, r2
 801853a:	b2db      	uxtb	r3, r3
 801853c:	e002      	b.n	8018544 <RegionEU868Verify+0xa8>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 801853e:	2301      	movs	r3, #1
 8018540:	e000      	b.n	8018544 <RegionEU868Verify+0xa8>
        }
        default:
            return false;
 8018542:	2300      	movs	r3, #0
    }
}
 8018544:	0018      	movs	r0, r3
 8018546:	46bd      	mov	sp, r7
 8018548:	b004      	add	sp, #16
 801854a:	bd80      	pop	{r7, pc}
 801854c:	0801fd14 	.word	0x0801fd14

08018550 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8018550:	b590      	push	{r4, r7, lr}
 8018552:	b08b      	sub	sp, #44	; 0x2c
 8018554:	af00      	add	r7, sp, #0
 8018556:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8018558:	2318      	movs	r3, #24
 801855a:	18fb      	adds	r3, r7, r3
 801855c:	2250      	movs	r2, #80	; 0x50
 801855e:	721a      	strb	r2, [r3, #8]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8018560:	687b      	ldr	r3, [r7, #4]
 8018562:	791b      	ldrb	r3, [r3, #4]
 8018564:	2b10      	cmp	r3, #16
 8018566:	d000      	beq.n	801856a <RegionEU868ApplyCFList+0x1a>
 8018568:	e07c      	b.n	8018664 <RegionEU868ApplyCFList+0x114>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 801856a:	687b      	ldr	r3, [r7, #4]
 801856c:	681b      	ldr	r3, [r3, #0]
 801856e:	330f      	adds	r3, #15
 8018570:	781b      	ldrb	r3, [r3, #0]
 8018572:	2b00      	cmp	r3, #0
 8018574:	d000      	beq.n	8018578 <RegionEU868ApplyCFList+0x28>
 8018576:	e077      	b.n	8018668 <RegionEU868ApplyCFList+0x118>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8018578:	2327      	movs	r3, #39	; 0x27
 801857a:	18fb      	adds	r3, r7, r3
 801857c:	2200      	movs	r2, #0
 801857e:	701a      	strb	r2, [r3, #0]
 8018580:	2326      	movs	r3, #38	; 0x26
 8018582:	18fb      	adds	r3, r7, r3
 8018584:	2203      	movs	r2, #3
 8018586:	701a      	strb	r2, [r3, #0]
 8018588:	e066      	b.n	8018658 <RegionEU868ApplyCFList+0x108>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 801858a:	2326      	movs	r3, #38	; 0x26
 801858c:	18fb      	adds	r3, r7, r3
 801858e:	781b      	ldrb	r3, [r3, #0]
 8018590:	2b07      	cmp	r3, #7
 8018592:	d82e      	bhi.n	80185f2 <RegionEU868ApplyCFList+0xa2>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8018594:	687b      	ldr	r3, [r7, #4]
 8018596:	681a      	ldr	r2, [r3, #0]
 8018598:	2427      	movs	r4, #39	; 0x27
 801859a:	193b      	adds	r3, r7, r4
 801859c:	781b      	ldrb	r3, [r3, #0]
 801859e:	18d3      	adds	r3, r2, r3
 80185a0:	781b      	ldrb	r3, [r3, #0]
 80185a2:	001a      	movs	r2, r3
 80185a4:	2018      	movs	r0, #24
 80185a6:	183b      	adds	r3, r7, r0
 80185a8:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 80185aa:	183b      	adds	r3, r7, r0
 80185ac:	681a      	ldr	r2, [r3, #0]
 80185ae:	687b      	ldr	r3, [r7, #4]
 80185b0:	6819      	ldr	r1, [r3, #0]
 80185b2:	193b      	adds	r3, r7, r4
 80185b4:	781b      	ldrb	r3, [r3, #0]
 80185b6:	3301      	adds	r3, #1
 80185b8:	18cb      	adds	r3, r1, r3
 80185ba:	781b      	ldrb	r3, [r3, #0]
 80185bc:	021b      	lsls	r3, r3, #8
 80185be:	431a      	orrs	r2, r3
 80185c0:	183b      	adds	r3, r7, r0
 80185c2:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 80185c4:	183b      	adds	r3, r7, r0
 80185c6:	681a      	ldr	r2, [r3, #0]
 80185c8:	687b      	ldr	r3, [r7, #4]
 80185ca:	6819      	ldr	r1, [r3, #0]
 80185cc:	193b      	adds	r3, r7, r4
 80185ce:	781b      	ldrb	r3, [r3, #0]
 80185d0:	3302      	adds	r3, #2
 80185d2:	18cb      	adds	r3, r1, r3
 80185d4:	781b      	ldrb	r3, [r3, #0]
 80185d6:	041b      	lsls	r3, r3, #16
 80185d8:	431a      	orrs	r2, r3
 80185da:	183b      	adds	r3, r7, r0
 80185dc:	601a      	str	r2, [r3, #0]
            newChannel.Frequency *= 100;
 80185de:	183b      	adds	r3, r7, r0
 80185e0:	681b      	ldr	r3, [r3, #0]
 80185e2:	2264      	movs	r2, #100	; 0x64
 80185e4:	435a      	muls	r2, r3
 80185e6:	183b      	adds	r3, r7, r0
 80185e8:	601a      	str	r2, [r3, #0]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 80185ea:	183b      	adds	r3, r7, r0
 80185ec:	2200      	movs	r2, #0
 80185ee:	605a      	str	r2, [r3, #4]
 80185f0:	e009      	b.n	8018606 <RegionEU868ApplyCFList+0xb6>
        }
        else
        {
            newChannel.Frequency = 0;
 80185f2:	2118      	movs	r1, #24
 80185f4:	187b      	adds	r3, r7, r1
 80185f6:	2200      	movs	r2, #0
 80185f8:	601a      	str	r2, [r3, #0]
            newChannel.DrRange.Value = 0;
 80185fa:	187b      	adds	r3, r7, r1
 80185fc:	2200      	movs	r2, #0
 80185fe:	721a      	strb	r2, [r3, #8]
            newChannel.Rx1Frequency = 0;
 8018600:	187b      	adds	r3, r7, r1
 8018602:	2200      	movs	r2, #0
 8018604:	605a      	str	r2, [r3, #4]
        }

        if( newChannel.Frequency != 0 )
 8018606:	2218      	movs	r2, #24
 8018608:	18bb      	adds	r3, r7, r2
 801860a:	681b      	ldr	r3, [r3, #0]
 801860c:	2b00      	cmp	r3, #0
 801860e:	d00d      	beq.n	801862c <RegionEU868ApplyCFList+0xdc>
        {
            channelAdd.NewChannel = &newChannel;
 8018610:	2110      	movs	r1, #16
 8018612:	187b      	adds	r3, r7, r1
 8018614:	18ba      	adds	r2, r7, r2
 8018616:	601a      	str	r2, [r3, #0]
            channelAdd.ChannelId = chanIdx;
 8018618:	187b      	adds	r3, r7, r1
 801861a:	2226      	movs	r2, #38	; 0x26
 801861c:	18ba      	adds	r2, r7, r2
 801861e:	7812      	ldrb	r2, [r2, #0]
 8018620:	711a      	strb	r2, [r3, #4]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 8018622:	187b      	adds	r3, r7, r1
 8018624:	0018      	movs	r0, r3
 8018626:	f000 fdb5 	bl	8019194 <RegionEU868ChannelAdd>
 801862a:	e009      	b.n	8018640 <RegionEU868ApplyCFList+0xf0>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 801862c:	210c      	movs	r1, #12
 801862e:	187b      	adds	r3, r7, r1
 8018630:	2226      	movs	r2, #38	; 0x26
 8018632:	18ba      	adds	r2, r7, r2
 8018634:	7812      	ldrb	r2, [r2, #0]
 8018636:	701a      	strb	r2, [r3, #0]

            RegionEU868ChannelsRemove( &channelRemove );
 8018638:	187b      	adds	r3, r7, r1
 801863a:	0018      	movs	r0, r3
 801863c:	f000 fe6e 	bl	801931c <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8018640:	2227      	movs	r2, #39	; 0x27
 8018642:	18bb      	adds	r3, r7, r2
 8018644:	18ba      	adds	r2, r7, r2
 8018646:	7812      	ldrb	r2, [r2, #0]
 8018648:	3203      	adds	r2, #3
 801864a:	701a      	strb	r2, [r3, #0]
 801864c:	2126      	movs	r1, #38	; 0x26
 801864e:	187b      	adds	r3, r7, r1
 8018650:	781a      	ldrb	r2, [r3, #0]
 8018652:	187b      	adds	r3, r7, r1
 8018654:	3201      	adds	r2, #1
 8018656:	701a      	strb	r2, [r3, #0]
 8018658:	2326      	movs	r3, #38	; 0x26
 801865a:	18fb      	adds	r3, r7, r3
 801865c:	781b      	ldrb	r3, [r3, #0]
 801865e:	2b0f      	cmp	r3, #15
 8018660:	d993      	bls.n	801858a <RegionEU868ApplyCFList+0x3a>
 8018662:	e002      	b.n	801866a <RegionEU868ApplyCFList+0x11a>
        return;
 8018664:	46c0      	nop			; (mov r8, r8)
 8018666:	e000      	b.n	801866a <RegionEU868ApplyCFList+0x11a>
        return;
 8018668:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 801866a:	46bd      	mov	sp, r7
 801866c:	b00b      	add	sp, #44	; 0x2c
 801866e:	bd90      	pop	{r4, r7, pc}

08018670 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8018670:	b580      	push	{r7, lr}
 8018672:	b082      	sub	sp, #8
 8018674:	af00      	add	r7, sp, #0
 8018676:	6078      	str	r0, [r7, #4]
    switch( chanMaskSet->ChannelsMaskType )
 8018678:	687b      	ldr	r3, [r7, #4]
 801867a:	791b      	ldrb	r3, [r3, #4]
 801867c:	2b00      	cmp	r3, #0
 801867e:	d002      	beq.n	8018686 <RegionEU868ChanMaskSet+0x16>
 8018680:	2b01      	cmp	r3, #1
 8018682:	d008      	beq.n	8018696 <RegionEU868ChanMaskSet+0x26>
 8018684:	e00f      	b.n	80186a6 <RegionEU868ChanMaskSet+0x36>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 8018686:	687b      	ldr	r3, [r7, #4]
 8018688:	6819      	ldr	r1, [r3, #0]
 801868a:	4b0a      	ldr	r3, [pc, #40]	; (80186b4 <RegionEU868ChanMaskSet+0x44>)
 801868c:	2201      	movs	r2, #1
 801868e:	0018      	movs	r0, r3
 8018690:	f7fe ff58 	bl	8017544 <RegionCommonChanMaskCopy>
            break;
 8018694:	e009      	b.n	80186aa <RegionEU868ChanMaskSet+0x3a>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( NvmCtx.ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 8018696:	687b      	ldr	r3, [r7, #4]
 8018698:	6819      	ldr	r1, [r3, #0]
 801869a:	4b07      	ldr	r3, [pc, #28]	; (80186b8 <RegionEU868ChanMaskSet+0x48>)
 801869c:	2201      	movs	r2, #1
 801869e:	0018      	movs	r0, r3
 80186a0:	f7fe ff50 	bl	8017544 <RegionCommonChanMaskCopy>
            break;
 80186a4:	e001      	b.n	80186aa <RegionEU868ChanMaskSet+0x3a>
        }
        default:
            return false;
 80186a6:	2300      	movs	r3, #0
 80186a8:	e000      	b.n	80186ac <RegionEU868ChanMaskSet+0x3c>
    }
    return true;
 80186aa:	2301      	movs	r3, #1
}
 80186ac:	0018      	movs	r0, r3
 80186ae:	46bd      	mov	sp, r7
 80186b0:	b002      	add	sp, #8
 80186b2:	bd80      	pop	{r7, pc}
 80186b4:	20000e7c 	.word	0x20000e7c
 80186b8:	20000e7e 	.word	0x20000e7e

080186bc <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80186bc:	b5b0      	push	{r4, r5, r7, lr}
 80186be:	b088      	sub	sp, #32
 80186c0:	af02      	add	r7, sp, #8
 80186c2:	60ba      	str	r2, [r7, #8]
 80186c4:	607b      	str	r3, [r7, #4]
 80186c6:	240f      	movs	r4, #15
 80186c8:	193b      	adds	r3, r7, r4
 80186ca:	1c02      	adds	r2, r0, #0
 80186cc:	701a      	strb	r2, [r3, #0]
 80186ce:	230e      	movs	r3, #14
 80186d0:	18fb      	adds	r3, r7, r3
 80186d2:	1c0a      	adds	r2, r1, #0
 80186d4:	701a      	strb	r2, [r3, #0]
    /* ST_WORKAROUND_BEGIN: remove float/double */
    uint32_t tSymbol = 0;
 80186d6:	2300      	movs	r3, #0
 80186d8:	617b      	str	r3, [r7, #20]
    /* ST_WORKAROUND_END */

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 80186da:	193b      	adds	r3, r7, r4
 80186dc:	781b      	ldrb	r3, [r3, #0]
 80186de:	b25a      	sxtb	r2, r3
 80186e0:	2a07      	cmp	r2, #7
 80186e2:	dd00      	ble.n	80186e6 <RegionEU868ComputeRxWindowParameters+0x2a>
 80186e4:	2307      	movs	r3, #7
 80186e6:	b25a      	sxtb	r2, r3
 80186e8:	687b      	ldr	r3, [r7, #4]
 80186ea:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 80186ec:	687b      	ldr	r3, [r7, #4]
 80186ee:	785b      	ldrb	r3, [r3, #1]
 80186f0:	b25b      	sxtb	r3, r3
 80186f2:	0018      	movs	r0, r3
 80186f4:	f7ff fbc6 	bl	8017e84 <GetBandwidth>
 80186f8:	0003      	movs	r3, r0
 80186fa:	b2da      	uxtb	r2, r3
 80186fc:	687b      	ldr	r3, [r7, #4]
 80186fe:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8018700:	687b      	ldr	r3, [r7, #4]
 8018702:	785b      	ldrb	r3, [r3, #1]
 8018704:	b25b      	sxtb	r3, r3
 8018706:	2b07      	cmp	r3, #7
 8018708:	d10b      	bne.n	8018722 <RegionEU868ComputeRxWindowParameters+0x66>
    { // FSK
        tSymbol = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 801870a:	687b      	ldr	r3, [r7, #4]
 801870c:	785b      	ldrb	r3, [r3, #1]
 801870e:	b25b      	sxtb	r3, r3
 8018710:	001a      	movs	r2, r3
 8018712:	4b18      	ldr	r3, [pc, #96]	; (8018774 <RegionEU868ComputeRxWindowParameters+0xb8>)
 8018714:	5c9b      	ldrb	r3, [r3, r2]
 8018716:	0018      	movs	r0, r3
 8018718:	f7ff f954 	bl	80179c4 <RegionCommonComputeSymbolTimeFsk>
 801871c:	0003      	movs	r3, r0
 801871e:	617b      	str	r3, [r7, #20]
 8018720:	e011      	b.n	8018746 <RegionEU868ComputeRxWindowParameters+0x8a>
    }
    else
    { // LoRa
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8018722:	687b      	ldr	r3, [r7, #4]
 8018724:	785b      	ldrb	r3, [r3, #1]
 8018726:	b25b      	sxtb	r3, r3
 8018728:	001a      	movs	r2, r3
 801872a:	4b12      	ldr	r3, [pc, #72]	; (8018774 <RegionEU868ComputeRxWindowParameters+0xb8>)
 801872c:	5c98      	ldrb	r0, [r3, r2]
 801872e:	687b      	ldr	r3, [r7, #4]
 8018730:	785b      	ldrb	r3, [r3, #1]
 8018732:	b25b      	sxtb	r3, r3
 8018734:	001a      	movs	r2, r3
 8018736:	4b10      	ldr	r3, [pc, #64]	; (8018778 <RegionEU868ComputeRxWindowParameters+0xbc>)
 8018738:	0092      	lsls	r2, r2, #2
 801873a:	58d3      	ldr	r3, [r2, r3]
 801873c:	0019      	movs	r1, r3
 801873e:	f7ff f929 	bl	8017994 <RegionCommonComputeSymbolTimeLoRa>
 8018742:	0003      	movs	r3, r0
 8018744:	617b      	str	r3, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8018746:	4b0d      	ldr	r3, [pc, #52]	; (801877c <RegionEU868ComputeRxWindowParameters+0xc0>)
 8018748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801874a:	4798      	blx	r3
 801874c:	0005      	movs	r5, r0
 801874e:	687b      	ldr	r3, [r7, #4]
 8018750:	3308      	adds	r3, #8
 8018752:	687a      	ldr	r2, [r7, #4]
 8018754:	320c      	adds	r2, #12
 8018756:	68bc      	ldr	r4, [r7, #8]
 8018758:	210e      	movs	r1, #14
 801875a:	1879      	adds	r1, r7, r1
 801875c:	7809      	ldrb	r1, [r1, #0]
 801875e:	6978      	ldr	r0, [r7, #20]
 8018760:	9201      	str	r2, [sp, #4]
 8018762:	9300      	str	r3, [sp, #0]
 8018764:	002b      	movs	r3, r5
 8018766:	0022      	movs	r2, r4
 8018768:	f7ff f93a 	bl	80179e0 <RegionCommonComputeRxWindowParameters>
}
 801876c:	46c0      	nop			; (mov r8, r8)
 801876e:	46bd      	mov	sp, r7
 8018770:	b006      	add	sp, #24
 8018772:	bdb0      	pop	{r4, r5, r7, pc}
 8018774:	0801fbd0 	.word	0x0801fbd0
 8018778:	0801fbd8 	.word	0x0801fbd8
 801877c:	0801fd54 	.word	0x0801fd54

08018780 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8018780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018782:	b091      	sub	sp, #68	; 0x44
 8018784:	af0a      	add	r7, sp, #40	; 0x28
 8018786:	6078      	str	r0, [r7, #4]
 8018788:	6039      	str	r1, [r7, #0]
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 801878a:	230f      	movs	r3, #15
 801878c:	18fb      	adds	r3, r7, r3
 801878e:	687a      	ldr	r2, [r7, #4]
 8018790:	7852      	ldrb	r2, [r2, #1]
 8018792:	701a      	strb	r2, [r3, #0]
    uint8_t maxPayload = 0;
 8018794:	2316      	movs	r3, #22
 8018796:	18fb      	adds	r3, r7, r3
 8018798:	2200      	movs	r2, #0
 801879a:	701a      	strb	r2, [r3, #0]
    int8_t phyDr = 0;
 801879c:	230e      	movs	r3, #14
 801879e:	18fb      	adds	r3, r7, r3
 80187a0:	2200      	movs	r2, #0
 80187a2:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = rxConfig->Frequency;
 80187a4:	687b      	ldr	r3, [r7, #4]
 80187a6:	685b      	ldr	r3, [r3, #4]
 80187a8:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 80187aa:	4b68      	ldr	r3, [pc, #416]	; (801894c <RegionEU868RxConfig+0x1cc>)
 80187ac:	685b      	ldr	r3, [r3, #4]
 80187ae:	4798      	blx	r3
 80187b0:	1e03      	subs	r3, r0, #0
 80187b2:	d001      	beq.n	80187b8 <RegionEU868RxConfig+0x38>
    {
        return false;
 80187b4:	2300      	movs	r3, #0
 80187b6:	e0c4      	b.n	8018942 <RegionEU868RxConfig+0x1c2>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 80187b8:	687b      	ldr	r3, [r7, #4]
 80187ba:	7cdb      	ldrb	r3, [r3, #19]
 80187bc:	2b00      	cmp	r3, #0
 80187be:	d122      	bne.n	8018806 <RegionEU868RxConfig+0x86>
    {
        // Apply window 1 frequency
        frequency = NvmCtx.Channels[rxConfig->Channel].Frequency;
 80187c0:	687b      	ldr	r3, [r7, #4]
 80187c2:	781b      	ldrb	r3, [r3, #0]
 80187c4:	0019      	movs	r1, r3
 80187c6:	4a62      	ldr	r2, [pc, #392]	; (8018950 <RegionEU868RxConfig+0x1d0>)
 80187c8:	000b      	movs	r3, r1
 80187ca:	005b      	lsls	r3, r3, #1
 80187cc:	185b      	adds	r3, r3, r1
 80187ce:	009b      	lsls	r3, r3, #2
 80187d0:	589b      	ldr	r3, [r3, r2]
 80187d2:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( NvmCtx.Channels[rxConfig->Channel].Rx1Frequency != 0 )
 80187d4:	687b      	ldr	r3, [r7, #4]
 80187d6:	781b      	ldrb	r3, [r3, #0]
 80187d8:	0019      	movs	r1, r3
 80187da:	4a5d      	ldr	r2, [pc, #372]	; (8018950 <RegionEU868RxConfig+0x1d0>)
 80187dc:	000b      	movs	r3, r1
 80187de:	005b      	lsls	r3, r3, #1
 80187e0:	185b      	adds	r3, r3, r1
 80187e2:	009b      	lsls	r3, r3, #2
 80187e4:	18d3      	adds	r3, r2, r3
 80187e6:	3304      	adds	r3, #4
 80187e8:	681b      	ldr	r3, [r3, #0]
 80187ea:	2b00      	cmp	r3, #0
 80187ec:	d00b      	beq.n	8018806 <RegionEU868RxConfig+0x86>
        {
            frequency = NvmCtx.Channels[rxConfig->Channel].Rx1Frequency;
 80187ee:	687b      	ldr	r3, [r7, #4]
 80187f0:	781b      	ldrb	r3, [r3, #0]
 80187f2:	0019      	movs	r1, r3
 80187f4:	4a56      	ldr	r2, [pc, #344]	; (8018950 <RegionEU868RxConfig+0x1d0>)
 80187f6:	000b      	movs	r3, r1
 80187f8:	005b      	lsls	r3, r3, #1
 80187fa:	185b      	adds	r3, r3, r1
 80187fc:	009b      	lsls	r3, r3, #2
 80187fe:	18d3      	adds	r3, r2, r3
 8018800:	3304      	adds	r3, #4
 8018802:	681b      	ldr	r3, [r3, #0]
 8018804:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8018806:	240f      	movs	r4, #15
 8018808:	193b      	adds	r3, r7, r4
 801880a:	781b      	ldrb	r3, [r3, #0]
 801880c:	b25b      	sxtb	r3, r3
 801880e:	4a51      	ldr	r2, [pc, #324]	; (8018954 <RegionEU868RxConfig+0x1d4>)
 8018810:	5cd2      	ldrb	r2, [r2, r3]
 8018812:	250e      	movs	r5, #14
 8018814:	197b      	adds	r3, r7, r5
 8018816:	701a      	strb	r2, [r3, #0]

    Radio.SetChannel( frequency );
 8018818:	4b4c      	ldr	r3, [pc, #304]	; (801894c <RegionEU868RxConfig+0x1cc>)
 801881a:	68db      	ldr	r3, [r3, #12]
 801881c:	693a      	ldr	r2, [r7, #16]
 801881e:	0010      	movs	r0, r2
 8018820:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8018822:	193b      	adds	r3, r7, r4
 8018824:	781b      	ldrb	r3, [r3, #0]
 8018826:	b25b      	sxtb	r3, r3
 8018828:	2b07      	cmp	r3, #7
 801882a:	d12e      	bne.n	801888a <RegionEU868RxConfig+0x10a>
    {
        modem = MODEM_FSK;
 801882c:	2117      	movs	r1, #23
 801882e:	187b      	adds	r3, r7, r1
 8018830:	2200      	movs	r2, #0
 8018832:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8018834:	4b45      	ldr	r3, [pc, #276]	; (801894c <RegionEU868RxConfig+0x1cc>)
 8018836:	699c      	ldr	r4, [r3, #24]
 8018838:	197b      	adds	r3, r7, r5
 801883a:	2200      	movs	r2, #0
 801883c:	569a      	ldrsb	r2, [r3, r2]
 801883e:	0013      	movs	r3, r2
 8018840:	015b      	lsls	r3, r3, #5
 8018842:	1a9b      	subs	r3, r3, r2
 8018844:	009b      	lsls	r3, r3, #2
 8018846:	189b      	adds	r3, r3, r2
 8018848:	00db      	lsls	r3, r3, #3
 801884a:	001e      	movs	r6, r3
 801884c:	687b      	ldr	r3, [r7, #4]
 801884e:	689b      	ldr	r3, [r3, #8]
 8018850:	b29b      	uxth	r3, r3
 8018852:	687a      	ldr	r2, [r7, #4]
 8018854:	7c92      	ldrb	r2, [r2, #18]
 8018856:	4d40      	ldr	r5, [pc, #256]	; (8018958 <RegionEU868RxConfig+0x1d8>)
 8018858:	1879      	adds	r1, r7, r1
 801885a:	7808      	ldrb	r0, [r1, #0]
 801885c:	9209      	str	r2, [sp, #36]	; 0x24
 801885e:	2200      	movs	r2, #0
 8018860:	9208      	str	r2, [sp, #32]
 8018862:	2200      	movs	r2, #0
 8018864:	9207      	str	r2, [sp, #28]
 8018866:	2200      	movs	r2, #0
 8018868:	9206      	str	r2, [sp, #24]
 801886a:	2201      	movs	r2, #1
 801886c:	9205      	str	r2, [sp, #20]
 801886e:	2200      	movs	r2, #0
 8018870:	9204      	str	r2, [sp, #16]
 8018872:	2200      	movs	r2, #0
 8018874:	9203      	str	r2, [sp, #12]
 8018876:	9302      	str	r3, [sp, #8]
 8018878:	2305      	movs	r3, #5
 801887a:	9301      	str	r3, [sp, #4]
 801887c:	4b37      	ldr	r3, [pc, #220]	; (801895c <RegionEU868RxConfig+0x1dc>)
 801887e:	9300      	str	r3, [sp, #0]
 8018880:	2300      	movs	r3, #0
 8018882:	0032      	movs	r2, r6
 8018884:	0029      	movs	r1, r5
 8018886:	47a0      	blx	r4
 8018888:	e029      	b.n	80188de <RegionEU868RxConfig+0x15e>
    }
    else
    {
        modem = MODEM_LORA;
 801888a:	2117      	movs	r1, #23
 801888c:	187b      	adds	r3, r7, r1
 801888e:	2201      	movs	r2, #1
 8018890:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8018892:	4b2e      	ldr	r3, [pc, #184]	; (801894c <RegionEU868RxConfig+0x1cc>)
 8018894:	699c      	ldr	r4, [r3, #24]
 8018896:	687b      	ldr	r3, [r7, #4]
 8018898:	789b      	ldrb	r3, [r3, #2]
 801889a:	001e      	movs	r6, r3
 801889c:	230e      	movs	r3, #14
 801889e:	18fb      	adds	r3, r7, r3
 80188a0:	2500      	movs	r5, #0
 80188a2:	575d      	ldrsb	r5, [r3, r5]
 80188a4:	687b      	ldr	r3, [r7, #4]
 80188a6:	689b      	ldr	r3, [r3, #8]
 80188a8:	b29b      	uxth	r3, r3
 80188aa:	687a      	ldr	r2, [r7, #4]
 80188ac:	7c92      	ldrb	r2, [r2, #18]
 80188ae:	1879      	adds	r1, r7, r1
 80188b0:	7808      	ldrb	r0, [r1, #0]
 80188b2:	9209      	str	r2, [sp, #36]	; 0x24
 80188b4:	2201      	movs	r2, #1
 80188b6:	9208      	str	r2, [sp, #32]
 80188b8:	2200      	movs	r2, #0
 80188ba:	9207      	str	r2, [sp, #28]
 80188bc:	2200      	movs	r2, #0
 80188be:	9206      	str	r2, [sp, #24]
 80188c0:	2200      	movs	r2, #0
 80188c2:	9205      	str	r2, [sp, #20]
 80188c4:	2200      	movs	r2, #0
 80188c6:	9204      	str	r2, [sp, #16]
 80188c8:	2200      	movs	r2, #0
 80188ca:	9203      	str	r2, [sp, #12]
 80188cc:	9302      	str	r3, [sp, #8]
 80188ce:	2308      	movs	r3, #8
 80188d0:	9301      	str	r3, [sp, #4]
 80188d2:	2300      	movs	r3, #0
 80188d4:	9300      	str	r3, [sp, #0]
 80188d6:	2301      	movs	r3, #1
 80188d8:	002a      	movs	r2, r5
 80188da:	0031      	movs	r1, r6
 80188dc:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 80188de:	687b      	ldr	r3, [r7, #4]
 80188e0:	7c5b      	ldrb	r3, [r3, #17]
 80188e2:	2b00      	cmp	r3, #0
 80188e4:	d009      	beq.n	80188fa <RegionEU868RxConfig+0x17a>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 80188e6:	230f      	movs	r3, #15
 80188e8:	18fb      	adds	r3, r7, r3
 80188ea:	2200      	movs	r2, #0
 80188ec:	569a      	ldrsb	r2, [r3, r2]
 80188ee:	2316      	movs	r3, #22
 80188f0:	18fb      	adds	r3, r7, r3
 80188f2:	491b      	ldr	r1, [pc, #108]	; (8018960 <RegionEU868RxConfig+0x1e0>)
 80188f4:	5c8a      	ldrb	r2, [r1, r2]
 80188f6:	701a      	strb	r2, [r3, #0]
 80188f8:	e008      	b.n	801890c <RegionEU868RxConfig+0x18c>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 80188fa:	230f      	movs	r3, #15
 80188fc:	18fb      	adds	r3, r7, r3
 80188fe:	2200      	movs	r2, #0
 8018900:	569a      	ldrsb	r2, [r3, r2]
 8018902:	2316      	movs	r3, #22
 8018904:	18fb      	adds	r3, r7, r3
 8018906:	4917      	ldr	r1, [pc, #92]	; (8018964 <RegionEU868RxConfig+0x1e4>)
 8018908:	5c8a      	ldrb	r2, [r1, r2]
 801890a:	701a      	strb	r2, [r3, #0]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 801890c:	4b0f      	ldr	r3, [pc, #60]	; (801894c <RegionEU868RxConfig+0x1cc>)
 801890e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018910:	2216      	movs	r2, #22
 8018912:	18ba      	adds	r2, r7, r2
 8018914:	7812      	ldrb	r2, [r2, #0]
 8018916:	320d      	adds	r2, #13
 8018918:	b2d1      	uxtb	r1, r2
 801891a:	2217      	movs	r2, #23
 801891c:	18ba      	adds	r2, r7, r2
 801891e:	7812      	ldrb	r2, [r2, #0]
 8018920:	0010      	movs	r0, r2
 8018922:	4798      	blx	r3
    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8018924:	687b      	ldr	r3, [r7, #4]
 8018926:	7cd8      	ldrb	r0, [r3, #19]
 8018928:	240f      	movs	r4, #15
 801892a:	193b      	adds	r3, r7, r4
 801892c:	2200      	movs	r2, #0
 801892e:	569a      	ldrsb	r2, [r3, r2]
 8018930:	693b      	ldr	r3, [r7, #16]
 8018932:	0019      	movs	r1, r3
 8018934:	f7ff fa32 	bl	8017d9c <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 8018938:	683b      	ldr	r3, [r7, #0]
 801893a:	193a      	adds	r2, r7, r4
 801893c:	7812      	ldrb	r2, [r2, #0]
 801893e:	701a      	strb	r2, [r3, #0]
    return true;
 8018940:	2301      	movs	r3, #1
}
 8018942:	0018      	movs	r0, r3
 8018944:	46bd      	mov	sp, r7
 8018946:	b007      	add	sp, #28
 8018948:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801894a:	46c0      	nop			; (mov r8, r8)
 801894c:	0801fd54 	.word	0x0801fd54
 8018950:	20000d44 	.word	0x20000d44
 8018954:	0801fbd0 	.word	0x0801fbd0
 8018958:	0000c350 	.word	0x0000c350
 801895c:	00014585 	.word	0x00014585
 8018960:	0801fc00 	.word	0x0801fc00
 8018964:	0801fbf8 	.word	0x0801fbf8

08018968 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8018968:	b5f0      	push	{r4, r5, r6, r7, lr}
 801896a:	b093      	sub	sp, #76	; 0x4c
 801896c:	af0a      	add	r7, sp, #40	; 0x28
 801896e:	60f8      	str	r0, [r7, #12]
 8018970:	60b9      	str	r1, [r7, #8]
 8018972:	607a      	str	r2, [r7, #4]
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8018974:	68fb      	ldr	r3, [r7, #12]
 8018976:	785b      	ldrb	r3, [r3, #1]
 8018978:	b25b      	sxtb	r3, r3
 801897a:	001a      	movs	r2, r3
 801897c:	4b6b      	ldr	r3, [pc, #428]	; (8018b2c <RegionEU868TxConfig+0x1c4>)
 801897e:	5c9a      	ldrb	r2, [r3, r2]
 8018980:	251e      	movs	r5, #30
 8018982:	197b      	adds	r3, r7, r5
 8018984:	701a      	strb	r2, [r3, #0]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 8018986:	68fb      	ldr	r3, [r7, #12]
 8018988:	2002      	movs	r0, #2
 801898a:	5618      	ldrsb	r0, [r3, r0]
 801898c:	68fb      	ldr	r3, [r7, #12]
 801898e:	781b      	ldrb	r3, [r3, #0]
 8018990:	0019      	movs	r1, r3
 8018992:	4a67      	ldr	r2, [pc, #412]	; (8018b30 <RegionEU868TxConfig+0x1c8>)
 8018994:	000b      	movs	r3, r1
 8018996:	005b      	lsls	r3, r3, #1
 8018998:	185b      	adds	r3, r3, r1
 801899a:	009b      	lsls	r3, r3, #2
 801899c:	18d3      	adds	r3, r2, r3
 801899e:	3309      	adds	r3, #9
 80189a0:	781b      	ldrb	r3, [r3, #0]
 80189a2:	001c      	movs	r4, r3
 80189a4:	4a62      	ldr	r2, [pc, #392]	; (8018b30 <RegionEU868TxConfig+0x1c8>)
 80189a6:	21c2      	movs	r1, #194	; 0xc2
 80189a8:	0023      	movs	r3, r4
 80189aa:	009b      	lsls	r3, r3, #2
 80189ac:	191b      	adds	r3, r3, r4
 80189ae:	009b      	lsls	r3, r3, #2
 80189b0:	18d3      	adds	r3, r2, r3
 80189b2:	185b      	adds	r3, r3, r1
 80189b4:	2100      	movs	r1, #0
 80189b6:	5659      	ldrsb	r1, [r3, r1]
 80189b8:	68fb      	ldr	r3, [r7, #12]
 80189ba:	2201      	movs	r2, #1
 80189bc:	569a      	ldrsb	r2, [r3, r2]
 80189be:	261d      	movs	r6, #29
 80189c0:	19bc      	adds	r4, r7, r6
 80189c2:	4b5c      	ldr	r3, [pc, #368]	; (8018b34 <RegionEU868TxConfig+0x1cc>)
 80189c4:	f7ff fa7c 	bl	8017ec0 <LimitTxPower>
 80189c8:	0003      	movs	r3, r0
 80189ca:	7023      	strb	r3, [r4, #0]
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
 80189cc:	68fb      	ldr	r3, [r7, #12]
 80189ce:	785b      	ldrb	r3, [r3, #1]
 80189d0:	b25b      	sxtb	r3, r3
 80189d2:	0018      	movs	r0, r3
 80189d4:	f7ff fa56 	bl	8017e84 <GetBandwidth>
 80189d8:	0003      	movs	r3, r0
 80189da:	61bb      	str	r3, [r7, #24]
    int8_t phyTxPower = 0;
 80189dc:	2017      	movs	r0, #23
 80189de:	183b      	adds	r3, r7, r0
 80189e0:	2200      	movs	r2, #0
 80189e2:	701a      	strb	r2, [r3, #0]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 80189e4:	68fb      	ldr	r3, [r7, #12]
 80189e6:	6859      	ldr	r1, [r3, #4]
 80189e8:	68fb      	ldr	r3, [r7, #12]
 80189ea:	689a      	ldr	r2, [r3, #8]
 80189ec:	183c      	adds	r4, r7, r0
 80189ee:	19bb      	adds	r3, r7, r6
 80189f0:	781b      	ldrb	r3, [r3, #0]
 80189f2:	b25b      	sxtb	r3, r3
 80189f4:	0018      	movs	r0, r3
 80189f6:	f7ff f841 	bl	8017a7c <RegionCommonComputeTxPower>
 80189fa:	0003      	movs	r3, r0
 80189fc:	7023      	strb	r3, [r4, #0]

    // Setup the radio frequency
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 80189fe:	4b4e      	ldr	r3, [pc, #312]	; (8018b38 <RegionEU868TxConfig+0x1d0>)
 8018a00:	68da      	ldr	r2, [r3, #12]
 8018a02:	68fb      	ldr	r3, [r7, #12]
 8018a04:	781b      	ldrb	r3, [r3, #0]
 8018a06:	0018      	movs	r0, r3
 8018a08:	4949      	ldr	r1, [pc, #292]	; (8018b30 <RegionEU868TxConfig+0x1c8>)
 8018a0a:	0003      	movs	r3, r0
 8018a0c:	005b      	lsls	r3, r3, #1
 8018a0e:	181b      	adds	r3, r3, r0
 8018a10:	009b      	lsls	r3, r3, #2
 8018a12:	585b      	ldr	r3, [r3, r1]
 8018a14:	0018      	movs	r0, r3
 8018a16:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8018a18:	68fb      	ldr	r3, [r7, #12]
 8018a1a:	785b      	ldrb	r3, [r3, #1]
 8018a1c:	b25b      	sxtb	r3, r3
 8018a1e:	2b07      	cmp	r3, #7
 8018a20:	d12e      	bne.n	8018a80 <RegionEU868TxConfig+0x118>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8018a22:	231f      	movs	r3, #31
 8018a24:	18fb      	adds	r3, r7, r3
 8018a26:	2200      	movs	r2, #0
 8018a28:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8018a2a:	4b43      	ldr	r3, [pc, #268]	; (8018b38 <RegionEU868TxConfig+0x1d0>)
 8018a2c:	69dc      	ldr	r4, [r3, #28]
 8018a2e:	197b      	adds	r3, r7, r5
 8018a30:	2200      	movs	r2, #0
 8018a32:	569a      	ldrsb	r2, [r3, r2]
 8018a34:	0013      	movs	r3, r2
 8018a36:	015b      	lsls	r3, r3, #5
 8018a38:	1a9b      	subs	r3, r3, r2
 8018a3a:	009b      	lsls	r3, r3, #2
 8018a3c:	189b      	adds	r3, r3, r2
 8018a3e:	00db      	lsls	r3, r3, #3
 8018a40:	001e      	movs	r6, r3
 8018a42:	69ba      	ldr	r2, [r7, #24]
 8018a44:	4d3d      	ldr	r5, [pc, #244]	; (8018b3c <RegionEU868TxConfig+0x1d4>)
 8018a46:	2017      	movs	r0, #23
 8018a48:	183b      	adds	r3, r7, r0
 8018a4a:	2100      	movs	r1, #0
 8018a4c:	5659      	ldrsb	r1, [r3, r1]
 8018a4e:	231f      	movs	r3, #31
 8018a50:	18fb      	adds	r3, r7, r3
 8018a52:	7818      	ldrb	r0, [r3, #0]
 8018a54:	23fa      	movs	r3, #250	; 0xfa
 8018a56:	011b      	lsls	r3, r3, #4
 8018a58:	9308      	str	r3, [sp, #32]
 8018a5a:	2300      	movs	r3, #0
 8018a5c:	9307      	str	r3, [sp, #28]
 8018a5e:	2300      	movs	r3, #0
 8018a60:	9306      	str	r3, [sp, #24]
 8018a62:	2300      	movs	r3, #0
 8018a64:	9305      	str	r3, [sp, #20]
 8018a66:	2301      	movs	r3, #1
 8018a68:	9304      	str	r3, [sp, #16]
 8018a6a:	2300      	movs	r3, #0
 8018a6c:	9303      	str	r3, [sp, #12]
 8018a6e:	2305      	movs	r3, #5
 8018a70:	9302      	str	r3, [sp, #8]
 8018a72:	2300      	movs	r3, #0
 8018a74:	9301      	str	r3, [sp, #4]
 8018a76:	9600      	str	r6, [sp, #0]
 8018a78:	0013      	movs	r3, r2
 8018a7a:	002a      	movs	r2, r5
 8018a7c:	47a0      	blx	r4
 8018a7e:	e025      	b.n	8018acc <RegionEU868TxConfig+0x164>
    }
    else
    {
        modem = MODEM_LORA;
 8018a80:	201f      	movs	r0, #31
 8018a82:	183b      	adds	r3, r7, r0
 8018a84:	2201      	movs	r2, #1
 8018a86:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8018a88:	4b2b      	ldr	r3, [pc, #172]	; (8018b38 <RegionEU868TxConfig+0x1d0>)
 8018a8a:	69dc      	ldr	r4, [r3, #28]
 8018a8c:	231e      	movs	r3, #30
 8018a8e:	18fb      	adds	r3, r7, r3
 8018a90:	781b      	ldrb	r3, [r3, #0]
 8018a92:	b25b      	sxtb	r3, r3
 8018a94:	69bd      	ldr	r5, [r7, #24]
 8018a96:	2217      	movs	r2, #23
 8018a98:	18ba      	adds	r2, r7, r2
 8018a9a:	2100      	movs	r1, #0
 8018a9c:	5651      	ldrsb	r1, [r2, r1]
 8018a9e:	183a      	adds	r2, r7, r0
 8018aa0:	7810      	ldrb	r0, [r2, #0]
 8018aa2:	22fa      	movs	r2, #250	; 0xfa
 8018aa4:	0112      	lsls	r2, r2, #4
 8018aa6:	9208      	str	r2, [sp, #32]
 8018aa8:	2200      	movs	r2, #0
 8018aaa:	9207      	str	r2, [sp, #28]
 8018aac:	2200      	movs	r2, #0
 8018aae:	9206      	str	r2, [sp, #24]
 8018ab0:	2200      	movs	r2, #0
 8018ab2:	9205      	str	r2, [sp, #20]
 8018ab4:	2201      	movs	r2, #1
 8018ab6:	9204      	str	r2, [sp, #16]
 8018ab8:	2200      	movs	r2, #0
 8018aba:	9203      	str	r2, [sp, #12]
 8018abc:	2208      	movs	r2, #8
 8018abe:	9202      	str	r2, [sp, #8]
 8018ac0:	2201      	movs	r2, #1
 8018ac2:	9201      	str	r2, [sp, #4]
 8018ac4:	9300      	str	r3, [sp, #0]
 8018ac6:	002b      	movs	r3, r5
 8018ac8:	2200      	movs	r2, #0
 8018aca:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8018acc:	68fb      	ldr	r3, [r7, #12]
 8018ace:	781b      	ldrb	r3, [r3, #0]
 8018ad0:	0019      	movs	r1, r3
 8018ad2:	4a17      	ldr	r2, [pc, #92]	; (8018b30 <RegionEU868TxConfig+0x1c8>)
 8018ad4:	000b      	movs	r3, r1
 8018ad6:	005b      	lsls	r3, r3, #1
 8018ad8:	185b      	adds	r3, r3, r1
 8018ada:	009b      	lsls	r3, r3, #2
 8018adc:	589a      	ldr	r2, [r3, r2]
 8018ade:	68fb      	ldr	r3, [r7, #12]
 8018ae0:	785b      	ldrb	r3, [r3, #1]
 8018ae2:	b25b      	sxtb	r3, r3
 8018ae4:	0019      	movs	r1, r3
 8018ae6:	0010      	movs	r0, r2
 8018ae8:	f7ff f970 	bl	8017dcc <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8018aec:	68fb      	ldr	r3, [r7, #12]
 8018aee:	2201      	movs	r2, #1
 8018af0:	569a      	ldrsb	r2, [r3, r2]
 8018af2:	68fb      	ldr	r3, [r7, #12]
 8018af4:	899b      	ldrh	r3, [r3, #12]
 8018af6:	0019      	movs	r1, r3
 8018af8:	0010      	movs	r0, r2
 8018afa:	f7ff fa81 	bl	8018000 <GetTimeOnAir>
 8018afe:	0002      	movs	r2, r0
 8018b00:	687b      	ldr	r3, [r7, #4]
 8018b02:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8018b04:	4b0c      	ldr	r3, [pc, #48]	; (8018b38 <RegionEU868TxConfig+0x1d0>)
 8018b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018b08:	68fa      	ldr	r2, [r7, #12]
 8018b0a:	8992      	ldrh	r2, [r2, #12]
 8018b0c:	b2d1      	uxtb	r1, r2
 8018b0e:	221f      	movs	r2, #31
 8018b10:	18ba      	adds	r2, r7, r2
 8018b12:	7812      	ldrb	r2, [r2, #0]
 8018b14:	0010      	movs	r0, r2
 8018b16:	4798      	blx	r3

    *txPower = txPowerLimited;
 8018b18:	68bb      	ldr	r3, [r7, #8]
 8018b1a:	221d      	movs	r2, #29
 8018b1c:	18ba      	adds	r2, r7, r2
 8018b1e:	7812      	ldrb	r2, [r2, #0]
 8018b20:	701a      	strb	r2, [r3, #0]
    return true;
 8018b22:	2301      	movs	r3, #1
}
 8018b24:	0018      	movs	r0, r3
 8018b26:	46bd      	mov	sp, r7
 8018b28:	b009      	add	sp, #36	; 0x24
 8018b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018b2c:	0801fbd0 	.word	0x0801fbd0
 8018b30:	20000d44 	.word	0x20000d44
 8018b34:	20000e7c 	.word	0x20000e7c
 8018b38:	0801fd54 	.word	0x0801fd54
 8018b3c:	000061a8 	.word	0x000061a8

08018b40 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8018b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018b42:	b093      	sub	sp, #76	; 0x4c
 8018b44:	af00      	add	r7, sp, #0
 8018b46:	60f8      	str	r0, [r7, #12]
 8018b48:	60b9      	str	r1, [r7, #8]
 8018b4a:	607a      	str	r2, [r7, #4]
 8018b4c:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8018b4e:	2347      	movs	r3, #71	; 0x47
 8018b50:	18fb      	adds	r3, r7, r3
 8018b52:	2207      	movs	r2, #7
 8018b54:	701a      	strb	r2, [r3, #0]
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8018b56:	233c      	movs	r3, #60	; 0x3c
 8018b58:	18fb      	adds	r3, r7, r3
 8018b5a:	0018      	movs	r0, r3
 8018b5c:	2306      	movs	r3, #6
 8018b5e:	001a      	movs	r2, r3
 8018b60:	2100      	movs	r1, #0
 8018b62:	f005 f9da 	bl	801df1a <memset>
    uint8_t nextIndex = 0;
 8018b66:	2344      	movs	r3, #68	; 0x44
 8018b68:	18fb      	adds	r3, r7, r3
 8018b6a:	2200      	movs	r2, #0
 8018b6c:	701a      	strb	r2, [r3, #0]
    uint8_t bytesProcessed = 0;
 8018b6e:	2346      	movs	r3, #70	; 0x46
 8018b70:	18fb      	adds	r3, r7, r3
 8018b72:	2200      	movs	r2, #0
 8018b74:	701a      	strb	r2, [r3, #0]
    uint16_t chMask = 0;
 8018b76:	233a      	movs	r3, #58	; 0x3a
 8018b78:	18fb      	adds	r3, r7, r3
 8018b7a:	2200      	movs	r2, #0
 8018b7c:	801a      	strh	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8018b7e:	e098      	b.n	8018cb2 <RegionEU868LinkAdrReq+0x172>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8018b80:	68fb      	ldr	r3, [r7, #12]
 8018b82:	685a      	ldr	r2, [r3, #4]
 8018b84:	2546      	movs	r5, #70	; 0x46
 8018b86:	197b      	adds	r3, r7, r5
 8018b88:	781b      	ldrb	r3, [r3, #0]
 8018b8a:	18d3      	adds	r3, r2, r3
 8018b8c:	2644      	movs	r6, #68	; 0x44
 8018b8e:	19bc      	adds	r4, r7, r6
 8018b90:	203c      	movs	r0, #60	; 0x3c
 8018b92:	183a      	adds	r2, r7, r0
 8018b94:	0011      	movs	r1, r2
 8018b96:	0018      	movs	r0, r3
 8018b98:	f7fe fe08 	bl	80177ac <RegionCommonParseLinkAdrReq>
 8018b9c:	0003      	movs	r3, r0
 8018b9e:	7023      	strb	r3, [r4, #0]

        if( nextIndex == 0 )
 8018ba0:	0032      	movs	r2, r6
 8018ba2:	18bb      	adds	r3, r7, r2
 8018ba4:	781b      	ldrb	r3, [r3, #0]
 8018ba6:	2b00      	cmp	r3, #0
 8018ba8:	d100      	bne.n	8018bac <RegionEU868LinkAdrReq+0x6c>
 8018baa:	e08b      	b.n	8018cc4 <RegionEU868LinkAdrReq+0x184>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8018bac:	197b      	adds	r3, r7, r5
 8018bae:	1979      	adds	r1, r7, r5
 8018bb0:	18ba      	adds	r2, r7, r2
 8018bb2:	7809      	ldrb	r1, [r1, #0]
 8018bb4:	7812      	ldrb	r2, [r2, #0]
 8018bb6:	188a      	adds	r2, r1, r2
 8018bb8:	701a      	strb	r2, [r3, #0]

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8018bba:	2147      	movs	r1, #71	; 0x47
 8018bbc:	187b      	adds	r3, r7, r1
 8018bbe:	2207      	movs	r2, #7
 8018bc0:	701a      	strb	r2, [r3, #0]

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8018bc2:	203c      	movs	r0, #60	; 0x3c
 8018bc4:	183b      	adds	r3, r7, r0
 8018bc6:	889a      	ldrh	r2, [r3, #4]
 8018bc8:	243a      	movs	r4, #58	; 0x3a
 8018bca:	193b      	adds	r3, r7, r4
 8018bcc:	801a      	strh	r2, [r3, #0]

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8018bce:	183b      	adds	r3, r7, r0
 8018bd0:	78db      	ldrb	r3, [r3, #3]
 8018bd2:	2b00      	cmp	r3, #0
 8018bd4:	d10a      	bne.n	8018bec <RegionEU868LinkAdrReq+0xac>
 8018bd6:	193b      	adds	r3, r7, r4
 8018bd8:	881b      	ldrh	r3, [r3, #0]
 8018bda:	2b00      	cmp	r3, #0
 8018bdc:	d106      	bne.n	8018bec <RegionEU868LinkAdrReq+0xac>
        {
            status &= 0xFE; // Channel mask KO
 8018bde:	187b      	adds	r3, r7, r1
 8018be0:	187a      	adds	r2, r7, r1
 8018be2:	7812      	ldrb	r2, [r2, #0]
 8018be4:	2101      	movs	r1, #1
 8018be6:	438a      	bics	r2, r1
 8018be8:	701a      	strb	r2, [r3, #0]
 8018bea:	e062      	b.n	8018cb2 <RegionEU868LinkAdrReq+0x172>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8018bec:	223c      	movs	r2, #60	; 0x3c
 8018bee:	18bb      	adds	r3, r7, r2
 8018bf0:	78db      	ldrb	r3, [r3, #3]
 8018bf2:	2b00      	cmp	r3, #0
 8018bf4:	d003      	beq.n	8018bfe <RegionEU868LinkAdrReq+0xbe>
 8018bf6:	18bb      	adds	r3, r7, r2
 8018bf8:	78db      	ldrb	r3, [r3, #3]
 8018bfa:	2b05      	cmp	r3, #5
 8018bfc:	d904      	bls.n	8018c08 <RegionEU868LinkAdrReq+0xc8>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8018bfe:	233c      	movs	r3, #60	; 0x3c
 8018c00:	18fb      	adds	r3, r7, r3
 8018c02:	78db      	ldrb	r3, [r3, #3]
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8018c04:	2b06      	cmp	r3, #6
 8018c06:	d907      	bls.n	8018c18 <RegionEU868LinkAdrReq+0xd8>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8018c08:	2247      	movs	r2, #71	; 0x47
 8018c0a:	18bb      	adds	r3, r7, r2
 8018c0c:	18ba      	adds	r2, r7, r2
 8018c0e:	7812      	ldrb	r2, [r2, #0]
 8018c10:	2101      	movs	r1, #1
 8018c12:	438a      	bics	r2, r1
 8018c14:	701a      	strb	r2, [r3, #0]
 8018c16:	e04c      	b.n	8018cb2 <RegionEU868LinkAdrReq+0x172>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8018c18:	2345      	movs	r3, #69	; 0x45
 8018c1a:	18fb      	adds	r3, r7, r3
 8018c1c:	2200      	movs	r2, #0
 8018c1e:	701a      	strb	r2, [r3, #0]
 8018c20:	e042      	b.n	8018ca8 <RegionEU868LinkAdrReq+0x168>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8018c22:	233c      	movs	r3, #60	; 0x3c
 8018c24:	18fb      	adds	r3, r7, r3
 8018c26:	78db      	ldrb	r3, [r3, #3]
 8018c28:	2b06      	cmp	r3, #6
 8018c2a:	d11a      	bne.n	8018c62 <RegionEU868LinkAdrReq+0x122>
                {
                    if( NvmCtx.Channels[i].Frequency != 0 )
 8018c2c:	2045      	movs	r0, #69	; 0x45
 8018c2e:	183b      	adds	r3, r7, r0
 8018c30:	781a      	ldrb	r2, [r3, #0]
 8018c32:	496d      	ldr	r1, [pc, #436]	; (8018de8 <RegionEU868LinkAdrReq+0x2a8>)
 8018c34:	0013      	movs	r3, r2
 8018c36:	005b      	lsls	r3, r3, #1
 8018c38:	189b      	adds	r3, r3, r2
 8018c3a:	009b      	lsls	r3, r3, #2
 8018c3c:	585b      	ldr	r3, [r3, r1]
 8018c3e:	2b00      	cmp	r3, #0
 8018c40:	d02c      	beq.n	8018c9c <RegionEU868LinkAdrReq+0x15c>
                    {
                        chMask |= 1 << i;
 8018c42:	183b      	adds	r3, r7, r0
 8018c44:	781b      	ldrb	r3, [r3, #0]
 8018c46:	2201      	movs	r2, #1
 8018c48:	409a      	lsls	r2, r3
 8018c4a:	0013      	movs	r3, r2
 8018c4c:	b21a      	sxth	r2, r3
 8018c4e:	213a      	movs	r1, #58	; 0x3a
 8018c50:	187b      	adds	r3, r7, r1
 8018c52:	881b      	ldrh	r3, [r3, #0]
 8018c54:	b21b      	sxth	r3, r3
 8018c56:	4313      	orrs	r3, r2
 8018c58:	b21b      	sxth	r3, r3
 8018c5a:	b29a      	uxth	r2, r3
 8018c5c:	187b      	adds	r3, r7, r1
 8018c5e:	801a      	strh	r2, [r3, #0]
 8018c60:	e01c      	b.n	8018c9c <RegionEU868LinkAdrReq+0x15c>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8018c62:	233a      	movs	r3, #58	; 0x3a
 8018c64:	18fb      	adds	r3, r7, r3
 8018c66:	881b      	ldrh	r3, [r3, #0]
 8018c68:	001a      	movs	r2, r3
 8018c6a:	2145      	movs	r1, #69	; 0x45
 8018c6c:	187b      	adds	r3, r7, r1
 8018c6e:	781b      	ldrb	r3, [r3, #0]
 8018c70:	411a      	asrs	r2, r3
 8018c72:	0013      	movs	r3, r2
 8018c74:	2201      	movs	r2, #1
 8018c76:	4013      	ands	r3, r2
 8018c78:	d010      	beq.n	8018c9c <RegionEU868LinkAdrReq+0x15c>
                        ( NvmCtx.Channels[i].Frequency == 0 ) )
 8018c7a:	187b      	adds	r3, r7, r1
 8018c7c:	781a      	ldrb	r2, [r3, #0]
 8018c7e:	495a      	ldr	r1, [pc, #360]	; (8018de8 <RegionEU868LinkAdrReq+0x2a8>)
 8018c80:	0013      	movs	r3, r2
 8018c82:	005b      	lsls	r3, r3, #1
 8018c84:	189b      	adds	r3, r3, r2
 8018c86:	009b      	lsls	r3, r3, #2
 8018c88:	585b      	ldr	r3, [r3, r1]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8018c8a:	2b00      	cmp	r3, #0
 8018c8c:	d106      	bne.n	8018c9c <RegionEU868LinkAdrReq+0x15c>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8018c8e:	2247      	movs	r2, #71	; 0x47
 8018c90:	18bb      	adds	r3, r7, r2
 8018c92:	18ba      	adds	r2, r7, r2
 8018c94:	7812      	ldrb	r2, [r2, #0]
 8018c96:	2101      	movs	r1, #1
 8018c98:	438a      	bics	r2, r1
 8018c9a:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8018c9c:	2145      	movs	r1, #69	; 0x45
 8018c9e:	187b      	adds	r3, r7, r1
 8018ca0:	781a      	ldrb	r2, [r3, #0]
 8018ca2:	187b      	adds	r3, r7, r1
 8018ca4:	3201      	adds	r2, #1
 8018ca6:	701a      	strb	r2, [r3, #0]
 8018ca8:	2345      	movs	r3, #69	; 0x45
 8018caa:	18fb      	adds	r3, r7, r3
 8018cac:	781b      	ldrb	r3, [r3, #0]
 8018cae:	2b0f      	cmp	r3, #15
 8018cb0:	d9b7      	bls.n	8018c22 <RegionEU868LinkAdrReq+0xe2>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8018cb2:	68fb      	ldr	r3, [r7, #12]
 8018cb4:	7a1b      	ldrb	r3, [r3, #8]
 8018cb6:	2246      	movs	r2, #70	; 0x46
 8018cb8:	18ba      	adds	r2, r7, r2
 8018cba:	7812      	ldrb	r2, [r2, #0]
 8018cbc:	429a      	cmp	r2, r3
 8018cbe:	d200      	bcs.n	8018cc2 <RegionEU868LinkAdrReq+0x182>
 8018cc0:	e75e      	b.n	8018b80 <RegionEU868LinkAdrReq+0x40>
 8018cc2:	e000      	b.n	8018cc6 <RegionEU868LinkAdrReq+0x186>
            break; // break loop, since no more request has been found
 8018cc4:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8018cc6:	2134      	movs	r1, #52	; 0x34
 8018cc8:	187b      	adds	r3, r7, r1
 8018cca:	2202      	movs	r2, #2
 8018ccc:	701a      	strb	r2, [r3, #0]
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8018cce:	68fb      	ldr	r3, [r7, #12]
 8018cd0:	7a5a      	ldrb	r2, [r3, #9]
 8018cd2:	187b      	adds	r3, r7, r1
 8018cd4:	709a      	strb	r2, [r3, #2]
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8018cd6:	187b      	adds	r3, r7, r1
 8018cd8:	0018      	movs	r0, r3
 8018cda:	f7ff f9ef 	bl	80180bc <RegionEU868GetPhyParam>
 8018cde:	0003      	movs	r3, r0
 8018ce0:	001a      	movs	r2, r3
 8018ce2:	2030      	movs	r0, #48	; 0x30
 8018ce4:	183b      	adds	r3, r7, r0
 8018ce6:	601a      	str	r2, [r3, #0]

    linkAdrVerifyParams.Status = status;
 8018ce8:	2110      	movs	r1, #16
 8018cea:	187b      	adds	r3, r7, r1
 8018cec:	2447      	movs	r4, #71	; 0x47
 8018cee:	193a      	adds	r2, r7, r4
 8018cf0:	7812      	ldrb	r2, [r2, #0]
 8018cf2:	711a      	strb	r2, [r3, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8018cf4:	68fb      	ldr	r3, [r7, #12]
 8018cf6:	7a9a      	ldrb	r2, [r3, #10]
 8018cf8:	187b      	adds	r3, r7, r1
 8018cfa:	715a      	strb	r2, [r3, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8018cfc:	253c      	movs	r5, #60	; 0x3c
 8018cfe:	197b      	adds	r3, r7, r5
 8018d00:	2201      	movs	r2, #1
 8018d02:	569a      	ldrsb	r2, [r3, r2]
 8018d04:	187b      	adds	r3, r7, r1
 8018d06:	719a      	strb	r2, [r3, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8018d08:	197b      	adds	r3, r7, r5
 8018d0a:	2202      	movs	r2, #2
 8018d0c:	569a      	ldrsb	r2, [r3, r2]
 8018d0e:	187b      	adds	r3, r7, r1
 8018d10:	71da      	strb	r2, [r3, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8018d12:	197b      	adds	r3, r7, r5
 8018d14:	781a      	ldrb	r2, [r3, #0]
 8018d16:	187b      	adds	r3, r7, r1
 8018d18:	721a      	strb	r2, [r3, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8018d1a:	68fb      	ldr	r3, [r7, #12]
 8018d1c:	220b      	movs	r2, #11
 8018d1e:	569a      	ldrsb	r2, [r3, r2]
 8018d20:	187b      	adds	r3, r7, r1
 8018d22:	725a      	strb	r2, [r3, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8018d24:	68fb      	ldr	r3, [r7, #12]
 8018d26:	220c      	movs	r2, #12
 8018d28:	569a      	ldrsb	r2, [r3, r2]
 8018d2a:	187b      	adds	r3, r7, r1
 8018d2c:	729a      	strb	r2, [r3, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8018d2e:	68fb      	ldr	r3, [r7, #12]
 8018d30:	7b5b      	ldrb	r3, [r3, #13]
 8018d32:	b25a      	sxtb	r2, r3
 8018d34:	187b      	adds	r3, r7, r1
 8018d36:	72da      	strb	r2, [r3, #11]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8018d38:	187b      	adds	r3, r7, r1
 8018d3a:	2210      	movs	r2, #16
 8018d3c:	731a      	strb	r2, [r3, #12]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8018d3e:	187b      	adds	r3, r7, r1
 8018d40:	223a      	movs	r2, #58	; 0x3a
 8018d42:	18ba      	adds	r2, r7, r2
 8018d44:	611a      	str	r2, [r3, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8018d46:	183b      	adds	r3, r7, r0
 8018d48:	681b      	ldr	r3, [r3, #0]
 8018d4a:	b25a      	sxtb	r2, r3
 8018d4c:	0008      	movs	r0, r1
 8018d4e:	183b      	adds	r3, r7, r0
 8018d50:	751a      	strb	r2, [r3, #20]
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 8018d52:	183b      	adds	r3, r7, r0
 8018d54:	2207      	movs	r2, #7
 8018d56:	755a      	strb	r2, [r3, #21]
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 8018d58:	183b      	adds	r3, r7, r0
 8018d5a:	4a23      	ldr	r2, [pc, #140]	; (8018de8 <RegionEU868LinkAdrReq+0x2a8>)
 8018d5c:	619a      	str	r2, [r3, #24]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8018d5e:	183b      	adds	r3, r7, r0
 8018d60:	2200      	movs	r2, #0
 8018d62:	771a      	strb	r2, [r3, #28]
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8018d64:	183b      	adds	r3, r7, r0
 8018d66:	2200      	movs	r2, #0
 8018d68:	775a      	strb	r2, [r3, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8018d6a:	183b      	adds	r3, r7, r0
 8018d6c:	68fa      	ldr	r2, [r7, #12]
 8018d6e:	6812      	ldr	r2, [r2, #0]
 8018d70:	601a      	str	r2, [r3, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8018d72:	0026      	movs	r6, r4
 8018d74:	193c      	adds	r4, r7, r4
 8018d76:	0029      	movs	r1, r5
 8018d78:	187d      	adds	r5, r7, r1
 8018d7a:	187b      	adds	r3, r7, r1
 8018d7c:	1c9a      	adds	r2, r3, #2
 8018d7e:	187b      	adds	r3, r7, r1
 8018d80:	1c59      	adds	r1, r3, #1
 8018d82:	1838      	adds	r0, r7, r0
 8018d84:	002b      	movs	r3, r5
 8018d86:	f7fe fd66 	bl	8017856 <RegionCommonLinkAdrReqVerifyParams>
 8018d8a:	0003      	movs	r3, r0
 8018d8c:	7023      	strb	r3, [r4, #0]

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8018d8e:	19bb      	adds	r3, r7, r6
 8018d90:	781b      	ldrb	r3, [r3, #0]
 8018d92:	2b07      	cmp	r3, #7
 8018d94:	d10c      	bne.n	8018db0 <RegionEU868LinkAdrReq+0x270>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) NvmCtx.ChannelsMask, 0, sizeof( NvmCtx.ChannelsMask ) );
 8018d96:	4b15      	ldr	r3, [pc, #84]	; (8018dec <RegionEU868LinkAdrReq+0x2ac>)
 8018d98:	2202      	movs	r2, #2
 8018d9a:	2100      	movs	r1, #0
 8018d9c:	0018      	movs	r0, r3
 8018d9e:	f000 fbe9 	bl	8019574 <memset1>
        // Update the channels mask
        NvmCtx.ChannelsMask[0] = chMask;
 8018da2:	223a      	movs	r2, #58	; 0x3a
 8018da4:	18bb      	adds	r3, r7, r2
 8018da6:	8819      	ldrh	r1, [r3, #0]
 8018da8:	4a0f      	ldr	r2, [pc, #60]	; (8018de8 <RegionEU868LinkAdrReq+0x2a8>)
 8018daa:	239c      	movs	r3, #156	; 0x9c
 8018dac:	005b      	lsls	r3, r3, #1
 8018dae:	52d1      	strh	r1, [r2, r3]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8018db0:	213c      	movs	r1, #60	; 0x3c
 8018db2:	187b      	adds	r3, r7, r1
 8018db4:	2201      	movs	r2, #1
 8018db6:	569a      	ldrsb	r2, [r3, r2]
 8018db8:	68bb      	ldr	r3, [r7, #8]
 8018dba:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8018dbc:	187b      	adds	r3, r7, r1
 8018dbe:	2202      	movs	r2, #2
 8018dc0:	569a      	ldrsb	r2, [r3, r2]
 8018dc2:	687b      	ldr	r3, [r7, #4]
 8018dc4:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8018dc6:	187b      	adds	r3, r7, r1
 8018dc8:	781a      	ldrb	r2, [r3, #0]
 8018dca:	683b      	ldr	r3, [r7, #0]
 8018dcc:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8018dce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018dd0:	2246      	movs	r2, #70	; 0x46
 8018dd2:	18ba      	adds	r2, r7, r2
 8018dd4:	7812      	ldrb	r2, [r2, #0]
 8018dd6:	701a      	strb	r2, [r3, #0]

    return status;
 8018dd8:	2347      	movs	r3, #71	; 0x47
 8018dda:	18fb      	adds	r3, r7, r3
 8018ddc:	781b      	ldrb	r3, [r3, #0]
}
 8018dde:	0018      	movs	r0, r3
 8018de0:	46bd      	mov	sp, r7
 8018de2:	b013      	add	sp, #76	; 0x4c
 8018de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018de6:	46c0      	nop			; (mov r8, r8)
 8018de8:	20000d44 	.word	0x20000d44
 8018dec:	20000e7c 	.word	0x20000e7c

08018df0 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8018df0:	b590      	push	{r4, r7, lr}
 8018df2:	b085      	sub	sp, #20
 8018df4:	af00      	add	r7, sp, #0
 8018df6:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8018df8:	240f      	movs	r4, #15
 8018dfa:	193b      	adds	r3, r7, r4
 8018dfc:	2207      	movs	r2, #7
 8018dfe:	701a      	strb	r2, [r3, #0]
    uint8_t band = 0;
 8018e00:	210e      	movs	r1, #14
 8018e02:	187b      	adds	r3, r7, r1
 8018e04:	2200      	movs	r2, #0
 8018e06:	701a      	strb	r2, [r3, #0]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8018e08:	687b      	ldr	r3, [r7, #4]
 8018e0a:	685b      	ldr	r3, [r3, #4]
 8018e0c:	187a      	adds	r2, r7, r1
 8018e0e:	0011      	movs	r1, r2
 8018e10:	0018      	movs	r0, r3
 8018e12:	f7ff f87d 	bl	8017f10 <VerifyRfFreq>
 8018e16:	0003      	movs	r3, r0
 8018e18:	001a      	movs	r2, r3
 8018e1a:	2301      	movs	r3, #1
 8018e1c:	4053      	eors	r3, r2
 8018e1e:	b2db      	uxtb	r3, r3
 8018e20:	2b00      	cmp	r3, #0
 8018e22:	d005      	beq.n	8018e30 <RegionEU868RxParamSetupReq+0x40>
    {
        status &= 0xFE; // Channel frequency KO
 8018e24:	193b      	adds	r3, r7, r4
 8018e26:	193a      	adds	r2, r7, r4
 8018e28:	7812      	ldrb	r2, [r2, #0]
 8018e2a:	2101      	movs	r1, #1
 8018e2c:	438a      	bics	r2, r1
 8018e2e:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8018e30:	687b      	ldr	r3, [r7, #4]
 8018e32:	781b      	ldrb	r3, [r3, #0]
 8018e34:	b25b      	sxtb	r3, r3
 8018e36:	2207      	movs	r2, #7
 8018e38:	2100      	movs	r1, #0
 8018e3a:	0018      	movs	r0, r3
 8018e3c:	f7fe fad9 	bl	80173f2 <RegionCommonValueInRange>
 8018e40:	1e03      	subs	r3, r0, #0
 8018e42:	d106      	bne.n	8018e52 <RegionEU868RxParamSetupReq+0x62>
    {
        status &= 0xFD; // Datarate KO
 8018e44:	220f      	movs	r2, #15
 8018e46:	18bb      	adds	r3, r7, r2
 8018e48:	18ba      	adds	r2, r7, r2
 8018e4a:	7812      	ldrb	r2, [r2, #0]
 8018e4c:	2102      	movs	r1, #2
 8018e4e:	438a      	bics	r2, r1
 8018e50:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8018e52:	687b      	ldr	r3, [r7, #4]
 8018e54:	785b      	ldrb	r3, [r3, #1]
 8018e56:	b25b      	sxtb	r3, r3
 8018e58:	2205      	movs	r2, #5
 8018e5a:	2100      	movs	r1, #0
 8018e5c:	0018      	movs	r0, r3
 8018e5e:	f7fe fac8 	bl	80173f2 <RegionCommonValueInRange>
 8018e62:	1e03      	subs	r3, r0, #0
 8018e64:	d106      	bne.n	8018e74 <RegionEU868RxParamSetupReq+0x84>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8018e66:	220f      	movs	r2, #15
 8018e68:	18bb      	adds	r3, r7, r2
 8018e6a:	18ba      	adds	r2, r7, r2
 8018e6c:	7812      	ldrb	r2, [r2, #0]
 8018e6e:	2104      	movs	r1, #4
 8018e70:	438a      	bics	r2, r1
 8018e72:	701a      	strb	r2, [r3, #0]
    }

    return status;
 8018e74:	230f      	movs	r3, #15
 8018e76:	18fb      	adds	r3, r7, r3
 8018e78:	781b      	ldrb	r3, [r3, #0]
}
 8018e7a:	0018      	movs	r0, r3
 8018e7c:	46bd      	mov	sp, r7
 8018e7e:	b005      	add	sp, #20
 8018e80:	bd90      	pop	{r4, r7, pc}

08018e82 <RegionEU868NewChannelReq>:

uint8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8018e82:	b590      	push	{r4, r7, lr}
 8018e84:	b087      	sub	sp, #28
 8018e86:	af00      	add	r7, sp, #0
 8018e88:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8018e8a:	2417      	movs	r4, #23
 8018e8c:	193b      	adds	r3, r7, r4
 8018e8e:	2203      	movs	r2, #3
 8018e90:	701a      	strb	r2, [r3, #0]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8018e92:	687b      	ldr	r3, [r7, #4]
 8018e94:	681b      	ldr	r3, [r3, #0]
 8018e96:	681b      	ldr	r3, [r3, #0]
 8018e98:	2b00      	cmp	r3, #0
 8018e9a:	d118      	bne.n	8018ece <RegionEU868NewChannelReq+0x4c>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8018e9c:	687b      	ldr	r3, [r7, #4]
 8018e9e:	791b      	ldrb	r3, [r3, #4]
 8018ea0:	b25b      	sxtb	r3, r3
 8018ea2:	b2da      	uxtb	r2, r3
 8018ea4:	2108      	movs	r1, #8
 8018ea6:	187b      	adds	r3, r7, r1
 8018ea8:	701a      	strb	r2, [r3, #0]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8018eaa:	187b      	adds	r3, r7, r1
 8018eac:	0018      	movs	r0, r3
 8018eae:	f000 fa35 	bl	801931c <RegionEU868ChannelsRemove>
 8018eb2:	0003      	movs	r3, r0
 8018eb4:	001a      	movs	r2, r3
 8018eb6:	2301      	movs	r3, #1
 8018eb8:	4053      	eors	r3, r2
 8018eba:	b2db      	uxtb	r3, r3
 8018ebc:	2b00      	cmp	r3, #0
 8018ebe:	d041      	beq.n	8018f44 <RegionEU868NewChannelReq+0xc2>
        {
            status &= 0xFC;
 8018ec0:	193b      	adds	r3, r7, r4
 8018ec2:	193a      	adds	r2, r7, r4
 8018ec4:	7812      	ldrb	r2, [r2, #0]
 8018ec6:	2103      	movs	r1, #3
 8018ec8:	438a      	bics	r2, r1
 8018eca:	701a      	strb	r2, [r3, #0]
 8018ecc:	e03a      	b.n	8018f44 <RegionEU868NewChannelReq+0xc2>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8018ece:	687b      	ldr	r3, [r7, #4]
 8018ed0:	681a      	ldr	r2, [r3, #0]
 8018ed2:	210c      	movs	r1, #12
 8018ed4:	187b      	adds	r3, r7, r1
 8018ed6:	601a      	str	r2, [r3, #0]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8018ed8:	687b      	ldr	r3, [r7, #4]
 8018eda:	791b      	ldrb	r3, [r3, #4]
 8018edc:	b25b      	sxtb	r3, r3
 8018ede:	b2da      	uxtb	r2, r3
 8018ee0:	187b      	adds	r3, r7, r1
 8018ee2:	711a      	strb	r2, [r3, #4]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8018ee4:	187b      	adds	r3, r7, r1
 8018ee6:	0018      	movs	r0, r3
 8018ee8:	f000 f954 	bl	8019194 <RegionEU868ChannelAdd>
 8018eec:	0003      	movs	r3, r0
 8018eee:	2b06      	cmp	r3, #6
 8018ef0:	d017      	beq.n	8018f22 <RegionEU868NewChannelReq+0xa0>
 8018ef2:	dc1e      	bgt.n	8018f32 <RegionEU868NewChannelReq+0xb0>
 8018ef4:	2b05      	cmp	r3, #5
 8018ef6:	d00c      	beq.n	8018f12 <RegionEU868NewChannelReq+0x90>
 8018ef8:	dc1b      	bgt.n	8018f32 <RegionEU868NewChannelReq+0xb0>
 8018efa:	2b00      	cmp	r3, #0
 8018efc:	d021      	beq.n	8018f42 <RegionEU868NewChannelReq+0xc0>
 8018efe:	2b04      	cmp	r3, #4
 8018f00:	d117      	bne.n	8018f32 <RegionEU868NewChannelReq+0xb0>
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8018f02:	2217      	movs	r2, #23
 8018f04:	18bb      	adds	r3, r7, r2
 8018f06:	18ba      	adds	r2, r7, r2
 8018f08:	7812      	ldrb	r2, [r2, #0]
 8018f0a:	2101      	movs	r1, #1
 8018f0c:	438a      	bics	r2, r1
 8018f0e:	701a      	strb	r2, [r3, #0]
                break;
 8018f10:	e018      	b.n	8018f44 <RegionEU868NewChannelReq+0xc2>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8018f12:	2217      	movs	r2, #23
 8018f14:	18bb      	adds	r3, r7, r2
 8018f16:	18ba      	adds	r2, r7, r2
 8018f18:	7812      	ldrb	r2, [r2, #0]
 8018f1a:	2102      	movs	r1, #2
 8018f1c:	438a      	bics	r2, r1
 8018f1e:	701a      	strb	r2, [r3, #0]
                break;
 8018f20:	e010      	b.n	8018f44 <RegionEU868NewChannelReq+0xc2>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8018f22:	2217      	movs	r2, #23
 8018f24:	18bb      	adds	r3, r7, r2
 8018f26:	18ba      	adds	r2, r7, r2
 8018f28:	7812      	ldrb	r2, [r2, #0]
 8018f2a:	2103      	movs	r1, #3
 8018f2c:	438a      	bics	r2, r1
 8018f2e:	701a      	strb	r2, [r3, #0]
                break;
 8018f30:	e008      	b.n	8018f44 <RegionEU868NewChannelReq+0xc2>
            }
            default:
            {
                status &= 0xFC;
 8018f32:	2217      	movs	r2, #23
 8018f34:	18bb      	adds	r3, r7, r2
 8018f36:	18ba      	adds	r2, r7, r2
 8018f38:	7812      	ldrb	r2, [r2, #0]
 8018f3a:	2103      	movs	r1, #3
 8018f3c:	438a      	bics	r2, r1
 8018f3e:	701a      	strb	r2, [r3, #0]
                break;
 8018f40:	e000      	b.n	8018f44 <RegionEU868NewChannelReq+0xc2>
                break;
 8018f42:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    return status;
 8018f44:	2317      	movs	r3, #23
 8018f46:	18fb      	adds	r3, r7, r3
 8018f48:	781b      	ldrb	r3, [r3, #0]
}
 8018f4a:	0018      	movs	r0, r3
 8018f4c:	46bd      	mov	sp, r7
 8018f4e:	b007      	add	sp, #28
 8018f50:	bd90      	pop	{r4, r7, pc}

08018f52 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8018f52:	b580      	push	{r7, lr}
 8018f54:	b082      	sub	sp, #8
 8018f56:	af00      	add	r7, sp, #0
 8018f58:	6078      	str	r0, [r7, #4]
    return -1;
 8018f5a:	2301      	movs	r3, #1
 8018f5c:	425b      	negs	r3, r3
}
 8018f5e:	0018      	movs	r0, r3
 8018f60:	46bd      	mov	sp, r7
 8018f62:	b002      	add	sp, #8
 8018f64:	bd80      	pop	{r7, pc}
	...

08018f68 <RegionEU868DlChannelReq>:

uint8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8018f68:	b590      	push	{r4, r7, lr}
 8018f6a:	b085      	sub	sp, #20
 8018f6c:	af00      	add	r7, sp, #0
 8018f6e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8018f70:	240f      	movs	r4, #15
 8018f72:	193b      	adds	r3, r7, r4
 8018f74:	2203      	movs	r2, #3
 8018f76:	701a      	strb	r2, [r3, #0]
    uint8_t band = 0;
 8018f78:	210e      	movs	r1, #14
 8018f7a:	187b      	adds	r3, r7, r1
 8018f7c:	2200      	movs	r2, #0
 8018f7e:	701a      	strb	r2, [r3, #0]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8018f80:	687b      	ldr	r3, [r7, #4]
 8018f82:	685b      	ldr	r3, [r3, #4]
 8018f84:	187a      	adds	r2, r7, r1
 8018f86:	0011      	movs	r1, r2
 8018f88:	0018      	movs	r0, r3
 8018f8a:	f7fe ffc1 	bl	8017f10 <VerifyRfFreq>
 8018f8e:	0003      	movs	r3, r0
 8018f90:	001a      	movs	r2, r3
 8018f92:	2301      	movs	r3, #1
 8018f94:	4053      	eors	r3, r2
 8018f96:	b2db      	uxtb	r3, r3
 8018f98:	2b00      	cmp	r3, #0
 8018f9a:	d005      	beq.n	8018fa8 <RegionEU868DlChannelReq+0x40>
    {
        status &= 0xFE;
 8018f9c:	193b      	adds	r3, r7, r4
 8018f9e:	193a      	adds	r2, r7, r4
 8018fa0:	7812      	ldrb	r2, [r2, #0]
 8018fa2:	2101      	movs	r1, #1
 8018fa4:	438a      	bics	r2, r1
 8018fa6:	701a      	strb	r2, [r3, #0]
    }

    // Verify if an uplink frequency exists
    if( NvmCtx.Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8018fa8:	687b      	ldr	r3, [r7, #4]
 8018faa:	781b      	ldrb	r3, [r3, #0]
 8018fac:	0019      	movs	r1, r3
 8018fae:	4a14      	ldr	r2, [pc, #80]	; (8019000 <RegionEU868DlChannelReq+0x98>)
 8018fb0:	000b      	movs	r3, r1
 8018fb2:	005b      	lsls	r3, r3, #1
 8018fb4:	185b      	adds	r3, r3, r1
 8018fb6:	009b      	lsls	r3, r3, #2
 8018fb8:	589b      	ldr	r3, [r3, r2]
 8018fba:	2b00      	cmp	r3, #0
 8018fbc:	d106      	bne.n	8018fcc <RegionEU868DlChannelReq+0x64>
    {
        status &= 0xFD;
 8018fbe:	220f      	movs	r2, #15
 8018fc0:	18bb      	adds	r3, r7, r2
 8018fc2:	18ba      	adds	r2, r7, r2
 8018fc4:	7812      	ldrb	r2, [r2, #0]
 8018fc6:	2102      	movs	r1, #2
 8018fc8:	438a      	bics	r2, r1
 8018fca:	701a      	strb	r2, [r3, #0]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8018fcc:	230f      	movs	r3, #15
 8018fce:	18fb      	adds	r3, r7, r3
 8018fd0:	781b      	ldrb	r3, [r3, #0]
 8018fd2:	2b03      	cmp	r3, #3
 8018fd4:	d10c      	bne.n	8018ff0 <RegionEU868DlChannelReq+0x88>
    {
        NvmCtx.Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8018fd6:	687b      	ldr	r3, [r7, #4]
 8018fd8:	781b      	ldrb	r3, [r3, #0]
 8018fda:	0018      	movs	r0, r3
 8018fdc:	687b      	ldr	r3, [r7, #4]
 8018fde:	685a      	ldr	r2, [r3, #4]
 8018fe0:	4907      	ldr	r1, [pc, #28]	; (8019000 <RegionEU868DlChannelReq+0x98>)
 8018fe2:	0003      	movs	r3, r0
 8018fe4:	005b      	lsls	r3, r3, #1
 8018fe6:	181b      	adds	r3, r3, r0
 8018fe8:	009b      	lsls	r3, r3, #2
 8018fea:	18cb      	adds	r3, r1, r3
 8018fec:	3304      	adds	r3, #4
 8018fee:	601a      	str	r2, [r3, #0]
    }

    return status;
 8018ff0:	230f      	movs	r3, #15
 8018ff2:	18fb      	adds	r3, r7, r3
 8018ff4:	781b      	ldrb	r3, [r3, #0]
}
 8018ff6:	0018      	movs	r0, r3
 8018ff8:	46bd      	mov	sp, r7
 8018ffa:	b005      	add	sp, #20
 8018ffc:	bd90      	pop	{r4, r7, pc}
 8018ffe:	46c0      	nop			; (mov r8, r8)
 8019000:	20000d44 	.word	0x20000d44

08019004 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8019004:	b580      	push	{r7, lr}
 8019006:	b082      	sub	sp, #8
 8019008:	af00      	add	r7, sp, #0
 801900a:	0002      	movs	r2, r0
 801900c:	1dfb      	adds	r3, r7, #7
 801900e:	701a      	strb	r2, [r3, #0]
 8019010:	1dbb      	adds	r3, r7, #6
 8019012:	1c0a      	adds	r2, r1, #0
 8019014:	701a      	strb	r2, [r3, #0]
    return currentDr;
 8019016:	1dfb      	adds	r3, r7, #7
 8019018:	781b      	ldrb	r3, [r3, #0]
 801901a:	b25b      	sxtb	r3, r3
}
 801901c:	0018      	movs	r0, r3
 801901e:	46bd      	mov	sp, r7
 8019020:	b002      	add	sp, #8
 8019022:	bd80      	pop	{r7, pc}

08019024 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8019024:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019026:	b099      	sub	sp, #100	; 0x64
 8019028:	af02      	add	r7, sp, #8
 801902a:	60f8      	str	r0, [r7, #12]
 801902c:	60b9      	str	r1, [r7, #8]
 801902e:	607a      	str	r2, [r7, #4]
 8019030:	603b      	str	r3, [r7, #0]
    uint8_t nbEnabledChannels = 0;
 8019032:	2356      	movs	r3, #86	; 0x56
 8019034:	18fb      	adds	r3, r7, r3
 8019036:	2200      	movs	r2, #0
 8019038:	701a      	strb	r2, [r3, #0]
    uint8_t nbRestrictedChannels = 0;
 801903a:	2355      	movs	r3, #85	; 0x55
 801903c:	18fb      	adds	r3, r7, r3
 801903e:	2200      	movs	r2, #0
 8019040:	701a      	strb	r2, [r3, #0]
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 8019042:	2344      	movs	r3, #68	; 0x44
 8019044:	18fb      	adds	r3, r7, r3
 8019046:	2200      	movs	r2, #0
 8019048:	601a      	str	r2, [r3, #0]
 801904a:	3304      	adds	r3, #4
 801904c:	220c      	movs	r2, #12
 801904e:	2100      	movs	r1, #0
 8019050:	0018      	movs	r0, r3
 8019052:	f004 ff62 	bl	801df1a <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8019056:	2357      	movs	r3, #87	; 0x57
 8019058:	18fb      	adds	r3, r7, r3
 801905a:	220c      	movs	r2, #12
 801905c:	701a      	strb	r2, [r3, #0]

    if( RegionCommonCountChannels( NvmCtx.ChannelsMask, 0, 1 ) == 0 )
 801905e:	4b4a      	ldr	r3, [pc, #296]	; (8019188 <RegionEU868NextChannel+0x164>)
 8019060:	2201      	movs	r2, #1
 8019062:	2100      	movs	r1, #0
 8019064:	0018      	movs	r0, r3
 8019066:	f7fe fa2c 	bl	80174c2 <RegionCommonCountChannels>
 801906a:	1e03      	subs	r3, r0, #0
 801906c:	d10a      	bne.n	8019084 <RegionEU868NextChannel+0x60>
    { // Reactivate default channels
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 801906e:	4a47      	ldr	r2, [pc, #284]	; (801918c <RegionEU868NextChannel+0x168>)
 8019070:	239c      	movs	r3, #156	; 0x9c
 8019072:	005b      	lsls	r3, r3, #1
 8019074:	5ad3      	ldrh	r3, [r2, r3]
 8019076:	2207      	movs	r2, #7
 8019078:	4313      	orrs	r3, r2
 801907a:	b299      	uxth	r1, r3
 801907c:	4a43      	ldr	r2, [pc, #268]	; (801918c <RegionEU868NextChannel+0x168>)
 801907e:	239c      	movs	r3, #156	; 0x9c
 8019080:	005b      	lsls	r3, r3, #1
 8019082:	52d1      	strh	r1, [r2, r3]
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8019084:	68fb      	ldr	r3, [r7, #12]
 8019086:	7a5a      	ldrb	r2, [r3, #9]
 8019088:	2110      	movs	r1, #16
 801908a:	187b      	adds	r3, r7, r1
 801908c:	701a      	strb	r2, [r3, #0]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 801908e:	68fb      	ldr	r3, [r7, #12]
 8019090:	7a1b      	ldrb	r3, [r3, #8]
 8019092:	b25b      	sxtb	r3, r3
 8019094:	b2da      	uxtb	r2, r3
 8019096:	187b      	adds	r3, r7, r1
 8019098:	705a      	strb	r2, [r3, #1]
    countChannelsParams.ChannelsMask = NvmCtx.ChannelsMask;
 801909a:	000d      	movs	r5, r1
 801909c:	197b      	adds	r3, r7, r5
 801909e:	4a3a      	ldr	r2, [pc, #232]	; (8019188 <RegionEU868NextChannel+0x164>)
 80190a0:	605a      	str	r2, [r3, #4]
    countChannelsParams.Channels = NvmCtx.Channels;
 80190a2:	197b      	adds	r3, r7, r5
 80190a4:	4a39      	ldr	r2, [pc, #228]	; (801918c <RegionEU868NextChannel+0x168>)
 80190a6:	609a      	str	r2, [r3, #8]
    countChannelsParams.Bands = NvmCtx.Bands;
 80190a8:	197b      	adds	r3, r7, r5
 80190aa:	4a39      	ldr	r2, [pc, #228]	; (8019190 <RegionEU868NextChannel+0x16c>)
 80190ac:	60da      	str	r2, [r3, #12]
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 80190ae:	197b      	adds	r3, r7, r5
 80190b0:	2210      	movs	r2, #16
 80190b2:	821a      	strh	r2, [r3, #16]
    countChannelsParams.JoinChannels = EU868_JOIN_CHANNELS;
 80190b4:	197b      	adds	r3, r7, r5
 80190b6:	2207      	movs	r2, #7
 80190b8:	825a      	strh	r2, [r3, #18]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 80190ba:	68fb      	ldr	r3, [r7, #12]
 80190bc:	681a      	ldr	r2, [r3, #0]
 80190be:	2424      	movs	r4, #36	; 0x24
 80190c0:	193b      	adds	r3, r7, r4
 80190c2:	601a      	str	r2, [r3, #0]
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 80190c4:	68fb      	ldr	r3, [r7, #12]
 80190c6:	685a      	ldr	r2, [r3, #4]
 80190c8:	193b      	adds	r3, r7, r4
 80190ca:	605a      	str	r2, [r3, #4]
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 80190cc:	68fb      	ldr	r3, [r7, #12]
 80190ce:	7a9a      	ldrb	r2, [r3, #10]
 80190d0:	193b      	adds	r3, r7, r4
 80190d2:	721a      	strb	r2, [r3, #8]
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 80190d4:	193b      	adds	r3, r7, r4
 80190d6:	2206      	movs	r2, #6
 80190d8:	725a      	strb	r2, [r3, #9]

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 80190da:	193b      	adds	r3, r7, r4
 80190dc:	68fa      	ldr	r2, [r7, #12]
 80190de:	330c      	adds	r3, #12
 80190e0:	320c      	adds	r2, #12
 80190e2:	ca03      	ldmia	r2!, {r0, r1}
 80190e4:	c303      	stmia	r3!, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 80190e6:	68fb      	ldr	r3, [r7, #12]
 80190e8:	7d1a      	ldrb	r2, [r3, #20]
 80190ea:	193b      	adds	r3, r7, r4
 80190ec:	751a      	strb	r2, [r3, #20]
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 80190ee:	68fb      	ldr	r3, [r7, #12]
 80190f0:	2208      	movs	r2, #8
 80190f2:	569a      	ldrsb	r2, [r3, r2]
 80190f4:	68fb      	ldr	r3, [r7, #12]
 80190f6:	8adb      	ldrh	r3, [r3, #22]
 80190f8:	0019      	movs	r1, r3
 80190fa:	0010      	movs	r0, r2
 80190fc:	f7fe ff80 	bl	8018000 <GetTimeOnAir>
 8019100:	0002      	movs	r2, r0
 8019102:	0020      	movs	r0, r4
 8019104:	183b      	adds	r3, r7, r0
 8019106:	619a      	str	r2, [r3, #24]

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8019108:	183b      	adds	r3, r7, r0
 801910a:	197a      	adds	r2, r7, r5
 801910c:	61da      	str	r2, [r3, #28]

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 801910e:	2657      	movs	r6, #87	; 0x57
 8019110:	19bc      	adds	r4, r7, r6
 8019112:	2356      	movs	r3, #86	; 0x56
 8019114:	18fd      	adds	r5, r7, r3
 8019116:	2244      	movs	r2, #68	; 0x44
 8019118:	18ba      	adds	r2, r7, r2
 801911a:	6839      	ldr	r1, [r7, #0]
 801911c:	1838      	adds	r0, r7, r0
 801911e:	687b      	ldr	r3, [r7, #4]
 8019120:	9301      	str	r3, [sp, #4]
 8019122:	2355      	movs	r3, #85	; 0x55
 8019124:	18fb      	adds	r3, r7, r3
 8019126:	9300      	str	r3, [sp, #0]
 8019128:	002b      	movs	r3, r5
 801912a:	f7fe fdcf 	bl	8017ccc <RegionCommonIdentifyChannels>
 801912e:	0003      	movs	r3, r0
 8019130:	7023      	strb	r3, [r4, #0]
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8019132:	19bb      	adds	r3, r7, r6
 8019134:	781b      	ldrb	r3, [r3, #0]
 8019136:	2b00      	cmp	r3, #0
 8019138:	d10e      	bne.n	8019158 <RegionEU868NextChannel+0x134>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 801913a:	2356      	movs	r3, #86	; 0x56
 801913c:	18fb      	adds	r3, r7, r3
 801913e:	781b      	ldrb	r3, [r3, #0]
 8019140:	3b01      	subs	r3, #1
 8019142:	0019      	movs	r1, r3
 8019144:	2000      	movs	r0, #0
 8019146:	f000 f9c1 	bl	80194cc <randr>
 801914a:	0002      	movs	r2, r0
 801914c:	2344      	movs	r3, #68	; 0x44
 801914e:	18fb      	adds	r3, r7, r3
 8019150:	5c9a      	ldrb	r2, [r3, r2]
 8019152:	68bb      	ldr	r3, [r7, #8]
 8019154:	701a      	strb	r2, [r3, #0]
 8019156:	e00f      	b.n	8019178 <RegionEU868NextChannel+0x154>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8019158:	2357      	movs	r3, #87	; 0x57
 801915a:	18fb      	adds	r3, r7, r3
 801915c:	781b      	ldrb	r3, [r3, #0]
 801915e:	2b0c      	cmp	r3, #12
 8019160:	d10a      	bne.n	8019178 <RegionEU868NextChannel+0x154>
    {
        // Datarate not supported by any channel, restore defaults
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8019162:	4a0a      	ldr	r2, [pc, #40]	; (801918c <RegionEU868NextChannel+0x168>)
 8019164:	239c      	movs	r3, #156	; 0x9c
 8019166:	005b      	lsls	r3, r3, #1
 8019168:	5ad3      	ldrh	r3, [r2, r3]
 801916a:	2207      	movs	r2, #7
 801916c:	4313      	orrs	r3, r2
 801916e:	b299      	uxth	r1, r3
 8019170:	4a06      	ldr	r2, [pc, #24]	; (801918c <RegionEU868NextChannel+0x168>)
 8019172:	239c      	movs	r3, #156	; 0x9c
 8019174:	005b      	lsls	r3, r3, #1
 8019176:	52d1      	strh	r1, [r2, r3]
    }
    return status;
 8019178:	2357      	movs	r3, #87	; 0x57
 801917a:	18fb      	adds	r3, r7, r3
 801917c:	781b      	ldrb	r3, [r3, #0]
}
 801917e:	0018      	movs	r0, r3
 8019180:	46bd      	mov	sp, r7
 8019182:	b017      	add	sp, #92	; 0x5c
 8019184:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019186:	46c0      	nop			; (mov r8, r8)
 8019188:	20000e7c 	.word	0x20000e7c
 801918c:	20000d44 	.word	0x20000d44
 8019190:	20000e04 	.word	0x20000e04

08019194 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8019194:	b590      	push	{r4, r7, lr}
 8019196:	b085      	sub	sp, #20
 8019198:	af00      	add	r7, sp, #0
 801919a:	6078      	str	r0, [r7, #4]
    uint8_t band = 0;
 801919c:	230c      	movs	r3, #12
 801919e:	18fb      	adds	r3, r7, r3
 80191a0:	2200      	movs	r2, #0
 80191a2:	701a      	strb	r2, [r3, #0]
    bool drInvalid = false;
 80191a4:	230f      	movs	r3, #15
 80191a6:	18fb      	adds	r3, r7, r3
 80191a8:	2200      	movs	r2, #0
 80191aa:	701a      	strb	r2, [r3, #0]
    bool freqInvalid = false;
 80191ac:	230e      	movs	r3, #14
 80191ae:	18fb      	adds	r3, r7, r3
 80191b0:	2200      	movs	r2, #0
 80191b2:	701a      	strb	r2, [r3, #0]
    uint8_t id = channelAdd->ChannelId;
 80191b4:	210d      	movs	r1, #13
 80191b6:	187b      	adds	r3, r7, r1
 80191b8:	687a      	ldr	r2, [r7, #4]
 80191ba:	7912      	ldrb	r2, [r2, #4]
 80191bc:	701a      	strb	r2, [r3, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 80191be:	187b      	adds	r3, r7, r1
 80191c0:	781b      	ldrb	r3, [r3, #0]
 80191c2:	2b02      	cmp	r3, #2
 80191c4:	d801      	bhi.n	80191ca <RegionEU868ChannelAdd+0x36>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80191c6:	2306      	movs	r3, #6
 80191c8:	e0a1      	b.n	801930e <RegionEU868ChannelAdd+0x17a>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 80191ca:	230d      	movs	r3, #13
 80191cc:	18fb      	adds	r3, r7, r3
 80191ce:	781b      	ldrb	r3, [r3, #0]
 80191d0:	2b0f      	cmp	r3, #15
 80191d2:	d901      	bls.n	80191d8 <RegionEU868ChannelAdd+0x44>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80191d4:	2303      	movs	r3, #3
 80191d6:	e09a      	b.n	801930e <RegionEU868ChannelAdd+0x17a>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 80191d8:	687b      	ldr	r3, [r7, #4]
 80191da:	681b      	ldr	r3, [r3, #0]
 80191dc:	7a1b      	ldrb	r3, [r3, #8]
 80191de:	011b      	lsls	r3, r3, #4
 80191e0:	b25b      	sxtb	r3, r3
 80191e2:	111b      	asrs	r3, r3, #4
 80191e4:	b25b      	sxtb	r3, r3
 80191e6:	2207      	movs	r2, #7
 80191e8:	2100      	movs	r1, #0
 80191ea:	0018      	movs	r0, r3
 80191ec:	f7fe f901 	bl	80173f2 <RegionCommonValueInRange>
 80191f0:	1e03      	subs	r3, r0, #0
 80191f2:	d103      	bne.n	80191fc <RegionEU868ChannelAdd+0x68>
    {
        drInvalid = true;
 80191f4:	230f      	movs	r3, #15
 80191f6:	18fb      	adds	r3, r7, r3
 80191f8:	2201      	movs	r2, #1
 80191fa:	701a      	strb	r2, [r3, #0]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 80191fc:	687b      	ldr	r3, [r7, #4]
 80191fe:	681b      	ldr	r3, [r3, #0]
 8019200:	7a1b      	ldrb	r3, [r3, #8]
 8019202:	b25b      	sxtb	r3, r3
 8019204:	111b      	asrs	r3, r3, #4
 8019206:	b25b      	sxtb	r3, r3
 8019208:	2207      	movs	r2, #7
 801920a:	2100      	movs	r1, #0
 801920c:	0018      	movs	r0, r3
 801920e:	f7fe f8f0 	bl	80173f2 <RegionCommonValueInRange>
 8019212:	1e03      	subs	r3, r0, #0
 8019214:	d103      	bne.n	801921e <RegionEU868ChannelAdd+0x8a>
    {
        drInvalid = true;
 8019216:	230f      	movs	r3, #15
 8019218:	18fb      	adds	r3, r7, r3
 801921a:	2201      	movs	r2, #1
 801921c:	701a      	strb	r2, [r3, #0]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 801921e:	687b      	ldr	r3, [r7, #4]
 8019220:	681b      	ldr	r3, [r3, #0]
 8019222:	7a1b      	ldrb	r3, [r3, #8]
 8019224:	011b      	lsls	r3, r3, #4
 8019226:	b25b      	sxtb	r3, r3
 8019228:	111b      	asrs	r3, r3, #4
 801922a:	b25a      	sxtb	r2, r3
 801922c:	687b      	ldr	r3, [r7, #4]
 801922e:	681b      	ldr	r3, [r3, #0]
 8019230:	7a1b      	ldrb	r3, [r3, #8]
 8019232:	b25b      	sxtb	r3, r3
 8019234:	111b      	asrs	r3, r3, #4
 8019236:	b25b      	sxtb	r3, r3
 8019238:	429a      	cmp	r2, r3
 801923a:	dd03      	ble.n	8019244 <RegionEU868ChannelAdd+0xb0>
    {
        drInvalid = true;
 801923c:	230f      	movs	r3, #15
 801923e:	18fb      	adds	r3, r7, r3
 8019240:	2201      	movs	r2, #1
 8019242:	701a      	strb	r2, [r3, #0]
    }

    // Check frequency
    if( freqInvalid == false )
 8019244:	240e      	movs	r4, #14
 8019246:	193b      	adds	r3, r7, r4
 8019248:	781b      	ldrb	r3, [r3, #0]
 801924a:	2201      	movs	r2, #1
 801924c:	4053      	eors	r3, r2
 801924e:	b2db      	uxtb	r3, r3
 8019250:	2b00      	cmp	r3, #0
 8019252:	d012      	beq.n	801927a <RegionEU868ChannelAdd+0xe6>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8019254:	687b      	ldr	r3, [r7, #4]
 8019256:	681b      	ldr	r3, [r3, #0]
 8019258:	681b      	ldr	r3, [r3, #0]
 801925a:	220c      	movs	r2, #12
 801925c:	18ba      	adds	r2, r7, r2
 801925e:	0011      	movs	r1, r2
 8019260:	0018      	movs	r0, r3
 8019262:	f7fe fe55 	bl	8017f10 <VerifyRfFreq>
 8019266:	0003      	movs	r3, r0
 8019268:	001a      	movs	r2, r3
 801926a:	2301      	movs	r3, #1
 801926c:	4053      	eors	r3, r2
 801926e:	b2db      	uxtb	r3, r3
 8019270:	2b00      	cmp	r3, #0
 8019272:	d002      	beq.n	801927a <RegionEU868ChannelAdd+0xe6>
        {
            freqInvalid = true;
 8019274:	193b      	adds	r3, r7, r4
 8019276:	2201      	movs	r2, #1
 8019278:	701a      	strb	r2, [r3, #0]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 801927a:	230f      	movs	r3, #15
 801927c:	18fb      	adds	r3, r7, r3
 801927e:	781b      	ldrb	r3, [r3, #0]
 8019280:	2b00      	cmp	r3, #0
 8019282:	d006      	beq.n	8019292 <RegionEU868ChannelAdd+0xfe>
 8019284:	230e      	movs	r3, #14
 8019286:	18fb      	adds	r3, r7, r3
 8019288:	781b      	ldrb	r3, [r3, #0]
 801928a:	2b00      	cmp	r3, #0
 801928c:	d001      	beq.n	8019292 <RegionEU868ChannelAdd+0xfe>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801928e:	2306      	movs	r3, #6
 8019290:	e03d      	b.n	801930e <RegionEU868ChannelAdd+0x17a>
    }
    if( drInvalid == true )
 8019292:	230f      	movs	r3, #15
 8019294:	18fb      	adds	r3, r7, r3
 8019296:	781b      	ldrb	r3, [r3, #0]
 8019298:	2b00      	cmp	r3, #0
 801929a:	d001      	beq.n	80192a0 <RegionEU868ChannelAdd+0x10c>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 801929c:	2305      	movs	r3, #5
 801929e:	e036      	b.n	801930e <RegionEU868ChannelAdd+0x17a>
    }
    if( freqInvalid == true )
 80192a0:	230e      	movs	r3, #14
 80192a2:	18fb      	adds	r3, r7, r3
 80192a4:	781b      	ldrb	r3, [r3, #0]
 80192a6:	2b00      	cmp	r3, #0
 80192a8:	d001      	beq.n	80192ae <RegionEU868ChannelAdd+0x11a>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 80192aa:	2304      	movs	r3, #4
 80192ac:	e02f      	b.n	801930e <RegionEU868ChannelAdd+0x17a>
    }

    memcpy1( ( uint8_t* ) &(NvmCtx.Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( NvmCtx.Channels[id] ) );
 80192ae:	240d      	movs	r4, #13
 80192b0:	193b      	adds	r3, r7, r4
 80192b2:	781a      	ldrb	r2, [r3, #0]
 80192b4:	0013      	movs	r3, r2
 80192b6:	005b      	lsls	r3, r3, #1
 80192b8:	189b      	adds	r3, r3, r2
 80192ba:	009b      	lsls	r3, r3, #2
 80192bc:	4a16      	ldr	r2, [pc, #88]	; (8019318 <RegionEU868ChannelAdd+0x184>)
 80192be:	1898      	adds	r0, r3, r2
 80192c0:	687b      	ldr	r3, [r7, #4]
 80192c2:	681b      	ldr	r3, [r3, #0]
 80192c4:	220c      	movs	r2, #12
 80192c6:	0019      	movs	r1, r3
 80192c8:	f000 f916 	bl	80194f8 <memcpy1>
    NvmCtx.Channels[id].Band = band;
 80192cc:	193b      	adds	r3, r7, r4
 80192ce:	781a      	ldrb	r2, [r3, #0]
 80192d0:	230c      	movs	r3, #12
 80192d2:	18fb      	adds	r3, r7, r3
 80192d4:	7818      	ldrb	r0, [r3, #0]
 80192d6:	4910      	ldr	r1, [pc, #64]	; (8019318 <RegionEU868ChannelAdd+0x184>)
 80192d8:	0013      	movs	r3, r2
 80192da:	005b      	lsls	r3, r3, #1
 80192dc:	189b      	adds	r3, r3, r2
 80192de:	009b      	lsls	r3, r3, #2
 80192e0:	18cb      	adds	r3, r1, r3
 80192e2:	3309      	adds	r3, #9
 80192e4:	1c02      	adds	r2, r0, #0
 80192e6:	701a      	strb	r2, [r3, #0]
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
 80192e8:	4a0b      	ldr	r2, [pc, #44]	; (8019318 <RegionEU868ChannelAdd+0x184>)
 80192ea:	239c      	movs	r3, #156	; 0x9c
 80192ec:	005b      	lsls	r3, r3, #1
 80192ee:	5ad3      	ldrh	r3, [r2, r3]
 80192f0:	b21a      	sxth	r2, r3
 80192f2:	193b      	adds	r3, r7, r4
 80192f4:	781b      	ldrb	r3, [r3, #0]
 80192f6:	2101      	movs	r1, #1
 80192f8:	4099      	lsls	r1, r3
 80192fa:	000b      	movs	r3, r1
 80192fc:	b21b      	sxth	r3, r3
 80192fe:	4313      	orrs	r3, r2
 8019300:	b21b      	sxth	r3, r3
 8019302:	b299      	uxth	r1, r3
 8019304:	4a04      	ldr	r2, [pc, #16]	; (8019318 <RegionEU868ChannelAdd+0x184>)
 8019306:	239c      	movs	r3, #156	; 0x9c
 8019308:	005b      	lsls	r3, r3, #1
 801930a:	52d1      	strh	r1, [r2, r3]
    return LORAMAC_STATUS_OK;
 801930c:	2300      	movs	r3, #0
}
 801930e:	0018      	movs	r0, r3
 8019310:	46bd      	mov	sp, r7
 8019312:	b005      	add	sp, #20
 8019314:	bd90      	pop	{r4, r7, pc}
 8019316:	46c0      	nop			; (mov r8, r8)
 8019318:	20000d44 	.word	0x20000d44

0801931c <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 801931c:	b590      	push	{r4, r7, lr}
 801931e:	b087      	sub	sp, #28
 8019320:	af00      	add	r7, sp, #0
 8019322:	6078      	str	r0, [r7, #4]
    uint8_t id = channelRemove->ChannelId;
 8019324:	2117      	movs	r1, #23
 8019326:	187b      	adds	r3, r7, r1
 8019328:	687a      	ldr	r2, [r7, #4]
 801932a:	7812      	ldrb	r2, [r2, #0]
 801932c:	701a      	strb	r2, [r3, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 801932e:	187b      	adds	r3, r7, r1
 8019330:	781b      	ldrb	r3, [r3, #0]
 8019332:	2b02      	cmp	r3, #2
 8019334:	d801      	bhi.n	801933a <RegionEU868ChannelsRemove+0x1e>
    {
        return false;
 8019336:	2300      	movs	r3, #0
 8019338:	e015      	b.n	8019366 <RegionEU868ChannelsRemove+0x4a>
    }

    // Remove the channel from the list of channels
    NvmCtx.Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 801933a:	2417      	movs	r4, #23
 801933c:	193b      	adds	r3, r7, r4
 801933e:	781a      	ldrb	r2, [r3, #0]
 8019340:	490b      	ldr	r1, [pc, #44]	; (8019370 <RegionEU868ChannelsRemove+0x54>)
 8019342:	0013      	movs	r3, r2
 8019344:	005b      	lsls	r3, r3, #1
 8019346:	189b      	adds	r3, r3, r2
 8019348:	009b      	lsls	r3, r3, #2
 801934a:	18cb      	adds	r3, r1, r3
 801934c:	220c      	movs	r2, #12
 801934e:	2100      	movs	r1, #0
 8019350:	0018      	movs	r0, r3
 8019352:	f004 fde2 	bl	801df1a <memset>

    return RegionCommonChanDisable( NvmCtx.ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8019356:	193b      	adds	r3, r7, r4
 8019358:	7819      	ldrb	r1, [r3, #0]
 801935a:	4b06      	ldr	r3, [pc, #24]	; (8019374 <RegionEU868ChannelsRemove+0x58>)
 801935c:	2210      	movs	r2, #16
 801935e:	0018      	movs	r0, r3
 8019360:	f7fe f86d 	bl	801743e <RegionCommonChanDisable>
 8019364:	0003      	movs	r3, r0
}
 8019366:	0018      	movs	r0, r3
 8019368:	46bd      	mov	sp, r7
 801936a:	b007      	add	sp, #28
 801936c:	bd90      	pop	{r4, r7, pc}
 801936e:	46c0      	nop			; (mov r8, r8)
 8019370:	20000d44 	.word	0x20000d44
 8019374:	20000e7c 	.word	0x20000e7c

08019378 <RegionEU868SetContinuousWave>:

void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8019378:	b5f0      	push	{r4, r5, r6, r7, lr}
 801937a:	b085      	sub	sp, #20
 801937c:	af00      	add	r7, sp, #0
 801937e:	6078      	str	r0, [r7, #4]
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 8019380:	687b      	ldr	r3, [r7, #4]
 8019382:	2002      	movs	r0, #2
 8019384:	5618      	ldrsb	r0, [r3, r0]
 8019386:	687b      	ldr	r3, [r7, #4]
 8019388:	781b      	ldrb	r3, [r3, #0]
 801938a:	0019      	movs	r1, r3
 801938c:	4a23      	ldr	r2, [pc, #140]	; (801941c <RegionEU868SetContinuousWave+0xa4>)
 801938e:	000b      	movs	r3, r1
 8019390:	005b      	lsls	r3, r3, #1
 8019392:	185b      	adds	r3, r3, r1
 8019394:	009b      	lsls	r3, r3, #2
 8019396:	18d3      	adds	r3, r2, r3
 8019398:	3309      	adds	r3, #9
 801939a:	781b      	ldrb	r3, [r3, #0]
 801939c:	001c      	movs	r4, r3
 801939e:	4a1f      	ldr	r2, [pc, #124]	; (801941c <RegionEU868SetContinuousWave+0xa4>)
 80193a0:	21c2      	movs	r1, #194	; 0xc2
 80193a2:	0023      	movs	r3, r4
 80193a4:	009b      	lsls	r3, r3, #2
 80193a6:	191b      	adds	r3, r3, r4
 80193a8:	009b      	lsls	r3, r3, #2
 80193aa:	18d3      	adds	r3, r2, r3
 80193ac:	185b      	adds	r3, r3, r1
 80193ae:	2100      	movs	r1, #0
 80193b0:	5659      	ldrsb	r1, [r3, r1]
 80193b2:	687b      	ldr	r3, [r7, #4]
 80193b4:	2201      	movs	r2, #1
 80193b6:	569a      	ldrsb	r2, [r3, r2]
 80193b8:	260f      	movs	r6, #15
 80193ba:	19bc      	adds	r4, r7, r6
 80193bc:	4b18      	ldr	r3, [pc, #96]	; (8019420 <RegionEU868SetContinuousWave+0xa8>)
 80193be:	f7fe fd7f 	bl	8017ec0 <LimitTxPower>
 80193c2:	0003      	movs	r3, r0
 80193c4:	7023      	strb	r3, [r4, #0]
    int8_t phyTxPower = 0;
 80193c6:	200e      	movs	r0, #14
 80193c8:	183b      	adds	r3, r7, r0
 80193ca:	2200      	movs	r2, #0
 80193cc:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = NvmCtx.Channels[continuousWave->Channel].Frequency;
 80193ce:	687b      	ldr	r3, [r7, #4]
 80193d0:	781b      	ldrb	r3, [r3, #0]
 80193d2:	0019      	movs	r1, r3
 80193d4:	4a11      	ldr	r2, [pc, #68]	; (801941c <RegionEU868SetContinuousWave+0xa4>)
 80193d6:	000b      	movs	r3, r1
 80193d8:	005b      	lsls	r3, r3, #1
 80193da:	185b      	adds	r3, r3, r1
 80193dc:	009b      	lsls	r3, r3, #2
 80193de:	589b      	ldr	r3, [r3, r2]
 80193e0:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 80193e2:	687b      	ldr	r3, [r7, #4]
 80193e4:	6859      	ldr	r1, [r3, #4]
 80193e6:	687b      	ldr	r3, [r7, #4]
 80193e8:	689a      	ldr	r2, [r3, #8]
 80193ea:	0005      	movs	r5, r0
 80193ec:	183c      	adds	r4, r7, r0
 80193ee:	19bb      	adds	r3, r7, r6
 80193f0:	781b      	ldrb	r3, [r3, #0]
 80193f2:	b25b      	sxtb	r3, r3
 80193f4:	0018      	movs	r0, r3
 80193f6:	f7fe fb41 	bl	8017a7c <RegionCommonComputeTxPower>
 80193fa:	0003      	movs	r3, r0
 80193fc:	7023      	strb	r3, [r4, #0]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 80193fe:	4b09      	ldr	r3, [pc, #36]	; (8019424 <RegionEU868SetContinuousWave+0xac>)
 8019400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019402:	687a      	ldr	r2, [r7, #4]
 8019404:	8994      	ldrh	r4, [r2, #12]
 8019406:	197a      	adds	r2, r7, r5
 8019408:	2100      	movs	r1, #0
 801940a:	5651      	ldrsb	r1, [r2, r1]
 801940c:	68b8      	ldr	r0, [r7, #8]
 801940e:	0022      	movs	r2, r4
 8019410:	4798      	blx	r3
}
 8019412:	46c0      	nop			; (mov r8, r8)
 8019414:	46bd      	mov	sp, r7
 8019416:	b005      	add	sp, #20
 8019418:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801941a:	46c0      	nop			; (mov r8, r8)
 801941c:	20000d44 	.word	0x20000d44
 8019420:	20000e7c 	.word	0x20000e7c
 8019424:	0801fd54 	.word	0x0801fd54

08019428 <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8019428:	b590      	push	{r4, r7, lr}
 801942a:	b085      	sub	sp, #20
 801942c:	af00      	add	r7, sp, #0
 801942e:	0004      	movs	r4, r0
 8019430:	0008      	movs	r0, r1
 8019432:	0011      	movs	r1, r2
 8019434:	1dfb      	adds	r3, r7, #7
 8019436:	1c22      	adds	r2, r4, #0
 8019438:	701a      	strb	r2, [r3, #0]
 801943a:	1dbb      	adds	r3, r7, #6
 801943c:	1c02      	adds	r2, r0, #0
 801943e:	701a      	strb	r2, [r3, #0]
 8019440:	1d7b      	adds	r3, r7, #5
 8019442:	1c0a      	adds	r2, r1, #0
 8019444:	701a      	strb	r2, [r3, #0]
    int8_t datarate = dr - drOffset;
 8019446:	1dbb      	adds	r3, r7, #6
 8019448:	781a      	ldrb	r2, [r3, #0]
 801944a:	1d7b      	adds	r3, r7, #5
 801944c:	781b      	ldrb	r3, [r3, #0]
 801944e:	1ad3      	subs	r3, r2, r3
 8019450:	b2da      	uxtb	r2, r3
 8019452:	210f      	movs	r1, #15
 8019454:	187b      	adds	r3, r7, r1
 8019456:	701a      	strb	r2, [r3, #0]

    if( datarate < 0 )
 8019458:	000a      	movs	r2, r1
 801945a:	18bb      	adds	r3, r7, r2
 801945c:	781b      	ldrb	r3, [r3, #0]
 801945e:	2b7f      	cmp	r3, #127	; 0x7f
 8019460:	d902      	bls.n	8019468 <RegionEU868ApplyDrOffset+0x40>
    {
        datarate = DR_0;
 8019462:	18bb      	adds	r3, r7, r2
 8019464:	2200      	movs	r2, #0
 8019466:	701a      	strb	r2, [r3, #0]
    }
    return datarate;
 8019468:	230f      	movs	r3, #15
 801946a:	18fb      	adds	r3, r7, r3
 801946c:	781b      	ldrb	r3, [r3, #0]
}
 801946e:	0018      	movs	r0, r3
 8019470:	46bd      	mov	sp, r7
 8019472:	b005      	add	sp, #20
 8019474:	bd90      	pop	{r4, r7, pc}
	...

08019478 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8019478:	b580      	push	{r7, lr}
 801947a:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 801947c:	4b08      	ldr	r3, [pc, #32]	; (80194a0 <rand1+0x28>)
 801947e:	681b      	ldr	r3, [r3, #0]
 8019480:	4a08      	ldr	r2, [pc, #32]	; (80194a4 <rand1+0x2c>)
 8019482:	4353      	muls	r3, r2
 8019484:	4a08      	ldr	r2, [pc, #32]	; (80194a8 <rand1+0x30>)
 8019486:	189a      	adds	r2, r3, r2
 8019488:	4b05      	ldr	r3, [pc, #20]	; (80194a0 <rand1+0x28>)
 801948a:	601a      	str	r2, [r3, #0]
 801948c:	4b04      	ldr	r3, [pc, #16]	; (80194a0 <rand1+0x28>)
 801948e:	681b      	ldr	r3, [r3, #0]
 8019490:	4906      	ldr	r1, [pc, #24]	; (80194ac <rand1+0x34>)
 8019492:	0018      	movs	r0, r3
 8019494:	f7e6 fec6 	bl	8000224 <__aeabi_uidivmod>
 8019498:	000b      	movs	r3, r1
}
 801949a:	0018      	movs	r0, r3
 801949c:	46bd      	mov	sp, r7
 801949e:	bd80      	pop	{r7, pc}
 80194a0:	200001ac 	.word	0x200001ac
 80194a4:	41c64e6d 	.word	0x41c64e6d
 80194a8:	00003039 	.word	0x00003039
 80194ac:	7fffffff 	.word	0x7fffffff

080194b0 <srand1>:

void srand1( uint32_t seed )
{
 80194b0:	b580      	push	{r7, lr}
 80194b2:	b082      	sub	sp, #8
 80194b4:	af00      	add	r7, sp, #0
 80194b6:	6078      	str	r0, [r7, #4]
    next = seed;
 80194b8:	4b03      	ldr	r3, [pc, #12]	; (80194c8 <srand1+0x18>)
 80194ba:	687a      	ldr	r2, [r7, #4]
 80194bc:	601a      	str	r2, [r3, #0]
}
 80194be:	46c0      	nop			; (mov r8, r8)
 80194c0:	46bd      	mov	sp, r7
 80194c2:	b002      	add	sp, #8
 80194c4:	bd80      	pop	{r7, pc}
 80194c6:	46c0      	nop			; (mov r8, r8)
 80194c8:	200001ac 	.word	0x200001ac

080194cc <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 80194cc:	b580      	push	{r7, lr}
 80194ce:	b082      	sub	sp, #8
 80194d0:	af00      	add	r7, sp, #0
 80194d2:	6078      	str	r0, [r7, #4]
 80194d4:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 80194d6:	f7ff ffcf 	bl	8019478 <rand1>
 80194da:	683a      	ldr	r2, [r7, #0]
 80194dc:	687b      	ldr	r3, [r7, #4]
 80194de:	1ad3      	subs	r3, r2, r3
 80194e0:	3301      	adds	r3, #1
 80194e2:	0019      	movs	r1, r3
 80194e4:	f7e6 ff88 	bl	80003f8 <__aeabi_idivmod>
 80194e8:	000b      	movs	r3, r1
 80194ea:	001a      	movs	r2, r3
 80194ec:	687b      	ldr	r3, [r7, #4]
 80194ee:	18d3      	adds	r3, r2, r3
}
 80194f0:	0018      	movs	r0, r3
 80194f2:	46bd      	mov	sp, r7
 80194f4:	b002      	add	sp, #8
 80194f6:	bd80      	pop	{r7, pc}

080194f8 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 80194f8:	b580      	push	{r7, lr}
 80194fa:	b084      	sub	sp, #16
 80194fc:	af00      	add	r7, sp, #0
 80194fe:	60f8      	str	r0, [r7, #12]
 8019500:	60b9      	str	r1, [r7, #8]
 8019502:	1dbb      	adds	r3, r7, #6
 8019504:	801a      	strh	r2, [r3, #0]
    while( size-- )
 8019506:	e007      	b.n	8019518 <memcpy1+0x20>
    {
        *dst++ = *src++;
 8019508:	68ba      	ldr	r2, [r7, #8]
 801950a:	1c53      	adds	r3, r2, #1
 801950c:	60bb      	str	r3, [r7, #8]
 801950e:	68fb      	ldr	r3, [r7, #12]
 8019510:	1c59      	adds	r1, r3, #1
 8019512:	60f9      	str	r1, [r7, #12]
 8019514:	7812      	ldrb	r2, [r2, #0]
 8019516:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8019518:	1dbb      	adds	r3, r7, #6
 801951a:	881b      	ldrh	r3, [r3, #0]
 801951c:	1dba      	adds	r2, r7, #6
 801951e:	1e59      	subs	r1, r3, #1
 8019520:	8011      	strh	r1, [r2, #0]
 8019522:	2b00      	cmp	r3, #0
 8019524:	d1f0      	bne.n	8019508 <memcpy1+0x10>
    }
}
 8019526:	46c0      	nop			; (mov r8, r8)
 8019528:	46c0      	nop			; (mov r8, r8)
 801952a:	46bd      	mov	sp, r7
 801952c:	b004      	add	sp, #16
 801952e:	bd80      	pop	{r7, pc}

08019530 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8019530:	b580      	push	{r7, lr}
 8019532:	b084      	sub	sp, #16
 8019534:	af00      	add	r7, sp, #0
 8019536:	60f8      	str	r0, [r7, #12]
 8019538:	60b9      	str	r1, [r7, #8]
 801953a:	1dbb      	adds	r3, r7, #6
 801953c:	801a      	strh	r2, [r3, #0]
    dst = dst + ( size - 1 );
 801953e:	1dbb      	adds	r3, r7, #6
 8019540:	881b      	ldrh	r3, [r3, #0]
 8019542:	3b01      	subs	r3, #1
 8019544:	68fa      	ldr	r2, [r7, #12]
 8019546:	18d3      	adds	r3, r2, r3
 8019548:	60fb      	str	r3, [r7, #12]
    while( size-- )
 801954a:	e007      	b.n	801955c <memcpyr+0x2c>
    {
        *dst-- = *src++;
 801954c:	68ba      	ldr	r2, [r7, #8]
 801954e:	1c53      	adds	r3, r2, #1
 8019550:	60bb      	str	r3, [r7, #8]
 8019552:	68fb      	ldr	r3, [r7, #12]
 8019554:	1e59      	subs	r1, r3, #1
 8019556:	60f9      	str	r1, [r7, #12]
 8019558:	7812      	ldrb	r2, [r2, #0]
 801955a:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801955c:	1dbb      	adds	r3, r7, #6
 801955e:	881b      	ldrh	r3, [r3, #0]
 8019560:	1dba      	adds	r2, r7, #6
 8019562:	1e59      	subs	r1, r3, #1
 8019564:	8011      	strh	r1, [r2, #0]
 8019566:	2b00      	cmp	r3, #0
 8019568:	d1f0      	bne.n	801954c <memcpyr+0x1c>
    }
}
 801956a:	46c0      	nop			; (mov r8, r8)
 801956c:	46c0      	nop			; (mov r8, r8)
 801956e:	46bd      	mov	sp, r7
 8019570:	b004      	add	sp, #16
 8019572:	bd80      	pop	{r7, pc}

08019574 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8019574:	b580      	push	{r7, lr}
 8019576:	b082      	sub	sp, #8
 8019578:	af00      	add	r7, sp, #0
 801957a:	6078      	str	r0, [r7, #4]
 801957c:	0008      	movs	r0, r1
 801957e:	0011      	movs	r1, r2
 8019580:	1cfb      	adds	r3, r7, #3
 8019582:	1c02      	adds	r2, r0, #0
 8019584:	701a      	strb	r2, [r3, #0]
 8019586:	003b      	movs	r3, r7
 8019588:	1c0a      	adds	r2, r1, #0
 801958a:	801a      	strh	r2, [r3, #0]
    while( size-- )
 801958c:	e005      	b.n	801959a <memset1+0x26>
    {
        *dst++ = value;
 801958e:	687b      	ldr	r3, [r7, #4]
 8019590:	1c5a      	adds	r2, r3, #1
 8019592:	607a      	str	r2, [r7, #4]
 8019594:	1cfa      	adds	r2, r7, #3
 8019596:	7812      	ldrb	r2, [r2, #0]
 8019598:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801959a:	003b      	movs	r3, r7
 801959c:	881b      	ldrh	r3, [r3, #0]
 801959e:	003a      	movs	r2, r7
 80195a0:	1e59      	subs	r1, r3, #1
 80195a2:	8011      	strh	r1, [r2, #0]
 80195a4:	2b00      	cmp	r3, #0
 80195a6:	d1f2      	bne.n	801958e <memset1+0x1a>
    }
}
 80195a8:	46c0      	nop			; (mov r8, r8)
 80195aa:	46c0      	nop			; (mov r8, r8)
 80195ac:	46bd      	mov	sp, r7
 80195ae:	b002      	add	sp, #8
 80195b0:	bd80      	pop	{r7, pc}
	...

080195b4 <SX1276Init>:
/*
 * Radio driver functions implementation
 */

uint32_t SX1276Init( RadioEvents_t *events )
{
 80195b4:	b590      	push	{r4, r7, lr}
 80195b6:	b087      	sub	sp, #28
 80195b8:	af02      	add	r7, sp, #8
 80195ba:	6078      	str	r0, [r7, #4]
    uint8_t i;

    RadioEvents = events;
 80195bc:	4b34      	ldr	r3, [pc, #208]	; (8019690 <SX1276Init+0xdc>)
 80195be:	687a      	ldr	r2, [r7, #4]
 80195c0:	601a      	str	r2, [r3, #0]

    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 80195c2:	4b34      	ldr	r3, [pc, #208]	; (8019694 <SX1276Init+0xe0>)
 80195c4:	2201      	movs	r2, #1
 80195c6:	4251      	negs	r1, r2
 80195c8:	4833      	ldr	r0, [pc, #204]	; (8019698 <SX1276Init+0xe4>)
 80195ca:	2200      	movs	r2, #0
 80195cc:	9200      	str	r2, [sp, #0]
 80195ce:	2200      	movs	r2, #0
 80195d0:	f003 fa9a 	bl	801cb08 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 80195d4:	4b2f      	ldr	r3, [pc, #188]	; (8019694 <SX1276Init+0xe0>)
 80195d6:	2201      	movs	r2, #1
 80195d8:	4251      	negs	r1, r2
 80195da:	4830      	ldr	r0, [pc, #192]	; (801969c <SX1276Init+0xe8>)
 80195dc:	2200      	movs	r2, #0
 80195de:	9200      	str	r2, [sp, #0]
 80195e0:	2200      	movs	r2, #0
 80195e2:	f003 fa91 	bl	801cb08 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 80195e6:	4b2b      	ldr	r3, [pc, #172]	; (8019694 <SX1276Init+0xe0>)
 80195e8:	2201      	movs	r2, #1
 80195ea:	4251      	negs	r1, r2
 80195ec:	482c      	ldr	r0, [pc, #176]	; (80196a0 <SX1276Init+0xec>)
 80195ee:	2200      	movs	r2, #0
 80195f0:	9200      	str	r2, [sp, #0]
 80195f2:	2200      	movs	r2, #0
 80195f4:	f003 fa88 	bl	801cb08 <UTIL_TIMER_Create>

    Sx_Board_SetXO( SET );
 80195f8:	2001      	movs	r0, #1
 80195fa:	f7ec faa7 	bl	8005b4c <CMWX1ZZABZ0XX_RADIO_SetXO>

    SX1276Reset( );
 80195fe:	f001 fbf1 	bl	801ade4 <SX1276Reset>

    RxChainCalibration( );
 8019602:	f000 f937 	bl	8019874 <RxChainCalibration>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 8019606:	2000      	movs	r0, #0
 8019608:	f001 fbf3 	bl	801adf2 <SX1276SetOpMode>

    Sx_Board_IoIrqInit( DioIrq );
 801960c:	4b25      	ldr	r3, [pc, #148]	; (80196a4 <SX1276Init+0xf0>)
 801960e:	0018      	movs	r0, r3
 8019610:	f7ec fbfc 	bl	8005e0c <CMWX1ZZABZ0XX_RADIO_IoIrqInit>

    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8019614:	230f      	movs	r3, #15
 8019616:	18fb      	adds	r3, r7, r3
 8019618:	2200      	movs	r2, #0
 801961a:	701a      	strb	r2, [r3, #0]
 801961c:	e025      	b.n	801966a <SX1276Init+0xb6>
    {
        SX1276SetModem( RadioRegsInit[i].Modem );
 801961e:	240f      	movs	r4, #15
 8019620:	193b      	adds	r3, r7, r4
 8019622:	781a      	ldrb	r2, [r3, #0]
 8019624:	4920      	ldr	r1, [pc, #128]	; (80196a8 <SX1276Init+0xf4>)
 8019626:	0013      	movs	r3, r2
 8019628:	005b      	lsls	r3, r3, #1
 801962a:	189b      	adds	r3, r3, r2
 801962c:	5c5b      	ldrb	r3, [r3, r1]
 801962e:	0018      	movs	r0, r3
 8019630:	f001 fc4c 	bl	801aecc <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8019634:	193b      	adds	r3, r7, r4
 8019636:	781a      	ldrb	r2, [r3, #0]
 8019638:	491b      	ldr	r1, [pc, #108]	; (80196a8 <SX1276Init+0xf4>)
 801963a:	0013      	movs	r3, r2
 801963c:	005b      	lsls	r3, r3, #1
 801963e:	189b      	adds	r3, r3, r2
 8019640:	18cb      	adds	r3, r1, r3
 8019642:	3301      	adds	r3, #1
 8019644:	781b      	ldrb	r3, [r3, #0]
 8019646:	0018      	movs	r0, r3
 8019648:	193b      	adds	r3, r7, r4
 801964a:	781a      	ldrb	r2, [r3, #0]
 801964c:	4916      	ldr	r1, [pc, #88]	; (80196a8 <SX1276Init+0xf4>)
 801964e:	0013      	movs	r3, r2
 8019650:	005b      	lsls	r3, r3, #1
 8019652:	189b      	adds	r3, r3, r2
 8019654:	18cb      	adds	r3, r1, r3
 8019656:	3302      	adds	r3, #2
 8019658:	781b      	ldrb	r3, [r3, #0]
 801965a:	0019      	movs	r1, r3
 801965c:	f001 fc90 	bl	801af80 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8019660:	193b      	adds	r3, r7, r4
 8019662:	781a      	ldrb	r2, [r3, #0]
 8019664:	193b      	adds	r3, r7, r4
 8019666:	3201      	adds	r2, #1
 8019668:	701a      	strb	r2, [r3, #0]
 801966a:	230f      	movs	r3, #15
 801966c:	18fb      	adds	r3, r7, r3
 801966e:	781b      	ldrb	r3, [r3, #0]
 8019670:	2b0f      	cmp	r3, #15
 8019672:	d9d4      	bls.n	801961e <SX1276Init+0x6a>
    }

    SX1276SetModem( MODEM_FSK );
 8019674:	2000      	movs	r0, #0
 8019676:	f001 fc29 	bl	801aecc <SX1276SetModem>

    SX1276.Settings.State = RF_IDLE;
 801967a:	4b0c      	ldr	r3, [pc, #48]	; (80196ac <SX1276Init+0xf8>)
 801967c:	2200      	movs	r2, #0
 801967e:	711a      	strb	r2, [r3, #4]

    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
 8019680:	f7ec fa5e 	bl	8005b40 <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>
 8019684:	0003      	movs	r3, r0
 8019686:	3302      	adds	r3, #2
}
 8019688:	0018      	movs	r0, r3
 801968a:	46bd      	mov	sp, r7
 801968c:	b005      	add	sp, #20
 801968e:	bd90      	pop	{r4, r7, pc}
 8019690:	20000e80 	.word	0x20000e80
 8019694:	0801b3f9 	.word	0x0801b3f9
 8019698:	20001744 	.word	0x20001744
 801969c:	200017dc 	.word	0x200017dc
 80196a0:	2000175c 	.word	0x2000175c
 80196a4:	200001b0 	.word	0x200001b0
 80196a8:	0801fdc0 	.word	0x0801fdc0
 80196ac:	20001774 	.word	0x20001774

080196b0 <SX1276GetStatus>:

RadioState_t SX1276GetStatus( void )
{
 80196b0:	b580      	push	{r7, lr}
 80196b2:	af00      	add	r7, sp, #0
    return SX1276.Settings.State;
 80196b4:	4b02      	ldr	r3, [pc, #8]	; (80196c0 <SX1276GetStatus+0x10>)
 80196b6:	791b      	ldrb	r3, [r3, #4]
}
 80196b8:	0018      	movs	r0, r3
 80196ba:	46bd      	mov	sp, r7
 80196bc:	bd80      	pop	{r7, pc}
 80196be:	46c0      	nop			; (mov r8, r8)
 80196c0:	20001774 	.word	0x20001774

080196c4 <SX1276SetChannel>:

void SX1276SetChannel( uint32_t freq )
{
 80196c4:	b590      	push	{r4, r7, lr}
 80196c6:	b087      	sub	sp, #28
 80196c8:	af00      	add	r7, sp, #0
 80196ca:	6078      	str	r0, [r7, #4]
    uint32_t channel;

    SX1276.Settings.Channel = freq;
 80196cc:	4b1d      	ldr	r3, [pc, #116]	; (8019744 <SX1276SetChannel+0x80>)
 80196ce:	687a      	ldr	r2, [r7, #4]
 80196d0:	609a      	str	r2, [r3, #8]

    SX_FREQ_TO_CHANNEL( channel, freq );
 80196d2:	687b      	ldr	r3, [r7, #4]
 80196d4:	491c      	ldr	r1, [pc, #112]	; (8019748 <SX1276SetChannel+0x84>)
 80196d6:	0018      	movs	r0, r3
 80196d8:	f7e6 fd1e 	bl	8000118 <__udivsi3>
 80196dc:	0003      	movs	r3, r0
 80196de:	617b      	str	r3, [r7, #20]
 80196e0:	6979      	ldr	r1, [r7, #20]
 80196e2:	000b      	movs	r3, r1
 80196e4:	015b      	lsls	r3, r3, #5
 80196e6:	1a5b      	subs	r3, r3, r1
 80196e8:	019a      	lsls	r2, r3, #6
 80196ea:	1ad2      	subs	r2, r2, r3
 80196ec:	00d2      	lsls	r2, r2, #3
 80196ee:	1853      	adds	r3, r2, r1
 80196f0:	687a      	ldr	r2, [r7, #4]
 80196f2:	1ad3      	subs	r3, r2, r3
 80196f4:	613b      	str	r3, [r7, #16]
 80196f6:	697b      	ldr	r3, [r7, #20]
 80196f8:	021c      	lsls	r4, r3, #8
 80196fa:	693b      	ldr	r3, [r7, #16]
 80196fc:	021b      	lsls	r3, r3, #8
 80196fe:	4a13      	ldr	r2, [pc, #76]	; (801974c <SX1276SetChannel+0x88>)
 8019700:	4694      	mov	ip, r2
 8019702:	4463      	add	r3, ip
 8019704:	4910      	ldr	r1, [pc, #64]	; (8019748 <SX1276SetChannel+0x84>)
 8019706:	0018      	movs	r0, r3
 8019708:	f7e6 fd06 	bl	8000118 <__udivsi3>
 801970c:	0003      	movs	r3, r0
 801970e:	18e3      	adds	r3, r4, r3
 8019710:	60fb      	str	r3, [r7, #12]

    SX1276Write( REG_FRFMSB, ( uint8_t )( ( channel >> 16 ) & 0xFF ) );
 8019712:	68fb      	ldr	r3, [r7, #12]
 8019714:	0c1b      	lsrs	r3, r3, #16
 8019716:	b2db      	uxtb	r3, r3
 8019718:	0019      	movs	r1, r3
 801971a:	2006      	movs	r0, #6
 801971c:	f001 fc30 	bl	801af80 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( channel >> 8 ) & 0xFF ) );
 8019720:	68fb      	ldr	r3, [r7, #12]
 8019722:	0a1b      	lsrs	r3, r3, #8
 8019724:	b2db      	uxtb	r3, r3
 8019726:	0019      	movs	r1, r3
 8019728:	2007      	movs	r0, #7
 801972a:	f001 fc29 	bl	801af80 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( channel & 0xFF ) );
 801972e:	68fb      	ldr	r3, [r7, #12]
 8019730:	b2db      	uxtb	r3, r3
 8019732:	0019      	movs	r1, r3
 8019734:	2008      	movs	r0, #8
 8019736:	f001 fc23 	bl	801af80 <SX1276Write>
}
 801973a:	46c0      	nop			; (mov r8, r8)
 801973c:	46bd      	mov	sp, r7
 801973e:	b007      	add	sp, #28
 8019740:	bd90      	pop	{r4, r7, pc}
 8019742:	46c0      	nop			; (mov r8, r8)
 8019744:	20001774 	.word	0x20001774
 8019748:	00003d09 	.word	0x00003d09
 801974c:	00001e84 	.word	0x00001e84

08019750 <SX1276IsChannelFree>:

bool SX1276IsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8019750:	b5b0      	push	{r4, r5, r7, lr}
 8019752:	b086      	sub	sp, #24
 8019754:	af00      	add	r7, sp, #0
 8019756:	60f8      	str	r0, [r7, #12]
 8019758:	60b9      	str	r1, [r7, #8]
 801975a:	603b      	str	r3, [r7, #0]
 801975c:	1dbb      	adds	r3, r7, #6
 801975e:	801a      	strh	r2, [r3, #0]
    bool status = true;
 8019760:	2317      	movs	r3, #23
 8019762:	18fb      	adds	r3, r7, r3
 8019764:	2201      	movs	r2, #1
 8019766:	701a      	strb	r2, [r3, #0]
    int16_t rssi = 0;
 8019768:	2314      	movs	r3, #20
 801976a:	18fb      	adds	r3, r7, r3
 801976c:	2200      	movs	r2, #0
 801976e:	801a      	strh	r2, [r3, #0]
    uint32_t carrierSenseTime = 0;
 8019770:	2300      	movs	r3, #0
 8019772:	613b      	str	r3, [r7, #16]

    SX1276SetSleep( );
 8019774:	f001 f80c 	bl	801a790 <SX1276SetSleep>

    SX1276SetModem( MODEM_FSK );
 8019778:	2000      	movs	r0, #0
 801977a:	f001 fba7 	bl	801aecc <SX1276SetModem>

    SX1276SetChannel( freq );
 801977e:	68fb      	ldr	r3, [r7, #12]
 8019780:	0018      	movs	r0, r3
 8019782:	f7ff ff9f 	bl	80196c4 <SX1276SetChannel>

    SX1276Write( REG_RXBW, GetFskBandwidthRegValue( rxBandwidth ) );
 8019786:	68bb      	ldr	r3, [r7, #8]
 8019788:	0018      	movs	r0, r3
 801978a:	f001 fd07 	bl	801b19c <GetFskBandwidthRegValue>
 801978e:	0003      	movs	r3, r0
 8019790:	0019      	movs	r1, r3
 8019792:	2012      	movs	r0, #18
 8019794:	f001 fbf4 	bl	801af80 <SX1276Write>
    SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( rxBandwidth ) );
 8019798:	68bb      	ldr	r3, [r7, #8]
 801979a:	0018      	movs	r0, r3
 801979c:	f001 fcfe 	bl	801b19c <GetFskBandwidthRegValue>
 80197a0:	0003      	movs	r3, r0
 80197a2:	0019      	movs	r1, r3
 80197a4:	2013      	movs	r0, #19
 80197a6:	f001 fbeb 	bl	801af80 <SX1276Write>

    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 80197aa:	2005      	movs	r0, #5
 80197ac:	f001 fb21 	bl	801adf2 <SX1276SetOpMode>

    RADIO_DELAY_MS( 1 );
 80197b0:	2001      	movs	r0, #1
 80197b2:	f7eb fb0c 	bl	8004dce <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 80197b6:	f003 fb87 	bl	801cec8 <UTIL_TIMER_GetCurrentTime>
 80197ba:	0003      	movs	r3, r0
 80197bc:	613b      	str	r3, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80197be:	e013      	b.n	80197e8 <SX1276IsChannelFree+0x98>
    {
        rssi = SX1276ReadRssi( MODEM_FSK );
 80197c0:	2514      	movs	r5, #20
 80197c2:	197c      	adds	r4, r7, r5
 80197c4:	2000      	movs	r0, #0
 80197c6:	f001 fac1 	bl	801ad4c <SX1276ReadRssi>
 80197ca:	0003      	movs	r3, r0
 80197cc:	8023      	strh	r3, [r4, #0]

        if( rssi > rssiThresh )
 80197ce:	197a      	adds	r2, r7, r5
 80197d0:	1dbb      	adds	r3, r7, #6
 80197d2:	2100      	movs	r1, #0
 80197d4:	5e52      	ldrsh	r2, [r2, r1]
 80197d6:	2100      	movs	r1, #0
 80197d8:	5e5b      	ldrsh	r3, [r3, r1]
 80197da:	429a      	cmp	r2, r3
 80197dc:	dd04      	ble.n	80197e8 <SX1276IsChannelFree+0x98>
        {
            status = false;
 80197de:	2317      	movs	r3, #23
 80197e0:	18fb      	adds	r3, r7, r3
 80197e2:	2200      	movs	r2, #0
 80197e4:	701a      	strb	r2, [r3, #0]
            break;
 80197e6:	e007      	b.n	80197f8 <SX1276IsChannelFree+0xa8>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80197e8:	693b      	ldr	r3, [r7, #16]
 80197ea:	0018      	movs	r0, r3
 80197ec:	f003 fb80 	bl	801cef0 <UTIL_TIMER_GetElapsedTime>
 80197f0:	0002      	movs	r2, r0
 80197f2:	683b      	ldr	r3, [r7, #0]
 80197f4:	4293      	cmp	r3, r2
 80197f6:	d8e3      	bhi.n	80197c0 <SX1276IsChannelFree+0x70>
        }
    }
    SX1276SetSleep( );
 80197f8:	f000 ffca 	bl	801a790 <SX1276SetSleep>
    return status;
 80197fc:	2317      	movs	r3, #23
 80197fe:	18fb      	adds	r3, r7, r3
 8019800:	781b      	ldrb	r3, [r3, #0]
}
 8019802:	0018      	movs	r0, r3
 8019804:	46bd      	mov	sp, r7
 8019806:	b006      	add	sp, #24
 8019808:	bdb0      	pop	{r4, r5, r7, pc}

0801980a <SX1276Random>:

uint32_t SX1276Random( void )
{
 801980a:	b580      	push	{r7, lr}
 801980c:	b082      	sub	sp, #8
 801980e:	af00      	add	r7, sp, #0
    uint8_t i;
    uint32_t rnd = 0;
 8019810:	2300      	movs	r3, #0
 8019812:	603b      	str	r3, [r7, #0]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    SX1276SetModem( MODEM_LORA );
 8019814:	2001      	movs	r0, #1
 8019816:	f001 fb59 	bl	801aecc <SX1276SetModem>

    // Disable LoRa modem interrupts
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 801981a:	21ff      	movs	r1, #255	; 0xff
 801981c:	2011      	movs	r0, #17
 801981e:	f001 fbaf 	bl	801af80 <SX1276Write>
                  RFLR_IRQFLAGS_CADDONE |
                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                  RFLR_IRQFLAGS_CADDETECTED );

    // Set radio in continuous reception
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8019822:	2005      	movs	r0, #5
 8019824:	f001 fae5 	bl	801adf2 <SX1276SetOpMode>

    for( i = 0; i < 32; i++ )
 8019828:	1dfb      	adds	r3, r7, #7
 801982a:	2200      	movs	r2, #0
 801982c:	701a      	strb	r2, [r3, #0]
 801982e:	e015      	b.n	801985c <SX1276Random+0x52>
    {
        RADIO_DELAY_MS( 1 );
 8019830:	2001      	movs	r0, #1
 8019832:	f7eb facc 	bl	8004dce <HAL_Delay>
        // Unfiltered RSSI value reading. Only takes the LSB value
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 8019836:	202c      	movs	r0, #44	; 0x2c
 8019838:	f001 fbb3 	bl	801afa2 <SX1276Read>
 801983c:	0003      	movs	r3, r0
 801983e:	001a      	movs	r2, r3
 8019840:	2301      	movs	r3, #1
 8019842:	401a      	ands	r2, r3
 8019844:	1dfb      	adds	r3, r7, #7
 8019846:	781b      	ldrb	r3, [r3, #0]
 8019848:	409a      	lsls	r2, r3
 801984a:	0013      	movs	r3, r2
 801984c:	683a      	ldr	r2, [r7, #0]
 801984e:	4313      	orrs	r3, r2
 8019850:	603b      	str	r3, [r7, #0]
    for( i = 0; i < 32; i++ )
 8019852:	1dfb      	adds	r3, r7, #7
 8019854:	781a      	ldrb	r2, [r3, #0]
 8019856:	1dfb      	adds	r3, r7, #7
 8019858:	3201      	adds	r2, #1
 801985a:	701a      	strb	r2, [r3, #0]
 801985c:	1dfb      	adds	r3, r7, #7
 801985e:	781b      	ldrb	r3, [r3, #0]
 8019860:	2b1f      	cmp	r3, #31
 8019862:	d9e5      	bls.n	8019830 <SX1276Random+0x26>
    }

    SX1276SetSleep( );
 8019864:	f000 ff94 	bl	801a790 <SX1276SetSleep>

    return rnd;
 8019868:	683b      	ldr	r3, [r7, #0]
}
 801986a:	0018      	movs	r0, r3
 801986c:	46bd      	mov	sp, r7
 801986e:	b002      	add	sp, #8
 8019870:	bd80      	pop	{r7, pc}
	...

08019874 <RxChainCalibration>:
 * Performs the Rx chain calibration for LF and HF bands
 * \remark Must be called just after the reset so all registers are at their
 *         default values
 */
static void RxChainCalibration( void )
{
 8019874:	b590      	push	{r4, r7, lr}
 8019876:	b087      	sub	sp, #28
 8019878:	af00      	add	r7, sp, #0
    uint8_t regPaConfigInitVal;
    uint32_t initialFreq;
    uint32_t channel;

    // Save context
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 801987a:	2317      	movs	r3, #23
 801987c:	18fc      	adds	r4, r7, r3
 801987e:	2009      	movs	r0, #9
 8019880:	f001 fb8f 	bl	801afa2 <SX1276Read>
 8019884:	0003      	movs	r3, r0
 8019886:	7023      	strb	r3, [r4, #0]

    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8019888:	2006      	movs	r0, #6
 801988a:	f001 fb8a 	bl	801afa2 <SX1276Read>
 801988e:	0003      	movs	r3, r0
 8019890:	041c      	lsls	r4, r3, #16
                ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 8019892:	2007      	movs	r0, #7
 8019894:	f001 fb85 	bl	801afa2 <SX1276Read>
 8019898:	0003      	movs	r3, r0
 801989a:	021b      	lsls	r3, r3, #8
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 801989c:	431c      	orrs	r4, r3
                ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) );
 801989e:	2008      	movs	r0, #8
 80198a0:	f001 fb7f 	bl	801afa2 <SX1276Read>
 80198a4:	0003      	movs	r3, r0
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80198a6:	4323      	orrs	r3, r4
 80198a8:	613b      	str	r3, [r7, #16]

    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 80198aa:	693b      	ldr	r3, [r7, #16]
 80198ac:	0a1b      	lsrs	r3, r3, #8
 80198ae:	60fb      	str	r3, [r7, #12]
 80198b0:	68fb      	ldr	r3, [r7, #12]
 80198b2:	021b      	lsls	r3, r3, #8
 80198b4:	693a      	ldr	r2, [r7, #16]
 80198b6:	1ad3      	subs	r3, r2, r3
 80198b8:	60bb      	str	r3, [r7, #8]
 80198ba:	68f9      	ldr	r1, [r7, #12]
 80198bc:	000b      	movs	r3, r1
 80198be:	015b      	lsls	r3, r3, #5
 80198c0:	1a5b      	subs	r3, r3, r1
 80198c2:	019a      	lsls	r2, r3, #6
 80198c4:	1ad2      	subs	r2, r2, r3
 80198c6:	00d2      	lsls	r2, r2, #3
 80198c8:	1850      	adds	r0, r2, r1
 80198ca:	68b9      	ldr	r1, [r7, #8]
 80198cc:	000b      	movs	r3, r1
 80198ce:	015b      	lsls	r3, r3, #5
 80198d0:	1a5b      	subs	r3, r3, r1
 80198d2:	019a      	lsls	r2, r3, #6
 80198d4:	1ad2      	subs	r2, r2, r3
 80198d6:	00d2      	lsls	r2, r2, #3
 80198d8:	1853      	adds	r3, r2, r1
 80198da:	3380      	adds	r3, #128	; 0x80
 80198dc:	0a1b      	lsrs	r3, r3, #8
 80198de:	18c3      	adds	r3, r0, r3
 80198e0:	607b      	str	r3, [r7, #4]

    // Cut the PA just in case, RFO output, power = -1 dBm
    SX1276Write( REG_PACONFIG, 0x00 );
 80198e2:	2100      	movs	r1, #0
 80198e4:	2009      	movs	r0, #9
 80198e6:	f001 fb4b 	bl	801af80 <SX1276Write>

    // Launch Rx chain calibration for LF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 80198ea:	203b      	movs	r0, #59	; 0x3b
 80198ec:	f001 fb59 	bl	801afa2 <SX1276Read>
 80198f0:	0003      	movs	r3, r0
 80198f2:	001a      	movs	r2, r3
 80198f4:	2340      	movs	r3, #64	; 0x40
 80198f6:	4313      	orrs	r3, r2
 80198f8:	b2db      	uxtb	r3, r3
 80198fa:	0019      	movs	r1, r3
 80198fc:	203b      	movs	r0, #59	; 0x3b
 80198fe:	f001 fb3f 	bl	801af80 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8019902:	46c0      	nop			; (mov r8, r8)
 8019904:	203b      	movs	r0, #59	; 0x3b
 8019906:	f001 fb4c 	bl	801afa2 <SX1276Read>
 801990a:	0003      	movs	r3, r0
 801990c:	001a      	movs	r2, r3
 801990e:	2320      	movs	r3, #32
 8019910:	4013      	ands	r3, r2
 8019912:	2b20      	cmp	r3, #32
 8019914:	d0f6      	beq.n	8019904 <RxChainCalibration+0x90>
    {
    }

    // Sets a Frequency in HF band
    SX1276SetChannel( 868000000 );
 8019916:	4b14      	ldr	r3, [pc, #80]	; (8019968 <RxChainCalibration+0xf4>)
 8019918:	0018      	movs	r0, r3
 801991a:	f7ff fed3 	bl	80196c4 <SX1276SetChannel>

    // Launch Rx chain calibration for HF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 801991e:	203b      	movs	r0, #59	; 0x3b
 8019920:	f001 fb3f 	bl	801afa2 <SX1276Read>
 8019924:	0003      	movs	r3, r0
 8019926:	001a      	movs	r2, r3
 8019928:	2340      	movs	r3, #64	; 0x40
 801992a:	4313      	orrs	r3, r2
 801992c:	b2db      	uxtb	r3, r3
 801992e:	0019      	movs	r1, r3
 8019930:	203b      	movs	r0, #59	; 0x3b
 8019932:	f001 fb25 	bl	801af80 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8019936:	46c0      	nop			; (mov r8, r8)
 8019938:	203b      	movs	r0, #59	; 0x3b
 801993a:	f001 fb32 	bl	801afa2 <SX1276Read>
 801993e:	0003      	movs	r3, r0
 8019940:	001a      	movs	r2, r3
 8019942:	2320      	movs	r3, #32
 8019944:	4013      	ands	r3, r2
 8019946:	2b20      	cmp	r3, #32
 8019948:	d0f6      	beq.n	8019938 <RxChainCalibration+0xc4>
    {
    }

    // Restore context
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 801994a:	2317      	movs	r3, #23
 801994c:	18fb      	adds	r3, r7, r3
 801994e:	781b      	ldrb	r3, [r3, #0]
 8019950:	0019      	movs	r1, r3
 8019952:	2009      	movs	r0, #9
 8019954:	f001 fb14 	bl	801af80 <SX1276Write>
    SX1276SetChannel( initialFreq );
 8019958:	687b      	ldr	r3, [r7, #4]
 801995a:	0018      	movs	r0, r3
 801995c:	f7ff feb2 	bl	80196c4 <SX1276SetChannel>
}
 8019960:	46c0      	nop			; (mov r8, r8)
 8019962:	46bd      	mov	sp, r7
 8019964:	b007      	add	sp, #28
 8019966:	bd90      	pop	{r4, r7, pc}
 8019968:	33bca100 	.word	0x33bca100

0801996c <SX1276SetRxConfig>:
                         uint32_t bandwidthAfc, uint16_t preambleLen,
                         uint16_t symbTimeout, bool fixLen,
                         uint8_t payloadLen,
                         bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                         bool iqInverted, bool rxContinuous )
{
 801996c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801996e:	46c6      	mov	lr, r8
 8019970:	b500      	push	{lr}
 8019972:	b084      	sub	sp, #16
 8019974:	af00      	add	r7, sp, #0
 8019976:	60b9      	str	r1, [r7, #8]
 8019978:	607a      	str	r2, [r7, #4]
 801997a:	0019      	movs	r1, r3
 801997c:	240f      	movs	r4, #15
 801997e:	193b      	adds	r3, r7, r4
 8019980:	1c02      	adds	r2, r0, #0
 8019982:	701a      	strb	r2, [r3, #0]
 8019984:	230e      	movs	r3, #14
 8019986:	18fb      	adds	r3, r7, r3
 8019988:	1c0a      	adds	r2, r1, #0
 801998a:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( modem );
 801998c:	193b      	adds	r3, r7, r4
 801998e:	781b      	ldrb	r3, [r3, #0]
 8019990:	0018      	movs	r0, r3
 8019992:	f001 fa9b 	bl	801aecc <SX1276SetModem>

    switch( modem )
 8019996:	193b      	adds	r3, r7, r4
 8019998:	781b      	ldrb	r3, [r3, #0]
 801999a:	2b00      	cmp	r3, #0
 801999c:	d003      	beq.n	80199a6 <SX1276SetRxConfig+0x3a>
 801999e:	2b01      	cmp	r3, #1
 80199a0:	d100      	bne.n	80199a4 <SX1276SetRxConfig+0x38>
 80199a2:	e0fb      	b.n	8019b9c <SX1276SetRxConfig+0x230>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 80199a4:	e26e      	b.n	8019e84 <SX1276SetRxConfig+0x518>
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 80199a6:	4bbd      	ldr	r3, [pc, #756]	; (8019c9c <SX1276SetRxConfig+0x330>)
 80199a8:	68ba      	ldr	r2, [r7, #8]
 80199aa:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 80199ac:	4bbb      	ldr	r3, [pc, #748]	; (8019c9c <SX1276SetRxConfig+0x330>)
 80199ae:	687a      	ldr	r2, [r7, #4]
 80199b0:	61da      	str	r2, [r3, #28]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 80199b2:	4bba      	ldr	r3, [pc, #744]	; (8019c9c <SX1276SetRxConfig+0x330>)
 80199b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80199b6:	619a      	str	r2, [r3, #24]
            SX1276.Settings.Fsk.FixLen = fixLen;
 80199b8:	4bb8      	ldr	r3, [pc, #736]	; (8019c9c <SX1276SetRxConfig+0x330>)
 80199ba:	222c      	movs	r2, #44	; 0x2c
 80199bc:	2108      	movs	r1, #8
 80199be:	468c      	mov	ip, r1
 80199c0:	44bc      	add	ip, r7
 80199c2:	4462      	add	r2, ip
 80199c4:	2122      	movs	r1, #34	; 0x22
 80199c6:	7812      	ldrb	r2, [r2, #0]
 80199c8:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 80199ca:	4bb4      	ldr	r3, [pc, #720]	; (8019c9c <SX1276SetRxConfig+0x330>)
 80199cc:	2130      	movs	r1, #48	; 0x30
 80199ce:	2408      	movs	r4, #8
 80199d0:	193a      	adds	r2, r7, r4
 80199d2:	1852      	adds	r2, r2, r1
 80199d4:	2123      	movs	r1, #35	; 0x23
 80199d6:	7812      	ldrb	r2, [r2, #0]
 80199d8:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 80199da:	4bb0      	ldr	r3, [pc, #704]	; (8019c9c <SX1276SetRxConfig+0x330>)
 80199dc:	2034      	movs	r0, #52	; 0x34
 80199de:	193a      	adds	r2, r7, r4
 80199e0:	1812      	adds	r2, r2, r0
 80199e2:	2124      	movs	r1, #36	; 0x24
 80199e4:	7812      	ldrb	r2, [r2, #0]
 80199e6:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 80199e8:	4bac      	ldr	r3, [pc, #688]	; (8019c9c <SX1276SetRxConfig+0x330>)
 80199ea:	2220      	movs	r2, #32
 80199ec:	2020      	movs	r0, #32
 80199ee:	4684      	mov	ip, r0
 80199f0:	2108      	movs	r1, #8
 80199f2:	4688      	mov	r8, r1
 80199f4:	44b8      	add	r8, r7
 80199f6:	44c4      	add	ip, r8
 80199f8:	4462      	add	r2, ip
 80199fa:	2125      	movs	r1, #37	; 0x25
 80199fc:	7812      	ldrb	r2, [r2, #0]
 80199fe:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 8019a00:	4ba6      	ldr	r3, [pc, #664]	; (8019c9c <SX1276SetRxConfig+0x330>)
 8019a02:	2224      	movs	r2, #36	; 0x24
 8019a04:	2020      	movs	r0, #32
 8019a06:	4684      	mov	ip, r0
 8019a08:	2108      	movs	r1, #8
 8019a0a:	4688      	mov	r8, r1
 8019a0c:	44b8      	add	r8, r7
 8019a0e:	44c4      	add	ip, r8
 8019a10:	4462      	add	r2, ip
 8019a12:	2126      	movs	r1, #38	; 0x26
 8019a14:	7812      	ldrb	r2, [r2, #0]
 8019a16:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8019a18:	4ba0      	ldr	r3, [pc, #640]	; (8019c9c <SX1276SetRxConfig+0x330>)
 8019a1a:	2624      	movs	r6, #36	; 0x24
 8019a1c:	193a      	adds	r2, r7, r4
 8019a1e:	1992      	adds	r2, r2, r6
 8019a20:	8812      	ldrh	r2, [r2, #0]
 8019a22:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 8019a24:	2328      	movs	r3, #40	; 0x28
 8019a26:	2208      	movs	r2, #8
 8019a28:	4694      	mov	ip, r2
 8019a2a:	44bc      	add	ip, r7
 8019a2c:	4463      	add	r3, ip
 8019a2e:	881b      	ldrh	r3, [r3, #0]
 8019a30:	0018      	movs	r0, r3
 8019a32:	f7e8 fe41 	bl	80026b8 <__aeabi_i2d>
 8019a36:	0004      	movs	r4, r0
 8019a38:	000d      	movs	r5, r1
 8019a3a:	6878      	ldr	r0, [r7, #4]
 8019a3c:	f7e8 fe6c 	bl	8002718 <__aeabi_ui2d>
 8019a40:	0002      	movs	r2, r0
 8019a42:	000b      	movs	r3, r1
 8019a44:	2000      	movs	r0, #0
 8019a46:	4996      	ldr	r1, [pc, #600]	; (8019ca0 <SX1276SetRxConfig+0x334>)
 8019a48:	f7e7 fbfc 	bl	8001244 <__aeabi_ddiv>
 8019a4c:	0002      	movs	r2, r0
 8019a4e:	000b      	movs	r3, r1
 8019a50:	0010      	movs	r0, r2
 8019a52:	0019      	movs	r1, r3
 8019a54:	2200      	movs	r2, #0
 8019a56:	4b93      	ldr	r3, [pc, #588]	; (8019ca4 <SX1276SetRxConfig+0x338>)
 8019a58:	f7e7 fffa 	bl	8001a50 <__aeabi_dmul>
 8019a5c:	0002      	movs	r2, r0
 8019a5e:	000b      	movs	r3, r1
 8019a60:	0020      	movs	r0, r4
 8019a62:	0029      	movs	r1, r5
 8019a64:	f7e7 fff4 	bl	8001a50 <__aeabi_dmul>
 8019a68:	0002      	movs	r2, r0
 8019a6a:	000b      	movs	r3, r1
 8019a6c:	0010      	movs	r0, r2
 8019a6e:	0019      	movs	r1, r3
 8019a70:	2200      	movs	r2, #0
 8019a72:	4b8d      	ldr	r3, [pc, #564]	; (8019ca8 <SX1276SetRxConfig+0x33c>)
 8019a74:	f7e7 ffec 	bl	8001a50 <__aeabi_dmul>
 8019a78:	0002      	movs	r2, r0
 8019a7a:	000b      	movs	r3, r1
 8019a7c:	0010      	movs	r0, r2
 8019a7e:	0019      	movs	r1, r3
 8019a80:	f7e6 fd6a 	bl	8000558 <__aeabi_d2uiz>
 8019a84:	0002      	movs	r2, r0
 8019a86:	4b85      	ldr	r3, [pc, #532]	; (8019c9c <SX1276SetRxConfig+0x330>)
 8019a88:	62da      	str	r2, [r3, #44]	; 0x2c
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8019a8a:	6878      	ldr	r0, [r7, #4]
 8019a8c:	f7e8 fe44 	bl	8002718 <__aeabi_ui2d>
 8019a90:	0002      	movs	r2, r0
 8019a92:	000b      	movs	r3, r1
 8019a94:	2000      	movs	r0, #0
 8019a96:	4985      	ldr	r1, [pc, #532]	; (8019cac <SX1276SetRxConfig+0x340>)
 8019a98:	f7e7 fbd4 	bl	8001244 <__aeabi_ddiv>
 8019a9c:	0002      	movs	r2, r0
 8019a9e:	000b      	movs	r3, r1
 8019aa0:	0010      	movs	r0, r2
 8019aa2:	0019      	movs	r1, r3
 8019aa4:	f7e6 fd58 	bl	8000558 <__aeabi_d2uiz>
 8019aa8:	0003      	movs	r3, r0
 8019aaa:	b29b      	uxth	r3, r3
 8019aac:	607b      	str	r3, [r7, #4]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 8019aae:	687b      	ldr	r3, [r7, #4]
 8019ab0:	0a1b      	lsrs	r3, r3, #8
 8019ab2:	b2db      	uxtb	r3, r3
 8019ab4:	0019      	movs	r1, r3
 8019ab6:	2002      	movs	r0, #2
 8019ab8:	f001 fa62 	bl	801af80 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8019abc:	687b      	ldr	r3, [r7, #4]
 8019abe:	b2db      	uxtb	r3, r3
 8019ac0:	0019      	movs	r1, r3
 8019ac2:	2003      	movs	r0, #3
 8019ac4:	f001 fa5c 	bl	801af80 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 8019ac8:	68bb      	ldr	r3, [r7, #8]
 8019aca:	0018      	movs	r0, r3
 8019acc:	f001 fb66 	bl	801b19c <GetFskBandwidthRegValue>
 8019ad0:	0003      	movs	r3, r0
 8019ad2:	0019      	movs	r1, r3
 8019ad4:	2012      	movs	r0, #18
 8019ad6:	f001 fa53 	bl	801af80 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 8019ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019adc:	0018      	movs	r0, r3
 8019ade:	f001 fb5d 	bl	801b19c <GetFskBandwidthRegValue>
 8019ae2:	0003      	movs	r3, r0
 8019ae4:	0019      	movs	r1, r3
 8019ae6:	2013      	movs	r0, #19
 8019ae8:	f001 fa4a 	bl	801af80 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8019aec:	2408      	movs	r4, #8
 8019aee:	193b      	adds	r3, r7, r4
 8019af0:	199b      	adds	r3, r3, r6
 8019af2:	881b      	ldrh	r3, [r3, #0]
 8019af4:	0a1b      	lsrs	r3, r3, #8
 8019af6:	b29b      	uxth	r3, r3
 8019af8:	b2db      	uxtb	r3, r3
 8019afa:	0019      	movs	r1, r3
 8019afc:	2025      	movs	r0, #37	; 0x25
 8019afe:	f001 fa3f 	bl	801af80 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8019b02:	193b      	adds	r3, r7, r4
 8019b04:	199b      	adds	r3, r3, r6
 8019b06:	881b      	ldrh	r3, [r3, #0]
 8019b08:	b2db      	uxtb	r3, r3
 8019b0a:	0019      	movs	r1, r3
 8019b0c:	2026      	movs	r0, #38	; 0x26
 8019b0e:	f001 fa37 	bl	801af80 <SX1276Write>
            if( fixLen == 1 )
 8019b12:	222c      	movs	r2, #44	; 0x2c
 8019b14:	193b      	adds	r3, r7, r4
 8019b16:	189b      	adds	r3, r3, r2
 8019b18:	781b      	ldrb	r3, [r3, #0]
 8019b1a:	2b00      	cmp	r3, #0
 8019b1c:	d008      	beq.n	8019b30 <SX1276SetRxConfig+0x1c4>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 8019b1e:	2130      	movs	r1, #48	; 0x30
 8019b20:	193b      	adds	r3, r7, r4
 8019b22:	185b      	adds	r3, r3, r1
 8019b24:	781b      	ldrb	r3, [r3, #0]
 8019b26:	0019      	movs	r1, r3
 8019b28:	2032      	movs	r0, #50	; 0x32
 8019b2a:	f001 fa29 	bl	801af80 <SX1276Write>
 8019b2e:	e003      	b.n	8019b38 <SX1276SetRxConfig+0x1cc>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8019b30:	21ff      	movs	r1, #255	; 0xff
 8019b32:	2032      	movs	r0, #50	; 0x32
 8019b34:	f001 fa24 	bl	801af80 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8019b38:	2030      	movs	r0, #48	; 0x30
 8019b3a:	f001 fa32 	bl	801afa2 <SX1276Read>
 8019b3e:	0003      	movs	r3, r0
 8019b40:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 8019b42:	226f      	movs	r2, #111	; 0x6f
 8019b44:	4013      	ands	r3, r2
 8019b46:	b25a      	sxtb	r2, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8019b48:	232c      	movs	r3, #44	; 0x2c
 8019b4a:	2108      	movs	r1, #8
 8019b4c:	468c      	mov	ip, r1
 8019b4e:	44bc      	add	ip, r7
 8019b50:	4463      	add	r3, ip
 8019b52:	781b      	ldrb	r3, [r3, #0]
 8019b54:	2b00      	cmp	r3, #0
 8019b56:	d001      	beq.n	8019b5c <SX1276SetRxConfig+0x1f0>
 8019b58:	2300      	movs	r3, #0
 8019b5a:	e001      	b.n	8019b60 <SX1276SetRxConfig+0x1f4>
 8019b5c:	2380      	movs	r3, #128	; 0x80
 8019b5e:	425b      	negs	r3, r3
 8019b60:	4313      	orrs	r3, r2
 8019b62:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 8019b64:	2334      	movs	r3, #52	; 0x34
 8019b66:	2108      	movs	r1, #8
 8019b68:	468c      	mov	ip, r1
 8019b6a:	44bc      	add	ip, r7
 8019b6c:	4463      	add	r3, ip
 8019b6e:	781b      	ldrb	r3, [r3, #0]
 8019b70:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8019b72:	b25b      	sxtb	r3, r3
 8019b74:	4313      	orrs	r3, r2
 8019b76:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 8019b78:	b2db      	uxtb	r3, r3
 8019b7a:	0019      	movs	r1, r3
 8019b7c:	2030      	movs	r0, #48	; 0x30
 8019b7e:	f001 f9ff 	bl	801af80 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8019b82:	2031      	movs	r0, #49	; 0x31
 8019b84:	f001 fa0d 	bl	801afa2 <SX1276Read>
 8019b88:	0003      	movs	r3, r0
 8019b8a:	001a      	movs	r2, r3
 8019b8c:	2340      	movs	r3, #64	; 0x40
 8019b8e:	4313      	orrs	r3, r2
 8019b90:	b2db      	uxtb	r3, r3
 8019b92:	0019      	movs	r1, r3
 8019b94:	2031      	movs	r0, #49	; 0x31
 8019b96:	f001 f9f3 	bl	801af80 <SX1276Write>
        break;
 8019b9a:	e173      	b.n	8019e84 <SX1276SetRxConfig+0x518>
            if( bandwidth > 2 )
 8019b9c:	68bb      	ldr	r3, [r7, #8]
 8019b9e:	2b02      	cmp	r3, #2
 8019ba0:	d900      	bls.n	8019ba4 <SX1276SetRxConfig+0x238>
                while( 1 );
 8019ba2:	e7fe      	b.n	8019ba2 <SX1276SetRxConfig+0x236>
            bandwidth += 7;
 8019ba4:	68bb      	ldr	r3, [r7, #8]
 8019ba6:	3307      	adds	r3, #7
 8019ba8:	60bb      	str	r3, [r7, #8]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8019baa:	4b3c      	ldr	r3, [pc, #240]	; (8019c9c <SX1276SetRxConfig+0x330>)
 8019bac:	68ba      	ldr	r2, [r7, #8]
 8019bae:	645a      	str	r2, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 8019bb0:	4b3a      	ldr	r3, [pc, #232]	; (8019c9c <SX1276SetRxConfig+0x330>)
 8019bb2:	687a      	ldr	r2, [r7, #4]
 8019bb4:	649a      	str	r2, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.Coderate = coderate;
 8019bb6:	4b39      	ldr	r3, [pc, #228]	; (8019c9c <SX1276SetRxConfig+0x330>)
 8019bb8:	220e      	movs	r2, #14
 8019bba:	18ba      	adds	r2, r7, r2
 8019bbc:	214d      	movs	r1, #77	; 0x4d
 8019bbe:	7812      	ldrb	r2, [r2, #0]
 8019bc0:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8019bc2:	4b36      	ldr	r3, [pc, #216]	; (8019c9c <SX1276SetRxConfig+0x330>)
 8019bc4:	2224      	movs	r2, #36	; 0x24
 8019bc6:	2108      	movs	r1, #8
 8019bc8:	468c      	mov	ip, r1
 8019bca:	44bc      	add	ip, r7
 8019bcc:	4462      	add	r2, ip
 8019bce:	214e      	movs	r1, #78	; 0x4e
 8019bd0:	8812      	ldrh	r2, [r2, #0]
 8019bd2:	525a      	strh	r2, [r3, r1]
            SX1276.Settings.LoRa.FixLen = fixLen;
 8019bd4:	4b31      	ldr	r3, [pc, #196]	; (8019c9c <SX1276SetRxConfig+0x330>)
 8019bd6:	222c      	movs	r2, #44	; 0x2c
 8019bd8:	2108      	movs	r1, #8
 8019bda:	468c      	mov	ip, r1
 8019bdc:	44bc      	add	ip, r7
 8019bde:	4462      	add	r2, ip
 8019be0:	2150      	movs	r1, #80	; 0x50
 8019be2:	7812      	ldrb	r2, [r2, #0]
 8019be4:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 8019be6:	4b2d      	ldr	r3, [pc, #180]	; (8019c9c <SX1276SetRxConfig+0x330>)
 8019be8:	2230      	movs	r2, #48	; 0x30
 8019bea:	2108      	movs	r1, #8
 8019bec:	468c      	mov	ip, r1
 8019bee:	44bc      	add	ip, r7
 8019bf0:	4462      	add	r2, ip
 8019bf2:	2151      	movs	r1, #81	; 0x51
 8019bf4:	7812      	ldrb	r2, [r2, #0]
 8019bf6:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8019bf8:	4b28      	ldr	r3, [pc, #160]	; (8019c9c <SX1276SetRxConfig+0x330>)
 8019bfa:	2234      	movs	r2, #52	; 0x34
 8019bfc:	2108      	movs	r1, #8
 8019bfe:	468c      	mov	ip, r1
 8019c00:	44bc      	add	ip, r7
 8019c02:	4462      	add	r2, ip
 8019c04:	2152      	movs	r1, #82	; 0x52
 8019c06:	7812      	ldrb	r2, [r2, #0]
 8019c08:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8019c0a:	4b24      	ldr	r3, [pc, #144]	; (8019c9c <SX1276SetRxConfig+0x330>)
 8019c0c:	2238      	movs	r2, #56	; 0x38
 8019c0e:	2108      	movs	r1, #8
 8019c10:	468c      	mov	ip, r1
 8019c12:	44bc      	add	ip, r7
 8019c14:	4462      	add	r2, ip
 8019c16:	2153      	movs	r1, #83	; 0x53
 8019c18:	7812      	ldrb	r2, [r2, #0]
 8019c1a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8019c1c:	4b1f      	ldr	r3, [pc, #124]	; (8019c9c <SX1276SetRxConfig+0x330>)
 8019c1e:	223c      	movs	r2, #60	; 0x3c
 8019c20:	2108      	movs	r1, #8
 8019c22:	468c      	mov	ip, r1
 8019c24:	44bc      	add	ip, r7
 8019c26:	4462      	add	r2, ip
 8019c28:	2154      	movs	r1, #84	; 0x54
 8019c2a:	7812      	ldrb	r2, [r2, #0]
 8019c2c:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8019c2e:	4b1b      	ldr	r3, [pc, #108]	; (8019c9c <SX1276SetRxConfig+0x330>)
 8019c30:	2220      	movs	r2, #32
 8019c32:	2120      	movs	r1, #32
 8019c34:	468c      	mov	ip, r1
 8019c36:	2108      	movs	r1, #8
 8019c38:	4688      	mov	r8, r1
 8019c3a:	44b8      	add	r8, r7
 8019c3c:	44c4      	add	ip, r8
 8019c3e:	4462      	add	r2, ip
 8019c40:	2155      	movs	r1, #85	; 0x55
 8019c42:	7812      	ldrb	r2, [r2, #0]
 8019c44:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8019c46:	4b15      	ldr	r3, [pc, #84]	; (8019c9c <SX1276SetRxConfig+0x330>)
 8019c48:	2224      	movs	r2, #36	; 0x24
 8019c4a:	2120      	movs	r1, #32
 8019c4c:	468c      	mov	ip, r1
 8019c4e:	2108      	movs	r1, #8
 8019c50:	4688      	mov	r8, r1
 8019c52:	44b8      	add	r8, r7
 8019c54:	44c4      	add	ip, r8
 8019c56:	4462      	add	r2, ip
 8019c58:	2156      	movs	r1, #86	; 0x56
 8019c5a:	7812      	ldrb	r2, [r2, #0]
 8019c5c:	545a      	strb	r2, [r3, r1]
            if( datarate > 12 )
 8019c5e:	687b      	ldr	r3, [r7, #4]
 8019c60:	2b0c      	cmp	r3, #12
 8019c62:	d902      	bls.n	8019c6a <SX1276SetRxConfig+0x2fe>
                datarate = 12;
 8019c64:	230c      	movs	r3, #12
 8019c66:	607b      	str	r3, [r7, #4]
 8019c68:	e004      	b.n	8019c74 <SX1276SetRxConfig+0x308>
            else if( datarate < 6 )
 8019c6a:	687b      	ldr	r3, [r7, #4]
 8019c6c:	2b05      	cmp	r3, #5
 8019c6e:	d801      	bhi.n	8019c74 <SX1276SetRxConfig+0x308>
                datarate = 6;
 8019c70:	2306      	movs	r3, #6
 8019c72:	607b      	str	r3, [r7, #4]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8019c74:	68bb      	ldr	r3, [r7, #8]
 8019c76:	2b07      	cmp	r3, #7
 8019c78:	d105      	bne.n	8019c86 <SX1276SetRxConfig+0x31a>
 8019c7a:	687b      	ldr	r3, [r7, #4]
 8019c7c:	2b0b      	cmp	r3, #11
 8019c7e:	d008      	beq.n	8019c92 <SX1276SetRxConfig+0x326>
 8019c80:	687b      	ldr	r3, [r7, #4]
 8019c82:	2b0c      	cmp	r3, #12
 8019c84:	d005      	beq.n	8019c92 <SX1276SetRxConfig+0x326>
 8019c86:	68bb      	ldr	r3, [r7, #8]
 8019c88:	2b08      	cmp	r3, #8
 8019c8a:	d111      	bne.n	8019cb0 <SX1276SetRxConfig+0x344>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8019c8c:	687b      	ldr	r3, [r7, #4]
 8019c8e:	2b0c      	cmp	r3, #12
 8019c90:	d10e      	bne.n	8019cb0 <SX1276SetRxConfig+0x344>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8019c92:	4b02      	ldr	r3, [pc, #8]	; (8019c9c <SX1276SetRxConfig+0x330>)
 8019c94:	224c      	movs	r2, #76	; 0x4c
 8019c96:	2101      	movs	r1, #1
 8019c98:	5499      	strb	r1, [r3, r2]
 8019c9a:	e00d      	b.n	8019cb8 <SX1276SetRxConfig+0x34c>
 8019c9c:	20001774 	.word	0x20001774
 8019ca0:	3ff00000 	.word	0x3ff00000
 8019ca4:	40200000 	.word	0x40200000
 8019ca8:	408f4000 	.word	0x408f4000
 8019cac:	417e8480 	.word	0x417e8480
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8019cb0:	4b77      	ldr	r3, [pc, #476]	; (8019e90 <SX1276SetRxConfig+0x524>)
 8019cb2:	224c      	movs	r2, #76	; 0x4c
 8019cb4:	2100      	movs	r1, #0
 8019cb6:	5499      	strb	r1, [r3, r2]
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8019cb8:	201d      	movs	r0, #29
 8019cba:	f001 f972 	bl	801afa2 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8019cbe:	68bb      	ldr	r3, [r7, #8]
 8019cc0:	b2db      	uxtb	r3, r3
 8019cc2:	011b      	lsls	r3, r3, #4
 8019cc4:	b2da      	uxtb	r2, r3
 8019cc6:	230e      	movs	r3, #14
 8019cc8:	18fb      	adds	r3, r7, r3
 8019cca:	781b      	ldrb	r3, [r3, #0]
 8019ccc:	18db      	adds	r3, r3, r3
 8019cce:	b2db      	uxtb	r3, r3
 8019cd0:	4313      	orrs	r3, r2
 8019cd2:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8019cd4:	242c      	movs	r4, #44	; 0x2c
 8019cd6:	2608      	movs	r6, #8
 8019cd8:	19bb      	adds	r3, r7, r6
 8019cda:	191b      	adds	r3, r3, r4
 8019cdc:	781b      	ldrb	r3, [r3, #0]
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8019cde:	4313      	orrs	r3, r2
 8019ce0:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8019ce2:	0019      	movs	r1, r3
 8019ce4:	201d      	movs	r0, #29
 8019ce6:	f001 f94b 	bl	801af80 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8019cea:	201e      	movs	r0, #30
 8019cec:	f001 f959 	bl	801afa2 <SX1276Read>
 8019cf0:	0003      	movs	r3, r0
 8019cf2:	001a      	movs	r2, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 8019cf4:	2308      	movs	r3, #8
 8019cf6:	4013      	ands	r3, r2
 8019cf8:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8019cfa:	687b      	ldr	r3, [r7, #4]
 8019cfc:	b2db      	uxtb	r3, r3
 8019cfe:	011b      	lsls	r3, r3, #4
 8019d00:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 8019d02:	4313      	orrs	r3, r2
 8019d04:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8019d06:	2334      	movs	r3, #52	; 0x34
 8019d08:	2108      	movs	r1, #8
 8019d0a:	468c      	mov	ip, r1
 8019d0c:	44bc      	add	ip, r7
 8019d0e:	4463      	add	r3, ip
 8019d10:	781b      	ldrb	r3, [r3, #0]
 8019d12:	009b      	lsls	r3, r3, #2
 8019d14:	b2db      	uxtb	r3, r3
 8019d16:	4313      	orrs	r3, r2
 8019d18:	b2da      	uxtb	r2, r3
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8019d1a:	2528      	movs	r5, #40	; 0x28
 8019d1c:	19bb      	adds	r3, r7, r6
 8019d1e:	195b      	adds	r3, r3, r5
 8019d20:	881b      	ldrh	r3, [r3, #0]
 8019d22:	0a1b      	lsrs	r3, r3, #8
 8019d24:	b29b      	uxth	r3, r3
 8019d26:	b2db      	uxtb	r3, r3
 8019d28:	2103      	movs	r1, #3
 8019d2a:	400b      	ands	r3, r1
 8019d2c:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 8019d2e:	4313      	orrs	r3, r2
 8019d30:	b2db      	uxtb	r3, r3
 8019d32:	0019      	movs	r1, r3
 8019d34:	201e      	movs	r0, #30
 8019d36:	f001 f923 	bl	801af80 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8019d3a:	2026      	movs	r0, #38	; 0x26
 8019d3c:	f001 f931 	bl	801afa2 <SX1276Read>
 8019d40:	0003      	movs	r3, r0
 8019d42:	b25b      	sxtb	r3, r3
 8019d44:	2208      	movs	r2, #8
 8019d46:	4393      	bics	r3, r2
 8019d48:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8019d4a:	4b51      	ldr	r3, [pc, #324]	; (8019e90 <SX1276SetRxConfig+0x524>)
 8019d4c:	214c      	movs	r1, #76	; 0x4c
 8019d4e:	5c5b      	ldrb	r3, [r3, r1]
 8019d50:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8019d52:	b25b      	sxtb	r3, r3
 8019d54:	4313      	orrs	r3, r2
 8019d56:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8019d58:	b2db      	uxtb	r3, r3
 8019d5a:	0019      	movs	r1, r3
 8019d5c:	2026      	movs	r0, #38	; 0x26
 8019d5e:	f001 f90f 	bl	801af80 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 8019d62:	19bb      	adds	r3, r7, r6
 8019d64:	195b      	adds	r3, r3, r5
 8019d66:	881b      	ldrh	r3, [r3, #0]
 8019d68:	b2db      	uxtb	r3, r3
 8019d6a:	0019      	movs	r1, r3
 8019d6c:	201f      	movs	r0, #31
 8019d6e:	f001 f907 	bl	801af80 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8019d72:	2524      	movs	r5, #36	; 0x24
 8019d74:	19bb      	adds	r3, r7, r6
 8019d76:	195b      	adds	r3, r3, r5
 8019d78:	881b      	ldrh	r3, [r3, #0]
 8019d7a:	0a1b      	lsrs	r3, r3, #8
 8019d7c:	b29b      	uxth	r3, r3
 8019d7e:	b2db      	uxtb	r3, r3
 8019d80:	0019      	movs	r1, r3
 8019d82:	2020      	movs	r0, #32
 8019d84:	f001 f8fc 	bl	801af80 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8019d88:	19bb      	adds	r3, r7, r6
 8019d8a:	195b      	adds	r3, r3, r5
 8019d8c:	881b      	ldrh	r3, [r3, #0]
 8019d8e:	b2db      	uxtb	r3, r3
 8019d90:	0019      	movs	r1, r3
 8019d92:	2021      	movs	r0, #33	; 0x21
 8019d94:	f001 f8f4 	bl	801af80 <SX1276Write>
            if( fixLen == 1 )
 8019d98:	19bb      	adds	r3, r7, r6
 8019d9a:	191b      	adds	r3, r3, r4
 8019d9c:	781b      	ldrb	r3, [r3, #0]
 8019d9e:	2b00      	cmp	r3, #0
 8019da0:	d009      	beq.n	8019db6 <SX1276SetRxConfig+0x44a>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 8019da2:	2330      	movs	r3, #48	; 0x30
 8019da4:	2208      	movs	r2, #8
 8019da6:	4694      	mov	ip, r2
 8019da8:	44bc      	add	ip, r7
 8019daa:	4463      	add	r3, ip
 8019dac:	781b      	ldrb	r3, [r3, #0]
 8019dae:	0019      	movs	r1, r3
 8019db0:	2022      	movs	r0, #34	; 0x22
 8019db2:	f001 f8e5 	bl	801af80 <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8019db6:	4b36      	ldr	r3, [pc, #216]	; (8019e90 <SX1276SetRxConfig+0x524>)
 8019db8:	2253      	movs	r2, #83	; 0x53
 8019dba:	5c9b      	ldrb	r3, [r3, r2]
 8019dbc:	2b00      	cmp	r3, #0
 8019dbe:	d013      	beq.n	8019de8 <SX1276SetRxConfig+0x47c>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8019dc0:	2044      	movs	r0, #68	; 0x44
 8019dc2:	f001 f8ee 	bl	801afa2 <SX1276Read>
 8019dc6:	0003      	movs	r3, r0
 8019dc8:	001a      	movs	r2, r3
 8019dca:	2380      	movs	r3, #128	; 0x80
 8019dcc:	425b      	negs	r3, r3
 8019dce:	4313      	orrs	r3, r2
 8019dd0:	b2db      	uxtb	r3, r3
 8019dd2:	0019      	movs	r1, r3
 8019dd4:	2044      	movs	r0, #68	; 0x44
 8019dd6:	f001 f8d3 	bl	801af80 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8019dda:	4b2d      	ldr	r3, [pc, #180]	; (8019e90 <SX1276SetRxConfig+0x524>)
 8019ddc:	2254      	movs	r2, #84	; 0x54
 8019dde:	5c9b      	ldrb	r3, [r3, r2]
 8019de0:	0019      	movs	r1, r3
 8019de2:	2024      	movs	r0, #36	; 0x24
 8019de4:	f001 f8cc 	bl	801af80 <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8019de8:	68bb      	ldr	r3, [r7, #8]
 8019dea:	2b09      	cmp	r3, #9
 8019dec:	d10d      	bne.n	8019e0a <SX1276SetRxConfig+0x49e>
 8019dee:	4b28      	ldr	r3, [pc, #160]	; (8019e90 <SX1276SetRxConfig+0x524>)
 8019df0:	689b      	ldr	r3, [r3, #8]
 8019df2:	4a28      	ldr	r2, [pc, #160]	; (8019e94 <SX1276SetRxConfig+0x528>)
 8019df4:	4293      	cmp	r3, r2
 8019df6:	d908      	bls.n	8019e0a <SX1276SetRxConfig+0x49e>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8019df8:	2102      	movs	r1, #2
 8019dfa:	2036      	movs	r0, #54	; 0x36
 8019dfc:	f001 f8c0 	bl	801af80 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 8019e00:	2164      	movs	r1, #100	; 0x64
 8019e02:	203a      	movs	r0, #58	; 0x3a
 8019e04:	f001 f8bc 	bl	801af80 <SX1276Write>
 8019e08:	e00f      	b.n	8019e2a <SX1276SetRxConfig+0x4be>
            else if( bandwidth == 9 )
 8019e0a:	68bb      	ldr	r3, [r7, #8]
 8019e0c:	2b09      	cmp	r3, #9
 8019e0e:	d108      	bne.n	8019e22 <SX1276SetRxConfig+0x4b6>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8019e10:	2102      	movs	r1, #2
 8019e12:	2036      	movs	r0, #54	; 0x36
 8019e14:	f001 f8b4 	bl	801af80 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 8019e18:	217f      	movs	r1, #127	; 0x7f
 8019e1a:	203a      	movs	r0, #58	; 0x3a
 8019e1c:	f001 f8b0 	bl	801af80 <SX1276Write>
 8019e20:	e003      	b.n	8019e2a <SX1276SetRxConfig+0x4be>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 8019e22:	2103      	movs	r1, #3
 8019e24:	2036      	movs	r0, #54	; 0x36
 8019e26:	f001 f8ab 	bl	801af80 <SX1276Write>
            if( datarate == 6 )
 8019e2a:	687b      	ldr	r3, [r7, #4]
 8019e2c:	2b06      	cmp	r3, #6
 8019e2e:	d114      	bne.n	8019e5a <SX1276SetRxConfig+0x4ee>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8019e30:	2031      	movs	r0, #49	; 0x31
 8019e32:	f001 f8b6 	bl	801afa2 <SX1276Read>
 8019e36:	0003      	movs	r3, r0
 8019e38:	b25b      	sxtb	r3, r3
 8019e3a:	2207      	movs	r2, #7
 8019e3c:	4393      	bics	r3, r2
 8019e3e:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8019e40:	2205      	movs	r2, #5
 8019e42:	4313      	orrs	r3, r2
 8019e44:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8019e46:	b2db      	uxtb	r3, r3
 8019e48:	0019      	movs	r1, r3
 8019e4a:	2031      	movs	r0, #49	; 0x31
 8019e4c:	f001 f898 	bl	801af80 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8019e50:	210c      	movs	r1, #12
 8019e52:	2037      	movs	r0, #55	; 0x37
 8019e54:	f001 f894 	bl	801af80 <SX1276Write>
        break;
 8019e58:	e013      	b.n	8019e82 <SX1276SetRxConfig+0x516>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8019e5a:	2031      	movs	r0, #49	; 0x31
 8019e5c:	f001 f8a1 	bl	801afa2 <SX1276Read>
 8019e60:	0003      	movs	r3, r0
 8019e62:	b25b      	sxtb	r3, r3
 8019e64:	2207      	movs	r2, #7
 8019e66:	4393      	bics	r3, r2
 8019e68:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8019e6a:	2203      	movs	r2, #3
 8019e6c:	4313      	orrs	r3, r2
 8019e6e:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8019e70:	b2db      	uxtb	r3, r3
 8019e72:	0019      	movs	r1, r3
 8019e74:	2031      	movs	r0, #49	; 0x31
 8019e76:	f001 f883 	bl	801af80 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8019e7a:	210a      	movs	r1, #10
 8019e7c:	2037      	movs	r0, #55	; 0x37
 8019e7e:	f001 f87f 	bl	801af80 <SX1276Write>
        break;
 8019e82:	46c0      	nop			; (mov r8, r8)
}
 8019e84:	46c0      	nop			; (mov r8, r8)
 8019e86:	46bd      	mov	sp, r7
 8019e88:	b004      	add	sp, #16
 8019e8a:	bc80      	pop	{r7}
 8019e8c:	46b8      	mov	r8, r7
 8019e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019e90:	20001774 	.word	0x20001774
 8019e94:	1f4add40 	.word	0x1f4add40

08019e98 <SX1276SetTxConfig>:
void SX1276SetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                        uint32_t bandwidth, uint32_t datarate,
                        uint8_t coderate, uint16_t preambleLen,
                        bool fixLen, bool crcOn, bool freqHopOn,
                        uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8019e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019e9a:	46c6      	mov	lr, r8
 8019e9c:	b500      	push	{lr}
 8019e9e:	b084      	sub	sp, #16
 8019ea0:	af00      	add	r7, sp, #0
 8019ea2:	60ba      	str	r2, [r7, #8]
 8019ea4:	607b      	str	r3, [r7, #4]
 8019ea6:	240f      	movs	r4, #15
 8019ea8:	193b      	adds	r3, r7, r4
 8019eaa:	1c02      	adds	r2, r0, #0
 8019eac:	701a      	strb	r2, [r3, #0]
 8019eae:	230e      	movs	r3, #14
 8019eb0:	18fb      	adds	r3, r7, r3
 8019eb2:	1c0a      	adds	r2, r1, #0
 8019eb4:	701a      	strb	r2, [r3, #0]
    if( ( SX1276.Settings.State == RF_RX_RUNNING ) && ( modem == MODEM_FSK ) )
 8019eb6:	4bb7      	ldr	r3, [pc, #732]	; (801a194 <SX1276SetTxConfig+0x2fc>)
 8019eb8:	791b      	ldrb	r3, [r3, #4]
 8019eba:	2b01      	cmp	r3, #1
 8019ebc:	d108      	bne.n	8019ed0 <SX1276SetTxConfig+0x38>
 8019ebe:	193b      	adds	r3, r7, r4
 8019ec0:	781b      	ldrb	r3, [r3, #0]
 8019ec2:	2b00      	cmp	r3, #0
 8019ec4:	d104      	bne.n	8019ed0 <SX1276SetTxConfig+0x38>
    {
        SX1276SetSleep( );
 8019ec6:	f000 fc63 	bl	801a790 <SX1276SetSleep>
        RADIO_DELAY_MS( 1 );
 8019eca:	2001      	movs	r0, #1
 8019ecc:	f7ea ff7f 	bl	8004dce <HAL_Delay>
    }

    SX1276SetModem( modem );
 8019ed0:	240f      	movs	r4, #15
 8019ed2:	193b      	adds	r3, r7, r4
 8019ed4:	781b      	ldrb	r3, [r3, #0]
 8019ed6:	0018      	movs	r0, r3
 8019ed8:	f000 fff8 	bl	801aecc <SX1276SetModem>

    SX1276SetRfTxPower( power );
 8019edc:	250e      	movs	r5, #14
 8019ede:	197b      	adds	r3, r7, r5
 8019ee0:	781b      	ldrb	r3, [r3, #0]
 8019ee2:	b25b      	sxtb	r3, r3
 8019ee4:	0018      	movs	r0, r3
 8019ee6:	f000 fb41 	bl	801a56c <SX1276SetRfTxPower>
    power = 0;  // Изменение параметра мощности передачи
 8019eea:	197b      	adds	r3, r7, r5
 8019eec:	2200      	movs	r2, #0
 8019eee:	701a      	strb	r2, [r3, #0]
    switch( modem )
 8019ef0:	193b      	adds	r3, r7, r4
 8019ef2:	781b      	ldrb	r3, [r3, #0]
 8019ef4:	2b00      	cmp	r3, #0
 8019ef6:	d003      	beq.n	8019f00 <SX1276SetTxConfig+0x68>
 8019ef8:	2b01      	cmp	r3, #1
 8019efa:	d100      	bne.n	8019efe <SX1276SetTxConfig+0x66>
 8019efc:	e0c1      	b.n	801a082 <SX1276SetTxConfig+0x1ea>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 8019efe:	e207      	b.n	801a310 <SX1276SetTxConfig+0x478>
            SX1276.Settings.Fsk.Power = power;
 8019f00:	4ba4      	ldr	r3, [pc, #656]	; (801a194 <SX1276SetTxConfig+0x2fc>)
 8019f02:	220e      	movs	r2, #14
 8019f04:	18ba      	adds	r2, r7, r2
 8019f06:	7812      	ldrb	r2, [r2, #0]
 8019f08:	731a      	strb	r2, [r3, #12]
            SX1276.Settings.Fsk.Fdev = fdev;
 8019f0a:	4ba2      	ldr	r3, [pc, #648]	; (801a194 <SX1276SetTxConfig+0x2fc>)
 8019f0c:	68ba      	ldr	r2, [r7, #8]
 8019f0e:	611a      	str	r2, [r3, #16]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8019f10:	4ba0      	ldr	r3, [pc, #640]	; (801a194 <SX1276SetTxConfig+0x2fc>)
 8019f12:	687a      	ldr	r2, [r7, #4]
 8019f14:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 8019f16:	4b9f      	ldr	r3, [pc, #636]	; (801a194 <SX1276SetTxConfig+0x2fc>)
 8019f18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019f1a:	61da      	str	r2, [r3, #28]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8019f1c:	4b9d      	ldr	r3, [pc, #628]	; (801a194 <SX1276SetTxConfig+0x2fc>)
 8019f1e:	2420      	movs	r4, #32
 8019f20:	2608      	movs	r6, #8
 8019f22:	2208      	movs	r2, #8
 8019f24:	18ba      	adds	r2, r7, r2
 8019f26:	1992      	adds	r2, r2, r6
 8019f28:	1912      	adds	r2, r2, r4
 8019f2a:	8812      	ldrh	r2, [r2, #0]
 8019f2c:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8019f2e:	4b99      	ldr	r3, [pc, #612]	; (801a194 <SX1276SetTxConfig+0x2fc>)
 8019f30:	2524      	movs	r5, #36	; 0x24
 8019f32:	2208      	movs	r2, #8
 8019f34:	18ba      	adds	r2, r7, r2
 8019f36:	1992      	adds	r2, r2, r6
 8019f38:	1952      	adds	r2, r2, r5
 8019f3a:	2122      	movs	r1, #34	; 0x22
 8019f3c:	7812      	ldrb	r2, [r2, #0]
 8019f3e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8019f40:	4b94      	ldr	r3, [pc, #592]	; (801a194 <SX1276SetTxConfig+0x2fc>)
 8019f42:	2228      	movs	r2, #40	; 0x28
 8019f44:	2108      	movs	r1, #8
 8019f46:	468c      	mov	ip, r1
 8019f48:	2108      	movs	r1, #8
 8019f4a:	4688      	mov	r8, r1
 8019f4c:	44b8      	add	r8, r7
 8019f4e:	44c4      	add	ip, r8
 8019f50:	4462      	add	r2, ip
 8019f52:	2124      	movs	r1, #36	; 0x24
 8019f54:	7812      	ldrb	r2, [r2, #0]
 8019f56:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8019f58:	4b8e      	ldr	r3, [pc, #568]	; (801a194 <SX1276SetTxConfig+0x2fc>)
 8019f5a:	2234      	movs	r2, #52	; 0x34
 8019f5c:	2108      	movs	r1, #8
 8019f5e:	468c      	mov	ip, r1
 8019f60:	2108      	movs	r1, #8
 8019f62:	4688      	mov	r8, r1
 8019f64:	44b8      	add	r8, r7
 8019f66:	44c4      	add	ip, r8
 8019f68:	4462      	add	r2, ip
 8019f6a:	2125      	movs	r1, #37	; 0x25
 8019f6c:	7812      	ldrb	r2, [r2, #0]
 8019f6e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8019f70:	4b88      	ldr	r3, [pc, #544]	; (801a194 <SX1276SetTxConfig+0x2fc>)
 8019f72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019f74:	629a      	str	r2, [r3, #40]	; 0x28
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 8019f76:	68b8      	ldr	r0, [r7, #8]
 8019f78:	f7e8 fbce 	bl	8002718 <__aeabi_ui2d>
 8019f7c:	2200      	movs	r2, #0
 8019f7e:	4b86      	ldr	r3, [pc, #536]	; (801a198 <SX1276SetTxConfig+0x300>)
 8019f80:	f7e7 f960 	bl	8001244 <__aeabi_ddiv>
 8019f84:	0002      	movs	r2, r0
 8019f86:	000b      	movs	r3, r1
 8019f88:	0010      	movs	r0, r2
 8019f8a:	0019      	movs	r1, r3
 8019f8c:	f7e6 fae4 	bl	8000558 <__aeabi_d2uiz>
 8019f90:	0003      	movs	r3, r0
 8019f92:	b29b      	uxth	r3, r3
 8019f94:	60bb      	str	r3, [r7, #8]
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 8019f96:	68bb      	ldr	r3, [r7, #8]
 8019f98:	0a1b      	lsrs	r3, r3, #8
 8019f9a:	b2db      	uxtb	r3, r3
 8019f9c:	0019      	movs	r1, r3
 8019f9e:	2004      	movs	r0, #4
 8019fa0:	f000 ffee 	bl	801af80 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 8019fa4:	68bb      	ldr	r3, [r7, #8]
 8019fa6:	b2db      	uxtb	r3, r3
 8019fa8:	0019      	movs	r1, r3
 8019faa:	2005      	movs	r0, #5
 8019fac:	f000 ffe8 	bl	801af80 <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8019fb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019fb2:	f7e8 fbb1 	bl	8002718 <__aeabi_ui2d>
 8019fb6:	0002      	movs	r2, r0
 8019fb8:	000b      	movs	r3, r1
 8019fba:	2000      	movs	r0, #0
 8019fbc:	4977      	ldr	r1, [pc, #476]	; (801a19c <SX1276SetTxConfig+0x304>)
 8019fbe:	f7e7 f941 	bl	8001244 <__aeabi_ddiv>
 8019fc2:	0002      	movs	r2, r0
 8019fc4:	000b      	movs	r3, r1
 8019fc6:	0010      	movs	r0, r2
 8019fc8:	0019      	movs	r1, r3
 8019fca:	f7e6 fac5 	bl	8000558 <__aeabi_d2uiz>
 8019fce:	0003      	movs	r3, r0
 8019fd0:	b29b      	uxth	r3, r3
 8019fd2:	62bb      	str	r3, [r7, #40]	; 0x28
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 8019fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019fd6:	0a1b      	lsrs	r3, r3, #8
 8019fd8:	b2db      	uxtb	r3, r3
 8019fda:	0019      	movs	r1, r3
 8019fdc:	2002      	movs	r0, #2
 8019fde:	f000 ffcf 	bl	801af80 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8019fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019fe4:	b2db      	uxtb	r3, r3
 8019fe6:	0019      	movs	r1, r3
 8019fe8:	2003      	movs	r0, #3
 8019fea:	f000 ffc9 	bl	801af80 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8019fee:	2308      	movs	r3, #8
 8019ff0:	18fb      	adds	r3, r7, r3
 8019ff2:	199b      	adds	r3, r3, r6
 8019ff4:	191b      	adds	r3, r3, r4
 8019ff6:	881b      	ldrh	r3, [r3, #0]
 8019ff8:	0a1b      	lsrs	r3, r3, #8
 8019ffa:	b29b      	uxth	r3, r3
 8019ffc:	b2db      	uxtb	r3, r3
 8019ffe:	0019      	movs	r1, r3
 801a000:	2025      	movs	r0, #37	; 0x25
 801a002:	f000 ffbd 	bl	801af80 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 801a006:	2308      	movs	r3, #8
 801a008:	18fb      	adds	r3, r7, r3
 801a00a:	199b      	adds	r3, r3, r6
 801a00c:	191b      	adds	r3, r3, r4
 801a00e:	881b      	ldrh	r3, [r3, #0]
 801a010:	b2db      	uxtb	r3, r3
 801a012:	0019      	movs	r1, r3
 801a014:	2026      	movs	r0, #38	; 0x26
 801a016:	f000 ffb3 	bl	801af80 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 801a01a:	2030      	movs	r0, #48	; 0x30
 801a01c:	f000 ffc1 	bl	801afa2 <SX1276Read>
 801a020:	0003      	movs	r3, r0
 801a022:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 801a024:	226f      	movs	r2, #111	; 0x6f
 801a026:	4013      	ands	r3, r2
 801a028:	b25a      	sxtb	r2, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 801a02a:	2308      	movs	r3, #8
 801a02c:	18fb      	adds	r3, r7, r3
 801a02e:	199b      	adds	r3, r3, r6
 801a030:	195b      	adds	r3, r3, r5
 801a032:	781b      	ldrb	r3, [r3, #0]
 801a034:	2b00      	cmp	r3, #0
 801a036:	d001      	beq.n	801a03c <SX1276SetTxConfig+0x1a4>
 801a038:	2300      	movs	r3, #0
 801a03a:	e001      	b.n	801a040 <SX1276SetTxConfig+0x1a8>
 801a03c:	2380      	movs	r3, #128	; 0x80
 801a03e:	425b      	negs	r3, r3
 801a040:	4313      	orrs	r3, r2
 801a042:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 801a044:	2328      	movs	r3, #40	; 0x28
 801a046:	2108      	movs	r1, #8
 801a048:	468c      	mov	ip, r1
 801a04a:	2108      	movs	r1, #8
 801a04c:	4688      	mov	r8, r1
 801a04e:	44b8      	add	r8, r7
 801a050:	44c4      	add	ip, r8
 801a052:	4463      	add	r3, ip
 801a054:	781b      	ldrb	r3, [r3, #0]
 801a056:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 801a058:	b25b      	sxtb	r3, r3
 801a05a:	4313      	orrs	r3, r2
 801a05c:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 801a05e:	b2db      	uxtb	r3, r3
 801a060:	0019      	movs	r1, r3
 801a062:	2030      	movs	r0, #48	; 0x30
 801a064:	f000 ff8c 	bl	801af80 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 801a068:	2031      	movs	r0, #49	; 0x31
 801a06a:	f000 ff9a 	bl	801afa2 <SX1276Read>
 801a06e:	0003      	movs	r3, r0
 801a070:	001a      	movs	r2, r3
 801a072:	2340      	movs	r3, #64	; 0x40
 801a074:	4313      	orrs	r3, r2
 801a076:	b2db      	uxtb	r3, r3
 801a078:	0019      	movs	r1, r3
 801a07a:	2031      	movs	r0, #49	; 0x31
 801a07c:	f000 ff80 	bl	801af80 <SX1276Write>
        break;
 801a080:	e146      	b.n	801a310 <SX1276SetTxConfig+0x478>
            SX1276.Settings.LoRa.Power = power;
 801a082:	4b44      	ldr	r3, [pc, #272]	; (801a194 <SX1276SetTxConfig+0x2fc>)
 801a084:	220e      	movs	r2, #14
 801a086:	18ba      	adds	r2, r7, r2
 801a088:	2140      	movs	r1, #64	; 0x40
 801a08a:	7812      	ldrb	r2, [r2, #0]
 801a08c:	545a      	strb	r2, [r3, r1]
            if( bandwidth > 2 )
 801a08e:	687b      	ldr	r3, [r7, #4]
 801a090:	2b02      	cmp	r3, #2
 801a092:	d900      	bls.n	801a096 <SX1276SetTxConfig+0x1fe>
                while( 1 );
 801a094:	e7fe      	b.n	801a094 <SX1276SetTxConfig+0x1fc>
            bandwidth += 7;
 801a096:	687b      	ldr	r3, [r7, #4]
 801a098:	3307      	adds	r3, #7
 801a09a:	607b      	str	r3, [r7, #4]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 801a09c:	4b3d      	ldr	r3, [pc, #244]	; (801a194 <SX1276SetTxConfig+0x2fc>)
 801a09e:	687a      	ldr	r2, [r7, #4]
 801a0a0:	645a      	str	r2, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 801a0a2:	4b3c      	ldr	r3, [pc, #240]	; (801a194 <SX1276SetTxConfig+0x2fc>)
 801a0a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a0a6:	649a      	str	r2, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.Coderate = coderate;
 801a0a8:	4b3a      	ldr	r3, [pc, #232]	; (801a194 <SX1276SetTxConfig+0x2fc>)
 801a0aa:	221c      	movs	r2, #28
 801a0ac:	2108      	movs	r1, #8
 801a0ae:	468c      	mov	ip, r1
 801a0b0:	2108      	movs	r1, #8
 801a0b2:	4688      	mov	r8, r1
 801a0b4:	44b8      	add	r8, r7
 801a0b6:	44c4      	add	ip, r8
 801a0b8:	4462      	add	r2, ip
 801a0ba:	214d      	movs	r1, #77	; 0x4d
 801a0bc:	7812      	ldrb	r2, [r2, #0]
 801a0be:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 801a0c0:	4b34      	ldr	r3, [pc, #208]	; (801a194 <SX1276SetTxConfig+0x2fc>)
 801a0c2:	2220      	movs	r2, #32
 801a0c4:	2108      	movs	r1, #8
 801a0c6:	468c      	mov	ip, r1
 801a0c8:	2108      	movs	r1, #8
 801a0ca:	4688      	mov	r8, r1
 801a0cc:	44b8      	add	r8, r7
 801a0ce:	44c4      	add	ip, r8
 801a0d0:	4462      	add	r2, ip
 801a0d2:	214e      	movs	r1, #78	; 0x4e
 801a0d4:	8812      	ldrh	r2, [r2, #0]
 801a0d6:	525a      	strh	r2, [r3, r1]
            SX1276.Settings.LoRa.FixLen = fixLen;
 801a0d8:	4b2e      	ldr	r3, [pc, #184]	; (801a194 <SX1276SetTxConfig+0x2fc>)
 801a0da:	2224      	movs	r2, #36	; 0x24
 801a0dc:	2108      	movs	r1, #8
 801a0de:	468c      	mov	ip, r1
 801a0e0:	2108      	movs	r1, #8
 801a0e2:	4688      	mov	r8, r1
 801a0e4:	44b8      	add	r8, r7
 801a0e6:	44c4      	add	ip, r8
 801a0e8:	4462      	add	r2, ip
 801a0ea:	2150      	movs	r1, #80	; 0x50
 801a0ec:	7812      	ldrb	r2, [r2, #0]
 801a0ee:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 801a0f0:	4b28      	ldr	r3, [pc, #160]	; (801a194 <SX1276SetTxConfig+0x2fc>)
 801a0f2:	222c      	movs	r2, #44	; 0x2c
 801a0f4:	2108      	movs	r1, #8
 801a0f6:	468c      	mov	ip, r1
 801a0f8:	2108      	movs	r1, #8
 801a0fa:	4688      	mov	r8, r1
 801a0fc:	44b8      	add	r8, r7
 801a0fe:	44c4      	add	ip, r8
 801a100:	4462      	add	r2, ip
 801a102:	2153      	movs	r1, #83	; 0x53
 801a104:	7812      	ldrb	r2, [r2, #0]
 801a106:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 801a108:	4b22      	ldr	r3, [pc, #136]	; (801a194 <SX1276SetTxConfig+0x2fc>)
 801a10a:	2230      	movs	r2, #48	; 0x30
 801a10c:	2108      	movs	r1, #8
 801a10e:	468c      	mov	ip, r1
 801a110:	2108      	movs	r1, #8
 801a112:	4688      	mov	r8, r1
 801a114:	44b8      	add	r8, r7
 801a116:	44c4      	add	ip, r8
 801a118:	4462      	add	r2, ip
 801a11a:	2154      	movs	r1, #84	; 0x54
 801a11c:	7812      	ldrb	r2, [r2, #0]
 801a11e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 801a120:	4b1c      	ldr	r3, [pc, #112]	; (801a194 <SX1276SetTxConfig+0x2fc>)
 801a122:	2228      	movs	r2, #40	; 0x28
 801a124:	2108      	movs	r1, #8
 801a126:	468c      	mov	ip, r1
 801a128:	2108      	movs	r1, #8
 801a12a:	4688      	mov	r8, r1
 801a12c:	44b8      	add	r8, r7
 801a12e:	44c4      	add	ip, r8
 801a130:	4462      	add	r2, ip
 801a132:	2152      	movs	r1, #82	; 0x52
 801a134:	7812      	ldrb	r2, [r2, #0]
 801a136:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 801a138:	4b16      	ldr	r3, [pc, #88]	; (801a194 <SX1276SetTxConfig+0x2fc>)
 801a13a:	2234      	movs	r2, #52	; 0x34
 801a13c:	2108      	movs	r1, #8
 801a13e:	468c      	mov	ip, r1
 801a140:	2108      	movs	r1, #8
 801a142:	4688      	mov	r8, r1
 801a144:	44b8      	add	r8, r7
 801a146:	44c4      	add	ip, r8
 801a148:	4462      	add	r2, ip
 801a14a:	2155      	movs	r1, #85	; 0x55
 801a14c:	7812      	ldrb	r2, [r2, #0]
 801a14e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.TxTimeout = timeout;
 801a150:	4b10      	ldr	r3, [pc, #64]	; (801a194 <SX1276SetTxConfig+0x2fc>)
 801a152:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a154:	659a      	str	r2, [r3, #88]	; 0x58
            if( datarate > 12 )
 801a156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a158:	2b0c      	cmp	r3, #12
 801a15a:	d902      	bls.n	801a162 <SX1276SetTxConfig+0x2ca>
                datarate = 12;
 801a15c:	230c      	movs	r3, #12
 801a15e:	62bb      	str	r3, [r7, #40]	; 0x28
 801a160:	e004      	b.n	801a16c <SX1276SetTxConfig+0x2d4>
            else if( datarate < 6 )
 801a162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a164:	2b05      	cmp	r3, #5
 801a166:	d801      	bhi.n	801a16c <SX1276SetTxConfig+0x2d4>
                datarate = 6;
 801a168:	2306      	movs	r3, #6
 801a16a:	62bb      	str	r3, [r7, #40]	; 0x28
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801a16c:	687b      	ldr	r3, [r7, #4]
 801a16e:	2b07      	cmp	r3, #7
 801a170:	d105      	bne.n	801a17e <SX1276SetTxConfig+0x2e6>
 801a172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a174:	2b0b      	cmp	r3, #11
 801a176:	d008      	beq.n	801a18a <SX1276SetTxConfig+0x2f2>
 801a178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a17a:	2b0c      	cmp	r3, #12
 801a17c:	d005      	beq.n	801a18a <SX1276SetTxConfig+0x2f2>
 801a17e:	687b      	ldr	r3, [r7, #4]
 801a180:	2b08      	cmp	r3, #8
 801a182:	d10d      	bne.n	801a1a0 <SX1276SetTxConfig+0x308>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 801a184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a186:	2b0c      	cmp	r3, #12
 801a188:	d10a      	bne.n	801a1a0 <SX1276SetTxConfig+0x308>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 801a18a:	4b02      	ldr	r3, [pc, #8]	; (801a194 <SX1276SetTxConfig+0x2fc>)
 801a18c:	224c      	movs	r2, #76	; 0x4c
 801a18e:	2101      	movs	r1, #1
 801a190:	5499      	strb	r1, [r3, r2]
 801a192:	e009      	b.n	801a1a8 <SX1276SetTxConfig+0x310>
 801a194:	20001774 	.word	0x20001774
 801a198:	404e8480 	.word	0x404e8480
 801a19c:	417e8480 	.word	0x417e8480
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 801a1a0:	4b5e      	ldr	r3, [pc, #376]	; (801a31c <SX1276SetTxConfig+0x484>)
 801a1a2:	224c      	movs	r2, #76	; 0x4c
 801a1a4:	2100      	movs	r1, #0
 801a1a6:	5499      	strb	r1, [r3, r2]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 801a1a8:	4b5c      	ldr	r3, [pc, #368]	; (801a31c <SX1276SetTxConfig+0x484>)
 801a1aa:	2253      	movs	r2, #83	; 0x53
 801a1ac:	5c9b      	ldrb	r3, [r3, r2]
 801a1ae:	2b00      	cmp	r3, #0
 801a1b0:	d013      	beq.n	801a1da <SX1276SetTxConfig+0x342>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 801a1b2:	2044      	movs	r0, #68	; 0x44
 801a1b4:	f000 fef5 	bl	801afa2 <SX1276Read>
 801a1b8:	0003      	movs	r3, r0
 801a1ba:	001a      	movs	r2, r3
 801a1bc:	2380      	movs	r3, #128	; 0x80
 801a1be:	425b      	negs	r3, r3
 801a1c0:	4313      	orrs	r3, r2
 801a1c2:	b2db      	uxtb	r3, r3
 801a1c4:	0019      	movs	r1, r3
 801a1c6:	2044      	movs	r0, #68	; 0x44
 801a1c8:	f000 feda 	bl	801af80 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 801a1cc:	4b53      	ldr	r3, [pc, #332]	; (801a31c <SX1276SetTxConfig+0x484>)
 801a1ce:	2254      	movs	r2, #84	; 0x54
 801a1d0:	5c9b      	ldrb	r3, [r3, r2]
 801a1d2:	0019      	movs	r1, r3
 801a1d4:	2024      	movs	r0, #36	; 0x24
 801a1d6:	f000 fed3 	bl	801af80 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 801a1da:	201d      	movs	r0, #29
 801a1dc:	f000 fee1 	bl	801afa2 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 801a1e0:	687b      	ldr	r3, [r7, #4]
 801a1e2:	b2db      	uxtb	r3, r3
 801a1e4:	011b      	lsls	r3, r3, #4
 801a1e6:	b2da      	uxtb	r2, r3
 801a1e8:	231c      	movs	r3, #28
 801a1ea:	2108      	movs	r1, #8
 801a1ec:	468c      	mov	ip, r1
 801a1ee:	2108      	movs	r1, #8
 801a1f0:	4688      	mov	r8, r1
 801a1f2:	44b8      	add	r8, r7
 801a1f4:	44c4      	add	ip, r8
 801a1f6:	4463      	add	r3, ip
 801a1f8:	781b      	ldrb	r3, [r3, #0]
 801a1fa:	18db      	adds	r3, r3, r3
 801a1fc:	b2db      	uxtb	r3, r3
 801a1fe:	4313      	orrs	r3, r2
 801a200:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 801a202:	2324      	movs	r3, #36	; 0x24
 801a204:	2108      	movs	r1, #8
 801a206:	468c      	mov	ip, r1
 801a208:	2108      	movs	r1, #8
 801a20a:	4688      	mov	r8, r1
 801a20c:	44b8      	add	r8, r7
 801a20e:	44c4      	add	ip, r8
 801a210:	4463      	add	r3, ip
 801a212:	781b      	ldrb	r3, [r3, #0]
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 801a214:	4313      	orrs	r3, r2
 801a216:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 801a218:	0019      	movs	r1, r3
 801a21a:	201d      	movs	r0, #29
 801a21c:	f000 feb0 	bl	801af80 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 801a220:	201e      	movs	r0, #30
 801a222:	f000 febe 	bl	801afa2 <SX1276Read>
 801a226:	0003      	movs	r3, r0
 801a228:	001a      	movs	r2, r3
                           RFLR_MODEMCONFIG2_SF_MASK &
 801a22a:	230b      	movs	r3, #11
 801a22c:	4013      	ands	r3, r2
 801a22e:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 801a230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a232:	b2db      	uxtb	r3, r3
 801a234:	011b      	lsls	r3, r3, #4
 801a236:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
 801a238:	4313      	orrs	r3, r2
 801a23a:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 801a23c:	2328      	movs	r3, #40	; 0x28
 801a23e:	2108      	movs	r1, #8
 801a240:	468c      	mov	ip, r1
 801a242:	2108      	movs	r1, #8
 801a244:	4688      	mov	r8, r1
 801a246:	44b8      	add	r8, r7
 801a248:	44c4      	add	ip, r8
 801a24a:	4463      	add	r3, ip
 801a24c:	781b      	ldrb	r3, [r3, #0]
 801a24e:	009b      	lsls	r3, r3, #2
 801a250:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 801a252:	4313      	orrs	r3, r2
 801a254:	b2db      	uxtb	r3, r3
 801a256:	0019      	movs	r1, r3
 801a258:	201e      	movs	r0, #30
 801a25a:	f000 fe91 	bl	801af80 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 801a25e:	2026      	movs	r0, #38	; 0x26
 801a260:	f000 fe9f 	bl	801afa2 <SX1276Read>
 801a264:	0003      	movs	r3, r0
 801a266:	b25b      	sxtb	r3, r3
 801a268:	2208      	movs	r2, #8
 801a26a:	4393      	bics	r3, r2
 801a26c:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 801a26e:	4b2b      	ldr	r3, [pc, #172]	; (801a31c <SX1276SetTxConfig+0x484>)
 801a270:	214c      	movs	r1, #76	; 0x4c
 801a272:	5c5b      	ldrb	r3, [r3, r1]
 801a274:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 801a276:	b25b      	sxtb	r3, r3
 801a278:	4313      	orrs	r3, r2
 801a27a:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 801a27c:	b2db      	uxtb	r3, r3
 801a27e:	0019      	movs	r1, r3
 801a280:	2026      	movs	r0, #38	; 0x26
 801a282:	f000 fe7d 	bl	801af80 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 801a286:	2420      	movs	r4, #32
 801a288:	2508      	movs	r5, #8
 801a28a:	2308      	movs	r3, #8
 801a28c:	18fb      	adds	r3, r7, r3
 801a28e:	195b      	adds	r3, r3, r5
 801a290:	191b      	adds	r3, r3, r4
 801a292:	881b      	ldrh	r3, [r3, #0]
 801a294:	0a1b      	lsrs	r3, r3, #8
 801a296:	b29b      	uxth	r3, r3
 801a298:	b2db      	uxtb	r3, r3
 801a29a:	0019      	movs	r1, r3
 801a29c:	2020      	movs	r0, #32
 801a29e:	f000 fe6f 	bl	801af80 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 801a2a2:	2308      	movs	r3, #8
 801a2a4:	18fb      	adds	r3, r7, r3
 801a2a6:	195b      	adds	r3, r3, r5
 801a2a8:	191b      	adds	r3, r3, r4
 801a2aa:	881b      	ldrh	r3, [r3, #0]
 801a2ac:	b2db      	uxtb	r3, r3
 801a2ae:	0019      	movs	r1, r3
 801a2b0:	2021      	movs	r0, #33	; 0x21
 801a2b2:	f000 fe65 	bl	801af80 <SX1276Write>
            if( datarate == 6 )
 801a2b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a2b8:	2b06      	cmp	r3, #6
 801a2ba:	d114      	bne.n	801a2e6 <SX1276SetTxConfig+0x44e>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 801a2bc:	2031      	movs	r0, #49	; 0x31
 801a2be:	f000 fe70 	bl	801afa2 <SX1276Read>
 801a2c2:	0003      	movs	r3, r0
 801a2c4:	b25b      	sxtb	r3, r3
 801a2c6:	2207      	movs	r2, #7
 801a2c8:	4393      	bics	r3, r2
 801a2ca:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 801a2cc:	2205      	movs	r2, #5
 801a2ce:	4313      	orrs	r3, r2
 801a2d0:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 801a2d2:	b2db      	uxtb	r3, r3
 801a2d4:	0019      	movs	r1, r3
 801a2d6:	2031      	movs	r0, #49	; 0x31
 801a2d8:	f000 fe52 	bl	801af80 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 801a2dc:	210c      	movs	r1, #12
 801a2de:	2037      	movs	r0, #55	; 0x37
 801a2e0:	f000 fe4e 	bl	801af80 <SX1276Write>
        break;
 801a2e4:	e013      	b.n	801a30e <SX1276SetTxConfig+0x476>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 801a2e6:	2031      	movs	r0, #49	; 0x31
 801a2e8:	f000 fe5b 	bl	801afa2 <SX1276Read>
 801a2ec:	0003      	movs	r3, r0
 801a2ee:	b25b      	sxtb	r3, r3
 801a2f0:	2207      	movs	r2, #7
 801a2f2:	4393      	bics	r3, r2
 801a2f4:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 801a2f6:	2203      	movs	r2, #3
 801a2f8:	4313      	orrs	r3, r2
 801a2fa:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 801a2fc:	b2db      	uxtb	r3, r3
 801a2fe:	0019      	movs	r1, r3
 801a300:	2031      	movs	r0, #49	; 0x31
 801a302:	f000 fe3d 	bl	801af80 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 801a306:	210a      	movs	r1, #10
 801a308:	2037      	movs	r0, #55	; 0x37
 801a30a:	f000 fe39 	bl	801af80 <SX1276Write>
        break;
 801a30e:	46c0      	nop			; (mov r8, r8)
}
 801a310:	46c0      	nop			; (mov r8, r8)
 801a312:	46bd      	mov	sp, r7
 801a314:	b004      	add	sp, #16
 801a316:	bc80      	pop	{r7}
 801a318:	46b8      	mov	r8, r7
 801a31a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a31c:	20001774 	.word	0x20001774

0801a320 <SX1276GetTimeOnAir>:

uint32_t SX1276GetTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                              uint32_t datarate, uint8_t coderate,
                              uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                              bool crcOn )
{
 801a320:	b590      	push	{r4, r7, lr}
 801a322:	b08b      	sub	sp, #44	; 0x2c
 801a324:	af04      	add	r7, sp, #16
 801a326:	60b9      	str	r1, [r7, #8]
 801a328:	607a      	str	r2, [r7, #4]
 801a32a:	0019      	movs	r1, r3
 801a32c:	240f      	movs	r4, #15
 801a32e:	193b      	adds	r3, r7, r4
 801a330:	1c02      	adds	r2, r0, #0
 801a332:	701a      	strb	r2, [r3, #0]
 801a334:	230e      	movs	r3, #14
 801a336:	18fb      	adds	r3, r7, r3
 801a338:	1c0a      	adds	r2, r1, #0
 801a33a:	701a      	strb	r2, [r3, #0]
    uint32_t numerator = 0;
 801a33c:	2300      	movs	r3, #0
 801a33e:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 801a340:	2301      	movs	r3, #1
 801a342:	613b      	str	r3, [r7, #16]

    switch( modem )
 801a344:	193b      	adds	r3, r7, r4
 801a346:	781b      	ldrb	r3, [r3, #0]
 801a348:	2b00      	cmp	r3, #0
 801a34a:	d002      	beq.n	801a352 <SX1276GetTimeOnAir+0x32>
 801a34c:	2b01      	cmp	r3, #1
 801a34e:	d01a      	beq.n	801a386 <SX1276GetTimeOnAir+0x66>
 801a350:	e03f      	b.n	801a3d2 <SX1276GetTimeOnAir+0xb2>
    {
    case MODEM_FSK:
        {
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 801a352:	2334      	movs	r3, #52	; 0x34
 801a354:	18fb      	adds	r3, r7, r3
 801a356:	781c      	ldrb	r4, [r3, #0]
 801a358:	2330      	movs	r3, #48	; 0x30
 801a35a:	18fb      	adds	r3, r7, r3
 801a35c:	781a      	ldrb	r2, [r3, #0]
 801a35e:	232c      	movs	r3, #44	; 0x2c
 801a360:	18fb      	adds	r3, r7, r3
 801a362:	7819      	ldrb	r1, [r3, #0]
 801a364:	2328      	movs	r3, #40	; 0x28
 801a366:	18fb      	adds	r3, r7, r3
 801a368:	8818      	ldrh	r0, [r3, #0]
 801a36a:	0023      	movs	r3, r4
 801a36c:	f000 ff7e 	bl	801b26c <SX1276GetGfskTimeOnAirNumerator>
 801a370:	0002      	movs	r2, r0
 801a372:	0013      	movs	r3, r2
 801a374:	015b      	lsls	r3, r3, #5
 801a376:	1a9b      	subs	r3, r3, r2
 801a378:	009b      	lsls	r3, r3, #2
 801a37a:	189b      	adds	r3, r3, r2
 801a37c:	00db      	lsls	r3, r3, #3
 801a37e:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 801a380:	687b      	ldr	r3, [r7, #4]
 801a382:	613b      	str	r3, [r7, #16]
        }
        break;
 801a384:	e025      	b.n	801a3d2 <SX1276GetTimeOnAir+0xb2>
    case MODEM_LORA:
        {
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 801a386:	2328      	movs	r3, #40	; 0x28
 801a388:	18fb      	adds	r3, r7, r3
 801a38a:	881c      	ldrh	r4, [r3, #0]
 801a38c:	230e      	movs	r3, #14
 801a38e:	18fb      	adds	r3, r7, r3
 801a390:	781a      	ldrb	r2, [r3, #0]
 801a392:	6879      	ldr	r1, [r7, #4]
 801a394:	68b8      	ldr	r0, [r7, #8]
 801a396:	2334      	movs	r3, #52	; 0x34
 801a398:	18fb      	adds	r3, r7, r3
 801a39a:	781b      	ldrb	r3, [r3, #0]
 801a39c:	9302      	str	r3, [sp, #8]
 801a39e:	2330      	movs	r3, #48	; 0x30
 801a3a0:	18fb      	adds	r3, r7, r3
 801a3a2:	781b      	ldrb	r3, [r3, #0]
 801a3a4:	9301      	str	r3, [sp, #4]
 801a3a6:	232c      	movs	r3, #44	; 0x2c
 801a3a8:	18fb      	adds	r3, r7, r3
 801a3aa:	781b      	ldrb	r3, [r3, #0]
 801a3ac:	9300      	str	r3, [sp, #0]
 801a3ae:	0023      	movs	r3, r4
 801a3b0:	f000 ff96 	bl	801b2e0 <SX1276GetLoRaTimeOnAirNumerator>
 801a3b4:	0002      	movs	r2, r0
 801a3b6:	0013      	movs	r3, r2
 801a3b8:	015b      	lsls	r3, r3, #5
 801a3ba:	1a9b      	subs	r3, r3, r2
 801a3bc:	009b      	lsls	r3, r3, #2
 801a3be:	189b      	adds	r3, r3, r2
 801a3c0:	00db      	lsls	r3, r3, #3
 801a3c2:	617b      	str	r3, [r7, #20]
                                                                   payloadLen, crcOn );
            denominator = SX1276GetLoRaBandwidthInHz( bandwidth );
 801a3c4:	68bb      	ldr	r3, [r7, #8]
 801a3c6:	0018      	movs	r0, r3
 801a3c8:	f000 ff1e 	bl	801b208 <SX1276GetLoRaBandwidthInHz>
 801a3cc:	0003      	movs	r3, r0
 801a3ce:	613b      	str	r3, [r7, #16]
        }
        break;
 801a3d0:	46c0      	nop			; (mov r8, r8)
    }
    // Perform integral ceil()
    return ( numerator + denominator - 1 ) / denominator;
 801a3d2:	697a      	ldr	r2, [r7, #20]
 801a3d4:	693b      	ldr	r3, [r7, #16]
 801a3d6:	18d3      	adds	r3, r2, r3
 801a3d8:	3b01      	subs	r3, #1
 801a3da:	6939      	ldr	r1, [r7, #16]
 801a3dc:	0018      	movs	r0, r3
 801a3de:	f7e5 fe9b 	bl	8000118 <__udivsi3>
 801a3e2:	0003      	movs	r3, r0
}
 801a3e4:	0018      	movs	r0, r3
 801a3e6:	46bd      	mov	sp, r7
 801a3e8:	b007      	add	sp, #28
 801a3ea:	bd90      	pop	{r4, r7, pc}

0801a3ec <SX1276Send>:

void SX1276Send( uint8_t *buffer, uint8_t size )
{
 801a3ec:	b580      	push	{r7, lr}
 801a3ee:	b084      	sub	sp, #16
 801a3f0:	af00      	add	r7, sp, #0
 801a3f2:	6078      	str	r0, [r7, #4]
 801a3f4:	000a      	movs	r2, r1
 801a3f6:	1cfb      	adds	r3, r7, #3
 801a3f8:	701a      	strb	r2, [r3, #0]
    uint32_t txTimeout = 0;
 801a3fa:	2300      	movs	r3, #0
 801a3fc:	60fb      	str	r3, [r7, #12]

    switch( SX1276.Settings.Modem )
 801a3fe:	4b59      	ldr	r3, [pc, #356]	; (801a564 <SX1276Send+0x178>)
 801a400:	795b      	ldrb	r3, [r3, #5]
 801a402:	2b00      	cmp	r3, #0
 801a404:	d002      	beq.n	801a40c <SX1276Send+0x20>
 801a406:	2b01      	cmp	r3, #1
 801a408:	d04c      	beq.n	801a4a4 <SX1276Send+0xb8>
 801a40a:	e0a2      	b.n	801a552 <SX1276Send+0x166>
    {
    case MODEM_FSK:
        {
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801a40c:	4b55      	ldr	r3, [pc, #340]	; (801a564 <SX1276Send+0x178>)
 801a40e:	2200      	movs	r2, #0
 801a410:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = size;
 801a412:	1cfb      	adds	r3, r7, #3
 801a414:	781b      	ldrb	r3, [r3, #0]
 801a416:	b29a      	uxth	r2, r3
 801a418:	4b52      	ldr	r3, [pc, #328]	; (801a564 <SX1276Send+0x178>)
 801a41a:	875a      	strh	r2, [r3, #58]	; 0x3a

            if( SX1276.Settings.Fsk.FixLen == false )
 801a41c:	4b51      	ldr	r3, [pc, #324]	; (801a564 <SX1276Send+0x178>)
 801a41e:	2222      	movs	r2, #34	; 0x22
 801a420:	5c9b      	ldrb	r3, [r3, r2]
 801a422:	2201      	movs	r2, #1
 801a424:	4053      	eors	r3, r2
 801a426:	b2db      	uxtb	r3, r3
 801a428:	2b00      	cmp	r3, #0
 801a42a:	d005      	beq.n	801a438 <SX1276Send+0x4c>
            {
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 801a42c:	1cfb      	adds	r3, r7, #3
 801a42e:	2101      	movs	r1, #1
 801a430:	0018      	movs	r0, r3
 801a432:	f000 fe31 	bl	801b098 <SX1276WriteFifo>
 801a436:	e005      	b.n	801a444 <SX1276Send+0x58>
            }
            else
            {
                SX1276Write( REG_PAYLOADLENGTH, size );
 801a438:	1cfb      	adds	r3, r7, #3
 801a43a:	781b      	ldrb	r3, [r3, #0]
 801a43c:	0019      	movs	r1, r3
 801a43e:	2032      	movs	r0, #50	; 0x32
 801a440:	f000 fd9e 	bl	801af80 <SX1276Write>
            }

            if( ( size > 0 ) && ( size <= 64 ) )
 801a444:	1cfb      	adds	r3, r7, #3
 801a446:	781b      	ldrb	r3, [r3, #0]
 801a448:	2b00      	cmp	r3, #0
 801a44a:	d009      	beq.n	801a460 <SX1276Send+0x74>
 801a44c:	1cfb      	adds	r3, r7, #3
 801a44e:	781b      	ldrb	r3, [r3, #0]
 801a450:	2b40      	cmp	r3, #64	; 0x40
 801a452:	d805      	bhi.n	801a460 <SX1276Send+0x74>
            {
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 801a454:	1cfb      	adds	r3, r7, #3
 801a456:	7819      	ldrb	r1, [r3, #0]
 801a458:	4b42      	ldr	r3, [pc, #264]	; (801a564 <SX1276Send+0x178>)
 801a45a:	223f      	movs	r2, #63	; 0x3f
 801a45c:	5499      	strb	r1, [r3, r2]
 801a45e:	e00b      	b.n	801a478 <SX1276Send+0x8c>
            }
            else
            {
                RADIO_MEMCPY8( RxTxBuffer, buffer, size );
 801a460:	1cfb      	adds	r3, r7, #3
 801a462:	781b      	ldrb	r3, [r3, #0]
 801a464:	b29a      	uxth	r2, r3
 801a466:	6879      	ldr	r1, [r7, #4]
 801a468:	4b3f      	ldr	r3, [pc, #252]	; (801a568 <SX1276Send+0x17c>)
 801a46a:	0018      	movs	r0, r3
 801a46c:	f002 f838 	bl	801c4e0 <UTIL_MEM_cpy_8>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 801a470:	4b3c      	ldr	r3, [pc, #240]	; (801a564 <SX1276Send+0x178>)
 801a472:	223f      	movs	r2, #63	; 0x3f
 801a474:	2120      	movs	r1, #32
 801a476:	5499      	strb	r1, [r3, r2]
            }

            // Write payload buffer
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 801a478:	4b3a      	ldr	r3, [pc, #232]	; (801a564 <SX1276Send+0x178>)
 801a47a:	223f      	movs	r2, #63	; 0x3f
 801a47c:	5c9a      	ldrb	r2, [r3, r2]
 801a47e:	687b      	ldr	r3, [r7, #4]
 801a480:	0011      	movs	r1, r2
 801a482:	0018      	movs	r0, r3
 801a484:	f000 fe08 	bl	801b098 <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 801a488:	4b36      	ldr	r3, [pc, #216]	; (801a564 <SX1276Send+0x178>)
 801a48a:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 801a48c:	4b35      	ldr	r3, [pc, #212]	; (801a564 <SX1276Send+0x178>)
 801a48e:	213f      	movs	r1, #63	; 0x3f
 801a490:	5c5b      	ldrb	r3, [r3, r1]
 801a492:	b29b      	uxth	r3, r3
 801a494:	18d3      	adds	r3, r2, r3
 801a496:	b29a      	uxth	r2, r3
 801a498:	4b32      	ldr	r3, [pc, #200]	; (801a564 <SX1276Send+0x178>)
 801a49a:	879a      	strh	r2, [r3, #60]	; 0x3c
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 801a49c:	4b31      	ldr	r3, [pc, #196]	; (801a564 <SX1276Send+0x178>)
 801a49e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a4a0:	60fb      	str	r3, [r7, #12]
        }
        break;
 801a4a2:	e056      	b.n	801a552 <SX1276Send+0x166>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 801a4a4:	4b2f      	ldr	r3, [pc, #188]	; (801a564 <SX1276Send+0x178>)
 801a4a6:	2255      	movs	r2, #85	; 0x55
 801a4a8:	5c9b      	ldrb	r3, [r3, r2]
 801a4aa:	2b00      	cmp	r3, #0
 801a4ac:	d011      	beq.n	801a4d2 <SX1276Send+0xe6>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 801a4ae:	2033      	movs	r0, #51	; 0x33
 801a4b0:	f000 fd77 	bl	801afa2 <SX1276Read>
 801a4b4:	0003      	movs	r3, r0
 801a4b6:	001a      	movs	r2, r3
 801a4b8:	2341      	movs	r3, #65	; 0x41
 801a4ba:	439a      	bics	r2, r3
 801a4bc:	0013      	movs	r3, r2
 801a4be:	b2db      	uxtb	r3, r3
 801a4c0:	0019      	movs	r1, r3
 801a4c2:	2033      	movs	r0, #51	; 0x33
 801a4c4:	f000 fd5c 	bl	801af80 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 801a4c8:	2119      	movs	r1, #25
 801a4ca:	203b      	movs	r0, #59	; 0x3b
 801a4cc:	f000 fd58 	bl	801af80 <SX1276Write>
 801a4d0:	e013      	b.n	801a4fa <SX1276Send+0x10e>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 801a4d2:	2033      	movs	r0, #51	; 0x33
 801a4d4:	f000 fd65 	bl	801afa2 <SX1276Read>
 801a4d8:	0003      	movs	r3, r0
 801a4da:	b25b      	sxtb	r3, r3
 801a4dc:	2241      	movs	r2, #65	; 0x41
 801a4de:	4393      	bics	r3, r2
 801a4e0:	b25b      	sxtb	r3, r3
 801a4e2:	2201      	movs	r2, #1
 801a4e4:	4313      	orrs	r3, r2
 801a4e6:	b25b      	sxtb	r3, r3
 801a4e8:	b2db      	uxtb	r3, r3
 801a4ea:	0019      	movs	r1, r3
 801a4ec:	2033      	movs	r0, #51	; 0x33
 801a4ee:	f000 fd47 	bl	801af80 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 801a4f2:	211d      	movs	r1, #29
 801a4f4:	203b      	movs	r0, #59	; 0x3b
 801a4f6:	f000 fd43 	bl	801af80 <SX1276Write>
            }

            SX1276.Settings.LoRaPacketHandler.Size = size;
 801a4fa:	1cfb      	adds	r3, r7, #3
 801a4fc:	7819      	ldrb	r1, [r3, #0]
 801a4fe:	4b19      	ldr	r3, [pc, #100]	; (801a564 <SX1276Send+0x178>)
 801a500:	2264      	movs	r2, #100	; 0x64
 801a502:	5499      	strb	r1, [r3, r2]

            // Initializes the payload size
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 801a504:	1cfb      	adds	r3, r7, #3
 801a506:	781b      	ldrb	r3, [r3, #0]
 801a508:	0019      	movs	r1, r3
 801a50a:	2022      	movs	r0, #34	; 0x22
 801a50c:	f000 fd38 	bl	801af80 <SX1276Write>

            // Full buffer used for Tx
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 801a510:	2100      	movs	r1, #0
 801a512:	200e      	movs	r0, #14
 801a514:	f000 fd34 	bl	801af80 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 801a518:	2100      	movs	r1, #0
 801a51a:	200d      	movs	r0, #13
 801a51c:	f000 fd30 	bl	801af80 <SX1276Write>

            // FIFO operations can not take place in Sleep mode
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 801a520:	2001      	movs	r0, #1
 801a522:	f000 fd3e 	bl	801afa2 <SX1276Read>
 801a526:	0003      	movs	r3, r0
 801a528:	001a      	movs	r2, r3
 801a52a:	23f8      	movs	r3, #248	; 0xf8
 801a52c:	439a      	bics	r2, r3
 801a52e:	1e13      	subs	r3, r2, #0
 801a530:	d104      	bne.n	801a53c <SX1276Send+0x150>
            {
                SX1276SetStby( );
 801a532:	f000 f94f 	bl	801a7d4 <SX1276SetStby>
                RADIO_DELAY_MS( 1 );
 801a536:	2001      	movs	r0, #1
 801a538:	f7ea fc49 	bl	8004dce <HAL_Delay>
            }
            // Write payload buffer
            SX1276WriteFifo( buffer, size );
 801a53c:	1cfb      	adds	r3, r7, #3
 801a53e:	781a      	ldrb	r2, [r3, #0]
 801a540:	687b      	ldr	r3, [r7, #4]
 801a542:	0011      	movs	r1, r2
 801a544:	0018      	movs	r0, r3
 801a546:	f000 fda7 	bl	801b098 <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 801a54a:	4b06      	ldr	r3, [pc, #24]	; (801a564 <SX1276Send+0x178>)
 801a54c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a54e:	60fb      	str	r3, [r7, #12]
        }
        break;
 801a550:	46c0      	nop			; (mov r8, r8)
    }

    SX1276SetTx( txTimeout );
 801a552:	68fb      	ldr	r3, [r7, #12]
 801a554:	0018      	movs	r0, r3
 801a556:	f000 faf3 	bl	801ab40 <SX1276SetTx>
}
 801a55a:	46c0      	nop			; (mov r8, r8)
 801a55c:	46bd      	mov	sp, r7
 801a55e:	b004      	add	sp, #16
 801a560:	bd80      	pop	{r7, pc}
 801a562:	46c0      	nop			; (mov r8, r8)
 801a564:	20001774 	.word	0x20001774
 801a568:	20000e84 	.word	0x20000e84

0801a56c <SX1276SetRfTxPower>:


static void SX1276SetRfTxPower( int8_t power )
{
 801a56c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a56e:	b085      	sub	sp, #20
 801a570:	af00      	add	r7, sp, #0
 801a572:	0002      	movs	r2, r0
 801a574:	1dfb      	adds	r3, r7, #7
 801a576:	701a      	strb	r2, [r3, #0]
    uint8_t paConfig = 0;
 801a578:	210f      	movs	r1, #15
 801a57a:	187b      	adds	r3, r7, r1
 801a57c:	2200      	movs	r2, #0
 801a57e:	701a      	strb	r2, [r3, #0]
    uint8_t paDac = 0;
 801a580:	250e      	movs	r5, #14
 801a582:	197b      	adds	r3, r7, r5
 801a584:	2200      	movs	r2, #0
 801a586:	701a      	strb	r2, [r3, #0]
    uint8_t board_config = 0;
 801a588:	260d      	movs	r6, #13
 801a58a:	19bb      	adds	r3, r7, r6
 801a58c:	2200      	movs	r2, #0
 801a58e:	701a      	strb	r2, [r3, #0]

    paConfig = SX1276Read( REG_PACONFIG );
 801a590:	187c      	adds	r4, r7, r1
 801a592:	2009      	movs	r0, #9
 801a594:	f000 fd05 	bl	801afa2 <SX1276Read>
 801a598:	0003      	movs	r3, r0
 801a59a:	7023      	strb	r3, [r4, #0]
    paDac = SX1276Read( REG_PADAC );
 801a59c:	197c      	adds	r4, r7, r5
 801a59e:	204d      	movs	r0, #77	; 0x4d
 801a5a0:	f000 fcff 	bl	801afa2 <SX1276Read>
 801a5a4:	0003      	movs	r3, r0
 801a5a6:	7023      	strb	r3, [r4, #0]
    switch( Sx_Board_GetPaSelect(SX1276.Settings.Channel) )
 801a5a8:	4b78      	ldr	r3, [pc, #480]	; (801a78c <SX1276SetRfTxPower+0x220>)
 801a5aa:	689b      	ldr	r3, [r3, #8]
 801a5ac:	0018      	movs	r0, r3
 801a5ae:	f7eb fc81 	bl	8005eb4 <CMWX1ZZABZ0XX_RADIO_GetPaSelect>
 801a5b2:	0003      	movs	r3, r0
 801a5b4:	2b03      	cmp	r3, #3
 801a5b6:	d01f      	beq.n	801a5f8 <SX1276SetRfTxPower+0x8c>
 801a5b8:	dc23      	bgt.n	801a602 <SX1276SetRfTxPower+0x96>
 801a5ba:	2b02      	cmp	r3, #2
 801a5bc:	d008      	beq.n	801a5d0 <SX1276SetRfTxPower+0x64>
 801a5be:	dc20      	bgt.n	801a602 <SX1276SetRfTxPower+0x96>
 801a5c0:	2b00      	cmp	r3, #0
 801a5c2:	d00a      	beq.n	801a5da <SX1276SetRfTxPower+0x6e>
 801a5c4:	2b01      	cmp	r3, #1
 801a5c6:	d11c      	bne.n	801a602 <SX1276SetRfTxPower+0x96>
    {
      case CONF_RFO_LP:
        board_config = RF_PACONFIG_PASELECT_RFO;
 801a5c8:	19bb      	adds	r3, r7, r6
 801a5ca:	2200      	movs	r2, #0
 801a5cc:	701a      	strb	r2, [r3, #0]
        break;
 801a5ce:	e019      	b.n	801a604 <SX1276SetRfTxPower+0x98>
      case CONF_RFO_HP:
        board_config = RF_PACONFIG_PASELECT_PABOOST;
 801a5d0:	230d      	movs	r3, #13
 801a5d2:	18fb      	adds	r3, r7, r3
 801a5d4:	2280      	movs	r2, #128	; 0x80
 801a5d6:	701a      	strb	r2, [r3, #0]
        break;
 801a5d8:	e014      	b.n	801a604 <SX1276SetRfTxPower+0x98>
      case CONF_RFO_LP_HP:
        if (power > 14)
 801a5da:	1dfb      	adds	r3, r7, #7
 801a5dc:	781b      	ldrb	r3, [r3, #0]
 801a5de:	b25b      	sxtb	r3, r3
 801a5e0:	2b0e      	cmp	r3, #14
 801a5e2:	dd04      	ble.n	801a5ee <SX1276SetRfTxPower+0x82>
        {
          board_config = RF_PACONFIG_PASELECT_PABOOST;
 801a5e4:	230d      	movs	r3, #13
 801a5e6:	18fb      	adds	r3, r7, r3
 801a5e8:	2280      	movs	r2, #128	; 0x80
 801a5ea:	701a      	strb	r2, [r3, #0]
        }
        else
        {
          board_config = RF_PACONFIG_PASELECT_RFO;
        }
        break;
 801a5ec:	e00a      	b.n	801a604 <SX1276SetRfTxPower+0x98>
          board_config = RF_PACONFIG_PASELECT_RFO;
 801a5ee:	230d      	movs	r3, #13
 801a5f0:	18fb      	adds	r3, r7, r3
 801a5f2:	2200      	movs	r2, #0
 801a5f4:	701a      	strb	r2, [r3, #0]
        break;
 801a5f6:	e005      	b.n	801a604 <SX1276SetRfTxPower+0x98>
        case CONF_RFO_LF:
          board_config=RF_PACONFIG_PASELECT_PABOOST;
 801a5f8:	230d      	movs	r3, #13
 801a5fa:	18fb      	adds	r3, r7, r3
 801a5fc:	2280      	movs	r2, #128	; 0x80
 801a5fe:	701a      	strb	r2, [r3, #0]
          break;
 801a600:	e000      	b.n	801a604 <SX1276SetRfTxPower+0x98>
        default:
        break;
 801a602:	46c0      	nop			; (mov r8, r8)
    }

    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | board_config;
 801a604:	210f      	movs	r1, #15
 801a606:	187b      	adds	r3, r7, r1
 801a608:	781b      	ldrb	r3, [r3, #0]
 801a60a:	b25b      	sxtb	r3, r3
 801a60c:	227f      	movs	r2, #127	; 0x7f
 801a60e:	4013      	ands	r3, r2
 801a610:	b25a      	sxtb	r2, r3
 801a612:	230d      	movs	r3, #13
 801a614:	18fb      	adds	r3, r7, r3
 801a616:	781b      	ldrb	r3, [r3, #0]
 801a618:	b25b      	sxtb	r3, r3
 801a61a:	4313      	orrs	r3, r2
 801a61c:	b25a      	sxtb	r2, r3
 801a61e:	187b      	adds	r3, r7, r1
 801a620:	701a      	strb	r2, [r3, #0]

    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 801a622:	187b      	adds	r3, r7, r1
 801a624:	781b      	ldrb	r3, [r3, #0]
 801a626:	b25b      	sxtb	r3, r3
 801a628:	2b00      	cmp	r3, #0
 801a62a:	da67      	bge.n	801a6fc <SX1276SetRfTxPower+0x190>
    {
        if( power > 17 )
 801a62c:	1dfb      	adds	r3, r7, #7
 801a62e:	781b      	ldrb	r3, [r3, #0]
 801a630:	b25b      	sxtb	r3, r3
 801a632:	2b11      	cmp	r3, #17
 801a634:	dd07      	ble.n	801a646 <SX1276SetRfTxPower+0xda>
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 801a636:	220e      	movs	r2, #14
 801a638:	18bb      	adds	r3, r7, r2
 801a63a:	18ba      	adds	r2, r7, r2
 801a63c:	7812      	ldrb	r2, [r2, #0]
 801a63e:	2107      	movs	r1, #7
 801a640:	430a      	orrs	r2, r1
 801a642:	701a      	strb	r2, [r3, #0]
 801a644:	e00b      	b.n	801a65e <SX1276SetRfTxPower+0xf2>
        }
        else
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 801a646:	210e      	movs	r1, #14
 801a648:	187b      	adds	r3, r7, r1
 801a64a:	781b      	ldrb	r3, [r3, #0]
 801a64c:	b25b      	sxtb	r3, r3
 801a64e:	2207      	movs	r2, #7
 801a650:	4393      	bics	r3, r2
 801a652:	b25b      	sxtb	r3, r3
 801a654:	2204      	movs	r2, #4
 801a656:	4313      	orrs	r3, r2
 801a658:	b25a      	sxtb	r2, r3
 801a65a:	187b      	adds	r3, r7, r1
 801a65c:	701a      	strb	r2, [r3, #0]
        }
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 801a65e:	230e      	movs	r3, #14
 801a660:	18fb      	adds	r3, r7, r3
 801a662:	781b      	ldrb	r3, [r3, #0]
 801a664:	2207      	movs	r2, #7
 801a666:	4013      	ands	r3, r2
 801a668:	2b07      	cmp	r3, #7
 801a66a:	d123      	bne.n	801a6b4 <SX1276SetRfTxPower+0x148>
        {
            if( power < 5 )
 801a66c:	1dfb      	adds	r3, r7, #7
 801a66e:	781b      	ldrb	r3, [r3, #0]
 801a670:	b25b      	sxtb	r3, r3
 801a672:	2b04      	cmp	r3, #4
 801a674:	dc02      	bgt.n	801a67c <SX1276SetRfTxPower+0x110>
            {
                power = 5;
 801a676:	1dfb      	adds	r3, r7, #7
 801a678:	2205      	movs	r2, #5
 801a67a:	701a      	strb	r2, [r3, #0]
            }
            if( power > 20 )
 801a67c:	1dfb      	adds	r3, r7, #7
 801a67e:	781b      	ldrb	r3, [r3, #0]
 801a680:	b25b      	sxtb	r3, r3
 801a682:	2b14      	cmp	r3, #20
 801a684:	dd02      	ble.n	801a68c <SX1276SetRfTxPower+0x120>
            {
                power = 20;
 801a686:	1dfb      	adds	r3, r7, #7
 801a688:	2214      	movs	r2, #20
 801a68a:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 801a68c:	200f      	movs	r0, #15
 801a68e:	183b      	adds	r3, r7, r0
 801a690:	781b      	ldrb	r3, [r3, #0]
 801a692:	b25b      	sxtb	r3, r3
 801a694:	220f      	movs	r2, #15
 801a696:	4393      	bics	r3, r2
 801a698:	b25a      	sxtb	r2, r3
 801a69a:	1dfb      	adds	r3, r7, #7
 801a69c:	781b      	ldrb	r3, [r3, #0]
 801a69e:	3b05      	subs	r3, #5
 801a6a0:	b2db      	uxtb	r3, r3
 801a6a2:	b25b      	sxtb	r3, r3
 801a6a4:	210f      	movs	r1, #15
 801a6a6:	400b      	ands	r3, r1
 801a6a8:	b25b      	sxtb	r3, r3
 801a6aa:	4313      	orrs	r3, r2
 801a6ac:	b25a      	sxtb	r2, r3
 801a6ae:	183b      	adds	r3, r7, r0
 801a6b0:	701a      	strb	r2, [r3, #0]
 801a6b2:	e059      	b.n	801a768 <SX1276SetRfTxPower+0x1fc>
        }
        else
        {
            if( power < 2 )
 801a6b4:	1dfb      	adds	r3, r7, #7
 801a6b6:	781b      	ldrb	r3, [r3, #0]
 801a6b8:	b25b      	sxtb	r3, r3
 801a6ba:	2b01      	cmp	r3, #1
 801a6bc:	dc02      	bgt.n	801a6c4 <SX1276SetRfTxPower+0x158>
            {
                power = 2;
 801a6be:	1dfb      	adds	r3, r7, #7
 801a6c0:	2202      	movs	r2, #2
 801a6c2:	701a      	strb	r2, [r3, #0]
            }
            if( power > 17 )
 801a6c4:	1dfb      	adds	r3, r7, #7
 801a6c6:	781b      	ldrb	r3, [r3, #0]
 801a6c8:	b25b      	sxtb	r3, r3
 801a6ca:	2b11      	cmp	r3, #17
 801a6cc:	dd02      	ble.n	801a6d4 <SX1276SetRfTxPower+0x168>
            {
                power = 17;
 801a6ce:	1dfb      	adds	r3, r7, #7
 801a6d0:	2211      	movs	r2, #17
 801a6d2:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 801a6d4:	200f      	movs	r0, #15
 801a6d6:	183b      	adds	r3, r7, r0
 801a6d8:	781b      	ldrb	r3, [r3, #0]
 801a6da:	b25b      	sxtb	r3, r3
 801a6dc:	220f      	movs	r2, #15
 801a6de:	4393      	bics	r3, r2
 801a6e0:	b25a      	sxtb	r2, r3
 801a6e2:	1dfb      	adds	r3, r7, #7
 801a6e4:	781b      	ldrb	r3, [r3, #0]
 801a6e6:	3b02      	subs	r3, #2
 801a6e8:	b2db      	uxtb	r3, r3
 801a6ea:	b25b      	sxtb	r3, r3
 801a6ec:	210f      	movs	r1, #15
 801a6ee:	400b      	ands	r3, r1
 801a6f0:	b25b      	sxtb	r3, r3
 801a6f2:	4313      	orrs	r3, r2
 801a6f4:	b25a      	sxtb	r2, r3
 801a6f6:	183b      	adds	r3, r7, r0
 801a6f8:	701a      	strb	r2, [r3, #0]
 801a6fa:	e035      	b.n	801a768 <SX1276SetRfTxPower+0x1fc>
        }
    }
    else
    {
        if( power > 0 )
 801a6fc:	1dfb      	adds	r3, r7, #7
 801a6fe:	781b      	ldrb	r3, [r3, #0]
 801a700:	b25b      	sxtb	r3, r3
 801a702:	2b00      	cmp	r3, #0
 801a704:	dd18      	ble.n	801a738 <SX1276SetRfTxPower+0x1cc>
        {
            if( power > 15 )
 801a706:	1dfb      	adds	r3, r7, #7
 801a708:	781b      	ldrb	r3, [r3, #0]
 801a70a:	b25b      	sxtb	r3, r3
 801a70c:	2b0f      	cmp	r3, #15
 801a70e:	dd02      	ble.n	801a716 <SX1276SetRfTxPower+0x1aa>
            {
                power = 15;
 801a710:	1dfb      	adds	r3, r7, #7
 801a712:	220f      	movs	r2, #15
 801a714:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
 801a716:	210f      	movs	r1, #15
 801a718:	187b      	adds	r3, r7, r1
 801a71a:	781b      	ldrb	r3, [r3, #0]
 801a71c:	b25b      	sxtb	r3, r3
 801a71e:	227f      	movs	r2, #127	; 0x7f
 801a720:	4393      	bics	r3, r2
 801a722:	b25b      	sxtb	r3, r3
 801a724:	2270      	movs	r2, #112	; 0x70
 801a726:	4313      	orrs	r3, r2
 801a728:	b25a      	sxtb	r2, r3
 801a72a:	1dfb      	adds	r3, r7, #7
 801a72c:	781b      	ldrb	r3, [r3, #0]
 801a72e:	4313      	orrs	r3, r2
 801a730:	b25a      	sxtb	r2, r3
 801a732:	187b      	adds	r3, r7, r1
 801a734:	701a      	strb	r2, [r3, #0]
 801a736:	e017      	b.n	801a768 <SX1276SetRfTxPower+0x1fc>
        }
        else
        {
            if( power < -4 )
 801a738:	1dfb      	adds	r3, r7, #7
 801a73a:	781b      	ldrb	r3, [r3, #0]
 801a73c:	b25b      	sxtb	r3, r3
 801a73e:	3304      	adds	r3, #4
 801a740:	da02      	bge.n	801a748 <SX1276SetRfTxPower+0x1dc>
            {
                power = -4;
 801a742:	1dfb      	adds	r3, r7, #7
 801a744:	22fc      	movs	r2, #252	; 0xfc
 801a746:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 801a748:	210f      	movs	r1, #15
 801a74a:	187b      	adds	r3, r7, r1
 801a74c:	781b      	ldrb	r3, [r3, #0]
 801a74e:	b25b      	sxtb	r3, r3
 801a750:	227f      	movs	r2, #127	; 0x7f
 801a752:	4393      	bics	r3, r2
 801a754:	b25a      	sxtb	r2, r3
 801a756:	1dfb      	adds	r3, r7, #7
 801a758:	781b      	ldrb	r3, [r3, #0]
 801a75a:	3304      	adds	r3, #4
 801a75c:	b2db      	uxtb	r3, r3
 801a75e:	b25b      	sxtb	r3, r3
 801a760:	4313      	orrs	r3, r2
 801a762:	b25a      	sxtb	r2, r3
 801a764:	187b      	adds	r3, r7, r1
 801a766:	701a      	strb	r2, [r3, #0]
        }
    }
    SX1276Write( REG_PACONFIG, paConfig );
 801a768:	230f      	movs	r3, #15
 801a76a:	18fb      	adds	r3, r7, r3
 801a76c:	781b      	ldrb	r3, [r3, #0]
 801a76e:	0019      	movs	r1, r3
 801a770:	2009      	movs	r0, #9
 801a772:	f000 fc05 	bl	801af80 <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 801a776:	230e      	movs	r3, #14
 801a778:	18fb      	adds	r3, r7, r3
 801a77a:	781b      	ldrb	r3, [r3, #0]
 801a77c:	0019      	movs	r1, r3
 801a77e:	204d      	movs	r0, #77	; 0x4d
 801a780:	f000 fbfe 	bl	801af80 <SX1276Write>
}
 801a784:	46c0      	nop			; (mov r8, r8)
 801a786:	46bd      	mov	sp, r7
 801a788:	b005      	add	sp, #20
 801a78a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a78c:	20001774 	.word	0x20001774

0801a790 <SX1276SetSleep>:

void SX1276SetSleep( void )
{
 801a790:	b580      	push	{r7, lr}
 801a792:	af00      	add	r7, sp, #0
	//SX1276SetOpMode( RF_OPMODE_SLEEP );   // new
    TimerStop( &RxTimeoutTimer );
 801a794:	4b0b      	ldr	r3, [pc, #44]	; (801a7c4 <SX1276SetSleep+0x34>)
 801a796:	0018      	movs	r0, r3
 801a798:	f002 fa66 	bl	801cc68 <UTIL_TIMER_Stop>
    TimerStop( &TxTimeoutTimer );
 801a79c:	4b0a      	ldr	r3, [pc, #40]	; (801a7c8 <SX1276SetSleep+0x38>)
 801a79e:	0018      	movs	r0, r3
 801a7a0:	f002 fa62 	bl	801cc68 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutSyncWord );
 801a7a4:	4b09      	ldr	r3, [pc, #36]	; (801a7cc <SX1276SetSleep+0x3c>)
 801a7a6:	0018      	movs	r0, r3
 801a7a8:	f002 fa5e 	bl	801cc68 <UTIL_TIMER_Stop>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 801a7ac:	2000      	movs	r0, #0
 801a7ae:	f000 fb20 	bl	801adf2 <SX1276SetOpMode>

    // Disable TCXO radio is in SLEEP mode
    Sx_Board_SetXO( RESET );
 801a7b2:	2000      	movs	r0, #0
 801a7b4:	f7eb f9ca 	bl	8005b4c <CMWX1ZZABZ0XX_RADIO_SetXO>

    SX1276.Settings.State = RF_IDLE;
 801a7b8:	4b05      	ldr	r3, [pc, #20]	; (801a7d0 <SX1276SetSleep+0x40>)
 801a7ba:	2200      	movs	r2, #0
 801a7bc:	711a      	strb	r2, [r3, #4]
}
 801a7be:	46c0      	nop			; (mov r8, r8)
 801a7c0:	46bd      	mov	sp, r7
 801a7c2:	bd80      	pop	{r7, pc}
 801a7c4:	200017dc 	.word	0x200017dc
 801a7c8:	20001744 	.word	0x20001744
 801a7cc:	2000175c 	.word	0x2000175c
 801a7d0:	20001774 	.word	0x20001774

0801a7d4 <SX1276SetStby>:

void SX1276SetStby( void )
{
 801a7d4:	b580      	push	{r7, lr}
 801a7d6:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 801a7d8:	4b0a      	ldr	r3, [pc, #40]	; (801a804 <SX1276SetStby+0x30>)
 801a7da:	0018      	movs	r0, r3
 801a7dc:	f002 fa44 	bl	801cc68 <UTIL_TIMER_Stop>
    TimerStop( &TxTimeoutTimer );
 801a7e0:	4b09      	ldr	r3, [pc, #36]	; (801a808 <SX1276SetStby+0x34>)
 801a7e2:	0018      	movs	r0, r3
 801a7e4:	f002 fa40 	bl	801cc68 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutSyncWord );
 801a7e8:	4b08      	ldr	r3, [pc, #32]	; (801a80c <SX1276SetStby+0x38>)
 801a7ea:	0018      	movs	r0, r3
 801a7ec:	f002 fa3c 	bl	801cc68 <UTIL_TIMER_Stop>

    SX1276SetOpMode( RF_OPMODE_STANDBY );
 801a7f0:	2001      	movs	r0, #1
 801a7f2:	f000 fafe 	bl	801adf2 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 801a7f6:	4b06      	ldr	r3, [pc, #24]	; (801a810 <SX1276SetStby+0x3c>)
 801a7f8:	2200      	movs	r2, #0
 801a7fa:	711a      	strb	r2, [r3, #4]
}
 801a7fc:	46c0      	nop			; (mov r8, r8)
 801a7fe:	46bd      	mov	sp, r7
 801a800:	bd80      	pop	{r7, pc}
 801a802:	46c0      	nop			; (mov r8, r8)
 801a804:	200017dc 	.word	0x200017dc
 801a808:	20001744 	.word	0x20001744
 801a80c:	2000175c 	.word	0x2000175c
 801a810:	20001774 	.word	0x20001774

0801a814 <SX1276SetRx>:

void SX1276SetRx( uint32_t timeout )
{
 801a814:	b580      	push	{r7, lr}
 801a816:	b084      	sub	sp, #16
 801a818:	af00      	add	r7, sp, #0
 801a81a:	6078      	str	r0, [r7, #4]
    bool rxContinuous = false;
 801a81c:	230f      	movs	r3, #15
 801a81e:	18fb      	adds	r3, r7, r3
 801a820:	2200      	movs	r2, #0
 801a822:	701a      	strb	r2, [r3, #0]
    TimerStop( &TxTimeoutTimer );
 801a824:	4bba      	ldr	r3, [pc, #744]	; (801ab10 <SX1276SetRx+0x2fc>)
 801a826:	0018      	movs	r0, r3
 801a828:	f002 fa1e 	bl	801cc68 <UTIL_TIMER_Stop>

    switch( SX1276.Settings.Modem )
 801a82c:	4bb9      	ldr	r3, [pc, #740]	; (801ab14 <SX1276SetRx+0x300>)
 801a82e:	795b      	ldrb	r3, [r3, #5]
 801a830:	2b00      	cmp	r3, #0
 801a832:	d002      	beq.n	801a83a <SX1276SetRx+0x26>
 801a834:	2b01      	cmp	r3, #1
 801a836:	d041      	beq.n	801a8bc <SX1276SetRx+0xa8>
 801a838:	e127      	b.n	801aa8a <SX1276SetRx+0x276>
    {
    case MODEM_FSK:
        {
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 801a83a:	230f      	movs	r3, #15
 801a83c:	18fb      	adds	r3, r7, r3
 801a83e:	4ab5      	ldr	r2, [pc, #724]	; (801ab14 <SX1276SetRx+0x300>)
 801a840:	2126      	movs	r1, #38	; 0x26
 801a842:	5c52      	ldrb	r2, [r2, r1]
 801a844:	701a      	strb	r2, [r3, #0]
            // DIO1=FifoLevel
            // DIO2=SyncAddr
            // DIO3=FifoEmpty
            // DIO4=Preamble
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 801a846:	2040      	movs	r0, #64	; 0x40
 801a848:	f000 fbab 	bl	801afa2 <SX1276Read>
 801a84c:	0003      	movs	r3, r0
 801a84e:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
                                                                            RF_DIOMAPPING1_DIO0_00 |
 801a850:	2203      	movs	r2, #3
 801a852:	4013      	ands	r3, r2
 801a854:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_00 |
 801a856:	220c      	movs	r2, #12
 801a858:	4313      	orrs	r3, r2
 801a85a:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 801a85c:	b2db      	uxtb	r3, r3
 801a85e:	0019      	movs	r1, r3
 801a860:	2040      	movs	r0, #64	; 0x40
 801a862:	f000 fb8d 	bl	801af80 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO2_11 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 801a866:	2041      	movs	r0, #65	; 0x41
 801a868:	f000 fb9b 	bl	801afa2 <SX1276Read>
 801a86c:	0003      	movs	r3, r0
 801a86e:	001a      	movs	r2, r3
 801a870:	233f      	movs	r3, #63	; 0x3f
 801a872:	425b      	negs	r3, r3
 801a874:	4313      	orrs	r3, r2
 801a876:	b2db      	uxtb	r3, r3
 801a878:	0019      	movs	r1, r3
 801a87a:	2041      	movs	r0, #65	; 0x41
 801a87c:	f000 fb80 	bl	801af80 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) |
                                                                            RF_DIOMAPPING2_DIO4_11 |
                                                                            RF_DIOMAPPING2_MAP_PREAMBLEDETECT );

            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 801a880:	2035      	movs	r0, #53	; 0x35
 801a882:	f000 fb8e 	bl	801afa2 <SX1276Read>
 801a886:	0003      	movs	r3, r0
 801a888:	001a      	movs	r2, r3
 801a88a:	233f      	movs	r3, #63	; 0x3f
 801a88c:	4013      	ands	r3, r2
 801a88e:	b2d9      	uxtb	r1, r3
 801a890:	4ba0      	ldr	r3, [pc, #640]	; (801ab14 <SX1276SetRx+0x300>)
 801a892:	223e      	movs	r2, #62	; 0x3e
 801a894:	5499      	strb	r1, [r3, r2]

            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 801a896:	211e      	movs	r1, #30
 801a898:	200d      	movs	r0, #13
 801a89a:	f000 fb71 	bl	801af80 <SX1276Write>

            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 801a89e:	4b9d      	ldr	r3, [pc, #628]	; (801ab14 <SX1276SetRx+0x300>)
 801a8a0:	2230      	movs	r2, #48	; 0x30
 801a8a2:	2100      	movs	r1, #0
 801a8a4:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 801a8a6:	4b9b      	ldr	r3, [pc, #620]	; (801ab14 <SX1276SetRx+0x300>)
 801a8a8:	2231      	movs	r2, #49	; 0x31
 801a8aa:	2100      	movs	r1, #0
 801a8ac:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801a8ae:	4b99      	ldr	r3, [pc, #612]	; (801ab14 <SX1276SetRx+0x300>)
 801a8b0:	2200      	movs	r2, #0
 801a8b2:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 801a8b4:	4b97      	ldr	r3, [pc, #604]	; (801ab14 <SX1276SetRx+0x300>)
 801a8b6:	2200      	movs	r2, #0
 801a8b8:	875a      	strh	r2, [r3, #58]	; 0x3a
        }
        break;
 801a8ba:	e0e6      	b.n	801aa8a <SX1276SetRx+0x276>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 801a8bc:	4b95      	ldr	r3, [pc, #596]	; (801ab14 <SX1276SetRx+0x300>)
 801a8be:	2255      	movs	r2, #85	; 0x55
 801a8c0:	5c9b      	ldrb	r3, [r3, r2]
 801a8c2:	2b00      	cmp	r3, #0
 801a8c4:	d010      	beq.n	801a8e8 <SX1276SetRx+0xd4>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 801a8c6:	2033      	movs	r0, #51	; 0x33
 801a8c8:	f000 fb6b 	bl	801afa2 <SX1276Read>
 801a8cc:	0003      	movs	r3, r0
 801a8ce:	001a      	movs	r2, r3
 801a8d0:	2341      	movs	r3, #65	; 0x41
 801a8d2:	4313      	orrs	r3, r2
 801a8d4:	b2db      	uxtb	r3, r3
 801a8d6:	0019      	movs	r1, r3
 801a8d8:	2033      	movs	r0, #51	; 0x33
 801a8da:	f000 fb51 	bl	801af80 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 801a8de:	2119      	movs	r1, #25
 801a8e0:	203b      	movs	r0, #59	; 0x3b
 801a8e2:	f000 fb4d 	bl	801af80 <SX1276Write>
 801a8e6:	e013      	b.n	801a910 <SX1276SetRx+0xfc>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 801a8e8:	2033      	movs	r0, #51	; 0x33
 801a8ea:	f000 fb5a 	bl	801afa2 <SX1276Read>
 801a8ee:	0003      	movs	r3, r0
 801a8f0:	b25b      	sxtb	r3, r3
 801a8f2:	2241      	movs	r2, #65	; 0x41
 801a8f4:	4393      	bics	r3, r2
 801a8f6:	b25b      	sxtb	r3, r3
 801a8f8:	2201      	movs	r2, #1
 801a8fa:	4313      	orrs	r3, r2
 801a8fc:	b25b      	sxtb	r3, r3
 801a8fe:	b2db      	uxtb	r3, r3
 801a900:	0019      	movs	r1, r3
 801a902:	2033      	movs	r0, #51	; 0x33
 801a904:	f000 fb3c 	bl	801af80 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 801a908:	211d      	movs	r1, #29
 801a90a:	203b      	movs	r0, #59	; 0x3b
 801a90c:	f000 fb38 	bl	801af80 <SX1276Write>
            }

            // ERRATA 2.3 - Receiver Spurious Reception of a LoRa Signal
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 801a910:	4b80      	ldr	r3, [pc, #512]	; (801ab14 <SX1276SetRx+0x300>)
 801a912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a914:	2b08      	cmp	r3, #8
 801a916:	d900      	bls.n	801a91a <SX1276SetRx+0x106>
 801a918:	e075      	b.n	801aa06 <SX1276SetRx+0x1f2>
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 801a91a:	2031      	movs	r0, #49	; 0x31
 801a91c:	f000 fb41 	bl	801afa2 <SX1276Read>
 801a920:	0003      	movs	r3, r0
 801a922:	001a      	movs	r2, r3
 801a924:	237f      	movs	r3, #127	; 0x7f
 801a926:	4013      	ands	r3, r2
 801a928:	b2db      	uxtb	r3, r3
 801a92a:	0019      	movs	r1, r3
 801a92c:	2031      	movs	r0, #49	; 0x31
 801a92e:	f000 fb27 	bl	801af80 <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 801a932:	2100      	movs	r1, #0
 801a934:	2030      	movs	r0, #48	; 0x30
 801a936:	f000 fb23 	bl	801af80 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 801a93a:	4b76      	ldr	r3, [pc, #472]	; (801ab14 <SX1276SetRx+0x300>)
 801a93c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a93e:	2b08      	cmp	r3, #8
 801a940:	d86e      	bhi.n	801aa20 <SX1276SetRx+0x20c>
 801a942:	009a      	lsls	r2, r3, #2
 801a944:	4b74      	ldr	r3, [pc, #464]	; (801ab18 <SX1276SetRx+0x304>)
 801a946:	18d3      	adds	r3, r2, r3
 801a948:	681b      	ldr	r3, [r3, #0]
 801a94a:	469f      	mov	pc, r3
                {
                case 0: // 7.8 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 801a94c:	2148      	movs	r1, #72	; 0x48
 801a94e:	202f      	movs	r0, #47	; 0x2f
 801a950:	f000 fb16 	bl	801af80 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 801a954:	4b6f      	ldr	r3, [pc, #444]	; (801ab14 <SX1276SetRx+0x300>)
 801a956:	689b      	ldr	r3, [r3, #8]
 801a958:	4a70      	ldr	r2, [pc, #448]	; (801ab1c <SX1276SetRx+0x308>)
 801a95a:	4694      	mov	ip, r2
 801a95c:	4463      	add	r3, ip
 801a95e:	0018      	movs	r0, r3
 801a960:	f7fe feb0 	bl	80196c4 <SX1276SetChannel>
                    break;
 801a964:	e05c      	b.n	801aa20 <SX1276SetRx+0x20c>
                case 1: // 10.4 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 801a966:	2144      	movs	r1, #68	; 0x44
 801a968:	202f      	movs	r0, #47	; 0x2f
 801a96a:	f000 fb09 	bl	801af80 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 801a96e:	4b69      	ldr	r3, [pc, #420]	; (801ab14 <SX1276SetRx+0x300>)
 801a970:	689b      	ldr	r3, [r3, #8]
 801a972:	4a6b      	ldr	r2, [pc, #428]	; (801ab20 <SX1276SetRx+0x30c>)
 801a974:	4694      	mov	ip, r2
 801a976:	4463      	add	r3, ip
 801a978:	0018      	movs	r0, r3
 801a97a:	f7fe fea3 	bl	80196c4 <SX1276SetChannel>
                    break;
 801a97e:	e04f      	b.n	801aa20 <SX1276SetRx+0x20c>
                case 2: // 15.6 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 801a980:	2144      	movs	r1, #68	; 0x44
 801a982:	202f      	movs	r0, #47	; 0x2f
 801a984:	f000 fafc 	bl	801af80 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 801a988:	4b62      	ldr	r3, [pc, #392]	; (801ab14 <SX1276SetRx+0x300>)
 801a98a:	689b      	ldr	r3, [r3, #8]
 801a98c:	4a65      	ldr	r2, [pc, #404]	; (801ab24 <SX1276SetRx+0x310>)
 801a98e:	4694      	mov	ip, r2
 801a990:	4463      	add	r3, ip
 801a992:	0018      	movs	r0, r3
 801a994:	f7fe fe96 	bl	80196c4 <SX1276SetChannel>
                    break;
 801a998:	e042      	b.n	801aa20 <SX1276SetRx+0x20c>
                case 3: // 20.8 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 801a99a:	2144      	movs	r1, #68	; 0x44
 801a99c:	202f      	movs	r0, #47	; 0x2f
 801a99e:	f000 faef 	bl	801af80 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 801a9a2:	4b5c      	ldr	r3, [pc, #368]	; (801ab14 <SX1276SetRx+0x300>)
 801a9a4:	689b      	ldr	r3, [r3, #8]
 801a9a6:	4a60      	ldr	r2, [pc, #384]	; (801ab28 <SX1276SetRx+0x314>)
 801a9a8:	4694      	mov	ip, r2
 801a9aa:	4463      	add	r3, ip
 801a9ac:	0018      	movs	r0, r3
 801a9ae:	f7fe fe89 	bl	80196c4 <SX1276SetChannel>
                    break;
 801a9b2:	e035      	b.n	801aa20 <SX1276SetRx+0x20c>
                case 4: // 31.2 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 801a9b4:	2144      	movs	r1, #68	; 0x44
 801a9b6:	202f      	movs	r0, #47	; 0x2f
 801a9b8:	f000 fae2 	bl	801af80 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 801a9bc:	4b55      	ldr	r3, [pc, #340]	; (801ab14 <SX1276SetRx+0x300>)
 801a9be:	689b      	ldr	r3, [r3, #8]
 801a9c0:	4a5a      	ldr	r2, [pc, #360]	; (801ab2c <SX1276SetRx+0x318>)
 801a9c2:	4694      	mov	ip, r2
 801a9c4:	4463      	add	r3, ip
 801a9c6:	0018      	movs	r0, r3
 801a9c8:	f7fe fe7c 	bl	80196c4 <SX1276SetChannel>
                    break;
 801a9cc:	e028      	b.n	801aa20 <SX1276SetRx+0x20c>
                case 5: // 41.4 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 801a9ce:	2144      	movs	r1, #68	; 0x44
 801a9d0:	202f      	movs	r0, #47	; 0x2f
 801a9d2:	f000 fad5 	bl	801af80 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 801a9d6:	4b4f      	ldr	r3, [pc, #316]	; (801ab14 <SX1276SetRx+0x300>)
 801a9d8:	689b      	ldr	r3, [r3, #8]
 801a9da:	4a55      	ldr	r2, [pc, #340]	; (801ab30 <SX1276SetRx+0x31c>)
 801a9dc:	4694      	mov	ip, r2
 801a9de:	4463      	add	r3, ip
 801a9e0:	0018      	movs	r0, r3
 801a9e2:	f7fe fe6f 	bl	80196c4 <SX1276SetChannel>
                    break;
 801a9e6:	e01b      	b.n	801aa20 <SX1276SetRx+0x20c>
                case 6: // 62.5 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 801a9e8:	2140      	movs	r1, #64	; 0x40
 801a9ea:	202f      	movs	r0, #47	; 0x2f
 801a9ec:	f000 fac8 	bl	801af80 <SX1276Write>
                    break;
 801a9f0:	e016      	b.n	801aa20 <SX1276SetRx+0x20c>
                case 7: // 125 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 801a9f2:	2140      	movs	r1, #64	; 0x40
 801a9f4:	202f      	movs	r0, #47	; 0x2f
 801a9f6:	f000 fac3 	bl	801af80 <SX1276Write>
                    break;
 801a9fa:	e011      	b.n	801aa20 <SX1276SetRx+0x20c>
                case 8: // 250 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 801a9fc:	2140      	movs	r1, #64	; 0x40
 801a9fe:	202f      	movs	r0, #47	; 0x2f
 801aa00:	f000 fabe 	bl	801af80 <SX1276Write>
                    break;
 801aa04:	e00c      	b.n	801aa20 <SX1276SetRx+0x20c>
                }
            }
            else
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 801aa06:	2031      	movs	r0, #49	; 0x31
 801aa08:	f000 facb 	bl	801afa2 <SX1276Read>
 801aa0c:	0003      	movs	r3, r0
 801aa0e:	001a      	movs	r2, r3
 801aa10:	2380      	movs	r3, #128	; 0x80
 801aa12:	425b      	negs	r3, r3
 801aa14:	4313      	orrs	r3, r2
 801aa16:	b2db      	uxtb	r3, r3
 801aa18:	0019      	movs	r1, r3
 801aa1a:	2031      	movs	r0, #49	; 0x31
 801aa1c:	f000 fab0 	bl	801af80 <SX1276Write>
            }

            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 801aa20:	230f      	movs	r3, #15
 801aa22:	18fb      	adds	r3, r7, r3
 801aa24:	4a3b      	ldr	r2, [pc, #236]	; (801ab14 <SX1276SetRx+0x300>)
 801aa26:	2156      	movs	r1, #86	; 0x56
 801aa28:	5c52      	ldrb	r2, [r2, r1]
 801aa2a:	701a      	strb	r2, [r3, #0]

            if( SX1276.Settings.LoRa.FreqHopOn == true )
 801aa2c:	4b39      	ldr	r3, [pc, #228]	; (801ab14 <SX1276SetRx+0x300>)
 801aa2e:	2253      	movs	r2, #83	; 0x53
 801aa30:	5c9b      	ldrb	r3, [r3, r2]
 801aa32:	2b00      	cmp	r3, #0
 801aa34:	d010      	beq.n	801aa58 <SX1276SetRx+0x244>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 801aa36:	211d      	movs	r1, #29
 801aa38:	2011      	movs	r0, #17
 801aa3a:	f000 faa1 	bl	801af80 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 801aa3e:	2040      	movs	r0, #64	; 0x40
 801aa40:	f000 faaf 	bl	801afa2 <SX1276Read>
 801aa44:	0003      	movs	r3, r0
 801aa46:	001a      	movs	r2, r3
 801aa48:	2333      	movs	r3, #51	; 0x33
 801aa4a:	4013      	ands	r3, r2
 801aa4c:	b2db      	uxtb	r3, r3
 801aa4e:	0019      	movs	r1, r3
 801aa50:	2040      	movs	r0, #64	; 0x40
 801aa52:	f000 fa95 	bl	801af80 <SX1276Write>
 801aa56:	e00f      	b.n	801aa78 <SX1276SetRx+0x264>
            }
            else
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 801aa58:	211f      	movs	r1, #31
 801aa5a:	2011      	movs	r0, #17
 801aa5c:	f000 fa90 	bl	801af80 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 801aa60:	2040      	movs	r0, #64	; 0x40
 801aa62:	f000 fa9e 	bl	801afa2 <SX1276Read>
 801aa66:	0003      	movs	r3, r0
 801aa68:	001a      	movs	r2, r3
 801aa6a:	233f      	movs	r3, #63	; 0x3f
 801aa6c:	4013      	ands	r3, r2
 801aa6e:	b2db      	uxtb	r3, r3
 801aa70:	0019      	movs	r1, r3
 801aa72:	2040      	movs	r0, #64	; 0x40
 801aa74:	f000 fa84 	bl	801af80 <SX1276Write>
            }
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 801aa78:	2100      	movs	r1, #0
 801aa7a:	200f      	movs	r0, #15
 801aa7c:	f000 fa80 	bl	801af80 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 801aa80:	2100      	movs	r1, #0
 801aa82:	200d      	movs	r0, #13
 801aa84:	f000 fa7c 	bl	801af80 <SX1276Write>
        }
        break;
 801aa88:	46c0      	nop			; (mov r8, r8)
    }

    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 801aa8a:	2380      	movs	r3, #128	; 0x80
 801aa8c:	005a      	lsls	r2, r3, #1
 801aa8e:	4b29      	ldr	r3, [pc, #164]	; (801ab34 <SX1276SetRx+0x320>)
 801aa90:	2100      	movs	r1, #0
 801aa92:	0018      	movs	r0, r3
 801aa94:	f003 fa41 	bl	801df1a <memset>

    SX1276.Settings.State = RF_RX_RUNNING;
 801aa98:	4b1e      	ldr	r3, [pc, #120]	; (801ab14 <SX1276SetRx+0x300>)
 801aa9a:	2201      	movs	r2, #1
 801aa9c:	711a      	strb	r2, [r3, #4]
    if( timeout != 0 )
 801aa9e:	687b      	ldr	r3, [r7, #4]
 801aaa0:	2b00      	cmp	r3, #0
 801aaa2:	d009      	beq.n	801aab8 <SX1276SetRx+0x2a4>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801aaa4:	687a      	ldr	r2, [r7, #4]
 801aaa6:	4b24      	ldr	r3, [pc, #144]	; (801ab38 <SX1276SetRx+0x324>)
 801aaa8:	0011      	movs	r1, r2
 801aaaa:	0018      	movs	r0, r3
 801aaac:	f002 f954 	bl	801cd58 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801aab0:	4b21      	ldr	r3, [pc, #132]	; (801ab38 <SX1276SetRx+0x324>)
 801aab2:	0018      	movs	r0, r3
 801aab4:	f002 f860 	bl	801cb78 <UTIL_TIMER_Start>
    }

    if( SX1276.Settings.Modem == MODEM_FSK )
 801aab8:	4b16      	ldr	r3, [pc, #88]	; (801ab14 <SX1276SetRx+0x300>)
 801aaba:	795b      	ldrb	r3, [r3, #5]
 801aabc:	2b00      	cmp	r3, #0
 801aabe:	d116      	bne.n	801aaee <SX1276SetRx+0x2da>
    {
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 801aac0:	2005      	movs	r0, #5
 801aac2:	f000 f996 	bl	801adf2 <SX1276SetOpMode>

        if( rxContinuous == false )
 801aac6:	230f      	movs	r3, #15
 801aac8:	18fb      	adds	r3, r7, r3
 801aaca:	781b      	ldrb	r3, [r3, #0]
 801aacc:	2201      	movs	r2, #1
 801aace:	4053      	eors	r3, r2
 801aad0:	b2db      	uxtb	r3, r3
 801aad2:	2b00      	cmp	r3, #0
 801aad4:	d017      	beq.n	801ab06 <SX1276SetRx+0x2f2>
        {
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 801aad6:	4b0f      	ldr	r3, [pc, #60]	; (801ab14 <SX1276SetRx+0x300>)
 801aad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801aada:	4b18      	ldr	r3, [pc, #96]	; (801ab3c <SX1276SetRx+0x328>)
 801aadc:	0011      	movs	r1, r2
 801aade:	0018      	movs	r0, r3
 801aae0:	f002 f93a 	bl	801cd58 <UTIL_TIMER_SetPeriod>
            TimerStart( &RxTimeoutSyncWord );
 801aae4:	4b15      	ldr	r3, [pc, #84]	; (801ab3c <SX1276SetRx+0x328>)
 801aae6:	0018      	movs	r0, r3
 801aae8:	f002 f846 	bl	801cb78 <UTIL_TIMER_Start>
        else
        {
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
        }
    }
}
 801aaec:	e00b      	b.n	801ab06 <SX1276SetRx+0x2f2>
        if( rxContinuous == true )
 801aaee:	230f      	movs	r3, #15
 801aaf0:	18fb      	adds	r3, r7, r3
 801aaf2:	781b      	ldrb	r3, [r3, #0]
 801aaf4:	2b00      	cmp	r3, #0
 801aaf6:	d003      	beq.n	801ab00 <SX1276SetRx+0x2ec>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 801aaf8:	2005      	movs	r0, #5
 801aafa:	f000 f97a 	bl	801adf2 <SX1276SetOpMode>
}
 801aafe:	e002      	b.n	801ab06 <SX1276SetRx+0x2f2>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 801ab00:	2006      	movs	r0, #6
 801ab02:	f000 f976 	bl	801adf2 <SX1276SetOpMode>
}
 801ab06:	46c0      	nop			; (mov r8, r8)
 801ab08:	46bd      	mov	sp, r7
 801ab0a:	b004      	add	sp, #16
 801ab0c:	bd80      	pop	{r7, pc}
 801ab0e:	46c0      	nop			; (mov r8, r8)
 801ab10:	20001744 	.word	0x20001744
 801ab14:	20001774 	.word	0x20001774
 801ab18:	0801fea0 	.word	0x0801fea0
 801ab1c:	00001e82 	.word	0x00001e82
 801ab20:	000028b4 	.word	0x000028b4
 801ab24:	00003d04 	.word	0x00003d04
 801ab28:	0000515e 	.word	0x0000515e
 801ab2c:	00007a12 	.word	0x00007a12
 801ab30:	0000a2c6 	.word	0x0000a2c6
 801ab34:	20000e84 	.word	0x20000e84
 801ab38:	200017dc 	.word	0x200017dc
 801ab3c:	2000175c 	.word	0x2000175c

0801ab40 <SX1276SetTx>:

static void SX1276SetTx( uint32_t timeout )
{
 801ab40:	b580      	push	{r7, lr}
 801ab42:	b082      	sub	sp, #8
 801ab44:	af00      	add	r7, sp, #0
 801ab46:	6078      	str	r0, [r7, #4]
    TimerStop( &RxTimeoutTimer );
 801ab48:	4b38      	ldr	r3, [pc, #224]	; (801ac2c <SX1276SetTx+0xec>)
 801ab4a:	0018      	movs	r0, r3
 801ab4c:	f002 f88c 	bl	801cc68 <UTIL_TIMER_Stop>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801ab50:	687a      	ldr	r2, [r7, #4]
 801ab52:	4b37      	ldr	r3, [pc, #220]	; (801ac30 <SX1276SetTx+0xf0>)
 801ab54:	0011      	movs	r1, r2
 801ab56:	0018      	movs	r0, r3
 801ab58:	f002 f8fe 	bl	801cd58 <UTIL_TIMER_SetPeriod>

    switch( SX1276.Settings.Modem )
 801ab5c:	4b35      	ldr	r3, [pc, #212]	; (801ac34 <SX1276SetTx+0xf4>)
 801ab5e:	795b      	ldrb	r3, [r3, #5]
 801ab60:	2b00      	cmp	r3, #0
 801ab62:	d002      	beq.n	801ab6a <SX1276SetTx+0x2a>
 801ab64:	2b01      	cmp	r3, #1
 801ab66:	d024      	beq.n	801abb2 <SX1276SetTx+0x72>
 801ab68:	e052      	b.n	801ac10 <SX1276SetTx+0xd0>
            // DIO1=FifoLevel
            // DIO2=FifoFull
            // DIO3=FifoEmpty
            // DIO4=LowBat
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 801ab6a:	2040      	movs	r0, #64	; 0x40
 801ab6c:	f000 fa19 	bl	801afa2 <SX1276Read>
 801ab70:	0003      	movs	r3, r0
 801ab72:	001a      	movs	r2, r3
 801ab74:	2303      	movs	r3, #3
 801ab76:	4013      	ands	r3, r2
 801ab78:	b2db      	uxtb	r3, r3
 801ab7a:	0019      	movs	r1, r3
 801ab7c:	2040      	movs	r0, #64	; 0x40
 801ab7e:	f000 f9ff 	bl	801af80 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 801ab82:	2041      	movs	r0, #65	; 0x41
 801ab84:	f000 fa0d 	bl	801afa2 <SX1276Read>
 801ab88:	0003      	movs	r3, r0
 801ab8a:	001a      	movs	r2, r3
 801ab8c:	233e      	movs	r3, #62	; 0x3e
 801ab8e:	4013      	ands	r3, r2
 801ab90:	b2db      	uxtb	r3, r3
 801ab92:	0019      	movs	r1, r3
 801ab94:	2041      	movs	r0, #65	; 0x41
 801ab96:	f000 f9f3 	bl	801af80 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) );
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 801ab9a:	2035      	movs	r0, #53	; 0x35
 801ab9c:	f000 fa01 	bl	801afa2 <SX1276Read>
 801aba0:	0003      	movs	r3, r0
 801aba2:	001a      	movs	r2, r3
 801aba4:	233f      	movs	r3, #63	; 0x3f
 801aba6:	4013      	ands	r3, r2
 801aba8:	b2d9      	uxtb	r1, r3
 801abaa:	4b22      	ldr	r3, [pc, #136]	; (801ac34 <SX1276SetTx+0xf4>)
 801abac:	223e      	movs	r2, #62	; 0x3e
 801abae:	5499      	strb	r1, [r3, r2]
        }
        break;
 801abb0:	e02e      	b.n	801ac10 <SX1276SetTx+0xd0>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 801abb2:	4b20      	ldr	r3, [pc, #128]	; (801ac34 <SX1276SetTx+0xf4>)
 801abb4:	2253      	movs	r2, #83	; 0x53
 801abb6:	5c9b      	ldrb	r3, [r3, r2]
 801abb8:	2b00      	cmp	r3, #0
 801abba:	d014      	beq.n	801abe6 <SX1276SetTx+0xa6>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 801abbc:	21f5      	movs	r1, #245	; 0xf5
 801abbe:	2011      	movs	r0, #17
 801abc0:	f000 f9de 	bl	801af80 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=TxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 801abc4:	2040      	movs	r0, #64	; 0x40
 801abc6:	f000 f9ec 	bl	801afa2 <SX1276Read>
 801abca:	0003      	movs	r3, r0
 801abcc:	b25b      	sxtb	r3, r3
 801abce:	2233      	movs	r2, #51	; 0x33
 801abd0:	4013      	ands	r3, r2
 801abd2:	b25b      	sxtb	r3, r3
 801abd4:	2240      	movs	r2, #64	; 0x40
 801abd6:	4313      	orrs	r3, r2
 801abd8:	b25b      	sxtb	r3, r3
 801abda:	b2db      	uxtb	r3, r3
 801abdc:	0019      	movs	r1, r3
 801abde:	2040      	movs	r0, #64	; 0x40
 801abe0:	f000 f9ce 	bl	801af80 <SX1276Write>

                // DIO0=TxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
            }
        }
        break;
 801abe4:	e013      	b.n	801ac0e <SX1276SetTx+0xce>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 801abe6:	21f7      	movs	r1, #247	; 0xf7
 801abe8:	2011      	movs	r0, #17
 801abea:	f000 f9c9 	bl	801af80 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 801abee:	2040      	movs	r0, #64	; 0x40
 801abf0:	f000 f9d7 	bl	801afa2 <SX1276Read>
 801abf4:	0003      	movs	r3, r0
 801abf6:	b25b      	sxtb	r3, r3
 801abf8:	223f      	movs	r2, #63	; 0x3f
 801abfa:	4013      	ands	r3, r2
 801abfc:	b25b      	sxtb	r3, r3
 801abfe:	2240      	movs	r2, #64	; 0x40
 801ac00:	4313      	orrs	r3, r2
 801ac02:	b25b      	sxtb	r3, r3
 801ac04:	b2db      	uxtb	r3, r3
 801ac06:	0019      	movs	r1, r3
 801ac08:	2040      	movs	r0, #64	; 0x40
 801ac0a:	f000 f9b9 	bl	801af80 <SX1276Write>
        break;
 801ac0e:	46c0      	nop			; (mov r8, r8)
    }

    SX1276.Settings.State = RF_TX_RUNNING;
 801ac10:	4b08      	ldr	r3, [pc, #32]	; (801ac34 <SX1276SetTx+0xf4>)
 801ac12:	2202      	movs	r2, #2
 801ac14:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 801ac16:	4b06      	ldr	r3, [pc, #24]	; (801ac30 <SX1276SetTx+0xf0>)
 801ac18:	0018      	movs	r0, r3
 801ac1a:	f001 ffad 	bl	801cb78 <UTIL_TIMER_Start>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 801ac1e:	2003      	movs	r0, #3
 801ac20:	f000 f8e7 	bl	801adf2 <SX1276SetOpMode>
    //  TimerStop( &TxTimeoutTimer );// новый для возможности передачи только одного сообщения 1 раз сработало а дальше гг
}
 801ac24:	46c0      	nop			; (mov r8, r8)
 801ac26:	46bd      	mov	sp, r7
 801ac28:	b002      	add	sp, #8
 801ac2a:	bd80      	pop	{r7, pc}
 801ac2c:	200017dc 	.word	0x200017dc
 801ac30:	20001744 	.word	0x20001744
 801ac34:	20001774 	.word	0x20001774

0801ac38 <SX1276StartCad>:

void SX1276StartCad( void )
{
 801ac38:	b580      	push	{r7, lr}
 801ac3a:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 801ac3c:	4b11      	ldr	r3, [pc, #68]	; (801ac84 <SX1276StartCad+0x4c>)
 801ac3e:	795b      	ldrb	r3, [r3, #5]
 801ac40:	2b00      	cmp	r3, #0
 801ac42:	d01a      	beq.n	801ac7a <SX1276StartCad+0x42>
 801ac44:	2b01      	cmp	r3, #1
 801ac46:	d000      	beq.n	801ac4a <SX1276StartCad+0x12>
            SX1276.Settings.State = RF_CAD;
            SX1276SetOpMode( RFLR_OPMODE_CAD );
        }
        break;
    default:
        break;
 801ac48:	e018      	b.n	801ac7c <SX1276StartCad+0x44>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 801ac4a:	21fa      	movs	r1, #250	; 0xfa
 801ac4c:	2011      	movs	r0, #17
 801ac4e:	f000 f997 	bl	801af80 <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 801ac52:	2040      	movs	r0, #64	; 0x40
 801ac54:	f000 f9a5 	bl	801afa2 <SX1276Read>
 801ac58:	0003      	movs	r3, r0
 801ac5a:	001a      	movs	r2, r3
 801ac5c:	2303      	movs	r3, #3
 801ac5e:	439a      	bics	r2, r3
 801ac60:	0013      	movs	r3, r2
 801ac62:	b2db      	uxtb	r3, r3
 801ac64:	0019      	movs	r1, r3
 801ac66:	2040      	movs	r0, #64	; 0x40
 801ac68:	f000 f98a 	bl	801af80 <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 801ac6c:	4b05      	ldr	r3, [pc, #20]	; (801ac84 <SX1276StartCad+0x4c>)
 801ac6e:	2203      	movs	r2, #3
 801ac70:	711a      	strb	r2, [r3, #4]
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 801ac72:	2007      	movs	r0, #7
 801ac74:	f000 f8bd 	bl	801adf2 <SX1276SetOpMode>
        break;
 801ac78:	e000      	b.n	801ac7c <SX1276StartCad+0x44>
        break;
 801ac7a:	46c0      	nop			; (mov r8, r8)
    }
}
 801ac7c:	46c0      	nop			; (mov r8, r8)
 801ac7e:	46bd      	mov	sp, r7
 801ac80:	bd80      	pop	{r7, pc}
 801ac82:	46c0      	nop			; (mov r8, r8)
 801ac84:	20001774 	.word	0x20001774

0801ac88 <SX1276SetTxContinuousWave>:

void SX1276SetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 801ac88:	b580      	push	{r7, lr}
 801ac8a:	b08e      	sub	sp, #56	; 0x38
 801ac8c:	af0a      	add	r7, sp, #40	; 0x28
 801ac8e:	6078      	str	r0, [r7, #4]
 801ac90:	0008      	movs	r0, r1
 801ac92:	0011      	movs	r1, r2
 801ac94:	1cfb      	adds	r3, r7, #3
 801ac96:	1c02      	adds	r2, r0, #0
 801ac98:	701a      	strb	r2, [r3, #0]
 801ac9a:	003b      	movs	r3, r7
 801ac9c:	1c0a      	adds	r2, r1, #0
 801ac9e:	801a      	strh	r2, [r3, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 801aca0:	003b      	movs	r3, r7
 801aca2:	881a      	ldrh	r2, [r3, #0]
 801aca4:	0013      	movs	r3, r2
 801aca6:	015b      	lsls	r3, r3, #5
 801aca8:	1a9b      	subs	r3, r3, r2
 801acaa:	009b      	lsls	r3, r3, #2
 801acac:	189b      	adds	r3, r3, r2
 801acae:	00db      	lsls	r3, r3, #3
 801acb0:	60fb      	str	r3, [r7, #12]

    SX1276SetChannel( freq );
 801acb2:	687b      	ldr	r3, [r7, #4]
 801acb4:	0018      	movs	r0, r3
 801acb6:	f7fe fd05 	bl	80196c4 <SX1276SetChannel>

    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 801acba:	1cfb      	adds	r3, r7, #3
 801acbc:	2100      	movs	r1, #0
 801acbe:	5659      	ldrsb	r1, [r3, r1]
 801acc0:	68fb      	ldr	r3, [r7, #12]
 801acc2:	9308      	str	r3, [sp, #32]
 801acc4:	2300      	movs	r3, #0
 801acc6:	9307      	str	r3, [sp, #28]
 801acc8:	2300      	movs	r3, #0
 801acca:	9306      	str	r3, [sp, #24]
 801accc:	2300      	movs	r3, #0
 801acce:	9305      	str	r3, [sp, #20]
 801acd0:	2300      	movs	r3, #0
 801acd2:	9304      	str	r3, [sp, #16]
 801acd4:	2300      	movs	r3, #0
 801acd6:	9303      	str	r3, [sp, #12]
 801acd8:	2305      	movs	r3, #5
 801acda:	9302      	str	r3, [sp, #8]
 801acdc:	2300      	movs	r3, #0
 801acde:	9301      	str	r3, [sp, #4]
 801ace0:	2396      	movs	r3, #150	; 0x96
 801ace2:	015b      	lsls	r3, r3, #5
 801ace4:	9300      	str	r3, [sp, #0]
 801ace6:	2300      	movs	r3, #0
 801ace8:	2200      	movs	r2, #0
 801acea:	2000      	movs	r0, #0
 801acec:	f7ff f8d4 	bl	8019e98 <SX1276SetTxConfig>

    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 801acf0:	2031      	movs	r0, #49	; 0x31
 801acf2:	f000 f956 	bl	801afa2 <SX1276Read>
 801acf6:	0003      	movs	r3, r0
 801acf8:	001a      	movs	r2, r3
 801acfa:	2340      	movs	r3, #64	; 0x40
 801acfc:	439a      	bics	r2, r3
 801acfe:	0013      	movs	r3, r2
 801ad00:	b2db      	uxtb	r3, r3
 801ad02:	0019      	movs	r1, r3
 801ad04:	2031      	movs	r0, #49	; 0x31
 801ad06:	f000 f93b 	bl	801af80 <SX1276Write>
    // Disable radio interrupts
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 801ad0a:	21f0      	movs	r1, #240	; 0xf0
 801ad0c:	2040      	movs	r0, #64	; 0x40
 801ad0e:	f000 f937 	bl	801af80 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 801ad12:	21a0      	movs	r1, #160	; 0xa0
 801ad14:	2041      	movs	r0, #65	; 0x41
 801ad16:	f000 f933 	bl	801af80 <SX1276Write>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801ad1a:	68fa      	ldr	r2, [r7, #12]
 801ad1c:	4b09      	ldr	r3, [pc, #36]	; (801ad44 <SX1276SetTxContinuousWave+0xbc>)
 801ad1e:	0011      	movs	r1, r2
 801ad20:	0018      	movs	r0, r3
 801ad22:	f002 f819 	bl	801cd58 <UTIL_TIMER_SetPeriod>

    SX1276.Settings.State = RF_TX_RUNNING;
 801ad26:	4b08      	ldr	r3, [pc, #32]	; (801ad48 <SX1276SetTxContinuousWave+0xc0>)
 801ad28:	2202      	movs	r2, #2
 801ad2a:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 801ad2c:	4b05      	ldr	r3, [pc, #20]	; (801ad44 <SX1276SetTxContinuousWave+0xbc>)
 801ad2e:	0018      	movs	r0, r3
 801ad30:	f001 ff22 	bl	801cb78 <UTIL_TIMER_Start>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 801ad34:	2003      	movs	r0, #3
 801ad36:	f000 f85c 	bl	801adf2 <SX1276SetOpMode>
}
 801ad3a:	46c0      	nop			; (mov r8, r8)
 801ad3c:	46bd      	mov	sp, r7
 801ad3e:	b004      	add	sp, #16
 801ad40:	bd80      	pop	{r7, pc}
 801ad42:	46c0      	nop			; (mov r8, r8)
 801ad44:	20001744 	.word	0x20001744
 801ad48:	20001774 	.word	0x20001774

0801ad4c <SX1276ReadRssi>:

int16_t SX1276ReadRssi( RadioModems_t modem )
{
 801ad4c:	b580      	push	{r7, lr}
 801ad4e:	b084      	sub	sp, #16
 801ad50:	af00      	add	r7, sp, #0
 801ad52:	0002      	movs	r2, r0
 801ad54:	1dfb      	adds	r3, r7, #7
 801ad56:	701a      	strb	r2, [r3, #0]
    int16_t rssi = 0;
 801ad58:	230e      	movs	r3, #14
 801ad5a:	18fb      	adds	r3, r7, r3
 801ad5c:	2200      	movs	r2, #0
 801ad5e:	801a      	strh	r2, [r3, #0]

    switch( modem )
 801ad60:	1dfb      	adds	r3, r7, #7
 801ad62:	781b      	ldrb	r3, [r3, #0]
 801ad64:	2b00      	cmp	r3, #0
 801ad66:	d002      	beq.n	801ad6e <SX1276ReadRssi+0x22>
 801ad68:	2b01      	cmp	r3, #1
 801ad6a:	d00d      	beq.n	801ad88 <SX1276ReadRssi+0x3c>
 801ad6c:	e027      	b.n	801adbe <SX1276ReadRssi+0x72>
    {
    case MODEM_FSK:
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 801ad6e:	2011      	movs	r0, #17
 801ad70:	f000 f917 	bl	801afa2 <SX1276Read>
 801ad74:	0003      	movs	r3, r0
 801ad76:	085b      	lsrs	r3, r3, #1
 801ad78:	b2db      	uxtb	r3, r3
 801ad7a:	b29b      	uxth	r3, r3
 801ad7c:	425b      	negs	r3, r3
 801ad7e:	b29a      	uxth	r2, r3
 801ad80:	230e      	movs	r3, #14
 801ad82:	18fb      	adds	r3, r7, r3
 801ad84:	801a      	strh	r2, [r3, #0]
        break;
 801ad86:	e020      	b.n	801adca <SX1276ReadRssi+0x7e>
    case MODEM_LORA:
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 801ad88:	4b14      	ldr	r3, [pc, #80]	; (801addc <SX1276ReadRssi+0x90>)
 801ad8a:	689b      	ldr	r3, [r3, #8]
 801ad8c:	4a14      	ldr	r2, [pc, #80]	; (801ade0 <SX1276ReadRssi+0x94>)
 801ad8e:	4293      	cmp	r3, r2
 801ad90:	d90a      	bls.n	801ada8 <SX1276ReadRssi+0x5c>
        {
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 801ad92:	201b      	movs	r0, #27
 801ad94:	f000 f905 	bl	801afa2 <SX1276Read>
 801ad98:	0003      	movs	r3, r0
 801ad9a:	b29b      	uxth	r3, r3
 801ad9c:	3b9d      	subs	r3, #157	; 0x9d
 801ad9e:	b29a      	uxth	r2, r3
 801ada0:	230e      	movs	r3, #14
 801ada2:	18fb      	adds	r3, r7, r3
 801ada4:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
        }
        break;
 801ada6:	e010      	b.n	801adca <SX1276ReadRssi+0x7e>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 801ada8:	201b      	movs	r0, #27
 801adaa:	f000 f8fa 	bl	801afa2 <SX1276Read>
 801adae:	0003      	movs	r3, r0
 801adb0:	b29b      	uxth	r3, r3
 801adb2:	3ba4      	subs	r3, #164	; 0xa4
 801adb4:	b29a      	uxth	r2, r3
 801adb6:	230e      	movs	r3, #14
 801adb8:	18fb      	adds	r3, r7, r3
 801adba:	801a      	strh	r2, [r3, #0]
        break;
 801adbc:	e005      	b.n	801adca <SX1276ReadRssi+0x7e>
    default:
        rssi = -1;
 801adbe:	230e      	movs	r3, #14
 801adc0:	18fb      	adds	r3, r7, r3
 801adc2:	2201      	movs	r2, #1
 801adc4:	4252      	negs	r2, r2
 801adc6:	801a      	strh	r2, [r3, #0]
        break;
 801adc8:	46c0      	nop			; (mov r8, r8)
    }
    return rssi;
 801adca:	230e      	movs	r3, #14
 801adcc:	18fb      	adds	r3, r7, r3
 801adce:	2200      	movs	r2, #0
 801add0:	5e9b      	ldrsh	r3, [r3, r2]
}
 801add2:	0018      	movs	r0, r3
 801add4:	46bd      	mov	sp, r7
 801add6:	b004      	add	sp, #16
 801add8:	bd80      	pop	{r7, pc}
 801adda:	46c0      	nop			; (mov r8, r8)
 801addc:	20001774 	.word	0x20001774
 801ade0:	1f4add40 	.word	0x1f4add40

0801ade4 <SX1276Reset>:

static void SX1276Reset( void )
{
 801ade4:	b580      	push	{r7, lr}
 801ade6:	af00      	add	r7, sp, #0
    Sx_Board_Reset();
 801ade8:	f7eb f8ce 	bl	8005f88 <CMWX1ZZABZ0XX_RADIO_Reset>
  
}
 801adec:	46c0      	nop			; (mov r8, r8)
 801adee:	46bd      	mov	sp, r7
 801adf0:	bd80      	pop	{r7, pc}

0801adf2 <SX1276SetOpMode>:

static void SX1276SetOpMode( uint8_t opMode )
{
 801adf2:	b5b0      	push	{r4, r5, r7, lr}
 801adf4:	b084      	sub	sp, #16
 801adf6:	af00      	add	r7, sp, #0
 801adf8:	0002      	movs	r2, r0
 801adfa:	1dfb      	adds	r3, r7, #7
 801adfc:	701a      	strb	r2, [r3, #0]
    if( opMode == RF_OPMODE_SLEEP )
 801adfe:	1dfb      	adds	r3, r7, #7
 801ae00:	781b      	ldrb	r3, [r3, #0]
 801ae02:	2b00      	cmp	r3, #0
 801ae04:	d118      	bne.n	801ae38 <SX1276SetOpMode+0x46>
    {
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 801ae06:	2001      	movs	r0, #1
 801ae08:	f000 f8cb 	bl	801afa2 <SX1276Read>
 801ae0c:	0003      	movs	r3, r0
 801ae0e:	b25b      	sxtb	r3, r3
 801ae10:	2207      	movs	r2, #7
 801ae12:	4393      	bics	r3, r2
 801ae14:	b25a      	sxtb	r2, r3
 801ae16:	1dfb      	adds	r3, r7, #7
 801ae18:	781b      	ldrb	r3, [r3, #0]
 801ae1a:	b25b      	sxtb	r3, r3
 801ae1c:	4313      	orrs	r3, r2
 801ae1e:	b25b      	sxtb	r3, r3
 801ae20:	b2db      	uxtb	r3, r3
 801ae22:	0019      	movs	r1, r3
 801ae24:	2001      	movs	r0, #1
 801ae26:	f000 f8ab 	bl	801af80 <SX1276Write>

      Sx_Board_SetAntSw( RFSW_OFF );
 801ae2a:	2000      	movs	r0, #0
 801ae2c:	f7eb f84c 	bl	8005ec8 <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      
      Sx_Board_SetXO( RESET ); 
 801ae30:	2000      	movs	r0, #0
 801ae32:	f7ea fe8b 	bl	8005b4c <CMWX1ZZABZ0XX_RADIO_SetXO>
        Sx_Board_SetAntSw( RFSW_RFO_LP );
      }
      
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
    }
}
 801ae36:	e044      	b.n	801aec2 <SX1276SetOpMode+0xd0>
    else if ( opMode == RF_OPMODE_RECEIVER )
 801ae38:	1dfb      	adds	r3, r7, #7
 801ae3a:	781b      	ldrb	r3, [r3, #0]
 801ae3c:	2b05      	cmp	r3, #5
 801ae3e:	d118      	bne.n	801ae72 <SX1276SetOpMode+0x80>
      Sx_Board_SetXO( SET ); 
 801ae40:	2001      	movs	r0, #1
 801ae42:	f7ea fe83 	bl	8005b4c <CMWX1ZZABZ0XX_RADIO_SetXO>
      Sx_Board_SetAntSw( RFSW_RX );
 801ae46:	2001      	movs	r0, #1
 801ae48:	f7eb f83e 	bl	8005ec8 <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 801ae4c:	2001      	movs	r0, #1
 801ae4e:	f000 f8a8 	bl	801afa2 <SX1276Read>
 801ae52:	0003      	movs	r3, r0
 801ae54:	b25b      	sxtb	r3, r3
 801ae56:	2207      	movs	r2, #7
 801ae58:	4393      	bics	r3, r2
 801ae5a:	b25a      	sxtb	r2, r3
 801ae5c:	1dfb      	adds	r3, r7, #7
 801ae5e:	781b      	ldrb	r3, [r3, #0]
 801ae60:	b25b      	sxtb	r3, r3
 801ae62:	4313      	orrs	r3, r2
 801ae64:	b25b      	sxtb	r3, r3
 801ae66:	b2db      	uxtb	r3, r3
 801ae68:	0019      	movs	r1, r3
 801ae6a:	2001      	movs	r0, #1
 801ae6c:	f000 f888 	bl	801af80 <SX1276Write>
}
 801ae70:	e027      	b.n	801aec2 <SX1276SetOpMode+0xd0>
      uint8_t paConfig =  SX1276Read( REG_PACONFIG );
 801ae72:	250f      	movs	r5, #15
 801ae74:	197c      	adds	r4, r7, r5
 801ae76:	2009      	movs	r0, #9
 801ae78:	f000 f893 	bl	801afa2 <SX1276Read>
 801ae7c:	0003      	movs	r3, r0
 801ae7e:	7023      	strb	r3, [r4, #0]
      Sx_Board_SetXO( SET ); 
 801ae80:	2001      	movs	r0, #1
 801ae82:	f7ea fe63 	bl	8005b4c <CMWX1ZZABZ0XX_RADIO_SetXO>
      if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 801ae86:	197b      	adds	r3, r7, r5
 801ae88:	781b      	ldrb	r3, [r3, #0]
 801ae8a:	b25b      	sxtb	r3, r3
 801ae8c:	2b00      	cmp	r3, #0
 801ae8e:	da03      	bge.n	801ae98 <SX1276SetOpMode+0xa6>
        Sx_Board_SetAntSw( RFSW_RFO_HP );
 801ae90:	2003      	movs	r0, #3
 801ae92:	f7eb f819 	bl	8005ec8 <CMWX1ZZABZ0XX_RADIO_SetAntSw>
 801ae96:	e002      	b.n	801ae9e <SX1276SetOpMode+0xac>
        Sx_Board_SetAntSw( RFSW_RFO_LP );
 801ae98:	2002      	movs	r0, #2
 801ae9a:	f7eb f815 	bl	8005ec8 <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 801ae9e:	2001      	movs	r0, #1
 801aea0:	f000 f87f 	bl	801afa2 <SX1276Read>
 801aea4:	0003      	movs	r3, r0
 801aea6:	b25b      	sxtb	r3, r3
 801aea8:	2207      	movs	r2, #7
 801aeaa:	4393      	bics	r3, r2
 801aeac:	b25a      	sxtb	r2, r3
 801aeae:	1dfb      	adds	r3, r7, #7
 801aeb0:	781b      	ldrb	r3, [r3, #0]
 801aeb2:	b25b      	sxtb	r3, r3
 801aeb4:	4313      	orrs	r3, r2
 801aeb6:	b25b      	sxtb	r3, r3
 801aeb8:	b2db      	uxtb	r3, r3
 801aeba:	0019      	movs	r1, r3
 801aebc:	2001      	movs	r0, #1
 801aebe:	f000 f85f 	bl	801af80 <SX1276Write>
}
 801aec2:	46c0      	nop			; (mov r8, r8)
 801aec4:	46bd      	mov	sp, r7
 801aec6:	b004      	add	sp, #16
 801aec8:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801aecc <SX1276SetModem>:

void SX1276SetModem( RadioModems_t modem )
{
 801aecc:	b580      	push	{r7, lr}
 801aece:	b082      	sub	sp, #8
 801aed0:	af00      	add	r7, sp, #0
 801aed2:	0002      	movs	r2, r0
 801aed4:	1dfb      	adds	r3, r7, #7
 801aed6:	701a      	strb	r2, [r3, #0]
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 801aed8:	2001      	movs	r0, #1
 801aeda:	f000 f862 	bl	801afa2 <SX1276Read>
 801aede:	0003      	movs	r3, r0
 801aee0:	b25b      	sxtb	r3, r3
 801aee2:	2b00      	cmp	r3, #0
 801aee4:	da03      	bge.n	801aeee <SX1276SetModem+0x22>
    {
        SX1276.Settings.Modem = MODEM_LORA;
 801aee6:	4b25      	ldr	r3, [pc, #148]	; (801af7c <SX1276SetModem+0xb0>)
 801aee8:	2201      	movs	r2, #1
 801aeea:	715a      	strb	r2, [r3, #5]
 801aeec:	e002      	b.n	801aef4 <SX1276SetModem+0x28>
    }
    else
    {
        SX1276.Settings.Modem = MODEM_FSK;
 801aeee:	4b23      	ldr	r3, [pc, #140]	; (801af7c <SX1276SetModem+0xb0>)
 801aef0:	2200      	movs	r2, #0
 801aef2:	715a      	strb	r2, [r3, #5]
    }

    if( SX1276.Settings.Modem == modem )
 801aef4:	4b21      	ldr	r3, [pc, #132]	; (801af7c <SX1276SetModem+0xb0>)
 801aef6:	795b      	ldrb	r3, [r3, #5]
 801aef8:	1dfa      	adds	r2, r7, #7
 801aefa:	7812      	ldrb	r2, [r2, #0]
 801aefc:	429a      	cmp	r2, r3
 801aefe:	d038      	beq.n	801af72 <SX1276SetModem+0xa6>
    {
        return;
    }

    SX1276.Settings.Modem = modem;
 801af00:	4b1e      	ldr	r3, [pc, #120]	; (801af7c <SX1276SetModem+0xb0>)
 801af02:	1dfa      	adds	r2, r7, #7
 801af04:	7812      	ldrb	r2, [r2, #0]
 801af06:	715a      	strb	r2, [r3, #5]
    switch( SX1276.Settings.Modem )
 801af08:	4b1c      	ldr	r3, [pc, #112]	; (801af7c <SX1276SetModem+0xb0>)
 801af0a:	795b      	ldrb	r3, [r3, #5]
 801af0c:	2b01      	cmp	r3, #1
 801af0e:	d017      	beq.n	801af40 <SX1276SetModem+0x74>
    {
    default:
    case MODEM_FSK:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 801af10:	2000      	movs	r0, #0
 801af12:	f7ff ff6e 	bl	801adf2 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 801af16:	2001      	movs	r0, #1
 801af18:	f000 f843 	bl	801afa2 <SX1276Read>
 801af1c:	0003      	movs	r3, r0
 801af1e:	001a      	movs	r2, r3
 801af20:	237f      	movs	r3, #127	; 0x7f
 801af22:	4013      	ands	r3, r2
 801af24:	b2db      	uxtb	r3, r3
 801af26:	0019      	movs	r1, r3
 801af28:	2001      	movs	r0, #1
 801af2a:	f000 f829 	bl	801af80 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 801af2e:	2100      	movs	r1, #0
 801af30:	2040      	movs	r0, #64	; 0x40
 801af32:	f000 f825 	bl	801af80 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 801af36:	2130      	movs	r1, #48	; 0x30
 801af38:	2041      	movs	r0, #65	; 0x41
 801af3a:	f000 f821 	bl	801af80 <SX1276Write>
        break;
 801af3e:	e019      	b.n	801af74 <SX1276SetModem+0xa8>
    case MODEM_LORA:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 801af40:	2000      	movs	r0, #0
 801af42:	f7ff ff56 	bl	801adf2 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 801af46:	2001      	movs	r0, #1
 801af48:	f000 f82b 	bl	801afa2 <SX1276Read>
 801af4c:	0003      	movs	r3, r0
 801af4e:	001a      	movs	r2, r3
 801af50:	2380      	movs	r3, #128	; 0x80
 801af52:	425b      	negs	r3, r3
 801af54:	4313      	orrs	r3, r2
 801af56:	b2db      	uxtb	r3, r3
 801af58:	0019      	movs	r1, r3
 801af5a:	2001      	movs	r0, #1
 801af5c:	f000 f810 	bl	801af80 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 801af60:	2100      	movs	r1, #0
 801af62:	2040      	movs	r0, #64	; 0x40
 801af64:	f000 f80c 	bl	801af80 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 801af68:	2100      	movs	r1, #0
 801af6a:	2041      	movs	r0, #65	; 0x41
 801af6c:	f000 f808 	bl	801af80 <SX1276Write>
        break;
 801af70:	e000      	b.n	801af74 <SX1276SetModem+0xa8>
        return;
 801af72:	46c0      	nop			; (mov r8, r8)
    }
}
 801af74:	46bd      	mov	sp, r7
 801af76:	b002      	add	sp, #8
 801af78:	bd80      	pop	{r7, pc}
 801af7a:	46c0      	nop			; (mov r8, r8)
 801af7c:	20001774 	.word	0x20001774

0801af80 <SX1276Write>:

void SX1276Write( uint32_t addr, uint8_t data )
{
 801af80:	b580      	push	{r7, lr}
 801af82:	b082      	sub	sp, #8
 801af84:	af00      	add	r7, sp, #0
 801af86:	6078      	str	r0, [r7, #4]
 801af88:	000a      	movs	r2, r1
 801af8a:	1cfb      	adds	r3, r7, #3
 801af8c:	701a      	strb	r2, [r3, #0]
    SX1276WriteBuffer( addr, &data, 1 );
 801af8e:	1cf9      	adds	r1, r7, #3
 801af90:	687b      	ldr	r3, [r7, #4]
 801af92:	2201      	movs	r2, #1
 801af94:	0018      	movs	r0, r3
 801af96:	f000 f815 	bl	801afc4 <SX1276WriteBuffer>
}
 801af9a:	46c0      	nop			; (mov r8, r8)
 801af9c:	46bd      	mov	sp, r7
 801af9e:	b002      	add	sp, #8
 801afa0:	bd80      	pop	{r7, pc}

0801afa2 <SX1276Read>:

uint8_t SX1276Read( uint32_t addr )
{
 801afa2:	b590      	push	{r4, r7, lr}
 801afa4:	b085      	sub	sp, #20
 801afa6:	af00      	add	r7, sp, #0
 801afa8:	6078      	str	r0, [r7, #4]
    uint8_t data;
    SX1276ReadBuffer( addr, &data, 1 );
 801afaa:	240f      	movs	r4, #15
 801afac:	1939      	adds	r1, r7, r4
 801afae:	687b      	ldr	r3, [r7, #4]
 801afb0:	2201      	movs	r2, #1
 801afb2:	0018      	movs	r0, r3
 801afb4:	f000 f83a 	bl	801b02c <SX1276ReadBuffer>
    return data;
 801afb8:	193b      	adds	r3, r7, r4
 801afba:	781b      	ldrb	r3, [r3, #0]
}
 801afbc:	0018      	movs	r0, r3
 801afbe:	46bd      	mov	sp, r7
 801afc0:	b005      	add	sp, #20
 801afc2:	bd90      	pop	{r4, r7, pc}

0801afc4 <SX1276WriteBuffer>:

void SX1276WriteBuffer( uint32_t addr, uint8_t *buffer, uint8_t size )
{
 801afc4:	b590      	push	{r4, r7, lr}
 801afc6:	b087      	sub	sp, #28
 801afc8:	af00      	add	r7, sp, #0
 801afca:	60f8      	str	r0, [r7, #12]
 801afcc:	60b9      	str	r1, [r7, #8]
 801afce:	1dfb      	adds	r3, r7, #7
 801afd0:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    //NSS = 0;
    Sx_Board_ChipSelect( 0 );
 801afd2:	2000      	movs	r0, #0
 801afd4:	f7eb f82a 	bl	800602c <CMWX1ZZABZ0XX_RADIO_ChipSelect>

    Sx_Board_SendRecv( addr | 0x80 );
 801afd8:	68fb      	ldr	r3, [r7, #12]
 801afda:	b29b      	uxth	r3, r3
 801afdc:	2280      	movs	r2, #128	; 0x80
 801afde:	4313      	orrs	r3, r2
 801afe0:	b29b      	uxth	r3, r3
 801afe2:	0018      	movs	r0, r3
 801afe4:	f7eb f80f 	bl	8006006 <CMWX1ZZABZ0XX_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 801afe8:	2317      	movs	r3, #23
 801afea:	18fb      	adds	r3, r7, r3
 801afec:	2200      	movs	r2, #0
 801afee:	701a      	strb	r2, [r3, #0]
 801aff0:	e00e      	b.n	801b010 <SX1276WriteBuffer+0x4c>
    {
        Sx_Board_SendRecv( buffer[i] );
 801aff2:	2417      	movs	r4, #23
 801aff4:	193b      	adds	r3, r7, r4
 801aff6:	781b      	ldrb	r3, [r3, #0]
 801aff8:	68ba      	ldr	r2, [r7, #8]
 801affa:	18d3      	adds	r3, r2, r3
 801affc:	781b      	ldrb	r3, [r3, #0]
 801affe:	b29b      	uxth	r3, r3
 801b000:	0018      	movs	r0, r3
 801b002:	f7eb f800 	bl	8006006 <CMWX1ZZABZ0XX_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 801b006:	193b      	adds	r3, r7, r4
 801b008:	781a      	ldrb	r2, [r3, #0]
 801b00a:	193b      	adds	r3, r7, r4
 801b00c:	3201      	adds	r2, #1
 801b00e:	701a      	strb	r2, [r3, #0]
 801b010:	2317      	movs	r3, #23
 801b012:	18fa      	adds	r2, r7, r3
 801b014:	1dfb      	adds	r3, r7, #7
 801b016:	7812      	ldrb	r2, [r2, #0]
 801b018:	781b      	ldrb	r3, [r3, #0]
 801b01a:	429a      	cmp	r2, r3
 801b01c:	d3e9      	bcc.n	801aff2 <SX1276WriteBuffer+0x2e>
    }

    //NSS = 1;
    Sx_Board_ChipSelect( 1 );
 801b01e:	2001      	movs	r0, #1
 801b020:	f7eb f804 	bl	800602c <CMWX1ZZABZ0XX_RADIO_ChipSelect>
}
 801b024:	46c0      	nop			; (mov r8, r8)
 801b026:	46bd      	mov	sp, r7
 801b028:	b007      	add	sp, #28
 801b02a:	bd90      	pop	{r4, r7, pc}

0801b02c <SX1276ReadBuffer>:

void SX1276ReadBuffer( uint32_t addr, uint8_t *buffer, uint8_t size )
{
 801b02c:	b580      	push	{r7, lr}
 801b02e:	b086      	sub	sp, #24
 801b030:	af00      	add	r7, sp, #0
 801b032:	60f8      	str	r0, [r7, #12]
 801b034:	60b9      	str	r1, [r7, #8]
 801b036:	1dfb      	adds	r3, r7, #7
 801b038:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    //NSS = 0;
    Sx_Board_ChipSelect( 0 );
 801b03a:	2000      	movs	r0, #0
 801b03c:	f7ea fff6 	bl	800602c <CMWX1ZZABZ0XX_RADIO_ChipSelect>

    Sx_Board_SendRecv( addr & 0x7F );
 801b040:	68fb      	ldr	r3, [r7, #12]
 801b042:	b29b      	uxth	r3, r3
 801b044:	227f      	movs	r2, #127	; 0x7f
 801b046:	4013      	ands	r3, r2
 801b048:	b29b      	uxth	r3, r3
 801b04a:	0018      	movs	r0, r3
 801b04c:	f7ea ffdb 	bl	8006006 <CMWX1ZZABZ0XX_RADIO_SendRecv>

    for( i = 0; i < size; i++ )
 801b050:	2317      	movs	r3, #23
 801b052:	18fb      	adds	r3, r7, r3
 801b054:	2200      	movs	r2, #0
 801b056:	701a      	strb	r2, [r3, #0]
 801b058:	e010      	b.n	801b07c <SX1276ReadBuffer+0x50>
    {
        buffer[i] = Sx_Board_SendRecv( 0 );
 801b05a:	2000      	movs	r0, #0
 801b05c:	f7ea ffd3 	bl	8006006 <CMWX1ZZABZ0XX_RADIO_SendRecv>
 801b060:	0003      	movs	r3, r0
 801b062:	0019      	movs	r1, r3
 801b064:	2017      	movs	r0, #23
 801b066:	183b      	adds	r3, r7, r0
 801b068:	781b      	ldrb	r3, [r3, #0]
 801b06a:	68ba      	ldr	r2, [r7, #8]
 801b06c:	18d3      	adds	r3, r2, r3
 801b06e:	b2ca      	uxtb	r2, r1
 801b070:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 801b072:	183b      	adds	r3, r7, r0
 801b074:	781a      	ldrb	r2, [r3, #0]
 801b076:	183b      	adds	r3, r7, r0
 801b078:	3201      	adds	r2, #1
 801b07a:	701a      	strb	r2, [r3, #0]
 801b07c:	2317      	movs	r3, #23
 801b07e:	18fa      	adds	r2, r7, r3
 801b080:	1dfb      	adds	r3, r7, #7
 801b082:	7812      	ldrb	r2, [r2, #0]
 801b084:	781b      	ldrb	r3, [r3, #0]
 801b086:	429a      	cmp	r2, r3
 801b088:	d3e7      	bcc.n	801b05a <SX1276ReadBuffer+0x2e>
    }

    //NSS = 1;
    Sx_Board_ChipSelect( 1 );
 801b08a:	2001      	movs	r0, #1
 801b08c:	f7ea ffce 	bl	800602c <CMWX1ZZABZ0XX_RADIO_ChipSelect>
}
 801b090:	46c0      	nop			; (mov r8, r8)
 801b092:	46bd      	mov	sp, r7
 801b094:	b006      	add	sp, #24
 801b096:	bd80      	pop	{r7, pc}

0801b098 <SX1276WriteFifo>:

void SX1276WriteFifo( uint8_t *buffer, uint8_t size )
{
 801b098:	b580      	push	{r7, lr}
 801b09a:	b082      	sub	sp, #8
 801b09c:	af00      	add	r7, sp, #0
 801b09e:	6078      	str	r0, [r7, #4]
 801b0a0:	000a      	movs	r2, r1
 801b0a2:	1cfb      	adds	r3, r7, #3
 801b0a4:	701a      	strb	r2, [r3, #0]
    SX1276WriteBuffer( 0, buffer, size );
 801b0a6:	1cfb      	adds	r3, r7, #3
 801b0a8:	781a      	ldrb	r2, [r3, #0]
 801b0aa:	687b      	ldr	r3, [r7, #4]
 801b0ac:	0019      	movs	r1, r3
 801b0ae:	2000      	movs	r0, #0
 801b0b0:	f7ff ff88 	bl	801afc4 <SX1276WriteBuffer>
}
 801b0b4:	46c0      	nop			; (mov r8, r8)
 801b0b6:	46bd      	mov	sp, r7
 801b0b8:	b002      	add	sp, #8
 801b0ba:	bd80      	pop	{r7, pc}

0801b0bc <SX1276ReadFifo>:

void SX1276ReadFifo( uint8_t *buffer, uint8_t size )
{
 801b0bc:	b580      	push	{r7, lr}
 801b0be:	b082      	sub	sp, #8
 801b0c0:	af00      	add	r7, sp, #0
 801b0c2:	6078      	str	r0, [r7, #4]
 801b0c4:	000a      	movs	r2, r1
 801b0c6:	1cfb      	adds	r3, r7, #3
 801b0c8:	701a      	strb	r2, [r3, #0]
    SX1276ReadBuffer( 0, buffer, size );
 801b0ca:	1cfb      	adds	r3, r7, #3
 801b0cc:	781a      	ldrb	r2, [r3, #0]
 801b0ce:	687b      	ldr	r3, [r7, #4]
 801b0d0:	0019      	movs	r1, r3
 801b0d2:	2000      	movs	r0, #0
 801b0d4:	f7ff ffaa 	bl	801b02c <SX1276ReadBuffer>
}
 801b0d8:	46c0      	nop			; (mov r8, r8)
 801b0da:	46bd      	mov	sp, r7
 801b0dc:	b002      	add	sp, #8
 801b0de:	bd80      	pop	{r7, pc}

0801b0e0 <SX1276SetMaxPayloadLength>:

void SX1276SetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 801b0e0:	b580      	push	{r7, lr}
 801b0e2:	b082      	sub	sp, #8
 801b0e4:	af00      	add	r7, sp, #0
 801b0e6:	0002      	movs	r2, r0
 801b0e8:	1dfb      	adds	r3, r7, #7
 801b0ea:	701a      	strb	r2, [r3, #0]
 801b0ec:	1dbb      	adds	r3, r7, #6
 801b0ee:	1c0a      	adds	r2, r1, #0
 801b0f0:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( modem );
 801b0f2:	1dfb      	adds	r3, r7, #7
 801b0f4:	781b      	ldrb	r3, [r3, #0]
 801b0f6:	0018      	movs	r0, r3
 801b0f8:	f7ff fee8 	bl	801aecc <SX1276SetModem>

    switch( modem )
 801b0fc:	1dfb      	adds	r3, r7, #7
 801b0fe:	781b      	ldrb	r3, [r3, #0]
 801b100:	2b00      	cmp	r3, #0
 801b102:	d002      	beq.n	801b10a <SX1276SetMaxPayloadLength+0x2a>
 801b104:	2b01      	cmp	r3, #1
 801b106:	d00f      	beq.n	801b128 <SX1276SetMaxPayloadLength+0x48>
        break;
    case MODEM_LORA:
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
        break;
    }
}
 801b108:	e016      	b.n	801b138 <SX1276SetMaxPayloadLength+0x58>
        if( SX1276.Settings.Fsk.FixLen == false )
 801b10a:	4b0d      	ldr	r3, [pc, #52]	; (801b140 <SX1276SetMaxPayloadLength+0x60>)
 801b10c:	2222      	movs	r2, #34	; 0x22
 801b10e:	5c9b      	ldrb	r3, [r3, r2]
 801b110:	2201      	movs	r2, #1
 801b112:	4053      	eors	r3, r2
 801b114:	b2db      	uxtb	r3, r3
 801b116:	2b00      	cmp	r3, #0
 801b118:	d00d      	beq.n	801b136 <SX1276SetMaxPayloadLength+0x56>
            SX1276Write( REG_PAYLOADLENGTH, max );
 801b11a:	1dbb      	adds	r3, r7, #6
 801b11c:	781b      	ldrb	r3, [r3, #0]
 801b11e:	0019      	movs	r1, r3
 801b120:	2032      	movs	r0, #50	; 0x32
 801b122:	f7ff ff2d 	bl	801af80 <SX1276Write>
        break;
 801b126:	e006      	b.n	801b136 <SX1276SetMaxPayloadLength+0x56>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 801b128:	1dbb      	adds	r3, r7, #6
 801b12a:	781b      	ldrb	r3, [r3, #0]
 801b12c:	0019      	movs	r1, r3
 801b12e:	2023      	movs	r0, #35	; 0x23
 801b130:	f7ff ff26 	bl	801af80 <SX1276Write>
        break;
 801b134:	e000      	b.n	801b138 <SX1276SetMaxPayloadLength+0x58>
        break;
 801b136:	46c0      	nop			; (mov r8, r8)
}
 801b138:	46c0      	nop			; (mov r8, r8)
 801b13a:	46bd      	mov	sp, r7
 801b13c:	b002      	add	sp, #8
 801b13e:	bd80      	pop	{r7, pc}
 801b140:	20001774 	.word	0x20001774

0801b144 <SX1276SetPublicNetwork>:

void SX1276SetPublicNetwork( bool enable )
{
 801b144:	b580      	push	{r7, lr}
 801b146:	b082      	sub	sp, #8
 801b148:	af00      	add	r7, sp, #0
 801b14a:	0002      	movs	r2, r0
 801b14c:	1dfb      	adds	r3, r7, #7
 801b14e:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( MODEM_LORA );
 801b150:	2001      	movs	r0, #1
 801b152:	f7ff febb 	bl	801aecc <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 801b156:	4b0b      	ldr	r3, [pc, #44]	; (801b184 <SX1276SetPublicNetwork+0x40>)
 801b158:	1dfa      	adds	r2, r7, #7
 801b15a:	215c      	movs	r1, #92	; 0x5c
 801b15c:	7812      	ldrb	r2, [r2, #0]
 801b15e:	545a      	strb	r2, [r3, r1]
    if( enable == true )
 801b160:	1dfb      	adds	r3, r7, #7
 801b162:	781b      	ldrb	r3, [r3, #0]
 801b164:	2b00      	cmp	r3, #0
 801b166:	d004      	beq.n	801b172 <SX1276SetPublicNetwork+0x2e>
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 801b168:	2134      	movs	r1, #52	; 0x34
 801b16a:	2039      	movs	r0, #57	; 0x39
 801b16c:	f7ff ff08 	bl	801af80 <SX1276Write>
    else
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
    }
}
 801b170:	e003      	b.n	801b17a <SX1276SetPublicNetwork+0x36>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 801b172:	2112      	movs	r1, #18
 801b174:	2039      	movs	r0, #57	; 0x39
 801b176:	f7ff ff03 	bl	801af80 <SX1276Write>
}
 801b17a:	46c0      	nop			; (mov r8, r8)
 801b17c:	46bd      	mov	sp, r7
 801b17e:	b002      	add	sp, #8
 801b180:	bd80      	pop	{r7, pc}
 801b182:	46c0      	nop			; (mov r8, r8)
 801b184:	20001774 	.word	0x20001774

0801b188 <SX1276GetWakeupTime>:

uint32_t SX1276GetWakeupTime( void )
{
 801b188:	b580      	push	{r7, lr}
 801b18a:	af00      	add	r7, sp, #0
    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
 801b18c:	f7ea fcd8 	bl	8005b40 <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>
 801b190:	0003      	movs	r3, r0
 801b192:	3302      	adds	r3, #2
}
 801b194:	0018      	movs	r0, r3
 801b196:	46bd      	mov	sp, r7
 801b198:	bd80      	pop	{r7, pc}
	...

0801b19c <GetFskBandwidthRegValue>:

static uint8_t GetFskBandwidthRegValue( uint32_t bw )
{
 801b19c:	b580      	push	{r7, lr}
 801b19e:	b084      	sub	sp, #16
 801b1a0:	af00      	add	r7, sp, #0
 801b1a2:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 801b1a4:	230f      	movs	r3, #15
 801b1a6:	18fb      	adds	r3, r7, r3
 801b1a8:	2200      	movs	r2, #0
 801b1aa:	701a      	strb	r2, [r3, #0]
 801b1ac:	e01f      	b.n	801b1ee <GetFskBandwidthRegValue+0x52>
    {
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 801b1ae:	210f      	movs	r1, #15
 801b1b0:	187b      	adds	r3, r7, r1
 801b1b2:	781a      	ldrb	r2, [r3, #0]
 801b1b4:	4b13      	ldr	r3, [pc, #76]	; (801b204 <GetFskBandwidthRegValue+0x68>)
 801b1b6:	00d2      	lsls	r2, r2, #3
 801b1b8:	58d3      	ldr	r3, [r2, r3]
 801b1ba:	687a      	ldr	r2, [r7, #4]
 801b1bc:	429a      	cmp	r2, r3
 801b1be:	d310      	bcc.n	801b1e2 <GetFskBandwidthRegValue+0x46>
 801b1c0:	187b      	adds	r3, r7, r1
 801b1c2:	781b      	ldrb	r3, [r3, #0]
 801b1c4:	1c5a      	adds	r2, r3, #1
 801b1c6:	4b0f      	ldr	r3, [pc, #60]	; (801b204 <GetFskBandwidthRegValue+0x68>)
 801b1c8:	00d2      	lsls	r2, r2, #3
 801b1ca:	58d3      	ldr	r3, [r2, r3]
 801b1cc:	687a      	ldr	r2, [r7, #4]
 801b1ce:	429a      	cmp	r2, r3
 801b1d0:	d207      	bcs.n	801b1e2 <GetFskBandwidthRegValue+0x46>
        {
            return FskBandwidths[i].RegValue;
 801b1d2:	187b      	adds	r3, r7, r1
 801b1d4:	781b      	ldrb	r3, [r3, #0]
 801b1d6:	4a0b      	ldr	r2, [pc, #44]	; (801b204 <GetFskBandwidthRegValue+0x68>)
 801b1d8:	00db      	lsls	r3, r3, #3
 801b1da:	18d3      	adds	r3, r2, r3
 801b1dc:	3304      	adds	r3, #4
 801b1de:	781b      	ldrb	r3, [r3, #0]
 801b1e0:	e00b      	b.n	801b1fa <GetFskBandwidthRegValue+0x5e>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 801b1e2:	210f      	movs	r1, #15
 801b1e4:	187b      	adds	r3, r7, r1
 801b1e6:	781a      	ldrb	r2, [r3, #0]
 801b1e8:	187b      	adds	r3, r7, r1
 801b1ea:	3201      	adds	r2, #1
 801b1ec:	701a      	strb	r2, [r3, #0]
 801b1ee:	230f      	movs	r3, #15
 801b1f0:	18fb      	adds	r3, r7, r3
 801b1f2:	781b      	ldrb	r3, [r3, #0]
 801b1f4:	2b14      	cmp	r3, #20
 801b1f6:	d9da      	bls.n	801b1ae <GetFskBandwidthRegValue+0x12>
        }
    }
    // ERROR: Value not found
    while( 1 );
 801b1f8:	e7fe      	b.n	801b1f8 <GetFskBandwidthRegValue+0x5c>
}
 801b1fa:	0018      	movs	r0, r3
 801b1fc:	46bd      	mov	sp, r7
 801b1fe:	b004      	add	sp, #16
 801b200:	bd80      	pop	{r7, pc}
 801b202:	46c0      	nop			; (mov r8, r8)
 801b204:	0801fdf0 	.word	0x0801fdf0

0801b208 <SX1276GetLoRaBandwidthInHz>:

static uint32_t SX1276GetLoRaBandwidthInHz( uint32_t bw )
{
 801b208:	b580      	push	{r7, lr}
 801b20a:	b084      	sub	sp, #16
 801b20c:	af00      	add	r7, sp, #0
 801b20e:	6078      	str	r0, [r7, #4]
    uint32_t bandwidthInHz = 0;
 801b210:	2300      	movs	r3, #0
 801b212:	60fb      	str	r3, [r7, #12]

    switch( bw )
 801b214:	687b      	ldr	r3, [r7, #4]
 801b216:	2b03      	cmp	r3, #3
 801b218:	d018      	beq.n	801b24c <SX1276GetLoRaBandwidthInHz+0x44>
 801b21a:	687b      	ldr	r3, [r7, #4]
 801b21c:	2b03      	cmp	r3, #3
 801b21e:	d818      	bhi.n	801b252 <SX1276GetLoRaBandwidthInHz+0x4a>
 801b220:	687b      	ldr	r3, [r7, #4]
 801b222:	2b02      	cmp	r3, #2
 801b224:	d00f      	beq.n	801b246 <SX1276GetLoRaBandwidthInHz+0x3e>
 801b226:	687b      	ldr	r3, [r7, #4]
 801b228:	2b02      	cmp	r3, #2
 801b22a:	d812      	bhi.n	801b252 <SX1276GetLoRaBandwidthInHz+0x4a>
 801b22c:	687b      	ldr	r3, [r7, #4]
 801b22e:	2b00      	cmp	r3, #0
 801b230:	d003      	beq.n	801b23a <SX1276GetLoRaBandwidthInHz+0x32>
 801b232:	687b      	ldr	r3, [r7, #4]
 801b234:	2b01      	cmp	r3, #1
 801b236:	d003      	beq.n	801b240 <SX1276GetLoRaBandwidthInHz+0x38>
 801b238:	e00b      	b.n	801b252 <SX1276GetLoRaBandwidthInHz+0x4a>
    {
    case 0: // 125 kHz
        bandwidthInHz = 125000UL;
 801b23a:	4b08      	ldr	r3, [pc, #32]	; (801b25c <SX1276GetLoRaBandwidthInHz+0x54>)
 801b23c:	60fb      	str	r3, [r7, #12]
        break;
 801b23e:	e008      	b.n	801b252 <SX1276GetLoRaBandwidthInHz+0x4a>
    case 1: // 250 kHz
        bandwidthInHz = 250000UL;
 801b240:	4b07      	ldr	r3, [pc, #28]	; (801b260 <SX1276GetLoRaBandwidthInHz+0x58>)
 801b242:	60fb      	str	r3, [r7, #12]
        break;
 801b244:	e005      	b.n	801b252 <SX1276GetLoRaBandwidthInHz+0x4a>
    case 2: // 500 kHz
        bandwidthInHz = 500000UL;
 801b246:	4b07      	ldr	r3, [pc, #28]	; (801b264 <SX1276GetLoRaBandwidthInHz+0x5c>)
 801b248:	60fb      	str	r3, [r7, #12]
        break;
 801b24a:	e002      	b.n	801b252 <SX1276GetLoRaBandwidthInHz+0x4a>
    case 3: // 62.5 kHz NEW
            bandwidthInHz = 62500UL;
 801b24c:	4b06      	ldr	r3, [pc, #24]	; (801b268 <SX1276GetLoRaBandwidthInHz+0x60>)
 801b24e:	60fb      	str	r3, [r7, #12]
            break;
 801b250:	46c0      	nop			; (mov r8, r8)
    }

    return bandwidthInHz;
 801b252:	68fb      	ldr	r3, [r7, #12]
}
 801b254:	0018      	movs	r0, r3
 801b256:	46bd      	mov	sp, r7
 801b258:	b004      	add	sp, #16
 801b25a:	bd80      	pop	{r7, pc}
 801b25c:	0001e848 	.word	0x0001e848
 801b260:	0003d090 	.word	0x0003d090
 801b264:	0007a120 	.word	0x0007a120
 801b268:	0000f424 	.word	0x0000f424

0801b26c <SX1276GetGfskTimeOnAirNumerator>:

static uint32_t SX1276GetGfskTimeOnAirNumerator( uint16_t preambleLen, bool fixLen,
                                                 uint8_t payloadLen, bool crcOn )
{
 801b26c:	b5b0      	push	{r4, r5, r7, lr}
 801b26e:	b084      	sub	sp, #16
 801b270:	af00      	add	r7, sp, #0
 801b272:	0005      	movs	r5, r0
 801b274:	000c      	movs	r4, r1
 801b276:	0010      	movs	r0, r2
 801b278:	0019      	movs	r1, r3
 801b27a:	1dbb      	adds	r3, r7, #6
 801b27c:	1c2a      	adds	r2, r5, #0
 801b27e:	801a      	strh	r2, [r3, #0]
 801b280:	1d7b      	adds	r3, r7, #5
 801b282:	1c22      	adds	r2, r4, #0
 801b284:	701a      	strb	r2, [r3, #0]
 801b286:	1d3b      	adds	r3, r7, #4
 801b288:	1c02      	adds	r2, r0, #0
 801b28a:	701a      	strb	r2, [r3, #0]
 801b28c:	1cfb      	adds	r3, r7, #3
 801b28e:	1c0a      	adds	r2, r1, #0
 801b290:	701a      	strb	r2, [r3, #0]
    const uint8_t syncWordLength = 3;
 801b292:	230f      	movs	r3, #15
 801b294:	18fb      	adds	r3, r7, r3
 801b296:	2203      	movs	r2, #3
 801b298:	701a      	strb	r2, [r3, #0]

    return ( preambleLen << 3 ) +
 801b29a:	1dbb      	adds	r3, r7, #6
 801b29c:	881b      	ldrh	r3, [r3, #0]
 801b29e:	00da      	lsls	r2, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) +
 801b2a0:	1d7b      	adds	r3, r7, #5
 801b2a2:	781b      	ldrb	r3, [r3, #0]
 801b2a4:	2101      	movs	r1, #1
 801b2a6:	404b      	eors	r3, r1
 801b2a8:	b2db      	uxtb	r3, r3
 801b2aa:	2b00      	cmp	r3, #0
 801b2ac:	d001      	beq.n	801b2b2 <SX1276GetGfskTimeOnAirNumerator+0x46>
 801b2ae:	2308      	movs	r3, #8
 801b2b0:	e000      	b.n	801b2b4 <SX1276GetGfskTimeOnAirNumerator+0x48>
 801b2b2:	2300      	movs	r3, #0
    return ( preambleLen << 3 ) +
 801b2b4:	189a      	adds	r2, r3, r2
             ( syncWordLength << 3 ) +
 801b2b6:	230f      	movs	r3, #15
 801b2b8:	18fb      	adds	r3, r7, r3
 801b2ba:	781b      	ldrb	r3, [r3, #0]
 801b2bc:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) +
 801b2be:	18d2      	adds	r2, r2, r3
             ( ( payloadLen +
 801b2c0:	1d3b      	adds	r3, r7, #4
 801b2c2:	7819      	ldrb	r1, [r3, #0]
               ( 0 ) + // Address filter size
               ( ( crcOn == true ) ? 2 : 0 ) 
 801b2c4:	1cfb      	adds	r3, r7, #3
 801b2c6:	781b      	ldrb	r3, [r3, #0]
 801b2c8:	2b00      	cmp	r3, #0
 801b2ca:	d001      	beq.n	801b2d0 <SX1276GetGfskTimeOnAirNumerator+0x64>
 801b2cc:	2302      	movs	r3, #2
 801b2ce:	e000      	b.n	801b2d2 <SX1276GetGfskTimeOnAirNumerator+0x66>
 801b2d0:	2300      	movs	r3, #0
               ( 0 ) + // Address filter size
 801b2d2:	185b      	adds	r3, r3, r1
               ) << 3 
 801b2d4:	00db      	lsls	r3, r3, #3
             ( syncWordLength << 3 ) +
 801b2d6:	18d3      	adds	r3, r2, r3
             );
}
 801b2d8:	0018      	movs	r0, r3
 801b2da:	46bd      	mov	sp, r7
 801b2dc:	b004      	add	sp, #16
 801b2de:	bdb0      	pop	{r4, r5, r7, pc}

0801b2e0 <SX1276GetLoRaTimeOnAirNumerator>:

static uint32_t SX1276GetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                              uint32_t datarate, uint8_t coderate,
                              uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                              bool crcOn )
{
 801b2e0:	b580      	push	{r7, lr}
 801b2e2:	b08a      	sub	sp, #40	; 0x28
 801b2e4:	af00      	add	r7, sp, #0
 801b2e6:	60f8      	str	r0, [r7, #12]
 801b2e8:	60b9      	str	r1, [r7, #8]
 801b2ea:	0019      	movs	r1, r3
 801b2ec:	1dfb      	adds	r3, r7, #7
 801b2ee:	701a      	strb	r2, [r3, #0]
 801b2f0:	1d3b      	adds	r3, r7, #4
 801b2f2:	1c0a      	adds	r2, r1, #0
 801b2f4:	801a      	strh	r2, [r3, #0]
    int32_t crDenom           = coderate + 4;
 801b2f6:	1dfb      	adds	r3, r7, #7
 801b2f8:	781b      	ldrb	r3, [r3, #0]
 801b2fa:	3304      	adds	r3, #4
 801b2fc:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 801b2fe:	2327      	movs	r3, #39	; 0x27
 801b300:	18fb      	adds	r3, r7, r3
 801b302:	2200      	movs	r2, #0
 801b304:	701a      	strb	r2, [r3, #0]

    // Ensure that the preamble length is at least 12 symbols when using SF5 or
    // SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801b306:	68bb      	ldr	r3, [r7, #8]
 801b308:	2b05      	cmp	r3, #5
 801b30a:	d002      	beq.n	801b312 <SX1276GetLoRaTimeOnAirNumerator+0x32>
 801b30c:	68bb      	ldr	r3, [r7, #8]
 801b30e:	2b06      	cmp	r3, #6
 801b310:	d106      	bne.n	801b320 <SX1276GetLoRaTimeOnAirNumerator+0x40>
    {
        if( preambleLen < 12 )
 801b312:	1d3b      	adds	r3, r7, #4
 801b314:	881b      	ldrh	r3, [r3, #0]
 801b316:	2b0b      	cmp	r3, #11
 801b318:	d802      	bhi.n	801b320 <SX1276GetLoRaTimeOnAirNumerator+0x40>
        {
            preambleLen = 12;
 801b31a:	1d3b      	adds	r3, r7, #4
 801b31c:	220c      	movs	r2, #12
 801b31e:	801a      	strh	r2, [r3, #0]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801b320:	68fb      	ldr	r3, [r7, #12]
 801b322:	2b00      	cmp	r3, #0
 801b324:	d105      	bne.n	801b332 <SX1276GetLoRaTimeOnAirNumerator+0x52>
 801b326:	68bb      	ldr	r3, [r7, #8]
 801b328:	2b0b      	cmp	r3, #11
 801b32a:	d008      	beq.n	801b33e <SX1276GetLoRaTimeOnAirNumerator+0x5e>
 801b32c:	68bb      	ldr	r3, [r7, #8]
 801b32e:	2b0c      	cmp	r3, #12
 801b330:	d005      	beq.n	801b33e <SX1276GetLoRaTimeOnAirNumerator+0x5e>
 801b332:	68fb      	ldr	r3, [r7, #12]
 801b334:	2b01      	cmp	r3, #1
 801b336:	d106      	bne.n	801b346 <SX1276GetLoRaTimeOnAirNumerator+0x66>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801b338:	68bb      	ldr	r3, [r7, #8]
 801b33a:	2b0c      	cmp	r3, #12
 801b33c:	d103      	bne.n	801b346 <SX1276GetLoRaTimeOnAirNumerator+0x66>
    {
        lowDatareOptimize = true;
 801b33e:	2327      	movs	r3, #39	; 0x27
 801b340:	18fb      	adds	r3, r7, r3
 801b342:	2201      	movs	r2, #1
 801b344:	701a      	strb	r2, [r3, #0]
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801b346:	2334      	movs	r3, #52	; 0x34
 801b348:	18fb      	adds	r3, r7, r3
 801b34a:	781b      	ldrb	r3, [r3, #0]
 801b34c:	00da      	lsls	r2, r3, #3
                            ( crcOn ? 16 : 0 ) -
 801b34e:	2338      	movs	r3, #56	; 0x38
 801b350:	18fb      	adds	r3, r7, r3
 801b352:	781b      	ldrb	r3, [r3, #0]
 801b354:	2b00      	cmp	r3, #0
 801b356:	d001      	beq.n	801b35c <SX1276GetLoRaTimeOnAirNumerator+0x7c>
 801b358:	2310      	movs	r3, #16
 801b35a:	e000      	b.n	801b35e <SX1276GetLoRaTimeOnAirNumerator+0x7e>
 801b35c:	2300      	movs	r3, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801b35e:	189b      	adds	r3, r3, r2
 801b360:	001a      	movs	r2, r3
                            ( 4 * datarate ) +
 801b362:	68bb      	ldr	r3, [r7, #8]
 801b364:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 801b366:	1ad2      	subs	r2, r2, r3
                            ( fixLen ? 0 : 20 );
 801b368:	2330      	movs	r3, #48	; 0x30
 801b36a:	18fb      	adds	r3, r7, r3
 801b36c:	781b      	ldrb	r3, [r3, #0]
 801b36e:	2b00      	cmp	r3, #0
 801b370:	d001      	beq.n	801b376 <SX1276GetLoRaTimeOnAirNumerator+0x96>
 801b372:	2300      	movs	r3, #0
 801b374:	e000      	b.n	801b378 <SX1276GetLoRaTimeOnAirNumerator+0x98>
 801b376:	2314      	movs	r3, #20
                            ( 4 * datarate ) +
 801b378:	189b      	adds	r3, r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801b37a:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 801b37c:	68bb      	ldr	r3, [r7, #8]
 801b37e:	2b06      	cmp	r3, #6
 801b380:	d803      	bhi.n	801b38a <SX1276GetLoRaTimeOnAirNumerator+0xaa>
    {
        ceilDenominator = 4 * datarate;
 801b382:	68bb      	ldr	r3, [r7, #8]
 801b384:	009b      	lsls	r3, r3, #2
 801b386:	623b      	str	r3, [r7, #32]
 801b388:	e00f      	b.n	801b3aa <SX1276GetLoRaTimeOnAirNumerator+0xca>
    }
    else
    {
        ceilNumerator += 8;
 801b38a:	69fb      	ldr	r3, [r7, #28]
 801b38c:	3308      	adds	r3, #8
 801b38e:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 801b390:	2327      	movs	r3, #39	; 0x27
 801b392:	18fb      	adds	r3, r7, r3
 801b394:	781b      	ldrb	r3, [r3, #0]
 801b396:	2b00      	cmp	r3, #0
 801b398:	d004      	beq.n	801b3a4 <SX1276GetLoRaTimeOnAirNumerator+0xc4>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 801b39a:	68bb      	ldr	r3, [r7, #8]
 801b39c:	3b02      	subs	r3, #2
 801b39e:	009b      	lsls	r3, r3, #2
 801b3a0:	623b      	str	r3, [r7, #32]
 801b3a2:	e002      	b.n	801b3aa <SX1276GetLoRaTimeOnAirNumerator+0xca>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 801b3a4:	68bb      	ldr	r3, [r7, #8]
 801b3a6:	009b      	lsls	r3, r3, #2
 801b3a8:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 801b3aa:	69fb      	ldr	r3, [r7, #28]
 801b3ac:	2b00      	cmp	r3, #0
 801b3ae:	da01      	bge.n	801b3b4 <SX1276GetLoRaTimeOnAirNumerator+0xd4>
    {
        ceilNumerator = 0;
 801b3b0:	2300      	movs	r3, #0
 801b3b2:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 801b3b4:	69fa      	ldr	r2, [r7, #28]
 801b3b6:	6a3b      	ldr	r3, [r7, #32]
 801b3b8:	18d3      	adds	r3, r2, r3
 801b3ba:	3b01      	subs	r3, #1
 801b3bc:	6a39      	ldr	r1, [r7, #32]
 801b3be:	0018      	movs	r0, r3
 801b3c0:	f7e4 ff34 	bl	800022c <__divsi3>
 801b3c4:	0003      	movs	r3, r0
 801b3c6:	001a      	movs	r2, r3
 801b3c8:	697b      	ldr	r3, [r7, #20]
 801b3ca:	435a      	muls	r2, r3
 801b3cc:	1d3b      	adds	r3, r7, #4
 801b3ce:	881b      	ldrh	r3, [r3, #0]
 801b3d0:	18d3      	adds	r3, r2, r3
    int32_t intermediate =
 801b3d2:	330c      	adds	r3, #12
 801b3d4:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 801b3d6:	68bb      	ldr	r3, [r7, #8]
 801b3d8:	2b06      	cmp	r3, #6
 801b3da:	d802      	bhi.n	801b3e2 <SX1276GetLoRaTimeOnAirNumerator+0x102>
    {
        intermediate += 2;
 801b3dc:	69bb      	ldr	r3, [r7, #24]
 801b3de:	3302      	adds	r3, #2
 801b3e0:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 801b3e2:	69bb      	ldr	r3, [r7, #24]
 801b3e4:	009b      	lsls	r3, r3, #2
 801b3e6:	1c5a      	adds	r2, r3, #1
 801b3e8:	68bb      	ldr	r3, [r7, #8]
 801b3ea:	3b02      	subs	r3, #2
 801b3ec:	409a      	lsls	r2, r3
 801b3ee:	0013      	movs	r3, r2
}
 801b3f0:	0018      	movs	r0, r3
 801b3f2:	46bd      	mov	sp, r7
 801b3f4:	b00a      	add	sp, #40	; 0x28
 801b3f6:	bd80      	pop	{r7, pc}

0801b3f8 <SX1276OnTimeoutIrq>:

static void SX1276OnTimeoutIrq( void* context )
{
 801b3f8:	b590      	push	{r4, r7, lr}
 801b3fa:	b085      	sub	sp, #20
 801b3fc:	af00      	add	r7, sp, #0
 801b3fe:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.State )
 801b400:	4b4f      	ldr	r3, [pc, #316]	; (801b540 <SX1276OnTimeoutIrq+0x148>)
 801b402:	791b      	ldrb	r3, [r3, #4]
 801b404:	2b01      	cmp	r3, #1
 801b406:	d002      	beq.n	801b40e <SX1276OnTimeoutIrq+0x16>
 801b408:	2b02      	cmp	r3, #2
 801b40a:	d041      	beq.n	801b490 <SX1276OnTimeoutIrq+0x98>
        {
            RadioEvents->TxTimeout( );
        }
        break;
    default:
        break;
 801b40c:	e094      	b.n	801b538 <SX1276OnTimeoutIrq+0x140>
        if( SX1276.Settings.Modem == MODEM_FSK )
 801b40e:	4b4c      	ldr	r3, [pc, #304]	; (801b540 <SX1276OnTimeoutIrq+0x148>)
 801b410:	795b      	ldrb	r3, [r3, #5]
 801b412:	2b00      	cmp	r3, #0
 801b414:	d12e      	bne.n	801b474 <SX1276OnTimeoutIrq+0x7c>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 801b416:	4b4a      	ldr	r3, [pc, #296]	; (801b540 <SX1276OnTimeoutIrq+0x148>)
 801b418:	2230      	movs	r2, #48	; 0x30
 801b41a:	2100      	movs	r1, #0
 801b41c:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 801b41e:	4b48      	ldr	r3, [pc, #288]	; (801b540 <SX1276OnTimeoutIrq+0x148>)
 801b420:	2231      	movs	r2, #49	; 0x31
 801b422:	2100      	movs	r1, #0
 801b424:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801b426:	4b46      	ldr	r3, [pc, #280]	; (801b540 <SX1276OnTimeoutIrq+0x148>)
 801b428:	2200      	movs	r2, #0
 801b42a:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 801b42c:	4b44      	ldr	r3, [pc, #272]	; (801b540 <SX1276OnTimeoutIrq+0x148>)
 801b42e:	2200      	movs	r2, #0
 801b430:	875a      	strh	r2, [r3, #58]	; 0x3a
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 801b432:	210b      	movs	r1, #11
 801b434:	203e      	movs	r0, #62	; 0x3e
 801b436:	f7ff fda3 	bl	801af80 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 801b43a:	2110      	movs	r1, #16
 801b43c:	203f      	movs	r0, #63	; 0x3f
 801b43e:	f7ff fd9f 	bl	801af80 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 801b442:	4b3f      	ldr	r3, [pc, #252]	; (801b540 <SX1276OnTimeoutIrq+0x148>)
 801b444:	2226      	movs	r2, #38	; 0x26
 801b446:	5c9b      	ldrb	r3, [r3, r2]
 801b448:	2b00      	cmp	r3, #0
 801b44a:	d00c      	beq.n	801b466 <SX1276OnTimeoutIrq+0x6e>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 801b44c:	200d      	movs	r0, #13
 801b44e:	f7ff fda8 	bl	801afa2 <SX1276Read>
 801b452:	0003      	movs	r3, r0
 801b454:	001a      	movs	r2, r3
 801b456:	2340      	movs	r3, #64	; 0x40
 801b458:	4313      	orrs	r3, r2
 801b45a:	b2db      	uxtb	r3, r3
 801b45c:	0019      	movs	r1, r3
 801b45e:	200d      	movs	r0, #13
 801b460:	f7ff fd8e 	bl	801af80 <SX1276Write>
 801b464:	e006      	b.n	801b474 <SX1276OnTimeoutIrq+0x7c>
                SX1276.Settings.State = RF_IDLE;
 801b466:	4b36      	ldr	r3, [pc, #216]	; (801b540 <SX1276OnTimeoutIrq+0x148>)
 801b468:	2200      	movs	r2, #0
 801b46a:	711a      	strb	r2, [r3, #4]
                TimerStop( &RxTimeoutSyncWord );
 801b46c:	4b35      	ldr	r3, [pc, #212]	; (801b544 <SX1276OnTimeoutIrq+0x14c>)
 801b46e:	0018      	movs	r0, r3
 801b470:	f001 fbfa 	bl	801cc68 <UTIL_TIMER_Stop>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801b474:	4b34      	ldr	r3, [pc, #208]	; (801b548 <SX1276OnTimeoutIrq+0x150>)
 801b476:	681b      	ldr	r3, [r3, #0]
 801b478:	2b00      	cmp	r3, #0
 801b47a:	d05a      	beq.n	801b532 <SX1276OnTimeoutIrq+0x13a>
 801b47c:	4b32      	ldr	r3, [pc, #200]	; (801b548 <SX1276OnTimeoutIrq+0x150>)
 801b47e:	681b      	ldr	r3, [r3, #0]
 801b480:	68db      	ldr	r3, [r3, #12]
 801b482:	2b00      	cmp	r3, #0
 801b484:	d055      	beq.n	801b532 <SX1276OnTimeoutIrq+0x13a>
            RadioEvents->RxTimeout( );
 801b486:	4b30      	ldr	r3, [pc, #192]	; (801b548 <SX1276OnTimeoutIrq+0x150>)
 801b488:	681b      	ldr	r3, [r3, #0]
 801b48a:	68db      	ldr	r3, [r3, #12]
 801b48c:	4798      	blx	r3
        break;
 801b48e:	e050      	b.n	801b532 <SX1276OnTimeoutIrq+0x13a>
        SX1276Reset( );
 801b490:	f7ff fca8 	bl	801ade4 <SX1276Reset>
        RxChainCalibration( );
 801b494:	f7fe f9ee 	bl	8019874 <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 801b498:	2000      	movs	r0, #0
 801b49a:	f7ff fcaa 	bl	801adf2 <SX1276SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 801b49e:	230f      	movs	r3, #15
 801b4a0:	18fb      	adds	r3, r7, r3
 801b4a2:	2200      	movs	r2, #0
 801b4a4:	701a      	strb	r2, [r3, #0]
 801b4a6:	e025      	b.n	801b4f4 <SX1276OnTimeoutIrq+0xfc>
            SX1276SetModem( RadioRegsInit[i].Modem );
 801b4a8:	240f      	movs	r4, #15
 801b4aa:	193b      	adds	r3, r7, r4
 801b4ac:	781a      	ldrb	r2, [r3, #0]
 801b4ae:	4927      	ldr	r1, [pc, #156]	; (801b54c <SX1276OnTimeoutIrq+0x154>)
 801b4b0:	0013      	movs	r3, r2
 801b4b2:	005b      	lsls	r3, r3, #1
 801b4b4:	189b      	adds	r3, r3, r2
 801b4b6:	5c5b      	ldrb	r3, [r3, r1]
 801b4b8:	0018      	movs	r0, r3
 801b4ba:	f7ff fd07 	bl	801aecc <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 801b4be:	193b      	adds	r3, r7, r4
 801b4c0:	781a      	ldrb	r2, [r3, #0]
 801b4c2:	4922      	ldr	r1, [pc, #136]	; (801b54c <SX1276OnTimeoutIrq+0x154>)
 801b4c4:	0013      	movs	r3, r2
 801b4c6:	005b      	lsls	r3, r3, #1
 801b4c8:	189b      	adds	r3, r3, r2
 801b4ca:	18cb      	adds	r3, r1, r3
 801b4cc:	3301      	adds	r3, #1
 801b4ce:	781b      	ldrb	r3, [r3, #0]
 801b4d0:	0018      	movs	r0, r3
 801b4d2:	193b      	adds	r3, r7, r4
 801b4d4:	781a      	ldrb	r2, [r3, #0]
 801b4d6:	491d      	ldr	r1, [pc, #116]	; (801b54c <SX1276OnTimeoutIrq+0x154>)
 801b4d8:	0013      	movs	r3, r2
 801b4da:	005b      	lsls	r3, r3, #1
 801b4dc:	189b      	adds	r3, r3, r2
 801b4de:	18cb      	adds	r3, r1, r3
 801b4e0:	3302      	adds	r3, #2
 801b4e2:	781b      	ldrb	r3, [r3, #0]
 801b4e4:	0019      	movs	r1, r3
 801b4e6:	f7ff fd4b 	bl	801af80 <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 801b4ea:	193b      	adds	r3, r7, r4
 801b4ec:	781a      	ldrb	r2, [r3, #0]
 801b4ee:	193b      	adds	r3, r7, r4
 801b4f0:	3201      	adds	r2, #1
 801b4f2:	701a      	strb	r2, [r3, #0]
 801b4f4:	230f      	movs	r3, #15
 801b4f6:	18fb      	adds	r3, r7, r3
 801b4f8:	781b      	ldrb	r3, [r3, #0]
 801b4fa:	2b0f      	cmp	r3, #15
 801b4fc:	d9d4      	bls.n	801b4a8 <SX1276OnTimeoutIrq+0xb0>
        SX1276SetModem( MODEM_FSK );
 801b4fe:	2000      	movs	r0, #0
 801b500:	f7ff fce4 	bl	801aecc <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 801b504:	4b0e      	ldr	r3, [pc, #56]	; (801b540 <SX1276OnTimeoutIrq+0x148>)
 801b506:	225c      	movs	r2, #92	; 0x5c
 801b508:	5c9b      	ldrb	r3, [r3, r2]
 801b50a:	0018      	movs	r0, r3
 801b50c:	f7ff fe1a 	bl	801b144 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 801b510:	4b0b      	ldr	r3, [pc, #44]	; (801b540 <SX1276OnTimeoutIrq+0x148>)
 801b512:	2200      	movs	r2, #0
 801b514:	711a      	strb	r2, [r3, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801b516:	4b0c      	ldr	r3, [pc, #48]	; (801b548 <SX1276OnTimeoutIrq+0x150>)
 801b518:	681b      	ldr	r3, [r3, #0]
 801b51a:	2b00      	cmp	r3, #0
 801b51c:	d00b      	beq.n	801b536 <SX1276OnTimeoutIrq+0x13e>
 801b51e:	4b0a      	ldr	r3, [pc, #40]	; (801b548 <SX1276OnTimeoutIrq+0x150>)
 801b520:	681b      	ldr	r3, [r3, #0]
 801b522:	685b      	ldr	r3, [r3, #4]
 801b524:	2b00      	cmp	r3, #0
 801b526:	d006      	beq.n	801b536 <SX1276OnTimeoutIrq+0x13e>
            RadioEvents->TxTimeout( );
 801b528:	4b07      	ldr	r3, [pc, #28]	; (801b548 <SX1276OnTimeoutIrq+0x150>)
 801b52a:	681b      	ldr	r3, [r3, #0]
 801b52c:	685b      	ldr	r3, [r3, #4]
 801b52e:	4798      	blx	r3
        break;
 801b530:	e001      	b.n	801b536 <SX1276OnTimeoutIrq+0x13e>
        break;
 801b532:	46c0      	nop			; (mov r8, r8)
 801b534:	e000      	b.n	801b538 <SX1276OnTimeoutIrq+0x140>
        break;
 801b536:	46c0      	nop			; (mov r8, r8)
    }
}
 801b538:	46c0      	nop			; (mov r8, r8)
 801b53a:	46bd      	mov	sp, r7
 801b53c:	b005      	add	sp, #20
 801b53e:	bd90      	pop	{r4, r7, pc}
 801b540:	20001774 	.word	0x20001774
 801b544:	2000175c 	.word	0x2000175c
 801b548:	20000e80 	.word	0x20000e80
 801b54c:	0801fdc0 	.word	0x0801fdc0

0801b550 <SX1276OnDio0Irq>:

static void SX1276OnDio0Irq( void )
{
 801b550:	b590      	push	{r4, r7, lr}
 801b552:	b083      	sub	sp, #12
 801b554:	af00      	add	r7, sp, #0
    volatile uint8_t irqFlags = 0;
 801b556:	1d7b      	adds	r3, r7, #5
 801b558:	2200      	movs	r2, #0
 801b55a:	701a      	strb	r2, [r3, #0]

    switch( SX1276.Settings.State )
 801b55c:	4bc3      	ldr	r3, [pc, #780]	; (801b86c <SX1276OnDio0Irq+0x31c>)
 801b55e:	791b      	ldrb	r3, [r3, #4]
 801b560:	2b01      	cmp	r3, #1
 801b562:	d003      	beq.n	801b56c <SX1276OnDio0Irq+0x1c>
 801b564:	2b02      	cmp	r3, #2
 801b566:	d100      	bne.n	801b56a <SX1276OnDio0Irq+0x1a>
 801b568:	e1e2      	b.n	801b930 <SX1276OnDio0Irq+0x3e0>
                }
                break;
            }
            break;
        default:
            break;
 801b56a:	e1ff      	b.n	801b96c <SX1276OnDio0Irq+0x41c>
            switch( SX1276.Settings.Modem )
 801b56c:	4bbf      	ldr	r3, [pc, #764]	; (801b86c <SX1276OnDio0Irq+0x31c>)
 801b56e:	795b      	ldrb	r3, [r3, #5]
 801b570:	2b00      	cmp	r3, #0
 801b572:	d003      	beq.n	801b57c <SX1276OnDio0Irq+0x2c>
 801b574:	2b01      	cmp	r3, #1
 801b576:	d100      	bne.n	801b57a <SX1276OnDio0Irq+0x2a>
 801b578:	e0e2      	b.n	801b740 <SX1276OnDio0Irq+0x1f0>
                break;
 801b57a:	e1d8      	b.n	801b92e <SX1276OnDio0Irq+0x3de>
                if( SX1276.Settings.Fsk.CrcOn == true )
 801b57c:	4bbb      	ldr	r3, [pc, #748]	; (801b86c <SX1276OnDio0Irq+0x31c>)
 801b57e:	2224      	movs	r2, #36	; 0x24
 801b580:	5c9b      	ldrb	r3, [r3, r2]
 801b582:	2b00      	cmp	r3, #0
 801b584:	d052      	beq.n	801b62c <SX1276OnDio0Irq+0xdc>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 801b586:	203f      	movs	r0, #63	; 0x3f
 801b588:	f7ff fd0b 	bl	801afa2 <SX1276Read>
 801b58c:	0003      	movs	r3, r0
 801b58e:	001a      	movs	r2, r3
 801b590:	1d7b      	adds	r3, r7, #5
 801b592:	701a      	strb	r2, [r3, #0]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 801b594:	1d7b      	adds	r3, r7, #5
 801b596:	781b      	ldrb	r3, [r3, #0]
 801b598:	b2db      	uxtb	r3, r3
 801b59a:	001a      	movs	r2, r3
 801b59c:	2302      	movs	r3, #2
 801b59e:	4013      	ands	r3, r2
 801b5a0:	2b02      	cmp	r3, #2
 801b5a2:	d043      	beq.n	801b62c <SX1276OnDio0Irq+0xdc>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 801b5a4:	210b      	movs	r1, #11
 801b5a6:	203e      	movs	r0, #62	; 0x3e
 801b5a8:	f7ff fcea 	bl	801af80 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 801b5ac:	2110      	movs	r1, #16
 801b5ae:	203f      	movs	r0, #63	; 0x3f
 801b5b0:	f7ff fce6 	bl	801af80 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 801b5b4:	4bae      	ldr	r3, [pc, #696]	; (801b870 <SX1276OnDio0Irq+0x320>)
 801b5b6:	0018      	movs	r0, r3
 801b5b8:	f001 fb56 	bl	801cc68 <UTIL_TIMER_Stop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 801b5bc:	4bab      	ldr	r3, [pc, #684]	; (801b86c <SX1276OnDio0Irq+0x31c>)
 801b5be:	2226      	movs	r2, #38	; 0x26
 801b5c0:	5c9b      	ldrb	r3, [r3, r2]
 801b5c2:	2201      	movs	r2, #1
 801b5c4:	4053      	eors	r3, r2
 801b5c6:	b2db      	uxtb	r3, r3
 801b5c8:	2b00      	cmp	r3, #0
 801b5ca:	d007      	beq.n	801b5dc <SX1276OnDio0Irq+0x8c>
                            TimerStop( &RxTimeoutSyncWord );
 801b5cc:	4ba9      	ldr	r3, [pc, #676]	; (801b874 <SX1276OnDio0Irq+0x324>)
 801b5ce:	0018      	movs	r0, r3
 801b5d0:	f001 fb4a 	bl	801cc68 <UTIL_TIMER_Stop>
                            SX1276.Settings.State = RF_IDLE;
 801b5d4:	4ba5      	ldr	r3, [pc, #660]	; (801b86c <SX1276OnDio0Irq+0x31c>)
 801b5d6:	2200      	movs	r2, #0
 801b5d8:	711a      	strb	r2, [r3, #4]
 801b5da:	e00b      	b.n	801b5f4 <SX1276OnDio0Irq+0xa4>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 801b5dc:	200d      	movs	r0, #13
 801b5de:	f7ff fce0 	bl	801afa2 <SX1276Read>
 801b5e2:	0003      	movs	r3, r0
 801b5e4:	001a      	movs	r2, r3
 801b5e6:	2340      	movs	r3, #64	; 0x40
 801b5e8:	4313      	orrs	r3, r2
 801b5ea:	b2db      	uxtb	r3, r3
 801b5ec:	0019      	movs	r1, r3
 801b5ee:	200d      	movs	r0, #13
 801b5f0:	f7ff fcc6 	bl	801af80 <SX1276Write>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 801b5f4:	4ba0      	ldr	r3, [pc, #640]	; (801b878 <SX1276OnDio0Irq+0x328>)
 801b5f6:	681b      	ldr	r3, [r3, #0]
 801b5f8:	2b00      	cmp	r3, #0
 801b5fa:	d008      	beq.n	801b60e <SX1276OnDio0Irq+0xbe>
 801b5fc:	4b9e      	ldr	r3, [pc, #632]	; (801b878 <SX1276OnDio0Irq+0x328>)
 801b5fe:	681b      	ldr	r3, [r3, #0]
 801b600:	691b      	ldr	r3, [r3, #16]
 801b602:	2b00      	cmp	r3, #0
 801b604:	d003      	beq.n	801b60e <SX1276OnDio0Irq+0xbe>
                            RadioEvents->RxError( );
 801b606:	4b9c      	ldr	r3, [pc, #624]	; (801b878 <SX1276OnDio0Irq+0x328>)
 801b608:	681b      	ldr	r3, [r3, #0]
 801b60a:	691b      	ldr	r3, [r3, #16]
 801b60c:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 801b60e:	4b97      	ldr	r3, [pc, #604]	; (801b86c <SX1276OnDio0Irq+0x31c>)
 801b610:	2230      	movs	r2, #48	; 0x30
 801b612:	2100      	movs	r1, #0
 801b614:	5499      	strb	r1, [r3, r2]
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 801b616:	4b95      	ldr	r3, [pc, #596]	; (801b86c <SX1276OnDio0Irq+0x31c>)
 801b618:	2231      	movs	r2, #49	; 0x31
 801b61a:	2100      	movs	r1, #0
 801b61c:	5499      	strb	r1, [r3, r2]
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801b61e:	4b93      	ldr	r3, [pc, #588]	; (801b86c <SX1276OnDio0Irq+0x31c>)
 801b620:	2200      	movs	r2, #0
 801b622:	879a      	strh	r2, [r3, #60]	; 0x3c
                        SX1276.Settings.FskPacketHandler.Size = 0;
 801b624:	4b91      	ldr	r3, [pc, #580]	; (801b86c <SX1276OnDio0Irq+0x31c>)
 801b626:	2200      	movs	r2, #0
 801b628:	875a      	strh	r2, [r3, #58]	; 0x3a
                        break;
 801b62a:	e180      	b.n	801b92e <SX1276OnDio0Irq+0x3de>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 801b62c:	4b8f      	ldr	r3, [pc, #572]	; (801b86c <SX1276OnDio0Irq+0x31c>)
 801b62e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801b630:	2b00      	cmp	r3, #0
 801b632:	d12d      	bne.n	801b690 <SX1276OnDio0Irq+0x140>
 801b634:	4b8d      	ldr	r3, [pc, #564]	; (801b86c <SX1276OnDio0Irq+0x31c>)
 801b636:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b638:	2b00      	cmp	r3, #0
 801b63a:	d129      	bne.n	801b690 <SX1276OnDio0Irq+0x140>
                    if( SX1276.Settings.Fsk.FixLen == false )
 801b63c:	4b8b      	ldr	r3, [pc, #556]	; (801b86c <SX1276OnDio0Irq+0x31c>)
 801b63e:	2222      	movs	r2, #34	; 0x22
 801b640:	5c9b      	ldrb	r3, [r3, r2]
 801b642:	2201      	movs	r2, #1
 801b644:	4053      	eors	r3, r2
 801b646:	b2db      	uxtb	r3, r3
 801b648:	2b00      	cmp	r3, #0
 801b64a:	d005      	beq.n	801b658 <SX1276OnDio0Irq+0x108>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 801b64c:	4b8b      	ldr	r3, [pc, #556]	; (801b87c <SX1276OnDio0Irq+0x32c>)
 801b64e:	2101      	movs	r1, #1
 801b650:	0018      	movs	r0, r3
 801b652:	f7ff fd33 	bl	801b0bc <SX1276ReadFifo>
 801b656:	e006      	b.n	801b666 <SX1276OnDio0Irq+0x116>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 801b658:	2032      	movs	r0, #50	; 0x32
 801b65a:	f7ff fca2 	bl	801afa2 <SX1276Read>
 801b65e:	0003      	movs	r3, r0
 801b660:	b29a      	uxth	r2, r3
 801b662:	4b82      	ldr	r3, [pc, #520]	; (801b86c <SX1276OnDio0Irq+0x31c>)
 801b664:	875a      	strh	r2, [r3, #58]	; 0x3a
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801b666:	4b81      	ldr	r3, [pc, #516]	; (801b86c <SX1276OnDio0Irq+0x31c>)
 801b668:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b66a:	001a      	movs	r2, r3
 801b66c:	4b84      	ldr	r3, [pc, #528]	; (801b880 <SX1276OnDio0Irq+0x330>)
 801b66e:	18d0      	adds	r0, r2, r3
 801b670:	4b7e      	ldr	r3, [pc, #504]	; (801b86c <SX1276OnDio0Irq+0x31c>)
 801b672:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801b674:	b2da      	uxtb	r2, r3
 801b676:	4b7d      	ldr	r3, [pc, #500]	; (801b86c <SX1276OnDio0Irq+0x31c>)
 801b678:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b67a:	b2db      	uxtb	r3, r3
 801b67c:	1ad3      	subs	r3, r2, r3
 801b67e:	b2db      	uxtb	r3, r3
 801b680:	0019      	movs	r1, r3
 801b682:	f7ff fd1b 	bl	801b0bc <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801b686:	4b79      	ldr	r3, [pc, #484]	; (801b86c <SX1276OnDio0Irq+0x31c>)
 801b688:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801b68a:	4b78      	ldr	r3, [pc, #480]	; (801b86c <SX1276OnDio0Irq+0x31c>)
 801b68c:	879a      	strh	r2, [r3, #60]	; 0x3c
 801b68e:	e013      	b.n	801b6b8 <SX1276OnDio0Irq+0x168>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801b690:	4b76      	ldr	r3, [pc, #472]	; (801b86c <SX1276OnDio0Irq+0x31c>)
 801b692:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b694:	001a      	movs	r2, r3
 801b696:	4b7a      	ldr	r3, [pc, #488]	; (801b880 <SX1276OnDio0Irq+0x330>)
 801b698:	18d0      	adds	r0, r2, r3
 801b69a:	4b74      	ldr	r3, [pc, #464]	; (801b86c <SX1276OnDio0Irq+0x31c>)
 801b69c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801b69e:	b2da      	uxtb	r2, r3
 801b6a0:	4b72      	ldr	r3, [pc, #456]	; (801b86c <SX1276OnDio0Irq+0x31c>)
 801b6a2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b6a4:	b2db      	uxtb	r3, r3
 801b6a6:	1ad3      	subs	r3, r2, r3
 801b6a8:	b2db      	uxtb	r3, r3
 801b6aa:	0019      	movs	r1, r3
 801b6ac:	f7ff fd06 	bl	801b0bc <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801b6b0:	4b6e      	ldr	r3, [pc, #440]	; (801b86c <SX1276OnDio0Irq+0x31c>)
 801b6b2:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801b6b4:	4b6d      	ldr	r3, [pc, #436]	; (801b86c <SX1276OnDio0Irq+0x31c>)
 801b6b6:	879a      	strh	r2, [r3, #60]	; 0x3c
                TimerStop( &RxTimeoutTimer );
 801b6b8:	4b6d      	ldr	r3, [pc, #436]	; (801b870 <SX1276OnDio0Irq+0x320>)
 801b6ba:	0018      	movs	r0, r3
 801b6bc:	f001 fad4 	bl	801cc68 <UTIL_TIMER_Stop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 801b6c0:	4b6a      	ldr	r3, [pc, #424]	; (801b86c <SX1276OnDio0Irq+0x31c>)
 801b6c2:	2226      	movs	r2, #38	; 0x26
 801b6c4:	5c9b      	ldrb	r3, [r3, r2]
 801b6c6:	2201      	movs	r2, #1
 801b6c8:	4053      	eors	r3, r2
 801b6ca:	b2db      	uxtb	r3, r3
 801b6cc:	2b00      	cmp	r3, #0
 801b6ce:	d007      	beq.n	801b6e0 <SX1276OnDio0Irq+0x190>
                    SX1276.Settings.State = RF_IDLE;
 801b6d0:	4b66      	ldr	r3, [pc, #408]	; (801b86c <SX1276OnDio0Irq+0x31c>)
 801b6d2:	2200      	movs	r2, #0
 801b6d4:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutSyncWord );
 801b6d6:	4b67      	ldr	r3, [pc, #412]	; (801b874 <SX1276OnDio0Irq+0x324>)
 801b6d8:	0018      	movs	r0, r3
 801b6da:	f001 fac5 	bl	801cc68 <UTIL_TIMER_Stop>
 801b6de:	e00b      	b.n	801b6f8 <SX1276OnDio0Irq+0x1a8>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 801b6e0:	200d      	movs	r0, #13
 801b6e2:	f7ff fc5e 	bl	801afa2 <SX1276Read>
 801b6e6:	0003      	movs	r3, r0
 801b6e8:	001a      	movs	r2, r3
 801b6ea:	2340      	movs	r3, #64	; 0x40
 801b6ec:	4313      	orrs	r3, r2
 801b6ee:	b2db      	uxtb	r3, r3
 801b6f0:	0019      	movs	r1, r3
 801b6f2:	200d      	movs	r0, #13
 801b6f4:	f7ff fc44 	bl	801af80 <SX1276Write>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801b6f8:	4b5f      	ldr	r3, [pc, #380]	; (801b878 <SX1276OnDio0Irq+0x328>)
 801b6fa:	681b      	ldr	r3, [r3, #0]
 801b6fc:	2b00      	cmp	r3, #0
 801b6fe:	d010      	beq.n	801b722 <SX1276OnDio0Irq+0x1d2>
 801b700:	4b5d      	ldr	r3, [pc, #372]	; (801b878 <SX1276OnDio0Irq+0x328>)
 801b702:	681b      	ldr	r3, [r3, #0]
 801b704:	689b      	ldr	r3, [r3, #8]
 801b706:	2b00      	cmp	r3, #0
 801b708:	d00b      	beq.n	801b722 <SX1276OnDio0Irq+0x1d2>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 801b70a:	4b5b      	ldr	r3, [pc, #364]	; (801b878 <SX1276OnDio0Irq+0x328>)
 801b70c:	681b      	ldr	r3, [r3, #0]
 801b70e:	689c      	ldr	r4, [r3, #8]
 801b710:	4b56      	ldr	r3, [pc, #344]	; (801b86c <SX1276OnDio0Irq+0x31c>)
 801b712:	8f59      	ldrh	r1, [r3, #58]	; 0x3a
 801b714:	4b55      	ldr	r3, [pc, #340]	; (801b86c <SX1276OnDio0Irq+0x31c>)
 801b716:	2232      	movs	r2, #50	; 0x32
 801b718:	569b      	ldrsb	r3, [r3, r2]
 801b71a:	b21a      	sxth	r2, r3
 801b71c:	4858      	ldr	r0, [pc, #352]	; (801b880 <SX1276OnDio0Irq+0x330>)
 801b71e:	2300      	movs	r3, #0
 801b720:	47a0      	blx	r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 801b722:	4b52      	ldr	r3, [pc, #328]	; (801b86c <SX1276OnDio0Irq+0x31c>)
 801b724:	2230      	movs	r2, #48	; 0x30
 801b726:	2100      	movs	r1, #0
 801b728:	5499      	strb	r1, [r3, r2]
                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 801b72a:	4b50      	ldr	r3, [pc, #320]	; (801b86c <SX1276OnDio0Irq+0x31c>)
 801b72c:	2231      	movs	r2, #49	; 0x31
 801b72e:	2100      	movs	r1, #0
 801b730:	5499      	strb	r1, [r3, r2]
                SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801b732:	4b4e      	ldr	r3, [pc, #312]	; (801b86c <SX1276OnDio0Irq+0x31c>)
 801b734:	2200      	movs	r2, #0
 801b736:	879a      	strh	r2, [r3, #60]	; 0x3c
                SX1276.Settings.FskPacketHandler.Size = 0;
 801b738:	4b4c      	ldr	r3, [pc, #304]	; (801b86c <SX1276OnDio0Irq+0x31c>)
 801b73a:	2200      	movs	r2, #0
 801b73c:	875a      	strh	r2, [r3, #58]	; 0x3a
                break;
 801b73e:	e0f6      	b.n	801b92e <SX1276OnDio0Irq+0x3de>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 801b740:	2140      	movs	r1, #64	; 0x40
 801b742:	2012      	movs	r0, #18
 801b744:	f7ff fc1c 	bl	801af80 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 801b748:	2012      	movs	r0, #18
 801b74a:	f7ff fc2a 	bl	801afa2 <SX1276Read>
 801b74e:	0003      	movs	r3, r0
 801b750:	001a      	movs	r2, r3
 801b752:	1d7b      	adds	r3, r7, #5
 801b754:	701a      	strb	r2, [r3, #0]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 801b756:	1d7b      	adds	r3, r7, #5
 801b758:	781b      	ldrb	r3, [r3, #0]
 801b75a:	b2db      	uxtb	r3, r3
 801b75c:	001a      	movs	r2, r3
 801b75e:	2320      	movs	r3, #32
 801b760:	4013      	ands	r3, r2
 801b762:	2b20      	cmp	r3, #32
 801b764:	d122      	bne.n	801b7ac <SX1276OnDio0Irq+0x25c>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 801b766:	2120      	movs	r1, #32
 801b768:	2012      	movs	r0, #18
 801b76a:	f7ff fc09 	bl	801af80 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 801b76e:	4b3f      	ldr	r3, [pc, #252]	; (801b86c <SX1276OnDio0Irq+0x31c>)
 801b770:	2256      	movs	r2, #86	; 0x56
 801b772:	5c9b      	ldrb	r3, [r3, r2]
 801b774:	2201      	movs	r2, #1
 801b776:	4053      	eors	r3, r2
 801b778:	b2db      	uxtb	r3, r3
 801b77a:	2b00      	cmp	r3, #0
 801b77c:	d002      	beq.n	801b784 <SX1276OnDio0Irq+0x234>
                            SX1276.Settings.State = RF_IDLE;
 801b77e:	4b3b      	ldr	r3, [pc, #236]	; (801b86c <SX1276OnDio0Irq+0x31c>)
 801b780:	2200      	movs	r2, #0
 801b782:	711a      	strb	r2, [r3, #4]
                        TimerStop( &RxTimeoutTimer );
 801b784:	4b3a      	ldr	r3, [pc, #232]	; (801b870 <SX1276OnDio0Irq+0x320>)
 801b786:	0018      	movs	r0, r3
 801b788:	f001 fa6e 	bl	801cc68 <UTIL_TIMER_Stop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 801b78c:	4b3a      	ldr	r3, [pc, #232]	; (801b878 <SX1276OnDio0Irq+0x328>)
 801b78e:	681b      	ldr	r3, [r3, #0]
 801b790:	2b00      	cmp	r3, #0
 801b792:	d100      	bne.n	801b796 <SX1276OnDio0Irq+0x246>
 801b794:	e0c8      	b.n	801b928 <SX1276OnDio0Irq+0x3d8>
 801b796:	4b38      	ldr	r3, [pc, #224]	; (801b878 <SX1276OnDio0Irq+0x328>)
 801b798:	681b      	ldr	r3, [r3, #0]
 801b79a:	691b      	ldr	r3, [r3, #16]
 801b79c:	2b00      	cmp	r3, #0
 801b79e:	d100      	bne.n	801b7a2 <SX1276OnDio0Irq+0x252>
 801b7a0:	e0c2      	b.n	801b928 <SX1276OnDio0Irq+0x3d8>
                            RadioEvents->RxError( );
 801b7a2:	4b35      	ldr	r3, [pc, #212]	; (801b878 <SX1276OnDio0Irq+0x328>)
 801b7a4:	681b      	ldr	r3, [r3, #0]
 801b7a6:	691b      	ldr	r3, [r3, #16]
 801b7a8:	4798      	blx	r3
                        break;
 801b7aa:	e0bd      	b.n	801b928 <SX1276OnDio0Irq+0x3d8>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 801b7ac:	2019      	movs	r0, #25
 801b7ae:	f7ff fbf8 	bl	801afa2 <SX1276Read>
 801b7b2:	0003      	movs	r3, r0
 801b7b4:	b25b      	sxtb	r3, r3
 801b7b6:	3302      	adds	r3, #2
 801b7b8:	109b      	asrs	r3, r3, #2
 801b7ba:	b259      	sxtb	r1, r3
 801b7bc:	4b2b      	ldr	r3, [pc, #172]	; (801b86c <SX1276OnDio0Irq+0x31c>)
 801b7be:	2260      	movs	r2, #96	; 0x60
 801b7c0:	5499      	strb	r1, [r3, r2]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 801b7c2:	201a      	movs	r0, #26
 801b7c4:	f7ff fbed 	bl	801afa2 <SX1276Read>
 801b7c8:	0003      	movs	r3, r0
 801b7ca:	001a      	movs	r2, r3
 801b7cc:	1dbb      	adds	r3, r7, #6
 801b7ce:	801a      	strh	r2, [r3, #0]
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 801b7d0:	4b26      	ldr	r3, [pc, #152]	; (801b86c <SX1276OnDio0Irq+0x31c>)
 801b7d2:	2260      	movs	r2, #96	; 0x60
 801b7d4:	569b      	ldrsb	r3, [r3, r2]
 801b7d6:	2b00      	cmp	r3, #0
 801b7d8:	da32      	bge.n	801b840 <SX1276OnDio0Irq+0x2f0>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 801b7da:	4b24      	ldr	r3, [pc, #144]	; (801b86c <SX1276OnDio0Irq+0x31c>)
 801b7dc:	689b      	ldr	r3, [r3, #8]
 801b7de:	4a29      	ldr	r2, [pc, #164]	; (801b884 <SX1276OnDio0Irq+0x334>)
 801b7e0:	4293      	cmp	r3, r2
 801b7e2:	d916      	bls.n	801b812 <SX1276OnDio0Irq+0x2c2>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 801b7e4:	1dbb      	adds	r3, r7, #6
 801b7e6:	2200      	movs	r2, #0
 801b7e8:	5e9b      	ldrsh	r3, [r3, r2]
 801b7ea:	111b      	asrs	r3, r3, #4
 801b7ec:	b21b      	sxth	r3, r3
 801b7ee:	b29a      	uxth	r2, r3
 801b7f0:	1dbb      	adds	r3, r7, #6
 801b7f2:	881b      	ldrh	r3, [r3, #0]
 801b7f4:	18d3      	adds	r3, r2, r3
 801b7f6:	b29a      	uxth	r2, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 801b7f8:	4b1c      	ldr	r3, [pc, #112]	; (801b86c <SX1276OnDio0Irq+0x31c>)
 801b7fa:	2160      	movs	r1, #96	; 0x60
 801b7fc:	565b      	ldrsb	r3, [r3, r1]
 801b7fe:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 801b800:	18d3      	adds	r3, r2, r3
 801b802:	b29b      	uxth	r3, r3
 801b804:	3b9d      	subs	r3, #157	; 0x9d
 801b806:	b29b      	uxth	r3, r3
 801b808:	b219      	sxth	r1, r3
 801b80a:	4b18      	ldr	r3, [pc, #96]	; (801b86c <SX1276OnDio0Irq+0x31c>)
 801b80c:	2262      	movs	r2, #98	; 0x62
 801b80e:	5299      	strh	r1, [r3, r2]
 801b810:	e04a      	b.n	801b8a8 <SX1276OnDio0Irq+0x358>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 801b812:	1dbb      	adds	r3, r7, #6
 801b814:	2200      	movs	r2, #0
 801b816:	5e9b      	ldrsh	r3, [r3, r2]
 801b818:	111b      	asrs	r3, r3, #4
 801b81a:	b21b      	sxth	r3, r3
 801b81c:	b29a      	uxth	r2, r3
 801b81e:	1dbb      	adds	r3, r7, #6
 801b820:	881b      	ldrh	r3, [r3, #0]
 801b822:	18d3      	adds	r3, r2, r3
 801b824:	b29a      	uxth	r2, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 801b826:	4b11      	ldr	r3, [pc, #68]	; (801b86c <SX1276OnDio0Irq+0x31c>)
 801b828:	2160      	movs	r1, #96	; 0x60
 801b82a:	565b      	ldrsb	r3, [r3, r1]
 801b82c:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 801b82e:	18d3      	adds	r3, r2, r3
 801b830:	b29b      	uxth	r3, r3
 801b832:	3ba4      	subs	r3, #164	; 0xa4
 801b834:	b29b      	uxth	r3, r3
 801b836:	b219      	sxth	r1, r3
 801b838:	4b0c      	ldr	r3, [pc, #48]	; (801b86c <SX1276OnDio0Irq+0x31c>)
 801b83a:	2262      	movs	r2, #98	; 0x62
 801b83c:	5299      	strh	r1, [r3, r2]
 801b83e:	e033      	b.n	801b8a8 <SX1276OnDio0Irq+0x358>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 801b840:	4b0a      	ldr	r3, [pc, #40]	; (801b86c <SX1276OnDio0Irq+0x31c>)
 801b842:	689b      	ldr	r3, [r3, #8]
 801b844:	4a0f      	ldr	r2, [pc, #60]	; (801b884 <SX1276OnDio0Irq+0x334>)
 801b846:	4293      	cmp	r3, r2
 801b848:	d91e      	bls.n	801b888 <SX1276OnDio0Irq+0x338>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 801b84a:	1dbb      	adds	r3, r7, #6
 801b84c:	2200      	movs	r2, #0
 801b84e:	5e9b      	ldrsh	r3, [r3, r2]
 801b850:	111b      	asrs	r3, r3, #4
 801b852:	b21b      	sxth	r3, r3
 801b854:	b29a      	uxth	r2, r3
 801b856:	1dbb      	adds	r3, r7, #6
 801b858:	881b      	ldrh	r3, [r3, #0]
 801b85a:	18d3      	adds	r3, r2, r3
 801b85c:	b29b      	uxth	r3, r3
 801b85e:	3b9d      	subs	r3, #157	; 0x9d
 801b860:	b29b      	uxth	r3, r3
 801b862:	b219      	sxth	r1, r3
 801b864:	4b01      	ldr	r3, [pc, #4]	; (801b86c <SX1276OnDio0Irq+0x31c>)
 801b866:	2262      	movs	r2, #98	; 0x62
 801b868:	5299      	strh	r1, [r3, r2]
 801b86a:	e01d      	b.n	801b8a8 <SX1276OnDio0Irq+0x358>
 801b86c:	20001774 	.word	0x20001774
 801b870:	200017dc 	.word	0x200017dc
 801b874:	2000175c 	.word	0x2000175c
 801b878:	20000e80 	.word	0x20000e80
 801b87c:	200017ae 	.word	0x200017ae
 801b880:	20000e84 	.word	0x20000e84
 801b884:	1f4add40 	.word	0x1f4add40
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 801b888:	1dbb      	adds	r3, r7, #6
 801b88a:	2200      	movs	r2, #0
 801b88c:	5e9b      	ldrsh	r3, [r3, r2]
 801b88e:	111b      	asrs	r3, r3, #4
 801b890:	b21b      	sxth	r3, r3
 801b892:	b29a      	uxth	r2, r3
 801b894:	1dbb      	adds	r3, r7, #6
 801b896:	881b      	ldrh	r3, [r3, #0]
 801b898:	18d3      	adds	r3, r2, r3
 801b89a:	b29b      	uxth	r3, r3
 801b89c:	3ba4      	subs	r3, #164	; 0xa4
 801b89e:	b29b      	uxth	r3, r3
 801b8a0:	b219      	sxth	r1, r3
 801b8a2:	4b34      	ldr	r3, [pc, #208]	; (801b974 <SX1276OnDio0Irq+0x424>)
 801b8a4:	2262      	movs	r2, #98	; 0x62
 801b8a6:	5299      	strh	r1, [r3, r2]
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 801b8a8:	2013      	movs	r0, #19
 801b8aa:	f7ff fb7a 	bl	801afa2 <SX1276Read>
 801b8ae:	0003      	movs	r3, r0
 801b8b0:	0019      	movs	r1, r3
 801b8b2:	4b30      	ldr	r3, [pc, #192]	; (801b974 <SX1276OnDio0Irq+0x424>)
 801b8b4:	2264      	movs	r2, #100	; 0x64
 801b8b6:	5499      	strb	r1, [r3, r2]
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 801b8b8:	2010      	movs	r0, #16
 801b8ba:	f7ff fb72 	bl	801afa2 <SX1276Read>
 801b8be:	0003      	movs	r3, r0
 801b8c0:	0019      	movs	r1, r3
 801b8c2:	200d      	movs	r0, #13
 801b8c4:	f7ff fb5c 	bl	801af80 <SX1276Write>
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 801b8c8:	4b2a      	ldr	r3, [pc, #168]	; (801b974 <SX1276OnDio0Irq+0x424>)
 801b8ca:	2264      	movs	r2, #100	; 0x64
 801b8cc:	5c9a      	ldrb	r2, [r3, r2]
 801b8ce:	4b2a      	ldr	r3, [pc, #168]	; (801b978 <SX1276OnDio0Irq+0x428>)
 801b8d0:	0011      	movs	r1, r2
 801b8d2:	0018      	movs	r0, r3
 801b8d4:	f7ff fbf2 	bl	801b0bc <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 801b8d8:	4b26      	ldr	r3, [pc, #152]	; (801b974 <SX1276OnDio0Irq+0x424>)
 801b8da:	2256      	movs	r2, #86	; 0x56
 801b8dc:	5c9b      	ldrb	r3, [r3, r2]
 801b8de:	2201      	movs	r2, #1
 801b8e0:	4053      	eors	r3, r2
 801b8e2:	b2db      	uxtb	r3, r3
 801b8e4:	2b00      	cmp	r3, #0
 801b8e6:	d002      	beq.n	801b8ee <SX1276OnDio0Irq+0x39e>
                        SX1276.Settings.State = RF_IDLE;
 801b8e8:	4b22      	ldr	r3, [pc, #136]	; (801b974 <SX1276OnDio0Irq+0x424>)
 801b8ea:	2200      	movs	r2, #0
 801b8ec:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutTimer );
 801b8ee:	4b23      	ldr	r3, [pc, #140]	; (801b97c <SX1276OnDio0Irq+0x42c>)
 801b8f0:	0018      	movs	r0, r3
 801b8f2:	f001 f9b9 	bl	801cc68 <UTIL_TIMER_Stop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801b8f6:	4b22      	ldr	r3, [pc, #136]	; (801b980 <SX1276OnDio0Irq+0x430>)
 801b8f8:	681b      	ldr	r3, [r3, #0]
 801b8fa:	2b00      	cmp	r3, #0
 801b8fc:	d016      	beq.n	801b92c <SX1276OnDio0Irq+0x3dc>
 801b8fe:	4b20      	ldr	r3, [pc, #128]	; (801b980 <SX1276OnDio0Irq+0x430>)
 801b900:	681b      	ldr	r3, [r3, #0]
 801b902:	689b      	ldr	r3, [r3, #8]
 801b904:	2b00      	cmp	r3, #0
 801b906:	d011      	beq.n	801b92c <SX1276OnDio0Irq+0x3dc>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 801b908:	4b1d      	ldr	r3, [pc, #116]	; (801b980 <SX1276OnDio0Irq+0x430>)
 801b90a:	681b      	ldr	r3, [r3, #0]
 801b90c:	689c      	ldr	r4, [r3, #8]
 801b90e:	4b19      	ldr	r3, [pc, #100]	; (801b974 <SX1276OnDio0Irq+0x424>)
 801b910:	2264      	movs	r2, #100	; 0x64
 801b912:	5c9b      	ldrb	r3, [r3, r2]
 801b914:	b299      	uxth	r1, r3
 801b916:	4b17      	ldr	r3, [pc, #92]	; (801b974 <SX1276OnDio0Irq+0x424>)
 801b918:	2262      	movs	r2, #98	; 0x62
 801b91a:	5e9a      	ldrsh	r2, [r3, r2]
 801b91c:	4b15      	ldr	r3, [pc, #84]	; (801b974 <SX1276OnDio0Irq+0x424>)
 801b91e:	2060      	movs	r0, #96	; 0x60
 801b920:	561b      	ldrsb	r3, [r3, r0]
 801b922:	4815      	ldr	r0, [pc, #84]	; (801b978 <SX1276OnDio0Irq+0x428>)
 801b924:	47a0      	blx	r4
                break;
 801b926:	e001      	b.n	801b92c <SX1276OnDio0Irq+0x3dc>
                        break;
 801b928:	46c0      	nop			; (mov r8, r8)
 801b92a:	e01f      	b.n	801b96c <SX1276OnDio0Irq+0x41c>
                break;
 801b92c:	46c0      	nop			; (mov r8, r8)
            break;
 801b92e:	e01d      	b.n	801b96c <SX1276OnDio0Irq+0x41c>
            TimerStop( &TxTimeoutTimer );
 801b930:	4b14      	ldr	r3, [pc, #80]	; (801b984 <SX1276OnDio0Irq+0x434>)
 801b932:	0018      	movs	r0, r3
 801b934:	f001 f998 	bl	801cc68 <UTIL_TIMER_Stop>
            switch( SX1276.Settings.Modem )
 801b938:	4b0e      	ldr	r3, [pc, #56]	; (801b974 <SX1276OnDio0Irq+0x424>)
 801b93a:	795b      	ldrb	r3, [r3, #5]
 801b93c:	2b01      	cmp	r3, #1
 801b93e:	d103      	bne.n	801b948 <SX1276OnDio0Irq+0x3f8>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 801b940:	2108      	movs	r1, #8
 801b942:	2012      	movs	r0, #18
 801b944:	f7ff fb1c 	bl	801af80 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 801b948:	4b0a      	ldr	r3, [pc, #40]	; (801b974 <SX1276OnDio0Irq+0x424>)
 801b94a:	2200      	movs	r2, #0
 801b94c:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 801b94e:	4b0c      	ldr	r3, [pc, #48]	; (801b980 <SX1276OnDio0Irq+0x430>)
 801b950:	681b      	ldr	r3, [r3, #0]
 801b952:	2b00      	cmp	r3, #0
 801b954:	d008      	beq.n	801b968 <SX1276OnDio0Irq+0x418>
 801b956:	4b0a      	ldr	r3, [pc, #40]	; (801b980 <SX1276OnDio0Irq+0x430>)
 801b958:	681b      	ldr	r3, [r3, #0]
 801b95a:	681b      	ldr	r3, [r3, #0]
 801b95c:	2b00      	cmp	r3, #0
 801b95e:	d003      	beq.n	801b968 <SX1276OnDio0Irq+0x418>
                    RadioEvents->TxDone( );
 801b960:	4b07      	ldr	r3, [pc, #28]	; (801b980 <SX1276OnDio0Irq+0x430>)
 801b962:	681b      	ldr	r3, [r3, #0]
 801b964:	681b      	ldr	r3, [r3, #0]
 801b966:	4798      	blx	r3
                break;
 801b968:	46c0      	nop			; (mov r8, r8)
            break;
 801b96a:	46c0      	nop			; (mov r8, r8)
    }
}
 801b96c:	46c0      	nop			; (mov r8, r8)
 801b96e:	46bd      	mov	sp, r7
 801b970:	b003      	add	sp, #12
 801b972:	bd90      	pop	{r4, r7, pc}
 801b974:	20001774 	.word	0x20001774
 801b978:	20000e84 	.word	0x20000e84
 801b97c:	200017dc 	.word	0x200017dc
 801b980:	20000e80 	.word	0x20000e80
 801b984:	20001744 	.word	0x20001744

0801b988 <SX1276OnDio1Irq>:

static void SX1276OnDio1Irq( void )
{
 801b988:	b580      	push	{r7, lr}
 801b98a:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.State )
 801b98c:	4b6c      	ldr	r3, [pc, #432]	; (801bb40 <SX1276OnDio1Irq+0x1b8>)
 801b98e:	791b      	ldrb	r3, [r3, #4]
 801b990:	2b01      	cmp	r3, #1
 801b992:	d003      	beq.n	801b99c <SX1276OnDio1Irq+0x14>
 801b994:	2b02      	cmp	r3, #2
 801b996:	d100      	bne.n	801b99a <SX1276OnDio1Irq+0x12>
 801b998:	e08b      	b.n	801bab2 <SX1276OnDio1Irq+0x12a>
            default:
                break;
            }
            break;
        default:
            break;
 801b99a:	e0ce      	b.n	801bb3a <SX1276OnDio1Irq+0x1b2>
            switch( SX1276.Settings.Modem )
 801b99c:	4b68      	ldr	r3, [pc, #416]	; (801bb40 <SX1276OnDio1Irq+0x1b8>)
 801b99e:	795b      	ldrb	r3, [r3, #5]
 801b9a0:	2b00      	cmp	r3, #0
 801b9a2:	d002      	beq.n	801b9aa <SX1276OnDio1Irq+0x22>
 801b9a4:	2b01      	cmp	r3, #1
 801b9a6:	d061      	beq.n	801ba6c <SX1276OnDio1Irq+0xe4>
                break;
 801b9a8:	e082      	b.n	801bab0 <SX1276OnDio1Irq+0x128>
                if( Sx_Board_GetDio1PinState( ) == 0 )
 801b9aa:	f7ea fb5b 	bl	8006064 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 801b9ae:	1e03      	subs	r3, r0, #0
 801b9b0:	d100      	bne.n	801b9b4 <SX1276OnDio1Irq+0x2c>
 801b9b2:	e078      	b.n	801baa6 <SX1276OnDio1Irq+0x11e>
                TimerStop( &RxTimeoutSyncWord );
 801b9b4:	4b63      	ldr	r3, [pc, #396]	; (801bb44 <SX1276OnDio1Irq+0x1bc>)
 801b9b6:	0018      	movs	r0, r3
 801b9b8:	f001 f956 	bl	801cc68 <UTIL_TIMER_Stop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 801b9bc:	4b60      	ldr	r3, [pc, #384]	; (801bb40 <SX1276OnDio1Irq+0x1b8>)
 801b9be:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801b9c0:	2b00      	cmp	r3, #0
 801b9c2:	d118      	bne.n	801b9f6 <SX1276OnDio1Irq+0x6e>
 801b9c4:	4b5e      	ldr	r3, [pc, #376]	; (801bb40 <SX1276OnDio1Irq+0x1b8>)
 801b9c6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b9c8:	2b00      	cmp	r3, #0
 801b9ca:	d114      	bne.n	801b9f6 <SX1276OnDio1Irq+0x6e>
                    if( SX1276.Settings.Fsk.FixLen == false )
 801b9cc:	4b5c      	ldr	r3, [pc, #368]	; (801bb40 <SX1276OnDio1Irq+0x1b8>)
 801b9ce:	2222      	movs	r2, #34	; 0x22
 801b9d0:	5c9b      	ldrb	r3, [r3, r2]
 801b9d2:	2201      	movs	r2, #1
 801b9d4:	4053      	eors	r3, r2
 801b9d6:	b2db      	uxtb	r3, r3
 801b9d8:	2b00      	cmp	r3, #0
 801b9da:	d005      	beq.n	801b9e8 <SX1276OnDio1Irq+0x60>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 801b9dc:	4b5a      	ldr	r3, [pc, #360]	; (801bb48 <SX1276OnDio1Irq+0x1c0>)
 801b9de:	2101      	movs	r1, #1
 801b9e0:	0018      	movs	r0, r3
 801b9e2:	f7ff fb6b 	bl	801b0bc <SX1276ReadFifo>
 801b9e6:	e006      	b.n	801b9f6 <SX1276OnDio1Irq+0x6e>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 801b9e8:	2032      	movs	r0, #50	; 0x32
 801b9ea:	f7ff fada 	bl	801afa2 <SX1276Read>
 801b9ee:	0003      	movs	r3, r0
 801b9f0:	b29a      	uxth	r2, r3
 801b9f2:	4b53      	ldr	r3, [pc, #332]	; (801bb40 <SX1276OnDio1Irq+0x1b8>)
 801b9f4:	875a      	strh	r2, [r3, #58]	; 0x3a
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 801b9f6:	4b52      	ldr	r3, [pc, #328]	; (801bb40 <SX1276OnDio1Irq+0x1b8>)
 801b9f8:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801b9fa:	001a      	movs	r2, r3
 801b9fc:	4b50      	ldr	r3, [pc, #320]	; (801bb40 <SX1276OnDio1Irq+0x1b8>)
 801b9fe:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801ba00:	1ad3      	subs	r3, r2, r3
 801ba02:	4a4f      	ldr	r2, [pc, #316]	; (801bb40 <SX1276OnDio1Irq+0x1b8>)
 801ba04:	213e      	movs	r1, #62	; 0x3e
 801ba06:	5c52      	ldrb	r2, [r2, r1]
 801ba08:	4293      	cmp	r3, r2
 801ba0a:	db1a      	blt.n	801ba42 <SX1276OnDio1Irq+0xba>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 801ba0c:	4b4c      	ldr	r3, [pc, #304]	; (801bb40 <SX1276OnDio1Irq+0x1b8>)
 801ba0e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801ba10:	001a      	movs	r2, r3
 801ba12:	4b4e      	ldr	r3, [pc, #312]	; (801bb4c <SX1276OnDio1Irq+0x1c4>)
 801ba14:	18d2      	adds	r2, r2, r3
 801ba16:	4b4a      	ldr	r3, [pc, #296]	; (801bb40 <SX1276OnDio1Irq+0x1b8>)
 801ba18:	213e      	movs	r1, #62	; 0x3e
 801ba1a:	5c5b      	ldrb	r3, [r3, r1]
 801ba1c:	3b01      	subs	r3, #1
 801ba1e:	b2db      	uxtb	r3, r3
 801ba20:	0019      	movs	r1, r3
 801ba22:	0010      	movs	r0, r2
 801ba24:	f7ff fb4a 	bl	801b0bc <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 801ba28:	4b45      	ldr	r3, [pc, #276]	; (801bb40 <SX1276OnDio1Irq+0x1b8>)
 801ba2a:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 801ba2c:	4b44      	ldr	r3, [pc, #272]	; (801bb40 <SX1276OnDio1Irq+0x1b8>)
 801ba2e:	213e      	movs	r1, #62	; 0x3e
 801ba30:	5c5b      	ldrb	r3, [r3, r1]
 801ba32:	b29b      	uxth	r3, r3
 801ba34:	18d3      	adds	r3, r2, r3
 801ba36:	b29b      	uxth	r3, r3
 801ba38:	3b01      	subs	r3, #1
 801ba3a:	b29a      	uxth	r2, r3
 801ba3c:	4b40      	ldr	r3, [pc, #256]	; (801bb40 <SX1276OnDio1Irq+0x1b8>)
 801ba3e:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 801ba40:	e036      	b.n	801bab0 <SX1276OnDio1Irq+0x128>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801ba42:	4b3f      	ldr	r3, [pc, #252]	; (801bb40 <SX1276OnDio1Irq+0x1b8>)
 801ba44:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801ba46:	001a      	movs	r2, r3
 801ba48:	4b40      	ldr	r3, [pc, #256]	; (801bb4c <SX1276OnDio1Irq+0x1c4>)
 801ba4a:	18d0      	adds	r0, r2, r3
 801ba4c:	4b3c      	ldr	r3, [pc, #240]	; (801bb40 <SX1276OnDio1Irq+0x1b8>)
 801ba4e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801ba50:	b2da      	uxtb	r2, r3
 801ba52:	4b3b      	ldr	r3, [pc, #236]	; (801bb40 <SX1276OnDio1Irq+0x1b8>)
 801ba54:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801ba56:	b2db      	uxtb	r3, r3
 801ba58:	1ad3      	subs	r3, r2, r3
 801ba5a:	b2db      	uxtb	r3, r3
 801ba5c:	0019      	movs	r1, r3
 801ba5e:	f7ff fb2d 	bl	801b0bc <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801ba62:	4b37      	ldr	r3, [pc, #220]	; (801bb40 <SX1276OnDio1Irq+0x1b8>)
 801ba64:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801ba66:	4b36      	ldr	r3, [pc, #216]	; (801bb40 <SX1276OnDio1Irq+0x1b8>)
 801ba68:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 801ba6a:	e021      	b.n	801bab0 <SX1276OnDio1Irq+0x128>
                if( Sx_Board_GetDio1PinState( ) == 0 )
 801ba6c:	f7ea fafa 	bl	8006064 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 801ba70:	1e03      	subs	r3, r0, #0
 801ba72:	d01a      	beq.n	801baaa <SX1276OnDio1Irq+0x122>
                TimerStop( &RxTimeoutTimer );
 801ba74:	4b36      	ldr	r3, [pc, #216]	; (801bb50 <SX1276OnDio1Irq+0x1c8>)
 801ba76:	0018      	movs	r0, r3
 801ba78:	f001 f8f6 	bl	801cc68 <UTIL_TIMER_Stop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 801ba7c:	2180      	movs	r1, #128	; 0x80
 801ba7e:	2012      	movs	r0, #18
 801ba80:	f7ff fa7e 	bl	801af80 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 801ba84:	4b2e      	ldr	r3, [pc, #184]	; (801bb40 <SX1276OnDio1Irq+0x1b8>)
 801ba86:	2200      	movs	r2, #0
 801ba88:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801ba8a:	4b32      	ldr	r3, [pc, #200]	; (801bb54 <SX1276OnDio1Irq+0x1cc>)
 801ba8c:	681b      	ldr	r3, [r3, #0]
 801ba8e:	2b00      	cmp	r3, #0
 801ba90:	d00d      	beq.n	801baae <SX1276OnDio1Irq+0x126>
 801ba92:	4b30      	ldr	r3, [pc, #192]	; (801bb54 <SX1276OnDio1Irq+0x1cc>)
 801ba94:	681b      	ldr	r3, [r3, #0]
 801ba96:	68db      	ldr	r3, [r3, #12]
 801ba98:	2b00      	cmp	r3, #0
 801ba9a:	d008      	beq.n	801baae <SX1276OnDio1Irq+0x126>
                    RadioEvents->RxTimeout( );
 801ba9c:	4b2d      	ldr	r3, [pc, #180]	; (801bb54 <SX1276OnDio1Irq+0x1cc>)
 801ba9e:	681b      	ldr	r3, [r3, #0]
 801baa0:	68db      	ldr	r3, [r3, #12]
 801baa2:	4798      	blx	r3
                break;
 801baa4:	e003      	b.n	801baae <SX1276OnDio1Irq+0x126>
                    break;
 801baa6:	46c0      	nop			; (mov r8, r8)
 801baa8:	e047      	b.n	801bb3a <SX1276OnDio1Irq+0x1b2>
                    break;
 801baaa:	46c0      	nop			; (mov r8, r8)
 801baac:	e045      	b.n	801bb3a <SX1276OnDio1Irq+0x1b2>
                break;
 801baae:	46c0      	nop			; (mov r8, r8)
            break;
 801bab0:	e043      	b.n	801bb3a <SX1276OnDio1Irq+0x1b2>
            switch( SX1276.Settings.Modem )
 801bab2:	4b23      	ldr	r3, [pc, #140]	; (801bb40 <SX1276OnDio1Irq+0x1b8>)
 801bab4:	795b      	ldrb	r3, [r3, #5]
 801bab6:	2b00      	cmp	r3, #0
 801bab8:	d13b      	bne.n	801bb32 <SX1276OnDio1Irq+0x1aa>
                if( Sx_Board_GetDio1PinState( ) == 1 )
 801baba:	f7ea fad3 	bl	8006064 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 801babe:	0003      	movs	r3, r0
 801bac0:	2b01      	cmp	r3, #1
 801bac2:	d038      	beq.n	801bb36 <SX1276OnDio1Irq+0x1ae>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 801bac4:	4b1e      	ldr	r3, [pc, #120]	; (801bb40 <SX1276OnDio1Irq+0x1b8>)
 801bac6:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801bac8:	001a      	movs	r2, r3
 801baca:	4b1d      	ldr	r3, [pc, #116]	; (801bb40 <SX1276OnDio1Irq+0x1b8>)
 801bacc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801bace:	1ad3      	subs	r3, r2, r3
 801bad0:	4a1b      	ldr	r2, [pc, #108]	; (801bb40 <SX1276OnDio1Irq+0x1b8>)
 801bad2:	213f      	movs	r1, #63	; 0x3f
 801bad4:	5c52      	ldrb	r2, [r2, r1]
 801bad6:	4293      	cmp	r3, r2
 801bad8:	dd16      	ble.n	801bb08 <SX1276OnDio1Irq+0x180>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 801bada:	4b19      	ldr	r3, [pc, #100]	; (801bb40 <SX1276OnDio1Irq+0x1b8>)
 801badc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801bade:	001a      	movs	r2, r3
 801bae0:	4b1a      	ldr	r3, [pc, #104]	; (801bb4c <SX1276OnDio1Irq+0x1c4>)
 801bae2:	18d2      	adds	r2, r2, r3
 801bae4:	4b16      	ldr	r3, [pc, #88]	; (801bb40 <SX1276OnDio1Irq+0x1b8>)
 801bae6:	213f      	movs	r1, #63	; 0x3f
 801bae8:	5c5b      	ldrb	r3, [r3, r1]
 801baea:	0019      	movs	r1, r3
 801baec:	0010      	movs	r0, r2
 801baee:	f7ff fad3 	bl	801b098 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 801baf2:	4b13      	ldr	r3, [pc, #76]	; (801bb40 <SX1276OnDio1Irq+0x1b8>)
 801baf4:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 801baf6:	4b12      	ldr	r3, [pc, #72]	; (801bb40 <SX1276OnDio1Irq+0x1b8>)
 801baf8:	213f      	movs	r1, #63	; 0x3f
 801bafa:	5c5b      	ldrb	r3, [r3, r1]
 801bafc:	b29b      	uxth	r3, r3
 801bafe:	18d3      	adds	r3, r2, r3
 801bb00:	b29a      	uxth	r2, r3
 801bb02:	4b0f      	ldr	r3, [pc, #60]	; (801bb40 <SX1276OnDio1Irq+0x1b8>)
 801bb04:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 801bb06:	e017      	b.n	801bb38 <SX1276OnDio1Irq+0x1b0>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801bb08:	4b0d      	ldr	r3, [pc, #52]	; (801bb40 <SX1276OnDio1Irq+0x1b8>)
 801bb0a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801bb0c:	001a      	movs	r2, r3
 801bb0e:	4b0f      	ldr	r3, [pc, #60]	; (801bb4c <SX1276OnDio1Irq+0x1c4>)
 801bb10:	18d0      	adds	r0, r2, r3
 801bb12:	4b0b      	ldr	r3, [pc, #44]	; (801bb40 <SX1276OnDio1Irq+0x1b8>)
 801bb14:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801bb16:	b2da      	uxtb	r2, r3
 801bb18:	4b09      	ldr	r3, [pc, #36]	; (801bb40 <SX1276OnDio1Irq+0x1b8>)
 801bb1a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801bb1c:	b2db      	uxtb	r3, r3
 801bb1e:	1ad3      	subs	r3, r2, r3
 801bb20:	b2db      	uxtb	r3, r3
 801bb22:	0019      	movs	r1, r3
 801bb24:	f7ff fab8 	bl	801b098 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 801bb28:	4b05      	ldr	r3, [pc, #20]	; (801bb40 <SX1276OnDio1Irq+0x1b8>)
 801bb2a:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801bb2c:	4b04      	ldr	r3, [pc, #16]	; (801bb40 <SX1276OnDio1Irq+0x1b8>)
 801bb2e:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 801bb30:	e002      	b.n	801bb38 <SX1276OnDio1Irq+0x1b0>
                break;
 801bb32:	46c0      	nop			; (mov r8, r8)
 801bb34:	e000      	b.n	801bb38 <SX1276OnDio1Irq+0x1b0>
                    break;
 801bb36:	46c0      	nop			; (mov r8, r8)
            break;
 801bb38:	46c0      	nop			; (mov r8, r8)
    }
}
 801bb3a:	46c0      	nop			; (mov r8, r8)
 801bb3c:	46bd      	mov	sp, r7
 801bb3e:	bd80      	pop	{r7, pc}
 801bb40:	20001774 	.word	0x20001774
 801bb44:	2000175c 	.word	0x2000175c
 801bb48:	200017ae 	.word	0x200017ae
 801bb4c:	20000e84 	.word	0x20000e84
 801bb50:	200017dc 	.word	0x200017dc
 801bb54:	20000e80 	.word	0x20000e80

0801bb58 <SX1276OnDio2Irq>:

static void SX1276OnDio2Irq( void )
{
 801bb58:	b590      	push	{r4, r7, lr}
 801bb5a:	b085      	sub	sp, #20
 801bb5c:	af00      	add	r7, sp, #0
    uint32_t afcChannel = 0;
 801bb5e:	2300      	movs	r3, #0
 801bb60:	60fb      	str	r3, [r7, #12]

    switch( SX1276.Settings.State )
 801bb62:	4b5d      	ldr	r3, [pc, #372]	; (801bcd8 <SX1276OnDio2Irq+0x180>)
 801bb64:	791b      	ldrb	r3, [r3, #4]
 801bb66:	2b01      	cmp	r3, #1
 801bb68:	d003      	beq.n	801bb72 <SX1276OnDio2Irq+0x1a>
 801bb6a:	2b02      	cmp	r3, #2
 801bb6c:	d100      	bne.n	801bb70 <SX1276OnDio2Irq+0x18>
 801bb6e:	e083      	b.n	801bc78 <SX1276OnDio2Irq+0x120>
            default:
                break;
            }
            break;
        default:
            break;
 801bb70:	e0ae      	b.n	801bcd0 <SX1276OnDio2Irq+0x178>
            switch( SX1276.Settings.Modem )
 801bb72:	4b59      	ldr	r3, [pc, #356]	; (801bcd8 <SX1276OnDio2Irq+0x180>)
 801bb74:	795b      	ldrb	r3, [r3, #5]
 801bb76:	2b00      	cmp	r3, #0
 801bb78:	d002      	beq.n	801bb80 <SX1276OnDio2Irq+0x28>
 801bb7a:	2b01      	cmp	r3, #1
 801bb7c:	d058      	beq.n	801bc30 <SX1276OnDio2Irq+0xd8>
                break;
 801bb7e:	e07a      	b.n	801bc76 <SX1276OnDio2Irq+0x11e>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 801bb80:	4b55      	ldr	r3, [pc, #340]	; (801bcd8 <SX1276OnDio2Irq+0x180>)
 801bb82:	2230      	movs	r2, #48	; 0x30
 801bb84:	2101      	movs	r1, #1
 801bb86:	5499      	strb	r1, [r3, r2]
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 801bb88:	4b53      	ldr	r3, [pc, #332]	; (801bcd8 <SX1276OnDio2Irq+0x180>)
 801bb8a:	2230      	movs	r2, #48	; 0x30
 801bb8c:	5c9b      	ldrb	r3, [r3, r2]
 801bb8e:	2b00      	cmp	r3, #0
 801bb90:	d06e      	beq.n	801bc70 <SX1276OnDio2Irq+0x118>
 801bb92:	4b51      	ldr	r3, [pc, #324]	; (801bcd8 <SX1276OnDio2Irq+0x180>)
 801bb94:	2231      	movs	r2, #49	; 0x31
 801bb96:	5c9b      	ldrb	r3, [r3, r2]
 801bb98:	2b00      	cmp	r3, #0
 801bb9a:	d169      	bne.n	801bc70 <SX1276OnDio2Irq+0x118>
                    TimerStop( &RxTimeoutSyncWord );
 801bb9c:	4b4f      	ldr	r3, [pc, #316]	; (801bcdc <SX1276OnDio2Irq+0x184>)
 801bb9e:	0018      	movs	r0, r3
 801bba0:	f001 f862 	bl	801cc68 <UTIL_TIMER_Stop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 801bba4:	4b4c      	ldr	r3, [pc, #304]	; (801bcd8 <SX1276OnDio2Irq+0x180>)
 801bba6:	2231      	movs	r2, #49	; 0x31
 801bba8:	2101      	movs	r1, #1
 801bbaa:	5499      	strb	r1, [r3, r2]
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 801bbac:	2011      	movs	r0, #17
 801bbae:	f7ff f9f8 	bl	801afa2 <SX1276Read>
 801bbb2:	0003      	movs	r3, r0
 801bbb4:	085b      	lsrs	r3, r3, #1
 801bbb6:	b2db      	uxtb	r3, r3
 801bbb8:	425b      	negs	r3, r3
 801bbba:	b2db      	uxtb	r3, r3
 801bbbc:	b259      	sxtb	r1, r3
 801bbbe:	4b46      	ldr	r3, [pc, #280]	; (801bcd8 <SX1276OnDio2Irq+0x180>)
 801bbc0:	2232      	movs	r2, #50	; 0x32
 801bbc2:	5499      	strb	r1, [r3, r2]
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 801bbc4:	201b      	movs	r0, #27
 801bbc6:	f7ff f9ec 	bl	801afa2 <SX1276Read>
 801bbca:	0003      	movs	r3, r0
 801bbcc:	021c      	lsls	r4, r3, #8
                                     ( uint16_t )SX1276Read( REG_AFCLSB ) );
 801bbce:	201c      	movs	r0, #28
 801bbd0:	f7ff f9e7 	bl	801afa2 <SX1276Read>
 801bbd4:	0003      	movs	r3, r0
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 801bbd6:	4323      	orrs	r3, r4
 801bbd8:	60fb      	str	r3, [r7, #12]
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue );
 801bbda:	68fb      	ldr	r3, [r7, #12]
 801bbdc:	0a1b      	lsrs	r3, r3, #8
 801bbde:	60bb      	str	r3, [r7, #8]
 801bbe0:	68bb      	ldr	r3, [r7, #8]
 801bbe2:	021b      	lsls	r3, r3, #8
 801bbe4:	68fa      	ldr	r2, [r7, #12]
 801bbe6:	1ad3      	subs	r3, r2, r3
 801bbe8:	607b      	str	r3, [r7, #4]
 801bbea:	68b9      	ldr	r1, [r7, #8]
 801bbec:	000b      	movs	r3, r1
 801bbee:	015b      	lsls	r3, r3, #5
 801bbf0:	1a5b      	subs	r3, r3, r1
 801bbf2:	019a      	lsls	r2, r3, #6
 801bbf4:	1ad2      	subs	r2, r2, r3
 801bbf6:	00d2      	lsls	r2, r2, #3
 801bbf8:	1850      	adds	r0, r2, r1
 801bbfa:	6879      	ldr	r1, [r7, #4]
 801bbfc:	000b      	movs	r3, r1
 801bbfe:	015b      	lsls	r3, r3, #5
 801bc00:	1a5b      	subs	r3, r3, r1
 801bc02:	019a      	lsls	r2, r3, #6
 801bc04:	1ad2      	subs	r2, r2, r3
 801bc06:	00d2      	lsls	r2, r2, #3
 801bc08:	1853      	adds	r3, r2, r1
 801bc0a:	3380      	adds	r3, #128	; 0x80
 801bc0c:	0a1b      	lsrs	r3, r3, #8
 801bc0e:	18c3      	adds	r3, r0, r3
 801bc10:	001a      	movs	r2, r3
 801bc12:	4b31      	ldr	r3, [pc, #196]	; (801bcd8 <SX1276OnDio2Irq+0x180>)
 801bc14:	635a      	str	r2, [r3, #52]	; 0x34
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 801bc16:	200c      	movs	r0, #12
 801bc18:	f7ff f9c3 	bl	801afa2 <SX1276Read>
 801bc1c:	0003      	movs	r3, r0
 801bc1e:	095b      	lsrs	r3, r3, #5
 801bc20:	b2db      	uxtb	r3, r3
 801bc22:	2207      	movs	r2, #7
 801bc24:	4013      	ands	r3, r2
 801bc26:	b2d9      	uxtb	r1, r3
 801bc28:	4b2b      	ldr	r3, [pc, #172]	; (801bcd8 <SX1276OnDio2Irq+0x180>)
 801bc2a:	2238      	movs	r2, #56	; 0x38
 801bc2c:	5499      	strb	r1, [r3, r2]
                break;
 801bc2e:	e01f      	b.n	801bc70 <SX1276OnDio2Irq+0x118>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 801bc30:	4b29      	ldr	r3, [pc, #164]	; (801bcd8 <SX1276OnDio2Irq+0x180>)
 801bc32:	2253      	movs	r2, #83	; 0x53
 801bc34:	5c9b      	ldrb	r3, [r3, r2]
 801bc36:	2b00      	cmp	r3, #0
 801bc38:	d01c      	beq.n	801bc74 <SX1276OnDio2Irq+0x11c>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 801bc3a:	2102      	movs	r1, #2
 801bc3c:	2012      	movs	r0, #18
 801bc3e:	f7ff f99f 	bl	801af80 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 801bc42:	4b27      	ldr	r3, [pc, #156]	; (801bce0 <SX1276OnDio2Irq+0x188>)
 801bc44:	681b      	ldr	r3, [r3, #0]
 801bc46:	2b00      	cmp	r3, #0
 801bc48:	d014      	beq.n	801bc74 <SX1276OnDio2Irq+0x11c>
 801bc4a:	4b25      	ldr	r3, [pc, #148]	; (801bce0 <SX1276OnDio2Irq+0x188>)
 801bc4c:	681b      	ldr	r3, [r3, #0]
 801bc4e:	695b      	ldr	r3, [r3, #20]
 801bc50:	2b00      	cmp	r3, #0
 801bc52:	d00f      	beq.n	801bc74 <SX1276OnDio2Irq+0x11c>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 801bc54:	4b22      	ldr	r3, [pc, #136]	; (801bce0 <SX1276OnDio2Irq+0x188>)
 801bc56:	681b      	ldr	r3, [r3, #0]
 801bc58:	695c      	ldr	r4, [r3, #20]
 801bc5a:	201c      	movs	r0, #28
 801bc5c:	f7ff f9a1 	bl	801afa2 <SX1276Read>
 801bc60:	0003      	movs	r3, r0
 801bc62:	001a      	movs	r2, r3
 801bc64:	233f      	movs	r3, #63	; 0x3f
 801bc66:	4013      	ands	r3, r2
 801bc68:	b2db      	uxtb	r3, r3
 801bc6a:	0018      	movs	r0, r3
 801bc6c:	47a0      	blx	r4
                break;
 801bc6e:	e001      	b.n	801bc74 <SX1276OnDio2Irq+0x11c>
                break;
 801bc70:	46c0      	nop			; (mov r8, r8)
 801bc72:	e02d      	b.n	801bcd0 <SX1276OnDio2Irq+0x178>
                break;
 801bc74:	46c0      	nop			; (mov r8, r8)
            break;
 801bc76:	e02b      	b.n	801bcd0 <SX1276OnDio2Irq+0x178>
            switch( SX1276.Settings.Modem )
 801bc78:	4b17      	ldr	r3, [pc, #92]	; (801bcd8 <SX1276OnDio2Irq+0x180>)
 801bc7a:	795b      	ldrb	r3, [r3, #5]
 801bc7c:	2b00      	cmp	r3, #0
 801bc7e:	d021      	beq.n	801bcc4 <SX1276OnDio2Irq+0x16c>
 801bc80:	2b01      	cmp	r3, #1
 801bc82:	d121      	bne.n	801bcc8 <SX1276OnDio2Irq+0x170>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 801bc84:	4b14      	ldr	r3, [pc, #80]	; (801bcd8 <SX1276OnDio2Irq+0x180>)
 801bc86:	2253      	movs	r2, #83	; 0x53
 801bc88:	5c9b      	ldrb	r3, [r3, r2]
 801bc8a:	2b00      	cmp	r3, #0
 801bc8c:	d01e      	beq.n	801bccc <SX1276OnDio2Irq+0x174>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 801bc8e:	2102      	movs	r1, #2
 801bc90:	2012      	movs	r0, #18
 801bc92:	f7ff f975 	bl	801af80 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 801bc96:	4b12      	ldr	r3, [pc, #72]	; (801bce0 <SX1276OnDio2Irq+0x188>)
 801bc98:	681b      	ldr	r3, [r3, #0]
 801bc9a:	2b00      	cmp	r3, #0
 801bc9c:	d016      	beq.n	801bccc <SX1276OnDio2Irq+0x174>
 801bc9e:	4b10      	ldr	r3, [pc, #64]	; (801bce0 <SX1276OnDio2Irq+0x188>)
 801bca0:	681b      	ldr	r3, [r3, #0]
 801bca2:	695b      	ldr	r3, [r3, #20]
 801bca4:	2b00      	cmp	r3, #0
 801bca6:	d011      	beq.n	801bccc <SX1276OnDio2Irq+0x174>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 801bca8:	4b0d      	ldr	r3, [pc, #52]	; (801bce0 <SX1276OnDio2Irq+0x188>)
 801bcaa:	681b      	ldr	r3, [r3, #0]
 801bcac:	695c      	ldr	r4, [r3, #20]
 801bcae:	201c      	movs	r0, #28
 801bcb0:	f7ff f977 	bl	801afa2 <SX1276Read>
 801bcb4:	0003      	movs	r3, r0
 801bcb6:	001a      	movs	r2, r3
 801bcb8:	233f      	movs	r3, #63	; 0x3f
 801bcba:	4013      	ands	r3, r2
 801bcbc:	b2db      	uxtb	r3, r3
 801bcbe:	0018      	movs	r0, r3
 801bcc0:	47a0      	blx	r4
                break;
 801bcc2:	e003      	b.n	801bccc <SX1276OnDio2Irq+0x174>
                break;
 801bcc4:	46c0      	nop			; (mov r8, r8)
 801bcc6:	e002      	b.n	801bcce <SX1276OnDio2Irq+0x176>
                break;
 801bcc8:	46c0      	nop			; (mov r8, r8)
 801bcca:	e000      	b.n	801bcce <SX1276OnDio2Irq+0x176>
                break;
 801bccc:	46c0      	nop			; (mov r8, r8)
            break;
 801bcce:	46c0      	nop			; (mov r8, r8)
    }
}
 801bcd0:	46c0      	nop			; (mov r8, r8)
 801bcd2:	46bd      	mov	sp, r7
 801bcd4:	b005      	add	sp, #20
 801bcd6:	bd90      	pop	{r4, r7, pc}
 801bcd8:	20001774 	.word	0x20001774
 801bcdc:	2000175c 	.word	0x2000175c
 801bce0:	20000e80 	.word	0x20000e80

0801bce4 <SX1276OnDio3Irq>:

static void SX1276OnDio3Irq( void )
{
 801bce4:	b580      	push	{r7, lr}
 801bce6:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 801bce8:	4b1d      	ldr	r3, [pc, #116]	; (801bd60 <SX1276OnDio3Irq+0x7c>)
 801bcea:	795b      	ldrb	r3, [r3, #5]
 801bcec:	2b00      	cmp	r3, #0
 801bcee:	d031      	beq.n	801bd54 <SX1276OnDio3Irq+0x70>
 801bcf0:	2b01      	cmp	r3, #1
 801bcf2:	d000      	beq.n	801bcf6 <SX1276OnDio3Irq+0x12>
                RadioEvents->CadDone( false );
            }
        }
        break;
    default:
        break;
 801bcf4:	e031      	b.n	801bd5a <SX1276OnDio3Irq+0x76>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 801bcf6:	2012      	movs	r0, #18
 801bcf8:	f7ff f953 	bl	801afa2 <SX1276Read>
 801bcfc:	0003      	movs	r3, r0
 801bcfe:	001a      	movs	r2, r3
 801bd00:	2301      	movs	r3, #1
 801bd02:	4013      	ands	r3, r2
 801bd04:	2b01      	cmp	r3, #1
 801bd06:	d112      	bne.n	801bd2e <SX1276OnDio3Irq+0x4a>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 801bd08:	2105      	movs	r1, #5
 801bd0a:	2012      	movs	r0, #18
 801bd0c:	f7ff f938 	bl	801af80 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801bd10:	4b14      	ldr	r3, [pc, #80]	; (801bd64 <SX1276OnDio3Irq+0x80>)
 801bd12:	681b      	ldr	r3, [r3, #0]
 801bd14:	2b00      	cmp	r3, #0
 801bd16:	d01f      	beq.n	801bd58 <SX1276OnDio3Irq+0x74>
 801bd18:	4b12      	ldr	r3, [pc, #72]	; (801bd64 <SX1276OnDio3Irq+0x80>)
 801bd1a:	681b      	ldr	r3, [r3, #0]
 801bd1c:	699b      	ldr	r3, [r3, #24]
 801bd1e:	2b00      	cmp	r3, #0
 801bd20:	d01a      	beq.n	801bd58 <SX1276OnDio3Irq+0x74>
                RadioEvents->CadDone( true );
 801bd22:	4b10      	ldr	r3, [pc, #64]	; (801bd64 <SX1276OnDio3Irq+0x80>)
 801bd24:	681b      	ldr	r3, [r3, #0]
 801bd26:	699b      	ldr	r3, [r3, #24]
 801bd28:	2001      	movs	r0, #1
 801bd2a:	4798      	blx	r3
        break;
 801bd2c:	e014      	b.n	801bd58 <SX1276OnDio3Irq+0x74>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 801bd2e:	2104      	movs	r1, #4
 801bd30:	2012      	movs	r0, #18
 801bd32:	f7ff f925 	bl	801af80 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801bd36:	4b0b      	ldr	r3, [pc, #44]	; (801bd64 <SX1276OnDio3Irq+0x80>)
 801bd38:	681b      	ldr	r3, [r3, #0]
 801bd3a:	2b00      	cmp	r3, #0
 801bd3c:	d00c      	beq.n	801bd58 <SX1276OnDio3Irq+0x74>
 801bd3e:	4b09      	ldr	r3, [pc, #36]	; (801bd64 <SX1276OnDio3Irq+0x80>)
 801bd40:	681b      	ldr	r3, [r3, #0]
 801bd42:	699b      	ldr	r3, [r3, #24]
 801bd44:	2b00      	cmp	r3, #0
 801bd46:	d007      	beq.n	801bd58 <SX1276OnDio3Irq+0x74>
                RadioEvents->CadDone( false );
 801bd48:	4b06      	ldr	r3, [pc, #24]	; (801bd64 <SX1276OnDio3Irq+0x80>)
 801bd4a:	681b      	ldr	r3, [r3, #0]
 801bd4c:	699b      	ldr	r3, [r3, #24]
 801bd4e:	2000      	movs	r0, #0
 801bd50:	4798      	blx	r3
        break;
 801bd52:	e001      	b.n	801bd58 <SX1276OnDio3Irq+0x74>
        break;
 801bd54:	46c0      	nop			; (mov r8, r8)
 801bd56:	e000      	b.n	801bd5a <SX1276OnDio3Irq+0x76>
        break;
 801bd58:	46c0      	nop			; (mov r8, r8)
    }
}
 801bd5a:	46c0      	nop			; (mov r8, r8)
 801bd5c:	46bd      	mov	sp, r7
 801bd5e:	bd80      	pop	{r7, pc}
 801bd60:	20001774 	.word	0x20001774
 801bd64:	20000e80 	.word	0x20000e80

0801bd68 <SX1276OnDio4Irq>:

static void SX1276OnDio4Irq( void )
{
 801bd68:	b580      	push	{r7, lr}
 801bd6a:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 801bd6c:	4b0b      	ldr	r3, [pc, #44]	; (801bd9c <SX1276OnDio4Irq+0x34>)
 801bd6e:	795b      	ldrb	r3, [r3, #5]
 801bd70:	2b00      	cmp	r3, #0
 801bd72:	d002      	beq.n	801bd7a <SX1276OnDio4Irq+0x12>
 801bd74:	2b01      	cmp	r3, #1
 801bd76:	d00a      	beq.n	801bd8e <SX1276OnDio4Irq+0x26>
        }
        break;
    case MODEM_LORA:
        break;
    default:
        break;
 801bd78:	e00c      	b.n	801bd94 <SX1276OnDio4Irq+0x2c>
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 801bd7a:	4b08      	ldr	r3, [pc, #32]	; (801bd9c <SX1276OnDio4Irq+0x34>)
 801bd7c:	2230      	movs	r2, #48	; 0x30
 801bd7e:	5c9b      	ldrb	r3, [r3, r2]
 801bd80:	2b00      	cmp	r3, #0
 801bd82:	d106      	bne.n	801bd92 <SX1276OnDio4Irq+0x2a>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 801bd84:	4b05      	ldr	r3, [pc, #20]	; (801bd9c <SX1276OnDio4Irq+0x34>)
 801bd86:	2230      	movs	r2, #48	; 0x30
 801bd88:	2101      	movs	r1, #1
 801bd8a:	5499      	strb	r1, [r3, r2]
        break;
 801bd8c:	e001      	b.n	801bd92 <SX1276OnDio4Irq+0x2a>
        break;
 801bd8e:	46c0      	nop			; (mov r8, r8)
 801bd90:	e000      	b.n	801bd94 <SX1276OnDio4Irq+0x2c>
        break;
 801bd92:	46c0      	nop			; (mov r8, r8)
    }
}
 801bd94:	46c0      	nop			; (mov r8, r8)
 801bd96:	46bd      	mov	sp, r7
 801bd98:	bd80      	pop	{r7, pc}
 801bd9a:	46c0      	nop			; (mov r8, r8)
 801bd9c:	20001774 	.word	0x20001774

0801bda0 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801bda0:	b580      	push	{r7, lr}
 801bda2:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801bda4:	4b0a      	ldr	r3, [pc, #40]	; (801bdd0 <UTIL_ADV_TRACE_Init+0x30>)
 801bda6:	2218      	movs	r2, #24
 801bda8:	2100      	movs	r1, #0
 801bdaa:	0018      	movs	r0, r3
 801bdac:	f000 fbb8 	bl	801c520 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801bdb0:	2380      	movs	r3, #128	; 0x80
 801bdb2:	009a      	lsls	r2, r3, #2
 801bdb4:	4b07      	ldr	r3, [pc, #28]	; (801bdd4 <UTIL_ADV_TRACE_Init+0x34>)
 801bdb6:	2100      	movs	r1, #0
 801bdb8:	0018      	movs	r0, r3
 801bdba:	f000 fbb1 	bl	801c520 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();
  
  /* Initialize the Low Level interface */  
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801bdbe:	4b06      	ldr	r3, [pc, #24]	; (801bdd8 <UTIL_ADV_TRACE_Init+0x38>)
 801bdc0:	681b      	ldr	r3, [r3, #0]
 801bdc2:	4a06      	ldr	r2, [pc, #24]	; (801bddc <UTIL_ADV_TRACE_Init+0x3c>)
 801bdc4:	0010      	movs	r0, r2
 801bdc6:	4798      	blx	r3
 801bdc8:	0003      	movs	r3, r0
}
 801bdca:	0018      	movs	r0, r3
 801bdcc:	46bd      	mov	sp, r7
 801bdce:	bd80      	pop	{r7, pc}
 801bdd0:	20000f84 	.word	0x20000f84
 801bdd4:	20000f9c 	.word	0x20000f9c
 801bdd8:	0801f124 	.word	0x0801f124
 801bddc:	0801c061 	.word	0x0801c061

0801bde0 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801bde0:	b408      	push	{r3}
 801bde2:	b590      	push	{r4, r7, lr}
 801bde4:	b08c      	sub	sp, #48	; 0x30
 801bde6:	af00      	add	r7, sp, #0
 801bde8:	60f8      	str	r0, [r7, #12]
 801bdea:	60b9      	str	r1, [r7, #8]
 801bdec:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801bdee:	2316      	movs	r3, #22
 801bdf0:	18fb      	adds	r3, r7, r3
 801bdf2:	2200      	movs	r2, #0
 801bdf4:	801a      	strh	r2, [r3, #0]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801bdf6:	232c      	movs	r3, #44	; 0x2c
 801bdf8:	18fb      	adds	r3, r7, r3
 801bdfa:	2200      	movs	r2, #0
 801bdfc:	801a      	strh	r2, [r3, #0]

  /* check verbose level */
  if (!( ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801bdfe:	4b41      	ldr	r3, [pc, #260]	; (801bf04 <UTIL_ADV_TRACE_COND_FSend+0x124>)
 801be00:	7a1b      	ldrb	r3, [r3, #8]
 801be02:	001a      	movs	r2, r3
 801be04:	68fb      	ldr	r3, [r7, #12]
 801be06:	4293      	cmp	r3, r2
 801be08:	d902      	bls.n	801be10 <UTIL_ADV_TRACE_COND_FSend+0x30>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801be0a:	2305      	movs	r3, #5
 801be0c:	425b      	negs	r3, r3
 801be0e:	e072      	b.n	801bef6 <UTIL_ADV_TRACE_COND_FSend+0x116>
  }

  if(( Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801be10:	4b3c      	ldr	r3, [pc, #240]	; (801bf04 <UTIL_ADV_TRACE_COND_FSend+0x124>)
 801be12:	68db      	ldr	r3, [r3, #12]
 801be14:	68ba      	ldr	r2, [r7, #8]
 801be16:	4013      	ands	r3, r2
 801be18:	68ba      	ldr	r2, [r7, #8]
 801be1a:	429a      	cmp	r2, r3
 801be1c:	d002      	beq.n	801be24 <UTIL_ADV_TRACE_COND_FSend+0x44>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801be1e:	2306      	movs	r3, #6
 801be20:	425b      	negs	r3, r3
 801be22:	e068      	b.n	801bef6 <UTIL_ADV_TRACE_COND_FSend+0x116>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801be24:	4b37      	ldr	r3, [pc, #220]	; (801bf04 <UTIL_ADV_TRACE_COND_FSend+0x124>)
 801be26:	685b      	ldr	r3, [r3, #4]
 801be28:	2b00      	cmp	r3, #0
 801be2a:	d00a      	beq.n	801be42 <UTIL_ADV_TRACE_COND_FSend+0x62>
 801be2c:	687b      	ldr	r3, [r7, #4]
 801be2e:	2b00      	cmp	r3, #0
 801be30:	d007      	beq.n	801be42 <UTIL_ADV_TRACE_COND_FSend+0x62>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801be32:	4b34      	ldr	r3, [pc, #208]	; (801bf04 <UTIL_ADV_TRACE_COND_FSend+0x124>)
 801be34:	685b      	ldr	r3, [r3, #4]
 801be36:	2216      	movs	r2, #22
 801be38:	18b9      	adds	r1, r7, r2
 801be3a:	2218      	movs	r2, #24
 801be3c:	18ba      	adds	r2, r7, r2
 801be3e:	0010      	movs	r0, r2
 801be40:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801be42:	2340      	movs	r3, #64	; 0x40
 801be44:	18fb      	adds	r3, r7, r3
 801be46:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801be48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801be4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801be4c:	2180      	movs	r1, #128	; 0x80
 801be4e:	0049      	lsls	r1, r1, #1
 801be50:	482d      	ldr	r0, [pc, #180]	; (801bf08 <UTIL_ADV_TRACE_COND_FSend+0x128>)
 801be52:	f001 fa13 	bl	801d27c <tiny_vsnprintf_like>
 801be56:	0002      	movs	r2, r0
 801be58:	242c      	movs	r4, #44	; 0x2c
 801be5a:	193b      	adds	r3, r7, r4
 801be5c:	801a      	strh	r2, [r3, #0]

  TRACE_Lock();
 801be5e:	f000 fa23 	bl	801c2a8 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801be62:	2316      	movs	r3, #22
 801be64:	18fb      	adds	r3, r7, r3
 801be66:	881a      	ldrh	r2, [r3, #0]
 801be68:	193b      	adds	r3, r7, r4
 801be6a:	881b      	ldrh	r3, [r3, #0]
 801be6c:	18d3      	adds	r3, r2, r3
 801be6e:	b29b      	uxth	r3, r3
 801be70:	2214      	movs	r2, #20
 801be72:	18ba      	adds	r2, r7, r2
 801be74:	0011      	movs	r1, r2
 801be76:	0018      	movs	r0, r3
 801be78:	f000 f97c 	bl	801c174 <TRACE_AllocateBufer>
 801be7c:	0003      	movs	r3, r0
 801be7e:	3301      	adds	r3, #1
 801be80:	d035      	beq.n	801beee <UTIL_ADV_TRACE_COND_FSend+0x10e>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801be82:	232e      	movs	r3, #46	; 0x2e
 801be84:	18fb      	adds	r3, r7, r3
 801be86:	2200      	movs	r2, #0
 801be88:	801a      	strh	r2, [r3, #0]
 801be8a:	e016      	b.n	801beba <UTIL_ADV_TRACE_COND_FSend+0xda>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801be8c:	202e      	movs	r0, #46	; 0x2e
 801be8e:	183b      	adds	r3, r7, r0
 801be90:	881b      	ldrh	r3, [r3, #0]
 801be92:	2414      	movs	r4, #20
 801be94:	193a      	adds	r2, r7, r4
 801be96:	8812      	ldrh	r2, [r2, #0]
 801be98:	0011      	movs	r1, r2
 801be9a:	2218      	movs	r2, #24
 801be9c:	18ba      	adds	r2, r7, r2
 801be9e:	5cd2      	ldrb	r2, [r2, r3]
 801bea0:	4b1a      	ldr	r3, [pc, #104]	; (801bf0c <UTIL_ADV_TRACE_COND_FSend+0x12c>)
 801bea2:	545a      	strb	r2, [r3, r1]
      writepos = writepos + 1u;
 801bea4:	193b      	adds	r3, r7, r4
 801bea6:	881b      	ldrh	r3, [r3, #0]
 801bea8:	3301      	adds	r3, #1
 801beaa:	b29a      	uxth	r2, r3
 801beac:	193b      	adds	r3, r7, r4
 801beae:	801a      	strh	r2, [r3, #0]
    for (idx = 0u; idx < timestamp_size; idx++)
 801beb0:	183b      	adds	r3, r7, r0
 801beb2:	881a      	ldrh	r2, [r3, #0]
 801beb4:	183b      	adds	r3, r7, r0
 801beb6:	3201      	adds	r2, #1
 801beb8:	801a      	strh	r2, [r3, #0]
 801beba:	2316      	movs	r3, #22
 801bebc:	18fb      	adds	r3, r7, r3
 801bebe:	881b      	ldrh	r3, [r3, #0]
 801bec0:	222e      	movs	r2, #46	; 0x2e
 801bec2:	18ba      	adds	r2, r7, r2
 801bec4:	8812      	ldrh	r2, [r2, #0]
 801bec6:	429a      	cmp	r2, r3
 801bec8:	d3e0      	bcc.n	801be8c <UTIL_ADV_TRACE_COND_FSend+0xac>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801beca:	2314      	movs	r3, #20
 801becc:	18fb      	adds	r3, r7, r3
 801bece:	881b      	ldrh	r3, [r3, #0]
 801bed0:	001a      	movs	r2, r3
 801bed2:	4b0e      	ldr	r3, [pc, #56]	; (801bf0c <UTIL_ADV_TRACE_COND_FSend+0x12c>)
 801bed4:	18d0      	adds	r0, r2, r3
 801bed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bed8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801beda:	2180      	movs	r1, #128	; 0x80
 801bedc:	0049      	lsls	r1, r1, #1
 801bede:	f001 f9cd 	bl	801d27c <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801bee2:	f000 f9fd 	bl	801c2e0 <TRACE_UnLock>

    return TRACE_Send();
 801bee6:	f000 f831 	bl	801bf4c <TRACE_Send>
 801beea:	0003      	movs	r3, r0
 801beec:	e003      	b.n	801bef6 <UTIL_ADV_TRACE_COND_FSend+0x116>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801beee:	f000 f9f7 	bl	801c2e0 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801bef2:	2303      	movs	r3, #3
 801bef4:	425b      	negs	r3, r3
  buff_size+=(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801bef6:	0018      	movs	r0, r3
 801bef8:	46bd      	mov	sp, r7
 801befa:	b00c      	add	sp, #48	; 0x30
 801befc:	bc90      	pop	{r4, r7}
 801befe:	bc08      	pop	{r3}
 801bf00:	b001      	add	sp, #4
 801bf02:	4718      	bx	r3
 801bf04:	20000f84 	.word	0x20000f84
 801bf08:	2000119c 	.word	0x2000119c
 801bf0c:	20000f9c 	.word	0x20000f9c

0801bf10 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801bf10:	b580      	push	{r7, lr}
 801bf12:	b082      	sub	sp, #8
 801bf14:	af00      	add	r7, sp, #0
 801bf16:	6078      	str	r0, [r7, #4]
	ADV_TRACE_Ctx.timestamp_func = *cb;
 801bf18:	4b03      	ldr	r3, [pc, #12]	; (801bf28 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801bf1a:	687a      	ldr	r2, [r7, #4]
 801bf1c:	605a      	str	r2, [r3, #4]
}
 801bf1e:	46c0      	nop			; (mov r8, r8)
 801bf20:	46bd      	mov	sp, r7
 801bf22:	b002      	add	sp, #8
 801bf24:	bd80      	pop	{r7, pc}
 801bf26:	46c0      	nop			; (mov r8, r8)
 801bf28:	20000f84 	.word	0x20000f84

0801bf2c <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801bf2c:	b580      	push	{r7, lr}
 801bf2e:	b082      	sub	sp, #8
 801bf30:	af00      	add	r7, sp, #0
 801bf32:	0002      	movs	r2, r0
 801bf34:	1dfb      	adds	r3, r7, #7
 801bf36:	701a      	strb	r2, [r3, #0]
	ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801bf38:	4b03      	ldr	r3, [pc, #12]	; (801bf48 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801bf3a:	1dfa      	adds	r2, r7, #7
 801bf3c:	7812      	ldrb	r2, [r2, #0]
 801bf3e:	721a      	strb	r2, [r3, #8]
}
 801bf40:	46c0      	nop			; (mov r8, r8)
 801bf42:	46bd      	mov	sp, r7
 801bf44:	b002      	add	sp, #8
 801bf46:	bd80      	pop	{r7, pc}
 801bf48:	20000f84 	.word	0x20000f84

0801bf4c <TRACE_Send>:
/**
  * @brief send the data of the trace to low layer
  * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
  */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801bf4c:	b590      	push	{r4, r7, lr}
 801bf4e:	b089      	sub	sp, #36	; 0x24
 801bf50:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;  
 801bf52:	231f      	movs	r3, #31
 801bf54:	18fb      	adds	r3, r7, r3
 801bf56:	2200      	movs	r2, #0
 801bf58:	701a      	strb	r2, [r3, #0]
  uint8_t *ptr = NULL;
 801bf5a:	2300      	movs	r3, #0
 801bf5c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bf5e:	f3ef 8310 	mrs	r3, PRIMASK
 801bf62:	613b      	str	r3, [r7, #16]
  return(result);
 801bf64:	693b      	ldr	r3, [r7, #16]
  
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();  
 801bf66:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bf68:	b672      	cpsid	i
}
 801bf6a:	46c0      	nop			; (mov r8, r8)
  
  if(TRACE_IsLocked() == 0u)
 801bf6c:	f000 f9d4 	bl	801c318 <TRACE_IsLocked>
 801bf70:	1e03      	subs	r3, r0, #0
 801bf72:	d160      	bne.n	801c036 <TRACE_Send+0xea>
  {
    TRACE_Lock();
 801bf74:	f000 f998 	bl	801c2a8 <TRACE_Lock>
	    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send overrun(%d)--\n", ADV_TRACE_Ctx.TraceSentSize);
	    return UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
	}
#endif

    if (ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801bf78:	4b36      	ldr	r3, [pc, #216]	; (801c054 <TRACE_Send+0x108>)
 801bf7a:	8a1a      	ldrh	r2, [r3, #16]
 801bf7c:	4b35      	ldr	r3, [pc, #212]	; (801c054 <TRACE_Send+0x108>)
 801bf7e:	8a5b      	ldrh	r3, [r3, #18]
 801bf80:	429a      	cmp	r2, r3
 801bf82:	d050      	beq.n	801c026 <TRACE_Send+0xda>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
   	  if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801bf84:	4b33      	ldr	r3, [pc, #204]	; (801c054 <TRACE_Send+0x108>)
 801bf86:	789b      	ldrb	r3, [r3, #2]
 801bf88:	2b01      	cmp	r3, #1
 801bf8a:	d117      	bne.n	801bfbc <TRACE_Send+0x70>
   	  {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t)(ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801bf8c:	4b31      	ldr	r3, [pc, #196]	; (801c054 <TRACE_Send+0x108>)
 801bf8e:	881a      	ldrh	r2, [r3, #0]
 801bf90:	4b30      	ldr	r3, [pc, #192]	; (801c054 <TRACE_Send+0x108>)
 801bf92:	8a1b      	ldrh	r3, [r3, #16]
 801bf94:	1ad3      	subs	r3, r2, r3
 801bf96:	b29a      	uxth	r2, r3
 801bf98:	4b2e      	ldr	r3, [pc, #184]	; (801c054 <TRACE_Send+0x108>)
 801bf9a:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801bf9c:	4b2d      	ldr	r3, [pc, #180]	; (801c054 <TRACE_Send+0x108>)
 801bf9e:	2202      	movs	r2, #2
 801bfa0:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801bfa2:	4b2c      	ldr	r3, [pc, #176]	; (801c054 <TRACE_Send+0x108>)
 801bfa4:	2200      	movs	r2, #0
 801bfa6:	801a      	strh	r2, [r3, #0]
        
        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n",ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);
        
        if (0u == ADV_TRACE_Ctx.TraceSentSize)
 801bfa8:	4b2a      	ldr	r3, [pc, #168]	; (801c054 <TRACE_Send+0x108>)
 801bfaa:	8a9b      	ldrh	r3, [r3, #20]
 801bfac:	2b00      	cmp	r3, #0
 801bfae:	d105      	bne.n	801bfbc <TRACE_Send+0x70>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801bfb0:	4b28      	ldr	r3, [pc, #160]	; (801c054 <TRACE_Send+0x108>)
 801bfb2:	2200      	movs	r2, #0
 801bfb4:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801bfb6:	4b27      	ldr	r3, [pc, #156]	; (801c054 <TRACE_Send+0x108>)
 801bfb8:	2200      	movs	r2, #0
 801bfba:	821a      	strh	r2, [r3, #16]
        }
   	  }
      
   	  if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801bfbc:	4b25      	ldr	r3, [pc, #148]	; (801c054 <TRACE_Send+0x108>)
 801bfbe:	789b      	ldrb	r3, [r3, #2]
 801bfc0:	2b00      	cmp	r3, #0
 801bfc2:	d116      	bne.n	801bff2 <TRACE_Send+0xa6>
   	  {
#endif
   	    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801bfc4:	4b23      	ldr	r3, [pc, #140]	; (801c054 <TRACE_Send+0x108>)
 801bfc6:	8a5a      	ldrh	r2, [r3, #18]
 801bfc8:	4b22      	ldr	r3, [pc, #136]	; (801c054 <TRACE_Send+0x108>)
 801bfca:	8a1b      	ldrh	r3, [r3, #16]
 801bfcc:	429a      	cmp	r2, r3
 801bfce:	d908      	bls.n	801bfe2 <TRACE_Send+0x96>
        {
   	    	ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801bfd0:	4b20      	ldr	r3, [pc, #128]	; (801c054 <TRACE_Send+0x108>)
 801bfd2:	8a5a      	ldrh	r2, [r3, #18]
 801bfd4:	4b1f      	ldr	r3, [pc, #124]	; (801c054 <TRACE_Send+0x108>)
 801bfd6:	8a1b      	ldrh	r3, [r3, #16]
 801bfd8:	1ad3      	subs	r3, r2, r3
 801bfda:	b29a      	uxth	r2, r3
 801bfdc:	4b1d      	ldr	r3, [pc, #116]	; (801c054 <TRACE_Send+0x108>)
 801bfde:	829a      	strh	r2, [r3, #20]
 801bfe0:	e007      	b.n	801bff2 <TRACE_Send+0xa6>
        }
        else  /* TraceRdPtr > TraceWrPtr */
        {
        	ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801bfe2:	4b1c      	ldr	r3, [pc, #112]	; (801c054 <TRACE_Send+0x108>)
 801bfe4:	8a1b      	ldrh	r3, [r3, #16]
 801bfe6:	2280      	movs	r2, #128	; 0x80
 801bfe8:	0092      	lsls	r2, r2, #2
 801bfea:	1ad3      	subs	r3, r2, r3
 801bfec:	b29a      	uxth	r2, r3
 801bfee:	4b19      	ldr	r3, [pc, #100]	; (801c054 <TRACE_Send+0x108>)
 801bff0:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801bff2:	4b18      	ldr	r3, [pc, #96]	; (801c054 <TRACE_Send+0x108>)
 801bff4:	8a1b      	ldrh	r3, [r3, #16]
 801bff6:	001a      	movs	r2, r3
 801bff8:	4b17      	ldr	r3, [pc, #92]	; (801c058 <TRACE_Send+0x10c>)
 801bffa:	18d3      	adds	r3, r2, r3
 801bffc:	61bb      	str	r3, [r7, #24]
 801bffe:	697b      	ldr	r3, [r7, #20]
 801c000:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c002:	68fb      	ldr	r3, [r7, #12]
 801c004:	f383 8810 	msr	PRIMASK, r3
}
 801c008:	46c0      	nop			; (mov r8, r8)

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook(); 
 801c00a:	f7e8 fea7 	bl	8004d5c <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n",ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801c00e:	4b13      	ldr	r3, [pc, #76]	; (801c05c <TRACE_Send+0x110>)
 801c010:	68db      	ldr	r3, [r3, #12]
 801c012:	4a10      	ldr	r2, [pc, #64]	; (801c054 <TRACE_Send+0x108>)
 801c014:	8a91      	ldrh	r1, [r2, #20]
 801c016:	221f      	movs	r2, #31
 801c018:	18bc      	adds	r4, r7, r2
 801c01a:	69ba      	ldr	r2, [r7, #24]
 801c01c:	0010      	movs	r0, r2
 801c01e:	4798      	blx	r3
 801c020:	0003      	movs	r3, r0
 801c022:	7023      	strb	r3, [r4, #0]
 801c024:	e00d      	b.n	801c042 <TRACE_Send+0xf6>
    }
    else
    {
      TRACE_UnLock();
 801c026:	f000 f95b 	bl	801c2e0 <TRACE_UnLock>
 801c02a:	697b      	ldr	r3, [r7, #20]
 801c02c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c02e:	68bb      	ldr	r3, [r7, #8]
 801c030:	f383 8810 	msr	PRIMASK, r3
}
 801c034:	e005      	b.n	801c042 <TRACE_Send+0xf6>
 801c036:	697b      	ldr	r3, [r7, #20]
 801c038:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c03a:	687b      	ldr	r3, [r7, #4]
 801c03c:	f383 8810 	msr	PRIMASK, r3
}
 801c040:	46c0      	nop			; (mov r8, r8)
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();  
  }
  
  return ret;
 801c042:	231f      	movs	r3, #31
 801c044:	18fb      	adds	r3, r7, r3
 801c046:	781b      	ldrb	r3, [r3, #0]
 801c048:	b25b      	sxtb	r3, r3
}
 801c04a:	0018      	movs	r0, r3
 801c04c:	46bd      	mov	sp, r7
 801c04e:	b009      	add	sp, #36	; 0x24
 801c050:	bd90      	pop	{r4, r7, pc}
 801c052:	46c0      	nop			; (mov r8, r8)
 801c054:	20000f84 	.word	0x20000f84
 801c058:	20000f9c 	.word	0x20000f9c
 801c05c:	0801f124 	.word	0x0801f124

0801c060 <TRACE_TxCpltCallback>:
  * @brief Tx callback called by the low layer level to inform a transfer complete
  * @param Ptr pointer not used only for HAL compatibility
  * @retval none
  */
static void TRACE_TxCpltCallback(void *Ptr)
{ 
 801c060:	b580      	push	{r7, lr}
 801c062:	b086      	sub	sp, #24
 801c064:	af00      	add	r7, sp, #0
 801c066:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c068:	f3ef 8310 	mrs	r3, PRIMASK
 801c06c:	613b      	str	r3, [r7, #16]
  return(result);
 801c06e:	693b      	ldr	r3, [r7, #16]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c070:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c072:	b672      	cpsid	i
}
 801c074:	46c0      	nop			; (mov r8, r8)
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif
  
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801c076:	4b3c      	ldr	r3, [pc, #240]	; (801c168 <TRACE_TxCpltCallback+0x108>)
 801c078:	789b      	ldrb	r3, [r3, #2]
 801c07a:	2b02      	cmp	r3, #2
 801c07c:	d106      	bne.n	801c08c <TRACE_TxCpltCallback+0x2c>
  {
	  ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801c07e:	4b3a      	ldr	r3, [pc, #232]	; (801c168 <TRACE_TxCpltCallback+0x108>)
 801c080:	2200      	movs	r2, #0
 801c082:	709a      	strb	r2, [r3, #2]
	  ADV_TRACE_Ctx.TraceRdPtr = 0;
 801c084:	4b38      	ldr	r3, [pc, #224]	; (801c168 <TRACE_TxCpltCallback+0x108>)
 801c086:	2200      	movs	r2, #0
 801c088:	821a      	strh	r2, [r3, #16]
 801c08a:	e00a      	b.n	801c0a2 <TRACE_TxCpltCallback+0x42>
	  UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
	  ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801c08c:	4b36      	ldr	r3, [pc, #216]	; (801c168 <TRACE_TxCpltCallback+0x108>)
 801c08e:	8a1a      	ldrh	r2, [r3, #16]
 801c090:	4b35      	ldr	r3, [pc, #212]	; (801c168 <TRACE_TxCpltCallback+0x108>)
 801c092:	8a9b      	ldrh	r3, [r3, #20]
 801c094:	18d3      	adds	r3, r2, r3
 801c096:	b29b      	uxth	r3, r3
 801c098:	05db      	lsls	r3, r3, #23
 801c09a:	0ddb      	lsrs	r3, r3, #23
 801c09c:	b29a      	uxth	r2, r3
 801c09e:	4b32      	ldr	r3, [pc, #200]	; (801c168 <TRACE_TxCpltCallback+0x108>)
 801c0a0:	821a      	strh	r2, [r3, #16]
		UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
	}
#endif
  
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801c0a2:	4b31      	ldr	r3, [pc, #196]	; (801c168 <TRACE_TxCpltCallback+0x108>)
 801c0a4:	8a1a      	ldrh	r2, [r3, #16]
 801c0a6:	4b30      	ldr	r3, [pc, #192]	; (801c168 <TRACE_TxCpltCallback+0x108>)
 801c0a8:	8a5b      	ldrh	r3, [r3, #18]
 801c0aa:	429a      	cmp	r2, r3
 801c0ac:	d04c      	beq.n	801c148 <TRACE_TxCpltCallback+0xe8>
 801c0ae:	4b2e      	ldr	r3, [pc, #184]	; (801c168 <TRACE_TxCpltCallback+0x108>)
 801c0b0:	8adb      	ldrh	r3, [r3, #22]
 801c0b2:	2b01      	cmp	r3, #1
 801c0b4:	d148      	bne.n	801c148 <TRACE_TxCpltCallback+0xe8>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801c0b6:	4b2c      	ldr	r3, [pc, #176]	; (801c168 <TRACE_TxCpltCallback+0x108>)
 801c0b8:	789b      	ldrb	r3, [r3, #2]
 801c0ba:	2b01      	cmp	r3, #1
 801c0bc:	d117      	bne.n	801c0ee <TRACE_TxCpltCallback+0x8e>
    {
   		ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801c0be:	4b2a      	ldr	r3, [pc, #168]	; (801c168 <TRACE_TxCpltCallback+0x108>)
 801c0c0:	881a      	ldrh	r2, [r3, #0]
 801c0c2:	4b29      	ldr	r3, [pc, #164]	; (801c168 <TRACE_TxCpltCallback+0x108>)
 801c0c4:	8a1b      	ldrh	r3, [r3, #16]
 801c0c6:	1ad3      	subs	r3, r2, r3
 801c0c8:	b29a      	uxth	r2, r3
 801c0ca:	4b27      	ldr	r3, [pc, #156]	; (801c168 <TRACE_TxCpltCallback+0x108>)
 801c0cc:	829a      	strh	r2, [r3, #20]
   		ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801c0ce:	4b26      	ldr	r3, [pc, #152]	; (801c168 <TRACE_TxCpltCallback+0x108>)
 801c0d0:	2202      	movs	r2, #2
 801c0d2:	709a      	strb	r2, [r3, #2]
   		ADV_TRACE_Ctx.unchunk_enabled = 0;
 801c0d4:	4b24      	ldr	r3, [pc, #144]	; (801c168 <TRACE_TxCpltCallback+0x108>)
 801c0d6:	2200      	movs	r2, #0
 801c0d8:	801a      	strh	r2, [r3, #0]
      
    	UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n",ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);
      
    	if (0u == ADV_TRACE_Ctx.TraceSentSize)
 801c0da:	4b23      	ldr	r3, [pc, #140]	; (801c168 <TRACE_TxCpltCallback+0x108>)
 801c0dc:	8a9b      	ldrh	r3, [r3, #20]
 801c0de:	2b00      	cmp	r3, #0
 801c0e0:	d105      	bne.n	801c0ee <TRACE_TxCpltCallback+0x8e>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801c0e2:	4b21      	ldr	r3, [pc, #132]	; (801c168 <TRACE_TxCpltCallback+0x108>)
 801c0e4:	2200      	movs	r2, #0
 801c0e6:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801c0e8:	4b1f      	ldr	r3, [pc, #124]	; (801c168 <TRACE_TxCpltCallback+0x108>)
 801c0ea:	2200      	movs	r2, #0
 801c0ec:	821a      	strh	r2, [r3, #16]
      }
    }
    
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801c0ee:	4b1e      	ldr	r3, [pc, #120]	; (801c168 <TRACE_TxCpltCallback+0x108>)
 801c0f0:	789b      	ldrb	r3, [r3, #2]
 801c0f2:	2b00      	cmp	r3, #0
 801c0f4:	d116      	bne.n	801c124 <TRACE_TxCpltCallback+0xc4>
    {
#endif
      if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801c0f6:	4b1c      	ldr	r3, [pc, #112]	; (801c168 <TRACE_TxCpltCallback+0x108>)
 801c0f8:	8a5a      	ldrh	r2, [r3, #18]
 801c0fa:	4b1b      	ldr	r3, [pc, #108]	; (801c168 <TRACE_TxCpltCallback+0x108>)
 801c0fc:	8a1b      	ldrh	r3, [r3, #16]
 801c0fe:	429a      	cmp	r2, r3
 801c100:	d908      	bls.n	801c114 <TRACE_TxCpltCallback+0xb4>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801c102:	4b19      	ldr	r3, [pc, #100]	; (801c168 <TRACE_TxCpltCallback+0x108>)
 801c104:	8a5a      	ldrh	r2, [r3, #18]
 801c106:	4b18      	ldr	r3, [pc, #96]	; (801c168 <TRACE_TxCpltCallback+0x108>)
 801c108:	8a1b      	ldrh	r3, [r3, #16]
 801c10a:	1ad3      	subs	r3, r2, r3
 801c10c:	b29a      	uxth	r2, r3
 801c10e:	4b16      	ldr	r3, [pc, #88]	; (801c168 <TRACE_TxCpltCallback+0x108>)
 801c110:	829a      	strh	r2, [r3, #20]
 801c112:	e007      	b.n	801c124 <TRACE_TxCpltCallback+0xc4>
      }
      else  /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801c114:	4b14      	ldr	r3, [pc, #80]	; (801c168 <TRACE_TxCpltCallback+0x108>)
 801c116:	8a1b      	ldrh	r3, [r3, #16]
 801c118:	2280      	movs	r2, #128	; 0x80
 801c11a:	0092      	lsls	r2, r2, #2
 801c11c:	1ad3      	subs	r3, r2, r3
 801c11e:	b29a      	uxth	r2, r3
 801c120:	4b11      	ldr	r3, [pc, #68]	; (801c168 <TRACE_TxCpltCallback+0x108>)
 801c122:	829a      	strh	r2, [r3, #20]
 801c124:	697b      	ldr	r3, [r7, #20]
 801c126:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c128:	68fb      	ldr	r3, [r7, #12]
 801c12a:	f383 8810 	msr	PRIMASK, r3
}
 801c12e:	46c0      	nop			; (mov r8, r8)
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION(); 
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(&ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr], ADV_TRACE_Ctx.TraceSentSize);
 801c130:	4b0e      	ldr	r3, [pc, #56]	; (801c16c <TRACE_TxCpltCallback+0x10c>)
 801c132:	68db      	ldr	r3, [r3, #12]
 801c134:	4a0c      	ldr	r2, [pc, #48]	; (801c168 <TRACE_TxCpltCallback+0x108>)
 801c136:	8a12      	ldrh	r2, [r2, #16]
 801c138:	0011      	movs	r1, r2
 801c13a:	4a0d      	ldr	r2, [pc, #52]	; (801c170 <TRACE_TxCpltCallback+0x110>)
 801c13c:	1888      	adds	r0, r1, r2
 801c13e:	4a0a      	ldr	r2, [pc, #40]	; (801c168 <TRACE_TxCpltCallback+0x108>)
 801c140:	8a92      	ldrh	r2, [r2, #20]
 801c142:	0011      	movs	r1, r2
 801c144:	4798      	blx	r3
 801c146:	e00a      	b.n	801c15e <TRACE_TxCpltCallback+0xfe>
  }
  else
  {
    UTIL_ADV_TRACE_PostSendHook();      
 801c148:	f7e8 fe11 	bl	8004d6e <UTIL_ADV_TRACE_PostSendHook>
 801c14c:	697b      	ldr	r3, [r7, #20]
 801c14e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c150:	68bb      	ldr	r3, [r7, #8]
 801c152:	f383 8810 	msr	PRIMASK, r3
}
 801c156:	46c0      	nop			; (mov r8, r8)
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION(); 
    TRACE_UnLock();
 801c158:	f000 f8c2 	bl	801c2e0 <TRACE_UnLock>
  }
}
 801c15c:	46c0      	nop			; (mov r8, r8)
 801c15e:	46c0      	nop			; (mov r8, r8)
 801c160:	46bd      	mov	sp, r7
 801c162:	b006      	add	sp, #24
 801c164:	bd80      	pop	{r7, pc}
 801c166:	46c0      	nop			; (mov r8, r8)
 801c168:	20000f84 	.word	0x20000f84
 801c16c:	0801f124 	.word	0x0801f124
 801c170:	20000f9c 	.word	0x20000f9c

0801c174 <TRACE_AllocateBufer>:
  * @param  Size to allocate within fifo
  * @param  Pos position within the fifo
  * @retval write position inside the buffer is -1 no space available.
  */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801c174:	b580      	push	{r7, lr}
 801c176:	b086      	sub	sp, #24
 801c178:	af00      	add	r7, sp, #0
 801c17a:	0002      	movs	r2, r0
 801c17c:	6039      	str	r1, [r7, #0]
 801c17e:	1dbb      	adds	r3, r7, #6
 801c180:	801a      	strh	r2, [r3, #0]
  uint16_t freesize;
  int16_t ret = -1;
 801c182:	2314      	movs	r3, #20
 801c184:	18fb      	adds	r3, r7, r3
 801c186:	2201      	movs	r2, #1
 801c188:	4252      	negs	r2, r2
 801c18a:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c18c:	f3ef 8310 	mrs	r3, PRIMASK
 801c190:	60fb      	str	r3, [r7, #12]
  return(result);
 801c192:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c194:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801c196:	b672      	cpsid	i
}
 801c198:	46c0      	nop			; (mov r8, r8)

  if (ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801c19a:	4b42      	ldr	r3, [pc, #264]	; (801c2a4 <TRACE_AllocateBufer+0x130>)
 801c19c:	8a5a      	ldrh	r2, [r3, #18]
 801c19e:	4b41      	ldr	r3, [pc, #260]	; (801c2a4 <TRACE_AllocateBufer+0x130>)
 801c1a0:	8a1b      	ldrh	r3, [r3, #16]
 801c1a2:	429a      	cmp	r2, r3
 801c1a4:	d123      	bne.n	801c1ee <TRACE_AllocateBufer+0x7a>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801c1a6:	4b3f      	ldr	r3, [pc, #252]	; (801c2a4 <TRACE_AllocateBufer+0x130>)
 801c1a8:	8a5a      	ldrh	r2, [r3, #18]
 801c1aa:	2016      	movs	r0, #22
 801c1ac:	183b      	adds	r3, r7, r0
 801c1ae:	2180      	movs	r1, #128	; 0x80
 801c1b0:	0089      	lsls	r1, r1, #2
 801c1b2:	1a8a      	subs	r2, r1, r2
 801c1b4:	801a      	strh	r2, [r3, #0]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801c1b6:	1dba      	adds	r2, r7, #6
 801c1b8:	0001      	movs	r1, r0
 801c1ba:	187b      	adds	r3, r7, r1
 801c1bc:	8812      	ldrh	r2, [r2, #0]
 801c1be:	881b      	ldrh	r3, [r3, #0]
 801c1c0:	429a      	cmp	r2, r3
 801c1c2:	d346      	bcc.n	801c252 <TRACE_AllocateBufer+0xde>
 801c1c4:	4b37      	ldr	r3, [pc, #220]	; (801c2a4 <TRACE_AllocateBufer+0x130>)
 801c1c6:	8a1b      	ldrh	r3, [r3, #16]
 801c1c8:	1dba      	adds	r2, r7, #6
 801c1ca:	8812      	ldrh	r2, [r2, #0]
 801c1cc:	429a      	cmp	r2, r3
 801c1ce:	d240      	bcs.n	801c252 <TRACE_AllocateBufer+0xde>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801c1d0:	4b34      	ldr	r3, [pc, #208]	; (801c2a4 <TRACE_AllocateBufer+0x130>)
 801c1d2:	2201      	movs	r2, #1
 801c1d4:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801c1d6:	4b33      	ldr	r3, [pc, #204]	; (801c2a4 <TRACE_AllocateBufer+0x130>)
 801c1d8:	8a5a      	ldrh	r2, [r3, #18]
 801c1da:	4b32      	ldr	r3, [pc, #200]	; (801c2a4 <TRACE_AllocateBufer+0x130>)
 801c1dc:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801c1de:	187b      	adds	r3, r7, r1
 801c1e0:	4a30      	ldr	r2, [pc, #192]	; (801c2a4 <TRACE_AllocateBufer+0x130>)
 801c1e2:	8a12      	ldrh	r2, [r2, #16]
 801c1e4:	801a      	strh	r2, [r3, #0]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801c1e6:	4b2f      	ldr	r3, [pc, #188]	; (801c2a4 <TRACE_AllocateBufer+0x130>)
 801c1e8:	2200      	movs	r2, #0
 801c1ea:	825a      	strh	r2, [r3, #18]
 801c1ec:	e031      	b.n	801c252 <TRACE_AllocateBufer+0xde>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801c1ee:	4b2d      	ldr	r3, [pc, #180]	; (801c2a4 <TRACE_AllocateBufer+0x130>)
 801c1f0:	8a5a      	ldrh	r2, [r3, #18]
 801c1f2:	4b2c      	ldr	r3, [pc, #176]	; (801c2a4 <TRACE_AllocateBufer+0x130>)
 801c1f4:	8a1b      	ldrh	r3, [r3, #16]
 801c1f6:	429a      	cmp	r2, r3
 801c1f8:	d923      	bls.n	801c242 <TRACE_AllocateBufer+0xce>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801c1fa:	4b2a      	ldr	r3, [pc, #168]	; (801c2a4 <TRACE_AllocateBufer+0x130>)
 801c1fc:	8a5a      	ldrh	r2, [r3, #18]
 801c1fe:	2016      	movs	r0, #22
 801c200:	183b      	adds	r3, r7, r0
 801c202:	2180      	movs	r1, #128	; 0x80
 801c204:	0089      	lsls	r1, r1, #2
 801c206:	1a8a      	subs	r2, r1, r2
 801c208:	801a      	strh	r2, [r3, #0]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801c20a:	1dba      	adds	r2, r7, #6
 801c20c:	0001      	movs	r1, r0
 801c20e:	187b      	adds	r3, r7, r1
 801c210:	8812      	ldrh	r2, [r2, #0]
 801c212:	881b      	ldrh	r3, [r3, #0]
 801c214:	429a      	cmp	r2, r3
 801c216:	d31c      	bcc.n	801c252 <TRACE_AllocateBufer+0xde>
 801c218:	4b22      	ldr	r3, [pc, #136]	; (801c2a4 <TRACE_AllocateBufer+0x130>)
 801c21a:	8a1b      	ldrh	r3, [r3, #16]
 801c21c:	1dba      	adds	r2, r7, #6
 801c21e:	8812      	ldrh	r2, [r2, #0]
 801c220:	429a      	cmp	r2, r3
 801c222:	d216      	bcs.n	801c252 <TRACE_AllocateBufer+0xde>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801c224:	4b1f      	ldr	r3, [pc, #124]	; (801c2a4 <TRACE_AllocateBufer+0x130>)
 801c226:	2201      	movs	r2, #1
 801c228:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801c22a:	4b1e      	ldr	r3, [pc, #120]	; (801c2a4 <TRACE_AllocateBufer+0x130>)
 801c22c:	8a5a      	ldrh	r2, [r3, #18]
 801c22e:	4b1d      	ldr	r3, [pc, #116]	; (801c2a4 <TRACE_AllocateBufer+0x130>)
 801c230:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801c232:	187b      	adds	r3, r7, r1
 801c234:	4a1b      	ldr	r2, [pc, #108]	; (801c2a4 <TRACE_AllocateBufer+0x130>)
 801c236:	8a12      	ldrh	r2, [r2, #16]
 801c238:	801a      	strh	r2, [r3, #0]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801c23a:	4b1a      	ldr	r3, [pc, #104]	; (801c2a4 <TRACE_AllocateBufer+0x130>)
 801c23c:	2200      	movs	r2, #0
 801c23e:	825a      	strh	r2, [r3, #18]
 801c240:	e007      	b.n	801c252 <TRACE_AllocateBufer+0xde>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801c242:	4b18      	ldr	r3, [pc, #96]	; (801c2a4 <TRACE_AllocateBufer+0x130>)
 801c244:	8a19      	ldrh	r1, [r3, #16]
 801c246:	4b17      	ldr	r3, [pc, #92]	; (801c2a4 <TRACE_AllocateBufer+0x130>)
 801c248:	8a5a      	ldrh	r2, [r3, #18]
 801c24a:	2316      	movs	r3, #22
 801c24c:	18fb      	adds	r3, r7, r3
 801c24e:	1a8a      	subs	r2, r1, r2
 801c250:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }
  
  if (freesize > Size)
 801c252:	2316      	movs	r3, #22
 801c254:	18fa      	adds	r2, r7, r3
 801c256:	1dbb      	adds	r3, r7, #6
 801c258:	8812      	ldrh	r2, [r2, #0]
 801c25a:	881b      	ldrh	r3, [r3, #0]
 801c25c:	429a      	cmp	r2, r3
 801c25e:	d912      	bls.n	801c286 <TRACE_AllocateBufer+0x112>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801c260:	4b10      	ldr	r3, [pc, #64]	; (801c2a4 <TRACE_AllocateBufer+0x130>)
 801c262:	8a5a      	ldrh	r2, [r3, #18]
 801c264:	683b      	ldr	r3, [r7, #0]
 801c266:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801c268:	4b0e      	ldr	r3, [pc, #56]	; (801c2a4 <TRACE_AllocateBufer+0x130>)
 801c26a:	8a5a      	ldrh	r2, [r3, #18]
 801c26c:	1dbb      	adds	r3, r7, #6
 801c26e:	881b      	ldrh	r3, [r3, #0]
 801c270:	18d3      	adds	r3, r2, r3
 801c272:	b29b      	uxth	r3, r3
 801c274:	05db      	lsls	r3, r3, #23
 801c276:	0ddb      	lsrs	r3, r3, #23
 801c278:	b29a      	uxth	r2, r3
 801c27a:	4b0a      	ldr	r3, [pc, #40]	; (801c2a4 <TRACE_AllocateBufer+0x130>)
 801c27c:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801c27e:	2314      	movs	r3, #20
 801c280:	18fb      	adds	r3, r7, r3
 801c282:	2200      	movs	r2, #0
 801c284:	801a      	strh	r2, [r3, #0]
 801c286:	693b      	ldr	r3, [r7, #16]
 801c288:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c28a:	68bb      	ldr	r3, [r7, #8]
 801c28c:	f383 8810 	msr	PRIMASK, r3
}
 801c290:	46c0      	nop			; (mov r8, r8)
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_AllocateBufer(%d-%d::%d-%d)--\n",freesize - Size, Size, ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceWrPtr);
#endif
  }

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();  
  return ret;
 801c292:	2314      	movs	r3, #20
 801c294:	18fb      	adds	r3, r7, r3
 801c296:	2200      	movs	r2, #0
 801c298:	5e9b      	ldrsh	r3, [r3, r2]
}
 801c29a:	0018      	movs	r0, r3
 801c29c:	46bd      	mov	sp, r7
 801c29e:	b006      	add	sp, #24
 801c2a0:	bd80      	pop	{r7, pc}
 801c2a2:	46c0      	nop			; (mov r8, r8)
 801c2a4:	20000f84 	.word	0x20000f84

0801c2a8 <TRACE_Lock>:
/**
  * @brief  Lock the trace buffer.
  * @retval None.
  */
static void TRACE_Lock(void)
{
 801c2a8:	b580      	push	{r7, lr}
 801c2aa:	b084      	sub	sp, #16
 801c2ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c2ae:	f3ef 8310 	mrs	r3, PRIMASK
 801c2b2:	607b      	str	r3, [r7, #4]
  return(result);
 801c2b4:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c2b6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801c2b8:	b672      	cpsid	i
}
 801c2ba:	46c0      	nop			; (mov r8, r8)
  ADV_TRACE_Ctx.TraceLock++;
 801c2bc:	4b07      	ldr	r3, [pc, #28]	; (801c2dc <TRACE_Lock+0x34>)
 801c2be:	8adb      	ldrh	r3, [r3, #22]
 801c2c0:	3301      	adds	r3, #1
 801c2c2:	b29a      	uxth	r2, r3
 801c2c4:	4b05      	ldr	r3, [pc, #20]	; (801c2dc <TRACE_Lock+0x34>)
 801c2c6:	82da      	strh	r2, [r3, #22]
 801c2c8:	68fb      	ldr	r3, [r7, #12]
 801c2ca:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c2cc:	68bb      	ldr	r3, [r7, #8]
 801c2ce:	f383 8810 	msr	PRIMASK, r3
}
 801c2d2:	46c0      	nop			; (mov r8, r8)
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801c2d4:	46c0      	nop			; (mov r8, r8)
 801c2d6:	46bd      	mov	sp, r7
 801c2d8:	b004      	add	sp, #16
 801c2da:	bd80      	pop	{r7, pc}
 801c2dc:	20000f84 	.word	0x20000f84

0801c2e0 <TRACE_UnLock>:
/**
  * @brief  UnLock the trace buffer.
  * @retval None.
  */
static void TRACE_UnLock(void)
{
 801c2e0:	b580      	push	{r7, lr}
 801c2e2:	b084      	sub	sp, #16
 801c2e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c2e6:	f3ef 8310 	mrs	r3, PRIMASK
 801c2ea:	607b      	str	r3, [r7, #4]
  return(result);
 801c2ec:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c2ee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801c2f0:	b672      	cpsid	i
}
 801c2f2:	46c0      	nop			; (mov r8, r8)
  ADV_TRACE_Ctx.TraceLock--;
 801c2f4:	4b07      	ldr	r3, [pc, #28]	; (801c314 <TRACE_UnLock+0x34>)
 801c2f6:	8adb      	ldrh	r3, [r3, #22]
 801c2f8:	3b01      	subs	r3, #1
 801c2fa:	b29a      	uxth	r2, r3
 801c2fc:	4b05      	ldr	r3, [pc, #20]	; (801c314 <TRACE_UnLock+0x34>)
 801c2fe:	82da      	strh	r2, [r3, #22]
 801c300:	68fb      	ldr	r3, [r7, #12]
 801c302:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c304:	68bb      	ldr	r3, [r7, #8]
 801c306:	f383 8810 	msr	PRIMASK, r3
}
 801c30a:	46c0      	nop			; (mov r8, r8)
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801c30c:	46c0      	nop			; (mov r8, r8)
 801c30e:	46bd      	mov	sp, r7
 801c310:	b004      	add	sp, #16
 801c312:	bd80      	pop	{r7, pc}
 801c314:	20000f84 	.word	0x20000f84

0801c318 <TRACE_IsLocked>:
/**
  * @brief  UnLock the trace buffer.
  * @retval None.
  */
static uint32_t TRACE_IsLocked(void)
{
 801c318:	b580      	push	{r7, lr}
 801c31a:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801c31c:	4b03      	ldr	r3, [pc, #12]	; (801c32c <TRACE_IsLocked+0x14>)
 801c31e:	8adb      	ldrh	r3, [r3, #22]
 801c320:	1e5a      	subs	r2, r3, #1
 801c322:	4193      	sbcs	r3, r2
 801c324:	b2db      	uxtb	r3, r3
}
 801c326:	0018      	movs	r0, r3
 801c328:	46bd      	mov	sp, r7
 801c32a:	bd80      	pop	{r7, pc}
 801c32c:	20000f84 	.word	0x20000f84

0801c330 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801c330:	b580      	push	{r7, lr}
 801c332:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801c334:	4b04      	ldr	r3, [pc, #16]	; (801c348 <UTIL_LPM_Init+0x18>)
 801c336:	2200      	movs	r2, #0
 801c338:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801c33a:	4b04      	ldr	r3, [pc, #16]	; (801c34c <UTIL_LPM_Init+0x1c>)
 801c33c:	2200      	movs	r2, #0
 801c33e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801c340:	46c0      	nop			; (mov r8, r8)
 801c342:	46bd      	mov	sp, r7
 801c344:	bd80      	pop	{r7, pc}
 801c346:	46c0      	nop			; (mov r8, r8)
 801c348:	2000129c 	.word	0x2000129c
 801c34c:	200012a0 	.word	0x200012a0

0801c350 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801c350:	b580      	push	{r7, lr}
 801c352:	b086      	sub	sp, #24
 801c354:	af00      	add	r7, sp, #0
 801c356:	6078      	str	r0, [r7, #4]
 801c358:	000a      	movs	r2, r1
 801c35a:	1cfb      	adds	r3, r7, #3
 801c35c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c35e:	f3ef 8310 	mrs	r3, PRIMASK
 801c362:	613b      	str	r3, [r7, #16]
  return(result);
 801c364:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801c366:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c368:	b672      	cpsid	i
}
 801c36a:	46c0      	nop			; (mov r8, r8)
  
  switch( state )
 801c36c:	1cfb      	adds	r3, r7, #3
 801c36e:	781b      	ldrb	r3, [r3, #0]
 801c370:	2b00      	cmp	r3, #0
 801c372:	d008      	beq.n	801c386 <UTIL_LPM_SetStopMode+0x36>
 801c374:	2b01      	cmp	r3, #1
 801c376:	d10e      	bne.n	801c396 <UTIL_LPM_SetStopMode+0x46>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801c378:	4b0c      	ldr	r3, [pc, #48]	; (801c3ac <UTIL_LPM_SetStopMode+0x5c>)
 801c37a:	681a      	ldr	r2, [r3, #0]
 801c37c:	687b      	ldr	r3, [r7, #4]
 801c37e:	431a      	orrs	r2, r3
 801c380:	4b0a      	ldr	r3, [pc, #40]	; (801c3ac <UTIL_LPM_SetStopMode+0x5c>)
 801c382:	601a      	str	r2, [r3, #0]
      break;
 801c384:	e008      	b.n	801c398 <UTIL_LPM_SetStopMode+0x48>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801c386:	687b      	ldr	r3, [r7, #4]
 801c388:	43da      	mvns	r2, r3
 801c38a:	4b08      	ldr	r3, [pc, #32]	; (801c3ac <UTIL_LPM_SetStopMode+0x5c>)
 801c38c:	681b      	ldr	r3, [r3, #0]
 801c38e:	401a      	ands	r2, r3
 801c390:	4b06      	ldr	r3, [pc, #24]	; (801c3ac <UTIL_LPM_SetStopMode+0x5c>)
 801c392:	601a      	str	r2, [r3, #0]
      break;
 801c394:	e000      	b.n	801c398 <UTIL_LPM_SetStopMode+0x48>
    }
  default :
    {
      break;
 801c396:	46c0      	nop			; (mov r8, r8)
 801c398:	697b      	ldr	r3, [r7, #20]
 801c39a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c39c:	68fb      	ldr	r3, [r7, #12]
 801c39e:	f383 8810 	msr	PRIMASK, r3
}
 801c3a2:	46c0      	nop			; (mov r8, r8)
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801c3a4:	46c0      	nop			; (mov r8, r8)
 801c3a6:	46bd      	mov	sp, r7
 801c3a8:	b006      	add	sp, #24
 801c3aa:	bd80      	pop	{r7, pc}
 801c3ac:	2000129c 	.word	0x2000129c

0801c3b0 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801c3b0:	b580      	push	{r7, lr}
 801c3b2:	b086      	sub	sp, #24
 801c3b4:	af00      	add	r7, sp, #0
 801c3b6:	6078      	str	r0, [r7, #4]
 801c3b8:	000a      	movs	r2, r1
 801c3ba:	1cfb      	adds	r3, r7, #3
 801c3bc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c3be:	f3ef 8310 	mrs	r3, PRIMASK
 801c3c2:	613b      	str	r3, [r7, #16]
  return(result);
 801c3c4:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801c3c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c3c8:	b672      	cpsid	i
}
 801c3ca:	46c0      	nop			; (mov r8, r8)
  
  switch(state)
 801c3cc:	1cfb      	adds	r3, r7, #3
 801c3ce:	781b      	ldrb	r3, [r3, #0]
 801c3d0:	2b00      	cmp	r3, #0
 801c3d2:	d008      	beq.n	801c3e6 <UTIL_LPM_SetOffMode+0x36>
 801c3d4:	2b01      	cmp	r3, #1
 801c3d6:	d10e      	bne.n	801c3f6 <UTIL_LPM_SetOffMode+0x46>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801c3d8:	4b0c      	ldr	r3, [pc, #48]	; (801c40c <UTIL_LPM_SetOffMode+0x5c>)
 801c3da:	681a      	ldr	r2, [r3, #0]
 801c3dc:	687b      	ldr	r3, [r7, #4]
 801c3de:	431a      	orrs	r2, r3
 801c3e0:	4b0a      	ldr	r3, [pc, #40]	; (801c40c <UTIL_LPM_SetOffMode+0x5c>)
 801c3e2:	601a      	str	r2, [r3, #0]
      break;
 801c3e4:	e008      	b.n	801c3f8 <UTIL_LPM_SetOffMode+0x48>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801c3e6:	687b      	ldr	r3, [r7, #4]
 801c3e8:	43da      	mvns	r2, r3
 801c3ea:	4b08      	ldr	r3, [pc, #32]	; (801c40c <UTIL_LPM_SetOffMode+0x5c>)
 801c3ec:	681b      	ldr	r3, [r3, #0]
 801c3ee:	401a      	ands	r2, r3
 801c3f0:	4b06      	ldr	r3, [pc, #24]	; (801c40c <UTIL_LPM_SetOffMode+0x5c>)
 801c3f2:	601a      	str	r2, [r3, #0]
      break;
 801c3f4:	e000      	b.n	801c3f8 <UTIL_LPM_SetOffMode+0x48>
    }
  default :
    {
      break;
 801c3f6:	46c0      	nop			; (mov r8, r8)
 801c3f8:	697b      	ldr	r3, [r7, #20]
 801c3fa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c3fc:	68fb      	ldr	r3, [r7, #12]
 801c3fe:	f383 8810 	msr	PRIMASK, r3
}
 801c402:	46c0      	nop			; (mov r8, r8)
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801c404:	46c0      	nop			; (mov r8, r8)
 801c406:	46bd      	mov	sp, r7
 801c408:	b006      	add	sp, #24
 801c40a:	bd80      	pop	{r7, pc}
 801c40c:	200012a0 	.word	0x200012a0

0801c410 <UTIL_LPM_GetMode>:

UTIL_LPM_Mode_t UTIL_LPM_GetMode( void )
{
 801c410:	b580      	push	{r7, lr}
 801c412:	b084      	sub	sp, #16
 801c414:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c416:	f3ef 8310 	mrs	r3, PRIMASK
 801c41a:	607b      	str	r3, [r7, #4]
  return(result);
 801c41c:	687b      	ldr	r3, [r7, #4]
  UTIL_LPM_Mode_t mode_selected;

  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801c41e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 801c420:	b672      	cpsid	i
}
 801c422:	46c0      	nop			; (mov r8, r8)

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801c424:	4b11      	ldr	r3, [pc, #68]	; (801c46c <UTIL_LPM_GetMode+0x5c>)
 801c426:	681b      	ldr	r3, [r3, #0]
 801c428:	2b00      	cmp	r3, #0
 801c42a:	d004      	beq.n	801c436 <UTIL_LPM_GetMode+0x26>
  {
    /**
     * At least one user disallows Stop Mode
     */
    mode_selected = UTIL_LPM_SLEEPMODE;
 801c42c:	230f      	movs	r3, #15
 801c42e:	18fb      	adds	r3, r7, r3
 801c430:	2200      	movs	r2, #0
 801c432:	701a      	strb	r2, [r3, #0]
 801c434:	e00c      	b.n	801c450 <UTIL_LPM_GetMode+0x40>
  }
  else
  {
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801c436:	4b0e      	ldr	r3, [pc, #56]	; (801c470 <UTIL_LPM_GetMode+0x60>)
 801c438:	681b      	ldr	r3, [r3, #0]
 801c43a:	2b00      	cmp	r3, #0
 801c43c:	d004      	beq.n	801c448 <UTIL_LPM_GetMode+0x38>
    {
      /**
       * At least one user disallows Off Mode
       */
      mode_selected = UTIL_LPM_STOPMODE;
 801c43e:	230f      	movs	r3, #15
 801c440:	18fb      	adds	r3, r7, r3
 801c442:	2201      	movs	r2, #1
 801c444:	701a      	strb	r2, [r3, #0]
 801c446:	e003      	b.n	801c450 <UTIL_LPM_GetMode+0x40>
    }
    else
    {
      mode_selected = UTIL_LPM_OFFMODE;
 801c448:	230f      	movs	r3, #15
 801c44a:	18fb      	adds	r3, r7, r3
 801c44c:	2202      	movs	r2, #2
 801c44e:	701a      	strb	r2, [r3, #0]
 801c450:	68bb      	ldr	r3, [r7, #8]
 801c452:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c454:	683b      	ldr	r3, [r7, #0]
 801c456:	f383 8810 	msr	PRIMASK, r3
}
 801c45a:	46c0      	nop			; (mov r8, r8)
    }
  }

  UTIL_LPM_EXIT_CRITICAL_SECTION( );

  return mode_selected;
 801c45c:	230f      	movs	r3, #15
 801c45e:	18fb      	adds	r3, r7, r3
 801c460:	781b      	ldrb	r3, [r3, #0]
}
 801c462:	0018      	movs	r0, r3
 801c464:	46bd      	mov	sp, r7
 801c466:	b004      	add	sp, #16
 801c468:	bd80      	pop	{r7, pc}
 801c46a:	46c0      	nop			; (mov r8, r8)
 801c46c:	2000129c 	.word	0x2000129c
 801c470:	200012a0 	.word	0x200012a0

0801c474 <UTIL_LPM_EnterLowPower>:

void UTIL_LPM_EnterLowPower( void )
{
 801c474:	b580      	push	{r7, lr}
 801c476:	b084      	sub	sp, #16
 801c478:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c47a:	f3ef 8310 	mrs	r3, PRIMASK
 801c47e:	60bb      	str	r3, [r7, #8]
  return(result);
 801c480:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801c482:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801c484:	b672      	cpsid	i
}
 801c486:	46c0      	nop			; (mov r8, r8)

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801c488:	4b12      	ldr	r3, [pc, #72]	; (801c4d4 <UTIL_LPM_EnterLowPower+0x60>)
 801c48a:	681b      	ldr	r3, [r3, #0]
 801c48c:	2b00      	cmp	r3, #0
 801c48e:	d006      	beq.n	801c49e <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801c490:	4b11      	ldr	r3, [pc, #68]	; (801c4d8 <UTIL_LPM_EnterLowPower+0x64>)
 801c492:	681b      	ldr	r3, [r3, #0]
 801c494:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801c496:	4b10      	ldr	r3, [pc, #64]	; (801c4d8 <UTIL_LPM_EnterLowPower+0x64>)
 801c498:	685b      	ldr	r3, [r3, #4]
 801c49a:	4798      	blx	r3
 801c49c:	e010      	b.n	801c4c0 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801c49e:	4b0f      	ldr	r3, [pc, #60]	; (801c4dc <UTIL_LPM_EnterLowPower+0x68>)
 801c4a0:	681b      	ldr	r3, [r3, #0]
 801c4a2:	2b00      	cmp	r3, #0
 801c4a4:	d006      	beq.n	801c4b4 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801c4a6:	4b0c      	ldr	r3, [pc, #48]	; (801c4d8 <UTIL_LPM_EnterLowPower+0x64>)
 801c4a8:	689b      	ldr	r3, [r3, #8]
 801c4aa:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801c4ac:	4b0a      	ldr	r3, [pc, #40]	; (801c4d8 <UTIL_LPM_EnterLowPower+0x64>)
 801c4ae:	68db      	ldr	r3, [r3, #12]
 801c4b0:	4798      	blx	r3
 801c4b2:	e005      	b.n	801c4c0 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801c4b4:	4b08      	ldr	r3, [pc, #32]	; (801c4d8 <UTIL_LPM_EnterLowPower+0x64>)
 801c4b6:	691b      	ldr	r3, [r3, #16]
 801c4b8:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801c4ba:	4b07      	ldr	r3, [pc, #28]	; (801c4d8 <UTIL_LPM_EnterLowPower+0x64>)
 801c4bc:	695b      	ldr	r3, [r3, #20]
 801c4be:	4798      	blx	r3
 801c4c0:	68fb      	ldr	r3, [r7, #12]
 801c4c2:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c4c4:	687b      	ldr	r3, [r7, #4]
 801c4c6:	f383 8810 	msr	PRIMASK, r3
}
 801c4ca:	46c0      	nop			; (mov r8, r8)
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801c4cc:	46c0      	nop			; (mov r8, r8)
 801c4ce:	46bd      	mov	sp, r7
 801c4d0:	b004      	add	sp, #16
 801c4d2:	bd80      	pop	{r7, pc}
 801c4d4:	2000129c 	.word	0x2000129c
 801c4d8:	0801f100 	.word	0x0801f100
 801c4dc:	200012a0 	.word	0x200012a0

0801c4e0 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801c4e0:	b580      	push	{r7, lr}
 801c4e2:	b086      	sub	sp, #24
 801c4e4:	af00      	add	r7, sp, #0
 801c4e6:	60f8      	str	r0, [r7, #12]
 801c4e8:	60b9      	str	r1, [r7, #8]
 801c4ea:	1dbb      	adds	r3, r7, #6
 801c4ec:	801a      	strh	r2, [r3, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801c4ee:	68fb      	ldr	r3, [r7, #12]
 801c4f0:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801c4f2:	68bb      	ldr	r3, [r7, #8]
 801c4f4:	613b      	str	r3, [r7, #16]

  while( size-- )
 801c4f6:	e007      	b.n	801c508 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801c4f8:	693a      	ldr	r2, [r7, #16]
 801c4fa:	1c53      	adds	r3, r2, #1
 801c4fc:	613b      	str	r3, [r7, #16]
 801c4fe:	697b      	ldr	r3, [r7, #20]
 801c500:	1c59      	adds	r1, r3, #1
 801c502:	6179      	str	r1, [r7, #20]
 801c504:	7812      	ldrb	r2, [r2, #0]
 801c506:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801c508:	1dbb      	adds	r3, r7, #6
 801c50a:	881b      	ldrh	r3, [r3, #0]
 801c50c:	1dba      	adds	r2, r7, #6
 801c50e:	1e59      	subs	r1, r3, #1
 801c510:	8011      	strh	r1, [r2, #0]
 801c512:	2b00      	cmp	r3, #0
 801c514:	d1f0      	bne.n	801c4f8 <UTIL_MEM_cpy_8+0x18>
    }
}
 801c516:	46c0      	nop			; (mov r8, r8)
 801c518:	46c0      	nop			; (mov r8, r8)
 801c51a:	46bd      	mov	sp, r7
 801c51c:	b006      	add	sp, #24
 801c51e:	bd80      	pop	{r7, pc}

0801c520 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801c520:	b580      	push	{r7, lr}
 801c522:	b084      	sub	sp, #16
 801c524:	af00      	add	r7, sp, #0
 801c526:	6078      	str	r0, [r7, #4]
 801c528:	0008      	movs	r0, r1
 801c52a:	0011      	movs	r1, r2
 801c52c:	1cfb      	adds	r3, r7, #3
 801c52e:	1c02      	adds	r2, r0, #0
 801c530:	701a      	strb	r2, [r3, #0]
 801c532:	003b      	movs	r3, r7
 801c534:	1c0a      	adds	r2, r1, #0
 801c536:	801a      	strh	r2, [r3, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801c538:	687b      	ldr	r3, [r7, #4]
 801c53a:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801c53c:	e005      	b.n	801c54a <UTIL_MEM_set_8+0x2a>
  {
    *dst8++ = value;
 801c53e:	68fb      	ldr	r3, [r7, #12]
 801c540:	1c5a      	adds	r2, r3, #1
 801c542:	60fa      	str	r2, [r7, #12]
 801c544:	1cfa      	adds	r2, r7, #3
 801c546:	7812      	ldrb	r2, [r2, #0]
 801c548:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801c54a:	003b      	movs	r3, r7
 801c54c:	881b      	ldrh	r3, [r3, #0]
 801c54e:	003a      	movs	r2, r7
 801c550:	1e59      	subs	r1, r3, #1
 801c552:	8011      	strh	r1, [r2, #0]
 801c554:	2b00      	cmp	r3, #0
 801c556:	d1f2      	bne.n	801c53e <UTIL_MEM_set_8+0x1e>
  }
}
 801c558:	46c0      	nop			; (mov r8, r8)
 801c55a:	46c0      	nop			; (mov r8, r8)
 801c55c:	46bd      	mov	sp, r7
 801c55e:	b004      	add	sp, #16
 801c560:	bd80      	pop	{r7, pc}
	...

0801c564 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801c564:	b580      	push	{r7, lr}
 801c566:	b08c      	sub	sp, #48	; 0x30
 801c568:	af00      	add	r7, sp, #0
 801c56a:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801c56c:	4b66      	ldr	r3, [pc, #408]	; (801c708 <UTIL_SEQ_Run+0x1a4>)
 801c56e:	681b      	ldr	r3, [r3, #0]
 801c570:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 801c572:	4b65      	ldr	r3, [pc, #404]	; (801c708 <UTIL_SEQ_Run+0x1a4>)
 801c574:	681b      	ldr	r3, [r3, #0]
 801c576:	687a      	ldr	r2, [r7, #4]
 801c578:	401a      	ands	r2, r3
 801c57a:	4b63      	ldr	r3, [pc, #396]	; (801c708 <UTIL_SEQ_Run+0x1a4>)
 801c57c:	601a      	str	r2, [r3, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 801c57e:	e086      	b.n	801c68e <UTIL_SEQ_Run+0x12a>
  {
    counter = 0U;
 801c580:	2300      	movs	r3, #0
 801c582:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 801c584:	e002      	b.n	801c58c <UTIL_SEQ_Run+0x28>
    {
      counter++;
 801c586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c588:	3301      	adds	r3, #1
 801c58a:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 801c58c:	4b5f      	ldr	r3, [pc, #380]	; (801c70c <UTIL_SEQ_Run+0x1a8>)
 801c58e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c590:	00d2      	lsls	r2, r2, #3
 801c592:	58d2      	ldr	r2, [r2, r3]
 801c594:	4b5e      	ldr	r3, [pc, #376]	; (801c710 <UTIL_SEQ_Run+0x1ac>)
 801c596:	681b      	ldr	r3, [r3, #0]
 801c598:	401a      	ands	r2, r3
 801c59a:	4b5b      	ldr	r3, [pc, #364]	; (801c708 <UTIL_SEQ_Run+0x1a4>)
 801c59c:	681b      	ldr	r3, [r3, #0]
 801c59e:	4013      	ands	r3, r2
 801c5a0:	d0f1      	beq.n	801c586 <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 801c5a2:	4b5a      	ldr	r3, [pc, #360]	; (801c70c <UTIL_SEQ_Run+0x1a8>)
 801c5a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c5a6:	00d2      	lsls	r2, r2, #3
 801c5a8:	58d2      	ldr	r2, [r2, r3]
 801c5aa:	4b59      	ldr	r3, [pc, #356]	; (801c710 <UTIL_SEQ_Run+0x1ac>)
 801c5ac:	681b      	ldr	r3, [r3, #0]
 801c5ae:	401a      	ands	r2, r3
 801c5b0:	4b55      	ldr	r3, [pc, #340]	; (801c708 <UTIL_SEQ_Run+0x1a4>)
 801c5b2:	681b      	ldr	r3, [r3, #0]
 801c5b4:	4013      	ands	r3, r2
 801c5b6:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801c5b8:	4a54      	ldr	r2, [pc, #336]	; (801c70c <UTIL_SEQ_Run+0x1a8>)
 801c5ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c5bc:	00db      	lsls	r3, r3, #3
 801c5be:	18d3      	adds	r3, r2, r3
 801c5c0:	3304      	adds	r3, #4
 801c5c2:	681b      	ldr	r3, [r3, #0]
 801c5c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c5c6:	4013      	ands	r3, r2
 801c5c8:	d107      	bne.n	801c5da <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801c5ca:	4a50      	ldr	r2, [pc, #320]	; (801c70c <UTIL_SEQ_Run+0x1a8>)
 801c5cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c5ce:	00db      	lsls	r3, r3, #3
 801c5d0:	18d3      	adds	r3, r2, r3
 801c5d2:	3304      	adds	r3, #4
 801c5d4:	2201      	movs	r2, #1
 801c5d6:	4252      	negs	r2, r2
 801c5d8:	601a      	str	r2, [r3, #0]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801c5da:	4a4c      	ldr	r2, [pc, #304]	; (801c70c <UTIL_SEQ_Run+0x1a8>)
 801c5dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c5de:	00db      	lsls	r3, r3, #3
 801c5e0:	18d3      	adds	r3, r2, r3
 801c5e2:	3304      	adds	r3, #4
 801c5e4:	681b      	ldr	r3, [r3, #0]
 801c5e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c5e8:	4013      	ands	r3, r2
 801c5ea:	0018      	movs	r0, r3
 801c5ec:	f000 f8f6 	bl	801c7dc <SEQ_BitPosition>
 801c5f0:	0003      	movs	r3, r0
 801c5f2:	001a      	movs	r2, r3
 801c5f4:	4b47      	ldr	r3, [pc, #284]	; (801c714 <UTIL_SEQ_Run+0x1b0>)
 801c5f6:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801c5f8:	4a44      	ldr	r2, [pc, #272]	; (801c70c <UTIL_SEQ_Run+0x1a8>)
 801c5fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c5fc:	00db      	lsls	r3, r3, #3
 801c5fe:	18d3      	adds	r3, r2, r3
 801c600:	3304      	adds	r3, #4
 801c602:	681a      	ldr	r2, [r3, #0]
 801c604:	4b43      	ldr	r3, [pc, #268]	; (801c714 <UTIL_SEQ_Run+0x1b0>)
 801c606:	681b      	ldr	r3, [r3, #0]
 801c608:	2101      	movs	r1, #1
 801c60a:	4099      	lsls	r1, r3
 801c60c:	000b      	movs	r3, r1
 801c60e:	43db      	mvns	r3, r3
 801c610:	401a      	ands	r2, r3
 801c612:	493e      	ldr	r1, [pc, #248]	; (801c70c <UTIL_SEQ_Run+0x1a8>)
 801c614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c616:	00db      	lsls	r3, r3, #3
 801c618:	18cb      	adds	r3, r1, r3
 801c61a:	3304      	adds	r3, #4
 801c61c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c61e:	f3ef 8310 	mrs	r3, PRIMASK
 801c622:	61bb      	str	r3, [r7, #24]
  return(result);
 801c624:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801c626:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801c628:	b672      	cpsid	i
}
 801c62a:	46c0      	nop			; (mov r8, r8)
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801c62c:	4b39      	ldr	r3, [pc, #228]	; (801c714 <UTIL_SEQ_Run+0x1b0>)
 801c62e:	681b      	ldr	r3, [r3, #0]
 801c630:	2201      	movs	r2, #1
 801c632:	409a      	lsls	r2, r3
 801c634:	0013      	movs	r3, r2
 801c636:	43da      	mvns	r2, r3
 801c638:	4b37      	ldr	r3, [pc, #220]	; (801c718 <UTIL_SEQ_Run+0x1b4>)
 801c63a:	681b      	ldr	r3, [r3, #0]
 801c63c:	401a      	ands	r2, r3
 801c63e:	4b36      	ldr	r3, [pc, #216]	; (801c718 <UTIL_SEQ_Run+0x1b4>)
 801c640:	601a      	str	r2, [r3, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801c642:	2302      	movs	r3, #2
 801c644:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c646:	e013      	b.n	801c670 <UTIL_SEQ_Run+0x10c>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801c648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c64a:	1e5a      	subs	r2, r3, #1
 801c64c:	4b2f      	ldr	r3, [pc, #188]	; (801c70c <UTIL_SEQ_Run+0x1a8>)
 801c64e:	00d2      	lsls	r2, r2, #3
 801c650:	58d1      	ldr	r1, [r2, r3]
 801c652:	4b30      	ldr	r3, [pc, #192]	; (801c714 <UTIL_SEQ_Run+0x1b0>)
 801c654:	681b      	ldr	r3, [r3, #0]
 801c656:	2201      	movs	r2, #1
 801c658:	409a      	lsls	r2, r3
 801c65a:	0013      	movs	r3, r2
 801c65c:	43db      	mvns	r3, r3
 801c65e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c660:	3a01      	subs	r2, #1
 801c662:	4019      	ands	r1, r3
 801c664:	4b29      	ldr	r3, [pc, #164]	; (801c70c <UTIL_SEQ_Run+0x1a8>)
 801c666:	00d2      	lsls	r2, r2, #3
 801c668:	50d1      	str	r1, [r2, r3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801c66a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c66c:	3b01      	subs	r3, #1
 801c66e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c672:	2b00      	cmp	r3, #0
 801c674:	d1e8      	bne.n	801c648 <UTIL_SEQ_Run+0xe4>
 801c676:	6a3b      	ldr	r3, [r7, #32]
 801c678:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c67a:	697b      	ldr	r3, [r7, #20]
 801c67c:	f383 8810 	msr	PRIMASK, r3
}
 801c680:	46c0      	nop			; (mov r8, r8)
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801c682:	4b24      	ldr	r3, [pc, #144]	; (801c714 <UTIL_SEQ_Run+0x1b0>)
 801c684:	681a      	ldr	r2, [r3, #0]
 801c686:	4b25      	ldr	r3, [pc, #148]	; (801c71c <UTIL_SEQ_Run+0x1b8>)
 801c688:	0092      	lsls	r2, r2, #2
 801c68a:	58d3      	ldr	r3, [r2, r3]
 801c68c:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 801c68e:	4b22      	ldr	r3, [pc, #136]	; (801c718 <UTIL_SEQ_Run+0x1b4>)
 801c690:	681a      	ldr	r2, [r3, #0]
 801c692:	4b1f      	ldr	r3, [pc, #124]	; (801c710 <UTIL_SEQ_Run+0x1ac>)
 801c694:	681b      	ldr	r3, [r3, #0]
 801c696:	401a      	ands	r2, r3
 801c698:	4b1b      	ldr	r3, [pc, #108]	; (801c708 <UTIL_SEQ_Run+0x1a4>)
 801c69a:	681b      	ldr	r3, [r3, #0]
 801c69c:	4013      	ands	r3, r2
 801c69e:	d006      	beq.n	801c6ae <UTIL_SEQ_Run+0x14a>
 801c6a0:	4b1f      	ldr	r3, [pc, #124]	; (801c720 <UTIL_SEQ_Run+0x1bc>)
 801c6a2:	681a      	ldr	r2, [r3, #0]
 801c6a4:	4b1f      	ldr	r3, [pc, #124]	; (801c724 <UTIL_SEQ_Run+0x1c0>)
 801c6a6:	681b      	ldr	r3, [r3, #0]
 801c6a8:	4013      	ands	r3, r2
 801c6aa:	d100      	bne.n	801c6ae <UTIL_SEQ_Run+0x14a>
 801c6ac:	e768      	b.n	801c580 <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801c6ae:	4b19      	ldr	r3, [pc, #100]	; (801c714 <UTIL_SEQ_Run+0x1b0>)
 801c6b0:	2201      	movs	r2, #1
 801c6b2:	4252      	negs	r2, r2
 801c6b4:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801c6b6:	f000 f887 	bl	801c7c8 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c6ba:	f3ef 8310 	mrs	r3, PRIMASK
 801c6be:	613b      	str	r3, [r7, #16]
  return(result);
 801c6c0:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801c6c2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c6c4:	b672      	cpsid	i
}
 801c6c6:	46c0      	nop			; (mov r8, r8)
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 801c6c8:	4b13      	ldr	r3, [pc, #76]	; (801c718 <UTIL_SEQ_Run+0x1b4>)
 801c6ca:	681a      	ldr	r2, [r3, #0]
 801c6cc:	4b10      	ldr	r3, [pc, #64]	; (801c710 <UTIL_SEQ_Run+0x1ac>)
 801c6ce:	681b      	ldr	r3, [r3, #0]
 801c6d0:	401a      	ands	r2, r3
 801c6d2:	4b0d      	ldr	r3, [pc, #52]	; (801c708 <UTIL_SEQ_Run+0x1a4>)
 801c6d4:	681b      	ldr	r3, [r3, #0]
 801c6d6:	4013      	ands	r3, r2
 801c6d8:	d107      	bne.n	801c6ea <UTIL_SEQ_Run+0x186>
 801c6da:	4b11      	ldr	r3, [pc, #68]	; (801c720 <UTIL_SEQ_Run+0x1bc>)
 801c6dc:	681a      	ldr	r2, [r3, #0]
 801c6de:	4b11      	ldr	r3, [pc, #68]	; (801c724 <UTIL_SEQ_Run+0x1c0>)
 801c6e0:	681b      	ldr	r3, [r3, #0]
 801c6e2:	4013      	ands	r3, r2
 801c6e4:	d101      	bne.n	801c6ea <UTIL_SEQ_Run+0x186>
  {
	UTIL_SEQ_Idle( );
 801c6e6:	f7e8 f9d9 	bl	8004a9c <UTIL_SEQ_Idle>
 801c6ea:	69fb      	ldr	r3, [r7, #28]
 801c6ec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c6ee:	68fb      	ldr	r3, [r7, #12]
 801c6f0:	f383 8810 	msr	PRIMASK, r3
}
 801c6f4:	46c0      	nop			; (mov r8, r8)
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 801c6f6:	f000 f86c 	bl	801c7d2 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801c6fa:	4b03      	ldr	r3, [pc, #12]	; (801c708 <UTIL_SEQ_Run+0x1a4>)
 801c6fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c6fe:	601a      	str	r2, [r3, #0]

  return;
 801c700:	46c0      	nop			; (mov r8, r8)
}
 801c702:	46bd      	mov	sp, r7
 801c704:	b00c      	add	sp, #48	; 0x30
 801c706:	bd80      	pop	{r7, pc}
 801c708:	200001cc 	.word	0x200001cc
 801c70c:	20001334 	.word	0x20001334
 801c710:	200001c8 	.word	0x200001c8
 801c714:	200012b0 	.word	0x200012b0
 801c718:	200012a4 	.word	0x200012a4
 801c71c:	200012b4 	.word	0x200012b4
 801c720:	200012a8 	.word	0x200012a8
 801c724:	200012ac 	.word	0x200012ac

0801c728 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801c728:	b580      	push	{r7, lr}
 801c72a:	b088      	sub	sp, #32
 801c72c:	af00      	add	r7, sp, #0
 801c72e:	60f8      	str	r0, [r7, #12]
 801c730:	60b9      	str	r1, [r7, #8]
 801c732:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c734:	f3ef 8310 	mrs	r3, PRIMASK
 801c738:	617b      	str	r3, [r7, #20]
  return(result);
 801c73a:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801c73c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c73e:	b672      	cpsid	i
}
 801c740:	46c0      	nop			; (mov r8, r8)

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801c742:	68fb      	ldr	r3, [r7, #12]
 801c744:	0018      	movs	r0, r3
 801c746:	f000 f849 	bl	801c7dc <SEQ_BitPosition>
 801c74a:	0003      	movs	r3, r0
 801c74c:	001a      	movs	r2, r3
 801c74e:	4b07      	ldr	r3, [pc, #28]	; (801c76c <UTIL_SEQ_RegTask+0x44>)
 801c750:	0092      	lsls	r2, r2, #2
 801c752:	6879      	ldr	r1, [r7, #4]
 801c754:	50d1      	str	r1, [r2, r3]
 801c756:	69fb      	ldr	r3, [r7, #28]
 801c758:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c75a:	69bb      	ldr	r3, [r7, #24]
 801c75c:	f383 8810 	msr	PRIMASK, r3
}
 801c760:	46c0      	nop			; (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801c762:	46c0      	nop			; (mov r8, r8)
}
 801c764:	46bd      	mov	sp, r7
 801c766:	b008      	add	sp, #32
 801c768:	bd80      	pop	{r7, pc}
 801c76a:	46c0      	nop			; (mov r8, r8)
 801c76c:	200012b4 	.word	0x200012b4

0801c770 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801c770:	b580      	push	{r7, lr}
 801c772:	b086      	sub	sp, #24
 801c774:	af00      	add	r7, sp, #0
 801c776:	6078      	str	r0, [r7, #4]
 801c778:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c77a:	f3ef 8310 	mrs	r3, PRIMASK
 801c77e:	60fb      	str	r3, [r7, #12]
  return(result);
 801c780:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801c782:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c784:	b672      	cpsid	i
}
 801c786:	46c0      	nop			; (mov r8, r8)

  TaskSet |= TaskId_bm;
 801c788:	4b0d      	ldr	r3, [pc, #52]	; (801c7c0 <UTIL_SEQ_SetTask+0x50>)
 801c78a:	681a      	ldr	r2, [r3, #0]
 801c78c:	687b      	ldr	r3, [r7, #4]
 801c78e:	431a      	orrs	r2, r3
 801c790:	4b0b      	ldr	r3, [pc, #44]	; (801c7c0 <UTIL_SEQ_SetTask+0x50>)
 801c792:	601a      	str	r2, [r3, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801c794:	4b0b      	ldr	r3, [pc, #44]	; (801c7c4 <UTIL_SEQ_SetTask+0x54>)
 801c796:	683a      	ldr	r2, [r7, #0]
 801c798:	00d2      	lsls	r2, r2, #3
 801c79a:	58d2      	ldr	r2, [r2, r3]
 801c79c:	687b      	ldr	r3, [r7, #4]
 801c79e:	431a      	orrs	r2, r3
 801c7a0:	0011      	movs	r1, r2
 801c7a2:	4b08      	ldr	r3, [pc, #32]	; (801c7c4 <UTIL_SEQ_SetTask+0x54>)
 801c7a4:	683a      	ldr	r2, [r7, #0]
 801c7a6:	00d2      	lsls	r2, r2, #3
 801c7a8:	50d1      	str	r1, [r2, r3]
 801c7aa:	697b      	ldr	r3, [r7, #20]
 801c7ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c7ae:	693b      	ldr	r3, [r7, #16]
 801c7b0:	f383 8810 	msr	PRIMASK, r3
}
 801c7b4:	46c0      	nop			; (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801c7b6:	46c0      	nop			; (mov r8, r8)
}
 801c7b8:	46bd      	mov	sp, r7
 801c7ba:	b006      	add	sp, #24
 801c7bc:	bd80      	pop	{r7, pc}
 801c7be:	46c0      	nop			; (mov r8, r8)
 801c7c0:	200012a4 	.word	0x200012a4
 801c7c4:	20001334 	.word	0x20001334

0801c7c8 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801c7c8:	b580      	push	{r7, lr}
 801c7ca:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801c7cc:	46c0      	nop			; (mov r8, r8)
}
 801c7ce:	46bd      	mov	sp, r7
 801c7d0:	bd80      	pop	{r7, pc}

0801c7d2 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801c7d2:	b580      	push	{r7, lr}
 801c7d4:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801c7d6:	46c0      	nop			; (mov r8, r8)
}
 801c7d8:	46bd      	mov	sp, r7
 801c7da:	bd80      	pop	{r7, pc}

0801c7dc <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801c7dc:	b580      	push	{r7, lr}
 801c7de:	b084      	sub	sp, #16
 801c7e0:	af00      	add	r7, sp, #0
 801c7e2:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 801c7e4:	210f      	movs	r1, #15
 801c7e6:	187b      	adds	r3, r7, r1
 801c7e8:	2200      	movs	r2, #0
 801c7ea:	701a      	strb	r2, [r3, #0]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 801c7ec:	687b      	ldr	r3, [r7, #4]
 801c7ee:	0c1b      	lsrs	r3, r3, #16
 801c7f0:	041b      	lsls	r3, r3, #16
 801c7f2:	d105      	bne.n	801c800 <SEQ_BitPosition+0x24>
 801c7f4:	187b      	adds	r3, r7, r1
 801c7f6:	2210      	movs	r2, #16
 801c7f8:	701a      	strb	r2, [r3, #0]
 801c7fa:	687b      	ldr	r3, [r7, #4]
 801c7fc:	041b      	lsls	r3, r3, #16
 801c7fe:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 801c800:	687b      	ldr	r3, [r7, #4]
 801c802:	0e1b      	lsrs	r3, r3, #24
 801c804:	061b      	lsls	r3, r3, #24
 801c806:	d108      	bne.n	801c81a <SEQ_BitPosition+0x3e>
 801c808:	220f      	movs	r2, #15
 801c80a:	18bb      	adds	r3, r7, r2
 801c80c:	18ba      	adds	r2, r7, r2
 801c80e:	7812      	ldrb	r2, [r2, #0]
 801c810:	3208      	adds	r2, #8
 801c812:	701a      	strb	r2, [r3, #0]
 801c814:	687b      	ldr	r3, [r7, #4]
 801c816:	021b      	lsls	r3, r3, #8
 801c818:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 801c81a:	687b      	ldr	r3, [r7, #4]
 801c81c:	0f1b      	lsrs	r3, r3, #28
 801c81e:	071b      	lsls	r3, r3, #28
 801c820:	d108      	bne.n	801c834 <SEQ_BitPosition+0x58>
 801c822:	220f      	movs	r2, #15
 801c824:	18bb      	adds	r3, r7, r2
 801c826:	18ba      	adds	r2, r7, r2
 801c828:	7812      	ldrb	r2, [r2, #0]
 801c82a:	3204      	adds	r2, #4
 801c82c:	701a      	strb	r2, [r3, #0]
 801c82e:	687b      	ldr	r3, [r7, #4]
 801c830:	011b      	lsls	r3, r3, #4
 801c832:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 801c834:	687b      	ldr	r3, [r7, #4]
 801c836:	0f1b      	lsrs	r3, r3, #28
 801c838:	4a08      	ldr	r2, [pc, #32]	; (801c85c <SEQ_BitPosition+0x80>)
 801c83a:	5cd1      	ldrb	r1, [r2, r3]
 801c83c:	200f      	movs	r0, #15
 801c83e:	183b      	adds	r3, r7, r0
 801c840:	183a      	adds	r2, r7, r0
 801c842:	7812      	ldrb	r2, [r2, #0]
 801c844:	188a      	adds	r2, r1, r2
 801c846:	701a      	strb	r2, [r3, #0]

  return (uint8_t)(31U-n);
 801c848:	183b      	adds	r3, r7, r0
 801c84a:	781b      	ldrb	r3, [r3, #0]
 801c84c:	221f      	movs	r2, #31
 801c84e:	1ad3      	subs	r3, r2, r3
 801c850:	b2db      	uxtb	r3, r3
}
 801c852:	0018      	movs	r0, r3
 801c854:	46bd      	mov	sp, r7
 801c856:	b004      	add	sp, #16
 801c858:	bd80      	pop	{r7, pc}
 801c85a:	46c0      	nop			; (mov r8, r8)
 801c85c:	0801fec4 	.word	0x0801fec4

0801c860 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801c860:	b082      	sub	sp, #8
 801c862:	b580      	push	{r7, lr}
 801c864:	b086      	sub	sp, #24
 801c866:	af00      	add	r7, sp, #0
 801c868:	60f8      	str	r0, [r7, #12]
 801c86a:	1d38      	adds	r0, r7, #4
 801c86c:	6001      	str	r1, [r0, #0]
 801c86e:	6042      	str	r2, [r0, #4]
 801c870:	2204      	movs	r2, #4
 801c872:	2120      	movs	r1, #32
 801c874:	468c      	mov	ip, r1
 801c876:	44bc      	add	ip, r7
 801c878:	4462      	add	r2, ip
 801c87a:	6013      	str	r3, [r2, #0]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801c87c:	2110      	movs	r1, #16
 801c87e:	187b      	adds	r3, r7, r1
 801c880:	2200      	movs	r2, #0
 801c882:	601a      	str	r2, [r3, #0]
 801c884:	187b      	adds	r3, r7, r1
 801c886:	2200      	movs	r2, #0
 801c888:	809a      	strh	r2, [r3, #4]

  c.Seconds = a.Seconds + b.Seconds;
 801c88a:	1d3b      	adds	r3, r7, #4
 801c88c:	681a      	ldr	r2, [r3, #0]
 801c88e:	2304      	movs	r3, #4
 801c890:	2020      	movs	r0, #32
 801c892:	4684      	mov	ip, r0
 801c894:	44bc      	add	ip, r7
 801c896:	4463      	add	r3, ip
 801c898:	681b      	ldr	r3, [r3, #0]
 801c89a:	18d2      	adds	r2, r2, r3
 801c89c:	187b      	adds	r3, r7, r1
 801c89e:	601a      	str	r2, [r3, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801c8a0:	1d3b      	adds	r3, r7, #4
 801c8a2:	2204      	movs	r2, #4
 801c8a4:	5e9b      	ldrsh	r3, [r3, r2]
 801c8a6:	b29a      	uxth	r2, r3
 801c8a8:	2304      	movs	r3, #4
 801c8aa:	2020      	movs	r0, #32
 801c8ac:	4684      	mov	ip, r0
 801c8ae:	44bc      	add	ip, r7
 801c8b0:	4463      	add	r3, ip
 801c8b2:	2004      	movs	r0, #4
 801c8b4:	5e1b      	ldrsh	r3, [r3, r0]
 801c8b6:	b29b      	uxth	r3, r3
 801c8b8:	18d3      	adds	r3, r2, r3
 801c8ba:	b29b      	uxth	r3, r3
 801c8bc:	b21a      	sxth	r2, r3
 801c8be:	187b      	adds	r3, r7, r1
 801c8c0:	809a      	strh	r2, [r3, #4]
  if( c.SubSeconds >= 1000 )
 801c8c2:	187b      	adds	r3, r7, r1
 801c8c4:	2204      	movs	r2, #4
 801c8c6:	5e9a      	ldrsh	r2, [r3, r2]
 801c8c8:	23fa      	movs	r3, #250	; 0xfa
 801c8ca:	009b      	lsls	r3, r3, #2
 801c8cc:	429a      	cmp	r2, r3
 801c8ce:	db0f      	blt.n	801c8f0 <SysTimeAdd+0x90>
  {
    c.Seconds++;
 801c8d0:	187b      	adds	r3, r7, r1
 801c8d2:	681b      	ldr	r3, [r3, #0]
 801c8d4:	1c5a      	adds	r2, r3, #1
 801c8d6:	187b      	adds	r3, r7, r1
 801c8d8:	601a      	str	r2, [r3, #0]
    c.SubSeconds -= 1000;
 801c8da:	187b      	adds	r3, r7, r1
 801c8dc:	2204      	movs	r2, #4
 801c8de:	5e9b      	ldrsh	r3, [r3, r2]
 801c8e0:	b29b      	uxth	r3, r3
 801c8e2:	4a09      	ldr	r2, [pc, #36]	; (801c908 <SysTimeAdd+0xa8>)
 801c8e4:	4694      	mov	ip, r2
 801c8e6:	4463      	add	r3, ip
 801c8e8:	b29b      	uxth	r3, r3
 801c8ea:	b21a      	sxth	r2, r3
 801c8ec:	187b      	adds	r3, r7, r1
 801c8ee:	809a      	strh	r2, [r3, #4]
  }
  return c;
 801c8f0:	68fb      	ldr	r3, [r7, #12]
 801c8f2:	2210      	movs	r2, #16
 801c8f4:	18ba      	adds	r2, r7, r2
 801c8f6:	ca03      	ldmia	r2!, {r0, r1}
 801c8f8:	c303      	stmia	r3!, {r0, r1}
}
 801c8fa:	68f8      	ldr	r0, [r7, #12]
 801c8fc:	46bd      	mov	sp, r7
 801c8fe:	b006      	add	sp, #24
 801c900:	bc80      	pop	{r7}
 801c902:	bc08      	pop	{r3}
 801c904:	b002      	add	sp, #8
 801c906:	4718      	bx	r3
 801c908:	fffffc18 	.word	0xfffffc18

0801c90c <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801c90c:	b082      	sub	sp, #8
 801c90e:	b580      	push	{r7, lr}
 801c910:	b086      	sub	sp, #24
 801c912:	af00      	add	r7, sp, #0
 801c914:	60f8      	str	r0, [r7, #12]
 801c916:	1d38      	adds	r0, r7, #4
 801c918:	6001      	str	r1, [r0, #0]
 801c91a:	6042      	str	r2, [r0, #4]
 801c91c:	2204      	movs	r2, #4
 801c91e:	2120      	movs	r1, #32
 801c920:	468c      	mov	ip, r1
 801c922:	44bc      	add	ip, r7
 801c924:	4462      	add	r2, ip
 801c926:	6013      	str	r3, [r2, #0]
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801c928:	2110      	movs	r1, #16
 801c92a:	187b      	adds	r3, r7, r1
 801c92c:	2200      	movs	r2, #0
 801c92e:	601a      	str	r2, [r3, #0]
 801c930:	187b      	adds	r3, r7, r1
 801c932:	2200      	movs	r2, #0
 801c934:	809a      	strh	r2, [r3, #4]

  c.Seconds = a.Seconds - b.Seconds;
 801c936:	1d3b      	adds	r3, r7, #4
 801c938:	681a      	ldr	r2, [r3, #0]
 801c93a:	2304      	movs	r3, #4
 801c93c:	2020      	movs	r0, #32
 801c93e:	4684      	mov	ip, r0
 801c940:	44bc      	add	ip, r7
 801c942:	4463      	add	r3, ip
 801c944:	681b      	ldr	r3, [r3, #0]
 801c946:	1ad2      	subs	r2, r2, r3
 801c948:	187b      	adds	r3, r7, r1
 801c94a:	601a      	str	r2, [r3, #0]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801c94c:	1d3b      	adds	r3, r7, #4
 801c94e:	2204      	movs	r2, #4
 801c950:	5e9b      	ldrsh	r3, [r3, r2]
 801c952:	b29a      	uxth	r2, r3
 801c954:	2304      	movs	r3, #4
 801c956:	2020      	movs	r0, #32
 801c958:	4684      	mov	ip, r0
 801c95a:	44bc      	add	ip, r7
 801c95c:	4463      	add	r3, ip
 801c95e:	2004      	movs	r0, #4
 801c960:	5e1b      	ldrsh	r3, [r3, r0]
 801c962:	b29b      	uxth	r3, r3
 801c964:	1ad3      	subs	r3, r2, r3
 801c966:	b29b      	uxth	r3, r3
 801c968:	b21a      	sxth	r2, r3
 801c96a:	187b      	adds	r3, r7, r1
 801c96c:	809a      	strh	r2, [r3, #4]
  if( c.SubSeconds < 0 )
 801c96e:	187b      	adds	r3, r7, r1
 801c970:	2204      	movs	r2, #4
 801c972:	5e9b      	ldrsh	r3, [r3, r2]
 801c974:	2b00      	cmp	r3, #0
 801c976:	da10      	bge.n	801c99a <SysTimeSub+0x8e>
  {
    c.Seconds--;
 801c978:	187b      	adds	r3, r7, r1
 801c97a:	681b      	ldr	r3, [r3, #0]
 801c97c:	1e5a      	subs	r2, r3, #1
 801c97e:	187b      	adds	r3, r7, r1
 801c980:	601a      	str	r2, [r3, #0]
    c.SubSeconds += 1000;
 801c982:	187b      	adds	r3, r7, r1
 801c984:	2204      	movs	r2, #4
 801c986:	5e9b      	ldrsh	r3, [r3, r2]
 801c988:	b29b      	uxth	r3, r3
 801c98a:	22fa      	movs	r2, #250	; 0xfa
 801c98c:	0092      	lsls	r2, r2, #2
 801c98e:	4694      	mov	ip, r2
 801c990:	4463      	add	r3, ip
 801c992:	b29b      	uxth	r3, r3
 801c994:	b21a      	sxth	r2, r3
 801c996:	187b      	adds	r3, r7, r1
 801c998:	809a      	strh	r2, [r3, #4]
  }
  return c;
 801c99a:	68fb      	ldr	r3, [r7, #12]
 801c99c:	2210      	movs	r2, #16
 801c99e:	18ba      	adds	r2, r7, r2
 801c9a0:	ca03      	ldmia	r2!, {r0, r1}
 801c9a2:	c303      	stmia	r3!, {r0, r1}
}
 801c9a4:	68f8      	ldr	r0, [r7, #12]
 801c9a6:	46bd      	mov	sp, r7
 801c9a8:	b006      	add	sp, #24
 801c9aa:	bc80      	pop	{r7}
 801c9ac:	bc08      	pop	{r3}
 801c9ae:	b002      	add	sp, #8
 801c9b0:	4718      	bx	r3
	...

0801c9b4 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801c9b4:	b5b0      	push	{r4, r5, r7, lr}
 801c9b6:	b088      	sub	sp, #32
 801c9b8:	af02      	add	r7, sp, #8
 801c9ba:	003b      	movs	r3, r7
 801c9bc:	6018      	str	r0, [r3, #0]
 801c9be:	6059      	str	r1, [r3, #4]
  SysTime_t DeltaTime;
  
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801c9c0:	2108      	movs	r1, #8
 801c9c2:	187b      	adds	r3, r7, r1
 801c9c4:	2200      	movs	r2, #0
 801c9c6:	601a      	str	r2, [r3, #0]
 801c9c8:	187b      	adds	r3, r7, r1
 801c9ca:	2200      	movs	r2, #0
 801c9cc:	809a      	strh	r2, [r3, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801c9ce:	4b14      	ldr	r3, [pc, #80]	; (801ca20 <SysTimeSet+0x6c>)
 801c9d0:	691b      	ldr	r3, [r3, #16]
 801c9d2:	000c      	movs	r4, r1
 801c9d4:	187a      	adds	r2, r7, r1
 801c9d6:	3204      	adds	r2, #4
 801c9d8:	0010      	movs	r0, r2
 801c9da:	4798      	blx	r3
 801c9dc:	0002      	movs	r2, r0
 801c9de:	0021      	movs	r1, r4
 801c9e0:	187b      	adds	r3, r7, r1
 801c9e2:	601a      	str	r2, [r3, #0]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801c9e4:	2510      	movs	r5, #16
 801c9e6:	197c      	adds	r4, r7, r5
 801c9e8:	187b      	adds	r3, r7, r1
 801c9ea:	003a      	movs	r2, r7
 801c9ec:	4669      	mov	r1, sp
 801c9ee:	6858      	ldr	r0, [r3, #4]
 801c9f0:	6008      	str	r0, [r1, #0]
 801c9f2:	681b      	ldr	r3, [r3, #0]
 801c9f4:	6811      	ldr	r1, [r2, #0]
 801c9f6:	6852      	ldr	r2, [r2, #4]
 801c9f8:	0020      	movs	r0, r4
 801c9fa:	f7ff ff87 	bl	801c90c <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801c9fe:	4b08      	ldr	r3, [pc, #32]	; (801ca20 <SysTimeSet+0x6c>)
 801ca00:	681a      	ldr	r2, [r3, #0]
 801ca02:	197b      	adds	r3, r7, r5
 801ca04:	681b      	ldr	r3, [r3, #0]
 801ca06:	0018      	movs	r0, r3
 801ca08:	4790      	blx	r2
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801ca0a:	4b05      	ldr	r3, [pc, #20]	; (801ca20 <SysTimeSet+0x6c>)
 801ca0c:	689b      	ldr	r3, [r3, #8]
 801ca0e:	197a      	adds	r2, r7, r5
 801ca10:	2104      	movs	r1, #4
 801ca12:	5e52      	ldrsh	r2, [r2, r1]
 801ca14:	0010      	movs	r0, r2
 801ca16:	4798      	blx	r3
}
 801ca18:	46c0      	nop			; (mov r8, r8)
 801ca1a:	46bd      	mov	sp, r7
 801ca1c:	b006      	add	sp, #24
 801ca1e:	bdb0      	pop	{r4, r5, r7, pc}
 801ca20:	0801f0ec 	.word	0x0801f0ec

0801ca24 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801ca24:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ca26:	b08b      	sub	sp, #44	; 0x2c
 801ca28:	af02      	add	r7, sp, #8
 801ca2a:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801ca2c:	2518      	movs	r5, #24
 801ca2e:	197b      	adds	r3, r7, r5
 801ca30:	2200      	movs	r2, #0
 801ca32:	601a      	str	r2, [r3, #0]
 801ca34:	197b      	adds	r3, r7, r5
 801ca36:	2200      	movs	r2, #0
 801ca38:	809a      	strh	r2, [r3, #4]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801ca3a:	2410      	movs	r4, #16
 801ca3c:	193b      	adds	r3, r7, r4
 801ca3e:	2200      	movs	r2, #0
 801ca40:	601a      	str	r2, [r3, #0]
 801ca42:	193b      	adds	r3, r7, r4
 801ca44:	2200      	movs	r2, #0
 801ca46:	809a      	strh	r2, [r3, #4]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801ca48:	4b16      	ldr	r3, [pc, #88]	; (801caa4 <SysTimeGet+0x80>)
 801ca4a:	691b      	ldr	r3, [r3, #16]
 801ca4c:	197a      	adds	r2, r7, r5
 801ca4e:	3204      	adds	r2, #4
 801ca50:	0010      	movs	r0, r2
 801ca52:	4798      	blx	r3
 801ca54:	0002      	movs	r2, r0
 801ca56:	197b      	adds	r3, r7, r5
 801ca58:	601a      	str	r2, [r3, #0]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801ca5a:	4b12      	ldr	r3, [pc, #72]	; (801caa4 <SysTimeGet+0x80>)
 801ca5c:	68db      	ldr	r3, [r3, #12]
 801ca5e:	4798      	blx	r3
 801ca60:	0003      	movs	r3, r0
 801ca62:	b21a      	sxth	r2, r3
 801ca64:	2608      	movs	r6, #8
 801ca66:	19bb      	adds	r3, r7, r6
 801ca68:	809a      	strh	r2, [r3, #4]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801ca6a:	4b0e      	ldr	r3, [pc, #56]	; (801caa4 <SysTimeGet+0x80>)
 801ca6c:	685b      	ldr	r3, [r3, #4]
 801ca6e:	4798      	blx	r3
 801ca70:	0002      	movs	r2, r0
 801ca72:	0031      	movs	r1, r6
 801ca74:	187b      	adds	r3, r7, r1
 801ca76:	601a      	str	r2, [r3, #0]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801ca78:	0026      	movs	r6, r4
 801ca7a:	193c      	adds	r4, r7, r4
 801ca7c:	197b      	adds	r3, r7, r5
 801ca7e:	187a      	adds	r2, r7, r1
 801ca80:	4669      	mov	r1, sp
 801ca82:	6858      	ldr	r0, [r3, #4]
 801ca84:	6008      	str	r0, [r1, #0]
 801ca86:	681b      	ldr	r3, [r3, #0]
 801ca88:	6811      	ldr	r1, [r2, #0]
 801ca8a:	6852      	ldr	r2, [r2, #4]
 801ca8c:	0020      	movs	r0, r4
 801ca8e:	f7ff fee7 	bl	801c860 <SysTimeAdd>

  return sysTime;
 801ca92:	687b      	ldr	r3, [r7, #4]
 801ca94:	19ba      	adds	r2, r7, r6
 801ca96:	ca03      	ldmia	r2!, {r0, r1}
 801ca98:	c303      	stmia	r3!, {r0, r1}
}
 801ca9a:	6878      	ldr	r0, [r7, #4]
 801ca9c:	46bd      	mov	sp, r7
 801ca9e:	b009      	add	sp, #36	; 0x24
 801caa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801caa2:	46c0      	nop			; (mov r8, r8)
 801caa4:	0801f0ec 	.word	0x0801f0ec

0801caa8 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801caa8:	b590      	push	{r4, r7, lr}
 801caaa:	b085      	sub	sp, #20
 801caac:	af00      	add	r7, sp, #0
 801caae:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801cab0:	2108      	movs	r1, #8
 801cab2:	187b      	adds	r3, r7, r1
 801cab4:	2200      	movs	r2, #0
 801cab6:	601a      	str	r2, [r3, #0]
 801cab8:	187b      	adds	r3, r7, r1
 801caba:	2200      	movs	r2, #0
 801cabc:	809a      	strh	r2, [r3, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801cabe:	4b09      	ldr	r3, [pc, #36]	; (801cae4 <SysTimeGetMcuTime+0x3c>)
 801cac0:	691b      	ldr	r3, [r3, #16]
 801cac2:	000c      	movs	r4, r1
 801cac4:	187a      	adds	r2, r7, r1
 801cac6:	3204      	adds	r2, #4
 801cac8:	0010      	movs	r0, r2
 801caca:	4798      	blx	r3
 801cacc:	0002      	movs	r2, r0
 801cace:	193b      	adds	r3, r7, r4
 801cad0:	601a      	str	r2, [r3, #0]
  
  return calendarTime;
 801cad2:	687b      	ldr	r3, [r7, #4]
 801cad4:	193a      	adds	r2, r7, r4
 801cad6:	ca03      	ldmia	r2!, {r0, r1}
 801cad8:	c303      	stmia	r3!, {r0, r1}
}
 801cada:	6878      	ldr	r0, [r7, #4]
 801cadc:	46bd      	mov	sp, r7
 801cade:	b005      	add	sp, #20
 801cae0:	bd90      	pop	{r4, r7, pc}
 801cae2:	46c0      	nop			; (mov r8, r8)
 801cae4:	0801f0ec 	.word	0x0801f0ec

0801cae8 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801cae8:	b580      	push	{r7, lr}
 801caea:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801caec:	4b04      	ldr	r3, [pc, #16]	; (801cb00 <UTIL_TIMER_Init+0x18>)
 801caee:	2200      	movs	r2, #0
 801caf0:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801caf2:	4b04      	ldr	r3, [pc, #16]	; (801cb04 <UTIL_TIMER_Init+0x1c>)
 801caf4:	681b      	ldr	r3, [r3, #0]
 801caf6:	4798      	blx	r3
 801caf8:	0003      	movs	r3, r0
}
 801cafa:	0018      	movs	r0, r3
 801cafc:	46bd      	mov	sp, r7
 801cafe:	bd80      	pop	{r7, pc}
 801cb00:	20001344 	.word	0x20001344
 801cb04:	0801f0c0 	.word	0x0801f0c0

0801cb08 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801cb08:	b580      	push	{r7, lr}
 801cb0a:	b084      	sub	sp, #16
 801cb0c:	af00      	add	r7, sp, #0
 801cb0e:	60f8      	str	r0, [r7, #12]
 801cb10:	60b9      	str	r1, [r7, #8]
 801cb12:	603b      	str	r3, [r7, #0]
 801cb14:	1dfb      	adds	r3, r7, #7
 801cb16:	701a      	strb	r2, [r3, #0]
  if((TimerObject != NULL) && (Callback != NULL))
 801cb18:	68fb      	ldr	r3, [r7, #12]
 801cb1a:	2b00      	cmp	r3, #0
 801cb1c:	d025      	beq.n	801cb6a <UTIL_TIMER_Create+0x62>
 801cb1e:	683b      	ldr	r3, [r7, #0]
 801cb20:	2b00      	cmp	r3, #0
 801cb22:	d022      	beq.n	801cb6a <UTIL_TIMER_Create+0x62>
  {
    TimerObject->Timestamp = 0U;
 801cb24:	68fb      	ldr	r3, [r7, #12]
 801cb26:	2200      	movs	r2, #0
 801cb28:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801cb2a:	4b12      	ldr	r3, [pc, #72]	; (801cb74 <UTIL_TIMER_Create+0x6c>)
 801cb2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cb2e:	68ba      	ldr	r2, [r7, #8]
 801cb30:	0010      	movs	r0, r2
 801cb32:	4798      	blx	r3
 801cb34:	0002      	movs	r2, r0
 801cb36:	68fb      	ldr	r3, [r7, #12]
 801cb38:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801cb3a:	68fb      	ldr	r3, [r7, #12]
 801cb3c:	2200      	movs	r2, #0
 801cb3e:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801cb40:	68fb      	ldr	r3, [r7, #12]
 801cb42:	2200      	movs	r2, #0
 801cb44:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801cb46:	68fb      	ldr	r3, [r7, #12]
 801cb48:	2200      	movs	r2, #0
 801cb4a:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801cb4c:	68fb      	ldr	r3, [r7, #12]
 801cb4e:	683a      	ldr	r2, [r7, #0]
 801cb50:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801cb52:	68fb      	ldr	r3, [r7, #12]
 801cb54:	69ba      	ldr	r2, [r7, #24]
 801cb56:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801cb58:	68fb      	ldr	r3, [r7, #12]
 801cb5a:	1dfa      	adds	r2, r7, #7
 801cb5c:	7812      	ldrb	r2, [r2, #0]
 801cb5e:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801cb60:	68fb      	ldr	r3, [r7, #12]
 801cb62:	2200      	movs	r2, #0
 801cb64:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801cb66:	2300      	movs	r3, #0
 801cb68:	e000      	b.n	801cb6c <UTIL_TIMER_Create+0x64>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801cb6a:	2301      	movs	r3, #1
  }
}
 801cb6c:	0018      	movs	r0, r3
 801cb6e:	46bd      	mov	sp, r7
 801cb70:	b004      	add	sp, #16
 801cb72:	bd80      	pop	{r7, pc}
 801cb74:	0801f0c0 	.word	0x0801f0c0

0801cb78 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801cb78:	b580      	push	{r7, lr}
 801cb7a:	b08a      	sub	sp, #40	; 0x28
 801cb7c:	af00      	add	r7, sp, #0
 801cb7e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801cb80:	2327      	movs	r3, #39	; 0x27
 801cb82:	18fb      	adds	r3, r7, r3
 801cb84:	2200      	movs	r2, #0
 801cb86:	701a      	strb	r2, [r3, #0]
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801cb88:	687b      	ldr	r3, [r7, #4]
 801cb8a:	2b00      	cmp	r3, #0
 801cb8c:	d05d      	beq.n	801cc4a <UTIL_TIMER_Start+0xd2>
 801cb8e:	687b      	ldr	r3, [r7, #4]
 801cb90:	0018      	movs	r0, r3
 801cb92:	f000 f9cb 	bl	801cf2c <TimerExists>
 801cb96:	0003      	movs	r3, r0
 801cb98:	001a      	movs	r2, r3
 801cb9a:	2301      	movs	r3, #1
 801cb9c:	4053      	eors	r3, r2
 801cb9e:	b2db      	uxtb	r3, r3
 801cba0:	2b00      	cmp	r3, #0
 801cba2:	d052      	beq.n	801cc4a <UTIL_TIMER_Start+0xd2>
 801cba4:	687b      	ldr	r3, [r7, #4]
 801cba6:	7a5b      	ldrb	r3, [r3, #9]
 801cba8:	2b00      	cmp	r3, #0
 801cbaa:	d14e      	bne.n	801cc4a <UTIL_TIMER_Start+0xd2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cbac:	f3ef 8310 	mrs	r3, PRIMASK
 801cbb0:	613b      	str	r3, [r7, #16]
  return(result);
 801cbb2:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801cbb4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801cbb6:	b672      	cpsid	i
}
 801cbb8:	46c0      	nop			; (mov r8, r8)
    ticks = TimerObject->ReloadValue;
 801cbba:	687b      	ldr	r3, [r7, #4]
 801cbbc:	685b      	ldr	r3, [r3, #4]
 801cbbe:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801cbc0:	4b27      	ldr	r3, [pc, #156]	; (801cc60 <UTIL_TIMER_Start+0xe8>)
 801cbc2:	6a1b      	ldr	r3, [r3, #32]
 801cbc4:	4798      	blx	r3
 801cbc6:	0003      	movs	r3, r0
 801cbc8:	61bb      	str	r3, [r7, #24]
    
    if( ticks < minValue )
 801cbca:	6a3a      	ldr	r2, [r7, #32]
 801cbcc:	69bb      	ldr	r3, [r7, #24]
 801cbce:	429a      	cmp	r2, r3
 801cbd0:	d201      	bcs.n	801cbd6 <UTIL_TIMER_Start+0x5e>
    {
      ticks = minValue;
 801cbd2:	69bb      	ldr	r3, [r7, #24]
 801cbd4:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801cbd6:	687b      	ldr	r3, [r7, #4]
 801cbd8:	6a3a      	ldr	r2, [r7, #32]
 801cbda:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801cbdc:	687b      	ldr	r3, [r7, #4]
 801cbde:	2200      	movs	r2, #0
 801cbe0:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801cbe2:	687b      	ldr	r3, [r7, #4]
 801cbe4:	2201      	movs	r2, #1
 801cbe6:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801cbe8:	687b      	ldr	r3, [r7, #4]
 801cbea:	2200      	movs	r2, #0
 801cbec:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801cbee:	4b1d      	ldr	r3, [pc, #116]	; (801cc64 <UTIL_TIMER_Start+0xec>)
 801cbf0:	681b      	ldr	r3, [r3, #0]
 801cbf2:	2b00      	cmp	r3, #0
 801cbf4:	d107      	bne.n	801cc06 <UTIL_TIMER_Start+0x8e>
    {
      UTIL_TimerDriver.SetTimerContext();
 801cbf6:	4b1a      	ldr	r3, [pc, #104]	; (801cc60 <UTIL_TIMER_Start+0xe8>)
 801cbf8:	691b      	ldr	r3, [r3, #16]
 801cbfa:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801cbfc:	687b      	ldr	r3, [r7, #4]
 801cbfe:	0018      	movs	r0, r3
 801cc00:	f000 fa08 	bl	801d014 <TimerInsertNewHeadTimer>
 801cc04:	e01a      	b.n	801cc3c <UTIL_TIMER_Start+0xc4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801cc06:	4b16      	ldr	r3, [pc, #88]	; (801cc60 <UTIL_TIMER_Start+0xe8>)
 801cc08:	699b      	ldr	r3, [r3, #24]
 801cc0a:	4798      	blx	r3
 801cc0c:	0003      	movs	r3, r0
 801cc0e:	617b      	str	r3, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801cc10:	687b      	ldr	r3, [r7, #4]
 801cc12:	681a      	ldr	r2, [r3, #0]
 801cc14:	697b      	ldr	r3, [r7, #20]
 801cc16:	18d2      	adds	r2, r2, r3
 801cc18:	687b      	ldr	r3, [r7, #4]
 801cc1a:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801cc1c:	687b      	ldr	r3, [r7, #4]
 801cc1e:	681a      	ldr	r2, [r3, #0]
 801cc20:	4b10      	ldr	r3, [pc, #64]	; (801cc64 <UTIL_TIMER_Start+0xec>)
 801cc22:	681b      	ldr	r3, [r3, #0]
 801cc24:	681b      	ldr	r3, [r3, #0]
 801cc26:	429a      	cmp	r2, r3
 801cc28:	d204      	bcs.n	801cc34 <UTIL_TIMER_Start+0xbc>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801cc2a:	687b      	ldr	r3, [r7, #4]
 801cc2c:	0018      	movs	r0, r3
 801cc2e:	f000 f9f1 	bl	801d014 <TimerInsertNewHeadTimer>
 801cc32:	e003      	b.n	801cc3c <UTIL_TIMER_Start+0xc4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801cc34:	687b      	ldr	r3, [r7, #4]
 801cc36:	0018      	movs	r0, r3
 801cc38:	f000 f9be 	bl	801cfb8 <TimerInsertTimer>
 801cc3c:	69fb      	ldr	r3, [r7, #28]
 801cc3e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cc40:	68fb      	ldr	r3, [r7, #12]
 801cc42:	f383 8810 	msr	PRIMASK, r3
}
 801cc46:	46c0      	nop			; (mov r8, r8)
  {
 801cc48:	e003      	b.n	801cc52 <UTIL_TIMER_Start+0xda>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801cc4a:	2327      	movs	r3, #39	; 0x27
 801cc4c:	18fb      	adds	r3, r7, r3
 801cc4e:	2201      	movs	r2, #1
 801cc50:	701a      	strb	r2, [r3, #0]
  }
  return ret;
 801cc52:	2327      	movs	r3, #39	; 0x27
 801cc54:	18fb      	adds	r3, r7, r3
 801cc56:	781b      	ldrb	r3, [r3, #0]
}
 801cc58:	0018      	movs	r0, r3
 801cc5a:	46bd      	mov	sp, r7
 801cc5c:	b00a      	add	sp, #40	; 0x28
 801cc5e:	bd80      	pop	{r7, pc}
 801cc60:	0801f0c0 	.word	0x0801f0c0
 801cc64:	20001344 	.word	0x20001344

0801cc68 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801cc68:	b580      	push	{r7, lr}
 801cc6a:	b088      	sub	sp, #32
 801cc6c:	af00      	add	r7, sp, #0
 801cc6e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801cc70:	231f      	movs	r3, #31
 801cc72:	18fb      	adds	r3, r7, r3
 801cc74:	2200      	movs	r2, #0
 801cc76:	701a      	strb	r2, [r3, #0]

  if (NULL != TimerObject)
 801cc78:	687b      	ldr	r3, [r7, #4]
 801cc7a:	2b00      	cmp	r3, #0
 801cc7c:	d05d      	beq.n	801cd3a <UTIL_TIMER_Stop+0xd2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cc7e:	f3ef 8310 	mrs	r3, PRIMASK
 801cc82:	60fb      	str	r3, [r7, #12]
  return(result);
 801cc84:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801cc86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801cc88:	b672      	cpsid	i
}
 801cc8a:	46c0      	nop			; (mov r8, r8)
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801cc8c:	4b30      	ldr	r3, [pc, #192]	; (801cd50 <UTIL_TIMER_Stop+0xe8>)
 801cc8e:	681b      	ldr	r3, [r3, #0]
 801cc90:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801cc92:	4b2f      	ldr	r3, [pc, #188]	; (801cd50 <UTIL_TIMER_Stop+0xe8>)
 801cc94:	681b      	ldr	r3, [r3, #0]
 801cc96:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801cc98:	687b      	ldr	r3, [r7, #4]
 801cc9a:	2201      	movs	r2, #1
 801cc9c:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801cc9e:	4b2c      	ldr	r3, [pc, #176]	; (801cd50 <UTIL_TIMER_Stop+0xe8>)
 801cca0:	681b      	ldr	r3, [r3, #0]
 801cca2:	2b00      	cmp	r3, #0
 801cca4:	d043      	beq.n	801cd2e <UTIL_TIMER_Stop+0xc6>
    {
      TimerObject->IsRunning = 0U;
 801cca6:	687b      	ldr	r3, [r7, #4]
 801cca8:	2200      	movs	r2, #0
 801ccaa:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801ccac:	4b28      	ldr	r3, [pc, #160]	; (801cd50 <UTIL_TIMER_Stop+0xe8>)
 801ccae:	681b      	ldr	r3, [r3, #0]
 801ccb0:	687a      	ldr	r2, [r7, #4]
 801ccb2:	429a      	cmp	r2, r3
 801ccb4:	d134      	bne.n	801cd20 <UTIL_TIMER_Stop+0xb8>
      {
          TimerListHead->IsPending = 0;
 801ccb6:	4b26      	ldr	r3, [pc, #152]	; (801cd50 <UTIL_TIMER_Stop+0xe8>)
 801ccb8:	681b      	ldr	r3, [r3, #0]
 801ccba:	2200      	movs	r2, #0
 801ccbc:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801ccbe:	4b24      	ldr	r3, [pc, #144]	; (801cd50 <UTIL_TIMER_Stop+0xe8>)
 801ccc0:	681b      	ldr	r3, [r3, #0]
 801ccc2:	695b      	ldr	r3, [r3, #20]
 801ccc4:	2b00      	cmp	r3, #0
 801ccc6:	d00a      	beq.n	801ccde <UTIL_TIMER_Stop+0x76>
          {
            TimerListHead = TimerListHead->Next;
 801ccc8:	4b21      	ldr	r3, [pc, #132]	; (801cd50 <UTIL_TIMER_Stop+0xe8>)
 801ccca:	681b      	ldr	r3, [r3, #0]
 801cccc:	695a      	ldr	r2, [r3, #20]
 801ccce:	4b20      	ldr	r3, [pc, #128]	; (801cd50 <UTIL_TIMER_Stop+0xe8>)
 801ccd0:	601a      	str	r2, [r3, #0]
            TimerSetTimeout( TimerListHead );
 801ccd2:	4b1f      	ldr	r3, [pc, #124]	; (801cd50 <UTIL_TIMER_Stop+0xe8>)
 801ccd4:	681b      	ldr	r3, [r3, #0]
 801ccd6:	0018      	movs	r0, r3
 801ccd8:	f000 f944 	bl	801cf64 <TimerSetTimeout>
 801ccdc:	e023      	b.n	801cd26 <UTIL_TIMER_Stop+0xbe>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801ccde:	4b1d      	ldr	r3, [pc, #116]	; (801cd54 <UTIL_TIMER_Stop+0xec>)
 801cce0:	68db      	ldr	r3, [r3, #12]
 801cce2:	4798      	blx	r3
            TimerListHead = NULL;
 801cce4:	4b1a      	ldr	r3, [pc, #104]	; (801cd50 <UTIL_TIMER_Stop+0xe8>)
 801cce6:	2200      	movs	r2, #0
 801cce8:	601a      	str	r2, [r3, #0]
 801ccea:	e01c      	b.n	801cd26 <UTIL_TIMER_Stop+0xbe>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801ccec:	697a      	ldr	r2, [r7, #20]
 801ccee:	687b      	ldr	r3, [r7, #4]
 801ccf0:	429a      	cmp	r2, r3
 801ccf2:	d110      	bne.n	801cd16 <UTIL_TIMER_Stop+0xae>
          {
            if( cur->Next != NULL )
 801ccf4:	697b      	ldr	r3, [r7, #20]
 801ccf6:	695b      	ldr	r3, [r3, #20]
 801ccf8:	2b00      	cmp	r3, #0
 801ccfa:	d006      	beq.n	801cd0a <UTIL_TIMER_Stop+0xa2>
            {
              cur = cur->Next;
 801ccfc:	697b      	ldr	r3, [r7, #20]
 801ccfe:	695b      	ldr	r3, [r3, #20]
 801cd00:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801cd02:	69bb      	ldr	r3, [r7, #24]
 801cd04:	697a      	ldr	r2, [r7, #20]
 801cd06:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801cd08:	e00d      	b.n	801cd26 <UTIL_TIMER_Stop+0xbe>
              cur = NULL;
 801cd0a:	2300      	movs	r3, #0
 801cd0c:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801cd0e:	69bb      	ldr	r3, [r7, #24]
 801cd10:	697a      	ldr	r2, [r7, #20]
 801cd12:	615a      	str	r2, [r3, #20]
            break;
 801cd14:	e007      	b.n	801cd26 <UTIL_TIMER_Stop+0xbe>
          }
          else
          {
            prev = cur;
 801cd16:	697b      	ldr	r3, [r7, #20]
 801cd18:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801cd1a:	697b      	ldr	r3, [r7, #20]
 801cd1c:	695b      	ldr	r3, [r3, #20]
 801cd1e:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801cd20:	697b      	ldr	r3, [r7, #20]
 801cd22:	2b00      	cmp	r3, #0
 801cd24:	d1e2      	bne.n	801ccec <UTIL_TIMER_Stop+0x84>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801cd26:	231f      	movs	r3, #31
 801cd28:	18fb      	adds	r3, r7, r3
 801cd2a:	2200      	movs	r2, #0
 801cd2c:	701a      	strb	r2, [r3, #0]
 801cd2e:	693b      	ldr	r3, [r7, #16]
 801cd30:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cd32:	68bb      	ldr	r3, [r7, #8]
 801cd34:	f383 8810 	msr	PRIMASK, r3
}
 801cd38:	e003      	b.n	801cd42 <UTIL_TIMER_Stop+0xda>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801cd3a:	231f      	movs	r3, #31
 801cd3c:	18fb      	adds	r3, r7, r3
 801cd3e:	2201      	movs	r2, #1
 801cd40:	701a      	strb	r2, [r3, #0]
  }
  return ret;
 801cd42:	231f      	movs	r3, #31
 801cd44:	18fb      	adds	r3, r7, r3
 801cd46:	781b      	ldrb	r3, [r3, #0]
}
 801cd48:	0018      	movs	r0, r3
 801cd4a:	46bd      	mov	sp, r7
 801cd4c:	b008      	add	sp, #32
 801cd4e:	bd80      	pop	{r7, pc}
 801cd50:	20001344 	.word	0x20001344
 801cd54:	0801f0c0 	.word	0x0801f0c0

0801cd58 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801cd58:	b590      	push	{r4, r7, lr}
 801cd5a:	b085      	sub	sp, #20
 801cd5c:	af00      	add	r7, sp, #0
 801cd5e:	6078      	str	r0, [r7, #4]
 801cd60:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801cd62:	210f      	movs	r1, #15
 801cd64:	187b      	adds	r3, r7, r1
 801cd66:	2200      	movs	r2, #0
 801cd68:	701a      	strb	r2, [r3, #0]
  
  if(NULL == TimerObject)
 801cd6a:	687b      	ldr	r3, [r7, #4]
 801cd6c:	2b00      	cmp	r3, #0
 801cd6e:	d103      	bne.n	801cd78 <UTIL_TIMER_SetPeriod+0x20>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801cd70:	187b      	adds	r3, r7, r1
 801cd72:	2201      	movs	r2, #1
 801cd74:	701a      	strb	r2, [r3, #0]
 801cd76:	e019      	b.n	801cdac <UTIL_TIMER_SetPeriod+0x54>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801cd78:	4b10      	ldr	r3, [pc, #64]	; (801cdbc <UTIL_TIMER_SetPeriod+0x64>)
 801cd7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cd7c:	683a      	ldr	r2, [r7, #0]
 801cd7e:	0010      	movs	r0, r2
 801cd80:	4798      	blx	r3
 801cd82:	0002      	movs	r2, r0
 801cd84:	687b      	ldr	r3, [r7, #4]
 801cd86:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801cd88:	687b      	ldr	r3, [r7, #4]
 801cd8a:	0018      	movs	r0, r3
 801cd8c:	f000 f8ce 	bl	801cf2c <TimerExists>
 801cd90:	1e03      	subs	r3, r0, #0
 801cd92:	d00b      	beq.n	801cdac <UTIL_TIMER_SetPeriod+0x54>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801cd94:	687b      	ldr	r3, [r7, #4]
 801cd96:	0018      	movs	r0, r3
 801cd98:	f7ff ff66 	bl	801cc68 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801cd9c:	230f      	movs	r3, #15
 801cd9e:	18fc      	adds	r4, r7, r3
 801cda0:	687b      	ldr	r3, [r7, #4]
 801cda2:	0018      	movs	r0, r3
 801cda4:	f7ff fee8 	bl	801cb78 <UTIL_TIMER_Start>
 801cda8:	0003      	movs	r3, r0
 801cdaa:	7023      	strb	r3, [r4, #0]
    }
  }
  return ret;
 801cdac:	230f      	movs	r3, #15
 801cdae:	18fb      	adds	r3, r7, r3
 801cdb0:	781b      	ldrb	r3, [r3, #0]
}
 801cdb2:	0018      	movs	r0, r3
 801cdb4:	46bd      	mov	sp, r7
 801cdb6:	b005      	add	sp, #20
 801cdb8:	bd90      	pop	{r4, r7, pc}
 801cdba:	46c0      	nop			; (mov r8, r8)
 801cdbc:	0801f0c0 	.word	0x0801f0c0

0801cdc0 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801cdc0:	b590      	push	{r4, r7, lr}
 801cdc2:	b089      	sub	sp, #36	; 0x24
 801cdc4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cdc6:	f3ef 8310 	mrs	r3, PRIMASK
 801cdca:	60bb      	str	r3, [r7, #8]
  return(result);
 801cdcc:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801cdce:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801cdd0:	b672      	cpsid	i
}
 801cdd2:	46c0      	nop			; (mov r8, r8)

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801cdd4:	4b3a      	ldr	r3, [pc, #232]	; (801cec0 <UTIL_TIMER_IRQ_Handler+0x100>)
 801cdd6:	695b      	ldr	r3, [r3, #20]
 801cdd8:	4798      	blx	r3
 801cdda:	0003      	movs	r3, r0
 801cddc:	617b      	str	r3, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801cdde:	4b38      	ldr	r3, [pc, #224]	; (801cec0 <UTIL_TIMER_IRQ_Handler+0x100>)
 801cde0:	691b      	ldr	r3, [r3, #16]
 801cde2:	4798      	blx	r3
 801cde4:	0003      	movs	r3, r0
 801cde6:	613b      	str	r3, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801cde8:	693a      	ldr	r2, [r7, #16]
 801cdea:	697b      	ldr	r3, [r7, #20]
 801cdec:	1ad3      	subs	r3, r2, r3
 801cdee:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801cdf0:	4b34      	ldr	r3, [pc, #208]	; (801cec4 <UTIL_TIMER_IRQ_Handler+0x104>)
 801cdf2:	681b      	ldr	r3, [r3, #0]
 801cdf4:	2b00      	cmp	r3, #0
 801cdf6:	d038      	beq.n	801ce6a <UTIL_TIMER_IRQ_Handler+0xaa>
  {
    cur = TimerListHead;
 801cdf8:	4b32      	ldr	r3, [pc, #200]	; (801cec4 <UTIL_TIMER_IRQ_Handler+0x104>)
 801cdfa:	681b      	ldr	r3, [r3, #0]
 801cdfc:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801cdfe:	69fb      	ldr	r3, [r7, #28]
 801ce00:	681b      	ldr	r3, [r3, #0]
 801ce02:	68fa      	ldr	r2, [r7, #12]
 801ce04:	429a      	cmp	r2, r3
 801ce06:	d206      	bcs.n	801ce16 <UTIL_TIMER_IRQ_Handler+0x56>
      {
        cur->Timestamp -= DeltaContext;
 801ce08:	69fb      	ldr	r3, [r7, #28]
 801ce0a:	681a      	ldr	r2, [r3, #0]
 801ce0c:	68fb      	ldr	r3, [r7, #12]
 801ce0e:	1ad2      	subs	r2, r2, r3
 801ce10:	69fb      	ldr	r3, [r7, #28]
 801ce12:	601a      	str	r2, [r3, #0]
 801ce14:	e002      	b.n	801ce1c <UTIL_TIMER_IRQ_Handler+0x5c>
      }
      else
      {
        cur->Timestamp = 0;
 801ce16:	69fb      	ldr	r3, [r7, #28]
 801ce18:	2200      	movs	r2, #0
 801ce1a:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801ce1c:	69fb      	ldr	r3, [r7, #28]
 801ce1e:	695b      	ldr	r3, [r3, #20]
 801ce20:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801ce22:	69fb      	ldr	r3, [r7, #28]
 801ce24:	2b00      	cmp	r3, #0
 801ce26:	d1ea      	bne.n	801cdfe <UTIL_TIMER_IRQ_Handler+0x3e>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801ce28:	e01f      	b.n	801ce6a <UTIL_TIMER_IRQ_Handler+0xaa>
  {
      cur = TimerListHead;
 801ce2a:	4b26      	ldr	r3, [pc, #152]	; (801cec4 <UTIL_TIMER_IRQ_Handler+0x104>)
 801ce2c:	681b      	ldr	r3, [r3, #0]
 801ce2e:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801ce30:	4b24      	ldr	r3, [pc, #144]	; (801cec4 <UTIL_TIMER_IRQ_Handler+0x104>)
 801ce32:	681b      	ldr	r3, [r3, #0]
 801ce34:	695a      	ldr	r2, [r3, #20]
 801ce36:	4b23      	ldr	r3, [pc, #140]	; (801cec4 <UTIL_TIMER_IRQ_Handler+0x104>)
 801ce38:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 801ce3a:	69fb      	ldr	r3, [r7, #28]
 801ce3c:	2200      	movs	r2, #0
 801ce3e:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801ce40:	69fb      	ldr	r3, [r7, #28]
 801ce42:	2200      	movs	r2, #0
 801ce44:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801ce46:	69fb      	ldr	r3, [r7, #28]
 801ce48:	68da      	ldr	r2, [r3, #12]
 801ce4a:	69fb      	ldr	r3, [r7, #28]
 801ce4c:	691b      	ldr	r3, [r3, #16]
 801ce4e:	0018      	movs	r0, r3
 801ce50:	4790      	blx	r2
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801ce52:	69fb      	ldr	r3, [r7, #28]
 801ce54:	7adb      	ldrb	r3, [r3, #11]
 801ce56:	2b01      	cmp	r3, #1
 801ce58:	d107      	bne.n	801ce6a <UTIL_TIMER_IRQ_Handler+0xaa>
 801ce5a:	69fb      	ldr	r3, [r7, #28]
 801ce5c:	7a9b      	ldrb	r3, [r3, #10]
 801ce5e:	2b00      	cmp	r3, #0
 801ce60:	d103      	bne.n	801ce6a <UTIL_TIMER_IRQ_Handler+0xaa>
      {
        (void)UTIL_TIMER_Start(cur);
 801ce62:	69fb      	ldr	r3, [r7, #28]
 801ce64:	0018      	movs	r0, r3
 801ce66:	f7ff fe87 	bl	801cb78 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801ce6a:	4b16      	ldr	r3, [pc, #88]	; (801cec4 <UTIL_TIMER_IRQ_Handler+0x104>)
 801ce6c:	681b      	ldr	r3, [r3, #0]
 801ce6e:	2b00      	cmp	r3, #0
 801ce70:	d00d      	beq.n	801ce8e <UTIL_TIMER_IRQ_Handler+0xce>
 801ce72:	4b14      	ldr	r3, [pc, #80]	; (801cec4 <UTIL_TIMER_IRQ_Handler+0x104>)
 801ce74:	681b      	ldr	r3, [r3, #0]
 801ce76:	681b      	ldr	r3, [r3, #0]
 801ce78:	2b00      	cmp	r3, #0
 801ce7a:	d0d6      	beq.n	801ce2a <UTIL_TIMER_IRQ_Handler+0x6a>
 801ce7c:	4b11      	ldr	r3, [pc, #68]	; (801cec4 <UTIL_TIMER_IRQ_Handler+0x104>)
 801ce7e:	681b      	ldr	r3, [r3, #0]
 801ce80:	681c      	ldr	r4, [r3, #0]
 801ce82:	4b0f      	ldr	r3, [pc, #60]	; (801cec0 <UTIL_TIMER_IRQ_Handler+0x100>)
 801ce84:	699b      	ldr	r3, [r3, #24]
 801ce86:	4798      	blx	r3
 801ce88:	0003      	movs	r3, r0
 801ce8a:	429c      	cmp	r4, r3
 801ce8c:	d3cd      	bcc.n	801ce2a <UTIL_TIMER_IRQ_Handler+0x6a>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801ce8e:	4b0d      	ldr	r3, [pc, #52]	; (801cec4 <UTIL_TIMER_IRQ_Handler+0x104>)
 801ce90:	681b      	ldr	r3, [r3, #0]
 801ce92:	2b00      	cmp	r3, #0
 801ce94:	d009      	beq.n	801ceaa <UTIL_TIMER_IRQ_Handler+0xea>
 801ce96:	4b0b      	ldr	r3, [pc, #44]	; (801cec4 <UTIL_TIMER_IRQ_Handler+0x104>)
 801ce98:	681b      	ldr	r3, [r3, #0]
 801ce9a:	7a1b      	ldrb	r3, [r3, #8]
 801ce9c:	2b00      	cmp	r3, #0
 801ce9e:	d104      	bne.n	801ceaa <UTIL_TIMER_IRQ_Handler+0xea>
  {
    TimerSetTimeout( TimerListHead );
 801cea0:	4b08      	ldr	r3, [pc, #32]	; (801cec4 <UTIL_TIMER_IRQ_Handler+0x104>)
 801cea2:	681b      	ldr	r3, [r3, #0]
 801cea4:	0018      	movs	r0, r3
 801cea6:	f000 f85d 	bl	801cf64 <TimerSetTimeout>
 801ceaa:	69bb      	ldr	r3, [r7, #24]
 801ceac:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ceae:	687b      	ldr	r3, [r7, #4]
 801ceb0:	f383 8810 	msr	PRIMASK, r3
}
 801ceb4:	46c0      	nop			; (mov r8, r8)
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801ceb6:	46c0      	nop			; (mov r8, r8)
 801ceb8:	46bd      	mov	sp, r7
 801ceba:	b009      	add	sp, #36	; 0x24
 801cebc:	bd90      	pop	{r4, r7, pc}
 801cebe:	46c0      	nop			; (mov r8, r8)
 801cec0:	0801f0c0 	.word	0x0801f0c0
 801cec4:	20001344 	.word	0x20001344

0801cec8 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801cec8:	b580      	push	{r7, lr}
 801ceca:	b082      	sub	sp, #8
 801cecc:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801cece:	4b07      	ldr	r3, [pc, #28]	; (801ceec <UTIL_TIMER_GetCurrentTime+0x24>)
 801ced0:	69db      	ldr	r3, [r3, #28]
 801ced2:	4798      	blx	r3
 801ced4:	0003      	movs	r3, r0
 801ced6:	607b      	str	r3, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801ced8:	4b04      	ldr	r3, [pc, #16]	; (801ceec <UTIL_TIMER_GetCurrentTime+0x24>)
 801ceda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cedc:	687a      	ldr	r2, [r7, #4]
 801cede:	0010      	movs	r0, r2
 801cee0:	4798      	blx	r3
 801cee2:	0003      	movs	r3, r0
}
 801cee4:	0018      	movs	r0, r3
 801cee6:	46bd      	mov	sp, r7
 801cee8:	b002      	add	sp, #8
 801ceea:	bd80      	pop	{r7, pc}
 801ceec:	0801f0c0 	.word	0x0801f0c0

0801cef0 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801cef0:	b580      	push	{r7, lr}
 801cef2:	b084      	sub	sp, #16
 801cef4:	af00      	add	r7, sp, #0
 801cef6:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801cef8:	4b0b      	ldr	r3, [pc, #44]	; (801cf28 <UTIL_TIMER_GetElapsedTime+0x38>)
 801cefa:	69db      	ldr	r3, [r3, #28]
 801cefc:	4798      	blx	r3
 801cefe:	0003      	movs	r3, r0
 801cf00:	60fb      	str	r3, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801cf02:	4b09      	ldr	r3, [pc, #36]	; (801cf28 <UTIL_TIMER_GetElapsedTime+0x38>)
 801cf04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cf06:	687a      	ldr	r2, [r7, #4]
 801cf08:	0010      	movs	r0, r2
 801cf0a:	4798      	blx	r3
 801cf0c:	0003      	movs	r3, r0
 801cf0e:	60bb      	str	r3, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801cf10:	4b05      	ldr	r3, [pc, #20]	; (801cf28 <UTIL_TIMER_GetElapsedTime+0x38>)
 801cf12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cf14:	68f9      	ldr	r1, [r7, #12]
 801cf16:	68ba      	ldr	r2, [r7, #8]
 801cf18:	1a8a      	subs	r2, r1, r2
 801cf1a:	0010      	movs	r0, r2
 801cf1c:	4798      	blx	r3
 801cf1e:	0003      	movs	r3, r0
}
 801cf20:	0018      	movs	r0, r3
 801cf22:	46bd      	mov	sp, r7
 801cf24:	b004      	add	sp, #16
 801cf26:	bd80      	pop	{r7, pc}
 801cf28:	0801f0c0 	.word	0x0801f0c0

0801cf2c <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801cf2c:	b580      	push	{r7, lr}
 801cf2e:	b084      	sub	sp, #16
 801cf30:	af00      	add	r7, sp, #0
 801cf32:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801cf34:	4b0a      	ldr	r3, [pc, #40]	; (801cf60 <TimerExists+0x34>)
 801cf36:	681b      	ldr	r3, [r3, #0]
 801cf38:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801cf3a:	e008      	b.n	801cf4e <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801cf3c:	68fa      	ldr	r2, [r7, #12]
 801cf3e:	687b      	ldr	r3, [r7, #4]
 801cf40:	429a      	cmp	r2, r3
 801cf42:	d101      	bne.n	801cf48 <TimerExists+0x1c>
    {
      return true;
 801cf44:	2301      	movs	r3, #1
 801cf46:	e006      	b.n	801cf56 <TimerExists+0x2a>
    }
    cur = cur->Next;
 801cf48:	68fb      	ldr	r3, [r7, #12]
 801cf4a:	695b      	ldr	r3, [r3, #20]
 801cf4c:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801cf4e:	68fb      	ldr	r3, [r7, #12]
 801cf50:	2b00      	cmp	r3, #0
 801cf52:	d1f3      	bne.n	801cf3c <TimerExists+0x10>
  }
  return false;
 801cf54:	2300      	movs	r3, #0
}
 801cf56:	0018      	movs	r0, r3
 801cf58:	46bd      	mov	sp, r7
 801cf5a:	b004      	add	sp, #16
 801cf5c:	bd80      	pop	{r7, pc}
 801cf5e:	46c0      	nop			; (mov r8, r8)
 801cf60:	20001344 	.word	0x20001344

0801cf64 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801cf64:	b590      	push	{r4, r7, lr}
 801cf66:	b085      	sub	sp, #20
 801cf68:	af00      	add	r7, sp, #0
 801cf6a:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801cf6c:	4b11      	ldr	r3, [pc, #68]	; (801cfb4 <TimerSetTimeout+0x50>)
 801cf6e:	6a1b      	ldr	r3, [r3, #32]
 801cf70:	4798      	blx	r3
 801cf72:	0003      	movs	r3, r0
 801cf74:	60fb      	str	r3, [r7, #12]
  TimerObject->IsPending = 1;
 801cf76:	687b      	ldr	r3, [r7, #4]
 801cf78:	2201      	movs	r2, #1
 801cf7a:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801cf7c:	687b      	ldr	r3, [r7, #4]
 801cf7e:	681c      	ldr	r4, [r3, #0]
 801cf80:	4b0c      	ldr	r3, [pc, #48]	; (801cfb4 <TimerSetTimeout+0x50>)
 801cf82:	699b      	ldr	r3, [r3, #24]
 801cf84:	4798      	blx	r3
 801cf86:	0002      	movs	r2, r0
 801cf88:	68fb      	ldr	r3, [r7, #12]
 801cf8a:	18d3      	adds	r3, r2, r3
 801cf8c:	429c      	cmp	r4, r3
 801cf8e:	d207      	bcs.n	801cfa0 <TimerSetTimeout+0x3c>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801cf90:	4b08      	ldr	r3, [pc, #32]	; (801cfb4 <TimerSetTimeout+0x50>)
 801cf92:	699b      	ldr	r3, [r3, #24]
 801cf94:	4798      	blx	r3
 801cf96:	0002      	movs	r2, r0
 801cf98:	68fb      	ldr	r3, [r7, #12]
 801cf9a:	18d2      	adds	r2, r2, r3
 801cf9c:	687b      	ldr	r3, [r7, #4]
 801cf9e:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801cfa0:	4b04      	ldr	r3, [pc, #16]	; (801cfb4 <TimerSetTimeout+0x50>)
 801cfa2:	689a      	ldr	r2, [r3, #8]
 801cfa4:	687b      	ldr	r3, [r7, #4]
 801cfa6:	681b      	ldr	r3, [r3, #0]
 801cfa8:	0018      	movs	r0, r3
 801cfaa:	4790      	blx	r2
}
 801cfac:	46c0      	nop			; (mov r8, r8)
 801cfae:	46bd      	mov	sp, r7
 801cfb0:	b005      	add	sp, #20
 801cfb2:	bd90      	pop	{r4, r7, pc}
 801cfb4:	0801f0c0 	.word	0x0801f0c0

0801cfb8 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801cfb8:	b580      	push	{r7, lr}
 801cfba:	b084      	sub	sp, #16
 801cfbc:	af00      	add	r7, sp, #0
 801cfbe:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801cfc0:	4b13      	ldr	r3, [pc, #76]	; (801d010 <TimerInsertTimer+0x58>)
 801cfc2:	681b      	ldr	r3, [r3, #0]
 801cfc4:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801cfc6:	4b12      	ldr	r3, [pc, #72]	; (801d010 <TimerInsertTimer+0x58>)
 801cfc8:	681b      	ldr	r3, [r3, #0]
 801cfca:	695b      	ldr	r3, [r3, #20]
 801cfcc:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801cfce:	e012      	b.n	801cff6 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801cfd0:	687b      	ldr	r3, [r7, #4]
 801cfd2:	681a      	ldr	r2, [r3, #0]
 801cfd4:	68bb      	ldr	r3, [r7, #8]
 801cfd6:	681b      	ldr	r3, [r3, #0]
 801cfd8:	429a      	cmp	r2, r3
 801cfda:	d905      	bls.n	801cfe8 <TimerInsertTimer+0x30>
    {
        cur = next;
 801cfdc:	68bb      	ldr	r3, [r7, #8]
 801cfde:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801cfe0:	68bb      	ldr	r3, [r7, #8]
 801cfe2:	695b      	ldr	r3, [r3, #20]
 801cfe4:	60bb      	str	r3, [r7, #8]
 801cfe6:	e006      	b.n	801cff6 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801cfe8:	68fb      	ldr	r3, [r7, #12]
 801cfea:	687a      	ldr	r2, [r7, #4]
 801cfec:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801cfee:	687b      	ldr	r3, [r7, #4]
 801cff0:	68ba      	ldr	r2, [r7, #8]
 801cff2:	615a      	str	r2, [r3, #20]
        return;
 801cff4:	e009      	b.n	801d00a <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801cff6:	68fb      	ldr	r3, [r7, #12]
 801cff8:	695b      	ldr	r3, [r3, #20]
 801cffa:	2b00      	cmp	r3, #0
 801cffc:	d1e8      	bne.n	801cfd0 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801cffe:	68fb      	ldr	r3, [r7, #12]
 801d000:	687a      	ldr	r2, [r7, #4]
 801d002:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801d004:	687b      	ldr	r3, [r7, #4]
 801d006:	2200      	movs	r2, #0
 801d008:	615a      	str	r2, [r3, #20]
}
 801d00a:	46bd      	mov	sp, r7
 801d00c:	b004      	add	sp, #16
 801d00e:	bd80      	pop	{r7, pc}
 801d010:	20001344 	.word	0x20001344

0801d014 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801d014:	b580      	push	{r7, lr}
 801d016:	b084      	sub	sp, #16
 801d018:	af00      	add	r7, sp, #0
 801d01a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801d01c:	4b0b      	ldr	r3, [pc, #44]	; (801d04c <TimerInsertNewHeadTimer+0x38>)
 801d01e:	681b      	ldr	r3, [r3, #0]
 801d020:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801d022:	68fb      	ldr	r3, [r7, #12]
 801d024:	2b00      	cmp	r3, #0
 801d026:	d002      	beq.n	801d02e <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801d028:	68fb      	ldr	r3, [r7, #12]
 801d02a:	2200      	movs	r2, #0
 801d02c:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801d02e:	687b      	ldr	r3, [r7, #4]
 801d030:	68fa      	ldr	r2, [r7, #12]
 801d032:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801d034:	4b05      	ldr	r3, [pc, #20]	; (801d04c <TimerInsertNewHeadTimer+0x38>)
 801d036:	687a      	ldr	r2, [r7, #4]
 801d038:	601a      	str	r2, [r3, #0]
  TimerSetTimeout( TimerListHead );
 801d03a:	4b04      	ldr	r3, [pc, #16]	; (801d04c <TimerInsertNewHeadTimer+0x38>)
 801d03c:	681b      	ldr	r3, [r3, #0]
 801d03e:	0018      	movs	r0, r3
 801d040:	f7ff ff90 	bl	801cf64 <TimerSetTimeout>
}
 801d044:	46c0      	nop			; (mov r8, r8)
 801d046:	46bd      	mov	sp, r7
 801d048:	b004      	add	sp, #16
 801d04a:	bd80      	pop	{r7, pc}
 801d04c:	20001344 	.word	0x20001344

0801d050 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801d050:	b580      	push	{r7, lr}
 801d052:	b084      	sub	sp, #16
 801d054:	af00      	add	r7, sp, #0
 801d056:	6078      	str	r0, [r7, #4]
  int i = 0;
 801d058:	2300      	movs	r3, #0
 801d05a:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801d05c:	e00e      	b.n	801d07c <ee_skip_atoi+0x2c>
 801d05e:	68fa      	ldr	r2, [r7, #12]
 801d060:	0013      	movs	r3, r2
 801d062:	009b      	lsls	r3, r3, #2
 801d064:	189b      	adds	r3, r3, r2
 801d066:	005b      	lsls	r3, r3, #1
 801d068:	0018      	movs	r0, r3
 801d06a:	687b      	ldr	r3, [r7, #4]
 801d06c:	681b      	ldr	r3, [r3, #0]
 801d06e:	1c59      	adds	r1, r3, #1
 801d070:	687a      	ldr	r2, [r7, #4]
 801d072:	6011      	str	r1, [r2, #0]
 801d074:	781b      	ldrb	r3, [r3, #0]
 801d076:	18c3      	adds	r3, r0, r3
 801d078:	3b30      	subs	r3, #48	; 0x30
 801d07a:	60fb      	str	r3, [r7, #12]
 801d07c:	687b      	ldr	r3, [r7, #4]
 801d07e:	681b      	ldr	r3, [r3, #0]
 801d080:	781b      	ldrb	r3, [r3, #0]
 801d082:	2b2f      	cmp	r3, #47	; 0x2f
 801d084:	d904      	bls.n	801d090 <ee_skip_atoi+0x40>
 801d086:	687b      	ldr	r3, [r7, #4]
 801d088:	681b      	ldr	r3, [r3, #0]
 801d08a:	781b      	ldrb	r3, [r3, #0]
 801d08c:	2b39      	cmp	r3, #57	; 0x39
 801d08e:	d9e6      	bls.n	801d05e <ee_skip_atoi+0xe>
  return i;
 801d090:	68fb      	ldr	r3, [r7, #12]
}
 801d092:	0018      	movs	r0, r3
 801d094:	46bd      	mov	sp, r7
 801d096:	b004      	add	sp, #16
 801d098:	bd80      	pop	{r7, pc}
	...

0801d09c <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801d09c:	b580      	push	{r7, lr}
 801d09e:	b098      	sub	sp, #96	; 0x60
 801d0a0:	af00      	add	r7, sp, #0
 801d0a2:	60f8      	str	r0, [r7, #12]
 801d0a4:	60b9      	str	r1, [r7, #8]
 801d0a6:	607a      	str	r2, [r7, #4]
 801d0a8:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801d0aa:	4b72      	ldr	r3, [pc, #456]	; (801d274 <ee_number+0x1d8>)
 801d0ac:	681b      	ldr	r3, [r3, #0]
 801d0ae:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801d0b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d0b2:	2240      	movs	r2, #64	; 0x40
 801d0b4:	4013      	ands	r3, r2
 801d0b6:	d002      	beq.n	801d0be <ee_number+0x22>
 801d0b8:	4b6f      	ldr	r3, [pc, #444]	; (801d278 <ee_number+0x1dc>)
 801d0ba:	681b      	ldr	r3, [r3, #0]
 801d0bc:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801d0be:	683b      	ldr	r3, [r7, #0]
 801d0c0:	2b01      	cmp	r3, #1
 801d0c2:	dd02      	ble.n	801d0ca <ee_number+0x2e>
 801d0c4:	683b      	ldr	r3, [r7, #0]
 801d0c6:	2b24      	cmp	r3, #36	; 0x24
 801d0c8:	dd01      	ble.n	801d0ce <ee_number+0x32>
 801d0ca:	2300      	movs	r3, #0
 801d0cc:	e0cd      	b.n	801d26a <ee_number+0x1ce>
  
  c = (type & ZEROPAD) ? '0' : ' ';
 801d0ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d0d0:	2201      	movs	r2, #1
 801d0d2:	4013      	ands	r3, r2
 801d0d4:	d001      	beq.n	801d0da <ee_number+0x3e>
 801d0d6:	2230      	movs	r2, #48	; 0x30
 801d0d8:	e000      	b.n	801d0dc <ee_number+0x40>
 801d0da:	2220      	movs	r2, #32
 801d0dc:	2353      	movs	r3, #83	; 0x53
 801d0de:	18fb      	adds	r3, r7, r3
 801d0e0:	701a      	strb	r2, [r3, #0]
  sign = 0;
 801d0e2:	215f      	movs	r1, #95	; 0x5f
 801d0e4:	187b      	adds	r3, r7, r1
 801d0e6:	2200      	movs	r2, #0
 801d0e8:	701a      	strb	r2, [r3, #0]
  if (type & SIGN)
 801d0ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d0ec:	2202      	movs	r2, #2
 801d0ee:	4013      	ands	r3, r2
 801d0f0:	d00b      	beq.n	801d10a <ee_number+0x6e>
  {
    if (num < 0)
 801d0f2:	687b      	ldr	r3, [r7, #4]
 801d0f4:	2b00      	cmp	r3, #0
 801d0f6:	da08      	bge.n	801d10a <ee_number+0x6e>
    {
      sign = '-';
 801d0f8:	187b      	adds	r3, r7, r1
 801d0fa:	222d      	movs	r2, #45	; 0x2d
 801d0fc:	701a      	strb	r2, [r3, #0]
      num = -num;
 801d0fe:	687b      	ldr	r3, [r7, #4]
 801d100:	425b      	negs	r3, r3
 801d102:	607b      	str	r3, [r7, #4]
      size--;
 801d104:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d106:	3b01      	subs	r3, #1
 801d108:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif
  
  i = 0;
 801d10a:	2300      	movs	r3, #0
 801d10c:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 801d10e:	687b      	ldr	r3, [r7, #4]
 801d110:	2b00      	cmp	r3, #0
 801d112:	d120      	bne.n	801d156 <ee_number+0xba>
    tmp[i++] = '0';
 801d114:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d116:	1c5a      	adds	r2, r3, #1
 801d118:	657a      	str	r2, [r7, #84]	; 0x54
 801d11a:	2210      	movs	r2, #16
 801d11c:	18ba      	adds	r2, r7, r2
 801d11e:	2130      	movs	r1, #48	; 0x30
 801d120:	54d1      	strb	r1, [r2, r3]
 801d122:	e01b      	b.n	801d15c <ee_number+0xc0>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801d124:	687b      	ldr	r3, [r7, #4]
 801d126:	683a      	ldr	r2, [r7, #0]
 801d128:	0011      	movs	r1, r2
 801d12a:	0018      	movs	r0, r3
 801d12c:	f7e3 f87a 	bl	8000224 <__aeabi_uidivmod>
 801d130:	000b      	movs	r3, r1
 801d132:	001a      	movs	r2, r3
 801d134:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801d136:	189a      	adds	r2, r3, r2
 801d138:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d13a:	1c59      	adds	r1, r3, #1
 801d13c:	6579      	str	r1, [r7, #84]	; 0x54
 801d13e:	7811      	ldrb	r1, [r2, #0]
 801d140:	2210      	movs	r2, #16
 801d142:	18ba      	adds	r2, r7, r2
 801d144:	54d1      	strb	r1, [r2, r3]
      num = ((unsigned long) num) / (unsigned) base;
 801d146:	687b      	ldr	r3, [r7, #4]
 801d148:	683a      	ldr	r2, [r7, #0]
 801d14a:	0011      	movs	r1, r2
 801d14c:	0018      	movs	r0, r3
 801d14e:	f7e2 ffe3 	bl	8000118 <__udivsi3>
 801d152:	0003      	movs	r3, r0
 801d154:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801d156:	687b      	ldr	r3, [r7, #4]
 801d158:	2b00      	cmp	r3, #0
 801d15a:	d1e3      	bne.n	801d124 <ee_number+0x88>
    }
  }

  if (i > precision) precision = i;
 801d15c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d15e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d160:	429a      	cmp	r2, r3
 801d162:	dd01      	ble.n	801d168 <ee_number+0xcc>
 801d164:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d166:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 801d168:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801d16a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d16c:	1ad3      	subs	r3, r2, r3
 801d16e:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801d170:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d172:	2201      	movs	r2, #1
 801d174:	4013      	ands	r3, r2
 801d176:	d112      	bne.n	801d19e <ee_number+0x102>
 801d178:	e00c      	b.n	801d194 <ee_number+0xf8>
 801d17a:	68fb      	ldr	r3, [r7, #12]
 801d17c:	1c5a      	adds	r2, r3, #1
 801d17e:	60fa      	str	r2, [r7, #12]
 801d180:	2220      	movs	r2, #32
 801d182:	701a      	strb	r2, [r3, #0]
 801d184:	68bb      	ldr	r3, [r7, #8]
 801d186:	3b01      	subs	r3, #1
 801d188:	60bb      	str	r3, [r7, #8]
 801d18a:	68bb      	ldr	r3, [r7, #8]
 801d18c:	2b00      	cmp	r3, #0
 801d18e:	d101      	bne.n	801d194 <ee_number+0xf8>
 801d190:	68fb      	ldr	r3, [r7, #12]
 801d192:	e06a      	b.n	801d26a <ee_number+0x1ce>
 801d194:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d196:	1e5a      	subs	r2, r3, #1
 801d198:	66ba      	str	r2, [r7, #104]	; 0x68
 801d19a:	2b00      	cmp	r3, #0
 801d19c:	dced      	bgt.n	801d17a <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801d19e:	215f      	movs	r1, #95	; 0x5f
 801d1a0:	187b      	adds	r3, r7, r1
 801d1a2:	781b      	ldrb	r3, [r3, #0]
 801d1a4:	2b00      	cmp	r3, #0
 801d1a6:	d01c      	beq.n	801d1e2 <ee_number+0x146>
 801d1a8:	68fb      	ldr	r3, [r7, #12]
 801d1aa:	1c5a      	adds	r2, r3, #1
 801d1ac:	60fa      	str	r2, [r7, #12]
 801d1ae:	187a      	adds	r2, r7, r1
 801d1b0:	7812      	ldrb	r2, [r2, #0]
 801d1b2:	701a      	strb	r2, [r3, #0]
 801d1b4:	68bb      	ldr	r3, [r7, #8]
 801d1b6:	3b01      	subs	r3, #1
 801d1b8:	60bb      	str	r3, [r7, #8]
 801d1ba:	68bb      	ldr	r3, [r7, #8]
 801d1bc:	2b00      	cmp	r3, #0
 801d1be:	d110      	bne.n	801d1e2 <ee_number+0x146>
 801d1c0:	68fb      	ldr	r3, [r7, #12]
 801d1c2:	e052      	b.n	801d26a <ee_number+0x1ce>
    }
  }
#endif
  
#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801d1c4:	68fb      	ldr	r3, [r7, #12]
 801d1c6:	1c5a      	adds	r2, r3, #1
 801d1c8:	60fa      	str	r2, [r7, #12]
 801d1ca:	2253      	movs	r2, #83	; 0x53
 801d1cc:	18ba      	adds	r2, r7, r2
 801d1ce:	7812      	ldrb	r2, [r2, #0]
 801d1d0:	701a      	strb	r2, [r3, #0]
 801d1d2:	68bb      	ldr	r3, [r7, #8]
 801d1d4:	3b01      	subs	r3, #1
 801d1d6:	60bb      	str	r3, [r7, #8]
 801d1d8:	68bb      	ldr	r3, [r7, #8]
 801d1da:	2b00      	cmp	r3, #0
 801d1dc:	d101      	bne.n	801d1e2 <ee_number+0x146>
 801d1de:	68fb      	ldr	r3, [r7, #12]
 801d1e0:	e043      	b.n	801d26a <ee_number+0x1ce>
 801d1e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d1e4:	1e5a      	subs	r2, r3, #1
 801d1e6:	66ba      	str	r2, [r7, #104]	; 0x68
 801d1e8:	2b00      	cmp	r3, #0
 801d1ea:	dceb      	bgt.n	801d1c4 <ee_number+0x128>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801d1ec:	e00c      	b.n	801d208 <ee_number+0x16c>
 801d1ee:	68fb      	ldr	r3, [r7, #12]
 801d1f0:	1c5a      	adds	r2, r3, #1
 801d1f2:	60fa      	str	r2, [r7, #12]
 801d1f4:	2230      	movs	r2, #48	; 0x30
 801d1f6:	701a      	strb	r2, [r3, #0]
 801d1f8:	68bb      	ldr	r3, [r7, #8]
 801d1fa:	3b01      	subs	r3, #1
 801d1fc:	60bb      	str	r3, [r7, #8]
 801d1fe:	68bb      	ldr	r3, [r7, #8]
 801d200:	2b00      	cmp	r3, #0
 801d202:	d101      	bne.n	801d208 <ee_number+0x16c>
 801d204:	68fb      	ldr	r3, [r7, #12]
 801d206:	e030      	b.n	801d26a <ee_number+0x1ce>
 801d208:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d20a:	1e5a      	subs	r2, r3, #1
 801d20c:	66fa      	str	r2, [r7, #108]	; 0x6c
 801d20e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d210:	429a      	cmp	r2, r3
 801d212:	dbec      	blt.n	801d1ee <ee_number+0x152>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801d214:	e010      	b.n	801d238 <ee_number+0x19c>
 801d216:	68fb      	ldr	r3, [r7, #12]
 801d218:	1c5a      	adds	r2, r3, #1
 801d21a:	60fa      	str	r2, [r7, #12]
 801d21c:	2210      	movs	r2, #16
 801d21e:	18b9      	adds	r1, r7, r2
 801d220:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d222:	188a      	adds	r2, r1, r2
 801d224:	7812      	ldrb	r2, [r2, #0]
 801d226:	701a      	strb	r2, [r3, #0]
 801d228:	68bb      	ldr	r3, [r7, #8]
 801d22a:	3b01      	subs	r3, #1
 801d22c:	60bb      	str	r3, [r7, #8]
 801d22e:	68bb      	ldr	r3, [r7, #8]
 801d230:	2b00      	cmp	r3, #0
 801d232:	d101      	bne.n	801d238 <ee_number+0x19c>
 801d234:	68fb      	ldr	r3, [r7, #12]
 801d236:	e018      	b.n	801d26a <ee_number+0x1ce>
 801d238:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d23a:	1e5a      	subs	r2, r3, #1
 801d23c:	657a      	str	r2, [r7, #84]	; 0x54
 801d23e:	2b00      	cmp	r3, #0
 801d240:	dce9      	bgt.n	801d216 <ee_number+0x17a>
  while (size-- > 0) ASSIGN_STR(' ');
 801d242:	e00c      	b.n	801d25e <ee_number+0x1c2>
 801d244:	68fb      	ldr	r3, [r7, #12]
 801d246:	1c5a      	adds	r2, r3, #1
 801d248:	60fa      	str	r2, [r7, #12]
 801d24a:	2220      	movs	r2, #32
 801d24c:	701a      	strb	r2, [r3, #0]
 801d24e:	68bb      	ldr	r3, [r7, #8]
 801d250:	3b01      	subs	r3, #1
 801d252:	60bb      	str	r3, [r7, #8]
 801d254:	68bb      	ldr	r3, [r7, #8]
 801d256:	2b00      	cmp	r3, #0
 801d258:	d101      	bne.n	801d25e <ee_number+0x1c2>
 801d25a:	68fb      	ldr	r3, [r7, #12]
 801d25c:	e005      	b.n	801d26a <ee_number+0x1ce>
 801d25e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d260:	1e5a      	subs	r2, r3, #1
 801d262:	66ba      	str	r2, [r7, #104]	; 0x68
 801d264:	2b00      	cmp	r3, #0
 801d266:	dced      	bgt.n	801d244 <ee_number+0x1a8>

  return str;
 801d268:	68fb      	ldr	r3, [r7, #12]
}
 801d26a:	0018      	movs	r0, r3
 801d26c:	46bd      	mov	sp, r7
 801d26e:	b018      	add	sp, #96	; 0x60
 801d270:	bd80      	pop	{r7, pc}
 801d272:	46c0      	nop			; (mov r8, r8)
 801d274:	200001d0 	.word	0x200001d0
 801d278:	200001d4 	.word	0x200001d4

0801d27c <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801d27c:	b590      	push	{r4, r7, lr}
 801d27e:	b093      	sub	sp, #76	; 0x4c
 801d280:	af04      	add	r7, sp, #16
 801d282:	60f8      	str	r0, [r7, #12]
 801d284:	60b9      	str	r1, [r7, #8]
 801d286:	607a      	str	r2, [r7, #4]
 801d288:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801d28a:	68bb      	ldr	r3, [r7, #8]
 801d28c:	2b00      	cmp	r3, #0
 801d28e:	dc01      	bgt.n	801d294 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801d290:	2300      	movs	r3, #0
 801d292:	e104      	b.n	801d49e <tiny_vsnprintf_like+0x222>
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801d294:	68fb      	ldr	r3, [r7, #12]
 801d296:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d298:	e0ec      	b.n	801d474 <tiny_vsnprintf_like+0x1f8>
  {
    CHECK_STR_SIZE(buf, str, size);
 801d29a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d29c:	68fb      	ldr	r3, [r7, #12]
 801d29e:	1ad2      	subs	r2, r2, r3
 801d2a0:	68bb      	ldr	r3, [r7, #8]
 801d2a2:	3b01      	subs	r3, #1
 801d2a4:	429a      	cmp	r2, r3
 801d2a6:	db00      	blt.n	801d2aa <tiny_vsnprintf_like+0x2e>
 801d2a8:	e0f2      	b.n	801d490 <tiny_vsnprintf_like+0x214>
    
    if (*fmt != '%')
 801d2aa:	687b      	ldr	r3, [r7, #4]
 801d2ac:	781b      	ldrb	r3, [r3, #0]
 801d2ae:	2b25      	cmp	r3, #37	; 0x25
 801d2b0:	d006      	beq.n	801d2c0 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801d2b2:	687a      	ldr	r2, [r7, #4]
 801d2b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d2b6:	1c59      	adds	r1, r3, #1
 801d2b8:	62f9      	str	r1, [r7, #44]	; 0x2c
 801d2ba:	7812      	ldrb	r2, [r2, #0]
 801d2bc:	701a      	strb	r2, [r3, #0]
      continue;
 801d2be:	e0d6      	b.n	801d46e <tiny_vsnprintf_like+0x1f2>
    }
                  
    // Process flags
    flags = 0;
 801d2c0:	2300      	movs	r3, #0
 801d2c2:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801d2c4:	687b      	ldr	r3, [r7, #4]
 801d2c6:	3301      	adds	r3, #1
 801d2c8:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801d2ca:	687b      	ldr	r3, [r7, #4]
 801d2cc:	781b      	ldrb	r3, [r3, #0]
 801d2ce:	2b30      	cmp	r3, #48	; 0x30
 801d2d0:	d103      	bne.n	801d2da <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801d2d2:	6a3b      	ldr	r3, [r7, #32]
 801d2d4:	2201      	movs	r2, #1
 801d2d6:	4313      	orrs	r3, r2
 801d2d8:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif
    
    // Get field width
    field_width = -1;
 801d2da:	2301      	movs	r3, #1
 801d2dc:	425b      	negs	r3, r3
 801d2de:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801d2e0:	687b      	ldr	r3, [r7, #4]
 801d2e2:	781b      	ldrb	r3, [r3, #0]
 801d2e4:	2b2f      	cmp	r3, #47	; 0x2f
 801d2e6:	d909      	bls.n	801d2fc <tiny_vsnprintf_like+0x80>
 801d2e8:	687b      	ldr	r3, [r7, #4]
 801d2ea:	781b      	ldrb	r3, [r3, #0]
 801d2ec:	2b39      	cmp	r3, #57	; 0x39
 801d2ee:	d805      	bhi.n	801d2fc <tiny_vsnprintf_like+0x80>
      field_width = ee_skip_atoi(&fmt);
 801d2f0:	1d3b      	adds	r3, r7, #4
 801d2f2:	0018      	movs	r0, r3
 801d2f4:	f7ff feac 	bl	801d050 <ee_skip_atoi>
 801d2f8:	0003      	movs	r3, r0
 801d2fa:	61fb      	str	r3, [r7, #28]
      }
    }
#endif
    
    // Get the precision
    precision = -1;
 801d2fc:	2301      	movs	r3, #1
 801d2fe:	425b      	negs	r3, r3
 801d300:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif
    
    // Get the conversion qualifier
    qualifier = -1;
 801d302:	2301      	movs	r3, #1
 801d304:	425b      	negs	r3, r3
 801d306:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif
    
    // Default base
    base = 10;
 801d308:	230a      	movs	r3, #10
 801d30a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 801d30c:	687b      	ldr	r3, [r7, #4]
 801d30e:	781b      	ldrb	r3, [r3, #0]
 801d310:	3b58      	subs	r3, #88	; 0x58
 801d312:	2b20      	cmp	r3, #32
 801d314:	d854      	bhi.n	801d3c0 <tiny_vsnprintf_like+0x144>
 801d316:	009a      	lsls	r2, r3, #2
 801d318:	4b63      	ldr	r3, [pc, #396]	; (801d4a8 <tiny_vsnprintf_like+0x22c>)
 801d31a:	18d3      	adds	r3, r2, r3
 801d31c:	681b      	ldr	r3, [r3, #0]
 801d31e:	469f      	mov	pc, r3
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801d320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d322:	1c5a      	adds	r2, r3, #1
 801d324:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d326:	2220      	movs	r2, #32
 801d328:	701a      	strb	r2, [r3, #0]
 801d32a:	69fb      	ldr	r3, [r7, #28]
 801d32c:	3b01      	subs	r3, #1
 801d32e:	61fb      	str	r3, [r7, #28]
 801d330:	69fb      	ldr	r3, [r7, #28]
 801d332:	2b00      	cmp	r3, #0
 801d334:	dcf4      	bgt.n	801d320 <tiny_vsnprintf_like+0xa4>
        *str++ = (unsigned char) va_arg(args, int);
 801d336:	683b      	ldr	r3, [r7, #0]
 801d338:	1d1a      	adds	r2, r3, #4
 801d33a:	603a      	str	r2, [r7, #0]
 801d33c:	6819      	ldr	r1, [r3, #0]
 801d33e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d340:	1c5a      	adds	r2, r3, #1
 801d342:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d344:	b2ca      	uxtb	r2, r1
 801d346:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801d348:	e091      	b.n	801d46e <tiny_vsnprintf_like+0x1f2>

      case 's':
        s = va_arg(args, char *);
 801d34a:	683b      	ldr	r3, [r7, #0]
 801d34c:	1d1a      	adds	r2, r3, #4
 801d34e:	603a      	str	r2, [r7, #0]
 801d350:	681b      	ldr	r3, [r3, #0]
 801d352:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801d354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d356:	2b00      	cmp	r3, #0
 801d358:	d101      	bne.n	801d35e <tiny_vsnprintf_like+0xe2>
 801d35a:	4b54      	ldr	r3, [pc, #336]	; (801d4ac <tiny_vsnprintf_like+0x230>)
 801d35c:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801d35e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d360:	0018      	movs	r0, r3
 801d362:	f7e2 fed1 	bl	8000108 <strlen>
 801d366:	0003      	movs	r3, r0
 801d368:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801d36a:	e004      	b.n	801d376 <tiny_vsnprintf_like+0xfa>
 801d36c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d36e:	1c5a      	adds	r2, r3, #1
 801d370:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d372:	2220      	movs	r2, #32
 801d374:	701a      	strb	r2, [r3, #0]
 801d376:	69fb      	ldr	r3, [r7, #28]
 801d378:	1e5a      	subs	r2, r3, #1
 801d37a:	61fa      	str	r2, [r7, #28]
 801d37c:	693a      	ldr	r2, [r7, #16]
 801d37e:	429a      	cmp	r2, r3
 801d380:	dbf4      	blt.n	801d36c <tiny_vsnprintf_like+0xf0>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801d382:	2300      	movs	r3, #0
 801d384:	62bb      	str	r3, [r7, #40]	; 0x28
 801d386:	e00a      	b.n	801d39e <tiny_vsnprintf_like+0x122>
 801d388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d38a:	1c53      	adds	r3, r2, #1
 801d38c:	627b      	str	r3, [r7, #36]	; 0x24
 801d38e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d390:	1c59      	adds	r1, r3, #1
 801d392:	62f9      	str	r1, [r7, #44]	; 0x2c
 801d394:	7812      	ldrb	r2, [r2, #0]
 801d396:	701a      	strb	r2, [r3, #0]
 801d398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d39a:	3301      	adds	r3, #1
 801d39c:	62bb      	str	r3, [r7, #40]	; 0x28
 801d39e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d3a0:	693b      	ldr	r3, [r7, #16]
 801d3a2:	429a      	cmp	r2, r3
 801d3a4:	dbf0      	blt.n	801d388 <tiny_vsnprintf_like+0x10c>
#ifdef TINY_PRINTF
#else        
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801d3a6:	e062      	b.n	801d46e <tiny_vsnprintf_like+0x1f2>
        base = 8;
        break;
#endif
      
      case 'X':
        flags |= UPPERCASE;
 801d3a8:	6a3b      	ldr	r3, [r7, #32]
 801d3aa:	2240      	movs	r2, #64	; 0x40
 801d3ac:	4313      	orrs	r3, r2
 801d3ae:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801d3b0:	2310      	movs	r3, #16
 801d3b2:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801d3b4:	e02d      	b.n	801d412 <tiny_vsnprintf_like+0x196>

      case 'd':
      case 'i':
        flags |= SIGN;
 801d3b6:	6a3b      	ldr	r3, [r7, #32]
 801d3b8:	2202      	movs	r2, #2
 801d3ba:	4313      	orrs	r3, r2
 801d3bc:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801d3be:	e025      	b.n	801d40c <tiny_vsnprintf_like+0x190>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801d3c0:	687b      	ldr	r3, [r7, #4]
 801d3c2:	781b      	ldrb	r3, [r3, #0]
 801d3c4:	2b25      	cmp	r3, #37	; 0x25
 801d3c6:	d004      	beq.n	801d3d2 <tiny_vsnprintf_like+0x156>
 801d3c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d3ca:	1c5a      	adds	r2, r3, #1
 801d3cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d3ce:	2225      	movs	r2, #37	; 0x25
 801d3d0:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801d3d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d3d4:	68fb      	ldr	r3, [r7, #12]
 801d3d6:	1ad2      	subs	r2, r2, r3
 801d3d8:	68bb      	ldr	r3, [r7, #8]
 801d3da:	3b01      	subs	r3, #1
 801d3dc:	429a      	cmp	r2, r3
 801d3de:	da17      	bge.n	801d410 <tiny_vsnprintf_like+0x194>
        if (*fmt)
 801d3e0:	687b      	ldr	r3, [r7, #4]
 801d3e2:	781b      	ldrb	r3, [r3, #0]
 801d3e4:	2b00      	cmp	r3, #0
 801d3e6:	d006      	beq.n	801d3f6 <tiny_vsnprintf_like+0x17a>
          *str++ = *fmt;
 801d3e8:	687a      	ldr	r2, [r7, #4]
 801d3ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d3ec:	1c59      	adds	r1, r3, #1
 801d3ee:	62f9      	str	r1, [r7, #44]	; 0x2c
 801d3f0:	7812      	ldrb	r2, [r2, #0]
 801d3f2:	701a      	strb	r2, [r3, #0]
 801d3f4:	e002      	b.n	801d3fc <tiny_vsnprintf_like+0x180>
        else
          --fmt;
 801d3f6:	687b      	ldr	r3, [r7, #4]
 801d3f8:	3b01      	subs	r3, #1
 801d3fa:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801d3fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d3fe:	68fb      	ldr	r3, [r7, #12]
 801d400:	1ad2      	subs	r2, r2, r3
 801d402:	68bb      	ldr	r3, [r7, #8]
 801d404:	3b01      	subs	r3, #1
 801d406:	429a      	cmp	r2, r3
 801d408:	db30      	blt.n	801d46c <tiny_vsnprintf_like+0x1f0>
 801d40a:	e002      	b.n	801d412 <tiny_vsnprintf_like+0x196>
        break;
 801d40c:	46c0      	nop			; (mov r8, r8)
 801d40e:	e000      	b.n	801d412 <tiny_vsnprintf_like+0x196>
        CHECK_STR_SIZE(buf, str, size);
 801d410:	46c0      	nop			; (mov r8, r8)
        continue;
    }

    if (qualifier == 'l')
 801d412:	697b      	ldr	r3, [r7, #20]
 801d414:	2b6c      	cmp	r3, #108	; 0x6c
 801d416:	d105      	bne.n	801d424 <tiny_vsnprintf_like+0x1a8>
      num = va_arg(args, unsigned long);
 801d418:	683b      	ldr	r3, [r7, #0]
 801d41a:	1d1a      	adds	r2, r3, #4
 801d41c:	603a      	str	r2, [r7, #0]
 801d41e:	681b      	ldr	r3, [r3, #0]
 801d420:	637b      	str	r3, [r7, #52]	; 0x34
 801d422:	e00e      	b.n	801d442 <tiny_vsnprintf_like+0x1c6>
    else if (flags & SIGN)
 801d424:	6a3b      	ldr	r3, [r7, #32]
 801d426:	2202      	movs	r2, #2
 801d428:	4013      	ands	r3, r2
 801d42a:	d005      	beq.n	801d438 <tiny_vsnprintf_like+0x1bc>
      num = va_arg(args, int);
 801d42c:	683b      	ldr	r3, [r7, #0]
 801d42e:	1d1a      	adds	r2, r3, #4
 801d430:	603a      	str	r2, [r7, #0]
 801d432:	681b      	ldr	r3, [r3, #0]
 801d434:	637b      	str	r3, [r7, #52]	; 0x34
 801d436:	e004      	b.n	801d442 <tiny_vsnprintf_like+0x1c6>
    else
      num = va_arg(args, unsigned int);
 801d438:	683b      	ldr	r3, [r7, #0]
 801d43a:	1d1a      	adds	r2, r3, #4
 801d43c:	603a      	str	r2, [r7, #0]
 801d43e:	681b      	ldr	r3, [r3, #0]
 801d440:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801d442:	68bb      	ldr	r3, [r7, #8]
 801d444:	1e5a      	subs	r2, r3, #1
 801d446:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801d448:	68fb      	ldr	r3, [r7, #12]
 801d44a:	1acb      	subs	r3, r1, r3
 801d44c:	1ad1      	subs	r1, r2, r3
 801d44e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d450:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 801d452:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801d454:	6a3b      	ldr	r3, [r7, #32]
 801d456:	9302      	str	r3, [sp, #8]
 801d458:	69bb      	ldr	r3, [r7, #24]
 801d45a:	9301      	str	r3, [sp, #4]
 801d45c:	69fb      	ldr	r3, [r7, #28]
 801d45e:	9300      	str	r3, [sp, #0]
 801d460:	0023      	movs	r3, r4
 801d462:	f7ff fe1b 	bl	801d09c <ee_number>
 801d466:	0003      	movs	r3, r0
 801d468:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d46a:	e000      	b.n	801d46e <tiny_vsnprintf_like+0x1f2>
        continue;
 801d46c:	46c0      	nop			; (mov r8, r8)
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801d46e:	687b      	ldr	r3, [r7, #4]
 801d470:	3301      	adds	r3, #1
 801d472:	607b      	str	r3, [r7, #4]
 801d474:	687b      	ldr	r3, [r7, #4]
 801d476:	781b      	ldrb	r3, [r3, #0]
 801d478:	2b00      	cmp	r3, #0
 801d47a:	d000      	beq.n	801d47e <tiny_vsnprintf_like+0x202>
 801d47c:	e70d      	b.n	801d29a <tiny_vsnprintf_like+0x1e>
 801d47e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d480:	68fb      	ldr	r3, [r7, #12]
 801d482:	1ad2      	subs	r2, r2, r3
 801d484:	68bb      	ldr	r3, [r7, #8]
 801d486:	3b01      	subs	r3, #1
 801d488:	429a      	cmp	r2, r3
 801d48a:	db00      	blt.n	801d48e <tiny_vsnprintf_like+0x212>
 801d48c:	e705      	b.n	801d29a <tiny_vsnprintf_like+0x1e>
 801d48e:	e000      	b.n	801d492 <tiny_vsnprintf_like+0x216>
    CHECK_STR_SIZE(buf, str, size);
 801d490:	46c0      	nop			; (mov r8, r8)
  }

  *str = '\0';
 801d492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d494:	2200      	movs	r2, #0
 801d496:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801d498:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d49a:	68fb      	ldr	r3, [r7, #12]
 801d49c:	1ad3      	subs	r3, r2, r3
}
 801d49e:	0018      	movs	r0, r3
 801d4a0:	46bd      	mov	sp, r7
 801d4a2:	b00f      	add	sp, #60	; 0x3c
 801d4a4:	bd90      	pop	{r4, r7, pc}
 801d4a6:	46c0      	nop			; (mov r8, r8)
 801d4a8:	0801ff2c 	.word	0x0801ff2c
 801d4ac:	0801ff24 	.word	0x0801ff24

0801d4b0 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 801d4b0:	b580      	push	{r7, lr}
 801d4b2:	b082      	sub	sp, #8
 801d4b4:	af00      	add	r7, sp, #0
 801d4b6:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 801d4b8:	687b      	ldr	r3, [r7, #4]
 801d4ba:	2203      	movs	r2, #3
 801d4bc:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 801d4be:	687b      	ldr	r3, [r7, #4]
 801d4c0:	2200      	movs	r2, #0
 801d4c2:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 801d4c4:	687b      	ldr	r3, [r7, #4]
 801d4c6:	2203      	movs	r2, #3
 801d4c8:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 801d4ca:	687b      	ldr	r3, [r7, #4]
 801d4cc:	2203      	movs	r2, #3
 801d4ce:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 801d4d0:	687b      	ldr	r3, [r7, #4]
 801d4d2:	2203      	movs	r2, #3
 801d4d4:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 801d4d6:	687b      	ldr	r3, [r7, #4]
 801d4d8:	2203      	movs	r2, #3
 801d4da:	715a      	strb	r2, [r3, #5]
}
 801d4dc:	46c0      	nop			; (mov r8, r8)
 801d4de:	46bd      	mov	sp, r7
 801d4e0:	b002      	add	sp, #8
 801d4e2:	bd80      	pop	{r7, pc}

0801d4e4 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 801d4e4:	b590      	push	{r4, r7, lr}
 801d4e6:	b08b      	sub	sp, #44	; 0x2c
 801d4e8:	af04      	add	r7, sp, #16
 801d4ea:	60f8      	str	r0, [r7, #12]
 801d4ec:	607a      	str	r2, [r7, #4]
 801d4ee:	240b      	movs	r4, #11
 801d4f0:	193b      	adds	r3, r7, r4
 801d4f2:	1c0a      	adds	r2, r1, #0
 801d4f4:	701a      	strb	r2, [r3, #0]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 801d4f6:	68fb      	ldr	r3, [r7, #12]
 801d4f8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801d4fa:	2116      	movs	r1, #22
 801d4fc:	187a      	adds	r2, r7, r1
 801d4fe:	18db      	adds	r3, r3, r3
 801d500:	8013      	strh	r3, [r2, #0]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 801d502:	68fb      	ldr	r3, [r7, #12]
 801d504:	6a98      	ldr	r0, [r3, #40]	; 0x28
 801d506:	193b      	adds	r3, r7, r4
 801d508:	781b      	ldrb	r3, [r3, #0]
 801d50a:	b29a      	uxth	r2, r3
 801d50c:	187b      	adds	r3, r7, r1
 801d50e:	8819      	ldrh	r1, [r3, #0]
 801d510:	4b0f      	ldr	r3, [pc, #60]	; (801d550 <read_register16+0x6c>)
 801d512:	9302      	str	r3, [sp, #8]
 801d514:	2302      	movs	r3, #2
 801d516:	9301      	str	r3, [sp, #4]
 801d518:	2414      	movs	r4, #20
 801d51a:	193b      	adds	r3, r7, r4
 801d51c:	9300      	str	r3, [sp, #0]
 801d51e:	2301      	movs	r3, #1
 801d520:	f7ea feb4 	bl	800828c <HAL_I2C_Mem_Read>
 801d524:	1e03      	subs	r3, r0, #0
 801d526:	d10e      	bne.n	801d546 <read_register16+0x62>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 801d528:	0021      	movs	r1, r4
 801d52a:	187b      	adds	r3, r7, r1
 801d52c:	785b      	ldrb	r3, [r3, #1]
 801d52e:	021b      	lsls	r3, r3, #8
 801d530:	b21a      	sxth	r2, r3
 801d532:	187b      	adds	r3, r7, r1
 801d534:	781b      	ldrb	r3, [r3, #0]
 801d536:	b21b      	sxth	r3, r3
 801d538:	4313      	orrs	r3, r2
 801d53a:	b21b      	sxth	r3, r3
 801d53c:	b29a      	uxth	r2, r3
 801d53e:	687b      	ldr	r3, [r7, #4]
 801d540:	801a      	strh	r2, [r3, #0]
		return true;
 801d542:	2301      	movs	r3, #1
 801d544:	e000      	b.n	801d548 <read_register16+0x64>
	} else
		return false;
 801d546:	2300      	movs	r3, #0

}
 801d548:	0018      	movs	r0, r3
 801d54a:	46bd      	mov	sp, r7
 801d54c:	b007      	add	sp, #28
 801d54e:	bd90      	pop	{r4, r7, pc}
 801d550:	00001388 	.word	0x00001388

0801d554 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 801d554:	b5b0      	push	{r4, r5, r7, lr}
 801d556:	b08a      	sub	sp, #40	; 0x28
 801d558:	af04      	add	r7, sp, #16
 801d55a:	60f8      	str	r0, [r7, #12]
 801d55c:	0008      	movs	r0, r1
 801d55e:	607a      	str	r2, [r7, #4]
 801d560:	0019      	movs	r1, r3
 801d562:	240b      	movs	r4, #11
 801d564:	193b      	adds	r3, r7, r4
 801d566:	1c02      	adds	r2, r0, #0
 801d568:	701a      	strb	r2, [r3, #0]
 801d56a:	250a      	movs	r5, #10
 801d56c:	197b      	adds	r3, r7, r5
 801d56e:	1c0a      	adds	r2, r1, #0
 801d570:	701a      	strb	r2, [r3, #0]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 801d572:	68fb      	ldr	r3, [r7, #12]
 801d574:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801d576:	2116      	movs	r1, #22
 801d578:	187a      	adds	r2, r7, r1
 801d57a:	18db      	adds	r3, r3, r3
 801d57c:	8013      	strh	r3, [r2, #0]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 801d57e:	68fb      	ldr	r3, [r7, #12]
 801d580:	6a98      	ldr	r0, [r3, #40]	; 0x28
 801d582:	193b      	adds	r3, r7, r4
 801d584:	781b      	ldrb	r3, [r3, #0]
 801d586:	b29c      	uxth	r4, r3
 801d588:	197b      	adds	r3, r7, r5
 801d58a:	781b      	ldrb	r3, [r3, #0]
 801d58c:	b29b      	uxth	r3, r3
 801d58e:	187a      	adds	r2, r7, r1
 801d590:	8811      	ldrh	r1, [r2, #0]
 801d592:	4a09      	ldr	r2, [pc, #36]	; (801d5b8 <read_data+0x64>)
 801d594:	9202      	str	r2, [sp, #8]
 801d596:	9301      	str	r3, [sp, #4]
 801d598:	687b      	ldr	r3, [r7, #4]
 801d59a:	9300      	str	r3, [sp, #0]
 801d59c:	2301      	movs	r3, #1
 801d59e:	0022      	movs	r2, r4
 801d5a0:	f7ea fe74 	bl	800828c <HAL_I2C_Mem_Read>
 801d5a4:	1e03      	subs	r3, r0, #0
 801d5a6:	d101      	bne.n	801d5ac <read_data+0x58>
		return 0;
 801d5a8:	2300      	movs	r3, #0
 801d5aa:	e000      	b.n	801d5ae <read_data+0x5a>
	else
		return 1;
 801d5ac:	2301      	movs	r3, #1

}
 801d5ae:	0018      	movs	r0, r3
 801d5b0:	46bd      	mov	sp, r7
 801d5b2:	b006      	add	sp, #24
 801d5b4:	bdb0      	pop	{r4, r5, r7, pc}
 801d5b6:	46c0      	nop			; (mov r8, r8)
 801d5b8:	00001388 	.word	0x00001388

0801d5bc <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 801d5bc:	b580      	push	{r7, lr}
 801d5be:	b082      	sub	sp, #8
 801d5c0:	af00      	add	r7, sp, #0
 801d5c2:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 801d5c4:	687a      	ldr	r2, [r7, #4]
 801d5c6:	687b      	ldr	r3, [r7, #4]
 801d5c8:	2188      	movs	r1, #136	; 0x88
 801d5ca:	0018      	movs	r0, r3
 801d5cc:	f7ff ff8a 	bl	801d4e4 <read_register16>
 801d5d0:	1e03      	subs	r3, r0, #0
 801d5d2:	d100      	bne.n	801d5d6 <read_calibration_data+0x1a>
 801d5d4:	e06d      	b.n	801d6b2 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 801d5d6:	687b      	ldr	r3, [r7, #4]
 801d5d8:	1c9a      	adds	r2, r3, #2
 801d5da:	687b      	ldr	r3, [r7, #4]
 801d5dc:	218a      	movs	r1, #138	; 0x8a
 801d5de:	0018      	movs	r0, r3
 801d5e0:	f7ff ff80 	bl	801d4e4 <read_register16>
 801d5e4:	1e03      	subs	r3, r0, #0
 801d5e6:	d100      	bne.n	801d5ea <read_calibration_data+0x2e>
 801d5e8:	e063      	b.n	801d6b2 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 801d5ea:	687b      	ldr	r3, [r7, #4]
 801d5ec:	1d1a      	adds	r2, r3, #4
 801d5ee:	687b      	ldr	r3, [r7, #4]
 801d5f0:	218c      	movs	r1, #140	; 0x8c
 801d5f2:	0018      	movs	r0, r3
 801d5f4:	f7ff ff76 	bl	801d4e4 <read_register16>
 801d5f8:	1e03      	subs	r3, r0, #0
 801d5fa:	d05a      	beq.n	801d6b2 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 801d5fc:	687b      	ldr	r3, [r7, #4]
 801d5fe:	1d9a      	adds	r2, r3, #6
 801d600:	687b      	ldr	r3, [r7, #4]
 801d602:	218e      	movs	r1, #142	; 0x8e
 801d604:	0018      	movs	r0, r3
 801d606:	f7ff ff6d 	bl	801d4e4 <read_register16>
 801d60a:	1e03      	subs	r3, r0, #0
 801d60c:	d051      	beq.n	801d6b2 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 801d60e:	687b      	ldr	r3, [r7, #4]
 801d610:	3308      	adds	r3, #8
 801d612:	001a      	movs	r2, r3
 801d614:	687b      	ldr	r3, [r7, #4]
 801d616:	2190      	movs	r1, #144	; 0x90
 801d618:	0018      	movs	r0, r3
 801d61a:	f7ff ff63 	bl	801d4e4 <read_register16>
 801d61e:	1e03      	subs	r3, r0, #0
 801d620:	d047      	beq.n	801d6b2 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 801d622:	687b      	ldr	r3, [r7, #4]
 801d624:	330a      	adds	r3, #10
 801d626:	001a      	movs	r2, r3
 801d628:	687b      	ldr	r3, [r7, #4]
 801d62a:	2192      	movs	r1, #146	; 0x92
 801d62c:	0018      	movs	r0, r3
 801d62e:	f7ff ff59 	bl	801d4e4 <read_register16>
 801d632:	1e03      	subs	r3, r0, #0
 801d634:	d03d      	beq.n	801d6b2 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 801d636:	687b      	ldr	r3, [r7, #4]
 801d638:	330c      	adds	r3, #12
 801d63a:	001a      	movs	r2, r3
 801d63c:	687b      	ldr	r3, [r7, #4]
 801d63e:	2194      	movs	r1, #148	; 0x94
 801d640:	0018      	movs	r0, r3
 801d642:	f7ff ff4f 	bl	801d4e4 <read_register16>
 801d646:	1e03      	subs	r3, r0, #0
 801d648:	d033      	beq.n	801d6b2 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 801d64a:	687b      	ldr	r3, [r7, #4]
 801d64c:	330e      	adds	r3, #14
 801d64e:	001a      	movs	r2, r3
 801d650:	687b      	ldr	r3, [r7, #4]
 801d652:	2196      	movs	r1, #150	; 0x96
 801d654:	0018      	movs	r0, r3
 801d656:	f7ff ff45 	bl	801d4e4 <read_register16>
 801d65a:	1e03      	subs	r3, r0, #0
 801d65c:	d029      	beq.n	801d6b2 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 801d65e:	687b      	ldr	r3, [r7, #4]
 801d660:	3310      	adds	r3, #16
 801d662:	001a      	movs	r2, r3
 801d664:	687b      	ldr	r3, [r7, #4]
 801d666:	2198      	movs	r1, #152	; 0x98
 801d668:	0018      	movs	r0, r3
 801d66a:	f7ff ff3b 	bl	801d4e4 <read_register16>
 801d66e:	1e03      	subs	r3, r0, #0
 801d670:	d01f      	beq.n	801d6b2 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 801d672:	687b      	ldr	r3, [r7, #4]
 801d674:	3312      	adds	r3, #18
 801d676:	001a      	movs	r2, r3
 801d678:	687b      	ldr	r3, [r7, #4]
 801d67a:	219a      	movs	r1, #154	; 0x9a
 801d67c:	0018      	movs	r0, r3
 801d67e:	f7ff ff31 	bl	801d4e4 <read_register16>
 801d682:	1e03      	subs	r3, r0, #0
 801d684:	d015      	beq.n	801d6b2 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 801d686:	687b      	ldr	r3, [r7, #4]
 801d688:	3314      	adds	r3, #20
 801d68a:	001a      	movs	r2, r3
 801d68c:	687b      	ldr	r3, [r7, #4]
 801d68e:	219c      	movs	r1, #156	; 0x9c
 801d690:	0018      	movs	r0, r3
 801d692:	f7ff ff27 	bl	801d4e4 <read_register16>
 801d696:	1e03      	subs	r3, r0, #0
 801d698:	d00b      	beq.n	801d6b2 <read_calibration_data+0xf6>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 801d69a:	687b      	ldr	r3, [r7, #4]
 801d69c:	3316      	adds	r3, #22
 801d69e:	001a      	movs	r2, r3
			&& read_register16(dev, 0x9e,
 801d6a0:	687b      	ldr	r3, [r7, #4]
 801d6a2:	219e      	movs	r1, #158	; 0x9e
 801d6a4:	0018      	movs	r0, r3
 801d6a6:	f7ff ff1d 	bl	801d4e4 <read_register16>
 801d6aa:	1e03      	subs	r3, r0, #0
 801d6ac:	d001      	beq.n	801d6b2 <read_calibration_data+0xf6>

		return true;
 801d6ae:	2301      	movs	r3, #1
 801d6b0:	e000      	b.n	801d6b4 <read_calibration_data+0xf8>
	}

	return false;
 801d6b2:	2300      	movs	r3, #0
}
 801d6b4:	0018      	movs	r0, r3
 801d6b6:	46bd      	mov	sp, r7
 801d6b8:	b002      	add	sp, #8
 801d6ba:	bd80      	pop	{r7, pc}

0801d6bc <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 801d6bc:	b5b0      	push	{r4, r5, r7, lr}
 801d6be:	b084      	sub	sp, #16
 801d6c0:	af00      	add	r7, sp, #0
 801d6c2:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 801d6c4:	687b      	ldr	r3, [r7, #4]
 801d6c6:	3318      	adds	r3, #24
 801d6c8:	001a      	movs	r2, r3
 801d6ca:	6878      	ldr	r0, [r7, #4]
 801d6cc:	2301      	movs	r3, #1
 801d6ce:	21a1      	movs	r1, #161	; 0xa1
 801d6d0:	f7ff ff40 	bl	801d554 <read_data>
 801d6d4:	1e03      	subs	r3, r0, #0
 801d6d6:	d14b      	bne.n	801d770 <read_hum_calibration_data+0xb4>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 801d6d8:	687b      	ldr	r3, [r7, #4]
 801d6da:	331a      	adds	r3, #26
 801d6dc:	001a      	movs	r2, r3
 801d6de:	687b      	ldr	r3, [r7, #4]
 801d6e0:	21e1      	movs	r1, #225	; 0xe1
 801d6e2:	0018      	movs	r0, r3
 801d6e4:	f7ff fefe 	bl	801d4e4 <read_register16>
 801d6e8:	1e03      	subs	r3, r0, #0
 801d6ea:	d041      	beq.n	801d770 <read_hum_calibration_data+0xb4>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 801d6ec:	687b      	ldr	r3, [r7, #4]
 801d6ee:	331c      	adds	r3, #28
 801d6f0:	001a      	movs	r2, r3
 801d6f2:	6878      	ldr	r0, [r7, #4]
 801d6f4:	2301      	movs	r3, #1
 801d6f6:	21e3      	movs	r1, #227	; 0xe3
 801d6f8:	f7ff ff2c 	bl	801d554 <read_data>
 801d6fc:	1e03      	subs	r3, r0, #0
 801d6fe:	d137      	bne.n	801d770 <read_hum_calibration_data+0xb4>
			&& read_register16(dev, 0xe4, &h4)
 801d700:	240e      	movs	r4, #14
 801d702:	193a      	adds	r2, r7, r4
 801d704:	687b      	ldr	r3, [r7, #4]
 801d706:	21e4      	movs	r1, #228	; 0xe4
 801d708:	0018      	movs	r0, r3
 801d70a:	f7ff feeb 	bl	801d4e4 <read_register16>
 801d70e:	1e03      	subs	r3, r0, #0
 801d710:	d02e      	beq.n	801d770 <read_hum_calibration_data+0xb4>
			&& read_register16(dev, 0xe5, &h5)
 801d712:	250c      	movs	r5, #12
 801d714:	197a      	adds	r2, r7, r5
 801d716:	687b      	ldr	r3, [r7, #4]
 801d718:	21e5      	movs	r1, #229	; 0xe5
 801d71a:	0018      	movs	r0, r3
 801d71c:	f7ff fee2 	bl	801d4e4 <read_register16>
 801d720:	1e03      	subs	r3, r0, #0
 801d722:	d025      	beq.n	801d770 <read_hum_calibration_data+0xb4>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 801d724:	687b      	ldr	r3, [r7, #4]
 801d726:	3322      	adds	r3, #34	; 0x22
 801d728:	001a      	movs	r2, r3
 801d72a:	6878      	ldr	r0, [r7, #4]
 801d72c:	2301      	movs	r3, #1
 801d72e:	21e7      	movs	r1, #231	; 0xe7
 801d730:	f7ff ff10 	bl	801d554 <read_data>
 801d734:	1e03      	subs	r3, r0, #0
 801d736:	d11b      	bne.n	801d770 <read_hum_calibration_data+0xb4>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 801d738:	193b      	adds	r3, r7, r4
 801d73a:	881b      	ldrh	r3, [r3, #0]
 801d73c:	011b      	lsls	r3, r3, #4
 801d73e:	b21a      	sxth	r2, r3
 801d740:	23ff      	movs	r3, #255	; 0xff
 801d742:	011b      	lsls	r3, r3, #4
 801d744:	4013      	ands	r3, r2
 801d746:	b21a      	sxth	r2, r3
 801d748:	193b      	adds	r3, r7, r4
 801d74a:	881b      	ldrh	r3, [r3, #0]
 801d74c:	121b      	asrs	r3, r3, #8
 801d74e:	b21b      	sxth	r3, r3
 801d750:	210f      	movs	r1, #15
 801d752:	400b      	ands	r3, r1
 801d754:	b21b      	sxth	r3, r3
 801d756:	4313      	orrs	r3, r2
 801d758:	b21a      	sxth	r2, r3
 801d75a:	687b      	ldr	r3, [r7, #4]
 801d75c:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 801d75e:	197b      	adds	r3, r7, r5
 801d760:	881b      	ldrh	r3, [r3, #0]
 801d762:	091b      	lsrs	r3, r3, #4
 801d764:	b29b      	uxth	r3, r3
 801d766:	b21a      	sxth	r2, r3
 801d768:	687b      	ldr	r3, [r7, #4]
 801d76a:	841a      	strh	r2, [r3, #32]

		return true;
 801d76c:	2301      	movs	r3, #1
 801d76e:	e000      	b.n	801d772 <read_hum_calibration_data+0xb6>
	}

	return false;
 801d770:	2300      	movs	r3, #0
}
 801d772:	0018      	movs	r0, r3
 801d774:	46bd      	mov	sp, r7
 801d776:	b004      	add	sp, #16
 801d778:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801d77c <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 801d77c:	b580      	push	{r7, lr}
 801d77e:	b088      	sub	sp, #32
 801d780:	af04      	add	r7, sp, #16
 801d782:	6078      	str	r0, [r7, #4]
 801d784:	0008      	movs	r0, r1
 801d786:	0011      	movs	r1, r2
 801d788:	1cfb      	adds	r3, r7, #3
 801d78a:	1c02      	adds	r2, r0, #0
 801d78c:	701a      	strb	r2, [r3, #0]
 801d78e:	1cbb      	adds	r3, r7, #2
 801d790:	1c0a      	adds	r2, r1, #0
 801d792:	701a      	strb	r2, [r3, #0]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 801d794:	687b      	ldr	r3, [r7, #4]
 801d796:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801d798:	210e      	movs	r1, #14
 801d79a:	187a      	adds	r2, r7, r1
 801d79c:	18db      	adds	r3, r3, r3
 801d79e:	8013      	strh	r3, [r2, #0]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 801d7a0:	687b      	ldr	r3, [r7, #4]
 801d7a2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 801d7a4:	1cfb      	adds	r3, r7, #3
 801d7a6:	781b      	ldrb	r3, [r3, #0]
 801d7a8:	b29a      	uxth	r2, r3
 801d7aa:	187b      	adds	r3, r7, r1
 801d7ac:	8819      	ldrh	r1, [r3, #0]
 801d7ae:	4b09      	ldr	r3, [pc, #36]	; (801d7d4 <write_register8+0x58>)
 801d7b0:	9302      	str	r3, [sp, #8]
 801d7b2:	2301      	movs	r3, #1
 801d7b4:	9301      	str	r3, [sp, #4]
 801d7b6:	1cbb      	adds	r3, r7, #2
 801d7b8:	9300      	str	r3, [sp, #0]
 801d7ba:	2301      	movs	r3, #1
 801d7bc:	f7ea fc38 	bl	8008030 <HAL_I2C_Mem_Write>
 801d7c0:	1e03      	subs	r3, r0, #0
 801d7c2:	d101      	bne.n	801d7c8 <write_register8+0x4c>
		return false;
 801d7c4:	2300      	movs	r3, #0
 801d7c6:	e000      	b.n	801d7ca <write_register8+0x4e>
	else
		return true;
 801d7c8:	2301      	movs	r3, #1
}
 801d7ca:	0018      	movs	r0, r3
 801d7cc:	46bd      	mov	sp, r7
 801d7ce:	b004      	add	sp, #16
 801d7d0:	bd80      	pop	{r7, pc}
 801d7d2:	46c0      	nop			; (mov r8, r8)
 801d7d4:	00002710 	.word	0x00002710

0801d7d8 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 801d7d8:	b590      	push	{r4, r7, lr}
 801d7da:	b085      	sub	sp, #20
 801d7dc:	af00      	add	r7, sp, #0
 801d7de:	6078      	str	r0, [r7, #4]
 801d7e0:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 801d7e2:	687b      	ldr	r3, [r7, #4]
 801d7e4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801d7e6:	2b76      	cmp	r3, #118	; 0x76
 801d7e8:	d005      	beq.n	801d7f6 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 801d7ea:	687b      	ldr	r3, [r7, #4]
 801d7ec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801d7ee:	2b77      	cmp	r3, #119	; 0x77
 801d7f0:	d001      	beq.n	801d7f6 <bmp280_init+0x1e>

		return false;
 801d7f2:	2300      	movs	r3, #0
 801d7f4:	e0a3      	b.n	801d93e <bmp280_init+0x166>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 801d7f6:	687b      	ldr	r3, [r7, #4]
 801d7f8:	3332      	adds	r3, #50	; 0x32
 801d7fa:	001a      	movs	r2, r3
 801d7fc:	6878      	ldr	r0, [r7, #4]
 801d7fe:	2301      	movs	r3, #1
 801d800:	21d0      	movs	r1, #208	; 0xd0
 801d802:	f7ff fea7 	bl	801d554 <read_data>
 801d806:	1e03      	subs	r3, r0, #0
 801d808:	d001      	beq.n	801d80e <bmp280_init+0x36>
		return false;
 801d80a:	2300      	movs	r3, #0
 801d80c:	e097      	b.n	801d93e <bmp280_init+0x166>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 801d80e:	687b      	ldr	r3, [r7, #4]
 801d810:	2232      	movs	r2, #50	; 0x32
 801d812:	5c9b      	ldrb	r3, [r3, r2]
 801d814:	2b58      	cmp	r3, #88	; 0x58
 801d816:	d006      	beq.n	801d826 <bmp280_init+0x4e>
 801d818:	687b      	ldr	r3, [r7, #4]
 801d81a:	2232      	movs	r2, #50	; 0x32
 801d81c:	5c9b      	ldrb	r3, [r3, r2]
 801d81e:	2b60      	cmp	r3, #96	; 0x60
 801d820:	d001      	beq.n	801d826 <bmp280_init+0x4e>

		return false;
 801d822:	2300      	movs	r3, #0
 801d824:	e08b      	b.n	801d93e <bmp280_init+0x166>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 801d826:	687b      	ldr	r3, [r7, #4]
 801d828:	22b6      	movs	r2, #182	; 0xb6
 801d82a:	21e0      	movs	r1, #224	; 0xe0
 801d82c:	0018      	movs	r0, r3
 801d82e:	f7ff ffa5 	bl	801d77c <write_register8>
 801d832:	1e03      	subs	r3, r0, #0
 801d834:	d001      	beq.n	801d83a <bmp280_init+0x62>
		return false;
 801d836:	2300      	movs	r3, #0
 801d838:	e081      	b.n	801d93e <bmp280_init+0x166>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 801d83a:	240c      	movs	r4, #12
 801d83c:	193a      	adds	r2, r7, r4
 801d83e:	6878      	ldr	r0, [r7, #4]
 801d840:	2301      	movs	r3, #1
 801d842:	21f3      	movs	r1, #243	; 0xf3
 801d844:	f7ff fe86 	bl	801d554 <read_data>
 801d848:	1e03      	subs	r3, r0, #0
 801d84a:	d1f6      	bne.n	801d83a <bmp280_init+0x62>
				&& (status & 1) == 0)
 801d84c:	193b      	adds	r3, r7, r4
 801d84e:	781b      	ldrb	r3, [r3, #0]
 801d850:	001a      	movs	r2, r3
 801d852:	2301      	movs	r3, #1
 801d854:	4013      	ands	r3, r2
 801d856:	d1f0      	bne.n	801d83a <bmp280_init+0x62>
			break;
	}

	if (!read_calibration_data(dev)) {
 801d858:	687b      	ldr	r3, [r7, #4]
 801d85a:	0018      	movs	r0, r3
 801d85c:	f7ff feae 	bl	801d5bc <read_calibration_data>
 801d860:	0003      	movs	r3, r0
 801d862:	001a      	movs	r2, r3
 801d864:	2301      	movs	r3, #1
 801d866:	4053      	eors	r3, r2
 801d868:	b2db      	uxtb	r3, r3
 801d86a:	2b00      	cmp	r3, #0
 801d86c:	d100      	bne.n	801d870 <bmp280_init+0x98>
 801d86e:	e001      	b.n	801d874 <bmp280_init+0x9c>
		return false;
 801d870:	2300      	movs	r3, #0
 801d872:	e064      	b.n	801d93e <bmp280_init+0x166>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 801d874:	687b      	ldr	r3, [r7, #4]
 801d876:	2232      	movs	r2, #50	; 0x32
 801d878:	5c9b      	ldrb	r3, [r3, r2]
 801d87a:	2b60      	cmp	r3, #96	; 0x60
 801d87c:	d10c      	bne.n	801d898 <bmp280_init+0xc0>
 801d87e:	687b      	ldr	r3, [r7, #4]
 801d880:	0018      	movs	r0, r3
 801d882:	f7ff ff1b 	bl	801d6bc <read_hum_calibration_data>
 801d886:	0003      	movs	r3, r0
 801d888:	001a      	movs	r2, r3
 801d88a:	2301      	movs	r3, #1
 801d88c:	4053      	eors	r3, r2
 801d88e:	b2db      	uxtb	r3, r3
 801d890:	2b00      	cmp	r3, #0
 801d892:	d001      	beq.n	801d898 <bmp280_init+0xc0>
		return false;
 801d894:	2300      	movs	r3, #0
 801d896:	e052      	b.n	801d93e <bmp280_init+0x166>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 801d898:	683b      	ldr	r3, [r7, #0]
 801d89a:	795b      	ldrb	r3, [r3, #5]
 801d89c:	015b      	lsls	r3, r3, #5
 801d89e:	b25a      	sxtb	r2, r3
 801d8a0:	683b      	ldr	r3, [r7, #0]
 801d8a2:	785b      	ldrb	r3, [r3, #1]
 801d8a4:	009b      	lsls	r3, r3, #2
 801d8a6:	b25b      	sxtb	r3, r3
 801d8a8:	4313      	orrs	r3, r2
 801d8aa:	b25a      	sxtb	r2, r3
 801d8ac:	210f      	movs	r1, #15
 801d8ae:	187b      	adds	r3, r7, r1
 801d8b0:	701a      	strb	r2, [r3, #0]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 801d8b2:	187b      	adds	r3, r7, r1
 801d8b4:	781a      	ldrb	r2, [r3, #0]
 801d8b6:	687b      	ldr	r3, [r7, #4]
 801d8b8:	21f5      	movs	r1, #245	; 0xf5
 801d8ba:	0018      	movs	r0, r3
 801d8bc:	f7ff ff5e 	bl	801d77c <write_register8>
 801d8c0:	1e03      	subs	r3, r0, #0
 801d8c2:	d001      	beq.n	801d8c8 <bmp280_init+0xf0>
		return false;
 801d8c4:	2300      	movs	r3, #0
 801d8c6:	e03a      	b.n	801d93e <bmp280_init+0x166>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 801d8c8:	683b      	ldr	r3, [r7, #0]
 801d8ca:	781b      	ldrb	r3, [r3, #0]
 801d8cc:	2b01      	cmp	r3, #1
 801d8ce:	d102      	bne.n	801d8d6 <bmp280_init+0xfe>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 801d8d0:	683b      	ldr	r3, [r7, #0]
 801d8d2:	2200      	movs	r2, #0
 801d8d4:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 801d8d6:	683b      	ldr	r3, [r7, #0]
 801d8d8:	78db      	ldrb	r3, [r3, #3]
 801d8da:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 801d8dc:	b25a      	sxtb	r2, r3
 801d8de:	683b      	ldr	r3, [r7, #0]
 801d8e0:	789b      	ldrb	r3, [r3, #2]
 801d8e2:	009b      	lsls	r3, r3, #2
 801d8e4:	b25b      	sxtb	r3, r3
 801d8e6:	4313      	orrs	r3, r2
 801d8e8:	b25a      	sxtb	r2, r3
 801d8ea:	683b      	ldr	r3, [r7, #0]
 801d8ec:	781b      	ldrb	r3, [r3, #0]
 801d8ee:	b25b      	sxtb	r3, r3
 801d8f0:	4313      	orrs	r3, r2
 801d8f2:	b25a      	sxtb	r2, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 801d8f4:	230e      	movs	r3, #14
 801d8f6:	18fb      	adds	r3, r7, r3
 801d8f8:	701a      	strb	r2, [r3, #0]

	if (dev->id == BME280_CHIP_ID) {
 801d8fa:	687b      	ldr	r3, [r7, #4]
 801d8fc:	2232      	movs	r2, #50	; 0x32
 801d8fe:	5c9b      	ldrb	r3, [r3, r2]
 801d900:	2b60      	cmp	r3, #96	; 0x60
 801d902:	d10f      	bne.n	801d924 <bmp280_init+0x14c>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 801d904:	210d      	movs	r1, #13
 801d906:	187b      	adds	r3, r7, r1
 801d908:	683a      	ldr	r2, [r7, #0]
 801d90a:	7912      	ldrb	r2, [r2, #4]
 801d90c:	701a      	strb	r2, [r3, #0]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 801d90e:	187b      	adds	r3, r7, r1
 801d910:	781a      	ldrb	r2, [r3, #0]
 801d912:	687b      	ldr	r3, [r7, #4]
 801d914:	21f2      	movs	r1, #242	; 0xf2
 801d916:	0018      	movs	r0, r3
 801d918:	f7ff ff30 	bl	801d77c <write_register8>
 801d91c:	1e03      	subs	r3, r0, #0
 801d91e:	d001      	beq.n	801d924 <bmp280_init+0x14c>
			return false;
 801d920:	2300      	movs	r3, #0
 801d922:	e00c      	b.n	801d93e <bmp280_init+0x166>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 801d924:	230e      	movs	r3, #14
 801d926:	18fb      	adds	r3, r7, r3
 801d928:	781a      	ldrb	r2, [r3, #0]
 801d92a:	687b      	ldr	r3, [r7, #4]
 801d92c:	21f4      	movs	r1, #244	; 0xf4
 801d92e:	0018      	movs	r0, r3
 801d930:	f7ff ff24 	bl	801d77c <write_register8>
 801d934:	1e03      	subs	r3, r0, #0
 801d936:	d001      	beq.n	801d93c <bmp280_init+0x164>
		return false;
 801d938:	2300      	movs	r3, #0
 801d93a:	e000      	b.n	801d93e <bmp280_init+0x166>
	}

	return true;
 801d93c:	2301      	movs	r3, #1
}
 801d93e:	0018      	movs	r0, r3
 801d940:	46bd      	mov	sp, r7
 801d942:	b005      	add	sp, #20
 801d944:	bd90      	pop	{r4, r7, pc}

0801d946 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 801d946:	b580      	push	{r7, lr}
 801d948:	b086      	sub	sp, #24
 801d94a:	af00      	add	r7, sp, #0
 801d94c:	60f8      	str	r0, [r7, #12]
 801d94e:	60b9      	str	r1, [r7, #8]
 801d950:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 801d952:	68bb      	ldr	r3, [r7, #8]
 801d954:	10da      	asrs	r2, r3, #3
 801d956:	68fb      	ldr	r3, [r7, #12]
 801d958:	881b      	ldrh	r3, [r3, #0]
 801d95a:	005b      	lsls	r3, r3, #1
 801d95c:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 801d95e:	68fa      	ldr	r2, [r7, #12]
 801d960:	2102      	movs	r1, #2
 801d962:	5e52      	ldrsh	r2, [r2, r1]
 801d964:	4353      	muls	r3, r2
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 801d966:	12db      	asrs	r3, r3, #11
 801d968:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 801d96a:	68bb      	ldr	r3, [r7, #8]
 801d96c:	111b      	asrs	r3, r3, #4
 801d96e:	68fa      	ldr	r2, [r7, #12]
 801d970:	8812      	ldrh	r2, [r2, #0]
 801d972:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 801d974:	68ba      	ldr	r2, [r7, #8]
 801d976:	1112      	asrs	r2, r2, #4
 801d978:	68f9      	ldr	r1, [r7, #12]
 801d97a:	8809      	ldrh	r1, [r1, #0]
 801d97c:	1a52      	subs	r2, r2, r1
 801d97e:	4353      	muls	r3, r2
 801d980:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 801d982:	68fa      	ldr	r2, [r7, #12]
 801d984:	2104      	movs	r1, #4
 801d986:	5e52      	ldrsh	r2, [r2, r1]
 801d988:	4353      	muls	r3, r2
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 801d98a:	139b      	asrs	r3, r3, #14
 801d98c:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 801d98e:	697a      	ldr	r2, [r7, #20]
 801d990:	693b      	ldr	r3, [r7, #16]
 801d992:	18d2      	adds	r2, r2, r3
 801d994:	687b      	ldr	r3, [r7, #4]
 801d996:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 801d998:	687b      	ldr	r3, [r7, #4]
 801d99a:	681a      	ldr	r2, [r3, #0]
 801d99c:	0013      	movs	r3, r2
 801d99e:	009b      	lsls	r3, r3, #2
 801d9a0:	189b      	adds	r3, r3, r2
 801d9a2:	3380      	adds	r3, #128	; 0x80
 801d9a4:	121b      	asrs	r3, r3, #8
}
 801d9a6:	0018      	movs	r0, r3
 801d9a8:	46bd      	mov	sp, r7
 801d9aa:	b006      	add	sp, #24
 801d9ac:	bd80      	pop	{r7, pc}
	...

0801d9b0 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 801d9b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d9b2:	b0af      	sub	sp, #188	; 0xbc
 801d9b4:	af00      	add	r7, sp, #0
 801d9b6:	239c      	movs	r3, #156	; 0x9c
 801d9b8:	18fe      	adds	r6, r7, r3
 801d9ba:	6030      	str	r0, [r6, #0]
 801d9bc:	2098      	movs	r0, #152	; 0x98
 801d9be:	1838      	adds	r0, r7, r0
 801d9c0:	6001      	str	r1, [r0, #0]
 801d9c2:	2194      	movs	r1, #148	; 0x94
 801d9c4:	1878      	adds	r0, r7, r1
 801d9c6:	6002      	str	r2, [r0, #0]
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 801d9c8:	187a      	adds	r2, r7, r1
 801d9ca:	6813      	ldr	r3, [r2, #0]
 801d9cc:	65bb      	str	r3, [r7, #88]	; 0x58
 801d9ce:	17db      	asrs	r3, r3, #31
 801d9d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 801d9d2:	4ace      	ldr	r2, [pc, #824]	; (801dd0c <compensate_pressure+0x35c>)
 801d9d4:	2301      	movs	r3, #1
 801d9d6:	425b      	negs	r3, r3
 801d9d8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801d9da:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 801d9dc:	1880      	adds	r0, r0, r2
 801d9de:	4159      	adcs	r1, r3
 801d9e0:	0002      	movs	r2, r0
 801d9e2:	000b      	movs	r3, r1
 801d9e4:	26b0      	movs	r6, #176	; 0xb0
 801d9e6:	19b9      	adds	r1, r7, r6
 801d9e8:	600a      	str	r2, [r1, #0]
 801d9ea:	604b      	str	r3, [r1, #4]
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 801d9ec:	19ba      	adds	r2, r7, r6
 801d9ee:	6853      	ldr	r3, [r2, #4]
 801d9f0:	6812      	ldr	r2, [r2, #0]
 801d9f2:	19b9      	adds	r1, r7, r6
 801d9f4:	6808      	ldr	r0, [r1, #0]
 801d9f6:	6849      	ldr	r1, [r1, #4]
 801d9f8:	f7e2 fd86 	bl	8000508 <__aeabi_lmul>
 801d9fc:	0002      	movs	r2, r0
 801d9fe:	000b      	movs	r3, r1
 801da00:	0010      	movs	r0, r2
 801da02:	0019      	movs	r1, r3
 801da04:	239c      	movs	r3, #156	; 0x9c
 801da06:	18fa      	adds	r2, r7, r3
 801da08:	6813      	ldr	r3, [r2, #0]
 801da0a:	2210      	movs	r2, #16
 801da0c:	5e9b      	ldrsh	r3, [r3, r2]
 801da0e:	653b      	str	r3, [r7, #80]	; 0x50
 801da10:	17db      	asrs	r3, r3, #31
 801da12:	657b      	str	r3, [r7, #84]	; 0x54
 801da14:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801da16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801da18:	f7e2 fd76 	bl	8000508 <__aeabi_lmul>
 801da1c:	0002      	movs	r2, r0
 801da1e:	000b      	movs	r3, r1
 801da20:	21a8      	movs	r1, #168	; 0xa8
 801da22:	1878      	adds	r0, r7, r1
 801da24:	6002      	str	r2, [r0, #0]
 801da26:	6043      	str	r3, [r0, #4]
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 801da28:	239c      	movs	r3, #156	; 0x9c
 801da2a:	18fa      	adds	r2, r7, r3
 801da2c:	6813      	ldr	r3, [r2, #0]
 801da2e:	220e      	movs	r2, #14
 801da30:	5e9b      	ldrsh	r3, [r3, r2]
 801da32:	64bb      	str	r3, [r7, #72]	; 0x48
 801da34:	17db      	asrs	r3, r3, #31
 801da36:	64fb      	str	r3, [r7, #76]	; 0x4c
 801da38:	19ba      	adds	r2, r7, r6
 801da3a:	6853      	ldr	r3, [r2, #4]
 801da3c:	6812      	ldr	r2, [r2, #0]
 801da3e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801da40:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801da42:	f7e2 fd61 	bl	8000508 <__aeabi_lmul>
 801da46:	0002      	movs	r2, r0
 801da48:	000b      	movs	r3, r1
 801da4a:	0bd1      	lsrs	r1, r2, #15
 801da4c:	045d      	lsls	r5, r3, #17
 801da4e:	430d      	orrs	r5, r1
 801da50:	0454      	lsls	r4, r2, #17
 801da52:	21a8      	movs	r1, #168	; 0xa8
 801da54:	187a      	adds	r2, r7, r1
 801da56:	6853      	ldr	r3, [r2, #4]
 801da58:	6812      	ldr	r2, [r2, #0]
 801da5a:	1912      	adds	r2, r2, r4
 801da5c:	416b      	adcs	r3, r5
 801da5e:	1878      	adds	r0, r7, r1
 801da60:	6002      	str	r2, [r0, #0]
 801da62:	6043      	str	r3, [r0, #4]
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 801da64:	259c      	movs	r5, #156	; 0x9c
 801da66:	197b      	adds	r3, r7, r5
 801da68:	681b      	ldr	r3, [r3, #0]
 801da6a:	220c      	movs	r2, #12
 801da6c:	5e9b      	ldrsh	r3, [r3, r2]
 801da6e:	643b      	str	r3, [r7, #64]	; 0x40
 801da70:	17db      	asrs	r3, r3, #31
 801da72:	647b      	str	r3, [r7, #68]	; 0x44
 801da74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801da76:	00db      	lsls	r3, r3, #3
 801da78:	63fb      	str	r3, [r7, #60]	; 0x3c
 801da7a:	2300      	movs	r3, #0
 801da7c:	63bb      	str	r3, [r7, #56]	; 0x38
 801da7e:	000c      	movs	r4, r1
 801da80:	187b      	adds	r3, r7, r1
 801da82:	681a      	ldr	r2, [r3, #0]
 801da84:	685b      	ldr	r3, [r3, #4]
 801da86:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801da88:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801da8a:	1812      	adds	r2, r2, r0
 801da8c:	414b      	adcs	r3, r1
 801da8e:	1939      	adds	r1, r7, r4
 801da90:	600a      	str	r2, [r1, #0]
 801da92:	604b      	str	r3, [r1, #4]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 801da94:	0034      	movs	r4, r6
 801da96:	193b      	adds	r3, r7, r4
 801da98:	681a      	ldr	r2, [r3, #0]
 801da9a:	685b      	ldr	r3, [r3, #4]
 801da9c:	1939      	adds	r1, r7, r4
 801da9e:	6808      	ldr	r0, [r1, #0]
 801daa0:	6849      	ldr	r1, [r1, #4]
 801daa2:	f7e2 fd31 	bl	8000508 <__aeabi_lmul>
 801daa6:	0002      	movs	r2, r0
 801daa8:	000b      	movs	r3, r1
 801daaa:	0010      	movs	r0, r2
 801daac:	0019      	movs	r1, r3
 801daae:	197b      	adds	r3, r7, r5
 801dab0:	681b      	ldr	r3, [r3, #0]
 801dab2:	220a      	movs	r2, #10
 801dab4:	5e9b      	ldrsh	r3, [r3, r2]
 801dab6:	633b      	str	r3, [r7, #48]	; 0x30
 801dab8:	17db      	asrs	r3, r3, #31
 801daba:	637b      	str	r3, [r7, #52]	; 0x34
 801dabc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801dabe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dac0:	f7e2 fd22 	bl	8000508 <__aeabi_lmul>
 801dac4:	0002      	movs	r2, r0
 801dac6:	000b      	movs	r3, r1
 801dac8:	0619      	lsls	r1, r3, #24
 801daca:	468c      	mov	ip, r1
 801dacc:	0a10      	lsrs	r0, r2, #8
 801dace:	2688      	movs	r6, #136	; 0x88
 801dad0:	19b9      	adds	r1, r7, r6
 801dad2:	6008      	str	r0, [r1, #0]
 801dad4:	19b8      	adds	r0, r7, r6
 801dad6:	6800      	ldr	r0, [r0, #0]
 801dad8:	4661      	mov	r1, ip
 801dada:	4308      	orrs	r0, r1
 801dadc:	19b9      	adds	r1, r7, r6
 801dade:	6008      	str	r0, [r1, #0]
 801dae0:	121b      	asrs	r3, r3, #8
 801dae2:	228c      	movs	r2, #140	; 0x8c
 801dae4:	18ba      	adds	r2, r7, r2
 801dae6:	6013      	str	r3, [r2, #0]
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 801dae8:	197b      	adds	r3, r7, r5
 801daea:	681b      	ldr	r3, [r3, #0]
 801daec:	2208      	movs	r2, #8
 801daee:	5e9b      	ldrsh	r3, [r3, r2]
 801daf0:	62bb      	str	r3, [r7, #40]	; 0x28
 801daf2:	17db      	asrs	r3, r3, #31
 801daf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 801daf6:	193b      	adds	r3, r7, r4
 801daf8:	681a      	ldr	r2, [r3, #0]
 801dafa:	685b      	ldr	r3, [r3, #4]
 801dafc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801dafe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801db00:	f7e2 fd02 	bl	8000508 <__aeabi_lmul>
 801db04:	0002      	movs	r2, r0
 801db06:	000b      	movs	r3, r1
 801db08:	0d11      	lsrs	r1, r2, #20
 801db0a:	468c      	mov	ip, r1
 801db0c:	0318      	lsls	r0, r3, #12
 801db0e:	2184      	movs	r1, #132	; 0x84
 801db10:	1879      	adds	r1, r7, r1
 801db12:	6008      	str	r0, [r1, #0]
 801db14:	2084      	movs	r0, #132	; 0x84
 801db16:	1839      	adds	r1, r7, r0
 801db18:	6808      	ldr	r0, [r1, #0]
 801db1a:	4661      	mov	r1, ip
 801db1c:	4308      	orrs	r0, r1
 801db1e:	2184      	movs	r1, #132	; 0x84
 801db20:	1879      	adds	r1, r7, r1
 801db22:	6008      	str	r0, [r1, #0]
 801db24:	0313      	lsls	r3, r2, #12
 801db26:	2180      	movs	r1, #128	; 0x80
 801db28:	187a      	adds	r2, r7, r1
 801db2a:	6013      	str	r3, [r2, #0]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 801db2c:	19bb      	adds	r3, r7, r6
 801db2e:	681a      	ldr	r2, [r3, #0]
 801db30:	685b      	ldr	r3, [r3, #4]
 801db32:	1879      	adds	r1, r7, r1
 801db34:	6808      	ldr	r0, [r1, #0]
 801db36:	6849      	ldr	r1, [r1, #4]
 801db38:	1812      	adds	r2, r2, r0
 801db3a:	414b      	adcs	r3, r1
 801db3c:	1939      	adds	r1, r7, r4
 801db3e:	600a      	str	r2, [r1, #0]
 801db40:	604b      	str	r3, [r1, #4]
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 801db42:	193b      	adds	r3, r7, r4
 801db44:	6818      	ldr	r0, [r3, #0]
 801db46:	6859      	ldr	r1, [r3, #4]
 801db48:	2200      	movs	r2, #0
 801db4a:	2380      	movs	r3, #128	; 0x80
 801db4c:	021b      	lsls	r3, r3, #8
 801db4e:	1880      	adds	r0, r0, r2
 801db50:	4159      	adcs	r1, r3
 801db52:	197b      	adds	r3, r7, r5
 801db54:	681b      	ldr	r3, [r3, #0]
 801db56:	88db      	ldrh	r3, [r3, #6]
 801db58:	623b      	str	r3, [r7, #32]
 801db5a:	2300      	movs	r3, #0
 801db5c:	627b      	str	r3, [r7, #36]	; 0x24
 801db5e:	6a3a      	ldr	r2, [r7, #32]
 801db60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801db62:	f7e2 fcd1 	bl	8000508 <__aeabi_lmul>
 801db66:	0002      	movs	r2, r0
 801db68:	000b      	movs	r3, r1
 801db6a:	1059      	asrs	r1, r3, #1
 801db6c:	1938      	adds	r0, r7, r4
 801db6e:	6001      	str	r1, [r0, #0]
 801db70:	17db      	asrs	r3, r3, #31
 801db72:	21b4      	movs	r1, #180	; 0xb4
 801db74:	187a      	adds	r2, r7, r1
 801db76:	6013      	str	r3, [r2, #0]

	if (var1 == 0) {
 801db78:	193b      	adds	r3, r7, r4
 801db7a:	681a      	ldr	r2, [r3, #0]
 801db7c:	187b      	adds	r3, r7, r1
 801db7e:	681b      	ldr	r3, [r3, #0]
 801db80:	431a      	orrs	r2, r3
 801db82:	d101      	bne.n	801db88 <compensate_pressure+0x1d8>
		return 0;  // avoid exception caused by division by zero
 801db84:	2300      	movs	r3, #0
 801db86:	e0bc      	b.n	801dd02 <compensate_pressure+0x352>
	}

	p = 1048576 - adc_press;
 801db88:	2398      	movs	r3, #152	; 0x98
 801db8a:	18fb      	adds	r3, r7, r3
 801db8c:	681a      	ldr	r2, [r3, #0]
 801db8e:	2380      	movs	r3, #128	; 0x80
 801db90:	035b      	lsls	r3, r3, #13
 801db92:	1a9b      	subs	r3, r3, r2
 801db94:	24a0      	movs	r4, #160	; 0xa0
 801db96:	193a      	adds	r2, r7, r4
 801db98:	6013      	str	r3, [r2, #0]
 801db9a:	17db      	asrs	r3, r3, #31
 801db9c:	25a4      	movs	r5, #164	; 0xa4
 801db9e:	197a      	adds	r2, r7, r5
 801dba0:	6013      	str	r3, [r2, #0]
	p = (((p << 31) - var2) * 3125) / var1;
 801dba2:	193b      	adds	r3, r7, r4
 801dba4:	681b      	ldr	r3, [r3, #0]
 801dba6:	105b      	asrs	r3, r3, #1
 801dba8:	61fb      	str	r3, [r7, #28]
 801dbaa:	193b      	adds	r3, r7, r4
 801dbac:	681b      	ldr	r3, [r3, #0]
 801dbae:	07db      	lsls	r3, r3, #31
 801dbb0:	61bb      	str	r3, [r7, #24]
 801dbb2:	20a8      	movs	r0, #168	; 0xa8
 801dbb4:	183a      	adds	r2, r7, r0
 801dbb6:	6853      	ldr	r3, [r2, #4]
 801dbb8:	6812      	ldr	r2, [r2, #0]
 801dbba:	69b8      	ldr	r0, [r7, #24]
 801dbbc:	69f9      	ldr	r1, [r7, #28]
 801dbbe:	1a80      	subs	r0, r0, r2
 801dbc0:	4199      	sbcs	r1, r3
 801dbc2:	4a53      	ldr	r2, [pc, #332]	; (801dd10 <compensate_pressure+0x360>)
 801dbc4:	2300      	movs	r3, #0
 801dbc6:	f7e2 fc9f 	bl	8000508 <__aeabi_lmul>
 801dbca:	0002      	movs	r2, r0
 801dbcc:	000b      	movs	r3, r1
 801dbce:	0010      	movs	r0, r2
 801dbd0:	0019      	movs	r1, r3
 801dbd2:	23b0      	movs	r3, #176	; 0xb0
 801dbd4:	18fa      	adds	r2, r7, r3
 801dbd6:	6853      	ldr	r3, [r2, #4]
 801dbd8:	6812      	ldr	r2, [r2, #0]
 801dbda:	f7e2 fc51 	bl	8000480 <__aeabi_ldivmod>
 801dbde:	0002      	movs	r2, r0
 801dbe0:	000b      	movs	r3, r1
 801dbe2:	1939      	adds	r1, r7, r4
 801dbe4:	600a      	str	r2, [r1, #0]
 801dbe6:	604b      	str	r3, [r1, #4]
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 801dbe8:	269c      	movs	r6, #156	; 0x9c
 801dbea:	19ba      	adds	r2, r7, r6
 801dbec:	6813      	ldr	r3, [r2, #0]
 801dbee:	2216      	movs	r2, #22
 801dbf0:	5e9b      	ldrsh	r3, [r3, r2]
 801dbf2:	613b      	str	r3, [r7, #16]
 801dbf4:	17db      	asrs	r3, r3, #31
 801dbf6:	617b      	str	r3, [r7, #20]
 801dbf8:	197a      	adds	r2, r7, r5
 801dbfa:	6813      	ldr	r3, [r2, #0]
 801dbfc:	04da      	lsls	r2, r3, #19
 801dbfe:	1939      	adds	r1, r7, r4
 801dc00:	680b      	ldr	r3, [r1, #0]
 801dc02:	0b5b      	lsrs	r3, r3, #13
 801dc04:	67bb      	str	r3, [r7, #120]	; 0x78
 801dc06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801dc08:	4313      	orrs	r3, r2
 801dc0a:	67bb      	str	r3, [r7, #120]	; 0x78
 801dc0c:	197a      	adds	r2, r7, r5
 801dc0e:	6813      	ldr	r3, [r2, #0]
 801dc10:	135b      	asrs	r3, r3, #13
 801dc12:	67fb      	str	r3, [r7, #124]	; 0x7c
 801dc14:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801dc16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801dc18:	6938      	ldr	r0, [r7, #16]
 801dc1a:	6979      	ldr	r1, [r7, #20]
 801dc1c:	f7e2 fc74 	bl	8000508 <__aeabi_lmul>
 801dc20:	0002      	movs	r2, r0
 801dc22:	000b      	movs	r3, r1
 801dc24:	0010      	movs	r0, r2
 801dc26:	0019      	movs	r1, r3
 801dc28:	197a      	adds	r2, r7, r5
 801dc2a:	6813      	ldr	r3, [r2, #0]
 801dc2c:	04da      	lsls	r2, r3, #19
 801dc2e:	193b      	adds	r3, r7, r4
 801dc30:	681b      	ldr	r3, [r3, #0]
 801dc32:	0b5b      	lsrs	r3, r3, #13
 801dc34:	673b      	str	r3, [r7, #112]	; 0x70
 801dc36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801dc38:	4313      	orrs	r3, r2
 801dc3a:	673b      	str	r3, [r7, #112]	; 0x70
 801dc3c:	197a      	adds	r2, r7, r5
 801dc3e:	6813      	ldr	r3, [r2, #0]
 801dc40:	135b      	asrs	r3, r3, #13
 801dc42:	677b      	str	r3, [r7, #116]	; 0x74
 801dc44:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801dc46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801dc48:	f7e2 fc5e 	bl	8000508 <__aeabi_lmul>
 801dc4c:	0002      	movs	r2, r0
 801dc4e:	000b      	movs	r3, r1
 801dc50:	01d9      	lsls	r1, r3, #7
 801dc52:	0e50      	lsrs	r0, r2, #25
 801dc54:	4301      	orrs	r1, r0
 801dc56:	25b0      	movs	r5, #176	; 0xb0
 801dc58:	1978      	adds	r0, r7, r5
 801dc5a:	6001      	str	r1, [r0, #0]
 801dc5c:	165b      	asrs	r3, r3, #25
 801dc5e:	22b4      	movs	r2, #180	; 0xb4
 801dc60:	18ba      	adds	r2, r7, r2
 801dc62:	6013      	str	r3, [r2, #0]
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 801dc64:	19ba      	adds	r2, r7, r6
 801dc66:	6813      	ldr	r3, [r2, #0]
 801dc68:	2214      	movs	r2, #20
 801dc6a:	5e9b      	ldrsh	r3, [r3, r2]
 801dc6c:	60bb      	str	r3, [r7, #8]
 801dc6e:	17db      	asrs	r3, r3, #31
 801dc70:	60fb      	str	r3, [r7, #12]
 801dc72:	193a      	adds	r2, r7, r4
 801dc74:	6853      	ldr	r3, [r2, #4]
 801dc76:	6812      	ldr	r2, [r2, #0]
 801dc78:	68b8      	ldr	r0, [r7, #8]
 801dc7a:	68f9      	ldr	r1, [r7, #12]
 801dc7c:	f7e2 fc44 	bl	8000508 <__aeabi_lmul>
 801dc80:	0002      	movs	r2, r0
 801dc82:	000b      	movs	r3, r1
 801dc84:	0359      	lsls	r1, r3, #13
 801dc86:	0cd0      	lsrs	r0, r2, #19
 801dc88:	4301      	orrs	r1, r0
 801dc8a:	20a8      	movs	r0, #168	; 0xa8
 801dc8c:	1838      	adds	r0, r7, r0
 801dc8e:	6001      	str	r1, [r0, #0]
 801dc90:	14db      	asrs	r3, r3, #19
 801dc92:	22ac      	movs	r2, #172	; 0xac
 801dc94:	18ba      	adds	r2, r7, r2
 801dc96:	6013      	str	r3, [r2, #0]

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 801dc98:	193a      	adds	r2, r7, r4
 801dc9a:	6810      	ldr	r0, [r2, #0]
 801dc9c:	6851      	ldr	r1, [r2, #4]
 801dc9e:	197a      	adds	r2, r7, r5
 801dca0:	6853      	ldr	r3, [r2, #4]
 801dca2:	6812      	ldr	r2, [r2, #0]
 801dca4:	1880      	adds	r0, r0, r2
 801dca6:	4159      	adcs	r1, r3
 801dca8:	23a8      	movs	r3, #168	; 0xa8
 801dcaa:	18fb      	adds	r3, r7, r3
 801dcac:	681a      	ldr	r2, [r3, #0]
 801dcae:	685b      	ldr	r3, [r3, #4]
 801dcb0:	1812      	adds	r2, r2, r0
 801dcb2:	414b      	adcs	r3, r1
 801dcb4:	0619      	lsls	r1, r3, #24
 801dcb6:	0a10      	lsrs	r0, r2, #8
 801dcb8:	66b8      	str	r0, [r7, #104]	; 0x68
 801dcba:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 801dcbc:	4308      	orrs	r0, r1
 801dcbe:	66b8      	str	r0, [r7, #104]	; 0x68
 801dcc0:	121b      	asrs	r3, r3, #8
 801dcc2:	66fb      	str	r3, [r7, #108]	; 0x6c
 801dcc4:	19bb      	adds	r3, r7, r6
 801dcc6:	681b      	ldr	r3, [r3, #0]
 801dcc8:	2212      	movs	r2, #18
 801dcca:	5e9b      	ldrsh	r3, [r3, r2]
 801dccc:	603b      	str	r3, [r7, #0]
 801dcce:	17db      	asrs	r3, r3, #31
 801dcd0:	607b      	str	r3, [r7, #4]
 801dcd2:	6839      	ldr	r1, [r7, #0]
 801dcd4:	687a      	ldr	r2, [r7, #4]
 801dcd6:	000b      	movs	r3, r1
 801dcd8:	0f1b      	lsrs	r3, r3, #28
 801dcda:	0010      	movs	r0, r2
 801dcdc:	0100      	lsls	r0, r0, #4
 801dcde:	6678      	str	r0, [r7, #100]	; 0x64
 801dce0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 801dce2:	4318      	orrs	r0, r3
 801dce4:	6678      	str	r0, [r7, #100]	; 0x64
 801dce6:	000b      	movs	r3, r1
 801dce8:	011b      	lsls	r3, r3, #4
 801dcea:	663b      	str	r3, [r7, #96]	; 0x60
 801dcec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801dcee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801dcf0:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801dcf2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801dcf4:	1812      	adds	r2, r2, r0
 801dcf6:	414b      	adcs	r3, r1
 801dcf8:	1939      	adds	r1, r7, r4
 801dcfa:	600a      	str	r2, [r1, #0]
 801dcfc:	604b      	str	r3, [r1, #4]
	return p;
 801dcfe:	193b      	adds	r3, r7, r4
 801dd00:	681b      	ldr	r3, [r3, #0]
}
 801dd02:	0018      	movs	r0, r3
 801dd04:	46bd      	mov	sp, r7
 801dd06:	b02f      	add	sp, #188	; 0xbc
 801dd08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dd0a:	46c0      	nop			; (mov r8, r8)
 801dd0c:	fffe0c00 	.word	0xfffe0c00
 801dd10:	00000c35 	.word	0x00000c35

0801dd14 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 801dd14:	b580      	push	{r7, lr}
 801dd16:	b086      	sub	sp, #24
 801dd18:	af00      	add	r7, sp, #0
 801dd1a:	60f8      	str	r0, [r7, #12]
 801dd1c:	60b9      	str	r1, [r7, #8]
 801dd1e:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 801dd20:	687b      	ldr	r3, [r7, #4]
 801dd22:	4a2c      	ldr	r2, [pc, #176]	; (801ddd4 <compensate_humidity+0xc0>)
 801dd24:	4694      	mov	ip, r2
 801dd26:	4463      	add	r3, ip
 801dd28:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 801dd2a:	68bb      	ldr	r3, [r7, #8]
 801dd2c:	039a      	lsls	r2, r3, #14
 801dd2e:	68fb      	ldr	r3, [r7, #12]
 801dd30:	211e      	movs	r1, #30
 801dd32:	5e5b      	ldrsh	r3, [r3, r1]
 801dd34:	051b      	lsls	r3, r3, #20
 801dd36:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 801dd38:	68fb      	ldr	r3, [r7, #12]
 801dd3a:	2120      	movs	r1, #32
 801dd3c:	5e5b      	ldrsh	r3, [r3, r1]
 801dd3e:	0019      	movs	r1, r3
 801dd40:	697b      	ldr	r3, [r7, #20]
 801dd42:	434b      	muls	r3, r1
 801dd44:	1ad3      	subs	r3, r2, r3
 801dd46:	2280      	movs	r2, #128	; 0x80
 801dd48:	01d2      	lsls	r2, r2, #7
 801dd4a:	4694      	mov	ip, r2
 801dd4c:	4463      	add	r3, ip
 801dd4e:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 801dd50:	68fa      	ldr	r2, [r7, #12]
 801dd52:	2122      	movs	r1, #34	; 0x22
 801dd54:	5652      	ldrsb	r2, [r2, r1]
 801dd56:	0011      	movs	r1, r2
 801dd58:	697a      	ldr	r2, [r7, #20]
 801dd5a:	434a      	muls	r2, r1
 801dd5c:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 801dd5e:	68f9      	ldr	r1, [r7, #12]
 801dd60:	7f09      	ldrb	r1, [r1, #28]
 801dd62:	0008      	movs	r0, r1
 801dd64:	6979      	ldr	r1, [r7, #20]
 801dd66:	4341      	muls	r1, r0
 801dd68:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 801dd6a:	2080      	movs	r0, #128	; 0x80
 801dd6c:	0200      	lsls	r0, r0, #8
 801dd6e:	4684      	mov	ip, r0
 801dd70:	4461      	add	r1, ip
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 801dd72:	434a      	muls	r2, r1
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 801dd74:	1292      	asrs	r2, r2, #10
 801dd76:	2180      	movs	r1, #128	; 0x80
 801dd78:	0389      	lsls	r1, r1, #14
 801dd7a:	468c      	mov	ip, r1
 801dd7c:	4462      	add	r2, ip
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 801dd7e:	68f9      	ldr	r1, [r7, #12]
 801dd80:	201a      	movs	r0, #26
 801dd82:	5e09      	ldrsh	r1, [r1, r0]
 801dd84:	434a      	muls	r2, r1
 801dd86:	2180      	movs	r1, #128	; 0x80
 801dd88:	0189      	lsls	r1, r1, #6
 801dd8a:	468c      	mov	ip, r1
 801dd8c:	4462      	add	r2, ip
 801dd8e:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 801dd90:	4353      	muls	r3, r2
 801dd92:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 801dd94:	697b      	ldr	r3, [r7, #20]
 801dd96:	13db      	asrs	r3, r3, #15
 801dd98:	697a      	ldr	r2, [r7, #20]
 801dd9a:	13d2      	asrs	r2, r2, #15
 801dd9c:	4353      	muls	r3, r2
 801dd9e:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 801dda0:	68fa      	ldr	r2, [r7, #12]
 801dda2:	7e12      	ldrb	r2, [r2, #24]
 801dda4:	4353      	muls	r3, r2
 801dda6:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 801dda8:	697a      	ldr	r2, [r7, #20]
 801ddaa:	1ad3      	subs	r3, r2, r3
 801ddac:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 801ddae:	697b      	ldr	r3, [r7, #20]
 801ddb0:	2b00      	cmp	r3, #0
 801ddb2:	da00      	bge.n	801ddb6 <compensate_humidity+0xa2>
 801ddb4:	2300      	movs	r3, #0
 801ddb6:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 801ddb8:	697b      	ldr	r3, [r7, #20]
 801ddba:	22c8      	movs	r2, #200	; 0xc8
 801ddbc:	0552      	lsls	r2, r2, #21
 801ddbe:	4293      	cmp	r3, r2
 801ddc0:	dd01      	ble.n	801ddc6 <compensate_humidity+0xb2>
 801ddc2:	23c8      	movs	r3, #200	; 0xc8
 801ddc4:	055b      	lsls	r3, r3, #21
 801ddc6:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 801ddc8:	697b      	ldr	r3, [r7, #20]
 801ddca:	131b      	asrs	r3, r3, #12
}
 801ddcc:	0018      	movs	r0, r3
 801ddce:	46bd      	mov	sp, r7
 801ddd0:	b006      	add	sp, #24
 801ddd2:	bd80      	pop	{r7, pc}
 801ddd4:	fffed400 	.word	0xfffed400

0801ddd8 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 801ddd8:	b590      	push	{r4, r7, lr}
 801ddda:	b08d      	sub	sp, #52	; 0x34
 801dddc:	af00      	add	r7, sp, #0
 801ddde:	60f8      	str	r0, [r7, #12]
 801dde0:	60b9      	str	r1, [r7, #8]
 801dde2:	607a      	str	r2, [r7, #4]
 801dde4:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 801dde6:	68fb      	ldr	r3, [r7, #12]
 801dde8:	2232      	movs	r2, #50	; 0x32
 801ddea:	5c9b      	ldrb	r3, [r3, r2]
 801ddec:	2b60      	cmp	r3, #96	; 0x60
 801ddee:	d007      	beq.n	801de00 <bmp280_read_fixed+0x28>
		if (humidity)
 801ddf0:	683b      	ldr	r3, [r7, #0]
 801ddf2:	2b00      	cmp	r3, #0
 801ddf4:	d002      	beq.n	801ddfc <bmp280_read_fixed+0x24>
			*humidity = 0;
 801ddf6:	683b      	ldr	r3, [r7, #0]
 801ddf8:	2200      	movs	r2, #0
 801ddfa:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 801ddfc:	2300      	movs	r3, #0
 801ddfe:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 801de00:	683b      	ldr	r3, [r7, #0]
 801de02:	2b00      	cmp	r3, #0
 801de04:	d001      	beq.n	801de0a <bmp280_read_fixed+0x32>
 801de06:	2308      	movs	r3, #8
 801de08:	e000      	b.n	801de0c <bmp280_read_fixed+0x34>
 801de0a:	2306      	movs	r3, #6
 801de0c:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 801de0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801de10:	b2db      	uxtb	r3, r3
 801de12:	2218      	movs	r2, #24
 801de14:	18ba      	adds	r2, r7, r2
 801de16:	68f8      	ldr	r0, [r7, #12]
 801de18:	21f7      	movs	r1, #247	; 0xf7
 801de1a:	f7ff fb9b 	bl	801d554 <read_data>
 801de1e:	1e03      	subs	r3, r0, #0
 801de20:	d001      	beq.n	801de26 <bmp280_read_fixed+0x4e>
		return false;
 801de22:	2300      	movs	r3, #0
 801de24:	e041      	b.n	801deaa <bmp280_read_fixed+0xd2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 801de26:	2418      	movs	r4, #24
 801de28:	193b      	adds	r3, r7, r4
 801de2a:	781b      	ldrb	r3, [r3, #0]
 801de2c:	031a      	lsls	r2, r3, #12
 801de2e:	193b      	adds	r3, r7, r4
 801de30:	785b      	ldrb	r3, [r3, #1]
 801de32:	011b      	lsls	r3, r3, #4
 801de34:	4313      	orrs	r3, r2
 801de36:	193a      	adds	r2, r7, r4
 801de38:	7892      	ldrb	r2, [r2, #2]
 801de3a:	0912      	lsrs	r2, r2, #4
 801de3c:	b2d2      	uxtb	r2, r2
 801de3e:	4313      	orrs	r3, r2
 801de40:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 801de42:	193b      	adds	r3, r7, r4
 801de44:	78db      	ldrb	r3, [r3, #3]
 801de46:	031a      	lsls	r2, r3, #12
 801de48:	193b      	adds	r3, r7, r4
 801de4a:	791b      	ldrb	r3, [r3, #4]
 801de4c:	011b      	lsls	r3, r3, #4
 801de4e:	4313      	orrs	r3, r2
 801de50:	193a      	adds	r2, r7, r4
 801de52:	7952      	ldrb	r2, [r2, #5]
 801de54:	0912      	lsrs	r2, r2, #4
 801de56:	b2d2      	uxtb	r2, r2
 801de58:	4313      	orrs	r3, r2
 801de5a:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 801de5c:	2314      	movs	r3, #20
 801de5e:	18fa      	adds	r2, r7, r3
 801de60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801de62:	68fb      	ldr	r3, [r7, #12]
 801de64:	0018      	movs	r0, r3
 801de66:	f7ff fd6e 	bl	801d946 <compensate_temperature>
 801de6a:	0002      	movs	r2, r0
 801de6c:	68bb      	ldr	r3, [r7, #8]
 801de6e:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 801de70:	697a      	ldr	r2, [r7, #20]
 801de72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801de74:	68fb      	ldr	r3, [r7, #12]
 801de76:	0018      	movs	r0, r3
 801de78:	f7ff fd9a 	bl	801d9b0 <compensate_pressure>
 801de7c:	0002      	movs	r2, r0
 801de7e:	687b      	ldr	r3, [r7, #4]
 801de80:	601a      	str	r2, [r3, #0]

	if (humidity) {
 801de82:	683b      	ldr	r3, [r7, #0]
 801de84:	2b00      	cmp	r3, #0
 801de86:	d00f      	beq.n	801dea8 <bmp280_read_fixed+0xd0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 801de88:	193b      	adds	r3, r7, r4
 801de8a:	799b      	ldrb	r3, [r3, #6]
 801de8c:	021b      	lsls	r3, r3, #8
 801de8e:	193a      	adds	r2, r7, r4
 801de90:	79d2      	ldrb	r2, [r2, #7]
 801de92:	4313      	orrs	r3, r2
 801de94:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 801de96:	697a      	ldr	r2, [r7, #20]
 801de98:	6a39      	ldr	r1, [r7, #32]
 801de9a:	68fb      	ldr	r3, [r7, #12]
 801de9c:	0018      	movs	r0, r3
 801de9e:	f7ff ff39 	bl	801dd14 <compensate_humidity>
 801dea2:	0002      	movs	r2, r0
 801dea4:	683b      	ldr	r3, [r7, #0]
 801dea6:	601a      	str	r2, [r3, #0]
	}

	return true;
 801dea8:	2301      	movs	r3, #1
}
 801deaa:	0018      	movs	r0, r3
 801deac:	46bd      	mov	sp, r7
 801deae:	b00d      	add	sp, #52	; 0x34
 801deb0:	bd90      	pop	{r4, r7, pc}
	...

0801deb4 <__errno>:
 801deb4:	4b01      	ldr	r3, [pc, #4]	; (801debc <__errno+0x8>)
 801deb6:	6818      	ldr	r0, [r3, #0]
 801deb8:	4770      	bx	lr
 801deba:	46c0      	nop			; (mov r8, r8)
 801debc:	200001d8 	.word	0x200001d8

0801dec0 <__libc_init_array>:
 801dec0:	b570      	push	{r4, r5, r6, lr}
 801dec2:	2600      	movs	r6, #0
 801dec4:	4d0c      	ldr	r5, [pc, #48]	; (801def8 <__libc_init_array+0x38>)
 801dec6:	4c0d      	ldr	r4, [pc, #52]	; (801defc <__libc_init_array+0x3c>)
 801dec8:	1b64      	subs	r4, r4, r5
 801deca:	10a4      	asrs	r4, r4, #2
 801decc:	42a6      	cmp	r6, r4
 801dece:	d109      	bne.n	801dee4 <__libc_init_array+0x24>
 801ded0:	2600      	movs	r6, #0
 801ded2:	f000 fdc5 	bl	801ea60 <_init>
 801ded6:	4d0a      	ldr	r5, [pc, #40]	; (801df00 <__libc_init_array+0x40>)
 801ded8:	4c0a      	ldr	r4, [pc, #40]	; (801df04 <__libc_init_array+0x44>)
 801deda:	1b64      	subs	r4, r4, r5
 801dedc:	10a4      	asrs	r4, r4, #2
 801dede:	42a6      	cmp	r6, r4
 801dee0:	d105      	bne.n	801deee <__libc_init_array+0x2e>
 801dee2:	bd70      	pop	{r4, r5, r6, pc}
 801dee4:	00b3      	lsls	r3, r6, #2
 801dee6:	58eb      	ldr	r3, [r5, r3]
 801dee8:	4798      	blx	r3
 801deea:	3601      	adds	r6, #1
 801deec:	e7ee      	b.n	801decc <__libc_init_array+0xc>
 801deee:	00b3      	lsls	r3, r6, #2
 801def0:	58eb      	ldr	r3, [r5, r3]
 801def2:	4798      	blx	r3
 801def4:	3601      	adds	r6, #1
 801def6:	e7f2      	b.n	801dede <__libc_init_array+0x1e>
 801def8:	0802009c 	.word	0x0802009c
 801defc:	0802009c 	.word	0x0802009c
 801df00:	0802009c 	.word	0x0802009c
 801df04:	080200a0 	.word	0x080200a0

0801df08 <memcpy>:
 801df08:	2300      	movs	r3, #0
 801df0a:	b510      	push	{r4, lr}
 801df0c:	429a      	cmp	r2, r3
 801df0e:	d100      	bne.n	801df12 <memcpy+0xa>
 801df10:	bd10      	pop	{r4, pc}
 801df12:	5ccc      	ldrb	r4, [r1, r3]
 801df14:	54c4      	strb	r4, [r0, r3]
 801df16:	3301      	adds	r3, #1
 801df18:	e7f8      	b.n	801df0c <memcpy+0x4>

0801df1a <memset>:
 801df1a:	0003      	movs	r3, r0
 801df1c:	1882      	adds	r2, r0, r2
 801df1e:	4293      	cmp	r3, r2
 801df20:	d100      	bne.n	801df24 <memset+0xa>
 801df22:	4770      	bx	lr
 801df24:	7019      	strb	r1, [r3, #0]
 801df26:	3301      	adds	r3, #1
 801df28:	e7f9      	b.n	801df1e <memset+0x4>
	...

0801df2c <_puts_r>:
 801df2c:	b570      	push	{r4, r5, r6, lr}
 801df2e:	0005      	movs	r5, r0
 801df30:	000e      	movs	r6, r1
 801df32:	2800      	cmp	r0, #0
 801df34:	d004      	beq.n	801df40 <_puts_r+0x14>
 801df36:	6983      	ldr	r3, [r0, #24]
 801df38:	2b00      	cmp	r3, #0
 801df3a:	d101      	bne.n	801df40 <_puts_r+0x14>
 801df3c:	f000 fa6e 	bl	801e41c <__sinit>
 801df40:	69ab      	ldr	r3, [r5, #24]
 801df42:	68ac      	ldr	r4, [r5, #8]
 801df44:	2b00      	cmp	r3, #0
 801df46:	d102      	bne.n	801df4e <_puts_r+0x22>
 801df48:	0028      	movs	r0, r5
 801df4a:	f000 fa67 	bl	801e41c <__sinit>
 801df4e:	4b2d      	ldr	r3, [pc, #180]	; (801e004 <_puts_r+0xd8>)
 801df50:	429c      	cmp	r4, r3
 801df52:	d122      	bne.n	801df9a <_puts_r+0x6e>
 801df54:	686c      	ldr	r4, [r5, #4]
 801df56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801df58:	07db      	lsls	r3, r3, #31
 801df5a:	d405      	bmi.n	801df68 <_puts_r+0x3c>
 801df5c:	89a3      	ldrh	r3, [r4, #12]
 801df5e:	059b      	lsls	r3, r3, #22
 801df60:	d402      	bmi.n	801df68 <_puts_r+0x3c>
 801df62:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801df64:	f000 fafb 	bl	801e55e <__retarget_lock_acquire_recursive>
 801df68:	89a3      	ldrh	r3, [r4, #12]
 801df6a:	071b      	lsls	r3, r3, #28
 801df6c:	d502      	bpl.n	801df74 <_puts_r+0x48>
 801df6e:	6923      	ldr	r3, [r4, #16]
 801df70:	2b00      	cmp	r3, #0
 801df72:	d129      	bne.n	801dfc8 <_puts_r+0x9c>
 801df74:	0021      	movs	r1, r4
 801df76:	0028      	movs	r0, r5
 801df78:	f000 f8aa 	bl	801e0d0 <__swsetup_r>
 801df7c:	2800      	cmp	r0, #0
 801df7e:	d023      	beq.n	801dfc8 <_puts_r+0x9c>
 801df80:	2501      	movs	r5, #1
 801df82:	426d      	negs	r5, r5
 801df84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801df86:	07db      	lsls	r3, r3, #31
 801df88:	d405      	bmi.n	801df96 <_puts_r+0x6a>
 801df8a:	89a3      	ldrh	r3, [r4, #12]
 801df8c:	059b      	lsls	r3, r3, #22
 801df8e:	d402      	bmi.n	801df96 <_puts_r+0x6a>
 801df90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801df92:	f000 fae5 	bl	801e560 <__retarget_lock_release_recursive>
 801df96:	0028      	movs	r0, r5
 801df98:	bd70      	pop	{r4, r5, r6, pc}
 801df9a:	4b1b      	ldr	r3, [pc, #108]	; (801e008 <_puts_r+0xdc>)
 801df9c:	429c      	cmp	r4, r3
 801df9e:	d101      	bne.n	801dfa4 <_puts_r+0x78>
 801dfa0:	68ac      	ldr	r4, [r5, #8]
 801dfa2:	e7d8      	b.n	801df56 <_puts_r+0x2a>
 801dfa4:	4b19      	ldr	r3, [pc, #100]	; (801e00c <_puts_r+0xe0>)
 801dfa6:	429c      	cmp	r4, r3
 801dfa8:	d1d5      	bne.n	801df56 <_puts_r+0x2a>
 801dfaa:	68ec      	ldr	r4, [r5, #12]
 801dfac:	e7d3      	b.n	801df56 <_puts_r+0x2a>
 801dfae:	3601      	adds	r6, #1
 801dfb0:	60a3      	str	r3, [r4, #8]
 801dfb2:	2b00      	cmp	r3, #0
 801dfb4:	da04      	bge.n	801dfc0 <_puts_r+0x94>
 801dfb6:	69a2      	ldr	r2, [r4, #24]
 801dfb8:	429a      	cmp	r2, r3
 801dfba:	dc16      	bgt.n	801dfea <_puts_r+0xbe>
 801dfbc:	290a      	cmp	r1, #10
 801dfbe:	d014      	beq.n	801dfea <_puts_r+0xbe>
 801dfc0:	6823      	ldr	r3, [r4, #0]
 801dfc2:	1c5a      	adds	r2, r3, #1
 801dfc4:	6022      	str	r2, [r4, #0]
 801dfc6:	7019      	strb	r1, [r3, #0]
 801dfc8:	68a3      	ldr	r3, [r4, #8]
 801dfca:	7831      	ldrb	r1, [r6, #0]
 801dfcc:	3b01      	subs	r3, #1
 801dfce:	2900      	cmp	r1, #0
 801dfd0:	d1ed      	bne.n	801dfae <_puts_r+0x82>
 801dfd2:	60a3      	str	r3, [r4, #8]
 801dfd4:	2b00      	cmp	r3, #0
 801dfd6:	da0f      	bge.n	801dff8 <_puts_r+0xcc>
 801dfd8:	0028      	movs	r0, r5
 801dfda:	0022      	movs	r2, r4
 801dfdc:	310a      	adds	r1, #10
 801dfde:	f000 f821 	bl	801e024 <__swbuf_r>
 801dfe2:	250a      	movs	r5, #10
 801dfe4:	1c43      	adds	r3, r0, #1
 801dfe6:	d1cd      	bne.n	801df84 <_puts_r+0x58>
 801dfe8:	e7ca      	b.n	801df80 <_puts_r+0x54>
 801dfea:	0022      	movs	r2, r4
 801dfec:	0028      	movs	r0, r5
 801dfee:	f000 f819 	bl	801e024 <__swbuf_r>
 801dff2:	1c43      	adds	r3, r0, #1
 801dff4:	d1e8      	bne.n	801dfc8 <_puts_r+0x9c>
 801dff6:	e7c3      	b.n	801df80 <_puts_r+0x54>
 801dff8:	250a      	movs	r5, #10
 801dffa:	6823      	ldr	r3, [r4, #0]
 801dffc:	1c5a      	adds	r2, r3, #1
 801dffe:	6022      	str	r2, [r4, #0]
 801e000:	701d      	strb	r5, [r3, #0]
 801e002:	e7bf      	b.n	801df84 <_puts_r+0x58>
 801e004:	08020054 	.word	0x08020054
 801e008:	08020074 	.word	0x08020074
 801e00c:	08020034 	.word	0x08020034

0801e010 <puts>:
 801e010:	b510      	push	{r4, lr}
 801e012:	4b03      	ldr	r3, [pc, #12]	; (801e020 <puts+0x10>)
 801e014:	0001      	movs	r1, r0
 801e016:	6818      	ldr	r0, [r3, #0]
 801e018:	f7ff ff88 	bl	801df2c <_puts_r>
 801e01c:	bd10      	pop	{r4, pc}
 801e01e:	46c0      	nop			; (mov r8, r8)
 801e020:	200001d8 	.word	0x200001d8

0801e024 <__swbuf_r>:
 801e024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e026:	0005      	movs	r5, r0
 801e028:	000e      	movs	r6, r1
 801e02a:	0014      	movs	r4, r2
 801e02c:	2800      	cmp	r0, #0
 801e02e:	d004      	beq.n	801e03a <__swbuf_r+0x16>
 801e030:	6983      	ldr	r3, [r0, #24]
 801e032:	2b00      	cmp	r3, #0
 801e034:	d101      	bne.n	801e03a <__swbuf_r+0x16>
 801e036:	f000 f9f1 	bl	801e41c <__sinit>
 801e03a:	4b22      	ldr	r3, [pc, #136]	; (801e0c4 <__swbuf_r+0xa0>)
 801e03c:	429c      	cmp	r4, r3
 801e03e:	d12e      	bne.n	801e09e <__swbuf_r+0x7a>
 801e040:	686c      	ldr	r4, [r5, #4]
 801e042:	69a3      	ldr	r3, [r4, #24]
 801e044:	60a3      	str	r3, [r4, #8]
 801e046:	89a3      	ldrh	r3, [r4, #12]
 801e048:	071b      	lsls	r3, r3, #28
 801e04a:	d532      	bpl.n	801e0b2 <__swbuf_r+0x8e>
 801e04c:	6923      	ldr	r3, [r4, #16]
 801e04e:	2b00      	cmp	r3, #0
 801e050:	d02f      	beq.n	801e0b2 <__swbuf_r+0x8e>
 801e052:	6823      	ldr	r3, [r4, #0]
 801e054:	6922      	ldr	r2, [r4, #16]
 801e056:	b2f7      	uxtb	r7, r6
 801e058:	1a98      	subs	r0, r3, r2
 801e05a:	6963      	ldr	r3, [r4, #20]
 801e05c:	b2f6      	uxtb	r6, r6
 801e05e:	4283      	cmp	r3, r0
 801e060:	dc05      	bgt.n	801e06e <__swbuf_r+0x4a>
 801e062:	0021      	movs	r1, r4
 801e064:	0028      	movs	r0, r5
 801e066:	f000 f937 	bl	801e2d8 <_fflush_r>
 801e06a:	2800      	cmp	r0, #0
 801e06c:	d127      	bne.n	801e0be <__swbuf_r+0x9a>
 801e06e:	68a3      	ldr	r3, [r4, #8]
 801e070:	3001      	adds	r0, #1
 801e072:	3b01      	subs	r3, #1
 801e074:	60a3      	str	r3, [r4, #8]
 801e076:	6823      	ldr	r3, [r4, #0]
 801e078:	1c5a      	adds	r2, r3, #1
 801e07a:	6022      	str	r2, [r4, #0]
 801e07c:	701f      	strb	r7, [r3, #0]
 801e07e:	6963      	ldr	r3, [r4, #20]
 801e080:	4283      	cmp	r3, r0
 801e082:	d004      	beq.n	801e08e <__swbuf_r+0x6a>
 801e084:	89a3      	ldrh	r3, [r4, #12]
 801e086:	07db      	lsls	r3, r3, #31
 801e088:	d507      	bpl.n	801e09a <__swbuf_r+0x76>
 801e08a:	2e0a      	cmp	r6, #10
 801e08c:	d105      	bne.n	801e09a <__swbuf_r+0x76>
 801e08e:	0021      	movs	r1, r4
 801e090:	0028      	movs	r0, r5
 801e092:	f000 f921 	bl	801e2d8 <_fflush_r>
 801e096:	2800      	cmp	r0, #0
 801e098:	d111      	bne.n	801e0be <__swbuf_r+0x9a>
 801e09a:	0030      	movs	r0, r6
 801e09c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e09e:	4b0a      	ldr	r3, [pc, #40]	; (801e0c8 <__swbuf_r+0xa4>)
 801e0a0:	429c      	cmp	r4, r3
 801e0a2:	d101      	bne.n	801e0a8 <__swbuf_r+0x84>
 801e0a4:	68ac      	ldr	r4, [r5, #8]
 801e0a6:	e7cc      	b.n	801e042 <__swbuf_r+0x1e>
 801e0a8:	4b08      	ldr	r3, [pc, #32]	; (801e0cc <__swbuf_r+0xa8>)
 801e0aa:	429c      	cmp	r4, r3
 801e0ac:	d1c9      	bne.n	801e042 <__swbuf_r+0x1e>
 801e0ae:	68ec      	ldr	r4, [r5, #12]
 801e0b0:	e7c7      	b.n	801e042 <__swbuf_r+0x1e>
 801e0b2:	0021      	movs	r1, r4
 801e0b4:	0028      	movs	r0, r5
 801e0b6:	f000 f80b 	bl	801e0d0 <__swsetup_r>
 801e0ba:	2800      	cmp	r0, #0
 801e0bc:	d0c9      	beq.n	801e052 <__swbuf_r+0x2e>
 801e0be:	2601      	movs	r6, #1
 801e0c0:	4276      	negs	r6, r6
 801e0c2:	e7ea      	b.n	801e09a <__swbuf_r+0x76>
 801e0c4:	08020054 	.word	0x08020054
 801e0c8:	08020074 	.word	0x08020074
 801e0cc:	08020034 	.word	0x08020034

0801e0d0 <__swsetup_r>:
 801e0d0:	4b37      	ldr	r3, [pc, #220]	; (801e1b0 <__swsetup_r+0xe0>)
 801e0d2:	b570      	push	{r4, r5, r6, lr}
 801e0d4:	681d      	ldr	r5, [r3, #0]
 801e0d6:	0006      	movs	r6, r0
 801e0d8:	000c      	movs	r4, r1
 801e0da:	2d00      	cmp	r5, #0
 801e0dc:	d005      	beq.n	801e0ea <__swsetup_r+0x1a>
 801e0de:	69ab      	ldr	r3, [r5, #24]
 801e0e0:	2b00      	cmp	r3, #0
 801e0e2:	d102      	bne.n	801e0ea <__swsetup_r+0x1a>
 801e0e4:	0028      	movs	r0, r5
 801e0e6:	f000 f999 	bl	801e41c <__sinit>
 801e0ea:	4b32      	ldr	r3, [pc, #200]	; (801e1b4 <__swsetup_r+0xe4>)
 801e0ec:	429c      	cmp	r4, r3
 801e0ee:	d10f      	bne.n	801e110 <__swsetup_r+0x40>
 801e0f0:	686c      	ldr	r4, [r5, #4]
 801e0f2:	230c      	movs	r3, #12
 801e0f4:	5ee2      	ldrsh	r2, [r4, r3]
 801e0f6:	b293      	uxth	r3, r2
 801e0f8:	0711      	lsls	r1, r2, #28
 801e0fa:	d42d      	bmi.n	801e158 <__swsetup_r+0x88>
 801e0fc:	06d9      	lsls	r1, r3, #27
 801e0fe:	d411      	bmi.n	801e124 <__swsetup_r+0x54>
 801e100:	2309      	movs	r3, #9
 801e102:	2001      	movs	r0, #1
 801e104:	6033      	str	r3, [r6, #0]
 801e106:	3337      	adds	r3, #55	; 0x37
 801e108:	4313      	orrs	r3, r2
 801e10a:	81a3      	strh	r3, [r4, #12]
 801e10c:	4240      	negs	r0, r0
 801e10e:	bd70      	pop	{r4, r5, r6, pc}
 801e110:	4b29      	ldr	r3, [pc, #164]	; (801e1b8 <__swsetup_r+0xe8>)
 801e112:	429c      	cmp	r4, r3
 801e114:	d101      	bne.n	801e11a <__swsetup_r+0x4a>
 801e116:	68ac      	ldr	r4, [r5, #8]
 801e118:	e7eb      	b.n	801e0f2 <__swsetup_r+0x22>
 801e11a:	4b28      	ldr	r3, [pc, #160]	; (801e1bc <__swsetup_r+0xec>)
 801e11c:	429c      	cmp	r4, r3
 801e11e:	d1e8      	bne.n	801e0f2 <__swsetup_r+0x22>
 801e120:	68ec      	ldr	r4, [r5, #12]
 801e122:	e7e6      	b.n	801e0f2 <__swsetup_r+0x22>
 801e124:	075b      	lsls	r3, r3, #29
 801e126:	d513      	bpl.n	801e150 <__swsetup_r+0x80>
 801e128:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e12a:	2900      	cmp	r1, #0
 801e12c:	d008      	beq.n	801e140 <__swsetup_r+0x70>
 801e12e:	0023      	movs	r3, r4
 801e130:	3344      	adds	r3, #68	; 0x44
 801e132:	4299      	cmp	r1, r3
 801e134:	d002      	beq.n	801e13c <__swsetup_r+0x6c>
 801e136:	0030      	movs	r0, r6
 801e138:	f000 fa80 	bl	801e63c <_free_r>
 801e13c:	2300      	movs	r3, #0
 801e13e:	6363      	str	r3, [r4, #52]	; 0x34
 801e140:	2224      	movs	r2, #36	; 0x24
 801e142:	89a3      	ldrh	r3, [r4, #12]
 801e144:	4393      	bics	r3, r2
 801e146:	81a3      	strh	r3, [r4, #12]
 801e148:	2300      	movs	r3, #0
 801e14a:	6063      	str	r3, [r4, #4]
 801e14c:	6923      	ldr	r3, [r4, #16]
 801e14e:	6023      	str	r3, [r4, #0]
 801e150:	2308      	movs	r3, #8
 801e152:	89a2      	ldrh	r2, [r4, #12]
 801e154:	4313      	orrs	r3, r2
 801e156:	81a3      	strh	r3, [r4, #12]
 801e158:	6923      	ldr	r3, [r4, #16]
 801e15a:	2b00      	cmp	r3, #0
 801e15c:	d10b      	bne.n	801e176 <__swsetup_r+0xa6>
 801e15e:	21a0      	movs	r1, #160	; 0xa0
 801e160:	2280      	movs	r2, #128	; 0x80
 801e162:	89a3      	ldrh	r3, [r4, #12]
 801e164:	0089      	lsls	r1, r1, #2
 801e166:	0092      	lsls	r2, r2, #2
 801e168:	400b      	ands	r3, r1
 801e16a:	4293      	cmp	r3, r2
 801e16c:	d003      	beq.n	801e176 <__swsetup_r+0xa6>
 801e16e:	0021      	movs	r1, r4
 801e170:	0030      	movs	r0, r6
 801e172:	f000 fa1f 	bl	801e5b4 <__smakebuf_r>
 801e176:	220c      	movs	r2, #12
 801e178:	5ea3      	ldrsh	r3, [r4, r2]
 801e17a:	2001      	movs	r0, #1
 801e17c:	001a      	movs	r2, r3
 801e17e:	b299      	uxth	r1, r3
 801e180:	4002      	ands	r2, r0
 801e182:	4203      	tst	r3, r0
 801e184:	d00f      	beq.n	801e1a6 <__swsetup_r+0xd6>
 801e186:	2200      	movs	r2, #0
 801e188:	60a2      	str	r2, [r4, #8]
 801e18a:	6962      	ldr	r2, [r4, #20]
 801e18c:	4252      	negs	r2, r2
 801e18e:	61a2      	str	r2, [r4, #24]
 801e190:	2000      	movs	r0, #0
 801e192:	6922      	ldr	r2, [r4, #16]
 801e194:	4282      	cmp	r2, r0
 801e196:	d1ba      	bne.n	801e10e <__swsetup_r+0x3e>
 801e198:	060a      	lsls	r2, r1, #24
 801e19a:	d5b8      	bpl.n	801e10e <__swsetup_r+0x3e>
 801e19c:	2240      	movs	r2, #64	; 0x40
 801e19e:	4313      	orrs	r3, r2
 801e1a0:	81a3      	strh	r3, [r4, #12]
 801e1a2:	3801      	subs	r0, #1
 801e1a4:	e7b3      	b.n	801e10e <__swsetup_r+0x3e>
 801e1a6:	0788      	lsls	r0, r1, #30
 801e1a8:	d400      	bmi.n	801e1ac <__swsetup_r+0xdc>
 801e1aa:	6962      	ldr	r2, [r4, #20]
 801e1ac:	60a2      	str	r2, [r4, #8]
 801e1ae:	e7ef      	b.n	801e190 <__swsetup_r+0xc0>
 801e1b0:	200001d8 	.word	0x200001d8
 801e1b4:	08020054 	.word	0x08020054
 801e1b8:	08020074 	.word	0x08020074
 801e1bc:	08020034 	.word	0x08020034

0801e1c0 <__sflush_r>:
 801e1c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e1c2:	898b      	ldrh	r3, [r1, #12]
 801e1c4:	0005      	movs	r5, r0
 801e1c6:	000c      	movs	r4, r1
 801e1c8:	071a      	lsls	r2, r3, #28
 801e1ca:	d45f      	bmi.n	801e28c <__sflush_r+0xcc>
 801e1cc:	684a      	ldr	r2, [r1, #4]
 801e1ce:	2a00      	cmp	r2, #0
 801e1d0:	dc04      	bgt.n	801e1dc <__sflush_r+0x1c>
 801e1d2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 801e1d4:	2a00      	cmp	r2, #0
 801e1d6:	dc01      	bgt.n	801e1dc <__sflush_r+0x1c>
 801e1d8:	2000      	movs	r0, #0
 801e1da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801e1dc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 801e1de:	2f00      	cmp	r7, #0
 801e1e0:	d0fa      	beq.n	801e1d8 <__sflush_r+0x18>
 801e1e2:	2200      	movs	r2, #0
 801e1e4:	2180      	movs	r1, #128	; 0x80
 801e1e6:	682e      	ldr	r6, [r5, #0]
 801e1e8:	602a      	str	r2, [r5, #0]
 801e1ea:	001a      	movs	r2, r3
 801e1ec:	0149      	lsls	r1, r1, #5
 801e1ee:	400a      	ands	r2, r1
 801e1f0:	420b      	tst	r3, r1
 801e1f2:	d034      	beq.n	801e25e <__sflush_r+0x9e>
 801e1f4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801e1f6:	89a3      	ldrh	r3, [r4, #12]
 801e1f8:	075b      	lsls	r3, r3, #29
 801e1fa:	d506      	bpl.n	801e20a <__sflush_r+0x4a>
 801e1fc:	6863      	ldr	r3, [r4, #4]
 801e1fe:	1ac0      	subs	r0, r0, r3
 801e200:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e202:	2b00      	cmp	r3, #0
 801e204:	d001      	beq.n	801e20a <__sflush_r+0x4a>
 801e206:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e208:	1ac0      	subs	r0, r0, r3
 801e20a:	0002      	movs	r2, r0
 801e20c:	6a21      	ldr	r1, [r4, #32]
 801e20e:	2300      	movs	r3, #0
 801e210:	0028      	movs	r0, r5
 801e212:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 801e214:	47b8      	blx	r7
 801e216:	89a1      	ldrh	r1, [r4, #12]
 801e218:	1c43      	adds	r3, r0, #1
 801e21a:	d106      	bne.n	801e22a <__sflush_r+0x6a>
 801e21c:	682b      	ldr	r3, [r5, #0]
 801e21e:	2b1d      	cmp	r3, #29
 801e220:	d831      	bhi.n	801e286 <__sflush_r+0xc6>
 801e222:	4a2c      	ldr	r2, [pc, #176]	; (801e2d4 <__sflush_r+0x114>)
 801e224:	40da      	lsrs	r2, r3
 801e226:	07d3      	lsls	r3, r2, #31
 801e228:	d52d      	bpl.n	801e286 <__sflush_r+0xc6>
 801e22a:	2300      	movs	r3, #0
 801e22c:	6063      	str	r3, [r4, #4]
 801e22e:	6923      	ldr	r3, [r4, #16]
 801e230:	6023      	str	r3, [r4, #0]
 801e232:	04cb      	lsls	r3, r1, #19
 801e234:	d505      	bpl.n	801e242 <__sflush_r+0x82>
 801e236:	1c43      	adds	r3, r0, #1
 801e238:	d102      	bne.n	801e240 <__sflush_r+0x80>
 801e23a:	682b      	ldr	r3, [r5, #0]
 801e23c:	2b00      	cmp	r3, #0
 801e23e:	d100      	bne.n	801e242 <__sflush_r+0x82>
 801e240:	6560      	str	r0, [r4, #84]	; 0x54
 801e242:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e244:	602e      	str	r6, [r5, #0]
 801e246:	2900      	cmp	r1, #0
 801e248:	d0c6      	beq.n	801e1d8 <__sflush_r+0x18>
 801e24a:	0023      	movs	r3, r4
 801e24c:	3344      	adds	r3, #68	; 0x44
 801e24e:	4299      	cmp	r1, r3
 801e250:	d002      	beq.n	801e258 <__sflush_r+0x98>
 801e252:	0028      	movs	r0, r5
 801e254:	f000 f9f2 	bl	801e63c <_free_r>
 801e258:	2000      	movs	r0, #0
 801e25a:	6360      	str	r0, [r4, #52]	; 0x34
 801e25c:	e7bd      	b.n	801e1da <__sflush_r+0x1a>
 801e25e:	2301      	movs	r3, #1
 801e260:	0028      	movs	r0, r5
 801e262:	6a21      	ldr	r1, [r4, #32]
 801e264:	47b8      	blx	r7
 801e266:	1c43      	adds	r3, r0, #1
 801e268:	d1c5      	bne.n	801e1f6 <__sflush_r+0x36>
 801e26a:	682b      	ldr	r3, [r5, #0]
 801e26c:	2b00      	cmp	r3, #0
 801e26e:	d0c2      	beq.n	801e1f6 <__sflush_r+0x36>
 801e270:	2b1d      	cmp	r3, #29
 801e272:	d001      	beq.n	801e278 <__sflush_r+0xb8>
 801e274:	2b16      	cmp	r3, #22
 801e276:	d101      	bne.n	801e27c <__sflush_r+0xbc>
 801e278:	602e      	str	r6, [r5, #0]
 801e27a:	e7ad      	b.n	801e1d8 <__sflush_r+0x18>
 801e27c:	2340      	movs	r3, #64	; 0x40
 801e27e:	89a2      	ldrh	r2, [r4, #12]
 801e280:	4313      	orrs	r3, r2
 801e282:	81a3      	strh	r3, [r4, #12]
 801e284:	e7a9      	b.n	801e1da <__sflush_r+0x1a>
 801e286:	2340      	movs	r3, #64	; 0x40
 801e288:	430b      	orrs	r3, r1
 801e28a:	e7fa      	b.n	801e282 <__sflush_r+0xc2>
 801e28c:	690f      	ldr	r7, [r1, #16]
 801e28e:	2f00      	cmp	r7, #0
 801e290:	d0a2      	beq.n	801e1d8 <__sflush_r+0x18>
 801e292:	680a      	ldr	r2, [r1, #0]
 801e294:	600f      	str	r7, [r1, #0]
 801e296:	1bd2      	subs	r2, r2, r7
 801e298:	9201      	str	r2, [sp, #4]
 801e29a:	2200      	movs	r2, #0
 801e29c:	079b      	lsls	r3, r3, #30
 801e29e:	d100      	bne.n	801e2a2 <__sflush_r+0xe2>
 801e2a0:	694a      	ldr	r2, [r1, #20]
 801e2a2:	60a2      	str	r2, [r4, #8]
 801e2a4:	9b01      	ldr	r3, [sp, #4]
 801e2a6:	2b00      	cmp	r3, #0
 801e2a8:	dc00      	bgt.n	801e2ac <__sflush_r+0xec>
 801e2aa:	e795      	b.n	801e1d8 <__sflush_r+0x18>
 801e2ac:	003a      	movs	r2, r7
 801e2ae:	0028      	movs	r0, r5
 801e2b0:	9b01      	ldr	r3, [sp, #4]
 801e2b2:	6a21      	ldr	r1, [r4, #32]
 801e2b4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801e2b6:	47b0      	blx	r6
 801e2b8:	2800      	cmp	r0, #0
 801e2ba:	dc06      	bgt.n	801e2ca <__sflush_r+0x10a>
 801e2bc:	2340      	movs	r3, #64	; 0x40
 801e2be:	2001      	movs	r0, #1
 801e2c0:	89a2      	ldrh	r2, [r4, #12]
 801e2c2:	4240      	negs	r0, r0
 801e2c4:	4313      	orrs	r3, r2
 801e2c6:	81a3      	strh	r3, [r4, #12]
 801e2c8:	e787      	b.n	801e1da <__sflush_r+0x1a>
 801e2ca:	9b01      	ldr	r3, [sp, #4]
 801e2cc:	183f      	adds	r7, r7, r0
 801e2ce:	1a1b      	subs	r3, r3, r0
 801e2d0:	9301      	str	r3, [sp, #4]
 801e2d2:	e7e7      	b.n	801e2a4 <__sflush_r+0xe4>
 801e2d4:	20400001 	.word	0x20400001

0801e2d8 <_fflush_r>:
 801e2d8:	690b      	ldr	r3, [r1, #16]
 801e2da:	b570      	push	{r4, r5, r6, lr}
 801e2dc:	0005      	movs	r5, r0
 801e2de:	000c      	movs	r4, r1
 801e2e0:	2b00      	cmp	r3, #0
 801e2e2:	d102      	bne.n	801e2ea <_fflush_r+0x12>
 801e2e4:	2500      	movs	r5, #0
 801e2e6:	0028      	movs	r0, r5
 801e2e8:	bd70      	pop	{r4, r5, r6, pc}
 801e2ea:	2800      	cmp	r0, #0
 801e2ec:	d004      	beq.n	801e2f8 <_fflush_r+0x20>
 801e2ee:	6983      	ldr	r3, [r0, #24]
 801e2f0:	2b00      	cmp	r3, #0
 801e2f2:	d101      	bne.n	801e2f8 <_fflush_r+0x20>
 801e2f4:	f000 f892 	bl	801e41c <__sinit>
 801e2f8:	4b14      	ldr	r3, [pc, #80]	; (801e34c <_fflush_r+0x74>)
 801e2fa:	429c      	cmp	r4, r3
 801e2fc:	d11b      	bne.n	801e336 <_fflush_r+0x5e>
 801e2fe:	686c      	ldr	r4, [r5, #4]
 801e300:	220c      	movs	r2, #12
 801e302:	5ea3      	ldrsh	r3, [r4, r2]
 801e304:	2b00      	cmp	r3, #0
 801e306:	d0ed      	beq.n	801e2e4 <_fflush_r+0xc>
 801e308:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801e30a:	07d2      	lsls	r2, r2, #31
 801e30c:	d404      	bmi.n	801e318 <_fflush_r+0x40>
 801e30e:	059b      	lsls	r3, r3, #22
 801e310:	d402      	bmi.n	801e318 <_fflush_r+0x40>
 801e312:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e314:	f000 f923 	bl	801e55e <__retarget_lock_acquire_recursive>
 801e318:	0028      	movs	r0, r5
 801e31a:	0021      	movs	r1, r4
 801e31c:	f7ff ff50 	bl	801e1c0 <__sflush_r>
 801e320:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e322:	0005      	movs	r5, r0
 801e324:	07db      	lsls	r3, r3, #31
 801e326:	d4de      	bmi.n	801e2e6 <_fflush_r+0xe>
 801e328:	89a3      	ldrh	r3, [r4, #12]
 801e32a:	059b      	lsls	r3, r3, #22
 801e32c:	d4db      	bmi.n	801e2e6 <_fflush_r+0xe>
 801e32e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e330:	f000 f916 	bl	801e560 <__retarget_lock_release_recursive>
 801e334:	e7d7      	b.n	801e2e6 <_fflush_r+0xe>
 801e336:	4b06      	ldr	r3, [pc, #24]	; (801e350 <_fflush_r+0x78>)
 801e338:	429c      	cmp	r4, r3
 801e33a:	d101      	bne.n	801e340 <_fflush_r+0x68>
 801e33c:	68ac      	ldr	r4, [r5, #8]
 801e33e:	e7df      	b.n	801e300 <_fflush_r+0x28>
 801e340:	4b04      	ldr	r3, [pc, #16]	; (801e354 <_fflush_r+0x7c>)
 801e342:	429c      	cmp	r4, r3
 801e344:	d1dc      	bne.n	801e300 <_fflush_r+0x28>
 801e346:	68ec      	ldr	r4, [r5, #12]
 801e348:	e7da      	b.n	801e300 <_fflush_r+0x28>
 801e34a:	46c0      	nop			; (mov r8, r8)
 801e34c:	08020054 	.word	0x08020054
 801e350:	08020074 	.word	0x08020074
 801e354:	08020034 	.word	0x08020034

0801e358 <std>:
 801e358:	2300      	movs	r3, #0
 801e35a:	b510      	push	{r4, lr}
 801e35c:	0004      	movs	r4, r0
 801e35e:	6003      	str	r3, [r0, #0]
 801e360:	6043      	str	r3, [r0, #4]
 801e362:	6083      	str	r3, [r0, #8]
 801e364:	8181      	strh	r1, [r0, #12]
 801e366:	6643      	str	r3, [r0, #100]	; 0x64
 801e368:	0019      	movs	r1, r3
 801e36a:	81c2      	strh	r2, [r0, #14]
 801e36c:	6103      	str	r3, [r0, #16]
 801e36e:	6143      	str	r3, [r0, #20]
 801e370:	6183      	str	r3, [r0, #24]
 801e372:	2208      	movs	r2, #8
 801e374:	305c      	adds	r0, #92	; 0x5c
 801e376:	f7ff fdd0 	bl	801df1a <memset>
 801e37a:	4b05      	ldr	r3, [pc, #20]	; (801e390 <std+0x38>)
 801e37c:	6263      	str	r3, [r4, #36]	; 0x24
 801e37e:	4b05      	ldr	r3, [pc, #20]	; (801e394 <std+0x3c>)
 801e380:	6224      	str	r4, [r4, #32]
 801e382:	62a3      	str	r3, [r4, #40]	; 0x28
 801e384:	4b04      	ldr	r3, [pc, #16]	; (801e398 <std+0x40>)
 801e386:	62e3      	str	r3, [r4, #44]	; 0x2c
 801e388:	4b04      	ldr	r3, [pc, #16]	; (801e39c <std+0x44>)
 801e38a:	6323      	str	r3, [r4, #48]	; 0x30
 801e38c:	bd10      	pop	{r4, pc}
 801e38e:	46c0      	nop			; (mov r8, r8)
 801e390:	0801e7b1 	.word	0x0801e7b1
 801e394:	0801e7d9 	.word	0x0801e7d9
 801e398:	0801e811 	.word	0x0801e811
 801e39c:	0801e83d 	.word	0x0801e83d

0801e3a0 <_cleanup_r>:
 801e3a0:	b510      	push	{r4, lr}
 801e3a2:	4902      	ldr	r1, [pc, #8]	; (801e3ac <_cleanup_r+0xc>)
 801e3a4:	f000 f8ba 	bl	801e51c <_fwalk_reent>
 801e3a8:	bd10      	pop	{r4, pc}
 801e3aa:	46c0      	nop			; (mov r8, r8)
 801e3ac:	0801e2d9 	.word	0x0801e2d9

0801e3b0 <__sfmoreglue>:
 801e3b0:	b570      	push	{r4, r5, r6, lr}
 801e3b2:	2568      	movs	r5, #104	; 0x68
 801e3b4:	1e4a      	subs	r2, r1, #1
 801e3b6:	4355      	muls	r5, r2
 801e3b8:	000e      	movs	r6, r1
 801e3ba:	0029      	movs	r1, r5
 801e3bc:	3174      	adds	r1, #116	; 0x74
 801e3be:	f000 f987 	bl	801e6d0 <_malloc_r>
 801e3c2:	1e04      	subs	r4, r0, #0
 801e3c4:	d008      	beq.n	801e3d8 <__sfmoreglue+0x28>
 801e3c6:	2100      	movs	r1, #0
 801e3c8:	002a      	movs	r2, r5
 801e3ca:	6001      	str	r1, [r0, #0]
 801e3cc:	6046      	str	r6, [r0, #4]
 801e3ce:	300c      	adds	r0, #12
 801e3d0:	60a0      	str	r0, [r4, #8]
 801e3d2:	3268      	adds	r2, #104	; 0x68
 801e3d4:	f7ff fda1 	bl	801df1a <memset>
 801e3d8:	0020      	movs	r0, r4
 801e3da:	bd70      	pop	{r4, r5, r6, pc}

0801e3dc <__sfp_lock_acquire>:
 801e3dc:	b510      	push	{r4, lr}
 801e3de:	4802      	ldr	r0, [pc, #8]	; (801e3e8 <__sfp_lock_acquire+0xc>)
 801e3e0:	f000 f8bd 	bl	801e55e <__retarget_lock_acquire_recursive>
 801e3e4:	bd10      	pop	{r4, pc}
 801e3e6:	46c0      	nop			; (mov r8, r8)
 801e3e8:	200017fc 	.word	0x200017fc

0801e3ec <__sfp_lock_release>:
 801e3ec:	b510      	push	{r4, lr}
 801e3ee:	4802      	ldr	r0, [pc, #8]	; (801e3f8 <__sfp_lock_release+0xc>)
 801e3f0:	f000 f8b6 	bl	801e560 <__retarget_lock_release_recursive>
 801e3f4:	bd10      	pop	{r4, pc}
 801e3f6:	46c0      	nop			; (mov r8, r8)
 801e3f8:	200017fc 	.word	0x200017fc

0801e3fc <__sinit_lock_acquire>:
 801e3fc:	b510      	push	{r4, lr}
 801e3fe:	4802      	ldr	r0, [pc, #8]	; (801e408 <__sinit_lock_acquire+0xc>)
 801e400:	f000 f8ad 	bl	801e55e <__retarget_lock_acquire_recursive>
 801e404:	bd10      	pop	{r4, pc}
 801e406:	46c0      	nop			; (mov r8, r8)
 801e408:	200017f7 	.word	0x200017f7

0801e40c <__sinit_lock_release>:
 801e40c:	b510      	push	{r4, lr}
 801e40e:	4802      	ldr	r0, [pc, #8]	; (801e418 <__sinit_lock_release+0xc>)
 801e410:	f000 f8a6 	bl	801e560 <__retarget_lock_release_recursive>
 801e414:	bd10      	pop	{r4, pc}
 801e416:	46c0      	nop			; (mov r8, r8)
 801e418:	200017f7 	.word	0x200017f7

0801e41c <__sinit>:
 801e41c:	b513      	push	{r0, r1, r4, lr}
 801e41e:	0004      	movs	r4, r0
 801e420:	f7ff ffec 	bl	801e3fc <__sinit_lock_acquire>
 801e424:	69a3      	ldr	r3, [r4, #24]
 801e426:	2b00      	cmp	r3, #0
 801e428:	d002      	beq.n	801e430 <__sinit+0x14>
 801e42a:	f7ff ffef 	bl	801e40c <__sinit_lock_release>
 801e42e:	bd13      	pop	{r0, r1, r4, pc}
 801e430:	64a3      	str	r3, [r4, #72]	; 0x48
 801e432:	64e3      	str	r3, [r4, #76]	; 0x4c
 801e434:	6523      	str	r3, [r4, #80]	; 0x50
 801e436:	4b13      	ldr	r3, [pc, #76]	; (801e484 <__sinit+0x68>)
 801e438:	4a13      	ldr	r2, [pc, #76]	; (801e488 <__sinit+0x6c>)
 801e43a:	681b      	ldr	r3, [r3, #0]
 801e43c:	62a2      	str	r2, [r4, #40]	; 0x28
 801e43e:	9301      	str	r3, [sp, #4]
 801e440:	42a3      	cmp	r3, r4
 801e442:	d101      	bne.n	801e448 <__sinit+0x2c>
 801e444:	2301      	movs	r3, #1
 801e446:	61a3      	str	r3, [r4, #24]
 801e448:	0020      	movs	r0, r4
 801e44a:	f000 f81f 	bl	801e48c <__sfp>
 801e44e:	6060      	str	r0, [r4, #4]
 801e450:	0020      	movs	r0, r4
 801e452:	f000 f81b 	bl	801e48c <__sfp>
 801e456:	60a0      	str	r0, [r4, #8]
 801e458:	0020      	movs	r0, r4
 801e45a:	f000 f817 	bl	801e48c <__sfp>
 801e45e:	2200      	movs	r2, #0
 801e460:	2104      	movs	r1, #4
 801e462:	60e0      	str	r0, [r4, #12]
 801e464:	6860      	ldr	r0, [r4, #4]
 801e466:	f7ff ff77 	bl	801e358 <std>
 801e46a:	2201      	movs	r2, #1
 801e46c:	2109      	movs	r1, #9
 801e46e:	68a0      	ldr	r0, [r4, #8]
 801e470:	f7ff ff72 	bl	801e358 <std>
 801e474:	2202      	movs	r2, #2
 801e476:	2112      	movs	r1, #18
 801e478:	68e0      	ldr	r0, [r4, #12]
 801e47a:	f7ff ff6d 	bl	801e358 <std>
 801e47e:	2301      	movs	r3, #1
 801e480:	61a3      	str	r3, [r4, #24]
 801e482:	e7d2      	b.n	801e42a <__sinit+0xe>
 801e484:	08020030 	.word	0x08020030
 801e488:	0801e3a1 	.word	0x0801e3a1

0801e48c <__sfp>:
 801e48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e48e:	0007      	movs	r7, r0
 801e490:	f7ff ffa4 	bl	801e3dc <__sfp_lock_acquire>
 801e494:	4b1f      	ldr	r3, [pc, #124]	; (801e514 <__sfp+0x88>)
 801e496:	681e      	ldr	r6, [r3, #0]
 801e498:	69b3      	ldr	r3, [r6, #24]
 801e49a:	2b00      	cmp	r3, #0
 801e49c:	d102      	bne.n	801e4a4 <__sfp+0x18>
 801e49e:	0030      	movs	r0, r6
 801e4a0:	f7ff ffbc 	bl	801e41c <__sinit>
 801e4a4:	3648      	adds	r6, #72	; 0x48
 801e4a6:	68b4      	ldr	r4, [r6, #8]
 801e4a8:	6873      	ldr	r3, [r6, #4]
 801e4aa:	3b01      	subs	r3, #1
 801e4ac:	d504      	bpl.n	801e4b8 <__sfp+0x2c>
 801e4ae:	6833      	ldr	r3, [r6, #0]
 801e4b0:	2b00      	cmp	r3, #0
 801e4b2:	d022      	beq.n	801e4fa <__sfp+0x6e>
 801e4b4:	6836      	ldr	r6, [r6, #0]
 801e4b6:	e7f6      	b.n	801e4a6 <__sfp+0x1a>
 801e4b8:	220c      	movs	r2, #12
 801e4ba:	5ea5      	ldrsh	r5, [r4, r2]
 801e4bc:	2d00      	cmp	r5, #0
 801e4be:	d11a      	bne.n	801e4f6 <__sfp+0x6a>
 801e4c0:	0020      	movs	r0, r4
 801e4c2:	4b15      	ldr	r3, [pc, #84]	; (801e518 <__sfp+0x8c>)
 801e4c4:	3058      	adds	r0, #88	; 0x58
 801e4c6:	60e3      	str	r3, [r4, #12]
 801e4c8:	6665      	str	r5, [r4, #100]	; 0x64
 801e4ca:	f000 f847 	bl	801e55c <__retarget_lock_init_recursive>
 801e4ce:	f7ff ff8d 	bl	801e3ec <__sfp_lock_release>
 801e4d2:	0020      	movs	r0, r4
 801e4d4:	2208      	movs	r2, #8
 801e4d6:	0029      	movs	r1, r5
 801e4d8:	6025      	str	r5, [r4, #0]
 801e4da:	60a5      	str	r5, [r4, #8]
 801e4dc:	6065      	str	r5, [r4, #4]
 801e4de:	6125      	str	r5, [r4, #16]
 801e4e0:	6165      	str	r5, [r4, #20]
 801e4e2:	61a5      	str	r5, [r4, #24]
 801e4e4:	305c      	adds	r0, #92	; 0x5c
 801e4e6:	f7ff fd18 	bl	801df1a <memset>
 801e4ea:	6365      	str	r5, [r4, #52]	; 0x34
 801e4ec:	63a5      	str	r5, [r4, #56]	; 0x38
 801e4ee:	64a5      	str	r5, [r4, #72]	; 0x48
 801e4f0:	64e5      	str	r5, [r4, #76]	; 0x4c
 801e4f2:	0020      	movs	r0, r4
 801e4f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e4f6:	3468      	adds	r4, #104	; 0x68
 801e4f8:	e7d7      	b.n	801e4aa <__sfp+0x1e>
 801e4fa:	2104      	movs	r1, #4
 801e4fc:	0038      	movs	r0, r7
 801e4fe:	f7ff ff57 	bl	801e3b0 <__sfmoreglue>
 801e502:	1e04      	subs	r4, r0, #0
 801e504:	6030      	str	r0, [r6, #0]
 801e506:	d1d5      	bne.n	801e4b4 <__sfp+0x28>
 801e508:	f7ff ff70 	bl	801e3ec <__sfp_lock_release>
 801e50c:	230c      	movs	r3, #12
 801e50e:	603b      	str	r3, [r7, #0]
 801e510:	e7ef      	b.n	801e4f2 <__sfp+0x66>
 801e512:	46c0      	nop			; (mov r8, r8)
 801e514:	08020030 	.word	0x08020030
 801e518:	ffff0001 	.word	0xffff0001

0801e51c <_fwalk_reent>:
 801e51c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e51e:	0004      	movs	r4, r0
 801e520:	0006      	movs	r6, r0
 801e522:	2700      	movs	r7, #0
 801e524:	9101      	str	r1, [sp, #4]
 801e526:	3448      	adds	r4, #72	; 0x48
 801e528:	6863      	ldr	r3, [r4, #4]
 801e52a:	68a5      	ldr	r5, [r4, #8]
 801e52c:	9300      	str	r3, [sp, #0]
 801e52e:	9b00      	ldr	r3, [sp, #0]
 801e530:	3b01      	subs	r3, #1
 801e532:	9300      	str	r3, [sp, #0]
 801e534:	d504      	bpl.n	801e540 <_fwalk_reent+0x24>
 801e536:	6824      	ldr	r4, [r4, #0]
 801e538:	2c00      	cmp	r4, #0
 801e53a:	d1f5      	bne.n	801e528 <_fwalk_reent+0xc>
 801e53c:	0038      	movs	r0, r7
 801e53e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801e540:	89ab      	ldrh	r3, [r5, #12]
 801e542:	2b01      	cmp	r3, #1
 801e544:	d908      	bls.n	801e558 <_fwalk_reent+0x3c>
 801e546:	220e      	movs	r2, #14
 801e548:	5eab      	ldrsh	r3, [r5, r2]
 801e54a:	3301      	adds	r3, #1
 801e54c:	d004      	beq.n	801e558 <_fwalk_reent+0x3c>
 801e54e:	0029      	movs	r1, r5
 801e550:	0030      	movs	r0, r6
 801e552:	9b01      	ldr	r3, [sp, #4]
 801e554:	4798      	blx	r3
 801e556:	4307      	orrs	r7, r0
 801e558:	3568      	adds	r5, #104	; 0x68
 801e55a:	e7e8      	b.n	801e52e <_fwalk_reent+0x12>

0801e55c <__retarget_lock_init_recursive>:
 801e55c:	4770      	bx	lr

0801e55e <__retarget_lock_acquire_recursive>:
 801e55e:	4770      	bx	lr

0801e560 <__retarget_lock_release_recursive>:
 801e560:	4770      	bx	lr
	...

0801e564 <__swhatbuf_r>:
 801e564:	b570      	push	{r4, r5, r6, lr}
 801e566:	000e      	movs	r6, r1
 801e568:	001d      	movs	r5, r3
 801e56a:	230e      	movs	r3, #14
 801e56c:	5ec9      	ldrsh	r1, [r1, r3]
 801e56e:	0014      	movs	r4, r2
 801e570:	b096      	sub	sp, #88	; 0x58
 801e572:	2900      	cmp	r1, #0
 801e574:	da07      	bge.n	801e586 <__swhatbuf_r+0x22>
 801e576:	2300      	movs	r3, #0
 801e578:	602b      	str	r3, [r5, #0]
 801e57a:	89b3      	ldrh	r3, [r6, #12]
 801e57c:	061b      	lsls	r3, r3, #24
 801e57e:	d411      	bmi.n	801e5a4 <__swhatbuf_r+0x40>
 801e580:	2380      	movs	r3, #128	; 0x80
 801e582:	00db      	lsls	r3, r3, #3
 801e584:	e00f      	b.n	801e5a6 <__swhatbuf_r+0x42>
 801e586:	466a      	mov	r2, sp
 801e588:	f000 f984 	bl	801e894 <_fstat_r>
 801e58c:	2800      	cmp	r0, #0
 801e58e:	dbf2      	blt.n	801e576 <__swhatbuf_r+0x12>
 801e590:	23f0      	movs	r3, #240	; 0xf0
 801e592:	9901      	ldr	r1, [sp, #4]
 801e594:	021b      	lsls	r3, r3, #8
 801e596:	4019      	ands	r1, r3
 801e598:	4b05      	ldr	r3, [pc, #20]	; (801e5b0 <__swhatbuf_r+0x4c>)
 801e59a:	18c9      	adds	r1, r1, r3
 801e59c:	424b      	negs	r3, r1
 801e59e:	4159      	adcs	r1, r3
 801e5a0:	6029      	str	r1, [r5, #0]
 801e5a2:	e7ed      	b.n	801e580 <__swhatbuf_r+0x1c>
 801e5a4:	2340      	movs	r3, #64	; 0x40
 801e5a6:	2000      	movs	r0, #0
 801e5a8:	6023      	str	r3, [r4, #0]
 801e5aa:	b016      	add	sp, #88	; 0x58
 801e5ac:	bd70      	pop	{r4, r5, r6, pc}
 801e5ae:	46c0      	nop			; (mov r8, r8)
 801e5b0:	ffffe000 	.word	0xffffe000

0801e5b4 <__smakebuf_r>:
 801e5b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e5b6:	2602      	movs	r6, #2
 801e5b8:	898b      	ldrh	r3, [r1, #12]
 801e5ba:	0005      	movs	r5, r0
 801e5bc:	000c      	movs	r4, r1
 801e5be:	4233      	tst	r3, r6
 801e5c0:	d006      	beq.n	801e5d0 <__smakebuf_r+0x1c>
 801e5c2:	0023      	movs	r3, r4
 801e5c4:	3347      	adds	r3, #71	; 0x47
 801e5c6:	6023      	str	r3, [r4, #0]
 801e5c8:	6123      	str	r3, [r4, #16]
 801e5ca:	2301      	movs	r3, #1
 801e5cc:	6163      	str	r3, [r4, #20]
 801e5ce:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 801e5d0:	466a      	mov	r2, sp
 801e5d2:	ab01      	add	r3, sp, #4
 801e5d4:	f7ff ffc6 	bl	801e564 <__swhatbuf_r>
 801e5d8:	9900      	ldr	r1, [sp, #0]
 801e5da:	0007      	movs	r7, r0
 801e5dc:	0028      	movs	r0, r5
 801e5de:	f000 f877 	bl	801e6d0 <_malloc_r>
 801e5e2:	2800      	cmp	r0, #0
 801e5e4:	d108      	bne.n	801e5f8 <__smakebuf_r+0x44>
 801e5e6:	220c      	movs	r2, #12
 801e5e8:	5ea3      	ldrsh	r3, [r4, r2]
 801e5ea:	059a      	lsls	r2, r3, #22
 801e5ec:	d4ef      	bmi.n	801e5ce <__smakebuf_r+0x1a>
 801e5ee:	2203      	movs	r2, #3
 801e5f0:	4393      	bics	r3, r2
 801e5f2:	431e      	orrs	r6, r3
 801e5f4:	81a6      	strh	r6, [r4, #12]
 801e5f6:	e7e4      	b.n	801e5c2 <__smakebuf_r+0xe>
 801e5f8:	4b0f      	ldr	r3, [pc, #60]	; (801e638 <__smakebuf_r+0x84>)
 801e5fa:	62ab      	str	r3, [r5, #40]	; 0x28
 801e5fc:	2380      	movs	r3, #128	; 0x80
 801e5fe:	89a2      	ldrh	r2, [r4, #12]
 801e600:	6020      	str	r0, [r4, #0]
 801e602:	4313      	orrs	r3, r2
 801e604:	81a3      	strh	r3, [r4, #12]
 801e606:	9b00      	ldr	r3, [sp, #0]
 801e608:	6120      	str	r0, [r4, #16]
 801e60a:	6163      	str	r3, [r4, #20]
 801e60c:	9b01      	ldr	r3, [sp, #4]
 801e60e:	2b00      	cmp	r3, #0
 801e610:	d00d      	beq.n	801e62e <__smakebuf_r+0x7a>
 801e612:	0028      	movs	r0, r5
 801e614:	230e      	movs	r3, #14
 801e616:	5ee1      	ldrsh	r1, [r4, r3]
 801e618:	f000 f94e 	bl	801e8b8 <_isatty_r>
 801e61c:	2800      	cmp	r0, #0
 801e61e:	d006      	beq.n	801e62e <__smakebuf_r+0x7a>
 801e620:	2203      	movs	r2, #3
 801e622:	89a3      	ldrh	r3, [r4, #12]
 801e624:	4393      	bics	r3, r2
 801e626:	001a      	movs	r2, r3
 801e628:	2301      	movs	r3, #1
 801e62a:	4313      	orrs	r3, r2
 801e62c:	81a3      	strh	r3, [r4, #12]
 801e62e:	89a0      	ldrh	r0, [r4, #12]
 801e630:	4307      	orrs	r7, r0
 801e632:	81a7      	strh	r7, [r4, #12]
 801e634:	e7cb      	b.n	801e5ce <__smakebuf_r+0x1a>
 801e636:	46c0      	nop			; (mov r8, r8)
 801e638:	0801e3a1 	.word	0x0801e3a1

0801e63c <_free_r>:
 801e63c:	b570      	push	{r4, r5, r6, lr}
 801e63e:	0005      	movs	r5, r0
 801e640:	2900      	cmp	r1, #0
 801e642:	d010      	beq.n	801e666 <_free_r+0x2a>
 801e644:	1f0c      	subs	r4, r1, #4
 801e646:	6823      	ldr	r3, [r4, #0]
 801e648:	2b00      	cmp	r3, #0
 801e64a:	da00      	bge.n	801e64e <_free_r+0x12>
 801e64c:	18e4      	adds	r4, r4, r3
 801e64e:	0028      	movs	r0, r5
 801e650:	f000 f958 	bl	801e904 <__malloc_lock>
 801e654:	4a1d      	ldr	r2, [pc, #116]	; (801e6cc <_free_r+0x90>)
 801e656:	6813      	ldr	r3, [r2, #0]
 801e658:	2b00      	cmp	r3, #0
 801e65a:	d105      	bne.n	801e668 <_free_r+0x2c>
 801e65c:	6063      	str	r3, [r4, #4]
 801e65e:	6014      	str	r4, [r2, #0]
 801e660:	0028      	movs	r0, r5
 801e662:	f000 f957 	bl	801e914 <__malloc_unlock>
 801e666:	bd70      	pop	{r4, r5, r6, pc}
 801e668:	42a3      	cmp	r3, r4
 801e66a:	d908      	bls.n	801e67e <_free_r+0x42>
 801e66c:	6821      	ldr	r1, [r4, #0]
 801e66e:	1860      	adds	r0, r4, r1
 801e670:	4283      	cmp	r3, r0
 801e672:	d1f3      	bne.n	801e65c <_free_r+0x20>
 801e674:	6818      	ldr	r0, [r3, #0]
 801e676:	685b      	ldr	r3, [r3, #4]
 801e678:	1841      	adds	r1, r0, r1
 801e67a:	6021      	str	r1, [r4, #0]
 801e67c:	e7ee      	b.n	801e65c <_free_r+0x20>
 801e67e:	001a      	movs	r2, r3
 801e680:	685b      	ldr	r3, [r3, #4]
 801e682:	2b00      	cmp	r3, #0
 801e684:	d001      	beq.n	801e68a <_free_r+0x4e>
 801e686:	42a3      	cmp	r3, r4
 801e688:	d9f9      	bls.n	801e67e <_free_r+0x42>
 801e68a:	6811      	ldr	r1, [r2, #0]
 801e68c:	1850      	adds	r0, r2, r1
 801e68e:	42a0      	cmp	r0, r4
 801e690:	d10b      	bne.n	801e6aa <_free_r+0x6e>
 801e692:	6820      	ldr	r0, [r4, #0]
 801e694:	1809      	adds	r1, r1, r0
 801e696:	1850      	adds	r0, r2, r1
 801e698:	6011      	str	r1, [r2, #0]
 801e69a:	4283      	cmp	r3, r0
 801e69c:	d1e0      	bne.n	801e660 <_free_r+0x24>
 801e69e:	6818      	ldr	r0, [r3, #0]
 801e6a0:	685b      	ldr	r3, [r3, #4]
 801e6a2:	1841      	adds	r1, r0, r1
 801e6a4:	6011      	str	r1, [r2, #0]
 801e6a6:	6053      	str	r3, [r2, #4]
 801e6a8:	e7da      	b.n	801e660 <_free_r+0x24>
 801e6aa:	42a0      	cmp	r0, r4
 801e6ac:	d902      	bls.n	801e6b4 <_free_r+0x78>
 801e6ae:	230c      	movs	r3, #12
 801e6b0:	602b      	str	r3, [r5, #0]
 801e6b2:	e7d5      	b.n	801e660 <_free_r+0x24>
 801e6b4:	6821      	ldr	r1, [r4, #0]
 801e6b6:	1860      	adds	r0, r4, r1
 801e6b8:	4283      	cmp	r3, r0
 801e6ba:	d103      	bne.n	801e6c4 <_free_r+0x88>
 801e6bc:	6818      	ldr	r0, [r3, #0]
 801e6be:	685b      	ldr	r3, [r3, #4]
 801e6c0:	1841      	adds	r1, r0, r1
 801e6c2:	6021      	str	r1, [r4, #0]
 801e6c4:	6063      	str	r3, [r4, #4]
 801e6c6:	6054      	str	r4, [r2, #4]
 801e6c8:	e7ca      	b.n	801e660 <_free_r+0x24>
 801e6ca:	46c0      	nop			; (mov r8, r8)
 801e6cc:	20001348 	.word	0x20001348

0801e6d0 <_malloc_r>:
 801e6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e6d2:	2303      	movs	r3, #3
 801e6d4:	1ccd      	adds	r5, r1, #3
 801e6d6:	439d      	bics	r5, r3
 801e6d8:	3508      	adds	r5, #8
 801e6da:	0006      	movs	r6, r0
 801e6dc:	2d0c      	cmp	r5, #12
 801e6de:	d21f      	bcs.n	801e720 <_malloc_r+0x50>
 801e6e0:	250c      	movs	r5, #12
 801e6e2:	42a9      	cmp	r1, r5
 801e6e4:	d81e      	bhi.n	801e724 <_malloc_r+0x54>
 801e6e6:	0030      	movs	r0, r6
 801e6e8:	f000 f90c 	bl	801e904 <__malloc_lock>
 801e6ec:	4925      	ldr	r1, [pc, #148]	; (801e784 <_malloc_r+0xb4>)
 801e6ee:	680a      	ldr	r2, [r1, #0]
 801e6f0:	0014      	movs	r4, r2
 801e6f2:	2c00      	cmp	r4, #0
 801e6f4:	d11a      	bne.n	801e72c <_malloc_r+0x5c>
 801e6f6:	4f24      	ldr	r7, [pc, #144]	; (801e788 <_malloc_r+0xb8>)
 801e6f8:	683b      	ldr	r3, [r7, #0]
 801e6fa:	2b00      	cmp	r3, #0
 801e6fc:	d104      	bne.n	801e708 <_malloc_r+0x38>
 801e6fe:	0021      	movs	r1, r4
 801e700:	0030      	movs	r0, r6
 801e702:	f000 f843 	bl	801e78c <_sbrk_r>
 801e706:	6038      	str	r0, [r7, #0]
 801e708:	0029      	movs	r1, r5
 801e70a:	0030      	movs	r0, r6
 801e70c:	f000 f83e 	bl	801e78c <_sbrk_r>
 801e710:	1c43      	adds	r3, r0, #1
 801e712:	d12b      	bne.n	801e76c <_malloc_r+0x9c>
 801e714:	230c      	movs	r3, #12
 801e716:	0030      	movs	r0, r6
 801e718:	6033      	str	r3, [r6, #0]
 801e71a:	f000 f8fb 	bl	801e914 <__malloc_unlock>
 801e71e:	e003      	b.n	801e728 <_malloc_r+0x58>
 801e720:	2d00      	cmp	r5, #0
 801e722:	dade      	bge.n	801e6e2 <_malloc_r+0x12>
 801e724:	230c      	movs	r3, #12
 801e726:	6033      	str	r3, [r6, #0]
 801e728:	2000      	movs	r0, #0
 801e72a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e72c:	6823      	ldr	r3, [r4, #0]
 801e72e:	1b5b      	subs	r3, r3, r5
 801e730:	d419      	bmi.n	801e766 <_malloc_r+0x96>
 801e732:	2b0b      	cmp	r3, #11
 801e734:	d903      	bls.n	801e73e <_malloc_r+0x6e>
 801e736:	6023      	str	r3, [r4, #0]
 801e738:	18e4      	adds	r4, r4, r3
 801e73a:	6025      	str	r5, [r4, #0]
 801e73c:	e003      	b.n	801e746 <_malloc_r+0x76>
 801e73e:	6863      	ldr	r3, [r4, #4]
 801e740:	42a2      	cmp	r2, r4
 801e742:	d10e      	bne.n	801e762 <_malloc_r+0x92>
 801e744:	600b      	str	r3, [r1, #0]
 801e746:	0030      	movs	r0, r6
 801e748:	f000 f8e4 	bl	801e914 <__malloc_unlock>
 801e74c:	0020      	movs	r0, r4
 801e74e:	2207      	movs	r2, #7
 801e750:	300b      	adds	r0, #11
 801e752:	1d23      	adds	r3, r4, #4
 801e754:	4390      	bics	r0, r2
 801e756:	1ac2      	subs	r2, r0, r3
 801e758:	4298      	cmp	r0, r3
 801e75a:	d0e6      	beq.n	801e72a <_malloc_r+0x5a>
 801e75c:	1a1b      	subs	r3, r3, r0
 801e75e:	50a3      	str	r3, [r4, r2]
 801e760:	e7e3      	b.n	801e72a <_malloc_r+0x5a>
 801e762:	6053      	str	r3, [r2, #4]
 801e764:	e7ef      	b.n	801e746 <_malloc_r+0x76>
 801e766:	0022      	movs	r2, r4
 801e768:	6864      	ldr	r4, [r4, #4]
 801e76a:	e7c2      	b.n	801e6f2 <_malloc_r+0x22>
 801e76c:	2303      	movs	r3, #3
 801e76e:	1cc4      	adds	r4, r0, #3
 801e770:	439c      	bics	r4, r3
 801e772:	42a0      	cmp	r0, r4
 801e774:	d0e1      	beq.n	801e73a <_malloc_r+0x6a>
 801e776:	1a21      	subs	r1, r4, r0
 801e778:	0030      	movs	r0, r6
 801e77a:	f000 f807 	bl	801e78c <_sbrk_r>
 801e77e:	1c43      	adds	r3, r0, #1
 801e780:	d1db      	bne.n	801e73a <_malloc_r+0x6a>
 801e782:	e7c7      	b.n	801e714 <_malloc_r+0x44>
 801e784:	20001348 	.word	0x20001348
 801e788:	2000134c 	.word	0x2000134c

0801e78c <_sbrk_r>:
 801e78c:	2300      	movs	r3, #0
 801e78e:	b570      	push	{r4, r5, r6, lr}
 801e790:	4d06      	ldr	r5, [pc, #24]	; (801e7ac <_sbrk_r+0x20>)
 801e792:	0004      	movs	r4, r0
 801e794:	0008      	movs	r0, r1
 801e796:	602b      	str	r3, [r5, #0]
 801e798:	f7e6 fe0e 	bl	80053b8 <_sbrk>
 801e79c:	1c43      	adds	r3, r0, #1
 801e79e:	d103      	bne.n	801e7a8 <_sbrk_r+0x1c>
 801e7a0:	682b      	ldr	r3, [r5, #0]
 801e7a2:	2b00      	cmp	r3, #0
 801e7a4:	d000      	beq.n	801e7a8 <_sbrk_r+0x1c>
 801e7a6:	6023      	str	r3, [r4, #0]
 801e7a8:	bd70      	pop	{r4, r5, r6, pc}
 801e7aa:	46c0      	nop			; (mov r8, r8)
 801e7ac:	20001800 	.word	0x20001800

0801e7b0 <__sread>:
 801e7b0:	b570      	push	{r4, r5, r6, lr}
 801e7b2:	000c      	movs	r4, r1
 801e7b4:	250e      	movs	r5, #14
 801e7b6:	5f49      	ldrsh	r1, [r1, r5]
 801e7b8:	f000 f8b4 	bl	801e924 <_read_r>
 801e7bc:	2800      	cmp	r0, #0
 801e7be:	db03      	blt.n	801e7c8 <__sread+0x18>
 801e7c0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801e7c2:	181b      	adds	r3, r3, r0
 801e7c4:	6563      	str	r3, [r4, #84]	; 0x54
 801e7c6:	bd70      	pop	{r4, r5, r6, pc}
 801e7c8:	89a3      	ldrh	r3, [r4, #12]
 801e7ca:	4a02      	ldr	r2, [pc, #8]	; (801e7d4 <__sread+0x24>)
 801e7cc:	4013      	ands	r3, r2
 801e7ce:	81a3      	strh	r3, [r4, #12]
 801e7d0:	e7f9      	b.n	801e7c6 <__sread+0x16>
 801e7d2:	46c0      	nop			; (mov r8, r8)
 801e7d4:	ffffefff 	.word	0xffffefff

0801e7d8 <__swrite>:
 801e7d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e7da:	001f      	movs	r7, r3
 801e7dc:	898b      	ldrh	r3, [r1, #12]
 801e7de:	0005      	movs	r5, r0
 801e7e0:	000c      	movs	r4, r1
 801e7e2:	0016      	movs	r6, r2
 801e7e4:	05db      	lsls	r3, r3, #23
 801e7e6:	d505      	bpl.n	801e7f4 <__swrite+0x1c>
 801e7e8:	230e      	movs	r3, #14
 801e7ea:	5ec9      	ldrsh	r1, [r1, r3]
 801e7ec:	2200      	movs	r2, #0
 801e7ee:	2302      	movs	r3, #2
 801e7f0:	f000 f874 	bl	801e8dc <_lseek_r>
 801e7f4:	89a3      	ldrh	r3, [r4, #12]
 801e7f6:	4a05      	ldr	r2, [pc, #20]	; (801e80c <__swrite+0x34>)
 801e7f8:	0028      	movs	r0, r5
 801e7fa:	4013      	ands	r3, r2
 801e7fc:	81a3      	strh	r3, [r4, #12]
 801e7fe:	0032      	movs	r2, r6
 801e800:	230e      	movs	r3, #14
 801e802:	5ee1      	ldrsh	r1, [r4, r3]
 801e804:	003b      	movs	r3, r7
 801e806:	f000 f81f 	bl	801e848 <_write_r>
 801e80a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e80c:	ffffefff 	.word	0xffffefff

0801e810 <__sseek>:
 801e810:	b570      	push	{r4, r5, r6, lr}
 801e812:	000c      	movs	r4, r1
 801e814:	250e      	movs	r5, #14
 801e816:	5f49      	ldrsh	r1, [r1, r5]
 801e818:	f000 f860 	bl	801e8dc <_lseek_r>
 801e81c:	89a3      	ldrh	r3, [r4, #12]
 801e81e:	1c42      	adds	r2, r0, #1
 801e820:	d103      	bne.n	801e82a <__sseek+0x1a>
 801e822:	4a05      	ldr	r2, [pc, #20]	; (801e838 <__sseek+0x28>)
 801e824:	4013      	ands	r3, r2
 801e826:	81a3      	strh	r3, [r4, #12]
 801e828:	bd70      	pop	{r4, r5, r6, pc}
 801e82a:	2280      	movs	r2, #128	; 0x80
 801e82c:	0152      	lsls	r2, r2, #5
 801e82e:	4313      	orrs	r3, r2
 801e830:	81a3      	strh	r3, [r4, #12]
 801e832:	6560      	str	r0, [r4, #84]	; 0x54
 801e834:	e7f8      	b.n	801e828 <__sseek+0x18>
 801e836:	46c0      	nop			; (mov r8, r8)
 801e838:	ffffefff 	.word	0xffffefff

0801e83c <__sclose>:
 801e83c:	b510      	push	{r4, lr}
 801e83e:	230e      	movs	r3, #14
 801e840:	5ec9      	ldrsh	r1, [r1, r3]
 801e842:	f000 f815 	bl	801e870 <_close_r>
 801e846:	bd10      	pop	{r4, pc}

0801e848 <_write_r>:
 801e848:	b570      	push	{r4, r5, r6, lr}
 801e84a:	0004      	movs	r4, r0
 801e84c:	0008      	movs	r0, r1
 801e84e:	0011      	movs	r1, r2
 801e850:	001a      	movs	r2, r3
 801e852:	2300      	movs	r3, #0
 801e854:	4d05      	ldr	r5, [pc, #20]	; (801e86c <_write_r+0x24>)
 801e856:	602b      	str	r3, [r5, #0]
 801e858:	f7e6 fd92 	bl	8005380 <_write>
 801e85c:	1c43      	adds	r3, r0, #1
 801e85e:	d103      	bne.n	801e868 <_write_r+0x20>
 801e860:	682b      	ldr	r3, [r5, #0]
 801e862:	2b00      	cmp	r3, #0
 801e864:	d000      	beq.n	801e868 <_write_r+0x20>
 801e866:	6023      	str	r3, [r4, #0]
 801e868:	bd70      	pop	{r4, r5, r6, pc}
 801e86a:	46c0      	nop			; (mov r8, r8)
 801e86c:	20001800 	.word	0x20001800

0801e870 <_close_r>:
 801e870:	2300      	movs	r3, #0
 801e872:	b570      	push	{r4, r5, r6, lr}
 801e874:	4d06      	ldr	r5, [pc, #24]	; (801e890 <_close_r+0x20>)
 801e876:	0004      	movs	r4, r0
 801e878:	0008      	movs	r0, r1
 801e87a:	602b      	str	r3, [r5, #0]
 801e87c:	f7e6 fdc8 	bl	8005410 <_close>
 801e880:	1c43      	adds	r3, r0, #1
 801e882:	d103      	bne.n	801e88c <_close_r+0x1c>
 801e884:	682b      	ldr	r3, [r5, #0]
 801e886:	2b00      	cmp	r3, #0
 801e888:	d000      	beq.n	801e88c <_close_r+0x1c>
 801e88a:	6023      	str	r3, [r4, #0]
 801e88c:	bd70      	pop	{r4, r5, r6, pc}
 801e88e:	46c0      	nop			; (mov r8, r8)
 801e890:	20001800 	.word	0x20001800

0801e894 <_fstat_r>:
 801e894:	2300      	movs	r3, #0
 801e896:	b570      	push	{r4, r5, r6, lr}
 801e898:	4d06      	ldr	r5, [pc, #24]	; (801e8b4 <_fstat_r+0x20>)
 801e89a:	0004      	movs	r4, r0
 801e89c:	0008      	movs	r0, r1
 801e89e:	0011      	movs	r1, r2
 801e8a0:	602b      	str	r3, [r5, #0]
 801e8a2:	f7e6 fdbf 	bl	8005424 <_fstat>
 801e8a6:	1c43      	adds	r3, r0, #1
 801e8a8:	d103      	bne.n	801e8b2 <_fstat_r+0x1e>
 801e8aa:	682b      	ldr	r3, [r5, #0]
 801e8ac:	2b00      	cmp	r3, #0
 801e8ae:	d000      	beq.n	801e8b2 <_fstat_r+0x1e>
 801e8b0:	6023      	str	r3, [r4, #0]
 801e8b2:	bd70      	pop	{r4, r5, r6, pc}
 801e8b4:	20001800 	.word	0x20001800

0801e8b8 <_isatty_r>:
 801e8b8:	2300      	movs	r3, #0
 801e8ba:	b570      	push	{r4, r5, r6, lr}
 801e8bc:	4d06      	ldr	r5, [pc, #24]	; (801e8d8 <_isatty_r+0x20>)
 801e8be:	0004      	movs	r4, r0
 801e8c0:	0008      	movs	r0, r1
 801e8c2:	602b      	str	r3, [r5, #0]
 801e8c4:	f7e6 fdbc 	bl	8005440 <_isatty>
 801e8c8:	1c43      	adds	r3, r0, #1
 801e8ca:	d103      	bne.n	801e8d4 <_isatty_r+0x1c>
 801e8cc:	682b      	ldr	r3, [r5, #0]
 801e8ce:	2b00      	cmp	r3, #0
 801e8d0:	d000      	beq.n	801e8d4 <_isatty_r+0x1c>
 801e8d2:	6023      	str	r3, [r4, #0]
 801e8d4:	bd70      	pop	{r4, r5, r6, pc}
 801e8d6:	46c0      	nop			; (mov r8, r8)
 801e8d8:	20001800 	.word	0x20001800

0801e8dc <_lseek_r>:
 801e8dc:	b570      	push	{r4, r5, r6, lr}
 801e8de:	0004      	movs	r4, r0
 801e8e0:	0008      	movs	r0, r1
 801e8e2:	0011      	movs	r1, r2
 801e8e4:	001a      	movs	r2, r3
 801e8e6:	2300      	movs	r3, #0
 801e8e8:	4d05      	ldr	r5, [pc, #20]	; (801e900 <_lseek_r+0x24>)
 801e8ea:	602b      	str	r3, [r5, #0]
 801e8ec:	f7e6 fdb1 	bl	8005452 <_lseek>
 801e8f0:	1c43      	adds	r3, r0, #1
 801e8f2:	d103      	bne.n	801e8fc <_lseek_r+0x20>
 801e8f4:	682b      	ldr	r3, [r5, #0]
 801e8f6:	2b00      	cmp	r3, #0
 801e8f8:	d000      	beq.n	801e8fc <_lseek_r+0x20>
 801e8fa:	6023      	str	r3, [r4, #0]
 801e8fc:	bd70      	pop	{r4, r5, r6, pc}
 801e8fe:	46c0      	nop			; (mov r8, r8)
 801e900:	20001800 	.word	0x20001800

0801e904 <__malloc_lock>:
 801e904:	b510      	push	{r4, lr}
 801e906:	4802      	ldr	r0, [pc, #8]	; (801e910 <__malloc_lock+0xc>)
 801e908:	f7ff fe29 	bl	801e55e <__retarget_lock_acquire_recursive>
 801e90c:	bd10      	pop	{r4, pc}
 801e90e:	46c0      	nop			; (mov r8, r8)
 801e910:	200017f8 	.word	0x200017f8

0801e914 <__malloc_unlock>:
 801e914:	b510      	push	{r4, lr}
 801e916:	4802      	ldr	r0, [pc, #8]	; (801e920 <__malloc_unlock+0xc>)
 801e918:	f7ff fe22 	bl	801e560 <__retarget_lock_release_recursive>
 801e91c:	bd10      	pop	{r4, pc}
 801e91e:	46c0      	nop			; (mov r8, r8)
 801e920:	200017f8 	.word	0x200017f8

0801e924 <_read_r>:
 801e924:	b570      	push	{r4, r5, r6, lr}
 801e926:	0004      	movs	r4, r0
 801e928:	0008      	movs	r0, r1
 801e92a:	0011      	movs	r1, r2
 801e92c:	001a      	movs	r2, r3
 801e92e:	2300      	movs	r3, #0
 801e930:	4d05      	ldr	r5, [pc, #20]	; (801e948 <_read_r+0x24>)
 801e932:	602b      	str	r3, [r5, #0]
 801e934:	f7e6 fd07 	bl	8005346 <_read>
 801e938:	1c43      	adds	r3, r0, #1
 801e93a:	d103      	bne.n	801e944 <_read_r+0x20>
 801e93c:	682b      	ldr	r3, [r5, #0]
 801e93e:	2b00      	cmp	r3, #0
 801e940:	d000      	beq.n	801e944 <_read_r+0x20>
 801e942:	6023      	str	r3, [r4, #0]
 801e944:	bd70      	pop	{r4, r5, r6, pc}
 801e946:	46c0      	nop			; (mov r8, r8)
 801e948:	20001800 	.word	0x20001800

0801e94c <floor>:
 801e94c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e94e:	004b      	lsls	r3, r1, #1
 801e950:	4a3d      	ldr	r2, [pc, #244]	; (801ea48 <floor+0xfc>)
 801e952:	0d5b      	lsrs	r3, r3, #21
 801e954:	189f      	adds	r7, r3, r2
 801e956:	4684      	mov	ip, r0
 801e958:	000e      	movs	r6, r1
 801e95a:	000d      	movs	r5, r1
 801e95c:	0004      	movs	r4, r0
 801e95e:	9001      	str	r0, [sp, #4]
 801e960:	2f13      	cmp	r7, #19
 801e962:	dc34      	bgt.n	801e9ce <floor+0x82>
 801e964:	2f00      	cmp	r7, #0
 801e966:	da16      	bge.n	801e996 <floor+0x4a>
 801e968:	4a38      	ldr	r2, [pc, #224]	; (801ea4c <floor+0x100>)
 801e96a:	4b39      	ldr	r3, [pc, #228]	; (801ea50 <floor+0x104>)
 801e96c:	4660      	mov	r0, ip
 801e96e:	0031      	movs	r1, r6
 801e970:	f7e2 f8fe 	bl	8000b70 <__aeabi_dadd>
 801e974:	2200      	movs	r2, #0
 801e976:	2300      	movs	r3, #0
 801e978:	f7e1 fd6e 	bl	8000458 <__aeabi_dcmpgt>
 801e97c:	2800      	cmp	r0, #0
 801e97e:	d007      	beq.n	801e990 <floor+0x44>
 801e980:	2e00      	cmp	r6, #0
 801e982:	da5d      	bge.n	801ea40 <floor+0xf4>
 801e984:	0073      	lsls	r3, r6, #1
 801e986:	085b      	lsrs	r3, r3, #1
 801e988:	431c      	orrs	r4, r3
 801e98a:	d001      	beq.n	801e990 <floor+0x44>
 801e98c:	2400      	movs	r4, #0
 801e98e:	4d31      	ldr	r5, [pc, #196]	; (801ea54 <floor+0x108>)
 801e990:	46a4      	mov	ip, r4
 801e992:	002e      	movs	r6, r5
 801e994:	e029      	b.n	801e9ea <floor+0x9e>
 801e996:	4b30      	ldr	r3, [pc, #192]	; (801ea58 <floor+0x10c>)
 801e998:	413b      	asrs	r3, r7
 801e99a:	9300      	str	r3, [sp, #0]
 801e99c:	400b      	ands	r3, r1
 801e99e:	4303      	orrs	r3, r0
 801e9a0:	d023      	beq.n	801e9ea <floor+0x9e>
 801e9a2:	4a2a      	ldr	r2, [pc, #168]	; (801ea4c <floor+0x100>)
 801e9a4:	4b2a      	ldr	r3, [pc, #168]	; (801ea50 <floor+0x104>)
 801e9a6:	4660      	mov	r0, ip
 801e9a8:	0031      	movs	r1, r6
 801e9aa:	f7e2 f8e1 	bl	8000b70 <__aeabi_dadd>
 801e9ae:	2200      	movs	r2, #0
 801e9b0:	2300      	movs	r3, #0
 801e9b2:	f7e1 fd51 	bl	8000458 <__aeabi_dcmpgt>
 801e9b6:	2800      	cmp	r0, #0
 801e9b8:	d0ea      	beq.n	801e990 <floor+0x44>
 801e9ba:	2e00      	cmp	r6, #0
 801e9bc:	da03      	bge.n	801e9c6 <floor+0x7a>
 801e9be:	2380      	movs	r3, #128	; 0x80
 801e9c0:	035b      	lsls	r3, r3, #13
 801e9c2:	413b      	asrs	r3, r7
 801e9c4:	18f5      	adds	r5, r6, r3
 801e9c6:	9b00      	ldr	r3, [sp, #0]
 801e9c8:	2400      	movs	r4, #0
 801e9ca:	439d      	bics	r5, r3
 801e9cc:	e7e0      	b.n	801e990 <floor+0x44>
 801e9ce:	2f33      	cmp	r7, #51	; 0x33
 801e9d0:	dd0f      	ble.n	801e9f2 <floor+0xa6>
 801e9d2:	2380      	movs	r3, #128	; 0x80
 801e9d4:	00db      	lsls	r3, r3, #3
 801e9d6:	429f      	cmp	r7, r3
 801e9d8:	d107      	bne.n	801e9ea <floor+0x9e>
 801e9da:	0002      	movs	r2, r0
 801e9dc:	000b      	movs	r3, r1
 801e9de:	4660      	mov	r0, ip
 801e9e0:	0031      	movs	r1, r6
 801e9e2:	f7e2 f8c5 	bl	8000b70 <__aeabi_dadd>
 801e9e6:	4684      	mov	ip, r0
 801e9e8:	000e      	movs	r6, r1
 801e9ea:	4660      	mov	r0, ip
 801e9ec:	0031      	movs	r1, r6
 801e9ee:	b003      	add	sp, #12
 801e9f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e9f2:	4a1a      	ldr	r2, [pc, #104]	; (801ea5c <floor+0x110>)
 801e9f4:	189b      	adds	r3, r3, r2
 801e9f6:	2201      	movs	r2, #1
 801e9f8:	4252      	negs	r2, r2
 801e9fa:	40da      	lsrs	r2, r3
 801e9fc:	9200      	str	r2, [sp, #0]
 801e9fe:	4210      	tst	r0, r2
 801ea00:	d0f3      	beq.n	801e9ea <floor+0x9e>
 801ea02:	4a12      	ldr	r2, [pc, #72]	; (801ea4c <floor+0x100>)
 801ea04:	4b12      	ldr	r3, [pc, #72]	; (801ea50 <floor+0x104>)
 801ea06:	4660      	mov	r0, ip
 801ea08:	0031      	movs	r1, r6
 801ea0a:	f7e2 f8b1 	bl	8000b70 <__aeabi_dadd>
 801ea0e:	2200      	movs	r2, #0
 801ea10:	2300      	movs	r3, #0
 801ea12:	f7e1 fd21 	bl	8000458 <__aeabi_dcmpgt>
 801ea16:	2800      	cmp	r0, #0
 801ea18:	d0ba      	beq.n	801e990 <floor+0x44>
 801ea1a:	2e00      	cmp	r6, #0
 801ea1c:	da02      	bge.n	801ea24 <floor+0xd8>
 801ea1e:	2f14      	cmp	r7, #20
 801ea20:	d103      	bne.n	801ea2a <floor+0xde>
 801ea22:	3501      	adds	r5, #1
 801ea24:	9b00      	ldr	r3, [sp, #0]
 801ea26:	439c      	bics	r4, r3
 801ea28:	e7b2      	b.n	801e990 <floor+0x44>
 801ea2a:	2334      	movs	r3, #52	; 0x34
 801ea2c:	1bdf      	subs	r7, r3, r7
 801ea2e:	3b33      	subs	r3, #51	; 0x33
 801ea30:	40bb      	lsls	r3, r7
 801ea32:	18e4      	adds	r4, r4, r3
 801ea34:	9b01      	ldr	r3, [sp, #4]
 801ea36:	429c      	cmp	r4, r3
 801ea38:	419b      	sbcs	r3, r3
 801ea3a:	425b      	negs	r3, r3
 801ea3c:	18f5      	adds	r5, r6, r3
 801ea3e:	e7f1      	b.n	801ea24 <floor+0xd8>
 801ea40:	2400      	movs	r4, #0
 801ea42:	0025      	movs	r5, r4
 801ea44:	e7a4      	b.n	801e990 <floor+0x44>
 801ea46:	46c0      	nop			; (mov r8, r8)
 801ea48:	fffffc01 	.word	0xfffffc01
 801ea4c:	8800759c 	.word	0x8800759c
 801ea50:	7e37e43c 	.word	0x7e37e43c
 801ea54:	bff00000 	.word	0xbff00000
 801ea58:	000fffff 	.word	0x000fffff
 801ea5c:	fffffbed 	.word	0xfffffbed

0801ea60 <_init>:
 801ea60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ea62:	46c0      	nop			; (mov r8, r8)
 801ea64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ea66:	bc08      	pop	{r3}
 801ea68:	469e      	mov	lr, r3
 801ea6a:	4770      	bx	lr

0801ea6c <_fini>:
 801ea6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ea6e:	46c0      	nop			; (mov r8, r8)
 801ea70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ea72:	bc08      	pop	{r3}
 801ea74:	469e      	mov	lr, r3
 801ea76:	4770      	bx	lr
