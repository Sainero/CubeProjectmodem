
cmwx1zzabz_0xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e8b4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015e0  0801e974  0801e974  0002e974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801ff54  0801ff54  0002ff54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801ff5c  0801ff5c  0002ff5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801ff60  0801ff60  0002ff60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000023c  20000000  0801ff64  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001578  2000023c  080201a0  0003023c  2**2
                  ALLOC
  8 ._user_heap_stack 00000804  200017b4  080201a0  000317b4  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  0003023c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0005627e  00000000  00000000  00030264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000a877  00000000  00000000  000864e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002b18  00000000  00000000  00090d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002730  00000000  00000000  00093878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000226ab  00000000  00000000  00095fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003cf3c  00000000  00000000  000b8653  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000b3b5d  00000000  00000000  000f558f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001a90ec  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a010  00000000  00000000  001a9140  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000023c 	.word	0x2000023c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0801e95c 	.word	0x0801e95c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000240 	.word	0x20000240
 8000104:	0801e95c 	.word	0x0801e95c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdrcmple>:
 8000418:	4684      	mov	ip, r0
 800041a:	1c10      	adds	r0, r2, #0
 800041c:	4662      	mov	r2, ip
 800041e:	468c      	mov	ip, r1
 8000420:	1c19      	adds	r1, r3, #0
 8000422:	4663      	mov	r3, ip
 8000424:	e000      	b.n	8000428 <__aeabi_cdcmpeq>
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdcmpeq>:
 8000428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800042a:	f001 fd2d 	bl	8001e88 <__ledf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	d401      	bmi.n	8000436 <__aeabi_cdcmpeq+0xe>
 8000432:	2100      	movs	r1, #0
 8000434:	42c8      	cmn	r0, r1
 8000436:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000438 <__aeabi_dcmpeq>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f001 fc77 	bl	8001d2c <__eqdf2>
 800043e:	4240      	negs	r0, r0
 8000440:	3001      	adds	r0, #1
 8000442:	bd10      	pop	{r4, pc}

08000444 <__aeabi_dcmplt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 fd1f 	bl	8001e88 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	db01      	blt.n	8000452 <__aeabi_dcmplt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmple>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fd15 	bl	8001e88 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dd01      	ble.n	8000466 <__aeabi_dcmple+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpgt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fc99 	bl	8001da4 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dc01      	bgt.n	800047a <__aeabi_dcmpgt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpge>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fc8f 	bl	8001da4 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	da01      	bge.n	800048e <__aeabi_dcmpge+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_cfrcmple>:
 8000494:	4684      	mov	ip, r0
 8000496:	1c08      	adds	r0, r1, #0
 8000498:	4661      	mov	r1, ip
 800049a:	e7ff      	b.n	800049c <__aeabi_cfcmpeq>

0800049c <__aeabi_cfcmpeq>:
 800049c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800049e:	f000 fb3f 	bl	8000b20 <__lesf2>
 80004a2:	2800      	cmp	r0, #0
 80004a4:	d401      	bmi.n	80004aa <__aeabi_cfcmpeq+0xe>
 80004a6:	2100      	movs	r1, #0
 80004a8:	42c8      	cmn	r0, r1
 80004aa:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004ac <__aeabi_fcmpeq>:
 80004ac:	b510      	push	{r4, lr}
 80004ae:	f000 fac3 	bl	8000a38 <__eqsf2>
 80004b2:	4240      	negs	r0, r0
 80004b4:	3001      	adds	r0, #1
 80004b6:	bd10      	pop	{r4, pc}

080004b8 <__aeabi_fcmplt>:
 80004b8:	b510      	push	{r4, lr}
 80004ba:	f000 fb31 	bl	8000b20 <__lesf2>
 80004be:	2800      	cmp	r0, #0
 80004c0:	db01      	blt.n	80004c6 <__aeabi_fcmplt+0xe>
 80004c2:	2000      	movs	r0, #0
 80004c4:	bd10      	pop	{r4, pc}
 80004c6:	2001      	movs	r0, #1
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)

080004cc <__aeabi_fcmple>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fb27 	bl	8000b20 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	dd01      	ble.n	80004da <__aeabi_fcmple+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmpgt>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fad1 	bl	8000a88 <__gesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dc01      	bgt.n	80004ee <__aeabi_fcmpgt+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpge>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fac7 	bl	8000a88 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	da01      	bge.n	8000502 <__aeabi_fcmpge+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_ldivmod>:
 8000508:	2b00      	cmp	r3, #0
 800050a:	d115      	bne.n	8000538 <__aeabi_ldivmod+0x30>
 800050c:	2a00      	cmp	r2, #0
 800050e:	d113      	bne.n	8000538 <__aeabi_ldivmod+0x30>
 8000510:	2900      	cmp	r1, #0
 8000512:	db06      	blt.n	8000522 <__aeabi_ldivmod+0x1a>
 8000514:	dc01      	bgt.n	800051a <__aeabi_ldivmod+0x12>
 8000516:	2800      	cmp	r0, #0
 8000518:	d006      	beq.n	8000528 <__aeabi_ldivmod+0x20>
 800051a:	2000      	movs	r0, #0
 800051c:	43c0      	mvns	r0, r0
 800051e:	0841      	lsrs	r1, r0, #1
 8000520:	e002      	b.n	8000528 <__aeabi_ldivmod+0x20>
 8000522:	2180      	movs	r1, #128	; 0x80
 8000524:	0609      	lsls	r1, r1, #24
 8000526:	2000      	movs	r0, #0
 8000528:	b407      	push	{r0, r1, r2}
 800052a:	4802      	ldr	r0, [pc, #8]	; (8000534 <__aeabi_ldivmod+0x2c>)
 800052c:	a101      	add	r1, pc, #4	; (adr r1, 8000534 <__aeabi_ldivmod+0x2c>)
 800052e:	1840      	adds	r0, r0, r1
 8000530:	9002      	str	r0, [sp, #8]
 8000532:	bd03      	pop	{r0, r1, pc}
 8000534:	fffffee1 	.word	0xfffffee1
 8000538:	b403      	push	{r0, r1}
 800053a:	4668      	mov	r0, sp
 800053c:	b501      	push	{r0, lr}
 800053e:	9802      	ldr	r0, [sp, #8]
 8000540:	f000 f950 	bl	80007e4 <__gnu_ldivmod_helper>
 8000544:	9b01      	ldr	r3, [sp, #4]
 8000546:	469e      	mov	lr, r3
 8000548:	b002      	add	sp, #8
 800054a:	bc0c      	pop	{r2, r3}
 800054c:	4770      	bx	lr
 800054e:	46c0      	nop			; (mov r8, r8)

08000550 <__aeabi_uldivmod>:
 8000550:	2b00      	cmp	r3, #0
 8000552:	d111      	bne.n	8000578 <__aeabi_uldivmod+0x28>
 8000554:	2a00      	cmp	r2, #0
 8000556:	d10f      	bne.n	8000578 <__aeabi_uldivmod+0x28>
 8000558:	2900      	cmp	r1, #0
 800055a:	d100      	bne.n	800055e <__aeabi_uldivmod+0xe>
 800055c:	2800      	cmp	r0, #0
 800055e:	d002      	beq.n	8000566 <__aeabi_uldivmod+0x16>
 8000560:	2100      	movs	r1, #0
 8000562:	43c9      	mvns	r1, r1
 8000564:	1c08      	adds	r0, r1, #0
 8000566:	b407      	push	{r0, r1, r2}
 8000568:	4802      	ldr	r0, [pc, #8]	; (8000574 <__aeabi_uldivmod+0x24>)
 800056a:	a102      	add	r1, pc, #8	; (adr r1, 8000574 <__aeabi_uldivmod+0x24>)
 800056c:	1840      	adds	r0, r0, r1
 800056e:	9002      	str	r0, [sp, #8]
 8000570:	bd03      	pop	{r0, r1, pc}
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	fffffea1 	.word	0xfffffea1
 8000578:	b403      	push	{r0, r1}
 800057a:	4668      	mov	r0, sp
 800057c:	b501      	push	{r0, lr}
 800057e:	9802      	ldr	r0, [sp, #8]
 8000580:	f000 f864 	bl	800064c <__udivmoddi4>
 8000584:	9b01      	ldr	r3, [sp, #4]
 8000586:	469e      	mov	lr, r3
 8000588:	b002      	add	sp, #8
 800058a:	bc0c      	pop	{r2, r3}
 800058c:	4770      	bx	lr
 800058e:	46c0      	nop			; (mov r8, r8)

08000590 <__aeabi_lmul>:
 8000590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000592:	0415      	lsls	r5, r2, #16
 8000594:	0c2d      	lsrs	r5, r5, #16
 8000596:	000f      	movs	r7, r1
 8000598:	0001      	movs	r1, r0
 800059a:	002e      	movs	r6, r5
 800059c:	46c6      	mov	lr, r8
 800059e:	4684      	mov	ip, r0
 80005a0:	0400      	lsls	r0, r0, #16
 80005a2:	0c14      	lsrs	r4, r2, #16
 80005a4:	0c00      	lsrs	r0, r0, #16
 80005a6:	0c09      	lsrs	r1, r1, #16
 80005a8:	4346      	muls	r6, r0
 80005aa:	434d      	muls	r5, r1
 80005ac:	4360      	muls	r0, r4
 80005ae:	4361      	muls	r1, r4
 80005b0:	1940      	adds	r0, r0, r5
 80005b2:	0c34      	lsrs	r4, r6, #16
 80005b4:	1824      	adds	r4, r4, r0
 80005b6:	b500      	push	{lr}
 80005b8:	42a5      	cmp	r5, r4
 80005ba:	d903      	bls.n	80005c4 <__aeabi_lmul+0x34>
 80005bc:	2080      	movs	r0, #128	; 0x80
 80005be:	0240      	lsls	r0, r0, #9
 80005c0:	4680      	mov	r8, r0
 80005c2:	4441      	add	r1, r8
 80005c4:	0c25      	lsrs	r5, r4, #16
 80005c6:	186d      	adds	r5, r5, r1
 80005c8:	4661      	mov	r1, ip
 80005ca:	4359      	muls	r1, r3
 80005cc:	437a      	muls	r2, r7
 80005ce:	0430      	lsls	r0, r6, #16
 80005d0:	1949      	adds	r1, r1, r5
 80005d2:	0424      	lsls	r4, r4, #16
 80005d4:	0c00      	lsrs	r0, r0, #16
 80005d6:	1820      	adds	r0, r4, r0
 80005d8:	1889      	adds	r1, r1, r2
 80005da:	bc80      	pop	{r7}
 80005dc:	46b8      	mov	r8, r7
 80005de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005e0 <__aeabi_f2uiz>:
 80005e0:	219e      	movs	r1, #158	; 0x9e
 80005e2:	b510      	push	{r4, lr}
 80005e4:	05c9      	lsls	r1, r1, #23
 80005e6:	1c04      	adds	r4, r0, #0
 80005e8:	f7ff ff84 	bl	80004f4 <__aeabi_fcmpge>
 80005ec:	2800      	cmp	r0, #0
 80005ee:	d103      	bne.n	80005f8 <__aeabi_f2uiz+0x18>
 80005f0:	1c20      	adds	r0, r4, #0
 80005f2:	f000 fca7 	bl	8000f44 <__aeabi_f2iz>
 80005f6:	bd10      	pop	{r4, pc}
 80005f8:	219e      	movs	r1, #158	; 0x9e
 80005fa:	1c20      	adds	r0, r4, #0
 80005fc:	05c9      	lsls	r1, r1, #23
 80005fe:	f000 fad9 	bl	8000bb4 <__aeabi_fsub>
 8000602:	f000 fc9f 	bl	8000f44 <__aeabi_f2iz>
 8000606:	2380      	movs	r3, #128	; 0x80
 8000608:	061b      	lsls	r3, r3, #24
 800060a:	469c      	mov	ip, r3
 800060c:	4460      	add	r0, ip
 800060e:	e7f2      	b.n	80005f6 <__aeabi_f2uiz+0x16>

08000610 <__aeabi_d2uiz>:
 8000610:	b570      	push	{r4, r5, r6, lr}
 8000612:	2200      	movs	r2, #0
 8000614:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <__aeabi_d2uiz+0x38>)
 8000616:	0004      	movs	r4, r0
 8000618:	000d      	movs	r5, r1
 800061a:	f7ff ff31 	bl	8000480 <__aeabi_dcmpge>
 800061e:	2800      	cmp	r0, #0
 8000620:	d104      	bne.n	800062c <__aeabi_d2uiz+0x1c>
 8000622:	0020      	movs	r0, r4
 8000624:	0029      	movs	r1, r5
 8000626:	f002 fa9d 	bl	8002b64 <__aeabi_d2iz>
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <__aeabi_d2uiz+0x38>)
 800062e:	2200      	movs	r2, #0
 8000630:	0020      	movs	r0, r4
 8000632:	0029      	movs	r1, r5
 8000634:	f001 ff04 	bl	8002440 <__aeabi_dsub>
 8000638:	f002 fa94 	bl	8002b64 <__aeabi_d2iz>
 800063c:	2380      	movs	r3, #128	; 0x80
 800063e:	061b      	lsls	r3, r3, #24
 8000640:	469c      	mov	ip, r3
 8000642:	4460      	add	r0, ip
 8000644:	e7f1      	b.n	800062a <__aeabi_d2uiz+0x1a>
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	41e00000 	.word	0x41e00000

0800064c <__udivmoddi4>:
 800064c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800064e:	4657      	mov	r7, sl
 8000650:	464e      	mov	r6, r9
 8000652:	4645      	mov	r5, r8
 8000654:	46de      	mov	lr, fp
 8000656:	b5e0      	push	{r5, r6, r7, lr}
 8000658:	0004      	movs	r4, r0
 800065a:	000d      	movs	r5, r1
 800065c:	4692      	mov	sl, r2
 800065e:	4699      	mov	r9, r3
 8000660:	b083      	sub	sp, #12
 8000662:	428b      	cmp	r3, r1
 8000664:	d830      	bhi.n	80006c8 <__udivmoddi4+0x7c>
 8000666:	d02d      	beq.n	80006c4 <__udivmoddi4+0x78>
 8000668:	4649      	mov	r1, r9
 800066a:	4650      	mov	r0, sl
 800066c:	f002 fb6c 	bl	8002d48 <__clzdi2>
 8000670:	0029      	movs	r1, r5
 8000672:	0006      	movs	r6, r0
 8000674:	0020      	movs	r0, r4
 8000676:	f002 fb67 	bl	8002d48 <__clzdi2>
 800067a:	1a33      	subs	r3, r6, r0
 800067c:	4698      	mov	r8, r3
 800067e:	3b20      	subs	r3, #32
 8000680:	469b      	mov	fp, r3
 8000682:	d433      	bmi.n	80006ec <__udivmoddi4+0xa0>
 8000684:	465a      	mov	r2, fp
 8000686:	4653      	mov	r3, sl
 8000688:	4093      	lsls	r3, r2
 800068a:	4642      	mov	r2, r8
 800068c:	001f      	movs	r7, r3
 800068e:	4653      	mov	r3, sl
 8000690:	4093      	lsls	r3, r2
 8000692:	001e      	movs	r6, r3
 8000694:	42af      	cmp	r7, r5
 8000696:	d83a      	bhi.n	800070e <__udivmoddi4+0xc2>
 8000698:	42af      	cmp	r7, r5
 800069a:	d100      	bne.n	800069e <__udivmoddi4+0x52>
 800069c:	e078      	b.n	8000790 <__udivmoddi4+0x144>
 800069e:	465b      	mov	r3, fp
 80006a0:	1ba4      	subs	r4, r4, r6
 80006a2:	41bd      	sbcs	r5, r7
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	da00      	bge.n	80006aa <__udivmoddi4+0x5e>
 80006a8:	e075      	b.n	8000796 <__udivmoddi4+0x14a>
 80006aa:	2200      	movs	r2, #0
 80006ac:	2300      	movs	r3, #0
 80006ae:	9200      	str	r2, [sp, #0]
 80006b0:	9301      	str	r3, [sp, #4]
 80006b2:	2301      	movs	r3, #1
 80006b4:	465a      	mov	r2, fp
 80006b6:	4093      	lsls	r3, r2
 80006b8:	9301      	str	r3, [sp, #4]
 80006ba:	2301      	movs	r3, #1
 80006bc:	4642      	mov	r2, r8
 80006be:	4093      	lsls	r3, r2
 80006c0:	9300      	str	r3, [sp, #0]
 80006c2:	e028      	b.n	8000716 <__udivmoddi4+0xca>
 80006c4:	4282      	cmp	r2, r0
 80006c6:	d9cf      	bls.n	8000668 <__udivmoddi4+0x1c>
 80006c8:	2200      	movs	r2, #0
 80006ca:	2300      	movs	r3, #0
 80006cc:	9200      	str	r2, [sp, #0]
 80006ce:	9301      	str	r3, [sp, #4]
 80006d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <__udivmoddi4+0x8e>
 80006d6:	601c      	str	r4, [r3, #0]
 80006d8:	605d      	str	r5, [r3, #4]
 80006da:	9800      	ldr	r0, [sp, #0]
 80006dc:	9901      	ldr	r1, [sp, #4]
 80006de:	b003      	add	sp, #12
 80006e0:	bcf0      	pop	{r4, r5, r6, r7}
 80006e2:	46bb      	mov	fp, r7
 80006e4:	46b2      	mov	sl, r6
 80006e6:	46a9      	mov	r9, r5
 80006e8:	46a0      	mov	r8, r4
 80006ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006ec:	4642      	mov	r2, r8
 80006ee:	2320      	movs	r3, #32
 80006f0:	1a9b      	subs	r3, r3, r2
 80006f2:	4652      	mov	r2, sl
 80006f4:	40da      	lsrs	r2, r3
 80006f6:	4641      	mov	r1, r8
 80006f8:	0013      	movs	r3, r2
 80006fa:	464a      	mov	r2, r9
 80006fc:	408a      	lsls	r2, r1
 80006fe:	0017      	movs	r7, r2
 8000700:	4642      	mov	r2, r8
 8000702:	431f      	orrs	r7, r3
 8000704:	4653      	mov	r3, sl
 8000706:	4093      	lsls	r3, r2
 8000708:	001e      	movs	r6, r3
 800070a:	42af      	cmp	r7, r5
 800070c:	d9c4      	bls.n	8000698 <__udivmoddi4+0x4c>
 800070e:	2200      	movs	r2, #0
 8000710:	2300      	movs	r3, #0
 8000712:	9200      	str	r2, [sp, #0]
 8000714:	9301      	str	r3, [sp, #4]
 8000716:	4643      	mov	r3, r8
 8000718:	2b00      	cmp	r3, #0
 800071a:	d0d9      	beq.n	80006d0 <__udivmoddi4+0x84>
 800071c:	07fb      	lsls	r3, r7, #31
 800071e:	0872      	lsrs	r2, r6, #1
 8000720:	431a      	orrs	r2, r3
 8000722:	4646      	mov	r6, r8
 8000724:	087b      	lsrs	r3, r7, #1
 8000726:	e00e      	b.n	8000746 <__udivmoddi4+0xfa>
 8000728:	42ab      	cmp	r3, r5
 800072a:	d101      	bne.n	8000730 <__udivmoddi4+0xe4>
 800072c:	42a2      	cmp	r2, r4
 800072e:	d80c      	bhi.n	800074a <__udivmoddi4+0xfe>
 8000730:	1aa4      	subs	r4, r4, r2
 8000732:	419d      	sbcs	r5, r3
 8000734:	2001      	movs	r0, #1
 8000736:	1924      	adds	r4, r4, r4
 8000738:	416d      	adcs	r5, r5
 800073a:	2100      	movs	r1, #0
 800073c:	3e01      	subs	r6, #1
 800073e:	1824      	adds	r4, r4, r0
 8000740:	414d      	adcs	r5, r1
 8000742:	2e00      	cmp	r6, #0
 8000744:	d006      	beq.n	8000754 <__udivmoddi4+0x108>
 8000746:	42ab      	cmp	r3, r5
 8000748:	d9ee      	bls.n	8000728 <__udivmoddi4+0xdc>
 800074a:	3e01      	subs	r6, #1
 800074c:	1924      	adds	r4, r4, r4
 800074e:	416d      	adcs	r5, r5
 8000750:	2e00      	cmp	r6, #0
 8000752:	d1f8      	bne.n	8000746 <__udivmoddi4+0xfa>
 8000754:	9800      	ldr	r0, [sp, #0]
 8000756:	9901      	ldr	r1, [sp, #4]
 8000758:	465b      	mov	r3, fp
 800075a:	1900      	adds	r0, r0, r4
 800075c:	4169      	adcs	r1, r5
 800075e:	2b00      	cmp	r3, #0
 8000760:	db24      	blt.n	80007ac <__udivmoddi4+0x160>
 8000762:	002b      	movs	r3, r5
 8000764:	465a      	mov	r2, fp
 8000766:	4644      	mov	r4, r8
 8000768:	40d3      	lsrs	r3, r2
 800076a:	002a      	movs	r2, r5
 800076c:	40e2      	lsrs	r2, r4
 800076e:	001c      	movs	r4, r3
 8000770:	465b      	mov	r3, fp
 8000772:	0015      	movs	r5, r2
 8000774:	2b00      	cmp	r3, #0
 8000776:	db2a      	blt.n	80007ce <__udivmoddi4+0x182>
 8000778:	0026      	movs	r6, r4
 800077a:	409e      	lsls	r6, r3
 800077c:	0033      	movs	r3, r6
 800077e:	0026      	movs	r6, r4
 8000780:	4647      	mov	r7, r8
 8000782:	40be      	lsls	r6, r7
 8000784:	0032      	movs	r2, r6
 8000786:	1a80      	subs	r0, r0, r2
 8000788:	4199      	sbcs	r1, r3
 800078a:	9000      	str	r0, [sp, #0]
 800078c:	9101      	str	r1, [sp, #4]
 800078e:	e79f      	b.n	80006d0 <__udivmoddi4+0x84>
 8000790:	42a3      	cmp	r3, r4
 8000792:	d8bc      	bhi.n	800070e <__udivmoddi4+0xc2>
 8000794:	e783      	b.n	800069e <__udivmoddi4+0x52>
 8000796:	4642      	mov	r2, r8
 8000798:	2320      	movs	r3, #32
 800079a:	2100      	movs	r1, #0
 800079c:	1a9b      	subs	r3, r3, r2
 800079e:	2200      	movs	r2, #0
 80007a0:	9100      	str	r1, [sp, #0]
 80007a2:	9201      	str	r2, [sp, #4]
 80007a4:	2201      	movs	r2, #1
 80007a6:	40da      	lsrs	r2, r3
 80007a8:	9201      	str	r2, [sp, #4]
 80007aa:	e786      	b.n	80006ba <__udivmoddi4+0x6e>
 80007ac:	4642      	mov	r2, r8
 80007ae:	2320      	movs	r3, #32
 80007b0:	1a9b      	subs	r3, r3, r2
 80007b2:	002a      	movs	r2, r5
 80007b4:	4646      	mov	r6, r8
 80007b6:	409a      	lsls	r2, r3
 80007b8:	0023      	movs	r3, r4
 80007ba:	40f3      	lsrs	r3, r6
 80007bc:	4644      	mov	r4, r8
 80007be:	4313      	orrs	r3, r2
 80007c0:	002a      	movs	r2, r5
 80007c2:	40e2      	lsrs	r2, r4
 80007c4:	001c      	movs	r4, r3
 80007c6:	465b      	mov	r3, fp
 80007c8:	0015      	movs	r5, r2
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	dad4      	bge.n	8000778 <__udivmoddi4+0x12c>
 80007ce:	4642      	mov	r2, r8
 80007d0:	002f      	movs	r7, r5
 80007d2:	2320      	movs	r3, #32
 80007d4:	0026      	movs	r6, r4
 80007d6:	4097      	lsls	r7, r2
 80007d8:	1a9b      	subs	r3, r3, r2
 80007da:	40de      	lsrs	r6, r3
 80007dc:	003b      	movs	r3, r7
 80007de:	4333      	orrs	r3, r6
 80007e0:	e7cd      	b.n	800077e <__udivmoddi4+0x132>
 80007e2:	46c0      	nop			; (mov r8, r8)

080007e4 <__gnu_ldivmod_helper>:
 80007e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007e6:	46ce      	mov	lr, r9
 80007e8:	4647      	mov	r7, r8
 80007ea:	b580      	push	{r7, lr}
 80007ec:	4691      	mov	r9, r2
 80007ee:	4698      	mov	r8, r3
 80007f0:	0004      	movs	r4, r0
 80007f2:	000d      	movs	r5, r1
 80007f4:	f002 fab4 	bl	8002d60 <__divdi3>
 80007f8:	0007      	movs	r7, r0
 80007fa:	000e      	movs	r6, r1
 80007fc:	0002      	movs	r2, r0
 80007fe:	000b      	movs	r3, r1
 8000800:	4648      	mov	r0, r9
 8000802:	4641      	mov	r1, r8
 8000804:	f7ff fec4 	bl	8000590 <__aeabi_lmul>
 8000808:	1a24      	subs	r4, r4, r0
 800080a:	418d      	sbcs	r5, r1
 800080c:	9b08      	ldr	r3, [sp, #32]
 800080e:	0038      	movs	r0, r7
 8000810:	0031      	movs	r1, r6
 8000812:	601c      	str	r4, [r3, #0]
 8000814:	605d      	str	r5, [r3, #4]
 8000816:	bcc0      	pop	{r6, r7}
 8000818:	46b9      	mov	r9, r7
 800081a:	46b0      	mov	r8, r6
 800081c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800081e:	46c0      	nop			; (mov r8, r8)

08000820 <__aeabi_fdiv>:
 8000820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000822:	464f      	mov	r7, r9
 8000824:	4646      	mov	r6, r8
 8000826:	46d6      	mov	lr, sl
 8000828:	0245      	lsls	r5, r0, #9
 800082a:	b5c0      	push	{r6, r7, lr}
 800082c:	0047      	lsls	r7, r0, #1
 800082e:	1c0c      	adds	r4, r1, #0
 8000830:	0a6d      	lsrs	r5, r5, #9
 8000832:	0e3f      	lsrs	r7, r7, #24
 8000834:	0fc6      	lsrs	r6, r0, #31
 8000836:	2f00      	cmp	r7, #0
 8000838:	d066      	beq.n	8000908 <__aeabi_fdiv+0xe8>
 800083a:	2fff      	cmp	r7, #255	; 0xff
 800083c:	d06c      	beq.n	8000918 <__aeabi_fdiv+0xf8>
 800083e:	2300      	movs	r3, #0
 8000840:	00ea      	lsls	r2, r5, #3
 8000842:	2580      	movs	r5, #128	; 0x80
 8000844:	4699      	mov	r9, r3
 8000846:	469a      	mov	sl, r3
 8000848:	04ed      	lsls	r5, r5, #19
 800084a:	4315      	orrs	r5, r2
 800084c:	3f7f      	subs	r7, #127	; 0x7f
 800084e:	0260      	lsls	r0, r4, #9
 8000850:	0061      	lsls	r1, r4, #1
 8000852:	0a43      	lsrs	r3, r0, #9
 8000854:	4698      	mov	r8, r3
 8000856:	0e09      	lsrs	r1, r1, #24
 8000858:	0fe4      	lsrs	r4, r4, #31
 800085a:	2900      	cmp	r1, #0
 800085c:	d048      	beq.n	80008f0 <__aeabi_fdiv+0xd0>
 800085e:	29ff      	cmp	r1, #255	; 0xff
 8000860:	d010      	beq.n	8000884 <__aeabi_fdiv+0x64>
 8000862:	2280      	movs	r2, #128	; 0x80
 8000864:	00d8      	lsls	r0, r3, #3
 8000866:	04d2      	lsls	r2, r2, #19
 8000868:	4302      	orrs	r2, r0
 800086a:	4690      	mov	r8, r2
 800086c:	2000      	movs	r0, #0
 800086e:	397f      	subs	r1, #127	; 0x7f
 8000870:	464a      	mov	r2, r9
 8000872:	0033      	movs	r3, r6
 8000874:	1a7f      	subs	r7, r7, r1
 8000876:	4302      	orrs	r2, r0
 8000878:	496c      	ldr	r1, [pc, #432]	; (8000a2c <__aeabi_fdiv+0x20c>)
 800087a:	0092      	lsls	r2, r2, #2
 800087c:	588a      	ldr	r2, [r1, r2]
 800087e:	4063      	eors	r3, r4
 8000880:	b2db      	uxtb	r3, r3
 8000882:	4697      	mov	pc, r2
 8000884:	2b00      	cmp	r3, #0
 8000886:	d16d      	bne.n	8000964 <__aeabi_fdiv+0x144>
 8000888:	2002      	movs	r0, #2
 800088a:	3fff      	subs	r7, #255	; 0xff
 800088c:	e033      	b.n	80008f6 <__aeabi_fdiv+0xd6>
 800088e:	2300      	movs	r3, #0
 8000890:	4698      	mov	r8, r3
 8000892:	0026      	movs	r6, r4
 8000894:	4645      	mov	r5, r8
 8000896:	4682      	mov	sl, r0
 8000898:	4653      	mov	r3, sl
 800089a:	2b02      	cmp	r3, #2
 800089c:	d100      	bne.n	80008a0 <__aeabi_fdiv+0x80>
 800089e:	e07f      	b.n	80009a0 <__aeabi_fdiv+0x180>
 80008a0:	2b03      	cmp	r3, #3
 80008a2:	d100      	bne.n	80008a6 <__aeabi_fdiv+0x86>
 80008a4:	e094      	b.n	80009d0 <__aeabi_fdiv+0x1b0>
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d017      	beq.n	80008da <__aeabi_fdiv+0xba>
 80008aa:	0038      	movs	r0, r7
 80008ac:	307f      	adds	r0, #127	; 0x7f
 80008ae:	2800      	cmp	r0, #0
 80008b0:	dd5f      	ble.n	8000972 <__aeabi_fdiv+0x152>
 80008b2:	076b      	lsls	r3, r5, #29
 80008b4:	d004      	beq.n	80008c0 <__aeabi_fdiv+0xa0>
 80008b6:	230f      	movs	r3, #15
 80008b8:	402b      	ands	r3, r5
 80008ba:	2b04      	cmp	r3, #4
 80008bc:	d000      	beq.n	80008c0 <__aeabi_fdiv+0xa0>
 80008be:	3504      	adds	r5, #4
 80008c0:	012b      	lsls	r3, r5, #4
 80008c2:	d503      	bpl.n	80008cc <__aeabi_fdiv+0xac>
 80008c4:	0038      	movs	r0, r7
 80008c6:	4b5a      	ldr	r3, [pc, #360]	; (8000a30 <__aeabi_fdiv+0x210>)
 80008c8:	3080      	adds	r0, #128	; 0x80
 80008ca:	401d      	ands	r5, r3
 80008cc:	28fe      	cmp	r0, #254	; 0xfe
 80008ce:	dc67      	bgt.n	80009a0 <__aeabi_fdiv+0x180>
 80008d0:	01ad      	lsls	r5, r5, #6
 80008d2:	0a6d      	lsrs	r5, r5, #9
 80008d4:	b2c0      	uxtb	r0, r0
 80008d6:	e002      	b.n	80008de <__aeabi_fdiv+0xbe>
 80008d8:	001e      	movs	r6, r3
 80008da:	2000      	movs	r0, #0
 80008dc:	2500      	movs	r5, #0
 80008de:	05c0      	lsls	r0, r0, #23
 80008e0:	4328      	orrs	r0, r5
 80008e2:	07f6      	lsls	r6, r6, #31
 80008e4:	4330      	orrs	r0, r6
 80008e6:	bce0      	pop	{r5, r6, r7}
 80008e8:	46ba      	mov	sl, r7
 80008ea:	46b1      	mov	r9, r6
 80008ec:	46a8      	mov	r8, r5
 80008ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d12b      	bne.n	800094c <__aeabi_fdiv+0x12c>
 80008f4:	2001      	movs	r0, #1
 80008f6:	464a      	mov	r2, r9
 80008f8:	0033      	movs	r3, r6
 80008fa:	494e      	ldr	r1, [pc, #312]	; (8000a34 <__aeabi_fdiv+0x214>)
 80008fc:	4302      	orrs	r2, r0
 80008fe:	0092      	lsls	r2, r2, #2
 8000900:	588a      	ldr	r2, [r1, r2]
 8000902:	4063      	eors	r3, r4
 8000904:	b2db      	uxtb	r3, r3
 8000906:	4697      	mov	pc, r2
 8000908:	2d00      	cmp	r5, #0
 800090a:	d113      	bne.n	8000934 <__aeabi_fdiv+0x114>
 800090c:	2304      	movs	r3, #4
 800090e:	4699      	mov	r9, r3
 8000910:	3b03      	subs	r3, #3
 8000912:	2700      	movs	r7, #0
 8000914:	469a      	mov	sl, r3
 8000916:	e79a      	b.n	800084e <__aeabi_fdiv+0x2e>
 8000918:	2d00      	cmp	r5, #0
 800091a:	d105      	bne.n	8000928 <__aeabi_fdiv+0x108>
 800091c:	2308      	movs	r3, #8
 800091e:	4699      	mov	r9, r3
 8000920:	3b06      	subs	r3, #6
 8000922:	27ff      	movs	r7, #255	; 0xff
 8000924:	469a      	mov	sl, r3
 8000926:	e792      	b.n	800084e <__aeabi_fdiv+0x2e>
 8000928:	230c      	movs	r3, #12
 800092a:	4699      	mov	r9, r3
 800092c:	3b09      	subs	r3, #9
 800092e:	27ff      	movs	r7, #255	; 0xff
 8000930:	469a      	mov	sl, r3
 8000932:	e78c      	b.n	800084e <__aeabi_fdiv+0x2e>
 8000934:	0028      	movs	r0, r5
 8000936:	f002 f9e9 	bl	8002d0c <__clzsi2>
 800093a:	2776      	movs	r7, #118	; 0x76
 800093c:	1f43      	subs	r3, r0, #5
 800093e:	409d      	lsls	r5, r3
 8000940:	2300      	movs	r3, #0
 8000942:	427f      	negs	r7, r7
 8000944:	4699      	mov	r9, r3
 8000946:	469a      	mov	sl, r3
 8000948:	1a3f      	subs	r7, r7, r0
 800094a:	e780      	b.n	800084e <__aeabi_fdiv+0x2e>
 800094c:	0018      	movs	r0, r3
 800094e:	f002 f9dd 	bl	8002d0c <__clzsi2>
 8000952:	4642      	mov	r2, r8
 8000954:	1f43      	subs	r3, r0, #5
 8000956:	2176      	movs	r1, #118	; 0x76
 8000958:	409a      	lsls	r2, r3
 800095a:	4249      	negs	r1, r1
 800095c:	1a09      	subs	r1, r1, r0
 800095e:	4690      	mov	r8, r2
 8000960:	2000      	movs	r0, #0
 8000962:	e785      	b.n	8000870 <__aeabi_fdiv+0x50>
 8000964:	21ff      	movs	r1, #255	; 0xff
 8000966:	2003      	movs	r0, #3
 8000968:	e782      	b.n	8000870 <__aeabi_fdiv+0x50>
 800096a:	001e      	movs	r6, r3
 800096c:	20ff      	movs	r0, #255	; 0xff
 800096e:	2500      	movs	r5, #0
 8000970:	e7b5      	b.n	80008de <__aeabi_fdiv+0xbe>
 8000972:	2301      	movs	r3, #1
 8000974:	1a1b      	subs	r3, r3, r0
 8000976:	2b1b      	cmp	r3, #27
 8000978:	dcaf      	bgt.n	80008da <__aeabi_fdiv+0xba>
 800097a:	379e      	adds	r7, #158	; 0x9e
 800097c:	0029      	movs	r1, r5
 800097e:	40bd      	lsls	r5, r7
 8000980:	40d9      	lsrs	r1, r3
 8000982:	1e6a      	subs	r2, r5, #1
 8000984:	4195      	sbcs	r5, r2
 8000986:	430d      	orrs	r5, r1
 8000988:	076b      	lsls	r3, r5, #29
 800098a:	d004      	beq.n	8000996 <__aeabi_fdiv+0x176>
 800098c:	230f      	movs	r3, #15
 800098e:	402b      	ands	r3, r5
 8000990:	2b04      	cmp	r3, #4
 8000992:	d000      	beq.n	8000996 <__aeabi_fdiv+0x176>
 8000994:	3504      	adds	r5, #4
 8000996:	016b      	lsls	r3, r5, #5
 8000998:	d544      	bpl.n	8000a24 <__aeabi_fdiv+0x204>
 800099a:	2001      	movs	r0, #1
 800099c:	2500      	movs	r5, #0
 800099e:	e79e      	b.n	80008de <__aeabi_fdiv+0xbe>
 80009a0:	20ff      	movs	r0, #255	; 0xff
 80009a2:	2500      	movs	r5, #0
 80009a4:	e79b      	b.n	80008de <__aeabi_fdiv+0xbe>
 80009a6:	2580      	movs	r5, #128	; 0x80
 80009a8:	2600      	movs	r6, #0
 80009aa:	20ff      	movs	r0, #255	; 0xff
 80009ac:	03ed      	lsls	r5, r5, #15
 80009ae:	e796      	b.n	80008de <__aeabi_fdiv+0xbe>
 80009b0:	2300      	movs	r3, #0
 80009b2:	4698      	mov	r8, r3
 80009b4:	2080      	movs	r0, #128	; 0x80
 80009b6:	03c0      	lsls	r0, r0, #15
 80009b8:	4205      	tst	r5, r0
 80009ba:	d009      	beq.n	80009d0 <__aeabi_fdiv+0x1b0>
 80009bc:	4643      	mov	r3, r8
 80009be:	4203      	tst	r3, r0
 80009c0:	d106      	bne.n	80009d0 <__aeabi_fdiv+0x1b0>
 80009c2:	4645      	mov	r5, r8
 80009c4:	4305      	orrs	r5, r0
 80009c6:	026d      	lsls	r5, r5, #9
 80009c8:	0026      	movs	r6, r4
 80009ca:	20ff      	movs	r0, #255	; 0xff
 80009cc:	0a6d      	lsrs	r5, r5, #9
 80009ce:	e786      	b.n	80008de <__aeabi_fdiv+0xbe>
 80009d0:	2080      	movs	r0, #128	; 0x80
 80009d2:	03c0      	lsls	r0, r0, #15
 80009d4:	4305      	orrs	r5, r0
 80009d6:	026d      	lsls	r5, r5, #9
 80009d8:	20ff      	movs	r0, #255	; 0xff
 80009da:	0a6d      	lsrs	r5, r5, #9
 80009dc:	e77f      	b.n	80008de <__aeabi_fdiv+0xbe>
 80009de:	4641      	mov	r1, r8
 80009e0:	016a      	lsls	r2, r5, #5
 80009e2:	0148      	lsls	r0, r1, #5
 80009e4:	4282      	cmp	r2, r0
 80009e6:	d219      	bcs.n	8000a1c <__aeabi_fdiv+0x1fc>
 80009e8:	211b      	movs	r1, #27
 80009ea:	2500      	movs	r5, #0
 80009ec:	3f01      	subs	r7, #1
 80009ee:	2601      	movs	r6, #1
 80009f0:	0014      	movs	r4, r2
 80009f2:	006d      	lsls	r5, r5, #1
 80009f4:	0052      	lsls	r2, r2, #1
 80009f6:	2c00      	cmp	r4, #0
 80009f8:	db01      	blt.n	80009fe <__aeabi_fdiv+0x1de>
 80009fa:	4290      	cmp	r0, r2
 80009fc:	d801      	bhi.n	8000a02 <__aeabi_fdiv+0x1e2>
 80009fe:	1a12      	subs	r2, r2, r0
 8000a00:	4335      	orrs	r5, r6
 8000a02:	3901      	subs	r1, #1
 8000a04:	2900      	cmp	r1, #0
 8000a06:	d1f3      	bne.n	80009f0 <__aeabi_fdiv+0x1d0>
 8000a08:	1e50      	subs	r0, r2, #1
 8000a0a:	4182      	sbcs	r2, r0
 8000a0c:	0038      	movs	r0, r7
 8000a0e:	307f      	adds	r0, #127	; 0x7f
 8000a10:	001e      	movs	r6, r3
 8000a12:	4315      	orrs	r5, r2
 8000a14:	2800      	cmp	r0, #0
 8000a16:	dd00      	ble.n	8000a1a <__aeabi_fdiv+0x1fa>
 8000a18:	e74b      	b.n	80008b2 <__aeabi_fdiv+0x92>
 8000a1a:	e7aa      	b.n	8000972 <__aeabi_fdiv+0x152>
 8000a1c:	211a      	movs	r1, #26
 8000a1e:	2501      	movs	r5, #1
 8000a20:	1a12      	subs	r2, r2, r0
 8000a22:	e7e4      	b.n	80009ee <__aeabi_fdiv+0x1ce>
 8000a24:	01ad      	lsls	r5, r5, #6
 8000a26:	2000      	movs	r0, #0
 8000a28:	0a6d      	lsrs	r5, r5, #9
 8000a2a:	e758      	b.n	80008de <__aeabi_fdiv+0xbe>
 8000a2c:	0801fdc0 	.word	0x0801fdc0
 8000a30:	f7ffffff 	.word	0xf7ffffff
 8000a34:	0801fe00 	.word	0x0801fe00

08000a38 <__eqsf2>:
 8000a38:	b570      	push	{r4, r5, r6, lr}
 8000a3a:	0042      	lsls	r2, r0, #1
 8000a3c:	024e      	lsls	r6, r1, #9
 8000a3e:	004c      	lsls	r4, r1, #1
 8000a40:	0245      	lsls	r5, r0, #9
 8000a42:	0a6d      	lsrs	r5, r5, #9
 8000a44:	0e12      	lsrs	r2, r2, #24
 8000a46:	0fc3      	lsrs	r3, r0, #31
 8000a48:	0a76      	lsrs	r6, r6, #9
 8000a4a:	0e24      	lsrs	r4, r4, #24
 8000a4c:	0fc9      	lsrs	r1, r1, #31
 8000a4e:	2aff      	cmp	r2, #255	; 0xff
 8000a50:	d00f      	beq.n	8000a72 <__eqsf2+0x3a>
 8000a52:	2cff      	cmp	r4, #255	; 0xff
 8000a54:	d011      	beq.n	8000a7a <__eqsf2+0x42>
 8000a56:	2001      	movs	r0, #1
 8000a58:	42a2      	cmp	r2, r4
 8000a5a:	d000      	beq.n	8000a5e <__eqsf2+0x26>
 8000a5c:	bd70      	pop	{r4, r5, r6, pc}
 8000a5e:	42b5      	cmp	r5, r6
 8000a60:	d1fc      	bne.n	8000a5c <__eqsf2+0x24>
 8000a62:	428b      	cmp	r3, r1
 8000a64:	d00d      	beq.n	8000a82 <__eqsf2+0x4a>
 8000a66:	2a00      	cmp	r2, #0
 8000a68:	d1f8      	bne.n	8000a5c <__eqsf2+0x24>
 8000a6a:	0028      	movs	r0, r5
 8000a6c:	1e45      	subs	r5, r0, #1
 8000a6e:	41a8      	sbcs	r0, r5
 8000a70:	e7f4      	b.n	8000a5c <__eqsf2+0x24>
 8000a72:	2001      	movs	r0, #1
 8000a74:	2d00      	cmp	r5, #0
 8000a76:	d1f1      	bne.n	8000a5c <__eqsf2+0x24>
 8000a78:	e7eb      	b.n	8000a52 <__eqsf2+0x1a>
 8000a7a:	2001      	movs	r0, #1
 8000a7c:	2e00      	cmp	r6, #0
 8000a7e:	d1ed      	bne.n	8000a5c <__eqsf2+0x24>
 8000a80:	e7e9      	b.n	8000a56 <__eqsf2+0x1e>
 8000a82:	2000      	movs	r0, #0
 8000a84:	e7ea      	b.n	8000a5c <__eqsf2+0x24>
 8000a86:	46c0      	nop			; (mov r8, r8)

08000a88 <__gesf2>:
 8000a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a8a:	0042      	lsls	r2, r0, #1
 8000a8c:	0246      	lsls	r6, r0, #9
 8000a8e:	024d      	lsls	r5, r1, #9
 8000a90:	004c      	lsls	r4, r1, #1
 8000a92:	0fc3      	lsrs	r3, r0, #31
 8000a94:	0a76      	lsrs	r6, r6, #9
 8000a96:	0e12      	lsrs	r2, r2, #24
 8000a98:	0a6d      	lsrs	r5, r5, #9
 8000a9a:	0e24      	lsrs	r4, r4, #24
 8000a9c:	0fc8      	lsrs	r0, r1, #31
 8000a9e:	2aff      	cmp	r2, #255	; 0xff
 8000aa0:	d01f      	beq.n	8000ae2 <__gesf2+0x5a>
 8000aa2:	2cff      	cmp	r4, #255	; 0xff
 8000aa4:	d010      	beq.n	8000ac8 <__gesf2+0x40>
 8000aa6:	2a00      	cmp	r2, #0
 8000aa8:	d11f      	bne.n	8000aea <__gesf2+0x62>
 8000aaa:	4271      	negs	r1, r6
 8000aac:	4171      	adcs	r1, r6
 8000aae:	2c00      	cmp	r4, #0
 8000ab0:	d101      	bne.n	8000ab6 <__gesf2+0x2e>
 8000ab2:	2d00      	cmp	r5, #0
 8000ab4:	d01e      	beq.n	8000af4 <__gesf2+0x6c>
 8000ab6:	2900      	cmp	r1, #0
 8000ab8:	d10e      	bne.n	8000ad8 <__gesf2+0x50>
 8000aba:	4283      	cmp	r3, r0
 8000abc:	d01e      	beq.n	8000afc <__gesf2+0x74>
 8000abe:	2102      	movs	r1, #2
 8000ac0:	1e58      	subs	r0, r3, #1
 8000ac2:	4008      	ands	r0, r1
 8000ac4:	3801      	subs	r0, #1
 8000ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ac8:	2d00      	cmp	r5, #0
 8000aca:	d126      	bne.n	8000b1a <__gesf2+0x92>
 8000acc:	2a00      	cmp	r2, #0
 8000ace:	d1f4      	bne.n	8000aba <__gesf2+0x32>
 8000ad0:	4271      	negs	r1, r6
 8000ad2:	4171      	adcs	r1, r6
 8000ad4:	2900      	cmp	r1, #0
 8000ad6:	d0f0      	beq.n	8000aba <__gesf2+0x32>
 8000ad8:	2800      	cmp	r0, #0
 8000ada:	d1f4      	bne.n	8000ac6 <__gesf2+0x3e>
 8000adc:	2001      	movs	r0, #1
 8000ade:	4240      	negs	r0, r0
 8000ae0:	e7f1      	b.n	8000ac6 <__gesf2+0x3e>
 8000ae2:	2e00      	cmp	r6, #0
 8000ae4:	d119      	bne.n	8000b1a <__gesf2+0x92>
 8000ae6:	2cff      	cmp	r4, #255	; 0xff
 8000ae8:	d0ee      	beq.n	8000ac8 <__gesf2+0x40>
 8000aea:	2c00      	cmp	r4, #0
 8000aec:	d1e5      	bne.n	8000aba <__gesf2+0x32>
 8000aee:	2d00      	cmp	r5, #0
 8000af0:	d1e3      	bne.n	8000aba <__gesf2+0x32>
 8000af2:	e7e4      	b.n	8000abe <__gesf2+0x36>
 8000af4:	2000      	movs	r0, #0
 8000af6:	2e00      	cmp	r6, #0
 8000af8:	d0e5      	beq.n	8000ac6 <__gesf2+0x3e>
 8000afa:	e7e0      	b.n	8000abe <__gesf2+0x36>
 8000afc:	42a2      	cmp	r2, r4
 8000afe:	dc05      	bgt.n	8000b0c <__gesf2+0x84>
 8000b00:	dbea      	blt.n	8000ad8 <__gesf2+0x50>
 8000b02:	42ae      	cmp	r6, r5
 8000b04:	d802      	bhi.n	8000b0c <__gesf2+0x84>
 8000b06:	d3e7      	bcc.n	8000ad8 <__gesf2+0x50>
 8000b08:	2000      	movs	r0, #0
 8000b0a:	e7dc      	b.n	8000ac6 <__gesf2+0x3e>
 8000b0c:	4241      	negs	r1, r0
 8000b0e:	4141      	adcs	r1, r0
 8000b10:	4248      	negs	r0, r1
 8000b12:	2102      	movs	r1, #2
 8000b14:	4008      	ands	r0, r1
 8000b16:	3801      	subs	r0, #1
 8000b18:	e7d5      	b.n	8000ac6 <__gesf2+0x3e>
 8000b1a:	2002      	movs	r0, #2
 8000b1c:	4240      	negs	r0, r0
 8000b1e:	e7d2      	b.n	8000ac6 <__gesf2+0x3e>

08000b20 <__lesf2>:
 8000b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b22:	0042      	lsls	r2, r0, #1
 8000b24:	0246      	lsls	r6, r0, #9
 8000b26:	024d      	lsls	r5, r1, #9
 8000b28:	004c      	lsls	r4, r1, #1
 8000b2a:	0fc3      	lsrs	r3, r0, #31
 8000b2c:	0a76      	lsrs	r6, r6, #9
 8000b2e:	0e12      	lsrs	r2, r2, #24
 8000b30:	0a6d      	lsrs	r5, r5, #9
 8000b32:	0e24      	lsrs	r4, r4, #24
 8000b34:	0fc8      	lsrs	r0, r1, #31
 8000b36:	2aff      	cmp	r2, #255	; 0xff
 8000b38:	d00d      	beq.n	8000b56 <__lesf2+0x36>
 8000b3a:	2cff      	cmp	r4, #255	; 0xff
 8000b3c:	d00f      	beq.n	8000b5e <__lesf2+0x3e>
 8000b3e:	2a00      	cmp	r2, #0
 8000b40:	d123      	bne.n	8000b8a <__lesf2+0x6a>
 8000b42:	4271      	negs	r1, r6
 8000b44:	4171      	adcs	r1, r6
 8000b46:	2c00      	cmp	r4, #0
 8000b48:	d10f      	bne.n	8000b6a <__lesf2+0x4a>
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	d10d      	bne.n	8000b6a <__lesf2+0x4a>
 8000b4e:	2000      	movs	r0, #0
 8000b50:	2e00      	cmp	r6, #0
 8000b52:	d014      	beq.n	8000b7e <__lesf2+0x5e>
 8000b54:	e00d      	b.n	8000b72 <__lesf2+0x52>
 8000b56:	2e00      	cmp	r6, #0
 8000b58:	d110      	bne.n	8000b7c <__lesf2+0x5c>
 8000b5a:	2cff      	cmp	r4, #255	; 0xff
 8000b5c:	d115      	bne.n	8000b8a <__lesf2+0x6a>
 8000b5e:	2d00      	cmp	r5, #0
 8000b60:	d10c      	bne.n	8000b7c <__lesf2+0x5c>
 8000b62:	2a00      	cmp	r2, #0
 8000b64:	d103      	bne.n	8000b6e <__lesf2+0x4e>
 8000b66:	4271      	negs	r1, r6
 8000b68:	4171      	adcs	r1, r6
 8000b6a:	2900      	cmp	r1, #0
 8000b6c:	d108      	bne.n	8000b80 <__lesf2+0x60>
 8000b6e:	4283      	cmp	r3, r0
 8000b70:	d010      	beq.n	8000b94 <__lesf2+0x74>
 8000b72:	2102      	movs	r1, #2
 8000b74:	1e58      	subs	r0, r3, #1
 8000b76:	4008      	ands	r0, r1
 8000b78:	3801      	subs	r0, #1
 8000b7a:	e000      	b.n	8000b7e <__lesf2+0x5e>
 8000b7c:	2002      	movs	r0, #2
 8000b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b80:	2800      	cmp	r0, #0
 8000b82:	d1fc      	bne.n	8000b7e <__lesf2+0x5e>
 8000b84:	2001      	movs	r0, #1
 8000b86:	4240      	negs	r0, r0
 8000b88:	e7f9      	b.n	8000b7e <__lesf2+0x5e>
 8000b8a:	2c00      	cmp	r4, #0
 8000b8c:	d1ef      	bne.n	8000b6e <__lesf2+0x4e>
 8000b8e:	2d00      	cmp	r5, #0
 8000b90:	d1ed      	bne.n	8000b6e <__lesf2+0x4e>
 8000b92:	e7ee      	b.n	8000b72 <__lesf2+0x52>
 8000b94:	42a2      	cmp	r2, r4
 8000b96:	dc05      	bgt.n	8000ba4 <__lesf2+0x84>
 8000b98:	dbf2      	blt.n	8000b80 <__lesf2+0x60>
 8000b9a:	42ae      	cmp	r6, r5
 8000b9c:	d802      	bhi.n	8000ba4 <__lesf2+0x84>
 8000b9e:	d3ef      	bcc.n	8000b80 <__lesf2+0x60>
 8000ba0:	2000      	movs	r0, #0
 8000ba2:	e7ec      	b.n	8000b7e <__lesf2+0x5e>
 8000ba4:	4241      	negs	r1, r0
 8000ba6:	4141      	adcs	r1, r0
 8000ba8:	4248      	negs	r0, r1
 8000baa:	2102      	movs	r1, #2
 8000bac:	4008      	ands	r0, r1
 8000bae:	3801      	subs	r0, #1
 8000bb0:	e7e5      	b.n	8000b7e <__lesf2+0x5e>
 8000bb2:	46c0      	nop			; (mov r8, r8)

08000bb4 <__aeabi_fsub>:
 8000bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bb6:	4646      	mov	r6, r8
 8000bb8:	46d6      	mov	lr, sl
 8000bba:	464f      	mov	r7, r9
 8000bbc:	0243      	lsls	r3, r0, #9
 8000bbe:	0a5b      	lsrs	r3, r3, #9
 8000bc0:	00da      	lsls	r2, r3, #3
 8000bc2:	4694      	mov	ip, r2
 8000bc4:	024a      	lsls	r2, r1, #9
 8000bc6:	b5c0      	push	{r6, r7, lr}
 8000bc8:	0044      	lsls	r4, r0, #1
 8000bca:	0a56      	lsrs	r6, r2, #9
 8000bcc:	1c05      	adds	r5, r0, #0
 8000bce:	46b0      	mov	r8, r6
 8000bd0:	0e24      	lsrs	r4, r4, #24
 8000bd2:	004e      	lsls	r6, r1, #1
 8000bd4:	0992      	lsrs	r2, r2, #6
 8000bd6:	001f      	movs	r7, r3
 8000bd8:	0020      	movs	r0, r4
 8000bda:	4692      	mov	sl, r2
 8000bdc:	0fed      	lsrs	r5, r5, #31
 8000bde:	0e36      	lsrs	r6, r6, #24
 8000be0:	0fc9      	lsrs	r1, r1, #31
 8000be2:	2eff      	cmp	r6, #255	; 0xff
 8000be4:	d100      	bne.n	8000be8 <__aeabi_fsub+0x34>
 8000be6:	e07f      	b.n	8000ce8 <__aeabi_fsub+0x134>
 8000be8:	2201      	movs	r2, #1
 8000bea:	4051      	eors	r1, r2
 8000bec:	428d      	cmp	r5, r1
 8000bee:	d051      	beq.n	8000c94 <__aeabi_fsub+0xe0>
 8000bf0:	1ba2      	subs	r2, r4, r6
 8000bf2:	4691      	mov	r9, r2
 8000bf4:	2a00      	cmp	r2, #0
 8000bf6:	dc00      	bgt.n	8000bfa <__aeabi_fsub+0x46>
 8000bf8:	e07e      	b.n	8000cf8 <__aeabi_fsub+0x144>
 8000bfa:	2e00      	cmp	r6, #0
 8000bfc:	d100      	bne.n	8000c00 <__aeabi_fsub+0x4c>
 8000bfe:	e099      	b.n	8000d34 <__aeabi_fsub+0x180>
 8000c00:	2cff      	cmp	r4, #255	; 0xff
 8000c02:	d100      	bne.n	8000c06 <__aeabi_fsub+0x52>
 8000c04:	e08c      	b.n	8000d20 <__aeabi_fsub+0x16c>
 8000c06:	2380      	movs	r3, #128	; 0x80
 8000c08:	4652      	mov	r2, sl
 8000c0a:	04db      	lsls	r3, r3, #19
 8000c0c:	431a      	orrs	r2, r3
 8000c0e:	4692      	mov	sl, r2
 8000c10:	464a      	mov	r2, r9
 8000c12:	2301      	movs	r3, #1
 8000c14:	2a1b      	cmp	r2, #27
 8000c16:	dc08      	bgt.n	8000c2a <__aeabi_fsub+0x76>
 8000c18:	4653      	mov	r3, sl
 8000c1a:	2120      	movs	r1, #32
 8000c1c:	40d3      	lsrs	r3, r2
 8000c1e:	1a89      	subs	r1, r1, r2
 8000c20:	4652      	mov	r2, sl
 8000c22:	408a      	lsls	r2, r1
 8000c24:	1e51      	subs	r1, r2, #1
 8000c26:	418a      	sbcs	r2, r1
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	4662      	mov	r2, ip
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	015a      	lsls	r2, r3, #5
 8000c30:	d400      	bmi.n	8000c34 <__aeabi_fsub+0x80>
 8000c32:	e0f3      	b.n	8000e1c <__aeabi_fsub+0x268>
 8000c34:	019b      	lsls	r3, r3, #6
 8000c36:	099e      	lsrs	r6, r3, #6
 8000c38:	0030      	movs	r0, r6
 8000c3a:	f002 f867 	bl	8002d0c <__clzsi2>
 8000c3e:	3805      	subs	r0, #5
 8000c40:	4086      	lsls	r6, r0
 8000c42:	4284      	cmp	r4, r0
 8000c44:	dd00      	ble.n	8000c48 <__aeabi_fsub+0x94>
 8000c46:	e0f7      	b.n	8000e38 <__aeabi_fsub+0x284>
 8000c48:	0032      	movs	r2, r6
 8000c4a:	1b04      	subs	r4, r0, r4
 8000c4c:	2020      	movs	r0, #32
 8000c4e:	3401      	adds	r4, #1
 8000c50:	40e2      	lsrs	r2, r4
 8000c52:	1b04      	subs	r4, r0, r4
 8000c54:	40a6      	lsls	r6, r4
 8000c56:	0033      	movs	r3, r6
 8000c58:	1e5e      	subs	r6, r3, #1
 8000c5a:	41b3      	sbcs	r3, r6
 8000c5c:	2400      	movs	r4, #0
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	075a      	lsls	r2, r3, #29
 8000c62:	d004      	beq.n	8000c6e <__aeabi_fsub+0xba>
 8000c64:	220f      	movs	r2, #15
 8000c66:	401a      	ands	r2, r3
 8000c68:	2a04      	cmp	r2, #4
 8000c6a:	d000      	beq.n	8000c6e <__aeabi_fsub+0xba>
 8000c6c:	3304      	adds	r3, #4
 8000c6e:	015a      	lsls	r2, r3, #5
 8000c70:	d400      	bmi.n	8000c74 <__aeabi_fsub+0xc0>
 8000c72:	e0d6      	b.n	8000e22 <__aeabi_fsub+0x26e>
 8000c74:	1c62      	adds	r2, r4, #1
 8000c76:	2cfe      	cmp	r4, #254	; 0xfe
 8000c78:	d100      	bne.n	8000c7c <__aeabi_fsub+0xc8>
 8000c7a:	e0da      	b.n	8000e32 <__aeabi_fsub+0x27e>
 8000c7c:	019b      	lsls	r3, r3, #6
 8000c7e:	0a5f      	lsrs	r7, r3, #9
 8000c80:	b2d0      	uxtb	r0, r2
 8000c82:	05c0      	lsls	r0, r0, #23
 8000c84:	4338      	orrs	r0, r7
 8000c86:	07ed      	lsls	r5, r5, #31
 8000c88:	4328      	orrs	r0, r5
 8000c8a:	bce0      	pop	{r5, r6, r7}
 8000c8c:	46ba      	mov	sl, r7
 8000c8e:	46b1      	mov	r9, r6
 8000c90:	46a8      	mov	r8, r5
 8000c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c94:	1ba2      	subs	r2, r4, r6
 8000c96:	4691      	mov	r9, r2
 8000c98:	2a00      	cmp	r2, #0
 8000c9a:	dd63      	ble.n	8000d64 <__aeabi_fsub+0x1b0>
 8000c9c:	2e00      	cmp	r6, #0
 8000c9e:	d100      	bne.n	8000ca2 <__aeabi_fsub+0xee>
 8000ca0:	e099      	b.n	8000dd6 <__aeabi_fsub+0x222>
 8000ca2:	2cff      	cmp	r4, #255	; 0xff
 8000ca4:	d03c      	beq.n	8000d20 <__aeabi_fsub+0x16c>
 8000ca6:	2380      	movs	r3, #128	; 0x80
 8000ca8:	4652      	mov	r2, sl
 8000caa:	04db      	lsls	r3, r3, #19
 8000cac:	431a      	orrs	r2, r3
 8000cae:	4692      	mov	sl, r2
 8000cb0:	464a      	mov	r2, r9
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	2a1b      	cmp	r2, #27
 8000cb6:	dc08      	bgt.n	8000cca <__aeabi_fsub+0x116>
 8000cb8:	4653      	mov	r3, sl
 8000cba:	2120      	movs	r1, #32
 8000cbc:	40d3      	lsrs	r3, r2
 8000cbe:	1a89      	subs	r1, r1, r2
 8000cc0:	4652      	mov	r2, sl
 8000cc2:	408a      	lsls	r2, r1
 8000cc4:	1e51      	subs	r1, r2, #1
 8000cc6:	418a      	sbcs	r2, r1
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	4463      	add	r3, ip
 8000ccc:	015a      	lsls	r2, r3, #5
 8000cce:	d400      	bmi.n	8000cd2 <__aeabi_fsub+0x11e>
 8000cd0:	e0a4      	b.n	8000e1c <__aeabi_fsub+0x268>
 8000cd2:	3401      	adds	r4, #1
 8000cd4:	2cff      	cmp	r4, #255	; 0xff
 8000cd6:	d100      	bne.n	8000cda <__aeabi_fsub+0x126>
 8000cd8:	e0ab      	b.n	8000e32 <__aeabi_fsub+0x27e>
 8000cda:	2201      	movs	r2, #1
 8000cdc:	4997      	ldr	r1, [pc, #604]	; (8000f3c <__aeabi_fsub+0x388>)
 8000cde:	401a      	ands	r2, r3
 8000ce0:	085b      	lsrs	r3, r3, #1
 8000ce2:	400b      	ands	r3, r1
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	e7bb      	b.n	8000c60 <__aeabi_fsub+0xac>
 8000ce8:	2a00      	cmp	r2, #0
 8000cea:	d032      	beq.n	8000d52 <__aeabi_fsub+0x19e>
 8000cec:	428d      	cmp	r5, r1
 8000cee:	d035      	beq.n	8000d5c <__aeabi_fsub+0x1a8>
 8000cf0:	22ff      	movs	r2, #255	; 0xff
 8000cf2:	4252      	negs	r2, r2
 8000cf4:	4691      	mov	r9, r2
 8000cf6:	44a1      	add	r9, r4
 8000cf8:	464a      	mov	r2, r9
 8000cfa:	2a00      	cmp	r2, #0
 8000cfc:	d051      	beq.n	8000da2 <__aeabi_fsub+0x1ee>
 8000cfe:	1b30      	subs	r0, r6, r4
 8000d00:	2c00      	cmp	r4, #0
 8000d02:	d000      	beq.n	8000d06 <__aeabi_fsub+0x152>
 8000d04:	e09c      	b.n	8000e40 <__aeabi_fsub+0x28c>
 8000d06:	4663      	mov	r3, ip
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d100      	bne.n	8000d0e <__aeabi_fsub+0x15a>
 8000d0c:	e0df      	b.n	8000ece <__aeabi_fsub+0x31a>
 8000d0e:	3801      	subs	r0, #1
 8000d10:	2800      	cmp	r0, #0
 8000d12:	d100      	bne.n	8000d16 <__aeabi_fsub+0x162>
 8000d14:	e0f7      	b.n	8000f06 <__aeabi_fsub+0x352>
 8000d16:	2eff      	cmp	r6, #255	; 0xff
 8000d18:	d000      	beq.n	8000d1c <__aeabi_fsub+0x168>
 8000d1a:	e099      	b.n	8000e50 <__aeabi_fsub+0x29c>
 8000d1c:	000d      	movs	r5, r1
 8000d1e:	4643      	mov	r3, r8
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d100      	bne.n	8000d26 <__aeabi_fsub+0x172>
 8000d24:	e085      	b.n	8000e32 <__aeabi_fsub+0x27e>
 8000d26:	2780      	movs	r7, #128	; 0x80
 8000d28:	03ff      	lsls	r7, r7, #15
 8000d2a:	431f      	orrs	r7, r3
 8000d2c:	027f      	lsls	r7, r7, #9
 8000d2e:	20ff      	movs	r0, #255	; 0xff
 8000d30:	0a7f      	lsrs	r7, r7, #9
 8000d32:	e7a6      	b.n	8000c82 <__aeabi_fsub+0xce>
 8000d34:	4652      	mov	r2, sl
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d074      	beq.n	8000e24 <__aeabi_fsub+0x270>
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	4690      	mov	r8, r2
 8000d40:	44c1      	add	r9, r8
 8000d42:	464a      	mov	r2, r9
 8000d44:	2a00      	cmp	r2, #0
 8000d46:	d100      	bne.n	8000d4a <__aeabi_fsub+0x196>
 8000d48:	e0c8      	b.n	8000edc <__aeabi_fsub+0x328>
 8000d4a:	2cff      	cmp	r4, #255	; 0xff
 8000d4c:	d000      	beq.n	8000d50 <__aeabi_fsub+0x19c>
 8000d4e:	e75f      	b.n	8000c10 <__aeabi_fsub+0x5c>
 8000d50:	e7e6      	b.n	8000d20 <__aeabi_fsub+0x16c>
 8000d52:	2201      	movs	r2, #1
 8000d54:	4051      	eors	r1, r2
 8000d56:	42a9      	cmp	r1, r5
 8000d58:	d000      	beq.n	8000d5c <__aeabi_fsub+0x1a8>
 8000d5a:	e749      	b.n	8000bf0 <__aeabi_fsub+0x3c>
 8000d5c:	22ff      	movs	r2, #255	; 0xff
 8000d5e:	4252      	negs	r2, r2
 8000d60:	4691      	mov	r9, r2
 8000d62:	44a1      	add	r9, r4
 8000d64:	464a      	mov	r2, r9
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	d043      	beq.n	8000df2 <__aeabi_fsub+0x23e>
 8000d6a:	1b31      	subs	r1, r6, r4
 8000d6c:	2c00      	cmp	r4, #0
 8000d6e:	d100      	bne.n	8000d72 <__aeabi_fsub+0x1be>
 8000d70:	e08c      	b.n	8000e8c <__aeabi_fsub+0x2d8>
 8000d72:	2eff      	cmp	r6, #255	; 0xff
 8000d74:	d100      	bne.n	8000d78 <__aeabi_fsub+0x1c4>
 8000d76:	e092      	b.n	8000e9e <__aeabi_fsub+0x2ea>
 8000d78:	2380      	movs	r3, #128	; 0x80
 8000d7a:	4662      	mov	r2, ip
 8000d7c:	04db      	lsls	r3, r3, #19
 8000d7e:	431a      	orrs	r2, r3
 8000d80:	4694      	mov	ip, r2
 8000d82:	2301      	movs	r3, #1
 8000d84:	291b      	cmp	r1, #27
 8000d86:	dc09      	bgt.n	8000d9c <__aeabi_fsub+0x1e8>
 8000d88:	2020      	movs	r0, #32
 8000d8a:	4663      	mov	r3, ip
 8000d8c:	4662      	mov	r2, ip
 8000d8e:	40cb      	lsrs	r3, r1
 8000d90:	1a41      	subs	r1, r0, r1
 8000d92:	408a      	lsls	r2, r1
 8000d94:	0011      	movs	r1, r2
 8000d96:	1e48      	subs	r0, r1, #1
 8000d98:	4181      	sbcs	r1, r0
 8000d9a:	430b      	orrs	r3, r1
 8000d9c:	0034      	movs	r4, r6
 8000d9e:	4453      	add	r3, sl
 8000da0:	e794      	b.n	8000ccc <__aeabi_fsub+0x118>
 8000da2:	22fe      	movs	r2, #254	; 0xfe
 8000da4:	1c66      	adds	r6, r4, #1
 8000da6:	4232      	tst	r2, r6
 8000da8:	d164      	bne.n	8000e74 <__aeabi_fsub+0x2c0>
 8000daa:	2c00      	cmp	r4, #0
 8000dac:	d000      	beq.n	8000db0 <__aeabi_fsub+0x1fc>
 8000dae:	e082      	b.n	8000eb6 <__aeabi_fsub+0x302>
 8000db0:	4663      	mov	r3, ip
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d100      	bne.n	8000db8 <__aeabi_fsub+0x204>
 8000db6:	e0ab      	b.n	8000f10 <__aeabi_fsub+0x35c>
 8000db8:	4653      	mov	r3, sl
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d100      	bne.n	8000dc0 <__aeabi_fsub+0x20c>
 8000dbe:	e760      	b.n	8000c82 <__aeabi_fsub+0xce>
 8000dc0:	4663      	mov	r3, ip
 8000dc2:	4652      	mov	r2, sl
 8000dc4:	1a9b      	subs	r3, r3, r2
 8000dc6:	015a      	lsls	r2, r3, #5
 8000dc8:	d400      	bmi.n	8000dcc <__aeabi_fsub+0x218>
 8000dca:	e0aa      	b.n	8000f22 <__aeabi_fsub+0x36e>
 8000dcc:	4663      	mov	r3, ip
 8000dce:	4652      	mov	r2, sl
 8000dd0:	000d      	movs	r5, r1
 8000dd2:	1ad3      	subs	r3, r2, r3
 8000dd4:	e744      	b.n	8000c60 <__aeabi_fsub+0xac>
 8000dd6:	4652      	mov	r2, sl
 8000dd8:	2a00      	cmp	r2, #0
 8000dda:	d023      	beq.n	8000e24 <__aeabi_fsub+0x270>
 8000ddc:	2201      	movs	r2, #1
 8000dde:	4252      	negs	r2, r2
 8000de0:	4690      	mov	r8, r2
 8000de2:	44c1      	add	r9, r8
 8000de4:	464a      	mov	r2, r9
 8000de6:	2a00      	cmp	r2, #0
 8000de8:	d075      	beq.n	8000ed6 <__aeabi_fsub+0x322>
 8000dea:	2cff      	cmp	r4, #255	; 0xff
 8000dec:	d000      	beq.n	8000df0 <__aeabi_fsub+0x23c>
 8000dee:	e75f      	b.n	8000cb0 <__aeabi_fsub+0xfc>
 8000df0:	e796      	b.n	8000d20 <__aeabi_fsub+0x16c>
 8000df2:	26fe      	movs	r6, #254	; 0xfe
 8000df4:	3401      	adds	r4, #1
 8000df6:	4226      	tst	r6, r4
 8000df8:	d153      	bne.n	8000ea2 <__aeabi_fsub+0x2ee>
 8000dfa:	2800      	cmp	r0, #0
 8000dfc:	d172      	bne.n	8000ee4 <__aeabi_fsub+0x330>
 8000dfe:	4663      	mov	r3, ip
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d100      	bne.n	8000e06 <__aeabi_fsub+0x252>
 8000e04:	e093      	b.n	8000f2e <__aeabi_fsub+0x37a>
 8000e06:	4653      	mov	r3, sl
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d100      	bne.n	8000e0e <__aeabi_fsub+0x25a>
 8000e0c:	e739      	b.n	8000c82 <__aeabi_fsub+0xce>
 8000e0e:	4463      	add	r3, ip
 8000e10:	2400      	movs	r4, #0
 8000e12:	015a      	lsls	r2, r3, #5
 8000e14:	d502      	bpl.n	8000e1c <__aeabi_fsub+0x268>
 8000e16:	4a4a      	ldr	r2, [pc, #296]	; (8000f40 <__aeabi_fsub+0x38c>)
 8000e18:	3401      	adds	r4, #1
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	075a      	lsls	r2, r3, #29
 8000e1e:	d000      	beq.n	8000e22 <__aeabi_fsub+0x26e>
 8000e20:	e720      	b.n	8000c64 <__aeabi_fsub+0xb0>
 8000e22:	08db      	lsrs	r3, r3, #3
 8000e24:	2cff      	cmp	r4, #255	; 0xff
 8000e26:	d100      	bne.n	8000e2a <__aeabi_fsub+0x276>
 8000e28:	e77a      	b.n	8000d20 <__aeabi_fsub+0x16c>
 8000e2a:	025b      	lsls	r3, r3, #9
 8000e2c:	0a5f      	lsrs	r7, r3, #9
 8000e2e:	b2e0      	uxtb	r0, r4
 8000e30:	e727      	b.n	8000c82 <__aeabi_fsub+0xce>
 8000e32:	20ff      	movs	r0, #255	; 0xff
 8000e34:	2700      	movs	r7, #0
 8000e36:	e724      	b.n	8000c82 <__aeabi_fsub+0xce>
 8000e38:	4b41      	ldr	r3, [pc, #260]	; (8000f40 <__aeabi_fsub+0x38c>)
 8000e3a:	1a24      	subs	r4, r4, r0
 8000e3c:	4033      	ands	r3, r6
 8000e3e:	e70f      	b.n	8000c60 <__aeabi_fsub+0xac>
 8000e40:	2eff      	cmp	r6, #255	; 0xff
 8000e42:	d100      	bne.n	8000e46 <__aeabi_fsub+0x292>
 8000e44:	e76a      	b.n	8000d1c <__aeabi_fsub+0x168>
 8000e46:	2380      	movs	r3, #128	; 0x80
 8000e48:	4662      	mov	r2, ip
 8000e4a:	04db      	lsls	r3, r3, #19
 8000e4c:	431a      	orrs	r2, r3
 8000e4e:	4694      	mov	ip, r2
 8000e50:	2301      	movs	r3, #1
 8000e52:	281b      	cmp	r0, #27
 8000e54:	dc09      	bgt.n	8000e6a <__aeabi_fsub+0x2b6>
 8000e56:	2420      	movs	r4, #32
 8000e58:	4663      	mov	r3, ip
 8000e5a:	4662      	mov	r2, ip
 8000e5c:	40c3      	lsrs	r3, r0
 8000e5e:	1a20      	subs	r0, r4, r0
 8000e60:	4082      	lsls	r2, r0
 8000e62:	0010      	movs	r0, r2
 8000e64:	1e44      	subs	r4, r0, #1
 8000e66:	41a0      	sbcs	r0, r4
 8000e68:	4303      	orrs	r3, r0
 8000e6a:	4652      	mov	r2, sl
 8000e6c:	000d      	movs	r5, r1
 8000e6e:	0034      	movs	r4, r6
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	e6dc      	b.n	8000c2e <__aeabi_fsub+0x7a>
 8000e74:	4663      	mov	r3, ip
 8000e76:	4652      	mov	r2, sl
 8000e78:	1a9e      	subs	r6, r3, r2
 8000e7a:	0173      	lsls	r3, r6, #5
 8000e7c:	d417      	bmi.n	8000eae <__aeabi_fsub+0x2fa>
 8000e7e:	2e00      	cmp	r6, #0
 8000e80:	d000      	beq.n	8000e84 <__aeabi_fsub+0x2d0>
 8000e82:	e6d9      	b.n	8000c38 <__aeabi_fsub+0x84>
 8000e84:	2500      	movs	r5, #0
 8000e86:	2000      	movs	r0, #0
 8000e88:	2700      	movs	r7, #0
 8000e8a:	e6fa      	b.n	8000c82 <__aeabi_fsub+0xce>
 8000e8c:	4663      	mov	r3, ip
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d044      	beq.n	8000f1c <__aeabi_fsub+0x368>
 8000e92:	3901      	subs	r1, #1
 8000e94:	2900      	cmp	r1, #0
 8000e96:	d04c      	beq.n	8000f32 <__aeabi_fsub+0x37e>
 8000e98:	2eff      	cmp	r6, #255	; 0xff
 8000e9a:	d000      	beq.n	8000e9e <__aeabi_fsub+0x2ea>
 8000e9c:	e771      	b.n	8000d82 <__aeabi_fsub+0x1ce>
 8000e9e:	4643      	mov	r3, r8
 8000ea0:	e73e      	b.n	8000d20 <__aeabi_fsub+0x16c>
 8000ea2:	2cff      	cmp	r4, #255	; 0xff
 8000ea4:	d0c5      	beq.n	8000e32 <__aeabi_fsub+0x27e>
 8000ea6:	4652      	mov	r2, sl
 8000ea8:	4462      	add	r2, ip
 8000eaa:	0853      	lsrs	r3, r2, #1
 8000eac:	e7b6      	b.n	8000e1c <__aeabi_fsub+0x268>
 8000eae:	4663      	mov	r3, ip
 8000eb0:	000d      	movs	r5, r1
 8000eb2:	1ad6      	subs	r6, r2, r3
 8000eb4:	e6c0      	b.n	8000c38 <__aeabi_fsub+0x84>
 8000eb6:	4662      	mov	r2, ip
 8000eb8:	2a00      	cmp	r2, #0
 8000eba:	d116      	bne.n	8000eea <__aeabi_fsub+0x336>
 8000ebc:	4653      	mov	r3, sl
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d000      	beq.n	8000ec4 <__aeabi_fsub+0x310>
 8000ec2:	e72b      	b.n	8000d1c <__aeabi_fsub+0x168>
 8000ec4:	2780      	movs	r7, #128	; 0x80
 8000ec6:	2500      	movs	r5, #0
 8000ec8:	20ff      	movs	r0, #255	; 0xff
 8000eca:	03ff      	lsls	r7, r7, #15
 8000ecc:	e6d9      	b.n	8000c82 <__aeabi_fsub+0xce>
 8000ece:	000d      	movs	r5, r1
 8000ed0:	4643      	mov	r3, r8
 8000ed2:	0034      	movs	r4, r6
 8000ed4:	e7a6      	b.n	8000e24 <__aeabi_fsub+0x270>
 8000ed6:	4653      	mov	r3, sl
 8000ed8:	4463      	add	r3, ip
 8000eda:	e6f7      	b.n	8000ccc <__aeabi_fsub+0x118>
 8000edc:	4663      	mov	r3, ip
 8000ede:	4652      	mov	r2, sl
 8000ee0:	1a9b      	subs	r3, r3, r2
 8000ee2:	e6a4      	b.n	8000c2e <__aeabi_fsub+0x7a>
 8000ee4:	4662      	mov	r2, ip
 8000ee6:	2a00      	cmp	r2, #0
 8000ee8:	d0d9      	beq.n	8000e9e <__aeabi_fsub+0x2ea>
 8000eea:	4652      	mov	r2, sl
 8000eec:	2a00      	cmp	r2, #0
 8000eee:	d100      	bne.n	8000ef2 <__aeabi_fsub+0x33e>
 8000ef0:	e716      	b.n	8000d20 <__aeabi_fsub+0x16c>
 8000ef2:	2280      	movs	r2, #128	; 0x80
 8000ef4:	03d2      	lsls	r2, r2, #15
 8000ef6:	4213      	tst	r3, r2
 8000ef8:	d100      	bne.n	8000efc <__aeabi_fsub+0x348>
 8000efa:	e711      	b.n	8000d20 <__aeabi_fsub+0x16c>
 8000efc:	4640      	mov	r0, r8
 8000efe:	4210      	tst	r0, r2
 8000f00:	d000      	beq.n	8000f04 <__aeabi_fsub+0x350>
 8000f02:	e70d      	b.n	8000d20 <__aeabi_fsub+0x16c>
 8000f04:	e70a      	b.n	8000d1c <__aeabi_fsub+0x168>
 8000f06:	4652      	mov	r2, sl
 8000f08:	000d      	movs	r5, r1
 8000f0a:	0034      	movs	r4, r6
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	e68e      	b.n	8000c2e <__aeabi_fsub+0x7a>
 8000f10:	4653      	mov	r3, sl
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d008      	beq.n	8000f28 <__aeabi_fsub+0x374>
 8000f16:	000d      	movs	r5, r1
 8000f18:	4647      	mov	r7, r8
 8000f1a:	e6b2      	b.n	8000c82 <__aeabi_fsub+0xce>
 8000f1c:	4643      	mov	r3, r8
 8000f1e:	0034      	movs	r4, r6
 8000f20:	e780      	b.n	8000e24 <__aeabi_fsub+0x270>
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d000      	beq.n	8000f28 <__aeabi_fsub+0x374>
 8000f26:	e779      	b.n	8000e1c <__aeabi_fsub+0x268>
 8000f28:	2500      	movs	r5, #0
 8000f2a:	2700      	movs	r7, #0
 8000f2c:	e6a9      	b.n	8000c82 <__aeabi_fsub+0xce>
 8000f2e:	4647      	mov	r7, r8
 8000f30:	e6a7      	b.n	8000c82 <__aeabi_fsub+0xce>
 8000f32:	4653      	mov	r3, sl
 8000f34:	0034      	movs	r4, r6
 8000f36:	4463      	add	r3, ip
 8000f38:	e6c8      	b.n	8000ccc <__aeabi_fsub+0x118>
 8000f3a:	46c0      	nop			; (mov r8, r8)
 8000f3c:	7dffffff 	.word	0x7dffffff
 8000f40:	fbffffff 	.word	0xfbffffff

08000f44 <__aeabi_f2iz>:
 8000f44:	0241      	lsls	r1, r0, #9
 8000f46:	0042      	lsls	r2, r0, #1
 8000f48:	0fc3      	lsrs	r3, r0, #31
 8000f4a:	0a49      	lsrs	r1, r1, #9
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	0e12      	lsrs	r2, r2, #24
 8000f50:	2a7e      	cmp	r2, #126	; 0x7e
 8000f52:	d903      	bls.n	8000f5c <__aeabi_f2iz+0x18>
 8000f54:	2a9d      	cmp	r2, #157	; 0x9d
 8000f56:	d902      	bls.n	8000f5e <__aeabi_f2iz+0x1a>
 8000f58:	4a09      	ldr	r2, [pc, #36]	; (8000f80 <__aeabi_f2iz+0x3c>)
 8000f5a:	1898      	adds	r0, r3, r2
 8000f5c:	4770      	bx	lr
 8000f5e:	2080      	movs	r0, #128	; 0x80
 8000f60:	0400      	lsls	r0, r0, #16
 8000f62:	4301      	orrs	r1, r0
 8000f64:	2a95      	cmp	r2, #149	; 0x95
 8000f66:	dc07      	bgt.n	8000f78 <__aeabi_f2iz+0x34>
 8000f68:	2096      	movs	r0, #150	; 0x96
 8000f6a:	1a82      	subs	r2, r0, r2
 8000f6c:	40d1      	lsrs	r1, r2
 8000f6e:	4248      	negs	r0, r1
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d1f3      	bne.n	8000f5c <__aeabi_f2iz+0x18>
 8000f74:	0008      	movs	r0, r1
 8000f76:	e7f1      	b.n	8000f5c <__aeabi_f2iz+0x18>
 8000f78:	3a96      	subs	r2, #150	; 0x96
 8000f7a:	4091      	lsls	r1, r2
 8000f7c:	e7f7      	b.n	8000f6e <__aeabi_f2iz+0x2a>
 8000f7e:	46c0      	nop			; (mov r8, r8)
 8000f80:	7fffffff 	.word	0x7fffffff

08000f84 <__aeabi_i2f>:
 8000f84:	b570      	push	{r4, r5, r6, lr}
 8000f86:	2800      	cmp	r0, #0
 8000f88:	d013      	beq.n	8000fb2 <__aeabi_i2f+0x2e>
 8000f8a:	17c3      	asrs	r3, r0, #31
 8000f8c:	18c5      	adds	r5, r0, r3
 8000f8e:	405d      	eors	r5, r3
 8000f90:	0fc4      	lsrs	r4, r0, #31
 8000f92:	0028      	movs	r0, r5
 8000f94:	f001 feba 	bl	8002d0c <__clzsi2>
 8000f98:	239e      	movs	r3, #158	; 0x9e
 8000f9a:	0001      	movs	r1, r0
 8000f9c:	1a1b      	subs	r3, r3, r0
 8000f9e:	2b96      	cmp	r3, #150	; 0x96
 8000fa0:	dc0f      	bgt.n	8000fc2 <__aeabi_i2f+0x3e>
 8000fa2:	2808      	cmp	r0, #8
 8000fa4:	dd01      	ble.n	8000faa <__aeabi_i2f+0x26>
 8000fa6:	3908      	subs	r1, #8
 8000fa8:	408d      	lsls	r5, r1
 8000faa:	026d      	lsls	r5, r5, #9
 8000fac:	0a6d      	lsrs	r5, r5, #9
 8000fae:	b2d8      	uxtb	r0, r3
 8000fb0:	e002      	b.n	8000fb8 <__aeabi_i2f+0x34>
 8000fb2:	2400      	movs	r4, #0
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	2500      	movs	r5, #0
 8000fb8:	05c0      	lsls	r0, r0, #23
 8000fba:	4328      	orrs	r0, r5
 8000fbc:	07e4      	lsls	r4, r4, #31
 8000fbe:	4320      	orrs	r0, r4
 8000fc0:	bd70      	pop	{r4, r5, r6, pc}
 8000fc2:	2b99      	cmp	r3, #153	; 0x99
 8000fc4:	dd0b      	ble.n	8000fde <__aeabi_i2f+0x5a>
 8000fc6:	2205      	movs	r2, #5
 8000fc8:	002e      	movs	r6, r5
 8000fca:	1a12      	subs	r2, r2, r0
 8000fcc:	40d6      	lsrs	r6, r2
 8000fce:	0002      	movs	r2, r0
 8000fd0:	321b      	adds	r2, #27
 8000fd2:	4095      	lsls	r5, r2
 8000fd4:	0028      	movs	r0, r5
 8000fd6:	1e45      	subs	r5, r0, #1
 8000fd8:	41a8      	sbcs	r0, r5
 8000fda:	0035      	movs	r5, r6
 8000fdc:	4305      	orrs	r5, r0
 8000fde:	2905      	cmp	r1, #5
 8000fe0:	dd01      	ble.n	8000fe6 <__aeabi_i2f+0x62>
 8000fe2:	1f4a      	subs	r2, r1, #5
 8000fe4:	4095      	lsls	r5, r2
 8000fe6:	002a      	movs	r2, r5
 8000fe8:	4e08      	ldr	r6, [pc, #32]	; (800100c <__aeabi_i2f+0x88>)
 8000fea:	4032      	ands	r2, r6
 8000fec:	0768      	lsls	r0, r5, #29
 8000fee:	d009      	beq.n	8001004 <__aeabi_i2f+0x80>
 8000ff0:	200f      	movs	r0, #15
 8000ff2:	4028      	ands	r0, r5
 8000ff4:	2804      	cmp	r0, #4
 8000ff6:	d005      	beq.n	8001004 <__aeabi_i2f+0x80>
 8000ff8:	3204      	adds	r2, #4
 8000ffa:	0150      	lsls	r0, r2, #5
 8000ffc:	d502      	bpl.n	8001004 <__aeabi_i2f+0x80>
 8000ffe:	239f      	movs	r3, #159	; 0x9f
 8001000:	4032      	ands	r2, r6
 8001002:	1a5b      	subs	r3, r3, r1
 8001004:	0192      	lsls	r2, r2, #6
 8001006:	0a55      	lsrs	r5, r2, #9
 8001008:	b2d8      	uxtb	r0, r3
 800100a:	e7d5      	b.n	8000fb8 <__aeabi_i2f+0x34>
 800100c:	fbffffff 	.word	0xfbffffff

08001010 <__aeabi_ui2f>:
 8001010:	b570      	push	{r4, r5, r6, lr}
 8001012:	1e05      	subs	r5, r0, #0
 8001014:	d00e      	beq.n	8001034 <__aeabi_ui2f+0x24>
 8001016:	f001 fe79 	bl	8002d0c <__clzsi2>
 800101a:	239e      	movs	r3, #158	; 0x9e
 800101c:	0004      	movs	r4, r0
 800101e:	1a1b      	subs	r3, r3, r0
 8001020:	2b96      	cmp	r3, #150	; 0x96
 8001022:	dc0c      	bgt.n	800103e <__aeabi_ui2f+0x2e>
 8001024:	2808      	cmp	r0, #8
 8001026:	dd01      	ble.n	800102c <__aeabi_ui2f+0x1c>
 8001028:	3c08      	subs	r4, #8
 800102a:	40a5      	lsls	r5, r4
 800102c:	026d      	lsls	r5, r5, #9
 800102e:	0a6d      	lsrs	r5, r5, #9
 8001030:	b2d8      	uxtb	r0, r3
 8001032:	e001      	b.n	8001038 <__aeabi_ui2f+0x28>
 8001034:	2000      	movs	r0, #0
 8001036:	2500      	movs	r5, #0
 8001038:	05c0      	lsls	r0, r0, #23
 800103a:	4328      	orrs	r0, r5
 800103c:	bd70      	pop	{r4, r5, r6, pc}
 800103e:	2b99      	cmp	r3, #153	; 0x99
 8001040:	dd09      	ble.n	8001056 <__aeabi_ui2f+0x46>
 8001042:	0002      	movs	r2, r0
 8001044:	0029      	movs	r1, r5
 8001046:	321b      	adds	r2, #27
 8001048:	4091      	lsls	r1, r2
 800104a:	1e4a      	subs	r2, r1, #1
 800104c:	4191      	sbcs	r1, r2
 800104e:	2205      	movs	r2, #5
 8001050:	1a12      	subs	r2, r2, r0
 8001052:	40d5      	lsrs	r5, r2
 8001054:	430d      	orrs	r5, r1
 8001056:	2c05      	cmp	r4, #5
 8001058:	dd01      	ble.n	800105e <__aeabi_ui2f+0x4e>
 800105a:	1f62      	subs	r2, r4, #5
 800105c:	4095      	lsls	r5, r2
 800105e:	0029      	movs	r1, r5
 8001060:	4e08      	ldr	r6, [pc, #32]	; (8001084 <__aeabi_ui2f+0x74>)
 8001062:	4031      	ands	r1, r6
 8001064:	076a      	lsls	r2, r5, #29
 8001066:	d009      	beq.n	800107c <__aeabi_ui2f+0x6c>
 8001068:	200f      	movs	r0, #15
 800106a:	4028      	ands	r0, r5
 800106c:	2804      	cmp	r0, #4
 800106e:	d005      	beq.n	800107c <__aeabi_ui2f+0x6c>
 8001070:	3104      	adds	r1, #4
 8001072:	014a      	lsls	r2, r1, #5
 8001074:	d502      	bpl.n	800107c <__aeabi_ui2f+0x6c>
 8001076:	239f      	movs	r3, #159	; 0x9f
 8001078:	4031      	ands	r1, r6
 800107a:	1b1b      	subs	r3, r3, r4
 800107c:	0189      	lsls	r1, r1, #6
 800107e:	0a4d      	lsrs	r5, r1, #9
 8001080:	b2d8      	uxtb	r0, r3
 8001082:	e7d9      	b.n	8001038 <__aeabi_ui2f+0x28>
 8001084:	fbffffff 	.word	0xfbffffff

08001088 <__aeabi_dadd>:
 8001088:	b5f0      	push	{r4, r5, r6, r7, lr}
 800108a:	464f      	mov	r7, r9
 800108c:	46d6      	mov	lr, sl
 800108e:	4646      	mov	r6, r8
 8001090:	000d      	movs	r5, r1
 8001092:	0001      	movs	r1, r0
 8001094:	0018      	movs	r0, r3
 8001096:	b5c0      	push	{r6, r7, lr}
 8001098:	0017      	movs	r7, r2
 800109a:	032b      	lsls	r3, r5, #12
 800109c:	0a5a      	lsrs	r2, r3, #9
 800109e:	0f4b      	lsrs	r3, r1, #29
 80010a0:	4313      	orrs	r3, r2
 80010a2:	00ca      	lsls	r2, r1, #3
 80010a4:	4691      	mov	r9, r2
 80010a6:	0302      	lsls	r2, r0, #12
 80010a8:	006e      	lsls	r6, r5, #1
 80010aa:	0041      	lsls	r1, r0, #1
 80010ac:	0a52      	lsrs	r2, r2, #9
 80010ae:	0fec      	lsrs	r4, r5, #31
 80010b0:	0f7d      	lsrs	r5, r7, #29
 80010b2:	4315      	orrs	r5, r2
 80010b4:	0d76      	lsrs	r6, r6, #21
 80010b6:	0d49      	lsrs	r1, r1, #21
 80010b8:	0fc0      	lsrs	r0, r0, #31
 80010ba:	4682      	mov	sl, r0
 80010bc:	46ac      	mov	ip, r5
 80010be:	00ff      	lsls	r7, r7, #3
 80010c0:	1a72      	subs	r2, r6, r1
 80010c2:	4284      	cmp	r4, r0
 80010c4:	d100      	bne.n	80010c8 <__aeabi_dadd+0x40>
 80010c6:	e098      	b.n	80011fa <__aeabi_dadd+0x172>
 80010c8:	2a00      	cmp	r2, #0
 80010ca:	dc00      	bgt.n	80010ce <__aeabi_dadd+0x46>
 80010cc:	e081      	b.n	80011d2 <__aeabi_dadd+0x14a>
 80010ce:	2900      	cmp	r1, #0
 80010d0:	d100      	bne.n	80010d4 <__aeabi_dadd+0x4c>
 80010d2:	e0b6      	b.n	8001242 <__aeabi_dadd+0x1ba>
 80010d4:	49c9      	ldr	r1, [pc, #804]	; (80013fc <__aeabi_dadd+0x374>)
 80010d6:	428e      	cmp	r6, r1
 80010d8:	d100      	bne.n	80010dc <__aeabi_dadd+0x54>
 80010da:	e172      	b.n	80013c2 <__aeabi_dadd+0x33a>
 80010dc:	2180      	movs	r1, #128	; 0x80
 80010de:	0028      	movs	r0, r5
 80010e0:	0409      	lsls	r1, r1, #16
 80010e2:	4308      	orrs	r0, r1
 80010e4:	4684      	mov	ip, r0
 80010e6:	2a38      	cmp	r2, #56	; 0x38
 80010e8:	dd00      	ble.n	80010ec <__aeabi_dadd+0x64>
 80010ea:	e15e      	b.n	80013aa <__aeabi_dadd+0x322>
 80010ec:	2a1f      	cmp	r2, #31
 80010ee:	dd00      	ble.n	80010f2 <__aeabi_dadd+0x6a>
 80010f0:	e1ee      	b.n	80014d0 <__aeabi_dadd+0x448>
 80010f2:	2020      	movs	r0, #32
 80010f4:	0039      	movs	r1, r7
 80010f6:	4665      	mov	r5, ip
 80010f8:	1a80      	subs	r0, r0, r2
 80010fa:	4087      	lsls	r7, r0
 80010fc:	40d1      	lsrs	r1, r2
 80010fe:	4085      	lsls	r5, r0
 8001100:	430d      	orrs	r5, r1
 8001102:	0039      	movs	r1, r7
 8001104:	1e4f      	subs	r7, r1, #1
 8001106:	41b9      	sbcs	r1, r7
 8001108:	4667      	mov	r7, ip
 800110a:	40d7      	lsrs	r7, r2
 800110c:	4329      	orrs	r1, r5
 800110e:	1bdb      	subs	r3, r3, r7
 8001110:	464a      	mov	r2, r9
 8001112:	1a55      	subs	r5, r2, r1
 8001114:	45a9      	cmp	r9, r5
 8001116:	4189      	sbcs	r1, r1
 8001118:	4249      	negs	r1, r1
 800111a:	1a5b      	subs	r3, r3, r1
 800111c:	4698      	mov	r8, r3
 800111e:	4643      	mov	r3, r8
 8001120:	021b      	lsls	r3, r3, #8
 8001122:	d400      	bmi.n	8001126 <__aeabi_dadd+0x9e>
 8001124:	e0cc      	b.n	80012c0 <__aeabi_dadd+0x238>
 8001126:	4643      	mov	r3, r8
 8001128:	025b      	lsls	r3, r3, #9
 800112a:	0a5b      	lsrs	r3, r3, #9
 800112c:	4698      	mov	r8, r3
 800112e:	4643      	mov	r3, r8
 8001130:	2b00      	cmp	r3, #0
 8001132:	d100      	bne.n	8001136 <__aeabi_dadd+0xae>
 8001134:	e12c      	b.n	8001390 <__aeabi_dadd+0x308>
 8001136:	4640      	mov	r0, r8
 8001138:	f001 fde8 	bl	8002d0c <__clzsi2>
 800113c:	0001      	movs	r1, r0
 800113e:	3908      	subs	r1, #8
 8001140:	2220      	movs	r2, #32
 8001142:	0028      	movs	r0, r5
 8001144:	4643      	mov	r3, r8
 8001146:	1a52      	subs	r2, r2, r1
 8001148:	408b      	lsls	r3, r1
 800114a:	40d0      	lsrs	r0, r2
 800114c:	408d      	lsls	r5, r1
 800114e:	4303      	orrs	r3, r0
 8001150:	428e      	cmp	r6, r1
 8001152:	dd00      	ble.n	8001156 <__aeabi_dadd+0xce>
 8001154:	e117      	b.n	8001386 <__aeabi_dadd+0x2fe>
 8001156:	1b8e      	subs	r6, r1, r6
 8001158:	1c72      	adds	r2, r6, #1
 800115a:	2a1f      	cmp	r2, #31
 800115c:	dd00      	ble.n	8001160 <__aeabi_dadd+0xd8>
 800115e:	e1a7      	b.n	80014b0 <__aeabi_dadd+0x428>
 8001160:	2120      	movs	r1, #32
 8001162:	0018      	movs	r0, r3
 8001164:	002e      	movs	r6, r5
 8001166:	1a89      	subs	r1, r1, r2
 8001168:	408d      	lsls	r5, r1
 800116a:	4088      	lsls	r0, r1
 800116c:	40d6      	lsrs	r6, r2
 800116e:	40d3      	lsrs	r3, r2
 8001170:	1e69      	subs	r1, r5, #1
 8001172:	418d      	sbcs	r5, r1
 8001174:	4330      	orrs	r0, r6
 8001176:	4698      	mov	r8, r3
 8001178:	2600      	movs	r6, #0
 800117a:	4305      	orrs	r5, r0
 800117c:	076b      	lsls	r3, r5, #29
 800117e:	d009      	beq.n	8001194 <__aeabi_dadd+0x10c>
 8001180:	230f      	movs	r3, #15
 8001182:	402b      	ands	r3, r5
 8001184:	2b04      	cmp	r3, #4
 8001186:	d005      	beq.n	8001194 <__aeabi_dadd+0x10c>
 8001188:	1d2b      	adds	r3, r5, #4
 800118a:	42ab      	cmp	r3, r5
 800118c:	41ad      	sbcs	r5, r5
 800118e:	426d      	negs	r5, r5
 8001190:	44a8      	add	r8, r5
 8001192:	001d      	movs	r5, r3
 8001194:	4643      	mov	r3, r8
 8001196:	021b      	lsls	r3, r3, #8
 8001198:	d400      	bmi.n	800119c <__aeabi_dadd+0x114>
 800119a:	e094      	b.n	80012c6 <__aeabi_dadd+0x23e>
 800119c:	4b97      	ldr	r3, [pc, #604]	; (80013fc <__aeabi_dadd+0x374>)
 800119e:	1c72      	adds	r2, r6, #1
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d100      	bne.n	80011a6 <__aeabi_dadd+0x11e>
 80011a4:	e09d      	b.n	80012e2 <__aeabi_dadd+0x25a>
 80011a6:	4641      	mov	r1, r8
 80011a8:	4b95      	ldr	r3, [pc, #596]	; (8001400 <__aeabi_dadd+0x378>)
 80011aa:	08ed      	lsrs	r5, r5, #3
 80011ac:	4019      	ands	r1, r3
 80011ae:	000b      	movs	r3, r1
 80011b0:	0552      	lsls	r2, r2, #21
 80011b2:	0749      	lsls	r1, r1, #29
 80011b4:	025b      	lsls	r3, r3, #9
 80011b6:	4329      	orrs	r1, r5
 80011b8:	0b1b      	lsrs	r3, r3, #12
 80011ba:	0d52      	lsrs	r2, r2, #21
 80011bc:	0512      	lsls	r2, r2, #20
 80011be:	4313      	orrs	r3, r2
 80011c0:	07e4      	lsls	r4, r4, #31
 80011c2:	4323      	orrs	r3, r4
 80011c4:	0008      	movs	r0, r1
 80011c6:	0019      	movs	r1, r3
 80011c8:	bce0      	pop	{r5, r6, r7}
 80011ca:	46ba      	mov	sl, r7
 80011cc:	46b1      	mov	r9, r6
 80011ce:	46a8      	mov	r8, r5
 80011d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011d2:	2a00      	cmp	r2, #0
 80011d4:	d043      	beq.n	800125e <__aeabi_dadd+0x1d6>
 80011d6:	1b8a      	subs	r2, r1, r6
 80011d8:	2e00      	cmp	r6, #0
 80011da:	d000      	beq.n	80011de <__aeabi_dadd+0x156>
 80011dc:	e12a      	b.n	8001434 <__aeabi_dadd+0x3ac>
 80011de:	464c      	mov	r4, r9
 80011e0:	431c      	orrs	r4, r3
 80011e2:	d100      	bne.n	80011e6 <__aeabi_dadd+0x15e>
 80011e4:	e1d1      	b.n	800158a <__aeabi_dadd+0x502>
 80011e6:	1e54      	subs	r4, r2, #1
 80011e8:	2a01      	cmp	r2, #1
 80011ea:	d100      	bne.n	80011ee <__aeabi_dadd+0x166>
 80011ec:	e21f      	b.n	800162e <__aeabi_dadd+0x5a6>
 80011ee:	4d83      	ldr	r5, [pc, #524]	; (80013fc <__aeabi_dadd+0x374>)
 80011f0:	42aa      	cmp	r2, r5
 80011f2:	d100      	bne.n	80011f6 <__aeabi_dadd+0x16e>
 80011f4:	e272      	b.n	80016dc <__aeabi_dadd+0x654>
 80011f6:	0022      	movs	r2, r4
 80011f8:	e123      	b.n	8001442 <__aeabi_dadd+0x3ba>
 80011fa:	2a00      	cmp	r2, #0
 80011fc:	dc00      	bgt.n	8001200 <__aeabi_dadd+0x178>
 80011fe:	e098      	b.n	8001332 <__aeabi_dadd+0x2aa>
 8001200:	2900      	cmp	r1, #0
 8001202:	d042      	beq.n	800128a <__aeabi_dadd+0x202>
 8001204:	497d      	ldr	r1, [pc, #500]	; (80013fc <__aeabi_dadd+0x374>)
 8001206:	428e      	cmp	r6, r1
 8001208:	d100      	bne.n	800120c <__aeabi_dadd+0x184>
 800120a:	e0da      	b.n	80013c2 <__aeabi_dadd+0x33a>
 800120c:	2180      	movs	r1, #128	; 0x80
 800120e:	0028      	movs	r0, r5
 8001210:	0409      	lsls	r1, r1, #16
 8001212:	4308      	orrs	r0, r1
 8001214:	4684      	mov	ip, r0
 8001216:	2a38      	cmp	r2, #56	; 0x38
 8001218:	dd00      	ble.n	800121c <__aeabi_dadd+0x194>
 800121a:	e129      	b.n	8001470 <__aeabi_dadd+0x3e8>
 800121c:	2a1f      	cmp	r2, #31
 800121e:	dc00      	bgt.n	8001222 <__aeabi_dadd+0x19a>
 8001220:	e187      	b.n	8001532 <__aeabi_dadd+0x4aa>
 8001222:	0011      	movs	r1, r2
 8001224:	4665      	mov	r5, ip
 8001226:	3920      	subs	r1, #32
 8001228:	40cd      	lsrs	r5, r1
 800122a:	2a20      	cmp	r2, #32
 800122c:	d004      	beq.n	8001238 <__aeabi_dadd+0x1b0>
 800122e:	2040      	movs	r0, #64	; 0x40
 8001230:	4661      	mov	r1, ip
 8001232:	1a82      	subs	r2, r0, r2
 8001234:	4091      	lsls	r1, r2
 8001236:	430f      	orrs	r7, r1
 8001238:	0039      	movs	r1, r7
 800123a:	1e4f      	subs	r7, r1, #1
 800123c:	41b9      	sbcs	r1, r7
 800123e:	430d      	orrs	r5, r1
 8001240:	e11b      	b.n	800147a <__aeabi_dadd+0x3f2>
 8001242:	0029      	movs	r1, r5
 8001244:	4339      	orrs	r1, r7
 8001246:	d100      	bne.n	800124a <__aeabi_dadd+0x1c2>
 8001248:	e0b5      	b.n	80013b6 <__aeabi_dadd+0x32e>
 800124a:	1e51      	subs	r1, r2, #1
 800124c:	2a01      	cmp	r2, #1
 800124e:	d100      	bne.n	8001252 <__aeabi_dadd+0x1ca>
 8001250:	e1ab      	b.n	80015aa <__aeabi_dadd+0x522>
 8001252:	486a      	ldr	r0, [pc, #424]	; (80013fc <__aeabi_dadd+0x374>)
 8001254:	4282      	cmp	r2, r0
 8001256:	d100      	bne.n	800125a <__aeabi_dadd+0x1d2>
 8001258:	e1b2      	b.n	80015c0 <__aeabi_dadd+0x538>
 800125a:	000a      	movs	r2, r1
 800125c:	e743      	b.n	80010e6 <__aeabi_dadd+0x5e>
 800125e:	4969      	ldr	r1, [pc, #420]	; (8001404 <__aeabi_dadd+0x37c>)
 8001260:	1c75      	adds	r5, r6, #1
 8001262:	420d      	tst	r5, r1
 8001264:	d000      	beq.n	8001268 <__aeabi_dadd+0x1e0>
 8001266:	e0cf      	b.n	8001408 <__aeabi_dadd+0x380>
 8001268:	2e00      	cmp	r6, #0
 800126a:	d000      	beq.n	800126e <__aeabi_dadd+0x1e6>
 800126c:	e193      	b.n	8001596 <__aeabi_dadd+0x50e>
 800126e:	4649      	mov	r1, r9
 8001270:	4319      	orrs	r1, r3
 8001272:	d100      	bne.n	8001276 <__aeabi_dadd+0x1ee>
 8001274:	e1d1      	b.n	800161a <__aeabi_dadd+0x592>
 8001276:	4661      	mov	r1, ip
 8001278:	4339      	orrs	r1, r7
 800127a:	d000      	beq.n	800127e <__aeabi_dadd+0x1f6>
 800127c:	e1e3      	b.n	8001646 <__aeabi_dadd+0x5be>
 800127e:	4649      	mov	r1, r9
 8001280:	0758      	lsls	r0, r3, #29
 8001282:	08c9      	lsrs	r1, r1, #3
 8001284:	4301      	orrs	r1, r0
 8001286:	08db      	lsrs	r3, r3, #3
 8001288:	e026      	b.n	80012d8 <__aeabi_dadd+0x250>
 800128a:	0029      	movs	r1, r5
 800128c:	4339      	orrs	r1, r7
 800128e:	d100      	bne.n	8001292 <__aeabi_dadd+0x20a>
 8001290:	e091      	b.n	80013b6 <__aeabi_dadd+0x32e>
 8001292:	1e51      	subs	r1, r2, #1
 8001294:	2a01      	cmp	r2, #1
 8001296:	d005      	beq.n	80012a4 <__aeabi_dadd+0x21c>
 8001298:	4858      	ldr	r0, [pc, #352]	; (80013fc <__aeabi_dadd+0x374>)
 800129a:	4282      	cmp	r2, r0
 800129c:	d100      	bne.n	80012a0 <__aeabi_dadd+0x218>
 800129e:	e18f      	b.n	80015c0 <__aeabi_dadd+0x538>
 80012a0:	000a      	movs	r2, r1
 80012a2:	e7b8      	b.n	8001216 <__aeabi_dadd+0x18e>
 80012a4:	003d      	movs	r5, r7
 80012a6:	444d      	add	r5, r9
 80012a8:	454d      	cmp	r5, r9
 80012aa:	4189      	sbcs	r1, r1
 80012ac:	4463      	add	r3, ip
 80012ae:	4698      	mov	r8, r3
 80012b0:	4249      	negs	r1, r1
 80012b2:	4488      	add	r8, r1
 80012b4:	4643      	mov	r3, r8
 80012b6:	2602      	movs	r6, #2
 80012b8:	021b      	lsls	r3, r3, #8
 80012ba:	d500      	bpl.n	80012be <__aeabi_dadd+0x236>
 80012bc:	e0eb      	b.n	8001496 <__aeabi_dadd+0x40e>
 80012be:	3e01      	subs	r6, #1
 80012c0:	076b      	lsls	r3, r5, #29
 80012c2:	d000      	beq.n	80012c6 <__aeabi_dadd+0x23e>
 80012c4:	e75c      	b.n	8001180 <__aeabi_dadd+0xf8>
 80012c6:	4643      	mov	r3, r8
 80012c8:	08e9      	lsrs	r1, r5, #3
 80012ca:	075a      	lsls	r2, r3, #29
 80012cc:	4311      	orrs	r1, r2
 80012ce:	0032      	movs	r2, r6
 80012d0:	08db      	lsrs	r3, r3, #3
 80012d2:	484a      	ldr	r0, [pc, #296]	; (80013fc <__aeabi_dadd+0x374>)
 80012d4:	4282      	cmp	r2, r0
 80012d6:	d021      	beq.n	800131c <__aeabi_dadd+0x294>
 80012d8:	031b      	lsls	r3, r3, #12
 80012da:	0552      	lsls	r2, r2, #21
 80012dc:	0b1b      	lsrs	r3, r3, #12
 80012de:	0d52      	lsrs	r2, r2, #21
 80012e0:	e76c      	b.n	80011bc <__aeabi_dadd+0x134>
 80012e2:	2300      	movs	r3, #0
 80012e4:	2100      	movs	r1, #0
 80012e6:	e769      	b.n	80011bc <__aeabi_dadd+0x134>
 80012e8:	002a      	movs	r2, r5
 80012ea:	433a      	orrs	r2, r7
 80012ec:	d069      	beq.n	80013c2 <__aeabi_dadd+0x33a>
 80012ee:	464a      	mov	r2, r9
 80012f0:	0758      	lsls	r0, r3, #29
 80012f2:	08d1      	lsrs	r1, r2, #3
 80012f4:	08da      	lsrs	r2, r3, #3
 80012f6:	2380      	movs	r3, #128	; 0x80
 80012f8:	031b      	lsls	r3, r3, #12
 80012fa:	4308      	orrs	r0, r1
 80012fc:	421a      	tst	r2, r3
 80012fe:	d007      	beq.n	8001310 <__aeabi_dadd+0x288>
 8001300:	0029      	movs	r1, r5
 8001302:	08ed      	lsrs	r5, r5, #3
 8001304:	421d      	tst	r5, r3
 8001306:	d103      	bne.n	8001310 <__aeabi_dadd+0x288>
 8001308:	002a      	movs	r2, r5
 800130a:	08ff      	lsrs	r7, r7, #3
 800130c:	0748      	lsls	r0, r1, #29
 800130e:	4338      	orrs	r0, r7
 8001310:	0f43      	lsrs	r3, r0, #29
 8001312:	00c1      	lsls	r1, r0, #3
 8001314:	075b      	lsls	r3, r3, #29
 8001316:	08c9      	lsrs	r1, r1, #3
 8001318:	4319      	orrs	r1, r3
 800131a:	0013      	movs	r3, r2
 800131c:	000a      	movs	r2, r1
 800131e:	431a      	orrs	r2, r3
 8001320:	d100      	bne.n	8001324 <__aeabi_dadd+0x29c>
 8001322:	e213      	b.n	800174c <__aeabi_dadd+0x6c4>
 8001324:	2280      	movs	r2, #128	; 0x80
 8001326:	0312      	lsls	r2, r2, #12
 8001328:	4313      	orrs	r3, r2
 800132a:	031b      	lsls	r3, r3, #12
 800132c:	4a33      	ldr	r2, [pc, #204]	; (80013fc <__aeabi_dadd+0x374>)
 800132e:	0b1b      	lsrs	r3, r3, #12
 8001330:	e744      	b.n	80011bc <__aeabi_dadd+0x134>
 8001332:	2a00      	cmp	r2, #0
 8001334:	d04b      	beq.n	80013ce <__aeabi_dadd+0x346>
 8001336:	1b8a      	subs	r2, r1, r6
 8001338:	2e00      	cmp	r6, #0
 800133a:	d100      	bne.n	800133e <__aeabi_dadd+0x2b6>
 800133c:	e0e7      	b.n	800150e <__aeabi_dadd+0x486>
 800133e:	482f      	ldr	r0, [pc, #188]	; (80013fc <__aeabi_dadd+0x374>)
 8001340:	4281      	cmp	r1, r0
 8001342:	d100      	bne.n	8001346 <__aeabi_dadd+0x2be>
 8001344:	e195      	b.n	8001672 <__aeabi_dadd+0x5ea>
 8001346:	2080      	movs	r0, #128	; 0x80
 8001348:	0400      	lsls	r0, r0, #16
 800134a:	4303      	orrs	r3, r0
 800134c:	2a38      	cmp	r2, #56	; 0x38
 800134e:	dd00      	ble.n	8001352 <__aeabi_dadd+0x2ca>
 8001350:	e143      	b.n	80015da <__aeabi_dadd+0x552>
 8001352:	2a1f      	cmp	r2, #31
 8001354:	dd00      	ble.n	8001358 <__aeabi_dadd+0x2d0>
 8001356:	e1db      	b.n	8001710 <__aeabi_dadd+0x688>
 8001358:	2020      	movs	r0, #32
 800135a:	001d      	movs	r5, r3
 800135c:	464e      	mov	r6, r9
 800135e:	1a80      	subs	r0, r0, r2
 8001360:	4085      	lsls	r5, r0
 8001362:	40d6      	lsrs	r6, r2
 8001364:	4335      	orrs	r5, r6
 8001366:	464e      	mov	r6, r9
 8001368:	4086      	lsls	r6, r0
 800136a:	0030      	movs	r0, r6
 800136c:	40d3      	lsrs	r3, r2
 800136e:	1e46      	subs	r6, r0, #1
 8001370:	41b0      	sbcs	r0, r6
 8001372:	449c      	add	ip, r3
 8001374:	4305      	orrs	r5, r0
 8001376:	19ed      	adds	r5, r5, r7
 8001378:	42bd      	cmp	r5, r7
 800137a:	419b      	sbcs	r3, r3
 800137c:	425b      	negs	r3, r3
 800137e:	4463      	add	r3, ip
 8001380:	4698      	mov	r8, r3
 8001382:	000e      	movs	r6, r1
 8001384:	e07f      	b.n	8001486 <__aeabi_dadd+0x3fe>
 8001386:	4a1e      	ldr	r2, [pc, #120]	; (8001400 <__aeabi_dadd+0x378>)
 8001388:	1a76      	subs	r6, r6, r1
 800138a:	4013      	ands	r3, r2
 800138c:	4698      	mov	r8, r3
 800138e:	e6f5      	b.n	800117c <__aeabi_dadd+0xf4>
 8001390:	0028      	movs	r0, r5
 8001392:	f001 fcbb 	bl	8002d0c <__clzsi2>
 8001396:	0001      	movs	r1, r0
 8001398:	3118      	adds	r1, #24
 800139a:	291f      	cmp	r1, #31
 800139c:	dc00      	bgt.n	80013a0 <__aeabi_dadd+0x318>
 800139e:	e6cf      	b.n	8001140 <__aeabi_dadd+0xb8>
 80013a0:	002b      	movs	r3, r5
 80013a2:	3808      	subs	r0, #8
 80013a4:	4083      	lsls	r3, r0
 80013a6:	2500      	movs	r5, #0
 80013a8:	e6d2      	b.n	8001150 <__aeabi_dadd+0xc8>
 80013aa:	4662      	mov	r2, ip
 80013ac:	433a      	orrs	r2, r7
 80013ae:	0011      	movs	r1, r2
 80013b0:	1e4f      	subs	r7, r1, #1
 80013b2:	41b9      	sbcs	r1, r7
 80013b4:	e6ac      	b.n	8001110 <__aeabi_dadd+0x88>
 80013b6:	4649      	mov	r1, r9
 80013b8:	0758      	lsls	r0, r3, #29
 80013ba:	08c9      	lsrs	r1, r1, #3
 80013bc:	4301      	orrs	r1, r0
 80013be:	08db      	lsrs	r3, r3, #3
 80013c0:	e787      	b.n	80012d2 <__aeabi_dadd+0x24a>
 80013c2:	4649      	mov	r1, r9
 80013c4:	075a      	lsls	r2, r3, #29
 80013c6:	08c9      	lsrs	r1, r1, #3
 80013c8:	4311      	orrs	r1, r2
 80013ca:	08db      	lsrs	r3, r3, #3
 80013cc:	e7a6      	b.n	800131c <__aeabi_dadd+0x294>
 80013ce:	490d      	ldr	r1, [pc, #52]	; (8001404 <__aeabi_dadd+0x37c>)
 80013d0:	1c70      	adds	r0, r6, #1
 80013d2:	4208      	tst	r0, r1
 80013d4:	d000      	beq.n	80013d8 <__aeabi_dadd+0x350>
 80013d6:	e0bb      	b.n	8001550 <__aeabi_dadd+0x4c8>
 80013d8:	2e00      	cmp	r6, #0
 80013da:	d000      	beq.n	80013de <__aeabi_dadd+0x356>
 80013dc:	e114      	b.n	8001608 <__aeabi_dadd+0x580>
 80013de:	4649      	mov	r1, r9
 80013e0:	4319      	orrs	r1, r3
 80013e2:	d100      	bne.n	80013e6 <__aeabi_dadd+0x35e>
 80013e4:	e175      	b.n	80016d2 <__aeabi_dadd+0x64a>
 80013e6:	0029      	movs	r1, r5
 80013e8:	4339      	orrs	r1, r7
 80013ea:	d000      	beq.n	80013ee <__aeabi_dadd+0x366>
 80013ec:	e17e      	b.n	80016ec <__aeabi_dadd+0x664>
 80013ee:	4649      	mov	r1, r9
 80013f0:	0758      	lsls	r0, r3, #29
 80013f2:	08c9      	lsrs	r1, r1, #3
 80013f4:	4301      	orrs	r1, r0
 80013f6:	08db      	lsrs	r3, r3, #3
 80013f8:	e76e      	b.n	80012d8 <__aeabi_dadd+0x250>
 80013fa:	46c0      	nop			; (mov r8, r8)
 80013fc:	000007ff 	.word	0x000007ff
 8001400:	ff7fffff 	.word	0xff7fffff
 8001404:	000007fe 	.word	0x000007fe
 8001408:	4649      	mov	r1, r9
 800140a:	1bcd      	subs	r5, r1, r7
 800140c:	4661      	mov	r1, ip
 800140e:	1a58      	subs	r0, r3, r1
 8001410:	45a9      	cmp	r9, r5
 8001412:	4189      	sbcs	r1, r1
 8001414:	4249      	negs	r1, r1
 8001416:	4688      	mov	r8, r1
 8001418:	0001      	movs	r1, r0
 800141a:	4640      	mov	r0, r8
 800141c:	1a09      	subs	r1, r1, r0
 800141e:	4688      	mov	r8, r1
 8001420:	0209      	lsls	r1, r1, #8
 8001422:	d500      	bpl.n	8001426 <__aeabi_dadd+0x39e>
 8001424:	e0a6      	b.n	8001574 <__aeabi_dadd+0x4ec>
 8001426:	4641      	mov	r1, r8
 8001428:	4329      	orrs	r1, r5
 800142a:	d000      	beq.n	800142e <__aeabi_dadd+0x3a6>
 800142c:	e67f      	b.n	800112e <__aeabi_dadd+0xa6>
 800142e:	2300      	movs	r3, #0
 8001430:	2400      	movs	r4, #0
 8001432:	e751      	b.n	80012d8 <__aeabi_dadd+0x250>
 8001434:	4cc7      	ldr	r4, [pc, #796]	; (8001754 <__aeabi_dadd+0x6cc>)
 8001436:	42a1      	cmp	r1, r4
 8001438:	d100      	bne.n	800143c <__aeabi_dadd+0x3b4>
 800143a:	e0c7      	b.n	80015cc <__aeabi_dadd+0x544>
 800143c:	2480      	movs	r4, #128	; 0x80
 800143e:	0424      	lsls	r4, r4, #16
 8001440:	4323      	orrs	r3, r4
 8001442:	2a38      	cmp	r2, #56	; 0x38
 8001444:	dc54      	bgt.n	80014f0 <__aeabi_dadd+0x468>
 8001446:	2a1f      	cmp	r2, #31
 8001448:	dd00      	ble.n	800144c <__aeabi_dadd+0x3c4>
 800144a:	e0cc      	b.n	80015e6 <__aeabi_dadd+0x55e>
 800144c:	2420      	movs	r4, #32
 800144e:	4648      	mov	r0, r9
 8001450:	1aa4      	subs	r4, r4, r2
 8001452:	001d      	movs	r5, r3
 8001454:	464e      	mov	r6, r9
 8001456:	40a0      	lsls	r0, r4
 8001458:	40d6      	lsrs	r6, r2
 800145a:	40a5      	lsls	r5, r4
 800145c:	0004      	movs	r4, r0
 800145e:	40d3      	lsrs	r3, r2
 8001460:	4662      	mov	r2, ip
 8001462:	4335      	orrs	r5, r6
 8001464:	1e66      	subs	r6, r4, #1
 8001466:	41b4      	sbcs	r4, r6
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	469c      	mov	ip, r3
 800146c:	4325      	orrs	r5, r4
 800146e:	e044      	b.n	80014fa <__aeabi_dadd+0x472>
 8001470:	4662      	mov	r2, ip
 8001472:	433a      	orrs	r2, r7
 8001474:	0015      	movs	r5, r2
 8001476:	1e6f      	subs	r7, r5, #1
 8001478:	41bd      	sbcs	r5, r7
 800147a:	444d      	add	r5, r9
 800147c:	454d      	cmp	r5, r9
 800147e:	4189      	sbcs	r1, r1
 8001480:	4249      	negs	r1, r1
 8001482:	4688      	mov	r8, r1
 8001484:	4498      	add	r8, r3
 8001486:	4643      	mov	r3, r8
 8001488:	021b      	lsls	r3, r3, #8
 800148a:	d400      	bmi.n	800148e <__aeabi_dadd+0x406>
 800148c:	e718      	b.n	80012c0 <__aeabi_dadd+0x238>
 800148e:	4bb1      	ldr	r3, [pc, #708]	; (8001754 <__aeabi_dadd+0x6cc>)
 8001490:	3601      	adds	r6, #1
 8001492:	429e      	cmp	r6, r3
 8001494:	d049      	beq.n	800152a <__aeabi_dadd+0x4a2>
 8001496:	4642      	mov	r2, r8
 8001498:	4baf      	ldr	r3, [pc, #700]	; (8001758 <__aeabi_dadd+0x6d0>)
 800149a:	2101      	movs	r1, #1
 800149c:	401a      	ands	r2, r3
 800149e:	0013      	movs	r3, r2
 80014a0:	086a      	lsrs	r2, r5, #1
 80014a2:	400d      	ands	r5, r1
 80014a4:	4315      	orrs	r5, r2
 80014a6:	07d9      	lsls	r1, r3, #31
 80014a8:	085b      	lsrs	r3, r3, #1
 80014aa:	4698      	mov	r8, r3
 80014ac:	430d      	orrs	r5, r1
 80014ae:	e665      	b.n	800117c <__aeabi_dadd+0xf4>
 80014b0:	0018      	movs	r0, r3
 80014b2:	3e1f      	subs	r6, #31
 80014b4:	40f0      	lsrs	r0, r6
 80014b6:	2a20      	cmp	r2, #32
 80014b8:	d003      	beq.n	80014c2 <__aeabi_dadd+0x43a>
 80014ba:	2140      	movs	r1, #64	; 0x40
 80014bc:	1a8a      	subs	r2, r1, r2
 80014be:	4093      	lsls	r3, r2
 80014c0:	431d      	orrs	r5, r3
 80014c2:	1e69      	subs	r1, r5, #1
 80014c4:	418d      	sbcs	r5, r1
 80014c6:	2300      	movs	r3, #0
 80014c8:	2600      	movs	r6, #0
 80014ca:	4698      	mov	r8, r3
 80014cc:	4305      	orrs	r5, r0
 80014ce:	e6f7      	b.n	80012c0 <__aeabi_dadd+0x238>
 80014d0:	0011      	movs	r1, r2
 80014d2:	4665      	mov	r5, ip
 80014d4:	3920      	subs	r1, #32
 80014d6:	40cd      	lsrs	r5, r1
 80014d8:	2a20      	cmp	r2, #32
 80014da:	d004      	beq.n	80014e6 <__aeabi_dadd+0x45e>
 80014dc:	2040      	movs	r0, #64	; 0x40
 80014de:	4661      	mov	r1, ip
 80014e0:	1a82      	subs	r2, r0, r2
 80014e2:	4091      	lsls	r1, r2
 80014e4:	430f      	orrs	r7, r1
 80014e6:	0039      	movs	r1, r7
 80014e8:	1e4f      	subs	r7, r1, #1
 80014ea:	41b9      	sbcs	r1, r7
 80014ec:	4329      	orrs	r1, r5
 80014ee:	e60f      	b.n	8001110 <__aeabi_dadd+0x88>
 80014f0:	464a      	mov	r2, r9
 80014f2:	4313      	orrs	r3, r2
 80014f4:	001d      	movs	r5, r3
 80014f6:	1e6b      	subs	r3, r5, #1
 80014f8:	419d      	sbcs	r5, r3
 80014fa:	1b7d      	subs	r5, r7, r5
 80014fc:	42af      	cmp	r7, r5
 80014fe:	419b      	sbcs	r3, r3
 8001500:	4662      	mov	r2, ip
 8001502:	425b      	negs	r3, r3
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	4698      	mov	r8, r3
 8001508:	4654      	mov	r4, sl
 800150a:	000e      	movs	r6, r1
 800150c:	e607      	b.n	800111e <__aeabi_dadd+0x96>
 800150e:	4648      	mov	r0, r9
 8001510:	4318      	orrs	r0, r3
 8001512:	d100      	bne.n	8001516 <__aeabi_dadd+0x48e>
 8001514:	e0b3      	b.n	800167e <__aeabi_dadd+0x5f6>
 8001516:	1e50      	subs	r0, r2, #1
 8001518:	2a01      	cmp	r2, #1
 800151a:	d100      	bne.n	800151e <__aeabi_dadd+0x496>
 800151c:	e10d      	b.n	800173a <__aeabi_dadd+0x6b2>
 800151e:	4d8d      	ldr	r5, [pc, #564]	; (8001754 <__aeabi_dadd+0x6cc>)
 8001520:	42aa      	cmp	r2, r5
 8001522:	d100      	bne.n	8001526 <__aeabi_dadd+0x49e>
 8001524:	e0a5      	b.n	8001672 <__aeabi_dadd+0x5ea>
 8001526:	0002      	movs	r2, r0
 8001528:	e710      	b.n	800134c <__aeabi_dadd+0x2c4>
 800152a:	0032      	movs	r2, r6
 800152c:	2300      	movs	r3, #0
 800152e:	2100      	movs	r1, #0
 8001530:	e644      	b.n	80011bc <__aeabi_dadd+0x134>
 8001532:	2120      	movs	r1, #32
 8001534:	0038      	movs	r0, r7
 8001536:	1a89      	subs	r1, r1, r2
 8001538:	4665      	mov	r5, ip
 800153a:	408f      	lsls	r7, r1
 800153c:	408d      	lsls	r5, r1
 800153e:	40d0      	lsrs	r0, r2
 8001540:	1e79      	subs	r1, r7, #1
 8001542:	418f      	sbcs	r7, r1
 8001544:	4305      	orrs	r5, r0
 8001546:	433d      	orrs	r5, r7
 8001548:	4667      	mov	r7, ip
 800154a:	40d7      	lsrs	r7, r2
 800154c:	19db      	adds	r3, r3, r7
 800154e:	e794      	b.n	800147a <__aeabi_dadd+0x3f2>
 8001550:	4a80      	ldr	r2, [pc, #512]	; (8001754 <__aeabi_dadd+0x6cc>)
 8001552:	4290      	cmp	r0, r2
 8001554:	d100      	bne.n	8001558 <__aeabi_dadd+0x4d0>
 8001556:	e0ec      	b.n	8001732 <__aeabi_dadd+0x6aa>
 8001558:	0039      	movs	r1, r7
 800155a:	4449      	add	r1, r9
 800155c:	4549      	cmp	r1, r9
 800155e:	4192      	sbcs	r2, r2
 8001560:	4463      	add	r3, ip
 8001562:	4252      	negs	r2, r2
 8001564:	189b      	adds	r3, r3, r2
 8001566:	07dd      	lsls	r5, r3, #31
 8001568:	0849      	lsrs	r1, r1, #1
 800156a:	085b      	lsrs	r3, r3, #1
 800156c:	4698      	mov	r8, r3
 800156e:	0006      	movs	r6, r0
 8001570:	430d      	orrs	r5, r1
 8001572:	e6a5      	b.n	80012c0 <__aeabi_dadd+0x238>
 8001574:	464a      	mov	r2, r9
 8001576:	1abd      	subs	r5, r7, r2
 8001578:	42af      	cmp	r7, r5
 800157a:	4189      	sbcs	r1, r1
 800157c:	4662      	mov	r2, ip
 800157e:	4249      	negs	r1, r1
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	1a5b      	subs	r3, r3, r1
 8001584:	4698      	mov	r8, r3
 8001586:	4654      	mov	r4, sl
 8001588:	e5d1      	b.n	800112e <__aeabi_dadd+0xa6>
 800158a:	076c      	lsls	r4, r5, #29
 800158c:	08f9      	lsrs	r1, r7, #3
 800158e:	4321      	orrs	r1, r4
 8001590:	08eb      	lsrs	r3, r5, #3
 8001592:	0004      	movs	r4, r0
 8001594:	e69d      	b.n	80012d2 <__aeabi_dadd+0x24a>
 8001596:	464a      	mov	r2, r9
 8001598:	431a      	orrs	r2, r3
 800159a:	d175      	bne.n	8001688 <__aeabi_dadd+0x600>
 800159c:	4661      	mov	r1, ip
 800159e:	4339      	orrs	r1, r7
 80015a0:	d114      	bne.n	80015cc <__aeabi_dadd+0x544>
 80015a2:	2380      	movs	r3, #128	; 0x80
 80015a4:	2400      	movs	r4, #0
 80015a6:	031b      	lsls	r3, r3, #12
 80015a8:	e6bc      	b.n	8001324 <__aeabi_dadd+0x29c>
 80015aa:	464a      	mov	r2, r9
 80015ac:	1bd5      	subs	r5, r2, r7
 80015ae:	45a9      	cmp	r9, r5
 80015b0:	4189      	sbcs	r1, r1
 80015b2:	4662      	mov	r2, ip
 80015b4:	4249      	negs	r1, r1
 80015b6:	1a9b      	subs	r3, r3, r2
 80015b8:	1a5b      	subs	r3, r3, r1
 80015ba:	4698      	mov	r8, r3
 80015bc:	2601      	movs	r6, #1
 80015be:	e5ae      	b.n	800111e <__aeabi_dadd+0x96>
 80015c0:	464a      	mov	r2, r9
 80015c2:	08d1      	lsrs	r1, r2, #3
 80015c4:	075a      	lsls	r2, r3, #29
 80015c6:	4311      	orrs	r1, r2
 80015c8:	08db      	lsrs	r3, r3, #3
 80015ca:	e6a7      	b.n	800131c <__aeabi_dadd+0x294>
 80015cc:	4663      	mov	r3, ip
 80015ce:	08f9      	lsrs	r1, r7, #3
 80015d0:	075a      	lsls	r2, r3, #29
 80015d2:	4654      	mov	r4, sl
 80015d4:	4311      	orrs	r1, r2
 80015d6:	08db      	lsrs	r3, r3, #3
 80015d8:	e6a0      	b.n	800131c <__aeabi_dadd+0x294>
 80015da:	464a      	mov	r2, r9
 80015dc:	4313      	orrs	r3, r2
 80015de:	001d      	movs	r5, r3
 80015e0:	1e6b      	subs	r3, r5, #1
 80015e2:	419d      	sbcs	r5, r3
 80015e4:	e6c7      	b.n	8001376 <__aeabi_dadd+0x2ee>
 80015e6:	0014      	movs	r4, r2
 80015e8:	001e      	movs	r6, r3
 80015ea:	3c20      	subs	r4, #32
 80015ec:	40e6      	lsrs	r6, r4
 80015ee:	2a20      	cmp	r2, #32
 80015f0:	d005      	beq.n	80015fe <__aeabi_dadd+0x576>
 80015f2:	2440      	movs	r4, #64	; 0x40
 80015f4:	1aa2      	subs	r2, r4, r2
 80015f6:	4093      	lsls	r3, r2
 80015f8:	464a      	mov	r2, r9
 80015fa:	431a      	orrs	r2, r3
 80015fc:	4691      	mov	r9, r2
 80015fe:	464d      	mov	r5, r9
 8001600:	1e6b      	subs	r3, r5, #1
 8001602:	419d      	sbcs	r5, r3
 8001604:	4335      	orrs	r5, r6
 8001606:	e778      	b.n	80014fa <__aeabi_dadd+0x472>
 8001608:	464a      	mov	r2, r9
 800160a:	431a      	orrs	r2, r3
 800160c:	d000      	beq.n	8001610 <__aeabi_dadd+0x588>
 800160e:	e66b      	b.n	80012e8 <__aeabi_dadd+0x260>
 8001610:	076b      	lsls	r3, r5, #29
 8001612:	08f9      	lsrs	r1, r7, #3
 8001614:	4319      	orrs	r1, r3
 8001616:	08eb      	lsrs	r3, r5, #3
 8001618:	e680      	b.n	800131c <__aeabi_dadd+0x294>
 800161a:	4661      	mov	r1, ip
 800161c:	4339      	orrs	r1, r7
 800161e:	d054      	beq.n	80016ca <__aeabi_dadd+0x642>
 8001620:	4663      	mov	r3, ip
 8001622:	08f9      	lsrs	r1, r7, #3
 8001624:	075c      	lsls	r4, r3, #29
 8001626:	4321      	orrs	r1, r4
 8001628:	08db      	lsrs	r3, r3, #3
 800162a:	0004      	movs	r4, r0
 800162c:	e654      	b.n	80012d8 <__aeabi_dadd+0x250>
 800162e:	464a      	mov	r2, r9
 8001630:	1abd      	subs	r5, r7, r2
 8001632:	42af      	cmp	r7, r5
 8001634:	4189      	sbcs	r1, r1
 8001636:	4662      	mov	r2, ip
 8001638:	4249      	negs	r1, r1
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	1a5b      	subs	r3, r3, r1
 800163e:	4698      	mov	r8, r3
 8001640:	0004      	movs	r4, r0
 8001642:	2601      	movs	r6, #1
 8001644:	e56b      	b.n	800111e <__aeabi_dadd+0x96>
 8001646:	464a      	mov	r2, r9
 8001648:	1bd5      	subs	r5, r2, r7
 800164a:	45a9      	cmp	r9, r5
 800164c:	4189      	sbcs	r1, r1
 800164e:	4662      	mov	r2, ip
 8001650:	4249      	negs	r1, r1
 8001652:	1a9a      	subs	r2, r3, r2
 8001654:	1a52      	subs	r2, r2, r1
 8001656:	4690      	mov	r8, r2
 8001658:	0212      	lsls	r2, r2, #8
 800165a:	d532      	bpl.n	80016c2 <__aeabi_dadd+0x63a>
 800165c:	464a      	mov	r2, r9
 800165e:	1abd      	subs	r5, r7, r2
 8001660:	42af      	cmp	r7, r5
 8001662:	4189      	sbcs	r1, r1
 8001664:	4662      	mov	r2, ip
 8001666:	4249      	negs	r1, r1
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	1a5b      	subs	r3, r3, r1
 800166c:	4698      	mov	r8, r3
 800166e:	0004      	movs	r4, r0
 8001670:	e584      	b.n	800117c <__aeabi_dadd+0xf4>
 8001672:	4663      	mov	r3, ip
 8001674:	08f9      	lsrs	r1, r7, #3
 8001676:	075a      	lsls	r2, r3, #29
 8001678:	4311      	orrs	r1, r2
 800167a:	08db      	lsrs	r3, r3, #3
 800167c:	e64e      	b.n	800131c <__aeabi_dadd+0x294>
 800167e:	08f9      	lsrs	r1, r7, #3
 8001680:	0768      	lsls	r0, r5, #29
 8001682:	4301      	orrs	r1, r0
 8001684:	08eb      	lsrs	r3, r5, #3
 8001686:	e624      	b.n	80012d2 <__aeabi_dadd+0x24a>
 8001688:	4662      	mov	r2, ip
 800168a:	433a      	orrs	r2, r7
 800168c:	d100      	bne.n	8001690 <__aeabi_dadd+0x608>
 800168e:	e698      	b.n	80013c2 <__aeabi_dadd+0x33a>
 8001690:	464a      	mov	r2, r9
 8001692:	08d1      	lsrs	r1, r2, #3
 8001694:	075a      	lsls	r2, r3, #29
 8001696:	4311      	orrs	r1, r2
 8001698:	08da      	lsrs	r2, r3, #3
 800169a:	2380      	movs	r3, #128	; 0x80
 800169c:	031b      	lsls	r3, r3, #12
 800169e:	421a      	tst	r2, r3
 80016a0:	d008      	beq.n	80016b4 <__aeabi_dadd+0x62c>
 80016a2:	4660      	mov	r0, ip
 80016a4:	08c5      	lsrs	r5, r0, #3
 80016a6:	421d      	tst	r5, r3
 80016a8:	d104      	bne.n	80016b4 <__aeabi_dadd+0x62c>
 80016aa:	4654      	mov	r4, sl
 80016ac:	002a      	movs	r2, r5
 80016ae:	08f9      	lsrs	r1, r7, #3
 80016b0:	0743      	lsls	r3, r0, #29
 80016b2:	4319      	orrs	r1, r3
 80016b4:	0f4b      	lsrs	r3, r1, #29
 80016b6:	00c9      	lsls	r1, r1, #3
 80016b8:	075b      	lsls	r3, r3, #29
 80016ba:	08c9      	lsrs	r1, r1, #3
 80016bc:	4319      	orrs	r1, r3
 80016be:	0013      	movs	r3, r2
 80016c0:	e62c      	b.n	800131c <__aeabi_dadd+0x294>
 80016c2:	4641      	mov	r1, r8
 80016c4:	4329      	orrs	r1, r5
 80016c6:	d000      	beq.n	80016ca <__aeabi_dadd+0x642>
 80016c8:	e5fa      	b.n	80012c0 <__aeabi_dadd+0x238>
 80016ca:	2300      	movs	r3, #0
 80016cc:	000a      	movs	r2, r1
 80016ce:	2400      	movs	r4, #0
 80016d0:	e602      	b.n	80012d8 <__aeabi_dadd+0x250>
 80016d2:	076b      	lsls	r3, r5, #29
 80016d4:	08f9      	lsrs	r1, r7, #3
 80016d6:	4319      	orrs	r1, r3
 80016d8:	08eb      	lsrs	r3, r5, #3
 80016da:	e5fd      	b.n	80012d8 <__aeabi_dadd+0x250>
 80016dc:	4663      	mov	r3, ip
 80016de:	08f9      	lsrs	r1, r7, #3
 80016e0:	075b      	lsls	r3, r3, #29
 80016e2:	4319      	orrs	r1, r3
 80016e4:	4663      	mov	r3, ip
 80016e6:	0004      	movs	r4, r0
 80016e8:	08db      	lsrs	r3, r3, #3
 80016ea:	e617      	b.n	800131c <__aeabi_dadd+0x294>
 80016ec:	003d      	movs	r5, r7
 80016ee:	444d      	add	r5, r9
 80016f0:	4463      	add	r3, ip
 80016f2:	454d      	cmp	r5, r9
 80016f4:	4189      	sbcs	r1, r1
 80016f6:	4698      	mov	r8, r3
 80016f8:	4249      	negs	r1, r1
 80016fa:	4488      	add	r8, r1
 80016fc:	4643      	mov	r3, r8
 80016fe:	021b      	lsls	r3, r3, #8
 8001700:	d400      	bmi.n	8001704 <__aeabi_dadd+0x67c>
 8001702:	e5dd      	b.n	80012c0 <__aeabi_dadd+0x238>
 8001704:	4642      	mov	r2, r8
 8001706:	4b14      	ldr	r3, [pc, #80]	; (8001758 <__aeabi_dadd+0x6d0>)
 8001708:	2601      	movs	r6, #1
 800170a:	401a      	ands	r2, r3
 800170c:	4690      	mov	r8, r2
 800170e:	e5d7      	b.n	80012c0 <__aeabi_dadd+0x238>
 8001710:	0010      	movs	r0, r2
 8001712:	001e      	movs	r6, r3
 8001714:	3820      	subs	r0, #32
 8001716:	40c6      	lsrs	r6, r0
 8001718:	2a20      	cmp	r2, #32
 800171a:	d005      	beq.n	8001728 <__aeabi_dadd+0x6a0>
 800171c:	2040      	movs	r0, #64	; 0x40
 800171e:	1a82      	subs	r2, r0, r2
 8001720:	4093      	lsls	r3, r2
 8001722:	464a      	mov	r2, r9
 8001724:	431a      	orrs	r2, r3
 8001726:	4691      	mov	r9, r2
 8001728:	464d      	mov	r5, r9
 800172a:	1e6b      	subs	r3, r5, #1
 800172c:	419d      	sbcs	r5, r3
 800172e:	4335      	orrs	r5, r6
 8001730:	e621      	b.n	8001376 <__aeabi_dadd+0x2ee>
 8001732:	0002      	movs	r2, r0
 8001734:	2300      	movs	r3, #0
 8001736:	2100      	movs	r1, #0
 8001738:	e540      	b.n	80011bc <__aeabi_dadd+0x134>
 800173a:	464a      	mov	r2, r9
 800173c:	19d5      	adds	r5, r2, r7
 800173e:	42bd      	cmp	r5, r7
 8001740:	4189      	sbcs	r1, r1
 8001742:	4463      	add	r3, ip
 8001744:	4698      	mov	r8, r3
 8001746:	4249      	negs	r1, r1
 8001748:	4488      	add	r8, r1
 800174a:	e5b3      	b.n	80012b4 <__aeabi_dadd+0x22c>
 800174c:	2100      	movs	r1, #0
 800174e:	4a01      	ldr	r2, [pc, #4]	; (8001754 <__aeabi_dadd+0x6cc>)
 8001750:	000b      	movs	r3, r1
 8001752:	e533      	b.n	80011bc <__aeabi_dadd+0x134>
 8001754:	000007ff 	.word	0x000007ff
 8001758:	ff7fffff 	.word	0xff7fffff

0800175c <__aeabi_ddiv>:
 800175c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800175e:	4657      	mov	r7, sl
 8001760:	464e      	mov	r6, r9
 8001762:	4645      	mov	r5, r8
 8001764:	46de      	mov	lr, fp
 8001766:	b5e0      	push	{r5, r6, r7, lr}
 8001768:	4681      	mov	r9, r0
 800176a:	0005      	movs	r5, r0
 800176c:	030c      	lsls	r4, r1, #12
 800176e:	0048      	lsls	r0, r1, #1
 8001770:	4692      	mov	sl, r2
 8001772:	001f      	movs	r7, r3
 8001774:	b085      	sub	sp, #20
 8001776:	0b24      	lsrs	r4, r4, #12
 8001778:	0d40      	lsrs	r0, r0, #21
 800177a:	0fce      	lsrs	r6, r1, #31
 800177c:	2800      	cmp	r0, #0
 800177e:	d059      	beq.n	8001834 <__aeabi_ddiv+0xd8>
 8001780:	4b87      	ldr	r3, [pc, #540]	; (80019a0 <__aeabi_ddiv+0x244>)
 8001782:	4298      	cmp	r0, r3
 8001784:	d100      	bne.n	8001788 <__aeabi_ddiv+0x2c>
 8001786:	e098      	b.n	80018ba <__aeabi_ddiv+0x15e>
 8001788:	0f6b      	lsrs	r3, r5, #29
 800178a:	00e4      	lsls	r4, r4, #3
 800178c:	431c      	orrs	r4, r3
 800178e:	2380      	movs	r3, #128	; 0x80
 8001790:	041b      	lsls	r3, r3, #16
 8001792:	4323      	orrs	r3, r4
 8001794:	4698      	mov	r8, r3
 8001796:	4b83      	ldr	r3, [pc, #524]	; (80019a4 <__aeabi_ddiv+0x248>)
 8001798:	00ed      	lsls	r5, r5, #3
 800179a:	469b      	mov	fp, r3
 800179c:	2300      	movs	r3, #0
 800179e:	4699      	mov	r9, r3
 80017a0:	4483      	add	fp, r0
 80017a2:	9300      	str	r3, [sp, #0]
 80017a4:	033c      	lsls	r4, r7, #12
 80017a6:	007b      	lsls	r3, r7, #1
 80017a8:	4650      	mov	r0, sl
 80017aa:	0b24      	lsrs	r4, r4, #12
 80017ac:	0d5b      	lsrs	r3, r3, #21
 80017ae:	0fff      	lsrs	r7, r7, #31
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d067      	beq.n	8001884 <__aeabi_ddiv+0x128>
 80017b4:	4a7a      	ldr	r2, [pc, #488]	; (80019a0 <__aeabi_ddiv+0x244>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d018      	beq.n	80017ec <__aeabi_ddiv+0x90>
 80017ba:	497a      	ldr	r1, [pc, #488]	; (80019a4 <__aeabi_ddiv+0x248>)
 80017bc:	0f42      	lsrs	r2, r0, #29
 80017be:	468c      	mov	ip, r1
 80017c0:	00e4      	lsls	r4, r4, #3
 80017c2:	4659      	mov	r1, fp
 80017c4:	4314      	orrs	r4, r2
 80017c6:	2280      	movs	r2, #128	; 0x80
 80017c8:	4463      	add	r3, ip
 80017ca:	0412      	lsls	r2, r2, #16
 80017cc:	1acb      	subs	r3, r1, r3
 80017ce:	4314      	orrs	r4, r2
 80017d0:	469b      	mov	fp, r3
 80017d2:	00c2      	lsls	r2, r0, #3
 80017d4:	2000      	movs	r0, #0
 80017d6:	0033      	movs	r3, r6
 80017d8:	407b      	eors	r3, r7
 80017da:	469a      	mov	sl, r3
 80017dc:	464b      	mov	r3, r9
 80017de:	2b0f      	cmp	r3, #15
 80017e0:	d900      	bls.n	80017e4 <__aeabi_ddiv+0x88>
 80017e2:	e0ef      	b.n	80019c4 <__aeabi_ddiv+0x268>
 80017e4:	4970      	ldr	r1, [pc, #448]	; (80019a8 <__aeabi_ddiv+0x24c>)
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	58cb      	ldr	r3, [r1, r3]
 80017ea:	469f      	mov	pc, r3
 80017ec:	4b6f      	ldr	r3, [pc, #444]	; (80019ac <__aeabi_ddiv+0x250>)
 80017ee:	4652      	mov	r2, sl
 80017f0:	469c      	mov	ip, r3
 80017f2:	4322      	orrs	r2, r4
 80017f4:	44e3      	add	fp, ip
 80017f6:	2a00      	cmp	r2, #0
 80017f8:	d000      	beq.n	80017fc <__aeabi_ddiv+0xa0>
 80017fa:	e095      	b.n	8001928 <__aeabi_ddiv+0x1cc>
 80017fc:	4649      	mov	r1, r9
 80017fe:	2302      	movs	r3, #2
 8001800:	4319      	orrs	r1, r3
 8001802:	4689      	mov	r9, r1
 8001804:	2400      	movs	r4, #0
 8001806:	2002      	movs	r0, #2
 8001808:	e7e5      	b.n	80017d6 <__aeabi_ddiv+0x7a>
 800180a:	2300      	movs	r3, #0
 800180c:	2400      	movs	r4, #0
 800180e:	2500      	movs	r5, #0
 8001810:	4652      	mov	r2, sl
 8001812:	051b      	lsls	r3, r3, #20
 8001814:	4323      	orrs	r3, r4
 8001816:	07d2      	lsls	r2, r2, #31
 8001818:	4313      	orrs	r3, r2
 800181a:	0028      	movs	r0, r5
 800181c:	0019      	movs	r1, r3
 800181e:	b005      	add	sp, #20
 8001820:	bcf0      	pop	{r4, r5, r6, r7}
 8001822:	46bb      	mov	fp, r7
 8001824:	46b2      	mov	sl, r6
 8001826:	46a9      	mov	r9, r5
 8001828:	46a0      	mov	r8, r4
 800182a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800182c:	2400      	movs	r4, #0
 800182e:	2500      	movs	r5, #0
 8001830:	4b5b      	ldr	r3, [pc, #364]	; (80019a0 <__aeabi_ddiv+0x244>)
 8001832:	e7ed      	b.n	8001810 <__aeabi_ddiv+0xb4>
 8001834:	464b      	mov	r3, r9
 8001836:	4323      	orrs	r3, r4
 8001838:	4698      	mov	r8, r3
 800183a:	d100      	bne.n	800183e <__aeabi_ddiv+0xe2>
 800183c:	e089      	b.n	8001952 <__aeabi_ddiv+0x1f6>
 800183e:	2c00      	cmp	r4, #0
 8001840:	d100      	bne.n	8001844 <__aeabi_ddiv+0xe8>
 8001842:	e1e0      	b.n	8001c06 <__aeabi_ddiv+0x4aa>
 8001844:	0020      	movs	r0, r4
 8001846:	f001 fa61 	bl	8002d0c <__clzsi2>
 800184a:	0001      	movs	r1, r0
 800184c:	0002      	movs	r2, r0
 800184e:	390b      	subs	r1, #11
 8001850:	231d      	movs	r3, #29
 8001852:	1a5b      	subs	r3, r3, r1
 8001854:	4649      	mov	r1, r9
 8001856:	0010      	movs	r0, r2
 8001858:	40d9      	lsrs	r1, r3
 800185a:	3808      	subs	r0, #8
 800185c:	4084      	lsls	r4, r0
 800185e:	000b      	movs	r3, r1
 8001860:	464d      	mov	r5, r9
 8001862:	4323      	orrs	r3, r4
 8001864:	4698      	mov	r8, r3
 8001866:	4085      	lsls	r5, r0
 8001868:	4851      	ldr	r0, [pc, #324]	; (80019b0 <__aeabi_ddiv+0x254>)
 800186a:	033c      	lsls	r4, r7, #12
 800186c:	1a83      	subs	r3, r0, r2
 800186e:	469b      	mov	fp, r3
 8001870:	2300      	movs	r3, #0
 8001872:	4699      	mov	r9, r3
 8001874:	9300      	str	r3, [sp, #0]
 8001876:	007b      	lsls	r3, r7, #1
 8001878:	4650      	mov	r0, sl
 800187a:	0b24      	lsrs	r4, r4, #12
 800187c:	0d5b      	lsrs	r3, r3, #21
 800187e:	0fff      	lsrs	r7, r7, #31
 8001880:	2b00      	cmp	r3, #0
 8001882:	d197      	bne.n	80017b4 <__aeabi_ddiv+0x58>
 8001884:	4652      	mov	r2, sl
 8001886:	4322      	orrs	r2, r4
 8001888:	d055      	beq.n	8001936 <__aeabi_ddiv+0x1da>
 800188a:	2c00      	cmp	r4, #0
 800188c:	d100      	bne.n	8001890 <__aeabi_ddiv+0x134>
 800188e:	e1ca      	b.n	8001c26 <__aeabi_ddiv+0x4ca>
 8001890:	0020      	movs	r0, r4
 8001892:	f001 fa3b 	bl	8002d0c <__clzsi2>
 8001896:	0002      	movs	r2, r0
 8001898:	3a0b      	subs	r2, #11
 800189a:	231d      	movs	r3, #29
 800189c:	0001      	movs	r1, r0
 800189e:	1a9b      	subs	r3, r3, r2
 80018a0:	4652      	mov	r2, sl
 80018a2:	3908      	subs	r1, #8
 80018a4:	40da      	lsrs	r2, r3
 80018a6:	408c      	lsls	r4, r1
 80018a8:	4314      	orrs	r4, r2
 80018aa:	4652      	mov	r2, sl
 80018ac:	408a      	lsls	r2, r1
 80018ae:	4b41      	ldr	r3, [pc, #260]	; (80019b4 <__aeabi_ddiv+0x258>)
 80018b0:	4458      	add	r0, fp
 80018b2:	469b      	mov	fp, r3
 80018b4:	4483      	add	fp, r0
 80018b6:	2000      	movs	r0, #0
 80018b8:	e78d      	b.n	80017d6 <__aeabi_ddiv+0x7a>
 80018ba:	464b      	mov	r3, r9
 80018bc:	4323      	orrs	r3, r4
 80018be:	4698      	mov	r8, r3
 80018c0:	d140      	bne.n	8001944 <__aeabi_ddiv+0x1e8>
 80018c2:	2308      	movs	r3, #8
 80018c4:	4699      	mov	r9, r3
 80018c6:	3b06      	subs	r3, #6
 80018c8:	2500      	movs	r5, #0
 80018ca:	4683      	mov	fp, r0
 80018cc:	9300      	str	r3, [sp, #0]
 80018ce:	e769      	b.n	80017a4 <__aeabi_ddiv+0x48>
 80018d0:	46b2      	mov	sl, r6
 80018d2:	9b00      	ldr	r3, [sp, #0]
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d0a9      	beq.n	800182c <__aeabi_ddiv+0xd0>
 80018d8:	2b03      	cmp	r3, #3
 80018da:	d100      	bne.n	80018de <__aeabi_ddiv+0x182>
 80018dc:	e211      	b.n	8001d02 <__aeabi_ddiv+0x5a6>
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d093      	beq.n	800180a <__aeabi_ddiv+0xae>
 80018e2:	4a35      	ldr	r2, [pc, #212]	; (80019b8 <__aeabi_ddiv+0x25c>)
 80018e4:	445a      	add	r2, fp
 80018e6:	2a00      	cmp	r2, #0
 80018e8:	dc00      	bgt.n	80018ec <__aeabi_ddiv+0x190>
 80018ea:	e13c      	b.n	8001b66 <__aeabi_ddiv+0x40a>
 80018ec:	076b      	lsls	r3, r5, #29
 80018ee:	d000      	beq.n	80018f2 <__aeabi_ddiv+0x196>
 80018f0:	e1a7      	b.n	8001c42 <__aeabi_ddiv+0x4e6>
 80018f2:	08ed      	lsrs	r5, r5, #3
 80018f4:	4643      	mov	r3, r8
 80018f6:	01db      	lsls	r3, r3, #7
 80018f8:	d506      	bpl.n	8001908 <__aeabi_ddiv+0x1ac>
 80018fa:	4642      	mov	r2, r8
 80018fc:	4b2f      	ldr	r3, [pc, #188]	; (80019bc <__aeabi_ddiv+0x260>)
 80018fe:	401a      	ands	r2, r3
 8001900:	4690      	mov	r8, r2
 8001902:	2280      	movs	r2, #128	; 0x80
 8001904:	00d2      	lsls	r2, r2, #3
 8001906:	445a      	add	r2, fp
 8001908:	4b2d      	ldr	r3, [pc, #180]	; (80019c0 <__aeabi_ddiv+0x264>)
 800190a:	429a      	cmp	r2, r3
 800190c:	dc8e      	bgt.n	800182c <__aeabi_ddiv+0xd0>
 800190e:	4643      	mov	r3, r8
 8001910:	0552      	lsls	r2, r2, #21
 8001912:	0758      	lsls	r0, r3, #29
 8001914:	025c      	lsls	r4, r3, #9
 8001916:	4305      	orrs	r5, r0
 8001918:	0b24      	lsrs	r4, r4, #12
 800191a:	0d53      	lsrs	r3, r2, #21
 800191c:	e778      	b.n	8001810 <__aeabi_ddiv+0xb4>
 800191e:	46ba      	mov	sl, r7
 8001920:	46a0      	mov	r8, r4
 8001922:	0015      	movs	r5, r2
 8001924:	9000      	str	r0, [sp, #0]
 8001926:	e7d4      	b.n	80018d2 <__aeabi_ddiv+0x176>
 8001928:	464a      	mov	r2, r9
 800192a:	2303      	movs	r3, #3
 800192c:	431a      	orrs	r2, r3
 800192e:	4691      	mov	r9, r2
 8001930:	2003      	movs	r0, #3
 8001932:	4652      	mov	r2, sl
 8001934:	e74f      	b.n	80017d6 <__aeabi_ddiv+0x7a>
 8001936:	4649      	mov	r1, r9
 8001938:	2301      	movs	r3, #1
 800193a:	4319      	orrs	r1, r3
 800193c:	4689      	mov	r9, r1
 800193e:	2400      	movs	r4, #0
 8001940:	2001      	movs	r0, #1
 8001942:	e748      	b.n	80017d6 <__aeabi_ddiv+0x7a>
 8001944:	230c      	movs	r3, #12
 8001946:	4699      	mov	r9, r3
 8001948:	3b09      	subs	r3, #9
 800194a:	46a0      	mov	r8, r4
 800194c:	4683      	mov	fp, r0
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	e728      	b.n	80017a4 <__aeabi_ddiv+0x48>
 8001952:	2304      	movs	r3, #4
 8001954:	4699      	mov	r9, r3
 8001956:	2300      	movs	r3, #0
 8001958:	469b      	mov	fp, r3
 800195a:	3301      	adds	r3, #1
 800195c:	2500      	movs	r5, #0
 800195e:	9300      	str	r3, [sp, #0]
 8001960:	e720      	b.n	80017a4 <__aeabi_ddiv+0x48>
 8001962:	2300      	movs	r3, #0
 8001964:	2480      	movs	r4, #128	; 0x80
 8001966:	469a      	mov	sl, r3
 8001968:	2500      	movs	r5, #0
 800196a:	4b0d      	ldr	r3, [pc, #52]	; (80019a0 <__aeabi_ddiv+0x244>)
 800196c:	0324      	lsls	r4, r4, #12
 800196e:	e74f      	b.n	8001810 <__aeabi_ddiv+0xb4>
 8001970:	2380      	movs	r3, #128	; 0x80
 8001972:	4641      	mov	r1, r8
 8001974:	031b      	lsls	r3, r3, #12
 8001976:	4219      	tst	r1, r3
 8001978:	d008      	beq.n	800198c <__aeabi_ddiv+0x230>
 800197a:	421c      	tst	r4, r3
 800197c:	d106      	bne.n	800198c <__aeabi_ddiv+0x230>
 800197e:	431c      	orrs	r4, r3
 8001980:	0324      	lsls	r4, r4, #12
 8001982:	46ba      	mov	sl, r7
 8001984:	0015      	movs	r5, r2
 8001986:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <__aeabi_ddiv+0x244>)
 8001988:	0b24      	lsrs	r4, r4, #12
 800198a:	e741      	b.n	8001810 <__aeabi_ddiv+0xb4>
 800198c:	2480      	movs	r4, #128	; 0x80
 800198e:	4643      	mov	r3, r8
 8001990:	0324      	lsls	r4, r4, #12
 8001992:	431c      	orrs	r4, r3
 8001994:	0324      	lsls	r4, r4, #12
 8001996:	46b2      	mov	sl, r6
 8001998:	4b01      	ldr	r3, [pc, #4]	; (80019a0 <__aeabi_ddiv+0x244>)
 800199a:	0b24      	lsrs	r4, r4, #12
 800199c:	e738      	b.n	8001810 <__aeabi_ddiv+0xb4>
 800199e:	46c0      	nop			; (mov r8, r8)
 80019a0:	000007ff 	.word	0x000007ff
 80019a4:	fffffc01 	.word	0xfffffc01
 80019a8:	0801fe40 	.word	0x0801fe40
 80019ac:	fffff801 	.word	0xfffff801
 80019b0:	fffffc0d 	.word	0xfffffc0d
 80019b4:	000003f3 	.word	0x000003f3
 80019b8:	000003ff 	.word	0x000003ff
 80019bc:	feffffff 	.word	0xfeffffff
 80019c0:	000007fe 	.word	0x000007fe
 80019c4:	4544      	cmp	r4, r8
 80019c6:	d200      	bcs.n	80019ca <__aeabi_ddiv+0x26e>
 80019c8:	e116      	b.n	8001bf8 <__aeabi_ddiv+0x49c>
 80019ca:	d100      	bne.n	80019ce <__aeabi_ddiv+0x272>
 80019cc:	e111      	b.n	8001bf2 <__aeabi_ddiv+0x496>
 80019ce:	2301      	movs	r3, #1
 80019d0:	425b      	negs	r3, r3
 80019d2:	469c      	mov	ip, r3
 80019d4:	002e      	movs	r6, r5
 80019d6:	4640      	mov	r0, r8
 80019d8:	2500      	movs	r5, #0
 80019da:	44e3      	add	fp, ip
 80019dc:	0223      	lsls	r3, r4, #8
 80019de:	0e14      	lsrs	r4, r2, #24
 80019e0:	431c      	orrs	r4, r3
 80019e2:	0c1b      	lsrs	r3, r3, #16
 80019e4:	4699      	mov	r9, r3
 80019e6:	0423      	lsls	r3, r4, #16
 80019e8:	0c1f      	lsrs	r7, r3, #16
 80019ea:	0212      	lsls	r2, r2, #8
 80019ec:	4649      	mov	r1, r9
 80019ee:	9200      	str	r2, [sp, #0]
 80019f0:	9701      	str	r7, [sp, #4]
 80019f2:	f7fe fc21 	bl	8000238 <__aeabi_uidivmod>
 80019f6:	0002      	movs	r2, r0
 80019f8:	437a      	muls	r2, r7
 80019fa:	040b      	lsls	r3, r1, #16
 80019fc:	0c31      	lsrs	r1, r6, #16
 80019fe:	4680      	mov	r8, r0
 8001a00:	4319      	orrs	r1, r3
 8001a02:	428a      	cmp	r2, r1
 8001a04:	d90b      	bls.n	8001a1e <__aeabi_ddiv+0x2c2>
 8001a06:	2301      	movs	r3, #1
 8001a08:	425b      	negs	r3, r3
 8001a0a:	469c      	mov	ip, r3
 8001a0c:	1909      	adds	r1, r1, r4
 8001a0e:	44e0      	add	r8, ip
 8001a10:	428c      	cmp	r4, r1
 8001a12:	d804      	bhi.n	8001a1e <__aeabi_ddiv+0x2c2>
 8001a14:	428a      	cmp	r2, r1
 8001a16:	d902      	bls.n	8001a1e <__aeabi_ddiv+0x2c2>
 8001a18:	1e83      	subs	r3, r0, #2
 8001a1a:	4698      	mov	r8, r3
 8001a1c:	1909      	adds	r1, r1, r4
 8001a1e:	1a88      	subs	r0, r1, r2
 8001a20:	4649      	mov	r1, r9
 8001a22:	f7fe fc09 	bl	8000238 <__aeabi_uidivmod>
 8001a26:	0409      	lsls	r1, r1, #16
 8001a28:	468c      	mov	ip, r1
 8001a2a:	0431      	lsls	r1, r6, #16
 8001a2c:	4666      	mov	r6, ip
 8001a2e:	9a01      	ldr	r2, [sp, #4]
 8001a30:	0c09      	lsrs	r1, r1, #16
 8001a32:	4342      	muls	r2, r0
 8001a34:	0003      	movs	r3, r0
 8001a36:	4331      	orrs	r1, r6
 8001a38:	428a      	cmp	r2, r1
 8001a3a:	d904      	bls.n	8001a46 <__aeabi_ddiv+0x2ea>
 8001a3c:	1909      	adds	r1, r1, r4
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	428c      	cmp	r4, r1
 8001a42:	d800      	bhi.n	8001a46 <__aeabi_ddiv+0x2ea>
 8001a44:	e111      	b.n	8001c6a <__aeabi_ddiv+0x50e>
 8001a46:	1a89      	subs	r1, r1, r2
 8001a48:	4642      	mov	r2, r8
 8001a4a:	9e00      	ldr	r6, [sp, #0]
 8001a4c:	0412      	lsls	r2, r2, #16
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	0c33      	lsrs	r3, r6, #16
 8001a52:	001f      	movs	r7, r3
 8001a54:	0c10      	lsrs	r0, r2, #16
 8001a56:	4690      	mov	r8, r2
 8001a58:	9302      	str	r3, [sp, #8]
 8001a5a:	0413      	lsls	r3, r2, #16
 8001a5c:	0432      	lsls	r2, r6, #16
 8001a5e:	0c16      	lsrs	r6, r2, #16
 8001a60:	0032      	movs	r2, r6
 8001a62:	0c1b      	lsrs	r3, r3, #16
 8001a64:	435a      	muls	r2, r3
 8001a66:	9603      	str	r6, [sp, #12]
 8001a68:	437b      	muls	r3, r7
 8001a6a:	4346      	muls	r6, r0
 8001a6c:	4378      	muls	r0, r7
 8001a6e:	0c17      	lsrs	r7, r2, #16
 8001a70:	46bc      	mov	ip, r7
 8001a72:	199b      	adds	r3, r3, r6
 8001a74:	4463      	add	r3, ip
 8001a76:	429e      	cmp	r6, r3
 8001a78:	d903      	bls.n	8001a82 <__aeabi_ddiv+0x326>
 8001a7a:	2680      	movs	r6, #128	; 0x80
 8001a7c:	0276      	lsls	r6, r6, #9
 8001a7e:	46b4      	mov	ip, r6
 8001a80:	4460      	add	r0, ip
 8001a82:	0c1e      	lsrs	r6, r3, #16
 8001a84:	1830      	adds	r0, r6, r0
 8001a86:	0416      	lsls	r6, r2, #16
 8001a88:	041b      	lsls	r3, r3, #16
 8001a8a:	0c36      	lsrs	r6, r6, #16
 8001a8c:	199e      	adds	r6, r3, r6
 8001a8e:	4281      	cmp	r1, r0
 8001a90:	d200      	bcs.n	8001a94 <__aeabi_ddiv+0x338>
 8001a92:	e09c      	b.n	8001bce <__aeabi_ddiv+0x472>
 8001a94:	d100      	bne.n	8001a98 <__aeabi_ddiv+0x33c>
 8001a96:	e097      	b.n	8001bc8 <__aeabi_ddiv+0x46c>
 8001a98:	1bae      	subs	r6, r5, r6
 8001a9a:	1a09      	subs	r1, r1, r0
 8001a9c:	42b5      	cmp	r5, r6
 8001a9e:	4180      	sbcs	r0, r0
 8001aa0:	4240      	negs	r0, r0
 8001aa2:	1a08      	subs	r0, r1, r0
 8001aa4:	4284      	cmp	r4, r0
 8001aa6:	d100      	bne.n	8001aaa <__aeabi_ddiv+0x34e>
 8001aa8:	e111      	b.n	8001cce <__aeabi_ddiv+0x572>
 8001aaa:	4649      	mov	r1, r9
 8001aac:	f7fe fbc4 	bl	8000238 <__aeabi_uidivmod>
 8001ab0:	9a01      	ldr	r2, [sp, #4]
 8001ab2:	040b      	lsls	r3, r1, #16
 8001ab4:	4342      	muls	r2, r0
 8001ab6:	0c31      	lsrs	r1, r6, #16
 8001ab8:	0005      	movs	r5, r0
 8001aba:	4319      	orrs	r1, r3
 8001abc:	428a      	cmp	r2, r1
 8001abe:	d907      	bls.n	8001ad0 <__aeabi_ddiv+0x374>
 8001ac0:	1909      	adds	r1, r1, r4
 8001ac2:	3d01      	subs	r5, #1
 8001ac4:	428c      	cmp	r4, r1
 8001ac6:	d803      	bhi.n	8001ad0 <__aeabi_ddiv+0x374>
 8001ac8:	428a      	cmp	r2, r1
 8001aca:	d901      	bls.n	8001ad0 <__aeabi_ddiv+0x374>
 8001acc:	1e85      	subs	r5, r0, #2
 8001ace:	1909      	adds	r1, r1, r4
 8001ad0:	1a88      	subs	r0, r1, r2
 8001ad2:	4649      	mov	r1, r9
 8001ad4:	f7fe fbb0 	bl	8000238 <__aeabi_uidivmod>
 8001ad8:	0409      	lsls	r1, r1, #16
 8001ada:	468c      	mov	ip, r1
 8001adc:	0431      	lsls	r1, r6, #16
 8001ade:	4666      	mov	r6, ip
 8001ae0:	9a01      	ldr	r2, [sp, #4]
 8001ae2:	0c09      	lsrs	r1, r1, #16
 8001ae4:	4342      	muls	r2, r0
 8001ae6:	0003      	movs	r3, r0
 8001ae8:	4331      	orrs	r1, r6
 8001aea:	428a      	cmp	r2, r1
 8001aec:	d907      	bls.n	8001afe <__aeabi_ddiv+0x3a2>
 8001aee:	1909      	adds	r1, r1, r4
 8001af0:	3b01      	subs	r3, #1
 8001af2:	428c      	cmp	r4, r1
 8001af4:	d803      	bhi.n	8001afe <__aeabi_ddiv+0x3a2>
 8001af6:	428a      	cmp	r2, r1
 8001af8:	d901      	bls.n	8001afe <__aeabi_ddiv+0x3a2>
 8001afa:	1e83      	subs	r3, r0, #2
 8001afc:	1909      	adds	r1, r1, r4
 8001afe:	9e03      	ldr	r6, [sp, #12]
 8001b00:	1a89      	subs	r1, r1, r2
 8001b02:	0032      	movs	r2, r6
 8001b04:	042d      	lsls	r5, r5, #16
 8001b06:	431d      	orrs	r5, r3
 8001b08:	9f02      	ldr	r7, [sp, #8]
 8001b0a:	042b      	lsls	r3, r5, #16
 8001b0c:	0c1b      	lsrs	r3, r3, #16
 8001b0e:	435a      	muls	r2, r3
 8001b10:	437b      	muls	r3, r7
 8001b12:	469c      	mov	ip, r3
 8001b14:	0c28      	lsrs	r0, r5, #16
 8001b16:	4346      	muls	r6, r0
 8001b18:	0c13      	lsrs	r3, r2, #16
 8001b1a:	44b4      	add	ip, r6
 8001b1c:	4463      	add	r3, ip
 8001b1e:	4378      	muls	r0, r7
 8001b20:	429e      	cmp	r6, r3
 8001b22:	d903      	bls.n	8001b2c <__aeabi_ddiv+0x3d0>
 8001b24:	2680      	movs	r6, #128	; 0x80
 8001b26:	0276      	lsls	r6, r6, #9
 8001b28:	46b4      	mov	ip, r6
 8001b2a:	4460      	add	r0, ip
 8001b2c:	0c1e      	lsrs	r6, r3, #16
 8001b2e:	0412      	lsls	r2, r2, #16
 8001b30:	041b      	lsls	r3, r3, #16
 8001b32:	0c12      	lsrs	r2, r2, #16
 8001b34:	1830      	adds	r0, r6, r0
 8001b36:	189b      	adds	r3, r3, r2
 8001b38:	4281      	cmp	r1, r0
 8001b3a:	d306      	bcc.n	8001b4a <__aeabi_ddiv+0x3ee>
 8001b3c:	d002      	beq.n	8001b44 <__aeabi_ddiv+0x3e8>
 8001b3e:	2301      	movs	r3, #1
 8001b40:	431d      	orrs	r5, r3
 8001b42:	e6ce      	b.n	80018e2 <__aeabi_ddiv+0x186>
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d100      	bne.n	8001b4a <__aeabi_ddiv+0x3ee>
 8001b48:	e6cb      	b.n	80018e2 <__aeabi_ddiv+0x186>
 8001b4a:	1861      	adds	r1, r4, r1
 8001b4c:	1e6e      	subs	r6, r5, #1
 8001b4e:	42a1      	cmp	r1, r4
 8001b50:	d200      	bcs.n	8001b54 <__aeabi_ddiv+0x3f8>
 8001b52:	e0a4      	b.n	8001c9e <__aeabi_ddiv+0x542>
 8001b54:	4281      	cmp	r1, r0
 8001b56:	d200      	bcs.n	8001b5a <__aeabi_ddiv+0x3fe>
 8001b58:	e0c9      	b.n	8001cee <__aeabi_ddiv+0x592>
 8001b5a:	d100      	bne.n	8001b5e <__aeabi_ddiv+0x402>
 8001b5c:	e0d9      	b.n	8001d12 <__aeabi_ddiv+0x5b6>
 8001b5e:	0035      	movs	r5, r6
 8001b60:	e7ed      	b.n	8001b3e <__aeabi_ddiv+0x3e2>
 8001b62:	2501      	movs	r5, #1
 8001b64:	426d      	negs	r5, r5
 8001b66:	2101      	movs	r1, #1
 8001b68:	1a89      	subs	r1, r1, r2
 8001b6a:	2938      	cmp	r1, #56	; 0x38
 8001b6c:	dd00      	ble.n	8001b70 <__aeabi_ddiv+0x414>
 8001b6e:	e64c      	b.n	800180a <__aeabi_ddiv+0xae>
 8001b70:	291f      	cmp	r1, #31
 8001b72:	dc00      	bgt.n	8001b76 <__aeabi_ddiv+0x41a>
 8001b74:	e07f      	b.n	8001c76 <__aeabi_ddiv+0x51a>
 8001b76:	231f      	movs	r3, #31
 8001b78:	425b      	negs	r3, r3
 8001b7a:	1a9a      	subs	r2, r3, r2
 8001b7c:	4643      	mov	r3, r8
 8001b7e:	40d3      	lsrs	r3, r2
 8001b80:	2920      	cmp	r1, #32
 8001b82:	d004      	beq.n	8001b8e <__aeabi_ddiv+0x432>
 8001b84:	4644      	mov	r4, r8
 8001b86:	4a65      	ldr	r2, [pc, #404]	; (8001d1c <__aeabi_ddiv+0x5c0>)
 8001b88:	445a      	add	r2, fp
 8001b8a:	4094      	lsls	r4, r2
 8001b8c:	4325      	orrs	r5, r4
 8001b8e:	1e6a      	subs	r2, r5, #1
 8001b90:	4195      	sbcs	r5, r2
 8001b92:	2207      	movs	r2, #7
 8001b94:	432b      	orrs	r3, r5
 8001b96:	0015      	movs	r5, r2
 8001b98:	2400      	movs	r4, #0
 8001b9a:	401d      	ands	r5, r3
 8001b9c:	421a      	tst	r2, r3
 8001b9e:	d100      	bne.n	8001ba2 <__aeabi_ddiv+0x446>
 8001ba0:	e0a1      	b.n	8001ce6 <__aeabi_ddiv+0x58a>
 8001ba2:	220f      	movs	r2, #15
 8001ba4:	2400      	movs	r4, #0
 8001ba6:	401a      	ands	r2, r3
 8001ba8:	2a04      	cmp	r2, #4
 8001baa:	d100      	bne.n	8001bae <__aeabi_ddiv+0x452>
 8001bac:	e098      	b.n	8001ce0 <__aeabi_ddiv+0x584>
 8001bae:	1d1a      	adds	r2, r3, #4
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	419b      	sbcs	r3, r3
 8001bb4:	425b      	negs	r3, r3
 8001bb6:	18e4      	adds	r4, r4, r3
 8001bb8:	0013      	movs	r3, r2
 8001bba:	0222      	lsls	r2, r4, #8
 8001bbc:	d400      	bmi.n	8001bc0 <__aeabi_ddiv+0x464>
 8001bbe:	e08f      	b.n	8001ce0 <__aeabi_ddiv+0x584>
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	2400      	movs	r4, #0
 8001bc4:	2500      	movs	r5, #0
 8001bc6:	e623      	b.n	8001810 <__aeabi_ddiv+0xb4>
 8001bc8:	42b5      	cmp	r5, r6
 8001bca:	d300      	bcc.n	8001bce <__aeabi_ddiv+0x472>
 8001bcc:	e764      	b.n	8001a98 <__aeabi_ddiv+0x33c>
 8001bce:	4643      	mov	r3, r8
 8001bd0:	1e5a      	subs	r2, r3, #1
 8001bd2:	9b00      	ldr	r3, [sp, #0]
 8001bd4:	469c      	mov	ip, r3
 8001bd6:	4465      	add	r5, ip
 8001bd8:	001f      	movs	r7, r3
 8001bda:	429d      	cmp	r5, r3
 8001bdc:	419b      	sbcs	r3, r3
 8001bde:	425b      	negs	r3, r3
 8001be0:	191b      	adds	r3, r3, r4
 8001be2:	18c9      	adds	r1, r1, r3
 8001be4:	428c      	cmp	r4, r1
 8001be6:	d23a      	bcs.n	8001c5e <__aeabi_ddiv+0x502>
 8001be8:	4288      	cmp	r0, r1
 8001bea:	d863      	bhi.n	8001cb4 <__aeabi_ddiv+0x558>
 8001bec:	d060      	beq.n	8001cb0 <__aeabi_ddiv+0x554>
 8001bee:	4690      	mov	r8, r2
 8001bf0:	e752      	b.n	8001a98 <__aeabi_ddiv+0x33c>
 8001bf2:	42aa      	cmp	r2, r5
 8001bf4:	d900      	bls.n	8001bf8 <__aeabi_ddiv+0x49c>
 8001bf6:	e6ea      	b.n	80019ce <__aeabi_ddiv+0x272>
 8001bf8:	4643      	mov	r3, r8
 8001bfa:	07de      	lsls	r6, r3, #31
 8001bfc:	0858      	lsrs	r0, r3, #1
 8001bfe:	086b      	lsrs	r3, r5, #1
 8001c00:	431e      	orrs	r6, r3
 8001c02:	07ed      	lsls	r5, r5, #31
 8001c04:	e6ea      	b.n	80019dc <__aeabi_ddiv+0x280>
 8001c06:	4648      	mov	r0, r9
 8001c08:	f001 f880 	bl	8002d0c <__clzsi2>
 8001c0c:	0001      	movs	r1, r0
 8001c0e:	0002      	movs	r2, r0
 8001c10:	3115      	adds	r1, #21
 8001c12:	3220      	adds	r2, #32
 8001c14:	291c      	cmp	r1, #28
 8001c16:	dc00      	bgt.n	8001c1a <__aeabi_ddiv+0x4be>
 8001c18:	e61a      	b.n	8001850 <__aeabi_ddiv+0xf4>
 8001c1a:	464b      	mov	r3, r9
 8001c1c:	3808      	subs	r0, #8
 8001c1e:	4083      	lsls	r3, r0
 8001c20:	2500      	movs	r5, #0
 8001c22:	4698      	mov	r8, r3
 8001c24:	e620      	b.n	8001868 <__aeabi_ddiv+0x10c>
 8001c26:	f001 f871 	bl	8002d0c <__clzsi2>
 8001c2a:	0003      	movs	r3, r0
 8001c2c:	001a      	movs	r2, r3
 8001c2e:	3215      	adds	r2, #21
 8001c30:	3020      	adds	r0, #32
 8001c32:	2a1c      	cmp	r2, #28
 8001c34:	dc00      	bgt.n	8001c38 <__aeabi_ddiv+0x4dc>
 8001c36:	e630      	b.n	800189a <__aeabi_ddiv+0x13e>
 8001c38:	4654      	mov	r4, sl
 8001c3a:	3b08      	subs	r3, #8
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	409c      	lsls	r4, r3
 8001c40:	e635      	b.n	80018ae <__aeabi_ddiv+0x152>
 8001c42:	230f      	movs	r3, #15
 8001c44:	402b      	ands	r3, r5
 8001c46:	2b04      	cmp	r3, #4
 8001c48:	d100      	bne.n	8001c4c <__aeabi_ddiv+0x4f0>
 8001c4a:	e652      	b.n	80018f2 <__aeabi_ddiv+0x196>
 8001c4c:	2305      	movs	r3, #5
 8001c4e:	425b      	negs	r3, r3
 8001c50:	42ab      	cmp	r3, r5
 8001c52:	419b      	sbcs	r3, r3
 8001c54:	3504      	adds	r5, #4
 8001c56:	425b      	negs	r3, r3
 8001c58:	08ed      	lsrs	r5, r5, #3
 8001c5a:	4498      	add	r8, r3
 8001c5c:	e64a      	b.n	80018f4 <__aeabi_ddiv+0x198>
 8001c5e:	428c      	cmp	r4, r1
 8001c60:	d1c5      	bne.n	8001bee <__aeabi_ddiv+0x492>
 8001c62:	42af      	cmp	r7, r5
 8001c64:	d9c0      	bls.n	8001be8 <__aeabi_ddiv+0x48c>
 8001c66:	4690      	mov	r8, r2
 8001c68:	e716      	b.n	8001a98 <__aeabi_ddiv+0x33c>
 8001c6a:	428a      	cmp	r2, r1
 8001c6c:	d800      	bhi.n	8001c70 <__aeabi_ddiv+0x514>
 8001c6e:	e6ea      	b.n	8001a46 <__aeabi_ddiv+0x2ea>
 8001c70:	1e83      	subs	r3, r0, #2
 8001c72:	1909      	adds	r1, r1, r4
 8001c74:	e6e7      	b.n	8001a46 <__aeabi_ddiv+0x2ea>
 8001c76:	4a2a      	ldr	r2, [pc, #168]	; (8001d20 <__aeabi_ddiv+0x5c4>)
 8001c78:	0028      	movs	r0, r5
 8001c7a:	445a      	add	r2, fp
 8001c7c:	4643      	mov	r3, r8
 8001c7e:	4095      	lsls	r5, r2
 8001c80:	4093      	lsls	r3, r2
 8001c82:	40c8      	lsrs	r0, r1
 8001c84:	1e6a      	subs	r2, r5, #1
 8001c86:	4195      	sbcs	r5, r2
 8001c88:	4644      	mov	r4, r8
 8001c8a:	4303      	orrs	r3, r0
 8001c8c:	432b      	orrs	r3, r5
 8001c8e:	40cc      	lsrs	r4, r1
 8001c90:	075a      	lsls	r2, r3, #29
 8001c92:	d092      	beq.n	8001bba <__aeabi_ddiv+0x45e>
 8001c94:	220f      	movs	r2, #15
 8001c96:	401a      	ands	r2, r3
 8001c98:	2a04      	cmp	r2, #4
 8001c9a:	d188      	bne.n	8001bae <__aeabi_ddiv+0x452>
 8001c9c:	e78d      	b.n	8001bba <__aeabi_ddiv+0x45e>
 8001c9e:	0035      	movs	r5, r6
 8001ca0:	4281      	cmp	r1, r0
 8001ca2:	d000      	beq.n	8001ca6 <__aeabi_ddiv+0x54a>
 8001ca4:	e74b      	b.n	8001b3e <__aeabi_ddiv+0x3e2>
 8001ca6:	9a00      	ldr	r2, [sp, #0]
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d000      	beq.n	8001cae <__aeabi_ddiv+0x552>
 8001cac:	e747      	b.n	8001b3e <__aeabi_ddiv+0x3e2>
 8001cae:	e618      	b.n	80018e2 <__aeabi_ddiv+0x186>
 8001cb0:	42ae      	cmp	r6, r5
 8001cb2:	d99c      	bls.n	8001bee <__aeabi_ddiv+0x492>
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	425b      	negs	r3, r3
 8001cb8:	469c      	mov	ip, r3
 8001cba:	9b00      	ldr	r3, [sp, #0]
 8001cbc:	44e0      	add	r8, ip
 8001cbe:	469c      	mov	ip, r3
 8001cc0:	4465      	add	r5, ip
 8001cc2:	429d      	cmp	r5, r3
 8001cc4:	419b      	sbcs	r3, r3
 8001cc6:	425b      	negs	r3, r3
 8001cc8:	191b      	adds	r3, r3, r4
 8001cca:	18c9      	adds	r1, r1, r3
 8001ccc:	e6e4      	b.n	8001a98 <__aeabi_ddiv+0x33c>
 8001cce:	4a15      	ldr	r2, [pc, #84]	; (8001d24 <__aeabi_ddiv+0x5c8>)
 8001cd0:	445a      	add	r2, fp
 8001cd2:	2a00      	cmp	r2, #0
 8001cd4:	dc00      	bgt.n	8001cd8 <__aeabi_ddiv+0x57c>
 8001cd6:	e744      	b.n	8001b62 <__aeabi_ddiv+0x406>
 8001cd8:	2301      	movs	r3, #1
 8001cda:	2500      	movs	r5, #0
 8001cdc:	4498      	add	r8, r3
 8001cde:	e609      	b.n	80018f4 <__aeabi_ddiv+0x198>
 8001ce0:	0765      	lsls	r5, r4, #29
 8001ce2:	0264      	lsls	r4, r4, #9
 8001ce4:	0b24      	lsrs	r4, r4, #12
 8001ce6:	08db      	lsrs	r3, r3, #3
 8001ce8:	431d      	orrs	r5, r3
 8001cea:	2300      	movs	r3, #0
 8001cec:	e590      	b.n	8001810 <__aeabi_ddiv+0xb4>
 8001cee:	9e00      	ldr	r6, [sp, #0]
 8001cf0:	3d02      	subs	r5, #2
 8001cf2:	0072      	lsls	r2, r6, #1
 8001cf4:	42b2      	cmp	r2, r6
 8001cf6:	41bf      	sbcs	r7, r7
 8001cf8:	427f      	negs	r7, r7
 8001cfa:	193c      	adds	r4, r7, r4
 8001cfc:	1909      	adds	r1, r1, r4
 8001cfe:	9200      	str	r2, [sp, #0]
 8001d00:	e7ce      	b.n	8001ca0 <__aeabi_ddiv+0x544>
 8001d02:	2480      	movs	r4, #128	; 0x80
 8001d04:	4643      	mov	r3, r8
 8001d06:	0324      	lsls	r4, r4, #12
 8001d08:	431c      	orrs	r4, r3
 8001d0a:	0324      	lsls	r4, r4, #12
 8001d0c:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <__aeabi_ddiv+0x5cc>)
 8001d0e:	0b24      	lsrs	r4, r4, #12
 8001d10:	e57e      	b.n	8001810 <__aeabi_ddiv+0xb4>
 8001d12:	9a00      	ldr	r2, [sp, #0]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d3ea      	bcc.n	8001cee <__aeabi_ddiv+0x592>
 8001d18:	0035      	movs	r5, r6
 8001d1a:	e7c4      	b.n	8001ca6 <__aeabi_ddiv+0x54a>
 8001d1c:	0000043e 	.word	0x0000043e
 8001d20:	0000041e 	.word	0x0000041e
 8001d24:	000003ff 	.word	0x000003ff
 8001d28:	000007ff 	.word	0x000007ff

08001d2c <__eqdf2>:
 8001d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d2e:	464f      	mov	r7, r9
 8001d30:	4646      	mov	r6, r8
 8001d32:	46d6      	mov	lr, sl
 8001d34:	4694      	mov	ip, r2
 8001d36:	4691      	mov	r9, r2
 8001d38:	031a      	lsls	r2, r3, #12
 8001d3a:	0b12      	lsrs	r2, r2, #12
 8001d3c:	4d18      	ldr	r5, [pc, #96]	; (8001da0 <__eqdf2+0x74>)
 8001d3e:	b5c0      	push	{r6, r7, lr}
 8001d40:	004c      	lsls	r4, r1, #1
 8001d42:	030f      	lsls	r7, r1, #12
 8001d44:	4692      	mov	sl, r2
 8001d46:	005a      	lsls	r2, r3, #1
 8001d48:	0006      	movs	r6, r0
 8001d4a:	4680      	mov	r8, r0
 8001d4c:	0b3f      	lsrs	r7, r7, #12
 8001d4e:	2001      	movs	r0, #1
 8001d50:	0d64      	lsrs	r4, r4, #21
 8001d52:	0fc9      	lsrs	r1, r1, #31
 8001d54:	0d52      	lsrs	r2, r2, #21
 8001d56:	0fdb      	lsrs	r3, r3, #31
 8001d58:	42ac      	cmp	r4, r5
 8001d5a:	d00a      	beq.n	8001d72 <__eqdf2+0x46>
 8001d5c:	42aa      	cmp	r2, r5
 8001d5e:	d003      	beq.n	8001d68 <__eqdf2+0x3c>
 8001d60:	4294      	cmp	r4, r2
 8001d62:	d101      	bne.n	8001d68 <__eqdf2+0x3c>
 8001d64:	4557      	cmp	r7, sl
 8001d66:	d00d      	beq.n	8001d84 <__eqdf2+0x58>
 8001d68:	bce0      	pop	{r5, r6, r7}
 8001d6a:	46ba      	mov	sl, r7
 8001d6c:	46b1      	mov	r9, r6
 8001d6e:	46a8      	mov	r8, r5
 8001d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d72:	003d      	movs	r5, r7
 8001d74:	4335      	orrs	r5, r6
 8001d76:	d1f7      	bne.n	8001d68 <__eqdf2+0x3c>
 8001d78:	42a2      	cmp	r2, r4
 8001d7a:	d1f5      	bne.n	8001d68 <__eqdf2+0x3c>
 8001d7c:	4652      	mov	r2, sl
 8001d7e:	4665      	mov	r5, ip
 8001d80:	432a      	orrs	r2, r5
 8001d82:	d1f1      	bne.n	8001d68 <__eqdf2+0x3c>
 8001d84:	2001      	movs	r0, #1
 8001d86:	45c8      	cmp	r8, r9
 8001d88:	d1ee      	bne.n	8001d68 <__eqdf2+0x3c>
 8001d8a:	4299      	cmp	r1, r3
 8001d8c:	d006      	beq.n	8001d9c <__eqdf2+0x70>
 8001d8e:	2c00      	cmp	r4, #0
 8001d90:	d1ea      	bne.n	8001d68 <__eqdf2+0x3c>
 8001d92:	433e      	orrs	r6, r7
 8001d94:	0030      	movs	r0, r6
 8001d96:	1e46      	subs	r6, r0, #1
 8001d98:	41b0      	sbcs	r0, r6
 8001d9a:	e7e5      	b.n	8001d68 <__eqdf2+0x3c>
 8001d9c:	2000      	movs	r0, #0
 8001d9e:	e7e3      	b.n	8001d68 <__eqdf2+0x3c>
 8001da0:	000007ff 	.word	0x000007ff

08001da4 <__gedf2>:
 8001da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001da6:	464e      	mov	r6, r9
 8001da8:	4645      	mov	r5, r8
 8001daa:	4657      	mov	r7, sl
 8001dac:	46de      	mov	lr, fp
 8001dae:	0004      	movs	r4, r0
 8001db0:	0018      	movs	r0, r3
 8001db2:	b5e0      	push	{r5, r6, r7, lr}
 8001db4:	0016      	movs	r6, r2
 8001db6:	031b      	lsls	r3, r3, #12
 8001db8:	0b1b      	lsrs	r3, r3, #12
 8001dba:	4d32      	ldr	r5, [pc, #200]	; (8001e84 <__gedf2+0xe0>)
 8001dbc:	030f      	lsls	r7, r1, #12
 8001dbe:	004a      	lsls	r2, r1, #1
 8001dc0:	4699      	mov	r9, r3
 8001dc2:	0043      	lsls	r3, r0, #1
 8001dc4:	46a4      	mov	ip, r4
 8001dc6:	46b0      	mov	r8, r6
 8001dc8:	0b3f      	lsrs	r7, r7, #12
 8001dca:	0d52      	lsrs	r2, r2, #21
 8001dcc:	0fc9      	lsrs	r1, r1, #31
 8001dce:	0d5b      	lsrs	r3, r3, #21
 8001dd0:	0fc0      	lsrs	r0, r0, #31
 8001dd2:	42aa      	cmp	r2, r5
 8001dd4:	d029      	beq.n	8001e2a <__gedf2+0x86>
 8001dd6:	42ab      	cmp	r3, r5
 8001dd8:	d018      	beq.n	8001e0c <__gedf2+0x68>
 8001dda:	2a00      	cmp	r2, #0
 8001ddc:	d12a      	bne.n	8001e34 <__gedf2+0x90>
 8001dde:	433c      	orrs	r4, r7
 8001de0:	46a3      	mov	fp, r4
 8001de2:	4265      	negs	r5, r4
 8001de4:	4165      	adcs	r5, r4
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d102      	bne.n	8001df0 <__gedf2+0x4c>
 8001dea:	464c      	mov	r4, r9
 8001dec:	4326      	orrs	r6, r4
 8001dee:	d027      	beq.n	8001e40 <__gedf2+0x9c>
 8001df0:	2d00      	cmp	r5, #0
 8001df2:	d115      	bne.n	8001e20 <__gedf2+0x7c>
 8001df4:	4281      	cmp	r1, r0
 8001df6:	d028      	beq.n	8001e4a <__gedf2+0xa6>
 8001df8:	2002      	movs	r0, #2
 8001dfa:	3901      	subs	r1, #1
 8001dfc:	4008      	ands	r0, r1
 8001dfe:	3801      	subs	r0, #1
 8001e00:	bcf0      	pop	{r4, r5, r6, r7}
 8001e02:	46bb      	mov	fp, r7
 8001e04:	46b2      	mov	sl, r6
 8001e06:	46a9      	mov	r9, r5
 8001e08:	46a0      	mov	r8, r4
 8001e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e0c:	464d      	mov	r5, r9
 8001e0e:	432e      	orrs	r6, r5
 8001e10:	d12f      	bne.n	8001e72 <__gedf2+0xce>
 8001e12:	2a00      	cmp	r2, #0
 8001e14:	d1ee      	bne.n	8001df4 <__gedf2+0x50>
 8001e16:	433c      	orrs	r4, r7
 8001e18:	4265      	negs	r5, r4
 8001e1a:	4165      	adcs	r5, r4
 8001e1c:	2d00      	cmp	r5, #0
 8001e1e:	d0e9      	beq.n	8001df4 <__gedf2+0x50>
 8001e20:	2800      	cmp	r0, #0
 8001e22:	d1ed      	bne.n	8001e00 <__gedf2+0x5c>
 8001e24:	2001      	movs	r0, #1
 8001e26:	4240      	negs	r0, r0
 8001e28:	e7ea      	b.n	8001e00 <__gedf2+0x5c>
 8001e2a:	003d      	movs	r5, r7
 8001e2c:	4325      	orrs	r5, r4
 8001e2e:	d120      	bne.n	8001e72 <__gedf2+0xce>
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d0eb      	beq.n	8001e0c <__gedf2+0x68>
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1dd      	bne.n	8001df4 <__gedf2+0x50>
 8001e38:	464c      	mov	r4, r9
 8001e3a:	4326      	orrs	r6, r4
 8001e3c:	d1da      	bne.n	8001df4 <__gedf2+0x50>
 8001e3e:	e7db      	b.n	8001df8 <__gedf2+0x54>
 8001e40:	465b      	mov	r3, fp
 8001e42:	2000      	movs	r0, #0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d0db      	beq.n	8001e00 <__gedf2+0x5c>
 8001e48:	e7d6      	b.n	8001df8 <__gedf2+0x54>
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	dc0a      	bgt.n	8001e64 <__gedf2+0xc0>
 8001e4e:	dbe7      	blt.n	8001e20 <__gedf2+0x7c>
 8001e50:	454f      	cmp	r7, r9
 8001e52:	d8d1      	bhi.n	8001df8 <__gedf2+0x54>
 8001e54:	d010      	beq.n	8001e78 <__gedf2+0xd4>
 8001e56:	2000      	movs	r0, #0
 8001e58:	454f      	cmp	r7, r9
 8001e5a:	d2d1      	bcs.n	8001e00 <__gedf2+0x5c>
 8001e5c:	2900      	cmp	r1, #0
 8001e5e:	d0e1      	beq.n	8001e24 <__gedf2+0x80>
 8001e60:	0008      	movs	r0, r1
 8001e62:	e7cd      	b.n	8001e00 <__gedf2+0x5c>
 8001e64:	4243      	negs	r3, r0
 8001e66:	4158      	adcs	r0, r3
 8001e68:	2302      	movs	r3, #2
 8001e6a:	4240      	negs	r0, r0
 8001e6c:	4018      	ands	r0, r3
 8001e6e:	3801      	subs	r0, #1
 8001e70:	e7c6      	b.n	8001e00 <__gedf2+0x5c>
 8001e72:	2002      	movs	r0, #2
 8001e74:	4240      	negs	r0, r0
 8001e76:	e7c3      	b.n	8001e00 <__gedf2+0x5c>
 8001e78:	45c4      	cmp	ip, r8
 8001e7a:	d8bd      	bhi.n	8001df8 <__gedf2+0x54>
 8001e7c:	2000      	movs	r0, #0
 8001e7e:	45c4      	cmp	ip, r8
 8001e80:	d2be      	bcs.n	8001e00 <__gedf2+0x5c>
 8001e82:	e7eb      	b.n	8001e5c <__gedf2+0xb8>
 8001e84:	000007ff 	.word	0x000007ff

08001e88 <__ledf2>:
 8001e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e8a:	464e      	mov	r6, r9
 8001e8c:	4645      	mov	r5, r8
 8001e8e:	4657      	mov	r7, sl
 8001e90:	46de      	mov	lr, fp
 8001e92:	0004      	movs	r4, r0
 8001e94:	0018      	movs	r0, r3
 8001e96:	b5e0      	push	{r5, r6, r7, lr}
 8001e98:	0016      	movs	r6, r2
 8001e9a:	031b      	lsls	r3, r3, #12
 8001e9c:	0b1b      	lsrs	r3, r3, #12
 8001e9e:	4d31      	ldr	r5, [pc, #196]	; (8001f64 <__ledf2+0xdc>)
 8001ea0:	030f      	lsls	r7, r1, #12
 8001ea2:	004a      	lsls	r2, r1, #1
 8001ea4:	4699      	mov	r9, r3
 8001ea6:	0043      	lsls	r3, r0, #1
 8001ea8:	46a4      	mov	ip, r4
 8001eaa:	46b0      	mov	r8, r6
 8001eac:	0b3f      	lsrs	r7, r7, #12
 8001eae:	0d52      	lsrs	r2, r2, #21
 8001eb0:	0fc9      	lsrs	r1, r1, #31
 8001eb2:	0d5b      	lsrs	r3, r3, #21
 8001eb4:	0fc0      	lsrs	r0, r0, #31
 8001eb6:	42aa      	cmp	r2, r5
 8001eb8:	d011      	beq.n	8001ede <__ledf2+0x56>
 8001eba:	42ab      	cmp	r3, r5
 8001ebc:	d014      	beq.n	8001ee8 <__ledf2+0x60>
 8001ebe:	2a00      	cmp	r2, #0
 8001ec0:	d12f      	bne.n	8001f22 <__ledf2+0x9a>
 8001ec2:	433c      	orrs	r4, r7
 8001ec4:	46a3      	mov	fp, r4
 8001ec6:	4265      	negs	r5, r4
 8001ec8:	4165      	adcs	r5, r4
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d114      	bne.n	8001ef8 <__ledf2+0x70>
 8001ece:	464c      	mov	r4, r9
 8001ed0:	4326      	orrs	r6, r4
 8001ed2:	d111      	bne.n	8001ef8 <__ledf2+0x70>
 8001ed4:	465b      	mov	r3, fp
 8001ed6:	2000      	movs	r0, #0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d017      	beq.n	8001f0c <__ledf2+0x84>
 8001edc:	e010      	b.n	8001f00 <__ledf2+0x78>
 8001ede:	003d      	movs	r5, r7
 8001ee0:	4325      	orrs	r5, r4
 8001ee2:	d112      	bne.n	8001f0a <__ledf2+0x82>
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d11c      	bne.n	8001f22 <__ledf2+0x9a>
 8001ee8:	464d      	mov	r5, r9
 8001eea:	432e      	orrs	r6, r5
 8001eec:	d10d      	bne.n	8001f0a <__ledf2+0x82>
 8001eee:	2a00      	cmp	r2, #0
 8001ef0:	d104      	bne.n	8001efc <__ledf2+0x74>
 8001ef2:	433c      	orrs	r4, r7
 8001ef4:	4265      	negs	r5, r4
 8001ef6:	4165      	adcs	r5, r4
 8001ef8:	2d00      	cmp	r5, #0
 8001efa:	d10d      	bne.n	8001f18 <__ledf2+0x90>
 8001efc:	4281      	cmp	r1, r0
 8001efe:	d016      	beq.n	8001f2e <__ledf2+0xa6>
 8001f00:	2002      	movs	r0, #2
 8001f02:	3901      	subs	r1, #1
 8001f04:	4008      	ands	r0, r1
 8001f06:	3801      	subs	r0, #1
 8001f08:	e000      	b.n	8001f0c <__ledf2+0x84>
 8001f0a:	2002      	movs	r0, #2
 8001f0c:	bcf0      	pop	{r4, r5, r6, r7}
 8001f0e:	46bb      	mov	fp, r7
 8001f10:	46b2      	mov	sl, r6
 8001f12:	46a9      	mov	r9, r5
 8001f14:	46a0      	mov	r8, r4
 8001f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f18:	2800      	cmp	r0, #0
 8001f1a:	d1f7      	bne.n	8001f0c <__ledf2+0x84>
 8001f1c:	2001      	movs	r0, #1
 8001f1e:	4240      	negs	r0, r0
 8001f20:	e7f4      	b.n	8001f0c <__ledf2+0x84>
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1ea      	bne.n	8001efc <__ledf2+0x74>
 8001f26:	464c      	mov	r4, r9
 8001f28:	4326      	orrs	r6, r4
 8001f2a:	d1e7      	bne.n	8001efc <__ledf2+0x74>
 8001f2c:	e7e8      	b.n	8001f00 <__ledf2+0x78>
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	dd06      	ble.n	8001f40 <__ledf2+0xb8>
 8001f32:	4243      	negs	r3, r0
 8001f34:	4158      	adcs	r0, r3
 8001f36:	2302      	movs	r3, #2
 8001f38:	4240      	negs	r0, r0
 8001f3a:	4018      	ands	r0, r3
 8001f3c:	3801      	subs	r0, #1
 8001f3e:	e7e5      	b.n	8001f0c <__ledf2+0x84>
 8001f40:	429a      	cmp	r2, r3
 8001f42:	dbe9      	blt.n	8001f18 <__ledf2+0x90>
 8001f44:	454f      	cmp	r7, r9
 8001f46:	d8db      	bhi.n	8001f00 <__ledf2+0x78>
 8001f48:	d006      	beq.n	8001f58 <__ledf2+0xd0>
 8001f4a:	2000      	movs	r0, #0
 8001f4c:	454f      	cmp	r7, r9
 8001f4e:	d2dd      	bcs.n	8001f0c <__ledf2+0x84>
 8001f50:	2900      	cmp	r1, #0
 8001f52:	d0e3      	beq.n	8001f1c <__ledf2+0x94>
 8001f54:	0008      	movs	r0, r1
 8001f56:	e7d9      	b.n	8001f0c <__ledf2+0x84>
 8001f58:	45c4      	cmp	ip, r8
 8001f5a:	d8d1      	bhi.n	8001f00 <__ledf2+0x78>
 8001f5c:	2000      	movs	r0, #0
 8001f5e:	45c4      	cmp	ip, r8
 8001f60:	d2d4      	bcs.n	8001f0c <__ledf2+0x84>
 8001f62:	e7f5      	b.n	8001f50 <__ledf2+0xc8>
 8001f64:	000007ff 	.word	0x000007ff

08001f68 <__aeabi_dmul>:
 8001f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f6a:	4657      	mov	r7, sl
 8001f6c:	464e      	mov	r6, r9
 8001f6e:	4645      	mov	r5, r8
 8001f70:	46de      	mov	lr, fp
 8001f72:	b5e0      	push	{r5, r6, r7, lr}
 8001f74:	4698      	mov	r8, r3
 8001f76:	030c      	lsls	r4, r1, #12
 8001f78:	004b      	lsls	r3, r1, #1
 8001f7a:	0006      	movs	r6, r0
 8001f7c:	4692      	mov	sl, r2
 8001f7e:	b087      	sub	sp, #28
 8001f80:	0b24      	lsrs	r4, r4, #12
 8001f82:	0d5b      	lsrs	r3, r3, #21
 8001f84:	0fcf      	lsrs	r7, r1, #31
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d06c      	beq.n	8002064 <__aeabi_dmul+0xfc>
 8001f8a:	4add      	ldr	r2, [pc, #884]	; (8002300 <__aeabi_dmul+0x398>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d100      	bne.n	8001f92 <__aeabi_dmul+0x2a>
 8001f90:	e086      	b.n	80020a0 <__aeabi_dmul+0x138>
 8001f92:	0f42      	lsrs	r2, r0, #29
 8001f94:	00e4      	lsls	r4, r4, #3
 8001f96:	4314      	orrs	r4, r2
 8001f98:	2280      	movs	r2, #128	; 0x80
 8001f9a:	0412      	lsls	r2, r2, #16
 8001f9c:	4314      	orrs	r4, r2
 8001f9e:	4ad9      	ldr	r2, [pc, #868]	; (8002304 <__aeabi_dmul+0x39c>)
 8001fa0:	00c5      	lsls	r5, r0, #3
 8001fa2:	4694      	mov	ip, r2
 8001fa4:	4463      	add	r3, ip
 8001fa6:	9300      	str	r3, [sp, #0]
 8001fa8:	2300      	movs	r3, #0
 8001faa:	4699      	mov	r9, r3
 8001fac:	469b      	mov	fp, r3
 8001fae:	4643      	mov	r3, r8
 8001fb0:	4642      	mov	r2, r8
 8001fb2:	031e      	lsls	r6, r3, #12
 8001fb4:	0fd2      	lsrs	r2, r2, #31
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	4650      	mov	r0, sl
 8001fba:	4690      	mov	r8, r2
 8001fbc:	0b36      	lsrs	r6, r6, #12
 8001fbe:	0d5b      	lsrs	r3, r3, #21
 8001fc0:	d100      	bne.n	8001fc4 <__aeabi_dmul+0x5c>
 8001fc2:	e078      	b.n	80020b6 <__aeabi_dmul+0x14e>
 8001fc4:	4ace      	ldr	r2, [pc, #824]	; (8002300 <__aeabi_dmul+0x398>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d01d      	beq.n	8002006 <__aeabi_dmul+0x9e>
 8001fca:	49ce      	ldr	r1, [pc, #824]	; (8002304 <__aeabi_dmul+0x39c>)
 8001fcc:	0f42      	lsrs	r2, r0, #29
 8001fce:	468c      	mov	ip, r1
 8001fd0:	9900      	ldr	r1, [sp, #0]
 8001fd2:	4463      	add	r3, ip
 8001fd4:	00f6      	lsls	r6, r6, #3
 8001fd6:	468c      	mov	ip, r1
 8001fd8:	4316      	orrs	r6, r2
 8001fda:	2280      	movs	r2, #128	; 0x80
 8001fdc:	449c      	add	ip, r3
 8001fde:	0412      	lsls	r2, r2, #16
 8001fe0:	4663      	mov	r3, ip
 8001fe2:	4316      	orrs	r6, r2
 8001fe4:	00c2      	lsls	r2, r0, #3
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	9300      	str	r3, [sp, #0]
 8001fea:	9900      	ldr	r1, [sp, #0]
 8001fec:	4643      	mov	r3, r8
 8001fee:	3101      	adds	r1, #1
 8001ff0:	468c      	mov	ip, r1
 8001ff2:	4649      	mov	r1, r9
 8001ff4:	407b      	eors	r3, r7
 8001ff6:	9301      	str	r3, [sp, #4]
 8001ff8:	290f      	cmp	r1, #15
 8001ffa:	d900      	bls.n	8001ffe <__aeabi_dmul+0x96>
 8001ffc:	e07e      	b.n	80020fc <__aeabi_dmul+0x194>
 8001ffe:	4bc2      	ldr	r3, [pc, #776]	; (8002308 <__aeabi_dmul+0x3a0>)
 8002000:	0089      	lsls	r1, r1, #2
 8002002:	5859      	ldr	r1, [r3, r1]
 8002004:	468f      	mov	pc, r1
 8002006:	4652      	mov	r2, sl
 8002008:	9b00      	ldr	r3, [sp, #0]
 800200a:	4332      	orrs	r2, r6
 800200c:	d000      	beq.n	8002010 <__aeabi_dmul+0xa8>
 800200e:	e156      	b.n	80022be <__aeabi_dmul+0x356>
 8002010:	49bb      	ldr	r1, [pc, #748]	; (8002300 <__aeabi_dmul+0x398>)
 8002012:	2600      	movs	r6, #0
 8002014:	468c      	mov	ip, r1
 8002016:	4463      	add	r3, ip
 8002018:	4649      	mov	r1, r9
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	2302      	movs	r3, #2
 800201e:	4319      	orrs	r1, r3
 8002020:	4689      	mov	r9, r1
 8002022:	2002      	movs	r0, #2
 8002024:	e7e1      	b.n	8001fea <__aeabi_dmul+0x82>
 8002026:	4643      	mov	r3, r8
 8002028:	9301      	str	r3, [sp, #4]
 800202a:	0034      	movs	r4, r6
 800202c:	0015      	movs	r5, r2
 800202e:	4683      	mov	fp, r0
 8002030:	465b      	mov	r3, fp
 8002032:	2b02      	cmp	r3, #2
 8002034:	d05e      	beq.n	80020f4 <__aeabi_dmul+0x18c>
 8002036:	2b03      	cmp	r3, #3
 8002038:	d100      	bne.n	800203c <__aeabi_dmul+0xd4>
 800203a:	e1f3      	b.n	8002424 <__aeabi_dmul+0x4bc>
 800203c:	2b01      	cmp	r3, #1
 800203e:	d000      	beq.n	8002042 <__aeabi_dmul+0xda>
 8002040:	e118      	b.n	8002274 <__aeabi_dmul+0x30c>
 8002042:	2200      	movs	r2, #0
 8002044:	2400      	movs	r4, #0
 8002046:	2500      	movs	r5, #0
 8002048:	9b01      	ldr	r3, [sp, #4]
 800204a:	0512      	lsls	r2, r2, #20
 800204c:	4322      	orrs	r2, r4
 800204e:	07db      	lsls	r3, r3, #31
 8002050:	431a      	orrs	r2, r3
 8002052:	0028      	movs	r0, r5
 8002054:	0011      	movs	r1, r2
 8002056:	b007      	add	sp, #28
 8002058:	bcf0      	pop	{r4, r5, r6, r7}
 800205a:	46bb      	mov	fp, r7
 800205c:	46b2      	mov	sl, r6
 800205e:	46a9      	mov	r9, r5
 8002060:	46a0      	mov	r8, r4
 8002062:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002064:	0025      	movs	r5, r4
 8002066:	4305      	orrs	r5, r0
 8002068:	d100      	bne.n	800206c <__aeabi_dmul+0x104>
 800206a:	e141      	b.n	80022f0 <__aeabi_dmul+0x388>
 800206c:	2c00      	cmp	r4, #0
 800206e:	d100      	bne.n	8002072 <__aeabi_dmul+0x10a>
 8002070:	e1ad      	b.n	80023ce <__aeabi_dmul+0x466>
 8002072:	0020      	movs	r0, r4
 8002074:	f000 fe4a 	bl	8002d0c <__clzsi2>
 8002078:	0001      	movs	r1, r0
 800207a:	0002      	movs	r2, r0
 800207c:	390b      	subs	r1, #11
 800207e:	231d      	movs	r3, #29
 8002080:	0010      	movs	r0, r2
 8002082:	1a5b      	subs	r3, r3, r1
 8002084:	0031      	movs	r1, r6
 8002086:	0035      	movs	r5, r6
 8002088:	3808      	subs	r0, #8
 800208a:	4084      	lsls	r4, r0
 800208c:	40d9      	lsrs	r1, r3
 800208e:	4085      	lsls	r5, r0
 8002090:	430c      	orrs	r4, r1
 8002092:	489e      	ldr	r0, [pc, #632]	; (800230c <__aeabi_dmul+0x3a4>)
 8002094:	1a83      	subs	r3, r0, r2
 8002096:	9300      	str	r3, [sp, #0]
 8002098:	2300      	movs	r3, #0
 800209a:	4699      	mov	r9, r3
 800209c:	469b      	mov	fp, r3
 800209e:	e786      	b.n	8001fae <__aeabi_dmul+0x46>
 80020a0:	0005      	movs	r5, r0
 80020a2:	4325      	orrs	r5, r4
 80020a4:	d000      	beq.n	80020a8 <__aeabi_dmul+0x140>
 80020a6:	e11c      	b.n	80022e2 <__aeabi_dmul+0x37a>
 80020a8:	2208      	movs	r2, #8
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	2302      	movs	r3, #2
 80020ae:	2400      	movs	r4, #0
 80020b0:	4691      	mov	r9, r2
 80020b2:	469b      	mov	fp, r3
 80020b4:	e77b      	b.n	8001fae <__aeabi_dmul+0x46>
 80020b6:	4652      	mov	r2, sl
 80020b8:	4332      	orrs	r2, r6
 80020ba:	d100      	bne.n	80020be <__aeabi_dmul+0x156>
 80020bc:	e10a      	b.n	80022d4 <__aeabi_dmul+0x36c>
 80020be:	2e00      	cmp	r6, #0
 80020c0:	d100      	bne.n	80020c4 <__aeabi_dmul+0x15c>
 80020c2:	e176      	b.n	80023b2 <__aeabi_dmul+0x44a>
 80020c4:	0030      	movs	r0, r6
 80020c6:	f000 fe21 	bl	8002d0c <__clzsi2>
 80020ca:	0002      	movs	r2, r0
 80020cc:	3a0b      	subs	r2, #11
 80020ce:	231d      	movs	r3, #29
 80020d0:	0001      	movs	r1, r0
 80020d2:	1a9b      	subs	r3, r3, r2
 80020d4:	4652      	mov	r2, sl
 80020d6:	3908      	subs	r1, #8
 80020d8:	40da      	lsrs	r2, r3
 80020da:	408e      	lsls	r6, r1
 80020dc:	4316      	orrs	r6, r2
 80020de:	4652      	mov	r2, sl
 80020e0:	408a      	lsls	r2, r1
 80020e2:	9b00      	ldr	r3, [sp, #0]
 80020e4:	4989      	ldr	r1, [pc, #548]	; (800230c <__aeabi_dmul+0x3a4>)
 80020e6:	1a18      	subs	r0, r3, r0
 80020e8:	0003      	movs	r3, r0
 80020ea:	468c      	mov	ip, r1
 80020ec:	4463      	add	r3, ip
 80020ee:	2000      	movs	r0, #0
 80020f0:	9300      	str	r3, [sp, #0]
 80020f2:	e77a      	b.n	8001fea <__aeabi_dmul+0x82>
 80020f4:	2400      	movs	r4, #0
 80020f6:	2500      	movs	r5, #0
 80020f8:	4a81      	ldr	r2, [pc, #516]	; (8002300 <__aeabi_dmul+0x398>)
 80020fa:	e7a5      	b.n	8002048 <__aeabi_dmul+0xe0>
 80020fc:	0c2f      	lsrs	r7, r5, #16
 80020fe:	042d      	lsls	r5, r5, #16
 8002100:	0c2d      	lsrs	r5, r5, #16
 8002102:	002b      	movs	r3, r5
 8002104:	0c11      	lsrs	r1, r2, #16
 8002106:	0412      	lsls	r2, r2, #16
 8002108:	0c12      	lsrs	r2, r2, #16
 800210a:	4353      	muls	r3, r2
 800210c:	4698      	mov	r8, r3
 800210e:	0013      	movs	r3, r2
 8002110:	0028      	movs	r0, r5
 8002112:	437b      	muls	r3, r7
 8002114:	4699      	mov	r9, r3
 8002116:	4348      	muls	r0, r1
 8002118:	4448      	add	r0, r9
 800211a:	4683      	mov	fp, r0
 800211c:	4640      	mov	r0, r8
 800211e:	000b      	movs	r3, r1
 8002120:	0c00      	lsrs	r0, r0, #16
 8002122:	4682      	mov	sl, r0
 8002124:	4658      	mov	r0, fp
 8002126:	437b      	muls	r3, r7
 8002128:	4450      	add	r0, sl
 800212a:	9302      	str	r3, [sp, #8]
 800212c:	4581      	cmp	r9, r0
 800212e:	d906      	bls.n	800213e <__aeabi_dmul+0x1d6>
 8002130:	469a      	mov	sl, r3
 8002132:	2380      	movs	r3, #128	; 0x80
 8002134:	025b      	lsls	r3, r3, #9
 8002136:	4699      	mov	r9, r3
 8002138:	44ca      	add	sl, r9
 800213a:	4653      	mov	r3, sl
 800213c:	9302      	str	r3, [sp, #8]
 800213e:	0c03      	lsrs	r3, r0, #16
 8002140:	469b      	mov	fp, r3
 8002142:	4643      	mov	r3, r8
 8002144:	041b      	lsls	r3, r3, #16
 8002146:	0400      	lsls	r0, r0, #16
 8002148:	0c1b      	lsrs	r3, r3, #16
 800214a:	4698      	mov	r8, r3
 800214c:	0003      	movs	r3, r0
 800214e:	4443      	add	r3, r8
 8002150:	9304      	str	r3, [sp, #16]
 8002152:	0c33      	lsrs	r3, r6, #16
 8002154:	4699      	mov	r9, r3
 8002156:	002b      	movs	r3, r5
 8002158:	0436      	lsls	r6, r6, #16
 800215a:	0c36      	lsrs	r6, r6, #16
 800215c:	4373      	muls	r3, r6
 800215e:	4698      	mov	r8, r3
 8002160:	0033      	movs	r3, r6
 8002162:	437b      	muls	r3, r7
 8002164:	469a      	mov	sl, r3
 8002166:	464b      	mov	r3, r9
 8002168:	435d      	muls	r5, r3
 800216a:	435f      	muls	r7, r3
 800216c:	4643      	mov	r3, r8
 800216e:	4455      	add	r5, sl
 8002170:	0c18      	lsrs	r0, r3, #16
 8002172:	1940      	adds	r0, r0, r5
 8002174:	4582      	cmp	sl, r0
 8002176:	d903      	bls.n	8002180 <__aeabi_dmul+0x218>
 8002178:	2380      	movs	r3, #128	; 0x80
 800217a:	025b      	lsls	r3, r3, #9
 800217c:	469a      	mov	sl, r3
 800217e:	4457      	add	r7, sl
 8002180:	0c05      	lsrs	r5, r0, #16
 8002182:	19eb      	adds	r3, r5, r7
 8002184:	9305      	str	r3, [sp, #20]
 8002186:	4643      	mov	r3, r8
 8002188:	041d      	lsls	r5, r3, #16
 800218a:	0c2d      	lsrs	r5, r5, #16
 800218c:	0400      	lsls	r0, r0, #16
 800218e:	1940      	adds	r0, r0, r5
 8002190:	0c25      	lsrs	r5, r4, #16
 8002192:	0424      	lsls	r4, r4, #16
 8002194:	0c24      	lsrs	r4, r4, #16
 8002196:	0027      	movs	r7, r4
 8002198:	4357      	muls	r7, r2
 800219a:	436a      	muls	r2, r5
 800219c:	4690      	mov	r8, r2
 800219e:	002a      	movs	r2, r5
 80021a0:	0c3b      	lsrs	r3, r7, #16
 80021a2:	469a      	mov	sl, r3
 80021a4:	434a      	muls	r2, r1
 80021a6:	4361      	muls	r1, r4
 80021a8:	4441      	add	r1, r8
 80021aa:	4451      	add	r1, sl
 80021ac:	4483      	add	fp, r0
 80021ae:	4588      	cmp	r8, r1
 80021b0:	d903      	bls.n	80021ba <__aeabi_dmul+0x252>
 80021b2:	2380      	movs	r3, #128	; 0x80
 80021b4:	025b      	lsls	r3, r3, #9
 80021b6:	4698      	mov	r8, r3
 80021b8:	4442      	add	r2, r8
 80021ba:	043f      	lsls	r7, r7, #16
 80021bc:	0c0b      	lsrs	r3, r1, #16
 80021be:	0c3f      	lsrs	r7, r7, #16
 80021c0:	0409      	lsls	r1, r1, #16
 80021c2:	19c9      	adds	r1, r1, r7
 80021c4:	0027      	movs	r7, r4
 80021c6:	4698      	mov	r8, r3
 80021c8:	464b      	mov	r3, r9
 80021ca:	4377      	muls	r7, r6
 80021cc:	435c      	muls	r4, r3
 80021ce:	436e      	muls	r6, r5
 80021d0:	435d      	muls	r5, r3
 80021d2:	0c3b      	lsrs	r3, r7, #16
 80021d4:	4699      	mov	r9, r3
 80021d6:	19a4      	adds	r4, r4, r6
 80021d8:	444c      	add	r4, r9
 80021da:	4442      	add	r2, r8
 80021dc:	9503      	str	r5, [sp, #12]
 80021de:	42a6      	cmp	r6, r4
 80021e0:	d904      	bls.n	80021ec <__aeabi_dmul+0x284>
 80021e2:	2380      	movs	r3, #128	; 0x80
 80021e4:	025b      	lsls	r3, r3, #9
 80021e6:	4698      	mov	r8, r3
 80021e8:	4445      	add	r5, r8
 80021ea:	9503      	str	r5, [sp, #12]
 80021ec:	9b02      	ldr	r3, [sp, #8]
 80021ee:	043f      	lsls	r7, r7, #16
 80021f0:	445b      	add	r3, fp
 80021f2:	001e      	movs	r6, r3
 80021f4:	4283      	cmp	r3, r0
 80021f6:	4180      	sbcs	r0, r0
 80021f8:	0423      	lsls	r3, r4, #16
 80021fa:	4698      	mov	r8, r3
 80021fc:	9b05      	ldr	r3, [sp, #20]
 80021fe:	0c3f      	lsrs	r7, r7, #16
 8002200:	4447      	add	r7, r8
 8002202:	4698      	mov	r8, r3
 8002204:	1876      	adds	r6, r6, r1
 8002206:	428e      	cmp	r6, r1
 8002208:	4189      	sbcs	r1, r1
 800220a:	4447      	add	r7, r8
 800220c:	4240      	negs	r0, r0
 800220e:	183d      	adds	r5, r7, r0
 8002210:	46a8      	mov	r8, r5
 8002212:	4693      	mov	fp, r2
 8002214:	4249      	negs	r1, r1
 8002216:	468a      	mov	sl, r1
 8002218:	44c3      	add	fp, r8
 800221a:	429f      	cmp	r7, r3
 800221c:	41bf      	sbcs	r7, r7
 800221e:	4580      	cmp	r8, r0
 8002220:	4180      	sbcs	r0, r0
 8002222:	9b03      	ldr	r3, [sp, #12]
 8002224:	44da      	add	sl, fp
 8002226:	4698      	mov	r8, r3
 8002228:	4653      	mov	r3, sl
 800222a:	4240      	negs	r0, r0
 800222c:	427f      	negs	r7, r7
 800222e:	4307      	orrs	r7, r0
 8002230:	0c24      	lsrs	r4, r4, #16
 8002232:	4593      	cmp	fp, r2
 8002234:	4192      	sbcs	r2, r2
 8002236:	458a      	cmp	sl, r1
 8002238:	4189      	sbcs	r1, r1
 800223a:	193f      	adds	r7, r7, r4
 800223c:	0ddc      	lsrs	r4, r3, #23
 800223e:	9b04      	ldr	r3, [sp, #16]
 8002240:	0275      	lsls	r5, r6, #9
 8002242:	431d      	orrs	r5, r3
 8002244:	1e68      	subs	r0, r5, #1
 8002246:	4185      	sbcs	r5, r0
 8002248:	4653      	mov	r3, sl
 800224a:	4252      	negs	r2, r2
 800224c:	4249      	negs	r1, r1
 800224e:	430a      	orrs	r2, r1
 8002250:	18bf      	adds	r7, r7, r2
 8002252:	4447      	add	r7, r8
 8002254:	0df6      	lsrs	r6, r6, #23
 8002256:	027f      	lsls	r7, r7, #9
 8002258:	4335      	orrs	r5, r6
 800225a:	025a      	lsls	r2, r3, #9
 800225c:	433c      	orrs	r4, r7
 800225e:	4315      	orrs	r5, r2
 8002260:	01fb      	lsls	r3, r7, #7
 8002262:	d400      	bmi.n	8002266 <__aeabi_dmul+0x2fe>
 8002264:	e0c1      	b.n	80023ea <__aeabi_dmul+0x482>
 8002266:	2101      	movs	r1, #1
 8002268:	086a      	lsrs	r2, r5, #1
 800226a:	400d      	ands	r5, r1
 800226c:	4315      	orrs	r5, r2
 800226e:	07e2      	lsls	r2, r4, #31
 8002270:	4315      	orrs	r5, r2
 8002272:	0864      	lsrs	r4, r4, #1
 8002274:	4926      	ldr	r1, [pc, #152]	; (8002310 <__aeabi_dmul+0x3a8>)
 8002276:	4461      	add	r1, ip
 8002278:	2900      	cmp	r1, #0
 800227a:	dd56      	ble.n	800232a <__aeabi_dmul+0x3c2>
 800227c:	076b      	lsls	r3, r5, #29
 800227e:	d009      	beq.n	8002294 <__aeabi_dmul+0x32c>
 8002280:	220f      	movs	r2, #15
 8002282:	402a      	ands	r2, r5
 8002284:	2a04      	cmp	r2, #4
 8002286:	d005      	beq.n	8002294 <__aeabi_dmul+0x32c>
 8002288:	1d2a      	adds	r2, r5, #4
 800228a:	42aa      	cmp	r2, r5
 800228c:	41ad      	sbcs	r5, r5
 800228e:	426d      	negs	r5, r5
 8002290:	1964      	adds	r4, r4, r5
 8002292:	0015      	movs	r5, r2
 8002294:	01e3      	lsls	r3, r4, #7
 8002296:	d504      	bpl.n	80022a2 <__aeabi_dmul+0x33a>
 8002298:	2180      	movs	r1, #128	; 0x80
 800229a:	4a1e      	ldr	r2, [pc, #120]	; (8002314 <__aeabi_dmul+0x3ac>)
 800229c:	00c9      	lsls	r1, r1, #3
 800229e:	4014      	ands	r4, r2
 80022a0:	4461      	add	r1, ip
 80022a2:	4a1d      	ldr	r2, [pc, #116]	; (8002318 <__aeabi_dmul+0x3b0>)
 80022a4:	4291      	cmp	r1, r2
 80022a6:	dd00      	ble.n	80022aa <__aeabi_dmul+0x342>
 80022a8:	e724      	b.n	80020f4 <__aeabi_dmul+0x18c>
 80022aa:	0762      	lsls	r2, r4, #29
 80022ac:	08ed      	lsrs	r5, r5, #3
 80022ae:	0264      	lsls	r4, r4, #9
 80022b0:	0549      	lsls	r1, r1, #21
 80022b2:	4315      	orrs	r5, r2
 80022b4:	0b24      	lsrs	r4, r4, #12
 80022b6:	0d4a      	lsrs	r2, r1, #21
 80022b8:	e6c6      	b.n	8002048 <__aeabi_dmul+0xe0>
 80022ba:	9701      	str	r7, [sp, #4]
 80022bc:	e6b8      	b.n	8002030 <__aeabi_dmul+0xc8>
 80022be:	4a10      	ldr	r2, [pc, #64]	; (8002300 <__aeabi_dmul+0x398>)
 80022c0:	2003      	movs	r0, #3
 80022c2:	4694      	mov	ip, r2
 80022c4:	4463      	add	r3, ip
 80022c6:	464a      	mov	r2, r9
 80022c8:	9300      	str	r3, [sp, #0]
 80022ca:	2303      	movs	r3, #3
 80022cc:	431a      	orrs	r2, r3
 80022ce:	4691      	mov	r9, r2
 80022d0:	4652      	mov	r2, sl
 80022d2:	e68a      	b.n	8001fea <__aeabi_dmul+0x82>
 80022d4:	4649      	mov	r1, r9
 80022d6:	2301      	movs	r3, #1
 80022d8:	4319      	orrs	r1, r3
 80022da:	4689      	mov	r9, r1
 80022dc:	2600      	movs	r6, #0
 80022de:	2001      	movs	r0, #1
 80022e0:	e683      	b.n	8001fea <__aeabi_dmul+0x82>
 80022e2:	220c      	movs	r2, #12
 80022e4:	9300      	str	r3, [sp, #0]
 80022e6:	2303      	movs	r3, #3
 80022e8:	0005      	movs	r5, r0
 80022ea:	4691      	mov	r9, r2
 80022ec:	469b      	mov	fp, r3
 80022ee:	e65e      	b.n	8001fae <__aeabi_dmul+0x46>
 80022f0:	2304      	movs	r3, #4
 80022f2:	4699      	mov	r9, r3
 80022f4:	2300      	movs	r3, #0
 80022f6:	9300      	str	r3, [sp, #0]
 80022f8:	3301      	adds	r3, #1
 80022fa:	2400      	movs	r4, #0
 80022fc:	469b      	mov	fp, r3
 80022fe:	e656      	b.n	8001fae <__aeabi_dmul+0x46>
 8002300:	000007ff 	.word	0x000007ff
 8002304:	fffffc01 	.word	0xfffffc01
 8002308:	0801fe80 	.word	0x0801fe80
 800230c:	fffffc0d 	.word	0xfffffc0d
 8002310:	000003ff 	.word	0x000003ff
 8002314:	feffffff 	.word	0xfeffffff
 8002318:	000007fe 	.word	0x000007fe
 800231c:	2300      	movs	r3, #0
 800231e:	2480      	movs	r4, #128	; 0x80
 8002320:	2500      	movs	r5, #0
 8002322:	4a44      	ldr	r2, [pc, #272]	; (8002434 <__aeabi_dmul+0x4cc>)
 8002324:	9301      	str	r3, [sp, #4]
 8002326:	0324      	lsls	r4, r4, #12
 8002328:	e68e      	b.n	8002048 <__aeabi_dmul+0xe0>
 800232a:	2001      	movs	r0, #1
 800232c:	1a40      	subs	r0, r0, r1
 800232e:	2838      	cmp	r0, #56	; 0x38
 8002330:	dd00      	ble.n	8002334 <__aeabi_dmul+0x3cc>
 8002332:	e686      	b.n	8002042 <__aeabi_dmul+0xda>
 8002334:	281f      	cmp	r0, #31
 8002336:	dd5b      	ble.n	80023f0 <__aeabi_dmul+0x488>
 8002338:	221f      	movs	r2, #31
 800233a:	0023      	movs	r3, r4
 800233c:	4252      	negs	r2, r2
 800233e:	1a51      	subs	r1, r2, r1
 8002340:	40cb      	lsrs	r3, r1
 8002342:	0019      	movs	r1, r3
 8002344:	2820      	cmp	r0, #32
 8002346:	d003      	beq.n	8002350 <__aeabi_dmul+0x3e8>
 8002348:	4a3b      	ldr	r2, [pc, #236]	; (8002438 <__aeabi_dmul+0x4d0>)
 800234a:	4462      	add	r2, ip
 800234c:	4094      	lsls	r4, r2
 800234e:	4325      	orrs	r5, r4
 8002350:	1e6a      	subs	r2, r5, #1
 8002352:	4195      	sbcs	r5, r2
 8002354:	002a      	movs	r2, r5
 8002356:	430a      	orrs	r2, r1
 8002358:	2107      	movs	r1, #7
 800235a:	000d      	movs	r5, r1
 800235c:	2400      	movs	r4, #0
 800235e:	4015      	ands	r5, r2
 8002360:	4211      	tst	r1, r2
 8002362:	d05b      	beq.n	800241c <__aeabi_dmul+0x4b4>
 8002364:	210f      	movs	r1, #15
 8002366:	2400      	movs	r4, #0
 8002368:	4011      	ands	r1, r2
 800236a:	2904      	cmp	r1, #4
 800236c:	d053      	beq.n	8002416 <__aeabi_dmul+0x4ae>
 800236e:	1d11      	adds	r1, r2, #4
 8002370:	4291      	cmp	r1, r2
 8002372:	4192      	sbcs	r2, r2
 8002374:	4252      	negs	r2, r2
 8002376:	18a4      	adds	r4, r4, r2
 8002378:	000a      	movs	r2, r1
 800237a:	0223      	lsls	r3, r4, #8
 800237c:	d54b      	bpl.n	8002416 <__aeabi_dmul+0x4ae>
 800237e:	2201      	movs	r2, #1
 8002380:	2400      	movs	r4, #0
 8002382:	2500      	movs	r5, #0
 8002384:	e660      	b.n	8002048 <__aeabi_dmul+0xe0>
 8002386:	2380      	movs	r3, #128	; 0x80
 8002388:	031b      	lsls	r3, r3, #12
 800238a:	421c      	tst	r4, r3
 800238c:	d009      	beq.n	80023a2 <__aeabi_dmul+0x43a>
 800238e:	421e      	tst	r6, r3
 8002390:	d107      	bne.n	80023a2 <__aeabi_dmul+0x43a>
 8002392:	4333      	orrs	r3, r6
 8002394:	031c      	lsls	r4, r3, #12
 8002396:	4643      	mov	r3, r8
 8002398:	0015      	movs	r5, r2
 800239a:	0b24      	lsrs	r4, r4, #12
 800239c:	4a25      	ldr	r2, [pc, #148]	; (8002434 <__aeabi_dmul+0x4cc>)
 800239e:	9301      	str	r3, [sp, #4]
 80023a0:	e652      	b.n	8002048 <__aeabi_dmul+0xe0>
 80023a2:	2280      	movs	r2, #128	; 0x80
 80023a4:	0312      	lsls	r2, r2, #12
 80023a6:	4314      	orrs	r4, r2
 80023a8:	0324      	lsls	r4, r4, #12
 80023aa:	4a22      	ldr	r2, [pc, #136]	; (8002434 <__aeabi_dmul+0x4cc>)
 80023ac:	0b24      	lsrs	r4, r4, #12
 80023ae:	9701      	str	r7, [sp, #4]
 80023b0:	e64a      	b.n	8002048 <__aeabi_dmul+0xe0>
 80023b2:	f000 fcab 	bl	8002d0c <__clzsi2>
 80023b6:	0003      	movs	r3, r0
 80023b8:	001a      	movs	r2, r3
 80023ba:	3215      	adds	r2, #21
 80023bc:	3020      	adds	r0, #32
 80023be:	2a1c      	cmp	r2, #28
 80023c0:	dc00      	bgt.n	80023c4 <__aeabi_dmul+0x45c>
 80023c2:	e684      	b.n	80020ce <__aeabi_dmul+0x166>
 80023c4:	4656      	mov	r6, sl
 80023c6:	3b08      	subs	r3, #8
 80023c8:	2200      	movs	r2, #0
 80023ca:	409e      	lsls	r6, r3
 80023cc:	e689      	b.n	80020e2 <__aeabi_dmul+0x17a>
 80023ce:	f000 fc9d 	bl	8002d0c <__clzsi2>
 80023d2:	0001      	movs	r1, r0
 80023d4:	0002      	movs	r2, r0
 80023d6:	3115      	adds	r1, #21
 80023d8:	3220      	adds	r2, #32
 80023da:	291c      	cmp	r1, #28
 80023dc:	dc00      	bgt.n	80023e0 <__aeabi_dmul+0x478>
 80023de:	e64e      	b.n	800207e <__aeabi_dmul+0x116>
 80023e0:	0034      	movs	r4, r6
 80023e2:	3808      	subs	r0, #8
 80023e4:	2500      	movs	r5, #0
 80023e6:	4084      	lsls	r4, r0
 80023e8:	e653      	b.n	8002092 <__aeabi_dmul+0x12a>
 80023ea:	9b00      	ldr	r3, [sp, #0]
 80023ec:	469c      	mov	ip, r3
 80023ee:	e741      	b.n	8002274 <__aeabi_dmul+0x30c>
 80023f0:	4912      	ldr	r1, [pc, #72]	; (800243c <__aeabi_dmul+0x4d4>)
 80023f2:	0022      	movs	r2, r4
 80023f4:	4461      	add	r1, ip
 80023f6:	002e      	movs	r6, r5
 80023f8:	408d      	lsls	r5, r1
 80023fa:	408a      	lsls	r2, r1
 80023fc:	40c6      	lsrs	r6, r0
 80023fe:	1e69      	subs	r1, r5, #1
 8002400:	418d      	sbcs	r5, r1
 8002402:	4332      	orrs	r2, r6
 8002404:	432a      	orrs	r2, r5
 8002406:	40c4      	lsrs	r4, r0
 8002408:	0753      	lsls	r3, r2, #29
 800240a:	d0b6      	beq.n	800237a <__aeabi_dmul+0x412>
 800240c:	210f      	movs	r1, #15
 800240e:	4011      	ands	r1, r2
 8002410:	2904      	cmp	r1, #4
 8002412:	d1ac      	bne.n	800236e <__aeabi_dmul+0x406>
 8002414:	e7b1      	b.n	800237a <__aeabi_dmul+0x412>
 8002416:	0765      	lsls	r5, r4, #29
 8002418:	0264      	lsls	r4, r4, #9
 800241a:	0b24      	lsrs	r4, r4, #12
 800241c:	08d2      	lsrs	r2, r2, #3
 800241e:	4315      	orrs	r5, r2
 8002420:	2200      	movs	r2, #0
 8002422:	e611      	b.n	8002048 <__aeabi_dmul+0xe0>
 8002424:	2280      	movs	r2, #128	; 0x80
 8002426:	0312      	lsls	r2, r2, #12
 8002428:	4314      	orrs	r4, r2
 800242a:	0324      	lsls	r4, r4, #12
 800242c:	4a01      	ldr	r2, [pc, #4]	; (8002434 <__aeabi_dmul+0x4cc>)
 800242e:	0b24      	lsrs	r4, r4, #12
 8002430:	e60a      	b.n	8002048 <__aeabi_dmul+0xe0>
 8002432:	46c0      	nop			; (mov r8, r8)
 8002434:	000007ff 	.word	0x000007ff
 8002438:	0000043e 	.word	0x0000043e
 800243c:	0000041e 	.word	0x0000041e

08002440 <__aeabi_dsub>:
 8002440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002442:	4657      	mov	r7, sl
 8002444:	464e      	mov	r6, r9
 8002446:	4645      	mov	r5, r8
 8002448:	46de      	mov	lr, fp
 800244a:	0004      	movs	r4, r0
 800244c:	b5e0      	push	{r5, r6, r7, lr}
 800244e:	001f      	movs	r7, r3
 8002450:	0010      	movs	r0, r2
 8002452:	030b      	lsls	r3, r1, #12
 8002454:	0f62      	lsrs	r2, r4, #29
 8002456:	004e      	lsls	r6, r1, #1
 8002458:	0fcd      	lsrs	r5, r1, #31
 800245a:	0a5b      	lsrs	r3, r3, #9
 800245c:	0339      	lsls	r1, r7, #12
 800245e:	4313      	orrs	r3, r2
 8002460:	0a49      	lsrs	r1, r1, #9
 8002462:	00e2      	lsls	r2, r4, #3
 8002464:	0f44      	lsrs	r4, r0, #29
 8002466:	4321      	orrs	r1, r4
 8002468:	4cc2      	ldr	r4, [pc, #776]	; (8002774 <__aeabi_dsub+0x334>)
 800246a:	4691      	mov	r9, r2
 800246c:	4692      	mov	sl, r2
 800246e:	00c0      	lsls	r0, r0, #3
 8002470:	007a      	lsls	r2, r7, #1
 8002472:	4680      	mov	r8, r0
 8002474:	0d76      	lsrs	r6, r6, #21
 8002476:	0d52      	lsrs	r2, r2, #21
 8002478:	0fff      	lsrs	r7, r7, #31
 800247a:	42a2      	cmp	r2, r4
 800247c:	d100      	bne.n	8002480 <__aeabi_dsub+0x40>
 800247e:	e0b4      	b.n	80025ea <__aeabi_dsub+0x1aa>
 8002480:	2401      	movs	r4, #1
 8002482:	4067      	eors	r7, r4
 8002484:	46bb      	mov	fp, r7
 8002486:	42bd      	cmp	r5, r7
 8002488:	d100      	bne.n	800248c <__aeabi_dsub+0x4c>
 800248a:	e088      	b.n	800259e <__aeabi_dsub+0x15e>
 800248c:	1ab4      	subs	r4, r6, r2
 800248e:	46a4      	mov	ip, r4
 8002490:	2c00      	cmp	r4, #0
 8002492:	dc00      	bgt.n	8002496 <__aeabi_dsub+0x56>
 8002494:	e0b2      	b.n	80025fc <__aeabi_dsub+0x1bc>
 8002496:	2a00      	cmp	r2, #0
 8002498:	d100      	bne.n	800249c <__aeabi_dsub+0x5c>
 800249a:	e0c5      	b.n	8002628 <__aeabi_dsub+0x1e8>
 800249c:	4ab5      	ldr	r2, [pc, #724]	; (8002774 <__aeabi_dsub+0x334>)
 800249e:	4296      	cmp	r6, r2
 80024a0:	d100      	bne.n	80024a4 <__aeabi_dsub+0x64>
 80024a2:	e28b      	b.n	80029bc <__aeabi_dsub+0x57c>
 80024a4:	2280      	movs	r2, #128	; 0x80
 80024a6:	0412      	lsls	r2, r2, #16
 80024a8:	4311      	orrs	r1, r2
 80024aa:	4662      	mov	r2, ip
 80024ac:	2a38      	cmp	r2, #56	; 0x38
 80024ae:	dd00      	ble.n	80024b2 <__aeabi_dsub+0x72>
 80024b0:	e1a1      	b.n	80027f6 <__aeabi_dsub+0x3b6>
 80024b2:	2a1f      	cmp	r2, #31
 80024b4:	dd00      	ble.n	80024b8 <__aeabi_dsub+0x78>
 80024b6:	e216      	b.n	80028e6 <__aeabi_dsub+0x4a6>
 80024b8:	2720      	movs	r7, #32
 80024ba:	000c      	movs	r4, r1
 80024bc:	1abf      	subs	r7, r7, r2
 80024be:	40bc      	lsls	r4, r7
 80024c0:	0002      	movs	r2, r0
 80024c2:	46a0      	mov	r8, r4
 80024c4:	4664      	mov	r4, ip
 80024c6:	40b8      	lsls	r0, r7
 80024c8:	40e2      	lsrs	r2, r4
 80024ca:	4644      	mov	r4, r8
 80024cc:	4314      	orrs	r4, r2
 80024ce:	0002      	movs	r2, r0
 80024d0:	1e50      	subs	r0, r2, #1
 80024d2:	4182      	sbcs	r2, r0
 80024d4:	4660      	mov	r0, ip
 80024d6:	40c1      	lsrs	r1, r0
 80024d8:	4322      	orrs	r2, r4
 80024da:	1a5b      	subs	r3, r3, r1
 80024dc:	4649      	mov	r1, r9
 80024de:	1a8c      	subs	r4, r1, r2
 80024e0:	45a1      	cmp	r9, r4
 80024e2:	4192      	sbcs	r2, r2
 80024e4:	4252      	negs	r2, r2
 80024e6:	1a9b      	subs	r3, r3, r2
 80024e8:	4698      	mov	r8, r3
 80024ea:	4643      	mov	r3, r8
 80024ec:	021b      	lsls	r3, r3, #8
 80024ee:	d400      	bmi.n	80024f2 <__aeabi_dsub+0xb2>
 80024f0:	e117      	b.n	8002722 <__aeabi_dsub+0x2e2>
 80024f2:	4643      	mov	r3, r8
 80024f4:	025b      	lsls	r3, r3, #9
 80024f6:	0a5b      	lsrs	r3, r3, #9
 80024f8:	4698      	mov	r8, r3
 80024fa:	4643      	mov	r3, r8
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d100      	bne.n	8002502 <__aeabi_dsub+0xc2>
 8002500:	e16c      	b.n	80027dc <__aeabi_dsub+0x39c>
 8002502:	4640      	mov	r0, r8
 8002504:	f000 fc02 	bl	8002d0c <__clzsi2>
 8002508:	0002      	movs	r2, r0
 800250a:	3a08      	subs	r2, #8
 800250c:	2120      	movs	r1, #32
 800250e:	0020      	movs	r0, r4
 8002510:	4643      	mov	r3, r8
 8002512:	1a89      	subs	r1, r1, r2
 8002514:	4093      	lsls	r3, r2
 8002516:	40c8      	lsrs	r0, r1
 8002518:	4094      	lsls	r4, r2
 800251a:	4303      	orrs	r3, r0
 800251c:	4296      	cmp	r6, r2
 800251e:	dd00      	ble.n	8002522 <__aeabi_dsub+0xe2>
 8002520:	e157      	b.n	80027d2 <__aeabi_dsub+0x392>
 8002522:	1b96      	subs	r6, r2, r6
 8002524:	1c71      	adds	r1, r6, #1
 8002526:	291f      	cmp	r1, #31
 8002528:	dd00      	ble.n	800252c <__aeabi_dsub+0xec>
 800252a:	e1cb      	b.n	80028c4 <__aeabi_dsub+0x484>
 800252c:	2220      	movs	r2, #32
 800252e:	0018      	movs	r0, r3
 8002530:	0026      	movs	r6, r4
 8002532:	1a52      	subs	r2, r2, r1
 8002534:	4094      	lsls	r4, r2
 8002536:	4090      	lsls	r0, r2
 8002538:	40ce      	lsrs	r6, r1
 800253a:	40cb      	lsrs	r3, r1
 800253c:	1e62      	subs	r2, r4, #1
 800253e:	4194      	sbcs	r4, r2
 8002540:	4330      	orrs	r0, r6
 8002542:	4698      	mov	r8, r3
 8002544:	2600      	movs	r6, #0
 8002546:	4304      	orrs	r4, r0
 8002548:	0763      	lsls	r3, r4, #29
 800254a:	d009      	beq.n	8002560 <__aeabi_dsub+0x120>
 800254c:	230f      	movs	r3, #15
 800254e:	4023      	ands	r3, r4
 8002550:	2b04      	cmp	r3, #4
 8002552:	d005      	beq.n	8002560 <__aeabi_dsub+0x120>
 8002554:	1d23      	adds	r3, r4, #4
 8002556:	42a3      	cmp	r3, r4
 8002558:	41a4      	sbcs	r4, r4
 800255a:	4264      	negs	r4, r4
 800255c:	44a0      	add	r8, r4
 800255e:	001c      	movs	r4, r3
 8002560:	4643      	mov	r3, r8
 8002562:	021b      	lsls	r3, r3, #8
 8002564:	d400      	bmi.n	8002568 <__aeabi_dsub+0x128>
 8002566:	e0df      	b.n	8002728 <__aeabi_dsub+0x2e8>
 8002568:	4b82      	ldr	r3, [pc, #520]	; (8002774 <__aeabi_dsub+0x334>)
 800256a:	3601      	adds	r6, #1
 800256c:	429e      	cmp	r6, r3
 800256e:	d100      	bne.n	8002572 <__aeabi_dsub+0x132>
 8002570:	e0fb      	b.n	800276a <__aeabi_dsub+0x32a>
 8002572:	4642      	mov	r2, r8
 8002574:	4b80      	ldr	r3, [pc, #512]	; (8002778 <__aeabi_dsub+0x338>)
 8002576:	08e4      	lsrs	r4, r4, #3
 8002578:	401a      	ands	r2, r3
 800257a:	0013      	movs	r3, r2
 800257c:	0571      	lsls	r1, r6, #21
 800257e:	0752      	lsls	r2, r2, #29
 8002580:	025b      	lsls	r3, r3, #9
 8002582:	4322      	orrs	r2, r4
 8002584:	0b1b      	lsrs	r3, r3, #12
 8002586:	0d49      	lsrs	r1, r1, #21
 8002588:	0509      	lsls	r1, r1, #20
 800258a:	07ed      	lsls	r5, r5, #31
 800258c:	4319      	orrs	r1, r3
 800258e:	4329      	orrs	r1, r5
 8002590:	0010      	movs	r0, r2
 8002592:	bcf0      	pop	{r4, r5, r6, r7}
 8002594:	46bb      	mov	fp, r7
 8002596:	46b2      	mov	sl, r6
 8002598:	46a9      	mov	r9, r5
 800259a:	46a0      	mov	r8, r4
 800259c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800259e:	1ab4      	subs	r4, r6, r2
 80025a0:	46a4      	mov	ip, r4
 80025a2:	2c00      	cmp	r4, #0
 80025a4:	dd58      	ble.n	8002658 <__aeabi_dsub+0x218>
 80025a6:	2a00      	cmp	r2, #0
 80025a8:	d100      	bne.n	80025ac <__aeabi_dsub+0x16c>
 80025aa:	e09e      	b.n	80026ea <__aeabi_dsub+0x2aa>
 80025ac:	4a71      	ldr	r2, [pc, #452]	; (8002774 <__aeabi_dsub+0x334>)
 80025ae:	4296      	cmp	r6, r2
 80025b0:	d100      	bne.n	80025b4 <__aeabi_dsub+0x174>
 80025b2:	e13b      	b.n	800282c <__aeabi_dsub+0x3ec>
 80025b4:	2280      	movs	r2, #128	; 0x80
 80025b6:	0412      	lsls	r2, r2, #16
 80025b8:	4311      	orrs	r1, r2
 80025ba:	4662      	mov	r2, ip
 80025bc:	2a38      	cmp	r2, #56	; 0x38
 80025be:	dd00      	ble.n	80025c2 <__aeabi_dsub+0x182>
 80025c0:	e0c1      	b.n	8002746 <__aeabi_dsub+0x306>
 80025c2:	2a1f      	cmp	r2, #31
 80025c4:	dc00      	bgt.n	80025c8 <__aeabi_dsub+0x188>
 80025c6:	e1bb      	b.n	8002940 <__aeabi_dsub+0x500>
 80025c8:	000c      	movs	r4, r1
 80025ca:	3a20      	subs	r2, #32
 80025cc:	40d4      	lsrs	r4, r2
 80025ce:	0022      	movs	r2, r4
 80025d0:	4664      	mov	r4, ip
 80025d2:	2c20      	cmp	r4, #32
 80025d4:	d004      	beq.n	80025e0 <__aeabi_dsub+0x1a0>
 80025d6:	2740      	movs	r7, #64	; 0x40
 80025d8:	1b3f      	subs	r7, r7, r4
 80025da:	40b9      	lsls	r1, r7
 80025dc:	4308      	orrs	r0, r1
 80025de:	4680      	mov	r8, r0
 80025e0:	4644      	mov	r4, r8
 80025e2:	1e61      	subs	r1, r4, #1
 80025e4:	418c      	sbcs	r4, r1
 80025e6:	4314      	orrs	r4, r2
 80025e8:	e0b1      	b.n	800274e <__aeabi_dsub+0x30e>
 80025ea:	000c      	movs	r4, r1
 80025ec:	4304      	orrs	r4, r0
 80025ee:	d02a      	beq.n	8002646 <__aeabi_dsub+0x206>
 80025f0:	46bb      	mov	fp, r7
 80025f2:	42bd      	cmp	r5, r7
 80025f4:	d02d      	beq.n	8002652 <__aeabi_dsub+0x212>
 80025f6:	4c61      	ldr	r4, [pc, #388]	; (800277c <__aeabi_dsub+0x33c>)
 80025f8:	46a4      	mov	ip, r4
 80025fa:	44b4      	add	ip, r6
 80025fc:	4664      	mov	r4, ip
 80025fe:	2c00      	cmp	r4, #0
 8002600:	d05c      	beq.n	80026bc <__aeabi_dsub+0x27c>
 8002602:	1b94      	subs	r4, r2, r6
 8002604:	46a4      	mov	ip, r4
 8002606:	2e00      	cmp	r6, #0
 8002608:	d000      	beq.n	800260c <__aeabi_dsub+0x1cc>
 800260a:	e115      	b.n	8002838 <__aeabi_dsub+0x3f8>
 800260c:	464d      	mov	r5, r9
 800260e:	431d      	orrs	r5, r3
 8002610:	d100      	bne.n	8002614 <__aeabi_dsub+0x1d4>
 8002612:	e1c3      	b.n	800299c <__aeabi_dsub+0x55c>
 8002614:	1e65      	subs	r5, r4, #1
 8002616:	2c01      	cmp	r4, #1
 8002618:	d100      	bne.n	800261c <__aeabi_dsub+0x1dc>
 800261a:	e20c      	b.n	8002a36 <__aeabi_dsub+0x5f6>
 800261c:	4e55      	ldr	r6, [pc, #340]	; (8002774 <__aeabi_dsub+0x334>)
 800261e:	42b4      	cmp	r4, r6
 8002620:	d100      	bne.n	8002624 <__aeabi_dsub+0x1e4>
 8002622:	e1f8      	b.n	8002a16 <__aeabi_dsub+0x5d6>
 8002624:	46ac      	mov	ip, r5
 8002626:	e10e      	b.n	8002846 <__aeabi_dsub+0x406>
 8002628:	000a      	movs	r2, r1
 800262a:	4302      	orrs	r2, r0
 800262c:	d100      	bne.n	8002630 <__aeabi_dsub+0x1f0>
 800262e:	e136      	b.n	800289e <__aeabi_dsub+0x45e>
 8002630:	0022      	movs	r2, r4
 8002632:	3a01      	subs	r2, #1
 8002634:	2c01      	cmp	r4, #1
 8002636:	d100      	bne.n	800263a <__aeabi_dsub+0x1fa>
 8002638:	e1c6      	b.n	80029c8 <__aeabi_dsub+0x588>
 800263a:	4c4e      	ldr	r4, [pc, #312]	; (8002774 <__aeabi_dsub+0x334>)
 800263c:	45a4      	cmp	ip, r4
 800263e:	d100      	bne.n	8002642 <__aeabi_dsub+0x202>
 8002640:	e0f4      	b.n	800282c <__aeabi_dsub+0x3ec>
 8002642:	4694      	mov	ip, r2
 8002644:	e731      	b.n	80024aa <__aeabi_dsub+0x6a>
 8002646:	2401      	movs	r4, #1
 8002648:	4067      	eors	r7, r4
 800264a:	46bb      	mov	fp, r7
 800264c:	42bd      	cmp	r5, r7
 800264e:	d000      	beq.n	8002652 <__aeabi_dsub+0x212>
 8002650:	e71c      	b.n	800248c <__aeabi_dsub+0x4c>
 8002652:	4c4a      	ldr	r4, [pc, #296]	; (800277c <__aeabi_dsub+0x33c>)
 8002654:	46a4      	mov	ip, r4
 8002656:	44b4      	add	ip, r6
 8002658:	4664      	mov	r4, ip
 800265a:	2c00      	cmp	r4, #0
 800265c:	d100      	bne.n	8002660 <__aeabi_dsub+0x220>
 800265e:	e0cf      	b.n	8002800 <__aeabi_dsub+0x3c0>
 8002660:	1b94      	subs	r4, r2, r6
 8002662:	46a4      	mov	ip, r4
 8002664:	2e00      	cmp	r6, #0
 8002666:	d100      	bne.n	800266a <__aeabi_dsub+0x22a>
 8002668:	e15c      	b.n	8002924 <__aeabi_dsub+0x4e4>
 800266a:	4e42      	ldr	r6, [pc, #264]	; (8002774 <__aeabi_dsub+0x334>)
 800266c:	42b2      	cmp	r2, r6
 800266e:	d100      	bne.n	8002672 <__aeabi_dsub+0x232>
 8002670:	e1ec      	b.n	8002a4c <__aeabi_dsub+0x60c>
 8002672:	2680      	movs	r6, #128	; 0x80
 8002674:	0436      	lsls	r6, r6, #16
 8002676:	4333      	orrs	r3, r6
 8002678:	4664      	mov	r4, ip
 800267a:	2c38      	cmp	r4, #56	; 0x38
 800267c:	dd00      	ble.n	8002680 <__aeabi_dsub+0x240>
 800267e:	e1b3      	b.n	80029e8 <__aeabi_dsub+0x5a8>
 8002680:	2c1f      	cmp	r4, #31
 8002682:	dd00      	ble.n	8002686 <__aeabi_dsub+0x246>
 8002684:	e238      	b.n	8002af8 <__aeabi_dsub+0x6b8>
 8002686:	2620      	movs	r6, #32
 8002688:	1b36      	subs	r6, r6, r4
 800268a:	001c      	movs	r4, r3
 800268c:	40b4      	lsls	r4, r6
 800268e:	464f      	mov	r7, r9
 8002690:	46a0      	mov	r8, r4
 8002692:	4664      	mov	r4, ip
 8002694:	40e7      	lsrs	r7, r4
 8002696:	4644      	mov	r4, r8
 8002698:	433c      	orrs	r4, r7
 800269a:	464f      	mov	r7, r9
 800269c:	40b7      	lsls	r7, r6
 800269e:	003e      	movs	r6, r7
 80026a0:	1e77      	subs	r7, r6, #1
 80026a2:	41be      	sbcs	r6, r7
 80026a4:	4334      	orrs	r4, r6
 80026a6:	4666      	mov	r6, ip
 80026a8:	40f3      	lsrs	r3, r6
 80026aa:	18c9      	adds	r1, r1, r3
 80026ac:	1824      	adds	r4, r4, r0
 80026ae:	4284      	cmp	r4, r0
 80026b0:	419b      	sbcs	r3, r3
 80026b2:	425b      	negs	r3, r3
 80026b4:	4698      	mov	r8, r3
 80026b6:	0016      	movs	r6, r2
 80026b8:	4488      	add	r8, r1
 80026ba:	e04e      	b.n	800275a <__aeabi_dsub+0x31a>
 80026bc:	4a30      	ldr	r2, [pc, #192]	; (8002780 <__aeabi_dsub+0x340>)
 80026be:	1c74      	adds	r4, r6, #1
 80026c0:	4214      	tst	r4, r2
 80026c2:	d000      	beq.n	80026c6 <__aeabi_dsub+0x286>
 80026c4:	e0d6      	b.n	8002874 <__aeabi_dsub+0x434>
 80026c6:	464a      	mov	r2, r9
 80026c8:	431a      	orrs	r2, r3
 80026ca:	2e00      	cmp	r6, #0
 80026cc:	d000      	beq.n	80026d0 <__aeabi_dsub+0x290>
 80026ce:	e15b      	b.n	8002988 <__aeabi_dsub+0x548>
 80026d0:	2a00      	cmp	r2, #0
 80026d2:	d100      	bne.n	80026d6 <__aeabi_dsub+0x296>
 80026d4:	e1a5      	b.n	8002a22 <__aeabi_dsub+0x5e2>
 80026d6:	000a      	movs	r2, r1
 80026d8:	4302      	orrs	r2, r0
 80026da:	d000      	beq.n	80026de <__aeabi_dsub+0x29e>
 80026dc:	e1bb      	b.n	8002a56 <__aeabi_dsub+0x616>
 80026de:	464a      	mov	r2, r9
 80026e0:	0759      	lsls	r1, r3, #29
 80026e2:	08d2      	lsrs	r2, r2, #3
 80026e4:	430a      	orrs	r2, r1
 80026e6:	08db      	lsrs	r3, r3, #3
 80026e8:	e027      	b.n	800273a <__aeabi_dsub+0x2fa>
 80026ea:	000a      	movs	r2, r1
 80026ec:	4302      	orrs	r2, r0
 80026ee:	d100      	bne.n	80026f2 <__aeabi_dsub+0x2b2>
 80026f0:	e174      	b.n	80029dc <__aeabi_dsub+0x59c>
 80026f2:	0022      	movs	r2, r4
 80026f4:	3a01      	subs	r2, #1
 80026f6:	2c01      	cmp	r4, #1
 80026f8:	d005      	beq.n	8002706 <__aeabi_dsub+0x2c6>
 80026fa:	4c1e      	ldr	r4, [pc, #120]	; (8002774 <__aeabi_dsub+0x334>)
 80026fc:	45a4      	cmp	ip, r4
 80026fe:	d100      	bne.n	8002702 <__aeabi_dsub+0x2c2>
 8002700:	e094      	b.n	800282c <__aeabi_dsub+0x3ec>
 8002702:	4694      	mov	ip, r2
 8002704:	e759      	b.n	80025ba <__aeabi_dsub+0x17a>
 8002706:	4448      	add	r0, r9
 8002708:	4548      	cmp	r0, r9
 800270a:	4192      	sbcs	r2, r2
 800270c:	185b      	adds	r3, r3, r1
 800270e:	4698      	mov	r8, r3
 8002710:	0004      	movs	r4, r0
 8002712:	4252      	negs	r2, r2
 8002714:	4490      	add	r8, r2
 8002716:	4643      	mov	r3, r8
 8002718:	2602      	movs	r6, #2
 800271a:	021b      	lsls	r3, r3, #8
 800271c:	d500      	bpl.n	8002720 <__aeabi_dsub+0x2e0>
 800271e:	e0c4      	b.n	80028aa <__aeabi_dsub+0x46a>
 8002720:	3e01      	subs	r6, #1
 8002722:	0763      	lsls	r3, r4, #29
 8002724:	d000      	beq.n	8002728 <__aeabi_dsub+0x2e8>
 8002726:	e711      	b.n	800254c <__aeabi_dsub+0x10c>
 8002728:	4643      	mov	r3, r8
 800272a:	46b4      	mov	ip, r6
 800272c:	0759      	lsls	r1, r3, #29
 800272e:	08e2      	lsrs	r2, r4, #3
 8002730:	430a      	orrs	r2, r1
 8002732:	08db      	lsrs	r3, r3, #3
 8002734:	490f      	ldr	r1, [pc, #60]	; (8002774 <__aeabi_dsub+0x334>)
 8002736:	458c      	cmp	ip, r1
 8002738:	d040      	beq.n	80027bc <__aeabi_dsub+0x37c>
 800273a:	4661      	mov	r1, ip
 800273c:	031b      	lsls	r3, r3, #12
 800273e:	0549      	lsls	r1, r1, #21
 8002740:	0b1b      	lsrs	r3, r3, #12
 8002742:	0d49      	lsrs	r1, r1, #21
 8002744:	e720      	b.n	8002588 <__aeabi_dsub+0x148>
 8002746:	4301      	orrs	r1, r0
 8002748:	000c      	movs	r4, r1
 800274a:	1e61      	subs	r1, r4, #1
 800274c:	418c      	sbcs	r4, r1
 800274e:	444c      	add	r4, r9
 8002750:	454c      	cmp	r4, r9
 8002752:	4192      	sbcs	r2, r2
 8002754:	4252      	negs	r2, r2
 8002756:	4690      	mov	r8, r2
 8002758:	4498      	add	r8, r3
 800275a:	4643      	mov	r3, r8
 800275c:	021b      	lsls	r3, r3, #8
 800275e:	d5e0      	bpl.n	8002722 <__aeabi_dsub+0x2e2>
 8002760:	4b04      	ldr	r3, [pc, #16]	; (8002774 <__aeabi_dsub+0x334>)
 8002762:	3601      	adds	r6, #1
 8002764:	429e      	cmp	r6, r3
 8002766:	d000      	beq.n	800276a <__aeabi_dsub+0x32a>
 8002768:	e09f      	b.n	80028aa <__aeabi_dsub+0x46a>
 800276a:	0031      	movs	r1, r6
 800276c:	2300      	movs	r3, #0
 800276e:	2200      	movs	r2, #0
 8002770:	e70a      	b.n	8002588 <__aeabi_dsub+0x148>
 8002772:	46c0      	nop			; (mov r8, r8)
 8002774:	000007ff 	.word	0x000007ff
 8002778:	ff7fffff 	.word	0xff7fffff
 800277c:	fffff801 	.word	0xfffff801
 8002780:	000007fe 	.word	0x000007fe
 8002784:	2a00      	cmp	r2, #0
 8002786:	d100      	bne.n	800278a <__aeabi_dsub+0x34a>
 8002788:	e160      	b.n	8002a4c <__aeabi_dsub+0x60c>
 800278a:	000a      	movs	r2, r1
 800278c:	4302      	orrs	r2, r0
 800278e:	d04d      	beq.n	800282c <__aeabi_dsub+0x3ec>
 8002790:	464a      	mov	r2, r9
 8002792:	075c      	lsls	r4, r3, #29
 8002794:	08d2      	lsrs	r2, r2, #3
 8002796:	4322      	orrs	r2, r4
 8002798:	2480      	movs	r4, #128	; 0x80
 800279a:	08db      	lsrs	r3, r3, #3
 800279c:	0324      	lsls	r4, r4, #12
 800279e:	4223      	tst	r3, r4
 80027a0:	d007      	beq.n	80027b2 <__aeabi_dsub+0x372>
 80027a2:	08ce      	lsrs	r6, r1, #3
 80027a4:	4226      	tst	r6, r4
 80027a6:	d104      	bne.n	80027b2 <__aeabi_dsub+0x372>
 80027a8:	465d      	mov	r5, fp
 80027aa:	0033      	movs	r3, r6
 80027ac:	08c2      	lsrs	r2, r0, #3
 80027ae:	0749      	lsls	r1, r1, #29
 80027b0:	430a      	orrs	r2, r1
 80027b2:	0f51      	lsrs	r1, r2, #29
 80027b4:	00d2      	lsls	r2, r2, #3
 80027b6:	08d2      	lsrs	r2, r2, #3
 80027b8:	0749      	lsls	r1, r1, #29
 80027ba:	430a      	orrs	r2, r1
 80027bc:	0011      	movs	r1, r2
 80027be:	4319      	orrs	r1, r3
 80027c0:	d100      	bne.n	80027c4 <__aeabi_dsub+0x384>
 80027c2:	e1c8      	b.n	8002b56 <__aeabi_dsub+0x716>
 80027c4:	2180      	movs	r1, #128	; 0x80
 80027c6:	0309      	lsls	r1, r1, #12
 80027c8:	430b      	orrs	r3, r1
 80027ca:	031b      	lsls	r3, r3, #12
 80027cc:	49d5      	ldr	r1, [pc, #852]	; (8002b24 <__aeabi_dsub+0x6e4>)
 80027ce:	0b1b      	lsrs	r3, r3, #12
 80027d0:	e6da      	b.n	8002588 <__aeabi_dsub+0x148>
 80027d2:	49d5      	ldr	r1, [pc, #852]	; (8002b28 <__aeabi_dsub+0x6e8>)
 80027d4:	1ab6      	subs	r6, r6, r2
 80027d6:	400b      	ands	r3, r1
 80027d8:	4698      	mov	r8, r3
 80027da:	e6b5      	b.n	8002548 <__aeabi_dsub+0x108>
 80027dc:	0020      	movs	r0, r4
 80027de:	f000 fa95 	bl	8002d0c <__clzsi2>
 80027e2:	0002      	movs	r2, r0
 80027e4:	3218      	adds	r2, #24
 80027e6:	2a1f      	cmp	r2, #31
 80027e8:	dc00      	bgt.n	80027ec <__aeabi_dsub+0x3ac>
 80027ea:	e68f      	b.n	800250c <__aeabi_dsub+0xcc>
 80027ec:	0023      	movs	r3, r4
 80027ee:	3808      	subs	r0, #8
 80027f0:	4083      	lsls	r3, r0
 80027f2:	2400      	movs	r4, #0
 80027f4:	e692      	b.n	800251c <__aeabi_dsub+0xdc>
 80027f6:	4308      	orrs	r0, r1
 80027f8:	0002      	movs	r2, r0
 80027fa:	1e50      	subs	r0, r2, #1
 80027fc:	4182      	sbcs	r2, r0
 80027fe:	e66d      	b.n	80024dc <__aeabi_dsub+0x9c>
 8002800:	4cca      	ldr	r4, [pc, #808]	; (8002b2c <__aeabi_dsub+0x6ec>)
 8002802:	1c72      	adds	r2, r6, #1
 8002804:	4222      	tst	r2, r4
 8002806:	d000      	beq.n	800280a <__aeabi_dsub+0x3ca>
 8002808:	e0ad      	b.n	8002966 <__aeabi_dsub+0x526>
 800280a:	464a      	mov	r2, r9
 800280c:	431a      	orrs	r2, r3
 800280e:	2e00      	cmp	r6, #0
 8002810:	d1b8      	bne.n	8002784 <__aeabi_dsub+0x344>
 8002812:	2a00      	cmp	r2, #0
 8002814:	d100      	bne.n	8002818 <__aeabi_dsub+0x3d8>
 8002816:	e158      	b.n	8002aca <__aeabi_dsub+0x68a>
 8002818:	000a      	movs	r2, r1
 800281a:	4302      	orrs	r2, r0
 800281c:	d000      	beq.n	8002820 <__aeabi_dsub+0x3e0>
 800281e:	e159      	b.n	8002ad4 <__aeabi_dsub+0x694>
 8002820:	464a      	mov	r2, r9
 8002822:	0759      	lsls	r1, r3, #29
 8002824:	08d2      	lsrs	r2, r2, #3
 8002826:	430a      	orrs	r2, r1
 8002828:	08db      	lsrs	r3, r3, #3
 800282a:	e786      	b.n	800273a <__aeabi_dsub+0x2fa>
 800282c:	464a      	mov	r2, r9
 800282e:	0759      	lsls	r1, r3, #29
 8002830:	08d2      	lsrs	r2, r2, #3
 8002832:	430a      	orrs	r2, r1
 8002834:	08db      	lsrs	r3, r3, #3
 8002836:	e7c1      	b.n	80027bc <__aeabi_dsub+0x37c>
 8002838:	4dba      	ldr	r5, [pc, #744]	; (8002b24 <__aeabi_dsub+0x6e4>)
 800283a:	42aa      	cmp	r2, r5
 800283c:	d100      	bne.n	8002840 <__aeabi_dsub+0x400>
 800283e:	e11e      	b.n	8002a7e <__aeabi_dsub+0x63e>
 8002840:	2580      	movs	r5, #128	; 0x80
 8002842:	042d      	lsls	r5, r5, #16
 8002844:	432b      	orrs	r3, r5
 8002846:	4664      	mov	r4, ip
 8002848:	2c38      	cmp	r4, #56	; 0x38
 800284a:	dc5d      	bgt.n	8002908 <__aeabi_dsub+0x4c8>
 800284c:	2c1f      	cmp	r4, #31
 800284e:	dd00      	ble.n	8002852 <__aeabi_dsub+0x412>
 8002850:	e0d0      	b.n	80029f4 <__aeabi_dsub+0x5b4>
 8002852:	2520      	movs	r5, #32
 8002854:	4667      	mov	r7, ip
 8002856:	1b2d      	subs	r5, r5, r4
 8002858:	464e      	mov	r6, r9
 800285a:	001c      	movs	r4, r3
 800285c:	40fe      	lsrs	r6, r7
 800285e:	40ac      	lsls	r4, r5
 8002860:	4334      	orrs	r4, r6
 8002862:	464e      	mov	r6, r9
 8002864:	40ae      	lsls	r6, r5
 8002866:	0035      	movs	r5, r6
 8002868:	40fb      	lsrs	r3, r7
 800286a:	1e6e      	subs	r6, r5, #1
 800286c:	41b5      	sbcs	r5, r6
 800286e:	1ac9      	subs	r1, r1, r3
 8002870:	432c      	orrs	r4, r5
 8002872:	e04e      	b.n	8002912 <__aeabi_dsub+0x4d2>
 8002874:	464a      	mov	r2, r9
 8002876:	1a14      	subs	r4, r2, r0
 8002878:	45a1      	cmp	r9, r4
 800287a:	4192      	sbcs	r2, r2
 800287c:	4252      	negs	r2, r2
 800287e:	4690      	mov	r8, r2
 8002880:	1a5f      	subs	r7, r3, r1
 8002882:	003a      	movs	r2, r7
 8002884:	4647      	mov	r7, r8
 8002886:	1bd2      	subs	r2, r2, r7
 8002888:	4690      	mov	r8, r2
 800288a:	0212      	lsls	r2, r2, #8
 800288c:	d500      	bpl.n	8002890 <__aeabi_dsub+0x450>
 800288e:	e08b      	b.n	80029a8 <__aeabi_dsub+0x568>
 8002890:	4642      	mov	r2, r8
 8002892:	4322      	orrs	r2, r4
 8002894:	d000      	beq.n	8002898 <__aeabi_dsub+0x458>
 8002896:	e630      	b.n	80024fa <__aeabi_dsub+0xba>
 8002898:	2300      	movs	r3, #0
 800289a:	2500      	movs	r5, #0
 800289c:	e74d      	b.n	800273a <__aeabi_dsub+0x2fa>
 800289e:	464a      	mov	r2, r9
 80028a0:	0759      	lsls	r1, r3, #29
 80028a2:	08d2      	lsrs	r2, r2, #3
 80028a4:	430a      	orrs	r2, r1
 80028a6:	08db      	lsrs	r3, r3, #3
 80028a8:	e744      	b.n	8002734 <__aeabi_dsub+0x2f4>
 80028aa:	4642      	mov	r2, r8
 80028ac:	4b9e      	ldr	r3, [pc, #632]	; (8002b28 <__aeabi_dsub+0x6e8>)
 80028ae:	0861      	lsrs	r1, r4, #1
 80028b0:	401a      	ands	r2, r3
 80028b2:	0013      	movs	r3, r2
 80028b4:	2201      	movs	r2, #1
 80028b6:	4014      	ands	r4, r2
 80028b8:	430c      	orrs	r4, r1
 80028ba:	07da      	lsls	r2, r3, #31
 80028bc:	085b      	lsrs	r3, r3, #1
 80028be:	4698      	mov	r8, r3
 80028c0:	4314      	orrs	r4, r2
 80028c2:	e641      	b.n	8002548 <__aeabi_dsub+0x108>
 80028c4:	001a      	movs	r2, r3
 80028c6:	3e1f      	subs	r6, #31
 80028c8:	40f2      	lsrs	r2, r6
 80028ca:	0016      	movs	r6, r2
 80028cc:	2920      	cmp	r1, #32
 80028ce:	d003      	beq.n	80028d8 <__aeabi_dsub+0x498>
 80028d0:	2240      	movs	r2, #64	; 0x40
 80028d2:	1a51      	subs	r1, r2, r1
 80028d4:	408b      	lsls	r3, r1
 80028d6:	431c      	orrs	r4, r3
 80028d8:	1e62      	subs	r2, r4, #1
 80028da:	4194      	sbcs	r4, r2
 80028dc:	2300      	movs	r3, #0
 80028de:	4334      	orrs	r4, r6
 80028e0:	4698      	mov	r8, r3
 80028e2:	2600      	movs	r6, #0
 80028e4:	e71d      	b.n	8002722 <__aeabi_dsub+0x2e2>
 80028e6:	000c      	movs	r4, r1
 80028e8:	3a20      	subs	r2, #32
 80028ea:	40d4      	lsrs	r4, r2
 80028ec:	0022      	movs	r2, r4
 80028ee:	4664      	mov	r4, ip
 80028f0:	2c20      	cmp	r4, #32
 80028f2:	d004      	beq.n	80028fe <__aeabi_dsub+0x4be>
 80028f4:	2740      	movs	r7, #64	; 0x40
 80028f6:	1b3f      	subs	r7, r7, r4
 80028f8:	40b9      	lsls	r1, r7
 80028fa:	4308      	orrs	r0, r1
 80028fc:	4680      	mov	r8, r0
 80028fe:	4644      	mov	r4, r8
 8002900:	1e61      	subs	r1, r4, #1
 8002902:	418c      	sbcs	r4, r1
 8002904:	4322      	orrs	r2, r4
 8002906:	e5e9      	b.n	80024dc <__aeabi_dsub+0x9c>
 8002908:	464c      	mov	r4, r9
 800290a:	4323      	orrs	r3, r4
 800290c:	001c      	movs	r4, r3
 800290e:	1e63      	subs	r3, r4, #1
 8002910:	419c      	sbcs	r4, r3
 8002912:	1b04      	subs	r4, r0, r4
 8002914:	42a0      	cmp	r0, r4
 8002916:	419b      	sbcs	r3, r3
 8002918:	425b      	negs	r3, r3
 800291a:	1acb      	subs	r3, r1, r3
 800291c:	4698      	mov	r8, r3
 800291e:	465d      	mov	r5, fp
 8002920:	0016      	movs	r6, r2
 8002922:	e5e2      	b.n	80024ea <__aeabi_dsub+0xaa>
 8002924:	464e      	mov	r6, r9
 8002926:	431e      	orrs	r6, r3
 8002928:	d100      	bne.n	800292c <__aeabi_dsub+0x4ec>
 800292a:	e0ae      	b.n	8002a8a <__aeabi_dsub+0x64a>
 800292c:	1e66      	subs	r6, r4, #1
 800292e:	2c01      	cmp	r4, #1
 8002930:	d100      	bne.n	8002934 <__aeabi_dsub+0x4f4>
 8002932:	e0fd      	b.n	8002b30 <__aeabi_dsub+0x6f0>
 8002934:	4f7b      	ldr	r7, [pc, #492]	; (8002b24 <__aeabi_dsub+0x6e4>)
 8002936:	42bc      	cmp	r4, r7
 8002938:	d100      	bne.n	800293c <__aeabi_dsub+0x4fc>
 800293a:	e107      	b.n	8002b4c <__aeabi_dsub+0x70c>
 800293c:	46b4      	mov	ip, r6
 800293e:	e69b      	b.n	8002678 <__aeabi_dsub+0x238>
 8002940:	4664      	mov	r4, ip
 8002942:	2220      	movs	r2, #32
 8002944:	1b12      	subs	r2, r2, r4
 8002946:	000c      	movs	r4, r1
 8002948:	4094      	lsls	r4, r2
 800294a:	0007      	movs	r7, r0
 800294c:	4090      	lsls	r0, r2
 800294e:	46a0      	mov	r8, r4
 8002950:	4664      	mov	r4, ip
 8002952:	1e42      	subs	r2, r0, #1
 8002954:	4190      	sbcs	r0, r2
 8002956:	4662      	mov	r2, ip
 8002958:	40e7      	lsrs	r7, r4
 800295a:	4644      	mov	r4, r8
 800295c:	40d1      	lsrs	r1, r2
 800295e:	433c      	orrs	r4, r7
 8002960:	4304      	orrs	r4, r0
 8002962:	185b      	adds	r3, r3, r1
 8002964:	e6f3      	b.n	800274e <__aeabi_dsub+0x30e>
 8002966:	4c6f      	ldr	r4, [pc, #444]	; (8002b24 <__aeabi_dsub+0x6e4>)
 8002968:	42a2      	cmp	r2, r4
 800296a:	d100      	bne.n	800296e <__aeabi_dsub+0x52e>
 800296c:	e0d5      	b.n	8002b1a <__aeabi_dsub+0x6da>
 800296e:	4448      	add	r0, r9
 8002970:	185b      	adds	r3, r3, r1
 8002972:	4548      	cmp	r0, r9
 8002974:	4189      	sbcs	r1, r1
 8002976:	4249      	negs	r1, r1
 8002978:	185b      	adds	r3, r3, r1
 800297a:	07dc      	lsls	r4, r3, #31
 800297c:	0840      	lsrs	r0, r0, #1
 800297e:	085b      	lsrs	r3, r3, #1
 8002980:	4698      	mov	r8, r3
 8002982:	0016      	movs	r6, r2
 8002984:	4304      	orrs	r4, r0
 8002986:	e6cc      	b.n	8002722 <__aeabi_dsub+0x2e2>
 8002988:	2a00      	cmp	r2, #0
 800298a:	d000      	beq.n	800298e <__aeabi_dsub+0x54e>
 800298c:	e082      	b.n	8002a94 <__aeabi_dsub+0x654>
 800298e:	000a      	movs	r2, r1
 8002990:	4302      	orrs	r2, r0
 8002992:	d140      	bne.n	8002a16 <__aeabi_dsub+0x5d6>
 8002994:	2380      	movs	r3, #128	; 0x80
 8002996:	2500      	movs	r5, #0
 8002998:	031b      	lsls	r3, r3, #12
 800299a:	e713      	b.n	80027c4 <__aeabi_dsub+0x384>
 800299c:	074b      	lsls	r3, r1, #29
 800299e:	08c2      	lsrs	r2, r0, #3
 80029a0:	431a      	orrs	r2, r3
 80029a2:	465d      	mov	r5, fp
 80029a4:	08cb      	lsrs	r3, r1, #3
 80029a6:	e6c5      	b.n	8002734 <__aeabi_dsub+0x2f4>
 80029a8:	464a      	mov	r2, r9
 80029aa:	1a84      	subs	r4, r0, r2
 80029ac:	42a0      	cmp	r0, r4
 80029ae:	4192      	sbcs	r2, r2
 80029b0:	1acb      	subs	r3, r1, r3
 80029b2:	4252      	negs	r2, r2
 80029b4:	1a9b      	subs	r3, r3, r2
 80029b6:	4698      	mov	r8, r3
 80029b8:	465d      	mov	r5, fp
 80029ba:	e59e      	b.n	80024fa <__aeabi_dsub+0xba>
 80029bc:	464a      	mov	r2, r9
 80029be:	0759      	lsls	r1, r3, #29
 80029c0:	08d2      	lsrs	r2, r2, #3
 80029c2:	430a      	orrs	r2, r1
 80029c4:	08db      	lsrs	r3, r3, #3
 80029c6:	e6f9      	b.n	80027bc <__aeabi_dsub+0x37c>
 80029c8:	464a      	mov	r2, r9
 80029ca:	1a14      	subs	r4, r2, r0
 80029cc:	45a1      	cmp	r9, r4
 80029ce:	4192      	sbcs	r2, r2
 80029d0:	1a5b      	subs	r3, r3, r1
 80029d2:	4252      	negs	r2, r2
 80029d4:	1a9b      	subs	r3, r3, r2
 80029d6:	4698      	mov	r8, r3
 80029d8:	2601      	movs	r6, #1
 80029da:	e586      	b.n	80024ea <__aeabi_dsub+0xaa>
 80029dc:	464a      	mov	r2, r9
 80029de:	0759      	lsls	r1, r3, #29
 80029e0:	08d2      	lsrs	r2, r2, #3
 80029e2:	430a      	orrs	r2, r1
 80029e4:	08db      	lsrs	r3, r3, #3
 80029e6:	e6a5      	b.n	8002734 <__aeabi_dsub+0x2f4>
 80029e8:	464c      	mov	r4, r9
 80029ea:	4323      	orrs	r3, r4
 80029ec:	001c      	movs	r4, r3
 80029ee:	1e63      	subs	r3, r4, #1
 80029f0:	419c      	sbcs	r4, r3
 80029f2:	e65b      	b.n	80026ac <__aeabi_dsub+0x26c>
 80029f4:	4665      	mov	r5, ip
 80029f6:	001e      	movs	r6, r3
 80029f8:	3d20      	subs	r5, #32
 80029fa:	40ee      	lsrs	r6, r5
 80029fc:	2c20      	cmp	r4, #32
 80029fe:	d005      	beq.n	8002a0c <__aeabi_dsub+0x5cc>
 8002a00:	2540      	movs	r5, #64	; 0x40
 8002a02:	1b2d      	subs	r5, r5, r4
 8002a04:	40ab      	lsls	r3, r5
 8002a06:	464c      	mov	r4, r9
 8002a08:	431c      	orrs	r4, r3
 8002a0a:	46a2      	mov	sl, r4
 8002a0c:	4654      	mov	r4, sl
 8002a0e:	1e63      	subs	r3, r4, #1
 8002a10:	419c      	sbcs	r4, r3
 8002a12:	4334      	orrs	r4, r6
 8002a14:	e77d      	b.n	8002912 <__aeabi_dsub+0x4d2>
 8002a16:	074b      	lsls	r3, r1, #29
 8002a18:	08c2      	lsrs	r2, r0, #3
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	465d      	mov	r5, fp
 8002a1e:	08cb      	lsrs	r3, r1, #3
 8002a20:	e6cc      	b.n	80027bc <__aeabi_dsub+0x37c>
 8002a22:	000a      	movs	r2, r1
 8002a24:	4302      	orrs	r2, r0
 8002a26:	d100      	bne.n	8002a2a <__aeabi_dsub+0x5ea>
 8002a28:	e736      	b.n	8002898 <__aeabi_dsub+0x458>
 8002a2a:	074b      	lsls	r3, r1, #29
 8002a2c:	08c2      	lsrs	r2, r0, #3
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	465d      	mov	r5, fp
 8002a32:	08cb      	lsrs	r3, r1, #3
 8002a34:	e681      	b.n	800273a <__aeabi_dsub+0x2fa>
 8002a36:	464a      	mov	r2, r9
 8002a38:	1a84      	subs	r4, r0, r2
 8002a3a:	42a0      	cmp	r0, r4
 8002a3c:	4192      	sbcs	r2, r2
 8002a3e:	1acb      	subs	r3, r1, r3
 8002a40:	4252      	negs	r2, r2
 8002a42:	1a9b      	subs	r3, r3, r2
 8002a44:	4698      	mov	r8, r3
 8002a46:	465d      	mov	r5, fp
 8002a48:	2601      	movs	r6, #1
 8002a4a:	e54e      	b.n	80024ea <__aeabi_dsub+0xaa>
 8002a4c:	074b      	lsls	r3, r1, #29
 8002a4e:	08c2      	lsrs	r2, r0, #3
 8002a50:	431a      	orrs	r2, r3
 8002a52:	08cb      	lsrs	r3, r1, #3
 8002a54:	e6b2      	b.n	80027bc <__aeabi_dsub+0x37c>
 8002a56:	464a      	mov	r2, r9
 8002a58:	1a14      	subs	r4, r2, r0
 8002a5a:	45a1      	cmp	r9, r4
 8002a5c:	4192      	sbcs	r2, r2
 8002a5e:	1a5f      	subs	r7, r3, r1
 8002a60:	4252      	negs	r2, r2
 8002a62:	1aba      	subs	r2, r7, r2
 8002a64:	4690      	mov	r8, r2
 8002a66:	0212      	lsls	r2, r2, #8
 8002a68:	d56b      	bpl.n	8002b42 <__aeabi_dsub+0x702>
 8002a6a:	464a      	mov	r2, r9
 8002a6c:	1a84      	subs	r4, r0, r2
 8002a6e:	42a0      	cmp	r0, r4
 8002a70:	4192      	sbcs	r2, r2
 8002a72:	1acb      	subs	r3, r1, r3
 8002a74:	4252      	negs	r2, r2
 8002a76:	1a9b      	subs	r3, r3, r2
 8002a78:	4698      	mov	r8, r3
 8002a7a:	465d      	mov	r5, fp
 8002a7c:	e564      	b.n	8002548 <__aeabi_dsub+0x108>
 8002a7e:	074b      	lsls	r3, r1, #29
 8002a80:	08c2      	lsrs	r2, r0, #3
 8002a82:	431a      	orrs	r2, r3
 8002a84:	465d      	mov	r5, fp
 8002a86:	08cb      	lsrs	r3, r1, #3
 8002a88:	e698      	b.n	80027bc <__aeabi_dsub+0x37c>
 8002a8a:	074b      	lsls	r3, r1, #29
 8002a8c:	08c2      	lsrs	r2, r0, #3
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	08cb      	lsrs	r3, r1, #3
 8002a92:	e64f      	b.n	8002734 <__aeabi_dsub+0x2f4>
 8002a94:	000a      	movs	r2, r1
 8002a96:	4302      	orrs	r2, r0
 8002a98:	d090      	beq.n	80029bc <__aeabi_dsub+0x57c>
 8002a9a:	464a      	mov	r2, r9
 8002a9c:	075c      	lsls	r4, r3, #29
 8002a9e:	08d2      	lsrs	r2, r2, #3
 8002aa0:	4314      	orrs	r4, r2
 8002aa2:	2280      	movs	r2, #128	; 0x80
 8002aa4:	08db      	lsrs	r3, r3, #3
 8002aa6:	0312      	lsls	r2, r2, #12
 8002aa8:	4213      	tst	r3, r2
 8002aaa:	d008      	beq.n	8002abe <__aeabi_dsub+0x67e>
 8002aac:	08ce      	lsrs	r6, r1, #3
 8002aae:	4216      	tst	r6, r2
 8002ab0:	d105      	bne.n	8002abe <__aeabi_dsub+0x67e>
 8002ab2:	08c0      	lsrs	r0, r0, #3
 8002ab4:	0749      	lsls	r1, r1, #29
 8002ab6:	4308      	orrs	r0, r1
 8002ab8:	0004      	movs	r4, r0
 8002aba:	465d      	mov	r5, fp
 8002abc:	0033      	movs	r3, r6
 8002abe:	0f61      	lsrs	r1, r4, #29
 8002ac0:	00e2      	lsls	r2, r4, #3
 8002ac2:	0749      	lsls	r1, r1, #29
 8002ac4:	08d2      	lsrs	r2, r2, #3
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	e678      	b.n	80027bc <__aeabi_dsub+0x37c>
 8002aca:	074b      	lsls	r3, r1, #29
 8002acc:	08c2      	lsrs	r2, r0, #3
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	08cb      	lsrs	r3, r1, #3
 8002ad2:	e632      	b.n	800273a <__aeabi_dsub+0x2fa>
 8002ad4:	4448      	add	r0, r9
 8002ad6:	185b      	adds	r3, r3, r1
 8002ad8:	4548      	cmp	r0, r9
 8002ada:	4192      	sbcs	r2, r2
 8002adc:	4698      	mov	r8, r3
 8002ade:	4252      	negs	r2, r2
 8002ae0:	4490      	add	r8, r2
 8002ae2:	4643      	mov	r3, r8
 8002ae4:	0004      	movs	r4, r0
 8002ae6:	021b      	lsls	r3, r3, #8
 8002ae8:	d400      	bmi.n	8002aec <__aeabi_dsub+0x6ac>
 8002aea:	e61a      	b.n	8002722 <__aeabi_dsub+0x2e2>
 8002aec:	4642      	mov	r2, r8
 8002aee:	4b0e      	ldr	r3, [pc, #56]	; (8002b28 <__aeabi_dsub+0x6e8>)
 8002af0:	2601      	movs	r6, #1
 8002af2:	401a      	ands	r2, r3
 8002af4:	4690      	mov	r8, r2
 8002af6:	e614      	b.n	8002722 <__aeabi_dsub+0x2e2>
 8002af8:	4666      	mov	r6, ip
 8002afa:	001f      	movs	r7, r3
 8002afc:	3e20      	subs	r6, #32
 8002afe:	40f7      	lsrs	r7, r6
 8002b00:	2c20      	cmp	r4, #32
 8002b02:	d005      	beq.n	8002b10 <__aeabi_dsub+0x6d0>
 8002b04:	2640      	movs	r6, #64	; 0x40
 8002b06:	1b36      	subs	r6, r6, r4
 8002b08:	40b3      	lsls	r3, r6
 8002b0a:	464c      	mov	r4, r9
 8002b0c:	431c      	orrs	r4, r3
 8002b0e:	46a2      	mov	sl, r4
 8002b10:	4654      	mov	r4, sl
 8002b12:	1e63      	subs	r3, r4, #1
 8002b14:	419c      	sbcs	r4, r3
 8002b16:	433c      	orrs	r4, r7
 8002b18:	e5c8      	b.n	80026ac <__aeabi_dsub+0x26c>
 8002b1a:	0011      	movs	r1, r2
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	2200      	movs	r2, #0
 8002b20:	e532      	b.n	8002588 <__aeabi_dsub+0x148>
 8002b22:	46c0      	nop			; (mov r8, r8)
 8002b24:	000007ff 	.word	0x000007ff
 8002b28:	ff7fffff 	.word	0xff7fffff
 8002b2c:	000007fe 	.word	0x000007fe
 8002b30:	464a      	mov	r2, r9
 8002b32:	1814      	adds	r4, r2, r0
 8002b34:	4284      	cmp	r4, r0
 8002b36:	4192      	sbcs	r2, r2
 8002b38:	185b      	adds	r3, r3, r1
 8002b3a:	4698      	mov	r8, r3
 8002b3c:	4252      	negs	r2, r2
 8002b3e:	4490      	add	r8, r2
 8002b40:	e5e9      	b.n	8002716 <__aeabi_dsub+0x2d6>
 8002b42:	4642      	mov	r2, r8
 8002b44:	4322      	orrs	r2, r4
 8002b46:	d100      	bne.n	8002b4a <__aeabi_dsub+0x70a>
 8002b48:	e6a6      	b.n	8002898 <__aeabi_dsub+0x458>
 8002b4a:	e5ea      	b.n	8002722 <__aeabi_dsub+0x2e2>
 8002b4c:	074b      	lsls	r3, r1, #29
 8002b4e:	08c2      	lsrs	r2, r0, #3
 8002b50:	431a      	orrs	r2, r3
 8002b52:	08cb      	lsrs	r3, r1, #3
 8002b54:	e632      	b.n	80027bc <__aeabi_dsub+0x37c>
 8002b56:	2200      	movs	r2, #0
 8002b58:	4901      	ldr	r1, [pc, #4]	; (8002b60 <__aeabi_dsub+0x720>)
 8002b5a:	0013      	movs	r3, r2
 8002b5c:	e514      	b.n	8002588 <__aeabi_dsub+0x148>
 8002b5e:	46c0      	nop			; (mov r8, r8)
 8002b60:	000007ff 	.word	0x000007ff

08002b64 <__aeabi_d2iz>:
 8002b64:	000a      	movs	r2, r1
 8002b66:	b530      	push	{r4, r5, lr}
 8002b68:	4c13      	ldr	r4, [pc, #76]	; (8002bb8 <__aeabi_d2iz+0x54>)
 8002b6a:	0053      	lsls	r3, r2, #1
 8002b6c:	0309      	lsls	r1, r1, #12
 8002b6e:	0005      	movs	r5, r0
 8002b70:	0b09      	lsrs	r1, r1, #12
 8002b72:	2000      	movs	r0, #0
 8002b74:	0d5b      	lsrs	r3, r3, #21
 8002b76:	0fd2      	lsrs	r2, r2, #31
 8002b78:	42a3      	cmp	r3, r4
 8002b7a:	dd04      	ble.n	8002b86 <__aeabi_d2iz+0x22>
 8002b7c:	480f      	ldr	r0, [pc, #60]	; (8002bbc <__aeabi_d2iz+0x58>)
 8002b7e:	4283      	cmp	r3, r0
 8002b80:	dd02      	ble.n	8002b88 <__aeabi_d2iz+0x24>
 8002b82:	4b0f      	ldr	r3, [pc, #60]	; (8002bc0 <__aeabi_d2iz+0x5c>)
 8002b84:	18d0      	adds	r0, r2, r3
 8002b86:	bd30      	pop	{r4, r5, pc}
 8002b88:	2080      	movs	r0, #128	; 0x80
 8002b8a:	0340      	lsls	r0, r0, #13
 8002b8c:	4301      	orrs	r1, r0
 8002b8e:	480d      	ldr	r0, [pc, #52]	; (8002bc4 <__aeabi_d2iz+0x60>)
 8002b90:	1ac0      	subs	r0, r0, r3
 8002b92:	281f      	cmp	r0, #31
 8002b94:	dd08      	ble.n	8002ba8 <__aeabi_d2iz+0x44>
 8002b96:	480c      	ldr	r0, [pc, #48]	; (8002bc8 <__aeabi_d2iz+0x64>)
 8002b98:	1ac3      	subs	r3, r0, r3
 8002b9a:	40d9      	lsrs	r1, r3
 8002b9c:	000b      	movs	r3, r1
 8002b9e:	4258      	negs	r0, r3
 8002ba0:	2a00      	cmp	r2, #0
 8002ba2:	d1f0      	bne.n	8002b86 <__aeabi_d2iz+0x22>
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	e7ee      	b.n	8002b86 <__aeabi_d2iz+0x22>
 8002ba8:	4c08      	ldr	r4, [pc, #32]	; (8002bcc <__aeabi_d2iz+0x68>)
 8002baa:	40c5      	lsrs	r5, r0
 8002bac:	46a4      	mov	ip, r4
 8002bae:	4463      	add	r3, ip
 8002bb0:	4099      	lsls	r1, r3
 8002bb2:	000b      	movs	r3, r1
 8002bb4:	432b      	orrs	r3, r5
 8002bb6:	e7f2      	b.n	8002b9e <__aeabi_d2iz+0x3a>
 8002bb8:	000003fe 	.word	0x000003fe
 8002bbc:	0000041d 	.word	0x0000041d
 8002bc0:	7fffffff 	.word	0x7fffffff
 8002bc4:	00000433 	.word	0x00000433
 8002bc8:	00000413 	.word	0x00000413
 8002bcc:	fffffbed 	.word	0xfffffbed

08002bd0 <__aeabi_i2d>:
 8002bd0:	b570      	push	{r4, r5, r6, lr}
 8002bd2:	2800      	cmp	r0, #0
 8002bd4:	d016      	beq.n	8002c04 <__aeabi_i2d+0x34>
 8002bd6:	17c3      	asrs	r3, r0, #31
 8002bd8:	18c5      	adds	r5, r0, r3
 8002bda:	405d      	eors	r5, r3
 8002bdc:	0fc4      	lsrs	r4, r0, #31
 8002bde:	0028      	movs	r0, r5
 8002be0:	f000 f894 	bl	8002d0c <__clzsi2>
 8002be4:	4a11      	ldr	r2, [pc, #68]	; (8002c2c <__aeabi_i2d+0x5c>)
 8002be6:	1a12      	subs	r2, r2, r0
 8002be8:	280a      	cmp	r0, #10
 8002bea:	dc16      	bgt.n	8002c1a <__aeabi_i2d+0x4a>
 8002bec:	0003      	movs	r3, r0
 8002bee:	002e      	movs	r6, r5
 8002bf0:	3315      	adds	r3, #21
 8002bf2:	409e      	lsls	r6, r3
 8002bf4:	230b      	movs	r3, #11
 8002bf6:	1a18      	subs	r0, r3, r0
 8002bf8:	40c5      	lsrs	r5, r0
 8002bfa:	0553      	lsls	r3, r2, #21
 8002bfc:	032d      	lsls	r5, r5, #12
 8002bfe:	0b2d      	lsrs	r5, r5, #12
 8002c00:	0d5b      	lsrs	r3, r3, #21
 8002c02:	e003      	b.n	8002c0c <__aeabi_i2d+0x3c>
 8002c04:	2400      	movs	r4, #0
 8002c06:	2300      	movs	r3, #0
 8002c08:	2500      	movs	r5, #0
 8002c0a:	2600      	movs	r6, #0
 8002c0c:	051b      	lsls	r3, r3, #20
 8002c0e:	432b      	orrs	r3, r5
 8002c10:	07e4      	lsls	r4, r4, #31
 8002c12:	4323      	orrs	r3, r4
 8002c14:	0030      	movs	r0, r6
 8002c16:	0019      	movs	r1, r3
 8002c18:	bd70      	pop	{r4, r5, r6, pc}
 8002c1a:	380b      	subs	r0, #11
 8002c1c:	4085      	lsls	r5, r0
 8002c1e:	0553      	lsls	r3, r2, #21
 8002c20:	032d      	lsls	r5, r5, #12
 8002c22:	2600      	movs	r6, #0
 8002c24:	0b2d      	lsrs	r5, r5, #12
 8002c26:	0d5b      	lsrs	r3, r3, #21
 8002c28:	e7f0      	b.n	8002c0c <__aeabi_i2d+0x3c>
 8002c2a:	46c0      	nop			; (mov r8, r8)
 8002c2c:	0000041e 	.word	0x0000041e

08002c30 <__aeabi_ui2d>:
 8002c30:	b510      	push	{r4, lr}
 8002c32:	1e04      	subs	r4, r0, #0
 8002c34:	d010      	beq.n	8002c58 <__aeabi_ui2d+0x28>
 8002c36:	f000 f869 	bl	8002d0c <__clzsi2>
 8002c3a:	4b0f      	ldr	r3, [pc, #60]	; (8002c78 <__aeabi_ui2d+0x48>)
 8002c3c:	1a1b      	subs	r3, r3, r0
 8002c3e:	280a      	cmp	r0, #10
 8002c40:	dc11      	bgt.n	8002c66 <__aeabi_ui2d+0x36>
 8002c42:	220b      	movs	r2, #11
 8002c44:	0021      	movs	r1, r4
 8002c46:	1a12      	subs	r2, r2, r0
 8002c48:	40d1      	lsrs	r1, r2
 8002c4a:	3015      	adds	r0, #21
 8002c4c:	030a      	lsls	r2, r1, #12
 8002c4e:	055b      	lsls	r3, r3, #21
 8002c50:	4084      	lsls	r4, r0
 8002c52:	0b12      	lsrs	r2, r2, #12
 8002c54:	0d5b      	lsrs	r3, r3, #21
 8002c56:	e001      	b.n	8002c5c <__aeabi_ui2d+0x2c>
 8002c58:	2300      	movs	r3, #0
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	051b      	lsls	r3, r3, #20
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	0020      	movs	r0, r4
 8002c62:	0019      	movs	r1, r3
 8002c64:	bd10      	pop	{r4, pc}
 8002c66:	0022      	movs	r2, r4
 8002c68:	380b      	subs	r0, #11
 8002c6a:	4082      	lsls	r2, r0
 8002c6c:	055b      	lsls	r3, r3, #21
 8002c6e:	0312      	lsls	r2, r2, #12
 8002c70:	2400      	movs	r4, #0
 8002c72:	0b12      	lsrs	r2, r2, #12
 8002c74:	0d5b      	lsrs	r3, r3, #21
 8002c76:	e7f1      	b.n	8002c5c <__aeabi_ui2d+0x2c>
 8002c78:	0000041e 	.word	0x0000041e

08002c7c <__aeabi_f2d>:
 8002c7c:	b570      	push	{r4, r5, r6, lr}
 8002c7e:	0043      	lsls	r3, r0, #1
 8002c80:	0246      	lsls	r6, r0, #9
 8002c82:	0fc4      	lsrs	r4, r0, #31
 8002c84:	20fe      	movs	r0, #254	; 0xfe
 8002c86:	0e1b      	lsrs	r3, r3, #24
 8002c88:	1c59      	adds	r1, r3, #1
 8002c8a:	0a75      	lsrs	r5, r6, #9
 8002c8c:	4208      	tst	r0, r1
 8002c8e:	d00c      	beq.n	8002caa <__aeabi_f2d+0x2e>
 8002c90:	22e0      	movs	r2, #224	; 0xe0
 8002c92:	0092      	lsls	r2, r2, #2
 8002c94:	4694      	mov	ip, r2
 8002c96:	076d      	lsls	r5, r5, #29
 8002c98:	0b36      	lsrs	r6, r6, #12
 8002c9a:	4463      	add	r3, ip
 8002c9c:	051b      	lsls	r3, r3, #20
 8002c9e:	4333      	orrs	r3, r6
 8002ca0:	07e4      	lsls	r4, r4, #31
 8002ca2:	4323      	orrs	r3, r4
 8002ca4:	0028      	movs	r0, r5
 8002ca6:	0019      	movs	r1, r3
 8002ca8:	bd70      	pop	{r4, r5, r6, pc}
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d114      	bne.n	8002cd8 <__aeabi_f2d+0x5c>
 8002cae:	2d00      	cmp	r5, #0
 8002cb0:	d01b      	beq.n	8002cea <__aeabi_f2d+0x6e>
 8002cb2:	0028      	movs	r0, r5
 8002cb4:	f000 f82a 	bl	8002d0c <__clzsi2>
 8002cb8:	280a      	cmp	r0, #10
 8002cba:	dc1c      	bgt.n	8002cf6 <__aeabi_f2d+0x7a>
 8002cbc:	230b      	movs	r3, #11
 8002cbe:	002a      	movs	r2, r5
 8002cc0:	1a1b      	subs	r3, r3, r0
 8002cc2:	40da      	lsrs	r2, r3
 8002cc4:	0003      	movs	r3, r0
 8002cc6:	3315      	adds	r3, #21
 8002cc8:	409d      	lsls	r5, r3
 8002cca:	4b0e      	ldr	r3, [pc, #56]	; (8002d04 <__aeabi_f2d+0x88>)
 8002ccc:	0312      	lsls	r2, r2, #12
 8002cce:	1a1b      	subs	r3, r3, r0
 8002cd0:	055b      	lsls	r3, r3, #21
 8002cd2:	0b16      	lsrs	r6, r2, #12
 8002cd4:	0d5b      	lsrs	r3, r3, #21
 8002cd6:	e7e1      	b.n	8002c9c <__aeabi_f2d+0x20>
 8002cd8:	2d00      	cmp	r5, #0
 8002cda:	d009      	beq.n	8002cf0 <__aeabi_f2d+0x74>
 8002cdc:	0b32      	lsrs	r2, r6, #12
 8002cde:	2680      	movs	r6, #128	; 0x80
 8002ce0:	0336      	lsls	r6, r6, #12
 8002ce2:	4b09      	ldr	r3, [pc, #36]	; (8002d08 <__aeabi_f2d+0x8c>)
 8002ce4:	076d      	lsls	r5, r5, #29
 8002ce6:	4316      	orrs	r6, r2
 8002ce8:	e7d8      	b.n	8002c9c <__aeabi_f2d+0x20>
 8002cea:	2300      	movs	r3, #0
 8002cec:	2600      	movs	r6, #0
 8002cee:	e7d5      	b.n	8002c9c <__aeabi_f2d+0x20>
 8002cf0:	2600      	movs	r6, #0
 8002cf2:	4b05      	ldr	r3, [pc, #20]	; (8002d08 <__aeabi_f2d+0x8c>)
 8002cf4:	e7d2      	b.n	8002c9c <__aeabi_f2d+0x20>
 8002cf6:	0003      	movs	r3, r0
 8002cf8:	002a      	movs	r2, r5
 8002cfa:	3b0b      	subs	r3, #11
 8002cfc:	409a      	lsls	r2, r3
 8002cfe:	2500      	movs	r5, #0
 8002d00:	e7e3      	b.n	8002cca <__aeabi_f2d+0x4e>
 8002d02:	46c0      	nop			; (mov r8, r8)
 8002d04:	00000389 	.word	0x00000389
 8002d08:	000007ff 	.word	0x000007ff

08002d0c <__clzsi2>:
 8002d0c:	211c      	movs	r1, #28
 8002d0e:	2301      	movs	r3, #1
 8002d10:	041b      	lsls	r3, r3, #16
 8002d12:	4298      	cmp	r0, r3
 8002d14:	d301      	bcc.n	8002d1a <__clzsi2+0xe>
 8002d16:	0c00      	lsrs	r0, r0, #16
 8002d18:	3910      	subs	r1, #16
 8002d1a:	0a1b      	lsrs	r3, r3, #8
 8002d1c:	4298      	cmp	r0, r3
 8002d1e:	d301      	bcc.n	8002d24 <__clzsi2+0x18>
 8002d20:	0a00      	lsrs	r0, r0, #8
 8002d22:	3908      	subs	r1, #8
 8002d24:	091b      	lsrs	r3, r3, #4
 8002d26:	4298      	cmp	r0, r3
 8002d28:	d301      	bcc.n	8002d2e <__clzsi2+0x22>
 8002d2a:	0900      	lsrs	r0, r0, #4
 8002d2c:	3904      	subs	r1, #4
 8002d2e:	a202      	add	r2, pc, #8	; (adr r2, 8002d38 <__clzsi2+0x2c>)
 8002d30:	5c10      	ldrb	r0, [r2, r0]
 8002d32:	1840      	adds	r0, r0, r1
 8002d34:	4770      	bx	lr
 8002d36:	46c0      	nop			; (mov r8, r8)
 8002d38:	02020304 	.word	0x02020304
 8002d3c:	01010101 	.word	0x01010101
	...

08002d48 <__clzdi2>:
 8002d48:	b510      	push	{r4, lr}
 8002d4a:	2900      	cmp	r1, #0
 8002d4c:	d103      	bne.n	8002d56 <__clzdi2+0xe>
 8002d4e:	f7ff ffdd 	bl	8002d0c <__clzsi2>
 8002d52:	3020      	adds	r0, #32
 8002d54:	e002      	b.n	8002d5c <__clzdi2+0x14>
 8002d56:	1c08      	adds	r0, r1, #0
 8002d58:	f7ff ffd8 	bl	8002d0c <__clzsi2>
 8002d5c:	bd10      	pop	{r4, pc}
 8002d5e:	46c0      	nop			; (mov r8, r8)

08002d60 <__divdi3>:
 8002d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d62:	4657      	mov	r7, sl
 8002d64:	464e      	mov	r6, r9
 8002d66:	4645      	mov	r5, r8
 8002d68:	46de      	mov	lr, fp
 8002d6a:	b5e0      	push	{r5, r6, r7, lr}
 8002d6c:	000f      	movs	r7, r1
 8002d6e:	0019      	movs	r1, r3
 8002d70:	2300      	movs	r3, #0
 8002d72:	0006      	movs	r6, r0
 8002d74:	4698      	mov	r8, r3
 8002d76:	0010      	movs	r0, r2
 8002d78:	b083      	sub	sp, #12
 8002d7a:	2f00      	cmp	r7, #0
 8002d7c:	da07      	bge.n	8002d8e <__divdi3+0x2e>
 8002d7e:	0033      	movs	r3, r6
 8002d80:	003c      	movs	r4, r7
 8002d82:	2700      	movs	r7, #0
 8002d84:	425e      	negs	r6, r3
 8002d86:	41a7      	sbcs	r7, r4
 8002d88:	2301      	movs	r3, #1
 8002d8a:	425b      	negs	r3, r3
 8002d8c:	4698      	mov	r8, r3
 8002d8e:	2900      	cmp	r1, #0
 8002d90:	da07      	bge.n	8002da2 <__divdi3+0x42>
 8002d92:	4643      	mov	r3, r8
 8002d94:	43db      	mvns	r3, r3
 8002d96:	000c      	movs	r4, r1
 8002d98:	4698      	mov	r8, r3
 8002d9a:	0003      	movs	r3, r0
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	4258      	negs	r0, r3
 8002da0:	41a1      	sbcs	r1, r4
 8002da2:	0034      	movs	r4, r6
 8002da4:	003d      	movs	r5, r7
 8002da6:	4682      	mov	sl, r0
 8002da8:	4689      	mov	r9, r1
 8002daa:	42b9      	cmp	r1, r7
 8002dac:	d86a      	bhi.n	8002e84 <__divdi3+0x124>
 8002dae:	d067      	beq.n	8002e80 <__divdi3+0x120>
 8002db0:	4649      	mov	r1, r9
 8002db2:	4650      	mov	r0, sl
 8002db4:	f7ff ffc8 	bl	8002d48 <__clzdi2>
 8002db8:	4683      	mov	fp, r0
 8002dba:	0039      	movs	r1, r7
 8002dbc:	0030      	movs	r0, r6
 8002dbe:	f7ff ffc3 	bl	8002d48 <__clzdi2>
 8002dc2:	465b      	mov	r3, fp
 8002dc4:	1a1b      	subs	r3, r3, r0
 8002dc6:	469c      	mov	ip, r3
 8002dc8:	3b20      	subs	r3, #32
 8002dca:	469b      	mov	fp, r3
 8002dcc:	d46b      	bmi.n	8002ea6 <__divdi3+0x146>
 8002dce:	4658      	mov	r0, fp
 8002dd0:	4651      	mov	r1, sl
 8002dd2:	4081      	lsls	r1, r0
 8002dd4:	4660      	mov	r0, ip
 8002dd6:	000b      	movs	r3, r1
 8002dd8:	4651      	mov	r1, sl
 8002dda:	4081      	lsls	r1, r0
 8002ddc:	000a      	movs	r2, r1
 8002dde:	42bb      	cmp	r3, r7
 8002de0:	d900      	bls.n	8002de4 <__divdi3+0x84>
 8002de2:	e072      	b.n	8002eca <__divdi3+0x16a>
 8002de4:	42bb      	cmp	r3, r7
 8002de6:	d100      	bne.n	8002dea <__divdi3+0x8a>
 8002de8:	e079      	b.n	8002ede <__divdi3+0x17e>
 8002dea:	0034      	movs	r4, r6
 8002dec:	003d      	movs	r5, r7
 8002dee:	4659      	mov	r1, fp
 8002df0:	1aa4      	subs	r4, r4, r2
 8002df2:	419d      	sbcs	r5, r3
 8002df4:	2900      	cmp	r1, #0
 8002df6:	da00      	bge.n	8002dfa <__divdi3+0x9a>
 8002df8:	e074      	b.n	8002ee4 <__divdi3+0x184>
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	2000      	movs	r0, #0
 8002dfe:	2601      	movs	r6, #1
 8002e00:	9000      	str	r0, [sp, #0]
 8002e02:	9101      	str	r1, [sp, #4]
 8002e04:	4659      	mov	r1, fp
 8002e06:	408e      	lsls	r6, r1
 8002e08:	9601      	str	r6, [sp, #4]
 8002e0a:	4661      	mov	r1, ip
 8002e0c:	2601      	movs	r6, #1
 8002e0e:	408e      	lsls	r6, r1
 8002e10:	4661      	mov	r1, ip
 8002e12:	9600      	str	r6, [sp, #0]
 8002e14:	2900      	cmp	r1, #0
 8002e16:	d05f      	beq.n	8002ed8 <__divdi3+0x178>
 8002e18:	07d9      	lsls	r1, r3, #31
 8002e1a:	0856      	lsrs	r6, r2, #1
 8002e1c:	430e      	orrs	r6, r1
 8002e1e:	085f      	lsrs	r7, r3, #1
 8002e20:	4661      	mov	r1, ip
 8002e22:	2201      	movs	r2, #1
 8002e24:	2300      	movs	r3, #0
 8002e26:	e00c      	b.n	8002e42 <__divdi3+0xe2>
 8002e28:	42af      	cmp	r7, r5
 8002e2a:	d101      	bne.n	8002e30 <__divdi3+0xd0>
 8002e2c:	42a6      	cmp	r6, r4
 8002e2e:	d80a      	bhi.n	8002e46 <__divdi3+0xe6>
 8002e30:	1ba4      	subs	r4, r4, r6
 8002e32:	41bd      	sbcs	r5, r7
 8002e34:	1924      	adds	r4, r4, r4
 8002e36:	416d      	adcs	r5, r5
 8002e38:	3901      	subs	r1, #1
 8002e3a:	18a4      	adds	r4, r4, r2
 8002e3c:	415d      	adcs	r5, r3
 8002e3e:	2900      	cmp	r1, #0
 8002e40:	d006      	beq.n	8002e50 <__divdi3+0xf0>
 8002e42:	42af      	cmp	r7, r5
 8002e44:	d9f0      	bls.n	8002e28 <__divdi3+0xc8>
 8002e46:	3901      	subs	r1, #1
 8002e48:	1924      	adds	r4, r4, r4
 8002e4a:	416d      	adcs	r5, r5
 8002e4c:	2900      	cmp	r1, #0
 8002e4e:	d1f8      	bne.n	8002e42 <__divdi3+0xe2>
 8002e50:	9800      	ldr	r0, [sp, #0]
 8002e52:	9901      	ldr	r1, [sp, #4]
 8002e54:	465b      	mov	r3, fp
 8002e56:	1900      	adds	r0, r0, r4
 8002e58:	4169      	adcs	r1, r5
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	db4d      	blt.n	8002efa <__divdi3+0x19a>
 8002e5e:	002e      	movs	r6, r5
 8002e60:	002c      	movs	r4, r5
 8002e62:	40de      	lsrs	r6, r3
 8002e64:	4663      	mov	r3, ip
 8002e66:	40dc      	lsrs	r4, r3
 8002e68:	465b      	mov	r3, fp
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	db55      	blt.n	8002f1a <__divdi3+0x1ba>
 8002e6e:	0034      	movs	r4, r6
 8002e70:	409c      	lsls	r4, r3
 8002e72:	0023      	movs	r3, r4
 8002e74:	4664      	mov	r4, ip
 8002e76:	40a6      	lsls	r6, r4
 8002e78:	0032      	movs	r2, r6
 8002e7a:	1a80      	subs	r0, r0, r2
 8002e7c:	4199      	sbcs	r1, r3
 8002e7e:	e003      	b.n	8002e88 <__divdi3+0x128>
 8002e80:	42b0      	cmp	r0, r6
 8002e82:	d995      	bls.n	8002db0 <__divdi3+0x50>
 8002e84:	2000      	movs	r0, #0
 8002e86:	2100      	movs	r1, #0
 8002e88:	4643      	mov	r3, r8
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d004      	beq.n	8002e98 <__divdi3+0x138>
 8002e8e:	0003      	movs	r3, r0
 8002e90:	000c      	movs	r4, r1
 8002e92:	2100      	movs	r1, #0
 8002e94:	4258      	negs	r0, r3
 8002e96:	41a1      	sbcs	r1, r4
 8002e98:	b003      	add	sp, #12
 8002e9a:	bcf0      	pop	{r4, r5, r6, r7}
 8002e9c:	46bb      	mov	fp, r7
 8002e9e:	46b2      	mov	sl, r6
 8002ea0:	46a9      	mov	r9, r5
 8002ea2:	46a0      	mov	r8, r4
 8002ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ea6:	4662      	mov	r2, ip
 8002ea8:	4648      	mov	r0, r9
 8002eaa:	2320      	movs	r3, #32
 8002eac:	4651      	mov	r1, sl
 8002eae:	4090      	lsls	r0, r2
 8002eb0:	1a9b      	subs	r3, r3, r2
 8002eb2:	40d9      	lsrs	r1, r3
 8002eb4:	0003      	movs	r3, r0
 8002eb6:	9100      	str	r1, [sp, #0]
 8002eb8:	9900      	ldr	r1, [sp, #0]
 8002eba:	4660      	mov	r0, ip
 8002ebc:	430b      	orrs	r3, r1
 8002ebe:	4651      	mov	r1, sl
 8002ec0:	4081      	lsls	r1, r0
 8002ec2:	000a      	movs	r2, r1
 8002ec4:	42bb      	cmp	r3, r7
 8002ec6:	d800      	bhi.n	8002eca <__divdi3+0x16a>
 8002ec8:	e78c      	b.n	8002de4 <__divdi3+0x84>
 8002eca:	2100      	movs	r1, #0
 8002ecc:	2000      	movs	r0, #0
 8002ece:	9000      	str	r0, [sp, #0]
 8002ed0:	9101      	str	r1, [sp, #4]
 8002ed2:	4661      	mov	r1, ip
 8002ed4:	2900      	cmp	r1, #0
 8002ed6:	d19f      	bne.n	8002e18 <__divdi3+0xb8>
 8002ed8:	9800      	ldr	r0, [sp, #0]
 8002eda:	9901      	ldr	r1, [sp, #4]
 8002edc:	e7d4      	b.n	8002e88 <__divdi3+0x128>
 8002ede:	42b1      	cmp	r1, r6
 8002ee0:	d8f3      	bhi.n	8002eca <__divdi3+0x16a>
 8002ee2:	e782      	b.n	8002dea <__divdi3+0x8a>
 8002ee4:	4661      	mov	r1, ip
 8002ee6:	2620      	movs	r6, #32
 8002ee8:	2701      	movs	r7, #1
 8002eea:	1a76      	subs	r6, r6, r1
 8002eec:	2000      	movs	r0, #0
 8002eee:	2100      	movs	r1, #0
 8002ef0:	40f7      	lsrs	r7, r6
 8002ef2:	9000      	str	r0, [sp, #0]
 8002ef4:	9101      	str	r1, [sp, #4]
 8002ef6:	9701      	str	r7, [sp, #4]
 8002ef8:	e787      	b.n	8002e0a <__divdi3+0xaa>
 8002efa:	4662      	mov	r2, ip
 8002efc:	2320      	movs	r3, #32
 8002efe:	1a9b      	subs	r3, r3, r2
 8002f00:	002a      	movs	r2, r5
 8002f02:	409a      	lsls	r2, r3
 8002f04:	0026      	movs	r6, r4
 8002f06:	0013      	movs	r3, r2
 8002f08:	4662      	mov	r2, ip
 8002f0a:	40d6      	lsrs	r6, r2
 8002f0c:	002c      	movs	r4, r5
 8002f0e:	431e      	orrs	r6, r3
 8002f10:	4663      	mov	r3, ip
 8002f12:	40dc      	lsrs	r4, r3
 8002f14:	465b      	mov	r3, fp
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	daa9      	bge.n	8002e6e <__divdi3+0x10e>
 8002f1a:	4662      	mov	r2, ip
 8002f1c:	2320      	movs	r3, #32
 8002f1e:	0035      	movs	r5, r6
 8002f20:	4094      	lsls	r4, r2
 8002f22:	1a9b      	subs	r3, r3, r2
 8002f24:	40dd      	lsrs	r5, r3
 8002f26:	0023      	movs	r3, r4
 8002f28:	432b      	orrs	r3, r5
 8002f2a:	e7a3      	b.n	8002e74 <__divdi3+0x114>

08002f2c <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8002f30:	f001 ff56 	bl	8004de0 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8002f34:	f000 f80e 	bl	8002f54 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8002f38:	46c0      	nop			; (mov r8, r8)
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8002f42:	2301      	movs	r3, #1
 8002f44:	425b      	negs	r3, r3
 8002f46:	0018      	movs	r0, r3
 8002f48:	f019 fb32 	bl	801c5b0 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 8002f4c:	46c0      	nop			; (mov r8, r8)
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
	...

08002f54 <LoRaWAN_Init>:
//MX_I2C1_Init(hi2c1);
//MX_USART2_Init();
/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af04      	add	r7, sp, #16
	   	bmp280.addr = BMP280_I2C_ADDRESS_0;
	   	bmp280.i2c = &hi2c1;
*/
	   //float pressure1, temperature1, humidity1;
  /* USER CODE END LoRaWAN_Init_1 */
  LED_Init(LED_BLUE);
 8002f5a:	2002      	movs	r0, #2
 8002f5c:	f002 fe2e 	bl	8005bbc <BSP_LED_Init>
  LED_Init(LED_RED1);
 8002f60:	2001      	movs	r0, #1
 8002f62:	f002 fe2b 	bl	8005bbc <BSP_LED_Init>
  LED_Init(LED_RED2);
 8002f66:	2003      	movs	r0, #3
 8002f68:	f002 fe28 	bl	8005bbc <BSP_LED_Init>
  /* Get LoRa APP version*/
//  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION:        V%X.%X.%X\r\n",
//          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_MAIN_SHIFT),
//          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB1_SHIFT),
//          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB2_SHIFT));
  APP_LOG(TS_OFF, VLEVEL_M, " Версия протокола:        V%X.%X.%X\r\n",
 8002f6c:	4b3c      	ldr	r3, [pc, #240]	; (8003060 <LoRaWAN_Init+0x10c>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	9202      	str	r2, [sp, #8]
 8002f72:	2200      	movs	r2, #0
 8002f74:	9201      	str	r2, [sp, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	9200      	str	r2, [sp, #0]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	2002      	movs	r0, #2
 8002f80:	f018 ff54 	bl	801be2c <UTIL_ADV_TRACE_COND_FSend>
//          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB1_SHIFT),
//          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB2_SHIFT)); // версия радио Middleware
  // APP_LOG(TS_OFF, VLEVEL_M, "MW_:   V%X.%X.%X\r\n",
//  APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ==== EEEPROM EST====\r\n");
  //	 (uint8_t) buffer[20]);
  UTIL_TIMER_Create(&TxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 8002f84:	4b37      	ldr	r3, [pc, #220]	; (8003064 <LoRaWAN_Init+0x110>)
 8002f86:	2201      	movs	r2, #1
 8002f88:	4251      	negs	r1, r2
 8002f8a:	4837      	ldr	r0, [pc, #220]	; (8003068 <LoRaWAN_Init+0x114>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	9200      	str	r2, [sp, #0]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f019 fddf 	bl	801cb54 <UTIL_TIMER_Create>
  // HAL_LPTIM_Counter_Start_IT(&hlptim,1000);
 // HAL_LPTIM_TimeOut_Start(&TxLedTimer, uint32_t Period, uint32_t Timeout);
  //  HAL_LPTIM_TimeOut_Start(&TxLedTimer,5000,1000);
   UTIL_TIMER_Create(&RxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 8002f96:	4b35      	ldr	r3, [pc, #212]	; (800306c <LoRaWAN_Init+0x118>)
 8002f98:	2201      	movs	r2, #1
 8002f9a:	4251      	negs	r1, r2
 8002f9c:	4834      	ldr	r0, [pc, #208]	; (8003070 <LoRaWAN_Init+0x11c>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	9200      	str	r2, [sp, #0]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f019 fdd6 	bl	801cb54 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, 0xFFFFFFFFU, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 8002fa8:	4b32      	ldr	r3, [pc, #200]	; (8003074 <LoRaWAN_Init+0x120>)
 8002faa:	2201      	movs	r2, #1
 8002fac:	4251      	negs	r1, r2
 8002fae:	4832      	ldr	r0, [pc, #200]	; (8003078 <LoRaWAN_Init+0x124>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	9200      	str	r2, [sp, #0]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f019 fdcd 	bl	801cb54 <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&TxLedTimer, 500);// 3 стр отрубают светодиоды если их не будет,
 8002fba:	23fa      	movs	r3, #250	; 0xfa
 8002fbc:	005a      	lsls	r2, r3, #1
 8002fbe:	4b2a      	ldr	r3, [pc, #168]	; (8003068 <LoRaWAN_Init+0x114>)
 8002fc0:	0011      	movs	r1, r2
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	f019 feee 	bl	801cda4 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&RxLedTimer, 500);
 8002fc8:	23fa      	movs	r3, #250	; 0xfa
 8002fca:	005a      	lsls	r2, r3, #1
 8002fcc:	4b28      	ldr	r3, [pc, #160]	; (8003070 <LoRaWAN_Init+0x11c>)
 8002fce:	0011      	movs	r1, r2
 8002fd0:	0018      	movs	r0, r3
 8002fd2:	f019 fee7 	bl	801cda4 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&JoinLedTimer, 500);
 8002fd6:	23fa      	movs	r3, #250	; 0xfa
 8002fd8:	005a      	lsls	r2, r3, #1
 8002fda:	4b27      	ldr	r3, [pc, #156]	; (8003078 <LoRaWAN_Init+0x124>)
 8002fdc:	0011      	movs	r1, r2
 8002fde:	0018      	movs	r0, r3
 8002fe0:	f019 fee0 	bl	801cda4 <UTIL_TIMER_SetPeriod>
 // bmp280_read_float(&bmp280, &temperature1, &pressure1, &humidity1);
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 8002fe4:	4b25      	ldr	r3, [pc, #148]	; (800307c <LoRaWAN_Init+0x128>)
 8002fe6:	001a      	movs	r2, r3
 8002fe8:	2100      	movs	r1, #0
 8002fea:	2001      	movs	r0, #1
 8002fec:	f019 fbc2 	bl	801c774 <UTIL_SEQ_RegTask>
 8002ff0:	4b23      	ldr	r3, [pc, #140]	; (8003080 <LoRaWAN_Init+0x12c>)
 8002ff2:	001a      	movs	r2, r3
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	2002      	movs	r0, #2
 8002ff8:	f019 fbbc 	bl	801c774 <UTIL_SEQ_RegTask>
  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 8002ffc:	f000 fbc0 	bl	8003780 <LoraInfo_Init>
  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks);
 8003000:	4b20      	ldr	r3, [pc, #128]	; (8003084 <LoRaWAN_Init+0x130>)
 8003002:	0018      	movs	r0, r3
 8003004:	f00a fea4 	bl	800dd50 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 8003008:	4b1f      	ldr	r3, [pc, #124]	; (8003088 <LoRaWAN_Init+0x134>)
 800300a:	0018      	movs	r0, r3
 800300c:	f00a fee6 	bl	800dddc <LmHandlerConfigure>

  UTIL_TIMER_Start(&JoinLedTimer);
 8003010:	4b19      	ldr	r3, [pc, #100]	; (8003078 <LoRaWAN_Init+0x124>)
 8003012:	0018      	movs	r0, r3
 8003014:	f019 fdd6 	bl	801cbc4 <UTIL_TIMER_Start>
  // HAL_LPTIM_Counter_Start_IT(&JoinLedTimer,1000); // попытка переделать светодиодом под LPTIM
  LmHandlerJoin(ActivationType);
 8003018:	4b1c      	ldr	r3, [pc, #112]	; (800308c <LoRaWAN_Init+0x138>)
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	0018      	movs	r0, r3
 800301e:	f00b f84d 	bl	800e0bc <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 8003022:	4b1b      	ldr	r3, [pc, #108]	; (8003090 <LoRaWAN_Init+0x13c>)
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d113      	bne.n	8003052 <LoRaWAN_Init+0xfe>
  {
    /* send every time timer elapses */

    UTIL_TIMER_Create(&TxTimer,  0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800302a:	4b1a      	ldr	r3, [pc, #104]	; (8003094 <LoRaWAN_Init+0x140>)
 800302c:	2201      	movs	r2, #1
 800302e:	4251      	negs	r1, r2
 8003030:	4819      	ldr	r0, [pc, #100]	; (8003098 <LoRaWAN_Init+0x144>)
 8003032:	2200      	movs	r2, #0
 8003034:	9200      	str	r2, [sp, #0]
 8003036:	2200      	movs	r2, #0
 8003038:	f019 fd8c 	bl	801cb54 <UTIL_TIMER_Create>
    UTIL_TIMER_SetPeriod(&TxTimer,  APP_TX_DUTYCYCLE);
 800303c:	4a17      	ldr	r2, [pc, #92]	; (800309c <LoRaWAN_Init+0x148>)
 800303e:	4b16      	ldr	r3, [pc, #88]	; (8003098 <LoRaWAN_Init+0x144>)
 8003040:	0011      	movs	r1, r2
 8003042:	0018      	movs	r0, r3
 8003044:	f019 feae 	bl	801cda4 <UTIL_TIMER_SetPeriod>
    //  HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
    //  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
    //HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI); // NEW
      UTIL_TIMER_Start(&TxTimer);
 8003048:	4b13      	ldr	r3, [pc, #76]	; (8003098 <LoRaWAN_Init+0x144>)
 800304a:	0018      	movs	r0, r3
 800304c:	f019 fdba 	bl	801cbc4 <UTIL_TIMER_Start>
  /* bmp280_init_default_params(&bmp280.params);
   	bmp280.addr = BMP280_I2C_ADDRESS_0;
   	bmp280.i2c = &hi2c1;
   	*/
  /* USER CODE END LoRaWAN_Init_Last */
}
 8003050:	e003      	b.n	800305a <LoRaWAN_Init+0x106>
    BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8003052:	2101      	movs	r1, #1
 8003054:	2000      	movs	r0, #0
 8003056:	f002 fe73 	bl	8005d40 <BSP_PB_Init>
}
 800305a:	46c0      	nop			; (mov r8, r8)
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	0801e984 	.word	0x0801e984
 8003064:	0800347d 	.word	0x0800347d
 8003068:	20000364 	.word	0x20000364
 800306c:	08003493 	.word	0x08003493
 8003070:	2000037c 	.word	0x2000037c
 8003074:	080034a9 	.word	0x080034a9
 8003078:	20000394 	.word	0x20000394
 800307c:	0800e001 	.word	0x0800e001
 8003080:	080031d5 	.word	0x080031d5
 8003084:	2000000c 	.word	0x2000000c
 8003088:	2000002c 	.word	0x2000002c
 800308c:	20000008 	.word	0x20000008
 8003090:	2000034b 	.word	0x2000034b
 8003094:	08003459 	.word	0x08003459
 8003098:	2000034c 	.word	0x2000034c
 800309c:	00002710 	.word	0x00002710

080030a0 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 80030a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030a2:	b089      	sub	sp, #36	; 0x24
 80030a4:	af06      	add	r7, sp, #24
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */

  /* USER CODE END OnRxData_1 */
  if ((appData != NULL) && (params != NULL))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d100      	bne.n	80030b2 <OnRxData+0x12>
 80030b0:	e07a      	b.n	80031a8 <OnRxData+0x108>
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d100      	bne.n	80030ba <OnRxData+0x1a>
 80030b8:	e076      	b.n	80031a8 <OnRxData+0x108>
  {
    LED_On(LED_BLUE);
 80030ba:	2002      	movs	r0, #2
 80030bc:	f002 fdec 	bl	8005c98 <BSP_LED_On>
    static const char *slotStrings[] = { "1", "2", "C", "C Multicast", "B Ping-Slot", "B Multicast Ping-Slot" };

    APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Indication ==========\r\n");
 80030c0:	4b3e      	ldr	r3, [pc, #248]	; (80031bc <OnRxData+0x11c>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	2100      	movs	r1, #0
 80030c6:	2002      	movs	r0, #2
 80030c8:	f018 feb0 	bl	801be2c <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | SLOT:%s | PORT:%d | DR:%d | RSSI:%d | SNR:%d\r\n",
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	7b12      	ldrb	r2, [r2, #12]
 80030d4:	b252      	sxtb	r2, r2
 80030d6:	0011      	movs	r1, r2
 80030d8:	4a39      	ldr	r2, [pc, #228]	; (80031c0 <OnRxData+0x120>)
 80030da:	0089      	lsls	r1, r1, #2
 80030dc:	588a      	ldr	r2, [r1, r2]
 80030de:	6879      	ldr	r1, [r7, #4]
 80030e0:	7809      	ldrb	r1, [r1, #0]
 80030e2:	0008      	movs	r0, r1
 80030e4:	6839      	ldr	r1, [r7, #0]
 80030e6:	7889      	ldrb	r1, [r1, #2]
 80030e8:	b249      	sxtb	r1, r1
 80030ea:	000c      	movs	r4, r1
 80030ec:	6839      	ldr	r1, [r7, #0]
 80030ee:	78c9      	ldrb	r1, [r1, #3]
 80030f0:	b249      	sxtb	r1, r1
 80030f2:	000d      	movs	r5, r1
 80030f4:	6839      	ldr	r1, [r7, #0]
 80030f6:	7909      	ldrb	r1, [r1, #4]
 80030f8:	b249      	sxtb	r1, r1
 80030fa:	000e      	movs	r6, r1
 80030fc:	4931      	ldr	r1, [pc, #196]	; (80031c4 <OnRxData+0x124>)
 80030fe:	9605      	str	r6, [sp, #20]
 8003100:	9504      	str	r5, [sp, #16]
 8003102:	9403      	str	r4, [sp, #12]
 8003104:	9002      	str	r0, [sp, #8]
 8003106:	9201      	str	r2, [sp, #4]
 8003108:	9300      	str	r3, [sp, #0]
 800310a:	000b      	movs	r3, r1
 800310c:	2200      	movs	r2, #0
 800310e:	2100      	movs	r1, #0
 8003110:	2003      	movs	r0, #3
 8003112:	f018 fe8b 	bl	801be2c <UTIL_ADV_TRACE_COND_FSend>
            params->DownlinkCounter, slotStrings[params->RxSlot], appData->Port, params->Datarate, params->Rssi, params->Snr);
    switch (appData->Port)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	2b02      	cmp	r3, #2
 800311c:	d020      	beq.n	8003160 <OnRxData+0xc0>
 800311e:	2b03      	cmp	r3, #3
 8003120:	d144      	bne.n	80031ac <OnRxData+0x10c>
    {
      case LORAWAN_SWITCH_CLASS_PORT:
        /*this port switches the class*/
        if (appData->BufferSize == 1)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	785b      	ldrb	r3, [r3, #1]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d116      	bne.n	8003158 <OnRxData+0xb8>
        {
          switch (appData->Buffer[0])
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	2b02      	cmp	r3, #2
 8003132:	d00d      	beq.n	8003150 <OnRxData+0xb0>
 8003134:	dc12      	bgt.n	800315c <OnRxData+0xbc>
 8003136:	2b00      	cmp	r3, #0
 8003138:	d002      	beq.n	8003140 <OnRxData+0xa0>
 800313a:	2b01      	cmp	r3, #1
 800313c:	d004      	beq.n	8003148 <OnRxData+0xa8>
            {
              LmHandlerRequestClass(CLASS_C);
              break;
            }
            default:
              break;
 800313e:	e00d      	b.n	800315c <OnRxData+0xbc>
              LmHandlerRequestClass(CLASS_A);
 8003140:	2000      	movs	r0, #0
 8003142:	f00b f915 	bl	800e370 <LmHandlerRequestClass>
              break;
 8003146:	e00a      	b.n	800315e <OnRxData+0xbe>
              LmHandlerRequestClass(CLASS_B);
 8003148:	2001      	movs	r0, #1
 800314a:	f00b f911 	bl	800e370 <LmHandlerRequestClass>
              break;
 800314e:	e006      	b.n	800315e <OnRxData+0xbe>
              LmHandlerRequestClass(CLASS_C);
 8003150:	2002      	movs	r0, #2
 8003152:	f00b f90d 	bl	800e370 <LmHandlerRequestClass>
              break;
 8003156:	e002      	b.n	800315e <OnRxData+0xbe>
          }
        }
 8003158:	46c0      	nop			; (mov r8, r8)
 800315a:	e02a      	b.n	80031b2 <OnRxData+0x112>
              break;
 800315c:	46c0      	nop			; (mov r8, r8)
        break;
 800315e:	e028      	b.n	80031b2 <OnRxData+0x112>
      case LORAWAN_USER_APP_PORT:
        if (appData->BufferSize == 1)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	785b      	ldrb	r3, [r3, #1]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d123      	bne.n	80031b0 <OnRxData+0x110>
        {
          AppLedStateOn = appData->Buffer[0] & 0x01;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	2201      	movs	r2, #1
 8003170:	4013      	ands	r3, r2
 8003172:	b2da      	uxtb	r2, r3
 8003174:	4b14      	ldr	r3, [pc, #80]	; (80031c8 <OnRxData+0x128>)
 8003176:	701a      	strb	r2, [r3, #0]
          if (AppLedStateOn == RESET)
 8003178:	4b13      	ldr	r3, [pc, #76]	; (80031c8 <OnRxData+0x128>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d109      	bne.n	8003194 <OnRxData+0xf4>
          {
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
 8003180:	4b12      	ldr	r3, [pc, #72]	; (80031cc <OnRxData+0x12c>)
 8003182:	2200      	movs	r2, #0
 8003184:	2100      	movs	r1, #0
 8003186:	2003      	movs	r0, #3
 8003188:	f018 fe50 	bl	801be2c <UTIL_ADV_TRACE_COND_FSend>

            LED_Off(LED_RED1);
 800318c:	2001      	movs	r0, #1
 800318e:	f002 fd9f 	bl	8005cd0 <BSP_LED_Off>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");

            LED_On(LED_RED1);
          }
        }
        break;
 8003192:	e00d      	b.n	80031b0 <OnRxData+0x110>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 8003194:	4b0e      	ldr	r3, [pc, #56]	; (80031d0 <OnRxData+0x130>)
 8003196:	2200      	movs	r2, #0
 8003198:	2100      	movs	r1, #0
 800319a:	2003      	movs	r0, #3
 800319c:	f018 fe46 	bl	801be2c <UTIL_ADV_TRACE_COND_FSend>
            LED_On(LED_RED1);
 80031a0:	2001      	movs	r0, #1
 80031a2:	f002 fd79 	bl	8005c98 <BSP_LED_On>
        break;
 80031a6:	e003      	b.n	80031b0 <OnRxData+0x110>
        /* USER CODE BEGIN OnRxData_Switch_default */

        /* USER CODE END OnRxData_Switch_default */
        break;
    }
  }
 80031a8:	46c0      	nop			; (mov r8, r8)
 80031aa:	e002      	b.n	80031b2 <OnRxData+0x112>
        break;
 80031ac:	46c0      	nop			; (mov r8, r8)
 80031ae:	e000      	b.n	80031b2 <OnRxData+0x112>
        break;
 80031b0:	46c0      	nop			; (mov r8, r8)

  /* USER CODE BEGIN OnRxData_2 */

  /* USER CODE END OnRxData_2 */
}
 80031b2:	46c0      	nop			; (mov r8, r8)
 80031b4:	46bd      	mov	sp, r7
 80031b6:	b003      	add	sp, #12
 80031b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031ba:	46c0      	nop			; (mov r8, r8)
 80031bc:	0801e9bc 	.word	0x0801e9bc
 80031c0:	20000034 	.word	0x20000034
 80031c4:	0801e9f0 	.word	0x0801e9f0
 80031c8:	2000034a 	.word	0x2000034a
 80031cc:	0801ea38 	.word	0x0801ea38
 80031d0:	0801ea44 	.word	0x0801ea44

080031d4 <SendTxData>:

static void SendTxData(void)
{
 80031d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031d6:	b0e5      	sub	sp, #404	; 0x194
 80031d8:	af02      	add	r7, sp, #8
	// uint8_t payload = "textovik";
	 uint16_t pressure = 0;
 80031da:	23c3      	movs	r3, #195	; 0xc3
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	18fb      	adds	r3, r7, r3
 80031e0:	2200      	movs	r2, #0
 80031e2:	801a      	strh	r2, [r3, #0]
	 int16_t temperature = 0;
 80031e4:	23c2      	movs	r3, #194	; 0xc2
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	18fb      	adds	r3, r7, r3
 80031ea:	2200      	movs	r2, #0
 80031ec:	801a      	strh	r2, [r3, #0]
  	//int16_t temperature = 0;
  	uint16_t Defbuff;  // для счётчика с охранной кнопки
  sensor_t sensor_data;
  uint16_t size;
  uint8_t Data[256];
  UTIL_TIMER_Time_t nextTxIn = 0;
 80031ee:	2300      	movs	r3, #0
 80031f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  bmp280_params_t params;
	RTC_TimeTypeDef sTime1;
  	RTC_DateTypeDef sDate1;
  	uint8_t buffer[20];
  	volatile uint16_t adc = 0;
 80031f2:	4b8b      	ldr	r3, [pc, #556]	; (8003420 <SendTxData+0x24c>)
 80031f4:	22c4      	movs	r2, #196	; 0xc4
 80031f6:	0052      	lsls	r2, r2, #1
 80031f8:	4694      	mov	ip, r2
 80031fa:	44bc      	add	ip, r7
 80031fc:	4463      	add	r3, ip
 80031fe:	2200      	movs	r2, #0
 8003200:	801a      	strh	r2, [r3, #0]
#ifdef CAYENNE_LPP
  uint8_t channel = 0;
#else
   uint16_t humidity = 0;
 8003202:	23c1      	movs	r3, #193	; 0xc1
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	18fb      	adds	r3, r7, r3
 8003208:	2200      	movs	r2, #0
 800320a:	801a      	strh	r2, [r3, #0]
  uint32_t i = 0;
 800320c:	2300      	movs	r3, #0
 800320e:	22be      	movs	r2, #190	; 0xbe
 8003210:	0052      	lsls	r2, r2, #1
 8003212:	18ba      	adds	r2, r7, r2
 8003214:	6013      	str	r3, [r2, #0]
  int32_t latitude = 0;
 8003216:	2300      	movs	r3, #0
 8003218:	22bc      	movs	r2, #188	; 0xbc
 800321a:	0052      	lsls	r2, r2, #1
 800321c:	18ba      	adds	r2, r7, r2
 800321e:	6013      	str	r3, [r2, #0]
  int32_t longitude = 0;
 8003220:	2300      	movs	r3, #0
 8003222:	22ba      	movs	r2, #186	; 0xba
 8003224:	0052      	lsls	r2, r2, #1
 8003226:	18ba      	adds	r2, r7, r2
 8003228:	6013      	str	r3, [r2, #0]
  uint16_t altitudeGps = 0;
 800322a:	23b9      	movs	r3, #185	; 0xb9
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	18fb      	adds	r3, r7, r3
 8003230:	2200      	movs	r2, #0
 8003232:	801a      	strh	r2, [r3, #0]
  #else
   temperature = (SYS_GetTemperatureLevel() >> 8);
  #endif  /* SENSOR_ENABLED */
  /*  pressure    = (uint16_t)(sensor_data.pressure * 100 / 10);      /* in hPa / 10 */

    AppData.Port = LORAWAN_USER_APP_PORT;
 8003234:	4b7b      	ldr	r3, [pc, #492]	; (8003424 <SendTxData+0x250>)
 8003236:	2202      	movs	r2, #2
 8003238:	701a      	strb	r2, [r3, #0]
  //
  // MX_I2C1_Init();
 // MX_USART2_Init();
  // MX_I2C1_Init();
  // BSP_SPI1_Init();
  BSP_I2C1_Init();
 800323a:	f002 fb77 	bl	800592c <BSP_I2C1_Init>
  MX_ADC_Init();
 800323e:	f000 fad3 	bl	80037e8 <MX_ADC_Init>
  MX_LPTIM1_Init();
 8003242:	f000 fa17 	bl	8003674 <MX_LPTIM1_Init>

  HAL_LPTIM_Encoder_Start_IT(&hlptim1, 1000);
 8003246:	23fa      	movs	r3, #250	; 0xfa
 8003248:	009a      	lsls	r2, r3, #2
 800324a:	4b77      	ldr	r3, [pc, #476]	; (8003428 <SendTxData+0x254>)
 800324c:	0011      	movs	r1, r2
 800324e:	0018      	movs	r0, r3
 8003250:	f001 fae2 	bl	8004818 <HAL_LPTIM_Encoder_Start_IT>
    		 */
  // MX_I2C1_Init();
 // HAL_I2C_GetState;// cntGetValue(&Defbuff);  // здесь будет сбор значения вскрытий// HTS221_Init(pObj);//HTS221_GetCapabilities(pObj, Capabilities);  //  HAL_LPTIM_Counter_Start_IT(&hlptim1,1000);
  // HAL_LPTIM_Counter_Start_IT(&hlptim1,1000);
    //	  HAL_Delay(200);  //	UTIL_TIMER_Create(&ReadLedTimer, 0xFFFFFFFFU, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);  // UTIL_TIMER_SetPeriod(&ReadLedTimer, 5000);  	//UTIL_TIMER_Create(&RxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
  bmp280_init_default_params(&bmp280.params);
 8003254:	4b75      	ldr	r3, [pc, #468]	; (800342c <SendTxData+0x258>)
 8003256:	0018      	movs	r0, r3
 8003258:	f01a f950 	bl	801d4fc <bmp280_init_default_params>
    	bmp280.addr = BMP280_I2C_ADDRESS_0;
 800325c:	4b74      	ldr	r3, [pc, #464]	; (8003430 <SendTxData+0x25c>)
 800325e:	2276      	movs	r2, #118	; 0x76
 8003260:	849a      	strh	r2, [r3, #36]	; 0x24
    	bmp280.i2c = &hi2c1;
 8003262:	4b73      	ldr	r3, [pc, #460]	; (8003430 <SendTxData+0x25c>)
 8003264:	4a73      	ldr	r2, [pc, #460]	; (8003434 <SendTxData+0x260>)
 8003266:	629a      	str	r2, [r3, #40]	; 0x28
    	bmp280_init(&bmp280, &bmp280.params);
 8003268:	4a70      	ldr	r2, [pc, #448]	; (800342c <SendTxData+0x258>)
 800326a:	4b71      	ldr	r3, [pc, #452]	; (8003430 <SendTxData+0x25c>)
 800326c:	0011      	movs	r1, r2
 800326e:	0018      	movs	r0, r3
 8003270:	f01a fad8 	bl	801d824 <bmp280_init>
    	 // HTS221_GetCapabilities(&hts221, temperature);
  // bmp280.i2c = &hi2c1;
   // bmp280_read_float(&bmp280, &temperature1, &pressure1, &humidity1);
  //  bmp280_read_float(&bmp280, &temperature1, &pressure1, &humidity1); старое
    	// HAL_Delay(100);
    	 bmp280_read_float(&bmp280, &temperature1, &pressure1, &humidity1);
 8003274:	23ac      	movs	r3, #172	; 0xac
 8003276:	005b      	lsls	r3, r3, #1
 8003278:	18fb      	adds	r3, r7, r3
 800327a:	25b0      	movs	r5, #176	; 0xb0
 800327c:	006d      	lsls	r5, r5, #1
 800327e:	197a      	adds	r2, r7, r5
 8003280:	24ae      	movs	r4, #174	; 0xae
 8003282:	0064      	lsls	r4, r4, #1
 8003284:	1939      	adds	r1, r7, r4
 8003286:	486a      	ldr	r0, [pc, #424]	; (8003430 <SendTxData+0x25c>)
 8003288:	f01a fe3a 	bl	801df00 <bmp280_read_float>

    	 if(bmp280.dig_T1>=0)
    	//*/
    	{
    	  APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ==== Temp, hum sensor Init ====\r\n");
 800328c:	4b6a      	ldr	r3, [pc, #424]	; (8003438 <SendTxData+0x264>)
 800328e:	2200      	movs	r2, #0
 8003290:	2100      	movs	r1, #0
 8003292:	2002      	movs	r0, #2
 8003294:	f018 fdca 	bl	801be2c <UTIL_ADV_TRACE_COND_FSend>
    	 {

    		 APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ==== Sensor initialization failed ====\r\n");
    	 }

    	 if(temperature1>=0 && temperature1<=30 && pressure1>=0)
 8003298:	193b      	adds	r3, r7, r4
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2100      	movs	r1, #0
 800329e:	1c18      	adds	r0, r3, #0
 80032a0:	f7fd f928 	bl	80004f4 <__aeabi_fcmpge>
 80032a4:	1e03      	subs	r3, r0, #0
 80032a6:	d016      	beq.n	80032d6 <SendTxData+0x102>
 80032a8:	193b      	adds	r3, r7, r4
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4963      	ldr	r1, [pc, #396]	; (800343c <SendTxData+0x268>)
 80032ae:	1c18      	adds	r0, r3, #0
 80032b0:	f7fd f90c 	bl	80004cc <__aeabi_fcmple>
 80032b4:	1e03      	subs	r3, r0, #0
 80032b6:	d00e      	beq.n	80032d6 <SendTxData+0x102>
 80032b8:	197b      	adds	r3, r7, r5
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2100      	movs	r1, #0
 80032be:	1c18      	adds	r0, r3, #0
 80032c0:	f7fd f918 	bl	80004f4 <__aeabi_fcmpge>
 80032c4:	1e03      	subs	r3, r0, #0
 80032c6:	d006      	beq.n	80032d6 <SendTxData+0x102>
    	     	//*/
    	  {
    	     	  APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ==== All parameters normal ====\r\n");
 80032c8:	4b5d      	ldr	r3, [pc, #372]	; (8003440 <SendTxData+0x26c>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	2100      	movs	r1, #0
 80032ce:	2002      	movs	r0, #2
 80032d0:	f018 fdac 	bl	801be2c <UTIL_ADV_TRACE_COND_FSend>
 80032d4:	e005      	b.n	80032e2 <SendTxData+0x10e>
    	  } //*/
    	     	 else
    	   {
    	     		 APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ==== Accident ====\r\n");
 80032d6:	4b5b      	ldr	r3, [pc, #364]	; (8003444 <SendTxData+0x270>)
 80032d8:	2200      	movs	r2, #0
 80032da:	2100      	movs	r1, #0
 80032dc:	2002      	movs	r0, #2
 80032de:	f018 fda5 	bl	801be2c <UTIL_ADV_TRACE_COND_FSend>
    	   }
    	 numberdev = 0x01;  // new 0b00010001
 80032e2:	23fe      	movs	r3, #254	; 0xfe
 80032e4:	059b      	lsls	r3, r3, #22
 80032e6:	26b6      	movs	r6, #182	; 0xb6
 80032e8:	0076      	lsls	r6, r6, #1
 80032ea:	19ba      	adds	r2, r7, r6
 80032ec:	6013      	str	r3, [r2, #0]
    	 per = 0xA; // new
 80032ee:	4b56      	ldr	r3, [pc, #344]	; (8003448 <SendTxData+0x274>)
 80032f0:	22b4      	movs	r2, #180	; 0xb4
 80032f2:	0052      	lsls	r2, r2, #1
 80032f4:	18b9      	adds	r1, r7, r2
 80032f6:	600b      	str	r3, [r1, #0]


  // bool bme280p = bmp280.id == BME280_CHIP_ID;
 // size = (temperature1, pressure1, humidity1);
    size = (temperature1, pressure1, humidity1);
 80032f8:	23ac      	movs	r3, #172	; 0xac
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	18f9      	adds	r1, r7, r3
 80032fe:	680b      	ldr	r3, [r1, #0]
 8003300:	25b3      	movs	r5, #179	; 0xb3
 8003302:	006d      	lsls	r5, r5, #1
 8003304:	197c      	adds	r4, r7, r5
 8003306:	1c18      	adds	r0, r3, #0
 8003308:	f7fd f96a 	bl	80005e0 <__aeabi_f2uiz>
 800330c:	0003      	movs	r3, r0
 800330e:	8023      	strh	r3, [r4, #0]
    size = sprintf((char *)Data, "Sensor initialization failed\n");
 8003310:	4a4e      	ldr	r2, [pc, #312]	; (800344c <SendTxData+0x278>)
 8003312:	2140      	movs	r1, #64	; 0x40
 8003314:	187b      	adds	r3, r7, r1
 8003316:	0011      	movs	r1, r2
 8003318:	0018      	movs	r0, r3
 800331a:	f01a fe79 	bl	801e010 <siprintf>
 800331e:	0002      	movs	r2, r0
 8003320:	197b      	adds	r3, r7, r5
 8003322:	801a      	strh	r2, [r3, #0]
  // AppData.Buffer[i++] = (uint8_t)temperature1 >> 8 ;
  //  AppData.Buffer[i++] = (int)humidity1 >> 16;


    //AppData.Buffer[i++] = 0x00;
     AppData.Buffer[i++] = numberdev; // new номер устройства
 8003324:	4b3f      	ldr	r3, [pc, #252]	; (8003424 <SendTxData+0x250>)
 8003326:	685a      	ldr	r2, [r3, #4]
 8003328:	25be      	movs	r5, #190	; 0xbe
 800332a:	006d      	lsls	r5, r5, #1
 800332c:	1979      	adds	r1, r7, r5
 800332e:	680b      	ldr	r3, [r1, #0]
 8003330:	1c59      	adds	r1, r3, #1
 8003332:	1978      	adds	r0, r7, r5
 8003334:	6001      	str	r1, [r0, #0]
 8003336:	18d4      	adds	r4, r2, r3
 8003338:	19b9      	adds	r1, r7, r6
 800333a:	6808      	ldr	r0, [r1, #0]
 800333c:	f7fd f950 	bl	80005e0 <__aeabi_f2uiz>
 8003340:	0003      	movs	r3, r0
 8003342:	b2db      	uxtb	r3, r3
 8003344:	7023      	strb	r3, [r4, #0]
     AppData.Buffer[i++] = temperature1;
 8003346:	21ae      	movs	r1, #174	; 0xae
 8003348:	0049      	lsls	r1, r1, #1
 800334a:	1879      	adds	r1, r7, r1
 800334c:	6808      	ldr	r0, [r1, #0]
 800334e:	4b35      	ldr	r3, [pc, #212]	; (8003424 <SendTxData+0x250>)
 8003350:	685a      	ldr	r2, [r3, #4]
 8003352:	1979      	adds	r1, r7, r5
 8003354:	680b      	ldr	r3, [r1, #0]
 8003356:	1c59      	adds	r1, r3, #1
 8003358:	197c      	adds	r4, r7, r5
 800335a:	6021      	str	r1, [r4, #0]
 800335c:	18d4      	adds	r4, r2, r3
 800335e:	f7fd f93f 	bl	80005e0 <__aeabi_f2uiz>
 8003362:	0003      	movs	r3, r0
 8003364:	b2db      	uxtb	r3, r3
 8003366:	7023      	strb	r3, [r4, #0]
     AppData.Buffer[i++] = humidity1;
 8003368:	23ac      	movs	r3, #172	; 0xac
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	18fb      	adds	r3, r7, r3
 800336e:	6818      	ldr	r0, [r3, #0]
 8003370:	4b2c      	ldr	r3, [pc, #176]	; (8003424 <SendTxData+0x250>)
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	197b      	adds	r3, r7, r5
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	1c59      	adds	r1, r3, #1
 800337a:	197c      	adds	r4, r7, r5
 800337c:	6021      	str	r1, [r4, #0]
 800337e:	18d4      	adds	r4, r2, r3
 8003380:	f7fd f92e 	bl	80005e0 <__aeabi_f2uiz>
 8003384:	0003      	movs	r3, r0
 8003386:	b2db      	uxtb	r3, r3
 8003388:	7023      	strb	r3, [r4, #0]
     AppData.Buffer[i++] = per; // new период включения прибора
 800338a:	4b26      	ldr	r3, [pc, #152]	; (8003424 <SendTxData+0x250>)
 800338c:	685a      	ldr	r2, [r3, #4]
 800338e:	197b      	adds	r3, r7, r5
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	1c59      	adds	r1, r3, #1
 8003394:	1978      	adds	r0, r7, r5
 8003396:	6001      	str	r1, [r0, #0]
 8003398:	18d4      	adds	r4, r2, r3
 800339a:	22b4      	movs	r2, #180	; 0xb4
 800339c:	0052      	lsls	r2, r2, #1
 800339e:	18bb      	adds	r3, r7, r2
 80033a0:	6818      	ldr	r0, [r3, #0]
 80033a2:	f7fd f91d 	bl	80005e0 <__aeabi_f2uiz>
 80033a6:	0003      	movs	r3, r0
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	7023      	strb	r3, [r4, #0]
     // AppData.Buffer[i++] = BAT_CR2032; // new заряд батареи, CR2032 старая батарейка, новая LS14500
  // SYS_GetBatteryLevel(); // new заряд батареи
  GetBatteryLevel(); // new заряд батареи
 80033ac:	f001 fd44 	bl	8004e38 <GetBatteryLevel>
  // AppData.Buffer[i++] = batteryLevel; // new заряд батареи
     AppData.Buffer[i++] = GetBatteryLevel();
 80033b0:	4b1c      	ldr	r3, [pc, #112]	; (8003424 <SendTxData+0x250>)
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	197b      	adds	r3, r7, r5
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	1c59      	adds	r1, r3, #1
 80033ba:	1978      	adds	r0, r7, r5
 80033bc:	6001      	str	r1, [r0, #0]
 80033be:	18d4      	adds	r4, r2, r3
 80033c0:	f001 fd3a 	bl	8004e38 <GetBatteryLevel>
 80033c4:	0003      	movs	r3, r0
 80033c6:	7023      	strb	r3, [r4, #0]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);

	   }
*/
  AppData.BufferSize = i;
 80033c8:	197b      	adds	r3, r7, r5
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	b2da      	uxtb	r2, r3
 80033ce:	4b15      	ldr	r3, [pc, #84]	; (8003424 <SendTxData+0x250>)
 80033d0:	705a      	strb	r2, [r3, #1]
  /*  #endif /* CAYENNE_LPP */

   if (LORAMAC_HANDLER_SUCCESS == LmHandlerSend(&AppData, LORAWAN_DEFAULT_CONFIRMED_MSG_STATE, &nextTxIn, false))
 80033d2:	233c      	movs	r3, #60	; 0x3c
 80033d4:	18fa      	adds	r2, r7, r3
 80033d6:	4813      	ldr	r0, [pc, #76]	; (8003424 <SendTxData+0x250>)
 80033d8:	2300      	movs	r3, #0
 80033da:	2100      	movs	r1, #0
 80033dc:	f00a fef6 	bl	800e1cc <LmHandlerSend>
 80033e0:	1e03      	subs	r3, r0, #0
 80033e2:	d106      	bne.n	80033f2 <SendTxData+0x21e>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 80033e4:	4b1a      	ldr	r3, [pc, #104]	; (8003450 <SendTxData+0x27c>)
 80033e6:	2201      	movs	r2, #1
 80033e8:	2100      	movs	r1, #0
 80033ea:	2001      	movs	r0, #1
 80033ec:	f018 fd1e 	bl	801be2c <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
  }
  /* USER CODE BEGIN SendTxData_2 */
  // HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
  /* USER CODE END SendTxData_2 */
}
 80033f0:	e011      	b.n	8003416 <SendTxData+0x242>
  else if (nextTxIn > 0)
 80033f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00e      	beq.n	8003416 <SendTxData+0x242>
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 80033f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033fa:	22fa      	movs	r2, #250	; 0xfa
 80033fc:	0091      	lsls	r1, r2, #2
 80033fe:	0018      	movs	r0, r3
 8003400:	f7fc fe94 	bl	800012c <__udivsi3>
 8003404:	0003      	movs	r3, r0
 8003406:	001a      	movs	r2, r3
 8003408:	4b12      	ldr	r3, [pc, #72]	; (8003454 <SendTxData+0x280>)
 800340a:	9200      	str	r2, [sp, #0]
 800340c:	2201      	movs	r2, #1
 800340e:	2100      	movs	r1, #0
 8003410:	2001      	movs	r0, #1
 8003412:	f018 fd0b 	bl	801be2c <UTIL_ADV_TRACE_COND_FSend>
}
 8003416:	46c0      	nop			; (mov r8, r8)
 8003418:	46bd      	mov	sp, r7
 800341a:	b063      	add	sp, #396	; 0x18c
 800341c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800341e:	46c0      	nop			; (mov r8, r8)
 8003420:	fffffe7e 	.word	0xfffffe7e
 8003424:	20000000 	.word	0x20000000
 8003428:	2000144c 	.word	0x2000144c
 800342c:	20001560 	.word	0x20001560
 8003430:	20001534 	.word	0x20001534
 8003434:	200013a4 	.word	0x200013a4
 8003438:	0801ea50 	.word	0x0801ea50
 800343c:	41f00000 	.word	0x41f00000
 8003440:	0801ea7c 	.word	0x0801ea7c
 8003444:	0801eaa8 	.word	0x0801eaa8
 8003448:	41200000 	.word	0x41200000
 800344c:	0801eac8 	.word	0x0801eac8
 8003450:	0801eae8 	.word	0x0801eae8
 8003454:	0801eaf8 	.word	0x0801eaf8

08003458 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 8003460:	2100      	movs	r1, #0
 8003462:	2002      	movs	r0, #2
 8003464:	f019 f9aa 	bl	801c7bc <UTIL_SEQ_SetTask>
 // HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 8003468:	4b03      	ldr	r3, [pc, #12]	; (8003478 <OnTxTimerEvent+0x20>)
 800346a:	0018      	movs	r0, r3
 800346c:	f019 fbaa 	bl	801cbc4 <UTIL_TIMER_Start>
 // UTIL_TIMER_Stop(&TxTimer); // попытка передать только одно сообщение
//HAL_LPTIM_Counter_Start_IT(&hlptim1,1000);
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 8003470:	46c0      	nop			; (mov r8, r8)
 8003472:	46bd      	mov	sp, r7
 8003474:	b002      	add	sp, #8
 8003476:	bd80      	pop	{r7, pc}
 8003478:	2000034c 	.word	0x2000034c

0800347c <OnTxTimerLedEvent>:

static void OnTxTimerLedEvent(void *context)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerLedEvent_1 */

  /* USER CODE END OnTxTimerLedEvent_1 */
  LED_Off(LED_RED2);
 8003484:	2003      	movs	r0, #3
 8003486:	f002 fc23 	bl	8005cd0 <BSP_LED_Off>
  /* USER CODE BEGIN OnTxTimerLedEvent_2 */

  /* USER CODE END OnTxTimerLedEvent_2 */
}
 800348a:	46c0      	nop			; (mov r8, r8)
 800348c:	46bd      	mov	sp, r7
 800348e:	b002      	add	sp, #8
 8003490:	bd80      	pop	{r7, pc}

08003492 <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 8003492:	b580      	push	{r7, lr}
 8003494:	b082      	sub	sp, #8
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnRxTimerLedEvent_1 */

  /* USER CODE END OnRxTimerLedEvent_1 */
  LED_Off(LED_BLUE) ;
 800349a:	2002      	movs	r0, #2
 800349c:	f002 fc18 	bl	8005cd0 <BSP_LED_Off>
  /* USER CODE BEGIN OnRxTimerLedEvent_2 */

  /* USER CODE END OnRxTimerLedEvent_2 */
}
 80034a0:	46c0      	nop			; (mov r8, r8)
 80034a2:	46bd      	mov	sp, r7
 80034a4:	b002      	add	sp, #8
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinTimerLedEvent_1 */

  /* USER CODE END OnJoinTimerLedEvent_1 */
  LED_Toggle(LED_RED1) ;
 80034b0:	2001      	movs	r0, #1
 80034b2:	f002 fc29 	bl	8005d08 <BSP_LED_Toggle>
  /* USER CODE BEGIN OnJoinTimerLedEvent_2 */

  /* USER CODE END OnJoinTimerLedEvent_2 */
}
 80034b6:	46c0      	nop			; (mov r8, r8)
 80034b8:	46bd      	mov	sp, r7
 80034ba:	b002      	add	sp, #8
 80034bc:	bd80      	pop	{r7, pc}
	...

080034c0 <OnTxData>:

static void OnTxData(LmHandlerTxParams_t *params)
{
 80034c0:	b5b0      	push	{r4, r5, r7, lr}
 80034c2:	b088      	sub	sp, #32
 80034c4:	af06      	add	r7, sp, #24
 80034c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */

  /* USER CODE END OnTxData_1 */
  if ((params != NULL) && (params->IsMcpsConfirm != 0))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d072      	beq.n	80035b4 <OnTxData+0xf4>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d06e      	beq.n	80035b4 <OnTxData+0xf4>
  {
    LED_On(LED_RED2) ;
 80034d6:	2003      	movs	r0, #3
 80034d8:	f002 fbde 	bl	8005c98 <BSP_LED_On>
   // LED_Off(LED_RED2);

    UTIL_TIMER_Start(&TxLedTimer);
 80034dc:	4b37      	ldr	r3, [pc, #220]	; (80035bc <OnTxData+0xfc>)
 80034de:	0018      	movs	r0, r3
 80034e0:	f019 fb70 	bl	801cbc4 <UTIL_TIMER_Start>
    //HAL_LPTIM_Counter_Start_IT(&TxTimer,1000);
    APP_LOG(TS_OFF, VLEVEL_M, "###### U/L Передача информации :%d", params->AppData.Buffer);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	4a35      	ldr	r2, [pc, #212]	; (80035c0 <OnTxData+0x100>)
 80034ea:	9300      	str	r3, [sp, #0]
 80034ec:	0013      	movs	r3, r2
 80034ee:	2200      	movs	r2, #0
 80034f0:	2100      	movs	r1, #0
 80034f2:	2002      	movs	r0, #2
 80034f4:	f018 fc9a 	bl	801be2c <UTIL_ADV_TRACE_COND_FSend>
//    APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirmation =============\r\n");
    APP_LOG(TS_OFF, VLEVEL_M, "\r\n######  MCPS Подтверждение \r\n");
 80034f8:	4b32      	ldr	r3, [pc, #200]	; (80035c4 <OnTxData+0x104>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	2100      	movs	r1, #0
 80034fe:	2002      	movs	r0, #2
 8003500:	f018 fc94 	bl	801be2c <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d | Channel:%d", params->UplinkCounter,
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	7b12      	ldrb	r2, [r2, #12]
 800350c:	0011      	movs	r1, r2
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	7912      	ldrb	r2, [r2, #4]
 8003512:	b252      	sxtb	r2, r2
 8003514:	0010      	movs	r0, r2
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	7d12      	ldrb	r2, [r2, #20]
 800351a:	b252      	sxtb	r2, r2
 800351c:	0014      	movs	r4, r2
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	7d52      	ldrb	r2, [r2, #21]
 8003522:	0015      	movs	r5, r2
 8003524:	4a28      	ldr	r2, [pc, #160]	; (80035c8 <OnTxData+0x108>)
 8003526:	9504      	str	r5, [sp, #16]
 8003528:	9403      	str	r4, [sp, #12]
 800352a:	9002      	str	r0, [sp, #8]
 800352c:	9101      	str	r1, [sp, #4]
 800352e:	9300      	str	r3, [sp, #0]
 8003530:	0013      	movs	r3, r2
 8003532:	2200      	movs	r2, #0
 8003534:	2100      	movs	r1, #0
 8003536:	2003      	movs	r0, #3
 8003538:	f018 fc78 	bl	801be2c <UTIL_ADV_TRACE_COND_FSend>
            params->AppData.Port, params->Datarate, params->TxPower,params->Channel);
    APP_LOG(TS_OFF, VLEVEL_M, "###### U/L КАДР:%04d | ПОРТ:%d | Канал скорости передачи данных:%d | Мощность:%d | Канал:%d", params->UplinkCounter,
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	7b12      	ldrb	r2, [r2, #12]
 8003544:	0011      	movs	r1, r2
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	7912      	ldrb	r2, [r2, #4]
 800354a:	b252      	sxtb	r2, r2
 800354c:	0010      	movs	r0, r2
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	7d12      	ldrb	r2, [r2, #20]
 8003552:	b252      	sxtb	r2, r2
 8003554:	0014      	movs	r4, r2
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	7d52      	ldrb	r2, [r2, #21]
 800355a:	0015      	movs	r5, r2
 800355c:	4a1b      	ldr	r2, [pc, #108]	; (80035cc <OnTxData+0x10c>)
 800355e:	9504      	str	r5, [sp, #16]
 8003560:	9403      	str	r4, [sp, #12]
 8003562:	9002      	str	r0, [sp, #8]
 8003564:	9101      	str	r1, [sp, #4]
 8003566:	9300      	str	r3, [sp, #0]
 8003568:	0013      	movs	r3, r2
 800356a:	2200      	movs	r2, #0
 800356c:	2100      	movs	r1, #0
 800356e:	2002      	movs	r0, #2
 8003570:	f018 fc5c 	bl	801be2c <UTIL_ADV_TRACE_COND_FSend>
                params->AppData.Port, params->Datarate, params->TxPower,params->Channel);
    APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 8003574:	4b16      	ldr	r3, [pc, #88]	; (80035d0 <OnTxData+0x110>)
 8003576:	2200      	movs	r2, #0
 8003578:	2100      	movs	r1, #0
 800357a:	2003      	movs	r0, #3
 800357c:	f018 fc56 	bl	801be2c <UTIL_ADV_TRACE_COND_FSend>
//    APP_LOG(TS_OFF, VLEVEL_M, " | c:");
    if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	789b      	ldrb	r3, [r3, #2]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d10f      	bne.n	80035a8 <OnTxData+0xe8>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	78db      	ldrb	r3, [r3, #3]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d001      	beq.n	8003594 <OnTxData+0xd4>
 8003590:	4b10      	ldr	r3, [pc, #64]	; (80035d4 <OnTxData+0x114>)
 8003592:	e000      	b.n	8003596 <OnTxData+0xd6>
 8003594:	4b10      	ldr	r3, [pc, #64]	; (80035d8 <OnTxData+0x118>)
 8003596:	4a11      	ldr	r2, [pc, #68]	; (80035dc <OnTxData+0x11c>)
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	0013      	movs	r3, r2
 800359c:	2200      	movs	r2, #0
 800359e:	2100      	movs	r1, #0
 80035a0:	2003      	movs	r0, #3
 80035a2:	f018 fc43 	bl	801be2c <UTIL_ADV_TRACE_COND_FSend>
  }

  /* USER CODE BEGIN OnTxData_2 */

  /* USER CODE END OnTxData_2 */
}
 80035a6:	e005      	b.n	80035b4 <OnTxData+0xf4>
      APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 80035a8:	4b0d      	ldr	r3, [pc, #52]	; (80035e0 <OnTxData+0x120>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	2100      	movs	r1, #0
 80035ae:	2003      	movs	r0, #3
 80035b0:	f018 fc3c 	bl	801be2c <UTIL_ADV_TRACE_COND_FSend>
}
 80035b4:	46c0      	nop			; (mov r8, r8)
 80035b6:	46bd      	mov	sp, r7
 80035b8:	b002      	add	sp, #8
 80035ba:	bdb0      	pop	{r4, r5, r7, pc}
 80035bc:	20000364 	.word	0x20000364
 80035c0:	0801eb18 	.word	0x0801eb18
 80035c4:	0801eb50 	.word	0x0801eb50
 80035c8:	0801eb80 	.word	0x0801eb80
 80035cc:	0801ebc0 	.word	0x0801ebc0
 80035d0:	0801ec4c 	.word	0x0801ec4c
 80035d4:	0801ec5c 	.word	0x0801ec5c
 80035d8:	0801ec60 	.word	0x0801ec60
 80035dc:	0801ec68 	.word	0x0801ec68
 80035e0:	0801ec7c 	.word	0x0801ec7c

080035e4 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */

  /* USER CODE END OnJoinRequest_1 */
  if (joinParams != NULL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d02f      	beq.n	8003652 <OnJoinRequest+0x6e>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	785b      	ldrb	r3, [r3, #1]
 80035f6:	b25b      	sxtb	r3, r3
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d124      	bne.n	8003646 <OnJoinRequest+0x62>
    {
      UTIL_TIMER_Stop(&JoinLedTimer);
 80035fc:	4b17      	ldr	r3, [pc, #92]	; (800365c <OnJoinRequest+0x78>)
 80035fe:	0018      	movs	r0, r3
 8003600:	f019 fb58 	bl	801ccb4 <UTIL_TIMER_Stop>

      LED_Off(LED_RED1) ;
 8003604:	2001      	movs	r0, #1
 8003606:	f002 fb63 	bl	8005cd0 <BSP_LED_Off>

//      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n      Подключение удалось  ");
 800360a:	4b15      	ldr	r3, [pc, #84]	; (8003660 <OnJoinRequest+0x7c>)
 800360c:	2200      	movs	r2, #0
 800360e:	2100      	movs	r1, #0
 8003610:	2002      	movs	r0, #2
 8003612:	f018 fc0b 	bl	801be2c <UTIL_ADV_TRACE_COND_FSend>
      //if (joinParams->Mode == ACTIVATION_TYPE_ABP) //
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	789b      	ldrb	r3, [r3, #2]
 800361a:	2b02      	cmp	r3, #2
 800361c:	d106      	bne.n	800362c <OnJoinRequest+0x48>
      {
//        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
        APP_LOG(TS_OFF, VLEVEL_M, "   Активация по персонализации  \r\n");
 800361e:	4b11      	ldr	r3, [pc, #68]	; (8003664 <OnJoinRequest+0x80>)
 8003620:	2200      	movs	r2, #0
 8003622:	2100      	movs	r1, #0
 8003624:	2002      	movs	r0, #2
 8003626:	f018 fc01 	bl	801be2c <UTIL_ADV_TRACE_COND_FSend>
  }

  /* USER CODE BEGIN OnJoinRequest_2 */

  /* USER CODE END OnJoinRequest_2 */
}
 800362a:	e012      	b.n	8003652 <OnJoinRequest+0x6e>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800362c:	4b0e      	ldr	r3, [pc, #56]	; (8003668 <OnJoinRequest+0x84>)
 800362e:	2200      	movs	r2, #0
 8003630:	2100      	movs	r1, #0
 8003632:	2002      	movs	r0, #2
 8003634:	f018 fbfa 	bl	801be2c <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_M, "   Активация по воздуху  \r\n");
 8003638:	4b0c      	ldr	r3, [pc, #48]	; (800366c <OnJoinRequest+0x88>)
 800363a:	2200      	movs	r2, #0
 800363c:	2100      	movs	r1, #0
 800363e:	2002      	movs	r0, #2
 8003640:	f018 fbf4 	bl	801be2c <UTIL_ADV_TRACE_COND_FSend>
}
 8003644:	e005      	b.n	8003652 <OnJoinRequest+0x6e>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 8003646:	4b0a      	ldr	r3, [pc, #40]	; (8003670 <OnJoinRequest+0x8c>)
 8003648:	2200      	movs	r2, #0
 800364a:	2100      	movs	r1, #0
 800364c:	2002      	movs	r0, #2
 800364e:	f018 fbed 	bl	801be2c <UTIL_ADV_TRACE_COND_FSend>
}
 8003652:	46c0      	nop			; (mov r8, r8)
 8003654:	46bd      	mov	sp, r7
 8003656:	b002      	add	sp, #8
 8003658:	bd80      	pop	{r7, pc}
 800365a:	46c0      	nop			; (mov r8, r8)
 800365c:	20000394 	.word	0x20000394
 8003660:	0801ec8c 	.word	0x0801ec8c
 8003664:	0801ecbc 	.word	0x0801ecbc
 8003668:	0801ecf8 	.word	0x0801ecf8
 800366c:	0801ed18 	.word	0x0801ed18
 8003670:	0801ed48 	.word	0x0801ed48

08003674 <MX_LPTIM1_Init>:
  }
  */
/*

 */static void MX_LPTIM1_Init(void) // new
{
 8003674:	b580      	push	{r7, lr}
 8003676:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
	  hlptim1.Instance = LPTIM1;
 8003678:	4b13      	ldr	r3, [pc, #76]	; (80036c8 <MX_LPTIM1_Init+0x54>)
 800367a:	4a14      	ldr	r2, [pc, #80]	; (80036cc <MX_LPTIM1_Init+0x58>)
 800367c:	601a      	str	r2, [r3, #0]
	  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800367e:	4b12      	ldr	r3, [pc, #72]	; (80036c8 <MX_LPTIM1_Init+0x54>)
 8003680:	2200      	movs	r2, #0
 8003682:	605a      	str	r2, [r3, #4]
	  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8003684:	4b10      	ldr	r3, [pc, #64]	; (80036c8 <MX_LPTIM1_Init+0x54>)
 8003686:	2200      	movs	r2, #0
 8003688:	609a      	str	r2, [r3, #8]
	  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 800368a:	4b0f      	ldr	r3, [pc, #60]	; (80036c8 <MX_LPTIM1_Init+0x54>)
 800368c:	2200      	movs	r2, #0
 800368e:	60da      	str	r2, [r3, #12]
	  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 8003690:	4b0d      	ldr	r3, [pc, #52]	; (80036c8 <MX_LPTIM1_Init+0x54>)
 8003692:	2200      	movs	r2, #0
 8003694:	611a      	str	r2, [r3, #16]
	  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8003696:	4b0c      	ldr	r3, [pc, #48]	; (80036c8 <MX_LPTIM1_Init+0x54>)
 8003698:	4a0d      	ldr	r2, [pc, #52]	; (80036d0 <MX_LPTIM1_Init+0x5c>)
 800369a:	615a      	str	r2, [r3, #20]
	  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 800369c:	4b0a      	ldr	r3, [pc, #40]	; (80036c8 <MX_LPTIM1_Init+0x54>)
 800369e:	2200      	movs	r2, #0
 80036a0:	621a      	str	r2, [r3, #32]
	  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80036a2:	4b09      	ldr	r3, [pc, #36]	; (80036c8 <MX_LPTIM1_Init+0x54>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	625a      	str	r2, [r3, #36]	; 0x24
	  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 80036a8:	4b07      	ldr	r3, [pc, #28]	; (80036c8 <MX_LPTIM1_Init+0x54>)
 80036aa:	2280      	movs	r2, #128	; 0x80
 80036ac:	0412      	lsls	r2, r2, #16
 80036ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 80036b0:	4b05      	ldr	r3, [pc, #20]	; (80036c8 <MX_LPTIM1_Init+0x54>)
 80036b2:	0018      	movs	r0, r3
 80036b4:	f001 f82e 	bl	8004714 <HAL_LPTIM_Init>
 80036b8:	1e03      	subs	r3, r0, #0
 80036ba:	d001      	beq.n	80036c0 <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 80036bc:	f000 fb04 	bl	8003cc8 <Error_Handler>
  /*
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 80036c0:	46c0      	nop			; (mov r8, r8)
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	46c0      	nop			; (mov r8, r8)
 80036c8:	2000144c 	.word	0x2000144c
 80036cc:	40007c00 	.word	0x40007c00
 80036d0:	0000ffff 	.word	0x0000ffff

080036d4 <HAL_LPTIM_MspInit>:
  void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
  {
 80036d4:	b590      	push	{r4, r7, lr}
 80036d6:	b089      	sub	sp, #36	; 0x24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036dc:	240c      	movs	r4, #12
 80036de:	193b      	adds	r3, r7, r4
 80036e0:	0018      	movs	r0, r3
 80036e2:	2314      	movs	r3, #20
 80036e4:	001a      	movs	r2, r3
 80036e6:	2100      	movs	r1, #0
 80036e8:	f01a fc89 	bl	801dffe <memset>
    if(hlptim->Instance==LPTIM1)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a1b      	ldr	r2, [pc, #108]	; (8003760 <HAL_LPTIM_MspInit+0x8c>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d130      	bne.n	8003758 <HAL_LPTIM_MspInit+0x84>
    {
    /* USER CODE BEGIN LPTIM1_MspInit 0 */

    /* USER CODE END LPTIM1_MspInit 0 */
      /* Peripheral clock enable */
      __HAL_RCC_LPTIM1_CLK_ENABLE();
 80036f6:	4b1b      	ldr	r3, [pc, #108]	; (8003764 <HAL_LPTIM_MspInit+0x90>)
 80036f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036fa:	4b1a      	ldr	r3, [pc, #104]	; (8003764 <HAL_LPTIM_MspInit+0x90>)
 80036fc:	2180      	movs	r1, #128	; 0x80
 80036fe:	0609      	lsls	r1, r1, #24
 8003700:	430a      	orrs	r2, r1
 8003702:	639a      	str	r2, [r3, #56]	; 0x38

      __HAL_RCC_GPIOB_CLK_ENABLE();
 8003704:	4b17      	ldr	r3, [pc, #92]	; (8003764 <HAL_LPTIM_MspInit+0x90>)
 8003706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003708:	4b16      	ldr	r3, [pc, #88]	; (8003764 <HAL_LPTIM_MspInit+0x90>)
 800370a:	2102      	movs	r1, #2
 800370c:	430a      	orrs	r2, r1
 800370e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003710:	4b14      	ldr	r3, [pc, #80]	; (8003764 <HAL_LPTIM_MspInit+0x90>)
 8003712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003714:	2202      	movs	r2, #2
 8003716:	4013      	ands	r3, r2
 8003718:	60bb      	str	r3, [r7, #8]
 800371a:	68bb      	ldr	r3, [r7, #8]
      /**LPTIM1 GPIO Configuration
      PB5     ------> LPTIM1_IN1
      PB7     ------> LPTIM1_IN2
      */
      GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800371c:	0021      	movs	r1, r4
 800371e:	187b      	adds	r3, r7, r1
 8003720:	22a0      	movs	r2, #160	; 0xa0
 8003722:	601a      	str	r2, [r3, #0]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003724:	187b      	adds	r3, r7, r1
 8003726:	2202      	movs	r2, #2
 8003728:	605a      	str	r2, [r3, #4]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 800372a:	187b      	adds	r3, r7, r1
 800372c:	2200      	movs	r2, #0
 800372e:	609a      	str	r2, [r3, #8]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003730:	187b      	adds	r3, r7, r1
 8003732:	2200      	movs	r2, #0
 8003734:	60da      	str	r2, [r3, #12]
      GPIO_InitStruct.Alternate = GPIO_AF2_LPTIM1;
 8003736:	187b      	adds	r3, r7, r1
 8003738:	2202      	movs	r2, #2
 800373a:	611a      	str	r2, [r3, #16]
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800373c:	187b      	adds	r3, r7, r1
 800373e:	4a0a      	ldr	r2, [pc, #40]	; (8003768 <HAL_LPTIM_MspInit+0x94>)
 8003740:	0019      	movs	r1, r3
 8003742:	0010      	movs	r0, r2
 8003744:	f004 f8b8 	bl	80078b8 <HAL_GPIO_Init>

      /* LPTIM1 interrupt Init */
      HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8003748:	2200      	movs	r2, #0
 800374a:	2100      	movs	r1, #0
 800374c:	200d      	movs	r0, #13
 800374e:	f003 fd87 	bl	8007260 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8003752:	200d      	movs	r0, #13
 8003754:	f003 fd99 	bl	800728a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN LPTIM1_MspInit 1 */

    /* USER CODE END LPTIM1_MspInit 1 */
    }

  }
 8003758:	46c0      	nop			; (mov r8, r8)
 800375a:	46bd      	mov	sp, r7
 800375c:	b009      	add	sp, #36	; 0x24
 800375e:	bd90      	pop	{r4, r7, pc}
 8003760:	40007c00 	.word	0x40007c00
 8003764:	40021000 	.word	0x40021000
 8003768:	50000400 	.word	0x50000400

0800376c <OnMacProcessNotify>:
    }

  }

static void OnMacProcessNotify(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 8003770:	2100      	movs	r1, #0
 8003772:	2001      	movs	r0, #1
 8003774:	f019 f822 	bl	801c7bc <UTIL_SEQ_SetTask>
  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 8003778:	46c0      	nop			; (mov r8, r8)
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
	...

08003780 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 8003784:	4b12      	ldr	r3, [pc, #72]	; (80037d0 <LoraInfo_Init+0x50>)
 8003786:	2200      	movs	r2, #0
 8003788:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800378a:	4b11      	ldr	r3, [pc, #68]	; (80037d0 <LoraInfo_Init+0x50>)
 800378c:	2200      	movs	r2, #0
 800378e:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 8003790:	4b0f      	ldr	r3, [pc, #60]	; (80037d0 <LoraInfo_Init+0x50>)
 8003792:	2200      	movs	r2, #0
 8003794:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 8003796:	4b0e      	ldr	r3, [pc, #56]	; (80037d0 <LoraInfo_Init+0x50>)
 8003798:	2200      	movs	r2, #0
 800379a:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433) ;
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868) ;
 800379c:	4b0c      	ldr	r3, [pc, #48]	; (80037d0 <LoraInfo_Init+0x50>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	2220      	movs	r2, #32
 80037a2:	431a      	orrs	r2, r3
 80037a4:	4b0a      	ldr	r3, [pc, #40]	; (80037d0 <LoraInfo_Init+0x50>)
 80037a6:	605a      	str	r2, [r3, #4]
#endif /* REGION_US915 */
#ifdef REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864) ;
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 80037a8:	4b09      	ldr	r3, [pc, #36]	; (80037d0 <LoraInfo_Init+0x50>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d106      	bne.n	80037be <LoraInfo_Init+0x3e>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 80037b0:	4b08      	ldr	r3, [pc, #32]	; (80037d4 <LoraInfo_Init+0x54>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	2100      	movs	r1, #0
 80037b6:	2000      	movs	r0, #0
 80037b8:	f018 fb38 	bl	801be2c <UTIL_ADV_TRACE_COND_FSend>
    while (1) {} /* At least one region shall be defined */
 80037bc:	e7fe      	b.n	80037bc <LoraInfo_Init+0x3c>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 80037be:	4b04      	ldr	r3, [pc, #16]	; (80037d0 <LoraInfo_Init+0x50>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 80037c4:	4b02      	ldr	r3, [pc, #8]	; (80037d0 <LoraInfo_Init+0x50>)
 80037c6:	2203      	movs	r2, #3
 80037c8:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALISATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 80037ca:	46c0      	nop			; (mov r8, r8)
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	200003ac 	.word	0x200003ac
 80037d4:	0801edb0 	.word	0x0801edb0

080037d8 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 80037dc:	4b01      	ldr	r3, [pc, #4]	; (80037e4 <LoraInfo_GetPtr+0xc>)
}
 80037de:	0018      	movs	r0, r3
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	200003ac 	.word	0x200003ac

080037e8 <MX_ADC_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC init function */
void MX_ADC_Init(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	af00      	add	r7, sp, #0

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance  = ADC1;
 80037ec:	4b22      	ldr	r3, [pc, #136]	; (8003878 <MX_ADC_Init+0x90>)
 80037ee:	4a23      	ldr	r2, [pc, #140]	; (800387c <MX_ADC_Init+0x94>)
 80037f0:	601a      	str	r2, [r3, #0]

  hadc1.Init.OversamplingMode      = DISABLE;
 80037f2:	4b21      	ldr	r3, [pc, #132]	; (8003878 <MX_ADC_Init+0x90>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	63da      	str	r2, [r3, #60]	; 0x3c

  hadc1.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 80037f8:	4b1f      	ldr	r3, [pc, #124]	; (8003878 <MX_ADC_Init+0x90>)
 80037fa:	2280      	movs	r2, #128	; 0x80
 80037fc:	0612      	lsls	r2, r2, #24
 80037fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.LowPowerAutoPowerOff  = DISABLE;
 8003800:	4b1d      	ldr	r3, [pc, #116]	; (8003878 <MX_ADC_Init+0x90>)
 8003802:	2200      	movs	r2, #0
 8003804:	61da      	str	r2, [r3, #28]
  hadc1.Init.LowPowerFrequencyMode = ENABLE;
 8003806:	4b1c      	ldr	r3, [pc, #112]	; (8003878 <MX_ADC_Init+0x90>)
 8003808:	2201      	movs	r2, #1
 800380a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.LowPowerAutoWait      = DISABLE;
 800380c:	4b1a      	ldr	r3, [pc, #104]	; (8003878 <MX_ADC_Init+0x90>)
 800380e:	2200      	movs	r2, #0
 8003810:	619a      	str	r2, [r3, #24]
  hadc1.Init.Resolution            = ADC_RESOLUTION_12B;
 8003812:	4b19      	ldr	r3, [pc, #100]	; (8003878 <MX_ADC_Init+0x90>)
 8003814:	2200      	movs	r2, #0
 8003816:	609a      	str	r2, [r3, #8]
  hadc1.Init.SamplingTime          = ADC_SAMPLETIME_160CYCLES_5;
 8003818:	4b17      	ldr	r3, [pc, #92]	; (8003878 <MX_ADC_Init+0x90>)
 800381a:	2207      	movs	r2, #7
 800381c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.ScanConvMode          = ADC_SCAN_DIRECTION_FORWARD;
 800381e:	4b16      	ldr	r3, [pc, #88]	; (8003878 <MX_ADC_Init+0x90>)
 8003820:	2201      	movs	r2, #1
 8003822:	611a      	str	r2, [r3, #16]
  hadc1.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 8003824:	4b14      	ldr	r3, [pc, #80]	; (8003878 <MX_ADC_Init+0x90>)
 8003826:	2200      	movs	r2, #0
 8003828:	60da      	str	r2, [r3, #12]
  hadc1.Init.ContinuousConvMode    = DISABLE;
 800382a:	4b13      	ldr	r3, [pc, #76]	; (8003878 <MX_ADC_Init+0x90>)
 800382c:	2220      	movs	r2, #32
 800382e:	2100      	movs	r1, #0
 8003830:	5499      	strb	r1, [r3, r2]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003832:	4b11      	ldr	r3, [pc, #68]	; (8003878 <MX_ADC_Init+0x90>)
 8003834:	2221      	movs	r2, #33	; 0x21
 8003836:	2100      	movs	r1, #0
 8003838:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800383a:	4b0f      	ldr	r3, [pc, #60]	; (8003878 <MX_ADC_Init+0x90>)
 800383c:	2200      	movs	r2, #0
 800383e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 8003840:	4b0d      	ldr	r3, [pc, #52]	; (8003878 <MX_ADC_Init+0x90>)
 8003842:	2204      	movs	r2, #4
 8003844:	615a      	str	r2, [r3, #20]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003846:	4b0c      	ldr	r3, [pc, #48]	; (8003878 <MX_ADC_Init+0x90>)
 8003848:	222c      	movs	r2, #44	; 0x2c
 800384a:	2100      	movs	r1, #0
 800384c:	5499      	strb	r1, [r3, r2]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800384e:	4b0a      	ldr	r3, [pc, #40]	; (8003878 <MX_ADC_Init+0x90>)
 8003850:	0018      	movs	r0, r3
 8003852:	f002 fed3 	bl	80065fc <HAL_ADC_Init>
 8003856:	1e03      	subs	r3, r0, #0
 8003858:	d001      	beq.n	800385e <MX_ADC_Init+0x76>
  {
    Error_Handler();
 800385a:	f000 fa35 	bl	8003cc8 <Error_Handler>
  }

  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 800385e:	4b06      	ldr	r3, [pc, #24]	; (8003878 <MX_ADC_Init+0x90>)
 8003860:	2100      	movs	r1, #0
 8003862:	0018      	movs	r0, r3
 8003864:	f003 fbbc 	bl	8006fe0 <HAL_ADCEx_Calibration_Start>
 8003868:	1e03      	subs	r3, r0, #0
 800386a:	d001      	beq.n	8003870 <MX_ADC_Init+0x88>
  {
    Error_Handler();
 800386c:	f000 fa2c 	bl	8003cc8 <Error_Handler>
  }
}
 8003870:	46c0      	nop			; (mov r8, r8)
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	46c0      	nop			; (mov r8, r8)
 8003878:	200013f0 	.word	0x200013f0
 800387c:	40012400 	.word	0x40012400

08003880 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle)
{
 8003880:	b590      	push	{r4, r7, lr}
 8003882:	b089      	sub	sp, #36	; 0x24
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]

  if (adcHandle->Instance == ADC1)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a12      	ldr	r2, [pc, #72]	; (80038d8 <HAL_ADC_MspInit+0x58>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d11e      	bne.n	80038d0 <HAL_ADC_MspInit+0x50>
  {
    /* USER CODE BEGIN ADC_MspInit 0 */
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003892:	240c      	movs	r4, #12
 8003894:	193b      	adds	r3, r7, r4
 8003896:	0018      	movs	r0, r3
 8003898:	2314      	movs	r3, #20
 800389a:	001a      	movs	r2, r3
 800389c:	2100      	movs	r1, #0
 800389e:	f01a fbae 	bl	801dffe <memset>

    /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80038a2:	4b0e      	ldr	r3, [pc, #56]	; (80038dc <HAL_ADC_MspInit+0x5c>)
 80038a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038a6:	4b0d      	ldr	r3, [pc, #52]	; (80038dc <HAL_ADC_MspInit+0x5c>)
 80038a8:	2180      	movs	r1, #128	; 0x80
 80038aa:	0089      	lsls	r1, r1, #2
 80038ac:	430a      	orrs	r2, r1
 80038ae:	635a      	str	r2, [r3, #52]	; 0x34
    /* USER CODE BEGIN ADC_MspInit 1 */
    GPIO_InitStruct.Pin = GPIO_PIN_4; //N
 80038b0:	193b      	adds	r3, r7, r4
 80038b2:	2210      	movs	r2, #16
 80038b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG; //N
 80038b6:	193b      	adds	r3, r7, r4
 80038b8:	2203      	movs	r2, #3
 80038ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL; //N
 80038bc:	193b      	adds	r3, r7, r4
 80038be:	2200      	movs	r2, #0
 80038c0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //N
 80038c2:	193a      	adds	r2, r7, r4
 80038c4:	23a0      	movs	r3, #160	; 0xa0
 80038c6:	05db      	lsls	r3, r3, #23
 80038c8:	0011      	movs	r1, r2
 80038ca:	0018      	movs	r0, r3
 80038cc:	f003 fff4 	bl	80078b8 <HAL_GPIO_Init>
    /* USER CODE END ADC_MspInit 1
     * */
  }
}
 80038d0:	46c0      	nop			; (mov r8, r8)
 80038d2:	46bd      	mov	sp, r7
 80038d4:	b009      	add	sp, #36	; 0x24
 80038d6:	bd90      	pop	{r4, r7, pc}
 80038d8:	40012400 	.word	0x40012400
 80038dc:	40021000 	.word	0x40021000

080038e0 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef *adcHandle)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]

  if (adcHandle->Instance == ADC1)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a0f      	ldr	r2, [pc, #60]	; (800392c <HAL_ADC_MspDeInit+0x4c>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d118      	bne.n	8003924 <HAL_ADC_MspDeInit+0x44>
  {
    /* USER CODE BEGIN ADC_MspDeInit 0 */

    /* USER CODE END ADC_MspDeInit 0 */

    __HAL_RCC_ADC1_FORCE_RESET();
 80038f2:	4b0f      	ldr	r3, [pc, #60]	; (8003930 <HAL_ADC_MspDeInit+0x50>)
 80038f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038f6:	4b0e      	ldr	r3, [pc, #56]	; (8003930 <HAL_ADC_MspDeInit+0x50>)
 80038f8:	2180      	movs	r1, #128	; 0x80
 80038fa:	0089      	lsls	r1, r1, #2
 80038fc:	430a      	orrs	r2, r1
 80038fe:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_RCC_ADC1_RELEASE_RESET();
 8003900:	4b0b      	ldr	r3, [pc, #44]	; (8003930 <HAL_ADC_MspDeInit+0x50>)
 8003902:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003904:	4b0a      	ldr	r3, [pc, #40]	; (8003930 <HAL_ADC_MspDeInit+0x50>)
 8003906:	490b      	ldr	r1, [pc, #44]	; (8003934 <HAL_ADC_MspDeInit+0x54>)
 8003908:	400a      	ands	r2, r1
 800390a:	625a      	str	r2, [r3, #36]	; 0x24
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 800390c:	4b08      	ldr	r3, [pc, #32]	; (8003930 <HAL_ADC_MspDeInit+0x50>)
 800390e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003910:	4b07      	ldr	r3, [pc, #28]	; (8003930 <HAL_ADC_MspDeInit+0x50>)
 8003912:	4908      	ldr	r1, [pc, #32]	; (8003934 <HAL_ADC_MspDeInit+0x54>)
 8003914:	400a      	ands	r2, r1
 8003916:	635a      	str	r2, [r3, #52]	; 0x34
    /* USER CODE BEGIN ADC_MspDeInit 1 */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);//N
 8003918:	23a0      	movs	r3, #160	; 0xa0
 800391a:	05db      	lsls	r3, r3, #23
 800391c:	2110      	movs	r1, #16
 800391e:	0018      	movs	r0, r3
 8003920:	f004 f948 	bl	8007bb4 <HAL_GPIO_DeInit>
    /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8003924:	46c0      	nop			; (mov r8, r8)
 8003926:	46bd      	mov	sp, r7
 8003928:	b002      	add	sp, #8
 800392a:	bd80      	pop	{r7, pc}
 800392c:	40012400 	.word	0x40012400
 8003930:	40021000 	.word	0x40021000
 8003934:	fffffdff 	.word	0xfffffdff

08003938 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc1.Instance = ADC1;
 800393c:	4b02      	ldr	r3, [pc, #8]	; (8003948 <SYS_InitMeasurement+0x10>)
 800393e:	4a03      	ldr	r2, [pc, #12]	; (800394c <SYS_InitMeasurement+0x14>)
 8003940:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 8003942:	46c0      	nop			; (mov r8, r8)
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	200013f0 	.word	0x200013f0
 800394c:	40012400 	.word	0x40012400

08003950 <SYS_GetTemperatureLevel>:

  /* USER CODE END SYS_DeInitMeasurement_1 */
}

int16_t SYS_GetTemperatureLevel(void)
{
 8003950:	b5b0      	push	{r4, r5, r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SYS_GetTemperatureLevel_1 */

  /* USER CODE END SYS_GetTemperatureLevel_1 */
  int16_t temperatureDegreeC = 0;
 8003956:	250e      	movs	r5, #14
 8003958:	197b      	adds	r3, r7, r5
 800395a:	2200      	movs	r2, #0
 800395c:	801a      	strh	r2, [r3, #0]
  uint32_t measuredLevel = 0;
 800395e:	2300      	movs	r3, #0
 8003960:	60bb      	str	r3, [r7, #8]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 8003962:	1dbc      	adds	r4, r7, #6
 8003964:	f000 f84c 	bl	8003a00 <SYS_GetBatteryLevel>
 8003968:	0003      	movs	r3, r0
 800396a:	8023      	strh	r3, [r4, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 800396c:	4b1f      	ldr	r3, [pc, #124]	; (80039ec <SYS_GetTemperatureLevel+0x9c>)
 800396e:	0018      	movs	r0, r3
 8003970:	f000 f874 	bl	8003a5c <ADC_ReadChannels>
 8003974:	0003      	movs	r3, r0
 8003976:	60bb      	str	r3, [r7, #8]

  temperatureDegreeC = COMPUTE_TEMPERATURE(measuredLevel, batteryLevelmV);
 8003978:	1dbb      	adds	r3, r7, #6
 800397a:	881b      	ldrh	r3, [r3, #0]
 800397c:	68ba      	ldr	r2, [r7, #8]
 800397e:	4353      	muls	r3, r2
 8003980:	491b      	ldr	r1, [pc, #108]	; (80039f0 <SYS_GetTemperatureLevel+0xa0>)
 8003982:	0018      	movs	r0, r3
 8003984:	f7fc fbd2 	bl	800012c <__udivsi3>
 8003988:	0003      	movs	r3, r0
 800398a:	001a      	movs	r2, r3
 800398c:	4b19      	ldr	r3, [pc, #100]	; (80039f4 <SYS_GetTemperatureLevel+0xa4>)
 800398e:	881b      	ldrh	r3, [r3, #0]
 8003990:	1ad2      	subs	r2, r2, r3
 8003992:	0013      	movs	r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	189b      	adds	r3, r3, r2
 8003998:	011b      	lsls	r3, r3, #4
 800399a:	021b      	lsls	r3, r3, #8
 800399c:	4a16      	ldr	r2, [pc, #88]	; (80039f8 <SYS_GetTemperatureLevel+0xa8>)
 800399e:	8812      	ldrh	r2, [r2, #0]
 80039a0:	0011      	movs	r1, r2
 80039a2:	4a14      	ldr	r2, [pc, #80]	; (80039f4 <SYS_GetTemperatureLevel+0xa4>)
 80039a4:	8812      	ldrh	r2, [r2, #0]
 80039a6:	1a8a      	subs	r2, r1, r2
 80039a8:	0011      	movs	r1, r2
 80039aa:	0018      	movs	r0, r3
 80039ac:	f7fc fc48 	bl	8000240 <__divsi3>
 80039b0:	0003      	movs	r3, r0
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	22f0      	movs	r2, #240	; 0xf0
 80039b6:	0152      	lsls	r2, r2, #5
 80039b8:	4694      	mov	ip, r2
 80039ba:	4463      	add	r3, ip
 80039bc:	b29a      	uxth	r2, r3
 80039be:	197b      	adds	r3, r7, r5
 80039c0:	801a      	strh	r2, [r3, #0]

  APP_LOG(TS_ON, VLEVEL_L, "temp= %d\n\r", temperatureDegreeC >> 8);
 80039c2:	197b      	adds	r3, r7, r5
 80039c4:	2200      	movs	r2, #0
 80039c6:	5e9b      	ldrsh	r3, [r3, r2]
 80039c8:	121b      	asrs	r3, r3, #8
 80039ca:	b21b      	sxth	r3, r3
 80039cc:	001a      	movs	r2, r3
 80039ce:	4b0b      	ldr	r3, [pc, #44]	; (80039fc <SYS_GetTemperatureLevel+0xac>)
 80039d0:	9200      	str	r2, [sp, #0]
 80039d2:	2201      	movs	r2, #1
 80039d4:	2100      	movs	r1, #0
 80039d6:	2001      	movs	r0, #1
 80039d8:	f018 fa28 	bl	801be2c <UTIL_ADV_TRACE_COND_FSend>

  return (int16_t) temperatureDegreeC;
 80039dc:	197b      	adds	r3, r7, r5
 80039de:	2200      	movs	r2, #0
 80039e0:	5e9b      	ldrsh	r3, [r3, r2]
  /* USER CODE BEGIN SYS_GetTemperatureLevel_2 */

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}
 80039e2:	0018      	movs	r0, r3
 80039e4:	46bd      	mov	sp, r7
 80039e6:	b004      	add	sp, #16
 80039e8:	bdb0      	pop	{r4, r5, r7, pc}
 80039ea:	46c0      	nop			; (mov r8, r8)
 80039ec:	48040000 	.word	0x48040000
 80039f0:	00000bb8 	.word	0x00000bb8
 80039f4:	1ff8007a 	.word	0x1ff8007a
 80039f8:	1ff8007e 	.word	0x1ff8007e
 80039fc:	0801ee00 	.word	0x0801ee00

08003a00 <SYS_GetBatteryLevel>:

uint16_t SYS_GetBatteryLevel(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 8003a06:	1dbb      	adds	r3, r7, #6
 8003a08:	2200      	movs	r2, #0
 8003a0a:	801a      	strh	r2, [r3, #0]
  uint32_t measuredLevel = 0;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8003a10:	4b0f      	ldr	r3, [pc, #60]	; (8003a50 <SYS_GetBatteryLevel+0x50>)
 8003a12:	0018      	movs	r0, r3
 8003a14:	f000 f822 	bl	8003a5c <ADC_ReadChannels>
 8003a18:	0003      	movs	r3, r0
 8003a1a:	603b      	str	r3, [r7, #0]

  if (measuredLevel == 0)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d103      	bne.n	8003a2a <SYS_GetBatteryLevel+0x2a>
  {
    batteryLevelmV = 0;
 8003a22:	1dbb      	adds	r3, r7, #6
 8003a24:	2200      	movs	r2, #0
 8003a26:	801a      	strh	r2, [r3, #0]
 8003a28:	e00c      	b.n	8003a44 <SYS_GetBatteryLevel+0x44>
  }
  else
  {
    batteryLevelmV = (((uint32_t) VDDA_VREFINT_CAL * (*VREFINT_CAL)) / measuredLevel);
 8003a2a:	4b0a      	ldr	r3, [pc, #40]	; (8003a54 <SYS_GetBatteryLevel+0x54>)
 8003a2c:	881b      	ldrh	r3, [r3, #0]
 8003a2e:	001a      	movs	r2, r3
 8003a30:	4b09      	ldr	r3, [pc, #36]	; (8003a58 <SYS_GetBatteryLevel+0x58>)
 8003a32:	4353      	muls	r3, r2
 8003a34:	6839      	ldr	r1, [r7, #0]
 8003a36:	0018      	movs	r0, r3
 8003a38:	f7fc fb78 	bl	800012c <__udivsi3>
 8003a3c:	0003      	movs	r3, r0
 8003a3e:	001a      	movs	r2, r3
 8003a40:	1dbb      	adds	r3, r7, #6
 8003a42:	801a      	strh	r2, [r3, #0]
  }

  return batteryLevelmV;
 8003a44:	1dbb      	adds	r3, r7, #6
 8003a46:	881b      	ldrh	r3, [r3, #0]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 8003a48:	0018      	movs	r0, r3
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	b002      	add	sp, #8
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	44020000 	.word	0x44020000
 8003a54:	1ff80078 	.word	0x1ff80078
 8003a58:	00000bb8 	.word	0x00000bb8

08003a5c <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8003a5c:	b590      	push	{r4, r7, lr}
 8003a5e:	b087      	sub	sp, #28
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8003a64:	2300      	movs	r3, #0
 8003a66:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003a68:	230c      	movs	r3, #12
 8003a6a:	18fb      	adds	r3, r7, r3
 8003a6c:	0018      	movs	r0, r3
 8003a6e:	2308      	movs	r3, #8
 8003a70:	001a      	movs	r2, r3
 8003a72:	2100      	movs	r1, #0
 8003a74:	f01a fac3 	bl	801dffe <memset>

  MX_ADC_Init();
 8003a78:	f7ff feb6 	bl	80037e8 <MX_ADC_Init>

  /* wait the the Vrefint used by adc is set */
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VREFINTRDY) == RESET) {};
 8003a7c:	46c0      	nop			; (mov r8, r8)
 8003a7e:	4b2c      	ldr	r3, [pc, #176]	; (8003b30 <ADC_ReadChannels+0xd4>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	2208      	movs	r2, #8
 8003a84:	4013      	ands	r3, r2
 8003a86:	2b08      	cmp	r3, #8
 8003a88:	d1f9      	bne.n	8003a7e <ADC_ReadChannels+0x22>

  __HAL_RCC_ADC1_CLK_ENABLE();
 8003a8a:	4b2a      	ldr	r3, [pc, #168]	; (8003b34 <ADC_ReadChannels+0xd8>)
 8003a8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a8e:	4b29      	ldr	r3, [pc, #164]	; (8003b34 <ADC_ReadChannels+0xd8>)
 8003a90:	2180      	movs	r1, #128	; 0x80
 8003a92:	0089      	lsls	r1, r1, #2
 8003a94:	430a      	orrs	r2, r1
 8003a96:	635a      	str	r2, [r3, #52]	; 0x34

  /*calibrate ADC if any calibraiton hardware*/
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8003a98:	4b27      	ldr	r3, [pc, #156]	; (8003b38 <ADC_ReadChannels+0xdc>)
 8003a9a:	2100      	movs	r1, #0
 8003a9c:	0018      	movs	r0, r3
 8003a9e:	f003 fa9f 	bl	8006fe0 <HAL_ADCEx_Calibration_Start>

  /* Deselects all channels*/
  sConfig.Channel = ADC_CHANNEL_MASK;
 8003aa2:	240c      	movs	r4, #12
 8003aa4:	193b      	adds	r3, r7, r4
 8003aa6:	4a25      	ldr	r2, [pc, #148]	; (8003b3c <ADC_ReadChannels+0xe0>)
 8003aa8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8003aaa:	193b      	adds	r3, r7, r4
 8003aac:	4a24      	ldr	r2, [pc, #144]	; (8003b40 <ADC_ReadChannels+0xe4>)
 8003aae:	605a      	str	r2, [r3, #4]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8003ab0:	193a      	adds	r2, r7, r4
 8003ab2:	4b21      	ldr	r3, [pc, #132]	; (8003b38 <ADC_ReadChannels+0xdc>)
 8003ab4:	0011      	movs	r1, r2
 8003ab6:	0018      	movs	r0, r3
 8003ab8:	f003 f8e6 	bl	8006c88 <HAL_ADC_ConfigChannel>

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8003abc:	0021      	movs	r1, r4
 8003abe:	187b      	adds	r3, r7, r1
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003ac4:	187b      	adds	r3, r7, r1
 8003ac6:	2280      	movs	r2, #128	; 0x80
 8003ac8:	0152      	lsls	r2, r2, #5
 8003aca:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003acc:	187a      	adds	r2, r7, r1
 8003ace:	4b1a      	ldr	r3, [pc, #104]	; (8003b38 <ADC_ReadChannels+0xdc>)
 8003ad0:	0011      	movs	r1, r2
 8003ad2:	0018      	movs	r0, r3
 8003ad4:	f003 f8d8 	bl	8006c88 <HAL_ADC_ConfigChannel>
 8003ad8:	1e03      	subs	r3, r0, #0
 8003ada:	d001      	beq.n	8003ae0 <ADC_ReadChannels+0x84>
  {
    Error_Handler();
 8003adc:	f000 f8f4 	bl	8003cc8 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc1) != HAL_OK)
 8003ae0:	4b15      	ldr	r3, [pc, #84]	; (8003b38 <ADC_ReadChannels+0xdc>)
 8003ae2:	0018      	movs	r0, r3
 8003ae4:	f002 ff9a 	bl	8006a1c <HAL_ADC_Start>
 8003ae8:	1e03      	subs	r3, r0, #0
 8003aea:	d001      	beq.n	8003af0 <ADC_ReadChannels+0x94>
  {
    /* Start Error */
    Error_Handler();
 8003aec:	f000 f8ec 	bl	8003cc8 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8003af0:	2301      	movs	r3, #1
 8003af2:	425a      	negs	r2, r3
 8003af4:	4b10      	ldr	r3, [pc, #64]	; (8003b38 <ADC_ReadChannels+0xdc>)
 8003af6:	0011      	movs	r1, r2
 8003af8:	0018      	movs	r0, r3
 8003afa:	f003 f823 	bl	8006b44 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc1) ;   /* it calls also ADC_Disable() */
 8003afe:	4b0e      	ldr	r3, [pc, #56]	; (8003b38 <ADC_ReadChannels+0xdc>)
 8003b00:	0018      	movs	r0, r3
 8003b02:	f002 ffdf 	bl	8006ac4 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc1);
 8003b06:	4b0c      	ldr	r3, [pc, #48]	; (8003b38 <ADC_ReadChannels+0xdc>)
 8003b08:	0018      	movs	r0, r3
 8003b0a:	f003 f8b1 	bl	8006c70 <HAL_ADC_GetValue>
 8003b0e:	0003      	movs	r3, r0
 8003b10:	617b      	str	r3, [r7, #20]

  HAL_ADC_DeInit(&hadc1);
 8003b12:	4b09      	ldr	r3, [pc, #36]	; (8003b38 <ADC_ReadChannels+0xdc>)
 8003b14:	0018      	movs	r0, r3
 8003b16:	f002 fee5 	bl	80068e4 <HAL_ADC_DeInit>

  __HAL_RCC_ADC1_CLK_DISABLE();
 8003b1a:	4b06      	ldr	r3, [pc, #24]	; (8003b34 <ADC_ReadChannels+0xd8>)
 8003b1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b1e:	4b05      	ldr	r3, [pc, #20]	; (8003b34 <ADC_ReadChannels+0xd8>)
 8003b20:	4908      	ldr	r1, [pc, #32]	; (8003b44 <ADC_ReadChannels+0xe8>)
 8003b22:	400a      	ands	r2, r1
 8003b24:	635a      	str	r2, [r3, #52]	; 0x34

  return ADCxConvertedValues;
 8003b26:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8003b28:	0018      	movs	r0, r3
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	b007      	add	sp, #28
 8003b2e:	bd90      	pop	{r4, r7, pc}
 8003b30:	40007000 	.word	0x40007000
 8003b34:	40021000 	.word	0x40021000
 8003b38:	200013f0 	.word	0x200013f0
 8003b3c:	0007ffff 	.word	0x0007ffff
 8003b40:	00001001 	.word	0x00001001
 8003b44:	fffffdff 	.word	0xfffffdff

08003b48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */

  __HAL_RCC_DMA1_CLK_ENABLE();
 8003b4e:	4b0c      	ldr	r3, [pc, #48]	; (8003b80 <MX_DMA_Init+0x38>)
 8003b50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b52:	4b0b      	ldr	r3, [pc, #44]	; (8003b80 <MX_DMA_Init+0x38>)
 8003b54:	2101      	movs	r1, #1
 8003b56:	430a      	orrs	r2, r1
 8003b58:	631a      	str	r2, [r3, #48]	; 0x30
 8003b5a:	4b09      	ldr	r3, [pc, #36]	; (8003b80 <MX_DMA_Init+0x38>)
 8003b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5e:	2201      	movs	r2, #1
 8003b60:	4013      	ands	r3, r2
 8003b62:	607b      	str	r3, [r7, #4]
 8003b64:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8003b66:	2200      	movs	r2, #0
 8003b68:	2100      	movs	r1, #0
 8003b6a:	200b      	movs	r0, #11
 8003b6c:	f003 fb78 	bl	8007260 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8003b70:	200b      	movs	r0, #11
 8003b72:	f003 fb8a 	bl	800728a <HAL_NVIC_EnableIRQ>

}
 8003b76:	46c0      	nop			; (mov r8, r8)
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	b002      	add	sp, #8
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	46c0      	nop			; (mov r8, r8)
 8003b80:	40021000 	.word	0x40021000

08003b84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003b88:	f002 fcbe 	bl	8006508 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003b8c:	f000 f806 	bl	8003b9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_LoRaWAN_Init();
 8003b90:	f7ff f9cc 	bl	8002f2c <MX_LoRaWAN_Init>
    /* USER CODE END WHILE */
	  // HAL_LPTIM_Counter_Start_IT(&hlptim1,1000);
	  // HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
	  // HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);

    MX_LoRaWAN_Process();
 8003b94:	f7ff f9d3 	bl	8002f3e <MX_LoRaWAN_Process>
 8003b98:	e7fc      	b.n	8003b94 <main+0x10>
	...

08003b9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) //NEW С МЭЙНА
{
 8003b9c:	b590      	push	{r4, r7, lr}
 8003b9e:	b09d      	sub	sp, #116	; 0x74
 8003ba0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ba2:	2438      	movs	r4, #56	; 0x38
 8003ba4:	193b      	adds	r3, r7, r4
 8003ba6:	0018      	movs	r0, r3
 8003ba8:	2338      	movs	r3, #56	; 0x38
 8003baa:	001a      	movs	r2, r3
 8003bac:	2100      	movs	r1, #0
 8003bae:	f01a fa26 	bl	801dffe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003bb2:	2324      	movs	r3, #36	; 0x24
 8003bb4:	18fb      	adds	r3, r7, r3
 8003bb6:	0018      	movs	r0, r3
 8003bb8:	2314      	movs	r3, #20
 8003bba:	001a      	movs	r2, r3
 8003bbc:	2100      	movs	r1, #0
 8003bbe:	f01a fa1e 	bl	801dffe <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003bc2:	003b      	movs	r3, r7
 8003bc4:	0018      	movs	r0, r3
 8003bc6:	2324      	movs	r3, #36	; 0x24
 8003bc8:	001a      	movs	r2, r3
 8003bca:	2100      	movs	r1, #0
 8003bcc:	f01a fa17 	bl	801dffe <memset>
  /* Enable HSE Oscillator and Activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 8003bd0:	0021      	movs	r1, r4
 8003bd2:	187b      	adds	r3, r7, r1
 8003bd4:	2202      	movs	r2, #2
 8003bd6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState            = RCC_HSE_OFF;
 8003bd8:	187b      	adds	r3, r7, r1
 8003bda:	2200      	movs	r2, #0
 8003bdc:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 8003bde:	187b      	adds	r3, r7, r1
 8003be0:	2201      	movs	r2, #1
 8003be2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;// n
 8003be4:	187b      	adds	r3, r7, r1
 8003be6:	2201      	movs	r2, #1
 8003be8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003bea:	187b      	adds	r3, r7, r1
 8003bec:	2210      	movs	r2, #16
 8003bee:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 8003bf0:	187b      	adds	r3, r7, r1
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
 8003bf6:	187b      	adds	r3, r7, r1
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLLMUL_6;
 8003bfc:	187b      	adds	r3, r7, r1
 8003bfe:	2280      	movs	r2, #128	; 0x80
 8003c00:	0312      	lsls	r2, r2, #12
 8003c02:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 8003c04:	187b      	adds	r3, r7, r1
 8003c06:	2280      	movs	r2, #128	; 0x80
 8003c08:	0412      	lsls	r2, r2, #16
 8003c0a:	635a      	str	r2, [r3, #52]	; 0x34

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c0c:	187b      	adds	r3, r7, r1
 8003c0e:	0018      	movs	r0, r3
 8003c10:	f004 ffc8 	bl	8008ba4 <HAL_RCC_OscConfig>
 8003c14:	1e03      	subs	r3, r0, #0
 8003c16:	d001      	beq.n	8003c1c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8003c18:	f000 f856 	bl	8003cc8 <Error_Handler>
  }

  /* Set Voltage scale1 as MCU will run at 32MHz */
__HAL_RCC_PWR_CLK_ENABLE();
 8003c1c:	4b27      	ldr	r3, [pc, #156]	; (8003cbc <SystemClock_Config+0x120>)
 8003c1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c20:	4b26      	ldr	r3, [pc, #152]	; (8003cbc <SystemClock_Config+0x120>)
 8003c22:	2180      	movs	r1, #128	; 0x80
 8003c24:	0549      	lsls	r1, r1, #21
 8003c26:	430a      	orrs	r2, r1
 8003c28:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c2a:	4b25      	ldr	r3, [pc, #148]	; (8003cc0 <SystemClock_Config+0x124>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a25      	ldr	r2, [pc, #148]	; (8003cc4 <SystemClock_Config+0x128>)
 8003c30:	401a      	ands	r2, r3
 8003c32:	4b23      	ldr	r3, [pc, #140]	; (8003cc0 <SystemClock_Config+0x124>)
 8003c34:	2180      	movs	r1, #128	; 0x80
 8003c36:	0109      	lsls	r1, r1, #4
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	601a      	str	r2, [r3, #0]

  /* Poll VOSF bit of in PWR_CSR. Wait until it is reset to 0 */
 while (__HAL_PWR_GET_FLAG(PWR_FLAG_VOS) != RESET) {};
 8003c3c:	46c0      	nop			; (mov r8, r8)
 8003c3e:	4b20      	ldr	r3, [pc, #128]	; (8003cc0 <SystemClock_Config+0x124>)
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	2210      	movs	r2, #16
 8003c44:	4013      	ands	r3, r2
 8003c46:	2b10      	cmp	r3, #16
 8003c48:	d0f9      	beq.n	8003c3e <SystemClock_Config+0xa2>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
  clocks dividers */
 RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 8003c4a:	2124      	movs	r1, #36	; 0x24
 8003c4c:	187b      	adds	r3, r7, r1
 8003c4e:	220f      	movs	r2, #15
 8003c50:	601a      	str	r2, [r3, #0]
		 | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003c52:	187b      	adds	r3, r7, r1
 8003c54:	2203      	movs	r2, #3
 8003c56:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c58:	187b      	adds	r3, r7, r1
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003c5e:	187b      	adds	r3, r7, r1
 8003c60:	2200      	movs	r2, #0
 8003c62:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003c64:	187b      	adds	r3, r7, r1
 8003c66:	2200      	movs	r2, #0
 8003c68:	611a      	str	r2, [r3, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003c6a:	187b      	adds	r3, r7, r1
 8003c6c:	2101      	movs	r1, #1
 8003c6e:	0018      	movs	r0, r3
 8003c70:	f005 fb6c 	bl	800934c <HAL_RCC_ClockConfig>
 8003c74:	1e03      	subs	r3, r0, #0
 8003c76:	d001      	beq.n	8003c7c <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8003c78:	f000 f826 	bl	8003cc8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8003c7c:	003b      	movs	r3, r7
 8003c7e:	22ab      	movs	r2, #171	; 0xab
 8003c80:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_LPTIM1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003c82:	003b      	movs	r3, r7
 8003c84:	2200      	movs	r2, #0
 8003c86:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003c88:	003b      	movs	r3, r7
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003c8e:	003b      	movs	r3, r7
 8003c90:	2200      	movs	r2, #0
 8003c92:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003c94:	003b      	movs	r3, r7
 8003c96:	2280      	movs	r2, #128	; 0x80
 8003c98:	0292      	lsls	r2, r2, #10
 8003c9a:	605a      	str	r2, [r3, #4]
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 8003c9c:	003b      	movs	r3, r7
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	61da      	str	r2, [r3, #28]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ca2:	003b      	movs	r3, r7
 8003ca4:	0018      	movs	r0, r3
 8003ca6:	f005 fd75 	bl	8009794 <HAL_RCCEx_PeriphCLKConfig>
 8003caa:	1e03      	subs	r3, r0, #0
 8003cac:	d001      	beq.n	8003cb2 <SystemClock_Config+0x116>
  {
    Error_Handler();
 8003cae:	f000 f80b 	bl	8003cc8 <Error_Handler>
  }
}
 8003cb2:	46c0      	nop			; (mov r8, r8)
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	b01d      	add	sp, #116	; 0x74
 8003cb8:	bd90      	pop	{r4, r7, pc}
 8003cba:	46c0      	nop			; (mov r8, r8)
 8003cbc:	40021000 	.word	0x40021000
 8003cc0:	40007000 	.word	0x40007000
 8003cc4:	ffffe7ff 	.word	0xffffe7ff

08003cc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while (1)
 8003ccc:	e7fe      	b.n	8003ccc <Error_Handler+0x4>
	...

08003cd0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b090      	sub	sp, #64	; 0x40
 8003cd4:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8003cd6:	232c      	movs	r3, #44	; 0x2c
 8003cd8:	18fb      	adds	r3, r7, r3
 8003cda:	0018      	movs	r0, r3
 8003cdc:	2314      	movs	r3, #20
 8003cde:	001a      	movs	r2, r3
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	f01a f98c 	bl	801dffe <memset>
  RTC_DateTypeDef sDate = {0};
 8003ce6:	2328      	movs	r3, #40	; 0x28
 8003ce8:	18fb      	adds	r3, r7, r3
 8003cea:	2200      	movs	r2, #0
 8003cec:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8003cee:	003b      	movs	r3, r7
 8003cf0:	0018      	movs	r0, r3
 8003cf2:	2328      	movs	r3, #40	; 0x28
 8003cf4:	001a      	movs	r2, r3
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	f01a f981 	bl	801dffe <memset>

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003cfc:	4b41      	ldr	r3, [pc, #260]	; (8003e04 <MX_RTC_Init+0x134>)
 8003cfe:	4a42      	ldr	r2, [pc, #264]	; (8003e08 <MX_RTC_Init+0x138>)
 8003d00:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003d02:	4b40      	ldr	r3, [pc, #256]	; (8003e04 <MX_RTC_Init+0x134>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8003d08:	4b3e      	ldr	r3, [pc, #248]	; (8003e04 <MX_RTC_Init+0x134>)
 8003d0a:	221f      	movs	r2, #31
 8003d0c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = RTC_PREDIV_S;
 8003d0e:	4b3d      	ldr	r3, [pc, #244]	; (8003e04 <MX_RTC_Init+0x134>)
 8003d10:	4a3e      	ldr	r2, [pc, #248]	; (8003e0c <MX_RTC_Init+0x13c>)
 8003d12:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003d14:	4b3b      	ldr	r3, [pc, #236]	; (8003e04 <MX_RTC_Init+0x134>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003d1a:	4b3a      	ldr	r3, [pc, #232]	; (8003e04 <MX_RTC_Init+0x134>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003d20:	4b38      	ldr	r3, [pc, #224]	; (8003e04 <MX_RTC_Init+0x134>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003d26:	4b37      	ldr	r3, [pc, #220]	; (8003e04 <MX_RTC_Init+0x134>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	61da      	str	r2, [r3, #28]

  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003d2c:	4b35      	ldr	r3, [pc, #212]	; (8003e04 <MX_RTC_Init+0x134>)
 8003d2e:	0018      	movs	r0, r3
 8003d30:	f005 fe86 	bl	8009a40 <HAL_RTC_Init>
 8003d34:	1e03      	subs	r3, r0, #0
 8003d36:	d001      	beq.n	8003d3c <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 8003d38:	f7ff ffc6 	bl	8003cc8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8003d3c:	212c      	movs	r1, #44	; 0x2c
 8003d3e:	187b      	adds	r3, r7, r1
 8003d40:	2200      	movs	r2, #0
 8003d42:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8003d44:	187b      	adds	r3, r7, r1
 8003d46:	2200      	movs	r2, #0
 8003d48:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8003d4a:	187b      	adds	r3, r7, r1
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003d50:	187b      	adds	r3, r7, r1
 8003d52:	2200      	movs	r2, #0
 8003d54:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003d56:	187b      	adds	r3, r7, r1
 8003d58:	2200      	movs	r2, #0
 8003d5a:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8003d5c:	1879      	adds	r1, r7, r1
 8003d5e:	4b29      	ldr	r3, [pc, #164]	; (8003e04 <MX_RTC_Init+0x134>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	0018      	movs	r0, r3
 8003d64:	f005 ff0a 	bl	8009b7c <HAL_RTC_SetTime>
 8003d68:	1e03      	subs	r3, r0, #0
 8003d6a:	d001      	beq.n	8003d70 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8003d6c:	f7ff ffac 	bl	8003cc8 <Error_Handler>
  }

  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003d70:	2128      	movs	r1, #40	; 0x28
 8003d72:	187b      	adds	r3, r7, r1
 8003d74:	2201      	movs	r2, #1
 8003d76:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003d78:	187b      	adds	r3, r7, r1
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 8003d7e:	187b      	adds	r3, r7, r1
 8003d80:	2201      	movs	r2, #1
 8003d82:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 8003d84:	187b      	adds	r3, r7, r1
 8003d86:	2200      	movs	r2, #0
 8003d88:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8003d8a:	1879      	adds	r1, r7, r1
 8003d8c:	4b1d      	ldr	r3, [pc, #116]	; (8003e04 <MX_RTC_Init+0x134>)
 8003d8e:	2200      	movs	r2, #0
 8003d90:	0018      	movs	r0, r3
 8003d92:	f006 f813 	bl	8009dbc <HAL_RTC_SetDate>
 8003d96:	1e03      	subs	r3, r0, #0
 8003d98:	d001      	beq.n	8003d9e <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8003d9a:	f7ff ff95 	bl	8003cc8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8003d9e:	003b      	movs	r3, r7
 8003da0:	2200      	movs	r2, #0
 8003da2:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8003da4:	003b      	movs	r3, r7
 8003da6:	2200      	movs	r2, #0
 8003da8:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8003daa:	003b      	movs	r3, r7
 8003dac:	2200      	movs	r2, #0
 8003dae:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8003db0:	003b      	movs	r3, r7
 8003db2:	2200      	movs	r2, #0
 8003db4:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003db6:	003b      	movs	r3, r7
 8003db8:	2200      	movs	r2, #0
 8003dba:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003dbc:	003b      	movs	r3, r7
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8003dc2:	003b      	movs	r3, r7
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_SS14_10;
 8003dc8:	003b      	movs	r3, r7
 8003dca:	22a0      	movs	r2, #160	; 0xa0
 8003dcc:	0512      	lsls	r2, r2, #20
 8003dce:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003dd0:	003b      	movs	r3, r7
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 30;
 8003dd6:	003b      	movs	r3, r7
 8003dd8:	2220      	movs	r2, #32
 8003dda:	211e      	movs	r1, #30
 8003ddc:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8003dde:	003b      	movs	r3, r7
 8003de0:	2280      	movs	r2, #128	; 0x80
 8003de2:	0052      	lsls	r2, r2, #1
 8003de4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8003de6:	0039      	movs	r1, r7
 8003de8:	4b06      	ldr	r3, [pc, #24]	; (8003e04 <MX_RTC_Init+0x134>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	0018      	movs	r0, r3
 8003dee:	f006 f8e1 	bl	8009fb4 <HAL_RTC_SetAlarm_IT>
 8003df2:	1e03      	subs	r3, r0, #0
 8003df4:	d001      	beq.n	8003dfa <MX_RTC_Init+0x12a>
  {
    Error_Handler();
 8003df6:	f7ff ff67 	bl	8003cc8 <Error_Handler>
  }

}
 8003dfa:	46c0      	nop			; (mov r8, r8)
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	b010      	add	sp, #64	; 0x40
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	46c0      	nop			; (mov r8, r8)
 8003e04:	2000147c 	.word	0x2000147c
 8003e08:	40002800 	.word	0x40002800
 8003e0c:	000003ff 	.word	0x000003ff

08003e10 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef *rtcHandle)
{
 8003e10:	b590      	push	{r4, r7, lr}
 8003e12:	b091      	sub	sp, #68	; 0x44
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]

  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003e18:	2408      	movs	r4, #8
 8003e1a:	193b      	adds	r3, r7, r4
 8003e1c:	0018      	movs	r0, r3
 8003e1e:	2338      	movs	r3, #56	; 0x38
 8003e20:	001a      	movs	r2, r3
 8003e22:	2100      	movs	r1, #0
 8003e24:	f01a f8eb 	bl	801dffe <memset>
  if (rtcHandle->Instance == RTC)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a16      	ldr	r2, [pc, #88]	; (8003e88 <HAL_RTC_MspInit+0x78>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d126      	bne.n	8003e80 <HAL_RTC_MspInit+0x70>
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /** Initializes the peripherals clocks
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 8003e32:	193b      	adds	r3, r7, r4
 8003e34:	2204      	movs	r2, #4
 8003e36:	601a      	str	r2, [r3, #0]
    RCC_OscInitStruct.LSEState = RCC_LSE_ON; // SWAP OFF НО ТОЛКУ ТО? Спасёт ли это при моей проблеме
 8003e38:	193b      	adds	r3, r7, r4
 8003e3a:	2280      	movs	r2, #128	; 0x80
 8003e3c:	0052      	lsls	r2, r2, #1
 8003e3e:	609a      	str	r2, [r3, #8]
    RCC_OscInitStruct.LSIState = RCC_LSI_OFF;// SWAP ON
 8003e40:	193b      	adds	r3, r7, r4
 8003e42:	2200      	movs	r2, #0
 8003e44:	615a      	str	r2, [r3, #20]
    RCC_OscInitStruct.HSEState = RCC_HSE_OFF;
 8003e46:	193b      	adds	r3, r7, r4
 8003e48:	2200      	movs	r2, #0
 8003e4a:	605a      	str	r2, [r3, #4]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003e4c:	193b      	adds	r3, r7, r4
 8003e4e:	2200      	movs	r2, #0
 8003e50:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e52:	193b      	adds	r3, r7, r4
 8003e54:	0018      	movs	r0, r3
 8003e56:	f004 fea5 	bl	8008ba4 <HAL_RCC_OscConfig>
 8003e5a:	1e03      	subs	r3, r0, #0
 8003e5c:	d001      	beq.n	8003e62 <HAL_RTC_MspInit+0x52>
    {
      Error_Handler();
 8003e5e:	f7ff ff33 	bl	8003cc8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003e62:	4b0a      	ldr	r3, [pc, #40]	; (8003e8c <HAL_RTC_MspInit+0x7c>)
 8003e64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e66:	4b09      	ldr	r3, [pc, #36]	; (8003e8c <HAL_RTC_MspInit+0x7c>)
 8003e68:	2180      	movs	r1, #128	; 0x80
 8003e6a:	02c9      	lsls	r1, r1, #11
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	651a      	str	r2, [r3, #80]	; 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8003e70:	2200      	movs	r2, #0
 8003e72:	2100      	movs	r1, #0
 8003e74:	2002      	movs	r0, #2
 8003e76:	f003 f9f3 	bl	8007260 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn); // вот это отрубать еси шо
 8003e7a:	2002      	movs	r0, #2
 8003e7c:	f003 fa05 	bl	800728a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN RTC_MspInit 1 */

    /* USER CODE END RTC_MspInit 1 */
  }
}
 8003e80:	46c0      	nop			; (mov r8, r8)
 8003e82:	46bd      	mov	sp, r7
 8003e84:	b011      	add	sp, #68	; 0x44
 8003e86:	bd90      	pop	{r4, r7, pc}
 8003e88:	40002800 	.word	0x40002800
 8003e8c:	40021000 	.word	0x40021000

08003e90 <LL_RTC_TIME_GetSubSecond>:
  * @rmtoll SSR          SS            LL_RTC_TIME_GetSubSecond
  * @param  RTCx RTC Instance
  * @retval Sub second value (number between 0 and 65535)
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e9c:	041b      	lsls	r3, r3, #16
 8003e9e:	0c1b      	lsrs	r3, r3, #16
}
 8003ea0:	0018      	movs	r0, r3
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	b002      	add	sp, #8
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <RTC_IF_Init>:
/* USER CODE BEGIN Exported_Functions */

/* USER CODE END Exported_Functions */

UTIL_TIMER_Status_t RTC_IF_Init(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b08a      	sub	sp, #40	; 0x28
 8003eac:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;

  if (RTC_Initalized == false)
 8003eae:	4b16      	ldr	r3, [pc, #88]	; (8003f08 <RTC_IF_Init+0x60>)
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	4053      	eors	r3, r2
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d01f      	beq.n	8003efc <RTC_IF_Init+0x54>
    RTC_IF_DBG_PRINTF("RTC_init\n\r");

    /* ##-1- Configure the RTC clock source ###################################### */

    /* Select LSE as RTC clock source */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003ebc:	1d3b      	adds	r3, r7, #4
 8003ebe:	2220      	movs	r2, #32
 8003ec0:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003ec2:	1d3b      	adds	r3, r7, #4
 8003ec4:	2280      	movs	r2, #128	; 0x80
 8003ec6:	0252      	lsls	r2, r2, #9
 8003ec8:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003eca:	1d3b      	adds	r3, r7, #4
 8003ecc:	0018      	movs	r0, r3
 8003ece:	f005 fc61 	bl	8009794 <HAL_RCCEx_PeriphCLKConfig>
 8003ed2:	1e03      	subs	r3, r0, #0
 8003ed4:	d000      	beq.n	8003ed8 <RTC_IF_Init+0x30>
    {
      /* Initialization Error */
      while (1);
 8003ed6:	e7fe      	b.n	8003ed6 <RTC_IF_Init+0x2e>
    }

    MX_RTC_Init();
 8003ed8:	f7ff fefa 	bl	8003cd0 <MX_RTC_Init>

    /** Configure the Alarm A */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8003edc:	2380      	movs	r3, #128	; 0x80
 8003ede:	005a      	lsls	r2, r3, #1
 8003ee0:	4b0a      	ldr	r3, [pc, #40]	; (8003f0c <RTC_IF_Init+0x64>)
 8003ee2:	0011      	movs	r1, r2
 8003ee4:	0018      	movs	r0, r3
 8003ee6:	f006 f9b1 	bl	800a24c <HAL_RTC_DeactivateAlarm>
    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8003eea:	4b08      	ldr	r3, [pc, #32]	; (8003f0c <RTC_IF_Init+0x64>)
 8003eec:	0018      	movs	r0, r3
 8003eee:	f006 fb5b 	bl	800a5a8 <HAL_RTCEx_EnableBypassShadow>

    RTC_IF_SetTimerContext();
 8003ef2:	f000 f859 	bl	8003fa8 <RTC_IF_SetTimerContext>

    RTC_Initalized = true;
 8003ef6:	4b04      	ldr	r3, [pc, #16]	; (8003f08 <RTC_IF_Init+0x60>)
 8003ef8:	2201      	movs	r2, #1
 8003efa:	701a      	strb	r2, [r3, #0]
  }
  return UTIL_TIMER_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	0018      	movs	r0, r3
 8003f00:	46bd      	mov	sp, r7
 8003f02:	b00a      	add	sp, #40	; 0x28
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	46c0      	nop			; (mov r8, r8)
 8003f08:	200003bc 	.word	0x200003bc
 8003f0c:	2000147c 	.word	0x2000147c

08003f10 <RTC_IF_StartTimer>:

UTIL_TIMER_Status_t RTC_IF_StartTimer(uint32_t timeout)
{
 8003f10:	b590      	push	{r4, r7, lr}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  /* we don't go in Low Power mode for timeout below MIN_ALARM_DELAY */
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - RTC_IF_GetTimerElapsedTime())))
 8003f18:	4b14      	ldr	r3, [pc, #80]	; (8003f6c <RTC_IF_StartTimer+0x5c>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	5e9b      	ldrsh	r3, [r3, r2]
 8003f1e:	3303      	adds	r3, #3
 8003f20:	001c      	movs	r4, r3
 8003f22:	f000 f861 	bl	8003fe8 <RTC_IF_GetTimerElapsedTime>
 8003f26:	0002      	movs	r2, r0
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	1a9b      	subs	r3, r3, r2
 8003f2c:	429c      	cmp	r4, r3
 8003f2e:	d204      	bcs.n	8003f3a <RTC_IF_StartTimer+0x2a>
  {
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_ENABLE);
 8003f30:	2100      	movs	r1, #0
 8003f32:	2002      	movs	r0, #2
 8003f34:	f018 fa32 	bl	801c39c <UTIL_LPM_SetStopMode>
 8003f38:	e003      	b.n	8003f42 <RTC_IF_StartTimer+0x32>
  }
  else
  {
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_DISABLE);
 8003f3a:	2101      	movs	r1, #1
 8003f3c:	2002      	movs	r0, #2
 8003f3e:	f018 fa2d 	bl	801c39c <UTIL_LPM_SetStopMode>
  }

  /*In case stop mode is required */
  if (UTIL_LPM_GetMode() == UTIL_LPM_STOPMODE)
 8003f42:	f018 fa8b 	bl	801c45c <UTIL_LPM_GetMode>
 8003f46:	0003      	movs	r3, r0
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d106      	bne.n	8003f5a <RTC_IF_StartTimer+0x4a>
  {
    timeout = timeout -  McuWakeUpTimeCal;
 8003f4c:	4b07      	ldr	r3, [pc, #28]	; (8003f6c <RTC_IF_StartTimer+0x5c>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	5e9b      	ldrsh	r3, [r3, r2]
 8003f52:	001a      	movs	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	1a9b      	subs	r3, r3, r2
 8003f58:	607b      	str	r3, [r7, #4]
  }

  RTC_StartWakeUpAlarm(timeout);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	0018      	movs	r0, r3
 8003f5e:	f000 f959 	bl	8004214 <RTC_StartWakeUpAlarm>
  return UTIL_TIMER_OK;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	0018      	movs	r0, r3
 8003f66:	46bd      	mov	sp, r7
 8003f68:	b003      	add	sp, #12
 8003f6a:	bd90      	pop	{r4, r7, pc}
 8003f6c:	200003be 	.word	0x200003be

08003f70 <RTC_IF_StopTimer>:

UTIL_TIMER_Status_t RTC_IF_StopTimer(void)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	af00      	add	r7, sp, #0
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8003f74:	4b0a      	ldr	r3, [pc, #40]	; (8003fa0 <RTC_IF_StopTimer+0x30>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	22ff      	movs	r2, #255	; 0xff
 8003f7c:	401a      	ands	r2, r3
 8003f7e:	4b08      	ldr	r3, [pc, #32]	; (8003fa0 <RTC_IF_StopTimer+0x30>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4908      	ldr	r1, [pc, #32]	; (8003fa4 <RTC_IF_StopTimer+0x34>)
 8003f84:	430a      	orrs	r2, r1
 8003f86:	60da      	str	r2, [r3, #12]
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8003f88:	2380      	movs	r3, #128	; 0x80
 8003f8a:	005a      	lsls	r2, r3, #1
 8003f8c:	4b04      	ldr	r3, [pc, #16]	; (8003fa0 <RTC_IF_StopTimer+0x30>)
 8003f8e:	0011      	movs	r1, r2
 8003f90:	0018      	movs	r0, r3
 8003f92:	f006 f95b 	bl	800a24c <HAL_RTC_DeactivateAlarm>
  return UTIL_TIMER_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	0018      	movs	r0, r3
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	46c0      	nop			; (mov r8, r8)
 8003fa0:	2000147c 	.word	0x2000147c
 8003fa4:	fffffe7f 	.word	0xfffffe7f

08003fa8 <RTC_IF_SetTimerContext>:

uint32_t RTC_IF_SetTimerContext(void)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext.Rtc_Time = RTC_GetCalendarValue(&RtcTimerContext.RTC_Calndr_Date, &RtcTimerContext.RTC_Calndr_Time);
 8003fac:	4a06      	ldr	r2, [pc, #24]	; (8003fc8 <RTC_IF_SetTimerContext+0x20>)
 8003fae:	4b07      	ldr	r3, [pc, #28]	; (8003fcc <RTC_IF_SetTimerContext+0x24>)
 8003fb0:	0011      	movs	r1, r2
 8003fb2:	0018      	movs	r0, r3
 8003fb4:	f000 fa94 	bl	80044e0 <RTC_GetCalendarValue>
 8003fb8:	0002      	movs	r2, r0
 8003fba:	4b05      	ldr	r3, [pc, #20]	; (8003fd0 <RTC_IF_SetTimerContext+0x28>)
 8003fbc:	601a      	str	r2, [r3, #0]
  RTC_IF_DBG_PRINTF("RTC_IF_SetTimerContext=%d\n\r", RtcTimerContext.Rtc_Time);
  /*return time context*/
  return (uint32_t) RtcTimerContext.Rtc_Time;
 8003fbe:	4b04      	ldr	r3, [pc, #16]	; (8003fd0 <RTC_IF_SetTimerContext+0x28>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
}
 8003fc2:	0018      	movs	r0, r3
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	200003ec 	.word	0x200003ec
 8003fcc:	20000400 	.word	0x20000400
 8003fd0:	200003e8 	.word	0x200003e8

08003fd4 <RTC_IF_GetTimerContext>:

uint32_t RTC_IF_GetTimerContext(void)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	af00      	add	r7, sp, #0
  RTC_IF_DBG_PRINTF("RTC_IF_GetTimerContext=%d\n\r", RtcTimerContext.Rtc_Time);
  /*return time context*/
  return (uint32_t) RtcTimerContext.Rtc_Time;
 8003fd8:	4b02      	ldr	r3, [pc, #8]	; (8003fe4 <RTC_IF_GetTimerContext+0x10>)
 8003fda:	681b      	ldr	r3, [r3, #0]
}
 8003fdc:	0018      	movs	r0, r3
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	46c0      	nop			; (mov r8, r8)
 8003fe4:	200003e8 	.word	0x200003e8

08003fe8 <RTC_IF_GetTimerElapsedTime>:

uint32_t RTC_IF_GetTimerElapsedTime(void)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b088      	sub	sp, #32
 8003fec:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_DateTypeDef RTC_DateStruct;

  uint32_t CalendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8003fee:	2308      	movs	r3, #8
 8003ff0:	18fa      	adds	r2, r7, r3
 8003ff2:	1d3b      	adds	r3, r7, #4
 8003ff4:	0011      	movs	r1, r2
 8003ff6:	0018      	movs	r0, r3
 8003ff8:	f000 fa72 	bl	80044e0 <RTC_GetCalendarValue>
 8003ffc:	0003      	movs	r3, r0
 8003ffe:	61fb      	str	r3, [r7, #28]

  return ((uint32_t)(CalendarValue - RtcTimerContext.Rtc_Time));
 8004000:	4b03      	ldr	r3, [pc, #12]	; (8004010 <RTC_IF_GetTimerElapsedTime+0x28>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	69fa      	ldr	r2, [r7, #28]
 8004006:	1ad3      	subs	r3, r2, r3
}
 8004008:	0018      	movs	r0, r3
 800400a:	46bd      	mov	sp, r7
 800400c:	b008      	add	sp, #32
 800400e:	bd80      	pop	{r7, pc}
 8004010:	200003e8 	.word	0x200003e8

08004014 <RTC_IF_GetTimerValue>:

uint32_t RTC_IF_GetTimerValue(void)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b088      	sub	sp, #32
 8004018:	af00      	add	r7, sp, #0
  uint32_t CalendarValue = 0;
 800401a:	2300      	movs	r3, #0
 800401c:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_DateTypeDef RTC_DateStruct;

  if (RTC_Initalized == true)
 800401e:	4b09      	ldr	r3, [pc, #36]	; (8004044 <RTC_IF_GetTimerValue+0x30>)
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d008      	beq.n	8004038 <RTC_IF_GetTimerValue+0x24>
  {
    CalendarValue = (uint32_t) RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8004026:	2308      	movs	r3, #8
 8004028:	18fa      	adds	r2, r7, r3
 800402a:	1d3b      	adds	r3, r7, #4
 800402c:	0011      	movs	r1, r2
 800402e:	0018      	movs	r0, r3
 8004030:	f000 fa56 	bl	80044e0 <RTC_GetCalendarValue>
 8004034:	0003      	movs	r3, r0
 8004036:	61fb      	str	r3, [r7, #28]
  }
  return CalendarValue;
 8004038:	69fb      	ldr	r3, [r7, #28]
}
 800403a:	0018      	movs	r0, r3
 800403c:	46bd      	mov	sp, r7
 800403e:	b008      	add	sp, #32
 8004040:	bd80      	pop	{r7, pc}
 8004042:	46c0      	nop			; (mov r8, r8)
 8004044:	200003bc 	.word	0x200003bc

08004048 <RTC_IF_GetMinimumTimeout>:

uint32_t RTC_IF_GetMinimumTimeout(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	af00      	add	r7, sp, #0
  return (MIN_ALARM_DELAY);
 800404c:	2303      	movs	r3, #3
}
 800404e:	0018      	movs	r0, r3
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <RTC_IF_Convert_ms2Tick>:

uint32_t RTC_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8004054:	b5b0      	push	{r4, r5, r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 800405c:	6879      	ldr	r1, [r7, #4]
 800405e:	000a      	movs	r2, r1
 8004060:	2100      	movs	r1, #0
 8004062:	000b      	movs	r3, r1
 8004064:	0e51      	lsrs	r1, r2, #25
 8004066:	01dd      	lsls	r5, r3, #7
 8004068:	430d      	orrs	r5, r1
 800406a:	01d4      	lsls	r4, r2, #7
 800406c:	227d      	movs	r2, #125	; 0x7d
 800406e:	2300      	movs	r3, #0
 8004070:	0020      	movs	r0, r4
 8004072:	0029      	movs	r1, r5
 8004074:	f7fc fa6c 	bl	8000550 <__aeabi_uldivmod>
 8004078:	0002      	movs	r2, r0
 800407a:	000b      	movs	r3, r1
 800407c:	0013      	movs	r3, r2
}
 800407e:	0018      	movs	r0, r3
 8004080:	46bd      	mov	sp, r7
 8004082:	b002      	add	sp, #8
 8004084:	bdb0      	pop	{r4, r5, r7, pc}

08004086 <RTC_IF_Convert_Tick2ms>:

uint32_t RTC_IF_Convert_Tick2ms(uint32_t tick)
{
 8004086:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004088:	b089      	sub	sp, #36	; 0x24
 800408a:	af00      	add	r7, sp, #0
 800408c:	61f8      	str	r0, [r7, #28]
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	613b      	str	r3, [r7, #16]
 8004092:	2300      	movs	r3, #0
 8004094:	617b      	str	r3, [r7, #20]
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	0ed1      	lsrs	r1, r2, #27
 800409c:	0158      	lsls	r0, r3, #5
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	4308      	orrs	r0, r1
 80040a4:	60f8      	str	r0, [r7, #12]
 80040a6:	0153      	lsls	r3, r2, #5
 80040a8:	60bb      	str	r3, [r7, #8]
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	68fc      	ldr	r4, [r7, #12]
 80040ae:	6939      	ldr	r1, [r7, #16]
 80040b0:	697a      	ldr	r2, [r7, #20]
 80040b2:	1a5b      	subs	r3, r3, r1
 80040b4:	4194      	sbcs	r4, r2
 80040b6:	001a      	movs	r2, r3
 80040b8:	0023      	movs	r3, r4
 80040ba:	0f91      	lsrs	r1, r2, #30
 80040bc:	0098      	lsls	r0, r3, #2
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	4308      	orrs	r0, r1
 80040c4:	6078      	str	r0, [r7, #4]
 80040c6:	0093      	lsls	r3, r2, #2
 80040c8:	603b      	str	r3, [r7, #0]
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	6838      	ldr	r0, [r7, #0]
 80040d0:	6879      	ldr	r1, [r7, #4]
 80040d2:	1812      	adds	r2, r2, r0
 80040d4:	414b      	adcs	r3, r1
 80040d6:	0659      	lsls	r1, r3, #25
 80040d8:	09d0      	lsrs	r0, r2, #7
 80040da:	0005      	movs	r5, r0
 80040dc:	0028      	movs	r0, r5
 80040de:	4308      	orrs	r0, r1
 80040e0:	0005      	movs	r5, r0
 80040e2:	09db      	lsrs	r3, r3, #7
 80040e4:	001e      	movs	r6, r3
 80040e6:	002b      	movs	r3, r5
}
 80040e8:	0018      	movs	r0, r3
 80040ea:	46bd      	mov	sp, r7
 80040ec:	b009      	add	sp, #36	; 0x24
 80040ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080040f0 <RTC_IF_DelayMs>:

void RTC_IF_DelayMs(uint32_t delay)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t delayValue = 0;
 80040f8:	2300      	movs	r3, #0
 80040fa:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = 0;
 80040fc:	2300      	movs	r3, #0
 80040fe:	60bb      	str	r3, [r7, #8]

  delayValue = RTC_IF_Convert_ms2Tick(delay);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	0018      	movs	r0, r3
 8004104:	f7ff ffa6 	bl	8004054 <RTC_IF_Convert_ms2Tick>
 8004108:	0003      	movs	r3, r0
 800410a:	60fb      	str	r3, [r7, #12]

  /* Wait delay ms */
  timeout = RTC_IF_GetTimerValue();
 800410c:	f7ff ff82 	bl	8004014 <RTC_IF_GetTimerValue>
 8004110:	0003      	movs	r3, r0
 8004112:	60bb      	str	r3, [r7, #8]
  while (((RTC_IF_GetTimerValue() - timeout)) < delayValue)
 8004114:	e000      	b.n	8004118 <RTC_IF_DelayMs+0x28>
  {
    __NOP();
 8004116:	46c0      	nop			; (mov r8, r8)
  while (((RTC_IF_GetTimerValue() - timeout)) < delayValue)
 8004118:	f7ff ff7c 	bl	8004014 <RTC_IF_GetTimerValue>
 800411c:	0002      	movs	r2, r0
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	429a      	cmp	r2, r3
 8004126:	d8f6      	bhi.n	8004116 <RTC_IF_DelayMs+0x26>
  }
}
 8004128:	46c0      	nop			; (mov r8, r8)
 800412a:	46c0      	nop			; (mov r8, r8)
 800412c:	46bd      	mov	sp, r7
 800412e:	b004      	add	sp, #16
 8004130:	bd80      	pop	{r7, pc}

08004132 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  RtcHandle: RTC handle
  * @retval None
  */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *RtcHandle)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b082      	sub	sp, #8
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_IRQ_Handler();
 800413a:	f018 fe67 	bl	801ce0c <UTIL_TIMER_IRQ_Handler>
}
 800413e:	46c0      	nop			; (mov r8, r8)
 8004140:	46bd      	mov	sp, r7
 8004142:	b002      	add	sp, #8
 8004144:	bd80      	pop	{r7, pc}

08004146 <RTC_IF_GetTime>:

uint32_t RTC_IF_GetTime(uint16_t *mSeconds)
{
 8004146:	b5b0      	push	{r4, r5, r7, lr}
 8004148:	b08c      	sub	sp, #48	; 0x30
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef RTC_TimeStruct ;
  RTC_DateTypeDef RTC_DateStruct;
  uint32_t ticks;

  uint64_t calendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 800414e:	230c      	movs	r3, #12
 8004150:	18fa      	adds	r2, r7, r3
 8004152:	2308      	movs	r3, #8
 8004154:	18fb      	adds	r3, r7, r3
 8004156:	0011      	movs	r1, r2
 8004158:	0018      	movs	r0, r3
 800415a:	f000 f9c1 	bl	80044e0 <RTC_GetCalendarValue>
 800415e:	0003      	movs	r3, r0
 8004160:	62bb      	str	r3, [r7, #40]	; 0x28
 8004162:	2300      	movs	r3, #0
 8004164:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t seconds = (uint32_t)(calendarValue >> RTC_N_PREDIV_S);
 8004166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004168:	059b      	lsls	r3, r3, #22
 800416a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800416c:	0a94      	lsrs	r4, r2, #10
 800416e:	431c      	orrs	r4, r3
 8004170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004172:	0a9d      	lsrs	r5, r3, #10
 8004174:	0023      	movs	r3, r4
 8004176:	627b      	str	r3, [r7, #36]	; 0x24

  ticks = (uint32_t) calendarValue & RTC_PREDIV_S;
 8004178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417a:	059b      	lsls	r3, r3, #22
 800417c:	0d9b      	lsrs	r3, r3, #22
 800417e:	623b      	str	r3, [r7, #32]

  *mSeconds = RTC_IF_Convert_Tick2ms(ticks);
 8004180:	6a3b      	ldr	r3, [r7, #32]
 8004182:	0018      	movs	r0, r3
 8004184:	f7ff ff7f 	bl	8004086 <RTC_IF_Convert_Tick2ms>
 8004188:	0003      	movs	r3, r0
 800418a:	b29a      	uxth	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	801a      	strh	r2, [r3, #0]

  return seconds;
 8004190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004192:	0018      	movs	r0, r3
 8004194:	46bd      	mov	sp, r7
 8004196:	b00c      	add	sp, #48	; 0x30
 8004198:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800419c <RTC_IF_BkUp_Write_Seconds>:

void RTC_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	4b04      	ldr	r3, [pc, #16]	; (80041b8 <RTC_IF_BkUp_Write_Seconds+0x1c>)
 80041a8:	2100      	movs	r1, #0
 80041aa:	0018      	movs	r0, r3
 80041ac:	f006 f9d2 	bl	800a554 <HAL_RTCEx_BKUPWrite>
}
 80041b0:	46c0      	nop			; (mov r8, r8)
 80041b2:	46bd      	mov	sp, r7
 80041b4:	b002      	add	sp, #8
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	2000147c 	.word	0x2000147c

080041bc <RTC_IF_BkUp_Write_SubSeconds>:

void RTC_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	4b04      	ldr	r3, [pc, #16]	; (80041d8 <RTC_IF_BkUp_Write_SubSeconds+0x1c>)
 80041c8:	2101      	movs	r1, #1
 80041ca:	0018      	movs	r0, r3
 80041cc:	f006 f9c2 	bl	800a554 <HAL_RTCEx_BKUPWrite>
}
 80041d0:	46c0      	nop			; (mov r8, r8)
 80041d2:	46bd      	mov	sp, r7
 80041d4:	b002      	add	sp, #8
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	2000147c 	.word	0x2000147c

080041dc <RTC_IF_BkUp_Read_Seconds>:

uint32_t RTC_IF_BkUp_Read_Seconds(void)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	af00      	add	r7, sp, #0
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 80041e0:	4b04      	ldr	r3, [pc, #16]	; (80041f4 <RTC_IF_BkUp_Read_Seconds+0x18>)
 80041e2:	2100      	movs	r1, #0
 80041e4:	0018      	movs	r0, r3
 80041e6:	f006 f9cb 	bl	800a580 <HAL_RTCEx_BKUPRead>
 80041ea:	0003      	movs	r3, r0
}
 80041ec:	0018      	movs	r0, r3
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	46c0      	nop			; (mov r8, r8)
 80041f4:	2000147c 	.word	0x2000147c

080041f8 <RTC_IF_BkUp_Read_SubSeconds>:

uint32_t RTC_IF_BkUp_Read_SubSeconds(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	af00      	add	r7, sp, #0
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 80041fc:	4b04      	ldr	r3, [pc, #16]	; (8004210 <RTC_IF_BkUp_Read_SubSeconds+0x18>)
 80041fe:	2101      	movs	r1, #1
 8004200:	0018      	movs	r0, r3
 8004202:	f006 f9bd 	bl	800a580 <HAL_RTCEx_BKUPRead>
 8004206:	0003      	movs	r3, r0
}
 8004208:	0018      	movs	r0, r3
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	46c0      	nop			; (mov r8, r8)
 8004210:	2000147c 	.word	0x2000147c

08004214 <RTC_StartWakeUpAlarm>:
 * @note  alarm in RtcTimerContext.Rtc_Time + timeoutValue
 * @param timeoutValue in ticks
 * @retval none
 */
static void RTC_StartWakeUpAlarm(uint32_t timeoutValue)
{
 8004214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004216:	b08d      	sub	sp, #52	; 0x34
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  uint16_t rtcAlarmSubSeconds = 0;
 800421c:	242e      	movs	r4, #46	; 0x2e
 800421e:	193b      	adds	r3, r7, r4
 8004220:	2200      	movs	r2, #0
 8004222:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmSeconds = 0;
 8004224:	232c      	movs	r3, #44	; 0x2c
 8004226:	18fb      	adds	r3, r7, r3
 8004228:	2200      	movs	r2, #0
 800422a:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmMinutes = 0;
 800422c:	232a      	movs	r3, #42	; 0x2a
 800422e:	18fb      	adds	r3, r7, r3
 8004230:	2200      	movs	r2, #0
 8004232:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmHours = 0;
 8004234:	2328      	movs	r3, #40	; 0x28
 8004236:	18fb      	adds	r3, r7, r3
 8004238:	2200      	movs	r2, #0
 800423a:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmDays = 0;
 800423c:	2526      	movs	r5, #38	; 0x26
 800423e:	197b      	adds	r3, r7, r5
 8004240:	2200      	movs	r2, #0
 8004242:	801a      	strh	r2, [r3, #0]
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 8004244:	2610      	movs	r6, #16
 8004246:	19ba      	adds	r2, r7, r6
 8004248:	4b9b      	ldr	r3, [pc, #620]	; (80044b8 <RTC_StartWakeUpAlarm+0x2a4>)
 800424a:	3304      	adds	r3, #4
 800424c:	cb23      	ldmia	r3!, {r0, r1, r5}
 800424e:	c223      	stmia	r2!, {r0, r1, r5}
 8004250:	cb03      	ldmia	r3!, {r0, r1}
 8004252:	c203      	stmia	r2!, {r0, r1}
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 8004254:	230c      	movs	r3, #12
 8004256:	001d      	movs	r5, r3
 8004258:	18fb      	adds	r3, r7, r3
 800425a:	4a97      	ldr	r2, [pc, #604]	; (80044b8 <RTC_StartWakeUpAlarm+0x2a4>)
 800425c:	6992      	ldr	r2, [r2, #24]
 800425e:	601a      	str	r2, [r3, #0]

  RTC_IF_StopTimer();
 8004260:	f7ff fe86 	bl	8003f70 <RTC_IF_StopTimer>


  /*reverse counter */
  rtcAlarmSubSeconds =  RTC_PREDIV_S - RTC_TimeStruct.SubSeconds;
 8004264:	19bb      	adds	r3, r7, r6
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	b29a      	uxth	r2, r3
 800426a:	193b      	adds	r3, r7, r4
 800426c:	4993      	ldr	r1, [pc, #588]	; (80044bc <RTC_StartWakeUpAlarm+0x2a8>)
 800426e:	1a8a      	subs	r2, r1, r2
 8004270:	801a      	strh	r2, [r3, #0]
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	b29b      	uxth	r3, r3
 8004276:	059b      	lsls	r3, r3, #22
 8004278:	0d9b      	lsrs	r3, r3, #22
 800427a:	b299      	uxth	r1, r3
 800427c:	193b      	adds	r3, r7, r4
 800427e:	193a      	adds	r2, r7, r4
 8004280:	8812      	ldrh	r2, [r2, #0]
 8004282:	188a      	adds	r2, r1, r2
 8004284:	801a      	strh	r2, [r3, #0]
  /* convert timeout  to seconds */
  timeoutValue >>= RTC_N_PREDIV_S;  /* convert timeout  in seconds */
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	0a9b      	lsrs	r3, r3, #10
 800428a:	607b      	str	r3, [r7, #4]

  /*convert microsecs to RTC format and add to 'Now' */
  rtcAlarmDays =  RTC_DateStruct.Date;
 800428c:	002b      	movs	r3, r5
 800428e:	18fb      	adds	r3, r7, r3
 8004290:	789a      	ldrb	r2, [r3, #2]
 8004292:	2526      	movs	r5, #38	; 0x26
 8004294:	197b      	adds	r3, r7, r5
 8004296:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1DAY)
 8004298:	e00a      	b.n	80042b0 <RTC_StartWakeUpAlarm+0x9c>
  {
    timeoutValue -= SECONDS_IN_1DAY;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a88      	ldr	r2, [pc, #544]	; (80044c0 <RTC_StartWakeUpAlarm+0x2ac>)
 800429e:	4694      	mov	ip, r2
 80042a0:	4463      	add	r3, ip
 80042a2:	607b      	str	r3, [r7, #4]
    rtcAlarmDays++;
 80042a4:	2126      	movs	r1, #38	; 0x26
 80042a6:	187b      	adds	r3, r7, r1
 80042a8:	881a      	ldrh	r2, [r3, #0]
 80042aa:	187b      	adds	r3, r7, r1
 80042ac:	3201      	adds	r2, #1
 80042ae:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1DAY)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a84      	ldr	r2, [pc, #528]	; (80044c4 <RTC_StartWakeUpAlarm+0x2b0>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d8f0      	bhi.n	800429a <RTC_StartWakeUpAlarm+0x86>
  }

  /* calc hours */
  rtcAlarmHours = RTC_TimeStruct.Hours;
 80042b8:	2310      	movs	r3, #16
 80042ba:	18fb      	adds	r3, r7, r3
 80042bc:	781a      	ldrb	r2, [r3, #0]
 80042be:	2328      	movs	r3, #40	; 0x28
 80042c0:	18fb      	adds	r3, r7, r3
 80042c2:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1HOUR)
 80042c4:	e00a      	b.n	80042dc <RTC_StartWakeUpAlarm+0xc8>
  {
    timeoutValue -= SECONDS_IN_1HOUR;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a7f      	ldr	r2, [pc, #508]	; (80044c8 <RTC_StartWakeUpAlarm+0x2b4>)
 80042ca:	4694      	mov	ip, r2
 80042cc:	4463      	add	r3, ip
 80042ce:	607b      	str	r3, [r7, #4]
    rtcAlarmHours++;
 80042d0:	2128      	movs	r1, #40	; 0x28
 80042d2:	187b      	adds	r3, r7, r1
 80042d4:	881a      	ldrh	r2, [r3, #0]
 80042d6:	187b      	adds	r3, r7, r1
 80042d8:	3201      	adds	r2, #1
 80042da:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1HOUR)
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	23e1      	movs	r3, #225	; 0xe1
 80042e0:	011b      	lsls	r3, r3, #4
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d2ef      	bcs.n	80042c6 <RTC_StartWakeUpAlarm+0xb2>
  }

  /* calc minutes */
  rtcAlarmMinutes = RTC_TimeStruct.Minutes;
 80042e6:	2310      	movs	r3, #16
 80042e8:	18fb      	adds	r3, r7, r3
 80042ea:	785a      	ldrb	r2, [r3, #1]
 80042ec:	232a      	movs	r3, #42	; 0x2a
 80042ee:	18fb      	adds	r3, r7, r3
 80042f0:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 80042f2:	e008      	b.n	8004306 <RTC_StartWakeUpAlarm+0xf2>
  {
    timeoutValue -= SECONDS_IN_1MINUTE;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	3b3c      	subs	r3, #60	; 0x3c
 80042f8:	607b      	str	r3, [r7, #4]
    rtcAlarmMinutes++;
 80042fa:	212a      	movs	r1, #42	; 0x2a
 80042fc:	187b      	adds	r3, r7, r1
 80042fe:	881a      	ldrh	r2, [r3, #0]
 8004300:	187b      	adds	r3, r7, r1
 8004302:	3201      	adds	r2, #1
 8004304:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2b3b      	cmp	r3, #59	; 0x3b
 800430a:	d8f3      	bhi.n	80042f4 <RTC_StartWakeUpAlarm+0xe0>
  }

  /* calc seconds */
  rtcAlarmSeconds =  RTC_TimeStruct.Seconds + timeoutValue;
 800430c:	2310      	movs	r3, #16
 800430e:	18fb      	adds	r3, r7, r3
 8004310:	789b      	ldrb	r3, [r3, #2]
 8004312:	b299      	uxth	r1, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	b29a      	uxth	r2, r3
 8004318:	232c      	movs	r3, #44	; 0x2c
 800431a:	18fb      	adds	r3, r7, r3
 800431c:	188a      	adds	r2, r1, r2
 800431e:	801a      	strh	r2, [r3, #0]

  /***** correct for modulo********/
  while (rtcAlarmSubSeconds >= (RTC_PREDIV_S + 1))
 8004320:	e00d      	b.n	800433e <RTC_StartWakeUpAlarm+0x12a>
  {
    rtcAlarmSubSeconds -= (RTC_PREDIV_S + 1);
 8004322:	222e      	movs	r2, #46	; 0x2e
 8004324:	18bb      	adds	r3, r7, r2
 8004326:	18ba      	adds	r2, r7, r2
 8004328:	8812      	ldrh	r2, [r2, #0]
 800432a:	4968      	ldr	r1, [pc, #416]	; (80044cc <RTC_StartWakeUpAlarm+0x2b8>)
 800432c:	468c      	mov	ip, r1
 800432e:	4462      	add	r2, ip
 8004330:	801a      	strh	r2, [r3, #0]
    rtcAlarmSeconds++;
 8004332:	212c      	movs	r1, #44	; 0x2c
 8004334:	187b      	adds	r3, r7, r1
 8004336:	881a      	ldrh	r2, [r3, #0]
 8004338:	187b      	adds	r3, r7, r1
 800433a:	3201      	adds	r2, #1
 800433c:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmSubSeconds >= (RTC_PREDIV_S + 1))
 800433e:	232e      	movs	r3, #46	; 0x2e
 8004340:	18fb      	adds	r3, r7, r3
 8004342:	881a      	ldrh	r2, [r3, #0]
 8004344:	2380      	movs	r3, #128	; 0x80
 8004346:	00db      	lsls	r3, r3, #3
 8004348:	429a      	cmp	r2, r3
 800434a:	d2ea      	bcs.n	8004322 <RTC_StartWakeUpAlarm+0x10e>
  }

  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 800434c:	e00b      	b.n	8004366 <RTC_StartWakeUpAlarm+0x152>
  {
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 800434e:	222c      	movs	r2, #44	; 0x2c
 8004350:	18bb      	adds	r3, r7, r2
 8004352:	18ba      	adds	r2, r7, r2
 8004354:	8812      	ldrh	r2, [r2, #0]
 8004356:	3a3c      	subs	r2, #60	; 0x3c
 8004358:	801a      	strh	r2, [r3, #0]
    rtcAlarmMinutes++;
 800435a:	212a      	movs	r1, #42	; 0x2a
 800435c:	187b      	adds	r3, r7, r1
 800435e:	881a      	ldrh	r2, [r3, #0]
 8004360:	187b      	adds	r3, r7, r1
 8004362:	3201      	adds	r2, #1
 8004364:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 8004366:	232c      	movs	r3, #44	; 0x2c
 8004368:	18fb      	adds	r3, r7, r3
 800436a:	881b      	ldrh	r3, [r3, #0]
 800436c:	2b3b      	cmp	r3, #59	; 0x3b
 800436e:	d8ee      	bhi.n	800434e <RTC_StartWakeUpAlarm+0x13a>
  }

  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 8004370:	e00b      	b.n	800438a <RTC_StartWakeUpAlarm+0x176>
  {
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 8004372:	222a      	movs	r2, #42	; 0x2a
 8004374:	18bb      	adds	r3, r7, r2
 8004376:	18ba      	adds	r2, r7, r2
 8004378:	8812      	ldrh	r2, [r2, #0]
 800437a:	3a3c      	subs	r2, #60	; 0x3c
 800437c:	801a      	strh	r2, [r3, #0]
    rtcAlarmHours++;
 800437e:	2128      	movs	r1, #40	; 0x28
 8004380:	187b      	adds	r3, r7, r1
 8004382:	881a      	ldrh	r2, [r3, #0]
 8004384:	187b      	adds	r3, r7, r1
 8004386:	3201      	adds	r2, #1
 8004388:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 800438a:	232a      	movs	r3, #42	; 0x2a
 800438c:	18fb      	adds	r3, r7, r3
 800438e:	881b      	ldrh	r3, [r3, #0]
 8004390:	2b3b      	cmp	r3, #59	; 0x3b
 8004392:	d8ee      	bhi.n	8004372 <RTC_StartWakeUpAlarm+0x15e>
  }

  while (rtcAlarmHours >= HOURS_IN_1DAY)
 8004394:	e00b      	b.n	80043ae <RTC_StartWakeUpAlarm+0x19a>
  {
    rtcAlarmHours -= HOURS_IN_1DAY;
 8004396:	2228      	movs	r2, #40	; 0x28
 8004398:	18bb      	adds	r3, r7, r2
 800439a:	18ba      	adds	r2, r7, r2
 800439c:	8812      	ldrh	r2, [r2, #0]
 800439e:	3a18      	subs	r2, #24
 80043a0:	801a      	strh	r2, [r3, #0]
    rtcAlarmDays++;
 80043a2:	2126      	movs	r1, #38	; 0x26
 80043a4:	187b      	adds	r3, r7, r1
 80043a6:	881a      	ldrh	r2, [r3, #0]
 80043a8:	187b      	adds	r3, r7, r1
 80043aa:	3201      	adds	r2, #1
 80043ac:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmHours >= HOURS_IN_1DAY)
 80043ae:	2328      	movs	r3, #40	; 0x28
 80043b0:	18fb      	adds	r3, r7, r3
 80043b2:	881b      	ldrh	r3, [r3, #0]
 80043b4:	2b17      	cmp	r3, #23
 80043b6:	d8ee      	bhi.n	8004396 <RTC_StartWakeUpAlarm+0x182>
  }

  if (RTC_DateStruct.Year % 4 == 0)
 80043b8:	210c      	movs	r1, #12
 80043ba:	187b      	adds	r3, r7, r1
 80043bc:	78db      	ldrb	r3, [r3, #3]
 80043be:	2203      	movs	r2, #3
 80043c0:	4013      	ands	r3, r2
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d119      	bne.n	80043fc <RTC_StartWakeUpAlarm+0x1e8>
  {
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 80043c8:	187b      	adds	r3, r7, r1
 80043ca:	785b      	ldrb	r3, [r3, #1]
 80043cc:	3b01      	subs	r3, #1
 80043ce:	4a40      	ldr	r2, [pc, #256]	; (80044d0 <RTC_StartWakeUpAlarm+0x2bc>)
 80043d0:	5cd3      	ldrb	r3, [r2, r3]
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	2426      	movs	r4, #38	; 0x26
 80043d6:	193a      	adds	r2, r7, r4
 80043d8:	8812      	ldrh	r2, [r2, #0]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d928      	bls.n	8004430 <RTC_StartWakeUpAlarm+0x21c>
    {
      rtcAlarmDays = rtcAlarmDays % DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ];
 80043de:	193b      	adds	r3, r7, r4
 80043e0:	8818      	ldrh	r0, [r3, #0]
 80043e2:	187b      	adds	r3, r7, r1
 80043e4:	785b      	ldrb	r3, [r3, #1]
 80043e6:	3b01      	subs	r3, #1
 80043e8:	4a39      	ldr	r2, [pc, #228]	; (80044d0 <RTC_StartWakeUpAlarm+0x2bc>)
 80043ea:	5cd3      	ldrb	r3, [r2, r3]
 80043ec:	0019      	movs	r1, r3
 80043ee:	f7fc f80d 	bl	800040c <__aeabi_idivmod>
 80043f2:	000b      	movs	r3, r1
 80043f4:	001a      	movs	r2, r3
 80043f6:	193b      	adds	r3, r7, r4
 80043f8:	801a      	strh	r2, [r3, #0]
 80043fa:	e019      	b.n	8004430 <RTC_StartWakeUpAlarm+0x21c>
    }
  }
  else
  {
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 80043fc:	210c      	movs	r1, #12
 80043fe:	187b      	adds	r3, r7, r1
 8004400:	785b      	ldrb	r3, [r3, #1]
 8004402:	3b01      	subs	r3, #1
 8004404:	4a33      	ldr	r2, [pc, #204]	; (80044d4 <RTC_StartWakeUpAlarm+0x2c0>)
 8004406:	5cd3      	ldrb	r3, [r2, r3]
 8004408:	b29b      	uxth	r3, r3
 800440a:	2426      	movs	r4, #38	; 0x26
 800440c:	193a      	adds	r2, r7, r4
 800440e:	8812      	ldrh	r2, [r2, #0]
 8004410:	429a      	cmp	r2, r3
 8004412:	d90d      	bls.n	8004430 <RTC_StartWakeUpAlarm+0x21c>
    {
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 8004414:	193b      	adds	r3, r7, r4
 8004416:	8818      	ldrh	r0, [r3, #0]
 8004418:	187b      	adds	r3, r7, r1
 800441a:	785b      	ldrb	r3, [r3, #1]
 800441c:	3b01      	subs	r3, #1
 800441e:	4a2d      	ldr	r2, [pc, #180]	; (80044d4 <RTC_StartWakeUpAlarm+0x2c0>)
 8004420:	5cd3      	ldrb	r3, [r2, r3]
 8004422:	0019      	movs	r1, r3
 8004424:	f7fb fff2 	bl	800040c <__aeabi_idivmod>
 8004428:	000b      	movs	r3, r1
 800442a:	001a      	movs	r2, r3
 800442c:	193b      	adds	r3, r7, r4
 800442e:	801a      	strh	r2, [r3, #0]
    }
  }

  /* Set RTC_AlarmStructure with calculated values*/
  RTC_AlarmStructure.AlarmTime.SubSeconds = RTC_PREDIV_S - rtcAlarmSubSeconds;
 8004430:	232e      	movs	r3, #46	; 0x2e
 8004432:	18fb      	adds	r3, r7, r3
 8004434:	881b      	ldrh	r3, [r3, #0]
 8004436:	4a21      	ldr	r2, [pc, #132]	; (80044bc <RTC_StartWakeUpAlarm+0x2a8>)
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	001a      	movs	r2, r3
 800443c:	4b26      	ldr	r3, [pc, #152]	; (80044d8 <RTC_StartWakeUpAlarm+0x2c4>)
 800443e:	605a      	str	r2, [r3, #4]
  RTC_AlarmStructure.AlarmSubSecondMask  = RTC_ALARMSUBSECONDMASK;
 8004440:	4b25      	ldr	r3, [pc, #148]	; (80044d8 <RTC_StartWakeUpAlarm+0x2c4>)
 8004442:	22a0      	movs	r2, #160	; 0xa0
 8004444:	0512      	lsls	r2, r2, #20
 8004446:	619a      	str	r2, [r3, #24]
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 8004448:	232c      	movs	r3, #44	; 0x2c
 800444a:	18fb      	adds	r3, r7, r3
 800444c:	881b      	ldrh	r3, [r3, #0]
 800444e:	b2da      	uxtb	r2, r3
 8004450:	4b21      	ldr	r3, [pc, #132]	; (80044d8 <RTC_StartWakeUpAlarm+0x2c4>)
 8004452:	709a      	strb	r2, [r3, #2]
  RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 8004454:	232a      	movs	r3, #42	; 0x2a
 8004456:	18fb      	adds	r3, r7, r3
 8004458:	881b      	ldrh	r3, [r3, #0]
 800445a:	b2da      	uxtb	r2, r3
 800445c:	4b1e      	ldr	r3, [pc, #120]	; (80044d8 <RTC_StartWakeUpAlarm+0x2c4>)
 800445e:	705a      	strb	r2, [r3, #1]
  RTC_AlarmStructure.AlarmTime.Hours   = rtcAlarmHours;
 8004460:	2328      	movs	r3, #40	; 0x28
 8004462:	18fb      	adds	r3, r7, r3
 8004464:	881b      	ldrh	r3, [r3, #0]
 8004466:	b2da      	uxtb	r2, r3
 8004468:	4b1b      	ldr	r3, [pc, #108]	; (80044d8 <RTC_StartWakeUpAlarm+0x2c4>)
 800446a:	701a      	strb	r2, [r3, #0]
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 800446c:	2326      	movs	r3, #38	; 0x26
 800446e:	18fb      	adds	r3, r7, r3
 8004470:	881b      	ldrh	r3, [r3, #0]
 8004472:	b2d9      	uxtb	r1, r3
 8004474:	4b18      	ldr	r3, [pc, #96]	; (80044d8 <RTC_StartWakeUpAlarm+0x2c4>)
 8004476:	2220      	movs	r2, #32
 8004478:	5499      	strb	r1, [r3, r2]
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 800447a:	2310      	movs	r3, #16
 800447c:	18fb      	adds	r3, r7, r3
 800447e:	78da      	ldrb	r2, [r3, #3]
 8004480:	4b15      	ldr	r3, [pc, #84]	; (80044d8 <RTC_StartWakeUpAlarm+0x2c4>)
 8004482:	70da      	strb	r2, [r3, #3]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8004484:	4b14      	ldr	r3, [pc, #80]	; (80044d8 <RTC_StartWakeUpAlarm+0x2c4>)
 8004486:	2200      	movs	r2, #0
 8004488:	61da      	str	r2, [r3, #28]
  RTC_AlarmStructure.AlarmMask       = RTC_ALARMMASK_NONE;
 800448a:	4b13      	ldr	r3, [pc, #76]	; (80044d8 <RTC_StartWakeUpAlarm+0x2c4>)
 800448c:	2200      	movs	r2, #0
 800448e:	615a      	str	r2, [r3, #20]
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8004490:	4b11      	ldr	r3, [pc, #68]	; (80044d8 <RTC_StartWakeUpAlarm+0x2c4>)
 8004492:	2280      	movs	r2, #128	; 0x80
 8004494:	0052      	lsls	r2, r2, #1
 8004496:	625a      	str	r2, [r3, #36]	; 0x24
  RTC_AlarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004498:	4b0f      	ldr	r3, [pc, #60]	; (80044d8 <RTC_StartWakeUpAlarm+0x2c4>)
 800449a:	2200      	movs	r2, #0
 800449c:	60da      	str	r2, [r3, #12]
  RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800449e:	4b0e      	ldr	r3, [pc, #56]	; (80044d8 <RTC_StartWakeUpAlarm+0x2c4>)
 80044a0:	2200      	movs	r2, #0
 80044a2:	611a      	str	r2, [r3, #16]

  /* Set RTC_Alarm */
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 80044a4:	490c      	ldr	r1, [pc, #48]	; (80044d8 <RTC_StartWakeUpAlarm+0x2c4>)
 80044a6:	4b0d      	ldr	r3, [pc, #52]	; (80044dc <RTC_StartWakeUpAlarm+0x2c8>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	0018      	movs	r0, r3
 80044ac:	f005 fd82 	bl	8009fb4 <HAL_RTC_SetAlarm_IT>
}
 80044b0:	46c0      	nop			; (mov r8, r8)
 80044b2:	46bd      	mov	sp, r7
 80044b4:	b00d      	add	sp, #52	; 0x34
 80044b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044b8:	200003e8 	.word	0x200003e8
 80044bc:	000003ff 	.word	0x000003ff
 80044c0:	fffeae80 	.word	0xfffeae80
 80044c4:	0001517f 	.word	0x0001517f
 80044c8:	fffff1f0 	.word	0xfffff1f0
 80044cc:	fffffc00 	.word	0xfffffc00
 80044d0:	0801ee18 	.word	0x0801ee18
 80044d4:	0801ee0c 	.word	0x0801ee0c
 80044d8:	200003c0 	.word	0x200003c0
 80044dc:	2000147c 	.word	0x2000147c

080044e0 <RTC_GetCalendarValue>:
  * @param pointer to RTC_DateStruct
  * @param pointer to RTC_TimeStruct
  * @retval time in ticks
  */
static uint32_t RTC_GetCalendarValue(RTC_DateTypeDef *RTC_DateStruct, RTC_TimeTypeDef *RTC_TimeStruct)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b086      	sub	sp, #24
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  uint32_t calendarValue = 0;
 80044ea:	2300      	movs	r3, #0
 80044ec:	617b      	str	r3, [r7, #20]
  uint32_t first_read;
  uint32_t correction;

  /* Get Time and Date*/
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 80044ee:	6839      	ldr	r1, [r7, #0]
 80044f0:	4b42      	ldr	r3, [pc, #264]	; (80045fc <RTC_GetCalendarValue+0x11c>)
 80044f2:	2200      	movs	r2, #0
 80044f4:	0018      	movs	r0, r3
 80044f6:	f005 fc05 	bl	8009d04 <HAL_RTC_GetTime>

  /* make sure it is correct due to asynchronus nature of RTC*/
  do
  {
    first_read = LL_RTC_TIME_GetSubSecond(RTC);
 80044fa:	4b41      	ldr	r3, [pc, #260]	; (8004600 <RTC_GetCalendarValue+0x120>)
 80044fc:	0018      	movs	r0, r3
 80044fe:	f7ff fcc7 	bl	8003e90 <LL_RTC_TIME_GetSubSecond>
 8004502:	0003      	movs	r3, r0
 8004504:	613b      	str	r3, [r7, #16]
    HAL_RTC_GetDate(&hrtc, RTC_DateStruct, RTC_FORMAT_BIN);
 8004506:	6879      	ldr	r1, [r7, #4]
 8004508:	4b3c      	ldr	r3, [pc, #240]	; (80045fc <RTC_GetCalendarValue+0x11c>)
 800450a:	2200      	movs	r2, #0
 800450c:	0018      	movs	r0, r3
 800450e:	f005 fd03 	bl	8009f18 <HAL_RTC_GetDate>
    HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8004512:	6839      	ldr	r1, [r7, #0]
 8004514:	4b39      	ldr	r3, [pc, #228]	; (80045fc <RTC_GetCalendarValue+0x11c>)
 8004516:	2200      	movs	r2, #0
 8004518:	0018      	movs	r0, r3
 800451a:	f005 fbf3 	bl	8009d04 <HAL_RTC_GetTime>

  } while (first_read != LL_RTC_TIME_GetSubSecond(RTC));
 800451e:	4b38      	ldr	r3, [pc, #224]	; (8004600 <RTC_GetCalendarValue+0x120>)
 8004520:	0018      	movs	r0, r3
 8004522:	f7ff fcb5 	bl	8003e90 <LL_RTC_TIME_GetSubSecond>
 8004526:	0002      	movs	r2, r0
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	4293      	cmp	r3, r2
 800452c:	d1e5      	bne.n	80044fa <RTC_GetCalendarValue+0x1a>

  /* calculte amount of elapsed days since 01/01/2000 */
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	78db      	ldrb	r3, [r3, #3]
 8004532:	001a      	movs	r2, r3
 8004534:	4b33      	ldr	r3, [pc, #204]	; (8004604 <RTC_GetCalendarValue+0x124>)
 8004536:	4353      	muls	r3, r2
 8004538:	3303      	adds	r3, #3
 800453a:	089b      	lsrs	r3, r3, #2
 800453c:	617b      	str	r3, [r7, #20]

  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	78db      	ldrb	r3, [r3, #3]
 8004542:	2203      	movs	r2, #3
 8004544:	4013      	ands	r3, r2
 8004546:	b2db      	uxtb	r3, r3
 8004548:	2b00      	cmp	r3, #0
 800454a:	d101      	bne.n	8004550 <RTC_GetCalendarValue+0x70>
 800454c:	4b2e      	ldr	r3, [pc, #184]	; (8004608 <RTC_GetCalendarValue+0x128>)
 800454e:	e000      	b.n	8004552 <RTC_GetCalendarValue+0x72>
 8004550:	4b2e      	ldr	r3, [pc, #184]	; (800460c <RTC_GetCalendarValue+0x12c>)
 8004552:	60fb      	str	r3, [r7, #12]

  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	785b      	ldrb	r3, [r3, #1]
 8004558:	1e5a      	subs	r2, r3, #1
 800455a:	0013      	movs	r3, r2
 800455c:	011b      	lsls	r3, r3, #4
 800455e:	1a9b      	subs	r3, r3, r2
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	189b      	adds	r3, r3, r2
 8004564:	3301      	adds	r3, #1
 8004566:	2b00      	cmp	r3, #0
 8004568:	da00      	bge.n	800456c <RTC_GetCalendarValue+0x8c>
 800456a:	3301      	adds	r3, #1
 800456c:	105b      	asrs	r3, r3, #1
 800456e:	0019      	movs	r1, r3
                         2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	785b      	ldrb	r3, [r3, #1]
 8004574:	3b01      	subs	r3, #1
 8004576:	005b      	lsls	r3, r3, #1
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	40da      	lsrs	r2, r3
 800457c:	0013      	movs	r3, r2
 800457e:	2203      	movs	r2, #3
 8004580:	4013      	ands	r3, r2
 8004582:	1acb      	subs	r3, r1, r3
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8004584:	697a      	ldr	r2, [r7, #20]
 8004586:	18d3      	adds	r3, r2, r3
 8004588:	617b      	str	r3, [r7, #20]

  calendarValue += (RTC_DateStruct->Date - 1);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	789b      	ldrb	r3, [r3, #2]
 800458e:	001a      	movs	r2, r3
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	18d3      	adds	r3, r2, r3
 8004594:	3b01      	subs	r3, #1
 8004596:	617b      	str	r3, [r7, #20]

  /* convert from days to seconds */
  calendarValue *= SECONDS_IN_1DAY;
 8004598:	697a      	ldr	r2, [r7, #20]
 800459a:	0013      	movs	r3, r2
 800459c:	005b      	lsls	r3, r3, #1
 800459e:	189b      	adds	r3, r3, r2
 80045a0:	011a      	lsls	r2, r3, #4
 80045a2:	1ad2      	subs	r2, r2, r3
 80045a4:	0113      	lsls	r3, r2, #4
 80045a6:	1a9b      	subs	r3, r3, r2
 80045a8:	01db      	lsls	r3, r3, #7
 80045aa:	617b      	str	r3, [r7, #20]

  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	789b      	ldrb	r3, [r3, #2]
 80045b0:	0019      	movs	r1, r3
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
                    ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	001a      	movs	r2, r3
 80045b8:	0013      	movs	r3, r2
 80045ba:	011b      	lsls	r3, r3, #4
 80045bc:	1a9b      	subs	r3, r3, r2
 80045be:	011a      	lsls	r2, r3, #4
 80045c0:	1ad2      	subs	r2, r2, r3
 80045c2:	0113      	lsls	r3, r2, #4
 80045c4:	001a      	movs	r2, r3
 80045c6:	0010      	movs	r0, r2
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	785b      	ldrb	r3, [r3, #1]
 80045cc:	001a      	movs	r2, r3
 80045ce:	0013      	movs	r3, r2
 80045d0:	011b      	lsls	r3, r3, #4
 80045d2:	1a9b      	subs	r3, r3, r2
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	18c3      	adds	r3, r0, r3
 80045d8:	18cb      	adds	r3, r1, r3
  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	18d3      	adds	r3, r2, r3
 80045de:	617b      	str	r3, [r7, #20]

  calendarValue = (calendarValue << RTC_N_PREDIV_S) + (RTC_PREDIV_S - RTC_TimeStruct->SubSeconds);
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	029a      	lsls	r2, r3, #10
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	4a09      	ldr	r2, [pc, #36]	; (8004610 <RTC_GetCalendarValue+0x130>)
 80045ec:	4694      	mov	ip, r2
 80045ee:	4463      	add	r3, ip
 80045f0:	617b      	str	r3, [r7, #20]

  return (calendarValue);
 80045f2:	697b      	ldr	r3, [r7, #20]
}
 80045f4:	0018      	movs	r0, r3
 80045f6:	46bd      	mov	sp, r7
 80045f8:	b006      	add	sp, #24
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	2000147c 	.word	0x2000147c
 8004600:	40002800 	.word	0x40002800
 8004604:	000005b5 	.word	0x000005b5
 8004608:	00445550 	.word	0x00445550
 800460c:	0099aaa0 	.word	0x0099aaa0
 8004610:	000003ff 	.word	0x000003ff

08004614 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8004618:	46c0      	nop			; (mov r8, r8)
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}

0800461e <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 800461e:	b580      	push	{r7, lr}
 8004620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8004622:	46c0      	nop			; (mov r8, r8)
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800462e:	f3ef 8310 	mrs	r3, PRIMASK
 8004632:	607b      	str	r3, [r7, #4]
  return(result);
 8004634:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 8004636:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8004638:	b672      	cpsid	i
}
 800463a:	46c0      	nop			; (mov r8, r8)

  Sx_Board_IoDeInit();
 800463c:	f001 fd14 	bl	8006068 <CMWX1ZZABZ0XX_RADIO_IoDeInit>

  HAL_ADC_MspDeInit(&hadc1);
 8004640:	4b0b      	ldr	r3, [pc, #44]	; (8004670 <PWR_EnterStopMode+0x48>)
 8004642:	0018      	movs	r0, r3
 8004644:	f7ff f94c 	bl	80038e0 <HAL_ADC_MspDeInit>

  /*clear wake up flag*/
  SET_BIT(PWR->CR, PWR_CR_CWUF);
 8004648:	4b0a      	ldr	r3, [pc, #40]	; (8004674 <PWR_EnterStopMode+0x4c>)
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	4b09      	ldr	r3, [pc, #36]	; (8004674 <PWR_EnterStopMode+0x4c>)
 800464e:	2104      	movs	r1, #4
 8004650:	430a      	orrs	r2, r1
 8004652:	601a      	str	r2, [r3, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	f383 8810 	msr	PRIMASK, r3
}
 800465e:	46c0      	nop			; (mov r8, r8)

  UTILS_EXIT_CRITICAL_SECTION();

  /* Enter Stop Mode */
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8004660:	2101      	movs	r1, #1
 8004662:	2001      	movs	r0, #1
 8004664:	f004 fa26 	bl	8008ab4 <HAL_PWR_EnterSTOPMode>
}
 8004668:	46c0      	nop			; (mov r8, r8)
 800466a:	46bd      	mov	sp, r7
 800466c:	b004      	add	sp, #16
 800466e:	bd80      	pop	{r7, pc}
 8004670:	200013f0 	.word	0x200013f0
 8004674:	40007000 	.word	0x40007000

08004678 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800467e:	f3ef 8310 	mrs	r3, PRIMASK
 8004682:	60bb      	str	r3, [r7, #8]
  return(result);
 8004684:	68bb      	ldr	r3, [r7, #8]
  /* Disable IRQ while the MCU is not running on HSI */

  UTILS_ENTER_CRITICAL_SECTION();
 8004686:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8004688:	b672      	cpsid	i
}
 800468a:	46c0      	nop			; (mov r8, r8)

  /* After wake-up from STOP reconfigure the system clock */
  /* Enable HSI */
  __HAL_RCC_HSI_ENABLE();
 800468c:	4b19      	ldr	r3, [pc, #100]	; (80046f4 <PWR_ExitStopMode+0x7c>)
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	4b18      	ldr	r3, [pc, #96]	; (80046f4 <PWR_ExitStopMode+0x7c>)
 8004692:	2101      	movs	r1, #1
 8004694:	430a      	orrs	r2, r1
 8004696:	601a      	str	r2, [r3, #0]

  /* Wait till HSI is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {}
 8004698:	46c0      	nop			; (mov r8, r8)
 800469a:	4b16      	ldr	r3, [pc, #88]	; (80046f4 <PWR_ExitStopMode+0x7c>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2204      	movs	r2, #4
 80046a0:	4013      	ands	r3, r2
 80046a2:	d0fa      	beq.n	800469a <PWR_ExitStopMode+0x22>

  /* Enable PLL */
  __HAL_RCC_PLL_ENABLE();
 80046a4:	4b13      	ldr	r3, [pc, #76]	; (80046f4 <PWR_ExitStopMode+0x7c>)
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	4b12      	ldr	r3, [pc, #72]	; (80046f4 <PWR_ExitStopMode+0x7c>)
 80046aa:	2180      	movs	r1, #128	; 0x80
 80046ac:	0449      	lsls	r1, r1, #17
 80046ae:	430a      	orrs	r2, r1
 80046b0:	601a      	str	r2, [r3, #0]
  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {}
 80046b2:	46c0      	nop			; (mov r8, r8)
 80046b4:	4b0f      	ldr	r3, [pc, #60]	; (80046f4 <PWR_ExitStopMode+0x7c>)
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	2380      	movs	r3, #128	; 0x80
 80046ba:	049b      	lsls	r3, r3, #18
 80046bc:	4013      	ands	r3, r2
 80046be:	d0f9      	beq.n	80046b4 <PWR_ExitStopMode+0x3c>

  /* Select PLL as system clock source */
  __HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_PLLCLK);
 80046c0:	4b0c      	ldr	r3, [pc, #48]	; (80046f4 <PWR_ExitStopMode+0x7c>)
 80046c2:	68da      	ldr	r2, [r3, #12]
 80046c4:	4b0b      	ldr	r3, [pc, #44]	; (80046f4 <PWR_ExitStopMode+0x7c>)
 80046c6:	2103      	movs	r1, #3
 80046c8:	430a      	orrs	r2, r1
 80046ca:	60da      	str	r2, [r3, #12]

  /* Wait till PLL is used as system clock source */
  while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {}
 80046cc:	46c0      	nop			; (mov r8, r8)
 80046ce:	4b09      	ldr	r3, [pc, #36]	; (80046f4 <PWR_ExitStopMode+0x7c>)
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	220c      	movs	r2, #12
 80046d4:	4013      	ands	r3, r2
 80046d6:	2b0c      	cmp	r3, #12
 80046d8:	d1f9      	bne.n	80046ce <PWR_ExitStopMode+0x56>

  /* initializes the peripherals */
  Sx_Board_IoInit();
 80046da:	f001 fbbf 	bl	8005e5c <CMWX1ZZABZ0XX_RADIO_IoInit>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f383 8810 	msr	PRIMASK, r3
}
 80046e8:	46c0      	nop			; (mov r8, r8)

  UTILS_EXIT_CRITICAL_SECTION();
}
 80046ea:	46c0      	nop			; (mov r8, r8)
 80046ec:	46bd      	mov	sp, r7
 80046ee:	b004      	add	sp, #16
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	46c0      	nop			; (mov r8, r8)
 80046f4:	40021000 	.word	0x40021000

080046f8 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	af00      	add	r7, sp, #0
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80046fc:	2101      	movs	r1, #1
 80046fe:	2000      	movs	r0, #0
 8004700:	f004 f980 	bl	8008a04 <HAL_PWR_EnterSLEEPMode>
}
 8004704:	46c0      	nop			; (mov r8, r8)
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}

0800470a <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 800470a:	b580      	push	{r7, lr}
 800470c:	af00      	add	r7, sp, #0
}
 800470e:	46c0      	nop			; (mov r8, r8)
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d101      	bne.n	8004726 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e06e      	b.n	8004804 <HAL_LPTIM_Init+0xf0>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	222e      	movs	r2, #46	; 0x2e
 800472a:	5c9b      	ldrb	r3, [r3, r2]
 800472c:	b2db      	uxtb	r3, r3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d107      	bne.n	8004742 <HAL_LPTIM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	222d      	movs	r2, #45	; 0x2d
 8004736:	2100      	movs	r1, #0
 8004738:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	0018      	movs	r0, r3
 800473e:	f7fe ffc9 	bl	80036d4 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	222e      	movs	r2, #46	; 0x2e
 8004746:	2102      	movs	r1, #2
 8004748:	5499      	strb	r1, [r3, r2]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	60fb      	str	r3, [r7, #12]

  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d103      	bne.n	8004762 <HAL_LPTIM_Init+0x4e>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL));
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2206      	movs	r2, #6
 800475e:	4393      	bics	r3, r2
 8004760:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	4a29      	ldr	r2, [pc, #164]	; (800480c <HAL_LPTIM_Init+0xf8>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d003      	beq.n	8004774 <HAL_LPTIM_Init+0x60>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRIGSEL));
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	4a28      	ldr	r2, [pc, #160]	; (8004810 <HAL_LPTIM_Init+0xfc>)
 8004770:	4013      	ands	r3, r2
 8004772:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d103      	bne.n	8004784 <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_CKFLT));
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	22d8      	movs	r2, #216	; 0xd8
 8004780:	4393      	bics	r3, r2
 8004782:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, CKPOL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	4a23      	ldr	r2, [pc, #140]	; (8004814 <HAL_LPTIM_Init+0x100>)
 8004788:	4013      	ands	r3, r2
 800478a:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004794:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 800479a:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 80047a0:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 80047a6:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d107      	bne.n	80047c6 <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80047be:	4313      	orrs	r3, r2
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the active edge or edges used by the counter only if LPTIM is
   * clocked by an external clock source
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d104      	bne.n	80047d8 <HAL_LPTIM_Init+0xc4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	60fb      	str	r3, [r7, #12]
  }

  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	4a0b      	ldr	r2, [pc, #44]	; (800480c <HAL_LPTIM_Init+0xf8>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d007      	beq.n	80047f2 <HAL_LPTIM_Init+0xde>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source |
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source |
 80047ea:	4313      	orrs	r3, r2
 80047ec:	68fa      	ldr	r2, [r7, #12]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	60da      	str	r2, [r3, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	222e      	movs	r2, #46	; 0x2e
 80047fe:	2101      	movs	r1, #1
 8004800:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	0018      	movs	r0, r3
 8004806:	46bd      	mov	sp, r7
 8004808:	b004      	add	sp, #16
 800480a:	bd80      	pop	{r7, pc}
 800480c:	0000ffff 	.word	0x0000ffff
 8004810:	ffff1fff 	.word	0xffff1fff
 8004814:	ff19f1f8 	.word	0xff19f1f8

08004818 <HAL_LPTIM_Encoder_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Encoder_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  assert_param(hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC);
  assert_param(hlptim->Init.Clock.Prescaler == LPTIM_PRESCALER_DIV1);
  assert_param(IS_LPTIM_CLOCK_POLARITY(hlptim->Init.UltraLowPowerClock.Polarity));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	222e      	movs	r2, #46	; 0x2e
 8004826:	2102      	movs	r1, #2
 8004828:	5499      	strb	r1, [r3, r2]

  /* Configure edge sensitivity for encoder mode */
  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	60fb      	str	r3, [r7, #12]

  /* Clear CKPOL bits */
  tmpcfgr &= (uint32_t)(~LPTIM_CFGR_CKPOL);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2206      	movs	r2, #6
 8004836:	4393      	bics	r3, r2
 8004838:	60fb      	str	r3, [r7, #12]

  /* Set Input polarity */
  tmpcfgr |=  hlptim->Init.UltraLowPowerClock.Polarity;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	4313      	orrs	r3, r2
 8004842:	60fb      	str	r3, [r7, #12]

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	60da      	str	r2, [r3, #12]

  /* Set ENC bit to enable the encoder interface */
  hlptim->Instance->CFGR |= LPTIM_CFGR_ENC;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68da      	ldr	r2, [r3, #12]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2180      	movs	r1, #128	; 0x80
 8004858:	0449      	lsls	r1, r1, #17
 800485a:	430a      	orrs	r2, r1
 800485c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	691a      	ldr	r2, [r3, #16]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2101      	movs	r1, #1
 800486a:	430a      	orrs	r2, r1
 800486c:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2210      	movs	r2, #16
 8004874:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	683a      	ldr	r2, [r7, #0]
 800487c:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2110      	movs	r1, #16
 8004882:	0018      	movs	r0, r3
 8004884:	f000 f922 	bl	8004acc <LPTIM_WaitForFlag>
 8004888:	0003      	movs	r3, r0
 800488a:	2b03      	cmp	r3, #3
 800488c:	d101      	bne.n	8004892 <HAL_LPTIM_Encoder_Start_IT+0x7a>
  {
    return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e031      	b.n	80048f6 <HAL_LPTIM_Encoder_Start_IT+0xde>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	0018      	movs	r0, r3
 8004896:	f000 f951 	bl	8004b3c <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	0018      	movs	r0, r3
 800489e:	f000 f908 	bl	8004ab2 <HAL_LPTIM_GetState>
 80048a2:	0003      	movs	r3, r0
 80048a4:	2b03      	cmp	r3, #3
 80048a6:	d101      	bne.n	80048ac <HAL_LPTIM_Encoder_Start_IT+0x94>
  {
    return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e024      	b.n	80048f6 <HAL_LPTIM_Encoder_Start_IT+0xde>
  }

  /* Enable "switch to down direction" interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_DOWN);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	689a      	ldr	r2, [r3, #8]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2140      	movs	r1, #64	; 0x40
 80048b8:	430a      	orrs	r2, r1
 80048ba:	609a      	str	r2, [r3, #8]

  /* Enable "switch to up direction" interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_UP);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	689a      	ldr	r2, [r3, #8]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2120      	movs	r1, #32
 80048c8:	430a      	orrs	r2, r1
 80048ca:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	691a      	ldr	r2, [r3, #16]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2101      	movs	r1, #1
 80048d8:	430a      	orrs	r2, r1
 80048da:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	691a      	ldr	r2, [r3, #16]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2104      	movs	r1, #4
 80048e8:	430a      	orrs	r2, r1
 80048ea:	611a      	str	r2, [r3, #16]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	222e      	movs	r2, #46	; 0x2e
 80048f0:	2101      	movs	r1, #1
 80048f2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	0018      	movs	r0, r3
 80048f8:	46bd      	mov	sp, r7
 80048fa:	b004      	add	sp, #16
 80048fc:	bd80      	pop	{r7, pc}

080048fe <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 80048fe:	b580      	push	{r7, lr}
 8004900:	b082      	sub	sp, #8
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2201      	movs	r2, #1
 800490e:	4013      	ands	r3, r2
 8004910:	2b01      	cmp	r3, #1
 8004912:	d10e      	bne.n	8004932 <HAL_LPTIM_IRQHandler+0x34>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	2201      	movs	r2, #1
 800491c:	4013      	ands	r3, r2
 800491e:	2b01      	cmp	r3, #1
 8004920:	d107      	bne.n	8004932 <HAL_LPTIM_IRQHandler+0x34>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2201      	movs	r2, #1
 8004928:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	0018      	movs	r0, r3
 800492e:	f000 f888 	bl	8004a42 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2202      	movs	r2, #2
 800493a:	4013      	ands	r3, r2
 800493c:	2b02      	cmp	r3, #2
 800493e:	d10e      	bne.n	800495e <HAL_LPTIM_IRQHandler+0x60>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	2202      	movs	r2, #2
 8004948:	4013      	ands	r3, r2
 800494a:	2b02      	cmp	r3, #2
 800494c:	d107      	bne.n	800495e <HAL_LPTIM_IRQHandler+0x60>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2202      	movs	r2, #2
 8004954:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	0018      	movs	r0, r3
 800495a:	f000 f87a 	bl	8004a52 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2204      	movs	r2, #4
 8004966:	4013      	ands	r3, r2
 8004968:	2b04      	cmp	r3, #4
 800496a:	d10e      	bne.n	800498a <HAL_LPTIM_IRQHandler+0x8c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	2204      	movs	r2, #4
 8004974:	4013      	ands	r3, r2
 8004976:	2b04      	cmp	r3, #4
 8004978:	d107      	bne.n	800498a <HAL_LPTIM_IRQHandler+0x8c>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2204      	movs	r2, #4
 8004980:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	0018      	movs	r0, r3
 8004986:	f000 f86c 	bl	8004a62 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2208      	movs	r2, #8
 8004992:	4013      	ands	r3, r2
 8004994:	2b08      	cmp	r3, #8
 8004996:	d10e      	bne.n	80049b6 <HAL_LPTIM_IRQHandler+0xb8>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	2208      	movs	r2, #8
 80049a0:	4013      	ands	r3, r2
 80049a2:	2b08      	cmp	r3, #8
 80049a4:	d107      	bne.n	80049b6 <HAL_LPTIM_IRQHandler+0xb8>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2208      	movs	r2, #8
 80049ac:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	0018      	movs	r0, r3
 80049b2:	f000 f85e 	bl	8004a72 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2210      	movs	r2, #16
 80049be:	4013      	ands	r3, r2
 80049c0:	2b10      	cmp	r3, #16
 80049c2:	d10e      	bne.n	80049e2 <HAL_LPTIM_IRQHandler+0xe4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	2210      	movs	r2, #16
 80049cc:	4013      	ands	r3, r2
 80049ce:	2b10      	cmp	r3, #16
 80049d0:	d107      	bne.n	80049e2 <HAL_LPTIM_IRQHandler+0xe4>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2210      	movs	r2, #16
 80049d8:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	0018      	movs	r0, r3
 80049de:	f000 f850 	bl	8004a82 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2220      	movs	r2, #32
 80049ea:	4013      	ands	r3, r2
 80049ec:	2b20      	cmp	r3, #32
 80049ee:	d10e      	bne.n	8004a0e <HAL_LPTIM_IRQHandler+0x110>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	2220      	movs	r2, #32
 80049f8:	4013      	ands	r3, r2
 80049fa:	2b20      	cmp	r3, #32
 80049fc:	d107      	bne.n	8004a0e <HAL_LPTIM_IRQHandler+0x110>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2220      	movs	r2, #32
 8004a04:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	0018      	movs	r0, r3
 8004a0a:	f000 f842 	bl	8004a92 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2240      	movs	r2, #64	; 0x40
 8004a16:	4013      	ands	r3, r2
 8004a18:	2b40      	cmp	r3, #64	; 0x40
 8004a1a:	d10e      	bne.n	8004a3a <HAL_LPTIM_IRQHandler+0x13c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	2240      	movs	r2, #64	; 0x40
 8004a24:	4013      	ands	r3, r2
 8004a26:	2b40      	cmp	r3, #64	; 0x40
 8004a28:	d107      	bne.n	8004a3a <HAL_LPTIM_IRQHandler+0x13c>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2240      	movs	r2, #64	; 0x40
 8004a30:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	0018      	movs	r0, r3
 8004a36:	f000 f834 	bl	8004aa2 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a3a:	46c0      	nop			; (mov r8, r8)
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	b002      	add	sp, #8
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b082      	sub	sp, #8
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8004a4a:	46c0      	nop			; (mov r8, r8)
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	b002      	add	sp, #8
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b082      	sub	sp, #8
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8004a5a:	46c0      	nop			; (mov r8, r8)
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	b002      	add	sp, #8
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b082      	sub	sp, #8
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8004a6a:	46c0      	nop			; (mov r8, r8)
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	b002      	add	sp, #8
 8004a70:	bd80      	pop	{r7, pc}

08004a72 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004a72:	b580      	push	{r7, lr}
 8004a74:	b082      	sub	sp, #8
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8004a7a:	46c0      	nop			; (mov r8, r8)
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	b002      	add	sp, #8
 8004a80:	bd80      	pop	{r7, pc}

08004a82 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b082      	sub	sp, #8
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8004a8a:	46c0      	nop			; (mov r8, r8)
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	b002      	add	sp, #8
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b082      	sub	sp, #8
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8004a9a:	46c0      	nop			; (mov r8, r8)
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	b002      	add	sp, #8
 8004aa0:	bd80      	pop	{r7, pc}

08004aa2 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004aa2:	b580      	push	{r7, lr}
 8004aa4:	b082      	sub	sp, #8
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8004aaa:	46c0      	nop			; (mov r8, r8)
 8004aac:	46bd      	mov	sp, r7
 8004aae:	b002      	add	sp, #8
 8004ab0:	bd80      	pop	{r7, pc}

08004ab2 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	b082      	sub	sp, #8
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	222e      	movs	r2, #46	; 0x2e
 8004abe:	5c9b      	ldrb	r3, [r3, r2]
 8004ac0:	b2db      	uxtb	r3, r3
}
 8004ac2:	0018      	movs	r0, r3
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	b002      	add	sp, #8
 8004ac8:	bd80      	pop	{r7, pc}
	...

08004acc <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8004ad6:	230f      	movs	r3, #15
 8004ad8:	18fb      	adds	r3, r7, r3
 8004ada:	2200      	movs	r2, #0
 8004adc:	701a      	strb	r2, [r3, #0]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8004ade:	4b15      	ldr	r3, [pc, #84]	; (8004b34 <LPTIM_WaitForFlag+0x68>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4915      	ldr	r1, [pc, #84]	; (8004b38 <LPTIM_WaitForFlag+0x6c>)
 8004ae4:	0018      	movs	r0, r3
 8004ae6:	f7fb fb21 	bl	800012c <__udivsi3>
 8004aea:	0003      	movs	r3, r0
 8004aec:	001a      	movs	r2, r3
 8004aee:	0013      	movs	r3, r2
 8004af0:	015b      	lsls	r3, r3, #5
 8004af2:	1a9b      	subs	r3, r3, r2
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	189b      	adds	r3, r3, r2
 8004af8:	00db      	lsls	r3, r3, #3
 8004afa:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	3b01      	subs	r3, #1
 8004b00:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d103      	bne.n	8004b10 <LPTIM_WaitForFlag+0x44>
    {
      result = HAL_TIMEOUT;
 8004b08:	230f      	movs	r3, #15
 8004b0a:	18fb      	adds	r3, r7, r3
 8004b0c:	2203      	movs	r2, #3
 8004b0e:	701a      	strb	r2, [r3, #0]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	683a      	ldr	r2, [r7, #0]
 8004b18:	4013      	ands	r3, r2
 8004b1a:	683a      	ldr	r2, [r7, #0]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d002      	beq.n	8004b26 <LPTIM_WaitForFlag+0x5a>
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1ea      	bne.n	8004afc <LPTIM_WaitForFlag+0x30>

  return result;
 8004b26:	230f      	movs	r3, #15
 8004b28:	18fb      	adds	r3, r7, r3
 8004b2a:	781b      	ldrb	r3, [r3, #0]
}
 8004b2c:	0018      	movs	r0, r3
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	b004      	add	sp, #16
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	20000070 	.word	0x20000070
 8004b38:	00004e20 	.word	0x00004e20

08004b3c <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b088      	sub	sp, #32
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8004b44:	2300      	movs	r3, #0
 8004b46:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8004b48:	b672      	cpsid	i
}
 8004b4a:	46c0      	nop			; (mov r8, r8)

  __disable_irq();

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	001a      	movs	r2, r3
 8004b52:	4b55      	ldr	r3, [pc, #340]	; (8004ca8 <LPTIM_Disable+0x16c>)
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d106      	bne.n	8004b66 <LPTIM_Disable+0x2a>
  {
    case LPTIM1_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004b58:	4b54      	ldr	r3, [pc, #336]	; (8004cac <LPTIM_Disable+0x170>)
 8004b5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b5c:	23c0      	movs	r3, #192	; 0xc0
 8004b5e:	031b      	lsls	r3, r3, #12
 8004b60:	4013      	ands	r3, r2
 8004b62:	61fb      	str	r3, [r7, #28]
      break;
 8004b64:	e000      	b.n	8004b68 <LPTIM_Disable+0x2c>
    default:
      break;
 8004b66:	46c0      	nop			; (mov r8, r8)
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	61bb      	str	r3, [r7, #24]
  tmpCFGR = hlptim->Instance->CFGR;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	617b      	str	r3, [r7, #20]
  tmpCMP = hlptim->Instance->CMP;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	613b      	str	r3, [r7, #16]
  tmpARR = hlptim->Instance->ARR;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	60fb      	str	r3, [r7, #12]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	001a      	movs	r2, r3
 8004b8e:	4b46      	ldr	r3, [pc, #280]	; (8004ca8 <LPTIM_Disable+0x16c>)
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d10d      	bne.n	8004bb0 <LPTIM_Disable+0x74>
  {
    case LPTIM1_BASE:
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8004b94:	4b45      	ldr	r3, [pc, #276]	; (8004cac <LPTIM_Disable+0x170>)
 8004b96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b98:	4b44      	ldr	r3, [pc, #272]	; (8004cac <LPTIM_Disable+0x170>)
 8004b9a:	2180      	movs	r1, #128	; 0x80
 8004b9c:	0609      	lsls	r1, r1, #24
 8004b9e:	430a      	orrs	r2, r1
 8004ba0:	629a      	str	r2, [r3, #40]	; 0x28
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8004ba2:	4b42      	ldr	r3, [pc, #264]	; (8004cac <LPTIM_Disable+0x170>)
 8004ba4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ba6:	4b41      	ldr	r3, [pc, #260]	; (8004cac <LPTIM_Disable+0x170>)
 8004ba8:	0052      	lsls	r2, r2, #1
 8004baa:	0852      	lsrs	r2, r2, #1
 8004bac:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004bae:	e000      	b.n	8004bb2 <LPTIM_Disable+0x76>
    default:
      break;
 8004bb0:	46c0      	nop			; (mov r8, r8)
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d102      	bne.n	8004bbe <LPTIM_Disable+0x82>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d05b      	beq.n	8004c76 <LPTIM_Disable+0x13a>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	001a      	movs	r2, r3
 8004bc4:	4b38      	ldr	r3, [pc, #224]	; (8004ca8 <LPTIM_Disable+0x16c>)
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d106      	bne.n	8004bd8 <LPTIM_Disable+0x9c>
    {
      case LPTIM1_BASE:
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8004bca:	4b38      	ldr	r3, [pc, #224]	; (8004cac <LPTIM_Disable+0x170>)
 8004bcc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004bce:	4b37      	ldr	r3, [pc, #220]	; (8004cac <LPTIM_Disable+0x170>)
 8004bd0:	4937      	ldr	r1, [pc, #220]	; (8004cb0 <LPTIM_Disable+0x174>)
 8004bd2:	400a      	ands	r2, r1
 8004bd4:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8004bd6:	e000      	b.n	8004bda <LPTIM_Disable+0x9e>
      default:
        break;
 8004bd8:	46c0      	nop			; (mov r8, r8)
    }

    if (tmpCMP != 0UL)
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d01b      	beq.n	8004c18 <LPTIM_Disable+0xdc>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	691a      	ldr	r2, [r3, #16]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2101      	movs	r1, #1
 8004bec:	430a      	orrs	r2, r1
 8004bee:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2108      	movs	r1, #8
 8004bfc:	0018      	movs	r0, r3
 8004bfe:	f7ff ff65 	bl	8004acc <LPTIM_WaitForFlag>
 8004c02:	0003      	movs	r3, r0
 8004c04:	2b03      	cmp	r3, #3
 8004c06:	d103      	bne.n	8004c10 <LPTIM_Disable+0xd4>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	222e      	movs	r2, #46	; 0x2e
 8004c0c:	2103      	movs	r1, #3
 8004c0e:	5499      	strb	r1, [r3, r2]
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2208      	movs	r2, #8
 8004c16:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d01b      	beq.n	8004c56 <LPTIM_Disable+0x11a>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	691a      	ldr	r2, [r3, #16]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2101      	movs	r1, #1
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2110      	movs	r1, #16
 8004c3a:	0018      	movs	r0, r3
 8004c3c:	f7ff ff46 	bl	8004acc <LPTIM_WaitForFlag>
 8004c40:	0003      	movs	r3, r0
 8004c42:	2b03      	cmp	r3, #3
 8004c44:	d103      	bne.n	8004c4e <LPTIM_Disable+0x112>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	222e      	movs	r2, #46	; 0x2e
 8004c4a:	2103      	movs	r1, #3
 8004c4c:	5499      	strb	r1, [r3, r2]
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	2210      	movs	r2, #16
 8004c54:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	001a      	movs	r2, r3
 8004c5c:	4b12      	ldr	r3, [pc, #72]	; (8004ca8 <LPTIM_Disable+0x16c>)
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d10b      	bne.n	8004c7a <LPTIM_Disable+0x13e>
    {
      case LPTIM1_BASE:
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8004c62:	4b12      	ldr	r3, [pc, #72]	; (8004cac <LPTIM_Disable+0x170>)
 8004c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c66:	4a12      	ldr	r2, [pc, #72]	; (8004cb0 <LPTIM_Disable+0x174>)
 8004c68:	4013      	ands	r3, r2
 8004c6a:	0019      	movs	r1, r3
 8004c6c:	4b0f      	ldr	r3, [pc, #60]	; (8004cac <LPTIM_Disable+0x170>)
 8004c6e:	69fa      	ldr	r2, [r7, #28]
 8004c70:	430a      	orrs	r2, r1
 8004c72:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8004c74:	e002      	b.n	8004c7c <LPTIM_Disable+0x140>
      default:
        break;
    }
  }
 8004c76:	46c0      	nop			; (mov r8, r8)
 8004c78:	e000      	b.n	8004c7c <LPTIM_Disable+0x140>
        break;
 8004c7a:	46c0      	nop			; (mov r8, r8)

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	691a      	ldr	r2, [r3, #16]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2101      	movs	r1, #1
 8004c88:	438a      	bics	r2, r1
 8004c8a:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	69ba      	ldr	r2, [r7, #24]
 8004c92:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	697a      	ldr	r2, [r7, #20]
 8004c9a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8004c9c:	b662      	cpsie	i
}
 8004c9e:	46c0      	nop			; (mov r8, r8)

  __enable_irq();
}
 8004ca0:	46c0      	nop			; (mov r8, r8)
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	b008      	add	sp, #32
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	40007c00 	.word	0x40007c00
 8004cac:	40021000 	.word	0x40021000
 8004cb0:	fff3ffff 	.word	0xfff3ffff

08004cb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004cb8:	4b0d      	ldr	r3, [pc, #52]	; (8004cf0 <HAL_MspInit+0x3c>)
 8004cba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cbc:	4b0c      	ldr	r3, [pc, #48]	; (8004cf0 <HAL_MspInit+0x3c>)
 8004cbe:	2180      	movs	r1, #128	; 0x80
 8004cc0:	0549      	lsls	r1, r1, #21
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable the Power Voltage Detector */
  HAL_PWR_DisablePVD();
 8004cc6:	f003 fe8f 	bl	80089e8 <HAL_PWR_DisablePVD>

  /* Enables the Ultra Low Power mode */
  HAL_PWREx_EnableUltraLowPower();
 8004cca:	f003 ff5d 	bl	8008b88 <HAL_PWREx_EnableUltraLowPower>

  __HAL_FLASH_SLEEP_POWERDOWN_ENABLE();
 8004cce:	4b09      	ldr	r3, [pc, #36]	; (8004cf4 <HAL_MspInit+0x40>)
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	4b08      	ldr	r3, [pc, #32]	; (8004cf4 <HAL_MspInit+0x40>)
 8004cd4:	2108      	movs	r1, #8
 8004cd6:	430a      	orrs	r2, r1
 8004cd8:	601a      	str	r2, [r3, #0]

  /*In debug mode, e.g. when DBGMCU is activated, Arm core has always clocks
   * And will not wait that the FLACH is ready to be read. It can miss in this
   * case the first instruction. To overcome this issue, the flash remain clcoked during sleep mode
   */
  DBG(__HAL_FLASH_SLEEP_POWERDOWN_DISABLE(););
 8004cda:	4b06      	ldr	r3, [pc, #24]	; (8004cf4 <HAL_MspInit+0x40>)
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	4b05      	ldr	r3, [pc, #20]	; (8004cf4 <HAL_MspInit+0x40>)
 8004ce0:	2108      	movs	r1, #8
 8004ce2:	438a      	bics	r2, r1
 8004ce4:	601a      	str	r2, [r3, #0]

#ifdef ENABLE_FAST_WAKEUP
  /*Enable fast wakeUp*/
  HAL_PWREx_EnableFastWakeUp();
 8004ce6:	f003 ff41 	bl	8008b6c <HAL_PWREx_EnableFastWakeUp>
#endif

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004cea:	46c0      	nop			; (mov r8, r8)
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	40021000 	.word	0x40021000
 8004cf4:	40022000 	.word	0x40022000

08004cf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004cfc:	46c0      	nop			; (mov r8, r8)
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d02:	b580      	push	{r7, lr}
 8004d04:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    __NOP();
 8004d06:	46c0      	nop			; (mov r8, r8)
 8004d08:	e7fd      	b.n	8004d06 <HardFault_Handler+0x4>

08004d0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004d0e:	46c0      	nop			; (mov r8, r8)
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004d18:	46c0      	nop			; (mov r8, r8)
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004d22:	f001 fc11 	bl	8006548 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004d26:	46c0      	nop			; (mov r8, r8)
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <EXTI0_1_IRQHandler>:
/*void PPP_IRQHandler(void)
{
}*/

void EXTI0_1_IRQHandler(void)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	af00      	add	r7, sp, #0
#if (defined(CMWX1ZZABZ0XX))
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8004d30:	4b05      	ldr	r3, [pc, #20]	; (8004d48 <EXTI0_1_IRQHandler+0x1c>)
 8004d32:	0018      	movs	r0, r3
 8004d34:	f002 fd9c 	bl	8007870 <HAL_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_1);
 8004d38:	4b04      	ldr	r3, [pc, #16]	; (8004d4c <EXTI0_1_IRQHandler+0x20>)
 8004d3a:	0018      	movs	r0, r3
 8004d3c:	f002 fd98 	bl	8007870 <HAL_EXTI_IRQHandler>
#endif
}
 8004d40:	46c0      	nop			; (mov r8, r8)
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	46c0      	nop			; (mov r8, r8)
 8004d48:	200016cc 	.word	0x200016cc
 8004d4c:	200016c4 	.word	0x200016c4

08004d50 <EXTI2_3_IRQHandler>:

void EXTI2_3_IRQHandler(void)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	af00      	add	r7, sp, #0
#if (defined(SX1276MB1MAS) | defined(SX1276MB1LAS) | defined(SX1272MB2DAS))
  HAL_EXTI_IRQHandler(&H_EXTI_3);
#endif
}
 8004d54:	46c0      	nop			; (mov r8, r8)
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
	...

08004d5c <EXTI4_15_IRQHandler>:

void EXTI4_15_IRQHandler(void)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	af00      	add	r7, sp, #0
  HAL_EXTI_IRQHandler(&H_EXTI_4);
 8004d60:	4b05      	ldr	r3, [pc, #20]	; (8004d78 <EXTI4_15_IRQHandler+0x1c>)
 8004d62:	0018      	movs	r0, r3
 8004d64:	f002 fd84 	bl	8007870 <HAL_EXTI_IRQHandler>
#if (defined(SX1276MB1MAS) | defined(SX1276MB1LAS) | defined(SX1272MB2DAS))
  HAL_EXTI_IRQHandler(&H_EXTI_10);
#endif

#if (defined(CMWX1ZZABZ0XX))
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8004d68:	4b04      	ldr	r3, [pc, #16]	; (8004d7c <EXTI4_15_IRQHandler+0x20>)
 8004d6a:	0018      	movs	r0, r3
 8004d6c:	f002 fd80 	bl	8007870 <HAL_EXTI_IRQHandler>
#endif
}
 8004d70:	46c0      	nop			; (mov r8, r8)
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	46c0      	nop			; (mov r8, r8)
 8004d78:	200016bc 	.word	0x200016bc
 8004d7c:	200016d4 	.word	0x200016d4

08004d80 <DMA1_Channel4_5_6_7_IRQHandler>:

void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(husart2.hdmatx);
 8004d84:	4b03      	ldr	r3, [pc, #12]	; (8004d94 <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 8004d86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d88:	0018      	movs	r0, r3
 8004d8a:	f002 fc62 	bl	8007652 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8004d8e:	46c0      	nop			; (mov r8, r8)
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	20001634 	.word	0x20001634

08004d98 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&husart2);
 8004d9c:	4b03      	ldr	r3, [pc, #12]	; (8004dac <USART2_IRQHandler+0x14>)
 8004d9e:	0018      	movs	r0, r3
 8004da0:	f006 f8b4 	bl	800af0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004da4:	46c0      	nop			; (mov r8, r8)
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	46c0      	nop			; (mov r8, r8)
 8004dac:	20001634 	.word	0x20001634

08004db0 <LPTIM1_IRQHandler>:
/**
  * @brief This function handles LPTIM1 global interrupt / LPTIM1 wake-up interrupt through EXTI line 29.
  */
void LPTIM1_IRQHandler(void)// New
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8004db4:	4b03      	ldr	r3, [pc, #12]	; (8004dc4 <LPTIM1_IRQHandler+0x14>)
 8004db6:	0018      	movs	r0, r3
 8004db8:	f7ff fda1 	bl	80048fe <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8004dbc:	46c0      	nop			; (mov r8, r8)
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	46c0      	nop			; (mov r8, r8)
 8004dc4:	2000144c 	.word	0x2000144c

08004dc8 <RTC_IRQHandler>:
/*}*/



void RTC_IRQHandler(void)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc); // тоже поднимает из сна sx1276 и плату
 8004dcc:	4b03      	ldr	r3, [pc, #12]	; (8004ddc <RTC_IRQHandler+0x14>)
 8004dce:	0018      	movs	r0, r3
 8004dd0:	f005 fadc 	bl	800a38c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8004dd4:	46c0      	nop			; (mov r8, r8)
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	46c0      	nop			; (mov r8, r8)
 8004ddc:	2000147c 	.word	0x2000147c

08004de0 <SystemApp_Init>:
  * @brief initialises the system (dbg pins, trace, mbmux, systiemr, LPM, ...)
  * @param none
  * @retval  none
  */
void SystemApp_Init(void)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /*Initialises timer and RTC*/
  UTIL_TIMER_Init();
 8004de4:	f017 fea6 	bl	801cb34 <UTIL_TIMER_Init>

  Gpio_PreInit();
 8004de8:	f000 f8fa 	bl	8004fe0 <Gpio_PreInit>

  /* Configure the debug mode*/
  DBG_Init();
 8004dec:	f000 f9c6 	bl	800517c <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8004df0:	f016 fffc 	bl	801bdec <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8004df4:	4b0b      	ldr	r3, [pc, #44]	; (8004e24 <SystemApp_Init+0x44>)
 8004df6:	0018      	movs	r0, r3
 8004df8:	f017 f8b0 	bl	801bf5c <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8004dfc:	2002      	movs	r0, #2
 8004dfe:	f017 f8bb 	bl	801bf78 <UTIL_ADV_TRACE_SetVerboseLevel>
  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8004e02:	f7fe fd99 	bl	8003938 <SYS_InitMeasurement>

  Sx_Board_Bus_Init();
 8004e06:	f001 fa5d 	bl	80062c4 <CMWX1ZZABZ0XX_RADIO_Bus_Init>

  Sx_Board_IoInit();
 8004e0a:	f001 f827 	bl	8005e5c <CMWX1ZZABZ0XX_RADIO_IoInit>

  /*Initialize the Sensors */
  EnvSensors_Init(); //  dell
 8004e0e:	f000 fa59 	bl	80052c4 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8004e12:	f017 fab3 	bl	801c37c <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8004e16:	2101      	movs	r1, #1
 8004e18:	2001      	movs	r0, #1
 8004e1a:	f017 faef 	bl	801c3fc <UTIL_LPM_SetOffMode>
#error LOW_POWER_DISABLE not defined
#endif /* LOW_POWER_DISABLE */
  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8004e1e:	46c0      	nop			; (mov r8, r8)
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	08004f95 	.word	0x08004f95

08004e28 <UTIL_SEQ_Idle>:
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  * @param none
  * @retval  none
  */
void UTIL_SEQ_Idle(void)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8004e2c:	f017 fb48 	bl	801c4c0 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8004e30:	46c0      	nop			; (mov r8, r8)
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
	...

08004e38 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8004e38:	b590      	push	{r4, r7, lr}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af02      	add	r7, sp, #8
  uint8_t batteryLevel = 0;
 8004e3e:	1dfb      	adds	r3, r7, #7
 8004e40:	2200      	movs	r2, #0
 8004e42:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8004e44:	1d3c      	adds	r4, r7, #4
 8004e46:	f7fe fddb 	bl	8003a00 <SYS_GetBatteryLevel>
 8004e4a:	0003      	movs	r3, r0
 8004e4c:	8023      	strh	r3, [r4, #0]

  /* Convert batterey level from mV to linea scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8004e4e:	1d3b      	adds	r3, r7, #4
 8004e50:	881b      	ldrh	r3, [r3, #0]
 8004e52:	4a1a      	ldr	r2, [pc, #104]	; (8004ebc <GetBatteryLevel+0x84>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d903      	bls.n	8004e60 <GetBatteryLevel+0x28>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8004e58:	1dfb      	adds	r3, r7, #7
 8004e5a:	22fe      	movs	r2, #254	; 0xfe
 8004e5c:	701a      	strb	r2, [r3, #0]
 8004e5e:	e01d      	b.n	8004e9c <GetBatteryLevel+0x64>
  }
  else if (batteryLevelmV < VDD_MIN)
 8004e60:	1d3b      	adds	r3, r7, #4
 8004e62:	881a      	ldrh	r2, [r3, #0]
 8004e64:	23e1      	movs	r3, #225	; 0xe1
 8004e66:	00db      	lsls	r3, r3, #3
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d203      	bcs.n	8004e74 <GetBatteryLevel+0x3c>
  {
    batteryLevel = 0;
 8004e6c:	1dfb      	adds	r3, r7, #7
 8004e6e:	2200      	movs	r2, #0
 8004e70:	701a      	strb	r2, [r3, #0]
 8004e72:	e013      	b.n	8004e9c <GetBatteryLevel+0x64>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8004e74:	1d3b      	adds	r3, r7, #4
 8004e76:	881b      	ldrh	r3, [r3, #0]
 8004e78:	4a11      	ldr	r2, [pc, #68]	; (8004ec0 <GetBatteryLevel+0x88>)
 8004e7a:	4694      	mov	ip, r2
 8004e7c:	4463      	add	r3, ip
 8004e7e:	001a      	movs	r2, r3
 8004e80:	0013      	movs	r3, r2
 8004e82:	01db      	lsls	r3, r3, #7
 8004e84:	1a9b      	subs	r3, r3, r2
 8004e86:	005b      	lsls	r3, r3, #1
 8004e88:	001a      	movs	r2, r3
 8004e8a:	2396      	movs	r3, #150	; 0x96
 8004e8c:	00d9      	lsls	r1, r3, #3
 8004e8e:	0010      	movs	r0, r2
 8004e90:	f7fb f94c 	bl	800012c <__udivsi3>
 8004e94:	0003      	movs	r3, r0
 8004e96:	001a      	movs	r2, r3
 8004e98:	1dfb      	adds	r3, r7, #7
 8004e9a:	701a      	strb	r2, [r3, #0]
  }

  APP_LOG(TS_ON, VLEVEL_M, "VDDA= %d\r\n", batteryLevel);
 8004e9c:	1dfb      	adds	r3, r7, #7
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	4a08      	ldr	r2, [pc, #32]	; (8004ec4 <GetBatteryLevel+0x8c>)
 8004ea2:	9300      	str	r3, [sp, #0]
 8004ea4:	0013      	movs	r3, r2
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	2100      	movs	r1, #0
 8004eaa:	2002      	movs	r0, #2
 8004eac:	f016 ffbe 	bl	801be2c <UTIL_ADV_TRACE_COND_FSend>

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8004eb0:	1dfb      	adds	r3, r7, #7
 8004eb2:	781b      	ldrb	r3, [r3, #0]
}
 8004eb4:	0018      	movs	r0, r3
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	b003      	add	sp, #12
 8004eba:	bd90      	pop	{r4, r7, pc}
 8004ebc:	00000bb8 	.word	0x00000bb8
 8004ec0:	fffff8f8 	.word	0xfffff8f8
 8004ec4:	0801ee7c 	.word	0x0801ee7c

08004ec8 <GetTemperatureLevel>:

uint16_t GetTemperatureLevel(void)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
  uint16_t temperatureLevel = 0;
 8004ece:	1dbb      	adds	r3, r7, #6
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	801a      	strh	r2, [r3, #0]

  temperatureLevel = (uint16_t)(SYS_GetTemperatureLevel() / 256);
 8004ed4:	f7fe fd3c 	bl	8003950 <SYS_GetTemperatureLevel>
 8004ed8:	1e03      	subs	r3, r0, #0
 8004eda:	da00      	bge.n	8004ede <GetTemperatureLevel+0x16>
 8004edc:	33ff      	adds	r3, #255	; 0xff
 8004ede:	121b      	asrs	r3, r3, #8
 8004ee0:	b21a      	sxth	r2, r3
 8004ee2:	1dbb      	adds	r3, r7, #6
 8004ee4:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8004ee6:	1dbb      	adds	r3, r7, #6
 8004ee8:	881b      	ldrh	r3, [r3, #0]
}
 8004eea:	0018      	movs	r0, r3
 8004eec:	46bd      	mov	sp, r7
 8004eee:	b002      	add	sp, #8
 8004ef0:	bd80      	pop	{r7, pc}

08004ef2 <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8004ef2:	b590      	push	{r4, r7, lr}
 8004ef4:	b085      	sub	sp, #20
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8004efa:	f001 fb37 	bl	800656c <HAL_GetUIDw0>
 8004efe:	0004      	movs	r4, r0
 8004f00:	f001 fb48 	bl	8006594 <HAL_GetUIDw2>
 8004f04:	0003      	movs	r3, r0
 8004f06:	18e3      	adds	r3, r4, r3
 8004f08:	60fb      	str	r3, [r7, #12]
  uint32_t ID_2_val = HAL_GetUIDw1();
 8004f0a:	f001 fb39 	bl	8006580 <HAL_GetUIDw1>
 8004f0e:	0003      	movs	r3, r0
 8004f10:	60bb      	str	r3, [r7, #8]

  id[7] = (ID_1_3_val) >> 24;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	0e1a      	lsrs	r2, r3, #24
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	3307      	adds	r3, #7
 8004f1a:	b2d2      	uxtb	r2, r2
 8004f1c:	701a      	strb	r2, [r3, #0]
  id[6] = (ID_1_3_val) >> 16;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	0c1a      	lsrs	r2, r3, #16
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	3306      	adds	r3, #6
 8004f26:	b2d2      	uxtb	r2, r2
 8004f28:	701a      	strb	r2, [r3, #0]
  id[5] = (ID_1_3_val) >> 8;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	0a1a      	lsrs	r2, r3, #8
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	3305      	adds	r3, #5
 8004f32:	b2d2      	uxtb	r2, r2
 8004f34:	701a      	strb	r2, [r3, #0]
  id[4] = (ID_1_3_val);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	3304      	adds	r3, #4
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	b2d2      	uxtb	r2, r2
 8004f3e:	701a      	strb	r2, [r3, #0]
  id[3] = (ID_2_val) >> 24;
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	0e1a      	lsrs	r2, r3, #24
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	3303      	adds	r3, #3
 8004f48:	b2d2      	uxtb	r2, r2
 8004f4a:	701a      	strb	r2, [r3, #0]
  id[2] = (ID_2_val) >> 16;
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	0c1a      	lsrs	r2, r3, #16
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	3302      	adds	r3, #2
 8004f54:	b2d2      	uxtb	r2, r2
 8004f56:	701a      	strb	r2, [r3, #0]
  id[1] = (ID_2_val) >> 8;
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	0a1a      	lsrs	r2, r3, #8
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	3301      	adds	r3, #1
 8004f60:	b2d2      	uxtb	r2, r2
 8004f62:	701a      	strb	r2, [r3, #0]
  id[0] = (ID_2_val);
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	b2da      	uxtb	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8004f6c:	46c0      	nop			; (mov r8, r8)
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	b005      	add	sp, #20
 8004f72:	bd90      	pop	{r4, r7, pc}

08004f74 <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 8004f74:	b5b0      	push	{r4, r5, r7, lr}
 8004f76:	af00      	add	r7, sp, #0
  return ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8004f78:	f001 faf8 	bl	800656c <HAL_GetUIDw0>
 8004f7c:	0004      	movs	r4, r0
 8004f7e:	f001 faff 	bl	8006580 <HAL_GetUIDw1>
 8004f82:	0003      	movs	r3, r0
 8004f84:	405c      	eors	r4, r3
 8004f86:	f001 fb05 	bl	8006594 <HAL_GetUIDw2>
 8004f8a:	0003      	movs	r3, r0
 8004f8c:	4063      	eors	r3, r4
}
 8004f8e:	0018      	movs	r0, r3
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bdb0      	pop	{r4, r5, r7, pc}

08004f94 <TimestampNow>:

/* USER CODE END ExF */

/* Private functions ---------------------------------------------------------*/
static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8004f94:	b590      	push	{r4, r7, lr}
 8004f96:	b087      	sub	sp, #28
 8004f98:	af02      	add	r7, sp, #8
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8004f9e:	2408      	movs	r4, #8
 8004fa0:	193b      	adds	r3, r7, r4
 8004fa2:	0018      	movs	r0, r3
 8004fa4:	f017 fd64 	bl	801ca70 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8004fa8:	0022      	movs	r2, r4
 8004faa:	18bb      	adds	r3, r7, r2
 8004fac:	6819      	ldr	r1, [r3, #0]
 8004fae:	18bb      	adds	r3, r7, r2
 8004fb0:	2204      	movs	r2, #4
 8004fb2:	5e9b      	ldrsh	r3, [r3, r2]
 8004fb4:	4a09      	ldr	r2, [pc, #36]	; (8004fdc <TimestampNow+0x48>)
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	9300      	str	r3, [sp, #0]
 8004fba:	000b      	movs	r3, r1
 8004fbc:	2110      	movs	r1, #16
 8004fbe:	f000 f8a9 	bl	8005114 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	0018      	movs	r0, r3
 8004fc6:	f7fb f89f 	bl	8000108 <strlen>
 8004fca:	0003      	movs	r3, r0
 8004fcc:	b29a      	uxth	r2, r3
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8004fd2:	46c0      	nop			; (mov r8, r8)
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	b005      	add	sp, #20
 8004fd8:	bd90      	pop	{r4, r7, pc}
 8004fda:	46c0      	nop			; (mov r8, r8)
 8004fdc:	0801ee88 	.word	0x0801ee88

08004fe0 <Gpio_PreInit>:

static void Gpio_PreInit(void)
{
 8004fe0:	b590      	push	{r4, r7, lr}
 8004fe2:	b08b      	sub	sp, #44	; 0x2c
 8004fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Gpio_PreInit_1 */

  /* USER CODE END Gpio_PreInit_1 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fe6:	2414      	movs	r4, #20
 8004fe8:	193b      	adds	r3, r7, r4
 8004fea:	0018      	movs	r0, r3
 8004fec:	2314      	movs	r3, #20
 8004fee:	001a      	movs	r2, r3
 8004ff0:	2100      	movs	r1, #0
 8004ff2:	f019 f804 	bl	801dffe <memset>
  /* Configure all IOs in analog input              */
  /* Except PA143 and PA14 (SWCLK and SWD) for debug*/
  /* PA13 and PA14 are configured in debug_init     */
  /* Configure all GPIO as analog to reduce current consumption on non used IOs */
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ff6:	4b38      	ldr	r3, [pc, #224]	; (80050d8 <Gpio_PreInit+0xf8>)
 8004ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ffa:	4b37      	ldr	r3, [pc, #220]	; (80050d8 <Gpio_PreInit+0xf8>)
 8004ffc:	2101      	movs	r1, #1
 8004ffe:	430a      	orrs	r2, r1
 8005000:	62da      	str	r2, [r3, #44]	; 0x2c
 8005002:	4b35      	ldr	r3, [pc, #212]	; (80050d8 <Gpio_PreInit+0xf8>)
 8005004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005006:	2201      	movs	r2, #1
 8005008:	4013      	ands	r3, r2
 800500a:	613b      	str	r3, [r7, #16]
 800500c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800500e:	4b32      	ldr	r3, [pc, #200]	; (80050d8 <Gpio_PreInit+0xf8>)
 8005010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005012:	4b31      	ldr	r3, [pc, #196]	; (80050d8 <Gpio_PreInit+0xf8>)
 8005014:	2102      	movs	r1, #2
 8005016:	430a      	orrs	r2, r1
 8005018:	62da      	str	r2, [r3, #44]	; 0x2c
 800501a:	4b2f      	ldr	r3, [pc, #188]	; (80050d8 <Gpio_PreInit+0xf8>)
 800501c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501e:	2202      	movs	r2, #2
 8005020:	4013      	ands	r3, r2
 8005022:	60fb      	str	r3, [r7, #12]
 8005024:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005026:	4b2c      	ldr	r3, [pc, #176]	; (80050d8 <Gpio_PreInit+0xf8>)
 8005028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800502a:	4b2b      	ldr	r3, [pc, #172]	; (80050d8 <Gpio_PreInit+0xf8>)
 800502c:	2104      	movs	r1, #4
 800502e:	430a      	orrs	r2, r1
 8005030:	62da      	str	r2, [r3, #44]	; 0x2c
 8005032:	4b29      	ldr	r3, [pc, #164]	; (80050d8 <Gpio_PreInit+0xf8>)
 8005034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005036:	2204      	movs	r2, #4
 8005038:	4013      	ands	r3, r2
 800503a:	60bb      	str	r3, [r7, #8]
 800503c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800503e:	4b26      	ldr	r3, [pc, #152]	; (80050d8 <Gpio_PreInit+0xf8>)
 8005040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005042:	4b25      	ldr	r3, [pc, #148]	; (80050d8 <Gpio_PreInit+0xf8>)
 8005044:	2180      	movs	r1, #128	; 0x80
 8005046:	430a      	orrs	r2, r1
 8005048:	62da      	str	r2, [r3, #44]	; 0x2c
 800504a:	4b23      	ldr	r3, [pc, #140]	; (80050d8 <Gpio_PreInit+0xf8>)
 800504c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800504e:	2280      	movs	r2, #128	; 0x80
 8005050:	4013      	ands	r3, r2
 8005052:	607b      	str	r3, [r7, #4]
 8005054:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005056:	193b      	adds	r3, r7, r4
 8005058:	2203      	movs	r2, #3
 800505a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800505c:	193b      	adds	r3, r7, r4
 800505e:	2200      	movs	r2, #0
 8005060:	609a      	str	r2, [r3, #8]
  /* All GPIOs except debug pins (SWCLK and SWD) */
  GPIO_InitStruct.Pin = GPIO_PIN_All & (~(GPIO_PIN_13 | GPIO_PIN_14));
 8005062:	193b      	adds	r3, r7, r4
 8005064:	4a1d      	ldr	r2, [pc, #116]	; (80050dc <Gpio_PreInit+0xfc>)
 8005066:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005068:	193a      	adds	r2, r7, r4
 800506a:	23a0      	movs	r3, #160	; 0xa0
 800506c:	05db      	lsls	r3, r3, #23
 800506e:	0011      	movs	r1, r2
 8005070:	0018      	movs	r0, r3
 8005072:	f002 fc21 	bl	80078b8 <HAL_GPIO_Init>

  /* All GPIOs */
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 8005076:	193b      	adds	r3, r7, r4
 8005078:	4a19      	ldr	r2, [pc, #100]	; (80050e0 <Gpio_PreInit+0x100>)
 800507a:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800507c:	193b      	adds	r3, r7, r4
 800507e:	4a19      	ldr	r2, [pc, #100]	; (80050e4 <Gpio_PreInit+0x104>)
 8005080:	0019      	movs	r1, r3
 8005082:	0010      	movs	r0, r2
 8005084:	f002 fc18 	bl	80078b8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005088:	193b      	adds	r3, r7, r4
 800508a:	4a17      	ldr	r2, [pc, #92]	; (80050e8 <Gpio_PreInit+0x108>)
 800508c:	0019      	movs	r1, r3
 800508e:	0010      	movs	r0, r2
 8005090:	f002 fc12 	bl	80078b8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8005094:	193b      	adds	r3, r7, r4
 8005096:	4a15      	ldr	r2, [pc, #84]	; (80050ec <Gpio_PreInit+0x10c>)
 8005098:	0019      	movs	r1, r3
 800509a:	0010      	movs	r0, r2
 800509c:	f002 fc0c 	bl	80078b8 <HAL_GPIO_Init>

  /* Disable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_DISABLE();
 80050a0:	4b0d      	ldr	r3, [pc, #52]	; (80050d8 <Gpio_PreInit+0xf8>)
 80050a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050a4:	4b0c      	ldr	r3, [pc, #48]	; (80050d8 <Gpio_PreInit+0xf8>)
 80050a6:	2101      	movs	r1, #1
 80050a8:	438a      	bics	r2, r1
 80050aa:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_DISABLE();
 80050ac:	4b0a      	ldr	r3, [pc, #40]	; (80050d8 <Gpio_PreInit+0xf8>)
 80050ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050b0:	4b09      	ldr	r3, [pc, #36]	; (80050d8 <Gpio_PreInit+0xf8>)
 80050b2:	2102      	movs	r1, #2
 80050b4:	438a      	bics	r2, r1
 80050b6:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_DISABLE();
 80050b8:	4b07      	ldr	r3, [pc, #28]	; (80050d8 <Gpio_PreInit+0xf8>)
 80050ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050bc:	4b06      	ldr	r3, [pc, #24]	; (80050d8 <Gpio_PreInit+0xf8>)
 80050be:	2104      	movs	r1, #4
 80050c0:	438a      	bics	r2, r1
 80050c2:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_DISABLE();
 80050c4:	4b04      	ldr	r3, [pc, #16]	; (80050d8 <Gpio_PreInit+0xf8>)
 80050c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050c8:	4b03      	ldr	r3, [pc, #12]	; (80050d8 <Gpio_PreInit+0xf8>)
 80050ca:	2180      	movs	r1, #128	; 0x80
 80050cc:	438a      	bics	r2, r1
 80050ce:	62da      	str	r2, [r3, #44]	; 0x2c
  /* USER CODE BEGIN Gpio_PreInit_2 */

  /* USER CODE END Gpio_PreInit_2 */
}
 80050d0:	46c0      	nop			; (mov r8, r8)
 80050d2:	46bd      	mov	sp, r7
 80050d4:	b00b      	add	sp, #44	; 0x2c
 80050d6:	bd90      	pop	{r4, r7, pc}
 80050d8:	40021000 	.word	0x40021000
 80050dc:	00009fff 	.word	0x00009fff
 80050e0:	0000ffff 	.word	0x0000ffff
 80050e4:	50000400 	.word	0x50000400
 80050e8:	50000800 	.word	0x50000800
 80050ec:	50001c00 	.word	0x50001c00

080050f0 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 80050f4:	2101      	movs	r1, #1
 80050f6:	2004      	movs	r0, #4
 80050f8:	f017 f950 	bl	801c39c <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 80050fc:	46c0      	nop			; (mov r8, r8)
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}

08005102 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8005102:	b580      	push	{r7, lr}
 8005104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8005106:	2100      	movs	r1, #0
 8005108:	2004      	movs	r0, #4
 800510a:	f017 f947 	bl	801c39c <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 800510e:	46c0      	nop			; (mov r8, r8)
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8005114:	b40c      	push	{r2, r3}
 8005116:	b580      	push	{r7, lr}
 8005118:	b084      	sub	sp, #16
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
 800511e:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8005120:	231c      	movs	r3, #28
 8005122:	18fb      	adds	r3, r7, r3
 8005124:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8005126:	6839      	ldr	r1, [r7, #0]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	69ba      	ldr	r2, [r7, #24]
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f018 f8cb 	bl	801d2c8 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8005132:	46c0      	nop			; (mov r8, r8)
 8005134:	46bd      	mov	sp, r7
 8005136:	b004      	add	sp, #16
 8005138:	bc80      	pop	{r7}
 800513a:	bc08      	pop	{r3}
 800513c:	b002      	add	sp, #8
 800513e:	4718      	bx	r3

08005140 <HAL_InitTick>:
  * @brief  don't enable systick
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8005148:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 800514a:	0018      	movs	r0, r3
 800514c:	46bd      	mov	sp, r7
 800514e:	b002      	add	sp, #8
 8005150:	bd80      	pop	{r7, pc}

08005152 <HAL_GetTick>:
  * @brief Provide a tick value in millisecond measured using RTC
  * @note This function overwrites the __weak one from HAL
  * @retval tick value
  */
uint32_t HAL_GetTick(void)
{
 8005152:	b580      	push	{r7, lr}
 8005154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return RTC_IF_GetTimerValue();
 8005156:	f7fe ff5d 	bl	8004014 <RTC_IF_GetTimerValue>
 800515a:	0003      	movs	r3, r0
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 800515c:	0018      	movs	r0, r3
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <HAL_Delay>:
  * @brief This function provides delay (in ms)
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8005162:	b580      	push	{r7, lr}
 8005164:	b082      	sub	sp, #8
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  RTC_IF_DelayMs(Delay);   /* based on RTC */
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	0018      	movs	r0, r3
 800516e:	f7fe ffbf 	bl	80040f0 <RTC_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8005172:	46c0      	nop			; (mov r8, r8)
 8005174:	46bd      	mov	sp, r7
 8005176:	b002      	add	sp, #8
 8005178:	bd80      	pop	{r7, pc}
	...

0800517c <DBG_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void DBG_Init(void)
{
 800517c:	b590      	push	{r4, r7, lr}
 800517e:	b08b      	sub	sp, #44	; 0x2c
 8005180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DBG_Init_1 */

  /* USER CODE END DBG_Init_1 */
#if defined (DEBUGGER_ON) && ( DEBUGGER_ON == 1 )
  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8005182:	2414      	movs	r4, #20
 8005184:	193b      	adds	r3, r7, r4
 8005186:	0018      	movs	r0, r3
 8005188:	2314      	movs	r3, #20
 800518a:	001a      	movs	r2, r3
 800518c:	2100      	movs	r1, #0
 800518e:	f018 ff36 	bl	801dffe <memset>

  /* Enable the GPIO Clock */
  DGB_LINE1_CLK_ENABLE();
 8005192:	4b4a      	ldr	r3, [pc, #296]	; (80052bc <DBG_Init+0x140>)
 8005194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005196:	4b49      	ldr	r3, [pc, #292]	; (80052bc <DBG_Init+0x140>)
 8005198:	2102      	movs	r1, #2
 800519a:	430a      	orrs	r2, r1
 800519c:	62da      	str	r2, [r3, #44]	; 0x2c
 800519e:	4b47      	ldr	r3, [pc, #284]	; (80052bc <DBG_Init+0x140>)
 80051a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a2:	2202      	movs	r2, #2
 80051a4:	4013      	ands	r3, r2
 80051a6:	613b      	str	r3, [r7, #16]
 80051a8:	693b      	ldr	r3, [r7, #16]
  DGB_LINE2_CLK_ENABLE();
 80051aa:	4b44      	ldr	r3, [pc, #272]	; (80052bc <DBG_Init+0x140>)
 80051ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ae:	4b43      	ldr	r3, [pc, #268]	; (80052bc <DBG_Init+0x140>)
 80051b0:	2102      	movs	r1, #2
 80051b2:	430a      	orrs	r2, r1
 80051b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80051b6:	4b41      	ldr	r3, [pc, #260]	; (80052bc <DBG_Init+0x140>)
 80051b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ba:	2202      	movs	r2, #2
 80051bc:	4013      	ands	r3, r2
 80051be:	60fb      	str	r3, [r7, #12]
 80051c0:	68fb      	ldr	r3, [r7, #12]
  DGB_LINE3_CLK_ENABLE();
 80051c2:	4b3e      	ldr	r3, [pc, #248]	; (80052bc <DBG_Init+0x140>)
 80051c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051c6:	4b3d      	ldr	r3, [pc, #244]	; (80052bc <DBG_Init+0x140>)
 80051c8:	2102      	movs	r1, #2
 80051ca:	430a      	orrs	r2, r1
 80051cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80051ce:	4b3b      	ldr	r3, [pc, #236]	; (80052bc <DBG_Init+0x140>)
 80051d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d2:	2202      	movs	r2, #2
 80051d4:	4013      	ands	r3, r2
 80051d6:	60bb      	str	r3, [r7, #8]
 80051d8:	68bb      	ldr	r3, [r7, #8]
  DGB_LINE4_CLK_ENABLE();
 80051da:	4b38      	ldr	r3, [pc, #224]	; (80052bc <DBG_Init+0x140>)
 80051dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051de:	4b37      	ldr	r3, [pc, #220]	; (80052bc <DBG_Init+0x140>)
 80051e0:	2102      	movs	r1, #2
 80051e2:	430a      	orrs	r2, r1
 80051e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80051e6:	4b35      	ldr	r3, [pc, #212]	; (80052bc <DBG_Init+0x140>)
 80051e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ea:	2202      	movs	r2, #2
 80051ec:	4013      	ands	r3, r2
 80051ee:	607b      	str	r3, [r7, #4]
 80051f0:	687b      	ldr	r3, [r7, #4]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 80051f2:	0021      	movs	r1, r4
 80051f4:	187b      	adds	r3, r7, r1
 80051f6:	2201      	movs	r2, #1
 80051f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull   = GPIO_PULLUP;
 80051fa:	187b      	adds	r3, r7, r1
 80051fc:	2201      	movs	r2, #1
 80051fe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed  = GPIO_SPEED_HIGH;
 8005200:	187b      	adds	r3, r7, r1
 8005202:	2203      	movs	r2, #3
 8005204:	60da      	str	r2, [r3, #12]

  GPIO_InitStruct.Pin    = DGB_LINE1_PIN;
 8005206:	187b      	adds	r3, r7, r1
 8005208:	2280      	movs	r2, #128	; 0x80
 800520a:	0152      	lsls	r2, r2, #5
 800520c:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(DGB_LINE1_PORT, &GPIO_InitStruct);
 800520e:	000c      	movs	r4, r1
 8005210:	187b      	adds	r3, r7, r1
 8005212:	4a2b      	ldr	r2, [pc, #172]	; (80052c0 <DBG_Init+0x144>)
 8005214:	0019      	movs	r1, r3
 8005216:	0010      	movs	r0, r2
 8005218:	f002 fb4e 	bl	80078b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = DGB_LINE2_PIN;
 800521c:	0021      	movs	r1, r4
 800521e:	187b      	adds	r3, r7, r1
 8005220:	2280      	movs	r2, #128	; 0x80
 8005222:	0192      	lsls	r2, r2, #6
 8005224:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(DGB_LINE2_PORT, &GPIO_InitStruct);
 8005226:	000c      	movs	r4, r1
 8005228:	187b      	adds	r3, r7, r1
 800522a:	4a25      	ldr	r2, [pc, #148]	; (80052c0 <DBG_Init+0x144>)
 800522c:	0019      	movs	r1, r3
 800522e:	0010      	movs	r0, r2
 8005230:	f002 fb42 	bl	80078b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = DGB_LINE3_PIN;
 8005234:	0021      	movs	r1, r4
 8005236:	187b      	adds	r3, r7, r1
 8005238:	2280      	movs	r2, #128	; 0x80
 800523a:	01d2      	lsls	r2, r2, #7
 800523c:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(DGB_LINE3_PORT, &GPIO_InitStruct);
 800523e:	000c      	movs	r4, r1
 8005240:	187b      	adds	r3, r7, r1
 8005242:	4a1f      	ldr	r2, [pc, #124]	; (80052c0 <DBG_Init+0x144>)
 8005244:	0019      	movs	r1, r3
 8005246:	0010      	movs	r0, r2
 8005248:	f002 fb36 	bl	80078b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = DGB_LINE4_PIN;
 800524c:	0021      	movs	r1, r4
 800524e:	187b      	adds	r3, r7, r1
 8005250:	2280      	movs	r2, #128	; 0x80
 8005252:	0212      	lsls	r2, r2, #8
 8005254:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(DGB_LINE4_PORT, &GPIO_InitStruct);
 8005256:	187b      	adds	r3, r7, r1
 8005258:	4a19      	ldr	r2, [pc, #100]	; (80052c0 <DBG_Init+0x144>)
 800525a:	0019      	movs	r1, r3
 800525c:	0010      	movs	r0, r2
 800525e:	f002 fb2b 	bl	80078b8 <HAL_GPIO_Init>

  /* Reset debug Pins */
  HAL_GPIO_WritePin(DGB_LINE1_PORT, DGB_LINE1_PIN, GPIO_PIN_RESET);
 8005262:	2380      	movs	r3, #128	; 0x80
 8005264:	015b      	lsls	r3, r3, #5
 8005266:	4816      	ldr	r0, [pc, #88]	; (80052c0 <DBG_Init+0x144>)
 8005268:	2200      	movs	r2, #0
 800526a:	0019      	movs	r1, r3
 800526c:	f002 fda1 	bl	8007db2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DGB_LINE2_PORT, DGB_LINE2_PIN, GPIO_PIN_RESET);
 8005270:	2380      	movs	r3, #128	; 0x80
 8005272:	019b      	lsls	r3, r3, #6
 8005274:	4812      	ldr	r0, [pc, #72]	; (80052c0 <DBG_Init+0x144>)
 8005276:	2200      	movs	r2, #0
 8005278:	0019      	movs	r1, r3
 800527a:	f002 fd9a 	bl	8007db2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DGB_LINE3_PORT, DGB_LINE3_PIN, GPIO_PIN_RESET);
 800527e:	2380      	movs	r3, #128	; 0x80
 8005280:	01db      	lsls	r3, r3, #7
 8005282:	480f      	ldr	r0, [pc, #60]	; (80052c0 <DBG_Init+0x144>)
 8005284:	2200      	movs	r2, #0
 8005286:	0019      	movs	r1, r3
 8005288:	f002 fd93 	bl	8007db2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DGB_LINE4_PORT, DGB_LINE4_PIN, GPIO_PIN_RESET);
 800528c:	2380      	movs	r3, #128	; 0x80
 800528e:	021b      	lsls	r3, r3, #8
 8005290:	480b      	ldr	r0, [pc, #44]	; (80052c0 <DBG_Init+0x144>)
 8005292:	2200      	movs	r2, #0
 8005294:	0019      	movs	r1, r3
 8005296:	f002 fd8c 	bl	8007db2 <HAL_GPIO_WritePin>

  __HAL_RCC_DBGMCU_CLK_ENABLE();
 800529a:	4b08      	ldr	r3, [pc, #32]	; (80052bc <DBG_Init+0x140>)
 800529c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800529e:	4b07      	ldr	r3, [pc, #28]	; (80052bc <DBG_Init+0x140>)
 80052a0:	2180      	movs	r1, #128	; 0x80
 80052a2:	03c9      	lsls	r1, r1, #15
 80052a4:	430a      	orrs	r2, r1
 80052a6:	635a      	str	r2, [r3, #52]	; 0x34

  HAL_DBGMCU_EnableDBGSleepMode();
 80052a8:	f001 f97e 	bl	80065a8 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 80052ac:	f001 f98a 	bl	80065c4 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 80052b0:	f001 f996 	bl	80065e0 <HAL_DBGMCU_EnableDBGStandbyMode>
#error "DEBUGGER_ON not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */
  /* USER CODE BEGIN DBG_Init_Last */

  /* USER CODE END DBG_Init_Last */
}
 80052b4:	46c0      	nop			; (mov r8, r8)
 80052b6:	46bd      	mov	sp, r7
 80052b8:	b00b      	add	sp, #44	; 0x2c
 80052ba:	bd90      	pop	{r4, r7, pc}
 80052bc:	40021000 	.word	0x40021000
 80052c0:	50000400 	.word	0x50000400

080052c4 <EnvSensors_Init>:

  /* USER CODE END EnvSensors_Read_Last */
}

void  EnvSensors_Init(void)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	af00      	add	r7, sp, #0
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  /* USER CODE BEGIN EnvSensors_Init_Last */

  /* USER CODE END EnvSensors_Init_Last */
}
 80052c8:	46c0      	nop			; (mov r8, r8)
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
	...

080052d0 <MX_USART2_Init>:
DMA_HandleTypeDef hdma_tx;

/* USART2 init function */

void MX_USART2_Init(void)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	af00      	add	r7, sp, #0

  husart2.Instance        = USART2;
 80052d4:	4b10      	ldr	r3, [pc, #64]	; (8005318 <MX_USART2_Init+0x48>)
 80052d6:	4a11      	ldr	r2, [pc, #68]	; (800531c <MX_USART2_Init+0x4c>)
 80052d8:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate   = USART_BAUDRATE;
 80052da:	4b0f      	ldr	r3, [pc, #60]	; (8005318 <MX_USART2_Init+0x48>)
 80052dc:	22e1      	movs	r2, #225	; 0xe1
 80052de:	0252      	lsls	r2, r2, #9
 80052e0:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = UART_WORDLENGTH_8B;
 80052e2:	4b0d      	ldr	r3, [pc, #52]	; (8005318 <MX_USART2_Init+0x48>)
 80052e4:	2200      	movs	r2, #0
 80052e6:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits   = UART_STOPBITS_1;
 80052e8:	4b0b      	ldr	r3, [pc, #44]	; (8005318 <MX_USART2_Init+0x48>)
 80052ea:	2200      	movs	r2, #0
 80052ec:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity     = UART_PARITY_NONE;
 80052ee:	4b0a      	ldr	r3, [pc, #40]	; (8005318 <MX_USART2_Init+0x48>)
 80052f0:	2200      	movs	r2, #0
 80052f2:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode       = UART_MODE_TX;
 80052f4:	4b08      	ldr	r3, [pc, #32]	; (8005318 <MX_USART2_Init+0x48>)
 80052f6:	2208      	movs	r2, #8
 80052f8:	615a      	str	r2, [r3, #20]
  husart2.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 80052fa:	4b07      	ldr	r3, [pc, #28]	; (8005318 <MX_USART2_Init+0x48>)
 80052fc:	2200      	movs	r2, #0
 80052fe:	619a      	str	r2, [r3, #24]

  if (HAL_UART_Init(&husart2) != HAL_OK)
 8005300:	4b05      	ldr	r3, [pc, #20]	; (8005318 <MX_USART2_Init+0x48>)
 8005302:	0018      	movs	r0, r3
 8005304:	f005 fcc4 	bl	800ac90 <HAL_UART_Init>
 8005308:	1e03      	subs	r3, r0, #0
 800530a:	d001      	beq.n	8005310 <MX_USART2_Init+0x40>
  {
    Error_Handler();
 800530c:	f7fe fcdc 	bl	8003cc8 <Error_Handler>
  }
}
 8005310:	46c0      	nop			; (mov r8, r8)
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	46c0      	nop			; (mov r8, r8)
 8005318:	20001634 	.word	0x20001634
 800531c:	40004400 	.word	0x40004400

08005320 <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle)
{
 8005320:	b590      	push	{r4, r7, lr}
 8005322:	b095      	sub	sp, #84	; 0x54
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005328:	233c      	movs	r3, #60	; 0x3c
 800532a:	18fb      	adds	r3, r7, r3
 800532c:	0018      	movs	r0, r3
 800532e:	2314      	movs	r3, #20
 8005330:	001a      	movs	r2, r3
 8005332:	2100      	movs	r1, #0
 8005334:	f018 fe63 	bl	801dffe <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005338:	2418      	movs	r4, #24
 800533a:	193b      	adds	r3, r7, r4
 800533c:	0018      	movs	r0, r3
 800533e:	2324      	movs	r3, #36	; 0x24
 8005340:	001a      	movs	r2, r3
 8005342:	2100      	movs	r1, #0
 8005344:	f018 fe5b 	bl	801dffe <memset>
  if (uartHandle->Instance == USART2)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a57      	ldr	r2, [pc, #348]	; (80054ac <HAL_UART_MspInit+0x18c>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d000      	beq.n	8005354 <HAL_UART_MspInit+0x34>
 8005352:	e0a6      	b.n	80054a2 <HAL_UART_MspInit+0x182>

    /* USER CODE END USART2_MspInit 0 */

    /* Enable peripherals and GPIO Clocks */
    /* Enable GPIO TX/RX clock */
    USARTx_TX_GPIO_CLK_ENABLE();
 8005354:	4b56      	ldr	r3, [pc, #344]	; (80054b0 <HAL_UART_MspInit+0x190>)
 8005356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005358:	4b55      	ldr	r3, [pc, #340]	; (80054b0 <HAL_UART_MspInit+0x190>)
 800535a:	2101      	movs	r1, #1
 800535c:	430a      	orrs	r2, r1
 800535e:	62da      	str	r2, [r3, #44]	; 0x2c
 8005360:	4b53      	ldr	r3, [pc, #332]	; (80054b0 <HAL_UART_MspInit+0x190>)
 8005362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005364:	2201      	movs	r2, #1
 8005366:	4013      	ands	r3, r2
 8005368:	617b      	str	r3, [r7, #20]
 800536a:	697b      	ldr	r3, [r7, #20]
    USARTx_RX_GPIO_CLK_ENABLE();
 800536c:	4b50      	ldr	r3, [pc, #320]	; (80054b0 <HAL_UART_MspInit+0x190>)
 800536e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005370:	4b4f      	ldr	r3, [pc, #316]	; (80054b0 <HAL_UART_MspInit+0x190>)
 8005372:	2101      	movs	r1, #1
 8005374:	430a      	orrs	r2, r1
 8005376:	62da      	str	r2, [r3, #44]	; 0x2c
 8005378:	4b4d      	ldr	r3, [pc, #308]	; (80054b0 <HAL_UART_MspInit+0x190>)
 800537a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800537c:	2201      	movs	r2, #1
 800537e:	4013      	ands	r3, r2
 8005380:	613b      	str	r3, [r7, #16]
 8005382:	693b      	ldr	r3, [r7, #16]

    /* Enable USARTx clock */
    __USART2_CLK_ENABLE();
 8005384:	4b4a      	ldr	r3, [pc, #296]	; (80054b0 <HAL_UART_MspInit+0x190>)
 8005386:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005388:	4b49      	ldr	r3, [pc, #292]	; (80054b0 <HAL_UART_MspInit+0x190>)
 800538a:	2180      	movs	r1, #128	; 0x80
 800538c:	0289      	lsls	r1, r1, #10
 800538e:	430a      	orrs	r2, r1
 8005390:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable DMA clock */
    DMAx_CLK_ENABLE();
 8005392:	4b47      	ldr	r3, [pc, #284]	; (80054b0 <HAL_UART_MspInit+0x190>)
 8005394:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005396:	4b46      	ldr	r3, [pc, #280]	; (80054b0 <HAL_UART_MspInit+0x190>)
 8005398:	2101      	movs	r1, #1
 800539a:	430a      	orrs	r2, r1
 800539c:	631a      	str	r2, [r3, #48]	; 0x30
 800539e:	4b44      	ldr	r3, [pc, #272]	; (80054b0 <HAL_UART_MspInit+0x190>)
 80053a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a2:	2201      	movs	r2, #1
 80053a4:	4013      	ands	r3, r2
 80053a6:	60fb      	str	r3, [r7, #12]
 80053a8:	68fb      	ldr	r3, [r7, #12]

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80053aa:	4b41      	ldr	r3, [pc, #260]	; (80054b0 <HAL_UART_MspInit+0x190>)
 80053ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053ae:	4b40      	ldr	r3, [pc, #256]	; (80054b0 <HAL_UART_MspInit+0x190>)
 80053b0:	2180      	movs	r1, #128	; 0x80
 80053b2:	0289      	lsls	r1, r1, #10
 80053b4:	430a      	orrs	r2, r1
 80053b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Select SYSTEM clock for USART2 commuincation TX/RX */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80053b8:	193b      	adds	r3, r7, r4
 80053ba:	2202      	movs	r2, #2
 80053bc:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 80053be:	193b      	adds	r3, r7, r4
 80053c0:	2204      	movs	r2, #4
 80053c2:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80053c4:	193b      	adds	r3, r7, r4
 80053c6:	0018      	movs	r0, r3
 80053c8:	f004 f9e4 	bl	8009794 <HAL_RCCEx_PeriphCLKConfig>
 80053cc:	1e03      	subs	r3, r0, #0
 80053ce:	d001      	beq.n	80053d4 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 80053d0:	f7fe fc7a 	bl	8003cc8 <Error_Handler>

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
      */
    GPIO_InitStruct.Pin = USARTx_TX_Pin;
 80053d4:	243c      	movs	r4, #60	; 0x3c
 80053d6:	193b      	adds	r3, r7, r4
 80053d8:	2204      	movs	r2, #4
 80053da:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053dc:	193b      	adds	r3, r7, r4
 80053de:	2202      	movs	r2, #2
 80053e0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053e2:	193b      	adds	r3, r7, r4
 80053e4:	2200      	movs	r2, #0
 80053e6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80053e8:	193b      	adds	r3, r7, r4
 80053ea:	2203      	movs	r2, #3
 80053ec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = USARTx_TX_AF;
 80053ee:	193b      	adds	r3, r7, r4
 80053f0:	2204      	movs	r2, #4
 80053f2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 80053f4:	193a      	adds	r2, r7, r4
 80053f6:	23a0      	movs	r3, #160	; 0xa0
 80053f8:	05db      	lsls	r3, r3, #23
 80053fa:	0011      	movs	r1, r2
 80053fc:	0018      	movs	r0, r3
 80053fe:	f002 fa5b 	bl	80078b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USARTx_RX_Pin;
 8005402:	0021      	movs	r1, r4
 8005404:	187b      	adds	r3, r7, r1
 8005406:	2208      	movs	r2, #8
 8005408:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800540a:	187b      	adds	r3, r7, r1
 800540c:	2202      	movs	r2, #2
 800540e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005410:	187b      	adds	r3, r7, r1
 8005412:	2200      	movs	r2, #0
 8005414:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8005416:	187b      	adds	r3, r7, r1
 8005418:	2203      	movs	r2, #3
 800541a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = USARTx_RX_AF;
 800541c:	187b      	adds	r3, r7, r1
 800541e:	2204      	movs	r2, #4
 8005420:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 8005422:	187a      	adds	r2, r7, r1
 8005424:	23a0      	movs	r3, #160	; 0xa0
 8005426:	05db      	lsls	r3, r3, #23
 8005428:	0011      	movs	r1, r2
 800542a:	0018      	movs	r0, r3
 800542c:	f002 fa44 	bl	80078b8 <HAL_GPIO_Init>


    /* USART2 DMA Init */
    /* USART2_TX Init */
    /* Configure the DMA handler for Transmission process */
    hdma_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 8005430:	4b20      	ldr	r3, [pc, #128]	; (80054b4 <HAL_UART_MspInit+0x194>)
 8005432:	4a21      	ldr	r2, [pc, #132]	; (80054b8 <HAL_UART_MspInit+0x198>)
 8005434:	601a      	str	r2, [r3, #0]
    hdma_tx.Init.Request             = USARTx_TX_DMA_REQUEST;
 8005436:	4b1f      	ldr	r3, [pc, #124]	; (80054b4 <HAL_UART_MspInit+0x194>)
 8005438:	2204      	movs	r2, #4
 800543a:	605a      	str	r2, [r3, #4]
    hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 800543c:	4b1d      	ldr	r3, [pc, #116]	; (80054b4 <HAL_UART_MspInit+0x194>)
 800543e:	2210      	movs	r2, #16
 8005440:	609a      	str	r2, [r3, #8]
    hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8005442:	4b1c      	ldr	r3, [pc, #112]	; (80054b4 <HAL_UART_MspInit+0x194>)
 8005444:	2200      	movs	r2, #0
 8005446:	60da      	str	r2, [r3, #12]
    hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8005448:	4b1a      	ldr	r3, [pc, #104]	; (80054b4 <HAL_UART_MspInit+0x194>)
 800544a:	2280      	movs	r2, #128	; 0x80
 800544c:	611a      	str	r2, [r3, #16]
    hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800544e:	4b19      	ldr	r3, [pc, #100]	; (80054b4 <HAL_UART_MspInit+0x194>)
 8005450:	2200      	movs	r2, #0
 8005452:	615a      	str	r2, [r3, #20]
    hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8005454:	4b17      	ldr	r3, [pc, #92]	; (80054b4 <HAL_UART_MspInit+0x194>)
 8005456:	2200      	movs	r2, #0
 8005458:	619a      	str	r2, [r3, #24]
    hdma_tx.Init.Mode                = DMA_NORMAL;
 800545a:	4b16      	ldr	r3, [pc, #88]	; (80054b4 <HAL_UART_MspInit+0x194>)
 800545c:	2200      	movs	r2, #0
 800545e:	61da      	str	r2, [r3, #28]
    hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
 8005460:	4b14      	ldr	r3, [pc, #80]	; (80054b4 <HAL_UART_MspInit+0x194>)
 8005462:	2200      	movs	r2, #0
 8005464:	621a      	str	r2, [r3, #32]

    if (HAL_DMA_Init(&hdma_tx) != HAL_OK)
 8005466:	4b13      	ldr	r3, [pc, #76]	; (80054b4 <HAL_UART_MspInit+0x194>)
 8005468:	0018      	movs	r0, r3
 800546a:	f001 ff2f 	bl	80072cc <HAL_DMA_Init>
 800546e:	1e03      	subs	r3, r0, #0
 8005470:	d001      	beq.n	8005476 <HAL_UART_MspInit+0x156>
    {
      Error_Handler();
 8005472:	f7fe fc29 	bl	8003cc8 <Error_Handler>
    }


    /* Associate the initialized DMA handle to the UART handle */
    __HAL_LINKDMA(uartHandle, hdmatx, hdma_tx);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a0e      	ldr	r2, [pc, #56]	; (80054b4 <HAL_UART_MspInit+0x194>)
 800547a:	66da      	str	r2, [r3, #108]	; 0x6c
 800547c:	4b0d      	ldr	r3, [pc, #52]	; (80054b4 <HAL_UART_MspInit+0x194>)
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	629a      	str	r2, [r3, #40]	; 0x28

    /* Configure the NVIC for DMA */
    /* NVIC configuration for DMA transfer complete interrupt (USART1_TX) */
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 8005482:	2201      	movs	r2, #1
 8005484:	2100      	movs	r1, #0
 8005486:	200b      	movs	r0, #11
 8005488:	f001 feea 	bl	8007260 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 800548c:	200b      	movs	r0, #11
 800548e:	f001 fefc 	bl	800728a <HAL_NVIC_EnableIRQ>

    /* NVIC for USART, to catch the TX complete */
    HAL_NVIC_SetPriority(USARTx_IRQn, USARTx_DMA_Priority, 1);
 8005492:	2201      	movs	r2, #1
 8005494:	2100      	movs	r1, #0
 8005496:	201c      	movs	r0, #28
 8005498:	f001 fee2 	bl	8007260 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_IRQn);
 800549c:	201c      	movs	r0, #28
 800549e:	f001 fef4 	bl	800728a <HAL_NVIC_EnableIRQ>

    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }
}
 80054a2:	46c0      	nop			; (mov r8, r8)
 80054a4:	46bd      	mov	sp, r7
 80054a6:	b015      	add	sp, #84	; 0x54
 80054a8:	bd90      	pop	{r4, r7, pc}
 80054aa:	46c0      	nop			; (mov r8, r8)
 80054ac:	40004400 	.word	0x40004400
 80054b0:	40021000 	.word	0x40021000
 80054b4:	200015ec 	.word	0x200015ec
 80054b8:	40020080 	.word	0x40020080

080054bc <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef *uartHandle)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]

  if (uartHandle->Instance == USART2)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a0d      	ldr	r2, [pc, #52]	; (8005500 <HAL_UART_MspDeInit+0x44>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d113      	bne.n	80054f6 <HAL_UART_MspDeInit+0x3a>
  {
    /* USER CODE BEGIN USART2_MspDeInit 0 */

    /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 80054ce:	4b0d      	ldr	r3, [pc, #52]	; (8005504 <HAL_UART_MspDeInit+0x48>)
 80054d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054d2:	4b0c      	ldr	r3, [pc, #48]	; (8005504 <HAL_UART_MspDeInit+0x48>)
 80054d4:	490c      	ldr	r1, [pc, #48]	; (8005508 <HAL_UART_MspDeInit+0x4c>)
 80054d6:	400a      	ands	r2, r1
 80054d8:	639a      	str	r2, [r3, #56]	; 0x38

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
      */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 80054da:	23a0      	movs	r3, #160	; 0xa0
 80054dc:	05db      	lsls	r3, r3, #23
 80054de:	210c      	movs	r1, #12
 80054e0:	0018      	movs	r0, r3
 80054e2:	f002 fb67 	bl	8007bb4 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054ea:	0018      	movs	r0, r3
 80054ec:	f001 ff66 	bl	80073bc <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80054f0:	201c      	movs	r0, #28
 80054f2:	f001 feda 	bl	80072aa <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN USART2_MspDeInit 1 */

    /* USER CODE END USART2_MspDeInit 1 */
  }
}
 80054f6:	46c0      	nop			; (mov r8, r8)
 80054f8:	46bd      	mov	sp, r7
 80054fa:	b002      	add	sp, #8
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	46c0      	nop			; (mov r8, r8)
 8005500:	40004400 	.word	0x40004400
 8005504:	40021000 	.word	0x40021000
 8005508:	fffdffff 	.word	0xfffdffff

0800550c <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8005514:	4b05      	ldr	r3, [pc, #20]	; (800552c <vcom_Init+0x20>)
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	601a      	str	r2, [r3, #0]
  MX_DMA_Init();
 800551a:	f7fe fb15 	bl	8003b48 <MX_DMA_Init>
  MX_USART2_Init();
 800551e:	f7ff fed7 	bl	80052d0 <MX_USART2_Init>
  return UTIL_ADV_TRACE_OK;
 8005522:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8005524:	0018      	movs	r0, r3
 8005526:	46bd      	mov	sp, r7
 8005528:	b002      	add	sp, #8
 800552a:	bd80      	pop	{r7, pc}
 800552c:	20000404 	.word	0x20000404

08005530 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
 8005534:	4b0b      	ldr	r3, [pc, #44]	; (8005564 <vcom_DeInit+0x34>)
 8005536:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005538:	4b0a      	ldr	r3, [pc, #40]	; (8005564 <vcom_DeInit+0x34>)
 800553a:	2180      	movs	r1, #128	; 0x80
 800553c:	0289      	lsls	r1, r1, #10
 800553e:	430a      	orrs	r2, r1
 8005540:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_USART2_RELEASE_RESET();
 8005542:	4b08      	ldr	r3, [pc, #32]	; (8005564 <vcom_DeInit+0x34>)
 8005544:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005546:	4b07      	ldr	r3, [pc, #28]	; (8005564 <vcom_DeInit+0x34>)
 8005548:	4907      	ldr	r1, [pc, #28]	; (8005568 <vcom_DeInit+0x38>)
 800554a:	400a      	ands	r2, r1
 800554c:	629a      	str	r2, [r3, #40]	; 0x28

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&UartHandle);
 800554e:	4b07      	ldr	r3, [pc, #28]	; (800556c <vcom_DeInit+0x3c>)
 8005550:	0018      	movs	r0, r3
 8005552:	f7ff ffb3 	bl	80054bc <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* temporary while waiting CR 50840: MX implementation of  MX_DMA_DeInit() */
  /* For the time being user should change manually the channel according to the MX settings */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8005556:	200b      	movs	r0, #11
 8005558:	f001 fea7 	bl	80072aa <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 800555c:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 800555e:	0018      	movs	r0, r3
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	40021000 	.word	0x40021000
 8005568:	fffdffff 	.word	0xfffdffff
 800556c:	20001634 	.word	0x20001634

08005570 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b082      	sub	sp, #8
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	000a      	movs	r2, r1
 800557a:	1cbb      	adds	r3, r7, #2
 800557c:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&UartHandle, p_data, size);
 800557e:	1cbb      	adds	r3, r7, #2
 8005580:	881a      	ldrh	r2, [r3, #0]
 8005582:	6879      	ldr	r1, [r7, #4]
 8005584:	4b04      	ldr	r3, [pc, #16]	; (8005598 <vcom_Trace_DMA+0x28>)
 8005586:	0018      	movs	r0, r3
 8005588:	f005 fc2e 	bl	800ade8 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 800558c:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 800558e:	0018      	movs	r0, r3
 8005590:	46bd      	mov	sp, r7
 8005592:	b002      	add	sp, #8
 8005594:	bd80      	pop	{r7, pc}
 8005596:	46c0      	nop			; (mov r8, r8)
 8005598:	20001634 	.word	0x20001634

0800559c <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 80055a4:	4b1d      	ldr	r3, [pc, #116]	; (800561c <vcom_ReceiveInit+0x80>)
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	601a      	str	r2, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80055aa:	2108      	movs	r1, #8
 80055ac:	187b      	adds	r3, r7, r1
 80055ae:	2280      	movs	r2, #128	; 0x80
 80055b0:	0392      	lsls	r2, r2, #14
 80055b2:	601a      	str	r2, [r3, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&UartHandle, WakeUpSelection);
 80055b4:	187b      	adds	r3, r7, r1
 80055b6:	481a      	ldr	r0, [pc, #104]	; (8005620 <vcom_ReceiveInit+0x84>)
 80055b8:	6819      	ldr	r1, [r3, #0]
 80055ba:	685a      	ldr	r2, [r3, #4]
 80055bc:	f006 fd6c 	bl	800c098 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&UartHandle, USART_ISR_BUSY) == SET);
 80055c0:	46c0      	nop			; (mov r8, r8)
 80055c2:	4b17      	ldr	r3, [pc, #92]	; (8005620 <vcom_ReceiveInit+0x84>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	69da      	ldr	r2, [r3, #28]
 80055c8:	2380      	movs	r3, #128	; 0x80
 80055ca:	025b      	lsls	r3, r3, #9
 80055cc:	401a      	ands	r2, r3
 80055ce:	2380      	movs	r3, #128	; 0x80
 80055d0:	025b      	lsls	r3, r3, #9
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d0f5      	beq.n	80055c2 <vcom_ReceiveInit+0x26>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&UartHandle, USART_ISR_REACK) == RESET);
 80055d6:	46c0      	nop			; (mov r8, r8)
 80055d8:	4b11      	ldr	r3, [pc, #68]	; (8005620 <vcom_ReceiveInit+0x84>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	69da      	ldr	r2, [r3, #28]
 80055de:	2380      	movs	r3, #128	; 0x80
 80055e0:	03db      	lsls	r3, r3, #15
 80055e2:	401a      	ands	r2, r3
 80055e4:	2380      	movs	r3, #128	; 0x80
 80055e6:	03db      	lsls	r3, r3, #15
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d1f5      	bne.n	80055d8 <vcom_ReceiveInit+0x3c>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&UartHandle, UART_IT_WUF);
 80055ec:	4b0c      	ldr	r3, [pc, #48]	; (8005620 <vcom_ReceiveInit+0x84>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	689a      	ldr	r2, [r3, #8]
 80055f2:	4b0b      	ldr	r3, [pc, #44]	; (8005620 <vcom_ReceiveInit+0x84>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2180      	movs	r1, #128	; 0x80
 80055f8:	03c9      	lsls	r1, r1, #15
 80055fa:	430a      	orrs	r2, r1
 80055fc:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&UartHandle);
 80055fe:	4b08      	ldr	r3, [pc, #32]	; (8005620 <vcom_ReceiveInit+0x84>)
 8005600:	0018      	movs	r0, r3
 8005602:	f006 fdaf 	bl	800c164 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&UartHandle, &charRx, 1);
 8005606:	4907      	ldr	r1, [pc, #28]	; (8005624 <vcom_ReceiveInit+0x88>)
 8005608:	4b05      	ldr	r3, [pc, #20]	; (8005620 <vcom_ReceiveInit+0x84>)
 800560a:	2201      	movs	r2, #1
 800560c:	0018      	movs	r0, r3
 800560e:	f005 fb93 	bl	800ad38 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8005612:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8005614:	0018      	movs	r0, r3
 8005616:	46bd      	mov	sp, r7
 8005618:	b004      	add	sp, #16
 800561a:	bd80      	pop	{r7, pc}
 800561c:	20000408 	.word	0x20000408
 8005620:	20001634 	.word	0x20001634
 8005624:	200016b8 	.word	0x200016b8

08005628 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 8005630:	4b03      	ldr	r3, [pc, #12]	; (8005640 <HAL_UART_TxCpltCallback+0x18>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2000      	movs	r0, #0
 8005636:	4798      	blx	r3
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8005638:	46c0      	nop			; (mov r8, r8)
 800563a:	46bd      	mov	sp, r7
 800563c:	b002      	add	sp, #8
 800563e:	bd80      	pop	{r7, pc}
 8005640:	20000404 	.word	0x20000404

08005644 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == UartHandle->ErrorCode))
 800564c:	4b0c      	ldr	r3, [pc, #48]	; (8005680 <HAL_UART_RxCpltCallback+0x3c>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d00a      	beq.n	800566a <HAL_UART_RxCpltCallback+0x26>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2280      	movs	r2, #128	; 0x80
 8005658:	589b      	ldr	r3, [r3, r2]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d105      	bne.n	800566a <HAL_UART_RxCpltCallback+0x26>
  {
    RxCpltCallback(&charRx, 1, 0);
 800565e:	4b08      	ldr	r3, [pc, #32]	; (8005680 <HAL_UART_RxCpltCallback+0x3c>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4808      	ldr	r0, [pc, #32]	; (8005684 <HAL_UART_RxCpltCallback+0x40>)
 8005664:	2200      	movs	r2, #0
 8005666:	2101      	movs	r1, #1
 8005668:	4798      	blx	r3
  }
  HAL_UART_Receive_IT(UartHandle, &charRx, 1);
 800566a:	4906      	ldr	r1, [pc, #24]	; (8005684 <HAL_UART_RxCpltCallback+0x40>)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	0018      	movs	r0, r3
 8005672:	f005 fb61 	bl	800ad38 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8005676:	46c0      	nop			; (mov r8, r8)
 8005678:	46bd      	mov	sp, r7
 800567a:	b002      	add	sp, #8
 800567c:	bd80      	pop	{r7, pc}
 800567e:	46c0      	nop			; (mov r8, r8)
 8005680:	20000408 	.word	0x20000408
 8005684:	200016b8 	.word	0x200016b8

08005688 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8005688:	480d      	ldr	r0, [pc, #52]	; (80056c0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800568a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800568c:	480d      	ldr	r0, [pc, #52]	; (80056c4 <LoopForever+0x6>)
  ldr r1, =_edata
 800568e:	490e      	ldr	r1, [pc, #56]	; (80056c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005690:	4a0e      	ldr	r2, [pc, #56]	; (80056cc <LoopForever+0xe>)
  movs r3, #0
 8005692:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005694:	e002      	b.n	800569c <LoopCopyDataInit>

08005696 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005696:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005698:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800569a:	3304      	adds	r3, #4

0800569c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800569c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800569e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80056a0:	d3f9      	bcc.n	8005696 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80056a2:	4a0b      	ldr	r2, [pc, #44]	; (80056d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80056a4:	4c0b      	ldr	r4, [pc, #44]	; (80056d4 <LoopForever+0x16>)
  movs r3, #0
 80056a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80056a8:	e001      	b.n	80056ae <LoopFillZerobss>

080056aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80056aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80056ac:	3204      	adds	r2, #4

080056ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80056ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80056b0:	d3fb      	bcc.n	80056aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80056b2:	f000 feeb 	bl	800648c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80056b6:	f018 fc75 	bl	801dfa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80056ba:	f7fe fa63 	bl	8003b84 <main>

080056be <LoopForever>:

LoopForever:
    b LoopForever
 80056be:	e7fe      	b.n	80056be <LoopForever>
   ldr   r0, =_estack
 80056c0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80056c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80056c8:	2000023c 	.word	0x2000023c
  ldr r2, =_sidata
 80056cc:	0801ff64 	.word	0x0801ff64
  ldr r2, =_sbss
 80056d0:	2000023c 	.word	0x2000023c
  ldr r4, =_ebss
 80056d4:	200017b4 	.word	0x200017b4

080056d8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80056d8:	e7fe      	b.n	80056d8 <ADC1_COMP_IRQHandler>
	...

080056dc <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80056e4:	4b11      	ldr	r3, [pc, #68]	; (800572c <_sbrk+0x50>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d102      	bne.n	80056f2 <_sbrk+0x16>
		heap_end = &end;
 80056ec:	4b0f      	ldr	r3, [pc, #60]	; (800572c <_sbrk+0x50>)
 80056ee:	4a10      	ldr	r2, [pc, #64]	; (8005730 <_sbrk+0x54>)
 80056f0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80056f2:	4b0e      	ldr	r3, [pc, #56]	; (800572c <_sbrk+0x50>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80056f8:	4b0c      	ldr	r3, [pc, #48]	; (800572c <_sbrk+0x50>)
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	18d2      	adds	r2, r2, r3
 8005700:	466b      	mov	r3, sp
 8005702:	429a      	cmp	r2, r3
 8005704:	d907      	bls.n	8005716 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8005706:	f018 fc47 	bl	801df98 <__errno>
 800570a:	0003      	movs	r3, r0
 800570c:	220c      	movs	r2, #12
 800570e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8005710:	2301      	movs	r3, #1
 8005712:	425b      	negs	r3, r3
 8005714:	e006      	b.n	8005724 <_sbrk+0x48>
	}

	heap_end += incr;
 8005716:	4b05      	ldr	r3, [pc, #20]	; (800572c <_sbrk+0x50>)
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	18d2      	adds	r2, r2, r3
 800571e:	4b03      	ldr	r3, [pc, #12]	; (800572c <_sbrk+0x50>)
 8005720:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8005722:	68fb      	ldr	r3, [r7, #12]
}
 8005724:	0018      	movs	r0, r3
 8005726:	46bd      	mov	sp, r7
 8005728:	b004      	add	sp, #16
 800572a:	bd80      	pop	{r7, pc}
 800572c:	20000410 	.word	0x20000410
 8005730:	200017b8 	.word	0x200017b8

08005734 <BSP_SPI1_Init>:
  * @brief  Initializes SPI HAL.
  * @retval None
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800573a:	2300      	movs	r3, #0
 800573c:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 800573e:	4b0d      	ldr	r3, [pc, #52]	; (8005774 <BSP_SPI1_Init+0x40>)
 8005740:	4a0d      	ldr	r2, [pc, #52]	; (8005778 <BSP_SPI1_Init+0x44>)
 8005742:	601a      	str	r2, [r3, #0]
  if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8005744:	4b0b      	ldr	r3, [pc, #44]	; (8005774 <BSP_SPI1_Init+0x40>)
 8005746:	0018      	movs	r0, r3
 8005748:	f005 f9c1 	bl	800aace <HAL_SPI_GetState>
 800574c:	1e03      	subs	r3, r0, #0
 800574e:	d10c      	bne.n	800576a <BSP_SPI1_Init+0x36>
  {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0)
    /* Init the SPI Msp */
    SPI1_MspInit(&hspi1);
 8005750:	4b08      	ldr	r3, [pc, #32]	; (8005774 <BSP_SPI1_Init+0x40>)
 8005752:	0018      	movs	r0, r3
 8005754:	f000 f87e 	bl	8005854 <SPI1_MspInit>
      }
    }
#endif

    /* Init the SPI */
    if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8005758:	4b06      	ldr	r3, [pc, #24]	; (8005774 <BSP_SPI1_Init+0x40>)
 800575a:	0018      	movs	r0, r3
 800575c:	f000 f830 	bl	80057c0 <MX_SPI1_Init>
 8005760:	1e03      	subs	r3, r0, #0
 8005762:	d002      	beq.n	800576a <BSP_SPI1_Init+0x36>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8005764:	2308      	movs	r3, #8
 8005766:	425b      	negs	r3, r3
 8005768:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 800576a:	687b      	ldr	r3, [r7, #4]
}
 800576c:	0018      	movs	r0, r3
 800576e:	46bd      	mov	sp, r7
 8005770:	b002      	add	sp, #8
 8005772:	bd80      	pop	{r7, pc}
 8005774:	200014dc 	.word	0x200014dc
 8005778:	40013000 	.word	0x40013000

0800577c <BSP_SPI1_SendRecv>:
  * @param  pData: Data
  * @param  len: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t len)
{
 800577c:	b590      	push	{r4, r7, lr}
 800577e:	b089      	sub	sp, #36	; 0x24
 8005780:	af02      	add	r7, sp, #8
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	1dbb      	adds	r3, r7, #6
 8005788:	801a      	strh	r2, [r3, #0]
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 800578a:	2306      	movs	r3, #6
 800578c:	425b      	negs	r3, r3
 800578e:	617b      	str	r3, [r7, #20]

  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8005790:	1dbb      	adds	r3, r7, #6
 8005792:	881c      	ldrh	r4, [r3, #0]
 8005794:	68ba      	ldr	r2, [r7, #8]
 8005796:	68f9      	ldr	r1, [r7, #12]
 8005798:	4808      	ldr	r0, [pc, #32]	; (80057bc <BSP_SPI1_SendRecv+0x40>)
 800579a:	23fa      	movs	r3, #250	; 0xfa
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	9300      	str	r3, [sp, #0]
 80057a0:	0023      	movs	r3, r4
 80057a2:	f004 ffd9 	bl	800a758 <HAL_SPI_TransmitReceive>
 80057a6:	1e03      	subs	r3, r0, #0
 80057a8:	d102      	bne.n	80057b0 <BSP_SPI1_SendRecv+0x34>
  {
    ret = len;
 80057aa:	1dbb      	adds	r3, r7, #6
 80057ac:	881b      	ldrh	r3, [r3, #0]
 80057ae:	617b      	str	r3, [r7, #20]
  }
  return ret;
 80057b0:	697b      	ldr	r3, [r7, #20]
}
 80057b2:	0018      	movs	r0, r3
 80057b4:	46bd      	mov	sp, r7
 80057b6:	b007      	add	sp, #28
 80057b8:	bd90      	pop	{r4, r7, pc}
 80057ba:	46c0      	nop			; (mov r8, r8)
 80057bc:	200014dc 	.word	0x200014dc

080057c0 <MX_SPI1_Init>:
}

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef *hspi)
{
 80057c0:	b590      	push	{r4, r7, lr}
 80057c2:	b085      	sub	sp, #20
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80057c8:	240f      	movs	r4, #15
 80057ca:	193b      	adds	r3, r7, r4
 80057cc:	2200      	movs	r2, #0
 80057ce:	701a      	strb	r2, [r3, #0]
  hspi->Instance = SPI1;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a1e      	ldr	r2, [pc, #120]	; (800584c <MX_SPI1_Init+0x8c>)
 80057d4:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2282      	movs	r2, #130	; 0x82
 80057da:	0052      	lsls	r2, r2, #1
 80057dc:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2280      	movs	r2, #128	; 0x80
 80057fa:	0092      	lsls	r2, r2, #2
 80057fc:	619a      	str	r2, [r3, #24]
  /* SPI1 is on APB2 for L0x3 -> HAL_RCC_GetPCLK2Freq */
  hspi->Init.BaudRatePrescaler = SPI_GetPrescaler(HAL_RCC_GetPCLK2Freq(), RADIO_SPI_BAUDRATE);
 80057fe:	f003 ffb3 	bl	8009768 <HAL_RCC_GetPCLK2Freq>
 8005802:	0003      	movs	r3, r0
 8005804:	4a12      	ldr	r2, [pc, #72]	; (8005850 <MX_SPI1_Init+0x90>)
 8005806:	0011      	movs	r1, r2
 8005808:	0018      	movs	r0, r3
 800580a:	f000 f867 	bl	80058dc <SPI_GetPrescaler>
 800580e:	0002      	movs	r2, r0
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2207      	movs	r2, #7
 800582a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	0018      	movs	r0, r3
 8005830:	f004 fef6 	bl	800a620 <HAL_SPI_Init>
 8005834:	1e03      	subs	r3, r0, #0
 8005836:	d002      	beq.n	800583e <MX_SPI1_Init+0x7e>
  {
    ret = HAL_ERROR;
 8005838:	193b      	adds	r3, r7, r4
 800583a:	2201      	movs	r2, #1
 800583c:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800583e:	230f      	movs	r3, #15
 8005840:	18fb      	adds	r3, r7, r3
 8005842:	781b      	ldrb	r3, [r3, #0]
}
 8005844:	0018      	movs	r0, r3
 8005846:	46bd      	mov	sp, r7
 8005848:	b005      	add	sp, #20
 800584a:	bd90      	pop	{r4, r7, pc}
 800584c:	40013000 	.word	0x40013000
 8005850:	00989680 	.word	0x00989680

08005854 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef *spiHandle)
{
 8005854:	b590      	push	{r4, r7, lr}
 8005856:	b089      	sub	sp, #36	; 0x24
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /* Enable Peripheral clock */
  __HAL_RCC_SPI1_CLK_ENABLE();
 800585c:	4b1d      	ldr	r3, [pc, #116]	; (80058d4 <SPI1_MspInit+0x80>)
 800585e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005860:	4b1c      	ldr	r3, [pc, #112]	; (80058d4 <SPI1_MspInit+0x80>)
 8005862:	2180      	movs	r1, #128	; 0x80
 8005864:	0149      	lsls	r1, r1, #5
 8005866:	430a      	orrs	r2, r1
 8005868:	635a      	str	r2, [r3, #52]	; 0x34
  /**SPI1 GPIO Configuration
  PA5     ------> SPI1_SCK
  PA6     ------> SPI1_MISO
  PA7     ------> SPI1_MOSI
    */
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800586a:	240c      	movs	r4, #12
 800586c:	193b      	adds	r3, r7, r4
 800586e:	2202      	movs	r2, #2
 8005870:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005872:	193b      	adds	r3, r7, r4
 8005874:	2200      	movs	r2, #0
 8005876:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005878:	193b      	adds	r3, r7, r4
 800587a:	2203      	movs	r2, #3
 800587c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 800587e:	193b      	adds	r3, r7, r4
 8005880:	2200      	movs	r2, #0
 8005882:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8005884:	193b      	adds	r3, r7, r4
 8005886:	2280      	movs	r2, #128	; 0x80
 8005888:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800588a:	193a      	adds	r2, r7, r4
 800588c:	23a0      	movs	r3, #160	; 0xa0
 800588e:	05db      	lsls	r3, r3, #23
 8005890:	0011      	movs	r1, r2
 8005892:	0018      	movs	r0, r3
 8005894:	f002 f810 	bl	80078b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8005898:	193b      	adds	r3, r7, r4
 800589a:	2200      	movs	r2, #0
 800589c:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 800589e:	193b      	adds	r3, r7, r4
 80058a0:	2240      	movs	r2, #64	; 0x40
 80058a2:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 80058a4:	193a      	adds	r2, r7, r4
 80058a6:	23a0      	movs	r3, #160	; 0xa0
 80058a8:	05db      	lsls	r3, r3, #23
 80058aa:	0011      	movs	r1, r2
 80058ac:	0018      	movs	r0, r3
 80058ae:	f002 f803 	bl	80078b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 80058b2:	193b      	adds	r3, r7, r4
 80058b4:	2200      	movs	r2, #0
 80058b6:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 80058b8:	193b      	adds	r3, r7, r4
 80058ba:	2208      	movs	r2, #8
 80058bc:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 80058be:	193b      	adds	r3, r7, r4
 80058c0:	4a05      	ldr	r2, [pc, #20]	; (80058d8 <SPI1_MspInit+0x84>)
 80058c2:	0019      	movs	r1, r3
 80058c4:	0010      	movs	r0, r2
 80058c6:	f001 fff7 	bl	80078b8 <HAL_GPIO_Init>


  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 80058ca:	46c0      	nop			; (mov r8, r8)
 80058cc:	46bd      	mov	sp, r7
 80058ce:	b009      	add	sp, #36	; 0x24
 80058d0:	bd90      	pop	{r4, r7, pc}
 80058d2:	46c0      	nop			; (mov r8, r8)
 80058d4:	40021000 	.word	0x40021000
 80058d8:	50000400 	.word	0x50000400

080058dc <SPI_GetPrescaler>:

  /* USER CODE END SPI1_MspDeInit 1 */
}

static uint32_t SPI_GetPrescaler(uint32_t clock_src_hz, uint32_t baudrate_mbps)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b086      	sub	sp, #24
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
  uint32_t divisor = 0;
 80058e6:	2300      	movs	r3, #0
 80058e8:	617b      	str	r3, [r7, #20]
  uint32_t spi_clk = clock_src_hz;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	613b      	str	r3, [r7, #16]
  uint32_t presc = 0;
 80058ee:	2300      	movs	r3, #0
 80058f0:	60fb      	str	r3, [r7, #12]
    SPI_BAUDRATEPRESCALER_64,
    SPI_BAUDRATEPRESCALER_128,
    SPI_BAUDRATEPRESCALER_256,
  };

  while (spi_clk > baudrate_mbps)
 80058f2:	e00d      	b.n	8005910 <SPI_GetPrescaler+0x34>
  {
    presc = baudrate[divisor];
 80058f4:	4b0c      	ldr	r3, [pc, #48]	; (8005928 <SPI_GetPrescaler+0x4c>)
 80058f6:	697a      	ldr	r2, [r7, #20]
 80058f8:	0092      	lsls	r2, r2, #2
 80058fa:	58d3      	ldr	r3, [r2, r3]
 80058fc:	60fb      	str	r3, [r7, #12]
    if (++divisor > 7)
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	3301      	adds	r3, #1
 8005902:	617b      	str	r3, [r7, #20]
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	2b07      	cmp	r3, #7
 8005908:	d807      	bhi.n	800591a <SPI_GetPrescaler+0x3e>
    {
      break;
    }

    spi_clk = (spi_clk >> 1);
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	085b      	lsrs	r3, r3, #1
 800590e:	613b      	str	r3, [r7, #16]
  while (spi_clk > baudrate_mbps)
 8005910:	693a      	ldr	r2, [r7, #16]
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	429a      	cmp	r2, r3
 8005916:	d8ed      	bhi.n	80058f4 <SPI_GetPrescaler+0x18>
 8005918:	e000      	b.n	800591c <SPI_GetPrescaler+0x40>
      break;
 800591a:	46c0      	nop			; (mov r8, r8)
  }

  return presc;
 800591c:	68fb      	ldr	r3, [r7, #12]
}
 800591e:	0018      	movs	r0, r3
 8005920:	46bd      	mov	sp, r7
 8005922:	b006      	add	sp, #24
 8005924:	bd80      	pop	{r7, pc}
 8005926:	46c0      	nop			; (mov r8, r8)
 8005928:	0801eea4 	.word	0x0801eea4

0800592c <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8005932:	2300      	movs	r3, #0
 8005934:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8005936:	4b19      	ldr	r3, [pc, #100]	; (800599c <BSP_I2C1_Init+0x70>)
 8005938:	4a19      	ldr	r2, [pc, #100]	; (80059a0 <BSP_I2C1_Init+0x74>)
 800593a:	601a      	str	r2, [r3, #0]

  if (I2C1InitCounter++ == 0)
 800593c:	4b19      	ldr	r3, [pc, #100]	; (80059a4 <BSP_I2C1_Init+0x78>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	1c59      	adds	r1, r3, #1
 8005942:	4a18      	ldr	r2, [pc, #96]	; (80059a4 <BSP_I2C1_Init+0x78>)
 8005944:	6011      	str	r1, [r2, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d123      	bne.n	8005992 <BSP_I2C1_Init+0x66>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 800594a:	4b14      	ldr	r3, [pc, #80]	; (800599c <BSP_I2C1_Init+0x70>)
 800594c:	0018      	movs	r0, r3
 800594e:	f002 fd69 	bl	8008424 <HAL_I2C_GetState>
 8005952:	1e03      	subs	r3, r0, #0
 8005954:	d11d      	bne.n	8005992 <BSP_I2C1_Init+0x66>
    {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8005956:	4b11      	ldr	r3, [pc, #68]	; (800599c <BSP_I2C1_Init+0x70>)
 8005958:	0018      	movs	r0, r3
 800595a:	f000 f873 	bl	8005a44 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
#endif
      if (ret == BSP_ERROR_NONE)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d116      	bne.n	8005992 <BSP_I2C1_Init+0x66>
      {
        /* Init the I2C */
        if (MX_I2C1_Init(&hi2c1) != HAL_OK)
 8005964:	4b0d      	ldr	r3, [pc, #52]	; (800599c <BSP_I2C1_Init+0x70>)
 8005966:	0018      	movs	r0, r3
 8005968:	f000 f81e 	bl	80059a8 <MX_I2C1_Init>
 800596c:	1e03      	subs	r3, r0, #0
 800596e:	d003      	beq.n	8005978 <BSP_I2C1_Init+0x4c>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8005970:	2308      	movs	r3, #8
 8005972:	425b      	negs	r3, r3
 8005974:	607b      	str	r3, [r7, #4]
 8005976:	e00c      	b.n	8005992 <BSP_I2C1_Init+0x66>
        }
        else if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005978:	4b08      	ldr	r3, [pc, #32]	; (800599c <BSP_I2C1_Init+0x70>)
 800597a:	2100      	movs	r1, #0
 800597c:	0018      	movs	r0, r3
 800597e:	f002 ff9b 	bl	80088b8 <HAL_I2CEx_ConfigAnalogFilter>
 8005982:	1e03      	subs	r3, r0, #0
 8005984:	d003      	beq.n	800598e <BSP_I2C1_Init+0x62>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8005986:	2308      	movs	r3, #8
 8005988:	425b      	negs	r3, r3
 800598a:	607b      	str	r3, [r7, #4]
 800598c:	e001      	b.n	8005992 <BSP_I2C1_Init+0x66>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 800598e:	2300      	movs	r3, #0
 8005990:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8005992:	687b      	ldr	r3, [r7, #4]
}
 8005994:	0018      	movs	r0, r3
 8005996:	46bd      	mov	sp, r7
 8005998:	b002      	add	sp, #8
 800599a:	bd80      	pop	{r7, pc}
 800599c:	200013a4 	.word	0x200013a4
 80059a0:	40005400 	.word	0x40005400
 80059a4:	20000414 	.word	0x20000414

080059a8 <MX_I2C1_Init>:
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef *hi2c)
{
 80059a8:	b590      	push	{r4, r7, lr}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80059b0:	240f      	movs	r4, #15
 80059b2:	193b      	adds	r3, r7, r4
 80059b4:	2200      	movs	r2, #0
 80059b6:	701a      	strb	r2, [r3, #0]
  hi2c->Instance = I2C1;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a20      	ldr	r2, [pc, #128]	; (8005a3c <MX_I2C1_Init+0x94>)
 80059bc:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00707CBB;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a1f      	ldr	r2, [pc, #124]	; (8005a40 <MX_I2C1_Init+0x98>)
 80059c2:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2201      	movs	r2, #1
 80059ce:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	0018      	movs	r0, r3
 80059f2:	f002 fa17 	bl	8007e24 <HAL_I2C_Init>
 80059f6:	1e03      	subs	r3, r0, #0
 80059f8:	d002      	beq.n	8005a00 <MX_I2C1_Init+0x58>
  {
    ret = HAL_ERROR;
 80059fa:	193b      	adds	r3, r7, r4
 80059fc:	2201      	movs	r2, #1
 80059fe:	701a      	strb	r2, [r3, #0]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2100      	movs	r1, #0
 8005a04:	0018      	movs	r0, r3
 8005a06:	f002 ff57 	bl	80088b8 <HAL_I2CEx_ConfigAnalogFilter>
 8005a0a:	1e03      	subs	r3, r0, #0
 8005a0c:	d003      	beq.n	8005a16 <MX_I2C1_Init+0x6e>
  {
    ret = HAL_ERROR;
 8005a0e:	230f      	movs	r3, #15
 8005a10:	18fb      	adds	r3, r7, r3
 8005a12:	2201      	movs	r2, #1
 8005a14:	701a      	strb	r2, [r3, #0]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2100      	movs	r1, #0
 8005a1a:	0018      	movs	r0, r3
 8005a1c:	f002 ff98 	bl	8008950 <HAL_I2CEx_ConfigDigitalFilter>
 8005a20:	1e03      	subs	r3, r0, #0
 8005a22:	d003      	beq.n	8005a2c <MX_I2C1_Init+0x84>
  {
    ret = HAL_ERROR;
 8005a24:	230f      	movs	r3, #15
 8005a26:	18fb      	adds	r3, r7, r3
 8005a28:	2201      	movs	r2, #1
 8005a2a:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8005a2c:	230f      	movs	r3, #15
 8005a2e:	18fb      	adds	r3, r7, r3
 8005a30:	781b      	ldrb	r3, [r3, #0]
}
 8005a32:	0018      	movs	r0, r3
 8005a34:	46bd      	mov	sp, r7
 8005a36:	b005      	add	sp, #20
 8005a38:	bd90      	pop	{r4, r7, pc}
 8005a3a:	46c0      	nop			; (mov r8, r8)
 8005a3c:	40005400 	.word	0x40005400
 8005a40:	00707cbb 	.word	0x00707cbb

08005a44 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef *i2cHandle)
{
 8005a44:	b590      	push	{r4, r7, lr}
 8005a46:	b089      	sub	sp, #36	; 0x24
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a4c:	4b22      	ldr	r3, [pc, #136]	; (8005ad8 <I2C1_MspInit+0x94>)
 8005a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a50:	4b21      	ldr	r3, [pc, #132]	; (8005ad8 <I2C1_MspInit+0x94>)
 8005a52:	2102      	movs	r1, #2
 8005a54:	430a      	orrs	r2, r1
 8005a56:	62da      	str	r2, [r3, #44]	; 0x2c
 8005a58:	4b1f      	ldr	r3, [pc, #124]	; (8005ad8 <I2C1_MspInit+0x94>)
 8005a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a5c:	2202      	movs	r2, #2
 8005a5e:	4013      	ands	r3, r2
 8005a60:	60bb      	str	r3, [r7, #8]
 8005a62:	68bb      	ldr	r3, [r7, #8]
  /**I2C1 GPIO Configuration
  PB8     ------> I2C1_SCL
  PB9     ------> I2C1_SDA
    */
  GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8005a64:	210c      	movs	r1, #12
 8005a66:	187b      	adds	r3, r7, r1
 8005a68:	2280      	movs	r2, #128	; 0x80
 8005a6a:	0052      	lsls	r2, r2, #1
 8005a6c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005a6e:	000c      	movs	r4, r1
 8005a70:	193b      	adds	r3, r7, r4
 8005a72:	2212      	movs	r2, #18
 8005a74:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005a76:	193b      	adds	r3, r7, r4
 8005a78:	2201      	movs	r2, #1
 8005a7a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a7c:	193b      	adds	r3, r7, r4
 8005a7e:	2203      	movs	r2, #3
 8005a80:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8005a82:	193b      	adds	r3, r7, r4
 8005a84:	2204      	movs	r2, #4
 8005a86:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8005a88:	193b      	adds	r3, r7, r4
 8005a8a:	4a14      	ldr	r2, [pc, #80]	; (8005adc <I2C1_MspInit+0x98>)
 8005a8c:	0019      	movs	r1, r3
 8005a8e:	0010      	movs	r0, r2
 8005a90:	f001 ff12 	bl	80078b8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8005a94:	0021      	movs	r1, r4
 8005a96:	187b      	adds	r3, r7, r1
 8005a98:	2280      	movs	r2, #128	; 0x80
 8005a9a:	0092      	lsls	r2, r2, #2
 8005a9c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005a9e:	187b      	adds	r3, r7, r1
 8005aa0:	2212      	movs	r2, #18
 8005aa2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005aa4:	187b      	adds	r3, r7, r1
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005aaa:	187b      	adds	r3, r7, r1
 8005aac:	2203      	movs	r2, #3
 8005aae:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8005ab0:	187b      	adds	r3, r7, r1
 8005ab2:	2204      	movs	r2, #4
 8005ab4:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8005ab6:	187b      	adds	r3, r7, r1
 8005ab8:	4a08      	ldr	r2, [pc, #32]	; (8005adc <I2C1_MspInit+0x98>)
 8005aba:	0019      	movs	r1, r3
 8005abc:	0010      	movs	r0, r2
 8005abe:	f001 fefb 	bl	80078b8 <HAL_GPIO_Init>

  /* Peripheral clock enable */
  __HAL_RCC_I2C1_CLK_ENABLE();
 8005ac2:	4b05      	ldr	r3, [pc, #20]	; (8005ad8 <I2C1_MspInit+0x94>)
 8005ac4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ac6:	4b04      	ldr	r3, [pc, #16]	; (8005ad8 <I2C1_MspInit+0x94>)
 8005ac8:	2180      	movs	r1, #128	; 0x80
 8005aca:	0389      	lsls	r1, r1, #14
 8005acc:	430a      	orrs	r2, r1
 8005ace:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8005ad0:	46c0      	nop			; (mov r8, r8)
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	b009      	add	sp, #36	; 0x24
 8005ad6:	bd90      	pop	{r4, r7, pc}
 8005ad8:	40021000 	.word	0x40021000
 8005adc:	50000400 	.word	0x50000400

08005ae0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ae0:	b590      	push	{r4, r7, lr}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	0002      	movs	r2, r0
 8005ae8:	6039      	str	r1, [r7, #0]
 8005aea:	1dfb      	adds	r3, r7, #7
 8005aec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005aee:	1dfb      	adds	r3, r7, #7
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	2b7f      	cmp	r3, #127	; 0x7f
 8005af4:	d828      	bhi.n	8005b48 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005af6:	4a2f      	ldr	r2, [pc, #188]	; (8005bb4 <__NVIC_SetPriority+0xd4>)
 8005af8:	1dfb      	adds	r3, r7, #7
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	b25b      	sxtb	r3, r3
 8005afe:	089b      	lsrs	r3, r3, #2
 8005b00:	33c0      	adds	r3, #192	; 0xc0
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	589b      	ldr	r3, [r3, r2]
 8005b06:	1dfa      	adds	r2, r7, #7
 8005b08:	7812      	ldrb	r2, [r2, #0]
 8005b0a:	0011      	movs	r1, r2
 8005b0c:	2203      	movs	r2, #3
 8005b0e:	400a      	ands	r2, r1
 8005b10:	00d2      	lsls	r2, r2, #3
 8005b12:	21ff      	movs	r1, #255	; 0xff
 8005b14:	4091      	lsls	r1, r2
 8005b16:	000a      	movs	r2, r1
 8005b18:	43d2      	mvns	r2, r2
 8005b1a:	401a      	ands	r2, r3
 8005b1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	019b      	lsls	r3, r3, #6
 8005b22:	22ff      	movs	r2, #255	; 0xff
 8005b24:	401a      	ands	r2, r3
 8005b26:	1dfb      	adds	r3, r7, #7
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	0018      	movs	r0, r3
 8005b2c:	2303      	movs	r3, #3
 8005b2e:	4003      	ands	r3, r0
 8005b30:	00db      	lsls	r3, r3, #3
 8005b32:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005b34:	481f      	ldr	r0, [pc, #124]	; (8005bb4 <__NVIC_SetPriority+0xd4>)
 8005b36:	1dfb      	adds	r3, r7, #7
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	b25b      	sxtb	r3, r3
 8005b3c:	089b      	lsrs	r3, r3, #2
 8005b3e:	430a      	orrs	r2, r1
 8005b40:	33c0      	adds	r3, #192	; 0xc0
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8005b46:	e031      	b.n	8005bac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005b48:	4a1b      	ldr	r2, [pc, #108]	; (8005bb8 <__NVIC_SetPriority+0xd8>)
 8005b4a:	1dfb      	adds	r3, r7, #7
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	0019      	movs	r1, r3
 8005b50:	230f      	movs	r3, #15
 8005b52:	400b      	ands	r3, r1
 8005b54:	3b08      	subs	r3, #8
 8005b56:	089b      	lsrs	r3, r3, #2
 8005b58:	3306      	adds	r3, #6
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	18d3      	adds	r3, r2, r3
 8005b5e:	3304      	adds	r3, #4
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	1dfa      	adds	r2, r7, #7
 8005b64:	7812      	ldrb	r2, [r2, #0]
 8005b66:	0011      	movs	r1, r2
 8005b68:	2203      	movs	r2, #3
 8005b6a:	400a      	ands	r2, r1
 8005b6c:	00d2      	lsls	r2, r2, #3
 8005b6e:	21ff      	movs	r1, #255	; 0xff
 8005b70:	4091      	lsls	r1, r2
 8005b72:	000a      	movs	r2, r1
 8005b74:	43d2      	mvns	r2, r2
 8005b76:	401a      	ands	r2, r3
 8005b78:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	019b      	lsls	r3, r3, #6
 8005b7e:	22ff      	movs	r2, #255	; 0xff
 8005b80:	401a      	ands	r2, r3
 8005b82:	1dfb      	adds	r3, r7, #7
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	0018      	movs	r0, r3
 8005b88:	2303      	movs	r3, #3
 8005b8a:	4003      	ands	r3, r0
 8005b8c:	00db      	lsls	r3, r3, #3
 8005b8e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005b90:	4809      	ldr	r0, [pc, #36]	; (8005bb8 <__NVIC_SetPriority+0xd8>)
 8005b92:	1dfb      	adds	r3, r7, #7
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	001c      	movs	r4, r3
 8005b98:	230f      	movs	r3, #15
 8005b9a:	4023      	ands	r3, r4
 8005b9c:	3b08      	subs	r3, #8
 8005b9e:	089b      	lsrs	r3, r3, #2
 8005ba0:	430a      	orrs	r2, r1
 8005ba2:	3306      	adds	r3, #6
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	18c3      	adds	r3, r0, r3
 8005ba8:	3304      	adds	r3, #4
 8005baa:	601a      	str	r2, [r3, #0]
}
 8005bac:	46c0      	nop			; (mov r8, r8)
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	b003      	add	sp, #12
 8005bb2:	bd90      	pop	{r4, r7, pc}
 8005bb4:	e000e100 	.word	0xe000e100
 8005bb8:	e000ed00 	.word	0xe000ed00

08005bbc <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b08c      	sub	sp, #48	; 0x30
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	0002      	movs	r2, r0
 8005bc4:	1dfb      	adds	r3, r7, #7
 8005bc6:	701a      	strb	r2, [r3, #0]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8005bc8:	1dfb      	adds	r3, r7, #7
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	2b03      	cmp	r3, #3
 8005bce:	d02f      	beq.n	8005c30 <BSP_LED_Init+0x74>
 8005bd0:	dc3a      	bgt.n	8005c48 <BSP_LED_Init+0x8c>
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	d01f      	beq.n	8005c16 <BSP_LED_Init+0x5a>
 8005bd6:	dc37      	bgt.n	8005c48 <BSP_LED_Init+0x8c>
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d002      	beq.n	8005be2 <BSP_LED_Init+0x26>
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d00d      	beq.n	8005bfc <BSP_LED_Init+0x40>
 8005be0:	e032      	b.n	8005c48 <BSP_LED_Init+0x8c>
 8005be2:	4b2a      	ldr	r3, [pc, #168]	; (8005c8c <BSP_LED_Init+0xd0>)
 8005be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005be6:	4b29      	ldr	r3, [pc, #164]	; (8005c8c <BSP_LED_Init+0xd0>)
 8005be8:	2102      	movs	r1, #2
 8005bea:	430a      	orrs	r2, r1
 8005bec:	62da      	str	r2, [r3, #44]	; 0x2c
 8005bee:	4b27      	ldr	r3, [pc, #156]	; (8005c8c <BSP_LED_Init+0xd0>)
 8005bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf2:	2202      	movs	r2, #2
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	61bb      	str	r3, [r7, #24]
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	e025      	b.n	8005c48 <BSP_LED_Init+0x8c>
 8005bfc:	4b23      	ldr	r3, [pc, #140]	; (8005c8c <BSP_LED_Init+0xd0>)
 8005bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c00:	4b22      	ldr	r3, [pc, #136]	; (8005c8c <BSP_LED_Init+0xd0>)
 8005c02:	2101      	movs	r1, #1
 8005c04:	430a      	orrs	r2, r1
 8005c06:	62da      	str	r2, [r3, #44]	; 0x2c
 8005c08:	4b20      	ldr	r3, [pc, #128]	; (8005c8c <BSP_LED_Init+0xd0>)
 8005c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	4013      	ands	r3, r2
 8005c10:	617b      	str	r3, [r7, #20]
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	e018      	b.n	8005c48 <BSP_LED_Init+0x8c>
 8005c16:	4b1d      	ldr	r3, [pc, #116]	; (8005c8c <BSP_LED_Init+0xd0>)
 8005c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c1a:	4b1c      	ldr	r3, [pc, #112]	; (8005c8c <BSP_LED_Init+0xd0>)
 8005c1c:	2102      	movs	r1, #2
 8005c1e:	430a      	orrs	r2, r1
 8005c20:	62da      	str	r2, [r3, #44]	; 0x2c
 8005c22:	4b1a      	ldr	r3, [pc, #104]	; (8005c8c <BSP_LED_Init+0xd0>)
 8005c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c26:	2202      	movs	r2, #2
 8005c28:	4013      	ands	r3, r2
 8005c2a:	613b      	str	r3, [r7, #16]
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	e00b      	b.n	8005c48 <BSP_LED_Init+0x8c>
 8005c30:	4b16      	ldr	r3, [pc, #88]	; (8005c8c <BSP_LED_Init+0xd0>)
 8005c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c34:	4b15      	ldr	r3, [pc, #84]	; (8005c8c <BSP_LED_Init+0xd0>)
 8005c36:	2102      	movs	r1, #2
 8005c38:	430a      	orrs	r2, r1
 8005c3a:	62da      	str	r2, [r3, #44]	; 0x2c
 8005c3c:	4b13      	ldr	r3, [pc, #76]	; (8005c8c <BSP_LED_Init+0xd0>)
 8005c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c40:	2202      	movs	r2, #2
 8005c42:	4013      	ands	r3, r2
 8005c44:	60fb      	str	r3, [r7, #12]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	46c0      	nop			; (mov r8, r8)

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8005c4a:	1dfb      	adds	r3, r7, #7
 8005c4c:	781a      	ldrb	r2, [r3, #0]
 8005c4e:	4b10      	ldr	r3, [pc, #64]	; (8005c90 <BSP_LED_Init+0xd4>)
 8005c50:	0052      	lsls	r2, r2, #1
 8005c52:	5ad3      	ldrh	r3, [r2, r3]
 8005c54:	001a      	movs	r2, r3
 8005c56:	211c      	movs	r1, #28
 8005c58:	187b      	adds	r3, r7, r1
 8005c5a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c5c:	187b      	adds	r3, r7, r1
 8005c5e:	2201      	movs	r2, #1
 8005c60:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c62:	187b      	adds	r3, r7, r1
 8005c64:	2200      	movs	r2, #0
 8005c66:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c68:	187b      	adds	r3, r7, r1
 8005c6a:	2203      	movs	r2, #3
 8005c6c:	60da      	str	r2, [r3, #12]

  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8005c6e:	1dfb      	adds	r3, r7, #7
 8005c70:	781a      	ldrb	r2, [r3, #0]
 8005c72:	4b08      	ldr	r3, [pc, #32]	; (8005c94 <BSP_LED_Init+0xd8>)
 8005c74:	0092      	lsls	r2, r2, #2
 8005c76:	58d3      	ldr	r3, [r2, r3]
 8005c78:	187a      	adds	r2, r7, r1
 8005c7a:	0011      	movs	r1, r2
 8005c7c:	0018      	movs	r0, r3
 8005c7e:	f001 fe1b 	bl	80078b8 <HAL_GPIO_Init>
}
 8005c82:	46c0      	nop			; (mov r8, r8)
 8005c84:	46bd      	mov	sp, r7
 8005c86:	b00c      	add	sp, #48	; 0x30
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	46c0      	nop			; (mov r8, r8)
 8005c8c:	40021000 	.word	0x40021000
 8005c90:	0801eec4 	.word	0x0801eec4
 8005c94:	2000004c 	.word	0x2000004c

08005c98 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	0002      	movs	r2, r0
 8005ca0:	1dfb      	adds	r3, r7, #7
 8005ca2:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8005ca4:	1dfb      	adds	r3, r7, #7
 8005ca6:	781a      	ldrb	r2, [r3, #0]
 8005ca8:	4b07      	ldr	r3, [pc, #28]	; (8005cc8 <BSP_LED_On+0x30>)
 8005caa:	0092      	lsls	r2, r2, #2
 8005cac:	58d0      	ldr	r0, [r2, r3]
 8005cae:	1dfb      	adds	r3, r7, #7
 8005cb0:	781a      	ldrb	r2, [r3, #0]
 8005cb2:	4b06      	ldr	r3, [pc, #24]	; (8005ccc <BSP_LED_On+0x34>)
 8005cb4:	0052      	lsls	r2, r2, #1
 8005cb6:	5ad3      	ldrh	r3, [r2, r3]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	0019      	movs	r1, r3
 8005cbc:	f002 f879 	bl	8007db2 <HAL_GPIO_WritePin>
}
 8005cc0:	46c0      	nop			; (mov r8, r8)
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	b002      	add	sp, #8
 8005cc6:	bd80      	pop	{r7, pc}
 8005cc8:	2000004c 	.word	0x2000004c
 8005ccc:	0801eec4 	.word	0x0801eec4

08005cd0 <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	0002      	movs	r2, r0
 8005cd8:	1dfb      	adds	r3, r7, #7
 8005cda:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8005cdc:	1dfb      	adds	r3, r7, #7
 8005cde:	781a      	ldrb	r2, [r3, #0]
 8005ce0:	4b07      	ldr	r3, [pc, #28]	; (8005d00 <BSP_LED_Off+0x30>)
 8005ce2:	0092      	lsls	r2, r2, #2
 8005ce4:	58d0      	ldr	r0, [r2, r3]
 8005ce6:	1dfb      	adds	r3, r7, #7
 8005ce8:	781a      	ldrb	r2, [r3, #0]
 8005cea:	4b06      	ldr	r3, [pc, #24]	; (8005d04 <BSP_LED_Off+0x34>)
 8005cec:	0052      	lsls	r2, r2, #1
 8005cee:	5ad3      	ldrh	r3, [r2, r3]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	0019      	movs	r1, r3
 8005cf4:	f002 f85d 	bl	8007db2 <HAL_GPIO_WritePin>
}
 8005cf8:	46c0      	nop			; (mov r8, r8)
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	b002      	add	sp, #8
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	2000004c 	.word	0x2000004c
 8005d04:	0801eec4 	.word	0x0801eec4

08005d08 <BSP_LED_Toggle>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b082      	sub	sp, #8
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	0002      	movs	r2, r0
 8005d10:	1dfb      	adds	r3, r7, #7
 8005d12:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8005d14:	1dfb      	adds	r3, r7, #7
 8005d16:	781a      	ldrb	r2, [r3, #0]
 8005d18:	4b07      	ldr	r3, [pc, #28]	; (8005d38 <BSP_LED_Toggle+0x30>)
 8005d1a:	0092      	lsls	r2, r2, #2
 8005d1c:	58d0      	ldr	r0, [r2, r3]
 8005d1e:	1dfb      	adds	r3, r7, #7
 8005d20:	781a      	ldrb	r2, [r3, #0]
 8005d22:	4b06      	ldr	r3, [pc, #24]	; (8005d3c <BSP_LED_Toggle+0x34>)
 8005d24:	0052      	lsls	r2, r2, #1
 8005d26:	5ad3      	ldrh	r3, [r2, r3]
 8005d28:	0019      	movs	r1, r3
 8005d2a:	f002 f85f 	bl	8007dec <HAL_GPIO_TogglePin>
}
 8005d2e:	46c0      	nop			; (mov r8, r8)
 8005d30:	46bd      	mov	sp, r7
 8005d32:	b002      	add	sp, #8
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	46c0      	nop			; (mov r8, r8)
 8005d38:	2000004c 	.word	0x2000004c
 8005d3c:	0801eec4 	.word	0x0801eec4

08005d40 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b088      	sub	sp, #32
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	0002      	movs	r2, r0
 8005d48:	1dfb      	adds	r3, r7, #7
 8005d4a:	701a      	strb	r2, [r3, #0]
 8005d4c:	1dbb      	adds	r3, r7, #6
 8005d4e:	1c0a      	adds	r2, r1, #0
 8005d50:	701a      	strb	r2, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8005d52:	4b2b      	ldr	r3, [pc, #172]	; (8005e00 <BSP_PB_Init+0xc0>)
 8005d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d56:	4b2a      	ldr	r3, [pc, #168]	; (8005e00 <BSP_PB_Init+0xc0>)
 8005d58:	2102      	movs	r1, #2
 8005d5a:	430a      	orrs	r2, r1
 8005d5c:	62da      	str	r2, [r3, #44]	; 0x2c
 8005d5e:	4b28      	ldr	r3, [pc, #160]	; (8005e00 <BSP_PB_Init+0xc0>)
 8005d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d62:	2202      	movs	r2, #2
 8005d64:	4013      	ands	r3, r2
 8005d66:	60bb      	str	r3, [r7, #8]
 8005d68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d6a:	4b25      	ldr	r3, [pc, #148]	; (8005e00 <BSP_PB_Init+0xc0>)
 8005d6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d6e:	4b24      	ldr	r3, [pc, #144]	; (8005e00 <BSP_PB_Init+0xc0>)
 8005d70:	2101      	movs	r1, #1
 8005d72:	430a      	orrs	r2, r1
 8005d74:	635a      	str	r2, [r3, #52]	; 0x34

  if (ButtonMode == BUTTON_MODE_GPIO)
 8005d76:	1dbb      	adds	r3, r7, #6
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d117      	bne.n	8005dae <BSP_PB_Init+0x6e>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8005d7e:	2304      	movs	r3, #4
 8005d80:	001a      	movs	r2, r3
 8005d82:	210c      	movs	r1, #12
 8005d84:	187b      	adds	r3, r7, r1
 8005d86:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005d88:	187b      	adds	r3, r7, r1
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005d8e:	187b      	adds	r3, r7, r1
 8005d90:	2202      	movs	r2, #2
 8005d92:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d94:	187b      	adds	r3, r7, r1
 8005d96:	2203      	movs	r2, #3
 8005d98:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8005d9a:	1dfb      	adds	r3, r7, #7
 8005d9c:	781a      	ldrb	r2, [r3, #0]
 8005d9e:	4b19      	ldr	r3, [pc, #100]	; (8005e04 <BSP_PB_Init+0xc4>)
 8005da0:	0092      	lsls	r2, r2, #2
 8005da2:	58d3      	ldr	r3, [r2, r3]
 8005da4:	187a      	adds	r2, r7, r1
 8005da6:	0011      	movs	r1, r2
 8005da8:	0018      	movs	r0, r3
 8005daa:	f001 fd85 	bl	80078b8 <HAL_GPIO_Init>
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
 8005dae:	1dbb      	adds	r3, r7, #6
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d11f      	bne.n	8005df6 <BSP_PB_Init+0xb6>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8005db6:	2304      	movs	r3, #4
 8005db8:	001a      	movs	r2, r3
 8005dba:	210c      	movs	r1, #12
 8005dbc:	187b      	adds	r3, r7, r1
 8005dbe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dc0:	187b      	adds	r3, r7, r1
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005dc6:	187b      	adds	r3, r7, r1
 8005dc8:	4a0f      	ldr	r2, [pc, #60]	; (8005e08 <BSP_PB_Init+0xc8>)
 8005dca:	605a      	str	r2, [r3, #4]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8005dcc:	1dfb      	adds	r3, r7, #7
 8005dce:	781a      	ldrb	r2, [r3, #0]
 8005dd0:	4b0c      	ldr	r3, [pc, #48]	; (8005e04 <BSP_PB_Init+0xc4>)
 8005dd2:	0092      	lsls	r2, r2, #2
 8005dd4:	58d3      	ldr	r3, [r2, r3]
 8005dd6:	187a      	adds	r2, r7, r1
 8005dd8:	0011      	movs	r1, r2
 8005dda:	0018      	movs	r0, r3
 8005ddc:	f001 fd6c 	bl	80078b8 <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x03);
 8005de0:	2306      	movs	r3, #6
 8005de2:	b25b      	sxtb	r3, r3
 8005de4:	2103      	movs	r1, #3
 8005de6:	0018      	movs	r0, r3
 8005de8:	f7ff fe7a 	bl	8005ae0 <__NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8005dec:	2306      	movs	r3, #6
 8005dee:	b25b      	sxtb	r3, r3
 8005df0:	0018      	movs	r0, r3
 8005df2:	f001 fa4a 	bl	800728a <HAL_NVIC_EnableIRQ>
  }
}
 8005df6:	46c0      	nop			; (mov r8, r8)
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	b008      	add	sp, #32
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	46c0      	nop			; (mov r8, r8)
 8005e00:	40021000 	.word	0x40021000
 8005e04:	2000005c 	.word	0x2000005c
 8005e08:	10110000 	.word	0x10110000

08005e0c <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>:
static void CMWX1ZZABZ0XX_RADIO_SPI_IoInit(SPI_HandleTypeDef *spiHandle);
static void CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit(void);

/* Exported functions ---------------------------------------------------------*/
uint32_t CMWX1ZZABZ0XX_RADIO_GetWakeUpTime(void)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	af00      	add	r7, sp, #0
  return  BOARD_WAKEUP_TIME;
 8005e10:	2305      	movs	r3, #5
}
 8005e12:	0018      	movs	r0, r3
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <CMWX1ZZABZ0XX_RADIO_SetXO>:

void CMWX1ZZABZ0XX_RADIO_SetXO(uint8_t state)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	0002      	movs	r2, r0
 8005e20:	1dfb      	adds	r3, r7, #7
 8005e22:	701a      	strb	r2, [r3, #0]

  if (state == SET)
 8005e24:	1dfb      	adds	r3, r7, #7
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d10b      	bne.n	8005e44 <CMWX1ZZABZ0XX_RADIO_SetXO+0x2c>
  {
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_SET);
 8005e2c:	2380      	movs	r3, #128	; 0x80
 8005e2e:	0159      	lsls	r1, r3, #5
 8005e30:	23a0      	movs	r3, #160	; 0xa0
 8005e32:	05db      	lsls	r3, r3, #23
 8005e34:	2201      	movs	r2, #1
 8005e36:	0018      	movs	r0, r3
 8005e38:	f001 ffbb 	bl	8007db2 <HAL_GPIO_WritePin>

    HAL_Delay(BOARD_WAKEUP_TIME);   //start up time of TCXO
 8005e3c:	2005      	movs	r0, #5
 8005e3e:	f7ff f990 	bl	8005162 <HAL_Delay>
  }
  else
  {
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_RESET);
  }
}
 8005e42:	e007      	b.n	8005e54 <CMWX1ZZABZ0XX_RADIO_SetXO+0x3c>
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_RESET);
 8005e44:	2380      	movs	r3, #128	; 0x80
 8005e46:	0159      	lsls	r1, r3, #5
 8005e48:	23a0      	movs	r3, #160	; 0xa0
 8005e4a:	05db      	lsls	r3, r3, #23
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	0018      	movs	r0, r3
 8005e50:	f001 ffaf 	bl	8007db2 <HAL_GPIO_WritePin>
}
 8005e54:	46c0      	nop			; (mov r8, r8)
 8005e56:	46bd      	mov	sp, r7
 8005e58:	b002      	add	sp, #8
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <CMWX1ZZABZ0XX_RADIO_IoInit>:
void CMWX1ZZABZ0XX_RADIO_IoInit(void)
{
 8005e5c:	b590      	push	{r4, r7, lr}
 8005e5e:	b0a7      	sub	sp, #156	; 0x9c
 8005e60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct = {0};
 8005e62:	2480      	movs	r4, #128	; 0x80
 8005e64:	193b      	adds	r3, r7, r4
 8005e66:	0018      	movs	r0, r3
 8005e68:	2314      	movs	r3, #20
 8005e6a:	001a      	movs	r2, r3
 8005e6c:	2100      	movs	r1, #0
 8005e6e:	f018 f8c6 	bl	801dffe <memset>
  SPI_HandleTypeDef dummy_hspi;

  /* Enable DIO GPIO clock */
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8005e72:	4b78      	ldr	r3, [pc, #480]	; (8006054 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e76:	4b77      	ldr	r3, [pc, #476]	; (8006054 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005e78:	2102      	movs	r1, #2
 8005e7a:	430a      	orrs	r2, r1
 8005e7c:	62da      	str	r2, [r3, #44]	; 0x2c
 8005e7e:	4b75      	ldr	r3, [pc, #468]	; (8006054 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e82:	2202      	movs	r2, #2
 8005e84:	4013      	ands	r3, r2
 8005e86:	627b      	str	r3, [r7, #36]	; 0x24
 8005e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8005e8a:	4b72      	ldr	r3, [pc, #456]	; (8006054 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e8e:	4b71      	ldr	r3, [pc, #452]	; (8006054 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005e90:	2102      	movs	r1, #2
 8005e92:	430a      	orrs	r2, r1
 8005e94:	62da      	str	r2, [r3, #44]	; 0x2c
 8005e96:	4b6f      	ldr	r3, [pc, #444]	; (8006054 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e9a:	2202      	movs	r2, #2
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	623b      	str	r3, [r7, #32]
 8005ea0:	6a3b      	ldr	r3, [r7, #32]
  RADIO_DIO_2_GPIO_CLK_ENABLE();
 8005ea2:	4b6c      	ldr	r3, [pc, #432]	; (8006054 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ea6:	4b6b      	ldr	r3, [pc, #428]	; (8006054 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005ea8:	2102      	movs	r1, #2
 8005eaa:	430a      	orrs	r2, r1
 8005eac:	62da      	str	r2, [r3, #44]	; 0x2c
 8005eae:	4b69      	ldr	r3, [pc, #420]	; (8006054 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb2:	2202      	movs	r2, #2
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	61fb      	str	r3, [r7, #28]
 8005eb8:	69fb      	ldr	r3, [r7, #28]
  RADIO_DIO_3_GPIO_CLK_ENABLE();
 8005eba:	4b66      	ldr	r3, [pc, #408]	; (8006054 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ebe:	4b65      	ldr	r3, [pc, #404]	; (8006054 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005ec0:	2104      	movs	r1, #4
 8005ec2:	430a      	orrs	r2, r1
 8005ec4:	62da      	str	r2, [r3, #44]	; 0x2c
 8005ec6:	4b63      	ldr	r3, [pc, #396]	; (8006054 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eca:	2204      	movs	r2, #4
 8005ecc:	4013      	ands	r3, r2
 8005ece:	61bb      	str	r3, [r7, #24]
 8005ed0:	69bb      	ldr	r3, [r7, #24]
#if( RADIO_DIOn > 5 )
  RADIO_DIO_5_GPIO_CLK_ENABLE();
#endif

  /* DIO IO Init */
  initStruct.Pull = GPIO_PULLDOWN;
 8005ed2:	193b      	adds	r3, r7, r4
 8005ed4:	2202      	movs	r2, #2
 8005ed6:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8005ed8:	193b      	adds	r3, r7, r4
 8005eda:	2203      	movs	r2, #3
 8005edc:	60da      	str	r2, [r3, #12]

  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8005ede:	2300      	movs	r3, #0
 8005ee0:	2294      	movs	r2, #148	; 0x94
 8005ee2:	18ba      	adds	r2, r7, r2
 8005ee4:	6013      	str	r3, [r2, #0]
 8005ee6:	e020      	b.n	8005f2a <CMWX1ZZABZ0XX_RADIO_IoInit+0xce>
  {
    initStruct.Mode = RADIO_DIO_MODE[i];
 8005ee8:	4b5b      	ldr	r3, [pc, #364]	; (8006058 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1fc>)
 8005eea:	2194      	movs	r1, #148	; 0x94
 8005eec:	187a      	adds	r2, r7, r1
 8005eee:	6812      	ldr	r2, [r2, #0]
 8005ef0:	0092      	lsls	r2, r2, #2
 8005ef2:	58d2      	ldr	r2, [r2, r3]
 8005ef4:	2080      	movs	r0, #128	; 0x80
 8005ef6:	183b      	adds	r3, r7, r0
 8005ef8:	605a      	str	r2, [r3, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8005efa:	4b58      	ldr	r3, [pc, #352]	; (800605c <CMWX1ZZABZ0XX_RADIO_IoInit+0x200>)
 8005efc:	187a      	adds	r2, r7, r1
 8005efe:	6812      	ldr	r2, [r2, #0]
 8005f00:	0052      	lsls	r2, r2, #1
 8005f02:	5ad3      	ldrh	r3, [r2, r3]
 8005f04:	001a      	movs	r2, r3
 8005f06:	183b      	adds	r3, r7, r0
 8005f08:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8005f0a:	4b55      	ldr	r3, [pc, #340]	; (8006060 <CMWX1ZZABZ0XX_RADIO_IoInit+0x204>)
 8005f0c:	000c      	movs	r4, r1
 8005f0e:	187a      	adds	r2, r7, r1
 8005f10:	6812      	ldr	r2, [r2, #0]
 8005f12:	0092      	lsls	r2, r2, #2
 8005f14:	58d3      	ldr	r3, [r2, r3]
 8005f16:	183a      	adds	r2, r7, r0
 8005f18:	0011      	movs	r1, r2
 8005f1a:	0018      	movs	r0, r3
 8005f1c:	f001 fccc 	bl	80078b8 <HAL_GPIO_Init>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8005f20:	193b      	adds	r3, r7, r4
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	3301      	adds	r3, #1
 8005f26:	193a      	adds	r2, r7, r4
 8005f28:	6013      	str	r3, [r2, #0]
 8005f2a:	2394      	movs	r3, #148	; 0x94
 8005f2c:	18fb      	adds	r3, r7, r3
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2b03      	cmp	r3, #3
 8005f32:	d9d9      	bls.n	8005ee8 <CMWX1ZZABZ0XX_RADIO_IoInit+0x8c>
  }


  /* SPI IO Init */
  /* Normally done by the HAL_MSP callback but not for this applic */
  CMWX1ZZABZ0XX_RADIO_SPI_IoInit(&dummy_hspi);
 8005f34:	2328      	movs	r3, #40	; 0x28
 8005f36:	18fb      	adds	r3, r7, r3
 8005f38:	0018      	movs	r0, r3
 8005f3a:	f000 fa07 	bl	800634c <CMWX1ZZABZ0XX_RADIO_SPI_IoInit>

  /* NSS initialization */
  initStruct.Pin = RADIO_NSS_PIN;
 8005f3e:	2480      	movs	r4, #128	; 0x80
 8005f40:	193b      	adds	r3, r7, r4
 8005f42:	2280      	movs	r2, #128	; 0x80
 8005f44:	0212      	lsls	r2, r2, #8
 8005f46:	601a      	str	r2, [r3, #0]
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005f48:	193b      	adds	r3, r7, r4
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_PULLUP;
 8005f4e:	193b      	adds	r3, r7, r4
 8005f50:	2201      	movs	r2, #1
 8005f52:	609a      	str	r2, [r3, #8]

  /* Enable NSS */
  RADIO_NSS_CLK_ENABLE();
 8005f54:	4b3f      	ldr	r3, [pc, #252]	; (8006054 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f58:	4b3e      	ldr	r3, [pc, #248]	; (8006054 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005f5a:	2101      	movs	r1, #1
 8005f5c:	430a      	orrs	r2, r1
 8005f5e:	62da      	str	r2, [r3, #44]	; 0x2c
 8005f60:	4b3c      	ldr	r3, [pc, #240]	; (8006054 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f64:	2201      	movs	r2, #1
 8005f66:	4013      	ands	r3, r2
 8005f68:	617b      	str	r3, [r7, #20]
 8005f6a:	697b      	ldr	r3, [r7, #20]
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 8005f6c:	193a      	adds	r2, r7, r4
 8005f6e:	23a0      	movs	r3, #160	; 0xa0
 8005f70:	05db      	lsls	r3, r3, #23
 8005f72:	0011      	movs	r1, r2
 8005f74:	0018      	movs	r0, r3
 8005f76:	f001 fc9f 	bl	80078b8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 8005f7a:	2380      	movs	r3, #128	; 0x80
 8005f7c:	0219      	lsls	r1, r3, #8
 8005f7e:	23a0      	movs	r3, #160	; 0xa0
 8005f80:	05db      	lsls	r3, r3, #23
 8005f82:	2201      	movs	r2, #1
 8005f84:	0018      	movs	r0, r3
 8005f86:	f001 ff14 	bl	8007db2 <HAL_GPIO_WritePin>

  /* Antenna IO Init */
  RADIO_TCXO_VCC_CLK_ENABLE();
 8005f8a:	4b32      	ldr	r3, [pc, #200]	; (8006054 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f8e:	4b31      	ldr	r3, [pc, #196]	; (8006054 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005f90:	2101      	movs	r1, #1
 8005f92:	430a      	orrs	r2, r1
 8005f94:	62da      	str	r2, [r3, #44]	; 0x2c
 8005f96:	4b2f      	ldr	r3, [pc, #188]	; (8006054 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	613b      	str	r3, [r7, #16]
 8005fa0:	693b      	ldr	r3, [r7, #16]
  RADIO_ANT_SWITCH_CLK_ENABLE_RX();
 8005fa2:	4b2c      	ldr	r3, [pc, #176]	; (8006054 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fa6:	4b2b      	ldr	r3, [pc, #172]	; (8006054 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005fa8:	2101      	movs	r1, #1
 8005faa:	430a      	orrs	r2, r1
 8005fac:	62da      	str	r2, [r3, #44]	; 0x2c
 8005fae:	4b29      	ldr	r3, [pc, #164]	; (8006054 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	60fb      	str	r3, [r7, #12]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_BOOST();
 8005fba:	4b26      	ldr	r3, [pc, #152]	; (8006054 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fbe:	4b25      	ldr	r3, [pc, #148]	; (8006054 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005fc0:	2104      	movs	r1, #4
 8005fc2:	430a      	orrs	r2, r1
 8005fc4:	62da      	str	r2, [r3, #44]	; 0x2c
 8005fc6:	4b23      	ldr	r3, [pc, #140]	; (8006054 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fca:	2204      	movs	r2, #4
 8005fcc:	4013      	ands	r3, r2
 8005fce:	60bb      	str	r3, [r7, #8]
 8005fd0:	68bb      	ldr	r3, [r7, #8]
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_RFO();
 8005fd2:	4b20      	ldr	r3, [pc, #128]	; (8006054 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fd6:	4b1f      	ldr	r3, [pc, #124]	; (8006054 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005fd8:	2104      	movs	r1, #4
 8005fda:	430a      	orrs	r2, r1
 8005fdc:	62da      	str	r2, [r3, #44]	; 0x2c
 8005fde:	4b1d      	ldr	r3, [pc, #116]	; (8006054 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe2:	2204      	movs	r2, #4
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	607b      	str	r3, [r7, #4]
 8005fe8:	687b      	ldr	r3, [r7, #4]


  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005fea:	193b      	adds	r3, r7, r4
 8005fec:	2201      	movs	r2, #1
 8005fee:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_NOPULL;
 8005ff0:	193b      	adds	r3, r7, r4
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8005ff6:	193b      	adds	r3, r7, r4
 8005ff8:	2203      	movs	r2, #3
 8005ffa:	60da      	str	r2, [r3, #12]

  initStruct.Pin = RADIO_TCXO_VCC_PIN;
 8005ffc:	193b      	adds	r3, r7, r4
 8005ffe:	2280      	movs	r2, #128	; 0x80
 8006000:	0152      	lsls	r2, r2, #5
 8006002:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_TCXO_VCC_PORT, &initStruct);
 8006004:	193a      	adds	r2, r7, r4
 8006006:	23a0      	movs	r3, #160	; 0xa0
 8006008:	05db      	lsls	r3, r3, #23
 800600a:	0011      	movs	r1, r2
 800600c:	0018      	movs	r0, r3
 800600e:	f001 fc53 	bl	80078b8 <HAL_GPIO_Init>

  initStruct.Pin = RADIO_ANT_SWITCH_PIN_RX;
 8006012:	193b      	adds	r3, r7, r4
 8006014:	2202      	movs	r2, #2
 8006016:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_RX, &initStruct);
 8006018:	193a      	adds	r2, r7, r4
 800601a:	23a0      	movs	r3, #160	; 0xa0
 800601c:	05db      	lsls	r3, r3, #23
 800601e:	0011      	movs	r1, r2
 8006020:	0018      	movs	r0, r3
 8006022:	f001 fc49 	bl	80078b8 <HAL_GPIO_Init>

  initStruct.Pin = RADIO_ANT_SWITCH_PIN_TX_BOOST;
 8006026:	193b      	adds	r3, r7, r4
 8006028:	2202      	movs	r2, #2
 800602a:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_BOOST, &initStruct);
 800602c:	193b      	adds	r3, r7, r4
 800602e:	4a0d      	ldr	r2, [pc, #52]	; (8006064 <CMWX1ZZABZ0XX_RADIO_IoInit+0x208>)
 8006030:	0019      	movs	r1, r3
 8006032:	0010      	movs	r0, r2
 8006034:	f001 fc40 	bl	80078b8 <HAL_GPIO_Init>

  initStruct.Pin = RADIO_ANT_SWITCH_PIN_TX_RFO;
 8006038:	193b      	adds	r3, r7, r4
 800603a:	2204      	movs	r2, #4
 800603c:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_RFO, &initStruct);
 800603e:	193b      	adds	r3, r7, r4
 8006040:	4a08      	ldr	r2, [pc, #32]	; (8006064 <CMWX1ZZABZ0XX_RADIO_IoInit+0x208>)
 8006042:	0019      	movs	r1, r3
 8006044:	0010      	movs	r0, r2
 8006046:	f001 fc37 	bl	80078b8 <HAL_GPIO_Init>
}
 800604a:	46c0      	nop			; (mov r8, r8)
 800604c:	46bd      	mov	sp, r7
 800604e:	b027      	add	sp, #156	; 0x9c
 8006050:	bd90      	pop	{r4, r7, pc}
 8006052:	46c0      	nop			; (mov r8, r8)
 8006054:	40021000 	.word	0x40021000
 8006058:	0801ef00 	.word	0x0801ef00
 800605c:	0801eef8 	.word	0x0801eef8
 8006060:	20000060 	.word	0x20000060
 8006064:	50000800 	.word	0x50000800

08006068 <CMWX1ZZABZ0XX_RADIO_IoDeInit>:

void CMWX1ZZABZ0XX_RADIO_IoDeInit(void)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b086      	sub	sp, #24
 800606c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct = {0};
 800606e:	003b      	movs	r3, r7
 8006070:	0018      	movs	r0, r3
 8006072:	2314      	movs	r3, #20
 8006074:	001a      	movs	r2, r3
 8006076:	2100      	movs	r1, #0
 8006078:	f017 ffc1 	bl	801dffe <memset>

  /* DIO IO DeInit */

  initStruct.Pull = GPIO_PULLDOWN;
 800607c:	003b      	movs	r3, r7
 800607e:	2202      	movs	r2, #2
 8006080:	609a      	str	r2, [r3, #8]

  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8006082:	2300      	movs	r3, #0
 8006084:	617b      	str	r3, [r7, #20]
 8006086:	e018      	b.n	80060ba <CMWX1ZZABZ0XX_RADIO_IoDeInit+0x52>
  {
    initStruct.Mode = RADIO_DIO_MODE[i];
 8006088:	4b10      	ldr	r3, [pc, #64]	; (80060cc <CMWX1ZZABZ0XX_RADIO_IoDeInit+0x64>)
 800608a:	697a      	ldr	r2, [r7, #20]
 800608c:	0092      	lsls	r2, r2, #2
 800608e:	58d2      	ldr	r2, [r2, r3]
 8006090:	003b      	movs	r3, r7
 8006092:	605a      	str	r2, [r3, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8006094:	4b0e      	ldr	r3, [pc, #56]	; (80060d0 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0x68>)
 8006096:	697a      	ldr	r2, [r7, #20]
 8006098:	0052      	lsls	r2, r2, #1
 800609a:	5ad3      	ldrh	r3, [r2, r3]
 800609c:	001a      	movs	r2, r3
 800609e:	003b      	movs	r3, r7
 80060a0:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 80060a2:	4b0c      	ldr	r3, [pc, #48]	; (80060d4 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0x6c>)
 80060a4:	697a      	ldr	r2, [r7, #20]
 80060a6:	0092      	lsls	r2, r2, #2
 80060a8:	58d3      	ldr	r3, [r2, r3]
 80060aa:	003a      	movs	r2, r7
 80060ac:	0011      	movs	r1, r2
 80060ae:	0018      	movs	r0, r3
 80060b0:	f001 fc02 	bl	80078b8 <HAL_GPIO_Init>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	3301      	adds	r3, #1
 80060b8:	617b      	str	r3, [r7, #20]
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	2b03      	cmp	r3, #3
 80060be:	d9e3      	bls.n	8006088 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0x20>
  }

  /* SPI IO DeInit */
  CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit();
 80060c0:	f000 f9a4 	bl	800640c <CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit>
  /* NSS IO DeInit is not done */

  /* Antenna IO DeInit is not done */

  /* Reset IO DeInit is not done */
}
 80060c4:	46c0      	nop			; (mov r8, r8)
 80060c6:	46bd      	mov	sp, r7
 80060c8:	b006      	add	sp, #24
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	0801ef00 	.word	0x0801ef00
 80060d0:	0801eef8 	.word	0x0801eef8
 80060d4:	20000060 	.word	0x20000060

080060d8 <CMWX1ZZABZ0XX_RADIO_IoIrqInit>:

void CMWX1ZZABZ0XX_RADIO_IoIrqInit(DioIrqHandler **irqHandlers)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b086      	sub	sp, #24
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060e0:	f3ef 8310 	mrs	r3, PRIMASK
 80060e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80060e6:	68fb      	ldr	r3, [r7, #12]
  CRITICAL_SECTION_BEGIN();
 80060e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80060ea:	b672      	cpsid	i
}
 80060ec:	46c0      	nop			; (mov r8, r8)
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 80060ee:	2300      	movs	r3, #0
 80060f0:	617b      	str	r3, [r7, #20]
 80060f2:	e02f      	b.n	8006154 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x7c>
  {
    HAL_EXTI_GetHandle(&hRADIO_DIO_exti[i], RADIO_DIO_EXTI_LINE[i]);
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	00da      	lsls	r2, r3, #3
 80060f8:	4b1d      	ldr	r3, [pc, #116]	; (8006170 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x98>)
 80060fa:	18d0      	adds	r0, r2, r3
 80060fc:	4b1d      	ldr	r3, [pc, #116]	; (8006174 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x9c>)
 80060fe:	697a      	ldr	r2, [r7, #20]
 8006100:	0092      	lsls	r2, r2, #2
 8006102:	58d3      	ldr	r3, [r2, r3]
 8006104:	0019      	movs	r1, r3
 8006106:	f001 fba1 	bl	800784c <HAL_EXTI_GetHandle>
    HAL_EXTI_RegisterCallback(&hRADIO_DIO_exti[i], HAL_EXTI_COMMON_CB_ID, irqHandlers[i]);
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	00da      	lsls	r2, r3, #3
 800610e:	4b18      	ldr	r3, [pc, #96]	; (8006170 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x98>)
 8006110:	18d0      	adds	r0, r2, r3
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	18d3      	adds	r3, r2, r3
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	001a      	movs	r2, r3
 800611e:	2100      	movs	r1, #0
 8006120:	f001 fb73 	bl	800780a <HAL_EXTI_RegisterCallback>
    HAL_NVIC_SetPriority(RADIO_DIO_IRQn[i], RADIO_DIO_IT_PRIO[i], 0x00);
 8006124:	4a14      	ldr	r2, [pc, #80]	; (8006178 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0xa0>)
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	18d3      	adds	r3, r2, r3
 800612a:	2000      	movs	r0, #0
 800612c:	5618      	ldrsb	r0, [r3, r0]
 800612e:	4b13      	ldr	r3, [pc, #76]	; (800617c <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0xa4>)
 8006130:	697a      	ldr	r2, [r7, #20]
 8006132:	0092      	lsls	r2, r2, #2
 8006134:	58d3      	ldr	r3, [r2, r3]
 8006136:	2200      	movs	r2, #0
 8006138:	0019      	movs	r1, r3
 800613a:	f001 f891 	bl	8007260 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RADIO_DIO_IRQn[i]);
 800613e:	4a0e      	ldr	r2, [pc, #56]	; (8006178 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0xa0>)
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	18d3      	adds	r3, r2, r3
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	b25b      	sxtb	r3, r3
 8006148:	0018      	movs	r0, r3
 800614a:	f001 f89e 	bl	800728a <HAL_NVIC_EnableIRQ>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	3301      	adds	r3, #1
 8006152:	617b      	str	r3, [r7, #20]
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	2b03      	cmp	r3, #3
 8006158:	d9cc      	bls.n	80060f4 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x1c>
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	f383 8810 	msr	PRIMASK, r3
}
 8006164:	46c0      	nop			; (mov r8, r8)
  }
  CRITICAL_SECTION_END();
}
 8006166:	46c0      	nop			; (mov r8, r8)
 8006168:	46bd      	mov	sp, r7
 800616a:	b006      	add	sp, #24
 800616c:	bd80      	pop	{r7, pc}
 800616e:	46c0      	nop			; (mov r8, r8)
 8006170:	200016bc 	.word	0x200016bc
 8006174:	0801eed4 	.word	0x0801eed4
 8006178:	0801eef4 	.word	0x0801eef4
 800617c:	0801eee4 	.word	0x0801eee4

08006180 <CMWX1ZZABZ0XX_RADIO_GetPaSelect>:
{
  HAL_EXTI_IRQHandler(&hRADIO_DIO_exti[DIO]);
}

TxConfig_TypeDef CMWX1ZZABZ0XX_RADIO_GetPaSelect(uint32_t channel)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  return CONF_RFO_LP_HP;
 8006188:	2300      	movs	r3, #0
}
 800618a:	0018      	movs	r0, r3
 800618c:	46bd      	mov	sp, r7
 800618e:	b002      	add	sp, #8
 8006190:	bd80      	pop	{r7, pc}
	...

08006194 <CMWX1ZZABZ0XX_RADIO_SetAntSw>:



void CMWX1ZZABZ0XX_RADIO_SetAntSw(RfSw_TypeDef state)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b082      	sub	sp, #8
 8006198:	af00      	add	r7, sp, #0
 800619a:	0002      	movs	r2, r0
 800619c:	1dfb      	adds	r3, r7, #7
 800619e:	701a      	strb	r2, [r3, #0]

  switch (state)
 80061a0:	1dfb      	adds	r3, r7, #7
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	2b04      	cmp	r3, #4
 80061a6:	d82e      	bhi.n	8006206 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x72>
 80061a8:	009a      	lsls	r2, r3, #2
 80061aa:	4b23      	ldr	r3, [pc, #140]	; (8006238 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa4>)
 80061ac:	18d3      	adds	r3, r2, r3
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	469f      	mov	pc, r3
  {
    case RFSW_RX:
    {
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, GPIO_PIN_SET);
 80061b2:	23a0      	movs	r3, #160	; 0xa0
 80061b4:	05db      	lsls	r3, r3, #23
 80061b6:	2201      	movs	r2, #1
 80061b8:	2102      	movs	r1, #2
 80061ba:	0018      	movs	r0, r3
 80061bc:	f001 fdf9 	bl	8007db2 <HAL_GPIO_WritePin>
      break;
 80061c0:	e036      	b.n	8006230 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x9c>
    }
    case RFSW_RFO_LP:
    {
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, GPIO_PIN_SET);
 80061c2:	4b1e      	ldr	r3, [pc, #120]	; (800623c <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 80061c4:	2201      	movs	r2, #1
 80061c6:	2104      	movs	r1, #4
 80061c8:	0018      	movs	r0, r3
 80061ca:	f001 fdf2 	bl	8007db2 <HAL_GPIO_WritePin>
      break;
 80061ce:	e02f      	b.n	8006230 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x9c>
    }
    case RFSW_RFO_HP:
    {
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_SET);
 80061d0:	4b1a      	ldr	r3, [pc, #104]	; (800623c <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 80061d2:	2201      	movs	r2, #1
 80061d4:	2102      	movs	r1, #2
 80061d6:	0018      	movs	r0, r3
 80061d8:	f001 fdeb 	bl	8007db2 <HAL_GPIO_WritePin>
      break;
 80061dc:	e028      	b.n	8006230 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x9c>
    case RFSW_RFO_LF:
    {
      break;
    }
    case RFSW_OFF:
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, GPIO_PIN_RESET);
 80061de:	23a0      	movs	r3, #160	; 0xa0
 80061e0:	05db      	lsls	r3, r3, #23
 80061e2:	2200      	movs	r2, #0
 80061e4:	2102      	movs	r1, #2
 80061e6:	0018      	movs	r0, r3
 80061e8:	f001 fde3 	bl	8007db2 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, GPIO_PIN_RESET);
 80061ec:	4b13      	ldr	r3, [pc, #76]	; (800623c <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 80061ee:	2200      	movs	r2, #0
 80061f0:	2104      	movs	r1, #4
 80061f2:	0018      	movs	r0, r3
 80061f4:	f001 fddd 	bl	8007db2 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 80061f8:	4b10      	ldr	r3, [pc, #64]	; (800623c <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 80061fa:	2200      	movs	r2, #0
 80061fc:	2102      	movs	r1, #2
 80061fe:	0018      	movs	r0, r3
 8006200:	f001 fdd7 	bl	8007db2 <HAL_GPIO_WritePin>
      break;
 8006204:	e014      	b.n	8006230 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x9c>
    default:
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, GPIO_PIN_RESET);
 8006206:	23a0      	movs	r3, #160	; 0xa0
 8006208:	05db      	lsls	r3, r3, #23
 800620a:	2200      	movs	r2, #0
 800620c:	2102      	movs	r1, #2
 800620e:	0018      	movs	r0, r3
 8006210:	f001 fdcf 	bl	8007db2 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, GPIO_PIN_RESET);
 8006214:	4b09      	ldr	r3, [pc, #36]	; (800623c <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 8006216:	2200      	movs	r2, #0
 8006218:	2104      	movs	r1, #4
 800621a:	0018      	movs	r0, r3
 800621c:	f001 fdc9 	bl	8007db2 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 8006220:	4b06      	ldr	r3, [pc, #24]	; (800623c <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 8006222:	2200      	movs	r2, #0
 8006224:	2102      	movs	r1, #2
 8006226:	0018      	movs	r0, r3
 8006228:	f001 fdc3 	bl	8007db2 <HAL_GPIO_WritePin>

      break;
 800622c:	e000      	b.n	8006230 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x9c>
      break;
 800622e:	46c0      	nop			; (mov r8, r8)
  }
}
 8006230:	46c0      	nop			; (mov r8, r8)
 8006232:	46bd      	mov	sp, r7
 8006234:	b002      	add	sp, #8
 8006236:	bd80      	pop	{r7, pc}
 8006238:	0801ef10 	.word	0x0801ef10
 800623c:	50000800 	.word	0x50000800

08006240 <CMWX1ZZABZ0XX_RADIO_CheckRfFrequency>:

bool CMWX1ZZABZ0XX_RADIO_CheckRfFrequency(uint32_t frequency)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b082      	sub	sp, #8
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  // Implement check. Currently all frequencies are supported
  return true;
 8006248:	2301      	movs	r3, #1
}
 800624a:	0018      	movs	r0, r3
 800624c:	46bd      	mov	sp, r7
 800624e:	b002      	add	sp, #8
 8006250:	bd80      	pop	{r7, pc}
	...

08006254 <CMWX1ZZABZ0XX_RADIO_Reset>:

void CMWX1ZZABZ0XX_RADIO_Reset(void)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b086      	sub	sp, #24
 8006258:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct = { 0 };
 800625a:	1d3b      	adds	r3, r7, #4
 800625c:	0018      	movs	r0, r3
 800625e:	2314      	movs	r3, #20
 8006260:	001a      	movs	r2, r3
 8006262:	2100      	movs	r1, #0
 8006264:	f017 fecb 	bl	801dffe <memset>

  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006268:	1d3b      	adds	r3, r7, #4
 800626a:	2201      	movs	r2, #1
 800626c:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_NOPULL;
 800626e:	1d3b      	adds	r3, r7, #4
 8006270:	2200      	movs	r2, #0
 8006272:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8006274:	1d3b      	adds	r3, r7, #4
 8006276:	2203      	movs	r2, #3
 8006278:	60da      	str	r2, [r3, #12]
  initStruct.Pin = RADIO_RESET_PIN;
 800627a:	1d3b      	adds	r3, r7, #4
 800627c:	2201      	movs	r2, #1
 800627e:	601a      	str	r2, [r3, #0]

  // Set RESET pin to 0
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8006280:	1d3b      	adds	r3, r7, #4
 8006282:	4a0f      	ldr	r2, [pc, #60]	; (80062c0 <CMWX1ZZABZ0XX_RADIO_Reset+0x6c>)
 8006284:	0019      	movs	r1, r3
 8006286:	0010      	movs	r0, r2
 8006288:	f001 fb16 	bl	80078b8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_RESET_PORT, RADIO_RESET_PIN, GPIO_PIN_RESET);
 800628c:	4b0c      	ldr	r3, [pc, #48]	; (80062c0 <CMWX1ZZABZ0XX_RADIO_Reset+0x6c>)
 800628e:	2200      	movs	r2, #0
 8006290:	2101      	movs	r1, #1
 8006292:	0018      	movs	r0, r3
 8006294:	f001 fd8d 	bl	8007db2 <HAL_GPIO_WritePin>

  // Wait 1 ms
  HAL_Delay(1);
 8006298:	2001      	movs	r0, #1
 800629a:	f7fe ff62 	bl	8005162 <HAL_Delay>

  // Configure RESET as input
  initStruct.Mode = GPIO_NOPULL;
 800629e:	1d3b      	adds	r3, r7, #4
 80062a0:	2200      	movs	r2, #0
 80062a2:	605a      	str	r2, [r3, #4]
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 80062a4:	1d3b      	adds	r3, r7, #4
 80062a6:	4a06      	ldr	r2, [pc, #24]	; (80062c0 <CMWX1ZZABZ0XX_RADIO_Reset+0x6c>)
 80062a8:	0019      	movs	r1, r3
 80062aa:	0010      	movs	r0, r2
 80062ac:	f001 fb04 	bl	80078b8 <HAL_GPIO_Init>

  // Wait 6 ms
  HAL_Delay(6);
 80062b0:	2006      	movs	r0, #6
 80062b2:	f7fe ff56 	bl	8005162 <HAL_Delay>
}
 80062b6:	46c0      	nop			; (mov r8, r8)
 80062b8:	46bd      	mov	sp, r7
 80062ba:	b006      	add	sp, #24
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	46c0      	nop			; (mov r8, r8)
 80062c0:	50000800 	.word	0x50000800

080062c4 <CMWX1ZZABZ0XX_RADIO_Bus_Init>:

/* Bus mapping to SPI */

void CMWX1ZZABZ0XX_RADIO_Bus_Init(void)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	af00      	add	r7, sp, #0
  RADIO_SPI_Init();
 80062c8:	f7ff fa34 	bl	8005734 <BSP_SPI1_Init>
}
 80062cc:	46c0      	nop			; (mov r8, r8)
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}

080062d2 <CMWX1ZZABZ0XX_RADIO_SendRecv>:
  * @brief  Send Receive data via SPI
  * @param  Data to send
  * @retval Received data
  */
uint16_t CMWX1ZZABZ0XX_RADIO_SendRecv(uint16_t txData)
{
 80062d2:	b590      	push	{r4, r7, lr}
 80062d4:	b085      	sub	sp, #20
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	0002      	movs	r2, r0
 80062da:	1dbb      	adds	r3, r7, #6
 80062dc:	801a      	strh	r2, [r3, #0]
  uint16_t rxData ;

  /*RADIO_SPI_SendRecv(( uint8_t * ) &txData, ( uint8_t* ) &rxData, 1);*/
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 80062de:	240e      	movs	r4, #14
 80062e0:	1939      	adds	r1, r7, r4
 80062e2:	1dbb      	adds	r3, r7, #6
 80062e4:	2201      	movs	r2, #1
 80062e6:	0018      	movs	r0, r3
 80062e8:	f7ff fa48 	bl	800577c <BSP_SPI1_SendRecv>

  return rxData;
 80062ec:	193b      	adds	r3, r7, r4
 80062ee:	881b      	ldrh	r3, [r3, #0]
}
 80062f0:	0018      	movs	r0, r3
 80062f2:	46bd      	mov	sp, r7
 80062f4:	b005      	add	sp, #20
 80062f6:	bd90      	pop	{r4, r7, pc}

080062f8 <CMWX1ZZABZ0XX_RADIO_ChipSelect>:

void CMWX1ZZABZ0XX_RADIO_ChipSelect(int32_t state)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  if (state == 0)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d108      	bne.n	8006318 <CMWX1ZZABZ0XX_RADIO_ChipSelect+0x20>
  {
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_RESET);
 8006306:	2380      	movs	r3, #128	; 0x80
 8006308:	0219      	lsls	r1, r3, #8
 800630a:	23a0      	movs	r3, #160	; 0xa0
 800630c:	05db      	lsls	r3, r3, #23
 800630e:	2200      	movs	r2, #0
 8006310:	0018      	movs	r0, r3
 8006312:	f001 fd4e 	bl	8007db2 <HAL_GPIO_WritePin>
  }
  else
  {
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
  }
}
 8006316:	e007      	b.n	8006328 <CMWX1ZZABZ0XX_RADIO_ChipSelect+0x30>
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 8006318:	2380      	movs	r3, #128	; 0x80
 800631a:	0219      	lsls	r1, r3, #8
 800631c:	23a0      	movs	r3, #160	; 0xa0
 800631e:	05db      	lsls	r3, r3, #23
 8006320:	2201      	movs	r2, #1
 8006322:	0018      	movs	r0, r3
 8006324:	f001 fd45 	bl	8007db2 <HAL_GPIO_WritePin>
}
 8006328:	46c0      	nop			; (mov r8, r8)
 800632a:	46bd      	mov	sp, r7
 800632c:	b002      	add	sp, #8
 800632e:	bd80      	pop	{r7, pc}

08006330 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>:

uint32_t CMWX1ZZABZ0XX_RADIO_GetDio1PinState(void)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(RADIO_DIO_1_PORT, RADIO_DIO_1_PIN);
 8006334:	4b04      	ldr	r3, [pc, #16]	; (8006348 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState+0x18>)
 8006336:	2102      	movs	r1, #2
 8006338:	0018      	movs	r0, r3
 800633a:	f001 fd1d 	bl	8007d78 <HAL_GPIO_ReadPin>
 800633e:	0003      	movs	r3, r0
}
 8006340:	0018      	movs	r0, r3
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	46c0      	nop			; (mov r8, r8)
 8006348:	50000400 	.word	0x50000400

0800634c <CMWX1ZZABZ0XX_RADIO_SPI_IoInit>:
  * @brief  Initializes SPI MSP.
  * @param  hspi  SPI handler
  * @retval None
*/
static void CMWX1ZZABZ0XX_RADIO_SPI_IoInit(SPI_HandleTypeDef *spiHandle)
{
 800634c:	b590      	push	{r4, r7, lr}
 800634e:	b08b      	sub	sp, #44	; 0x2c
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /* Enable Peripheral clock */
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 8006354:	4b2b      	ldr	r3, [pc, #172]	; (8006404 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 8006356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006358:	4b2a      	ldr	r3, [pc, #168]	; (8006404 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 800635a:	2102      	movs	r1, #2
 800635c:	430a      	orrs	r2, r1
 800635e:	62da      	str	r2, [r3, #44]	; 0x2c
 8006360:	4b28      	ldr	r3, [pc, #160]	; (8006404 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 8006362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006364:	2202      	movs	r2, #2
 8006366:	4013      	ands	r3, r2
 8006368:	613b      	str	r3, [r7, #16]
 800636a:	693b      	ldr	r3, [r7, #16]
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 800636c:	4b25      	ldr	r3, [pc, #148]	; (8006404 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 800636e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006370:	4b24      	ldr	r3, [pc, #144]	; (8006404 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 8006372:	2101      	movs	r1, #1
 8006374:	430a      	orrs	r2, r1
 8006376:	62da      	str	r2, [r3, #44]	; 0x2c
 8006378:	4b22      	ldr	r3, [pc, #136]	; (8006404 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 800637a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800637c:	2201      	movs	r2, #1
 800637e:	4013      	ands	r3, r2
 8006380:	60fb      	str	r3, [r7, #12]
 8006382:	68fb      	ldr	r3, [r7, #12]
  RADIO_SPI_MISO_GPIO_CLK_ENABLE();
 8006384:	4b1f      	ldr	r3, [pc, #124]	; (8006404 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 8006386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006388:	4b1e      	ldr	r3, [pc, #120]	; (8006404 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 800638a:	2101      	movs	r1, #1
 800638c:	430a      	orrs	r2, r1
 800638e:	62da      	str	r2, [r3, #44]	; 0x2c
 8006390:	4b1c      	ldr	r3, [pc, #112]	; (8006404 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 8006392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006394:	2201      	movs	r2, #1
 8006396:	4013      	ands	r3, r2
 8006398:	60bb      	str	r3, [r7, #8]
 800639a:	68bb      	ldr	r3, [r7, #8]
  /**SPI1 GPIO Configuration
  PA5     ------> SPI1_SCK
  PA6     ------> SPI1_MISO
  PA7     ------> SPI1_MOSI
    */
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800639c:	2414      	movs	r4, #20
 800639e:	193b      	adds	r3, r7, r4
 80063a0:	2202      	movs	r2, #2
 80063a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80063a4:	193b      	adds	r3, r7, r4
 80063a6:	2202      	movs	r2, #2
 80063a8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063aa:	193b      	adds	r3, r7, r4
 80063ac:	2203      	movs	r2, #3
 80063ae:	60da      	str	r2, [r3, #12]

  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
 80063b0:	193b      	adds	r3, r7, r4
 80063b2:	2200      	movs	r2, #0
 80063b4:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 80063b6:	193b      	adds	r3, r7, r4
 80063b8:	2280      	movs	r2, #128	; 0x80
 80063ba:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80063bc:	193a      	adds	r2, r7, r4
 80063be:	23a0      	movs	r3, #160	; 0xa0
 80063c0:	05db      	lsls	r3, r3, #23
 80063c2:	0011      	movs	r1, r2
 80063c4:	0018      	movs	r0, r3
 80063c6:	f001 fa77 	bl	80078b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_MISO_GPIO_AF;
 80063ca:	193b      	adds	r3, r7, r4
 80063cc:	2200      	movs	r2, #0
 80063ce:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 80063d0:	193b      	adds	r3, r7, r4
 80063d2:	2240      	movs	r2, #64	; 0x40
 80063d4:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 80063d6:	193a      	adds	r2, r7, r4
 80063d8:	23a0      	movs	r3, #160	; 0xa0
 80063da:	05db      	lsls	r3, r3, #23
 80063dc:	0011      	movs	r1, r2
 80063de:	0018      	movs	r0, r3
 80063e0:	f001 fa6a 	bl	80078b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_SCK_GPIO_AF;
 80063e4:	193b      	adds	r3, r7, r4
 80063e6:	2200      	movs	r2, #0
 80063e8:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 80063ea:	193b      	adds	r3, r7, r4
 80063ec:	2208      	movs	r2, #8
 80063ee:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 80063f0:	193b      	adds	r3, r7, r4
 80063f2:	4a05      	ldr	r2, [pc, #20]	; (8006408 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xbc>)
 80063f4:	0019      	movs	r1, r3
 80063f6:	0010      	movs	r0, r2
 80063f8:	f001 fa5e 	bl	80078b8 <HAL_GPIO_Init>
}
 80063fc:	46c0      	nop			; (mov r8, r8)
 80063fe:	46bd      	mov	sp, r7
 8006400:	b00b      	add	sp, #44	; 0x2c
 8006402:	bd90      	pop	{r4, r7, pc}
 8006404:	40021000 	.word	0x40021000
 8006408:	50000400 	.word	0x50000400

0800640c <CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit>:
  * @brief  DeInitializes SPI MSP.
  * @param  hspi  SPI handler
  * @retval None
  */
static void CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit(void)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b086      	sub	sp, #24
 8006410:	af00      	add	r7, sp, #0

  /* DeInitialize Peripheral GPIOs */
  /* Instead of using HAL_GPIO_DeInit() which set ANALOG mode
     it's preferred to set in OUTPUT_PP mode, with the pins set to 0 */

  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006412:	1d3b      	adds	r3, r7, #4
 8006414:	2201      	movs	r2, #1
 8006416:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006418:	1d3b      	adds	r3, r7, #4
 800641a:	2202      	movs	r2, #2
 800641c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 800641e:	1d3b      	adds	r3, r7, #4
 8006420:	2280      	movs	r2, #128	; 0x80
 8006422:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8006424:	1d3a      	adds	r2, r7, #4
 8006426:	23a0      	movs	r3, #160	; 0xa0
 8006428:	05db      	lsls	r3, r3, #23
 800642a:	0011      	movs	r1, r2
 800642c:	0018      	movs	r0, r3
 800642e:	f001 fa43 	bl	80078b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 8006432:	1d3b      	adds	r3, r7, #4
 8006434:	2240      	movs	r2, #64	; 0x40
 8006436:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8006438:	1d3a      	adds	r2, r7, #4
 800643a:	23a0      	movs	r3, #160	; 0xa0
 800643c:	05db      	lsls	r3, r3, #23
 800643e:	0011      	movs	r1, r2
 8006440:	0018      	movs	r0, r3
 8006442:	f001 fa39 	bl	80078b8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 8006446:	1d3b      	adds	r3, r7, #4
 8006448:	2208      	movs	r2, #8
 800644a:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 800644c:	1d3b      	adds	r3, r7, #4
 800644e:	4a0e      	ldr	r2, [pc, #56]	; (8006488 <CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit+0x7c>)
 8006450:	0019      	movs	r1, r3
 8006452:	0010      	movs	r0, r2
 8006454:	f001 fa30 	bl	80078b8 <HAL_GPIO_Init>


  HAL_GPIO_WritePin(RADIO_SPI_MOSI_GPIO_PORT, RADIO_SPI_MOSI_GPIO_PIN, GPIO_PIN_RESET);
 8006458:	23a0      	movs	r3, #160	; 0xa0
 800645a:	05db      	lsls	r3, r3, #23
 800645c:	2200      	movs	r2, #0
 800645e:	2180      	movs	r1, #128	; 0x80
 8006460:	0018      	movs	r0, r3
 8006462:	f001 fca6 	bl	8007db2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_MISO_GPIO_PORT, RADIO_SPI_MISO_GPIO_PIN, GPIO_PIN_RESET);
 8006466:	23a0      	movs	r3, #160	; 0xa0
 8006468:	05db      	lsls	r3, r3, #23
 800646a:	2200      	movs	r2, #0
 800646c:	2140      	movs	r1, #64	; 0x40
 800646e:	0018      	movs	r0, r3
 8006470:	f001 fc9f 	bl	8007db2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_SCK_GPIO_PORT, RADIO_SPI_SCK_GPIO_PIN, GPIO_PIN_RESET);
 8006474:	4b04      	ldr	r3, [pc, #16]	; (8006488 <CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit+0x7c>)
 8006476:	2200      	movs	r2, #0
 8006478:	2108      	movs	r1, #8
 800647a:	0018      	movs	r0, r3
 800647c:	f001 fc99 	bl	8007db2 <HAL_GPIO_WritePin>

}
 8006480:	46c0      	nop			; (mov r8, r8)
 8006482:	46bd      	mov	sp, r7
 8006484:	b006      	add	sp, #24
 8006486:	bd80      	pop	{r7, pc}
 8006488:	50000400 	.word	0x50000400

0800648c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8006490:	4b17      	ldr	r3, [pc, #92]	; (80064f0 <SystemInit+0x64>)
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	4b16      	ldr	r3, [pc, #88]	; (80064f0 <SystemInit+0x64>)
 8006496:	2180      	movs	r1, #128	; 0x80
 8006498:	0049      	lsls	r1, r1, #1
 800649a:	430a      	orrs	r2, r1
 800649c:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 800649e:	4b14      	ldr	r3, [pc, #80]	; (80064f0 <SystemInit+0x64>)
 80064a0:	68da      	ldr	r2, [r3, #12]
 80064a2:	4b13      	ldr	r3, [pc, #76]	; (80064f0 <SystemInit+0x64>)
 80064a4:	4913      	ldr	r1, [pc, #76]	; (80064f4 <SystemInit+0x68>)
 80064a6:	400a      	ands	r2, r1
 80064a8:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80064aa:	4b11      	ldr	r3, [pc, #68]	; (80064f0 <SystemInit+0x64>)
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	4b10      	ldr	r3, [pc, #64]	; (80064f0 <SystemInit+0x64>)
 80064b0:	4911      	ldr	r1, [pc, #68]	; (80064f8 <SystemInit+0x6c>)
 80064b2:	400a      	ands	r2, r1
 80064b4:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80064b6:	4b0e      	ldr	r3, [pc, #56]	; (80064f0 <SystemInit+0x64>)
 80064b8:	689a      	ldr	r2, [r3, #8]
 80064ba:	4b0d      	ldr	r3, [pc, #52]	; (80064f0 <SystemInit+0x64>)
 80064bc:	2101      	movs	r1, #1
 80064be:	438a      	bics	r2, r1
 80064c0:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80064c2:	4b0b      	ldr	r3, [pc, #44]	; (80064f0 <SystemInit+0x64>)
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	4b0a      	ldr	r3, [pc, #40]	; (80064f0 <SystemInit+0x64>)
 80064c8:	490c      	ldr	r1, [pc, #48]	; (80064fc <SystemInit+0x70>)
 80064ca:	400a      	ands	r2, r1
 80064cc:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 80064ce:	4b08      	ldr	r3, [pc, #32]	; (80064f0 <SystemInit+0x64>)
 80064d0:	68da      	ldr	r2, [r3, #12]
 80064d2:	4b07      	ldr	r3, [pc, #28]	; (80064f0 <SystemInit+0x64>)
 80064d4:	490a      	ldr	r1, [pc, #40]	; (8006500 <SystemInit+0x74>)
 80064d6:	400a      	ands	r2, r1
 80064d8:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80064da:	4b05      	ldr	r3, [pc, #20]	; (80064f0 <SystemInit+0x64>)
 80064dc:	2200      	movs	r2, #0
 80064de:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80064e0:	4b08      	ldr	r3, [pc, #32]	; (8006504 <SystemInit+0x78>)
 80064e2:	2280      	movs	r2, #128	; 0x80
 80064e4:	0512      	lsls	r2, r2, #20
 80064e6:	609a      	str	r2, [r3, #8]
#endif
}
 80064e8:	46c0      	nop			; (mov r8, r8)
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	46c0      	nop			; (mov r8, r8)
 80064f0:	40021000 	.word	0x40021000
 80064f4:	88ff400c 	.word	0x88ff400c
 80064f8:	fef6fff6 	.word	0xfef6fff6
 80064fc:	fffbffff 	.word	0xfffbffff
 8006500:	ff02ffff 	.word	0xff02ffff
 8006504:	e000ed00 	.word	0xe000ed00

08006508 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800650e:	1dfb      	adds	r3, r7, #7
 8006510:	2200      	movs	r2, #0
 8006512:	701a      	strb	r2, [r3, #0]
#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
#endif /* PREREAD_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006514:	4b0b      	ldr	r3, [pc, #44]	; (8006544 <HAL_Init+0x3c>)
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	4b0a      	ldr	r3, [pc, #40]	; (8006544 <HAL_Init+0x3c>)
 800651a:	2102      	movs	r1, #2
 800651c:	430a      	orrs	r2, r1
 800651e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006520:	2003      	movs	r0, #3
 8006522:	f7fe fe0d 	bl	8005140 <HAL_InitTick>
 8006526:	1e03      	subs	r3, r0, #0
 8006528:	d003      	beq.n	8006532 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800652a:	1dfb      	adds	r3, r7, #7
 800652c:	2201      	movs	r2, #1
 800652e:	701a      	strb	r2, [r3, #0]
 8006530:	e001      	b.n	8006536 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006532:	f7fe fbbf 	bl	8004cb4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006536:	1dfb      	adds	r3, r7, #7
 8006538:	781b      	ldrb	r3, [r3, #0]
}
 800653a:	0018      	movs	r0, r3
 800653c:	46bd      	mov	sp, r7
 800653e:	b002      	add	sp, #8
 8006540:	bd80      	pop	{r7, pc}
 8006542:	46c0      	nop			; (mov r8, r8)
 8006544:	40022000 	.word	0x40022000

08006548 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800654c:	4b05      	ldr	r3, [pc, #20]	; (8006564 <HAL_IncTick+0x1c>)
 800654e:	781b      	ldrb	r3, [r3, #0]
 8006550:	001a      	movs	r2, r3
 8006552:	4b05      	ldr	r3, [pc, #20]	; (8006568 <HAL_IncTick+0x20>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	18d2      	adds	r2, r2, r3
 8006558:	4b03      	ldr	r3, [pc, #12]	; (8006568 <HAL_IncTick+0x20>)
 800655a:	601a      	str	r2, [r3, #0]
}
 800655c:	46c0      	nop			; (mov r8, r8)
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
 8006562:	46c0      	nop			; (mov r8, r8)
 8006564:	20000078 	.word	0x20000078
 8006568:	200016dc 	.word	0x200016dc

0800656c <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8006570:	4b02      	ldr	r3, [pc, #8]	; (800657c <HAL_GetUIDw0+0x10>)
 8006572:	681b      	ldr	r3, [r3, #0]
}
 8006574:	0018      	movs	r0, r3
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
 800657a:	46c0      	nop			; (mov r8, r8)
 800657c:	1ff80050 	.word	0x1ff80050

08006580 <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 8006584:	4b02      	ldr	r3, [pc, #8]	; (8006590 <HAL_GetUIDw1+0x10>)
 8006586:	681b      	ldr	r3, [r3, #0]
}
 8006588:	0018      	movs	r0, r3
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	46c0      	nop			; (mov r8, r8)
 8006590:	1ff80054 	.word	0x1ff80054

08006594 <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 8006598:	4b02      	ldr	r3, [pc, #8]	; (80065a4 <HAL_GetUIDw2+0x10>)
 800659a:	681b      	ldr	r3, [r3, #0]
}
 800659c:	0018      	movs	r0, r3
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	46c0      	nop			; (mov r8, r8)
 80065a4:	1ff80064 	.word	0x1ff80064

080065a8 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enables the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80065ac:	4b04      	ldr	r3, [pc, #16]	; (80065c0 <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 80065ae:	685a      	ldr	r2, [r3, #4]
 80065b0:	4b03      	ldr	r3, [pc, #12]	; (80065c0 <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 80065b2:	2101      	movs	r1, #1
 80065b4:	430a      	orrs	r2, r1
 80065b6:	605a      	str	r2, [r3, #4]
}
 80065b8:	46c0      	nop			; (mov r8, r8)
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	46c0      	nop			; (mov r8, r8)
 80065c0:	40015800 	.word	0x40015800

080065c4 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enables the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80065c8:	4b04      	ldr	r3, [pc, #16]	; (80065dc <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 80065ca:	685a      	ldr	r2, [r3, #4]
 80065cc:	4b03      	ldr	r3, [pc, #12]	; (80065dc <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 80065ce:	2102      	movs	r1, #2
 80065d0:	430a      	orrs	r2, r1
 80065d2:	605a      	str	r2, [r3, #4]
}
 80065d4:	46c0      	nop			; (mov r8, r8)
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	46c0      	nop			; (mov r8, r8)
 80065dc:	40015800 	.word	0x40015800

080065e0 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enables the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80065e4:	4b04      	ldr	r3, [pc, #16]	; (80065f8 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 80065e6:	685a      	ldr	r2, [r3, #4]
 80065e8:	4b03      	ldr	r3, [pc, #12]	; (80065f8 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 80065ea:	2104      	movs	r1, #4
 80065ec:	430a      	orrs	r2, r1
 80065ee:	605a      	str	r2, [r3, #4]
}
 80065f0:	46c0      	nop			; (mov r8, r8)
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	46c0      	nop			; (mov r8, r8)
 80065f8:	40015800 	.word	0x40015800

080065fc <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d101      	bne.n	800660e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e159      	b.n	80068c2 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006612:	2b00      	cmp	r3, #0
 8006614:	d10a      	bne.n	800662c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2250      	movs	r2, #80	; 0x50
 8006620:	2100      	movs	r1, #0
 8006622:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	0018      	movs	r0, r3
 8006628:	f7fd f92a 	bl	8003880 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006630:	2210      	movs	r2, #16
 8006632:	4013      	ands	r3, r2
 8006634:	2b10      	cmp	r3, #16
 8006636:	d005      	beq.n	8006644 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	2204      	movs	r2, #4
 8006640:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8006642:	d00b      	beq.n	800665c <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006648:	2210      	movs	r2, #16
 800664a:	431a      	orrs	r2, r3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2250      	movs	r2, #80	; 0x50
 8006654:	2100      	movs	r1, #0
 8006656:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	e132      	b.n	80068c2 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006660:	4a9a      	ldr	r2, [pc, #616]	; (80068cc <HAL_ADC_Init+0x2d0>)
 8006662:	4013      	ands	r3, r2
 8006664:	2202      	movs	r2, #2
 8006666:	431a      	orrs	r2, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	2203      	movs	r2, #3
 8006674:	4013      	ands	r3, r2
 8006676:	2b01      	cmp	r3, #1
 8006678:	d108      	bne.n	800668c <HAL_ADC_Init+0x90>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2201      	movs	r2, #1
 8006682:	4013      	ands	r3, r2
 8006684:	2b01      	cmp	r3, #1
 8006686:	d101      	bne.n	800668c <HAL_ADC_Init+0x90>
 8006688:	2301      	movs	r3, #1
 800668a:	e000      	b.n	800668e <HAL_ADC_Init+0x92>
 800668c:	2300      	movs	r3, #0
 800668e:	2b00      	cmp	r3, #0
 8006690:	d149      	bne.n	8006726 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	685a      	ldr	r2, [r3, #4]
 8006696:	23c0      	movs	r3, #192	; 0xc0
 8006698:	061b      	lsls	r3, r3, #24
 800669a:	429a      	cmp	r2, r3
 800669c:	d00b      	beq.n	80066b6 <HAL_ADC_Init+0xba>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	685a      	ldr	r2, [r3, #4]
 80066a2:	2380      	movs	r3, #128	; 0x80
 80066a4:	05db      	lsls	r3, r3, #23
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d005      	beq.n	80066b6 <HAL_ADC_Init+0xba>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	685a      	ldr	r2, [r3, #4]
 80066ae:	2380      	movs	r3, #128	; 0x80
 80066b0:	061b      	lsls	r3, r3, #24
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d111      	bne.n	80066da <HAL_ADC_Init+0xde>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	691a      	ldr	r2, [r3, #16]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	0092      	lsls	r2, r2, #2
 80066c2:	0892      	lsrs	r2, r2, #2
 80066c4:	611a      	str	r2, [r3, #16]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	6919      	ldr	r1, [r3, #16]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	685a      	ldr	r2, [r3, #4]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	430a      	orrs	r2, r1
 80066d6:	611a      	str	r2, [r3, #16]
 80066d8:	e014      	b.n	8006704 <HAL_ADC_Init+0x108>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	691a      	ldr	r2, [r3, #16]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	0092      	lsls	r2, r2, #2
 80066e6:	0892      	lsrs	r2, r2, #2
 80066e8:	611a      	str	r2, [r3, #16]
 80066ea:	4b79      	ldr	r3, [pc, #484]	; (80068d0 <HAL_ADC_Init+0x2d4>)
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	4b78      	ldr	r3, [pc, #480]	; (80068d0 <HAL_ADC_Init+0x2d4>)
 80066f0:	4978      	ldr	r1, [pc, #480]	; (80068d4 <HAL_ADC_Init+0x2d8>)
 80066f2:	400a      	ands	r2, r1
 80066f4:	601a      	str	r2, [r3, #0]
 80066f6:	4b76      	ldr	r3, [pc, #472]	; (80068d0 <HAL_ADC_Init+0x2d4>)
 80066f8:	6819      	ldr	r1, [r3, #0]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	685a      	ldr	r2, [r3, #4]
 80066fe:	4b74      	ldr	r3, [pc, #464]	; (80068d0 <HAL_ADC_Init+0x2d4>)
 8006700:	430a      	orrs	r2, r1
 8006702:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68da      	ldr	r2, [r3, #12]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2118      	movs	r1, #24
 8006710:	438a      	bics	r2, r1
 8006712:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	68d9      	ldr	r1, [r3, #12]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	689a      	ldr	r2, [r3, #8]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	430a      	orrs	r2, r1
 8006724:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8006726:	4b6a      	ldr	r3, [pc, #424]	; (80068d0 <HAL_ADC_Init+0x2d4>)
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	4b69      	ldr	r3, [pc, #420]	; (80068d0 <HAL_ADC_Init+0x2d4>)
 800672c:	496a      	ldr	r1, [pc, #424]	; (80068d8 <HAL_ADC_Init+0x2dc>)
 800672e:	400a      	ands	r2, r1
 8006730:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8006732:	4b67      	ldr	r3, [pc, #412]	; (80068d0 <HAL_ADC_Init+0x2d4>)
 8006734:	6819      	ldr	r1, [r3, #0]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800673a:	065a      	lsls	r2, r3, #25
 800673c:	4b64      	ldr	r3, [pc, #400]	; (80068d0 <HAL_ADC_Init+0x2d4>)
 800673e:	430a      	orrs	r2, r1
 8006740:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	689a      	ldr	r2, [r3, #8]
 8006748:	2380      	movs	r3, #128	; 0x80
 800674a:	055b      	lsls	r3, r3, #21
 800674c:	4013      	ands	r3, r2
 800674e:	d108      	bne.n	8006762 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	689a      	ldr	r2, [r3, #8]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2180      	movs	r1, #128	; 0x80
 800675c:	0549      	lsls	r1, r1, #21
 800675e:	430a      	orrs	r2, r1
 8006760:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	68da      	ldr	r2, [r3, #12]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	495b      	ldr	r1, [pc, #364]	; (80068dc <HAL_ADC_Init+0x2e0>)
 800676e:	400a      	ands	r2, r1
 8006770:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	68d9      	ldr	r1, [r3, #12]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	2b02      	cmp	r3, #2
 8006782:	d101      	bne.n	8006788 <HAL_ADC_Init+0x18c>
 8006784:	2304      	movs	r3, #4
 8006786:	e000      	b.n	800678a <HAL_ADC_Init+0x18e>
 8006788:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800678a:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2020      	movs	r0, #32
 8006790:	5c1b      	ldrb	r3, [r3, r0]
 8006792:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8006794:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	202c      	movs	r0, #44	; 0x2c
 800679a:	5c1b      	ldrb	r3, [r3, r0]
 800679c:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800679e:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80067a4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	699b      	ldr	r3, [r3, #24]
 80067aa:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80067ac:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	69db      	ldr	r3, [r3, #28]
 80067b2:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80067b4:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	430a      	orrs	r2, r1
 80067bc:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80067c2:	23c2      	movs	r3, #194	; 0xc2
 80067c4:	33ff      	adds	r3, #255	; 0xff
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d00b      	beq.n	80067e2 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	68d9      	ldr	r1, [r3, #12]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80067d8:	431a      	orrs	r2, r3
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	430a      	orrs	r2, r1
 80067e0:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2221      	movs	r2, #33	; 0x21
 80067e6:	5c9b      	ldrb	r3, [r3, r2]
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d11a      	bne.n	8006822 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2220      	movs	r2, #32
 80067f0:	5c9b      	ldrb	r3, [r3, r2]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d109      	bne.n	800680a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	68da      	ldr	r2, [r3, #12]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2180      	movs	r1, #128	; 0x80
 8006802:	0249      	lsls	r1, r1, #9
 8006804:	430a      	orrs	r2, r1
 8006806:	60da      	str	r2, [r3, #12]
 8006808:	e00b      	b.n	8006822 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800680e:	2220      	movs	r2, #32
 8006810:	431a      	orrs	r2, r3
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800681a:	2201      	movs	r2, #1
 800681c:	431a      	orrs	r2, r3
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006826:	2b01      	cmp	r3, #1
 8006828:	d11f      	bne.n	800686a <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	691a      	ldr	r2, [r3, #16]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	492a      	ldr	r1, [pc, #168]	; (80068e0 <HAL_ADC_Init+0x2e4>)
 8006836:	400a      	ands	r2, r1
 8006838:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	6919      	ldr	r1, [r3, #16]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8006848:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 800684e:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	430a      	orrs	r2, r1
 8006856:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	691a      	ldr	r2, [r3, #16]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	2101      	movs	r1, #1
 8006864:	430a      	orrs	r2, r1
 8006866:	611a      	str	r2, [r3, #16]
 8006868:	e00e      	b.n	8006888 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	2201      	movs	r2, #1
 8006872:	4013      	ands	r3, r2
 8006874:	2b01      	cmp	r3, #1
 8006876:	d107      	bne.n	8006888 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	691a      	ldr	r2, [r3, #16]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	2101      	movs	r1, #1
 8006884:	438a      	bics	r2, r1
 8006886:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	695a      	ldr	r2, [r3, #20]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2107      	movs	r1, #7
 8006894:	438a      	bics	r2, r1
 8006896:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	6959      	ldr	r1, [r3, #20]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	430a      	orrs	r2, r1
 80068a8:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068b4:	2203      	movs	r2, #3
 80068b6:	4393      	bics	r3, r2
 80068b8:	2201      	movs	r2, #1
 80068ba:	431a      	orrs	r2, r3
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	0018      	movs	r0, r3
 80068c4:	46bd      	mov	sp, r7
 80068c6:	b002      	add	sp, #8
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	46c0      	nop			; (mov r8, r8)
 80068cc:	fffffefd 	.word	0xfffffefd
 80068d0:	40012708 	.word	0x40012708
 80068d4:	ffc3ffff 	.word	0xffc3ffff
 80068d8:	fdffffff 	.word	0xfdffffff
 80068dc:	fffe0219 	.word	0xfffe0219
 80068e0:	fffffc03 	.word	0xfffffc03

080068e4 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 80068e4:	b5b0      	push	{r4, r5, r7, lr}
 80068e6:	b084      	sub	sp, #16
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80068ec:	230f      	movs	r3, #15
 80068ee:	18fb      	adds	r3, r7, r3
 80068f0:	2200      	movs	r2, #0
 80068f2:	701a      	strb	r2, [r3, #0]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d101      	bne.n	80068fe <HAL_ADC_DeInit+0x1a>
  {
    return HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	e07d      	b.n	80069fa <HAL_ADC_DeInit+0x116>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006902:	2202      	movs	r2, #2
 8006904:	431a      	orrs	r2, r3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800690a:	250f      	movs	r5, #15
 800690c:	197c      	adds	r4, r7, r5
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	0018      	movs	r0, r3
 8006912:	f000 faff 	bl	8006f14 <ADC_ConversionStop>
 8006916:	0003      	movs	r3, r0
 8006918:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800691a:	197b      	adds	r3, r7, r5
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d10d      	bne.n	800693e <HAL_ADC_DeInit+0x5a>
  {   
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8006922:	197c      	adds	r4, r7, r5
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	0018      	movs	r0, r3
 8006928:	f000 fa94 	bl	8006e54 <ADC_Disable>
 800692c:	0003      	movs	r3, r0
 800692e:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status != HAL_ERROR)
 8006930:	197b      	adds	r3, r7, r5
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	2b01      	cmp	r3, #1
 8006936:	d002      	beq.n	800693e <HAL_ADC_DeInit+0x5a>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2201      	movs	r2, #1
 800693c:	655a      	str	r2, [r3, #84]	; 0x54
  }
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (tmp_hal_status != HAL_ERROR)
 800693e:	230f      	movs	r3, #15
 8006940:	18fb      	adds	r3, r7, r3
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	2b01      	cmp	r3, #1
 8006946:	d051      	beq.n	80069ec <HAL_ADC_DeInit+0x108>
  {
    
    /* ========== Reset ADC registers ========== */
    /* Reset register IER */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	685a      	ldr	r2, [r3, #4]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	492c      	ldr	r1, [pc, #176]	; (8006a04 <HAL_ADC_DeInit+0x120>)
 8006954:	400a      	ands	r2, r1
 8006956:	605a      	str	r2, [r3, #4]
                                ADC_IT_EOC | ADC_IT_RDY | ADC_IT_EOSMP ));
  
        
    /* Reset register ISR */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a2a      	ldr	r2, [pc, #168]	; (8006a08 <HAL_ADC_DeInit+0x124>)
 800695e:	601a      	str	r2, [r3, #0]
    
    /* Reset register CR */
    /* Disable voltage regulator */
    /* Note: Regulator disable useful for power saving */
    /* Reset ADVREGEN bit */
    hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	689a      	ldr	r2, [r3, #8]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4928      	ldr	r1, [pc, #160]	; (8006a0c <HAL_ADC_DeInit+0x128>)
 800696c:	400a      	ands	r2, r1
 800696e:	609a      	str	r2, [r3, #8]
    
    /* Bits ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode "read-set": no direct reset applicable */
    /* No action */
    
    /* Reset register CFGR1 */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWDCH  | ADC_CFGR1_AWDEN  | ADC_CFGR1_AWDSGL | \
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	68da      	ldr	r2, [r3, #12]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4925      	ldr	r1, [pc, #148]	; (8006a10 <HAL_ADC_DeInit+0x12c>)
 800697c:	400a      	ands	r2, r1
 800697e:	60da      	str	r2, [r3, #12]
                               ADC_CFGR1_CONT   | ADC_CFGR1_OVRMOD | ADC_CFGR1_EXTEN  | \
                               ADC_CFGR1_EXTSEL | ADC_CFGR1_ALIGN  | ADC_CFGR1_RES    | \
                               ADC_CFGR1_SCANDIR| ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);
  
    /* Reset register CFGR2 */
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	691a      	ldr	r2, [r3, #16]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4922      	ldr	r1, [pc, #136]	; (8006a14 <HAL_ADC_DeInit+0x130>)
 800698c:	400a      	ands	r2, r1
 800698e:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSE  | ADC_CFGR2_CKMODE );
  
    
    /* Reset register SMPR */
    hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	695a      	ldr	r2, [r3, #20]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2107      	movs	r1, #7
 800699c:	438a      	bics	r2, r1
 800699e:	615a      	str	r2, [r3, #20]
    
    /* Reset register TR */
    hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	6a1a      	ldr	r2, [r3, #32]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	491b      	ldr	r1, [pc, #108]	; (8006a18 <HAL_ADC_DeInit+0x134>)
 80069ac:	400a      	ands	r2, r1
 80069ae:	621a      	str	r2, [r3, #32]
    
    /* Reset register CALFACT */
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	22b4      	movs	r2, #180	; 0xb4
 80069b6:	589a      	ldr	r2, [r3, r2]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	217f      	movs	r1, #127	; 0x7f
 80069be:	438a      	bics	r2, r1
 80069c0:	21b4      	movs	r1, #180	; 0xb4
 80069c2:	505a      	str	r2, [r3, r1]
    
    /* Reset register DR */
    /* bits in access mode read only, no direct reset applicable*/
  
    /* Reset register CALFACT */
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	22b4      	movs	r2, #180	; 0xb4
 80069ca:	589a      	ldr	r2, [r3, r2]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	217f      	movs	r1, #127	; 0x7f
 80069d2:	438a      	bics	r2, r1
 80069d4:	21b4      	movs	r1, #180	; 0xb4
 80069d6:	505a      	str	r2, [r3, r1]
    
    /* DeInit the low level hardware */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware */
    HAL_ADC_MspDeInit(hadc);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	0018      	movs	r0, r3
 80069dc:	f7fc ff80 	bl	80038e0 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	655a      	str	r2, [r3, #84]	; 0x54
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2250      	movs	r2, #80	; 0x50
 80069f0:	2100      	movs	r1, #0
 80069f2:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80069f4:	230f      	movs	r3, #15
 80069f6:	18fb      	adds	r3, r7, r3
 80069f8:	781b      	ldrb	r3, [r3, #0]
}
 80069fa:	0018      	movs	r0, r3
 80069fc:	46bd      	mov	sp, r7
 80069fe:	b004      	add	sp, #16
 8006a00:	bdb0      	pop	{r4, r5, r7, pc}
 8006a02:	46c0      	nop			; (mov r8, r8)
 8006a04:	fffff760 	.word	0xfffff760
 8006a08:	0000089f 	.word	0x0000089f
 8006a0c:	efffffff 	.word	0xefffffff
 8006a10:	833e0200 	.word	0x833e0200
 8006a14:	3ffffc02 	.word	0x3ffffc02
 8006a18:	f000f000 	.word	0xf000f000

08006a1c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8006a1c:	b590      	push	{r4, r7, lr}
 8006a1e:	b085      	sub	sp, #20
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006a24:	230f      	movs	r3, #15
 8006a26:	18fb      	adds	r3, r7, r3
 8006a28:	2200      	movs	r2, #0
 8006a2a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	2204      	movs	r2, #4
 8006a34:	4013      	ands	r3, r2
 8006a36:	d138      	bne.n	8006aaa <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2250      	movs	r2, #80	; 0x50
 8006a3c:	5c9b      	ldrb	r3, [r3, r2]
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d101      	bne.n	8006a46 <HAL_ADC_Start+0x2a>
 8006a42:	2302      	movs	r3, #2
 8006a44:	e038      	b.n	8006ab8 <HAL_ADC_Start+0x9c>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2250      	movs	r2, #80	; 0x50
 8006a4a:	2101      	movs	r1, #1
 8006a4c:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	69db      	ldr	r3, [r3, #28]
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d007      	beq.n	8006a66 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8006a56:	230f      	movs	r3, #15
 8006a58:	18fc      	adds	r4, r7, r3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	0018      	movs	r0, r3
 8006a5e:	f000 f999 	bl	8006d94 <ADC_Enable>
 8006a62:	0003      	movs	r3, r0
 8006a64:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006a66:	230f      	movs	r3, #15
 8006a68:	18fb      	adds	r3, r7, r3
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d120      	bne.n	8006ab2 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a74:	4a12      	ldr	r2, [pc, #72]	; (8006ac0 <HAL_ADC_Start+0xa4>)
 8006a76:	4013      	ands	r3, r2
 8006a78:	2280      	movs	r2, #128	; 0x80
 8006a7a:	0052      	lsls	r2, r2, #1
 8006a7c:	431a      	orrs	r2, r3
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2250      	movs	r2, #80	; 0x50
 8006a8c:	2100      	movs	r1, #0
 8006a8e:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	221c      	movs	r2, #28
 8006a96:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	689a      	ldr	r2, [r3, #8]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	2104      	movs	r1, #4
 8006aa4:	430a      	orrs	r2, r1
 8006aa6:	609a      	str	r2, [r3, #8]
 8006aa8:	e003      	b.n	8006ab2 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006aaa:	230f      	movs	r3, #15
 8006aac:	18fb      	adds	r3, r7, r3
 8006aae:	2202      	movs	r2, #2
 8006ab0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8006ab2:	230f      	movs	r3, #15
 8006ab4:	18fb      	adds	r3, r7, r3
 8006ab6:	781b      	ldrb	r3, [r3, #0]
}
 8006ab8:	0018      	movs	r0, r3
 8006aba:	46bd      	mov	sp, r7
 8006abc:	b005      	add	sp, #20
 8006abe:	bd90      	pop	{r4, r7, pc}
 8006ac0:	fffff0fe 	.word	0xfffff0fe

08006ac4 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8006ac4:	b5b0      	push	{r4, r5, r7, lr}
 8006ac6:	b084      	sub	sp, #16
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006acc:	230f      	movs	r3, #15
 8006ace:	18fb      	adds	r3, r7, r3
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2250      	movs	r2, #80	; 0x50
 8006ad8:	5c9b      	ldrb	r3, [r3, r2]
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d101      	bne.n	8006ae2 <HAL_ADC_Stop+0x1e>
 8006ade:	2302      	movs	r3, #2
 8006ae0:	e029      	b.n	8006b36 <HAL_ADC_Stop+0x72>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2250      	movs	r2, #80	; 0x50
 8006ae6:	2101      	movs	r1, #1
 8006ae8:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8006aea:	250f      	movs	r5, #15
 8006aec:	197c      	adds	r4, r7, r5
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	0018      	movs	r0, r3
 8006af2:	f000 fa0f 	bl	8006f14 <ADC_ConversionStop>
 8006af6:	0003      	movs	r3, r0
 8006af8:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8006afa:	197b      	adds	r3, r7, r5
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d112      	bne.n	8006b28 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8006b02:	197c      	adds	r4, r7, r5
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	0018      	movs	r0, r3
 8006b08:	f000 f9a4 	bl	8006e54 <ADC_Disable>
 8006b0c:	0003      	movs	r3, r0
 8006b0e:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8006b10:	197b      	adds	r3, r7, r5
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d107      	bne.n	8006b28 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b1c:	4a08      	ldr	r2, [pc, #32]	; (8006b40 <HAL_ADC_Stop+0x7c>)
 8006b1e:	4013      	ands	r3, r2
 8006b20:	2201      	movs	r2, #1
 8006b22:	431a      	orrs	r2, r3
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2250      	movs	r2, #80	; 0x50
 8006b2c:	2100      	movs	r1, #0
 8006b2e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8006b30:	230f      	movs	r3, #15
 8006b32:	18fb      	adds	r3, r7, r3
 8006b34:	781b      	ldrb	r3, [r3, #0]
}
 8006b36:	0018      	movs	r0, r3
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	b004      	add	sp, #16
 8006b3c:	bdb0      	pop	{r4, r5, r7, pc}
 8006b3e:	46c0      	nop			; (mov r8, r8)
 8006b40:	fffffefe 	.word	0xfffffefe

08006b44 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8006b52:	2300      	movs	r3, #0
 8006b54:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	695b      	ldr	r3, [r3, #20]
 8006b5a:	2b08      	cmp	r3, #8
 8006b5c:	d102      	bne.n	8006b64 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8006b5e:	2308      	movs	r3, #8
 8006b60:	60fb      	str	r3, [r7, #12]
 8006b62:	e014      	b.n	8006b8e <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	4013      	ands	r3, r2
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d10b      	bne.n	8006b8a <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b76:	2220      	movs	r2, #32
 8006b78:	431a      	orrs	r2, r3
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2250      	movs	r2, #80	; 0x50
 8006b82:	2100      	movs	r1, #0
 8006b84:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	e06c      	b.n	8006c64 <HAL_ADC_PollForConversion+0x120>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8006b8a:	230c      	movs	r3, #12
 8006b8c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8006b8e:	f7fe fae0 	bl	8005152 <HAL_GetTick>
 8006b92:	0003      	movs	r3, r0
 8006b94:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8006b96:	e019      	b.n	8006bcc <HAL_ADC_PollForConversion+0x88>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	d016      	beq.n	8006bcc <HAL_ADC_PollForConversion+0x88>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d007      	beq.n	8006bb4 <HAL_ADC_PollForConversion+0x70>
 8006ba4:	f7fe fad5 	bl	8005152 <HAL_GetTick>
 8006ba8:	0002      	movs	r2, r0
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	1ad3      	subs	r3, r2, r3
 8006bae:	683a      	ldr	r2, [r7, #0]
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d20b      	bcs.n	8006bcc <HAL_ADC_PollForConversion+0x88>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bb8:	2204      	movs	r2, #4
 8006bba:	431a      	orrs	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2250      	movs	r2, #80	; 0x50
 8006bc4:	2100      	movs	r1, #0
 8006bc6:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 8006bc8:	2303      	movs	r3, #3
 8006bca:	e04b      	b.n	8006c64 <HAL_ADC_PollForConversion+0x120>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	68fa      	ldr	r2, [r7, #12]
 8006bd4:	4013      	ands	r3, r2
 8006bd6:	d0df      	beq.n	8006b98 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bdc:	2280      	movs	r2, #128	; 0x80
 8006bde:	0092      	lsls	r2, r2, #2
 8006be0:	431a      	orrs	r2, r3
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	68da      	ldr	r2, [r3, #12]
 8006bec:	23c0      	movs	r3, #192	; 0xc0
 8006bee:	011b      	lsls	r3, r3, #4
 8006bf0:	4013      	ands	r3, r2
 8006bf2:	d12e      	bne.n	8006c52 <HAL_ADC_PollForConversion+0x10e>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2220      	movs	r2, #32
 8006bf8:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d129      	bne.n	8006c52 <HAL_ADC_PollForConversion+0x10e>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	2208      	movs	r2, #8
 8006c06:	4013      	ands	r3, r2
 8006c08:	2b08      	cmp	r3, #8
 8006c0a:	d122      	bne.n	8006c52 <HAL_ADC_PollForConversion+0x10e>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	2204      	movs	r2, #4
 8006c14:	4013      	ands	r3, r2
 8006c16:	d110      	bne.n	8006c3a <HAL_ADC_PollForConversion+0xf6>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	685a      	ldr	r2, [r3, #4]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	210c      	movs	r1, #12
 8006c24:	438a      	bics	r2, r1
 8006c26:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c2c:	4a0f      	ldr	r2, [pc, #60]	; (8006c6c <HAL_ADC_PollForConversion+0x128>)
 8006c2e:	4013      	ands	r3, r2
 8006c30:	2201      	movs	r2, #1
 8006c32:	431a      	orrs	r2, r3
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	655a      	str	r2, [r3, #84]	; 0x54
 8006c38:	e00b      	b.n	8006c52 <HAL_ADC_PollForConversion+0x10e>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c3e:	2220      	movs	r2, #32
 8006c40:	431a      	orrs	r2, r3
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	431a      	orrs	r2, r3
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	699b      	ldr	r3, [r3, #24]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d103      	bne.n	8006c62 <HAL_ADC_PollForConversion+0x11e>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	220c      	movs	r2, #12
 8006c60:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 8006c62:	2300      	movs	r3, #0
}
 8006c64:	0018      	movs	r0, r3
 8006c66:	46bd      	mov	sp, r7
 8006c68:	b004      	add	sp, #16
 8006c6a:	bd80      	pop	{r7, pc}
 8006c6c:	fffffefe 	.word	0xfffffefe

08006c70 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b082      	sub	sp, #8
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8006c7e:	0018      	movs	r0, r3
 8006c80:	46bd      	mov	sp, r7
 8006c82:	b002      	add	sp, #8
 8006c84:	bd80      	pop	{r7, pc}
	...

08006c88 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b082      	sub	sp, #8
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2250      	movs	r2, #80	; 0x50
 8006c96:	5c9b      	ldrb	r3, [r3, r2]
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d101      	bne.n	8006ca0 <HAL_ADC_ConfigChannel+0x18>
 8006c9c:	2302      	movs	r3, #2
 8006c9e:	e06c      	b.n	8006d7a <HAL_ADC_ConfigChannel+0xf2>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2250      	movs	r2, #80	; 0x50
 8006ca4:	2101      	movs	r1, #1
 8006ca6:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	2204      	movs	r2, #4
 8006cb0:	4013      	ands	r3, r2
 8006cb2:	d00b      	beq.n	8006ccc <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cb8:	2220      	movs	r2, #32
 8006cba:	431a      	orrs	r2, r3
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2250      	movs	r2, #80	; 0x50
 8006cc4:	2100      	movs	r1, #0
 8006cc6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	e056      	b.n	8006d7a <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	4a2c      	ldr	r2, [pc, #176]	; (8006d84 <HAL_ADC_ConfigChannel+0xfc>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d028      	beq.n	8006d28 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	035b      	lsls	r3, r3, #13
 8006ce2:	0b5a      	lsrs	r2, r3, #13
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	430a      	orrs	r2, r1
 8006cea:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	2380      	movs	r3, #128	; 0x80
 8006cf2:	02db      	lsls	r3, r3, #11
 8006cf4:	4013      	ands	r3, r2
 8006cf6:	d009      	beq.n	8006d0c <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8006cf8:	4b23      	ldr	r3, [pc, #140]	; (8006d88 <HAL_ADC_ConfigChannel+0x100>)
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	4b22      	ldr	r3, [pc, #136]	; (8006d88 <HAL_ADC_ConfigChannel+0x100>)
 8006cfe:	2180      	movs	r1, #128	; 0x80
 8006d00:	0409      	lsls	r1, r1, #16
 8006d02:	430a      	orrs	r2, r1
 8006d04:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8006d06:	200a      	movs	r0, #10
 8006d08:	f000 f94a 	bl	8006fa0 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	2380      	movs	r3, #128	; 0x80
 8006d12:	029b      	lsls	r3, r3, #10
 8006d14:	4013      	ands	r3, r2
 8006d16:	d02b      	beq.n	8006d70 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8006d18:	4b1b      	ldr	r3, [pc, #108]	; (8006d88 <HAL_ADC_ConfigChannel+0x100>)
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	4b1a      	ldr	r3, [pc, #104]	; (8006d88 <HAL_ADC_ConfigChannel+0x100>)
 8006d1e:	2180      	movs	r1, #128	; 0x80
 8006d20:	03c9      	lsls	r1, r1, #15
 8006d22:	430a      	orrs	r2, r1
 8006d24:	601a      	str	r2, [r3, #0]
 8006d26:	e023      	b.n	8006d70 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	035b      	lsls	r3, r3, #13
 8006d34:	0b5b      	lsrs	r3, r3, #13
 8006d36:	43d9      	mvns	r1, r3
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	400a      	ands	r2, r1
 8006d3e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	2380      	movs	r3, #128	; 0x80
 8006d46:	02db      	lsls	r3, r3, #11
 8006d48:	4013      	ands	r3, r2
 8006d4a:	d005      	beq.n	8006d58 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8006d4c:	4b0e      	ldr	r3, [pc, #56]	; (8006d88 <HAL_ADC_ConfigChannel+0x100>)
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	4b0d      	ldr	r3, [pc, #52]	; (8006d88 <HAL_ADC_ConfigChannel+0x100>)
 8006d52:	490e      	ldr	r1, [pc, #56]	; (8006d8c <HAL_ADC_ConfigChannel+0x104>)
 8006d54:	400a      	ands	r2, r1
 8006d56:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	2380      	movs	r3, #128	; 0x80
 8006d5e:	029b      	lsls	r3, r3, #10
 8006d60:	4013      	ands	r3, r2
 8006d62:	d005      	beq.n	8006d70 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8006d64:	4b08      	ldr	r3, [pc, #32]	; (8006d88 <HAL_ADC_ConfigChannel+0x100>)
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	4b07      	ldr	r3, [pc, #28]	; (8006d88 <HAL_ADC_ConfigChannel+0x100>)
 8006d6a:	4909      	ldr	r1, [pc, #36]	; (8006d90 <HAL_ADC_ConfigChannel+0x108>)
 8006d6c:	400a      	ands	r2, r1
 8006d6e:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2250      	movs	r2, #80	; 0x50
 8006d74:	2100      	movs	r1, #0
 8006d76:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	0018      	movs	r0, r3
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	b002      	add	sp, #8
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	46c0      	nop			; (mov r8, r8)
 8006d84:	00001001 	.word	0x00001001
 8006d88:	40012708 	.word	0x40012708
 8006d8c:	ff7fffff 	.word	0xff7fffff
 8006d90:	ffbfffff 	.word	0xffbfffff

08006d94 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b084      	sub	sp, #16
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	2203      	movs	r2, #3
 8006da8:	4013      	ands	r3, r2
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d108      	bne.n	8006dc0 <ADC_Enable+0x2c>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	2201      	movs	r2, #1
 8006db6:	4013      	ands	r3, r2
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d101      	bne.n	8006dc0 <ADC_Enable+0x2c>
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e000      	b.n	8006dc2 <ADC_Enable+0x2e>
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d13f      	bne.n	8006e46 <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	4a20      	ldr	r2, [pc, #128]	; (8006e50 <ADC_Enable+0xbc>)
 8006dce:	4013      	ands	r3, r2
 8006dd0:	d00d      	beq.n	8006dee <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dd6:	2210      	movs	r2, #16
 8006dd8:	431a      	orrs	r2, r3
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006de2:	2201      	movs	r2, #1
 8006de4:	431a      	orrs	r2, r3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	e02c      	b.n	8006e48 <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	689a      	ldr	r2, [r3, #8]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2101      	movs	r1, #1
 8006dfa:	430a      	orrs	r2, r1
 8006dfc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8006dfe:	2001      	movs	r0, #1
 8006e00:	f000 f8ce 	bl	8006fa0 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8006e04:	f7fe f9a5 	bl	8005152 <HAL_GetTick>
 8006e08:	0003      	movs	r3, r0
 8006e0a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006e0c:	e014      	b.n	8006e38 <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006e0e:	f7fe f9a0 	bl	8005152 <HAL_GetTick>
 8006e12:	0002      	movs	r2, r0
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	1ad3      	subs	r3, r2, r3
 8006e18:	2b0a      	cmp	r3, #10
 8006e1a:	d90d      	bls.n	8006e38 <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e20:	2210      	movs	r2, #16
 8006e22:	431a      	orrs	r2, r3
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	431a      	orrs	r2, r3
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8006e34:	2301      	movs	r3, #1
 8006e36:	e007      	b.n	8006e48 <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	4013      	ands	r3, r2
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d1e3      	bne.n	8006e0e <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8006e46:	2300      	movs	r3, #0
}
 8006e48:	0018      	movs	r0, r3
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	b004      	add	sp, #16
 8006e4e:	bd80      	pop	{r7, pc}
 8006e50:	80000017 	.word	0x80000017

08006e54 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	2203      	movs	r2, #3
 8006e68:	4013      	ands	r3, r2
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d108      	bne.n	8006e80 <ADC_Disable+0x2c>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	2201      	movs	r2, #1
 8006e76:	4013      	ands	r3, r2
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d101      	bne.n	8006e80 <ADC_Disable+0x2c>
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e000      	b.n	8006e82 <ADC_Disable+0x2e>
 8006e80:	2300      	movs	r3, #0
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d041      	beq.n	8006f0a <ADC_Disable+0xb6>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	2205      	movs	r2, #5
 8006e8e:	4013      	ands	r3, r2
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d110      	bne.n	8006eb6 <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	689a      	ldr	r2, [r3, #8]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	2102      	movs	r1, #2
 8006ea0:	430a      	orrs	r2, r1
 8006ea2:	609a      	str	r2, [r3, #8]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2203      	movs	r2, #3
 8006eaa:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006eac:	f7fe f951 	bl	8005152 <HAL_GetTick>
 8006eb0:	0003      	movs	r3, r0
 8006eb2:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8006eb4:	e022      	b.n	8006efc <ADC_Disable+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eba:	2210      	movs	r2, #16
 8006ebc:	431a      	orrs	r2, r3
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	431a      	orrs	r2, r3
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e01c      	b.n	8006f0c <ADC_Disable+0xb8>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006ed2:	f7fe f93e 	bl	8005152 <HAL_GetTick>
 8006ed6:	0002      	movs	r2, r0
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	1ad3      	subs	r3, r2, r3
 8006edc:	2b0a      	cmp	r3, #10
 8006ede:	d90d      	bls.n	8006efc <ADC_Disable+0xa8>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ee4:	2210      	movs	r2, #16
 8006ee6:	431a      	orrs	r2, r3
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	431a      	orrs	r2, r3
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	e007      	b.n	8006f0c <ADC_Disable+0xb8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	2201      	movs	r2, #1
 8006f04:	4013      	ands	r3, r2
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d0e3      	beq.n	8006ed2 <ADC_Disable+0x7e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8006f0a:	2300      	movs	r3, #0
}
 8006f0c:	0018      	movs	r0, r3
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	b004      	add	sp, #16
 8006f12:	bd80      	pop	{r7, pc}

08006f14 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b084      	sub	sp, #16
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	2204      	movs	r2, #4
 8006f28:	4013      	ands	r3, r2
 8006f2a:	d034      	beq.n	8006f96 <ADC_ConversionStop+0x82>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	2204      	movs	r2, #4
 8006f34:	4013      	ands	r3, r2
 8006f36:	2b04      	cmp	r3, #4
 8006f38:	d10d      	bne.n	8006f56 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	2202      	movs	r2, #2
 8006f42:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8006f44:	d107      	bne.n	8006f56 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	689a      	ldr	r2, [r3, #8]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2110      	movs	r1, #16
 8006f52:	430a      	orrs	r2, r1
 8006f54:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006f56:	f7fe f8fc 	bl	8005152 <HAL_GetTick>
 8006f5a:	0003      	movs	r3, r0
 8006f5c:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8006f5e:	e014      	b.n	8006f8a <ADC_ConversionStop+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8006f60:	f7fe f8f7 	bl	8005152 <HAL_GetTick>
 8006f64:	0002      	movs	r2, r0
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	1ad3      	subs	r3, r2, r3
 8006f6a:	2b0a      	cmp	r3, #10
 8006f6c:	d90d      	bls.n	8006f8a <ADC_ConversionStop+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f72:	2210      	movs	r2, #16
 8006f74:	431a      	orrs	r2, r3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	655a      	str	r2, [r3, #84]	; 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f7e:	2201      	movs	r2, #1
 8006f80:	431a      	orrs	r2, r3
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	e006      	b.n	8006f98 <ADC_ConversionStop+0x84>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	2204      	movs	r2, #4
 8006f92:	4013      	ands	r3, r2
 8006f94:	d1e4      	bne.n	8006f60 <ADC_ConversionStop+0x4c>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8006f96:	2300      	movs	r3, #0
}
 8006f98:	0018      	movs	r0, r3
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	b004      	add	sp, #16
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b084      	sub	sp, #16
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8006fa8:	4b0b      	ldr	r3, [pc, #44]	; (8006fd8 <ADC_DelayMicroSecond+0x38>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	490b      	ldr	r1, [pc, #44]	; (8006fdc <ADC_DelayMicroSecond+0x3c>)
 8006fae:	0018      	movs	r0, r3
 8006fb0:	f7f9 f8bc 	bl	800012c <__udivsi3>
 8006fb4:	0003      	movs	r3, r0
 8006fb6:	001a      	movs	r2, r3
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	4353      	muls	r3, r2
 8006fbc:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8006fbe:	e002      	b.n	8006fc6 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	3b01      	subs	r3, #1
 8006fc4:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d1f9      	bne.n	8006fc0 <ADC_DelayMicroSecond+0x20>
  } 
}
 8006fcc:	46c0      	nop			; (mov r8, r8)
 8006fce:	46c0      	nop			; (mov r8, r8)
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	b004      	add	sp, #16
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	46c0      	nop			; (mov r8, r8)
 8006fd8:	20000070 	.word	0x20000070
 8006fdc:	000f4240 	.word	0x000f4240

08006fe0 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b086      	sub	sp, #24
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006fea:	2317      	movs	r3, #23
 8006fec:	18fb      	adds	r3, r7, r3
 8006fee:	2200      	movs	r2, #0
 8006ff0:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2250      	movs	r2, #80	; 0x50
 8006ffe:	5c9b      	ldrb	r3, [r3, r2]
 8007000:	2b01      	cmp	r3, #1
 8007002:	d101      	bne.n	8007008 <HAL_ADCEx_Calibration_Start+0x28>
 8007004:	2302      	movs	r3, #2
 8007006:	e07a      	b.n	80070fe <HAL_ADCEx_Calibration_Start+0x11e>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2250      	movs	r2, #80	; 0x50
 800700c:	2101      	movs	r1, #1
 800700e:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	2203      	movs	r2, #3
 8007018:	4013      	ands	r3, r2
 800701a:	2b01      	cmp	r3, #1
 800701c:	d108      	bne.n	8007030 <HAL_ADCEx_Calibration_Start+0x50>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	2201      	movs	r2, #1
 8007026:	4013      	ands	r3, r2
 8007028:	2b01      	cmp	r3, #1
 800702a:	d101      	bne.n	8007030 <HAL_ADCEx_Calibration_Start+0x50>
 800702c:	2301      	movs	r3, #1
 800702e:	e000      	b.n	8007032 <HAL_ADCEx_Calibration_Start+0x52>
 8007030:	2300      	movs	r3, #0
 8007032:	2b00      	cmp	r3, #0
 8007034:	d152      	bne.n	80070dc <HAL_ADCEx_Calibration_Start+0xfc>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800703a:	4a33      	ldr	r2, [pc, #204]	; (8007108 <HAL_ADCEx_Calibration_Start+0x128>)
 800703c:	4013      	ands	r3, r2
 800703e:	2202      	movs	r2, #2
 8007040:	431a      	orrs	r2, r3
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	2203      	movs	r2, #3
 800704e:	4013      	ands	r3, r2
 8007050:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	68da      	ldr	r2, [r3, #12]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	2103      	movs	r1, #3
 800705e:	438a      	bics	r2, r1
 8007060:	60da      	str	r2, [r3, #12]
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	689a      	ldr	r2, [r3, #8]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	2180      	movs	r1, #128	; 0x80
 800706e:	0609      	lsls	r1, r1, #24
 8007070:	430a      	orrs	r2, r1
 8007072:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8007074:	f7fe f86d 	bl	8005152 <HAL_GetTick>
 8007078:	0003      	movs	r3, r0
 800707a:	613b      	str	r3, [r7, #16]
    
    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800707c:	e014      	b.n	80070a8 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800707e:	f7fe f868 	bl	8005152 <HAL_GetTick>
 8007082:	0002      	movs	r2, r0
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	1ad3      	subs	r3, r2, r3
 8007088:	2b0a      	cmp	r3, #10
 800708a:	d90d      	bls.n	80070a8 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007090:	2212      	movs	r2, #18
 8007092:	4393      	bics	r3, r2
 8007094:	2210      	movs	r2, #16
 8007096:	431a      	orrs	r2, r3
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2250      	movs	r2, #80	; 0x50
 80070a0:	2100      	movs	r1, #0
 80070a2:	5499      	strb	r1, [r3, r2]
        
        return HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	e02a      	b.n	80070fe <HAL_ADCEx_Calibration_Start+0x11e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	0fdb      	lsrs	r3, r3, #31
 80070b0:	07da      	lsls	r2, r3, #31
 80070b2:	2380      	movs	r3, #128	; 0x80
 80070b4:	061b      	lsls	r3, r3, #24
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d0e1      	beq.n	800707e <HAL_ADCEx_Calibration_Start+0x9e>
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	68d9      	ldr	r1, [r3, #12]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	68fa      	ldr	r2, [r7, #12]
 80070c6:	430a      	orrs	r2, r1
 80070c8:	60da      	str	r2, [r3, #12]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070ce:	2203      	movs	r2, #3
 80070d0:	4393      	bics	r3, r2
 80070d2:	2201      	movs	r2, #1
 80070d4:	431a      	orrs	r2, r3
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	655a      	str	r2, [r3, #84]	; 0x54
 80070da:	e009      	b.n	80070f0 <HAL_ADCEx_Calibration_Start+0x110>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070e0:	2220      	movs	r2, #32
 80070e2:	431a      	orrs	r2, r3
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 80070e8:	2317      	movs	r3, #23
 80070ea:	18fb      	adds	r3, r7, r3
 80070ec:	2201      	movs	r2, #1
 80070ee:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2250      	movs	r2, #80	; 0x50
 80070f4:	2100      	movs	r1, #0
 80070f6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80070f8:	2317      	movs	r3, #23
 80070fa:	18fb      	adds	r3, r7, r3
 80070fc:	781b      	ldrb	r3, [r3, #0]
}
 80070fe:	0018      	movs	r0, r3
 8007100:	46bd      	mov	sp, r7
 8007102:	b006      	add	sp, #24
 8007104:	bd80      	pop	{r7, pc}
 8007106:	46c0      	nop			; (mov r8, r8)
 8007108:	fffffefd 	.word	0xfffffefd

0800710c <__NVIC_EnableIRQ>:
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b082      	sub	sp, #8
 8007110:	af00      	add	r7, sp, #0
 8007112:	0002      	movs	r2, r0
 8007114:	1dfb      	adds	r3, r7, #7
 8007116:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007118:	1dfb      	adds	r3, r7, #7
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	2b7f      	cmp	r3, #127	; 0x7f
 800711e:	d809      	bhi.n	8007134 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007120:	1dfb      	adds	r3, r7, #7
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	001a      	movs	r2, r3
 8007126:	231f      	movs	r3, #31
 8007128:	401a      	ands	r2, r3
 800712a:	4b04      	ldr	r3, [pc, #16]	; (800713c <__NVIC_EnableIRQ+0x30>)
 800712c:	2101      	movs	r1, #1
 800712e:	4091      	lsls	r1, r2
 8007130:	000a      	movs	r2, r1
 8007132:	601a      	str	r2, [r3, #0]
}
 8007134:	46c0      	nop			; (mov r8, r8)
 8007136:	46bd      	mov	sp, r7
 8007138:	b002      	add	sp, #8
 800713a:	bd80      	pop	{r7, pc}
 800713c:	e000e100 	.word	0xe000e100

08007140 <__NVIC_DisableIRQ>:
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b082      	sub	sp, #8
 8007144:	af00      	add	r7, sp, #0
 8007146:	0002      	movs	r2, r0
 8007148:	1dfb      	adds	r3, r7, #7
 800714a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800714c:	1dfb      	adds	r3, r7, #7
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	2b7f      	cmp	r3, #127	; 0x7f
 8007152:	d810      	bhi.n	8007176 <__NVIC_DisableIRQ+0x36>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007154:	1dfb      	adds	r3, r7, #7
 8007156:	781b      	ldrb	r3, [r3, #0]
 8007158:	001a      	movs	r2, r3
 800715a:	231f      	movs	r3, #31
 800715c:	4013      	ands	r3, r2
 800715e:	4908      	ldr	r1, [pc, #32]	; (8007180 <__NVIC_DisableIRQ+0x40>)
 8007160:	2201      	movs	r2, #1
 8007162:	409a      	lsls	r2, r3
 8007164:	0013      	movs	r3, r2
 8007166:	2280      	movs	r2, #128	; 0x80
 8007168:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800716a:	f3bf 8f4f 	dsb	sy
}
 800716e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8007170:	f3bf 8f6f 	isb	sy
}
 8007174:	46c0      	nop			; (mov r8, r8)
}
 8007176:	46c0      	nop			; (mov r8, r8)
 8007178:	46bd      	mov	sp, r7
 800717a:	b002      	add	sp, #8
 800717c:	bd80      	pop	{r7, pc}
 800717e:	46c0      	nop			; (mov r8, r8)
 8007180:	e000e100 	.word	0xe000e100

08007184 <__NVIC_SetPriority>:
{
 8007184:	b590      	push	{r4, r7, lr}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	0002      	movs	r2, r0
 800718c:	6039      	str	r1, [r7, #0]
 800718e:	1dfb      	adds	r3, r7, #7
 8007190:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007192:	1dfb      	adds	r3, r7, #7
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	2b7f      	cmp	r3, #127	; 0x7f
 8007198:	d828      	bhi.n	80071ec <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800719a:	4a2f      	ldr	r2, [pc, #188]	; (8007258 <__NVIC_SetPriority+0xd4>)
 800719c:	1dfb      	adds	r3, r7, #7
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	b25b      	sxtb	r3, r3
 80071a2:	089b      	lsrs	r3, r3, #2
 80071a4:	33c0      	adds	r3, #192	; 0xc0
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	589b      	ldr	r3, [r3, r2]
 80071aa:	1dfa      	adds	r2, r7, #7
 80071ac:	7812      	ldrb	r2, [r2, #0]
 80071ae:	0011      	movs	r1, r2
 80071b0:	2203      	movs	r2, #3
 80071b2:	400a      	ands	r2, r1
 80071b4:	00d2      	lsls	r2, r2, #3
 80071b6:	21ff      	movs	r1, #255	; 0xff
 80071b8:	4091      	lsls	r1, r2
 80071ba:	000a      	movs	r2, r1
 80071bc:	43d2      	mvns	r2, r2
 80071be:	401a      	ands	r2, r3
 80071c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	019b      	lsls	r3, r3, #6
 80071c6:	22ff      	movs	r2, #255	; 0xff
 80071c8:	401a      	ands	r2, r3
 80071ca:	1dfb      	adds	r3, r7, #7
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	0018      	movs	r0, r3
 80071d0:	2303      	movs	r3, #3
 80071d2:	4003      	ands	r3, r0
 80071d4:	00db      	lsls	r3, r3, #3
 80071d6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80071d8:	481f      	ldr	r0, [pc, #124]	; (8007258 <__NVIC_SetPriority+0xd4>)
 80071da:	1dfb      	adds	r3, r7, #7
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	b25b      	sxtb	r3, r3
 80071e0:	089b      	lsrs	r3, r3, #2
 80071e2:	430a      	orrs	r2, r1
 80071e4:	33c0      	adds	r3, #192	; 0xc0
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	501a      	str	r2, [r3, r0]
}
 80071ea:	e031      	b.n	8007250 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80071ec:	4a1b      	ldr	r2, [pc, #108]	; (800725c <__NVIC_SetPriority+0xd8>)
 80071ee:	1dfb      	adds	r3, r7, #7
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	0019      	movs	r1, r3
 80071f4:	230f      	movs	r3, #15
 80071f6:	400b      	ands	r3, r1
 80071f8:	3b08      	subs	r3, #8
 80071fa:	089b      	lsrs	r3, r3, #2
 80071fc:	3306      	adds	r3, #6
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	18d3      	adds	r3, r2, r3
 8007202:	3304      	adds	r3, #4
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	1dfa      	adds	r2, r7, #7
 8007208:	7812      	ldrb	r2, [r2, #0]
 800720a:	0011      	movs	r1, r2
 800720c:	2203      	movs	r2, #3
 800720e:	400a      	ands	r2, r1
 8007210:	00d2      	lsls	r2, r2, #3
 8007212:	21ff      	movs	r1, #255	; 0xff
 8007214:	4091      	lsls	r1, r2
 8007216:	000a      	movs	r2, r1
 8007218:	43d2      	mvns	r2, r2
 800721a:	401a      	ands	r2, r3
 800721c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	019b      	lsls	r3, r3, #6
 8007222:	22ff      	movs	r2, #255	; 0xff
 8007224:	401a      	ands	r2, r3
 8007226:	1dfb      	adds	r3, r7, #7
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	0018      	movs	r0, r3
 800722c:	2303      	movs	r3, #3
 800722e:	4003      	ands	r3, r0
 8007230:	00db      	lsls	r3, r3, #3
 8007232:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007234:	4809      	ldr	r0, [pc, #36]	; (800725c <__NVIC_SetPriority+0xd8>)
 8007236:	1dfb      	adds	r3, r7, #7
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	001c      	movs	r4, r3
 800723c:	230f      	movs	r3, #15
 800723e:	4023      	ands	r3, r4
 8007240:	3b08      	subs	r3, #8
 8007242:	089b      	lsrs	r3, r3, #2
 8007244:	430a      	orrs	r2, r1
 8007246:	3306      	adds	r3, #6
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	18c3      	adds	r3, r0, r3
 800724c:	3304      	adds	r3, #4
 800724e:	601a      	str	r2, [r3, #0]
}
 8007250:	46c0      	nop			; (mov r8, r8)
 8007252:	46bd      	mov	sp, r7
 8007254:	b003      	add	sp, #12
 8007256:	bd90      	pop	{r4, r7, pc}
 8007258:	e000e100 	.word	0xe000e100
 800725c:	e000ed00 	.word	0xe000ed00

08007260 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	60b9      	str	r1, [r7, #8]
 8007268:	607a      	str	r2, [r7, #4]
 800726a:	210f      	movs	r1, #15
 800726c:	187b      	adds	r3, r7, r1
 800726e:	1c02      	adds	r2, r0, #0
 8007270:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8007272:	68ba      	ldr	r2, [r7, #8]
 8007274:	187b      	adds	r3, r7, r1
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	b25b      	sxtb	r3, r3
 800727a:	0011      	movs	r1, r2
 800727c:	0018      	movs	r0, r3
 800727e:	f7ff ff81 	bl	8007184 <__NVIC_SetPriority>
}
 8007282:	46c0      	nop			; (mov r8, r8)
 8007284:	46bd      	mov	sp, r7
 8007286:	b004      	add	sp, #16
 8007288:	bd80      	pop	{r7, pc}

0800728a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800728a:	b580      	push	{r7, lr}
 800728c:	b082      	sub	sp, #8
 800728e:	af00      	add	r7, sp, #0
 8007290:	0002      	movs	r2, r0
 8007292:	1dfb      	adds	r3, r7, #7
 8007294:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007296:	1dfb      	adds	r3, r7, #7
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	b25b      	sxtb	r3, r3
 800729c:	0018      	movs	r0, r3
 800729e:	f7ff ff35 	bl	800710c <__NVIC_EnableIRQ>
}
 80072a2:	46c0      	nop			; (mov r8, r8)
 80072a4:	46bd      	mov	sp, r7
 80072a6:	b002      	add	sp, #8
 80072a8:	bd80      	pop	{r7, pc}

080072aa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80072aa:	b580      	push	{r7, lr}
 80072ac:	b082      	sub	sp, #8
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	0002      	movs	r2, r0
 80072b2:	1dfb      	adds	r3, r7, #7
 80072b4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80072b6:	1dfb      	adds	r3, r7, #7
 80072b8:	781b      	ldrb	r3, [r3, #0]
 80072ba:	b25b      	sxtb	r3, r3
 80072bc:	0018      	movs	r0, r3
 80072be:	f7ff ff3f 	bl	8007140 <__NVIC_DisableIRQ>
}
 80072c2:	46c0      	nop			; (mov r8, r8)
 80072c4:	46bd      	mov	sp, r7
 80072c6:	b002      	add	sp, #8
 80072c8:	bd80      	pop	{r7, pc}
	...

080072cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d101      	bne.n	80072de <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	e061      	b.n	80073a2 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a32      	ldr	r2, [pc, #200]	; (80073ac <HAL_DMA_Init+0xe0>)
 80072e4:	4694      	mov	ip, r2
 80072e6:	4463      	add	r3, ip
 80072e8:	2114      	movs	r1, #20
 80072ea:	0018      	movs	r0, r3
 80072ec:	f7f8 ff1e 	bl	800012c <__udivsi3>
 80072f0:	0003      	movs	r3, r0
 80072f2:	009a      	lsls	r2, r3, #2
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	4a2d      	ldr	r2, [pc, #180]	; (80073b0 <HAL_DMA_Init+0xe4>)
 80072fc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2225      	movs	r2, #37	; 0x25
 8007302:	2102      	movs	r1, #2
 8007304:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	4a28      	ldr	r2, [pc, #160]	; (80073b4 <HAL_DMA_Init+0xe8>)
 8007312:	4013      	ands	r3, r2
 8007314:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800731e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	691b      	ldr	r3, [r3, #16]
 8007324:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800732a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	699b      	ldr	r3, [r3, #24]
 8007330:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007336:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6a1b      	ldr	r3, [r3, #32]
 800733c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800733e:	68fa      	ldr	r2, [r7, #12]
 8007340:	4313      	orrs	r3, r2
 8007342:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	68fa      	ldr	r2, [r7, #12]
 800734a:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	689a      	ldr	r2, [r3, #8]
 8007350:	2380      	movs	r3, #128	; 0x80
 8007352:	01db      	lsls	r3, r3, #7
 8007354:	429a      	cmp	r2, r3
 8007356:	d018      	beq.n	800738a <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8007358:	4b17      	ldr	r3, [pc, #92]	; (80073b8 <HAL_DMA_Init+0xec>)
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007360:	211c      	movs	r1, #28
 8007362:	400b      	ands	r3, r1
 8007364:	210f      	movs	r1, #15
 8007366:	4099      	lsls	r1, r3
 8007368:	000b      	movs	r3, r1
 800736a:	43d9      	mvns	r1, r3
 800736c:	4b12      	ldr	r3, [pc, #72]	; (80073b8 <HAL_DMA_Init+0xec>)
 800736e:	400a      	ands	r2, r1
 8007370:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8007372:	4b11      	ldr	r3, [pc, #68]	; (80073b8 <HAL_DMA_Init+0xec>)
 8007374:	6819      	ldr	r1, [r3, #0]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	685a      	ldr	r2, [r3, #4]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800737e:	201c      	movs	r0, #28
 8007380:	4003      	ands	r3, r0
 8007382:	409a      	lsls	r2, r3
 8007384:	4b0c      	ldr	r3, [pc, #48]	; (80073b8 <HAL_DMA_Init+0xec>)
 8007386:	430a      	orrs	r2, r1
 8007388:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2200      	movs	r2, #0
 800738e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2225      	movs	r2, #37	; 0x25
 8007394:	2101      	movs	r1, #1
 8007396:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2224      	movs	r2, #36	; 0x24
 800739c:	2100      	movs	r1, #0
 800739e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80073a0:	2300      	movs	r3, #0
}
 80073a2:	0018      	movs	r0, r3
 80073a4:	46bd      	mov	sp, r7
 80073a6:	b004      	add	sp, #16
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	46c0      	nop			; (mov r8, r8)
 80073ac:	bffdfff8 	.word	0xbffdfff8
 80073b0:	40020000 	.word	0x40020000
 80073b4:	ffff800f 	.word	0xffff800f
 80073b8:	400200a8 	.word	0x400200a8

080073bc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b082      	sub	sp, #8
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d101      	bne.n	80073ce <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80073ca:	2301      	movs	r3, #1
 80073cc:	e04a      	b.n	8007464 <HAL_DMA_DeInit+0xa8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	2101      	movs	r1, #1
 80073da:	438a      	bics	r2, r1
 80073dc:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a22      	ldr	r2, [pc, #136]	; (800746c <HAL_DMA_DeInit+0xb0>)
 80073e4:	4694      	mov	ip, r2
 80073e6:	4463      	add	r3, ip
 80073e8:	2114      	movs	r1, #20
 80073ea:	0018      	movs	r0, r3
 80073ec:	f7f8 fe9e 	bl	800012c <__udivsi3>
 80073f0:	0003      	movs	r3, r0
 80073f2:	009a      	lsls	r2, r3, #2
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	4a1d      	ldr	r2, [pc, #116]	; (8007470 <HAL_DMA_DeInit+0xb4>)
 80073fc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	2200      	movs	r2, #0
 8007404:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800740a:	221c      	movs	r2, #28
 800740c:	401a      	ands	r2, r3
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007412:	2101      	movs	r1, #1
 8007414:	4091      	lsls	r1, r2
 8007416:	000a      	movs	r2, r1
 8007418:	605a      	str	r2, [r3, #4]

  /* Reset DMA channel selection register */
  /* DMA1 */
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800741a:	4b16      	ldr	r3, [pc, #88]	; (8007474 <HAL_DMA_DeInit+0xb8>)
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007422:	211c      	movs	r1, #28
 8007424:	400b      	ands	r3, r1
 8007426:	210f      	movs	r1, #15
 8007428:	4099      	lsls	r1, r3
 800742a:	000b      	movs	r3, r1
 800742c:	43d9      	mvns	r1, r3
 800742e:	4b11      	ldr	r3, [pc, #68]	; (8007474 <HAL_DMA_DeInit+0xb8>)
 8007430:	400a      	ands	r2, r1
 8007432:	601a      	str	r2, [r3, #0]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2225      	movs	r2, #37	; 0x25
 8007456:	2100      	movs	r1, #0
 8007458:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2224      	movs	r2, #36	; 0x24
 800745e:	2100      	movs	r1, #0
 8007460:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007462:	2300      	movs	r3, #0
}
 8007464:	0018      	movs	r0, r3
 8007466:	46bd      	mov	sp, r7
 8007468:	b002      	add	sp, #8
 800746a:	bd80      	pop	{r7, pc}
 800746c:	bffdfff8 	.word	0xbffdfff8
 8007470:	40020000 	.word	0x40020000
 8007474:	400200a8 	.word	0x400200a8

08007478 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b086      	sub	sp, #24
 800747c:	af00      	add	r7, sp, #0
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	60b9      	str	r1, [r7, #8]
 8007482:	607a      	str	r2, [r7, #4]
 8007484:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007486:	2317      	movs	r3, #23
 8007488:	18fb      	adds	r3, r7, r3
 800748a:	2200      	movs	r2, #0
 800748c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2224      	movs	r2, #36	; 0x24
 8007492:	5c9b      	ldrb	r3, [r3, r2]
 8007494:	2b01      	cmp	r3, #1
 8007496:	d101      	bne.n	800749c <HAL_DMA_Start_IT+0x24>
 8007498:	2302      	movs	r3, #2
 800749a:	e04f      	b.n	800753c <HAL_DMA_Start_IT+0xc4>
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2224      	movs	r2, #36	; 0x24
 80074a0:	2101      	movs	r1, #1
 80074a2:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2225      	movs	r2, #37	; 0x25
 80074a8:	5c9b      	ldrb	r3, [r3, r2]
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d13a      	bne.n	8007526 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2225      	movs	r2, #37	; 0x25
 80074b4:	2102      	movs	r1, #2
 80074b6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2200      	movs	r2, #0
 80074bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	681a      	ldr	r2, [r3, #0]
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	2101      	movs	r1, #1
 80074ca:	438a      	bics	r2, r1
 80074cc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	68b9      	ldr	r1, [r7, #8]
 80074d4:	68f8      	ldr	r0, [r7, #12]
 80074d6:	f000 f96a 	bl	80077ae <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d008      	beq.n	80074f4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	210e      	movs	r1, #14
 80074ee:	430a      	orrs	r2, r1
 80074f0:	601a      	str	r2, [r3, #0]
 80074f2:	e00f      	b.n	8007514 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	2104      	movs	r1, #4
 8007500:	438a      	bics	r2, r1
 8007502:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	210a      	movs	r1, #10
 8007510:	430a      	orrs	r2, r1
 8007512:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	2101      	movs	r1, #1
 8007520:	430a      	orrs	r2, r1
 8007522:	601a      	str	r2, [r3, #0]
 8007524:	e007      	b.n	8007536 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2224      	movs	r2, #36	; 0x24
 800752a:	2100      	movs	r1, #0
 800752c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800752e:	2317      	movs	r3, #23
 8007530:	18fb      	adds	r3, r7, r3
 8007532:	2202      	movs	r2, #2
 8007534:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8007536:	2317      	movs	r3, #23
 8007538:	18fb      	adds	r3, r7, r3
 800753a:	781b      	ldrb	r3, [r3, #0]
}
 800753c:	0018      	movs	r0, r3
 800753e:	46bd      	mov	sp, r7
 8007540:	b006      	add	sp, #24
 8007542:	bd80      	pop	{r7, pc}

08007544 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b084      	sub	sp, #16
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800754c:	230f      	movs	r3, #15
 800754e:	18fb      	adds	r3, r7, r3
 8007550:	2200      	movs	r2, #0
 8007552:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2225      	movs	r2, #37	; 0x25
 8007558:	5c9b      	ldrb	r3, [r3, r2]
 800755a:	b2db      	uxtb	r3, r3
 800755c:	2b02      	cmp	r3, #2
 800755e:	d008      	beq.n	8007572 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2204      	movs	r2, #4
 8007564:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2224      	movs	r2, #36	; 0x24
 800756a:	2100      	movs	r1, #0
 800756c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	e024      	b.n	80075bc <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	681a      	ldr	r2, [r3, #0]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	210e      	movs	r1, #14
 800757e:	438a      	bics	r2, r1
 8007580:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	2101      	movs	r1, #1
 800758e:	438a      	bics	r2, r1
 8007590:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007596:	221c      	movs	r2, #28
 8007598:	401a      	ands	r2, r3
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800759e:	2101      	movs	r1, #1
 80075a0:	4091      	lsls	r1, r2
 80075a2:	000a      	movs	r2, r1
 80075a4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2225      	movs	r2, #37	; 0x25
 80075aa:	2101      	movs	r1, #1
 80075ac:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2224      	movs	r2, #36	; 0x24
 80075b2:	2100      	movs	r1, #0
 80075b4:	5499      	strb	r1, [r3, r2]

    return status;
 80075b6:	230f      	movs	r3, #15
 80075b8:	18fb      	adds	r3, r7, r3
 80075ba:	781b      	ldrb	r3, [r3, #0]
  }
}
 80075bc:	0018      	movs	r0, r3
 80075be:	46bd      	mov	sp, r7
 80075c0:	b004      	add	sp, #16
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075cc:	210f      	movs	r1, #15
 80075ce:	187b      	adds	r3, r7, r1
 80075d0:	2200      	movs	r2, #0
 80075d2:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2225      	movs	r2, #37	; 0x25
 80075d8:	5c9b      	ldrb	r3, [r3, r2]
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	2b02      	cmp	r3, #2
 80075de:	d006      	beq.n	80075ee <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2204      	movs	r2, #4
 80075e4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80075e6:	187b      	adds	r3, r7, r1
 80075e8:	2201      	movs	r2, #1
 80075ea:	701a      	strb	r2, [r3, #0]
 80075ec:	e02a      	b.n	8007644 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	210e      	movs	r1, #14
 80075fa:	438a      	bics	r2, r1
 80075fc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	2101      	movs	r1, #1
 800760a:	438a      	bics	r2, r1
 800760c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007612:	221c      	movs	r2, #28
 8007614:	401a      	ands	r2, r3
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800761a:	2101      	movs	r1, #1
 800761c:	4091      	lsls	r1, r2
 800761e:	000a      	movs	r2, r1
 8007620:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2225      	movs	r2, #37	; 0x25
 8007626:	2101      	movs	r1, #1
 8007628:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2224      	movs	r2, #36	; 0x24
 800762e:	2100      	movs	r1, #0
 8007630:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007636:	2b00      	cmp	r3, #0
 8007638:	d004      	beq.n	8007644 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	0010      	movs	r0, r2
 8007642:	4798      	blx	r3
    }
  }
  return status;
 8007644:	230f      	movs	r3, #15
 8007646:	18fb      	adds	r3, r7, r3
 8007648:	781b      	ldrb	r3, [r3, #0]
}
 800764a:	0018      	movs	r0, r3
 800764c:	46bd      	mov	sp, r7
 800764e:	b004      	add	sp, #16
 8007650:	bd80      	pop	{r7, pc}

08007652 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007652:	b580      	push	{r7, lr}
 8007654:	b084      	sub	sp, #16
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800766e:	221c      	movs	r2, #28
 8007670:	4013      	ands	r3, r2
 8007672:	2204      	movs	r2, #4
 8007674:	409a      	lsls	r2, r3
 8007676:	0013      	movs	r3, r2
 8007678:	68fa      	ldr	r2, [r7, #12]
 800767a:	4013      	ands	r3, r2
 800767c:	d026      	beq.n	80076cc <HAL_DMA_IRQHandler+0x7a>
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	2204      	movs	r2, #4
 8007682:	4013      	ands	r3, r2
 8007684:	d022      	beq.n	80076cc <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	2220      	movs	r2, #32
 800768e:	4013      	ands	r3, r2
 8007690:	d107      	bne.n	80076a2 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	2104      	movs	r1, #4
 800769e:	438a      	bics	r2, r1
 80076a0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076a6:	221c      	movs	r2, #28
 80076a8:	401a      	ands	r2, r3
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ae:	2104      	movs	r1, #4
 80076b0:	4091      	lsls	r1, r2
 80076b2:	000a      	movs	r2, r1
 80076b4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d100      	bne.n	80076c0 <HAL_DMA_IRQHandler+0x6e>
 80076be:	e071      	b.n	80077a4 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	0010      	movs	r0, r2
 80076c8:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 80076ca:	e06b      	b.n	80077a4 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076d0:	221c      	movs	r2, #28
 80076d2:	4013      	ands	r3, r2
 80076d4:	2202      	movs	r2, #2
 80076d6:	409a      	lsls	r2, r3
 80076d8:	0013      	movs	r3, r2
 80076da:	68fa      	ldr	r2, [r7, #12]
 80076dc:	4013      	ands	r3, r2
 80076de:	d02d      	beq.n	800773c <HAL_DMA_IRQHandler+0xea>
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	2202      	movs	r2, #2
 80076e4:	4013      	ands	r3, r2
 80076e6:	d029      	beq.n	800773c <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2220      	movs	r2, #32
 80076f0:	4013      	ands	r3, r2
 80076f2:	d10b      	bne.n	800770c <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	210a      	movs	r1, #10
 8007700:	438a      	bics	r2, r1
 8007702:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2225      	movs	r2, #37	; 0x25
 8007708:	2101      	movs	r1, #1
 800770a:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007710:	221c      	movs	r2, #28
 8007712:	401a      	ands	r2, r3
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007718:	2102      	movs	r1, #2
 800771a:	4091      	lsls	r1, r2
 800771c:	000a      	movs	r2, r1
 800771e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2224      	movs	r2, #36	; 0x24
 8007724:	2100      	movs	r1, #0
 8007726:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800772c:	2b00      	cmp	r3, #0
 800772e:	d039      	beq.n	80077a4 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	0010      	movs	r0, r2
 8007738:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800773a:	e033      	b.n	80077a4 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007740:	221c      	movs	r2, #28
 8007742:	4013      	ands	r3, r2
 8007744:	2208      	movs	r2, #8
 8007746:	409a      	lsls	r2, r3
 8007748:	0013      	movs	r3, r2
 800774a:	68fa      	ldr	r2, [r7, #12]
 800774c:	4013      	ands	r3, r2
 800774e:	d02a      	beq.n	80077a6 <HAL_DMA_IRQHandler+0x154>
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	2208      	movs	r2, #8
 8007754:	4013      	ands	r3, r2
 8007756:	d026      	beq.n	80077a6 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	210e      	movs	r1, #14
 8007764:	438a      	bics	r2, r1
 8007766:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800776c:	221c      	movs	r2, #28
 800776e:	401a      	ands	r2, r3
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007774:	2101      	movs	r1, #1
 8007776:	4091      	lsls	r1, r2
 8007778:	000a      	movs	r2, r1
 800777a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2201      	movs	r2, #1
 8007780:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2225      	movs	r2, #37	; 0x25
 8007786:	2101      	movs	r1, #1
 8007788:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2224      	movs	r2, #36	; 0x24
 800778e:	2100      	movs	r1, #0
 8007790:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007796:	2b00      	cmp	r3, #0
 8007798:	d005      	beq.n	80077a6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	0010      	movs	r0, r2
 80077a2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80077a4:	46c0      	nop			; (mov r8, r8)
 80077a6:	46c0      	nop			; (mov r8, r8)
}
 80077a8:	46bd      	mov	sp, r7
 80077aa:	b004      	add	sp, #16
 80077ac:	bd80      	pop	{r7, pc}

080077ae <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80077ae:	b580      	push	{r7, lr}
 80077b0:	b084      	sub	sp, #16
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	60f8      	str	r0, [r7, #12]
 80077b6:	60b9      	str	r1, [r7, #8]
 80077b8:	607a      	str	r2, [r7, #4]
 80077ba:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077c0:	221c      	movs	r2, #28
 80077c2:	401a      	ands	r2, r3
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c8:	2101      	movs	r1, #1
 80077ca:	4091      	lsls	r1, r2
 80077cc:	000a      	movs	r2, r1
 80077ce:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	683a      	ldr	r2, [r7, #0]
 80077d6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	2b10      	cmp	r3, #16
 80077de:	d108      	bne.n	80077f2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	68ba      	ldr	r2, [r7, #8]
 80077ee:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80077f0:	e007      	b.n	8007802 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	68ba      	ldr	r2, [r7, #8]
 80077f8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	60da      	str	r2, [r3, #12]
}
 8007802:	46c0      	nop			; (mov r8, r8)
 8007804:	46bd      	mov	sp, r7
 8007806:	b004      	add	sp, #16
 8007808:	bd80      	pop	{r7, pc}

0800780a <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800780a:	b580      	push	{r7, lr}
 800780c:	b086      	sub	sp, #24
 800780e:	af00      	add	r7, sp, #0
 8007810:	60f8      	str	r0, [r7, #12]
 8007812:	607a      	str	r2, [r7, #4]
 8007814:	200b      	movs	r0, #11
 8007816:	183b      	adds	r3, r7, r0
 8007818:	1c0a      	adds	r2, r1, #0
 800781a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800781c:	2317      	movs	r3, #23
 800781e:	18fb      	adds	r3, r7, r3
 8007820:	2200      	movs	r2, #0
 8007822:	701a      	strb	r2, [r3, #0]

  switch (CallbackID)
 8007824:	183b      	adds	r3, r7, r0
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d103      	bne.n	8007834 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	605a      	str	r2, [r3, #4]
      break;
 8007832:	e004      	b.n	800783e <HAL_EXTI_RegisterCallback+0x34>

    default:
      status = HAL_ERROR;
 8007834:	2317      	movs	r3, #23
 8007836:	18fb      	adds	r3, r7, r3
 8007838:	2201      	movs	r2, #1
 800783a:	701a      	strb	r2, [r3, #0]
      break;
 800783c:	46c0      	nop			; (mov r8, r8)
  }

  return status;
 800783e:	2317      	movs	r3, #23
 8007840:	18fb      	adds	r3, r7, r3
 8007842:	781b      	ldrb	r3, [r3, #0]
}
 8007844:	0018      	movs	r0, r3
 8007846:	46bd      	mov	sp, r7
 8007848:	b006      	add	sp, #24
 800784a:	bd80      	pop	{r7, pc}

0800784c <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b082      	sub	sp, #8
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d101      	bne.n	8007860 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	e003      	b.n	8007868 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	683a      	ldr	r2, [r7, #0]
 8007864:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8007866:	2300      	movs	r3, #0
  }
}
 8007868:	0018      	movs	r0, r3
 800786a:	46bd      	mov	sp, r7
 800786c:	b002      	add	sp, #8
 800786e:	bd80      	pop	{r7, pc}

08007870 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	221f      	movs	r2, #31
 800787e:	4013      	ands	r3, r2
 8007880:	2201      	movs	r2, #1
 8007882:	409a      	lsls	r2, r3
 8007884:	0013      	movs	r3, r2
 8007886:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8007888:	4b0a      	ldr	r3, [pc, #40]	; (80078b4 <HAL_EXTI_IRQHandler+0x44>)
 800788a:	695a      	ldr	r2, [r3, #20]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	4013      	ands	r3, r2
 8007890:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d009      	beq.n	80078ac <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8007898:	4b06      	ldr	r3, [pc, #24]	; (80078b4 <HAL_EXTI_IRQHandler+0x44>)
 800789a:	68fa      	ldr	r2, [r7, #12]
 800789c:	615a      	str	r2, [r3, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d002      	beq.n	80078ac <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	4798      	blx	r3
    }
  }
}
 80078ac:	46c0      	nop			; (mov r8, r8)
 80078ae:	46bd      	mov	sp, r7
 80078b0:	b004      	add	sp, #16
 80078b2:	bd80      	pop	{r7, pc}
 80078b4:	40010400 	.word	0x40010400

080078b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b086      	sub	sp, #24
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80078c2:	2300      	movs	r3, #0
 80078c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80078c6:	2300      	movs	r3, #0
 80078c8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80078ca:	2300      	movs	r3, #0
 80078cc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80078ce:	e155      	b.n	8007b7c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	2101      	movs	r1, #1
 80078d6:	697a      	ldr	r2, [r7, #20]
 80078d8:	4091      	lsls	r1, r2
 80078da:	000a      	movs	r2, r1
 80078dc:	4013      	ands	r3, r2
 80078de:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d100      	bne.n	80078e8 <HAL_GPIO_Init+0x30>
 80078e6:	e146      	b.n	8007b76 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d00b      	beq.n	8007908 <HAL_GPIO_Init+0x50>
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	2b02      	cmp	r3, #2
 80078f6:	d007      	beq.n	8007908 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80078fc:	2b11      	cmp	r3, #17
 80078fe:	d003      	beq.n	8007908 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	2b12      	cmp	r3, #18
 8007906:	d130      	bne.n	800796a <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	005b      	lsls	r3, r3, #1
 8007912:	2203      	movs	r2, #3
 8007914:	409a      	lsls	r2, r3
 8007916:	0013      	movs	r3, r2
 8007918:	43da      	mvns	r2, r3
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	4013      	ands	r3, r2
 800791e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	68da      	ldr	r2, [r3, #12]
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	005b      	lsls	r3, r3, #1
 8007928:	409a      	lsls	r2, r3
 800792a:	0013      	movs	r3, r2
 800792c:	693a      	ldr	r2, [r7, #16]
 800792e:	4313      	orrs	r3, r2
 8007930:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	693a      	ldr	r2, [r7, #16]
 8007936:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800793e:	2201      	movs	r2, #1
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	409a      	lsls	r2, r3
 8007944:	0013      	movs	r3, r2
 8007946:	43da      	mvns	r2, r3
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	4013      	ands	r3, r2
 800794c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	091b      	lsrs	r3, r3, #4
 8007954:	2201      	movs	r2, #1
 8007956:	401a      	ands	r2, r3
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	409a      	lsls	r2, r3
 800795c:	0013      	movs	r3, r2
 800795e:	693a      	ldr	r2, [r7, #16]
 8007960:	4313      	orrs	r3, r2
 8007962:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	693a      	ldr	r2, [r7, #16]
 8007968:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	68db      	ldr	r3, [r3, #12]
 800796e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	005b      	lsls	r3, r3, #1
 8007974:	2203      	movs	r2, #3
 8007976:	409a      	lsls	r2, r3
 8007978:	0013      	movs	r3, r2
 800797a:	43da      	mvns	r2, r3
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	4013      	ands	r3, r2
 8007980:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	689a      	ldr	r2, [r3, #8]
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	005b      	lsls	r3, r3, #1
 800798a:	409a      	lsls	r2, r3
 800798c:	0013      	movs	r3, r2
 800798e:	693a      	ldr	r2, [r7, #16]
 8007990:	4313      	orrs	r3, r2
 8007992:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	693a      	ldr	r2, [r7, #16]
 8007998:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	2b02      	cmp	r3, #2
 80079a0:	d003      	beq.n	80079aa <HAL_GPIO_Init+0xf2>
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	2b12      	cmp	r3, #18
 80079a8:	d123      	bne.n	80079f2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	08da      	lsrs	r2, r3, #3
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	3208      	adds	r2, #8
 80079b2:	0092      	lsls	r2, r2, #2
 80079b4:	58d3      	ldr	r3, [r2, r3]
 80079b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	2207      	movs	r2, #7
 80079bc:	4013      	ands	r3, r2
 80079be:	009b      	lsls	r3, r3, #2
 80079c0:	220f      	movs	r2, #15
 80079c2:	409a      	lsls	r2, r3
 80079c4:	0013      	movs	r3, r2
 80079c6:	43da      	mvns	r2, r3
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	4013      	ands	r3, r2
 80079cc:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	691a      	ldr	r2, [r3, #16]
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	2107      	movs	r1, #7
 80079d6:	400b      	ands	r3, r1
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	409a      	lsls	r2, r3
 80079dc:	0013      	movs	r3, r2
 80079de:	693a      	ldr	r2, [r7, #16]
 80079e0:	4313      	orrs	r3, r2
 80079e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	08da      	lsrs	r2, r3, #3
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	3208      	adds	r2, #8
 80079ec:	0092      	lsls	r2, r2, #2
 80079ee:	6939      	ldr	r1, [r7, #16]
 80079f0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	005b      	lsls	r3, r3, #1
 80079fc:	2203      	movs	r2, #3
 80079fe:	409a      	lsls	r2, r3
 8007a00:	0013      	movs	r3, r2
 8007a02:	43da      	mvns	r2, r3
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	4013      	ands	r3, r2
 8007a08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	2203      	movs	r2, #3
 8007a10:	401a      	ands	r2, r3
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	005b      	lsls	r3, r3, #1
 8007a16:	409a      	lsls	r2, r3
 8007a18:	0013      	movs	r3, r2
 8007a1a:	693a      	ldr	r2, [r7, #16]
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	693a      	ldr	r2, [r7, #16]
 8007a24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	685a      	ldr	r2, [r3, #4]
 8007a2a:	2380      	movs	r3, #128	; 0x80
 8007a2c:	055b      	lsls	r3, r3, #21
 8007a2e:	4013      	ands	r3, r2
 8007a30:	d100      	bne.n	8007a34 <HAL_GPIO_Init+0x17c>
 8007a32:	e0a0      	b.n	8007b76 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007a34:	4b57      	ldr	r3, [pc, #348]	; (8007b94 <HAL_GPIO_Init+0x2dc>)
 8007a36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a38:	4b56      	ldr	r3, [pc, #344]	; (8007b94 <HAL_GPIO_Init+0x2dc>)
 8007a3a:	2101      	movs	r1, #1
 8007a3c:	430a      	orrs	r2, r1
 8007a3e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8007a40:	4a55      	ldr	r2, [pc, #340]	; (8007b98 <HAL_GPIO_Init+0x2e0>)
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	089b      	lsrs	r3, r3, #2
 8007a46:	3302      	adds	r3, #2
 8007a48:	009b      	lsls	r3, r3, #2
 8007a4a:	589b      	ldr	r3, [r3, r2]
 8007a4c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	2203      	movs	r2, #3
 8007a52:	4013      	ands	r3, r2
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	220f      	movs	r2, #15
 8007a58:	409a      	lsls	r2, r3
 8007a5a:	0013      	movs	r3, r2
 8007a5c:	43da      	mvns	r2, r3
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	4013      	ands	r3, r2
 8007a62:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	23a0      	movs	r3, #160	; 0xa0
 8007a68:	05db      	lsls	r3, r3, #23
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d01f      	beq.n	8007aae <HAL_GPIO_Init+0x1f6>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	4a4a      	ldr	r2, [pc, #296]	; (8007b9c <HAL_GPIO_Init+0x2e4>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d019      	beq.n	8007aaa <HAL_GPIO_Init+0x1f2>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	4a49      	ldr	r2, [pc, #292]	; (8007ba0 <HAL_GPIO_Init+0x2e8>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d013      	beq.n	8007aa6 <HAL_GPIO_Init+0x1ee>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	4a48      	ldr	r2, [pc, #288]	; (8007ba4 <HAL_GPIO_Init+0x2ec>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d00d      	beq.n	8007aa2 <HAL_GPIO_Init+0x1ea>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4a47      	ldr	r2, [pc, #284]	; (8007ba8 <HAL_GPIO_Init+0x2f0>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d007      	beq.n	8007a9e <HAL_GPIO_Init+0x1e6>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4a46      	ldr	r2, [pc, #280]	; (8007bac <HAL_GPIO_Init+0x2f4>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d101      	bne.n	8007a9a <HAL_GPIO_Init+0x1e2>
 8007a96:	2305      	movs	r3, #5
 8007a98:	e00a      	b.n	8007ab0 <HAL_GPIO_Init+0x1f8>
 8007a9a:	2306      	movs	r3, #6
 8007a9c:	e008      	b.n	8007ab0 <HAL_GPIO_Init+0x1f8>
 8007a9e:	2304      	movs	r3, #4
 8007aa0:	e006      	b.n	8007ab0 <HAL_GPIO_Init+0x1f8>
 8007aa2:	2303      	movs	r3, #3
 8007aa4:	e004      	b.n	8007ab0 <HAL_GPIO_Init+0x1f8>
 8007aa6:	2302      	movs	r3, #2
 8007aa8:	e002      	b.n	8007ab0 <HAL_GPIO_Init+0x1f8>
 8007aaa:	2301      	movs	r3, #1
 8007aac:	e000      	b.n	8007ab0 <HAL_GPIO_Init+0x1f8>
 8007aae:	2300      	movs	r3, #0
 8007ab0:	697a      	ldr	r2, [r7, #20]
 8007ab2:	2103      	movs	r1, #3
 8007ab4:	400a      	ands	r2, r1
 8007ab6:	0092      	lsls	r2, r2, #2
 8007ab8:	4093      	lsls	r3, r2
 8007aba:	693a      	ldr	r2, [r7, #16]
 8007abc:	4313      	orrs	r3, r2
 8007abe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007ac0:	4935      	ldr	r1, [pc, #212]	; (8007b98 <HAL_GPIO_Init+0x2e0>)
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	089b      	lsrs	r3, r3, #2
 8007ac6:	3302      	adds	r3, #2
 8007ac8:	009b      	lsls	r3, r3, #2
 8007aca:	693a      	ldr	r2, [r7, #16]
 8007acc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007ace:	4b38      	ldr	r3, [pc, #224]	; (8007bb0 <HAL_GPIO_Init+0x2f8>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	43da      	mvns	r2, r3
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	4013      	ands	r3, r2
 8007adc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	685a      	ldr	r2, [r3, #4]
 8007ae2:	2380      	movs	r3, #128	; 0x80
 8007ae4:	025b      	lsls	r3, r3, #9
 8007ae6:	4013      	ands	r3, r2
 8007ae8:	d003      	beq.n	8007af2 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8007aea:	693a      	ldr	r2, [r7, #16]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	4313      	orrs	r3, r2
 8007af0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8007af2:	4b2f      	ldr	r3, [pc, #188]	; (8007bb0 <HAL_GPIO_Init+0x2f8>)
 8007af4:	693a      	ldr	r2, [r7, #16]
 8007af6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8007af8:	4b2d      	ldr	r3, [pc, #180]	; (8007bb0 <HAL_GPIO_Init+0x2f8>)
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	43da      	mvns	r2, r3
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	4013      	ands	r3, r2
 8007b06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	685a      	ldr	r2, [r3, #4]
 8007b0c:	2380      	movs	r3, #128	; 0x80
 8007b0e:	029b      	lsls	r3, r3, #10
 8007b10:	4013      	ands	r3, r2
 8007b12:	d003      	beq.n	8007b1c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8007b14:	693a      	ldr	r2, [r7, #16]
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8007b1c:	4b24      	ldr	r3, [pc, #144]	; (8007bb0 <HAL_GPIO_Init+0x2f8>)
 8007b1e:	693a      	ldr	r2, [r7, #16]
 8007b20:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007b22:	4b23      	ldr	r3, [pc, #140]	; (8007bb0 <HAL_GPIO_Init+0x2f8>)
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	43da      	mvns	r2, r3
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	4013      	ands	r3, r2
 8007b30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	685a      	ldr	r2, [r3, #4]
 8007b36:	2380      	movs	r3, #128	; 0x80
 8007b38:	035b      	lsls	r3, r3, #13
 8007b3a:	4013      	ands	r3, r2
 8007b3c:	d003      	beq.n	8007b46 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8007b3e:	693a      	ldr	r2, [r7, #16]
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	4313      	orrs	r3, r2
 8007b44:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8007b46:	4b1a      	ldr	r3, [pc, #104]	; (8007bb0 <HAL_GPIO_Init+0x2f8>)
 8007b48:	693a      	ldr	r2, [r7, #16]
 8007b4a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8007b4c:	4b18      	ldr	r3, [pc, #96]	; (8007bb0 <HAL_GPIO_Init+0x2f8>)
 8007b4e:	68db      	ldr	r3, [r3, #12]
 8007b50:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	43da      	mvns	r2, r3
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	4013      	ands	r3, r2
 8007b5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	685a      	ldr	r2, [r3, #4]
 8007b60:	2380      	movs	r3, #128	; 0x80
 8007b62:	039b      	lsls	r3, r3, #14
 8007b64:	4013      	ands	r3, r2
 8007b66:	d003      	beq.n	8007b70 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8007b68:	693a      	ldr	r2, [r7, #16]
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8007b70:	4b0f      	ldr	r3, [pc, #60]	; (8007bb0 <HAL_GPIO_Init+0x2f8>)
 8007b72:	693a      	ldr	r2, [r7, #16]
 8007b74:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	3301      	adds	r3, #1
 8007b7a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	681a      	ldr	r2, [r3, #0]
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	40da      	lsrs	r2, r3
 8007b84:	1e13      	subs	r3, r2, #0
 8007b86:	d000      	beq.n	8007b8a <HAL_GPIO_Init+0x2d2>
 8007b88:	e6a2      	b.n	80078d0 <HAL_GPIO_Init+0x18>
  }
}
 8007b8a:	46c0      	nop			; (mov r8, r8)
 8007b8c:	46c0      	nop			; (mov r8, r8)
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	b006      	add	sp, #24
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	40021000 	.word	0x40021000
 8007b98:	40010000 	.word	0x40010000
 8007b9c:	50000400 	.word	0x50000400
 8007ba0:	50000800 	.word	0x50000800
 8007ba4:	50000c00 	.word	0x50000c00
 8007ba8:	50001000 	.word	0x50001000
 8007bac:	50001c00 	.word	0x50001c00
 8007bb0:	40010400 	.word	0x40010400

08007bb4 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b086      	sub	sp, #24
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 8007bca:	e0bc      	b.n	8007d46 <HAL_GPIO_DeInit+0x192>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8007bcc:	2201      	movs	r2, #1
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	409a      	lsls	r2, r3
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	4013      	ands	r3, r2
 8007bd6:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d100      	bne.n	8007be0 <HAL_GPIO_DeInit+0x2c>
 8007bde:	e0af      	b.n	8007d40 <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8007be0:	4a5e      	ldr	r2, [pc, #376]	; (8007d5c <HAL_GPIO_DeInit+0x1a8>)
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	089b      	lsrs	r3, r3, #2
 8007be6:	3302      	adds	r3, #2
 8007be8:	009b      	lsls	r3, r3, #2
 8007bea:	589b      	ldr	r3, [r3, r2]
 8007bec:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	2203      	movs	r2, #3
 8007bf2:	4013      	ands	r3, r2
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	220f      	movs	r2, #15
 8007bf8:	409a      	lsls	r2, r3
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	4013      	ands	r3, r2
 8007bfe:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	23a0      	movs	r3, #160	; 0xa0
 8007c04:	05db      	lsls	r3, r3, #23
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d01f      	beq.n	8007c4a <HAL_GPIO_DeInit+0x96>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	4a54      	ldr	r2, [pc, #336]	; (8007d60 <HAL_GPIO_DeInit+0x1ac>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d019      	beq.n	8007c46 <HAL_GPIO_DeInit+0x92>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4a53      	ldr	r2, [pc, #332]	; (8007d64 <HAL_GPIO_DeInit+0x1b0>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d013      	beq.n	8007c42 <HAL_GPIO_DeInit+0x8e>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	4a52      	ldr	r2, [pc, #328]	; (8007d68 <HAL_GPIO_DeInit+0x1b4>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d00d      	beq.n	8007c3e <HAL_GPIO_DeInit+0x8a>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	4a51      	ldr	r2, [pc, #324]	; (8007d6c <HAL_GPIO_DeInit+0x1b8>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d007      	beq.n	8007c3a <HAL_GPIO_DeInit+0x86>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	4a50      	ldr	r2, [pc, #320]	; (8007d70 <HAL_GPIO_DeInit+0x1bc>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d101      	bne.n	8007c36 <HAL_GPIO_DeInit+0x82>
 8007c32:	2305      	movs	r3, #5
 8007c34:	e00a      	b.n	8007c4c <HAL_GPIO_DeInit+0x98>
 8007c36:	2306      	movs	r3, #6
 8007c38:	e008      	b.n	8007c4c <HAL_GPIO_DeInit+0x98>
 8007c3a:	2304      	movs	r3, #4
 8007c3c:	e006      	b.n	8007c4c <HAL_GPIO_DeInit+0x98>
 8007c3e:	2303      	movs	r3, #3
 8007c40:	e004      	b.n	8007c4c <HAL_GPIO_DeInit+0x98>
 8007c42:	2302      	movs	r3, #2
 8007c44:	e002      	b.n	8007c4c <HAL_GPIO_DeInit+0x98>
 8007c46:	2301      	movs	r3, #1
 8007c48:	e000      	b.n	8007c4c <HAL_GPIO_DeInit+0x98>
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	697a      	ldr	r2, [r7, #20]
 8007c4e:	2103      	movs	r1, #3
 8007c50:	400a      	ands	r2, r1
 8007c52:	0092      	lsls	r2, r2, #2
 8007c54:	4093      	lsls	r3, r2
 8007c56:	68fa      	ldr	r2, [r7, #12]
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d132      	bne.n	8007cc2 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007c5c:	4b45      	ldr	r3, [pc, #276]	; (8007d74 <HAL_GPIO_DeInit+0x1c0>)
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	43d9      	mvns	r1, r3
 8007c64:	4b43      	ldr	r3, [pc, #268]	; (8007d74 <HAL_GPIO_DeInit+0x1c0>)
 8007c66:	400a      	ands	r2, r1
 8007c68:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8007c6a:	4b42      	ldr	r3, [pc, #264]	; (8007d74 <HAL_GPIO_DeInit+0x1c0>)
 8007c6c:	685a      	ldr	r2, [r3, #4]
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	43d9      	mvns	r1, r3
 8007c72:	4b40      	ldr	r3, [pc, #256]	; (8007d74 <HAL_GPIO_DeInit+0x1c0>)
 8007c74:	400a      	ands	r2, r1
 8007c76:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007c78:	4b3e      	ldr	r3, [pc, #248]	; (8007d74 <HAL_GPIO_DeInit+0x1c0>)
 8007c7a:	689a      	ldr	r2, [r3, #8]
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	43d9      	mvns	r1, r3
 8007c80:	4b3c      	ldr	r3, [pc, #240]	; (8007d74 <HAL_GPIO_DeInit+0x1c0>)
 8007c82:	400a      	ands	r2, r1
 8007c84:	609a      	str	r2, [r3, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007c86:	4b3b      	ldr	r3, [pc, #236]	; (8007d74 <HAL_GPIO_DeInit+0x1c0>)
 8007c88:	68da      	ldr	r2, [r3, #12]
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	43d9      	mvns	r1, r3
 8007c8e:	4b39      	ldr	r3, [pc, #228]	; (8007d74 <HAL_GPIO_DeInit+0x1c0>)
 8007c90:	400a      	ands	r2, r1
 8007c92:	60da      	str	r2, [r3, #12]
        
        tmp = (0x0FUL) << (4U * (position & 0x03U));
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	2203      	movs	r2, #3
 8007c98:	4013      	ands	r3, r2
 8007c9a:	009b      	lsls	r3, r3, #2
 8007c9c:	220f      	movs	r2, #15
 8007c9e:	409a      	lsls	r2, r3
 8007ca0:	0013      	movs	r3, r2
 8007ca2:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007ca4:	4a2d      	ldr	r2, [pc, #180]	; (8007d5c <HAL_GPIO_DeInit+0x1a8>)
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	089b      	lsrs	r3, r3, #2
 8007caa:	3302      	adds	r3, #2
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	589a      	ldr	r2, [r3, r2]
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	43d9      	mvns	r1, r3
 8007cb4:	4829      	ldr	r0, [pc, #164]	; (8007d5c <HAL_GPIO_DeInit+0x1a8>)
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	089b      	lsrs	r3, r3, #2
 8007cba:	400a      	ands	r2, r1
 8007cbc:	3302      	adds	r3, #2
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681a      	ldr	r2, [r3, #0]
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	005b      	lsls	r3, r3, #1
 8007cca:	2103      	movs	r1, #3
 8007ccc:	4099      	lsls	r1, r3
 8007cce:	000b      	movs	r3, r1
 8007cd0:	431a      	orrs	r2, r3
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	08da      	lsrs	r2, r3, #3
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	3208      	adds	r2, #8
 8007cde:	0092      	lsls	r2, r2, #2
 8007ce0:	58d3      	ldr	r3, [r2, r3]
 8007ce2:	697a      	ldr	r2, [r7, #20]
 8007ce4:	2107      	movs	r1, #7
 8007ce6:	400a      	ands	r2, r1
 8007ce8:	0092      	lsls	r2, r2, #2
 8007cea:	210f      	movs	r1, #15
 8007cec:	4091      	lsls	r1, r2
 8007cee:	000a      	movs	r2, r1
 8007cf0:	43d1      	mvns	r1, r2
 8007cf2:	697a      	ldr	r2, [r7, #20]
 8007cf4:	08d2      	lsrs	r2, r2, #3
 8007cf6:	4019      	ands	r1, r3
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	3208      	adds	r2, #8
 8007cfc:	0092      	lsls	r2, r2, #2
 8007cfe:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	68db      	ldr	r3, [r3, #12]
 8007d04:	697a      	ldr	r2, [r7, #20]
 8007d06:	0052      	lsls	r2, r2, #1
 8007d08:	2103      	movs	r1, #3
 8007d0a:	4091      	lsls	r1, r2
 8007d0c:	000a      	movs	r2, r1
 8007d0e:	43d2      	mvns	r2, r2
 8007d10:	401a      	ands	r2, r3
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	2101      	movs	r1, #1
 8007d1c:	697a      	ldr	r2, [r7, #20]
 8007d1e:	4091      	lsls	r1, r2
 8007d20:	000a      	movs	r2, r1
 8007d22:	43d2      	mvns	r2, r2
 8007d24:	401a      	ands	r2, r3
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	697a      	ldr	r2, [r7, #20]
 8007d30:	0052      	lsls	r2, r2, #1
 8007d32:	2103      	movs	r1, #3
 8007d34:	4091      	lsls	r1, r2
 8007d36:	000a      	movs	r2, r1
 8007d38:	43d2      	mvns	r2, r2
 8007d3a:	401a      	ands	r2, r3
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	609a      	str	r2, [r3, #8]
    }
    position++;
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	3301      	adds	r3, #1
 8007d44:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 8007d46:	683a      	ldr	r2, [r7, #0]
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	40da      	lsrs	r2, r3
 8007d4c:	1e13      	subs	r3, r2, #0
 8007d4e:	d000      	beq.n	8007d52 <HAL_GPIO_DeInit+0x19e>
 8007d50:	e73c      	b.n	8007bcc <HAL_GPIO_DeInit+0x18>
  }
}
 8007d52:	46c0      	nop			; (mov r8, r8)
 8007d54:	46c0      	nop			; (mov r8, r8)
 8007d56:	46bd      	mov	sp, r7
 8007d58:	b006      	add	sp, #24
 8007d5a:	bd80      	pop	{r7, pc}
 8007d5c:	40010000 	.word	0x40010000
 8007d60:	50000400 	.word	0x50000400
 8007d64:	50000800 	.word	0x50000800
 8007d68:	50000c00 	.word	0x50000c00
 8007d6c:	50001000 	.word	0x50001000
 8007d70:	50001c00 	.word	0x50001c00
 8007d74:	40010400 	.word	0x40010400

08007d78 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b084      	sub	sp, #16
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	000a      	movs	r2, r1
 8007d82:	1cbb      	adds	r3, r7, #2
 8007d84:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	691b      	ldr	r3, [r3, #16]
 8007d8a:	1cba      	adds	r2, r7, #2
 8007d8c:	8812      	ldrh	r2, [r2, #0]
 8007d8e:	4013      	ands	r3, r2
 8007d90:	d004      	beq.n	8007d9c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8007d92:	230f      	movs	r3, #15
 8007d94:	18fb      	adds	r3, r7, r3
 8007d96:	2201      	movs	r2, #1
 8007d98:	701a      	strb	r2, [r3, #0]
 8007d9a:	e003      	b.n	8007da4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007d9c:	230f      	movs	r3, #15
 8007d9e:	18fb      	adds	r3, r7, r3
 8007da0:	2200      	movs	r2, #0
 8007da2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8007da4:	230f      	movs	r3, #15
 8007da6:	18fb      	adds	r3, r7, r3
 8007da8:	781b      	ldrb	r3, [r3, #0]
}
 8007daa:	0018      	movs	r0, r3
 8007dac:	46bd      	mov	sp, r7
 8007dae:	b004      	add	sp, #16
 8007db0:	bd80      	pop	{r7, pc}

08007db2 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007db2:	b580      	push	{r7, lr}
 8007db4:	b082      	sub	sp, #8
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
 8007dba:	0008      	movs	r0, r1
 8007dbc:	0011      	movs	r1, r2
 8007dbe:	1cbb      	adds	r3, r7, #2
 8007dc0:	1c02      	adds	r2, r0, #0
 8007dc2:	801a      	strh	r2, [r3, #0]
 8007dc4:	1c7b      	adds	r3, r7, #1
 8007dc6:	1c0a      	adds	r2, r1, #0
 8007dc8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007dca:	1c7b      	adds	r3, r7, #1
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d004      	beq.n	8007ddc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007dd2:	1cbb      	adds	r3, r7, #2
 8007dd4:	881a      	ldrh	r2, [r3, #0]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8007dda:	e003      	b.n	8007de4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8007ddc:	1cbb      	adds	r3, r7, #2
 8007dde:	881a      	ldrh	r2, [r3, #0]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007de4:	46c0      	nop			; (mov r8, r8)
 8007de6:	46bd      	mov	sp, r7
 8007de8:	b002      	add	sp, #8
 8007dea:	bd80      	pop	{r7, pc}

08007dec <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b084      	sub	sp, #16
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	000a      	movs	r2, r1
 8007df6:	1cbb      	adds	r3, r7, #2
 8007df8:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	695b      	ldr	r3, [r3, #20]
 8007dfe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007e00:	1cbb      	adds	r3, r7, #2
 8007e02:	881b      	ldrh	r3, [r3, #0]
 8007e04:	68fa      	ldr	r2, [r7, #12]
 8007e06:	4013      	ands	r3, r2
 8007e08:	041a      	lsls	r2, r3, #16
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	43db      	mvns	r3, r3
 8007e0e:	1cb9      	adds	r1, r7, #2
 8007e10:	8809      	ldrh	r1, [r1, #0]
 8007e12:	400b      	ands	r3, r1
 8007e14:	431a      	orrs	r2, r3
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	619a      	str	r2, [r3, #24]
}
 8007e1a:	46c0      	nop			; (mov r8, r8)
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	b004      	add	sp, #16
 8007e20:	bd80      	pop	{r7, pc}
	...

08007e24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b082      	sub	sp, #8
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d101      	bne.n	8007e36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007e32:	2301      	movs	r3, #1
 8007e34:	e082      	b.n	8007f3c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2241      	movs	r2, #65	; 0x41
 8007e3a:	5c9b      	ldrb	r3, [r3, r2]
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d107      	bne.n	8007e52 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2240      	movs	r2, #64	; 0x40
 8007e46:	2100      	movs	r1, #0
 8007e48:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	0018      	movs	r0, r3
 8007e4e:	f000 f87f 	bl	8007f50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2241      	movs	r2, #65	; 0x41
 8007e56:	2124      	movs	r1, #36	; 0x24
 8007e58:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	2101      	movs	r1, #1
 8007e66:	438a      	bics	r2, r1
 8007e68:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	685a      	ldr	r2, [r3, #4]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4934      	ldr	r1, [pc, #208]	; (8007f44 <HAL_I2C_Init+0x120>)
 8007e74:	400a      	ands	r2, r1
 8007e76:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	689a      	ldr	r2, [r3, #8]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4931      	ldr	r1, [pc, #196]	; (8007f48 <HAL_I2C_Init+0x124>)
 8007e84:	400a      	ands	r2, r1
 8007e86:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	68db      	ldr	r3, [r3, #12]
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	d108      	bne.n	8007ea2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	689a      	ldr	r2, [r3, #8]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	2180      	movs	r1, #128	; 0x80
 8007e9a:	0209      	lsls	r1, r1, #8
 8007e9c:	430a      	orrs	r2, r1
 8007e9e:	609a      	str	r2, [r3, #8]
 8007ea0:	e007      	b.n	8007eb2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	689a      	ldr	r2, [r3, #8]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	2184      	movs	r1, #132	; 0x84
 8007eac:	0209      	lsls	r1, r1, #8
 8007eae:	430a      	orrs	r2, r1
 8007eb0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	68db      	ldr	r3, [r3, #12]
 8007eb6:	2b02      	cmp	r3, #2
 8007eb8:	d104      	bne.n	8007ec4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	2280      	movs	r2, #128	; 0x80
 8007ec0:	0112      	lsls	r2, r2, #4
 8007ec2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	685a      	ldr	r2, [r3, #4]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	491f      	ldr	r1, [pc, #124]	; (8007f4c <HAL_I2C_Init+0x128>)
 8007ed0:	430a      	orrs	r2, r1
 8007ed2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	68da      	ldr	r2, [r3, #12]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	491a      	ldr	r1, [pc, #104]	; (8007f48 <HAL_I2C_Init+0x124>)
 8007ee0:	400a      	ands	r2, r1
 8007ee2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	691a      	ldr	r2, [r3, #16]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	695b      	ldr	r3, [r3, #20]
 8007eec:	431a      	orrs	r2, r3
 8007eee:	0011      	movs	r1, r2
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	699b      	ldr	r3, [r3, #24]
 8007ef4:	021a      	lsls	r2, r3, #8
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	430a      	orrs	r2, r1
 8007efc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	69d9      	ldr	r1, [r3, #28]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6a1a      	ldr	r2, [r3, #32]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	430a      	orrs	r2, r1
 8007f0c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	2101      	movs	r1, #1
 8007f1a:	430a      	orrs	r2, r1
 8007f1c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2200      	movs	r2, #0
 8007f22:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2241      	movs	r2, #65	; 0x41
 8007f28:	2120      	movs	r1, #32
 8007f2a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2242      	movs	r2, #66	; 0x42
 8007f36:	2100      	movs	r1, #0
 8007f38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007f3a:	2300      	movs	r3, #0
}
 8007f3c:	0018      	movs	r0, r3
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	b002      	add	sp, #8
 8007f42:	bd80      	pop	{r7, pc}
 8007f44:	f0ffffff 	.word	0xf0ffffff
 8007f48:	ffff7fff 	.word	0xffff7fff
 8007f4c:	02008000 	.word	0x02008000

08007f50 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b082      	sub	sp, #8
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8007f58:	46c0      	nop			; (mov r8, r8)
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	b002      	add	sp, #8
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f60:	b590      	push	{r4, r7, lr}
 8007f62:	b089      	sub	sp, #36	; 0x24
 8007f64:	af02      	add	r7, sp, #8
 8007f66:	60f8      	str	r0, [r7, #12]
 8007f68:	000c      	movs	r4, r1
 8007f6a:	0010      	movs	r0, r2
 8007f6c:	0019      	movs	r1, r3
 8007f6e:	230a      	movs	r3, #10
 8007f70:	18fb      	adds	r3, r7, r3
 8007f72:	1c22      	adds	r2, r4, #0
 8007f74:	801a      	strh	r2, [r3, #0]
 8007f76:	2308      	movs	r3, #8
 8007f78:	18fb      	adds	r3, r7, r3
 8007f7a:	1c02      	adds	r2, r0, #0
 8007f7c:	801a      	strh	r2, [r3, #0]
 8007f7e:	1dbb      	adds	r3, r7, #6
 8007f80:	1c0a      	adds	r2, r1, #0
 8007f82:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2241      	movs	r2, #65	; 0x41
 8007f88:	5c9b      	ldrb	r3, [r3, r2]
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	2b20      	cmp	r3, #32
 8007f8e:	d000      	beq.n	8007f92 <HAL_I2C_Mem_Write+0x32>
 8007f90:	e10c      	b.n	80081ac <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d004      	beq.n	8007fa2 <HAL_I2C_Mem_Write+0x42>
 8007f98:	232c      	movs	r3, #44	; 0x2c
 8007f9a:	18fb      	adds	r3, r7, r3
 8007f9c:	881b      	ldrh	r3, [r3, #0]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d105      	bne.n	8007fae <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2280      	movs	r2, #128	; 0x80
 8007fa6:	0092      	lsls	r2, r2, #2
 8007fa8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007faa:	2301      	movs	r3, #1
 8007fac:	e0ff      	b.n	80081ae <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2240      	movs	r2, #64	; 0x40
 8007fb2:	5c9b      	ldrb	r3, [r3, r2]
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d101      	bne.n	8007fbc <HAL_I2C_Mem_Write+0x5c>
 8007fb8:	2302      	movs	r3, #2
 8007fba:	e0f8      	b.n	80081ae <HAL_I2C_Mem_Write+0x24e>
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2240      	movs	r2, #64	; 0x40
 8007fc0:	2101      	movs	r1, #1
 8007fc2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007fc4:	f7fd f8c5 	bl	8005152 <HAL_GetTick>
 8007fc8:	0003      	movs	r3, r0
 8007fca:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007fcc:	2380      	movs	r3, #128	; 0x80
 8007fce:	0219      	lsls	r1, r3, #8
 8007fd0:	68f8      	ldr	r0, [r7, #12]
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	9300      	str	r3, [sp, #0]
 8007fd6:	2319      	movs	r3, #25
 8007fd8:	2201      	movs	r2, #1
 8007fda:	f000 fb17 	bl	800860c <I2C_WaitOnFlagUntilTimeout>
 8007fde:	1e03      	subs	r3, r0, #0
 8007fe0:	d001      	beq.n	8007fe6 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e0e3      	b.n	80081ae <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2241      	movs	r2, #65	; 0x41
 8007fea:	2121      	movs	r1, #33	; 0x21
 8007fec:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2242      	movs	r2, #66	; 0x42
 8007ff2:	2140      	movs	r1, #64	; 0x40
 8007ff4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008000:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	222c      	movs	r2, #44	; 0x2c
 8008006:	18ba      	adds	r2, r7, r2
 8008008:	8812      	ldrh	r2, [r2, #0]
 800800a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2200      	movs	r2, #0
 8008010:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008012:	1dbb      	adds	r3, r7, #6
 8008014:	881c      	ldrh	r4, [r3, #0]
 8008016:	2308      	movs	r3, #8
 8008018:	18fb      	adds	r3, r7, r3
 800801a:	881a      	ldrh	r2, [r3, #0]
 800801c:	230a      	movs	r3, #10
 800801e:	18fb      	adds	r3, r7, r3
 8008020:	8819      	ldrh	r1, [r3, #0]
 8008022:	68f8      	ldr	r0, [r7, #12]
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	9301      	str	r3, [sp, #4]
 8008028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800802a:	9300      	str	r3, [sp, #0]
 800802c:	0023      	movs	r3, r4
 800802e:	f000 fa05 	bl	800843c <I2C_RequestMemoryWrite>
 8008032:	1e03      	subs	r3, r0, #0
 8008034:	d005      	beq.n	8008042 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2240      	movs	r2, #64	; 0x40
 800803a:	2100      	movs	r1, #0
 800803c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800803e:	2301      	movs	r3, #1
 8008040:	e0b5      	b.n	80081ae <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008046:	b29b      	uxth	r3, r3
 8008048:	2bff      	cmp	r3, #255	; 0xff
 800804a:	d911      	bls.n	8008070 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	22ff      	movs	r2, #255	; 0xff
 8008050:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008056:	b2da      	uxtb	r2, r3
 8008058:	2380      	movs	r3, #128	; 0x80
 800805a:	045c      	lsls	r4, r3, #17
 800805c:	230a      	movs	r3, #10
 800805e:	18fb      	adds	r3, r7, r3
 8008060:	8819      	ldrh	r1, [r3, #0]
 8008062:	68f8      	ldr	r0, [r7, #12]
 8008064:	2300      	movs	r3, #0
 8008066:	9300      	str	r3, [sp, #0]
 8008068:	0023      	movs	r3, r4
 800806a:	f000 fbef 	bl	800884c <I2C_TransferConfig>
 800806e:	e012      	b.n	8008096 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008074:	b29a      	uxth	r2, r3
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800807e:	b2da      	uxtb	r2, r3
 8008080:	2380      	movs	r3, #128	; 0x80
 8008082:	049c      	lsls	r4, r3, #18
 8008084:	230a      	movs	r3, #10
 8008086:	18fb      	adds	r3, r7, r3
 8008088:	8819      	ldrh	r1, [r3, #0]
 800808a:	68f8      	ldr	r0, [r7, #12]
 800808c:	2300      	movs	r3, #0
 800808e:	9300      	str	r3, [sp, #0]
 8008090:	0023      	movs	r3, r4
 8008092:	f000 fbdb 	bl	800884c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008096:	697a      	ldr	r2, [r7, #20]
 8008098:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	0018      	movs	r0, r3
 800809e:	f000 faf4 	bl	800868a <I2C_WaitOnTXISFlagUntilTimeout>
 80080a2:	1e03      	subs	r3, r0, #0
 80080a4:	d001      	beq.n	80080aa <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80080a6:	2301      	movs	r3, #1
 80080a8:	e081      	b.n	80081ae <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ae:	781a      	ldrb	r2, [r3, #0]
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ba:	1c5a      	adds	r2, r3, #1
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	3b01      	subs	r3, #1
 80080c8:	b29a      	uxth	r2, r3
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080d2:	3b01      	subs	r3, #1
 80080d4:	b29a      	uxth	r2, r3
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080de:	b29b      	uxth	r3, r3
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d03a      	beq.n	800815a <HAL_I2C_Mem_Write+0x1fa>
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d136      	bne.n	800815a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80080ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080ee:	68f8      	ldr	r0, [r7, #12]
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	9300      	str	r3, [sp, #0]
 80080f4:	0013      	movs	r3, r2
 80080f6:	2200      	movs	r2, #0
 80080f8:	2180      	movs	r1, #128	; 0x80
 80080fa:	f000 fa87 	bl	800860c <I2C_WaitOnFlagUntilTimeout>
 80080fe:	1e03      	subs	r3, r0, #0
 8008100:	d001      	beq.n	8008106 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8008102:	2301      	movs	r3, #1
 8008104:	e053      	b.n	80081ae <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800810a:	b29b      	uxth	r3, r3
 800810c:	2bff      	cmp	r3, #255	; 0xff
 800810e:	d911      	bls.n	8008134 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	22ff      	movs	r2, #255	; 0xff
 8008114:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800811a:	b2da      	uxtb	r2, r3
 800811c:	2380      	movs	r3, #128	; 0x80
 800811e:	045c      	lsls	r4, r3, #17
 8008120:	230a      	movs	r3, #10
 8008122:	18fb      	adds	r3, r7, r3
 8008124:	8819      	ldrh	r1, [r3, #0]
 8008126:	68f8      	ldr	r0, [r7, #12]
 8008128:	2300      	movs	r3, #0
 800812a:	9300      	str	r3, [sp, #0]
 800812c:	0023      	movs	r3, r4
 800812e:	f000 fb8d 	bl	800884c <I2C_TransferConfig>
 8008132:	e012      	b.n	800815a <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008138:	b29a      	uxth	r2, r3
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008142:	b2da      	uxtb	r2, r3
 8008144:	2380      	movs	r3, #128	; 0x80
 8008146:	049c      	lsls	r4, r3, #18
 8008148:	230a      	movs	r3, #10
 800814a:	18fb      	adds	r3, r7, r3
 800814c:	8819      	ldrh	r1, [r3, #0]
 800814e:	68f8      	ldr	r0, [r7, #12]
 8008150:	2300      	movs	r3, #0
 8008152:	9300      	str	r3, [sp, #0]
 8008154:	0023      	movs	r3, r4
 8008156:	f000 fb79 	bl	800884c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800815e:	b29b      	uxth	r3, r3
 8008160:	2b00      	cmp	r3, #0
 8008162:	d198      	bne.n	8008096 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008164:	697a      	ldr	r2, [r7, #20]
 8008166:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	0018      	movs	r0, r3
 800816c:	f000 facc 	bl	8008708 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008170:	1e03      	subs	r3, r0, #0
 8008172:	d001      	beq.n	8008178 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8008174:	2301      	movs	r3, #1
 8008176:	e01a      	b.n	80081ae <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	2220      	movs	r2, #32
 800817e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	685a      	ldr	r2, [r3, #4]
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	490b      	ldr	r1, [pc, #44]	; (80081b8 <HAL_I2C_Mem_Write+0x258>)
 800818c:	400a      	ands	r2, r1
 800818e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2241      	movs	r2, #65	; 0x41
 8008194:	2120      	movs	r1, #32
 8008196:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2242      	movs	r2, #66	; 0x42
 800819c:	2100      	movs	r1, #0
 800819e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2240      	movs	r2, #64	; 0x40
 80081a4:	2100      	movs	r1, #0
 80081a6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80081a8:	2300      	movs	r3, #0
 80081aa:	e000      	b.n	80081ae <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80081ac:	2302      	movs	r3, #2
  }
}
 80081ae:	0018      	movs	r0, r3
 80081b0:	46bd      	mov	sp, r7
 80081b2:	b007      	add	sp, #28
 80081b4:	bd90      	pop	{r4, r7, pc}
 80081b6:	46c0      	nop			; (mov r8, r8)
 80081b8:	fe00e800 	.word	0xfe00e800

080081bc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80081bc:	b590      	push	{r4, r7, lr}
 80081be:	b089      	sub	sp, #36	; 0x24
 80081c0:	af02      	add	r7, sp, #8
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	000c      	movs	r4, r1
 80081c6:	0010      	movs	r0, r2
 80081c8:	0019      	movs	r1, r3
 80081ca:	230a      	movs	r3, #10
 80081cc:	18fb      	adds	r3, r7, r3
 80081ce:	1c22      	adds	r2, r4, #0
 80081d0:	801a      	strh	r2, [r3, #0]
 80081d2:	2308      	movs	r3, #8
 80081d4:	18fb      	adds	r3, r7, r3
 80081d6:	1c02      	adds	r2, r0, #0
 80081d8:	801a      	strh	r2, [r3, #0]
 80081da:	1dbb      	adds	r3, r7, #6
 80081dc:	1c0a      	adds	r2, r1, #0
 80081de:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2241      	movs	r2, #65	; 0x41
 80081e4:	5c9b      	ldrb	r3, [r3, r2]
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	2b20      	cmp	r3, #32
 80081ea:	d000      	beq.n	80081ee <HAL_I2C_Mem_Read+0x32>
 80081ec:	e110      	b.n	8008410 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80081ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d004      	beq.n	80081fe <HAL_I2C_Mem_Read+0x42>
 80081f4:	232c      	movs	r3, #44	; 0x2c
 80081f6:	18fb      	adds	r3, r7, r3
 80081f8:	881b      	ldrh	r3, [r3, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d105      	bne.n	800820a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2280      	movs	r2, #128	; 0x80
 8008202:	0092      	lsls	r2, r2, #2
 8008204:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008206:	2301      	movs	r3, #1
 8008208:	e103      	b.n	8008412 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2240      	movs	r2, #64	; 0x40
 800820e:	5c9b      	ldrb	r3, [r3, r2]
 8008210:	2b01      	cmp	r3, #1
 8008212:	d101      	bne.n	8008218 <HAL_I2C_Mem_Read+0x5c>
 8008214:	2302      	movs	r3, #2
 8008216:	e0fc      	b.n	8008412 <HAL_I2C_Mem_Read+0x256>
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2240      	movs	r2, #64	; 0x40
 800821c:	2101      	movs	r1, #1
 800821e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008220:	f7fc ff97 	bl	8005152 <HAL_GetTick>
 8008224:	0003      	movs	r3, r0
 8008226:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008228:	2380      	movs	r3, #128	; 0x80
 800822a:	0219      	lsls	r1, r3, #8
 800822c:	68f8      	ldr	r0, [r7, #12]
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	9300      	str	r3, [sp, #0]
 8008232:	2319      	movs	r3, #25
 8008234:	2201      	movs	r2, #1
 8008236:	f000 f9e9 	bl	800860c <I2C_WaitOnFlagUntilTimeout>
 800823a:	1e03      	subs	r3, r0, #0
 800823c:	d001      	beq.n	8008242 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800823e:	2301      	movs	r3, #1
 8008240:	e0e7      	b.n	8008412 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2241      	movs	r2, #65	; 0x41
 8008246:	2122      	movs	r1, #34	; 0x22
 8008248:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2242      	movs	r2, #66	; 0x42
 800824e:	2140      	movs	r1, #64	; 0x40
 8008250:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2200      	movs	r2, #0
 8008256:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800825c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	222c      	movs	r2, #44	; 0x2c
 8008262:	18ba      	adds	r2, r7, r2
 8008264:	8812      	ldrh	r2, [r2, #0]
 8008266:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2200      	movs	r2, #0
 800826c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800826e:	1dbb      	adds	r3, r7, #6
 8008270:	881c      	ldrh	r4, [r3, #0]
 8008272:	2308      	movs	r3, #8
 8008274:	18fb      	adds	r3, r7, r3
 8008276:	881a      	ldrh	r2, [r3, #0]
 8008278:	230a      	movs	r3, #10
 800827a:	18fb      	adds	r3, r7, r3
 800827c:	8819      	ldrh	r1, [r3, #0]
 800827e:	68f8      	ldr	r0, [r7, #12]
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	9301      	str	r3, [sp, #4]
 8008284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008286:	9300      	str	r3, [sp, #0]
 8008288:	0023      	movs	r3, r4
 800828a:	f000 f93b 	bl	8008504 <I2C_RequestMemoryRead>
 800828e:	1e03      	subs	r3, r0, #0
 8008290:	d005      	beq.n	800829e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2240      	movs	r2, #64	; 0x40
 8008296:	2100      	movs	r1, #0
 8008298:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800829a:	2301      	movs	r3, #1
 800829c:	e0b9      	b.n	8008412 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	2bff      	cmp	r3, #255	; 0xff
 80082a6:	d911      	bls.n	80082cc <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	22ff      	movs	r2, #255	; 0xff
 80082ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082b2:	b2da      	uxtb	r2, r3
 80082b4:	2380      	movs	r3, #128	; 0x80
 80082b6:	045c      	lsls	r4, r3, #17
 80082b8:	230a      	movs	r3, #10
 80082ba:	18fb      	adds	r3, r7, r3
 80082bc:	8819      	ldrh	r1, [r3, #0]
 80082be:	68f8      	ldr	r0, [r7, #12]
 80082c0:	4b56      	ldr	r3, [pc, #344]	; (800841c <HAL_I2C_Mem_Read+0x260>)
 80082c2:	9300      	str	r3, [sp, #0]
 80082c4:	0023      	movs	r3, r4
 80082c6:	f000 fac1 	bl	800884c <I2C_TransferConfig>
 80082ca:	e012      	b.n	80082f2 <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082d0:	b29a      	uxth	r2, r3
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082da:	b2da      	uxtb	r2, r3
 80082dc:	2380      	movs	r3, #128	; 0x80
 80082de:	049c      	lsls	r4, r3, #18
 80082e0:	230a      	movs	r3, #10
 80082e2:	18fb      	adds	r3, r7, r3
 80082e4:	8819      	ldrh	r1, [r3, #0]
 80082e6:	68f8      	ldr	r0, [r7, #12]
 80082e8:	4b4c      	ldr	r3, [pc, #304]	; (800841c <HAL_I2C_Mem_Read+0x260>)
 80082ea:	9300      	str	r3, [sp, #0]
 80082ec:	0023      	movs	r3, r4
 80082ee:	f000 faad 	bl	800884c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80082f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082f4:	68f8      	ldr	r0, [r7, #12]
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	9300      	str	r3, [sp, #0]
 80082fa:	0013      	movs	r3, r2
 80082fc:	2200      	movs	r2, #0
 80082fe:	2104      	movs	r1, #4
 8008300:	f000 f984 	bl	800860c <I2C_WaitOnFlagUntilTimeout>
 8008304:	1e03      	subs	r3, r0, #0
 8008306:	d001      	beq.n	800830c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8008308:	2301      	movs	r3, #1
 800830a:	e082      	b.n	8008412 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008316:	b2d2      	uxtb	r2, r2
 8008318:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800831e:	1c5a      	adds	r2, r3, #1
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008328:	3b01      	subs	r3, #1
 800832a:	b29a      	uxth	r2, r3
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008334:	b29b      	uxth	r3, r3
 8008336:	3b01      	subs	r3, #1
 8008338:	b29a      	uxth	r2, r3
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008342:	b29b      	uxth	r3, r3
 8008344:	2b00      	cmp	r3, #0
 8008346:	d03a      	beq.n	80083be <HAL_I2C_Mem_Read+0x202>
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800834c:	2b00      	cmp	r3, #0
 800834e:	d136      	bne.n	80083be <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008350:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008352:	68f8      	ldr	r0, [r7, #12]
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	9300      	str	r3, [sp, #0]
 8008358:	0013      	movs	r3, r2
 800835a:	2200      	movs	r2, #0
 800835c:	2180      	movs	r1, #128	; 0x80
 800835e:	f000 f955 	bl	800860c <I2C_WaitOnFlagUntilTimeout>
 8008362:	1e03      	subs	r3, r0, #0
 8008364:	d001      	beq.n	800836a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8008366:	2301      	movs	r3, #1
 8008368:	e053      	b.n	8008412 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800836e:	b29b      	uxth	r3, r3
 8008370:	2bff      	cmp	r3, #255	; 0xff
 8008372:	d911      	bls.n	8008398 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	22ff      	movs	r2, #255	; 0xff
 8008378:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800837e:	b2da      	uxtb	r2, r3
 8008380:	2380      	movs	r3, #128	; 0x80
 8008382:	045c      	lsls	r4, r3, #17
 8008384:	230a      	movs	r3, #10
 8008386:	18fb      	adds	r3, r7, r3
 8008388:	8819      	ldrh	r1, [r3, #0]
 800838a:	68f8      	ldr	r0, [r7, #12]
 800838c:	2300      	movs	r3, #0
 800838e:	9300      	str	r3, [sp, #0]
 8008390:	0023      	movs	r3, r4
 8008392:	f000 fa5b 	bl	800884c <I2C_TransferConfig>
 8008396:	e012      	b.n	80083be <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800839c:	b29a      	uxth	r2, r3
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083a6:	b2da      	uxtb	r2, r3
 80083a8:	2380      	movs	r3, #128	; 0x80
 80083aa:	049c      	lsls	r4, r3, #18
 80083ac:	230a      	movs	r3, #10
 80083ae:	18fb      	adds	r3, r7, r3
 80083b0:	8819      	ldrh	r1, [r3, #0]
 80083b2:	68f8      	ldr	r0, [r7, #12]
 80083b4:	2300      	movs	r3, #0
 80083b6:	9300      	str	r3, [sp, #0]
 80083b8:	0023      	movs	r3, r4
 80083ba:	f000 fa47 	bl	800884c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d194      	bne.n	80082f2 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80083c8:	697a      	ldr	r2, [r7, #20]
 80083ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	0018      	movs	r0, r3
 80083d0:	f000 f99a 	bl	8008708 <I2C_WaitOnSTOPFlagUntilTimeout>
 80083d4:	1e03      	subs	r3, r0, #0
 80083d6:	d001      	beq.n	80083dc <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	e01a      	b.n	8008412 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	2220      	movs	r2, #32
 80083e2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	685a      	ldr	r2, [r3, #4]
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	490c      	ldr	r1, [pc, #48]	; (8008420 <HAL_I2C_Mem_Read+0x264>)
 80083f0:	400a      	ands	r2, r1
 80083f2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2241      	movs	r2, #65	; 0x41
 80083f8:	2120      	movs	r1, #32
 80083fa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2242      	movs	r2, #66	; 0x42
 8008400:	2100      	movs	r1, #0
 8008402:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2240      	movs	r2, #64	; 0x40
 8008408:	2100      	movs	r1, #0
 800840a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800840c:	2300      	movs	r3, #0
 800840e:	e000      	b.n	8008412 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8008410:	2302      	movs	r3, #2
  }
}
 8008412:	0018      	movs	r0, r3
 8008414:	46bd      	mov	sp, r7
 8008416:	b007      	add	sp, #28
 8008418:	bd90      	pop	{r4, r7, pc}
 800841a:	46c0      	nop			; (mov r8, r8)
 800841c:	80002400 	.word	0x80002400
 8008420:	fe00e800 	.word	0xfe00e800

08008424 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b082      	sub	sp, #8
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2241      	movs	r2, #65	; 0x41
 8008430:	5c9b      	ldrb	r3, [r3, r2]
 8008432:	b2db      	uxtb	r3, r3
}
 8008434:	0018      	movs	r0, r3
 8008436:	46bd      	mov	sp, r7
 8008438:	b002      	add	sp, #8
 800843a:	bd80      	pop	{r7, pc}

0800843c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800843c:	b5b0      	push	{r4, r5, r7, lr}
 800843e:	b086      	sub	sp, #24
 8008440:	af02      	add	r7, sp, #8
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	000c      	movs	r4, r1
 8008446:	0010      	movs	r0, r2
 8008448:	0019      	movs	r1, r3
 800844a:	250a      	movs	r5, #10
 800844c:	197b      	adds	r3, r7, r5
 800844e:	1c22      	adds	r2, r4, #0
 8008450:	801a      	strh	r2, [r3, #0]
 8008452:	2308      	movs	r3, #8
 8008454:	18fb      	adds	r3, r7, r3
 8008456:	1c02      	adds	r2, r0, #0
 8008458:	801a      	strh	r2, [r3, #0]
 800845a:	1dbb      	adds	r3, r7, #6
 800845c:	1c0a      	adds	r2, r1, #0
 800845e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008460:	1dbb      	adds	r3, r7, #6
 8008462:	881b      	ldrh	r3, [r3, #0]
 8008464:	b2da      	uxtb	r2, r3
 8008466:	2380      	movs	r3, #128	; 0x80
 8008468:	045c      	lsls	r4, r3, #17
 800846a:	197b      	adds	r3, r7, r5
 800846c:	8819      	ldrh	r1, [r3, #0]
 800846e:	68f8      	ldr	r0, [r7, #12]
 8008470:	4b23      	ldr	r3, [pc, #140]	; (8008500 <I2C_RequestMemoryWrite+0xc4>)
 8008472:	9300      	str	r3, [sp, #0]
 8008474:	0023      	movs	r3, r4
 8008476:	f000 f9e9 	bl	800884c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800847a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800847c:	6a39      	ldr	r1, [r7, #32]
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	0018      	movs	r0, r3
 8008482:	f000 f902 	bl	800868a <I2C_WaitOnTXISFlagUntilTimeout>
 8008486:	1e03      	subs	r3, r0, #0
 8008488:	d001      	beq.n	800848e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800848a:	2301      	movs	r3, #1
 800848c:	e033      	b.n	80084f6 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800848e:	1dbb      	adds	r3, r7, #6
 8008490:	881b      	ldrh	r3, [r3, #0]
 8008492:	2b01      	cmp	r3, #1
 8008494:	d107      	bne.n	80084a6 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008496:	2308      	movs	r3, #8
 8008498:	18fb      	adds	r3, r7, r3
 800849a:	881b      	ldrh	r3, [r3, #0]
 800849c:	b2da      	uxtb	r2, r3
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	629a      	str	r2, [r3, #40]	; 0x28
 80084a4:	e019      	b.n	80084da <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80084a6:	2308      	movs	r3, #8
 80084a8:	18fb      	adds	r3, r7, r3
 80084aa:	881b      	ldrh	r3, [r3, #0]
 80084ac:	0a1b      	lsrs	r3, r3, #8
 80084ae:	b29b      	uxth	r3, r3
 80084b0:	b2da      	uxtb	r2, r3
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80084b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084ba:	6a39      	ldr	r1, [r7, #32]
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	0018      	movs	r0, r3
 80084c0:	f000 f8e3 	bl	800868a <I2C_WaitOnTXISFlagUntilTimeout>
 80084c4:	1e03      	subs	r3, r0, #0
 80084c6:	d001      	beq.n	80084cc <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80084c8:	2301      	movs	r3, #1
 80084ca:	e014      	b.n	80084f6 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80084cc:	2308      	movs	r3, #8
 80084ce:	18fb      	adds	r3, r7, r3
 80084d0:	881b      	ldrh	r3, [r3, #0]
 80084d2:	b2da      	uxtb	r2, r3
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80084da:	6a3a      	ldr	r2, [r7, #32]
 80084dc:	68f8      	ldr	r0, [r7, #12]
 80084de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e0:	9300      	str	r3, [sp, #0]
 80084e2:	0013      	movs	r3, r2
 80084e4:	2200      	movs	r2, #0
 80084e6:	2180      	movs	r1, #128	; 0x80
 80084e8:	f000 f890 	bl	800860c <I2C_WaitOnFlagUntilTimeout>
 80084ec:	1e03      	subs	r3, r0, #0
 80084ee:	d001      	beq.n	80084f4 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80084f0:	2301      	movs	r3, #1
 80084f2:	e000      	b.n	80084f6 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80084f4:	2300      	movs	r3, #0
}
 80084f6:	0018      	movs	r0, r3
 80084f8:	46bd      	mov	sp, r7
 80084fa:	b004      	add	sp, #16
 80084fc:	bdb0      	pop	{r4, r5, r7, pc}
 80084fe:	46c0      	nop			; (mov r8, r8)
 8008500:	80002000 	.word	0x80002000

08008504 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008504:	b5b0      	push	{r4, r5, r7, lr}
 8008506:	b086      	sub	sp, #24
 8008508:	af02      	add	r7, sp, #8
 800850a:	60f8      	str	r0, [r7, #12]
 800850c:	000c      	movs	r4, r1
 800850e:	0010      	movs	r0, r2
 8008510:	0019      	movs	r1, r3
 8008512:	250a      	movs	r5, #10
 8008514:	197b      	adds	r3, r7, r5
 8008516:	1c22      	adds	r2, r4, #0
 8008518:	801a      	strh	r2, [r3, #0]
 800851a:	2308      	movs	r3, #8
 800851c:	18fb      	adds	r3, r7, r3
 800851e:	1c02      	adds	r2, r0, #0
 8008520:	801a      	strh	r2, [r3, #0]
 8008522:	1dbb      	adds	r3, r7, #6
 8008524:	1c0a      	adds	r2, r1, #0
 8008526:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008528:	1dbb      	adds	r3, r7, #6
 800852a:	881b      	ldrh	r3, [r3, #0]
 800852c:	b2da      	uxtb	r2, r3
 800852e:	197b      	adds	r3, r7, r5
 8008530:	8819      	ldrh	r1, [r3, #0]
 8008532:	68f8      	ldr	r0, [r7, #12]
 8008534:	4b23      	ldr	r3, [pc, #140]	; (80085c4 <I2C_RequestMemoryRead+0xc0>)
 8008536:	9300      	str	r3, [sp, #0]
 8008538:	2300      	movs	r3, #0
 800853a:	f000 f987 	bl	800884c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800853e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008540:	6a39      	ldr	r1, [r7, #32]
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	0018      	movs	r0, r3
 8008546:	f000 f8a0 	bl	800868a <I2C_WaitOnTXISFlagUntilTimeout>
 800854a:	1e03      	subs	r3, r0, #0
 800854c:	d001      	beq.n	8008552 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800854e:	2301      	movs	r3, #1
 8008550:	e033      	b.n	80085ba <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008552:	1dbb      	adds	r3, r7, #6
 8008554:	881b      	ldrh	r3, [r3, #0]
 8008556:	2b01      	cmp	r3, #1
 8008558:	d107      	bne.n	800856a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800855a:	2308      	movs	r3, #8
 800855c:	18fb      	adds	r3, r7, r3
 800855e:	881b      	ldrh	r3, [r3, #0]
 8008560:	b2da      	uxtb	r2, r3
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	629a      	str	r2, [r3, #40]	; 0x28
 8008568:	e019      	b.n	800859e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800856a:	2308      	movs	r3, #8
 800856c:	18fb      	adds	r3, r7, r3
 800856e:	881b      	ldrh	r3, [r3, #0]
 8008570:	0a1b      	lsrs	r3, r3, #8
 8008572:	b29b      	uxth	r3, r3
 8008574:	b2da      	uxtb	r2, r3
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800857c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800857e:	6a39      	ldr	r1, [r7, #32]
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	0018      	movs	r0, r3
 8008584:	f000 f881 	bl	800868a <I2C_WaitOnTXISFlagUntilTimeout>
 8008588:	1e03      	subs	r3, r0, #0
 800858a:	d001      	beq.n	8008590 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 800858c:	2301      	movs	r3, #1
 800858e:	e014      	b.n	80085ba <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008590:	2308      	movs	r3, #8
 8008592:	18fb      	adds	r3, r7, r3
 8008594:	881b      	ldrh	r3, [r3, #0]
 8008596:	b2da      	uxtb	r2, r3
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800859e:	6a3a      	ldr	r2, [r7, #32]
 80085a0:	68f8      	ldr	r0, [r7, #12]
 80085a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a4:	9300      	str	r3, [sp, #0]
 80085a6:	0013      	movs	r3, r2
 80085a8:	2200      	movs	r2, #0
 80085aa:	2140      	movs	r1, #64	; 0x40
 80085ac:	f000 f82e 	bl	800860c <I2C_WaitOnFlagUntilTimeout>
 80085b0:	1e03      	subs	r3, r0, #0
 80085b2:	d001      	beq.n	80085b8 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80085b4:	2301      	movs	r3, #1
 80085b6:	e000      	b.n	80085ba <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80085b8:	2300      	movs	r3, #0
}
 80085ba:	0018      	movs	r0, r3
 80085bc:	46bd      	mov	sp, r7
 80085be:	b004      	add	sp, #16
 80085c0:	bdb0      	pop	{r4, r5, r7, pc}
 80085c2:	46c0      	nop			; (mov r8, r8)
 80085c4:	80002000 	.word	0x80002000

080085c8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b082      	sub	sp, #8
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	699b      	ldr	r3, [r3, #24]
 80085d6:	2202      	movs	r2, #2
 80085d8:	4013      	ands	r3, r2
 80085da:	2b02      	cmp	r3, #2
 80085dc:	d103      	bne.n	80085e6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	2200      	movs	r2, #0
 80085e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	699b      	ldr	r3, [r3, #24]
 80085ec:	2201      	movs	r2, #1
 80085ee:	4013      	ands	r3, r2
 80085f0:	2b01      	cmp	r3, #1
 80085f2:	d007      	beq.n	8008604 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	699a      	ldr	r2, [r3, #24]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	2101      	movs	r1, #1
 8008600:	430a      	orrs	r2, r1
 8008602:	619a      	str	r2, [r3, #24]
  }
}
 8008604:	46c0      	nop			; (mov r8, r8)
 8008606:	46bd      	mov	sp, r7
 8008608:	b002      	add	sp, #8
 800860a:	bd80      	pop	{r7, pc}

0800860c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b084      	sub	sp, #16
 8008610:	af00      	add	r7, sp, #0
 8008612:	60f8      	str	r0, [r7, #12]
 8008614:	60b9      	str	r1, [r7, #8]
 8008616:	603b      	str	r3, [r7, #0]
 8008618:	1dfb      	adds	r3, r7, #7
 800861a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800861c:	e021      	b.n	8008662 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	3301      	adds	r3, #1
 8008622:	d01e      	beq.n	8008662 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008624:	f7fc fd95 	bl	8005152 <HAL_GetTick>
 8008628:	0002      	movs	r2, r0
 800862a:	69bb      	ldr	r3, [r7, #24]
 800862c:	1ad3      	subs	r3, r2, r3
 800862e:	683a      	ldr	r2, [r7, #0]
 8008630:	429a      	cmp	r2, r3
 8008632:	d302      	bcc.n	800863a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d113      	bne.n	8008662 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800863e:	2220      	movs	r2, #32
 8008640:	431a      	orrs	r2, r3
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	2241      	movs	r2, #65	; 0x41
 800864a:	2120      	movs	r1, #32
 800864c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2242      	movs	r2, #66	; 0x42
 8008652:	2100      	movs	r1, #0
 8008654:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2240      	movs	r2, #64	; 0x40
 800865a:	2100      	movs	r1, #0
 800865c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800865e:	2301      	movs	r3, #1
 8008660:	e00f      	b.n	8008682 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	699b      	ldr	r3, [r3, #24]
 8008668:	68ba      	ldr	r2, [r7, #8]
 800866a:	4013      	ands	r3, r2
 800866c:	68ba      	ldr	r2, [r7, #8]
 800866e:	1ad3      	subs	r3, r2, r3
 8008670:	425a      	negs	r2, r3
 8008672:	4153      	adcs	r3, r2
 8008674:	b2db      	uxtb	r3, r3
 8008676:	001a      	movs	r2, r3
 8008678:	1dfb      	adds	r3, r7, #7
 800867a:	781b      	ldrb	r3, [r3, #0]
 800867c:	429a      	cmp	r2, r3
 800867e:	d0ce      	beq.n	800861e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008680:	2300      	movs	r3, #0
}
 8008682:	0018      	movs	r0, r3
 8008684:	46bd      	mov	sp, r7
 8008686:	b004      	add	sp, #16
 8008688:	bd80      	pop	{r7, pc}

0800868a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800868a:	b580      	push	{r7, lr}
 800868c:	b084      	sub	sp, #16
 800868e:	af00      	add	r7, sp, #0
 8008690:	60f8      	str	r0, [r7, #12]
 8008692:	60b9      	str	r1, [r7, #8]
 8008694:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008696:	e02b      	b.n	80086f0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8008698:	687a      	ldr	r2, [r7, #4]
 800869a:	68b9      	ldr	r1, [r7, #8]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	0018      	movs	r0, r3
 80086a0:	f000 f86e 	bl	8008780 <I2C_IsAcknowledgeFailed>
 80086a4:	1e03      	subs	r3, r0, #0
 80086a6:	d001      	beq.n	80086ac <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80086a8:	2301      	movs	r3, #1
 80086aa:	e029      	b.n	8008700 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	3301      	adds	r3, #1
 80086b0:	d01e      	beq.n	80086f0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086b2:	f7fc fd4e 	bl	8005152 <HAL_GetTick>
 80086b6:	0002      	movs	r2, r0
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	1ad3      	subs	r3, r2, r3
 80086bc:	68ba      	ldr	r2, [r7, #8]
 80086be:	429a      	cmp	r2, r3
 80086c0:	d302      	bcc.n	80086c8 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d113      	bne.n	80086f0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086cc:	2220      	movs	r2, #32
 80086ce:	431a      	orrs	r2, r3
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2241      	movs	r2, #65	; 0x41
 80086d8:	2120      	movs	r1, #32
 80086da:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2242      	movs	r2, #66	; 0x42
 80086e0:	2100      	movs	r1, #0
 80086e2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2240      	movs	r2, #64	; 0x40
 80086e8:	2100      	movs	r1, #0
 80086ea:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80086ec:	2301      	movs	r3, #1
 80086ee:	e007      	b.n	8008700 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	699b      	ldr	r3, [r3, #24]
 80086f6:	2202      	movs	r2, #2
 80086f8:	4013      	ands	r3, r2
 80086fa:	2b02      	cmp	r3, #2
 80086fc:	d1cc      	bne.n	8008698 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80086fe:	2300      	movs	r3, #0
}
 8008700:	0018      	movs	r0, r3
 8008702:	46bd      	mov	sp, r7
 8008704:	b004      	add	sp, #16
 8008706:	bd80      	pop	{r7, pc}

08008708 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b084      	sub	sp, #16
 800870c:	af00      	add	r7, sp, #0
 800870e:	60f8      	str	r0, [r7, #12]
 8008710:	60b9      	str	r1, [r7, #8]
 8008712:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008714:	e028      	b.n	8008768 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8008716:	687a      	ldr	r2, [r7, #4]
 8008718:	68b9      	ldr	r1, [r7, #8]
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	0018      	movs	r0, r3
 800871e:	f000 f82f 	bl	8008780 <I2C_IsAcknowledgeFailed>
 8008722:	1e03      	subs	r3, r0, #0
 8008724:	d001      	beq.n	800872a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008726:	2301      	movs	r3, #1
 8008728:	e026      	b.n	8008778 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800872a:	f7fc fd12 	bl	8005152 <HAL_GetTick>
 800872e:	0002      	movs	r2, r0
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	1ad3      	subs	r3, r2, r3
 8008734:	68ba      	ldr	r2, [r7, #8]
 8008736:	429a      	cmp	r2, r3
 8008738:	d302      	bcc.n	8008740 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d113      	bne.n	8008768 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008744:	2220      	movs	r2, #32
 8008746:	431a      	orrs	r2, r3
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2241      	movs	r2, #65	; 0x41
 8008750:	2120      	movs	r1, #32
 8008752:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2242      	movs	r2, #66	; 0x42
 8008758:	2100      	movs	r1, #0
 800875a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2240      	movs	r2, #64	; 0x40
 8008760:	2100      	movs	r1, #0
 8008762:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8008764:	2301      	movs	r3, #1
 8008766:	e007      	b.n	8008778 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	699b      	ldr	r3, [r3, #24]
 800876e:	2220      	movs	r2, #32
 8008770:	4013      	ands	r3, r2
 8008772:	2b20      	cmp	r3, #32
 8008774:	d1cf      	bne.n	8008716 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008776:	2300      	movs	r3, #0
}
 8008778:	0018      	movs	r0, r3
 800877a:	46bd      	mov	sp, r7
 800877c:	b004      	add	sp, #16
 800877e:	bd80      	pop	{r7, pc}

08008780 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b084      	sub	sp, #16
 8008784:	af00      	add	r7, sp, #0
 8008786:	60f8      	str	r0, [r7, #12]
 8008788:	60b9      	str	r1, [r7, #8]
 800878a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	699b      	ldr	r3, [r3, #24]
 8008792:	2210      	movs	r2, #16
 8008794:	4013      	ands	r3, r2
 8008796:	2b10      	cmp	r3, #16
 8008798:	d151      	bne.n	800883e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800879a:	e021      	b.n	80087e0 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	3301      	adds	r3, #1
 80087a0:	d01e      	beq.n	80087e0 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087a2:	f7fc fcd6 	bl	8005152 <HAL_GetTick>
 80087a6:	0002      	movs	r2, r0
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	1ad3      	subs	r3, r2, r3
 80087ac:	68ba      	ldr	r2, [r7, #8]
 80087ae:	429a      	cmp	r2, r3
 80087b0:	d302      	bcc.n	80087b8 <I2C_IsAcknowledgeFailed+0x38>
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d113      	bne.n	80087e0 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087bc:	2220      	movs	r2, #32
 80087be:	431a      	orrs	r2, r3
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2241      	movs	r2, #65	; 0x41
 80087c8:	2120      	movs	r1, #32
 80087ca:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2242      	movs	r2, #66	; 0x42
 80087d0:	2100      	movs	r1, #0
 80087d2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2240      	movs	r2, #64	; 0x40
 80087d8:	2100      	movs	r1, #0
 80087da:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80087dc:	2301      	movs	r3, #1
 80087de:	e02f      	b.n	8008840 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	699b      	ldr	r3, [r3, #24]
 80087e6:	2220      	movs	r2, #32
 80087e8:	4013      	ands	r3, r2
 80087ea:	2b20      	cmp	r3, #32
 80087ec:	d1d6      	bne.n	800879c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	2210      	movs	r2, #16
 80087f4:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	2220      	movs	r2, #32
 80087fc:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	0018      	movs	r0, r3
 8008802:	f7ff fee1 	bl	80085c8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	685a      	ldr	r2, [r3, #4]
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	490d      	ldr	r1, [pc, #52]	; (8008848 <I2C_IsAcknowledgeFailed+0xc8>)
 8008812:	400a      	ands	r2, r1
 8008814:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800881a:	2204      	movs	r2, #4
 800881c:	431a      	orrs	r2, r3
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2241      	movs	r2, #65	; 0x41
 8008826:	2120      	movs	r1, #32
 8008828:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2242      	movs	r2, #66	; 0x42
 800882e:	2100      	movs	r1, #0
 8008830:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2240      	movs	r2, #64	; 0x40
 8008836:	2100      	movs	r1, #0
 8008838:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800883a:	2301      	movs	r3, #1
 800883c:	e000      	b.n	8008840 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800883e:	2300      	movs	r3, #0
}
 8008840:	0018      	movs	r0, r3
 8008842:	46bd      	mov	sp, r7
 8008844:	b004      	add	sp, #16
 8008846:	bd80      	pop	{r7, pc}
 8008848:	fe00e800 	.word	0xfe00e800

0800884c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800884c:	b590      	push	{r4, r7, lr}
 800884e:	b085      	sub	sp, #20
 8008850:	af00      	add	r7, sp, #0
 8008852:	60f8      	str	r0, [r7, #12]
 8008854:	0008      	movs	r0, r1
 8008856:	0011      	movs	r1, r2
 8008858:	607b      	str	r3, [r7, #4]
 800885a:	240a      	movs	r4, #10
 800885c:	193b      	adds	r3, r7, r4
 800885e:	1c02      	adds	r2, r0, #0
 8008860:	801a      	strh	r2, [r3, #0]
 8008862:	2009      	movs	r0, #9
 8008864:	183b      	adds	r3, r7, r0
 8008866:	1c0a      	adds	r2, r1, #0
 8008868:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	6a3a      	ldr	r2, [r7, #32]
 8008872:	0d51      	lsrs	r1, r2, #21
 8008874:	2280      	movs	r2, #128	; 0x80
 8008876:	00d2      	lsls	r2, r2, #3
 8008878:	400a      	ands	r2, r1
 800887a:	490e      	ldr	r1, [pc, #56]	; (80088b4 <I2C_TransferConfig+0x68>)
 800887c:	430a      	orrs	r2, r1
 800887e:	43d2      	mvns	r2, r2
 8008880:	401a      	ands	r2, r3
 8008882:	0011      	movs	r1, r2
 8008884:	193b      	adds	r3, r7, r4
 8008886:	881b      	ldrh	r3, [r3, #0]
 8008888:	059b      	lsls	r3, r3, #22
 800888a:	0d9a      	lsrs	r2, r3, #22
 800888c:	183b      	adds	r3, r7, r0
 800888e:	781b      	ldrb	r3, [r3, #0]
 8008890:	0418      	lsls	r0, r3, #16
 8008892:	23ff      	movs	r3, #255	; 0xff
 8008894:	041b      	lsls	r3, r3, #16
 8008896:	4003      	ands	r3, r0
 8008898:	431a      	orrs	r2, r3
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	431a      	orrs	r2, r3
 800889e:	6a3b      	ldr	r3, [r7, #32]
 80088a0:	431a      	orrs	r2, r3
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	430a      	orrs	r2, r1
 80088a8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80088aa:	46c0      	nop			; (mov r8, r8)
 80088ac:	46bd      	mov	sp, r7
 80088ae:	b005      	add	sp, #20
 80088b0:	bd90      	pop	{r4, r7, pc}
 80088b2:	46c0      	nop			; (mov r8, r8)
 80088b4:	03ff63ff 	.word	0x03ff63ff

080088b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b082      	sub	sp, #8
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2241      	movs	r2, #65	; 0x41
 80088c6:	5c9b      	ldrb	r3, [r3, r2]
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	2b20      	cmp	r3, #32
 80088cc:	d138      	bne.n	8008940 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2240      	movs	r2, #64	; 0x40
 80088d2:	5c9b      	ldrb	r3, [r3, r2]
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d101      	bne.n	80088dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80088d8:	2302      	movs	r3, #2
 80088da:	e032      	b.n	8008942 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2240      	movs	r2, #64	; 0x40
 80088e0:	2101      	movs	r1, #1
 80088e2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2241      	movs	r2, #65	; 0x41
 80088e8:	2124      	movs	r1, #36	; 0x24
 80088ea:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	681a      	ldr	r2, [r3, #0]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	2101      	movs	r1, #1
 80088f8:	438a      	bics	r2, r1
 80088fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	681a      	ldr	r2, [r3, #0]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4911      	ldr	r1, [pc, #68]	; (800894c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8008908:	400a      	ands	r2, r1
 800890a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	6819      	ldr	r1, [r3, #0]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	683a      	ldr	r2, [r7, #0]
 8008918:	430a      	orrs	r2, r1
 800891a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	681a      	ldr	r2, [r3, #0]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	2101      	movs	r1, #1
 8008928:	430a      	orrs	r2, r1
 800892a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2241      	movs	r2, #65	; 0x41
 8008930:	2120      	movs	r1, #32
 8008932:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2240      	movs	r2, #64	; 0x40
 8008938:	2100      	movs	r1, #0
 800893a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800893c:	2300      	movs	r3, #0
 800893e:	e000      	b.n	8008942 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008940:	2302      	movs	r3, #2
  }
}
 8008942:	0018      	movs	r0, r3
 8008944:	46bd      	mov	sp, r7
 8008946:	b002      	add	sp, #8
 8008948:	bd80      	pop	{r7, pc}
 800894a:	46c0      	nop			; (mov r8, r8)
 800894c:	ffffefff 	.word	0xffffefff

08008950 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b084      	sub	sp, #16
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2241      	movs	r2, #65	; 0x41
 800895e:	5c9b      	ldrb	r3, [r3, r2]
 8008960:	b2db      	uxtb	r3, r3
 8008962:	2b20      	cmp	r3, #32
 8008964:	d139      	bne.n	80089da <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2240      	movs	r2, #64	; 0x40
 800896a:	5c9b      	ldrb	r3, [r3, r2]
 800896c:	2b01      	cmp	r3, #1
 800896e:	d101      	bne.n	8008974 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008970:	2302      	movs	r3, #2
 8008972:	e033      	b.n	80089dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2240      	movs	r2, #64	; 0x40
 8008978:	2101      	movs	r1, #1
 800897a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2241      	movs	r2, #65	; 0x41
 8008980:	2124      	movs	r1, #36	; 0x24
 8008982:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	681a      	ldr	r2, [r3, #0]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	2101      	movs	r1, #1
 8008990:	438a      	bics	r2, r1
 8008992:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	4a11      	ldr	r2, [pc, #68]	; (80089e4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80089a0:	4013      	ands	r3, r2
 80089a2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	021b      	lsls	r3, r3, #8
 80089a8:	68fa      	ldr	r2, [r7, #12]
 80089aa:	4313      	orrs	r3, r2
 80089ac:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	68fa      	ldr	r2, [r7, #12]
 80089b4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	681a      	ldr	r2, [r3, #0]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	2101      	movs	r1, #1
 80089c2:	430a      	orrs	r2, r1
 80089c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2241      	movs	r2, #65	; 0x41
 80089ca:	2120      	movs	r1, #32
 80089cc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2240      	movs	r2, #64	; 0x40
 80089d2:	2100      	movs	r1, #0
 80089d4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80089d6:	2300      	movs	r3, #0
 80089d8:	e000      	b.n	80089dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80089da:	2302      	movs	r3, #2
  }
}
 80089dc:	0018      	movs	r0, r3
 80089de:	46bd      	mov	sp, r7
 80089e0:	b004      	add	sp, #16
 80089e2:	bd80      	pop	{r7, pc}
 80089e4:	fffff0ff 	.word	0xfffff0ff

080089e8 <HAL_PWR_DisablePVD>:
/**
  * @brief Disables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	af00      	add	r7, sp, #0
  /* Disable the power voltage detector */
  CLEAR_BIT(PWR->CR, PWR_CR_PVDE);
 80089ec:	4b04      	ldr	r3, [pc, #16]	; (8008a00 <HAL_PWR_DisablePVD+0x18>)
 80089ee:	681a      	ldr	r2, [r3, #0]
 80089f0:	4b03      	ldr	r3, [pc, #12]	; (8008a00 <HAL_PWR_DisablePVD+0x18>)
 80089f2:	2110      	movs	r1, #16
 80089f4:	438a      	bics	r2, r1
 80089f6:	601a      	str	r2, [r3, #0]
}
 80089f8:	46c0      	nop			; (mov r8, r8)
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}
 80089fe:	46c0      	nop			; (mov r8, r8)
 8008a00:	40007000 	.word	0x40007000

08008a04 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b086      	sub	sp, #24
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	000a      	movs	r2, r1
 8008a0e:	1cfb      	adds	r3, r7, #3
 8008a10:	701a      	strb	r2, [r3, #0]
   uint32_t tmpreg = 0U;
 8008a12:	2300      	movs	r3, #0
 8008a14:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8008a16:	4b23      	ldr	r3, [pc, #140]	; (8008aa4 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8008a18:	681a      	ldr	r2, [r3, #0]
 8008a1a:	2380      	movs	r3, #128	; 0x80
 8008a1c:	009b      	lsls	r3, r3, #2
 8008a1e:	4013      	ands	r3, r2
 8008a20:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8008a22:	4b21      	ldr	r3, [pc, #132]	; (8008aa8 <HAL_PWR_EnterSLEEPMode+0xa4>)
 8008a24:	6a1b      	ldr	r3, [r3, #32]
 8008a26:	2201      	movs	r2, #1
 8008a28:	4013      	ands	r3, r2
 8008a2a:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d008      	beq.n	8008a44 <HAL_PWR_EnterSLEEPMode+0x40>
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d005      	beq.n	8008a44 <HAL_PWR_EnterSLEEPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8008a38:	4b1a      	ldr	r3, [pc, #104]	; (8008aa4 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8008a3a:	681a      	ldr	r2, [r3, #0]
 8008a3c:	4b19      	ldr	r3, [pc, #100]	; (8008aa4 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8008a3e:	491b      	ldr	r1, [pc, #108]	; (8008aac <HAL_PWR_EnterSLEEPMode+0xa8>)
 8008a40:	400a      	ands	r2, r1
 8008a42:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Sleep mode ---------------------------------*/
  tmpreg = PWR->CR;
 8008a44:	4b17      	ldr	r3, [pc, #92]	; (8008aa4 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	617b      	str	r3, [r7, #20]

  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	2203      	movs	r2, #3
 8008a4e:	4393      	bics	r3, r2
 8008a50:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8008a52:	697a      	ldr	r2, [r7, #20]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	4313      	orrs	r3, r2
 8008a58:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8008a5a:	4b12      	ldr	r3, [pc, #72]	; (8008aa4 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8008a5c:	697a      	ldr	r2, [r7, #20]
 8008a5e:	601a      	str	r2, [r3, #0]
  
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008a60:	4b13      	ldr	r3, [pc, #76]	; (8008ab0 <HAL_PWR_EnterSLEEPMode+0xac>)
 8008a62:	691a      	ldr	r2, [r3, #16]
 8008a64:	4b12      	ldr	r3, [pc, #72]	; (8008ab0 <HAL_PWR_EnterSLEEPMode+0xac>)
 8008a66:	2104      	movs	r1, #4
 8008a68:	438a      	bics	r2, r1
 8008a6a:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8008a6c:	1cfb      	adds	r3, r7, #3
 8008a6e:	781b      	ldrb	r3, [r3, #0]
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	d101      	bne.n	8008a78 <HAL_PWR_EnterSLEEPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8008a74:	bf30      	wfi
 8008a76:	e002      	b.n	8008a7e <HAL_PWR_EnterSLEEPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8008a78:	bf40      	sev
    __WFE();
 8008a7a:	bf20      	wfe
    __WFE();
 8008a7c:	bf20      	wfe
  }

  if((ulpbit != 0) && (vrefinbit != 0))
 8008a7e:	693b      	ldr	r3, [r7, #16]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d009      	beq.n	8008a98 <HAL_PWR_EnterSLEEPMode+0x94>
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d006      	beq.n	8008a98 <HAL_PWR_EnterSLEEPMode+0x94>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8008a8a:	4b06      	ldr	r3, [pc, #24]	; (8008aa4 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8008a8c:	681a      	ldr	r2, [r3, #0]
 8008a8e:	4b05      	ldr	r3, [pc, #20]	; (8008aa4 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8008a90:	2180      	movs	r1, #128	; 0x80
 8008a92:	0089      	lsls	r1, r1, #2
 8008a94:	430a      	orrs	r2, r1
 8008a96:	601a      	str	r2, [r3, #0]
  }

  /* Additional NOP to ensure all pending instructions are flushed before entering low power mode */
  __NOP();
 8008a98:	46c0      	nop			; (mov r8, r8)

}
 8008a9a:	46c0      	nop			; (mov r8, r8)
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	b006      	add	sp, #24
 8008aa0:	bd80      	pop	{r7, pc}
 8008aa2:	46c0      	nop			; (mov r8, r8)
 8008aa4:	40007000 	.word	0x40007000
 8008aa8:	40010000 	.word	0x40010000
 8008aac:	fffffdff 	.word	0xfffffdff
 8008ab0:	e000ed00 	.word	0xe000ed00

08008ab4 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b086      	sub	sp, #24
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	000a      	movs	r2, r1
 8008abe:	1cfb      	adds	r3, r7, #3
 8008ac0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8008ac6:	4b25      	ldr	r3, [pc, #148]	; (8008b5c <HAL_PWR_EnterSTOPMode+0xa8>)
 8008ac8:	681a      	ldr	r2, [r3, #0]
 8008aca:	2380      	movs	r3, #128	; 0x80
 8008acc:	009b      	lsls	r3, r3, #2
 8008ace:	4013      	ands	r3, r2
 8008ad0:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8008ad2:	4b23      	ldr	r3, [pc, #140]	; (8008b60 <HAL_PWR_EnterSTOPMode+0xac>)
 8008ad4:	6a1b      	ldr	r3, [r3, #32]
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	4013      	ands	r3, r2
 8008ada:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d008      	beq.n	8008af4 <HAL_PWR_EnterSTOPMode+0x40>
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d005      	beq.n	8008af4 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8008ae8:	4b1c      	ldr	r3, [pc, #112]	; (8008b5c <HAL_PWR_EnterSTOPMode+0xa8>)
 8008aea:	681a      	ldr	r2, [r3, #0]
 8008aec:	4b1b      	ldr	r3, [pc, #108]	; (8008b5c <HAL_PWR_EnterSTOPMode+0xa8>)
 8008aee:	491d      	ldr	r1, [pc, #116]	; (8008b64 <HAL_PWR_EnterSTOPMode+0xb0>)
 8008af0:	400a      	ands	r2, r1
 8008af2:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8008af4:	4b19      	ldr	r3, [pc, #100]	; (8008b5c <HAL_PWR_EnterSTOPMode+0xa8>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	2203      	movs	r2, #3
 8008afe:	4393      	bics	r3, r2
 8008b00:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8008b02:	697a      	ldr	r2, [r7, #20]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	4313      	orrs	r3, r2
 8008b08:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8008b0a:	4b14      	ldr	r3, [pc, #80]	; (8008b5c <HAL_PWR_EnterSTOPMode+0xa8>)
 8008b0c:	697a      	ldr	r2, [r7, #20]
 8008b0e:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008b10:	4b15      	ldr	r3, [pc, #84]	; (8008b68 <HAL_PWR_EnterSTOPMode+0xb4>)
 8008b12:	691a      	ldr	r2, [r3, #16]
 8008b14:	4b14      	ldr	r3, [pc, #80]	; (8008b68 <HAL_PWR_EnterSTOPMode+0xb4>)
 8008b16:	2104      	movs	r1, #4
 8008b18:	430a      	orrs	r2, r1
 8008b1a:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8008b1c:	1cfb      	adds	r3, r7, #3
 8008b1e:	781b      	ldrb	r3, [r3, #0]
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d101      	bne.n	8008b28 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8008b24:	bf30      	wfi
 8008b26:	e002      	b.n	8008b2e <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8008b28:	bf40      	sev
    __WFE();
 8008b2a:	bf20      	wfe
    __WFE();
 8008b2c:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008b2e:	4b0e      	ldr	r3, [pc, #56]	; (8008b68 <HAL_PWR_EnterSTOPMode+0xb4>)
 8008b30:	691a      	ldr	r2, [r3, #16]
 8008b32:	4b0d      	ldr	r3, [pc, #52]	; (8008b68 <HAL_PWR_EnterSTOPMode+0xb4>)
 8008b34:	2104      	movs	r1, #4
 8008b36:	438a      	bics	r2, r1
 8008b38:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d009      	beq.n	8008b54 <HAL_PWR_EnterSTOPMode+0xa0>
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d006      	beq.n	8008b54 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8008b46:	4b05      	ldr	r3, [pc, #20]	; (8008b5c <HAL_PWR_EnterSTOPMode+0xa8>)
 8008b48:	681a      	ldr	r2, [r3, #0]
 8008b4a:	4b04      	ldr	r3, [pc, #16]	; (8008b5c <HAL_PWR_EnterSTOPMode+0xa8>)
 8008b4c:	2180      	movs	r1, #128	; 0x80
 8008b4e:	0089      	lsls	r1, r1, #2
 8008b50:	430a      	orrs	r2, r1
 8008b52:	601a      	str	r2, [r3, #0]
  }
}
 8008b54:	46c0      	nop			; (mov r8, r8)
 8008b56:	46bd      	mov	sp, r7
 8008b58:	b006      	add	sp, #24
 8008b5a:	bd80      	pop	{r7, pc}
 8008b5c:	40007000 	.word	0x40007000
 8008b60:	40010000 	.word	0x40010000
 8008b64:	fffffdff 	.word	0xfffffdff
 8008b68:	e000ed00 	.word	0xe000ed00

08008b6c <HAL_PWREx_EnableFastWakeUp>:
  *        Means, when ULP = 1 and FWU = 1 :VREFINT startup time is ignored when 
  *        exiting from low power mode.
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	af00      	add	r7, sp, #0
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 8008b70:	4b04      	ldr	r3, [pc, #16]	; (8008b84 <HAL_PWREx_EnableFastWakeUp+0x18>)
 8008b72:	681a      	ldr	r2, [r3, #0]
 8008b74:	4b03      	ldr	r3, [pc, #12]	; (8008b84 <HAL_PWREx_EnableFastWakeUp+0x18>)
 8008b76:	2180      	movs	r1, #128	; 0x80
 8008b78:	00c9      	lsls	r1, r1, #3
 8008b7a:	430a      	orrs	r2, r1
 8008b7c:	601a      	str	r2, [r3, #0]
}
 8008b7e:	46c0      	nop			; (mov r8, r8)
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}
 8008b84:	40007000 	.word	0x40007000

08008b88 <HAL_PWREx_EnableUltraLowPower>:
/**
  * @brief  Enables the Ultra Low Power mode
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	af00      	add	r7, sp, #0
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 8008b8c:	4b04      	ldr	r3, [pc, #16]	; (8008ba0 <HAL_PWREx_EnableUltraLowPower+0x18>)
 8008b8e:	681a      	ldr	r2, [r3, #0]
 8008b90:	4b03      	ldr	r3, [pc, #12]	; (8008ba0 <HAL_PWREx_EnableUltraLowPower+0x18>)
 8008b92:	2180      	movs	r1, #128	; 0x80
 8008b94:	0089      	lsls	r1, r1, #2
 8008b96:	430a      	orrs	r2, r1
 8008b98:	601a      	str	r2, [r3, #0]
}
 8008b9a:	46c0      	nop			; (mov r8, r8)
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}
 8008ba0:	40007000 	.word	0x40007000

08008ba4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008ba4:	b5b0      	push	{r4, r5, r7, lr}
 8008ba6:	b08a      	sub	sp, #40	; 0x28
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d102      	bne.n	8008bb8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	f000 fbbf 	bl	8009336 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008bb8:	4bc9      	ldr	r3, [pc, #804]	; (8008ee0 <HAL_RCC_OscConfig+0x33c>)
 8008bba:	68db      	ldr	r3, [r3, #12]
 8008bbc:	220c      	movs	r2, #12
 8008bbe:	4013      	ands	r3, r2
 8008bc0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008bc2:	4bc7      	ldr	r3, [pc, #796]	; (8008ee0 <HAL_RCC_OscConfig+0x33c>)
 8008bc4:	68da      	ldr	r2, [r3, #12]
 8008bc6:	2380      	movs	r3, #128	; 0x80
 8008bc8:	025b      	lsls	r3, r3, #9
 8008bca:	4013      	ands	r3, r2
 8008bcc:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	4013      	ands	r3, r2
 8008bd6:	d100      	bne.n	8008bda <HAL_RCC_OscConfig+0x36>
 8008bd8:	e07e      	b.n	8008cd8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008bda:	69fb      	ldr	r3, [r7, #28]
 8008bdc:	2b08      	cmp	r3, #8
 8008bde:	d007      	beq.n	8008bf0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008be0:	69fb      	ldr	r3, [r7, #28]
 8008be2:	2b0c      	cmp	r3, #12
 8008be4:	d112      	bne.n	8008c0c <HAL_RCC_OscConfig+0x68>
 8008be6:	69ba      	ldr	r2, [r7, #24]
 8008be8:	2380      	movs	r3, #128	; 0x80
 8008bea:	025b      	lsls	r3, r3, #9
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d10d      	bne.n	8008c0c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008bf0:	4bbb      	ldr	r3, [pc, #748]	; (8008ee0 <HAL_RCC_OscConfig+0x33c>)
 8008bf2:	681a      	ldr	r2, [r3, #0]
 8008bf4:	2380      	movs	r3, #128	; 0x80
 8008bf6:	029b      	lsls	r3, r3, #10
 8008bf8:	4013      	ands	r3, r2
 8008bfa:	d100      	bne.n	8008bfe <HAL_RCC_OscConfig+0x5a>
 8008bfc:	e06b      	b.n	8008cd6 <HAL_RCC_OscConfig+0x132>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	685b      	ldr	r3, [r3, #4]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d167      	bne.n	8008cd6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8008c06:	2301      	movs	r3, #1
 8008c08:	f000 fb95 	bl	8009336 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	685a      	ldr	r2, [r3, #4]
 8008c10:	2380      	movs	r3, #128	; 0x80
 8008c12:	025b      	lsls	r3, r3, #9
 8008c14:	429a      	cmp	r2, r3
 8008c16:	d107      	bne.n	8008c28 <HAL_RCC_OscConfig+0x84>
 8008c18:	4bb1      	ldr	r3, [pc, #708]	; (8008ee0 <HAL_RCC_OscConfig+0x33c>)
 8008c1a:	681a      	ldr	r2, [r3, #0]
 8008c1c:	4bb0      	ldr	r3, [pc, #704]	; (8008ee0 <HAL_RCC_OscConfig+0x33c>)
 8008c1e:	2180      	movs	r1, #128	; 0x80
 8008c20:	0249      	lsls	r1, r1, #9
 8008c22:	430a      	orrs	r2, r1
 8008c24:	601a      	str	r2, [r3, #0]
 8008c26:	e027      	b.n	8008c78 <HAL_RCC_OscConfig+0xd4>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	685a      	ldr	r2, [r3, #4]
 8008c2c:	23a0      	movs	r3, #160	; 0xa0
 8008c2e:	02db      	lsls	r3, r3, #11
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d10e      	bne.n	8008c52 <HAL_RCC_OscConfig+0xae>
 8008c34:	4baa      	ldr	r3, [pc, #680]	; (8008ee0 <HAL_RCC_OscConfig+0x33c>)
 8008c36:	681a      	ldr	r2, [r3, #0]
 8008c38:	4ba9      	ldr	r3, [pc, #676]	; (8008ee0 <HAL_RCC_OscConfig+0x33c>)
 8008c3a:	2180      	movs	r1, #128	; 0x80
 8008c3c:	02c9      	lsls	r1, r1, #11
 8008c3e:	430a      	orrs	r2, r1
 8008c40:	601a      	str	r2, [r3, #0]
 8008c42:	4ba7      	ldr	r3, [pc, #668]	; (8008ee0 <HAL_RCC_OscConfig+0x33c>)
 8008c44:	681a      	ldr	r2, [r3, #0]
 8008c46:	4ba6      	ldr	r3, [pc, #664]	; (8008ee0 <HAL_RCC_OscConfig+0x33c>)
 8008c48:	2180      	movs	r1, #128	; 0x80
 8008c4a:	0249      	lsls	r1, r1, #9
 8008c4c:	430a      	orrs	r2, r1
 8008c4e:	601a      	str	r2, [r3, #0]
 8008c50:	e012      	b.n	8008c78 <HAL_RCC_OscConfig+0xd4>
 8008c52:	4ba3      	ldr	r3, [pc, #652]	; (8008ee0 <HAL_RCC_OscConfig+0x33c>)
 8008c54:	681a      	ldr	r2, [r3, #0]
 8008c56:	4ba2      	ldr	r3, [pc, #648]	; (8008ee0 <HAL_RCC_OscConfig+0x33c>)
 8008c58:	49a2      	ldr	r1, [pc, #648]	; (8008ee4 <HAL_RCC_OscConfig+0x340>)
 8008c5a:	400a      	ands	r2, r1
 8008c5c:	601a      	str	r2, [r3, #0]
 8008c5e:	4ba0      	ldr	r3, [pc, #640]	; (8008ee0 <HAL_RCC_OscConfig+0x33c>)
 8008c60:	681a      	ldr	r2, [r3, #0]
 8008c62:	2380      	movs	r3, #128	; 0x80
 8008c64:	025b      	lsls	r3, r3, #9
 8008c66:	4013      	ands	r3, r2
 8008c68:	60fb      	str	r3, [r7, #12]
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	4b9c      	ldr	r3, [pc, #624]	; (8008ee0 <HAL_RCC_OscConfig+0x33c>)
 8008c6e:	681a      	ldr	r2, [r3, #0]
 8008c70:	4b9b      	ldr	r3, [pc, #620]	; (8008ee0 <HAL_RCC_OscConfig+0x33c>)
 8008c72:	499d      	ldr	r1, [pc, #628]	; (8008ee8 <HAL_RCC_OscConfig+0x344>)
 8008c74:	400a      	ands	r2, r1
 8008c76:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d015      	beq.n	8008cac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c80:	f7fc fa67 	bl	8005152 <HAL_GetTick>
 8008c84:	0003      	movs	r3, r0
 8008c86:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008c88:	e009      	b.n	8008c9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008c8a:	f7fc fa62 	bl	8005152 <HAL_GetTick>
 8008c8e:	0002      	movs	r2, r0
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	1ad3      	subs	r3, r2, r3
 8008c94:	2b64      	cmp	r3, #100	; 0x64
 8008c96:	d902      	bls.n	8008c9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008c98:	2303      	movs	r3, #3
 8008c9a:	f000 fb4c 	bl	8009336 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008c9e:	4b90      	ldr	r3, [pc, #576]	; (8008ee0 <HAL_RCC_OscConfig+0x33c>)
 8008ca0:	681a      	ldr	r2, [r3, #0]
 8008ca2:	2380      	movs	r3, #128	; 0x80
 8008ca4:	029b      	lsls	r3, r3, #10
 8008ca6:	4013      	ands	r3, r2
 8008ca8:	d0ef      	beq.n	8008c8a <HAL_RCC_OscConfig+0xe6>
 8008caa:	e015      	b.n	8008cd8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008cac:	f7fc fa51 	bl	8005152 <HAL_GetTick>
 8008cb0:	0003      	movs	r3, r0
 8008cb2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008cb4:	e008      	b.n	8008cc8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008cb6:	f7fc fa4c 	bl	8005152 <HAL_GetTick>
 8008cba:	0002      	movs	r2, r0
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	1ad3      	subs	r3, r2, r3
 8008cc0:	2b64      	cmp	r3, #100	; 0x64
 8008cc2:	d901      	bls.n	8008cc8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8008cc4:	2303      	movs	r3, #3
 8008cc6:	e336      	b.n	8009336 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008cc8:	4b85      	ldr	r3, [pc, #532]	; (8008ee0 <HAL_RCC_OscConfig+0x33c>)
 8008cca:	681a      	ldr	r2, [r3, #0]
 8008ccc:	2380      	movs	r3, #128	; 0x80
 8008cce:	029b      	lsls	r3, r3, #10
 8008cd0:	4013      	ands	r3, r2
 8008cd2:	d1f0      	bne.n	8008cb6 <HAL_RCC_OscConfig+0x112>
 8008cd4:	e000      	b.n	8008cd8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008cd6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	2202      	movs	r2, #2
 8008cde:	4013      	ands	r3, r2
 8008ce0:	d100      	bne.n	8008ce4 <HAL_RCC_OscConfig+0x140>
 8008ce2:	e099      	b.n	8008e18 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	68db      	ldr	r3, [r3, #12]
 8008ce8:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8008cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cec:	2220      	movs	r2, #32
 8008cee:	4013      	ands	r3, r2
 8008cf0:	d009      	beq.n	8008d06 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8008cf2:	4b7b      	ldr	r3, [pc, #492]	; (8008ee0 <HAL_RCC_OscConfig+0x33c>)
 8008cf4:	681a      	ldr	r2, [r3, #0]
 8008cf6:	4b7a      	ldr	r3, [pc, #488]	; (8008ee0 <HAL_RCC_OscConfig+0x33c>)
 8008cf8:	2120      	movs	r1, #32
 8008cfa:	430a      	orrs	r2, r1
 8008cfc:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8008cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d00:	2220      	movs	r2, #32
 8008d02:	4393      	bics	r3, r2
 8008d04:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008d06:	69fb      	ldr	r3, [r7, #28]
 8008d08:	2b04      	cmp	r3, #4
 8008d0a:	d005      	beq.n	8008d18 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008d0c:	69fb      	ldr	r3, [r7, #28]
 8008d0e:	2b0c      	cmp	r3, #12
 8008d10:	d13e      	bne.n	8008d90 <HAL_RCC_OscConfig+0x1ec>
 8008d12:	69bb      	ldr	r3, [r7, #24]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d13b      	bne.n	8008d90 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8008d18:	4b71      	ldr	r3, [pc, #452]	; (8008ee0 <HAL_RCC_OscConfig+0x33c>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	2204      	movs	r2, #4
 8008d1e:	4013      	ands	r3, r2
 8008d20:	d004      	beq.n	8008d2c <HAL_RCC_OscConfig+0x188>
 8008d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d101      	bne.n	8008d2c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8008d28:	2301      	movs	r3, #1
 8008d2a:	e304      	b.n	8009336 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d2c:	4b6c      	ldr	r3, [pc, #432]	; (8008ee0 <HAL_RCC_OscConfig+0x33c>)
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	4a6e      	ldr	r2, [pc, #440]	; (8008eec <HAL_RCC_OscConfig+0x348>)
 8008d32:	4013      	ands	r3, r2
 8008d34:	0019      	movs	r1, r3
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	691b      	ldr	r3, [r3, #16]
 8008d3a:	021a      	lsls	r2, r3, #8
 8008d3c:	4b68      	ldr	r3, [pc, #416]	; (8008ee0 <HAL_RCC_OscConfig+0x33c>)
 8008d3e:	430a      	orrs	r2, r1
 8008d40:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8008d42:	4b67      	ldr	r3, [pc, #412]	; (8008ee0 <HAL_RCC_OscConfig+0x33c>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	2209      	movs	r2, #9
 8008d48:	4393      	bics	r3, r2
 8008d4a:	0019      	movs	r1, r3
 8008d4c:	4b64      	ldr	r3, [pc, #400]	; (8008ee0 <HAL_RCC_OscConfig+0x33c>)
 8008d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d50:	430a      	orrs	r2, r1
 8008d52:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008d54:	f000 fc42 	bl	80095dc <HAL_RCC_GetSysClockFreq>
 8008d58:	0001      	movs	r1, r0
 8008d5a:	4b61      	ldr	r3, [pc, #388]	; (8008ee0 <HAL_RCC_OscConfig+0x33c>)
 8008d5c:	68db      	ldr	r3, [r3, #12]
 8008d5e:	091b      	lsrs	r3, r3, #4
 8008d60:	220f      	movs	r2, #15
 8008d62:	4013      	ands	r3, r2
 8008d64:	4a62      	ldr	r2, [pc, #392]	; (8008ef0 <HAL_RCC_OscConfig+0x34c>)
 8008d66:	5cd3      	ldrb	r3, [r2, r3]
 8008d68:	000a      	movs	r2, r1
 8008d6a:	40da      	lsrs	r2, r3
 8008d6c:	4b61      	ldr	r3, [pc, #388]	; (8008ef4 <HAL_RCC_OscConfig+0x350>)
 8008d6e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8008d70:	4b61      	ldr	r3, [pc, #388]	; (8008ef8 <HAL_RCC_OscConfig+0x354>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	2513      	movs	r5, #19
 8008d76:	197c      	adds	r4, r7, r5
 8008d78:	0018      	movs	r0, r3
 8008d7a:	f7fc f9e1 	bl	8005140 <HAL_InitTick>
 8008d7e:	0003      	movs	r3, r0
 8008d80:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8008d82:	197b      	adds	r3, r7, r5
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d046      	beq.n	8008e18 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8008d8a:	197b      	adds	r3, r7, r5
 8008d8c:	781b      	ldrb	r3, [r3, #0]
 8008d8e:	e2d2      	b.n	8009336 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8008d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d027      	beq.n	8008de6 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8008d96:	4b52      	ldr	r3, [pc, #328]	; (8008ee0 <HAL_RCC_OscConfig+0x33c>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	2209      	movs	r2, #9
 8008d9c:	4393      	bics	r3, r2
 8008d9e:	0019      	movs	r1, r3
 8008da0:	4b4f      	ldr	r3, [pc, #316]	; (8008ee0 <HAL_RCC_OscConfig+0x33c>)
 8008da2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008da4:	430a      	orrs	r2, r1
 8008da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008da8:	f7fc f9d3 	bl	8005152 <HAL_GetTick>
 8008dac:	0003      	movs	r3, r0
 8008dae:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008db0:	e008      	b.n	8008dc4 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008db2:	f7fc f9ce 	bl	8005152 <HAL_GetTick>
 8008db6:	0002      	movs	r2, r0
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	1ad3      	subs	r3, r2, r3
 8008dbc:	2b02      	cmp	r3, #2
 8008dbe:	d901      	bls.n	8008dc4 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8008dc0:	2303      	movs	r3, #3
 8008dc2:	e2b8      	b.n	8009336 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008dc4:	4b46      	ldr	r3, [pc, #280]	; (8008ee0 <HAL_RCC_OscConfig+0x33c>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	2204      	movs	r2, #4
 8008dca:	4013      	ands	r3, r2
 8008dcc:	d0f1      	beq.n	8008db2 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008dce:	4b44      	ldr	r3, [pc, #272]	; (8008ee0 <HAL_RCC_OscConfig+0x33c>)
 8008dd0:	685b      	ldr	r3, [r3, #4]
 8008dd2:	4a46      	ldr	r2, [pc, #280]	; (8008eec <HAL_RCC_OscConfig+0x348>)
 8008dd4:	4013      	ands	r3, r2
 8008dd6:	0019      	movs	r1, r3
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	691b      	ldr	r3, [r3, #16]
 8008ddc:	021a      	lsls	r2, r3, #8
 8008dde:	4b40      	ldr	r3, [pc, #256]	; (8008ee0 <HAL_RCC_OscConfig+0x33c>)
 8008de0:	430a      	orrs	r2, r1
 8008de2:	605a      	str	r2, [r3, #4]
 8008de4:	e018      	b.n	8008e18 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008de6:	4b3e      	ldr	r3, [pc, #248]	; (8008ee0 <HAL_RCC_OscConfig+0x33c>)
 8008de8:	681a      	ldr	r2, [r3, #0]
 8008dea:	4b3d      	ldr	r3, [pc, #244]	; (8008ee0 <HAL_RCC_OscConfig+0x33c>)
 8008dec:	2101      	movs	r1, #1
 8008dee:	438a      	bics	r2, r1
 8008df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008df2:	f7fc f9ae 	bl	8005152 <HAL_GetTick>
 8008df6:	0003      	movs	r3, r0
 8008df8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008dfa:	e008      	b.n	8008e0e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008dfc:	f7fc f9a9 	bl	8005152 <HAL_GetTick>
 8008e00:	0002      	movs	r2, r0
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	1ad3      	subs	r3, r2, r3
 8008e06:	2b02      	cmp	r3, #2
 8008e08:	d901      	bls.n	8008e0e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8008e0a:	2303      	movs	r3, #3
 8008e0c:	e293      	b.n	8009336 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008e0e:	4b34      	ldr	r3, [pc, #208]	; (8008ee0 <HAL_RCC_OscConfig+0x33c>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	2204      	movs	r2, #4
 8008e14:	4013      	ands	r3, r2
 8008e16:	d1f1      	bne.n	8008dfc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	2210      	movs	r2, #16
 8008e1e:	4013      	ands	r3, r2
 8008e20:	d100      	bne.n	8008e24 <HAL_RCC_OscConfig+0x280>
 8008e22:	e0a2      	b.n	8008f6a <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008e24:	69fb      	ldr	r3, [r7, #28]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d140      	bne.n	8008eac <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008e2a:	4b2d      	ldr	r3, [pc, #180]	; (8008ee0 <HAL_RCC_OscConfig+0x33c>)
 8008e2c:	681a      	ldr	r2, [r3, #0]
 8008e2e:	2380      	movs	r3, #128	; 0x80
 8008e30:	009b      	lsls	r3, r3, #2
 8008e32:	4013      	ands	r3, r2
 8008e34:	d005      	beq.n	8008e42 <HAL_RCC_OscConfig+0x29e>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	69db      	ldr	r3, [r3, #28]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d101      	bne.n	8008e42 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	e279      	b.n	8009336 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008e42:	4b27      	ldr	r3, [pc, #156]	; (8008ee0 <HAL_RCC_OscConfig+0x33c>)
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	4a2d      	ldr	r2, [pc, #180]	; (8008efc <HAL_RCC_OscConfig+0x358>)
 8008e48:	4013      	ands	r3, r2
 8008e4a:	0019      	movs	r1, r3
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e50:	4b23      	ldr	r3, [pc, #140]	; (8008ee0 <HAL_RCC_OscConfig+0x33c>)
 8008e52:	430a      	orrs	r2, r1
 8008e54:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008e56:	4b22      	ldr	r3, [pc, #136]	; (8008ee0 <HAL_RCC_OscConfig+0x33c>)
 8008e58:	685b      	ldr	r3, [r3, #4]
 8008e5a:	021b      	lsls	r3, r3, #8
 8008e5c:	0a19      	lsrs	r1, r3, #8
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6a1b      	ldr	r3, [r3, #32]
 8008e62:	061a      	lsls	r2, r3, #24
 8008e64:	4b1e      	ldr	r3, [pc, #120]	; (8008ee0 <HAL_RCC_OscConfig+0x33c>)
 8008e66:	430a      	orrs	r2, r1
 8008e68:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e6e:	0b5b      	lsrs	r3, r3, #13
 8008e70:	3301      	adds	r3, #1
 8008e72:	2280      	movs	r2, #128	; 0x80
 8008e74:	0212      	lsls	r2, r2, #8
 8008e76:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8008e78:	4b19      	ldr	r3, [pc, #100]	; (8008ee0 <HAL_RCC_OscConfig+0x33c>)
 8008e7a:	68db      	ldr	r3, [r3, #12]
 8008e7c:	091b      	lsrs	r3, r3, #4
 8008e7e:	210f      	movs	r1, #15
 8008e80:	400b      	ands	r3, r1
 8008e82:	491b      	ldr	r1, [pc, #108]	; (8008ef0 <HAL_RCC_OscConfig+0x34c>)
 8008e84:	5ccb      	ldrb	r3, [r1, r3]
 8008e86:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8008e88:	4b1a      	ldr	r3, [pc, #104]	; (8008ef4 <HAL_RCC_OscConfig+0x350>)
 8008e8a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8008e8c:	4b1a      	ldr	r3, [pc, #104]	; (8008ef8 <HAL_RCC_OscConfig+0x354>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	2513      	movs	r5, #19
 8008e92:	197c      	adds	r4, r7, r5
 8008e94:	0018      	movs	r0, r3
 8008e96:	f7fc f953 	bl	8005140 <HAL_InitTick>
 8008e9a:	0003      	movs	r3, r0
 8008e9c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8008e9e:	197b      	adds	r3, r7, r5
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d061      	beq.n	8008f6a <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8008ea6:	197b      	adds	r3, r7, r5
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	e244      	b.n	8009336 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	69db      	ldr	r3, [r3, #28]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d040      	beq.n	8008f36 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008eb4:	4b0a      	ldr	r3, [pc, #40]	; (8008ee0 <HAL_RCC_OscConfig+0x33c>)
 8008eb6:	681a      	ldr	r2, [r3, #0]
 8008eb8:	4b09      	ldr	r3, [pc, #36]	; (8008ee0 <HAL_RCC_OscConfig+0x33c>)
 8008eba:	2180      	movs	r1, #128	; 0x80
 8008ebc:	0049      	lsls	r1, r1, #1
 8008ebe:	430a      	orrs	r2, r1
 8008ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ec2:	f7fc f946 	bl	8005152 <HAL_GetTick>
 8008ec6:	0003      	movs	r3, r0
 8008ec8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8008eca:	e019      	b.n	8008f00 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008ecc:	f7fc f941 	bl	8005152 <HAL_GetTick>
 8008ed0:	0002      	movs	r2, r0
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	1ad3      	subs	r3, r2, r3
 8008ed6:	2b02      	cmp	r3, #2
 8008ed8:	d912      	bls.n	8008f00 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8008eda:	2303      	movs	r3, #3
 8008edc:	e22b      	b.n	8009336 <HAL_RCC_OscConfig+0x792>
 8008ede:	46c0      	nop			; (mov r8, r8)
 8008ee0:	40021000 	.word	0x40021000
 8008ee4:	fffeffff 	.word	0xfffeffff
 8008ee8:	fffbffff 	.word	0xfffbffff
 8008eec:	ffffe0ff 	.word	0xffffe0ff
 8008ef0:	0801ef24 	.word	0x0801ef24
 8008ef4:	20000070 	.word	0x20000070
 8008ef8:	20000074 	.word	0x20000074
 8008efc:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8008f00:	4bca      	ldr	r3, [pc, #808]	; (800922c <HAL_RCC_OscConfig+0x688>)
 8008f02:	681a      	ldr	r2, [r3, #0]
 8008f04:	2380      	movs	r3, #128	; 0x80
 8008f06:	009b      	lsls	r3, r3, #2
 8008f08:	4013      	ands	r3, r2
 8008f0a:	d0df      	beq.n	8008ecc <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008f0c:	4bc7      	ldr	r3, [pc, #796]	; (800922c <HAL_RCC_OscConfig+0x688>)
 8008f0e:	685b      	ldr	r3, [r3, #4]
 8008f10:	4ac7      	ldr	r2, [pc, #796]	; (8009230 <HAL_RCC_OscConfig+0x68c>)
 8008f12:	4013      	ands	r3, r2
 8008f14:	0019      	movs	r1, r3
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008f1a:	4bc4      	ldr	r3, [pc, #784]	; (800922c <HAL_RCC_OscConfig+0x688>)
 8008f1c:	430a      	orrs	r2, r1
 8008f1e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008f20:	4bc2      	ldr	r3, [pc, #776]	; (800922c <HAL_RCC_OscConfig+0x688>)
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	021b      	lsls	r3, r3, #8
 8008f26:	0a19      	lsrs	r1, r3, #8
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6a1b      	ldr	r3, [r3, #32]
 8008f2c:	061a      	lsls	r2, r3, #24
 8008f2e:	4bbf      	ldr	r3, [pc, #764]	; (800922c <HAL_RCC_OscConfig+0x688>)
 8008f30:	430a      	orrs	r2, r1
 8008f32:	605a      	str	r2, [r3, #4]
 8008f34:	e019      	b.n	8008f6a <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008f36:	4bbd      	ldr	r3, [pc, #756]	; (800922c <HAL_RCC_OscConfig+0x688>)
 8008f38:	681a      	ldr	r2, [r3, #0]
 8008f3a:	4bbc      	ldr	r3, [pc, #752]	; (800922c <HAL_RCC_OscConfig+0x688>)
 8008f3c:	49bd      	ldr	r1, [pc, #756]	; (8009234 <HAL_RCC_OscConfig+0x690>)
 8008f3e:	400a      	ands	r2, r1
 8008f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f42:	f7fc f906 	bl	8005152 <HAL_GetTick>
 8008f46:	0003      	movs	r3, r0
 8008f48:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8008f4a:	e008      	b.n	8008f5e <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008f4c:	f7fc f901 	bl	8005152 <HAL_GetTick>
 8008f50:	0002      	movs	r2, r0
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	1ad3      	subs	r3, r2, r3
 8008f56:	2b02      	cmp	r3, #2
 8008f58:	d901      	bls.n	8008f5e <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8008f5a:	2303      	movs	r3, #3
 8008f5c:	e1eb      	b.n	8009336 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8008f5e:	4bb3      	ldr	r3, [pc, #716]	; (800922c <HAL_RCC_OscConfig+0x688>)
 8008f60:	681a      	ldr	r2, [r3, #0]
 8008f62:	2380      	movs	r3, #128	; 0x80
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	4013      	ands	r3, r2
 8008f68:	d1f0      	bne.n	8008f4c <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	2208      	movs	r2, #8
 8008f70:	4013      	ands	r3, r2
 8008f72:	d036      	beq.n	8008fe2 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	695b      	ldr	r3, [r3, #20]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d019      	beq.n	8008fb0 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008f7c:	4bab      	ldr	r3, [pc, #684]	; (800922c <HAL_RCC_OscConfig+0x688>)
 8008f7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008f80:	4baa      	ldr	r3, [pc, #680]	; (800922c <HAL_RCC_OscConfig+0x688>)
 8008f82:	2101      	movs	r1, #1
 8008f84:	430a      	orrs	r2, r1
 8008f86:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008f88:	f7fc f8e3 	bl	8005152 <HAL_GetTick>
 8008f8c:	0003      	movs	r3, r0
 8008f8e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008f90:	e008      	b.n	8008fa4 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008f92:	f7fc f8de 	bl	8005152 <HAL_GetTick>
 8008f96:	0002      	movs	r2, r0
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	1ad3      	subs	r3, r2, r3
 8008f9c:	2b02      	cmp	r3, #2
 8008f9e:	d901      	bls.n	8008fa4 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8008fa0:	2303      	movs	r3, #3
 8008fa2:	e1c8      	b.n	8009336 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008fa4:	4ba1      	ldr	r3, [pc, #644]	; (800922c <HAL_RCC_OscConfig+0x688>)
 8008fa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fa8:	2202      	movs	r2, #2
 8008faa:	4013      	ands	r3, r2
 8008fac:	d0f1      	beq.n	8008f92 <HAL_RCC_OscConfig+0x3ee>
 8008fae:	e018      	b.n	8008fe2 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008fb0:	4b9e      	ldr	r3, [pc, #632]	; (800922c <HAL_RCC_OscConfig+0x688>)
 8008fb2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008fb4:	4b9d      	ldr	r3, [pc, #628]	; (800922c <HAL_RCC_OscConfig+0x688>)
 8008fb6:	2101      	movs	r1, #1
 8008fb8:	438a      	bics	r2, r1
 8008fba:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008fbc:	f7fc f8c9 	bl	8005152 <HAL_GetTick>
 8008fc0:	0003      	movs	r3, r0
 8008fc2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008fc4:	e008      	b.n	8008fd8 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008fc6:	f7fc f8c4 	bl	8005152 <HAL_GetTick>
 8008fca:	0002      	movs	r2, r0
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	1ad3      	subs	r3, r2, r3
 8008fd0:	2b02      	cmp	r3, #2
 8008fd2:	d901      	bls.n	8008fd8 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8008fd4:	2303      	movs	r3, #3
 8008fd6:	e1ae      	b.n	8009336 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008fd8:	4b94      	ldr	r3, [pc, #592]	; (800922c <HAL_RCC_OscConfig+0x688>)
 8008fda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fdc:	2202      	movs	r2, #2
 8008fde:	4013      	ands	r3, r2
 8008fe0:	d1f1      	bne.n	8008fc6 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	2204      	movs	r2, #4
 8008fe8:	4013      	ands	r3, r2
 8008fea:	d100      	bne.n	8008fee <HAL_RCC_OscConfig+0x44a>
 8008fec:	e0ae      	b.n	800914c <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008fee:	2023      	movs	r0, #35	; 0x23
 8008ff0:	183b      	adds	r3, r7, r0
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008ff6:	4b8d      	ldr	r3, [pc, #564]	; (800922c <HAL_RCC_OscConfig+0x688>)
 8008ff8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ffa:	2380      	movs	r3, #128	; 0x80
 8008ffc:	055b      	lsls	r3, r3, #21
 8008ffe:	4013      	ands	r3, r2
 8009000:	d109      	bne.n	8009016 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009002:	4b8a      	ldr	r3, [pc, #552]	; (800922c <HAL_RCC_OscConfig+0x688>)
 8009004:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009006:	4b89      	ldr	r3, [pc, #548]	; (800922c <HAL_RCC_OscConfig+0x688>)
 8009008:	2180      	movs	r1, #128	; 0x80
 800900a:	0549      	lsls	r1, r1, #21
 800900c:	430a      	orrs	r2, r1
 800900e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8009010:	183b      	adds	r3, r7, r0
 8009012:	2201      	movs	r2, #1
 8009014:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009016:	4b88      	ldr	r3, [pc, #544]	; (8009238 <HAL_RCC_OscConfig+0x694>)
 8009018:	681a      	ldr	r2, [r3, #0]
 800901a:	2380      	movs	r3, #128	; 0x80
 800901c:	005b      	lsls	r3, r3, #1
 800901e:	4013      	ands	r3, r2
 8009020:	d11a      	bne.n	8009058 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009022:	4b85      	ldr	r3, [pc, #532]	; (8009238 <HAL_RCC_OscConfig+0x694>)
 8009024:	681a      	ldr	r2, [r3, #0]
 8009026:	4b84      	ldr	r3, [pc, #528]	; (8009238 <HAL_RCC_OscConfig+0x694>)
 8009028:	2180      	movs	r1, #128	; 0x80
 800902a:	0049      	lsls	r1, r1, #1
 800902c:	430a      	orrs	r2, r1
 800902e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009030:	f7fc f88f 	bl	8005152 <HAL_GetTick>
 8009034:	0003      	movs	r3, r0
 8009036:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009038:	e008      	b.n	800904c <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800903a:	f7fc f88a 	bl	8005152 <HAL_GetTick>
 800903e:	0002      	movs	r2, r0
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	1ad3      	subs	r3, r2, r3
 8009044:	2b64      	cmp	r3, #100	; 0x64
 8009046:	d901      	bls.n	800904c <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8009048:	2303      	movs	r3, #3
 800904a:	e174      	b.n	8009336 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800904c:	4b7a      	ldr	r3, [pc, #488]	; (8009238 <HAL_RCC_OscConfig+0x694>)
 800904e:	681a      	ldr	r2, [r3, #0]
 8009050:	2380      	movs	r3, #128	; 0x80
 8009052:	005b      	lsls	r3, r3, #1
 8009054:	4013      	ands	r3, r2
 8009056:	d0f0      	beq.n	800903a <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	689a      	ldr	r2, [r3, #8]
 800905c:	2380      	movs	r3, #128	; 0x80
 800905e:	005b      	lsls	r3, r3, #1
 8009060:	429a      	cmp	r2, r3
 8009062:	d107      	bne.n	8009074 <HAL_RCC_OscConfig+0x4d0>
 8009064:	4b71      	ldr	r3, [pc, #452]	; (800922c <HAL_RCC_OscConfig+0x688>)
 8009066:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009068:	4b70      	ldr	r3, [pc, #448]	; (800922c <HAL_RCC_OscConfig+0x688>)
 800906a:	2180      	movs	r1, #128	; 0x80
 800906c:	0049      	lsls	r1, r1, #1
 800906e:	430a      	orrs	r2, r1
 8009070:	651a      	str	r2, [r3, #80]	; 0x50
 8009072:	e031      	b.n	80090d8 <HAL_RCC_OscConfig+0x534>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	689b      	ldr	r3, [r3, #8]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d10c      	bne.n	8009096 <HAL_RCC_OscConfig+0x4f2>
 800907c:	4b6b      	ldr	r3, [pc, #428]	; (800922c <HAL_RCC_OscConfig+0x688>)
 800907e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009080:	4b6a      	ldr	r3, [pc, #424]	; (800922c <HAL_RCC_OscConfig+0x688>)
 8009082:	496c      	ldr	r1, [pc, #432]	; (8009234 <HAL_RCC_OscConfig+0x690>)
 8009084:	400a      	ands	r2, r1
 8009086:	651a      	str	r2, [r3, #80]	; 0x50
 8009088:	4b68      	ldr	r3, [pc, #416]	; (800922c <HAL_RCC_OscConfig+0x688>)
 800908a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800908c:	4b67      	ldr	r3, [pc, #412]	; (800922c <HAL_RCC_OscConfig+0x688>)
 800908e:	496b      	ldr	r1, [pc, #428]	; (800923c <HAL_RCC_OscConfig+0x698>)
 8009090:	400a      	ands	r2, r1
 8009092:	651a      	str	r2, [r3, #80]	; 0x50
 8009094:	e020      	b.n	80090d8 <HAL_RCC_OscConfig+0x534>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	689a      	ldr	r2, [r3, #8]
 800909a:	23a0      	movs	r3, #160	; 0xa0
 800909c:	00db      	lsls	r3, r3, #3
 800909e:	429a      	cmp	r2, r3
 80090a0:	d10e      	bne.n	80090c0 <HAL_RCC_OscConfig+0x51c>
 80090a2:	4b62      	ldr	r3, [pc, #392]	; (800922c <HAL_RCC_OscConfig+0x688>)
 80090a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80090a6:	4b61      	ldr	r3, [pc, #388]	; (800922c <HAL_RCC_OscConfig+0x688>)
 80090a8:	2180      	movs	r1, #128	; 0x80
 80090aa:	00c9      	lsls	r1, r1, #3
 80090ac:	430a      	orrs	r2, r1
 80090ae:	651a      	str	r2, [r3, #80]	; 0x50
 80090b0:	4b5e      	ldr	r3, [pc, #376]	; (800922c <HAL_RCC_OscConfig+0x688>)
 80090b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80090b4:	4b5d      	ldr	r3, [pc, #372]	; (800922c <HAL_RCC_OscConfig+0x688>)
 80090b6:	2180      	movs	r1, #128	; 0x80
 80090b8:	0049      	lsls	r1, r1, #1
 80090ba:	430a      	orrs	r2, r1
 80090bc:	651a      	str	r2, [r3, #80]	; 0x50
 80090be:	e00b      	b.n	80090d8 <HAL_RCC_OscConfig+0x534>
 80090c0:	4b5a      	ldr	r3, [pc, #360]	; (800922c <HAL_RCC_OscConfig+0x688>)
 80090c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80090c4:	4b59      	ldr	r3, [pc, #356]	; (800922c <HAL_RCC_OscConfig+0x688>)
 80090c6:	495b      	ldr	r1, [pc, #364]	; (8009234 <HAL_RCC_OscConfig+0x690>)
 80090c8:	400a      	ands	r2, r1
 80090ca:	651a      	str	r2, [r3, #80]	; 0x50
 80090cc:	4b57      	ldr	r3, [pc, #348]	; (800922c <HAL_RCC_OscConfig+0x688>)
 80090ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80090d0:	4b56      	ldr	r3, [pc, #344]	; (800922c <HAL_RCC_OscConfig+0x688>)
 80090d2:	495a      	ldr	r1, [pc, #360]	; (800923c <HAL_RCC_OscConfig+0x698>)
 80090d4:	400a      	ands	r2, r1
 80090d6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	689b      	ldr	r3, [r3, #8]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d015      	beq.n	800910c <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80090e0:	f7fc f837 	bl	8005152 <HAL_GetTick>
 80090e4:	0003      	movs	r3, r0
 80090e6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80090e8:	e009      	b.n	80090fe <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80090ea:	f7fc f832 	bl	8005152 <HAL_GetTick>
 80090ee:	0002      	movs	r2, r0
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	1ad3      	subs	r3, r2, r3
 80090f4:	4a52      	ldr	r2, [pc, #328]	; (8009240 <HAL_RCC_OscConfig+0x69c>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d901      	bls.n	80090fe <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80090fa:	2303      	movs	r3, #3
 80090fc:	e11b      	b.n	8009336 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80090fe:	4b4b      	ldr	r3, [pc, #300]	; (800922c <HAL_RCC_OscConfig+0x688>)
 8009100:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009102:	2380      	movs	r3, #128	; 0x80
 8009104:	009b      	lsls	r3, r3, #2
 8009106:	4013      	ands	r3, r2
 8009108:	d0ef      	beq.n	80090ea <HAL_RCC_OscConfig+0x546>
 800910a:	e014      	b.n	8009136 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800910c:	f7fc f821 	bl	8005152 <HAL_GetTick>
 8009110:	0003      	movs	r3, r0
 8009112:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009114:	e009      	b.n	800912a <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009116:	f7fc f81c 	bl	8005152 <HAL_GetTick>
 800911a:	0002      	movs	r2, r0
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	1ad3      	subs	r3, r2, r3
 8009120:	4a47      	ldr	r2, [pc, #284]	; (8009240 <HAL_RCC_OscConfig+0x69c>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d901      	bls.n	800912a <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8009126:	2303      	movs	r3, #3
 8009128:	e105      	b.n	8009336 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800912a:	4b40      	ldr	r3, [pc, #256]	; (800922c <HAL_RCC_OscConfig+0x688>)
 800912c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800912e:	2380      	movs	r3, #128	; 0x80
 8009130:	009b      	lsls	r3, r3, #2
 8009132:	4013      	ands	r3, r2
 8009134:	d1ef      	bne.n	8009116 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8009136:	2323      	movs	r3, #35	; 0x23
 8009138:	18fb      	adds	r3, r7, r3
 800913a:	781b      	ldrb	r3, [r3, #0]
 800913c:	2b01      	cmp	r3, #1
 800913e:	d105      	bne.n	800914c <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009140:	4b3a      	ldr	r3, [pc, #232]	; (800922c <HAL_RCC_OscConfig+0x688>)
 8009142:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009144:	4b39      	ldr	r3, [pc, #228]	; (800922c <HAL_RCC_OscConfig+0x688>)
 8009146:	493f      	ldr	r1, [pc, #252]	; (8009244 <HAL_RCC_OscConfig+0x6a0>)
 8009148:	400a      	ands	r2, r1
 800914a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	2220      	movs	r2, #32
 8009152:	4013      	ands	r3, r2
 8009154:	d049      	beq.n	80091ea <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	699b      	ldr	r3, [r3, #24]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d026      	beq.n	80091ac <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800915e:	4b33      	ldr	r3, [pc, #204]	; (800922c <HAL_RCC_OscConfig+0x688>)
 8009160:	689a      	ldr	r2, [r3, #8]
 8009162:	4b32      	ldr	r3, [pc, #200]	; (800922c <HAL_RCC_OscConfig+0x688>)
 8009164:	2101      	movs	r1, #1
 8009166:	430a      	orrs	r2, r1
 8009168:	609a      	str	r2, [r3, #8]
 800916a:	4b30      	ldr	r3, [pc, #192]	; (800922c <HAL_RCC_OscConfig+0x688>)
 800916c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800916e:	4b2f      	ldr	r3, [pc, #188]	; (800922c <HAL_RCC_OscConfig+0x688>)
 8009170:	2101      	movs	r1, #1
 8009172:	430a      	orrs	r2, r1
 8009174:	635a      	str	r2, [r3, #52]	; 0x34
 8009176:	4b34      	ldr	r3, [pc, #208]	; (8009248 <HAL_RCC_OscConfig+0x6a4>)
 8009178:	6a1a      	ldr	r2, [r3, #32]
 800917a:	4b33      	ldr	r3, [pc, #204]	; (8009248 <HAL_RCC_OscConfig+0x6a4>)
 800917c:	2180      	movs	r1, #128	; 0x80
 800917e:	0189      	lsls	r1, r1, #6
 8009180:	430a      	orrs	r2, r1
 8009182:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009184:	f7fb ffe5 	bl	8005152 <HAL_GetTick>
 8009188:	0003      	movs	r3, r0
 800918a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800918c:	e008      	b.n	80091a0 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800918e:	f7fb ffe0 	bl	8005152 <HAL_GetTick>
 8009192:	0002      	movs	r2, r0
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	1ad3      	subs	r3, r2, r3
 8009198:	2b02      	cmp	r3, #2
 800919a:	d901      	bls.n	80091a0 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 800919c:	2303      	movs	r3, #3
 800919e:	e0ca      	b.n	8009336 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80091a0:	4b22      	ldr	r3, [pc, #136]	; (800922c <HAL_RCC_OscConfig+0x688>)
 80091a2:	689b      	ldr	r3, [r3, #8]
 80091a4:	2202      	movs	r2, #2
 80091a6:	4013      	ands	r3, r2
 80091a8:	d0f1      	beq.n	800918e <HAL_RCC_OscConfig+0x5ea>
 80091aa:	e01e      	b.n	80091ea <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80091ac:	4b1f      	ldr	r3, [pc, #124]	; (800922c <HAL_RCC_OscConfig+0x688>)
 80091ae:	689a      	ldr	r2, [r3, #8]
 80091b0:	4b1e      	ldr	r3, [pc, #120]	; (800922c <HAL_RCC_OscConfig+0x688>)
 80091b2:	2101      	movs	r1, #1
 80091b4:	438a      	bics	r2, r1
 80091b6:	609a      	str	r2, [r3, #8]
 80091b8:	4b23      	ldr	r3, [pc, #140]	; (8009248 <HAL_RCC_OscConfig+0x6a4>)
 80091ba:	6a1a      	ldr	r2, [r3, #32]
 80091bc:	4b22      	ldr	r3, [pc, #136]	; (8009248 <HAL_RCC_OscConfig+0x6a4>)
 80091be:	4923      	ldr	r1, [pc, #140]	; (800924c <HAL_RCC_OscConfig+0x6a8>)
 80091c0:	400a      	ands	r2, r1
 80091c2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80091c4:	f7fb ffc5 	bl	8005152 <HAL_GetTick>
 80091c8:	0003      	movs	r3, r0
 80091ca:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80091cc:	e008      	b.n	80091e0 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80091ce:	f7fb ffc0 	bl	8005152 <HAL_GetTick>
 80091d2:	0002      	movs	r2, r0
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	1ad3      	subs	r3, r2, r3
 80091d8:	2b02      	cmp	r3, #2
 80091da:	d901      	bls.n	80091e0 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80091dc:	2303      	movs	r3, #3
 80091de:	e0aa      	b.n	8009336 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80091e0:	4b12      	ldr	r3, [pc, #72]	; (800922c <HAL_RCC_OscConfig+0x688>)
 80091e2:	689b      	ldr	r3, [r3, #8]
 80091e4:	2202      	movs	r2, #2
 80091e6:	4013      	ands	r3, r2
 80091e8:	d1f1      	bne.n	80091ce <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d100      	bne.n	80091f4 <HAL_RCC_OscConfig+0x650>
 80091f2:	e09f      	b.n	8009334 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80091f4:	69fb      	ldr	r3, [r7, #28]
 80091f6:	2b0c      	cmp	r3, #12
 80091f8:	d100      	bne.n	80091fc <HAL_RCC_OscConfig+0x658>
 80091fa:	e078      	b.n	80092ee <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009200:	2b02      	cmp	r3, #2
 8009202:	d159      	bne.n	80092b8 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009204:	4b09      	ldr	r3, [pc, #36]	; (800922c <HAL_RCC_OscConfig+0x688>)
 8009206:	681a      	ldr	r2, [r3, #0]
 8009208:	4b08      	ldr	r3, [pc, #32]	; (800922c <HAL_RCC_OscConfig+0x688>)
 800920a:	4911      	ldr	r1, [pc, #68]	; (8009250 <HAL_RCC_OscConfig+0x6ac>)
 800920c:	400a      	ands	r2, r1
 800920e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009210:	f7fb ff9f 	bl	8005152 <HAL_GetTick>
 8009214:	0003      	movs	r3, r0
 8009216:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8009218:	e01c      	b.n	8009254 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800921a:	f7fb ff9a 	bl	8005152 <HAL_GetTick>
 800921e:	0002      	movs	r2, r0
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	1ad3      	subs	r3, r2, r3
 8009224:	2b02      	cmp	r3, #2
 8009226:	d915      	bls.n	8009254 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8009228:	2303      	movs	r3, #3
 800922a:	e084      	b.n	8009336 <HAL_RCC_OscConfig+0x792>
 800922c:	40021000 	.word	0x40021000
 8009230:	ffff1fff 	.word	0xffff1fff
 8009234:	fffffeff 	.word	0xfffffeff
 8009238:	40007000 	.word	0x40007000
 800923c:	fffffbff 	.word	0xfffffbff
 8009240:	00001388 	.word	0x00001388
 8009244:	efffffff 	.word	0xefffffff
 8009248:	40010000 	.word	0x40010000
 800924c:	ffffdfff 	.word	0xffffdfff
 8009250:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8009254:	4b3a      	ldr	r3, [pc, #232]	; (8009340 <HAL_RCC_OscConfig+0x79c>)
 8009256:	681a      	ldr	r2, [r3, #0]
 8009258:	2380      	movs	r3, #128	; 0x80
 800925a:	049b      	lsls	r3, r3, #18
 800925c:	4013      	ands	r3, r2
 800925e:	d1dc      	bne.n	800921a <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009260:	4b37      	ldr	r3, [pc, #220]	; (8009340 <HAL_RCC_OscConfig+0x79c>)
 8009262:	68db      	ldr	r3, [r3, #12]
 8009264:	4a37      	ldr	r2, [pc, #220]	; (8009344 <HAL_RCC_OscConfig+0x7a0>)
 8009266:	4013      	ands	r3, r2
 8009268:	0019      	movs	r1, r3
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009272:	431a      	orrs	r2, r3
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009278:	431a      	orrs	r2, r3
 800927a:	4b31      	ldr	r3, [pc, #196]	; (8009340 <HAL_RCC_OscConfig+0x79c>)
 800927c:	430a      	orrs	r2, r1
 800927e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009280:	4b2f      	ldr	r3, [pc, #188]	; (8009340 <HAL_RCC_OscConfig+0x79c>)
 8009282:	681a      	ldr	r2, [r3, #0]
 8009284:	4b2e      	ldr	r3, [pc, #184]	; (8009340 <HAL_RCC_OscConfig+0x79c>)
 8009286:	2180      	movs	r1, #128	; 0x80
 8009288:	0449      	lsls	r1, r1, #17
 800928a:	430a      	orrs	r2, r1
 800928c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800928e:	f7fb ff60 	bl	8005152 <HAL_GetTick>
 8009292:	0003      	movs	r3, r0
 8009294:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8009296:	e008      	b.n	80092aa <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009298:	f7fb ff5b 	bl	8005152 <HAL_GetTick>
 800929c:	0002      	movs	r2, r0
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	1ad3      	subs	r3, r2, r3
 80092a2:	2b02      	cmp	r3, #2
 80092a4:	d901      	bls.n	80092aa <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80092a6:	2303      	movs	r3, #3
 80092a8:	e045      	b.n	8009336 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80092aa:	4b25      	ldr	r3, [pc, #148]	; (8009340 <HAL_RCC_OscConfig+0x79c>)
 80092ac:	681a      	ldr	r2, [r3, #0]
 80092ae:	2380      	movs	r3, #128	; 0x80
 80092b0:	049b      	lsls	r3, r3, #18
 80092b2:	4013      	ands	r3, r2
 80092b4:	d0f0      	beq.n	8009298 <HAL_RCC_OscConfig+0x6f4>
 80092b6:	e03d      	b.n	8009334 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80092b8:	4b21      	ldr	r3, [pc, #132]	; (8009340 <HAL_RCC_OscConfig+0x79c>)
 80092ba:	681a      	ldr	r2, [r3, #0]
 80092bc:	4b20      	ldr	r3, [pc, #128]	; (8009340 <HAL_RCC_OscConfig+0x79c>)
 80092be:	4922      	ldr	r1, [pc, #136]	; (8009348 <HAL_RCC_OscConfig+0x7a4>)
 80092c0:	400a      	ands	r2, r1
 80092c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80092c4:	f7fb ff45 	bl	8005152 <HAL_GetTick>
 80092c8:	0003      	movs	r3, r0
 80092ca:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80092cc:	e008      	b.n	80092e0 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80092ce:	f7fb ff40 	bl	8005152 <HAL_GetTick>
 80092d2:	0002      	movs	r2, r0
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	1ad3      	subs	r3, r2, r3
 80092d8:	2b02      	cmp	r3, #2
 80092da:	d901      	bls.n	80092e0 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80092dc:	2303      	movs	r3, #3
 80092de:	e02a      	b.n	8009336 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80092e0:	4b17      	ldr	r3, [pc, #92]	; (8009340 <HAL_RCC_OscConfig+0x79c>)
 80092e2:	681a      	ldr	r2, [r3, #0]
 80092e4:	2380      	movs	r3, #128	; 0x80
 80092e6:	049b      	lsls	r3, r3, #18
 80092e8:	4013      	ands	r3, r2
 80092ea:	d1f0      	bne.n	80092ce <HAL_RCC_OscConfig+0x72a>
 80092ec:	e022      	b.n	8009334 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092f2:	2b01      	cmp	r3, #1
 80092f4:	d101      	bne.n	80092fa <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80092f6:	2301      	movs	r3, #1
 80092f8:	e01d      	b.n	8009336 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80092fa:	4b11      	ldr	r3, [pc, #68]	; (8009340 <HAL_RCC_OscConfig+0x79c>)
 80092fc:	68db      	ldr	r3, [r3, #12]
 80092fe:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009300:	69ba      	ldr	r2, [r7, #24]
 8009302:	2380      	movs	r3, #128	; 0x80
 8009304:	025b      	lsls	r3, r3, #9
 8009306:	401a      	ands	r2, r3
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800930c:	429a      	cmp	r2, r3
 800930e:	d10f      	bne.n	8009330 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8009310:	69ba      	ldr	r2, [r7, #24]
 8009312:	23f0      	movs	r3, #240	; 0xf0
 8009314:	039b      	lsls	r3, r3, #14
 8009316:	401a      	ands	r2, r3
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800931c:	429a      	cmp	r2, r3
 800931e:	d107      	bne.n	8009330 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8009320:	69ba      	ldr	r2, [r7, #24]
 8009322:	23c0      	movs	r3, #192	; 0xc0
 8009324:	041b      	lsls	r3, r3, #16
 8009326:	401a      	ands	r2, r3
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800932c:	429a      	cmp	r2, r3
 800932e:	d001      	beq.n	8009334 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8009330:	2301      	movs	r3, #1
 8009332:	e000      	b.n	8009336 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8009334:	2300      	movs	r3, #0
}
 8009336:	0018      	movs	r0, r3
 8009338:	46bd      	mov	sp, r7
 800933a:	b00a      	add	sp, #40	; 0x28
 800933c:	bdb0      	pop	{r4, r5, r7, pc}
 800933e:	46c0      	nop			; (mov r8, r8)
 8009340:	40021000 	.word	0x40021000
 8009344:	ff02ffff 	.word	0xff02ffff
 8009348:	feffffff 	.word	0xfeffffff

0800934c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800934c:	b5b0      	push	{r4, r5, r7, lr}
 800934e:	b084      	sub	sp, #16
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
 8009354:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d101      	bne.n	8009360 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800935c:	2301      	movs	r3, #1
 800935e:	e128      	b.n	80095b2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009360:	4b96      	ldr	r3, [pc, #600]	; (80095bc <HAL_RCC_ClockConfig+0x270>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	2201      	movs	r2, #1
 8009366:	4013      	ands	r3, r2
 8009368:	683a      	ldr	r2, [r7, #0]
 800936a:	429a      	cmp	r2, r3
 800936c:	d91e      	bls.n	80093ac <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800936e:	4b93      	ldr	r3, [pc, #588]	; (80095bc <HAL_RCC_ClockConfig+0x270>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	2201      	movs	r2, #1
 8009374:	4393      	bics	r3, r2
 8009376:	0019      	movs	r1, r3
 8009378:	4b90      	ldr	r3, [pc, #576]	; (80095bc <HAL_RCC_ClockConfig+0x270>)
 800937a:	683a      	ldr	r2, [r7, #0]
 800937c:	430a      	orrs	r2, r1
 800937e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009380:	f7fb fee7 	bl	8005152 <HAL_GetTick>
 8009384:	0003      	movs	r3, r0
 8009386:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009388:	e009      	b.n	800939e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800938a:	f7fb fee2 	bl	8005152 <HAL_GetTick>
 800938e:	0002      	movs	r2, r0
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	1ad3      	subs	r3, r2, r3
 8009394:	4a8a      	ldr	r2, [pc, #552]	; (80095c0 <HAL_RCC_ClockConfig+0x274>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d901      	bls.n	800939e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800939a:	2303      	movs	r3, #3
 800939c:	e109      	b.n	80095b2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800939e:	4b87      	ldr	r3, [pc, #540]	; (80095bc <HAL_RCC_ClockConfig+0x270>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	2201      	movs	r2, #1
 80093a4:	4013      	ands	r3, r2
 80093a6:	683a      	ldr	r2, [r7, #0]
 80093a8:	429a      	cmp	r2, r3
 80093aa:	d1ee      	bne.n	800938a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	2202      	movs	r2, #2
 80093b2:	4013      	ands	r3, r2
 80093b4:	d009      	beq.n	80093ca <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80093b6:	4b83      	ldr	r3, [pc, #524]	; (80095c4 <HAL_RCC_ClockConfig+0x278>)
 80093b8:	68db      	ldr	r3, [r3, #12]
 80093ba:	22f0      	movs	r2, #240	; 0xf0
 80093bc:	4393      	bics	r3, r2
 80093be:	0019      	movs	r1, r3
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	689a      	ldr	r2, [r3, #8]
 80093c4:	4b7f      	ldr	r3, [pc, #508]	; (80095c4 <HAL_RCC_ClockConfig+0x278>)
 80093c6:	430a      	orrs	r2, r1
 80093c8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	2201      	movs	r2, #1
 80093d0:	4013      	ands	r3, r2
 80093d2:	d100      	bne.n	80093d6 <HAL_RCC_ClockConfig+0x8a>
 80093d4:	e089      	b.n	80094ea <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	685b      	ldr	r3, [r3, #4]
 80093da:	2b02      	cmp	r3, #2
 80093dc:	d107      	bne.n	80093ee <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80093de:	4b79      	ldr	r3, [pc, #484]	; (80095c4 <HAL_RCC_ClockConfig+0x278>)
 80093e0:	681a      	ldr	r2, [r3, #0]
 80093e2:	2380      	movs	r3, #128	; 0x80
 80093e4:	029b      	lsls	r3, r3, #10
 80093e6:	4013      	ands	r3, r2
 80093e8:	d120      	bne.n	800942c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80093ea:	2301      	movs	r3, #1
 80093ec:	e0e1      	b.n	80095b2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	685b      	ldr	r3, [r3, #4]
 80093f2:	2b03      	cmp	r3, #3
 80093f4:	d107      	bne.n	8009406 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80093f6:	4b73      	ldr	r3, [pc, #460]	; (80095c4 <HAL_RCC_ClockConfig+0x278>)
 80093f8:	681a      	ldr	r2, [r3, #0]
 80093fa:	2380      	movs	r3, #128	; 0x80
 80093fc:	049b      	lsls	r3, r3, #18
 80093fe:	4013      	ands	r3, r2
 8009400:	d114      	bne.n	800942c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8009402:	2301      	movs	r3, #1
 8009404:	e0d5      	b.n	80095b2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	685b      	ldr	r3, [r3, #4]
 800940a:	2b01      	cmp	r3, #1
 800940c:	d106      	bne.n	800941c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800940e:	4b6d      	ldr	r3, [pc, #436]	; (80095c4 <HAL_RCC_ClockConfig+0x278>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	2204      	movs	r2, #4
 8009414:	4013      	ands	r3, r2
 8009416:	d109      	bne.n	800942c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8009418:	2301      	movs	r3, #1
 800941a:	e0ca      	b.n	80095b2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800941c:	4b69      	ldr	r3, [pc, #420]	; (80095c4 <HAL_RCC_ClockConfig+0x278>)
 800941e:	681a      	ldr	r2, [r3, #0]
 8009420:	2380      	movs	r3, #128	; 0x80
 8009422:	009b      	lsls	r3, r3, #2
 8009424:	4013      	ands	r3, r2
 8009426:	d101      	bne.n	800942c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8009428:	2301      	movs	r3, #1
 800942a:	e0c2      	b.n	80095b2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800942c:	4b65      	ldr	r3, [pc, #404]	; (80095c4 <HAL_RCC_ClockConfig+0x278>)
 800942e:	68db      	ldr	r3, [r3, #12]
 8009430:	2203      	movs	r2, #3
 8009432:	4393      	bics	r3, r2
 8009434:	0019      	movs	r1, r3
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	685a      	ldr	r2, [r3, #4]
 800943a:	4b62      	ldr	r3, [pc, #392]	; (80095c4 <HAL_RCC_ClockConfig+0x278>)
 800943c:	430a      	orrs	r2, r1
 800943e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009440:	f7fb fe87 	bl	8005152 <HAL_GetTick>
 8009444:	0003      	movs	r3, r0
 8009446:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	685b      	ldr	r3, [r3, #4]
 800944c:	2b02      	cmp	r3, #2
 800944e:	d111      	bne.n	8009474 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009450:	e009      	b.n	8009466 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009452:	f7fb fe7e 	bl	8005152 <HAL_GetTick>
 8009456:	0002      	movs	r2, r0
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	1ad3      	subs	r3, r2, r3
 800945c:	4a58      	ldr	r2, [pc, #352]	; (80095c0 <HAL_RCC_ClockConfig+0x274>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d901      	bls.n	8009466 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8009462:	2303      	movs	r3, #3
 8009464:	e0a5      	b.n	80095b2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009466:	4b57      	ldr	r3, [pc, #348]	; (80095c4 <HAL_RCC_ClockConfig+0x278>)
 8009468:	68db      	ldr	r3, [r3, #12]
 800946a:	220c      	movs	r2, #12
 800946c:	4013      	ands	r3, r2
 800946e:	2b08      	cmp	r3, #8
 8009470:	d1ef      	bne.n	8009452 <HAL_RCC_ClockConfig+0x106>
 8009472:	e03a      	b.n	80094ea <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	685b      	ldr	r3, [r3, #4]
 8009478:	2b03      	cmp	r3, #3
 800947a:	d111      	bne.n	80094a0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800947c:	e009      	b.n	8009492 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800947e:	f7fb fe68 	bl	8005152 <HAL_GetTick>
 8009482:	0002      	movs	r2, r0
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	1ad3      	subs	r3, r2, r3
 8009488:	4a4d      	ldr	r2, [pc, #308]	; (80095c0 <HAL_RCC_ClockConfig+0x274>)
 800948a:	4293      	cmp	r3, r2
 800948c:	d901      	bls.n	8009492 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800948e:	2303      	movs	r3, #3
 8009490:	e08f      	b.n	80095b2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009492:	4b4c      	ldr	r3, [pc, #304]	; (80095c4 <HAL_RCC_ClockConfig+0x278>)
 8009494:	68db      	ldr	r3, [r3, #12]
 8009496:	220c      	movs	r2, #12
 8009498:	4013      	ands	r3, r2
 800949a:	2b0c      	cmp	r3, #12
 800949c:	d1ef      	bne.n	800947e <HAL_RCC_ClockConfig+0x132>
 800949e:	e024      	b.n	80094ea <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	685b      	ldr	r3, [r3, #4]
 80094a4:	2b01      	cmp	r3, #1
 80094a6:	d11b      	bne.n	80094e0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80094a8:	e009      	b.n	80094be <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80094aa:	f7fb fe52 	bl	8005152 <HAL_GetTick>
 80094ae:	0002      	movs	r2, r0
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	1ad3      	subs	r3, r2, r3
 80094b4:	4a42      	ldr	r2, [pc, #264]	; (80095c0 <HAL_RCC_ClockConfig+0x274>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d901      	bls.n	80094be <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80094ba:	2303      	movs	r3, #3
 80094bc:	e079      	b.n	80095b2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80094be:	4b41      	ldr	r3, [pc, #260]	; (80095c4 <HAL_RCC_ClockConfig+0x278>)
 80094c0:	68db      	ldr	r3, [r3, #12]
 80094c2:	220c      	movs	r2, #12
 80094c4:	4013      	ands	r3, r2
 80094c6:	2b04      	cmp	r3, #4
 80094c8:	d1ef      	bne.n	80094aa <HAL_RCC_ClockConfig+0x15e>
 80094ca:	e00e      	b.n	80094ea <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80094cc:	f7fb fe41 	bl	8005152 <HAL_GetTick>
 80094d0:	0002      	movs	r2, r0
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	1ad3      	subs	r3, r2, r3
 80094d6:	4a3a      	ldr	r2, [pc, #232]	; (80095c0 <HAL_RCC_ClockConfig+0x274>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d901      	bls.n	80094e0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80094dc:	2303      	movs	r3, #3
 80094de:	e068      	b.n	80095b2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80094e0:	4b38      	ldr	r3, [pc, #224]	; (80095c4 <HAL_RCC_ClockConfig+0x278>)
 80094e2:	68db      	ldr	r3, [r3, #12]
 80094e4:	220c      	movs	r2, #12
 80094e6:	4013      	ands	r3, r2
 80094e8:	d1f0      	bne.n	80094cc <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80094ea:	4b34      	ldr	r3, [pc, #208]	; (80095bc <HAL_RCC_ClockConfig+0x270>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	2201      	movs	r2, #1
 80094f0:	4013      	ands	r3, r2
 80094f2:	683a      	ldr	r2, [r7, #0]
 80094f4:	429a      	cmp	r2, r3
 80094f6:	d21e      	bcs.n	8009536 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80094f8:	4b30      	ldr	r3, [pc, #192]	; (80095bc <HAL_RCC_ClockConfig+0x270>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	2201      	movs	r2, #1
 80094fe:	4393      	bics	r3, r2
 8009500:	0019      	movs	r1, r3
 8009502:	4b2e      	ldr	r3, [pc, #184]	; (80095bc <HAL_RCC_ClockConfig+0x270>)
 8009504:	683a      	ldr	r2, [r7, #0]
 8009506:	430a      	orrs	r2, r1
 8009508:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800950a:	f7fb fe22 	bl	8005152 <HAL_GetTick>
 800950e:	0003      	movs	r3, r0
 8009510:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009512:	e009      	b.n	8009528 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009514:	f7fb fe1d 	bl	8005152 <HAL_GetTick>
 8009518:	0002      	movs	r2, r0
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	1ad3      	subs	r3, r2, r3
 800951e:	4a28      	ldr	r2, [pc, #160]	; (80095c0 <HAL_RCC_ClockConfig+0x274>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d901      	bls.n	8009528 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8009524:	2303      	movs	r3, #3
 8009526:	e044      	b.n	80095b2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009528:	4b24      	ldr	r3, [pc, #144]	; (80095bc <HAL_RCC_ClockConfig+0x270>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	2201      	movs	r2, #1
 800952e:	4013      	ands	r3, r2
 8009530:	683a      	ldr	r2, [r7, #0]
 8009532:	429a      	cmp	r2, r3
 8009534:	d1ee      	bne.n	8009514 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	2204      	movs	r2, #4
 800953c:	4013      	ands	r3, r2
 800953e:	d009      	beq.n	8009554 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009540:	4b20      	ldr	r3, [pc, #128]	; (80095c4 <HAL_RCC_ClockConfig+0x278>)
 8009542:	68db      	ldr	r3, [r3, #12]
 8009544:	4a20      	ldr	r2, [pc, #128]	; (80095c8 <HAL_RCC_ClockConfig+0x27c>)
 8009546:	4013      	ands	r3, r2
 8009548:	0019      	movs	r1, r3
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	68da      	ldr	r2, [r3, #12]
 800954e:	4b1d      	ldr	r3, [pc, #116]	; (80095c4 <HAL_RCC_ClockConfig+0x278>)
 8009550:	430a      	orrs	r2, r1
 8009552:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	2208      	movs	r2, #8
 800955a:	4013      	ands	r3, r2
 800955c:	d00a      	beq.n	8009574 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800955e:	4b19      	ldr	r3, [pc, #100]	; (80095c4 <HAL_RCC_ClockConfig+0x278>)
 8009560:	68db      	ldr	r3, [r3, #12]
 8009562:	4a1a      	ldr	r2, [pc, #104]	; (80095cc <HAL_RCC_ClockConfig+0x280>)
 8009564:	4013      	ands	r3, r2
 8009566:	0019      	movs	r1, r3
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	691b      	ldr	r3, [r3, #16]
 800956c:	00da      	lsls	r2, r3, #3
 800956e:	4b15      	ldr	r3, [pc, #84]	; (80095c4 <HAL_RCC_ClockConfig+0x278>)
 8009570:	430a      	orrs	r2, r1
 8009572:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009574:	f000 f832 	bl	80095dc <HAL_RCC_GetSysClockFreq>
 8009578:	0001      	movs	r1, r0
 800957a:	4b12      	ldr	r3, [pc, #72]	; (80095c4 <HAL_RCC_ClockConfig+0x278>)
 800957c:	68db      	ldr	r3, [r3, #12]
 800957e:	091b      	lsrs	r3, r3, #4
 8009580:	220f      	movs	r2, #15
 8009582:	4013      	ands	r3, r2
 8009584:	4a12      	ldr	r2, [pc, #72]	; (80095d0 <HAL_RCC_ClockConfig+0x284>)
 8009586:	5cd3      	ldrb	r3, [r2, r3]
 8009588:	000a      	movs	r2, r1
 800958a:	40da      	lsrs	r2, r3
 800958c:	4b11      	ldr	r3, [pc, #68]	; (80095d4 <HAL_RCC_ClockConfig+0x288>)
 800958e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8009590:	4b11      	ldr	r3, [pc, #68]	; (80095d8 <HAL_RCC_ClockConfig+0x28c>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	250b      	movs	r5, #11
 8009596:	197c      	adds	r4, r7, r5
 8009598:	0018      	movs	r0, r3
 800959a:	f7fb fdd1 	bl	8005140 <HAL_InitTick>
 800959e:	0003      	movs	r3, r0
 80095a0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80095a2:	197b      	adds	r3, r7, r5
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d002      	beq.n	80095b0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80095aa:	197b      	adds	r3, r7, r5
 80095ac:	781b      	ldrb	r3, [r3, #0]
 80095ae:	e000      	b.n	80095b2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80095b0:	2300      	movs	r3, #0
}
 80095b2:	0018      	movs	r0, r3
 80095b4:	46bd      	mov	sp, r7
 80095b6:	b004      	add	sp, #16
 80095b8:	bdb0      	pop	{r4, r5, r7, pc}
 80095ba:	46c0      	nop			; (mov r8, r8)
 80095bc:	40022000 	.word	0x40022000
 80095c0:	00001388 	.word	0x00001388
 80095c4:	40021000 	.word	0x40021000
 80095c8:	fffff8ff 	.word	0xfffff8ff
 80095cc:	ffffc7ff 	.word	0xffffc7ff
 80095d0:	0801ef24 	.word	0x0801ef24
 80095d4:	20000070 	.word	0x20000070
 80095d8:	20000074 	.word	0x20000074

080095dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80095dc:	b5b0      	push	{r4, r5, r7, lr}
 80095de:	b08e      	sub	sp, #56	; 0x38
 80095e0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80095e2:	4b4c      	ldr	r3, [pc, #304]	; (8009714 <HAL_RCC_GetSysClockFreq+0x138>)
 80095e4:	68db      	ldr	r3, [r3, #12]
 80095e6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80095e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095ea:	230c      	movs	r3, #12
 80095ec:	4013      	ands	r3, r2
 80095ee:	2b0c      	cmp	r3, #12
 80095f0:	d014      	beq.n	800961c <HAL_RCC_GetSysClockFreq+0x40>
 80095f2:	d900      	bls.n	80095f6 <HAL_RCC_GetSysClockFreq+0x1a>
 80095f4:	e07b      	b.n	80096ee <HAL_RCC_GetSysClockFreq+0x112>
 80095f6:	2b04      	cmp	r3, #4
 80095f8:	d002      	beq.n	8009600 <HAL_RCC_GetSysClockFreq+0x24>
 80095fa:	2b08      	cmp	r3, #8
 80095fc:	d00b      	beq.n	8009616 <HAL_RCC_GetSysClockFreq+0x3a>
 80095fe:	e076      	b.n	80096ee <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8009600:	4b44      	ldr	r3, [pc, #272]	; (8009714 <HAL_RCC_GetSysClockFreq+0x138>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	2210      	movs	r2, #16
 8009606:	4013      	ands	r3, r2
 8009608:	d002      	beq.n	8009610 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800960a:	4b43      	ldr	r3, [pc, #268]	; (8009718 <HAL_RCC_GetSysClockFreq+0x13c>)
 800960c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800960e:	e07c      	b.n	800970a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8009610:	4b42      	ldr	r3, [pc, #264]	; (800971c <HAL_RCC_GetSysClockFreq+0x140>)
 8009612:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8009614:	e079      	b.n	800970a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8009616:	4b42      	ldr	r3, [pc, #264]	; (8009720 <HAL_RCC_GetSysClockFreq+0x144>)
 8009618:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800961a:	e076      	b.n	800970a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800961c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800961e:	0c9a      	lsrs	r2, r3, #18
 8009620:	230f      	movs	r3, #15
 8009622:	401a      	ands	r2, r3
 8009624:	4b3f      	ldr	r3, [pc, #252]	; (8009724 <HAL_RCC_GetSysClockFreq+0x148>)
 8009626:	5c9b      	ldrb	r3, [r3, r2]
 8009628:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800962a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800962c:	0d9a      	lsrs	r2, r3, #22
 800962e:	2303      	movs	r3, #3
 8009630:	4013      	ands	r3, r2
 8009632:	3301      	adds	r3, #1
 8009634:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009636:	4b37      	ldr	r3, [pc, #220]	; (8009714 <HAL_RCC_GetSysClockFreq+0x138>)
 8009638:	68da      	ldr	r2, [r3, #12]
 800963a:	2380      	movs	r3, #128	; 0x80
 800963c:	025b      	lsls	r3, r3, #9
 800963e:	4013      	ands	r3, r2
 8009640:	d01a      	beq.n	8009678 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8009642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009644:	61bb      	str	r3, [r7, #24]
 8009646:	2300      	movs	r3, #0
 8009648:	61fb      	str	r3, [r7, #28]
 800964a:	4a35      	ldr	r2, [pc, #212]	; (8009720 <HAL_RCC_GetSysClockFreq+0x144>)
 800964c:	2300      	movs	r3, #0
 800964e:	69b8      	ldr	r0, [r7, #24]
 8009650:	69f9      	ldr	r1, [r7, #28]
 8009652:	f7f6 ff9d 	bl	8000590 <__aeabi_lmul>
 8009656:	0002      	movs	r2, r0
 8009658:	000b      	movs	r3, r1
 800965a:	0010      	movs	r0, r2
 800965c:	0019      	movs	r1, r3
 800965e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009660:	613b      	str	r3, [r7, #16]
 8009662:	2300      	movs	r3, #0
 8009664:	617b      	str	r3, [r7, #20]
 8009666:	693a      	ldr	r2, [r7, #16]
 8009668:	697b      	ldr	r3, [r7, #20]
 800966a:	f7f6 ff71 	bl	8000550 <__aeabi_uldivmod>
 800966e:	0002      	movs	r2, r0
 8009670:	000b      	movs	r3, r1
 8009672:	0013      	movs	r3, r2
 8009674:	637b      	str	r3, [r7, #52]	; 0x34
 8009676:	e037      	b.n	80096e8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8009678:	4b26      	ldr	r3, [pc, #152]	; (8009714 <HAL_RCC_GetSysClockFreq+0x138>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	2210      	movs	r2, #16
 800967e:	4013      	ands	r3, r2
 8009680:	d01a      	beq.n	80096b8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8009682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009684:	60bb      	str	r3, [r7, #8]
 8009686:	2300      	movs	r3, #0
 8009688:	60fb      	str	r3, [r7, #12]
 800968a:	4a23      	ldr	r2, [pc, #140]	; (8009718 <HAL_RCC_GetSysClockFreq+0x13c>)
 800968c:	2300      	movs	r3, #0
 800968e:	68b8      	ldr	r0, [r7, #8]
 8009690:	68f9      	ldr	r1, [r7, #12]
 8009692:	f7f6 ff7d 	bl	8000590 <__aeabi_lmul>
 8009696:	0002      	movs	r2, r0
 8009698:	000b      	movs	r3, r1
 800969a:	0010      	movs	r0, r2
 800969c:	0019      	movs	r1, r3
 800969e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a0:	603b      	str	r3, [r7, #0]
 80096a2:	2300      	movs	r3, #0
 80096a4:	607b      	str	r3, [r7, #4]
 80096a6:	683a      	ldr	r2, [r7, #0]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f7f6 ff51 	bl	8000550 <__aeabi_uldivmod>
 80096ae:	0002      	movs	r2, r0
 80096b0:	000b      	movs	r3, r1
 80096b2:	0013      	movs	r3, r2
 80096b4:	637b      	str	r3, [r7, #52]	; 0x34
 80096b6:	e017      	b.n	80096e8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80096b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ba:	0018      	movs	r0, r3
 80096bc:	2300      	movs	r3, #0
 80096be:	0019      	movs	r1, r3
 80096c0:	4a16      	ldr	r2, [pc, #88]	; (800971c <HAL_RCC_GetSysClockFreq+0x140>)
 80096c2:	2300      	movs	r3, #0
 80096c4:	f7f6 ff64 	bl	8000590 <__aeabi_lmul>
 80096c8:	0002      	movs	r2, r0
 80096ca:	000b      	movs	r3, r1
 80096cc:	0010      	movs	r0, r2
 80096ce:	0019      	movs	r1, r3
 80096d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d2:	001c      	movs	r4, r3
 80096d4:	2300      	movs	r3, #0
 80096d6:	001d      	movs	r5, r3
 80096d8:	0022      	movs	r2, r4
 80096da:	002b      	movs	r3, r5
 80096dc:	f7f6 ff38 	bl	8000550 <__aeabi_uldivmod>
 80096e0:	0002      	movs	r2, r0
 80096e2:	000b      	movs	r3, r1
 80096e4:	0013      	movs	r3, r2
 80096e6:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80096e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096ea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80096ec:	e00d      	b.n	800970a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80096ee:	4b09      	ldr	r3, [pc, #36]	; (8009714 <HAL_RCC_GetSysClockFreq+0x138>)
 80096f0:	685b      	ldr	r3, [r3, #4]
 80096f2:	0b5b      	lsrs	r3, r3, #13
 80096f4:	2207      	movs	r2, #7
 80096f6:	4013      	ands	r3, r2
 80096f8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80096fa:	6a3b      	ldr	r3, [r7, #32]
 80096fc:	3301      	adds	r3, #1
 80096fe:	2280      	movs	r2, #128	; 0x80
 8009700:	0212      	lsls	r2, r2, #8
 8009702:	409a      	lsls	r2, r3
 8009704:	0013      	movs	r3, r2
 8009706:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8009708:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800970a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800970c:	0018      	movs	r0, r3
 800970e:	46bd      	mov	sp, r7
 8009710:	b00e      	add	sp, #56	; 0x38
 8009712:	bdb0      	pop	{r4, r5, r7, pc}
 8009714:	40021000 	.word	0x40021000
 8009718:	003d0900 	.word	0x003d0900
 800971c:	00f42400 	.word	0x00f42400
 8009720:	007a1200 	.word	0x007a1200
 8009724:	0801ef3c 	.word	0x0801ef3c

08009728 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800972c:	4b02      	ldr	r3, [pc, #8]	; (8009738 <HAL_RCC_GetHCLKFreq+0x10>)
 800972e:	681b      	ldr	r3, [r3, #0]
}
 8009730:	0018      	movs	r0, r3
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}
 8009736:	46c0      	nop			; (mov r8, r8)
 8009738:	20000070 	.word	0x20000070

0800973c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009740:	f7ff fff2 	bl	8009728 <HAL_RCC_GetHCLKFreq>
 8009744:	0001      	movs	r1, r0
 8009746:	4b06      	ldr	r3, [pc, #24]	; (8009760 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009748:	68db      	ldr	r3, [r3, #12]
 800974a:	0a1b      	lsrs	r3, r3, #8
 800974c:	2207      	movs	r2, #7
 800974e:	4013      	ands	r3, r2
 8009750:	4a04      	ldr	r2, [pc, #16]	; (8009764 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009752:	5cd3      	ldrb	r3, [r2, r3]
 8009754:	40d9      	lsrs	r1, r3
 8009756:	000b      	movs	r3, r1
}
 8009758:	0018      	movs	r0, r3
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}
 800975e:	46c0      	nop			; (mov r8, r8)
 8009760:	40021000 	.word	0x40021000
 8009764:	0801ef34 	.word	0x0801ef34

08009768 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800976c:	f7ff ffdc 	bl	8009728 <HAL_RCC_GetHCLKFreq>
 8009770:	0001      	movs	r1, r0
 8009772:	4b06      	ldr	r3, [pc, #24]	; (800978c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009774:	68db      	ldr	r3, [r3, #12]
 8009776:	0adb      	lsrs	r3, r3, #11
 8009778:	2207      	movs	r2, #7
 800977a:	4013      	ands	r3, r2
 800977c:	4a04      	ldr	r2, [pc, #16]	; (8009790 <HAL_RCC_GetPCLK2Freq+0x28>)
 800977e:	5cd3      	ldrb	r3, [r2, r3]
 8009780:	40d9      	lsrs	r1, r3
 8009782:	000b      	movs	r3, r1
}
 8009784:	0018      	movs	r0, r3
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}
 800978a:	46c0      	nop			; (mov r8, r8)
 800978c:	40021000 	.word	0x40021000
 8009790:	0801ef34 	.word	0x0801ef34

08009794 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b086      	sub	sp, #24
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800979c:	2017      	movs	r0, #23
 800979e:	183b      	adds	r3, r7, r0
 80097a0:	2200      	movs	r2, #0
 80097a2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	2220      	movs	r2, #32
 80097aa:	4013      	ands	r3, r2
 80097ac:	d100      	bne.n	80097b0 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80097ae:	e0c2      	b.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80097b0:	4b98      	ldr	r3, [pc, #608]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80097b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097b4:	2380      	movs	r3, #128	; 0x80
 80097b6:	055b      	lsls	r3, r3, #21
 80097b8:	4013      	ands	r3, r2
 80097ba:	d109      	bne.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80097bc:	4b95      	ldr	r3, [pc, #596]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80097be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097c0:	4b94      	ldr	r3, [pc, #592]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80097c2:	2180      	movs	r1, #128	; 0x80
 80097c4:	0549      	lsls	r1, r1, #21
 80097c6:	430a      	orrs	r2, r1
 80097c8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80097ca:	183b      	adds	r3, r7, r0
 80097cc:	2201      	movs	r2, #1
 80097ce:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80097d0:	4b91      	ldr	r3, [pc, #580]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80097d2:	681a      	ldr	r2, [r3, #0]
 80097d4:	2380      	movs	r3, #128	; 0x80
 80097d6:	005b      	lsls	r3, r3, #1
 80097d8:	4013      	ands	r3, r2
 80097da:	d11a      	bne.n	8009812 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80097dc:	4b8e      	ldr	r3, [pc, #568]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80097de:	681a      	ldr	r2, [r3, #0]
 80097e0:	4b8d      	ldr	r3, [pc, #564]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80097e2:	2180      	movs	r1, #128	; 0x80
 80097e4:	0049      	lsls	r1, r1, #1
 80097e6:	430a      	orrs	r2, r1
 80097e8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80097ea:	f7fb fcb2 	bl	8005152 <HAL_GetTick>
 80097ee:	0003      	movs	r3, r0
 80097f0:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80097f2:	e008      	b.n	8009806 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80097f4:	f7fb fcad 	bl	8005152 <HAL_GetTick>
 80097f8:	0002      	movs	r2, r0
 80097fa:	693b      	ldr	r3, [r7, #16]
 80097fc:	1ad3      	subs	r3, r2, r3
 80097fe:	2b64      	cmp	r3, #100	; 0x64
 8009800:	d901      	bls.n	8009806 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8009802:	2303      	movs	r3, #3
 8009804:	e102      	b.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0x278>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009806:	4b84      	ldr	r3, [pc, #528]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009808:	681a      	ldr	r2, [r3, #0]
 800980a:	2380      	movs	r3, #128	; 0x80
 800980c:	005b      	lsls	r3, r3, #1
 800980e:	4013      	ands	r3, r2
 8009810:	d0f0      	beq.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8009812:	4b80      	ldr	r3, [pc, #512]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009814:	681a      	ldr	r2, [r3, #0]
 8009816:	23c0      	movs	r3, #192	; 0xc0
 8009818:	039b      	lsls	r3, r3, #14
 800981a:	4013      	ands	r3, r2
 800981c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	685a      	ldr	r2, [r3, #4]
 8009822:	23c0      	movs	r3, #192	; 0xc0
 8009824:	039b      	lsls	r3, r3, #14
 8009826:	4013      	ands	r3, r2
 8009828:	68fa      	ldr	r2, [r7, #12]
 800982a:	429a      	cmp	r2, r3
 800982c:	d013      	beq.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	685a      	ldr	r2, [r3, #4]
 8009832:	23c0      	movs	r3, #192	; 0xc0
 8009834:	029b      	lsls	r3, r3, #10
 8009836:	401a      	ands	r2, r3
 8009838:	23c0      	movs	r3, #192	; 0xc0
 800983a:	029b      	lsls	r3, r3, #10
 800983c:	429a      	cmp	r2, r3
 800983e:	d10a      	bne.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009840:	4b74      	ldr	r3, [pc, #464]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009842:	681a      	ldr	r2, [r3, #0]
 8009844:	2380      	movs	r3, #128	; 0x80
 8009846:	029b      	lsls	r3, r3, #10
 8009848:	401a      	ands	r2, r3
 800984a:	2380      	movs	r3, #128	; 0x80
 800984c:	029b      	lsls	r3, r3, #10
 800984e:	429a      	cmp	r2, r3
 8009850:	d101      	bne.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8009852:	2301      	movs	r3, #1
 8009854:	e0da      	b.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0x278>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8009856:	4b6f      	ldr	r3, [pc, #444]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009858:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800985a:	23c0      	movs	r3, #192	; 0xc0
 800985c:	029b      	lsls	r3, r3, #10
 800985e:	4013      	ands	r3, r2
 8009860:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d03b      	beq.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	685a      	ldr	r2, [r3, #4]
 800986c:	23c0      	movs	r3, #192	; 0xc0
 800986e:	029b      	lsls	r3, r3, #10
 8009870:	4013      	ands	r3, r2
 8009872:	68fa      	ldr	r2, [r7, #12]
 8009874:	429a      	cmp	r2, r3
 8009876:	d033      	beq.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	2220      	movs	r2, #32
 800987e:	4013      	ands	r3, r2
 8009880:	d02e      	beq.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8009882:	4b64      	ldr	r3, [pc, #400]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009886:	4a65      	ldr	r2, [pc, #404]	; (8009a1c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8009888:	4013      	ands	r3, r2
 800988a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800988c:	4b61      	ldr	r3, [pc, #388]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800988e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009890:	4b60      	ldr	r3, [pc, #384]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009892:	2180      	movs	r1, #128	; 0x80
 8009894:	0309      	lsls	r1, r1, #12
 8009896:	430a      	orrs	r2, r1
 8009898:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800989a:	4b5e      	ldr	r3, [pc, #376]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800989c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800989e:	4b5d      	ldr	r3, [pc, #372]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80098a0:	495f      	ldr	r1, [pc, #380]	; (8009a20 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80098a2:	400a      	ands	r2, r1
 80098a4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80098a6:	4b5b      	ldr	r3, [pc, #364]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80098a8:	68fa      	ldr	r2, [r7, #12]
 80098aa:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80098ac:	68fa      	ldr	r2, [r7, #12]
 80098ae:	2380      	movs	r3, #128	; 0x80
 80098b0:	005b      	lsls	r3, r3, #1
 80098b2:	4013      	ands	r3, r2
 80098b4:	d014      	beq.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80098b6:	f7fb fc4c 	bl	8005152 <HAL_GetTick>
 80098ba:	0003      	movs	r3, r0
 80098bc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80098be:	e009      	b.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80098c0:	f7fb fc47 	bl	8005152 <HAL_GetTick>
 80098c4:	0002      	movs	r2, r0
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	1ad3      	subs	r3, r2, r3
 80098ca:	4a56      	ldr	r2, [pc, #344]	; (8009a24 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d901      	bls.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80098d0:	2303      	movs	r3, #3
 80098d2:	e09b      	b.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0x278>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80098d4:	4b4f      	ldr	r3, [pc, #316]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80098d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80098d8:	2380      	movs	r3, #128	; 0x80
 80098da:	009b      	lsls	r3, r3, #2
 80098dc:	4013      	ands	r3, r2
 80098de:	d0ef      	beq.n	80098c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	685a      	ldr	r2, [r3, #4]
 80098e4:	23c0      	movs	r3, #192	; 0xc0
 80098e6:	029b      	lsls	r3, r3, #10
 80098e8:	401a      	ands	r2, r3
 80098ea:	23c0      	movs	r3, #192	; 0xc0
 80098ec:	029b      	lsls	r3, r3, #10
 80098ee:	429a      	cmp	r2, r3
 80098f0:	d10c      	bne.n	800990c <HAL_RCCEx_PeriphCLKConfig+0x178>
 80098f2:	4b48      	ldr	r3, [pc, #288]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	4a4c      	ldr	r2, [pc, #304]	; (8009a28 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80098f8:	4013      	ands	r3, r2
 80098fa:	0019      	movs	r1, r3
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	685a      	ldr	r2, [r3, #4]
 8009900:	23c0      	movs	r3, #192	; 0xc0
 8009902:	039b      	lsls	r3, r3, #14
 8009904:	401a      	ands	r2, r3
 8009906:	4b43      	ldr	r3, [pc, #268]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009908:	430a      	orrs	r2, r1
 800990a:	601a      	str	r2, [r3, #0]
 800990c:	4b41      	ldr	r3, [pc, #260]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800990e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	685a      	ldr	r2, [r3, #4]
 8009914:	23c0      	movs	r3, #192	; 0xc0
 8009916:	029b      	lsls	r3, r3, #10
 8009918:	401a      	ands	r2, r3
 800991a:	4b3e      	ldr	r3, [pc, #248]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800991c:	430a      	orrs	r2, r1
 800991e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8009920:	2317      	movs	r3, #23
 8009922:	18fb      	adds	r3, r7, r3
 8009924:	781b      	ldrb	r3, [r3, #0]
 8009926:	2b01      	cmp	r3, #1
 8009928:	d105      	bne.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800992a:	4b3a      	ldr	r3, [pc, #232]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800992c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800992e:	4b39      	ldr	r3, [pc, #228]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009930:	493e      	ldr	r1, [pc, #248]	; (8009a2c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8009932:	400a      	ands	r2, r1
 8009934:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	2201      	movs	r2, #1
 800993c:	4013      	ands	r3, r2
 800993e:	d009      	beq.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009940:	4b34      	ldr	r3, [pc, #208]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009944:	2203      	movs	r2, #3
 8009946:	4393      	bics	r3, r2
 8009948:	0019      	movs	r1, r3
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	689a      	ldr	r2, [r3, #8]
 800994e:	4b31      	ldr	r3, [pc, #196]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009950:	430a      	orrs	r2, r1
 8009952:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	2202      	movs	r2, #2
 800995a:	4013      	ands	r3, r2
 800995c:	d009      	beq.n	8009972 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800995e:	4b2d      	ldr	r3, [pc, #180]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009962:	220c      	movs	r2, #12
 8009964:	4393      	bics	r3, r2
 8009966:	0019      	movs	r1, r3
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	68da      	ldr	r2, [r3, #12]
 800996c:	4b29      	ldr	r3, [pc, #164]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800996e:	430a      	orrs	r2, r1
 8009970:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	2204      	movs	r2, #4
 8009978:	4013      	ands	r3, r2
 800997a:	d009      	beq.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800997c:	4b25      	ldr	r3, [pc, #148]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800997e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009980:	4a2b      	ldr	r2, [pc, #172]	; (8009a30 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8009982:	4013      	ands	r3, r2
 8009984:	0019      	movs	r1, r3
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	691a      	ldr	r2, [r3, #16]
 800998a:	4b22      	ldr	r3, [pc, #136]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800998c:	430a      	orrs	r2, r1
 800998e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	2208      	movs	r2, #8
 8009996:	4013      	ands	r3, r2
 8009998:	d009      	beq.n	80099ae <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800999a:	4b1e      	ldr	r3, [pc, #120]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800999c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800999e:	4a25      	ldr	r2, [pc, #148]	; (8009a34 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80099a0:	4013      	ands	r3, r2
 80099a2:	0019      	movs	r1, r3
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	695a      	ldr	r2, [r3, #20]
 80099a8:	4b1a      	ldr	r3, [pc, #104]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80099aa:	430a      	orrs	r2, r1
 80099ac:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681a      	ldr	r2, [r3, #0]
 80099b2:	2380      	movs	r3, #128	; 0x80
 80099b4:	005b      	lsls	r3, r3, #1
 80099b6:	4013      	ands	r3, r2
 80099b8:	d009      	beq.n	80099ce <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80099ba:	4b16      	ldr	r3, [pc, #88]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80099bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099be:	4a17      	ldr	r2, [pc, #92]	; (8009a1c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80099c0:	4013      	ands	r3, r2
 80099c2:	0019      	movs	r1, r3
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	699a      	ldr	r2, [r3, #24]
 80099c8:	4b12      	ldr	r3, [pc, #72]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80099ca:	430a      	orrs	r2, r1
 80099cc:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	2240      	movs	r2, #64	; 0x40
 80099d4:	4013      	ands	r3, r2
 80099d6:	d009      	beq.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80099d8:	4b0e      	ldr	r3, [pc, #56]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80099da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099dc:	4a16      	ldr	r2, [pc, #88]	; (8009a38 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80099de:	4013      	ands	r3, r2
 80099e0:	0019      	movs	r1, r3
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6a1a      	ldr	r2, [r3, #32]
 80099e6:	4b0b      	ldr	r3, [pc, #44]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80099e8:	430a      	orrs	r2, r1
 80099ea:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	2280      	movs	r2, #128	; 0x80
 80099f2:	4013      	ands	r3, r2
 80099f4:	d009      	beq.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80099f6:	4b07      	ldr	r3, [pc, #28]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80099f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099fa:	4a10      	ldr	r2, [pc, #64]	; (8009a3c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80099fc:	4013      	ands	r3, r2
 80099fe:	0019      	movs	r1, r3
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	69da      	ldr	r2, [r3, #28]
 8009a04:	4b03      	ldr	r3, [pc, #12]	; (8009a14 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a06:	430a      	orrs	r2, r1
 8009a08:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009a0a:	2300      	movs	r3, #0
}
 8009a0c:	0018      	movs	r0, r3
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	b006      	add	sp, #24
 8009a12:	bd80      	pop	{r7, pc}
 8009a14:	40021000 	.word	0x40021000
 8009a18:	40007000 	.word	0x40007000
 8009a1c:	fffcffff 	.word	0xfffcffff
 8009a20:	fff7ffff 	.word	0xfff7ffff
 8009a24:	00001388 	.word	0x00001388
 8009a28:	ffcfffff 	.word	0xffcfffff
 8009a2c:	efffffff 	.word	0xefffffff
 8009a30:	fffff3ff 	.word	0xfffff3ff
 8009a34:	ffffcfff 	.word	0xffffcfff
 8009a38:	fbffffff 	.word	0xfbffffff
 8009a3c:	fff3ffff 	.word	0xfff3ffff

08009a40 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b082      	sub	sp, #8
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d101      	bne.n	8009a52 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8009a4e:	2301      	movs	r3, #1
 8009a50:	e08e      	b.n	8009b70 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2221      	movs	r2, #33	; 0x21
 8009a56:	5c9b      	ldrb	r3, [r3, r2]
 8009a58:	b2db      	uxtb	r3, r3
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d107      	bne.n	8009a6e <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2220      	movs	r2, #32
 8009a62:	2100      	movs	r1, #0
 8009a64:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	0018      	movs	r0, r3
 8009a6a:	f7fa f9d1 	bl	8003e10 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2221      	movs	r2, #33	; 0x21
 8009a72:	2102      	movs	r1, #2
 8009a74:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	22ca      	movs	r2, #202	; 0xca
 8009a7c:	625a      	str	r2, [r3, #36]	; 0x24
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	2253      	movs	r2, #83	; 0x53
 8009a84:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	0018      	movs	r0, r3
 8009a8a:	f000 fcf4 	bl	800a476 <RTC_EnterInitMode>
 8009a8e:	1e03      	subs	r3, r0, #0
 8009a90:	d009      	beq.n	8009aa6 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	22ff      	movs	r2, #255	; 0xff
 8009a98:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2221      	movs	r2, #33	; 0x21
 8009a9e:	2104      	movs	r1, #4
 8009aa0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	e064      	b.n	8009b70 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	689a      	ldr	r2, [r3, #8]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4931      	ldr	r1, [pc, #196]	; (8009b78 <HAL_RTC_Init+0x138>)
 8009ab2:	400a      	ands	r2, r1
 8009ab4:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	6899      	ldr	r1, [r3, #8]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	685a      	ldr	r2, [r3, #4]
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	691b      	ldr	r3, [r3, #16]
 8009ac4:	431a      	orrs	r2, r3
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	699b      	ldr	r3, [r3, #24]
 8009aca:	431a      	orrs	r2, r3
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	430a      	orrs	r2, r1
 8009ad2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	687a      	ldr	r2, [r7, #4]
 8009ada:	68d2      	ldr	r2, [r2, #12]
 8009adc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	6919      	ldr	r1, [r3, #16]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	689b      	ldr	r3, [r3, #8]
 8009ae8:	041a      	lsls	r2, r3, #16
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	430a      	orrs	r2, r1
 8009af0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	68da      	ldr	r2, [r3, #12]
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	2180      	movs	r1, #128	; 0x80
 8009afe:	438a      	bics	r2, r1
 8009b00:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	2103      	movs	r1, #3
 8009b0e:	438a      	bics	r2, r1
 8009b10:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	69da      	ldr	r2, [r3, #28]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	695b      	ldr	r3, [r3, #20]
 8009b20:	431a      	orrs	r2, r3
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	430a      	orrs	r2, r1
 8009b28:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	689b      	ldr	r3, [r3, #8]
 8009b30:	2220      	movs	r2, #32
 8009b32:	4013      	ands	r3, r2
 8009b34:	d113      	bne.n	8009b5e <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	0018      	movs	r0, r3
 8009b3a:	f000 fc75 	bl	800a428 <HAL_RTC_WaitForSynchro>
 8009b3e:	1e03      	subs	r3, r0, #0
 8009b40:	d00d      	beq.n	8009b5e <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	22ff      	movs	r2, #255	; 0xff
 8009b48:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2221      	movs	r2, #33	; 0x21
 8009b4e:	2104      	movs	r1, #4
 8009b50:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2220      	movs	r2, #32
 8009b56:	2100      	movs	r1, #0
 8009b58:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	e008      	b.n	8009b70 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	22ff      	movs	r2, #255	; 0xff
 8009b64:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2221      	movs	r2, #33	; 0x21
 8009b6a:	2101      	movs	r1, #1
 8009b6c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009b6e:	2300      	movs	r3, #0
  }
}
 8009b70:	0018      	movs	r0, r3
 8009b72:	46bd      	mov	sp, r7
 8009b74:	b002      	add	sp, #8
 8009b76:	bd80      	pop	{r7, pc}
 8009b78:	ff8fffbf 	.word	0xff8fffbf

08009b7c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009b7c:	b590      	push	{r4, r7, lr}
 8009b7e:	b087      	sub	sp, #28
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	60f8      	str	r0, [r7, #12]
 8009b84:	60b9      	str	r1, [r7, #8]
 8009b86:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	2220      	movs	r2, #32
 8009b8c:	5c9b      	ldrb	r3, [r3, r2]
 8009b8e:	2b01      	cmp	r3, #1
 8009b90:	d101      	bne.n	8009b96 <HAL_RTC_SetTime+0x1a>
 8009b92:	2302      	movs	r3, #2
 8009b94:	e0ad      	b.n	8009cf2 <HAL_RTC_SetTime+0x176>
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2220      	movs	r2, #32
 8009b9a:	2101      	movs	r1, #1
 8009b9c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	2221      	movs	r2, #33	; 0x21
 8009ba2:	2102      	movs	r1, #2
 8009ba4:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d125      	bne.n	8009bf8 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	689b      	ldr	r3, [r3, #8]
 8009bb2:	2240      	movs	r2, #64	; 0x40
 8009bb4:	4013      	ands	r3, r2
 8009bb6:	d102      	bne.n	8009bbe <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	781b      	ldrb	r3, [r3, #0]
 8009bc2:	0018      	movs	r0, r3
 8009bc4:	f000 fc81 	bl	800a4ca <RTC_ByteToBcd2>
 8009bc8:	0003      	movs	r3, r0
 8009bca:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	785b      	ldrb	r3, [r3, #1]
 8009bd0:	0018      	movs	r0, r3
 8009bd2:	f000 fc7a 	bl	800a4ca <RTC_ByteToBcd2>
 8009bd6:	0003      	movs	r3, r0
 8009bd8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009bda:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	789b      	ldrb	r3, [r3, #2]
 8009be0:	0018      	movs	r0, r3
 8009be2:	f000 fc72 	bl	800a4ca <RTC_ByteToBcd2>
 8009be6:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8009be8:	0022      	movs	r2, r4
 8009bea:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	78db      	ldrb	r3, [r3, #3]
 8009bf0:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009bf2:	4313      	orrs	r3, r2
 8009bf4:	617b      	str	r3, [r7, #20]
 8009bf6:	e017      	b.n	8009c28 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	689b      	ldr	r3, [r3, #8]
 8009bfe:	2240      	movs	r2, #64	; 0x40
 8009c00:	4013      	ands	r3, r2
 8009c02:	d102      	bne.n	8009c0a <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	2200      	movs	r2, #0
 8009c08:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	781b      	ldrb	r3, [r3, #0]
 8009c0e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	785b      	ldrb	r3, [r3, #1]
 8009c14:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009c16:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8009c18:	68ba      	ldr	r2, [r7, #8]
 8009c1a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8009c1c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	78db      	ldrb	r3, [r3, #3]
 8009c22:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009c24:	4313      	orrs	r3, r2
 8009c26:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	22ca      	movs	r2, #202	; 0xca
 8009c2e:	625a      	str	r2, [r3, #36]	; 0x24
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	2253      	movs	r2, #83	; 0x53
 8009c36:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	0018      	movs	r0, r3
 8009c3c:	f000 fc1b 	bl	800a476 <RTC_EnterInitMode>
 8009c40:	1e03      	subs	r3, r0, #0
 8009c42:	d00d      	beq.n	8009c60 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	22ff      	movs	r2, #255	; 0xff
 8009c4a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2221      	movs	r2, #33	; 0x21
 8009c50:	2104      	movs	r1, #4
 8009c52:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	2220      	movs	r2, #32
 8009c58:	2100      	movs	r1, #0
 8009c5a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	e048      	b.n	8009cf2 <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	697a      	ldr	r2, [r7, #20]
 8009c66:	4925      	ldr	r1, [pc, #148]	; (8009cfc <HAL_RTC_SetTime+0x180>)
 8009c68:	400a      	ands	r2, r1
 8009c6a:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	689a      	ldr	r2, [r3, #8]
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	4922      	ldr	r1, [pc, #136]	; (8009d00 <HAL_RTC_SetTime+0x184>)
 8009c78:	400a      	ands	r2, r1
 8009c7a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	6899      	ldr	r1, [r3, #8]
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	68da      	ldr	r2, [r3, #12]
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	691b      	ldr	r3, [r3, #16]
 8009c8a:	431a      	orrs	r2, r3
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	430a      	orrs	r2, r1
 8009c92:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	68da      	ldr	r2, [r3, #12]
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	2180      	movs	r1, #128	; 0x80
 8009ca0:	438a      	bics	r2, r1
 8009ca2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	689b      	ldr	r3, [r3, #8]
 8009caa:	2220      	movs	r2, #32
 8009cac:	4013      	ands	r3, r2
 8009cae:	d113      	bne.n	8009cd8 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	0018      	movs	r0, r3
 8009cb4:	f000 fbb8 	bl	800a428 <HAL_RTC_WaitForSynchro>
 8009cb8:	1e03      	subs	r3, r0, #0
 8009cba:	d00d      	beq.n	8009cd8 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	22ff      	movs	r2, #255	; 0xff
 8009cc2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	2221      	movs	r2, #33	; 0x21
 8009cc8:	2104      	movs	r1, #4
 8009cca:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2220      	movs	r2, #32
 8009cd0:	2100      	movs	r1, #0
 8009cd2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	e00c      	b.n	8009cf2 <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	22ff      	movs	r2, #255	; 0xff
 8009cde:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	2221      	movs	r2, #33	; 0x21
 8009ce4:	2101      	movs	r1, #1
 8009ce6:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	2220      	movs	r2, #32
 8009cec:	2100      	movs	r1, #0
 8009cee:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009cf0:	2300      	movs	r3, #0
  }
}
 8009cf2:	0018      	movs	r0, r3
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	b007      	add	sp, #28
 8009cf8:	bd90      	pop	{r4, r7, pc}
 8009cfa:	46c0      	nop			; (mov r8, r8)
 8009cfc:	007f7f7f 	.word	0x007f7f7f
 8009d00:	fffbffff 	.word	0xfffbffff

08009d04 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b086      	sub	sp, #24
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	60f8      	str	r0, [r7, #12]
 8009d0c:	60b9      	str	r1, [r7, #8]
 8009d0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	691b      	ldr	r3, [r3, #16]
 8009d20:	045b      	lsls	r3, r3, #17
 8009d22:	0c5a      	lsrs	r2, r3, #17
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	4a22      	ldr	r2, [pc, #136]	; (8009db8 <HAL_RTC_GetTime+0xb4>)
 8009d30:	4013      	ands	r3, r2
 8009d32:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	0c1b      	lsrs	r3, r3, #16
 8009d38:	b2db      	uxtb	r3, r3
 8009d3a:	223f      	movs	r2, #63	; 0x3f
 8009d3c:	4013      	ands	r3, r2
 8009d3e:	b2da      	uxtb	r2, r3
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	0a1b      	lsrs	r3, r3, #8
 8009d48:	b2db      	uxtb	r3, r3
 8009d4a:	227f      	movs	r2, #127	; 0x7f
 8009d4c:	4013      	ands	r3, r2
 8009d4e:	b2da      	uxtb	r2, r3
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	b2db      	uxtb	r3, r3
 8009d58:	227f      	movs	r2, #127	; 0x7f
 8009d5a:	4013      	ands	r3, r2
 8009d5c:	b2da      	uxtb	r2, r3
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	0c1b      	lsrs	r3, r3, #16
 8009d66:	b2db      	uxtb	r3, r3
 8009d68:	2240      	movs	r2, #64	; 0x40
 8009d6a:	4013      	ands	r3, r2
 8009d6c:	b2da      	uxtb	r2, r3
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d11a      	bne.n	8009dae <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	781b      	ldrb	r3, [r3, #0]
 8009d7c:	0018      	movs	r0, r3
 8009d7e:	f000 fbcc 	bl	800a51a <RTC_Bcd2ToByte>
 8009d82:	0003      	movs	r3, r0
 8009d84:	001a      	movs	r2, r3
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	785b      	ldrb	r3, [r3, #1]
 8009d8e:	0018      	movs	r0, r3
 8009d90:	f000 fbc3 	bl	800a51a <RTC_Bcd2ToByte>
 8009d94:	0003      	movs	r3, r0
 8009d96:	001a      	movs	r2, r3
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	789b      	ldrb	r3, [r3, #2]
 8009da0:	0018      	movs	r0, r3
 8009da2:	f000 fbba 	bl	800a51a <RTC_Bcd2ToByte>
 8009da6:	0003      	movs	r3, r0
 8009da8:	001a      	movs	r2, r3
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8009dae:	2300      	movs	r3, #0
}
 8009db0:	0018      	movs	r0, r3
 8009db2:	46bd      	mov	sp, r7
 8009db4:	b006      	add	sp, #24
 8009db6:	bd80      	pop	{r7, pc}
 8009db8:	007f7f7f 	.word	0x007f7f7f

08009dbc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009dbc:	b590      	push	{r4, r7, lr}
 8009dbe:	b087      	sub	sp, #28
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	60f8      	str	r0, [r7, #12]
 8009dc4:	60b9      	str	r1, [r7, #8]
 8009dc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	2220      	movs	r2, #32
 8009dcc:	5c9b      	ldrb	r3, [r3, r2]
 8009dce:	2b01      	cmp	r3, #1
 8009dd0:	d101      	bne.n	8009dd6 <HAL_RTC_SetDate+0x1a>
 8009dd2:	2302      	movs	r3, #2
 8009dd4:	e099      	b.n	8009f0a <HAL_RTC_SetDate+0x14e>
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	2220      	movs	r2, #32
 8009dda:	2101      	movs	r1, #1
 8009ddc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	2221      	movs	r2, #33	; 0x21
 8009de2:	2102      	movs	r1, #2
 8009de4:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d10e      	bne.n	8009e0a <HAL_RTC_SetDate+0x4e>
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	785b      	ldrb	r3, [r3, #1]
 8009df0:	001a      	movs	r2, r3
 8009df2:	2310      	movs	r3, #16
 8009df4:	4013      	ands	r3, r2
 8009df6:	d008      	beq.n	8009e0a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	785b      	ldrb	r3, [r3, #1]
 8009dfc:	2210      	movs	r2, #16
 8009dfe:	4393      	bics	r3, r2
 8009e00:	b2db      	uxtb	r3, r3
 8009e02:	330a      	adds	r3, #10
 8009e04:	b2da      	uxtb	r2, r3
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d11c      	bne.n	8009e4a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	78db      	ldrb	r3, [r3, #3]
 8009e14:	0018      	movs	r0, r3
 8009e16:	f000 fb58 	bl	800a4ca <RTC_ByteToBcd2>
 8009e1a:	0003      	movs	r3, r0
 8009e1c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	785b      	ldrb	r3, [r3, #1]
 8009e22:	0018      	movs	r0, r3
 8009e24:	f000 fb51 	bl	800a4ca <RTC_ByteToBcd2>
 8009e28:	0003      	movs	r3, r0
 8009e2a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009e2c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	789b      	ldrb	r3, [r3, #2]
 8009e32:	0018      	movs	r0, r3
 8009e34:	f000 fb49 	bl	800a4ca <RTC_ByteToBcd2>
 8009e38:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8009e3a:	0022      	movs	r2, r4
 8009e3c:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	781b      	ldrb	r3, [r3, #0]
 8009e42:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009e44:	4313      	orrs	r3, r2
 8009e46:	617b      	str	r3, [r7, #20]
 8009e48:	e00e      	b.n	8009e68 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	78db      	ldrb	r3, [r3, #3]
 8009e4e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	785b      	ldrb	r3, [r3, #1]
 8009e54:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009e56:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8009e58:	68ba      	ldr	r2, [r7, #8]
 8009e5a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8009e5c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	781b      	ldrb	r3, [r3, #0]
 8009e62:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009e64:	4313      	orrs	r3, r2
 8009e66:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	22ca      	movs	r2, #202	; 0xca
 8009e6e:	625a      	str	r2, [r3, #36]	; 0x24
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	2253      	movs	r2, #83	; 0x53
 8009e76:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	0018      	movs	r0, r3
 8009e7c:	f000 fafb 	bl	800a476 <RTC_EnterInitMode>
 8009e80:	1e03      	subs	r3, r0, #0
 8009e82:	d00d      	beq.n	8009ea0 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	22ff      	movs	r2, #255	; 0xff
 8009e8a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	2221      	movs	r2, #33	; 0x21
 8009e90:	2104      	movs	r1, #4
 8009e92:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	2220      	movs	r2, #32
 8009e98:	2100      	movs	r1, #0
 8009e9a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	e034      	b.n	8009f0a <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	697a      	ldr	r2, [r7, #20]
 8009ea6:	491b      	ldr	r1, [pc, #108]	; (8009f14 <HAL_RTC_SetDate+0x158>)
 8009ea8:	400a      	ands	r2, r1
 8009eaa:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	68da      	ldr	r2, [r3, #12]
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	2180      	movs	r1, #128	; 0x80
 8009eb8:	438a      	bics	r2, r1
 8009eba:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	689b      	ldr	r3, [r3, #8]
 8009ec2:	2220      	movs	r2, #32
 8009ec4:	4013      	ands	r3, r2
 8009ec6:	d113      	bne.n	8009ef0 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	0018      	movs	r0, r3
 8009ecc:	f000 faac 	bl	800a428 <HAL_RTC_WaitForSynchro>
 8009ed0:	1e03      	subs	r3, r0, #0
 8009ed2:	d00d      	beq.n	8009ef0 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	22ff      	movs	r2, #255	; 0xff
 8009eda:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	2221      	movs	r2, #33	; 0x21
 8009ee0:	2104      	movs	r1, #4
 8009ee2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	2220      	movs	r2, #32
 8009ee8:	2100      	movs	r1, #0
 8009eea:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8009eec:	2301      	movs	r3, #1
 8009eee:	e00c      	b.n	8009f0a <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	22ff      	movs	r2, #255	; 0xff
 8009ef6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	2221      	movs	r2, #33	; 0x21
 8009efc:	2101      	movs	r1, #1
 8009efe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	2220      	movs	r2, #32
 8009f04:	2100      	movs	r1, #0
 8009f06:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009f08:	2300      	movs	r3, #0
  }
}
 8009f0a:	0018      	movs	r0, r3
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	b007      	add	sp, #28
 8009f10:	bd90      	pop	{r4, r7, pc}
 8009f12:	46c0      	nop			; (mov r8, r8)
 8009f14:	00ffff3f 	.word	0x00ffff3f

08009f18 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b086      	sub	sp, #24
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	60f8      	str	r0, [r7, #12]
 8009f20:	60b9      	str	r1, [r7, #8]
 8009f22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	685b      	ldr	r3, [r3, #4]
 8009f2a:	4a21      	ldr	r2, [pc, #132]	; (8009fb0 <HAL_RTC_GetDate+0x98>)
 8009f2c:	4013      	ands	r3, r2
 8009f2e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8009f30:	697b      	ldr	r3, [r7, #20]
 8009f32:	0c1b      	lsrs	r3, r3, #16
 8009f34:	b2da      	uxtb	r2, r3
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	0a1b      	lsrs	r3, r3, #8
 8009f3e:	b2db      	uxtb	r3, r3
 8009f40:	221f      	movs	r2, #31
 8009f42:	4013      	ands	r3, r2
 8009f44:	b2da      	uxtb	r2, r3
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	b2db      	uxtb	r3, r3
 8009f4e:	223f      	movs	r2, #63	; 0x3f
 8009f50:	4013      	ands	r3, r2
 8009f52:	b2da      	uxtb	r2, r3
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	0b5b      	lsrs	r3, r3, #13
 8009f5c:	b2db      	uxtb	r3, r3
 8009f5e:	2207      	movs	r2, #7
 8009f60:	4013      	ands	r3, r2
 8009f62:	b2da      	uxtb	r2, r3
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d11a      	bne.n	8009fa4 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	78db      	ldrb	r3, [r3, #3]
 8009f72:	0018      	movs	r0, r3
 8009f74:	f000 fad1 	bl	800a51a <RTC_Bcd2ToByte>
 8009f78:	0003      	movs	r3, r0
 8009f7a:	001a      	movs	r2, r3
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	785b      	ldrb	r3, [r3, #1]
 8009f84:	0018      	movs	r0, r3
 8009f86:	f000 fac8 	bl	800a51a <RTC_Bcd2ToByte>
 8009f8a:	0003      	movs	r3, r0
 8009f8c:	001a      	movs	r2, r3
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	789b      	ldrb	r3, [r3, #2]
 8009f96:	0018      	movs	r0, r3
 8009f98:	f000 fabf 	bl	800a51a <RTC_Bcd2ToByte>
 8009f9c:	0003      	movs	r3, r0
 8009f9e:	001a      	movs	r2, r3
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8009fa4:	2300      	movs	r3, #0
}
 8009fa6:	0018      	movs	r0, r3
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	b006      	add	sp, #24
 8009fac:	bd80      	pop	{r7, pc}
 8009fae:	46c0      	nop			; (mov r8, r8)
 8009fb0:	00ffff3f 	.word	0x00ffff3f

08009fb4 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8009fb4:	b590      	push	{r4, r7, lr}
 8009fb6:	b089      	sub	sp, #36	; 0x24
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	60f8      	str	r0, [r7, #12]
 8009fbc:	60b9      	str	r1, [r7, #8]
 8009fbe:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	2220      	movs	r2, #32
 8009fc4:	5c9b      	ldrb	r3, [r3, r2]
 8009fc6:	2b01      	cmp	r3, #1
 8009fc8:	d101      	bne.n	8009fce <HAL_RTC_SetAlarm_IT+0x1a>
 8009fca:	2302      	movs	r3, #2
 8009fcc:	e130      	b.n	800a230 <HAL_RTC_SetAlarm_IT+0x27c>
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	2220      	movs	r2, #32
 8009fd2:	2101      	movs	r1, #1
 8009fd4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	2221      	movs	r2, #33	; 0x21
 8009fda:	2102      	movs	r1, #2
 8009fdc:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d136      	bne.n	800a052 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	689b      	ldr	r3, [r3, #8]
 8009fea:	2240      	movs	r2, #64	; 0x40
 8009fec:	4013      	ands	r3, r2
 8009fee:	d102      	bne.n	8009ff6 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	781b      	ldrb	r3, [r3, #0]
 8009ffa:	0018      	movs	r0, r3
 8009ffc:	f000 fa65 	bl	800a4ca <RTC_ByteToBcd2>
 800a000:	0003      	movs	r3, r0
 800a002:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	785b      	ldrb	r3, [r3, #1]
 800a008:	0018      	movs	r0, r3
 800a00a:	f000 fa5e 	bl	800a4ca <RTC_ByteToBcd2>
 800a00e:	0003      	movs	r3, r0
 800a010:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800a012:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	789b      	ldrb	r3, [r3, #2]
 800a018:	0018      	movs	r0, r3
 800a01a:	f000 fa56 	bl	800a4ca <RTC_ByteToBcd2>
 800a01e:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800a020:	0022      	movs	r2, r4
 800a022:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	78db      	ldrb	r3, [r3, #3]
 800a028:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800a02a:	431a      	orrs	r2, r3
 800a02c:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	2220      	movs	r2, #32
 800a032:	5c9b      	ldrb	r3, [r3, r2]
 800a034:	0018      	movs	r0, r3
 800a036:	f000 fa48 	bl	800a4ca <RTC_ByteToBcd2>
 800a03a:	0003      	movs	r3, r0
 800a03c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800a03e:	0022      	movs	r2, r4
 800a040:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800a046:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800a04c:	4313      	orrs	r3, r2
 800a04e:	61fb      	str	r3, [r7, #28]
 800a050:	e022      	b.n	800a098 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	689b      	ldr	r3, [r3, #8]
 800a058:	2240      	movs	r2, #64	; 0x40
 800a05a:	4013      	ands	r3, r2
 800a05c:	d102      	bne.n	800a064 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	2200      	movs	r2, #0
 800a062:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	781b      	ldrb	r3, [r3, #0]
 800a068:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	785b      	ldrb	r3, [r3, #1]
 800a06e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800a070:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800a072:	68ba      	ldr	r2, [r7, #8]
 800a074:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800a076:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	78db      	ldrb	r3, [r3, #3]
 800a07c:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800a07e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	2120      	movs	r1, #32
 800a084:	5c5b      	ldrb	r3, [r3, r1]
 800a086:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800a088:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800a08e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800a094:	4313      	orrs	r3, r2
 800a096:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	685a      	ldr	r2, [r3, #4]
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	699b      	ldr	r3, [r3, #24]
 800a0a0:	4313      	orrs	r3, r2
 800a0a2:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	22ca      	movs	r2, #202	; 0xca
 800a0aa:	625a      	str	r2, [r3, #36]	; 0x24
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	2253      	movs	r2, #83	; 0x53
 800a0b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a0b8:	2380      	movs	r3, #128	; 0x80
 800a0ba:	005b      	lsls	r3, r3, #1
 800a0bc:	429a      	cmp	r2, r3
 800a0be:	d14e      	bne.n	800a15e <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	689a      	ldr	r2, [r3, #8]
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	495b      	ldr	r1, [pc, #364]	; (800a238 <HAL_RTC_SetAlarm_IT+0x284>)
 800a0cc:	400a      	ands	r2, r1
 800a0ce:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	68db      	ldr	r3, [r3, #12]
 800a0d6:	22ff      	movs	r2, #255	; 0xff
 800a0d8:	401a      	ands	r2, r3
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	4957      	ldr	r1, [pc, #348]	; (800a23c <HAL_RTC_SetAlarm_IT+0x288>)
 800a0e0:	430a      	orrs	r2, r1
 800a0e2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a0e4:	f7fb f835 	bl	8005152 <HAL_GetTick>
 800a0e8:	0003      	movs	r3, r0
 800a0ea:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800a0ec:	e016      	b.n	800a11c <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a0ee:	f7fb f830 	bl	8005152 <HAL_GetTick>
 800a0f2:	0002      	movs	r2, r0
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	1ad2      	subs	r2, r2, r3
 800a0f8:	23fa      	movs	r3, #250	; 0xfa
 800a0fa:	009b      	lsls	r3, r3, #2
 800a0fc:	429a      	cmp	r2, r3
 800a0fe:	d90d      	bls.n	800a11c <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	22ff      	movs	r2, #255	; 0xff
 800a106:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2221      	movs	r2, #33	; 0x21
 800a10c:	2103      	movs	r1, #3
 800a10e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2220      	movs	r2, #32
 800a114:	2100      	movs	r1, #0
 800a116:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a118:	2303      	movs	r3, #3
 800a11a:	e089      	b.n	800a230 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	68db      	ldr	r3, [r3, #12]
 800a122:	2201      	movs	r2, #1
 800a124:	4013      	ands	r3, r2
 800a126:	d0e2      	beq.n	800a0ee <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	69fa      	ldr	r2, [r7, #28]
 800a12e:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	69ba      	ldr	r2, [r7, #24]
 800a136:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	689a      	ldr	r2, [r3, #8]
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	2180      	movs	r1, #128	; 0x80
 800a144:	0049      	lsls	r1, r1, #1
 800a146:	430a      	orrs	r2, r1
 800a148:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	689a      	ldr	r2, [r3, #8]
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	2180      	movs	r1, #128	; 0x80
 800a156:	0149      	lsls	r1, r1, #5
 800a158:	430a      	orrs	r2, r1
 800a15a:	609a      	str	r2, [r3, #8]
 800a15c:	e04d      	b.n	800a1fa <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	689a      	ldr	r2, [r3, #8]
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	4935      	ldr	r1, [pc, #212]	; (800a240 <HAL_RTC_SetAlarm_IT+0x28c>)
 800a16a:	400a      	ands	r2, r1
 800a16c:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	68db      	ldr	r3, [r3, #12]
 800a174:	22ff      	movs	r2, #255	; 0xff
 800a176:	401a      	ands	r2, r3
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	4931      	ldr	r1, [pc, #196]	; (800a244 <HAL_RTC_SetAlarm_IT+0x290>)
 800a17e:	430a      	orrs	r2, r1
 800a180:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a182:	f7fa ffe6 	bl	8005152 <HAL_GetTick>
 800a186:	0003      	movs	r3, r0
 800a188:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800a18a:	e016      	b.n	800a1ba <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a18c:	f7fa ffe1 	bl	8005152 <HAL_GetTick>
 800a190:	0002      	movs	r2, r0
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	1ad2      	subs	r2, r2, r3
 800a196:	23fa      	movs	r3, #250	; 0xfa
 800a198:	009b      	lsls	r3, r3, #2
 800a19a:	429a      	cmp	r2, r3
 800a19c:	d90d      	bls.n	800a1ba <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	22ff      	movs	r2, #255	; 0xff
 800a1a4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	2221      	movs	r2, #33	; 0x21
 800a1aa:	2103      	movs	r1, #3
 800a1ac:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	2220      	movs	r2, #32
 800a1b2:	2100      	movs	r1, #0
 800a1b4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a1b6:	2303      	movs	r3, #3
 800a1b8:	e03a      	b.n	800a230 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	68db      	ldr	r3, [r3, #12]
 800a1c0:	2202      	movs	r2, #2
 800a1c2:	4013      	ands	r3, r2
 800a1c4:	d0e2      	beq.n	800a18c <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	69fa      	ldr	r2, [r7, #28]
 800a1cc:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	69ba      	ldr	r2, [r7, #24]
 800a1d4:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	689a      	ldr	r2, [r3, #8]
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	2180      	movs	r1, #128	; 0x80
 800a1e2:	0089      	lsls	r1, r1, #2
 800a1e4:	430a      	orrs	r2, r1
 800a1e6:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	689a      	ldr	r2, [r3, #8]
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	2180      	movs	r1, #128	; 0x80
 800a1f4:	0189      	lsls	r1, r1, #6
 800a1f6:	430a      	orrs	r2, r1
 800a1f8:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800a1fa:	4b13      	ldr	r3, [pc, #76]	; (800a248 <HAL_RTC_SetAlarm_IT+0x294>)
 800a1fc:	681a      	ldr	r2, [r3, #0]
 800a1fe:	4b12      	ldr	r3, [pc, #72]	; (800a248 <HAL_RTC_SetAlarm_IT+0x294>)
 800a200:	2180      	movs	r1, #128	; 0x80
 800a202:	0289      	lsls	r1, r1, #10
 800a204:	430a      	orrs	r2, r1
 800a206:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800a208:	4b0f      	ldr	r3, [pc, #60]	; (800a248 <HAL_RTC_SetAlarm_IT+0x294>)
 800a20a:	689a      	ldr	r2, [r3, #8]
 800a20c:	4b0e      	ldr	r3, [pc, #56]	; (800a248 <HAL_RTC_SetAlarm_IT+0x294>)
 800a20e:	2180      	movs	r1, #128	; 0x80
 800a210:	0289      	lsls	r1, r1, #10
 800a212:	430a      	orrs	r2, r1
 800a214:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	22ff      	movs	r2, #255	; 0xff
 800a21c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	2221      	movs	r2, #33	; 0x21
 800a222:	2101      	movs	r1, #1
 800a224:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	2220      	movs	r2, #32
 800a22a:	2100      	movs	r1, #0
 800a22c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a22e:	2300      	movs	r3, #0
}
 800a230:	0018      	movs	r0, r3
 800a232:	46bd      	mov	sp, r7
 800a234:	b009      	add	sp, #36	; 0x24
 800a236:	bd90      	pop	{r4, r7, pc}
 800a238:	fffffeff 	.word	0xfffffeff
 800a23c:	fffffe7f 	.word	0xfffffe7f
 800a240:	fffffdff 	.word	0xfffffdff
 800a244:	fffffd7f 	.word	0xfffffd7f
 800a248:	40010400 	.word	0x40010400

0800a24c <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b084      	sub	sp, #16
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2220      	movs	r2, #32
 800a25a:	5c9b      	ldrb	r3, [r3, r2]
 800a25c:	2b01      	cmp	r3, #1
 800a25e:	d101      	bne.n	800a264 <HAL_RTC_DeactivateAlarm+0x18>
 800a260:	2302      	movs	r3, #2
 800a262:	e086      	b.n	800a372 <HAL_RTC_DeactivateAlarm+0x126>
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2220      	movs	r2, #32
 800a268:	2101      	movs	r1, #1
 800a26a:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2221      	movs	r2, #33	; 0x21
 800a270:	2102      	movs	r1, #2
 800a272:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	22ca      	movs	r2, #202	; 0xca
 800a27a:	625a      	str	r2, [r3, #36]	; 0x24
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	2253      	movs	r2, #83	; 0x53
 800a282:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 800a284:	683a      	ldr	r2, [r7, #0]
 800a286:	2380      	movs	r3, #128	; 0x80
 800a288:	005b      	lsls	r3, r3, #1
 800a28a:	429a      	cmp	r2, r3
 800a28c:	d132      	bne.n	800a2f4 <HAL_RTC_DeactivateAlarm+0xa8>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	689a      	ldr	r2, [r3, #8]
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	4938      	ldr	r1, [pc, #224]	; (800a37c <HAL_RTC_DeactivateAlarm+0x130>)
 800a29a:	400a      	ands	r2, r1
 800a29c:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	689a      	ldr	r2, [r3, #8]
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	4935      	ldr	r1, [pc, #212]	; (800a380 <HAL_RTC_DeactivateAlarm+0x134>)
 800a2aa:	400a      	ands	r2, r1
 800a2ac:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 800a2ae:	f7fa ff50 	bl	8005152 <HAL_GetTick>
 800a2b2:	0003      	movs	r3, r0
 800a2b4:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800a2b6:	e016      	b.n	800a2e6 <HAL_RTC_DeactivateAlarm+0x9a>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a2b8:	f7fa ff4b 	bl	8005152 <HAL_GetTick>
 800a2bc:	0002      	movs	r2, r0
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	1ad2      	subs	r2, r2, r3
 800a2c2:	23fa      	movs	r3, #250	; 0xfa
 800a2c4:	009b      	lsls	r3, r3, #2
 800a2c6:	429a      	cmp	r2, r3
 800a2c8:	d90d      	bls.n	800a2e6 <HAL_RTC_DeactivateAlarm+0x9a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	22ff      	movs	r2, #255	; 0xff
 800a2d0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2221      	movs	r2, #33	; 0x21
 800a2d6:	2103      	movs	r1, #3
 800a2d8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2220      	movs	r2, #32
 800a2de:	2100      	movs	r1, #0
 800a2e0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a2e2:	2303      	movs	r3, #3
 800a2e4:	e045      	b.n	800a372 <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	68db      	ldr	r3, [r3, #12]
 800a2ec:	2201      	movs	r2, #1
 800a2ee:	4013      	ands	r3, r2
 800a2f0:	d0e2      	beq.n	800a2b8 <HAL_RTC_DeactivateAlarm+0x6c>
 800a2f2:	e031      	b.n	800a358 <HAL_RTC_DeactivateAlarm+0x10c>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	689a      	ldr	r2, [r3, #8]
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	4921      	ldr	r1, [pc, #132]	; (800a384 <HAL_RTC_DeactivateAlarm+0x138>)
 800a300:	400a      	ands	r2, r1
 800a302:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	689a      	ldr	r2, [r3, #8]
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	491e      	ldr	r1, [pc, #120]	; (800a388 <HAL_RTC_DeactivateAlarm+0x13c>)
 800a310:	400a      	ands	r2, r1
 800a312:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 800a314:	f7fa ff1d 	bl	8005152 <HAL_GetTick>
 800a318:	0003      	movs	r3, r0
 800a31a:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800a31c:	e016      	b.n	800a34c <HAL_RTC_DeactivateAlarm+0x100>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a31e:	f7fa ff18 	bl	8005152 <HAL_GetTick>
 800a322:	0002      	movs	r2, r0
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	1ad2      	subs	r2, r2, r3
 800a328:	23fa      	movs	r3, #250	; 0xfa
 800a32a:	009b      	lsls	r3, r3, #2
 800a32c:	429a      	cmp	r2, r3
 800a32e:	d90d      	bls.n	800a34c <HAL_RTC_DeactivateAlarm+0x100>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	22ff      	movs	r2, #255	; 0xff
 800a336:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2221      	movs	r2, #33	; 0x21
 800a33c:	2103      	movs	r1, #3
 800a33e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2220      	movs	r2, #32
 800a344:	2100      	movs	r1, #0
 800a346:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a348:	2303      	movs	r3, #3
 800a34a:	e012      	b.n	800a372 <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	68db      	ldr	r3, [r3, #12]
 800a352:	2202      	movs	r2, #2
 800a354:	4013      	ands	r3, r2
 800a356:	d0e2      	beq.n	800a31e <HAL_RTC_DeactivateAlarm+0xd2>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	22ff      	movs	r2, #255	; 0xff
 800a35e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2221      	movs	r2, #33	; 0x21
 800a364:	2101      	movs	r1, #1
 800a366:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2220      	movs	r2, #32
 800a36c:	2100      	movs	r1, #0
 800a36e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a370:	2300      	movs	r3, #0
}
 800a372:	0018      	movs	r0, r3
 800a374:	46bd      	mov	sp, r7
 800a376:	b004      	add	sp, #16
 800a378:	bd80      	pop	{r7, pc}
 800a37a:	46c0      	nop			; (mov r8, r8)
 800a37c:	fffffeff 	.word	0xfffffeff
 800a380:	ffffefff 	.word	0xffffefff
 800a384:	fffffdff 	.word	0xfffffdff
 800a388:	ffffdfff 	.word	0xffffdfff

0800a38c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b082      	sub	sp, #8
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	689a      	ldr	r2, [r3, #8]
 800a39a:	2380      	movs	r3, #128	; 0x80
 800a39c:	015b      	lsls	r3, r3, #5
 800a39e:	4013      	ands	r3, r2
 800a3a0:	d014      	beq.n	800a3cc <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	68da      	ldr	r2, [r3, #12]
 800a3a8:	2380      	movs	r3, #128	; 0x80
 800a3aa:	005b      	lsls	r3, r3, #1
 800a3ac:	4013      	ands	r3, r2
 800a3ae:	d00d      	beq.n	800a3cc <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	0018      	movs	r0, r3
 800a3b4:	f7f9 febd 	bl	8004132 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	68db      	ldr	r3, [r3, #12]
 800a3be:	22ff      	movs	r2, #255	; 0xff
 800a3c0:	401a      	ands	r2, r3
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	4915      	ldr	r1, [pc, #84]	; (800a41c <HAL_RTC_AlarmIRQHandler+0x90>)
 800a3c8:	430a      	orrs	r2, r1
 800a3ca:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	689a      	ldr	r2, [r3, #8]
 800a3d2:	2380      	movs	r3, #128	; 0x80
 800a3d4:	019b      	lsls	r3, r3, #6
 800a3d6:	4013      	ands	r3, r2
 800a3d8:	d014      	beq.n	800a404 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	68da      	ldr	r2, [r3, #12]
 800a3e0:	2380      	movs	r3, #128	; 0x80
 800a3e2:	009b      	lsls	r3, r3, #2
 800a3e4:	4013      	ands	r3, r2
 800a3e6:	d00d      	beq.n	800a404 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	0018      	movs	r0, r3
 800a3ec:	f000 f910 	bl	800a610 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	68db      	ldr	r3, [r3, #12]
 800a3f6:	22ff      	movs	r2, #255	; 0xff
 800a3f8:	401a      	ands	r2, r3
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	4908      	ldr	r1, [pc, #32]	; (800a420 <HAL_RTC_AlarmIRQHandler+0x94>)
 800a400:	430a      	orrs	r2, r1
 800a402:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800a404:	4b07      	ldr	r3, [pc, #28]	; (800a424 <HAL_RTC_AlarmIRQHandler+0x98>)
 800a406:	2280      	movs	r2, #128	; 0x80
 800a408:	0292      	lsls	r2, r2, #10
 800a40a:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2221      	movs	r2, #33	; 0x21
 800a410:	2101      	movs	r1, #1
 800a412:	5499      	strb	r1, [r3, r2]
}
 800a414:	46c0      	nop			; (mov r8, r8)
 800a416:	46bd      	mov	sp, r7
 800a418:	b002      	add	sp, #8
 800a41a:	bd80      	pop	{r7, pc}
 800a41c:	fffffe7f 	.word	0xfffffe7f
 800a420:	fffffd7f 	.word	0xfffffd7f
 800a424:	40010400 	.word	0x40010400

0800a428 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b084      	sub	sp, #16
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	68da      	ldr	r2, [r3, #12]
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	21a0      	movs	r1, #160	; 0xa0
 800a43c:	438a      	bics	r2, r1
 800a43e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800a440:	f7fa fe87 	bl	8005152 <HAL_GetTick>
 800a444:	0003      	movs	r3, r0
 800a446:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a448:	e00a      	b.n	800a460 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a44a:	f7fa fe82 	bl	8005152 <HAL_GetTick>
 800a44e:	0002      	movs	r2, r0
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	1ad2      	subs	r2, r2, r3
 800a454:	23fa      	movs	r3, #250	; 0xfa
 800a456:	009b      	lsls	r3, r3, #2
 800a458:	429a      	cmp	r2, r3
 800a45a:	d901      	bls.n	800a460 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800a45c:	2303      	movs	r3, #3
 800a45e:	e006      	b.n	800a46e <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	68db      	ldr	r3, [r3, #12]
 800a466:	2220      	movs	r2, #32
 800a468:	4013      	ands	r3, r2
 800a46a:	d0ee      	beq.n	800a44a <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 800a46c:	2300      	movs	r3, #0
}
 800a46e:	0018      	movs	r0, r3
 800a470:	46bd      	mov	sp, r7
 800a472:	b004      	add	sp, #16
 800a474:	bd80      	pop	{r7, pc}

0800a476 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a476:	b580      	push	{r7, lr}
 800a478:	b084      	sub	sp, #16
 800a47a:	af00      	add	r7, sp, #0
 800a47c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	68db      	ldr	r3, [r3, #12]
 800a484:	2240      	movs	r2, #64	; 0x40
 800a486:	4013      	ands	r3, r2
 800a488:	d11a      	bne.n	800a4c0 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	2201      	movs	r2, #1
 800a490:	4252      	negs	r2, r2
 800a492:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a494:	f7fa fe5d 	bl	8005152 <HAL_GetTick>
 800a498:	0003      	movs	r3, r0
 800a49a:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a49c:	e00a      	b.n	800a4b4 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a49e:	f7fa fe58 	bl	8005152 <HAL_GetTick>
 800a4a2:	0002      	movs	r2, r0
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	1ad2      	subs	r2, r2, r3
 800a4a8:	23fa      	movs	r3, #250	; 0xfa
 800a4aa:	009b      	lsls	r3, r3, #2
 800a4ac:	429a      	cmp	r2, r3
 800a4ae:	d901      	bls.n	800a4b4 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 800a4b0:	2303      	movs	r3, #3
 800a4b2:	e006      	b.n	800a4c2 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	68db      	ldr	r3, [r3, #12]
 800a4ba:	2240      	movs	r2, #64	; 0x40
 800a4bc:	4013      	ands	r3, r2
 800a4be:	d0ee      	beq.n	800a49e <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800a4c0:	2300      	movs	r3, #0
}
 800a4c2:	0018      	movs	r0, r3
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	b004      	add	sp, #16
 800a4c8:	bd80      	pop	{r7, pc}

0800a4ca <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a4ca:	b580      	push	{r7, lr}
 800a4cc:	b084      	sub	sp, #16
 800a4ce:	af00      	add	r7, sp, #0
 800a4d0:	0002      	movs	r2, r0
 800a4d2:	1dfb      	adds	r3, r7, #7
 800a4d4:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800a4da:	230b      	movs	r3, #11
 800a4dc:	18fb      	adds	r3, r7, r3
 800a4de:	1dfa      	adds	r2, r7, #7
 800a4e0:	7812      	ldrb	r2, [r2, #0]
 800a4e2:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 800a4e4:	e008      	b.n	800a4f8 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	3301      	adds	r3, #1
 800a4ea:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800a4ec:	220b      	movs	r2, #11
 800a4ee:	18bb      	adds	r3, r7, r2
 800a4f0:	18ba      	adds	r2, r7, r2
 800a4f2:	7812      	ldrb	r2, [r2, #0]
 800a4f4:	3a0a      	subs	r2, #10
 800a4f6:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 800a4f8:	210b      	movs	r1, #11
 800a4fa:	187b      	adds	r3, r7, r1
 800a4fc:	781b      	ldrb	r3, [r3, #0]
 800a4fe:	2b09      	cmp	r3, #9
 800a500:	d8f1      	bhi.n	800a4e6 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	b2db      	uxtb	r3, r3
 800a506:	011b      	lsls	r3, r3, #4
 800a508:	b2da      	uxtb	r2, r3
 800a50a:	187b      	adds	r3, r7, r1
 800a50c:	781b      	ldrb	r3, [r3, #0]
 800a50e:	4313      	orrs	r3, r2
 800a510:	b2db      	uxtb	r3, r3
}
 800a512:	0018      	movs	r0, r3
 800a514:	46bd      	mov	sp, r7
 800a516:	b004      	add	sp, #16
 800a518:	bd80      	pop	{r7, pc}

0800a51a <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800a51a:	b580      	push	{r7, lr}
 800a51c:	b084      	sub	sp, #16
 800a51e:	af00      	add	r7, sp, #0
 800a520:	0002      	movs	r2, r0
 800a522:	1dfb      	adds	r3, r7, #7
 800a524:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800a526:	1dfb      	adds	r3, r7, #7
 800a528:	781b      	ldrb	r3, [r3, #0]
 800a52a:	091b      	lsrs	r3, r3, #4
 800a52c:	b2db      	uxtb	r3, r3
 800a52e:	001a      	movs	r2, r3
 800a530:	0013      	movs	r3, r2
 800a532:	009b      	lsls	r3, r3, #2
 800a534:	189b      	adds	r3, r3, r2
 800a536:	005b      	lsls	r3, r3, #1
 800a538:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	b2da      	uxtb	r2, r3
 800a53e:	1dfb      	adds	r3, r7, #7
 800a540:	781b      	ldrb	r3, [r3, #0]
 800a542:	210f      	movs	r1, #15
 800a544:	400b      	ands	r3, r1
 800a546:	b2db      	uxtb	r3, r3
 800a548:	18d3      	adds	r3, r2, r3
 800a54a:	b2db      	uxtb	r3, r3
}
 800a54c:	0018      	movs	r0, r3
 800a54e:	46bd      	mov	sp, r7
 800a550:	b004      	add	sp, #16
 800a552:	bd80      	pop	{r7, pc}

0800a554 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b086      	sub	sp, #24
 800a558:	af00      	add	r7, sp, #0
 800a55a:	60f8      	str	r0, [r7, #12]
 800a55c:	60b9      	str	r1, [r7, #8]
 800a55e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	3350      	adds	r3, #80	; 0x50
 800a566:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	009b      	lsls	r3, r3, #2
 800a56c:	697a      	ldr	r2, [r7, #20]
 800a56e:	18d3      	adds	r3, r2, r3
 800a570:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	687a      	ldr	r2, [r7, #4]
 800a576:	601a      	str	r2, [r3, #0]
}
 800a578:	46c0      	nop			; (mov r8, r8)
 800a57a:	46bd      	mov	sp, r7
 800a57c:	b006      	add	sp, #24
 800a57e:	bd80      	pop	{r7, pc}

0800a580 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b084      	sub	sp, #16
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
 800a588:	6039      	str	r1, [r7, #0]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	3350      	adds	r3, #80	; 0x50
 800a590:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	009b      	lsls	r3, r3, #2
 800a596:	68fa      	ldr	r2, [r7, #12]
 800a598:	18d3      	adds	r3, r2, r3
 800a59a:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	681b      	ldr	r3, [r3, #0]
}
 800a5a0:	0018      	movs	r0, r3
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	b004      	add	sp, #16
 800a5a6:	bd80      	pop	{r7, pc}

0800a5a8 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b082      	sub	sp, #8
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2220      	movs	r2, #32
 800a5b4:	5c9b      	ldrb	r3, [r3, r2]
 800a5b6:	2b01      	cmp	r3, #1
 800a5b8:	d101      	bne.n	800a5be <HAL_RTCEx_EnableBypassShadow+0x16>
 800a5ba:	2302      	movs	r3, #2
 800a5bc:	e024      	b.n	800a608 <HAL_RTCEx_EnableBypassShadow+0x60>
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2220      	movs	r2, #32
 800a5c2:	2101      	movs	r1, #1
 800a5c4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2221      	movs	r2, #33	; 0x21
 800a5ca:	2102      	movs	r1, #2
 800a5cc:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	22ca      	movs	r2, #202	; 0xca
 800a5d4:	625a      	str	r2, [r3, #36]	; 0x24
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	2253      	movs	r2, #83	; 0x53
 800a5dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	689a      	ldr	r2, [r3, #8]
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	2120      	movs	r1, #32
 800a5ea:	430a      	orrs	r2, r1
 800a5ec:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	22ff      	movs	r2, #255	; 0xff
 800a5f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2221      	movs	r2, #33	; 0x21
 800a5fa:	2101      	movs	r1, #1
 800a5fc:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2220      	movs	r2, #32
 800a602:	2100      	movs	r1, #0
 800a604:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a606:	2300      	movs	r3, #0
}
 800a608:	0018      	movs	r0, r3
 800a60a:	46bd      	mov	sp, r7
 800a60c:	b002      	add	sp, #8
 800a60e:	bd80      	pop	{r7, pc}

0800a610 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b082      	sub	sp, #8
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800a618:	46c0      	nop			; (mov r8, r8)
 800a61a:	46bd      	mov	sp, r7
 800a61c:	b002      	add	sp, #8
 800a61e:	bd80      	pop	{r7, pc}

0800a620 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b082      	sub	sp, #8
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d101      	bne.n	800a632 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a62e:	2301      	movs	r3, #1
 800a630:	e083      	b.n	800a73a <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a636:	2b00      	cmp	r3, #0
 800a638:	d109      	bne.n	800a64e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	685a      	ldr	r2, [r3, #4]
 800a63e:	2382      	movs	r3, #130	; 0x82
 800a640:	005b      	lsls	r3, r3, #1
 800a642:	429a      	cmp	r2, r3
 800a644:	d009      	beq.n	800a65a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2200      	movs	r2, #0
 800a64a:	61da      	str	r2, [r3, #28]
 800a64c:	e005      	b.n	800a65a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2200      	movs	r2, #0
 800a652:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2200      	movs	r2, #0
 800a658:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2200      	movs	r2, #0
 800a65e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2251      	movs	r2, #81	; 0x51
 800a664:	5c9b      	ldrb	r3, [r3, r2]
 800a666:	b2db      	uxtb	r3, r3
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d107      	bne.n	800a67c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2250      	movs	r2, #80	; 0x50
 800a670:	2100      	movs	r1, #0
 800a672:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	0018      	movs	r0, r3
 800a678:	f000 f866 	bl	800a748 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2251      	movs	r2, #81	; 0x51
 800a680:	2102      	movs	r1, #2
 800a682:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	681a      	ldr	r2, [r3, #0]
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	2140      	movs	r1, #64	; 0x40
 800a690:	438a      	bics	r2, r1
 800a692:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	685a      	ldr	r2, [r3, #4]
 800a698:	2382      	movs	r3, #130	; 0x82
 800a69a:	005b      	lsls	r3, r3, #1
 800a69c:	401a      	ands	r2, r3
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6899      	ldr	r1, [r3, #8]
 800a6a2:	2384      	movs	r3, #132	; 0x84
 800a6a4:	021b      	lsls	r3, r3, #8
 800a6a6:	400b      	ands	r3, r1
 800a6a8:	431a      	orrs	r2, r3
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	68d9      	ldr	r1, [r3, #12]
 800a6ae:	2380      	movs	r3, #128	; 0x80
 800a6b0:	011b      	lsls	r3, r3, #4
 800a6b2:	400b      	ands	r3, r1
 800a6b4:	431a      	orrs	r2, r3
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	691b      	ldr	r3, [r3, #16]
 800a6ba:	2102      	movs	r1, #2
 800a6bc:	400b      	ands	r3, r1
 800a6be:	431a      	orrs	r2, r3
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	695b      	ldr	r3, [r3, #20]
 800a6c4:	2101      	movs	r1, #1
 800a6c6:	400b      	ands	r3, r1
 800a6c8:	431a      	orrs	r2, r3
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6999      	ldr	r1, [r3, #24]
 800a6ce:	2380      	movs	r3, #128	; 0x80
 800a6d0:	009b      	lsls	r3, r3, #2
 800a6d2:	400b      	ands	r3, r1
 800a6d4:	431a      	orrs	r2, r3
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	69db      	ldr	r3, [r3, #28]
 800a6da:	2138      	movs	r1, #56	; 0x38
 800a6dc:	400b      	ands	r3, r1
 800a6de:	431a      	orrs	r2, r3
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6a1b      	ldr	r3, [r3, #32]
 800a6e4:	2180      	movs	r1, #128	; 0x80
 800a6e6:	400b      	ands	r3, r1
 800a6e8:	431a      	orrs	r2, r3
 800a6ea:	0011      	movs	r1, r2
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a6f0:	2380      	movs	r3, #128	; 0x80
 800a6f2:	019b      	lsls	r3, r3, #6
 800a6f4:	401a      	ands	r2, r3
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	430a      	orrs	r2, r1
 800a6fc:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	699b      	ldr	r3, [r3, #24]
 800a702:	0c1b      	lsrs	r3, r3, #16
 800a704:	2204      	movs	r2, #4
 800a706:	4013      	ands	r3, r2
 800a708:	0019      	movs	r1, r3
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a70e:	2210      	movs	r2, #16
 800a710:	401a      	ands	r2, r3
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	430a      	orrs	r2, r1
 800a718:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	69da      	ldr	r2, [r3, #28]
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	4907      	ldr	r1, [pc, #28]	; (800a744 <HAL_SPI_Init+0x124>)
 800a726:	400a      	ands	r2, r1
 800a728:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2200      	movs	r2, #0
 800a72e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2251      	movs	r2, #81	; 0x51
 800a734:	2101      	movs	r1, #1
 800a736:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a738:	2300      	movs	r3, #0
}
 800a73a:	0018      	movs	r0, r3
 800a73c:	46bd      	mov	sp, r7
 800a73e:	b002      	add	sp, #8
 800a740:	bd80      	pop	{r7, pc}
 800a742:	46c0      	nop			; (mov r8, r8)
 800a744:	fffff7ff 	.word	0xfffff7ff

0800a748 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b082      	sub	sp, #8
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800a750:	46c0      	nop			; (mov r8, r8)
 800a752:	46bd      	mov	sp, r7
 800a754:	b002      	add	sp, #8
 800a756:	bd80      	pop	{r7, pc}

0800a758 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b08c      	sub	sp, #48	; 0x30
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	60f8      	str	r0, [r7, #12]
 800a760:	60b9      	str	r1, [r7, #8]
 800a762:	607a      	str	r2, [r7, #4]
 800a764:	001a      	movs	r2, r3
 800a766:	1cbb      	adds	r3, r7, #2
 800a768:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a76a:	2301      	movs	r3, #1
 800a76c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a76e:	232b      	movs	r3, #43	; 0x2b
 800a770:	18fb      	adds	r3, r7, r3
 800a772:	2200      	movs	r2, #0
 800a774:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	2250      	movs	r2, #80	; 0x50
 800a77a:	5c9b      	ldrb	r3, [r3, r2]
 800a77c:	2b01      	cmp	r3, #1
 800a77e:	d101      	bne.n	800a784 <HAL_SPI_TransmitReceive+0x2c>
 800a780:	2302      	movs	r3, #2
 800a782:	e1a0      	b.n	800aac6 <HAL_SPI_TransmitReceive+0x36e>
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	2250      	movs	r2, #80	; 0x50
 800a788:	2101      	movs	r1, #1
 800a78a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a78c:	f7fa fce1 	bl	8005152 <HAL_GetTick>
 800a790:	0003      	movs	r3, r0
 800a792:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a794:	2023      	movs	r0, #35	; 0x23
 800a796:	183b      	adds	r3, r7, r0
 800a798:	68fa      	ldr	r2, [r7, #12]
 800a79a:	2151      	movs	r1, #81	; 0x51
 800a79c:	5c52      	ldrb	r2, [r2, r1]
 800a79e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	685b      	ldr	r3, [r3, #4]
 800a7a4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a7a6:	231a      	movs	r3, #26
 800a7a8:	18fb      	adds	r3, r7, r3
 800a7aa:	1cba      	adds	r2, r7, #2
 800a7ac:	8812      	ldrh	r2, [r2, #0]
 800a7ae:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a7b0:	183b      	adds	r3, r7, r0
 800a7b2:	781b      	ldrb	r3, [r3, #0]
 800a7b4:	2b01      	cmp	r3, #1
 800a7b6:	d011      	beq.n	800a7dc <HAL_SPI_TransmitReceive+0x84>
 800a7b8:	69fa      	ldr	r2, [r7, #28]
 800a7ba:	2382      	movs	r3, #130	; 0x82
 800a7bc:	005b      	lsls	r3, r3, #1
 800a7be:	429a      	cmp	r2, r3
 800a7c0:	d107      	bne.n	800a7d2 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	689b      	ldr	r3, [r3, #8]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d103      	bne.n	800a7d2 <HAL_SPI_TransmitReceive+0x7a>
 800a7ca:	183b      	adds	r3, r7, r0
 800a7cc:	781b      	ldrb	r3, [r3, #0]
 800a7ce:	2b04      	cmp	r3, #4
 800a7d0:	d004      	beq.n	800a7dc <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800a7d2:	232b      	movs	r3, #43	; 0x2b
 800a7d4:	18fb      	adds	r3, r7, r3
 800a7d6:	2202      	movs	r2, #2
 800a7d8:	701a      	strb	r2, [r3, #0]
    goto error;
 800a7da:	e169      	b.n	800aab0 <HAL_SPI_TransmitReceive+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d006      	beq.n	800a7f0 <HAL_SPI_TransmitReceive+0x98>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d003      	beq.n	800a7f0 <HAL_SPI_TransmitReceive+0x98>
 800a7e8:	1cbb      	adds	r3, r7, #2
 800a7ea:	881b      	ldrh	r3, [r3, #0]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d104      	bne.n	800a7fa <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800a7f0:	232b      	movs	r3, #43	; 0x2b
 800a7f2:	18fb      	adds	r3, r7, r3
 800a7f4:	2201      	movs	r2, #1
 800a7f6:	701a      	strb	r2, [r3, #0]
    goto error;
 800a7f8:	e15a      	b.n	800aab0 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	2251      	movs	r2, #81	; 0x51
 800a7fe:	5c9b      	ldrb	r3, [r3, r2]
 800a800:	b2db      	uxtb	r3, r3
 800a802:	2b04      	cmp	r3, #4
 800a804:	d003      	beq.n	800a80e <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	2251      	movs	r2, #81	; 0x51
 800a80a:	2105      	movs	r1, #5
 800a80c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	2200      	movs	r2, #0
 800a812:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	687a      	ldr	r2, [r7, #4]
 800a818:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	1cba      	adds	r2, r7, #2
 800a81e:	8812      	ldrh	r2, [r2, #0]
 800a820:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	1cba      	adds	r2, r7, #2
 800a826:	8812      	ldrh	r2, [r2, #0]
 800a828:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	68ba      	ldr	r2, [r7, #8]
 800a82e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	1cba      	adds	r2, r7, #2
 800a834:	8812      	ldrh	r2, [r2, #0]
 800a836:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	1cba      	adds	r2, r7, #2
 800a83c:	8812      	ldrh	r2, [r2, #0]
 800a83e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	2200      	movs	r2, #0
 800a844:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	2200      	movs	r2, #0
 800a84a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	2240      	movs	r2, #64	; 0x40
 800a854:	4013      	ands	r3, r2
 800a856:	2b40      	cmp	r3, #64	; 0x40
 800a858:	d007      	beq.n	800a86a <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	681a      	ldr	r2, [r3, #0]
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	2140      	movs	r1, #64	; 0x40
 800a866:	430a      	orrs	r2, r1
 800a868:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	68da      	ldr	r2, [r3, #12]
 800a86e:	2380      	movs	r3, #128	; 0x80
 800a870:	011b      	lsls	r3, r3, #4
 800a872:	429a      	cmp	r2, r3
 800a874:	d000      	beq.n	800a878 <HAL_SPI_TransmitReceive+0x120>
 800a876:	e07a      	b.n	800a96e <HAL_SPI_TransmitReceive+0x216>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	685b      	ldr	r3, [r3, #4]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d004      	beq.n	800a88a <HAL_SPI_TransmitReceive+0x132>
 800a880:	231a      	movs	r3, #26
 800a882:	18fb      	adds	r3, r7, r3
 800a884:	881b      	ldrh	r3, [r3, #0]
 800a886:	2b01      	cmp	r3, #1
 800a888:	d166      	bne.n	800a958 <HAL_SPI_TransmitReceive+0x200>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a88e:	881a      	ldrh	r2, [r3, #0]
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a89a:	1c9a      	adds	r2, r3, #2
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a8a4:	b29b      	uxth	r3, r3
 800a8a6:	3b01      	subs	r3, #1
 800a8a8:	b29a      	uxth	r2, r3
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a8ae:	e053      	b.n	800a958 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	689b      	ldr	r3, [r3, #8]
 800a8b6:	2202      	movs	r2, #2
 800a8b8:	4013      	ands	r3, r2
 800a8ba:	2b02      	cmp	r3, #2
 800a8bc:	d11b      	bne.n	800a8f6 <HAL_SPI_TransmitReceive+0x19e>
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a8c2:	b29b      	uxth	r3, r3
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d016      	beq.n	800a8f6 <HAL_SPI_TransmitReceive+0x19e>
 800a8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ca:	2b01      	cmp	r3, #1
 800a8cc:	d113      	bne.n	800a8f6 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8d2:	881a      	ldrh	r2, [r3, #0]
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8de:	1c9a      	adds	r2, r3, #2
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a8e8:	b29b      	uxth	r3, r3
 800a8ea:	3b01      	subs	r3, #1
 800a8ec:	b29a      	uxth	r2, r3
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	689b      	ldr	r3, [r3, #8]
 800a8fc:	2201      	movs	r2, #1
 800a8fe:	4013      	ands	r3, r2
 800a900:	2b01      	cmp	r3, #1
 800a902:	d119      	bne.n	800a938 <HAL_SPI_TransmitReceive+0x1e0>
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a908:	b29b      	uxth	r3, r3
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d014      	beq.n	800a938 <HAL_SPI_TransmitReceive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	68da      	ldr	r2, [r3, #12]
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a918:	b292      	uxth	r2, r2
 800a91a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a920:	1c9a      	adds	r2, r3, #2
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a92a:	b29b      	uxth	r3, r3
 800a92c:	3b01      	subs	r3, #1
 800a92e:	b29a      	uxth	r2, r3
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a934:	2301      	movs	r3, #1
 800a936:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a938:	f7fa fc0b 	bl	8005152 <HAL_GetTick>
 800a93c:	0002      	movs	r2, r0
 800a93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a940:	1ad3      	subs	r3, r2, r3
 800a942:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a944:	429a      	cmp	r2, r3
 800a946:	d807      	bhi.n	800a958 <HAL_SPI_TransmitReceive+0x200>
 800a948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a94a:	3301      	adds	r3, #1
 800a94c:	d004      	beq.n	800a958 <HAL_SPI_TransmitReceive+0x200>
      {
        errorcode = HAL_TIMEOUT;
 800a94e:	232b      	movs	r3, #43	; 0x2b
 800a950:	18fb      	adds	r3, r7, r3
 800a952:	2203      	movs	r2, #3
 800a954:	701a      	strb	r2, [r3, #0]
        goto error;
 800a956:	e0ab      	b.n	800aab0 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a95c:	b29b      	uxth	r3, r3
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d1a6      	bne.n	800a8b0 <HAL_SPI_TransmitReceive+0x158>
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a966:	b29b      	uxth	r3, r3
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d1a1      	bne.n	800a8b0 <HAL_SPI_TransmitReceive+0x158>
 800a96c:	e07f      	b.n	800aa6e <HAL_SPI_TransmitReceive+0x316>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	685b      	ldr	r3, [r3, #4]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d005      	beq.n	800a982 <HAL_SPI_TransmitReceive+0x22a>
 800a976:	231a      	movs	r3, #26
 800a978:	18fb      	adds	r3, r7, r3
 800a97a:	881b      	ldrh	r3, [r3, #0]
 800a97c:	2b01      	cmp	r3, #1
 800a97e:	d000      	beq.n	800a982 <HAL_SPI_TransmitReceive+0x22a>
 800a980:	e06b      	b.n	800aa5a <HAL_SPI_TransmitReceive+0x302>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	330c      	adds	r3, #12
 800a98c:	7812      	ldrb	r2, [r2, #0]
 800a98e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a994:	1c5a      	adds	r2, r3, #1
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a99e:	b29b      	uxth	r3, r3
 800a9a0:	3b01      	subs	r3, #1
 800a9a2:	b29a      	uxth	r2, r3
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a9a8:	e057      	b.n	800aa5a <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	689b      	ldr	r3, [r3, #8]
 800a9b0:	2202      	movs	r2, #2
 800a9b2:	4013      	ands	r3, r2
 800a9b4:	2b02      	cmp	r3, #2
 800a9b6:	d11c      	bne.n	800a9f2 <HAL_SPI_TransmitReceive+0x29a>
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a9bc:	b29b      	uxth	r3, r3
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d017      	beq.n	800a9f2 <HAL_SPI_TransmitReceive+0x29a>
 800a9c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9c4:	2b01      	cmp	r3, #1
 800a9c6:	d114      	bne.n	800a9f2 <HAL_SPI_TransmitReceive+0x29a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	330c      	adds	r3, #12
 800a9d2:	7812      	ldrb	r2, [r2, #0]
 800a9d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9da:	1c5a      	adds	r2, r3, #1
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a9e4:	b29b      	uxth	r3, r3
 800a9e6:	3b01      	subs	r3, #1
 800a9e8:	b29a      	uxth	r2, r3
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	689b      	ldr	r3, [r3, #8]
 800a9f8:	2201      	movs	r2, #1
 800a9fa:	4013      	ands	r3, r2
 800a9fc:	2b01      	cmp	r3, #1
 800a9fe:	d119      	bne.n	800aa34 <HAL_SPI_TransmitReceive+0x2dc>
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa04:	b29b      	uxth	r3, r3
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d014      	beq.n	800aa34 <HAL_SPI_TransmitReceive+0x2dc>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	68da      	ldr	r2, [r3, #12]
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa14:	b2d2      	uxtb	r2, r2
 800aa16:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa1c:	1c5a      	adds	r2, r3, #1
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa26:	b29b      	uxth	r3, r3
 800aa28:	3b01      	subs	r3, #1
 800aa2a:	b29a      	uxth	r2, r3
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800aa30:	2301      	movs	r3, #1
 800aa32:	62fb      	str	r3, [r7, #44]	; 0x2c
       // HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800aa34:	f7fa fb8d 	bl	8005152 <HAL_GetTick>
 800aa38:	0002      	movs	r2, r0
 800aa3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa3c:	1ad3      	subs	r3, r2, r3
 800aa3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa40:	429a      	cmp	r2, r3
 800aa42:	d802      	bhi.n	800aa4a <HAL_SPI_TransmitReceive+0x2f2>
 800aa44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa46:	3301      	adds	r3, #1
 800aa48:	d102      	bne.n	800aa50 <HAL_SPI_TransmitReceive+0x2f8>
 800aa4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d104      	bne.n	800aa5a <HAL_SPI_TransmitReceive+0x302>
      {
        errorcode = HAL_TIMEOUT;
 800aa50:	232b      	movs	r3, #43	; 0x2b
 800aa52:	18fb      	adds	r3, r7, r3
 800aa54:	2203      	movs	r2, #3
 800aa56:	701a      	strb	r2, [r3, #0]
        goto error;
 800aa58:	e02a      	b.n	800aab0 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aa5e:	b29b      	uxth	r3, r3
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d1a2      	bne.n	800a9aa <HAL_SPI_TransmitReceive+0x252>
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa68:	b29b      	uxth	r3, r3
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d19d      	bne.n	800a9aa <HAL_SPI_TransmitReceive+0x252>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800aa6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa70:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	0018      	movs	r0, r3
 800aa76:	f000 f8c5 	bl	800ac04 <SPI_EndRxTxTransaction>
 800aa7a:	1e03      	subs	r3, r0, #0
 800aa7c:	d007      	beq.n	800aa8e <HAL_SPI_TransmitReceive+0x336>
  {
    errorcode = HAL_ERROR;
 800aa7e:	232b      	movs	r3, #43	; 0x2b
 800aa80:	18fb      	adds	r3, r7, r3
 800aa82:	2201      	movs	r2, #1
 800aa84:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	2220      	movs	r2, #32
 800aa8a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800aa8c:	e010      	b.n	800aab0 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	689b      	ldr	r3, [r3, #8]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d10b      	bne.n	800aaae <HAL_SPI_TransmitReceive+0x356>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aa96:	2300      	movs	r3, #0
 800aa98:	617b      	str	r3, [r7, #20]
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	68db      	ldr	r3, [r3, #12]
 800aaa0:	617b      	str	r3, [r7, #20]
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	689b      	ldr	r3, [r3, #8]
 800aaa8:	617b      	str	r3, [r7, #20]
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	e000      	b.n	800aab0 <HAL_SPI_TransmitReceive+0x358>
  }

error :
 800aaae:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	2251      	movs	r2, #81	; 0x51
 800aab4:	2101      	movs	r1, #1
 800aab6:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	2250      	movs	r2, #80	; 0x50
 800aabc:	2100      	movs	r1, #0
 800aabe:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800aac0:	232b      	movs	r3, #43	; 0x2b
 800aac2:	18fb      	adds	r3, r7, r3
 800aac4:	781b      	ldrb	r3, [r3, #0]
}
 800aac6:	0018      	movs	r0, r3
 800aac8:	46bd      	mov	sp, r7
 800aaca:	b00c      	add	sp, #48	; 0x30
 800aacc:	bd80      	pop	{r7, pc}

0800aace <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800aace:	b580      	push	{r7, lr}
 800aad0:	b082      	sub	sp, #8
 800aad2:	af00      	add	r7, sp, #0
 800aad4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2251      	movs	r2, #81	; 0x51
 800aada:	5c9b      	ldrb	r3, [r3, r2]
 800aadc:	b2db      	uxtb	r3, r3
}
 800aade:	0018      	movs	r0, r3
 800aae0:	46bd      	mov	sp, r7
 800aae2:	b002      	add	sp, #8
 800aae4:	bd80      	pop	{r7, pc}
	...

0800aae8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b088      	sub	sp, #32
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	60f8      	str	r0, [r7, #12]
 800aaf0:	60b9      	str	r1, [r7, #8]
 800aaf2:	603b      	str	r3, [r7, #0]
 800aaf4:	1dfb      	adds	r3, r7, #7
 800aaf6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800aaf8:	f7fa fb2b 	bl	8005152 <HAL_GetTick>
 800aafc:	0002      	movs	r2, r0
 800aafe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab00:	1a9b      	subs	r3, r3, r2
 800ab02:	683a      	ldr	r2, [r7, #0]
 800ab04:	18d3      	adds	r3, r2, r3
 800ab06:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ab08:	f7fa fb23 	bl	8005152 <HAL_GetTick>
 800ab0c:	0003      	movs	r3, r0
 800ab0e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ab10:	4b3a      	ldr	r3, [pc, #232]	; (800abfc <SPI_WaitFlagStateUntilTimeout+0x114>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	015b      	lsls	r3, r3, #5
 800ab16:	0d1b      	lsrs	r3, r3, #20
 800ab18:	69fa      	ldr	r2, [r7, #28]
 800ab1a:	4353      	muls	r3, r2
 800ab1c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ab1e:	e058      	b.n	800abd2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	3301      	adds	r3, #1
 800ab24:	d055      	beq.n	800abd2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ab26:	f7fa fb14 	bl	8005152 <HAL_GetTick>
 800ab2a:	0002      	movs	r2, r0
 800ab2c:	69bb      	ldr	r3, [r7, #24]
 800ab2e:	1ad3      	subs	r3, r2, r3
 800ab30:	69fa      	ldr	r2, [r7, #28]
 800ab32:	429a      	cmp	r2, r3
 800ab34:	d902      	bls.n	800ab3c <SPI_WaitFlagStateUntilTimeout+0x54>
 800ab36:	69fb      	ldr	r3, [r7, #28]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d142      	bne.n	800abc2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	685a      	ldr	r2, [r3, #4]
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	21e0      	movs	r1, #224	; 0xe0
 800ab48:	438a      	bics	r2, r1
 800ab4a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	685a      	ldr	r2, [r3, #4]
 800ab50:	2382      	movs	r3, #130	; 0x82
 800ab52:	005b      	lsls	r3, r3, #1
 800ab54:	429a      	cmp	r2, r3
 800ab56:	d113      	bne.n	800ab80 <SPI_WaitFlagStateUntilTimeout+0x98>
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	689a      	ldr	r2, [r3, #8]
 800ab5c:	2380      	movs	r3, #128	; 0x80
 800ab5e:	021b      	lsls	r3, r3, #8
 800ab60:	429a      	cmp	r2, r3
 800ab62:	d005      	beq.n	800ab70 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	689a      	ldr	r2, [r3, #8]
 800ab68:	2380      	movs	r3, #128	; 0x80
 800ab6a:	00db      	lsls	r3, r3, #3
 800ab6c:	429a      	cmp	r2, r3
 800ab6e:	d107      	bne.n	800ab80 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	681a      	ldr	r2, [r3, #0]
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	2140      	movs	r1, #64	; 0x40
 800ab7c:	438a      	bics	r2, r1
 800ab7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ab84:	2380      	movs	r3, #128	; 0x80
 800ab86:	019b      	lsls	r3, r3, #6
 800ab88:	429a      	cmp	r2, r3
 800ab8a:	d110      	bne.n	800abae <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	681a      	ldr	r2, [r3, #0]
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	491a      	ldr	r1, [pc, #104]	; (800ac00 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800ab98:	400a      	ands	r2, r1
 800ab9a:	601a      	str	r2, [r3, #0]
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	681a      	ldr	r2, [r3, #0]
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	2180      	movs	r1, #128	; 0x80
 800aba8:	0189      	lsls	r1, r1, #6
 800abaa:	430a      	orrs	r2, r1
 800abac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	2251      	movs	r2, #81	; 0x51
 800abb2:	2101      	movs	r1, #1
 800abb4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	2250      	movs	r2, #80	; 0x50
 800abba:	2100      	movs	r1, #0
 800abbc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800abbe:	2303      	movs	r3, #3
 800abc0:	e017      	b.n	800abf2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800abc2:	697b      	ldr	r3, [r7, #20]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d101      	bne.n	800abcc <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800abc8:	2300      	movs	r3, #0
 800abca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800abcc:	697b      	ldr	r3, [r7, #20]
 800abce:	3b01      	subs	r3, #1
 800abd0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	689b      	ldr	r3, [r3, #8]
 800abd8:	68ba      	ldr	r2, [r7, #8]
 800abda:	4013      	ands	r3, r2
 800abdc:	68ba      	ldr	r2, [r7, #8]
 800abde:	1ad3      	subs	r3, r2, r3
 800abe0:	425a      	negs	r2, r3
 800abe2:	4153      	adcs	r3, r2
 800abe4:	b2db      	uxtb	r3, r3
 800abe6:	001a      	movs	r2, r3
 800abe8:	1dfb      	adds	r3, r7, #7
 800abea:	781b      	ldrb	r3, [r3, #0]
 800abec:	429a      	cmp	r2, r3
 800abee:	d197      	bne.n	800ab20 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800abf0:	2300      	movs	r3, #0
}
 800abf2:	0018      	movs	r0, r3
 800abf4:	46bd      	mov	sp, r7
 800abf6:	b008      	add	sp, #32
 800abf8:	bd80      	pop	{r7, pc}
 800abfa:	46c0      	nop			; (mov r8, r8)
 800abfc:	20000070 	.word	0x20000070
 800ac00:	ffffdfff 	.word	0xffffdfff

0800ac04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b088      	sub	sp, #32
 800ac08:	af02      	add	r7, sp, #8
 800ac0a:	60f8      	str	r0, [r7, #12]
 800ac0c:	60b9      	str	r1, [r7, #8]
 800ac0e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800ac10:	4b1d      	ldr	r3, [pc, #116]	; (800ac88 <SPI_EndRxTxTransaction+0x84>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	491d      	ldr	r1, [pc, #116]	; (800ac8c <SPI_EndRxTxTransaction+0x88>)
 800ac16:	0018      	movs	r0, r3
 800ac18:	f7f5 fa88 	bl	800012c <__udivsi3>
 800ac1c:	0003      	movs	r3, r0
 800ac1e:	001a      	movs	r2, r3
 800ac20:	0013      	movs	r3, r2
 800ac22:	015b      	lsls	r3, r3, #5
 800ac24:	1a9b      	subs	r3, r3, r2
 800ac26:	009b      	lsls	r3, r3, #2
 800ac28:	189b      	adds	r3, r3, r2
 800ac2a:	00db      	lsls	r3, r3, #3
 800ac2c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	685a      	ldr	r2, [r3, #4]
 800ac32:	2382      	movs	r3, #130	; 0x82
 800ac34:	005b      	lsls	r3, r3, #1
 800ac36:	429a      	cmp	r2, r3
 800ac38:	d112      	bne.n	800ac60 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ac3a:	68ba      	ldr	r2, [r7, #8]
 800ac3c:	68f8      	ldr	r0, [r7, #12]
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	9300      	str	r3, [sp, #0]
 800ac42:	0013      	movs	r3, r2
 800ac44:	2200      	movs	r2, #0
 800ac46:	2180      	movs	r1, #128	; 0x80
 800ac48:	f7ff ff4e 	bl	800aae8 <SPI_WaitFlagStateUntilTimeout>
 800ac4c:	1e03      	subs	r3, r0, #0
 800ac4e:	d016      	beq.n	800ac7e <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac54:	2220      	movs	r2, #32
 800ac56:	431a      	orrs	r2, r3
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800ac5c:	2303      	movs	r3, #3
 800ac5e:	e00f      	b.n	800ac80 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800ac60:	697b      	ldr	r3, [r7, #20]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d00a      	beq.n	800ac7c <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 800ac66:	697b      	ldr	r3, [r7, #20]
 800ac68:	3b01      	subs	r3, #1
 800ac6a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	689b      	ldr	r3, [r3, #8]
 800ac72:	2280      	movs	r2, #128	; 0x80
 800ac74:	4013      	ands	r3, r2
 800ac76:	2b80      	cmp	r3, #128	; 0x80
 800ac78:	d0f2      	beq.n	800ac60 <SPI_EndRxTxTransaction+0x5c>
 800ac7a:	e000      	b.n	800ac7e <SPI_EndRxTxTransaction+0x7a>
        break;
 800ac7c:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 800ac7e:	2300      	movs	r3, #0
}
 800ac80:	0018      	movs	r0, r3
 800ac82:	46bd      	mov	sp, r7
 800ac84:	b006      	add	sp, #24
 800ac86:	bd80      	pop	{r7, pc}
 800ac88:	20000070 	.word	0x20000070
 800ac8c:	016e3600 	.word	0x016e3600

0800ac90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b082      	sub	sp, #8
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d101      	bne.n	800aca2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ac9e:	2301      	movs	r3, #1
 800aca0:	e044      	b.n	800ad2c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d107      	bne.n	800acba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2274      	movs	r2, #116	; 0x74
 800acae:	2100      	movs	r1, #0
 800acb0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	0018      	movs	r0, r3
 800acb6:	f7fa fb33 	bl	8005320 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2224      	movs	r2, #36	; 0x24
 800acbe:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	681a      	ldr	r2, [r3, #0]
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	2101      	movs	r1, #1
 800accc:	438a      	bics	r2, r1
 800acce:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	0018      	movs	r0, r3
 800acd4:	f000 fb3a 	bl	800b34c <UART_SetConfig>
 800acd8:	0003      	movs	r3, r0
 800acda:	2b01      	cmp	r3, #1
 800acdc:	d101      	bne.n	800ace2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800acde:	2301      	movs	r3, #1
 800ace0:	e024      	b.n	800ad2c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d003      	beq.n	800acf2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	0018      	movs	r0, r3
 800acee:	f000 fdeb 	bl	800b8c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	685a      	ldr	r2, [r3, #4]
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	490d      	ldr	r1, [pc, #52]	; (800ad34 <HAL_UART_Init+0xa4>)
 800acfe:	400a      	ands	r2, r1
 800ad00:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	689a      	ldr	r2, [r3, #8]
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	212a      	movs	r1, #42	; 0x2a
 800ad0e:	438a      	bics	r2, r1
 800ad10:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	681a      	ldr	r2, [r3, #0]
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	2101      	movs	r1, #1
 800ad1e:	430a      	orrs	r2, r1
 800ad20:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	0018      	movs	r0, r3
 800ad26:	f000 fe83 	bl	800ba30 <UART_CheckIdleState>
 800ad2a:	0003      	movs	r3, r0
}
 800ad2c:	0018      	movs	r0, r3
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	b002      	add	sp, #8
 800ad32:	bd80      	pop	{r7, pc}
 800ad34:	ffffb7ff 	.word	0xffffb7ff

0800ad38 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b084      	sub	sp, #16
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	60f8      	str	r0, [r7, #12]
 800ad40:	60b9      	str	r1, [r7, #8]
 800ad42:	1dbb      	adds	r3, r7, #6
 800ad44:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad4a:	2b20      	cmp	r3, #32
 800ad4c:	d144      	bne.n	800add8 <HAL_UART_Receive_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d003      	beq.n	800ad5c <HAL_UART_Receive_IT+0x24>
 800ad54:	1dbb      	adds	r3, r7, #6
 800ad56:	881b      	ldrh	r3, [r3, #0]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d101      	bne.n	800ad60 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	e03c      	b.n	800adda <HAL_UART_Receive_IT+0xa2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	689a      	ldr	r2, [r3, #8]
 800ad64:	2380      	movs	r3, #128	; 0x80
 800ad66:	015b      	lsls	r3, r3, #5
 800ad68:	429a      	cmp	r2, r3
 800ad6a:	d109      	bne.n	800ad80 <HAL_UART_Receive_IT+0x48>
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	691b      	ldr	r3, [r3, #16]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d105      	bne.n	800ad80 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800ad74:	68bb      	ldr	r3, [r7, #8]
 800ad76:	2201      	movs	r2, #1
 800ad78:	4013      	ands	r3, r2
 800ad7a:	d001      	beq.n	800ad80 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	e02c      	b.n	800adda <HAL_UART_Receive_IT+0xa2>
      }
    }

    __HAL_LOCK(huart);
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	2274      	movs	r2, #116	; 0x74
 800ad84:	5c9b      	ldrb	r3, [r3, r2]
 800ad86:	2b01      	cmp	r3, #1
 800ad88:	d101      	bne.n	800ad8e <HAL_UART_Receive_IT+0x56>
 800ad8a:	2302      	movs	r3, #2
 800ad8c:	e025      	b.n	800adda <HAL_UART_Receive_IT+0xa2>
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	2274      	movs	r2, #116	; 0x74
 800ad92:	2101      	movs	r1, #1
 800ad94:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	4a10      	ldr	r2, [pc, #64]	; (800ade4 <HAL_UART_Receive_IT+0xac>)
 800ada2:	4293      	cmp	r3, r2
 800ada4:	d00f      	beq.n	800adc6 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	685a      	ldr	r2, [r3, #4]
 800adac:	2380      	movs	r3, #128	; 0x80
 800adae:	041b      	lsls	r3, r3, #16
 800adb0:	4013      	ands	r3, r2
 800adb2:	d008      	beq.n	800adc6 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	681a      	ldr	r2, [r3, #0]
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	2180      	movs	r1, #128	; 0x80
 800adc0:	04c9      	lsls	r1, r1, #19
 800adc2:	430a      	orrs	r2, r1
 800adc4:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 800adc6:	1dbb      	adds	r3, r7, #6
 800adc8:	881a      	ldrh	r2, [r3, #0]
 800adca:	68b9      	ldr	r1, [r7, #8]
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	0018      	movs	r0, r3
 800add0:	f000 fef4 	bl	800bbbc <UART_Start_Receive_IT>
 800add4:	0003      	movs	r3, r0
 800add6:	e000      	b.n	800adda <HAL_UART_Receive_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 800add8:	2302      	movs	r3, #2
  }
}
 800adda:	0018      	movs	r0, r3
 800addc:	46bd      	mov	sp, r7
 800adde:	b004      	add	sp, #16
 800ade0:	bd80      	pop	{r7, pc}
 800ade2:	46c0      	nop			; (mov r8, r8)
 800ade4:	40004800 	.word	0x40004800

0800ade8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b084      	sub	sp, #16
 800adec:	af00      	add	r7, sp, #0
 800adee:	60f8      	str	r0, [r7, #12]
 800adf0:	60b9      	str	r1, [r7, #8]
 800adf2:	1dbb      	adds	r3, r7, #6
 800adf4:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800adfa:	2b20      	cmp	r3, #32
 800adfc:	d000      	beq.n	800ae00 <HAL_UART_Transmit_DMA+0x18>
 800adfe:	e079      	b.n	800aef4 <HAL_UART_Transmit_DMA+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d003      	beq.n	800ae0e <HAL_UART_Transmit_DMA+0x26>
 800ae06:	1dbb      	adds	r3, r7, #6
 800ae08:	881b      	ldrh	r3, [r3, #0]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d101      	bne.n	800ae12 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800ae0e:	2301      	movs	r3, #1
 800ae10:	e071      	b.n	800aef6 <HAL_UART_Transmit_DMA+0x10e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	689a      	ldr	r2, [r3, #8]
 800ae16:	2380      	movs	r3, #128	; 0x80
 800ae18:	015b      	lsls	r3, r3, #5
 800ae1a:	429a      	cmp	r2, r3
 800ae1c:	d109      	bne.n	800ae32 <HAL_UART_Transmit_DMA+0x4a>
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	691b      	ldr	r3, [r3, #16]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d105      	bne.n	800ae32 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	2201      	movs	r2, #1
 800ae2a:	4013      	ands	r3, r2
 800ae2c:	d001      	beq.n	800ae32 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 800ae2e:	2301      	movs	r3, #1
 800ae30:	e061      	b.n	800aef6 <HAL_UART_Transmit_DMA+0x10e>
      }
    }

    __HAL_LOCK(huart);
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	2274      	movs	r2, #116	; 0x74
 800ae36:	5c9b      	ldrb	r3, [r3, r2]
 800ae38:	2b01      	cmp	r3, #1
 800ae3a:	d101      	bne.n	800ae40 <HAL_UART_Transmit_DMA+0x58>
 800ae3c:	2302      	movs	r3, #2
 800ae3e:	e05a      	b.n	800aef6 <HAL_UART_Transmit_DMA+0x10e>
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	2274      	movs	r2, #116	; 0x74
 800ae44:	2101      	movs	r1, #1
 800ae46:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	68ba      	ldr	r2, [r7, #8]
 800ae4c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	1dba      	adds	r2, r7, #6
 800ae52:	2150      	movs	r1, #80	; 0x50
 800ae54:	8812      	ldrh	r2, [r2, #0]
 800ae56:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	1dba      	adds	r2, r7, #6
 800ae5c:	2152      	movs	r1, #82	; 0x52
 800ae5e:	8812      	ldrh	r2, [r2, #0]
 800ae60:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	2280      	movs	r2, #128	; 0x80
 800ae66:	2100      	movs	r1, #0
 800ae68:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	2221      	movs	r2, #33	; 0x21
 800ae6e:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d02b      	beq.n	800aed0 <HAL_UART_Transmit_DMA+0xe8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae7c:	4a20      	ldr	r2, [pc, #128]	; (800af00 <HAL_UART_Transmit_DMA+0x118>)
 800ae7e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae84:	4a1f      	ldr	r2, [pc, #124]	; (800af04 <HAL_UART_Transmit_DMA+0x11c>)
 800ae86:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae8c:	4a1e      	ldr	r2, [pc, #120]	; (800af08 <HAL_UART_Transmit_DMA+0x120>)
 800ae8e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae94:	2200      	movs	r2, #0
 800ae96:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aea0:	0019      	movs	r1, r3
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	3328      	adds	r3, #40	; 0x28
 800aea8:	001a      	movs	r2, r3
 800aeaa:	1dbb      	adds	r3, r7, #6
 800aeac:	881b      	ldrh	r3, [r3, #0]
 800aeae:	f7fc fae3 	bl	8007478 <HAL_DMA_Start_IT>
 800aeb2:	1e03      	subs	r3, r0, #0
 800aeb4:	d00c      	beq.n	800aed0 <HAL_UART_Transmit_DMA+0xe8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	2280      	movs	r2, #128	; 0x80
 800aeba:	2110      	movs	r1, #16
 800aebc:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	2274      	movs	r2, #116	; 0x74
 800aec2:	2100      	movs	r1, #0
 800aec4:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	2220      	movs	r2, #32
 800aeca:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 800aecc:	2301      	movs	r3, #1
 800aece:	e012      	b.n	800aef6 <HAL_UART_Transmit_DMA+0x10e>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	2240      	movs	r2, #64	; 0x40
 800aed6:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	2274      	movs	r2, #116	; 0x74
 800aedc:	2100      	movs	r1, #0
 800aede:	5499      	strb	r1, [r3, r2]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	689a      	ldr	r2, [r3, #8]
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	2180      	movs	r1, #128	; 0x80
 800aeec:	430a      	orrs	r2, r1
 800aeee:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800aef0:	2300      	movs	r3, #0
 800aef2:	e000      	b.n	800aef6 <HAL_UART_Transmit_DMA+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800aef4:	2302      	movs	r3, #2
  }
}
 800aef6:	0018      	movs	r0, r3
 800aef8:	46bd      	mov	sp, r7
 800aefa:	b004      	add	sp, #16
 800aefc:	bd80      	pop	{r7, pc}
 800aefe:	46c0      	nop			; (mov r8, r8)
 800af00:	0800bd61 	.word	0x0800bd61
 800af04:	0800bdb5 	.word	0x0800bdb5
 800af08:	0800bdd3 	.word	0x0800bdd3

0800af0c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b088      	sub	sp, #32
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	69db      	ldr	r3, [r3, #28]
 800af1a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	689b      	ldr	r3, [r3, #8]
 800af2a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800af2c:	69fb      	ldr	r3, [r7, #28]
 800af2e:	4ab5      	ldr	r2, [pc, #724]	; (800b204 <HAL_UART_IRQHandler+0x2f8>)
 800af30:	4013      	ands	r3, r2
 800af32:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800af34:	693b      	ldr	r3, [r7, #16]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d112      	bne.n	800af60 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800af3a:	69fb      	ldr	r3, [r7, #28]
 800af3c:	2220      	movs	r2, #32
 800af3e:	4013      	ands	r3, r2
 800af40:	d00e      	beq.n	800af60 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800af42:	69bb      	ldr	r3, [r7, #24]
 800af44:	2220      	movs	r2, #32
 800af46:	4013      	ands	r3, r2
 800af48:	d00a      	beq.n	800af60 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d100      	bne.n	800af54 <HAL_UART_IRQHandler+0x48>
 800af52:	e1d1      	b.n	800b2f8 <HAL_UART_IRQHandler+0x3ec>
      {
        huart->RxISR(huart);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af58:	687a      	ldr	r2, [r7, #4]
 800af5a:	0010      	movs	r0, r2
 800af5c:	4798      	blx	r3
      }
      return;
 800af5e:	e1cb      	b.n	800b2f8 <HAL_UART_IRQHandler+0x3ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800af60:	693b      	ldr	r3, [r7, #16]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d100      	bne.n	800af68 <HAL_UART_IRQHandler+0x5c>
 800af66:	e0d9      	b.n	800b11c <HAL_UART_IRQHandler+0x210>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800af68:	697b      	ldr	r3, [r7, #20]
 800af6a:	2201      	movs	r2, #1
 800af6c:	4013      	ands	r3, r2
 800af6e:	d104      	bne.n	800af7a <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800af70:	69bb      	ldr	r3, [r7, #24]
 800af72:	4aa5      	ldr	r2, [pc, #660]	; (800b208 <HAL_UART_IRQHandler+0x2fc>)
 800af74:	4013      	ands	r3, r2
 800af76:	d100      	bne.n	800af7a <HAL_UART_IRQHandler+0x6e>
 800af78:	e0d0      	b.n	800b11c <HAL_UART_IRQHandler+0x210>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800af7a:	69fb      	ldr	r3, [r7, #28]
 800af7c:	2201      	movs	r2, #1
 800af7e:	4013      	ands	r3, r2
 800af80:	d010      	beq.n	800afa4 <HAL_UART_IRQHandler+0x98>
 800af82:	69ba      	ldr	r2, [r7, #24]
 800af84:	2380      	movs	r3, #128	; 0x80
 800af86:	005b      	lsls	r3, r3, #1
 800af88:	4013      	ands	r3, r2
 800af8a:	d00b      	beq.n	800afa4 <HAL_UART_IRQHandler+0x98>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	2201      	movs	r2, #1
 800af92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2280      	movs	r2, #128	; 0x80
 800af98:	589b      	ldr	r3, [r3, r2]
 800af9a:	2201      	movs	r2, #1
 800af9c:	431a      	orrs	r2, r3
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2180      	movs	r1, #128	; 0x80
 800afa2:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800afa4:	69fb      	ldr	r3, [r7, #28]
 800afa6:	2202      	movs	r2, #2
 800afa8:	4013      	ands	r3, r2
 800afaa:	d00f      	beq.n	800afcc <HAL_UART_IRQHandler+0xc0>
 800afac:	697b      	ldr	r3, [r7, #20]
 800afae:	2201      	movs	r2, #1
 800afb0:	4013      	ands	r3, r2
 800afb2:	d00b      	beq.n	800afcc <HAL_UART_IRQHandler+0xc0>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	2202      	movs	r2, #2
 800afba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2280      	movs	r2, #128	; 0x80
 800afc0:	589b      	ldr	r3, [r3, r2]
 800afc2:	2204      	movs	r2, #4
 800afc4:	431a      	orrs	r2, r3
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2180      	movs	r1, #128	; 0x80
 800afca:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800afcc:	69fb      	ldr	r3, [r7, #28]
 800afce:	2204      	movs	r2, #4
 800afd0:	4013      	ands	r3, r2
 800afd2:	d00f      	beq.n	800aff4 <HAL_UART_IRQHandler+0xe8>
 800afd4:	697b      	ldr	r3, [r7, #20]
 800afd6:	2201      	movs	r2, #1
 800afd8:	4013      	ands	r3, r2
 800afda:	d00b      	beq.n	800aff4 <HAL_UART_IRQHandler+0xe8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	2204      	movs	r2, #4
 800afe2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2280      	movs	r2, #128	; 0x80
 800afe8:	589b      	ldr	r3, [r3, r2]
 800afea:	2202      	movs	r2, #2
 800afec:	431a      	orrs	r2, r3
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2180      	movs	r1, #128	; 0x80
 800aff2:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800aff4:	69fb      	ldr	r3, [r7, #28]
 800aff6:	2208      	movs	r2, #8
 800aff8:	4013      	ands	r3, r2
 800affa:	d013      	beq.n	800b024 <HAL_UART_IRQHandler+0x118>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800affc:	69bb      	ldr	r3, [r7, #24]
 800affe:	2220      	movs	r2, #32
 800b000:	4013      	ands	r3, r2
 800b002:	d103      	bne.n	800b00c <HAL_UART_IRQHandler+0x100>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800b004:	697b      	ldr	r3, [r7, #20]
 800b006:	2201      	movs	r2, #1
 800b008:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b00a:	d00b      	beq.n	800b024 <HAL_UART_IRQHandler+0x118>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	2208      	movs	r2, #8
 800b012:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2280      	movs	r2, #128	; 0x80
 800b018:	589b      	ldr	r3, [r3, r2]
 800b01a:	2208      	movs	r2, #8
 800b01c:	431a      	orrs	r2, r3
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2180      	movs	r1, #128	; 0x80
 800b022:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b024:	69fa      	ldr	r2, [r7, #28]
 800b026:	2380      	movs	r3, #128	; 0x80
 800b028:	011b      	lsls	r3, r3, #4
 800b02a:	4013      	ands	r3, r2
 800b02c:	d011      	beq.n	800b052 <HAL_UART_IRQHandler+0x146>
 800b02e:	69ba      	ldr	r2, [r7, #24]
 800b030:	2380      	movs	r3, #128	; 0x80
 800b032:	04db      	lsls	r3, r3, #19
 800b034:	4013      	ands	r3, r2
 800b036:	d00c      	beq.n	800b052 <HAL_UART_IRQHandler+0x146>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	2280      	movs	r2, #128	; 0x80
 800b03e:	0112      	lsls	r2, r2, #4
 800b040:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2280      	movs	r2, #128	; 0x80
 800b046:	589b      	ldr	r3, [r3, r2]
 800b048:	2220      	movs	r2, #32
 800b04a:	431a      	orrs	r2, r3
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2180      	movs	r1, #128	; 0x80
 800b050:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2280      	movs	r2, #128	; 0x80
 800b056:	589b      	ldr	r3, [r3, r2]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d100      	bne.n	800b05e <HAL_UART_IRQHandler+0x152>
 800b05c:	e14e      	b.n	800b2fc <HAL_UART_IRQHandler+0x3f0>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800b05e:	69fb      	ldr	r3, [r7, #28]
 800b060:	2220      	movs	r2, #32
 800b062:	4013      	ands	r3, r2
 800b064:	d00c      	beq.n	800b080 <HAL_UART_IRQHandler+0x174>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b066:	69bb      	ldr	r3, [r7, #24]
 800b068:	2220      	movs	r2, #32
 800b06a:	4013      	ands	r3, r2
 800b06c:	d008      	beq.n	800b080 <HAL_UART_IRQHandler+0x174>
      {
        if (huart->RxISR != NULL)
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b072:	2b00      	cmp	r3, #0
 800b074:	d004      	beq.n	800b080 <HAL_UART_IRQHandler+0x174>
        {
          huart->RxISR(huart);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b07a:	687a      	ldr	r2, [r7, #4]
 800b07c:	0010      	movs	r0, r2
 800b07e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2280      	movs	r2, #128	; 0x80
 800b084:	589b      	ldr	r3, [r3, r2]
 800b086:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	689b      	ldr	r3, [r3, #8]
 800b08e:	2240      	movs	r2, #64	; 0x40
 800b090:	4013      	ands	r3, r2
 800b092:	2b40      	cmp	r3, #64	; 0x40
 800b094:	d003      	beq.n	800b09e <HAL_UART_IRQHandler+0x192>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	2228      	movs	r2, #40	; 0x28
 800b09a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b09c:	d033      	beq.n	800b106 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	0018      	movs	r0, r3
 800b0a2:	f000 fe2d 	bl	800bd00 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	689b      	ldr	r3, [r3, #8]
 800b0ac:	2240      	movs	r2, #64	; 0x40
 800b0ae:	4013      	ands	r3, r2
 800b0b0:	2b40      	cmp	r3, #64	; 0x40
 800b0b2:	d123      	bne.n	800b0fc <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	689a      	ldr	r2, [r3, #8]
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	2140      	movs	r1, #64	; 0x40
 800b0c0:	438a      	bics	r2, r1
 800b0c2:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d012      	beq.n	800b0f2 <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0d0:	4a4e      	ldr	r2, [pc, #312]	; (800b20c <HAL_UART_IRQHandler+0x300>)
 800b0d2:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0d8:	0018      	movs	r0, r3
 800b0da:	f7fc fa73 	bl	80075c4 <HAL_DMA_Abort_IT>
 800b0de:	1e03      	subs	r3, r0, #0
 800b0e0:	d01a      	beq.n	800b118 <HAL_UART_IRQHandler+0x20c>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0ec:	0018      	movs	r0, r3
 800b0ee:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0f0:	e012      	b.n	800b118 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	0018      	movs	r0, r3
 800b0f6:	f000 f915 	bl	800b324 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0fa:	e00d      	b.n	800b118 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	0018      	movs	r0, r3
 800b100:	f000 f910 	bl	800b324 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b104:	e008      	b.n	800b118 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	0018      	movs	r0, r3
 800b10a:	f000 f90b 	bl	800b324 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2280      	movs	r2, #128	; 0x80
 800b112:	2100      	movs	r1, #0
 800b114:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800b116:	e0f1      	b.n	800b2fc <HAL_UART_IRQHandler+0x3f0>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b118:	46c0      	nop			; (mov r8, r8)
    return;
 800b11a:	e0ef      	b.n	800b2fc <HAL_UART_IRQHandler+0x3f0>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b120:	2b01      	cmp	r3, #1
 800b122:	d000      	beq.n	800b126 <HAL_UART_IRQHandler+0x21a>
 800b124:	e0b5      	b.n	800b292 <HAL_UART_IRQHandler+0x386>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800b126:	69fb      	ldr	r3, [r7, #28]
 800b128:	2210      	movs	r2, #16
 800b12a:	4013      	ands	r3, r2
 800b12c:	d100      	bne.n	800b130 <HAL_UART_IRQHandler+0x224>
 800b12e:	e0b0      	b.n	800b292 <HAL_UART_IRQHandler+0x386>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800b130:	69bb      	ldr	r3, [r7, #24]
 800b132:	2210      	movs	r2, #16
 800b134:	4013      	ands	r3, r2
 800b136:	d100      	bne.n	800b13a <HAL_UART_IRQHandler+0x22e>
 800b138:	e0ab      	b.n	800b292 <HAL_UART_IRQHandler+0x386>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	2210      	movs	r2, #16
 800b140:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	689b      	ldr	r3, [r3, #8]
 800b148:	2240      	movs	r2, #64	; 0x40
 800b14a:	4013      	ands	r3, r2
 800b14c:	2b40      	cmp	r3, #64	; 0x40
 800b14e:	d161      	bne.n	800b214 <HAL_UART_IRQHandler+0x308>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	685a      	ldr	r2, [r3, #4]
 800b158:	2108      	movs	r1, #8
 800b15a:	187b      	adds	r3, r7, r1
 800b15c:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 800b15e:	187b      	adds	r3, r7, r1
 800b160:	881b      	ldrh	r3, [r3, #0]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d100      	bne.n	800b168 <HAL_UART_IRQHandler+0x25c>
 800b166:	e0cb      	b.n	800b300 <HAL_UART_IRQHandler+0x3f4>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2258      	movs	r2, #88	; 0x58
 800b16c:	5a9b      	ldrh	r3, [r3, r2]
 800b16e:	187a      	adds	r2, r7, r1
 800b170:	8812      	ldrh	r2, [r2, #0]
 800b172:	429a      	cmp	r2, r3
 800b174:	d300      	bcc.n	800b178 <HAL_UART_IRQHandler+0x26c>
 800b176:	e0c3      	b.n	800b300 <HAL_UART_IRQHandler+0x3f4>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	187a      	adds	r2, r7, r1
 800b17c:	215a      	movs	r1, #90	; 0x5a
 800b17e:	8812      	ldrh	r2, [r2, #0]
 800b180:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	2220      	movs	r2, #32
 800b18c:	4013      	ands	r3, r2
 800b18e:	d12a      	bne.n	800b1e6 <HAL_UART_IRQHandler+0x2da>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	681a      	ldr	r2, [r3, #0]
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	491d      	ldr	r1, [pc, #116]	; (800b210 <HAL_UART_IRQHandler+0x304>)
 800b19c:	400a      	ands	r2, r1
 800b19e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	689a      	ldr	r2, [r3, #8]
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	2101      	movs	r1, #1
 800b1ac:	438a      	bics	r2, r1
 800b1ae:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	689a      	ldr	r2, [r3, #8]
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	2140      	movs	r1, #64	; 0x40
 800b1bc:	438a      	bics	r2, r1
 800b1be:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2220      	movs	r2, #32
 800b1c4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	681a      	ldr	r2, [r3, #0]
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	2110      	movs	r1, #16
 800b1d8:	438a      	bics	r2, r1
 800b1da:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1e0:	0018      	movs	r0, r3
 800b1e2:	f7fc f9af 	bl	8007544 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	2258      	movs	r2, #88	; 0x58
 800b1ea:	5a9a      	ldrh	r2, [r3, r2]
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	215a      	movs	r1, #90	; 0x5a
 800b1f0:	5a5b      	ldrh	r3, [r3, r1]
 800b1f2:	b29b      	uxth	r3, r3
 800b1f4:	1ad3      	subs	r3, r2, r3
 800b1f6:	b29a      	uxth	r2, r3
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	0011      	movs	r1, r2
 800b1fc:	0018      	movs	r0, r3
 800b1fe:	f000 f899 	bl	800b334 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800b202:	e07d      	b.n	800b300 <HAL_UART_IRQHandler+0x3f4>
 800b204:	0000080f 	.word	0x0000080f
 800b208:	04000120 	.word	0x04000120
 800b20c:	0800be55 	.word	0x0800be55
 800b210:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2258      	movs	r2, #88	; 0x58
 800b218:	5a99      	ldrh	r1, [r3, r2]
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	225a      	movs	r2, #90	; 0x5a
 800b21e:	5a9b      	ldrh	r3, [r3, r2]
 800b220:	b29a      	uxth	r2, r3
 800b222:	200a      	movs	r0, #10
 800b224:	183b      	adds	r3, r7, r0
 800b226:	1a8a      	subs	r2, r1, r2
 800b228:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	225a      	movs	r2, #90	; 0x5a
 800b22e:	5a9b      	ldrh	r3, [r3, r2]
 800b230:	b29b      	uxth	r3, r3
 800b232:	2b00      	cmp	r3, #0
 800b234:	d100      	bne.n	800b238 <HAL_UART_IRQHandler+0x32c>
 800b236:	e065      	b.n	800b304 <HAL_UART_IRQHandler+0x3f8>
          &&(nb_rx_data > 0U) )
 800b238:	183b      	adds	r3, r7, r0
 800b23a:	881b      	ldrh	r3, [r3, #0]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d061      	beq.n	800b304 <HAL_UART_IRQHandler+0x3f8>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	681a      	ldr	r2, [r3, #0]
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	4931      	ldr	r1, [pc, #196]	; (800b310 <HAL_UART_IRQHandler+0x404>)
 800b24c:	400a      	ands	r2, r1
 800b24e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	689a      	ldr	r2, [r3, #8]
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	2101      	movs	r1, #1
 800b25c:	438a      	bics	r2, r1
 800b25e:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2220      	movs	r2, #32
 800b264:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2200      	movs	r2, #0
 800b26a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2200      	movs	r2, #0
 800b270:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	681a      	ldr	r2, [r3, #0]
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	2110      	movs	r1, #16
 800b27e:	438a      	bics	r2, r1
 800b280:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b282:	183b      	adds	r3, r7, r0
 800b284:	881a      	ldrh	r2, [r3, #0]
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	0011      	movs	r1, r2
 800b28a:	0018      	movs	r0, r3
 800b28c:	f000 f852 	bl	800b334 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800b290:	e038      	b.n	800b304 <HAL_UART_IRQHandler+0x3f8>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b292:	69fa      	ldr	r2, [r7, #28]
 800b294:	2380      	movs	r3, #128	; 0x80
 800b296:	035b      	lsls	r3, r3, #13
 800b298:	4013      	ands	r3, r2
 800b29a:	d00e      	beq.n	800b2ba <HAL_UART_IRQHandler+0x3ae>
 800b29c:	697a      	ldr	r2, [r7, #20]
 800b29e:	2380      	movs	r3, #128	; 0x80
 800b2a0:	03db      	lsls	r3, r3, #15
 800b2a2:	4013      	ands	r3, r2
 800b2a4:	d009      	beq.n	800b2ba <HAL_UART_IRQHandler+0x3ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	2280      	movs	r2, #128	; 0x80
 800b2ac:	0352      	lsls	r2, r2, #13
 800b2ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	0018      	movs	r0, r3
 800b2b4:	f000 fee8 	bl	800c088 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b2b8:	e027      	b.n	800b30a <HAL_UART_IRQHandler+0x3fe>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b2ba:	69fb      	ldr	r3, [r7, #28]
 800b2bc:	2280      	movs	r2, #128	; 0x80
 800b2be:	4013      	ands	r3, r2
 800b2c0:	d00d      	beq.n	800b2de <HAL_UART_IRQHandler+0x3d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b2c2:	69bb      	ldr	r3, [r7, #24]
 800b2c4:	2280      	movs	r2, #128	; 0x80
 800b2c6:	4013      	ands	r3, r2
 800b2c8:	d009      	beq.n	800b2de <HAL_UART_IRQHandler+0x3d2>
  {
    if (huart->TxISR != NULL)
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d01a      	beq.n	800b308 <HAL_UART_IRQHandler+0x3fc>
    {
      huart->TxISR(huart);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b2d6:	687a      	ldr	r2, [r7, #4]
 800b2d8:	0010      	movs	r0, r2
 800b2da:	4798      	blx	r3
    }
    return;
 800b2dc:	e014      	b.n	800b308 <HAL_UART_IRQHandler+0x3fc>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b2de:	69fb      	ldr	r3, [r7, #28]
 800b2e0:	2240      	movs	r2, #64	; 0x40
 800b2e2:	4013      	ands	r3, r2
 800b2e4:	d011      	beq.n	800b30a <HAL_UART_IRQHandler+0x3fe>
 800b2e6:	69bb      	ldr	r3, [r7, #24]
 800b2e8:	2240      	movs	r2, #64	; 0x40
 800b2ea:	4013      	ands	r3, r2
 800b2ec:	d00d      	beq.n	800b30a <HAL_UART_IRQHandler+0x3fe>
  {
    UART_EndTransmit_IT(huart);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	0018      	movs	r0, r3
 800b2f2:	f000 fdc6 	bl	800be82 <UART_EndTransmit_IT>
    return;
 800b2f6:	e008      	b.n	800b30a <HAL_UART_IRQHandler+0x3fe>
      return;
 800b2f8:	46c0      	nop			; (mov r8, r8)
 800b2fa:	e006      	b.n	800b30a <HAL_UART_IRQHandler+0x3fe>
    return;
 800b2fc:	46c0      	nop			; (mov r8, r8)
 800b2fe:	e004      	b.n	800b30a <HAL_UART_IRQHandler+0x3fe>
      return;
 800b300:	46c0      	nop			; (mov r8, r8)
 800b302:	e002      	b.n	800b30a <HAL_UART_IRQHandler+0x3fe>
      return;
 800b304:	46c0      	nop			; (mov r8, r8)
 800b306:	e000      	b.n	800b30a <HAL_UART_IRQHandler+0x3fe>
    return;
 800b308:	46c0      	nop			; (mov r8, r8)
  }

}
 800b30a:	46bd      	mov	sp, r7
 800b30c:	b008      	add	sp, #32
 800b30e:	bd80      	pop	{r7, pc}
 800b310:	fffffedf 	.word	0xfffffedf

0800b314 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b082      	sub	sp, #8
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b31c:	46c0      	nop			; (mov r8, r8)
 800b31e:	46bd      	mov	sp, r7
 800b320:	b002      	add	sp, #8
 800b322:	bd80      	pop	{r7, pc}

0800b324 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b082      	sub	sp, #8
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b32c:	46c0      	nop			; (mov r8, r8)
 800b32e:	46bd      	mov	sp, r7
 800b330:	b002      	add	sp, #8
 800b332:	bd80      	pop	{r7, pc}

0800b334 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b082      	sub	sp, #8
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
 800b33c:	000a      	movs	r2, r1
 800b33e:	1cbb      	adds	r3, r7, #2
 800b340:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b342:	46c0      	nop			; (mov r8, r8)
 800b344:	46bd      	mov	sp, r7
 800b346:	b002      	add	sp, #8
 800b348:	bd80      	pop	{r7, pc}
	...

0800b34c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b34c:	b5b0      	push	{r4, r5, r7, lr}
 800b34e:	b08e      	sub	sp, #56	; 0x38
 800b350:	af00      	add	r7, sp, #0
 800b352:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b354:	231a      	movs	r3, #26
 800b356:	2218      	movs	r2, #24
 800b358:	4694      	mov	ip, r2
 800b35a:	44bc      	add	ip, r7
 800b35c:	4463      	add	r3, ip
 800b35e:	2200      	movs	r2, #0
 800b360:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b362:	69fb      	ldr	r3, [r7, #28]
 800b364:	689a      	ldr	r2, [r3, #8]
 800b366:	69fb      	ldr	r3, [r7, #28]
 800b368:	691b      	ldr	r3, [r3, #16]
 800b36a:	431a      	orrs	r2, r3
 800b36c:	69fb      	ldr	r3, [r7, #28]
 800b36e:	695b      	ldr	r3, [r3, #20]
 800b370:	431a      	orrs	r2, r3
 800b372:	69fb      	ldr	r3, [r7, #28]
 800b374:	69db      	ldr	r3, [r3, #28]
 800b376:	4313      	orrs	r3, r2
 800b378:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b37a:	69fb      	ldr	r3, [r7, #28]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	4ab0      	ldr	r2, [pc, #704]	; (800b644 <UART_SetConfig+0x2f8>)
 800b382:	4013      	ands	r3, r2
 800b384:	0019      	movs	r1, r3
 800b386:	69fb      	ldr	r3, [r7, #28]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b38c:	430a      	orrs	r2, r1
 800b38e:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b390:	69fb      	ldr	r3, [r7, #28]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	685b      	ldr	r3, [r3, #4]
 800b396:	4aac      	ldr	r2, [pc, #688]	; (800b648 <UART_SetConfig+0x2fc>)
 800b398:	4013      	ands	r3, r2
 800b39a:	0019      	movs	r1, r3
 800b39c:	69fb      	ldr	r3, [r7, #28]
 800b39e:	68da      	ldr	r2, [r3, #12]
 800b3a0:	69fb      	ldr	r3, [r7, #28]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	430a      	orrs	r2, r1
 800b3a6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b3a8:	69fb      	ldr	r3, [r7, #28]
 800b3aa:	699b      	ldr	r3, [r3, #24]
 800b3ac:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b3ae:	69fb      	ldr	r3, [r7, #28]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	4aa6      	ldr	r2, [pc, #664]	; (800b64c <UART_SetConfig+0x300>)
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d004      	beq.n	800b3c2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b3b8:	69fb      	ldr	r3, [r7, #28]
 800b3ba:	6a1b      	ldr	r3, [r3, #32]
 800b3bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b3be:	4313      	orrs	r3, r2
 800b3c0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b3c2:	69fb      	ldr	r3, [r7, #28]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	689b      	ldr	r3, [r3, #8]
 800b3c8:	4aa1      	ldr	r2, [pc, #644]	; (800b650 <UART_SetConfig+0x304>)
 800b3ca:	4013      	ands	r3, r2
 800b3cc:	0019      	movs	r1, r3
 800b3ce:	69fb      	ldr	r3, [r7, #28]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b3d4:	430a      	orrs	r2, r1
 800b3d6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b3d8:	69fb      	ldr	r3, [r7, #28]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	4a9d      	ldr	r2, [pc, #628]	; (800b654 <UART_SetConfig+0x308>)
 800b3de:	4293      	cmp	r3, r2
 800b3e0:	d136      	bne.n	800b450 <UART_SetConfig+0x104>
 800b3e2:	4b9d      	ldr	r3, [pc, #628]	; (800b658 <UART_SetConfig+0x30c>)
 800b3e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3e6:	2203      	movs	r2, #3
 800b3e8:	4013      	ands	r3, r2
 800b3ea:	2b03      	cmp	r3, #3
 800b3ec:	d020      	beq.n	800b430 <UART_SetConfig+0xe4>
 800b3ee:	d827      	bhi.n	800b440 <UART_SetConfig+0xf4>
 800b3f0:	2b02      	cmp	r3, #2
 800b3f2:	d00d      	beq.n	800b410 <UART_SetConfig+0xc4>
 800b3f4:	d824      	bhi.n	800b440 <UART_SetConfig+0xf4>
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d002      	beq.n	800b400 <UART_SetConfig+0xb4>
 800b3fa:	2b01      	cmp	r3, #1
 800b3fc:	d010      	beq.n	800b420 <UART_SetConfig+0xd4>
 800b3fe:	e01f      	b.n	800b440 <UART_SetConfig+0xf4>
 800b400:	231b      	movs	r3, #27
 800b402:	2218      	movs	r2, #24
 800b404:	4694      	mov	ip, r2
 800b406:	44bc      	add	ip, r7
 800b408:	4463      	add	r3, ip
 800b40a:	2201      	movs	r2, #1
 800b40c:	701a      	strb	r2, [r3, #0]
 800b40e:	e0c5      	b.n	800b59c <UART_SetConfig+0x250>
 800b410:	231b      	movs	r3, #27
 800b412:	2218      	movs	r2, #24
 800b414:	4694      	mov	ip, r2
 800b416:	44bc      	add	ip, r7
 800b418:	4463      	add	r3, ip
 800b41a:	2202      	movs	r2, #2
 800b41c:	701a      	strb	r2, [r3, #0]
 800b41e:	e0bd      	b.n	800b59c <UART_SetConfig+0x250>
 800b420:	231b      	movs	r3, #27
 800b422:	2218      	movs	r2, #24
 800b424:	4694      	mov	ip, r2
 800b426:	44bc      	add	ip, r7
 800b428:	4463      	add	r3, ip
 800b42a:	2204      	movs	r2, #4
 800b42c:	701a      	strb	r2, [r3, #0]
 800b42e:	e0b5      	b.n	800b59c <UART_SetConfig+0x250>
 800b430:	231b      	movs	r3, #27
 800b432:	2218      	movs	r2, #24
 800b434:	4694      	mov	ip, r2
 800b436:	44bc      	add	ip, r7
 800b438:	4463      	add	r3, ip
 800b43a:	2208      	movs	r2, #8
 800b43c:	701a      	strb	r2, [r3, #0]
 800b43e:	e0ad      	b.n	800b59c <UART_SetConfig+0x250>
 800b440:	231b      	movs	r3, #27
 800b442:	2218      	movs	r2, #24
 800b444:	4694      	mov	ip, r2
 800b446:	44bc      	add	ip, r7
 800b448:	4463      	add	r3, ip
 800b44a:	2210      	movs	r2, #16
 800b44c:	701a      	strb	r2, [r3, #0]
 800b44e:	e0a5      	b.n	800b59c <UART_SetConfig+0x250>
 800b450:	69fb      	ldr	r3, [r7, #28]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	4a81      	ldr	r2, [pc, #516]	; (800b65c <UART_SetConfig+0x310>)
 800b456:	4293      	cmp	r3, r2
 800b458:	d136      	bne.n	800b4c8 <UART_SetConfig+0x17c>
 800b45a:	4b7f      	ldr	r3, [pc, #508]	; (800b658 <UART_SetConfig+0x30c>)
 800b45c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b45e:	220c      	movs	r2, #12
 800b460:	4013      	ands	r3, r2
 800b462:	2b0c      	cmp	r3, #12
 800b464:	d020      	beq.n	800b4a8 <UART_SetConfig+0x15c>
 800b466:	d827      	bhi.n	800b4b8 <UART_SetConfig+0x16c>
 800b468:	2b08      	cmp	r3, #8
 800b46a:	d00d      	beq.n	800b488 <UART_SetConfig+0x13c>
 800b46c:	d824      	bhi.n	800b4b8 <UART_SetConfig+0x16c>
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d002      	beq.n	800b478 <UART_SetConfig+0x12c>
 800b472:	2b04      	cmp	r3, #4
 800b474:	d010      	beq.n	800b498 <UART_SetConfig+0x14c>
 800b476:	e01f      	b.n	800b4b8 <UART_SetConfig+0x16c>
 800b478:	231b      	movs	r3, #27
 800b47a:	2218      	movs	r2, #24
 800b47c:	4694      	mov	ip, r2
 800b47e:	44bc      	add	ip, r7
 800b480:	4463      	add	r3, ip
 800b482:	2200      	movs	r2, #0
 800b484:	701a      	strb	r2, [r3, #0]
 800b486:	e089      	b.n	800b59c <UART_SetConfig+0x250>
 800b488:	231b      	movs	r3, #27
 800b48a:	2218      	movs	r2, #24
 800b48c:	4694      	mov	ip, r2
 800b48e:	44bc      	add	ip, r7
 800b490:	4463      	add	r3, ip
 800b492:	2202      	movs	r2, #2
 800b494:	701a      	strb	r2, [r3, #0]
 800b496:	e081      	b.n	800b59c <UART_SetConfig+0x250>
 800b498:	231b      	movs	r3, #27
 800b49a:	2218      	movs	r2, #24
 800b49c:	4694      	mov	ip, r2
 800b49e:	44bc      	add	ip, r7
 800b4a0:	4463      	add	r3, ip
 800b4a2:	2204      	movs	r2, #4
 800b4a4:	701a      	strb	r2, [r3, #0]
 800b4a6:	e079      	b.n	800b59c <UART_SetConfig+0x250>
 800b4a8:	231b      	movs	r3, #27
 800b4aa:	2218      	movs	r2, #24
 800b4ac:	4694      	mov	ip, r2
 800b4ae:	44bc      	add	ip, r7
 800b4b0:	4463      	add	r3, ip
 800b4b2:	2208      	movs	r2, #8
 800b4b4:	701a      	strb	r2, [r3, #0]
 800b4b6:	e071      	b.n	800b59c <UART_SetConfig+0x250>
 800b4b8:	231b      	movs	r3, #27
 800b4ba:	2218      	movs	r2, #24
 800b4bc:	4694      	mov	ip, r2
 800b4be:	44bc      	add	ip, r7
 800b4c0:	4463      	add	r3, ip
 800b4c2:	2210      	movs	r2, #16
 800b4c4:	701a      	strb	r2, [r3, #0]
 800b4c6:	e069      	b.n	800b59c <UART_SetConfig+0x250>
 800b4c8:	69fb      	ldr	r3, [r7, #28]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	4a64      	ldr	r2, [pc, #400]	; (800b660 <UART_SetConfig+0x314>)
 800b4ce:	4293      	cmp	r3, r2
 800b4d0:	d107      	bne.n	800b4e2 <UART_SetConfig+0x196>
 800b4d2:	231b      	movs	r3, #27
 800b4d4:	2218      	movs	r2, #24
 800b4d6:	4694      	mov	ip, r2
 800b4d8:	44bc      	add	ip, r7
 800b4da:	4463      	add	r3, ip
 800b4dc:	2200      	movs	r2, #0
 800b4de:	701a      	strb	r2, [r3, #0]
 800b4e0:	e05c      	b.n	800b59c <UART_SetConfig+0x250>
 800b4e2:	69fb      	ldr	r3, [r7, #28]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	4a5f      	ldr	r2, [pc, #380]	; (800b664 <UART_SetConfig+0x318>)
 800b4e8:	4293      	cmp	r3, r2
 800b4ea:	d107      	bne.n	800b4fc <UART_SetConfig+0x1b0>
 800b4ec:	231b      	movs	r3, #27
 800b4ee:	2218      	movs	r2, #24
 800b4f0:	4694      	mov	ip, r2
 800b4f2:	44bc      	add	ip, r7
 800b4f4:	4463      	add	r3, ip
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	701a      	strb	r2, [r3, #0]
 800b4fa:	e04f      	b.n	800b59c <UART_SetConfig+0x250>
 800b4fc:	69fb      	ldr	r3, [r7, #28]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	4a52      	ldr	r2, [pc, #328]	; (800b64c <UART_SetConfig+0x300>)
 800b502:	4293      	cmp	r3, r2
 800b504:	d143      	bne.n	800b58e <UART_SetConfig+0x242>
 800b506:	4b54      	ldr	r3, [pc, #336]	; (800b658 <UART_SetConfig+0x30c>)
 800b508:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b50a:	23c0      	movs	r3, #192	; 0xc0
 800b50c:	011b      	lsls	r3, r3, #4
 800b50e:	4013      	ands	r3, r2
 800b510:	22c0      	movs	r2, #192	; 0xc0
 800b512:	0112      	lsls	r2, r2, #4
 800b514:	4293      	cmp	r3, r2
 800b516:	d02a      	beq.n	800b56e <UART_SetConfig+0x222>
 800b518:	22c0      	movs	r2, #192	; 0xc0
 800b51a:	0112      	lsls	r2, r2, #4
 800b51c:	4293      	cmp	r3, r2
 800b51e:	d82e      	bhi.n	800b57e <UART_SetConfig+0x232>
 800b520:	2280      	movs	r2, #128	; 0x80
 800b522:	0112      	lsls	r2, r2, #4
 800b524:	4293      	cmp	r3, r2
 800b526:	d012      	beq.n	800b54e <UART_SetConfig+0x202>
 800b528:	2280      	movs	r2, #128	; 0x80
 800b52a:	0112      	lsls	r2, r2, #4
 800b52c:	4293      	cmp	r3, r2
 800b52e:	d826      	bhi.n	800b57e <UART_SetConfig+0x232>
 800b530:	2b00      	cmp	r3, #0
 800b532:	d004      	beq.n	800b53e <UART_SetConfig+0x1f2>
 800b534:	2280      	movs	r2, #128	; 0x80
 800b536:	00d2      	lsls	r2, r2, #3
 800b538:	4293      	cmp	r3, r2
 800b53a:	d010      	beq.n	800b55e <UART_SetConfig+0x212>
 800b53c:	e01f      	b.n	800b57e <UART_SetConfig+0x232>
 800b53e:	231b      	movs	r3, #27
 800b540:	2218      	movs	r2, #24
 800b542:	4694      	mov	ip, r2
 800b544:	44bc      	add	ip, r7
 800b546:	4463      	add	r3, ip
 800b548:	2200      	movs	r2, #0
 800b54a:	701a      	strb	r2, [r3, #0]
 800b54c:	e026      	b.n	800b59c <UART_SetConfig+0x250>
 800b54e:	231b      	movs	r3, #27
 800b550:	2218      	movs	r2, #24
 800b552:	4694      	mov	ip, r2
 800b554:	44bc      	add	ip, r7
 800b556:	4463      	add	r3, ip
 800b558:	2202      	movs	r2, #2
 800b55a:	701a      	strb	r2, [r3, #0]
 800b55c:	e01e      	b.n	800b59c <UART_SetConfig+0x250>
 800b55e:	231b      	movs	r3, #27
 800b560:	2218      	movs	r2, #24
 800b562:	4694      	mov	ip, r2
 800b564:	44bc      	add	ip, r7
 800b566:	4463      	add	r3, ip
 800b568:	2204      	movs	r2, #4
 800b56a:	701a      	strb	r2, [r3, #0]
 800b56c:	e016      	b.n	800b59c <UART_SetConfig+0x250>
 800b56e:	231b      	movs	r3, #27
 800b570:	2218      	movs	r2, #24
 800b572:	4694      	mov	ip, r2
 800b574:	44bc      	add	ip, r7
 800b576:	4463      	add	r3, ip
 800b578:	2208      	movs	r2, #8
 800b57a:	701a      	strb	r2, [r3, #0]
 800b57c:	e00e      	b.n	800b59c <UART_SetConfig+0x250>
 800b57e:	231b      	movs	r3, #27
 800b580:	2218      	movs	r2, #24
 800b582:	4694      	mov	ip, r2
 800b584:	44bc      	add	ip, r7
 800b586:	4463      	add	r3, ip
 800b588:	2210      	movs	r2, #16
 800b58a:	701a      	strb	r2, [r3, #0]
 800b58c:	e006      	b.n	800b59c <UART_SetConfig+0x250>
 800b58e:	231b      	movs	r3, #27
 800b590:	2218      	movs	r2, #24
 800b592:	4694      	mov	ip, r2
 800b594:	44bc      	add	ip, r7
 800b596:	4463      	add	r3, ip
 800b598:	2210      	movs	r2, #16
 800b59a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b59c:	69fb      	ldr	r3, [r7, #28]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	4a2a      	ldr	r2, [pc, #168]	; (800b64c <UART_SetConfig+0x300>)
 800b5a2:	4293      	cmp	r3, r2
 800b5a4:	d000      	beq.n	800b5a8 <UART_SetConfig+0x25c>
 800b5a6:	e09e      	b.n	800b6e6 <UART_SetConfig+0x39a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b5a8:	231b      	movs	r3, #27
 800b5aa:	2218      	movs	r2, #24
 800b5ac:	4694      	mov	ip, r2
 800b5ae:	44bc      	add	ip, r7
 800b5b0:	4463      	add	r3, ip
 800b5b2:	781b      	ldrb	r3, [r3, #0]
 800b5b4:	2b08      	cmp	r3, #8
 800b5b6:	d01d      	beq.n	800b5f4 <UART_SetConfig+0x2a8>
 800b5b8:	dc20      	bgt.n	800b5fc <UART_SetConfig+0x2b0>
 800b5ba:	2b04      	cmp	r3, #4
 800b5bc:	d015      	beq.n	800b5ea <UART_SetConfig+0x29e>
 800b5be:	dc1d      	bgt.n	800b5fc <UART_SetConfig+0x2b0>
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d002      	beq.n	800b5ca <UART_SetConfig+0x27e>
 800b5c4:	2b02      	cmp	r3, #2
 800b5c6:	d005      	beq.n	800b5d4 <UART_SetConfig+0x288>
 800b5c8:	e018      	b.n	800b5fc <UART_SetConfig+0x2b0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b5ca:	f7fe f8b7 	bl	800973c <HAL_RCC_GetPCLK1Freq>
 800b5ce:	0003      	movs	r3, r0
 800b5d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b5d2:	e01d      	b.n	800b610 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b5d4:	4b20      	ldr	r3, [pc, #128]	; (800b658 <UART_SetConfig+0x30c>)
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	2210      	movs	r2, #16
 800b5da:	4013      	ands	r3, r2
 800b5dc:	d002      	beq.n	800b5e4 <UART_SetConfig+0x298>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800b5de:	4b22      	ldr	r3, [pc, #136]	; (800b668 <UART_SetConfig+0x31c>)
 800b5e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b5e2:	e015      	b.n	800b610 <UART_SetConfig+0x2c4>
          pclk = (uint32_t) HSI_VALUE;
 800b5e4:	4b21      	ldr	r3, [pc, #132]	; (800b66c <UART_SetConfig+0x320>)
 800b5e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b5e8:	e012      	b.n	800b610 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b5ea:	f7fd fff7 	bl	80095dc <HAL_RCC_GetSysClockFreq>
 800b5ee:	0003      	movs	r3, r0
 800b5f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b5f2:	e00d      	b.n	800b610 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b5f4:	2380      	movs	r3, #128	; 0x80
 800b5f6:	021b      	lsls	r3, r3, #8
 800b5f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b5fa:	e009      	b.n	800b610 <UART_SetConfig+0x2c4>
      default:
        pclk = 0U;
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b600:	231a      	movs	r3, #26
 800b602:	2218      	movs	r2, #24
 800b604:	4694      	mov	ip, r2
 800b606:	44bc      	add	ip, r7
 800b608:	4463      	add	r3, ip
 800b60a:	2201      	movs	r2, #1
 800b60c:	701a      	strb	r2, [r3, #0]
        break;
 800b60e:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b612:	2b00      	cmp	r3, #0
 800b614:	d100      	bne.n	800b618 <UART_SetConfig+0x2cc>
 800b616:	e13c      	b.n	800b892 <UART_SetConfig+0x546>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b618:	69fb      	ldr	r3, [r7, #28]
 800b61a:	685a      	ldr	r2, [r3, #4]
 800b61c:	0013      	movs	r3, r2
 800b61e:	005b      	lsls	r3, r3, #1
 800b620:	189b      	adds	r3, r3, r2
 800b622:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b624:	429a      	cmp	r2, r3
 800b626:	d305      	bcc.n	800b634 <UART_SetConfig+0x2e8>
          (pclk > (4096U * huart->Init.BaudRate)))
 800b628:	69fb      	ldr	r3, [r7, #28]
 800b62a:	685b      	ldr	r3, [r3, #4]
 800b62c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b62e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b630:	429a      	cmp	r2, r3
 800b632:	d91d      	bls.n	800b670 <UART_SetConfig+0x324>
      {
        ret = HAL_ERROR;
 800b634:	231a      	movs	r3, #26
 800b636:	2218      	movs	r2, #24
 800b638:	4694      	mov	ip, r2
 800b63a:	44bc      	add	ip, r7
 800b63c:	4463      	add	r3, ip
 800b63e:	2201      	movs	r2, #1
 800b640:	701a      	strb	r2, [r3, #0]
 800b642:	e126      	b.n	800b892 <UART_SetConfig+0x546>
 800b644:	efff69f3 	.word	0xefff69f3
 800b648:	ffffcfff 	.word	0xffffcfff
 800b64c:	40004800 	.word	0x40004800
 800b650:	fffff4ff 	.word	0xfffff4ff
 800b654:	40013800 	.word	0x40013800
 800b658:	40021000 	.word	0x40021000
 800b65c:	40004400 	.word	0x40004400
 800b660:	40004c00 	.word	0x40004c00
 800b664:	40005000 	.word	0x40005000
 800b668:	003d0900 	.word	0x003d0900
 800b66c:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800b670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b672:	613b      	str	r3, [r7, #16]
 800b674:	2300      	movs	r3, #0
 800b676:	617b      	str	r3, [r7, #20]
 800b678:	6939      	ldr	r1, [r7, #16]
 800b67a:	697a      	ldr	r2, [r7, #20]
 800b67c:	000b      	movs	r3, r1
 800b67e:	0e1b      	lsrs	r3, r3, #24
 800b680:	0010      	movs	r0, r2
 800b682:	0205      	lsls	r5, r0, #8
 800b684:	431d      	orrs	r5, r3
 800b686:	000b      	movs	r3, r1
 800b688:	021c      	lsls	r4, r3, #8
 800b68a:	69fb      	ldr	r3, [r7, #28]
 800b68c:	685b      	ldr	r3, [r3, #4]
 800b68e:	085b      	lsrs	r3, r3, #1
 800b690:	60bb      	str	r3, [r7, #8]
 800b692:	2300      	movs	r3, #0
 800b694:	60fb      	str	r3, [r7, #12]
 800b696:	68b8      	ldr	r0, [r7, #8]
 800b698:	68f9      	ldr	r1, [r7, #12]
 800b69a:	1900      	adds	r0, r0, r4
 800b69c:	4169      	adcs	r1, r5
 800b69e:	69fb      	ldr	r3, [r7, #28]
 800b6a0:	685b      	ldr	r3, [r3, #4]
 800b6a2:	603b      	str	r3, [r7, #0]
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	607b      	str	r3, [r7, #4]
 800b6a8:	683a      	ldr	r2, [r7, #0]
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	f7f4 ff50 	bl	8000550 <__aeabi_uldivmod>
 800b6b0:	0002      	movs	r2, r0
 800b6b2:	000b      	movs	r3, r1
 800b6b4:	0013      	movs	r3, r2
 800b6b6:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b6b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6ba:	23c0      	movs	r3, #192	; 0xc0
 800b6bc:	009b      	lsls	r3, r3, #2
 800b6be:	429a      	cmp	r2, r3
 800b6c0:	d309      	bcc.n	800b6d6 <UART_SetConfig+0x38a>
 800b6c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6c4:	2380      	movs	r3, #128	; 0x80
 800b6c6:	035b      	lsls	r3, r3, #13
 800b6c8:	429a      	cmp	r2, r3
 800b6ca:	d204      	bcs.n	800b6d6 <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 800b6cc:	69fb      	ldr	r3, [r7, #28]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6d2:	60da      	str	r2, [r3, #12]
 800b6d4:	e0dd      	b.n	800b892 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 800b6d6:	231a      	movs	r3, #26
 800b6d8:	2218      	movs	r2, #24
 800b6da:	4694      	mov	ip, r2
 800b6dc:	44bc      	add	ip, r7
 800b6de:	4463      	add	r3, ip
 800b6e0:	2201      	movs	r2, #1
 800b6e2:	701a      	strb	r2, [r3, #0]
 800b6e4:	e0d5      	b.n	800b892 <UART_SetConfig+0x546>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b6e6:	69fb      	ldr	r3, [r7, #28]
 800b6e8:	69da      	ldr	r2, [r3, #28]
 800b6ea:	2380      	movs	r3, #128	; 0x80
 800b6ec:	021b      	lsls	r3, r3, #8
 800b6ee:	429a      	cmp	r2, r3
 800b6f0:	d000      	beq.n	800b6f4 <UART_SetConfig+0x3a8>
 800b6f2:	e074      	b.n	800b7de <UART_SetConfig+0x492>
  {
    switch (clocksource)
 800b6f4:	231b      	movs	r3, #27
 800b6f6:	2218      	movs	r2, #24
 800b6f8:	4694      	mov	ip, r2
 800b6fa:	44bc      	add	ip, r7
 800b6fc:	4463      	add	r3, ip
 800b6fe:	781b      	ldrb	r3, [r3, #0]
 800b700:	2b08      	cmp	r3, #8
 800b702:	d822      	bhi.n	800b74a <UART_SetConfig+0x3fe>
 800b704:	009a      	lsls	r2, r3, #2
 800b706:	4b6b      	ldr	r3, [pc, #428]	; (800b8b4 <UART_SetConfig+0x568>)
 800b708:	18d3      	adds	r3, r2, r3
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b70e:	f7fe f815 	bl	800973c <HAL_RCC_GetPCLK1Freq>
 800b712:	0003      	movs	r3, r0
 800b714:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b716:	e022      	b.n	800b75e <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b718:	f7fe f826 	bl	8009768 <HAL_RCC_GetPCLK2Freq>
 800b71c:	0003      	movs	r3, r0
 800b71e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b720:	e01d      	b.n	800b75e <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b722:	4b65      	ldr	r3, [pc, #404]	; (800b8b8 <UART_SetConfig+0x56c>)
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	2210      	movs	r2, #16
 800b728:	4013      	ands	r3, r2
 800b72a:	d002      	beq.n	800b732 <UART_SetConfig+0x3e6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800b72c:	4b63      	ldr	r3, [pc, #396]	; (800b8bc <UART_SetConfig+0x570>)
 800b72e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b730:	e015      	b.n	800b75e <UART_SetConfig+0x412>
          pclk = (uint32_t) HSI_VALUE;
 800b732:	4b63      	ldr	r3, [pc, #396]	; (800b8c0 <UART_SetConfig+0x574>)
 800b734:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b736:	e012      	b.n	800b75e <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b738:	f7fd ff50 	bl	80095dc <HAL_RCC_GetSysClockFreq>
 800b73c:	0003      	movs	r3, r0
 800b73e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b740:	e00d      	b.n	800b75e <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b742:	2380      	movs	r3, #128	; 0x80
 800b744:	021b      	lsls	r3, r3, #8
 800b746:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b748:	e009      	b.n	800b75e <UART_SetConfig+0x412>
      default:
        pclk = 0U;
 800b74a:	2300      	movs	r3, #0
 800b74c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b74e:	231a      	movs	r3, #26
 800b750:	2218      	movs	r2, #24
 800b752:	4694      	mov	ip, r2
 800b754:	44bc      	add	ip, r7
 800b756:	4463      	add	r3, ip
 800b758:	2201      	movs	r2, #1
 800b75a:	701a      	strb	r2, [r3, #0]
        break;
 800b75c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b75e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b760:	2b00      	cmp	r3, #0
 800b762:	d100      	bne.n	800b766 <UART_SetConfig+0x41a>
 800b764:	e095      	b.n	800b892 <UART_SetConfig+0x546>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b768:	005a      	lsls	r2, r3, #1
 800b76a:	69fb      	ldr	r3, [r7, #28]
 800b76c:	685b      	ldr	r3, [r3, #4]
 800b76e:	085b      	lsrs	r3, r3, #1
 800b770:	18d2      	adds	r2, r2, r3
 800b772:	69fb      	ldr	r3, [r7, #28]
 800b774:	685b      	ldr	r3, [r3, #4]
 800b776:	0019      	movs	r1, r3
 800b778:	0010      	movs	r0, r2
 800b77a:	f7f4 fcd7 	bl	800012c <__udivsi3>
 800b77e:	0003      	movs	r3, r0
 800b780:	b29b      	uxth	r3, r3
 800b782:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b786:	2b0f      	cmp	r3, #15
 800b788:	d921      	bls.n	800b7ce <UART_SetConfig+0x482>
 800b78a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b78c:	2380      	movs	r3, #128	; 0x80
 800b78e:	025b      	lsls	r3, r3, #9
 800b790:	429a      	cmp	r2, r3
 800b792:	d21c      	bcs.n	800b7ce <UART_SetConfig+0x482>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b796:	b29a      	uxth	r2, r3
 800b798:	200e      	movs	r0, #14
 800b79a:	2418      	movs	r4, #24
 800b79c:	193b      	adds	r3, r7, r4
 800b79e:	181b      	adds	r3, r3, r0
 800b7a0:	210f      	movs	r1, #15
 800b7a2:	438a      	bics	r2, r1
 800b7a4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b7a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7a8:	085b      	lsrs	r3, r3, #1
 800b7aa:	b29b      	uxth	r3, r3
 800b7ac:	2207      	movs	r2, #7
 800b7ae:	4013      	ands	r3, r2
 800b7b0:	b299      	uxth	r1, r3
 800b7b2:	193b      	adds	r3, r7, r4
 800b7b4:	181b      	adds	r3, r3, r0
 800b7b6:	193a      	adds	r2, r7, r4
 800b7b8:	1812      	adds	r2, r2, r0
 800b7ba:	8812      	ldrh	r2, [r2, #0]
 800b7bc:	430a      	orrs	r2, r1
 800b7be:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800b7c0:	69fb      	ldr	r3, [r7, #28]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	193a      	adds	r2, r7, r4
 800b7c6:	1812      	adds	r2, r2, r0
 800b7c8:	8812      	ldrh	r2, [r2, #0]
 800b7ca:	60da      	str	r2, [r3, #12]
 800b7cc:	e061      	b.n	800b892 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800b7ce:	231a      	movs	r3, #26
 800b7d0:	2218      	movs	r2, #24
 800b7d2:	4694      	mov	ip, r2
 800b7d4:	44bc      	add	ip, r7
 800b7d6:	4463      	add	r3, ip
 800b7d8:	2201      	movs	r2, #1
 800b7da:	701a      	strb	r2, [r3, #0]
 800b7dc:	e059      	b.n	800b892 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b7de:	231b      	movs	r3, #27
 800b7e0:	2218      	movs	r2, #24
 800b7e2:	4694      	mov	ip, r2
 800b7e4:	44bc      	add	ip, r7
 800b7e6:	4463      	add	r3, ip
 800b7e8:	781b      	ldrb	r3, [r3, #0]
 800b7ea:	2b08      	cmp	r3, #8
 800b7ec:	d822      	bhi.n	800b834 <UART_SetConfig+0x4e8>
 800b7ee:	009a      	lsls	r2, r3, #2
 800b7f0:	4b34      	ldr	r3, [pc, #208]	; (800b8c4 <UART_SetConfig+0x578>)
 800b7f2:	18d3      	adds	r3, r2, r3
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b7f8:	f7fd ffa0 	bl	800973c <HAL_RCC_GetPCLK1Freq>
 800b7fc:	0003      	movs	r3, r0
 800b7fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b800:	e022      	b.n	800b848 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b802:	f7fd ffb1 	bl	8009768 <HAL_RCC_GetPCLK2Freq>
 800b806:	0003      	movs	r3, r0
 800b808:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b80a:	e01d      	b.n	800b848 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b80c:	4b2a      	ldr	r3, [pc, #168]	; (800b8b8 <UART_SetConfig+0x56c>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	2210      	movs	r2, #16
 800b812:	4013      	ands	r3, r2
 800b814:	d002      	beq.n	800b81c <UART_SetConfig+0x4d0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800b816:	4b29      	ldr	r3, [pc, #164]	; (800b8bc <UART_SetConfig+0x570>)
 800b818:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b81a:	e015      	b.n	800b848 <UART_SetConfig+0x4fc>
          pclk = (uint32_t) HSI_VALUE;
 800b81c:	4b28      	ldr	r3, [pc, #160]	; (800b8c0 <UART_SetConfig+0x574>)
 800b81e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b820:	e012      	b.n	800b848 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b822:	f7fd fedb 	bl	80095dc <HAL_RCC_GetSysClockFreq>
 800b826:	0003      	movs	r3, r0
 800b828:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b82a:	e00d      	b.n	800b848 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b82c:	2380      	movs	r3, #128	; 0x80
 800b82e:	021b      	lsls	r3, r3, #8
 800b830:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b832:	e009      	b.n	800b848 <UART_SetConfig+0x4fc>
      default:
        pclk = 0U;
 800b834:	2300      	movs	r3, #0
 800b836:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b838:	231a      	movs	r3, #26
 800b83a:	2218      	movs	r2, #24
 800b83c:	4694      	mov	ip, r2
 800b83e:	44bc      	add	ip, r7
 800b840:	4463      	add	r3, ip
 800b842:	2201      	movs	r2, #1
 800b844:	701a      	strb	r2, [r3, #0]
        break;
 800b846:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800b848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d021      	beq.n	800b892 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b84e:	69fb      	ldr	r3, [r7, #28]
 800b850:	685b      	ldr	r3, [r3, #4]
 800b852:	085a      	lsrs	r2, r3, #1
 800b854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b856:	18d2      	adds	r2, r2, r3
 800b858:	69fb      	ldr	r3, [r7, #28]
 800b85a:	685b      	ldr	r3, [r3, #4]
 800b85c:	0019      	movs	r1, r3
 800b85e:	0010      	movs	r0, r2
 800b860:	f7f4 fc64 	bl	800012c <__udivsi3>
 800b864:	0003      	movs	r3, r0
 800b866:	b29b      	uxth	r3, r3
 800b868:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b86a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b86c:	2b0f      	cmp	r3, #15
 800b86e:	d909      	bls.n	800b884 <UART_SetConfig+0x538>
 800b870:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b872:	2380      	movs	r3, #128	; 0x80
 800b874:	025b      	lsls	r3, r3, #9
 800b876:	429a      	cmp	r2, r3
 800b878:	d204      	bcs.n	800b884 <UART_SetConfig+0x538>
      {
        huart->Instance->BRR = usartdiv;
 800b87a:	69fb      	ldr	r3, [r7, #28]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b880:	60da      	str	r2, [r3, #12]
 800b882:	e006      	b.n	800b892 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800b884:	231a      	movs	r3, #26
 800b886:	2218      	movs	r2, #24
 800b888:	4694      	mov	ip, r2
 800b88a:	44bc      	add	ip, r7
 800b88c:	4463      	add	r3, ip
 800b88e:	2201      	movs	r2, #1
 800b890:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b892:	69fb      	ldr	r3, [r7, #28]
 800b894:	2200      	movs	r2, #0
 800b896:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800b898:	69fb      	ldr	r3, [r7, #28]
 800b89a:	2200      	movs	r2, #0
 800b89c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800b89e:	231a      	movs	r3, #26
 800b8a0:	2218      	movs	r2, #24
 800b8a2:	4694      	mov	ip, r2
 800b8a4:	44bc      	add	ip, r7
 800b8a6:	4463      	add	r3, ip
 800b8a8:	781b      	ldrb	r3, [r3, #0]
}
 800b8aa:	0018      	movs	r0, r3
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	b00e      	add	sp, #56	; 0x38
 800b8b0:	bdb0      	pop	{r4, r5, r7, pc}
 800b8b2:	46c0      	nop			; (mov r8, r8)
 800b8b4:	0801ef48 	.word	0x0801ef48
 800b8b8:	40021000 	.word	0x40021000
 800b8bc:	003d0900 	.word	0x003d0900
 800b8c0:	00f42400 	.word	0x00f42400
 800b8c4:	0801ef6c 	.word	0x0801ef6c

0800b8c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b082      	sub	sp, #8
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8d4:	2201      	movs	r2, #1
 800b8d6:	4013      	ands	r3, r2
 800b8d8:	d00b      	beq.n	800b8f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	685b      	ldr	r3, [r3, #4]
 800b8e0:	4a4a      	ldr	r2, [pc, #296]	; (800ba0c <UART_AdvFeatureConfig+0x144>)
 800b8e2:	4013      	ands	r3, r2
 800b8e4:	0019      	movs	r1, r3
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	430a      	orrs	r2, r1
 800b8f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8f6:	2202      	movs	r2, #2
 800b8f8:	4013      	ands	r3, r2
 800b8fa:	d00b      	beq.n	800b914 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	685b      	ldr	r3, [r3, #4]
 800b902:	4a43      	ldr	r2, [pc, #268]	; (800ba10 <UART_AdvFeatureConfig+0x148>)
 800b904:	4013      	ands	r3, r2
 800b906:	0019      	movs	r1, r3
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	430a      	orrs	r2, r1
 800b912:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b918:	2204      	movs	r2, #4
 800b91a:	4013      	ands	r3, r2
 800b91c:	d00b      	beq.n	800b936 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	685b      	ldr	r3, [r3, #4]
 800b924:	4a3b      	ldr	r2, [pc, #236]	; (800ba14 <UART_AdvFeatureConfig+0x14c>)
 800b926:	4013      	ands	r3, r2
 800b928:	0019      	movs	r1, r3
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	430a      	orrs	r2, r1
 800b934:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b93a:	2208      	movs	r2, #8
 800b93c:	4013      	ands	r3, r2
 800b93e:	d00b      	beq.n	800b958 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	685b      	ldr	r3, [r3, #4]
 800b946:	4a34      	ldr	r2, [pc, #208]	; (800ba18 <UART_AdvFeatureConfig+0x150>)
 800b948:	4013      	ands	r3, r2
 800b94a:	0019      	movs	r1, r3
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	430a      	orrs	r2, r1
 800b956:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b95c:	2210      	movs	r2, #16
 800b95e:	4013      	ands	r3, r2
 800b960:	d00b      	beq.n	800b97a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	689b      	ldr	r3, [r3, #8]
 800b968:	4a2c      	ldr	r2, [pc, #176]	; (800ba1c <UART_AdvFeatureConfig+0x154>)
 800b96a:	4013      	ands	r3, r2
 800b96c:	0019      	movs	r1, r3
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	430a      	orrs	r2, r1
 800b978:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b97e:	2220      	movs	r2, #32
 800b980:	4013      	ands	r3, r2
 800b982:	d00b      	beq.n	800b99c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	689b      	ldr	r3, [r3, #8]
 800b98a:	4a25      	ldr	r2, [pc, #148]	; (800ba20 <UART_AdvFeatureConfig+0x158>)
 800b98c:	4013      	ands	r3, r2
 800b98e:	0019      	movs	r1, r3
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	430a      	orrs	r2, r1
 800b99a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9a0:	2240      	movs	r2, #64	; 0x40
 800b9a2:	4013      	ands	r3, r2
 800b9a4:	d01d      	beq.n	800b9e2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	685b      	ldr	r3, [r3, #4]
 800b9ac:	4a1d      	ldr	r2, [pc, #116]	; (800ba24 <UART_AdvFeatureConfig+0x15c>)
 800b9ae:	4013      	ands	r3, r2
 800b9b0:	0019      	movs	r1, r3
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	430a      	orrs	r2, r1
 800b9bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b9c2:	2380      	movs	r3, #128	; 0x80
 800b9c4:	035b      	lsls	r3, r3, #13
 800b9c6:	429a      	cmp	r2, r3
 800b9c8:	d10b      	bne.n	800b9e2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	685b      	ldr	r3, [r3, #4]
 800b9d0:	4a15      	ldr	r2, [pc, #84]	; (800ba28 <UART_AdvFeatureConfig+0x160>)
 800b9d2:	4013      	ands	r3, r2
 800b9d4:	0019      	movs	r1, r3
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	430a      	orrs	r2, r1
 800b9e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9e6:	2280      	movs	r2, #128	; 0x80
 800b9e8:	4013      	ands	r3, r2
 800b9ea:	d00b      	beq.n	800ba04 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	685b      	ldr	r3, [r3, #4]
 800b9f2:	4a0e      	ldr	r2, [pc, #56]	; (800ba2c <UART_AdvFeatureConfig+0x164>)
 800b9f4:	4013      	ands	r3, r2
 800b9f6:	0019      	movs	r1, r3
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	430a      	orrs	r2, r1
 800ba02:	605a      	str	r2, [r3, #4]
  }
}
 800ba04:	46c0      	nop			; (mov r8, r8)
 800ba06:	46bd      	mov	sp, r7
 800ba08:	b002      	add	sp, #8
 800ba0a:	bd80      	pop	{r7, pc}
 800ba0c:	fffdffff 	.word	0xfffdffff
 800ba10:	fffeffff 	.word	0xfffeffff
 800ba14:	fffbffff 	.word	0xfffbffff
 800ba18:	ffff7fff 	.word	0xffff7fff
 800ba1c:	ffffefff 	.word	0xffffefff
 800ba20:	ffffdfff 	.word	0xffffdfff
 800ba24:	ffefffff 	.word	0xffefffff
 800ba28:	ff9fffff 	.word	0xff9fffff
 800ba2c:	fff7ffff 	.word	0xfff7ffff

0800ba30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b086      	sub	sp, #24
 800ba34:	af02      	add	r7, sp, #8
 800ba36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2280      	movs	r2, #128	; 0x80
 800ba3c:	2100      	movs	r1, #0
 800ba3e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ba40:	f7f9 fb87 	bl	8005152 <HAL_GetTick>
 800ba44:	0003      	movs	r3, r0
 800ba46:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	2208      	movs	r2, #8
 800ba50:	4013      	ands	r3, r2
 800ba52:	2b08      	cmp	r3, #8
 800ba54:	d10c      	bne.n	800ba70 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	2280      	movs	r2, #128	; 0x80
 800ba5a:	0391      	lsls	r1, r2, #14
 800ba5c:	6878      	ldr	r0, [r7, #4]
 800ba5e:	4a17      	ldr	r2, [pc, #92]	; (800babc <UART_CheckIdleState+0x8c>)
 800ba60:	9200      	str	r2, [sp, #0]
 800ba62:	2200      	movs	r2, #0
 800ba64:	f000 f82c 	bl	800bac0 <UART_WaitOnFlagUntilTimeout>
 800ba68:	1e03      	subs	r3, r0, #0
 800ba6a:	d001      	beq.n	800ba70 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ba6c:	2303      	movs	r3, #3
 800ba6e:	e021      	b.n	800bab4 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	2204      	movs	r2, #4
 800ba78:	4013      	ands	r3, r2
 800ba7a:	2b04      	cmp	r3, #4
 800ba7c:	d10c      	bne.n	800ba98 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	2280      	movs	r2, #128	; 0x80
 800ba82:	03d1      	lsls	r1, r2, #15
 800ba84:	6878      	ldr	r0, [r7, #4]
 800ba86:	4a0d      	ldr	r2, [pc, #52]	; (800babc <UART_CheckIdleState+0x8c>)
 800ba88:	9200      	str	r2, [sp, #0]
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	f000 f818 	bl	800bac0 <UART_WaitOnFlagUntilTimeout>
 800ba90:	1e03      	subs	r3, r0, #0
 800ba92:	d001      	beq.n	800ba98 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ba94:	2303      	movs	r3, #3
 800ba96:	e00d      	b.n	800bab4 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2220      	movs	r2, #32
 800ba9c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	2220      	movs	r2, #32
 800baa2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2200      	movs	r2, #0
 800baa8:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	2274      	movs	r2, #116	; 0x74
 800baae:	2100      	movs	r1, #0
 800bab0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bab2:	2300      	movs	r3, #0
}
 800bab4:	0018      	movs	r0, r3
 800bab6:	46bd      	mov	sp, r7
 800bab8:	b004      	add	sp, #16
 800baba:	bd80      	pop	{r7, pc}
 800babc:	01ffffff 	.word	0x01ffffff

0800bac0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b084      	sub	sp, #16
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	60f8      	str	r0, [r7, #12]
 800bac8:	60b9      	str	r1, [r7, #8]
 800baca:	603b      	str	r3, [r7, #0]
 800bacc:	1dfb      	adds	r3, r7, #7
 800bace:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bad0:	e05e      	b.n	800bb90 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bad2:	69bb      	ldr	r3, [r7, #24]
 800bad4:	3301      	adds	r3, #1
 800bad6:	d05b      	beq.n	800bb90 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bad8:	f7f9 fb3b 	bl	8005152 <HAL_GetTick>
 800badc:	0002      	movs	r2, r0
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	1ad3      	subs	r3, r2, r3
 800bae2:	69ba      	ldr	r2, [r7, #24]
 800bae4:	429a      	cmp	r2, r3
 800bae6:	d302      	bcc.n	800baee <UART_WaitOnFlagUntilTimeout+0x2e>
 800bae8:	69bb      	ldr	r3, [r7, #24]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d11b      	bne.n	800bb26 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	681a      	ldr	r2, [r3, #0]
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	492f      	ldr	r1, [pc, #188]	; (800bbb8 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800bafa:	400a      	ands	r2, r1
 800bafc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	689a      	ldr	r2, [r3, #8]
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	2101      	movs	r1, #1
 800bb0a:	438a      	bics	r2, r1
 800bb0c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	2220      	movs	r2, #32
 800bb12:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	2220      	movs	r2, #32
 800bb18:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	2274      	movs	r2, #116	; 0x74
 800bb1e:	2100      	movs	r1, #0
 800bb20:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800bb22:	2303      	movs	r3, #3
 800bb24:	e044      	b.n	800bbb0 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	2204      	movs	r2, #4
 800bb2e:	4013      	ands	r3, r2
 800bb30:	d02e      	beq.n	800bb90 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	69da      	ldr	r2, [r3, #28]
 800bb38:	2380      	movs	r3, #128	; 0x80
 800bb3a:	011b      	lsls	r3, r3, #4
 800bb3c:	401a      	ands	r2, r3
 800bb3e:	2380      	movs	r3, #128	; 0x80
 800bb40:	011b      	lsls	r3, r3, #4
 800bb42:	429a      	cmp	r2, r3
 800bb44:	d124      	bne.n	800bb90 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	2280      	movs	r2, #128	; 0x80
 800bb4c:	0112      	lsls	r2, r2, #4
 800bb4e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	681a      	ldr	r2, [r3, #0]
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	4917      	ldr	r1, [pc, #92]	; (800bbb8 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800bb5c:	400a      	ands	r2, r1
 800bb5e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	689a      	ldr	r2, [r3, #8]
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	2101      	movs	r1, #1
 800bb6c:	438a      	bics	r2, r1
 800bb6e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	2220      	movs	r2, #32
 800bb74:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	2220      	movs	r2, #32
 800bb7a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	2280      	movs	r2, #128	; 0x80
 800bb80:	2120      	movs	r1, #32
 800bb82:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	2274      	movs	r2, #116	; 0x74
 800bb88:	2100      	movs	r1, #0
 800bb8a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800bb8c:	2303      	movs	r3, #3
 800bb8e:	e00f      	b.n	800bbb0 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	69db      	ldr	r3, [r3, #28]
 800bb96:	68ba      	ldr	r2, [r7, #8]
 800bb98:	4013      	ands	r3, r2
 800bb9a:	68ba      	ldr	r2, [r7, #8]
 800bb9c:	1ad3      	subs	r3, r2, r3
 800bb9e:	425a      	negs	r2, r3
 800bba0:	4153      	adcs	r3, r2
 800bba2:	b2db      	uxtb	r3, r3
 800bba4:	001a      	movs	r2, r3
 800bba6:	1dfb      	adds	r3, r7, #7
 800bba8:	781b      	ldrb	r3, [r3, #0]
 800bbaa:	429a      	cmp	r2, r3
 800bbac:	d091      	beq.n	800bad2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bbae:	2300      	movs	r3, #0
}
 800bbb0:	0018      	movs	r0, r3
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	b004      	add	sp, #16
 800bbb6:	bd80      	pop	{r7, pc}
 800bbb8:	fffffe5f 	.word	0xfffffe5f

0800bbbc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b084      	sub	sp, #16
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	60f8      	str	r0, [r7, #12]
 800bbc4:	60b9      	str	r1, [r7, #8]
 800bbc6:	1dbb      	adds	r3, r7, #6
 800bbc8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	68ba      	ldr	r2, [r7, #8]
 800bbce:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	1dba      	adds	r2, r7, #6
 800bbd4:	2158      	movs	r1, #88	; 0x58
 800bbd6:	8812      	ldrh	r2, [r2, #0]
 800bbd8:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	1dba      	adds	r2, r7, #6
 800bbde:	215a      	movs	r1, #90	; 0x5a
 800bbe0:	8812      	ldrh	r2, [r2, #0]
 800bbe2:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	689a      	ldr	r2, [r3, #8]
 800bbee:	2380      	movs	r3, #128	; 0x80
 800bbf0:	015b      	lsls	r3, r3, #5
 800bbf2:	429a      	cmp	r2, r3
 800bbf4:	d10d      	bne.n	800bc12 <UART_Start_Receive_IT+0x56>
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	691b      	ldr	r3, [r3, #16]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d104      	bne.n	800bc08 <UART_Start_Receive_IT+0x4c>
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	225c      	movs	r2, #92	; 0x5c
 800bc02:	4932      	ldr	r1, [pc, #200]	; (800bccc <UART_Start_Receive_IT+0x110>)
 800bc04:	5299      	strh	r1, [r3, r2]
 800bc06:	e02e      	b.n	800bc66 <UART_Start_Receive_IT+0xaa>
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	225c      	movs	r2, #92	; 0x5c
 800bc0c:	21ff      	movs	r1, #255	; 0xff
 800bc0e:	5299      	strh	r1, [r3, r2]
 800bc10:	e029      	b.n	800bc66 <UART_Start_Receive_IT+0xaa>
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	689b      	ldr	r3, [r3, #8]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d10d      	bne.n	800bc36 <UART_Start_Receive_IT+0x7a>
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	691b      	ldr	r3, [r3, #16]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d104      	bne.n	800bc2c <UART_Start_Receive_IT+0x70>
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	225c      	movs	r2, #92	; 0x5c
 800bc26:	21ff      	movs	r1, #255	; 0xff
 800bc28:	5299      	strh	r1, [r3, r2]
 800bc2a:	e01c      	b.n	800bc66 <UART_Start_Receive_IT+0xaa>
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	225c      	movs	r2, #92	; 0x5c
 800bc30:	217f      	movs	r1, #127	; 0x7f
 800bc32:	5299      	strh	r1, [r3, r2]
 800bc34:	e017      	b.n	800bc66 <UART_Start_Receive_IT+0xaa>
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	689a      	ldr	r2, [r3, #8]
 800bc3a:	2380      	movs	r3, #128	; 0x80
 800bc3c:	055b      	lsls	r3, r3, #21
 800bc3e:	429a      	cmp	r2, r3
 800bc40:	d10d      	bne.n	800bc5e <UART_Start_Receive_IT+0xa2>
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	691b      	ldr	r3, [r3, #16]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d104      	bne.n	800bc54 <UART_Start_Receive_IT+0x98>
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	225c      	movs	r2, #92	; 0x5c
 800bc4e:	217f      	movs	r1, #127	; 0x7f
 800bc50:	5299      	strh	r1, [r3, r2]
 800bc52:	e008      	b.n	800bc66 <UART_Start_Receive_IT+0xaa>
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	225c      	movs	r2, #92	; 0x5c
 800bc58:	213f      	movs	r1, #63	; 0x3f
 800bc5a:	5299      	strh	r1, [r3, r2]
 800bc5c:	e003      	b.n	800bc66 <UART_Start_Receive_IT+0xaa>
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	225c      	movs	r2, #92	; 0x5c
 800bc62:	2100      	movs	r1, #0
 800bc64:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	2280      	movs	r2, #128	; 0x80
 800bc6a:	2100      	movs	r1, #0
 800bc6c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	2222      	movs	r2, #34	; 0x22
 800bc72:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	689a      	ldr	r2, [r3, #8]
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	2101      	movs	r1, #1
 800bc80:	430a      	orrs	r2, r1
 800bc82:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	689a      	ldr	r2, [r3, #8]
 800bc88:	2380      	movs	r3, #128	; 0x80
 800bc8a:	015b      	lsls	r3, r3, #5
 800bc8c:	429a      	cmp	r2, r3
 800bc8e:	d107      	bne.n	800bca0 <UART_Start_Receive_IT+0xe4>
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	691b      	ldr	r3, [r3, #16]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d103      	bne.n	800bca0 <UART_Start_Receive_IT+0xe4>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	4a0d      	ldr	r2, [pc, #52]	; (800bcd0 <UART_Start_Receive_IT+0x114>)
 800bc9c:	665a      	str	r2, [r3, #100]	; 0x64
 800bc9e:	e002      	b.n	800bca6 <UART_Start_Receive_IT+0xea>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	4a0c      	ldr	r2, [pc, #48]	; (800bcd4 <UART_Start_Receive_IT+0x118>)
 800bca4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	2274      	movs	r2, #116	; 0x74
 800bcaa:	2100      	movs	r1, #0
 800bcac:	5499      	strb	r1, [r3, r2]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	681a      	ldr	r2, [r3, #0]
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	2190      	movs	r1, #144	; 0x90
 800bcba:	0049      	lsls	r1, r1, #1
 800bcbc:	430a      	orrs	r2, r1
 800bcbe:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800bcc0:	2300      	movs	r3, #0
}
 800bcc2:	0018      	movs	r0, r3
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	b004      	add	sp, #16
 800bcc8:	bd80      	pop	{r7, pc}
 800bcca:	46c0      	nop			; (mov r8, r8)
 800bccc:	000001ff 	.word	0x000001ff
 800bcd0:	0800bfa1 	.word	0x0800bfa1
 800bcd4:	0800beb9 	.word	0x0800beb9

0800bcd8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b082      	sub	sp, #8
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	681a      	ldr	r2, [r3, #0]
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	21c0      	movs	r1, #192	; 0xc0
 800bcec:	438a      	bics	r2, r1
 800bcee:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2220      	movs	r2, #32
 800bcf4:	679a      	str	r2, [r3, #120]	; 0x78
}
 800bcf6:	46c0      	nop			; (mov r8, r8)
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	b002      	add	sp, #8
 800bcfc:	bd80      	pop	{r7, pc}
	...

0800bd00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b082      	sub	sp, #8
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	681a      	ldr	r2, [r3, #0]
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	4912      	ldr	r1, [pc, #72]	; (800bd5c <UART_EndRxTransfer+0x5c>)
 800bd14:	400a      	ands	r2, r1
 800bd16:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	689a      	ldr	r2, [r3, #8]
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	2101      	movs	r1, #1
 800bd24:	438a      	bics	r2, r1
 800bd26:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bd2c:	2b01      	cmp	r3, #1
 800bd2e:	d107      	bne.n	800bd40 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	681a      	ldr	r2, [r3, #0]
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	2110      	movs	r1, #16
 800bd3c:	438a      	bics	r2, r1
 800bd3e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2220      	movs	r2, #32
 800bd44:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	2200      	movs	r2, #0
 800bd4a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2200      	movs	r2, #0
 800bd50:	665a      	str	r2, [r3, #100]	; 0x64
}
 800bd52:	46c0      	nop			; (mov r8, r8)
 800bd54:	46bd      	mov	sp, r7
 800bd56:	b002      	add	sp, #8
 800bd58:	bd80      	pop	{r7, pc}
 800bd5a:	46c0      	nop			; (mov r8, r8)
 800bd5c:	fffffedf 	.word	0xfffffedf

0800bd60 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b084      	sub	sp, #16
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd6c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	2220      	movs	r2, #32
 800bd76:	4013      	ands	r3, r2
 800bd78:	d114      	bne.n	800bda4 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0U;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	2252      	movs	r2, #82	; 0x52
 800bd7e:	2100      	movs	r1, #0
 800bd80:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	689a      	ldr	r2, [r3, #8]
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	2180      	movs	r1, #128	; 0x80
 800bd8e:	438a      	bics	r2, r1
 800bd90:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	681a      	ldr	r2, [r3, #0]
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	2140      	movs	r1, #64	; 0x40
 800bd9e:	430a      	orrs	r2, r1
 800bda0:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bda2:	e003      	b.n	800bdac <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	0018      	movs	r0, r3
 800bda8:	f7f9 fc3e 	bl	8005628 <HAL_UART_TxCpltCallback>
}
 800bdac:	46c0      	nop			; (mov r8, r8)
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	b004      	add	sp, #16
 800bdb2:	bd80      	pop	{r7, pc}

0800bdb4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b084      	sub	sp, #16
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdc0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	0018      	movs	r0, r3
 800bdc6:	f7ff faa5 	bl	800b314 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bdca:	46c0      	nop			; (mov r8, r8)
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	b004      	add	sp, #16
 800bdd0:	bd80      	pop	{r7, pc}

0800bdd2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bdd2:	b580      	push	{r7, lr}
 800bdd4:	b086      	sub	sp, #24
 800bdd6:	af00      	add	r7, sp, #0
 800bdd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdde:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bde0:	697b      	ldr	r3, [r7, #20]
 800bde2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bde4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bde6:	697b      	ldr	r3, [r7, #20]
 800bde8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bdea:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bdec:	697b      	ldr	r3, [r7, #20]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	689b      	ldr	r3, [r3, #8]
 800bdf2:	2280      	movs	r2, #128	; 0x80
 800bdf4:	4013      	ands	r3, r2
 800bdf6:	2b80      	cmp	r3, #128	; 0x80
 800bdf8:	d10a      	bne.n	800be10 <UART_DMAError+0x3e>
 800bdfa:	693b      	ldr	r3, [r7, #16]
 800bdfc:	2b21      	cmp	r3, #33	; 0x21
 800bdfe:	d107      	bne.n	800be10 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800be00:	697b      	ldr	r3, [r7, #20]
 800be02:	2252      	movs	r2, #82	; 0x52
 800be04:	2100      	movs	r1, #0
 800be06:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800be08:	697b      	ldr	r3, [r7, #20]
 800be0a:	0018      	movs	r0, r3
 800be0c:	f7ff ff64 	bl	800bcd8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800be10:	697b      	ldr	r3, [r7, #20]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	689b      	ldr	r3, [r3, #8]
 800be16:	2240      	movs	r2, #64	; 0x40
 800be18:	4013      	ands	r3, r2
 800be1a:	2b40      	cmp	r3, #64	; 0x40
 800be1c:	d10a      	bne.n	800be34 <UART_DMAError+0x62>
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	2b22      	cmp	r3, #34	; 0x22
 800be22:	d107      	bne.n	800be34 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800be24:	697b      	ldr	r3, [r7, #20]
 800be26:	225a      	movs	r2, #90	; 0x5a
 800be28:	2100      	movs	r1, #0
 800be2a:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800be2c:	697b      	ldr	r3, [r7, #20]
 800be2e:	0018      	movs	r0, r3
 800be30:	f7ff ff66 	bl	800bd00 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800be34:	697b      	ldr	r3, [r7, #20]
 800be36:	2280      	movs	r2, #128	; 0x80
 800be38:	589b      	ldr	r3, [r3, r2]
 800be3a:	2210      	movs	r2, #16
 800be3c:	431a      	orrs	r2, r3
 800be3e:	697b      	ldr	r3, [r7, #20]
 800be40:	2180      	movs	r1, #128	; 0x80
 800be42:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800be44:	697b      	ldr	r3, [r7, #20]
 800be46:	0018      	movs	r0, r3
 800be48:	f7ff fa6c 	bl	800b324 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800be4c:	46c0      	nop			; (mov r8, r8)
 800be4e:	46bd      	mov	sp, r7
 800be50:	b006      	add	sp, #24
 800be52:	bd80      	pop	{r7, pc}

0800be54 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b084      	sub	sp, #16
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be60:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	225a      	movs	r2, #90	; 0x5a
 800be66:	2100      	movs	r1, #0
 800be68:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	2252      	movs	r2, #82	; 0x52
 800be6e:	2100      	movs	r1, #0
 800be70:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	0018      	movs	r0, r3
 800be76:	f7ff fa55 	bl	800b324 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800be7a:	46c0      	nop			; (mov r8, r8)
 800be7c:	46bd      	mov	sp, r7
 800be7e:	b004      	add	sp, #16
 800be80:	bd80      	pop	{r7, pc}

0800be82 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800be82:	b580      	push	{r7, lr}
 800be84:	b082      	sub	sp, #8
 800be86:	af00      	add	r7, sp, #0
 800be88:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	681a      	ldr	r2, [r3, #0]
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	2140      	movs	r1, #64	; 0x40
 800be96:	438a      	bics	r2, r1
 800be98:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2220      	movs	r2, #32
 800be9e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2200      	movs	r2, #0
 800bea4:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	0018      	movs	r0, r3
 800beaa:	f7f9 fbbd 	bl	8005628 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800beae:	46c0      	nop			; (mov r8, r8)
 800beb0:	46bd      	mov	sp, r7
 800beb2:	b002      	add	sp, #8
 800beb4:	bd80      	pop	{r7, pc}
	...

0800beb8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b084      	sub	sp, #16
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800bec0:	200e      	movs	r0, #14
 800bec2:	183b      	adds	r3, r7, r0
 800bec4:	687a      	ldr	r2, [r7, #4]
 800bec6:	215c      	movs	r1, #92	; 0x5c
 800bec8:	5a52      	ldrh	r2, [r2, r1]
 800beca:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bed0:	2b22      	cmp	r3, #34	; 0x22
 800bed2:	d157      	bne.n	800bf84 <UART_RxISR_8BIT+0xcc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800beda:	210c      	movs	r1, #12
 800bedc:	187b      	adds	r3, r7, r1
 800bede:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800bee0:	187b      	adds	r3, r7, r1
 800bee2:	881b      	ldrh	r3, [r3, #0]
 800bee4:	b2da      	uxtb	r2, r3
 800bee6:	183b      	adds	r3, r7, r0
 800bee8:	881b      	ldrh	r3, [r3, #0]
 800beea:	b2d9      	uxtb	r1, r3
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bef0:	400a      	ands	r2, r1
 800bef2:	b2d2      	uxtb	r2, r2
 800bef4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800befa:	1c5a      	adds	r2, r3, #1
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	225a      	movs	r2, #90	; 0x5a
 800bf04:	5a9b      	ldrh	r3, [r3, r2]
 800bf06:	b29b      	uxth	r3, r3
 800bf08:	3b01      	subs	r3, #1
 800bf0a:	b299      	uxth	r1, r3
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	225a      	movs	r2, #90	; 0x5a
 800bf10:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	225a      	movs	r2, #90	; 0x5a
 800bf16:	5a9b      	ldrh	r3, [r3, r2]
 800bf18:	b29b      	uxth	r3, r3
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d13a      	bne.n	800bf94 <UART_RxISR_8BIT+0xdc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	681a      	ldr	r2, [r3, #0]
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	491c      	ldr	r1, [pc, #112]	; (800bf9c <UART_RxISR_8BIT+0xe4>)
 800bf2a:	400a      	ands	r2, r1
 800bf2c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	689a      	ldr	r2, [r3, #8]
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	2101      	movs	r1, #1
 800bf3a:	438a      	bics	r2, r1
 800bf3c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2220      	movs	r2, #32
 800bf42:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2200      	movs	r2, #0
 800bf48:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bf4e:	2b01      	cmp	r3, #1
 800bf50:	d110      	bne.n	800bf74 <UART_RxISR_8BIT+0xbc>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	681a      	ldr	r2, [r3, #0]
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	2110      	movs	r1, #16
 800bf5e:	438a      	bics	r2, r1
 800bf60:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	2258      	movs	r2, #88	; 0x58
 800bf66:	5a9a      	ldrh	r2, [r3, r2]
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	0011      	movs	r1, r2
 800bf6c:	0018      	movs	r0, r3
 800bf6e:	f7ff f9e1 	bl	800b334 <HAL_UARTEx_RxEventCallback>
 800bf72:	e003      	b.n	800bf7c <UART_RxISR_8BIT+0xc4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	0018      	movs	r0, r3
 800bf78:	f7f9 fb64 	bl	8005644 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2200      	movs	r2, #0
 800bf80:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bf82:	e007      	b.n	800bf94 <UART_RxISR_8BIT+0xdc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	699a      	ldr	r2, [r3, #24]
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	2108      	movs	r1, #8
 800bf90:	430a      	orrs	r2, r1
 800bf92:	619a      	str	r2, [r3, #24]
}
 800bf94:	46c0      	nop			; (mov r8, r8)
 800bf96:	46bd      	mov	sp, r7
 800bf98:	b004      	add	sp, #16
 800bf9a:	bd80      	pop	{r7, pc}
 800bf9c:	fffffedf 	.word	0xfffffedf

0800bfa0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b084      	sub	sp, #16
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800bfa8:	200e      	movs	r0, #14
 800bfaa:	183b      	adds	r3, r7, r0
 800bfac:	687a      	ldr	r2, [r7, #4]
 800bfae:	215c      	movs	r1, #92	; 0x5c
 800bfb0:	5a52      	ldrh	r2, [r2, r1]
 800bfb2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bfb8:	2b22      	cmp	r3, #34	; 0x22
 800bfba:	d157      	bne.n	800c06c <UART_RxISR_16BIT+0xcc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bfc2:	210c      	movs	r1, #12
 800bfc4:	187b      	adds	r3, r7, r1
 800bfc6:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfcc:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800bfce:	187b      	adds	r3, r7, r1
 800bfd0:	183a      	adds	r2, r7, r0
 800bfd2:	881b      	ldrh	r3, [r3, #0]
 800bfd4:	8812      	ldrh	r2, [r2, #0]
 800bfd6:	4013      	ands	r3, r2
 800bfd8:	b29a      	uxth	r2, r3
 800bfda:	68bb      	ldr	r3, [r7, #8]
 800bfdc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfe2:	1c9a      	adds	r2, r3, #2
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	225a      	movs	r2, #90	; 0x5a
 800bfec:	5a9b      	ldrh	r3, [r3, r2]
 800bfee:	b29b      	uxth	r3, r3
 800bff0:	3b01      	subs	r3, #1
 800bff2:	b299      	uxth	r1, r3
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	225a      	movs	r2, #90	; 0x5a
 800bff8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	225a      	movs	r2, #90	; 0x5a
 800bffe:	5a9b      	ldrh	r3, [r3, r2]
 800c000:	b29b      	uxth	r3, r3
 800c002:	2b00      	cmp	r3, #0
 800c004:	d13a      	bne.n	800c07c <UART_RxISR_16BIT+0xdc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	681a      	ldr	r2, [r3, #0]
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	491c      	ldr	r1, [pc, #112]	; (800c084 <UART_RxISR_16BIT+0xe4>)
 800c012:	400a      	ands	r2, r1
 800c014:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	689a      	ldr	r2, [r3, #8]
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	2101      	movs	r1, #1
 800c022:	438a      	bics	r2, r1
 800c024:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2220      	movs	r2, #32
 800c02a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2200      	movs	r2, #0
 800c030:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c036:	2b01      	cmp	r3, #1
 800c038:	d110      	bne.n	800c05c <UART_RxISR_16BIT+0xbc>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	681a      	ldr	r2, [r3, #0]
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	2110      	movs	r1, #16
 800c046:	438a      	bics	r2, r1
 800c048:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	2258      	movs	r2, #88	; 0x58
 800c04e:	5a9a      	ldrh	r2, [r3, r2]
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	0011      	movs	r1, r2
 800c054:	0018      	movs	r0, r3
 800c056:	f7ff f96d 	bl	800b334 <HAL_UARTEx_RxEventCallback>
 800c05a:	e003      	b.n	800c064 <UART_RxISR_16BIT+0xc4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	0018      	movs	r0, r3
 800c060:	f7f9 faf0 	bl	8005644 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2200      	movs	r2, #0
 800c068:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c06a:	e007      	b.n	800c07c <UART_RxISR_16BIT+0xdc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	699a      	ldr	r2, [r3, #24]
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	2108      	movs	r1, #8
 800c078:	430a      	orrs	r2, r1
 800c07a:	619a      	str	r2, [r3, #24]
}
 800c07c:	46c0      	nop			; (mov r8, r8)
 800c07e:	46bd      	mov	sp, r7
 800c080:	b004      	add	sp, #16
 800c082:	bd80      	pop	{r7, pc}
 800c084:	fffffedf 	.word	0xfffffedf

0800c088 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b082      	sub	sp, #8
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c090:	46c0      	nop			; (mov r8, r8)
 800c092:	46bd      	mov	sp, r7
 800c094:	b002      	add	sp, #8
 800c096:	bd80      	pop	{r7, pc}

0800c098 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b088      	sub	sp, #32
 800c09c:	af02      	add	r7, sp, #8
 800c09e:	60f8      	str	r0, [r7, #12]
 800c0a0:	1d3b      	adds	r3, r7, #4
 800c0a2:	6019      	str	r1, [r3, #0]
 800c0a4:	605a      	str	r2, [r3, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c0a6:	2317      	movs	r3, #23
 800c0a8:	18fb      	adds	r3, r7, r3
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	701a      	strb	r2, [r3, #0]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	2274      	movs	r2, #116	; 0x74
 800c0b2:	5c9b      	ldrb	r3, [r3, r2]
 800c0b4:	2b01      	cmp	r3, #1
 800c0b6:	d101      	bne.n	800c0bc <HAL_UARTEx_StopModeWakeUpSourceConfig+0x24>
 800c0b8:	2302      	movs	r3, #2
 800c0ba:	e04a      	b.n	800c152 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xba>
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	2274      	movs	r2, #116	; 0x74
 800c0c0:	2101      	movs	r1, #1
 800c0c2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	2224      	movs	r2, #36	; 0x24
 800c0c8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	681a      	ldr	r2, [r3, #0]
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	2101      	movs	r1, #1
 800c0d6:	438a      	bics	r2, r1
 800c0d8:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	689b      	ldr	r3, [r3, #8]
 800c0e0:	4a1e      	ldr	r2, [pc, #120]	; (800c15c <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc4>)
 800c0e2:	4013      	ands	r3, r2
 800c0e4:	0019      	movs	r1, r3
 800c0e6:	1d3b      	adds	r3, r7, #4
 800c0e8:	681a      	ldr	r2, [r3, #0]
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	430a      	orrs	r2, r1
 800c0f0:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800c0f2:	1d3b      	adds	r3, r7, #4
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d105      	bne.n	800c106 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x6e>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800c0fa:	1d3b      	adds	r3, r7, #4
 800c0fc:	68f8      	ldr	r0, [r7, #12]
 800c0fe:	6819      	ldr	r1, [r3, #0]
 800c100:	685a      	ldr	r2, [r3, #4]
 800c102:	f000 f84f 	bl	800c1a4 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	681a      	ldr	r2, [r3, #0]
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	2101      	movs	r1, #1
 800c112:	430a      	orrs	r2, r1
 800c114:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c116:	f7f9 f81c 	bl	8005152 <HAL_GetTick>
 800c11a:	0003      	movs	r3, r0
 800c11c:	613b      	str	r3, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c11e:	693b      	ldr	r3, [r7, #16]
 800c120:	2280      	movs	r2, #128	; 0x80
 800c122:	03d1      	lsls	r1, r2, #15
 800c124:	68f8      	ldr	r0, [r7, #12]
 800c126:	4a0e      	ldr	r2, [pc, #56]	; (800c160 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc8>)
 800c128:	9200      	str	r2, [sp, #0]
 800c12a:	2200      	movs	r2, #0
 800c12c:	f7ff fcc8 	bl	800bac0 <UART_WaitOnFlagUntilTimeout>
 800c130:	1e03      	subs	r3, r0, #0
 800c132:	d004      	beq.n	800c13e <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa6>
  {
    status = HAL_TIMEOUT;
 800c134:	2317      	movs	r3, #23
 800c136:	18fb      	adds	r3, r7, r3
 800c138:	2203      	movs	r2, #3
 800c13a:	701a      	strb	r2, [r3, #0]
 800c13c:	e002      	b.n	800c144 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xac>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	2220      	movs	r2, #32
 800c142:	679a      	str	r2, [r3, #120]	; 0x78
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	2274      	movs	r2, #116	; 0x74
 800c148:	2100      	movs	r1, #0
 800c14a:	5499      	strb	r1, [r3, r2]

  return status;
 800c14c:	2317      	movs	r3, #23
 800c14e:	18fb      	adds	r3, r7, r3
 800c150:	781b      	ldrb	r3, [r3, #0]
}
 800c152:	0018      	movs	r0, r3
 800c154:	46bd      	mov	sp, r7
 800c156:	b006      	add	sp, #24
 800c158:	bd80      	pop	{r7, pc}
 800c15a:	46c0      	nop			; (mov r8, r8)
 800c15c:	ffcfffff 	.word	0xffcfffff
 800c160:	01ffffff 	.word	0x01ffffff

0800c164 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b082      	sub	sp, #8
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2274      	movs	r2, #116	; 0x74
 800c170:	5c9b      	ldrb	r3, [r3, r2]
 800c172:	2b01      	cmp	r3, #1
 800c174:	d101      	bne.n	800c17a <HAL_UARTEx_EnableStopMode+0x16>
 800c176:	2302      	movs	r3, #2
 800c178:	e010      	b.n	800c19c <HAL_UARTEx_EnableStopMode+0x38>
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	2274      	movs	r2, #116	; 0x74
 800c17e:	2101      	movs	r1, #1
 800c180:	5499      	strb	r1, [r3, r2]

  /* Set UESM bit */
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	681a      	ldr	r2, [r3, #0]
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	2102      	movs	r1, #2
 800c18e:	430a      	orrs	r2, r1
 800c190:	601a      	str	r2, [r3, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	2274      	movs	r2, #116	; 0x74
 800c196:	2100      	movs	r1, #0
 800c198:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c19a:	2300      	movs	r3, #0
}
 800c19c:	0018      	movs	r0, r3
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	b002      	add	sp, #8
 800c1a2:	bd80      	pop	{r7, pc}

0800c1a4 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b084      	sub	sp, #16
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	60f8      	str	r0, [r7, #12]
 800c1ac:	1d3b      	adds	r3, r7, #4
 800c1ae:	6019      	str	r1, [r3, #0]
 800c1b0:	605a      	str	r2, [r3, #4]
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	685b      	ldr	r3, [r3, #4]
 800c1b8:	2210      	movs	r2, #16
 800c1ba:	4393      	bics	r3, r2
 800c1bc:	001a      	movs	r2, r3
 800c1be:	1d3b      	adds	r3, r7, #4
 800c1c0:	889b      	ldrh	r3, [r3, #4]
 800c1c2:	0019      	movs	r1, r3
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	430a      	orrs	r2, r1
 800c1ca:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	685b      	ldr	r3, [r3, #4]
 800c1d2:	021b      	lsls	r3, r3, #8
 800c1d4:	0a19      	lsrs	r1, r3, #8
 800c1d6:	1d3b      	adds	r3, r7, #4
 800c1d8:	799b      	ldrb	r3, [r3, #6]
 800c1da:	061a      	lsls	r2, r3, #24
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	430a      	orrs	r2, r1
 800c1e2:	605a      	str	r2, [r3, #4]
}
 800c1e4:	46c0      	nop			; (mov r8, r8)
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	b004      	add	sp, #16
 800c1ea:	bd80      	pop	{r7, pc}

0800c1ec <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b082      	sub	sp, #8
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	33f1      	adds	r3, #241	; 0xf1
 800c1f8:	2210      	movs	r2, #16
 800c1fa:	2100      	movs	r1, #0
 800c1fc:	0018      	movs	r0, r3
 800c1fe:	f00d f9df 	bl	80195c0 <memset1>
    ctx->M_n = 0;
 800c202:	687a      	ldr	r2, [r7, #4]
 800c204:	238a      	movs	r3, #138	; 0x8a
 800c206:	005b      	lsls	r3, r3, #1
 800c208:	2100      	movs	r1, #0
 800c20a:	50d1      	str	r1, [r2, r3]
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	22f0      	movs	r2, #240	; 0xf0
 800c210:	2100      	movs	r1, #0
 800c212:	0018      	movs	r0, r3
 800c214:	f00d f9d4 	bl	80195c0 <memset1>
}
 800c218:	46c0      	nop			; (mov r8, r8)
 800c21a:	46bd      	mov	sp, r7
 800c21c:	b002      	add	sp, #8
 800c21e:	bd80      	pop	{r7, pc}

0800c220 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800c220:	b580      	push	{r7, lr}
 800c222:	b082      	sub	sp, #8
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
 800c228:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800c22a:	687a      	ldr	r2, [r7, #4]
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	2110      	movs	r1, #16
 800c230:	0018      	movs	r0, r3
 800c232:	f000 feaf 	bl	800cf94 <lorawan_aes_set_key>
}
 800c236:	46c0      	nop			; (mov r8, r8)
 800c238:	46bd      	mov	sp, r7
 800c23a:	b002      	add	sp, #8
 800c23c:	bd80      	pop	{r7, pc}

0800c23e <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800c23e:	b590      	push	{r4, r7, lr}
 800c240:	b08d      	sub	sp, #52	; 0x34
 800c242:	af00      	add	r7, sp, #0
 800c244:	60f8      	str	r0, [r7, #12]
 800c246:	60b9      	str	r1, [r7, #8]
 800c248:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800c24a:	68fa      	ldr	r2, [r7, #12]
 800c24c:	238a      	movs	r3, #138	; 0x8a
 800c24e:	005b      	lsls	r3, r3, #1
 800c250:	58d3      	ldr	r3, [r2, r3]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d100      	bne.n	800c258 <AES_CMAC_Update+0x1a>
 800c256:	e0a4      	b.n	800c3a2 <AES_CMAC_Update+0x164>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800c258:	68fa      	ldr	r2, [r7, #12]
 800c25a:	238a      	movs	r3, #138	; 0x8a
 800c25c:	005b      	lsls	r3, r3, #1
 800c25e:	58d3      	ldr	r3, [r2, r3]
 800c260:	2210      	movs	r2, #16
 800c262:	1ad2      	subs	r2, r2, r3
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	4293      	cmp	r3, r2
 800c268:	d900      	bls.n	800c26c <AES_CMAC_Update+0x2e>
 800c26a:	0013      	movs	r3, r2
 800c26c:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	1c9a      	adds	r2, r3, #2
 800c272:	32ff      	adds	r2, #255	; 0xff
 800c274:	68f9      	ldr	r1, [r7, #12]
 800c276:	238a      	movs	r3, #138	; 0x8a
 800c278:	005b      	lsls	r3, r3, #1
 800c27a:	58cb      	ldr	r3, [r1, r3]
 800c27c:	18d3      	adds	r3, r2, r3
 800c27e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c280:	b292      	uxth	r2, r2
 800c282:	68b9      	ldr	r1, [r7, #8]
 800c284:	0018      	movs	r0, r3
 800c286:	f00d f95d 	bl	8019544 <memcpy1>
        ctx->M_n += mlen;
 800c28a:	68fa      	ldr	r2, [r7, #12]
 800c28c:	238a      	movs	r3, #138	; 0x8a
 800c28e:	005b      	lsls	r3, r3, #1
 800c290:	58d2      	ldr	r2, [r2, r3]
 800c292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c294:	18d1      	adds	r1, r2, r3
 800c296:	68fa      	ldr	r2, [r7, #12]
 800c298:	238a      	movs	r3, #138	; 0x8a
 800c29a:	005b      	lsls	r3, r3, #1
 800c29c:	50d1      	str	r1, [r2, r3]
        if( ctx->M_n < 16 || len == mlen )
 800c29e:	68fa      	ldr	r2, [r7, #12]
 800c2a0:	238a      	movs	r3, #138	; 0x8a
 800c2a2:	005b      	lsls	r3, r3, #1
 800c2a4:	58d3      	ldr	r3, [r2, r3]
 800c2a6:	2b0f      	cmp	r3, #15
 800c2a8:	d800      	bhi.n	800c2ac <AES_CMAC_Update+0x6e>
 800c2aa:	e08c      	b.n	800c3c6 <AES_CMAC_Update+0x188>
 800c2ac:	687a      	ldr	r2, [r7, #4]
 800c2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2b0:	429a      	cmp	r2, r3
 800c2b2:	d100      	bne.n	800c2b6 <AES_CMAC_Update+0x78>
 800c2b4:	e087      	b.n	800c3c6 <AES_CMAC_Update+0x188>
            return;
        XOR( ctx->M_last, ctx->X );
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c2ba:	e018      	b.n	800c2ee <AES_CMAC_Update+0xb0>
 800c2bc:	68fa      	ldr	r2, [r7, #12]
 800c2be:	21f1      	movs	r1, #241	; 0xf1
 800c2c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2c2:	18d3      	adds	r3, r2, r3
 800c2c4:	185b      	adds	r3, r3, r1
 800c2c6:	781a      	ldrb	r2, [r3, #0]
 800c2c8:	68f8      	ldr	r0, [r7, #12]
 800c2ca:	2302      	movs	r3, #2
 800c2cc:	33ff      	adds	r3, #255	; 0xff
 800c2ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c2d0:	1841      	adds	r1, r0, r1
 800c2d2:	18cb      	adds	r3, r1, r3
 800c2d4:	781b      	ldrb	r3, [r3, #0]
 800c2d6:	4053      	eors	r3, r2
 800c2d8:	b2d8      	uxtb	r0, r3
 800c2da:	68fa      	ldr	r2, [r7, #12]
 800c2dc:	21f1      	movs	r1, #241	; 0xf1
 800c2de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2e0:	18d3      	adds	r3, r2, r3
 800c2e2:	185b      	adds	r3, r3, r1
 800c2e4:	1c02      	adds	r2, r0, #0
 800c2e6:	701a      	strb	r2, [r3, #0]
 800c2e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2ea:	3301      	adds	r3, #1
 800c2ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c2ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2f0:	2b0f      	cmp	r3, #15
 800c2f2:	dde3      	ble.n	800c2bc <AES_CMAC_Update+0x7e>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	33f1      	adds	r3, #241	; 0xf1
 800c2f8:	0019      	movs	r1, r3
 800c2fa:	2414      	movs	r4, #20
 800c2fc:	193b      	adds	r3, r7, r4
 800c2fe:	2210      	movs	r2, #16
 800c300:	0018      	movs	r0, r3
 800c302:	f00d f91f 	bl	8019544 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800c306:	68fa      	ldr	r2, [r7, #12]
 800c308:	1939      	adds	r1, r7, r4
 800c30a:	193b      	adds	r3, r7, r4
 800c30c:	0018      	movs	r0, r3
 800c30e:	f000 ff7d 	bl	800d20c <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	33f1      	adds	r3, #241	; 0xf1
 800c316:	1939      	adds	r1, r7, r4
 800c318:	2210      	movs	r2, #16
 800c31a:	0018      	movs	r0, r3
 800c31c:	f00d f912 	bl	8019544 <memcpy1>

        data += mlen;
 800c320:	68ba      	ldr	r2, [r7, #8]
 800c322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c324:	18d3      	adds	r3, r2, r3
 800c326:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800c328:	687a      	ldr	r2, [r7, #4]
 800c32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c32c:	1ad3      	subs	r3, r2, r3
 800c32e:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800c330:	e037      	b.n	800c3a2 <AES_CMAC_Update+0x164>
    { /* not last block */

        XOR( data, ctx->X );
 800c332:	2300      	movs	r3, #0
 800c334:	62bb      	str	r3, [r7, #40]	; 0x28
 800c336:	e015      	b.n	800c364 <AES_CMAC_Update+0x126>
 800c338:	68fa      	ldr	r2, [r7, #12]
 800c33a:	21f1      	movs	r1, #241	; 0xf1
 800c33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c33e:	18d3      	adds	r3, r2, r3
 800c340:	185b      	adds	r3, r3, r1
 800c342:	781a      	ldrb	r2, [r3, #0]
 800c344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c346:	68b9      	ldr	r1, [r7, #8]
 800c348:	18cb      	adds	r3, r1, r3
 800c34a:	781b      	ldrb	r3, [r3, #0]
 800c34c:	4053      	eors	r3, r2
 800c34e:	b2d8      	uxtb	r0, r3
 800c350:	68fa      	ldr	r2, [r7, #12]
 800c352:	21f1      	movs	r1, #241	; 0xf1
 800c354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c356:	18d3      	adds	r3, r2, r3
 800c358:	185b      	adds	r3, r3, r1
 800c35a:	1c02      	adds	r2, r0, #0
 800c35c:	701a      	strb	r2, [r3, #0]
 800c35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c360:	3301      	adds	r3, #1
 800c362:	62bb      	str	r3, [r7, #40]	; 0x28
 800c364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c366:	2b0f      	cmp	r3, #15
 800c368:	dde6      	ble.n	800c338 <AES_CMAC_Update+0xfa>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	33f1      	adds	r3, #241	; 0xf1
 800c36e:	0019      	movs	r1, r3
 800c370:	2414      	movs	r4, #20
 800c372:	193b      	adds	r3, r7, r4
 800c374:	2210      	movs	r2, #16
 800c376:	0018      	movs	r0, r3
 800c378:	f00d f8e4 	bl	8019544 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800c37c:	68fa      	ldr	r2, [r7, #12]
 800c37e:	1939      	adds	r1, r7, r4
 800c380:	193b      	adds	r3, r7, r4
 800c382:	0018      	movs	r0, r3
 800c384:	f000 ff42 	bl	800d20c <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	33f1      	adds	r3, #241	; 0xf1
 800c38c:	1939      	adds	r1, r7, r4
 800c38e:	2210      	movs	r2, #16
 800c390:	0018      	movs	r0, r3
 800c392:	f00d f8d7 	bl	8019544 <memcpy1>

        data += 16;
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	3310      	adds	r3, #16
 800c39a:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	3b10      	subs	r3, #16
 800c3a0:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	2b10      	cmp	r3, #16
 800c3a6:	d8c4      	bhi.n	800c332 <AES_CMAC_Update+0xf4>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	3302      	adds	r3, #2
 800c3ac:	33ff      	adds	r3, #255	; 0xff
 800c3ae:	687a      	ldr	r2, [r7, #4]
 800c3b0:	b292      	uxth	r2, r2
 800c3b2:	68b9      	ldr	r1, [r7, #8]
 800c3b4:	0018      	movs	r0, r3
 800c3b6:	f00d f8c5 	bl	8019544 <memcpy1>
    ctx->M_n = len;
 800c3ba:	68fa      	ldr	r2, [r7, #12]
 800c3bc:	238a      	movs	r3, #138	; 0x8a
 800c3be:	005b      	lsls	r3, r3, #1
 800c3c0:	6879      	ldr	r1, [r7, #4]
 800c3c2:	50d1      	str	r1, [r2, r3]
 800c3c4:	e000      	b.n	800c3c8 <AES_CMAC_Update+0x18a>
            return;
 800c3c6:	46c0      	nop			; (mov r8, r8)
}
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	b00d      	add	sp, #52	; 0x34
 800c3cc:	bd90      	pop	{r4, r7, pc}

0800c3ce <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800c3ce:	b590      	push	{r4, r7, lr}
 800c3d0:	b093      	sub	sp, #76	; 0x4c
 800c3d2:	af00      	add	r7, sp, #0
 800c3d4:	6078      	str	r0, [r7, #4]
 800c3d6:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800c3d8:	241c      	movs	r4, #28
 800c3da:	193b      	adds	r3, r7, r4
 800c3dc:	2210      	movs	r2, #16
 800c3de:	2100      	movs	r1, #0
 800c3e0:	0018      	movs	r0, r3
 800c3e2:	f00d f8ed 	bl	80195c0 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800c3e6:	683a      	ldr	r2, [r7, #0]
 800c3e8:	1939      	adds	r1, r7, r4
 800c3ea:	193b      	adds	r3, r7, r4
 800c3ec:	0018      	movs	r0, r3
 800c3ee:	f000 ff0d 	bl	800d20c <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800c3f2:	193b      	adds	r3, r7, r4
 800c3f4:	781b      	ldrb	r3, [r3, #0]
 800c3f6:	b25b      	sxtb	r3, r3
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	da2e      	bge.n	800c45a <AES_CMAC_Final+0x8c>
    {
        LSHIFT( K, K );
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	647b      	str	r3, [r7, #68]	; 0x44
 800c400:	e018      	b.n	800c434 <AES_CMAC_Final+0x66>
 800c402:	201c      	movs	r0, #28
 800c404:	183a      	adds	r2, r7, r0
 800c406:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c408:	18d3      	adds	r3, r2, r3
 800c40a:	781b      	ldrb	r3, [r3, #0]
 800c40c:	005b      	lsls	r3, r3, #1
 800c40e:	b25a      	sxtb	r2, r3
 800c410:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c412:	3301      	adds	r3, #1
 800c414:	1839      	adds	r1, r7, r0
 800c416:	5ccb      	ldrb	r3, [r1, r3]
 800c418:	09db      	lsrs	r3, r3, #7
 800c41a:	b2db      	uxtb	r3, r3
 800c41c:	b25b      	sxtb	r3, r3
 800c41e:	4313      	orrs	r3, r2
 800c420:	b25b      	sxtb	r3, r3
 800c422:	b2d9      	uxtb	r1, r3
 800c424:	183a      	adds	r2, r7, r0
 800c426:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c428:	18d3      	adds	r3, r2, r3
 800c42a:	1c0a      	adds	r2, r1, #0
 800c42c:	701a      	strb	r2, [r3, #0]
 800c42e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c430:	3301      	adds	r3, #1
 800c432:	647b      	str	r3, [r7, #68]	; 0x44
 800c434:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c436:	2b0e      	cmp	r3, #14
 800c438:	dde3      	ble.n	800c402 <AES_CMAC_Final+0x34>
 800c43a:	211c      	movs	r1, #28
 800c43c:	187b      	adds	r3, r7, r1
 800c43e:	7bdb      	ldrb	r3, [r3, #15]
 800c440:	18db      	adds	r3, r3, r3
 800c442:	b2da      	uxtb	r2, r3
 800c444:	187b      	adds	r3, r7, r1
 800c446:	73da      	strb	r2, [r3, #15]
        K[15] ^= 0x87;
 800c448:	187b      	adds	r3, r7, r1
 800c44a:	7bdb      	ldrb	r3, [r3, #15]
 800c44c:	2279      	movs	r2, #121	; 0x79
 800c44e:	4252      	negs	r2, r2
 800c450:	4053      	eors	r3, r2
 800c452:	b2da      	uxtb	r2, r3
 800c454:	187b      	adds	r3, r7, r1
 800c456:	73da      	strb	r2, [r3, #15]
 800c458:	e025      	b.n	800c4a6 <AES_CMAC_Final+0xd8>
    }
    else
        LSHIFT( K, K );
 800c45a:	2300      	movs	r3, #0
 800c45c:	643b      	str	r3, [r7, #64]	; 0x40
 800c45e:	e018      	b.n	800c492 <AES_CMAC_Final+0xc4>
 800c460:	201c      	movs	r0, #28
 800c462:	183a      	adds	r2, r7, r0
 800c464:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c466:	18d3      	adds	r3, r2, r3
 800c468:	781b      	ldrb	r3, [r3, #0]
 800c46a:	005b      	lsls	r3, r3, #1
 800c46c:	b25a      	sxtb	r2, r3
 800c46e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c470:	3301      	adds	r3, #1
 800c472:	1839      	adds	r1, r7, r0
 800c474:	5ccb      	ldrb	r3, [r1, r3]
 800c476:	09db      	lsrs	r3, r3, #7
 800c478:	b2db      	uxtb	r3, r3
 800c47a:	b25b      	sxtb	r3, r3
 800c47c:	4313      	orrs	r3, r2
 800c47e:	b25b      	sxtb	r3, r3
 800c480:	b2d9      	uxtb	r1, r3
 800c482:	183a      	adds	r2, r7, r0
 800c484:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c486:	18d3      	adds	r3, r2, r3
 800c488:	1c0a      	adds	r2, r1, #0
 800c48a:	701a      	strb	r2, [r3, #0]
 800c48c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c48e:	3301      	adds	r3, #1
 800c490:	643b      	str	r3, [r7, #64]	; 0x40
 800c492:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c494:	2b0e      	cmp	r3, #14
 800c496:	dde3      	ble.n	800c460 <AES_CMAC_Final+0x92>
 800c498:	211c      	movs	r1, #28
 800c49a:	187b      	adds	r3, r7, r1
 800c49c:	7bdb      	ldrb	r3, [r3, #15]
 800c49e:	18db      	adds	r3, r3, r3
 800c4a0:	b2da      	uxtb	r2, r3
 800c4a2:	187b      	adds	r3, r7, r1
 800c4a4:	73da      	strb	r2, [r3, #15]

    if( ctx->M_n == 16 )
 800c4a6:	683a      	ldr	r2, [r7, #0]
 800c4a8:	238a      	movs	r3, #138	; 0x8a
 800c4aa:	005b      	lsls	r3, r3, #1
 800c4ac:	58d3      	ldr	r3, [r2, r3]
 800c4ae:	2b10      	cmp	r3, #16
 800c4b0:	d11f      	bne.n	800c4f2 <AES_CMAC_Final+0x124>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4b6:	e018      	b.n	800c4ea <AES_CMAC_Final+0x11c>
 800c4b8:	6839      	ldr	r1, [r7, #0]
 800c4ba:	2302      	movs	r3, #2
 800c4bc:	33ff      	adds	r3, #255	; 0xff
 800c4be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c4c0:	188a      	adds	r2, r1, r2
 800c4c2:	18d3      	adds	r3, r2, r3
 800c4c4:	781a      	ldrb	r2, [r3, #0]
 800c4c6:	231c      	movs	r3, #28
 800c4c8:	18f9      	adds	r1, r7, r3
 800c4ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4cc:	18cb      	adds	r3, r1, r3
 800c4ce:	781b      	ldrb	r3, [r3, #0]
 800c4d0:	4053      	eors	r3, r2
 800c4d2:	b2d8      	uxtb	r0, r3
 800c4d4:	6839      	ldr	r1, [r7, #0]
 800c4d6:	2302      	movs	r3, #2
 800c4d8:	33ff      	adds	r3, #255	; 0xff
 800c4da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c4dc:	188a      	adds	r2, r1, r2
 800c4de:	18d3      	adds	r3, r2, r3
 800c4e0:	1c02      	adds	r2, r0, #0
 800c4e2:	701a      	strb	r2, [r3, #0]
 800c4e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4e6:	3301      	adds	r3, #1
 800c4e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4ec:	2b0f      	cmp	r3, #15
 800c4ee:	dde3      	ble.n	800c4b8 <AES_CMAC_Final+0xea>
 800c4f0:	e09f      	b.n	800c632 <AES_CMAC_Final+0x264>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800c4f2:	231c      	movs	r3, #28
 800c4f4:	18fb      	adds	r3, r7, r3
 800c4f6:	781b      	ldrb	r3, [r3, #0]
 800c4f8:	b25b      	sxtb	r3, r3
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	da2e      	bge.n	800c55c <AES_CMAC_Final+0x18e>
        {
            LSHIFT( K, K );
 800c4fe:	2300      	movs	r3, #0
 800c500:	63bb      	str	r3, [r7, #56]	; 0x38
 800c502:	e018      	b.n	800c536 <AES_CMAC_Final+0x168>
 800c504:	201c      	movs	r0, #28
 800c506:	183a      	adds	r2, r7, r0
 800c508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c50a:	18d3      	adds	r3, r2, r3
 800c50c:	781b      	ldrb	r3, [r3, #0]
 800c50e:	005b      	lsls	r3, r3, #1
 800c510:	b25a      	sxtb	r2, r3
 800c512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c514:	3301      	adds	r3, #1
 800c516:	1839      	adds	r1, r7, r0
 800c518:	5ccb      	ldrb	r3, [r1, r3]
 800c51a:	09db      	lsrs	r3, r3, #7
 800c51c:	b2db      	uxtb	r3, r3
 800c51e:	b25b      	sxtb	r3, r3
 800c520:	4313      	orrs	r3, r2
 800c522:	b25b      	sxtb	r3, r3
 800c524:	b2d9      	uxtb	r1, r3
 800c526:	183a      	adds	r2, r7, r0
 800c528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c52a:	18d3      	adds	r3, r2, r3
 800c52c:	1c0a      	adds	r2, r1, #0
 800c52e:	701a      	strb	r2, [r3, #0]
 800c530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c532:	3301      	adds	r3, #1
 800c534:	63bb      	str	r3, [r7, #56]	; 0x38
 800c536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c538:	2b0e      	cmp	r3, #14
 800c53a:	dde3      	ble.n	800c504 <AES_CMAC_Final+0x136>
 800c53c:	211c      	movs	r1, #28
 800c53e:	187b      	adds	r3, r7, r1
 800c540:	7bdb      	ldrb	r3, [r3, #15]
 800c542:	18db      	adds	r3, r3, r3
 800c544:	b2da      	uxtb	r2, r3
 800c546:	187b      	adds	r3, r7, r1
 800c548:	73da      	strb	r2, [r3, #15]
            K[15] ^= 0x87;
 800c54a:	187b      	adds	r3, r7, r1
 800c54c:	7bdb      	ldrb	r3, [r3, #15]
 800c54e:	2279      	movs	r2, #121	; 0x79
 800c550:	4252      	negs	r2, r2
 800c552:	4053      	eors	r3, r2
 800c554:	b2da      	uxtb	r2, r3
 800c556:	187b      	adds	r3, r7, r1
 800c558:	73da      	strb	r2, [r3, #15]
 800c55a:	e025      	b.n	800c5a8 <AES_CMAC_Final+0x1da>
        }
        else
            LSHIFT( K, K );
 800c55c:	2300      	movs	r3, #0
 800c55e:	637b      	str	r3, [r7, #52]	; 0x34
 800c560:	e018      	b.n	800c594 <AES_CMAC_Final+0x1c6>
 800c562:	201c      	movs	r0, #28
 800c564:	183a      	adds	r2, r7, r0
 800c566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c568:	18d3      	adds	r3, r2, r3
 800c56a:	781b      	ldrb	r3, [r3, #0]
 800c56c:	005b      	lsls	r3, r3, #1
 800c56e:	b25a      	sxtb	r2, r3
 800c570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c572:	3301      	adds	r3, #1
 800c574:	1839      	adds	r1, r7, r0
 800c576:	5ccb      	ldrb	r3, [r1, r3]
 800c578:	09db      	lsrs	r3, r3, #7
 800c57a:	b2db      	uxtb	r3, r3
 800c57c:	b25b      	sxtb	r3, r3
 800c57e:	4313      	orrs	r3, r2
 800c580:	b25b      	sxtb	r3, r3
 800c582:	b2d9      	uxtb	r1, r3
 800c584:	183a      	adds	r2, r7, r0
 800c586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c588:	18d3      	adds	r3, r2, r3
 800c58a:	1c0a      	adds	r2, r1, #0
 800c58c:	701a      	strb	r2, [r3, #0]
 800c58e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c590:	3301      	adds	r3, #1
 800c592:	637b      	str	r3, [r7, #52]	; 0x34
 800c594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c596:	2b0e      	cmp	r3, #14
 800c598:	dde3      	ble.n	800c562 <AES_CMAC_Final+0x194>
 800c59a:	211c      	movs	r1, #28
 800c59c:	187b      	adds	r3, r7, r1
 800c59e:	7bdb      	ldrb	r3, [r3, #15]
 800c5a0:	18db      	adds	r3, r3, r3
 800c5a2:	b2da      	uxtb	r2, r3
 800c5a4:	187b      	adds	r3, r7, r1
 800c5a6:	73da      	strb	r2, [r3, #15]

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800c5a8:	683a      	ldr	r2, [r7, #0]
 800c5aa:	238a      	movs	r3, #138	; 0x8a
 800c5ac:	005b      	lsls	r3, r3, #1
 800c5ae:	58d2      	ldr	r2, [r2, r3]
 800c5b0:	6839      	ldr	r1, [r7, #0]
 800c5b2:	2302      	movs	r3, #2
 800c5b4:	33ff      	adds	r3, #255	; 0xff
 800c5b6:	188a      	adds	r2, r1, r2
 800c5b8:	18d3      	adds	r3, r2, r3
 800c5ba:	2280      	movs	r2, #128	; 0x80
 800c5bc:	701a      	strb	r2, [r3, #0]
        while( ++ctx->M_n < 16 )
 800c5be:	e00a      	b.n	800c5d6 <AES_CMAC_Final+0x208>
            ctx->M_last[ctx->M_n] = 0;
 800c5c0:	683a      	ldr	r2, [r7, #0]
 800c5c2:	238a      	movs	r3, #138	; 0x8a
 800c5c4:	005b      	lsls	r3, r3, #1
 800c5c6:	58d2      	ldr	r2, [r2, r3]
 800c5c8:	6839      	ldr	r1, [r7, #0]
 800c5ca:	2302      	movs	r3, #2
 800c5cc:	33ff      	adds	r3, #255	; 0xff
 800c5ce:	188a      	adds	r2, r1, r2
 800c5d0:	18d3      	adds	r3, r2, r3
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	701a      	strb	r2, [r3, #0]
        while( ++ctx->M_n < 16 )
 800c5d6:	683a      	ldr	r2, [r7, #0]
 800c5d8:	238a      	movs	r3, #138	; 0x8a
 800c5da:	005b      	lsls	r3, r3, #1
 800c5dc:	58d3      	ldr	r3, [r2, r3]
 800c5de:	1c59      	adds	r1, r3, #1
 800c5e0:	683a      	ldr	r2, [r7, #0]
 800c5e2:	238a      	movs	r3, #138	; 0x8a
 800c5e4:	005b      	lsls	r3, r3, #1
 800c5e6:	50d1      	str	r1, [r2, r3]
 800c5e8:	683a      	ldr	r2, [r7, #0]
 800c5ea:	238a      	movs	r3, #138	; 0x8a
 800c5ec:	005b      	lsls	r3, r3, #1
 800c5ee:	58d3      	ldr	r3, [r2, r3]
 800c5f0:	2b0f      	cmp	r3, #15
 800c5f2:	d9e5      	bls.n	800c5c0 <AES_CMAC_Final+0x1f2>

        XOR( K, ctx->M_last );
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	633b      	str	r3, [r7, #48]	; 0x30
 800c5f8:	e018      	b.n	800c62c <AES_CMAC_Final+0x25e>
 800c5fa:	6839      	ldr	r1, [r7, #0]
 800c5fc:	2302      	movs	r3, #2
 800c5fe:	33ff      	adds	r3, #255	; 0xff
 800c600:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c602:	188a      	adds	r2, r1, r2
 800c604:	18d3      	adds	r3, r2, r3
 800c606:	781a      	ldrb	r2, [r3, #0]
 800c608:	231c      	movs	r3, #28
 800c60a:	18f9      	adds	r1, r7, r3
 800c60c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c60e:	18cb      	adds	r3, r1, r3
 800c610:	781b      	ldrb	r3, [r3, #0]
 800c612:	4053      	eors	r3, r2
 800c614:	b2d8      	uxtb	r0, r3
 800c616:	6839      	ldr	r1, [r7, #0]
 800c618:	2302      	movs	r3, #2
 800c61a:	33ff      	adds	r3, #255	; 0xff
 800c61c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c61e:	188a      	adds	r2, r1, r2
 800c620:	18d3      	adds	r3, r2, r3
 800c622:	1c02      	adds	r2, r0, #0
 800c624:	701a      	strb	r2, [r3, #0]
 800c626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c628:	3301      	adds	r3, #1
 800c62a:	633b      	str	r3, [r7, #48]	; 0x30
 800c62c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c62e:	2b0f      	cmp	r3, #15
 800c630:	dde3      	ble.n	800c5fa <AES_CMAC_Final+0x22c>
    }
    XOR( ctx->M_last, ctx->X );
 800c632:	2300      	movs	r3, #0
 800c634:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c636:	e018      	b.n	800c66a <AES_CMAC_Final+0x29c>
 800c638:	683a      	ldr	r2, [r7, #0]
 800c63a:	21f1      	movs	r1, #241	; 0xf1
 800c63c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c63e:	18d3      	adds	r3, r2, r3
 800c640:	185b      	adds	r3, r3, r1
 800c642:	781a      	ldrb	r2, [r3, #0]
 800c644:	6838      	ldr	r0, [r7, #0]
 800c646:	2302      	movs	r3, #2
 800c648:	33ff      	adds	r3, #255	; 0xff
 800c64a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c64c:	1841      	adds	r1, r0, r1
 800c64e:	18cb      	adds	r3, r1, r3
 800c650:	781b      	ldrb	r3, [r3, #0]
 800c652:	4053      	eors	r3, r2
 800c654:	b2d8      	uxtb	r0, r3
 800c656:	683a      	ldr	r2, [r7, #0]
 800c658:	21f1      	movs	r1, #241	; 0xf1
 800c65a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c65c:	18d3      	adds	r3, r2, r3
 800c65e:	185b      	adds	r3, r3, r1
 800c660:	1c02      	adds	r2, r0, #0
 800c662:	701a      	strb	r2, [r3, #0]
 800c664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c666:	3301      	adds	r3, #1
 800c668:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c66a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c66c:	2b0f      	cmp	r3, #15
 800c66e:	dde3      	ble.n	800c638 <AES_CMAC_Final+0x26a>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	33f1      	adds	r3, #241	; 0xf1
 800c674:	0019      	movs	r1, r3
 800c676:	240c      	movs	r4, #12
 800c678:	193b      	adds	r3, r7, r4
 800c67a:	2210      	movs	r2, #16
 800c67c:	0018      	movs	r0, r3
 800c67e:	f00c ff61 	bl	8019544 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800c682:	683a      	ldr	r2, [r7, #0]
 800c684:	6879      	ldr	r1, [r7, #4]
 800c686:	193b      	adds	r3, r7, r4
 800c688:	0018      	movs	r0, r3
 800c68a:	f000 fdbf 	bl	800d20c <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800c68e:	231c      	movs	r3, #28
 800c690:	18fb      	adds	r3, r7, r3
 800c692:	2210      	movs	r2, #16
 800c694:	2100      	movs	r1, #0
 800c696:	0018      	movs	r0, r3
 800c698:	f00c ff92 	bl	80195c0 <memset1>
}
 800c69c:	46c0      	nop			; (mov r8, r8)
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	b013      	add	sp, #76	; 0x4c
 800c6a2:	bd90      	pop	{r4, r7, pc}

0800c6a4 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b082      	sub	sp, #8
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
 800c6ac:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	781a      	ldrb	r2, [r3, #0]
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	3301      	adds	r3, #1
 800c6ba:	683a      	ldr	r2, [r7, #0]
 800c6bc:	7852      	ldrb	r2, [r2, #1]
 800c6be:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	3302      	adds	r3, #2
 800c6c4:	683a      	ldr	r2, [r7, #0]
 800c6c6:	7892      	ldrb	r2, [r2, #2]
 800c6c8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	3303      	adds	r3, #3
 800c6ce:	683a      	ldr	r2, [r7, #0]
 800c6d0:	78d2      	ldrb	r2, [r2, #3]
 800c6d2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	3304      	adds	r3, #4
 800c6d8:	683a      	ldr	r2, [r7, #0]
 800c6da:	7912      	ldrb	r2, [r2, #4]
 800c6dc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	3305      	adds	r3, #5
 800c6e2:	683a      	ldr	r2, [r7, #0]
 800c6e4:	7952      	ldrb	r2, [r2, #5]
 800c6e6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	3306      	adds	r3, #6
 800c6ec:	683a      	ldr	r2, [r7, #0]
 800c6ee:	7992      	ldrb	r2, [r2, #6]
 800c6f0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	3307      	adds	r3, #7
 800c6f6:	683a      	ldr	r2, [r7, #0]
 800c6f8:	79d2      	ldrb	r2, [r2, #7]
 800c6fa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	3308      	adds	r3, #8
 800c700:	683a      	ldr	r2, [r7, #0]
 800c702:	7a12      	ldrb	r2, [r2, #8]
 800c704:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	3309      	adds	r3, #9
 800c70a:	683a      	ldr	r2, [r7, #0]
 800c70c:	7a52      	ldrb	r2, [r2, #9]
 800c70e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	330a      	adds	r3, #10
 800c714:	683a      	ldr	r2, [r7, #0]
 800c716:	7a92      	ldrb	r2, [r2, #10]
 800c718:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	330b      	adds	r3, #11
 800c71e:	683a      	ldr	r2, [r7, #0]
 800c720:	7ad2      	ldrb	r2, [r2, #11]
 800c722:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	330c      	adds	r3, #12
 800c728:	683a      	ldr	r2, [r7, #0]
 800c72a:	7b12      	ldrb	r2, [r2, #12]
 800c72c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	330d      	adds	r3, #13
 800c732:	683a      	ldr	r2, [r7, #0]
 800c734:	7b52      	ldrb	r2, [r2, #13]
 800c736:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	330e      	adds	r3, #14
 800c73c:	683a      	ldr	r2, [r7, #0]
 800c73e:	7b92      	ldrb	r2, [r2, #14]
 800c740:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	330f      	adds	r3, #15
 800c746:	683a      	ldr	r2, [r7, #0]
 800c748:	7bd2      	ldrb	r2, [r2, #15]
 800c74a:	701a      	strb	r2, [r3, #0]
#endif
}
 800c74c:	46c0      	nop			; (mov r8, r8)
 800c74e:	46bd      	mov	sp, r7
 800c750:	b002      	add	sp, #8
 800c752:	bd80      	pop	{r7, pc}

0800c754 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b084      	sub	sp, #16
 800c758:	af00      	add	r7, sp, #0
 800c75a:	60f8      	str	r0, [r7, #12]
 800c75c:	60b9      	str	r1, [r7, #8]
 800c75e:	1dfb      	adds	r3, r7, #7
 800c760:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800c762:	e007      	b.n	800c774 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800c764:	68ba      	ldr	r2, [r7, #8]
 800c766:	1c53      	adds	r3, r2, #1
 800c768:	60bb      	str	r3, [r7, #8]
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	1c59      	adds	r1, r3, #1
 800c76e:	60f9      	str	r1, [r7, #12]
 800c770:	7812      	ldrb	r2, [r2, #0]
 800c772:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800c774:	1dfb      	adds	r3, r7, #7
 800c776:	781b      	ldrb	r3, [r3, #0]
 800c778:	1dfa      	adds	r2, r7, #7
 800c77a:	1e59      	subs	r1, r3, #1
 800c77c:	7011      	strb	r1, [r2, #0]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d1f0      	bne.n	800c764 <copy_block_nn+0x10>
}
 800c782:	46c0      	nop			; (mov r8, r8)
 800c784:	46c0      	nop			; (mov r8, r8)
 800c786:	46bd      	mov	sp, r7
 800c788:	b004      	add	sp, #16
 800c78a:	bd80      	pop	{r7, pc}

0800c78c <xor_block>:

static void xor_block( void *d, const void *s )
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b082      	sub	sp, #8
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
 800c794:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	781a      	ldrb	r2, [r3, #0]
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	781b      	ldrb	r3, [r3, #0]
 800c79e:	4053      	eors	r3, r2
 800c7a0:	b2da      	uxtb	r2, r3
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	3301      	adds	r3, #1
 800c7aa:	7819      	ldrb	r1, [r3, #0]
 800c7ac:	683b      	ldr	r3, [r7, #0]
 800c7ae:	3301      	adds	r3, #1
 800c7b0:	781a      	ldrb	r2, [r3, #0]
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	3301      	adds	r3, #1
 800c7b6:	404a      	eors	r2, r1
 800c7b8:	b2d2      	uxtb	r2, r2
 800c7ba:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	3302      	adds	r3, #2
 800c7c0:	7819      	ldrb	r1, [r3, #0]
 800c7c2:	683b      	ldr	r3, [r7, #0]
 800c7c4:	3302      	adds	r3, #2
 800c7c6:	781a      	ldrb	r2, [r3, #0]
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	3302      	adds	r3, #2
 800c7cc:	404a      	eors	r2, r1
 800c7ce:	b2d2      	uxtb	r2, r2
 800c7d0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	3303      	adds	r3, #3
 800c7d6:	7819      	ldrb	r1, [r3, #0]
 800c7d8:	683b      	ldr	r3, [r7, #0]
 800c7da:	3303      	adds	r3, #3
 800c7dc:	781a      	ldrb	r2, [r3, #0]
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	3303      	adds	r3, #3
 800c7e2:	404a      	eors	r2, r1
 800c7e4:	b2d2      	uxtb	r2, r2
 800c7e6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	3304      	adds	r3, #4
 800c7ec:	7819      	ldrb	r1, [r3, #0]
 800c7ee:	683b      	ldr	r3, [r7, #0]
 800c7f0:	3304      	adds	r3, #4
 800c7f2:	781a      	ldrb	r2, [r3, #0]
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	3304      	adds	r3, #4
 800c7f8:	404a      	eors	r2, r1
 800c7fa:	b2d2      	uxtb	r2, r2
 800c7fc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	3305      	adds	r3, #5
 800c802:	7819      	ldrb	r1, [r3, #0]
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	3305      	adds	r3, #5
 800c808:	781a      	ldrb	r2, [r3, #0]
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	3305      	adds	r3, #5
 800c80e:	404a      	eors	r2, r1
 800c810:	b2d2      	uxtb	r2, r2
 800c812:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	3306      	adds	r3, #6
 800c818:	7819      	ldrb	r1, [r3, #0]
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	3306      	adds	r3, #6
 800c81e:	781a      	ldrb	r2, [r3, #0]
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	3306      	adds	r3, #6
 800c824:	404a      	eors	r2, r1
 800c826:	b2d2      	uxtb	r2, r2
 800c828:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	3307      	adds	r3, #7
 800c82e:	7819      	ldrb	r1, [r3, #0]
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	3307      	adds	r3, #7
 800c834:	781a      	ldrb	r2, [r3, #0]
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	3307      	adds	r3, #7
 800c83a:	404a      	eors	r2, r1
 800c83c:	b2d2      	uxtb	r2, r2
 800c83e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	3308      	adds	r3, #8
 800c844:	7819      	ldrb	r1, [r3, #0]
 800c846:	683b      	ldr	r3, [r7, #0]
 800c848:	3308      	adds	r3, #8
 800c84a:	781a      	ldrb	r2, [r3, #0]
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	3308      	adds	r3, #8
 800c850:	404a      	eors	r2, r1
 800c852:	b2d2      	uxtb	r2, r2
 800c854:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	3309      	adds	r3, #9
 800c85a:	7819      	ldrb	r1, [r3, #0]
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	3309      	adds	r3, #9
 800c860:	781a      	ldrb	r2, [r3, #0]
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	3309      	adds	r3, #9
 800c866:	404a      	eors	r2, r1
 800c868:	b2d2      	uxtb	r2, r2
 800c86a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	330a      	adds	r3, #10
 800c870:	7819      	ldrb	r1, [r3, #0]
 800c872:	683b      	ldr	r3, [r7, #0]
 800c874:	330a      	adds	r3, #10
 800c876:	781a      	ldrb	r2, [r3, #0]
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	330a      	adds	r3, #10
 800c87c:	404a      	eors	r2, r1
 800c87e:	b2d2      	uxtb	r2, r2
 800c880:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	330b      	adds	r3, #11
 800c886:	7819      	ldrb	r1, [r3, #0]
 800c888:	683b      	ldr	r3, [r7, #0]
 800c88a:	330b      	adds	r3, #11
 800c88c:	781a      	ldrb	r2, [r3, #0]
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	330b      	adds	r3, #11
 800c892:	404a      	eors	r2, r1
 800c894:	b2d2      	uxtb	r2, r2
 800c896:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	330c      	adds	r3, #12
 800c89c:	7819      	ldrb	r1, [r3, #0]
 800c89e:	683b      	ldr	r3, [r7, #0]
 800c8a0:	330c      	adds	r3, #12
 800c8a2:	781a      	ldrb	r2, [r3, #0]
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	330c      	adds	r3, #12
 800c8a8:	404a      	eors	r2, r1
 800c8aa:	b2d2      	uxtb	r2, r2
 800c8ac:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	330d      	adds	r3, #13
 800c8b2:	7819      	ldrb	r1, [r3, #0]
 800c8b4:	683b      	ldr	r3, [r7, #0]
 800c8b6:	330d      	adds	r3, #13
 800c8b8:	781a      	ldrb	r2, [r3, #0]
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	330d      	adds	r3, #13
 800c8be:	404a      	eors	r2, r1
 800c8c0:	b2d2      	uxtb	r2, r2
 800c8c2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	330e      	adds	r3, #14
 800c8c8:	7819      	ldrb	r1, [r3, #0]
 800c8ca:	683b      	ldr	r3, [r7, #0]
 800c8cc:	330e      	adds	r3, #14
 800c8ce:	781a      	ldrb	r2, [r3, #0]
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	330e      	adds	r3, #14
 800c8d4:	404a      	eors	r2, r1
 800c8d6:	b2d2      	uxtb	r2, r2
 800c8d8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	330f      	adds	r3, #15
 800c8de:	7819      	ldrb	r1, [r3, #0]
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	330f      	adds	r3, #15
 800c8e4:	781a      	ldrb	r2, [r3, #0]
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	330f      	adds	r3, #15
 800c8ea:	404a      	eors	r2, r1
 800c8ec:	b2d2      	uxtb	r2, r2
 800c8ee:	701a      	strb	r2, [r3, #0]
#endif
}
 800c8f0:	46c0      	nop			; (mov r8, r8)
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	b002      	add	sp, #8
 800c8f6:	bd80      	pop	{r7, pc}

0800c8f8 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b084      	sub	sp, #16
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	60f8      	str	r0, [r7, #12]
 800c900:	60b9      	str	r1, [r7, #8]
 800c902:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	781a      	ldrb	r2, [r3, #0]
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	781b      	ldrb	r3, [r3, #0]
 800c90c:	4053      	eors	r3, r2
 800c90e:	b2da      	uxtb	r2, r3
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800c914:	68bb      	ldr	r3, [r7, #8]
 800c916:	3301      	adds	r3, #1
 800c918:	7819      	ldrb	r1, [r3, #0]
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	3301      	adds	r3, #1
 800c91e:	781a      	ldrb	r2, [r3, #0]
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	3301      	adds	r3, #1
 800c924:	404a      	eors	r2, r1
 800c926:	b2d2      	uxtb	r2, r2
 800c928:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800c92a:	68bb      	ldr	r3, [r7, #8]
 800c92c:	3302      	adds	r3, #2
 800c92e:	7819      	ldrb	r1, [r3, #0]
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	3302      	adds	r3, #2
 800c934:	781a      	ldrb	r2, [r3, #0]
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	3302      	adds	r3, #2
 800c93a:	404a      	eors	r2, r1
 800c93c:	b2d2      	uxtb	r2, r2
 800c93e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800c940:	68bb      	ldr	r3, [r7, #8]
 800c942:	3303      	adds	r3, #3
 800c944:	7819      	ldrb	r1, [r3, #0]
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	3303      	adds	r3, #3
 800c94a:	781a      	ldrb	r2, [r3, #0]
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	3303      	adds	r3, #3
 800c950:	404a      	eors	r2, r1
 800c952:	b2d2      	uxtb	r2, r2
 800c954:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800c956:	68bb      	ldr	r3, [r7, #8]
 800c958:	3304      	adds	r3, #4
 800c95a:	7819      	ldrb	r1, [r3, #0]
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	3304      	adds	r3, #4
 800c960:	781a      	ldrb	r2, [r3, #0]
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	3304      	adds	r3, #4
 800c966:	404a      	eors	r2, r1
 800c968:	b2d2      	uxtb	r2, r2
 800c96a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800c96c:	68bb      	ldr	r3, [r7, #8]
 800c96e:	3305      	adds	r3, #5
 800c970:	7819      	ldrb	r1, [r3, #0]
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	3305      	adds	r3, #5
 800c976:	781a      	ldrb	r2, [r3, #0]
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	3305      	adds	r3, #5
 800c97c:	404a      	eors	r2, r1
 800c97e:	b2d2      	uxtb	r2, r2
 800c980:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800c982:	68bb      	ldr	r3, [r7, #8]
 800c984:	3306      	adds	r3, #6
 800c986:	7819      	ldrb	r1, [r3, #0]
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	3306      	adds	r3, #6
 800c98c:	781a      	ldrb	r2, [r3, #0]
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	3306      	adds	r3, #6
 800c992:	404a      	eors	r2, r1
 800c994:	b2d2      	uxtb	r2, r2
 800c996:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800c998:	68bb      	ldr	r3, [r7, #8]
 800c99a:	3307      	adds	r3, #7
 800c99c:	7819      	ldrb	r1, [r3, #0]
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	3307      	adds	r3, #7
 800c9a2:	781a      	ldrb	r2, [r3, #0]
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	3307      	adds	r3, #7
 800c9a8:	404a      	eors	r2, r1
 800c9aa:	b2d2      	uxtb	r2, r2
 800c9ac:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800c9ae:	68bb      	ldr	r3, [r7, #8]
 800c9b0:	3308      	adds	r3, #8
 800c9b2:	7819      	ldrb	r1, [r3, #0]
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	3308      	adds	r3, #8
 800c9b8:	781a      	ldrb	r2, [r3, #0]
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	3308      	adds	r3, #8
 800c9be:	404a      	eors	r2, r1
 800c9c0:	b2d2      	uxtb	r2, r2
 800c9c2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800c9c4:	68bb      	ldr	r3, [r7, #8]
 800c9c6:	3309      	adds	r3, #9
 800c9c8:	7819      	ldrb	r1, [r3, #0]
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	3309      	adds	r3, #9
 800c9ce:	781a      	ldrb	r2, [r3, #0]
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	3309      	adds	r3, #9
 800c9d4:	404a      	eors	r2, r1
 800c9d6:	b2d2      	uxtb	r2, r2
 800c9d8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800c9da:	68bb      	ldr	r3, [r7, #8]
 800c9dc:	330a      	adds	r3, #10
 800c9de:	7819      	ldrb	r1, [r3, #0]
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	330a      	adds	r3, #10
 800c9e4:	781a      	ldrb	r2, [r3, #0]
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	330a      	adds	r3, #10
 800c9ea:	404a      	eors	r2, r1
 800c9ec:	b2d2      	uxtb	r2, r2
 800c9ee:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800c9f0:	68bb      	ldr	r3, [r7, #8]
 800c9f2:	330b      	adds	r3, #11
 800c9f4:	7819      	ldrb	r1, [r3, #0]
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	330b      	adds	r3, #11
 800c9fa:	781a      	ldrb	r2, [r3, #0]
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	330b      	adds	r3, #11
 800ca00:	404a      	eors	r2, r1
 800ca02:	b2d2      	uxtb	r2, r2
 800ca04:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800ca06:	68bb      	ldr	r3, [r7, #8]
 800ca08:	330c      	adds	r3, #12
 800ca0a:	7819      	ldrb	r1, [r3, #0]
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	330c      	adds	r3, #12
 800ca10:	781a      	ldrb	r2, [r3, #0]
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	330c      	adds	r3, #12
 800ca16:	404a      	eors	r2, r1
 800ca18:	b2d2      	uxtb	r2, r2
 800ca1a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	330d      	adds	r3, #13
 800ca20:	7819      	ldrb	r1, [r3, #0]
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	330d      	adds	r3, #13
 800ca26:	781a      	ldrb	r2, [r3, #0]
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	330d      	adds	r3, #13
 800ca2c:	404a      	eors	r2, r1
 800ca2e:	b2d2      	uxtb	r2, r2
 800ca30:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800ca32:	68bb      	ldr	r3, [r7, #8]
 800ca34:	330e      	adds	r3, #14
 800ca36:	7819      	ldrb	r1, [r3, #0]
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	330e      	adds	r3, #14
 800ca3c:	781a      	ldrb	r2, [r3, #0]
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	330e      	adds	r3, #14
 800ca42:	404a      	eors	r2, r1
 800ca44:	b2d2      	uxtb	r2, r2
 800ca46:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800ca48:	68bb      	ldr	r3, [r7, #8]
 800ca4a:	330f      	adds	r3, #15
 800ca4c:	7819      	ldrb	r1, [r3, #0]
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	330f      	adds	r3, #15
 800ca52:	781a      	ldrb	r2, [r3, #0]
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	330f      	adds	r3, #15
 800ca58:	404a      	eors	r2, r1
 800ca5a:	b2d2      	uxtb	r2, r2
 800ca5c:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800ca5e:	46c0      	nop			; (mov r8, r8)
 800ca60:	46bd      	mov	sp, r7
 800ca62:	b004      	add	sp, #16
 800ca64:	bd80      	pop	{r7, pc}

0800ca66 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800ca66:	b580      	push	{r7, lr}
 800ca68:	b082      	sub	sp, #8
 800ca6a:	af00      	add	r7, sp, #0
 800ca6c:	6078      	str	r0, [r7, #4]
 800ca6e:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800ca70:	683a      	ldr	r2, [r7, #0]
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	0011      	movs	r1, r2
 800ca76:	0018      	movs	r0, r3
 800ca78:	f7ff fe88 	bl	800c78c <xor_block>
}
 800ca7c:	46c0      	nop			; (mov r8, r8)
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	b002      	add	sp, #8
 800ca82:	bd80      	pop	{r7, pc}

0800ca84 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b084      	sub	sp, #16
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	781b      	ldrb	r3, [r3, #0]
 800ca90:	001a      	movs	r2, r3
 800ca92:	4b4c      	ldr	r3, [pc, #304]	; (800cbc4 <shift_sub_rows+0x140>)
 800ca94:	5c9a      	ldrb	r2, [r3, r2]
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	701a      	strb	r2, [r3, #0]
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	3304      	adds	r3, #4
 800ca9e:	781b      	ldrb	r3, [r3, #0]
 800caa0:	0019      	movs	r1, r3
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	3304      	adds	r3, #4
 800caa6:	4a47      	ldr	r2, [pc, #284]	; (800cbc4 <shift_sub_rows+0x140>)
 800caa8:	5c52      	ldrb	r2, [r2, r1]
 800caaa:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	3308      	adds	r3, #8
 800cab0:	781b      	ldrb	r3, [r3, #0]
 800cab2:	0019      	movs	r1, r3
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	3308      	adds	r3, #8
 800cab8:	4a42      	ldr	r2, [pc, #264]	; (800cbc4 <shift_sub_rows+0x140>)
 800caba:	5c52      	ldrb	r2, [r2, r1]
 800cabc:	701a      	strb	r2, [r3, #0]
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	330c      	adds	r3, #12
 800cac2:	781b      	ldrb	r3, [r3, #0]
 800cac4:	0019      	movs	r1, r3
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	330c      	adds	r3, #12
 800caca:	4a3e      	ldr	r2, [pc, #248]	; (800cbc4 <shift_sub_rows+0x140>)
 800cacc:	5c52      	ldrb	r2, [r2, r1]
 800cace:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800cad0:	200f      	movs	r0, #15
 800cad2:	183b      	adds	r3, r7, r0
 800cad4:	687a      	ldr	r2, [r7, #4]
 800cad6:	7852      	ldrb	r2, [r2, #1]
 800cad8:	701a      	strb	r2, [r3, #0]
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	3305      	adds	r3, #5
 800cade:	781b      	ldrb	r3, [r3, #0]
 800cae0:	0019      	movs	r1, r3
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	3301      	adds	r3, #1
 800cae6:	4a37      	ldr	r2, [pc, #220]	; (800cbc4 <shift_sub_rows+0x140>)
 800cae8:	5c52      	ldrb	r2, [r2, r1]
 800caea:	701a      	strb	r2, [r3, #0]
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	3309      	adds	r3, #9
 800caf0:	781b      	ldrb	r3, [r3, #0]
 800caf2:	0019      	movs	r1, r3
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	3305      	adds	r3, #5
 800caf8:	4a32      	ldr	r2, [pc, #200]	; (800cbc4 <shift_sub_rows+0x140>)
 800cafa:	5c52      	ldrb	r2, [r2, r1]
 800cafc:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	330d      	adds	r3, #13
 800cb02:	781b      	ldrb	r3, [r3, #0]
 800cb04:	0019      	movs	r1, r3
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	3309      	adds	r3, #9
 800cb0a:	4a2e      	ldr	r2, [pc, #184]	; (800cbc4 <shift_sub_rows+0x140>)
 800cb0c:	5c52      	ldrb	r2, [r2, r1]
 800cb0e:	701a      	strb	r2, [r3, #0]
 800cb10:	183b      	adds	r3, r7, r0
 800cb12:	781a      	ldrb	r2, [r3, #0]
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	330d      	adds	r3, #13
 800cb18:	492a      	ldr	r1, [pc, #168]	; (800cbc4 <shift_sub_rows+0x140>)
 800cb1a:	5c8a      	ldrb	r2, [r1, r2]
 800cb1c:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800cb1e:	183b      	adds	r3, r7, r0
 800cb20:	687a      	ldr	r2, [r7, #4]
 800cb22:	7892      	ldrb	r2, [r2, #2]
 800cb24:	701a      	strb	r2, [r3, #0]
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	330a      	adds	r3, #10
 800cb2a:	781b      	ldrb	r3, [r3, #0]
 800cb2c:	0019      	movs	r1, r3
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	3302      	adds	r3, #2
 800cb32:	4a24      	ldr	r2, [pc, #144]	; (800cbc4 <shift_sub_rows+0x140>)
 800cb34:	5c52      	ldrb	r2, [r2, r1]
 800cb36:	701a      	strb	r2, [r3, #0]
 800cb38:	183b      	adds	r3, r7, r0
 800cb3a:	781a      	ldrb	r2, [r3, #0]
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	330a      	adds	r3, #10
 800cb40:	4920      	ldr	r1, [pc, #128]	; (800cbc4 <shift_sub_rows+0x140>)
 800cb42:	5c8a      	ldrb	r2, [r1, r2]
 800cb44:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800cb46:	183b      	adds	r3, r7, r0
 800cb48:	687a      	ldr	r2, [r7, #4]
 800cb4a:	7992      	ldrb	r2, [r2, #6]
 800cb4c:	701a      	strb	r2, [r3, #0]
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	330e      	adds	r3, #14
 800cb52:	781b      	ldrb	r3, [r3, #0]
 800cb54:	0019      	movs	r1, r3
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	3306      	adds	r3, #6
 800cb5a:	4a1a      	ldr	r2, [pc, #104]	; (800cbc4 <shift_sub_rows+0x140>)
 800cb5c:	5c52      	ldrb	r2, [r2, r1]
 800cb5e:	701a      	strb	r2, [r3, #0]
 800cb60:	183b      	adds	r3, r7, r0
 800cb62:	781a      	ldrb	r2, [r3, #0]
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	330e      	adds	r3, #14
 800cb68:	4916      	ldr	r1, [pc, #88]	; (800cbc4 <shift_sub_rows+0x140>)
 800cb6a:	5c8a      	ldrb	r2, [r1, r2]
 800cb6c:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800cb6e:	183b      	adds	r3, r7, r0
 800cb70:	687a      	ldr	r2, [r7, #4]
 800cb72:	7bd2      	ldrb	r2, [r2, #15]
 800cb74:	701a      	strb	r2, [r3, #0]
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	330b      	adds	r3, #11
 800cb7a:	781b      	ldrb	r3, [r3, #0]
 800cb7c:	0019      	movs	r1, r3
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	330f      	adds	r3, #15
 800cb82:	4a10      	ldr	r2, [pc, #64]	; (800cbc4 <shift_sub_rows+0x140>)
 800cb84:	5c52      	ldrb	r2, [r2, r1]
 800cb86:	701a      	strb	r2, [r3, #0]
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	3307      	adds	r3, #7
 800cb8c:	781b      	ldrb	r3, [r3, #0]
 800cb8e:	0019      	movs	r1, r3
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	330b      	adds	r3, #11
 800cb94:	4a0b      	ldr	r2, [pc, #44]	; (800cbc4 <shift_sub_rows+0x140>)
 800cb96:	5c52      	ldrb	r2, [r2, r1]
 800cb98:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	3303      	adds	r3, #3
 800cb9e:	781b      	ldrb	r3, [r3, #0]
 800cba0:	0019      	movs	r1, r3
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	3307      	adds	r3, #7
 800cba6:	4a07      	ldr	r2, [pc, #28]	; (800cbc4 <shift_sub_rows+0x140>)
 800cba8:	5c52      	ldrb	r2, [r2, r1]
 800cbaa:	701a      	strb	r2, [r3, #0]
 800cbac:	183b      	adds	r3, r7, r0
 800cbae:	781a      	ldrb	r2, [r3, #0]
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	3303      	adds	r3, #3
 800cbb4:	4903      	ldr	r1, [pc, #12]	; (800cbc4 <shift_sub_rows+0x140>)
 800cbb6:	5c8a      	ldrb	r2, [r1, r2]
 800cbb8:	701a      	strb	r2, [r3, #0]
}
 800cbba:	46c0      	nop			; (mov r8, r8)
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	b004      	add	sp, #16
 800cbc0:	bd80      	pop	{r7, pc}
 800cbc2:	46c0      	nop			; (mov r8, r8)
 800cbc4:	0801ef90 	.word	0x0801ef90

0800cbc8 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800cbc8:	b590      	push	{r4, r7, lr}
 800cbca:	b087      	sub	sp, #28
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800cbd0:	687a      	ldr	r2, [r7, #4]
 800cbd2:	2408      	movs	r4, #8
 800cbd4:	193b      	adds	r3, r7, r4
 800cbd6:	0011      	movs	r1, r2
 800cbd8:	0018      	movs	r0, r3
 800cbda:	f7ff fd63 	bl	800c6a4 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800cbde:	0020      	movs	r0, r4
 800cbe0:	183b      	adds	r3, r7, r0
 800cbe2:	781b      	ldrb	r3, [r3, #0]
 800cbe4:	001a      	movs	r2, r3
 800cbe6:	4be8      	ldr	r3, [pc, #928]	; (800cf88 <mix_sub_columns+0x3c0>)
 800cbe8:	5c9a      	ldrb	r2, [r3, r2]
 800cbea:	183b      	adds	r3, r7, r0
 800cbec:	795b      	ldrb	r3, [r3, #5]
 800cbee:	0019      	movs	r1, r3
 800cbf0:	4be6      	ldr	r3, [pc, #920]	; (800cf8c <mix_sub_columns+0x3c4>)
 800cbf2:	5c5b      	ldrb	r3, [r3, r1]
 800cbf4:	4053      	eors	r3, r2
 800cbf6:	b2da      	uxtb	r2, r3
 800cbf8:	183b      	adds	r3, r7, r0
 800cbfa:	7a9b      	ldrb	r3, [r3, #10]
 800cbfc:	0019      	movs	r1, r3
 800cbfe:	4be4      	ldr	r3, [pc, #912]	; (800cf90 <mix_sub_columns+0x3c8>)
 800cc00:	5c5b      	ldrb	r3, [r3, r1]
 800cc02:	4053      	eors	r3, r2
 800cc04:	b2da      	uxtb	r2, r3
 800cc06:	183b      	adds	r3, r7, r0
 800cc08:	7bdb      	ldrb	r3, [r3, #15]
 800cc0a:	0019      	movs	r1, r3
 800cc0c:	4be0      	ldr	r3, [pc, #896]	; (800cf90 <mix_sub_columns+0x3c8>)
 800cc0e:	5c5b      	ldrb	r3, [r3, r1]
 800cc10:	4053      	eors	r3, r2
 800cc12:	b2da      	uxtb	r2, r3
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800cc18:	183b      	adds	r3, r7, r0
 800cc1a:	781b      	ldrb	r3, [r3, #0]
 800cc1c:	001a      	movs	r2, r3
 800cc1e:	4bdc      	ldr	r3, [pc, #880]	; (800cf90 <mix_sub_columns+0x3c8>)
 800cc20:	5c9a      	ldrb	r2, [r3, r2]
 800cc22:	183b      	adds	r3, r7, r0
 800cc24:	795b      	ldrb	r3, [r3, #5]
 800cc26:	0019      	movs	r1, r3
 800cc28:	4bd7      	ldr	r3, [pc, #860]	; (800cf88 <mix_sub_columns+0x3c0>)
 800cc2a:	5c5b      	ldrb	r3, [r3, r1]
 800cc2c:	4053      	eors	r3, r2
 800cc2e:	b2da      	uxtb	r2, r3
 800cc30:	183b      	adds	r3, r7, r0
 800cc32:	7a9b      	ldrb	r3, [r3, #10]
 800cc34:	0019      	movs	r1, r3
 800cc36:	4bd5      	ldr	r3, [pc, #852]	; (800cf8c <mix_sub_columns+0x3c4>)
 800cc38:	5c5b      	ldrb	r3, [r3, r1]
 800cc3a:	4053      	eors	r3, r2
 800cc3c:	b2d9      	uxtb	r1, r3
 800cc3e:	183b      	adds	r3, r7, r0
 800cc40:	7bdb      	ldrb	r3, [r3, #15]
 800cc42:	001a      	movs	r2, r3
 800cc44:	4bd2      	ldr	r3, [pc, #840]	; (800cf90 <mix_sub_columns+0x3c8>)
 800cc46:	5c9a      	ldrb	r2, [r3, r2]
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	3301      	adds	r3, #1
 800cc4c:	404a      	eors	r2, r1
 800cc4e:	b2d2      	uxtb	r2, r2
 800cc50:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800cc52:	183b      	adds	r3, r7, r0
 800cc54:	781b      	ldrb	r3, [r3, #0]
 800cc56:	001a      	movs	r2, r3
 800cc58:	4bcd      	ldr	r3, [pc, #820]	; (800cf90 <mix_sub_columns+0x3c8>)
 800cc5a:	5c9a      	ldrb	r2, [r3, r2]
 800cc5c:	183b      	adds	r3, r7, r0
 800cc5e:	795b      	ldrb	r3, [r3, #5]
 800cc60:	0019      	movs	r1, r3
 800cc62:	4bcb      	ldr	r3, [pc, #812]	; (800cf90 <mix_sub_columns+0x3c8>)
 800cc64:	5c5b      	ldrb	r3, [r3, r1]
 800cc66:	4053      	eors	r3, r2
 800cc68:	b2da      	uxtb	r2, r3
 800cc6a:	183b      	adds	r3, r7, r0
 800cc6c:	7a9b      	ldrb	r3, [r3, #10]
 800cc6e:	0019      	movs	r1, r3
 800cc70:	4bc5      	ldr	r3, [pc, #788]	; (800cf88 <mix_sub_columns+0x3c0>)
 800cc72:	5c5b      	ldrb	r3, [r3, r1]
 800cc74:	4053      	eors	r3, r2
 800cc76:	b2d9      	uxtb	r1, r3
 800cc78:	183b      	adds	r3, r7, r0
 800cc7a:	7bdb      	ldrb	r3, [r3, #15]
 800cc7c:	001a      	movs	r2, r3
 800cc7e:	4bc3      	ldr	r3, [pc, #780]	; (800cf8c <mix_sub_columns+0x3c4>)
 800cc80:	5c9a      	ldrb	r2, [r3, r2]
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	3302      	adds	r3, #2
 800cc86:	404a      	eors	r2, r1
 800cc88:	b2d2      	uxtb	r2, r2
 800cc8a:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800cc8c:	183b      	adds	r3, r7, r0
 800cc8e:	781b      	ldrb	r3, [r3, #0]
 800cc90:	001a      	movs	r2, r3
 800cc92:	4bbe      	ldr	r3, [pc, #760]	; (800cf8c <mix_sub_columns+0x3c4>)
 800cc94:	5c9a      	ldrb	r2, [r3, r2]
 800cc96:	183b      	adds	r3, r7, r0
 800cc98:	795b      	ldrb	r3, [r3, #5]
 800cc9a:	0019      	movs	r1, r3
 800cc9c:	4bbc      	ldr	r3, [pc, #752]	; (800cf90 <mix_sub_columns+0x3c8>)
 800cc9e:	5c5b      	ldrb	r3, [r3, r1]
 800cca0:	4053      	eors	r3, r2
 800cca2:	b2da      	uxtb	r2, r3
 800cca4:	183b      	adds	r3, r7, r0
 800cca6:	7a9b      	ldrb	r3, [r3, #10]
 800cca8:	0019      	movs	r1, r3
 800ccaa:	4bb9      	ldr	r3, [pc, #740]	; (800cf90 <mix_sub_columns+0x3c8>)
 800ccac:	5c5b      	ldrb	r3, [r3, r1]
 800ccae:	4053      	eors	r3, r2
 800ccb0:	b2d9      	uxtb	r1, r3
 800ccb2:	183b      	adds	r3, r7, r0
 800ccb4:	7bdb      	ldrb	r3, [r3, #15]
 800ccb6:	001a      	movs	r2, r3
 800ccb8:	4bb3      	ldr	r3, [pc, #716]	; (800cf88 <mix_sub_columns+0x3c0>)
 800ccba:	5c9a      	ldrb	r2, [r3, r2]
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	3303      	adds	r3, #3
 800ccc0:	404a      	eors	r2, r1
 800ccc2:	b2d2      	uxtb	r2, r2
 800ccc4:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800ccc6:	183b      	adds	r3, r7, r0
 800ccc8:	791b      	ldrb	r3, [r3, #4]
 800ccca:	001a      	movs	r2, r3
 800cccc:	4bae      	ldr	r3, [pc, #696]	; (800cf88 <mix_sub_columns+0x3c0>)
 800ccce:	5c9a      	ldrb	r2, [r3, r2]
 800ccd0:	183b      	adds	r3, r7, r0
 800ccd2:	7a5b      	ldrb	r3, [r3, #9]
 800ccd4:	0019      	movs	r1, r3
 800ccd6:	4bad      	ldr	r3, [pc, #692]	; (800cf8c <mix_sub_columns+0x3c4>)
 800ccd8:	5c5b      	ldrb	r3, [r3, r1]
 800ccda:	4053      	eors	r3, r2
 800ccdc:	b2da      	uxtb	r2, r3
 800ccde:	183b      	adds	r3, r7, r0
 800cce0:	7b9b      	ldrb	r3, [r3, #14]
 800cce2:	0019      	movs	r1, r3
 800cce4:	4baa      	ldr	r3, [pc, #680]	; (800cf90 <mix_sub_columns+0x3c8>)
 800cce6:	5c5b      	ldrb	r3, [r3, r1]
 800cce8:	4053      	eors	r3, r2
 800ccea:	b2d9      	uxtb	r1, r3
 800ccec:	183b      	adds	r3, r7, r0
 800ccee:	78db      	ldrb	r3, [r3, #3]
 800ccf0:	001a      	movs	r2, r3
 800ccf2:	4ba7      	ldr	r3, [pc, #668]	; (800cf90 <mix_sub_columns+0x3c8>)
 800ccf4:	5c9a      	ldrb	r2, [r3, r2]
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	3304      	adds	r3, #4
 800ccfa:	404a      	eors	r2, r1
 800ccfc:	b2d2      	uxtb	r2, r2
 800ccfe:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800cd00:	183b      	adds	r3, r7, r0
 800cd02:	791b      	ldrb	r3, [r3, #4]
 800cd04:	001a      	movs	r2, r3
 800cd06:	4ba2      	ldr	r3, [pc, #648]	; (800cf90 <mix_sub_columns+0x3c8>)
 800cd08:	5c9a      	ldrb	r2, [r3, r2]
 800cd0a:	183b      	adds	r3, r7, r0
 800cd0c:	7a5b      	ldrb	r3, [r3, #9]
 800cd0e:	0019      	movs	r1, r3
 800cd10:	4b9d      	ldr	r3, [pc, #628]	; (800cf88 <mix_sub_columns+0x3c0>)
 800cd12:	5c5b      	ldrb	r3, [r3, r1]
 800cd14:	4053      	eors	r3, r2
 800cd16:	b2da      	uxtb	r2, r3
 800cd18:	183b      	adds	r3, r7, r0
 800cd1a:	7b9b      	ldrb	r3, [r3, #14]
 800cd1c:	0019      	movs	r1, r3
 800cd1e:	4b9b      	ldr	r3, [pc, #620]	; (800cf8c <mix_sub_columns+0x3c4>)
 800cd20:	5c5b      	ldrb	r3, [r3, r1]
 800cd22:	4053      	eors	r3, r2
 800cd24:	b2d9      	uxtb	r1, r3
 800cd26:	183b      	adds	r3, r7, r0
 800cd28:	78db      	ldrb	r3, [r3, #3]
 800cd2a:	001a      	movs	r2, r3
 800cd2c:	4b98      	ldr	r3, [pc, #608]	; (800cf90 <mix_sub_columns+0x3c8>)
 800cd2e:	5c9a      	ldrb	r2, [r3, r2]
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	3305      	adds	r3, #5
 800cd34:	404a      	eors	r2, r1
 800cd36:	b2d2      	uxtb	r2, r2
 800cd38:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800cd3a:	183b      	adds	r3, r7, r0
 800cd3c:	791b      	ldrb	r3, [r3, #4]
 800cd3e:	001a      	movs	r2, r3
 800cd40:	4b93      	ldr	r3, [pc, #588]	; (800cf90 <mix_sub_columns+0x3c8>)
 800cd42:	5c9a      	ldrb	r2, [r3, r2]
 800cd44:	183b      	adds	r3, r7, r0
 800cd46:	7a5b      	ldrb	r3, [r3, #9]
 800cd48:	0019      	movs	r1, r3
 800cd4a:	4b91      	ldr	r3, [pc, #580]	; (800cf90 <mix_sub_columns+0x3c8>)
 800cd4c:	5c5b      	ldrb	r3, [r3, r1]
 800cd4e:	4053      	eors	r3, r2
 800cd50:	b2da      	uxtb	r2, r3
 800cd52:	183b      	adds	r3, r7, r0
 800cd54:	7b9b      	ldrb	r3, [r3, #14]
 800cd56:	0019      	movs	r1, r3
 800cd58:	4b8b      	ldr	r3, [pc, #556]	; (800cf88 <mix_sub_columns+0x3c0>)
 800cd5a:	5c5b      	ldrb	r3, [r3, r1]
 800cd5c:	4053      	eors	r3, r2
 800cd5e:	b2d9      	uxtb	r1, r3
 800cd60:	183b      	adds	r3, r7, r0
 800cd62:	78db      	ldrb	r3, [r3, #3]
 800cd64:	001a      	movs	r2, r3
 800cd66:	4b89      	ldr	r3, [pc, #548]	; (800cf8c <mix_sub_columns+0x3c4>)
 800cd68:	5c9a      	ldrb	r2, [r3, r2]
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	3306      	adds	r3, #6
 800cd6e:	404a      	eors	r2, r1
 800cd70:	b2d2      	uxtb	r2, r2
 800cd72:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800cd74:	183b      	adds	r3, r7, r0
 800cd76:	791b      	ldrb	r3, [r3, #4]
 800cd78:	001a      	movs	r2, r3
 800cd7a:	4b84      	ldr	r3, [pc, #528]	; (800cf8c <mix_sub_columns+0x3c4>)
 800cd7c:	5c9a      	ldrb	r2, [r3, r2]
 800cd7e:	183b      	adds	r3, r7, r0
 800cd80:	7a5b      	ldrb	r3, [r3, #9]
 800cd82:	0019      	movs	r1, r3
 800cd84:	4b82      	ldr	r3, [pc, #520]	; (800cf90 <mix_sub_columns+0x3c8>)
 800cd86:	5c5b      	ldrb	r3, [r3, r1]
 800cd88:	4053      	eors	r3, r2
 800cd8a:	b2da      	uxtb	r2, r3
 800cd8c:	183b      	adds	r3, r7, r0
 800cd8e:	7b9b      	ldrb	r3, [r3, #14]
 800cd90:	0019      	movs	r1, r3
 800cd92:	4b7f      	ldr	r3, [pc, #508]	; (800cf90 <mix_sub_columns+0x3c8>)
 800cd94:	5c5b      	ldrb	r3, [r3, r1]
 800cd96:	4053      	eors	r3, r2
 800cd98:	b2d9      	uxtb	r1, r3
 800cd9a:	183b      	adds	r3, r7, r0
 800cd9c:	78db      	ldrb	r3, [r3, #3]
 800cd9e:	001a      	movs	r2, r3
 800cda0:	4b79      	ldr	r3, [pc, #484]	; (800cf88 <mix_sub_columns+0x3c0>)
 800cda2:	5c9a      	ldrb	r2, [r3, r2]
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	3307      	adds	r3, #7
 800cda8:	404a      	eors	r2, r1
 800cdaa:	b2d2      	uxtb	r2, r2
 800cdac:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800cdae:	183b      	adds	r3, r7, r0
 800cdb0:	7a1b      	ldrb	r3, [r3, #8]
 800cdb2:	001a      	movs	r2, r3
 800cdb4:	4b74      	ldr	r3, [pc, #464]	; (800cf88 <mix_sub_columns+0x3c0>)
 800cdb6:	5c9a      	ldrb	r2, [r3, r2]
 800cdb8:	183b      	adds	r3, r7, r0
 800cdba:	7b5b      	ldrb	r3, [r3, #13]
 800cdbc:	0019      	movs	r1, r3
 800cdbe:	4b73      	ldr	r3, [pc, #460]	; (800cf8c <mix_sub_columns+0x3c4>)
 800cdc0:	5c5b      	ldrb	r3, [r3, r1]
 800cdc2:	4053      	eors	r3, r2
 800cdc4:	b2da      	uxtb	r2, r3
 800cdc6:	183b      	adds	r3, r7, r0
 800cdc8:	789b      	ldrb	r3, [r3, #2]
 800cdca:	0019      	movs	r1, r3
 800cdcc:	4b70      	ldr	r3, [pc, #448]	; (800cf90 <mix_sub_columns+0x3c8>)
 800cdce:	5c5b      	ldrb	r3, [r3, r1]
 800cdd0:	4053      	eors	r3, r2
 800cdd2:	b2d9      	uxtb	r1, r3
 800cdd4:	183b      	adds	r3, r7, r0
 800cdd6:	79db      	ldrb	r3, [r3, #7]
 800cdd8:	001a      	movs	r2, r3
 800cdda:	4b6d      	ldr	r3, [pc, #436]	; (800cf90 <mix_sub_columns+0x3c8>)
 800cddc:	5c9a      	ldrb	r2, [r3, r2]
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	3308      	adds	r3, #8
 800cde2:	404a      	eors	r2, r1
 800cde4:	b2d2      	uxtb	r2, r2
 800cde6:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800cde8:	183b      	adds	r3, r7, r0
 800cdea:	7a1b      	ldrb	r3, [r3, #8]
 800cdec:	001a      	movs	r2, r3
 800cdee:	4b68      	ldr	r3, [pc, #416]	; (800cf90 <mix_sub_columns+0x3c8>)
 800cdf0:	5c9a      	ldrb	r2, [r3, r2]
 800cdf2:	183b      	adds	r3, r7, r0
 800cdf4:	7b5b      	ldrb	r3, [r3, #13]
 800cdf6:	0019      	movs	r1, r3
 800cdf8:	4b63      	ldr	r3, [pc, #396]	; (800cf88 <mix_sub_columns+0x3c0>)
 800cdfa:	5c5b      	ldrb	r3, [r3, r1]
 800cdfc:	4053      	eors	r3, r2
 800cdfe:	b2da      	uxtb	r2, r3
 800ce00:	183b      	adds	r3, r7, r0
 800ce02:	789b      	ldrb	r3, [r3, #2]
 800ce04:	0019      	movs	r1, r3
 800ce06:	4b61      	ldr	r3, [pc, #388]	; (800cf8c <mix_sub_columns+0x3c4>)
 800ce08:	5c5b      	ldrb	r3, [r3, r1]
 800ce0a:	4053      	eors	r3, r2
 800ce0c:	b2d9      	uxtb	r1, r3
 800ce0e:	183b      	adds	r3, r7, r0
 800ce10:	79db      	ldrb	r3, [r3, #7]
 800ce12:	001a      	movs	r2, r3
 800ce14:	4b5e      	ldr	r3, [pc, #376]	; (800cf90 <mix_sub_columns+0x3c8>)
 800ce16:	5c9a      	ldrb	r2, [r3, r2]
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	3309      	adds	r3, #9
 800ce1c:	404a      	eors	r2, r1
 800ce1e:	b2d2      	uxtb	r2, r2
 800ce20:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800ce22:	183b      	adds	r3, r7, r0
 800ce24:	7a1b      	ldrb	r3, [r3, #8]
 800ce26:	001a      	movs	r2, r3
 800ce28:	4b59      	ldr	r3, [pc, #356]	; (800cf90 <mix_sub_columns+0x3c8>)
 800ce2a:	5c9a      	ldrb	r2, [r3, r2]
 800ce2c:	183b      	adds	r3, r7, r0
 800ce2e:	7b5b      	ldrb	r3, [r3, #13]
 800ce30:	0019      	movs	r1, r3
 800ce32:	4b57      	ldr	r3, [pc, #348]	; (800cf90 <mix_sub_columns+0x3c8>)
 800ce34:	5c5b      	ldrb	r3, [r3, r1]
 800ce36:	4053      	eors	r3, r2
 800ce38:	b2da      	uxtb	r2, r3
 800ce3a:	183b      	adds	r3, r7, r0
 800ce3c:	789b      	ldrb	r3, [r3, #2]
 800ce3e:	0019      	movs	r1, r3
 800ce40:	4b51      	ldr	r3, [pc, #324]	; (800cf88 <mix_sub_columns+0x3c0>)
 800ce42:	5c5b      	ldrb	r3, [r3, r1]
 800ce44:	4053      	eors	r3, r2
 800ce46:	b2d9      	uxtb	r1, r3
 800ce48:	183b      	adds	r3, r7, r0
 800ce4a:	79db      	ldrb	r3, [r3, #7]
 800ce4c:	001a      	movs	r2, r3
 800ce4e:	4b4f      	ldr	r3, [pc, #316]	; (800cf8c <mix_sub_columns+0x3c4>)
 800ce50:	5c9a      	ldrb	r2, [r3, r2]
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	330a      	adds	r3, #10
 800ce56:	404a      	eors	r2, r1
 800ce58:	b2d2      	uxtb	r2, r2
 800ce5a:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800ce5c:	183b      	adds	r3, r7, r0
 800ce5e:	7a1b      	ldrb	r3, [r3, #8]
 800ce60:	001a      	movs	r2, r3
 800ce62:	4b4a      	ldr	r3, [pc, #296]	; (800cf8c <mix_sub_columns+0x3c4>)
 800ce64:	5c9a      	ldrb	r2, [r3, r2]
 800ce66:	183b      	adds	r3, r7, r0
 800ce68:	7b5b      	ldrb	r3, [r3, #13]
 800ce6a:	0019      	movs	r1, r3
 800ce6c:	4b48      	ldr	r3, [pc, #288]	; (800cf90 <mix_sub_columns+0x3c8>)
 800ce6e:	5c5b      	ldrb	r3, [r3, r1]
 800ce70:	4053      	eors	r3, r2
 800ce72:	b2da      	uxtb	r2, r3
 800ce74:	183b      	adds	r3, r7, r0
 800ce76:	789b      	ldrb	r3, [r3, #2]
 800ce78:	0019      	movs	r1, r3
 800ce7a:	4b45      	ldr	r3, [pc, #276]	; (800cf90 <mix_sub_columns+0x3c8>)
 800ce7c:	5c5b      	ldrb	r3, [r3, r1]
 800ce7e:	4053      	eors	r3, r2
 800ce80:	b2d9      	uxtb	r1, r3
 800ce82:	183b      	adds	r3, r7, r0
 800ce84:	79db      	ldrb	r3, [r3, #7]
 800ce86:	001a      	movs	r2, r3
 800ce88:	4b3f      	ldr	r3, [pc, #252]	; (800cf88 <mix_sub_columns+0x3c0>)
 800ce8a:	5c9a      	ldrb	r2, [r3, r2]
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	330b      	adds	r3, #11
 800ce90:	404a      	eors	r2, r1
 800ce92:	b2d2      	uxtb	r2, r2
 800ce94:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800ce96:	183b      	adds	r3, r7, r0
 800ce98:	7b1b      	ldrb	r3, [r3, #12]
 800ce9a:	001a      	movs	r2, r3
 800ce9c:	4b3a      	ldr	r3, [pc, #232]	; (800cf88 <mix_sub_columns+0x3c0>)
 800ce9e:	5c9a      	ldrb	r2, [r3, r2]
 800cea0:	183b      	adds	r3, r7, r0
 800cea2:	785b      	ldrb	r3, [r3, #1]
 800cea4:	0019      	movs	r1, r3
 800cea6:	4b39      	ldr	r3, [pc, #228]	; (800cf8c <mix_sub_columns+0x3c4>)
 800cea8:	5c5b      	ldrb	r3, [r3, r1]
 800ceaa:	4053      	eors	r3, r2
 800ceac:	b2da      	uxtb	r2, r3
 800ceae:	183b      	adds	r3, r7, r0
 800ceb0:	799b      	ldrb	r3, [r3, #6]
 800ceb2:	0019      	movs	r1, r3
 800ceb4:	4b36      	ldr	r3, [pc, #216]	; (800cf90 <mix_sub_columns+0x3c8>)
 800ceb6:	5c5b      	ldrb	r3, [r3, r1]
 800ceb8:	4053      	eors	r3, r2
 800ceba:	b2d9      	uxtb	r1, r3
 800cebc:	183b      	adds	r3, r7, r0
 800cebe:	7adb      	ldrb	r3, [r3, #11]
 800cec0:	001a      	movs	r2, r3
 800cec2:	4b33      	ldr	r3, [pc, #204]	; (800cf90 <mix_sub_columns+0x3c8>)
 800cec4:	5c9a      	ldrb	r2, [r3, r2]
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	330c      	adds	r3, #12
 800ceca:	404a      	eors	r2, r1
 800cecc:	b2d2      	uxtb	r2, r2
 800cece:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800ced0:	183b      	adds	r3, r7, r0
 800ced2:	7b1b      	ldrb	r3, [r3, #12]
 800ced4:	001a      	movs	r2, r3
 800ced6:	4b2e      	ldr	r3, [pc, #184]	; (800cf90 <mix_sub_columns+0x3c8>)
 800ced8:	5c9a      	ldrb	r2, [r3, r2]
 800ceda:	183b      	adds	r3, r7, r0
 800cedc:	785b      	ldrb	r3, [r3, #1]
 800cede:	0019      	movs	r1, r3
 800cee0:	4b29      	ldr	r3, [pc, #164]	; (800cf88 <mix_sub_columns+0x3c0>)
 800cee2:	5c5b      	ldrb	r3, [r3, r1]
 800cee4:	4053      	eors	r3, r2
 800cee6:	b2da      	uxtb	r2, r3
 800cee8:	183b      	adds	r3, r7, r0
 800ceea:	799b      	ldrb	r3, [r3, #6]
 800ceec:	0019      	movs	r1, r3
 800ceee:	4b27      	ldr	r3, [pc, #156]	; (800cf8c <mix_sub_columns+0x3c4>)
 800cef0:	5c5b      	ldrb	r3, [r3, r1]
 800cef2:	4053      	eors	r3, r2
 800cef4:	b2d9      	uxtb	r1, r3
 800cef6:	183b      	adds	r3, r7, r0
 800cef8:	7adb      	ldrb	r3, [r3, #11]
 800cefa:	001a      	movs	r2, r3
 800cefc:	4b24      	ldr	r3, [pc, #144]	; (800cf90 <mix_sub_columns+0x3c8>)
 800cefe:	5c9a      	ldrb	r2, [r3, r2]
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	330d      	adds	r3, #13
 800cf04:	404a      	eors	r2, r1
 800cf06:	b2d2      	uxtb	r2, r2
 800cf08:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800cf0a:	183b      	adds	r3, r7, r0
 800cf0c:	7b1b      	ldrb	r3, [r3, #12]
 800cf0e:	001a      	movs	r2, r3
 800cf10:	4b1f      	ldr	r3, [pc, #124]	; (800cf90 <mix_sub_columns+0x3c8>)
 800cf12:	5c9a      	ldrb	r2, [r3, r2]
 800cf14:	183b      	adds	r3, r7, r0
 800cf16:	785b      	ldrb	r3, [r3, #1]
 800cf18:	0019      	movs	r1, r3
 800cf1a:	4b1d      	ldr	r3, [pc, #116]	; (800cf90 <mix_sub_columns+0x3c8>)
 800cf1c:	5c5b      	ldrb	r3, [r3, r1]
 800cf1e:	4053      	eors	r3, r2
 800cf20:	b2da      	uxtb	r2, r3
 800cf22:	183b      	adds	r3, r7, r0
 800cf24:	799b      	ldrb	r3, [r3, #6]
 800cf26:	0019      	movs	r1, r3
 800cf28:	4b17      	ldr	r3, [pc, #92]	; (800cf88 <mix_sub_columns+0x3c0>)
 800cf2a:	5c5b      	ldrb	r3, [r3, r1]
 800cf2c:	4053      	eors	r3, r2
 800cf2e:	b2d9      	uxtb	r1, r3
 800cf30:	183b      	adds	r3, r7, r0
 800cf32:	7adb      	ldrb	r3, [r3, #11]
 800cf34:	001a      	movs	r2, r3
 800cf36:	4b15      	ldr	r3, [pc, #84]	; (800cf8c <mix_sub_columns+0x3c4>)
 800cf38:	5c9a      	ldrb	r2, [r3, r2]
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	330e      	adds	r3, #14
 800cf3e:	404a      	eors	r2, r1
 800cf40:	b2d2      	uxtb	r2, r2
 800cf42:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800cf44:	183b      	adds	r3, r7, r0
 800cf46:	7b1b      	ldrb	r3, [r3, #12]
 800cf48:	001a      	movs	r2, r3
 800cf4a:	4b10      	ldr	r3, [pc, #64]	; (800cf8c <mix_sub_columns+0x3c4>)
 800cf4c:	5c9a      	ldrb	r2, [r3, r2]
 800cf4e:	183b      	adds	r3, r7, r0
 800cf50:	785b      	ldrb	r3, [r3, #1]
 800cf52:	0019      	movs	r1, r3
 800cf54:	4b0e      	ldr	r3, [pc, #56]	; (800cf90 <mix_sub_columns+0x3c8>)
 800cf56:	5c5b      	ldrb	r3, [r3, r1]
 800cf58:	4053      	eors	r3, r2
 800cf5a:	b2da      	uxtb	r2, r3
 800cf5c:	183b      	adds	r3, r7, r0
 800cf5e:	799b      	ldrb	r3, [r3, #6]
 800cf60:	0019      	movs	r1, r3
 800cf62:	4b0b      	ldr	r3, [pc, #44]	; (800cf90 <mix_sub_columns+0x3c8>)
 800cf64:	5c5b      	ldrb	r3, [r3, r1]
 800cf66:	4053      	eors	r3, r2
 800cf68:	b2d9      	uxtb	r1, r3
 800cf6a:	183b      	adds	r3, r7, r0
 800cf6c:	7adb      	ldrb	r3, [r3, #11]
 800cf6e:	001a      	movs	r2, r3
 800cf70:	4b05      	ldr	r3, [pc, #20]	; (800cf88 <mix_sub_columns+0x3c0>)
 800cf72:	5c9a      	ldrb	r2, [r3, r2]
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	330f      	adds	r3, #15
 800cf78:	404a      	eors	r2, r1
 800cf7a:	b2d2      	uxtb	r2, r2
 800cf7c:	701a      	strb	r2, [r3, #0]
  }
 800cf7e:	46c0      	nop			; (mov r8, r8)
 800cf80:	46bd      	mov	sp, r7
 800cf82:	b007      	add	sp, #28
 800cf84:	bd90      	pop	{r4, r7, pc}
 800cf86:	46c0      	nop			; (mov r8, r8)
 800cf88:	0801f090 	.word	0x0801f090
 800cf8c:	0801f190 	.word	0x0801f190
 800cf90:	0801ef90 	.word	0x0801ef90

0800cf94 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800cf94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf96:	b087      	sub	sp, #28
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	60f8      	str	r0, [r7, #12]
 800cf9c:	607a      	str	r2, [r7, #4]
 800cf9e:	200b      	movs	r0, #11
 800cfa0:	183b      	adds	r3, r7, r0
 800cfa2:	1c0a      	adds	r2, r1, #0
 800cfa4:	701a      	strb	r2, [r3, #0]
    uint8_t cc, rc, hi;

    switch( keylen )
 800cfa6:	183b      	adds	r3, r7, r0
 800cfa8:	781b      	ldrb	r3, [r3, #0]
 800cfaa:	3b10      	subs	r3, #16
 800cfac:	2210      	movs	r2, #16
 800cfae:	429a      	cmp	r2, r3
 800cfb0:	4192      	sbcs	r2, r2
 800cfb2:	4252      	negs	r2, r2
 800cfb4:	b2d2      	uxtb	r2, r2
 800cfb6:	2a00      	cmp	r2, #0
 800cfb8:	d109      	bne.n	800cfce <lorawan_aes_set_key+0x3a>
 800cfba:	2201      	movs	r2, #1
 800cfbc:	409a      	lsls	r2, r3
 800cfbe:	0013      	movs	r3, r2
 800cfc0:	4a90      	ldr	r2, [pc, #576]	; (800d204 <lorawan_aes_set_key+0x270>)
 800cfc2:	4013      	ands	r3, r2
 800cfc4:	1e5a      	subs	r2, r3, #1
 800cfc6:	4193      	sbcs	r3, r2
 800cfc8:	b2db      	uxtb	r3, r3
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d105      	bne.n	800cfda <lorawan_aes_set_key+0x46>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	22f0      	movs	r2, #240	; 0xf0
 800cfd2:	2100      	movs	r1, #0
 800cfd4:	5499      	strb	r1, [r3, r2]
        return ( uint8_t )-1;
 800cfd6:	23ff      	movs	r3, #255	; 0xff
 800cfd8:	e10f      	b.n	800d1fa <lorawan_aes_set_key+0x266>
        break;
 800cfda:	46c0      	nop			; (mov r8, r8)
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800cfdc:	6878      	ldr	r0, [r7, #4]
 800cfde:	240b      	movs	r4, #11
 800cfe0:	193b      	adds	r3, r7, r4
 800cfe2:	781a      	ldrb	r2, [r3, #0]
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	0019      	movs	r1, r3
 800cfe8:	f7ff fbb4 	bl	800c754 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800cfec:	0020      	movs	r0, r4
 800cfee:	183b      	adds	r3, r7, r0
 800cff0:	781b      	ldrb	r3, [r3, #0]
 800cff2:	331c      	adds	r3, #28
 800cff4:	b2da      	uxtb	r2, r3
 800cff6:	2111      	movs	r1, #17
 800cff8:	187b      	adds	r3, r7, r1
 800cffa:	0092      	lsls	r2, r2, #2
 800cffc:	701a      	strb	r2, [r3, #0]
    ctx->rnd = (hi >> 4) - 1;
 800cffe:	187b      	adds	r3, r7, r1
 800d000:	781b      	ldrb	r3, [r3, #0]
 800d002:	091b      	lsrs	r3, r3, #4
 800d004:	b2db      	uxtb	r3, r3
 800d006:	3b01      	subs	r3, #1
 800d008:	b2d9      	uxtb	r1, r3
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	22f0      	movs	r2, #240	; 0xf0
 800d00e:	5499      	strb	r1, [r3, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800d010:	2317      	movs	r3, #23
 800d012:	18fb      	adds	r3, r7, r3
 800d014:	183a      	adds	r2, r7, r0
 800d016:	7812      	ldrb	r2, [r2, #0]
 800d018:	701a      	strb	r2, [r3, #0]
 800d01a:	2316      	movs	r3, #22
 800d01c:	18fb      	adds	r3, r7, r3
 800d01e:	2201      	movs	r2, #1
 800d020:	701a      	strb	r2, [r3, #0]
 800d022:	e0e0      	b.n	800d1e6 <lorawan_aes_set_key+0x252>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800d024:	2017      	movs	r0, #23
 800d026:	183b      	adds	r3, r7, r0
 800d028:	781b      	ldrb	r3, [r3, #0]
 800d02a:	1f1a      	subs	r2, r3, #4
 800d02c:	2415      	movs	r4, #21
 800d02e:	193b      	adds	r3, r7, r4
 800d030:	6879      	ldr	r1, [r7, #4]
 800d032:	5c8a      	ldrb	r2, [r1, r2]
 800d034:	701a      	strb	r2, [r3, #0]
        t1 = ctx->ksch[cc - 3];
 800d036:	183b      	adds	r3, r7, r0
 800d038:	781b      	ldrb	r3, [r3, #0]
 800d03a:	1eda      	subs	r2, r3, #3
 800d03c:	2514      	movs	r5, #20
 800d03e:	197b      	adds	r3, r7, r5
 800d040:	6879      	ldr	r1, [r7, #4]
 800d042:	5c8a      	ldrb	r2, [r1, r2]
 800d044:	701a      	strb	r2, [r3, #0]
        t2 = ctx->ksch[cc - 2];
 800d046:	183b      	adds	r3, r7, r0
 800d048:	781b      	ldrb	r3, [r3, #0]
 800d04a:	1e9a      	subs	r2, r3, #2
 800d04c:	2613      	movs	r6, #19
 800d04e:	19bb      	adds	r3, r7, r6
 800d050:	6879      	ldr	r1, [r7, #4]
 800d052:	5c8a      	ldrb	r2, [r1, r2]
 800d054:	701a      	strb	r2, [r3, #0]
        t3 = ctx->ksch[cc - 1];
 800d056:	183b      	adds	r3, r7, r0
 800d058:	781b      	ldrb	r3, [r3, #0]
 800d05a:	1e5a      	subs	r2, r3, #1
 800d05c:	2312      	movs	r3, #18
 800d05e:	18fb      	adds	r3, r7, r3
 800d060:	6879      	ldr	r1, [r7, #4]
 800d062:	5c8a      	ldrb	r2, [r1, r2]
 800d064:	701a      	strb	r2, [r3, #0]
        if( cc % keylen == 0 )
 800d066:	183a      	adds	r2, r7, r0
 800d068:	210b      	movs	r1, #11
 800d06a:	187b      	adds	r3, r7, r1
 800d06c:	7812      	ldrb	r2, [r2, #0]
 800d06e:	781b      	ldrb	r3, [r3, #0]
 800d070:	0019      	movs	r1, r3
 800d072:	0010      	movs	r0, r2
 800d074:	f7f3 f8e0 	bl	8000238 <__aeabi_uidivmod>
 800d078:	000b      	movs	r3, r1
 800d07a:	b2db      	uxtb	r3, r3
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d13b      	bne.n	800d0f8 <lorawan_aes_set_key+0x164>
        {
            tt = t0;
 800d080:	2210      	movs	r2, #16
 800d082:	18bb      	adds	r3, r7, r2
 800d084:	193a      	adds	r2, r7, r4
 800d086:	7812      	ldrb	r2, [r2, #0]
 800d088:	701a      	strb	r2, [r3, #0]
            t0 = s_box(t1) ^ rc;
 800d08a:	197b      	adds	r3, r7, r5
 800d08c:	781b      	ldrb	r3, [r3, #0]
 800d08e:	4a5e      	ldr	r2, [pc, #376]	; (800d208 <lorawan_aes_set_key+0x274>)
 800d090:	5cd1      	ldrb	r1, [r2, r3]
 800d092:	193b      	adds	r3, r7, r4
 800d094:	2016      	movs	r0, #22
 800d096:	183a      	adds	r2, r7, r0
 800d098:	7812      	ldrb	r2, [r2, #0]
 800d09a:	404a      	eors	r2, r1
 800d09c:	701a      	strb	r2, [r3, #0]
            t1 = s_box(t2);
 800d09e:	19bb      	adds	r3, r7, r6
 800d0a0:	781a      	ldrb	r2, [r3, #0]
 800d0a2:	197b      	adds	r3, r7, r5
 800d0a4:	4958      	ldr	r1, [pc, #352]	; (800d208 <lorawan_aes_set_key+0x274>)
 800d0a6:	5c8a      	ldrb	r2, [r1, r2]
 800d0a8:	701a      	strb	r2, [r3, #0]
            t2 = s_box(t3);
 800d0aa:	2412      	movs	r4, #18
 800d0ac:	193b      	adds	r3, r7, r4
 800d0ae:	781a      	ldrb	r2, [r3, #0]
 800d0b0:	19bb      	adds	r3, r7, r6
 800d0b2:	4955      	ldr	r1, [pc, #340]	; (800d208 <lorawan_aes_set_key+0x274>)
 800d0b4:	5c8a      	ldrb	r2, [r1, r2]
 800d0b6:	701a      	strb	r2, [r3, #0]
            t3 = s_box(tt);
 800d0b8:	2210      	movs	r2, #16
 800d0ba:	18bb      	adds	r3, r7, r2
 800d0bc:	781a      	ldrb	r2, [r3, #0]
 800d0be:	193b      	adds	r3, r7, r4
 800d0c0:	4951      	ldr	r1, [pc, #324]	; (800d208 <lorawan_aes_set_key+0x274>)
 800d0c2:	5c8a      	ldrb	r2, [r1, r2]
 800d0c4:	701a      	strb	r2, [r3, #0]
            rc = f2(rc);
 800d0c6:	183b      	adds	r3, r7, r0
 800d0c8:	781b      	ldrb	r3, [r3, #0]
 800d0ca:	005b      	lsls	r3, r3, #1
 800d0cc:	b25a      	sxtb	r2, r3
 800d0ce:	0004      	movs	r4, r0
 800d0d0:	183b      	adds	r3, r7, r0
 800d0d2:	781b      	ldrb	r3, [r3, #0]
 800d0d4:	09db      	lsrs	r3, r3, #7
 800d0d6:	b2db      	uxtb	r3, r3
 800d0d8:	1c19      	adds	r1, r3, #0
 800d0da:	1c0b      	adds	r3, r1, #0
 800d0dc:	18db      	adds	r3, r3, r3
 800d0de:	185b      	adds	r3, r3, r1
 800d0e0:	1c19      	adds	r1, r3, #0
 800d0e2:	00c8      	lsls	r0, r1, #3
 800d0e4:	1c19      	adds	r1, r3, #0
 800d0e6:	1c03      	adds	r3, r0, #0
 800d0e8:	18cb      	adds	r3, r1, r3
 800d0ea:	b2db      	uxtb	r3, r3
 800d0ec:	b25b      	sxtb	r3, r3
 800d0ee:	4053      	eors	r3, r2
 800d0f0:	b25a      	sxtb	r2, r3
 800d0f2:	193b      	adds	r3, r7, r4
 800d0f4:	701a      	strb	r2, [r3, #0]
 800d0f6:	e02d      	b.n	800d154 <lorawan_aes_set_key+0x1c0>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800d0f8:	210b      	movs	r1, #11
 800d0fa:	187b      	adds	r3, r7, r1
 800d0fc:	781b      	ldrb	r3, [r3, #0]
 800d0fe:	2b18      	cmp	r3, #24
 800d100:	d928      	bls.n	800d154 <lorawan_aes_set_key+0x1c0>
 800d102:	2317      	movs	r3, #23
 800d104:	18fa      	adds	r2, r7, r3
 800d106:	187b      	adds	r3, r7, r1
 800d108:	7812      	ldrb	r2, [r2, #0]
 800d10a:	781b      	ldrb	r3, [r3, #0]
 800d10c:	0019      	movs	r1, r3
 800d10e:	0010      	movs	r0, r2
 800d110:	f7f3 f892 	bl	8000238 <__aeabi_uidivmod>
 800d114:	000b      	movs	r3, r1
 800d116:	b2db      	uxtb	r3, r3
 800d118:	2b10      	cmp	r3, #16
 800d11a:	d11b      	bne.n	800d154 <lorawan_aes_set_key+0x1c0>
        {
            t0 = s_box(t0);
 800d11c:	2115      	movs	r1, #21
 800d11e:	187b      	adds	r3, r7, r1
 800d120:	781a      	ldrb	r2, [r3, #0]
 800d122:	187b      	adds	r3, r7, r1
 800d124:	4938      	ldr	r1, [pc, #224]	; (800d208 <lorawan_aes_set_key+0x274>)
 800d126:	5c8a      	ldrb	r2, [r1, r2]
 800d128:	701a      	strb	r2, [r3, #0]
            t1 = s_box(t1);
 800d12a:	2114      	movs	r1, #20
 800d12c:	187b      	adds	r3, r7, r1
 800d12e:	781a      	ldrb	r2, [r3, #0]
 800d130:	187b      	adds	r3, r7, r1
 800d132:	4935      	ldr	r1, [pc, #212]	; (800d208 <lorawan_aes_set_key+0x274>)
 800d134:	5c8a      	ldrb	r2, [r1, r2]
 800d136:	701a      	strb	r2, [r3, #0]
            t2 = s_box(t2);
 800d138:	2113      	movs	r1, #19
 800d13a:	187b      	adds	r3, r7, r1
 800d13c:	781a      	ldrb	r2, [r3, #0]
 800d13e:	187b      	adds	r3, r7, r1
 800d140:	4931      	ldr	r1, [pc, #196]	; (800d208 <lorawan_aes_set_key+0x274>)
 800d142:	5c8a      	ldrb	r2, [r1, r2]
 800d144:	701a      	strb	r2, [r3, #0]
            t3 = s_box(t3);
 800d146:	2112      	movs	r1, #18
 800d148:	187b      	adds	r3, r7, r1
 800d14a:	781a      	ldrb	r2, [r3, #0]
 800d14c:	187b      	adds	r3, r7, r1
 800d14e:	492e      	ldr	r1, [pc, #184]	; (800d208 <lorawan_aes_set_key+0x274>)
 800d150:	5c8a      	ldrb	r2, [r1, r2]
 800d152:	701a      	strb	r2, [r3, #0]
        }
        tt = cc - keylen;
 800d154:	2410      	movs	r4, #16
 800d156:	193b      	adds	r3, r7, r4
 800d158:	2017      	movs	r0, #23
 800d15a:	1839      	adds	r1, r7, r0
 800d15c:	220b      	movs	r2, #11
 800d15e:	18ba      	adds	r2, r7, r2
 800d160:	7809      	ldrb	r1, [r1, #0]
 800d162:	7812      	ldrb	r2, [r2, #0]
 800d164:	1a8a      	subs	r2, r1, r2
 800d166:	701a      	strb	r2, [r3, #0]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800d168:	193b      	adds	r3, r7, r4
 800d16a:	781b      	ldrb	r3, [r3, #0]
 800d16c:	687a      	ldr	r2, [r7, #4]
 800d16e:	5cd1      	ldrb	r1, [r2, r3]
 800d170:	183b      	adds	r3, r7, r0
 800d172:	781b      	ldrb	r3, [r3, #0]
 800d174:	2215      	movs	r2, #21
 800d176:	18ba      	adds	r2, r7, r2
 800d178:	7812      	ldrb	r2, [r2, #0]
 800d17a:	404a      	eors	r2, r1
 800d17c:	b2d1      	uxtb	r1, r2
 800d17e:	687a      	ldr	r2, [r7, #4]
 800d180:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800d182:	193b      	adds	r3, r7, r4
 800d184:	781b      	ldrb	r3, [r3, #0]
 800d186:	3301      	adds	r3, #1
 800d188:	687a      	ldr	r2, [r7, #4]
 800d18a:	5cd1      	ldrb	r1, [r2, r3]
 800d18c:	183b      	adds	r3, r7, r0
 800d18e:	781b      	ldrb	r3, [r3, #0]
 800d190:	3301      	adds	r3, #1
 800d192:	2214      	movs	r2, #20
 800d194:	18ba      	adds	r2, r7, r2
 800d196:	7812      	ldrb	r2, [r2, #0]
 800d198:	404a      	eors	r2, r1
 800d19a:	b2d1      	uxtb	r1, r2
 800d19c:	687a      	ldr	r2, [r7, #4]
 800d19e:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800d1a0:	193b      	adds	r3, r7, r4
 800d1a2:	781b      	ldrb	r3, [r3, #0]
 800d1a4:	3302      	adds	r3, #2
 800d1a6:	687a      	ldr	r2, [r7, #4]
 800d1a8:	5cd1      	ldrb	r1, [r2, r3]
 800d1aa:	183b      	adds	r3, r7, r0
 800d1ac:	781b      	ldrb	r3, [r3, #0]
 800d1ae:	3302      	adds	r3, #2
 800d1b0:	2213      	movs	r2, #19
 800d1b2:	18ba      	adds	r2, r7, r2
 800d1b4:	7812      	ldrb	r2, [r2, #0]
 800d1b6:	404a      	eors	r2, r1
 800d1b8:	b2d1      	uxtb	r1, r2
 800d1ba:	687a      	ldr	r2, [r7, #4]
 800d1bc:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800d1be:	193b      	adds	r3, r7, r4
 800d1c0:	781b      	ldrb	r3, [r3, #0]
 800d1c2:	3303      	adds	r3, #3
 800d1c4:	687a      	ldr	r2, [r7, #4]
 800d1c6:	5cd1      	ldrb	r1, [r2, r3]
 800d1c8:	183b      	adds	r3, r7, r0
 800d1ca:	781b      	ldrb	r3, [r3, #0]
 800d1cc:	3303      	adds	r3, #3
 800d1ce:	2212      	movs	r2, #18
 800d1d0:	18ba      	adds	r2, r7, r2
 800d1d2:	7812      	ldrb	r2, [r2, #0]
 800d1d4:	404a      	eors	r2, r1
 800d1d6:	b2d1      	uxtb	r1, r2
 800d1d8:	687a      	ldr	r2, [r7, #4]
 800d1da:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800d1dc:	183b      	adds	r3, r7, r0
 800d1de:	183a      	adds	r2, r7, r0
 800d1e0:	7812      	ldrb	r2, [r2, #0]
 800d1e2:	3204      	adds	r2, #4
 800d1e4:	701a      	strb	r2, [r3, #0]
 800d1e6:	2317      	movs	r3, #23
 800d1e8:	18fa      	adds	r2, r7, r3
 800d1ea:	2311      	movs	r3, #17
 800d1ec:	18fb      	adds	r3, r7, r3
 800d1ee:	7812      	ldrb	r2, [r2, #0]
 800d1f0:	781b      	ldrb	r3, [r3, #0]
 800d1f2:	429a      	cmp	r2, r3
 800d1f4:	d200      	bcs.n	800d1f8 <lorawan_aes_set_key+0x264>
 800d1f6:	e715      	b.n	800d024 <lorawan_aes_set_key+0x90>
    }
    return 0;
 800d1f8:	2300      	movs	r3, #0
}
 800d1fa:	0018      	movs	r0, r3
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	b007      	add	sp, #28
 800d200:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d202:	46c0      	nop			; (mov r8, r8)
 800d204:	00010101 	.word	0x00010101
 800d208:	0801ef90 	.word	0x0801ef90

0800d20c <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800d20c:	b5b0      	push	{r4, r5, r7, lr}
 800d20e:	b08a      	sub	sp, #40	; 0x28
 800d210:	af00      	add	r7, sp, #0
 800d212:	60f8      	str	r0, [r7, #12]
 800d214:	60b9      	str	r1, [r7, #8]
 800d216:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	22f0      	movs	r2, #240	; 0xf0
 800d21c:	5c9b      	ldrb	r3, [r3, r2]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d039      	beq.n	800d296 <lorawan_aes_encrypt+0x8a>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800d222:	687a      	ldr	r2, [r7, #4]
 800d224:	68f9      	ldr	r1, [r7, #12]
 800d226:	2314      	movs	r3, #20
 800d228:	18fb      	adds	r3, r7, r3
 800d22a:	0018      	movs	r0, r3
 800d22c:	f7ff fb64 	bl	800c8f8 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800d230:	2327      	movs	r3, #39	; 0x27
 800d232:	18fb      	adds	r3, r7, r3
 800d234:	2201      	movs	r2, #1
 800d236:	701a      	strb	r2, [r3, #0]
 800d238:	e014      	b.n	800d264 <lorawan_aes_encrypt+0x58>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800d23a:	2514      	movs	r5, #20
 800d23c:	197b      	adds	r3, r7, r5
 800d23e:	0018      	movs	r0, r3
 800d240:	f7ff fcc2 	bl	800cbc8 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	2427      	movs	r4, #39	; 0x27
 800d248:	193a      	adds	r2, r7, r4
 800d24a:	7812      	ldrb	r2, [r2, #0]
 800d24c:	0112      	lsls	r2, r2, #4
 800d24e:	189a      	adds	r2, r3, r2
 800d250:	197b      	adds	r3, r7, r5
 800d252:	0011      	movs	r1, r2
 800d254:	0018      	movs	r0, r3
 800d256:	f7ff fc06 	bl	800ca66 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800d25a:	193b      	adds	r3, r7, r4
 800d25c:	193a      	adds	r2, r7, r4
 800d25e:	7812      	ldrb	r2, [r2, #0]
 800d260:	3201      	adds	r2, #1
 800d262:	701a      	strb	r2, [r3, #0]
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	22f0      	movs	r2, #240	; 0xf0
 800d268:	5c9b      	ldrb	r3, [r3, r2]
 800d26a:	2427      	movs	r4, #39	; 0x27
 800d26c:	193a      	adds	r2, r7, r4
 800d26e:	7812      	ldrb	r2, [r2, #0]
 800d270:	429a      	cmp	r2, r3
 800d272:	d3e2      	bcc.n	800d23a <lorawan_aes_encrypt+0x2e>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800d274:	2514      	movs	r5, #20
 800d276:	197b      	adds	r3, r7, r5
 800d278:	0018      	movs	r0, r3
 800d27a:	f7ff fc03 	bl	800ca84 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	193a      	adds	r2, r7, r4
 800d282:	7812      	ldrb	r2, [r2, #0]
 800d284:	0112      	lsls	r2, r2, #4
 800d286:	189a      	adds	r2, r3, r2
 800d288:	1979      	adds	r1, r7, r5
 800d28a:	68bb      	ldr	r3, [r7, #8]
 800d28c:	0018      	movs	r0, r3
 800d28e:	f7ff fb33 	bl	800c8f8 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800d292:	2300      	movs	r3, #0
 800d294:	e000      	b.n	800d298 <lorawan_aes_encrypt+0x8c>
        return ( uint8_t )-1;
 800d296:	23ff      	movs	r3, #255	; 0xff
}
 800d298:	0018      	movs	r0, r3
 800d29a:	46bd      	mov	sp, r7
 800d29c:	b00a      	add	sp, #40	; 0x28
 800d29e:	bdb0      	pop	{r4, r5, r7, pc}

0800d2a0 <GetKeyByID>:
 * \param[IN]  keyID          - Key identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID(KeyIdentifier_t keyID, Key_t **keyItem)
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b084      	sub	sp, #16
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	0002      	movs	r2, r0
 800d2a8:	6039      	str	r1, [r7, #0]
 800d2aa:	1dfb      	adds	r3, r7, #7
 800d2ac:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800d2ae:	230f      	movs	r3, #15
 800d2b0:	18fb      	adds	r3, r7, r3
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	701a      	strb	r2, [r3, #0]
 800d2b6:	e020      	b.n	800d2fa <GetKeyByID+0x5a>
  {
    if (SeNvmCtx.KeyList[i].KeyID == keyID)
 800d2b8:	200f      	movs	r0, #15
 800d2ba:	183b      	adds	r3, r7, r0
 800d2bc:	781a      	ldrb	r2, [r3, #0]
 800d2be:	4914      	ldr	r1, [pc, #80]	; (800d310 <GetKeyByID+0x70>)
 800d2c0:	0013      	movs	r3, r2
 800d2c2:	011b      	lsls	r3, r3, #4
 800d2c4:	189b      	adds	r3, r3, r2
 800d2c6:	18cb      	adds	r3, r1, r3
 800d2c8:	3310      	adds	r3, #16
 800d2ca:	781b      	ldrb	r3, [r3, #0]
 800d2cc:	1dfa      	adds	r2, r7, #7
 800d2ce:	7812      	ldrb	r2, [r2, #0]
 800d2d0:	429a      	cmp	r2, r3
 800d2d2:	d10c      	bne.n	800d2ee <GetKeyByID+0x4e>
    {
      *keyItem = &(SeNvmCtx.KeyList[i]);
 800d2d4:	183b      	adds	r3, r7, r0
 800d2d6:	781a      	ldrb	r2, [r3, #0]
 800d2d8:	0013      	movs	r3, r2
 800d2da:	011b      	lsls	r3, r3, #4
 800d2dc:	189b      	adds	r3, r3, r2
 800d2de:	3310      	adds	r3, #16
 800d2e0:	001a      	movs	r2, r3
 800d2e2:	4b0b      	ldr	r3, [pc, #44]	; (800d310 <GetKeyByID+0x70>)
 800d2e4:	18d2      	adds	r2, r2, r3
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	601a      	str	r2, [r3, #0]
      return SECURE_ELEMENT_SUCCESS;
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	e00b      	b.n	800d306 <GetKeyByID+0x66>
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800d2ee:	210f      	movs	r1, #15
 800d2f0:	187b      	adds	r3, r7, r1
 800d2f2:	781a      	ldrb	r2, [r3, #0]
 800d2f4:	187b      	adds	r3, r7, r1
 800d2f6:	3201      	adds	r2, #1
 800d2f8:	701a      	strb	r2, [r3, #0]
 800d2fa:	230f      	movs	r3, #15
 800d2fc:	18fb      	adds	r3, r7, r3
 800d2fe:	781b      	ldrb	r3, [r3, #0]
 800d300:	2b09      	cmp	r3, #9
 800d302:	d9d9      	bls.n	800d2b8 <GetKeyByID+0x18>
    }
  }
  return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d304:	2303      	movs	r3, #3
}
 800d306:	0018      	movs	r0, r3
 800d308:	46bd      	mov	sp, r7
 800d30a:	b004      	add	sp, #16
 800d30c:	bd80      	pop	{r7, pc}
 800d30e:	46c0      	nop			; (mov r8, r8)
 800d310:	2000007c 	.word	0x2000007c

0800d314 <DummyCB>:

/*
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB(void)
{
 800d314:	b580      	push	{r7, lr}
 800d316:	af00      	add	r7, sp, #0
  return;
 800d318:	46c0      	nop			; (mov r8, r8)
}
 800d31a:	46bd      	mov	sp, r7
 800d31c:	bd80      	pop	{r7, pc}
	...

0800d320 <ComputeCmac>:
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                         uint32_t *cmac)
{
 800d320:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d322:	b0d1      	sub	sp, #324	; 0x144
 800d324:	af00      	add	r7, sp, #0
 800d326:	60f8      	str	r0, [r7, #12]
 800d328:	60b9      	str	r1, [r7, #8]
 800d32a:	0019      	movs	r1, r3
 800d32c:	4b40      	ldr	r3, [pc, #256]	; (800d430 <ComputeCmac+0x110>)
 800d32e:	20a0      	movs	r0, #160	; 0xa0
 800d330:	0040      	lsls	r0, r0, #1
 800d332:	4684      	mov	ip, r0
 800d334:	44bc      	add	ip, r7
 800d336:	4463      	add	r3, ip
 800d338:	801a      	strh	r2, [r3, #0]
 800d33a:	4b3e      	ldr	r3, [pc, #248]	; (800d434 <ComputeCmac+0x114>)
 800d33c:	22a0      	movs	r2, #160	; 0xa0
 800d33e:	0052      	lsls	r2, r2, #1
 800d340:	4694      	mov	ip, r2
 800d342:	44bc      	add	ip, r7
 800d344:	4463      	add	r3, ip
 800d346:	1c0a      	adds	r2, r1, #0
 800d348:	701a      	strb	r2, [r3, #0]
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800d34a:	2340      	movs	r3, #64	; 0x40
 800d34c:	33ff      	adds	r3, #255	; 0xff
 800d34e:	18fb      	adds	r3, r7, r3
 800d350:	2206      	movs	r2, #6
 800d352:	701a      	strb	r2, [r3, #0]
  if ((buffer == NULL) || (cmac == NULL))
 800d354:	68bb      	ldr	r3, [r7, #8]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d008      	beq.n	800d36c <ComputeCmac+0x4c>
 800d35a:	23a8      	movs	r3, #168	; 0xa8
 800d35c:	005b      	lsls	r3, r3, #1
 800d35e:	2208      	movs	r2, #8
 800d360:	4694      	mov	ip, r2
 800d362:	44bc      	add	ip, r7
 800d364:	4463      	add	r3, ip
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d101      	bne.n	800d370 <ComputeCmac+0x50>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800d36c:	2302      	movs	r3, #2
 800d36e:	e05a      	b.n	800d426 <ComputeCmac+0x106>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  uint8_t Cmac[16];
  AES_CMAC_CTX aesCmacCtx[1];

  AES_CMAC_Init(aesCmacCtx);
 800d370:	2514      	movs	r5, #20
 800d372:	197b      	adds	r3, r7, r5
 800d374:	0018      	movs	r0, r3
 800d376:	f7fe ff39 	bl	800c1ec <AES_CMAC_Init>

  Key_t *keyItem;
  retval = GetKeyByID(keyID, &keyItem);
 800d37a:	2640      	movs	r6, #64	; 0x40
 800d37c:	36ff      	adds	r6, #255	; 0xff
 800d37e:	19bc      	adds	r4, r7, r6
 800d380:	2310      	movs	r3, #16
 800d382:	18fa      	adds	r2, r7, r3
 800d384:	4b2b      	ldr	r3, [pc, #172]	; (800d434 <ComputeCmac+0x114>)
 800d386:	21a0      	movs	r1, #160	; 0xa0
 800d388:	0049      	lsls	r1, r1, #1
 800d38a:	468c      	mov	ip, r1
 800d38c:	44bc      	add	ip, r7
 800d38e:	4463      	add	r3, ip
 800d390:	781b      	ldrb	r3, [r3, #0]
 800d392:	0011      	movs	r1, r2
 800d394:	0018      	movs	r0, r3
 800d396:	f7ff ff83 	bl	800d2a0 <GetKeyByID>
 800d39a:	0003      	movs	r3, r0
 800d39c:	7023      	strb	r3, [r4, #0]

  if (retval == SECURE_ELEMENT_SUCCESS)
 800d39e:	19bb      	adds	r3, r7, r6
 800d3a0:	781b      	ldrb	r3, [r3, #0]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d13b      	bne.n	800d41e <ComputeCmac+0xfe>
  {
    AES_CMAC_SetKey(aesCmacCtx, keyItem->KeyValue);
 800d3a6:	693b      	ldr	r3, [r7, #16]
 800d3a8:	1c5a      	adds	r2, r3, #1
 800d3aa:	197b      	adds	r3, r7, r5
 800d3ac:	0011      	movs	r1, r2
 800d3ae:	0018      	movs	r0, r3
 800d3b0:	f7fe ff36 	bl	800c220 <AES_CMAC_SetKey>

    if (micBxBuffer != NULL)
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d005      	beq.n	800d3c6 <ComputeCmac+0xa6>
    {
      AES_CMAC_Update(aesCmacCtx, micBxBuffer, 16);
 800d3ba:	68f9      	ldr	r1, [r7, #12]
 800d3bc:	197b      	adds	r3, r7, r5
 800d3be:	2210      	movs	r2, #16
 800d3c0:	0018      	movs	r0, r3
 800d3c2:	f7fe ff3c 	bl	800c23e <AES_CMAC_Update>
    }

    AES_CMAC_Update(aesCmacCtx, buffer, size);
 800d3c6:	4b1a      	ldr	r3, [pc, #104]	; (800d430 <ComputeCmac+0x110>)
 800d3c8:	22a0      	movs	r2, #160	; 0xa0
 800d3ca:	0052      	lsls	r2, r2, #1
 800d3cc:	4694      	mov	ip, r2
 800d3ce:	44bc      	add	ip, r7
 800d3d0:	4463      	add	r3, ip
 800d3d2:	881a      	ldrh	r2, [r3, #0]
 800d3d4:	68b9      	ldr	r1, [r7, #8]
 800d3d6:	2414      	movs	r4, #20
 800d3d8:	193b      	adds	r3, r7, r4
 800d3da:	0018      	movs	r0, r3
 800d3dc:	f7fe ff2f 	bl	800c23e <AES_CMAC_Update>

    AES_CMAC_Final(Cmac, aesCmacCtx);
 800d3e0:	193a      	adds	r2, r7, r4
 800d3e2:	2496      	movs	r4, #150	; 0x96
 800d3e4:	0064      	lsls	r4, r4, #1
 800d3e6:	193b      	adds	r3, r7, r4
 800d3e8:	0011      	movs	r1, r2
 800d3ea:	0018      	movs	r0, r3
 800d3ec:	f7fe ffef 	bl	800c3ce <AES_CMAC_Final>

    /* Bring into the required format */
    *cmac = (uint32_t)((uint32_t) Cmac[3] << 24 | (uint32_t) Cmac[2] << 16 | (uint32_t) Cmac[1] << 8 |
 800d3f0:	0021      	movs	r1, r4
 800d3f2:	187b      	adds	r3, r7, r1
 800d3f4:	78db      	ldrb	r3, [r3, #3]
 800d3f6:	061a      	lsls	r2, r3, #24
 800d3f8:	187b      	adds	r3, r7, r1
 800d3fa:	789b      	ldrb	r3, [r3, #2]
 800d3fc:	041b      	lsls	r3, r3, #16
 800d3fe:	431a      	orrs	r2, r3
 800d400:	187b      	adds	r3, r7, r1
 800d402:	785b      	ldrb	r3, [r3, #1]
 800d404:	021b      	lsls	r3, r3, #8
 800d406:	4313      	orrs	r3, r2
                       (uint32_t) Cmac[0]);
 800d408:	187a      	adds	r2, r7, r1
 800d40a:	7812      	ldrb	r2, [r2, #0]
    *cmac = (uint32_t)((uint32_t) Cmac[3] << 24 | (uint32_t) Cmac[2] << 16 | (uint32_t) Cmac[1] << 8 |
 800d40c:	431a      	orrs	r2, r3
 800d40e:	23a8      	movs	r3, #168	; 0xa8
 800d410:	005b      	lsls	r3, r3, #1
 800d412:	2108      	movs	r1, #8
 800d414:	468c      	mov	ip, r1
 800d416:	44bc      	add	ip, r7
 800d418:	4463      	add	r3, ip
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	601a      	str	r2, [r3, #0]
  {
    retval = SECURE_ELEMENT_ERROR;
  }
#endif /* LORAWAN_KMS */

  return retval;
 800d41e:	2340      	movs	r3, #64	; 0x40
 800d420:	33ff      	adds	r3, #255	; 0xff
 800d422:	18fb      	adds	r3, r7, r3
 800d424:	781b      	ldrb	r3, [r3, #0]
}
 800d426:	0018      	movs	r0, r3
 800d428:	46bd      	mov	sp, r7
 800d42a:	b051      	add	sp, #324	; 0x144
 800d42c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d42e:	46c0      	nop			; (mov r8, r8)
 800d430:	fffffec6 	.word	0xfffffec6
 800d434:	fffffec5 	.word	0xfffffec5

0800d438 <SecureElementInit>:
/*
 * API functions
 */

SecureElementStatus_t SecureElementInit(SecureElementNvmEvent seNvmCtxChanged)
{
 800d438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d43a:	46de      	mov	lr, fp
 800d43c:	4657      	mov	r7, sl
 800d43e:	464e      	mov	r6, r9
 800d440:	4645      	mov	r5, r8
 800d442:	b5e0      	push	{r5, r6, r7, lr}
 800d444:	b099      	sub	sp, #100	; 0x64
 800d446:	af10      	add	r7, sp, #64	; 0x40
 800d448:	6178      	str	r0, [r7, #20]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  Key_t *keyItem;
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800d44a:	250f      	movs	r5, #15
 800d44c:	2610      	movs	r6, #16
 800d44e:	19bb      	adds	r3, r7, r6
 800d450:	195b      	adds	r3, r3, r5
 800d452:	2206      	movs	r2, #6
 800d454:	701a      	strb	r2, [r3, #0]

  /* Initialize LoRaWAN Key List buffer */
  memcpy1((uint8_t *)(SeNvmCtx.KeyList), (const uint8_t *)InitialKeyList, sizeof(Key_t)*NUM_OF_KEYS);
 800d456:	49dd      	ldr	r1, [pc, #884]	; (800d7cc <SecureElementInit+0x394>)
 800d458:	4bdd      	ldr	r3, [pc, #884]	; (800d7d0 <SecureElementInit+0x398>)
 800d45a:	22aa      	movs	r2, #170	; 0xaa
 800d45c:	0018      	movs	r0, r3
 800d45e:	f00c f871 	bl	8019544 <memcpy1>

  retval = GetKeyByID(APP_KEY, &keyItem);
 800d462:	19bb      	adds	r3, r7, r6
 800d464:	195c      	adds	r4, r3, r5
 800d466:	2308      	movs	r3, #8
 800d468:	2210      	movs	r2, #16
 800d46a:	4694      	mov	ip, r2
 800d46c:	44bc      	add	ip, r7
 800d46e:	4463      	add	r3, ip
 800d470:	0019      	movs	r1, r3
 800d472:	2000      	movs	r0, #0
 800d474:	f7ff ff14 	bl	800d2a0 <GetKeyByID>
 800d478:	0003      	movs	r3, r0
 800d47a:	7023      	strb	r3, [r4, #0]
  KEY_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800d47c:	4bd5      	ldr	r3, [pc, #852]	; (800d7d4 <SecureElementInit+0x39c>)
 800d47e:	2200      	movs	r2, #0
 800d480:	2100      	movs	r1, #0
 800d482:	2002      	movs	r0, #2
 800d484:	f00e fcd2 	bl	801be2c <UTIL_ADV_TRACE_COND_FSend>
  if (retval == SECURE_ELEMENT_SUCCESS)
 800d488:	19bb      	adds	r3, r7, r6
 800d48a:	195b      	adds	r3, r3, r5
 800d48c:	781b      	ldrb	r3, [r3, #0]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d14f      	bne.n	800d532 <SecureElementInit+0xfa>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### AppKey:  %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\r\n", HEX16(keyItem->KeyValue));
 800d492:	69bb      	ldr	r3, [r7, #24]
 800d494:	785b      	ldrb	r3, [r3, #1]
 800d496:	001d      	movs	r5, r3
 800d498:	69bb      	ldr	r3, [r7, #24]
 800d49a:	789b      	ldrb	r3, [r3, #2]
 800d49c:	001e      	movs	r6, r3
 800d49e:	69bb      	ldr	r3, [r7, #24]
 800d4a0:	78db      	ldrb	r3, [r3, #3]
 800d4a2:	469c      	mov	ip, r3
 800d4a4:	69bb      	ldr	r3, [r7, #24]
 800d4a6:	791b      	ldrb	r3, [r3, #4]
 800d4a8:	4698      	mov	r8, r3
 800d4aa:	69bb      	ldr	r3, [r7, #24]
 800d4ac:	795b      	ldrb	r3, [r3, #5]
 800d4ae:	4699      	mov	r9, r3
 800d4b0:	69bb      	ldr	r3, [r7, #24]
 800d4b2:	799b      	ldrb	r3, [r3, #6]
 800d4b4:	469a      	mov	sl, r3
 800d4b6:	69bb      	ldr	r3, [r7, #24]
 800d4b8:	79db      	ldrb	r3, [r3, #7]
 800d4ba:	469b      	mov	fp, r3
 800d4bc:	69bb      	ldr	r3, [r7, #24]
 800d4be:	7a1b      	ldrb	r3, [r3, #8]
 800d4c0:	613b      	str	r3, [r7, #16]
 800d4c2:	69bb      	ldr	r3, [r7, #24]
 800d4c4:	7a5b      	ldrb	r3, [r3, #9]
 800d4c6:	60fb      	str	r3, [r7, #12]
 800d4c8:	69bb      	ldr	r3, [r7, #24]
 800d4ca:	7a9b      	ldrb	r3, [r3, #10]
 800d4cc:	60bb      	str	r3, [r7, #8]
 800d4ce:	69bb      	ldr	r3, [r7, #24]
 800d4d0:	7adb      	ldrb	r3, [r3, #11]
 800d4d2:	607b      	str	r3, [r7, #4]
 800d4d4:	69bb      	ldr	r3, [r7, #24]
 800d4d6:	7b1b      	ldrb	r3, [r3, #12]
 800d4d8:	603b      	str	r3, [r7, #0]
 800d4da:	69bb      	ldr	r3, [r7, #24]
 800d4dc:	7b5b      	ldrb	r3, [r3, #13]
 800d4de:	001c      	movs	r4, r3
 800d4e0:	69bb      	ldr	r3, [r7, #24]
 800d4e2:	7b9b      	ldrb	r3, [r3, #14]
 800d4e4:	0018      	movs	r0, r3
 800d4e6:	69bb      	ldr	r3, [r7, #24]
 800d4e8:	7bdb      	ldrb	r3, [r3, #15]
 800d4ea:	0019      	movs	r1, r3
 800d4ec:	69bb      	ldr	r3, [r7, #24]
 800d4ee:	7c1b      	ldrb	r3, [r3, #16]
 800d4f0:	4ab9      	ldr	r2, [pc, #740]	; (800d7d8 <SecureElementInit+0x3a0>)
 800d4f2:	930f      	str	r3, [sp, #60]	; 0x3c
 800d4f4:	910e      	str	r1, [sp, #56]	; 0x38
 800d4f6:	900d      	str	r0, [sp, #52]	; 0x34
 800d4f8:	940c      	str	r4, [sp, #48]	; 0x30
 800d4fa:	6839      	ldr	r1, [r7, #0]
 800d4fc:	910b      	str	r1, [sp, #44]	; 0x2c
 800d4fe:	6879      	ldr	r1, [r7, #4]
 800d500:	910a      	str	r1, [sp, #40]	; 0x28
 800d502:	68b9      	ldr	r1, [r7, #8]
 800d504:	9109      	str	r1, [sp, #36]	; 0x24
 800d506:	68f9      	ldr	r1, [r7, #12]
 800d508:	9108      	str	r1, [sp, #32]
 800d50a:	693b      	ldr	r3, [r7, #16]
 800d50c:	9307      	str	r3, [sp, #28]
 800d50e:	465b      	mov	r3, fp
 800d510:	9306      	str	r3, [sp, #24]
 800d512:	4653      	mov	r3, sl
 800d514:	9305      	str	r3, [sp, #20]
 800d516:	464b      	mov	r3, r9
 800d518:	9304      	str	r3, [sp, #16]
 800d51a:	4643      	mov	r3, r8
 800d51c:	9303      	str	r3, [sp, #12]
 800d51e:	4663      	mov	r3, ip
 800d520:	9302      	str	r3, [sp, #8]
 800d522:	9601      	str	r6, [sp, #4]
 800d524:	9500      	str	r5, [sp, #0]
 800d526:	0013      	movs	r3, r2
 800d528:	2200      	movs	r2, #0
 800d52a:	2100      	movs	r1, #0
 800d52c:	2002      	movs	r0, #2
 800d52e:	f00e fc7d 	bl	801be2c <UTIL_ADV_TRACE_COND_FSend>
  }
  retval = GetKeyByID(NWK_KEY, &keyItem);
 800d532:	250f      	movs	r5, #15
 800d534:	2610      	movs	r6, #16
 800d536:	19bb      	adds	r3, r7, r6
 800d538:	195c      	adds	r4, r3, r5
 800d53a:	2308      	movs	r3, #8
 800d53c:	2210      	movs	r2, #16
 800d53e:	4694      	mov	ip, r2
 800d540:	44bc      	add	ip, r7
 800d542:	4463      	add	r3, ip
 800d544:	0019      	movs	r1, r3
 800d546:	2001      	movs	r0, #1
 800d548:	f7ff feaa 	bl	800d2a0 <GetKeyByID>
 800d54c:	0003      	movs	r3, r0
 800d54e:	7023      	strb	r3, [r4, #0]
  if (retval == SECURE_ELEMENT_SUCCESS)
 800d550:	19bb      	adds	r3, r7, r6
 800d552:	195b      	adds	r3, r3, r5
 800d554:	781b      	ldrb	r3, [r3, #0]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d14f      	bne.n	800d5fa <SecureElementInit+0x1c2>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:  %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\r\n", HEX16(keyItem->KeyValue));
 800d55a:	69bb      	ldr	r3, [r7, #24]
 800d55c:	785b      	ldrb	r3, [r3, #1]
 800d55e:	001d      	movs	r5, r3
 800d560:	69bb      	ldr	r3, [r7, #24]
 800d562:	789b      	ldrb	r3, [r3, #2]
 800d564:	001e      	movs	r6, r3
 800d566:	69bb      	ldr	r3, [r7, #24]
 800d568:	78db      	ldrb	r3, [r3, #3]
 800d56a:	469c      	mov	ip, r3
 800d56c:	69bb      	ldr	r3, [r7, #24]
 800d56e:	791b      	ldrb	r3, [r3, #4]
 800d570:	4698      	mov	r8, r3
 800d572:	69bb      	ldr	r3, [r7, #24]
 800d574:	795b      	ldrb	r3, [r3, #5]
 800d576:	4699      	mov	r9, r3
 800d578:	69bb      	ldr	r3, [r7, #24]
 800d57a:	799b      	ldrb	r3, [r3, #6]
 800d57c:	469a      	mov	sl, r3
 800d57e:	69bb      	ldr	r3, [r7, #24]
 800d580:	79db      	ldrb	r3, [r3, #7]
 800d582:	469b      	mov	fp, r3
 800d584:	69bb      	ldr	r3, [r7, #24]
 800d586:	7a1b      	ldrb	r3, [r3, #8]
 800d588:	613b      	str	r3, [r7, #16]
 800d58a:	69bb      	ldr	r3, [r7, #24]
 800d58c:	7a5b      	ldrb	r3, [r3, #9]
 800d58e:	60fb      	str	r3, [r7, #12]
 800d590:	69bb      	ldr	r3, [r7, #24]
 800d592:	7a9b      	ldrb	r3, [r3, #10]
 800d594:	60bb      	str	r3, [r7, #8]
 800d596:	69bb      	ldr	r3, [r7, #24]
 800d598:	7adb      	ldrb	r3, [r3, #11]
 800d59a:	607b      	str	r3, [r7, #4]
 800d59c:	69bb      	ldr	r3, [r7, #24]
 800d59e:	7b1b      	ldrb	r3, [r3, #12]
 800d5a0:	603b      	str	r3, [r7, #0]
 800d5a2:	69bb      	ldr	r3, [r7, #24]
 800d5a4:	7b5b      	ldrb	r3, [r3, #13]
 800d5a6:	001c      	movs	r4, r3
 800d5a8:	69bb      	ldr	r3, [r7, #24]
 800d5aa:	7b9b      	ldrb	r3, [r3, #14]
 800d5ac:	0018      	movs	r0, r3
 800d5ae:	69bb      	ldr	r3, [r7, #24]
 800d5b0:	7bdb      	ldrb	r3, [r3, #15]
 800d5b2:	0019      	movs	r1, r3
 800d5b4:	69bb      	ldr	r3, [r7, #24]
 800d5b6:	7c1b      	ldrb	r3, [r3, #16]
 800d5b8:	4a88      	ldr	r2, [pc, #544]	; (800d7dc <SecureElementInit+0x3a4>)
 800d5ba:	930f      	str	r3, [sp, #60]	; 0x3c
 800d5bc:	910e      	str	r1, [sp, #56]	; 0x38
 800d5be:	900d      	str	r0, [sp, #52]	; 0x34
 800d5c0:	940c      	str	r4, [sp, #48]	; 0x30
 800d5c2:	6839      	ldr	r1, [r7, #0]
 800d5c4:	910b      	str	r1, [sp, #44]	; 0x2c
 800d5c6:	6879      	ldr	r1, [r7, #4]
 800d5c8:	910a      	str	r1, [sp, #40]	; 0x28
 800d5ca:	68b9      	ldr	r1, [r7, #8]
 800d5cc:	9109      	str	r1, [sp, #36]	; 0x24
 800d5ce:	68f9      	ldr	r1, [r7, #12]
 800d5d0:	9108      	str	r1, [sp, #32]
 800d5d2:	693b      	ldr	r3, [r7, #16]
 800d5d4:	9307      	str	r3, [sp, #28]
 800d5d6:	465b      	mov	r3, fp
 800d5d8:	9306      	str	r3, [sp, #24]
 800d5da:	4653      	mov	r3, sl
 800d5dc:	9305      	str	r3, [sp, #20]
 800d5de:	464b      	mov	r3, r9
 800d5e0:	9304      	str	r3, [sp, #16]
 800d5e2:	4643      	mov	r3, r8
 800d5e4:	9303      	str	r3, [sp, #12]
 800d5e6:	4663      	mov	r3, ip
 800d5e8:	9302      	str	r3, [sp, #8]
 800d5ea:	9601      	str	r6, [sp, #4]
 800d5ec:	9500      	str	r5, [sp, #0]
 800d5ee:	0013      	movs	r3, r2
 800d5f0:	2200      	movs	r2, #0
 800d5f2:	2100      	movs	r1, #0
 800d5f4:	2002      	movs	r0, #2
 800d5f6:	f00e fc19 	bl	801be2c <UTIL_ADV_TRACE_COND_FSend>
  }
  KEY_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800d5fa:	4b79      	ldr	r3, [pc, #484]	; (800d7e0 <SecureElementInit+0x3a8>)
 800d5fc:	2200      	movs	r2, #0
 800d5fe:	2100      	movs	r1, #0
 800d600:	2002      	movs	r0, #2
 800d602:	f00e fc13 	bl	801be2c <UTIL_ADV_TRACE_COND_FSend>
  retval = GetKeyByID(APP_S_KEY, &keyItem);
 800d606:	250f      	movs	r5, #15
 800d608:	2610      	movs	r6, #16
 800d60a:	19bb      	adds	r3, r7, r6
 800d60c:	195c      	adds	r4, r3, r5
 800d60e:	2308      	movs	r3, #8
 800d610:	2210      	movs	r2, #16
 800d612:	4694      	mov	ip, r2
 800d614:	44bc      	add	ip, r7
 800d616:	4463      	add	r3, ip
 800d618:	0019      	movs	r1, r3
 800d61a:	2003      	movs	r0, #3
 800d61c:	f7ff fe40 	bl	800d2a0 <GetKeyByID>
 800d620:	0003      	movs	r3, r0
 800d622:	7023      	strb	r3, [r4, #0]
  if (retval == SECURE_ELEMENT_SUCCESS)
 800d624:	19bb      	adds	r3, r7, r6
 800d626:	195b      	adds	r3, r3, r5
 800d628:	781b      	ldrb	r3, [r3, #0]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d14f      	bne.n	800d6ce <SecureElementInit+0x296>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### AppSKey: %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\r\n", HEX16(keyItem->KeyValue));
 800d62e:	69bb      	ldr	r3, [r7, #24]
 800d630:	785b      	ldrb	r3, [r3, #1]
 800d632:	001d      	movs	r5, r3
 800d634:	69bb      	ldr	r3, [r7, #24]
 800d636:	789b      	ldrb	r3, [r3, #2]
 800d638:	001e      	movs	r6, r3
 800d63a:	69bb      	ldr	r3, [r7, #24]
 800d63c:	78db      	ldrb	r3, [r3, #3]
 800d63e:	469c      	mov	ip, r3
 800d640:	69bb      	ldr	r3, [r7, #24]
 800d642:	791b      	ldrb	r3, [r3, #4]
 800d644:	4698      	mov	r8, r3
 800d646:	69bb      	ldr	r3, [r7, #24]
 800d648:	795b      	ldrb	r3, [r3, #5]
 800d64a:	4699      	mov	r9, r3
 800d64c:	69bb      	ldr	r3, [r7, #24]
 800d64e:	799b      	ldrb	r3, [r3, #6]
 800d650:	469a      	mov	sl, r3
 800d652:	69bb      	ldr	r3, [r7, #24]
 800d654:	79db      	ldrb	r3, [r3, #7]
 800d656:	469b      	mov	fp, r3
 800d658:	69bb      	ldr	r3, [r7, #24]
 800d65a:	7a1b      	ldrb	r3, [r3, #8]
 800d65c:	613b      	str	r3, [r7, #16]
 800d65e:	69bb      	ldr	r3, [r7, #24]
 800d660:	7a5b      	ldrb	r3, [r3, #9]
 800d662:	60fb      	str	r3, [r7, #12]
 800d664:	69bb      	ldr	r3, [r7, #24]
 800d666:	7a9b      	ldrb	r3, [r3, #10]
 800d668:	60bb      	str	r3, [r7, #8]
 800d66a:	69bb      	ldr	r3, [r7, #24]
 800d66c:	7adb      	ldrb	r3, [r3, #11]
 800d66e:	607b      	str	r3, [r7, #4]
 800d670:	69bb      	ldr	r3, [r7, #24]
 800d672:	7b1b      	ldrb	r3, [r3, #12]
 800d674:	603b      	str	r3, [r7, #0]
 800d676:	69bb      	ldr	r3, [r7, #24]
 800d678:	7b5b      	ldrb	r3, [r3, #13]
 800d67a:	001c      	movs	r4, r3
 800d67c:	69bb      	ldr	r3, [r7, #24]
 800d67e:	7b9b      	ldrb	r3, [r3, #14]
 800d680:	0018      	movs	r0, r3
 800d682:	69bb      	ldr	r3, [r7, #24]
 800d684:	7bdb      	ldrb	r3, [r3, #15]
 800d686:	0019      	movs	r1, r3
 800d688:	69bb      	ldr	r3, [r7, #24]
 800d68a:	7c1b      	ldrb	r3, [r3, #16]
 800d68c:	4a55      	ldr	r2, [pc, #340]	; (800d7e4 <SecureElementInit+0x3ac>)
 800d68e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d690:	910e      	str	r1, [sp, #56]	; 0x38
 800d692:	900d      	str	r0, [sp, #52]	; 0x34
 800d694:	940c      	str	r4, [sp, #48]	; 0x30
 800d696:	6839      	ldr	r1, [r7, #0]
 800d698:	910b      	str	r1, [sp, #44]	; 0x2c
 800d69a:	6879      	ldr	r1, [r7, #4]
 800d69c:	910a      	str	r1, [sp, #40]	; 0x28
 800d69e:	68b9      	ldr	r1, [r7, #8]
 800d6a0:	9109      	str	r1, [sp, #36]	; 0x24
 800d6a2:	68f9      	ldr	r1, [r7, #12]
 800d6a4:	9108      	str	r1, [sp, #32]
 800d6a6:	693b      	ldr	r3, [r7, #16]
 800d6a8:	9307      	str	r3, [sp, #28]
 800d6aa:	465b      	mov	r3, fp
 800d6ac:	9306      	str	r3, [sp, #24]
 800d6ae:	4653      	mov	r3, sl
 800d6b0:	9305      	str	r3, [sp, #20]
 800d6b2:	464b      	mov	r3, r9
 800d6b4:	9304      	str	r3, [sp, #16]
 800d6b6:	4643      	mov	r3, r8
 800d6b8:	9303      	str	r3, [sp, #12]
 800d6ba:	4663      	mov	r3, ip
 800d6bc:	9302      	str	r3, [sp, #8]
 800d6be:	9601      	str	r6, [sp, #4]
 800d6c0:	9500      	str	r5, [sp, #0]
 800d6c2:	0013      	movs	r3, r2
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	2100      	movs	r1, #0
 800d6c8:	2002      	movs	r0, #2
 800d6ca:	f00e fbaf 	bl	801be2c <UTIL_ADV_TRACE_COND_FSend>
  }
  retval = GetKeyByID(NWK_S_KEY, &keyItem);
 800d6ce:	250f      	movs	r5, #15
 800d6d0:	2610      	movs	r6, #16
 800d6d2:	19bb      	adds	r3, r7, r6
 800d6d4:	195c      	adds	r4, r3, r5
 800d6d6:	2308      	movs	r3, #8
 800d6d8:	2210      	movs	r2, #16
 800d6da:	4694      	mov	ip, r2
 800d6dc:	44bc      	add	ip, r7
 800d6de:	4463      	add	r3, ip
 800d6e0:	0019      	movs	r1, r3
 800d6e2:	2002      	movs	r0, #2
 800d6e4:	f7ff fddc 	bl	800d2a0 <GetKeyByID>
 800d6e8:	0003      	movs	r3, r0
 800d6ea:	7023      	strb	r3, [r4, #0]
  if (retval == SECURE_ELEMENT_SUCCESS)
 800d6ec:	19bb      	adds	r3, r7, r6
 800d6ee:	195b      	adds	r3, r3, r5
 800d6f0:	781b      	ldrb	r3, [r3, #0]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d14f      	bne.n	800d796 <SecureElementInit+0x35e>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey: %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\r\n", HEX16(keyItem->KeyValue));
 800d6f6:	69bb      	ldr	r3, [r7, #24]
 800d6f8:	785b      	ldrb	r3, [r3, #1]
 800d6fa:	001d      	movs	r5, r3
 800d6fc:	69bb      	ldr	r3, [r7, #24]
 800d6fe:	789b      	ldrb	r3, [r3, #2]
 800d700:	001e      	movs	r6, r3
 800d702:	69bb      	ldr	r3, [r7, #24]
 800d704:	78db      	ldrb	r3, [r3, #3]
 800d706:	469c      	mov	ip, r3
 800d708:	69bb      	ldr	r3, [r7, #24]
 800d70a:	791b      	ldrb	r3, [r3, #4]
 800d70c:	4698      	mov	r8, r3
 800d70e:	69bb      	ldr	r3, [r7, #24]
 800d710:	795b      	ldrb	r3, [r3, #5]
 800d712:	4699      	mov	r9, r3
 800d714:	69bb      	ldr	r3, [r7, #24]
 800d716:	799b      	ldrb	r3, [r3, #6]
 800d718:	469a      	mov	sl, r3
 800d71a:	69bb      	ldr	r3, [r7, #24]
 800d71c:	79db      	ldrb	r3, [r3, #7]
 800d71e:	469b      	mov	fp, r3
 800d720:	69bb      	ldr	r3, [r7, #24]
 800d722:	7a1b      	ldrb	r3, [r3, #8]
 800d724:	613b      	str	r3, [r7, #16]
 800d726:	69bb      	ldr	r3, [r7, #24]
 800d728:	7a5b      	ldrb	r3, [r3, #9]
 800d72a:	60fb      	str	r3, [r7, #12]
 800d72c:	69bb      	ldr	r3, [r7, #24]
 800d72e:	7a9b      	ldrb	r3, [r3, #10]
 800d730:	60bb      	str	r3, [r7, #8]
 800d732:	69bb      	ldr	r3, [r7, #24]
 800d734:	7adb      	ldrb	r3, [r3, #11]
 800d736:	607b      	str	r3, [r7, #4]
 800d738:	69bb      	ldr	r3, [r7, #24]
 800d73a:	7b1b      	ldrb	r3, [r3, #12]
 800d73c:	603b      	str	r3, [r7, #0]
 800d73e:	69bb      	ldr	r3, [r7, #24]
 800d740:	7b5b      	ldrb	r3, [r3, #13]
 800d742:	001c      	movs	r4, r3
 800d744:	69bb      	ldr	r3, [r7, #24]
 800d746:	7b9b      	ldrb	r3, [r3, #14]
 800d748:	0018      	movs	r0, r3
 800d74a:	69bb      	ldr	r3, [r7, #24]
 800d74c:	7bdb      	ldrb	r3, [r3, #15]
 800d74e:	0019      	movs	r1, r3
 800d750:	69bb      	ldr	r3, [r7, #24]
 800d752:	7c1b      	ldrb	r3, [r3, #16]
 800d754:	4a24      	ldr	r2, [pc, #144]	; (800d7e8 <SecureElementInit+0x3b0>)
 800d756:	930f      	str	r3, [sp, #60]	; 0x3c
 800d758:	910e      	str	r1, [sp, #56]	; 0x38
 800d75a:	900d      	str	r0, [sp, #52]	; 0x34
 800d75c:	940c      	str	r4, [sp, #48]	; 0x30
 800d75e:	6839      	ldr	r1, [r7, #0]
 800d760:	910b      	str	r1, [sp, #44]	; 0x2c
 800d762:	6879      	ldr	r1, [r7, #4]
 800d764:	910a      	str	r1, [sp, #40]	; 0x28
 800d766:	68b9      	ldr	r1, [r7, #8]
 800d768:	9109      	str	r1, [sp, #36]	; 0x24
 800d76a:	68f9      	ldr	r1, [r7, #12]
 800d76c:	9108      	str	r1, [sp, #32]
 800d76e:	693b      	ldr	r3, [r7, #16]
 800d770:	9307      	str	r3, [sp, #28]
 800d772:	465b      	mov	r3, fp
 800d774:	9306      	str	r3, [sp, #24]
 800d776:	4653      	mov	r3, sl
 800d778:	9305      	str	r3, [sp, #20]
 800d77a:	464b      	mov	r3, r9
 800d77c:	9304      	str	r3, [sp, #16]
 800d77e:	4643      	mov	r3, r8
 800d780:	9303      	str	r3, [sp, #12]
 800d782:	4663      	mov	r3, ip
 800d784:	9302      	str	r3, [sp, #8]
 800d786:	9601      	str	r6, [sp, #4]
 800d788:	9500      	str	r5, [sp, #0]
 800d78a:	0013      	movs	r3, r2
 800d78c:	2200      	movs	r2, #0
 800d78e:	2100      	movs	r1, #0
 800d790:	2002      	movs	r0, #2
 800d792:	f00e fb4b 	bl	801be2c <UTIL_ADV_TRACE_COND_FSend>
  SeNvmCtx.KeyList[itr].KeyID = SLOT_RAND_ZERO_KEY;

#endif /* LORAWAN_KMS */

  /* Assign callback */
  if (seNvmCtxChanged != 0)
 800d796:	697b      	ldr	r3, [r7, #20]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d003      	beq.n	800d7a4 <SecureElementInit+0x36c>
  {
    SeNvmCtxChanged = seNvmCtxChanged;
 800d79c:	4b13      	ldr	r3, [pc, #76]	; (800d7ec <SecureElementInit+0x3b4>)
 800d79e:	697a      	ldr	r2, [r7, #20]
 800d7a0:	601a      	str	r2, [r3, #0]
 800d7a2:	e002      	b.n	800d7aa <SecureElementInit+0x372>
  }
  else
  {
    SeNvmCtxChanged = DummyCB;
 800d7a4:	4b11      	ldr	r3, [pc, #68]	; (800d7ec <SecureElementInit+0x3b4>)
 800d7a6:	4a12      	ldr	r2, [pc, #72]	; (800d7f0 <SecureElementInit+0x3b8>)
 800d7a8:	601a      	str	r2, [r3, #0]
  }

#if !defined( SECURE_ELEMENT_PRE_PROVISIONED )
#if ( STATIC_DEVICE_EUI == 0 )
  /* Get a DevEUI from MCU unique ID */
  GetUniqueId(SeNvmCtx.DevEui);
 800d7aa:	4b12      	ldr	r3, [pc, #72]	; (800d7f4 <SecureElementInit+0x3bc>)
 800d7ac:	0018      	movs	r0, r3
 800d7ae:	f7f7 fba0 	bl	8004ef2 <GetUniqueId>
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
  SeNvmCtxChanged();
 800d7b2:	4b0e      	ldr	r3, [pc, #56]	; (800d7ec <SecureElementInit+0x3b4>)
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	4798      	blx	r3

  return SECURE_ELEMENT_SUCCESS;
 800d7b8:	2300      	movs	r3, #0
}
 800d7ba:	0018      	movs	r0, r3
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	b009      	add	sp, #36	; 0x24
 800d7c0:	bcf0      	pop	{r4, r5, r6, r7}
 800d7c2:	46bb      	mov	fp, r7
 800d7c4:	46b2      	mov	sl, r6
 800d7c6:	46a9      	mov	r9, r5
 800d7c8:	46a0      	mov	r8, r4
 800d7ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7cc:	0801f290 	.word	0x0801f290
 800d7d0:	2000008c 	.word	0x2000008c
 800d7d4:	0801f33c 	.word	0x0801f33c
 800d7d8:	0801f354 	.word	0x0801f354
 800d7dc:	0801f3b8 	.word	0x0801f3b8
 800d7e0:	0801f41c 	.word	0x0801f41c
 800d7e4:	0801f434 	.word	0x0801f434
 800d7e8:	0801f498 	.word	0x0801f498
 800d7ec:	20000418 	.word	0x20000418
 800d7f0:	0800d315 	.word	0x0800d315
 800d7f4:	2000007c 	.word	0x2000007c

0800d7f8 <SecureElementRestoreNvmCtx>:
  return SECURE_ELEMENT_SUCCESS;
#endif /* LORAWAN_KMS == 1 */
}

SecureElementStatus_t SecureElementRestoreNvmCtx(void *seNvmCtx)
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b082      	sub	sp, #8
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
  /* Restore nvm context */
  if (seNvmCtx != 0)
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d007      	beq.n	800d816 <SecureElementRestoreNvmCtx+0x1e>
  {
    memcpy1((uint8_t *) &SeNvmCtx, (uint8_t *) seNvmCtx, sizeof(SeNvmCtx));
 800d806:	6879      	ldr	r1, [r7, #4]
 800d808:	4b05      	ldr	r3, [pc, #20]	; (800d820 <SecureElementRestoreNvmCtx+0x28>)
 800d80a:	22ba      	movs	r2, #186	; 0xba
 800d80c:	0018      	movs	r0, r3
 800d80e:	f00b fe99 	bl	8019544 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800d812:	2300      	movs	r3, #0
 800d814:	e000      	b.n	800d818 <SecureElementRestoreNvmCtx+0x20>
  }
  else
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800d816:	2302      	movs	r3, #2
  }
}
 800d818:	0018      	movs	r0, r3
 800d81a:	46bd      	mov	sp, r7
 800d81c:	b002      	add	sp, #8
 800d81e:	bd80      	pop	{r7, pc}
 800d820:	2000007c 	.word	0x2000007c

0800d824 <SecureElementGetNvmCtx>:

void *SecureElementGetNvmCtx(size_t *seNvmCtxSize)
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b082      	sub	sp, #8
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
  *seNvmCtxSize = sizeof(SeNvmCtx);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	22ba      	movs	r2, #186	; 0xba
 800d830:	601a      	str	r2, [r3, #0]
  return &SeNvmCtx;
 800d832:	4b02      	ldr	r3, [pc, #8]	; (800d83c <SecureElementGetNvmCtx+0x18>)
}
 800d834:	0018      	movs	r0, r3
 800d836:	46bd      	mov	sp, r7
 800d838:	b002      	add	sp, #8
 800d83a:	bd80      	pop	{r7, pc}
 800d83c:	2000007c 	.word	0x2000007c

0800d840 <SecureElementSetKey>:

SecureElementStatus_t SecureElementSetKey(KeyIdentifier_t keyID, uint8_t *key)
{
 800d840:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d842:	b089      	sub	sp, #36	; 0x24
 800d844:	af00      	add	r7, sp, #0
 800d846:	0002      	movs	r2, r0
 800d848:	6039      	str	r1, [r7, #0]
 800d84a:	1dfb      	adds	r3, r7, #7
 800d84c:	701a      	strb	r2, [r3, #0]
  if (key == NULL)
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d101      	bne.n	800d858 <SecureElementSetKey+0x18>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800d854:	2302      	movs	r3, #2
 800d856:	e064      	b.n	800d922 <SecureElementSetKey+0xe2>
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800d858:	231f      	movs	r3, #31
 800d85a:	18fb      	adds	r3, r7, r3
 800d85c:	2200      	movs	r2, #0
 800d85e:	701a      	strb	r2, [r3, #0]
 800d860:	e059      	b.n	800d916 <SecureElementSetKey+0xd6>
  {
    if (SeNvmCtx.KeyList[i].KeyID == keyID)
 800d862:	231f      	movs	r3, #31
 800d864:	18fb      	adds	r3, r7, r3
 800d866:	781a      	ldrb	r2, [r3, #0]
 800d868:	4930      	ldr	r1, [pc, #192]	; (800d92c <SecureElementSetKey+0xec>)
 800d86a:	0013      	movs	r3, r2
 800d86c:	011b      	lsls	r3, r3, #4
 800d86e:	189b      	adds	r3, r3, r2
 800d870:	18cb      	adds	r3, r1, r3
 800d872:	3310      	adds	r3, #16
 800d874:	781b      	ldrb	r3, [r3, #0]
 800d876:	1dfa      	adds	r2, r7, #7
 800d878:	7812      	ldrb	r2, [r2, #0]
 800d87a:	429a      	cmp	r2, r3
 800d87c:	d145      	bne.n	800d90a <SecureElementSetKey+0xca>
    {
#if ( LORAMAC_MAX_MC_CTX == 1 )
      if (keyID == MC_KEY_0)
 800d87e:	1dfb      	adds	r3, r7, #7
 800d880:	781b      	ldrb	r3, [r3, #0]
 800d882:	2b80      	cmp	r3, #128	; 0x80
 800d884:	d12c      	bne.n	800d8e0 <SecureElementSetKey+0xa0>
#else /* LORAMAC_MAX_MC_CTX > 1 */
      if ((keyID == MC_KEY_0) || (keyID == MC_KEY_1) || (keyID == MC_KEY_2) || (keyID == MC_KEY_3))
#endif /* LORAMAC_MAX_MC_CTX */
      {
        /* Decrypt the key if its a Mckey */
        SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800d886:	251e      	movs	r5, #30
 800d888:	197b      	adds	r3, r7, r5
 800d88a:	2206      	movs	r2, #6
 800d88c:	701a      	strb	r2, [r3, #0]
        uint8_t decryptedKey[16] = { 0 };
 800d88e:	260c      	movs	r6, #12
 800d890:	19bb      	adds	r3, r7, r6
 800d892:	2200      	movs	r2, #0
 800d894:	601a      	str	r2, [r3, #0]
 800d896:	3304      	adds	r3, #4
 800d898:	220c      	movs	r2, #12
 800d89a:	2100      	movs	r1, #0
 800d89c:	0018      	movs	r0, r3
 800d89e:	f010 fbae 	bl	801dffe <memset>

        retval = SecureElementAesEncrypt(key, 16, MC_KE_KEY, decryptedKey);
 800d8a2:	197c      	adds	r4, r7, r5
 800d8a4:	19bb      	adds	r3, r7, r6
 800d8a6:	6838      	ldr	r0, [r7, #0]
 800d8a8:	227f      	movs	r2, #127	; 0x7f
 800d8aa:	2110      	movs	r1, #16
 800d8ac:	f000 f8a5 	bl	800d9fa <SecureElementAesEncrypt>
 800d8b0:	0003      	movs	r3, r0
 800d8b2:	7023      	strb	r3, [r4, #0]

        memcpy1(SeNvmCtx.KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE);
 800d8b4:	231f      	movs	r3, #31
 800d8b6:	18fb      	adds	r3, r7, r3
 800d8b8:	781a      	ldrb	r2, [r3, #0]
 800d8ba:	0013      	movs	r3, r2
 800d8bc:	011b      	lsls	r3, r3, #4
 800d8be:	189b      	adds	r3, r3, r2
 800d8c0:	3310      	adds	r3, #16
 800d8c2:	001a      	movs	r2, r3
 800d8c4:	4b19      	ldr	r3, [pc, #100]	; (800d92c <SecureElementSetKey+0xec>)
 800d8c6:	18d3      	adds	r3, r2, r3
 800d8c8:	3301      	adds	r3, #1
 800d8ca:	19b9      	adds	r1, r7, r6
 800d8cc:	2210      	movs	r2, #16
 800d8ce:	0018      	movs	r0, r3
 800d8d0:	f00b fe38 	bl	8019544 <memcpy1>
        SeNvmCtxChanged();
 800d8d4:	4b16      	ldr	r3, [pc, #88]	; (800d930 <SecureElementSetKey+0xf0>)
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	4798      	blx	r3

        return retval;
 800d8da:	197b      	adds	r3, r7, r5
 800d8dc:	781b      	ldrb	r3, [r3, #0]
 800d8de:	e020      	b.n	800d922 <SecureElementSetKey+0xe2>
      }
      else
      {
        memcpy1(SeNvmCtx.KeyList[i].KeyValue, key, SE_KEY_SIZE);
 800d8e0:	231f      	movs	r3, #31
 800d8e2:	18fb      	adds	r3, r7, r3
 800d8e4:	781a      	ldrb	r2, [r3, #0]
 800d8e6:	0013      	movs	r3, r2
 800d8e8:	011b      	lsls	r3, r3, #4
 800d8ea:	189b      	adds	r3, r3, r2
 800d8ec:	3310      	adds	r3, #16
 800d8ee:	001a      	movs	r2, r3
 800d8f0:	4b0e      	ldr	r3, [pc, #56]	; (800d92c <SecureElementSetKey+0xec>)
 800d8f2:	18d3      	adds	r3, r2, r3
 800d8f4:	3301      	adds	r3, #1
 800d8f6:	6839      	ldr	r1, [r7, #0]
 800d8f8:	2210      	movs	r2, #16
 800d8fa:	0018      	movs	r0, r3
 800d8fc:	f00b fe22 	bl	8019544 <memcpy1>
        SeNvmCtxChanged();
 800d900:	4b0b      	ldr	r3, [pc, #44]	; (800d930 <SecureElementSetKey+0xf0>)
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	4798      	blx	r3
        return SECURE_ELEMENT_SUCCESS;
 800d906:	2300      	movs	r3, #0
 800d908:	e00b      	b.n	800d922 <SecureElementSetKey+0xe2>
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800d90a:	211f      	movs	r1, #31
 800d90c:	187b      	adds	r3, r7, r1
 800d90e:	781a      	ldrb	r2, [r3, #0]
 800d910:	187b      	adds	r3, r7, r1
 800d912:	3201      	adds	r2, #1
 800d914:	701a      	strb	r2, [r3, #0]
 800d916:	231f      	movs	r3, #31
 800d918:	18fb      	adds	r3, r7, r3
 800d91a:	781b      	ldrb	r3, [r3, #0]
 800d91c:	2b09      	cmp	r3, #9
 800d91e:	d9a0      	bls.n	800d862 <SecureElementSetKey+0x22>
      }
    }
  }
  return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d920:	2303      	movs	r3, #3
#else /* LORAWAN_KMS == 1 */
  /* Indexes are already stored at init or when deriving the key */
  CK_OBJECT_HANDLE keyIndex;
  return GetKeyIndexByID(keyID, &keyIndex);
#endif /* LORAWAN_KMS */
}
 800d922:	0018      	movs	r0, r3
 800d924:	46bd      	mov	sp, r7
 800d926:	b009      	add	sp, #36	; 0x24
 800d928:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d92a:	46c0      	nop			; (mov r8, r8)
 800d92c:	2000007c 	.word	0x2000007c
 800d930:	20000418 	.word	0x20000418

0800d934 <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size,
                                                  KeyIdentifier_t keyID, uint32_t *cmac)
{
 800d934:	b590      	push	{r4, r7, lr}
 800d936:	b087      	sub	sp, #28
 800d938:	af02      	add	r7, sp, #8
 800d93a:	60f8      	str	r0, [r7, #12]
 800d93c:	60b9      	str	r1, [r7, #8]
 800d93e:	0019      	movs	r1, r3
 800d940:	1dbb      	adds	r3, r7, #6
 800d942:	801a      	strh	r2, [r3, #0]
 800d944:	1d7b      	adds	r3, r7, #5
 800d946:	1c0a      	adds	r2, r1, #0
 800d948:	701a      	strb	r2, [r3, #0]
  if (keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS)
 800d94a:	1d7b      	adds	r3, r7, #5
 800d94c:	781b      	ldrb	r3, [r3, #0]
 800d94e:	2b7e      	cmp	r3, #126	; 0x7e
 800d950:	d901      	bls.n	800d956 <SecureElementComputeAesCmac+0x22>
  {
    /* Never accept multicast key identifier for cmac computation */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d952:	2303      	movs	r3, #3
 800d954:	e00b      	b.n	800d96e <SecureElementComputeAesCmac+0x3a>
  }

  return ComputeCmac(micBxBuffer, buffer, size, keyID, cmac);
 800d956:	1d7b      	adds	r3, r7, #5
 800d958:	781c      	ldrb	r4, [r3, #0]
 800d95a:	1dbb      	adds	r3, r7, #6
 800d95c:	881a      	ldrh	r2, [r3, #0]
 800d95e:	68b9      	ldr	r1, [r7, #8]
 800d960:	68f8      	ldr	r0, [r7, #12]
 800d962:	6a3b      	ldr	r3, [r7, #32]
 800d964:	9300      	str	r3, [sp, #0]
 800d966:	0023      	movs	r3, r4
 800d968:	f7ff fcda 	bl	800d320 <ComputeCmac>
 800d96c:	0003      	movs	r3, r0
}
 800d96e:	0018      	movs	r0, r3
 800d970:	46bd      	mov	sp, r7
 800d972:	b005      	add	sp, #20
 800d974:	bd90      	pop	{r4, r7, pc}

0800d976 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac(uint8_t *buffer, uint16_t size, uint32_t expectedCmac,
                                                 KeyIdentifier_t keyID)
{
 800d976:	b5b0      	push	{r4, r5, r7, lr}
 800d978:	b088      	sub	sp, #32
 800d97a:	af02      	add	r7, sp, #8
 800d97c:	60f8      	str	r0, [r7, #12]
 800d97e:	0008      	movs	r0, r1
 800d980:	607a      	str	r2, [r7, #4]
 800d982:	0019      	movs	r1, r3
 800d984:	230a      	movs	r3, #10
 800d986:	18fb      	adds	r3, r7, r3
 800d988:	1c02      	adds	r2, r0, #0
 800d98a:	801a      	strh	r2, [r3, #0]
 800d98c:	2309      	movs	r3, #9
 800d98e:	18fb      	adds	r3, r7, r3
 800d990:	1c0a      	adds	r2, r1, #0
 800d992:	701a      	strb	r2, [r3, #0]
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800d994:	2317      	movs	r3, #23
 800d996:	18fb      	adds	r3, r7, r3
 800d998:	2206      	movs	r2, #6
 800d99a:	701a      	strb	r2, [r3, #0]
  if (buffer == NULL)
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d101      	bne.n	800d9a6 <SecureElementVerifyAesCmac+0x30>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800d9a2:	2302      	movs	r3, #2
 800d9a4:	e025      	b.n	800d9f2 <SecureElementVerifyAesCmac+0x7c>
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  uint32_t compCmac = 0;
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	613b      	str	r3, [r7, #16]

  retval = ComputeCmac(NULL, buffer, size, keyID, &compCmac);
 800d9aa:	2517      	movs	r5, #23
 800d9ac:	197c      	adds	r4, r7, r5
 800d9ae:	2309      	movs	r3, #9
 800d9b0:	18fb      	adds	r3, r7, r3
 800d9b2:	7818      	ldrb	r0, [r3, #0]
 800d9b4:	230a      	movs	r3, #10
 800d9b6:	18fb      	adds	r3, r7, r3
 800d9b8:	881a      	ldrh	r2, [r3, #0]
 800d9ba:	68f9      	ldr	r1, [r7, #12]
 800d9bc:	2310      	movs	r3, #16
 800d9be:	18fb      	adds	r3, r7, r3
 800d9c0:	9300      	str	r3, [sp, #0]
 800d9c2:	0003      	movs	r3, r0
 800d9c4:	2000      	movs	r0, #0
 800d9c6:	f7ff fcab 	bl	800d320 <ComputeCmac>
 800d9ca:	0003      	movs	r3, r0
 800d9cc:	7023      	strb	r3, [r4, #0]
  if (retval != SECURE_ELEMENT_SUCCESS)
 800d9ce:	197b      	adds	r3, r7, r5
 800d9d0:	781b      	ldrb	r3, [r3, #0]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d002      	beq.n	800d9dc <SecureElementVerifyAesCmac+0x66>
  {
    return retval;
 800d9d6:	197b      	adds	r3, r7, r5
 800d9d8:	781b      	ldrb	r3, [r3, #0]
 800d9da:	e00a      	b.n	800d9f2 <SecureElementVerifyAesCmac+0x7c>
  }

  if (expectedCmac != compCmac)
 800d9dc:	693b      	ldr	r3, [r7, #16]
 800d9de:	687a      	ldr	r2, [r7, #4]
 800d9e0:	429a      	cmp	r2, r3
 800d9e2:	d003      	beq.n	800d9ec <SecureElementVerifyAesCmac+0x76>
  {
    retval = SECURE_ELEMENT_FAIL_CMAC;
 800d9e4:	2317      	movs	r3, #23
 800d9e6:	18fb      	adds	r3, r7, r3
 800d9e8:	2201      	movs	r2, #1
 800d9ea:	701a      	strb	r2, [r3, #0]
    retval = SECURE_ELEMENT_ERROR;
  }

#endif /* LORAWAN_KMS */

  return retval;
 800d9ec:	2317      	movs	r3, #23
 800d9ee:	18fb      	adds	r3, r7, r3
 800d9f0:	781b      	ldrb	r3, [r3, #0]
}
 800d9f2:	0018      	movs	r0, r3
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	b006      	add	sp, #24
 800d9f8:	bdb0      	pop	{r4, r5, r7, pc}

0800d9fa <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt(uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                              uint8_t *encBuffer)
{
 800d9fa:	b5b0      	push	{r4, r5, r7, lr}
 800d9fc:	b0c2      	sub	sp, #264	; 0x108
 800d9fe:	af00      	add	r7, sp, #0
 800da00:	60f8      	str	r0, [r7, #12]
 800da02:	0008      	movs	r0, r1
 800da04:	0011      	movs	r1, r2
 800da06:	607b      	str	r3, [r7, #4]
 800da08:	230a      	movs	r3, #10
 800da0a:	18fb      	adds	r3, r7, r3
 800da0c:	1c02      	adds	r2, r0, #0
 800da0e:	801a      	strh	r2, [r3, #0]
 800da10:	2309      	movs	r3, #9
 800da12:	18fb      	adds	r3, r7, r3
 800da14:	1c0a      	adds	r2, r1, #0
 800da16:	701a      	strb	r2, [r3, #0]
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800da18:	1dfb      	adds	r3, r7, #7
 800da1a:	33ff      	adds	r3, #255	; 0xff
 800da1c:	2206      	movs	r2, #6
 800da1e:	701a      	strb	r2, [r3, #0]
  if (buffer == NULL || encBuffer == NULL)
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d002      	beq.n	800da2c <SecureElementAesEncrypt+0x32>
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d101      	bne.n	800da30 <SecureElementAesEncrypt+0x36>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800da2c:	2302      	movs	r3, #2
 800da2e:	e051      	b.n	800dad4 <SecureElementAesEncrypt+0xda>
  }

  /* Check if the size is divisible by 16 */
  if ((size % 16) != 0)
 800da30:	230a      	movs	r3, #10
 800da32:	18fb      	adds	r3, r7, r3
 800da34:	881b      	ldrh	r3, [r3, #0]
 800da36:	220f      	movs	r2, #15
 800da38:	4013      	ands	r3, r2
 800da3a:	b29b      	uxth	r3, r3
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d001      	beq.n	800da44 <SecureElementAesEncrypt+0x4a>
  {
    return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800da40:	2305      	movs	r3, #5
 800da42:	e047      	b.n	800dad4 <SecureElementAesEncrypt+0xda>
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  lorawan_aes_context aesContext;
  memset1(aesContext.ksch, '\0', 240);
 800da44:	2514      	movs	r5, #20
 800da46:	197b      	adds	r3, r7, r5
 800da48:	22f0      	movs	r2, #240	; 0xf0
 800da4a:	2100      	movs	r1, #0
 800da4c:	0018      	movs	r0, r3
 800da4e:	f00b fdb7 	bl	80195c0 <memset1>

  Key_t *pItem;
  retval = GetKeyByID(keyID, &pItem);
 800da52:	1dfc      	adds	r4, r7, #7
 800da54:	34ff      	adds	r4, #255	; 0xff
 800da56:	2310      	movs	r3, #16
 800da58:	18fa      	adds	r2, r7, r3
 800da5a:	2309      	movs	r3, #9
 800da5c:	18fb      	adds	r3, r7, r3
 800da5e:	781b      	ldrb	r3, [r3, #0]
 800da60:	0011      	movs	r1, r2
 800da62:	0018      	movs	r0, r3
 800da64:	f7ff fc1c 	bl	800d2a0 <GetKeyByID>
 800da68:	0003      	movs	r3, r0
 800da6a:	7023      	strb	r3, [r4, #0]

  if (retval == SECURE_ELEMENT_SUCCESS)
 800da6c:	1dfb      	adds	r3, r7, #7
 800da6e:	33ff      	adds	r3, #255	; 0xff
 800da70:	781b      	ldrb	r3, [r3, #0]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d12b      	bne.n	800dace <SecureElementAesEncrypt+0xd4>
  {
    lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800da76:	693b      	ldr	r3, [r7, #16]
 800da78:	3301      	adds	r3, #1
 800da7a:	197a      	adds	r2, r7, r5
 800da7c:	2110      	movs	r1, #16
 800da7e:	0018      	movs	r0, r3
 800da80:	f7ff fa88 	bl	800cf94 <lorawan_aes_set_key>

    uint8_t block = 0;
 800da84:	2308      	movs	r3, #8
 800da86:	33ff      	adds	r3, #255	; 0xff
 800da88:	18fb      	adds	r3, r7, r3
 800da8a:	2200      	movs	r2, #0
 800da8c:	701a      	strb	r2, [r3, #0]

    while (size != 0)
 800da8e:	e019      	b.n	800dac4 <SecureElementAesEncrypt+0xca>
    {
      lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800da90:	2408      	movs	r4, #8
 800da92:	34ff      	adds	r4, #255	; 0xff
 800da94:	193b      	adds	r3, r7, r4
 800da96:	781b      	ldrb	r3, [r3, #0]
 800da98:	68fa      	ldr	r2, [r7, #12]
 800da9a:	18d0      	adds	r0, r2, r3
 800da9c:	193b      	adds	r3, r7, r4
 800da9e:	781b      	ldrb	r3, [r3, #0]
 800daa0:	687a      	ldr	r2, [r7, #4]
 800daa2:	18d3      	adds	r3, r2, r3
 800daa4:	2214      	movs	r2, #20
 800daa6:	18ba      	adds	r2, r7, r2
 800daa8:	0019      	movs	r1, r3
 800daaa:	f7ff fbaf 	bl	800d20c <lorawan_aes_encrypt>
      block = block + 16;
 800daae:	193b      	adds	r3, r7, r4
 800dab0:	193a      	adds	r2, r7, r4
 800dab2:	7812      	ldrb	r2, [r2, #0]
 800dab4:	3210      	adds	r2, #16
 800dab6:	701a      	strb	r2, [r3, #0]
      size = size - 16;
 800dab8:	220a      	movs	r2, #10
 800daba:	18bb      	adds	r3, r7, r2
 800dabc:	18ba      	adds	r2, r7, r2
 800dabe:	8812      	ldrh	r2, [r2, #0]
 800dac0:	3a10      	subs	r2, #16
 800dac2:	801a      	strh	r2, [r3, #0]
    while (size != 0)
 800dac4:	230a      	movs	r3, #10
 800dac6:	18fb      	adds	r3, r7, r3
 800dac8:	881b      	ldrh	r3, [r3, #0]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d1e0      	bne.n	800da90 <SecureElementAesEncrypt+0x96>
  {
    retval = SECURE_ELEMENT_ERROR;
  }
#endif /* LORAWAN_KMS */

  return retval;
 800dace:	1dfb      	adds	r3, r7, #7
 800dad0:	33ff      	adds	r3, #255	; 0xff
 800dad2:	781b      	ldrb	r3, [r3, #0]
}
 800dad4:	0018      	movs	r0, r3
 800dad6:	46bd      	mov	sp, r7
 800dad8:	b042      	add	sp, #264	; 0x108
 800dada:	bdb0      	pop	{r4, r5, r7, pc}

0800dadc <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey(Version_t version, uint8_t *input, KeyIdentifier_t rootKeyID,
                                                     KeyIdentifier_t targetKeyID)
{
 800dadc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dade:	b08b      	sub	sp, #44	; 0x2c
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	60f8      	str	r0, [r7, #12]
 800dae4:	60b9      	str	r1, [r7, #8]
 800dae6:	0019      	movs	r1, r3
 800dae8:	1dfb      	adds	r3, r7, #7
 800daea:	701a      	strb	r2, [r3, #0]
 800daec:	1dbb      	adds	r3, r7, #6
 800daee:	1c0a      	adds	r2, r1, #0
 800daf0:	701a      	strb	r2, [r3, #0]
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800daf2:	2327      	movs	r3, #39	; 0x27
 800daf4:	18fb      	adds	r3, r7, r3
 800daf6:	2206      	movs	r2, #6
 800daf8:	701a      	strb	r2, [r3, #0]
  if (input == NULL)
 800dafa:	68bb      	ldr	r3, [r7, #8]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d101      	bne.n	800db04 <SecureElementDeriveAndStoreKey+0x28>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800db00:	2302      	movs	r3, #2
 800db02:	e03c      	b.n	800db7e <SecureElementDeriveAndStoreKey+0xa2>
  }

  /* In case of MC_KE_KEY, only McRootKey can be used as root key */
  if (targetKeyID == MC_KE_KEY)
 800db04:	1dbb      	adds	r3, r7, #6
 800db06:	781b      	ldrb	r3, [r3, #0]
 800db08:	2b7f      	cmp	r3, #127	; 0x7f
 800db0a:	d105      	bne.n	800db18 <SecureElementDeriveAndStoreKey+0x3c>
  {
    if (rootKeyID != MC_ROOT_KEY)
 800db0c:	1dfb      	adds	r3, r7, #7
 800db0e:	781b      	ldrb	r3, [r3, #0]
 800db10:	2b04      	cmp	r3, #4
 800db12:	d001      	beq.n	800db18 <SecureElementDeriveAndStoreKey+0x3c>
    {
      return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800db14:	2303      	movs	r3, #3
 800db16:	e032      	b.n	800db7e <SecureElementDeriveAndStoreKey+0xa2>
    }
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  uint8_t key[16] = { 0 };
 800db18:	2614      	movs	r6, #20
 800db1a:	19bb      	adds	r3, r7, r6
 800db1c:	2200      	movs	r2, #0
 800db1e:	601a      	str	r2, [r3, #0]
 800db20:	3304      	adds	r3, #4
 800db22:	220c      	movs	r2, #12
 800db24:	2100      	movs	r1, #0
 800db26:	0018      	movs	r0, r3
 800db28:	f010 fa69 	bl	801dffe <memset>
  /* Derive key */
  retval = SecureElementAesEncrypt(input, 16, rootKeyID, key);
 800db2c:	2527      	movs	r5, #39	; 0x27
 800db2e:	197c      	adds	r4, r7, r5
 800db30:	19b9      	adds	r1, r7, r6
 800db32:	1dfb      	adds	r3, r7, #7
 800db34:	781a      	ldrb	r2, [r3, #0]
 800db36:	68b8      	ldr	r0, [r7, #8]
 800db38:	000b      	movs	r3, r1
 800db3a:	2110      	movs	r1, #16
 800db3c:	f7ff ff5d 	bl	800d9fa <SecureElementAesEncrypt>
 800db40:	0003      	movs	r3, r0
 800db42:	7023      	strb	r3, [r4, #0]
  if (retval != SECURE_ELEMENT_SUCCESS)
 800db44:	197b      	adds	r3, r7, r5
 800db46:	781b      	ldrb	r3, [r3, #0]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d002      	beq.n	800db52 <SecureElementDeriveAndStoreKey+0x76>
  {
    return retval;
 800db4c:	197b      	adds	r3, r7, r5
 800db4e:	781b      	ldrb	r3, [r3, #0]
 800db50:	e015      	b.n	800db7e <SecureElementDeriveAndStoreKey+0xa2>
  }

  /* Store key */
  retval = SecureElementSetKey(targetKeyID, key);
 800db52:	2527      	movs	r5, #39	; 0x27
 800db54:	197c      	adds	r4, r7, r5
 800db56:	2314      	movs	r3, #20
 800db58:	18fa      	adds	r2, r7, r3
 800db5a:	1dbb      	adds	r3, r7, #6
 800db5c:	781b      	ldrb	r3, [r3, #0]
 800db5e:	0011      	movs	r1, r2
 800db60:	0018      	movs	r0, r3
 800db62:	f7ff fe6d 	bl	800d840 <SecureElementSetKey>
 800db66:	0003      	movs	r3, r0
 800db68:	7023      	strb	r3, [r4, #0]
  if (retval != SECURE_ELEMENT_SUCCESS)
 800db6a:	197b      	adds	r3, r7, r5
 800db6c:	781b      	ldrb	r3, [r3, #0]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d002      	beq.n	800db78 <SecureElementDeriveAndStoreKey+0x9c>
  {
    return retval;
 800db72:	197b      	adds	r3, r7, r5
 800db74:	781b      	ldrb	r3, [r3, #0]
 800db76:	e002      	b.n	800db7e <SecureElementDeriveAndStoreKey+0xa2>
  {
    retval = SECURE_ELEMENT_ERROR;
  }
#endif /* LORAWAN_KMS */

  return retval;
 800db78:	2327      	movs	r3, #39	; 0x27
 800db7a:	18fb      	adds	r3, r7, r3
 800db7c:	781b      	ldrb	r3, [r3, #0]
}
 800db7e:	0018      	movs	r0, r3
 800db80:	46bd      	mov	sp, r7
 800db82:	b00b      	add	sp, #44	; 0x2c
 800db84:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800db86 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept(JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                     uint16_t devNonce, uint8_t *encJoinAccept,
                                                     uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                     uint8_t *versionMinor)
{
 800db86:	b5b0      	push	{r4, r5, r7, lr}
 800db88:	b086      	sub	sp, #24
 800db8a:	af00      	add	r7, sp, #0
 800db8c:	60b9      	str	r1, [r7, #8]
 800db8e:	0011      	movs	r1, r2
 800db90:	607b      	str	r3, [r7, #4]
 800db92:	230f      	movs	r3, #15
 800db94:	18fb      	adds	r3, r7, r3
 800db96:	1c02      	adds	r2, r0, #0
 800db98:	701a      	strb	r2, [r3, #0]
 800db9a:	230c      	movs	r3, #12
 800db9c:	18fb      	adds	r3, r7, r3
 800db9e:	1c0a      	adds	r2, r1, #0
 800dba0:	801a      	strh	r2, [r3, #0]
  if ((encJoinAccept == NULL) || (decJoinAccept == NULL) || (versionMinor == NULL))
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d005      	beq.n	800dbb4 <SecureElementProcessJoinAccept+0x2e>
 800dba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d002      	beq.n	800dbb4 <SecureElementProcessJoinAccept+0x2e>
 800dbae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d101      	bne.n	800dbb8 <SecureElementProcessJoinAccept+0x32>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800dbb4:	2302      	movs	r3, #2
 800dbb6:	e069      	b.n	800dc8c <SecureElementProcessJoinAccept+0x106>
  }

  /* Check that frame size isn't bigger than a JoinAccept with CFList size */
  if (encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE)
 800dbb8:	2328      	movs	r3, #40	; 0x28
 800dbba:	18fb      	adds	r3, r7, r3
 800dbbc:	781b      	ldrb	r3, [r3, #0]
 800dbbe:	2b21      	cmp	r3, #33	; 0x21
 800dbc0:	d901      	bls.n	800dbc6 <SecureElementProcessJoinAccept+0x40>
  {
    return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800dbc2:	2305      	movs	r3, #5
 800dbc4:	e062      	b.n	800dc8c <SecureElementProcessJoinAccept+0x106>
  }

  /* Determine decryption key */
  KeyIdentifier_t encKeyID = NWK_KEY;
 800dbc6:	2517      	movs	r5, #23
 800dbc8:	197b      	adds	r3, r7, r5
 800dbca:	2201      	movs	r2, #1
 800dbcc:	701a      	strb	r2, [r3, #0]
  {
    encKeyID = J_S_ENC_KEY;
  }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

  memcpy1(decJoinAccept, encJoinAccept, encJoinAcceptSize);
 800dbce:	2428      	movs	r4, #40	; 0x28
 800dbd0:	193b      	adds	r3, r7, r4
 800dbd2:	781b      	ldrb	r3, [r3, #0]
 800dbd4:	b29a      	uxth	r2, r3
 800dbd6:	6879      	ldr	r1, [r7, #4]
 800dbd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbda:	0018      	movs	r0, r3
 800dbdc:	f00b fcb2 	bl	8019544 <memcpy1>

  /* Decrypt JoinAccept, skip MHDR */
  if (SecureElementAesEncrypt(encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	1c58      	adds	r0, r3, #1
 800dbe4:	193b      	adds	r3, r7, r4
 800dbe6:	781b      	ldrb	r3, [r3, #0]
 800dbe8:	b29b      	uxth	r3, r3
 800dbea:	3b01      	subs	r3, #1
 800dbec:	b299      	uxth	r1, r3
 800dbee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbf0:	1c5c      	adds	r4, r3, #1
 800dbf2:	197b      	adds	r3, r7, r5
 800dbf4:	781a      	ldrb	r2, [r3, #0]
 800dbf6:	0023      	movs	r3, r4
 800dbf8:	f7ff feff 	bl	800d9fa <SecureElementAesEncrypt>
 800dbfc:	1e03      	subs	r3, r0, #0
 800dbfe:	d001      	beq.n	800dc04 <SecureElementProcessJoinAccept+0x7e>
                              encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE) != SECURE_ELEMENT_SUCCESS)
  {
    return SECURE_ELEMENT_FAIL_ENCRYPT;
 800dc00:	2307      	movs	r3, #7
 800dc02:	e043      	b.n	800dc8c <SecureElementProcessJoinAccept+0x106>
  }

  *versionMinor = ((decJoinAccept[11] & 0x80) == 0x80) ? 1 : 0;
 800dc04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc06:	330b      	adds	r3, #11
 800dc08:	781b      	ldrb	r3, [r3, #0]
 800dc0a:	09db      	lsrs	r3, r3, #7
 800dc0c:	b2da      	uxtb	r2, r3
 800dc0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc10:	701a      	strb	r2, [r3, #0]

  uint32_t mic = 0;
 800dc12:	2300      	movs	r3, #0
 800dc14:	613b      	str	r3, [r7, #16]

  mic = ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0);
 800dc16:	2128      	movs	r1, #40	; 0x28
 800dc18:	187b      	adds	r3, r7, r1
 800dc1a:	781b      	ldrb	r3, [r3, #0]
 800dc1c:	3b04      	subs	r3, #4
 800dc1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc20:	18d3      	adds	r3, r2, r3
 800dc22:	781b      	ldrb	r3, [r3, #0]
 800dc24:	613b      	str	r3, [r7, #16]
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8);
 800dc26:	187b      	adds	r3, r7, r1
 800dc28:	781b      	ldrb	r3, [r3, #0]
 800dc2a:	3b03      	subs	r3, #3
 800dc2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc2e:	18d3      	adds	r3, r2, r3
 800dc30:	781b      	ldrb	r3, [r3, #0]
 800dc32:	021b      	lsls	r3, r3, #8
 800dc34:	693a      	ldr	r2, [r7, #16]
 800dc36:	4313      	orrs	r3, r2
 800dc38:	613b      	str	r3, [r7, #16]
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16);
 800dc3a:	187b      	adds	r3, r7, r1
 800dc3c:	781b      	ldrb	r3, [r3, #0]
 800dc3e:	3b02      	subs	r3, #2
 800dc40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc42:	18d3      	adds	r3, r2, r3
 800dc44:	781b      	ldrb	r3, [r3, #0]
 800dc46:	041b      	lsls	r3, r3, #16
 800dc48:	693a      	ldr	r2, [r7, #16]
 800dc4a:	4313      	orrs	r3, r2
 800dc4c:	613b      	str	r3, [r7, #16]
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24);
 800dc4e:	187b      	adds	r3, r7, r1
 800dc50:	781b      	ldrb	r3, [r3, #0]
 800dc52:	3b01      	subs	r3, #1
 800dc54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc56:	18d3      	adds	r3, r2, r3
 800dc58:	781b      	ldrb	r3, [r3, #0]
 800dc5a:	061b      	lsls	r3, r3, #24
 800dc5c:	693a      	ldr	r2, [r7, #16]
 800dc5e:	4313      	orrs	r3, r2
 800dc60:	613b      	str	r3, [r7, #16]
  /*  - Header buffer to be used for MIC computation
   *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
   *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)] */

  /* Verify mic */
  if (*versionMinor == 0)
 800dc62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc64:	781b      	ldrb	r3, [r3, #0]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d10d      	bne.n	800dc86 <SecureElementProcessJoinAccept+0x100>
  {
    /* For LoRaWAN 1.0.x
     *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
     *   CFListType) */
    if (SecureElementVerifyAesCmac(decJoinAccept, (encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE), mic, NWK_KEY) !=
 800dc6a:	187b      	adds	r3, r7, r1
 800dc6c:	781b      	ldrb	r3, [r3, #0]
 800dc6e:	b29b      	uxth	r3, r3
 800dc70:	3b04      	subs	r3, #4
 800dc72:	b299      	uxth	r1, r3
 800dc74:	693a      	ldr	r2, [r7, #16]
 800dc76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dc78:	2301      	movs	r3, #1
 800dc7a:	f7ff fe7c 	bl	800d976 <SecureElementVerifyAesCmac>
 800dc7e:	1e03      	subs	r3, r0, #0
 800dc80:	d003      	beq.n	800dc8a <SecureElementProcessJoinAccept+0x104>
        SECURE_ELEMENT_SUCCESS)
    {
      return SECURE_ELEMENT_FAIL_CMAC;
 800dc82:	2301      	movs	r3, #1
 800dc84:	e002      	b.n	800dc8c <SecureElementProcessJoinAccept+0x106>
    }
  }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
  else
  {
    return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800dc86:	2304      	movs	r3, #4
 800dc88:	e000      	b.n	800dc8c <SecureElementProcessJoinAccept+0x106>
  }

  return SECURE_ELEMENT_SUCCESS;
 800dc8a:	2300      	movs	r3, #0
}
 800dc8c:	0018      	movs	r0, r3
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	b006      	add	sp, #24
 800dc92:	bdb0      	pop	{r4, r5, r7, pc}

0800dc94 <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber(uint32_t *randomNum)
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b082      	sub	sp, #8
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
  if (randomNum == NULL)
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d101      	bne.n	800dca6 <SecureElementRandomNumber+0x12>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800dca2:	2302      	movs	r3, #2
 800dca4:	e006      	b.n	800dcb4 <SecureElementRandomNumber+0x20>
  }
  *randomNum = Radio.Random( );
 800dca6:	4b05      	ldr	r3, [pc, #20]	; (800dcbc <SecureElementRandomNumber+0x28>)
 800dca8:	695b      	ldr	r3, [r3, #20]
 800dcaa:	4798      	blx	r3
 800dcac:	0002      	movs	r2, r0
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	601a      	str	r2, [r3, #0]
  return SECURE_ELEMENT_SUCCESS;
 800dcb2:	2300      	movs	r3, #0
}
 800dcb4:	0018      	movs	r0, r3
 800dcb6:	46bd      	mov	sp, r7
 800dcb8:	b002      	add	sp, #8
 800dcba:	bd80      	pop	{r7, pc}
 800dcbc:	0801fb64 	.word	0x0801fb64

0800dcc0 <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui(uint8_t *devEui)
{
 800dcc0:	b580      	push	{r7, lr}
 800dcc2:	b082      	sub	sp, #8
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	6078      	str	r0, [r7, #4]
  if (devEui == NULL)
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d101      	bne.n	800dcd2 <SecureElementSetDevEui+0x12>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800dcce:	2302      	movs	r3, #2
 800dcd0:	e009      	b.n	800dce6 <SecureElementSetDevEui+0x26>
  }
  memcpy1(SeNvmCtx.DevEui, devEui, SE_EUI_SIZE);
 800dcd2:	6879      	ldr	r1, [r7, #4]
 800dcd4:	4b06      	ldr	r3, [pc, #24]	; (800dcf0 <SecureElementSetDevEui+0x30>)
 800dcd6:	2208      	movs	r2, #8
 800dcd8:	0018      	movs	r0, r3
 800dcda:	f00b fc33 	bl	8019544 <memcpy1>
  SeNvmCtxChanged();
 800dcde:	4b05      	ldr	r3, [pc, #20]	; (800dcf4 <SecureElementSetDevEui+0x34>)
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	4798      	blx	r3
  return SECURE_ELEMENT_SUCCESS;
 800dce4:	2300      	movs	r3, #0
}
 800dce6:	0018      	movs	r0, r3
 800dce8:	46bd      	mov	sp, r7
 800dcea:	b002      	add	sp, #8
 800dcec:	bd80      	pop	{r7, pc}
 800dcee:	46c0      	nop			; (mov r8, r8)
 800dcf0:	2000007c 	.word	0x2000007c
 800dcf4:	20000418 	.word	0x20000418

0800dcf8 <SecureElementGetDevEui>:

uint8_t *SecureElementGetDevEui(void)
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	af00      	add	r7, sp, #0
  return SeNvmCtx.DevEui;
 800dcfc:	4b01      	ldr	r3, [pc, #4]	; (800dd04 <SecureElementGetDevEui+0xc>)
}
 800dcfe:	0018      	movs	r0, r3
 800dd00:	46bd      	mov	sp, r7
 800dd02:	bd80      	pop	{r7, pc}
 800dd04:	2000007c 	.word	0x2000007c

0800dd08 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui(uint8_t *joinEui)
{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b082      	sub	sp, #8
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
  if (joinEui == NULL)
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d101      	bne.n	800dd1a <SecureElementSetJoinEui+0x12>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800dd16:	2302      	movs	r3, #2
 800dd18:	e009      	b.n	800dd2e <SecureElementSetJoinEui+0x26>
  }
  memcpy1(SeNvmCtx.JoinEui, joinEui, SE_EUI_SIZE);
 800dd1a:	6879      	ldr	r1, [r7, #4]
 800dd1c:	4b06      	ldr	r3, [pc, #24]	; (800dd38 <SecureElementSetJoinEui+0x30>)
 800dd1e:	2208      	movs	r2, #8
 800dd20:	0018      	movs	r0, r3
 800dd22:	f00b fc0f 	bl	8019544 <memcpy1>
  SeNvmCtxChanged();
 800dd26:	4b05      	ldr	r3, [pc, #20]	; (800dd3c <SecureElementSetJoinEui+0x34>)
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	4798      	blx	r3
  return SECURE_ELEMENT_SUCCESS;
 800dd2c:	2300      	movs	r3, #0
}
 800dd2e:	0018      	movs	r0, r3
 800dd30:	46bd      	mov	sp, r7
 800dd32:	b002      	add	sp, #8
 800dd34:	bd80      	pop	{r7, pc}
 800dd36:	46c0      	nop			; (mov r8, r8)
 800dd38:	20000084 	.word	0x20000084
 800dd3c:	20000418 	.word	0x20000418

0800dd40 <SecureElementGetJoinEui>:

uint8_t *SecureElementGetJoinEui(void)
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	af00      	add	r7, sp, #0
  return SeNvmCtx.JoinEui;
 800dd44:	4b01      	ldr	r3, [pc, #4]	; (800dd4c <SecureElementGetJoinEui+0xc>)
}
 800dd46:	0018      	movs	r0, r3
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	bd80      	pop	{r7, pc}
 800dd4c:	20000084 	.word	0x20000084

0800dd50 <LmHandlerInit>:

static bool CtxRestoreDone = false;

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit(LmHandlerCallbacks_t *handlerCallbacks)
{
 800dd50:	b580      	push	{r7, lr}
 800dd52:	b082      	sub	sp, #8
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	6078      	str	r0, [r7, #4]
  UTIL_MEM_cpy_8((void *)&LmHandlerCallbacks, (const void *)handlerCallbacks, sizeof(LmHandlerCallbacks_t));
 800dd58:	6879      	ldr	r1, [r7, #4]
 800dd5a:	4b17      	ldr	r3, [pc, #92]	; (800ddb8 <LmHandlerInit+0x68>)
 800dd5c:	2220      	movs	r2, #32
 800dd5e:	0018      	movs	r0, r3
 800dd60:	f00e fbe4 	bl	801c52c <UTIL_MEM_cpy_8>

  LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800dd64:	4b15      	ldr	r3, [pc, #84]	; (800ddbc <LmHandlerInit+0x6c>)
 800dd66:	4a16      	ldr	r2, [pc, #88]	; (800ddc0 <LmHandlerInit+0x70>)
 800dd68:	601a      	str	r2, [r3, #0]
  LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800dd6a:	4b14      	ldr	r3, [pc, #80]	; (800ddbc <LmHandlerInit+0x6c>)
 800dd6c:	4a15      	ldr	r2, [pc, #84]	; (800ddc4 <LmHandlerInit+0x74>)
 800dd6e:	605a      	str	r2, [r3, #4]
  LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800dd70:	4b12      	ldr	r3, [pc, #72]	; (800ddbc <LmHandlerInit+0x6c>)
 800dd72:	4a15      	ldr	r2, [pc, #84]	; (800ddc8 <LmHandlerInit+0x78>)
 800dd74:	609a      	str	r2, [r3, #8]
  LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800dd76:	4b11      	ldr	r3, [pc, #68]	; (800ddbc <LmHandlerInit+0x6c>)
 800dd78:	4a14      	ldr	r2, [pc, #80]	; (800ddcc <LmHandlerInit+0x7c>)
 800dd7a:	60da      	str	r2, [r3, #12]
  LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks.GetBatteryLevel;
 800dd7c:	4b0e      	ldr	r3, [pc, #56]	; (800ddb8 <LmHandlerInit+0x68>)
 800dd7e:	681a      	ldr	r2, [r3, #0]
 800dd80:	4b13      	ldr	r3, [pc, #76]	; (800ddd0 <LmHandlerInit+0x80>)
 800dd82:	601a      	str	r2, [r3, #0]
  LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks.GetTemperature;
 800dd84:	4b0c      	ldr	r3, [pc, #48]	; (800ddb8 <LmHandlerInit+0x68>)
 800dd86:	685a      	ldr	r2, [r3, #4]
 800dd88:	4b11      	ldr	r3, [pc, #68]	; (800ddd0 <LmHandlerInit+0x80>)
 800dd8a:	605a      	str	r2, [r3, #4]
  LoRaMacCallbacks.NvmContextChange = NvmCtxMgmtEvent;
 800dd8c:	4b10      	ldr	r3, [pc, #64]	; (800ddd0 <LmHandlerInit+0x80>)
 800dd8e:	4a11      	ldr	r2, [pc, #68]	; (800ddd4 <LmHandlerInit+0x84>)
 800dd90:	609a      	str	r2, [r3, #8]
  LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks.OnMacProcess;
 800dd92:	4b09      	ldr	r3, [pc, #36]	; (800ddb8 <LmHandlerInit+0x68>)
 800dd94:	689a      	ldr	r2, [r3, #8]
 800dd96:	4b0e      	ldr	r3, [pc, #56]	; (800ddd0 <LmHandlerInit+0x80>)
 800dd98:	60da      	str	r2, [r3, #12]
  //SX1276SetSleep( ); // new
  /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
  if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800dd9a:	4b0f      	ldr	r3, [pc, #60]	; (800ddd8 <LmHandlerInit+0x88>)
 800dd9c:	0019      	movs	r1, r3
 800dd9e:	2000      	movs	r0, #0
 800dda0:	f000 fb76 	bl	800e490 <LmHandlerPackageRegister>
 800dda4:	1e03      	subs	r3, r0, #0
 800dda6:	d002      	beq.n	800ddae <LmHandlerInit+0x5e>
  {
    return LORAMAC_HANDLER_ERROR;
 800dda8:	2301      	movs	r3, #1
 800ddaa:	425b      	negs	r3, r3
 800ddac:	e000      	b.n	800ddb0 <LmHandlerInit+0x60>
  if (LmhpDataDistributionInit() != LORAMAC_HANDLER_SUCCESS)
  {
    return LORAMAC_HANDLER_ERROR;
  }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
  return LORAMAC_HANDLER_SUCCESS;
 800ddae:	2300      	movs	r3, #0
}
 800ddb0:	0018      	movs	r0, r3
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	b002      	add	sp, #8
 800ddb6:	bd80      	pop	{r7, pc}
 800ddb8:	20000438 	.word	0x20000438
 800ddbc:	20000458 	.word	0x20000458
 800ddc0:	0800e5fd 	.word	0x0800e5fd
 800ddc4:	0800e669 	.word	0x0800e669
 800ddc8:	0800e755 	.word	0x0800e755
 800ddcc:	0800e7fd 	.word	0x0800e7fd
 800ddd0:	20000468 	.word	0x20000468
 800ddd4:	0800ef9b 	.word	0x0800ef9b
 800ddd8:	20000150 	.word	0x20000150

0800dddc <LmHandlerConfigure>:

LmHandlerErrorStatus_t LmHandlerConfigure(LmHandlerParams_t *handlerParams)
{
 800dddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ddde:	46ce      	mov	lr, r9
 800dde0:	4647      	mov	r7, r8
 800dde2:	b580      	push	{r7, lr}
 800dde4:	b099      	sub	sp, #100	; 0x64
 800dde6:	af08      	add	r7, sp, #32
 800dde8:	6078      	str	r0, [r7, #4]
  MibRequestConfirm_t mibReq;
  LoraInfo_t *loraInfo;

  UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800ddea:	6879      	ldr	r1, [r7, #4]
 800ddec:	4b7b      	ldr	r3, [pc, #492]	; (800dfdc <LmHandlerConfigure+0x200>)
 800ddee:	2206      	movs	r2, #6
 800ddf0:	0018      	movs	r0, r3
 800ddf2:	f00e fb9b 	bl	801c52c <UTIL_MEM_cpy_8>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
  IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

  loraInfo = LoraInfo_GetPtr();
 800ddf6:	f7f5 fcef 	bl	80037d8 <LoraInfo_GetPtr>
 800ddfa:	0003      	movs	r3, r0
 800ddfc:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (0U != ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800ddfe:	4b77      	ldr	r3, [pc, #476]	; (800dfdc <LmHandlerConfigure+0x200>)
 800de00:	781b      	ldrb	r3, [r3, #0]
 800de02:	001a      	movs	r2, r3
 800de04:	2301      	movs	r3, #1
 800de06:	4093      	lsls	r3, r2
 800de08:	001a      	movs	r2, r3
 800de0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de0c:	685b      	ldr	r3, [r3, #4]
 800de0e:	4013      	ands	r3, r2
 800de10:	d00b      	beq.n	800de2a <LmHandlerConfigure+0x4e>
  {
    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800de12:	4b72      	ldr	r3, [pc, #456]	; (800dfdc <LmHandlerConfigure+0x200>)
 800de14:	781a      	ldrb	r2, [r3, #0]
 800de16:	4972      	ldr	r1, [pc, #456]	; (800dfe0 <LmHandlerConfigure+0x204>)
 800de18:	4b72      	ldr	r3, [pc, #456]	; (800dfe4 <LmHandlerConfigure+0x208>)
 800de1a:	0018      	movs	r0, r3
 800de1c:	f005 f802 	bl	8012e24 <LoRaMacInitialization>
 800de20:	1e03      	subs	r3, r0, #0
 800de22:	d009      	beq.n	800de38 <LmHandlerConfigure+0x5c>
    {
      return LORAMAC_HANDLER_ERROR;
 800de24:	2301      	movs	r3, #1
 800de26:	425b      	negs	r3, r3
 800de28:	e0d1      	b.n	800dfce <LmHandlerConfigure+0x1f2>
    }
  }
  else
  {
    MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800de2a:	4b6f      	ldr	r3, [pc, #444]	; (800dfe8 <LmHandlerConfigure+0x20c>)
 800de2c:	2201      	movs	r2, #1
 800de2e:	2100      	movs	r1, #0
 800de30:	2000      	movs	r0, #0
 800de32:	f00d fffb 	bl	801be2c <UTIL_ADV_TRACE_COND_FSend>
    while (1) {}  /* error: Region is not defined in the MW */
 800de36:	e7fe      	b.n	800de36 <LmHandlerConfigure+0x5a>
  }

  /* Try to restore from NVM and query the mac if possible. */
  if (NvmCtxMgmtRestore() == NVMCTXMGMT_STATUS_SUCCESS)
 800de38:	f001 f8bf 	bl	800efba <NvmCtxMgmtRestore>
 800de3c:	1e03      	subs	r3, r0, #0
 800de3e:	d103      	bne.n	800de48 <LmHandlerConfigure+0x6c>
  {
    CtxRestoreDone = true;
 800de40:	4b6a      	ldr	r3, [pc, #424]	; (800dfec <LmHandlerConfigure+0x210>)
 800de42:	2201      	movs	r2, #1
 800de44:	701a      	strb	r2, [r3, #0]
 800de46:	e021      	b.n	800de8c <LmHandlerConfigure+0xb0>
  }
  else
  {
    CtxRestoreDone = false;
 800de48:	4b68      	ldr	r3, [pc, #416]	; (800dfec <LmHandlerConfigure+0x210>)
 800de4a:	2200      	movs	r2, #0
 800de4c:	701a      	strb	r2, [r3, #0]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    SecureElementSetObjHandler(SLOT_RAND_ZERO_KEY, KMS_ZERO_KEY_OBJECT_HANDLE);
#endif /* LORAMAC_CLASSB_ENABLED */
#endif /* LORAWAN_KMS == 1 */
    /* Read secure-element DEV_EUI and JOIN_EUI values. */
    mibReq.Type = MIB_DEV_EUI;
 800de4e:	2418      	movs	r4, #24
 800de50:	193b      	adds	r3, r7, r4
 800de52:	2202      	movs	r2, #2
 800de54:	701a      	strb	r2, [r3, #0]
    LoRaMacMibGetRequestConfirm(&mibReq);
 800de56:	193b      	adds	r3, r7, r4
 800de58:	0018      	movs	r0, r3
 800de5a:	f005 fc45 	bl	80136e8 <LoRaMacMibGetRequestConfirm>
    memcpy1(CommissioningParams.DevEui, mibReq.Param.DevEui, 8);
 800de5e:	193b      	adds	r3, r7, r4
 800de60:	6859      	ldr	r1, [r3, #4]
 800de62:	4b63      	ldr	r3, [pc, #396]	; (800dff0 <LmHandlerConfigure+0x214>)
 800de64:	2208      	movs	r2, #8
 800de66:	0018      	movs	r0, r3
 800de68:	f00b fb6c 	bl	8019544 <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800de6c:	0021      	movs	r1, r4
 800de6e:	187b      	adds	r3, r7, r1
 800de70:	2203      	movs	r2, #3
 800de72:	701a      	strb	r2, [r3, #0]
    LoRaMacMibGetRequestConfirm(&mibReq);
 800de74:	000c      	movs	r4, r1
 800de76:	187b      	adds	r3, r7, r1
 800de78:	0018      	movs	r0, r3
 800de7a:	f005 fc35 	bl	80136e8 <LoRaMacMibGetRequestConfirm>
    memcpy1(CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8);
 800de7e:	193b      	adds	r3, r7, r4
 800de80:	6859      	ldr	r1, [r3, #4]
 800de82:	4b5c      	ldr	r3, [pc, #368]	; (800dff4 <LmHandlerConfigure+0x218>)
 800de84:	2208      	movs	r2, #8
 800de86:	0018      	movs	r0, r3
 800de88:	f00b fb5c 	bl	8019544 <memcpy1>
  }
  MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:  %02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X\r\n",
 800de8c:	4b58      	ldr	r3, [pc, #352]	; (800dff0 <LmHandlerConfigure+0x214>)
 800de8e:	781b      	ldrb	r3, [r3, #0]
 800de90:	001a      	movs	r2, r3
 800de92:	4b57      	ldr	r3, [pc, #348]	; (800dff0 <LmHandlerConfigure+0x214>)
 800de94:	785b      	ldrb	r3, [r3, #1]
 800de96:	0019      	movs	r1, r3
 800de98:	4b55      	ldr	r3, [pc, #340]	; (800dff0 <LmHandlerConfigure+0x214>)
 800de9a:	789b      	ldrb	r3, [r3, #2]
 800de9c:	0018      	movs	r0, r3
 800de9e:	4b54      	ldr	r3, [pc, #336]	; (800dff0 <LmHandlerConfigure+0x214>)
 800dea0:	78db      	ldrb	r3, [r3, #3]
 800dea2:	001c      	movs	r4, r3
 800dea4:	4b52      	ldr	r3, [pc, #328]	; (800dff0 <LmHandlerConfigure+0x214>)
 800dea6:	791b      	ldrb	r3, [r3, #4]
 800dea8:	001d      	movs	r5, r3
 800deaa:	4b51      	ldr	r3, [pc, #324]	; (800dff0 <LmHandlerConfigure+0x214>)
 800deac:	795b      	ldrb	r3, [r3, #5]
 800deae:	001e      	movs	r6, r3
 800deb0:	4b4f      	ldr	r3, [pc, #316]	; (800dff0 <LmHandlerConfigure+0x214>)
 800deb2:	799b      	ldrb	r3, [r3, #6]
 800deb4:	469c      	mov	ip, r3
 800deb6:	4b4e      	ldr	r3, [pc, #312]	; (800dff0 <LmHandlerConfigure+0x214>)
 800deb8:	79db      	ldrb	r3, [r3, #7]
 800deba:	4698      	mov	r8, r3
 800debc:	4b4e      	ldr	r3, [pc, #312]	; (800dff8 <LmHandlerConfigure+0x21c>)
 800debe:	4699      	mov	r9, r3
 800dec0:	4643      	mov	r3, r8
 800dec2:	9307      	str	r3, [sp, #28]
 800dec4:	4663      	mov	r3, ip
 800dec6:	9306      	str	r3, [sp, #24]
 800dec8:	9605      	str	r6, [sp, #20]
 800deca:	9504      	str	r5, [sp, #16]
 800decc:	9403      	str	r4, [sp, #12]
 800dece:	9002      	str	r0, [sp, #8]
 800ded0:	9101      	str	r1, [sp, #4]
 800ded2:	9200      	str	r2, [sp, #0]
 800ded4:	464b      	mov	r3, r9
 800ded6:	2200      	movs	r2, #0
 800ded8:	2100      	movs	r1, #0
 800deda:	2002      	movs	r0, #2
 800dedc:	f00d ffa6 	bl	801be2c <UTIL_ADV_TRACE_COND_FSend>
         HEX8(CommissioningParams.DevEui));
  MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:  %02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X\r\n",
 800dee0:	4b43      	ldr	r3, [pc, #268]	; (800dff0 <LmHandlerConfigure+0x214>)
 800dee2:	7a1b      	ldrb	r3, [r3, #8]
 800dee4:	001a      	movs	r2, r3
 800dee6:	4b42      	ldr	r3, [pc, #264]	; (800dff0 <LmHandlerConfigure+0x214>)
 800dee8:	7a5b      	ldrb	r3, [r3, #9]
 800deea:	0019      	movs	r1, r3
 800deec:	4b40      	ldr	r3, [pc, #256]	; (800dff0 <LmHandlerConfigure+0x214>)
 800deee:	7a9b      	ldrb	r3, [r3, #10]
 800def0:	0018      	movs	r0, r3
 800def2:	4b3f      	ldr	r3, [pc, #252]	; (800dff0 <LmHandlerConfigure+0x214>)
 800def4:	7adb      	ldrb	r3, [r3, #11]
 800def6:	001c      	movs	r4, r3
 800def8:	4b3d      	ldr	r3, [pc, #244]	; (800dff0 <LmHandlerConfigure+0x214>)
 800defa:	7b1b      	ldrb	r3, [r3, #12]
 800defc:	001d      	movs	r5, r3
 800defe:	4b3c      	ldr	r3, [pc, #240]	; (800dff0 <LmHandlerConfigure+0x214>)
 800df00:	7b5b      	ldrb	r3, [r3, #13]
 800df02:	001e      	movs	r6, r3
 800df04:	4b3a      	ldr	r3, [pc, #232]	; (800dff0 <LmHandlerConfigure+0x214>)
 800df06:	7b9b      	ldrb	r3, [r3, #14]
 800df08:	469c      	mov	ip, r3
 800df0a:	4b39      	ldr	r3, [pc, #228]	; (800dff0 <LmHandlerConfigure+0x214>)
 800df0c:	7bdb      	ldrb	r3, [r3, #15]
 800df0e:	4698      	mov	r8, r3
 800df10:	4b3a      	ldr	r3, [pc, #232]	; (800dffc <LmHandlerConfigure+0x220>)
 800df12:	4699      	mov	r9, r3
 800df14:	4643      	mov	r3, r8
 800df16:	9307      	str	r3, [sp, #28]
 800df18:	4663      	mov	r3, ip
 800df1a:	9306      	str	r3, [sp, #24]
 800df1c:	9605      	str	r6, [sp, #20]
 800df1e:	9504      	str	r5, [sp, #16]
 800df20:	9403      	str	r4, [sp, #12]
 800df22:	9002      	str	r0, [sp, #8]
 800df24:	9101      	str	r1, [sp, #4]
 800df26:	9200      	str	r2, [sp, #0]
 800df28:	464b      	mov	r3, r9
 800df2a:	2200      	movs	r2, #0
 800df2c:	2100      	movs	r1, #0
 800df2e:	2002      	movs	r0, #2
 800df30:	f00d ff7c 	bl	801be2c <UTIL_ADV_TRACE_COND_FSend>
  //DevVVEUI = ACTIVATION_TYPE_OTAA;
#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
  MW_LOG(TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

  mibReq.Type = MIB_PUBLIC_NETWORK;
 800df34:	2118      	movs	r1, #24
 800df36:	187b      	adds	r3, r7, r1
 800df38:	220f      	movs	r2, #15
 800df3a:	701a      	strb	r2, [r3, #0]
  mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800df3c:	187b      	adds	r3, r7, r1
 800df3e:	2201      	movs	r2, #1
 800df40:	711a      	strb	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 800df42:	000c      	movs	r4, r1
 800df44:	187b      	adds	r3, r7, r1
 800df46:	0018      	movs	r0, r3
 800df48:	f005 fd2c 	bl	80139a4 <LoRaMacMibSetRequestConfirm>

  mibReq.Type = MIB_REPEATER_SUPPORT;
 800df4c:	0021      	movs	r1, r4
 800df4e:	187b      	adds	r3, r7, r1
 800df50:	2210      	movs	r2, #16
 800df52:	701a      	strb	r2, [r3, #0]
  mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800df54:	187b      	adds	r3, r7, r1
 800df56:	2200      	movs	r2, #0
 800df58:	711a      	strb	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 800df5a:	000c      	movs	r4, r1
 800df5c:	187b      	adds	r3, r7, r1
 800df5e:	0018      	movs	r0, r3
 800df60:	f005 fd20 	bl	80139a4 <LoRaMacMibSetRequestConfirm>

  mibReq.Type = MIB_ADR;
 800df64:	0021      	movs	r1, r4
 800df66:	187b      	adds	r3, r7, r1
 800df68:	2204      	movs	r2, #4
 800df6a:	701a      	strb	r2, [r3, #0]
  mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800df6c:	4b1b      	ldr	r3, [pc, #108]	; (800dfdc <LmHandlerConfigure+0x200>)
 800df6e:	789a      	ldrb	r2, [r3, #2]
 800df70:	187b      	adds	r3, r7, r1
 800df72:	711a      	strb	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 800df74:	000c      	movs	r4, r1
 800df76:	187b      	adds	r3, r7, r1
 800df78:	0018      	movs	r0, r3
 800df7a:	f005 fd13 	bl	80139a4 <LoRaMacMibSetRequestConfirm>

  mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800df7e:	0021      	movs	r1, r4
 800df80:	187b      	adds	r3, r7, r1
 800df82:	2222      	movs	r2, #34	; 0x22
 800df84:	701a      	strb	r2, [r3, #0]
  mibReq.Param.SystemMaxRxError = 20;
 800df86:	187b      	adds	r3, r7, r1
 800df88:	2214      	movs	r2, #20
 800df8a:	605a      	str	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 800df8c:	187b      	adds	r3, r7, r1
 800df8e:	0018      	movs	r0, r3
 800df90:	f005 fd08 	bl	80139a4 <LoRaMacMibSetRequestConfirm>

  GetPhyParams_t getPhy;
  PhyParam_t phyParam;
  getPhy.Attribute = PHY_DUTY_CYCLE;
 800df94:	2110      	movs	r1, #16
 800df96:	187b      	adds	r3, r7, r1
 800df98:	220f      	movs	r2, #15
 800df9a:	701a      	strb	r2, [r3, #0]
  phyParam = RegionGetPhyParam(LmHandlerParams.ActiveRegion, &getPhy);
 800df9c:	4b0f      	ldr	r3, [pc, #60]	; (800dfdc <LmHandlerConfigure+0x200>)
 800df9e:	781b      	ldrb	r3, [r3, #0]
 800dfa0:	187a      	adds	r2, r7, r1
 800dfa2:	0011      	movs	r1, r2
 800dfa4:	0018      	movs	r0, r3
 800dfa6:	f008 fe3e 	bl	8016c26 <RegionGetPhyParam>
 800dfaa:	0003      	movs	r3, r0
 800dfac:	001a      	movs	r2, r3
 800dfae:	210c      	movs	r1, #12
 800dfb0:	187b      	adds	r3, r7, r1
 800dfb2:	601a      	str	r2, [r3, #0]
  LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800dfb4:	187b      	adds	r3, r7, r1
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	1e5a      	subs	r2, r3, #1
 800dfba:	4193      	sbcs	r3, r2
 800dfbc:	b2da      	uxtb	r2, r3
 800dfbe:	4b07      	ldr	r3, [pc, #28]	; (800dfdc <LmHandlerConfigure+0x200>)
 800dfc0:	711a      	strb	r2, [r3, #4]

  /* override previous value if reconfigure new region */
  LoRaMacTestSetDutyCycleOn(LmHandlerParams.DutyCycleEnabled);
 800dfc2:	4b06      	ldr	r3, [pc, #24]	; (800dfdc <LmHandlerConfigure+0x200>)
 800dfc4:	791b      	ldrb	r3, [r3, #4]
 800dfc6:	0018      	movs	r0, r3
 800dfc8:	f006 fb18 	bl	80145fc <LoRaMacTestSetDutyCycleOn>

  return LORAMAC_HANDLER_SUCCESS;
 800dfcc:	2300      	movs	r3, #0
}
 800dfce:	0018      	movs	r0, r3
 800dfd0:	46bd      	mov	sp, r7
 800dfd2:	b011      	add	sp, #68	; 0x44
 800dfd4:	bcc0      	pop	{r6, r7}
 800dfd6:	46b9      	mov	r9, r7
 800dfd8:	46b0      	mov	r8, r6
 800dfda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dfdc:	20000430 	.word	0x20000430
 800dfe0:	20000468 	.word	0x20000468
 800dfe4:	20000458 	.word	0x20000458
 800dfe8:	0801f50c 	.word	0x0801f50c
 800dfec:	20000582 	.word	0x20000582
 800dff0:	20000138 	.word	0x20000138
 800dff4:	20000140 	.word	0x20000140
 800dff8:	0801f558 	.word	0x0801f558
 800dffc:	0801f594 	.word	0x0801f594

0800e000 <LmHandlerProcess>:
  }
  return false;
}

void LmHandlerProcess(void)
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b082      	sub	sp, #8
 800e004:	af00      	add	r7, sp, #0
  /* Call at first the LoRaMAC process before to run all package process features */
  /* Processes the LoRaMac events */
  LoRaMacProcess();
 800e006:	f004 fec7 	bl	8012d98 <LoRaMacProcess>

  /* Call all packages process functions */
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 800e00a:	1dfb      	adds	r3, r7, #7
 800e00c:	2200      	movs	r2, #0
 800e00e:	701a      	strb	r2, [r3, #0]
 800e010:	e027      	b.n	800e062 <LmHandlerProcess+0x62>
  {
    if ((LmHandlerPackages[i] != NULL) &&
 800e012:	1dfb      	adds	r3, r7, #7
 800e014:	2200      	movs	r2, #0
 800e016:	569a      	ldrsb	r2, [r3, r2]
 800e018:	4b17      	ldr	r3, [pc, #92]	; (800e078 <LmHandlerProcess+0x78>)
 800e01a:	0092      	lsls	r2, r2, #2
 800e01c:	58d3      	ldr	r3, [r2, r3]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d017      	beq.n	800e052 <LmHandlerProcess+0x52>
        (LmHandlerPackages[i]->Process != NULL) &&
 800e022:	1dfb      	adds	r3, r7, #7
 800e024:	2200      	movs	r2, #0
 800e026:	569a      	ldrsb	r2, [r3, r2]
 800e028:	4b13      	ldr	r3, [pc, #76]	; (800e078 <LmHandlerProcess+0x78>)
 800e02a:	0092      	lsls	r2, r2, #2
 800e02c:	58d3      	ldr	r3, [r2, r3]
 800e02e:	691b      	ldr	r3, [r3, #16]
    if ((LmHandlerPackages[i] != NULL) &&
 800e030:	2b00      	cmp	r3, #0
 800e032:	d00e      	beq.n	800e052 <LmHandlerProcess+0x52>
        (LmHandlerPackageIsInitialized(i) != false))
 800e034:	1dfb      	adds	r3, r7, #7
 800e036:	781b      	ldrb	r3, [r3, #0]
 800e038:	0018      	movs	r0, r3
 800e03a:	f000 fbf1 	bl	800e820 <LmHandlerPackageIsInitialized>
 800e03e:	1e03      	subs	r3, r0, #0
        (LmHandlerPackages[i]->Process != NULL) &&
 800e040:	d007      	beq.n	800e052 <LmHandlerProcess+0x52>
    {
      LmHandlerPackages[i]->Process();
 800e042:	1dfb      	adds	r3, r7, #7
 800e044:	2200      	movs	r2, #0
 800e046:	569a      	ldrsb	r2, [r3, r2]
 800e048:	4b0b      	ldr	r3, [pc, #44]	; (800e078 <LmHandlerProcess+0x78>)
 800e04a:	0092      	lsls	r2, r2, #2
 800e04c:	58d3      	ldr	r3, [r2, r3]
 800e04e:	691b      	ldr	r3, [r3, #16]
 800e050:	4798      	blx	r3
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 800e052:	1dfb      	adds	r3, r7, #7
 800e054:	781b      	ldrb	r3, [r3, #0]
 800e056:	b25b      	sxtb	r3, r3
 800e058:	b2db      	uxtb	r3, r3
 800e05a:	3301      	adds	r3, #1
 800e05c:	b2da      	uxtb	r2, r3
 800e05e:	1dfb      	adds	r3, r7, #7
 800e060:	701a      	strb	r2, [r3, #0]
 800e062:	1dfb      	adds	r3, r7, #7
 800e064:	781b      	ldrb	r3, [r3, #0]
 800e066:	b25b      	sxtb	r3, r3
 800e068:	2b04      	cmp	r3, #4
 800e06a:	ddd2      	ble.n	800e012 <LmHandlerProcess+0x12>
    }
  }

  NvmCtxMgmtStore();
 800e06c:	f000 ff9f 	bl	800efae <NvmCtxMgmtStore>
}
 800e070:	46c0      	nop			; (mov r8, r8)
 800e072:	46bd      	mov	sp, r7
 800e074:	b002      	add	sp, #8
 800e076:	bd80      	pop	{r7, pc}
 800e078:	2000041c 	.word	0x2000041c

0800e07c <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus(void)
{
 800e07c:	b5b0      	push	{r4, r5, r7, lr}
 800e07e:	b08a      	sub	sp, #40	; 0x28
 800e080:	af00      	add	r7, sp, #0
  MibRequestConfirm_t mibReq;
  LoRaMacStatus_t status;

  mibReq.Type = MIB_NETWORK_ACTIVATION;
 800e082:	003b      	movs	r3, r7
 800e084:	2201      	movs	r2, #1
 800e086:	701a      	strb	r2, [r3, #0]
  status = LoRaMacMibGetRequestConfirm(&mibReq);
 800e088:	2527      	movs	r5, #39	; 0x27
 800e08a:	197c      	adds	r4, r7, r5
 800e08c:	003b      	movs	r3, r7
 800e08e:	0018      	movs	r0, r3
 800e090:	f005 fb2a 	bl	80136e8 <LoRaMacMibGetRequestConfirm>
 800e094:	0003      	movs	r3, r0
 800e096:	7023      	strb	r3, [r4, #0]

  if (status == LORAMAC_STATUS_OK)
 800e098:	197b      	adds	r3, r7, r5
 800e09a:	781b      	ldrb	r3, [r3, #0]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d107      	bne.n	800e0b0 <LmHandlerJoinStatus+0x34>
  {
    if (mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE)
 800e0a0:	003b      	movs	r3, r7
 800e0a2:	791b      	ldrb	r3, [r3, #4]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d101      	bne.n	800e0ac <LmHandlerJoinStatus+0x30>
    {
      return LORAMAC_HANDLER_RESET;
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	e002      	b.n	800e0b2 <LmHandlerJoinStatus+0x36>
    }
    else
    {
      return LORAMAC_HANDLER_SET;
 800e0ac:	2301      	movs	r3, #1
 800e0ae:	e000      	b.n	800e0b2 <LmHandlerJoinStatus+0x36>
    }
  }
  else
  {
    return LORAMAC_HANDLER_RESET;
 800e0b0:	2300      	movs	r3, #0
  }
}
 800e0b2:	0018      	movs	r0, r3
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	b00a      	add	sp, #40	; 0x28
 800e0b8:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800e0bc <LmHandlerJoin>:

void LmHandlerJoin(ActivationType_t mode)
{
 800e0bc:	b590      	push	{r4, r7, lr}
 800e0be:	b093      	sub	sp, #76	; 0x4c
 800e0c0:	af02      	add	r7, sp, #8
 800e0c2:	0002      	movs	r2, r0
 800e0c4:	1dfb      	adds	r3, r7, #7
 800e0c6:	701a      	strb	r2, [r3, #0]
  }
#endif /* ACTIVATION_BY_PERSONALISATION */
  SecureElementDeleteDerivedKeys(NULL);
#endif /* LORAWAN_KMS */

  if (mode == ACTIVATION_TYPE_OTAA)
 800e0c8:	1dfb      	adds	r3, r7, #7
 800e0ca:	781b      	ldrb	r3, [r3, #0]
 800e0cc:	2b02      	cmp	r3, #2
 800e0ce:	d113      	bne.n	800e0f8 <LmHandlerJoin+0x3c>
  {
    MlmeReq_t mlmeReq;
    JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800e0d0:	4b37      	ldr	r3, [pc, #220]	; (800e1b0 <LmHandlerJoin+0xf4>)
 800e0d2:	2202      	movs	r2, #2
 800e0d4:	709a      	strb	r2, [r3, #2]

    LoRaMacStart();
 800e0d6:	f005 fa4d 	bl	8013574 <LoRaMacStart>

    /* Starts the OTAA join procedure */
    mlmeReq.Type = MLME_JOIN;
 800e0da:	2108      	movs	r1, #8
 800e0dc:	187b      	adds	r3, r7, r1
 800e0de:	2201      	movs	r2, #1
 800e0e0:	701a      	strb	r2, [r3, #0]
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800e0e2:	4b34      	ldr	r3, [pc, #208]	; (800e1b4 <LmHandlerJoin+0xf8>)
 800e0e4:	78db      	ldrb	r3, [r3, #3]
 800e0e6:	b25b      	sxtb	r3, r3
 800e0e8:	b2da      	uxtb	r2, r3
 800e0ea:	187b      	adds	r3, r7, r1
 800e0ec:	711a      	strb	r2, [r3, #4]
    LoRaMacMlmeRequest(&mlmeReq);
 800e0ee:	187b      	adds	r3, r7, r1
 800e0f0:	0018      	movs	r0, r3
 800e0f2:	f005 ffdd 	bl	80140b0 <LoRaMacMlmeRequest>
    LoRaMacMibSetRequestConfirm(&mibReq);

    LmHandlerCallbacks.OnJoinRequest(&JoinParams);
    LmHandlerRequestClass(LmHandlerParams.DefaultClass);
  }
}
 800e0f6:	e057      	b.n	800e1a8 <LmHandlerJoin+0xec>
    JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800e0f8:	4b2d      	ldr	r3, [pc, #180]	; (800e1b0 <LmHandlerJoin+0xf4>)
 800e0fa:	2201      	movs	r2, #1
 800e0fc:	709a      	strb	r2, [r3, #2]
    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800e0fe:	4b2c      	ldr	r3, [pc, #176]	; (800e1b0 <LmHandlerJoin+0xf4>)
 800e100:	2200      	movs	r2, #0
 800e102:	705a      	strb	r2, [r3, #1]
    if (CtxRestoreDone == false)
 800e104:	4b2c      	ldr	r3, [pc, #176]	; (800e1b8 <LmHandlerJoin+0xfc>)
 800e106:	781b      	ldrb	r3, [r3, #0]
 800e108:	2201      	movs	r2, #1
 800e10a:	4053      	eors	r3, r2
 800e10c:	b2db      	uxtb	r3, r3
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d033      	beq.n	800e17a <LmHandlerJoin+0xbe>
      mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800e112:	211c      	movs	r1, #28
 800e114:	187b      	adds	r3, r7, r1
 800e116:	2227      	movs	r2, #39	; 0x27
 800e118:	701a      	strb	r2, [r3, #0]
      mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800e11a:	187b      	adds	r3, r7, r1
 800e11c:	4a27      	ldr	r2, [pc, #156]	; (800e1bc <LmHandlerJoin+0x100>)
 800e11e:	605a      	str	r2, [r3, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 800e120:	000c      	movs	r4, r1
 800e122:	187b      	adds	r3, r7, r1
 800e124:	0018      	movs	r0, r3
 800e126:	f005 fc3d 	bl	80139a4 <LoRaMacMibSetRequestConfirm>
      mibReq.Type = MIB_NET_ID;
 800e12a:	0021      	movs	r1, r4
 800e12c:	187b      	adds	r3, r7, r1
 800e12e:	2205      	movs	r2, #5
 800e130:	701a      	strb	r2, [r3, #0]
      mibReq.Param.NetID = CommissioningParams.NetworkId;
 800e132:	4b23      	ldr	r3, [pc, #140]	; (800e1c0 <LmHandlerJoin+0x104>)
 800e134:	691a      	ldr	r2, [r3, #16]
 800e136:	187b      	adds	r3, r7, r1
 800e138:	605a      	str	r2, [r3, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 800e13a:	000c      	movs	r4, r1
 800e13c:	187b      	adds	r3, r7, r1
 800e13e:	0018      	movs	r0, r3
 800e140:	f005 fc30 	bl	80139a4 <LoRaMacMibSetRequestConfirm>
      CommissioningParams.DevAddr = GetDevAddr();
 800e144:	f7f6 ff16 	bl	8004f74 <GetDevAddr>
 800e148:	0002      	movs	r2, r0
 800e14a:	4b1d      	ldr	r3, [pc, #116]	; (800e1c0 <LmHandlerJoin+0x104>)
 800e14c:	615a      	str	r2, [r3, #20]
      mibReq.Type = MIB_DEV_ADDR;
 800e14e:	0021      	movs	r1, r4
 800e150:	187b      	adds	r3, r7, r1
 800e152:	2206      	movs	r2, #6
 800e154:	701a      	strb	r2, [r3, #0]
      mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800e156:	4b1a      	ldr	r3, [pc, #104]	; (800e1c0 <LmHandlerJoin+0x104>)
 800e158:	695a      	ldr	r2, [r3, #20]
 800e15a:	187b      	adds	r3, r7, r1
 800e15c:	605a      	str	r2, [r3, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 800e15e:	187b      	adds	r3, r7, r1
 800e160:	0018      	movs	r0, r3
 800e162:	f005 fc1f 	bl	80139a4 <LoRaMacMibSetRequestConfirm>
      MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr:   %08X\r\n", CommissioningParams.DevAddr);
 800e166:	4b16      	ldr	r3, [pc, #88]	; (800e1c0 <LmHandlerJoin+0x104>)
 800e168:	695b      	ldr	r3, [r3, #20]
 800e16a:	4a16      	ldr	r2, [pc, #88]	; (800e1c4 <LmHandlerJoin+0x108>)
 800e16c:	9300      	str	r3, [sp, #0]
 800e16e:	0013      	movs	r3, r2
 800e170:	2200      	movs	r2, #0
 800e172:	2100      	movs	r1, #0
 800e174:	2002      	movs	r0, #2
 800e176:	f00d fe59 	bl	801be2c <UTIL_ADV_TRACE_COND_FSend>
    LoRaMacStart();
 800e17a:	f005 f9fb 	bl	8013574 <LoRaMacStart>
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800e17e:	211c      	movs	r1, #28
 800e180:	187b      	adds	r3, r7, r1
 800e182:	2201      	movs	r2, #1
 800e184:	701a      	strb	r2, [r3, #0]
    mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800e186:	187b      	adds	r3, r7, r1
 800e188:	2201      	movs	r2, #1
 800e18a:	711a      	strb	r2, [r3, #4]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800e18c:	187b      	adds	r3, r7, r1
 800e18e:	0018      	movs	r0, r3
 800e190:	f005 fc08 	bl	80139a4 <LoRaMacMibSetRequestConfirm>
    LmHandlerCallbacks.OnJoinRequest(&JoinParams);
 800e194:	4b0c      	ldr	r3, [pc, #48]	; (800e1c8 <LmHandlerJoin+0x10c>)
 800e196:	68db      	ldr	r3, [r3, #12]
 800e198:	4a05      	ldr	r2, [pc, #20]	; (800e1b0 <LmHandlerJoin+0xf4>)
 800e19a:	0010      	movs	r0, r2
 800e19c:	4798      	blx	r3
    LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800e19e:	4b05      	ldr	r3, [pc, #20]	; (800e1b4 <LmHandlerJoin+0xf8>)
 800e1a0:	785b      	ldrb	r3, [r3, #1]
 800e1a2:	0018      	movs	r0, r3
 800e1a4:	f000 f8e4 	bl	800e370 <LmHandlerRequestClass>
}
 800e1a8:	46c0      	nop			; (mov r8, r8)
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	b011      	add	sp, #68	; 0x44
 800e1ae:	bd90      	pop	{r4, r7, pc}
 800e1b0:	2000015c 	.word	0x2000015c
 800e1b4:	20000430 	.word	0x20000430
 800e1b8:	20000582 	.word	0x20000582
 800e1bc:	01000300 	.word	0x01000300
 800e1c0:	20000138 	.word	0x20000138
 800e1c4:	0801f5d0 	.word	0x0801f5d0
 800e1c8:	20000438 	.word	0x20000438

0800e1cc <LmHandlerSend>:
  }
}

LmHandlerErrorStatus_t LmHandlerSend(LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                     TimerTime_t *nextTxIn, bool allowDelayedTx)
{
 800e1cc:	b5b0      	push	{r4, r5, r7, lr}
 800e1ce:	b08c      	sub	sp, #48	; 0x30
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	60f8      	str	r0, [r7, #12]
 800e1d4:	0008      	movs	r0, r1
 800e1d6:	607a      	str	r2, [r7, #4]
 800e1d8:	0019      	movs	r1, r3
 800e1da:	230b      	movs	r3, #11
 800e1dc:	18fb      	adds	r3, r7, r3
 800e1de:	1c02      	adds	r2, r0, #0
 800e1e0:	701a      	strb	r2, [r3, #0]
 800e1e2:	230a      	movs	r3, #10
 800e1e4:	18fb      	adds	r3, r7, r3
 800e1e6:	1c0a      	adds	r2, r1, #0
 800e1e8:	701a      	strb	r2, [r3, #0]
  LoRaMacStatus_t status;
  LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800e1ea:	232f      	movs	r3, #47	; 0x2f
 800e1ec:	18fb      	adds	r3, r7, r3
 800e1ee:	22ff      	movs	r2, #255	; 0xff
 800e1f0:	701a      	strb	r2, [r3, #0]
  McpsReq_t mcpsReq;
  LoRaMacTxInfo_t txInfo;

  if (LoRaMacIsBusy() == true)
 800e1f2:	f004 fdb9 	bl	8012d68 <LoRaMacIsBusy>
 800e1f6:	1e03      	subs	r3, r0, #0
 800e1f8:	d002      	beq.n	800e200 <LmHandlerSend+0x34>
  {
    return LORAMAC_HANDLER_BUSY_ERROR;
 800e1fa:	2302      	movs	r3, #2
 800e1fc:	425b      	negs	r3, r3
 800e1fe:	e0a9      	b.n	800e354 <LmHandlerSend+0x188>
  }

  if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800e200:	f7ff ff3c 	bl	800e07c <LmHandlerJoinStatus>
 800e204:	0003      	movs	r3, r0
 800e206:	2b01      	cmp	r3, #1
 800e208:	d007      	beq.n	800e21a <LmHandlerSend+0x4e>
  {
    /* The network isn't yet joined, try again later. */
    LmHandlerJoin(JoinParams.Mode);
 800e20a:	4b54      	ldr	r3, [pc, #336]	; (800e35c <LmHandlerSend+0x190>)
 800e20c:	789b      	ldrb	r3, [r3, #2]
 800e20e:	0018      	movs	r0, r3
 800e210:	f7ff ff54 	bl	800e0bc <LmHandlerJoin>
    return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800e214:	2303      	movs	r3, #3
 800e216:	425b      	negs	r3, r3
 800e218:	e09c      	b.n	800e354 <LmHandlerSend+0x188>
  }

  if ((LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() == true)
 800e21a:	4b51      	ldr	r3, [pc, #324]	; (800e360 <LmHandlerSend+0x194>)
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	68db      	ldr	r3, [r3, #12]
 800e220:	4798      	blx	r3
 800e222:	1e03      	subs	r3, r0, #0
 800e224:	d00d      	beq.n	800e242 <LmHandlerSend+0x76>
      && (appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port) && (appData->Port != 0))
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	781a      	ldrb	r2, [r3, #0]
 800e22a:	4b4d      	ldr	r3, [pc, #308]	; (800e360 <LmHandlerSend+0x194>)
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	781b      	ldrb	r3, [r3, #0]
 800e230:	429a      	cmp	r2, r3
 800e232:	d006      	beq.n	800e242 <LmHandlerSend+0x76>
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	781b      	ldrb	r3, [r3, #0]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d002      	beq.n	800e242 <LmHandlerSend+0x76>
  {
    return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800e23c:	2304      	movs	r3, #4
 800e23e:	425b      	negs	r3, r3
 800e240:	e088      	b.n	800e354 <LmHandlerSend+0x188>
  }

  mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800e242:	4b48      	ldr	r3, [pc, #288]	; (800e364 <LmHandlerSend+0x198>)
 800e244:	2203      	movs	r2, #3
 800e246:	569a      	ldrsb	r2, [r3, r2]
 800e248:	2418      	movs	r4, #24
 800e24a:	193b      	adds	r3, r7, r4
 800e24c:	739a      	strb	r2, [r3, #14]
  if (LoRaMacQueryTxPossible(appData->BufferSize, &txInfo) != LORAMAC_STATUS_OK)
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	785b      	ldrb	r3, [r3, #1]
 800e252:	2214      	movs	r2, #20
 800e254:	18ba      	adds	r2, r7, r2
 800e256:	0011      	movs	r1, r2
 800e258:	0018      	movs	r0, r3
 800e25a:	f005 f999 	bl	8013590 <LoRaMacQueryTxPossible>
 800e25e:	1e03      	subs	r3, r0, #0
 800e260:	d00c      	beq.n	800e27c <LmHandlerSend+0xb0>
  {
    /* Send empty frame in order to flush MAC commands */
    TxParams.MsgType = LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800e262:	4b41      	ldr	r3, [pc, #260]	; (800e368 <LmHandlerSend+0x19c>)
 800e264:	2200      	movs	r2, #0
 800e266:	709a      	strb	r2, [r3, #2]
    mcpsReq.Type = MCPS_UNCONFIRMED;
 800e268:	193b      	adds	r3, r7, r4
 800e26a:	2200      	movs	r2, #0
 800e26c:	701a      	strb	r2, [r3, #0]
    mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800e26e:	193b      	adds	r3, r7, r4
 800e270:	2200      	movs	r2, #0
 800e272:	609a      	str	r2, [r3, #8]
    mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800e274:	193b      	adds	r3, r7, r4
 800e276:	2200      	movs	r2, #0
 800e278:	819a      	strh	r2, [r3, #12]
 800e27a:	e021      	b.n	800e2c0 <LmHandlerSend+0xf4>
  }
  else
  {
    TxParams.MsgType = isTxConfirmed;
 800e27c:	4b3a      	ldr	r3, [pc, #232]	; (800e368 <LmHandlerSend+0x19c>)
 800e27e:	200b      	movs	r0, #11
 800e280:	183a      	adds	r2, r7, r0
 800e282:	7812      	ldrb	r2, [r2, #0]
 800e284:	709a      	strb	r2, [r3, #2]
    mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	781a      	ldrb	r2, [r3, #0]
 800e28a:	2118      	movs	r1, #24
 800e28c:	187b      	adds	r3, r7, r1
 800e28e:	711a      	strb	r2, [r3, #4]
    mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	785b      	ldrb	r3, [r3, #1]
 800e294:	b29a      	uxth	r2, r3
 800e296:	187b      	adds	r3, r7, r1
 800e298:	819a      	strh	r2, [r3, #12]
    mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	685a      	ldr	r2, [r3, #4]
 800e29e:	187b      	adds	r3, r7, r1
 800e2a0:	609a      	str	r2, [r3, #8]
    if (isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG)
 800e2a2:	183b      	adds	r3, r7, r0
 800e2a4:	781b      	ldrb	r3, [r3, #0]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d103      	bne.n	800e2b2 <LmHandlerSend+0xe6>
    {
      mcpsReq.Type = MCPS_UNCONFIRMED;
 800e2aa:	187b      	adds	r3, r7, r1
 800e2ac:	2200      	movs	r2, #0
 800e2ae:	701a      	strb	r2, [r3, #0]
 800e2b0:	e006      	b.n	800e2c0 <LmHandlerSend+0xf4>
    }
    else
    {
      mcpsReq.Type = MCPS_CONFIRMED;
 800e2b2:	2118      	movs	r1, #24
 800e2b4:	187b      	adds	r3, r7, r1
 800e2b6:	2201      	movs	r2, #1
 800e2b8:	701a      	strb	r2, [r3, #0]
      mcpsReq.Req.Confirmed.NbTrials = 8;
 800e2ba:	187b      	adds	r3, r7, r1
 800e2bc:	2208      	movs	r2, #8
 800e2be:	73da      	strb	r2, [r3, #15]
    }
  }

  TxParams.AppData = *appData;
 800e2c0:	4b29      	ldr	r3, [pc, #164]	; (800e368 <LmHandlerSend+0x19c>)
 800e2c2:	68fa      	ldr	r2, [r7, #12]
 800e2c4:	330c      	adds	r3, #12
 800e2c6:	ca03      	ldmia	r2!, {r0, r1}
 800e2c8:	c303      	stmia	r3!, {r0, r1}
  TxParams.Datarate = LmHandlerParams.TxDatarate;
 800e2ca:	4b26      	ldr	r3, [pc, #152]	; (800e364 <LmHandlerSend+0x198>)
 800e2cc:	2203      	movs	r2, #3
 800e2ce:	569a      	ldrsb	r2, [r3, r2]
 800e2d0:	4b25      	ldr	r3, [pc, #148]	; (800e368 <LmHandlerSend+0x19c>)
 800e2d2:	711a      	strb	r2, [r3, #4]

  status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800e2d4:	232e      	movs	r3, #46	; 0x2e
 800e2d6:	18fc      	adds	r4, r7, r3
 800e2d8:	230a      	movs	r3, #10
 800e2da:	18fb      	adds	r3, r7, r3
 800e2dc:	781a      	ldrb	r2, [r3, #0]
 800e2de:	2518      	movs	r5, #24
 800e2e0:	197b      	adds	r3, r7, r5
 800e2e2:	0011      	movs	r1, r2
 800e2e4:	0018      	movs	r0, r3
 800e2e6:	f006 f83b 	bl	8014360 <LoRaMacMcpsRequest>
 800e2ea:	0003      	movs	r3, r0
 800e2ec:	7023      	strb	r3, [r4, #0]
  if (nextTxIn != NULL)
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d003      	beq.n	800e2fc <LmHandlerSend+0x130>
  {
    *nextTxIn = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800e2f4:	197b      	adds	r3, r7, r5
 800e2f6:	691a      	ldr	r2, [r3, #16]
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	601a      	str	r2, [r3, #0]
  }

  switch(status)
 800e2fc:	232e      	movs	r3, #46	; 0x2e
 800e2fe:	18fb      	adds	r3, r7, r3
 800e300:	781b      	ldrb	r3, [r3, #0]
 800e302:	2b11      	cmp	r3, #17
 800e304:	d81d      	bhi.n	800e342 <LmHandlerSend+0x176>
 800e306:	009a      	lsls	r2, r3, #2
 800e308:	4b18      	ldr	r3, [pc, #96]	; (800e36c <LmHandlerSend+0x1a0>)
 800e30a:	18d3      	adds	r3, r2, r3
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	469f      	mov	pc, r3
  {
  case LORAMAC_STATUS_OK:
    lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800e310:	232f      	movs	r3, #47	; 0x2f
 800e312:	18fb      	adds	r3, r7, r3
 800e314:	2200      	movs	r2, #0
 800e316:	701a      	strb	r2, [r3, #0]
    break;
 800e318:	e018      	b.n	800e34c <LmHandlerSend+0x180>
  case LORAMAC_STATUS_BUSY:
  case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
  case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
  case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
    lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800e31a:	232f      	movs	r3, #47	; 0x2f
 800e31c:	18fb      	adds	r3, r7, r3
 800e31e:	22fe      	movs	r2, #254	; 0xfe
 800e320:	701a      	strb	r2, [r3, #0]
    break;
 800e322:	e013      	b.n	800e34c <LmHandlerSend+0x180>
  case LORAMAC_STATUS_NO_NETWORK_JOINED:
    lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800e324:	232f      	movs	r3, #47	; 0x2f
 800e326:	18fb      	adds	r3, r7, r3
 800e328:	22fd      	movs	r2, #253	; 0xfd
 800e32a:	701a      	strb	r2, [r3, #0]
    break;
 800e32c:	e00e      	b.n	800e34c <LmHandlerSend+0x180>
  case LORAMAC_STATUS_CRYPTO_ERROR:
    lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800e32e:	232f      	movs	r3, #47	; 0x2f
 800e330:	18fb      	adds	r3, r7, r3
 800e332:	22fb      	movs	r2, #251	; 0xfb
 800e334:	701a      	strb	r2, [r3, #0]
    break;
 800e336:	e009      	b.n	800e34c <LmHandlerSend+0x180>
  case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
    lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800e338:	232f      	movs	r3, #47	; 0x2f
 800e33a:	18fb      	adds	r3, r7, r3
 800e33c:	22fa      	movs	r2, #250	; 0xfa
 800e33e:	701a      	strb	r2, [r3, #0]
    break;
 800e340:	e004      	b.n	800e34c <LmHandlerSend+0x180>
  case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
  case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
  case LORAMAC_STATUS_NO_CHANNEL_FOUND:
  case LORAMAC_STATUS_LENGTH_ERROR:
  default:
    lmhStatus = LORAMAC_HANDLER_ERROR;
 800e342:	232f      	movs	r3, #47	; 0x2f
 800e344:	18fb      	adds	r3, r7, r3
 800e346:	22ff      	movs	r2, #255	; 0xff
 800e348:	701a      	strb	r2, [r3, #0]
    break;
 800e34a:	46c0      	nop			; (mov r8, r8)
  }
      
  return lmhStatus;
 800e34c:	232f      	movs	r3, #47	; 0x2f
 800e34e:	18fb      	adds	r3, r7, r3
 800e350:	781b      	ldrb	r3, [r3, #0]
 800e352:	b25b      	sxtb	r3, r3
}
 800e354:	0018      	movs	r0, r3
 800e356:	46bd      	mov	sp, r7
 800e358:	b00c      	add	sp, #48	; 0x30
 800e35a:	bdb0      	pop	{r4, r5, r7, pc}
 800e35c:	2000015c 	.word	0x2000015c
 800e360:	2000041c 	.word	0x2000041c
 800e364:	20000430 	.word	0x20000430
 800e368:	20000478 	.word	0x20000478
 800e36c:	0801f5ec 	.word	0x0801f5ec

0800e370 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass(DeviceClass_t newClass)
{
 800e370:	b580      	push	{r7, lr}
 800e372:	b08c      	sub	sp, #48	; 0x30
 800e374:	af00      	add	r7, sp, #0
 800e376:	0002      	movs	r2, r0
 800e378:	1dfb      	adds	r3, r7, #7
 800e37a:	701a      	strb	r2, [r3, #0]
  MibRequestConfirm_t mibReq;
  DeviceClass_t currentClass;
  LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800e37c:	232f      	movs	r3, #47	; 0x2f
 800e37e:	18fb      	adds	r3, r7, r3
 800e380:	2200      	movs	r2, #0
 800e382:	701a      	strb	r2, [r3, #0]

  if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800e384:	f7ff fe7a 	bl	800e07c <LmHandlerJoinStatus>
 800e388:	0003      	movs	r3, r0
 800e38a:	2b01      	cmp	r3, #1
 800e38c:	d002      	beq.n	800e394 <LmHandlerRequestClass+0x24>
  {
    return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800e38e:	2303      	movs	r3, #3
 800e390:	425b      	negs	r3, r3
 800e392:	e077      	b.n	800e484 <LmHandlerRequestClass+0x114>
  }

  mibReq.Type = MIB_DEVICE_CLASS;
 800e394:	2108      	movs	r1, #8
 800e396:	187b      	adds	r3, r7, r1
 800e398:	2200      	movs	r2, #0
 800e39a:	701a      	strb	r2, [r3, #0]
  if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 800e39c:	187b      	adds	r3, r7, r1
 800e39e:	0018      	movs	r0, r3
 800e3a0:	f005 f9a2 	bl	80136e8 <LoRaMacMibGetRequestConfirm>
 800e3a4:	1e03      	subs	r3, r0, #0
 800e3a6:	d002      	beq.n	800e3ae <LmHandlerRequestClass+0x3e>
  {
    return LORAMAC_HANDLER_ERROR;
 800e3a8:	2301      	movs	r3, #1
 800e3aa:	425b      	negs	r3, r3
 800e3ac:	e06a      	b.n	800e484 <LmHandlerRequestClass+0x114>
  }
  currentClass = mibReq.Param.Class;
 800e3ae:	212e      	movs	r1, #46	; 0x2e
 800e3b0:	187b      	adds	r3, r7, r1
 800e3b2:	2208      	movs	r2, #8
 800e3b4:	18ba      	adds	r2, r7, r2
 800e3b6:	7912      	ldrb	r2, [r2, #4]
 800e3b8:	701a      	strb	r2, [r3, #0]

  /* Attempt to switch only if class update */
  if (currentClass != newClass)
 800e3ba:	187a      	adds	r2, r7, r1
 800e3bc:	1dfb      	adds	r3, r7, #7
 800e3be:	7812      	ldrb	r2, [r2, #0]
 800e3c0:	781b      	ldrb	r3, [r3, #0]
 800e3c2:	429a      	cmp	r2, r3
 800e3c4:	d053      	beq.n	800e46e <LmHandlerRequestClass+0xfe>
  {
    switch (newClass)
 800e3c6:	1dfb      	adds	r3, r7, #7
 800e3c8:	781b      	ldrb	r3, [r3, #0]
 800e3ca:	2b02      	cmp	r3, #2
 800e3cc:	d02a      	beq.n	800e424 <LmHandlerRequestClass+0xb4>
 800e3ce:	dc50      	bgt.n	800e472 <LmHandlerRequestClass+0x102>
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d002      	beq.n	800e3da <LmHandlerRequestClass+0x6a>
 800e3d4:	2b01      	cmp	r3, #1
 800e3d6:	d020      	beq.n	800e41a <LmHandlerRequestClass+0xaa>
          }
        }
      }
      break;
      default:
        break;
 800e3d8:	e04b      	b.n	800e472 <LmHandlerRequestClass+0x102>
        if (currentClass != CLASS_A)
 800e3da:	232e      	movs	r3, #46	; 0x2e
 800e3dc:	18fb      	adds	r3, r7, r3
 800e3de:	781b      	ldrb	r3, [r3, #0]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d048      	beq.n	800e476 <LmHandlerRequestClass+0x106>
          mibReq.Param.Class = CLASS_A;
 800e3e4:	2108      	movs	r1, #8
 800e3e6:	187b      	adds	r3, r7, r1
 800e3e8:	2200      	movs	r2, #0
 800e3ea:	711a      	strb	r2, [r3, #4]
          if (LoRaMacMibSetRequestConfirm(&mibReq) == LORAMAC_STATUS_OK)
 800e3ec:	187b      	adds	r3, r7, r1
 800e3ee:	0018      	movs	r0, r3
 800e3f0:	f005 fad8 	bl	80139a4 <LoRaMacMibSetRequestConfirm>
 800e3f4:	1e03      	subs	r3, r0, #0
 800e3f6:	d10b      	bne.n	800e410 <LmHandlerRequestClass+0xa0>
            DisplayClassUpdate(CLASS_A);
 800e3f8:	2000      	movs	r0, #0
 800e3fa:	f000 fac9 	bl	800e990 <DisplayClassUpdate>
            if (LmHandlerCallbacks.OnClassChange != NULL)
 800e3fe:	4b23      	ldr	r3, [pc, #140]	; (800e48c <LmHandlerRequestClass+0x11c>)
 800e400:	699b      	ldr	r3, [r3, #24]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d037      	beq.n	800e476 <LmHandlerRequestClass+0x106>
              LmHandlerCallbacks.OnClassChange( CLASS_A );
 800e406:	4b21      	ldr	r3, [pc, #132]	; (800e48c <LmHandlerRequestClass+0x11c>)
 800e408:	699b      	ldr	r3, [r3, #24]
 800e40a:	2000      	movs	r0, #0
 800e40c:	4798      	blx	r3
      break;
 800e40e:	e032      	b.n	800e476 <LmHandlerRequestClass+0x106>
            errorStatus = LORAMAC_HANDLER_ERROR;
 800e410:	232f      	movs	r3, #47	; 0x2f
 800e412:	18fb      	adds	r3, r7, r3
 800e414:	22ff      	movs	r2, #255	; 0xff
 800e416:	701a      	strb	r2, [r3, #0]
      break;
 800e418:	e02d      	b.n	800e476 <LmHandlerRequestClass+0x106>
        errorStatus = LORAMAC_HANDLER_ERROR;
 800e41a:	232f      	movs	r3, #47	; 0x2f
 800e41c:	18fb      	adds	r3, r7, r3
 800e41e:	22ff      	movs	r2, #255	; 0xff
 800e420:	701a      	strb	r2, [r3, #0]
      break;
 800e422:	e02b      	b.n	800e47c <LmHandlerRequestClass+0x10c>
        if (currentClass != CLASS_A)
 800e424:	232e      	movs	r3, #46	; 0x2e
 800e426:	18fb      	adds	r3, r7, r3
 800e428:	781b      	ldrb	r3, [r3, #0]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d004      	beq.n	800e438 <LmHandlerRequestClass+0xc8>
          errorStatus = LORAMAC_HANDLER_ERROR;
 800e42e:	232f      	movs	r3, #47	; 0x2f
 800e430:	18fb      	adds	r3, r7, r3
 800e432:	22ff      	movs	r2, #255	; 0xff
 800e434:	701a      	strb	r2, [r3, #0]
      break;
 800e436:	e020      	b.n	800e47a <LmHandlerRequestClass+0x10a>
          mibReq.Param.Class = CLASS_C;
 800e438:	2108      	movs	r1, #8
 800e43a:	187b      	adds	r3, r7, r1
 800e43c:	2202      	movs	r2, #2
 800e43e:	711a      	strb	r2, [r3, #4]
          if (LoRaMacMibSetRequestConfirm(&mibReq) == LORAMAC_STATUS_OK)
 800e440:	187b      	adds	r3, r7, r1
 800e442:	0018      	movs	r0, r3
 800e444:	f005 faae 	bl	80139a4 <LoRaMacMibSetRequestConfirm>
 800e448:	1e03      	subs	r3, r0, #0
 800e44a:	d10b      	bne.n	800e464 <LmHandlerRequestClass+0xf4>
            DisplayClassUpdate(CLASS_C);
 800e44c:	2002      	movs	r0, #2
 800e44e:	f000 fa9f 	bl	800e990 <DisplayClassUpdate>
            if (LmHandlerCallbacks.OnClassChange != NULL)
 800e452:	4b0e      	ldr	r3, [pc, #56]	; (800e48c <LmHandlerRequestClass+0x11c>)
 800e454:	699b      	ldr	r3, [r3, #24]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d00f      	beq.n	800e47a <LmHandlerRequestClass+0x10a>
              LmHandlerCallbacks.OnClassChange( CLASS_C );
 800e45a:	4b0c      	ldr	r3, [pc, #48]	; (800e48c <LmHandlerRequestClass+0x11c>)
 800e45c:	699b      	ldr	r3, [r3, #24]
 800e45e:	2002      	movs	r0, #2
 800e460:	4798      	blx	r3
      break;
 800e462:	e00a      	b.n	800e47a <LmHandlerRequestClass+0x10a>
            errorStatus = LORAMAC_HANDLER_ERROR;
 800e464:	232f      	movs	r3, #47	; 0x2f
 800e466:	18fb      	adds	r3, r7, r3
 800e468:	22ff      	movs	r2, #255	; 0xff
 800e46a:	701a      	strb	r2, [r3, #0]
      break;
 800e46c:	e005      	b.n	800e47a <LmHandlerRequestClass+0x10a>
    }
  }
 800e46e:	46c0      	nop			; (mov r8, r8)
 800e470:	e004      	b.n	800e47c <LmHandlerRequestClass+0x10c>
        break;
 800e472:	46c0      	nop			; (mov r8, r8)
 800e474:	e002      	b.n	800e47c <LmHandlerRequestClass+0x10c>
      break;
 800e476:	46c0      	nop			; (mov r8, r8)
 800e478:	e000      	b.n	800e47c <LmHandlerRequestClass+0x10c>
      break;
 800e47a:	46c0      	nop			; (mov r8, r8)
  return errorStatus;
 800e47c:	232f      	movs	r3, #47	; 0x2f
 800e47e:	18fb      	adds	r3, r7, r3
 800e480:	781b      	ldrb	r3, [r3, #0]
 800e482:	b25b      	sxtb	r3, r3
}
 800e484:	0018      	movs	r0, r3
 800e486:	46bd      	mov	sp, r7
 800e488:	b00c      	add	sp, #48	; 0x30
 800e48a:	bd80      	pop	{r7, pc}
 800e48c:	20000438 	.word	0x20000438

0800e490 <LmHandlerPackageRegister>:

LmHandlerErrorStatus_t LmHandlerPackageRegister(uint8_t id, void *params)
{
 800e490:	b590      	push	{r4, r7, lr}
 800e492:	b085      	sub	sp, #20
 800e494:	af00      	add	r7, sp, #0
 800e496:	0002      	movs	r2, r0
 800e498:	6039      	str	r1, [r7, #0]
 800e49a:	1dfb      	adds	r3, r7, #7
 800e49c:	701a      	strb	r2, [r3, #0]
  LmhPackage_t *package = NULL;
 800e49e:	2300      	movs	r3, #0
 800e4a0:	60fb      	str	r3, [r7, #12]
  switch (id)
 800e4a2:	1dfb      	adds	r3, r7, #7
 800e4a4:	781b      	ldrb	r3, [r3, #0]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d104      	bne.n	800e4b4 <LmHandlerPackageRegister+0x24>
  {
    case PACKAGE_ID_COMPLIANCE:
    {
      package = LmphCompliancePackageFactory();
 800e4aa:	f000 fa8b 	bl	800e9c4 <LmphCompliancePackageFactory>
 800e4ae:	0003      	movs	r3, r0
 800e4b0:	60fb      	str	r3, [r7, #12]
      break;
 800e4b2:	e000      	b.n	800e4b6 <LmHandlerPackageRegister+0x26>
    default:
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
      LmhpDataDistributionPackageRegister(id, &package);
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
      break;
 800e4b4:	46c0      	nop			; (mov r8, r8)
  }

  if (package != NULL)
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d028      	beq.n	800e50e <LmHandlerPackageRegister+0x7e>
  {
    LmHandlerPackages[id] = package;
 800e4bc:	1dfb      	adds	r3, r7, #7
 800e4be:	781a      	ldrb	r2, [r3, #0]
 800e4c0:	4b16      	ldr	r3, [pc, #88]	; (800e51c <LmHandlerPackageRegister+0x8c>)
 800e4c2:	0092      	lsls	r2, r2, #2
 800e4c4:	68f9      	ldr	r1, [r7, #12]
 800e4c6:	50d1      	str	r1, [r2, r3]
    LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800e4c8:	1dfb      	adds	r3, r7, #7
 800e4ca:	781a      	ldrb	r2, [r3, #0]
 800e4cc:	4b13      	ldr	r3, [pc, #76]	; (800e51c <LmHandlerPackageRegister+0x8c>)
 800e4ce:	0092      	lsls	r2, r2, #2
 800e4d0:	58d3      	ldr	r3, [r2, r3]
 800e4d2:	4a13      	ldr	r2, [pc, #76]	; (800e520 <LmHandlerPackageRegister+0x90>)
 800e4d4:	621a      	str	r2, [r3, #32]
    LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800e4d6:	1dfb      	adds	r3, r7, #7
 800e4d8:	781a      	ldrb	r2, [r3, #0]
 800e4da:	4b10      	ldr	r3, [pc, #64]	; (800e51c <LmHandlerPackageRegister+0x8c>)
 800e4dc:	0092      	lsls	r2, r2, #2
 800e4de:	58d3      	ldr	r3, [r2, r3]
 800e4e0:	4a10      	ldr	r2, [pc, #64]	; (800e524 <LmHandlerPackageRegister+0x94>)
 800e4e2:	625a      	str	r2, [r3, #36]	; 0x24
    LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800e4e4:	1dfb      	adds	r3, r7, #7
 800e4e6:	781a      	ldrb	r2, [r3, #0]
 800e4e8:	4b0c      	ldr	r3, [pc, #48]	; (800e51c <LmHandlerPackageRegister+0x8c>)
 800e4ea:	0092      	lsls	r2, r2, #2
 800e4ec:	58d3      	ldr	r3, [r2, r3]
 800e4ee:	4a0e      	ldr	r2, [pc, #56]	; (800e528 <LmHandlerPackageRegister+0x98>)
 800e4f0:	629a      	str	r2, [r3, #40]	; 0x28
    LmHandlerPackages[id]->Init(params, AppData.Buffer, LORAWAN_APP_DATA_BUFFER_MAX_SIZE);
 800e4f2:	1dfb      	adds	r3, r7, #7
 800e4f4:	781a      	ldrb	r2, [r3, #0]
 800e4f6:	4b09      	ldr	r3, [pc, #36]	; (800e51c <LmHandlerPackageRegister+0x8c>)
 800e4f8:	0092      	lsls	r2, r2, #2
 800e4fa:	58d3      	ldr	r3, [r2, r3]
 800e4fc:	685c      	ldr	r4, [r3, #4]
 800e4fe:	4b0b      	ldr	r3, [pc, #44]	; (800e52c <LmHandlerPackageRegister+0x9c>)
 800e500:	6859      	ldr	r1, [r3, #4]
 800e502:	683b      	ldr	r3, [r7, #0]
 800e504:	22f2      	movs	r2, #242	; 0xf2
 800e506:	0018      	movs	r0, r3
 800e508:	47a0      	blx	r4

    return LORAMAC_HANDLER_SUCCESS;
 800e50a:	2300      	movs	r3, #0
 800e50c:	e001      	b.n	800e512 <LmHandlerPackageRegister+0x82>
  }
  else
  {
    return LORAMAC_HANDLER_ERROR;
 800e50e:	2301      	movs	r3, #1
 800e510:	425b      	negs	r3, r3
  }
}
 800e512:	0018      	movs	r0, r3
 800e514:	46bd      	mov	sp, r7
 800e516:	b005      	add	sp, #20
 800e518:	bd90      	pop	{r4, r7, pc}
 800e51a:	46c0      	nop			; (mov r8, r8)
 800e51c:	2000041c 	.word	0x2000041c
 800e520:	0800e0bd 	.word	0x0800e0bd
 800e524:	0800e1cd 	.word	0x0800e1cd
 800e528:	0800e5c9 	.word	0x0800e5c9
 800e52c:	20000170 	.word	0x20000170

0800e530 <LmHandlerGetCurrentClass>:

int32_t LmHandlerGetCurrentClass(DeviceClass_t *deviceClass)
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b08c      	sub	sp, #48	; 0x30
 800e534:	af00      	add	r7, sp, #0
 800e536:	6078      	str	r0, [r7, #4]
  MibRequestConfirm_t mibReq;
  if (deviceClass == NULL)
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d102      	bne.n	800e544 <LmHandlerGetCurrentClass+0x14>
  {
    return LORAMAC_HANDLER_ERROR;
 800e53e:	2301      	movs	r3, #1
 800e540:	425b      	negs	r3, r3
 800e542:	e012      	b.n	800e56a <LmHandlerGetCurrentClass+0x3a>
  }

  mibReq.Type = MIB_DEVICE_CLASS;
 800e544:	210c      	movs	r1, #12
 800e546:	187b      	adds	r3, r7, r1
 800e548:	2200      	movs	r2, #0
 800e54a:	701a      	strb	r2, [r3, #0]
  if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 800e54c:	187b      	adds	r3, r7, r1
 800e54e:	0018      	movs	r0, r3
 800e550:	f005 f8ca 	bl	80136e8 <LoRaMacMibGetRequestConfirm>
 800e554:	1e03      	subs	r3, r0, #0
 800e556:	d002      	beq.n	800e55e <LmHandlerGetCurrentClass+0x2e>
  {
    return LORAMAC_HANDLER_ERROR;
 800e558:	2301      	movs	r3, #1
 800e55a:	425b      	negs	r3, r3
 800e55c:	e005      	b.n	800e56a <LmHandlerGetCurrentClass+0x3a>
  }

  *deviceClass = mibReq.Param.Class;
 800e55e:	230c      	movs	r3, #12
 800e560:	18fb      	adds	r3, r7, r3
 800e562:	791a      	ldrb	r2, [r3, #4]
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	701a      	strb	r2, [r3, #0]
  return LORAMAC_HANDLER_SUCCESS;
 800e568:	2300      	movs	r3, #0
}
 800e56a:	0018      	movs	r0, r3
 800e56c:	46bd      	mov	sp, r7
 800e56e:	b00c      	add	sp, #48	; 0x30
 800e570:	bd80      	pop	{r7, pc}
	...

0800e574 <LmHandlerGetTxDatarate>:

int32_t LmHandlerGetTxDatarate(int8_t *txDatarate)
{
 800e574:	b580      	push	{r7, lr}
 800e576:	b08c      	sub	sp, #48	; 0x30
 800e578:	af00      	add	r7, sp, #0
 800e57a:	6078      	str	r0, [r7, #4]
  MibRequestConfirm_t mibGet;
  if (txDatarate == NULL)
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d102      	bne.n	800e588 <LmHandlerGetTxDatarate+0x14>
  {
    return LORAMAC_HANDLER_ERROR;
 800e582:	2301      	movs	r3, #1
 800e584:	425b      	negs	r3, r3
 800e586:	e018      	b.n	800e5ba <LmHandlerGetTxDatarate+0x46>
  }

  mibGet.Type = MIB_CHANNELS_DATARATE;
 800e588:	210c      	movs	r1, #12
 800e58a:	187b      	adds	r3, r7, r1
 800e58c:	221f      	movs	r2, #31
 800e58e:	701a      	strb	r2, [r3, #0]
  if (LoRaMacMibGetRequestConfirm(&mibGet) != LORAMAC_STATUS_OK)
 800e590:	187b      	adds	r3, r7, r1
 800e592:	0018      	movs	r0, r3
 800e594:	f005 f8a8 	bl	80136e8 <LoRaMacMibGetRequestConfirm>
 800e598:	1e03      	subs	r3, r0, #0
 800e59a:	d002      	beq.n	800e5a2 <LmHandlerGetTxDatarate+0x2e>
  {
    return LORAMAC_HANDLER_ERROR;
 800e59c:	2301      	movs	r3, #1
 800e59e:	425b      	negs	r3, r3
 800e5a0:	e00b      	b.n	800e5ba <LmHandlerGetTxDatarate+0x46>
  }

  *txDatarate = mibGet.Param.ChannelsDatarate;
 800e5a2:	210c      	movs	r1, #12
 800e5a4:	187b      	adds	r3, r7, r1
 800e5a6:	2204      	movs	r2, #4
 800e5a8:	569a      	ldrsb	r2, [r3, r2]
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	701a      	strb	r2, [r3, #0]
  LmHandlerParams.TxDatarate = mibGet.Param.ChannelsDatarate;
 800e5ae:	187b      	adds	r3, r7, r1
 800e5b0:	2204      	movs	r2, #4
 800e5b2:	569a      	ldrsb	r2, [r3, r2]
 800e5b4:	4b03      	ldr	r3, [pc, #12]	; (800e5c4 <LmHandlerGetTxDatarate+0x50>)
 800e5b6:	70da      	strb	r2, [r3, #3]
  return LORAMAC_HANDLER_SUCCESS;
 800e5b8:	2300      	movs	r3, #0
}
 800e5ba:	0018      	movs	r0, r3
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	b00c      	add	sp, #48	; 0x30
 800e5c0:	bd80      	pop	{r7, pc}
 800e5c2:	46c0      	nop			; (mov r8, r8)
 800e5c4:	20000430 	.word	0x20000430

0800e5c8 <LmHandlerDeviceTimeReq>:
#endif /* LORAMAC_CLASSB_ENABLED */
}

/* Private  functions ---------------------------------------------------------*/
static LmHandlerErrorStatus_t LmHandlerDeviceTimeReq(void)
{
 800e5c8:	b5b0      	push	{r4, r5, r7, lr}
 800e5ca:	b086      	sub	sp, #24
 800e5cc:	af00      	add	r7, sp, #0
  LoRaMacStatus_t status;
  MlmeReq_t mlmeReq;

  mlmeReq.Type = MLME_DEVICE_TIME;
 800e5ce:	003b      	movs	r3, r7
 800e5d0:	220a      	movs	r2, #10
 800e5d2:	701a      	strb	r2, [r3, #0]

  status = LoRaMacMlmeRequest(&mlmeReq);
 800e5d4:	2517      	movs	r5, #23
 800e5d6:	197c      	adds	r4, r7, r5
 800e5d8:	003b      	movs	r3, r7
 800e5da:	0018      	movs	r0, r3
 800e5dc:	f005 fd68 	bl	80140b0 <LoRaMacMlmeRequest>
 800e5e0:	0003      	movs	r3, r0
 800e5e2:	7023      	strb	r3, [r4, #0]

  if (status == LORAMAC_STATUS_OK)
 800e5e4:	197b      	adds	r3, r7, r5
 800e5e6:	781b      	ldrb	r3, [r3, #0]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d101      	bne.n	800e5f0 <LmHandlerDeviceTimeReq+0x28>
  {
    return LORAMAC_HANDLER_SUCCESS;
 800e5ec:	2300      	movs	r3, #0
 800e5ee:	e001      	b.n	800e5f4 <LmHandlerDeviceTimeReq+0x2c>
  }
  else
  {
    return LORAMAC_HANDLER_ERROR;
 800e5f0:	2301      	movs	r3, #1
 800e5f2:	425b      	negs	r3, r3
  }
}
 800e5f4:	0018      	movs	r0, r3
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	b006      	add	sp, #24
 800e5fa:	bdb0      	pop	{r4, r5, r7, pc}

0800e5fc <McpsConfirm>:
  }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

static void McpsConfirm(McpsConfirm_t *mcpsConfirm)
{
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b082      	sub	sp, #8
 800e600:	af00      	add	r7, sp, #0
 800e602:	6078      	str	r0, [r7, #4]
  TxParams.IsMcpsConfirm = 1;
 800e604:	4b16      	ldr	r3, [pc, #88]	; (800e660 <McpsConfirm+0x64>)
 800e606:	2201      	movs	r2, #1
 800e608:	701a      	strb	r2, [r3, #0]
  TxParams.Status = mcpsConfirm->Status;
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	785a      	ldrb	r2, [r3, #1]
 800e60e:	4b14      	ldr	r3, [pc, #80]	; (800e660 <McpsConfirm+0x64>)
 800e610:	705a      	strb	r2, [r3, #1]
  TxParams.Datarate = mcpsConfirm->Datarate;
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	789b      	ldrb	r3, [r3, #2]
 800e616:	b25a      	sxtb	r2, r3
 800e618:	4b11      	ldr	r3, [pc, #68]	; (800e660 <McpsConfirm+0x64>)
 800e61a:	711a      	strb	r2, [r3, #4]
  TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	68da      	ldr	r2, [r3, #12]
 800e620:	4b0f      	ldr	r3, [pc, #60]	; (800e660 <McpsConfirm+0x64>)
 800e622:	609a      	str	r2, [r3, #8]
  TxParams.TxPower = mcpsConfirm->TxPower;
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	2203      	movs	r2, #3
 800e628:	569a      	ldrsb	r2, [r3, r2]
 800e62a:	4b0d      	ldr	r3, [pc, #52]	; (800e660 <McpsConfirm+0x64>)
 800e62c:	751a      	strb	r2, [r3, #20]
  TxParams.Channel = mcpsConfirm->Channel;
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	691b      	ldr	r3, [r3, #16]
 800e632:	b2da      	uxtb	r2, r3
 800e634:	4b0a      	ldr	r3, [pc, #40]	; (800e660 <McpsConfirm+0x64>)
 800e636:	755a      	strb	r2, [r3, #21]
  TxParams.AckReceived = mcpsConfirm->AckReceived;
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	791b      	ldrb	r3, [r3, #4]
 800e63c:	001a      	movs	r2, r3
 800e63e:	4b08      	ldr	r3, [pc, #32]	; (800e660 <McpsConfirm+0x64>)
 800e640:	70da      	strb	r2, [r3, #3]

  LmHandlerCallbacks.OnTxData(&TxParams);
 800e642:	4b08      	ldr	r3, [pc, #32]	; (800e664 <McpsConfirm+0x68>)
 800e644:	691b      	ldr	r3, [r3, #16]
 800e646:	4a06      	ldr	r2, [pc, #24]	; (800e660 <McpsConfirm+0x64>)
 800e648:	0010      	movs	r0, r2
 800e64a:	4798      	blx	r3

  LmHandlerPackagesNotify(PACKAGE_MCPS_CONFIRM, mcpsConfirm);
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	0019      	movs	r1, r3
 800e650:	2000      	movs	r0, #0
 800e652:	f000 f907 	bl	800e864 <LmHandlerPackagesNotify>
}
 800e656:	46c0      	nop			; (mov r8, r8)
 800e658:	46bd      	mov	sp, r7
 800e65a:	b002      	add	sp, #8
 800e65c:	bd80      	pop	{r7, pc}
 800e65e:	46c0      	nop			; (mov r8, r8)
 800e660:	20000478 	.word	0x20000478
 800e664:	20000438 	.word	0x20000438

0800e668 <McpsIndication>:

static void McpsIndication(McpsIndication_t *mcpsIndication)
{
 800e668:	b590      	push	{r4, r7, lr}
 800e66a:	b089      	sub	sp, #36	; 0x24
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	6078      	str	r0, [r7, #4]
  LmHandlerAppData_t appData;
  DeviceClass_t deviceClass;
  RxParams.IsMcpsIndication = 1;
 800e670:	4b36      	ldr	r3, [pc, #216]	; (800e74c <McpsIndication+0xe4>)
 800e672:	2201      	movs	r2, #1
 800e674:	701a      	strb	r2, [r3, #0]
  RxParams.Status = mcpsIndication->Status;
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	785a      	ldrb	r2, [r3, #1]
 800e67a:	4b34      	ldr	r3, [pc, #208]	; (800e74c <McpsIndication+0xe4>)
 800e67c:	705a      	strb	r2, [r3, #1]

  if (RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK)
 800e67e:	4b33      	ldr	r3, [pc, #204]	; (800e74c <McpsIndication+0xe4>)
 800e680:	785b      	ldrb	r3, [r3, #1]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d15e      	bne.n	800e744 <McpsIndication+0xdc>
  {
    return;
  }

  if (mcpsIndication->BufferSize > 0)
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	7b1b      	ldrb	r3, [r3, #12]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d02c      	beq.n	800e6e8 <McpsIndication+0x80>
  {
    RxParams.Datarate = mcpsIndication->RxDatarate;
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	791b      	ldrb	r3, [r3, #4]
 800e692:	b25a      	sxtb	r2, r3
 800e694:	4b2d      	ldr	r3, [pc, #180]	; (800e74c <McpsIndication+0xe4>)
 800e696:	709a      	strb	r2, [r3, #2]
    RxParams.Rssi = mcpsIndication->Rssi;
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	220e      	movs	r2, #14
 800e69c:	5e9b      	ldrsh	r3, [r3, r2]
 800e69e:	b25a      	sxtb	r2, r3
 800e6a0:	4b2a      	ldr	r3, [pc, #168]	; (800e74c <McpsIndication+0xe4>)
 800e6a2:	70da      	strb	r2, [r3, #3]
    RxParams.Snr = mcpsIndication->Snr;
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	2210      	movs	r2, #16
 800e6a8:	569a      	ldrsb	r2, [r3, r2]
 800e6aa:	4b28      	ldr	r3, [pc, #160]	; (800e74c <McpsIndication+0xe4>)
 800e6ac:	711a      	strb	r2, [r3, #4]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	695a      	ldr	r2, [r3, #20]
 800e6b2:	4b26      	ldr	r3, [pc, #152]	; (800e74c <McpsIndication+0xe4>)
 800e6b4:	609a      	str	r2, [r3, #8]
    RxParams.RxSlot = mcpsIndication->RxSlot;
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	7c5b      	ldrb	r3, [r3, #17]
 800e6ba:	b25a      	sxtb	r2, r3
 800e6bc:	4b23      	ldr	r3, [pc, #140]	; (800e74c <McpsIndication+0xe4>)
 800e6be:	731a      	strb	r2, [r3, #12]

    appData.Port = mcpsIndication->Port;
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	78da      	ldrb	r2, [r3, #3]
 800e6c4:	2118      	movs	r1, #24
 800e6c6:	187b      	adds	r3, r7, r1
 800e6c8:	701a      	strb	r2, [r3, #0]
    appData.BufferSize = mcpsIndication->BufferSize;
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	7b1a      	ldrb	r2, [r3, #12]
 800e6ce:	187b      	adds	r3, r7, r1
 800e6d0:	705a      	strb	r2, [r3, #1]
    appData.Buffer = mcpsIndication->Buffer;
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	689a      	ldr	r2, [r3, #8]
 800e6d6:	0008      	movs	r0, r1
 800e6d8:	187b      	adds	r3, r7, r1
 800e6da:	605a      	str	r2, [r3, #4]

    LmHandlerCallbacks.OnRxData(&appData, &RxParams);
 800e6dc:	4b1c      	ldr	r3, [pc, #112]	; (800e750 <McpsIndication+0xe8>)
 800e6de:	695b      	ldr	r3, [r3, #20]
 800e6e0:	491a      	ldr	r1, [pc, #104]	; (800e74c <McpsIndication+0xe4>)
 800e6e2:	183a      	adds	r2, r7, r0
 800e6e4:	0010      	movs	r0, r2
 800e6e6:	4798      	blx	r3
  }
   
    if( mcpsIndication->DeviceTimeAnsReceived == true )
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	7f1b      	ldrb	r3, [r3, #28]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d006      	beq.n	800e6fe <McpsIndication+0x96>
    {
      if( LmHandlerCallbacks.OnSysTimeUpdate != NULL)
 800e6f0:	4b17      	ldr	r3, [pc, #92]	; (800e750 <McpsIndication+0xe8>)
 800e6f2:	69db      	ldr	r3, [r3, #28]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d002      	beq.n	800e6fe <McpsIndication+0x96>
      { 
        /*callback used in Class C data transfert use case (fuota)*/
        LmHandlerCallbacks.OnSysTimeUpdate( );
 800e6f8:	4b15      	ldr	r3, [pc, #84]	; (800e750 <McpsIndication+0xe8>)
 800e6fa:	69db      	ldr	r3, [r3, #28]
 800e6fc:	4798      	blx	r3
      }  
    }  
  
  /* Call packages RxProcess function */
  LmHandlerPackagesNotify(PACKAGE_MCPS_INDICATION, mcpsIndication);
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	0019      	movs	r1, r3
 800e702:	2001      	movs	r0, #1
 800e704:	f000 f8ae 	bl	800e864 <LmHandlerPackagesNotify>
  LmHandlerGetCurrentClass(&deviceClass);
 800e708:	2417      	movs	r4, #23
 800e70a:	193b      	adds	r3, r7, r4
 800e70c:	0018      	movs	r0, r3
 800e70e:	f7ff ff0f 	bl	800e530 <LmHandlerGetCurrentClass>
  if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	795b      	ldrb	r3, [r3, #5]
 800e716:	2b01      	cmp	r3, #1
 800e718:	d115      	bne.n	800e746 <McpsIndication+0xde>
 800e71a:	193b      	adds	r3, r7, r4
 800e71c:	781b      	ldrb	r3, [r3, #0]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d111      	bne.n	800e746 <McpsIndication+0xde>
  {
    /* The server signals that it has pending data to be sent. */
    /* We schedule an uplink as soon as possible to flush the server. */

    /* Send an empty message */
    LmHandlerAppData_t appData =
 800e722:	210c      	movs	r1, #12
 800e724:	187b      	adds	r3, r7, r1
 800e726:	2200      	movs	r2, #0
 800e728:	701a      	strb	r2, [r3, #0]
 800e72a:	187b      	adds	r3, r7, r1
 800e72c:	2200      	movs	r2, #0
 800e72e:	705a      	strb	r2, [r3, #1]
 800e730:	187b      	adds	r3, r7, r1
 800e732:	2200      	movs	r2, #0
 800e734:	605a      	str	r2, [r3, #4]
    {
      .Buffer = NULL,
      .BufferSize = 0,
      .Port = 0
    };
    LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 800e736:	1878      	adds	r0, r7, r1
 800e738:	2301      	movs	r3, #1
 800e73a:	2200      	movs	r2, #0
 800e73c:	2100      	movs	r1, #0
 800e73e:	f7ff fd45 	bl	800e1cc <LmHandlerSend>
 800e742:	e000      	b.n	800e746 <McpsIndication+0xde>
    return;
 800e744:	46c0      	nop			; (mov r8, r8)
  }
}
 800e746:	46bd      	mov	sp, r7
 800e748:	b009      	add	sp, #36	; 0x24
 800e74a:	bd90      	pop	{r4, r7, pc}
 800e74c:	20000160 	.word	0x20000160
 800e750:	20000438 	.word	0x20000438

0800e754 <MlmeConfirm>:

static void MlmeConfirm(MlmeConfirm_t *mlmeConfirm)
{
 800e754:	b590      	push	{r4, r7, lr}
 800e756:	b08d      	sub	sp, #52	; 0x34
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
  TxParams.IsMcpsConfirm = 0;
 800e75c:	4b22      	ldr	r3, [pc, #136]	; (800e7e8 <MlmeConfirm+0x94>)
 800e75e:	2200      	movs	r2, #0
 800e760:	701a      	strb	r2, [r3, #0]
  TxParams.Status = mlmeConfirm->Status;
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	785a      	ldrb	r2, [r3, #1]
 800e766:	4b20      	ldr	r3, [pc, #128]	; (800e7e8 <MlmeConfirm+0x94>)
 800e768:	705a      	strb	r2, [r3, #1]

  LmHandlerPackagesNotify(PACKAGE_MLME_CONFIRM, mlmeConfirm);
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	0019      	movs	r1, r3
 800e76e:	2002      	movs	r0, #2
 800e770:	f000 f878 	bl	800e864 <LmHandlerPackagesNotify>

  switch (mlmeConfirm->MlmeRequest)
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	781b      	ldrb	r3, [r3, #0]
 800e778:	2b0a      	cmp	r3, #10
 800e77a:	d02c      	beq.n	800e7d6 <MlmeConfirm+0x82>
 800e77c:	dc2d      	bgt.n	800e7da <MlmeConfirm+0x86>
 800e77e:	2b01      	cmp	r3, #1
 800e780:	d002      	beq.n	800e788 <MlmeConfirm+0x34>
 800e782:	2b04      	cmp	r3, #4
 800e784:	d02b      	beq.n	800e7de <MlmeConfirm+0x8a>
      }
    }
    break;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
      break;
 800e786:	e028      	b.n	800e7da <MlmeConfirm+0x86>
      mibReq.Type = MIB_DEV_ADDR;
 800e788:	210c      	movs	r1, #12
 800e78a:	187b      	adds	r3, r7, r1
 800e78c:	2206      	movs	r2, #6
 800e78e:	701a      	strb	r2, [r3, #0]
      LoRaMacMibGetRequestConfirm(&mibReq);
 800e790:	000c      	movs	r4, r1
 800e792:	187b      	adds	r3, r7, r1
 800e794:	0018      	movs	r0, r3
 800e796:	f004 ffa7 	bl	80136e8 <LoRaMacMibGetRequestConfirm>
      CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800e79a:	193b      	adds	r3, r7, r4
 800e79c:	685a      	ldr	r2, [r3, #4]
 800e79e:	4b13      	ldr	r3, [pc, #76]	; (800e7ec <MlmeConfirm+0x98>)
 800e7a0:	615a      	str	r2, [r3, #20]
      LmHandlerGetTxDatarate(&JoinParams.Datarate);
 800e7a2:	4b13      	ldr	r3, [pc, #76]	; (800e7f0 <MlmeConfirm+0x9c>)
 800e7a4:	0018      	movs	r0, r3
 800e7a6:	f7ff fee5 	bl	800e574 <LmHandlerGetTxDatarate>
      if (mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK)
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	785b      	ldrb	r3, [r3, #1]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d108      	bne.n	800e7c4 <MlmeConfirm+0x70>
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800e7b2:	4b0f      	ldr	r3, [pc, #60]	; (800e7f0 <MlmeConfirm+0x9c>)
 800e7b4:	2200      	movs	r2, #0
 800e7b6:	705a      	strb	r2, [r3, #1]
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800e7b8:	4b0e      	ldr	r3, [pc, #56]	; (800e7f4 <MlmeConfirm+0xa0>)
 800e7ba:	785b      	ldrb	r3, [r3, #1]
 800e7bc:	0018      	movs	r0, r3
 800e7be:	f7ff fdd7 	bl	800e370 <LmHandlerRequestClass>
 800e7c2:	e002      	b.n	800e7ca <MlmeConfirm+0x76>
        JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800e7c4:	4b0a      	ldr	r3, [pc, #40]	; (800e7f0 <MlmeConfirm+0x9c>)
 800e7c6:	22ff      	movs	r2, #255	; 0xff
 800e7c8:	705a      	strb	r2, [r3, #1]
      LmHandlerCallbacks.OnJoinRequest(&JoinParams);
 800e7ca:	4b0b      	ldr	r3, [pc, #44]	; (800e7f8 <MlmeConfirm+0xa4>)
 800e7cc:	68db      	ldr	r3, [r3, #12]
 800e7ce:	4a08      	ldr	r2, [pc, #32]	; (800e7f0 <MlmeConfirm+0x9c>)
 800e7d0:	0010      	movs	r0, r2
 800e7d2:	4798      	blx	r3
    break;
 800e7d4:	e004      	b.n	800e7e0 <MlmeConfirm+0x8c>
    break;
 800e7d6:	46c0      	nop			; (mov r8, r8)
 800e7d8:	e002      	b.n	800e7e0 <MlmeConfirm+0x8c>
      break;
 800e7da:	46c0      	nop			; (mov r8, r8)
 800e7dc:	e000      	b.n	800e7e0 <MlmeConfirm+0x8c>
    break;
 800e7de:	46c0      	nop			; (mov r8, r8)
  }
}
 800e7e0:	46c0      	nop			; (mov r8, r8)
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	b00d      	add	sp, #52	; 0x34
 800e7e6:	bd90      	pop	{r4, r7, pc}
 800e7e8:	20000478 	.word	0x20000478
 800e7ec:	20000138 	.word	0x20000138
 800e7f0:	2000015c 	.word	0x2000015c
 800e7f4:	20000430 	.word	0x20000430
 800e7f8:	20000438 	.word	0x20000438

0800e7fc <MlmeIndication>:

static void MlmeIndication(MlmeIndication_t *mlmeIndication)
{
 800e7fc:	b580      	push	{r7, lr}
 800e7fe:	b082      	sub	sp, #8
 800e800:	af00      	add	r7, sp, #0
 800e802:	6078      	str	r0, [r7, #4]
  RxParams.IsMcpsIndication = 0;
 800e804:	4b05      	ldr	r3, [pc, #20]	; (800e81c <MlmeIndication+0x20>)
 800e806:	2200      	movs	r2, #0
 800e808:	701a      	strb	r2, [r3, #0]
  RxParams.Status = mlmeIndication->Status;
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	785a      	ldrb	r2, [r3, #1]
 800e80e:	4b03      	ldr	r3, [pc, #12]	; (800e81c <MlmeIndication+0x20>)
 800e810:	705a      	strb	r2, [r3, #1]
      }
      break;
    }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
      break;
 800e812:	46c0      	nop			; (mov r8, r8)
  }
}
 800e814:	46c0      	nop			; (mov r8, r8)
 800e816:	46bd      	mov	sp, r7
 800e818:	b002      	add	sp, #8
 800e81a:	bd80      	pop	{r7, pc}
 800e81c:	20000160 	.word	0x20000160

0800e820 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized(uint8_t id)
{
 800e820:	b580      	push	{r7, lr}
 800e822:	b082      	sub	sp, #8
 800e824:	af00      	add	r7, sp, #0
 800e826:	0002      	movs	r2, r0
 800e828:	1dfb      	adds	r3, r7, #7
 800e82a:	701a      	strb	r2, [r3, #0]
  if ((id < PKG_MAX_NUMBER) && (LmHandlerPackages[id]->IsInitialized != NULL))
 800e82c:	1dfb      	adds	r3, r7, #7
 800e82e:	781b      	ldrb	r3, [r3, #0]
 800e830:	2b04      	cmp	r3, #4
 800e832:	d810      	bhi.n	800e856 <LmHandlerPackageIsInitialized+0x36>
 800e834:	1dfb      	adds	r3, r7, #7
 800e836:	781a      	ldrb	r2, [r3, #0]
 800e838:	4b09      	ldr	r3, [pc, #36]	; (800e860 <LmHandlerPackageIsInitialized+0x40>)
 800e83a:	0092      	lsls	r2, r2, #2
 800e83c:	58d3      	ldr	r3, [r2, r3]
 800e83e:	689b      	ldr	r3, [r3, #8]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d008      	beq.n	800e856 <LmHandlerPackageIsInitialized+0x36>
  {
    return LmHandlerPackages[id]->IsInitialized();
 800e844:	1dfb      	adds	r3, r7, #7
 800e846:	781a      	ldrb	r2, [r3, #0]
 800e848:	4b05      	ldr	r3, [pc, #20]	; (800e860 <LmHandlerPackageIsInitialized+0x40>)
 800e84a:	0092      	lsls	r2, r2, #2
 800e84c:	58d3      	ldr	r3, [r2, r3]
 800e84e:	689b      	ldr	r3, [r3, #8]
 800e850:	4798      	blx	r3
 800e852:	0003      	movs	r3, r0
 800e854:	e000      	b.n	800e858 <LmHandlerPackageIsInitialized+0x38>
  }
  else
  {
    return false;
 800e856:	2300      	movs	r3, #0
  }
}
 800e858:	0018      	movs	r0, r3
 800e85a:	46bd      	mov	sp, r7
 800e85c:	b002      	add	sp, #8
 800e85e:	bd80      	pop	{r7, pc}
 800e860:	2000041c 	.word	0x2000041c

0800e864 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify(PackageNotifyTypes_t notifyType, void *params)
{
 800e864:	b580      	push	{r7, lr}
 800e866:	b084      	sub	sp, #16
 800e868:	af00      	add	r7, sp, #0
 800e86a:	0002      	movs	r2, r0
 800e86c:	6039      	str	r1, [r7, #0]
 800e86e:	1dfb      	adds	r3, r7, #7
 800e870:	701a      	strb	r2, [r3, #0]
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 800e872:	230f      	movs	r3, #15
 800e874:	18fb      	adds	r3, r7, r3
 800e876:	2200      	movs	r2, #0
 800e878:	701a      	strb	r2, [r3, #0]
 800e87a:	e07b      	b.n	800e974 <LmHandlerPackagesNotify+0x110>
  {
    if (LmHandlerPackages[i] != NULL)
 800e87c:	230f      	movs	r3, #15
 800e87e:	18fb      	adds	r3, r7, r3
 800e880:	2200      	movs	r2, #0
 800e882:	569a      	ldrsb	r2, [r3, r2]
 800e884:	4b41      	ldr	r3, [pc, #260]	; (800e98c <LmHandlerPackagesNotify+0x128>)
 800e886:	0092      	lsls	r2, r2, #2
 800e888:	58d3      	ldr	r3, [r2, r3]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d100      	bne.n	800e890 <LmHandlerPackagesNotify+0x2c>
 800e88e:	e05f      	b.n	800e950 <LmHandlerPackagesNotify+0xec>
    {
      switch (notifyType)
 800e890:	1dfb      	adds	r3, r7, #7
 800e892:	781b      	ldrb	r3, [r3, #0]
 800e894:	2b02      	cmp	r3, #2
 800e896:	d046      	beq.n	800e926 <LmHandlerPackagesNotify+0xc2>
 800e898:	dc5c      	bgt.n	800e954 <LmHandlerPackagesNotify+0xf0>
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d002      	beq.n	800e8a4 <LmHandlerPackagesNotify+0x40>
 800e89e:	2b01      	cmp	r3, #1
 800e8a0:	d015      	beq.n	800e8ce <LmHandlerPackagesNotify+0x6a>
            LmHandlerPackages[i]->OnMlmeConfirmProcess(params);
          }
          break;
        }
        default:
          break;
 800e8a2:	e057      	b.n	800e954 <LmHandlerPackagesNotify+0xf0>
          if (LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL)
 800e8a4:	210f      	movs	r1, #15
 800e8a6:	187b      	adds	r3, r7, r1
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	569a      	ldrsb	r2, [r3, r2]
 800e8ac:	4b37      	ldr	r3, [pc, #220]	; (800e98c <LmHandlerPackagesNotify+0x128>)
 800e8ae:	0092      	lsls	r2, r2, #2
 800e8b0:	58d3      	ldr	r3, [r2, r3]
 800e8b2:	695b      	ldr	r3, [r3, #20]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d04f      	beq.n	800e958 <LmHandlerPackagesNotify+0xf4>
            LmHandlerPackages[i]->OnMcpsConfirmProcess(params);
 800e8b8:	187b      	adds	r3, r7, r1
 800e8ba:	2200      	movs	r2, #0
 800e8bc:	569a      	ldrsb	r2, [r3, r2]
 800e8be:	4b33      	ldr	r3, [pc, #204]	; (800e98c <LmHandlerPackagesNotify+0x128>)
 800e8c0:	0092      	lsls	r2, r2, #2
 800e8c2:	58d3      	ldr	r3, [r2, r3]
 800e8c4:	695b      	ldr	r3, [r3, #20]
 800e8c6:	683a      	ldr	r2, [r7, #0]
 800e8c8:	0010      	movs	r0, r2
 800e8ca:	4798      	blx	r3
          break;
 800e8cc:	e044      	b.n	800e958 <LmHandlerPackagesNotify+0xf4>
          if ((LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL) &&
 800e8ce:	210f      	movs	r1, #15
 800e8d0:	187b      	adds	r3, r7, r1
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	569a      	ldrsb	r2, [r3, r2]
 800e8d6:	4b2d      	ldr	r3, [pc, #180]	; (800e98c <LmHandlerPackagesNotify+0x128>)
 800e8d8:	0092      	lsls	r2, r2, #2
 800e8da:	58d3      	ldr	r3, [r2, r3]
 800e8dc:	699b      	ldr	r3, [r3, #24]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d03c      	beq.n	800e95c <LmHandlerPackagesNotify+0xf8>
              ((LmHandlerPackages[i]->Port == ((McpsIndication_t *)params)->Port) ||
 800e8e2:	187b      	adds	r3, r7, r1
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	569a      	ldrsb	r2, [r3, r2]
 800e8e8:	4b28      	ldr	r3, [pc, #160]	; (800e98c <LmHandlerPackagesNotify+0x128>)
 800e8ea:	0092      	lsls	r2, r2, #2
 800e8ec:	58d3      	ldr	r3, [r2, r3]
 800e8ee:	781a      	ldrb	r2, [r3, #0]
 800e8f0:	683b      	ldr	r3, [r7, #0]
 800e8f2:	78db      	ldrb	r3, [r3, #3]
          if ((LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL) &&
 800e8f4:	429a      	cmp	r2, r3
 800e8f6:	d00a      	beq.n	800e90e <LmHandlerPackagesNotify+0xaa>
              ((LmHandlerPackages[i]->Port == ((McpsIndication_t *)params)->Port) ||
 800e8f8:	187b      	adds	r3, r7, r1
 800e8fa:	781b      	ldrb	r3, [r3, #0]
 800e8fc:	b25b      	sxtb	r3, r3
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d12c      	bne.n	800e95c <LmHandlerPackagesNotify+0xf8>
               ((i == PACKAGE_ID_COMPLIANCE) && (LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning()))))
 800e902:	4b22      	ldr	r3, [pc, #136]	; (800e98c <LmHandlerPackagesNotify+0x128>)
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	68db      	ldr	r3, [r3, #12]
 800e908:	4798      	blx	r3
 800e90a:	1e03      	subs	r3, r0, #0
 800e90c:	d026      	beq.n	800e95c <LmHandlerPackagesNotify+0xf8>
            LmHandlerPackages[i]->OnMcpsIndicationProcess(params);
 800e90e:	230f      	movs	r3, #15
 800e910:	18fb      	adds	r3, r7, r3
 800e912:	2200      	movs	r2, #0
 800e914:	569a      	ldrsb	r2, [r3, r2]
 800e916:	4b1d      	ldr	r3, [pc, #116]	; (800e98c <LmHandlerPackagesNotify+0x128>)
 800e918:	0092      	lsls	r2, r2, #2
 800e91a:	58d3      	ldr	r3, [r2, r3]
 800e91c:	699b      	ldr	r3, [r3, #24]
 800e91e:	683a      	ldr	r2, [r7, #0]
 800e920:	0010      	movs	r0, r2
 800e922:	4798      	blx	r3
          break;
 800e924:	e01a      	b.n	800e95c <LmHandlerPackagesNotify+0xf8>
          if (LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL)
 800e926:	210f      	movs	r1, #15
 800e928:	187b      	adds	r3, r7, r1
 800e92a:	2200      	movs	r2, #0
 800e92c:	569a      	ldrsb	r2, [r3, r2]
 800e92e:	4b17      	ldr	r3, [pc, #92]	; (800e98c <LmHandlerPackagesNotify+0x128>)
 800e930:	0092      	lsls	r2, r2, #2
 800e932:	58d3      	ldr	r3, [r2, r3]
 800e934:	69db      	ldr	r3, [r3, #28]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d012      	beq.n	800e960 <LmHandlerPackagesNotify+0xfc>
            LmHandlerPackages[i]->OnMlmeConfirmProcess(params);
 800e93a:	187b      	adds	r3, r7, r1
 800e93c:	2200      	movs	r2, #0
 800e93e:	569a      	ldrsb	r2, [r3, r2]
 800e940:	4b12      	ldr	r3, [pc, #72]	; (800e98c <LmHandlerPackagesNotify+0x128>)
 800e942:	0092      	lsls	r2, r2, #2
 800e944:	58d3      	ldr	r3, [r2, r3]
 800e946:	69db      	ldr	r3, [r3, #28]
 800e948:	683a      	ldr	r2, [r7, #0]
 800e94a:	0010      	movs	r0, r2
 800e94c:	4798      	blx	r3
          break;
 800e94e:	e007      	b.n	800e960 <LmHandlerPackagesNotify+0xfc>
      }
    }
 800e950:	46c0      	nop			; (mov r8, r8)
 800e952:	e006      	b.n	800e962 <LmHandlerPackagesNotify+0xfe>
          break;
 800e954:	46c0      	nop			; (mov r8, r8)
 800e956:	e004      	b.n	800e962 <LmHandlerPackagesNotify+0xfe>
          break;
 800e958:	46c0      	nop			; (mov r8, r8)
 800e95a:	e002      	b.n	800e962 <LmHandlerPackagesNotify+0xfe>
          break;
 800e95c:	46c0      	nop			; (mov r8, r8)
 800e95e:	e000      	b.n	800e962 <LmHandlerPackagesNotify+0xfe>
          break;
 800e960:	46c0      	nop			; (mov r8, r8)
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 800e962:	210f      	movs	r1, #15
 800e964:	187b      	adds	r3, r7, r1
 800e966:	781b      	ldrb	r3, [r3, #0]
 800e968:	b25b      	sxtb	r3, r3
 800e96a:	b2db      	uxtb	r3, r3
 800e96c:	3301      	adds	r3, #1
 800e96e:	b2da      	uxtb	r2, r3
 800e970:	187b      	adds	r3, r7, r1
 800e972:	701a      	strb	r2, [r3, #0]
 800e974:	230f      	movs	r3, #15
 800e976:	18fb      	adds	r3, r7, r3
 800e978:	781b      	ldrb	r3, [r3, #0]
 800e97a:	b25b      	sxtb	r3, r3
 800e97c:	2b04      	cmp	r3, #4
 800e97e:	dc00      	bgt.n	800e982 <LmHandlerPackagesNotify+0x11e>
 800e980:	e77c      	b.n	800e87c <LmHandlerPackagesNotify+0x18>
  }
}
 800e982:	46c0      	nop			; (mov r8, r8)
 800e984:	46c0      	nop			; (mov r8, r8)
 800e986:	46bd      	mov	sp, r7
 800e988:	b004      	add	sp, #16
 800e98a:	bd80      	pop	{r7, pc}
 800e98c:	2000041c 	.word	0x2000041c

0800e990 <DisplayClassUpdate>:

static void DisplayClassUpdate(DeviceClass_t deviceClass)
{
 800e990:	b580      	push	{r7, lr}
 800e992:	b084      	sub	sp, #16
 800e994:	af02      	add	r7, sp, #8
 800e996:	0002      	movs	r2, r0
 800e998:	1dfb      	adds	r3, r7, #7
 800e99a:	701a      	strb	r2, [r3, #0]
  MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800e99c:	1dfb      	adds	r3, r7, #7
 800e99e:	781b      	ldrb	r3, [r3, #0]
 800e9a0:	4a06      	ldr	r2, [pc, #24]	; (800e9bc <DisplayClassUpdate+0x2c>)
 800e9a2:	5cd3      	ldrb	r3, [r2, r3]
 800e9a4:	001a      	movs	r2, r3
 800e9a6:	4b06      	ldr	r3, [pc, #24]	; (800e9c0 <DisplayClassUpdate+0x30>)
 800e9a8:	9200      	str	r2, [sp, #0]
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	2100      	movs	r1, #0
 800e9ae:	2002      	movs	r0, #2
 800e9b0:	f00d fa3c 	bl	801be2c <UTIL_ADV_TRACE_COND_FSend>
}
 800e9b4:	46c0      	nop			; (mov r8, r8)
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	b002      	add	sp, #8
 800e9ba:	bd80      	pop	{r7, pc}
 800e9bc:	0801f650 	.word	0x0801f650
 800e9c0:	0801f634 	.word	0x0801f634

0800e9c4 <LmphCompliancePackageFactory>:
  .OnDeviceTimeRequest =        NULL,                           /* To be initialized by LmHandler */
};

/* Exported functions ---------------------------------------------------------*/
LmhPackage_t *LmphCompliancePackageFactory(void)
{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	af00      	add	r7, sp, #0
  return &LmhpCompliancePackage;
 800e9c8:	4b01      	ldr	r3, [pc, #4]	; (800e9d0 <LmphCompliancePackageFactory+0xc>)
}
 800e9ca:	0018      	movs	r0, r3
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	bd80      	pop	{r7, pc}
 800e9d0:	20000178 	.word	0x20000178

0800e9d4 <LmhpComplianceInit>:

/* Private  functions ---------------------------------------------------------*/
static void LmhpComplianceInit(void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize)
{
 800e9d4:	b580      	push	{r7, lr}
 800e9d6:	b084      	sub	sp, #16
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	60f8      	str	r0, [r7, #12]
 800e9dc:	60b9      	str	r1, [r7, #8]
 800e9de:	1dfb      	adds	r3, r7, #7
 800e9e0:	701a      	strb	r2, [r3, #0]
  if ((params != NULL) && (dataBuffer != NULL))
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d010      	beq.n	800ea0a <LmhpComplianceInit+0x36>
 800e9e8:	68bb      	ldr	r3, [r7, #8]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d00d      	beq.n	800ea0a <LmhpComplianceInit+0x36>
  {
    LmhpComplianceParams = (LmhpComplianceParams_t *)params;
 800e9ee:	4b0c      	ldr	r3, [pc, #48]	; (800ea20 <LmhpComplianceInit+0x4c>)
 800e9f0:	68fa      	ldr	r2, [r7, #12]
 800e9f2:	601a      	str	r2, [r3, #0]
    ComplianceTestState.DataBuffer = dataBuffer;
 800e9f4:	4b0b      	ldr	r3, [pc, #44]	; (800ea24 <LmhpComplianceInit+0x50>)
 800e9f6:	68ba      	ldr	r2, [r7, #8]
 800e9f8:	609a      	str	r2, [r3, #8]
    ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800e9fa:	4b0a      	ldr	r3, [pc, #40]	; (800ea24 <LmhpComplianceInit+0x50>)
 800e9fc:	1dfa      	adds	r2, r7, #7
 800e9fe:	7812      	ldrb	r2, [r2, #0]
 800ea00:	719a      	strb	r2, [r3, #6]
    ComplianceTestState.Initialized = true;
 800ea02:	4b08      	ldr	r3, [pc, #32]	; (800ea24 <LmhpComplianceInit+0x50>)
 800ea04:	2201      	movs	r2, #1
 800ea06:	701a      	strb	r2, [r3, #0]
 800ea08:	e006      	b.n	800ea18 <LmhpComplianceInit+0x44>
  }
  else
  {
    LmhpComplianceParams = NULL;
 800ea0a:	4b05      	ldr	r3, [pc, #20]	; (800ea20 <LmhpComplianceInit+0x4c>)
 800ea0c:	2200      	movs	r2, #0
 800ea0e:	601a      	str	r2, [r3, #0]
    ComplianceTestState.Initialized = false;
 800ea10:	4b04      	ldr	r3, [pc, #16]	; (800ea24 <LmhpComplianceInit+0x50>)
 800ea12:	2200      	movs	r2, #0
 800ea14:	701a      	strb	r2, [r3, #0]
  }
}
 800ea16:	46c0      	nop			; (mov r8, r8)
 800ea18:	46c0      	nop			; (mov r8, r8)
 800ea1a:	46bd      	mov	sp, r7
 800ea1c:	b004      	add	sp, #16
 800ea1e:	bd80      	pop	{r7, pc}
 800ea20:	200005b0 	.word	0x200005b0
 800ea24:	2000059c 	.word	0x2000059c

0800ea28 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized(void)
{
 800ea28:	b580      	push	{r7, lr}
 800ea2a:	af00      	add	r7, sp, #0
  return ComplianceTestState.Initialized;
 800ea2c:	4b02      	ldr	r3, [pc, #8]	; (800ea38 <LmhpComplianceIsInitialized+0x10>)
 800ea2e:	781b      	ldrb	r3, [r3, #0]
}
 800ea30:	0018      	movs	r0, r3
 800ea32:	46bd      	mov	sp, r7
 800ea34:	bd80      	pop	{r7, pc}
 800ea36:	46c0      	nop			; (mov r8, r8)
 800ea38:	2000059c 	.word	0x2000059c

0800ea3c <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning(void)
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	af00      	add	r7, sp, #0
  if (ComplianceTestState.Initialized == false)
 800ea40:	4b06      	ldr	r3, [pc, #24]	; (800ea5c <LmhpComplianceIsRunning+0x20>)
 800ea42:	781b      	ldrb	r3, [r3, #0]
 800ea44:	2201      	movs	r2, #1
 800ea46:	4053      	eors	r3, r2
 800ea48:	b2db      	uxtb	r3, r3
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d001      	beq.n	800ea52 <LmhpComplianceIsRunning+0x16>
  {
    return false;
 800ea4e:	2300      	movs	r3, #0
 800ea50:	e001      	b.n	800ea56 <LmhpComplianceIsRunning+0x1a>
  }

  return ComplianceTestState.IsRunning;
 800ea52:	4b02      	ldr	r3, [pc, #8]	; (800ea5c <LmhpComplianceIsRunning+0x20>)
 800ea54:	785b      	ldrb	r3, [r3, #1]
}
 800ea56:	0018      	movs	r0, r3
 800ea58:	46bd      	mov	sp, r7
 800ea5a:	bd80      	pop	{r7, pc}
 800ea5c:	2000059c 	.word	0x2000059c

0800ea60 <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm(McpsConfirm_t *mcpsConfirm)
{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b082      	sub	sp, #8
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	6078      	str	r0, [r7, #4]
  if (ComplianceTestState.Initialized == false)
 800ea68:	4b0e      	ldr	r3, [pc, #56]	; (800eaa4 <LmhpComplianceOnMcpsConfirm+0x44>)
 800ea6a:	781b      	ldrb	r3, [r3, #0]
 800ea6c:	2201      	movs	r2, #1
 800ea6e:	4053      	eors	r3, r2
 800ea70:	b2db      	uxtb	r3, r3
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d112      	bne.n	800ea9c <LmhpComplianceOnMcpsConfirm+0x3c>
  {
    return;
  }

  if ((ComplianceTestState.IsRunning == true) &&
 800ea76:	4b0b      	ldr	r3, [pc, #44]	; (800eaa4 <LmhpComplianceOnMcpsConfirm+0x44>)
 800ea78:	785b      	ldrb	r3, [r3, #1]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d00f      	beq.n	800ea9e <LmhpComplianceOnMcpsConfirm+0x3e>
      (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	781b      	ldrb	r3, [r3, #0]
  if ((ComplianceTestState.IsRunning == true) &&
 800ea82:	2b01      	cmp	r3, #1
 800ea84:	d10b      	bne.n	800ea9e <LmhpComplianceOnMcpsConfirm+0x3e>
      (mcpsConfirm->AckReceived != 0))
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	791b      	ldrb	r3, [r3, #4]
      (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d007      	beq.n	800ea9e <LmhpComplianceOnMcpsConfirm+0x3e>
  {
    /* Increment the compliance certification protocol downlink counter */
    ComplianceTestState.DownLinkCounter++;
 800ea8e:	4b05      	ldr	r3, [pc, #20]	; (800eaa4 <LmhpComplianceOnMcpsConfirm+0x44>)
 800ea90:	899b      	ldrh	r3, [r3, #12]
 800ea92:	3301      	adds	r3, #1
 800ea94:	b29a      	uxth	r2, r3
 800ea96:	4b03      	ldr	r3, [pc, #12]	; (800eaa4 <LmhpComplianceOnMcpsConfirm+0x44>)
 800ea98:	819a      	strh	r2, [r3, #12]
 800ea9a:	e000      	b.n	800ea9e <LmhpComplianceOnMcpsConfirm+0x3e>
    return;
 800ea9c:	46c0      	nop			; (mov r8, r8)
  }
}
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	b002      	add	sp, #8
 800eaa2:	bd80      	pop	{r7, pc}
 800eaa4:	2000059c 	.word	0x2000059c

0800eaa8 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm(MlmeConfirm_t *mlmeConfirm)
{
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	b082      	sub	sp, #8
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	6078      	str	r0, [r7, #4]
  if (ComplianceTestState.Initialized == false)
 800eab0:	4b0d      	ldr	r3, [pc, #52]	; (800eae8 <LmhpComplianceOnMlmeConfirm+0x40>)
 800eab2:	781b      	ldrb	r3, [r3, #0]
 800eab4:	2201      	movs	r2, #1
 800eab6:	4053      	eors	r3, r2
 800eab8:	b2db      	uxtb	r3, r3
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d10f      	bne.n	800eade <LmhpComplianceOnMlmeConfirm+0x36>
  {
    return;
  }

  if (mlmeConfirm->MlmeRequest == MLME_LINK_CHECK)
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	781b      	ldrb	r3, [r3, #0]
 800eac2:	2b04      	cmp	r3, #4
 800eac4:	d10c      	bne.n	800eae0 <LmhpComplianceOnMlmeConfirm+0x38>
  {
    ComplianceTestState.LinkCheck = true;
 800eac6:	4b08      	ldr	r3, [pc, #32]	; (800eae8 <LmhpComplianceOnMlmeConfirm+0x40>)
 800eac8:	2201      	movs	r2, #1
 800eaca:	739a      	strb	r2, [r3, #14]
    ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	7a1a      	ldrb	r2, [r3, #8]
 800ead0:	4b05      	ldr	r3, [pc, #20]	; (800eae8 <LmhpComplianceOnMlmeConfirm+0x40>)
 800ead2:	73da      	strb	r2, [r3, #15]
    ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	7a5a      	ldrb	r2, [r3, #9]
 800ead8:	4b03      	ldr	r3, [pc, #12]	; (800eae8 <LmhpComplianceOnMlmeConfirm+0x40>)
 800eada:	741a      	strb	r2, [r3, #16]
 800eadc:	e000      	b.n	800eae0 <LmhpComplianceOnMlmeConfirm+0x38>
    return;
 800eade:	46c0      	nop			; (mov r8, r8)
  }
}
 800eae0:	46bd      	mov	sp, r7
 800eae2:	b002      	add	sp, #8
 800eae4:	bd80      	pop	{r7, pc}
 800eae6:	46c0      	nop			; (mov r8, r8)
 800eae8:	2000059c 	.word	0x2000059c

0800eaec <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess(void)
{
 800eaec:	b5b0      	push	{r4, r5, r7, lr}
 800eaee:	b084      	sub	sp, #16
 800eaf0:	af00      	add	r7, sp, #0
  if (ComplianceTestState.Initialized == false)
 800eaf2:	4b32      	ldr	r3, [pc, #200]	; (800ebbc <LmhpComplianceTxProcess+0xd0>)
 800eaf4:	781b      	ldrb	r3, [r3, #0]
 800eaf6:	2201      	movs	r2, #1
 800eaf8:	4053      	eors	r3, r2
 800eafa:	b2db      	uxtb	r3, r3
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d002      	beq.n	800eb06 <LmhpComplianceTxProcess+0x1a>
  {
    return LORAMAC_HANDLER_ERROR;
 800eb00:	2301      	movs	r3, #1
 800eb02:	425b      	negs	r3, r3
 800eb04:	e056      	b.n	800ebb4 <LmhpComplianceTxProcess+0xc8>
  }

  if (ComplianceTestState.LinkCheck == true)
 800eb06:	4b2d      	ldr	r3, [pc, #180]	; (800ebbc <LmhpComplianceTxProcess+0xd0>)
 800eb08:	7b9b      	ldrb	r3, [r3, #14]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d019      	beq.n	800eb42 <LmhpComplianceTxProcess+0x56>
  {
    ComplianceTestState.LinkCheck = false;
 800eb0e:	4b2b      	ldr	r3, [pc, #172]	; (800ebbc <LmhpComplianceTxProcess+0xd0>)
 800eb10:	2200      	movs	r2, #0
 800eb12:	739a      	strb	r2, [r3, #14]
    ComplianceTestState.DataBufferSize = 3;
 800eb14:	4b29      	ldr	r3, [pc, #164]	; (800ebbc <LmhpComplianceTxProcess+0xd0>)
 800eb16:	2203      	movs	r2, #3
 800eb18:	71da      	strb	r2, [r3, #7]
    ComplianceTestState.DataBuffer[0] = 5;
 800eb1a:	4b28      	ldr	r3, [pc, #160]	; (800ebbc <LmhpComplianceTxProcess+0xd0>)
 800eb1c:	689b      	ldr	r3, [r3, #8]
 800eb1e:	2205      	movs	r2, #5
 800eb20:	701a      	strb	r2, [r3, #0]
    ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 800eb22:	4b26      	ldr	r3, [pc, #152]	; (800ebbc <LmhpComplianceTxProcess+0xd0>)
 800eb24:	689b      	ldr	r3, [r3, #8]
 800eb26:	3301      	adds	r3, #1
 800eb28:	4a24      	ldr	r2, [pc, #144]	; (800ebbc <LmhpComplianceTxProcess+0xd0>)
 800eb2a:	7bd2      	ldrb	r2, [r2, #15]
 800eb2c:	701a      	strb	r2, [r3, #0]
    ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 800eb2e:	4b23      	ldr	r3, [pc, #140]	; (800ebbc <LmhpComplianceTxProcess+0xd0>)
 800eb30:	689b      	ldr	r3, [r3, #8]
 800eb32:	3302      	adds	r3, #2
 800eb34:	4a21      	ldr	r2, [pc, #132]	; (800ebbc <LmhpComplianceTxProcess+0xd0>)
 800eb36:	7c12      	ldrb	r2, [r2, #16]
 800eb38:	701a      	strb	r2, [r3, #0]
    ComplianceTestState.State = 1;
 800eb3a:	4b20      	ldr	r3, [pc, #128]	; (800ebbc <LmhpComplianceTxProcess+0xd0>)
 800eb3c:	2201      	movs	r2, #1
 800eb3e:	709a      	strb	r2, [r3, #2]
 800eb40:	e01c      	b.n	800eb7c <LmhpComplianceTxProcess+0x90>
  }
  else
  {
    switch (ComplianceTestState.State)
 800eb42:	4b1e      	ldr	r3, [pc, #120]	; (800ebbc <LmhpComplianceTxProcess+0xd0>)
 800eb44:	789b      	ldrb	r3, [r3, #2]
 800eb46:	2b01      	cmp	r3, #1
 800eb48:	d005      	beq.n	800eb56 <LmhpComplianceTxProcess+0x6a>
 800eb4a:	2b04      	cmp	r3, #4
 800eb4c:	d116      	bne.n	800eb7c <LmhpComplianceTxProcess+0x90>
    {
      case 4:
        ComplianceTestState.State = 1;
 800eb4e:	4b1b      	ldr	r3, [pc, #108]	; (800ebbc <LmhpComplianceTxProcess+0xd0>)
 800eb50:	2201      	movs	r2, #1
 800eb52:	709a      	strb	r2, [r3, #2]
        break;
 800eb54:	e012      	b.n	800eb7c <LmhpComplianceTxProcess+0x90>
      case 1:
        ComplianceTestState.DataBufferSize = 2;
 800eb56:	4b19      	ldr	r3, [pc, #100]	; (800ebbc <LmhpComplianceTxProcess+0xd0>)
 800eb58:	2202      	movs	r2, #2
 800eb5a:	71da      	strb	r2, [r3, #7]
        ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 800eb5c:	4b17      	ldr	r3, [pc, #92]	; (800ebbc <LmhpComplianceTxProcess+0xd0>)
 800eb5e:	899b      	ldrh	r3, [r3, #12]
 800eb60:	0a1b      	lsrs	r3, r3, #8
 800eb62:	b29a      	uxth	r2, r3
 800eb64:	4b15      	ldr	r3, [pc, #84]	; (800ebbc <LmhpComplianceTxProcess+0xd0>)
 800eb66:	689b      	ldr	r3, [r3, #8]
 800eb68:	b2d2      	uxtb	r2, r2
 800eb6a:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 800eb6c:	4b13      	ldr	r3, [pc, #76]	; (800ebbc <LmhpComplianceTxProcess+0xd0>)
 800eb6e:	899a      	ldrh	r2, [r3, #12]
 800eb70:	4b12      	ldr	r3, [pc, #72]	; (800ebbc <LmhpComplianceTxProcess+0xd0>)
 800eb72:	689b      	ldr	r3, [r3, #8]
 800eb74:	3301      	adds	r3, #1
 800eb76:	b2d2      	uxtb	r2, r2
 800eb78:	701a      	strb	r2, [r3, #0]
        break;
 800eb7a:	46c0      	nop			; (mov r8, r8)
    }
  }
  LmHandlerAppData_t appData =
 800eb7c:	2508      	movs	r5, #8
 800eb7e:	197b      	adds	r3, r7, r5
 800eb80:	22e0      	movs	r2, #224	; 0xe0
 800eb82:	701a      	strb	r2, [r3, #0]
  {
    .Buffer = ComplianceTestState.DataBuffer,
    .BufferSize = ComplianceTestState.DataBufferSize,
 800eb84:	4b0d      	ldr	r3, [pc, #52]	; (800ebbc <LmhpComplianceTxProcess+0xd0>)
 800eb86:	79da      	ldrb	r2, [r3, #7]
  LmHandlerAppData_t appData =
 800eb88:	197b      	adds	r3, r7, r5
 800eb8a:	705a      	strb	r2, [r3, #1]
    .Buffer = ComplianceTestState.DataBuffer,
 800eb8c:	4b0b      	ldr	r3, [pc, #44]	; (800ebbc <LmhpComplianceTxProcess+0xd0>)
 800eb8e:	689a      	ldr	r2, [r3, #8]
  LmHandlerAppData_t appData =
 800eb90:	197b      	adds	r3, r7, r5
 800eb92:	605a      	str	r2, [r3, #4]
    .Port = COMPLIANCE_PORT
  };
  TimerTime_t nextTxIn = 0;
 800eb94:	2300      	movs	r3, #0
 800eb96:	607b      	str	r3, [r7, #4]

  /* Schedule next transmission */
  TimerStart(&ComplianceTxNextPacketTimer);
 800eb98:	4b09      	ldr	r3, [pc, #36]	; (800ebc0 <LmhpComplianceTxProcess+0xd4>)
 800eb9a:	0018      	movs	r0, r3
 800eb9c:	f00e f812 	bl	801cbc4 <UTIL_TIMER_Start>

  return LmhpCompliancePackage.OnSendRequest(&appData, (LmHandlerMsgTypes_t)ComplianceTestState.IsTxConfirmed, &nextTxIn,
 800eba0:	4b08      	ldr	r3, [pc, #32]	; (800ebc4 <LmhpComplianceTxProcess+0xd8>)
 800eba2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800eba4:	4b05      	ldr	r3, [pc, #20]	; (800ebbc <LmhpComplianceTxProcess+0xd0>)
 800eba6:	791b      	ldrb	r3, [r3, #4]
 800eba8:	0019      	movs	r1, r3
 800ebaa:	1d3a      	adds	r2, r7, #4
 800ebac:	1978      	adds	r0, r7, r5
 800ebae:	2301      	movs	r3, #1
 800ebb0:	47a0      	blx	r4
 800ebb2:	0003      	movs	r3, r0
                                             true);
}
 800ebb4:	0018      	movs	r0, r3
 800ebb6:	46bd      	mov	sp, r7
 800ebb8:	b004      	add	sp, #16
 800ebba:	bdb0      	pop	{r4, r5, r7, pc}
 800ebbc:	2000059c 	.word	0x2000059c
 800ebc0:	20000584 	.word	0x20000584
 800ebc4:	20000178 	.word	0x20000178

0800ebc8 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication(McpsIndication_t *mcpsIndication)
{
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	b0a2      	sub	sp, #136	; 0x88
 800ebcc:	af02      	add	r7, sp, #8
 800ebce:	6078      	str	r0, [r7, #4]
  if (ComplianceTestState.Initialized == false)
 800ebd0:	4be1      	ldr	r3, [pc, #900]	; (800ef58 <LmhpComplianceOnMcpsIndication+0x390>)
 800ebd2:	781b      	ldrb	r3, [r3, #0]
 800ebd4:	2201      	movs	r2, #1
 800ebd6:	4053      	eors	r3, r2
 800ebd8:	b2db      	uxtb	r3, r3
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d000      	beq.n	800ebe0 <LmhpComplianceOnMcpsIndication+0x18>
 800ebde:	e1b2      	b.n	800ef46 <LmhpComplianceOnMcpsIndication+0x37e>
  {
    return;
  }

  if (mcpsIndication->RxData == false)
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	7b5b      	ldrb	r3, [r3, #13]
 800ebe4:	2201      	movs	r2, #1
 800ebe6:	4053      	eors	r3, r2
 800ebe8:	b2db      	uxtb	r3, r3
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d000      	beq.n	800ebf0 <LmhpComplianceOnMcpsIndication+0x28>
 800ebee:	e1ac      	b.n	800ef4a <LmhpComplianceOnMcpsIndication+0x382>
  {
    return;
  }

  if ((ComplianceTestState.IsRunning == true) &&
 800ebf0:	4bd9      	ldr	r3, [pc, #868]	; (800ef58 <LmhpComplianceOnMcpsIndication+0x390>)
 800ebf2:	785b      	ldrb	r3, [r3, #1]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d00c      	beq.n	800ec12 <LmhpComplianceOnMcpsIndication+0x4a>
      (mcpsIndication->AckReceived == 0))
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	7c9b      	ldrb	r3, [r3, #18]
 800ebfc:	2201      	movs	r2, #1
 800ebfe:	4053      	eors	r3, r2
 800ec00:	b2db      	uxtb	r3, r3
  if ((ComplianceTestState.IsRunning == true) &&
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d005      	beq.n	800ec12 <LmhpComplianceOnMcpsIndication+0x4a>
  {
    /* Increment the compliance certification protocol downlink counter */
    ComplianceTestState.DownLinkCounter++;
 800ec06:	4bd4      	ldr	r3, [pc, #848]	; (800ef58 <LmhpComplianceOnMcpsIndication+0x390>)
 800ec08:	899b      	ldrh	r3, [r3, #12]
 800ec0a:	3301      	adds	r3, #1
 800ec0c:	b29a      	uxth	r2, r3
 800ec0e:	4bd2      	ldr	r3, [pc, #840]	; (800ef58 <LmhpComplianceOnMcpsIndication+0x390>)
 800ec10:	819a      	strh	r2, [r3, #12]
  }

  if (mcpsIndication->Port != COMPLIANCE_PORT)
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	78db      	ldrb	r3, [r3, #3]
 800ec16:	2be0      	cmp	r3, #224	; 0xe0
 800ec18:	d000      	beq.n	800ec1c <LmhpComplianceOnMcpsIndication+0x54>
 800ec1a:	e198      	b.n	800ef4e <LmhpComplianceOnMcpsIndication+0x386>
  {
    return;
  }

  if (ComplianceTestState.IsRunning == false)
 800ec1c:	4bce      	ldr	r3, [pc, #824]	; (800ef58 <LmhpComplianceOnMcpsIndication+0x390>)
 800ec1e:	785b      	ldrb	r3, [r3, #1]
 800ec20:	2201      	movs	r2, #1
 800ec22:	4053      	eors	r3, r2
 800ec24:	b2db      	uxtb	r3, r3
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d063      	beq.n	800ecf2 <LmhpComplianceOnMcpsIndication+0x12a>
  {
    /* Check compliance test enable command (i) */
    if ((mcpsIndication->BufferSize == 4) &&
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	7b1b      	ldrb	r3, [r3, #12]
 800ec2e:	2b04      	cmp	r3, #4
 800ec30:	d000      	beq.n	800ec34 <LmhpComplianceOnMcpsIndication+0x6c>
 800ec32:	e1a0      	b.n	800ef76 <LmhpComplianceOnMcpsIndication+0x3ae>
        (mcpsIndication->Buffer[0] == 0x01) &&
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	689b      	ldr	r3, [r3, #8]
 800ec38:	781b      	ldrb	r3, [r3, #0]
    if ((mcpsIndication->BufferSize == 4) &&
 800ec3a:	2b01      	cmp	r3, #1
 800ec3c:	d000      	beq.n	800ec40 <LmhpComplianceOnMcpsIndication+0x78>
 800ec3e:	e19a      	b.n	800ef76 <LmhpComplianceOnMcpsIndication+0x3ae>
        (mcpsIndication->Buffer[1] == 0x01) &&
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	689b      	ldr	r3, [r3, #8]
 800ec44:	3301      	adds	r3, #1
 800ec46:	781b      	ldrb	r3, [r3, #0]
        (mcpsIndication->Buffer[0] == 0x01) &&
 800ec48:	2b01      	cmp	r3, #1
 800ec4a:	d000      	beq.n	800ec4e <LmhpComplianceOnMcpsIndication+0x86>
 800ec4c:	e193      	b.n	800ef76 <LmhpComplianceOnMcpsIndication+0x3ae>
        (mcpsIndication->Buffer[2] == 0x01) &&
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	689b      	ldr	r3, [r3, #8]
 800ec52:	3302      	adds	r3, #2
 800ec54:	781b      	ldrb	r3, [r3, #0]
        (mcpsIndication->Buffer[1] == 0x01) &&
 800ec56:	2b01      	cmp	r3, #1
 800ec58:	d000      	beq.n	800ec5c <LmhpComplianceOnMcpsIndication+0x94>
 800ec5a:	e18c      	b.n	800ef76 <LmhpComplianceOnMcpsIndication+0x3ae>
        (mcpsIndication->Buffer[3] == 0x01))
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	689b      	ldr	r3, [r3, #8]
 800ec60:	3303      	adds	r3, #3
 800ec62:	781b      	ldrb	r3, [r3, #0]
        (mcpsIndication->Buffer[2] == 0x01) &&
 800ec64:	2b01      	cmp	r3, #1
 800ec66:	d000      	beq.n	800ec6a <LmhpComplianceOnMcpsIndication+0xa2>
 800ec68:	e185      	b.n	800ef76 <LmhpComplianceOnMcpsIndication+0x3ae>
    {
      MibRequestConfirm_t mibReq;

      /* Initialize compliance test mode context */
      ComplianceTestState.IsTxConfirmed = false;
 800ec6a:	4bbb      	ldr	r3, [pc, #748]	; (800ef58 <LmhpComplianceOnMcpsIndication+0x390>)
 800ec6c:	2200      	movs	r2, #0
 800ec6e:	711a      	strb	r2, [r3, #4]
      ComplianceTestState.Port = 224;
 800ec70:	4bb9      	ldr	r3, [pc, #740]	; (800ef58 <LmhpComplianceOnMcpsIndication+0x390>)
 800ec72:	22e0      	movs	r2, #224	; 0xe0
 800ec74:	715a      	strb	r2, [r3, #5]
      ComplianceTestState.DataBufferSize = 2;
 800ec76:	4bb8      	ldr	r3, [pc, #736]	; (800ef58 <LmhpComplianceOnMcpsIndication+0x390>)
 800ec78:	2202      	movs	r2, #2
 800ec7a:	71da      	strb	r2, [r3, #7]
      ComplianceTestState.DownLinkCounter = 0;
 800ec7c:	4bb6      	ldr	r3, [pc, #728]	; (800ef58 <LmhpComplianceOnMcpsIndication+0x390>)
 800ec7e:	2200      	movs	r2, #0
 800ec80:	819a      	strh	r2, [r3, #12]
      ComplianceTestState.LinkCheck = false;
 800ec82:	4bb5      	ldr	r3, [pc, #724]	; (800ef58 <LmhpComplianceOnMcpsIndication+0x390>)
 800ec84:	2200      	movs	r2, #0
 800ec86:	739a      	strb	r2, [r3, #14]
      ComplianceTestState.DemodMargin = 0;
 800ec88:	4bb3      	ldr	r3, [pc, #716]	; (800ef58 <LmhpComplianceOnMcpsIndication+0x390>)
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	73da      	strb	r2, [r3, #15]
      ComplianceTestState.NbGateways = 0;
 800ec8e:	4bb2      	ldr	r3, [pc, #712]	; (800ef58 <LmhpComplianceOnMcpsIndication+0x390>)
 800ec90:	2200      	movs	r2, #0
 800ec92:	741a      	strb	r2, [r3, #16]
      ComplianceTestState.IsRunning = true;
 800ec94:	4bb0      	ldr	r3, [pc, #704]	; (800ef58 <LmhpComplianceOnMcpsIndication+0x390>)
 800ec96:	2201      	movs	r2, #1
 800ec98:	705a      	strb	r2, [r3, #1]
      ComplianceTestState.State = 1;
 800ec9a:	4baf      	ldr	r3, [pc, #700]	; (800ef58 <LmhpComplianceOnMcpsIndication+0x390>)
 800ec9c:	2201      	movs	r2, #1
 800ec9e:	709a      	strb	r2, [r3, #2]

      /* Enable ADR while in compliance test mode */
      mibReq.Type = MIB_ADR;
 800eca0:	2108      	movs	r1, #8
 800eca2:	187b      	adds	r3, r7, r1
 800eca4:	2204      	movs	r2, #4
 800eca6:	701a      	strb	r2, [r3, #0]
      mibReq.Param.AdrEnable = true;
 800eca8:	187b      	adds	r3, r7, r1
 800ecaa:	2201      	movs	r2, #1
 800ecac:	711a      	strb	r2, [r3, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 800ecae:	187b      	adds	r3, r7, r1
 800ecb0:	0018      	movs	r0, r3
 800ecb2:	f004 fe77 	bl	80139a4 <LoRaMacMibSetRequestConfirm>

      /* Disable duty cycle enforcement while in compliance test mode */
      LoRaMacTestSetDutyCycleOn(false);
 800ecb6:	2000      	movs	r0, #0
 800ecb8:	f005 fca0 	bl	80145fc <LoRaMacTestSetDutyCycleOn>

      /* Stop peripherals */
      if (LmhpComplianceParams->StopPeripherals != NULL)
 800ecbc:	4ba7      	ldr	r3, [pc, #668]	; (800ef5c <LmhpComplianceOnMcpsIndication+0x394>)
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	685b      	ldr	r3, [r3, #4]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d003      	beq.n	800ecce <LmhpComplianceOnMcpsIndication+0x106>
      {
        LmhpComplianceParams->StopPeripherals();
 800ecc6:	4ba5      	ldr	r3, [pc, #660]	; (800ef5c <LmhpComplianceOnMcpsIndication+0x394>)
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	685b      	ldr	r3, [r3, #4]
 800eccc:	4798      	blx	r3
      }
      /* Initialize compliance protocol transmission timer */
      TimerInit(&ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent);
 800ecce:	4ba4      	ldr	r3, [pc, #656]	; (800ef60 <LmhpComplianceOnMcpsIndication+0x398>)
 800ecd0:	2201      	movs	r2, #1
 800ecd2:	4251      	negs	r1, r2
 800ecd4:	48a3      	ldr	r0, [pc, #652]	; (800ef64 <LmhpComplianceOnMcpsIndication+0x39c>)
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	9200      	str	r2, [sp, #0]
 800ecda:	2200      	movs	r2, #0
 800ecdc:	f00d ff3a 	bl	801cb54 <UTIL_TIMER_Create>
      TimerSetValue(&ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE);
 800ece0:	4aa1      	ldr	r2, [pc, #644]	; (800ef68 <LmhpComplianceOnMcpsIndication+0x3a0>)
 800ece2:	4ba0      	ldr	r3, [pc, #640]	; (800ef64 <LmhpComplianceOnMcpsIndication+0x39c>)
 800ece4:	0011      	movs	r1, r2
 800ece6:	0018      	movs	r0, r3
 800ece8:	f00e f85c 	bl	801cda4 <UTIL_TIMER_SetPeriod>

      /* Confirm compliance test protocol activation */
      LmhpComplianceTxProcess();
 800ecec:	f7ff fefe 	bl	800eaec <LmhpComplianceTxProcess>
 800ecf0:	e141      	b.n	800ef76 <LmhpComplianceOnMcpsIndication+0x3ae>
    }
  }
  else
  {
    /* Parse compliance test protocol */
    ComplianceTestState.State = mcpsIndication->Buffer[0];
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	689b      	ldr	r3, [r3, #8]
 800ecf6:	781a      	ldrb	r2, [r3, #0]
 800ecf8:	4b97      	ldr	r3, [pc, #604]	; (800ef58 <LmhpComplianceOnMcpsIndication+0x390>)
 800ecfa:	709a      	strb	r2, [r3, #2]
    switch (ComplianceTestState.State)
 800ecfc:	4b96      	ldr	r3, [pc, #600]	; (800ef58 <LmhpComplianceOnMcpsIndication+0x390>)
 800ecfe:	789b      	ldrb	r3, [r3, #2]
 800ed00:	2b0a      	cmp	r3, #10
 800ed02:	d900      	bls.n	800ed06 <LmhpComplianceOnMcpsIndication+0x13e>
 800ed04:	e125      	b.n	800ef52 <LmhpComplianceOnMcpsIndication+0x38a>
 800ed06:	009a      	lsls	r2, r3, #2
 800ed08:	4b98      	ldr	r3, [pc, #608]	; (800ef6c <LmhpComplianceOnMcpsIndication+0x3a4>)
 800ed0a:	18d3      	adds	r3, r2, r3
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	469f      	mov	pc, r3
    {
      case 0: /* Check compliance test disable command (ii) */
      {
        MibRequestConfirm_t mibReq;

        TimerStop(&ComplianceTxNextPacketTimer);
 800ed10:	4b94      	ldr	r3, [pc, #592]	; (800ef64 <LmhpComplianceOnMcpsIndication+0x39c>)
 800ed12:	0018      	movs	r0, r3
 800ed14:	f00d ffce 	bl	801ccb4 <UTIL_TIMER_Stop>

        /* Disable compliance test mode and reset the downlink counter. */
        ComplianceTestState.DownLinkCounter = 0;
 800ed18:	4b8f      	ldr	r3, [pc, #572]	; (800ef58 <LmhpComplianceOnMcpsIndication+0x390>)
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	819a      	strh	r2, [r3, #12]
        ComplianceTestState.IsRunning = false;
 800ed1e:	4b8e      	ldr	r3, [pc, #568]	; (800ef58 <LmhpComplianceOnMcpsIndication+0x390>)
 800ed20:	2200      	movs	r2, #0
 800ed22:	705a      	strb	r2, [r3, #1]

        /* Restore previous ADR seeting */
        mibReq.Type = MIB_ADR;
 800ed24:	2108      	movs	r1, #8
 800ed26:	187b      	adds	r3, r7, r1
 800ed28:	2204      	movs	r2, #4
 800ed2a:	701a      	strb	r2, [r3, #0]
        mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800ed2c:	4b8b      	ldr	r3, [pc, #556]	; (800ef5c <LmhpComplianceOnMcpsIndication+0x394>)
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	781a      	ldrb	r2, [r3, #0]
 800ed32:	187b      	adds	r3, r7, r1
 800ed34:	711a      	strb	r2, [r3, #4]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800ed36:	187b      	adds	r3, r7, r1
 800ed38:	0018      	movs	r0, r3
 800ed3a:	f004 fe33 	bl	80139a4 <LoRaMacMibSetRequestConfirm>

        /* Enable duty cycle enforcement */
        LoRaMacTestSetDutyCycleOn(LmhpComplianceParams->DutyCycleEnabled);
 800ed3e:	4b87      	ldr	r3, [pc, #540]	; (800ef5c <LmhpComplianceOnMcpsIndication+0x394>)
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	785b      	ldrb	r3, [r3, #1]
 800ed44:	0018      	movs	r0, r3
 800ed46:	f005 fc59 	bl	80145fc <LoRaMacTestSetDutyCycleOn>

        /* Restart peripherals */
        if (LmhpComplianceParams->StartPeripherals != NULL)
 800ed4a:	4b84      	ldr	r3, [pc, #528]	; (800ef5c <LmhpComplianceOnMcpsIndication+0x394>)
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	689b      	ldr	r3, [r3, #8]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d100      	bne.n	800ed56 <LmhpComplianceOnMcpsIndication+0x18e>
 800ed54:	e10e      	b.n	800ef74 <LmhpComplianceOnMcpsIndication+0x3ac>
        {
          LmhpComplianceParams->StartPeripherals();
 800ed56:	4b81      	ldr	r3, [pc, #516]	; (800ef5c <LmhpComplianceOnMcpsIndication+0x394>)
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	689b      	ldr	r3, [r3, #8]
 800ed5c:	4798      	blx	r3
        }
      }
      break;
 800ed5e:	e109      	b.n	800ef74 <LmhpComplianceOnMcpsIndication+0x3ac>
      case 1: /* (iii, iv) */
        ComplianceTestState.DataBufferSize = 2;
 800ed60:	4b7d      	ldr	r3, [pc, #500]	; (800ef58 <LmhpComplianceOnMcpsIndication+0x390>)
 800ed62:	2202      	movs	r2, #2
 800ed64:	71da      	strb	r2, [r3, #7]
        break;
 800ed66:	e106      	b.n	800ef76 <LmhpComplianceOnMcpsIndication+0x3ae>
      case 2: /* Enable confirmed messages (v) */
        ComplianceTestState.IsTxConfirmed = true;
 800ed68:	4b7b      	ldr	r3, [pc, #492]	; (800ef58 <LmhpComplianceOnMcpsIndication+0x390>)
 800ed6a:	2201      	movs	r2, #1
 800ed6c:	711a      	strb	r2, [r3, #4]
        ComplianceTestState.State = 1;
 800ed6e:	4b7a      	ldr	r3, [pc, #488]	; (800ef58 <LmhpComplianceOnMcpsIndication+0x390>)
 800ed70:	2201      	movs	r2, #1
 800ed72:	709a      	strb	r2, [r3, #2]
        break;
 800ed74:	e0ff      	b.n	800ef76 <LmhpComplianceOnMcpsIndication+0x3ae>
      case 3:  /* Disable confirmed messages (vi) */
        ComplianceTestState.IsTxConfirmed = false;
 800ed76:	4b78      	ldr	r3, [pc, #480]	; (800ef58 <LmhpComplianceOnMcpsIndication+0x390>)
 800ed78:	2200      	movs	r2, #0
 800ed7a:	711a      	strb	r2, [r3, #4]
        ComplianceTestState.State = 1;
 800ed7c:	4b76      	ldr	r3, [pc, #472]	; (800ef58 <LmhpComplianceOnMcpsIndication+0x390>)
 800ed7e:	2201      	movs	r2, #1
 800ed80:	709a      	strb	r2, [r3, #2]
        break;
 800ed82:	e0f8      	b.n	800ef76 <LmhpComplianceOnMcpsIndication+0x3ae>
      case 4: /* (vii) */
        ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	7b1a      	ldrb	r2, [r3, #12]
 800ed88:	4b73      	ldr	r3, [pc, #460]	; (800ef58 <LmhpComplianceOnMcpsIndication+0x390>)
 800ed8a:	71da      	strb	r2, [r3, #7]

        ComplianceTestState.DataBuffer[0] = 4;
 800ed8c:	4b72      	ldr	r3, [pc, #456]	; (800ef58 <LmhpComplianceOnMcpsIndication+0x390>)
 800ed8e:	689b      	ldr	r3, [r3, #8]
 800ed90:	2204      	movs	r2, #4
 800ed92:	701a      	strb	r2, [r3, #0]
        for (uint8_t i = 1; i < MIN(ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize); i++)
 800ed94:	237f      	movs	r3, #127	; 0x7f
 800ed96:	18fb      	adds	r3, r7, r3
 800ed98:	2201      	movs	r2, #1
 800ed9a:	701a      	strb	r2, [r3, #0]
 800ed9c:	e013      	b.n	800edc6 <LmhpComplianceOnMcpsIndication+0x1fe>
        {
          ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	689a      	ldr	r2, [r3, #8]
 800eda2:	207f      	movs	r0, #127	; 0x7f
 800eda4:	183b      	adds	r3, r7, r0
 800eda6:	781b      	ldrb	r3, [r3, #0]
 800eda8:	18d3      	adds	r3, r2, r3
 800edaa:	781a      	ldrb	r2, [r3, #0]
 800edac:	4b6a      	ldr	r3, [pc, #424]	; (800ef58 <LmhpComplianceOnMcpsIndication+0x390>)
 800edae:	6899      	ldr	r1, [r3, #8]
 800edb0:	183b      	adds	r3, r7, r0
 800edb2:	781b      	ldrb	r3, [r3, #0]
 800edb4:	18cb      	adds	r3, r1, r3
 800edb6:	3201      	adds	r2, #1
 800edb8:	b2d2      	uxtb	r2, r2
 800edba:	701a      	strb	r2, [r3, #0]
        for (uint8_t i = 1; i < MIN(ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize); i++)
 800edbc:	183b      	adds	r3, r7, r0
 800edbe:	781a      	ldrb	r2, [r3, #0]
 800edc0:	183b      	adds	r3, r7, r0
 800edc2:	3201      	adds	r2, #1
 800edc4:	701a      	strb	r2, [r3, #0]
 800edc6:	4b64      	ldr	r3, [pc, #400]	; (800ef58 <LmhpComplianceOnMcpsIndication+0x390>)
 800edc8:	799a      	ldrb	r2, [r3, #6]
 800edca:	4b63      	ldr	r3, [pc, #396]	; (800ef58 <LmhpComplianceOnMcpsIndication+0x390>)
 800edcc:	79db      	ldrb	r3, [r3, #7]
 800edce:	1c18      	adds	r0, r3, #0
 800edd0:	1c11      	adds	r1, r2, #0
 800edd2:	b2ca      	uxtb	r2, r1
 800edd4:	b2c3      	uxtb	r3, r0
 800edd6:	429a      	cmp	r2, r3
 800edd8:	d900      	bls.n	800eddc <LmhpComplianceOnMcpsIndication+0x214>
 800edda:	1c01      	adds	r1, r0, #0
 800eddc:	b2cb      	uxtb	r3, r1
 800edde:	227f      	movs	r2, #127	; 0x7f
 800ede0:	18ba      	adds	r2, r7, r2
 800ede2:	7812      	ldrb	r2, [r2, #0]
 800ede4:	429a      	cmp	r2, r3
 800ede6:	d3da      	bcc.n	800ed9e <LmhpComplianceOnMcpsIndication+0x1d6>
        }
        break;
 800ede8:	e0c5      	b.n	800ef76 <LmhpComplianceOnMcpsIndication+0x3ae>
      case 5: /* (viii) */
      {
        MlmeReq_t mlmeReq;

        mlmeReq.Type = MLME_LINK_CHECK;
 800edea:	2168      	movs	r1, #104	; 0x68
 800edec:	187b      	adds	r3, r7, r1
 800edee:	2204      	movs	r2, #4
 800edf0:	701a      	strb	r2, [r3, #0]

        LoRaMacMlmeRequest(&mlmeReq);
 800edf2:	187b      	adds	r3, r7, r1
 800edf4:	0018      	movs	r0, r3
 800edf6:	f005 f95b 	bl	80140b0 <LoRaMacMlmeRequest>
      }
      break;
 800edfa:	e0bc      	b.n	800ef76 <LmhpComplianceOnMcpsIndication+0x3ae>
      case 6: /* (ix) */
      {
        MibRequestConfirm_t mibReq;

        TimerStop(&ComplianceTxNextPacketTimer);
 800edfc:	4b59      	ldr	r3, [pc, #356]	; (800ef64 <LmhpComplianceOnMcpsIndication+0x39c>)
 800edfe:	0018      	movs	r0, r3
 800ee00:	f00d ff58 	bl	801ccb4 <UTIL_TIMER_Stop>

        /* Disable TestMode and revert back to normal operation */
        /* Disable compliance test mode and reset the downlink counter. */
        ComplianceTestState.DownLinkCounter = 0;
 800ee04:	4b54      	ldr	r3, [pc, #336]	; (800ef58 <LmhpComplianceOnMcpsIndication+0x390>)
 800ee06:	2200      	movs	r2, #0
 800ee08:	819a      	strh	r2, [r3, #12]
        ComplianceTestState.IsRunning = false;
 800ee0a:	4b53      	ldr	r3, [pc, #332]	; (800ef58 <LmhpComplianceOnMcpsIndication+0x390>)
 800ee0c:	2200      	movs	r2, #0
 800ee0e:	705a      	strb	r2, [r3, #1]

        /* Restore previous ADR seeting */
        mibReq.Type = MIB_ADR;
 800ee10:	2108      	movs	r1, #8
 800ee12:	187b      	adds	r3, r7, r1
 800ee14:	2204      	movs	r2, #4
 800ee16:	701a      	strb	r2, [r3, #0]
        mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800ee18:	4b50      	ldr	r3, [pc, #320]	; (800ef5c <LmhpComplianceOnMcpsIndication+0x394>)
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	781a      	ldrb	r2, [r3, #0]
 800ee1e:	187b      	adds	r3, r7, r1
 800ee20:	711a      	strb	r2, [r3, #4]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800ee22:	187b      	adds	r3, r7, r1
 800ee24:	0018      	movs	r0, r3
 800ee26:	f004 fdbd 	bl	80139a4 <LoRaMacMibSetRequestConfirm>

        /* Enable duty cycle enforcement */
        LoRaMacTestSetDutyCycleOn(LmhpComplianceParams->DutyCycleEnabled);
 800ee2a:	4b4c      	ldr	r3, [pc, #304]	; (800ef5c <LmhpComplianceOnMcpsIndication+0x394>)
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	785b      	ldrb	r3, [r3, #1]
 800ee30:	0018      	movs	r0, r3
 800ee32:	f005 fbe3 	bl	80145fc <LoRaMacTestSetDutyCycleOn>

        /* Restart peripherals */
        if (LmhpComplianceParams->StartPeripherals != NULL)
 800ee36:	4b49      	ldr	r3, [pc, #292]	; (800ef5c <LmhpComplianceOnMcpsIndication+0x394>)
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	689b      	ldr	r3, [r3, #8]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d003      	beq.n	800ee48 <LmhpComplianceOnMcpsIndication+0x280>
        {
          LmhpComplianceParams->StartPeripherals();
 800ee40:	4b46      	ldr	r3, [pc, #280]	; (800ef5c <LmhpComplianceOnMcpsIndication+0x394>)
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	689b      	ldr	r3, [r3, #8]
 800ee46:	4798      	blx	r3
        }

        LmhpCompliancePackage.OnJoinRequest(ACTIVATION_TYPE_OTAA);
 800ee48:	4b49      	ldr	r3, [pc, #292]	; (800ef70 <LmhpComplianceOnMcpsIndication+0x3a8>)
 800ee4a:	6a1b      	ldr	r3, [r3, #32]
 800ee4c:	2002      	movs	r0, #2
 800ee4e:	4798      	blx	r3
      }
      break;
 800ee50:	e091      	b.n	800ef76 <LmhpComplianceOnMcpsIndication+0x3ae>
      case 7: /* (x) */
      {
        MlmeReq_t mlmeReq;
        if (mcpsIndication->BufferSize == 3)
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	7b1b      	ldrb	r3, [r3, #12]
 800ee56:	2b03      	cmp	r3, #3
 800ee58:	d114      	bne.n	800ee84 <LmhpComplianceOnMcpsIndication+0x2bc>
        {
          mlmeReq.Type = MLME_TXCW;
 800ee5a:	2154      	movs	r1, #84	; 0x54
 800ee5c:	187b      	adds	r3, r7, r1
 800ee5e:	2205      	movs	r2, #5
 800ee60:	701a      	strb	r2, [r3, #0]
          mlmeReq.Req.TxCw.Timeout = (uint16_t)((mcpsIndication->Buffer[1] << 8) | mcpsIndication->Buffer[2]);
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	689b      	ldr	r3, [r3, #8]
 800ee66:	3301      	adds	r3, #1
 800ee68:	781b      	ldrb	r3, [r3, #0]
 800ee6a:	021b      	lsls	r3, r3, #8
 800ee6c:	b21a      	sxth	r2, r3
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	689b      	ldr	r3, [r3, #8]
 800ee72:	3302      	adds	r3, #2
 800ee74:	781b      	ldrb	r3, [r3, #0]
 800ee76:	b21b      	sxth	r3, r3
 800ee78:	4313      	orrs	r3, r2
 800ee7a:	b21b      	sxth	r3, r3
 800ee7c:	b29a      	uxth	r2, r3
 800ee7e:	187b      	adds	r3, r7, r1
 800ee80:	809a      	strh	r2, [r3, #4]
 800ee82:	e031      	b.n	800eee8 <LmhpComplianceOnMcpsIndication+0x320>
        }
        else if (mcpsIndication->BufferSize == 7)
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	7b1b      	ldrb	r3, [r3, #12]
 800ee88:	2b07      	cmp	r3, #7
 800ee8a:	d12d      	bne.n	800eee8 <LmhpComplianceOnMcpsIndication+0x320>
        {
          mlmeReq.Type = MLME_TXCW_1;
 800ee8c:	2154      	movs	r1, #84	; 0x54
 800ee8e:	187b      	adds	r3, r7, r1
 800ee90:	2206      	movs	r2, #6
 800ee92:	701a      	strb	r2, [r3, #0]
          mlmeReq.Req.TxCw.Timeout = (uint16_t)((mcpsIndication->Buffer[1] << 8) | mcpsIndication->Buffer[2]);
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	689b      	ldr	r3, [r3, #8]
 800ee98:	3301      	adds	r3, #1
 800ee9a:	781b      	ldrb	r3, [r3, #0]
 800ee9c:	021b      	lsls	r3, r3, #8
 800ee9e:	b21a      	sxth	r2, r3
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	689b      	ldr	r3, [r3, #8]
 800eea4:	3302      	adds	r3, #2
 800eea6:	781b      	ldrb	r3, [r3, #0]
 800eea8:	b21b      	sxth	r3, r3
 800eeaa:	4313      	orrs	r3, r2
 800eeac:	b21b      	sxth	r3, r3
 800eeae:	b29a      	uxth	r2, r3
 800eeb0:	187b      	adds	r3, r7, r1
 800eeb2:	809a      	strh	r2, [r3, #4]
          mlmeReq.Req.TxCw.Frequency = (uint32_t)((mcpsIndication->Buffer[3] << 16) | (mcpsIndication->Buffer[4] << 8) | mcpsIndication->Buffer[5]) * 100;
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	689b      	ldr	r3, [r3, #8]
 800eeb8:	3303      	adds	r3, #3
 800eeba:	781b      	ldrb	r3, [r3, #0]
 800eebc:	041a      	lsls	r2, r3, #16
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	689b      	ldr	r3, [r3, #8]
 800eec2:	3304      	adds	r3, #4
 800eec4:	781b      	ldrb	r3, [r3, #0]
 800eec6:	021b      	lsls	r3, r3, #8
 800eec8:	431a      	orrs	r2, r3
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	689b      	ldr	r3, [r3, #8]
 800eece:	3305      	adds	r3, #5
 800eed0:	781b      	ldrb	r3, [r3, #0]
 800eed2:	4313      	orrs	r3, r2
 800eed4:	001a      	movs	r2, r3
 800eed6:	2364      	movs	r3, #100	; 0x64
 800eed8:	435a      	muls	r2, r3
 800eeda:	187b      	adds	r3, r7, r1
 800eedc:	609a      	str	r2, [r3, #8]
          mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	689b      	ldr	r3, [r3, #8]
 800eee2:	799a      	ldrb	r2, [r3, #6]
 800eee4:	187b      	adds	r3, r7, r1
 800eee6:	731a      	strb	r2, [r3, #12]
        }
        LoRaMacMlmeRequest(&mlmeReq);
 800eee8:	2354      	movs	r3, #84	; 0x54
 800eeea:	18fb      	adds	r3, r7, r3
 800eeec:	0018      	movs	r0, r3
 800eeee:	f005 f8df 	bl	80140b0 <LoRaMacMlmeRequest>
        ComplianceTestState.State = 1;
 800eef2:	4b19      	ldr	r3, [pc, #100]	; (800ef58 <LmhpComplianceOnMcpsIndication+0x390>)
 800eef4:	2201      	movs	r2, #1
 800eef6:	709a      	strb	r2, [r3, #2]
      }
      break;
 800eef8:	e03d      	b.n	800ef76 <LmhpComplianceOnMcpsIndication+0x3ae>
      case 8: /* Send DeviceTimeReq */
      {
        MlmeReq_t mlmeReq;

        mlmeReq.Type = MLME_DEVICE_TIME;
 800eefa:	2140      	movs	r1, #64	; 0x40
 800eefc:	187b      	adds	r3, r7, r1
 800eefe:	220a      	movs	r2, #10
 800ef00:	701a      	strb	r2, [r3, #0]

        LoRaMacMlmeRequest(&mlmeReq);
 800ef02:	187b      	adds	r3, r7, r1
 800ef04:	0018      	movs	r0, r3
 800ef06:	f005 f8d3 	bl	80140b0 <LoRaMacMlmeRequest>
      }
      break;
 800ef0a:	e034      	b.n	800ef76 <LmhpComplianceOnMcpsIndication+0x3ae>
      case 9: /* Switch end device Class */
      {
        MibRequestConfirm_t mibReq;

        mibReq.Type = MIB_DEVICE_CLASS;
 800ef0c:	2108      	movs	r1, #8
 800ef0e:	187b      	adds	r3, r7, r1
 800ef10:	2200      	movs	r2, #0
 800ef12:	701a      	strb	r2, [r3, #0]
        /* CLASS_A = 0, CLASS_B = 1, CLASS_C = 2 */
        mibReq.Param.Class = (DeviceClass_t)mcpsIndication->Buffer[1];;
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	689b      	ldr	r3, [r3, #8]
 800ef18:	3301      	adds	r3, #1
 800ef1a:	781a      	ldrb	r2, [r3, #0]
 800ef1c:	187b      	adds	r3, r7, r1
 800ef1e:	711a      	strb	r2, [r3, #4]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800ef20:	187b      	adds	r3, r7, r1
 800ef22:	0018      	movs	r0, r3
 800ef24:	f004 fd3e 	bl	80139a4 <LoRaMacMibSetRequestConfirm>
      }
      break;
 800ef28:	e025      	b.n	800ef76 <LmhpComplianceOnMcpsIndication+0x3ae>
      case 10: /* Send PingSlotInfoReq */
      {
        MlmeReq_t mlmeReq;

        mlmeReq.Type = MLME_PING_SLOT_INFO;
 800ef2a:	212c      	movs	r1, #44	; 0x2c
 800ef2c:	187b      	adds	r3, r7, r1
 800ef2e:	220d      	movs	r2, #13
 800ef30:	701a      	strb	r2, [r3, #0]
        mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	689b      	ldr	r3, [r3, #8]
 800ef36:	785a      	ldrb	r2, [r3, #1]
 800ef38:	187b      	adds	r3, r7, r1
 800ef3a:	711a      	strb	r2, [r3, #4]

        LoRaMacMlmeRequest(&mlmeReq);
 800ef3c:	187b      	adds	r3, r7, r1
 800ef3e:	0018      	movs	r0, r3
 800ef40:	f005 f8b6 	bl	80140b0 <LoRaMacMlmeRequest>
      }
      break;
 800ef44:	e017      	b.n	800ef76 <LmhpComplianceOnMcpsIndication+0x3ae>
    return;
 800ef46:	46c0      	nop			; (mov r8, r8)
 800ef48:	e015      	b.n	800ef76 <LmhpComplianceOnMcpsIndication+0x3ae>
    return;
 800ef4a:	46c0      	nop			; (mov r8, r8)
 800ef4c:	e013      	b.n	800ef76 <LmhpComplianceOnMcpsIndication+0x3ae>
    return;
 800ef4e:	46c0      	nop			; (mov r8, r8)
 800ef50:	e011      	b.n	800ef76 <LmhpComplianceOnMcpsIndication+0x3ae>
      default:
        break;
 800ef52:	46c0      	nop			; (mov r8, r8)
 800ef54:	e00f      	b.n	800ef76 <LmhpComplianceOnMcpsIndication+0x3ae>
 800ef56:	46c0      	nop			; (mov r8, r8)
 800ef58:	2000059c 	.word	0x2000059c
 800ef5c:	200005b0 	.word	0x200005b0
 800ef60:	0800ef87 	.word	0x0800ef87
 800ef64:	20000584 	.word	0x20000584
 800ef68:	00004e20 	.word	0x00004e20
 800ef6c:	0801f664 	.word	0x0801f664
 800ef70:	20000178 	.word	0x20000178
      break;
 800ef74:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800ef76:	46bd      	mov	sp, r7
 800ef78:	b020      	add	sp, #128	; 0x80
 800ef7a:	bd80      	pop	{r7, pc}

0800ef7c <LmhpComplianceProcess>:

static void LmhpComplianceProcess(void)
{
 800ef7c:	b580      	push	{r7, lr}
 800ef7e:	af00      	add	r7, sp, #0
  /* Nothing to process */
}
 800ef80:	46c0      	nop			; (mov r8, r8)
 800ef82:	46bd      	mov	sp, r7
 800ef84:	bd80      	pop	{r7, pc}

0800ef86 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent(void *context)
{
 800ef86:	b580      	push	{r7, lr}
 800ef88:	b082      	sub	sp, #8
 800ef8a:	af00      	add	r7, sp, #0
 800ef8c:	6078      	str	r0, [r7, #4]
  LmhpComplianceTxProcess();
 800ef8e:	f7ff fdad 	bl	800eaec <LmhpComplianceTxProcess>
}
 800ef92:	46c0      	nop			; (mov r8, r8)
 800ef94:	46bd      	mov	sp, r7
 800ef96:	b002      	add	sp, #8
 800ef98:	bd80      	pop	{r7, pc}

0800ef9a <NvmCtxMgmtEvent>:
#endif /* MAX_PERSISTENT_CTX_MGMT_ENABLED == 1 */
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

/* Exported functions ---------------------------------------------------------*/
void NvmCtxMgmtEvent(LoRaMacNvmCtxModule_t module)
{
 800ef9a:	b580      	push	{r7, lr}
 800ef9c:	b082      	sub	sp, #8
 800ef9e:	af00      	add	r7, sp, #0
 800efa0:	0002      	movs	r2, r0
 800efa2:	1dfb      	adds	r3, r7, #7
 800efa4:	701a      	strb	r2, [r3, #0]
    {
      break;
    }
  }
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800efa6:	46c0      	nop			; (mov r8, r8)
 800efa8:	46bd      	mov	sp, r7
 800efaa:	b002      	add	sp, #8
 800efac:	bd80      	pop	{r7, pc}

0800efae <NvmCtxMgmtStore>:

NvmCtxMgmtStatus_t NvmCtxMgmtStore(void)
{
 800efae:	b580      	push	{r7, lr}
 800efb0:	af00      	add	r7, sp, #0
  /* Resume LoRaMac */
  LoRaMacStart();

  return NVMCTXMGMT_STATUS_SUCCESS;
#else /* CONTEXT_MANAGEMENT_ENABLED == 0 */
  return NVMCTXMGMT_STATUS_FAIL;
 800efb2:	2301      	movs	r3, #1
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800efb4:	0018      	movs	r0, r3
 800efb6:	46bd      	mov	sp, r7
 800efb8:	bd80      	pop	{r7, pc}

0800efba <NvmCtxMgmtRestore>:

NvmCtxMgmtStatus_t NvmCtxMgmtRestore(void)
{
 800efba:	b580      	push	{r7, lr}
 800efbc:	af00      	add	r7, sp, #0
    LoRaMacMibSetRequestConfirm(&mibReq);
  }

  return status;
#else /* CONTEXT_MANAGEMENT_ENABLED == 0 */
  return NVMCTXMGMT_STATUS_FAIL;
 800efbe:	2301      	movs	r3, #1
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800efc0:	0018      	movs	r0, r3
 800efc2:	46bd      	mov	sp, r7
 800efc4:	bd80      	pop	{r7, pc}
	...

0800efc8 <OnRadioTxDone>:
 */
static void LoRaMacHandleIndicationEvents( void );

/* Private  functions ---------------------------------------------------------*/
static void OnRadioTxDone( void )
{
 800efc8:	b5b0      	push	{r4, r5, r7, lr}
 800efca:	b082      	sub	sp, #8
 800efcc:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800efce:	f00d ffa1 	bl	801cf14 <UTIL_TIMER_GetCurrentTime>
 800efd2:	0002      	movs	r2, r0
 800efd4:	4b17      	ldr	r3, [pc, #92]	; (800f034 <OnRadioTxDone+0x6c>)
 800efd6:	601a      	str	r2, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800efd8:	4d17      	ldr	r5, [pc, #92]	; (800f038 <OnRadioTxDone+0x70>)
 800efda:	23ce      	movs	r3, #206	; 0xce
 800efdc:	009c      	lsls	r4, r3, #2
 800efde:	003b      	movs	r3, r7
 800efe0:	0018      	movs	r0, r3
 800efe2:	f00d fd45 	bl	801ca70 <SysTimeGet>
 800efe6:	003a      	movs	r2, r7
 800efe8:	192b      	adds	r3, r5, r4
 800efea:	ca03      	ldmia	r2!, {r0, r1}
 800efec:	c303      	stmia	r3!, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800efee:	4b13      	ldr	r3, [pc, #76]	; (800f03c <OnRadioTxDone+0x74>)
 800eff0:	781a      	ldrb	r2, [r3, #0]
 800eff2:	2110      	movs	r1, #16
 800eff4:	430a      	orrs	r2, r1
 800eff6:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800eff8:	4a0f      	ldr	r2, [pc, #60]	; (800f038 <OnRadioTxDone+0x70>)
 800effa:	23d2      	movs	r3, #210	; 0xd2
 800effc:	009b      	lsls	r3, r3, #2
 800effe:	58d3      	ldr	r3, [r2, r3]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d00c      	beq.n	800f01e <OnRadioTxDone+0x56>
 800f004:	4a0c      	ldr	r2, [pc, #48]	; (800f038 <OnRadioTxDone+0x70>)
 800f006:	23d2      	movs	r3, #210	; 0xd2
 800f008:	009b      	lsls	r3, r3, #2
 800f00a:	58d3      	ldr	r3, [r2, r3]
 800f00c:	68db      	ldr	r3, [r3, #12]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d005      	beq.n	800f01e <OnRadioTxDone+0x56>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f012:	4a09      	ldr	r2, [pc, #36]	; (800f038 <OnRadioTxDone+0x70>)
 800f014:	23d2      	movs	r3, #210	; 0xd2
 800f016:	009b      	lsls	r3, r3, #2
 800f018:	58d3      	ldr	r3, [r2, r3]
 800f01a:	68db      	ldr	r3, [r3, #12]
 800f01c:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800f01e:	4b08      	ldr	r3, [pc, #32]	; (800f040 <OnRadioTxDone+0x78>)
 800f020:	2201      	movs	r2, #1
 800f022:	2100      	movs	r1, #0
 800f024:	2002      	movs	r0, #2
 800f026:	f00c ff01 	bl	801be2c <UTIL_ADV_TRACE_COND_FSend>
}
 800f02a:	46c0      	nop			; (mov r8, r8)
 800f02c:	46bd      	mov	sp, r7
 800f02e:	b002      	add	sp, #8
 800f030:	bdb0      	pop	{r4, r5, r7, pc}
 800f032:	46c0      	nop			; (mov r8, r8)
 800f034:	200016e0 	.word	0x200016e0
 800f038:	200005b4 	.word	0x200005b4
 800f03c:	20000be4 	.word	0x20000be4
 800f040:	0801f6a0 	.word	0x0801f6a0

0800f044 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800f044:	b5b0      	push	{r4, r5, r7, lr}
 800f046:	b084      	sub	sp, #16
 800f048:	af00      	add	r7, sp, #0
 800f04a:	60f8      	str	r0, [r7, #12]
 800f04c:	000c      	movs	r4, r1
 800f04e:	0010      	movs	r0, r2
 800f050:	0019      	movs	r1, r3
 800f052:	250a      	movs	r5, #10
 800f054:	197b      	adds	r3, r7, r5
 800f056:	1c22      	adds	r2, r4, #0
 800f058:	801a      	strh	r2, [r3, #0]
 800f05a:	2408      	movs	r4, #8
 800f05c:	193b      	adds	r3, r7, r4
 800f05e:	1c02      	adds	r2, r0, #0
 800f060:	801a      	strh	r2, [r3, #0]
 800f062:	1dfb      	adds	r3, r7, #7
 800f064:	1c0a      	adds	r2, r1, #0
 800f066:	701a      	strb	r2, [r3, #0]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800f068:	f00d ff54 	bl	801cf14 <UTIL_TIMER_GetCurrentTime>
 800f06c:	0002      	movs	r2, r0
 800f06e:	4b19      	ldr	r3, [pc, #100]	; (800f0d4 <OnRadioRxDone+0x90>)
 800f070:	601a      	str	r2, [r3, #0]
    RxDoneParams.Payload = payload;
 800f072:	4b18      	ldr	r3, [pc, #96]	; (800f0d4 <OnRadioRxDone+0x90>)
 800f074:	68fa      	ldr	r2, [r7, #12]
 800f076:	605a      	str	r2, [r3, #4]
    RxDoneParams.Size = size;
 800f078:	4b16      	ldr	r3, [pc, #88]	; (800f0d4 <OnRadioRxDone+0x90>)
 800f07a:	197a      	adds	r2, r7, r5
 800f07c:	8812      	ldrh	r2, [r2, #0]
 800f07e:	811a      	strh	r2, [r3, #8]
    RxDoneParams.Rssi = rssi;
 800f080:	4b14      	ldr	r3, [pc, #80]	; (800f0d4 <OnRadioRxDone+0x90>)
 800f082:	193a      	adds	r2, r7, r4
 800f084:	8812      	ldrh	r2, [r2, #0]
 800f086:	815a      	strh	r2, [r3, #10]
    RxDoneParams.Snr = snr;
 800f088:	4b12      	ldr	r3, [pc, #72]	; (800f0d4 <OnRadioRxDone+0x90>)
 800f08a:	1dfa      	adds	r2, r7, #7
 800f08c:	7812      	ldrb	r2, [r2, #0]
 800f08e:	731a      	strb	r2, [r3, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800f090:	4b11      	ldr	r3, [pc, #68]	; (800f0d8 <OnRadioRxDone+0x94>)
 800f092:	781a      	ldrb	r2, [r3, #0]
 800f094:	2108      	movs	r1, #8
 800f096:	430a      	orrs	r2, r1
 800f098:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f09a:	4a10      	ldr	r2, [pc, #64]	; (800f0dc <OnRadioRxDone+0x98>)
 800f09c:	23d2      	movs	r3, #210	; 0xd2
 800f09e:	009b      	lsls	r3, r3, #2
 800f0a0:	58d3      	ldr	r3, [r2, r3]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d00c      	beq.n	800f0c0 <OnRadioRxDone+0x7c>
 800f0a6:	4a0d      	ldr	r2, [pc, #52]	; (800f0dc <OnRadioRxDone+0x98>)
 800f0a8:	23d2      	movs	r3, #210	; 0xd2
 800f0aa:	009b      	lsls	r3, r3, #2
 800f0ac:	58d3      	ldr	r3, [r2, r3]
 800f0ae:	68db      	ldr	r3, [r3, #12]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d005      	beq.n	800f0c0 <OnRadioRxDone+0x7c>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f0b4:	4a09      	ldr	r2, [pc, #36]	; (800f0dc <OnRadioRxDone+0x98>)
 800f0b6:	23d2      	movs	r3, #210	; 0xd2
 800f0b8:	009b      	lsls	r3, r3, #2
 800f0ba:	58d3      	ldr	r3, [r2, r3]
 800f0bc:	68db      	ldr	r3, [r3, #12]
 800f0be:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800f0c0:	4b07      	ldr	r3, [pc, #28]	; (800f0e0 <OnRadioRxDone+0x9c>)
 800f0c2:	2201      	movs	r2, #1
 800f0c4:	2100      	movs	r1, #0
 800f0c6:	2002      	movs	r0, #2
 800f0c8:	f00c feb0 	bl	801be2c <UTIL_ADV_TRACE_COND_FSend>
}
 800f0cc:	46c0      	nop			; (mov r8, r8)
 800f0ce:	46bd      	mov	sp, r7
 800f0d0:	b004      	add	sp, #16
 800f0d2:	bdb0      	pop	{r4, r5, r7, pc}
 800f0d4:	200016e4 	.word	0x200016e4
 800f0d8:	20000be4 	.word	0x20000be4
 800f0dc:	200005b4 	.word	0x200005b4
 800f0e0:	0801f6b0 	.word	0x0801f6b0

0800f0e4 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800f0e4:	b580      	push	{r7, lr}
 800f0e6:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800f0e8:	4b10      	ldr	r3, [pc, #64]	; (800f12c <OnRadioTxTimeout+0x48>)
 800f0ea:	781a      	ldrb	r2, [r3, #0]
 800f0ec:	2104      	movs	r1, #4
 800f0ee:	430a      	orrs	r2, r1
 800f0f0:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f0f2:	4a0f      	ldr	r2, [pc, #60]	; (800f130 <OnRadioTxTimeout+0x4c>)
 800f0f4:	23d2      	movs	r3, #210	; 0xd2
 800f0f6:	009b      	lsls	r3, r3, #2
 800f0f8:	58d3      	ldr	r3, [r2, r3]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d00c      	beq.n	800f118 <OnRadioTxTimeout+0x34>
 800f0fe:	4a0c      	ldr	r2, [pc, #48]	; (800f130 <OnRadioTxTimeout+0x4c>)
 800f100:	23d2      	movs	r3, #210	; 0xd2
 800f102:	009b      	lsls	r3, r3, #2
 800f104:	58d3      	ldr	r3, [r2, r3]
 800f106:	68db      	ldr	r3, [r3, #12]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d005      	beq.n	800f118 <OnRadioTxTimeout+0x34>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f10c:	4a08      	ldr	r2, [pc, #32]	; (800f130 <OnRadioTxTimeout+0x4c>)
 800f10e:	23d2      	movs	r3, #210	; 0xd2
 800f110:	009b      	lsls	r3, r3, #2
 800f112:	58d3      	ldr	r3, [r2, r3]
 800f114:	68db      	ldr	r3, [r3, #12]
 800f116:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800f118:	4b06      	ldr	r3, [pc, #24]	; (800f134 <OnRadioTxTimeout+0x50>)
 800f11a:	2201      	movs	r2, #1
 800f11c:	2100      	movs	r1, #0
 800f11e:	2002      	movs	r0, #2
 800f120:	f00c fe84 	bl	801be2c <UTIL_ADV_TRACE_COND_FSend>
}
 800f124:	46c0      	nop			; (mov r8, r8)
 800f126:	46bd      	mov	sp, r7
 800f128:	bd80      	pop	{r7, pc}
 800f12a:	46c0      	nop			; (mov r8, r8)
 800f12c:	20000be4 	.word	0x20000be4
 800f130:	200005b4 	.word	0x200005b4
 800f134:	0801f6c0 	.word	0x0801f6c0

0800f138 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800f138:	b580      	push	{r7, lr}
 800f13a:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800f13c:	4b0d      	ldr	r3, [pc, #52]	; (800f174 <OnRadioRxError+0x3c>)
 800f13e:	781a      	ldrb	r2, [r3, #0]
 800f140:	2102      	movs	r1, #2
 800f142:	430a      	orrs	r2, r1
 800f144:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f146:	4a0c      	ldr	r2, [pc, #48]	; (800f178 <OnRadioRxError+0x40>)
 800f148:	23d2      	movs	r3, #210	; 0xd2
 800f14a:	009b      	lsls	r3, r3, #2
 800f14c:	58d3      	ldr	r3, [r2, r3]
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d00c      	beq.n	800f16c <OnRadioRxError+0x34>
 800f152:	4a09      	ldr	r2, [pc, #36]	; (800f178 <OnRadioRxError+0x40>)
 800f154:	23d2      	movs	r3, #210	; 0xd2
 800f156:	009b      	lsls	r3, r3, #2
 800f158:	58d3      	ldr	r3, [r2, r3]
 800f15a:	68db      	ldr	r3, [r3, #12]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d005      	beq.n	800f16c <OnRadioRxError+0x34>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f160:	4a05      	ldr	r2, [pc, #20]	; (800f178 <OnRadioRxError+0x40>)
 800f162:	23d2      	movs	r3, #210	; 0xd2
 800f164:	009b      	lsls	r3, r3, #2
 800f166:	58d3      	ldr	r3, [r2, r3]
 800f168:	68db      	ldr	r3, [r3, #12]
 800f16a:	4798      	blx	r3
    }
}
 800f16c:	46c0      	nop			; (mov r8, r8)
 800f16e:	46bd      	mov	sp, r7
 800f170:	bd80      	pop	{r7, pc}
 800f172:	46c0      	nop			; (mov r8, r8)
 800f174:	20000be4 	.word	0x20000be4
 800f178:	200005b4 	.word	0x200005b4

0800f17c <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800f17c:	b580      	push	{r7, lr}
 800f17e:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800f180:	4b10      	ldr	r3, [pc, #64]	; (800f1c4 <OnRadioRxTimeout+0x48>)
 800f182:	781a      	ldrb	r2, [r3, #0]
 800f184:	2101      	movs	r1, #1
 800f186:	430a      	orrs	r2, r1
 800f188:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f18a:	4a0f      	ldr	r2, [pc, #60]	; (800f1c8 <OnRadioRxTimeout+0x4c>)
 800f18c:	23d2      	movs	r3, #210	; 0xd2
 800f18e:	009b      	lsls	r3, r3, #2
 800f190:	58d3      	ldr	r3, [r2, r3]
 800f192:	2b00      	cmp	r3, #0
 800f194:	d00c      	beq.n	800f1b0 <OnRadioRxTimeout+0x34>
 800f196:	4a0c      	ldr	r2, [pc, #48]	; (800f1c8 <OnRadioRxTimeout+0x4c>)
 800f198:	23d2      	movs	r3, #210	; 0xd2
 800f19a:	009b      	lsls	r3, r3, #2
 800f19c:	58d3      	ldr	r3, [r2, r3]
 800f19e:	68db      	ldr	r3, [r3, #12]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d005      	beq.n	800f1b0 <OnRadioRxTimeout+0x34>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f1a4:	4a08      	ldr	r2, [pc, #32]	; (800f1c8 <OnRadioRxTimeout+0x4c>)
 800f1a6:	23d2      	movs	r3, #210	; 0xd2
 800f1a8:	009b      	lsls	r3, r3, #2
 800f1aa:	58d3      	ldr	r3, [r2, r3]
 800f1ac:	68db      	ldr	r3, [r3, #12]
 800f1ae:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800f1b0:	4b06      	ldr	r3, [pc, #24]	; (800f1cc <OnRadioRxTimeout+0x50>)
 800f1b2:	2201      	movs	r2, #1
 800f1b4:	2100      	movs	r1, #0
 800f1b6:	2002      	movs	r0, #2
 800f1b8:	f00c fe38 	bl	801be2c <UTIL_ADV_TRACE_COND_FSend>
}
 800f1bc:	46c0      	nop			; (mov r8, r8)
 800f1be:	46bd      	mov	sp, r7
 800f1c0:	bd80      	pop	{r7, pc}
 800f1c2:	46c0      	nop			; (mov r8, r8)
 800f1c4:	20000be4 	.word	0x20000be4
 800f1c8:	200005b4 	.word	0x200005b4
 800f1cc:	0801f6d0 	.word	0x0801f6d0

0800f1d0 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800f1d0:	b580      	push	{r7, lr}
 800f1d2:	af00      	add	r7, sp, #0
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800f1d4:	4b0a      	ldr	r3, [pc, #40]	; (800f200 <UpdateRxSlotIdleState+0x30>)
 800f1d6:	4a0b      	ldr	r2, [pc, #44]	; (800f204 <UpdateRxSlotIdleState+0x34>)
 800f1d8:	589b      	ldr	r3, [r3, r2]
 800f1da:	227c      	movs	r2, #124	; 0x7c
 800f1dc:	5c9b      	ldrb	r3, [r3, r2]
 800f1de:	2b02      	cmp	r3, #2
 800f1e0:	d005      	beq.n	800f1ee <UpdateRxSlotIdleState+0x1e>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800f1e2:	4a07      	ldr	r2, [pc, #28]	; (800f200 <UpdateRxSlotIdleState+0x30>)
 800f1e4:	2390      	movs	r3, #144	; 0x90
 800f1e6:	00db      	lsls	r3, r3, #3
 800f1e8:	2106      	movs	r1, #6
 800f1ea:	54d1      	strb	r1, [r2, r3]
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800f1ec:	e004      	b.n	800f1f8 <UpdateRxSlotIdleState+0x28>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800f1ee:	4a04      	ldr	r2, [pc, #16]	; (800f200 <UpdateRxSlotIdleState+0x30>)
 800f1f0:	2390      	movs	r3, #144	; 0x90
 800f1f2:	00db      	lsls	r3, r3, #3
 800f1f4:	2102      	movs	r1, #2
 800f1f6:	54d1      	strb	r1, [r2, r3]
}
 800f1f8:	46c0      	nop			; (mov r8, r8)
 800f1fa:	46bd      	mov	sp, r7
 800f1fc:	bd80      	pop	{r7, pc}
 800f1fe:	46c0      	nop			; (mov r8, r8)
 800f200:	200005b4 	.word	0x200005b4
 800f204:	00000484 	.word	0x00000484

0800f208 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800f208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f20a:	b08f      	sub	sp, #60	; 0x3c
 800f20c:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800f20e:	4b59      	ldr	r3, [pc, #356]	; (800f374 <ProcessRadioTxDone+0x16c>)
 800f210:	4a59      	ldr	r2, [pc, #356]	; (800f378 <ProcessRadioTxDone+0x170>)
 800f212:	589b      	ldr	r3, [r3, r2]
 800f214:	227c      	movs	r2, #124	; 0x7c
 800f216:	5c9b      	ldrb	r3, [r3, r2]
 800f218:	2b02      	cmp	r3, #2
 800f21a:	d002      	beq.n	800f222 <ProcessRadioTxDone+0x1a>
    {
        Radio.Sleep( );
 800f21c:	4b57      	ldr	r3, [pc, #348]	; (800f37c <ProcessRadioTxDone+0x174>)
 800f21e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f220:	4798      	blx	r3
    }
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800f222:	4a54      	ldr	r2, [pc, #336]	; (800f374 <ProcessRadioTxDone+0x16c>)
 800f224:	23ec      	movs	r3, #236	; 0xec
 800f226:	009b      	lsls	r3, r3, #2
 800f228:	58d2      	ldr	r2, [r2, r3]
 800f22a:	4b55      	ldr	r3, [pc, #340]	; (800f380 <ProcessRadioTxDone+0x178>)
 800f22c:	0011      	movs	r1, r2
 800f22e:	0018      	movs	r0, r3
 800f230:	f00d fdb8 	bl	801cda4 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800f234:	4b52      	ldr	r3, [pc, #328]	; (800f380 <ProcessRadioTxDone+0x178>)
 800f236:	0018      	movs	r0, r3
 800f238:	f00d fcc4 	bl	801cbc4 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800f23c:	4a4d      	ldr	r2, [pc, #308]	; (800f374 <ProcessRadioTxDone+0x16c>)
 800f23e:	23ed      	movs	r3, #237	; 0xed
 800f240:	009b      	lsls	r3, r3, #2
 800f242:	58d2      	ldr	r2, [r2, r3]
 800f244:	4b4f      	ldr	r3, [pc, #316]	; (800f384 <ProcessRadioTxDone+0x17c>)
 800f246:	0011      	movs	r1, r2
 800f248:	0018      	movs	r0, r3
 800f24a:	f00d fdab 	bl	801cda4 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800f24e:	4b4d      	ldr	r3, [pc, #308]	; (800f384 <ProcessRadioTxDone+0x17c>)
 800f250:	0018      	movs	r0, r3
 800f252:	f00d fcb7 	bl	801cbc4 <UTIL_TIMER_Start>

    if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800f256:	4b47      	ldr	r3, [pc, #284]	; (800f374 <ProcessRadioTxDone+0x16c>)
 800f258:	4a47      	ldr	r2, [pc, #284]	; (800f378 <ProcessRadioTxDone+0x170>)
 800f25a:	589b      	ldr	r3, [r3, r2]
 800f25c:	227c      	movs	r2, #124	; 0x7c
 800f25e:	5c9b      	ldrb	r3, [r3, r2]
 800f260:	2b02      	cmp	r3, #2
 800f262:	d004      	beq.n	800f26e <ProcessRadioTxDone+0x66>
 800f264:	4b43      	ldr	r3, [pc, #268]	; (800f374 <ProcessRadioTxDone+0x16c>)
 800f266:	4a48      	ldr	r2, [pc, #288]	; (800f388 <ProcessRadioTxDone+0x180>)
 800f268:	5c9b      	ldrb	r3, [r3, r2]
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d021      	beq.n	800f2b2 <ProcessRadioTxDone+0xaa>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800f26e:	2120      	movs	r1, #32
 800f270:	187b      	adds	r3, r7, r1
 800f272:	2216      	movs	r2, #22
 800f274:	701a      	strb	r2, [r3, #0]
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800f276:	4b3f      	ldr	r3, [pc, #252]	; (800f374 <ProcessRadioTxDone+0x16c>)
 800f278:	4a3f      	ldr	r2, [pc, #252]	; (800f378 <ProcessRadioTxDone+0x170>)
 800f27a:	589b      	ldr	r3, [r3, r2]
 800f27c:	781b      	ldrb	r3, [r3, #0]
 800f27e:	187a      	adds	r2, r7, r1
 800f280:	0011      	movs	r1, r2
 800f282:	0018      	movs	r0, r3
 800f284:	f007 fccf 	bl	8016c26 <RegionGetPhyParam>
 800f288:	0003      	movs	r3, r0
 800f28a:	001a      	movs	r2, r3
 800f28c:	211c      	movs	r1, #28
 800f28e:	187b      	adds	r3, r7, r1
 800f290:	601a      	str	r2, [r3, #0]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800f292:	4a38      	ldr	r2, [pc, #224]	; (800f374 <ProcessRadioTxDone+0x16c>)
 800f294:	23ed      	movs	r3, #237	; 0xed
 800f296:	009b      	lsls	r3, r3, #2
 800f298:	58d2      	ldr	r2, [r2, r3]
 800f29a:	187b      	adds	r3, r7, r1
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	18d2      	adds	r2, r2, r3
 800f2a0:	4b3a      	ldr	r3, [pc, #232]	; (800f38c <ProcessRadioTxDone+0x184>)
 800f2a2:	0011      	movs	r1, r2
 800f2a4:	0018      	movs	r0, r3
 800f2a6:	f00d fd7d 	bl	801cda4 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800f2aa:	4b38      	ldr	r3, [pc, #224]	; (800f38c <ProcessRadioTxDone+0x184>)
 800f2ac:	0018      	movs	r0, r3
 800f2ae:	f00d fc89 	bl	801cbc4 <UTIL_TIMER_Start>
    }

    // Update Aggregated last tx done time
    MacCtx.NvmCtx->LastTxDoneTime = TxDoneParams.CurTime;
 800f2b2:	4b30      	ldr	r3, [pc, #192]	; (800f374 <ProcessRadioTxDone+0x16c>)
 800f2b4:	4a30      	ldr	r2, [pc, #192]	; (800f378 <ProcessRadioTxDone+0x170>)
 800f2b6:	589a      	ldr	r2, [r3, r2]
 800f2b8:	4b35      	ldr	r3, [pc, #212]	; (800f390 <ProcessRadioTxDone+0x188>)
 800f2ba:	6819      	ldr	r1, [r3, #0]
 800f2bc:	23a8      	movs	r3, #168	; 0xa8
 800f2be:	005b      	lsls	r3, r3, #1
 800f2c0:	50d1      	str	r1, [r2, r3]

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800f2c2:	4b2c      	ldr	r3, [pc, #176]	; (800f374 <ProcessRadioTxDone+0x16c>)
 800f2c4:	4a33      	ldr	r2, [pc, #204]	; (800f394 <ProcessRadioTxDone+0x18c>)
 800f2c6:	5c9a      	ldrb	r2, [r3, r2]
 800f2c8:	2408      	movs	r4, #8
 800f2ca:	193b      	adds	r3, r7, r4
 800f2cc:	701a      	strb	r2, [r3, #0]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800f2ce:	4b30      	ldr	r3, [pc, #192]	; (800f390 <ProcessRadioTxDone+0x188>)
 800f2d0:	681a      	ldr	r2, [r3, #0]
 800f2d2:	193b      	adds	r3, r7, r4
 800f2d4:	605a      	str	r2, [r3, #4]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 800f2d6:	2328      	movs	r3, #40	; 0x28
 800f2d8:	18fb      	adds	r3, r7, r3
 800f2da:	0018      	movs	r0, r3
 800f2dc:	f00d fc0a 	bl	801caf4 <SysTimeGetMcuTime>
 800f2e0:	4b24      	ldr	r3, [pc, #144]	; (800f374 <ProcessRadioTxDone+0x16c>)
 800f2e2:	4a25      	ldr	r2, [pc, #148]	; (800f378 <ProcessRadioTxDone+0x170>)
 800f2e4:	5898      	ldr	r0, [r3, r2]
 800f2e6:	193d      	adds	r5, r7, r4
 800f2e8:	003e      	movs	r6, r7
 800f2ea:	23ac      	movs	r3, #172	; 0xac
 800f2ec:	0059      	lsls	r1, r3, #1
 800f2ee:	2328      	movs	r3, #40	; 0x28
 800f2f0:	18fa      	adds	r2, r7, r3
 800f2f2:	2404      	movs	r4, #4
 800f2f4:	1843      	adds	r3, r0, r1
 800f2f6:	191c      	adds	r4, r3, r4
 800f2f8:	466b      	mov	r3, sp
 800f2fa:	6824      	ldr	r4, [r4, #0]
 800f2fc:	601c      	str	r4, [r3, #0]
 800f2fe:	5843      	ldr	r3, [r0, r1]
 800f300:	6811      	ldr	r1, [r2, #0]
 800f302:	6852      	ldr	r2, [r2, #4]
 800f304:	0030      	movs	r0, r6
 800f306:	f00d fb27 	bl	801c958 <SysTimeSub>
 800f30a:	003a      	movs	r2, r7
 800f30c:	002b      	movs	r3, r5
 800f30e:	330c      	adds	r3, #12
 800f310:	ca21      	ldmia	r2!, {r0, r5}
 800f312:	c321      	stmia	r3!, {r0, r5}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800f314:	4a17      	ldr	r2, [pc, #92]	; (800f374 <ProcessRadioTxDone+0x16c>)
 800f316:	2383      	movs	r3, #131	; 0x83
 800f318:	00db      	lsls	r3, r3, #3
 800f31a:	58d2      	ldr	r2, [r2, r3]
 800f31c:	2108      	movs	r1, #8
 800f31e:	187b      	adds	r3, r7, r1
 800f320:	609a      	str	r2, [r3, #8]
    txDone.Joined  = true;
 800f322:	187b      	adds	r3, r7, r1
 800f324:	2201      	movs	r2, #1
 800f326:	705a      	strb	r2, [r3, #1]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800f328:	4b12      	ldr	r3, [pc, #72]	; (800f374 <ProcessRadioTxDone+0x16c>)
 800f32a:	4a13      	ldr	r2, [pc, #76]	; (800f378 <ProcessRadioTxDone+0x170>)
 800f32c:	589a      	ldr	r2, [r3, r2]
 800f32e:	23b2      	movs	r3, #178	; 0xb2
 800f330:	005b      	lsls	r3, r3, #1
 800f332:	5cd3      	ldrb	r3, [r2, r3]
 800f334:	2b00      	cmp	r3, #0
 800f336:	d102      	bne.n	800f33e <ProcessRadioTxDone+0x136>
    {
        txDone.Joined  = false;
 800f338:	187b      	adds	r3, r7, r1
 800f33a:	2200      	movs	r2, #0
 800f33c:	705a      	strb	r2, [r3, #1]
    }

    RegionSetBandTxDone( MacCtx.NvmCtx->Region, &txDone );
 800f33e:	4b0d      	ldr	r3, [pc, #52]	; (800f374 <ProcessRadioTxDone+0x16c>)
 800f340:	4a0d      	ldr	r2, [pc, #52]	; (800f378 <ProcessRadioTxDone+0x170>)
 800f342:	589b      	ldr	r3, [r3, r2]
 800f344:	781b      	ldrb	r3, [r3, #0]
 800f346:	2208      	movs	r2, #8
 800f348:	18ba      	adds	r2, r7, r2
 800f34a:	0011      	movs	r1, r2
 800f34c:	0018      	movs	r0, r3
 800f34e:	f007 fc92 	bl	8016c76 <RegionSetBandTxDone>

    if( MacCtx.NodeAckRequested == false )
 800f352:	4b08      	ldr	r3, [pc, #32]	; (800f374 <ProcessRadioTxDone+0x16c>)
 800f354:	4a0c      	ldr	r2, [pc, #48]	; (800f388 <ProcessRadioTxDone+0x180>)
 800f356:	5c9b      	ldrb	r3, [r3, r2]
 800f358:	2201      	movs	r2, #1
 800f35a:	4053      	eors	r3, r2
 800f35c:	b2db      	uxtb	r3, r3
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d003      	beq.n	800f36a <ProcessRadioTxDone+0x162>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f362:	4b04      	ldr	r3, [pc, #16]	; (800f374 <ProcessRadioTxDone+0x16c>)
 800f364:	4a0c      	ldr	r2, [pc, #48]	; (800f398 <ProcessRadioTxDone+0x190>)
 800f366:	2100      	movs	r1, #0
 800f368:	5499      	strb	r1, [r3, r2]
    }
}
 800f36a:	46c0      	nop			; (mov r8, r8)
 800f36c:	46bd      	mov	sp, r7
 800f36e:	b00d      	add	sp, #52	; 0x34
 800f370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f372:	46c0      	nop			; (mov r8, r8)
 800f374:	200005b4 	.word	0x200005b4
 800f378:	00000484 	.word	0x00000484
 800f37c:	0801fb64 	.word	0x0801fb64
 800f380:	20000934 	.word	0x20000934
 800f384:	2000094c 	.word	0x2000094c
 800f388:	00000414 	.word	0x00000414
 800f38c:	200009ac 	.word	0x200009ac
 800f390:	200016e0 	.word	0x200016e0
 800f394:	00000415 	.word	0x00000415
 800f398:	0000043d 	.word	0x0000043d

0800f39c <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800f39c:	b580      	push	{r7, lr}
 800f39e:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800f3a0:	4a11      	ldr	r2, [pc, #68]	; (800f3e8 <PrepareRxDoneAbort+0x4c>)
 800f3a2:	23d0      	movs	r3, #208	; 0xd0
 800f3a4:	009b      	lsls	r3, r3, #2
 800f3a6:	58d3      	ldr	r3, [r2, r3]
 800f3a8:	2280      	movs	r2, #128	; 0x80
 800f3aa:	431a      	orrs	r2, r3
 800f3ac:	0011      	movs	r1, r2
 800f3ae:	4a0e      	ldr	r2, [pc, #56]	; (800f3e8 <PrepareRxDoneAbort+0x4c>)
 800f3b0:	23d0      	movs	r3, #208	; 0xd0
 800f3b2:	009b      	lsls	r3, r3, #2
 800f3b4:	50d1      	str	r1, [r2, r3]

    if( MacCtx.NodeAckRequested == true )
 800f3b6:	4b0c      	ldr	r3, [pc, #48]	; (800f3e8 <PrepareRxDoneAbort+0x4c>)
 800f3b8:	4a0c      	ldr	r2, [pc, #48]	; (800f3ec <PrepareRxDoneAbort+0x50>)
 800f3ba:	5c9b      	ldrb	r3, [r3, r2]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d002      	beq.n	800f3c6 <PrepareRxDoneAbort+0x2a>
    {
        OnAckTimeoutTimerEvent( NULL );
 800f3c0:	2000      	movs	r0, #0
 800f3c2:	f001 f98d 	bl	80106e0 <OnAckTimeoutTimerEvent>
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800f3c6:	4b08      	ldr	r3, [pc, #32]	; (800f3e8 <PrepareRxDoneAbort+0x4c>)
 800f3c8:	4a09      	ldr	r2, [pc, #36]	; (800f3f0 <PrepareRxDoneAbort+0x54>)
 800f3ca:	5c99      	ldrb	r1, [r3, r2]
 800f3cc:	2002      	movs	r0, #2
 800f3ce:	4301      	orrs	r1, r0
 800f3d0:	5499      	strb	r1, [r3, r2]
    MacCtx.MacFlags.Bits.MacDone = 1;
 800f3d2:	4b05      	ldr	r3, [pc, #20]	; (800f3e8 <PrepareRxDoneAbort+0x4c>)
 800f3d4:	4a06      	ldr	r2, [pc, #24]	; (800f3f0 <PrepareRxDoneAbort+0x54>)
 800f3d6:	5c99      	ldrb	r1, [r3, r2]
 800f3d8:	2020      	movs	r0, #32
 800f3da:	4301      	orrs	r1, r0
 800f3dc:	5499      	strb	r1, [r3, r2]

    UpdateRxSlotIdleState( );
 800f3de:	f7ff fef7 	bl	800f1d0 <UpdateRxSlotIdleState>
}
 800f3e2:	46c0      	nop			; (mov r8, r8)
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	bd80      	pop	{r7, pc}
 800f3e8:	200005b4 	.word	0x200005b4
 800f3ec:	00000414 	.word	0x00000414
 800f3f0:	00000481 	.word	0x00000481

0800f3f4 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800f3f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f3f6:	b0a7      	sub	sp, #156	; 0x9c
 800f3f8:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800f3fa:	2380      	movs	r3, #128	; 0x80
 800f3fc:	18fb      	adds	r3, r7, r3
 800f3fe:	2213      	movs	r2, #19
 800f400:	701a      	strb	r2, [r3, #0]

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800f402:	4bdf      	ldr	r3, [pc, #892]	; (800f780 <ProcessRadioRxDone+0x38c>)
 800f404:	685b      	ldr	r3, [r3, #4]
 800f406:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint16_t size = RxDoneParams.Size;
 800f408:	267a      	movs	r6, #122	; 0x7a
 800f40a:	19bb      	adds	r3, r7, r6
 800f40c:	4adc      	ldr	r2, [pc, #880]	; (800f780 <ProcessRadioRxDone+0x38c>)
 800f40e:	8912      	ldrh	r2, [r2, #8]
 800f410:	801a      	strh	r2, [r3, #0]
    int16_t rssi = RxDoneParams.Rssi;
 800f412:	2478      	movs	r4, #120	; 0x78
 800f414:	193b      	adds	r3, r7, r4
 800f416:	4ada      	ldr	r2, [pc, #872]	; (800f780 <ProcessRadioRxDone+0x38c>)
 800f418:	8952      	ldrh	r2, [r2, #10]
 800f41a:	801a      	strh	r2, [r3, #0]
    int8_t snr = RxDoneParams.Snr;
 800f41c:	2577      	movs	r5, #119	; 0x77
 800f41e:	197b      	adds	r3, r7, r5
 800f420:	4ad7      	ldr	r2, [pc, #860]	; (800f780 <ProcessRadioRxDone+0x38c>)
 800f422:	7b12      	ldrb	r2, [r2, #12]
 800f424:	701a      	strb	r2, [r3, #0]

    uint8_t pktHeaderLen = 0;
 800f426:	2376      	movs	r3, #118	; 0x76
 800f428:	18fb      	adds	r3, r7, r3
 800f42a:	2200      	movs	r2, #0
 800f42c:	701a      	strb	r2, [r3, #0]

    uint32_t downLinkCounter = 0;
 800f42e:	2300      	movs	r3, #0
 800f430:	607b      	str	r3, [r7, #4]
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 800f432:	4bd4      	ldr	r3, [pc, #848]	; (800f784 <ProcessRadioRxDone+0x390>)
 800f434:	4ad4      	ldr	r2, [pc, #848]	; (800f788 <ProcessRadioRxDone+0x394>)
 800f436:	589b      	ldr	r3, [r3, r2]
 800f438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f43a:	2284      	movs	r2, #132	; 0x84
 800f43c:	18ba      	adds	r2, r7, r2
 800f43e:	6013      	str	r3, [r2, #0]
    uint8_t multicast = 0;
 800f440:	2383      	movs	r3, #131	; 0x83
 800f442:	18fb      	adds	r3, r7, r3
 800f444:	2200      	movs	r2, #0
 800f446:	701a      	strb	r2, [r3, #0]
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800f448:	2382      	movs	r3, #130	; 0x82
 800f44a:	18fb      	adds	r3, r7, r3
 800f44c:	2201      	movs	r2, #1
 800f44e:	701a      	strb	r2, [r3, #0]
    FCntIdentifier_t fCntID;

    MacCtx.McpsConfirm.AckReceived = false;
 800f450:	4acc      	ldr	r2, [pc, #816]	; (800f784 <ProcessRadioRxDone+0x390>)
 800f452:	2388      	movs	r3, #136	; 0x88
 800f454:	00db      	lsls	r3, r3, #3
 800f456:	2100      	movs	r1, #0
 800f458:	54d1      	strb	r1, [r2, r3]
    MacCtx.McpsIndication.Rssi = rssi;
 800f45a:	4bca      	ldr	r3, [pc, #808]	; (800f784 <ProcessRadioRxDone+0x390>)
 800f45c:	193a      	adds	r2, r7, r4
 800f45e:	49cb      	ldr	r1, [pc, #812]	; (800f78c <ProcessRadioRxDone+0x398>)
 800f460:	8812      	ldrh	r2, [r2, #0]
 800f462:	525a      	strh	r2, [r3, r1]
    MacCtx.McpsIndication.Snr = snr;
 800f464:	4bc7      	ldr	r3, [pc, #796]	; (800f784 <ProcessRadioRxDone+0x390>)
 800f466:	197a      	adds	r2, r7, r5
 800f468:	49c9      	ldr	r1, [pc, #804]	; (800f790 <ProcessRadioRxDone+0x39c>)
 800f46a:	7812      	ldrb	r2, [r2, #0]
 800f46c:	545a      	strb	r2, [r3, r1]
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
 800f46e:	4ac5      	ldr	r2, [pc, #788]	; (800f784 <ProcessRadioRxDone+0x390>)
 800f470:	2390      	movs	r3, #144	; 0x90
 800f472:	00db      	lsls	r3, r3, #3
 800f474:	5cd1      	ldrb	r1, [r2, r3]
 800f476:	4bc3      	ldr	r3, [pc, #780]	; (800f784 <ProcessRadioRxDone+0x390>)
 800f478:	4ac6      	ldr	r2, [pc, #792]	; (800f794 <ProcessRadioRxDone+0x3a0>)
 800f47a:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Port = 0;
 800f47c:	4bc1      	ldr	r3, [pc, #772]	; (800f784 <ProcessRadioRxDone+0x390>)
 800f47e:	4ac6      	ldr	r2, [pc, #792]	; (800f798 <ProcessRadioRxDone+0x3a4>)
 800f480:	2100      	movs	r1, #0
 800f482:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Multicast = 0;
 800f484:	4bbf      	ldr	r3, [pc, #764]	; (800f784 <ProcessRadioRxDone+0x390>)
 800f486:	4ac5      	ldr	r2, [pc, #788]	; (800f79c <ProcessRadioRxDone+0x3a8>)
 800f488:	2100      	movs	r1, #0
 800f48a:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.FramePending = 0;
 800f48c:	4bbd      	ldr	r3, [pc, #756]	; (800f784 <ProcessRadioRxDone+0x390>)
 800f48e:	4ac4      	ldr	r2, [pc, #784]	; (800f7a0 <ProcessRadioRxDone+0x3ac>)
 800f490:	2100      	movs	r1, #0
 800f492:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Buffer = NULL;
 800f494:	4bbb      	ldr	r3, [pc, #748]	; (800f784 <ProcessRadioRxDone+0x390>)
 800f496:	4ac3      	ldr	r2, [pc, #780]	; (800f7a4 <ProcessRadioRxDone+0x3b0>)
 800f498:	2100      	movs	r1, #0
 800f49a:	5099      	str	r1, [r3, r2]
    MacCtx.McpsIndication.BufferSize = 0;
 800f49c:	4ab9      	ldr	r2, [pc, #740]	; (800f784 <ProcessRadioRxDone+0x390>)
 800f49e:	2385      	movs	r3, #133	; 0x85
 800f4a0:	00db      	lsls	r3, r3, #3
 800f4a2:	2100      	movs	r1, #0
 800f4a4:	54d1      	strb	r1, [r2, r3]
    MacCtx.McpsIndication.RxData = false;
 800f4a6:	4bb7      	ldr	r3, [pc, #732]	; (800f784 <ProcessRadioRxDone+0x390>)
 800f4a8:	4abf      	ldr	r2, [pc, #764]	; (800f7a8 <ProcessRadioRxDone+0x3b4>)
 800f4aa:	2100      	movs	r1, #0
 800f4ac:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.AckReceived = false;
 800f4ae:	4bb5      	ldr	r3, [pc, #724]	; (800f784 <ProcessRadioRxDone+0x390>)
 800f4b0:	4abe      	ldr	r2, [pc, #760]	; (800f7ac <ProcessRadioRxDone+0x3b8>)
 800f4b2:	2100      	movs	r1, #0
 800f4b4:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800f4b6:	4ab3      	ldr	r2, [pc, #716]	; (800f784 <ProcessRadioRxDone+0x390>)
 800f4b8:	2386      	movs	r3, #134	; 0x86
 800f4ba:	00db      	lsls	r3, r3, #3
 800f4bc:	2100      	movs	r1, #0
 800f4be:	50d1      	str	r1, [r2, r3]
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800f4c0:	4bb0      	ldr	r3, [pc, #704]	; (800f784 <ProcessRadioRxDone+0x390>)
 800f4c2:	4abb      	ldr	r2, [pc, #748]	; (800f7b0 <ProcessRadioRxDone+0x3bc>)
 800f4c4:	2100      	movs	r1, #0
 800f4c6:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.DevAddress = 0;
 800f4c8:	4bae      	ldr	r3, [pc, #696]	; (800f784 <ProcessRadioRxDone+0x390>)
 800f4ca:	4aba      	ldr	r2, [pc, #744]	; (800f7b4 <ProcessRadioRxDone+0x3c0>)
 800f4cc:	2100      	movs	r1, #0
 800f4ce:	5099      	str	r1, [r3, r2]
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800f4d0:	4aac      	ldr	r2, [pc, #688]	; (800f784 <ProcessRadioRxDone+0x390>)
 800f4d2:	2387      	movs	r3, #135	; 0x87
 800f4d4:	00db      	lsls	r3, r3, #3
 800f4d6:	2100      	movs	r1, #0
 800f4d8:	54d1      	strb	r1, [r2, r3]

    Radio.Sleep( );
 800f4da:	4bb7      	ldr	r3, [pc, #732]	; (800f7b8 <ProcessRadioRxDone+0x3c4>)
 800f4dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4de:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 800f4e0:	4bb6      	ldr	r3, [pc, #728]	; (800f7bc <ProcessRadioRxDone+0x3c8>)
 800f4e2:	0018      	movs	r0, r3
 800f4e4:	f00d fbe6 	bl	801ccb4 <UTIL_TIMER_Stop>

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800f4e8:	19bb      	adds	r3, r7, r6
 800f4ea:	881a      	ldrh	r2, [r3, #0]
 800f4ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f4ee:	0011      	movs	r1, r2
 800f4f0:	0018      	movs	r0, r3
 800f4f2:	f005 f9f1 	bl	80148d8 <LoRaMacClassBRxBeacon>
 800f4f6:	1e03      	subs	r3, r0, #0
 800f4f8:	d00c      	beq.n	800f514 <ProcessRadioRxDone+0x120>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800f4fa:	4ba2      	ldr	r3, [pc, #648]	; (800f784 <ProcessRadioRxDone+0x390>)
 800f4fc:	193a      	adds	r2, r7, r4
 800f4fe:	49b0      	ldr	r1, [pc, #704]	; (800f7c0 <ProcessRadioRxDone+0x3cc>)
 800f500:	8812      	ldrh	r2, [r2, #0]
 800f502:	525a      	strh	r2, [r3, r1]
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800f504:	4a9f      	ldr	r2, [pc, #636]	; (800f784 <ProcessRadioRxDone+0x390>)
 800f506:	1979      	adds	r1, r7, r5
 800f508:	238f      	movs	r3, #143	; 0x8f
 800f50a:	00db      	lsls	r3, r3, #3
 800f50c:	7809      	ldrb	r1, [r1, #0]
 800f50e:	54d1      	strb	r1, [r2, r3]
        return;
 800f510:	f000 fc9e 	bl	800fe50 <ProcessRadioRxDone+0xa5c>
    }
    // Check if we expect a ping or a multicast slot.
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800f514:	4b9b      	ldr	r3, [pc, #620]	; (800f784 <ProcessRadioRxDone+0x390>)
 800f516:	4a9c      	ldr	r2, [pc, #624]	; (800f788 <ProcessRadioRxDone+0x394>)
 800f518:	589b      	ldr	r3, [r3, r2]
 800f51a:	227c      	movs	r2, #124	; 0x7c
 800f51c:	5c9b      	ldrb	r3, [r3, r2]
 800f51e:	2b01      	cmp	r3, #1
 800f520:	d11c      	bne.n	800f55c <ProcessRadioRxDone+0x168>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800f522:	f005 f9eb 	bl	80148fc <LoRaMacClassBIsPingExpected>
 800f526:	1e03      	subs	r3, r0, #0
 800f528:	d00a      	beq.n	800f540 <ProcessRadioRxDone+0x14c>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f52a:	2000      	movs	r0, #0
 800f52c:	f005 f9a2 	bl	8014874 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800f530:	2000      	movs	r0, #0
 800f532:	f005 f9c1 	bl	80148b8 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800f536:	4b93      	ldr	r3, [pc, #588]	; (800f784 <ProcessRadioRxDone+0x390>)
 800f538:	4a96      	ldr	r2, [pc, #600]	; (800f794 <ProcessRadioRxDone+0x3a0>)
 800f53a:	2104      	movs	r1, #4
 800f53c:	5499      	strb	r1, [r3, r2]
 800f53e:	e00d      	b.n	800f55c <ProcessRadioRxDone+0x168>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800f540:	f005 f9e2 	bl	8014908 <LoRaMacClassBIsMulticastExpected>
 800f544:	1e03      	subs	r3, r0, #0
 800f546:	d009      	beq.n	800f55c <ProcessRadioRxDone+0x168>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f548:	2000      	movs	r0, #0
 800f54a:	f005 f99d 	bl	8014888 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800f54e:	2000      	movs	r0, #0
 800f550:	f005 f9ba 	bl	80148c8 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800f554:	4b8b      	ldr	r3, [pc, #556]	; (800f784 <ProcessRadioRxDone+0x390>)
 800f556:	4a8f      	ldr	r2, [pc, #572]	; (800f794 <ProcessRadioRxDone+0x3a0>)
 800f558:	2105      	movs	r1, #5
 800f55a:	5499      	strb	r1, [r3, r2]
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800f55c:	2276      	movs	r2, #118	; 0x76
 800f55e:	18bb      	adds	r3, r7, r2
 800f560:	781b      	ldrb	r3, [r3, #0]
 800f562:	18ba      	adds	r2, r7, r2
 800f564:	1c59      	adds	r1, r3, #1
 800f566:	7011      	strb	r1, [r2, #0]
 800f568:	001a      	movs	r2, r3
 800f56a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f56c:	189b      	adds	r3, r3, r2
 800f56e:	781a      	ldrb	r2, [r3, #0]
 800f570:	2174      	movs	r1, #116	; 0x74
 800f572:	187b      	adds	r3, r7, r1
 800f574:	701a      	strb	r2, [r3, #0]

    switch( macHdr.Bits.MType )
 800f576:	187b      	adds	r3, r7, r1
 800f578:	781b      	ldrb	r3, [r3, #0]
 800f57a:	061b      	lsls	r3, r3, #24
 800f57c:	0f5b      	lsrs	r3, r3, #29
 800f57e:	b2db      	uxtb	r3, r3
 800f580:	2b07      	cmp	r3, #7
 800f582:	d101      	bne.n	800f588 <ProcessRadioRxDone+0x194>
 800f584:	f000 fc0c 	bl	800fda0 <ProcessRadioRxDone+0x9ac>
 800f588:	dd01      	ble.n	800f58e <ProcessRadioRxDone+0x19a>
 800f58a:	f000 fc38 	bl	800fdfe <ProcessRadioRxDone+0xa0a>
 800f58e:	2b05      	cmp	r3, #5
 800f590:	d100      	bne.n	800f594 <ProcessRadioRxDone+0x1a0>
 800f592:	e119      	b.n	800f7c8 <ProcessRadioRxDone+0x3d4>
 800f594:	dd01      	ble.n	800f59a <ProcessRadioRxDone+0x1a6>
 800f596:	f000 fc32 	bl	800fdfe <ProcessRadioRxDone+0xa0a>
 800f59a:	2b01      	cmp	r3, #1
 800f59c:	d004      	beq.n	800f5a8 <ProcessRadioRxDone+0x1b4>
 800f59e:	2b03      	cmp	r3, #3
 800f5a0:	d100      	bne.n	800f5a4 <ProcessRadioRxDone+0x1b0>
 800f5a2:	e115      	b.n	800f7d0 <ProcessRadioRxDone+0x3dc>
 800f5a4:	f000 fc2b 	bl	800fdfe <ProcessRadioRxDone+0xa0a>
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800f5a8:	237a      	movs	r3, #122	; 0x7a
 800f5aa:	18fb      	adds	r3, r7, r3
 800f5ac:	881b      	ldrh	r3, [r3, #0]
 800f5ae:	2b10      	cmp	r3, #16
 800f5b0:	d807      	bhi.n	800f5c2 <ProcessRadioRxDone+0x1ce>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f5b2:	4b74      	ldr	r3, [pc, #464]	; (800f784 <ProcessRadioRxDone+0x390>)
 800f5b4:	4a83      	ldr	r2, [pc, #524]	; (800f7c4 <ProcessRadioRxDone+0x3d0>)
 800f5b6:	2101      	movs	r1, #1
 800f5b8:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800f5ba:	f7ff feef 	bl	800f39c <PrepareRxDoneAbort>
                return;
 800f5be:	f000 fc47 	bl	800fe50 <ProcessRadioRxDone+0xa5c>
            }
            macMsgJoinAccept.Buffer = payload;
 800f5c2:	2108      	movs	r1, #8
 800f5c4:	187b      	adds	r3, r7, r1
 800f5c6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f5c8:	601a      	str	r2, [r3, #0]
            macMsgJoinAccept.BufSize = size;
 800f5ca:	237a      	movs	r3, #122	; 0x7a
 800f5cc:	18fb      	adds	r3, r7, r3
 800f5ce:	881b      	ldrh	r3, [r3, #0]
 800f5d0:	b2da      	uxtb	r2, r3
 800f5d2:	187b      	adds	r3, r7, r1
 800f5d4:	711a      	strb	r2, [r3, #4]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 800f5d6:	4b6b      	ldr	r3, [pc, #428]	; (800f784 <ProcessRadioRxDone+0x390>)
 800f5d8:	4a6b      	ldr	r2, [pc, #428]	; (800f788 <ProcessRadioRxDone+0x394>)
 800f5da:	589a      	ldr	r2, [r3, r2]
 800f5dc:	23b2      	movs	r3, #178	; 0xb2
 800f5de:	005b      	lsls	r3, r3, #1
 800f5e0:	5cd3      	ldrb	r3, [r2, r3]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d007      	beq.n	800f5f6 <ProcessRadioRxDone+0x202>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f5e6:	4b67      	ldr	r3, [pc, #412]	; (800f784 <ProcessRadioRxDone+0x390>)
 800f5e8:	4a76      	ldr	r2, [pc, #472]	; (800f7c4 <ProcessRadioRxDone+0x3d0>)
 800f5ea:	2101      	movs	r1, #1
 800f5ec:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800f5ee:	f7ff fed5 	bl	800f39c <PrepareRxDoneAbort>
                return;
 800f5f2:	f000 fc2d 	bl	800fe50 <ProcessRadioRxDone+0xa5c>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800f5f6:	f7fe fba3 	bl	800dd40 <SecureElementGetJoinEui>
 800f5fa:	0001      	movs	r1, r0
 800f5fc:	2680      	movs	r6, #128	; 0x80
 800f5fe:	19bc      	adds	r4, r7, r6
 800f600:	2508      	movs	r5, #8
 800f602:	197b      	adds	r3, r7, r5
 800f604:	001a      	movs	r2, r3
 800f606:	20ff      	movs	r0, #255	; 0xff
 800f608:	f006 fcba 	bl	8015f80 <LoRaMacCryptoHandleJoinAccept>
 800f60c:	0003      	movs	r3, r0
 800f60e:	7023      	strb	r3, [r4, #0]

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800f610:	19bb      	adds	r3, r7, r6
 800f612:	781b      	ldrb	r3, [r3, #0]
 800f614:	2b00      	cmp	r3, #0
 800f616:	d000      	beq.n	800f61a <ProcessRadioRxDone+0x226>
 800f618:	e0a7      	b.n	800f76a <ProcessRadioRxDone+0x376>
            {
                // Network ID
                MacCtx.NvmCtx->NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800f61a:	002c      	movs	r4, r5
 800f61c:	193b      	adds	r3, r7, r4
 800f61e:	7a59      	ldrb	r1, [r3, #9]
 800f620:	4b58      	ldr	r3, [pc, #352]	; (800f784 <ProcessRadioRxDone+0x390>)
 800f622:	4a59      	ldr	r2, [pc, #356]	; (800f788 <ProcessRadioRxDone+0x394>)
 800f624:	589b      	ldr	r3, [r3, r2]
 800f626:	000a      	movs	r2, r1
 800f628:	649a      	str	r2, [r3, #72]	; 0x48
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800f62a:	4b56      	ldr	r3, [pc, #344]	; (800f784 <ProcessRadioRxDone+0x390>)
 800f62c:	4a56      	ldr	r2, [pc, #344]	; (800f788 <ProcessRadioRxDone+0x394>)
 800f62e:	589b      	ldr	r3, [r3, r2]
 800f630:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800f632:	193b      	adds	r3, r7, r4
 800f634:	7a9b      	ldrb	r3, [r3, #10]
 800f636:	021a      	lsls	r2, r3, #8
 800f638:	4b52      	ldr	r3, [pc, #328]	; (800f784 <ProcessRadioRxDone+0x390>)
 800f63a:	4853      	ldr	r0, [pc, #332]	; (800f788 <ProcessRadioRxDone+0x394>)
 800f63c:	581b      	ldr	r3, [r3, r0]
 800f63e:	430a      	orrs	r2, r1
 800f640:	649a      	str	r2, [r3, #72]	; 0x48
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800f642:	4b50      	ldr	r3, [pc, #320]	; (800f784 <ProcessRadioRxDone+0x390>)
 800f644:	4a50      	ldr	r2, [pc, #320]	; (800f788 <ProcessRadioRxDone+0x394>)
 800f646:	589b      	ldr	r3, [r3, r2]
 800f648:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800f64a:	193b      	adds	r3, r7, r4
 800f64c:	7adb      	ldrb	r3, [r3, #11]
 800f64e:	041a      	lsls	r2, r3, #16
 800f650:	4b4c      	ldr	r3, [pc, #304]	; (800f784 <ProcessRadioRxDone+0x390>)
 800f652:	484d      	ldr	r0, [pc, #308]	; (800f788 <ProcessRadioRxDone+0x394>)
 800f654:	581b      	ldr	r3, [r3, r0]
 800f656:	430a      	orrs	r2, r1
 800f658:	649a      	str	r2, [r3, #72]	; 0x48

                // Device Address
                MacCtx.NvmCtx->DevAddr = macMsgJoinAccept.DevAddr;
 800f65a:	4b4a      	ldr	r3, [pc, #296]	; (800f784 <ProcessRadioRxDone+0x390>)
 800f65c:	4a4a      	ldr	r2, [pc, #296]	; (800f788 <ProcessRadioRxDone+0x394>)
 800f65e:	589b      	ldr	r3, [r3, r2]
 800f660:	0020      	movs	r0, r4
 800f662:	183a      	adds	r2, r7, r0
 800f664:	68d2      	ldr	r2, [r2, #12]
 800f666:	64da      	str	r2, [r3, #76]	; 0x4c

                // DLSettings
                MacCtx.NvmCtx->MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800f668:	183b      	adds	r3, r7, r0
 800f66a:	7c1b      	ldrb	r3, [r3, #16]
 800f66c:	065b      	lsls	r3, r3, #25
 800f66e:	0f5b      	lsrs	r3, r3, #29
 800f670:	b2d9      	uxtb	r1, r3
 800f672:	4b44      	ldr	r3, [pc, #272]	; (800f784 <ProcessRadioRxDone+0x390>)
 800f674:	4a44      	ldr	r2, [pc, #272]	; (800f788 <ProcessRadioRxDone+0x394>)
 800f676:	589b      	ldr	r3, [r3, r2]
 800f678:	22a5      	movs	r2, #165	; 0xa5
 800f67a:	5499      	strb	r1, [r3, r2]
                MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800f67c:	183b      	adds	r3, r7, r0
 800f67e:	7c1b      	ldrb	r3, [r3, #16]
 800f680:	071b      	lsls	r3, r3, #28
 800f682:	0f1b      	lsrs	r3, r3, #28
 800f684:	b2d9      	uxtb	r1, r3
 800f686:	4b3f      	ldr	r3, [pc, #252]	; (800f784 <ProcessRadioRxDone+0x390>)
 800f688:	4a3f      	ldr	r2, [pc, #252]	; (800f788 <ProcessRadioRxDone+0x394>)
 800f68a:	589b      	ldr	r3, [r3, r2]
 800f68c:	22ac      	movs	r2, #172	; 0xac
 800f68e:	5499      	strb	r1, [r3, r2]
                MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800f690:	183b      	adds	r3, r7, r0
 800f692:	7c1b      	ldrb	r3, [r3, #16]
 800f694:	071b      	lsls	r3, r3, #28
 800f696:	0f1b      	lsrs	r3, r3, #28
 800f698:	b2d9      	uxtb	r1, r3
 800f69a:	4b3a      	ldr	r3, [pc, #232]	; (800f784 <ProcessRadioRxDone+0x390>)
 800f69c:	4a3a      	ldr	r2, [pc, #232]	; (800f788 <ProcessRadioRxDone+0x394>)
 800f69e:	589b      	ldr	r3, [r3, r2]
 800f6a0:	22b4      	movs	r2, #180	; 0xb4
 800f6a2:	5499      	strb	r1, [r3, r2]

                // RxDelay
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800f6a4:	183b      	adds	r3, r7, r0
 800f6a6:	7c59      	ldrb	r1, [r3, #17]
 800f6a8:	4b36      	ldr	r3, [pc, #216]	; (800f784 <ProcessRadioRxDone+0x390>)
 800f6aa:	4a37      	ldr	r2, [pc, #220]	; (800f788 <ProcessRadioRxDone+0x394>)
 800f6ac:	589b      	ldr	r3, [r3, r2]
 800f6ae:	2294      	movs	r2, #148	; 0x94
 800f6b0:	5099      	str	r1, [r3, r2]
                if( MacCtx.NvmCtx->MacParams.ReceiveDelay1 == 0 )
 800f6b2:	4b34      	ldr	r3, [pc, #208]	; (800f784 <ProcessRadioRxDone+0x390>)
 800f6b4:	4a34      	ldr	r2, [pc, #208]	; (800f788 <ProcessRadioRxDone+0x394>)
 800f6b6:	589b      	ldr	r3, [r3, r2]
 800f6b8:	2294      	movs	r2, #148	; 0x94
 800f6ba:	589b      	ldr	r3, [r3, r2]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d105      	bne.n	800f6cc <ProcessRadioRxDone+0x2d8>
                {
                    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = 1;
 800f6c0:	4b30      	ldr	r3, [pc, #192]	; (800f784 <ProcessRadioRxDone+0x390>)
 800f6c2:	4a31      	ldr	r2, [pc, #196]	; (800f788 <ProcessRadioRxDone+0x394>)
 800f6c4:	589b      	ldr	r3, [r3, r2]
 800f6c6:	2294      	movs	r2, #148	; 0x94
 800f6c8:	2101      	movs	r1, #1
 800f6ca:	5099      	str	r1, [r3, r2]
                }
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 *= 1000;
 800f6cc:	4b2d      	ldr	r3, [pc, #180]	; (800f784 <ProcessRadioRxDone+0x390>)
 800f6ce:	4a2e      	ldr	r2, [pc, #184]	; (800f788 <ProcessRadioRxDone+0x394>)
 800f6d0:	589b      	ldr	r3, [r3, r2]
 800f6d2:	2294      	movs	r2, #148	; 0x94
 800f6d4:	589a      	ldr	r2, [r3, r2]
 800f6d6:	4b2b      	ldr	r3, [pc, #172]	; (800f784 <ProcessRadioRxDone+0x390>)
 800f6d8:	492b      	ldr	r1, [pc, #172]	; (800f788 <ProcessRadioRxDone+0x394>)
 800f6da:	5859      	ldr	r1, [r3, r1]
 800f6dc:	0013      	movs	r3, r2
 800f6de:	015b      	lsls	r3, r3, #5
 800f6e0:	1a9b      	subs	r3, r3, r2
 800f6e2:	009b      	lsls	r3, r3, #2
 800f6e4:	189b      	adds	r3, r3, r2
 800f6e6:	00db      	lsls	r3, r3, #3
 800f6e8:	001a      	movs	r2, r3
 800f6ea:	2394      	movs	r3, #148	; 0x94
 800f6ec:	50ca      	str	r2, [r1, r3]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 800f6ee:	4b25      	ldr	r3, [pc, #148]	; (800f784 <ProcessRadioRxDone+0x390>)
 800f6f0:	4a25      	ldr	r2, [pc, #148]	; (800f788 <ProcessRadioRxDone+0x394>)
 800f6f2:	589b      	ldr	r3, [r3, r2]
 800f6f4:	2294      	movs	r2, #148	; 0x94
 800f6f6:	589b      	ldr	r3, [r3, r2]
 800f6f8:	4a22      	ldr	r2, [pc, #136]	; (800f784 <ProcessRadioRxDone+0x390>)
 800f6fa:	4923      	ldr	r1, [pc, #140]	; (800f788 <ProcessRadioRxDone+0x394>)
 800f6fc:	5852      	ldr	r2, [r2, r1]
 800f6fe:	21fa      	movs	r1, #250	; 0xfa
 800f700:	0089      	lsls	r1, r1, #2
 800f702:	468c      	mov	ip, r1
 800f704:	4463      	add	r3, ip
 800f706:	2198      	movs	r1, #152	; 0x98
 800f708:	5053      	str	r3, [r2, r1]

                MacCtx.NvmCtx->Version.Fields.Minor = 0;
 800f70a:	4b1e      	ldr	r3, [pc, #120]	; (800f784 <ProcessRadioRxDone+0x390>)
 800f70c:	4a1e      	ldr	r2, [pc, #120]	; (800f788 <ProcessRadioRxDone+0x394>)
 800f70e:	589a      	ldr	r2, [r3, r2]
 800f710:	23b1      	movs	r3, #177	; 0xb1
 800f712:	005b      	lsls	r3, r3, #1
 800f714:	2100      	movs	r1, #0
 800f716:	54d1      	strb	r1, [r2, r3]

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800f718:	216c      	movs	r1, #108	; 0x6c
 800f71a:	187b      	adds	r3, r7, r1
 800f71c:	2208      	movs	r2, #8
 800f71e:	18ba      	adds	r2, r7, r2
 800f720:	3212      	adds	r2, #18
 800f722:	601a      	str	r2, [r3, #0]
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800f724:	237a      	movs	r3, #122	; 0x7a
 800f726:	18fb      	adds	r3, r7, r3
 800f728:	881b      	ldrh	r3, [r3, #0]
 800f72a:	b2db      	uxtb	r3, r3
 800f72c:	3b11      	subs	r3, #17
 800f72e:	b2da      	uxtb	r2, r3
 800f730:	187b      	adds	r3, r7, r1
 800f732:	711a      	strb	r2, [r3, #4]

                RegionApplyCFList( MacCtx.NvmCtx->Region, &applyCFList );
 800f734:	4b13      	ldr	r3, [pc, #76]	; (800f784 <ProcessRadioRxDone+0x390>)
 800f736:	4a14      	ldr	r2, [pc, #80]	; (800f788 <ProcessRadioRxDone+0x394>)
 800f738:	589b      	ldr	r3, [r3, r2]
 800f73a:	781b      	ldrb	r3, [r3, #0]
 800f73c:	187a      	adds	r2, r7, r1
 800f73e:	0011      	movs	r1, r2
 800f740:	0018      	movs	r0, r3
 800f742:	f007 faf4 	bl	8016d2e <RegionApplyCFList>

                MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_OTAA;
 800f746:	4b0f      	ldr	r3, [pc, #60]	; (800f784 <ProcessRadioRxDone+0x390>)
 800f748:	4a0f      	ldr	r2, [pc, #60]	; (800f788 <ProcessRadioRxDone+0x394>)
 800f74a:	589a      	ldr	r2, [r3, r2]
 800f74c:	23b2      	movs	r3, #178	; 0xb2
 800f74e:	005b      	lsls	r3, r3, #1
 800f750:	2102      	movs	r1, #2
 800f752:	54d1      	strb	r1, [r2, r3]

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800f754:	2001      	movs	r0, #1
 800f756:	f005 fe49 	bl	80153ec <LoRaMacConfirmQueueIsCmdActive>
 800f75a:	1e03      	subs	r3, r0, #0
 800f75c:	d100      	bne.n	800f760 <ProcessRadioRxDone+0x36c>
 800f75e:	e355      	b.n	800fe0c <ProcessRadioRxDone+0xa18>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800f760:	2101      	movs	r1, #1
 800f762:	2000      	movs	r0, #0
 800f764:	f005 fda6 	bl	80152b4 <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
                }
            }
            break;
 800f768:	e350      	b.n	800fe0c <ProcessRadioRxDone+0xa18>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800f76a:	2001      	movs	r0, #1
 800f76c:	f005 fe3e 	bl	80153ec <LoRaMacConfirmQueueIsCmdActive>
 800f770:	1e03      	subs	r3, r0, #0
 800f772:	d100      	bne.n	800f776 <ProcessRadioRxDone+0x382>
 800f774:	e34a      	b.n	800fe0c <ProcessRadioRxDone+0xa18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800f776:	2101      	movs	r1, #1
 800f778:	2007      	movs	r0, #7
 800f77a:	f005 fd9b 	bl	80152b4 <LoRaMacConfirmQueueSetStatus>
            break;
 800f77e:	e345      	b.n	800fe0c <ProcessRadioRxDone+0xa18>
 800f780:	200016e4 	.word	0x200016e4
 800f784:	200005b4 	.word	0x200005b4
 800f788:	00000484 	.word	0x00000484
 800f78c:	0000042a 	.word	0x0000042a
 800f790:	0000042c 	.word	0x0000042c
 800f794:	0000042d 	.word	0x0000042d
 800f798:	0000041f 	.word	0x0000041f
 800f79c:	0000041e 	.word	0x0000041e
 800f7a0:	00000421 	.word	0x00000421
 800f7a4:	00000424 	.word	0x00000424
 800f7a8:	00000429 	.word	0x00000429
 800f7ac:	0000042e 	.word	0x0000042e
 800f7b0:	0000041c 	.word	0x0000041c
 800f7b4:	00000434 	.word	0x00000434
 800f7b8:	0801fb64 	.word	0x0801fb64
 800f7bc:	2000094c 	.word	0x2000094c
 800f7c0:	00000476 	.word	0x00000476
 800f7c4:	0000041d 	.word	0x0000041d
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800f7c8:	4bd5      	ldr	r3, [pc, #852]	; (800fb20 <ProcessRadioRxDone+0x72c>)
 800f7ca:	4ad6      	ldr	r2, [pc, #856]	; (800fb24 <ProcessRadioRxDone+0x730>)
 800f7cc:	2101      	movs	r1, #1
 800f7ce:	5499      	strb	r1, [r3, r2]
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800f7d0:	4bd3      	ldr	r3, [pc, #844]	; (800fb20 <ProcessRadioRxDone+0x72c>)
 800f7d2:	4ad5      	ldr	r2, [pc, #852]	; (800fb28 <ProcessRadioRxDone+0x734>)
 800f7d4:	589b      	ldr	r3, [r3, r2]
 800f7d6:	22b9      	movs	r2, #185	; 0xb9
 800f7d8:	5c9a      	ldrb	r2, [r3, r2]
 800f7da:	2164      	movs	r1, #100	; 0x64
 800f7dc:	187b      	adds	r3, r7, r1
 800f7de:	709a      	strb	r2, [r3, #2]
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800f7e0:	4acf      	ldr	r2, [pc, #828]	; (800fb20 <ProcessRadioRxDone+0x72c>)
 800f7e2:	2384      	movs	r3, #132	; 0x84
 800f7e4:	00db      	lsls	r3, r3, #3
 800f7e6:	5cd3      	ldrb	r3, [r2, r3]
 800f7e8:	b25a      	sxtb	r2, r3
 800f7ea:	187b      	adds	r3, r7, r1
 800f7ec:	705a      	strb	r2, [r3, #1]
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800f7ee:	187b      	adds	r3, r7, r1
 800f7f0:	220d      	movs	r2, #13
 800f7f2:	701a      	strb	r2, [r3, #0]

            // Get the maximum payload length
            if( MacCtx.NvmCtx->RepeaterSupport == true )
 800f7f4:	4bca      	ldr	r3, [pc, #808]	; (800fb20 <ProcessRadioRxDone+0x72c>)
 800f7f6:	4acc      	ldr	r2, [pc, #816]	; (800fb28 <ProcessRadioRxDone+0x734>)
 800f7f8:	589b      	ldr	r3, [r3, r2]
 800f7fa:	22ca      	movs	r2, #202	; 0xca
 800f7fc:	5c9b      	ldrb	r3, [r3, r2]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d002      	beq.n	800f808 <ProcessRadioRxDone+0x414>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800f802:	187b      	adds	r3, r7, r1
 800f804:	220e      	movs	r2, #14
 800f806:	701a      	strb	r2, [r3, #0]
            }

            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800f808:	4bc5      	ldr	r3, [pc, #788]	; (800fb20 <ProcessRadioRxDone+0x72c>)
 800f80a:	4ac7      	ldr	r2, [pc, #796]	; (800fb28 <ProcessRadioRxDone+0x734>)
 800f80c:	589b      	ldr	r3, [r3, r2]
 800f80e:	781b      	ldrb	r3, [r3, #0]
 800f810:	2264      	movs	r2, #100	; 0x64
 800f812:	18ba      	adds	r2, r7, r2
 800f814:	0011      	movs	r1, r2
 800f816:	0018      	movs	r0, r3
 800f818:	f007 fa05 	bl	8016c26 <RegionGetPhyParam>
 800f81c:	0003      	movs	r3, r0
 800f81e:	001a      	movs	r2, r3
 800f820:	2360      	movs	r3, #96	; 0x60
 800f822:	18fb      	adds	r3, r7, r3
 800f824:	601a      	str	r2, [r3, #0]
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800f826:	237a      	movs	r3, #122	; 0x7a
 800f828:	18fb      	adds	r3, r7, r3
 800f82a:	881b      	ldrh	r3, [r3, #0]
 800f82c:	3b0d      	subs	r3, #13
 800f82e:	b29b      	uxth	r3, r3
 800f830:	b21b      	sxth	r3, r3
 800f832:	1c1a      	adds	r2, r3, #0
 800f834:	b213      	sxth	r3, r2
 800f836:	2b00      	cmp	r3, #0
 800f838:	da01      	bge.n	800f83e <ProcessRadioRxDone+0x44a>
 800f83a:	2300      	movs	r3, #0
 800f83c:	1c1a      	adds	r2, r3, #0
 800f83e:	b212      	sxth	r2, r2
 800f840:	2360      	movs	r3, #96	; 0x60
 800f842:	18fb      	adds	r3, r7, r3
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	b21b      	sxth	r3, r3
 800f848:	429a      	cmp	r2, r3
 800f84a:	dc04      	bgt.n	800f856 <ProcessRadioRxDone+0x462>
 800f84c:	237a      	movs	r3, #122	; 0x7a
 800f84e:	18fb      	adds	r3, r7, r3
 800f850:	881b      	ldrh	r3, [r3, #0]
 800f852:	2b0b      	cmp	r3, #11
 800f854:	d806      	bhi.n	800f864 <ProcessRadioRxDone+0x470>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f856:	4bb2      	ldr	r3, [pc, #712]	; (800fb20 <ProcessRadioRxDone+0x72c>)
 800f858:	4ab4      	ldr	r2, [pc, #720]	; (800fb2c <ProcessRadioRxDone+0x738>)
 800f85a:	2101      	movs	r1, #1
 800f85c:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800f85e:	f7ff fd9d 	bl	800f39c <PrepareRxDoneAbort>
                return;
 800f862:	e2f5      	b.n	800fe50 <ProcessRadioRxDone+0xa5c>
            }
            macMsgData.Buffer = payload;
 800f864:	2130      	movs	r1, #48	; 0x30
 800f866:	187b      	adds	r3, r7, r1
 800f868:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f86a:	601a      	str	r2, [r3, #0]
            macMsgData.BufSize = size;
 800f86c:	237a      	movs	r3, #122	; 0x7a
 800f86e:	18fb      	adds	r3, r7, r3
 800f870:	881b      	ldrh	r3, [r3, #0]
 800f872:	b2da      	uxtb	r2, r3
 800f874:	187b      	adds	r3, r7, r1
 800f876:	711a      	strb	r2, [r3, #4]
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800f878:	187b      	adds	r3, r7, r1
 800f87a:	4aad      	ldr	r2, [pc, #692]	; (800fb30 <ProcessRadioRxDone+0x73c>)
 800f87c:	625a      	str	r2, [r3, #36]	; 0x24
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800f87e:	0008      	movs	r0, r1
 800f880:	187b      	adds	r3, r7, r1
 800f882:	2228      	movs	r2, #40	; 0x28
 800f884:	21ff      	movs	r1, #255	; 0xff
 800f886:	5499      	strb	r1, [r3, r2]

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800f888:	183b      	adds	r3, r7, r0
 800f88a:	0018      	movs	r0, r3
 800f88c:	f006 fee4 	bl	8016658 <LoRaMacParserData>
 800f890:	1e03      	subs	r3, r0, #0
 800f892:	d006      	beq.n	800f8a2 <ProcessRadioRxDone+0x4ae>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f894:	4ba2      	ldr	r3, [pc, #648]	; (800fb20 <ProcessRadioRxDone+0x72c>)
 800f896:	4aa5      	ldr	r2, [pc, #660]	; (800fb2c <ProcessRadioRxDone+0x738>)
 800f898:	2101      	movs	r1, #1
 800f89a:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800f89c:	f7ff fd7e 	bl	800f39c <PrepareRxDoneAbort>
                return;
 800f8a0:	e2d6      	b.n	800fe50 <ProcessRadioRxDone+0xa5c>
            }

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800f8a2:	2030      	movs	r0, #48	; 0x30
 800f8a4:	183b      	adds	r3, r7, r0
 800f8a6:	689a      	ldr	r2, [r3, #8]
 800f8a8:	4b9d      	ldr	r3, [pc, #628]	; (800fb20 <ProcessRadioRxDone+0x72c>)
 800f8aa:	49a2      	ldr	r1, [pc, #648]	; (800fb34 <ProcessRadioRxDone+0x740>)
 800f8ac:	505a      	str	r2, [r3, r1]

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800f8ae:	1cba      	adds	r2, r7, #2
 800f8b0:	183b      	adds	r3, r7, r0
 800f8b2:	0011      	movs	r1, r2
 800f8b4:	0018      	movs	r0, r3
 800f8b6:	f003 f861 	bl	801297c <DetermineFrameType>
 800f8ba:	1e03      	subs	r3, r0, #0
 800f8bc:	d006      	beq.n	800f8cc <ProcessRadioRxDone+0x4d8>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f8be:	4b98      	ldr	r3, [pc, #608]	; (800fb20 <ProcessRadioRxDone+0x72c>)
 800f8c0:	4a9a      	ldr	r2, [pc, #616]	; (800fb2c <ProcessRadioRxDone+0x738>)
 800f8c2:	2101      	movs	r1, #1
 800f8c4:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800f8c6:	f7ff fd69 	bl	800f39c <PrepareRxDoneAbort>
                return;
 800f8ca:	e2c1      	b.n	800fe50 <ProcessRadioRxDone+0xa5c>
            }

            //Check if it is a multicast message
            multicast = 0;
 800f8cc:	2383      	movs	r3, #131	; 0x83
 800f8ce:	18fb      	adds	r3, r7, r3
 800f8d0:	2200      	movs	r2, #0
 800f8d2:	701a      	strb	r2, [r3, #0]
            downLinkCounter = 0;
 800f8d4:	2300      	movs	r3, #0
 800f8d6:	607b      	str	r3, [r7, #4]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f8d8:	2381      	movs	r3, #129	; 0x81
 800f8da:	18fb      	adds	r3, r7, r3
 800f8dc:	2200      	movs	r2, #0
 800f8de:	701a      	strb	r2, [r3, #0]
 800f8e0:	e05b      	b.n	800f99a <ProcessRadioRxDone+0x5a6>
            {
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800f8e2:	4b8f      	ldr	r3, [pc, #572]	; (800fb20 <ProcessRadioRxDone+0x72c>)
 800f8e4:	4a90      	ldr	r2, [pc, #576]	; (800fb28 <ProcessRadioRxDone+0x734>)
 800f8e6:	589a      	ldr	r2, [r3, r2]
 800f8e8:	2481      	movs	r4, #129	; 0x81
 800f8ea:	193b      	adds	r3, r7, r4
 800f8ec:	781b      	ldrb	r3, [r3, #0]
 800f8ee:	212c      	movs	r1, #44	; 0x2c
 800f8f0:	434b      	muls	r3, r1
 800f8f2:	18d3      	adds	r3, r2, r3
 800f8f4:	3354      	adds	r3, #84	; 0x54
 800f8f6:	681a      	ldr	r2, [r3, #0]
 800f8f8:	2330      	movs	r3, #48	; 0x30
 800f8fa:	18fb      	adds	r3, r7, r3
 800f8fc:	689b      	ldr	r3, [r3, #8]
 800f8fe:	429a      	cmp	r2, r3
 800f900:	d145      	bne.n	800f98e <ProcessRadioRxDone+0x59a>
                    ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800f902:	4b87      	ldr	r3, [pc, #540]	; (800fb20 <ProcessRadioRxDone+0x72c>)
 800f904:	4a88      	ldr	r2, [pc, #544]	; (800fb28 <ProcessRadioRxDone+0x734>)
 800f906:	589a      	ldr	r2, [r3, r2]
 800f908:	193b      	adds	r3, r7, r4
 800f90a:	781b      	ldrb	r3, [r3, #0]
 800f90c:	2152      	movs	r1, #82	; 0x52
 800f90e:	202c      	movs	r0, #44	; 0x2c
 800f910:	4343      	muls	r3, r0
 800f912:	18d3      	adds	r3, r2, r3
 800f914:	185b      	adds	r3, r3, r1
 800f916:	781b      	ldrb	r3, [r3, #0]
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d038      	beq.n	800f98e <ProcessRadioRxDone+0x59a>
                {
                    multicast = 1;
 800f91c:	2383      	movs	r3, #131	; 0x83
 800f91e:	18fb      	adds	r3, r7, r3
 800f920:	2201      	movs	r2, #1
 800f922:	701a      	strb	r2, [r3, #0]
                    addrID = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.GroupID;
 800f924:	4b7e      	ldr	r3, [pc, #504]	; (800fb20 <ProcessRadioRxDone+0x72c>)
 800f926:	4a80      	ldr	r2, [pc, #512]	; (800fb28 <ProcessRadioRxDone+0x734>)
 800f928:	5899      	ldr	r1, [r3, r2]
 800f92a:	0025      	movs	r5, r4
 800f92c:	193b      	adds	r3, r7, r4
 800f92e:	781a      	ldrb	r2, [r3, #0]
 800f930:	2382      	movs	r3, #130	; 0x82
 800f932:	18fb      	adds	r3, r7, r3
 800f934:	2053      	movs	r0, #83	; 0x53
 800f936:	242c      	movs	r4, #44	; 0x2c
 800f938:	4362      	muls	r2, r4
 800f93a:	188a      	adds	r2, r1, r2
 800f93c:	1812      	adds	r2, r2, r0
 800f93e:	7812      	ldrb	r2, [r2, #0]
 800f940:	701a      	strb	r2, [r3, #0]
                    downLinkCounter = *( MacCtx.NvmCtx->MulticastChannelList[i].DownLinkCounter );
 800f942:	4b77      	ldr	r3, [pc, #476]	; (800fb20 <ProcessRadioRxDone+0x72c>)
 800f944:	4a78      	ldr	r2, [pc, #480]	; (800fb28 <ProcessRadioRxDone+0x734>)
 800f946:	589a      	ldr	r2, [r3, r2]
 800f948:	002c      	movs	r4, r5
 800f94a:	193b      	adds	r3, r7, r4
 800f94c:	781b      	ldrb	r3, [r3, #0]
 800f94e:	212c      	movs	r1, #44	; 0x2c
 800f950:	434b      	muls	r3, r1
 800f952:	18d3      	adds	r3, r2, r3
 800f954:	3370      	adds	r3, #112	; 0x70
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	607b      	str	r3, [r7, #4]
                    address = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address;
 800f95c:	4b70      	ldr	r3, [pc, #448]	; (800fb20 <ProcessRadioRxDone+0x72c>)
 800f95e:	4a72      	ldr	r2, [pc, #456]	; (800fb28 <ProcessRadioRxDone+0x734>)
 800f960:	589a      	ldr	r2, [r3, r2]
 800f962:	193b      	adds	r3, r7, r4
 800f964:	781b      	ldrb	r3, [r3, #0]
 800f966:	212c      	movs	r1, #44	; 0x2c
 800f968:	434b      	muls	r3, r1
 800f96a:	18d3      	adds	r3, r2, r3
 800f96c:	3354      	adds	r3, #84	; 0x54
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	2284      	movs	r2, #132	; 0x84
 800f972:	18ba      	adds	r2, r7, r2
 800f974:	6013      	str	r3, [r2, #0]
                    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800f976:	4b6a      	ldr	r3, [pc, #424]	; (800fb20 <ProcessRadioRxDone+0x72c>)
 800f978:	4a6b      	ldr	r2, [pc, #428]	; (800fb28 <ProcessRadioRxDone+0x734>)
 800f97a:	589b      	ldr	r3, [r3, r2]
 800f97c:	227c      	movs	r2, #124	; 0x7c
 800f97e:	5c9b      	ldrb	r3, [r3, r2]
 800f980:	2b02      	cmp	r3, #2
 800f982:	d110      	bne.n	800f9a6 <ProcessRadioRxDone+0x5b2>
                    {
                        MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800f984:	4b66      	ldr	r3, [pc, #408]	; (800fb20 <ProcessRadioRxDone+0x72c>)
 800f986:	4a6c      	ldr	r2, [pc, #432]	; (800fb38 <ProcessRadioRxDone+0x744>)
 800f988:	2103      	movs	r1, #3
 800f98a:	5499      	strb	r1, [r3, r2]
                    }
                    break;
 800f98c:	e00b      	b.n	800f9a6 <ProcessRadioRxDone+0x5b2>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f98e:	2181      	movs	r1, #129	; 0x81
 800f990:	187b      	adds	r3, r7, r1
 800f992:	781a      	ldrb	r2, [r3, #0]
 800f994:	187b      	adds	r3, r7, r1
 800f996:	3201      	adds	r2, #1
 800f998:	701a      	strb	r2, [r3, #0]
 800f99a:	2381      	movs	r3, #129	; 0x81
 800f99c:	18fb      	adds	r3, r7, r3
 800f99e:	781b      	ldrb	r3, [r3, #0]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d09e      	beq.n	800f8e2 <ProcessRadioRxDone+0x4ee>
 800f9a4:	e000      	b.n	800f9a8 <ProcessRadioRxDone+0x5b4>
                    break;
 800f9a6:	46c0      	nop			; (mov r8, r8)
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800f9a8:	2383      	movs	r3, #131	; 0x83
 800f9aa:	18fb      	adds	r3, r7, r3
 800f9ac:	781b      	ldrb	r3, [r3, #0]
 800f9ae:	2b01      	cmp	r3, #1
 800f9b0:	d119      	bne.n	800f9e6 <ProcessRadioRxDone+0x5f2>
 800f9b2:	1cbb      	adds	r3, r7, #2
 800f9b4:	781b      	ldrb	r3, [r3, #0]
 800f9b6:	2b03      	cmp	r3, #3
 800f9b8:	d10e      	bne.n	800f9d8 <ProcessRadioRxDone+0x5e4>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800f9ba:	2130      	movs	r1, #48	; 0x30
 800f9bc:	187b      	adds	r3, r7, r1
 800f9be:	7b1b      	ldrb	r3, [r3, #12]
 800f9c0:	2220      	movs	r2, #32
 800f9c2:	4013      	ands	r3, r2
 800f9c4:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d106      	bne.n	800f9d8 <ProcessRadioRxDone+0x5e4>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800f9ca:	187b      	adds	r3, r7, r1
 800f9cc:	7b1b      	ldrb	r3, [r3, #12]
 800f9ce:	2240      	movs	r2, #64	; 0x40
 800f9d0:	4013      	ands	r3, r2
 800f9d2:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d006      	beq.n	800f9e6 <ProcessRadioRxDone+0x5f2>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f9d8:	4b51      	ldr	r3, [pc, #324]	; (800fb20 <ProcessRadioRxDone+0x72c>)
 800f9da:	4a54      	ldr	r2, [pc, #336]	; (800fb2c <ProcessRadioRxDone+0x738>)
 800f9dc:	2101      	movs	r1, #1
 800f9de:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800f9e0:	f7ff fcdc 	bl	800f39c <PrepareRxDoneAbort>
                return;
 800f9e4:	e234      	b.n	800fe50 <ProcessRadioRxDone+0xa5c>
            }

            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800f9e6:	2164      	movs	r1, #100	; 0x64
 800f9e8:	187b      	adds	r3, r7, r1
 800f9ea:	2215      	movs	r2, #21
 800f9ec:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800f9ee:	4b4c      	ldr	r3, [pc, #304]	; (800fb20 <ProcessRadioRxDone+0x72c>)
 800f9f0:	4a4d      	ldr	r2, [pc, #308]	; (800fb28 <ProcessRadioRxDone+0x734>)
 800f9f2:	589b      	ldr	r3, [r3, r2]
 800f9f4:	781b      	ldrb	r3, [r3, #0]
 800f9f6:	187a      	adds	r2, r7, r1
 800f9f8:	0011      	movs	r1, r2
 800f9fa:	0018      	movs	r0, r3
 800f9fc:	f007 f913 	bl	8016c26 <RegionGetPhyParam>
 800fa00:	0003      	movs	r3, r0
 800fa02:	001a      	movs	r2, r3
 800fa04:	2060      	movs	r0, #96	; 0x60
 800fa06:	183b      	adds	r3, r7, r0
 800fa08:	601a      	str	r2, [r3, #0]

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, MacCtx.NvmCtx->Version, phyParam.Value, &fCntID, &downLinkCounter );
 800fa0a:	1cbb      	adds	r3, r7, #2
 800fa0c:	781d      	ldrb	r5, [r3, #0]
 800fa0e:	4b44      	ldr	r3, [pc, #272]	; (800fb20 <ProcessRadioRxDone+0x72c>)
 800fa10:	4a45      	ldr	r2, [pc, #276]	; (800fb28 <ProcessRadioRxDone+0x734>)
 800fa12:	5899      	ldr	r1, [r3, r2]
 800fa14:	183b      	adds	r3, r7, r0
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	b29b      	uxth	r3, r3
 800fa1a:	2280      	movs	r2, #128	; 0x80
 800fa1c:	18bc      	adds	r4, r7, r2
 800fa1e:	22b0      	movs	r2, #176	; 0xb0
 800fa20:	0052      	lsls	r2, r2, #1
 800fa22:	588e      	ldr	r6, [r1, r2]
 800fa24:	2130      	movs	r1, #48	; 0x30
 800fa26:	1879      	adds	r1, r7, r1
 800fa28:	2082      	movs	r0, #130	; 0x82
 800fa2a:	183a      	adds	r2, r7, r0
 800fa2c:	7810      	ldrb	r0, [r2, #0]
 800fa2e:	1d3a      	adds	r2, r7, #4
 800fa30:	9202      	str	r2, [sp, #8]
 800fa32:	1cfa      	adds	r2, r7, #3
 800fa34:	9201      	str	r2, [sp, #4]
 800fa36:	9300      	str	r3, [sp, #0]
 800fa38:	0033      	movs	r3, r6
 800fa3a:	000a      	movs	r2, r1
 800fa3c:	0029      	movs	r1, r5
 800fa3e:	f000 fe91 	bl	8010764 <GetFCntDown>
 800fa42:	0003      	movs	r3, r0
 800fa44:	7023      	strb	r3, [r4, #0]
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800fa46:	2280      	movs	r2, #128	; 0x80
 800fa48:	18bb      	adds	r3, r7, r2
 800fa4a:	781b      	ldrb	r3, [r3, #0]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d040      	beq.n	800fad2 <ProcessRadioRxDone+0x6de>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800fa50:	18bb      	adds	r3, r7, r2
 800fa52:	781b      	ldrb	r3, [r3, #0]
 800fa54:	2b07      	cmp	r3, #7
 800fa56:	d126      	bne.n	800faa6 <ProcessRadioRxDone+0x6b2>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800fa58:	4b31      	ldr	r3, [pc, #196]	; (800fb20 <ProcessRadioRxDone+0x72c>)
 800fa5a:	4a34      	ldr	r2, [pc, #208]	; (800fb2c <ProcessRadioRxDone+0x738>)
 800fa5c:	2108      	movs	r1, #8
 800fa5e:	5499      	strb	r1, [r3, r2]
                    if( ( MacCtx.NvmCtx->Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( MacCtx.NvmCtx->LastRxMic == macMsgData.MIC ) )
 800fa60:	4b2f      	ldr	r3, [pc, #188]	; (800fb20 <ProcessRadioRxDone+0x72c>)
 800fa62:	4a31      	ldr	r2, [pc, #196]	; (800fb28 <ProcessRadioRxDone+0x734>)
 800fa64:	589a      	ldr	r2, [r3, r2]
 800fa66:	23b1      	movs	r3, #177	; 0xb1
 800fa68:	005b      	lsls	r3, r3, #1
 800fa6a:	5cd3      	ldrb	r3, [r2, r3]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d128      	bne.n	800fac2 <ProcessRadioRxDone+0x6ce>
 800fa70:	2374      	movs	r3, #116	; 0x74
 800fa72:	18fb      	adds	r3, r7, r3
 800fa74:	781b      	ldrb	r3, [r3, #0]
 800fa76:	221f      	movs	r2, #31
 800fa78:	4393      	bics	r3, r2
 800fa7a:	b2db      	uxtb	r3, r3
 800fa7c:	2ba0      	cmp	r3, #160	; 0xa0
 800fa7e:	d120      	bne.n	800fac2 <ProcessRadioRxDone+0x6ce>
 800fa80:	4b27      	ldr	r3, [pc, #156]	; (800fb20 <ProcessRadioRxDone+0x72c>)
 800fa82:	4a29      	ldr	r2, [pc, #164]	; (800fb28 <ProcessRadioRxDone+0x734>)
 800fa84:	589a      	ldr	r2, [r3, r2]
 800fa86:	23b4      	movs	r3, #180	; 0xb4
 800fa88:	005b      	lsls	r3, r3, #1
 800fa8a:	58d2      	ldr	r2, [r2, r3]
 800fa8c:	2130      	movs	r1, #48	; 0x30
 800fa8e:	187b      	adds	r3, r7, r1
 800fa90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa92:	429a      	cmp	r2, r3
 800fa94:	d115      	bne.n	800fac2 <ProcessRadioRxDone+0x6ce>
                    {
                        MacCtx.NvmCtx->SrvAckRequested = true;
 800fa96:	4b22      	ldr	r3, [pc, #136]	; (800fb20 <ProcessRadioRxDone+0x72c>)
 800fa98:	4a23      	ldr	r2, [pc, #140]	; (800fb28 <ProcessRadioRxDone+0x734>)
 800fa9a:	589a      	ldr	r2, [r3, r2]
 800fa9c:	234c      	movs	r3, #76	; 0x4c
 800fa9e:	33ff      	adds	r3, #255	; 0xff
 800faa0:	2101      	movs	r1, #1
 800faa2:	54d1      	strb	r1, [r2, r3]
 800faa4:	e00d      	b.n	800fac2 <ProcessRadioRxDone+0x6ce>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800faa6:	2380      	movs	r3, #128	; 0x80
 800faa8:	18fb      	adds	r3, r7, r3
 800faaa:	781b      	ldrb	r3, [r3, #0]
 800faac:	2b08      	cmp	r3, #8
 800faae:	d104      	bne.n	800faba <ProcessRadioRxDone+0x6c6>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800fab0:	4b1b      	ldr	r3, [pc, #108]	; (800fb20 <ProcessRadioRxDone+0x72c>)
 800fab2:	4a1e      	ldr	r2, [pc, #120]	; (800fb2c <ProcessRadioRxDone+0x738>)
 800fab4:	210a      	movs	r1, #10
 800fab6:	5499      	strb	r1, [r3, r2]
 800fab8:	e003      	b.n	800fac2 <ProcessRadioRxDone+0x6ce>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800faba:	4b19      	ldr	r3, [pc, #100]	; (800fb20 <ProcessRadioRxDone+0x72c>)
 800fabc:	4a1b      	ldr	r2, [pc, #108]	; (800fb2c <ProcessRadioRxDone+0x738>)
 800fabe:	2101      	movs	r1, #1
 800fac0:	5499      	strb	r1, [r3, r2]
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800fac2:	6879      	ldr	r1, [r7, #4]
 800fac4:	4a16      	ldr	r2, [pc, #88]	; (800fb20 <ProcessRadioRxDone+0x72c>)
 800fac6:	2386      	movs	r3, #134	; 0x86
 800fac8:	00db      	lsls	r3, r3, #3
 800faca:	50d1      	str	r1, [r2, r3]
                PrepareRxDoneAbort( );
 800facc:	f7ff fc66 	bl	800f39c <PrepareRxDoneAbort>
                return;
 800fad0:	e1be      	b.n	800fe50 <ProcessRadioRxDone+0xa5c>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800fad2:	1cfb      	adds	r3, r7, #3
 800fad4:	781a      	ldrb	r2, [r3, #0]
 800fad6:	687d      	ldr	r5, [r7, #4]
 800fad8:	2680      	movs	r6, #128	; 0x80
 800fada:	19bc      	adds	r4, r7, r6
 800fadc:	2384      	movs	r3, #132	; 0x84
 800fade:	18fb      	adds	r3, r7, r3
 800fae0:	6819      	ldr	r1, [r3, #0]
 800fae2:	2382      	movs	r3, #130	; 0x82
 800fae4:	18fb      	adds	r3, r7, r3
 800fae6:	7818      	ldrb	r0, [r3, #0]
 800fae8:	2330      	movs	r3, #48	; 0x30
 800faea:	18fb      	adds	r3, r7, r3
 800faec:	9300      	str	r3, [sp, #0]
 800faee:	002b      	movs	r3, r5
 800faf0:	f006 fb9c 	bl	801622c <LoRaMacCryptoUnsecureMessage>
 800faf4:	0003      	movs	r3, r0
 800faf6:	7023      	strb	r3, [r4, #0]
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800faf8:	19bb      	adds	r3, r7, r6
 800fafa:	781b      	ldrb	r3, [r3, #0]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d01d      	beq.n	800fb3c <ProcessRadioRxDone+0x748>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800fb00:	19bb      	adds	r3, r7, r6
 800fb02:	781b      	ldrb	r3, [r3, #0]
 800fb04:	2b02      	cmp	r3, #2
 800fb06:	d104      	bne.n	800fb12 <ProcessRadioRxDone+0x71e>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800fb08:	4b05      	ldr	r3, [pc, #20]	; (800fb20 <ProcessRadioRxDone+0x72c>)
 800fb0a:	4a08      	ldr	r2, [pc, #32]	; (800fb2c <ProcessRadioRxDone+0x738>)
 800fb0c:	210b      	movs	r1, #11
 800fb0e:	5499      	strb	r1, [r3, r2]
 800fb10:	e003      	b.n	800fb1a <ProcessRadioRxDone+0x726>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800fb12:	4b03      	ldr	r3, [pc, #12]	; (800fb20 <ProcessRadioRxDone+0x72c>)
 800fb14:	4a05      	ldr	r2, [pc, #20]	; (800fb2c <ProcessRadioRxDone+0x738>)
 800fb16:	210c      	movs	r1, #12
 800fb18:	5499      	strb	r1, [r3, r2]
                }
                PrepareRxDoneAbort( );
 800fb1a:	f7ff fc3f 	bl	800f39c <PrepareRxDoneAbort>
                return;
 800fb1e:	e197      	b.n	800fe50 <ProcessRadioRxDone+0xa5c>
 800fb20:	200005b4 	.word	0x200005b4
 800fb24:	0000041c 	.word	0x0000041c
 800fb28:	00000484 	.word	0x00000484
 800fb2c:	0000041d 	.word	0x0000041d
 800fb30:	200007ec 	.word	0x200007ec
 800fb34:	00000434 	.word	0x00000434
 800fb38:	0000042d 	.word	0x0000042d
            }

            // Frame is valid
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800fb3c:	4bc6      	ldr	r3, [pc, #792]	; (800fe58 <ProcessRadioRxDone+0xa64>)
 800fb3e:	4ac7      	ldr	r2, [pc, #796]	; (800fe5c <ProcessRadioRxDone+0xa68>)
 800fb40:	2100      	movs	r1, #0
 800fb42:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Multicast = multicast;
 800fb44:	4bc4      	ldr	r3, [pc, #784]	; (800fe58 <ProcessRadioRxDone+0xa64>)
 800fb46:	2283      	movs	r2, #131	; 0x83
 800fb48:	18ba      	adds	r2, r7, r2
 800fb4a:	49c5      	ldr	r1, [pc, #788]	; (800fe60 <ProcessRadioRxDone+0xa6c>)
 800fb4c:	7812      	ldrb	r2, [r2, #0]
 800fb4e:	545a      	strb	r2, [r3, r1]
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800fb50:	2030      	movs	r0, #48	; 0x30
 800fb52:	183b      	adds	r3, r7, r0
 800fb54:	7b1b      	ldrb	r3, [r3, #12]
 800fb56:	06db      	lsls	r3, r3, #27
 800fb58:	0fdb      	lsrs	r3, r3, #31
 800fb5a:	b2db      	uxtb	r3, r3
 800fb5c:	0019      	movs	r1, r3
 800fb5e:	4bbe      	ldr	r3, [pc, #760]	; (800fe58 <ProcessRadioRxDone+0xa64>)
 800fb60:	4ac0      	ldr	r2, [pc, #768]	; (800fe64 <ProcessRadioRxDone+0xa70>)
 800fb62:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Buffer = NULL;
 800fb64:	4bbc      	ldr	r3, [pc, #752]	; (800fe58 <ProcessRadioRxDone+0xa64>)
 800fb66:	4ac0      	ldr	r2, [pc, #768]	; (800fe68 <ProcessRadioRxDone+0xa74>)
 800fb68:	2100      	movs	r1, #0
 800fb6a:	5099      	str	r1, [r3, r2]
            MacCtx.McpsIndication.BufferSize = 0;
 800fb6c:	4aba      	ldr	r2, [pc, #744]	; (800fe58 <ProcessRadioRxDone+0xa64>)
 800fb6e:	2385      	movs	r3, #133	; 0x85
 800fb70:	00db      	lsls	r3, r3, #3
 800fb72:	2100      	movs	r1, #0
 800fb74:	54d1      	strb	r1, [r2, r3]
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800fb76:	6879      	ldr	r1, [r7, #4]
 800fb78:	4ab7      	ldr	r2, [pc, #732]	; (800fe58 <ProcessRadioRxDone+0xa64>)
 800fb7a:	2386      	movs	r3, #134	; 0x86
 800fb7c:	00db      	lsls	r3, r3, #3
 800fb7e:	50d1      	str	r1, [r2, r3]
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800fb80:	183b      	adds	r3, r7, r0
 800fb82:	7b1b      	ldrb	r3, [r3, #12]
 800fb84:	069b      	lsls	r3, r3, #26
 800fb86:	0fdb      	lsrs	r3, r3, #31
 800fb88:	b2db      	uxtb	r3, r3
 800fb8a:	1e5a      	subs	r2, r3, #1
 800fb8c:	4193      	sbcs	r3, r2
 800fb8e:	b2d9      	uxtb	r1, r3
 800fb90:	4bb1      	ldr	r3, [pc, #708]	; (800fe58 <ProcessRadioRxDone+0xa64>)
 800fb92:	4ab6      	ldr	r2, [pc, #728]	; (800fe6c <ProcessRadioRxDone+0xa78>)
 800fb94:	5499      	strb	r1, [r3, r2]

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800fb96:	4bb0      	ldr	r3, [pc, #704]	; (800fe58 <ProcessRadioRxDone+0xa64>)
 800fb98:	4ab5      	ldr	r2, [pc, #724]	; (800fe70 <ProcessRadioRxDone+0xa7c>)
 800fb9a:	2100      	movs	r1, #0
 800fb9c:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800fb9e:	183b      	adds	r3, r7, r0
 800fba0:	7b1b      	ldrb	r3, [r3, #12]
 800fba2:	069b      	lsls	r3, r3, #26
 800fba4:	0fdb      	lsrs	r3, r3, #31
 800fba6:	b2db      	uxtb	r3, r3
 800fba8:	1e5a      	subs	r2, r3, #1
 800fbaa:	4193      	sbcs	r3, r2
 800fbac:	b2d9      	uxtb	r1, r3
 800fbae:	4aaa      	ldr	r2, [pc, #680]	; (800fe58 <ProcessRadioRxDone+0xa64>)
 800fbb0:	2388      	movs	r3, #136	; 0x88
 800fbb2:	00db      	lsls	r3, r3, #3
 800fbb4:	54d1      	strb	r1, [r2, r3]

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 800fbb6:	4ba8      	ldr	r3, [pc, #672]	; (800fe58 <ProcessRadioRxDone+0xa64>)
 800fbb8:	4aae      	ldr	r2, [pc, #696]	; (800fe74 <ProcessRadioRxDone+0xa80>)
 800fbba:	5c9b      	ldrb	r3, [r3, r2]
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d004      	beq.n	800fbca <ProcessRadioRxDone+0x7d6>
                ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_2 ) )
 800fbc0:	4ba5      	ldr	r3, [pc, #660]	; (800fe58 <ProcessRadioRxDone+0xa64>)
 800fbc2:	4aac      	ldr	r2, [pc, #688]	; (800fe74 <ProcessRadioRxDone+0xa80>)
 800fbc4:	5c9b      	ldrb	r3, [r3, r2]
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 800fbc6:	2b01      	cmp	r3, #1
 800fbc8:	d105      	bne.n	800fbd6 <ProcessRadioRxDone+0x7e2>
            {
                MacCtx.NvmCtx->AdrAckCounter = 0;
 800fbca:	4ba3      	ldr	r3, [pc, #652]	; (800fe58 <ProcessRadioRxDone+0xa64>)
 800fbcc:	4aaa      	ldr	r2, [pc, #680]	; (800fe78 <ProcessRadioRxDone+0xa84>)
 800fbce:	589b      	ldr	r3, [r3, r2]
 800fbd0:	2280      	movs	r2, #128	; 0x80
 800fbd2:	2100      	movs	r1, #0
 800fbd4:	5099      	str	r1, [r3, r2]
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800fbd6:	2383      	movs	r3, #131	; 0x83
 800fbd8:	18fb      	adds	r3, r7, r3
 800fbda:	781b      	ldrb	r3, [r3, #0]
 800fbdc:	2b01      	cmp	r3, #1
 800fbde:	d104      	bne.n	800fbea <ProcessRadioRxDone+0x7f6>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800fbe0:	4b9d      	ldr	r3, [pc, #628]	; (800fe58 <ProcessRadioRxDone+0xa64>)
 800fbe2:	4aa6      	ldr	r2, [pc, #664]	; (800fe7c <ProcessRadioRxDone+0xa88>)
 800fbe4:	2102      	movs	r1, #2
 800fbe6:	5499      	strb	r1, [r3, r2]
 800fbe8:	e02f      	b.n	800fc4a <ProcessRadioRxDone+0x856>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800fbea:	2374      	movs	r3, #116	; 0x74
 800fbec:	18fb      	adds	r3, r7, r3
 800fbee:	781b      	ldrb	r3, [r3, #0]
 800fbf0:	221f      	movs	r2, #31
 800fbf2:	4393      	bics	r3, r2
 800fbf4:	b2db      	uxtb	r3, r3
 800fbf6:	2ba0      	cmp	r3, #160	; 0xa0
 800fbf8:	d11c      	bne.n	800fc34 <ProcessRadioRxDone+0x840>
                {
                    MacCtx.NvmCtx->SrvAckRequested = true;
 800fbfa:	4b97      	ldr	r3, [pc, #604]	; (800fe58 <ProcessRadioRxDone+0xa64>)
 800fbfc:	4a9e      	ldr	r2, [pc, #632]	; (800fe78 <ProcessRadioRxDone+0xa84>)
 800fbfe:	589a      	ldr	r2, [r3, r2]
 800fc00:	234c      	movs	r3, #76	; 0x4c
 800fc02:	33ff      	adds	r3, #255	; 0xff
 800fc04:	2101      	movs	r1, #1
 800fc06:	54d1      	strb	r1, [r2, r3]
                    if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 800fc08:	4b93      	ldr	r3, [pc, #588]	; (800fe58 <ProcessRadioRxDone+0xa64>)
 800fc0a:	4a9b      	ldr	r2, [pc, #620]	; (800fe78 <ProcessRadioRxDone+0xa84>)
 800fc0c:	589a      	ldr	r2, [r3, r2]
 800fc0e:	23b1      	movs	r3, #177	; 0xb1
 800fc10:	005b      	lsls	r3, r3, #1
 800fc12:	5cd3      	ldrb	r3, [r2, r3]
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d108      	bne.n	800fc2a <ProcessRadioRxDone+0x836>
                    {
                        MacCtx.NvmCtx->LastRxMic = macMsgData.MIC;
 800fc18:	4b8f      	ldr	r3, [pc, #572]	; (800fe58 <ProcessRadioRxDone+0xa64>)
 800fc1a:	4a97      	ldr	r2, [pc, #604]	; (800fe78 <ProcessRadioRxDone+0xa84>)
 800fc1c:	589a      	ldr	r2, [r3, r2]
 800fc1e:	2330      	movs	r3, #48	; 0x30
 800fc20:	18fb      	adds	r3, r7, r3
 800fc22:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800fc24:	23b4      	movs	r3, #180	; 0xb4
 800fc26:	005b      	lsls	r3, r3, #1
 800fc28:	50d1      	str	r1, [r2, r3]
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800fc2a:	4b8b      	ldr	r3, [pc, #556]	; (800fe58 <ProcessRadioRxDone+0xa64>)
 800fc2c:	4a93      	ldr	r2, [pc, #588]	; (800fe7c <ProcessRadioRxDone+0xa88>)
 800fc2e:	2101      	movs	r1, #1
 800fc30:	5499      	strb	r1, [r3, r2]
 800fc32:	e00a      	b.n	800fc4a <ProcessRadioRxDone+0x856>
                }
                else
                {
                    MacCtx.NvmCtx->SrvAckRequested = false;
 800fc34:	4b88      	ldr	r3, [pc, #544]	; (800fe58 <ProcessRadioRxDone+0xa64>)
 800fc36:	4a90      	ldr	r2, [pc, #576]	; (800fe78 <ProcessRadioRxDone+0xa84>)
 800fc38:	589a      	ldr	r2, [r3, r2]
 800fc3a:	234c      	movs	r3, #76	; 0x4c
 800fc3c:	33ff      	adds	r3, #255	; 0xff
 800fc3e:	2100      	movs	r1, #0
 800fc40:	54d1      	strb	r1, [r2, r3]
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800fc42:	4b85      	ldr	r3, [pc, #532]	; (800fe58 <ProcessRadioRxDone+0xa64>)
 800fc44:	4a8d      	ldr	r2, [pc, #564]	; (800fe7c <ProcessRadioRxDone+0xa88>)
 800fc46:	2100      	movs	r1, #0
 800fc48:	5499      	strb	r1, [r3, r2]
                }
            }

            RemoveMacCommands( MacCtx.McpsIndication.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800fc4a:	4b83      	ldr	r3, [pc, #524]	; (800fe58 <ProcessRadioRxDone+0xa64>)
 800fc4c:	4a89      	ldr	r2, [pc, #548]	; (800fe74 <ProcessRadioRxDone+0xa80>)
 800fc4e:	5c98      	ldrb	r0, [r3, r2]
 800fc50:	4b81      	ldr	r3, [pc, #516]	; (800fe58 <ProcessRadioRxDone+0xa64>)
 800fc52:	4a8b      	ldr	r2, [pc, #556]	; (800fe80 <ProcessRadioRxDone+0xa8c>)
 800fc54:	5c9a      	ldrb	r2, [r3, r2]
 800fc56:	2330      	movs	r3, #48	; 0x30
 800fc58:	18fb      	adds	r3, r7, r3
 800fc5a:	7b1b      	ldrb	r3, [r3, #12]
 800fc5c:	1c19      	adds	r1, r3, #0
 800fc5e:	f002 f94f 	bl	8011f00 <RemoveMacCommands>

            switch( fType )
 800fc62:	1cbb      	adds	r3, r7, #2
 800fc64:	781b      	ldrb	r3, [r3, #0]
 800fc66:	2b03      	cmp	r3, #3
 800fc68:	d100      	bne.n	800fc6c <ProcessRadioRxDone+0x878>
 800fc6a:	e073      	b.n	800fd54 <ProcessRadioRxDone+0x960>
 800fc6c:	dd00      	ble.n	800fc70 <ProcessRadioRxDone+0x87c>
 800fc6e:	e089      	b.n	800fd84 <ProcessRadioRxDone+0x990>
 800fc70:	2b02      	cmp	r3, #2
 800fc72:	d055      	beq.n	800fd20 <ProcessRadioRxDone+0x92c>
 800fc74:	dd00      	ble.n	800fc78 <ProcessRadioRxDone+0x884>
 800fc76:	e085      	b.n	800fd84 <ProcessRadioRxDone+0x990>
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d002      	beq.n	800fc82 <ProcessRadioRxDone+0x88e>
 800fc7c:	2b01      	cmp	r3, #1
 800fc7e:	d030      	beq.n	800fce2 <ProcessRadioRxDone+0x8ee>
 800fc80:	e080      	b.n	800fd84 <ProcessRadioRxDone+0x990>
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 800fc82:	2030      	movs	r0, #48	; 0x30
 800fc84:	183b      	adds	r3, r7, r0
 800fc86:	7b1b      	ldrb	r3, [r3, #12]
 800fc88:	071b      	lsls	r3, r3, #28
 800fc8a:	0f1b      	lsrs	r3, r3, #28
 800fc8c:	b2db      	uxtb	r3, r3
 800fc8e:	001c      	movs	r4, r3
 800fc90:	4b71      	ldr	r3, [pc, #452]	; (800fe58 <ProcessRadioRxDone+0xa64>)
 800fc92:	4a78      	ldr	r2, [pc, #480]	; (800fe74 <ProcessRadioRxDone+0xa80>)
 800fc94:	5c9b      	ldrb	r3, [r3, r2]
 800fc96:	2277      	movs	r2, #119	; 0x77
 800fc98:	18ba      	adds	r2, r7, r2
 800fc9a:	2100      	movs	r1, #0
 800fc9c:	5651      	ldrsb	r1, [r2, r1]
 800fc9e:	0005      	movs	r5, r0
 800fca0:	183a      	adds	r2, r7, r0
 800fca2:	3210      	adds	r2, #16
 800fca4:	0010      	movs	r0, r2
 800fca6:	9300      	str	r3, [sp, #0]
 800fca8:	000b      	movs	r3, r1
 800fcaa:	0022      	movs	r2, r4
 800fcac:	2100      	movs	r1, #0
 800fcae:	f000 ff4f 	bl	8010b50 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800fcb2:	0028      	movs	r0, r5
 800fcb4:	183b      	adds	r3, r7, r0
 800fcb6:	2220      	movs	r2, #32
 800fcb8:	5c99      	ldrb	r1, [r3, r2]
 800fcba:	4b67      	ldr	r3, [pc, #412]	; (800fe58 <ProcessRadioRxDone+0xa64>)
 800fcbc:	4a71      	ldr	r2, [pc, #452]	; (800fe84 <ProcessRadioRxDone+0xa90>)
 800fcbe:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800fcc0:	183b      	adds	r3, r7, r0
 800fcc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fcc4:	4b64      	ldr	r3, [pc, #400]	; (800fe58 <ProcessRadioRxDone+0xa64>)
 800fcc6:	4968      	ldr	r1, [pc, #416]	; (800fe68 <ProcessRadioRxDone+0xa74>)
 800fcc8:	505a      	str	r2, [r3, r1]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800fcca:	183b      	adds	r3, r7, r0
 800fccc:	2228      	movs	r2, #40	; 0x28
 800fcce:	5c99      	ldrb	r1, [r3, r2]
 800fcd0:	4a61      	ldr	r2, [pc, #388]	; (800fe58 <ProcessRadioRxDone+0xa64>)
 800fcd2:	2385      	movs	r3, #133	; 0x85
 800fcd4:	00db      	lsls	r3, r3, #3
 800fcd6:	54d1      	strb	r1, [r2, r3]
                    MacCtx.McpsIndication.RxData = true;
 800fcd8:	4b5f      	ldr	r3, [pc, #380]	; (800fe58 <ProcessRadioRxDone+0xa64>)
 800fcda:	4a6b      	ldr	r2, [pc, #428]	; (800fe88 <ProcessRadioRxDone+0xa94>)
 800fcdc:	2101      	movs	r1, #1
 800fcde:	5499      	strb	r1, [r3, r2]
                    break;
 800fce0:	e057      	b.n	800fd92 <ProcessRadioRxDone+0x99e>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 800fce2:	2030      	movs	r0, #48	; 0x30
 800fce4:	183b      	adds	r3, r7, r0
 800fce6:	7b1b      	ldrb	r3, [r3, #12]
 800fce8:	071b      	lsls	r3, r3, #28
 800fcea:	0f1b      	lsrs	r3, r3, #28
 800fcec:	b2db      	uxtb	r3, r3
 800fcee:	001c      	movs	r4, r3
 800fcf0:	4b59      	ldr	r3, [pc, #356]	; (800fe58 <ProcessRadioRxDone+0xa64>)
 800fcf2:	4a60      	ldr	r2, [pc, #384]	; (800fe74 <ProcessRadioRxDone+0xa80>)
 800fcf4:	5c9b      	ldrb	r3, [r3, r2]
 800fcf6:	2277      	movs	r2, #119	; 0x77
 800fcf8:	18ba      	adds	r2, r7, r2
 800fcfa:	2100      	movs	r1, #0
 800fcfc:	5651      	ldrsb	r1, [r2, r1]
 800fcfe:	0005      	movs	r5, r0
 800fd00:	183a      	adds	r2, r7, r0
 800fd02:	3210      	adds	r2, #16
 800fd04:	0010      	movs	r0, r2
 800fd06:	9300      	str	r3, [sp, #0]
 800fd08:	000b      	movs	r3, r1
 800fd0a:	0022      	movs	r2, r4
 800fd0c:	2100      	movs	r1, #0
 800fd0e:	f000 ff1f 	bl	8010b50 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800fd12:	197b      	adds	r3, r7, r5
 800fd14:	2220      	movs	r2, #32
 800fd16:	5c99      	ldrb	r1, [r3, r2]
 800fd18:	4b4f      	ldr	r3, [pc, #316]	; (800fe58 <ProcessRadioRxDone+0xa64>)
 800fd1a:	4a5a      	ldr	r2, [pc, #360]	; (800fe84 <ProcessRadioRxDone+0xa90>)
 800fd1c:	5499      	strb	r1, [r3, r2]
                    break;
 800fd1e:	e038      	b.n	800fd92 <ProcessRadioRxDone+0x99e>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
 800fd20:	2430      	movs	r4, #48	; 0x30
 800fd22:	193b      	adds	r3, r7, r4
 800fd24:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800fd26:	193b      	adds	r3, r7, r4
 800fd28:	2228      	movs	r2, #40	; 0x28
 800fd2a:	5c99      	ldrb	r1, [r3, r2]
 800fd2c:	4b4a      	ldr	r3, [pc, #296]	; (800fe58 <ProcessRadioRxDone+0xa64>)
 800fd2e:	4a51      	ldr	r2, [pc, #324]	; (800fe74 <ProcessRadioRxDone+0xa80>)
 800fd30:	5c9b      	ldrb	r3, [r3, r2]
 800fd32:	2277      	movs	r2, #119	; 0x77
 800fd34:	18ba      	adds	r2, r7, r2
 800fd36:	7812      	ldrb	r2, [r2, #0]
 800fd38:	b252      	sxtb	r2, r2
 800fd3a:	9300      	str	r3, [sp, #0]
 800fd3c:	0013      	movs	r3, r2
 800fd3e:	000a      	movs	r2, r1
 800fd40:	2100      	movs	r1, #0
 800fd42:	f000 ff05 	bl	8010b50 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800fd46:	193b      	adds	r3, r7, r4
 800fd48:	2220      	movs	r2, #32
 800fd4a:	5c99      	ldrb	r1, [r3, r2]
 800fd4c:	4b42      	ldr	r3, [pc, #264]	; (800fe58 <ProcessRadioRxDone+0xa64>)
 800fd4e:	4a4d      	ldr	r2, [pc, #308]	; (800fe84 <ProcessRadioRxDone+0xa90>)
 800fd50:	5499      	strb	r1, [r3, r2]
                    break;
 800fd52:	e01e      	b.n	800fd92 <ProcessRadioRxDone+0x99e>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800fd54:	2030      	movs	r0, #48	; 0x30
 800fd56:	183b      	adds	r3, r7, r0
 800fd58:	2220      	movs	r2, #32
 800fd5a:	5c99      	ldrb	r1, [r3, r2]
 800fd5c:	4b3e      	ldr	r3, [pc, #248]	; (800fe58 <ProcessRadioRxDone+0xa64>)
 800fd5e:	4a49      	ldr	r2, [pc, #292]	; (800fe84 <ProcessRadioRxDone+0xa90>)
 800fd60:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800fd62:	183b      	adds	r3, r7, r0
 800fd64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fd66:	4b3c      	ldr	r3, [pc, #240]	; (800fe58 <ProcessRadioRxDone+0xa64>)
 800fd68:	493f      	ldr	r1, [pc, #252]	; (800fe68 <ProcessRadioRxDone+0xa74>)
 800fd6a:	505a      	str	r2, [r3, r1]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800fd6c:	183b      	adds	r3, r7, r0
 800fd6e:	2228      	movs	r2, #40	; 0x28
 800fd70:	5c99      	ldrb	r1, [r3, r2]
 800fd72:	4a39      	ldr	r2, [pc, #228]	; (800fe58 <ProcessRadioRxDone+0xa64>)
 800fd74:	2385      	movs	r3, #133	; 0x85
 800fd76:	00db      	lsls	r3, r3, #3
 800fd78:	54d1      	strb	r1, [r2, r3]
                    MacCtx.McpsIndication.RxData = true;
 800fd7a:	4b37      	ldr	r3, [pc, #220]	; (800fe58 <ProcessRadioRxDone+0xa64>)
 800fd7c:	4a42      	ldr	r2, [pc, #264]	; (800fe88 <ProcessRadioRxDone+0xa94>)
 800fd7e:	2101      	movs	r1, #1
 800fd80:	5499      	strb	r1, [r3, r2]
                    break;
 800fd82:	e006      	b.n	800fd92 <ProcessRadioRxDone+0x99e>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fd84:	4b34      	ldr	r3, [pc, #208]	; (800fe58 <ProcessRadioRxDone+0xa64>)
 800fd86:	4a35      	ldr	r2, [pc, #212]	; (800fe5c <ProcessRadioRxDone+0xa68>)
 800fd88:	2101      	movs	r1, #1
 800fd8a:	5499      	strb	r1, [r3, r2]
                    PrepareRxDoneAbort( );
 800fd8c:	f7ff fb06 	bl	800f39c <PrepareRxDoneAbort>
                    break;
 800fd90:	46c0      	nop			; (mov r8, r8)
            }

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800fd92:	4b31      	ldr	r3, [pc, #196]	; (800fe58 <ProcessRadioRxDone+0xa64>)
 800fd94:	4a3d      	ldr	r2, [pc, #244]	; (800fe8c <ProcessRadioRxDone+0xa98>)
 800fd96:	5c99      	ldrb	r1, [r3, r2]
 800fd98:	2002      	movs	r0, #2
 800fd9a:	4301      	orrs	r1, r0
 800fd9c:	5499      	strb	r1, [r3, r2]

            break;
 800fd9e:	e036      	b.n	800fe0e <ProcessRadioRxDone+0xa1a>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800fda0:	2476      	movs	r4, #118	; 0x76
 800fda2:	193b      	adds	r3, r7, r4
 800fda4:	781b      	ldrb	r3, [r3, #0]
 800fda6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800fda8:	18d1      	adds	r1, r2, r3
 800fdaa:	193b      	adds	r3, r7, r4
 800fdac:	781b      	ldrb	r3, [r3, #0]
 800fdae:	b29b      	uxth	r3, r3
 800fdb0:	257a      	movs	r5, #122	; 0x7a
 800fdb2:	197a      	adds	r2, r7, r5
 800fdb4:	8812      	ldrh	r2, [r2, #0]
 800fdb6:	1ad3      	subs	r3, r2, r3
 800fdb8:	b29a      	uxth	r2, r3
 800fdba:	4b35      	ldr	r3, [pc, #212]	; (800fe90 <ProcessRadioRxDone+0xa9c>)
 800fdbc:	0018      	movs	r0, r3
 800fdbe:	f009 fbc1 	bl	8019544 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800fdc2:	4b25      	ldr	r3, [pc, #148]	; (800fe58 <ProcessRadioRxDone+0xa64>)
 800fdc4:	4a2d      	ldr	r2, [pc, #180]	; (800fe7c <ProcessRadioRxDone+0xa88>)
 800fdc6:	2103      	movs	r1, #3
 800fdc8:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800fdca:	4b23      	ldr	r3, [pc, #140]	; (800fe58 <ProcessRadioRxDone+0xa64>)
 800fdcc:	4a23      	ldr	r2, [pc, #140]	; (800fe5c <ProcessRadioRxDone+0xa68>)
 800fdce:	2100      	movs	r1, #0
 800fdd0:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800fdd2:	4b21      	ldr	r3, [pc, #132]	; (800fe58 <ProcessRadioRxDone+0xa64>)
 800fdd4:	4924      	ldr	r1, [pc, #144]	; (800fe68 <ProcessRadioRxDone+0xa74>)
 800fdd6:	4a2e      	ldr	r2, [pc, #184]	; (800fe90 <ProcessRadioRxDone+0xa9c>)
 800fdd8:	505a      	str	r2, [r3, r1]
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800fdda:	197b      	adds	r3, r7, r5
 800fddc:	881b      	ldrh	r3, [r3, #0]
 800fdde:	b2da      	uxtb	r2, r3
 800fde0:	193b      	adds	r3, r7, r4
 800fde2:	781b      	ldrb	r3, [r3, #0]
 800fde4:	1ad3      	subs	r3, r2, r3
 800fde6:	b2d9      	uxtb	r1, r3
 800fde8:	4a1b      	ldr	r2, [pc, #108]	; (800fe58 <ProcessRadioRxDone+0xa64>)
 800fdea:	2385      	movs	r3, #133	; 0x85
 800fdec:	00db      	lsls	r3, r3, #3
 800fdee:	54d1      	strb	r1, [r2, r3]

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800fdf0:	4b19      	ldr	r3, [pc, #100]	; (800fe58 <ProcessRadioRxDone+0xa64>)
 800fdf2:	4a26      	ldr	r2, [pc, #152]	; (800fe8c <ProcessRadioRxDone+0xa98>)
 800fdf4:	5c99      	ldrb	r1, [r3, r2]
 800fdf6:	2002      	movs	r0, #2
 800fdf8:	4301      	orrs	r1, r0
 800fdfa:	5499      	strb	r1, [r3, r2]
            break;
 800fdfc:	e007      	b.n	800fe0e <ProcessRadioRxDone+0xa1a>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fdfe:	4b16      	ldr	r3, [pc, #88]	; (800fe58 <ProcessRadioRxDone+0xa64>)
 800fe00:	4a16      	ldr	r2, [pc, #88]	; (800fe5c <ProcessRadioRxDone+0xa68>)
 800fe02:	2101      	movs	r1, #1
 800fe04:	5499      	strb	r1, [r3, r2]
            PrepareRxDoneAbort( );
 800fe06:	f7ff fac9 	bl	800f39c <PrepareRxDoneAbort>
            break;
 800fe0a:	e000      	b.n	800fe0e <ProcessRadioRxDone+0xa1a>
            break;
 800fe0c:	46c0      	nop			; (mov r8, r8)
    }

    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 800fe0e:	4b12      	ldr	r3, [pc, #72]	; (800fe58 <ProcessRadioRxDone+0xa64>)
 800fe10:	4a20      	ldr	r2, [pc, #128]	; (800fe94 <ProcessRadioRxDone+0xaa0>)
 800fe12:	5c9b      	ldrb	r3, [r3, r2]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d009      	beq.n	800fe2c <ProcessRadioRxDone+0xa38>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800fe18:	4a0f      	ldr	r2, [pc, #60]	; (800fe58 <ProcessRadioRxDone+0xa64>)
 800fe1a:	2388      	movs	r3, #136	; 0x88
 800fe1c:	00db      	lsls	r3, r3, #3
 800fe1e:	5cd3      	ldrb	r3, [r2, r3]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d00d      	beq.n	800fe40 <ProcessRadioRxDone+0xa4c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800fe24:	2000      	movs	r0, #0
 800fe26:	f000 fc5b 	bl	80106e0 <OnAckTimeoutTimerEvent>
 800fe2a:	e009      	b.n	800fe40 <ProcessRadioRxDone+0xa4c>
        }
    }
    else
    {
        if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800fe2c:	4b0a      	ldr	r3, [pc, #40]	; (800fe58 <ProcessRadioRxDone+0xa64>)
 800fe2e:	4a12      	ldr	r2, [pc, #72]	; (800fe78 <ProcessRadioRxDone+0xa84>)
 800fe30:	589b      	ldr	r3, [r3, r2]
 800fe32:	227c      	movs	r2, #124	; 0x7c
 800fe34:	5c9b      	ldrb	r3, [r3, r2]
 800fe36:	2b02      	cmp	r3, #2
 800fe38:	d102      	bne.n	800fe40 <ProcessRadioRxDone+0xa4c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800fe3a:	2000      	movs	r0, #0
 800fe3c:	f000 fc50 	bl	80106e0 <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800fe40:	4b05      	ldr	r3, [pc, #20]	; (800fe58 <ProcessRadioRxDone+0xa64>)
 800fe42:	4a12      	ldr	r2, [pc, #72]	; (800fe8c <ProcessRadioRxDone+0xa98>)
 800fe44:	5c99      	ldrb	r1, [r3, r2]
 800fe46:	2020      	movs	r0, #32
 800fe48:	4301      	orrs	r1, r0
 800fe4a:	5499      	strb	r1, [r3, r2]

    UpdateRxSlotIdleState( );
 800fe4c:	f7ff f9c0 	bl	800f1d0 <UpdateRxSlotIdleState>
}
 800fe50:	46bd      	mov	sp, r7
 800fe52:	b023      	add	sp, #140	; 0x8c
 800fe54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe56:	46c0      	nop			; (mov r8, r8)
 800fe58:	200005b4 	.word	0x200005b4
 800fe5c:	0000041d 	.word	0x0000041d
 800fe60:	0000041e 	.word	0x0000041e
 800fe64:	00000421 	.word	0x00000421
 800fe68:	00000424 	.word	0x00000424
 800fe6c:	0000042e 	.word	0x0000042e
 800fe70:	0000043d 	.word	0x0000043d
 800fe74:	0000042d 	.word	0x0000042d
 800fe78:	00000484 	.word	0x00000484
 800fe7c:	0000041c 	.word	0x0000041c
 800fe80:	0000043c 	.word	0x0000043c
 800fe84:	0000041f 	.word	0x0000041f
 800fe88:	00000429 	.word	0x00000429
 800fe8c:	00000481 	.word	0x00000481
 800fe90:	200007ec 	.word	0x200007ec
 800fe94:	00000414 	.word	0x00000414

0800fe98 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800fe98:	b580      	push	{r7, lr}
 800fe9a:	af00      	add	r7, sp, #0
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800fe9c:	4b12      	ldr	r3, [pc, #72]	; (800fee8 <ProcessRadioTxTimeout+0x50>)
 800fe9e:	4a13      	ldr	r2, [pc, #76]	; (800feec <ProcessRadioTxTimeout+0x54>)
 800fea0:	589b      	ldr	r3, [r3, r2]
 800fea2:	227c      	movs	r2, #124	; 0x7c
 800fea4:	5c9b      	ldrb	r3, [r3, r2]
 800fea6:	2b02      	cmp	r3, #2
 800fea8:	d002      	beq.n	800feb0 <ProcessRadioTxTimeout+0x18>
    {
        Radio.Sleep( );
 800feaa:	4b11      	ldr	r3, [pc, #68]	; (800fef0 <ProcessRadioTxTimeout+0x58>)
 800feac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800feae:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800feb0:	f7ff f98e 	bl	800f1d0 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800feb4:	4b0c      	ldr	r3, [pc, #48]	; (800fee8 <ProcessRadioTxTimeout+0x50>)
 800feb6:	4a0f      	ldr	r2, [pc, #60]	; (800fef4 <ProcessRadioTxTimeout+0x5c>)
 800feb8:	2102      	movs	r1, #2
 800feba:	5499      	strb	r1, [r3, r2]
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800febc:	2002      	movs	r0, #2
 800febe:	f005 fa5b 	bl	8015378 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800fec2:	4b09      	ldr	r3, [pc, #36]	; (800fee8 <ProcessRadioTxTimeout+0x50>)
 800fec4:	4a0c      	ldr	r2, [pc, #48]	; (800fef8 <ProcessRadioTxTimeout+0x60>)
 800fec6:	5c9b      	ldrb	r3, [r3, r2]
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d003      	beq.n	800fed4 <ProcessRadioTxTimeout+0x3c>
    {
        MacCtx.AckTimeoutRetry = true;
 800fecc:	4b06      	ldr	r3, [pc, #24]	; (800fee8 <ProcessRadioTxTimeout+0x50>)
 800fece:	4a0b      	ldr	r2, [pc, #44]	; (800fefc <ProcessRadioTxTimeout+0x64>)
 800fed0:	2101      	movs	r1, #1
 800fed2:	5499      	strb	r1, [r3, r2]
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800fed4:	4b04      	ldr	r3, [pc, #16]	; (800fee8 <ProcessRadioTxTimeout+0x50>)
 800fed6:	4a0a      	ldr	r2, [pc, #40]	; (800ff00 <ProcessRadioTxTimeout+0x68>)
 800fed8:	5c99      	ldrb	r1, [r3, r2]
 800feda:	2020      	movs	r0, #32
 800fedc:	4301      	orrs	r1, r0
 800fede:	5499      	strb	r1, [r3, r2]
}
 800fee0:	46c0      	nop			; (mov r8, r8)
 800fee2:	46bd      	mov	sp, r7
 800fee4:	bd80      	pop	{r7, pc}
 800fee6:	46c0      	nop			; (mov r8, r8)
 800fee8:	200005b4 	.word	0x200005b4
 800feec:	00000484 	.word	0x00000484
 800fef0:	0801fb64 	.word	0x0801fb64
 800fef4:	0000043d 	.word	0x0000043d
 800fef8:	00000414 	.word	0x00000414
 800fefc:	00000413 	.word	0x00000413
 800ff00:	00000481 	.word	0x00000481

0800ff04 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800ff04:	b580      	push	{r7, lr}
 800ff06:	b084      	sub	sp, #16
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	0002      	movs	r2, r0
 800ff0c:	1dfb      	adds	r3, r7, #7
 800ff0e:	701a      	strb	r2, [r3, #0]
 800ff10:	1dbb      	adds	r3, r7, #6
 800ff12:	1c0a      	adds	r2, r1, #0
 800ff14:	701a      	strb	r2, [r3, #0]
    bool classBRx = false;
 800ff16:	230f      	movs	r3, #15
 800ff18:	18fb      	adds	r3, r7, r3
 800ff1a:	2200      	movs	r2, #0
 800ff1c:	701a      	strb	r2, [r3, #0]

    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800ff1e:	4b4a      	ldr	r3, [pc, #296]	; (8010048 <HandleRadioRxErrorTimeout+0x144>)
 800ff20:	4a4a      	ldr	r2, [pc, #296]	; (801004c <HandleRadioRxErrorTimeout+0x148>)
 800ff22:	589b      	ldr	r3, [r3, r2]
 800ff24:	227c      	movs	r2, #124	; 0x7c
 800ff26:	5c9b      	ldrb	r3, [r3, r2]
 800ff28:	2b02      	cmp	r3, #2
 800ff2a:	d002      	beq.n	800ff32 <HandleRadioRxErrorTimeout+0x2e>
    {
        Radio.Sleep( );
 800ff2c:	4b48      	ldr	r3, [pc, #288]	; (8010050 <HandleRadioRxErrorTimeout+0x14c>)
 800ff2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff30:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800ff32:	f004 fcdd 	bl	80148f0 <LoRaMacClassBIsBeaconExpected>
 800ff36:	1e03      	subs	r3, r0, #0
 800ff38:	d009      	beq.n	800ff4e <HandleRadioRxErrorTimeout+0x4a>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800ff3a:	2002      	movs	r0, #2
 800ff3c:	f004 fc90 	bl	8014860 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800ff40:	2000      	movs	r0, #0
 800ff42:	f004 fcb1 	bl	80148a8 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800ff46:	230f      	movs	r3, #15
 800ff48:	18fb      	adds	r3, r7, r3
 800ff4a:	2201      	movs	r2, #1
 800ff4c:	701a      	strb	r2, [r3, #0]
    }
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800ff4e:	4b3e      	ldr	r3, [pc, #248]	; (8010048 <HandleRadioRxErrorTimeout+0x144>)
 800ff50:	4a3e      	ldr	r2, [pc, #248]	; (801004c <HandleRadioRxErrorTimeout+0x148>)
 800ff52:	589b      	ldr	r3, [r3, r2]
 800ff54:	227c      	movs	r2, #124	; 0x7c
 800ff56:	5c9b      	ldrb	r3, [r3, r2]
 800ff58:	2b01      	cmp	r3, #1
 800ff5a:	d11b      	bne.n	800ff94 <HandleRadioRxErrorTimeout+0x90>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800ff5c:	f004 fcce 	bl	80148fc <LoRaMacClassBIsPingExpected>
 800ff60:	1e03      	subs	r3, r0, #0
 800ff62:	d009      	beq.n	800ff78 <HandleRadioRxErrorTimeout+0x74>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800ff64:	2000      	movs	r0, #0
 800ff66:	f004 fc85 	bl	8014874 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800ff6a:	2000      	movs	r0, #0
 800ff6c:	f004 fca4 	bl	80148b8 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800ff70:	230f      	movs	r3, #15
 800ff72:	18fb      	adds	r3, r7, r3
 800ff74:	2201      	movs	r2, #1
 800ff76:	701a      	strb	r2, [r3, #0]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800ff78:	f004 fcc6 	bl	8014908 <LoRaMacClassBIsMulticastExpected>
 800ff7c:	1e03      	subs	r3, r0, #0
 800ff7e:	d009      	beq.n	800ff94 <HandleRadioRxErrorTimeout+0x90>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800ff80:	2000      	movs	r0, #0
 800ff82:	f004 fc81 	bl	8014888 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800ff86:	2000      	movs	r0, #0
 800ff88:	f004 fc9e 	bl	80148c8 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800ff8c:	230f      	movs	r3, #15
 800ff8e:	18fb      	adds	r3, r7, r3
 800ff90:	2201      	movs	r2, #1
 800ff92:	701a      	strb	r2, [r3, #0]
        }
    }

    if( classBRx == false )
 800ff94:	230f      	movs	r3, #15
 800ff96:	18fb      	adds	r3, r7, r3
 800ff98:	781b      	ldrb	r3, [r3, #0]
 800ff9a:	2201      	movs	r2, #1
 800ff9c:	4053      	eors	r3, r2
 800ff9e:	b2db      	uxtb	r3, r3
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d04b      	beq.n	801003c <HandleRadioRxErrorTimeout+0x138>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800ffa4:	4a28      	ldr	r2, [pc, #160]	; (8010048 <HandleRadioRxErrorTimeout+0x144>)
 800ffa6:	2390      	movs	r3, #144	; 0x90
 800ffa8:	00db      	lsls	r3, r3, #3
 800ffaa:	5cd3      	ldrb	r3, [r2, r3]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d129      	bne.n	8010004 <HandleRadioRxErrorTimeout+0x100>
        {
            if( MacCtx.NodeAckRequested == true )
 800ffb0:	4b25      	ldr	r3, [pc, #148]	; (8010048 <HandleRadioRxErrorTimeout+0x144>)
 800ffb2:	4a28      	ldr	r2, [pc, #160]	; (8010054 <HandleRadioRxErrorTimeout+0x150>)
 800ffb4:	5c9b      	ldrb	r3, [r3, r2]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d004      	beq.n	800ffc4 <HandleRadioRxErrorTimeout+0xc0>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800ffba:	4b23      	ldr	r3, [pc, #140]	; (8010048 <HandleRadioRxErrorTimeout+0x144>)
 800ffbc:	1dfa      	adds	r2, r7, #7
 800ffbe:	4926      	ldr	r1, [pc, #152]	; (8010058 <HandleRadioRxErrorTimeout+0x154>)
 800ffc0:	7812      	ldrb	r2, [r2, #0]
 800ffc2:	545a      	strb	r2, [r3, r1]
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800ffc4:	1dfb      	adds	r3, r7, #7
 800ffc6:	781b      	ldrb	r3, [r3, #0]
 800ffc8:	0018      	movs	r0, r3
 800ffca:	f005 f9d5 	bl	8015378 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( MacCtx.NvmCtx->LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800ffce:	4b1e      	ldr	r3, [pc, #120]	; (8010048 <HandleRadioRxErrorTimeout+0x144>)
 800ffd0:	4a1e      	ldr	r2, [pc, #120]	; (801004c <HandleRadioRxErrorTimeout+0x148>)
 800ffd2:	589a      	ldr	r2, [r3, r2]
 800ffd4:	23a8      	movs	r3, #168	; 0xa8
 800ffd6:	005b      	lsls	r3, r3, #1
 800ffd8:	58d3      	ldr	r3, [r2, r3]
 800ffda:	0018      	movs	r0, r3
 800ffdc:	f00c ffae 	bl	801cf3c <UTIL_TIMER_GetElapsedTime>
 800ffe0:	0001      	movs	r1, r0
 800ffe2:	4a19      	ldr	r2, [pc, #100]	; (8010048 <HandleRadioRxErrorTimeout+0x144>)
 800ffe4:	23ed      	movs	r3, #237	; 0xed
 800ffe6:	009b      	lsls	r3, r3, #2
 800ffe8:	58d3      	ldr	r3, [r2, r3]
 800ffea:	4299      	cmp	r1, r3
 800ffec:	d326      	bcc.n	801003c <HandleRadioRxErrorTimeout+0x138>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800ffee:	4b1b      	ldr	r3, [pc, #108]	; (801005c <HandleRadioRxErrorTimeout+0x158>)
 800fff0:	0018      	movs	r0, r3
 800fff2:	f00c fe5f 	bl	801ccb4 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800fff6:	4b14      	ldr	r3, [pc, #80]	; (8010048 <HandleRadioRxErrorTimeout+0x144>)
 800fff8:	4a19      	ldr	r2, [pc, #100]	; (8010060 <HandleRadioRxErrorTimeout+0x15c>)
 800fffa:	5c99      	ldrb	r1, [r3, r2]
 800fffc:	2020      	movs	r0, #32
 800fffe:	4301      	orrs	r1, r0
 8010000:	5499      	strb	r1, [r3, r2]
 8010002:	e01b      	b.n	801003c <HandleRadioRxErrorTimeout+0x138>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 8010004:	4b10      	ldr	r3, [pc, #64]	; (8010048 <HandleRadioRxErrorTimeout+0x144>)
 8010006:	4a13      	ldr	r2, [pc, #76]	; (8010054 <HandleRadioRxErrorTimeout+0x150>)
 8010008:	5c9b      	ldrb	r3, [r3, r2]
 801000a:	2b00      	cmp	r3, #0
 801000c:	d004      	beq.n	8010018 <HandleRadioRxErrorTimeout+0x114>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 801000e:	4b0e      	ldr	r3, [pc, #56]	; (8010048 <HandleRadioRxErrorTimeout+0x144>)
 8010010:	1dba      	adds	r2, r7, #6
 8010012:	4911      	ldr	r1, [pc, #68]	; (8010058 <HandleRadioRxErrorTimeout+0x154>)
 8010014:	7812      	ldrb	r2, [r2, #0]
 8010016:	545a      	strb	r2, [r3, r1]
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 8010018:	1dbb      	adds	r3, r7, #6
 801001a:	781b      	ldrb	r3, [r3, #0]
 801001c:	0018      	movs	r0, r3
 801001e:	f005 f9ab 	bl	8015378 <LoRaMacConfirmQueueSetStatusCmn>

            if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8010022:	4b09      	ldr	r3, [pc, #36]	; (8010048 <HandleRadioRxErrorTimeout+0x144>)
 8010024:	4a09      	ldr	r2, [pc, #36]	; (801004c <HandleRadioRxErrorTimeout+0x148>)
 8010026:	589b      	ldr	r3, [r3, r2]
 8010028:	227c      	movs	r2, #124	; 0x7c
 801002a:	5c9b      	ldrb	r3, [r3, r2]
 801002c:	2b02      	cmp	r3, #2
 801002e:	d005      	beq.n	801003c <HandleRadioRxErrorTimeout+0x138>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 8010030:	4b05      	ldr	r3, [pc, #20]	; (8010048 <HandleRadioRxErrorTimeout+0x144>)
 8010032:	4a0b      	ldr	r2, [pc, #44]	; (8010060 <HandleRadioRxErrorTimeout+0x15c>)
 8010034:	5c99      	ldrb	r1, [r3, r2]
 8010036:	2020      	movs	r0, #32
 8010038:	4301      	orrs	r1, r0
 801003a:	5499      	strb	r1, [r3, r2]
            }
        }
    }

    UpdateRxSlotIdleState( );
 801003c:	f7ff f8c8 	bl	800f1d0 <UpdateRxSlotIdleState>
}
 8010040:	46c0      	nop			; (mov r8, r8)
 8010042:	46bd      	mov	sp, r7
 8010044:	b004      	add	sp, #16
 8010046:	bd80      	pop	{r7, pc}
 8010048:	200005b4 	.word	0x200005b4
 801004c:	00000484 	.word	0x00000484
 8010050:	0801fb64 	.word	0x0801fb64
 8010054:	00000414 	.word	0x00000414
 8010058:	0000043d 	.word	0x0000043d
 801005c:	2000094c 	.word	0x2000094c
 8010060:	00000481 	.word	0x00000481

08010064 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 8010064:	b580      	push	{r7, lr}
 8010066:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8010068:	2106      	movs	r1, #6
 801006a:	2005      	movs	r0, #5
 801006c:	f7ff ff4a 	bl	800ff04 <HandleRadioRxErrorTimeout>
}
 8010070:	46c0      	nop			; (mov r8, r8)
 8010072:	46bd      	mov	sp, r7
 8010074:	bd80      	pop	{r7, pc}

08010076 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 8010076:	b580      	push	{r7, lr}
 8010078:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 801007a:	2104      	movs	r1, #4
 801007c:	2003      	movs	r0, #3
 801007e:	f7ff ff41 	bl	800ff04 <HandleRadioRxErrorTimeout>
}
 8010082:	46c0      	nop			; (mov r8, r8)
 8010084:	46bd      	mov	sp, r7
 8010086:	bd80      	pop	{r7, pc}

08010088 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 8010088:	b580      	push	{r7, lr}
 801008a:	b084      	sub	sp, #16
 801008c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801008e:	f3ef 8310 	mrs	r3, PRIMASK
 8010092:	607b      	str	r3, [r7, #4]
  return(result);
 8010094:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 8010096:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8010098:	b672      	cpsid	i
}
 801009a:	46c0      	nop			; (mov r8, r8)
    events = LoRaMacRadioEvents;
 801009c:	4b1f      	ldr	r3, [pc, #124]	; (801011c <LoRaMacHandleIrqEvents+0x94>)
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 80100a2:	4b1e      	ldr	r3, [pc, #120]	; (801011c <LoRaMacHandleIrqEvents+0x94>)
 80100a4:	2200      	movs	r2, #0
 80100a6:	601a      	str	r2, [r3, #0]
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80100ac:	68bb      	ldr	r3, [r7, #8]
 80100ae:	f383 8810 	msr	PRIMASK, r3
}
 80100b2:	46c0      	nop			; (mov r8, r8)
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 80100b4:	683b      	ldr	r3, [r7, #0]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d02c      	beq.n	8010114 <LoRaMacHandleIrqEvents+0x8c>
    {
        if( events.Events.TxDone == 1 )
 80100ba:	003b      	movs	r3, r7
 80100bc:	781b      	ldrb	r3, [r3, #0]
 80100be:	2210      	movs	r2, #16
 80100c0:	4013      	ands	r3, r2
 80100c2:	b2db      	uxtb	r3, r3
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d001      	beq.n	80100cc <LoRaMacHandleIrqEvents+0x44>
        {
            ProcessRadioTxDone( );
 80100c8:	f7ff f89e 	bl	800f208 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 80100cc:	003b      	movs	r3, r7
 80100ce:	781b      	ldrb	r3, [r3, #0]
 80100d0:	2208      	movs	r2, #8
 80100d2:	4013      	ands	r3, r2
 80100d4:	b2db      	uxtb	r3, r3
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d001      	beq.n	80100de <LoRaMacHandleIrqEvents+0x56>
        {
            ProcessRadioRxDone( );
 80100da:	f7ff f98b 	bl	800f3f4 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 80100de:	003b      	movs	r3, r7
 80100e0:	781b      	ldrb	r3, [r3, #0]
 80100e2:	2204      	movs	r2, #4
 80100e4:	4013      	ands	r3, r2
 80100e6:	b2db      	uxtb	r3, r3
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d001      	beq.n	80100f0 <LoRaMacHandleIrqEvents+0x68>
        {
            ProcessRadioTxTimeout( );
 80100ec:	f7ff fed4 	bl	800fe98 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 80100f0:	003b      	movs	r3, r7
 80100f2:	781b      	ldrb	r3, [r3, #0]
 80100f4:	2202      	movs	r2, #2
 80100f6:	4013      	ands	r3, r2
 80100f8:	b2db      	uxtb	r3, r3
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d001      	beq.n	8010102 <LoRaMacHandleIrqEvents+0x7a>
        {
            ProcessRadioRxError( );
 80100fe:	f7ff ffb1 	bl	8010064 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 8010102:	003b      	movs	r3, r7
 8010104:	781b      	ldrb	r3, [r3, #0]
 8010106:	2201      	movs	r2, #1
 8010108:	4013      	ands	r3, r2
 801010a:	b2db      	uxtb	r3, r3
 801010c:	2b00      	cmp	r3, #0
 801010e:	d001      	beq.n	8010114 <LoRaMacHandleIrqEvents+0x8c>
        {
            ProcessRadioRxTimeout( );
 8010110:	f7ff ffb1 	bl	8010076 <ProcessRadioRxTimeout>
        }
    }
}
 8010114:	46c0      	nop			; (mov r8, r8)
 8010116:	46bd      	mov	sp, r7
 8010118:	b004      	add	sp, #16
 801011a:	bd80      	pop	{r7, pc}
 801011c:	20000be4 	.word	0x20000be4

08010120 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 8010120:	b580      	push	{r7, lr}
 8010122:	b082      	sub	sp, #8
 8010124:	af00      	add	r7, sp, #0
 8010126:	0002      	movs	r2, r0
 8010128:	1dfb      	adds	r3, r7, #7
 801012a:	701a      	strb	r2, [r3, #0]
    MacCtx.AllowRequests = requestState;
 801012c:	4b04      	ldr	r3, [pc, #16]	; (8010140 <LoRaMacEnableRequests+0x20>)
 801012e:	1dfa      	adds	r2, r7, #7
 8010130:	4904      	ldr	r1, [pc, #16]	; (8010144 <LoRaMacEnableRequests+0x24>)
 8010132:	7812      	ldrb	r2, [r2, #0]
 8010134:	545a      	strb	r2, [r3, r1]
}
 8010136:	46c0      	nop			; (mov r8, r8)
 8010138:	46bd      	mov	sp, r7
 801013a:	b002      	add	sp, #8
 801013c:	bd80      	pop	{r7, pc}
 801013e:	46c0      	nop			; (mov r8, r8)
 8010140:	200005b4 	.word	0x200005b4
 8010144:	00000482 	.word	0x00000482

08010148 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 8010148:	b580      	push	{r7, lr}
 801014a:	b082      	sub	sp, #8
 801014c:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 801014e:	1d3b      	adds	r3, r7, #4
 8010150:	4a2c      	ldr	r2, [pc, #176]	; (8010204 <LoRaMacHandleRequestEvents+0xbc>)
 8010152:	492d      	ldr	r1, [pc, #180]	; (8010208 <LoRaMacHandleRequestEvents+0xc0>)
 8010154:	5c52      	ldrb	r2, [r2, r1]
 8010156:	701a      	strb	r2, [r3, #0]

    if( MacCtx.MacState == LORAMAC_IDLE )
 8010158:	4a2a      	ldr	r2, [pc, #168]	; (8010204 <LoRaMacHandleRequestEvents+0xbc>)
 801015a:	23d0      	movs	r3, #208	; 0xd0
 801015c:	009b      	lsls	r3, r3, #2
 801015e:	58d3      	ldr	r3, [r2, r3]
 8010160:	2b00      	cmp	r3, #0
 8010162:	d14a      	bne.n	80101fa <LoRaMacHandleRequestEvents+0xb2>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8010164:	4b27      	ldr	r3, [pc, #156]	; (8010204 <LoRaMacHandleRequestEvents+0xbc>)
 8010166:	4a28      	ldr	r2, [pc, #160]	; (8010208 <LoRaMacHandleRequestEvents+0xc0>)
 8010168:	5c9b      	ldrb	r3, [r3, r2]
 801016a:	2201      	movs	r2, #1
 801016c:	4013      	ands	r3, r2
 801016e:	b2db      	uxtb	r3, r3
 8010170:	2b00      	cmp	r3, #0
 8010172:	d005      	beq.n	8010180 <LoRaMacHandleRequestEvents+0x38>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8010174:	4b23      	ldr	r3, [pc, #140]	; (8010204 <LoRaMacHandleRequestEvents+0xbc>)
 8010176:	4a24      	ldr	r2, [pc, #144]	; (8010208 <LoRaMacHandleRequestEvents+0xc0>)
 8010178:	5c99      	ldrb	r1, [r3, r2]
 801017a:	2001      	movs	r0, #1
 801017c:	4381      	bics	r1, r0
 801017e:	5499      	strb	r1, [r3, r2]
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8010180:	4b20      	ldr	r3, [pc, #128]	; (8010204 <LoRaMacHandleRequestEvents+0xbc>)
 8010182:	4a21      	ldr	r2, [pc, #132]	; (8010208 <LoRaMacHandleRequestEvents+0xc0>)
 8010184:	5c9b      	ldrb	r3, [r3, r2]
 8010186:	2204      	movs	r2, #4
 8010188:	4013      	ands	r3, r2
 801018a:	b2db      	uxtb	r3, r3
 801018c:	2b00      	cmp	r3, #0
 801018e:	d005      	beq.n	801019c <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8010190:	4b1c      	ldr	r3, [pc, #112]	; (8010204 <LoRaMacHandleRequestEvents+0xbc>)
 8010192:	4a1d      	ldr	r2, [pc, #116]	; (8010208 <LoRaMacHandleRequestEvents+0xc0>)
 8010194:	5c99      	ldrb	r1, [r3, r2]
 8010196:	2004      	movs	r0, #4
 8010198:	4381      	bics	r1, r0
 801019a:	5499      	strb	r1, [r3, r2]
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 801019c:	2001      	movs	r0, #1
 801019e:	f7ff ffbf 	bl	8010120 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 80101a2:	1d3b      	adds	r3, r7, #4
 80101a4:	781b      	ldrb	r3, [r3, #0]
 80101a6:	2201      	movs	r2, #1
 80101a8:	4013      	ands	r3, r2
 80101aa:	b2db      	uxtb	r3, r3
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d007      	beq.n	80101c0 <LoRaMacHandleRequestEvents+0x78>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 80101b0:	4a14      	ldr	r2, [pc, #80]	; (8010204 <LoRaMacHandleRequestEvents+0xbc>)
 80101b2:	23d1      	movs	r3, #209	; 0xd1
 80101b4:	009b      	lsls	r3, r3, #2
 80101b6:	58d3      	ldr	r3, [r2, r3]
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	4a14      	ldr	r2, [pc, #80]	; (801020c <LoRaMacHandleRequestEvents+0xc4>)
 80101bc:	0010      	movs	r0, r2
 80101be:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 80101c0:	1d3b      	adds	r3, r7, #4
 80101c2:	781b      	ldrb	r3, [r3, #0]
 80101c4:	2204      	movs	r2, #4
 80101c6:	4013      	ands	r3, r2
 80101c8:	b2db      	uxtb	r3, r3
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d00d      	beq.n	80101ea <LoRaMacHandleRequestEvents+0xa2>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 80101ce:	4b10      	ldr	r3, [pc, #64]	; (8010210 <LoRaMacHandleRequestEvents+0xc8>)
 80101d0:	0018      	movs	r0, r3
 80101d2:	f005 f925 	bl	8015420 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 80101d6:	f005 f985 	bl	80154e4 <LoRaMacConfirmQueueGetCnt>
 80101da:	1e03      	subs	r3, r0, #0
 80101dc:	d005      	beq.n	80101ea <LoRaMacHandleRequestEvents+0xa2>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 80101de:	4b09      	ldr	r3, [pc, #36]	; (8010204 <LoRaMacHandleRequestEvents+0xbc>)
 80101e0:	4a09      	ldr	r2, [pc, #36]	; (8010208 <LoRaMacHandleRequestEvents+0xc0>)
 80101e2:	5c99      	ldrb	r1, [r3, r2]
 80101e4:	2004      	movs	r0, #4
 80101e6:	4301      	orrs	r1, r0
 80101e8:	5499      	strb	r1, [r3, r2]
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 80101ea:	f004 fba8 	bl	801493e <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 80101ee:	4b05      	ldr	r3, [pc, #20]	; (8010204 <LoRaMacHandleRequestEvents+0xbc>)
 80101f0:	4a05      	ldr	r2, [pc, #20]	; (8010208 <LoRaMacHandleRequestEvents+0xc0>)
 80101f2:	5c99      	ldrb	r1, [r3, r2]
 80101f4:	2020      	movs	r0, #32
 80101f6:	4381      	bics	r1, r0
 80101f8:	5499      	strb	r1, [r3, r2]
    }
}
 80101fa:	46c0      	nop			; (mov r8, r8)
 80101fc:	46bd      	mov	sp, r7
 80101fe:	b002      	add	sp, #8
 8010200:	bd80      	pop	{r7, pc}
 8010202:	46c0      	nop			; (mov r8, r8)
 8010204:	200005b4 	.word	0x200005b4
 8010208:	00000481 	.word	0x00000481
 801020c:	200009f0 	.word	0x200009f0
 8010210:	20000a04 	.word	0x20000a04

08010214 <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 8010214:	b580      	push	{r7, lr}
 8010216:	b082      	sub	sp, #8
 8010218:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 801021a:	4a0b      	ldr	r2, [pc, #44]	; (8010248 <LoRaMacHandleScheduleUplinkEvent+0x34>)
 801021c:	23d0      	movs	r3, #208	; 0xd0
 801021e:	009b      	lsls	r3, r3, #2
 8010220:	58d3      	ldr	r3, [r2, r3]
 8010222:	2b00      	cmp	r3, #0
 8010224:	d10c      	bne.n	8010240 <LoRaMacHandleScheduleUplinkEvent+0x2c>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 8010226:	1dfb      	adds	r3, r7, #7
 8010228:	2200      	movs	r2, #0
 801022a:	701a      	strb	r2, [r3, #0]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 801022c:	1dfb      	adds	r3, r7, #7
 801022e:	0018      	movs	r0, r3
 8010230:	f004 fe94 	bl	8014f5c <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 8010234:	1dfb      	adds	r3, r7, #7
 8010236:	781b      	ldrb	r3, [r3, #0]
 8010238:	2b00      	cmp	r3, #0
 801023a:	d001      	beq.n	8010240 <LoRaMacHandleScheduleUplinkEvent+0x2c>
        {// Setup MLME indication
            SetMlmeScheduleUplinkIndication( );
 801023c:	f000 fc78 	bl	8010b30 <SetMlmeScheduleUplinkIndication>
        }
    }
}
 8010240:	46c0      	nop			; (mov r8, r8)
 8010242:	46bd      	mov	sp, r7
 8010244:	b002      	add	sp, #8
 8010246:	bd80      	pop	{r7, pc}
 8010248:	200005b4 	.word	0x200005b4

0801024c <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 801024c:	b580      	push	{r7, lr}
 801024e:	b088      	sub	sp, #32
 8010250:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8010252:	4b26      	ldr	r3, [pc, #152]	; (80102ec <LoRaMacHandleIndicationEvents+0xa0>)
 8010254:	4a26      	ldr	r2, [pc, #152]	; (80102f0 <LoRaMacHandleIndicationEvents+0xa4>)
 8010256:	5c9b      	ldrb	r3, [r3, r2]
 8010258:	2208      	movs	r2, #8
 801025a:	4013      	ands	r3, r2
 801025c:	b2db      	uxtb	r3, r3
 801025e:	2b00      	cmp	r3, #0
 8010260:	d00d      	beq.n	801027e <LoRaMacHandleIndicationEvents+0x32>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8010262:	4b22      	ldr	r3, [pc, #136]	; (80102ec <LoRaMacHandleIndicationEvents+0xa0>)
 8010264:	4a22      	ldr	r2, [pc, #136]	; (80102f0 <LoRaMacHandleIndicationEvents+0xa4>)
 8010266:	5c99      	ldrb	r1, [r3, r2]
 8010268:	2008      	movs	r0, #8
 801026a:	4381      	bics	r1, r0
 801026c:	5499      	strb	r1, [r3, r2]
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
 801026e:	4a1f      	ldr	r2, [pc, #124]	; (80102ec <LoRaMacHandleIndicationEvents+0xa0>)
 8010270:	23d1      	movs	r3, #209	; 0xd1
 8010272:	009b      	lsls	r3, r3, #2
 8010274:	58d3      	ldr	r3, [r2, r3]
 8010276:	68db      	ldr	r3, [r3, #12]
 8010278:	4a1e      	ldr	r2, [pc, #120]	; (80102f4 <LoRaMacHandleIndicationEvents+0xa8>)
 801027a:	0010      	movs	r0, r2
 801027c:	4798      	blx	r3
    }

    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 801027e:	4b1b      	ldr	r3, [pc, #108]	; (80102ec <LoRaMacHandleIndicationEvents+0xa0>)
 8010280:	4a1b      	ldr	r2, [pc, #108]	; (80102f0 <LoRaMacHandleIndicationEvents+0xa4>)
 8010282:	5c9b      	ldrb	r3, [r3, r2]
 8010284:	2210      	movs	r2, #16
 8010286:	4013      	ands	r3, r2
 8010288:	b2db      	uxtb	r3, r3
 801028a:	2b00      	cmp	r3, #0
 801028c:	d013      	beq.n	80102b6 <LoRaMacHandleIndicationEvents+0x6a>
    {
        MlmeIndication_t schduleUplinkIndication;
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 801028e:	1d3b      	adds	r3, r7, #4
 8010290:	2207      	movs	r2, #7
 8010292:	701a      	strb	r2, [r3, #0]
        schduleUplinkIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8010294:	1d3b      	adds	r3, r7, #4
 8010296:	2200      	movs	r2, #0
 8010298:	705a      	strb	r2, [r3, #1]

        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication );
 801029a:	4a14      	ldr	r2, [pc, #80]	; (80102ec <LoRaMacHandleIndicationEvents+0xa0>)
 801029c:	23d1      	movs	r3, #209	; 0xd1
 801029e:	009b      	lsls	r3, r3, #2
 80102a0:	58d3      	ldr	r3, [r2, r3]
 80102a2:	68db      	ldr	r3, [r3, #12]
 80102a4:	1d3a      	adds	r2, r7, #4
 80102a6:	0010      	movs	r0, r2
 80102a8:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 80102aa:	4b10      	ldr	r3, [pc, #64]	; (80102ec <LoRaMacHandleIndicationEvents+0xa0>)
 80102ac:	4a10      	ldr	r2, [pc, #64]	; (80102f0 <LoRaMacHandleIndicationEvents+0xa4>)
 80102ae:	5c99      	ldrb	r1, [r3, r2]
 80102b0:	2010      	movs	r0, #16
 80102b2:	4381      	bics	r1, r0
 80102b4:	5499      	strb	r1, [r3, r2]
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80102b6:	4b0d      	ldr	r3, [pc, #52]	; (80102ec <LoRaMacHandleIndicationEvents+0xa0>)
 80102b8:	4a0d      	ldr	r2, [pc, #52]	; (80102f0 <LoRaMacHandleIndicationEvents+0xa4>)
 80102ba:	5c9b      	ldrb	r3, [r3, r2]
 80102bc:	2202      	movs	r2, #2
 80102be:	4013      	ands	r3, r2
 80102c0:	b2db      	uxtb	r3, r3
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d00d      	beq.n	80102e2 <LoRaMacHandleIndicationEvents+0x96>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 80102c6:	4b09      	ldr	r3, [pc, #36]	; (80102ec <LoRaMacHandleIndicationEvents+0xa0>)
 80102c8:	4a09      	ldr	r2, [pc, #36]	; (80102f0 <LoRaMacHandleIndicationEvents+0xa4>)
 80102ca:	5c99      	ldrb	r1, [r3, r2]
 80102cc:	2002      	movs	r0, #2
 80102ce:	4381      	bics	r1, r0
 80102d0:	5499      	strb	r1, [r3, r2]
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication );
 80102d2:	4a06      	ldr	r2, [pc, #24]	; (80102ec <LoRaMacHandleIndicationEvents+0xa0>)
 80102d4:	23d1      	movs	r3, #209	; 0xd1
 80102d6:	009b      	lsls	r3, r3, #2
 80102d8:	58d3      	ldr	r3, [r2, r3]
 80102da:	685b      	ldr	r3, [r3, #4]
 80102dc:	4a06      	ldr	r2, [pc, #24]	; (80102f8 <LoRaMacHandleIndicationEvents+0xac>)
 80102de:	0010      	movs	r0, r2
 80102e0:	4798      	blx	r3
    }
}
 80102e2:	46c0      	nop			; (mov r8, r8)
 80102e4:	46bd      	mov	sp, r7
 80102e6:	b008      	add	sp, #32
 80102e8:	bd80      	pop	{r7, pc}
 80102ea:	46c0      	nop			; (mov r8, r8)
 80102ec:	200005b4 	.word	0x200005b4
 80102f0:	00000481 	.word	0x00000481
 80102f4:	20000a18 	.word	0x20000a18
 80102f8:	200009d0 	.word	0x200009d0

080102fc <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 80102fc:	b590      	push	{r4, r7, lr}
 80102fe:	b083      	sub	sp, #12
 8010300:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8010302:	4b39      	ldr	r3, [pc, #228]	; (80103e8 <LoRaMacHandleMcpsRequest+0xec>)
 8010304:	4a39      	ldr	r2, [pc, #228]	; (80103ec <LoRaMacHandleMcpsRequest+0xf0>)
 8010306:	5c9b      	ldrb	r3, [r3, r2]
 8010308:	2201      	movs	r2, #1
 801030a:	4013      	ands	r3, r2
 801030c:	b2db      	uxtb	r3, r3
 801030e:	2b00      	cmp	r3, #0
 8010310:	d066      	beq.n	80103e0 <LoRaMacHandleMcpsRequest+0xe4>
    {
        bool stopRetransmission = false;
 8010312:	1dfb      	adds	r3, r7, #7
 8010314:	2200      	movs	r2, #0
 8010316:	701a      	strb	r2, [r3, #0]
        bool waitForRetransmission = false;
 8010318:	1dbb      	adds	r3, r7, #6
 801031a:	2200      	movs	r2, #0
 801031c:	701a      	strb	r2, [r3, #0]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 801031e:	4b32      	ldr	r3, [pc, #200]	; (80103e8 <LoRaMacHandleMcpsRequest+0xec>)
 8010320:	4a33      	ldr	r2, [pc, #204]	; (80103f0 <LoRaMacHandleMcpsRequest+0xf4>)
 8010322:	5c9b      	ldrb	r3, [r3, r2]
 8010324:	2b00      	cmp	r3, #0
 8010326:	d004      	beq.n	8010332 <LoRaMacHandleMcpsRequest+0x36>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 8010328:	4b2f      	ldr	r3, [pc, #188]	; (80103e8 <LoRaMacHandleMcpsRequest+0xec>)
 801032a:	4a31      	ldr	r2, [pc, #196]	; (80103f0 <LoRaMacHandleMcpsRequest+0xf4>)
 801032c:	5c9b      	ldrb	r3, [r3, r2]
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 801032e:	2b03      	cmp	r3, #3
 8010330:	d105      	bne.n	801033e <LoRaMacHandleMcpsRequest+0x42>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 8010332:	1dfc      	adds	r4, r7, #7
 8010334:	f002 fb70 	bl	8012a18 <CheckRetransUnconfirmedUplink>
 8010338:	0003      	movs	r3, r0
 801033a:	7023      	strb	r3, [r4, #0]
 801033c:	e026      	b.n	801038c <LoRaMacHandleMcpsRequest+0x90>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 801033e:	4b2a      	ldr	r3, [pc, #168]	; (80103e8 <LoRaMacHandleMcpsRequest+0xec>)
 8010340:	4a2b      	ldr	r2, [pc, #172]	; (80103f0 <LoRaMacHandleMcpsRequest+0xf4>)
 8010342:	5c9b      	ldrb	r3, [r3, r2]
 8010344:	2b01      	cmp	r3, #1
 8010346:	d121      	bne.n	801038c <LoRaMacHandleMcpsRequest+0x90>
        {
            if( MacCtx.AckTimeoutRetry == true )
 8010348:	4b27      	ldr	r3, [pc, #156]	; (80103e8 <LoRaMacHandleMcpsRequest+0xec>)
 801034a:	4a2a      	ldr	r2, [pc, #168]	; (80103f4 <LoRaMacHandleMcpsRequest+0xf8>)
 801034c:	5c9b      	ldrb	r3, [r3, r2]
 801034e:	2b00      	cmp	r3, #0
 8010350:	d019      	beq.n	8010386 <LoRaMacHandleMcpsRequest+0x8a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 8010352:	1dfc      	adds	r4, r7, #7
 8010354:	f002 fb94 	bl	8012a80 <CheckRetransConfirmedUplink>
 8010358:	0003      	movs	r3, r0
 801035a:	7023      	strb	r3, [r4, #0]

                if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 801035c:	4b22      	ldr	r3, [pc, #136]	; (80103e8 <LoRaMacHandleMcpsRequest+0xec>)
 801035e:	4a26      	ldr	r2, [pc, #152]	; (80103f8 <LoRaMacHandleMcpsRequest+0xfc>)
 8010360:	589a      	ldr	r2, [r3, r2]
 8010362:	23b1      	movs	r3, #177	; 0xb1
 8010364:	005b      	lsls	r3, r3, #1
 8010366:	5cd3      	ldrb	r3, [r2, r3]
 8010368:	2b00      	cmp	r3, #0
 801036a:	d10f      	bne.n	801038c <LoRaMacHandleMcpsRequest+0x90>
                {
                    if( stopRetransmission == false )
 801036c:	1dfb      	adds	r3, r7, #7
 801036e:	781b      	ldrb	r3, [r3, #0]
 8010370:	2201      	movs	r2, #1
 8010372:	4053      	eors	r3, r2
 8010374:	b2db      	uxtb	r3, r3
 8010376:	2b00      	cmp	r3, #0
 8010378:	d002      	beq.n	8010380 <LoRaMacHandleMcpsRequest+0x84>
                    {
                        AckTimeoutRetriesProcess( );
 801037a:	f002 fbf5 	bl	8012b68 <AckTimeoutRetriesProcess>
 801037e:	e005      	b.n	801038c <LoRaMacHandleMcpsRequest+0x90>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 8010380:	f002 fc40 	bl	8012c04 <AckTimeoutRetriesFinalize>
 8010384:	e002      	b.n	801038c <LoRaMacHandleMcpsRequest+0x90>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 8010386:	1dbb      	adds	r3, r7, #6
 8010388:	2201      	movs	r2, #1
 801038a:	701a      	strb	r2, [r3, #0]
            }
        }

        if( stopRetransmission == true )
 801038c:	1dfb      	adds	r3, r7, #7
 801038e:	781b      	ldrb	r3, [r3, #0]
 8010390:	2b00      	cmp	r3, #0
 8010392:	d011      	beq.n	80103b8 <LoRaMacHandleMcpsRequest+0xbc>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 8010394:	4b19      	ldr	r3, [pc, #100]	; (80103fc <LoRaMacHandleMcpsRequest+0x100>)
 8010396:	0018      	movs	r0, r3
 8010398:	f00c fc8c 	bl	801ccb4 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 801039c:	4a12      	ldr	r2, [pc, #72]	; (80103e8 <LoRaMacHandleMcpsRequest+0xec>)
 801039e:	23d0      	movs	r3, #208	; 0xd0
 80103a0:	009b      	lsls	r3, r3, #2
 80103a2:	58d3      	ldr	r3, [r2, r3]
 80103a4:	2220      	movs	r2, #32
 80103a6:	4393      	bics	r3, r2
 80103a8:	0019      	movs	r1, r3
 80103aa:	4a0f      	ldr	r2, [pc, #60]	; (80103e8 <LoRaMacHandleMcpsRequest+0xec>)
 80103ac:	23d0      	movs	r3, #208	; 0xd0
 80103ae:	009b      	lsls	r3, r3, #2
 80103b0:	50d1      	str	r1, [r2, r3]
            StopRetransmission( );
 80103b2:	f002 fb8d 	bl	8012ad0 <StopRetransmission>
            MacCtx.AckTimeoutRetry = false;
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 80103b6:	e013      	b.n	80103e0 <LoRaMacHandleMcpsRequest+0xe4>
        else if( waitForRetransmission == false )
 80103b8:	1dbb      	adds	r3, r7, #6
 80103ba:	781b      	ldrb	r3, [r3, #0]
 80103bc:	2201      	movs	r2, #1
 80103be:	4053      	eors	r3, r2
 80103c0:	b2db      	uxtb	r3, r3
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d00c      	beq.n	80103e0 <LoRaMacHandleMcpsRequest+0xe4>
            MacCtx.MacFlags.Bits.MacDone = 0;
 80103c6:	4b08      	ldr	r3, [pc, #32]	; (80103e8 <LoRaMacHandleMcpsRequest+0xec>)
 80103c8:	4a08      	ldr	r2, [pc, #32]	; (80103ec <LoRaMacHandleMcpsRequest+0xf0>)
 80103ca:	5c99      	ldrb	r1, [r3, r2]
 80103cc:	2020      	movs	r0, #32
 80103ce:	4381      	bics	r1, r0
 80103d0:	5499      	strb	r1, [r3, r2]
            MacCtx.AckTimeoutRetry = false;
 80103d2:	4b05      	ldr	r3, [pc, #20]	; (80103e8 <LoRaMacHandleMcpsRequest+0xec>)
 80103d4:	4a07      	ldr	r2, [pc, #28]	; (80103f4 <LoRaMacHandleMcpsRequest+0xf8>)
 80103d6:	2100      	movs	r1, #0
 80103d8:	5499      	strb	r1, [r3, r2]
            OnTxDelayedTimerEvent( NULL );
 80103da:	2000      	movs	r0, #0
 80103dc:	f000 f8a2 	bl	8010524 <OnTxDelayedTimerEvent>
}
 80103e0:	46c0      	nop			; (mov r8, r8)
 80103e2:	46bd      	mov	sp, r7
 80103e4:	b003      	add	sp, #12
 80103e6:	bd90      	pop	{r4, r7, pc}
 80103e8:	200005b4 	.word	0x200005b4
 80103ec:	00000481 	.word	0x00000481
 80103f0:	0000043c 	.word	0x0000043c
 80103f4:	00000413 	.word	0x00000413
 80103f8:	00000484 	.word	0x00000484
 80103fc:	2000091c 	.word	0x2000091c

08010400 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 8010400:	b580      	push	{r7, lr}
 8010402:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8010404:	4b1d      	ldr	r3, [pc, #116]	; (801047c <LoRaMacHandleMlmeRequest+0x7c>)
 8010406:	4a1e      	ldr	r2, [pc, #120]	; (8010480 <LoRaMacHandleMlmeRequest+0x80>)
 8010408:	5c9b      	ldrb	r3, [r3, r2]
 801040a:	2204      	movs	r2, #4
 801040c:	4013      	ands	r3, r2
 801040e:	b2db      	uxtb	r3, r3
 8010410:	2b00      	cmp	r3, #0
 8010412:	d02f      	beq.n	8010474 <LoRaMacHandleMlmeRequest+0x74>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8010414:	2001      	movs	r0, #1
 8010416:	f004 ffe9 	bl	80153ec <LoRaMacConfirmQueueIsCmdActive>
 801041a:	1e03      	subs	r3, r0, #0
 801041c:	d015      	beq.n	801044a <LoRaMacHandleMlmeRequest+0x4a>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 801041e:	2001      	movs	r0, #1
 8010420:	f004 ff7c 	bl	801531c <LoRaMacConfirmQueueGetStatus>
 8010424:	1e03      	subs	r3, r0, #0
 8010426:	d104      	bne.n	8010432 <LoRaMacHandleMlmeRequest+0x32>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 8010428:	4a14      	ldr	r2, [pc, #80]	; (801047c <LoRaMacHandleMlmeRequest+0x7c>)
 801042a:	2382      	movs	r3, #130	; 0x82
 801042c:	00db      	lsls	r3, r3, #3
 801042e:	2100      	movs	r1, #0
 8010430:	54d1      	strb	r1, [r2, r3]
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010432:	4a12      	ldr	r2, [pc, #72]	; (801047c <LoRaMacHandleMlmeRequest+0x7c>)
 8010434:	23d0      	movs	r3, #208	; 0xd0
 8010436:	009b      	lsls	r3, r3, #2
 8010438:	58d3      	ldr	r3, [r2, r3]
 801043a:	2202      	movs	r2, #2
 801043c:	4393      	bics	r3, r2
 801043e:	0019      	movs	r1, r3
 8010440:	4a0e      	ldr	r2, [pc, #56]	; (801047c <LoRaMacHandleMlmeRequest+0x7c>)
 8010442:	23d0      	movs	r3, #208	; 0xd0
 8010444:	009b      	lsls	r3, r3, #2
 8010446:	50d1      	str	r1, [r2, r3]
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
    }
}
 8010448:	e014      	b.n	8010474 <LoRaMacHandleMlmeRequest+0x74>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 801044a:	2005      	movs	r0, #5
 801044c:	f004 ffce 	bl	80153ec <LoRaMacConfirmQueueIsCmdActive>
 8010450:	1e03      	subs	r3, r0, #0
 8010452:	d104      	bne.n	801045e <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 8010454:	2006      	movs	r0, #6
 8010456:	f004 ffc9 	bl	80153ec <LoRaMacConfirmQueueIsCmdActive>
 801045a:	1e03      	subs	r3, r0, #0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 801045c:	d00a      	beq.n	8010474 <LoRaMacHandleMlmeRequest+0x74>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 801045e:	4a07      	ldr	r2, [pc, #28]	; (801047c <LoRaMacHandleMlmeRequest+0x7c>)
 8010460:	23d0      	movs	r3, #208	; 0xd0
 8010462:	009b      	lsls	r3, r3, #2
 8010464:	58d3      	ldr	r3, [r2, r3]
 8010466:	2202      	movs	r2, #2
 8010468:	4393      	bics	r3, r2
 801046a:	0019      	movs	r1, r3
 801046c:	4a03      	ldr	r2, [pc, #12]	; (801047c <LoRaMacHandleMlmeRequest+0x7c>)
 801046e:	23d0      	movs	r3, #208	; 0xd0
 8010470:	009b      	lsls	r3, r3, #2
 8010472:	50d1      	str	r1, [r2, r3]
}
 8010474:	46c0      	nop			; (mov r8, r8)
 8010476:	46bd      	mov	sp, r7
 8010478:	bd80      	pop	{r7, pc}
 801047a:	46c0      	nop			; (mov r8, r8)
 801047c:	200005b4 	.word	0x200005b4
 8010480:	00000481 	.word	0x00000481

08010484 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 8010484:	b580      	push	{r7, lr}
 8010486:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8010488:	200c      	movs	r0, #12
 801048a:	f004 ffaf 	bl	80153ec <LoRaMacConfirmQueueIsCmdActive>
 801048e:	1e03      	subs	r3, r0, #0
 8010490:	d01c      	beq.n	80104cc <LoRaMacCheckForBeaconAcquisition+0x48>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8010492:	4b10      	ldr	r3, [pc, #64]	; (80104d4 <LoRaMacCheckForBeaconAcquisition+0x50>)
 8010494:	4a10      	ldr	r2, [pc, #64]	; (80104d8 <LoRaMacCheckForBeaconAcquisition+0x54>)
 8010496:	5c9b      	ldrb	r3, [r3, r2]
 8010498:	2201      	movs	r2, #1
 801049a:	4013      	ands	r3, r2
 801049c:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d114      	bne.n	80104cc <LoRaMacCheckForBeaconAcquisition+0x48>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80104a2:	4b0c      	ldr	r3, [pc, #48]	; (80104d4 <LoRaMacCheckForBeaconAcquisition+0x50>)
 80104a4:	4a0c      	ldr	r2, [pc, #48]	; (80104d8 <LoRaMacCheckForBeaconAcquisition+0x54>)
 80104a6:	5c9b      	ldrb	r3, [r3, r2]
 80104a8:	2204      	movs	r2, #4
 80104aa:	4013      	ands	r3, r2
 80104ac:	b2db      	uxtb	r3, r3
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d00c      	beq.n	80104cc <LoRaMacCheckForBeaconAcquisition+0x48>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80104b2:	4a08      	ldr	r2, [pc, #32]	; (80104d4 <LoRaMacCheckForBeaconAcquisition+0x50>)
 80104b4:	23d0      	movs	r3, #208	; 0xd0
 80104b6:	009b      	lsls	r3, r3, #2
 80104b8:	58d3      	ldr	r3, [r2, r3]
 80104ba:	2202      	movs	r2, #2
 80104bc:	4393      	bics	r3, r2
 80104be:	0019      	movs	r1, r3
 80104c0:	4a04      	ldr	r2, [pc, #16]	; (80104d4 <LoRaMacCheckForBeaconAcquisition+0x50>)
 80104c2:	23d0      	movs	r3, #208	; 0xd0
 80104c4:	009b      	lsls	r3, r3, #2
 80104c6:	50d1      	str	r1, [r2, r3]
            return 0x01;
 80104c8:	2301      	movs	r3, #1
 80104ca:	e000      	b.n	80104ce <LoRaMacCheckForBeaconAcquisition+0x4a>
        }
    }
    return 0x00;
 80104cc:	2300      	movs	r3, #0
}
 80104ce:	0018      	movs	r0, r3
 80104d0:	46bd      	mov	sp, r7
 80104d2:	bd80      	pop	{r7, pc}
 80104d4:	200005b4 	.word	0x200005b4
 80104d8:	00000481 	.word	0x00000481

080104dc <LoRaMacCheckForRxAbort>:

static void LoRaMacCheckForRxAbort( void )
{
 80104dc:	b580      	push	{r7, lr}
 80104de:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 80104e0:	4a0f      	ldr	r2, [pc, #60]	; (8010520 <LoRaMacCheckForRxAbort+0x44>)
 80104e2:	23d0      	movs	r3, #208	; 0xd0
 80104e4:	009b      	lsls	r3, r3, #2
 80104e6:	58d3      	ldr	r3, [r2, r3]
 80104e8:	2280      	movs	r2, #128	; 0x80
 80104ea:	4013      	ands	r3, r2
 80104ec:	d015      	beq.n	801051a <LoRaMacCheckForRxAbort+0x3e>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 80104ee:	4a0c      	ldr	r2, [pc, #48]	; (8010520 <LoRaMacCheckForRxAbort+0x44>)
 80104f0:	23d0      	movs	r3, #208	; 0xd0
 80104f2:	009b      	lsls	r3, r3, #2
 80104f4:	58d3      	ldr	r3, [r2, r3]
 80104f6:	2280      	movs	r2, #128	; 0x80
 80104f8:	4393      	bics	r3, r2
 80104fa:	0019      	movs	r1, r3
 80104fc:	4a08      	ldr	r2, [pc, #32]	; (8010520 <LoRaMacCheckForRxAbort+0x44>)
 80104fe:	23d0      	movs	r3, #208	; 0xd0
 8010500:	009b      	lsls	r3, r3, #2
 8010502:	50d1      	str	r1, [r2, r3]
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010504:	4a06      	ldr	r2, [pc, #24]	; (8010520 <LoRaMacCheckForRxAbort+0x44>)
 8010506:	23d0      	movs	r3, #208	; 0xd0
 8010508:	009b      	lsls	r3, r3, #2
 801050a:	58d3      	ldr	r3, [r2, r3]
 801050c:	2202      	movs	r2, #2
 801050e:	4393      	bics	r3, r2
 8010510:	0019      	movs	r1, r3
 8010512:	4a03      	ldr	r2, [pc, #12]	; (8010520 <LoRaMacCheckForRxAbort+0x44>)
 8010514:	23d0      	movs	r3, #208	; 0xd0
 8010516:	009b      	lsls	r3, r3, #2
 8010518:	50d1      	str	r1, [r2, r3]
    }
}
 801051a:	46c0      	nop			; (mov r8, r8)
 801051c:	46bd      	mov	sp, r7
 801051e:	bd80      	pop	{r7, pc}
 8010520:	200005b4 	.word	0x200005b4

08010524 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 8010524:	b580      	push	{r7, lr}
 8010526:	b082      	sub	sp, #8
 8010528:	af00      	add	r7, sp, #0
 801052a:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 801052c:	4b19      	ldr	r3, [pc, #100]	; (8010594 <OnTxDelayedTimerEvent+0x70>)
 801052e:	0018      	movs	r0, r3
 8010530:	f00c fbc0 	bl	801ccb4 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8010534:	4a18      	ldr	r2, [pc, #96]	; (8010598 <OnTxDelayedTimerEvent+0x74>)
 8010536:	23d0      	movs	r3, #208	; 0xd0
 8010538:	009b      	lsls	r3, r3, #2
 801053a:	58d3      	ldr	r3, [r2, r3]
 801053c:	2220      	movs	r2, #32
 801053e:	4393      	bics	r3, r2
 8010540:	0019      	movs	r1, r3
 8010542:	4a15      	ldr	r2, [pc, #84]	; (8010598 <OnTxDelayedTimerEvent+0x74>)
 8010544:	23d0      	movs	r3, #208	; 0xd0
 8010546:	009b      	lsls	r3, r3, #2
 8010548:	50d1      	str	r1, [r2, r3]

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 801054a:	2001      	movs	r0, #1
 801054c:	f001 fb5a 	bl	8011c04 <ScheduleTx>
 8010550:	1e03      	subs	r3, r0, #0
 8010552:	d01a      	beq.n	801058a <OnTxDelayedTimerEvent+0x66>
 8010554:	2b0b      	cmp	r3, #11
 8010556:	d018      	beq.n	801058a <OnTxDelayedTimerEvent+0x66>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8010558:	4b0f      	ldr	r3, [pc, #60]	; (8010598 <OnTxDelayedTimerEvent+0x74>)
 801055a:	4a10      	ldr	r2, [pc, #64]	; (801059c <OnTxDelayedTimerEvent+0x78>)
 801055c:	589b      	ldr	r3, [r3, r2]
 801055e:	2285      	movs	r2, #133	; 0x85
 8010560:	569b      	ldrsb	r3, [r3, r2]
 8010562:	b2d9      	uxtb	r1, r3
 8010564:	4b0c      	ldr	r3, [pc, #48]	; (8010598 <OnTxDelayedTimerEvent+0x74>)
 8010566:	4a0e      	ldr	r2, [pc, #56]	; (80105a0 <OnTxDelayedTimerEvent+0x7c>)
 8010568:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 801056a:	4b0b      	ldr	r3, [pc, #44]	; (8010598 <OnTxDelayedTimerEvent+0x74>)
 801056c:	4a0d      	ldr	r2, [pc, #52]	; (80105a4 <OnTxDelayedTimerEvent+0x80>)
 801056e:	5c99      	ldrb	r1, [r3, r2]
 8010570:	4b09      	ldr	r3, [pc, #36]	; (8010598 <OnTxDelayedTimerEvent+0x74>)
 8010572:	4a0d      	ldr	r2, [pc, #52]	; (80105a8 <OnTxDelayedTimerEvent+0x84>)
 8010574:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8010576:	4b08      	ldr	r3, [pc, #32]	; (8010598 <OnTxDelayedTimerEvent+0x74>)
 8010578:	4a0c      	ldr	r2, [pc, #48]	; (80105ac <OnTxDelayedTimerEvent+0x88>)
 801057a:	2109      	movs	r1, #9
 801057c:	5499      	strb	r1, [r3, r2]
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 801057e:	2009      	movs	r0, #9
 8010580:	f004 fefa 	bl	8015378 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 8010584:	f002 faa4 	bl	8012ad0 <StopRetransmission>
            break;
 8010588:	e000      	b.n	801058c <OnTxDelayedTimerEvent+0x68>
            break;
 801058a:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 801058c:	46c0      	nop			; (mov r8, r8)
 801058e:	46bd      	mov	sp, r7
 8010590:	b002      	add	sp, #8
 8010592:	bd80      	pop	{r7, pc}
 8010594:	2000091c 	.word	0x2000091c
 8010598:	200005b4 	.word	0x200005b4
 801059c:	00000484 	.word	0x00000484
 80105a0:	0000043e 	.word	0x0000043e
 80105a4:	00000412 	.word	0x00000412
 80105a8:	00000441 	.word	0x00000441
 80105ac:	0000043d 	.word	0x0000043d

080105b0 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 80105b0:	b580      	push	{r7, lr}
 80105b2:	b082      	sub	sp, #8
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 80105b8:	4b19      	ldr	r3, [pc, #100]	; (8010620 <OnRxWindow1TimerEvent+0x70>)
 80105ba:	4a1a      	ldr	r2, [pc, #104]	; (8010624 <OnRxWindow1TimerEvent+0x74>)
 80105bc:	5c99      	ldrb	r1, [r3, r2]
 80105be:	4a18      	ldr	r2, [pc, #96]	; (8010620 <OnRxWindow1TimerEvent+0x70>)
 80105c0:	23ee      	movs	r3, #238	; 0xee
 80105c2:	009b      	lsls	r3, r3, #2
 80105c4:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow1Config.DrOffset = MacCtx.NvmCtx->MacParams.Rx1DrOffset;
 80105c6:	4b16      	ldr	r3, [pc, #88]	; (8010620 <OnRxWindow1TimerEvent+0x70>)
 80105c8:	4a17      	ldr	r2, [pc, #92]	; (8010628 <OnRxWindow1TimerEvent+0x78>)
 80105ca:	589b      	ldr	r3, [r3, r2]
 80105cc:	22a5      	movs	r2, #165	; 0xa5
 80105ce:	5c9b      	ldrb	r3, [r3, r2]
 80105d0:	b259      	sxtb	r1, r3
 80105d2:	4b13      	ldr	r3, [pc, #76]	; (8010620 <OnRxWindow1TimerEvent+0x70>)
 80105d4:	4a15      	ldr	r2, [pc, #84]	; (801062c <OnRxWindow1TimerEvent+0x7c>)
 80105d6:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80105d8:	4b11      	ldr	r3, [pc, #68]	; (8010620 <OnRxWindow1TimerEvent+0x70>)
 80105da:	4a13      	ldr	r2, [pc, #76]	; (8010628 <OnRxWindow1TimerEvent+0x78>)
 80105dc:	589b      	ldr	r3, [r3, r2]
 80105de:	22b9      	movs	r2, #185	; 0xb9
 80105e0:	5c99      	ldrb	r1, [r3, r2]
 80105e2:	4a0f      	ldr	r2, [pc, #60]	; (8010620 <OnRxWindow1TimerEvent+0x70>)
 80105e4:	23f2      	movs	r3, #242	; 0xf2
 80105e6:	009b      	lsls	r3, r3, #2
 80105e8:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow1Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 80105ea:	4b0d      	ldr	r3, [pc, #52]	; (8010620 <OnRxWindow1TimerEvent+0x70>)
 80105ec:	4a0e      	ldr	r2, [pc, #56]	; (8010628 <OnRxWindow1TimerEvent+0x78>)
 80105ee:	589b      	ldr	r3, [r3, r2]
 80105f0:	22ca      	movs	r2, #202	; 0xca
 80105f2:	5c99      	ldrb	r1, [r3, r2]
 80105f4:	4b0a      	ldr	r3, [pc, #40]	; (8010620 <OnRxWindow1TimerEvent+0x70>)
 80105f6:	4a0e      	ldr	r2, [pc, #56]	; (8010630 <OnRxWindow1TimerEvent+0x80>)
 80105f8:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.RxContinuous = false;
 80105fa:	4b09      	ldr	r3, [pc, #36]	; (8010620 <OnRxWindow1TimerEvent+0x70>)
 80105fc:	4a0d      	ldr	r2, [pc, #52]	; (8010634 <OnRxWindow1TimerEvent+0x84>)
 80105fe:	2100      	movs	r1, #0
 8010600:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 8010602:	4b07      	ldr	r3, [pc, #28]	; (8010620 <OnRxWindow1TimerEvent+0x70>)
 8010604:	4a0c      	ldr	r2, [pc, #48]	; (8010638 <OnRxWindow1TimerEvent+0x88>)
 8010606:	2100      	movs	r1, #0
 8010608:	5499      	strb	r1, [r3, r2]

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 801060a:	4a0c      	ldr	r2, [pc, #48]	; (801063c <OnRxWindow1TimerEvent+0x8c>)
 801060c:	4b0c      	ldr	r3, [pc, #48]	; (8010640 <OnRxWindow1TimerEvent+0x90>)
 801060e:	0011      	movs	r1, r2
 8010610:	0018      	movs	r0, r3
 8010612:	f001 fd9d 	bl	8012150 <RxWindowSetup>
}
 8010616:	46c0      	nop			; (mov r8, r8)
 8010618:	46bd      	mov	sp, r7
 801061a:	b002      	add	sp, #8
 801061c:	bd80      	pop	{r7, pc}
 801061e:	46c0      	nop			; (mov r8, r8)
 8010620:	200005b4 	.word	0x200005b4
 8010624:	00000415 	.word	0x00000415
 8010628:	00000484 	.word	0x00000484
 801062c:	000003bb 	.word	0x000003bb
 8010630:	000003c9 	.word	0x000003c9
 8010634:	000003ca 	.word	0x000003ca
 8010638:	000003cb 	.word	0x000003cb
 801063c:	2000096c 	.word	0x2000096c
 8010640:	20000934 	.word	0x20000934

08010644 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 8010644:	b580      	push	{r7, lr}
 8010646:	b082      	sub	sp, #8
 8010648:	af00      	add	r7, sp, #0
 801064a:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 801064c:	4a1c      	ldr	r2, [pc, #112]	; (80106c0 <OnRxWindow2TimerEvent+0x7c>)
 801064e:	2390      	movs	r3, #144	; 0x90
 8010650:	00db      	lsls	r3, r3, #3
 8010652:	5cd3      	ldrb	r3, [r2, r3]
 8010654:	2b00      	cmp	r3, #0
 8010656:	d02f      	beq.n	80106b8 <OnRxWindow2TimerEvent+0x74>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8010658:	4b19      	ldr	r3, [pc, #100]	; (80106c0 <OnRxWindow2TimerEvent+0x7c>)
 801065a:	4a1a      	ldr	r2, [pc, #104]	; (80106c4 <OnRxWindow2TimerEvent+0x80>)
 801065c:	5c99      	ldrb	r1, [r3, r2]
 801065e:	4a18      	ldr	r2, [pc, #96]	; (80106c0 <OnRxWindow2TimerEvent+0x7c>)
 8010660:	23f3      	movs	r3, #243	; 0xf3
 8010662:	009b      	lsls	r3, r3, #2
 8010664:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 8010666:	4b16      	ldr	r3, [pc, #88]	; (80106c0 <OnRxWindow2TimerEvent+0x7c>)
 8010668:	4a17      	ldr	r2, [pc, #92]	; (80106c8 <OnRxWindow2TimerEvent+0x84>)
 801066a:	589b      	ldr	r3, [r3, r2]
 801066c:	22a8      	movs	r2, #168	; 0xa8
 801066e:	5899      	ldr	r1, [r3, r2]
 8010670:	4a13      	ldr	r2, [pc, #76]	; (80106c0 <OnRxWindow2TimerEvent+0x7c>)
 8010672:	23f4      	movs	r3, #244	; 0xf4
 8010674:	009b      	lsls	r3, r3, #2
 8010676:	50d1      	str	r1, [r2, r3]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8010678:	4b11      	ldr	r3, [pc, #68]	; (80106c0 <OnRxWindow2TimerEvent+0x7c>)
 801067a:	4a13      	ldr	r2, [pc, #76]	; (80106c8 <OnRxWindow2TimerEvent+0x84>)
 801067c:	589b      	ldr	r3, [r3, r2]
 801067e:	22b9      	movs	r2, #185	; 0xb9
 8010680:	5c99      	ldrb	r1, [r3, r2]
 8010682:	4a0f      	ldr	r2, [pc, #60]	; (80106c0 <OnRxWindow2TimerEvent+0x7c>)
 8010684:	23f7      	movs	r3, #247	; 0xf7
 8010686:	009b      	lsls	r3, r3, #2
 8010688:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 801068a:	4b0d      	ldr	r3, [pc, #52]	; (80106c0 <OnRxWindow2TimerEvent+0x7c>)
 801068c:	4a0e      	ldr	r2, [pc, #56]	; (80106c8 <OnRxWindow2TimerEvent+0x84>)
 801068e:	589b      	ldr	r3, [r3, r2]
 8010690:	22ca      	movs	r2, #202	; 0xca
 8010692:	5c99      	ldrb	r1, [r3, r2]
 8010694:	4b0a      	ldr	r3, [pc, #40]	; (80106c0 <OnRxWindow2TimerEvent+0x7c>)
 8010696:	4a0d      	ldr	r2, [pc, #52]	; (80106cc <OnRxWindow2TimerEvent+0x88>)
 8010698:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxContinuous = false;
 801069a:	4b09      	ldr	r3, [pc, #36]	; (80106c0 <OnRxWindow2TimerEvent+0x7c>)
 801069c:	4a0c      	ldr	r2, [pc, #48]	; (80106d0 <OnRxWindow2TimerEvent+0x8c>)
 801069e:	2100      	movs	r1, #0
 80106a0:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 80106a2:	4b07      	ldr	r3, [pc, #28]	; (80106c0 <OnRxWindow2TimerEvent+0x7c>)
 80106a4:	4a0b      	ldr	r2, [pc, #44]	; (80106d4 <OnRxWindow2TimerEvent+0x90>)
 80106a6:	2101      	movs	r1, #1
 80106a8:	5499      	strb	r1, [r3, r2]

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 80106aa:	4a0b      	ldr	r2, [pc, #44]	; (80106d8 <OnRxWindow2TimerEvent+0x94>)
 80106ac:	4b0b      	ldr	r3, [pc, #44]	; (80106dc <OnRxWindow2TimerEvent+0x98>)
 80106ae:	0011      	movs	r1, r2
 80106b0:	0018      	movs	r0, r3
 80106b2:	f001 fd4d 	bl	8012150 <RxWindowSetup>
 80106b6:	e000      	b.n	80106ba <OnRxWindow2TimerEvent+0x76>
        return;
 80106b8:	46c0      	nop			; (mov r8, r8)
}
 80106ba:	46bd      	mov	sp, r7
 80106bc:	b002      	add	sp, #8
 80106be:	bd80      	pop	{r7, pc}
 80106c0:	200005b4 	.word	0x200005b4
 80106c4:	00000415 	.word	0x00000415
 80106c8:	00000484 	.word	0x00000484
 80106cc:	000003dd 	.word	0x000003dd
 80106d0:	000003de 	.word	0x000003de
 80106d4:	000003df 	.word	0x000003df
 80106d8:	20000980 	.word	0x20000980
 80106dc:	2000094c 	.word	0x2000094c

080106e0 <OnAckTimeoutTimerEvent>:

static void OnAckTimeoutTimerEvent( void* context )
{
 80106e0:	b580      	push	{r7, lr}
 80106e2:	b082      	sub	sp, #8
 80106e4:	af00      	add	r7, sp, #0
 80106e6:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 80106e8:	4b18      	ldr	r3, [pc, #96]	; (801074c <OnAckTimeoutTimerEvent+0x6c>)
 80106ea:	0018      	movs	r0, r3
 80106ec:	f00c fae2 	bl	801ccb4 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 80106f0:	4b17      	ldr	r3, [pc, #92]	; (8010750 <OnAckTimeoutTimerEvent+0x70>)
 80106f2:	4a18      	ldr	r2, [pc, #96]	; (8010754 <OnAckTimeoutTimerEvent+0x74>)
 80106f4:	5c9b      	ldrb	r3, [r3, r2]
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d003      	beq.n	8010702 <OnAckTimeoutTimerEvent+0x22>
    {
        MacCtx.AckTimeoutRetry = true;
 80106fa:	4b15      	ldr	r3, [pc, #84]	; (8010750 <OnAckTimeoutTimerEvent+0x70>)
 80106fc:	4a16      	ldr	r2, [pc, #88]	; (8010758 <OnAckTimeoutTimerEvent+0x78>)
 80106fe:	2101      	movs	r1, #1
 8010700:	5499      	strb	r1, [r3, r2]
    }
    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 8010702:	4b13      	ldr	r3, [pc, #76]	; (8010750 <OnAckTimeoutTimerEvent+0x70>)
 8010704:	4a15      	ldr	r2, [pc, #84]	; (801075c <OnAckTimeoutTimerEvent+0x7c>)
 8010706:	589b      	ldr	r3, [r3, r2]
 8010708:	227c      	movs	r2, #124	; 0x7c
 801070a:	5c9b      	ldrb	r3, [r3, r2]
 801070c:	2b02      	cmp	r3, #2
 801070e:	d105      	bne.n	801071c <OnAckTimeoutTimerEvent+0x3c>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 8010710:	4b0f      	ldr	r3, [pc, #60]	; (8010750 <OnAckTimeoutTimerEvent+0x70>)
 8010712:	4a13      	ldr	r2, [pc, #76]	; (8010760 <OnAckTimeoutTimerEvent+0x80>)
 8010714:	5c99      	ldrb	r1, [r3, r2]
 8010716:	2020      	movs	r0, #32
 8010718:	4301      	orrs	r1, r0
 801071a:	5499      	strb	r1, [r3, r2]
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 801071c:	4a0c      	ldr	r2, [pc, #48]	; (8010750 <OnAckTimeoutTimerEvent+0x70>)
 801071e:	23d2      	movs	r3, #210	; 0xd2
 8010720:	009b      	lsls	r3, r3, #2
 8010722:	58d3      	ldr	r3, [r2, r3]
 8010724:	2b00      	cmp	r3, #0
 8010726:	d00c      	beq.n	8010742 <OnAckTimeoutTimerEvent+0x62>
 8010728:	4a09      	ldr	r2, [pc, #36]	; (8010750 <OnAckTimeoutTimerEvent+0x70>)
 801072a:	23d2      	movs	r3, #210	; 0xd2
 801072c:	009b      	lsls	r3, r3, #2
 801072e:	58d3      	ldr	r3, [r2, r3]
 8010730:	68db      	ldr	r3, [r3, #12]
 8010732:	2b00      	cmp	r3, #0
 8010734:	d005      	beq.n	8010742 <OnAckTimeoutTimerEvent+0x62>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8010736:	4a06      	ldr	r2, [pc, #24]	; (8010750 <OnAckTimeoutTimerEvent+0x70>)
 8010738:	23d2      	movs	r3, #210	; 0xd2
 801073a:	009b      	lsls	r3, r3, #2
 801073c:	58d3      	ldr	r3, [r2, r3]
 801073e:	68db      	ldr	r3, [r3, #12]
 8010740:	4798      	blx	r3
    }
}
 8010742:	46c0      	nop			; (mov r8, r8)
 8010744:	46bd      	mov	sp, r7
 8010746:	b002      	add	sp, #8
 8010748:	bd80      	pop	{r7, pc}
 801074a:	46c0      	nop			; (mov r8, r8)
 801074c:	200009ac 	.word	0x200009ac
 8010750:	200005b4 	.word	0x200005b4
 8010754:	00000414 	.word	0x00000414
 8010758:	00000413 	.word	0x00000413
 801075c:	00000484 	.word	0x00000484
 8010760:	00000481 	.word	0x00000481

08010764 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 8010764:	b590      	push	{r4, r7, lr}
 8010766:	b085      	sub	sp, #20
 8010768:	af00      	add	r7, sp, #0
 801076a:	60ba      	str	r2, [r7, #8]
 801076c:	607b      	str	r3, [r7, #4]
 801076e:	230f      	movs	r3, #15
 8010770:	18fb      	adds	r3, r7, r3
 8010772:	1c02      	adds	r2, r0, #0
 8010774:	701a      	strb	r2, [r3, #0]
 8010776:	230e      	movs	r3, #14
 8010778:	18fb      	adds	r3, r7, r3
 801077a:	1c0a      	adds	r2, r1, #0
 801077c:	701a      	strb	r2, [r3, #0]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 801077e:	68bb      	ldr	r3, [r7, #8]
 8010780:	2b00      	cmp	r3, #0
 8010782:	d005      	beq.n	8010790 <GetFCntDown+0x2c>
 8010784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010786:	2b00      	cmp	r3, #0
 8010788:	d002      	beq.n	8010790 <GetFCntDown+0x2c>
 801078a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801078c:	2b00      	cmp	r3, #0
 801078e:	d101      	bne.n	8010794 <GetFCntDown+0x30>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010790:	230a      	movs	r3, #10
 8010792:	e033      	b.n	80107fc <GetFCntDown+0x98>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 8010794:	230f      	movs	r3, #15
 8010796:	18fb      	adds	r3, r7, r3
 8010798:	781b      	ldrb	r3, [r3, #0]
 801079a:	2b00      	cmp	r3, #0
 801079c:	d01a      	beq.n	80107d4 <GetFCntDown+0x70>
 801079e:	2b01      	cmp	r3, #1
 80107a0:	d11c      	bne.n	80107dc <GetFCntDown+0x78>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 80107a2:	1d3b      	adds	r3, r7, #4
 80107a4:	789b      	ldrb	r3, [r3, #2]
 80107a6:	2b01      	cmp	r3, #1
 80107a8:	d110      	bne.n	80107cc <GetFCntDown+0x68>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 80107aa:	220e      	movs	r2, #14
 80107ac:	18bb      	adds	r3, r7, r2
 80107ae:	781b      	ldrb	r3, [r3, #0]
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d003      	beq.n	80107bc <GetFCntDown+0x58>
 80107b4:	18bb      	adds	r3, r7, r2
 80107b6:	781b      	ldrb	r3, [r3, #0]
 80107b8:	2b03      	cmp	r3, #3
 80107ba:	d103      	bne.n	80107c4 <GetFCntDown+0x60>
                {
                    *fCntID = A_FCNT_DOWN;
 80107bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107be:	2202      	movs	r2, #2
 80107c0:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 80107c2:	e00d      	b.n	80107e0 <GetFCntDown+0x7c>
                    *fCntID = N_FCNT_DOWN;
 80107c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107c6:	2201      	movs	r2, #1
 80107c8:	701a      	strb	r2, [r3, #0]
            break;
 80107ca:	e009      	b.n	80107e0 <GetFCntDown+0x7c>
                *fCntID = FCNT_DOWN;
 80107cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107ce:	2203      	movs	r2, #3
 80107d0:	701a      	strb	r2, [r3, #0]
            break;
 80107d2:	e005      	b.n	80107e0 <GetFCntDown+0x7c>
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 80107d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107d6:	2204      	movs	r2, #4
 80107d8:	701a      	strb	r2, [r3, #0]
            break;
 80107da:	e001      	b.n	80107e0 <GetFCntDown+0x7c>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 1 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 80107dc:	2305      	movs	r3, #5
 80107de:	e00d      	b.n	80107fc <GetFCntDown+0x98>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 80107e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107e2:	7818      	ldrb	r0, [r3, #0]
 80107e4:	68bb      	ldr	r3, [r7, #8]
 80107e6:	89db      	ldrh	r3, [r3, #14]
 80107e8:	001c      	movs	r4, r3
 80107ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80107ec:	2320      	movs	r3, #32
 80107ee:	18fb      	adds	r3, r7, r3
 80107f0:	8819      	ldrh	r1, [r3, #0]
 80107f2:	0013      	movs	r3, r2
 80107f4:	0022      	movs	r2, r4
 80107f6:	f005 faa1 	bl	8015d3c <LoRaMacCryptoGetFCntDown>
 80107fa:	0003      	movs	r3, r0
}
 80107fc:	0018      	movs	r0, r3
 80107fe:	46bd      	mov	sp, r7
 8010800:	b005      	add	sp, #20
 8010802:	bd90      	pop	{r4, r7, pc}

08010804 <SwitchClass>:

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 8010804:	b5b0      	push	{r4, r5, r7, lr}
 8010806:	b084      	sub	sp, #16
 8010808:	af00      	add	r7, sp, #0
 801080a:	0002      	movs	r2, r0
 801080c:	1dfb      	adds	r3, r7, #7
 801080e:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010810:	230f      	movs	r3, #15
 8010812:	18fb      	adds	r3, r7, r3
 8010814:	2203      	movs	r2, #3
 8010816:	701a      	strb	r2, [r3, #0]

    switch( MacCtx.NvmCtx->DeviceClass )
 8010818:	4b82      	ldr	r3, [pc, #520]	; (8010a24 <SwitchClass+0x220>)
 801081a:	4a83      	ldr	r2, [pc, #524]	; (8010a28 <SwitchClass+0x224>)
 801081c:	589b      	ldr	r3, [r3, r2]
 801081e:	227c      	movs	r2, #124	; 0x7c
 8010820:	5c9b      	ldrb	r3, [r3, r2]
 8010822:	2b02      	cmp	r3, #2
 8010824:	d100      	bne.n	8010828 <SwitchClass+0x24>
 8010826:	e0de      	b.n	80109e6 <SwitchClass+0x1e2>
 8010828:	dd00      	ble.n	801082c <SwitchClass+0x28>
 801082a:	e0f4      	b.n	8010a16 <SwitchClass+0x212>
 801082c:	2b00      	cmp	r3, #0
 801082e:	d003      	beq.n	8010838 <SwitchClass+0x34>
 8010830:	2b01      	cmp	r3, #1
 8010832:	d100      	bne.n	8010836 <SwitchClass+0x32>
 8010834:	e0c2      	b.n	80109bc <SwitchClass+0x1b8>
 8010836:	e0ee      	b.n	8010a16 <SwitchClass+0x212>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 8010838:	1dfb      	adds	r3, r7, #7
 801083a:	781b      	ldrb	r3, [r3, #0]
 801083c:	2b00      	cmp	r3, #0
 801083e:	d10b      	bne.n	8010858 <SwitchClass+0x54>
            {
                // Revert back RxC parameters
                MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 8010840:	4b78      	ldr	r3, [pc, #480]	; (8010a24 <SwitchClass+0x220>)
 8010842:	4a79      	ldr	r2, [pc, #484]	; (8010a28 <SwitchClass+0x224>)
 8010844:	589a      	ldr	r2, [r3, r2]
 8010846:	4b77      	ldr	r3, [pc, #476]	; (8010a24 <SwitchClass+0x220>)
 8010848:	4977      	ldr	r1, [pc, #476]	; (8010a28 <SwitchClass+0x224>)
 801084a:	585b      	ldr	r3, [r3, r1]
 801084c:	20b0      	movs	r0, #176	; 0xb0
 801084e:	21a8      	movs	r1, #168	; 0xa8
 8010850:	181b      	adds	r3, r3, r0
 8010852:	1852      	adds	r2, r2, r1
 8010854:	ca03      	ldmia	r2!, {r0, r1}
 8010856:	c303      	stmia	r3!, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 8010858:	1dfb      	adds	r3, r7, #7
 801085a:	781b      	ldrb	r3, [r3, #0]
 801085c:	2b01      	cmp	r3, #1
 801085e:	d113      	bne.n	8010888 <SwitchClass+0x84>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 8010860:	250f      	movs	r5, #15
 8010862:	197c      	adds	r4, r7, r5
 8010864:	1dfb      	adds	r3, r7, #7
 8010866:	781b      	ldrb	r3, [r3, #0]
 8010868:	0018      	movs	r0, r3
 801086a:	f004 f86d 	bl	8014948 <LoRaMacClassBSwitchClass>
 801086e:	0003      	movs	r3, r0
 8010870:	7023      	strb	r3, [r4, #0]
                if( status == LORAMAC_STATUS_OK )
 8010872:	197b      	adds	r3, r7, r5
 8010874:	781b      	ldrb	r3, [r3, #0]
 8010876:	2b00      	cmp	r3, #0
 8010878:	d106      	bne.n	8010888 <SwitchClass+0x84>
                {
                    MacCtx.NvmCtx->DeviceClass = deviceClass;
 801087a:	4b6a      	ldr	r3, [pc, #424]	; (8010a24 <SwitchClass+0x220>)
 801087c:	4a6a      	ldr	r2, [pc, #424]	; (8010a28 <SwitchClass+0x224>)
 801087e:	589b      	ldr	r3, [r3, r2]
 8010880:	1dfa      	adds	r2, r7, #7
 8010882:	217c      	movs	r1, #124	; 0x7c
 8010884:	7812      	ldrb	r2, [r2, #0]
 8010886:	545a      	strb	r2, [r3, r1]
                }
            }

            if( deviceClass == CLASS_C )
 8010888:	1dfb      	adds	r3, r7, #7
 801088a:	781b      	ldrb	r3, [r3, #0]
 801088c:	2b02      	cmp	r3, #2
 801088e:	d000      	beq.n	8010892 <SwitchClass+0x8e>
 8010890:	e0bc      	b.n	8010a0c <SwitchClass+0x208>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 8010892:	4b64      	ldr	r3, [pc, #400]	; (8010a24 <SwitchClass+0x220>)
 8010894:	4a64      	ldr	r2, [pc, #400]	; (8010a28 <SwitchClass+0x224>)
 8010896:	589b      	ldr	r3, [r3, r2]
 8010898:	1dfa      	adds	r2, r7, #7
 801089a:	217c      	movs	r1, #124	; 0x7c
 801089c:	7812      	ldrb	r2, [r2, #0]
 801089e:	545a      	strb	r2, [r3, r1]

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 80108a0:	4860      	ldr	r0, [pc, #384]	; (8010a24 <SwitchClass+0x220>)
 80108a2:	23f8      	movs	r3, #248	; 0xf8
 80108a4:	009b      	lsls	r3, r3, #2
 80108a6:	495f      	ldr	r1, [pc, #380]	; (8010a24 <SwitchClass+0x220>)
 80108a8:	22f3      	movs	r2, #243	; 0xf3
 80108aa:	0092      	lsls	r2, r2, #2
 80108ac:	18c3      	adds	r3, r0, r3
 80108ae:	188a      	adds	r2, r1, r2
 80108b0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80108b2:	c313      	stmia	r3!, {r0, r1, r4}
 80108b4:	ca03      	ldmia	r2!, {r0, r1}
 80108b6:	c303      	stmia	r3!, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80108b8:	4b5a      	ldr	r3, [pc, #360]	; (8010a24 <SwitchClass+0x220>)
 80108ba:	4a5c      	ldr	r2, [pc, #368]	; (8010a2c <SwitchClass+0x228>)
 80108bc:	2102      	movs	r1, #2
 80108be:	5499      	strb	r1, [r3, r2]

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80108c0:	230e      	movs	r3, #14
 80108c2:	18fb      	adds	r3, r7, r3
 80108c4:	2200      	movs	r2, #0
 80108c6:	701a      	strb	r2, [r3, #0]
 80108c8:	e064      	b.n	8010994 <SwitchClass+0x190>
                {
                    if( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true )
 80108ca:	4b56      	ldr	r3, [pc, #344]	; (8010a24 <SwitchClass+0x220>)
 80108cc:	4a56      	ldr	r2, [pc, #344]	; (8010a28 <SwitchClass+0x224>)
 80108ce:	589a      	ldr	r2, [r3, r2]
 80108d0:	240e      	movs	r4, #14
 80108d2:	193b      	adds	r3, r7, r4
 80108d4:	781b      	ldrb	r3, [r3, #0]
 80108d6:	b25b      	sxtb	r3, r3
 80108d8:	2152      	movs	r1, #82	; 0x52
 80108da:	202c      	movs	r0, #44	; 0x2c
 80108dc:	4343      	muls	r3, r0
 80108de:	18d3      	adds	r3, r2, r3
 80108e0:	185b      	adds	r3, r3, r1
 80108e2:	781b      	ldrb	r3, [r3, #0]
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d04c      	beq.n	8010982 <SwitchClass+0x17e>
                    {
                        MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 80108e8:	4b4e      	ldr	r3, [pc, #312]	; (8010a24 <SwitchClass+0x220>)
 80108ea:	4a4f      	ldr	r2, [pc, #316]	; (8010a28 <SwitchClass+0x224>)
 80108ec:	5899      	ldr	r1, [r3, r2]
 80108ee:	193b      	adds	r3, r7, r4
 80108f0:	781b      	ldrb	r3, [r3, #0]
 80108f2:	b25b      	sxtb	r3, r3
 80108f4:	4a4b      	ldr	r2, [pc, #300]	; (8010a24 <SwitchClass+0x220>)
 80108f6:	484c      	ldr	r0, [pc, #304]	; (8010a28 <SwitchClass+0x224>)
 80108f8:	5812      	ldr	r2, [r2, r0]
 80108fa:	202c      	movs	r0, #44	; 0x2c
 80108fc:	4343      	muls	r3, r0
 80108fe:	18cb      	adds	r3, r1, r3
 8010900:	3368      	adds	r3, #104	; 0x68
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	21b0      	movs	r1, #176	; 0xb0
 8010906:	5053      	str	r3, [r2, r1]
                        MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8010908:	4b46      	ldr	r3, [pc, #280]	; (8010a24 <SwitchClass+0x220>)
 801090a:	4a47      	ldr	r2, [pc, #284]	; (8010a28 <SwitchClass+0x224>)
 801090c:	589a      	ldr	r2, [r3, r2]
 801090e:	193b      	adds	r3, r7, r4
 8010910:	781b      	ldrb	r3, [r3, #0]
 8010912:	b25b      	sxtb	r3, r3
 8010914:	216c      	movs	r1, #108	; 0x6c
 8010916:	202c      	movs	r0, #44	; 0x2c
 8010918:	4343      	muls	r3, r0
 801091a:	18d3      	adds	r3, r2, r3
 801091c:	185b      	adds	r3, r3, r1
 801091e:	2100      	movs	r1, #0
 8010920:	5659      	ldrsb	r1, [r3, r1]
 8010922:	4b40      	ldr	r3, [pc, #256]	; (8010a24 <SwitchClass+0x220>)
 8010924:	4a40      	ldr	r2, [pc, #256]	; (8010a28 <SwitchClass+0x224>)
 8010926:	589b      	ldr	r3, [r3, r2]
 8010928:	b2c9      	uxtb	r1, r1
 801092a:	22b4      	movs	r2, #180	; 0xb4
 801092c:	5499      	strb	r1, [r3, r2]

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 801092e:	4b3d      	ldr	r3, [pc, #244]	; (8010a24 <SwitchClass+0x220>)
 8010930:	4a3f      	ldr	r2, [pc, #252]	; (8010a30 <SwitchClass+0x22c>)
 8010932:	5c99      	ldrb	r1, [r3, r2]
 8010934:	4a3b      	ldr	r2, [pc, #236]	; (8010a24 <SwitchClass+0x220>)
 8010936:	23f8      	movs	r3, #248	; 0xf8
 8010938:	009b      	lsls	r3, r3, #2
 801093a:	54d1      	strb	r1, [r2, r3]
                        MacCtx.RxWindowCConfig.Frequency = MacCtx.NvmCtx->MacParams.RxCChannel.Frequency;
 801093c:	4b39      	ldr	r3, [pc, #228]	; (8010a24 <SwitchClass+0x220>)
 801093e:	4a3a      	ldr	r2, [pc, #232]	; (8010a28 <SwitchClass+0x224>)
 8010940:	589b      	ldr	r3, [r3, r2]
 8010942:	22b0      	movs	r2, #176	; 0xb0
 8010944:	5899      	ldr	r1, [r3, r2]
 8010946:	4a37      	ldr	r2, [pc, #220]	; (8010a24 <SwitchClass+0x220>)
 8010948:	23f9      	movs	r3, #249	; 0xf9
 801094a:	009b      	lsls	r3, r3, #2
 801094c:	50d1      	str	r1, [r2, r3]
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 801094e:	4b35      	ldr	r3, [pc, #212]	; (8010a24 <SwitchClass+0x220>)
 8010950:	4a35      	ldr	r2, [pc, #212]	; (8010a28 <SwitchClass+0x224>)
 8010952:	589b      	ldr	r3, [r3, r2]
 8010954:	22b9      	movs	r2, #185	; 0xb9
 8010956:	5c99      	ldrb	r1, [r3, r2]
 8010958:	4a32      	ldr	r2, [pc, #200]	; (8010a24 <SwitchClass+0x220>)
 801095a:	23fc      	movs	r3, #252	; 0xfc
 801095c:	009b      	lsls	r3, r3, #2
 801095e:	54d1      	strb	r1, [r2, r3]
                        MacCtx.RxWindowCConfig.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8010960:	4b30      	ldr	r3, [pc, #192]	; (8010a24 <SwitchClass+0x220>)
 8010962:	4a31      	ldr	r2, [pc, #196]	; (8010a28 <SwitchClass+0x224>)
 8010964:	589b      	ldr	r3, [r3, r2]
 8010966:	22ca      	movs	r2, #202	; 0xca
 8010968:	5c99      	ldrb	r1, [r3, r2]
 801096a:	4b2e      	ldr	r3, [pc, #184]	; (8010a24 <SwitchClass+0x220>)
 801096c:	4a31      	ldr	r2, [pc, #196]	; (8010a34 <SwitchClass+0x230>)
 801096e:	5499      	strb	r1, [r3, r2]
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8010970:	4b2c      	ldr	r3, [pc, #176]	; (8010a24 <SwitchClass+0x220>)
 8010972:	4a2e      	ldr	r2, [pc, #184]	; (8010a2c <SwitchClass+0x228>)
 8010974:	2103      	movs	r1, #3
 8010976:	5499      	strb	r1, [r3, r2]
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8010978:	4b2a      	ldr	r3, [pc, #168]	; (8010a24 <SwitchClass+0x220>)
 801097a:	4a2f      	ldr	r2, [pc, #188]	; (8010a38 <SwitchClass+0x234>)
 801097c:	2101      	movs	r1, #1
 801097e:	5499      	strb	r1, [r3, r2]
                        break;
 8010980:	e00e      	b.n	80109a0 <SwitchClass+0x19c>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8010982:	210e      	movs	r1, #14
 8010984:	187b      	adds	r3, r7, r1
 8010986:	781b      	ldrb	r3, [r3, #0]
 8010988:	b25b      	sxtb	r3, r3
 801098a:	b2db      	uxtb	r3, r3
 801098c:	3301      	adds	r3, #1
 801098e:	b2da      	uxtb	r2, r3
 8010990:	187b      	adds	r3, r7, r1
 8010992:	701a      	strb	r2, [r3, #0]
 8010994:	230e      	movs	r3, #14
 8010996:	18fb      	adds	r3, r7, r3
 8010998:	781b      	ldrb	r3, [r3, #0]
 801099a:	b25b      	sxtb	r3, r3
 801099c:	2b00      	cmp	r3, #0
 801099e:	dd94      	ble.n	80108ca <SwitchClass+0xc6>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 80109a0:	4b20      	ldr	r3, [pc, #128]	; (8010a24 <SwitchClass+0x220>)
 80109a2:	4a26      	ldr	r2, [pc, #152]	; (8010a3c <SwitchClass+0x238>)
 80109a4:	2100      	movs	r1, #0
 80109a6:	5499      	strb	r1, [r3, r2]
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 80109a8:	4b25      	ldr	r3, [pc, #148]	; (8010a40 <SwitchClass+0x23c>)
 80109aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109ac:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 80109ae:	f001 fc01 	bl	80121b4 <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 80109b2:	230f      	movs	r3, #15
 80109b4:	18fb      	adds	r3, r7, r3
 80109b6:	2200      	movs	r2, #0
 80109b8:	701a      	strb	r2, [r3, #0]
            }
            break;
 80109ba:	e027      	b.n	8010a0c <SwitchClass+0x208>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 80109bc:	250f      	movs	r5, #15
 80109be:	197c      	adds	r4, r7, r5
 80109c0:	1dfb      	adds	r3, r7, #7
 80109c2:	781b      	ldrb	r3, [r3, #0]
 80109c4:	0018      	movs	r0, r3
 80109c6:	f003 ffbf 	bl	8014948 <LoRaMacClassBSwitchClass>
 80109ca:	0003      	movs	r3, r0
 80109cc:	7023      	strb	r3, [r4, #0]
            if( status == LORAMAC_STATUS_OK )
 80109ce:	197b      	adds	r3, r7, r5
 80109d0:	781b      	ldrb	r3, [r3, #0]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d11c      	bne.n	8010a10 <SwitchClass+0x20c>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 80109d6:	4b13      	ldr	r3, [pc, #76]	; (8010a24 <SwitchClass+0x220>)
 80109d8:	4a13      	ldr	r2, [pc, #76]	; (8010a28 <SwitchClass+0x224>)
 80109da:	589b      	ldr	r3, [r3, r2]
 80109dc:	1dfa      	adds	r2, r7, #7
 80109de:	217c      	movs	r1, #124	; 0x7c
 80109e0:	7812      	ldrb	r2, [r2, #0]
 80109e2:	545a      	strb	r2, [r3, r1]
            }
            break;
 80109e4:	e014      	b.n	8010a10 <SwitchClass+0x20c>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 80109e6:	1dfb      	adds	r3, r7, #7
 80109e8:	781b      	ldrb	r3, [r3, #0]
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d112      	bne.n	8010a14 <SwitchClass+0x210>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 80109ee:	4b0d      	ldr	r3, [pc, #52]	; (8010a24 <SwitchClass+0x220>)
 80109f0:	4a0d      	ldr	r2, [pc, #52]	; (8010a28 <SwitchClass+0x224>)
 80109f2:	589b      	ldr	r3, [r3, r2]
 80109f4:	1dfa      	adds	r2, r7, #7
 80109f6:	217c      	movs	r1, #124	; 0x7c
 80109f8:	7812      	ldrb	r2, [r2, #0]
 80109fa:	545a      	strb	r2, [r3, r1]

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 80109fc:	4b10      	ldr	r3, [pc, #64]	; (8010a40 <SwitchClass+0x23c>)
 80109fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a00:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 8010a02:	230f      	movs	r3, #15
 8010a04:	18fb      	adds	r3, r7, r3
 8010a06:	2200      	movs	r2, #0
 8010a08:	701a      	strb	r2, [r3, #0]
            }
            break;
 8010a0a:	e003      	b.n	8010a14 <SwitchClass+0x210>
            break;
 8010a0c:	46c0      	nop			; (mov r8, r8)
 8010a0e:	e002      	b.n	8010a16 <SwitchClass+0x212>
            break;
 8010a10:	46c0      	nop			; (mov r8, r8)
 8010a12:	e000      	b.n	8010a16 <SwitchClass+0x212>
            break;
 8010a14:	46c0      	nop			; (mov r8, r8)
        }
    }

    return status;
 8010a16:	230f      	movs	r3, #15
 8010a18:	18fb      	adds	r3, r7, r3
 8010a1a:	781b      	ldrb	r3, [r3, #0]
}
 8010a1c:	0018      	movs	r0, r3
 8010a1e:	46bd      	mov	sp, r7
 8010a20:	b004      	add	sp, #16
 8010a22:	bdb0      	pop	{r4, r5, r7, pc}
 8010a24:	200005b4 	.word	0x200005b4
 8010a28:	00000484 	.word	0x00000484
 8010a2c:	000003f3 	.word	0x000003f3
 8010a30:	00000415 	.word	0x00000415
 8010a34:	000003f1 	.word	0x000003f1
 8010a38:	000003f2 	.word	0x000003f2
 8010a3c:	00000414 	.word	0x00000414
 8010a40:	0801fb64 	.word	0x0801fb64

08010a44 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 8010a44:	b580      	push	{r7, lr}
 8010a46:	b086      	sub	sp, #24
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	0002      	movs	r2, r0
 8010a4c:	1dfb      	adds	r3, r7, #7
 8010a4e:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8010a50:	4b17      	ldr	r3, [pc, #92]	; (8010ab0 <GetMaxAppPayloadWithoutFOptsLength+0x6c>)
 8010a52:	4a18      	ldr	r2, [pc, #96]	; (8010ab4 <GetMaxAppPayloadWithoutFOptsLength+0x70>)
 8010a54:	589b      	ldr	r3, [r3, r2]
 8010a56:	22b8      	movs	r2, #184	; 0xb8
 8010a58:	5c9a      	ldrb	r2, [r3, r2]
 8010a5a:	2110      	movs	r1, #16
 8010a5c:	187b      	adds	r3, r7, r1
 8010a5e:	709a      	strb	r2, [r3, #2]
    getPhy.Datarate = datarate;
 8010a60:	187b      	adds	r3, r7, r1
 8010a62:	1dfa      	adds	r2, r7, #7
 8010a64:	7812      	ldrb	r2, [r2, #0]
 8010a66:	705a      	strb	r2, [r3, #1]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8010a68:	187b      	adds	r3, r7, r1
 8010a6a:	220d      	movs	r2, #13
 8010a6c:	701a      	strb	r2, [r3, #0]

    // Get the maximum payload length
    if( MacCtx.NvmCtx->RepeaterSupport == true )
 8010a6e:	4b10      	ldr	r3, [pc, #64]	; (8010ab0 <GetMaxAppPayloadWithoutFOptsLength+0x6c>)
 8010a70:	4a10      	ldr	r2, [pc, #64]	; (8010ab4 <GetMaxAppPayloadWithoutFOptsLength+0x70>)
 8010a72:	589b      	ldr	r3, [r3, r2]
 8010a74:	22ca      	movs	r2, #202	; 0xca
 8010a76:	5c9b      	ldrb	r3, [r3, r2]
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d002      	beq.n	8010a82 <GetMaxAppPayloadWithoutFOptsLength+0x3e>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8010a7c:	187b      	adds	r3, r7, r1
 8010a7e:	220e      	movs	r2, #14
 8010a80:	701a      	strb	r2, [r3, #0]
    }

    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010a82:	4b0b      	ldr	r3, [pc, #44]	; (8010ab0 <GetMaxAppPayloadWithoutFOptsLength+0x6c>)
 8010a84:	4a0b      	ldr	r2, [pc, #44]	; (8010ab4 <GetMaxAppPayloadWithoutFOptsLength+0x70>)
 8010a86:	589b      	ldr	r3, [r3, r2]
 8010a88:	781b      	ldrb	r3, [r3, #0]
 8010a8a:	2210      	movs	r2, #16
 8010a8c:	18ba      	adds	r2, r7, r2
 8010a8e:	0011      	movs	r1, r2
 8010a90:	0018      	movs	r0, r3
 8010a92:	f006 f8c8 	bl	8016c26 <RegionGetPhyParam>
 8010a96:	0003      	movs	r3, r0
 8010a98:	001a      	movs	r2, r3
 8010a9a:	210c      	movs	r1, #12
 8010a9c:	187b      	adds	r3, r7, r1
 8010a9e:	601a      	str	r2, [r3, #0]

    return phyParam.Value;
 8010aa0:	187b      	adds	r3, r7, r1
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	b2db      	uxtb	r3, r3
}
 8010aa6:	0018      	movs	r0, r3
 8010aa8:	46bd      	mov	sp, r7
 8010aaa:	b006      	add	sp, #24
 8010aac:	bd80      	pop	{r7, pc}
 8010aae:	46c0      	nop			; (mov r8, r8)
 8010ab0:	200005b4 	.word	0x200005b4
 8010ab4:	00000484 	.word	0x00000484

08010ab8 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 8010ab8:	b5b0      	push	{r4, r5, r7, lr}
 8010aba:	b084      	sub	sp, #16
 8010abc:	af00      	add	r7, sp, #0
 8010abe:	0004      	movs	r4, r0
 8010ac0:	0008      	movs	r0, r1
 8010ac2:	0011      	movs	r1, r2
 8010ac4:	1dfb      	adds	r3, r7, #7
 8010ac6:	1c22      	adds	r2, r4, #0
 8010ac8:	701a      	strb	r2, [r3, #0]
 8010aca:	1dbb      	adds	r3, r7, #6
 8010acc:	1c02      	adds	r2, r0, #0
 8010ace:	701a      	strb	r2, [r3, #0]
 8010ad0:	1d7b      	adds	r3, r7, #5
 8010ad2:	1c0a      	adds	r2, r1, #0
 8010ad4:	701a      	strb	r2, [r3, #0]
    uint16_t maxN = 0;
 8010ad6:	250e      	movs	r5, #14
 8010ad8:	197b      	adds	r3, r7, r5
 8010ada:	2200      	movs	r2, #0
 8010adc:	801a      	strh	r2, [r3, #0]
    uint16_t payloadSize = 0;
 8010ade:	240c      	movs	r4, #12
 8010ae0:	193b      	adds	r3, r7, r4
 8010ae2:	2200      	movs	r2, #0
 8010ae4:	801a      	strh	r2, [r3, #0]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8010ae6:	1dbb      	adds	r3, r7, #6
 8010ae8:	781b      	ldrb	r3, [r3, #0]
 8010aea:	b25b      	sxtb	r3, r3
 8010aec:	0018      	movs	r0, r3
 8010aee:	f7ff ffa9 	bl	8010a44 <GetMaxAppPayloadWithoutFOptsLength>
 8010af2:	0003      	movs	r3, r0
 8010af4:	001a      	movs	r2, r3
 8010af6:	0028      	movs	r0, r5
 8010af8:	183b      	adds	r3, r7, r0
 8010afa:	801a      	strh	r2, [r3, #0]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 8010afc:	1dfb      	adds	r3, r7, #7
 8010afe:	781b      	ldrb	r3, [r3, #0]
 8010b00:	b299      	uxth	r1, r3
 8010b02:	1d7b      	adds	r3, r7, #5
 8010b04:	781b      	ldrb	r3, [r3, #0]
 8010b06:	b29a      	uxth	r2, r3
 8010b08:	193b      	adds	r3, r7, r4
 8010b0a:	188a      	adds	r2, r1, r2
 8010b0c:	801a      	strh	r2, [r3, #0]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8010b0e:	193a      	adds	r2, r7, r4
 8010b10:	183b      	adds	r3, r7, r0
 8010b12:	8812      	ldrh	r2, [r2, #0]
 8010b14:	881b      	ldrh	r3, [r3, #0]
 8010b16:	429a      	cmp	r2, r3
 8010b18:	d805      	bhi.n	8010b26 <ValidatePayloadLength+0x6e>
 8010b1a:	193b      	adds	r3, r7, r4
 8010b1c:	881b      	ldrh	r3, [r3, #0]
 8010b1e:	2bff      	cmp	r3, #255	; 0xff
 8010b20:	d801      	bhi.n	8010b26 <ValidatePayloadLength+0x6e>
    {
        return true;
 8010b22:	2301      	movs	r3, #1
 8010b24:	e000      	b.n	8010b28 <ValidatePayloadLength+0x70>
    }
    return false;
 8010b26:	2300      	movs	r3, #0
}
 8010b28:	0018      	movs	r0, r3
 8010b2a:	46bd      	mov	sp, r7
 8010b2c:	b004      	add	sp, #16
 8010b2e:	bdb0      	pop	{r4, r5, r7, pc}

08010b30 <SetMlmeScheduleUplinkIndication>:

static void SetMlmeScheduleUplinkIndication( void )
{
 8010b30:	b580      	push	{r7, lr}
 8010b32:	af00      	add	r7, sp, #0
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8010b34:	4b04      	ldr	r3, [pc, #16]	; (8010b48 <SetMlmeScheduleUplinkIndication+0x18>)
 8010b36:	4a05      	ldr	r2, [pc, #20]	; (8010b4c <SetMlmeScheduleUplinkIndication+0x1c>)
 8010b38:	5c99      	ldrb	r1, [r3, r2]
 8010b3a:	2010      	movs	r0, #16
 8010b3c:	4301      	orrs	r1, r0
 8010b3e:	5499      	strb	r1, [r3, r2]
}
 8010b40:	46c0      	nop			; (mov r8, r8)
 8010b42:	46bd      	mov	sp, r7
 8010b44:	bd80      	pop	{r7, pc}
 8010b46:	46c0      	nop			; (mov r8, r8)
 8010b48:	200005b4 	.word	0x200005b4
 8010b4c:	00000481 	.word	0x00000481

08010b50 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 8010b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b52:	b0a5      	sub	sp, #148	; 0x94
 8010b54:	af02      	add	r7, sp, #8
 8010b56:	6078      	str	r0, [r7, #4]
 8010b58:	000c      	movs	r4, r1
 8010b5a:	0010      	movs	r0, r2
 8010b5c:	0019      	movs	r1, r3
 8010b5e:	1cfb      	adds	r3, r7, #3
 8010b60:	1c22      	adds	r2, r4, #0
 8010b62:	701a      	strb	r2, [r3, #0]
 8010b64:	1cbb      	adds	r3, r7, #2
 8010b66:	1c02      	adds	r2, r0, #0
 8010b68:	701a      	strb	r2, [r3, #0]
 8010b6a:	1c7b      	adds	r3, r7, #1
 8010b6c:	1c0a      	adds	r2, r1, #0
 8010b6e:	701a      	strb	r2, [r3, #0]
    uint8_t status = 0;
 8010b70:	236b      	movs	r3, #107	; 0x6b
 8010b72:	18fb      	adds	r3, r7, r3
 8010b74:	2200      	movs	r2, #0
 8010b76:	701a      	strb	r2, [r3, #0]
    bool adrBlockFound = false;
 8010b78:	2387      	movs	r3, #135	; 0x87
 8010b7a:	18fb      	adds	r3, r7, r3
 8010b7c:	2200      	movs	r2, #0
 8010b7e:	701a      	strb	r2, [r3, #0]
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8010b80:	2368      	movs	r3, #104	; 0x68
 8010b82:	18fb      	adds	r3, r7, r3
 8010b84:	2200      	movs	r2, #0
 8010b86:	801a      	strh	r2, [r3, #0]

    while( macIndex < commandsSize )
 8010b88:	f000 fd58 	bl	801163c <ProcessMacCommands+0xaec>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8010b8c:	1cfb      	adds	r3, r7, #3
 8010b8e:	781b      	ldrb	r3, [r3, #0]
 8010b90:	687a      	ldr	r2, [r7, #4]
 8010b92:	18d3      	adds	r3, r2, r3
 8010b94:	781b      	ldrb	r3, [r3, #0]
 8010b96:	0018      	movs	r0, r3
 8010b98:	f004 fa06 	bl	8014fa8 <LoRaMacCommandsGetCmdSize>
 8010b9c:	0003      	movs	r3, r0
 8010b9e:	001a      	movs	r2, r3
 8010ba0:	1cfb      	adds	r3, r7, #3
 8010ba2:	781b      	ldrb	r3, [r3, #0]
 8010ba4:	18d2      	adds	r2, r2, r3
 8010ba6:	1cbb      	adds	r3, r7, #2
 8010ba8:	781b      	ldrb	r3, [r3, #0]
 8010baa:	429a      	cmp	r2, r3
 8010bac:	dd01      	ble.n	8010bb2 <ProcessMacCommands+0x62>
 8010bae:	f000 fd4e 	bl	801164e <ProcessMacCommands+0xafe>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 8010bb2:	1cfb      	adds	r3, r7, #3
 8010bb4:	781b      	ldrb	r3, [r3, #0]
 8010bb6:	1cfa      	adds	r2, r7, #3
 8010bb8:	1c59      	adds	r1, r3, #1
 8010bba:	7011      	strb	r1, [r2, #0]
 8010bbc:	001a      	movs	r2, r3
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	189b      	adds	r3, r3, r2
 8010bc2:	781b      	ldrb	r3, [r3, #0]
 8010bc4:	2b13      	cmp	r3, #19
 8010bc6:	d901      	bls.n	8010bcc <ProcessMacCommands+0x7c>
 8010bc8:	f000 fd43 	bl	8011652 <ProcessMacCommands+0xb02>
 8010bcc:	009a      	lsls	r2, r3, #2
 8010bce:	4bee      	ldr	r3, [pc, #952]	; (8010f88 <ProcessMacCommands+0x438>)
 8010bd0:	18d3      	adds	r3, r2, r3
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	469f      	mov	pc, r3
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8010bd6:	2004      	movs	r0, #4
 8010bd8:	f004 fc08 	bl	80153ec <LoRaMacConfirmQueueIsCmdActive>
 8010bdc:	1e03      	subs	r3, r0, #0
 8010bde:	d101      	bne.n	8010be4 <ProcessMacCommands+0x94>
 8010be0:	f000 fd2c 	bl	801163c <ProcessMacCommands+0xaec>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8010be4:	2104      	movs	r1, #4
 8010be6:	2000      	movs	r0, #0
 8010be8:	f004 fb64 	bl	80152b4 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8010bec:	1cfb      	adds	r3, r7, #3
 8010bee:	781b      	ldrb	r3, [r3, #0]
 8010bf0:	1cfa      	adds	r2, r7, #3
 8010bf2:	1c59      	adds	r1, r3, #1
 8010bf4:	7011      	strb	r1, [r2, #0]
 8010bf6:	001a      	movs	r2, r3
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	189b      	adds	r3, r3, r2
 8010bfc:	7819      	ldrb	r1, [r3, #0]
 8010bfe:	4ae3      	ldr	r2, [pc, #908]	; (8010f8c <ProcessMacCommands+0x43c>)
 8010c00:	238b      	movs	r3, #139	; 0x8b
 8010c02:	00db      	lsls	r3, r3, #3
 8010c04:	54d1      	strb	r1, [r2, r3]
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8010c06:	1cfb      	adds	r3, r7, #3
 8010c08:	781b      	ldrb	r3, [r3, #0]
 8010c0a:	1cfa      	adds	r2, r7, #3
 8010c0c:	1c59      	adds	r1, r3, #1
 8010c0e:	7011      	strb	r1, [r2, #0]
 8010c10:	001a      	movs	r2, r3
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	189b      	adds	r3, r3, r2
 8010c16:	7819      	ldrb	r1, [r3, #0]
 8010c18:	4bdc      	ldr	r3, [pc, #880]	; (8010f8c <ProcessMacCommands+0x43c>)
 8010c1a:	4add      	ldr	r2, [pc, #884]	; (8010f90 <ProcessMacCommands+0x440>)
 8010c1c:	5499      	strb	r1, [r3, r2]
                }
                break;
 8010c1e:	f000 fd0d 	bl	801163c <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 8010c22:	2657      	movs	r6, #87	; 0x57
 8010c24:	19bb      	adds	r3, r7, r6
 8010c26:	2200      	movs	r2, #0
 8010c28:	701a      	strb	r2, [r3, #0]
                int8_t linkAdrTxPower = TX_POWER_0;
 8010c2a:	2456      	movs	r4, #86	; 0x56
 8010c2c:	193b      	adds	r3, r7, r4
 8010c2e:	2200      	movs	r2, #0
 8010c30:	701a      	strb	r2, [r3, #0]
                uint8_t linkAdrNbRep = 0;
 8010c32:	2555      	movs	r5, #85	; 0x55
 8010c34:	197b      	adds	r3, r7, r5
 8010c36:	2200      	movs	r2, #0
 8010c38:	701a      	strb	r2, [r3, #0]
                uint8_t linkAdrNbBytesParsed = 0;
 8010c3a:	2354      	movs	r3, #84	; 0x54
 8010c3c:	18fb      	adds	r3, r7, r3
 8010c3e:	2200      	movs	r2, #0
 8010c40:	701a      	strb	r2, [r3, #0]

                if( adrBlockFound == false )
 8010c42:	2187      	movs	r1, #135	; 0x87
 8010c44:	187b      	adds	r3, r7, r1
 8010c46:	781b      	ldrb	r3, [r3, #0]
 8010c48:	2201      	movs	r2, #1
 8010c4a:	4053      	eors	r3, r2
 8010c4c:	b2db      	uxtb	r3, r3
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d100      	bne.n	8010c54 <ProcessMacCommands+0x104>
 8010c52:	e09d      	b.n	8010d90 <ProcessMacCommands+0x240>
                {
                    adrBlockFound = true;
 8010c54:	187b      	adds	r3, r7, r1
 8010c56:	2201      	movs	r2, #1
 8010c58:	701a      	strb	r2, [r3, #0]

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 8010c5a:	1cfb      	adds	r3, r7, #3
 8010c5c:	781b      	ldrb	r3, [r3, #0]
 8010c5e:	3b01      	subs	r3, #1
 8010c60:	687a      	ldr	r2, [r7, #4]
 8010c62:	18d2      	adds	r2, r2, r3
 8010c64:	2158      	movs	r1, #88	; 0x58
 8010c66:	187b      	adds	r3, r7, r1
 8010c68:	605a      	str	r2, [r3, #4]
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8010c6a:	1cba      	adds	r2, r7, #2
 8010c6c:	1cfb      	adds	r3, r7, #3
 8010c6e:	7812      	ldrb	r2, [r2, #0]
 8010c70:	781b      	ldrb	r3, [r3, #0]
 8010c72:	1ad3      	subs	r3, r2, r3
 8010c74:	b2db      	uxtb	r3, r3
 8010c76:	3301      	adds	r3, #1
 8010c78:	b2da      	uxtb	r2, r3
 8010c7a:	000d      	movs	r5, r1
 8010c7c:	197b      	adds	r3, r7, r5
 8010c7e:	721a      	strb	r2, [r3, #8]
                    linkAdrReq.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 8010c80:	4bc2      	ldr	r3, [pc, #776]	; (8010f8c <ProcessMacCommands+0x43c>)
 8010c82:	4ac4      	ldr	r2, [pc, #784]	; (8010f94 <ProcessMacCommands+0x444>)
 8010c84:	589b      	ldr	r3, [r3, r2]
 8010c86:	227e      	movs	r2, #126	; 0x7e
 8010c88:	5c9a      	ldrb	r2, [r3, r2]
 8010c8a:	197b      	adds	r3, r7, r5
 8010c8c:	729a      	strb	r2, [r3, #10]
                    linkAdrReq.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8010c8e:	4bbf      	ldr	r3, [pc, #764]	; (8010f8c <ProcessMacCommands+0x43c>)
 8010c90:	4ac0      	ldr	r2, [pc, #768]	; (8010f94 <ProcessMacCommands+0x444>)
 8010c92:	589b      	ldr	r3, [r3, r2]
 8010c94:	22b8      	movs	r2, #184	; 0xb8
 8010c96:	5c9a      	ldrb	r2, [r3, r2]
 8010c98:	197b      	adds	r3, r7, r5
 8010c9a:	725a      	strb	r2, [r3, #9]
                    linkAdrReq.CurrentDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8010c9c:	4bbb      	ldr	r3, [pc, #748]	; (8010f8c <ProcessMacCommands+0x43c>)
 8010c9e:	4abd      	ldr	r2, [pc, #756]	; (8010f94 <ProcessMacCommands+0x444>)
 8010ca0:	589b      	ldr	r3, [r3, r2]
 8010ca2:	2285      	movs	r2, #133	; 0x85
 8010ca4:	569a      	ldrsb	r2, [r3, r2]
 8010ca6:	197b      	adds	r3, r7, r5
 8010ca8:	72da      	strb	r2, [r3, #11]
                    linkAdrReq.CurrentTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8010caa:	4bb8      	ldr	r3, [pc, #736]	; (8010f8c <ProcessMacCommands+0x43c>)
 8010cac:	4ab9      	ldr	r2, [pc, #740]	; (8010f94 <ProcessMacCommands+0x444>)
 8010cae:	589b      	ldr	r3, [r3, r2]
 8010cb0:	2284      	movs	r2, #132	; 0x84
 8010cb2:	569a      	ldrsb	r2, [r3, r2]
 8010cb4:	197b      	adds	r3, r7, r5
 8010cb6:	731a      	strb	r2, [r3, #12]
                    linkAdrReq.CurrentNbRep = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 8010cb8:	4bb4      	ldr	r3, [pc, #720]	; (8010f8c <ProcessMacCommands+0x43c>)
 8010cba:	4ab6      	ldr	r2, [pc, #728]	; (8010f94 <ProcessMacCommands+0x444>)
 8010cbc:	589b      	ldr	r3, [r3, r2]
 8010cbe:	22a4      	movs	r2, #164	; 0xa4
 8010cc0:	5c9a      	ldrb	r2, [r3, r2]
 8010cc2:	197b      	adds	r3, r7, r5
 8010cc4:	735a      	strb	r2, [r3, #13]
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 8010cc6:	4bb1      	ldr	r3, [pc, #708]	; (8010f8c <ProcessMacCommands+0x43c>)
 8010cc8:	4ab2      	ldr	r2, [pc, #712]	; (8010f94 <ProcessMacCommands+0x444>)
 8010cca:	5899      	ldr	r1, [r3, r2]
 8010ccc:	197b      	adds	r3, r7, r5
 8010cce:	22b0      	movs	r2, #176	; 0xb0
 8010cd0:	0052      	lsls	r2, r2, #1
 8010cd2:	588a      	ldr	r2, [r1, r2]
 8010cd4:	601a      	str	r2, [r3, #0]

                    // Process the ADR requests
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 8010cd6:	4bad      	ldr	r3, [pc, #692]	; (8010f8c <ProcessMacCommands+0x43c>)
 8010cd8:	4aae      	ldr	r2, [pc, #696]	; (8010f94 <ProcessMacCommands+0x444>)
 8010cda:	589b      	ldr	r3, [r3, r2]
 8010cdc:	7818      	ldrb	r0, [r3, #0]
 8010cde:	193c      	adds	r4, r7, r4
 8010ce0:	19ba      	adds	r2, r7, r6
 8010ce2:	1979      	adds	r1, r7, r5
 8010ce4:	2354      	movs	r3, #84	; 0x54
 8010ce6:	18fb      	adds	r3, r7, r3
 8010ce8:	9301      	str	r3, [sp, #4]
 8010cea:	2555      	movs	r5, #85	; 0x55
 8010cec:	197b      	adds	r3, r7, r5
 8010cee:	9300      	str	r3, [sp, #0]
 8010cf0:	0023      	movs	r3, r4
 8010cf2:	f006 f8a0 	bl	8016e36 <RegionLinkAdrReq>
 8010cf6:	0003      	movs	r3, r0
 8010cf8:	001a      	movs	r2, r3
 8010cfa:	216b      	movs	r1, #107	; 0x6b
 8010cfc:	187b      	adds	r3, r7, r1
 8010cfe:	701a      	strb	r2, [r3, #0]
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 8010d00:	187b      	adds	r3, r7, r1
 8010d02:	781b      	ldrb	r3, [r3, #0]
 8010d04:	001a      	movs	r2, r3
 8010d06:	2307      	movs	r3, #7
 8010d08:	4013      	ands	r3, r2
 8010d0a:	2b07      	cmp	r3, #7
 8010d0c:	d117      	bne.n	8010d3e <ProcessMacCommands+0x1ee>
                    {
                        MacCtx.NvmCtx->MacParams.ChannelsDatarate = linkAdrDatarate;
 8010d0e:	4b9f      	ldr	r3, [pc, #636]	; (8010f8c <ProcessMacCommands+0x43c>)
 8010d10:	4aa0      	ldr	r2, [pc, #640]	; (8010f94 <ProcessMacCommands+0x444>)
 8010d12:	589b      	ldr	r3, [r3, r2]
 8010d14:	19ba      	adds	r2, r7, r6
 8010d16:	2100      	movs	r1, #0
 8010d18:	5651      	ldrsb	r1, [r2, r1]
 8010d1a:	2285      	movs	r2, #133	; 0x85
 8010d1c:	5499      	strb	r1, [r3, r2]
                        MacCtx.NvmCtx->MacParams.ChannelsTxPower = linkAdrTxPower;
 8010d1e:	4b9b      	ldr	r3, [pc, #620]	; (8010f8c <ProcessMacCommands+0x43c>)
 8010d20:	4a9c      	ldr	r2, [pc, #624]	; (8010f94 <ProcessMacCommands+0x444>)
 8010d22:	589b      	ldr	r3, [r3, r2]
 8010d24:	2456      	movs	r4, #86	; 0x56
 8010d26:	193a      	adds	r2, r7, r4
 8010d28:	2100      	movs	r1, #0
 8010d2a:	5651      	ldrsb	r1, [r2, r1]
 8010d2c:	2284      	movs	r2, #132	; 0x84
 8010d2e:	5499      	strb	r1, [r3, r2]
                        MacCtx.NvmCtx->MacParams.ChannelsNbTrans = linkAdrNbRep;
 8010d30:	4b96      	ldr	r3, [pc, #600]	; (8010f8c <ProcessMacCommands+0x43c>)
 8010d32:	4a98      	ldr	r2, [pc, #608]	; (8010f94 <ProcessMacCommands+0x444>)
 8010d34:	589b      	ldr	r3, [r3, r2]
 8010d36:	197a      	adds	r2, r7, r5
 8010d38:	7811      	ldrb	r1, [r2, #0]
 8010d3a:	22a4      	movs	r2, #164	; 0xa4
 8010d3c:	5499      	strb	r1, [r3, r2]
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8010d3e:	2386      	movs	r3, #134	; 0x86
 8010d40:	18fb      	adds	r3, r7, r3
 8010d42:	2200      	movs	r2, #0
 8010d44:	701a      	strb	r2, [r3, #0]
 8010d46:	e00c      	b.n	8010d62 <ProcessMacCommands+0x212>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8010d48:	236b      	movs	r3, #107	; 0x6b
 8010d4a:	18fb      	adds	r3, r7, r3
 8010d4c:	2201      	movs	r2, #1
 8010d4e:	0019      	movs	r1, r3
 8010d50:	2003      	movs	r0, #3
 8010d52:	f003 ffb9 	bl	8014cc8 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8010d56:	2186      	movs	r1, #134	; 0x86
 8010d58:	187b      	adds	r3, r7, r1
 8010d5a:	781a      	ldrb	r2, [r3, #0]
 8010d5c:	187b      	adds	r3, r7, r1
 8010d5e:	3201      	adds	r2, #1
 8010d60:	701a      	strb	r2, [r3, #0]
 8010d62:	2454      	movs	r4, #84	; 0x54
 8010d64:	193b      	adds	r3, r7, r4
 8010d66:	781b      	ldrb	r3, [r3, #0]
 8010d68:	2105      	movs	r1, #5
 8010d6a:	0018      	movs	r0, r3
 8010d6c:	f7ef f9de 	bl	800012c <__udivsi3>
 8010d70:	0003      	movs	r3, r0
 8010d72:	b2db      	uxtb	r3, r3
 8010d74:	2286      	movs	r2, #134	; 0x86
 8010d76:	18ba      	adds	r2, r7, r2
 8010d78:	7812      	ldrb	r2, [r2, #0]
 8010d7a:	429a      	cmp	r2, r3
 8010d7c:	d3e4      	bcc.n	8010d48 <ProcessMacCommands+0x1f8>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 8010d7e:	193b      	adds	r3, r7, r4
 8010d80:	781a      	ldrb	r2, [r3, #0]
 8010d82:	1cfb      	adds	r3, r7, #3
 8010d84:	781b      	ldrb	r3, [r3, #0]
 8010d86:	18d3      	adds	r3, r2, r3
 8010d88:	b2da      	uxtb	r2, r3
 8010d8a:	1cfb      	adds	r3, r7, #3
 8010d8c:	3a01      	subs	r2, #1
 8010d8e:	701a      	strb	r2, [r3, #0]
                }
                break;
 8010d90:	46c0      	nop			; (mov r8, r8)
 8010d92:	f000 fc53 	bl	801163c <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 8010d96:	1cfb      	adds	r3, r7, #3
 8010d98:	781b      	ldrb	r3, [r3, #0]
 8010d9a:	1cfa      	adds	r2, r7, #3
 8010d9c:	1c59      	adds	r1, r3, #1
 8010d9e:	7011      	strb	r1, [r2, #0]
 8010da0:	001a      	movs	r2, r3
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	189b      	adds	r3, r3, r2
 8010da6:	781a      	ldrb	r2, [r3, #0]
 8010da8:	4b78      	ldr	r3, [pc, #480]	; (8010f8c <ProcessMacCommands+0x43c>)
 8010daa:	497a      	ldr	r1, [pc, #488]	; (8010f94 <ProcessMacCommands+0x444>)
 8010dac:	585b      	ldr	r3, [r3, r1]
 8010dae:	210f      	movs	r1, #15
 8010db0:	400a      	ands	r2, r1
 8010db2:	b2d1      	uxtb	r1, r2
 8010db4:	22c8      	movs	r2, #200	; 0xc8
 8010db6:	5499      	strb	r1, [r3, r2]
                MacCtx.NvmCtx->AggregatedDCycle = 1 << MacCtx.NvmCtx->MaxDCycle;
 8010db8:	4b74      	ldr	r3, [pc, #464]	; (8010f8c <ProcessMacCommands+0x43c>)
 8010dba:	4a76      	ldr	r2, [pc, #472]	; (8010f94 <ProcessMacCommands+0x444>)
 8010dbc:	589b      	ldr	r3, [r3, r2]
 8010dbe:	22c8      	movs	r2, #200	; 0xc8
 8010dc0:	5c9b      	ldrb	r3, [r3, r2]
 8010dc2:	001a      	movs	r2, r3
 8010dc4:	2301      	movs	r3, #1
 8010dc6:	4093      	lsls	r3, r2
 8010dc8:	0019      	movs	r1, r3
 8010dca:	4b70      	ldr	r3, [pc, #448]	; (8010f8c <ProcessMacCommands+0x43c>)
 8010dcc:	4a71      	ldr	r2, [pc, #452]	; (8010f94 <ProcessMacCommands+0x444>)
 8010dce:	589a      	ldr	r2, [r3, r2]
 8010dd0:	b289      	uxth	r1, r1
 8010dd2:	23a6      	movs	r3, #166	; 0xa6
 8010dd4:	005b      	lsls	r3, r3, #1
 8010dd6:	52d1      	strh	r1, [r2, r3]
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8010dd8:	2368      	movs	r3, #104	; 0x68
 8010dda:	18fb      	adds	r3, r7, r3
 8010ddc:	2200      	movs	r2, #0
 8010dde:	0019      	movs	r1, r3
 8010de0:	2004      	movs	r0, #4
 8010de2:	f003 ff71 	bl	8014cc8 <LoRaMacCommandsAddCmd>
                break;
 8010de6:	f000 fc29 	bl	801163c <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 8010dea:	256b      	movs	r5, #107	; 0x6b
 8010dec:	197b      	adds	r3, r7, r5
 8010dee:	2207      	movs	r2, #7
 8010df0:	701a      	strb	r2, [r3, #0]

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8010df2:	1cfb      	adds	r3, r7, #3
 8010df4:	781b      	ldrb	r3, [r3, #0]
 8010df6:	687a      	ldr	r2, [r7, #4]
 8010df8:	18d3      	adds	r3, r2, r3
 8010dfa:	781b      	ldrb	r3, [r3, #0]
 8010dfc:	091b      	lsrs	r3, r3, #4
 8010dfe:	b2db      	uxtb	r3, r3
 8010e00:	b25b      	sxtb	r3, r3
 8010e02:	2207      	movs	r2, #7
 8010e04:	4013      	ands	r3, r2
 8010e06:	b25a      	sxtb	r2, r3
 8010e08:	204c      	movs	r0, #76	; 0x4c
 8010e0a:	183b      	adds	r3, r7, r0
 8010e0c:	705a      	strb	r2, [r3, #1]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8010e0e:	1cfb      	adds	r3, r7, #3
 8010e10:	781b      	ldrb	r3, [r3, #0]
 8010e12:	687a      	ldr	r2, [r7, #4]
 8010e14:	18d3      	adds	r3, r2, r3
 8010e16:	781b      	ldrb	r3, [r3, #0]
 8010e18:	b25b      	sxtb	r3, r3
 8010e1a:	220f      	movs	r2, #15
 8010e1c:	4013      	ands	r3, r2
 8010e1e:	b25a      	sxtb	r2, r3
 8010e20:	183b      	adds	r3, r7, r0
 8010e22:	701a      	strb	r2, [r3, #0]
                macIndex++;
 8010e24:	1cfb      	adds	r3, r7, #3
 8010e26:	781a      	ldrb	r2, [r3, #0]
 8010e28:	1cfb      	adds	r3, r7, #3
 8010e2a:	3201      	adds	r2, #1
 8010e2c:	701a      	strb	r2, [r3, #0]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8010e2e:	1cfb      	adds	r3, r7, #3
 8010e30:	781b      	ldrb	r3, [r3, #0]
 8010e32:	1cfa      	adds	r2, r7, #3
 8010e34:	1c59      	adds	r1, r3, #1
 8010e36:	7011      	strb	r1, [r2, #0]
 8010e38:	001a      	movs	r2, r3
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	189b      	adds	r3, r3, r2
 8010e3e:	781b      	ldrb	r3, [r3, #0]
 8010e40:	001a      	movs	r2, r3
 8010e42:	183b      	adds	r3, r7, r0
 8010e44:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8010e46:	1cfb      	adds	r3, r7, #3
 8010e48:	781b      	ldrb	r3, [r3, #0]
 8010e4a:	1cfa      	adds	r2, r7, #3
 8010e4c:	1c59      	adds	r1, r3, #1
 8010e4e:	7011      	strb	r1, [r2, #0]
 8010e50:	001a      	movs	r2, r3
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	189b      	adds	r3, r3, r2
 8010e56:	781b      	ldrb	r3, [r3, #0]
 8010e58:	021a      	lsls	r2, r3, #8
 8010e5a:	183b      	adds	r3, r7, r0
 8010e5c:	685b      	ldr	r3, [r3, #4]
 8010e5e:	431a      	orrs	r2, r3
 8010e60:	183b      	adds	r3, r7, r0
 8010e62:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8010e64:	1cfb      	adds	r3, r7, #3
 8010e66:	781b      	ldrb	r3, [r3, #0]
 8010e68:	1cfa      	adds	r2, r7, #3
 8010e6a:	1c59      	adds	r1, r3, #1
 8010e6c:	7011      	strb	r1, [r2, #0]
 8010e6e:	001a      	movs	r2, r3
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	189b      	adds	r3, r3, r2
 8010e74:	781b      	ldrb	r3, [r3, #0]
 8010e76:	041a      	lsls	r2, r3, #16
 8010e78:	183b      	adds	r3, r7, r0
 8010e7a:	685b      	ldr	r3, [r3, #4]
 8010e7c:	431a      	orrs	r2, r3
 8010e7e:	0004      	movs	r4, r0
 8010e80:	193b      	adds	r3, r7, r4
 8010e82:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency *= 100;
 8010e84:	193b      	adds	r3, r7, r4
 8010e86:	685b      	ldr	r3, [r3, #4]
 8010e88:	2264      	movs	r2, #100	; 0x64
 8010e8a:	435a      	muls	r2, r3
 8010e8c:	193b      	adds	r3, r7, r4
 8010e8e:	605a      	str	r2, [r3, #4]

                // Perform request on region
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 8010e90:	4b3e      	ldr	r3, [pc, #248]	; (8010f8c <ProcessMacCommands+0x43c>)
 8010e92:	4a40      	ldr	r2, [pc, #256]	; (8010f94 <ProcessMacCommands+0x444>)
 8010e94:	589b      	ldr	r3, [r3, r2]
 8010e96:	781b      	ldrb	r3, [r3, #0]
 8010e98:	193a      	adds	r2, r7, r4
 8010e9a:	0011      	movs	r1, r2
 8010e9c:	0018      	movs	r0, r3
 8010e9e:	f005 ffe8 	bl	8016e72 <RegionRxParamSetupReq>
 8010ea2:	0003      	movs	r3, r0
 8010ea4:	001a      	movs	r2, r3
 8010ea6:	197b      	adds	r3, r7, r5
 8010ea8:	701a      	strb	r2, [r3, #0]

                if( ( status & 0x07 ) == 0x07 )
 8010eaa:	197b      	adds	r3, r7, r5
 8010eac:	781b      	ldrb	r3, [r3, #0]
 8010eae:	001a      	movs	r2, r3
 8010eb0:	2307      	movs	r3, #7
 8010eb2:	4013      	ands	r3, r2
 8010eb4:	2b07      	cmp	r3, #7
 8010eb6:	d128      	bne.n	8010f0a <ProcessMacCommands+0x3ba>
                {
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8010eb8:	193b      	adds	r3, r7, r4
 8010eba:	2100      	movs	r1, #0
 8010ebc:	5659      	ldrsb	r1, [r3, r1]
 8010ebe:	4b33      	ldr	r3, [pc, #204]	; (8010f8c <ProcessMacCommands+0x43c>)
 8010ec0:	4a34      	ldr	r2, [pc, #208]	; (8010f94 <ProcessMacCommands+0x444>)
 8010ec2:	589b      	ldr	r3, [r3, r2]
 8010ec4:	b2c9      	uxtb	r1, r1
 8010ec6:	22ac      	movs	r2, #172	; 0xac
 8010ec8:	5499      	strb	r1, [r3, r2]
                    MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8010eca:	193b      	adds	r3, r7, r4
 8010ecc:	2100      	movs	r1, #0
 8010ece:	5659      	ldrsb	r1, [r3, r1]
 8010ed0:	4b2e      	ldr	r3, [pc, #184]	; (8010f8c <ProcessMacCommands+0x43c>)
 8010ed2:	4a30      	ldr	r2, [pc, #192]	; (8010f94 <ProcessMacCommands+0x444>)
 8010ed4:	589b      	ldr	r3, [r3, r2]
 8010ed6:	b2c9      	uxtb	r1, r1
 8010ed8:	22b4      	movs	r2, #180	; 0xb4
 8010eda:	5499      	strb	r1, [r3, r2]
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8010edc:	4b2b      	ldr	r3, [pc, #172]	; (8010f8c <ProcessMacCommands+0x43c>)
 8010ede:	4a2d      	ldr	r2, [pc, #180]	; (8010f94 <ProcessMacCommands+0x444>)
 8010ee0:	589a      	ldr	r2, [r3, r2]
 8010ee2:	193b      	adds	r3, r7, r4
 8010ee4:	685b      	ldr	r3, [r3, #4]
 8010ee6:	21a8      	movs	r1, #168	; 0xa8
 8010ee8:	5053      	str	r3, [r2, r1]
                    MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8010eea:	4b28      	ldr	r3, [pc, #160]	; (8010f8c <ProcessMacCommands+0x43c>)
 8010eec:	4a29      	ldr	r2, [pc, #164]	; (8010f94 <ProcessMacCommands+0x444>)
 8010eee:	589a      	ldr	r2, [r3, r2]
 8010ef0:	193b      	adds	r3, r7, r4
 8010ef2:	685b      	ldr	r3, [r3, #4]
 8010ef4:	21b0      	movs	r1, #176	; 0xb0
 8010ef6:	5053      	str	r3, [r2, r1]
                    MacCtx.NvmCtx->MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8010ef8:	193b      	adds	r3, r7, r4
 8010efa:	2101      	movs	r1, #1
 8010efc:	5659      	ldrsb	r1, [r3, r1]
 8010efe:	4b23      	ldr	r3, [pc, #140]	; (8010f8c <ProcessMacCommands+0x43c>)
 8010f00:	4a24      	ldr	r2, [pc, #144]	; (8010f94 <ProcessMacCommands+0x444>)
 8010f02:	589b      	ldr	r3, [r3, r2]
 8010f04:	b2c9      	uxtb	r1, r1
 8010f06:	22a5      	movs	r2, #165	; 0xa5
 8010f08:	5499      	strb	r1, [r3, r2]
                }
                macCmdPayload[0] = status;
 8010f0a:	236b      	movs	r3, #107	; 0x6b
 8010f0c:	18fb      	adds	r3, r7, r3
 8010f0e:	781a      	ldrb	r2, [r3, #0]
 8010f10:	2168      	movs	r1, #104	; 0x68
 8010f12:	187b      	adds	r3, r7, r1
 8010f14:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8010f16:	187b      	adds	r3, r7, r1
 8010f18:	2201      	movs	r2, #1
 8010f1a:	0019      	movs	r1, r3
 8010f1c:	2005      	movs	r0, #5
 8010f1e:	f003 fed3 	bl	8014cc8 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 8010f22:	f7ff fe05 	bl	8010b30 <SetMlmeScheduleUplinkIndication>
                break;
 8010f26:	46c0      	nop			; (mov r8, r8)
 8010f28:	e388      	b.n	801163c <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8010f2a:	2185      	movs	r1, #133	; 0x85
 8010f2c:	187b      	adds	r3, r7, r1
 8010f2e:	22ff      	movs	r2, #255	; 0xff
 8010f30:	701a      	strb	r2, [r3, #0]
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8010f32:	4a16      	ldr	r2, [pc, #88]	; (8010f8c <ProcessMacCommands+0x43c>)
 8010f34:	23d2      	movs	r3, #210	; 0xd2
 8010f36:	009b      	lsls	r3, r3, #2
 8010f38:	58d3      	ldr	r3, [r2, r3]
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d00f      	beq.n	8010f5e <ProcessMacCommands+0x40e>
 8010f3e:	4a13      	ldr	r2, [pc, #76]	; (8010f8c <ProcessMacCommands+0x43c>)
 8010f40:	23d2      	movs	r3, #210	; 0xd2
 8010f42:	009b      	lsls	r3, r3, #2
 8010f44:	58d3      	ldr	r3, [r2, r3]
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d008      	beq.n	8010f5e <ProcessMacCommands+0x40e>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8010f4c:	4a0f      	ldr	r2, [pc, #60]	; (8010f8c <ProcessMacCommands+0x43c>)
 8010f4e:	23d2      	movs	r3, #210	; 0xd2
 8010f50:	009b      	lsls	r3, r3, #2
 8010f52:	58d3      	ldr	r3, [r2, r3]
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	187c      	adds	r4, r7, r1
 8010f58:	4798      	blx	r3
 8010f5a:	0003      	movs	r3, r0
 8010f5c:	7023      	strb	r3, [r4, #0]
                }
                macCmdPayload[0] = batteryLevel;
 8010f5e:	2168      	movs	r1, #104	; 0x68
 8010f60:	187b      	adds	r3, r7, r1
 8010f62:	2285      	movs	r2, #133	; 0x85
 8010f64:	18ba      	adds	r2, r7, r2
 8010f66:	7812      	ldrb	r2, [r2, #0]
 8010f68:	701a      	strb	r2, [r3, #0]
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8010f6a:	1c7b      	adds	r3, r7, #1
 8010f6c:	781b      	ldrb	r3, [r3, #0]
 8010f6e:	223f      	movs	r2, #63	; 0x3f
 8010f70:	4013      	ands	r3, r2
 8010f72:	b2da      	uxtb	r2, r3
 8010f74:	187b      	adds	r3, r7, r1
 8010f76:	705a      	strb	r2, [r3, #1]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8010f78:	187b      	adds	r3, r7, r1
 8010f7a:	2202      	movs	r2, #2
 8010f7c:	0019      	movs	r1, r3
 8010f7e:	2006      	movs	r0, #6
 8010f80:	f003 fea2 	bl	8014cc8 <LoRaMacCommandsAddCmd>
                break;
 8010f84:	e35a      	b.n	801163c <ProcessMacCommands+0xaec>
 8010f86:	46c0      	nop			; (mov r8, r8)
 8010f88:	0801f6e0 	.word	0x0801f6e0
 8010f8c:	200005b4 	.word	0x200005b4
 8010f90:	00000459 	.word	0x00000459
 8010f94:	00000484 	.word	0x00000484
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 8010f98:	246b      	movs	r4, #107	; 0x6b
 8010f9a:	193b      	adds	r3, r7, r4
 8010f9c:	2203      	movs	r2, #3
 8010f9e:	701a      	strb	r2, [r3, #0]

                newChannelReq.ChannelId = payload[macIndex++];
 8010fa0:	1cfb      	adds	r3, r7, #3
 8010fa2:	781b      	ldrb	r3, [r3, #0]
 8010fa4:	1cfa      	adds	r2, r7, #3
 8010fa6:	1c59      	adds	r1, r3, #1
 8010fa8:	7011      	strb	r1, [r2, #0]
 8010faa:	001a      	movs	r2, r3
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	189b      	adds	r3, r3, r2
 8010fb0:	781b      	ldrb	r3, [r3, #0]
 8010fb2:	b25a      	sxtb	r2, r3
 8010fb4:	2544      	movs	r5, #68	; 0x44
 8010fb6:	197b      	adds	r3, r7, r5
 8010fb8:	711a      	strb	r2, [r3, #4]
                newChannelReq.NewChannel = &chParam;
 8010fba:	197b      	adds	r3, r7, r5
 8010fbc:	2038      	movs	r0, #56	; 0x38
 8010fbe:	183a      	adds	r2, r7, r0
 8010fc0:	601a      	str	r2, [r3, #0]

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8010fc2:	1cfb      	adds	r3, r7, #3
 8010fc4:	781b      	ldrb	r3, [r3, #0]
 8010fc6:	1cfa      	adds	r2, r7, #3
 8010fc8:	1c59      	adds	r1, r3, #1
 8010fca:	7011      	strb	r1, [r2, #0]
 8010fcc:	001a      	movs	r2, r3
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	189b      	adds	r3, r3, r2
 8010fd2:	781b      	ldrb	r3, [r3, #0]
 8010fd4:	001a      	movs	r2, r3
 8010fd6:	183b      	adds	r3, r7, r0
 8010fd8:	601a      	str	r2, [r3, #0]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8010fda:	1cfb      	adds	r3, r7, #3
 8010fdc:	781b      	ldrb	r3, [r3, #0]
 8010fde:	1cfa      	adds	r2, r7, #3
 8010fe0:	1c59      	adds	r1, r3, #1
 8010fe2:	7011      	strb	r1, [r2, #0]
 8010fe4:	001a      	movs	r2, r3
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	189b      	adds	r3, r3, r2
 8010fea:	781b      	ldrb	r3, [r3, #0]
 8010fec:	021a      	lsls	r2, r3, #8
 8010fee:	183b      	adds	r3, r7, r0
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	431a      	orrs	r2, r3
 8010ff4:	183b      	adds	r3, r7, r0
 8010ff6:	601a      	str	r2, [r3, #0]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8010ff8:	1cfb      	adds	r3, r7, #3
 8010ffa:	781b      	ldrb	r3, [r3, #0]
 8010ffc:	1cfa      	adds	r2, r7, #3
 8010ffe:	1c59      	adds	r1, r3, #1
 8011000:	7011      	strb	r1, [r2, #0]
 8011002:	001a      	movs	r2, r3
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	189b      	adds	r3, r3, r2
 8011008:	781b      	ldrb	r3, [r3, #0]
 801100a:	041a      	lsls	r2, r3, #16
 801100c:	183b      	adds	r3, r7, r0
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	431a      	orrs	r2, r3
 8011012:	183b      	adds	r3, r7, r0
 8011014:	601a      	str	r2, [r3, #0]
                chParam.Frequency *= 100;
 8011016:	183b      	adds	r3, r7, r0
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	2264      	movs	r2, #100	; 0x64
 801101c:	435a      	muls	r2, r3
 801101e:	183b      	adds	r3, r7, r0
 8011020:	601a      	str	r2, [r3, #0]
                chParam.Rx1Frequency = 0;
 8011022:	183b      	adds	r3, r7, r0
 8011024:	2200      	movs	r2, #0
 8011026:	605a      	str	r2, [r3, #4]
                chParam.DrRange.Value = payload[macIndex++];
 8011028:	1cfb      	adds	r3, r7, #3
 801102a:	781b      	ldrb	r3, [r3, #0]
 801102c:	1cfa      	adds	r2, r7, #3
 801102e:	1c59      	adds	r1, r3, #1
 8011030:	7011      	strb	r1, [r2, #0]
 8011032:	001a      	movs	r2, r3
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	189b      	adds	r3, r3, r2
 8011038:	781b      	ldrb	r3, [r3, #0]
 801103a:	b25a      	sxtb	r2, r3
 801103c:	183b      	adds	r3, r7, r0
 801103e:	721a      	strb	r2, [r3, #8]

                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 8011040:	4ba0      	ldr	r3, [pc, #640]	; (80112c4 <ProcessMacCommands+0x774>)
 8011042:	4aa1      	ldr	r2, [pc, #644]	; (80112c8 <ProcessMacCommands+0x778>)
 8011044:	589b      	ldr	r3, [r3, r2]
 8011046:	781b      	ldrb	r3, [r3, #0]
 8011048:	197a      	adds	r2, r7, r5
 801104a:	0011      	movs	r1, r2
 801104c:	0018      	movs	r0, r3
 801104e:	f005 ff26 	bl	8016e9e <RegionNewChannelReq>
 8011052:	0003      	movs	r3, r0
 8011054:	001a      	movs	r2, r3
 8011056:	193b      	adds	r3, r7, r4
 8011058:	701a      	strb	r2, [r3, #0]

                macCmdPayload[0] = status;
 801105a:	193b      	adds	r3, r7, r4
 801105c:	781a      	ldrb	r2, [r3, #0]
 801105e:	2168      	movs	r1, #104	; 0x68
 8011060:	187b      	adds	r3, r7, r1
 8011062:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8011064:	187b      	adds	r3, r7, r1
 8011066:	2201      	movs	r2, #1
 8011068:	0019      	movs	r1, r3
 801106a:	2007      	movs	r0, #7
 801106c:	f003 fe2c 	bl	8014cc8 <LoRaMacCommandsAddCmd>
                break;
 8011070:	46c0      	nop			; (mov r8, r8)
 8011072:	e2e3      	b.n	801163c <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 8011074:	1cfb      	adds	r3, r7, #3
 8011076:	781b      	ldrb	r3, [r3, #0]
 8011078:	1cfa      	adds	r2, r7, #3
 801107a:	1c59      	adds	r1, r3, #1
 801107c:	7011      	strb	r1, [r2, #0]
 801107e:	001a      	movs	r2, r3
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	189b      	adds	r3, r3, r2
 8011084:	781a      	ldrb	r2, [r3, #0]
 8011086:	2084      	movs	r0, #132	; 0x84
 8011088:	183b      	adds	r3, r7, r0
 801108a:	210f      	movs	r1, #15
 801108c:	400a      	ands	r2, r1
 801108e:	701a      	strb	r2, [r3, #0]

                if( delay == 0 )
 8011090:	183b      	adds	r3, r7, r0
 8011092:	781b      	ldrb	r3, [r3, #0]
 8011094:	2b00      	cmp	r3, #0
 8011096:	d104      	bne.n	80110a2 <ProcessMacCommands+0x552>
                {
                    delay++;
 8011098:	183b      	adds	r3, r7, r0
 801109a:	781a      	ldrb	r2, [r3, #0]
 801109c:	183b      	adds	r3, r7, r0
 801109e:	3201      	adds	r2, #1
 80110a0:	701a      	strb	r2, [r3, #0]
                }
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 80110a2:	2384      	movs	r3, #132	; 0x84
 80110a4:	18fb      	adds	r3, r7, r3
 80110a6:	781a      	ldrb	r2, [r3, #0]
 80110a8:	0013      	movs	r3, r2
 80110aa:	015b      	lsls	r3, r3, #5
 80110ac:	1a9b      	subs	r3, r3, r2
 80110ae:	009b      	lsls	r3, r3, #2
 80110b0:	189b      	adds	r3, r3, r2
 80110b2:	00db      	lsls	r3, r3, #3
 80110b4:	0019      	movs	r1, r3
 80110b6:	4b83      	ldr	r3, [pc, #524]	; (80112c4 <ProcessMacCommands+0x774>)
 80110b8:	4a83      	ldr	r2, [pc, #524]	; (80112c8 <ProcessMacCommands+0x778>)
 80110ba:	589b      	ldr	r3, [r3, r2]
 80110bc:	2294      	movs	r2, #148	; 0x94
 80110be:	5099      	str	r1, [r3, r2]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 80110c0:	4b80      	ldr	r3, [pc, #512]	; (80112c4 <ProcessMacCommands+0x774>)
 80110c2:	4a81      	ldr	r2, [pc, #516]	; (80112c8 <ProcessMacCommands+0x778>)
 80110c4:	589b      	ldr	r3, [r3, r2]
 80110c6:	2294      	movs	r2, #148	; 0x94
 80110c8:	589b      	ldr	r3, [r3, r2]
 80110ca:	4a7e      	ldr	r2, [pc, #504]	; (80112c4 <ProcessMacCommands+0x774>)
 80110cc:	497e      	ldr	r1, [pc, #504]	; (80112c8 <ProcessMacCommands+0x778>)
 80110ce:	5852      	ldr	r2, [r2, r1]
 80110d0:	21fa      	movs	r1, #250	; 0xfa
 80110d2:	0089      	lsls	r1, r1, #2
 80110d4:	468c      	mov	ip, r1
 80110d6:	4463      	add	r3, ip
 80110d8:	2198      	movs	r1, #152	; 0x98
 80110da:	5053      	str	r3, [r2, r1]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 80110dc:	2368      	movs	r3, #104	; 0x68
 80110de:	18fb      	adds	r3, r7, r3
 80110e0:	2200      	movs	r2, #0
 80110e2:	0019      	movs	r1, r3
 80110e4:	2008      	movs	r0, #8
 80110e6:	f003 fdef 	bl	8014cc8 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 80110ea:	f7ff fd21 	bl	8010b30 <SetMlmeScheduleUplinkIndication>
                break;
 80110ee:	e2a5      	b.n	801163c <ProcessMacCommands+0xaec>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 80110f0:	1cfb      	adds	r3, r7, #3
 80110f2:	781b      	ldrb	r3, [r3, #0]
 80110f4:	1cfa      	adds	r2, r7, #3
 80110f6:	1c59      	adds	r1, r3, #1
 80110f8:	7011      	strb	r1, [r2, #0]
 80110fa:	001a      	movs	r2, r3
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	189a      	adds	r2, r3, r2
 8011100:	2076      	movs	r0, #118	; 0x76
 8011102:	183b      	adds	r3, r7, r0
 8011104:	7812      	ldrb	r2, [r2, #0]
 8011106:	701a      	strb	r2, [r3, #0]

                txParamSetupReq.UplinkDwellTime = 0;
 8011108:	2134      	movs	r1, #52	; 0x34
 801110a:	187b      	adds	r3, r7, r1
 801110c:	2200      	movs	r2, #0
 801110e:	701a      	strb	r2, [r3, #0]
                txParamSetupReq.DownlinkDwellTime = 0;
 8011110:	187b      	adds	r3, r7, r1
 8011112:	2200      	movs	r2, #0
 8011114:	705a      	strb	r2, [r3, #1]

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8011116:	183b      	adds	r3, r7, r0
 8011118:	781b      	ldrb	r3, [r3, #0]
 801111a:	2220      	movs	r2, #32
 801111c:	4013      	ands	r3, r2
 801111e:	d002      	beq.n	8011126 <ProcessMacCommands+0x5d6>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 8011120:	187b      	adds	r3, r7, r1
 8011122:	2201      	movs	r2, #1
 8011124:	705a      	strb	r2, [r3, #1]
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8011126:	2376      	movs	r3, #118	; 0x76
 8011128:	18fb      	adds	r3, r7, r3
 801112a:	781b      	ldrb	r3, [r3, #0]
 801112c:	2210      	movs	r2, #16
 801112e:	4013      	ands	r3, r2
 8011130:	d003      	beq.n	801113a <ProcessMacCommands+0x5ea>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 8011132:	2334      	movs	r3, #52	; 0x34
 8011134:	18fb      	adds	r3, r7, r3
 8011136:	2201      	movs	r2, #1
 8011138:	701a      	strb	r2, [r3, #0]
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 801113a:	2376      	movs	r3, #118	; 0x76
 801113c:	18fb      	adds	r3, r7, r3
 801113e:	781b      	ldrb	r3, [r3, #0]
 8011140:	220f      	movs	r2, #15
 8011142:	4013      	ands	r3, r2
 8011144:	b2da      	uxtb	r2, r3
 8011146:	2434      	movs	r4, #52	; 0x34
 8011148:	193b      	adds	r3, r7, r4
 801114a:	709a      	strb	r2, [r3, #2]

                // Check the status for correctness
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 801114c:	4b5d      	ldr	r3, [pc, #372]	; (80112c4 <ProcessMacCommands+0x774>)
 801114e:	4a5e      	ldr	r2, [pc, #376]	; (80112c8 <ProcessMacCommands+0x778>)
 8011150:	589b      	ldr	r3, [r3, r2]
 8011152:	781b      	ldrb	r3, [r3, #0]
 8011154:	193a      	adds	r2, r7, r4
 8011156:	0011      	movs	r1, r2
 8011158:	0018      	movs	r0, r3
 801115a:	f005 feb6 	bl	8016eca <RegionTxParamSetupReq>
 801115e:	0003      	movs	r3, r0
 8011160:	3301      	adds	r3, #1
 8011162:	d050      	beq.n	8011206 <ProcessMacCommands+0x6b6>
                {
                    // Accept command
                    MacCtx.NvmCtx->MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8011164:	4b57      	ldr	r3, [pc, #348]	; (80112c4 <ProcessMacCommands+0x774>)
 8011166:	4a58      	ldr	r2, [pc, #352]	; (80112c8 <ProcessMacCommands+0x778>)
 8011168:	589b      	ldr	r3, [r3, r2]
 801116a:	193a      	adds	r2, r7, r4
 801116c:	7811      	ldrb	r1, [r2, #0]
 801116e:	22b8      	movs	r2, #184	; 0xb8
 8011170:	5499      	strb	r1, [r3, r2]
                    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8011172:	4b54      	ldr	r3, [pc, #336]	; (80112c4 <ProcessMacCommands+0x774>)
 8011174:	4a54      	ldr	r2, [pc, #336]	; (80112c8 <ProcessMacCommands+0x778>)
 8011176:	589b      	ldr	r3, [r3, r2]
 8011178:	193a      	adds	r2, r7, r4
 801117a:	7851      	ldrb	r1, [r2, #1]
 801117c:	22b9      	movs	r2, #185	; 0xb9
 801117e:	5499      	strb	r1, [r3, r2]
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8011180:	193b      	adds	r3, r7, r4
 8011182:	789b      	ldrb	r3, [r3, #2]
 8011184:	001a      	movs	r2, r3
 8011186:	4b51      	ldr	r3, [pc, #324]	; (80112cc <ProcessMacCommands+0x77c>)
 8011188:	5c9a      	ldrb	r2, [r3, r2]
 801118a:	4b4e      	ldr	r3, [pc, #312]	; (80112c4 <ProcessMacCommands+0x774>)
 801118c:	494e      	ldr	r1, [pc, #312]	; (80112c8 <ProcessMacCommands+0x778>)
 801118e:	585c      	ldr	r4, [r3, r1]
 8011190:	0010      	movs	r0, r2
 8011192:	f7ef ff3d 	bl	8001010 <__aeabi_ui2f>
 8011196:	1c03      	adds	r3, r0, #0
 8011198:	22bc      	movs	r2, #188	; 0xbc
 801119a:	50a3      	str	r3, [r4, r2]
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 801119c:	212c      	movs	r1, #44	; 0x2c
 801119e:	187b      	adds	r3, r7, r1
 80111a0:	2202      	movs	r2, #2
 80111a2:	701a      	strb	r2, [r3, #0]
                    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 80111a4:	4b47      	ldr	r3, [pc, #284]	; (80112c4 <ProcessMacCommands+0x774>)
 80111a6:	4a48      	ldr	r2, [pc, #288]	; (80112c8 <ProcessMacCommands+0x778>)
 80111a8:	589b      	ldr	r3, [r3, r2]
 80111aa:	22b8      	movs	r2, #184	; 0xb8
 80111ac:	5c9a      	ldrb	r2, [r3, r2]
 80111ae:	187b      	adds	r3, r7, r1
 80111b0:	709a      	strb	r2, [r3, #2]
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80111b2:	4b44      	ldr	r3, [pc, #272]	; (80112c4 <ProcessMacCommands+0x774>)
 80111b4:	4a44      	ldr	r2, [pc, #272]	; (80112c8 <ProcessMacCommands+0x778>)
 80111b6:	589b      	ldr	r3, [r3, r2]
 80111b8:	781b      	ldrb	r3, [r3, #0]
 80111ba:	187a      	adds	r2, r7, r1
 80111bc:	0011      	movs	r1, r2
 80111be:	0018      	movs	r0, r3
 80111c0:	f005 fd31 	bl	8016c26 <RegionGetPhyParam>
 80111c4:	0003      	movs	r3, r0
 80111c6:	001a      	movs	r2, r3
 80111c8:	2128      	movs	r1, #40	; 0x28
 80111ca:	187b      	adds	r3, r7, r1
 80111cc:	601a      	str	r2, [r3, #0]
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 80111ce:	187b      	adds	r3, r7, r1
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	b259      	sxtb	r1, r3
 80111d4:	4b3b      	ldr	r3, [pc, #236]	; (80112c4 <ProcessMacCommands+0x774>)
 80111d6:	4a3c      	ldr	r2, [pc, #240]	; (80112c8 <ProcessMacCommands+0x778>)
 80111d8:	589b      	ldr	r3, [r3, r2]
 80111da:	2285      	movs	r2, #133	; 0x85
 80111dc:	5698      	ldrsb	r0, [r3, r2]
 80111de:	4b39      	ldr	r3, [pc, #228]	; (80112c4 <ProcessMacCommands+0x774>)
 80111e0:	4a39      	ldr	r2, [pc, #228]	; (80112c8 <ProcessMacCommands+0x778>)
 80111e2:	589b      	ldr	r3, [r3, r2]
 80111e4:	1c04      	adds	r4, r0, #0
 80111e6:	1c08      	adds	r0, r1, #0
 80111e8:	b241      	sxtb	r1, r0
 80111ea:	b262      	sxtb	r2, r4
 80111ec:	4291      	cmp	r1, r2
 80111ee:	da00      	bge.n	80111f2 <ProcessMacCommands+0x6a2>
 80111f0:	1c20      	adds	r0, r4, #0
 80111f2:	b241      	sxtb	r1, r0
 80111f4:	2285      	movs	r2, #133	; 0x85
 80111f6:	5499      	strb	r1, [r3, r2]

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 80111f8:	2368      	movs	r3, #104	; 0x68
 80111fa:	18fb      	adds	r3, r7, r3
 80111fc:	2200      	movs	r2, #0
 80111fe:	0019      	movs	r1, r3
 8011200:	2009      	movs	r0, #9
 8011202:	f003 fd61 	bl	8014cc8 <LoRaMacCommandsAddCmd>
                }
                break;
 8011206:	46c0      	nop			; (mov r8, r8)
 8011208:	e218      	b.n	801163c <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 801120a:	246b      	movs	r4, #107	; 0x6b
 801120c:	193b      	adds	r3, r7, r4
 801120e:	2203      	movs	r2, #3
 8011210:	701a      	strb	r2, [r3, #0]

                dlChannelReq.ChannelId = payload[macIndex++];
 8011212:	1cfb      	adds	r3, r7, #3
 8011214:	781b      	ldrb	r3, [r3, #0]
 8011216:	1cfa      	adds	r2, r7, #3
 8011218:	1c59      	adds	r1, r3, #1
 801121a:	7011      	strb	r1, [r2, #0]
 801121c:	001a      	movs	r2, r3
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	189b      	adds	r3, r3, r2
 8011222:	781a      	ldrb	r2, [r3, #0]
 8011224:	2020      	movs	r0, #32
 8011226:	183b      	adds	r3, r7, r0
 8011228:	701a      	strb	r2, [r3, #0]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 801122a:	1cfb      	adds	r3, r7, #3
 801122c:	781b      	ldrb	r3, [r3, #0]
 801122e:	1cfa      	adds	r2, r7, #3
 8011230:	1c59      	adds	r1, r3, #1
 8011232:	7011      	strb	r1, [r2, #0]
 8011234:	001a      	movs	r2, r3
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	189b      	adds	r3, r3, r2
 801123a:	781b      	ldrb	r3, [r3, #0]
 801123c:	001a      	movs	r2, r3
 801123e:	183b      	adds	r3, r7, r0
 8011240:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8011242:	1cfb      	adds	r3, r7, #3
 8011244:	781b      	ldrb	r3, [r3, #0]
 8011246:	1cfa      	adds	r2, r7, #3
 8011248:	1c59      	adds	r1, r3, #1
 801124a:	7011      	strb	r1, [r2, #0]
 801124c:	001a      	movs	r2, r3
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	189b      	adds	r3, r3, r2
 8011252:	781b      	ldrb	r3, [r3, #0]
 8011254:	021a      	lsls	r2, r3, #8
 8011256:	183b      	adds	r3, r7, r0
 8011258:	685b      	ldr	r3, [r3, #4]
 801125a:	431a      	orrs	r2, r3
 801125c:	183b      	adds	r3, r7, r0
 801125e:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8011260:	1cfb      	adds	r3, r7, #3
 8011262:	781b      	ldrb	r3, [r3, #0]
 8011264:	1cfa      	adds	r2, r7, #3
 8011266:	1c59      	adds	r1, r3, #1
 8011268:	7011      	strb	r1, [r2, #0]
 801126a:	001a      	movs	r2, r3
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	189b      	adds	r3, r3, r2
 8011270:	781b      	ldrb	r3, [r3, #0]
 8011272:	041a      	lsls	r2, r3, #16
 8011274:	183b      	adds	r3, r7, r0
 8011276:	685b      	ldr	r3, [r3, #4]
 8011278:	431a      	orrs	r2, r3
 801127a:	0001      	movs	r1, r0
 801127c:	187b      	adds	r3, r7, r1
 801127e:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency *= 100;
 8011280:	187b      	adds	r3, r7, r1
 8011282:	685b      	ldr	r3, [r3, #4]
 8011284:	2264      	movs	r2, #100	; 0x64
 8011286:	435a      	muls	r2, r3
 8011288:	187b      	adds	r3, r7, r1
 801128a:	605a      	str	r2, [r3, #4]

                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 801128c:	4b0d      	ldr	r3, [pc, #52]	; (80112c4 <ProcessMacCommands+0x774>)
 801128e:	4a0e      	ldr	r2, [pc, #56]	; (80112c8 <ProcessMacCommands+0x778>)
 8011290:	589b      	ldr	r3, [r3, r2]
 8011292:	781b      	ldrb	r3, [r3, #0]
 8011294:	187a      	adds	r2, r7, r1
 8011296:	0011      	movs	r1, r2
 8011298:	0018      	movs	r0, r3
 801129a:	f005 fe2c 	bl	8016ef6 <RegionDlChannelReq>
 801129e:	0003      	movs	r3, r0
 80112a0:	001a      	movs	r2, r3
 80112a2:	193b      	adds	r3, r7, r4
 80112a4:	701a      	strb	r2, [r3, #0]
                macCmdPayload[0] = status;
 80112a6:	193b      	adds	r3, r7, r4
 80112a8:	781a      	ldrb	r2, [r3, #0]
 80112aa:	2168      	movs	r1, #104	; 0x68
 80112ac:	187b      	adds	r3, r7, r1
 80112ae:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 80112b0:	187b      	adds	r3, r7, r1
 80112b2:	2201      	movs	r2, #1
 80112b4:	0019      	movs	r1, r3
 80112b6:	200a      	movs	r0, #10
 80112b8:	f003 fd06 	bl	8014cc8 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 80112bc:	f7ff fc38 	bl	8010b30 <SetMlmeScheduleUplinkIndication>
                break;
 80112c0:	46c0      	nop			; (mov r8, r8)
 80112c2:	e1bb      	b.n	801163c <ProcessMacCommands+0xaec>
 80112c4:	200005b4 	.word	0x200005b4
 80112c8:	00000484 	.word	0x00000484
 80112cc:	0801f690 	.word	0x0801f690
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 80112d0:	200a      	movs	r0, #10
 80112d2:	f004 f88b 	bl	80153ec <LoRaMacConfirmQueueIsCmdActive>
 80112d6:	1e03      	subs	r3, r0, #0
 80112d8:	d100      	bne.n	80112dc <ProcessMacCommands+0x78c>
 80112da:	e1af      	b.n	801163c <ProcessMacCommands+0xaec>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 80112dc:	210a      	movs	r1, #10
 80112de:	2000      	movs	r0, #0
 80112e0:	f003 ffe8 	bl	80152b4 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 80112e4:	2418      	movs	r4, #24
 80112e6:	193b      	adds	r3, r7, r4
 80112e8:	0018      	movs	r0, r3
 80112ea:	2308      	movs	r3, #8
 80112ec:	001a      	movs	r2, r3
 80112ee:	2100      	movs	r1, #0
 80112f0:	f00c fe85 	bl	801dffe <memset>
                    SysTime_t sysTime = { 0 };
 80112f4:	2510      	movs	r5, #16
 80112f6:	197b      	adds	r3, r7, r5
 80112f8:	0018      	movs	r0, r3
 80112fa:	2308      	movs	r3, #8
 80112fc:	001a      	movs	r2, r3
 80112fe:	2100      	movs	r1, #0
 8011300:	f00c fe7d 	bl	801dffe <memset>
                    SysTime_t sysTimeCurrent = { 0 };
 8011304:	2608      	movs	r6, #8
 8011306:	19bb      	adds	r3, r7, r6
 8011308:	0018      	movs	r0, r3
 801130a:	2308      	movs	r3, #8
 801130c:	001a      	movs	r2, r3
 801130e:	2100      	movs	r1, #0
 8011310:	f00c fe75 	bl	801dffe <memset>

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8011314:	1cfb      	adds	r3, r7, #3
 8011316:	781b      	ldrb	r3, [r3, #0]
 8011318:	1cfa      	adds	r2, r7, #3
 801131a:	1c59      	adds	r1, r3, #1
 801131c:	7011      	strb	r1, [r2, #0]
 801131e:	001a      	movs	r2, r3
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	189b      	adds	r3, r3, r2
 8011324:	781b      	ldrb	r3, [r3, #0]
 8011326:	001a      	movs	r2, r3
 8011328:	193b      	adds	r3, r7, r4
 801132a:	601a      	str	r2, [r3, #0]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 801132c:	1cfb      	adds	r3, r7, #3
 801132e:	781b      	ldrb	r3, [r3, #0]
 8011330:	1cfa      	adds	r2, r7, #3
 8011332:	1c59      	adds	r1, r3, #1
 8011334:	7011      	strb	r1, [r2, #0]
 8011336:	001a      	movs	r2, r3
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	189b      	adds	r3, r3, r2
 801133c:	781b      	ldrb	r3, [r3, #0]
 801133e:	021a      	lsls	r2, r3, #8
 8011340:	193b      	adds	r3, r7, r4
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	431a      	orrs	r2, r3
 8011346:	0020      	movs	r0, r4
 8011348:	193b      	adds	r3, r7, r4
 801134a:	601a      	str	r2, [r3, #0]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 801134c:	1cfb      	adds	r3, r7, #3
 801134e:	781b      	ldrb	r3, [r3, #0]
 8011350:	1cfa      	adds	r2, r7, #3
 8011352:	1c59      	adds	r1, r3, #1
 8011354:	7011      	strb	r1, [r2, #0]
 8011356:	001a      	movs	r2, r3
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	189b      	adds	r3, r3, r2
 801135c:	781b      	ldrb	r3, [r3, #0]
 801135e:	041a      	lsls	r2, r3, #16
 8011360:	183b      	adds	r3, r7, r0
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	431a      	orrs	r2, r3
 8011366:	183b      	adds	r3, r7, r0
 8011368:	601a      	str	r2, [r3, #0]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 801136a:	1cfb      	adds	r3, r7, #3
 801136c:	781b      	ldrb	r3, [r3, #0]
 801136e:	1cfa      	adds	r2, r7, #3
 8011370:	1c59      	adds	r1, r3, #1
 8011372:	7011      	strb	r1, [r2, #0]
 8011374:	001a      	movs	r2, r3
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	189b      	adds	r3, r3, r2
 801137a:	781b      	ldrb	r3, [r3, #0]
 801137c:	061a      	lsls	r2, r3, #24
 801137e:	183b      	adds	r3, r7, r0
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	431a      	orrs	r2, r3
 8011384:	183b      	adds	r3, r7, r0
 8011386:	601a      	str	r2, [r3, #0]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8011388:	1cfb      	adds	r3, r7, #3
 801138a:	781b      	ldrb	r3, [r3, #0]
 801138c:	1cfa      	adds	r2, r7, #3
 801138e:	1c59      	adds	r1, r3, #1
 8011390:	7011      	strb	r1, [r2, #0]
 8011392:	001a      	movs	r2, r3
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	189b      	adds	r3, r3, r2
 8011398:	781b      	ldrb	r3, [r3, #0]
 801139a:	b21a      	sxth	r2, r3
 801139c:	183b      	adds	r3, r7, r0
 801139e:	809a      	strh	r2, [r3, #4]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 80113a0:	0001      	movs	r1, r0
 80113a2:	183b      	adds	r3, r7, r0
 80113a4:	2204      	movs	r2, #4
 80113a6:	5e9b      	ldrsh	r3, [r3, r2]
 80113a8:	001a      	movs	r2, r3
 80113aa:	0013      	movs	r3, r2
 80113ac:	015b      	lsls	r3, r3, #5
 80113ae:	1a9b      	subs	r3, r3, r2
 80113b0:	009b      	lsls	r3, r3, #2
 80113b2:	189b      	adds	r3, r3, r2
 80113b4:	00db      	lsls	r3, r3, #3
 80113b6:	121b      	asrs	r3, r3, #8
 80113b8:	b21a      	sxth	r2, r3
 80113ba:	187b      	adds	r3, r7, r1
 80113bc:	809a      	strh	r2, [r3, #4]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 80113be:	197a      	adds	r2, r7, r5
 80113c0:	187b      	adds	r3, r7, r1
 80113c2:	0010      	movs	r0, r2
 80113c4:	0019      	movs	r1, r3
 80113c6:	2308      	movs	r3, #8
 80113c8:	001a      	movs	r2, r3
 80113ca:	f00c fe0f 	bl	801dfec <memcpy>
                    // Add Unix to Gps epcoh offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 80113ce:	197b      	adds	r3, r7, r5
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	4aa2      	ldr	r2, [pc, #648]	; (801165c <ProcessMacCommands+0xb0c>)
 80113d4:	189a      	adds	r2, r3, r2
 80113d6:	002c      	movs	r4, r5
 80113d8:	197b      	adds	r3, r7, r5
 80113da:	601a      	str	r2, [r3, #0]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 80113dc:	19bb      	adds	r3, r7, r6
 80113de:	0018      	movs	r0, r3
 80113e0:	f00b fb46 	bl	801ca70 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 80113e4:	236c      	movs	r3, #108	; 0x6c
 80113e6:	18fd      	adds	r5, r7, r3
 80113e8:	489d      	ldr	r0, [pc, #628]	; (8011660 <ProcessMacCommands+0xb10>)
 80113ea:	23ce      	movs	r3, #206	; 0xce
 80113ec:	0099      	lsls	r1, r3, #2
 80113ee:	0026      	movs	r6, r4
 80113f0:	193a      	adds	r2, r7, r4
 80113f2:	2404      	movs	r4, #4
 80113f4:	1843      	adds	r3, r0, r1
 80113f6:	191c      	adds	r4, r3, r4
 80113f8:	466b      	mov	r3, sp
 80113fa:	6824      	ldr	r4, [r4, #0]
 80113fc:	601c      	str	r4, [r3, #0]
 80113fe:	5843      	ldr	r3, [r0, r1]
 8011400:	6811      	ldr	r1, [r2, #0]
 8011402:	6852      	ldr	r2, [r2, #4]
 8011404:	0028      	movs	r0, r5
 8011406:	f00b faa7 	bl	801c958 <SysTimeSub>
 801140a:	0035      	movs	r5, r6
 801140c:	197c      	adds	r4, r7, r5
 801140e:	236c      	movs	r3, #108	; 0x6c
 8011410:	18fb      	adds	r3, r7, r3
 8011412:	2608      	movs	r6, #8
 8011414:	19ba      	adds	r2, r7, r6
 8011416:	4669      	mov	r1, sp
 8011418:	6858      	ldr	r0, [r3, #4]
 801141a:	6008      	str	r0, [r1, #0]
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	6811      	ldr	r1, [r2, #0]
 8011420:	6852      	ldr	r2, [r2, #4]
 8011422:	0020      	movs	r0, r4
 8011424:	f00b fa42 	bl	801c8ac <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 8011428:	197b      	adds	r3, r7, r5
 801142a:	6818      	ldr	r0, [r3, #0]
 801142c:	6859      	ldr	r1, [r3, #4]
 801142e:	f00b fae7 	bl	801ca00 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8011432:	f003 fac5 	bl	80149c0 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8011436:	4a8a      	ldr	r2, [pc, #552]	; (8011660 <ProcessMacCommands+0xb10>)
 8011438:	2387      	movs	r3, #135	; 0x87
 801143a:	00db      	lsls	r3, r3, #3
 801143c:	2101      	movs	r1, #1
 801143e:	54d1      	strb	r1, [r2, r3]
                }
                break;
 8011440:	e0fc      	b.n	801163c <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8011442:	200d      	movs	r0, #13
 8011444:	f003 ffd2 	bl	80153ec <LoRaMacConfirmQueueIsCmdActive>
 8011448:	1e03      	subs	r3, r0, #0
 801144a:	d100      	bne.n	801144e <ProcessMacCommands+0x8fe>
 801144c:	e0f6      	b.n	801163c <ProcessMacCommands+0xaec>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 801144e:	210d      	movs	r1, #13
 8011450:	2000      	movs	r0, #0
 8011452:	f003 ff2f 	bl	80152b4 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8011456:	4a82      	ldr	r2, [pc, #520]	; (8011660 <ProcessMacCommands+0xb10>)
 8011458:	2390      	movs	r3, #144	; 0x90
 801145a:	00db      	lsls	r3, r3, #3
 801145c:	5cd3      	ldrb	r3, [r2, r3]
 801145e:	2b04      	cmp	r3, #4
 8011460:	d100      	bne.n	8011464 <ProcessMacCommands+0x914>
 8011462:	e0eb      	b.n	801163c <ProcessMacCommands+0xaec>
 8011464:	4a7e      	ldr	r2, [pc, #504]	; (8011660 <ProcessMacCommands+0xb10>)
 8011466:	2390      	movs	r3, #144	; 0x90
 8011468:	00db      	lsls	r3, r3, #3
 801146a:	5cd3      	ldrb	r3, [r2, r3]
 801146c:	2b05      	cmp	r3, #5
 801146e:	d100      	bne.n	8011472 <ProcessMacCommands+0x922>
 8011470:	e0e4      	b.n	801163c <ProcessMacCommands+0xaec>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 8011472:	f003 fa86 	bl	8014982 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 8011476:	e0e1      	b.n	801163c <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 8011478:	207c      	movs	r0, #124	; 0x7c
 801147a:	183b      	adds	r3, r7, r0
 801147c:	2203      	movs	r2, #3
 801147e:	701a      	strb	r2, [r3, #0]
                uint32_t frequency = 0;
 8011480:	2300      	movs	r3, #0
 8011482:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 8011484:	1cfb      	adds	r3, r7, #3
 8011486:	781b      	ldrb	r3, [r3, #0]
 8011488:	1cfa      	adds	r2, r7, #3
 801148a:	1c59      	adds	r1, r3, #1
 801148c:	7011      	strb	r1, [r2, #0]
 801148e:	001a      	movs	r2, r3
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	189b      	adds	r3, r3, r2
 8011494:	781b      	ldrb	r3, [r3, #0]
 8011496:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8011498:	1cfb      	adds	r3, r7, #3
 801149a:	781b      	ldrb	r3, [r3, #0]
 801149c:	1cfa      	adds	r2, r7, #3
 801149e:	1c59      	adds	r1, r3, #1
 80114a0:	7011      	strb	r1, [r2, #0]
 80114a2:	001a      	movs	r2, r3
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	189b      	adds	r3, r3, r2
 80114a8:	781b      	ldrb	r3, [r3, #0]
 80114aa:	021b      	lsls	r3, r3, #8
 80114ac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80114ae:	4313      	orrs	r3, r2
 80114b0:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 80114b2:	1cfb      	adds	r3, r7, #3
 80114b4:	781b      	ldrb	r3, [r3, #0]
 80114b6:	1cfa      	adds	r2, r7, #3
 80114b8:	1c59      	adds	r1, r3, #1
 80114ba:	7011      	strb	r1, [r2, #0]
 80114bc:	001a      	movs	r2, r3
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	189b      	adds	r3, r3, r2
 80114c2:	781b      	ldrb	r3, [r3, #0]
 80114c4:	041b      	lsls	r3, r3, #16
 80114c6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80114c8:	4313      	orrs	r3, r2
 80114ca:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 80114cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80114ce:	2264      	movs	r2, #100	; 0x64
 80114d0:	4353      	muls	r3, r2
 80114d2:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 80114d4:	1cfb      	adds	r3, r7, #3
 80114d6:	781b      	ldrb	r3, [r3, #0]
 80114d8:	1cfa      	adds	r2, r7, #3
 80114da:	1c59      	adds	r1, r3, #1
 80114dc:	7011      	strb	r1, [r2, #0]
 80114de:	001a      	movs	r2, r3
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	189b      	adds	r3, r3, r2
 80114e4:	781a      	ldrb	r2, [r3, #0]
 80114e6:	2677      	movs	r6, #119	; 0x77
 80114e8:	19bb      	adds	r3, r7, r6
 80114ea:	210f      	movs	r1, #15
 80114ec:	400a      	ands	r2, r1
 80114ee:	701a      	strb	r2, [r3, #0]

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 80114f0:	0005      	movs	r5, r0
 80114f2:	183c      	adds	r4, r7, r0
 80114f4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80114f6:	19bb      	adds	r3, r7, r6
 80114f8:	781b      	ldrb	r3, [r3, #0]
 80114fa:	0011      	movs	r1, r2
 80114fc:	0018      	movs	r0, r3
 80114fe:	f003 fa45 	bl	801498c <LoRaMacClassBPingSlotChannelReq>
 8011502:	0003      	movs	r3, r0
 8011504:	7023      	strb	r3, [r4, #0]
                macCmdPayload[0] = status;
 8011506:	2168      	movs	r1, #104	; 0x68
 8011508:	187b      	adds	r3, r7, r1
 801150a:	197a      	adds	r2, r7, r5
 801150c:	7812      	ldrb	r2, [r2, #0]
 801150e:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 8011510:	187b      	adds	r3, r7, r1
 8011512:	2201      	movs	r2, #1
 8011514:	0019      	movs	r1, r3
 8011516:	2011      	movs	r0, #17
 8011518:	f003 fbd6 	bl	8014cc8 <LoRaMacCommandsAddCmd>
                break;
 801151c:	e08e      	b.n	801163c <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 801151e:	200e      	movs	r0, #14
 8011520:	f003 ff64 	bl	80153ec <LoRaMacConfirmQueueIsCmdActive>
 8011524:	1e03      	subs	r3, r0, #0
 8011526:	d100      	bne.n	801152a <ProcessMacCommands+0x9da>
 8011528:	e088      	b.n	801163c <ProcessMacCommands+0xaec>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 801152a:	210e      	movs	r1, #14
 801152c:	2000      	movs	r0, #0
 801152e:	f003 fec1 	bl	80152b4 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 8011532:	207e      	movs	r0, #126	; 0x7e
 8011534:	183b      	adds	r3, r7, r0
 8011536:	2200      	movs	r2, #0
 8011538:	801a      	strh	r2, [r3, #0]
                    uint8_t beaconTimingChannel = 0;
 801153a:	247d      	movs	r4, #125	; 0x7d
 801153c:	193b      	adds	r3, r7, r4
 801153e:	2200      	movs	r2, #0
 8011540:	701a      	strb	r2, [r3, #0]

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8011542:	1cfb      	adds	r3, r7, #3
 8011544:	781b      	ldrb	r3, [r3, #0]
 8011546:	1cfa      	adds	r2, r7, #3
 8011548:	1c59      	adds	r1, r3, #1
 801154a:	7011      	strb	r1, [r2, #0]
 801154c:	001a      	movs	r2, r3
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	189b      	adds	r3, r3, r2
 8011552:	781a      	ldrb	r2, [r3, #0]
 8011554:	183b      	adds	r3, r7, r0
 8011556:	801a      	strh	r2, [r3, #0]
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8011558:	1cfb      	adds	r3, r7, #3
 801155a:	781b      	ldrb	r3, [r3, #0]
 801155c:	1cfa      	adds	r2, r7, #3
 801155e:	1c59      	adds	r1, r3, #1
 8011560:	7011      	strb	r1, [r2, #0]
 8011562:	001a      	movs	r2, r3
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	189b      	adds	r3, r3, r2
 8011568:	781b      	ldrb	r3, [r3, #0]
 801156a:	021b      	lsls	r3, r3, #8
 801156c:	b21a      	sxth	r2, r3
 801156e:	183b      	adds	r3, r7, r0
 8011570:	2100      	movs	r1, #0
 8011572:	5e5b      	ldrsh	r3, [r3, r1]
 8011574:	4313      	orrs	r3, r2
 8011576:	b21a      	sxth	r2, r3
 8011578:	183b      	adds	r3, r7, r0
 801157a:	801a      	strh	r2, [r3, #0]
                    beaconTimingChannel = payload[macIndex++];
 801157c:	1cfb      	adds	r3, r7, #3
 801157e:	781b      	ldrb	r3, [r3, #0]
 8011580:	1cfa      	adds	r2, r7, #3
 8011582:	1c59      	adds	r1, r3, #1
 8011584:	7011      	strb	r1, [r2, #0]
 8011586:	001a      	movs	r2, r3
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	189a      	adds	r2, r3, r2
 801158c:	193b      	adds	r3, r7, r4
 801158e:	7812      	ldrb	r2, [r2, #0]
 8011590:	701a      	strb	r2, [r3, #0]

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8011592:	4b34      	ldr	r3, [pc, #208]	; (8011664 <ProcessMacCommands+0xb14>)
 8011594:	681a      	ldr	r2, [r3, #0]
 8011596:	193b      	adds	r3, r7, r4
 8011598:	7819      	ldrb	r1, [r3, #0]
 801159a:	183b      	adds	r3, r7, r0
 801159c:	881b      	ldrh	r3, [r3, #0]
 801159e:	0018      	movs	r0, r3
 80115a0:	f003 fa00 	bl	80149a4 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 80115a4:	e04a      	b.n	801163c <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 80115a6:	2300      	movs	r3, #0
 80115a8:	2080      	movs	r0, #128	; 0x80
 80115aa:	183a      	adds	r2, r7, r0
 80115ac:	6013      	str	r3, [r2, #0]

                    frequency = ( uint32_t )payload[macIndex++];
 80115ae:	1cfb      	adds	r3, r7, #3
 80115b0:	781b      	ldrb	r3, [r3, #0]
 80115b2:	1cfa      	adds	r2, r7, #3
 80115b4:	1c59      	adds	r1, r3, #1
 80115b6:	7011      	strb	r1, [r2, #0]
 80115b8:	001a      	movs	r2, r3
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	189b      	adds	r3, r3, r2
 80115be:	781b      	ldrb	r3, [r3, #0]
 80115c0:	183a      	adds	r2, r7, r0
 80115c2:	6013      	str	r3, [r2, #0]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 80115c4:	1cfb      	adds	r3, r7, #3
 80115c6:	781b      	ldrb	r3, [r3, #0]
 80115c8:	1cfa      	adds	r2, r7, #3
 80115ca:	1c59      	adds	r1, r3, #1
 80115cc:	7011      	strb	r1, [r2, #0]
 80115ce:	001a      	movs	r2, r3
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	189b      	adds	r3, r3, r2
 80115d4:	781b      	ldrb	r3, [r3, #0]
 80115d6:	021b      	lsls	r3, r3, #8
 80115d8:	183a      	adds	r2, r7, r0
 80115da:	6812      	ldr	r2, [r2, #0]
 80115dc:	4313      	orrs	r3, r2
 80115de:	183a      	adds	r2, r7, r0
 80115e0:	6013      	str	r3, [r2, #0]
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 80115e2:	1cfb      	adds	r3, r7, #3
 80115e4:	781b      	ldrb	r3, [r3, #0]
 80115e6:	1cfa      	adds	r2, r7, #3
 80115e8:	1c59      	adds	r1, r3, #1
 80115ea:	7011      	strb	r1, [r2, #0]
 80115ec:	001a      	movs	r2, r3
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	189b      	adds	r3, r3, r2
 80115f2:	781b      	ldrb	r3, [r3, #0]
 80115f4:	041b      	lsls	r3, r3, #16
 80115f6:	183a      	adds	r2, r7, r0
 80115f8:	6812      	ldr	r2, [r2, #0]
 80115fa:	4313      	orrs	r3, r2
 80115fc:	183a      	adds	r2, r7, r0
 80115fe:	6013      	str	r3, [r2, #0]
                    frequency *= 100;
 8011600:	183b      	adds	r3, r7, r0
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	2264      	movs	r2, #100	; 0x64
 8011606:	4353      	muls	r3, r2
 8011608:	183a      	adds	r2, r7, r0
 801160a:	6013      	str	r3, [r2, #0]

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 801160c:	183b      	adds	r3, r7, r0
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	0018      	movs	r0, r3
 8011612:	f003 f9da 	bl	80149ca <LoRaMacClassBBeaconFreqReq>
 8011616:	1e03      	subs	r3, r0, #0
 8011618:	d004      	beq.n	8011624 <ProcessMacCommands+0xad4>
                    {
                        macCmdPayload[0] = 1;
 801161a:	2368      	movs	r3, #104	; 0x68
 801161c:	18fb      	adds	r3, r7, r3
 801161e:	2201      	movs	r2, #1
 8011620:	701a      	strb	r2, [r3, #0]
 8011622:	e003      	b.n	801162c <ProcessMacCommands+0xadc>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 8011624:	2368      	movs	r3, #104	; 0x68
 8011626:	18fb      	adds	r3, r7, r3
 8011628:	2200      	movs	r2, #0
 801162a:	701a      	strb	r2, [r3, #0]
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 801162c:	2368      	movs	r3, #104	; 0x68
 801162e:	18fb      	adds	r3, r7, r3
 8011630:	2201      	movs	r2, #1
 8011632:	0019      	movs	r1, r3
 8011634:	2013      	movs	r0, #19
 8011636:	f003 fb47 	bl	8014cc8 <LoRaMacCommandsAddCmd>
                }
                break;
 801163a:	46c0      	nop			; (mov r8, r8)
    while( macIndex < commandsSize )
 801163c:	1cfa      	adds	r2, r7, #3
 801163e:	1cbb      	adds	r3, r7, #2
 8011640:	7812      	ldrb	r2, [r2, #0]
 8011642:	781b      	ldrb	r3, [r3, #0]
 8011644:	429a      	cmp	r2, r3
 8011646:	d201      	bcs.n	801164c <ProcessMacCommands+0xafc>
 8011648:	f7ff faa0 	bl	8010b8c <ProcessMacCommands+0x3c>
 801164c:	e002      	b.n	8011654 <ProcessMacCommands+0xb04>
            return;
 801164e:	46c0      	nop			; (mov r8, r8)
 8011650:	e000      	b.n	8011654 <ProcessMacCommands+0xb04>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 8011652:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8011654:	46bd      	mov	sp, r7
 8011656:	b023      	add	sp, #140	; 0x8c
 8011658:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801165a:	46c0      	nop			; (mov r8, r8)
 801165c:	12d53d80 	.word	0x12d53d80
 8011660:	200005b4 	.word	0x200005b4
 8011664:	200016e4 	.word	0x200016e4

08011668 <Send>:

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 8011668:	b5f0      	push	{r4, r5, r6, r7, lr}
 801166a:	b08f      	sub	sp, #60	; 0x3c
 801166c:	af02      	add	r7, sp, #8
 801166e:	60f8      	str	r0, [r7, #12]
 8011670:	0008      	movs	r0, r1
 8011672:	607a      	str	r2, [r7, #4]
 8011674:	0019      	movs	r1, r3
 8011676:	230b      	movs	r3, #11
 8011678:	18fb      	adds	r3, r7, r3
 801167a:	1c02      	adds	r2, r0, #0
 801167c:	701a      	strb	r2, [r3, #0]
 801167e:	2308      	movs	r3, #8
 8011680:	18fb      	adds	r3, r7, r3
 8011682:	1c0a      	adds	r2, r1, #0
 8011684:	801a      	strh	r2, [r3, #0]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011686:	232f      	movs	r3, #47	; 0x2f
 8011688:	18fb      	adds	r3, r7, r3
 801168a:	2203      	movs	r2, #3
 801168c:	701a      	strb	r2, [r3, #0]
    int8_t datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 801168e:	4b90      	ldr	r3, [pc, #576]	; (80118d0 <Send+0x268>)
 8011690:	4a90      	ldr	r2, [pc, #576]	; (80118d4 <Send+0x26c>)
 8011692:	589a      	ldr	r2, [r3, r2]
 8011694:	232e      	movs	r3, #46	; 0x2e
 8011696:	18fb      	adds	r3, r7, r3
 8011698:	2185      	movs	r1, #133	; 0x85
 801169a:	5c52      	ldrb	r2, [r2, r1]
 801169c:	701a      	strb	r2, [r3, #0]
    int8_t txPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 801169e:	4b8c      	ldr	r3, [pc, #560]	; (80118d0 <Send+0x268>)
 80116a0:	4a8c      	ldr	r2, [pc, #560]	; (80118d4 <Send+0x26c>)
 80116a2:	589a      	ldr	r2, [r3, r2]
 80116a4:	232d      	movs	r3, #45	; 0x2d
 80116a6:	18fb      	adds	r3, r7, r3
 80116a8:	2184      	movs	r1, #132	; 0x84
 80116aa:	5c52      	ldrb	r2, [r2, r1]
 80116ac:	701a      	strb	r2, [r3, #0]
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 80116ae:	4b88      	ldr	r3, [pc, #544]	; (80118d0 <Send+0x268>)
 80116b0:	4a88      	ldr	r2, [pc, #544]	; (80118d4 <Send+0x26c>)
 80116b2:	589b      	ldr	r3, [r3, r2]
 80116b4:	2280      	movs	r2, #128	; 0x80
 80116b6:	589b      	ldr	r3, [r3, r2]
 80116b8:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 80116ba:	4b85      	ldr	r3, [pc, #532]	; (80118d0 <Send+0x268>)
 80116bc:	4a85      	ldr	r2, [pc, #532]	; (80118d4 <Send+0x26c>)
 80116be:	589a      	ldr	r2, [r3, r2]
 80116c0:	23b2      	movs	r3, #178	; 0xb2
 80116c2:	005b      	lsls	r3, r3, #1
 80116c4:	5cd3      	ldrb	r3, [r2, r3]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d101      	bne.n	80116ce <Send+0x66>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 80116ca:	2307      	movs	r3, #7
 80116cc:	e0fb      	b.n	80118c6 <Send+0x25e>
    }
    if( MacCtx.NvmCtx->MaxDCycle == 0 )
 80116ce:	4b80      	ldr	r3, [pc, #512]	; (80118d0 <Send+0x268>)
 80116d0:	4a80      	ldr	r2, [pc, #512]	; (80118d4 <Send+0x26c>)
 80116d2:	589b      	ldr	r3, [r3, r2]
 80116d4:	22c8      	movs	r2, #200	; 0xc8
 80116d6:	5c9b      	ldrb	r3, [r3, r2]
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d106      	bne.n	80116ea <Send+0x82>
    {
        MacCtx.NvmCtx->AggregatedTimeOff = 0;
 80116dc:	4b7c      	ldr	r3, [pc, #496]	; (80118d0 <Send+0x268>)
 80116de:	4a7d      	ldr	r2, [pc, #500]	; (80118d4 <Send+0x26c>)
 80116e0:	589a      	ldr	r2, [r3, r2]
 80116e2:	23aa      	movs	r3, #170	; 0xaa
 80116e4:	005b      	lsls	r3, r3, #1
 80116e6:	2100      	movs	r1, #0
 80116e8:	50d1      	str	r1, [r2, r3]
    }

    fCtrl.Value = 0;
 80116ea:	242c      	movs	r4, #44	; 0x2c
 80116ec:	193b      	adds	r3, r7, r4
 80116ee:	2200      	movs	r2, #0
 80116f0:	701a      	strb	r2, [r3, #0]
    fCtrl.Bits.FOptsLen      = 0;
 80116f2:	193b      	adds	r3, r7, r4
 80116f4:	781a      	ldrb	r2, [r3, #0]
 80116f6:	210f      	movs	r1, #15
 80116f8:	438a      	bics	r2, r1
 80116fa:	701a      	strb	r2, [r3, #0]
    fCtrl.Bits.Adr           = MacCtx.NvmCtx->AdrCtrlOn;
 80116fc:	4b74      	ldr	r3, [pc, #464]	; (80118d0 <Send+0x268>)
 80116fe:	4a75      	ldr	r2, [pc, #468]	; (80118d4 <Send+0x26c>)
 8011700:	589b      	ldr	r3, [r3, r2]
 8011702:	227e      	movs	r2, #126	; 0x7e
 8011704:	5c9a      	ldrb	r2, [r3, r2]
 8011706:	193b      	adds	r3, r7, r4
 8011708:	01d0      	lsls	r0, r2, #7
 801170a:	781a      	ldrb	r2, [r3, #0]
 801170c:	217f      	movs	r1, #127	; 0x7f
 801170e:	400a      	ands	r2, r1
 8011710:	1c11      	adds	r1, r2, #0
 8011712:	1c02      	adds	r2, r0, #0
 8011714:	430a      	orrs	r2, r1
 8011716:	701a      	strb	r2, [r3, #0]

    // Check class b
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8011718:	4b6d      	ldr	r3, [pc, #436]	; (80118d0 <Send+0x268>)
 801171a:	4a6e      	ldr	r2, [pc, #440]	; (80118d4 <Send+0x26c>)
 801171c:	589b      	ldr	r3, [r3, r2]
 801171e:	227c      	movs	r2, #124	; 0x7c
 8011720:	5c9b      	ldrb	r3, [r3, r2]
 8011722:	2b01      	cmp	r3, #1
 8011724:	d105      	bne.n	8011732 <Send+0xca>
    {
        fCtrl.Bits.FPending      = 1;
 8011726:	193b      	adds	r3, r7, r4
 8011728:	781a      	ldrb	r2, [r3, #0]
 801172a:	2110      	movs	r1, #16
 801172c:	430a      	orrs	r2, r1
 801172e:	701a      	strb	r2, [r3, #0]
 8011730:	e005      	b.n	801173e <Send+0xd6>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 8011732:	232c      	movs	r3, #44	; 0x2c
 8011734:	18fb      	adds	r3, r7, r3
 8011736:	781a      	ldrb	r2, [r3, #0]
 8011738:	2110      	movs	r1, #16
 801173a:	438a      	bics	r2, r1
 801173c:	701a      	strb	r2, [r3, #0]
    }

    // Check server ack
    if( MacCtx.NvmCtx->SrvAckRequested == true )
 801173e:	4b64      	ldr	r3, [pc, #400]	; (80118d0 <Send+0x268>)
 8011740:	4a64      	ldr	r2, [pc, #400]	; (80118d4 <Send+0x26c>)
 8011742:	589a      	ldr	r2, [r3, r2]
 8011744:	234c      	movs	r3, #76	; 0x4c
 8011746:	33ff      	adds	r3, #255	; 0xff
 8011748:	5cd3      	ldrb	r3, [r2, r3]
 801174a:	2b00      	cmp	r3, #0
 801174c:	d005      	beq.n	801175a <Send+0xf2>
    {
        fCtrl.Bits.Ack = 1;
 801174e:	232c      	movs	r3, #44	; 0x2c
 8011750:	18fb      	adds	r3, r7, r3
 8011752:	781a      	ldrb	r2, [r3, #0]
 8011754:	2120      	movs	r1, #32
 8011756:	430a      	orrs	r2, r1
 8011758:	701a      	strb	r2, [r3, #0]
    }

    // ADR next request
    adrNext.Version = MacCtx.NvmCtx->Version;
 801175a:	4b5d      	ldr	r3, [pc, #372]	; (80118d0 <Send+0x268>)
 801175c:	4a5d      	ldr	r2, [pc, #372]	; (80118d4 <Send+0x26c>)
 801175e:	5899      	ldr	r1, [r3, r2]
 8011760:	2014      	movs	r0, #20
 8011762:	183b      	adds	r3, r7, r0
 8011764:	22b0      	movs	r2, #176	; 0xb0
 8011766:	0052      	lsls	r2, r2, #1
 8011768:	588a      	ldr	r2, [r1, r2]
 801176a:	601a      	str	r2, [r3, #0]
    adrNext.UpdateChanMask = true;
 801176c:	0001      	movs	r1, r0
 801176e:	187b      	adds	r3, r7, r1
 8011770:	2201      	movs	r2, #1
 8011772:	711a      	strb	r2, [r3, #4]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8011774:	242c      	movs	r4, #44	; 0x2c
 8011776:	193b      	adds	r3, r7, r4
 8011778:	781b      	ldrb	r3, [r3, #0]
 801177a:	061b      	lsls	r3, r3, #24
 801177c:	0fdb      	lsrs	r3, r3, #31
 801177e:	b2db      	uxtb	r3, r3
 8011780:	1e5a      	subs	r2, r3, #1
 8011782:	4193      	sbcs	r3, r2
 8011784:	b2da      	uxtb	r2, r3
 8011786:	187b      	adds	r3, r7, r1
 8011788:	715a      	strb	r2, [r3, #5]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 801178a:	4b51      	ldr	r3, [pc, #324]	; (80118d0 <Send+0x268>)
 801178c:	4a51      	ldr	r2, [pc, #324]	; (80118d4 <Send+0x26c>)
 801178e:	589b      	ldr	r3, [r3, r2]
 8011790:	2280      	movs	r2, #128	; 0x80
 8011792:	589a      	ldr	r2, [r3, r2]
 8011794:	0008      	movs	r0, r1
 8011796:	183b      	adds	r3, r7, r0
 8011798:	609a      	str	r2, [r3, #8]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 801179a:	4a4d      	ldr	r2, [pc, #308]	; (80118d0 <Send+0x268>)
 801179c:	23fd      	movs	r3, #253	; 0xfd
 801179e:	009b      	lsls	r3, r3, #2
 80117a0:	5ad2      	ldrh	r2, [r2, r3]
 80117a2:	183b      	adds	r3, r7, r0
 80117a4:	819a      	strh	r2, [r3, #12]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 80117a6:	4b4a      	ldr	r3, [pc, #296]	; (80118d0 <Send+0x268>)
 80117a8:	4a4b      	ldr	r2, [pc, #300]	; (80118d8 <Send+0x270>)
 80117aa:	5a9a      	ldrh	r2, [r3, r2]
 80117ac:	183b      	adds	r3, r7, r0
 80117ae:	81da      	strh	r2, [r3, #14]
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 80117b0:	4b47      	ldr	r3, [pc, #284]	; (80118d0 <Send+0x268>)
 80117b2:	4a48      	ldr	r2, [pc, #288]	; (80118d4 <Send+0x26c>)
 80117b4:	589b      	ldr	r3, [r3, r2]
 80117b6:	2285      	movs	r2, #133	; 0x85
 80117b8:	569a      	ldrsb	r2, [r3, r2]
 80117ba:	183b      	adds	r3, r7, r0
 80117bc:	741a      	strb	r2, [r3, #16]
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 80117be:	4b44      	ldr	r3, [pc, #272]	; (80118d0 <Send+0x268>)
 80117c0:	4a44      	ldr	r2, [pc, #272]	; (80118d4 <Send+0x26c>)
 80117c2:	589b      	ldr	r3, [r3, r2]
 80117c4:	2284      	movs	r2, #132	; 0x84
 80117c6:	569a      	ldrsb	r2, [r3, r2]
 80117c8:	183b      	adds	r3, r7, r0
 80117ca:	745a      	strb	r2, [r3, #17]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 80117cc:	4b40      	ldr	r3, [pc, #256]	; (80118d0 <Send+0x268>)
 80117ce:	4a41      	ldr	r2, [pc, #260]	; (80118d4 <Send+0x26c>)
 80117d0:	589b      	ldr	r3, [r3, r2]
 80117d2:	22b8      	movs	r2, #184	; 0xb8
 80117d4:	5c9a      	ldrb	r2, [r3, r2]
 80117d6:	183b      	adds	r3, r7, r0
 80117d8:	749a      	strb	r2, [r3, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;
 80117da:	4b3d      	ldr	r3, [pc, #244]	; (80118d0 <Send+0x268>)
 80117dc:	4a3d      	ldr	r2, [pc, #244]	; (80118d4 <Send+0x26c>)
 80117de:	589b      	ldr	r3, [r3, r2]
 80117e0:	781a      	ldrb	r2, [r3, #0]
 80117e2:	183b      	adds	r3, r7, r0
 80117e4:	74da      	strb	r2, [r3, #19]

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 80117e6:	4b3a      	ldr	r3, [pc, #232]	; (80118d0 <Send+0x268>)
 80117e8:	4a3a      	ldr	r2, [pc, #232]	; (80118d4 <Send+0x26c>)
 80117ea:	589b      	ldr	r3, [r3, r2]
 80117ec:	3385      	adds	r3, #133	; 0x85
 80117ee:	0019      	movs	r1, r3
                                               &MacCtx.NvmCtx->MacParams.ChannelsTxPower, &adrAckCounter );
 80117f0:	4b37      	ldr	r3, [pc, #220]	; (80118d0 <Send+0x268>)
 80117f2:	4a38      	ldr	r2, [pc, #224]	; (80118d4 <Send+0x26c>)
 80117f4:	589b      	ldr	r3, [r3, r2]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 80117f6:	3384      	adds	r3, #132	; 0x84
 80117f8:	001a      	movs	r2, r3
 80117fa:	2328      	movs	r3, #40	; 0x28
 80117fc:	18fb      	adds	r3, r7, r3
 80117fe:	1838      	adds	r0, r7, r0
 8011800:	f002 fff7 	bl	80147f2 <LoRaMacAdrCalcNext>
 8011804:	0003      	movs	r3, r0
 8011806:	0019      	movs	r1, r3
 8011808:	0026      	movs	r6, r4
 801180a:	193b      	adds	r3, r7, r4
 801180c:	2201      	movs	r2, #1
 801180e:	400a      	ands	r2, r1
 8011810:	0190      	lsls	r0, r2, #6
 8011812:	781a      	ldrb	r2, [r3, #0]
 8011814:	2140      	movs	r1, #64	; 0x40
 8011816:	438a      	bics	r2, r1
 8011818:	1c11      	adds	r1, r2, #0
 801181a:	1c02      	adds	r2, r0, #0
 801181c:	430a      	orrs	r2, r1
 801181e:	701a      	strb	r2, [r3, #0]

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8011820:	222f      	movs	r2, #47	; 0x2f
 8011822:	18bc      	adds	r4, r7, r2
 8011824:	687d      	ldr	r5, [r7, #4]
 8011826:	230b      	movs	r3, #11
 8011828:	18fb      	adds	r3, r7, r3
 801182a:	781a      	ldrb	r2, [r3, #0]
 801182c:	19b9      	adds	r1, r7, r6
 801182e:	68f8      	ldr	r0, [r7, #12]
 8011830:	2308      	movs	r3, #8
 8011832:	18fb      	adds	r3, r7, r3
 8011834:	881b      	ldrh	r3, [r3, #0]
 8011836:	9300      	str	r3, [sp, #0]
 8011838:	002b      	movs	r3, r5
 801183a:	f000 fd07 	bl	801224c <PrepareFrame>
 801183e:	0003      	movs	r3, r0
 8011840:	7023      	strb	r3, [r4, #0]

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8011842:	222f      	movs	r2, #47	; 0x2f
 8011844:	18bb      	adds	r3, r7, r2
 8011846:	781b      	ldrb	r3, [r3, #0]
 8011848:	2b00      	cmp	r3, #0
 801184a:	d003      	beq.n	8011854 <Send+0x1ec>
 801184c:	18bb      	adds	r3, r7, r2
 801184e:	781b      	ldrb	r3, [r3, #0]
 8011850:	2b0a      	cmp	r3, #10
 8011852:	d10c      	bne.n	801186e <Send+0x206>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 8011854:	232f      	movs	r3, #47	; 0x2f
 8011856:	18fc      	adds	r4, r7, r3
 8011858:	2340      	movs	r3, #64	; 0x40
 801185a:	2208      	movs	r2, #8
 801185c:	4694      	mov	ip, r2
 801185e:	44bc      	add	ip, r7
 8011860:	4463      	add	r3, ip
 8011862:	781b      	ldrb	r3, [r3, #0]
 8011864:	0018      	movs	r0, r3
 8011866:	f000 f9cd 	bl	8011c04 <ScheduleTx>
 801186a:	0003      	movs	r3, r0
 801186c:	7023      	strb	r3, [r4, #0]
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 801186e:	232f      	movs	r3, #47	; 0x2f
 8011870:	18fb      	adds	r3, r7, r3
 8011872:	781b      	ldrb	r3, [r3, #0]
 8011874:	2b00      	cmp	r3, #0
 8011876:	d010      	beq.n	801189a <Send+0x232>
    {
        // Bad case - restore
        // Store local variables
        MacCtx.NvmCtx->MacParams.ChannelsDatarate = datarate;
 8011878:	4b15      	ldr	r3, [pc, #84]	; (80118d0 <Send+0x268>)
 801187a:	4a16      	ldr	r2, [pc, #88]	; (80118d4 <Send+0x26c>)
 801187c:	589b      	ldr	r3, [r3, r2]
 801187e:	222e      	movs	r2, #46	; 0x2e
 8011880:	18ba      	adds	r2, r7, r2
 8011882:	2185      	movs	r1, #133	; 0x85
 8011884:	7812      	ldrb	r2, [r2, #0]
 8011886:	545a      	strb	r2, [r3, r1]
        MacCtx.NvmCtx->MacParams.ChannelsTxPower = txPower;
 8011888:	4b11      	ldr	r3, [pc, #68]	; (80118d0 <Send+0x268>)
 801188a:	4a12      	ldr	r2, [pc, #72]	; (80118d4 <Send+0x26c>)
 801188c:	589b      	ldr	r3, [r3, r2]
 801188e:	222d      	movs	r2, #45	; 0x2d
 8011890:	18ba      	adds	r2, r7, r2
 8011892:	2184      	movs	r1, #132	; 0x84
 8011894:	7812      	ldrb	r2, [r2, #0]
 8011896:	545a      	strb	r2, [r3, r1]
 8011898:	e012      	b.n	80118c0 <Send+0x258>
    }
    else
    {
        // Good case
        MacCtx.NvmCtx->SrvAckRequested = false;
 801189a:	4b0d      	ldr	r3, [pc, #52]	; (80118d0 <Send+0x268>)
 801189c:	4a0d      	ldr	r2, [pc, #52]	; (80118d4 <Send+0x26c>)
 801189e:	589a      	ldr	r2, [r3, r2]
 80118a0:	234c      	movs	r3, #76	; 0x4c
 80118a2:	33ff      	adds	r3, #255	; 0xff
 80118a4:	2100      	movs	r1, #0
 80118a6:	54d1      	strb	r1, [r2, r3]
        MacCtx.NvmCtx->AdrAckCounter = adrAckCounter;
 80118a8:	4b09      	ldr	r3, [pc, #36]	; (80118d0 <Send+0x268>)
 80118aa:	4a0a      	ldr	r2, [pc, #40]	; (80118d4 <Send+0x26c>)
 80118ac:	589b      	ldr	r3, [r3, r2]
 80118ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80118b0:	2180      	movs	r1, #128	; 0x80
 80118b2:	505a      	str	r2, [r3, r1]
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 80118b4:	f003 fa92 	bl	8014ddc <LoRaMacCommandsRemoveNoneStickyCmds>
 80118b8:	1e03      	subs	r3, r0, #0
 80118ba:	d001      	beq.n	80118c0 <Send+0x258>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80118bc:	2313      	movs	r3, #19
 80118be:	e002      	b.n	80118c6 <Send+0x25e>
        }
    }
    return status;
 80118c0:	232f      	movs	r3, #47	; 0x2f
 80118c2:	18fb      	adds	r3, r7, r3
 80118c4:	781b      	ldrb	r3, [r3, #0]
}
 80118c6:	0018      	movs	r0, r3
 80118c8:	46bd      	mov	sp, r7
 80118ca:	b00d      	add	sp, #52	; 0x34
 80118cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80118ce:	46c0      	nop			; (mov r8, r8)
 80118d0:	200005b4 	.word	0x200005b4
 80118d4:	00000484 	.word	0x00000484
 80118d8:	000003f6 	.word	0x000003f6

080118dc <SendReJoinReq>:

  static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType ) // ПОПЫТКА
{
 80118dc:	b5b0      	push	{r4, r5, r7, lr}
 80118de:	b084      	sub	sp, #16
 80118e0:	af00      	add	r7, sp, #0
 80118e2:	0002      	movs	r2, r0
 80118e4:	1dfb      	adds	r3, r7, #7
 80118e6:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80118e8:	230e      	movs	r3, #14
 80118ea:	18fb      	adds	r3, r7, r3
 80118ec:	2200      	movs	r2, #0
 80118ee:	701a      	strb	r2, [r3, #0]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0; //  не влияет
 80118f0:	240c      	movs	r4, #12
 80118f2:	193b      	adds	r3, r7, r4
 80118f4:	2200      	movs	r2, #0
 80118f6:	701a      	strb	r2, [r3, #0]
    bool allowDelayedTx = true;
 80118f8:	250f      	movs	r5, #15
 80118fa:	197b      	adds	r3, r7, r5
 80118fc:	2201      	movs	r2, #1
 80118fe:	701a      	strb	r2, [r3, #0]

    // Setup join/rejoin message
    switch( joinReqType )
 8011900:	1dfb      	adds	r3, r7, #7
 8011902:	781b      	ldrb	r3, [r3, #0]
 8011904:	2bff      	cmp	r3, #255	; 0xff
 8011906:	d130      	bne.n	801196a <SendReJoinReq+0x8e>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 8011908:	2000      	movs	r0, #0
 801190a:	f7fe ff7b 	bl	8010804 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 801190e:	4a21      	ldr	r2, [pc, #132]	; (8011994 <SendReJoinReq+0xb8>)
 8011910:	2382      	movs	r3, #130	; 0x82
 8011912:	005b      	lsls	r3, r3, #1
 8011914:	2100      	movs	r1, #0
 8011916:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8011918:	4a1e      	ldr	r2, [pc, #120]	; (8011994 <SendReJoinReq+0xb8>)
 801191a:	2384      	movs	r3, #132	; 0x84
 801191c:	005b      	lsls	r3, r3, #1
 801191e:	491e      	ldr	r1, [pc, #120]	; (8011998 <SendReJoinReq+0xbc>)
 8011920:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8011922:	4a1c      	ldr	r2, [pc, #112]	; (8011994 <SendReJoinReq+0xb8>)
 8011924:	2386      	movs	r3, #134	; 0x86
 8011926:	005b      	lsls	r3, r3, #1
 8011928:	21ff      	movs	r1, #255	; 0xff
 801192a:	54d1      	strb	r1, [r2, r3]

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 801192c:	193b      	adds	r3, r7, r4
 801192e:	781a      	ldrb	r2, [r3, #0]
 8011930:	211f      	movs	r1, #31
 8011932:	400a      	ands	r2, r1
 8011934:	701a      	strb	r2, [r3, #0]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8011936:	193b      	adds	r3, r7, r4
 8011938:	7819      	ldrb	r1, [r3, #0]
 801193a:	4a16      	ldr	r2, [pc, #88]	; (8011994 <SendReJoinReq+0xb8>)
 801193c:	230e      	movs	r3, #14
 801193e:	33ff      	adds	r3, #255	; 0xff
 8011940:	54d1      	strb	r1, [r2, r3]

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 8011942:	f7fc f9fd 	bl	800dd40 <SecureElementGetJoinEui>
 8011946:	0001      	movs	r1, r0
 8011948:	4b14      	ldr	r3, [pc, #80]	; (801199c <SendReJoinReq+0xc0>)
 801194a:	2208      	movs	r2, #8
 801194c:	0018      	movs	r0, r3
 801194e:	f007 fdf9 	bl	8019544 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 8011952:	f7fc f9d1 	bl	800dcf8 <SecureElementGetDevEui>
 8011956:	0001      	movs	r1, r0
 8011958:	4b11      	ldr	r3, [pc, #68]	; (80119a0 <SendReJoinReq+0xc4>)
 801195a:	2208      	movs	r2, #8
 801195c:	0018      	movs	r0, r3
 801195e:	f007 fdf1 	bl	8019544 <memcpy1>

            allowDelayedTx = false;
 8011962:	197b      	adds	r3, r7, r5
 8011964:	2200      	movs	r2, #0
 8011966:	701a      	strb	r2, [r3, #0]

            break;
 8011968:	e004      	b.n	8011974 <SendReJoinReq+0x98>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 801196a:	230e      	movs	r3, #14
 801196c:	18fb      	adds	r3, r7, r3
 801196e:	2202      	movs	r2, #2
 8011970:	701a      	strb	r2, [r3, #0]
            break;
 8011972:	46c0      	nop			; (mov r8, r8)
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 8011974:	250e      	movs	r5, #14
 8011976:	197c      	adds	r4, r7, r5
 8011978:	230f      	movs	r3, #15
 801197a:	18fb      	adds	r3, r7, r3
 801197c:	781b      	ldrb	r3, [r3, #0]
 801197e:	0018      	movs	r0, r3
 8011980:	f000 f940 	bl	8011c04 <ScheduleTx>
 8011984:	0003      	movs	r3, r0
 8011986:	7023      	strb	r3, [r4, #0]
    return status;
 8011988:	197b      	adds	r3, r7, r5
 801198a:	781b      	ldrb	r3, [r3, #0]
}
 801198c:	0018      	movs	r0, r3
 801198e:	46bd      	mov	sp, r7
 8011990:	b004      	add	sp, #16
 8011992:	bdb0      	pop	{r4, r5, r7, pc}
 8011994:	200005b4 	.word	0x200005b4
 8011998:	200005b6 	.word	0x200005b6
 801199c:	200006c2 	.word	0x200006c2
 80119a0:	200006ca 	.word	0x200006ca

080119a4 <CheckForClassBCollision>:
 // NEW
static LoRaMacStatus_t CheckForClassBCollision( void )
{
 80119a4:	b580      	push	{r7, lr}
 80119a6:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 80119a8:	f002 ffa2 	bl	80148f0 <LoRaMacClassBIsBeaconExpected>
 80119ac:	1e03      	subs	r3, r0, #0
 80119ae:	d001      	beq.n	80119b4 <CheckForClassBCollision+0x10>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 80119b0:	230e      	movs	r3, #14
 80119b2:	e013      	b.n	80119dc <CheckForClassBCollision+0x38>
    }

    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 80119b4:	4b0b      	ldr	r3, [pc, #44]	; (80119e4 <CheckForClassBCollision+0x40>)
 80119b6:	4a0c      	ldr	r2, [pc, #48]	; (80119e8 <CheckForClassBCollision+0x44>)
 80119b8:	589b      	ldr	r3, [r3, r2]
 80119ba:	227c      	movs	r2, #124	; 0x7c
 80119bc:	5c9b      	ldrb	r3, [r3, r2]
 80119be:	2b01      	cmp	r3, #1
 80119c0:	d10b      	bne.n	80119da <CheckForClassBCollision+0x36>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 80119c2:	f002 ff9b 	bl	80148fc <LoRaMacClassBIsPingExpected>
 80119c6:	1e03      	subs	r3, r0, #0
 80119c8:	d001      	beq.n	80119ce <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 80119ca:	230f      	movs	r3, #15
 80119cc:	e006      	b.n	80119dc <CheckForClassBCollision+0x38>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 80119ce:	f002 ff9b 	bl	8014908 <LoRaMacClassBIsMulticastExpected>
 80119d2:	1e03      	subs	r3, r0, #0
 80119d4:	d001      	beq.n	80119da <CheckForClassBCollision+0x36>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 80119d6:	230f      	movs	r3, #15
 80119d8:	e000      	b.n	80119dc <CheckForClassBCollision+0x38>
        }
    }
    return LORAMAC_STATUS_OK;
 80119da:	2300      	movs	r3, #0
}
 80119dc:	0018      	movs	r0, r3
 80119de:	46bd      	mov	sp, r7
 80119e0:	bd80      	pop	{r7, pc}
 80119e2:	46c0      	nop			; (mov r8, r8)
 80119e4:	200005b4 	.word	0x200005b4
 80119e8:	00000484 	.word	0x00000484

080119ec <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 80119ec:	b5b0      	push	{r4, r5, r7, lr}
 80119ee:	b082      	sub	sp, #8
 80119f0:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 80119f2:	4b44      	ldr	r3, [pc, #272]	; (8011b04 <ComputeRxWindowParameters+0x118>)
 80119f4:	4a44      	ldr	r2, [pc, #272]	; (8011b08 <ComputeRxWindowParameters+0x11c>)
 80119f6:	589b      	ldr	r3, [r3, r2]
 80119f8:	781c      	ldrb	r4, [r3, #0]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 80119fa:	4b42      	ldr	r3, [pc, #264]	; (8011b04 <ComputeRxWindowParameters+0x118>)
 80119fc:	4a42      	ldr	r2, [pc, #264]	; (8011b08 <ComputeRxWindowParameters+0x11c>)
 80119fe:	589b      	ldr	r3, [r3, r2]
 8011a00:	7818      	ldrb	r0, [r3, #0]
                                                          MacCtx.NvmCtx->MacParams.DownlinkDwellTime,
 8011a02:	4b40      	ldr	r3, [pc, #256]	; (8011b04 <ComputeRxWindowParameters+0x118>)
 8011a04:	4a40      	ldr	r2, [pc, #256]	; (8011b08 <ComputeRxWindowParameters+0x11c>)
 8011a06:	589b      	ldr	r3, [r3, r2]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 8011a08:	22b9      	movs	r2, #185	; 0xb9
 8011a0a:	5c99      	ldrb	r1, [r3, r2]
                                                          MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 8011a0c:	4b3d      	ldr	r3, [pc, #244]	; (8011b04 <ComputeRxWindowParameters+0x118>)
 8011a0e:	4a3e      	ldr	r2, [pc, #248]	; (8011b08 <ComputeRxWindowParameters+0x11c>)
 8011a10:	589b      	ldr	r3, [r3, r2]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 8011a12:	2285      	movs	r2, #133	; 0x85
 8011a14:	569a      	ldrsb	r2, [r3, r2]
                                                          MacCtx.NvmCtx->MacParams.Rx1DrOffset ),
 8011a16:	4b3b      	ldr	r3, [pc, #236]	; (8011b04 <ComputeRxWindowParameters+0x118>)
 8011a18:	4d3b      	ldr	r5, [pc, #236]	; (8011b08 <ComputeRxWindowParameters+0x11c>)
 8011a1a:	595b      	ldr	r3, [r3, r5]
 8011a1c:	25a5      	movs	r5, #165	; 0xa5
 8011a1e:	5d5b      	ldrb	r3, [r3, r5]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 8011a20:	b25b      	sxtb	r3, r3
 8011a22:	f005 fad1 	bl	8016fc8 <RegionApplyDrOffset>
 8011a26:	0003      	movs	r3, r0
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8011a28:	b259      	sxtb	r1, r3
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 8011a2a:	4b36      	ldr	r3, [pc, #216]	; (8011b04 <ComputeRxWindowParameters+0x118>)
 8011a2c:	4a36      	ldr	r2, [pc, #216]	; (8011b08 <ComputeRxWindowParameters+0x11c>)
 8011a2e:	589b      	ldr	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8011a30:	228c      	movs	r2, #140	; 0x8c
 8011a32:	5c9a      	ldrb	r2, [r3, r2]
                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 8011a34:	4b33      	ldr	r3, [pc, #204]	; (8011b04 <ComputeRxWindowParameters+0x118>)
 8011a36:	4834      	ldr	r0, [pc, #208]	; (8011b08 <ComputeRxWindowParameters+0x11c>)
 8011a38:	581b      	ldr	r3, [r3, r0]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8011a3a:	2088      	movs	r0, #136	; 0x88
 8011a3c:	5818      	ldr	r0, [r3, r0]
 8011a3e:	4b33      	ldr	r3, [pc, #204]	; (8011b0c <ComputeRxWindowParameters+0x120>)
 8011a40:	9300      	str	r3, [sp, #0]
 8011a42:	0003      	movs	r3, r0
 8011a44:	0020      	movs	r0, r4
 8011a46:	f005 f99d 	bl	8016d84 <RegionComputeRxWindowParameters>
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8011a4a:	4b2e      	ldr	r3, [pc, #184]	; (8011b04 <ComputeRxWindowParameters+0x118>)
 8011a4c:	4a2e      	ldr	r2, [pc, #184]	; (8011b08 <ComputeRxWindowParameters+0x11c>)
 8011a4e:	589b      	ldr	r3, [r3, r2]
 8011a50:	7818      	ldrb	r0, [r3, #0]
                                     MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
 8011a52:	4b2c      	ldr	r3, [pc, #176]	; (8011b04 <ComputeRxWindowParameters+0x118>)
 8011a54:	4a2c      	ldr	r2, [pc, #176]	; (8011b08 <ComputeRxWindowParameters+0x11c>)
 8011a56:	589b      	ldr	r3, [r3, r2]
 8011a58:	22ac      	movs	r2, #172	; 0xac
 8011a5a:	5c9b      	ldrb	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8011a5c:	b259      	sxtb	r1, r3
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 8011a5e:	4b29      	ldr	r3, [pc, #164]	; (8011b04 <ComputeRxWindowParameters+0x118>)
 8011a60:	4a29      	ldr	r2, [pc, #164]	; (8011b08 <ComputeRxWindowParameters+0x11c>)
 8011a62:	589b      	ldr	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8011a64:	228c      	movs	r2, #140	; 0x8c
 8011a66:	5c9a      	ldrb	r2, [r3, r2]
                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 8011a68:	4b26      	ldr	r3, [pc, #152]	; (8011b04 <ComputeRxWindowParameters+0x118>)
 8011a6a:	4c27      	ldr	r4, [pc, #156]	; (8011b08 <ComputeRxWindowParameters+0x11c>)
 8011a6c:	591b      	ldr	r3, [r3, r4]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8011a6e:	2488      	movs	r4, #136	; 0x88
 8011a70:	591c      	ldr	r4, [r3, r4]
 8011a72:	4b27      	ldr	r3, [pc, #156]	; (8011b10 <ComputeRxWindowParameters+0x124>)
 8011a74:	9300      	str	r3, [sp, #0]
 8011a76:	0023      	movs	r3, r4
 8011a78:	f005 f984 	bl	8016d84 <RegionComputeRxWindowParameters>
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8011a7c:	4b21      	ldr	r3, [pc, #132]	; (8011b04 <ComputeRxWindowParameters+0x118>)
 8011a7e:	4a22      	ldr	r2, [pc, #136]	; (8011b08 <ComputeRxWindowParameters+0x11c>)
 8011a80:	589b      	ldr	r3, [r3, r2]
 8011a82:	2294      	movs	r2, #148	; 0x94
 8011a84:	589b      	ldr	r3, [r3, r2]
 8011a86:	491f      	ldr	r1, [pc, #124]	; (8011b04 <ComputeRxWindowParameters+0x118>)
 8011a88:	22f1      	movs	r2, #241	; 0xf1
 8011a8a:	0092      	lsls	r2, r2, #2
 8011a8c:	588a      	ldr	r2, [r1, r2]
 8011a8e:	1899      	adds	r1, r3, r2
 8011a90:	4a1c      	ldr	r2, [pc, #112]	; (8011b04 <ComputeRxWindowParameters+0x118>)
 8011a92:	23ec      	movs	r3, #236	; 0xec
 8011a94:	009b      	lsls	r3, r3, #2
 8011a96:	50d1      	str	r1, [r2, r3]
    MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8011a98:	4b1a      	ldr	r3, [pc, #104]	; (8011b04 <ComputeRxWindowParameters+0x118>)
 8011a9a:	4a1b      	ldr	r2, [pc, #108]	; (8011b08 <ComputeRxWindowParameters+0x11c>)
 8011a9c:	589b      	ldr	r3, [r3, r2]
 8011a9e:	2298      	movs	r2, #152	; 0x98
 8011aa0:	589b      	ldr	r3, [r3, r2]
 8011aa2:	4918      	ldr	r1, [pc, #96]	; (8011b04 <ComputeRxWindowParameters+0x118>)
 8011aa4:	22f6      	movs	r2, #246	; 0xf6
 8011aa6:	0092      	lsls	r2, r2, #2
 8011aa8:	588a      	ldr	r2, [r1, r2]
 8011aaa:	1899      	adds	r1, r3, r2
 8011aac:	4a15      	ldr	r2, [pc, #84]	; (8011b04 <ComputeRxWindowParameters+0x118>)
 8011aae:	23ed      	movs	r3, #237	; 0xed
 8011ab0:	009b      	lsls	r3, r3, #2
 8011ab2:	50d1      	str	r1, [r2, r3]

    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8011ab4:	4b13      	ldr	r3, [pc, #76]	; (8011b04 <ComputeRxWindowParameters+0x118>)
 8011ab6:	4a14      	ldr	r2, [pc, #80]	; (8011b08 <ComputeRxWindowParameters+0x11c>)
 8011ab8:	589a      	ldr	r2, [r3, r2]
 8011aba:	23b2      	movs	r3, #178	; 0xb2
 8011abc:	005b      	lsls	r3, r3, #1
 8011abe:	5cd3      	ldrb	r3, [r2, r3]
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d11b      	bne.n	8011afc <ComputeRxWindowParameters+0x110>
    {
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8011ac4:	4b0f      	ldr	r3, [pc, #60]	; (8011b04 <ComputeRxWindowParameters+0x118>)
 8011ac6:	4a10      	ldr	r2, [pc, #64]	; (8011b08 <ComputeRxWindowParameters+0x11c>)
 8011ac8:	589b      	ldr	r3, [r3, r2]
 8011aca:	229c      	movs	r2, #156	; 0x9c
 8011acc:	589b      	ldr	r3, [r3, r2]
 8011ace:	490d      	ldr	r1, [pc, #52]	; (8011b04 <ComputeRxWindowParameters+0x118>)
 8011ad0:	22f1      	movs	r2, #241	; 0xf1
 8011ad2:	0092      	lsls	r2, r2, #2
 8011ad4:	588a      	ldr	r2, [r1, r2]
 8011ad6:	1899      	adds	r1, r3, r2
 8011ad8:	4a0a      	ldr	r2, [pc, #40]	; (8011b04 <ComputeRxWindowParameters+0x118>)
 8011ada:	23ec      	movs	r3, #236	; 0xec
 8011adc:	009b      	lsls	r3, r3, #2
 8011ade:	50d1      	str	r1, [r2, r3]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8011ae0:	4b08      	ldr	r3, [pc, #32]	; (8011b04 <ComputeRxWindowParameters+0x118>)
 8011ae2:	4a09      	ldr	r2, [pc, #36]	; (8011b08 <ComputeRxWindowParameters+0x11c>)
 8011ae4:	589b      	ldr	r3, [r3, r2]
 8011ae6:	22a0      	movs	r2, #160	; 0xa0
 8011ae8:	589b      	ldr	r3, [r3, r2]
 8011aea:	4906      	ldr	r1, [pc, #24]	; (8011b04 <ComputeRxWindowParameters+0x118>)
 8011aec:	22f6      	movs	r2, #246	; 0xf6
 8011aee:	0092      	lsls	r2, r2, #2
 8011af0:	588a      	ldr	r2, [r1, r2]
 8011af2:	1899      	adds	r1, r3, r2
 8011af4:	4a03      	ldr	r2, [pc, #12]	; (8011b04 <ComputeRxWindowParameters+0x118>)
 8011af6:	23ed      	movs	r3, #237	; 0xed
 8011af8:	009b      	lsls	r3, r3, #2
 8011afa:	50d1      	str	r1, [r2, r3]
    }
}
 8011afc:	46c0      	nop			; (mov r8, r8)
 8011afe:	46bd      	mov	sp, r7
 8011b00:	bdb0      	pop	{r4, r5, r7, pc}
 8011b02:	46c0      	nop			; (mov r8, r8)
 8011b04:	200005b4 	.word	0x200005b4
 8011b08:	00000484 	.word	0x00000484
 8011b0c:	2000096c 	.word	0x2000096c
 8011b10:	20000980 	.word	0x20000980

08011b14 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 8011b14:	b580      	push	{r7, lr}
 8011b16:	b082      	sub	sp, #8
 8011b18:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 8011b1a:	2300      	movs	r3, #0
 8011b1c:	607b      	str	r3, [r7, #4]

    if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 8011b1e:	4b15      	ldr	r3, [pc, #84]	; (8011b74 <VerifyTxFrame+0x60>)
 8011b20:	4a15      	ldr	r2, [pc, #84]	; (8011b78 <VerifyTxFrame+0x64>)
 8011b22:	589a      	ldr	r2, [r3, r2]
 8011b24:	23b2      	movs	r3, #178	; 0xb2
 8011b26:	005b      	lsls	r3, r3, #1
 8011b28:	5cd3      	ldrb	r3, [r2, r3]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d01d      	beq.n	8011b6a <VerifyTxFrame+0x56>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8011b2e:	1d3b      	adds	r3, r7, #4
 8011b30:	0018      	movs	r0, r3
 8011b32:	f003 f99f 	bl	8014e74 <LoRaMacCommandsGetSizeSerializedCmds>
 8011b36:	1e03      	subs	r3, r0, #0
 8011b38:	d001      	beq.n	8011b3e <VerifyTxFrame+0x2a>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011b3a:	2313      	movs	r3, #19
 8011b3c:	e016      	b.n	8011b6c <VerifyTxFrame+0x58>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, MacCtx.NvmCtx->MacParams.ChannelsDatarate, macCmdsSize ) == false )
 8011b3e:	4b0d      	ldr	r3, [pc, #52]	; (8011b74 <VerifyTxFrame+0x60>)
 8011b40:	4a0e      	ldr	r2, [pc, #56]	; (8011b7c <VerifyTxFrame+0x68>)
 8011b42:	5c98      	ldrb	r0, [r3, r2]
 8011b44:	4b0b      	ldr	r3, [pc, #44]	; (8011b74 <VerifyTxFrame+0x60>)
 8011b46:	4a0c      	ldr	r2, [pc, #48]	; (8011b78 <VerifyTxFrame+0x64>)
 8011b48:	589b      	ldr	r3, [r3, r2]
 8011b4a:	2285      	movs	r2, #133	; 0x85
 8011b4c:	569b      	ldrsb	r3, [r3, r2]
 8011b4e:	687a      	ldr	r2, [r7, #4]
 8011b50:	b2d2      	uxtb	r2, r2
 8011b52:	0019      	movs	r1, r3
 8011b54:	f7fe ffb0 	bl	8010ab8 <ValidatePayloadLength>
 8011b58:	0003      	movs	r3, r0
 8011b5a:	001a      	movs	r2, r3
 8011b5c:	2301      	movs	r3, #1
 8011b5e:	4053      	eors	r3, r2
 8011b60:	b2db      	uxtb	r3, r3
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d001      	beq.n	8011b6a <VerifyTxFrame+0x56>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 8011b66:	2308      	movs	r3, #8
 8011b68:	e000      	b.n	8011b6c <VerifyTxFrame+0x58>
        }
    }
    return LORAMAC_STATUS_OK;
 8011b6a:	2300      	movs	r3, #0
}
 8011b6c:	0018      	movs	r0, r3
 8011b6e:	46bd      	mov	sp, r7
 8011b70:	b002      	add	sp, #8
 8011b72:	bd80      	pop	{r7, pc}
 8011b74:	200005b4 	.word	0x200005b4
 8011b78:	00000484 	.word	0x00000484
 8011b7c:	00000237 	.word	0x00000237

08011b80 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 8011b80:	b590      	push	{r4, r7, lr}
 8011b82:	b083      	sub	sp, #12
 8011b84:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 8011b86:	4a1d      	ldr	r2, [pc, #116]	; (8011bfc <SerializeTxFrame+0x7c>)
 8011b88:	2382      	movs	r3, #130	; 0x82
 8011b8a:	005b      	lsls	r3, r3, #1
 8011b8c:	5cd3      	ldrb	r3, [r2, r3]
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d002      	beq.n	8011b98 <SerializeTxFrame+0x18>
 8011b92:	2b04      	cmp	r3, #4
 8011b94:	d015      	beq.n	8011bc2 <SerializeTxFrame+0x42>
 8011b96:	e029      	b.n	8011bec <SerializeTxFrame+0x6c>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8011b98:	1dfc      	adds	r4, r7, #7
 8011b9a:	4b19      	ldr	r3, [pc, #100]	; (8011c00 <SerializeTxFrame+0x80>)
 8011b9c:	0018      	movs	r0, r3
 8011b9e:	f004 fe6b 	bl	8016878 <LoRaMacSerializerJoinRequest>
 8011ba2:	0003      	movs	r3, r0
 8011ba4:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8011ba6:	1dfb      	adds	r3, r7, #7
 8011ba8:	781b      	ldrb	r3, [r3, #0]
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d001      	beq.n	8011bb2 <SerializeTxFrame+0x32>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011bae:	2311      	movs	r3, #17
 8011bb0:	e01f      	b.n	8011bf2 <SerializeTxFrame+0x72>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8011bb2:	4a12      	ldr	r2, [pc, #72]	; (8011bfc <SerializeTxFrame+0x7c>)
 8011bb4:	2386      	movs	r3, #134	; 0x86
 8011bb6:	005b      	lsls	r3, r3, #1
 8011bb8:	5cd3      	ldrb	r3, [r2, r3]
 8011bba:	b29a      	uxth	r2, r3
 8011bbc:	4b0f      	ldr	r3, [pc, #60]	; (8011bfc <SerializeTxFrame+0x7c>)
 8011bbe:	801a      	strh	r2, [r3, #0]
            break;
 8011bc0:	e016      	b.n	8011bf0 <SerializeTxFrame+0x70>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8011bc2:	1dfc      	adds	r4, r7, #7
 8011bc4:	4b0e      	ldr	r3, [pc, #56]	; (8011c00 <SerializeTxFrame+0x80>)
 8011bc6:	0018      	movs	r0, r3
 8011bc8:	f004 fef1 	bl	80169ae <LoRaMacSerializerData>
 8011bcc:	0003      	movs	r3, r0
 8011bce:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8011bd0:	1dfb      	adds	r3, r7, #7
 8011bd2:	781b      	ldrb	r3, [r3, #0]
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d001      	beq.n	8011bdc <SerializeTxFrame+0x5c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011bd8:	2311      	movs	r3, #17
 8011bda:	e00a      	b.n	8011bf2 <SerializeTxFrame+0x72>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8011bdc:	4a07      	ldr	r2, [pc, #28]	; (8011bfc <SerializeTxFrame+0x7c>)
 8011bde:	2386      	movs	r3, #134	; 0x86
 8011be0:	005b      	lsls	r3, r3, #1
 8011be2:	5cd3      	ldrb	r3, [r2, r3]
 8011be4:	b29a      	uxth	r2, r3
 8011be6:	4b05      	ldr	r3, [pc, #20]	; (8011bfc <SerializeTxFrame+0x7c>)
 8011be8:	801a      	strh	r2, [r3, #0]
            break;
 8011bea:	e001      	b.n	8011bf0 <SerializeTxFrame+0x70>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8011bec:	2303      	movs	r3, #3
 8011bee:	e000      	b.n	8011bf2 <SerializeTxFrame+0x72>
    }
    return LORAMAC_STATUS_OK;
 8011bf0:	2300      	movs	r3, #0
}
 8011bf2:	0018      	movs	r0, r3
 8011bf4:	46bd      	mov	sp, r7
 8011bf6:	b003      	add	sp, #12
 8011bf8:	bd90      	pop	{r4, r7, pc}
 8011bfa:	46c0      	nop			; (mov r8, r8)
 8011bfc:	200005b4 	.word	0x200005b4
 8011c00:	200006bc 	.word	0x200006bc

08011c04 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8011c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c06:	b091      	sub	sp, #68	; 0x44
 8011c08:	af02      	add	r7, sp, #8
 8011c0a:	0002      	movs	r2, r0
 8011c0c:	230f      	movs	r3, #15
 8011c0e:	18fb      	adds	r3, r7, r3
 8011c10:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011c12:	2537      	movs	r5, #55	; 0x37
 8011c14:	197b      	adds	r3, r7, r5
 8011c16:	2203      	movs	r2, #3
 8011c18:	701a      	strb	r2, [r3, #0]
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8011c1a:	197c      	adds	r4, r7, r5
 8011c1c:	f7ff fec2 	bl	80119a4 <CheckForClassBCollision>
 8011c20:	0003      	movs	r3, r0
 8011c22:	7023      	strb	r3, [r4, #0]
    if( status != LORAMAC_STATUS_OK )
 8011c24:	002a      	movs	r2, r5
 8011c26:	18bb      	adds	r3, r7, r2
 8011c28:	781b      	ldrb	r3, [r3, #0]
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d002      	beq.n	8011c34 <ScheduleTx+0x30>
    {
        return status;
 8011c2e:	18bb      	adds	r3, r7, r2
 8011c30:	781b      	ldrb	r3, [r3, #0]
 8011c32:	e0c3      	b.n	8011dbc <ScheduleTx+0x1b8>
    }

    // Update back-off
    CalculateBackOff( );
 8011c34:	f000 f940 	bl	8011eb8 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8011c38:	2537      	movs	r5, #55	; 0x37
 8011c3a:	197c      	adds	r4, r7, r5
 8011c3c:	f7ff ffa0 	bl	8011b80 <SerializeTxFrame>
 8011c40:	0003      	movs	r3, r0
 8011c42:	7023      	strb	r3, [r4, #0]
    if( status != LORAMAC_STATUS_OK )
 8011c44:	002a      	movs	r2, r5
 8011c46:	18bb      	adds	r3, r7, r2
 8011c48:	781b      	ldrb	r3, [r3, #0]
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d002      	beq.n	8011c54 <ScheduleTx+0x50>
    {
        return status;
 8011c4e:	18bb      	adds	r3, r7, r2
 8011c50:	781b      	ldrb	r3, [r3, #0]
 8011c52:	e0b3      	b.n	8011dbc <ScheduleTx+0x1b8>
    }

    nextChan.AggrTimeOff = MacCtx.NvmCtx->AggregatedTimeOff;
 8011c54:	4b5b      	ldr	r3, [pc, #364]	; (8011dc4 <ScheduleTx+0x1c0>)
 8011c56:	4a5c      	ldr	r2, [pc, #368]	; (8011dc8 <ScheduleTx+0x1c4>)
 8011c58:	589a      	ldr	r2, [r3, r2]
 8011c5a:	23aa      	movs	r3, #170	; 0xaa
 8011c5c:	005b      	lsls	r3, r3, #1
 8011c5e:	58d2      	ldr	r2, [r2, r3]
 8011c60:	2414      	movs	r4, #20
 8011c62:	193b      	adds	r3, r7, r4
 8011c64:	601a      	str	r2, [r3, #0]
    nextChan.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8011c66:	4b57      	ldr	r3, [pc, #348]	; (8011dc4 <ScheduleTx+0x1c0>)
 8011c68:	4a57      	ldr	r2, [pc, #348]	; (8011dc8 <ScheduleTx+0x1c4>)
 8011c6a:	589b      	ldr	r3, [r3, r2]
 8011c6c:	2285      	movs	r2, #133	; 0x85
 8011c6e:	569a      	ldrsb	r2, [r3, r2]
 8011c70:	193b      	adds	r3, r7, r4
 8011c72:	721a      	strb	r2, [r3, #8]
    nextChan.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 8011c74:	4b53      	ldr	r3, [pc, #332]	; (8011dc4 <ScheduleTx+0x1c0>)
 8011c76:	4a54      	ldr	r2, [pc, #336]	; (8011dc8 <ScheduleTx+0x1c4>)
 8011c78:	589b      	ldr	r3, [r3, r2]
 8011c7a:	22c9      	movs	r2, #201	; 0xc9
 8011c7c:	5c9a      	ldrb	r2, [r3, r2]
 8011c7e:	193b      	adds	r3, r7, r4
 8011c80:	729a      	strb	r2, [r3, #10]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 8011c82:	232c      	movs	r3, #44	; 0x2c
 8011c84:	18fb      	adds	r3, r7, r3
 8011c86:	0018      	movs	r0, r3
 8011c88:	f00a ff34 	bl	801caf4 <SysTimeGetMcuTime>
 8011c8c:	4b4d      	ldr	r3, [pc, #308]	; (8011dc4 <ScheduleTx+0x1c0>)
 8011c8e:	4a4e      	ldr	r2, [pc, #312]	; (8011dc8 <ScheduleTx+0x1c4>)
 8011c90:	5898      	ldr	r0, [r3, r2]
 8011c92:	193d      	adds	r5, r7, r4
 8011c94:	003e      	movs	r6, r7
 8011c96:	23ac      	movs	r3, #172	; 0xac
 8011c98:	0059      	lsls	r1, r3, #1
 8011c9a:	232c      	movs	r3, #44	; 0x2c
 8011c9c:	18fa      	adds	r2, r7, r3
 8011c9e:	2404      	movs	r4, #4
 8011ca0:	1843      	adds	r3, r0, r1
 8011ca2:	191c      	adds	r4, r3, r4
 8011ca4:	466b      	mov	r3, sp
 8011ca6:	6824      	ldr	r4, [r4, #0]
 8011ca8:	601c      	str	r4, [r3, #0]
 8011caa:	5843      	ldr	r3, [r0, r1]
 8011cac:	6811      	ldr	r1, [r2, #0]
 8011cae:	6852      	ldr	r2, [r2, #4]
 8011cb0:	0030      	movs	r0, r6
 8011cb2:	f00a fe51 	bl	801c958 <SysTimeSub>
 8011cb6:	003a      	movs	r2, r7
 8011cb8:	002b      	movs	r3, r5
 8011cba:	330c      	adds	r3, #12
 8011cbc:	ca21      	ldmia	r2!, {r0, r5}
 8011cbe:	c321      	stmia	r3!, {r0, r5}
    nextChan.LastAggrTx = MacCtx.NvmCtx->LastTxDoneTime;
 8011cc0:	4b40      	ldr	r3, [pc, #256]	; (8011dc4 <ScheduleTx+0x1c0>)
 8011cc2:	4a41      	ldr	r2, [pc, #260]	; (8011dc8 <ScheduleTx+0x1c4>)
 8011cc4:	589a      	ldr	r2, [r3, r2]
 8011cc6:	23a8      	movs	r3, #168	; 0xa8
 8011cc8:	005b      	lsls	r3, r3, #1
 8011cca:	58d2      	ldr	r2, [r2, r3]
 8011ccc:	2114      	movs	r1, #20
 8011cce:	187b      	adds	r3, r7, r1
 8011cd0:	605a      	str	r2, [r3, #4]
    nextChan.LastTxIsJoinRequest = false;
 8011cd2:	187b      	adds	r3, r7, r1
 8011cd4:	2200      	movs	r2, #0
 8011cd6:	751a      	strb	r2, [r3, #20]
    nextChan.Joined = true;
 8011cd8:	187b      	adds	r3, r7, r1
 8011cda:	2201      	movs	r2, #1
 8011cdc:	725a      	strb	r2, [r3, #9]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8011cde:	4b39      	ldr	r3, [pc, #228]	; (8011dc4 <ScheduleTx+0x1c0>)
 8011ce0:	881a      	ldrh	r2, [r3, #0]
 8011ce2:	187b      	adds	r3, r7, r1
 8011ce4:	82da      	strh	r2, [r3, #22]

    // Setup the parameters based on the join status
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8011ce6:	4b37      	ldr	r3, [pc, #220]	; (8011dc4 <ScheduleTx+0x1c0>)
 8011ce8:	4a37      	ldr	r2, [pc, #220]	; (8011dc8 <ScheduleTx+0x1c4>)
 8011cea:	589a      	ldr	r2, [r3, r2]
 8011cec:	23b2      	movs	r3, #178	; 0xb2
 8011cee:	005b      	lsls	r3, r3, #1
 8011cf0:	5cd3      	ldrb	r3, [r2, r3]
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d105      	bne.n	8011d02 <ScheduleTx+0xfe>
    {
        nextChan.LastTxIsJoinRequest = true;
 8011cf6:	187b      	adds	r3, r7, r1
 8011cf8:	2201      	movs	r2, #1
 8011cfa:	751a      	strb	r2, [r3, #20]
        nextChan.Joined = false;
 8011cfc:	187b      	adds	r3, r7, r1
 8011cfe:	2200      	movs	r2, #0
 8011d00:	725a      	strb	r2, [r3, #9]
    }

    // Select channel
    status = RegionNextChannel( MacCtx.NvmCtx->Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &MacCtx.NvmCtx->AggregatedTimeOff );
 8011d02:	4b30      	ldr	r3, [pc, #192]	; (8011dc4 <ScheduleTx+0x1c0>)
 8011d04:	4a30      	ldr	r2, [pc, #192]	; (8011dc8 <ScheduleTx+0x1c4>)
 8011d06:	589b      	ldr	r3, [r3, r2]
 8011d08:	7818      	ldrb	r0, [r3, #0]
 8011d0a:	4b2e      	ldr	r3, [pc, #184]	; (8011dc4 <ScheduleTx+0x1c0>)
 8011d0c:	4a2e      	ldr	r2, [pc, #184]	; (8011dc8 <ScheduleTx+0x1c4>)
 8011d0e:	589b      	ldr	r3, [r3, r2]
 8011d10:	3355      	adds	r3, #85	; 0x55
 8011d12:	33ff      	adds	r3, #255	; 0xff
 8011d14:	2637      	movs	r6, #55	; 0x37
 8011d16:	19bc      	adds	r4, r7, r6
 8011d18:	4d2c      	ldr	r5, [pc, #176]	; (8011dcc <ScheduleTx+0x1c8>)
 8011d1a:	4a2d      	ldr	r2, [pc, #180]	; (8011dd0 <ScheduleTx+0x1cc>)
 8011d1c:	2114      	movs	r1, #20
 8011d1e:	1879      	adds	r1, r7, r1
 8011d20:	9300      	str	r3, [sp, #0]
 8011d22:	002b      	movs	r3, r5
 8011d24:	f005 f920 	bl	8016f68 <RegionNextChannel>
 8011d28:	0003      	movs	r3, r0
 8011d2a:	7023      	strb	r3, [r4, #0]

    if( status != LORAMAC_STATUS_OK )
 8011d2c:	19bb      	adds	r3, r7, r6
 8011d2e:	781b      	ldrb	r3, [r3, #0]
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d02c      	beq.n	8011d8e <ScheduleTx+0x18a>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 8011d34:	19bb      	adds	r3, r7, r6
 8011d36:	781b      	ldrb	r3, [r3, #0]
 8011d38:	2b0b      	cmp	r3, #11
 8011d3a:	d124      	bne.n	8011d86 <ScheduleTx+0x182>
 8011d3c:	230f      	movs	r3, #15
 8011d3e:	18fb      	adds	r3, r7, r3
 8011d40:	781b      	ldrb	r3, [r3, #0]
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d01f      	beq.n	8011d86 <ScheduleTx+0x182>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 8011d46:	4a1f      	ldr	r2, [pc, #124]	; (8011dc4 <ScheduleTx+0x1c0>)
 8011d48:	2391      	movs	r3, #145	; 0x91
 8011d4a:	00db      	lsls	r3, r3, #3
 8011d4c:	58d3      	ldr	r3, [r2, r3]
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d017      	beq.n	8011d82 <ScheduleTx+0x17e>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8011d52:	4a1c      	ldr	r2, [pc, #112]	; (8011dc4 <ScheduleTx+0x1c0>)
 8011d54:	23d0      	movs	r3, #208	; 0xd0
 8011d56:	009b      	lsls	r3, r3, #2
 8011d58:	58d3      	ldr	r3, [r2, r3]
 8011d5a:	2220      	movs	r2, #32
 8011d5c:	431a      	orrs	r2, r3
 8011d5e:	0011      	movs	r1, r2
 8011d60:	4a18      	ldr	r2, [pc, #96]	; (8011dc4 <ScheduleTx+0x1c0>)
 8011d62:	23d0      	movs	r3, #208	; 0xd0
 8011d64:	009b      	lsls	r3, r3, #2
 8011d66:	50d1      	str	r1, [r2, r3]
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8011d68:	4a16      	ldr	r2, [pc, #88]	; (8011dc4 <ScheduleTx+0x1c0>)
 8011d6a:	2391      	movs	r3, #145	; 0x91
 8011d6c:	00db      	lsls	r3, r3, #3
 8011d6e:	58d2      	ldr	r2, [r2, r3]
 8011d70:	4b18      	ldr	r3, [pc, #96]	; (8011dd4 <ScheduleTx+0x1d0>)
 8011d72:	0011      	movs	r1, r2
 8011d74:	0018      	movs	r0, r3
 8011d76:	f00b f815 	bl	801cda4 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 8011d7a:	4b16      	ldr	r3, [pc, #88]	; (8011dd4 <ScheduleTx+0x1d0>)
 8011d7c:	0018      	movs	r0, r3
 8011d7e:	f00a ff21 	bl	801cbc4 <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 8011d82:	2300      	movs	r3, #0
 8011d84:	e01a      	b.n	8011dbc <ScheduleTx+0x1b8>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8011d86:	2337      	movs	r3, #55	; 0x37
 8011d88:	18fb      	adds	r3, r7, r3
 8011d8a:	781b      	ldrb	r3, [r3, #0]
 8011d8c:	e016      	b.n	8011dbc <ScheduleTx+0x1b8>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 8011d8e:	f7ff fe2d 	bl	80119ec <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 8011d92:	2537      	movs	r5, #55	; 0x37
 8011d94:	197c      	adds	r4, r7, r5
 8011d96:	f7ff febd 	bl	8011b14 <VerifyTxFrame>
 8011d9a:	0003      	movs	r3, r0
 8011d9c:	7023      	strb	r3, [r4, #0]
    if( status != LORAMAC_STATUS_OK )
 8011d9e:	002a      	movs	r2, r5
 8011da0:	18bb      	adds	r3, r7, r2
 8011da2:	781b      	ldrb	r3, [r3, #0]
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d002      	beq.n	8011dae <ScheduleTx+0x1aa>
    {
        return status;
 8011da8:	18bb      	adds	r3, r7, r2
 8011daa:	781b      	ldrb	r3, [r3, #0]
 8011dac:	e006      	b.n	8011dbc <ScheduleTx+0x1b8>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8011dae:	4b05      	ldr	r3, [pc, #20]	; (8011dc4 <ScheduleTx+0x1c0>)
 8011db0:	4a09      	ldr	r2, [pc, #36]	; (8011dd8 <ScheduleTx+0x1d4>)
 8011db2:	5c9b      	ldrb	r3, [r3, r2]
 8011db4:	0018      	movs	r0, r3
 8011db6:	f000 fb99 	bl	80124ec <SendFrameOnChannel>
 8011dba:	0003      	movs	r3, r0
}
 8011dbc:	0018      	movs	r0, r3
 8011dbe:	46bd      	mov	sp, r7
 8011dc0:	b00f      	add	sp, #60	; 0x3c
 8011dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011dc4:	200005b4 	.word	0x200005b4
 8011dc8:	00000484 	.word	0x00000484
 8011dcc:	20000a3c 	.word	0x20000a3c
 8011dd0:	200009c9 	.word	0x200009c9
 8011dd4:	2000091c 	.word	0x2000091c
 8011dd8:	00000415 	.word	0x00000415

08011ddc <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8011ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011dde:	b085      	sub	sp, #20
 8011de0:	af00      	add	r7, sp, #0
 8011de2:	0002      	movs	r2, r0
 8011de4:	1dfb      	adds	r3, r7, #7
 8011de6:	701a      	strb	r2, [r3, #0]
 8011de8:	1dbb      	adds	r3, r7, #6
 8011dea:	1c0a      	adds	r2, r1, #0
 8011dec:	701a      	strb	r2, [r3, #0]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8011dee:	230f      	movs	r3, #15
 8011df0:	18fb      	adds	r3, r7, r3
 8011df2:	2213      	movs	r2, #19
 8011df4:	701a      	strb	r2, [r3, #0]
    uint32_t fCntUp = 0;
 8011df6:	2300      	movs	r3, #0
 8011df8:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 8011dfa:	4a2c      	ldr	r2, [pc, #176]	; (8011eac <SecureFrame+0xd0>)
 8011dfc:	2382      	movs	r3, #130	; 0x82
 8011dfe:	005b      	lsls	r3, r3, #1
 8011e00:	5cd3      	ldrb	r3, [r2, r3]
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d002      	beq.n	8011e0c <SecureFrame+0x30>
 8011e06:	2b04      	cmp	r3, #4
 8011e08:	d016      	beq.n	8011e38 <SecureFrame+0x5c>
 8011e0a:	e047      	b.n	8011e9c <SecureFrame+0xc0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8011e0c:	250f      	movs	r5, #15
 8011e0e:	197c      	adds	r4, r7, r5
 8011e10:	4b27      	ldr	r3, [pc, #156]	; (8011eb0 <SecureFrame+0xd4>)
 8011e12:	0018      	movs	r0, r3
 8011e14:	f004 f86a 	bl	8015eec <LoRaMacCryptoPrepareJoinRequest>
 8011e18:	0003      	movs	r3, r0
 8011e1a:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8011e1c:	197b      	adds	r3, r7, r5
 8011e1e:	781b      	ldrb	r3, [r3, #0]
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d001      	beq.n	8011e28 <SecureFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011e24:	2311      	movs	r3, #17
 8011e26:	e03c      	b.n	8011ea2 <SecureFrame+0xc6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8011e28:	4a20      	ldr	r2, [pc, #128]	; (8011eac <SecureFrame+0xd0>)
 8011e2a:	2386      	movs	r3, #134	; 0x86
 8011e2c:	005b      	lsls	r3, r3, #1
 8011e2e:	5cd3      	ldrb	r3, [r2, r3]
 8011e30:	b29a      	uxth	r2, r3
 8011e32:	4b1e      	ldr	r3, [pc, #120]	; (8011eac <SecureFrame+0xd0>)
 8011e34:	801a      	strh	r2, [r3, #0]
            break;
 8011e36:	e033      	b.n	8011ea0 <SecureFrame+0xc4>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8011e38:	2308      	movs	r3, #8
 8011e3a:	18fb      	adds	r3, r7, r3
 8011e3c:	0018      	movs	r0, r3
 8011e3e:	f003 ff67 	bl	8015d10 <LoRaMacCryptoGetFCntUp>
 8011e42:	1e03      	subs	r3, r0, #0
 8011e44:	d001      	beq.n	8011e4a <SecureFrame+0x6e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8011e46:	2312      	movs	r3, #18
 8011e48:	e02b      	b.n	8011ea2 <SecureFrame+0xc6>
            }

            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 8011e4a:	4a18      	ldr	r2, [pc, #96]	; (8011eac <SecureFrame+0xd0>)
 8011e4c:	2382      	movs	r3, #130	; 0x82
 8011e4e:	00db      	lsls	r3, r3, #3
 8011e50:	5cd3      	ldrb	r3, [r2, r3]
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d104      	bne.n	8011e60 <SecureFrame+0x84>
 8011e56:	4b15      	ldr	r3, [pc, #84]	; (8011eac <SecureFrame+0xd0>)
 8011e58:	4a16      	ldr	r2, [pc, #88]	; (8011eb4 <SecureFrame+0xd8>)
 8011e5a:	5c9b      	ldrb	r3, [r3, r2]
 8011e5c:	2b01      	cmp	r3, #1
 8011e5e:	d902      	bls.n	8011e66 <SecureFrame+0x8a>
            {
                fCntUp -= 1;
 8011e60:	68bb      	ldr	r3, [r7, #8]
 8011e62:	3b01      	subs	r3, #1
 8011e64:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8011e66:	68b8      	ldr	r0, [r7, #8]
 8011e68:	260f      	movs	r6, #15
 8011e6a:	19bc      	adds	r4, r7, r6
 8011e6c:	4d10      	ldr	r5, [pc, #64]	; (8011eb0 <SecureFrame+0xd4>)
 8011e6e:	1dbb      	adds	r3, r7, #6
 8011e70:	781a      	ldrb	r2, [r3, #0]
 8011e72:	1dfb      	adds	r3, r7, #7
 8011e74:	7819      	ldrb	r1, [r3, #0]
 8011e76:	002b      	movs	r3, r5
 8011e78:	f004 f942 	bl	8016100 <LoRaMacCryptoSecureMessage>
 8011e7c:	0003      	movs	r3, r0
 8011e7e:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8011e80:	19bb      	adds	r3, r7, r6
 8011e82:	781b      	ldrb	r3, [r3, #0]
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d001      	beq.n	8011e8c <SecureFrame+0xb0>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011e88:	2311      	movs	r3, #17
 8011e8a:	e00a      	b.n	8011ea2 <SecureFrame+0xc6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8011e8c:	4a07      	ldr	r2, [pc, #28]	; (8011eac <SecureFrame+0xd0>)
 8011e8e:	2386      	movs	r3, #134	; 0x86
 8011e90:	005b      	lsls	r3, r3, #1
 8011e92:	5cd3      	ldrb	r3, [r2, r3]
 8011e94:	b29a      	uxth	r2, r3
 8011e96:	4b05      	ldr	r3, [pc, #20]	; (8011eac <SecureFrame+0xd0>)
 8011e98:	801a      	strh	r2, [r3, #0]
            break;
 8011e9a:	e001      	b.n	8011ea0 <SecureFrame+0xc4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8011e9c:	2303      	movs	r3, #3
 8011e9e:	e000      	b.n	8011ea2 <SecureFrame+0xc6>
    }
    return LORAMAC_STATUS_OK;
 8011ea0:	2300      	movs	r3, #0
}
 8011ea2:	0018      	movs	r0, r3
 8011ea4:	46bd      	mov	sp, r7
 8011ea6:	b005      	add	sp, #20
 8011ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011eaa:	46c0      	nop			; (mov r8, r8)
 8011eac:	200005b4 	.word	0x200005b4
 8011eb0:	200006bc 	.word	0x200006bc
 8011eb4:	00000412 	.word	0x00000412

08011eb8 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8011eb8:	b580      	push	{r7, lr}
 8011eba:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( MacCtx.NvmCtx->AggregatedTimeOff == 0 )
 8011ebc:	4b0e      	ldr	r3, [pc, #56]	; (8011ef8 <CalculateBackOff+0x40>)
 8011ebe:	4a0f      	ldr	r2, [pc, #60]	; (8011efc <CalculateBackOff+0x44>)
 8011ec0:	589a      	ldr	r2, [r3, r2]
 8011ec2:	23aa      	movs	r3, #170	; 0xaa
 8011ec4:	005b      	lsls	r3, r3, #1
 8011ec6:	58d3      	ldr	r3, [r2, r3]
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d111      	bne.n	8011ef0 <CalculateBackOff+0x38>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        MacCtx.NvmCtx->AggregatedTimeOff = ( MacCtx.TxTimeOnAir * MacCtx.NvmCtx->AggregatedDCycle - MacCtx.TxTimeOnAir );
 8011ecc:	4b0a      	ldr	r3, [pc, #40]	; (8011ef8 <CalculateBackOff+0x40>)
 8011ece:	4a0b      	ldr	r2, [pc, #44]	; (8011efc <CalculateBackOff+0x44>)
 8011ed0:	589a      	ldr	r2, [r3, r2]
 8011ed2:	23a6      	movs	r3, #166	; 0xa6
 8011ed4:	005b      	lsls	r3, r3, #1
 8011ed6:	5ad3      	ldrh	r3, [r2, r3]
 8011ed8:	3b01      	subs	r3, #1
 8011eda:	4907      	ldr	r1, [pc, #28]	; (8011ef8 <CalculateBackOff+0x40>)
 8011edc:	2283      	movs	r2, #131	; 0x83
 8011ede:	00d2      	lsls	r2, r2, #3
 8011ee0:	5889      	ldr	r1, [r1, r2]
 8011ee2:	4a05      	ldr	r2, [pc, #20]	; (8011ef8 <CalculateBackOff+0x40>)
 8011ee4:	4805      	ldr	r0, [pc, #20]	; (8011efc <CalculateBackOff+0x44>)
 8011ee6:	5812      	ldr	r2, [r2, r0]
 8011ee8:	4359      	muls	r1, r3
 8011eea:	23aa      	movs	r3, #170	; 0xaa
 8011eec:	005b      	lsls	r3, r3, #1
 8011eee:	50d1      	str	r1, [r2, r3]
    }
}
 8011ef0:	46c0      	nop			; (mov r8, r8)
 8011ef2:	46bd      	mov	sp, r7
 8011ef4:	bd80      	pop	{r7, pc}
 8011ef6:	46c0      	nop			; (mov r8, r8)
 8011ef8:	200005b4 	.word	0x200005b4
 8011efc:	00000484 	.word	0x00000484

08011f00 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8011f00:	b580      	push	{r7, lr}
 8011f02:	b082      	sub	sp, #8
 8011f04:	af00      	add	r7, sp, #0
 8011f06:	1d3b      	adds	r3, r7, #4
 8011f08:	7019      	strb	r1, [r3, #0]
 8011f0a:	0011      	movs	r1, r2
 8011f0c:	1dfb      	adds	r3, r7, #7
 8011f0e:	1c02      	adds	r2, r0, #0
 8011f10:	701a      	strb	r2, [r3, #0]
 8011f12:	1dbb      	adds	r3, r7, #6
 8011f14:	1c0a      	adds	r2, r1, #0
 8011f16:	701a      	strb	r2, [r3, #0]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8011f18:	1dfb      	adds	r3, r7, #7
 8011f1a:	781b      	ldrb	r3, [r3, #0]
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d003      	beq.n	8011f28 <RemoveMacCommands+0x28>
 8011f20:	1dfb      	adds	r3, r7, #7
 8011f22:	781b      	ldrb	r3, [r3, #0]
 8011f24:	2b01      	cmp	r3, #1
 8011f26:	d10f      	bne.n	8011f48 <RemoveMacCommands+0x48>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 8011f28:	1dbb      	adds	r3, r7, #6
 8011f2a:	781b      	ldrb	r3, [r3, #0]
 8011f2c:	2b01      	cmp	r3, #1
 8011f2e:	d109      	bne.n	8011f44 <RemoveMacCommands+0x44>
        {
            if( fCtrl.Bits.Ack == 1 )
 8011f30:	1d3b      	adds	r3, r7, #4
 8011f32:	781b      	ldrb	r3, [r3, #0]
 8011f34:	2220      	movs	r2, #32
 8011f36:	4013      	ands	r3, r2
 8011f38:	b2db      	uxtb	r3, r3
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d004      	beq.n	8011f48 <RemoveMacCommands+0x48>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8011f3e:	f002 ff75 	bl	8014e2c <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 8011f42:	e001      	b.n	8011f48 <RemoveMacCommands+0x48>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8011f44:	f002 ff72 	bl	8014e2c <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8011f48:	46c0      	nop			; (mov r8, r8)
 8011f4a:	46bd      	mov	sp, r7
 8011f4c:	b002      	add	sp, #8
 8011f4e:	bd80      	pop	{r7, pc}

08011f50 <ResetMacParameters>:

static void ResetMacParameters( void )
{
 8011f50:	b590      	push	{r4, r7, lr}
 8011f52:	b083      	sub	sp, #12
 8011f54:	af00      	add	r7, sp, #0
    MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
 8011f56:	4b72      	ldr	r3, [pc, #456]	; (8012120 <ResetMacParameters+0x1d0>)
 8011f58:	4a72      	ldr	r2, [pc, #456]	; (8012124 <ResetMacParameters+0x1d4>)
 8011f5a:	589a      	ldr	r2, [r3, r2]
 8011f5c:	23b2      	movs	r3, #178	; 0xb2
 8011f5e:	005b      	lsls	r3, r3, #1
 8011f60:	2100      	movs	r1, #0
 8011f62:	54d1      	strb	r1, [r2, r3]

    // ADR counter
    MacCtx.NvmCtx->AdrAckCounter = 0;
 8011f64:	4b6e      	ldr	r3, [pc, #440]	; (8012120 <ResetMacParameters+0x1d0>)
 8011f66:	4a6f      	ldr	r2, [pc, #444]	; (8012124 <ResetMacParameters+0x1d4>)
 8011f68:	589b      	ldr	r3, [r3, r2]
 8011f6a:	2280      	movs	r2, #128	; 0x80
 8011f6c:	2100      	movs	r1, #0
 8011f6e:	5099      	str	r1, [r3, r2]

    MacCtx.ChannelsNbTransCounter = 0;
 8011f70:	4a6b      	ldr	r2, [pc, #428]	; (8012120 <ResetMacParameters+0x1d0>)
 8011f72:	2382      	movs	r3, #130	; 0x82
 8011f74:	00db      	lsls	r3, r3, #3
 8011f76:	2100      	movs	r1, #0
 8011f78:	54d1      	strb	r1, [r2, r3]
    MacCtx.AckTimeoutRetries = 1; //
 8011f7a:	4b69      	ldr	r3, [pc, #420]	; (8012120 <ResetMacParameters+0x1d0>)
 8011f7c:	4a6a      	ldr	r2, [pc, #424]	; (8012128 <ResetMacParameters+0x1d8>)
 8011f7e:	2101      	movs	r1, #1
 8011f80:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetriesCounter = 1; //
 8011f82:	4b67      	ldr	r3, [pc, #412]	; (8012120 <ResetMacParameters+0x1d0>)
 8011f84:	4a69      	ldr	r2, [pc, #420]	; (801212c <ResetMacParameters+0x1dc>)
 8011f86:	2101      	movs	r1, #1
 8011f88:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetry = false;
 8011f8a:	4b65      	ldr	r3, [pc, #404]	; (8012120 <ResetMacParameters+0x1d0>)
 8011f8c:	4a68      	ldr	r2, [pc, #416]	; (8012130 <ResetMacParameters+0x1e0>)
 8011f8e:	2100      	movs	r1, #0
 8011f90:	5499      	strb	r1, [r3, r2]

    MacCtx.NvmCtx->MaxDCycle = 0;
 8011f92:	4b63      	ldr	r3, [pc, #396]	; (8012120 <ResetMacParameters+0x1d0>)
 8011f94:	4a63      	ldr	r2, [pc, #396]	; (8012124 <ResetMacParameters+0x1d4>)
 8011f96:	589b      	ldr	r3, [r3, r2]
 8011f98:	22c8      	movs	r2, #200	; 0xc8
 8011f9a:	2100      	movs	r1, #0
 8011f9c:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->AggregatedDCycle = 1;
 8011f9e:	4b60      	ldr	r3, [pc, #384]	; (8012120 <ResetMacParameters+0x1d0>)
 8011fa0:	4a60      	ldr	r2, [pc, #384]	; (8012124 <ResetMacParameters+0x1d4>)
 8011fa2:	589a      	ldr	r2, [r3, r2]
 8011fa4:	23a6      	movs	r3, #166	; 0xa6
 8011fa6:	005b      	lsls	r3, r3, #1
 8011fa8:	2101      	movs	r1, #1
 8011faa:	52d1      	strh	r1, [r2, r3]

    MacCtx.NvmCtx->MacParams.ChannelsTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 8011fac:	4b5c      	ldr	r3, [pc, #368]	; (8012120 <ResetMacParameters+0x1d0>)
 8011fae:	4a5d      	ldr	r2, [pc, #372]	; (8012124 <ResetMacParameters+0x1d4>)
 8011fb0:	589a      	ldr	r2, [r3, r2]
 8011fb2:	4b5b      	ldr	r3, [pc, #364]	; (8012120 <ResetMacParameters+0x1d0>)
 8011fb4:	495b      	ldr	r1, [pc, #364]	; (8012124 <ResetMacParameters+0x1d4>)
 8011fb6:	585b      	ldr	r3, [r3, r1]
 8011fb8:	2104      	movs	r1, #4
 8011fba:	5651      	ldrsb	r1, [r2, r1]
 8011fbc:	2284      	movs	r2, #132	; 0x84
 8011fbe:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 8011fc0:	4b57      	ldr	r3, [pc, #348]	; (8012120 <ResetMacParameters+0x1d0>)
 8011fc2:	4a58      	ldr	r2, [pc, #352]	; (8012124 <ResetMacParameters+0x1d4>)
 8011fc4:	589a      	ldr	r2, [r3, r2]
 8011fc6:	4b56      	ldr	r3, [pc, #344]	; (8012120 <ResetMacParameters+0x1d0>)
 8011fc8:	4956      	ldr	r1, [pc, #344]	; (8012124 <ResetMacParameters+0x1d4>)
 8011fca:	585b      	ldr	r3, [r3, r1]
 8011fcc:	2105      	movs	r1, #5
 8011fce:	5651      	ldrsb	r1, [r2, r1]
 8011fd0:	2285      	movs	r2, #133	; 0x85
 8011fd2:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.Rx1DrOffset = MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset;
 8011fd4:	4b52      	ldr	r3, [pc, #328]	; (8012120 <ResetMacParameters+0x1d0>)
 8011fd6:	4a53      	ldr	r2, [pc, #332]	; (8012124 <ResetMacParameters+0x1d4>)
 8011fd8:	589a      	ldr	r2, [r3, r2]
 8011fda:	4b51      	ldr	r3, [pc, #324]	; (8012120 <ResetMacParameters+0x1d0>)
 8011fdc:	4951      	ldr	r1, [pc, #324]	; (8012124 <ResetMacParameters+0x1d4>)
 8011fde:	585b      	ldr	r3, [r3, r1]
 8011fe0:	2125      	movs	r1, #37	; 0x25
 8011fe2:	5c51      	ldrb	r1, [r2, r1]
 8011fe4:	22a5      	movs	r2, #165	; 0xa5
 8011fe6:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 8011fe8:	4b4d      	ldr	r3, [pc, #308]	; (8012120 <ResetMacParameters+0x1d0>)
 8011fea:	4a4e      	ldr	r2, [pc, #312]	; (8012124 <ResetMacParameters+0x1d4>)
 8011fec:	589a      	ldr	r2, [r3, r2]
 8011fee:	4b4c      	ldr	r3, [pc, #304]	; (8012120 <ResetMacParameters+0x1d0>)
 8011ff0:	494c      	ldr	r1, [pc, #304]	; (8012124 <ResetMacParameters+0x1d4>)
 8011ff2:	585b      	ldr	r3, [r3, r1]
 8011ff4:	21a8      	movs	r1, #168	; 0xa8
 8011ff6:	185b      	adds	r3, r3, r1
 8011ff8:	3228      	adds	r2, #40	; 0x28
 8011ffa:	ca03      	ldmia	r2!, {r0, r1}
 8011ffc:	c303      	stmia	r3!, {r0, r1}
    MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 8011ffe:	4b48      	ldr	r3, [pc, #288]	; (8012120 <ResetMacParameters+0x1d0>)
 8012000:	4a48      	ldr	r2, [pc, #288]	; (8012124 <ResetMacParameters+0x1d4>)
 8012002:	589a      	ldr	r2, [r3, r2]
 8012004:	4b46      	ldr	r3, [pc, #280]	; (8012120 <ResetMacParameters+0x1d0>)
 8012006:	4947      	ldr	r1, [pc, #284]	; (8012124 <ResetMacParameters+0x1d4>)
 8012008:	585b      	ldr	r3, [r3, r1]
 801200a:	21b0      	movs	r1, #176	; 0xb0
 801200c:	185b      	adds	r3, r3, r1
 801200e:	3230      	adds	r2, #48	; 0x30
 8012010:	ca03      	ldmia	r2!, {r0, r1}
 8012012:	c303      	stmia	r3!, {r0, r1}
    MacCtx.NvmCtx->MacParams.UplinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime;
 8012014:	4b42      	ldr	r3, [pc, #264]	; (8012120 <ResetMacParameters+0x1d0>)
 8012016:	4a43      	ldr	r2, [pc, #268]	; (8012124 <ResetMacParameters+0x1d4>)
 8012018:	589a      	ldr	r2, [r3, r2]
 801201a:	4b41      	ldr	r3, [pc, #260]	; (8012120 <ResetMacParameters+0x1d0>)
 801201c:	4941      	ldr	r1, [pc, #260]	; (8012124 <ResetMacParameters+0x1d4>)
 801201e:	585b      	ldr	r3, [r3, r1]
 8012020:	2138      	movs	r1, #56	; 0x38
 8012022:	5c51      	ldrb	r1, [r2, r1]
 8012024:	22b8      	movs	r2, #184	; 0xb8
 8012026:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime;
 8012028:	4b3d      	ldr	r3, [pc, #244]	; (8012120 <ResetMacParameters+0x1d0>)
 801202a:	4a3e      	ldr	r2, [pc, #248]	; (8012124 <ResetMacParameters+0x1d4>)
 801202c:	589a      	ldr	r2, [r3, r2]
 801202e:	4b3c      	ldr	r3, [pc, #240]	; (8012120 <ResetMacParameters+0x1d0>)
 8012030:	493c      	ldr	r1, [pc, #240]	; (8012124 <ResetMacParameters+0x1d4>)
 8012032:	585b      	ldr	r3, [r3, r1]
 8012034:	2139      	movs	r1, #57	; 0x39
 8012036:	5c51      	ldrb	r1, [r2, r1]
 8012038:	22b9      	movs	r2, #185	; 0xb9
 801203a:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.MaxEirp = MacCtx.NvmCtx->MacParamsDefaults.MaxEirp;
 801203c:	4b38      	ldr	r3, [pc, #224]	; (8012120 <ResetMacParameters+0x1d0>)
 801203e:	4a39      	ldr	r2, [pc, #228]	; (8012124 <ResetMacParameters+0x1d4>)
 8012040:	589b      	ldr	r3, [r3, r2]
 8012042:	4a37      	ldr	r2, [pc, #220]	; (8012120 <ResetMacParameters+0x1d0>)
 8012044:	4937      	ldr	r1, [pc, #220]	; (8012124 <ResetMacParameters+0x1d4>)
 8012046:	5852      	ldr	r2, [r2, r1]
 8012048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801204a:	21bc      	movs	r1, #188	; 0xbc
 801204c:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.AntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 801204e:	4b34      	ldr	r3, [pc, #208]	; (8012120 <ResetMacParameters+0x1d0>)
 8012050:	4a34      	ldr	r2, [pc, #208]	; (8012124 <ResetMacParameters+0x1d4>)
 8012052:	589b      	ldr	r3, [r3, r2]
 8012054:	4a32      	ldr	r2, [pc, #200]	; (8012120 <ResetMacParameters+0x1d0>)
 8012056:	4933      	ldr	r1, [pc, #204]	; (8012124 <ResetMacParameters+0x1d4>)
 8012058:	5852      	ldr	r2, [r2, r1]
 801205a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801205c:	21c0      	movs	r1, #192	; 0xc0
 801205e:	5053      	str	r3, [r2, r1]

    MacCtx.NodeAckRequested = false;
 8012060:	4b2f      	ldr	r3, [pc, #188]	; (8012120 <ResetMacParameters+0x1d0>)
 8012062:	4a34      	ldr	r2, [pc, #208]	; (8012134 <ResetMacParameters+0x1e4>)
 8012064:	2100      	movs	r1, #0
 8012066:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->SrvAckRequested = false;
 8012068:	4b2d      	ldr	r3, [pc, #180]	; (8012120 <ResetMacParameters+0x1d0>)
 801206a:	4a2e      	ldr	r2, [pc, #184]	; (8012124 <ResetMacParameters+0x1d4>)
 801206c:	589a      	ldr	r2, [r3, r2]
 801206e:	234c      	movs	r3, #76	; 0x4c
 8012070:	33ff      	adds	r3, #255	; 0xff
 8012072:	2100      	movs	r1, #0
 8012074:	54d1      	strb	r1, [r2, r3]

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8012076:	003b      	movs	r3, r7
 8012078:	2201      	movs	r2, #1
 801207a:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = NULL;
 801207c:	003b      	movs	r3, r7
 801207e:	2200      	movs	r2, #0
 8012080:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8012082:	4b27      	ldr	r3, [pc, #156]	; (8012120 <ResetMacParameters+0x1d0>)
 8012084:	4a27      	ldr	r2, [pc, #156]	; (8012124 <ResetMacParameters+0x1d4>)
 8012086:	589b      	ldr	r3, [r3, r2]
 8012088:	781b      	ldrb	r3, [r3, #0]
 801208a:	003a      	movs	r2, r7
 801208c:	0011      	movs	r1, r2
 801208e:	0018      	movs	r0, r3
 8012090:	f004 fe05 	bl	8016c9e <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8012094:	4b22      	ldr	r3, [pc, #136]	; (8012120 <ResetMacParameters+0x1d0>)
 8012096:	4a28      	ldr	r2, [pc, #160]	; (8012138 <ResetMacParameters+0x1e8>)
 8012098:	2100      	movs	r1, #0
 801209a:	5499      	strb	r1, [r3, r2]

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 801209c:	4b20      	ldr	r3, [pc, #128]	; (8012120 <ResetMacParameters+0x1d0>)
 801209e:	4a26      	ldr	r2, [pc, #152]	; (8012138 <ResetMacParameters+0x1e8>)
 80120a0:	5c99      	ldrb	r1, [r3, r2]
 80120a2:	4a1f      	ldr	r2, [pc, #124]	; (8012120 <ResetMacParameters+0x1d0>)
 80120a4:	23f3      	movs	r3, #243	; 0xf3
 80120a6:	009b      	lsls	r3, r3, #2
 80120a8:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 80120aa:	4b1d      	ldr	r3, [pc, #116]	; (8012120 <ResetMacParameters+0x1d0>)
 80120ac:	4a1d      	ldr	r2, [pc, #116]	; (8012124 <ResetMacParameters+0x1d4>)
 80120ae:	589b      	ldr	r3, [r3, r2]
 80120b0:	22a8      	movs	r2, #168	; 0xa8
 80120b2:	5899      	ldr	r1, [r3, r2]
 80120b4:	4a1a      	ldr	r2, [pc, #104]	; (8012120 <ResetMacParameters+0x1d0>)
 80120b6:	23f4      	movs	r3, #244	; 0xf4
 80120b8:	009b      	lsls	r3, r3, #2
 80120ba:	50d1      	str	r1, [r2, r3]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80120bc:	4b18      	ldr	r3, [pc, #96]	; (8012120 <ResetMacParameters+0x1d0>)
 80120be:	4a19      	ldr	r2, [pc, #100]	; (8012124 <ResetMacParameters+0x1d4>)
 80120c0:	589b      	ldr	r3, [r3, r2]
 80120c2:	22b9      	movs	r2, #185	; 0xb9
 80120c4:	5c99      	ldrb	r1, [r3, r2]
 80120c6:	4a16      	ldr	r2, [pc, #88]	; (8012120 <ResetMacParameters+0x1d0>)
 80120c8:	23f7      	movs	r3, #247	; 0xf7
 80120ca:	009b      	lsls	r3, r3, #2
 80120cc:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 80120ce:	4b14      	ldr	r3, [pc, #80]	; (8012120 <ResetMacParameters+0x1d0>)
 80120d0:	4a14      	ldr	r2, [pc, #80]	; (8012124 <ResetMacParameters+0x1d4>)
 80120d2:	589b      	ldr	r3, [r3, r2]
 80120d4:	22ca      	movs	r2, #202	; 0xca
 80120d6:	5c99      	ldrb	r1, [r3, r2]
 80120d8:	4b11      	ldr	r3, [pc, #68]	; (8012120 <ResetMacParameters+0x1d0>)
 80120da:	4a18      	ldr	r2, [pc, #96]	; (801213c <ResetMacParameters+0x1ec>)
 80120dc:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxContinuous = false;
 80120de:	4b10      	ldr	r3, [pc, #64]	; (8012120 <ResetMacParameters+0x1d0>)
 80120e0:	4a17      	ldr	r2, [pc, #92]	; (8012140 <ResetMacParameters+0x1f0>)
 80120e2:	2100      	movs	r1, #0
 80120e4:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 80120e6:	4b0e      	ldr	r3, [pc, #56]	; (8012120 <ResetMacParameters+0x1d0>)
 80120e8:	4a16      	ldr	r2, [pc, #88]	; (8012144 <ResetMacParameters+0x1f4>)
 80120ea:	2101      	movs	r1, #1
 80120ec:	5499      	strb	r1, [r3, r2]

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 80120ee:	480c      	ldr	r0, [pc, #48]	; (8012120 <ResetMacParameters+0x1d0>)
 80120f0:	23f8      	movs	r3, #248	; 0xf8
 80120f2:	009b      	lsls	r3, r3, #2
 80120f4:	490a      	ldr	r1, [pc, #40]	; (8012120 <ResetMacParameters+0x1d0>)
 80120f6:	22f3      	movs	r2, #243	; 0xf3
 80120f8:	0092      	lsls	r2, r2, #2
 80120fa:	18c3      	adds	r3, r0, r3
 80120fc:	188a      	adds	r2, r1, r2
 80120fe:	ca13      	ldmia	r2!, {r0, r1, r4}
 8012100:	c313      	stmia	r3!, {r0, r1, r4}
 8012102:	ca03      	ldmia	r2!, {r0, r1}
 8012104:	c303      	stmia	r3!, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8012106:	4b06      	ldr	r3, [pc, #24]	; (8012120 <ResetMacParameters+0x1d0>)
 8012108:	4a0f      	ldr	r2, [pc, #60]	; (8012148 <ResetMacParameters+0x1f8>)
 801210a:	2101      	movs	r1, #1
 801210c:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801210e:	4b04      	ldr	r3, [pc, #16]	; (8012120 <ResetMacParameters+0x1d0>)
 8012110:	4a0e      	ldr	r2, [pc, #56]	; (801214c <ResetMacParameters+0x1fc>)
 8012112:	2102      	movs	r1, #2
 8012114:	5499      	strb	r1, [r3, r2]

}
 8012116:	46c0      	nop			; (mov r8, r8)
 8012118:	46bd      	mov	sp, r7
 801211a:	b003      	add	sp, #12
 801211c:	bd90      	pop	{r4, r7, pc}
 801211e:	46c0      	nop			; (mov r8, r8)
 8012120:	200005b4 	.word	0x200005b4
 8012124:	00000484 	.word	0x00000484
 8012128:	00000411 	.word	0x00000411
 801212c:	00000412 	.word	0x00000412
 8012130:	00000413 	.word	0x00000413
 8012134:	00000414 	.word	0x00000414
 8012138:	00000415 	.word	0x00000415
 801213c:	000003dd 	.word	0x000003dd
 8012140:	000003de 	.word	0x000003de
 8012144:	000003df 	.word	0x000003df
 8012148:	000003f2 	.word	0x000003f2
 801214c:	000003f3 	.word	0x000003f3

08012150 <RxWindowSetup>:
 *
 * \param [IN] rxTimer  Window timer to be topped.
 * \param [IN] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8012150:	b580      	push	{r7, lr}
 8012152:	b082      	sub	sp, #8
 8012154:	af00      	add	r7, sp, #0
 8012156:	6078      	str	r0, [r7, #4]
 8012158:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	0018      	movs	r0, r3
 801215e:	f00a fda9 	bl	801ccb4 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 8012162:	4b10      	ldr	r3, [pc, #64]	; (80121a4 <RxWindowSetup+0x54>)
 8012164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012166:	4798      	blx	r3

    if( RegionRxConfig( MacCtx.NvmCtx->Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8012168:	4b0f      	ldr	r3, [pc, #60]	; (80121a8 <RxWindowSetup+0x58>)
 801216a:	4a10      	ldr	r2, [pc, #64]	; (80121ac <RxWindowSetup+0x5c>)
 801216c:	589b      	ldr	r3, [r3, r2]
 801216e:	781b      	ldrb	r3, [r3, #0]
 8012170:	4a0f      	ldr	r2, [pc, #60]	; (80121b0 <RxWindowSetup+0x60>)
 8012172:	6839      	ldr	r1, [r7, #0]
 8012174:	0018      	movs	r0, r3
 8012176:	f004 fe29 	bl	8016dcc <RegionRxConfig>
 801217a:	1e03      	subs	r3, r0, #0
 801217c:	d00e      	beq.n	801219c <RxWindowSetup+0x4c>
    {
        Radio.Rx( MacCtx.NvmCtx->MacParams.MaxRxWindow );
 801217e:	4b09      	ldr	r3, [pc, #36]	; (80121a4 <RxWindowSetup+0x54>)
 8012180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012182:	4a09      	ldr	r2, [pc, #36]	; (80121a8 <RxWindowSetup+0x58>)
 8012184:	4909      	ldr	r1, [pc, #36]	; (80121ac <RxWindowSetup+0x5c>)
 8012186:	5852      	ldr	r2, [r2, r1]
 8012188:	2190      	movs	r1, #144	; 0x90
 801218a:	5852      	ldr	r2, [r2, r1]
 801218c:	0010      	movs	r0, r2
 801218e:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8012190:	683b      	ldr	r3, [r7, #0]
 8012192:	7cd9      	ldrb	r1, [r3, #19]
 8012194:	4a04      	ldr	r2, [pc, #16]	; (80121a8 <RxWindowSetup+0x58>)
 8012196:	2390      	movs	r3, #144	; 0x90
 8012198:	00db      	lsls	r3, r3, #3
 801219a:	54d1      	strb	r1, [r2, r3]
    }
}
 801219c:	46c0      	nop			; (mov r8, r8)
 801219e:	46bd      	mov	sp, r7
 80121a0:	b002      	add	sp, #8
 80121a2:	bd80      	pop	{r7, pc}
 80121a4:	0801fb64 	.word	0x0801fb64
 80121a8:	200005b4 	.word	0x200005b4
 80121ac:	00000484 	.word	0x00000484
 80121b0:	200009d4 	.word	0x200009d4

080121b4 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 80121b4:	b590      	push	{r4, r7, lr}
 80121b6:	b083      	sub	sp, #12
 80121b8:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 80121ba:	4b1d      	ldr	r3, [pc, #116]	; (8012230 <OpenContinuousRxCWindow+0x7c>)
 80121bc:	4a1d      	ldr	r2, [pc, #116]	; (8012234 <OpenContinuousRxCWindow+0x80>)
 80121be:	589b      	ldr	r3, [r3, r2]
 80121c0:	7818      	ldrb	r0, [r3, #0]
                                     MacCtx.NvmCtx->MacParams.RxCChannel.Datarate,
 80121c2:	4b1b      	ldr	r3, [pc, #108]	; (8012230 <OpenContinuousRxCWindow+0x7c>)
 80121c4:	4a1b      	ldr	r2, [pc, #108]	; (8012234 <OpenContinuousRxCWindow+0x80>)
 80121c6:	589b      	ldr	r3, [r3, r2]
 80121c8:	22b4      	movs	r2, #180	; 0xb4
 80121ca:	5c9b      	ldrb	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 80121cc:	b259      	sxtb	r1, r3
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 80121ce:	4b18      	ldr	r3, [pc, #96]	; (8012230 <OpenContinuousRxCWindow+0x7c>)
 80121d0:	4a18      	ldr	r2, [pc, #96]	; (8012234 <OpenContinuousRxCWindow+0x80>)
 80121d2:	589b      	ldr	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 80121d4:	228c      	movs	r2, #140	; 0x8c
 80121d6:	5c9a      	ldrb	r2, [r3, r2]
                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 80121d8:	4b15      	ldr	r3, [pc, #84]	; (8012230 <OpenContinuousRxCWindow+0x7c>)
 80121da:	4c16      	ldr	r4, [pc, #88]	; (8012234 <OpenContinuousRxCWindow+0x80>)
 80121dc:	591b      	ldr	r3, [r3, r4]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 80121de:	2488      	movs	r4, #136	; 0x88
 80121e0:	591c      	ldr	r4, [r3, r4]
 80121e2:	4b15      	ldr	r3, [pc, #84]	; (8012238 <OpenContinuousRxCWindow+0x84>)
 80121e4:	9300      	str	r3, [sp, #0]
 80121e6:	0023      	movs	r3, r4
 80121e8:	f004 fdcc 	bl	8016d84 <RegionComputeRxWindowParameters>
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80121ec:	4b10      	ldr	r3, [pc, #64]	; (8012230 <OpenContinuousRxCWindow+0x7c>)
 80121ee:	4a13      	ldr	r2, [pc, #76]	; (801223c <OpenContinuousRxCWindow+0x88>)
 80121f0:	2102      	movs	r1, #2
 80121f2:	5499      	strb	r1, [r3, r2]
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80121f4:	4b0e      	ldr	r3, [pc, #56]	; (8012230 <OpenContinuousRxCWindow+0x7c>)
 80121f6:	4a12      	ldr	r2, [pc, #72]	; (8012240 <OpenContinuousRxCWindow+0x8c>)
 80121f8:	2101      	movs	r1, #1
 80121fa:	5499      	strb	r1, [r3, r2]

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80121fc:	4b0c      	ldr	r3, [pc, #48]	; (8012230 <OpenContinuousRxCWindow+0x7c>)
 80121fe:	4a0d      	ldr	r2, [pc, #52]	; (8012234 <OpenContinuousRxCWindow+0x80>)
 8012200:	589b      	ldr	r3, [r3, r2]
 8012202:	781b      	ldrb	r3, [r3, #0]
 8012204:	4a0f      	ldr	r2, [pc, #60]	; (8012244 <OpenContinuousRxCWindow+0x90>)
 8012206:	490c      	ldr	r1, [pc, #48]	; (8012238 <OpenContinuousRxCWindow+0x84>)
 8012208:	0018      	movs	r0, r3
 801220a:	f004 fddf 	bl	8016dcc <RegionRxConfig>
 801220e:	1e03      	subs	r3, r0, #0
 8012210:	d00a      	beq.n	8012228 <OpenContinuousRxCWindow+0x74>
    {
        Radio.Rx( 0 ); // Continuous mode
 8012212:	4b0d      	ldr	r3, [pc, #52]	; (8012248 <OpenContinuousRxCWindow+0x94>)
 8012214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012216:	2000      	movs	r0, #0
 8012218:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 801221a:	4b05      	ldr	r3, [pc, #20]	; (8012230 <OpenContinuousRxCWindow+0x7c>)
 801221c:	4a07      	ldr	r2, [pc, #28]	; (801223c <OpenContinuousRxCWindow+0x88>)
 801221e:	5c99      	ldrb	r1, [r3, r2]
 8012220:	4a03      	ldr	r2, [pc, #12]	; (8012230 <OpenContinuousRxCWindow+0x7c>)
 8012222:	2390      	movs	r3, #144	; 0x90
 8012224:	00db      	lsls	r3, r3, #3
 8012226:	54d1      	strb	r1, [r2, r3]
    }
}
 8012228:	46c0      	nop			; (mov r8, r8)
 801222a:	46bd      	mov	sp, r7
 801222c:	b001      	add	sp, #4
 801222e:	bd90      	pop	{r4, r7, pc}
 8012230:	200005b4 	.word	0x200005b4
 8012234:	00000484 	.word	0x00000484
 8012238:	20000994 	.word	0x20000994
 801223c:	000003f3 	.word	0x000003f3
 8012240:	000003f2 	.word	0x000003f2
 8012244:	200009d4 	.word	0x200009d4
 8012248:	0801fb64 	.word	0x0801fb64

0801224c <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 801224c:	b590      	push	{r4, r7, lr}
 801224e:	b089      	sub	sp, #36	; 0x24
 8012250:	af00      	add	r7, sp, #0
 8012252:	60f8      	str	r0, [r7, #12]
 8012254:	60b9      	str	r1, [r7, #8]
 8012256:	603b      	str	r3, [r7, #0]
 8012258:	1dfb      	adds	r3, r7, #7
 801225a:	701a      	strb	r2, [r3, #0]
    MacCtx.PktBufferLen = 0;
 801225c:	4b9a      	ldr	r3, [pc, #616]	; (80124c8 <PrepareFrame+0x27c>)
 801225e:	2200      	movs	r2, #0
 8012260:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 8012262:	4b99      	ldr	r3, [pc, #612]	; (80124c8 <PrepareFrame+0x27c>)
 8012264:	4a99      	ldr	r2, [pc, #612]	; (80124cc <PrepareFrame+0x280>)
 8012266:	2100      	movs	r1, #0
 8012268:	5499      	strb	r1, [r3, r2]
    uint32_t fCntUp = 0;
 801226a:	2300      	movs	r3, #0
 801226c:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 801226e:	2300      	movs	r3, #0
 8012270:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 8012272:	231f      	movs	r3, #31
 8012274:	18fb      	adds	r3, r7, r3
 8012276:	2200      	movs	r2, #0
 8012278:	701a      	strb	r2, [r3, #0]

    if( fBuffer == NULL )
 801227a:	683b      	ldr	r3, [r7, #0]
 801227c:	2b00      	cmp	r3, #0
 801227e:	d103      	bne.n	8012288 <PrepareFrame+0x3c>
    {
        fBufferSize = 0;
 8012280:	2330      	movs	r3, #48	; 0x30
 8012282:	18fb      	adds	r3, r7, r3
 8012284:	2200      	movs	r2, #0
 8012286:	801a      	strh	r2, [r3, #0]
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8012288:	2430      	movs	r4, #48	; 0x30
 801228a:	193b      	adds	r3, r7, r4
 801228c:	881a      	ldrh	r2, [r3, #0]
 801228e:	6839      	ldr	r1, [r7, #0]
 8012290:	4b8f      	ldr	r3, [pc, #572]	; (80124d0 <PrepareFrame+0x284>)
 8012292:	0018      	movs	r0, r3
 8012294:	f007 f956 	bl	8019544 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8012298:	193b      	adds	r3, r7, r4
 801229a:	881b      	ldrh	r3, [r3, #0]
 801229c:	b2d9      	uxtb	r1, r3
 801229e:	4b8a      	ldr	r3, [pc, #552]	; (80124c8 <PrepareFrame+0x27c>)
 80122a0:	4a8c      	ldr	r2, [pc, #560]	; (80124d4 <PrepareFrame+0x288>)
 80122a2:	5499      	strb	r1, [r3, r2]
    MacCtx.PktBuffer[0] = macHdr->Value;
 80122a4:	68fb      	ldr	r3, [r7, #12]
 80122a6:	781a      	ldrb	r2, [r3, #0]
 80122a8:	4b87      	ldr	r3, [pc, #540]	; (80124c8 <PrepareFrame+0x27c>)
 80122aa:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 80122ac:	68fb      	ldr	r3, [r7, #12]
 80122ae:	781b      	ldrb	r3, [r3, #0]
 80122b0:	061b      	lsls	r3, r3, #24
 80122b2:	0f5b      	lsrs	r3, r3, #29
 80122b4:	b2db      	uxtb	r3, r3
 80122b6:	2b07      	cmp	r3, #7
 80122b8:	d100      	bne.n	80122bc <PrepareFrame+0x70>
 80122ba:	e0e0      	b.n	801247e <PrepareFrame+0x232>
 80122bc:	dd00      	ble.n	80122c0 <PrepareFrame+0x74>
 80122be:	e0f8      	b.n	80124b2 <PrepareFrame+0x266>
 80122c0:	2b02      	cmp	r3, #2
 80122c2:	d006      	beq.n	80122d2 <PrepareFrame+0x86>
 80122c4:	2b04      	cmp	r3, #4
 80122c6:	d000      	beq.n	80122ca <PrepareFrame+0x7e>
 80122c8:	e0f3      	b.n	80124b2 <PrepareFrame+0x266>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 80122ca:	4b7f      	ldr	r3, [pc, #508]	; (80124c8 <PrepareFrame+0x27c>)
 80122cc:	4a7f      	ldr	r2, [pc, #508]	; (80124cc <PrepareFrame+0x280>)
 80122ce:	2101      	movs	r1, #1
 80122d0:	5499      	strb	r1, [r3, r2]
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 80122d2:	4a7d      	ldr	r2, [pc, #500]	; (80124c8 <PrepareFrame+0x27c>)
 80122d4:	2382      	movs	r3, #130	; 0x82
 80122d6:	005b      	lsls	r3, r3, #1
 80122d8:	2104      	movs	r1, #4
 80122da:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 80122dc:	4a7a      	ldr	r2, [pc, #488]	; (80124c8 <PrepareFrame+0x27c>)
 80122de:	2384      	movs	r3, #132	; 0x84
 80122e0:	005b      	lsls	r3, r3, #1
 80122e2:	497d      	ldr	r1, [pc, #500]	; (80124d8 <PrepareFrame+0x28c>)
 80122e4:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 80122e6:	4a78      	ldr	r2, [pc, #480]	; (80124c8 <PrepareFrame+0x27c>)
 80122e8:	2386      	movs	r3, #134	; 0x86
 80122ea:	005b      	lsls	r3, r3, #1
 80122ec:	21ff      	movs	r1, #255	; 0xff
 80122ee:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	7819      	ldrb	r1, [r3, #0]
 80122f4:	4a74      	ldr	r2, [pc, #464]	; (80124c8 <PrepareFrame+0x27c>)
 80122f6:	230e      	movs	r3, #14
 80122f8:	33ff      	adds	r3, #255	; 0xff
 80122fa:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 80122fc:	4a72      	ldr	r2, [pc, #456]	; (80124c8 <PrepareFrame+0x27c>)
 80122fe:	1df9      	adds	r1, r7, #7
 8012300:	2394      	movs	r3, #148	; 0x94
 8012302:	005b      	lsls	r3, r3, #1
 8012304:	7809      	ldrb	r1, [r1, #0]
 8012306:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 8012308:	4b6f      	ldr	r3, [pc, #444]	; (80124c8 <PrepareFrame+0x27c>)
 801230a:	4a74      	ldr	r2, [pc, #464]	; (80124dc <PrepareFrame+0x290>)
 801230c:	589b      	ldr	r3, [r3, r2]
 801230e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8012310:	4a6d      	ldr	r2, [pc, #436]	; (80124c8 <PrepareFrame+0x27c>)
 8012312:	2388      	movs	r3, #136	; 0x88
 8012314:	005b      	lsls	r3, r3, #1
 8012316:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8012318:	68bb      	ldr	r3, [r7, #8]
 801231a:	7819      	ldrb	r1, [r3, #0]
 801231c:	4a6a      	ldr	r2, [pc, #424]	; (80124c8 <PrepareFrame+0x27c>)
 801231e:	238a      	movs	r3, #138	; 0x8a
 8012320:	005b      	lsls	r3, r3, #1
 8012322:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8012324:	4b68      	ldr	r3, [pc, #416]	; (80124c8 <PrepareFrame+0x27c>)
 8012326:	4a6b      	ldr	r2, [pc, #428]	; (80124d4 <PrepareFrame+0x288>)
 8012328:	5c99      	ldrb	r1, [r3, r2]
 801232a:	4a67      	ldr	r2, [pc, #412]	; (80124c8 <PrepareFrame+0x27c>)
 801232c:	2398      	movs	r3, #152	; 0x98
 801232e:	005b      	lsls	r3, r3, #1
 8012330:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8012332:	4a65      	ldr	r2, [pc, #404]	; (80124c8 <PrepareFrame+0x27c>)
 8012334:	2396      	movs	r3, #150	; 0x96
 8012336:	005b      	lsls	r3, r3, #1
 8012338:	4965      	ldr	r1, [pc, #404]	; (80124d0 <PrepareFrame+0x284>)
 801233a:	50d1      	str	r1, [r2, r3]

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 801233c:	2318      	movs	r3, #24
 801233e:	18fb      	adds	r3, r7, r3
 8012340:	0018      	movs	r0, r3
 8012342:	f003 fce5 	bl	8015d10 <LoRaMacCryptoGetFCntUp>
 8012346:	1e03      	subs	r3, r0, #0
 8012348:	d001      	beq.n	801234e <PrepareFrame+0x102>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 801234a:	2312      	movs	r3, #18
 801234c:	e0b7      	b.n	80124be <PrepareFrame+0x272>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 801234e:	69bb      	ldr	r3, [r7, #24]
 8012350:	b299      	uxth	r1, r3
 8012352:	4a5d      	ldr	r2, [pc, #372]	; (80124c8 <PrepareFrame+0x27c>)
 8012354:	238b      	movs	r3, #139	; 0x8b
 8012356:	005b      	lsls	r3, r3, #1
 8012358:	52d1      	strh	r1, [r2, r3]

            // Reset confirm parameters
            MacCtx.McpsConfirm.NbRetries = 0;
 801235a:	4b5b      	ldr	r3, [pc, #364]	; (80124c8 <PrepareFrame+0x27c>)
 801235c:	4a60      	ldr	r2, [pc, #384]	; (80124e0 <PrepareFrame+0x294>)
 801235e:	2100      	movs	r1, #0
 8012360:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.AckReceived = false;
 8012362:	4a59      	ldr	r2, [pc, #356]	; (80124c8 <PrepareFrame+0x27c>)
 8012364:	2388      	movs	r3, #136	; 0x88
 8012366:	00db      	lsls	r3, r3, #3
 8012368:	2100      	movs	r1, #0
 801236a:	54d1      	strb	r1, [r2, r3]
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 801236c:	69b9      	ldr	r1, [r7, #24]
 801236e:	4a56      	ldr	r2, [pc, #344]	; (80124c8 <PrepareFrame+0x27c>)
 8012370:	2389      	movs	r3, #137	; 0x89
 8012372:	00db      	lsls	r3, r3, #3
 8012374:	50d1      	str	r1, [r2, r3]

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8012376:	2314      	movs	r3, #20
 8012378:	18fb      	adds	r3, r7, r3
 801237a:	0018      	movs	r0, r3
 801237c:	f002 fd7a 	bl	8014e74 <LoRaMacCommandsGetSizeSerializedCmds>
 8012380:	1e03      	subs	r3, r0, #0
 8012382:	d001      	beq.n	8012388 <PrepareFrame+0x13c>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012384:	2313      	movs	r3, #19
 8012386:	e09a      	b.n	80124be <PrepareFrame+0x272>
            }

            if( macCmdsSize > 0 )
 8012388:	697b      	ldr	r3, [r7, #20]
 801238a:	2b00      	cmp	r3, #0
 801238c:	d100      	bne.n	8012390 <PrepareFrame+0x144>
 801238e:	e092      	b.n	80124b6 <PrepareFrame+0x26a>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( MacCtx.NvmCtx->MacParams.ChannelsDatarate );
 8012390:	4b4d      	ldr	r3, [pc, #308]	; (80124c8 <PrepareFrame+0x27c>)
 8012392:	4a52      	ldr	r2, [pc, #328]	; (80124dc <PrepareFrame+0x290>)
 8012394:	589b      	ldr	r3, [r3, r2]
 8012396:	2285      	movs	r2, #133	; 0x85
 8012398:	569b      	ldrsb	r3, [r3, r2]
 801239a:	221f      	movs	r2, #31
 801239c:	18bc      	adds	r4, r7, r2
 801239e:	0018      	movs	r0, r3
 80123a0:	f7fe fb50 	bl	8010a44 <GetMaxAppPayloadWithoutFOptsLength>
 80123a4:	0003      	movs	r3, r0
 80123a6:	7023      	strb	r3, [r4, #0]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 80123a8:	4b47      	ldr	r3, [pc, #284]	; (80124c8 <PrepareFrame+0x27c>)
 80123aa:	4a4a      	ldr	r2, [pc, #296]	; (80124d4 <PrepareFrame+0x288>)
 80123ac:	5c9b      	ldrb	r3, [r3, r2]
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d024      	beq.n	80123fc <PrepareFrame+0x1b0>
 80123b2:	697b      	ldr	r3, [r7, #20]
 80123b4:	2b0f      	cmp	r3, #15
 80123b6:	d821      	bhi.n	80123fc <PrepareFrame+0x1b0>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 80123b8:	4a4a      	ldr	r2, [pc, #296]	; (80124e4 <PrepareFrame+0x298>)
 80123ba:	2314      	movs	r3, #20
 80123bc:	18fb      	adds	r3, r7, r3
 80123be:	0019      	movs	r1, r3
 80123c0:	200f      	movs	r0, #15
 80123c2:	f002 fd6d 	bl	8014ea0 <LoRaMacCommandsSerializeCmds>
 80123c6:	1e03      	subs	r3, r0, #0
 80123c8:	d001      	beq.n	80123ce <PrepareFrame+0x182>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80123ca:	2313      	movs	r3, #19
 80123cc:	e077      	b.n	80124be <PrepareFrame+0x272>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 80123ce:	697b      	ldr	r3, [r7, #20]
 80123d0:	1c1a      	adds	r2, r3, #0
 80123d2:	230f      	movs	r3, #15
 80123d4:	4013      	ands	r3, r2
 80123d6:	b2da      	uxtb	r2, r3
 80123d8:	68bb      	ldr	r3, [r7, #8]
 80123da:	210f      	movs	r1, #15
 80123dc:	400a      	ands	r2, r1
 80123de:	0010      	movs	r0, r2
 80123e0:	781a      	ldrb	r2, [r3, #0]
 80123e2:	210f      	movs	r1, #15
 80123e4:	438a      	bics	r2, r1
 80123e6:	1c11      	adds	r1, r2, #0
 80123e8:	1c02      	adds	r2, r0, #0
 80123ea:	430a      	orrs	r2, r1
 80123ec:	701a      	strb	r2, [r3, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 80123ee:	68bb      	ldr	r3, [r7, #8]
 80123f0:	7819      	ldrb	r1, [r3, #0]
 80123f2:	4a35      	ldr	r2, [pc, #212]	; (80124c8 <PrepareFrame+0x27c>)
 80123f4:	238a      	movs	r3, #138	; 0x8a
 80123f6:	005b      	lsls	r3, r3, #1
 80123f8:	54d1      	strb	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 80123fa:	e05c      	b.n	80124b6 <PrepareFrame+0x26a>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 80123fc:	4b32      	ldr	r3, [pc, #200]	; (80124c8 <PrepareFrame+0x27c>)
 80123fe:	4a35      	ldr	r2, [pc, #212]	; (80124d4 <PrepareFrame+0x288>)
 8012400:	5c9b      	ldrb	r3, [r3, r2]
 8012402:	2b00      	cmp	r3, #0
 8012404:	d015      	beq.n	8012432 <PrepareFrame+0x1e6>
 8012406:	697b      	ldr	r3, [r7, #20]
 8012408:	2b0f      	cmp	r3, #15
 801240a:	d912      	bls.n	8012432 <PrepareFrame+0x1e6>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 801240c:	231f      	movs	r3, #31
 801240e:	18fb      	adds	r3, r7, r3
 8012410:	7818      	ldrb	r0, [r3, #0]
 8012412:	4b2d      	ldr	r3, [pc, #180]	; (80124c8 <PrepareFrame+0x27c>)
 8012414:	4a31      	ldr	r2, [pc, #196]	; (80124dc <PrepareFrame+0x290>)
 8012416:	589b      	ldr	r3, [r3, r2]
 8012418:	33cb      	adds	r3, #203	; 0xcb
 801241a:	001a      	movs	r2, r3
 801241c:	2314      	movs	r3, #20
 801241e:	18fb      	adds	r3, r7, r3
 8012420:	0019      	movs	r1, r3
 8012422:	f002 fd3d 	bl	8014ea0 <LoRaMacCommandsSerializeCmds>
 8012426:	1e03      	subs	r3, r0, #0
 8012428:	d001      	beq.n	801242e <PrepareFrame+0x1e2>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801242a:	2313      	movs	r3, #19
 801242c:	e047      	b.n	80124be <PrepareFrame+0x272>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 801242e:	230a      	movs	r3, #10
 8012430:	e045      	b.n	80124be <PrepareFrame+0x272>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8012432:	231f      	movs	r3, #31
 8012434:	18fb      	adds	r3, r7, r3
 8012436:	7818      	ldrb	r0, [r3, #0]
 8012438:	4b23      	ldr	r3, [pc, #140]	; (80124c8 <PrepareFrame+0x27c>)
 801243a:	4a28      	ldr	r2, [pc, #160]	; (80124dc <PrepareFrame+0x290>)
 801243c:	589b      	ldr	r3, [r3, r2]
 801243e:	33cb      	adds	r3, #203	; 0xcb
 8012440:	001a      	movs	r2, r3
 8012442:	2314      	movs	r3, #20
 8012444:	18fb      	adds	r3, r7, r3
 8012446:	0019      	movs	r1, r3
 8012448:	f002 fd2a 	bl	8014ea0 <LoRaMacCommandsSerializeCmds>
 801244c:	1e03      	subs	r3, r0, #0
 801244e:	d001      	beq.n	8012454 <PrepareFrame+0x208>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012450:	2313      	movs	r3, #19
 8012452:	e034      	b.n	80124be <PrepareFrame+0x272>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8012454:	4a1c      	ldr	r2, [pc, #112]	; (80124c8 <PrepareFrame+0x27c>)
 8012456:	2394      	movs	r3, #148	; 0x94
 8012458:	005b      	lsls	r3, r3, #1
 801245a:	2100      	movs	r1, #0
 801245c:	54d1      	strb	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
 801245e:	4b1a      	ldr	r3, [pc, #104]	; (80124c8 <PrepareFrame+0x27c>)
 8012460:	4a1e      	ldr	r2, [pc, #120]	; (80124dc <PrepareFrame+0x290>)
 8012462:	589b      	ldr	r3, [r3, r2]
 8012464:	33cb      	adds	r3, #203	; 0xcb
 8012466:	0019      	movs	r1, r3
 8012468:	4a17      	ldr	r2, [pc, #92]	; (80124c8 <PrepareFrame+0x27c>)
 801246a:	2396      	movs	r3, #150	; 0x96
 801246c:	005b      	lsls	r3, r3, #1
 801246e:	50d1      	str	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8012470:	697b      	ldr	r3, [r7, #20]
 8012472:	b2d9      	uxtb	r1, r3
 8012474:	4a14      	ldr	r2, [pc, #80]	; (80124c8 <PrepareFrame+0x27c>)
 8012476:	2398      	movs	r3, #152	; 0x98
 8012478:	005b      	lsls	r3, r3, #1
 801247a:	54d1      	strb	r1, [r2, r3]
            break;
 801247c:	e01b      	b.n	80124b6 <PrepareFrame+0x26a>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 801247e:	683b      	ldr	r3, [r7, #0]
 8012480:	2b00      	cmp	r3, #0
 8012482:	d01a      	beq.n	80124ba <PrepareFrame+0x26e>
 8012484:	4b10      	ldr	r3, [pc, #64]	; (80124c8 <PrepareFrame+0x27c>)
 8012486:	4a13      	ldr	r2, [pc, #76]	; (80124d4 <PrepareFrame+0x288>)
 8012488:	5c9b      	ldrb	r3, [r3, r2]
 801248a:	2b00      	cmp	r3, #0
 801248c:	d015      	beq.n	80124ba <PrepareFrame+0x26e>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 801248e:	4816      	ldr	r0, [pc, #88]	; (80124e8 <PrepareFrame+0x29c>)
 8012490:	4b0d      	ldr	r3, [pc, #52]	; (80124c8 <PrepareFrame+0x27c>)
 8012492:	4a10      	ldr	r2, [pc, #64]	; (80124d4 <PrepareFrame+0x288>)
 8012494:	5c9b      	ldrb	r3, [r3, r2]
 8012496:	b29a      	uxth	r2, r3
 8012498:	683b      	ldr	r3, [r7, #0]
 801249a:	0019      	movs	r1, r3
 801249c:	f007 f852 	bl	8019544 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 80124a0:	4b09      	ldr	r3, [pc, #36]	; (80124c8 <PrepareFrame+0x27c>)
 80124a2:	4a0c      	ldr	r2, [pc, #48]	; (80124d4 <PrepareFrame+0x288>)
 80124a4:	5c9b      	ldrb	r3, [r3, r2]
 80124a6:	b29b      	uxth	r3, r3
 80124a8:	3301      	adds	r3, #1
 80124aa:	b29a      	uxth	r2, r3
 80124ac:	4b06      	ldr	r3, [pc, #24]	; (80124c8 <PrepareFrame+0x27c>)
 80124ae:	801a      	strh	r2, [r3, #0]
            }
            break;
 80124b0:	e003      	b.n	80124ba <PrepareFrame+0x26e>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80124b2:	2302      	movs	r3, #2
 80124b4:	e003      	b.n	80124be <PrepareFrame+0x272>
            break;
 80124b6:	46c0      	nop			; (mov r8, r8)
 80124b8:	e000      	b.n	80124bc <PrepareFrame+0x270>
            break;
 80124ba:	46c0      	nop			; (mov r8, r8)
    }

    return LORAMAC_STATUS_OK;
 80124bc:	2300      	movs	r3, #0
}
 80124be:	0018      	movs	r0, r3
 80124c0:	46bd      	mov	sp, r7
 80124c2:	b009      	add	sp, #36	; 0x24
 80124c4:	bd90      	pop	{r4, r7, pc}
 80124c6:	46c0      	nop			; (mov r8, r8)
 80124c8:	200005b4 	.word	0x200005b4
 80124cc:	00000414 	.word	0x00000414
 80124d0:	200006ec 	.word	0x200006ec
 80124d4:	00000237 	.word	0x00000237
 80124d8:	200005b6 	.word	0x200005b6
 80124dc:	00000484 	.word	0x00000484
 80124e0:	00000441 	.word	0x00000441
 80124e4:	200006cc 	.word	0x200006cc
 80124e8:	200005b7 	.word	0x200005b7

080124ec <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 80124ec:	b5b0      	push	{r4, r5, r7, lr}
 80124ee:	b08a      	sub	sp, #40	; 0x28
 80124f0:	af00      	add	r7, sp, #0
 80124f2:	0002      	movs	r2, r0
 80124f4:	1dfb      	adds	r3, r7, #7
 80124f6:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80124f8:	2327      	movs	r3, #39	; 0x27
 80124fa:	18fb      	adds	r3, r7, r3
 80124fc:	2203      	movs	r2, #3
 80124fe:	701a      	strb	r2, [r3, #0]
    TxConfigParams_t txConfig;
    int8_t txPower = 10;
 8012500:	240f      	movs	r4, #15
 8012502:	193b      	adds	r3, r7, r4
 8012504:	220a      	movs	r2, #10
 8012506:	701a      	strb	r2, [r3, #0]

    txConfig.Channel = channel;
 8012508:	2110      	movs	r1, #16
 801250a:	187b      	adds	r3, r7, r1
 801250c:	1dfa      	adds	r2, r7, #7
 801250e:	7812      	ldrb	r2, [r2, #0]
 8012510:	701a      	strb	r2, [r3, #0]
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8012512:	4b57      	ldr	r3, [pc, #348]	; (8012670 <SendFrameOnChannel+0x184>)
 8012514:	4a57      	ldr	r2, [pc, #348]	; (8012674 <SendFrameOnChannel+0x188>)
 8012516:	589b      	ldr	r3, [r3, r2]
 8012518:	2285      	movs	r2, #133	; 0x85
 801251a:	569a      	ldrsb	r2, [r3, r2]
 801251c:	187b      	adds	r3, r7, r1
 801251e:	705a      	strb	r2, [r3, #1]
    txConfig.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8012520:	4b53      	ldr	r3, [pc, #332]	; (8012670 <SendFrameOnChannel+0x184>)
 8012522:	4a54      	ldr	r2, [pc, #336]	; (8012674 <SendFrameOnChannel+0x188>)
 8012524:	589b      	ldr	r3, [r3, r2]
 8012526:	2284      	movs	r2, #132	; 0x84
 8012528:	569a      	ldrsb	r2, [r3, r2]
 801252a:	187b      	adds	r3, r7, r1
 801252c:	709a      	strb	r2, [r3, #2]
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 801252e:	4b50      	ldr	r3, [pc, #320]	; (8012670 <SendFrameOnChannel+0x184>)
 8012530:	4a50      	ldr	r2, [pc, #320]	; (8012674 <SendFrameOnChannel+0x188>)
 8012532:	589b      	ldr	r3, [r3, r2]
 8012534:	22bc      	movs	r2, #188	; 0xbc
 8012536:	589a      	ldr	r2, [r3, r2]
 8012538:	187b      	adds	r3, r7, r1
 801253a:	605a      	str	r2, [r3, #4]
    txConfig.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 801253c:	4b4c      	ldr	r3, [pc, #304]	; (8012670 <SendFrameOnChannel+0x184>)
 801253e:	4a4d      	ldr	r2, [pc, #308]	; (8012674 <SendFrameOnChannel+0x188>)
 8012540:	589b      	ldr	r3, [r3, r2]
 8012542:	22c0      	movs	r2, #192	; 0xc0
 8012544:	589a      	ldr	r2, [r3, r2]
 8012546:	187b      	adds	r3, r7, r1
 8012548:	609a      	str	r2, [r3, #8]
    txConfig.PktLen = MacCtx.PktBufferLen;
 801254a:	4b49      	ldr	r3, [pc, #292]	; (8012670 <SendFrameOnChannel+0x184>)
 801254c:	881a      	ldrh	r2, [r3, #0]
 801254e:	187b      	adds	r3, r7, r1
 8012550:	819a      	strh	r2, [r3, #12]

    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8012552:	4b47      	ldr	r3, [pc, #284]	; (8012670 <SendFrameOnChannel+0x184>)
 8012554:	4a47      	ldr	r2, [pc, #284]	; (8012674 <SendFrameOnChannel+0x188>)
 8012556:	589b      	ldr	r3, [r3, r2]
 8012558:	7818      	ldrb	r0, [r3, #0]
 801255a:	4b47      	ldr	r3, [pc, #284]	; (8012678 <SendFrameOnChannel+0x18c>)
 801255c:	193a      	adds	r2, r7, r4
 801255e:	1879      	adds	r1, r7, r1
 8012560:	f004 fc4e 	bl	8016e00 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012564:	4b42      	ldr	r3, [pc, #264]	; (8012670 <SendFrameOnChannel+0x184>)
 8012566:	4a45      	ldr	r2, [pc, #276]	; (801267c <SendFrameOnChannel+0x190>)
 8012568:	2101      	movs	r1, #1
 801256a:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 801256c:	4b40      	ldr	r3, [pc, #256]	; (8012670 <SendFrameOnChannel+0x184>)
 801256e:	4a41      	ldr	r2, [pc, #260]	; (8012674 <SendFrameOnChannel+0x188>)
 8012570:	589b      	ldr	r3, [r3, r2]
 8012572:	2285      	movs	r2, #133	; 0x85
 8012574:	569b      	ldrsb	r3, [r3, r2]
 8012576:	b2d9      	uxtb	r1, r3
 8012578:	4b3d      	ldr	r3, [pc, #244]	; (8012670 <SendFrameOnChannel+0x184>)
 801257a:	4a41      	ldr	r2, [pc, #260]	; (8012680 <SendFrameOnChannel+0x194>)
 801257c:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.TxPower = txPower;
 801257e:	193b      	adds	r3, r7, r4
 8012580:	2100      	movs	r1, #0
 8012582:	5659      	ldrsb	r1, [r3, r1]
 8012584:	4b3a      	ldr	r3, [pc, #232]	; (8012670 <SendFrameOnChannel+0x184>)
 8012586:	4a3f      	ldr	r2, [pc, #252]	; (8012684 <SendFrameOnChannel+0x198>)
 8012588:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.Channel = channel;
 801258a:	1dfb      	adds	r3, r7, #7
 801258c:	781a      	ldrb	r2, [r3, #0]
 801258e:	4b38      	ldr	r3, [pc, #224]	; (8012670 <SendFrameOnChannel+0x184>)
 8012590:	493d      	ldr	r1, [pc, #244]	; (8012688 <SendFrameOnChannel+0x19c>)
 8012592:	505a      	str	r2, [r3, r1]

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8012594:	4a36      	ldr	r2, [pc, #216]	; (8012670 <SendFrameOnChannel+0x184>)
 8012596:	2383      	movs	r3, #131	; 0x83
 8012598:	00db      	lsls	r3, r3, #3
 801259a:	58d2      	ldr	r2, [r2, r3]
 801259c:	4b34      	ldr	r3, [pc, #208]	; (8012670 <SendFrameOnChannel+0x184>)
 801259e:	493b      	ldr	r1, [pc, #236]	; (801268c <SendFrameOnChannel+0x1a0>)
 80125a0:	505a      	str	r2, [r3, r1]
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80125a2:	4a33      	ldr	r2, [pc, #204]	; (8012670 <SendFrameOnChannel+0x184>)
 80125a4:	2383      	movs	r3, #131	; 0x83
 80125a6:	00db      	lsls	r3, r3, #3
 80125a8:	58d2      	ldr	r2, [r2, r3]
 80125aa:	4b31      	ldr	r3, [pc, #196]	; (8012670 <SendFrameOnChannel+0x184>)
 80125ac:	4938      	ldr	r1, [pc, #224]	; (8012690 <SendFrameOnChannel+0x1a4>)
 80125ae:	505a      	str	r2, [r3, r1]

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 80125b0:	f002 f9b0 	bl	8014914 <LoRaMacClassBIsBeaconModeActive>
 80125b4:	1e03      	subs	r3, r0, #0
 80125b6:	d00d      	beq.n	80125d4 <SendFrameOnChannel+0xe8>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 80125b8:	4a2d      	ldr	r2, [pc, #180]	; (8012670 <SendFrameOnChannel+0x184>)
 80125ba:	2383      	movs	r3, #131	; 0x83
 80125bc:	00db      	lsls	r3, r3, #3
 80125be:	58d3      	ldr	r3, [r2, r3]
 80125c0:	0018      	movs	r0, r3
 80125c2:	f002 fa0b 	bl	80149dc <LoRaMacClassBIsUplinkCollision>
 80125c6:	0003      	movs	r3, r0
 80125c8:	623b      	str	r3, [r7, #32]

        if( collisionTime > 0 )
 80125ca:	6a3b      	ldr	r3, [r7, #32]
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d001      	beq.n	80125d4 <SendFrameOnChannel+0xe8>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 80125d0:	2310      	movs	r3, #16
 80125d2:	e048      	b.n	8012666 <SendFrameOnChannel+0x17a>
        }
    }

    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 80125d4:	4b26      	ldr	r3, [pc, #152]	; (8012670 <SendFrameOnChannel+0x184>)
 80125d6:	4a27      	ldr	r2, [pc, #156]	; (8012674 <SendFrameOnChannel+0x188>)
 80125d8:	589b      	ldr	r3, [r3, r2]
 80125da:	227c      	movs	r2, #124	; 0x7c
 80125dc:	5c9b      	ldrb	r3, [r3, r2]
 80125de:	2b01      	cmp	r3, #1
 80125e0:	d101      	bne.n	80125e6 <SendFrameOnChannel+0xfa>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 80125e2:	f002 fa04 	bl	80149ee <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 80125e6:	f002 f9a5 	bl	8014934 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.Channel );
 80125ea:	4b21      	ldr	r3, [pc, #132]	; (8012670 <SendFrameOnChannel+0x184>)
 80125ec:	4a21      	ldr	r2, [pc, #132]	; (8012674 <SendFrameOnChannel+0x188>)
 80125ee:	589b      	ldr	r3, [r3, r2]
 80125f0:	2285      	movs	r2, #133	; 0x85
 80125f2:	569b      	ldrsb	r3, [r3, r2]
 80125f4:	b2da      	uxtb	r2, r3
 80125f6:	4b1e      	ldr	r3, [pc, #120]	; (8012670 <SendFrameOnChannel+0x184>)
 80125f8:	4926      	ldr	r1, [pc, #152]	; (8012694 <SendFrameOnChannel+0x1a8>)
 80125fa:	5c5b      	ldrb	r3, [r3, r1]
 80125fc:	2527      	movs	r5, #39	; 0x27
 80125fe:	197c      	adds	r4, r7, r5
 8012600:	0019      	movs	r1, r3
 8012602:	0010      	movs	r0, r2
 8012604:	f7ff fbea 	bl	8011ddc <SecureFrame>
 8012608:	0003      	movs	r3, r0
 801260a:	7023      	strb	r3, [r4, #0]
    if( status != LORAMAC_STATUS_OK )
 801260c:	197b      	adds	r3, r7, r5
 801260e:	781b      	ldrb	r3, [r3, #0]
 8012610:	2b00      	cmp	r3, #0
 8012612:	d002      	beq.n	801261a <SendFrameOnChannel+0x12e>
    {
        return status;
 8012614:	197b      	adds	r3, r7, r5
 8012616:	781b      	ldrb	r3, [r3, #0]
 8012618:	e025      	b.n	8012666 <SendFrameOnChannel+0x17a>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 801261a:	4a15      	ldr	r2, [pc, #84]	; (8012670 <SendFrameOnChannel+0x184>)
 801261c:	23d0      	movs	r3, #208	; 0xd0
 801261e:	009b      	lsls	r3, r3, #2
 8012620:	58d3      	ldr	r3, [r2, r3]
 8012622:	2202      	movs	r2, #2
 8012624:	431a      	orrs	r2, r3
 8012626:	0011      	movs	r1, r2
 8012628:	4a11      	ldr	r2, [pc, #68]	; (8012670 <SendFrameOnChannel+0x184>)
 801262a:	23d0      	movs	r3, #208	; 0xd0
 801262c:	009b      	lsls	r3, r3, #2
 801262e:	50d1      	str	r1, [r2, r3]
    if( MacCtx.NodeAckRequested == false )
 8012630:	4b0f      	ldr	r3, [pc, #60]	; (8012670 <SendFrameOnChannel+0x184>)
 8012632:	4a19      	ldr	r2, [pc, #100]	; (8012698 <SendFrameOnChannel+0x1ac>)
 8012634:	5c9b      	ldrb	r3, [r3, r2]
 8012636:	2201      	movs	r2, #1
 8012638:	4053      	eors	r3, r2
 801263a:	b2db      	uxtb	r3, r3
 801263c:	2b00      	cmp	r3, #0
 801263e:	d009      	beq.n	8012654 <SendFrameOnChannel+0x168>
    {
        MacCtx.ChannelsNbTransCounter++;
 8012640:	4a0b      	ldr	r2, [pc, #44]	; (8012670 <SendFrameOnChannel+0x184>)
 8012642:	2382      	movs	r3, #130	; 0x82
 8012644:	00db      	lsls	r3, r3, #3
 8012646:	5cd3      	ldrb	r3, [r2, r3]
 8012648:	3301      	adds	r3, #1
 801264a:	b2d9      	uxtb	r1, r3
 801264c:	4a08      	ldr	r2, [pc, #32]	; (8012670 <SendFrameOnChannel+0x184>)
 801264e:	2382      	movs	r3, #130	; 0x82
 8012650:	00db      	lsls	r3, r3, #3
 8012652:	54d1      	strb	r1, [r2, r3]
    }

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8012654:	4b11      	ldr	r3, [pc, #68]	; (801269c <SendFrameOnChannel+0x1b0>)
 8012656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012658:	4a05      	ldr	r2, [pc, #20]	; (8012670 <SendFrameOnChannel+0x184>)
 801265a:	8812      	ldrh	r2, [r2, #0]
 801265c:	b2d1      	uxtb	r1, r2
 801265e:	4a10      	ldr	r2, [pc, #64]	; (80126a0 <SendFrameOnChannel+0x1b4>)
 8012660:	0010      	movs	r0, r2
 8012662:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8012664:	2300      	movs	r3, #0
}
 8012666:	0018      	movs	r0, r3
 8012668:	46bd      	mov	sp, r7
 801266a:	b00a      	add	sp, #40	; 0x28
 801266c:	bdb0      	pop	{r4, r5, r7, pc}
 801266e:	46c0      	nop			; (mov r8, r8)
 8012670:	200005b4 	.word	0x200005b4
 8012674:	00000484 	.word	0x00000484
 8012678:	200009cc 	.word	0x200009cc
 801267c:	0000043d 	.word	0x0000043d
 8012680:	0000043e 	.word	0x0000043e
 8012684:	0000043f 	.word	0x0000043f
 8012688:	0000044c 	.word	0x0000044c
 801268c:	00000444 	.word	0x00000444
 8012690:	00000454 	.word	0x00000454
 8012694:	00000415 	.word	0x00000415
 8012698:	00000414 	.word	0x00000414
 801269c:	0801fb64 	.word	0x0801fb64
 80126a0:	200005b6 	.word	0x200005b6

080126a4 <SetTxContinuousWave>:

static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 80126a4:	b580      	push	{r7, lr}
 80126a6:	b086      	sub	sp, #24
 80126a8:	af00      	add	r7, sp, #0
 80126aa:	0002      	movs	r2, r0
 80126ac:	1dbb      	adds	r3, r7, #6
 80126ae:	801a      	strh	r2, [r3, #0]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 80126b0:	4b1f      	ldr	r3, [pc, #124]	; (8012730 <SetTxContinuousWave+0x8c>)
 80126b2:	4a20      	ldr	r2, [pc, #128]	; (8012734 <SetTxContinuousWave+0x90>)
 80126b4:	5c9a      	ldrb	r2, [r3, r2]
 80126b6:	2108      	movs	r1, #8
 80126b8:	187b      	adds	r3, r7, r1
 80126ba:	701a      	strb	r2, [r3, #0]
    continuousWave.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 80126bc:	4b1c      	ldr	r3, [pc, #112]	; (8012730 <SetTxContinuousWave+0x8c>)
 80126be:	4a1e      	ldr	r2, [pc, #120]	; (8012738 <SetTxContinuousWave+0x94>)
 80126c0:	589b      	ldr	r3, [r3, r2]
 80126c2:	2285      	movs	r2, #133	; 0x85
 80126c4:	569a      	ldrsb	r2, [r3, r2]
 80126c6:	187b      	adds	r3, r7, r1
 80126c8:	705a      	strb	r2, [r3, #1]
    continuousWave.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 80126ca:	4b19      	ldr	r3, [pc, #100]	; (8012730 <SetTxContinuousWave+0x8c>)
 80126cc:	4a1a      	ldr	r2, [pc, #104]	; (8012738 <SetTxContinuousWave+0x94>)
 80126ce:	589b      	ldr	r3, [r3, r2]
 80126d0:	2284      	movs	r2, #132	; 0x84
 80126d2:	569a      	ldrsb	r2, [r3, r2]
 80126d4:	187b      	adds	r3, r7, r1
 80126d6:	709a      	strb	r2, [r3, #2]
    continuousWave.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 80126d8:	4b15      	ldr	r3, [pc, #84]	; (8012730 <SetTxContinuousWave+0x8c>)
 80126da:	4a17      	ldr	r2, [pc, #92]	; (8012738 <SetTxContinuousWave+0x94>)
 80126dc:	589b      	ldr	r3, [r3, r2]
 80126de:	22bc      	movs	r2, #188	; 0xbc
 80126e0:	589a      	ldr	r2, [r3, r2]
 80126e2:	187b      	adds	r3, r7, r1
 80126e4:	605a      	str	r2, [r3, #4]
    continuousWave.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 80126e6:	4b12      	ldr	r3, [pc, #72]	; (8012730 <SetTxContinuousWave+0x8c>)
 80126e8:	4a13      	ldr	r2, [pc, #76]	; (8012738 <SetTxContinuousWave+0x94>)
 80126ea:	589b      	ldr	r3, [r3, r2]
 80126ec:	22c0      	movs	r2, #192	; 0xc0
 80126ee:	589a      	ldr	r2, [r3, r2]
 80126f0:	187b      	adds	r3, r7, r1
 80126f2:	609a      	str	r2, [r3, #8]
    continuousWave.Timeout = timeout;
 80126f4:	187b      	adds	r3, r7, r1
 80126f6:	1dba      	adds	r2, r7, #6
 80126f8:	8812      	ldrh	r2, [r2, #0]
 80126fa:	819a      	strh	r2, [r3, #12]

    RegionSetContinuousWave( MacCtx.NvmCtx->Region, &continuousWave );
 80126fc:	4b0c      	ldr	r3, [pc, #48]	; (8012730 <SetTxContinuousWave+0x8c>)
 80126fe:	4a0e      	ldr	r2, [pc, #56]	; (8012738 <SetTxContinuousWave+0x94>)
 8012700:	589b      	ldr	r3, [r3, r2]
 8012702:	781b      	ldrb	r3, [r3, #0]
 8012704:	187a      	adds	r2, r7, r1
 8012706:	0011      	movs	r1, r2
 8012708:	0018      	movs	r0, r3
 801270a:	f004 fc48 	bl	8016f9e <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 801270e:	4a08      	ldr	r2, [pc, #32]	; (8012730 <SetTxContinuousWave+0x8c>)
 8012710:	23d0      	movs	r3, #208	; 0xd0
 8012712:	009b      	lsls	r3, r3, #2
 8012714:	58d3      	ldr	r3, [r2, r3]
 8012716:	2202      	movs	r2, #2
 8012718:	431a      	orrs	r2, r3
 801271a:	0011      	movs	r1, r2
 801271c:	4a04      	ldr	r2, [pc, #16]	; (8012730 <SetTxContinuousWave+0x8c>)
 801271e:	23d0      	movs	r3, #208	; 0xd0
 8012720:	009b      	lsls	r3, r3, #2
 8012722:	50d1      	str	r1, [r2, r3]

    return LORAMAC_STATUS_OK;
 8012724:	2300      	movs	r3, #0
}
 8012726:	0018      	movs	r0, r3
 8012728:	46bd      	mov	sp, r7
 801272a:	b006      	add	sp, #24
 801272c:	bd80      	pop	{r7, pc}
 801272e:	46c0      	nop			; (mov r8, r8)
 8012730:	200005b4 	.word	0x200005b4
 8012734:	00000415 	.word	0x00000415
 8012738:	00000484 	.word	0x00000484

0801273c <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 801273c:	b580      	push	{r7, lr}
 801273e:	b082      	sub	sp, #8
 8012740:	af00      	add	r7, sp, #0
 8012742:	6039      	str	r1, [r7, #0]
 8012744:	0011      	movs	r1, r2
 8012746:	1dbb      	adds	r3, r7, #6
 8012748:	1c02      	adds	r2, r0, #0
 801274a:	801a      	strh	r2, [r3, #0]
 801274c:	1d7b      	adds	r3, r7, #5
 801274e:	1c0a      	adds	r2, r1, #0
 8012750:	701a      	strb	r2, [r3, #0]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8012752:	4b0c      	ldr	r3, [pc, #48]	; (8012784 <SetTxContinuousWave1+0x48>)
 8012754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012756:	1d7a      	adds	r2, r7, #5
 8012758:	2100      	movs	r1, #0
 801275a:	5651      	ldrsb	r1, [r2, r1]
 801275c:	1dba      	adds	r2, r7, #6
 801275e:	8812      	ldrh	r2, [r2, #0]
 8012760:	6838      	ldr	r0, [r7, #0]
 8012762:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8012764:	4a08      	ldr	r2, [pc, #32]	; (8012788 <SetTxContinuousWave1+0x4c>)
 8012766:	23d0      	movs	r3, #208	; 0xd0
 8012768:	009b      	lsls	r3, r3, #2
 801276a:	58d3      	ldr	r3, [r2, r3]
 801276c:	2202      	movs	r2, #2
 801276e:	431a      	orrs	r2, r3
 8012770:	0011      	movs	r1, r2
 8012772:	4a05      	ldr	r2, [pc, #20]	; (8012788 <SetTxContinuousWave1+0x4c>)
 8012774:	23d0      	movs	r3, #208	; 0xd0
 8012776:	009b      	lsls	r3, r3, #2
 8012778:	50d1      	str	r1, [r2, r3]

    return LORAMAC_STATUS_OK;
 801277a:	2300      	movs	r3, #0
}
 801277c:	0018      	movs	r0, r3
 801277e:	46bd      	mov	sp, r7
 8012780:	b002      	add	sp, #8
 8012782:	bd80      	pop	{r7, pc}
 8012784:	0801fb64 	.word	0x0801fb64
 8012788:	200005b4 	.word	0x200005b4

0801278c <GetCtxs>:

static LoRaMacCtxs_t* GetCtxs( void )
{
 801278c:	b580      	push	{r7, lr}
 801278e:	b082      	sub	sp, #8
 8012790:	af00      	add	r7, sp, #0
    Contexts.MacNvmCtx = &NvmMacCtx;
 8012792:	4b20      	ldr	r3, [pc, #128]	; (8012814 <GetCtxs+0x88>)
 8012794:	4a20      	ldr	r2, [pc, #128]	; (8012818 <GetCtxs+0x8c>)
 8012796:	601a      	str	r2, [r3, #0]
    Contexts.MacNvmCtxSize = sizeof( NvmMacCtx );
 8012798:	4b1e      	ldr	r3, [pc, #120]	; (8012814 <GetCtxs+0x88>)
 801279a:	22b6      	movs	r2, #182	; 0xb6
 801279c:	0052      	lsls	r2, r2, #1
 801279e:	605a      	str	r2, [r3, #4]
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 80127a0:	4b1e      	ldr	r3, [pc, #120]	; (801281c <GetCtxs+0x90>)
 80127a2:	0018      	movs	r0, r3
 80127a4:	f003 faa6 	bl	8015cf4 <LoRaMacCryptoGetNvmCtx>
 80127a8:	0002      	movs	r2, r0
 80127aa:	4b1a      	ldr	r3, [pc, #104]	; (8012814 <GetCtxs+0x88>)
 80127ac:	611a      	str	r2, [r3, #16]
    GetNvmCtxParams_t params ={ 0 };
 80127ae:	2300      	movs	r3, #0
 80127b0:	607b      	str	r3, [r7, #4]
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 80127b2:	4b1b      	ldr	r3, [pc, #108]	; (8012820 <GetCtxs+0x94>)
 80127b4:	4a1b      	ldr	r2, [pc, #108]	; (8012824 <GetCtxs+0x98>)
 80127b6:	589b      	ldr	r3, [r3, r2]
 80127b8:	781b      	ldrb	r3, [r3, #0]
 80127ba:	1d3a      	adds	r2, r7, #4
 80127bc:	0011      	movs	r1, r2
 80127be:	0018      	movs	r0, r3
 80127c0:	f004 fa82 	bl	8016cc8 <RegionGetNvmCtx>
 80127c4:	0002      	movs	r2, r0
 80127c6:	4b13      	ldr	r3, [pc, #76]	; (8012814 <GetCtxs+0x88>)
 80127c8:	609a      	str	r2, [r3, #8]
    Contexts.RegionNvmCtxSize = params.nvmCtxSize;
 80127ca:	687a      	ldr	r2, [r7, #4]
 80127cc:	4b11      	ldr	r3, [pc, #68]	; (8012814 <GetCtxs+0x88>)
 80127ce:	60da      	str	r2, [r3, #12]
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
 80127d0:	4b15      	ldr	r3, [pc, #84]	; (8012828 <GetCtxs+0x9c>)
 80127d2:	0018      	movs	r0, r3
 80127d4:	f7fb f826 	bl	800d824 <SecureElementGetNvmCtx>
 80127d8:	0002      	movs	r2, r0
 80127da:	4b0e      	ldr	r3, [pc, #56]	; (8012814 <GetCtxs+0x88>)
 80127dc:	619a      	str	r2, [r3, #24]
    Contexts.CommandsNvmCtx = LoRaMacCommandsGetNvmCtx( &Contexts.CommandsNvmCtxSize );
 80127de:	4b13      	ldr	r3, [pc, #76]	; (801282c <GetCtxs+0xa0>)
 80127e0:	0018      	movs	r0, r3
 80127e2:	f002 fa63 	bl	8014cac <LoRaMacCommandsGetNvmCtx>
 80127e6:	0002      	movs	r2, r0
 80127e8:	4b0a      	ldr	r3, [pc, #40]	; (8012814 <GetCtxs+0x88>)
 80127ea:	621a      	str	r2, [r3, #32]
    Contexts.ClassBNvmCtx = LoRaMacClassBGetNvmCtx( &Contexts.ClassBNvmCtxSize );
 80127ec:	4b10      	ldr	r3, [pc, #64]	; (8012830 <GetCtxs+0xa4>)
 80127ee:	0018      	movs	r0, r3
 80127f0:	f002 f82a 	bl	8014848 <LoRaMacClassBGetNvmCtx>
 80127f4:	0002      	movs	r2, r0
 80127f6:	4b07      	ldr	r3, [pc, #28]	; (8012814 <GetCtxs+0x88>)
 80127f8:	629a      	str	r2, [r3, #40]	; 0x28
    Contexts.ConfirmQueueNvmCtx = LoRaMacConfirmQueueGetNvmCtx( &Contexts.ConfirmQueueNvmCtxSize );
 80127fa:	4b0e      	ldr	r3, [pc, #56]	; (8012834 <GetCtxs+0xa8>)
 80127fc:	0018      	movs	r0, r3
 80127fe:	f002 fcf5 	bl	80151ec <LoRaMacConfirmQueueGetNvmCtx>
 8012802:	0002      	movs	r2, r0
 8012804:	4b03      	ldr	r3, [pc, #12]	; (8012814 <GetCtxs+0x88>)
 8012806:	631a      	str	r2, [r3, #48]	; 0x30
    return &Contexts;
 8012808:	4b02      	ldr	r3, [pc, #8]	; (8012814 <GetCtxs+0x88>)
}
 801280a:	0018      	movs	r0, r3
 801280c:	46bd      	mov	sp, r7
 801280e:	b002      	add	sp, #8
 8012810:	bd80      	pop	{r7, pc}
 8012812:	46c0      	nop			; (mov r8, r8)
 8012814:	20000bac 	.word	0x20000bac
 8012818:	20000a40 	.word	0x20000a40
 801281c:	20000bc0 	.word	0x20000bc0
 8012820:	200005b4 	.word	0x200005b4
 8012824:	00000484 	.word	0x00000484
 8012828:	20000bc8 	.word	0x20000bc8
 801282c:	20000bd0 	.word	0x20000bd0
 8012830:	20000bd8 	.word	0x20000bd8
 8012834:	20000be0 	.word	0x20000be0

08012838 <RestoreCtxs>:

static LoRaMacStatus_t RestoreCtxs( LoRaMacCtxs_t* contexts )
{
 8012838:	b580      	push	{r7, lr}
 801283a:	b084      	sub	sp, #16
 801283c:	af00      	add	r7, sp, #0
 801283e:	6078      	str	r0, [r7, #4]
    if( contexts == NULL )
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	2b00      	cmp	r3, #0
 8012844:	d101      	bne.n	801284a <RestoreCtxs+0x12>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012846:	2303      	movs	r3, #3
 8012848:	e086      	b.n	8012958 <RestoreCtxs+0x120>
    }
    if( MacCtx.MacState != LORAMAC_STOPPED )
 801284a:	4a45      	ldr	r2, [pc, #276]	; (8012960 <RestoreCtxs+0x128>)
 801284c:	23d0      	movs	r3, #208	; 0xd0
 801284e:	009b      	lsls	r3, r3, #2
 8012850:	58d3      	ldr	r3, [r2, r3]
 8012852:	2b01      	cmp	r3, #1
 8012854:	d001      	beq.n	801285a <RestoreCtxs+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 8012856:	2301      	movs	r3, #1
 8012858:	e07e      	b.n	8012958 <RestoreCtxs+0x120>
    }

    if( contexts->MacNvmCtx != NULL )
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	681b      	ldr	r3, [r3, #0]
 801285e:	2b00      	cmp	r3, #0
 8012860:	d008      	beq.n	8012874 <RestoreCtxs+0x3c>
    {
        memcpy1( ( uint8_t* ) &NvmMacCtx, ( uint8_t* ) contexts->MacNvmCtx, contexts->MacNvmCtxSize );
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	6819      	ldr	r1, [r3, #0]
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	685b      	ldr	r3, [r3, #4]
 801286a:	b29a      	uxth	r2, r3
 801286c:	4b3d      	ldr	r3, [pc, #244]	; (8012964 <RestoreCtxs+0x12c>)
 801286e:	0018      	movs	r0, r3
 8012870:	f006 fe68 	bl	8019544 <memcpy1>
    }

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESTORE_CTX;
 8012874:	2108      	movs	r1, #8
 8012876:	187b      	adds	r3, r7, r1
 8012878:	2203      	movs	r2, #3
 801287a:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = contexts->RegionNvmCtx;
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	689a      	ldr	r2, [r3, #8]
 8012880:	187b      	adds	r3, r7, r1
 8012882:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8012884:	4b36      	ldr	r3, [pc, #216]	; (8012960 <RestoreCtxs+0x128>)
 8012886:	4a38      	ldr	r2, [pc, #224]	; (8012968 <RestoreCtxs+0x130>)
 8012888:	589b      	ldr	r3, [r3, r2]
 801288a:	781b      	ldrb	r3, [r3, #0]
 801288c:	187a      	adds	r2, r7, r1
 801288e:	0011      	movs	r1, r2
 8012890:	0018      	movs	r0, r3
 8012892:	f004 fa04 	bl	8016c9e <RegionInitDefaults>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8012896:	4b32      	ldr	r3, [pc, #200]	; (8012960 <RestoreCtxs+0x128>)
 8012898:	4a34      	ldr	r2, [pc, #208]	; (801296c <RestoreCtxs+0x134>)
 801289a:	5c99      	ldrb	r1, [r3, r2]
 801289c:	4a30      	ldr	r2, [pc, #192]	; (8012960 <RestoreCtxs+0x128>)
 801289e:	23f8      	movs	r3, #248	; 0xf8
 80128a0:	009b      	lsls	r3, r3, #2
 80128a2:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindowCConfig.Frequency = MacCtx.NvmCtx->MacParams.RxCChannel.Frequency;
 80128a4:	4b2e      	ldr	r3, [pc, #184]	; (8012960 <RestoreCtxs+0x128>)
 80128a6:	4a30      	ldr	r2, [pc, #192]	; (8012968 <RestoreCtxs+0x130>)
 80128a8:	589b      	ldr	r3, [r3, r2]
 80128aa:	22b0      	movs	r2, #176	; 0xb0
 80128ac:	5899      	ldr	r1, [r3, r2]
 80128ae:	4a2c      	ldr	r2, [pc, #176]	; (8012960 <RestoreCtxs+0x128>)
 80128b0:	23f9      	movs	r3, #249	; 0xf9
 80128b2:	009b      	lsls	r3, r3, #2
 80128b4:	50d1      	str	r1, [r2, r3]
    MacCtx.RxWindowCConfig.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80128b6:	4b2a      	ldr	r3, [pc, #168]	; (8012960 <RestoreCtxs+0x128>)
 80128b8:	4a2b      	ldr	r2, [pc, #172]	; (8012968 <RestoreCtxs+0x130>)
 80128ba:	589b      	ldr	r3, [r3, r2]
 80128bc:	22b9      	movs	r2, #185	; 0xb9
 80128be:	5c99      	ldrb	r1, [r3, r2]
 80128c0:	4a27      	ldr	r2, [pc, #156]	; (8012960 <RestoreCtxs+0x128>)
 80128c2:	23fc      	movs	r3, #252	; 0xfc
 80128c4:	009b      	lsls	r3, r3, #2
 80128c6:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindowCConfig.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 80128c8:	4b25      	ldr	r3, [pc, #148]	; (8012960 <RestoreCtxs+0x128>)
 80128ca:	4a27      	ldr	r2, [pc, #156]	; (8012968 <RestoreCtxs+0x130>)
 80128cc:	589b      	ldr	r3, [r3, r2]
 80128ce:	22ca      	movs	r2, #202	; 0xca
 80128d0:	5c99      	ldrb	r1, [r3, r2]
 80128d2:	4b23      	ldr	r3, [pc, #140]	; (8012960 <RestoreCtxs+0x128>)
 80128d4:	4a26      	ldr	r2, [pc, #152]	; (8012970 <RestoreCtxs+0x138>)
 80128d6:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80128d8:	4b21      	ldr	r3, [pc, #132]	; (8012960 <RestoreCtxs+0x128>)
 80128da:	4a26      	ldr	r2, [pc, #152]	; (8012974 <RestoreCtxs+0x13c>)
 80128dc:	2101      	movs	r1, #1
 80128de:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80128e0:	4b1f      	ldr	r3, [pc, #124]	; (8012960 <RestoreCtxs+0x128>)
 80128e2:	4a25      	ldr	r2, [pc, #148]	; (8012978 <RestoreCtxs+0x140>)
 80128e4:	2102      	movs	r1, #2
 80128e6:	5499      	strb	r1, [r3, r2]

    if( SecureElementRestoreNvmCtx( contexts->SecureElementNvmCtx ) != SECURE_ELEMENT_SUCCESS )
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	699b      	ldr	r3, [r3, #24]
 80128ec:	0018      	movs	r0, r3
 80128ee:	f7fa ff83 	bl	800d7f8 <SecureElementRestoreNvmCtx>
 80128f2:	1e03      	subs	r3, r0, #0
 80128f4:	d001      	beq.n	80128fa <RestoreCtxs+0xc2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80128f6:	2311      	movs	r3, #17
 80128f8:	e02e      	b.n	8012958 <RestoreCtxs+0x120>
    }

    if( LoRaMacCryptoRestoreNvmCtx( contexts->CryptoNvmCtx ) != LORAMAC_CRYPTO_SUCCESS )
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	691b      	ldr	r3, [r3, #16]
 80128fe:	0018      	movs	r0, r3
 8012900:	f003 f9e2 	bl	8015cc8 <LoRaMacCryptoRestoreNvmCtx>
 8012904:	1e03      	subs	r3, r0, #0
 8012906:	d001      	beq.n	801290c <RestoreCtxs+0xd4>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8012908:	2311      	movs	r3, #17
 801290a:	e025      	b.n	8012958 <RestoreCtxs+0x120>
    }

    if( LoRaMacCommandsRestoreNvmCtx( contexts->CommandsNvmCtx ) != LORAMAC_COMMANDS_SUCCESS )
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	6a1b      	ldr	r3, [r3, #32]
 8012910:	0018      	movs	r0, r3
 8012912:	f002 f9b5 	bl	8014c80 <LoRaMacCommandsRestoreNvmCtx>
 8012916:	1e03      	subs	r3, r0, #0
 8012918:	d001      	beq.n	801291e <RestoreCtxs+0xe6>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801291a:	2313      	movs	r3, #19
 801291c:	e01c      	b.n	8012958 <RestoreCtxs+0x120>
    }

    if( LoRaMacClassBRestoreNvmCtx( contexts->ClassBNvmCtx ) != true )
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012922:	0018      	movs	r0, r3
 8012924:	f001 ff87 	bl	8014836 <LoRaMacClassBRestoreNvmCtx>
 8012928:	0003      	movs	r3, r0
 801292a:	001a      	movs	r2, r3
 801292c:	2301      	movs	r3, #1
 801292e:	4053      	eors	r3, r2
 8012930:	b2db      	uxtb	r3, r3
 8012932:	2b00      	cmp	r3, #0
 8012934:	d001      	beq.n	801293a <RestoreCtxs+0x102>
    {
        return LORAMAC_STATUS_CLASS_B_ERROR;
 8012936:	2314      	movs	r3, #20
 8012938:	e00e      	b.n	8012958 <RestoreCtxs+0x120>
    }

    if( LoRaMacConfirmQueueRestoreNvmCtx( contexts->ConfirmQueueNvmCtx ) != true )
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801293e:	0018      	movs	r0, r3
 8012940:	f002 fc3e 	bl	80151c0 <LoRaMacConfirmQueueRestoreNvmCtx>
 8012944:	0003      	movs	r3, r0
 8012946:	001a      	movs	r2, r3
 8012948:	2301      	movs	r3, #1
 801294a:	4053      	eors	r3, r2
 801294c:	b2db      	uxtb	r3, r3
 801294e:	2b00      	cmp	r3, #0
 8012950:	d001      	beq.n	8012956 <RestoreCtxs+0x11e>
    {
        return LORAMAC_STATUS_CONFIRM_QUEUE_ERROR;
 8012952:	2315      	movs	r3, #21
 8012954:	e000      	b.n	8012958 <RestoreCtxs+0x120>
    }

    return LORAMAC_STATUS_OK;
 8012956:	2300      	movs	r3, #0
}
 8012958:	0018      	movs	r0, r3
 801295a:	46bd      	mov	sp, r7
 801295c:	b004      	add	sp, #16
 801295e:	bd80      	pop	{r7, pc}
 8012960:	200005b4 	.word	0x200005b4
 8012964:	20000a40 	.word	0x20000a40
 8012968:	00000484 	.word	0x00000484
 801296c:	00000415 	.word	0x00000415
 8012970:	000003f1 	.word	0x000003f1
 8012974:	000003f2 	.word	0x000003f2
 8012978:	000003f3 	.word	0x000003f3

0801297c <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 801297c:	b580      	push	{r7, lr}
 801297e:	b082      	sub	sp, #8
 8012980:	af00      	add	r7, sp, #0
 8012982:	6078      	str	r0, [r7, #4]
 8012984:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	2b00      	cmp	r3, #0
 801298a:	d002      	beq.n	8012992 <DetermineFrameType+0x16>
 801298c:	683b      	ldr	r3, [r7, #0]
 801298e:	2b00      	cmp	r3, #0
 8012990:	d101      	bne.n	8012996 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012992:	2303      	movs	r3, #3
 8012994:	e03b      	b.n	8012a0e <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	7b1b      	ldrb	r3, [r3, #12]
 801299a:	220f      	movs	r2, #15
 801299c:	4013      	ands	r3, r2
 801299e:	b2db      	uxtb	r3, r3
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d008      	beq.n	80129b6 <DetermineFrameType+0x3a>
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	2220      	movs	r2, #32
 80129a8:	5c9b      	ldrb	r3, [r3, r2]
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d003      	beq.n	80129b6 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 80129ae:	683b      	ldr	r3, [r7, #0]
 80129b0:	2200      	movs	r2, #0
 80129b2:	701a      	strb	r2, [r3, #0]
 80129b4:	e02a      	b.n	8012a0c <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	2228      	movs	r2, #40	; 0x28
 80129ba:	5c9b      	ldrb	r3, [r3, r2]
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d103      	bne.n	80129c8 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 80129c0:	683b      	ldr	r3, [r7, #0]
 80129c2:	2201      	movs	r2, #1
 80129c4:	701a      	strb	r2, [r3, #0]
 80129c6:	e021      	b.n	8012a0c <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	7b1b      	ldrb	r3, [r3, #12]
 80129cc:	220f      	movs	r2, #15
 80129ce:	4013      	ands	r3, r2
 80129d0:	b2db      	uxtb	r3, r3
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d108      	bne.n	80129e8 <DetermineFrameType+0x6c>
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	2220      	movs	r2, #32
 80129da:	5c9b      	ldrb	r3, [r3, r2]
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d103      	bne.n	80129e8 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 80129e0:	683b      	ldr	r3, [r7, #0]
 80129e2:	2202      	movs	r2, #2
 80129e4:	701a      	strb	r2, [r3, #0]
 80129e6:	e011      	b.n	8012a0c <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	7b1b      	ldrb	r3, [r3, #12]
 80129ec:	220f      	movs	r2, #15
 80129ee:	4013      	ands	r3, r2
 80129f0:	b2db      	uxtb	r3, r3
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d108      	bne.n	8012a08 <DetermineFrameType+0x8c>
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	2220      	movs	r2, #32
 80129fa:	5c9b      	ldrb	r3, [r3, r2]
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d003      	beq.n	8012a08 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8012a00:	683b      	ldr	r3, [r7, #0]
 8012a02:	2203      	movs	r2, #3
 8012a04:	701a      	strb	r2, [r3, #0]
 8012a06:	e001      	b.n	8012a0c <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8012a08:	2317      	movs	r3, #23
 8012a0a:	e000      	b.n	8012a0e <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8012a0c:	2300      	movs	r3, #0
}
 8012a0e:	0018      	movs	r0, r3
 8012a10:	46bd      	mov	sp, r7
 8012a12:	b002      	add	sp, #8
 8012a14:	bd80      	pop	{r7, pc}
	...

08012a18 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8012a18:	b580      	push	{r7, lr}
 8012a1a:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 8012a1c:	4a14      	ldr	r2, [pc, #80]	; (8012a70 <CheckRetransUnconfirmedUplink+0x58>)
 8012a1e:	2382      	movs	r3, #130	; 0x82
 8012a20:	00db      	lsls	r3, r3, #3
 8012a22:	5cd2      	ldrb	r2, [r2, r3]
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
 8012a24:	4b12      	ldr	r3, [pc, #72]	; (8012a70 <CheckRetransUnconfirmedUplink+0x58>)
 8012a26:	4913      	ldr	r1, [pc, #76]	; (8012a74 <CheckRetransUnconfirmedUplink+0x5c>)
 8012a28:	585b      	ldr	r3, [r3, r1]
 8012a2a:	21a4      	movs	r1, #164	; 0xa4
 8012a2c:	5c5b      	ldrb	r3, [r3, r1]
    if( MacCtx.ChannelsNbTransCounter >=
 8012a2e:	429a      	cmp	r2, r3
 8012a30:	d301      	bcc.n	8012a36 <CheckRetransUnconfirmedUplink+0x1e>
    {
        return true;
 8012a32:	2301      	movs	r3, #1
 8012a34:	e018      	b.n	8012a68 <CheckRetransUnconfirmedUplink+0x50>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8012a36:	4b0e      	ldr	r3, [pc, #56]	; (8012a70 <CheckRetransUnconfirmedUplink+0x58>)
 8012a38:	4a0f      	ldr	r2, [pc, #60]	; (8012a78 <CheckRetransUnconfirmedUplink+0x60>)
 8012a3a:	5c9b      	ldrb	r3, [r3, r2]
 8012a3c:	2202      	movs	r2, #2
 8012a3e:	4013      	ands	r3, r2
 8012a40:	b2db      	uxtb	r3, r3
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d00f      	beq.n	8012a66 <CheckRetransUnconfirmedUplink+0x4e>
    {
        // For Class A stop in each case
        if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 8012a46:	4b0a      	ldr	r3, [pc, #40]	; (8012a70 <CheckRetransUnconfirmedUplink+0x58>)
 8012a48:	4a0a      	ldr	r2, [pc, #40]	; (8012a74 <CheckRetransUnconfirmedUplink+0x5c>)
 8012a4a:	589b      	ldr	r3, [r3, r2]
 8012a4c:	227c      	movs	r2, #124	; 0x7c
 8012a4e:	5c9b      	ldrb	r3, [r3, r2]
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d101      	bne.n	8012a58 <CheckRetransUnconfirmedUplink+0x40>
        {
            return true;
 8012a54:	2301      	movs	r3, #1
 8012a56:	e007      	b.n	8012a68 <CheckRetransUnconfirmedUplink+0x50>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 )
 8012a58:	4b05      	ldr	r3, [pc, #20]	; (8012a70 <CheckRetransUnconfirmedUplink+0x58>)
 8012a5a:	4a08      	ldr	r2, [pc, #32]	; (8012a7c <CheckRetransUnconfirmedUplink+0x64>)
 8012a5c:	5c9b      	ldrb	r3, [r3, r2]
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d101      	bne.n	8012a66 <CheckRetransUnconfirmedUplink+0x4e>
            {
                return true;
 8012a62:	2301      	movs	r3, #1
 8012a64:	e000      	b.n	8012a68 <CheckRetransUnconfirmedUplink+0x50>
            }
        }
    }
    return false;
 8012a66:	2300      	movs	r3, #0
}
 8012a68:	0018      	movs	r0, r3
 8012a6a:	46bd      	mov	sp, r7
 8012a6c:	bd80      	pop	{r7, pc}
 8012a6e:	46c0      	nop			; (mov r8, r8)
 8012a70:	200005b4 	.word	0x200005b4
 8012a74:	00000484 	.word	0x00000484
 8012a78:	00000481 	.word	0x00000481
 8012a7c:	0000042d 	.word	0x0000042d

08012a80 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8012a80:	b580      	push	{r7, lr}
 8012a82:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 8012a84:	4b0e      	ldr	r3, [pc, #56]	; (8012ac0 <CheckRetransConfirmedUplink+0x40>)
 8012a86:	4a0f      	ldr	r2, [pc, #60]	; (8012ac4 <CheckRetransConfirmedUplink+0x44>)
 8012a88:	5c9a      	ldrb	r2, [r3, r2]
        MacCtx.AckTimeoutRetries )
 8012a8a:	4b0d      	ldr	r3, [pc, #52]	; (8012ac0 <CheckRetransConfirmedUplink+0x40>)
 8012a8c:	490e      	ldr	r1, [pc, #56]	; (8012ac8 <CheckRetransConfirmedUplink+0x48>)
 8012a8e:	5c5b      	ldrb	r3, [r3, r1]
    if( MacCtx.AckTimeoutRetriesCounter >=
 8012a90:	429a      	cmp	r2, r3
 8012a92:	d301      	bcc.n	8012a98 <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 8012a94:	2301      	movs	r3, #1
 8012a96:	e010      	b.n	8012aba <CheckRetransConfirmedUplink+0x3a>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8012a98:	4b09      	ldr	r3, [pc, #36]	; (8012ac0 <CheckRetransConfirmedUplink+0x40>)
 8012a9a:	4a0c      	ldr	r2, [pc, #48]	; (8012acc <CheckRetransConfirmedUplink+0x4c>)
 8012a9c:	5c9b      	ldrb	r3, [r3, r2]
 8012a9e:	2202      	movs	r2, #2
 8012aa0:	4013      	ands	r3, r2
 8012aa2:	b2db      	uxtb	r3, r3
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d007      	beq.n	8012ab8 <CheckRetransConfirmedUplink+0x38>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8012aa8:	4a05      	ldr	r2, [pc, #20]	; (8012ac0 <CheckRetransConfirmedUplink+0x40>)
 8012aaa:	2388      	movs	r3, #136	; 0x88
 8012aac:	00db      	lsls	r3, r3, #3
 8012aae:	5cd3      	ldrb	r3, [r2, r3]
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d001      	beq.n	8012ab8 <CheckRetransConfirmedUplink+0x38>
        {
            return true;
 8012ab4:	2301      	movs	r3, #1
 8012ab6:	e000      	b.n	8012aba <CheckRetransConfirmedUplink+0x3a>
        }
    }
    return false;
 8012ab8:	2300      	movs	r3, #0
}
 8012aba:	0018      	movs	r0, r3
 8012abc:	46bd      	mov	sp, r7
 8012abe:	bd80      	pop	{r7, pc}
 8012ac0:	200005b4 	.word	0x200005b4
 8012ac4:	00000412 	.word	0x00000412
 8012ac8:	00000411 	.word	0x00000411
 8012acc:	00000481 	.word	0x00000481

08012ad0 <StopRetransmission>:

static bool StopRetransmission( void )
{
 8012ad0:	b580      	push	{r7, lr}
 8012ad2:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8012ad4:	4b1e      	ldr	r3, [pc, #120]	; (8012b50 <StopRetransmission+0x80>)
 8012ad6:	4a1f      	ldr	r2, [pc, #124]	; (8012b54 <StopRetransmission+0x84>)
 8012ad8:	5c9b      	ldrb	r3, [r3, r2]
 8012ada:	2202      	movs	r2, #2
 8012adc:	4013      	ands	r3, r2
 8012ade:	b2db      	uxtb	r3, r3
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d009      	beq.n	8012af8 <StopRetransmission+0x28>
        ( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
 8012ae4:	4b1a      	ldr	r3, [pc, #104]	; (8012b50 <StopRetransmission+0x80>)
 8012ae6:	4a1c      	ldr	r2, [pc, #112]	; (8012b58 <StopRetransmission+0x88>)
 8012ae8:	5c9b      	ldrb	r3, [r3, r2]
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d013      	beq.n	8012b16 <StopRetransmission+0x46>
          ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_2 ) ) )
 8012aee:	4b18      	ldr	r3, [pc, #96]	; (8012b50 <StopRetransmission+0x80>)
 8012af0:	4a19      	ldr	r2, [pc, #100]	; (8012b58 <StopRetransmission+0x88>)
 8012af2:	5c9b      	ldrb	r3, [r3, r2]
        ( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
 8012af4:	2b01      	cmp	r3, #1
 8012af6:	d00e      	beq.n	8012b16 <StopRetransmission+0x46>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( MacCtx.NvmCtx->AdrCtrlOn == true )
 8012af8:	4b15      	ldr	r3, [pc, #84]	; (8012b50 <StopRetransmission+0x80>)
 8012afa:	4a18      	ldr	r2, [pc, #96]	; (8012b5c <StopRetransmission+0x8c>)
 8012afc:	589b      	ldr	r3, [r3, r2]
 8012afe:	227e      	movs	r2, #126	; 0x7e
 8012b00:	5c9b      	ldrb	r3, [r3, r2]
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d007      	beq.n	8012b16 <StopRetransmission+0x46>
        {
            MacCtx.NvmCtx->AdrAckCounter++;
 8012b06:	4b12      	ldr	r3, [pc, #72]	; (8012b50 <StopRetransmission+0x80>)
 8012b08:	4a14      	ldr	r2, [pc, #80]	; (8012b5c <StopRetransmission+0x8c>)
 8012b0a:	589b      	ldr	r3, [r3, r2]
 8012b0c:	2280      	movs	r2, #128	; 0x80
 8012b0e:	589a      	ldr	r2, [r3, r2]
 8012b10:	3201      	adds	r2, #1
 8012b12:	2180      	movs	r1, #128	; 0x80
 8012b14:	505a      	str	r2, [r3, r1]
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8012b16:	4a0e      	ldr	r2, [pc, #56]	; (8012b50 <StopRetransmission+0x80>)
 8012b18:	2382      	movs	r3, #130	; 0x82
 8012b1a:	00db      	lsls	r3, r3, #3
 8012b1c:	2100      	movs	r1, #0
 8012b1e:	54d1      	strb	r1, [r2, r3]
    MacCtx.NodeAckRequested = false;
 8012b20:	4b0b      	ldr	r3, [pc, #44]	; (8012b50 <StopRetransmission+0x80>)
 8012b22:	4a0f      	ldr	r2, [pc, #60]	; (8012b60 <StopRetransmission+0x90>)
 8012b24:	2100      	movs	r1, #0
 8012b26:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetry = false;
 8012b28:	4b09      	ldr	r3, [pc, #36]	; (8012b50 <StopRetransmission+0x80>)
 8012b2a:	4a0e      	ldr	r2, [pc, #56]	; (8012b64 <StopRetransmission+0x94>)
 8012b2c:	2100      	movs	r1, #0
 8012b2e:	5499      	strb	r1, [r3, r2]
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8012b30:	4a07      	ldr	r2, [pc, #28]	; (8012b50 <StopRetransmission+0x80>)
 8012b32:	23d0      	movs	r3, #208	; 0xd0
 8012b34:	009b      	lsls	r3, r3, #2
 8012b36:	58d3      	ldr	r3, [r2, r3]
 8012b38:	2202      	movs	r2, #2
 8012b3a:	4393      	bics	r3, r2
 8012b3c:	0019      	movs	r1, r3
 8012b3e:	4a04      	ldr	r2, [pc, #16]	; (8012b50 <StopRetransmission+0x80>)
 8012b40:	23d0      	movs	r3, #208	; 0xd0
 8012b42:	009b      	lsls	r3, r3, #2
 8012b44:	50d1      	str	r1, [r2, r3]

    return true;
 8012b46:	2301      	movs	r3, #1
}
 8012b48:	0018      	movs	r0, r3
 8012b4a:	46bd      	mov	sp, r7
 8012b4c:	bd80      	pop	{r7, pc}
 8012b4e:	46c0      	nop			; (mov r8, r8)
 8012b50:	200005b4 	.word	0x200005b4
 8012b54:	00000481 	.word	0x00000481
 8012b58:	0000042d 	.word	0x0000042d
 8012b5c:	00000484 	.word	0x00000484
 8012b60:	00000414 	.word	0x00000414
 8012b64:	00000413 	.word	0x00000413

08012b68 <AckTimeoutRetriesProcess>:

static void AckTimeoutRetriesProcess( void )
{
 8012b68:	b580      	push	{r7, lr}
 8012b6a:	b084      	sub	sp, #16
 8012b6c:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 8012b6e:	4b21      	ldr	r3, [pc, #132]	; (8012bf4 <AckTimeoutRetriesProcess+0x8c>)
 8012b70:	4a21      	ldr	r2, [pc, #132]	; (8012bf8 <AckTimeoutRetriesProcess+0x90>)
 8012b72:	5c9a      	ldrb	r2, [r3, r2]
 8012b74:	4b1f      	ldr	r3, [pc, #124]	; (8012bf4 <AckTimeoutRetriesProcess+0x8c>)
 8012b76:	4921      	ldr	r1, [pc, #132]	; (8012bfc <AckTimeoutRetriesProcess+0x94>)
 8012b78:	5c5b      	ldrb	r3, [r3, r1]
 8012b7a:	429a      	cmp	r2, r3
 8012b7c:	d236      	bcs.n	8012bec <AckTimeoutRetriesProcess+0x84>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 8012b7e:	4b1d      	ldr	r3, [pc, #116]	; (8012bf4 <AckTimeoutRetriesProcess+0x8c>)
 8012b80:	4a1d      	ldr	r2, [pc, #116]	; (8012bf8 <AckTimeoutRetriesProcess+0x90>)
 8012b82:	5c9b      	ldrb	r3, [r3, r2]
 8012b84:	3301      	adds	r3, #1
 8012b86:	b2d9      	uxtb	r1, r3
 8012b88:	4b1a      	ldr	r3, [pc, #104]	; (8012bf4 <AckTimeoutRetriesProcess+0x8c>)
 8012b8a:	4a1b      	ldr	r2, [pc, #108]	; (8012bf8 <AckTimeoutRetriesProcess+0x90>)
 8012b8c:	5499      	strb	r1, [r3, r2]
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 8012b8e:	4b19      	ldr	r3, [pc, #100]	; (8012bf4 <AckTimeoutRetriesProcess+0x8c>)
 8012b90:	4a19      	ldr	r2, [pc, #100]	; (8012bf8 <AckTimeoutRetriesProcess+0x90>)
 8012b92:	5c9b      	ldrb	r3, [r3, r2]
 8012b94:	2201      	movs	r2, #1
 8012b96:	4013      	ands	r3, r2
 8012b98:	b2db      	uxtb	r3, r3
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d026      	beq.n	8012bec <AckTimeoutRetriesProcess+0x84>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8012b9e:	2108      	movs	r1, #8
 8012ba0:	187b      	adds	r3, r7, r1
 8012ba2:	2222      	movs	r2, #34	; 0x22
 8012ba4:	701a      	strb	r2, [r3, #0]
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8012ba6:	4b13      	ldr	r3, [pc, #76]	; (8012bf4 <AckTimeoutRetriesProcess+0x8c>)
 8012ba8:	4a15      	ldr	r2, [pc, #84]	; (8012c00 <AckTimeoutRetriesProcess+0x98>)
 8012baa:	589b      	ldr	r3, [r3, r2]
 8012bac:	22b8      	movs	r2, #184	; 0xb8
 8012bae:	5c9a      	ldrb	r2, [r3, r2]
 8012bb0:	187b      	adds	r3, r7, r1
 8012bb2:	709a      	strb	r2, [r3, #2]
            getPhy.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8012bb4:	4b0f      	ldr	r3, [pc, #60]	; (8012bf4 <AckTimeoutRetriesProcess+0x8c>)
 8012bb6:	4a12      	ldr	r2, [pc, #72]	; (8012c00 <AckTimeoutRetriesProcess+0x98>)
 8012bb8:	589b      	ldr	r3, [r3, r2]
 8012bba:	2285      	movs	r2, #133	; 0x85
 8012bbc:	569a      	ldrsb	r2, [r3, r2]
 8012bbe:	187b      	adds	r3, r7, r1
 8012bc0:	705a      	strb	r2, [r3, #1]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012bc2:	4b0c      	ldr	r3, [pc, #48]	; (8012bf4 <AckTimeoutRetriesProcess+0x8c>)
 8012bc4:	4a0e      	ldr	r2, [pc, #56]	; (8012c00 <AckTimeoutRetriesProcess+0x98>)
 8012bc6:	589b      	ldr	r3, [r3, r2]
 8012bc8:	781b      	ldrb	r3, [r3, #0]
 8012bca:	187a      	adds	r2, r7, r1
 8012bcc:	0011      	movs	r1, r2
 8012bce:	0018      	movs	r0, r3
 8012bd0:	f004 f829 	bl	8016c26 <RegionGetPhyParam>
 8012bd4:	0003      	movs	r3, r0
 8012bd6:	001a      	movs	r2, r3
 8012bd8:	1d3b      	adds	r3, r7, #4
 8012bda:	601a      	str	r2, [r3, #0]
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = phyParam.Value;
 8012bdc:	1d3b      	adds	r3, r7, #4
 8012bde:	6819      	ldr	r1, [r3, #0]
 8012be0:	4b04      	ldr	r3, [pc, #16]	; (8012bf4 <AckTimeoutRetriesProcess+0x8c>)
 8012be2:	4a07      	ldr	r2, [pc, #28]	; (8012c00 <AckTimeoutRetriesProcess+0x98>)
 8012be4:	589b      	ldr	r3, [r3, r2]
 8012be6:	b249      	sxtb	r1, r1
 8012be8:	2285      	movs	r2, #133	; 0x85
 8012bea:	5499      	strb	r1, [r3, r2]
        }
    }
}
 8012bec:	46c0      	nop			; (mov r8, r8)
 8012bee:	46bd      	mov	sp, r7
 8012bf0:	b004      	add	sp, #16
 8012bf2:	bd80      	pop	{r7, pc}
 8012bf4:	200005b4 	.word	0x200005b4
 8012bf8:	00000412 	.word	0x00000412
 8012bfc:	00000411 	.word	0x00000411
 8012c00:	00000484 	.word	0x00000484

08012c04 <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 8012c04:	b580      	push	{r7, lr}
 8012c06:	b082      	sub	sp, #8
 8012c08:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 8012c0a:	4a16      	ldr	r2, [pc, #88]	; (8012c64 <AckTimeoutRetriesFinalize+0x60>)
 8012c0c:	2388      	movs	r3, #136	; 0x88
 8012c0e:	00db      	lsls	r3, r3, #3
 8012c10:	5cd3      	ldrb	r3, [r2, r3]
 8012c12:	2201      	movs	r2, #1
 8012c14:	4053      	eors	r3, r2
 8012c16:	b2db      	uxtb	r3, r3
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d018      	beq.n	8012c4e <AckTimeoutRetriesFinalize+0x4a>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8012c1c:	003b      	movs	r3, r7
 8012c1e:	2202      	movs	r2, #2
 8012c20:	711a      	strb	r2, [r3, #4]
        params.NvmCtx = Contexts.RegionNvmCtx;
 8012c22:	4b11      	ldr	r3, [pc, #68]	; (8012c68 <AckTimeoutRetriesFinalize+0x64>)
 8012c24:	689a      	ldr	r2, [r3, #8]
 8012c26:	003b      	movs	r3, r7
 8012c28:	601a      	str	r2, [r3, #0]
        RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8012c2a:	4b0e      	ldr	r3, [pc, #56]	; (8012c64 <AckTimeoutRetriesFinalize+0x60>)
 8012c2c:	4a0f      	ldr	r2, [pc, #60]	; (8012c6c <AckTimeoutRetriesFinalize+0x68>)
 8012c2e:	589b      	ldr	r3, [r3, r2]
 8012c30:	781b      	ldrb	r3, [r3, #0]
 8012c32:	003a      	movs	r2, r7
 8012c34:	0011      	movs	r1, r2
 8012c36:	0018      	movs	r0, r3
 8012c38:	f004 f831 	bl	8016c9e <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 8012c3c:	4b09      	ldr	r3, [pc, #36]	; (8012c64 <AckTimeoutRetriesFinalize+0x60>)
 8012c3e:	4a0c      	ldr	r2, [pc, #48]	; (8012c70 <AckTimeoutRetriesFinalize+0x6c>)
 8012c40:	2100      	movs	r1, #0
 8012c42:	5499      	strb	r1, [r3, r2]
        MacCtx.McpsConfirm.AckReceived = false;
 8012c44:	4a07      	ldr	r2, [pc, #28]	; (8012c64 <AckTimeoutRetriesFinalize+0x60>)
 8012c46:	2388      	movs	r3, #136	; 0x88
 8012c48:	00db      	lsls	r3, r3, #3
 8012c4a:	2100      	movs	r1, #0
 8012c4c:	54d1      	strb	r1, [r2, r3]
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8012c4e:	4b05      	ldr	r3, [pc, #20]	; (8012c64 <AckTimeoutRetriesFinalize+0x60>)
 8012c50:	4a08      	ldr	r2, [pc, #32]	; (8012c74 <AckTimeoutRetriesFinalize+0x70>)
 8012c52:	5c99      	ldrb	r1, [r3, r2]
 8012c54:	4b03      	ldr	r3, [pc, #12]	; (8012c64 <AckTimeoutRetriesFinalize+0x60>)
 8012c56:	4a08      	ldr	r2, [pc, #32]	; (8012c78 <AckTimeoutRetriesFinalize+0x74>)
 8012c58:	5499      	strb	r1, [r3, r2]
}
 8012c5a:	46c0      	nop			; (mov r8, r8)
 8012c5c:	46bd      	mov	sp, r7
 8012c5e:	b002      	add	sp, #8
 8012c60:	bd80      	pop	{r7, pc}
 8012c62:	46c0      	nop			; (mov r8, r8)
 8012c64:	200005b4 	.word	0x200005b4
 8012c68:	20000bac 	.word	0x20000bac
 8012c6c:	00000484 	.word	0x00000484
 8012c70:	00000414 	.word	0x00000414
 8012c74:	00000412 	.word	0x00000412
 8012c78:	00000441 	.word	0x00000441

08012c7c <CallNvmCtxCallback>:

static void CallNvmCtxCallback( LoRaMacNvmCtxModule_t module )
{
 8012c7c:	b580      	push	{r7, lr}
 8012c7e:	b082      	sub	sp, #8
 8012c80:	af00      	add	r7, sp, #0
 8012c82:	0002      	movs	r2, r0
 8012c84:	1dfb      	adds	r3, r7, #7
 8012c86:	701a      	strb	r2, [r3, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmContextChange != NULL ) )
 8012c88:	4a0c      	ldr	r2, [pc, #48]	; (8012cbc <CallNvmCtxCallback+0x40>)
 8012c8a:	23d2      	movs	r3, #210	; 0xd2
 8012c8c:	009b      	lsls	r3, r3, #2
 8012c8e:	58d3      	ldr	r3, [r2, r3]
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d00f      	beq.n	8012cb4 <CallNvmCtxCallback+0x38>
 8012c94:	4a09      	ldr	r2, [pc, #36]	; (8012cbc <CallNvmCtxCallback+0x40>)
 8012c96:	23d2      	movs	r3, #210	; 0xd2
 8012c98:	009b      	lsls	r3, r3, #2
 8012c9a:	58d3      	ldr	r3, [r2, r3]
 8012c9c:	689b      	ldr	r3, [r3, #8]
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d008      	beq.n	8012cb4 <CallNvmCtxCallback+0x38>
    {
        MacCtx.MacCallbacks->NvmContextChange( module );
 8012ca2:	4a06      	ldr	r2, [pc, #24]	; (8012cbc <CallNvmCtxCallback+0x40>)
 8012ca4:	23d2      	movs	r3, #210	; 0xd2
 8012ca6:	009b      	lsls	r3, r3, #2
 8012ca8:	58d3      	ldr	r3, [r2, r3]
 8012caa:	689b      	ldr	r3, [r3, #8]
 8012cac:	1dfa      	adds	r2, r7, #7
 8012cae:	7812      	ldrb	r2, [r2, #0]
 8012cb0:	0010      	movs	r0, r2
 8012cb2:	4798      	blx	r3
    }
}
 8012cb4:	46c0      	nop			; (mov r8, r8)
 8012cb6:	46bd      	mov	sp, r7
 8012cb8:	b002      	add	sp, #8
 8012cba:	bd80      	pop	{r7, pc}
 8012cbc:	200005b4 	.word	0x200005b4

08012cc0 <EventMacNvmCtxChanged>:

static void EventMacNvmCtxChanged( void )
{
 8012cc0:	b580      	push	{r7, lr}
 8012cc2:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_MAC );
 8012cc4:	2000      	movs	r0, #0
 8012cc6:	f7ff ffd9 	bl	8012c7c <CallNvmCtxCallback>
}
 8012cca:	46c0      	nop			; (mov r8, r8)
 8012ccc:	46bd      	mov	sp, r7
 8012cce:	bd80      	pop	{r7, pc}

08012cd0 <EventRegionNvmCtxChanged>:

static void EventRegionNvmCtxChanged( void )
{
 8012cd0:	b580      	push	{r7, lr}
 8012cd2:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_REGION );
 8012cd4:	2001      	movs	r0, #1
 8012cd6:	f7ff ffd1 	bl	8012c7c <CallNvmCtxCallback>
}
 8012cda:	46c0      	nop			; (mov r8, r8)
 8012cdc:	46bd      	mov	sp, r7
 8012cde:	bd80      	pop	{r7, pc}

08012ce0 <EventCryptoNvmCtxChanged>:

static void EventCryptoNvmCtxChanged( void )
{
 8012ce0:	b580      	push	{r7, lr}
 8012ce2:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CRYPTO );
 8012ce4:	2002      	movs	r0, #2
 8012ce6:	f7ff ffc9 	bl	8012c7c <CallNvmCtxCallback>
}
 8012cea:	46c0      	nop			; (mov r8, r8)
 8012cec:	46bd      	mov	sp, r7
 8012cee:	bd80      	pop	{r7, pc}

08012cf0 <EventSecureElementNvmCtxChanged>:

static void EventSecureElementNvmCtxChanged( void )
{
 8012cf0:	b580      	push	{r7, lr}
 8012cf2:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_SECURE_ELEMENT );
 8012cf4:	2003      	movs	r0, #3
 8012cf6:	f7ff ffc1 	bl	8012c7c <CallNvmCtxCallback>
}
 8012cfa:	46c0      	nop			; (mov r8, r8)
 8012cfc:	46bd      	mov	sp, r7
 8012cfe:	bd80      	pop	{r7, pc}

08012d00 <EventCommandsNvmCtxChanged>:

static void EventCommandsNvmCtxChanged( void )
{
 8012d00:	b580      	push	{r7, lr}
 8012d02:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_COMMANDS );
 8012d04:	2004      	movs	r0, #4
 8012d06:	f7ff ffb9 	bl	8012c7c <CallNvmCtxCallback>
}
 8012d0a:	46c0      	nop			; (mov r8, r8)
 8012d0c:	46bd      	mov	sp, r7
 8012d0e:	bd80      	pop	{r7, pc}

08012d10 <EventClassBNvmCtxChanged>:

static void EventClassBNvmCtxChanged( void )
{
 8012d10:	b580      	push	{r7, lr}
 8012d12:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CLASS_B );
 8012d14:	2005      	movs	r0, #5
 8012d16:	f7ff ffb1 	bl	8012c7c <CallNvmCtxCallback>
}
 8012d1a:	46c0      	nop			; (mov r8, r8)
 8012d1c:	46bd      	mov	sp, r7
 8012d1e:	bd80      	pop	{r7, pc}

08012d20 <EventConfirmQueueNvmCtxChanged>:

static void EventConfirmQueueNvmCtxChanged( void )
{
 8012d20:	b580      	push	{r7, lr}
 8012d22:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CONFIRM_QUEUE );
 8012d24:	2006      	movs	r0, #6
 8012d26:	f7ff ffa9 	bl	8012c7c <CallNvmCtxCallback>
}
 8012d2a:	46c0      	nop			; (mov r8, r8)
 8012d2c:	46bd      	mov	sp, r7
 8012d2e:	bd80      	pop	{r7, pc}

08012d30 <IsRequestPending>:

static uint8_t IsRequestPending( void )
{
 8012d30:	b580      	push	{r7, lr}
 8012d32:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8012d34:	4b0a      	ldr	r3, [pc, #40]	; (8012d60 <IsRequestPending+0x30>)
 8012d36:	4a0b      	ldr	r2, [pc, #44]	; (8012d64 <IsRequestPending+0x34>)
 8012d38:	5c9b      	ldrb	r3, [r3, r2]
 8012d3a:	2204      	movs	r2, #4
 8012d3c:	4013      	ands	r3, r2
 8012d3e:	b2db      	uxtb	r3, r3
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d107      	bne.n	8012d54 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8012d44:	4b06      	ldr	r3, [pc, #24]	; (8012d60 <IsRequestPending+0x30>)
 8012d46:	4a07      	ldr	r2, [pc, #28]	; (8012d64 <IsRequestPending+0x34>)
 8012d48:	5c9b      	ldrb	r3, [r3, r2]
 8012d4a:	2201      	movs	r2, #1
 8012d4c:	4013      	ands	r3, r2
 8012d4e:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d001      	beq.n	8012d58 <IsRequestPending+0x28>
    {
        return 1;
 8012d54:	2301      	movs	r3, #1
 8012d56:	e000      	b.n	8012d5a <IsRequestPending+0x2a>
    }
    return 0;
 8012d58:	2300      	movs	r3, #0
}
 8012d5a:	0018      	movs	r0, r3
 8012d5c:	46bd      	mov	sp, r7
 8012d5e:	bd80      	pop	{r7, pc}
 8012d60:	200005b4 	.word	0x200005b4
 8012d64:	00000481 	.word	0x00000481

08012d68 <LoRaMacIsBusy>:

/* Exported functions ---------------------------------------------------------*/
bool LoRaMacIsBusy( void )
{
 8012d68:	b580      	push	{r7, lr}
 8012d6a:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8012d6c:	4a08      	ldr	r2, [pc, #32]	; (8012d90 <LoRaMacIsBusy+0x28>)
 8012d6e:	23d0      	movs	r3, #208	; 0xd0
 8012d70:	009b      	lsls	r3, r3, #2
 8012d72:	58d3      	ldr	r3, [r2, r3]
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d106      	bne.n	8012d86 <LoRaMacIsBusy+0x1e>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 8012d78:	4b05      	ldr	r3, [pc, #20]	; (8012d90 <LoRaMacIsBusy+0x28>)
 8012d7a:	4a06      	ldr	r2, [pc, #24]	; (8012d94 <LoRaMacIsBusy+0x2c>)
 8012d7c:	5c9b      	ldrb	r3, [r3, r2]
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8012d7e:	2b01      	cmp	r3, #1
 8012d80:	d101      	bne.n	8012d86 <LoRaMacIsBusy+0x1e>
    {
        return false;
 8012d82:	2300      	movs	r3, #0
 8012d84:	e000      	b.n	8012d88 <LoRaMacIsBusy+0x20>
    }
    return true;
 8012d86:	2301      	movs	r3, #1
}
 8012d88:	0018      	movs	r0, r3
 8012d8a:	46bd      	mov	sp, r7
 8012d8c:	bd80      	pop	{r7, pc}
 8012d8e:	46c0      	nop			; (mov r8, r8)
 8012d90:	200005b4 	.word	0x200005b4
 8012d94:	00000482 	.word	0x00000482

08012d98 <LoRaMacProcess>:

void LoRaMacProcess( void )
{
 8012d98:	b580      	push	{r7, lr}
 8012d9a:	b082      	sub	sp, #8
 8012d9c:	af00      	add	r7, sp, #0
    uint8_t noTx = 0x00;
 8012d9e:	1dfb      	adds	r3, r7, #7
 8012da0:	2200      	movs	r2, #0
 8012da2:	701a      	strb	r2, [r3, #0]

    LoRaMacHandleIrqEvents( );
 8012da4:	f7fd f970 	bl	8010088 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 8012da8:	f001 fe26 	bl	80149f8 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8012dac:	4b1b      	ldr	r3, [pc, #108]	; (8012e1c <LoRaMacProcess+0x84>)
 8012dae:	4a1c      	ldr	r2, [pc, #112]	; (8012e20 <LoRaMacProcess+0x88>)
 8012db0:	5c9b      	ldrb	r3, [r3, r2]
 8012db2:	2220      	movs	r2, #32
 8012db4:	4013      	ands	r3, r2
 8012db6:	b2db      	uxtb	r3, r3
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d020      	beq.n	8012dfe <LoRaMacProcess+0x66>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 8012dbc:	2000      	movs	r0, #0
 8012dbe:	f7fd f9af 	bl	8010120 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 8012dc2:	f7fd fb8b 	bl	80104dc <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 8012dc6:	f7ff ffb3 	bl	8012d30 <IsRequestPending>
 8012dca:	1e03      	subs	r3, r0, #0
 8012dcc:	d008      	beq.n	8012de0 <LoRaMacProcess+0x48>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 8012dce:	f7fd fb59 	bl	8010484 <LoRaMacCheckForBeaconAcquisition>
 8012dd2:	0003      	movs	r3, r0
 8012dd4:	0019      	movs	r1, r3
 8012dd6:	1dfb      	adds	r3, r7, #7
 8012dd8:	1dfa      	adds	r2, r7, #7
 8012dda:	7812      	ldrb	r2, [r2, #0]
 8012ddc:	430a      	orrs	r2, r1
 8012dde:	701a      	strb	r2, [r3, #0]
        }

        if( noTx == 0x00 )
 8012de0:	1dfb      	adds	r3, r7, #7
 8012de2:	781b      	ldrb	r3, [r3, #0]
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d103      	bne.n	8012df0 <LoRaMacProcess+0x58>
        {
            LoRaMacHandleMlmeRequest( );
 8012de8:	f7fd fb0a 	bl	8010400 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 8012dec:	f7fd fa86 	bl	80102fc <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 8012df0:	f7fd f9aa 	bl	8010148 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 8012df4:	f7fd fa0e 	bl	8010214 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8012df8:	2001      	movs	r0, #1
 8012dfa:	f7fd f991 	bl	8010120 <LoRaMacEnableRequests>
    }
    LoRaMacHandleIndicationEvents( );
 8012dfe:	f7fd fa25 	bl	801024c <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 8012e02:	4a06      	ldr	r2, [pc, #24]	; (8012e1c <LoRaMacProcess+0x84>)
 8012e04:	2390      	movs	r3, #144	; 0x90
 8012e06:	00db      	lsls	r3, r3, #3
 8012e08:	5cd3      	ldrb	r3, [r2, r3]
 8012e0a:	2b02      	cmp	r3, #2
 8012e0c:	d101      	bne.n	8012e12 <LoRaMacProcess+0x7a>
    {
        OpenContinuousRxCWindow( );
 8012e0e:	f7ff f9d1 	bl	80121b4 <OpenContinuousRxCWindow>
    }
}
 8012e12:	46c0      	nop			; (mov r8, r8)
 8012e14:	46bd      	mov	sp, r7
 8012e16:	b002      	add	sp, #8
 8012e18:	bd80      	pop	{r7, pc}
 8012e1a:	46c0      	nop			; (mov r8, r8)
 8012e1c:	200005b4 	.word	0x200005b4
 8012e20:	00000481 	.word	0x00000481

08012e24 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8012e24:	b5b0      	push	{r4, r5, r7, lr}
 8012e26:	b098      	sub	sp, #96	; 0x60
 8012e28:	af02      	add	r7, sp, #8
 8012e2a:	6178      	str	r0, [r7, #20]
 8012e2c:	6139      	str	r1, [r7, #16]
 8012e2e:	230f      	movs	r3, #15
 8012e30:	18fb      	adds	r3, r7, r3
 8012e32:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( ( primitives == NULL ) ||
 8012e34:	697b      	ldr	r3, [r7, #20]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d002      	beq.n	8012e40 <LoRaMacInitialization+0x1c>
 8012e3a:	693b      	ldr	r3, [r7, #16]
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d101      	bne.n	8012e44 <LoRaMacInitialization+0x20>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012e40:	2303      	movs	r3, #3
 8012e42:	e35e      	b.n	8013502 <LoRaMacInitialization+0x6de>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8012e44:	697b      	ldr	r3, [r7, #20]
 8012e46:	681b      	ldr	r3, [r3, #0]
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d00b      	beq.n	8012e64 <LoRaMacInitialization+0x40>
        ( primitives->MacMcpsIndication == NULL ) ||
 8012e4c:	697b      	ldr	r3, [r7, #20]
 8012e4e:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d007      	beq.n	8012e64 <LoRaMacInitialization+0x40>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8012e54:	697b      	ldr	r3, [r7, #20]
 8012e56:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d003      	beq.n	8012e64 <LoRaMacInitialization+0x40>
        ( primitives->MacMlmeIndication == NULL ) )
 8012e5c:	697b      	ldr	r3, [r7, #20]
 8012e5e:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d101      	bne.n	8012e68 <LoRaMacInitialization+0x44>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012e64:	2303      	movs	r3, #3
 8012e66:	e34c      	b.n	8013502 <LoRaMacInitialization+0x6de>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8012e68:	230f      	movs	r3, #15
 8012e6a:	18fb      	adds	r3, r7, r3
 8012e6c:	781b      	ldrb	r3, [r3, #0]
 8012e6e:	0018      	movs	r0, r3
 8012e70:	f003 fec8 	bl	8016c04 <RegionIsActive>
 8012e74:	0003      	movs	r3, r0
 8012e76:	001a      	movs	r2, r3
 8012e78:	2301      	movs	r3, #1
 8012e7a:	4053      	eors	r3, r2
 8012e7c:	b2db      	uxtb	r3, r3
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d001      	beq.n	8012e86 <LoRaMacInitialization+0x62>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8012e82:	2309      	movs	r3, #9
 8012e84:	e33d      	b.n	8013502 <LoRaMacInitialization+0x6de>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives, EventConfirmQueueNvmCtxChanged );
 8012e86:	4afd      	ldr	r2, [pc, #1012]	; (801327c <LoRaMacInitialization+0x458>)
 8012e88:	697b      	ldr	r3, [r7, #20]
 8012e8a:	0011      	movs	r1, r2
 8012e8c:	0018      	movs	r0, r3
 8012e8e:	f002 f967 	bl	8015160 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &NvmMacCtx, 0x00, sizeof( LoRaMacNvmCtx_t ) );
 8012e92:	23b6      	movs	r3, #182	; 0xb6
 8012e94:	005a      	lsls	r2, r3, #1
 8012e96:	4bfa      	ldr	r3, [pc, #1000]	; (8013280 <LoRaMacInitialization+0x45c>)
 8012e98:	2100      	movs	r1, #0
 8012e9a:	0018      	movs	r0, r3
 8012e9c:	f006 fb90 	bl	80195c0 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8012ea0:	4af8      	ldr	r2, [pc, #992]	; (8013284 <LoRaMacInitialization+0x460>)
 8012ea2:	4bf9      	ldr	r3, [pc, #996]	; (8013288 <LoRaMacInitialization+0x464>)
 8012ea4:	2100      	movs	r1, #0
 8012ea6:	0018      	movs	r0, r3
 8012ea8:	f006 fb8a 	bl	80195c0 <memset1>
    MacCtx.NvmCtx = &NvmMacCtx;
 8012eac:	4bf6      	ldr	r3, [pc, #984]	; (8013288 <LoRaMacInitialization+0x464>)
 8012eae:	49f7      	ldr	r1, [pc, #988]	; (801328c <LoRaMacInitialization+0x468>)
 8012eb0:	4af3      	ldr	r2, [pc, #972]	; (8013280 <LoRaMacInitialization+0x45c>)
 8012eb2:	505a      	str	r2, [r3, r1]

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 8012eb4:	4bf4      	ldr	r3, [pc, #976]	; (8013288 <LoRaMacInitialization+0x464>)
 8012eb6:	4af6      	ldr	r2, [pc, #984]	; (8013290 <LoRaMacInitialization+0x46c>)
 8012eb8:	2101      	movs	r1, #1
 8012eba:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetries = 1;
 8012ebc:	4bf2      	ldr	r3, [pc, #968]	; (8013288 <LoRaMacInitialization+0x464>)
 8012ebe:	4af5      	ldr	r2, [pc, #980]	; (8013294 <LoRaMacInitialization+0x470>)
 8012ec0:	2101      	movs	r1, #1
 8012ec2:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->Region = region;
 8012ec4:	4bf0      	ldr	r3, [pc, #960]	; (8013288 <LoRaMacInitialization+0x464>)
 8012ec6:	4af1      	ldr	r2, [pc, #964]	; (801328c <LoRaMacInitialization+0x468>)
 8012ec8:	589b      	ldr	r3, [r3, r2]
 8012eca:	220f      	movs	r2, #15
 8012ecc:	18ba      	adds	r2, r7, r2
 8012ece:	7812      	ldrb	r2, [r2, #0]
 8012ed0:	701a      	strb	r2, [r3, #0]
    MacCtx.NvmCtx->DeviceClass = CLASS_A;
 8012ed2:	4bed      	ldr	r3, [pc, #948]	; (8013288 <LoRaMacInitialization+0x464>)
 8012ed4:	4aed      	ldr	r2, [pc, #948]	; (801328c <LoRaMacInitialization+0x468>)
 8012ed6:	589b      	ldr	r3, [r3, r2]
 8012ed8:	227c      	movs	r2, #124	; 0x7c
 8012eda:	2100      	movs	r1, #0
 8012edc:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->RepeaterSupport = false;
 8012ede:	4bea      	ldr	r3, [pc, #936]	; (8013288 <LoRaMacInitialization+0x464>)
 8012ee0:	4aea      	ldr	r2, [pc, #936]	; (801328c <LoRaMacInitialization+0x468>)
 8012ee2:	589b      	ldr	r3, [r3, r2]
 8012ee4:	22ca      	movs	r2, #202	; 0xca
 8012ee6:	2100      	movs	r1, #0
 8012ee8:	5499      	strb	r1, [r3, r2]

    // Setup version
    MacCtx.NvmCtx->Version.Value = LORAMAC_VERSION;
 8012eea:	4be7      	ldr	r3, [pc, #924]	; (8013288 <LoRaMacInitialization+0x464>)
 8012eec:	4ae7      	ldr	r2, [pc, #924]	; (801328c <LoRaMacInitialization+0x468>)
 8012eee:	589a      	ldr	r2, [r3, r2]
 8012ef0:	23b0      	movs	r3, #176	; 0xb0
 8012ef2:	005b      	lsls	r3, r3, #1
 8012ef4:	49e8      	ldr	r1, [pc, #928]	; (8013298 <LoRaMacInitialization+0x474>)
 8012ef6:	50d1      	str	r1, [r2, r3]

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8012ef8:	2550      	movs	r5, #80	; 0x50
 8012efa:	197b      	adds	r3, r7, r5
 8012efc:	220f      	movs	r2, #15
 8012efe:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012f00:	4be1      	ldr	r3, [pc, #900]	; (8013288 <LoRaMacInitialization+0x464>)
 8012f02:	4ae2      	ldr	r2, [pc, #904]	; (801328c <LoRaMacInitialization+0x468>)
 8012f04:	589b      	ldr	r3, [r3, r2]
 8012f06:	781b      	ldrb	r3, [r3, #0]
 8012f08:	197a      	adds	r2, r7, r5
 8012f0a:	0011      	movs	r1, r2
 8012f0c:	0018      	movs	r0, r3
 8012f0e:	f003 fe8a 	bl	8016c26 <RegionGetPhyParam>
 8012f12:	0003      	movs	r3, r0
 8012f14:	001a      	movs	r2, r3
 8012f16:	244c      	movs	r4, #76	; 0x4c
 8012f18:	193b      	adds	r3, r7, r4
 8012f1a:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->DutyCycleOn = ( bool ) phyParam.Value;
 8012f1c:	193b      	adds	r3, r7, r4
 8012f1e:	681a      	ldr	r2, [r3, #0]
 8012f20:	4bd9      	ldr	r3, [pc, #868]	; (8013288 <LoRaMacInitialization+0x464>)
 8012f22:	49da      	ldr	r1, [pc, #872]	; (801328c <LoRaMacInitialization+0x468>)
 8012f24:	585b      	ldr	r3, [r3, r1]
 8012f26:	1e51      	subs	r1, r2, #1
 8012f28:	418a      	sbcs	r2, r1
 8012f2a:	b2d1      	uxtb	r1, r2
 8012f2c:	22c9      	movs	r2, #201	; 0xc9
 8012f2e:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8012f30:	197b      	adds	r3, r7, r5
 8012f32:	220a      	movs	r2, #10
 8012f34:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012f36:	4bd4      	ldr	r3, [pc, #848]	; (8013288 <LoRaMacInitialization+0x464>)
 8012f38:	4ad4      	ldr	r2, [pc, #848]	; (801328c <LoRaMacInitialization+0x468>)
 8012f3a:	589b      	ldr	r3, [r3, r2]
 8012f3c:	781b      	ldrb	r3, [r3, #0]
 8012f3e:	197a      	adds	r2, r7, r5
 8012f40:	0011      	movs	r1, r2
 8012f42:	0018      	movs	r0, r3
 8012f44:	f003 fe6f 	bl	8016c26 <RegionGetPhyParam>
 8012f48:	0003      	movs	r3, r0
 8012f4a:	001a      	movs	r2, r3
 8012f4c:	193b      	adds	r3, r7, r4
 8012f4e:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;
 8012f50:	193b      	adds	r3, r7, r4
 8012f52:	6819      	ldr	r1, [r3, #0]
 8012f54:	4bcc      	ldr	r3, [pc, #816]	; (8013288 <LoRaMacInitialization+0x464>)
 8012f56:	4acd      	ldr	r2, [pc, #820]	; (801328c <LoRaMacInitialization+0x468>)
 8012f58:	589b      	ldr	r3, [r3, r2]
 8012f5a:	b24a      	sxtb	r2, r1
 8012f5c:	711a      	strb	r2, [r3, #4]

    getPhy.Attribute = PHY_DEF_TX_DR;
 8012f5e:	197b      	adds	r3, r7, r5
 8012f60:	2206      	movs	r2, #6
 8012f62:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012f64:	4bc8      	ldr	r3, [pc, #800]	; (8013288 <LoRaMacInitialization+0x464>)
 8012f66:	4ac9      	ldr	r2, [pc, #804]	; (801328c <LoRaMacInitialization+0x468>)
 8012f68:	589b      	ldr	r3, [r3, r2]
 8012f6a:	781b      	ldrb	r3, [r3, #0]
 8012f6c:	197a      	adds	r2, r7, r5
 8012f6e:	0011      	movs	r1, r2
 8012f70:	0018      	movs	r0, r3
 8012f72:	f003 fe58 	bl	8016c26 <RegionGetPhyParam>
 8012f76:	0003      	movs	r3, r0
 8012f78:	001a      	movs	r2, r3
 8012f7a:	193b      	adds	r3, r7, r4
 8012f7c:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;
 8012f7e:	193b      	adds	r3, r7, r4
 8012f80:	6819      	ldr	r1, [r3, #0]
 8012f82:	4bc1      	ldr	r3, [pc, #772]	; (8013288 <LoRaMacInitialization+0x464>)
 8012f84:	4ac1      	ldr	r2, [pc, #772]	; (801328c <LoRaMacInitialization+0x468>)
 8012f86:	589b      	ldr	r3, [r3, r2]
 8012f88:	b24a      	sxtb	r2, r1
 8012f8a:	715a      	strb	r2, [r3, #5]

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8012f8c:	197b      	adds	r3, r7, r5
 8012f8e:	2210      	movs	r2, #16
 8012f90:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012f92:	4bbd      	ldr	r3, [pc, #756]	; (8013288 <LoRaMacInitialization+0x464>)
 8012f94:	4abd      	ldr	r2, [pc, #756]	; (801328c <LoRaMacInitialization+0x468>)
 8012f96:	589b      	ldr	r3, [r3, r2]
 8012f98:	781b      	ldrb	r3, [r3, #0]
 8012f9a:	197a      	adds	r2, r7, r5
 8012f9c:	0011      	movs	r1, r2
 8012f9e:	0018      	movs	r0, r3
 8012fa0:	f003 fe41 	bl	8016c26 <RegionGetPhyParam>
 8012fa4:	0003      	movs	r3, r0
 8012fa6:	001a      	movs	r2, r3
 8012fa8:	193b      	adds	r3, r7, r4
 8012faa:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8012fac:	4bb6      	ldr	r3, [pc, #728]	; (8013288 <LoRaMacInitialization+0x464>)
 8012fae:	4ab7      	ldr	r2, [pc, #732]	; (801328c <LoRaMacInitialization+0x468>)
 8012fb0:	589b      	ldr	r3, [r3, r2]
 8012fb2:	193a      	adds	r2, r7, r4
 8012fb4:	6812      	ldr	r2, [r2, #0]
 8012fb6:	611a      	str	r2, [r3, #16]

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8012fb8:	197b      	adds	r3, r7, r5
 8012fba:	2211      	movs	r2, #17
 8012fbc:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012fbe:	4bb2      	ldr	r3, [pc, #712]	; (8013288 <LoRaMacInitialization+0x464>)
 8012fc0:	4ab2      	ldr	r2, [pc, #712]	; (801328c <LoRaMacInitialization+0x468>)
 8012fc2:	589b      	ldr	r3, [r3, r2]
 8012fc4:	781b      	ldrb	r3, [r3, #0]
 8012fc6:	197a      	adds	r2, r7, r5
 8012fc8:	0011      	movs	r1, r2
 8012fca:	0018      	movs	r0, r3
 8012fcc:	f003 fe2b 	bl	8016c26 <RegionGetPhyParam>
 8012fd0:	0003      	movs	r3, r0
 8012fd2:	001a      	movs	r2, r3
 8012fd4:	193b      	adds	r3, r7, r4
 8012fd6:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8012fd8:	4bab      	ldr	r3, [pc, #684]	; (8013288 <LoRaMacInitialization+0x464>)
 8012fda:	4aac      	ldr	r2, [pc, #688]	; (801328c <LoRaMacInitialization+0x468>)
 8012fdc:	589b      	ldr	r3, [r3, r2]
 8012fde:	193a      	adds	r2, r7, r4
 8012fe0:	6812      	ldr	r2, [r2, #0]
 8012fe2:	615a      	str	r2, [r3, #20]

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8012fe4:	197b      	adds	r3, r7, r5
 8012fe6:	2212      	movs	r2, #18
 8012fe8:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012fea:	4ba7      	ldr	r3, [pc, #668]	; (8013288 <LoRaMacInitialization+0x464>)
 8012fec:	4aa7      	ldr	r2, [pc, #668]	; (801328c <LoRaMacInitialization+0x468>)
 8012fee:	589b      	ldr	r3, [r3, r2]
 8012ff0:	781b      	ldrb	r3, [r3, #0]
 8012ff2:	197a      	adds	r2, r7, r5
 8012ff4:	0011      	movs	r1, r2
 8012ff6:	0018      	movs	r0, r3
 8012ff8:	f003 fe15 	bl	8016c26 <RegionGetPhyParam>
 8012ffc:	0003      	movs	r3, r0
 8012ffe:	001a      	movs	r2, r3
 8013000:	193b      	adds	r3, r7, r4
 8013002:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8013004:	4ba0      	ldr	r3, [pc, #640]	; (8013288 <LoRaMacInitialization+0x464>)
 8013006:	4aa1      	ldr	r2, [pc, #644]	; (801328c <LoRaMacInitialization+0x468>)
 8013008:	589b      	ldr	r3, [r3, r2]
 801300a:	193a      	adds	r2, r7, r4
 801300c:	6812      	ldr	r2, [r2, #0]
 801300e:	619a      	str	r2, [r3, #24]

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8013010:	197b      	adds	r3, r7, r5
 8013012:	2213      	movs	r2, #19
 8013014:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8013016:	4b9c      	ldr	r3, [pc, #624]	; (8013288 <LoRaMacInitialization+0x464>)
 8013018:	4a9c      	ldr	r2, [pc, #624]	; (801328c <LoRaMacInitialization+0x468>)
 801301a:	589b      	ldr	r3, [r3, r2]
 801301c:	781b      	ldrb	r3, [r3, #0]
 801301e:	197a      	adds	r2, r7, r5
 8013020:	0011      	movs	r1, r2
 8013022:	0018      	movs	r0, r3
 8013024:	f003 fdff 	bl	8016c26 <RegionGetPhyParam>
 8013028:	0003      	movs	r3, r0
 801302a:	001a      	movs	r2, r3
 801302c:	193b      	adds	r3, r7, r4
 801302e:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8013030:	4b95      	ldr	r3, [pc, #596]	; (8013288 <LoRaMacInitialization+0x464>)
 8013032:	4a96      	ldr	r2, [pc, #600]	; (801328c <LoRaMacInitialization+0x468>)
 8013034:	589b      	ldr	r3, [r3, r2]
 8013036:	193a      	adds	r2, r7, r4
 8013038:	6812      	ldr	r2, [r2, #0]
 801303a:	61da      	str	r2, [r3, #28]

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 801303c:	197b      	adds	r3, r7, r5
 801303e:	2214      	movs	r2, #20
 8013040:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8013042:	4b91      	ldr	r3, [pc, #580]	; (8013288 <LoRaMacInitialization+0x464>)
 8013044:	4a91      	ldr	r2, [pc, #580]	; (801328c <LoRaMacInitialization+0x468>)
 8013046:	589b      	ldr	r3, [r3, r2]
 8013048:	781b      	ldrb	r3, [r3, #0]
 801304a:	197a      	adds	r2, r7, r5
 801304c:	0011      	movs	r1, r2
 801304e:	0018      	movs	r0, r3
 8013050:	f003 fde9 	bl	8016c26 <RegionGetPhyParam>
 8013054:	0003      	movs	r3, r0
 8013056:	001a      	movs	r2, r3
 8013058:	193b      	adds	r3, r7, r4
 801305a:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 801305c:	4b8a      	ldr	r3, [pc, #552]	; (8013288 <LoRaMacInitialization+0x464>)
 801305e:	4a8b      	ldr	r2, [pc, #556]	; (801328c <LoRaMacInitialization+0x468>)
 8013060:	589b      	ldr	r3, [r3, r2]
 8013062:	193a      	adds	r2, r7, r4
 8013064:	6812      	ldr	r2, [r2, #0]
 8013066:	621a      	str	r2, [r3, #32]

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8013068:	197b      	adds	r3, r7, r5
 801306a:	2217      	movs	r2, #23
 801306c:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 801306e:	4b86      	ldr	r3, [pc, #536]	; (8013288 <LoRaMacInitialization+0x464>)
 8013070:	4a86      	ldr	r2, [pc, #536]	; (801328c <LoRaMacInitialization+0x468>)
 8013072:	589b      	ldr	r3, [r3, r2]
 8013074:	781b      	ldrb	r3, [r3, #0]
 8013076:	197a      	adds	r2, r7, r5
 8013078:	0011      	movs	r1, r2
 801307a:	0018      	movs	r0, r3
 801307c:	f003 fdd3 	bl	8016c26 <RegionGetPhyParam>
 8013080:	0003      	movs	r3, r0
 8013082:	001a      	movs	r2, r3
 8013084:	193b      	adds	r3, r7, r4
 8013086:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8013088:	193b      	adds	r3, r7, r4
 801308a:	6819      	ldr	r1, [r3, #0]
 801308c:	4b7e      	ldr	r3, [pc, #504]	; (8013288 <LoRaMacInitialization+0x464>)
 801308e:	4a7f      	ldr	r2, [pc, #508]	; (801328c <LoRaMacInitialization+0x468>)
 8013090:	589b      	ldr	r3, [r3, r2]
 8013092:	b2c9      	uxtb	r1, r1
 8013094:	2225      	movs	r2, #37	; 0x25
 8013096:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8013098:	197b      	adds	r3, r7, r5
 801309a:	2218      	movs	r2, #24
 801309c:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 801309e:	4b7a      	ldr	r3, [pc, #488]	; (8013288 <LoRaMacInitialization+0x464>)
 80130a0:	4a7a      	ldr	r2, [pc, #488]	; (801328c <LoRaMacInitialization+0x468>)
 80130a2:	589b      	ldr	r3, [r3, r2]
 80130a4:	781b      	ldrb	r3, [r3, #0]
 80130a6:	197a      	adds	r2, r7, r5
 80130a8:	0011      	movs	r1, r2
 80130aa:	0018      	movs	r0, r3
 80130ac:	f003 fdbb 	bl	8016c26 <RegionGetPhyParam>
 80130b0:	0003      	movs	r3, r0
 80130b2:	001a      	movs	r2, r3
 80130b4:	193b      	adds	r3, r7, r4
 80130b6:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 80130b8:	4b73      	ldr	r3, [pc, #460]	; (8013288 <LoRaMacInitialization+0x464>)
 80130ba:	4a74      	ldr	r2, [pc, #464]	; (801328c <LoRaMacInitialization+0x468>)
 80130bc:	589b      	ldr	r3, [r3, r2]
 80130be:	193a      	adds	r2, r7, r4
 80130c0:	6812      	ldr	r2, [r2, #0]
 80130c2:	629a      	str	r2, [r3, #40]	; 0x28
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 80130c4:	4b70      	ldr	r3, [pc, #448]	; (8013288 <LoRaMacInitialization+0x464>)
 80130c6:	4a71      	ldr	r2, [pc, #452]	; (801328c <LoRaMacInitialization+0x468>)
 80130c8:	589b      	ldr	r3, [r3, r2]
 80130ca:	193a      	adds	r2, r7, r4
 80130cc:	6812      	ldr	r2, [r2, #0]
 80130ce:	631a      	str	r2, [r3, #48]	; 0x30

    getPhy.Attribute = PHY_DEF_RX2_DR;
 80130d0:	197b      	adds	r3, r7, r5
 80130d2:	2219      	movs	r2, #25
 80130d4:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80130d6:	4b6c      	ldr	r3, [pc, #432]	; (8013288 <LoRaMacInitialization+0x464>)
 80130d8:	4a6c      	ldr	r2, [pc, #432]	; (801328c <LoRaMacInitialization+0x468>)
 80130da:	589b      	ldr	r3, [r3, r2]
 80130dc:	781b      	ldrb	r3, [r3, #0]
 80130de:	197a      	adds	r2, r7, r5
 80130e0:	0011      	movs	r1, r2
 80130e2:	0018      	movs	r0, r3
 80130e4:	f003 fd9f 	bl	8016c26 <RegionGetPhyParam>
 80130e8:	0003      	movs	r3, r0
 80130ea:	001a      	movs	r2, r3
 80130ec:	193b      	adds	r3, r7, r4
 80130ee:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 80130f0:	193b      	adds	r3, r7, r4
 80130f2:	6819      	ldr	r1, [r3, #0]
 80130f4:	4b64      	ldr	r3, [pc, #400]	; (8013288 <LoRaMacInitialization+0x464>)
 80130f6:	4a65      	ldr	r2, [pc, #404]	; (801328c <LoRaMacInitialization+0x468>)
 80130f8:	589b      	ldr	r3, [r3, r2]
 80130fa:	b2c9      	uxtb	r1, r1
 80130fc:	222c      	movs	r2, #44	; 0x2c
 80130fe:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8013100:	193b      	adds	r3, r7, r4
 8013102:	6819      	ldr	r1, [r3, #0]
 8013104:	4b60      	ldr	r3, [pc, #384]	; (8013288 <LoRaMacInitialization+0x464>)
 8013106:	4a61      	ldr	r2, [pc, #388]	; (801328c <LoRaMacInitialization+0x468>)
 8013108:	589b      	ldr	r3, [r3, r2]
 801310a:	b2c9      	uxtb	r1, r1
 801310c:	2234      	movs	r2, #52	; 0x34
 801310e:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8013110:	197b      	adds	r3, r7, r5
 8013112:	221e      	movs	r2, #30
 8013114:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8013116:	4b5c      	ldr	r3, [pc, #368]	; (8013288 <LoRaMacInitialization+0x464>)
 8013118:	4a5c      	ldr	r2, [pc, #368]	; (801328c <LoRaMacInitialization+0x468>)
 801311a:	589b      	ldr	r3, [r3, r2]
 801311c:	781b      	ldrb	r3, [r3, #0]
 801311e:	197a      	adds	r2, r7, r5
 8013120:	0011      	movs	r1, r2
 8013122:	0018      	movs	r0, r3
 8013124:	f003 fd7f 	bl	8016c26 <RegionGetPhyParam>
 8013128:	0003      	movs	r3, r0
 801312a:	001a      	movs	r2, r3
 801312c:	193b      	adds	r3, r7, r4
 801312e:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8013130:	193b      	adds	r3, r7, r4
 8013132:	6819      	ldr	r1, [r3, #0]
 8013134:	4b54      	ldr	r3, [pc, #336]	; (8013288 <LoRaMacInitialization+0x464>)
 8013136:	4a55      	ldr	r2, [pc, #340]	; (801328c <LoRaMacInitialization+0x468>)
 8013138:	589b      	ldr	r3, [r3, r2]
 801313a:	b2c9      	uxtb	r1, r1
 801313c:	2238      	movs	r2, #56	; 0x38
 801313e:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8013140:	197b      	adds	r3, r7, r5
 8013142:	221f      	movs	r2, #31
 8013144:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8013146:	4b50      	ldr	r3, [pc, #320]	; (8013288 <LoRaMacInitialization+0x464>)
 8013148:	4a50      	ldr	r2, [pc, #320]	; (801328c <LoRaMacInitialization+0x468>)
 801314a:	589b      	ldr	r3, [r3, r2]
 801314c:	781b      	ldrb	r3, [r3, #0]
 801314e:	197a      	adds	r2, r7, r5
 8013150:	0011      	movs	r1, r2
 8013152:	0018      	movs	r0, r3
 8013154:	f003 fd67 	bl	8016c26 <RegionGetPhyParam>
 8013158:	0003      	movs	r3, r0
 801315a:	001a      	movs	r2, r3
 801315c:	193b      	adds	r3, r7, r4
 801315e:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8013160:	193b      	adds	r3, r7, r4
 8013162:	6819      	ldr	r1, [r3, #0]
 8013164:	4b48      	ldr	r3, [pc, #288]	; (8013288 <LoRaMacInitialization+0x464>)
 8013166:	4a49      	ldr	r2, [pc, #292]	; (801328c <LoRaMacInitialization+0x468>)
 8013168:	589b      	ldr	r3, [r3, r2]
 801316a:	b2c9      	uxtb	r1, r1
 801316c:	2239      	movs	r2, #57	; 0x39
 801316e:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8013170:	197b      	adds	r3, r7, r5
 8013172:	2220      	movs	r2, #32
 8013174:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8013176:	4b44      	ldr	r3, [pc, #272]	; (8013288 <LoRaMacInitialization+0x464>)
 8013178:	4a44      	ldr	r2, [pc, #272]	; (801328c <LoRaMacInitialization+0x468>)
 801317a:	589b      	ldr	r3, [r3, r2]
 801317c:	781b      	ldrb	r3, [r3, #0]
 801317e:	197a      	adds	r2, r7, r5
 8013180:	0011      	movs	r1, r2
 8013182:	0018      	movs	r0, r3
 8013184:	f003 fd4f 	bl	8016c26 <RegionGetPhyParam>
 8013188:	0003      	movs	r3, r0
 801318a:	001a      	movs	r2, r3
 801318c:	193b      	adds	r3, r7, r4
 801318e:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.MaxEirp = phyParam.fValue;
 8013190:	4b3d      	ldr	r3, [pc, #244]	; (8013288 <LoRaMacInitialization+0x464>)
 8013192:	4a3e      	ldr	r2, [pc, #248]	; (801328c <LoRaMacInitialization+0x468>)
 8013194:	589b      	ldr	r3, [r3, r2]
 8013196:	193a      	adds	r2, r7, r4
 8013198:	6812      	ldr	r2, [r2, #0]
 801319a:	63da      	str	r2, [r3, #60]	; 0x3c

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 801319c:	197b      	adds	r3, r7, r5
 801319e:	2221      	movs	r2, #33	; 0x21
 80131a0:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80131a2:	4b39      	ldr	r3, [pc, #228]	; (8013288 <LoRaMacInitialization+0x464>)
 80131a4:	4a39      	ldr	r2, [pc, #228]	; (801328c <LoRaMacInitialization+0x468>)
 80131a6:	589b      	ldr	r3, [r3, r2]
 80131a8:	781b      	ldrb	r3, [r3, #0]
 80131aa:	197a      	adds	r2, r7, r5
 80131ac:	0011      	movs	r1, r2
 80131ae:	0018      	movs	r0, r3
 80131b0:	f003 fd39 	bl	8016c26 <RegionGetPhyParam>
 80131b4:	0003      	movs	r3, r0
 80131b6:	001a      	movs	r2, r3
 80131b8:	193b      	adds	r3, r7, r4
 80131ba:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = phyParam.fValue;
 80131bc:	4b32      	ldr	r3, [pc, #200]	; (8013288 <LoRaMacInitialization+0x464>)
 80131be:	4a33      	ldr	r2, [pc, #204]	; (801328c <LoRaMacInitialization+0x468>)
 80131c0:	589b      	ldr	r3, [r3, r2]
 80131c2:	193a      	adds	r2, r7, r4
 80131c4:	6812      	ldr	r2, [r2, #0]
 80131c6:	641a      	str	r2, [r3, #64]	; 0x40

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 80131c8:	197b      	adds	r3, r7, r5
 80131ca:	220b      	movs	r2, #11
 80131cc:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80131ce:	4b2e      	ldr	r3, [pc, #184]	; (8013288 <LoRaMacInitialization+0x464>)
 80131d0:	4a2e      	ldr	r2, [pc, #184]	; (801328c <LoRaMacInitialization+0x468>)
 80131d2:	589b      	ldr	r3, [r3, r2]
 80131d4:	781b      	ldrb	r3, [r3, #0]
 80131d6:	197a      	adds	r2, r7, r5
 80131d8:	0011      	movs	r1, r2
 80131da:	0018      	movs	r0, r3
 80131dc:	f003 fd23 	bl	8016c26 <RegionGetPhyParam>
 80131e0:	0003      	movs	r3, r0
 80131e2:	001a      	movs	r2, r3
 80131e4:	193b      	adds	r3, r7, r4
 80131e6:	601a      	str	r2, [r3, #0]
    MacCtx.AdrAckLimit = phyParam.Value;
 80131e8:	193b      	adds	r3, r7, r4
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	b299      	uxth	r1, r3
 80131ee:	4a26      	ldr	r2, [pc, #152]	; (8013288 <LoRaMacInitialization+0x464>)
 80131f0:	23fd      	movs	r3, #253	; 0xfd
 80131f2:	009b      	lsls	r3, r3, #2
 80131f4:	52d1      	strh	r1, [r2, r3]

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 80131f6:	197b      	adds	r3, r7, r5
 80131f8:	220c      	movs	r2, #12
 80131fa:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80131fc:	4b22      	ldr	r3, [pc, #136]	; (8013288 <LoRaMacInitialization+0x464>)
 80131fe:	4a23      	ldr	r2, [pc, #140]	; (801328c <LoRaMacInitialization+0x468>)
 8013200:	589b      	ldr	r3, [r3, r2]
 8013202:	781b      	ldrb	r3, [r3, #0]
 8013204:	197a      	adds	r2, r7, r5
 8013206:	0011      	movs	r1, r2
 8013208:	0018      	movs	r0, r3
 801320a:	f003 fd0c 	bl	8016c26 <RegionGetPhyParam>
 801320e:	0003      	movs	r3, r0
 8013210:	001a      	movs	r2, r3
 8013212:	193b      	adds	r3, r7, r4
 8013214:	601a      	str	r2, [r3, #0]
    MacCtx.AdrAckDelay = phyParam.Value;
 8013216:	193b      	adds	r3, r7, r4
 8013218:	681b      	ldr	r3, [r3, #0]
 801321a:	b299      	uxth	r1, r3
 801321c:	4b1a      	ldr	r3, [pc, #104]	; (8013288 <LoRaMacInitialization+0x464>)
 801321e:	4a1f      	ldr	r2, [pc, #124]	; (801329c <LoRaMacInitialization+0x478>)
 8013220:	5299      	strh	r1, [r3, r2]

    // Init parameters which are not set in function ResetMacParameters
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans = 1;
 8013222:	4b19      	ldr	r3, [pc, #100]	; (8013288 <LoRaMacInitialization+0x464>)
 8013224:	4a19      	ldr	r2, [pc, #100]	; (801328c <LoRaMacInitialization+0x468>)
 8013226:	589b      	ldr	r3, [r3, r2]
 8013228:	2224      	movs	r2, #36	; 0x24
 801322a:	2101      	movs	r1, #1
 801322c:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = 10;
 801322e:	4b16      	ldr	r3, [pc, #88]	; (8013288 <LoRaMacInitialization+0x464>)
 8013230:	4a16      	ldr	r2, [pc, #88]	; (801328c <LoRaMacInitialization+0x468>)
 8013232:	589b      	ldr	r3, [r3, r2]
 8013234:	220a      	movs	r2, #10
 8013236:	609a      	str	r2, [r3, #8]
    MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = 6;
 8013238:	4b13      	ldr	r3, [pc, #76]	; (8013288 <LoRaMacInitialization+0x464>)
 801323a:	4a14      	ldr	r2, [pc, #80]	; (801328c <LoRaMacInitialization+0x468>)
 801323c:	589b      	ldr	r3, [r3, r2]
 801323e:	2206      	movs	r2, #6
 8013240:	731a      	strb	r2, [r3, #12]

    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
 8013242:	4b11      	ldr	r3, [pc, #68]	; (8013288 <LoRaMacInitialization+0x464>)
 8013244:	4a11      	ldr	r2, [pc, #68]	; (801328c <LoRaMacInitialization+0x468>)
 8013246:	589b      	ldr	r3, [r3, r2]
 8013248:	4a0f      	ldr	r2, [pc, #60]	; (8013288 <LoRaMacInitialization+0x464>)
 801324a:	4910      	ldr	r1, [pc, #64]	; (801328c <LoRaMacInitialization+0x468>)
 801324c:	5852      	ldr	r2, [r2, r1]
 801324e:	689b      	ldr	r3, [r3, #8]
 8013250:	2188      	movs	r1, #136	; 0x88
 8013252:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols;
 8013254:	4b0c      	ldr	r3, [pc, #48]	; (8013288 <LoRaMacInitialization+0x464>)
 8013256:	4a0d      	ldr	r2, [pc, #52]	; (801328c <LoRaMacInitialization+0x468>)
 8013258:	589a      	ldr	r2, [r3, r2]
 801325a:	4b0b      	ldr	r3, [pc, #44]	; (8013288 <LoRaMacInitialization+0x464>)
 801325c:	490b      	ldr	r1, [pc, #44]	; (801328c <LoRaMacInitialization+0x468>)
 801325e:	585b      	ldr	r3, [r3, r1]
 8013260:	7b11      	ldrb	r1, [r2, #12]
 8013262:	228c      	movs	r2, #140	; 0x8c
 8013264:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.MaxRxWindow = MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow;
 8013266:	4b08      	ldr	r3, [pc, #32]	; (8013288 <LoRaMacInitialization+0x464>)
 8013268:	4a08      	ldr	r2, [pc, #32]	; (801328c <LoRaMacInitialization+0x468>)
 801326a:	589b      	ldr	r3, [r3, r2]
 801326c:	4a06      	ldr	r2, [pc, #24]	; (8013288 <LoRaMacInitialization+0x464>)
 801326e:	4907      	ldr	r1, [pc, #28]	; (801328c <LoRaMacInitialization+0x468>)
 8013270:	5852      	ldr	r2, [r2, r1]
 8013272:	691b      	ldr	r3, [r3, #16]
 8013274:	2190      	movs	r1, #144	; 0x90
 8013276:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1;
 8013278:	4b03      	ldr	r3, [pc, #12]	; (8013288 <LoRaMacInitialization+0x464>)
 801327a:	e011      	b.n	80132a0 <LoRaMacInitialization+0x47c>
 801327c:	08012d21 	.word	0x08012d21
 8013280:	20000a40 	.word	0x20000a40
 8013284:	0000048c 	.word	0x0000048c
 8013288:	200005b4 	.word	0x200005b4
 801328c:	00000484 	.word	0x00000484
 8013290:	00000412 	.word	0x00000412
 8013294:	00000411 	.word	0x00000411
 8013298:	01000300 	.word	0x01000300
 801329c:	000003f6 	.word	0x000003f6
 80132a0:	4a9a      	ldr	r2, [pc, #616]	; (801350c <LoRaMacInitialization+0x6e8>)
 80132a2:	589b      	ldr	r3, [r3, r2]
 80132a4:	4a9a      	ldr	r2, [pc, #616]	; (8013510 <LoRaMacInitialization+0x6ec>)
 80132a6:	4999      	ldr	r1, [pc, #612]	; (801350c <LoRaMacInitialization+0x6e8>)
 80132a8:	5852      	ldr	r2, [r2, r1]
 80132aa:	695b      	ldr	r3, [r3, #20]
 80132ac:	2194      	movs	r1, #148	; 0x94
 80132ae:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2;
 80132b0:	4b97      	ldr	r3, [pc, #604]	; (8013510 <LoRaMacInitialization+0x6ec>)
 80132b2:	4a96      	ldr	r2, [pc, #600]	; (801350c <LoRaMacInitialization+0x6e8>)
 80132b4:	589b      	ldr	r3, [r3, r2]
 80132b6:	4a96      	ldr	r2, [pc, #600]	; (8013510 <LoRaMacInitialization+0x6ec>)
 80132b8:	4994      	ldr	r1, [pc, #592]	; (801350c <LoRaMacInitialization+0x6e8>)
 80132ba:	5852      	ldr	r2, [r2, r1]
 80132bc:	699b      	ldr	r3, [r3, #24]
 80132be:	2198      	movs	r1, #152	; 0x98
 80132c0:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1;
 80132c2:	4b93      	ldr	r3, [pc, #588]	; (8013510 <LoRaMacInitialization+0x6ec>)
 80132c4:	4a91      	ldr	r2, [pc, #580]	; (801350c <LoRaMacInitialization+0x6e8>)
 80132c6:	589b      	ldr	r3, [r3, r2]
 80132c8:	4a91      	ldr	r2, [pc, #580]	; (8013510 <LoRaMacInitialization+0x6ec>)
 80132ca:	4990      	ldr	r1, [pc, #576]	; (801350c <LoRaMacInitialization+0x6e8>)
 80132cc:	5852      	ldr	r2, [r2, r1]
 80132ce:	69db      	ldr	r3, [r3, #28]
 80132d0:	219c      	movs	r1, #156	; 0x9c
 80132d2:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2;
 80132d4:	4b8e      	ldr	r3, [pc, #568]	; (8013510 <LoRaMacInitialization+0x6ec>)
 80132d6:	4a8d      	ldr	r2, [pc, #564]	; (801350c <LoRaMacInitialization+0x6e8>)
 80132d8:	589b      	ldr	r3, [r3, r2]
 80132da:	4a8d      	ldr	r2, [pc, #564]	; (8013510 <LoRaMacInitialization+0x6ec>)
 80132dc:	498b      	ldr	r1, [pc, #556]	; (801350c <LoRaMacInitialization+0x6e8>)
 80132de:	5852      	ldr	r2, [r2, r1]
 80132e0:	6a1b      	ldr	r3, [r3, #32]
 80132e2:	21a0      	movs	r1, #160	; 0xa0
 80132e4:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.ChannelsNbTrans = MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans;
 80132e6:	4b8a      	ldr	r3, [pc, #552]	; (8013510 <LoRaMacInitialization+0x6ec>)
 80132e8:	4a88      	ldr	r2, [pc, #544]	; (801350c <LoRaMacInitialization+0x6e8>)
 80132ea:	589a      	ldr	r2, [r3, r2]
 80132ec:	4b88      	ldr	r3, [pc, #544]	; (8013510 <LoRaMacInitialization+0x6ec>)
 80132ee:	4987      	ldr	r1, [pc, #540]	; (801350c <LoRaMacInitialization+0x6e8>)
 80132f0:	585b      	ldr	r3, [r3, r1]
 80132f2:	2124      	movs	r1, #36	; 0x24
 80132f4:	5c51      	ldrb	r1, [r2, r1]
 80132f6:	22a4      	movs	r2, #164	; 0xa4
 80132f8:	5499      	strb	r1, [r3, r2]

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 80132fa:	211c      	movs	r1, #28
 80132fc:	187b      	adds	r3, r7, r1
 80132fe:	2200      	movs	r2, #0
 8013300:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = NULL;
 8013302:	187b      	adds	r3, r7, r1
 8013304:	2200      	movs	r2, #0
 8013306:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8013308:	4b81      	ldr	r3, [pc, #516]	; (8013510 <LoRaMacInitialization+0x6ec>)
 801330a:	4a80      	ldr	r2, [pc, #512]	; (801350c <LoRaMacInitialization+0x6e8>)
 801330c:	589b      	ldr	r3, [r3, r2]
 801330e:	781b      	ldrb	r3, [r3, #0]
 8013310:	187a      	adds	r2, r7, r1
 8013312:	0011      	movs	r1, r2
 8013314:	0018      	movs	r0, r3
 8013316:	f003 fcc2 	bl	8016c9e <RegionInitDefaults>

    ResetMacParameters( );
 801331a:	f7fe fe19 	bl	8011f50 <ResetMacParameters>

    MacCtx.NvmCtx->PublicNetwork = true;
 801331e:	4b7c      	ldr	r3, [pc, #496]	; (8013510 <LoRaMacInitialization+0x6ec>)
 8013320:	4a7a      	ldr	r2, [pc, #488]	; (801350c <LoRaMacInitialization+0x6e8>)
 8013322:	589b      	ldr	r3, [r3, r2]
 8013324:	227d      	movs	r2, #125	; 0x7d
 8013326:	2101      	movs	r1, #1
 8013328:	5499      	strb	r1, [r3, r2]

    MacCtx.MacPrimitives = primitives;
 801332a:	4a79      	ldr	r2, [pc, #484]	; (8013510 <LoRaMacInitialization+0x6ec>)
 801332c:	23d1      	movs	r3, #209	; 0xd1
 801332e:	009b      	lsls	r3, r3, #2
 8013330:	6979      	ldr	r1, [r7, #20]
 8013332:	50d1      	str	r1, [r2, r3]
    MacCtx.MacCallbacks = callbacks;
 8013334:	4a76      	ldr	r2, [pc, #472]	; (8013510 <LoRaMacInitialization+0x6ec>)
 8013336:	23d2      	movs	r3, #210	; 0xd2
 8013338:	009b      	lsls	r3, r3, #2
 801333a:	6939      	ldr	r1, [r7, #16]
 801333c:	50d1      	str	r1, [r2, r3]
    MacCtx.MacFlags.Value = 0;
 801333e:	4b74      	ldr	r3, [pc, #464]	; (8013510 <LoRaMacInitialization+0x6ec>)
 8013340:	4a74      	ldr	r2, [pc, #464]	; (8013514 <LoRaMacInitialization+0x6f0>)
 8013342:	2100      	movs	r1, #0
 8013344:	5499      	strb	r1, [r3, r2]
    MacCtx.MacState = LORAMAC_STOPPED;
 8013346:	4a72      	ldr	r2, [pc, #456]	; (8013510 <LoRaMacInitialization+0x6ec>)
 8013348:	23d0      	movs	r3, #208	; 0xd0
 801334a:	009b      	lsls	r3, r3, #2
 801334c:	2101      	movs	r1, #1
 801334e:	50d1      	str	r1, [r2, r3]

    // Reset duty cycle times
    MacCtx.NvmCtx->LastTxDoneTime = 0;
 8013350:	4b6f      	ldr	r3, [pc, #444]	; (8013510 <LoRaMacInitialization+0x6ec>)
 8013352:	4a6e      	ldr	r2, [pc, #440]	; (801350c <LoRaMacInitialization+0x6e8>)
 8013354:	589a      	ldr	r2, [r3, r2]
 8013356:	23a8      	movs	r3, #168	; 0xa8
 8013358:	005b      	lsls	r3, r3, #1
 801335a:	2100      	movs	r1, #0
 801335c:	50d1      	str	r1, [r2, r3]
    MacCtx.NvmCtx->AggregatedTimeOff = 0;
 801335e:	4b6c      	ldr	r3, [pc, #432]	; (8013510 <LoRaMacInitialization+0x6ec>)
 8013360:	4a6a      	ldr	r2, [pc, #424]	; (801350c <LoRaMacInitialization+0x6e8>)
 8013362:	589a      	ldr	r2, [r3, r2]
 8013364:	23aa      	movs	r3, #170	; 0xaa
 8013366:	005b      	lsls	r3, r3, #1
 8013368:	2100      	movs	r1, #0
 801336a:	50d1      	str	r1, [r2, r3]

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 801336c:	4b6a      	ldr	r3, [pc, #424]	; (8013518 <LoRaMacInitialization+0x6f4>)
 801336e:	2201      	movs	r2, #1
 8013370:	4251      	negs	r1, r2
 8013372:	486a      	ldr	r0, [pc, #424]	; (801351c <LoRaMacInitialization+0x6f8>)
 8013374:	2200      	movs	r2, #0
 8013376:	9200      	str	r2, [sp, #0]
 8013378:	2200      	movs	r2, #0
 801337a:	f009 fbeb 	bl	801cb54 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 801337e:	4b68      	ldr	r3, [pc, #416]	; (8013520 <LoRaMacInitialization+0x6fc>)
 8013380:	2201      	movs	r2, #1
 8013382:	4251      	negs	r1, r2
 8013384:	4867      	ldr	r0, [pc, #412]	; (8013524 <LoRaMacInitialization+0x700>)
 8013386:	2200      	movs	r2, #0
 8013388:	9200      	str	r2, [sp, #0]
 801338a:	2200      	movs	r2, #0
 801338c:	f009 fbe2 	bl	801cb54 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8013390:	4b65      	ldr	r3, [pc, #404]	; (8013528 <LoRaMacInitialization+0x704>)
 8013392:	2201      	movs	r2, #1
 8013394:	4251      	negs	r1, r2
 8013396:	4865      	ldr	r0, [pc, #404]	; (801352c <LoRaMacInitialization+0x708>)
 8013398:	2200      	movs	r2, #0
 801339a:	9200      	str	r2, [sp, #0]
 801339c:	2200      	movs	r2, #0
 801339e:	f009 fbd9 	bl	801cb54 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 80133a2:	4b63      	ldr	r3, [pc, #396]	; (8013530 <LoRaMacInitialization+0x70c>)
 80133a4:	2201      	movs	r2, #1
 80133a6:	4251      	negs	r1, r2
 80133a8:	4862      	ldr	r0, [pc, #392]	; (8013534 <LoRaMacInitialization+0x710>)
 80133aa:	2200      	movs	r2, #0
 80133ac:	9200      	str	r2, [sp, #0]
 80133ae:	2200      	movs	r2, #0
 80133b0:	f009 fbd0 	bl	801cb54 <UTIL_TIMER_Create>

    // Store the current initialization time
    MacCtx.NvmCtx->InitializationTime = SysTimeGetMcuTime( );
 80133b4:	4b56      	ldr	r3, [pc, #344]	; (8013510 <LoRaMacInitialization+0x6ec>)
 80133b6:	4a55      	ldr	r2, [pc, #340]	; (801350c <LoRaMacInitialization+0x6e8>)
 80133b8:	589d      	ldr	r5, [r3, r2]
 80133ba:	23ac      	movs	r3, #172	; 0xac
 80133bc:	005c      	lsls	r4, r3, #1
 80133be:	003b      	movs	r3, r7
 80133c0:	0018      	movs	r0, r3
 80133c2:	f009 fb97 	bl	801caf4 <SysTimeGetMcuTime>
 80133c6:	003a      	movs	r2, r7
 80133c8:	192b      	adds	r3, r5, r4
 80133ca:	ca03      	ldmia	r2!, {r0, r1}
 80133cc:	c303      	stmia	r3!, {r0, r1}

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 80133ce:	4a50      	ldr	r2, [pc, #320]	; (8013510 <LoRaMacInitialization+0x6ec>)
 80133d0:	23d3      	movs	r3, #211	; 0xd3
 80133d2:	009b      	lsls	r3, r3, #2
 80133d4:	4958      	ldr	r1, [pc, #352]	; (8013538 <LoRaMacInitialization+0x714>)
 80133d6:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 80133d8:	4a4d      	ldr	r2, [pc, #308]	; (8013510 <LoRaMacInitialization+0x6ec>)
 80133da:	23d5      	movs	r3, #213	; 0xd5
 80133dc:	009b      	lsls	r3, r3, #2
 80133de:	4957      	ldr	r1, [pc, #348]	; (801353c <LoRaMacInitialization+0x718>)
 80133e0:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 80133e2:	4a4b      	ldr	r2, [pc, #300]	; (8013510 <LoRaMacInitialization+0x6ec>)
 80133e4:	23d7      	movs	r3, #215	; 0xd7
 80133e6:	009b      	lsls	r3, r3, #2
 80133e8:	4955      	ldr	r1, [pc, #340]	; (8013540 <LoRaMacInitialization+0x71c>)
 80133ea:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 80133ec:	4a48      	ldr	r2, [pc, #288]	; (8013510 <LoRaMacInitialization+0x6ec>)
 80133ee:	23d4      	movs	r3, #212	; 0xd4
 80133f0:	009b      	lsls	r3, r3, #2
 80133f2:	4954      	ldr	r1, [pc, #336]	; (8013544 <LoRaMacInitialization+0x720>)
 80133f4:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 80133f6:	4a46      	ldr	r2, [pc, #280]	; (8013510 <LoRaMacInitialization+0x6ec>)
 80133f8:	23d6      	movs	r3, #214	; 0xd6
 80133fa:	009b      	lsls	r3, r3, #2
 80133fc:	4952      	ldr	r1, [pc, #328]	; (8013548 <LoRaMacInitialization+0x724>)
 80133fe:	50d1      	str	r1, [r2, r3]
    Radio.Init( &MacCtx.RadioEvents );
 8013400:	4b52      	ldr	r3, [pc, #328]	; (801354c <LoRaMacInitialization+0x728>)
 8013402:	681b      	ldr	r3, [r3, #0]
 8013404:	4a52      	ldr	r2, [pc, #328]	; (8013550 <LoRaMacInitialization+0x72c>)
 8013406:	0010      	movs	r0, r2
 8013408:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( EventSecureElementNvmCtxChanged ) != SECURE_ELEMENT_SUCCESS )
 801340a:	4b52      	ldr	r3, [pc, #328]	; (8013554 <LoRaMacInitialization+0x730>)
 801340c:	0018      	movs	r0, r3
 801340e:	f7fa f813 	bl	800d438 <SecureElementInit>
 8013412:	1e03      	subs	r3, r0, #0
 8013414:	d001      	beq.n	801341a <LoRaMacInitialization+0x5f6>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8013416:	2311      	movs	r3, #17
 8013418:	e073      	b.n	8013502 <LoRaMacInitialization+0x6de>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( EventCryptoNvmCtxChanged ) != LORAMAC_CRYPTO_SUCCESS )
 801341a:	4b4f      	ldr	r3, [pc, #316]	; (8013558 <LoRaMacInitialization+0x734>)
 801341c:	0018      	movs	r0, r3
 801341e:	f002 fc0d 	bl	8015c3c <LoRaMacCryptoInit>
 8013422:	1e03      	subs	r3, r0, #0
 8013424:	d001      	beq.n	801342a <LoRaMacInitialization+0x606>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8013426:	2311      	movs	r3, #17
 8013428:	e06b      	b.n	8013502 <LoRaMacInitialization+0x6de>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( EventCommandsNvmCtxChanged ) != LORAMAC_COMMANDS_SUCCESS )
 801342a:	4b4c      	ldr	r3, [pc, #304]	; (801355c <LoRaMacInitialization+0x738>)
 801342c:	0018      	movs	r0, r3
 801342e:	f001 fc0d 	bl	8014c4c <LoRaMacCommandsInit>
 8013432:	1e03      	subs	r3, r0, #0
 8013434:	d001      	beq.n	801343a <LoRaMacInitialization+0x616>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013436:	2313      	movs	r3, #19
 8013438:	e063      	b.n	8013502 <LoRaMacInitialization+0x6de>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( MacCtx.NvmCtx->MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 801343a:	4b35      	ldr	r3, [pc, #212]	; (8013510 <LoRaMacInitialization+0x6ec>)
 801343c:	4a33      	ldr	r2, [pc, #204]	; (801350c <LoRaMacInitialization+0x6e8>)
 801343e:	589b      	ldr	r3, [r3, r2]
 8013440:	3350      	adds	r3, #80	; 0x50
 8013442:	0018      	movs	r0, r3
 8013444:	f002 fd10 	bl	8015e68 <LoRaMacCryptoSetMulticastReference>
 8013448:	1e03      	subs	r3, r0, #0
 801344a:	d001      	beq.n	8013450 <LoRaMacInitialization+0x62c>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 801344c:	2311      	movs	r3, #17
 801344e:	e058      	b.n	8013502 <LoRaMacInitialization+0x6de>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8013450:	4b3e      	ldr	r3, [pc, #248]	; (801354c <LoRaMacInitialization+0x728>)
 8013452:	695b      	ldr	r3, [r3, #20]
 8013454:	4798      	blx	r3
 8013456:	0003      	movs	r3, r0
 8013458:	0018      	movs	r0, r3
 801345a:	f006 f84f 	bl	80194fc <srand1>

    Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 801345e:	4b3b      	ldr	r3, [pc, #236]	; (801354c <LoRaMacInitialization+0x728>)
 8013460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013462:	4a2b      	ldr	r2, [pc, #172]	; (8013510 <LoRaMacInitialization+0x6ec>)
 8013464:	4929      	ldr	r1, [pc, #164]	; (801350c <LoRaMacInitialization+0x6e8>)
 8013466:	5852      	ldr	r2, [r2, r1]
 8013468:	217d      	movs	r1, #125	; 0x7d
 801346a:	5c52      	ldrb	r2, [r2, r1]
 801346c:	0010      	movs	r0, r2
 801346e:	4798      	blx	r3
    Radio.Sleep( );
 8013470:	4b36      	ldr	r3, [pc, #216]	; (801354c <LoRaMacInitialization+0x728>)
 8013472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013474:	4798      	blx	r3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 8013476:	2144      	movs	r1, #68	; 0x44
 8013478:	187b      	adds	r3, r7, r1
 801347a:	2200      	movs	r2, #0
 801347c:	601a      	str	r2, [r3, #0]
    classBCallbacks.MacProcessNotify = NULL;
 801347e:	187b      	adds	r3, r7, r1
 8013480:	2200      	movs	r2, #0
 8013482:	605a      	str	r2, [r3, #4]
    if( callbacks != NULL )
 8013484:	693b      	ldr	r3, [r7, #16]
 8013486:	2b00      	cmp	r3, #0
 8013488:	d007      	beq.n	801349a <LoRaMacInitialization+0x676>
    {
        classBCallbacks.GetTemperatureLevel = callbacks->GetTemperatureLevel;
 801348a:	693b      	ldr	r3, [r7, #16]
 801348c:	685a      	ldr	r2, [r3, #4]
 801348e:	187b      	adds	r3, r7, r1
 8013490:	601a      	str	r2, [r3, #0]
        classBCallbacks.MacProcessNotify = callbacks->MacProcessNotify;
 8013492:	693b      	ldr	r3, [r7, #16]
 8013494:	68da      	ldr	r2, [r3, #12]
 8013496:	187b      	adds	r3, r7, r1
 8013498:	605a      	str	r2, [r3, #4]
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 801349a:	2124      	movs	r1, #36	; 0x24
 801349c:	187b      	adds	r3, r7, r1
 801349e:	4a30      	ldr	r2, [pc, #192]	; (8013560 <LoRaMacInitialization+0x73c>)
 80134a0:	601a      	str	r2, [r3, #0]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 80134a2:	187b      	adds	r3, r7, r1
 80134a4:	4a2f      	ldr	r2, [pc, #188]	; (8013564 <LoRaMacInitialization+0x740>)
 80134a6:	605a      	str	r2, [r3, #4]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 80134a8:	187b      	adds	r3, r7, r1
 80134aa:	4a2f      	ldr	r2, [pc, #188]	; (8013568 <LoRaMacInitialization+0x744>)
 80134ac:	609a      	str	r2, [r3, #8]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 80134ae:	187b      	adds	r3, r7, r1
 80134b0:	4a2e      	ldr	r2, [pc, #184]	; (801356c <LoRaMacInitialization+0x748>)
 80134b2:	60da      	str	r2, [r3, #12]
    classBParams.LoRaMacDevAddr = &MacCtx.NvmCtx->DevAddr;
 80134b4:	4b16      	ldr	r3, [pc, #88]	; (8013510 <LoRaMacInitialization+0x6ec>)
 80134b6:	4a15      	ldr	r2, [pc, #84]	; (801350c <LoRaMacInitialization+0x6e8>)
 80134b8:	589b      	ldr	r3, [r3, r2]
 80134ba:	334c      	adds	r3, #76	; 0x4c
 80134bc:	001a      	movs	r2, r3
 80134be:	187b      	adds	r3, r7, r1
 80134c0:	611a      	str	r2, [r3, #16]
    classBParams.LoRaMacRegion = &MacCtx.NvmCtx->Region;
 80134c2:	4b13      	ldr	r3, [pc, #76]	; (8013510 <LoRaMacInitialization+0x6ec>)
 80134c4:	4a11      	ldr	r2, [pc, #68]	; (801350c <LoRaMacInitialization+0x6e8>)
 80134c6:	589b      	ldr	r3, [r3, r2]
 80134c8:	001a      	movs	r2, r3
 80134ca:	187b      	adds	r3, r7, r1
 80134cc:	615a      	str	r2, [r3, #20]
    classBParams.LoRaMacParams = &MacCtx.NvmCtx->MacParams;
 80134ce:	4b10      	ldr	r3, [pc, #64]	; (8013510 <LoRaMacInitialization+0x6ec>)
 80134d0:	4a0e      	ldr	r2, [pc, #56]	; (801350c <LoRaMacInitialization+0x6e8>)
 80134d2:	589b      	ldr	r3, [r3, r2]
 80134d4:	3384      	adds	r3, #132	; 0x84
 80134d6:	001a      	movs	r2, r3
 80134d8:	187b      	adds	r3, r7, r1
 80134da:	619a      	str	r2, [r3, #24]
    classBParams.MulticastChannels = &MacCtx.NvmCtx->MulticastChannelList[0];
 80134dc:	4b0c      	ldr	r3, [pc, #48]	; (8013510 <LoRaMacInitialization+0x6ec>)
 80134de:	4a0b      	ldr	r2, [pc, #44]	; (801350c <LoRaMacInitialization+0x6e8>)
 80134e0:	589b      	ldr	r3, [r3, r2]
 80134e2:	3350      	adds	r3, #80	; 0x50
 80134e4:	001a      	movs	r2, r3
 80134e6:	0008      	movs	r0, r1
 80134e8:	187b      	adds	r3, r7, r1
 80134ea:	61da      	str	r2, [r3, #28]

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
 80134ec:	4a20      	ldr	r2, [pc, #128]	; (8013570 <LoRaMacInitialization+0x74c>)
 80134ee:	2344      	movs	r3, #68	; 0x44
 80134f0:	18f9      	adds	r1, r7, r3
 80134f2:	183b      	adds	r3, r7, r0
 80134f4:	0018      	movs	r0, r3
 80134f6:	f001 f994 	bl	8014822 <LoRaMacClassBInit>

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 80134fa:	2001      	movs	r0, #1
 80134fc:	f7fc fe10 	bl	8010120 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8013500:	2300      	movs	r3, #0
}
 8013502:	0018      	movs	r0, r3
 8013504:	46bd      	mov	sp, r7
 8013506:	b016      	add	sp, #88	; 0x58
 8013508:	bdb0      	pop	{r4, r5, r7, pc}
 801350a:	46c0      	nop			; (mov r8, r8)
 801350c:	00000484 	.word	0x00000484
 8013510:	200005b4 	.word	0x200005b4
 8013514:	00000481 	.word	0x00000481
 8013518:	08010525 	.word	0x08010525
 801351c:	2000091c 	.word	0x2000091c
 8013520:	080105b1 	.word	0x080105b1
 8013524:	20000934 	.word	0x20000934
 8013528:	08010645 	.word	0x08010645
 801352c:	2000094c 	.word	0x2000094c
 8013530:	080106e1 	.word	0x080106e1
 8013534:	200009ac 	.word	0x200009ac
 8013538:	0800efc9 	.word	0x0800efc9
 801353c:	0800f045 	.word	0x0800f045
 8013540:	0800f139 	.word	0x0800f139
 8013544:	0800f0e5 	.word	0x0800f0e5
 8013548:	0800f17d 	.word	0x0800f17d
 801354c:	0801fb64 	.word	0x0801fb64
 8013550:	20000900 	.word	0x20000900
 8013554:	08012cf1 	.word	0x08012cf1
 8013558:	08012ce1 	.word	0x08012ce1
 801355c:	08012d01 	.word	0x08012d01
 8013560:	20000a18 	.word	0x20000a18
 8013564:	200009d0 	.word	0x200009d0
 8013568:	20000a04 	.word	0x20000a04
 801356c:	20000a35 	.word	0x20000a35
 8013570:	08012d11 	.word	0x08012d11

08013574 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8013574:	b580      	push	{r7, lr}
 8013576:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8013578:	4a04      	ldr	r2, [pc, #16]	; (801358c <LoRaMacStart+0x18>)
 801357a:	23d0      	movs	r3, #208	; 0xd0
 801357c:	009b      	lsls	r3, r3, #2
 801357e:	2100      	movs	r1, #0
 8013580:	50d1      	str	r1, [r2, r3]
    return LORAMAC_STATUS_OK;
 8013582:	2300      	movs	r3, #0
}
 8013584:	0018      	movs	r0, r3
 8013586:	46bd      	mov	sp, r7
 8013588:	bd80      	pop	{r7, pc}
 801358a:	46c0      	nop			; (mov r8, r8)
 801358c:	200005b4 	.word	0x200005b4

08013590 <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8013590:	b590      	push	{r4, r7, lr}
 8013592:	b08b      	sub	sp, #44	; 0x2c
 8013594:	af00      	add	r7, sp, #0
 8013596:	0002      	movs	r2, r0
 8013598:	6039      	str	r1, [r7, #0]
 801359a:	1dfb      	adds	r3, r7, #7
 801359c:	701a      	strb	r2, [r3, #0]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 801359e:	4b4f      	ldr	r3, [pc, #316]	; (80136dc <LoRaMacQueryTxPossible+0x14c>)
 80135a0:	4a4f      	ldr	r2, [pc, #316]	; (80136e0 <LoRaMacQueryTxPossible+0x150>)
 80135a2:	589b      	ldr	r3, [r3, r2]
 80135a4:	2280      	movs	r2, #128	; 0x80
 80135a6:	589b      	ldr	r3, [r3, r2]
 80135a8:	613b      	str	r3, [r7, #16]
    int8_t datarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 80135aa:	4b4c      	ldr	r3, [pc, #304]	; (80136dc <LoRaMacQueryTxPossible+0x14c>)
 80135ac:	4a4c      	ldr	r2, [pc, #304]	; (80136e0 <LoRaMacQueryTxPossible+0x150>)
 80135ae:	589b      	ldr	r3, [r3, r2]
 80135b0:	2205      	movs	r2, #5
 80135b2:	569a      	ldrsb	r2, [r3, r2]
 80135b4:	230f      	movs	r3, #15
 80135b6:	18fb      	adds	r3, r7, r3
 80135b8:	701a      	strb	r2, [r3, #0]
    int8_t txPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 80135ba:	4b48      	ldr	r3, [pc, #288]	; (80136dc <LoRaMacQueryTxPossible+0x14c>)
 80135bc:	4a48      	ldr	r2, [pc, #288]	; (80136e0 <LoRaMacQueryTxPossible+0x150>)
 80135be:	589b      	ldr	r3, [r3, r2]
 80135c0:	2204      	movs	r2, #4
 80135c2:	569a      	ldrsb	r2, [r3, r2]
 80135c4:	230e      	movs	r3, #14
 80135c6:	18fb      	adds	r3, r7, r3
 80135c8:	701a      	strb	r2, [r3, #0]
    size_t macCmdsSize = 0;
 80135ca:	2300      	movs	r3, #0
 80135cc:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 80135ce:	683b      	ldr	r3, [r7, #0]
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d101      	bne.n	80135d8 <LoRaMacQueryTxPossible+0x48>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80135d4:	2303      	movs	r3, #3
 80135d6:	e07d      	b.n	80136d4 <LoRaMacQueryTxPossible+0x144>
    }

    // Setup ADR request
    adrNext.Version = MacCtx.NvmCtx->Version;
 80135d8:	4b40      	ldr	r3, [pc, #256]	; (80136dc <LoRaMacQueryTxPossible+0x14c>)
 80135da:	4a41      	ldr	r2, [pc, #260]	; (80136e0 <LoRaMacQueryTxPossible+0x150>)
 80135dc:	5899      	ldr	r1, [r3, r2]
 80135de:	2014      	movs	r0, #20
 80135e0:	183b      	adds	r3, r7, r0
 80135e2:	22b0      	movs	r2, #176	; 0xb0
 80135e4:	0052      	lsls	r2, r2, #1
 80135e6:	588a      	ldr	r2, [r1, r2]
 80135e8:	601a      	str	r2, [r3, #0]
    adrNext.UpdateChanMask = false;
 80135ea:	183b      	adds	r3, r7, r0
 80135ec:	2200      	movs	r2, #0
 80135ee:	711a      	strb	r2, [r3, #4]
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 80135f0:	4b3a      	ldr	r3, [pc, #232]	; (80136dc <LoRaMacQueryTxPossible+0x14c>)
 80135f2:	4a3b      	ldr	r2, [pc, #236]	; (80136e0 <LoRaMacQueryTxPossible+0x150>)
 80135f4:	589b      	ldr	r3, [r3, r2]
 80135f6:	227e      	movs	r2, #126	; 0x7e
 80135f8:	5c9a      	ldrb	r2, [r3, r2]
 80135fa:	183b      	adds	r3, r7, r0
 80135fc:	715a      	strb	r2, [r3, #5]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 80135fe:	4b37      	ldr	r3, [pc, #220]	; (80136dc <LoRaMacQueryTxPossible+0x14c>)
 8013600:	4a37      	ldr	r2, [pc, #220]	; (80136e0 <LoRaMacQueryTxPossible+0x150>)
 8013602:	589b      	ldr	r3, [r3, r2]
 8013604:	2280      	movs	r2, #128	; 0x80
 8013606:	589a      	ldr	r2, [r3, r2]
 8013608:	183b      	adds	r3, r7, r0
 801360a:	609a      	str	r2, [r3, #8]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 801360c:	4a33      	ldr	r2, [pc, #204]	; (80136dc <LoRaMacQueryTxPossible+0x14c>)
 801360e:	23fd      	movs	r3, #253	; 0xfd
 8013610:	009b      	lsls	r3, r3, #2
 8013612:	5ad2      	ldrh	r2, [r2, r3]
 8013614:	183b      	adds	r3, r7, r0
 8013616:	819a      	strh	r2, [r3, #12]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8013618:	4b30      	ldr	r3, [pc, #192]	; (80136dc <LoRaMacQueryTxPossible+0x14c>)
 801361a:	4a32      	ldr	r2, [pc, #200]	; (80136e4 <LoRaMacQueryTxPossible+0x154>)
 801361c:	5a9a      	ldrh	r2, [r3, r2]
 801361e:	183b      	adds	r3, r7, r0
 8013620:	81da      	strh	r2, [r3, #14]
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8013622:	4b2e      	ldr	r3, [pc, #184]	; (80136dc <LoRaMacQueryTxPossible+0x14c>)
 8013624:	4a2e      	ldr	r2, [pc, #184]	; (80136e0 <LoRaMacQueryTxPossible+0x150>)
 8013626:	589b      	ldr	r3, [r3, r2]
 8013628:	2285      	movs	r2, #133	; 0x85
 801362a:	569a      	ldrsb	r2, [r3, r2]
 801362c:	183b      	adds	r3, r7, r0
 801362e:	741a      	strb	r2, [r3, #16]
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8013630:	4b2a      	ldr	r3, [pc, #168]	; (80136dc <LoRaMacQueryTxPossible+0x14c>)
 8013632:	4a2b      	ldr	r2, [pc, #172]	; (80136e0 <LoRaMacQueryTxPossible+0x150>)
 8013634:	589b      	ldr	r3, [r3, r2]
 8013636:	2284      	movs	r2, #132	; 0x84
 8013638:	569a      	ldrsb	r2, [r3, r2]
 801363a:	183b      	adds	r3, r7, r0
 801363c:	745a      	strb	r2, [r3, #17]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 801363e:	4b27      	ldr	r3, [pc, #156]	; (80136dc <LoRaMacQueryTxPossible+0x14c>)
 8013640:	4a27      	ldr	r2, [pc, #156]	; (80136e0 <LoRaMacQueryTxPossible+0x150>)
 8013642:	589b      	ldr	r3, [r3, r2]
 8013644:	22b8      	movs	r2, #184	; 0xb8
 8013646:	5c9a      	ldrb	r2, [r3, r2]
 8013648:	183b      	adds	r3, r7, r0
 801364a:	749a      	strb	r2, [r3, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;
 801364c:	4b23      	ldr	r3, [pc, #140]	; (80136dc <LoRaMacQueryTxPossible+0x14c>)
 801364e:	4a24      	ldr	r2, [pc, #144]	; (80136e0 <LoRaMacQueryTxPossible+0x150>)
 8013650:	589b      	ldr	r3, [r3, r2]
 8013652:	781a      	ldrb	r2, [r3, #0]
 8013654:	183b      	adds	r3, r7, r0
 8013656:	74da      	strb	r2, [r3, #19]

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 8013658:	2310      	movs	r3, #16
 801365a:	18fb      	adds	r3, r7, r3
 801365c:	220e      	movs	r2, #14
 801365e:	18ba      	adds	r2, r7, r2
 8013660:	240f      	movs	r4, #15
 8013662:	1939      	adds	r1, r7, r4
 8013664:	1838      	adds	r0, r7, r0
 8013666:	f001 f8c4 	bl	80147f2 <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 801366a:	193b      	adds	r3, r7, r4
 801366c:	781b      	ldrb	r3, [r3, #0]
 801366e:	b25b      	sxtb	r3, r3
 8013670:	0018      	movs	r0, r3
 8013672:	f7fd f9e7 	bl	8010a44 <GetMaxAppPayloadWithoutFOptsLength>
 8013676:	0003      	movs	r3, r0
 8013678:	001a      	movs	r2, r3
 801367a:	683b      	ldr	r3, [r7, #0]
 801367c:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 801367e:	2308      	movs	r3, #8
 8013680:	18fb      	adds	r3, r7, r3
 8013682:	0018      	movs	r0, r3
 8013684:	f001 fbf6 	bl	8014e74 <LoRaMacCommandsGetSizeSerializedCmds>
 8013688:	1e03      	subs	r3, r0, #0
 801368a:	d001      	beq.n	8013690 <LoRaMacQueryTxPossible+0x100>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801368c:	2313      	movs	r3, #19
 801368e:	e021      	b.n	80136d4 <LoRaMacQueryTxPossible+0x144>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8013690:	68bb      	ldr	r3, [r7, #8]
 8013692:	2b0f      	cmp	r3, #15
 8013694:	d81a      	bhi.n	80136cc <LoRaMacQueryTxPossible+0x13c>
 8013696:	683b      	ldr	r3, [r7, #0]
 8013698:	785b      	ldrb	r3, [r3, #1]
 801369a:	001a      	movs	r2, r3
 801369c:	68bb      	ldr	r3, [r7, #8]
 801369e:	429a      	cmp	r2, r3
 80136a0:	d314      	bcc.n	80136cc <LoRaMacQueryTxPossible+0x13c>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 80136a2:	683b      	ldr	r3, [r7, #0]
 80136a4:	785a      	ldrb	r2, [r3, #1]
 80136a6:	68bb      	ldr	r3, [r7, #8]
 80136a8:	b2db      	uxtb	r3, r3
 80136aa:	1ad3      	subs	r3, r2, r3
 80136ac:	b2da      	uxtb	r2, r3
 80136ae:	683b      	ldr	r3, [r7, #0]
 80136b0:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 80136b2:	683b      	ldr	r3, [r7, #0]
 80136b4:	785b      	ldrb	r3, [r3, #1]
 80136b6:	0019      	movs	r1, r3
 80136b8:	1dfb      	adds	r3, r7, #7
 80136ba:	781a      	ldrb	r2, [r3, #0]
 80136bc:	68bb      	ldr	r3, [r7, #8]
 80136be:	18d3      	adds	r3, r2, r3
 80136c0:	4299      	cmp	r1, r3
 80136c2:	d301      	bcc.n	80136c8 <LoRaMacQueryTxPossible+0x138>
        {
            return LORAMAC_STATUS_OK;
 80136c4:	2300      	movs	r3, #0
 80136c6:	e005      	b.n	80136d4 <LoRaMacQueryTxPossible+0x144>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 80136c8:	2308      	movs	r3, #8
 80136ca:	e003      	b.n	80136d4 <LoRaMacQueryTxPossible+0x144>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 80136cc:	683b      	ldr	r3, [r7, #0]
 80136ce:	2200      	movs	r2, #0
 80136d0:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 80136d2:	2308      	movs	r3, #8
    }
}
 80136d4:	0018      	movs	r0, r3
 80136d6:	46bd      	mov	sp, r7
 80136d8:	b00b      	add	sp, #44	; 0x2c
 80136da:	bd90      	pop	{r4, r7, pc}
 80136dc:	200005b4 	.word	0x200005b4
 80136e0:	00000484 	.word	0x00000484
 80136e4:	000003f6 	.word	0x000003f6

080136e8 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 80136e8:	b590      	push	{r4, r7, lr}
 80136ea:	b087      	sub	sp, #28
 80136ec:	af00      	add	r7, sp, #0
 80136ee:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80136f0:	2317      	movs	r3, #23
 80136f2:	18fb      	adds	r3, r7, r3
 80136f4:	2200      	movs	r2, #0
 80136f6:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	d101      	bne.n	8013702 <LoRaMacMibGetRequestConfirm+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80136fe:	2303      	movs	r3, #3
 8013700:	e146      	b.n	8013990 <LoRaMacMibGetRequestConfirm+0x2a8>
    }

    switch( mibGet->Type )
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	781b      	ldrb	r3, [r3, #0]
 8013706:	2b28      	cmp	r3, #40	; 0x28
 8013708:	d900      	bls.n	801370c <LoRaMacMibGetRequestConfirm+0x24>
 801370a:	e135      	b.n	8013978 <LoRaMacMibGetRequestConfirm+0x290>
 801370c:	009a      	lsls	r2, r3, #2
 801370e:	4ba2      	ldr	r3, [pc, #648]	; (8013998 <LoRaMacMibGetRequestConfirm+0x2b0>)
 8013710:	18d3      	adds	r3, r2, r3
 8013712:	681b      	ldr	r3, [r3, #0]
 8013714:	469f      	mov	pc, r3
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = MacCtx.NvmCtx->DeviceClass;
 8013716:	4ba1      	ldr	r3, [pc, #644]	; (801399c <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013718:	4aa1      	ldr	r2, [pc, #644]	; (80139a0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801371a:	589b      	ldr	r3, [r3, r2]
 801371c:	227c      	movs	r2, #124	; 0x7c
 801371e:	5c9a      	ldrb	r2, [r3, r2]
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	711a      	strb	r2, [r3, #4]
            break;
 8013724:	e131      	b.n	801398a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = MacCtx.NvmCtx->NetworkActivation;
 8013726:	4b9d      	ldr	r3, [pc, #628]	; (801399c <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013728:	4a9d      	ldr	r2, [pc, #628]	; (80139a0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 801372a:	589a      	ldr	r2, [r3, r2]
 801372c:	23b2      	movs	r3, #178	; 0xb2
 801372e:	005b      	lsls	r3, r3, #1
 8013730:	5cd2      	ldrb	r2, [r2, r3]
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	711a      	strb	r2, [r3, #4]
            break;
 8013736:	e128      	b.n	801398a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 8013738:	f7fa fade 	bl	800dcf8 <SecureElementGetDevEui>
 801373c:	0002      	movs	r2, r0
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	605a      	str	r2, [r3, #4]
            break;
 8013742:	e122      	b.n	801398a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 8013744:	f7fa fafc 	bl	800dd40 <SecureElementGetJoinEui>
 8013748:	0002      	movs	r2, r0
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	605a      	str	r2, [r3, #4]
            break;
 801374e:	e11c      	b.n	801398a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = MacCtx.NvmCtx->AdrCtrlOn;
 8013750:	4b92      	ldr	r3, [pc, #584]	; (801399c <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013752:	4a93      	ldr	r2, [pc, #588]	; (80139a0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013754:	589b      	ldr	r3, [r3, r2]
 8013756:	227e      	movs	r2, #126	; 0x7e
 8013758:	5c9a      	ldrb	r2, [r3, r2]
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	711a      	strb	r2, [r3, #4]
            break;
 801375e:	e114      	b.n	801398a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = MacCtx.NvmCtx->NetID;
 8013760:	4b8e      	ldr	r3, [pc, #568]	; (801399c <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013762:	4a8f      	ldr	r2, [pc, #572]	; (80139a0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013764:	589b      	ldr	r3, [r3, r2]
 8013766:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	605a      	str	r2, [r3, #4]
            break;
 801376c:	e10d      	b.n	801398a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = MacCtx.NvmCtx->DevAddr;
 801376e:	4b8b      	ldr	r3, [pc, #556]	; (801399c <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013770:	4a8b      	ldr	r2, [pc, #556]	; (80139a0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013772:	589b      	ldr	r3, [r3, r2]
 8013774:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	605a      	str	r2, [r3, #4]
            break;
 801377a:	e106      	b.n	801398a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = MacCtx.NvmCtx->PublicNetwork;
 801377c:	4b87      	ldr	r3, [pc, #540]	; (801399c <LoRaMacMibGetRequestConfirm+0x2b4>)
 801377e:	4a88      	ldr	r2, [pc, #544]	; (80139a0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013780:	589b      	ldr	r3, [r3, r2]
 8013782:	227d      	movs	r2, #125	; 0x7d
 8013784:	5c9a      	ldrb	r2, [r3, r2]
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	711a      	strb	r2, [r3, #4]
            break;
 801378a:	e0fe      	b.n	801398a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 801378c:	4b83      	ldr	r3, [pc, #524]	; (801399c <LoRaMacMibGetRequestConfirm+0x2b4>)
 801378e:	4a84      	ldr	r2, [pc, #528]	; (80139a0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013790:	589b      	ldr	r3, [r3, r2]
 8013792:	22ca      	movs	r2, #202	; 0xca
 8013794:	5c9a      	ldrb	r2, [r3, r2]
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	711a      	strb	r2, [r3, #4]
            break;
 801379a:	e0f6      	b.n	801398a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 801379c:	2110      	movs	r1, #16
 801379e:	187b      	adds	r3, r7, r1
 80137a0:	221d      	movs	r2, #29
 80137a2:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80137a4:	4b7d      	ldr	r3, [pc, #500]	; (801399c <LoRaMacMibGetRequestConfirm+0x2b4>)
 80137a6:	4a7e      	ldr	r2, [pc, #504]	; (80139a0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80137a8:	589b      	ldr	r3, [r3, r2]
 80137aa:	781b      	ldrb	r3, [r3, #0]
 80137ac:	187a      	adds	r2, r7, r1
 80137ae:	0011      	movs	r1, r2
 80137b0:	0018      	movs	r0, r3
 80137b2:	f003 fa38 	bl	8016c26 <RegionGetPhyParam>
 80137b6:	0003      	movs	r3, r0
 80137b8:	001a      	movs	r2, r3
 80137ba:	210c      	movs	r1, #12
 80137bc:	187b      	adds	r3, r7, r1
 80137be:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelList = phyParam.Channels;
 80137c0:	187b      	adds	r3, r7, r1
 80137c2:	681a      	ldr	r2, [r3, #0]
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	605a      	str	r2, [r3, #4]
            break;
 80137c8:	e0df      	b.n	801398a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 80137ca:	4b74      	ldr	r3, [pc, #464]	; (801399c <LoRaMacMibGetRequestConfirm+0x2b4>)
 80137cc:	4a74      	ldr	r2, [pc, #464]	; (80139a0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80137ce:	589a      	ldr	r2, [r3, r2]
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	21a8      	movs	r1, #168	; 0xa8
 80137d4:	3304      	adds	r3, #4
 80137d6:	1852      	adds	r2, r2, r1
 80137d8:	ca03      	ldmia	r2!, {r0, r1}
 80137da:	c303      	stmia	r3!, {r0, r1}
            break;
 80137dc:	e0d5      	b.n	801398a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 80137de:	4b6f      	ldr	r3, [pc, #444]	; (801399c <LoRaMacMibGetRequestConfirm+0x2b4>)
 80137e0:	4a6f      	ldr	r2, [pc, #444]	; (80139a0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80137e2:	589a      	ldr	r2, [r3, r2]
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	3304      	adds	r3, #4
 80137e8:	3228      	adds	r2, #40	; 0x28
 80137ea:	ca03      	ldmia	r2!, {r0, r1}
 80137ec:	c303      	stmia	r3!, {r0, r1}
            break;
 80137ee:	e0cc      	b.n	801398a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParams.RxCChannel;
 80137f0:	4b6a      	ldr	r3, [pc, #424]	; (801399c <LoRaMacMibGetRequestConfirm+0x2b4>)
 80137f2:	4a6b      	ldr	r2, [pc, #428]	; (80139a0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80137f4:	589a      	ldr	r2, [r3, r2]
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	21b0      	movs	r1, #176	; 0xb0
 80137fa:	3304      	adds	r3, #4
 80137fc:	1852      	adds	r2, r2, r1
 80137fe:	ca03      	ldmia	r2!, {r0, r1}
 8013800:	c303      	stmia	r3!, {r0, r1}
            break;
 8013802:	e0c2      	b.n	801398a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 8013804:	4b65      	ldr	r3, [pc, #404]	; (801399c <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013806:	4a66      	ldr	r2, [pc, #408]	; (80139a0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013808:	589a      	ldr	r2, [r3, r2]
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	3304      	adds	r3, #4
 801380e:	3230      	adds	r2, #48	; 0x30
 8013810:	ca03      	ldmia	r2!, {r0, r1}
 8013812:	c303      	stmia	r3!, {r0, r1}
            break;
 8013814:	e0b9      	b.n	801398a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8013816:	2110      	movs	r1, #16
 8013818:	187b      	adds	r3, r7, r1
 801381a:	221b      	movs	r2, #27
 801381c:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 801381e:	4b5f      	ldr	r3, [pc, #380]	; (801399c <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013820:	4a5f      	ldr	r2, [pc, #380]	; (80139a0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013822:	589b      	ldr	r3, [r3, r2]
 8013824:	781b      	ldrb	r3, [r3, #0]
 8013826:	187a      	adds	r2, r7, r1
 8013828:	0011      	movs	r1, r2
 801382a:	0018      	movs	r0, r3
 801382c:	f003 f9fb 	bl	8016c26 <RegionGetPhyParam>
 8013830:	0003      	movs	r3, r0
 8013832:	001a      	movs	r2, r3
 8013834:	210c      	movs	r1, #12
 8013836:	187b      	adds	r3, r7, r1
 8013838:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 801383a:	187b      	adds	r3, r7, r1
 801383c:	681a      	ldr	r2, [r3, #0]
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	605a      	str	r2, [r3, #4]
            break;
 8013842:	e0a2      	b.n	801398a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8013844:	2110      	movs	r1, #16
 8013846:	187b      	adds	r3, r7, r1
 8013848:	221a      	movs	r2, #26
 801384a:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 801384c:	4b53      	ldr	r3, [pc, #332]	; (801399c <LoRaMacMibGetRequestConfirm+0x2b4>)
 801384e:	4a54      	ldr	r2, [pc, #336]	; (80139a0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013850:	589b      	ldr	r3, [r3, r2]
 8013852:	781b      	ldrb	r3, [r3, #0]
 8013854:	187a      	adds	r2, r7, r1
 8013856:	0011      	movs	r1, r2
 8013858:	0018      	movs	r0, r3
 801385a:	f003 f9e4 	bl	8016c26 <RegionGetPhyParam>
 801385e:	0003      	movs	r3, r0
 8013860:	001a      	movs	r2, r3
 8013862:	210c      	movs	r1, #12
 8013864:	187b      	adds	r3, r7, r1
 8013866:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 8013868:	187b      	adds	r3, r7, r1
 801386a:	681a      	ldr	r2, [r3, #0]
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	605a      	str	r2, [r3, #4]
            break;
 8013870:	e08b      	b.n	801398a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 8013872:	4b4a      	ldr	r3, [pc, #296]	; (801399c <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013874:	4a4a      	ldr	r2, [pc, #296]	; (80139a0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013876:	589b      	ldr	r3, [r3, r2]
 8013878:	22a4      	movs	r2, #164	; 0xa4
 801387a:	5c9a      	ldrb	r2, [r3, r2]
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	711a      	strb	r2, [r3, #4]
            break;
 8013880:	e083      	b.n	801398a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = MacCtx.NvmCtx->MacParams.MaxRxWindow;
 8013882:	4b46      	ldr	r3, [pc, #280]	; (801399c <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013884:	4a46      	ldr	r2, [pc, #280]	; (80139a0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013886:	589b      	ldr	r3, [r3, r2]
 8013888:	2290      	movs	r2, #144	; 0x90
 801388a:	589a      	ldr	r2, [r3, r2]
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	605a      	str	r2, [r3, #4]
            break;
 8013890:	e07b      	b.n	801398a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = MacCtx.NvmCtx->MacParams.ReceiveDelay1;
 8013892:	4b42      	ldr	r3, [pc, #264]	; (801399c <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013894:	4a42      	ldr	r2, [pc, #264]	; (80139a0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013896:	589b      	ldr	r3, [r3, r2]
 8013898:	2294      	movs	r2, #148	; 0x94
 801389a:	589a      	ldr	r2, [r3, r2]
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	605a      	str	r2, [r3, #4]
            break;
 80138a0:	e073      	b.n	801398a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay2;
 80138a2:	4b3e      	ldr	r3, [pc, #248]	; (801399c <LoRaMacMibGetRequestConfirm+0x2b4>)
 80138a4:	4a3e      	ldr	r2, [pc, #248]	; (80139a0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80138a6:	589b      	ldr	r3, [r3, r2]
 80138a8:	2298      	movs	r2, #152	; 0x98
 80138aa:	589a      	ldr	r2, [r3, r2]
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	605a      	str	r2, [r3, #4]
            break;
 80138b0:	e06b      	b.n	801398a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1;
 80138b2:	4b3a      	ldr	r3, [pc, #232]	; (801399c <LoRaMacMibGetRequestConfirm+0x2b4>)
 80138b4:	4a3a      	ldr	r2, [pc, #232]	; (80139a0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80138b6:	589b      	ldr	r3, [r3, r2]
 80138b8:	229c      	movs	r2, #156	; 0x9c
 80138ba:	589a      	ldr	r2, [r3, r2]
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	605a      	str	r2, [r3, #4]
            break;
 80138c0:	e063      	b.n	801398a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2;
 80138c2:	4b36      	ldr	r3, [pc, #216]	; (801399c <LoRaMacMibGetRequestConfirm+0x2b4>)
 80138c4:	4a36      	ldr	r2, [pc, #216]	; (80139a0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80138c6:	589b      	ldr	r3, [r3, r2]
 80138c8:	22a0      	movs	r2, #160	; 0xa0
 80138ca:	589a      	ldr	r2, [r3, r2]
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	605a      	str	r2, [r3, #4]
            break;
 80138d0:	e05b      	b.n	801398a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 80138d2:	4b32      	ldr	r3, [pc, #200]	; (801399c <LoRaMacMibGetRequestConfirm+0x2b4>)
 80138d4:	4a32      	ldr	r2, [pc, #200]	; (80139a0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80138d6:	589b      	ldr	r3, [r3, r2]
 80138d8:	2205      	movs	r2, #5
 80138da:	569a      	ldrsb	r2, [r3, r2]
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	711a      	strb	r2, [r3, #4]
            break;
 80138e0:	e053      	b.n	801398a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 80138e2:	4b2e      	ldr	r3, [pc, #184]	; (801399c <LoRaMacMibGetRequestConfirm+0x2b4>)
 80138e4:	4a2e      	ldr	r2, [pc, #184]	; (80139a0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80138e6:	589b      	ldr	r3, [r3, r2]
 80138e8:	2285      	movs	r2, #133	; 0x85
 80138ea:	569a      	ldrsb	r2, [r3, r2]
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	711a      	strb	r2, [r3, #4]
            break;
 80138f0:	e04b      	b.n	801398a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 80138f2:	4b2a      	ldr	r3, [pc, #168]	; (801399c <LoRaMacMibGetRequestConfirm+0x2b4>)
 80138f4:	4a2a      	ldr	r2, [pc, #168]	; (80139a0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80138f6:	589b      	ldr	r3, [r3, r2]
 80138f8:	2204      	movs	r2, #4
 80138fa:	569a      	ldrsb	r2, [r3, r2]
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	711a      	strb	r2, [r3, #4]
            break;
 8013900:	e043      	b.n	801398a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8013902:	4b26      	ldr	r3, [pc, #152]	; (801399c <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013904:	4a26      	ldr	r2, [pc, #152]	; (80139a0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013906:	589b      	ldr	r3, [r3, r2]
 8013908:	2284      	movs	r2, #132	; 0x84
 801390a:	569a      	ldrsb	r2, [r3, r2]
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	711a      	strb	r2, [r3, #4]
            break;
 8013910:	e03b      	b.n	801398a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = MacCtx.NvmCtx->MacParams.SystemMaxRxError;
 8013912:	4b22      	ldr	r3, [pc, #136]	; (801399c <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013914:	4a22      	ldr	r2, [pc, #136]	; (80139a0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013916:	589b      	ldr	r3, [r3, r2]
 8013918:	2288      	movs	r2, #136	; 0x88
 801391a:	589a      	ldr	r2, [r3, r2]
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	605a      	str	r2, [r3, #4]
            break;
 8013920:	e033      	b.n	801398a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = MacCtx.NvmCtx->MacParams.MinRxSymbols;
 8013922:	4b1e      	ldr	r3, [pc, #120]	; (801399c <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013924:	4a1e      	ldr	r2, [pc, #120]	; (80139a0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013926:	589b      	ldr	r3, [r3, r2]
 8013928:	228c      	movs	r2, #140	; 0x8c
 801392a:	5c9a      	ldrb	r2, [r3, r2]
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	711a      	strb	r2, [r3, #4]
            break;
 8013930:	e02b      	b.n	801398a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 8013932:	4b1a      	ldr	r3, [pc, #104]	; (801399c <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013934:	4a1a      	ldr	r2, [pc, #104]	; (80139a0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013936:	589b      	ldr	r3, [r3, r2]
 8013938:	22c0      	movs	r2, #192	; 0xc0
 801393a:	589a      	ldr	r2, [r3, r2]
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	605a      	str	r2, [r3, #4]
            break;
 8013940:	e023      	b.n	801398a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = GetCtxs( );
 8013942:	f7fe ff23 	bl	801278c <GetCtxs>
 8013946:	0002      	movs	r2, r0
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	605a      	str	r2, [r3, #4]
            break;
 801394c:	e01d      	b.n	801398a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 801394e:	4b13      	ldr	r3, [pc, #76]	; (801399c <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013950:	4a13      	ldr	r2, [pc, #76]	; (80139a0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013952:	589b      	ldr	r3, [r3, r2]
 8013954:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	605a      	str	r2, [r3, #4]
            break;
 801395a:	e016      	b.n	801398a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = MacCtx.NvmCtx->Version;
 801395c:	4b0f      	ldr	r3, [pc, #60]	; (801399c <LoRaMacMibGetRequestConfirm+0x2b4>)
 801395e:	4a10      	ldr	r2, [pc, #64]	; (80139a0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013960:	5899      	ldr	r1, [r3, r2]
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	22b0      	movs	r2, #176	; 0xb0
 8013966:	0052      	lsls	r2, r2, #1
 8013968:	588a      	ldr	r2, [r1, r2]
 801396a:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 801396c:	687c      	ldr	r4, [r7, #4]
 801396e:	f003 fb55 	bl	801701c <RegionGetVersion>
 8013972:	0003      	movs	r3, r0
 8013974:	60a3      	str	r3, [r4, #8]
            break;
 8013976:	e008      	b.n	801398a <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8013978:	2317      	movs	r3, #23
 801397a:	18fc      	adds	r4, r7, r3
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	0018      	movs	r0, r3
 8013980:	f000 ffed 	bl	801495e <LoRaMacClassBMibGetRequestConfirm>
 8013984:	0003      	movs	r3, r0
 8013986:	7023      	strb	r3, [r4, #0]
            break;
 8013988:	46c0      	nop			; (mov r8, r8)
        }
    }
    return status;
 801398a:	2317      	movs	r3, #23
 801398c:	18fb      	adds	r3, r7, r3
 801398e:	781b      	ldrb	r3, [r3, #0]
}
 8013990:	0018      	movs	r0, r3
 8013992:	46bd      	mov	sp, r7
 8013994:	b007      	add	sp, #28
 8013996:	bd90      	pop	{r4, r7, pc}
 8013998:	0801f730 	.word	0x0801f730
 801399c:	200005b4 	.word	0x200005b4
 80139a0:	00000484 	.word	0x00000484

080139a4 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 80139a4:	b590      	push	{r4, r7, lr}
 80139a6:	b087      	sub	sp, #28
 80139a8:	af00      	add	r7, sp, #0
 80139aa:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80139ac:	2317      	movs	r3, #23
 80139ae:	18fb      	adds	r3, r7, r3
 80139b0:	2200      	movs	r2, #0
 80139b2:	701a      	strb	r2, [r3, #0]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d102      	bne.n	80139c0 <LoRaMacMibSetRequestConfirm+0x1c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80139ba:	2303      	movs	r3, #3
 80139bc:	f000 fb74 	bl	80140a8 <LoRaMacMibSetRequestConfirm+0x704>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 80139c0:	4ac3      	ldr	r2, [pc, #780]	; (8013cd0 <LoRaMacMibSetRequestConfirm+0x32c>)
 80139c2:	23d0      	movs	r3, #208	; 0xd0
 80139c4:	009b      	lsls	r3, r3, #2
 80139c6:	58d3      	ldr	r3, [r2, r3]
 80139c8:	2202      	movs	r2, #2
 80139ca:	4013      	ands	r3, r2
 80139cc:	d002      	beq.n	80139d4 <LoRaMacMibSetRequestConfirm+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 80139ce:	2301      	movs	r3, #1
 80139d0:	f000 fb6a 	bl	80140a8 <LoRaMacMibSetRequestConfirm+0x704>
    }

    switch( mibSet->Type )
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	781b      	ldrb	r3, [r3, #0]
 80139d8:	2b27      	cmp	r3, #39	; 0x27
 80139da:	d900      	bls.n	80139de <LoRaMacMibSetRequestConfirm+0x3a>
 80139dc:	e333      	b.n	8014046 <LoRaMacMibSetRequestConfirm+0x6a2>
 80139de:	009a      	lsls	r2, r3, #2
 80139e0:	4bbc      	ldr	r3, [pc, #752]	; (8013cd4 <LoRaMacMibSetRequestConfirm+0x330>)
 80139e2:	18d3      	adds	r3, r2, r3
 80139e4:	681b      	ldr	r3, [r3, #0]
 80139e6:	469f      	mov	pc, r3
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	791b      	ldrb	r3, [r3, #4]
 80139ec:	2217      	movs	r2, #23
 80139ee:	18bc      	adds	r4, r7, r2
 80139f0:	0018      	movs	r0, r3
 80139f2:	f7fc ff07 	bl	8010804 <SwitchClass>
 80139f6:	0003      	movs	r3, r0
 80139f8:	7023      	strb	r3, [r4, #0]
            break;
 80139fa:	e34e      	b.n	801409a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	791b      	ldrb	r3, [r3, #4]
 8013a00:	2b02      	cmp	r3, #2
 8013a02:	d008      	beq.n	8013a16 <LoRaMacMibSetRequestConfirm+0x72>
            {
                MacCtx.NvmCtx->NetworkActivation = mibSet->Param.NetworkActivation;
 8013a04:	4bb2      	ldr	r3, [pc, #712]	; (8013cd0 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013a06:	4ab4      	ldr	r2, [pc, #720]	; (8013cd8 <LoRaMacMibSetRequestConfirm+0x334>)
 8013a08:	589a      	ldr	r2, [r3, r2]
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	7919      	ldrb	r1, [r3, #4]
 8013a0e:	23b2      	movs	r3, #178	; 0xb2
 8013a10:	005b      	lsls	r3, r3, #1
 8013a12:	54d1      	strb	r1, [r2, r3]
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013a14:	e341      	b.n	801409a <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013a16:	2317      	movs	r3, #23
 8013a18:	18fb      	adds	r3, r7, r3
 8013a1a:	2203      	movs	r2, #3
 8013a1c:	701a      	strb	r2, [r3, #0]
            break;
 8013a1e:	e33c      	b.n	801409a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	685b      	ldr	r3, [r3, #4]
 8013a24:	0018      	movs	r0, r3
 8013a26:	f7fa f94b 	bl	800dcc0 <SecureElementSetDevEui>
 8013a2a:	1e03      	subs	r3, r0, #0
 8013a2c:	d100      	bne.n	8013a30 <LoRaMacMibSetRequestConfirm+0x8c>
 8013a2e:	e319      	b.n	8014064 <LoRaMacMibSetRequestConfirm+0x6c0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013a30:	2317      	movs	r3, #23
 8013a32:	18fb      	adds	r3, r7, r3
 8013a34:	2203      	movs	r2, #3
 8013a36:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013a38:	e314      	b.n	8014064 <LoRaMacMibSetRequestConfirm+0x6c0>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	685b      	ldr	r3, [r3, #4]
 8013a3e:	0018      	movs	r0, r3
 8013a40:	f7fa f962 	bl	800dd08 <SecureElementSetJoinEui>
 8013a44:	1e03      	subs	r3, r0, #0
 8013a46:	d100      	bne.n	8013a4a <LoRaMacMibSetRequestConfirm+0xa6>
 8013a48:	e30e      	b.n	8014068 <LoRaMacMibSetRequestConfirm+0x6c4>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013a4a:	2317      	movs	r3, #23
 8013a4c:	18fb      	adds	r3, r7, r3
 8013a4e:	2203      	movs	r2, #3
 8013a50:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013a52:	e309      	b.n	8014068 <LoRaMacMibSetRequestConfirm+0x6c4>
        }
        case MIB_ADR:
        {
            MacCtx.NvmCtx->AdrCtrlOn = mibSet->Param.AdrEnable;
 8013a54:	4b9e      	ldr	r3, [pc, #632]	; (8013cd0 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013a56:	4aa0      	ldr	r2, [pc, #640]	; (8013cd8 <LoRaMacMibSetRequestConfirm+0x334>)
 8013a58:	589b      	ldr	r3, [r3, r2]
 8013a5a:	687a      	ldr	r2, [r7, #4]
 8013a5c:	7911      	ldrb	r1, [r2, #4]
 8013a5e:	227e      	movs	r2, #126	; 0x7e
 8013a60:	5499      	strb	r1, [r3, r2]
            break;
 8013a62:	e31a      	b.n	801409a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_NET_ID:
        {
            MacCtx.NvmCtx->NetID = mibSet->Param.NetID;
 8013a64:	4b9a      	ldr	r3, [pc, #616]	; (8013cd0 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013a66:	4a9c      	ldr	r2, [pc, #624]	; (8013cd8 <LoRaMacMibSetRequestConfirm+0x334>)
 8013a68:	589b      	ldr	r3, [r3, r2]
 8013a6a:	687a      	ldr	r2, [r7, #4]
 8013a6c:	6852      	ldr	r2, [r2, #4]
 8013a6e:	649a      	str	r2, [r3, #72]	; 0x48
            break;
 8013a70:	e313      	b.n	801409a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_DEV_ADDR:
        {
            MacCtx.NvmCtx->DevAddr = mibSet->Param.DevAddr;
 8013a72:	4b97      	ldr	r3, [pc, #604]	; (8013cd0 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013a74:	4a98      	ldr	r2, [pc, #608]	; (8013cd8 <LoRaMacMibSetRequestConfirm+0x334>)
 8013a76:	589b      	ldr	r3, [r3, r2]
 8013a78:	687a      	ldr	r2, [r7, #4]
 8013a7a:	6852      	ldr	r2, [r2, #4]
 8013a7c:	64da      	str	r2, [r3, #76]	; 0x4c
            break;
 8013a7e:	e30c      	b.n	801409a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	685b      	ldr	r3, [r3, #4]
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d00a      	beq.n	8013a9e <LoRaMacMibSetRequestConfirm+0xfa>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	685b      	ldr	r3, [r3, #4]
 8013a8c:	0019      	movs	r1, r3
 8013a8e:	2000      	movs	r0, #0
 8013a90:	f002 fa00 	bl	8015e94 <LoRaMacCryptoSetKey>
 8013a94:	1e03      	subs	r3, r0, #0
 8013a96:	d100      	bne.n	8013a9a <LoRaMacMibSetRequestConfirm+0xf6>
 8013a98:	e2e8      	b.n	801406c <LoRaMacMibSetRequestConfirm+0x6c8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013a9a:	2311      	movs	r3, #17
 8013a9c:	e304      	b.n	80140a8 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013a9e:	2317      	movs	r3, #23
 8013aa0:	18fb      	adds	r3, r7, r3
 8013aa2:	2203      	movs	r2, #3
 8013aa4:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013aa6:	e2e1      	b.n	801406c <LoRaMacMibSetRequestConfirm+0x6c8>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	685b      	ldr	r3, [r3, #4]
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d00a      	beq.n	8013ac6 <LoRaMacMibSetRequestConfirm+0x122>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	685b      	ldr	r3, [r3, #4]
 8013ab4:	0019      	movs	r1, r3
 8013ab6:	2001      	movs	r0, #1
 8013ab8:	f002 f9ec 	bl	8015e94 <LoRaMacCryptoSetKey>
 8013abc:	1e03      	subs	r3, r0, #0
 8013abe:	d100      	bne.n	8013ac2 <LoRaMacMibSetRequestConfirm+0x11e>
 8013ac0:	e2d6      	b.n	8014070 <LoRaMacMibSetRequestConfirm+0x6cc>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013ac2:	2311      	movs	r3, #17
 8013ac4:	e2f0      	b.n	80140a8 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013ac6:	2317      	movs	r3, #23
 8013ac8:	18fb      	adds	r3, r7, r3
 8013aca:	2203      	movs	r2, #3
 8013acc:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013ace:	e2cf      	b.n	8014070 <LoRaMacMibSetRequestConfirm+0x6cc>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	685b      	ldr	r3, [r3, #4]
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d00a      	beq.n	8013aee <LoRaMacMibSetRequestConfirm+0x14a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	685b      	ldr	r3, [r3, #4]
 8013adc:	0019      	movs	r1, r3
 8013ade:	2002      	movs	r0, #2
 8013ae0:	f002 f9d8 	bl	8015e94 <LoRaMacCryptoSetKey>
 8013ae4:	1e03      	subs	r3, r0, #0
 8013ae6:	d100      	bne.n	8013aea <LoRaMacMibSetRequestConfirm+0x146>
 8013ae8:	e2c4      	b.n	8014074 <LoRaMacMibSetRequestConfirm+0x6d0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013aea:	2311      	movs	r3, #17
 8013aec:	e2dc      	b.n	80140a8 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013aee:	2317      	movs	r3, #23
 8013af0:	18fb      	adds	r3, r7, r3
 8013af2:	2203      	movs	r2, #3
 8013af4:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013af6:	e2bd      	b.n	8014074 <LoRaMacMibSetRequestConfirm+0x6d0>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	685b      	ldr	r3, [r3, #4]
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	d00a      	beq.n	8013b16 <LoRaMacMibSetRequestConfirm+0x172>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	685b      	ldr	r3, [r3, #4]
 8013b04:	0019      	movs	r1, r3
 8013b06:	2003      	movs	r0, #3
 8013b08:	f002 f9c4 	bl	8015e94 <LoRaMacCryptoSetKey>
 8013b0c:	1e03      	subs	r3, r0, #0
 8013b0e:	d100      	bne.n	8013b12 <LoRaMacMibSetRequestConfirm+0x16e>
 8013b10:	e2b2      	b.n	8014078 <LoRaMacMibSetRequestConfirm+0x6d4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013b12:	2311      	movs	r3, #17
 8013b14:	e2c8      	b.n	80140a8 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013b16:	2317      	movs	r3, #23
 8013b18:	18fb      	adds	r3, r7, r3
 8013b1a:	2203      	movs	r2, #3
 8013b1c:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013b1e:	e2ab      	b.n	8014078 <LoRaMacMibSetRequestConfirm+0x6d4>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	685b      	ldr	r3, [r3, #4]
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	d00a      	beq.n	8013b3e <LoRaMacMibSetRequestConfirm+0x19a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	685b      	ldr	r3, [r3, #4]
 8013b2c:	0019      	movs	r1, r3
 8013b2e:	207f      	movs	r0, #127	; 0x7f
 8013b30:	f002 f9b0 	bl	8015e94 <LoRaMacCryptoSetKey>
 8013b34:	1e03      	subs	r3, r0, #0
 8013b36:	d100      	bne.n	8013b3a <LoRaMacMibSetRequestConfirm+0x196>
 8013b38:	e2a0      	b.n	801407c <LoRaMacMibSetRequestConfirm+0x6d8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013b3a:	2311      	movs	r3, #17
 8013b3c:	e2b4      	b.n	80140a8 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013b3e:	2317      	movs	r3, #23
 8013b40:	18fb      	adds	r3, r7, r3
 8013b42:	2203      	movs	r2, #3
 8013b44:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013b46:	e299      	b.n	801407c <LoRaMacMibSetRequestConfirm+0x6d8>
        }
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	685b      	ldr	r3, [r3, #4]
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d00a      	beq.n	8013b66 <LoRaMacMibSetRequestConfirm+0x1c2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	685b      	ldr	r3, [r3, #4]
 8013b54:	0019      	movs	r1, r3
 8013b56:	2080      	movs	r0, #128	; 0x80
 8013b58:	f002 f99c 	bl	8015e94 <LoRaMacCryptoSetKey>
 8013b5c:	1e03      	subs	r3, r0, #0
 8013b5e:	d100      	bne.n	8013b62 <LoRaMacMibSetRequestConfirm+0x1be>
 8013b60:	e28e      	b.n	8014080 <LoRaMacMibSetRequestConfirm+0x6dc>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013b62:	2311      	movs	r3, #17
 8013b64:	e2a0      	b.n	80140a8 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013b66:	2317      	movs	r3, #23
 8013b68:	18fb      	adds	r3, r7, r3
 8013b6a:	2203      	movs	r2, #3
 8013b6c:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013b6e:	e287      	b.n	8014080 <LoRaMacMibSetRequestConfirm+0x6dc>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	685b      	ldr	r3, [r3, #4]
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d00a      	beq.n	8013b8e <LoRaMacMibSetRequestConfirm+0x1ea>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	685b      	ldr	r3, [r3, #4]
 8013b7c:	0019      	movs	r1, r3
 8013b7e:	2081      	movs	r0, #129	; 0x81
 8013b80:	f002 f988 	bl	8015e94 <LoRaMacCryptoSetKey>
 8013b84:	1e03      	subs	r3, r0, #0
 8013b86:	d100      	bne.n	8013b8a <LoRaMacMibSetRequestConfirm+0x1e6>
 8013b88:	e27c      	b.n	8014084 <LoRaMacMibSetRequestConfirm+0x6e0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013b8a:	2311      	movs	r3, #17
 8013b8c:	e28c      	b.n	80140a8 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013b8e:	2317      	movs	r3, #23
 8013b90:	18fb      	adds	r3, r7, r3
 8013b92:	2203      	movs	r2, #3
 8013b94:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013b96:	e275      	b.n	8014084 <LoRaMacMibSetRequestConfirm+0x6e0>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	685b      	ldr	r3, [r3, #4]
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d00a      	beq.n	8013bb6 <LoRaMacMibSetRequestConfirm+0x212>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	685b      	ldr	r3, [r3, #4]
 8013ba4:	0019      	movs	r1, r3
 8013ba6:	2082      	movs	r0, #130	; 0x82
 8013ba8:	f002 f974 	bl	8015e94 <LoRaMacCryptoSetKey>
 8013bac:	1e03      	subs	r3, r0, #0
 8013bae:	d100      	bne.n	8013bb2 <LoRaMacMibSetRequestConfirm+0x20e>
 8013bb0:	e26a      	b.n	8014088 <LoRaMacMibSetRequestConfirm+0x6e4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013bb2:	2311      	movs	r3, #17
 8013bb4:	e278      	b.n	80140a8 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013bb6:	2317      	movs	r3, #23
 8013bb8:	18fb      	adds	r3, r7, r3
 8013bba:	2203      	movs	r2, #3
 8013bbc:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013bbe:	e263      	b.n	8014088 <LoRaMacMibSetRequestConfirm+0x6e4>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 1 */
        case MIB_PUBLIC_NETWORK:
        {
            MacCtx.NvmCtx->PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8013bc0:	4b43      	ldr	r3, [pc, #268]	; (8013cd0 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013bc2:	4a45      	ldr	r2, [pc, #276]	; (8013cd8 <LoRaMacMibSetRequestConfirm+0x334>)
 8013bc4:	589b      	ldr	r3, [r3, r2]
 8013bc6:	687a      	ldr	r2, [r7, #4]
 8013bc8:	7911      	ldrb	r1, [r2, #4]
 8013bca:	227d      	movs	r2, #125	; 0x7d
 8013bcc:	5499      	strb	r1, [r3, r2]
            Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 8013bce:	4b43      	ldr	r3, [pc, #268]	; (8013cdc <LoRaMacMibSetRequestConfirm+0x338>)
 8013bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013bd2:	4a3f      	ldr	r2, [pc, #252]	; (8013cd0 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013bd4:	4940      	ldr	r1, [pc, #256]	; (8013cd8 <LoRaMacMibSetRequestConfirm+0x334>)
 8013bd6:	5852      	ldr	r2, [r2, r1]
 8013bd8:	217d      	movs	r1, #125	; 0x7d
 8013bda:	5c52      	ldrb	r2, [r2, r1]
 8013bdc:	0010      	movs	r0, r2
 8013bde:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 8013be0:	4b3e      	ldr	r3, [pc, #248]	; (8013cdc <LoRaMacMibSetRequestConfirm+0x338>)
 8013be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013be4:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 8013be6:	e258      	b.n	801409a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_REPEATER_SUPPORT:
        {
            MacCtx.NvmCtx->RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8013be8:	4b39      	ldr	r3, [pc, #228]	; (8013cd0 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013bea:	4a3b      	ldr	r2, [pc, #236]	; (8013cd8 <LoRaMacMibSetRequestConfirm+0x334>)
 8013bec:	589b      	ldr	r3, [r3, r2]
 8013bee:	687a      	ldr	r2, [r7, #4]
 8013bf0:	7911      	ldrb	r1, [r2, #4]
 8013bf2:	22ca      	movs	r2, #202	; 0xca
 8013bf4:	5499      	strb	r1, [r3, r2]
            break;
 8013bf6:	e250      	b.n	801409a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	7a1b      	ldrb	r3, [r3, #8]
 8013bfc:	b25a      	sxtb	r2, r3
 8013bfe:	2108      	movs	r1, #8
 8013c00:	187b      	adds	r3, r7, r1
 8013c02:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8013c04:	4b32      	ldr	r3, [pc, #200]	; (8013cd0 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013c06:	4a34      	ldr	r2, [pc, #208]	; (8013cd8 <LoRaMacMibSetRequestConfirm+0x334>)
 8013c08:	589b      	ldr	r3, [r3, r2]
 8013c0a:	22b9      	movs	r2, #185	; 0xb9
 8013c0c:	5c9a      	ldrb	r2, [r3, r2]
 8013c0e:	187b      	adds	r3, r7, r1
 8013c10:	705a      	strb	r2, [r3, #1]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) != true )
 8013c12:	4b2f      	ldr	r3, [pc, #188]	; (8013cd0 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013c14:	4a30      	ldr	r2, [pc, #192]	; (8013cd8 <LoRaMacMibSetRequestConfirm+0x334>)
 8013c16:	589b      	ldr	r3, [r3, r2]
 8013c18:	781b      	ldrb	r3, [r3, #0]
 8013c1a:	1879      	adds	r1, r7, r1
 8013c1c:	2207      	movs	r2, #7
 8013c1e:	0018      	movs	r0, r3
 8013c20:	f003 f868 	bl	8016cf4 <RegionVerify>
 8013c24:	0003      	movs	r3, r0
 8013c26:	001a      	movs	r2, r3
 8013c28:	2301      	movs	r3, #1
 8013c2a:	4053      	eors	r3, r2
 8013c2c:	b2db      	uxtb	r3, r3
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d004      	beq.n	8013c3c <LoRaMacMibSetRequestConfirm+0x298>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013c32:	2317      	movs	r3, #23
 8013c34:	18fb      	adds	r3, r7, r3
 8013c36:	2203      	movs	r2, #3
 8013c38:	701a      	strb	r2, [r3, #0]
                {
                    MacCtx.NvmCtx->MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 8013c3a:	e22e      	b.n	801409a <LoRaMacMibSetRequestConfirm+0x6f6>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	685a      	ldr	r2, [r3, #4]
 8013c40:	2108      	movs	r1, #8
 8013c42:	187b      	adds	r3, r7, r1
 8013c44:	601a      	str	r2, [r3, #0]
                if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_FREQUENCY ) != true )
 8013c46:	4b22      	ldr	r3, [pc, #136]	; (8013cd0 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013c48:	4a23      	ldr	r2, [pc, #140]	; (8013cd8 <LoRaMacMibSetRequestConfirm+0x334>)
 8013c4a:	589b      	ldr	r3, [r3, r2]
 8013c4c:	781b      	ldrb	r3, [r3, #0]
 8013c4e:	1879      	adds	r1, r7, r1
 8013c50:	2200      	movs	r2, #0
 8013c52:	0018      	movs	r0, r3
 8013c54:	f003 f84e 	bl	8016cf4 <RegionVerify>
 8013c58:	0003      	movs	r3, r0
 8013c5a:	001a      	movs	r2, r3
 8013c5c:	2301      	movs	r3, #1
 8013c5e:	4053      	eors	r3, r2
 8013c60:	b2db      	uxtb	r3, r3
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d004      	beq.n	8013c70 <LoRaMacMibSetRequestConfirm+0x2cc>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013c66:	2317      	movs	r3, #23
 8013c68:	18fb      	adds	r3, r7, r3
 8013c6a:	2203      	movs	r2, #3
 8013c6c:	701a      	strb	r2, [r3, #0]
            break;
 8013c6e:	e214      	b.n	801409a <LoRaMacMibSetRequestConfirm+0x6f6>
                    MacCtx.NvmCtx->MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8013c70:	4b17      	ldr	r3, [pc, #92]	; (8013cd0 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013c72:	4a19      	ldr	r2, [pc, #100]	; (8013cd8 <LoRaMacMibSetRequestConfirm+0x334>)
 8013c74:	589b      	ldr	r3, [r3, r2]
 8013c76:	21a8      	movs	r1, #168	; 0xa8
 8013c78:	687a      	ldr	r2, [r7, #4]
 8013c7a:	185b      	adds	r3, r3, r1
 8013c7c:	3204      	adds	r2, #4
 8013c7e:	ca03      	ldmia	r2!, {r0, r1}
 8013c80:	c303      	stmia	r3!, {r0, r1}
            break;
 8013c82:	e20a      	b.n	801409a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	7a1b      	ldrb	r3, [r3, #8]
 8013c88:	b25a      	sxtb	r2, r3
 8013c8a:	2108      	movs	r1, #8
 8013c8c:	187b      	adds	r3, r7, r1
 8013c8e:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8013c90:	4b0f      	ldr	r3, [pc, #60]	; (8013cd0 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013c92:	4a11      	ldr	r2, [pc, #68]	; (8013cd8 <LoRaMacMibSetRequestConfirm+0x334>)
 8013c94:	589b      	ldr	r3, [r3, r2]
 8013c96:	22b9      	movs	r2, #185	; 0xb9
 8013c98:	5c9a      	ldrb	r2, [r3, r2]
 8013c9a:	187b      	adds	r3, r7, r1
 8013c9c:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 8013c9e:	4b0c      	ldr	r3, [pc, #48]	; (8013cd0 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013ca0:	4a0d      	ldr	r2, [pc, #52]	; (8013cd8 <LoRaMacMibSetRequestConfirm+0x334>)
 8013ca2:	589b      	ldr	r3, [r3, r2]
 8013ca4:	781b      	ldrb	r3, [r3, #0]
 8013ca6:	1879      	adds	r1, r7, r1
 8013ca8:	2207      	movs	r2, #7
 8013caa:	0018      	movs	r0, r3
 8013cac:	f003 f822 	bl	8016cf4 <RegionVerify>
 8013cb0:	1e03      	subs	r3, r0, #0
 8013cb2:	d008      	beq.n	8013cc6 <LoRaMacMibSetRequestConfirm+0x322>
            {
                MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8013cb4:	4b06      	ldr	r3, [pc, #24]	; (8013cd0 <LoRaMacMibSetRequestConfirm+0x32c>)
 8013cb6:	4a08      	ldr	r2, [pc, #32]	; (8013cd8 <LoRaMacMibSetRequestConfirm+0x334>)
 8013cb8:	589b      	ldr	r3, [r3, r2]
 8013cba:	687a      	ldr	r2, [r7, #4]
 8013cbc:	3328      	adds	r3, #40	; 0x28
 8013cbe:	3204      	adds	r2, #4
 8013cc0:	ca03      	ldmia	r2!, {r0, r1}
 8013cc2:	c303      	stmia	r3!, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013cc4:	e1e9      	b.n	801409a <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013cc6:	2317      	movs	r3, #23
 8013cc8:	18fb      	adds	r3, r7, r3
 8013cca:	2203      	movs	r2, #3
 8013ccc:	701a      	strb	r2, [r3, #0]
            break;
 8013cce:	e1e4      	b.n	801409a <LoRaMacMibSetRequestConfirm+0x6f6>
 8013cd0:	200005b4 	.word	0x200005b4
 8013cd4:	0801f7d4 	.word	0x0801f7d4
 8013cd8:	00000484 	.word	0x00000484
 8013cdc:	0801fb64 	.word	0x0801fb64
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	7a1b      	ldrb	r3, [r3, #8]
 8013ce4:	b25a      	sxtb	r2, r3
 8013ce6:	2108      	movs	r1, #8
 8013ce8:	187b      	adds	r3, r7, r1
 8013cea:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8013cec:	4bda      	ldr	r3, [pc, #872]	; (8014058 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013cee:	4adb      	ldr	r2, [pc, #876]	; (801405c <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013cf0:	589b      	ldr	r3, [r3, r2]
 8013cf2:	22b9      	movs	r2, #185	; 0xb9
 8013cf4:	5c9a      	ldrb	r2, [r3, r2]
 8013cf6:	187b      	adds	r3, r7, r1
 8013cf8:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 8013cfa:	4bd7      	ldr	r3, [pc, #860]	; (8014058 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013cfc:	4ad7      	ldr	r2, [pc, #860]	; (801405c <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013cfe:	589b      	ldr	r3, [r3, r2]
 8013d00:	781b      	ldrb	r3, [r3, #0]
 8013d02:	1879      	adds	r1, r7, r1
 8013d04:	2207      	movs	r2, #7
 8013d06:	0018      	movs	r0, r3
 8013d08:	f002 fff4 	bl	8016cf4 <RegionVerify>
 8013d0c:	1e03      	subs	r3, r0, #0
 8013d0e:	d01f      	beq.n	8013d50 <LoRaMacMibSetRequestConfirm+0x3ac>
            {
                MacCtx.NvmCtx->MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8013d10:	4bd1      	ldr	r3, [pc, #836]	; (8014058 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013d12:	4ad2      	ldr	r2, [pc, #840]	; (801405c <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013d14:	589b      	ldr	r3, [r3, r2]
 8013d16:	21b0      	movs	r1, #176	; 0xb0
 8013d18:	687a      	ldr	r2, [r7, #4]
 8013d1a:	185b      	adds	r3, r3, r1
 8013d1c:	3204      	adds	r2, #4
 8013d1e:	ca03      	ldmia	r2!, {r0, r1}
 8013d20:	c303      	stmia	r3!, {r0, r1}

                if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) && ( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8013d22:	4bcd      	ldr	r3, [pc, #820]	; (8014058 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013d24:	4acd      	ldr	r2, [pc, #820]	; (801405c <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013d26:	589b      	ldr	r3, [r3, r2]
 8013d28:	227c      	movs	r2, #124	; 0x7c
 8013d2a:	5c9b      	ldrb	r3, [r3, r2]
 8013d2c:	2b02      	cmp	r3, #2
 8013d2e:	d000      	beq.n	8013d32 <LoRaMacMibSetRequestConfirm+0x38e>
 8013d30:	e1ac      	b.n	801408c <LoRaMacMibSetRequestConfirm+0x6e8>
 8013d32:	4bc9      	ldr	r3, [pc, #804]	; (8014058 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013d34:	4ac9      	ldr	r2, [pc, #804]	; (801405c <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013d36:	589a      	ldr	r2, [r3, r2]
 8013d38:	23b2      	movs	r3, #178	; 0xb2
 8013d3a:	005b      	lsls	r3, r3, #1
 8013d3c:	5cd3      	ldrb	r3, [r2, r3]
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d100      	bne.n	8013d44 <LoRaMacMibSetRequestConfirm+0x3a0>
 8013d42:	e1a3      	b.n	801408c <LoRaMacMibSetRequestConfirm+0x6e8>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8013d44:	4bc6      	ldr	r3, [pc, #792]	; (8014060 <LoRaMacMibSetRequestConfirm+0x6bc>)
 8013d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d48:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8013d4a:	f7fe fa33 	bl	80121b4 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013d4e:	e19d      	b.n	801408c <LoRaMacMibSetRequestConfirm+0x6e8>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013d50:	2317      	movs	r3, #23
 8013d52:	18fb      	adds	r3, r7, r3
 8013d54:	2203      	movs	r2, #3
 8013d56:	701a      	strb	r2, [r3, #0]
            break;
 8013d58:	e198      	b.n	801408c <LoRaMacMibSetRequestConfirm+0x6e8>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	7a1b      	ldrb	r3, [r3, #8]
 8013d5e:	b25a      	sxtb	r2, r3
 8013d60:	2108      	movs	r1, #8
 8013d62:	187b      	adds	r3, r7, r1
 8013d64:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8013d66:	4bbc      	ldr	r3, [pc, #752]	; (8014058 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013d68:	4abc      	ldr	r2, [pc, #752]	; (801405c <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013d6a:	589b      	ldr	r3, [r3, r2]
 8013d6c:	22b9      	movs	r2, #185	; 0xb9
 8013d6e:	5c9a      	ldrb	r2, [r3, r2]
 8013d70:	187b      	adds	r3, r7, r1
 8013d72:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 8013d74:	4bb8      	ldr	r3, [pc, #736]	; (8014058 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013d76:	4ab9      	ldr	r2, [pc, #740]	; (801405c <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013d78:	589b      	ldr	r3, [r3, r2]
 8013d7a:	781b      	ldrb	r3, [r3, #0]
 8013d7c:	1879      	adds	r1, r7, r1
 8013d7e:	2207      	movs	r2, #7
 8013d80:	0018      	movs	r0, r3
 8013d82:	f002 ffb7 	bl	8016cf4 <RegionVerify>
 8013d86:	1e03      	subs	r3, r0, #0
 8013d88:	d008      	beq.n	8013d9c <LoRaMacMibSetRequestConfirm+0x3f8>
            {
                MacCtx.NvmCtx->MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8013d8a:	4bb3      	ldr	r3, [pc, #716]	; (8014058 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013d8c:	4ab3      	ldr	r2, [pc, #716]	; (801405c <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013d8e:	589b      	ldr	r3, [r3, r2]
 8013d90:	687a      	ldr	r2, [r7, #4]
 8013d92:	3330      	adds	r3, #48	; 0x30
 8013d94:	3204      	adds	r2, #4
 8013d96:	ca03      	ldmia	r2!, {r0, r1}
 8013d98:	c303      	stmia	r3!, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013d9a:	e17e      	b.n	801409a <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013d9c:	2317      	movs	r3, #23
 8013d9e:	18fb      	adds	r3, r7, r3
 8013da0:	2203      	movs	r2, #3
 8013da2:	701a      	strb	r2, [r3, #0]
            break;
 8013da4:	e179      	b.n	801409a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	685a      	ldr	r2, [r3, #4]
 8013daa:	210c      	movs	r1, #12
 8013dac:	187b      	adds	r3, r7, r1
 8013dae:	601a      	str	r2, [r3, #0]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8013db0:	187b      	adds	r3, r7, r1
 8013db2:	2201      	movs	r2, #1
 8013db4:	711a      	strb	r2, [r3, #4]

            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
 8013db6:	4ba8      	ldr	r3, [pc, #672]	; (8014058 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013db8:	4aa8      	ldr	r2, [pc, #672]	; (801405c <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013dba:	589b      	ldr	r3, [r3, r2]
 8013dbc:	781b      	ldrb	r3, [r3, #0]
 8013dbe:	187a      	adds	r2, r7, r1
 8013dc0:	0011      	movs	r1, r2
 8013dc2:	0018      	movs	r0, r3
 8013dc4:	f002 ffc8 	bl	8016d58 <RegionChanMaskSet>
 8013dc8:	0003      	movs	r3, r0
 8013dca:	001a      	movs	r2, r3
 8013dcc:	2301      	movs	r3, #1
 8013dce:	4053      	eors	r3, r2
 8013dd0:	b2db      	uxtb	r3, r3
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d100      	bne.n	8013dd8 <LoRaMacMibSetRequestConfirm+0x434>
 8013dd6:	e15b      	b.n	8014090 <LoRaMacMibSetRequestConfirm+0x6ec>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013dd8:	2317      	movs	r3, #23
 8013dda:	18fb      	adds	r3, r7, r3
 8013ddc:	2203      	movs	r2, #3
 8013dde:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013de0:	e156      	b.n	8014090 <LoRaMacMibSetRequestConfirm+0x6ec>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	685a      	ldr	r2, [r3, #4]
 8013de6:	210c      	movs	r1, #12
 8013de8:	187b      	adds	r3, r7, r1
 8013dea:	601a      	str	r2, [r3, #0]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8013dec:	187b      	adds	r3, r7, r1
 8013dee:	2200      	movs	r2, #0
 8013df0:	711a      	strb	r2, [r3, #4]

            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
 8013df2:	4b99      	ldr	r3, [pc, #612]	; (8014058 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013df4:	4a99      	ldr	r2, [pc, #612]	; (801405c <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013df6:	589b      	ldr	r3, [r3, r2]
 8013df8:	781b      	ldrb	r3, [r3, #0]
 8013dfa:	187a      	adds	r2, r7, r1
 8013dfc:	0011      	movs	r1, r2
 8013dfe:	0018      	movs	r0, r3
 8013e00:	f002 ffaa 	bl	8016d58 <RegionChanMaskSet>
 8013e04:	0003      	movs	r3, r0
 8013e06:	001a      	movs	r2, r3
 8013e08:	2301      	movs	r3, #1
 8013e0a:	4053      	eors	r3, r2
 8013e0c:	b2db      	uxtb	r3, r3
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d100      	bne.n	8013e14 <LoRaMacMibSetRequestConfirm+0x470>
 8013e12:	e13f      	b.n	8014094 <LoRaMacMibSetRequestConfirm+0x6f0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013e14:	2317      	movs	r3, #23
 8013e16:	18fb      	adds	r3, r7, r3
 8013e18:	2203      	movs	r2, #3
 8013e1a:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013e1c:	e13a      	b.n	8014094 <LoRaMacMibSetRequestConfirm+0x6f0>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	791b      	ldrb	r3, [r3, #4]
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	d00b      	beq.n	8013e3e <LoRaMacMibSetRequestConfirm+0x49a>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8013e2a:	2b0f      	cmp	r3, #15
 8013e2c:	d807      	bhi.n	8013e3e <LoRaMacMibSetRequestConfirm+0x49a>
            {
                MacCtx.NvmCtx->MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8013e2e:	4b8a      	ldr	r3, [pc, #552]	; (8014058 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013e30:	4a8a      	ldr	r2, [pc, #552]	; (801405c <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013e32:	589b      	ldr	r3, [r3, r2]
 8013e34:	687a      	ldr	r2, [r7, #4]
 8013e36:	7911      	ldrb	r1, [r2, #4]
 8013e38:	22a4      	movs	r2, #164	; 0xa4
 8013e3a:	5499      	strb	r1, [r3, r2]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013e3c:	e12d      	b.n	801409a <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013e3e:	2317      	movs	r3, #23
 8013e40:	18fb      	adds	r3, r7, r3
 8013e42:	2203      	movs	r2, #3
 8013e44:	701a      	strb	r2, [r3, #0]
            break;
 8013e46:	e128      	b.n	801409a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            MacCtx.NvmCtx->MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8013e48:	4b83      	ldr	r3, [pc, #524]	; (8014058 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013e4a:	4a84      	ldr	r2, [pc, #528]	; (801405c <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013e4c:	589a      	ldr	r2, [r3, r2]
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	685b      	ldr	r3, [r3, #4]
 8013e52:	2190      	movs	r1, #144	; 0x90
 8013e54:	5053      	str	r3, [r2, r1]
            break;
 8013e56:	e120      	b.n	801409a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            MacCtx.NvmCtx->MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8013e58:	4b7f      	ldr	r3, [pc, #508]	; (8014058 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013e5a:	4a80      	ldr	r2, [pc, #512]	; (801405c <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013e5c:	589a      	ldr	r2, [r3, r2]
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	685b      	ldr	r3, [r3, #4]
 8013e62:	2194      	movs	r1, #148	; 0x94
 8013e64:	5053      	str	r3, [r2, r1]
            break;
 8013e66:	e118      	b.n	801409a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            MacCtx.NvmCtx->MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8013e68:	4b7b      	ldr	r3, [pc, #492]	; (8014058 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013e6a:	4a7c      	ldr	r2, [pc, #496]	; (801405c <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013e6c:	589a      	ldr	r2, [r3, r2]
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	685b      	ldr	r3, [r3, #4]
 8013e72:	2198      	movs	r1, #152	; 0x98
 8013e74:	5053      	str	r3, [r2, r1]
            break;
 8013e76:	e110      	b.n	801409a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8013e78:	4b77      	ldr	r3, [pc, #476]	; (8014058 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013e7a:	4a78      	ldr	r2, [pc, #480]	; (801405c <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013e7c:	589a      	ldr	r2, [r3, r2]
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	685b      	ldr	r3, [r3, #4]
 8013e82:	219c      	movs	r1, #156	; 0x9c
 8013e84:	5053      	str	r3, [r2, r1]
            break;
 8013e86:	e108      	b.n	801409a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8013e88:	4b73      	ldr	r3, [pc, #460]	; (8014058 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013e8a:	4a74      	ldr	r2, [pc, #464]	; (801405c <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013e8c:	589a      	ldr	r2, [r3, r2]
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	685b      	ldr	r3, [r3, #4]
 8013e92:	21a0      	movs	r1, #160	; 0xa0
 8013e94:	5053      	str	r3, [r2, r1]
            break;
 8013e96:	e100      	b.n	801409a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	2204      	movs	r2, #4
 8013e9c:	569a      	ldrsb	r2, [r3, r2]
 8013e9e:	2408      	movs	r4, #8
 8013ea0:	193b      	adds	r3, r7, r4
 8013ea2:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_DR ) == true )
 8013ea4:	4b6c      	ldr	r3, [pc, #432]	; (8014058 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013ea6:	4a6d      	ldr	r2, [pc, #436]	; (801405c <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013ea8:	589b      	ldr	r3, [r3, r2]
 8013eaa:	781b      	ldrb	r3, [r3, #0]
 8013eac:	1939      	adds	r1, r7, r4
 8013eae:	2206      	movs	r2, #6
 8013eb0:	0018      	movs	r0, r3
 8013eb2:	f002 ff1f 	bl	8016cf4 <RegionVerify>
 8013eb6:	1e03      	subs	r3, r0, #0
 8013eb8:	d007      	beq.n	8013eca <LoRaMacMibSetRequestConfirm+0x526>
            {
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = verify.DatarateParams.Datarate;
 8013eba:	4b67      	ldr	r3, [pc, #412]	; (8014058 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013ebc:	4a67      	ldr	r2, [pc, #412]	; (801405c <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013ebe:	589b      	ldr	r3, [r3, r2]
 8013ec0:	193a      	adds	r2, r7, r4
 8013ec2:	7812      	ldrb	r2, [r2, #0]
 8013ec4:	b252      	sxtb	r2, r2
 8013ec6:	715a      	strb	r2, [r3, #5]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013ec8:	e0e7      	b.n	801409a <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013eca:	2317      	movs	r3, #23
 8013ecc:	18fb      	adds	r3, r7, r3
 8013ece:	2203      	movs	r2, #3
 8013ed0:	701a      	strb	r2, [r3, #0]
            break;
 8013ed2:	e0e2      	b.n	801409a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	2204      	movs	r2, #4
 8013ed8:	569a      	ldrsb	r2, [r3, r2]
 8013eda:	2408      	movs	r4, #8
 8013edc:	193b      	adds	r3, r7, r4
 8013ede:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8013ee0:	4b5d      	ldr	r3, [pc, #372]	; (8014058 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013ee2:	4a5e      	ldr	r2, [pc, #376]	; (801405c <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013ee4:	589b      	ldr	r3, [r3, r2]
 8013ee6:	22b8      	movs	r2, #184	; 0xb8
 8013ee8:	5c9a      	ldrb	r2, [r3, r2]
 8013eea:	193b      	adds	r3, r7, r4
 8013eec:	709a      	strb	r2, [r3, #2]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 8013eee:	4b5a      	ldr	r3, [pc, #360]	; (8014058 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013ef0:	4a5a      	ldr	r2, [pc, #360]	; (801405c <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013ef2:	589b      	ldr	r3, [r3, r2]
 8013ef4:	781b      	ldrb	r3, [r3, #0]
 8013ef6:	1939      	adds	r1, r7, r4
 8013ef8:	2205      	movs	r2, #5
 8013efa:	0018      	movs	r0, r3
 8013efc:	f002 fefa 	bl	8016cf4 <RegionVerify>
 8013f00:	1e03      	subs	r3, r0, #0
 8013f02:	d008      	beq.n	8013f16 <LoRaMacMibSetRequestConfirm+0x572>
            {
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 8013f04:	4b54      	ldr	r3, [pc, #336]	; (8014058 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013f06:	4a55      	ldr	r2, [pc, #340]	; (801405c <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013f08:	589b      	ldr	r3, [r3, r2]
 8013f0a:	193a      	adds	r2, r7, r4
 8013f0c:	2100      	movs	r1, #0
 8013f0e:	5651      	ldrsb	r1, [r2, r1]
 8013f10:	2285      	movs	r2, #133	; 0x85
 8013f12:	5499      	strb	r1, [r3, r2]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013f14:	e0c1      	b.n	801409a <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013f16:	2317      	movs	r3, #23
 8013f18:	18fb      	adds	r3, r7, r3
 8013f1a:	2203      	movs	r2, #3
 8013f1c:	701a      	strb	r2, [r3, #0]
            break;
 8013f1e:	e0bc      	b.n	801409a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	2204      	movs	r2, #4
 8013f24:	569a      	ldrsb	r2, [r3, r2]
 8013f26:	2408      	movs	r4, #8
 8013f28:	193b      	adds	r3, r7, r4
 8013f2a:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_POWER ) == true )
 8013f2c:	4b4a      	ldr	r3, [pc, #296]	; (8014058 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013f2e:	4a4b      	ldr	r2, [pc, #300]	; (801405c <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013f30:	589b      	ldr	r3, [r3, r2]
 8013f32:	781b      	ldrb	r3, [r3, #0]
 8013f34:	1939      	adds	r1, r7, r4
 8013f36:	220a      	movs	r2, #10
 8013f38:	0018      	movs	r0, r3
 8013f3a:	f002 fedb 	bl	8016cf4 <RegionVerify>
 8013f3e:	1e03      	subs	r3, r0, #0
 8013f40:	d007      	beq.n	8013f52 <LoRaMacMibSetRequestConfirm+0x5ae>
            {
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = verify.TxPower;
 8013f42:	4b45      	ldr	r3, [pc, #276]	; (8014058 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013f44:	4a45      	ldr	r2, [pc, #276]	; (801405c <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013f46:	589b      	ldr	r3, [r3, r2]
 8013f48:	193a      	adds	r2, r7, r4
 8013f4a:	7812      	ldrb	r2, [r2, #0]
 8013f4c:	b252      	sxtb	r2, r2
 8013f4e:	711a      	strb	r2, [r3, #4]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013f50:	e0a3      	b.n	801409a <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013f52:	2317      	movs	r3, #23
 8013f54:	18fb      	adds	r3, r7, r3
 8013f56:	2203      	movs	r2, #3
 8013f58:	701a      	strb	r2, [r3, #0]
            break;
 8013f5a:	e09e      	b.n	801409a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	2204      	movs	r2, #4
 8013f60:	569a      	ldrsb	r2, [r3, r2]
 8013f62:	2408      	movs	r4, #8
 8013f64:	193b      	adds	r3, r7, r4
 8013f66:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_POWER ) == true )
 8013f68:	4b3b      	ldr	r3, [pc, #236]	; (8014058 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013f6a:	4a3c      	ldr	r2, [pc, #240]	; (801405c <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013f6c:	589b      	ldr	r3, [r3, r2]
 8013f6e:	781b      	ldrb	r3, [r3, #0]
 8013f70:	1939      	adds	r1, r7, r4
 8013f72:	2209      	movs	r2, #9
 8013f74:	0018      	movs	r0, r3
 8013f76:	f002 febd 	bl	8016cf4 <RegionVerify>
 8013f7a:	1e03      	subs	r3, r0, #0
 8013f7c:	d008      	beq.n	8013f90 <LoRaMacMibSetRequestConfirm+0x5ec>
            {
                MacCtx.NvmCtx->MacParams.ChannelsTxPower = verify.TxPower;
 8013f7e:	4b36      	ldr	r3, [pc, #216]	; (8014058 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013f80:	4a36      	ldr	r2, [pc, #216]	; (801405c <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013f82:	589b      	ldr	r3, [r3, r2]
 8013f84:	193a      	adds	r2, r7, r4
 8013f86:	2100      	movs	r1, #0
 8013f88:	5651      	ldrsb	r1, [r2, r1]
 8013f8a:	2284      	movs	r2, #132	; 0x84
 8013f8c:	5499      	strb	r1, [r3, r2]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013f8e:	e084      	b.n	801409a <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013f90:	2317      	movs	r3, #23
 8013f92:	18fb      	adds	r3, r7, r3
 8013f94:	2203      	movs	r2, #3
 8013f96:	701a      	strb	r2, [r3, #0]
            break;
 8013f98:	e07f      	b.n	801409a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8013f9a:	4b2f      	ldr	r3, [pc, #188]	; (8014058 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013f9c:	4a2f      	ldr	r2, [pc, #188]	; (801405c <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013f9e:	589b      	ldr	r3, [r3, r2]
 8013fa0:	687a      	ldr	r2, [r7, #4]
 8013fa2:	6852      	ldr	r2, [r2, #4]
 8013fa4:	609a      	str	r2, [r3, #8]
 8013fa6:	4a2c      	ldr	r2, [pc, #176]	; (8014058 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013fa8:	492c      	ldr	r1, [pc, #176]	; (801405c <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013faa:	5852      	ldr	r2, [r2, r1]
 8013fac:	689b      	ldr	r3, [r3, #8]
 8013fae:	2188      	movs	r1, #136	; 0x88
 8013fb0:	5053      	str	r3, [r2, r1]
            break;
 8013fb2:	e072      	b.n	801409a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8013fb4:	4b28      	ldr	r3, [pc, #160]	; (8014058 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013fb6:	4a29      	ldr	r2, [pc, #164]	; (801405c <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013fb8:	589b      	ldr	r3, [r3, r2]
 8013fba:	687a      	ldr	r2, [r7, #4]
 8013fbc:	7912      	ldrb	r2, [r2, #4]
 8013fbe:	731a      	strb	r2, [r3, #12]
 8013fc0:	4a25      	ldr	r2, [pc, #148]	; (8014058 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013fc2:	4926      	ldr	r1, [pc, #152]	; (801405c <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013fc4:	5852      	ldr	r2, [r2, r1]
 8013fc6:	7b19      	ldrb	r1, [r3, #12]
 8013fc8:	238c      	movs	r3, #140	; 0x8c
 8013fca:	54d1      	strb	r1, [r2, r3]
            break;
 8013fcc:	e065      	b.n	801409a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_ANTENNA_GAIN:
        {
            MacCtx.NvmCtx->MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8013fce:	4b22      	ldr	r3, [pc, #136]	; (8014058 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013fd0:	4a22      	ldr	r2, [pc, #136]	; (801405c <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013fd2:	589a      	ldr	r2, [r3, r2]
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	685b      	ldr	r3, [r3, #4]
 8013fd8:	21c0      	movs	r1, #192	; 0xc0
 8013fda:	5053      	str	r3, [r2, r1]
            break;
 8013fdc:	e05d      	b.n	801409a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8013fde:	4b1e      	ldr	r3, [pc, #120]	; (8014058 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013fe0:	4a1e      	ldr	r2, [pc, #120]	; (801405c <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013fe2:	589b      	ldr	r3, [r3, r2]
 8013fe4:	687a      	ldr	r2, [r7, #4]
 8013fe6:	6852      	ldr	r2, [r2, #4]
 8013fe8:	641a      	str	r2, [r3, #64]	; 0x40
            break;
 8013fea:	e056      	b.n	801409a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_NVM_CTXS:
        {
            if( mibSet->Param.Contexts != 0 )
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	685b      	ldr	r3, [r3, #4]
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d009      	beq.n	8014008 <LoRaMacMibSetRequestConfirm+0x664>
            {
                status = RestoreCtxs( mibSet->Param.Contexts );
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	685b      	ldr	r3, [r3, #4]
 8013ff8:	2217      	movs	r2, #23
 8013ffa:	18bc      	adds	r4, r7, r2
 8013ffc:	0018      	movs	r0, r3
 8013ffe:	f7fe fc1b 	bl	8012838 <RestoreCtxs>
 8014002:	0003      	movs	r3, r0
 8014004:	7023      	strb	r3, [r4, #0]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014006:	e048      	b.n	801409a <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014008:	2317      	movs	r3, #23
 801400a:	18fb      	adds	r3, r7, r3
 801400c:	2203      	movs	r2, #3
 801400e:	701a      	strb	r2, [r3, #0]
            break;
 8014010:	e043      	b.n	801409a <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	799b      	ldrb	r3, [r3, #6]
 8014016:	2b01      	cmp	r3, #1
 8014018:	d810      	bhi.n	801403c <LoRaMacMibSetRequestConfirm+0x698>
            {
                MacCtx.NvmCtx->Version = mibSet->Param.AbpLrWanVersion;
 801401a:	4b0f      	ldr	r3, [pc, #60]	; (8014058 <LoRaMacMibSetRequestConfirm+0x6b4>)
 801401c:	4a0f      	ldr	r2, [pc, #60]	; (801405c <LoRaMacMibSetRequestConfirm+0x6b8>)
 801401e:	5899      	ldr	r1, [r3, r2]
 8014020:	23b0      	movs	r3, #176	; 0xb0
 8014022:	005a      	lsls	r2, r3, #1
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	685b      	ldr	r3, [r3, #4]
 8014028:	508b      	str	r3, [r1, r2]

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	685b      	ldr	r3, [r3, #4]
 801402e:	0018      	movs	r0, r3
 8014030:	f001 fe3a 	bl	8015ca8 <LoRaMacCryptoSetLrWanVersion>
 8014034:	1e03      	subs	r3, r0, #0
 8014036:	d02f      	beq.n	8014098 <LoRaMacMibSetRequestConfirm+0x6f4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014038:	2311      	movs	r3, #17
 801403a:	e035      	b.n	80140a8 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801403c:	2317      	movs	r3, #23
 801403e:	18fb      	adds	r3, r7, r3
 8014040:	2203      	movs	r2, #3
 8014042:	701a      	strb	r2, [r3, #0]
            }
            break;
 8014044:	e028      	b.n	8014098 <LoRaMacMibSetRequestConfirm+0x6f4>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8014046:	2317      	movs	r3, #23
 8014048:	18fc      	adds	r4, r7, r3
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	0018      	movs	r0, r3
 801404e:	f000 fc8f 	bl	8014970 <LoRaMacMibClassBSetRequestConfirm>
 8014052:	0003      	movs	r3, r0
 8014054:	7023      	strb	r3, [r4, #0]
            break;
 8014056:	e020      	b.n	801409a <LoRaMacMibSetRequestConfirm+0x6f6>
 8014058:	200005b4 	.word	0x200005b4
 801405c:	00000484 	.word	0x00000484
 8014060:	0801fb64 	.word	0x0801fb64
            break;
 8014064:	46c0      	nop			; (mov r8, r8)
 8014066:	e018      	b.n	801409a <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8014068:	46c0      	nop			; (mov r8, r8)
 801406a:	e016      	b.n	801409a <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 801406c:	46c0      	nop			; (mov r8, r8)
 801406e:	e014      	b.n	801409a <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8014070:	46c0      	nop			; (mov r8, r8)
 8014072:	e012      	b.n	801409a <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8014074:	46c0      	nop			; (mov r8, r8)
 8014076:	e010      	b.n	801409a <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8014078:	46c0      	nop			; (mov r8, r8)
 801407a:	e00e      	b.n	801409a <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 801407c:	46c0      	nop			; (mov r8, r8)
 801407e:	e00c      	b.n	801409a <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8014080:	46c0      	nop			; (mov r8, r8)
 8014082:	e00a      	b.n	801409a <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8014084:	46c0      	nop			; (mov r8, r8)
 8014086:	e008      	b.n	801409a <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8014088:	46c0      	nop			; (mov r8, r8)
 801408a:	e006      	b.n	801409a <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 801408c:	46c0      	nop			; (mov r8, r8)
 801408e:	e004      	b.n	801409a <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8014090:	46c0      	nop			; (mov r8, r8)
 8014092:	e002      	b.n	801409a <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8014094:	46c0      	nop			; (mov r8, r8)
 8014096:	e000      	b.n	801409a <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8014098:	46c0      	nop			; (mov r8, r8)
        }
    }
    EventRegionNvmCtxChanged( );
 801409a:	f7fe fe19 	bl	8012cd0 <EventRegionNvmCtxChanged>
    EventMacNvmCtxChanged( );
 801409e:	f7fe fe0f 	bl	8012cc0 <EventMacNvmCtxChanged>
    return status;
 80140a2:	2317      	movs	r3, #23
 80140a4:	18fb      	adds	r3, r7, r3
 80140a6:	781b      	ldrb	r3, [r3, #0]
}
 80140a8:	0018      	movs	r0, r3
 80140aa:	46bd      	mov	sp, r7
 80140ac:	b007      	add	sp, #28
 80140ae:	bd90      	pop	{r4, r7, pc}

080140b0 <LoRaMacMlmeRequest>:
    EventRegionNvmCtxChanged( );
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 80140b0:	b5b0      	push	{r4, r5, r7, lr}
 80140b2:	b086      	sub	sp, #24
 80140b4:	af00      	add	r7, sp, #0
 80140b6:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80140b8:	2317      	movs	r3, #23
 80140ba:	18fb      	adds	r3, r7, r3
 80140bc:	2202      	movs	r2, #2
 80140be:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 80140c0:	230c      	movs	r3, #12
 80140c2:	18fb      	adds	r3, r7, r3
 80140c4:	2200      	movs	r2, #0
 80140c6:	801a      	strh	r2, [r3, #0]

    if( mlmeRequest == NULL )
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	d101      	bne.n	80140d2 <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80140ce:	2303      	movs	r3, #3
 80140d0:	e133      	b.n	801433a <LoRaMacMlmeRequest+0x28a>
    }
    if( LoRaMacIsBusy( ) == true )
 80140d2:	f7fe fe49 	bl	8012d68 <LoRaMacIsBusy>
 80140d6:	1e03      	subs	r3, r0, #0
 80140d8:	d001      	beq.n	80140de <LoRaMacMlmeRequest+0x2e>
    {
        return LORAMAC_STATUS_BUSY;
 80140da:	2301      	movs	r3, #1
 80140dc:	e12d      	b.n	801433a <LoRaMacMlmeRequest+0x28a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 80140de:	f001 fa0b 	bl	80154f8 <LoRaMacConfirmQueueIsFull>
 80140e2:	1e03      	subs	r3, r0, #0
 80140e4:	d001      	beq.n	80140ea <LoRaMacMlmeRequest+0x3a>
    {
        return LORAMAC_STATUS_BUSY;
 80140e6:	2301      	movs	r3, #1
 80140e8:	e127      	b.n	801433a <LoRaMacMlmeRequest+0x28a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 80140ea:	f001 f9fb 	bl	80154e4 <LoRaMacConfirmQueueGetCnt>
 80140ee:	1e03      	subs	r3, r0, #0
 80140f0:	d105      	bne.n	80140fe <LoRaMacMlmeRequest+0x4e>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 80140f2:	4b94      	ldr	r3, [pc, #592]	; (8014344 <LoRaMacMlmeRequest+0x294>)
 80140f4:	2214      	movs	r2, #20
 80140f6:	2100      	movs	r1, #0
 80140f8:	0018      	movs	r0, r3
 80140fa:	f005 fa61 	bl	80195c0 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80140fe:	4b92      	ldr	r3, [pc, #584]	; (8014348 <LoRaMacMlmeRequest+0x298>)
 8014100:	4a92      	ldr	r2, [pc, #584]	; (801434c <LoRaMacMlmeRequest+0x29c>)
 8014102:	2101      	movs	r1, #1
 8014104:	5499      	strb	r1, [r3, r2]

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8014106:	4b90      	ldr	r3, [pc, #576]	; (8014348 <LoRaMacMlmeRequest+0x298>)
 8014108:	4a91      	ldr	r2, [pc, #580]	; (8014350 <LoRaMacMlmeRequest+0x2a0>)
 801410a:	5c99      	ldrb	r1, [r3, r2]
 801410c:	2004      	movs	r0, #4
 801410e:	4301      	orrs	r1, r0
 8014110:	5499      	strb	r1, [r3, r2]
    queueElement.Request = mlmeRequest->Type;
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	781a      	ldrb	r2, [r3, #0]
 8014116:	2110      	movs	r1, #16
 8014118:	187b      	adds	r3, r7, r1
 801411a:	701a      	strb	r2, [r3, #0]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801411c:	187b      	adds	r3, r7, r1
 801411e:	2201      	movs	r2, #1
 8014120:	705a      	strb	r2, [r3, #1]
    queueElement.RestrictCommonReadyToHandle = false;
 8014122:	187b      	adds	r3, r7, r1
 8014124:	2200      	movs	r2, #0
 8014126:	70da      	strb	r2, [r3, #3]

    switch( mlmeRequest->Type )
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	781b      	ldrb	r3, [r3, #0]
 801412c:	2b0e      	cmp	r3, #14
 801412e:	d900      	bls.n	8014132 <LoRaMacMlmeRequest+0x82>
 8014130:	e0d4      	b.n	80142dc <LoRaMacMlmeRequest+0x22c>
 8014132:	009a      	lsls	r2, r3, #2
 8014134:	4b87      	ldr	r3, [pc, #540]	; (8014354 <LoRaMacMlmeRequest+0x2a4>)
 8014136:	18d3      	adds	r3, r2, r3
 8014138:	681b      	ldr	r3, [r3, #0]
 801413a:	469f      	mov	pc, r3
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 801413c:	4a82      	ldr	r2, [pc, #520]	; (8014348 <LoRaMacMlmeRequest+0x298>)
 801413e:	23d0      	movs	r3, #208	; 0xd0
 8014140:	009b      	lsls	r3, r3, #2
 8014142:	58d3      	ldr	r3, [r2, r3]
 8014144:	2220      	movs	r2, #32
 8014146:	4013      	ands	r3, r2
 8014148:	d001      	beq.n	801414e <LoRaMacMlmeRequest+0x9e>
            {
                return LORAMAC_STATUS_BUSY;
 801414a:	2301      	movs	r3, #1
 801414c:	e0f5      	b.n	801433a <LoRaMacMlmeRequest+0x28a>
            }

            ResetMacParameters( );
 801414e:	f7fd feff 	bl	8011f50 <ResetMacParameters>

            MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8014152:	4b7d      	ldr	r3, [pc, #500]	; (8014348 <LoRaMacMlmeRequest+0x298>)
 8014154:	4a80      	ldr	r2, [pc, #512]	; (8014358 <LoRaMacMlmeRequest+0x2a8>)
 8014156:	589b      	ldr	r3, [r3, r2]
 8014158:	7818      	ldrb	r0, [r3, #0]
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	791b      	ldrb	r3, [r3, #4]
 801415e:	b259      	sxtb	r1, r3
 8014160:	4b79      	ldr	r3, [pc, #484]	; (8014348 <LoRaMacMlmeRequest+0x298>)
 8014162:	4a7d      	ldr	r2, [pc, #500]	; (8014358 <LoRaMacMlmeRequest+0x2a8>)
 8014164:	589c      	ldr	r4, [r3, r2]
 8014166:	2200      	movs	r2, #0
 8014168:	f002 fedb 	bl	8016f22 <RegionAlternateDr>
 801416c:	0003      	movs	r3, r0
 801416e:	001a      	movs	r2, r3
 8014170:	2385      	movs	r3, #133	; 0x85
 8014172:	54e2      	strb	r2, [r4, r3]

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8014174:	2310      	movs	r3, #16
 8014176:	18fb      	adds	r3, r7, r3
 8014178:	2207      	movs	r2, #7
 801417a:	705a      	strb	r2, [r3, #1]

            status = SendReJoinReq( JOIN_REQ ); // попытка без реконекта
 801417c:	2517      	movs	r5, #23
 801417e:	197c      	adds	r4, r7, r5
 8014180:	20ff      	movs	r0, #255	; 0xff
 8014182:	f7fd fbab 	bl	80118dc <SendReJoinReq>
 8014186:	0003      	movs	r3, r0
 8014188:	7023      	strb	r3, [r4, #0]

            if( status != LORAMAC_STATUS_OK )
 801418a:	197b      	adds	r3, r7, r5
 801418c:	781b      	ldrb	r3, [r3, #0]
 801418e:	2b00      	cmp	r3, #0
 8014190:	d100      	bne.n	8014194 <LoRaMacMlmeRequest+0xe4>
 8014192:	e0a5      	b.n	80142e0 <LoRaMacMlmeRequest+0x230>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8014194:	4b6c      	ldr	r3, [pc, #432]	; (8014348 <LoRaMacMlmeRequest+0x298>)
 8014196:	4a70      	ldr	r2, [pc, #448]	; (8014358 <LoRaMacMlmeRequest+0x2a8>)
 8014198:	589b      	ldr	r3, [r3, r2]
 801419a:	7818      	ldrb	r0, [r3, #0]
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	791b      	ldrb	r3, [r3, #4]
 80141a0:	b259      	sxtb	r1, r3
 80141a2:	4b69      	ldr	r3, [pc, #420]	; (8014348 <LoRaMacMlmeRequest+0x298>)
 80141a4:	4a6c      	ldr	r2, [pc, #432]	; (8014358 <LoRaMacMlmeRequest+0x2a8>)
 80141a6:	589c      	ldr	r4, [r3, r2]
 80141a8:	2201      	movs	r2, #1
 80141aa:	f002 feba 	bl	8016f22 <RegionAlternateDr>
 80141ae:	0003      	movs	r3, r0
 80141b0:	001a      	movs	r2, r3
 80141b2:	2385      	movs	r3, #133	; 0x85
 80141b4:	54e2      	strb	r2, [r4, r3]
            }
            break;
 80141b6:	e093      	b.n	80142e0 <LoRaMacMlmeRequest+0x230>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80141b8:	2417      	movs	r4, #23
 80141ba:	193b      	adds	r3, r7, r4
 80141bc:	2200      	movs	r2, #0
 80141be:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80141c0:	230c      	movs	r3, #12
 80141c2:	18fb      	adds	r3, r7, r3
 80141c4:	2200      	movs	r2, #0
 80141c6:	0019      	movs	r1, r3
 80141c8:	2002      	movs	r0, #2
 80141ca:	f000 fd7d 	bl	8014cc8 <LoRaMacCommandsAddCmd>
 80141ce:	1e03      	subs	r3, r0, #0
 80141d0:	d100      	bne.n	80141d4 <LoRaMacMlmeRequest+0x124>
 80141d2:	e087      	b.n	80142e4 <LoRaMacMlmeRequest+0x234>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80141d4:	193b      	adds	r3, r7, r4
 80141d6:	2213      	movs	r2, #19
 80141d8:	701a      	strb	r2, [r3, #0]
            }
            break;
 80141da:	e083      	b.n	80142e4 <LoRaMacMlmeRequest+0x234>
        }
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	889b      	ldrh	r3, [r3, #4]
 80141e0:	2217      	movs	r2, #23
 80141e2:	18bc      	adds	r4, r7, r2
 80141e4:	0018      	movs	r0, r3
 80141e6:	f7fe fa5d 	bl	80126a4 <SetTxContinuousWave>
 80141ea:	0003      	movs	r3, r0
 80141ec:	7023      	strb	r3, [r4, #0]
            break;
 80141ee:	e080      	b.n	80142f2 <LoRaMacMlmeRequest+0x242>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	8898      	ldrh	r0, [r3, #4]
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	6899      	ldr	r1, [r3, #8]
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	7b1b      	ldrb	r3, [r3, #12]
 80141fc:	2217      	movs	r2, #23
 80141fe:	18bc      	adds	r4, r7, r2
 8014200:	001a      	movs	r2, r3
 8014202:	f7fe fa9b 	bl	801273c <SetTxContinuousWave1>
 8014206:	0003      	movs	r3, r0
 8014208:	7023      	strb	r3, [r4, #0]
            break;
 801420a:	e072      	b.n	80142f2 <LoRaMacMlmeRequest+0x242>
        }
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 801420c:	2417      	movs	r4, #23
 801420e:	193b      	adds	r3, r7, r4
 8014210:	2200      	movs	r2, #0
 8014212:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8014214:	230c      	movs	r3, #12
 8014216:	18fb      	adds	r3, r7, r3
 8014218:	2200      	movs	r2, #0
 801421a:	0019      	movs	r1, r3
 801421c:	200d      	movs	r0, #13
 801421e:	f000 fd53 	bl	8014cc8 <LoRaMacCommandsAddCmd>
 8014222:	1e03      	subs	r3, r0, #0
 8014224:	d060      	beq.n	80142e8 <LoRaMacMlmeRequest+0x238>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014226:	193b      	adds	r3, r7, r4
 8014228:	2213      	movs	r2, #19
 801422a:	701a      	strb	r2, [r3, #0]
            }
            break;
 801422c:	e05c      	b.n	80142e8 <LoRaMacMlmeRequest+0x238>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 801422e:	4b46      	ldr	r3, [pc, #280]	; (8014348 <LoRaMacMlmeRequest+0x298>)
 8014230:	4a49      	ldr	r2, [pc, #292]	; (8014358 <LoRaMacMlmeRequest+0x2a8>)
 8014232:	589b      	ldr	r3, [r3, r2]
 8014234:	227c      	movs	r2, #124	; 0x7c
 8014236:	5c9b      	ldrb	r3, [r3, r2]
 8014238:	2b00      	cmp	r3, #0
 801423a:	d157      	bne.n	80142ec <LoRaMacMlmeRequest+0x23c>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 801423c:	2416      	movs	r4, #22
 801423e:	193b      	adds	r3, r7, r4
 8014240:	687a      	ldr	r2, [r7, #4]
 8014242:	7912      	ldrb	r2, [r2, #4]
 8014244:	701a      	strb	r2, [r3, #0]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	791b      	ldrb	r3, [r3, #4]
 801424a:	075b      	lsls	r3, r3, #29
 801424c:	0f5b      	lsrs	r3, r3, #29
 801424e:	b2db      	uxtb	r3, r3
 8014250:	0018      	movs	r0, r3
 8014252:	f000 fb65 	bl	8014920 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8014256:	210c      	movs	r1, #12
 8014258:	187b      	adds	r3, r7, r1
 801425a:	193a      	adds	r2, r7, r4
 801425c:	7812      	ldrb	r2, [r2, #0]
 801425e:	701a      	strb	r2, [r3, #0]
                status = LORAMAC_STATUS_OK;
 8014260:	2417      	movs	r4, #23
 8014262:	193b      	adds	r3, r7, r4
 8014264:	2200      	movs	r2, #0
 8014266:	701a      	strb	r2, [r3, #0]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8014268:	187b      	adds	r3, r7, r1
 801426a:	2201      	movs	r2, #1
 801426c:	0019      	movs	r1, r3
 801426e:	2010      	movs	r0, #16
 8014270:	f000 fd2a 	bl	8014cc8 <LoRaMacCommandsAddCmd>
 8014274:	1e03      	subs	r3, r0, #0
 8014276:	d039      	beq.n	80142ec <LoRaMacMlmeRequest+0x23c>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014278:	193b      	adds	r3, r7, r4
 801427a:	2213      	movs	r2, #19
 801427c:	701a      	strb	r2, [r3, #0]
                }
            }
            break;
 801427e:	e035      	b.n	80142ec <LoRaMacMlmeRequest+0x23c>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8014280:	2417      	movs	r4, #23
 8014282:	193b      	adds	r3, r7, r4
 8014284:	2200      	movs	r2, #0
 8014286:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8014288:	230c      	movs	r3, #12
 801428a:	18fb      	adds	r3, r7, r3
 801428c:	2200      	movs	r2, #0
 801428e:	0019      	movs	r1, r3
 8014290:	2012      	movs	r0, #18
 8014292:	f000 fd19 	bl	8014cc8 <LoRaMacCommandsAddCmd>
 8014296:	1e03      	subs	r3, r0, #0
 8014298:	d02a      	beq.n	80142f0 <LoRaMacMlmeRequest+0x240>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801429a:	193b      	adds	r3, r7, r4
 801429c:	2213      	movs	r2, #19
 801429e:	701a      	strb	r2, [r3, #0]
            }
            break;
 80142a0:	e026      	b.n	80142f0 <LoRaMacMlmeRequest+0x240>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 80142a2:	2310      	movs	r3, #16
 80142a4:	18fb      	adds	r3, r7, r3
 80142a6:	2201      	movs	r2, #1
 80142a8:	70da      	strb	r2, [r3, #3]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 80142aa:	f000 faf7 	bl	801489c <LoRaMacClassBIsAcquisitionInProgress>
 80142ae:	0003      	movs	r3, r0
 80142b0:	001a      	movs	r2, r3
 80142b2:	2301      	movs	r3, #1
 80142b4:	4053      	eors	r3, r2
 80142b6:	b2db      	uxtb	r3, r3
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d00a      	beq.n	80142d2 <LoRaMacMlmeRequest+0x222>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 80142bc:	2000      	movs	r0, #0
 80142be:	f000 facf 	bl	8014860 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 80142c2:	2000      	movs	r0, #0
 80142c4:	f000 faf0 	bl	80148a8 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 80142c8:	2317      	movs	r3, #23
 80142ca:	18fb      	adds	r3, r7, r3
 80142cc:	2200      	movs	r2, #0
 80142ce:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 80142d0:	e00f      	b.n	80142f2 <LoRaMacMlmeRequest+0x242>
                status = LORAMAC_STATUS_BUSY;
 80142d2:	2317      	movs	r3, #23
 80142d4:	18fb      	adds	r3, r7, r3
 80142d6:	2201      	movs	r2, #1
 80142d8:	701a      	strb	r2, [r3, #0]
            break;
 80142da:	e00a      	b.n	80142f2 <LoRaMacMlmeRequest+0x242>
        }
        default:
            break;
 80142dc:	46c0      	nop			; (mov r8, r8)
 80142de:	e008      	b.n	80142f2 <LoRaMacMlmeRequest+0x242>
            break;
 80142e0:	46c0      	nop			; (mov r8, r8)
 80142e2:	e006      	b.n	80142f2 <LoRaMacMlmeRequest+0x242>
            break;
 80142e4:	46c0      	nop			; (mov r8, r8)
 80142e6:	e004      	b.n	80142f2 <LoRaMacMlmeRequest+0x242>
            break;
 80142e8:	46c0      	nop			; (mov r8, r8)
 80142ea:	e002      	b.n	80142f2 <LoRaMacMlmeRequest+0x242>
            break;
 80142ec:	46c0      	nop			; (mov r8, r8)
 80142ee:	e000      	b.n	80142f2 <LoRaMacMlmeRequest+0x242>
            break;
 80142f0:	46c0      	nop			; (mov r8, r8)
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80142f2:	4a15      	ldr	r2, [pc, #84]	; (8014348 <LoRaMacMlmeRequest+0x298>)
 80142f4:	2391      	movs	r3, #145	; 0x91
 80142f6:	00db      	lsls	r3, r3, #3
 80142f8:	58d2      	ldr	r2, [r2, r3]
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 80142fe:	2317      	movs	r3, #23
 8014300:	18fb      	adds	r3, r7, r3
 8014302:	781b      	ldrb	r3, [r3, #0]
 8014304:	2b00      	cmp	r3, #0
 8014306:	d00e      	beq.n	8014326 <LoRaMacMlmeRequest+0x276>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8014308:	f001 f8ec 	bl	80154e4 <LoRaMacConfirmQueueGetCnt>
 801430c:	1e03      	subs	r3, r0, #0
 801430e:	d111      	bne.n	8014334 <LoRaMacMlmeRequest+0x284>
        {
            MacCtx.NodeAckRequested = false;
 8014310:	4b0d      	ldr	r3, [pc, #52]	; (8014348 <LoRaMacMlmeRequest+0x298>)
 8014312:	4a12      	ldr	r2, [pc, #72]	; (801435c <LoRaMacMlmeRequest+0x2ac>)
 8014314:	2100      	movs	r1, #0
 8014316:	5499      	strb	r1, [r3, r2]
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8014318:	4b0b      	ldr	r3, [pc, #44]	; (8014348 <LoRaMacMlmeRequest+0x298>)
 801431a:	4a0d      	ldr	r2, [pc, #52]	; (8014350 <LoRaMacMlmeRequest+0x2a0>)
 801431c:	5c99      	ldrb	r1, [r3, r2]
 801431e:	2004      	movs	r0, #4
 8014320:	4381      	bics	r1, r0
 8014322:	5499      	strb	r1, [r3, r2]
 8014324:	e006      	b.n	8014334 <LoRaMacMlmeRequest+0x284>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8014326:	2310      	movs	r3, #16
 8014328:	18fb      	adds	r3, r7, r3
 801432a:	0018      	movs	r0, r3
 801432c:	f000 ff6c 	bl	8015208 <LoRaMacConfirmQueueAdd>
        EventMacNvmCtxChanged( );
 8014330:	f7fe fcc6 	bl	8012cc0 <EventMacNvmCtxChanged>
    }
    return status;
 8014334:	2317      	movs	r3, #23
 8014336:	18fb      	adds	r3, r7, r3
 8014338:	781b      	ldrb	r3, [r3, #0]
}
 801433a:	0018      	movs	r0, r3
 801433c:	46bd      	mov	sp, r7
 801433e:	b006      	add	sp, #24
 8014340:	bdb0      	pop	{r4, r5, r7, pc}
 8014342:	46c0      	nop			; (mov r8, r8)
 8014344:	20000a04 	.word	0x20000a04
 8014348:	200005b4 	.word	0x200005b4
 801434c:	00000451 	.word	0x00000451
 8014350:	00000481 	.word	0x00000481
 8014354:	0801f874 	.word	0x0801f874
 8014358:	00000484 	.word	0x00000484
 801435c:	00000414 	.word	0x00000414

08014360 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8014360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014362:	b08d      	sub	sp, #52	; 0x34
 8014364:	af02      	add	r7, sp, #8
 8014366:	6078      	str	r0, [r7, #4]
 8014368:	000a      	movs	r2, r1
 801436a:	1cfb      	adds	r3, r7, #3
 801436c:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 801436e:	2327      	movs	r3, #39	; 0x27
 8014370:	18fb      	adds	r3, r7, r3
 8014372:	2202      	movs	r2, #2
 8014374:	701a      	strb	r2, [r3, #0]
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8014376:	2326      	movs	r3, #38	; 0x26
 8014378:	18fb      	adds	r3, r7, r3
 801437a:	2200      	movs	r2, #0
 801437c:	701a      	strb	r2, [r3, #0]
    void* fBuffer;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 801437e:	231d      	movs	r3, #29
 8014380:	18fb      	adds	r3, r7, r3
 8014382:	2200      	movs	r2, #0
 8014384:	701a      	strb	r2, [r3, #0]
    bool readyToSend = false;
 8014386:	231c      	movs	r3, #28
 8014388:	18fb      	adds	r3, r7, r3
 801438a:	2200      	movs	r2, #0
 801438c:	701a      	strb	r2, [r3, #0]

    if( mcpsRequest == NULL )
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	2b00      	cmp	r3, #0
 8014392:	d101      	bne.n	8014398 <LoRaMacMcpsRequest+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014394:	2303      	movs	r3, #3
 8014396:	e11b      	b.n	80145d0 <LoRaMacMcpsRequest+0x270>
    }
    if( LoRaMacIsBusy( ) == true )
 8014398:	f7fe fce6 	bl	8012d68 <LoRaMacIsBusy>
 801439c:	1e03      	subs	r3, r0, #0
 801439e:	d001      	beq.n	80143a4 <LoRaMacMcpsRequest+0x44>
    {
        return LORAMAC_STATUS_BUSY;
 80143a0:	2301      	movs	r3, #1
 80143a2:	e115      	b.n	80145d0 <LoRaMacMcpsRequest+0x270>
    }

    macHdr.Value = 0;
 80143a4:	230c      	movs	r3, #12
 80143a6:	18fb      	adds	r3, r7, r3
 80143a8:	2200      	movs	r2, #0
 80143aa:	701a      	strb	r2, [r3, #0]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 80143ac:	4b8a      	ldr	r3, [pc, #552]	; (80145d8 <LoRaMacMcpsRequest+0x278>)
 80143ae:	2214      	movs	r2, #20
 80143b0:	2100      	movs	r1, #0
 80143b2:	0018      	movs	r0, r3
 80143b4:	f005 f904 	bl	80195c0 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80143b8:	4b88      	ldr	r3, [pc, #544]	; (80145dc <LoRaMacMcpsRequest+0x27c>)
 80143ba:	4a89      	ldr	r2, [pc, #548]	; (80145e0 <LoRaMacMcpsRequest+0x280>)
 80143bc:	2101      	movs	r1, #1
 80143be:	5499      	strb	r1, [r3, r2]

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 80143c0:	4b86      	ldr	r3, [pc, #536]	; (80145dc <LoRaMacMcpsRequest+0x27c>)
 80143c2:	4a88      	ldr	r2, [pc, #544]	; (80145e4 <LoRaMacMcpsRequest+0x284>)
 80143c4:	2101      	movs	r1, #1
 80143c6:	5499      	strb	r1, [r3, r2]

    switch( mcpsRequest->Type )
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	781b      	ldrb	r3, [r3, #0]
 80143cc:	2b03      	cmp	r3, #3
 80143ce:	d056      	beq.n	801447e <LoRaMacMcpsRequest+0x11e>
 80143d0:	dc72      	bgt.n	80144b8 <LoRaMacMcpsRequest+0x158>
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d002      	beq.n	80143dc <LoRaMacMcpsRequest+0x7c>
 80143d6:	2b01      	cmp	r3, #1
 80143d8:	d024      	beq.n	8014424 <LoRaMacMcpsRequest+0xc4>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 80143da:	e06d      	b.n	80144b8 <LoRaMacMcpsRequest+0x158>
            readyToSend = true;
 80143dc:	231c      	movs	r3, #28
 80143de:	18fb      	adds	r3, r7, r3
 80143e0:	2201      	movs	r2, #1
 80143e2:	701a      	strb	r2, [r3, #0]
            MacCtx.AckTimeoutRetries = 1;
 80143e4:	4b7d      	ldr	r3, [pc, #500]	; (80145dc <LoRaMacMcpsRequest+0x27c>)
 80143e6:	4a80      	ldr	r2, [pc, #512]	; (80145e8 <LoRaMacMcpsRequest+0x288>)
 80143e8:	2101      	movs	r1, #1
 80143ea:	5499      	strb	r1, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 80143ec:	230c      	movs	r3, #12
 80143ee:	18fb      	adds	r3, r7, r3
 80143f0:	781a      	ldrb	r2, [r3, #0]
 80143f2:	211f      	movs	r1, #31
 80143f4:	400a      	ands	r2, r1
 80143f6:	1c11      	adds	r1, r2, #0
 80143f8:	2240      	movs	r2, #64	; 0x40
 80143fa:	430a      	orrs	r2, r1
 80143fc:	701a      	strb	r2, [r3, #0]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 80143fe:	2326      	movs	r3, #38	; 0x26
 8014400:	18fb      	adds	r3, r7, r3
 8014402:	687a      	ldr	r2, [r7, #4]
 8014404:	7912      	ldrb	r2, [r2, #4]
 8014406:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	689b      	ldr	r3, [r3, #8]
 801440c:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 801440e:	231e      	movs	r3, #30
 8014410:	18fb      	adds	r3, r7, r3
 8014412:	687a      	ldr	r2, [r7, #4]
 8014414:	8992      	ldrh	r2, [r2, #12]
 8014416:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 8014418:	231d      	movs	r3, #29
 801441a:	18fb      	adds	r3, r7, r3
 801441c:	687a      	ldr	r2, [r7, #4]
 801441e:	7b92      	ldrb	r2, [r2, #14]
 8014420:	701a      	strb	r2, [r3, #0]
            break;
 8014422:	e04a      	b.n	80144ba <LoRaMacMcpsRequest+0x15a>
            readyToSend = true;
 8014424:	231c      	movs	r3, #28
 8014426:	18fb      	adds	r3, r7, r3
 8014428:	2201      	movs	r2, #1
 801442a:	701a      	strb	r2, [r3, #0]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	7bdb      	ldrb	r3, [r3, #15]
 8014430:	1c1a      	adds	r2, r3, #0
 8014432:	b2d3      	uxtb	r3, r2
 8014434:	2b08      	cmp	r3, #8
 8014436:	d901      	bls.n	801443c <LoRaMacMcpsRequest+0xdc>
 8014438:	2308      	movs	r3, #8
 801443a:	1c1a      	adds	r2, r3, #0
 801443c:	b2d1      	uxtb	r1, r2
 801443e:	4b67      	ldr	r3, [pc, #412]	; (80145dc <LoRaMacMcpsRequest+0x27c>)
 8014440:	4a69      	ldr	r2, [pc, #420]	; (80145e8 <LoRaMacMcpsRequest+0x288>)
 8014442:	5499      	strb	r1, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8014444:	230c      	movs	r3, #12
 8014446:	18fb      	adds	r3, r7, r3
 8014448:	781a      	ldrb	r2, [r3, #0]
 801444a:	211f      	movs	r1, #31
 801444c:	400a      	ands	r2, r1
 801444e:	1c11      	adds	r1, r2, #0
 8014450:	2280      	movs	r2, #128	; 0x80
 8014452:	4252      	negs	r2, r2
 8014454:	430a      	orrs	r2, r1
 8014456:	701a      	strb	r2, [r3, #0]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 8014458:	2326      	movs	r3, #38	; 0x26
 801445a:	18fb      	adds	r3, r7, r3
 801445c:	687a      	ldr	r2, [r7, #4]
 801445e:	7912      	ldrb	r2, [r2, #4]
 8014460:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	689b      	ldr	r3, [r3, #8]
 8014466:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 8014468:	231e      	movs	r3, #30
 801446a:	18fb      	adds	r3, r7, r3
 801446c:	687a      	ldr	r2, [r7, #4]
 801446e:	8992      	ldrh	r2, [r2, #12]
 8014470:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 8014472:	231d      	movs	r3, #29
 8014474:	18fb      	adds	r3, r7, r3
 8014476:	687a      	ldr	r2, [r7, #4]
 8014478:	7b92      	ldrb	r2, [r2, #14]
 801447a:	701a      	strb	r2, [r3, #0]
            break;
 801447c:	e01d      	b.n	80144ba <LoRaMacMcpsRequest+0x15a>
            readyToSend = true;
 801447e:	231c      	movs	r3, #28
 8014480:	18fb      	adds	r3, r7, r3
 8014482:	2201      	movs	r2, #1
 8014484:	701a      	strb	r2, [r3, #0]
            MacCtx.AckTimeoutRetries = 1;
 8014486:	4b55      	ldr	r3, [pc, #340]	; (80145dc <LoRaMacMcpsRequest+0x27c>)
 8014488:	4a57      	ldr	r2, [pc, #348]	; (80145e8 <LoRaMacMcpsRequest+0x288>)
 801448a:	2101      	movs	r1, #1
 801448c:	5499      	strb	r1, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 801448e:	230c      	movs	r3, #12
 8014490:	18fb      	adds	r3, r7, r3
 8014492:	781a      	ldrb	r2, [r3, #0]
 8014494:	2120      	movs	r1, #32
 8014496:	4249      	negs	r1, r1
 8014498:	430a      	orrs	r2, r1
 801449a:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	685b      	ldr	r3, [r3, #4]
 80144a0:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 80144a2:	231e      	movs	r3, #30
 80144a4:	18fb      	adds	r3, r7, r3
 80144a6:	687a      	ldr	r2, [r7, #4]
 80144a8:	8912      	ldrh	r2, [r2, #8]
 80144aa:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 80144ac:	231d      	movs	r3, #29
 80144ae:	18fb      	adds	r3, r7, r3
 80144b0:	687a      	ldr	r2, [r7, #4]
 80144b2:	7a92      	ldrb	r2, [r2, #10]
 80144b4:	701a      	strb	r2, [r3, #0]
            break;
 80144b6:	e000      	b.n	80144ba <LoRaMacMcpsRequest+0x15a>
            break;
 80144b8:	46c0      	nop			; (mov r8, r8)
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 80144ba:	2114      	movs	r1, #20
 80144bc:	187b      	adds	r3, r7, r1
 80144be:	2202      	movs	r2, #2
 80144c0:	701a      	strb	r2, [r3, #0]
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 80144c2:	4b46      	ldr	r3, [pc, #280]	; (80145dc <LoRaMacMcpsRequest+0x27c>)
 80144c4:	4a49      	ldr	r2, [pc, #292]	; (80145ec <LoRaMacMcpsRequest+0x28c>)
 80144c6:	589b      	ldr	r3, [r3, r2]
 80144c8:	22b8      	movs	r2, #184	; 0xb8
 80144ca:	5c9a      	ldrb	r2, [r3, r2]
 80144cc:	187b      	adds	r3, r7, r1
 80144ce:	709a      	strb	r2, [r3, #2]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80144d0:	4b42      	ldr	r3, [pc, #264]	; (80145dc <LoRaMacMcpsRequest+0x27c>)
 80144d2:	4a46      	ldr	r2, [pc, #280]	; (80145ec <LoRaMacMcpsRequest+0x28c>)
 80144d4:	589b      	ldr	r3, [r3, r2]
 80144d6:	781b      	ldrb	r3, [r3, #0]
 80144d8:	187a      	adds	r2, r7, r1
 80144da:	0011      	movs	r1, r2
 80144dc:	0018      	movs	r0, r3
 80144de:	f002 fba2 	bl	8016c26 <RegionGetPhyParam>
 80144e2:	0003      	movs	r3, r0
 80144e4:	001a      	movs	r2, r3
 80144e6:	2110      	movs	r1, #16
 80144e8:	187b      	adds	r3, r7, r1
 80144ea:	601a      	str	r2, [r3, #0]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 80144ec:	187b      	adds	r3, r7, r1
 80144ee:	681b      	ldr	r3, [r3, #0]
 80144f0:	b259      	sxtb	r1, r3
 80144f2:	231d      	movs	r3, #29
 80144f4:	18fa      	adds	r2, r7, r3
 80144f6:	18fb      	adds	r3, r7, r3
 80144f8:	1c0c      	adds	r4, r1, #0
 80144fa:	781b      	ldrb	r3, [r3, #0]
 80144fc:	b258      	sxtb	r0, r3
 80144fe:	b261      	sxtb	r1, r4
 8014500:	4288      	cmp	r0, r1
 8014502:	da00      	bge.n	8014506 <LoRaMacMcpsRequest+0x1a6>
 8014504:	1c23      	adds	r3, r4, #0
 8014506:	7013      	strb	r3, [r2, #0]

    if( readyToSend == true )
 8014508:	231c      	movs	r3, #28
 801450a:	18fb      	adds	r3, r7, r3
 801450c:	781b      	ldrb	r3, [r3, #0]
 801450e:	2b00      	cmp	r3, #0
 8014510:	d055      	beq.n	80145be <LoRaMacMcpsRequest+0x25e>
    {
        if( MacCtx.NvmCtx->AdrCtrlOn == false )
 8014512:	4b32      	ldr	r3, [pc, #200]	; (80145dc <LoRaMacMcpsRequest+0x27c>)
 8014514:	4a35      	ldr	r2, [pc, #212]	; (80145ec <LoRaMacMcpsRequest+0x28c>)
 8014516:	589b      	ldr	r3, [r3, r2]
 8014518:	227e      	movs	r2, #126	; 0x7e
 801451a:	5c9b      	ldrb	r3, [r3, r2]
 801451c:	2201      	movs	r2, #1
 801451e:	4053      	eors	r3, r2
 8014520:	b2db      	uxtb	r3, r3
 8014522:	2b00      	cmp	r3, #0
 8014524:	d022      	beq.n	801456c <LoRaMacMcpsRequest+0x20c>
        {
            verify.DatarateParams.Datarate = datarate;
 8014526:	2408      	movs	r4, #8
 8014528:	193b      	adds	r3, r7, r4
 801452a:	221d      	movs	r2, #29
 801452c:	18ba      	adds	r2, r7, r2
 801452e:	7812      	ldrb	r2, [r2, #0]
 8014530:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8014532:	4b2a      	ldr	r3, [pc, #168]	; (80145dc <LoRaMacMcpsRequest+0x27c>)
 8014534:	4a2d      	ldr	r2, [pc, #180]	; (80145ec <LoRaMacMcpsRequest+0x28c>)
 8014536:	589b      	ldr	r3, [r3, r2]
 8014538:	22b8      	movs	r2, #184	; 0xb8
 801453a:	5c9a      	ldrb	r2, [r3, r2]
 801453c:	193b      	adds	r3, r7, r4
 801453e:	709a      	strb	r2, [r3, #2]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 8014540:	4b26      	ldr	r3, [pc, #152]	; (80145dc <LoRaMacMcpsRequest+0x27c>)
 8014542:	4a2a      	ldr	r2, [pc, #168]	; (80145ec <LoRaMacMcpsRequest+0x28c>)
 8014544:	589b      	ldr	r3, [r3, r2]
 8014546:	781b      	ldrb	r3, [r3, #0]
 8014548:	1939      	adds	r1, r7, r4
 801454a:	2205      	movs	r2, #5
 801454c:	0018      	movs	r0, r3
 801454e:	f002 fbd1 	bl	8016cf4 <RegionVerify>
 8014552:	1e03      	subs	r3, r0, #0
 8014554:	d008      	beq.n	8014568 <LoRaMacMcpsRequest+0x208>
            {
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 8014556:	4b21      	ldr	r3, [pc, #132]	; (80145dc <LoRaMacMcpsRequest+0x27c>)
 8014558:	4a24      	ldr	r2, [pc, #144]	; (80145ec <LoRaMacMcpsRequest+0x28c>)
 801455a:	589b      	ldr	r3, [r3, r2]
 801455c:	193a      	adds	r2, r7, r4
 801455e:	2100      	movs	r1, #0
 8014560:	5651      	ldrsb	r1, [r2, r1]
 8014562:	2285      	movs	r2, #133	; 0x85
 8014564:	5499      	strb	r1, [r3, r2]
 8014566:	e001      	b.n	801456c <LoRaMacMcpsRequest+0x20c>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8014568:	2303      	movs	r3, #3
 801456a:	e031      	b.n	80145d0 <LoRaMacMcpsRequest+0x270>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 801456c:	2627      	movs	r6, #39	; 0x27
 801456e:	19bc      	adds	r4, r7, r6
 8014570:	231e      	movs	r3, #30
 8014572:	18fb      	adds	r3, r7, r3
 8014574:	881d      	ldrh	r5, [r3, #0]
 8014576:	6a3a      	ldr	r2, [r7, #32]
 8014578:	2326      	movs	r3, #38	; 0x26
 801457a:	18fb      	adds	r3, r7, r3
 801457c:	7819      	ldrb	r1, [r3, #0]
 801457e:	230c      	movs	r3, #12
 8014580:	18f8      	adds	r0, r7, r3
 8014582:	1cfb      	adds	r3, r7, #3
 8014584:	781b      	ldrb	r3, [r3, #0]
 8014586:	9300      	str	r3, [sp, #0]
 8014588:	002b      	movs	r3, r5
 801458a:	f7fd f86d 	bl	8011668 <Send>
 801458e:	0003      	movs	r3, r0
 8014590:	7023      	strb	r3, [r4, #0]
        if( status == LORAMAC_STATUS_OK )
 8014592:	19bb      	adds	r3, r7, r6
 8014594:	781b      	ldrb	r3, [r3, #0]
 8014596:	2b00      	cmp	r3, #0
 8014598:	d10d      	bne.n	80145b6 <LoRaMacMcpsRequest+0x256>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	7819      	ldrb	r1, [r3, #0]
 801459e:	4b0f      	ldr	r3, [pc, #60]	; (80145dc <LoRaMacMcpsRequest+0x27c>)
 80145a0:	4a13      	ldr	r2, [pc, #76]	; (80145f0 <LoRaMacMcpsRequest+0x290>)
 80145a2:	5499      	strb	r1, [r3, r2]
            MacCtx.MacFlags.Bits.McpsReq = 1;
 80145a4:	4b0d      	ldr	r3, [pc, #52]	; (80145dc <LoRaMacMcpsRequest+0x27c>)
 80145a6:	4a13      	ldr	r2, [pc, #76]	; (80145f4 <LoRaMacMcpsRequest+0x294>)
 80145a8:	5c99      	ldrb	r1, [r3, r2]
 80145aa:	2001      	movs	r0, #1
 80145ac:	4301      	orrs	r1, r0
 80145ae:	5499      	strb	r1, [r3, r2]
            EventMacNvmCtxChanged( );
 80145b0:	f7fe fb86 	bl	8012cc0 <EventMacNvmCtxChanged>
 80145b4:	e003      	b.n	80145be <LoRaMacMcpsRequest+0x25e>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 80145b6:	4b09      	ldr	r3, [pc, #36]	; (80145dc <LoRaMacMcpsRequest+0x27c>)
 80145b8:	4a0f      	ldr	r2, [pc, #60]	; (80145f8 <LoRaMacMcpsRequest+0x298>)
 80145ba:	2100      	movs	r1, #0
 80145bc:	5499      	strb	r1, [r3, r2]
        }
    }

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80145be:	4a07      	ldr	r2, [pc, #28]	; (80145dc <LoRaMacMcpsRequest+0x27c>)
 80145c0:	2391      	movs	r3, #145	; 0x91
 80145c2:	00db      	lsls	r3, r3, #3
 80145c4:	58d2      	ldr	r2, [r2, r3]
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	611a      	str	r2, [r3, #16]

    return status;
 80145ca:	2327      	movs	r3, #39	; 0x27
 80145cc:	18fb      	adds	r3, r7, r3
 80145ce:	781b      	ldrb	r3, [r3, #0]
}
 80145d0:	0018      	movs	r0, r3
 80145d2:	46bd      	mov	sp, r7
 80145d4:	b00b      	add	sp, #44	; 0x2c
 80145d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80145d8:	200009f0 	.word	0x200009f0
 80145dc:	200005b4 	.word	0x200005b4
 80145e0:	0000043d 	.word	0x0000043d
 80145e4:	00000412 	.word	0x00000412
 80145e8:	00000411 	.word	0x00000411
 80145ec:	00000484 	.word	0x00000484
 80145f0:	0000043c 	.word	0x0000043c
 80145f4:	00000481 	.word	0x00000481
 80145f8:	00000414 	.word	0x00000414

080145fc <LoRaMacTestSetDutyCycleOn>:

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 80145fc:	b580      	push	{r7, lr}
 80145fe:	b084      	sub	sp, #16
 8014600:	af00      	add	r7, sp, #0
 8014602:	0002      	movs	r2, r0
 8014604:	1dfb      	adds	r3, r7, #7
 8014606:	701a      	strb	r2, [r3, #0]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8014608:	210c      	movs	r1, #12
 801460a:	187b      	adds	r3, r7, r1
 801460c:	1dfa      	adds	r2, r7, #7
 801460e:	7812      	ldrb	r2, [r2, #0]
 8014610:	701a      	strb	r2, [r3, #0]

    if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DUTY_CYCLE ) == true )
 8014612:	4b0b      	ldr	r3, [pc, #44]	; (8014640 <LoRaMacTestSetDutyCycleOn+0x44>)
 8014614:	4a0b      	ldr	r2, [pc, #44]	; (8014644 <LoRaMacTestSetDutyCycleOn+0x48>)
 8014616:	589b      	ldr	r3, [r3, r2]
 8014618:	781b      	ldrb	r3, [r3, #0]
 801461a:	1879      	adds	r1, r7, r1
 801461c:	220f      	movs	r2, #15
 801461e:	0018      	movs	r0, r3
 8014620:	f002 fb68 	bl	8016cf4 <RegionVerify>
 8014624:	1e03      	subs	r3, r0, #0
 8014626:	d006      	beq.n	8014636 <LoRaMacTestSetDutyCycleOn+0x3a>
    {
        MacCtx.NvmCtx->DutyCycleOn = enable;
 8014628:	4b05      	ldr	r3, [pc, #20]	; (8014640 <LoRaMacTestSetDutyCycleOn+0x44>)
 801462a:	4a06      	ldr	r2, [pc, #24]	; (8014644 <LoRaMacTestSetDutyCycleOn+0x48>)
 801462c:	589b      	ldr	r3, [r3, r2]
 801462e:	1dfa      	adds	r2, r7, #7
 8014630:	21c9      	movs	r1, #201	; 0xc9
 8014632:	7812      	ldrb	r2, [r2, #0]
 8014634:	545a      	strb	r2, [r3, r1]
    }
}
 8014636:	46c0      	nop			; (mov r8, r8)
 8014638:	46bd      	mov	sp, r7
 801463a:	b004      	add	sp, #16
 801463c:	bd80      	pop	{r7, pc}
 801463e:	46c0      	nop			; (mov r8, r8)
 8014640:	200005b4 	.word	0x200005b4
 8014644:	00000484 	.word	0x00000484

08014648 <CalcNextV10X>:

#include "Region.h"
#include "LoRaMacAdr.h"

static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8014648:	b5f0      	push	{r4, r5, r6, r7, lr}
 801464a:	b08b      	sub	sp, #44	; 0x2c
 801464c:	af00      	add	r7, sp, #0
 801464e:	60f8      	str	r0, [r7, #12]
 8014650:	60b9      	str	r1, [r7, #8]
 8014652:	607a      	str	r2, [r7, #4]
 8014654:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8014656:	2327      	movs	r3, #39	; 0x27
 8014658:	18fb      	adds	r3, r7, r3
 801465a:	2200      	movs	r2, #0
 801465c:	701a      	strb	r2, [r3, #0]
    int8_t datarate = adrNext->Datarate;
 801465e:	2426      	movs	r4, #38	; 0x26
 8014660:	193b      	adds	r3, r7, r4
 8014662:	68fa      	ldr	r2, [r7, #12]
 8014664:	7c12      	ldrb	r2, [r2, #16]
 8014666:	701a      	strb	r2, [r3, #0]
    int8_t txPower = adrNext->TxPower;
 8014668:	2325      	movs	r3, #37	; 0x25
 801466a:	18fb      	adds	r3, r7, r3
 801466c:	68fa      	ldr	r2, [r7, #12]
 801466e:	7c52      	ldrb	r2, [r2, #17]
 8014670:	701a      	strb	r2, [r3, #0]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8014672:	68fb      	ldr	r3, [r7, #12]
 8014674:	689a      	ldr	r2, [r3, #8]
 8014676:	683b      	ldr	r3, [r7, #0]
 8014678:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 801467a:	68fb      	ldr	r3, [r7, #12]
 801467c:	795b      	ldrb	r3, [r3, #5]
 801467e:	2b00      	cmp	r3, #0
 8014680:	d100      	bne.n	8014684 <CalcNextV10X+0x3c>
 8014682:	e0a5      	b.n	80147d0 <CalcNextV10X+0x188>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8014684:	211c      	movs	r1, #28
 8014686:	187b      	adds	r3, r7, r1
 8014688:	2202      	movs	r2, #2
 801468a:	701a      	strb	r2, [r3, #0]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 801468c:	68fb      	ldr	r3, [r7, #12]
 801468e:	7c9a      	ldrb	r2, [r3, #18]
 8014690:	187b      	adds	r3, r7, r1
 8014692:	709a      	strb	r2, [r3, #2]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8014694:	68fb      	ldr	r3, [r7, #12]
 8014696:	7cdb      	ldrb	r3, [r3, #19]
 8014698:	187a      	adds	r2, r7, r1
 801469a:	0011      	movs	r1, r2
 801469c:	0018      	movs	r0, r3
 801469e:	f002 fac2 	bl	8016c26 <RegionGetPhyParam>
 80146a2:	0003      	movs	r3, r0
 80146a4:	001a      	movs	r2, r3
 80146a6:	2118      	movs	r1, #24
 80146a8:	187b      	adds	r3, r7, r1
 80146aa:	601a      	str	r2, [r3, #0]
        minTxDatarate = phyParam.Value;
 80146ac:	187b      	adds	r3, r7, r1
 80146ae:	681a      	ldr	r2, [r3, #0]
 80146b0:	2124      	movs	r1, #36	; 0x24
 80146b2:	187b      	adds	r3, r7, r1
 80146b4:	701a      	strb	r2, [r3, #0]
        datarate = MAX( datarate, minTxDatarate );
 80146b6:	193a      	adds	r2, r7, r4
 80146b8:	187b      	adds	r3, r7, r1
 80146ba:	1939      	adds	r1, r7, r4
 80146bc:	780c      	ldrb	r4, [r1, #0]
 80146be:	781b      	ldrb	r3, [r3, #0]
 80146c0:	b258      	sxtb	r0, r3
 80146c2:	b261      	sxtb	r1, r4
 80146c4:	4288      	cmp	r0, r1
 80146c6:	da00      	bge.n	80146ca <CalcNextV10X+0x82>
 80146c8:	1c23      	adds	r3, r4, #0
 80146ca:	7013      	strb	r3, [r2, #0]

        if( datarate == minTxDatarate )
 80146cc:	2326      	movs	r3, #38	; 0x26
 80146ce:	18fa      	adds	r2, r7, r3
 80146d0:	2324      	movs	r3, #36	; 0x24
 80146d2:	18fb      	adds	r3, r7, r3
 80146d4:	7812      	ldrb	r2, [r2, #0]
 80146d6:	b252      	sxtb	r2, r2
 80146d8:	781b      	ldrb	r3, [r3, #0]
 80146da:	b25b      	sxtb	r3, r3
 80146dc:	429a      	cmp	r2, r3
 80146de:	d107      	bne.n	80146f0 <CalcNextV10X+0xa8>
        {
            *adrAckCounter = 0;
 80146e0:	683b      	ldr	r3, [r7, #0]
 80146e2:	2200      	movs	r2, #0
 80146e4:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 80146e6:	2327      	movs	r3, #39	; 0x27
 80146e8:	18fb      	adds	r3, r7, r3
 80146ea:	2200      	movs	r2, #0
 80146ec:	701a      	strb	r2, [r3, #0]
 80146ee:	e06f      	b.n	80147d0 <CalcNextV10X+0x188>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 80146f0:	68fb      	ldr	r3, [r7, #12]
 80146f2:	689b      	ldr	r3, [r3, #8]
 80146f4:	68fa      	ldr	r2, [r7, #12]
 80146f6:	8992      	ldrh	r2, [r2, #12]
 80146f8:	4293      	cmp	r3, r2
 80146fa:	d304      	bcc.n	8014706 <CalcNextV10X+0xbe>
            {
                adrAckReq = true;
 80146fc:	2327      	movs	r3, #39	; 0x27
 80146fe:	18fb      	adds	r3, r7, r3
 8014700:	2201      	movs	r2, #1
 8014702:	701a      	strb	r2, [r3, #0]
 8014704:	e003      	b.n	801470e <CalcNextV10X+0xc6>
            }
            else
            {
                adrAckReq = false;
 8014706:	2327      	movs	r3, #39	; 0x27
 8014708:	18fb      	adds	r3, r7, r3
 801470a:	2200      	movs	r2, #0
 801470c:	701a      	strb	r2, [r3, #0]
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 801470e:	68fb      	ldr	r3, [r7, #12]
 8014710:	689b      	ldr	r3, [r3, #8]
 8014712:	68fa      	ldr	r2, [r7, #12]
 8014714:	8992      	ldrh	r2, [r2, #12]
 8014716:	0011      	movs	r1, r2
 8014718:	68fa      	ldr	r2, [r7, #12]
 801471a:	89d2      	ldrh	r2, [r2, #14]
 801471c:	188a      	adds	r2, r1, r2
 801471e:	4293      	cmp	r3, r2
 8014720:	d356      	bcc.n	80147d0 <CalcNextV10X+0x188>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 8014722:	241c      	movs	r4, #28
 8014724:	193b      	adds	r3, r7, r4
 8014726:	2208      	movs	r2, #8
 8014728:	701a      	strb	r2, [r3, #0]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 801472a:	68fb      	ldr	r3, [r7, #12]
 801472c:	7cdb      	ldrb	r3, [r3, #19]
 801472e:	193a      	adds	r2, r7, r4
 8014730:	0011      	movs	r1, r2
 8014732:	0018      	movs	r0, r3
 8014734:	f002 fa77 	bl	8016c26 <RegionGetPhyParam>
 8014738:	0003      	movs	r3, r0
 801473a:	001a      	movs	r2, r3
 801473c:	2518      	movs	r5, #24
 801473e:	197b      	adds	r3, r7, r5
 8014740:	601a      	str	r2, [r3, #0]
                txPower = phyParam.Value;
 8014742:	197b      	adds	r3, r7, r5
 8014744:	681a      	ldr	r2, [r3, #0]
 8014746:	2325      	movs	r3, #37	; 0x25
 8014748:	18fb      	adds	r3, r7, r3
 801474a:	701a      	strb	r2, [r3, #0]

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 801474c:	68fb      	ldr	r3, [r7, #12]
 801474e:	689a      	ldr	r2, [r3, #8]
 8014750:	68fb      	ldr	r3, [r7, #12]
 8014752:	89db      	ldrh	r3, [r3, #14]
 8014754:	0019      	movs	r1, r3
 8014756:	0010      	movs	r0, r2
 8014758:	f7eb fd6e 	bl	8000238 <__aeabi_uidivmod>
 801475c:	000b      	movs	r3, r1
 801475e:	2b01      	cmp	r3, #1
 8014760:	d136      	bne.n	80147d0 <CalcNextV10X+0x188>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8014762:	193b      	adds	r3, r7, r4
 8014764:	2222      	movs	r2, #34	; 0x22
 8014766:	701a      	strb	r2, [r3, #0]
                    getPhy.Datarate = datarate;
 8014768:	193b      	adds	r3, r7, r4
 801476a:	2626      	movs	r6, #38	; 0x26
 801476c:	19ba      	adds	r2, r7, r6
 801476e:	7812      	ldrb	r2, [r2, #0]
 8014770:	705a      	strb	r2, [r3, #1]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8014772:	68fb      	ldr	r3, [r7, #12]
 8014774:	7c9a      	ldrb	r2, [r3, #18]
 8014776:	193b      	adds	r3, r7, r4
 8014778:	709a      	strb	r2, [r3, #2]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 801477a:	68fb      	ldr	r3, [r7, #12]
 801477c:	7cdb      	ldrb	r3, [r3, #19]
 801477e:	193a      	adds	r2, r7, r4
 8014780:	0011      	movs	r1, r2
 8014782:	0018      	movs	r0, r3
 8014784:	f002 fa4f 	bl	8016c26 <RegionGetPhyParam>
 8014788:	0003      	movs	r3, r0
 801478a:	001a      	movs	r2, r3
 801478c:	197b      	adds	r3, r7, r5
 801478e:	601a      	str	r2, [r3, #0]
                    datarate = phyParam.Value;
 8014790:	197b      	adds	r3, r7, r5
 8014792:	681a      	ldr	r2, [r3, #0]
 8014794:	19bb      	adds	r3, r7, r6
 8014796:	701a      	strb	r2, [r3, #0]

                    if( datarate == minTxDatarate )
 8014798:	19ba      	adds	r2, r7, r6
 801479a:	2324      	movs	r3, #36	; 0x24
 801479c:	18fb      	adds	r3, r7, r3
 801479e:	7812      	ldrb	r2, [r2, #0]
 80147a0:	b252      	sxtb	r2, r2
 80147a2:	781b      	ldrb	r3, [r3, #0]
 80147a4:	b25b      	sxtb	r3, r3
 80147a6:	429a      	cmp	r2, r3
 80147a8:	d112      	bne.n	80147d0 <CalcNextV10X+0x188>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 80147aa:	2327      	movs	r3, #39	; 0x27
 80147ac:	18fb      	adds	r3, r7, r3
 80147ae:	2200      	movs	r2, #0
 80147b0:	701a      	strb	r2, [r3, #0]
                        if( adrNext->UpdateChanMask == true )
 80147b2:	68fb      	ldr	r3, [r7, #12]
 80147b4:	791b      	ldrb	r3, [r3, #4]
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	d00a      	beq.n	80147d0 <CalcNextV10X+0x188>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 80147ba:	2110      	movs	r1, #16
 80147bc:	187b      	adds	r3, r7, r1
 80147be:	2202      	movs	r2, #2
 80147c0:	711a      	strb	r2, [r3, #4]
                            RegionInitDefaults( adrNext->Region, &params );
 80147c2:	68fb      	ldr	r3, [r7, #12]
 80147c4:	7cdb      	ldrb	r3, [r3, #19]
 80147c6:	187a      	adds	r2, r7, r1
 80147c8:	0011      	movs	r1, r2
 80147ca:	0018      	movs	r0, r3
 80147cc:	f002 fa67 	bl	8016c9e <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 80147d0:	68bb      	ldr	r3, [r7, #8]
 80147d2:	2226      	movs	r2, #38	; 0x26
 80147d4:	18ba      	adds	r2, r7, r2
 80147d6:	7812      	ldrb	r2, [r2, #0]
 80147d8:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	2225      	movs	r2, #37	; 0x25
 80147de:	18ba      	adds	r2, r7, r2
 80147e0:	7812      	ldrb	r2, [r2, #0]
 80147e2:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 80147e4:	2327      	movs	r3, #39	; 0x27
 80147e6:	18fb      	adds	r3, r7, r3
 80147e8:	781b      	ldrb	r3, [r3, #0]
}
 80147ea:	0018      	movs	r0, r3
 80147ec:	46bd      	mov	sp, r7
 80147ee:	b00b      	add	sp, #44	; 0x2c
 80147f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080147f2 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 80147f2:	b580      	push	{r7, lr}
 80147f4:	b084      	sub	sp, #16
 80147f6:	af00      	add	r7, sp, #0
 80147f8:	60f8      	str	r0, [r7, #12]
 80147fa:	60b9      	str	r1, [r7, #8]
 80147fc:	607a      	str	r2, [r7, #4]
 80147fe:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 8014800:	68fb      	ldr	r3, [r7, #12]
 8014802:	789b      	ldrb	r3, [r3, #2]
 8014804:	2b00      	cmp	r3, #0
 8014806:	d107      	bne.n	8014818 <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 8014808:	683b      	ldr	r3, [r7, #0]
 801480a:	687a      	ldr	r2, [r7, #4]
 801480c:	68b9      	ldr	r1, [r7, #8]
 801480e:	68f8      	ldr	r0, [r7, #12]
 8014810:	f7ff ff1a 	bl	8014648 <CalcNextV10X>
 8014814:	0003      	movs	r3, r0
 8014816:	e000      	b.n	801481a <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 8014818:	2300      	movs	r3, #0
}
 801481a:	0018      	movs	r0, r3
 801481c:	46bd      	mov	sp, r7
 801481e:	b004      	add	sp, #16
 8014820:	bd80      	pop	{r7, pc}

08014822 <LoRaMacClassBInit>:
}

#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmEvent classBNvmCtxChanged )
{
 8014822:	b580      	push	{r7, lr}
 8014824:	b084      	sub	sp, #16
 8014826:	af00      	add	r7, sp, #0
 8014828:	60f8      	str	r0, [r7, #12]
 801482a:	60b9      	str	r1, [r7, #8]
 801482c:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif // LORAMAC_CLASSB_ENABLED
}
 801482e:	46c0      	nop			; (mov r8, r8)
 8014830:	46bd      	mov	sp, r7
 8014832:	b004      	add	sp, #16
 8014834:	bd80      	pop	{r7, pc}

08014836 <LoRaMacClassBRestoreNvmCtx>:

bool LoRaMacClassBRestoreNvmCtx( void* classBNvmCtx )
{
 8014836:	b580      	push	{r7, lr}
 8014838:	b082      	sub	sp, #8
 801483a:	af00      	add	r7, sp, #0
 801483c:	6078      	str	r0, [r7, #4]
    else
    {
        return false;
    }
#else
    return true;
 801483e:	2301      	movs	r3, #1
#endif // LORAMAC_CLASSB_ENABLED
}
 8014840:	0018      	movs	r0, r3
 8014842:	46bd      	mov	sp, r7
 8014844:	b002      	add	sp, #8
 8014846:	bd80      	pop	{r7, pc}

08014848 <LoRaMacClassBGetNvmCtx>:

void* LoRaMacClassBGetNvmCtx( size_t* classBNvmCtxSize )
{
 8014848:	b580      	push	{r7, lr}
 801484a:	b082      	sub	sp, #8
 801484c:	af00      	add	r7, sp, #0
 801484e:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    *classBNvmCtxSize = sizeof( NvmCtx );
    return &NvmCtx;
#else
    *classBNvmCtxSize = 0;
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	2200      	movs	r2, #0
 8014854:	601a      	str	r2, [r3, #0]
    return NULL;
 8014856:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8014858:	0018      	movs	r0, r3
 801485a:	46bd      	mov	sp, r7
 801485c:	b002      	add	sp, #8
 801485e:	bd80      	pop	{r7, pc}

08014860 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8014860:	b580      	push	{r7, lr}
 8014862:	b082      	sub	sp, #8
 8014864:	af00      	add	r7, sp, #0
 8014866:	0002      	movs	r2, r0
 8014868:	1dfb      	adds	r3, r7, #7
 801486a:	701a      	strb	r2, [r3, #0]
            Ctx.BeaconState = beaconState;
        }
    }
    Ctx.NvmCtx->BeaconCtx.BeaconState = Ctx.BeaconState;
#endif // LORAMAC_CLASSB_ENABLED
}
 801486c:	46c0      	nop			; (mov r8, r8)
 801486e:	46bd      	mov	sp, r7
 8014870:	b002      	add	sp, #8
 8014872:	bd80      	pop	{r7, pc}

08014874 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8014874:	b580      	push	{r7, lr}
 8014876:	b082      	sub	sp, #8
 8014878:	af00      	add	r7, sp, #0
 801487a:	0002      	movs	r2, r0
 801487c:	1dfb      	adds	r3, r7, #7
 801487e:	701a      	strb	r2, [r3, #0]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif // LORAMAC_CLASSB_ENABLED
}
 8014880:	46c0      	nop			; (mov r8, r8)
 8014882:	46bd      	mov	sp, r7
 8014884:	b002      	add	sp, #8
 8014886:	bd80      	pop	{r7, pc}

08014888 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8014888:	b580      	push	{r7, lr}
 801488a:	b082      	sub	sp, #8
 801488c:	af00      	add	r7, sp, #0
 801488e:	0002      	movs	r2, r0
 8014890:	1dfb      	adds	r3, r7, #7
 8014892:	701a      	strb	r2, [r3, #0]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif // LORAMAC_CLASSB_ENABLED
}
 8014894:	46c0      	nop			; (mov r8, r8)
 8014896:	46bd      	mov	sp, r7
 8014898:	b002      	add	sp, #8
 801489a:	bd80      	pop	{r7, pc}

0801489c <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 801489c:	b580      	push	{r7, lr}
 801489e:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 80148a0:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 80148a2:	0018      	movs	r0, r3
 80148a4:	46bd      	mov	sp, r7
 80148a6:	bd80      	pop	{r7, pc}

080148a8 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 80148a8:	b580      	push	{r7, lr}
 80148aa:	b082      	sub	sp, #8
 80148ac:	af00      	add	r7, sp, #0
 80148ae:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 80148b0:	46c0      	nop			; (mov r8, r8)
 80148b2:	46bd      	mov	sp, r7
 80148b4:	b002      	add	sp, #8
 80148b6:	bd80      	pop	{r7, pc}

080148b8 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 80148b8:	b580      	push	{r7, lr}
 80148ba:	b082      	sub	sp, #8
 80148bc:	af00      	add	r7, sp, #0
 80148be:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 80148c0:	46c0      	nop			; (mov r8, r8)
 80148c2:	46bd      	mov	sp, r7
 80148c4:	b002      	add	sp, #8
 80148c6:	bd80      	pop	{r7, pc}

080148c8 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 80148c8:	b580      	push	{r7, lr}
 80148ca:	b082      	sub	sp, #8
 80148cc:	af00      	add	r7, sp, #0
 80148ce:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 80148d0:	46c0      	nop			; (mov r8, r8)
 80148d2:	46bd      	mov	sp, r7
 80148d4:	b002      	add	sp, #8
 80148d6:	bd80      	pop	{r7, pc}

080148d8 <LoRaMacClassBRxBeacon>:
    }
}
#endif // LORAMAC_CLASSB_ENABLED

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 80148d8:	b580      	push	{r7, lr}
 80148da:	b082      	sub	sp, #8
 80148dc:	af00      	add	r7, sp, #0
 80148de:	6078      	str	r0, [r7, #4]
 80148e0:	000a      	movs	r2, r1
 80148e2:	1cbb      	adds	r3, r7, #2
 80148e4:	801a      	strh	r2, [r3, #0]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 80148e6:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 80148e8:	0018      	movs	r0, r3
 80148ea:	46bd      	mov	sp, r7
 80148ec:	b002      	add	sp, #8
 80148ee:	bd80      	pop	{r7, pc}

080148f0 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 80148f0:	b580      	push	{r7, lr}
 80148f2:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80148f4:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 80148f6:	0018      	movs	r0, r3
 80148f8:	46bd      	mov	sp, r7
 80148fa:	bd80      	pop	{r7, pc}

080148fc <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 80148fc:	b580      	push	{r7, lr}
 80148fe:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8014900:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8014902:	0018      	movs	r0, r3
 8014904:	46bd      	mov	sp, r7
 8014906:	bd80      	pop	{r7, pc}

08014908 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 8014908:	b580      	push	{r7, lr}
 801490a:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 801490c:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 801490e:	0018      	movs	r0, r3
 8014910:	46bd      	mov	sp, r7
 8014912:	bd80      	pop	{r7, pc}

08014914 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 8014914:	b580      	push	{r7, lr}
 8014916:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8014918:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 801491a:	0018      	movs	r0, r3
 801491c:	46bd      	mov	sp, r7
 801491e:	bd80      	pop	{r7, pc}

08014920 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8014920:	b580      	push	{r7, lr}
 8014922:	b082      	sub	sp, #8
 8014924:	af00      	add	r7, sp, #0
 8014926:	0002      	movs	r2, r0
 8014928:	1dfb      	adds	r3, r7, #7
 801492a:	701a      	strb	r2, [r3, #0]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.NvmCtx->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    Ctx.NvmCtx->PingSlotCtx.PingPeriod = CalcPingPeriod( Ctx.NvmCtx->PingSlotCtx.PingNb );
    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
 801492c:	46c0      	nop			; (mov r8, r8)
 801492e:	46bd      	mov	sp, r7
 8014930:	b002      	add	sp, #8
 8014932:	bd80      	pop	{r7, pc}

08014934 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8014934:	b580      	push	{r7, lr}
 8014936:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8014938:	46c0      	nop			; (mov r8, r8)
 801493a:	46bd      	mov	sp, r7
 801493c:	bd80      	pop	{r7, pc}

0801493e <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 801493e:	b580      	push	{r7, lr}
 8014940:	af00      	add	r7, sp, #0

        Ctx.NvmCtx->BeaconCtx.BeaconState = Ctx.BeaconState;
        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8014942:	46c0      	nop			; (mov r8, r8)
 8014944:	46bd      	mov	sp, r7
 8014946:	bd80      	pop	{r7, pc}

08014948 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8014948:	b580      	push	{r7, lr}
 801494a:	b082      	sub	sp, #8
 801494c:	af00      	add	r7, sp, #0
 801494e:	0002      	movs	r2, r0
 8014950:	1dfb      	adds	r3, r7, #7
 8014952:	701a      	strb	r2, [r3, #0]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014954:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
 8014956:	0018      	movs	r0, r3
 8014958:	46bd      	mov	sp, r7
 801495a:	b002      	add	sp, #8
 801495c:	bd80      	pop	{r7, pc}

0801495e <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 801495e:	b580      	push	{r7, lr}
 8014960:	b082      	sub	sp, #8
 8014962:	af00      	add	r7, sp, #0
 8014964:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014966:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
 8014968:	0018      	movs	r0, r3
 801496a:	46bd      	mov	sp, r7
 801496c:	b002      	add	sp, #8
 801496e:	bd80      	pop	{r7, pc}

08014970 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8014970:	b580      	push	{r7, lr}
 8014972:	b082      	sub	sp, #8
 8014974:	af00      	add	r7, sp, #0
 8014976:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014978:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
 801497a:	0018      	movs	r0, r3
 801497c:	46bd      	mov	sp, r7
 801497e:	b002      	add	sp, #8
 8014980:	bd80      	pop	{r7, pc}

08014982 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8014982:	b580      	push	{r7, lr}
 8014984:	af00      	add	r7, sp, #0
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        Ctx.NvmCtx->PingSlotCtx.Ctrl.Assigned = 1;
        NvmContextChange( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8014986:	46c0      	nop			; (mov r8, r8)
 8014988:	46bd      	mov	sp, r7
 801498a:	bd80      	pop	{r7, pc}

0801498c <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 801498c:	b580      	push	{r7, lr}
 801498e:	b082      	sub	sp, #8
 8014990:	af00      	add	r7, sp, #0
 8014992:	0002      	movs	r2, r0
 8014994:	6039      	str	r1, [r7, #0]
 8014996:	1dfb      	adds	r3, r7, #7
 8014998:	701a      	strb	r2, [r3, #0]
        NvmContextChange( );
    }

    return status;
#else
    return 0;
 801499a:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 801499c:	0018      	movs	r0, r3
 801499e:	46bd      	mov	sp, r7
 80149a0:	b002      	add	sp, #8
 80149a2:	bd80      	pop	{r7, pc}

080149a4 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 80149a4:	b580      	push	{r7, lr}
 80149a6:	b082      	sub	sp, #8
 80149a8:	af00      	add	r7, sp, #0
 80149aa:	603a      	str	r2, [r7, #0]
 80149ac:	1dbb      	adds	r3, r7, #6
 80149ae:	1c02      	adds	r2, r0, #0
 80149b0:	801a      	strh	r2, [r3, #0]
 80149b2:	1d7b      	adds	r3, r7, #5
 80149b4:	1c0a      	adds	r2, r1, #0
 80149b6:	701a      	strb	r2, [r3, #0]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 80149b8:	46c0      	nop			; (mov r8, r8)
 80149ba:	46bd      	mov	sp, r7
 80149bc:	b002      	add	sp, #8
 80149be:	bd80      	pop	{r7, pc}

080149c0 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 80149c0:	b580      	push	{r7, lr}
 80149c2:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 80149c4:	46c0      	nop			; (mov r8, r8)
 80149c6:	46bd      	mov	sp, r7
 80149c8:	bd80      	pop	{r7, pc}

080149ca <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 80149ca:	b580      	push	{r7, lr}
 80149cc:	b082      	sub	sp, #8
 80149ce:	af00      	add	r7, sp, #0
 80149d0:	6078      	str	r0, [r7, #4]
        NvmContextChange( );
        return true;
    }
    return false;
#else
    return false;
 80149d2:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 80149d4:	0018      	movs	r0, r3
 80149d6:	46bd      	mov	sp, r7
 80149d8:	b002      	add	sp, #8
 80149da:	bd80      	pop	{r7, pc}

080149dc <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 80149dc:	b580      	push	{r7, lr}
 80149de:	b082      	sub	sp, #8
 80149e0:	af00      	add	r7, sp, #0
 80149e2:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 80149e4:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 80149e6:	0018      	movs	r0, r3
 80149e8:	46bd      	mov	sp, r7
 80149ea:	b002      	add	sp, #8
 80149ec:	bd80      	pop	{r7, pc}

080149ee <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 80149ee:	b580      	push	{r7, lr}
 80149f0:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif // LORAMAC_CLASSB_ENABLED
}
 80149f2:	46c0      	nop			; (mov r8, r8)
 80149f4:	46bd      	mov	sp, r7
 80149f6:	bd80      	pop	{r7, pc}

080149f8 <LoRaMacClassBProcess>:
    }
#endif // LORAMAC_CLASSB_ENABLED
}

void LoRaMacClassBProcess( void )
{
 80149f8:	b580      	push	{r7, lr}
 80149fa:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 80149fc:	46c0      	nop			; (mov r8, r8)
 80149fe:	46bd      	mov	sp, r7
 8014a00:	bd80      	pop	{r7, pc}

08014a02 <IsSlotFree>:
 *
 * \param[IN]     slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8014a02:	b580      	push	{r7, lr}
 8014a04:	b084      	sub	sp, #16
 8014a06:	af00      	add	r7, sp, #0
 8014a08:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8014a0e:	230e      	movs	r3, #14
 8014a10:	18fb      	adds	r3, r7, r3
 8014a12:	2200      	movs	r2, #0
 8014a14:	801a      	strh	r2, [r3, #0]
 8014a16:	e00f      	b.n	8014a38 <IsSlotFree+0x36>
    {
        if( mem[size] != 0x00 )
 8014a18:	230e      	movs	r3, #14
 8014a1a:	18fb      	adds	r3, r7, r3
 8014a1c:	881b      	ldrh	r3, [r3, #0]
 8014a1e:	68ba      	ldr	r2, [r7, #8]
 8014a20:	18d3      	adds	r3, r2, r3
 8014a22:	781b      	ldrb	r3, [r3, #0]
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d001      	beq.n	8014a2c <IsSlotFree+0x2a>
        {
            return false;
 8014a28:	2300      	movs	r3, #0
 8014a2a:	e00b      	b.n	8014a44 <IsSlotFree+0x42>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8014a2c:	210e      	movs	r1, #14
 8014a2e:	187b      	adds	r3, r7, r1
 8014a30:	881a      	ldrh	r2, [r3, #0]
 8014a32:	187b      	adds	r3, r7, r1
 8014a34:	3201      	adds	r2, #1
 8014a36:	801a      	strh	r2, [r3, #0]
 8014a38:	230e      	movs	r3, #14
 8014a3a:	18fb      	adds	r3, r7, r3
 8014a3c:	881b      	ldrh	r3, [r3, #0]
 8014a3e:	2b0f      	cmp	r3, #15
 8014a40:	d9ea      	bls.n	8014a18 <IsSlotFree+0x16>
        }
    }
    return true;
 8014a42:	2301      	movs	r3, #1
}
 8014a44:	0018      	movs	r0, r3
 8014a46:	46bd      	mov	sp, r7
 8014a48:	b004      	add	sp, #16
 8014a4a:	bd80      	pop	{r7, pc}

08014a4c <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8014a4c:	b580      	push	{r7, lr}
 8014a4e:	b082      	sub	sp, #8
 8014a50:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8014a52:	1dfb      	adds	r3, r7, #7
 8014a54:	2200      	movs	r2, #0
 8014a56:	701a      	strb	r2, [r3, #0]

    while( IsSlotFree( ( const MacCommand_t* )&NvmCtx.MacCommandSlots[itr] ) == false )
 8014a58:	e00a      	b.n	8014a70 <MallocNewMacCommandSlot+0x24>
    {
        itr++;
 8014a5a:	1dfb      	adds	r3, r7, #7
 8014a5c:	781a      	ldrb	r2, [r3, #0]
 8014a5e:	1dfb      	adds	r3, r7, #7
 8014a60:	3201      	adds	r2, #1
 8014a62:	701a      	strb	r2, [r3, #0]
        if( itr == NUM_OF_MAC_COMMANDS )
 8014a64:	1dfb      	adds	r3, r7, #7
 8014a66:	781b      	ldrb	r3, [r3, #0]
 8014a68:	2b0f      	cmp	r3, #15
 8014a6a:	d101      	bne.n	8014a70 <MallocNewMacCommandSlot+0x24>
        {
            return NULL;
 8014a6c:	2300      	movs	r3, #0
 8014a6e:	e017      	b.n	8014aa0 <MallocNewMacCommandSlot+0x54>
    while( IsSlotFree( ( const MacCommand_t* )&NvmCtx.MacCommandSlots[itr] ) == false )
 8014a70:	1dfb      	adds	r3, r7, #7
 8014a72:	781b      	ldrb	r3, [r3, #0]
 8014a74:	011b      	lsls	r3, r3, #4
 8014a76:	3308      	adds	r3, #8
 8014a78:	001a      	movs	r2, r3
 8014a7a:	4b0b      	ldr	r3, [pc, #44]	; (8014aa8 <MallocNewMacCommandSlot+0x5c>)
 8014a7c:	18d3      	adds	r3, r2, r3
 8014a7e:	0018      	movs	r0, r3
 8014a80:	f7ff ffbf 	bl	8014a02 <IsSlotFree>
 8014a84:	0003      	movs	r3, r0
 8014a86:	001a      	movs	r2, r3
 8014a88:	2301      	movs	r3, #1
 8014a8a:	4053      	eors	r3, r2
 8014a8c:	b2db      	uxtb	r3, r3
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	d1e3      	bne.n	8014a5a <MallocNewMacCommandSlot+0xe>
        }
    }

    return &NvmCtx.MacCommandSlots[itr];
 8014a92:	1dfb      	adds	r3, r7, #7
 8014a94:	781b      	ldrb	r3, [r3, #0]
 8014a96:	011b      	lsls	r3, r3, #4
 8014a98:	3308      	adds	r3, #8
 8014a9a:	001a      	movs	r2, r3
 8014a9c:	4b02      	ldr	r3, [pc, #8]	; (8014aa8 <MallocNewMacCommandSlot+0x5c>)
 8014a9e:	18d3      	adds	r3, r2, r3
}
 8014aa0:	0018      	movs	r0, r3
 8014aa2:	46bd      	mov	sp, r7
 8014aa4:	b002      	add	sp, #8
 8014aa6:	bd80      	pop	{r7, pc}
 8014aa8:	20000bec 	.word	0x20000bec

08014aac <FreeMacCommandSlot>:
 * \param[IN]     slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8014aac:	b580      	push	{r7, lr}
 8014aae:	b082      	sub	sp, #8
 8014ab0:	af00      	add	r7, sp, #0
 8014ab2:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	2b00      	cmp	r3, #0
 8014ab8:	d101      	bne.n	8014abe <FreeMacCommandSlot+0x12>
    {
        return false;
 8014aba:	2300      	movs	r3, #0
 8014abc:	e006      	b.n	8014acc <FreeMacCommandSlot+0x20>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	2210      	movs	r2, #16
 8014ac2:	2100      	movs	r1, #0
 8014ac4:	0018      	movs	r0, r3
 8014ac6:	f004 fd7b 	bl	80195c0 <memset1>

    return true;
 8014aca:	2301      	movs	r3, #1
}
 8014acc:	0018      	movs	r0, r3
 8014ace:	46bd      	mov	sp, r7
 8014ad0:	b002      	add	sp, #8
 8014ad2:	bd80      	pop	{r7, pc}

08014ad4 <LinkedListInit>:
 *
 * \param[IN]     list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8014ad4:	b580      	push	{r7, lr}
 8014ad6:	b082      	sub	sp, #8
 8014ad8:	af00      	add	r7, sp, #0
 8014ada:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d101      	bne.n	8014ae6 <LinkedListInit+0x12>
    {
        return false;
 8014ae2:	2300      	movs	r3, #0
 8014ae4:	e006      	b.n	8014af4 <LinkedListInit+0x20>
    }

    list->First = NULL;
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	2200      	movs	r2, #0
 8014aea:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	2200      	movs	r2, #0
 8014af0:	605a      	str	r2, [r3, #4]

    return true;
 8014af2:	2301      	movs	r3, #1
}
 8014af4:	0018      	movs	r0, r3
 8014af6:	46bd      	mov	sp, r7
 8014af8:	b002      	add	sp, #8
 8014afa:	bd80      	pop	{r7, pc}

08014afc <LinkedListAdd>:
 * \param[IN]     list           - List where the element shall be added.
 * \param[IN]     element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8014afc:	b580      	push	{r7, lr}
 8014afe:	b082      	sub	sp, #8
 8014b00:	af00      	add	r7, sp, #0
 8014b02:	6078      	str	r0, [r7, #4]
 8014b04:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	d002      	beq.n	8014b12 <LinkedListAdd+0x16>
 8014b0c:	683b      	ldr	r3, [r7, #0]
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	d101      	bne.n	8014b16 <LinkedListAdd+0x1a>
    {
        return false;
 8014b12:	2300      	movs	r3, #0
 8014b14:	e015      	b.n	8014b42 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	681b      	ldr	r3, [r3, #0]
 8014b1a:	2b00      	cmp	r3, #0
 8014b1c:	d102      	bne.n	8014b24 <LinkedListAdd+0x28>
    {
        list->First = element;
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	683a      	ldr	r2, [r7, #0]
 8014b22:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	685b      	ldr	r3, [r3, #4]
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	d003      	beq.n	8014b34 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	685b      	ldr	r3, [r3, #4]
 8014b30:	683a      	ldr	r2, [r7, #0]
 8014b32:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8014b34:	683b      	ldr	r3, [r7, #0]
 8014b36:	2200      	movs	r2, #0
 8014b38:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	683a      	ldr	r2, [r7, #0]
 8014b3e:	605a      	str	r2, [r3, #4]

    return true;
 8014b40:	2301      	movs	r3, #1
}
 8014b42:	0018      	movs	r0, r3
 8014b44:	46bd      	mov	sp, r7
 8014b46:	b002      	add	sp, #8
 8014b48:	bd80      	pop	{r7, pc}

08014b4a <LinkedListGetPrevious>:
 * \param[IN]     list           - List
 * \param[IN]     element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8014b4a:	b580      	push	{r7, lr}
 8014b4c:	b084      	sub	sp, #16
 8014b4e:	af00      	add	r7, sp, #0
 8014b50:	6078      	str	r0, [r7, #4]
 8014b52:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	d002      	beq.n	8014b60 <LinkedListGetPrevious+0x16>
 8014b5a:	683b      	ldr	r3, [r7, #0]
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	d101      	bne.n	8014b64 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8014b60:	2300      	movs	r3, #0
 8014b62:	e016      	b.n	8014b92 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	681b      	ldr	r3, [r3, #0]
 8014b68:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8014b6a:	683a      	ldr	r2, [r7, #0]
 8014b6c:	68fb      	ldr	r3, [r7, #12]
 8014b6e:	429a      	cmp	r2, r3
 8014b70:	d00c      	beq.n	8014b8c <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8014b72:	e002      	b.n	8014b7a <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8014b74:	68fb      	ldr	r3, [r7, #12]
 8014b76:	681b      	ldr	r3, [r3, #0]
 8014b78:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8014b7a:	68fb      	ldr	r3, [r7, #12]
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	d007      	beq.n	8014b90 <LinkedListGetPrevious+0x46>
 8014b80:	68fb      	ldr	r3, [r7, #12]
 8014b82:	681b      	ldr	r3, [r3, #0]
 8014b84:	683a      	ldr	r2, [r7, #0]
 8014b86:	429a      	cmp	r2, r3
 8014b88:	d1f4      	bne.n	8014b74 <LinkedListGetPrevious+0x2a>
 8014b8a:	e001      	b.n	8014b90 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8014b8c:	2300      	movs	r3, #0
 8014b8e:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8014b90:	68fb      	ldr	r3, [r7, #12]
}
 8014b92:	0018      	movs	r0, r3
 8014b94:	46bd      	mov	sp, r7
 8014b96:	b004      	add	sp, #16
 8014b98:	bd80      	pop	{r7, pc}

08014b9a <LinkedListRemove>:
 * \param[IN]     list           - List where the element shall be removed from.
 * \param[IN]     element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8014b9a:	b580      	push	{r7, lr}
 8014b9c:	b084      	sub	sp, #16
 8014b9e:	af00      	add	r7, sp, #0
 8014ba0:	6078      	str	r0, [r7, #4]
 8014ba2:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	d002      	beq.n	8014bb0 <LinkedListRemove+0x16>
 8014baa:	683b      	ldr	r3, [r7, #0]
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	d101      	bne.n	8014bb4 <LinkedListRemove+0x1a>
    {
        return false;
 8014bb0:	2300      	movs	r3, #0
 8014bb2:	e023      	b.n	8014bfc <LinkedListRemove+0x62>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8014bb4:	683a      	ldr	r2, [r7, #0]
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	0011      	movs	r1, r2
 8014bba:	0018      	movs	r0, r3
 8014bbc:	f7ff ffc5 	bl	8014b4a <LinkedListGetPrevious>
 8014bc0:	0003      	movs	r3, r0
 8014bc2:	60fb      	str	r3, [r7, #12]

    if( list->First == element )
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	681b      	ldr	r3, [r3, #0]
 8014bc8:	683a      	ldr	r2, [r7, #0]
 8014bca:	429a      	cmp	r2, r3
 8014bcc:	d103      	bne.n	8014bd6 <LinkedListRemove+0x3c>
    {
        list->First = element->Next;
 8014bce:	683b      	ldr	r3, [r7, #0]
 8014bd0:	681a      	ldr	r2, [r3, #0]
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	685b      	ldr	r3, [r3, #4]
 8014bda:	683a      	ldr	r2, [r7, #0]
 8014bdc:	429a      	cmp	r2, r3
 8014bde:	d102      	bne.n	8014be6 <LinkedListRemove+0x4c>
    {
        list->Last = PrevElement;
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	68fa      	ldr	r2, [r7, #12]
 8014be4:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8014be6:	68fb      	ldr	r3, [r7, #12]
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	d003      	beq.n	8014bf4 <LinkedListRemove+0x5a>
    {
        PrevElement->Next = element->Next;
 8014bec:	683b      	ldr	r3, [r7, #0]
 8014bee:	681a      	ldr	r2, [r3, #0]
 8014bf0:	68fb      	ldr	r3, [r7, #12]
 8014bf2:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8014bf4:	683b      	ldr	r3, [r7, #0]
 8014bf6:	2200      	movs	r2, #0
 8014bf8:	601a      	str	r2, [r3, #0]

    return true;
 8014bfa:	2301      	movs	r3, #1
}
 8014bfc:	0018      	movs	r0, r3
 8014bfe:	46bd      	mov	sp, r7
 8014c00:	b004      	add	sp, #16
 8014c02:	bd80      	pop	{r7, pc}

08014c04 <IsSticky>:
 * \param[IN]   cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8014c04:	b580      	push	{r7, lr}
 8014c06:	b082      	sub	sp, #8
 8014c08:	af00      	add	r7, sp, #0
 8014c0a:	0002      	movs	r2, r0
 8014c0c:	1dfb      	adds	r3, r7, #7
 8014c0e:	701a      	strb	r2, [r3, #0]
    switch( cid )
 8014c10:	1dfb      	adds	r3, r7, #7
 8014c12:	781b      	ldrb	r3, [r3, #0]
 8014c14:	2b05      	cmp	r3, #5
 8014c16:	d003      	beq.n	8014c20 <IsSticky+0x1c>
 8014c18:	db04      	blt.n	8014c24 <IsSticky+0x20>
 8014c1a:	3b08      	subs	r3, #8
 8014c1c:	2b02      	cmp	r3, #2
 8014c1e:	d801      	bhi.n	8014c24 <IsSticky+0x20>
    {
        case MOTE_MAC_DL_CHANNEL_ANS:
        case MOTE_MAC_RX_PARAM_SETUP_ANS:
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
            return true;
 8014c20:	2301      	movs	r3, #1
 8014c22:	e000      	b.n	8014c26 <IsSticky+0x22>
        default:
            return false;
 8014c24:	2300      	movs	r3, #0
    }
}
 8014c26:	0018      	movs	r0, r3
 8014c28:	46bd      	mov	sp, r7
 8014c2a:	b002      	add	sp, #8
 8014c2c:	bd80      	pop	{r7, pc}
	...

08014c30 <NvmCtxCallback>:

/*
 * \brief Wrapper function for the NvmCtx
 */
static void NvmCtxCallback( void )
{
 8014c30:	b580      	push	{r7, lr}
 8014c32:	af00      	add	r7, sp, #0
    if( CommandsNvmCtxChanged != NULL )
 8014c34:	4b04      	ldr	r3, [pc, #16]	; (8014c48 <NvmCtxCallback+0x18>)
 8014c36:	681b      	ldr	r3, [r3, #0]
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	d002      	beq.n	8014c42 <NvmCtxCallback+0x12>
    {
        CommandsNvmCtxChanged( );
 8014c3c:	4b02      	ldr	r3, [pc, #8]	; (8014c48 <NvmCtxCallback+0x18>)
 8014c3e:	681b      	ldr	r3, [r3, #0]
 8014c40:	4798      	blx	r3
    }
}
 8014c42:	46c0      	nop			; (mov r8, r8)
 8014c44:	46bd      	mov	sp, r7
 8014c46:	bd80      	pop	{r7, pc}
 8014c48:	20000be8 	.word	0x20000be8

08014c4c <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( LoRaMacCommandsNvmEvent commandsNvmCtxChanged )
{
 8014c4c:	b580      	push	{r7, lr}
 8014c4e:	b082      	sub	sp, #8
 8014c50:	af00      	add	r7, sp, #0
 8014c52:	6078      	str	r0, [r7, #4]
    // Initialize with default
    memset1( ( uint8_t* )&NvmCtx, 0, sizeof( NvmCtx ) );
 8014c54:	4b08      	ldr	r3, [pc, #32]	; (8014c78 <LoRaMacCommandsInit+0x2c>)
 8014c56:	22fc      	movs	r2, #252	; 0xfc
 8014c58:	2100      	movs	r1, #0
 8014c5a:	0018      	movs	r0, r3
 8014c5c:	f004 fcb0 	bl	80195c0 <memset1>

    LinkedListInit( &NvmCtx.MacCommandList );
 8014c60:	4b05      	ldr	r3, [pc, #20]	; (8014c78 <LoRaMacCommandsInit+0x2c>)
 8014c62:	0018      	movs	r0, r3
 8014c64:	f7ff ff36 	bl	8014ad4 <LinkedListInit>

    // Assign callback
    CommandsNvmCtxChanged = commandsNvmCtxChanged;
 8014c68:	4b04      	ldr	r3, [pc, #16]	; (8014c7c <LoRaMacCommandsInit+0x30>)
 8014c6a:	687a      	ldr	r2, [r7, #4]
 8014c6c:	601a      	str	r2, [r3, #0]

    return LORAMAC_COMMANDS_SUCCESS;
 8014c6e:	2300      	movs	r3, #0
}
 8014c70:	0018      	movs	r0, r3
 8014c72:	46bd      	mov	sp, r7
 8014c74:	b002      	add	sp, #8
 8014c76:	bd80      	pop	{r7, pc}
 8014c78:	20000bec 	.word	0x20000bec
 8014c7c:	20000be8 	.word	0x20000be8

08014c80 <LoRaMacCommandsRestoreNvmCtx>:

LoRaMacCommandStatus_t LoRaMacCommandsRestoreNvmCtx( void* commandsNvmCtx )
{
 8014c80:	b580      	push	{r7, lr}
 8014c82:	b082      	sub	sp, #8
 8014c84:	af00      	add	r7, sp, #0
 8014c86:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( commandsNvmCtx != NULL )
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	d007      	beq.n	8014c9e <LoRaMacCommandsRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* )&NvmCtx, ( uint8_t* )commandsNvmCtx, sizeof( NvmCtx ) );
 8014c8e:	6879      	ldr	r1, [r7, #4]
 8014c90:	4b05      	ldr	r3, [pc, #20]	; (8014ca8 <LoRaMacCommandsRestoreNvmCtx+0x28>)
 8014c92:	22fc      	movs	r2, #252	; 0xfc
 8014c94:	0018      	movs	r0, r3
 8014c96:	f004 fc55 	bl	8019544 <memcpy1>
        return LORAMAC_COMMANDS_SUCCESS;
 8014c9a:	2300      	movs	r3, #0
 8014c9c:	e000      	b.n	8014ca0 <LoRaMacCommandsRestoreNvmCtx+0x20>
    }
    else
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014c9e:	2301      	movs	r3, #1
    }
}
 8014ca0:	0018      	movs	r0, r3
 8014ca2:	46bd      	mov	sp, r7
 8014ca4:	b002      	add	sp, #8
 8014ca6:	bd80      	pop	{r7, pc}
 8014ca8:	20000bec 	.word	0x20000bec

08014cac <LoRaMacCommandsGetNvmCtx>:

void* LoRaMacCommandsGetNvmCtx( size_t* commandsNvmCtxSize )
{
 8014cac:	b580      	push	{r7, lr}
 8014cae:	b082      	sub	sp, #8
 8014cb0:	af00      	add	r7, sp, #0
 8014cb2:	6078      	str	r0, [r7, #4]
    *commandsNvmCtxSize = sizeof( NvmCtx );
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	22fc      	movs	r2, #252	; 0xfc
 8014cb8:	601a      	str	r2, [r3, #0]
    return &NvmCtx;
 8014cba:	4b02      	ldr	r3, [pc, #8]	; (8014cc4 <LoRaMacCommandsGetNvmCtx+0x18>)
}
 8014cbc:	0018      	movs	r0, r3
 8014cbe:	46bd      	mov	sp, r7
 8014cc0:	b002      	add	sp, #8
 8014cc2:	bd80      	pop	{r7, pc}
 8014cc4:	20000bec 	.word	0x20000bec

08014cc8 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8014cc8:	b590      	push	{r4, r7, lr}
 8014cca:	b087      	sub	sp, #28
 8014ccc:	af00      	add	r7, sp, #0
 8014cce:	60b9      	str	r1, [r7, #8]
 8014cd0:	607a      	str	r2, [r7, #4]
 8014cd2:	230f      	movs	r3, #15
 8014cd4:	18fb      	adds	r3, r7, r3
 8014cd6:	1c02      	adds	r2, r0, #0
 8014cd8:	701a      	strb	r2, [r3, #0]
    if( payload == NULL )
 8014cda:	68bb      	ldr	r3, [r7, #8]
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d101      	bne.n	8014ce4 <LoRaMacCommandsAddCmd+0x1c>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014ce0:	2301      	movs	r3, #1
 8014ce2:	e03c      	b.n	8014d5e <LoRaMacCommandsAddCmd+0x96>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8014ce4:	f7ff feb2 	bl	8014a4c <MallocNewMacCommandSlot>
 8014ce8:	0003      	movs	r3, r0
 8014cea:	617b      	str	r3, [r7, #20]

    if( newCmd == NULL )
 8014cec:	697b      	ldr	r3, [r7, #20]
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	d101      	bne.n	8014cf6 <LoRaMacCommandsAddCmd+0x2e>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8014cf2:	2302      	movs	r3, #2
 8014cf4:	e033      	b.n	8014d5e <LoRaMacCommandsAddCmd+0x96>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &NvmCtx.MacCommandList, newCmd ) == false )
 8014cf6:	697a      	ldr	r2, [r7, #20]
 8014cf8:	4b1b      	ldr	r3, [pc, #108]	; (8014d68 <LoRaMacCommandsAddCmd+0xa0>)
 8014cfa:	0011      	movs	r1, r2
 8014cfc:	0018      	movs	r0, r3
 8014cfe:	f7ff fefd 	bl	8014afc <LinkedListAdd>
 8014d02:	0003      	movs	r3, r0
 8014d04:	001a      	movs	r2, r3
 8014d06:	2301      	movs	r3, #1
 8014d08:	4053      	eors	r3, r2
 8014d0a:	b2db      	uxtb	r3, r3
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	d001      	beq.n	8014d14 <LoRaMacCommandsAddCmd+0x4c>
    {
        return LORAMAC_COMMANDS_ERROR;
 8014d10:	2305      	movs	r3, #5
 8014d12:	e024      	b.n	8014d5e <LoRaMacCommandsAddCmd+0x96>
    }

    // Set Values
    newCmd->CID = cid;
 8014d14:	697b      	ldr	r3, [r7, #20]
 8014d16:	240f      	movs	r4, #15
 8014d18:	193a      	adds	r2, r7, r4
 8014d1a:	7812      	ldrb	r2, [r2, #0]
 8014d1c:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8014d1e:	697b      	ldr	r3, [r7, #20]
 8014d20:	687a      	ldr	r2, [r7, #4]
 8014d22:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8014d24:	697b      	ldr	r3, [r7, #20]
 8014d26:	3305      	adds	r3, #5
 8014d28:	687a      	ldr	r2, [r7, #4]
 8014d2a:	b292      	uxth	r2, r2
 8014d2c:	68b9      	ldr	r1, [r7, #8]
 8014d2e:	0018      	movs	r0, r3
 8014d30:	f004 fc08 	bl	8019544 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8014d34:	193b      	adds	r3, r7, r4
 8014d36:	781b      	ldrb	r3, [r3, #0]
 8014d38:	0018      	movs	r0, r3
 8014d3a:	f7ff ff63 	bl	8014c04 <IsSticky>
 8014d3e:	0003      	movs	r3, r0
 8014d40:	001a      	movs	r2, r3
 8014d42:	697b      	ldr	r3, [r7, #20]
 8014d44:	731a      	strb	r2, [r3, #12]

    NvmCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8014d46:	4b08      	ldr	r3, [pc, #32]	; (8014d68 <LoRaMacCommandsAddCmd+0xa0>)
 8014d48:	22f8      	movs	r2, #248	; 0xf8
 8014d4a:	589a      	ldr	r2, [r3, r2]
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	18d3      	adds	r3, r2, r3
 8014d50:	1c5a      	adds	r2, r3, #1
 8014d52:	4b05      	ldr	r3, [pc, #20]	; (8014d68 <LoRaMacCommandsAddCmd+0xa0>)
 8014d54:	21f8      	movs	r1, #248	; 0xf8
 8014d56:	505a      	str	r2, [r3, r1]

    NvmCtxCallback( );
 8014d58:	f7ff ff6a 	bl	8014c30 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 8014d5c:	2300      	movs	r3, #0
}
 8014d5e:	0018      	movs	r0, r3
 8014d60:	46bd      	mov	sp, r7
 8014d62:	b007      	add	sp, #28
 8014d64:	bd90      	pop	{r4, r7, pc}
 8014d66:	46c0      	nop			; (mov r8, r8)
 8014d68:	20000bec 	.word	0x20000bec

08014d6c <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8014d6c:	b580      	push	{r7, lr}
 8014d6e:	b082      	sub	sp, #8
 8014d70:	af00      	add	r7, sp, #0
 8014d72:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	d101      	bne.n	8014d7e <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014d7a:	2301      	movs	r3, #1
 8014d7c:	e028      	b.n	8014dd0 <LoRaMacCommandsRemoveCmd+0x64>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &NvmCtx.MacCommandList, macCmd ) == false )
 8014d7e:	687a      	ldr	r2, [r7, #4]
 8014d80:	4b15      	ldr	r3, [pc, #84]	; (8014dd8 <LoRaMacCommandsRemoveCmd+0x6c>)
 8014d82:	0011      	movs	r1, r2
 8014d84:	0018      	movs	r0, r3
 8014d86:	f7ff ff08 	bl	8014b9a <LinkedListRemove>
 8014d8a:	0003      	movs	r3, r0
 8014d8c:	001a      	movs	r2, r3
 8014d8e:	2301      	movs	r3, #1
 8014d90:	4053      	eors	r3, r2
 8014d92:	b2db      	uxtb	r3, r3
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	d001      	beq.n	8014d9c <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8014d98:	2303      	movs	r3, #3
 8014d9a:	e019      	b.n	8014dd0 <LoRaMacCommandsRemoveCmd+0x64>
    }

    NvmCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8014d9c:	4b0e      	ldr	r3, [pc, #56]	; (8014dd8 <LoRaMacCommandsRemoveCmd+0x6c>)
 8014d9e:	22f8      	movs	r2, #248	; 0xf8
 8014da0:	589a      	ldr	r2, [r3, r2]
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	689b      	ldr	r3, [r3, #8]
 8014da6:	1ad3      	subs	r3, r2, r3
 8014da8:	1e5a      	subs	r2, r3, #1
 8014daa:	4b0b      	ldr	r3, [pc, #44]	; (8014dd8 <LoRaMacCommandsRemoveCmd+0x6c>)
 8014dac:	21f8      	movs	r1, #248	; 0xf8
 8014dae:	505a      	str	r2, [r3, r1]

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	0018      	movs	r0, r3
 8014db4:	f7ff fe7a 	bl	8014aac <FreeMacCommandSlot>
 8014db8:	0003      	movs	r3, r0
 8014dba:	001a      	movs	r2, r3
 8014dbc:	2301      	movs	r3, #1
 8014dbe:	4053      	eors	r3, r2
 8014dc0:	b2db      	uxtb	r3, r3
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	d001      	beq.n	8014dca <LoRaMacCommandsRemoveCmd+0x5e>
    {
        return LORAMAC_COMMANDS_ERROR;
 8014dc6:	2305      	movs	r3, #5
 8014dc8:	e002      	b.n	8014dd0 <LoRaMacCommandsRemoveCmd+0x64>
    }

    NvmCtxCallback( );
 8014dca:	f7ff ff31 	bl	8014c30 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 8014dce:	2300      	movs	r3, #0
}
 8014dd0:	0018      	movs	r0, r3
 8014dd2:	46bd      	mov	sp, r7
 8014dd4:	b002      	add	sp, #8
 8014dd6:	bd80      	pop	{r7, pc}
 8014dd8:	20000bec 	.word	0x20000bec

08014ddc <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8014ddc:	b580      	push	{r7, lr}
 8014dde:	b082      	sub	sp, #8
 8014de0:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 8014de2:	4b11      	ldr	r3, [pc, #68]	; (8014e28 <LoRaMacCommandsRemoveNoneStickyCmds+0x4c>)
 8014de4:	681b      	ldr	r3, [r3, #0]
 8014de6:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8014de8:	e013      	b.n	8014e12 <LoRaMacCommandsRemoveNoneStickyCmds+0x36>
    {
        if( curElement->IsSticky == false )
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	7b1b      	ldrb	r3, [r3, #12]
 8014dee:	2201      	movs	r2, #1
 8014df0:	4053      	eors	r3, r2
 8014df2:	b2db      	uxtb	r3, r3
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	d009      	beq.n	8014e0c <LoRaMacCommandsRemoveNoneStickyCmds+0x30>
        {
            nexElement = curElement->Next;
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	681b      	ldr	r3, [r3, #0]
 8014dfc:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	0018      	movs	r0, r3
 8014e02:	f7ff ffb3 	bl	8014d6c <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8014e06:	683b      	ldr	r3, [r7, #0]
 8014e08:	607b      	str	r3, [r7, #4]
 8014e0a:	e002      	b.n	8014e12 <LoRaMacCommandsRemoveNoneStickyCmds+0x36>
        }
        else
        {
            curElement = curElement->Next;
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	681b      	ldr	r3, [r3, #0]
 8014e10:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	d1e8      	bne.n	8014dea <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    NvmCtxCallback( );
 8014e18:	f7ff ff0a 	bl	8014c30 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 8014e1c:	2300      	movs	r3, #0
}
 8014e1e:	0018      	movs	r0, r3
 8014e20:	46bd      	mov	sp, r7
 8014e22:	b002      	add	sp, #8
 8014e24:	bd80      	pop	{r7, pc}
 8014e26:	46c0      	nop			; (mov r8, r8)
 8014e28:	20000bec 	.word	0x20000bec

08014e2c <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8014e2c:	b580      	push	{r7, lr}
 8014e2e:	b082      	sub	sp, #8
 8014e30:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 8014e32:	4b0f      	ldr	r3, [pc, #60]	; (8014e70 <LoRaMacCommandsRemoveStickyAnsCmds+0x44>)
 8014e34:	681b      	ldr	r3, [r3, #0]
 8014e36:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8014e38:	e00f      	b.n	8014e5a <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	681b      	ldr	r3, [r3, #0]
 8014e3e:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	791b      	ldrb	r3, [r3, #4]
 8014e44:	0018      	movs	r0, r3
 8014e46:	f7ff fedd 	bl	8014c04 <IsSticky>
 8014e4a:	1e03      	subs	r3, r0, #0
 8014e4c:	d003      	beq.n	8014e56 <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	0018      	movs	r0, r3
 8014e52:	f7ff ff8b 	bl	8014d6c <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8014e56:	683b      	ldr	r3, [r7, #0]
 8014e58:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	d1ec      	bne.n	8014e3a <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    NvmCtxCallback( );
 8014e60:	f7ff fee6 	bl	8014c30 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 8014e64:	2300      	movs	r3, #0
}
 8014e66:	0018      	movs	r0, r3
 8014e68:	46bd      	mov	sp, r7
 8014e6a:	b002      	add	sp, #8
 8014e6c:	bd80      	pop	{r7, pc}
 8014e6e:	46c0      	nop			; (mov r8, r8)
 8014e70:	20000bec 	.word	0x20000bec

08014e74 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8014e74:	b580      	push	{r7, lr}
 8014e76:	b082      	sub	sp, #8
 8014e78:	af00      	add	r7, sp, #0
 8014e7a:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	2b00      	cmp	r3, #0
 8014e80:	d101      	bne.n	8014e86 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014e82:	2301      	movs	r3, #1
 8014e84:	e005      	b.n	8014e92 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = NvmCtx.SerializedCmdsSize;
 8014e86:	4b05      	ldr	r3, [pc, #20]	; (8014e9c <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8014e88:	22f8      	movs	r2, #248	; 0xf8
 8014e8a:	589a      	ldr	r2, [r3, r2]
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8014e90:	2300      	movs	r3, #0
}
 8014e92:	0018      	movs	r0, r3
 8014e94:	46bd      	mov	sp, r7
 8014e96:	b002      	add	sp, #8
 8014e98:	bd80      	pop	{r7, pc}
 8014e9a:	46c0      	nop			; (mov r8, r8)
 8014e9c:	20000bec 	.word	0x20000bec

08014ea0 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8014ea0:	b590      	push	{r4, r7, lr}
 8014ea2:	b089      	sub	sp, #36	; 0x24
 8014ea4:	af00      	add	r7, sp, #0
 8014ea6:	60f8      	str	r0, [r7, #12]
 8014ea8:	60b9      	str	r1, [r7, #8]
 8014eaa:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = NvmCtx.MacCommandList.First;
 8014eac:	4b2a      	ldr	r3, [pc, #168]	; (8014f58 <LoRaMacCommandsSerializeCmds+0xb8>)
 8014eae:	681b      	ldr	r3, [r3, #0]
 8014eb0:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8014eb2:	231b      	movs	r3, #27
 8014eb4:	18fb      	adds	r3, r7, r3
 8014eb6:	2200      	movs	r2, #0
 8014eb8:	701a      	strb	r2, [r3, #0]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d002      	beq.n	8014ec6 <LoRaMacCommandsSerializeCmds+0x26>
 8014ec0:	68bb      	ldr	r3, [r7, #8]
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	d12d      	bne.n	8014f22 <LoRaMacCommandsSerializeCmds+0x82>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014ec6:	2301      	movs	r3, #1
 8014ec8:	e042      	b.n	8014f50 <LoRaMacCommandsSerializeCmds+0xb0>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8014eca:	241b      	movs	r4, #27
 8014ecc:	193b      	adds	r3, r7, r4
 8014ece:	781b      	ldrb	r3, [r3, #0]
 8014ed0:	68fa      	ldr	r2, [r7, #12]
 8014ed2:	1ad2      	subs	r2, r2, r3
 8014ed4:	69fb      	ldr	r3, [r7, #28]
 8014ed6:	689b      	ldr	r3, [r3, #8]
 8014ed8:	3301      	adds	r3, #1
 8014eda:	429a      	cmp	r2, r3
 8014edc:	d325      	bcc.n	8014f2a <LoRaMacCommandsSerializeCmds+0x8a>
        {
            buffer[itr++] = curElement->CID;
 8014ede:	193b      	adds	r3, r7, r4
 8014ee0:	781b      	ldrb	r3, [r3, #0]
 8014ee2:	193a      	adds	r2, r7, r4
 8014ee4:	1c59      	adds	r1, r3, #1
 8014ee6:	7011      	strb	r1, [r2, #0]
 8014ee8:	001a      	movs	r2, r3
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	189b      	adds	r3, r3, r2
 8014eee:	69fa      	ldr	r2, [r7, #28]
 8014ef0:	7912      	ldrb	r2, [r2, #4]
 8014ef2:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8014ef4:	193b      	adds	r3, r7, r4
 8014ef6:	781b      	ldrb	r3, [r3, #0]
 8014ef8:	687a      	ldr	r2, [r7, #4]
 8014efa:	18d0      	adds	r0, r2, r3
 8014efc:	69fb      	ldr	r3, [r7, #28]
 8014efe:	1d59      	adds	r1, r3, #5
 8014f00:	69fb      	ldr	r3, [r7, #28]
 8014f02:	689b      	ldr	r3, [r3, #8]
 8014f04:	b29b      	uxth	r3, r3
 8014f06:	001a      	movs	r2, r3
 8014f08:	f004 fb1c 	bl	8019544 <memcpy1>
            itr += curElement->PayloadSize;
 8014f0c:	69fb      	ldr	r3, [r7, #28]
 8014f0e:	689b      	ldr	r3, [r3, #8]
 8014f10:	b2d9      	uxtb	r1, r3
 8014f12:	193b      	adds	r3, r7, r4
 8014f14:	193a      	adds	r2, r7, r4
 8014f16:	7812      	ldrb	r2, [r2, #0]
 8014f18:	188a      	adds	r2, r1, r2
 8014f1a:	701a      	strb	r2, [r3, #0]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8014f1c:	69fb      	ldr	r3, [r7, #28]
 8014f1e:	681b      	ldr	r3, [r3, #0]
 8014f20:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8014f22:	69fb      	ldr	r3, [r7, #28]
 8014f24:	2b00      	cmp	r3, #0
 8014f26:	d1d0      	bne.n	8014eca <LoRaMacCommandsSerializeCmds+0x2a>
 8014f28:	e00a      	b.n	8014f40 <LoRaMacCommandsSerializeCmds+0xa0>
            break;
 8014f2a:	46c0      	nop			; (mov r8, r8)
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8014f2c:	e008      	b.n	8014f40 <LoRaMacCommandsSerializeCmds+0xa0>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8014f2e:	69fb      	ldr	r3, [r7, #28]
 8014f30:	681b      	ldr	r3, [r3, #0]
 8014f32:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8014f34:	69fb      	ldr	r3, [r7, #28]
 8014f36:	0018      	movs	r0, r3
 8014f38:	f7ff ff18 	bl	8014d6c <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8014f3c:	697b      	ldr	r3, [r7, #20]
 8014f3e:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8014f40:	69fb      	ldr	r3, [r7, #28]
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	d1f3      	bne.n	8014f2e <LoRaMacCommandsSerializeCmds+0x8e>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8014f46:	68bb      	ldr	r3, [r7, #8]
 8014f48:	0018      	movs	r0, r3
 8014f4a:	f7ff ff93 	bl	8014e74 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8014f4e:	2300      	movs	r3, #0
}
 8014f50:	0018      	movs	r0, r3
 8014f52:	46bd      	mov	sp, r7
 8014f54:	b009      	add	sp, #36	; 0x24
 8014f56:	bd90      	pop	{r4, r7, pc}
 8014f58:	20000bec 	.word	0x20000bec

08014f5c <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 8014f5c:	b580      	push	{r7, lr}
 8014f5e:	b084      	sub	sp, #16
 8014f60:	af00      	add	r7, sp, #0
 8014f62:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	d101      	bne.n	8014f6e <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014f6a:	2301      	movs	r3, #1
 8014f6c:	e016      	b.n	8014f9c <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
 8014f6e:	4b0d      	ldr	r3, [pc, #52]	; (8014fa4 <LoRaMacCommandsStickyCmdsPending+0x48>)
 8014f70:	681b      	ldr	r3, [r3, #0]
 8014f72:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	2200      	movs	r2, #0
 8014f78:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 8014f7a:	e00b      	b.n	8014f94 <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 8014f7c:	68fb      	ldr	r3, [r7, #12]
 8014f7e:	7b1b      	ldrb	r3, [r3, #12]
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	d004      	beq.n	8014f8e <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	2201      	movs	r2, #1
 8014f88:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 8014f8a:	2300      	movs	r3, #0
 8014f8c:	e006      	b.n	8014f9c <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 8014f8e:	68fb      	ldr	r3, [r7, #12]
 8014f90:	681b      	ldr	r3, [r3, #0]
 8014f92:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 8014f94:	68fb      	ldr	r3, [r7, #12]
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	d1f0      	bne.n	8014f7c <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8014f9a:	2300      	movs	r3, #0
}
 8014f9c:	0018      	movs	r0, r3
 8014f9e:	46bd      	mov	sp, r7
 8014fa0:	b004      	add	sp, #16
 8014fa2:	bd80      	pop	{r7, pc}
 8014fa4:	20000bec 	.word	0x20000bec

08014fa8 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8014fa8:	b580      	push	{r7, lr}
 8014faa:	b084      	sub	sp, #16
 8014fac:	af00      	add	r7, sp, #0
 8014fae:	0002      	movs	r2, r0
 8014fb0:	1dfb      	adds	r3, r7, #7
 8014fb2:	701a      	strb	r2, [r3, #0]
    uint8_t cidSize = 0;
 8014fb4:	230f      	movs	r3, #15
 8014fb6:	18fb      	adds	r3, r7, r3
 8014fb8:	2200      	movs	r2, #0
 8014fba:	701a      	strb	r2, [r3, #0]

    // Decode Frame MAC commands
    switch( cid )
 8014fbc:	1dfb      	adds	r3, r7, #7
 8014fbe:	781b      	ldrb	r3, [r3, #0]
 8014fc0:	2b13      	cmp	r3, #19
 8014fc2:	d84a      	bhi.n	801505a <LoRaMacCommandsGetCmdSize+0xb2>
 8014fc4:	009a      	lsls	r2, r3, #2
 8014fc6:	4b29      	ldr	r3, [pc, #164]	; (801506c <LoRaMacCommandsGetCmdSize+0xc4>)
 8014fc8:	18d3      	adds	r3, r2, r3
 8014fca:	681b      	ldr	r3, [r3, #0]
 8014fcc:	469f      	mov	pc, r3
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8014fce:	230f      	movs	r3, #15
 8014fd0:	18fb      	adds	r3, r7, r3
 8014fd2:	2203      	movs	r2, #3
 8014fd4:	701a      	strb	r2, [r3, #0]
            break;
 8014fd6:	e041      	b.n	801505c <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8014fd8:	230f      	movs	r3, #15
 8014fda:	18fb      	adds	r3, r7, r3
 8014fdc:	2205      	movs	r2, #5
 8014fde:	701a      	strb	r2, [r3, #0]
            break;
 8014fe0:	e03c      	b.n	801505c <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8014fe2:	230f      	movs	r3, #15
 8014fe4:	18fb      	adds	r3, r7, r3
 8014fe6:	2202      	movs	r2, #2
 8014fe8:	701a      	strb	r2, [r3, #0]
            break;
 8014fea:	e037      	b.n	801505c <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 8014fec:	230f      	movs	r3, #15
 8014fee:	18fb      	adds	r3, r7, r3
 8014ff0:	2205      	movs	r2, #5
 8014ff2:	701a      	strb	r2, [r3, #0]
            break;
 8014ff4:	e032      	b.n	801505c <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8014ff6:	230f      	movs	r3, #15
 8014ff8:	18fb      	adds	r3, r7, r3
 8014ffa:	2201      	movs	r2, #1
 8014ffc:	701a      	strb	r2, [r3, #0]
            break;
 8014ffe:	e02d      	b.n	801505c <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8015000:	230f      	movs	r3, #15
 8015002:	18fb      	adds	r3, r7, r3
 8015004:	2206      	movs	r2, #6
 8015006:	701a      	strb	r2, [r3, #0]
            break;
 8015008:	e028      	b.n	801505c <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 801500a:	230f      	movs	r3, #15
 801500c:	18fb      	adds	r3, r7, r3
 801500e:	2202      	movs	r2, #2
 8015010:	701a      	strb	r2, [r3, #0]
            break;
 8015012:	e023      	b.n	801505c <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8015014:	230f      	movs	r3, #15
 8015016:	18fb      	adds	r3, r7, r3
 8015018:	2202      	movs	r2, #2
 801501a:	701a      	strb	r2, [r3, #0]
            break;
 801501c:	e01e      	b.n	801505c <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 801501e:	230f      	movs	r3, #15
 8015020:	18fb      	adds	r3, r7, r3
 8015022:	2205      	movs	r2, #5
 8015024:	701a      	strb	r2, [r3, #0]
            break;
 8015026:	e019      	b.n	801505c <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8015028:	230f      	movs	r3, #15
 801502a:	18fb      	adds	r3, r7, r3
 801502c:	2206      	movs	r2, #6
 801502e:	701a      	strb	r2, [r3, #0]
            break;
 8015030:	e014      	b.n	801505c <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8015032:	230f      	movs	r3, #15
 8015034:	18fb      	adds	r3, r7, r3
 8015036:	2201      	movs	r2, #1
 8015038:	701a      	strb	r2, [r3, #0]
            break;
 801503a:	e00f      	b.n	801505c <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 801503c:	230f      	movs	r3, #15
 801503e:	18fb      	adds	r3, r7, r3
 8015040:	2205      	movs	r2, #5
 8015042:	701a      	strb	r2, [r3, #0]
            break;
 8015044:	e00a      	b.n	801505c <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8015046:	230f      	movs	r3, #15
 8015048:	18fb      	adds	r3, r7, r3
 801504a:	2204      	movs	r2, #4
 801504c:	701a      	strb	r2, [r3, #0]
            break;
 801504e:	e005      	b.n	801505c <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8015050:	230f      	movs	r3, #15
 8015052:	18fb      	adds	r3, r7, r3
 8015054:	2204      	movs	r2, #4
 8015056:	701a      	strb	r2, [r3, #0]
            break;
 8015058:	e000      	b.n	801505c <LoRaMacCommandsGetCmdSize+0xb4>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 801505a:	46c0      	nop			; (mov r8, r8)
        }
    }
    return cidSize;
 801505c:	230f      	movs	r3, #15
 801505e:	18fb      	adds	r3, r7, r3
 8015060:	781b      	ldrb	r3, [r3, #0]
}
 8015062:	0018      	movs	r0, r3
 8015064:	46bd      	mov	sp, r7
 8015066:	b004      	add	sp, #16
 8015068:	bd80      	pop	{r7, pc}
 801506a:	46c0      	nop			; (mov r8, r8)
 801506c:	0801f8c0 	.word	0x0801f8c0

08015070 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8015070:	b580      	push	{r7, lr}
 8015072:	b082      	sub	sp, #8
 8015074:	af00      	add	r7, sp, #0
 8015076:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8015078:	4b08      	ldr	r3, [pc, #32]	; (801509c <IncreaseBufferPointer+0x2c>)
 801507a:	691b      	ldr	r3, [r3, #16]
 801507c:	3310      	adds	r3, #16
 801507e:	687a      	ldr	r2, [r7, #4]
 8015080:	429a      	cmp	r2, r3
 8015082:	d103      	bne.n	801508c <IncreaseBufferPointer+0x1c>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 8015084:	4b05      	ldr	r3, [pc, #20]	; (801509c <IncreaseBufferPointer+0x2c>)
 8015086:	691b      	ldr	r3, [r3, #16]
 8015088:	607b      	str	r3, [r7, #4]
 801508a:	e002      	b.n	8015092 <IncreaseBufferPointer+0x22>
    }
    else
    {
        // Increase
        bufferPointer++;
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	3304      	adds	r3, #4
 8015090:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8015092:	687b      	ldr	r3, [r7, #4]
}
 8015094:	0018      	movs	r0, r3
 8015096:	46bd      	mov	sp, r7
 8015098:	b002      	add	sp, #8
 801509a:	bd80      	pop	{r7, pc}
 801509c:	20000d00 	.word	0x20000d00

080150a0 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 80150a0:	b580      	push	{r7, lr}
 80150a2:	b082      	sub	sp, #8
 80150a4:	af00      	add	r7, sp, #0
 80150a6:	0002      	movs	r2, r0
 80150a8:	1dfb      	adds	r3, r7, #7
 80150aa:	701a      	strb	r2, [r3, #0]
    if( count == 0 )
 80150ac:	1dfb      	adds	r3, r7, #7
 80150ae:	781b      	ldrb	r3, [r3, #0]
 80150b0:	2b00      	cmp	r3, #0
 80150b2:	d101      	bne.n	80150b8 <IsListEmpty+0x18>
    {
        return true;
 80150b4:	2301      	movs	r3, #1
 80150b6:	e000      	b.n	80150ba <IsListEmpty+0x1a>
    }
    return false;
 80150b8:	2300      	movs	r3, #0
}
 80150ba:	0018      	movs	r0, r3
 80150bc:	46bd      	mov	sp, r7
 80150be:	b002      	add	sp, #8
 80150c0:	bd80      	pop	{r7, pc}

080150c2 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 80150c2:	b580      	push	{r7, lr}
 80150c4:	b082      	sub	sp, #8
 80150c6:	af00      	add	r7, sp, #0
 80150c8:	0002      	movs	r2, r0
 80150ca:	1dfb      	adds	r3, r7, #7
 80150cc:	701a      	strb	r2, [r3, #0]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 80150ce:	1dfb      	adds	r3, r7, #7
 80150d0:	781b      	ldrb	r3, [r3, #0]
 80150d2:	2b04      	cmp	r3, #4
 80150d4:	d901      	bls.n	80150da <IsListFull+0x18>
    {
        return true;
 80150d6:	2301      	movs	r3, #1
 80150d8:	e000      	b.n	80150dc <IsListFull+0x1a>
    }
    return false;
 80150da:	2300      	movs	r3, #0
}
 80150dc:	0018      	movs	r0, r3
 80150de:	46bd      	mov	sp, r7
 80150e0:	b002      	add	sp, #8
 80150e2:	bd80      	pop	{r7, pc}

080150e4 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 80150e4:	b580      	push	{r7, lr}
 80150e6:	b086      	sub	sp, #24
 80150e8:	af00      	add	r7, sp, #0
 80150ea:	60b9      	str	r1, [r7, #8]
 80150ec:	607a      	str	r2, [r7, #4]
 80150ee:	230f      	movs	r3, #15
 80150f0:	18fb      	adds	r3, r7, r3
 80150f2:	1c02      	adds	r2, r0, #0
 80150f4:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = bufferStart;
 80150f6:	68bb      	ldr	r3, [r7, #8]
 80150f8:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 80150fa:	4b18      	ldr	r3, [pc, #96]	; (801515c <GetElement+0x78>)
 80150fc:	691b      	ldr	r3, [r3, #16]
 80150fe:	7d1b      	ldrb	r3, [r3, #20]
 8015100:	0018      	movs	r0, r3
 8015102:	f7ff ffcd 	bl	80150a0 <IsListEmpty>
 8015106:	1e03      	subs	r3, r0, #0
 8015108:	d001      	beq.n	801510e <GetElement+0x2a>
    {
        return NULL;
 801510a:	2300      	movs	r3, #0
 801510c:	e022      	b.n	8015154 <GetElement+0x70>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt; elementCnt++ )
 801510e:	2313      	movs	r3, #19
 8015110:	18fb      	adds	r3, r7, r3
 8015112:	2200      	movs	r2, #0
 8015114:	701a      	strb	r2, [r3, #0]
 8015116:	e014      	b.n	8015142 <GetElement+0x5e>
    {
        if( element->Request == request )
 8015118:	697b      	ldr	r3, [r7, #20]
 801511a:	781b      	ldrb	r3, [r3, #0]
 801511c:	220f      	movs	r2, #15
 801511e:	18ba      	adds	r2, r7, r2
 8015120:	7812      	ldrb	r2, [r2, #0]
 8015122:	429a      	cmp	r2, r3
 8015124:	d101      	bne.n	801512a <GetElement+0x46>
        {
            // We have found the element
            return element;
 8015126:	697b      	ldr	r3, [r7, #20]
 8015128:	e014      	b.n	8015154 <GetElement+0x70>
        }
        element = IncreaseBufferPointer( element );
 801512a:	697b      	ldr	r3, [r7, #20]
 801512c:	0018      	movs	r0, r3
 801512e:	f7ff ff9f 	bl	8015070 <IncreaseBufferPointer>
 8015132:	0003      	movs	r3, r0
 8015134:	617b      	str	r3, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt; elementCnt++ )
 8015136:	2113      	movs	r1, #19
 8015138:	187b      	adds	r3, r7, r1
 801513a:	781a      	ldrb	r2, [r3, #0]
 801513c:	187b      	adds	r3, r7, r1
 801513e:	3201      	adds	r2, #1
 8015140:	701a      	strb	r2, [r3, #0]
 8015142:	4b06      	ldr	r3, [pc, #24]	; (801515c <GetElement+0x78>)
 8015144:	691b      	ldr	r3, [r3, #16]
 8015146:	7d1b      	ldrb	r3, [r3, #20]
 8015148:	2213      	movs	r2, #19
 801514a:	18ba      	adds	r2, r7, r2
 801514c:	7812      	ldrb	r2, [r2, #0]
 801514e:	429a      	cmp	r2, r3
 8015150:	d3e2      	bcc.n	8015118 <GetElement+0x34>
    }

    return NULL;
 8015152:	2300      	movs	r3, #0
}
 8015154:	0018      	movs	r0, r3
 8015156:	46bd      	mov	sp, r7
 8015158:	b006      	add	sp, #24
 801515a:	bd80      	pop	{r7, pc}
 801515c:	20000d00 	.word	0x20000d00

08015160 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives, LoRaMacConfirmQueueNvmEvent confirmQueueNvmCtxChanged )
{
 8015160:	b580      	push	{r7, lr}
 8015162:	b082      	sub	sp, #8
 8015164:	af00      	add	r7, sp, #0
 8015166:	6078      	str	r0, [r7, #4]
 8015168:	6039      	str	r1, [r7, #0]
    ConfirmQueueCtx.Primitives = primitives;
 801516a:	4b13      	ldr	r3, [pc, #76]	; (80151b8 <LoRaMacConfirmQueueInit+0x58>)
 801516c:	687a      	ldr	r2, [r7, #4]
 801516e:	601a      	str	r2, [r3, #0]

    // Assign nvm context
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;
 8015170:	4b11      	ldr	r3, [pc, #68]	; (80151b8 <LoRaMacConfirmQueueInit+0x58>)
 8015172:	4a12      	ldr	r2, [pc, #72]	; (80151bc <LoRaMacConfirmQueueInit+0x5c>)
 8015174:	611a      	str	r2, [r3, #16]

    // Init counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt = 0;
 8015176:	4b10      	ldr	r3, [pc, #64]	; (80151b8 <LoRaMacConfirmQueueInit+0x58>)
 8015178:	691b      	ldr	r3, [r3, #16]
 801517a:	2200      	movs	r2, #0
 801517c:	751a      	strb	r2, [r3, #20]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 801517e:	4b0e      	ldr	r3, [pc, #56]	; (80151b8 <LoRaMacConfirmQueueInit+0x58>)
 8015180:	691b      	ldr	r3, [r3, #16]
 8015182:	001a      	movs	r2, r3
 8015184:	4b0c      	ldr	r3, [pc, #48]	; (80151b8 <LoRaMacConfirmQueueInit+0x58>)
 8015186:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 8015188:	4b0b      	ldr	r3, [pc, #44]	; (80151b8 <LoRaMacConfirmQueueInit+0x58>)
 801518a:	691b      	ldr	r3, [r3, #16]
 801518c:	001a      	movs	r2, r3
 801518e:	4b0a      	ldr	r3, [pc, #40]	; (80151b8 <LoRaMacConfirmQueueInit+0x58>)
 8015190:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue ) );
 8015192:	4b09      	ldr	r3, [pc, #36]	; (80151b8 <LoRaMacConfirmQueueInit+0x58>)
 8015194:	691b      	ldr	r3, [r3, #16]
 8015196:	2214      	movs	r2, #20
 8015198:	21ff      	movs	r1, #255	; 0xff
 801519a:	0018      	movs	r0, r3
 801519c:	f004 fa10 	bl	80195c0 <memset1>

    // Common status
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80151a0:	4b05      	ldr	r3, [pc, #20]	; (80151b8 <LoRaMacConfirmQueueInit+0x58>)
 80151a2:	691b      	ldr	r3, [r3, #16]
 80151a4:	2201      	movs	r2, #1
 80151a6:	755a      	strb	r2, [r3, #21]

    // Assign callback
    ConfirmQueueCtx.LoRaMacConfirmQueueNvmEvent = confirmQueueNvmCtxChanged;
 80151a8:	4b03      	ldr	r3, [pc, #12]	; (80151b8 <LoRaMacConfirmQueueInit+0x58>)
 80151aa:	683a      	ldr	r2, [r7, #0]
 80151ac:	60da      	str	r2, [r3, #12]
}
 80151ae:	46c0      	nop			; (mov r8, r8)
 80151b0:	46bd      	mov	sp, r7
 80151b2:	b002      	add	sp, #8
 80151b4:	bd80      	pop	{r7, pc}
 80151b6:	46c0      	nop			; (mov r8, r8)
 80151b8:	20000d00 	.word	0x20000d00
 80151bc:	20000ce8 	.word	0x20000ce8

080151c0 <LoRaMacConfirmQueueRestoreNvmCtx>:

bool LoRaMacConfirmQueueRestoreNvmCtx( void* confirmQueueNvmCtx )
{
 80151c0:	b580      	push	{r7, lr}
 80151c2:	b082      	sub	sp, #8
 80151c4:	af00      	add	r7, sp, #0
 80151c6:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( confirmQueueNvmCtx != NULL )
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	2b00      	cmp	r3, #0
 80151cc:	d007      	beq.n	80151de <LoRaMacConfirmQueueRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* )&ConfirmQueueNvmCtx, ( uint8_t* ) confirmQueueNvmCtx, sizeof( ConfirmQueueNvmCtx ) );
 80151ce:	6879      	ldr	r1, [r7, #4]
 80151d0:	4b05      	ldr	r3, [pc, #20]	; (80151e8 <LoRaMacConfirmQueueRestoreNvmCtx+0x28>)
 80151d2:	2216      	movs	r2, #22
 80151d4:	0018      	movs	r0, r3
 80151d6:	f004 f9b5 	bl	8019544 <memcpy1>
        return true;
 80151da:	2301      	movs	r3, #1
 80151dc:	e000      	b.n	80151e0 <LoRaMacConfirmQueueRestoreNvmCtx+0x20>
    }
    else
    {
        return false;
 80151de:	2300      	movs	r3, #0
    }
}
 80151e0:	0018      	movs	r0, r3
 80151e2:	46bd      	mov	sp, r7
 80151e4:	b002      	add	sp, #8
 80151e6:	bd80      	pop	{r7, pc}
 80151e8:	20000ce8 	.word	0x20000ce8

080151ec <LoRaMacConfirmQueueGetNvmCtx>:

void* LoRaMacConfirmQueueGetNvmCtx( size_t* confirmQueueNvmCtxSize )
{
 80151ec:	b580      	push	{r7, lr}
 80151ee:	b082      	sub	sp, #8
 80151f0:	af00      	add	r7, sp, #0
 80151f2:	6078      	str	r0, [r7, #4]
    *confirmQueueNvmCtxSize = sizeof( ConfirmQueueNvmCtx );
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	2216      	movs	r2, #22
 80151f8:	601a      	str	r2, [r3, #0]
    return &ConfirmQueueNvmCtx;
 80151fa:	4b02      	ldr	r3, [pc, #8]	; (8015204 <LoRaMacConfirmQueueGetNvmCtx+0x18>)
}
 80151fc:	0018      	movs	r0, r3
 80151fe:	46bd      	mov	sp, r7
 8015200:	b002      	add	sp, #8
 8015202:	bd80      	pop	{r7, pc}
 8015204:	20000ce8 	.word	0x20000ce8

08015208 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8015208:	b580      	push	{r7, lr}
 801520a:	b082      	sub	sp, #8
 801520c:	af00      	add	r7, sp, #0
 801520e:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 8015210:	4b17      	ldr	r3, [pc, #92]	; (8015270 <LoRaMacConfirmQueueAdd+0x68>)
 8015212:	691b      	ldr	r3, [r3, #16]
 8015214:	7d1b      	ldrb	r3, [r3, #20]
 8015216:	0018      	movs	r0, r3
 8015218:	f7ff ff53 	bl	80150c2 <IsListFull>
 801521c:	1e03      	subs	r3, r0, #0
 801521e:	d001      	beq.n	8015224 <LoRaMacConfirmQueueAdd+0x1c>
    {
        // Protect the buffer against overwrites
        return false;
 8015220:	2300      	movs	r3, #0
 8015222:	e021      	b.n	8015268 <LoRaMacConfirmQueueAdd+0x60>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8015224:	4b12      	ldr	r3, [pc, #72]	; (8015270 <LoRaMacConfirmQueueAdd+0x68>)
 8015226:	689b      	ldr	r3, [r3, #8]
 8015228:	687a      	ldr	r2, [r7, #4]
 801522a:	7812      	ldrb	r2, [r2, #0]
 801522c:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 801522e:	4b10      	ldr	r3, [pc, #64]	; (8015270 <LoRaMacConfirmQueueAdd+0x68>)
 8015230:	689b      	ldr	r3, [r3, #8]
 8015232:	687a      	ldr	r2, [r7, #4]
 8015234:	7852      	ldrb	r2, [r2, #1]
 8015236:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8015238:	4b0d      	ldr	r3, [pc, #52]	; (8015270 <LoRaMacConfirmQueueAdd+0x68>)
 801523a:	689b      	ldr	r3, [r3, #8]
 801523c:	687a      	ldr	r2, [r7, #4]
 801523e:	78d2      	ldrb	r2, [r2, #3]
 8015240:	70da      	strb	r2, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 8015242:	4b0b      	ldr	r3, [pc, #44]	; (8015270 <LoRaMacConfirmQueueAdd+0x68>)
 8015244:	689b      	ldr	r3, [r3, #8]
 8015246:	2200      	movs	r2, #0
 8015248:	709a      	strb	r2, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt++;
 801524a:	4b09      	ldr	r3, [pc, #36]	; (8015270 <LoRaMacConfirmQueueAdd+0x68>)
 801524c:	691b      	ldr	r3, [r3, #16]
 801524e:	7d1a      	ldrb	r2, [r3, #20]
 8015250:	3201      	adds	r2, #1
 8015252:	b2d2      	uxtb	r2, r2
 8015254:	751a      	strb	r2, [r3, #20]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8015256:	4b06      	ldr	r3, [pc, #24]	; (8015270 <LoRaMacConfirmQueueAdd+0x68>)
 8015258:	689b      	ldr	r3, [r3, #8]
 801525a:	0018      	movs	r0, r3
 801525c:	f7ff ff08 	bl	8015070 <IncreaseBufferPointer>
 8015260:	0002      	movs	r2, r0
 8015262:	4b03      	ldr	r3, [pc, #12]	; (8015270 <LoRaMacConfirmQueueAdd+0x68>)
 8015264:	609a      	str	r2, [r3, #8]

    return true;
 8015266:	2301      	movs	r3, #1
}
 8015268:	0018      	movs	r0, r3
 801526a:	46bd      	mov	sp, r7
 801526c:	b002      	add	sp, #8
 801526e:	bd80      	pop	{r7, pc}
 8015270:	20000d00 	.word	0x20000d00

08015274 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8015274:	b580      	push	{r7, lr}
 8015276:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 8015278:	4b0d      	ldr	r3, [pc, #52]	; (80152b0 <LoRaMacConfirmQueueRemoveFirst+0x3c>)
 801527a:	691b      	ldr	r3, [r3, #16]
 801527c:	7d1b      	ldrb	r3, [r3, #20]
 801527e:	0018      	movs	r0, r3
 8015280:	f7ff ff0e 	bl	80150a0 <IsListEmpty>
 8015284:	1e03      	subs	r3, r0, #0
 8015286:	d001      	beq.n	801528c <LoRaMacConfirmQueueRemoveFirst+0x18>
    {
        return false;
 8015288:	2300      	movs	r3, #0
 801528a:	e00e      	b.n	80152aa <LoRaMacConfirmQueueRemoveFirst+0x36>
    }

    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt--;
 801528c:	4b08      	ldr	r3, [pc, #32]	; (80152b0 <LoRaMacConfirmQueueRemoveFirst+0x3c>)
 801528e:	691b      	ldr	r3, [r3, #16]
 8015290:	7d1a      	ldrb	r2, [r3, #20]
 8015292:	3a01      	subs	r2, #1
 8015294:	b2d2      	uxtb	r2, r2
 8015296:	751a      	strb	r2, [r3, #20]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8015298:	4b05      	ldr	r3, [pc, #20]	; (80152b0 <LoRaMacConfirmQueueRemoveFirst+0x3c>)
 801529a:	685b      	ldr	r3, [r3, #4]
 801529c:	0018      	movs	r0, r3
 801529e:	f7ff fee7 	bl	8015070 <IncreaseBufferPointer>
 80152a2:	0002      	movs	r2, r0
 80152a4:	4b02      	ldr	r3, [pc, #8]	; (80152b0 <LoRaMacConfirmQueueRemoveFirst+0x3c>)
 80152a6:	605a      	str	r2, [r3, #4]

    return true;
 80152a8:	2301      	movs	r3, #1
}
 80152aa:	0018      	movs	r0, r3
 80152ac:	46bd      	mov	sp, r7
 80152ae:	bd80      	pop	{r7, pc}
 80152b0:	20000d00 	.word	0x20000d00

080152b4 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 80152b4:	b580      	push	{r7, lr}
 80152b6:	b084      	sub	sp, #16
 80152b8:	af00      	add	r7, sp, #0
 80152ba:	0002      	movs	r2, r0
 80152bc:	1dfb      	adds	r3, r7, #7
 80152be:	701a      	strb	r2, [r3, #0]
 80152c0:	1dbb      	adds	r3, r7, #6
 80152c2:	1c0a      	adds	r2, r1, #0
 80152c4:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = NULL;
 80152c6:	2300      	movs	r3, #0
 80152c8:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == false )
 80152ca:	4b13      	ldr	r3, [pc, #76]	; (8015318 <LoRaMacConfirmQueueSetStatus+0x64>)
 80152cc:	691b      	ldr	r3, [r3, #16]
 80152ce:	7d1b      	ldrb	r3, [r3, #20]
 80152d0:	0018      	movs	r0, r3
 80152d2:	f7ff fee5 	bl	80150a0 <IsListEmpty>
 80152d6:	0003      	movs	r3, r0
 80152d8:	001a      	movs	r2, r3
 80152da:	2301      	movs	r3, #1
 80152dc:	4053      	eors	r3, r2
 80152de:	b2db      	uxtb	r3, r3
 80152e0:	2b00      	cmp	r3, #0
 80152e2:	d014      	beq.n	801530e <LoRaMacConfirmQueueSetStatus+0x5a>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80152e4:	4b0c      	ldr	r3, [pc, #48]	; (8015318 <LoRaMacConfirmQueueSetStatus+0x64>)
 80152e6:	6859      	ldr	r1, [r3, #4]
 80152e8:	4b0b      	ldr	r3, [pc, #44]	; (8015318 <LoRaMacConfirmQueueSetStatus+0x64>)
 80152ea:	689a      	ldr	r2, [r3, #8]
 80152ec:	1dbb      	adds	r3, r7, #6
 80152ee:	781b      	ldrb	r3, [r3, #0]
 80152f0:	0018      	movs	r0, r3
 80152f2:	f7ff fef7 	bl	80150e4 <GetElement>
 80152f6:	0003      	movs	r3, r0
 80152f8:	60fb      	str	r3, [r7, #12]
        if( element != NULL )
 80152fa:	68fb      	ldr	r3, [r7, #12]
 80152fc:	2b00      	cmp	r3, #0
 80152fe:	d006      	beq.n	801530e <LoRaMacConfirmQueueSetStatus+0x5a>
        {
            element->Status = status;
 8015300:	68fb      	ldr	r3, [r7, #12]
 8015302:	1dfa      	adds	r2, r7, #7
 8015304:	7812      	ldrb	r2, [r2, #0]
 8015306:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8015308:	68fb      	ldr	r3, [r7, #12]
 801530a:	2201      	movs	r2, #1
 801530c:	709a      	strb	r2, [r3, #2]
        }
    }
}
 801530e:	46c0      	nop			; (mov r8, r8)
 8015310:	46bd      	mov	sp, r7
 8015312:	b004      	add	sp, #16
 8015314:	bd80      	pop	{r7, pc}
 8015316:	46c0      	nop			; (mov r8, r8)
 8015318:	20000d00 	.word	0x20000d00

0801531c <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 801531c:	b580      	push	{r7, lr}
 801531e:	b084      	sub	sp, #16
 8015320:	af00      	add	r7, sp, #0
 8015322:	0002      	movs	r2, r0
 8015324:	1dfb      	adds	r3, r7, #7
 8015326:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = NULL;
 8015328:	2300      	movs	r3, #0
 801532a:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == false )
 801532c:	4b11      	ldr	r3, [pc, #68]	; (8015374 <LoRaMacConfirmQueueGetStatus+0x58>)
 801532e:	691b      	ldr	r3, [r3, #16]
 8015330:	7d1b      	ldrb	r3, [r3, #20]
 8015332:	0018      	movs	r0, r3
 8015334:	f7ff feb4 	bl	80150a0 <IsListEmpty>
 8015338:	0003      	movs	r3, r0
 801533a:	001a      	movs	r2, r3
 801533c:	2301      	movs	r3, #1
 801533e:	4053      	eors	r3, r2
 8015340:	b2db      	uxtb	r3, r3
 8015342:	2b00      	cmp	r3, #0
 8015344:	d010      	beq.n	8015368 <LoRaMacConfirmQueueGetStatus+0x4c>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8015346:	4b0b      	ldr	r3, [pc, #44]	; (8015374 <LoRaMacConfirmQueueGetStatus+0x58>)
 8015348:	6859      	ldr	r1, [r3, #4]
 801534a:	4b0a      	ldr	r3, [pc, #40]	; (8015374 <LoRaMacConfirmQueueGetStatus+0x58>)
 801534c:	689a      	ldr	r2, [r3, #8]
 801534e:	1dfb      	adds	r3, r7, #7
 8015350:	781b      	ldrb	r3, [r3, #0]
 8015352:	0018      	movs	r0, r3
 8015354:	f7ff fec6 	bl	80150e4 <GetElement>
 8015358:	0003      	movs	r3, r0
 801535a:	60fb      	str	r3, [r7, #12]
        if( element != NULL )
 801535c:	68fb      	ldr	r3, [r7, #12]
 801535e:	2b00      	cmp	r3, #0
 8015360:	d002      	beq.n	8015368 <LoRaMacConfirmQueueGetStatus+0x4c>
        {
            return element->Status;
 8015362:	68fb      	ldr	r3, [r7, #12]
 8015364:	785b      	ldrb	r3, [r3, #1]
 8015366:	e000      	b.n	801536a <LoRaMacConfirmQueueGetStatus+0x4e>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8015368:	2301      	movs	r3, #1
}
 801536a:	0018      	movs	r0, r3
 801536c:	46bd      	mov	sp, r7
 801536e:	b004      	add	sp, #16
 8015370:	bd80      	pop	{r7, pc}
 8015372:	46c0      	nop			; (mov r8, r8)
 8015374:	20000d00 	.word	0x20000d00

08015378 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8015378:	b580      	push	{r7, lr}
 801537a:	b084      	sub	sp, #16
 801537c:	af00      	add	r7, sp, #0
 801537e:	0002      	movs	r2, r0
 8015380:	1dfb      	adds	r3, r7, #7
 8015382:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8015384:	4b18      	ldr	r3, [pc, #96]	; (80153e8 <LoRaMacConfirmQueueSetStatusCmn+0x70>)
 8015386:	685b      	ldr	r3, [r3, #4]
 8015388:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = status;
 801538a:	4b17      	ldr	r3, [pc, #92]	; (80153e8 <LoRaMacConfirmQueueSetStatusCmn+0x70>)
 801538c:	691b      	ldr	r3, [r3, #16]
 801538e:	1dfa      	adds	r2, r7, #7
 8015390:	7812      	ldrb	r2, [r2, #0]
 8015392:	755a      	strb	r2, [r3, #21]

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == false )
 8015394:	4b14      	ldr	r3, [pc, #80]	; (80153e8 <LoRaMacConfirmQueueSetStatusCmn+0x70>)
 8015396:	691b      	ldr	r3, [r3, #16]
 8015398:	7d1b      	ldrb	r3, [r3, #20]
 801539a:	0018      	movs	r0, r3
 801539c:	f7ff fe80 	bl	80150a0 <IsListEmpty>
 80153a0:	0003      	movs	r3, r0
 80153a2:	001a      	movs	r2, r3
 80153a4:	2301      	movs	r3, #1
 80153a6:	4053      	eors	r3, r2
 80153a8:	b2db      	uxtb	r3, r3
 80153aa:	2b00      	cmp	r3, #0
 80153ac:	d018      	beq.n	80153e0 <LoRaMacConfirmQueueSetStatusCmn+0x68>
    {
        do
        {
            element->Status = status;
 80153ae:	68fb      	ldr	r3, [r7, #12]
 80153b0:	1dfa      	adds	r2, r7, #7
 80153b2:	7812      	ldrb	r2, [r2, #0]
 80153b4:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 80153b6:	68fb      	ldr	r3, [r7, #12]
 80153b8:	78db      	ldrb	r3, [r3, #3]
 80153ba:	2201      	movs	r2, #1
 80153bc:	4053      	eors	r3, r2
 80153be:	b2db      	uxtb	r3, r3
 80153c0:	2b00      	cmp	r3, #0
 80153c2:	d002      	beq.n	80153ca <LoRaMacConfirmQueueSetStatusCmn+0x52>
            {
                element->ReadyToHandle = true;
 80153c4:	68fb      	ldr	r3, [r7, #12]
 80153c6:	2201      	movs	r2, #1
 80153c8:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 80153ca:	68fb      	ldr	r3, [r7, #12]
 80153cc:	0018      	movs	r0, r3
 80153ce:	f7ff fe4f 	bl	8015070 <IncreaseBufferPointer>
 80153d2:	0003      	movs	r3, r0
 80153d4:	60fb      	str	r3, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 80153d6:	4b04      	ldr	r3, [pc, #16]	; (80153e8 <LoRaMacConfirmQueueSetStatusCmn+0x70>)
 80153d8:	689b      	ldr	r3, [r3, #8]
 80153da:	68fa      	ldr	r2, [r7, #12]
 80153dc:	429a      	cmp	r2, r3
 80153de:	d1e6      	bne.n	80153ae <LoRaMacConfirmQueueSetStatusCmn+0x36>
    }
}
 80153e0:	46c0      	nop			; (mov r8, r8)
 80153e2:	46bd      	mov	sp, r7
 80153e4:	b004      	add	sp, #16
 80153e6:	bd80      	pop	{r7, pc}
 80153e8:	20000d00 	.word	0x20000d00

080153ec <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 80153ec:	b580      	push	{r7, lr}
 80153ee:	b082      	sub	sp, #8
 80153f0:	af00      	add	r7, sp, #0
 80153f2:	0002      	movs	r2, r0
 80153f4:	1dfb      	adds	r3, r7, #7
 80153f6:	701a      	strb	r2, [r3, #0]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 80153f8:	4b08      	ldr	r3, [pc, #32]	; (801541c <LoRaMacConfirmQueueIsCmdActive+0x30>)
 80153fa:	6859      	ldr	r1, [r3, #4]
 80153fc:	4b07      	ldr	r3, [pc, #28]	; (801541c <LoRaMacConfirmQueueIsCmdActive+0x30>)
 80153fe:	689a      	ldr	r2, [r3, #8]
 8015400:	1dfb      	adds	r3, r7, #7
 8015402:	781b      	ldrb	r3, [r3, #0]
 8015404:	0018      	movs	r0, r3
 8015406:	f7ff fe6d 	bl	80150e4 <GetElement>
 801540a:	1e03      	subs	r3, r0, #0
 801540c:	d001      	beq.n	8015412 <LoRaMacConfirmQueueIsCmdActive+0x26>
    {
        return true;
 801540e:	2301      	movs	r3, #1
 8015410:	e000      	b.n	8015414 <LoRaMacConfirmQueueIsCmdActive+0x28>
    }
    return false;
 8015412:	2300      	movs	r3, #0
}
 8015414:	0018      	movs	r0, r3
 8015416:	46bd      	mov	sp, r7
 8015418:	b002      	add	sp, #8
 801541a:	bd80      	pop	{r7, pc}
 801541c:	20000d00 	.word	0x20000d00

08015420 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8015420:	b580      	push	{r7, lr}
 8015422:	b084      	sub	sp, #16
 8015424:	af00      	add	r7, sp, #0
 8015426:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 8015428:	4b2d      	ldr	r3, [pc, #180]	; (80154e0 <LoRaMacConfirmQueueHandleCb+0xc0>)
 801542a:	691a      	ldr	r2, [r3, #16]
 801542c:	230e      	movs	r3, #14
 801542e:	18fb      	adds	r3, r7, r3
 8015430:	7d12      	ldrb	r2, [r2, #20]
 8015432:	701a      	strb	r2, [r3, #0]
    bool readyToHandle = false;
 8015434:	230d      	movs	r3, #13
 8015436:	18fb      	adds	r3, r7, r3
 8015438:	2200      	movs	r2, #0
 801543a:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 801543c:	230f      	movs	r3, #15
 801543e:	18fb      	adds	r3, r7, r3
 8015440:	2200      	movs	r2, #0
 8015442:	701a      	strb	r2, [r3, #0]
 8015444:	e03f      	b.n	80154c6 <LoRaMacConfirmQueueHandleCb+0xa6>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8015446:	4b26      	ldr	r3, [pc, #152]	; (80154e0 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8015448:	685b      	ldr	r3, [r3, #4]
 801544a:	781a      	ldrb	r2, [r3, #0]
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8015450:	4b23      	ldr	r3, [pc, #140]	; (80154e0 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8015452:	685b      	ldr	r3, [r3, #4]
 8015454:	785a      	ldrb	r2, [r3, #1]
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 801545a:	4b21      	ldr	r3, [pc, #132]	; (80154e0 <LoRaMacConfirmQueueHandleCb+0xc0>)
 801545c:	685a      	ldr	r2, [r3, #4]
 801545e:	210d      	movs	r1, #13
 8015460:	187b      	adds	r3, r7, r1
 8015462:	7892      	ldrb	r2, [r2, #2]
 8015464:	701a      	strb	r2, [r3, #0]

        if( readyToHandle == true )
 8015466:	187b      	adds	r3, r7, r1
 8015468:	781b      	ldrb	r3, [r3, #0]
 801546a:	2b00      	cmp	r3, #0
 801546c:	d006      	beq.n	801547c <LoRaMacConfirmQueueHandleCb+0x5c>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 801546e:	4b1c      	ldr	r3, [pc, #112]	; (80154e0 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8015470:	681b      	ldr	r3, [r3, #0]
 8015472:	689b      	ldr	r3, [r3, #8]
 8015474:	687a      	ldr	r2, [r7, #4]
 8015476:	0010      	movs	r0, r2
 8015478:	4798      	blx	r3
 801547a:	e00f      	b.n	801549c <LoRaMacConfirmQueueHandleCb+0x7c>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 801547c:	4b18      	ldr	r3, [pc, #96]	; (80154e0 <LoRaMacConfirmQueueHandleCb+0xc0>)
 801547e:	685b      	ldr	r3, [r3, #4]
 8015480:	781a      	ldrb	r2, [r3, #0]
 8015482:	2108      	movs	r1, #8
 8015484:	187b      	adds	r3, r7, r1
 8015486:	701a      	strb	r2, [r3, #0]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8015488:	4b15      	ldr	r3, [pc, #84]	; (80154e0 <LoRaMacConfirmQueueHandleCb+0xc0>)
 801548a:	685b      	ldr	r3, [r3, #4]
 801548c:	785a      	ldrb	r2, [r3, #1]
 801548e:	187b      	adds	r3, r7, r1
 8015490:	705a      	strb	r2, [r3, #1]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8015492:	4b13      	ldr	r3, [pc, #76]	; (80154e0 <LoRaMacConfirmQueueHandleCb+0xc0>)
 8015494:	685b      	ldr	r3, [r3, #4]
 8015496:	78da      	ldrb	r2, [r3, #3]
 8015498:	187b      	adds	r3, r7, r1
 801549a:	70da      	strb	r2, [r3, #3]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 801549c:	f7ff feea 	bl	8015274 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 80154a0:	230d      	movs	r3, #13
 80154a2:	18fb      	adds	r3, r7, r3
 80154a4:	781b      	ldrb	r3, [r3, #0]
 80154a6:	2201      	movs	r2, #1
 80154a8:	4053      	eors	r3, r2
 80154aa:	b2db      	uxtb	r3, r3
 80154ac:	2b00      	cmp	r3, #0
 80154ae:	d004      	beq.n	80154ba <LoRaMacConfirmQueueHandleCb+0x9a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 80154b0:	2308      	movs	r3, #8
 80154b2:	18fb      	adds	r3, r7, r3
 80154b4:	0018      	movs	r0, r3
 80154b6:	f7ff fea7 	bl	8015208 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 80154ba:	210f      	movs	r1, #15
 80154bc:	187b      	adds	r3, r7, r1
 80154be:	781a      	ldrb	r2, [r3, #0]
 80154c0:	187b      	adds	r3, r7, r1
 80154c2:	3201      	adds	r2, #1
 80154c4:	701a      	strb	r2, [r3, #0]
 80154c6:	230f      	movs	r3, #15
 80154c8:	18fa      	adds	r2, r7, r3
 80154ca:	230e      	movs	r3, #14
 80154cc:	18fb      	adds	r3, r7, r3
 80154ce:	7812      	ldrb	r2, [r2, #0]
 80154d0:	781b      	ldrb	r3, [r3, #0]
 80154d2:	429a      	cmp	r2, r3
 80154d4:	d3b7      	bcc.n	8015446 <LoRaMacConfirmQueueHandleCb+0x26>
        }
    }
}
 80154d6:	46c0      	nop			; (mov r8, r8)
 80154d8:	46c0      	nop			; (mov r8, r8)
 80154da:	46bd      	mov	sp, r7
 80154dc:	b004      	add	sp, #16
 80154de:	bd80      	pop	{r7, pc}
 80154e0:	20000d00 	.word	0x20000d00

080154e4 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 80154e4:	b580      	push	{r7, lr}
 80154e6:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 80154e8:	4b02      	ldr	r3, [pc, #8]	; (80154f4 <LoRaMacConfirmQueueGetCnt+0x10>)
 80154ea:	691b      	ldr	r3, [r3, #16]
 80154ec:	7d1b      	ldrb	r3, [r3, #20]
}
 80154ee:	0018      	movs	r0, r3
 80154f0:	46bd      	mov	sp, r7
 80154f2:	bd80      	pop	{r7, pc}
 80154f4:	20000d00 	.word	0x20000d00

080154f8 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 80154f8:	b580      	push	{r7, lr}
 80154fa:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 80154fc:	4b06      	ldr	r3, [pc, #24]	; (8015518 <LoRaMacConfirmQueueIsFull+0x20>)
 80154fe:	691b      	ldr	r3, [r3, #16]
 8015500:	7d1b      	ldrb	r3, [r3, #20]
 8015502:	0018      	movs	r0, r3
 8015504:	f7ff fddd 	bl	80150c2 <IsListFull>
 8015508:	1e03      	subs	r3, r0, #0
 801550a:	d001      	beq.n	8015510 <LoRaMacConfirmQueueIsFull+0x18>
    {
        return true;
 801550c:	2301      	movs	r3, #1
 801550e:	e000      	b.n	8015512 <LoRaMacConfirmQueueIsFull+0x1a>
    }
    else
    {
        return false;
 8015510:	2300      	movs	r3, #0
    }
}
 8015512:	0018      	movs	r0, r3
 8015514:	46bd      	mov	sp, r7
 8015516:	bd80      	pop	{r7, pc}
 8015518:	20000d00 	.word	0x20000d00

0801551c <PayloadEncrypt>:
 * \param[IN]  size             - Size of data
 * \param[IN/OUT]  buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 801551c:	b590      	push	{r4, r7, lr}
 801551e:	b08f      	sub	sp, #60	; 0x3c
 8015520:	af00      	add	r7, sp, #0
 8015522:	60f8      	str	r0, [r7, #12]
 8015524:	0008      	movs	r0, r1
 8015526:	0011      	movs	r1, r2
 8015528:	607b      	str	r3, [r7, #4]
 801552a:	230a      	movs	r3, #10
 801552c:	18fb      	adds	r3, r7, r3
 801552e:	1c02      	adds	r2, r0, #0
 8015530:	801a      	strh	r2, [r3, #0]
 8015532:	2309      	movs	r3, #9
 8015534:	18fb      	adds	r3, r7, r3
 8015536:	1c0a      	adds	r2, r1, #0
 8015538:	701a      	strb	r2, [r3, #0]
    if( buffer == 0 )
 801553a:	68fb      	ldr	r3, [r7, #12]
 801553c:	2b00      	cmp	r3, #0
 801553e:	d101      	bne.n	8015544 <PayloadEncrypt+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015540:	230a      	movs	r3, #10
 8015542:	e0ae      	b.n	80156a2 <PayloadEncrypt+0x186>
    }

    uint8_t bufferIndex = 0;
 8015544:	2337      	movs	r3, #55	; 0x37
 8015546:	18fb      	adds	r3, r7, r3
 8015548:	2200      	movs	r2, #0
 801554a:	701a      	strb	r2, [r3, #0]
    uint16_t ctr = 1;
 801554c:	2334      	movs	r3, #52	; 0x34
 801554e:	18fb      	adds	r3, r7, r3
 8015550:	2201      	movs	r2, #1
 8015552:	801a      	strh	r2, [r3, #0]
    uint8_t sBlock[16] = { 0 };
 8015554:	2320      	movs	r3, #32
 8015556:	18fb      	adds	r3, r7, r3
 8015558:	2200      	movs	r2, #0
 801555a:	601a      	str	r2, [r3, #0]
 801555c:	3304      	adds	r3, #4
 801555e:	220c      	movs	r2, #12
 8015560:	2100      	movs	r1, #0
 8015562:	0018      	movs	r0, r3
 8015564:	f008 fd4b 	bl	801dffe <memset>
    uint8_t aBlock[16] = { 0 };
 8015568:	2410      	movs	r4, #16
 801556a:	193b      	adds	r3, r7, r4
 801556c:	2200      	movs	r2, #0
 801556e:	601a      	str	r2, [r3, #0]
 8015570:	3304      	adds	r3, #4
 8015572:	220c      	movs	r2, #12
 8015574:	2100      	movs	r1, #0
 8015576:	0018      	movs	r0, r3
 8015578:	f008 fd41 	bl	801dffe <memset>

    aBlock[0] = 0x01;
 801557c:	0021      	movs	r1, r4
 801557e:	187b      	adds	r3, r7, r1
 8015580:	2201      	movs	r2, #1
 8015582:	701a      	strb	r2, [r3, #0]

    aBlock[5] = dir;
 8015584:	187a      	adds	r2, r7, r1
 8015586:	2340      	movs	r3, #64	; 0x40
 8015588:	2008      	movs	r0, #8
 801558a:	4684      	mov	ip, r0
 801558c:	44bc      	add	ip, r7
 801558e:	4463      	add	r3, ip
 8015590:	781b      	ldrb	r3, [r3, #0]
 8015592:	7153      	strb	r3, [r2, #5]

    aBlock[6] = address & 0xFF;
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	b2da      	uxtb	r2, r3
 8015598:	187b      	adds	r3, r7, r1
 801559a:	719a      	strb	r2, [r3, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	0a1b      	lsrs	r3, r3, #8
 80155a0:	b2da      	uxtb	r2, r3
 80155a2:	187b      	adds	r3, r7, r1
 80155a4:	71da      	strb	r2, [r3, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	0c1b      	lsrs	r3, r3, #16
 80155aa:	b2da      	uxtb	r2, r3
 80155ac:	187b      	adds	r3, r7, r1
 80155ae:	721a      	strb	r2, [r3, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	0e1b      	lsrs	r3, r3, #24
 80155b4:	b2da      	uxtb	r2, r3
 80155b6:	187b      	adds	r3, r7, r1
 80155b8:	725a      	strb	r2, [r3, #9]

    aBlock[10] = frameCounter & 0xFF;
 80155ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80155bc:	b2da      	uxtb	r2, r3
 80155be:	187b      	adds	r3, r7, r1
 80155c0:	729a      	strb	r2, [r3, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 80155c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80155c4:	0a1b      	lsrs	r3, r3, #8
 80155c6:	b2da      	uxtb	r2, r3
 80155c8:	187b      	adds	r3, r7, r1
 80155ca:	72da      	strb	r2, [r3, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 80155cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80155ce:	0c1b      	lsrs	r3, r3, #16
 80155d0:	b2da      	uxtb	r2, r3
 80155d2:	187b      	adds	r3, r7, r1
 80155d4:	731a      	strb	r2, [r3, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 80155d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80155d8:	0e1b      	lsrs	r3, r3, #24
 80155da:	b2da      	uxtb	r2, r3
 80155dc:	187b      	adds	r3, r7, r1
 80155de:	735a      	strb	r2, [r3, #13]

    while( size > 0 )
 80155e0:	e058      	b.n	8015694 <PayloadEncrypt+0x178>
    {
        aBlock[15] = ctr & 0xFF;
 80155e2:	2134      	movs	r1, #52	; 0x34
 80155e4:	187b      	adds	r3, r7, r1
 80155e6:	881b      	ldrh	r3, [r3, #0]
 80155e8:	b2da      	uxtb	r2, r3
 80155ea:	2010      	movs	r0, #16
 80155ec:	183b      	adds	r3, r7, r0
 80155ee:	73da      	strb	r2, [r3, #15]
        ctr++;
 80155f0:	187b      	adds	r3, r7, r1
 80155f2:	881a      	ldrh	r2, [r3, #0]
 80155f4:	187b      	adds	r3, r7, r1
 80155f6:	3201      	adds	r2, #1
 80155f8:	801a      	strh	r2, [r3, #0]
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 80155fa:	2320      	movs	r3, #32
 80155fc:	18f9      	adds	r1, r7, r3
 80155fe:	2309      	movs	r3, #9
 8015600:	18fb      	adds	r3, r7, r3
 8015602:	781a      	ldrb	r2, [r3, #0]
 8015604:	1838      	adds	r0, r7, r0
 8015606:	000b      	movs	r3, r1
 8015608:	2110      	movs	r1, #16
 801560a:	f7f8 f9f6 	bl	800d9fa <SecureElementAesEncrypt>
 801560e:	1e03      	subs	r3, r0, #0
 8015610:	d001      	beq.n	8015616 <PayloadEncrypt+0xfa>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015612:	230f      	movs	r3, #15
 8015614:	e045      	b.n	80156a2 <PayloadEncrypt+0x186>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8015616:	2333      	movs	r3, #51	; 0x33
 8015618:	18fb      	adds	r3, r7, r3
 801561a:	2200      	movs	r2, #0
 801561c:	701a      	strb	r2, [r3, #0]
 801561e:	e01f      	b.n	8015660 <PayloadEncrypt+0x144>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8015620:	2037      	movs	r0, #55	; 0x37
 8015622:	183b      	adds	r3, r7, r0
 8015624:	781a      	ldrb	r2, [r3, #0]
 8015626:	2433      	movs	r4, #51	; 0x33
 8015628:	193b      	adds	r3, r7, r4
 801562a:	781b      	ldrb	r3, [r3, #0]
 801562c:	18d3      	adds	r3, r2, r3
 801562e:	001a      	movs	r2, r3
 8015630:	68fb      	ldr	r3, [r7, #12]
 8015632:	189b      	adds	r3, r3, r2
 8015634:	7819      	ldrb	r1, [r3, #0]
 8015636:	193b      	adds	r3, r7, r4
 8015638:	781b      	ldrb	r3, [r3, #0]
 801563a:	2220      	movs	r2, #32
 801563c:	18ba      	adds	r2, r7, r2
 801563e:	5cd2      	ldrb	r2, [r2, r3]
 8015640:	183b      	adds	r3, r7, r0
 8015642:	7818      	ldrb	r0, [r3, #0]
 8015644:	193b      	adds	r3, r7, r4
 8015646:	781b      	ldrb	r3, [r3, #0]
 8015648:	18c3      	adds	r3, r0, r3
 801564a:	0018      	movs	r0, r3
 801564c:	68fb      	ldr	r3, [r7, #12]
 801564e:	181b      	adds	r3, r3, r0
 8015650:	404a      	eors	r2, r1
 8015652:	b2d2      	uxtb	r2, r2
 8015654:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8015656:	193b      	adds	r3, r7, r4
 8015658:	781a      	ldrb	r2, [r3, #0]
 801565a:	193b      	adds	r3, r7, r4
 801565c:	3201      	adds	r2, #1
 801565e:	701a      	strb	r2, [r3, #0]
 8015660:	2333      	movs	r3, #51	; 0x33
 8015662:	18fb      	adds	r3, r7, r3
 8015664:	781a      	ldrb	r2, [r3, #0]
 8015666:	230a      	movs	r3, #10
 8015668:	18fb      	adds	r3, r7, r3
 801566a:	881b      	ldrh	r3, [r3, #0]
 801566c:	b219      	sxth	r1, r3
 801566e:	2910      	cmp	r1, #16
 8015670:	dd00      	ble.n	8015674 <PayloadEncrypt+0x158>
 8015672:	2310      	movs	r3, #16
 8015674:	b21b      	sxth	r3, r3
 8015676:	429a      	cmp	r2, r3
 8015678:	dbd2      	blt.n	8015620 <PayloadEncrypt+0x104>
        }
        size -= 16;
 801567a:	210a      	movs	r1, #10
 801567c:	187b      	adds	r3, r7, r1
 801567e:	881b      	ldrh	r3, [r3, #0]
 8015680:	3b10      	subs	r3, #16
 8015682:	b29a      	uxth	r2, r3
 8015684:	187b      	adds	r3, r7, r1
 8015686:	801a      	strh	r2, [r3, #0]
        bufferIndex += 16;
 8015688:	2237      	movs	r2, #55	; 0x37
 801568a:	18bb      	adds	r3, r7, r2
 801568c:	18ba      	adds	r2, r7, r2
 801568e:	7812      	ldrb	r2, [r2, #0]
 8015690:	3210      	adds	r2, #16
 8015692:	701a      	strb	r2, [r3, #0]
    while( size > 0 )
 8015694:	230a      	movs	r3, #10
 8015696:	18fb      	adds	r3, r7, r3
 8015698:	2200      	movs	r2, #0
 801569a:	5e9b      	ldrsh	r3, [r3, r2]
 801569c:	2b00      	cmp	r3, #0
 801569e:	dca0      	bgt.n	80155e2 <PayloadEncrypt+0xc6>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80156a0:	2300      	movs	r3, #0
}
 80156a2:	0018      	movs	r0, r3
 80156a4:	46bd      	mov	sp, r7
 80156a6:	b00f      	add	sp, #60	; 0x3c
 80156a8:	bd90      	pop	{r4, r7, pc}

080156aa <PrepareB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 80156aa:	b5b0      	push	{r4, r5, r7, lr}
 80156ac:	b082      	sub	sp, #8
 80156ae:	af00      	add	r7, sp, #0
 80156b0:	0005      	movs	r5, r0
 80156b2:	000c      	movs	r4, r1
 80156b4:	0010      	movs	r0, r2
 80156b6:	0019      	movs	r1, r3
 80156b8:	1dbb      	adds	r3, r7, #6
 80156ba:	1c2a      	adds	r2, r5, #0
 80156bc:	801a      	strh	r2, [r3, #0]
 80156be:	1d7b      	adds	r3, r7, #5
 80156c0:	1c22      	adds	r2, r4, #0
 80156c2:	701a      	strb	r2, [r3, #0]
 80156c4:	1d3b      	adds	r3, r7, #4
 80156c6:	1c02      	adds	r2, r0, #0
 80156c8:	701a      	strb	r2, [r3, #0]
 80156ca:	1cfb      	adds	r3, r7, #3
 80156cc:	1c0a      	adds	r2, r1, #0
 80156ce:	701a      	strb	r2, [r3, #0]
    if( b0 == 0 )
 80156d0:	6a3b      	ldr	r3, [r7, #32]
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	d101      	bne.n	80156da <PrepareB0+0x30>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80156d6:	230a      	movs	r3, #10
 80156d8:	e050      	b.n	801577c <PrepareB0+0xd2>
    }

    b0[0] = 0x49;
 80156da:	6a3b      	ldr	r3, [r7, #32]
 80156dc:	2249      	movs	r2, #73	; 0x49
 80156de:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
/* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 80156e0:	6a3b      	ldr	r3, [r7, #32]
 80156e2:	3301      	adds	r3, #1
 80156e4:	2200      	movs	r2, #0
 80156e6:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 80156e8:	6a3b      	ldr	r3, [r7, #32]
 80156ea:	3302      	adds	r3, #2
 80156ec:	2200      	movs	r2, #0
 80156ee:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 80156f0:	6a3b      	ldr	r3, [r7, #32]
 80156f2:	3303      	adds	r3, #3
 80156f4:	2200      	movs	r2, #0
 80156f6:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 80156f8:	6a3b      	ldr	r3, [r7, #32]
 80156fa:	3304      	adds	r3, #4
 80156fc:	2200      	movs	r2, #0
 80156fe:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8015700:	6a3b      	ldr	r3, [r7, #32]
 8015702:	3305      	adds	r3, #5
 8015704:	1cfa      	adds	r2, r7, #3
 8015706:	7812      	ldrb	r2, [r2, #0]
 8015708:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 801570a:	6a3b      	ldr	r3, [r7, #32]
 801570c:	3306      	adds	r3, #6
 801570e:	69ba      	ldr	r2, [r7, #24]
 8015710:	b2d2      	uxtb	r2, r2
 8015712:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8015714:	69bb      	ldr	r3, [r7, #24]
 8015716:	0a1a      	lsrs	r2, r3, #8
 8015718:	6a3b      	ldr	r3, [r7, #32]
 801571a:	3307      	adds	r3, #7
 801571c:	b2d2      	uxtb	r2, r2
 801571e:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8015720:	69bb      	ldr	r3, [r7, #24]
 8015722:	0c1a      	lsrs	r2, r3, #16
 8015724:	6a3b      	ldr	r3, [r7, #32]
 8015726:	3308      	adds	r3, #8
 8015728:	b2d2      	uxtb	r2, r2
 801572a:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 801572c:	69bb      	ldr	r3, [r7, #24]
 801572e:	0e1a      	lsrs	r2, r3, #24
 8015730:	6a3b      	ldr	r3, [r7, #32]
 8015732:	3309      	adds	r3, #9
 8015734:	b2d2      	uxtb	r2, r2
 8015736:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8015738:	6a3b      	ldr	r3, [r7, #32]
 801573a:	330a      	adds	r3, #10
 801573c:	69fa      	ldr	r2, [r7, #28]
 801573e:	b2d2      	uxtb	r2, r2
 8015740:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8015742:	69fb      	ldr	r3, [r7, #28]
 8015744:	0a1a      	lsrs	r2, r3, #8
 8015746:	6a3b      	ldr	r3, [r7, #32]
 8015748:	330b      	adds	r3, #11
 801574a:	b2d2      	uxtb	r2, r2
 801574c:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 801574e:	69fb      	ldr	r3, [r7, #28]
 8015750:	0c1a      	lsrs	r2, r3, #16
 8015752:	6a3b      	ldr	r3, [r7, #32]
 8015754:	330c      	adds	r3, #12
 8015756:	b2d2      	uxtb	r2, r2
 8015758:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 801575a:	69fb      	ldr	r3, [r7, #28]
 801575c:	0e1a      	lsrs	r2, r3, #24
 801575e:	6a3b      	ldr	r3, [r7, #32]
 8015760:	330d      	adds	r3, #13
 8015762:	b2d2      	uxtb	r2, r2
 8015764:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8015766:	6a3b      	ldr	r3, [r7, #32]
 8015768:	330e      	adds	r3, #14
 801576a:	2200      	movs	r2, #0
 801576c:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 801576e:	6a3b      	ldr	r3, [r7, #32]
 8015770:	330f      	adds	r3, #15
 8015772:	1dba      	adds	r2, r7, #6
 8015774:	8812      	ldrh	r2, [r2, #0]
 8015776:	b2d2      	uxtb	r2, r2
 8015778:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 801577a:	2300      	movs	r3, #0
}
 801577c:	0018      	movs	r0, r3
 801577e:	46bd      	mov	sp, r7
 8015780:	b002      	add	sp, #8
 8015782:	bdb0      	pop	{r4, r5, r7, pc}

08015784 <ComputeCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8015784:	b5b0      	push	{r4, r5, r7, lr}
 8015786:	b08a      	sub	sp, #40	; 0x28
 8015788:	af04      	add	r7, sp, #16
 801578a:	6078      	str	r0, [r7, #4]
 801578c:	000c      	movs	r4, r1
 801578e:	0010      	movs	r0, r2
 8015790:	0019      	movs	r1, r3
 8015792:	1cbb      	adds	r3, r7, #2
 8015794:	1c22      	adds	r2, r4, #0
 8015796:	801a      	strh	r2, [r3, #0]
 8015798:	1c7b      	adds	r3, r7, #1
 801579a:	1c02      	adds	r2, r0, #0
 801579c:	701a      	strb	r2, [r3, #0]
 801579e:	003b      	movs	r3, r7
 80157a0:	1c0a      	adds	r2, r1, #0
 80157a2:	701a      	strb	r2, [r3, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	d002      	beq.n	80157b0 <ComputeCmacB0+0x2c>
 80157aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80157ac:	2b00      	cmp	r3, #0
 80157ae:	d101      	bne.n	80157b4 <ComputeCmacB0+0x30>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80157b0:	230a      	movs	r3, #10
 80157b2:	e02a      	b.n	801580a <ComputeCmacB0+0x86>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80157b4:	1cbb      	adds	r3, r7, #2
 80157b6:	881a      	ldrh	r2, [r3, #0]
 80157b8:	2380      	movs	r3, #128	; 0x80
 80157ba:	005b      	lsls	r3, r3, #1
 80157bc:	429a      	cmp	r2, r3
 80157be:	d901      	bls.n	80157c4 <ComputeCmacB0+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 80157c0:	230e      	movs	r3, #14
 80157c2:	e022      	b.n	801580a <ComputeCmacB0+0x86>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80157c4:	2328      	movs	r3, #40	; 0x28
 80157c6:	18fb      	adds	r3, r7, r3
 80157c8:	781c      	ldrb	r4, [r3, #0]
 80157ca:	003b      	movs	r3, r7
 80157cc:	781a      	ldrb	r2, [r3, #0]
 80157ce:	1c7b      	adds	r3, r7, #1
 80157d0:	7819      	ldrb	r1, [r3, #0]
 80157d2:	1cbb      	adds	r3, r7, #2
 80157d4:	8818      	ldrh	r0, [r3, #0]
 80157d6:	2508      	movs	r5, #8
 80157d8:	197b      	adds	r3, r7, r5
 80157da:	9302      	str	r3, [sp, #8]
 80157dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157de:	9301      	str	r3, [sp, #4]
 80157e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157e2:	9300      	str	r3, [sp, #0]
 80157e4:	0023      	movs	r3, r4
 80157e6:	f7ff ff60 	bl	80156aa <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 80157ea:	1c7b      	adds	r3, r7, #1
 80157ec:	781c      	ldrb	r4, [r3, #0]
 80157ee:	1cbb      	adds	r3, r7, #2
 80157f0:	881a      	ldrh	r2, [r3, #0]
 80157f2:	6879      	ldr	r1, [r7, #4]
 80157f4:	1978      	adds	r0, r7, r5
 80157f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80157f8:	9300      	str	r3, [sp, #0]
 80157fa:	0023      	movs	r3, r4
 80157fc:	f7f8 f89a 	bl	800d934 <SecureElementComputeAesCmac>
 8015800:	1e03      	subs	r3, r0, #0
 8015802:	d001      	beq.n	8015808 <ComputeCmacB0+0x84>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015804:	230f      	movs	r3, #15
 8015806:	e000      	b.n	801580a <ComputeCmacB0+0x86>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8015808:	2300      	movs	r3, #0
}
 801580a:	0018      	movs	r0, r3
 801580c:	46bd      	mov	sp, r7
 801580e:	b006      	add	sp, #24
 8015810:	bdb0      	pop	{r4, r5, r7, pc}
	...

08015814 <VerifyCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[in]  expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8015814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015816:	b0cd      	sub	sp, #308	; 0x134
 8015818:	af04      	add	r7, sp, #16
 801581a:	6078      	str	r0, [r7, #4]
 801581c:	000c      	movs	r4, r1
 801581e:	0010      	movs	r0, r2
 8015820:	0019      	movs	r1, r3
 8015822:	4b52      	ldr	r3, [pc, #328]	; (801596c <VerifyCmacB0+0x158>)
 8015824:	2290      	movs	r2, #144	; 0x90
 8015826:	0052      	lsls	r2, r2, #1
 8015828:	4694      	mov	ip, r2
 801582a:	44bc      	add	ip, r7
 801582c:	4463      	add	r3, ip
 801582e:	1c22      	adds	r2, r4, #0
 8015830:	801a      	strh	r2, [r3, #0]
 8015832:	4b4f      	ldr	r3, [pc, #316]	; (8015970 <VerifyCmacB0+0x15c>)
 8015834:	2290      	movs	r2, #144	; 0x90
 8015836:	0052      	lsls	r2, r2, #1
 8015838:	4694      	mov	ip, r2
 801583a:	44bc      	add	ip, r7
 801583c:	4463      	add	r3, ip
 801583e:	1c02      	adds	r2, r0, #0
 8015840:	701a      	strb	r2, [r3, #0]
 8015842:	4b4c      	ldr	r3, [pc, #304]	; (8015974 <VerifyCmacB0+0x160>)
 8015844:	2290      	movs	r2, #144	; 0x90
 8015846:	0052      	lsls	r2, r2, #1
 8015848:	4694      	mov	ip, r2
 801584a:	44bc      	add	ip, r7
 801584c:	4463      	add	r3, ip
 801584e:	1c0a      	adds	r2, r1, #0
 8015850:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	2b00      	cmp	r3, #0
 8015856:	d101      	bne.n	801585c <VerifyCmacB0+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015858:	230a      	movs	r3, #10
 801585a:	e083      	b.n	8015964 <VerifyCmacB0+0x150>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 801585c:	4b43      	ldr	r3, [pc, #268]	; (801596c <VerifyCmacB0+0x158>)
 801585e:	2290      	movs	r2, #144	; 0x90
 8015860:	0052      	lsls	r2, r2, #1
 8015862:	4694      	mov	ip, r2
 8015864:	44bc      	add	ip, r7
 8015866:	4463      	add	r3, ip
 8015868:	881a      	ldrh	r2, [r3, #0]
 801586a:	2380      	movs	r3, #128	; 0x80
 801586c:	005b      	lsls	r3, r3, #1
 801586e:	429a      	cmp	r2, r3
 8015870:	d901      	bls.n	8015876 <VerifyCmacB0+0x62>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8015872:	230e      	movs	r3, #14
 8015874:	e076      	b.n	8015964 <VerifyCmacB0+0x150>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8015876:	2388      	movs	r3, #136	; 0x88
 8015878:	005a      	lsls	r2, r3, #1
 801587a:	250c      	movs	r5, #12
 801587c:	197b      	adds	r3, r7, r5
 801587e:	2100      	movs	r1, #0
 8015880:	0018      	movs	r0, r3
 8015882:	f003 fe9d 	bl	80195c0 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8015886:	2398      	movs	r3, #152	; 0x98
 8015888:	005b      	lsls	r3, r3, #1
 801588a:	2208      	movs	r2, #8
 801588c:	4694      	mov	ip, r2
 801588e:	44bc      	add	ip, r7
 8015890:	4463      	add	r3, ip
 8015892:	781c      	ldrb	r4, [r3, #0]
 8015894:	4b37      	ldr	r3, [pc, #220]	; (8015974 <VerifyCmacB0+0x160>)
 8015896:	2290      	movs	r2, #144	; 0x90
 8015898:	0052      	lsls	r2, r2, #1
 801589a:	4694      	mov	ip, r2
 801589c:	44bc      	add	ip, r7
 801589e:	4463      	add	r3, ip
 80158a0:	781a      	ldrb	r2, [r3, #0]
 80158a2:	4b33      	ldr	r3, [pc, #204]	; (8015970 <VerifyCmacB0+0x15c>)
 80158a4:	2190      	movs	r1, #144	; 0x90
 80158a6:	0049      	lsls	r1, r1, #1
 80158a8:	468c      	mov	ip, r1
 80158aa:	44bc      	add	ip, r7
 80158ac:	4463      	add	r3, ip
 80158ae:	7819      	ldrb	r1, [r3, #0]
 80158b0:	4b2e      	ldr	r3, [pc, #184]	; (801596c <VerifyCmacB0+0x158>)
 80158b2:	2090      	movs	r0, #144	; 0x90
 80158b4:	0040      	lsls	r0, r0, #1
 80158b6:	4684      	mov	ip, r0
 80158b8:	44bc      	add	ip, r7
 80158ba:	4463      	add	r3, ip
 80158bc:	8818      	ldrh	r0, [r3, #0]
 80158be:	197b      	adds	r3, r7, r5
 80158c0:	9302      	str	r3, [sp, #8]
 80158c2:	239c      	movs	r3, #156	; 0x9c
 80158c4:	005b      	lsls	r3, r3, #1
 80158c6:	2608      	movs	r6, #8
 80158c8:	46b4      	mov	ip, r6
 80158ca:	44bc      	add	ip, r7
 80158cc:	4463      	add	r3, ip
 80158ce:	681b      	ldr	r3, [r3, #0]
 80158d0:	9301      	str	r3, [sp, #4]
 80158d2:	239a      	movs	r3, #154	; 0x9a
 80158d4:	005b      	lsls	r3, r3, #1
 80158d6:	2608      	movs	r6, #8
 80158d8:	46b4      	mov	ip, r6
 80158da:	44bc      	add	ip, r7
 80158dc:	4463      	add	r3, ip
 80158de:	681b      	ldr	r3, [r3, #0]
 80158e0:	9300      	str	r3, [sp, #0]
 80158e2:	0023      	movs	r3, r4
 80158e4:	f7ff fee1 	bl	80156aa <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 80158e8:	197b      	adds	r3, r7, r5
 80158ea:	3310      	adds	r3, #16
 80158ec:	4a1f      	ldr	r2, [pc, #124]	; (801596c <VerifyCmacB0+0x158>)
 80158ee:	2190      	movs	r1, #144	; 0x90
 80158f0:	0049      	lsls	r1, r1, #1
 80158f2:	468c      	mov	ip, r1
 80158f4:	44bc      	add	ip, r7
 80158f6:	4462      	add	r2, ip
 80158f8:	8812      	ldrh	r2, [r2, #0]
 80158fa:	6879      	ldr	r1, [r7, #4]
 80158fc:	0018      	movs	r0, r3
 80158fe:	f003 fe21 	bl	8019544 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8015902:	2620      	movs	r6, #32
 8015904:	36ff      	adds	r6, #255	; 0xff
 8015906:	19bb      	adds	r3, r7, r6
 8015908:	2206      	movs	r2, #6
 801590a:	701a      	strb	r2, [r3, #0]
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 801590c:	4b17      	ldr	r3, [pc, #92]	; (801596c <VerifyCmacB0+0x158>)
 801590e:	2290      	movs	r2, #144	; 0x90
 8015910:	0052      	lsls	r2, r2, #1
 8015912:	4694      	mov	ip, r2
 8015914:	44bc      	add	ip, r7
 8015916:	4463      	add	r3, ip
 8015918:	881b      	ldrh	r3, [r3, #0]
 801591a:	3310      	adds	r3, #16
 801591c:	b299      	uxth	r1, r3
 801591e:	19bc      	adds	r4, r7, r6
 8015920:	4b13      	ldr	r3, [pc, #76]	; (8015970 <VerifyCmacB0+0x15c>)
 8015922:	2290      	movs	r2, #144	; 0x90
 8015924:	0052      	lsls	r2, r2, #1
 8015926:	4694      	mov	ip, r2
 8015928:	44bc      	add	ip, r7
 801592a:	4463      	add	r3, ip
 801592c:	781b      	ldrb	r3, [r3, #0]
 801592e:	229e      	movs	r2, #158	; 0x9e
 8015930:	0052      	lsls	r2, r2, #1
 8015932:	2008      	movs	r0, #8
 8015934:	4684      	mov	ip, r0
 8015936:	44bc      	add	ip, r7
 8015938:	4462      	add	r2, ip
 801593a:	6812      	ldr	r2, [r2, #0]
 801593c:	1978      	adds	r0, r7, r5
 801593e:	f7f8 f81a 	bl	800d976 <SecureElementVerifyAesCmac>
 8015942:	0003      	movs	r3, r0
 8015944:	7023      	strb	r3, [r4, #0]

    if( retval == SECURE_ELEMENT_SUCCESS )
 8015946:	19bb      	adds	r3, r7, r6
 8015948:	781b      	ldrb	r3, [r3, #0]
 801594a:	2b00      	cmp	r3, #0
 801594c:	d101      	bne.n	8015952 <VerifyCmacB0+0x13e>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 801594e:	2300      	movs	r3, #0
 8015950:	e008      	b.n	8015964 <VerifyCmacB0+0x150>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8015952:	2320      	movs	r3, #32
 8015954:	33ff      	adds	r3, #255	; 0xff
 8015956:	18fb      	adds	r3, r7, r3
 8015958:	781b      	ldrb	r3, [r3, #0]
 801595a:	2b01      	cmp	r3, #1
 801595c:	d101      	bne.n	8015962 <VerifyCmacB0+0x14e>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 801595e:	2301      	movs	r3, #1
 8015960:	e000      	b.n	8015964 <VerifyCmacB0+0x150>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015962:	230f      	movs	r3, #15
}
 8015964:	0018      	movs	r0, r3
 8015966:	46bd      	mov	sp, r7
 8015968:	b049      	add	sp, #292	; 0x124
 801596a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801596c:	fffffee2 	.word	0xfffffee2
 8015970:	fffffee1 	.word	0xfffffee1
 8015974:	fffffee0 	.word	0xfffffee0

08015978 <GetKeyAddrItem>:
 * \param[IN]  addrID          - Address identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8015978:	b580      	push	{r7, lr}
 801597a:	b084      	sub	sp, #16
 801597c:	af00      	add	r7, sp, #0
 801597e:	0002      	movs	r2, r0
 8015980:	6039      	str	r1, [r7, #0]
 8015982:	1dfb      	adds	r3, r7, #7
 8015984:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8015986:	230f      	movs	r3, #15
 8015988:	18fb      	adds	r3, r7, r3
 801598a:	2200      	movs	r2, #0
 801598c:	701a      	strb	r2, [r3, #0]
 801598e:	e018      	b.n	80159c2 <GetKeyAddrItem+0x4a>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8015990:	210f      	movs	r1, #15
 8015992:	187b      	adds	r3, r7, r1
 8015994:	781a      	ldrb	r2, [r3, #0]
 8015996:	4b10      	ldr	r3, [pc, #64]	; (80159d8 <GetKeyAddrItem+0x60>)
 8015998:	0092      	lsls	r2, r2, #2
 801599a:	5cd3      	ldrb	r3, [r2, r3]
 801599c:	1dfa      	adds	r2, r7, #7
 801599e:	7812      	ldrb	r2, [r2, #0]
 80159a0:	429a      	cmp	r2, r3
 80159a2:	d108      	bne.n	80159b6 <GetKeyAddrItem+0x3e>
        {
            *item = &( KeyAddrList[i] );
 80159a4:	187b      	adds	r3, r7, r1
 80159a6:	781b      	ldrb	r3, [r3, #0]
 80159a8:	009a      	lsls	r2, r3, #2
 80159aa:	4b0b      	ldr	r3, [pc, #44]	; (80159d8 <GetKeyAddrItem+0x60>)
 80159ac:	18d2      	adds	r2, r2, r3
 80159ae:	683b      	ldr	r3, [r7, #0]
 80159b0:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 80159b2:	2300      	movs	r3, #0
 80159b4:	e00b      	b.n	80159ce <GetKeyAddrItem+0x56>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 80159b6:	210f      	movs	r1, #15
 80159b8:	187b      	adds	r3, r7, r1
 80159ba:	781a      	ldrb	r2, [r3, #0]
 80159bc:	187b      	adds	r3, r7, r1
 80159be:	3201      	adds	r2, #1
 80159c0:	701a      	strb	r2, [r3, #0]
 80159c2:	230f      	movs	r3, #15
 80159c4:	18fb      	adds	r3, r7, r3
 80159c6:	781b      	ldrb	r3, [r3, #0]
 80159c8:	2b01      	cmp	r3, #1
 80159ca:	d9e1      	bls.n	8015990 <GetKeyAddrItem+0x18>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 80159cc:	230c      	movs	r3, #12
}
 80159ce:	0018      	movs	r0, r3
 80159d0:	46bd      	mov	sp, r7
 80159d2:	b004      	add	sp, #16
 80159d4:	bd80      	pop	{r7, pc}
 80159d6:	46c0      	nop			; (mov r8, r8)
 80159d8:	200001a4 	.word	0x200001a4

080159dc <DeriveSessionKey10x>:
 * \param[IN]  netID          - Network Identifier
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint8_t* joinNonce, uint8_t* netID, uint8_t* devNonce )
{
 80159dc:	b590      	push	{r4, r7, lr}
 80159de:	b089      	sub	sp, #36	; 0x24
 80159e0:	af00      	add	r7, sp, #0
 80159e2:	60b9      	str	r1, [r7, #8]
 80159e4:	607a      	str	r2, [r7, #4]
 80159e6:	603b      	str	r3, [r7, #0]
 80159e8:	230f      	movs	r3, #15
 80159ea:	18fb      	adds	r3, r7, r3
 80159ec:	1c02      	adds	r2, r0, #0
 80159ee:	701a      	strb	r2, [r3, #0]
    if( ( joinNonce == 0 ) || ( netID == 0 ) || ( devNonce == 0 ) )
 80159f0:	68bb      	ldr	r3, [r7, #8]
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	d005      	beq.n	8015a02 <DeriveSessionKey10x+0x26>
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	2b00      	cmp	r3, #0
 80159fa:	d002      	beq.n	8015a02 <DeriveSessionKey10x+0x26>
 80159fc:	683b      	ldr	r3, [r7, #0]
 80159fe:	2b00      	cmp	r3, #0
 8015a00:	d101      	bne.n	8015a06 <DeriveSessionKey10x+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015a02:	230a      	movs	r3, #10
 8015a04:	e043      	b.n	8015a8e <DeriveSessionKey10x+0xb2>
    }

    uint8_t compBase[16] = { 0 };
 8015a06:	2310      	movs	r3, #16
 8015a08:	18fb      	adds	r3, r7, r3
 8015a0a:	2200      	movs	r2, #0
 8015a0c:	601a      	str	r2, [r3, #0]
 8015a0e:	3304      	adds	r3, #4
 8015a10:	220c      	movs	r2, #12
 8015a12:	2100      	movs	r1, #0
 8015a14:	0018      	movs	r0, r3
 8015a16:	f008 faf2 	bl	801dffe <memset>

    switch( keyID )
 8015a1a:	230f      	movs	r3, #15
 8015a1c:	18fb      	adds	r3, r7, r3
 8015a1e:	781b      	ldrb	r3, [r3, #0]
 8015a20:	2b02      	cmp	r3, #2
 8015a22:	d002      	beq.n	8015a2a <DeriveSessionKey10x+0x4e>
 8015a24:	2b03      	cmp	r3, #3
 8015a26:	d005      	beq.n	8015a34 <DeriveSessionKey10x+0x58>
 8015a28:	e009      	b.n	8015a3e <DeriveSessionKey10x+0x62>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 8015a2a:	2310      	movs	r3, #16
 8015a2c:	18fb      	adds	r3, r7, r3
 8015a2e:	2201      	movs	r2, #1
 8015a30:	701a      	strb	r2, [r3, #0]
            break;
 8015a32:	e006      	b.n	8015a42 <DeriveSessionKey10x+0x66>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8015a34:	2310      	movs	r3, #16
 8015a36:	18fb      	adds	r3, r7, r3
 8015a38:	2202      	movs	r2, #2
 8015a3a:	701a      	strb	r2, [r3, #0]
            break;
 8015a3c:	e001      	b.n	8015a42 <DeriveSessionKey10x+0x66>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8015a3e:	230b      	movs	r3, #11
 8015a40:	e025      	b.n	8015a8e <DeriveSessionKey10x+0xb2>
    }

    memcpy1( compBase + 1, joinNonce, 3 );
 8015a42:	2410      	movs	r4, #16
 8015a44:	193b      	adds	r3, r7, r4
 8015a46:	3301      	adds	r3, #1
 8015a48:	68b9      	ldr	r1, [r7, #8]
 8015a4a:	2203      	movs	r2, #3
 8015a4c:	0018      	movs	r0, r3
 8015a4e:	f003 fd79 	bl	8019544 <memcpy1>
    memcpy1( compBase + 4, netID, 3 );
 8015a52:	193b      	adds	r3, r7, r4
 8015a54:	3304      	adds	r3, #4
 8015a56:	6879      	ldr	r1, [r7, #4]
 8015a58:	2203      	movs	r2, #3
 8015a5a:	0018      	movs	r0, r3
 8015a5c:	f003 fd72 	bl	8019544 <memcpy1>
    memcpy1( compBase + 7, devNonce, 2 );
 8015a60:	193b      	adds	r3, r7, r4
 8015a62:	3307      	adds	r3, #7
 8015a64:	6839      	ldr	r1, [r7, #0]
 8015a66:	2202      	movs	r2, #2
 8015a68:	0018      	movs	r0, r3
 8015a6a:	f003 fd6b 	bl	8019544 <memcpy1>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8015a6e:	4b0a      	ldr	r3, [pc, #40]	; (8015a98 <DeriveSessionKey10x+0xbc>)
 8015a70:	681b      	ldr	r3, [r3, #0]
 8015a72:	220f      	movs	r2, #15
 8015a74:	18ba      	adds	r2, r7, r2
 8015a76:	7812      	ldrb	r2, [r2, #0]
 8015a78:	1939      	adds	r1, r7, r4
 8015a7a:	6818      	ldr	r0, [r3, #0]
 8015a7c:	0013      	movs	r3, r2
 8015a7e:	2201      	movs	r2, #1
 8015a80:	f7f8 f82c 	bl	800dadc <SecureElementDeriveAndStoreKey>
 8015a84:	1e03      	subs	r3, r0, #0
 8015a86:	d001      	beq.n	8015a8c <DeriveSessionKey10x+0xb0>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015a88:	230f      	movs	r3, #15
 8015a8a:	e000      	b.n	8015a8e <DeriveSessionKey10x+0xb2>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015a8c:	2300      	movs	r3, #0
}
 8015a8e:	0018      	movs	r0, r3
 8015a90:	46bd      	mov	sp, r7
 8015a92:	b009      	add	sp, #36	; 0x24
 8015a94:	bd90      	pop	{r4, r7, pc}
 8015a96:	46c0      	nop			; (mov r8, r8)
 8015a98:	20000d14 	.word	0x20000d14

08015a9c <GetLastFcntDown>:
 * \param[IN]     lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8015a9c:	b580      	push	{r7, lr}
 8015a9e:	b082      	sub	sp, #8
 8015aa0:	af00      	add	r7, sp, #0
 8015aa2:	0002      	movs	r2, r0
 8015aa4:	6039      	str	r1, [r7, #0]
 8015aa6:	1dfb      	adds	r3, r7, #7
 8015aa8:	701a      	strb	r2, [r3, #0]
    if( lastDown == NULL )
 8015aaa:	683b      	ldr	r3, [r7, #0]
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	d101      	bne.n	8015ab4 <GetLastFcntDown+0x18>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015ab0:	230a      	movs	r3, #10
 8015ab2:	e039      	b.n	8015b28 <GetLastFcntDown+0x8c>
    }
    switch( fCntID )
 8015ab4:	1dfb      	adds	r3, r7, #7
 8015ab6:	781b      	ldrb	r3, [r3, #0]
 8015ab8:	2b04      	cmp	r3, #4
 8015aba:	d02c      	beq.n	8015b16 <GetLastFcntDown+0x7a>
 8015abc:	dc31      	bgt.n	8015b22 <GetLastFcntDown+0x86>
 8015abe:	2b03      	cmp	r3, #3
 8015ac0:	d01d      	beq.n	8015afe <GetLastFcntDown+0x62>
 8015ac2:	dc2e      	bgt.n	8015b22 <GetLastFcntDown+0x86>
 8015ac4:	2b01      	cmp	r3, #1
 8015ac6:	d002      	beq.n	8015ace <GetLastFcntDown+0x32>
 8015ac8:	2b02      	cmp	r3, #2
 8015aca:	d00c      	beq.n	8015ae6 <GetLastFcntDown+0x4a>
 8015acc:	e029      	b.n	8015b22 <GetLastFcntDown+0x86>
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoCtx.NvmCtx->FCntList.NFCntDown;
 8015ace:	4b18      	ldr	r3, [pc, #96]	; (8015b30 <GetLastFcntDown+0x94>)
 8015ad0:	681b      	ldr	r3, [r3, #0]
 8015ad2:	691a      	ldr	r2, [r3, #16]
 8015ad4:	683b      	ldr	r3, [r7, #0]
 8015ad6:	601a      	str	r2, [r3, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.NFCntDown;
 8015ad8:	4b15      	ldr	r3, [pc, #84]	; (8015b30 <GetLastFcntDown+0x94>)
 8015ada:	681a      	ldr	r2, [r3, #0]
 8015adc:	4b14      	ldr	r3, [pc, #80]	; (8015b30 <GetLastFcntDown+0x94>)
 8015ade:	681b      	ldr	r3, [r3, #0]
 8015ae0:	3210      	adds	r2, #16
 8015ae2:	621a      	str	r2, [r3, #32]
            break;
 8015ae4:	e01f      	b.n	8015b26 <GetLastFcntDown+0x8a>
        case A_FCNT_DOWN:
            *lastDown = CryptoCtx.NvmCtx->FCntList.AFCntDown;
 8015ae6:	4b12      	ldr	r3, [pc, #72]	; (8015b30 <GetLastFcntDown+0x94>)
 8015ae8:	681b      	ldr	r3, [r3, #0]
 8015aea:	695a      	ldr	r2, [r3, #20]
 8015aec:	683b      	ldr	r3, [r7, #0]
 8015aee:	601a      	str	r2, [r3, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.AFCntDown;
 8015af0:	4b0f      	ldr	r3, [pc, #60]	; (8015b30 <GetLastFcntDown+0x94>)
 8015af2:	681a      	ldr	r2, [r3, #0]
 8015af4:	4b0e      	ldr	r3, [pc, #56]	; (8015b30 <GetLastFcntDown+0x94>)
 8015af6:	681b      	ldr	r3, [r3, #0]
 8015af8:	3214      	adds	r2, #20
 8015afa:	621a      	str	r2, [r3, #32]
            break;
 8015afc:	e013      	b.n	8015b26 <GetLastFcntDown+0x8a>
        case FCNT_DOWN:
            *lastDown = CryptoCtx.NvmCtx->FCntList.FCntDown;
 8015afe:	4b0c      	ldr	r3, [pc, #48]	; (8015b30 <GetLastFcntDown+0x94>)
 8015b00:	681b      	ldr	r3, [r3, #0]
 8015b02:	699a      	ldr	r2, [r3, #24]
 8015b04:	683b      	ldr	r3, [r7, #0]
 8015b06:	601a      	str	r2, [r3, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 8015b08:	4b09      	ldr	r3, [pc, #36]	; (8015b30 <GetLastFcntDown+0x94>)
 8015b0a:	681a      	ldr	r2, [r3, #0]
 8015b0c:	4b08      	ldr	r3, [pc, #32]	; (8015b30 <GetLastFcntDown+0x94>)
 8015b0e:	681b      	ldr	r3, [r3, #0]
 8015b10:	3218      	adds	r2, #24
 8015b12:	621a      	str	r2, [r3, #32]
            break;
 8015b14:	e007      	b.n	8015b26 <GetLastFcntDown+0x8a>
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 8015b16:	4b06      	ldr	r3, [pc, #24]	; (8015b30 <GetLastFcntDown+0x94>)
 8015b18:	681b      	ldr	r3, [r3, #0]
 8015b1a:	69da      	ldr	r2, [r3, #28]
 8015b1c:	683b      	ldr	r3, [r7, #0]
 8015b1e:	601a      	str	r2, [r3, #0]
            break;
 8015b20:	e001      	b.n	8015b26 <GetLastFcntDown+0x8a>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 1 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8015b22:	2305      	movs	r3, #5
 8015b24:	e000      	b.n	8015b28 <GetLastFcntDown+0x8c>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8015b26:	2300      	movs	r3, #0
}
 8015b28:	0018      	movs	r0, r3
 8015b2a:	46bd      	mov	sp, r7
 8015b2c:	b002      	add	sp, #8
 8015b2e:	bd80      	pop	{r7, pc}
 8015b30:	20000d14 	.word	0x20000d14

08015b34 <CheckFCntDown>:
 * \param[IN]     currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8015b34:	b580      	push	{r7, lr}
 8015b36:	b084      	sub	sp, #16
 8015b38:	af00      	add	r7, sp, #0
 8015b3a:	0002      	movs	r2, r0
 8015b3c:	6039      	str	r1, [r7, #0]
 8015b3e:	1dfb      	adds	r3, r7, #7
 8015b40:	701a      	strb	r2, [r3, #0]
    uint32_t lastDown = 0;
 8015b42:	2300      	movs	r3, #0
 8015b44:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8015b46:	230c      	movs	r3, #12
 8015b48:	18fa      	adds	r2, r7, r3
 8015b4a:	1dfb      	adds	r3, r7, #7
 8015b4c:	781b      	ldrb	r3, [r3, #0]
 8015b4e:	0011      	movs	r1, r2
 8015b50:	0018      	movs	r0, r3
 8015b52:	f7ff ffa3 	bl	8015a9c <GetLastFcntDown>
 8015b56:	1e03      	subs	r3, r0, #0
 8015b58:	d001      	beq.n	8015b5e <CheckFCntDown+0x2a>
    {
        return false;
 8015b5a:	2300      	movs	r3, #0
 8015b5c:	e009      	b.n	8015b72 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8015b5e:	68fb      	ldr	r3, [r7, #12]
 8015b60:	683a      	ldr	r2, [r7, #0]
 8015b62:	429a      	cmp	r2, r3
 8015b64:	d802      	bhi.n	8015b6c <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 8015b66:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8015b68:	3301      	adds	r3, #1
 8015b6a:	d101      	bne.n	8015b70 <CheckFCntDown+0x3c>
    {
        return true;
 8015b6c:	2301      	movs	r3, #1
 8015b6e:	e000      	b.n	8015b72 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8015b70:	2300      	movs	r3, #0
    }
}
 8015b72:	0018      	movs	r0, r3
 8015b74:	46bd      	mov	sp, r7
 8015b76:	b004      	add	sp, #16
 8015b78:	bd80      	pop	{r7, pc}
	...

08015b7c <UpdateFCntDown>:
 * \param[IN]     currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8015b7c:	b580      	push	{r7, lr}
 8015b7e:	b082      	sub	sp, #8
 8015b80:	af00      	add	r7, sp, #0
 8015b82:	0002      	movs	r2, r0
 8015b84:	6039      	str	r1, [r7, #0]
 8015b86:	1dfb      	adds	r3, r7, #7
 8015b88:	701a      	strb	r2, [r3, #0]
    switch( fCntID )
 8015b8a:	1dfb      	adds	r3, r7, #7
 8015b8c:	781b      	ldrb	r3, [r3, #0]
 8015b8e:	2b04      	cmp	r3, #4
 8015b90:	d017      	beq.n	8015bc2 <UpdateFCntDown+0x46>
 8015b92:	dc1b      	bgt.n	8015bcc <UpdateFCntDown+0x50>
 8015b94:	2b03      	cmp	r3, #3
 8015b96:	d00f      	beq.n	8015bb8 <UpdateFCntDown+0x3c>
 8015b98:	dc18      	bgt.n	8015bcc <UpdateFCntDown+0x50>
 8015b9a:	2b01      	cmp	r3, #1
 8015b9c:	d002      	beq.n	8015ba4 <UpdateFCntDown+0x28>
 8015b9e:	2b02      	cmp	r3, #2
 8015ba0:	d005      	beq.n	8015bae <UpdateFCntDown+0x32>
        case MC_FCNT_DOWN_3:
            CryptoCtx.NvmCtx->FCntList.McFCntDown3 = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 1 */
        default:
            break;
 8015ba2:	e013      	b.n	8015bcc <UpdateFCntDown+0x50>
            CryptoCtx.NvmCtx->FCntList.NFCntDown = currentDown;
 8015ba4:	4b0d      	ldr	r3, [pc, #52]	; (8015bdc <UpdateFCntDown+0x60>)
 8015ba6:	681b      	ldr	r3, [r3, #0]
 8015ba8:	683a      	ldr	r2, [r7, #0]
 8015baa:	611a      	str	r2, [r3, #16]
            break;
 8015bac:	e00f      	b.n	8015bce <UpdateFCntDown+0x52>
            CryptoCtx.NvmCtx->FCntList.AFCntDown = currentDown;
 8015bae:	4b0b      	ldr	r3, [pc, #44]	; (8015bdc <UpdateFCntDown+0x60>)
 8015bb0:	681b      	ldr	r3, [r3, #0]
 8015bb2:	683a      	ldr	r2, [r7, #0]
 8015bb4:	615a      	str	r2, [r3, #20]
            break;
 8015bb6:	e00a      	b.n	8015bce <UpdateFCntDown+0x52>
            CryptoCtx.NvmCtx->FCntList.FCntDown = currentDown;
 8015bb8:	4b08      	ldr	r3, [pc, #32]	; (8015bdc <UpdateFCntDown+0x60>)
 8015bba:	681b      	ldr	r3, [r3, #0]
 8015bbc:	683a      	ldr	r2, [r7, #0]
 8015bbe:	619a      	str	r2, [r3, #24]
            break;
 8015bc0:	e005      	b.n	8015bce <UpdateFCntDown+0x52>
            CryptoCtx.NvmCtx->FCntList.McFCntDown0 = currentDown;
 8015bc2:	4b06      	ldr	r3, [pc, #24]	; (8015bdc <UpdateFCntDown+0x60>)
 8015bc4:	681b      	ldr	r3, [r3, #0]
 8015bc6:	683a      	ldr	r2, [r7, #0]
 8015bc8:	61da      	str	r2, [r3, #28]
            break;
 8015bca:	e000      	b.n	8015bce <UpdateFCntDown+0x52>
            break;
 8015bcc:	46c0      	nop			; (mov r8, r8)
    }
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8015bce:	4b03      	ldr	r3, [pc, #12]	; (8015bdc <UpdateFCntDown+0x60>)
 8015bd0:	685b      	ldr	r3, [r3, #4]
 8015bd2:	4798      	blx	r3
}
 8015bd4:	46c0      	nop			; (mov r8, r8)
 8015bd6:	46bd      	mov	sp, r7
 8015bd8:	b002      	add	sp, #8
 8015bda:	bd80      	pop	{r7, pc}
 8015bdc:	20000d14 	.word	0x20000d14

08015be0 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8015be0:	b580      	push	{r7, lr}
 8015be2:	af00      	add	r7, sp, #0

    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 8015be4:	4b11      	ldr	r3, [pc, #68]	; (8015c2c <ResetFCnts+0x4c>)
 8015be6:	681b      	ldr	r3, [r3, #0]
 8015be8:	2200      	movs	r2, #0
 8015bea:	60da      	str	r2, [r3, #12]
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8015bec:	4b0f      	ldr	r3, [pc, #60]	; (8015c2c <ResetFCnts+0x4c>)
 8015bee:	681b      	ldr	r3, [r3, #0]
 8015bf0:	2201      	movs	r2, #1
 8015bf2:	4252      	negs	r2, r2
 8015bf4:	611a      	str	r2, [r3, #16]
    CryptoCtx.NvmCtx->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8015bf6:	4b0d      	ldr	r3, [pc, #52]	; (8015c2c <ResetFCnts+0x4c>)
 8015bf8:	681b      	ldr	r3, [r3, #0]
 8015bfa:	2201      	movs	r2, #1
 8015bfc:	4252      	negs	r2, r2
 8015bfe:	615a      	str	r2, [r3, #20]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8015c00:	4b0a      	ldr	r3, [pc, #40]	; (8015c2c <ResetFCnts+0x4c>)
 8015c02:	681b      	ldr	r3, [r3, #0]
 8015c04:	2201      	movs	r2, #1
 8015c06:	4252      	negs	r2, r2
 8015c08:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 8015c0a:	4b08      	ldr	r3, [pc, #32]	; (8015c2c <ResetFCnts+0x4c>)
 8015c0c:	681a      	ldr	r2, [r3, #0]
 8015c0e:	4b07      	ldr	r3, [pc, #28]	; (8015c2c <ResetFCnts+0x4c>)
 8015c10:	681b      	ldr	r3, [r3, #0]
 8015c12:	3218      	adds	r2, #24
 8015c14:	621a      	str	r2, [r3, #32]

    CryptoCtx.NvmCtx->FCntList.McFCntDown0 = FCNT_DOWN_INITAL_VALUE;
 8015c16:	4b05      	ldr	r3, [pc, #20]	; (8015c2c <ResetFCnts+0x4c>)
 8015c18:	681b      	ldr	r3, [r3, #0]
 8015c1a:	2201      	movs	r2, #1
 8015c1c:	4252      	negs	r2, r2
 8015c1e:	61da      	str	r2, [r3, #28]
#if ( LORAMAC_MAX_MC_CTX > 1 )
    CryptoCtx.NvmCtx->FCntList.McFCntDown1 = FCNT_DOWN_INITAL_VALUE;
    CryptoCtx.NvmCtx->FCntList.McFCntDown2 = FCNT_DOWN_INITAL_VALUE;
    CryptoCtx.NvmCtx->FCntList.McFCntDown3 = FCNT_DOWN_INITAL_VALUE;
#endif /* LORAMAC_MAX_MC_CTX > 1 */
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8015c20:	4b02      	ldr	r3, [pc, #8]	; (8015c2c <ResetFCnts+0x4c>)
 8015c22:	685b      	ldr	r3, [r3, #4]
 8015c24:	4798      	blx	r3
}
 8015c26:	46c0      	nop			; (mov r8, r8)
 8015c28:	46bd      	mov	sp, r7
 8015c2a:	bd80      	pop	{r7, pc}
 8015c2c:	20000d14 	.word	0x20000d14

08015c30 <DummyCB>:

/*
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB( void )
{
 8015c30:	b580      	push	{r7, lr}
 8015c32:	af00      	add	r7, sp, #0
    return;
 8015c34:	46c0      	nop			; (mov r8, r8)
}
 8015c36:	46bd      	mov	sp, r7
 8015c38:	bd80      	pop	{r7, pc}
	...

08015c3c <LoRaMacCryptoInit>:
/*
 *  API functions
 */

LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmEvent cryptoNvmCtxChanged )
{
 8015c3c:	b580      	push	{r7, lr}
 8015c3e:	b082      	sub	sp, #8
 8015c40:	af00      	add	r7, sp, #0
 8015c42:	6078      	str	r0, [r7, #4]
    // Assign non volatile context
    CryptoCtx.NvmCtx = &NvmCryptoCtx;
 8015c44:	4b15      	ldr	r3, [pc, #84]	; (8015c9c <LoRaMacCryptoInit+0x60>)
 8015c46:	4a16      	ldr	r2, [pc, #88]	; (8015ca0 <LoRaMacCryptoInit+0x64>)
 8015c48:	601a      	str	r2, [r3, #0]

    // Assign callback
    if( cryptoNvmCtxChanged != 0 )
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	2b00      	cmp	r3, #0
 8015c4e:	d003      	beq.n	8015c58 <LoRaMacCryptoInit+0x1c>
    {
        CryptoCtx.EventCryptoNvmCtxChanged = cryptoNvmCtxChanged;
 8015c50:	4b12      	ldr	r3, [pc, #72]	; (8015c9c <LoRaMacCryptoInit+0x60>)
 8015c52:	687a      	ldr	r2, [r7, #4]
 8015c54:	605a      	str	r2, [r3, #4]
 8015c56:	e002      	b.n	8015c5e <LoRaMacCryptoInit+0x22>
    }
    else
    {
        CryptoCtx.EventCryptoNvmCtxChanged = DummyCB;
 8015c58:	4b10      	ldr	r3, [pc, #64]	; (8015c9c <LoRaMacCryptoInit+0x60>)
 8015c5a:	4a12      	ldr	r2, [pc, #72]	; (8015ca4 <LoRaMacCryptoInit+0x68>)
 8015c5c:	605a      	str	r2, [r3, #4]
    }

    // Initialize with default
    memset1( ( uint8_t* )CryptoCtx.NvmCtx, 0, sizeof( LoRaMacCryptoNvmCtx_t ) );
 8015c5e:	4b0f      	ldr	r3, [pc, #60]	; (8015c9c <LoRaMacCryptoInit+0x60>)
 8015c60:	681b      	ldr	r3, [r3, #0]
 8015c62:	2224      	movs	r2, #36	; 0x24
 8015c64:	2100      	movs	r1, #0
 8015c66:	0018      	movs	r0, r3
 8015c68:	f003 fcaa 	bl	80195c0 <memset1>

    // Set default LoRaWAN version
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Major = 1;
 8015c6c:	4b0b      	ldr	r3, [pc, #44]	; (8015c9c <LoRaMacCryptoInit+0x60>)
 8015c6e:	681b      	ldr	r3, [r3, #0]
 8015c70:	2201      	movs	r2, #1
 8015c72:	70da      	strb	r2, [r3, #3]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = 1;
 8015c74:	4b09      	ldr	r3, [pc, #36]	; (8015c9c <LoRaMacCryptoInit+0x60>)
 8015c76:	681b      	ldr	r3, [r3, #0]
 8015c78:	2201      	movs	r2, #1
 8015c7a:	709a      	strb	r2, [r3, #2]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Patch = 1;
 8015c7c:	4b07      	ldr	r3, [pc, #28]	; (8015c9c <LoRaMacCryptoInit+0x60>)
 8015c7e:	681b      	ldr	r3, [r3, #0]
 8015c80:	2201      	movs	r2, #1
 8015c82:	705a      	strb	r2, [r3, #1]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Revision = 0;
 8015c84:	4b05      	ldr	r3, [pc, #20]	; (8015c9c <LoRaMacCryptoInit+0x60>)
 8015c86:	681b      	ldr	r3, [r3, #0]
 8015c88:	2200      	movs	r2, #0
 8015c8a:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8015c8c:	f7ff ffa8 	bl	8015be0 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8015c90:	2300      	movs	r3, #0
}
 8015c92:	0018      	movs	r0, r3
 8015c94:	46bd      	mov	sp, r7
 8015c96:	b002      	add	sp, #8
 8015c98:	bd80      	pop	{r7, pc}
 8015c9a:	46c0      	nop			; (mov r8, r8)
 8015c9c:	20000d14 	.word	0x20000d14
 8015ca0:	20000d1c 	.word	0x20000d1c
 8015ca4:	08015c31 	.word	0x08015c31

08015ca8 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8015ca8:	b580      	push	{r7, lr}
 8015caa:	b082      	sub	sp, #8
 8015cac:	af00      	add	r7, sp, #0
 8015cae:	6078      	str	r0, [r7, #4]
    CryptoCtx.NvmCtx->LrWanVersion = version;
 8015cb0:	4b04      	ldr	r3, [pc, #16]	; (8015cc4 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8015cb2:	681b      	ldr	r3, [r3, #0]
 8015cb4:	687a      	ldr	r2, [r7, #4]
 8015cb6:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8015cb8:	2300      	movs	r3, #0
}
 8015cba:	0018      	movs	r0, r3
 8015cbc:	46bd      	mov	sp, r7
 8015cbe:	b002      	add	sp, #8
 8015cc0:	bd80      	pop	{r7, pc}
 8015cc2:	46c0      	nop			; (mov r8, r8)
 8015cc4:	20000d14 	.word	0x20000d14

08015cc8 <LoRaMacCryptoRestoreNvmCtx>:

LoRaMacCryptoStatus_t LoRaMacCryptoRestoreNvmCtx( void* cryptoNvmCtx )
{
 8015cc8:	b580      	push	{r7, lr}
 8015cca:	b082      	sub	sp, #8
 8015ccc:	af00      	add	r7, sp, #0
 8015cce:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( cryptoNvmCtx != 0 )
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	d007      	beq.n	8015ce6 <LoRaMacCryptoRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* )&NvmCryptoCtx, ( uint8_t* )cryptoNvmCtx, CRYPTO_NVM_CTX_SIZE );
 8015cd6:	6879      	ldr	r1, [r7, #4]
 8015cd8:	4b05      	ldr	r3, [pc, #20]	; (8015cf0 <LoRaMacCryptoRestoreNvmCtx+0x28>)
 8015cda:	2224      	movs	r2, #36	; 0x24
 8015cdc:	0018      	movs	r0, r3
 8015cde:	f003 fc31 	bl	8019544 <memcpy1>
        return LORAMAC_CRYPTO_SUCCESS;
 8015ce2:	2300      	movs	r3, #0
 8015ce4:	e000      	b.n	8015ce8 <LoRaMacCryptoRestoreNvmCtx+0x20>
    }
    else
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015ce6:	230a      	movs	r3, #10
    }
}
 8015ce8:	0018      	movs	r0, r3
 8015cea:	46bd      	mov	sp, r7
 8015cec:	b002      	add	sp, #8
 8015cee:	bd80      	pop	{r7, pc}
 8015cf0:	20000d1c 	.word	0x20000d1c

08015cf4 <LoRaMacCryptoGetNvmCtx>:

void* LoRaMacCryptoGetNvmCtx( size_t* cryptoNvmCtxSize )
{
 8015cf4:	b580      	push	{r7, lr}
 8015cf6:	b082      	sub	sp, #8
 8015cf8:	af00      	add	r7, sp, #0
 8015cfa:	6078      	str	r0, [r7, #4]
    *cryptoNvmCtxSize = CRYPTO_NVM_CTX_SIZE;
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	2224      	movs	r2, #36	; 0x24
 8015d00:	601a      	str	r2, [r3, #0]
    return &NvmCryptoCtx;
 8015d02:	4b02      	ldr	r3, [pc, #8]	; (8015d0c <LoRaMacCryptoGetNvmCtx+0x18>)
}
 8015d04:	0018      	movs	r0, r3
 8015d06:	46bd      	mov	sp, r7
 8015d08:	b002      	add	sp, #8
 8015d0a:	bd80      	pop	{r7, pc}
 8015d0c:	20000d1c 	.word	0x20000d1c

08015d10 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8015d10:	b580      	push	{r7, lr}
 8015d12:	b082      	sub	sp, #8
 8015d14:	af00      	add	r7, sp, #0
 8015d16:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	2b00      	cmp	r3, #0
 8015d1c:	d101      	bne.n	8015d22 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015d1e:	230a      	movs	r3, #10
 8015d20:	e006      	b.n	8015d30 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoCtx.NvmCtx->FCntList.FCntUp + 1;
 8015d22:	4b05      	ldr	r3, [pc, #20]	; (8015d38 <LoRaMacCryptoGetFCntUp+0x28>)
 8015d24:	681b      	ldr	r3, [r3, #0]
 8015d26:	68db      	ldr	r3, [r3, #12]
 8015d28:	1c5a      	adds	r2, r3, #1
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8015d2e:	2300      	movs	r3, #0
}
 8015d30:	0018      	movs	r0, r3
 8015d32:	46bd      	mov	sp, r7
 8015d34:	b002      	add	sp, #8
 8015d36:	bd80      	pop	{r7, pc}
 8015d38:	20000d14 	.word	0x20000d14

08015d3c <LoRaMacCryptoGetFCntDown>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 8015d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d3e:	b08d      	sub	sp, #52	; 0x34
 8015d40:	af00      	add	r7, sp, #0
 8015d42:	61ba      	str	r2, [r7, #24]
 8015d44:	617b      	str	r3, [r7, #20]
 8015d46:	230f      	movs	r3, #15
 8015d48:	2210      	movs	r2, #16
 8015d4a:	4694      	mov	ip, r2
 8015d4c:	44bc      	add	ip, r7
 8015d4e:	4463      	add	r3, ip
 8015d50:	1c02      	adds	r2, r0, #0
 8015d52:	701a      	strb	r2, [r3, #0]
 8015d54:	230c      	movs	r3, #12
 8015d56:	2210      	movs	r2, #16
 8015d58:	4694      	mov	ip, r2
 8015d5a:	44bc      	add	ip, r7
 8015d5c:	4463      	add	r3, ip
 8015d5e:	1c0a      	adds	r2, r1, #0
 8015d60:	801a      	strh	r2, [r3, #0]
    uint32_t lastDown = 0;
 8015d62:	2300      	movs	r3, #0
 8015d64:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t fCntDiff = 0;
 8015d66:	2300      	movs	r3, #0
 8015d68:	62fb      	str	r3, [r7, #44]	; 0x2c
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8015d6a:	231b      	movs	r3, #27
 8015d6c:	2210      	movs	r2, #16
 8015d6e:	4694      	mov	ip, r2
 8015d70:	44bc      	add	ip, r7
 8015d72:	4463      	add	r3, ip
 8015d74:	2213      	movs	r2, #19
 8015d76:	701a      	strb	r2, [r3, #0]

    if( currentDown == NULL )
 8015d78:	697b      	ldr	r3, [r7, #20]
 8015d7a:	2b00      	cmp	r3, #0
 8015d7c:	d101      	bne.n	8015d82 <LoRaMacCryptoGetFCntDown+0x46>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015d7e:	230a      	movs	r3, #10
 8015d80:	e06b      	b.n	8015e5a <LoRaMacCryptoGetFCntDown+0x11e>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8015d82:	221b      	movs	r2, #27
 8015d84:	2110      	movs	r1, #16
 8015d86:	187b      	adds	r3, r7, r1
 8015d88:	189e      	adds	r6, r3, r2
 8015d8a:	2314      	movs	r3, #20
 8015d8c:	187a      	adds	r2, r7, r1
 8015d8e:	18d2      	adds	r2, r2, r3
 8015d90:	230f      	movs	r3, #15
 8015d92:	2010      	movs	r0, #16
 8015d94:	4684      	mov	ip, r0
 8015d96:	44bc      	add	ip, r7
 8015d98:	4463      	add	r3, ip
 8015d9a:	781b      	ldrb	r3, [r3, #0]
 8015d9c:	0011      	movs	r1, r2
 8015d9e:	0018      	movs	r0, r3
 8015da0:	f7ff fe7c 	bl	8015a9c <GetLastFcntDown>
 8015da4:	0003      	movs	r3, r0
 8015da6:	7033      	strb	r3, [r6, #0]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8015da8:	221b      	movs	r2, #27
 8015daa:	2110      	movs	r1, #16
 8015dac:	187b      	adds	r3, r7, r1
 8015dae:	189b      	adds	r3, r3, r2
 8015db0:	781b      	ldrb	r3, [r3, #0]
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	d003      	beq.n	8015dbe <LoRaMacCryptoGetFCntDown+0x82>
    {
        return cryptoStatus;
 8015db6:	187b      	adds	r3, r7, r1
 8015db8:	189b      	adds	r3, r3, r2
 8015dba:	781b      	ldrb	r3, [r3, #0]
 8015dbc:	e04d      	b.n	8015e5a <LoRaMacCryptoGetFCntDown+0x11e>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 8015dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dc0:	3301      	adds	r3, #1
 8015dc2:	d103      	bne.n	8015dcc <LoRaMacCryptoGetFCntDown+0x90>
    {
        *currentDown = frameFcnt;
 8015dc4:	697b      	ldr	r3, [r7, #20]
 8015dc6:	69ba      	ldr	r2, [r7, #24]
 8015dc8:	601a      	str	r2, [r3, #0]
 8015dca:	e020      	b.n	8015e0e <LoRaMacCryptoGetFCntDown+0xd2>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8015dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dce:	041b      	lsls	r3, r3, #16
 8015dd0:	0c1b      	lsrs	r3, r3, #16
 8015dd2:	69ba      	ldr	r2, [r7, #24]
 8015dd4:	1ad3      	subs	r3, r2, r3
 8015dd6:	62fb      	str	r3, [r7, #44]	; 0x2c

        if( fCntDiff > 0 )
 8015dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dda:	2b00      	cmp	r3, #0
 8015ddc:	dd05      	ble.n	8015dea <LoRaMacCryptoGetFCntDown+0xae>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8015dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015de2:	18d2      	adds	r2, r2, r3
 8015de4:	697b      	ldr	r3, [r7, #20]
 8015de6:	601a      	str	r2, [r3, #0]
 8015de8:	e011      	b.n	8015e0e <LoRaMacCryptoGetFCntDown+0xd2>
        }
        else if( fCntDiff == 0 )
 8015dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dec:	2b00      	cmp	r3, #0
 8015dee:	d104      	bne.n	8015dfa <LoRaMacCryptoGetFCntDown+0xbe>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8015df0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015df2:	697b      	ldr	r3, [r7, #20]
 8015df4:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8015df6:	2307      	movs	r3, #7
 8015df8:	e02f      	b.n	8015e5a <LoRaMacCryptoGetFCntDown+0x11e>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8015dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dfc:	0c1b      	lsrs	r3, r3, #16
 8015dfe:	041a      	lsls	r2, r3, #16
 8015e00:	69bb      	ldr	r3, [r7, #24]
 8015e02:	18d3      	adds	r3, r2, r3
 8015e04:	2280      	movs	r2, #128	; 0x80
 8015e06:	0252      	lsls	r2, r2, #9
 8015e08:	189a      	adds	r2, r3, r2
 8015e0a:	697b      	ldr	r3, [r7, #20]
 8015e0c:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 8015e0e:	4b15      	ldr	r3, [pc, #84]	; (8015e64 <LoRaMacCryptoGetFCntDown+0x128>)
 8015e10:	681b      	ldr	r3, [r3, #0]
 8015e12:	789b      	ldrb	r3, [r3, #2]
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	d11f      	bne.n	8015e58 <LoRaMacCryptoGetFCntDown+0x11c>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 8015e18:	697b      	ldr	r3, [r7, #20]
 8015e1a:	681b      	ldr	r3, [r3, #0]
 8015e1c:	60bb      	str	r3, [r7, #8]
 8015e1e:	2300      	movs	r3, #0
 8015e20:	60fb      	str	r3, [r7, #12]
 8015e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e24:	603b      	str	r3, [r7, #0]
 8015e26:	2300      	movs	r3, #0
 8015e28:	607b      	str	r3, [r7, #4]
 8015e2a:	68ba      	ldr	r2, [r7, #8]
 8015e2c:	68fb      	ldr	r3, [r7, #12]
 8015e2e:	6838      	ldr	r0, [r7, #0]
 8015e30:	6879      	ldr	r1, [r7, #4]
 8015e32:	1a12      	subs	r2, r2, r0
 8015e34:	418b      	sbcs	r3, r1
 8015e36:	210c      	movs	r1, #12
 8015e38:	2010      	movs	r0, #16
 8015e3a:	4684      	mov	ip, r0
 8015e3c:	44bc      	add	ip, r7
 8015e3e:	4461      	add	r1, ip
 8015e40:	8809      	ldrh	r1, [r1, #0]
 8015e42:	b289      	uxth	r1, r1
 8015e44:	000c      	movs	r4, r1
 8015e46:	2100      	movs	r1, #0
 8015e48:	000d      	movs	r5, r1
 8015e4a:	429d      	cmp	r5, r3
 8015e4c:	dc04      	bgt.n	8015e58 <LoRaMacCryptoGetFCntDown+0x11c>
 8015e4e:	d101      	bne.n	8015e54 <LoRaMacCryptoGetFCntDown+0x118>
 8015e50:	4294      	cmp	r4, r2
 8015e52:	d801      	bhi.n	8015e58 <LoRaMacCryptoGetFCntDown+0x11c>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 8015e54:	2308      	movs	r3, #8
 8015e56:	e000      	b.n	8015e5a <LoRaMacCryptoGetFCntDown+0x11e>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015e58:	2300      	movs	r3, #0
}
 8015e5a:	0018      	movs	r0, r3
 8015e5c:	46bd      	mov	sp, r7
 8015e5e:	b00d      	add	sp, #52	; 0x34
 8015e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e62:	46c0      	nop			; (mov r8, r8)
 8015e64:	20000d14 	.word	0x20000d14

08015e68 <LoRaMacCryptoSetMulticastReference>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8015e68:	b580      	push	{r7, lr}
 8015e6a:	b082      	sub	sp, #8
 8015e6c:	af00      	add	r7, sp, #0
 8015e6e:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	2b00      	cmp	r3, #0
 8015e74:	d101      	bne.n	8015e7a <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015e76:	230a      	movs	r3, #10
 8015e78:	e006      	b.n	8015e88 <LoRaMacCryptoSetMulticastReference+0x20>
    }

    multicastList[0].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 8015e7a:	4b05      	ldr	r3, [pc, #20]	; (8015e90 <LoRaMacCryptoSetMulticastReference+0x28>)
 8015e7c:	681b      	ldr	r3, [r3, #0]
 8015e7e:	331c      	adds	r3, #28
 8015e80:	001a      	movs	r2, r3
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	621a      	str	r2, [r3, #32]
#if ( LORAMAC_MAX_MC_CTX > 1 )
    multicastList[1].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown1;
    multicastList[2].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown2;
    multicastList[3].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown3;
#endif /* LORAMAC_MAX_MC_CTX > 1 */
    return LORAMAC_CRYPTO_SUCCESS;
 8015e86:	2300      	movs	r3, #0
}
 8015e88:	0018      	movs	r0, r3
 8015e8a:	46bd      	mov	sp, r7
 8015e8c:	b002      	add	sp, #8
 8015e8e:	bd80      	pop	{r7, pc}
 8015e90:	20000d14 	.word	0x20000d14

08015e94 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8015e94:	b580      	push	{r7, lr}
 8015e96:	b082      	sub	sp, #8
 8015e98:	af00      	add	r7, sp, #0
 8015e9a:	0002      	movs	r2, r0
 8015e9c:	6039      	str	r1, [r7, #0]
 8015e9e:	1dfb      	adds	r3, r7, #7
 8015ea0:	701a      	strb	r2, [r3, #0]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8015ea2:	683a      	ldr	r2, [r7, #0]
 8015ea4:	1dfb      	adds	r3, r7, #7
 8015ea6:	781b      	ldrb	r3, [r3, #0]
 8015ea8:	0011      	movs	r1, r2
 8015eaa:	0018      	movs	r0, r3
 8015eac:	f7f7 fcc8 	bl	800d840 <SecureElementSetKey>
 8015eb0:	1e03      	subs	r3, r0, #0
 8015eb2:	d001      	beq.n	8015eb8 <LoRaMacCryptoSetKey+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015eb4:	230f      	movs	r3, #15
 8015eb6:	e014      	b.n	8015ee2 <LoRaMacCryptoSetKey+0x4e>
    }
    if( keyID == APP_KEY )
 8015eb8:	1dfb      	adds	r3, r7, #7
 8015eba:	781b      	ldrb	r3, [r3, #0]
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	d10f      	bne.n	8015ee0 <LoRaMacCryptoSetKey+0x4c>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( keyID ) != LORAMAC_CRYPTO_SUCCESS )
 8015ec0:	1dfb      	adds	r3, r7, #7
 8015ec2:	781b      	ldrb	r3, [r3, #0]
 8015ec4:	0018      	movs	r0, r3
 8015ec6:	f000 fa79 	bl	80163bc <LoRaMacCryptoDeriveMcRootKey>
 8015eca:	1e03      	subs	r3, r0, #0
 8015ecc:	d001      	beq.n	8015ed2 <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015ece:	230f      	movs	r3, #15
 8015ed0:	e007      	b.n	8015ee2 <LoRaMacCryptoSetKey+0x4e>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8015ed2:	2004      	movs	r0, #4
 8015ed4:	f000 faa6 	bl	8016424 <LoRaMacCryptoDeriveMcKEKey>
 8015ed8:	1e03      	subs	r3, r0, #0
 8015eda:	d001      	beq.n	8015ee0 <LoRaMacCryptoSetKey+0x4c>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015edc:	230f      	movs	r3, #15
 8015ede:	e000      	b.n	8015ee2 <LoRaMacCryptoSetKey+0x4e>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8015ee0:	2300      	movs	r3, #0
}
 8015ee2:	0018      	movs	r0, r3
 8015ee4:	46bd      	mov	sp, r7
 8015ee6:	b002      	add	sp, #8
 8015ee8:	bd80      	pop	{r7, pc}
	...

08015eec <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8015eec:	b580      	push	{r7, lr}
 8015eee:	b086      	sub	sp, #24
 8015ef0:	af02      	add	r7, sp, #8
 8015ef2:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	2b00      	cmp	r3, #0
 8015ef8:	d101      	bne.n	8015efe <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015efa:	230a      	movs	r3, #10
 8015efc:	e039      	b.n	8015f72 <LoRaMacCryptoPrepareJoinRequest+0x86>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8015efe:	230f      	movs	r3, #15
 8015f00:	18fb      	adds	r3, r7, r3
 8015f02:	2201      	movs	r2, #1
 8015f04:	701a      	strb	r2, [r3, #0]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 8015f06:	2300      	movs	r3, #0
 8015f08:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 8015f0a:	2308      	movs	r3, #8
 8015f0c:	18fb      	adds	r3, r7, r3
 8015f0e:	0018      	movs	r0, r3
 8015f10:	f7f7 fec0 	bl	800dc94 <SecureElementRandomNumber>
    CryptoCtx.NvmCtx->DevNonce = devNonce;
 8015f14:	68ba      	ldr	r2, [r7, #8]
 8015f16:	4b19      	ldr	r3, [pc, #100]	; (8015f7c <LoRaMacCryptoPrepareJoinRequest+0x90>)
 8015f18:	681b      	ldr	r3, [r3, #0]
 8015f1a:	b292      	uxth	r2, r2
 8015f1c:	809a      	strh	r2, [r3, #4]
#else
    CryptoCtx.NvmCtx->DevNonce++;
#endif
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8015f1e:	4b17      	ldr	r3, [pc, #92]	; (8015f7c <LoRaMacCryptoPrepareJoinRequest+0x90>)
 8015f20:	685b      	ldr	r3, [r3, #4]
 8015f22:	4798      	blx	r3
    macMsg->DevNonce = CryptoCtx.NvmCtx->DevNonce;
 8015f24:	4b15      	ldr	r3, [pc, #84]	; (8015f7c <LoRaMacCryptoPrepareJoinRequest+0x90>)
 8015f26:	681b      	ldr	r3, [r3, #0]
 8015f28:	889a      	ldrh	r2, [r3, #4]
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8015f2e:	687b      	ldr	r3, [r7, #4]
 8015f30:	0018      	movs	r0, r3
 8015f32:	f000 fca1 	bl	8016878 <LoRaMacSerializerJoinRequest>
 8015f36:	1e03      	subs	r3, r0, #0
 8015f38:	d001      	beq.n	8015f3e <LoRaMacCryptoPrepareJoinRequest+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8015f3a:	2311      	movs	r3, #17
 8015f3c:	e019      	b.n	8015f72 <LoRaMacCryptoPrepareJoinRequest+0x86>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	6819      	ldr	r1, [r3, #0]
 8015f42:	687b      	ldr	r3, [r7, #4]
 8015f44:	3318      	adds	r3, #24
 8015f46:	220f      	movs	r2, #15
 8015f48:	18ba      	adds	r2, r7, r2
 8015f4a:	7812      	ldrb	r2, [r2, #0]
 8015f4c:	9300      	str	r3, [sp, #0]
 8015f4e:	0013      	movs	r3, r2
 8015f50:	2213      	movs	r2, #19
 8015f52:	2000      	movs	r0, #0
 8015f54:	f7f7 fcee 	bl	800d934 <SecureElementComputeAesCmac>
 8015f58:	1e03      	subs	r3, r0, #0
 8015f5a:	d001      	beq.n	8015f60 <LoRaMacCryptoPrepareJoinRequest+0x74>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015f5c:	230f      	movs	r3, #15
 8015f5e:	e008      	b.n	8015f72 <LoRaMacCryptoPrepareJoinRequest+0x86>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	0018      	movs	r0, r3
 8015f64:	f000 fc88 	bl	8016878 <LoRaMacSerializerJoinRequest>
 8015f68:	1e03      	subs	r3, r0, #0
 8015f6a:	d001      	beq.n	8015f70 <LoRaMacCryptoPrepareJoinRequest+0x84>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8015f6c:	2311      	movs	r3, #17
 8015f6e:	e000      	b.n	8015f72 <LoRaMacCryptoPrepareJoinRequest+0x86>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015f70:	2300      	movs	r3, #0
}
 8015f72:	0018      	movs	r0, r3
 8015f74:	46bd      	mov	sp, r7
 8015f76:	b004      	add	sp, #16
 8015f78:	bd80      	pop	{r7, pc}
 8015f7a:	46c0      	nop			; (mov r8, r8)
 8015f7c:	20000d14 	.word	0x20000d14

08015f80 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8015f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015f82:	b095      	sub	sp, #84	; 0x54
 8015f84:	af04      	add	r7, sp, #16
 8015f86:	60b9      	str	r1, [r7, #8]
 8015f88:	607a      	str	r2, [r7, #4]
 8015f8a:	230f      	movs	r3, #15
 8015f8c:	18fb      	adds	r3, r7, r3
 8015f8e:	1c02      	adds	r2, r0, #0
 8015f90:	701a      	strb	r2, [r3, #0]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	d002      	beq.n	8015f9e <LoRaMacCryptoHandleJoinAccept+0x1e>
 8015f98:	68bb      	ldr	r3, [r7, #8]
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	d101      	bne.n	8015fa2 <LoRaMacCryptoHandleJoinAccept+0x22>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015f9e:	230a      	movs	r3, #10
 8015fa0:	e0a7      	b.n	80160f2 <LoRaMacCryptoHandleJoinAccept+0x172>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8015fa2:	233f      	movs	r3, #63	; 0x3f
 8015fa4:	18fb      	adds	r3, r7, r3
 8015fa6:	2213      	movs	r2, #19
 8015fa8:	701a      	strb	r2, [r3, #0]
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8015faa:	2614      	movs	r6, #20
 8015fac:	19bb      	adds	r3, r7, r6
 8015fae:	2200      	movs	r2, #0
 8015fb0:	601a      	str	r2, [r3, #0]
 8015fb2:	3304      	adds	r3, #4
 8015fb4:	221d      	movs	r2, #29
 8015fb6:	2100      	movs	r1, #0
 8015fb8:	0018      	movs	r0, r3
 8015fba:	f008 f820 	bl	801dffe <memset>
    uint8_t versionMinor         = 0;
 8015fbe:	2313      	movs	r3, #19
 8015fc0:	18fb      	adds	r3, r7, r3
 8015fc2:	2200      	movs	r2, #0
 8015fc4:	701a      	strb	r2, [r3, #0]
    uint8_t* nonce               = ( uint8_t* )&CryptoCtx.NvmCtx->DevNonce;
 8015fc6:	4b4d      	ldr	r3, [pc, #308]	; (80160fc <LoRaMacCryptoHandleJoinAccept+0x17c>)
 8015fc8:	681b      	ldr	r3, [r3, #0]
 8015fca:	3304      	adds	r3, #4
 8015fcc:	63bb      	str	r3, [r7, #56]	; 0x38
            nonce = ( uint8_t* )&CryptoCtx.NvmCtx->FCntList.RJcount1;
        }
    }
#endif

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, ( int16_t )*nonce, macMsg->Buffer,
 8015fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015fd0:	781b      	ldrb	r3, [r3, #0]
 8015fd2:	b29c      	uxth	r4, r3
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	681d      	ldr	r5, [r3, #0]
 8015fd8:	687b      	ldr	r3, [r7, #4]
 8015fda:	791b      	ldrb	r3, [r3, #4]
 8015fdc:	68b9      	ldr	r1, [r7, #8]
 8015fde:	200f      	movs	r0, #15
 8015fe0:	183a      	adds	r2, r7, r0
 8015fe2:	7810      	ldrb	r0, [r2, #0]
 8015fe4:	2213      	movs	r2, #19
 8015fe6:	18ba      	adds	r2, r7, r2
 8015fe8:	9202      	str	r2, [sp, #8]
 8015fea:	19ba      	adds	r2, r7, r6
 8015fec:	9201      	str	r2, [sp, #4]
 8015fee:	9300      	str	r3, [sp, #0]
 8015ff0:	002b      	movs	r3, r5
 8015ff2:	0022      	movs	r2, r4
 8015ff4:	f7f7 fdc7 	bl	800db86 <SecureElementProcessJoinAccept>
 8015ff8:	1e03      	subs	r3, r0, #0
 8015ffa:	d001      	beq.n	8016000 <LoRaMacCryptoHandleJoinAccept+0x80>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015ffc:	230f      	movs	r3, #15
 8015ffe:	e078      	b.n	80160f2 <LoRaMacCryptoHandleJoinAccept+0x172>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	6818      	ldr	r0, [r3, #0]
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	791b      	ldrb	r3, [r3, #4]
 8016008:	b29a      	uxth	r2, r3
 801600a:	2314      	movs	r3, #20
 801600c:	18fb      	adds	r3, r7, r3
 801600e:	0019      	movs	r1, r3
 8016010:	f003 fa98 	bl	8019544 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	0018      	movs	r0, r3
 8016018:	f000 fa2e 	bl	8016478 <LoRaMacParserJoinAccept>
 801601c:	1e03      	subs	r3, r0, #0
 801601e:	d001      	beq.n	8016024 <LoRaMacCryptoHandleJoinAccept+0xa4>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8016020:	2310      	movs	r3, #16
 8016022:	e066      	b.n	80160f2 <LoRaMacCryptoHandleJoinAccept+0x172>
            return retval;
        }
    }
#else
    // Operating in LoRaWAN 1.0.x mode
    retval = LoRaMacCryptoDeriveMcRootKey( APP_KEY );
 8016024:	253f      	movs	r5, #63	; 0x3f
 8016026:	197c      	adds	r4, r7, r5
 8016028:	2000      	movs	r0, #0
 801602a:	f000 f9c7 	bl	80163bc <LoRaMacCryptoDeriveMcRootKey>
 801602e:	0003      	movs	r3, r0
 8016030:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016032:	002a      	movs	r2, r5
 8016034:	18bb      	adds	r3, r7, r2
 8016036:	781b      	ldrb	r3, [r3, #0]
 8016038:	2b00      	cmp	r3, #0
 801603a:	d002      	beq.n	8016042 <LoRaMacCryptoHandleJoinAccept+0xc2>
    {
        return retval;
 801603c:	18bb      	adds	r3, r7, r2
 801603e:	781b      	ldrb	r3, [r3, #0]
 8016040:	e057      	b.n	80160f2 <LoRaMacCryptoHandleJoinAccept+0x172>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 8016042:	253f      	movs	r5, #63	; 0x3f
 8016044:	197c      	adds	r4, r7, r5
 8016046:	2004      	movs	r0, #4
 8016048:	f000 f9ec 	bl	8016424 <LoRaMacCryptoDeriveMcKEKey>
 801604c:	0003      	movs	r3, r0
 801604e:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016050:	002a      	movs	r2, r5
 8016052:	18bb      	adds	r3, r7, r2
 8016054:	781b      	ldrb	r3, [r3, #0]
 8016056:	2b00      	cmp	r3, #0
 8016058:	d002      	beq.n	8016060 <LoRaMacCryptoHandleJoinAccept+0xe0>
    {
        return retval;
 801605a:	18bb      	adds	r3, r7, r2
 801605c:	781b      	ldrb	r3, [r3, #0]
 801605e:	e048      	b.n	80160f2 <LoRaMacCryptoHandleJoinAccept+0x172>
    }

    retval = DeriveSessionKey10x( APP_S_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* )&CryptoCtx.NvmCtx->DevNonce );
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	1d99      	adds	r1, r3, #6
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	3309      	adds	r3, #9
 8016068:	001a      	movs	r2, r3
 801606a:	4b24      	ldr	r3, [pc, #144]	; (80160fc <LoRaMacCryptoHandleJoinAccept+0x17c>)
 801606c:	681b      	ldr	r3, [r3, #0]
 801606e:	3304      	adds	r3, #4
 8016070:	253f      	movs	r5, #63	; 0x3f
 8016072:	197c      	adds	r4, r7, r5
 8016074:	2003      	movs	r0, #3
 8016076:	f7ff fcb1 	bl	80159dc <DeriveSessionKey10x>
 801607a:	0003      	movs	r3, r0
 801607c:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801607e:	197b      	adds	r3, r7, r5
 8016080:	781b      	ldrb	r3, [r3, #0]
 8016082:	2b00      	cmp	r3, #0
 8016084:	d002      	beq.n	801608c <LoRaMacCryptoHandleJoinAccept+0x10c>
    {
        return retval;
 8016086:	197b      	adds	r3, r7, r5
 8016088:	781b      	ldrb	r3, [r3, #0]
 801608a:	e032      	b.n	80160f2 <LoRaMacCryptoHandleJoinAccept+0x172>
    }
    retval = DeriveSessionKey10x( NWK_S_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* )&CryptoCtx.NvmCtx->DevNonce );
 801608c:	687b      	ldr	r3, [r7, #4]
 801608e:	1d99      	adds	r1, r3, #6
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	3309      	adds	r3, #9
 8016094:	001a      	movs	r2, r3
 8016096:	4b19      	ldr	r3, [pc, #100]	; (80160fc <LoRaMacCryptoHandleJoinAccept+0x17c>)
 8016098:	681b      	ldr	r3, [r3, #0]
 801609a:	3304      	adds	r3, #4
 801609c:	253f      	movs	r5, #63	; 0x3f
 801609e:	197c      	adds	r4, r7, r5
 80160a0:	2002      	movs	r0, #2
 80160a2:	f7ff fc9b 	bl	80159dc <DeriveSessionKey10x>
 80160a6:	0003      	movs	r3, r0
 80160a8:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80160aa:	197b      	adds	r3, r7, r5
 80160ac:	781b      	ldrb	r3, [r3, #0]
 80160ae:	2b00      	cmp	r3, #0
 80160b0:	d002      	beq.n	80160b8 <LoRaMacCryptoHandleJoinAccept+0x138>
    {
        return retval;
 80160b2:	197b      	adds	r3, r7, r5
 80160b4:	781b      	ldrb	r3, [r3, #0]
 80160b6:	e01c      	b.n	80160f2 <LoRaMacCryptoHandleJoinAccept+0x172>
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO */

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = versionMinor;
 80160b8:	4b10      	ldr	r3, [pc, #64]	; (80160fc <LoRaMacCryptoHandleJoinAccept+0x17c>)
 80160ba:	681b      	ldr	r3, [r3, #0]
 80160bc:	2213      	movs	r2, #19
 80160be:	18ba      	adds	r2, r7, r2
 80160c0:	7812      	ldrb	r2, [r2, #0]
 80160c2:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    CryptoCtx.RJcount0 = 0;
#endif
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 80160c4:	4b0d      	ldr	r3, [pc, #52]	; (80160fc <LoRaMacCryptoHandleJoinAccept+0x17c>)
 80160c6:	681b      	ldr	r3, [r3, #0]
 80160c8:	2200      	movs	r2, #0
 80160ca:	60da      	str	r2, [r3, #12]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 80160cc:	4b0b      	ldr	r3, [pc, #44]	; (80160fc <LoRaMacCryptoHandleJoinAccept+0x17c>)
 80160ce:	681b      	ldr	r3, [r3, #0]
 80160d0:	2201      	movs	r2, #1
 80160d2:	4252      	negs	r2, r2
 80160d4:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 80160d6:	4b09      	ldr	r3, [pc, #36]	; (80160fc <LoRaMacCryptoHandleJoinAccept+0x17c>)
 80160d8:	681b      	ldr	r3, [r3, #0]
 80160da:	2201      	movs	r2, #1
 80160dc:	4252      	negs	r2, r2
 80160de:	611a      	str	r2, [r3, #16]
    CryptoCtx.NvmCtx->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 80160e0:	4b06      	ldr	r3, [pc, #24]	; (80160fc <LoRaMacCryptoHandleJoinAccept+0x17c>)
 80160e2:	681b      	ldr	r3, [r3, #0]
 80160e4:	2201      	movs	r2, #1
 80160e6:	4252      	negs	r2, r2
 80160e8:	615a      	str	r2, [r3, #20]

    CryptoCtx.EventCryptoNvmCtxChanged( );
 80160ea:	4b04      	ldr	r3, [pc, #16]	; (80160fc <LoRaMacCryptoHandleJoinAccept+0x17c>)
 80160ec:	685b      	ldr	r3, [r3, #4]
 80160ee:	4798      	blx	r3

    return LORAMAC_CRYPTO_SUCCESS;
 80160f0:	2300      	movs	r3, #0
}
 80160f2:	0018      	movs	r0, r3
 80160f4:	46bd      	mov	sp, r7
 80160f6:	b011      	add	sp, #68	; 0x44
 80160f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80160fa:	46c0      	nop			; (mov r8, r8)
 80160fc:	20000d14 	.word	0x20000d14

08016100 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8016100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016102:	b08b      	sub	sp, #44	; 0x2c
 8016104:	af04      	add	r7, sp, #16
 8016106:	60f8      	str	r0, [r7, #12]
 8016108:	0008      	movs	r0, r1
 801610a:	0011      	movs	r1, r2
 801610c:	607b      	str	r3, [r7, #4]
 801610e:	230b      	movs	r3, #11
 8016110:	18fb      	adds	r3, r7, r3
 8016112:	1c02      	adds	r2, r0, #0
 8016114:	701a      	strb	r2, [r3, #0]
 8016116:	230a      	movs	r3, #10
 8016118:	18fb      	adds	r3, r7, r3
 801611a:	1c0a      	adds	r2, r1, #0
 801611c:	701a      	strb	r2, [r3, #0]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801611e:	2316      	movs	r3, #22
 8016120:	18fb      	adds	r3, r7, r3
 8016122:	2213      	movs	r2, #19
 8016124:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8016126:	2317      	movs	r3, #23
 8016128:	18fb      	adds	r3, r7, r3
 801612a:	2203      	movs	r2, #3
 801612c:	701a      	strb	r2, [r3, #0]

    if( macMsg == NULL )
 801612e:	687b      	ldr	r3, [r7, #4]
 8016130:	2b00      	cmp	r3, #0
 8016132:	d101      	bne.n	8016138 <LoRaMacCryptoSecureMessage+0x38>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016134:	230a      	movs	r3, #10
 8016136:	e072      	b.n	801621e <LoRaMacCryptoSecureMessage+0x11e>
    }

    if( fCntUp < CryptoCtx.NvmCtx->FCntList.FCntUp )
 8016138:	4b3b      	ldr	r3, [pc, #236]	; (8016228 <LoRaMacCryptoSecureMessage+0x128>)
 801613a:	681b      	ldr	r3, [r3, #0]
 801613c:	68db      	ldr	r3, [r3, #12]
 801613e:	68fa      	ldr	r2, [r7, #12]
 8016140:	429a      	cmp	r2, r3
 8016142:	d201      	bcs.n	8016148 <LoRaMacCryptoSecureMessage+0x48>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8016144:	2306      	movs	r3, #6
 8016146:	e06a      	b.n	801621e <LoRaMacCryptoSecureMessage+0x11e>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	2220      	movs	r2, #32
 801614c:	5c9b      	ldrb	r3, [r3, r2]
 801614e:	2b00      	cmp	r3, #0
 8016150:	d103      	bne.n	801615a <LoRaMacCryptoSecureMessage+0x5a>
    {
        // Use network session key
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8016152:	2317      	movs	r3, #23
 8016154:	18fb      	adds	r3, r7, r3
 8016156:	2202      	movs	r2, #2
 8016158:	701a      	strb	r2, [r3, #0]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    if( fCntUp > CryptoCtx.NvmCtx->FCntList.FCntUp )
 801615a:	4b33      	ldr	r3, [pc, #204]	; (8016228 <LoRaMacCryptoSecureMessage+0x128>)
 801615c:	681b      	ldr	r3, [r3, #0]
 801615e:	68db      	ldr	r3, [r3, #12]
 8016160:	68fa      	ldr	r2, [r7, #12]
 8016162:	429a      	cmp	r2, r3
 8016164:	d91c      	bls.n	80161a0 <LoRaMacCryptoSecureMessage+0xa0>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	2228      	movs	r2, #40	; 0x28
 801616e:	5c9b      	ldrb	r3, [r3, r2]
 8016170:	b219      	sxth	r1, r3
 8016172:	687b      	ldr	r3, [r7, #4]
 8016174:	689d      	ldr	r5, [r3, #8]
 8016176:	2616      	movs	r6, #22
 8016178:	19bc      	adds	r4, r7, r6
 801617a:	2317      	movs	r3, #23
 801617c:	18fb      	adds	r3, r7, r3
 801617e:	781a      	ldrb	r2, [r3, #0]
 8016180:	68fb      	ldr	r3, [r7, #12]
 8016182:	9301      	str	r3, [sp, #4]
 8016184:	2300      	movs	r3, #0
 8016186:	9300      	str	r3, [sp, #0]
 8016188:	002b      	movs	r3, r5
 801618a:	f7ff f9c7 	bl	801551c <PayloadEncrypt>
 801618e:	0003      	movs	r3, r0
 8016190:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016192:	19bb      	adds	r3, r7, r6
 8016194:	781b      	ldrb	r3, [r3, #0]
 8016196:	2b00      	cmp	r3, #0
 8016198:	d002      	beq.n	80161a0 <LoRaMacCryptoSecureMessage+0xa0>
        {
            return retval;
 801619a:	19bb      	adds	r3, r7, r6
 801619c:	781b      	ldrb	r3, [r3, #0]
 801619e:	e03e      	b.n	801621e <LoRaMacCryptoSecureMessage+0x11e>
        }
#endif
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80161a0:	687b      	ldr	r3, [r7, #4]
 80161a2:	0018      	movs	r0, r3
 80161a4:	f000 fc03 	bl	80169ae <LoRaMacSerializerData>
 80161a8:	1e03      	subs	r3, r0, #0
 80161aa:	d001      	beq.n	80161b0 <LoRaMacCryptoSecureMessage+0xb0>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80161ac:	2311      	movs	r3, #17
 80161ae:	e036      	b.n	801621e <LoRaMacCryptoSecureMessage+0x11e>
#endif
    {        // Use network session key
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 80161b0:	2117      	movs	r1, #23
 80161b2:	187b      	adds	r3, r7, r1
 80161b4:	2202      	movs	r2, #2
 80161b6:	701a      	strb	r2, [r3, #0]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	6818      	ldr	r0, [r3, #0]
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	791b      	ldrb	r3, [r3, #4]
 80161c0:	b29b      	uxth	r3, r3
 80161c2:	3b04      	subs	r3, #4
 80161c4:	b29d      	uxth	r5, r3
 80161c6:	687b      	ldr	r3, [r7, #4]
 80161c8:	689b      	ldr	r3, [r3, #8]
 80161ca:	687a      	ldr	r2, [r7, #4]
 80161cc:	322c      	adds	r2, #44	; 0x2c
 80161ce:	2616      	movs	r6, #22
 80161d0:	19bc      	adds	r4, r7, r6
 80161d2:	1879      	adds	r1, r7, r1
 80161d4:	7809      	ldrb	r1, [r1, #0]
 80161d6:	9203      	str	r2, [sp, #12]
 80161d8:	68fa      	ldr	r2, [r7, #12]
 80161da:	9202      	str	r2, [sp, #8]
 80161dc:	9301      	str	r3, [sp, #4]
 80161de:	2300      	movs	r3, #0
 80161e0:	9300      	str	r3, [sp, #0]
 80161e2:	2300      	movs	r3, #0
 80161e4:	000a      	movs	r2, r1
 80161e6:	0029      	movs	r1, r5
 80161e8:	f7ff facc 	bl	8015784 <ComputeCmacB0>
 80161ec:	0003      	movs	r3, r0
 80161ee:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80161f0:	19bb      	adds	r3, r7, r6
 80161f2:	781b      	ldrb	r3, [r3, #0]
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	d002      	beq.n	80161fe <LoRaMacCryptoSecureMessage+0xfe>
        {
            return retval;
 80161f8:	19bb      	adds	r3, r7, r6
 80161fa:	781b      	ldrb	r3, [r3, #0]
 80161fc:	e00f      	b.n	801621e <LoRaMacCryptoSecureMessage+0x11e>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	0018      	movs	r0, r3
 8016202:	f000 fbd4 	bl	80169ae <LoRaMacSerializerData>
 8016206:	1e03      	subs	r3, r0, #0
 8016208:	d001      	beq.n	801620e <LoRaMacCryptoSecureMessage+0x10e>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 801620a:	2311      	movs	r3, #17
 801620c:	e007      	b.n	801621e <LoRaMacCryptoSecureMessage+0x11e>
    }

    CryptoCtx.NvmCtx->FCntList.FCntUp = fCntUp;
 801620e:	4b06      	ldr	r3, [pc, #24]	; (8016228 <LoRaMacCryptoSecureMessage+0x128>)
 8016210:	681b      	ldr	r3, [r3, #0]
 8016212:	68fa      	ldr	r2, [r7, #12]
 8016214:	60da      	str	r2, [r3, #12]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8016216:	4b04      	ldr	r3, [pc, #16]	; (8016228 <LoRaMacCryptoSecureMessage+0x128>)
 8016218:	685b      	ldr	r3, [r3, #4]
 801621a:	4798      	blx	r3

    return LORAMAC_CRYPTO_SUCCESS;
 801621c:	2300      	movs	r3, #0
}
 801621e:	0018      	movs	r0, r3
 8016220:	46bd      	mov	sp, r7
 8016222:	b007      	add	sp, #28
 8016224:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016226:	46c0      	nop			; (mov r8, r8)
 8016228:	20000d14 	.word	0x20000d14

0801622c <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 801622c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801622e:	b08b      	sub	sp, #44	; 0x2c
 8016230:	af04      	add	r7, sp, #16
 8016232:	60b9      	str	r1, [r7, #8]
 8016234:	0011      	movs	r1, r2
 8016236:	607b      	str	r3, [r7, #4]
 8016238:	230f      	movs	r3, #15
 801623a:	18fb      	adds	r3, r7, r3
 801623c:	1c02      	adds	r2, r0, #0
 801623e:	701a      	strb	r2, [r3, #0]
 8016240:	230e      	movs	r3, #14
 8016242:	18fb      	adds	r3, r7, r3
 8016244:	1c0a      	adds	r2, r1, #0
 8016246:	701a      	strb	r2, [r3, #0]
    if( macMsg == 0 )
 8016248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801624a:	2b00      	cmp	r3, #0
 801624c:	d101      	bne.n	8016252 <LoRaMacCryptoUnsecureMessage+0x26>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801624e:	230a      	movs	r3, #10
 8016250:	e0ae      	b.n	80163b0 <LoRaMacCryptoUnsecureMessage+0x184>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8016252:	687a      	ldr	r2, [r7, #4]
 8016254:	230e      	movs	r3, #14
 8016256:	18fb      	adds	r3, r7, r3
 8016258:	781b      	ldrb	r3, [r3, #0]
 801625a:	0011      	movs	r1, r2
 801625c:	0018      	movs	r0, r3
 801625e:	f7ff fc69 	bl	8015b34 <CheckFCntDown>
 8016262:	0003      	movs	r3, r0
 8016264:	001a      	movs	r2, r3
 8016266:	2301      	movs	r3, #1
 8016268:	4053      	eors	r3, r2
 801626a:	b2db      	uxtb	r3, r3
 801626c:	2b00      	cmp	r3, #0
 801626e:	d001      	beq.n	8016274 <LoRaMacCryptoUnsecureMessage+0x48>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8016270:	2306      	movs	r3, #6
 8016272:	e09d      	b.n	80163b0 <LoRaMacCryptoUnsecureMessage+0x184>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8016274:	2315      	movs	r3, #21
 8016276:	18fb      	adds	r3, r7, r3
 8016278:	2213      	movs	r2, #19
 801627a:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 801627c:	2317      	movs	r3, #23
 801627e:	18fb      	adds	r3, r7, r3
 8016280:	2203      	movs	r2, #3
 8016282:	701a      	strb	r2, [r3, #0]

#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8016284:	2314      	movs	r3, #20
 8016286:	18fb      	adds	r3, r7, r3
 8016288:	2202      	movs	r2, #2
 801628a:	701a      	strb	r2, [r3, #0]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 801628c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801628e:	0018      	movs	r0, r3
 8016290:	f000 f9e2 	bl	8016658 <LoRaMacParserData>
 8016294:	1e03      	subs	r3, r0, #0
 8016296:	d001      	beq.n	801629c <LoRaMacCryptoUnsecureMessage+0x70>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8016298:	2310      	movs	r3, #16
 801629a:	e089      	b.n	80163b0 <LoRaMacCryptoUnsecureMessage+0x184>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 801629c:	2515      	movs	r5, #21
 801629e:	197c      	adds	r4, r7, r5
 80162a0:	2310      	movs	r3, #16
 80162a2:	18fa      	adds	r2, r7, r3
 80162a4:	230f      	movs	r3, #15
 80162a6:	18fb      	adds	r3, r7, r3
 80162a8:	781b      	ldrb	r3, [r3, #0]
 80162aa:	0011      	movs	r1, r2
 80162ac:	0018      	movs	r0, r3
 80162ae:	f7ff fb63 	bl	8015978 <GetKeyAddrItem>
 80162b2:	0003      	movs	r3, r0
 80162b4:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80162b6:	197b      	adds	r3, r7, r5
 80162b8:	781b      	ldrb	r3, [r3, #0]
 80162ba:	2b00      	cmp	r3, #0
 80162bc:	d002      	beq.n	80162c4 <LoRaMacCryptoUnsecureMessage+0x98>
    {
        return retval;
 80162be:	197b      	adds	r3, r7, r5
 80162c0:	781b      	ldrb	r3, [r3, #0]
 80162c2:	e075      	b.n	80163b0 <LoRaMacCryptoUnsecureMessage+0x184>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 80162c4:	693a      	ldr	r2, [r7, #16]
 80162c6:	2317      	movs	r3, #23
 80162c8:	18fb      	adds	r3, r7, r3
 80162ca:	7852      	ldrb	r2, [r2, #1]
 80162cc:	701a      	strb	r2, [r3, #0]
    micComputationKeyID = curItem->NwkSkey;
 80162ce:	693a      	ldr	r2, [r7, #16]
 80162d0:	2314      	movs	r3, #20
 80162d2:	18fb      	adds	r3, r7, r3
 80162d4:	7892      	ldrb	r2, [r2, #2]
 80162d6:	701a      	strb	r2, [r3, #0]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 80162d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162da:	689b      	ldr	r3, [r3, #8]
 80162dc:	68ba      	ldr	r2, [r7, #8]
 80162de:	429a      	cmp	r2, r3
 80162e0:	d001      	beq.n	80162e6 <LoRaMacCryptoUnsecureMessage+0xba>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 80162e2:	2302      	movs	r3, #2
 80162e4:	e064      	b.n	80163b0 <LoRaMacCryptoUnsecureMessage+0x184>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 80162e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162e8:	7b1b      	ldrb	r3, [r3, #12]
 80162ea:	069b      	lsls	r3, r3, #26
 80162ec:	0fdb      	lsrs	r3, r3, #31
 80162ee:	b2db      	uxtb	r3, r3
 80162f0:	001a      	movs	r2, r3
 80162f2:	2016      	movs	r0, #22
 80162f4:	183b      	adds	r3, r7, r0
 80162f6:	1e51      	subs	r1, r2, #1
 80162f8:	418a      	sbcs	r2, r1
 80162fa:	701a      	strb	r2, [r3, #0]
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 80162fc:	4b2e      	ldr	r3, [pc, #184]	; (80163b8 <LoRaMacCryptoUnsecureMessage+0x18c>)
 80162fe:	681b      	ldr	r3, [r3, #0]
 8016300:	789b      	ldrb	r3, [r3, #2]
 8016302:	2b00      	cmp	r3, #0
 8016304:	d102      	bne.n	801630c <LoRaMacCryptoUnsecureMessage+0xe0>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8016306:	183b      	adds	r3, r7, r0
 8016308:	2200      	movs	r2, #0
 801630a:	701a      	strb	r2, [r3, #0]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 801630c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801630e:	6818      	ldr	r0, [r3, #0]
 8016310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016312:	791b      	ldrb	r3, [r3, #4]
 8016314:	b29b      	uxth	r3, r3
 8016316:	3b04      	subs	r3, #4
 8016318:	b299      	uxth	r1, r3
 801631a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801631c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801631e:	2615      	movs	r6, #21
 8016320:	19bc      	adds	r4, r7, r6
 8016322:	2216      	movs	r2, #22
 8016324:	18ba      	adds	r2, r7, r2
 8016326:	7815      	ldrb	r5, [r2, #0]
 8016328:	2214      	movs	r2, #20
 801632a:	18ba      	adds	r2, r7, r2
 801632c:	7812      	ldrb	r2, [r2, #0]
 801632e:	9303      	str	r3, [sp, #12]
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	9302      	str	r3, [sp, #8]
 8016334:	68bb      	ldr	r3, [r7, #8]
 8016336:	9301      	str	r3, [sp, #4]
 8016338:	2301      	movs	r3, #1
 801633a:	9300      	str	r3, [sp, #0]
 801633c:	002b      	movs	r3, r5
 801633e:	f7ff fa69 	bl	8015814 <VerifyCmacB0>
 8016342:	0003      	movs	r3, r0
 8016344:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016346:	19bb      	adds	r3, r7, r6
 8016348:	781b      	ldrb	r3, [r3, #0]
 801634a:	2b00      	cmp	r3, #0
 801634c:	d002      	beq.n	8016354 <LoRaMacCryptoUnsecureMessage+0x128>
    {
        return retval;
 801634e:	19bb      	adds	r3, r7, r6
 8016350:	781b      	ldrb	r3, [r3, #0]
 8016352:	e02d      	b.n	80163b0 <LoRaMacCryptoUnsecureMessage+0x184>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8016354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016356:	2220      	movs	r2, #32
 8016358:	5c9b      	ldrb	r3, [r3, r2]
 801635a:	2b00      	cmp	r3, #0
 801635c:	d103      	bne.n	8016366 <LoRaMacCryptoUnsecureMessage+0x13a>
    {
        // Use network session encryption key
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 801635e:	2317      	movs	r3, #23
 8016360:	18fb      	adds	r3, r7, r3
 8016362:	2202      	movs	r2, #2
 8016364:	701a      	strb	r2, [r3, #0]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8016366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016368:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801636a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801636c:	2228      	movs	r2, #40	; 0x28
 801636e:	5c9b      	ldrb	r3, [r3, r2]
 8016370:	b219      	sxth	r1, r3
 8016372:	2615      	movs	r6, #21
 8016374:	19bc      	adds	r4, r7, r6
 8016376:	68bd      	ldr	r5, [r7, #8]
 8016378:	2317      	movs	r3, #23
 801637a:	18fb      	adds	r3, r7, r3
 801637c:	781a      	ldrb	r2, [r3, #0]
 801637e:	687b      	ldr	r3, [r7, #4]
 8016380:	9301      	str	r3, [sp, #4]
 8016382:	2301      	movs	r3, #1
 8016384:	9300      	str	r3, [sp, #0]
 8016386:	002b      	movs	r3, r5
 8016388:	f7ff f8c8 	bl	801551c <PayloadEncrypt>
 801638c:	0003      	movs	r3, r0
 801638e:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016390:	19bb      	adds	r3, r7, r6
 8016392:	781b      	ldrb	r3, [r3, #0]
 8016394:	2b00      	cmp	r3, #0
 8016396:	d002      	beq.n	801639e <LoRaMacCryptoUnsecureMessage+0x172>
    {
        return retval;
 8016398:	19bb      	adds	r3, r7, r6
 801639a:	781b      	ldrb	r3, [r3, #0]
 801639c:	e008      	b.n	80163b0 <LoRaMacCryptoUnsecureMessage+0x184>
            }
        } 
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 801639e:	687a      	ldr	r2, [r7, #4]
 80163a0:	230e      	movs	r3, #14
 80163a2:	18fb      	adds	r3, r7, r3
 80163a4:	781b      	ldrb	r3, [r3, #0]
 80163a6:	0011      	movs	r1, r2
 80163a8:	0018      	movs	r0, r3
 80163aa:	f7ff fbe7 	bl	8015b7c <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 80163ae:	2300      	movs	r3, #0
}
 80163b0:	0018      	movs	r0, r3
 80163b2:	46bd      	mov	sp, r7
 80163b4:	b007      	add	sp, #28
 80163b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80163b8:	20000d14 	.word	0x20000d14

080163bc <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( KeyIdentifier_t keyID )
{
 80163bc:	b590      	push	{r4, r7, lr}
 80163be:	b087      	sub	sp, #28
 80163c0:	af00      	add	r7, sp, #0
 80163c2:	0002      	movs	r2, r0
 80163c4:	1dfb      	adds	r3, r7, #7
 80163c6:	701a      	strb	r2, [r3, #0]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 80163c8:	1dfb      	adds	r3, r7, #7
 80163ca:	781b      	ldrb	r3, [r3, #0]
 80163cc:	2b00      	cmp	r3, #0
 80163ce:	d001      	beq.n	80163d4 <LoRaMacCryptoDeriveMcRootKey+0x18>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80163d0:	230b      	movs	r3, #11
 80163d2:	e020      	b.n	8016416 <LoRaMacCryptoDeriveMcRootKey+0x5a>
    }
    uint8_t compBase[16] = { 0 };
 80163d4:	2408      	movs	r4, #8
 80163d6:	193b      	adds	r3, r7, r4
 80163d8:	2200      	movs	r2, #0
 80163da:	601a      	str	r2, [r3, #0]
 80163dc:	3304      	adds	r3, #4
 80163de:	220c      	movs	r2, #12
 80163e0:	2100      	movs	r1, #0
 80163e2:	0018      	movs	r0, r3
 80163e4:	f007 fe0b 	bl	801dffe <memset>

    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 1 )
 80163e8:	4b0d      	ldr	r3, [pc, #52]	; (8016420 <LoRaMacCryptoDeriveMcRootKey+0x64>)
 80163ea:	681b      	ldr	r3, [r3, #0]
 80163ec:	789b      	ldrb	r3, [r3, #2]
 80163ee:	2b01      	cmp	r3, #1
 80163f0:	d102      	bne.n	80163f8 <LoRaMacCryptoDeriveMcRootKey+0x3c>
    {
        compBase[0] = 0x20;
 80163f2:	193b      	adds	r3, r7, r4
 80163f4:	2220      	movs	r2, #32
 80163f6:	701a      	strb	r2, [r3, #0]
    }
    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 80163f8:	4b09      	ldr	r3, [pc, #36]	; (8016420 <LoRaMacCryptoDeriveMcRootKey+0x64>)
 80163fa:	681b      	ldr	r3, [r3, #0]
 80163fc:	1dfa      	adds	r2, r7, #7
 80163fe:	7812      	ldrb	r2, [r2, #0]
 8016400:	2108      	movs	r1, #8
 8016402:	1879      	adds	r1, r7, r1
 8016404:	6818      	ldr	r0, [r3, #0]
 8016406:	2304      	movs	r3, #4
 8016408:	f7f7 fb68 	bl	800dadc <SecureElementDeriveAndStoreKey>
 801640c:	1e03      	subs	r3, r0, #0
 801640e:	d001      	beq.n	8016414 <LoRaMacCryptoDeriveMcRootKey+0x58>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016410:	230f      	movs	r3, #15
 8016412:	e000      	b.n	8016416 <LoRaMacCryptoDeriveMcRootKey+0x5a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016414:	2300      	movs	r3, #0
}
 8016416:	0018      	movs	r0, r3
 8016418:	46bd      	mov	sp, r7
 801641a:	b007      	add	sp, #28
 801641c:	bd90      	pop	{r4, r7, pc}
 801641e:	46c0      	nop			; (mov r8, r8)
 8016420:	20000d14 	.word	0x20000d14

08016424 <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 8016424:	b590      	push	{r4, r7, lr}
 8016426:	b087      	sub	sp, #28
 8016428:	af00      	add	r7, sp, #0
 801642a:	0002      	movs	r2, r0
 801642c:	1dfb      	adds	r3, r7, #7
 801642e:	701a      	strb	r2, [r3, #0]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 8016430:	1dfb      	adds	r3, r7, #7
 8016432:	781b      	ldrb	r3, [r3, #0]
 8016434:	2b04      	cmp	r3, #4
 8016436:	d001      	beq.n	801643c <LoRaMacCryptoDeriveMcKEKey+0x18>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8016438:	230b      	movs	r3, #11
 801643a:	e017      	b.n	801646c <LoRaMacCryptoDeriveMcKEKey+0x48>
    }
    uint8_t compBase[16] = { 0 };
 801643c:	2408      	movs	r4, #8
 801643e:	193b      	adds	r3, r7, r4
 8016440:	2200      	movs	r2, #0
 8016442:	601a      	str	r2, [r3, #0]
 8016444:	3304      	adds	r3, #4
 8016446:	220c      	movs	r2, #12
 8016448:	2100      	movs	r1, #0
 801644a:	0018      	movs	r0, r3
 801644c:	f007 fdd7 	bl	801dffe <memset>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 8016450:	4b08      	ldr	r3, [pc, #32]	; (8016474 <LoRaMacCryptoDeriveMcKEKey+0x50>)
 8016452:	681b      	ldr	r3, [r3, #0]
 8016454:	1dfa      	adds	r2, r7, #7
 8016456:	7812      	ldrb	r2, [r2, #0]
 8016458:	1939      	adds	r1, r7, r4
 801645a:	6818      	ldr	r0, [r3, #0]
 801645c:	237f      	movs	r3, #127	; 0x7f
 801645e:	f7f7 fb3d 	bl	800dadc <SecureElementDeriveAndStoreKey>
 8016462:	1e03      	subs	r3, r0, #0
 8016464:	d001      	beq.n	801646a <LoRaMacCryptoDeriveMcKEKey+0x46>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016466:	230f      	movs	r3, #15
 8016468:	e000      	b.n	801646c <LoRaMacCryptoDeriveMcKEKey+0x48>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801646a:	2300      	movs	r3, #0
}
 801646c:	0018      	movs	r0, r3
 801646e:	46bd      	mov	sp, r7
 8016470:	b007      	add	sp, #28
 8016472:	bd90      	pop	{r4, r7, pc}
 8016474:	20000d14 	.word	0x20000d14

08016478 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8016478:	b590      	push	{r4, r7, lr}
 801647a:	b085      	sub	sp, #20
 801647c:	af00      	add	r7, sp, #0
 801647e:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8016480:	687b      	ldr	r3, [r7, #4]
 8016482:	2b00      	cmp	r3, #0
 8016484:	d003      	beq.n	801648e <LoRaMacParserJoinAccept+0x16>
 8016486:	687b      	ldr	r3, [r7, #4]
 8016488:	681b      	ldr	r3, [r3, #0]
 801648a:	2b00      	cmp	r3, #0
 801648c:	d101      	bne.n	8016492 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 801648e:	2302      	movs	r3, #2
 8016490:	e0de      	b.n	8016650 <LoRaMacParserJoinAccept+0x1d8>
    }

    uint16_t bufItr = 0;
 8016492:	240e      	movs	r4, #14
 8016494:	193b      	adds	r3, r7, r4
 8016496:	2200      	movs	r2, #0
 8016498:	801a      	strh	r2, [r3, #0]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 801649a:	687b      	ldr	r3, [r7, #4]
 801649c:	681a      	ldr	r2, [r3, #0]
 801649e:	193b      	adds	r3, r7, r4
 80164a0:	881b      	ldrh	r3, [r3, #0]
 80164a2:	1939      	adds	r1, r7, r4
 80164a4:	1c58      	adds	r0, r3, #1
 80164a6:	8008      	strh	r0, [r1, #0]
 80164a8:	18d3      	adds	r3, r2, r3
 80164aa:	781a      	ldrb	r2, [r3, #0]
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 80164b0:	687b      	ldr	r3, [r7, #4]
 80164b2:	1d98      	adds	r0, r3, #6
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	681a      	ldr	r2, [r3, #0]
 80164b8:	193b      	adds	r3, r7, r4
 80164ba:	881b      	ldrh	r3, [r3, #0]
 80164bc:	18d3      	adds	r3, r2, r3
 80164be:	2203      	movs	r2, #3
 80164c0:	0019      	movs	r1, r3
 80164c2:	f003 f83f 	bl	8019544 <memcpy1>
    bufItr = bufItr + 3;
 80164c6:	193b      	adds	r3, r7, r4
 80164c8:	193a      	adds	r2, r7, r4
 80164ca:	8812      	ldrh	r2, [r2, #0]
 80164cc:	3203      	adds	r2, #3
 80164ce:	801a      	strh	r2, [r3, #0]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 80164d0:	687b      	ldr	r3, [r7, #4]
 80164d2:	3309      	adds	r3, #9
 80164d4:	0018      	movs	r0, r3
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	681a      	ldr	r2, [r3, #0]
 80164da:	193b      	adds	r3, r7, r4
 80164dc:	881b      	ldrh	r3, [r3, #0]
 80164de:	18d3      	adds	r3, r2, r3
 80164e0:	2203      	movs	r2, #3
 80164e2:	0019      	movs	r1, r3
 80164e4:	f003 f82e 	bl	8019544 <memcpy1>
    bufItr = bufItr + 3;
 80164e8:	193b      	adds	r3, r7, r4
 80164ea:	193a      	adds	r2, r7, r4
 80164ec:	8812      	ldrh	r2, [r2, #0]
 80164ee:	3203      	adds	r2, #3
 80164f0:	801a      	strh	r2, [r3, #0]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	681a      	ldr	r2, [r3, #0]
 80164f6:	193b      	adds	r3, r7, r4
 80164f8:	881b      	ldrh	r3, [r3, #0]
 80164fa:	1939      	adds	r1, r7, r4
 80164fc:	1c58      	adds	r0, r3, #1
 80164fe:	8008      	strh	r0, [r1, #0]
 8016500:	18d3      	adds	r3, r2, r3
 8016502:	781b      	ldrb	r3, [r3, #0]
 8016504:	001a      	movs	r2, r3
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801650a:	687b      	ldr	r3, [r7, #4]
 801650c:	681a      	ldr	r2, [r3, #0]
 801650e:	193b      	adds	r3, r7, r4
 8016510:	881b      	ldrh	r3, [r3, #0]
 8016512:	1939      	adds	r1, r7, r4
 8016514:	1c58      	adds	r0, r3, #1
 8016516:	8008      	strh	r0, [r1, #0]
 8016518:	18d3      	adds	r3, r2, r3
 801651a:	781b      	ldrb	r3, [r3, #0]
 801651c:	021a      	lsls	r2, r3, #8
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	68db      	ldr	r3, [r3, #12]
 8016522:	431a      	orrs	r2, r3
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	681a      	ldr	r2, [r3, #0]
 801652c:	193b      	adds	r3, r7, r4
 801652e:	881b      	ldrh	r3, [r3, #0]
 8016530:	1939      	adds	r1, r7, r4
 8016532:	1c58      	adds	r0, r3, #1
 8016534:	8008      	strh	r0, [r1, #0]
 8016536:	18d3      	adds	r3, r2, r3
 8016538:	781b      	ldrb	r3, [r3, #0]
 801653a:	041a      	lsls	r2, r3, #16
 801653c:	687b      	ldr	r3, [r7, #4]
 801653e:	68db      	ldr	r3, [r3, #12]
 8016540:	431a      	orrs	r2, r3
 8016542:	687b      	ldr	r3, [r7, #4]
 8016544:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	681a      	ldr	r2, [r3, #0]
 801654a:	193b      	adds	r3, r7, r4
 801654c:	881b      	ldrh	r3, [r3, #0]
 801654e:	1939      	adds	r1, r7, r4
 8016550:	1c58      	adds	r0, r3, #1
 8016552:	8008      	strh	r0, [r1, #0]
 8016554:	18d3      	adds	r3, r2, r3
 8016556:	781b      	ldrb	r3, [r3, #0]
 8016558:	061a      	lsls	r2, r3, #24
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	68db      	ldr	r3, [r3, #12]
 801655e:	431a      	orrs	r2, r3
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	681a      	ldr	r2, [r3, #0]
 8016568:	193b      	adds	r3, r7, r4
 801656a:	881b      	ldrh	r3, [r3, #0]
 801656c:	1939      	adds	r1, r7, r4
 801656e:	1c58      	adds	r0, r3, #1
 8016570:	8008      	strh	r0, [r1, #0]
 8016572:	18d3      	adds	r3, r2, r3
 8016574:	781a      	ldrb	r2, [r3, #0]
 8016576:	687b      	ldr	r3, [r7, #4]
 8016578:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	681a      	ldr	r2, [r3, #0]
 801657e:	193b      	adds	r3, r7, r4
 8016580:	881b      	ldrh	r3, [r3, #0]
 8016582:	1939      	adds	r1, r7, r4
 8016584:	1c58      	adds	r0, r3, #1
 8016586:	8008      	strh	r0, [r1, #0]
 8016588:	18d3      	adds	r3, r2, r3
 801658a:	781a      	ldrb	r2, [r3, #0]
 801658c:	687b      	ldr	r3, [r7, #4]
 801658e:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	791b      	ldrb	r3, [r3, #4]
 8016594:	1f1a      	subs	r2, r3, #4
 8016596:	193b      	adds	r3, r7, r4
 8016598:	881b      	ldrh	r3, [r3, #0]
 801659a:	1ad3      	subs	r3, r2, r3
 801659c:	2b10      	cmp	r3, #16
 801659e:	d111      	bne.n	80165c4 <LoRaMacParserJoinAccept+0x14c>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	3312      	adds	r3, #18
 80165a4:	0018      	movs	r0, r3
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	681a      	ldr	r2, [r3, #0]
 80165aa:	193b      	adds	r3, r7, r4
 80165ac:	881b      	ldrh	r3, [r3, #0]
 80165ae:	18d3      	adds	r3, r2, r3
 80165b0:	2210      	movs	r2, #16
 80165b2:	0019      	movs	r1, r3
 80165b4:	f002 ffc6 	bl	8019544 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 80165b8:	193b      	adds	r3, r7, r4
 80165ba:	193a      	adds	r2, r7, r4
 80165bc:	8812      	ldrh	r2, [r2, #0]
 80165be:	3210      	adds	r2, #16
 80165c0:	801a      	strh	r2, [r3, #0]
 80165c2:	e00a      	b.n	80165da <LoRaMacParserJoinAccept+0x162>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	791b      	ldrb	r3, [r3, #4]
 80165c8:	1f1a      	subs	r2, r3, #4
 80165ca:	230e      	movs	r3, #14
 80165cc:	18fb      	adds	r3, r7, r3
 80165ce:	881b      	ldrh	r3, [r3, #0]
 80165d0:	1ad3      	subs	r3, r2, r3
 80165d2:	2b00      	cmp	r3, #0
 80165d4:	dd01      	ble.n	80165da <LoRaMacParserJoinAccept+0x162>
    {
        return LORAMAC_PARSER_FAIL;
 80165d6:	2301      	movs	r3, #1
 80165d8:	e03a      	b.n	8016650 <LoRaMacParserJoinAccept+0x1d8>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 80165da:	687b      	ldr	r3, [r7, #4]
 80165dc:	681a      	ldr	r2, [r3, #0]
 80165de:	240e      	movs	r4, #14
 80165e0:	193b      	adds	r3, r7, r4
 80165e2:	881b      	ldrh	r3, [r3, #0]
 80165e4:	1939      	adds	r1, r7, r4
 80165e6:	1c58      	adds	r0, r3, #1
 80165e8:	8008      	strh	r0, [r1, #0]
 80165ea:	18d3      	adds	r3, r2, r3
 80165ec:	781b      	ldrb	r3, [r3, #0]
 80165ee:	001a      	movs	r2, r3
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	681a      	ldr	r2, [r3, #0]
 80165f8:	193b      	adds	r3, r7, r4
 80165fa:	881b      	ldrh	r3, [r3, #0]
 80165fc:	1939      	adds	r1, r7, r4
 80165fe:	1c58      	adds	r0, r3, #1
 8016600:	8008      	strh	r0, [r1, #0]
 8016602:	18d3      	adds	r3, r2, r3
 8016604:	781b      	ldrb	r3, [r3, #0]
 8016606:	021a      	lsls	r2, r3, #8
 8016608:	687b      	ldr	r3, [r7, #4]
 801660a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801660c:	431a      	orrs	r2, r3
 801660e:	687b      	ldr	r3, [r7, #4]
 8016610:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8016612:	687b      	ldr	r3, [r7, #4]
 8016614:	681a      	ldr	r2, [r3, #0]
 8016616:	193b      	adds	r3, r7, r4
 8016618:	881b      	ldrh	r3, [r3, #0]
 801661a:	1939      	adds	r1, r7, r4
 801661c:	1c58      	adds	r0, r3, #1
 801661e:	8008      	strh	r0, [r1, #0]
 8016620:	18d3      	adds	r3, r2, r3
 8016622:	781b      	ldrb	r3, [r3, #0]
 8016624:	041a      	lsls	r2, r3, #16
 8016626:	687b      	ldr	r3, [r7, #4]
 8016628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801662a:	431a      	orrs	r2, r3
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	681a      	ldr	r2, [r3, #0]
 8016634:	193b      	adds	r3, r7, r4
 8016636:	881b      	ldrh	r3, [r3, #0]
 8016638:	1939      	adds	r1, r7, r4
 801663a:	1c58      	adds	r0, r3, #1
 801663c:	8008      	strh	r0, [r1, #0]
 801663e:	18d3      	adds	r3, r2, r3
 8016640:	781b      	ldrb	r3, [r3, #0]
 8016642:	061a      	lsls	r2, r3, #24
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016648:	431a      	orrs	r2, r3
 801664a:	687b      	ldr	r3, [r7, #4]
 801664c:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 801664e:	2300      	movs	r3, #0
}
 8016650:	0018      	movs	r0, r3
 8016652:	46bd      	mov	sp, r7
 8016654:	b005      	add	sp, #20
 8016656:	bd90      	pop	{r4, r7, pc}

08016658 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8016658:	b590      	push	{r4, r7, lr}
 801665a:	b085      	sub	sp, #20
 801665c:	af00      	add	r7, sp, #0
 801665e:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	2b00      	cmp	r3, #0
 8016664:	d003      	beq.n	801666e <LoRaMacParserData+0x16>
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	681b      	ldr	r3, [r3, #0]
 801666a:	2b00      	cmp	r3, #0
 801666c:	d101      	bne.n	8016672 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 801666e:	2302      	movs	r3, #2
 8016670:	e0fe      	b.n	8016870 <LoRaMacParserData+0x218>
    }

    uint16_t bufItr = 0;
 8016672:	240e      	movs	r4, #14
 8016674:	193b      	adds	r3, r7, r4
 8016676:	2200      	movs	r2, #0
 8016678:	801a      	strh	r2, [r3, #0]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	681a      	ldr	r2, [r3, #0]
 801667e:	193b      	adds	r3, r7, r4
 8016680:	881b      	ldrh	r3, [r3, #0]
 8016682:	1939      	adds	r1, r7, r4
 8016684:	1c58      	adds	r0, r3, #1
 8016686:	8008      	strh	r0, [r1, #0]
 8016688:	18d3      	adds	r3, r2, r3
 801668a:	781a      	ldrb	r2, [r3, #0]
 801668c:	687b      	ldr	r3, [r7, #4]
 801668e:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8016690:	687b      	ldr	r3, [r7, #4]
 8016692:	681a      	ldr	r2, [r3, #0]
 8016694:	193b      	adds	r3, r7, r4
 8016696:	881b      	ldrh	r3, [r3, #0]
 8016698:	1939      	adds	r1, r7, r4
 801669a:	1c58      	adds	r0, r3, #1
 801669c:	8008      	strh	r0, [r1, #0]
 801669e:	18d3      	adds	r3, r2, r3
 80166a0:	781b      	ldrb	r3, [r3, #0]
 80166a2:	001a      	movs	r2, r3
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	681a      	ldr	r2, [r3, #0]
 80166ac:	193b      	adds	r3, r7, r4
 80166ae:	881b      	ldrh	r3, [r3, #0]
 80166b0:	1939      	adds	r1, r7, r4
 80166b2:	1c58      	adds	r0, r3, #1
 80166b4:	8008      	strh	r0, [r1, #0]
 80166b6:	18d3      	adds	r3, r2, r3
 80166b8:	781b      	ldrb	r3, [r3, #0]
 80166ba:	021a      	lsls	r2, r3, #8
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	689b      	ldr	r3, [r3, #8]
 80166c0:	431a      	orrs	r2, r3
 80166c2:	687b      	ldr	r3, [r7, #4]
 80166c4:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	681a      	ldr	r2, [r3, #0]
 80166ca:	193b      	adds	r3, r7, r4
 80166cc:	881b      	ldrh	r3, [r3, #0]
 80166ce:	1939      	adds	r1, r7, r4
 80166d0:	1c58      	adds	r0, r3, #1
 80166d2:	8008      	strh	r0, [r1, #0]
 80166d4:	18d3      	adds	r3, r2, r3
 80166d6:	781b      	ldrb	r3, [r3, #0]
 80166d8:	041a      	lsls	r2, r3, #16
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	689b      	ldr	r3, [r3, #8]
 80166de:	431a      	orrs	r2, r3
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	681a      	ldr	r2, [r3, #0]
 80166e8:	193b      	adds	r3, r7, r4
 80166ea:	881b      	ldrh	r3, [r3, #0]
 80166ec:	1939      	adds	r1, r7, r4
 80166ee:	1c58      	adds	r0, r3, #1
 80166f0:	8008      	strh	r0, [r1, #0]
 80166f2:	18d3      	adds	r3, r2, r3
 80166f4:	781b      	ldrb	r3, [r3, #0]
 80166f6:	061a      	lsls	r2, r3, #24
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	689b      	ldr	r3, [r3, #8]
 80166fc:	431a      	orrs	r2, r3
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8016702:	687b      	ldr	r3, [r7, #4]
 8016704:	681a      	ldr	r2, [r3, #0]
 8016706:	193b      	adds	r3, r7, r4
 8016708:	881b      	ldrh	r3, [r3, #0]
 801670a:	1939      	adds	r1, r7, r4
 801670c:	1c58      	adds	r0, r3, #1
 801670e:	8008      	strh	r0, [r1, #0]
 8016710:	18d3      	adds	r3, r2, r3
 8016712:	781a      	ldrb	r2, [r3, #0]
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	681a      	ldr	r2, [r3, #0]
 801671c:	193b      	adds	r3, r7, r4
 801671e:	881b      	ldrh	r3, [r3, #0]
 8016720:	1939      	adds	r1, r7, r4
 8016722:	1c58      	adds	r0, r3, #1
 8016724:	8008      	strh	r0, [r1, #0]
 8016726:	18d3      	adds	r3, r2, r3
 8016728:	781b      	ldrb	r3, [r3, #0]
 801672a:	b29a      	uxth	r2, r3
 801672c:	687b      	ldr	r3, [r7, #4]
 801672e:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	681a      	ldr	r2, [r3, #0]
 8016734:	193b      	adds	r3, r7, r4
 8016736:	881b      	ldrh	r3, [r3, #0]
 8016738:	1939      	adds	r1, r7, r4
 801673a:	1c58      	adds	r0, r3, #1
 801673c:	8008      	strh	r0, [r1, #0]
 801673e:	18d3      	adds	r3, r2, r3
 8016740:	781b      	ldrb	r3, [r3, #0]
 8016742:	0219      	lsls	r1, r3, #8
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	89db      	ldrh	r3, [r3, #14]
 8016748:	b21a      	sxth	r2, r3
 801674a:	b20b      	sxth	r3, r1
 801674c:	4313      	orrs	r3, r2
 801674e:	b21b      	sxth	r3, r3
 8016750:	b29a      	uxth	r2, r3
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8016756:	687b      	ldr	r3, [r7, #4]
 8016758:	3310      	adds	r3, #16
 801675a:	0018      	movs	r0, r3
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	681a      	ldr	r2, [r3, #0]
 8016760:	193b      	adds	r3, r7, r4
 8016762:	881b      	ldrh	r3, [r3, #0]
 8016764:	18d1      	adds	r1, r2, r3
 8016766:	687b      	ldr	r3, [r7, #4]
 8016768:	7b1b      	ldrb	r3, [r3, #12]
 801676a:	071b      	lsls	r3, r3, #28
 801676c:	0f1b      	lsrs	r3, r3, #28
 801676e:	b2db      	uxtb	r3, r3
 8016770:	b29b      	uxth	r3, r3
 8016772:	001a      	movs	r2, r3
 8016774:	f002 fee6 	bl	8019544 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8016778:	687b      	ldr	r3, [r7, #4]
 801677a:	7b1b      	ldrb	r3, [r3, #12]
 801677c:	071b      	lsls	r3, r3, #28
 801677e:	0f1b      	lsrs	r3, r3, #28
 8016780:	b2db      	uxtb	r3, r3
 8016782:	b299      	uxth	r1, r3
 8016784:	193b      	adds	r3, r7, r4
 8016786:	193a      	adds	r2, r7, r4
 8016788:	8812      	ldrh	r2, [r2, #0]
 801678a:	188a      	adds	r2, r1, r2
 801678c:	801a      	strh	r2, [r3, #0]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 801678e:	687b      	ldr	r3, [r7, #4]
 8016790:	2220      	movs	r2, #32
 8016792:	2100      	movs	r1, #0
 8016794:	5499      	strb	r1, [r3, r2]
    macMsg->FRMPayloadSize = 0;
 8016796:	687b      	ldr	r3, [r7, #4]
 8016798:	2228      	movs	r2, #40	; 0x28
 801679a:	2100      	movs	r1, #0
 801679c:	5499      	strb	r1, [r3, r2]

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	791b      	ldrb	r3, [r3, #4]
 80167a2:	001a      	movs	r2, r3
 80167a4:	193b      	adds	r3, r7, r4
 80167a6:	881b      	ldrh	r3, [r3, #0]
 80167a8:	1ad3      	subs	r3, r2, r3
 80167aa:	2b04      	cmp	r3, #4
 80167ac:	dd2e      	ble.n	801680c <LoRaMacParserData+0x1b4>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	681a      	ldr	r2, [r3, #0]
 80167b2:	193b      	adds	r3, r7, r4
 80167b4:	881b      	ldrh	r3, [r3, #0]
 80167b6:	1939      	adds	r1, r7, r4
 80167b8:	1c58      	adds	r0, r3, #1
 80167ba:	8008      	strh	r0, [r1, #0]
 80167bc:	18d3      	adds	r3, r2, r3
 80167be:	7819      	ldrb	r1, [r3, #0]
 80167c0:	687b      	ldr	r3, [r7, #4]
 80167c2:	2220      	movs	r2, #32
 80167c4:	5499      	strb	r1, [r3, r2]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 80167c6:	687b      	ldr	r3, [r7, #4]
 80167c8:	791a      	ldrb	r2, [r3, #4]
 80167ca:	193b      	adds	r3, r7, r4
 80167cc:	881b      	ldrh	r3, [r3, #0]
 80167ce:	b2db      	uxtb	r3, r3
 80167d0:	1ad3      	subs	r3, r2, r3
 80167d2:	b2db      	uxtb	r3, r3
 80167d4:	3b04      	subs	r3, #4
 80167d6:	b2d9      	uxtb	r1, r3
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	2228      	movs	r2, #40	; 0x28
 80167dc:	5499      	strb	r1, [r3, r2]
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 80167de:	687b      	ldr	r3, [r7, #4]
 80167e0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	681a      	ldr	r2, [r3, #0]
 80167e6:	193b      	adds	r3, r7, r4
 80167e8:	881b      	ldrh	r3, [r3, #0]
 80167ea:	18d1      	adds	r1, r2, r3
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	2228      	movs	r2, #40	; 0x28
 80167f0:	5c9b      	ldrb	r3, [r3, r2]
 80167f2:	b29b      	uxth	r3, r3
 80167f4:	001a      	movs	r2, r3
 80167f6:	f002 fea5 	bl	8019544 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	2228      	movs	r2, #40	; 0x28
 80167fe:	5c9b      	ldrb	r3, [r3, r2]
 8016800:	b299      	uxth	r1, r3
 8016802:	193b      	adds	r3, r7, r4
 8016804:	193a      	adds	r2, r7, r4
 8016806:	8812      	ldrh	r2, [r2, #0]
 8016808:	188a      	adds	r2, r1, r2
 801680a:	801a      	strh	r2, [r3, #0]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	681a      	ldr	r2, [r3, #0]
 8016810:	687b      	ldr	r3, [r7, #4]
 8016812:	791b      	ldrb	r3, [r3, #4]
 8016814:	3b04      	subs	r3, #4
 8016816:	18d3      	adds	r3, r2, r3
 8016818:	781b      	ldrb	r3, [r3, #0]
 801681a:	001a      	movs	r2, r3
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016824:	687b      	ldr	r3, [r7, #4]
 8016826:	6819      	ldr	r1, [r3, #0]
 8016828:	687b      	ldr	r3, [r7, #4]
 801682a:	791b      	ldrb	r3, [r3, #4]
 801682c:	3b03      	subs	r3, #3
 801682e:	18cb      	adds	r3, r1, r3
 8016830:	781b      	ldrb	r3, [r3, #0]
 8016832:	021b      	lsls	r3, r3, #8
 8016834:	431a      	orrs	r2, r3
 8016836:	687b      	ldr	r3, [r7, #4]
 8016838:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801683e:	687b      	ldr	r3, [r7, #4]
 8016840:	6819      	ldr	r1, [r3, #0]
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	791b      	ldrb	r3, [r3, #4]
 8016846:	3b02      	subs	r3, #2
 8016848:	18cb      	adds	r3, r1, r3
 801684a:	781b      	ldrb	r3, [r3, #0]
 801684c:	041b      	lsls	r3, r3, #16
 801684e:	431a      	orrs	r2, r3
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8016854:	687b      	ldr	r3, [r7, #4]
 8016856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016858:	687b      	ldr	r3, [r7, #4]
 801685a:	6819      	ldr	r1, [r3, #0]
 801685c:	687b      	ldr	r3, [r7, #4]
 801685e:	791b      	ldrb	r3, [r3, #4]
 8016860:	3b01      	subs	r3, #1
 8016862:	18cb      	adds	r3, r1, r3
 8016864:	781b      	ldrb	r3, [r3, #0]
 8016866:	061b      	lsls	r3, r3, #24
 8016868:	431a      	orrs	r2, r3
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 801686e:	2300      	movs	r3, #0
}
 8016870:	0018      	movs	r0, r3
 8016872:	46bd      	mov	sp, r7
 8016874:	b005      	add	sp, #20
 8016876:	bd90      	pop	{r4, r7, pc}

08016878 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8016878:	b5b0      	push	{r4, r5, r7, lr}
 801687a:	b084      	sub	sp, #16
 801687c:	af00      	add	r7, sp, #0
 801687e:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8016880:	687b      	ldr	r3, [r7, #4]
 8016882:	2b00      	cmp	r3, #0
 8016884:	d003      	beq.n	801688e <LoRaMacSerializerJoinRequest+0x16>
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	681b      	ldr	r3, [r3, #0]
 801688a:	2b00      	cmp	r3, #0
 801688c:	d101      	bne.n	8016892 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 801688e:	2301      	movs	r3, #1
 8016890:	e089      	b.n	80169a6 <LoRaMacSerializerJoinRequest+0x12e>
    }

    uint16_t bufItr = 0;
 8016892:	230e      	movs	r3, #14
 8016894:	18fb      	adds	r3, r7, r3
 8016896:	2200      	movs	r2, #0
 8016898:	801a      	strh	r2, [r3, #0]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 801689a:	687b      	ldr	r3, [r7, #4]
 801689c:	791b      	ldrb	r3, [r3, #4]
 801689e:	2b16      	cmp	r3, #22
 80168a0:	d801      	bhi.n	80168a6 <LoRaMacSerializerJoinRequest+0x2e>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80168a2:	2302      	movs	r3, #2
 80168a4:	e07f      	b.n	80169a6 <LoRaMacSerializerJoinRequest+0x12e>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	681a      	ldr	r2, [r3, #0]
 80168aa:	240e      	movs	r4, #14
 80168ac:	193b      	adds	r3, r7, r4
 80168ae:	881b      	ldrh	r3, [r3, #0]
 80168b0:	1939      	adds	r1, r7, r4
 80168b2:	1c58      	adds	r0, r3, #1
 80168b4:	8008      	strh	r0, [r1, #0]
 80168b6:	18d3      	adds	r3, r2, r3
 80168b8:	687a      	ldr	r2, [r7, #4]
 80168ba:	7952      	ldrb	r2, [r2, #5]
 80168bc:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 80168be:	687b      	ldr	r3, [r7, #4]
 80168c0:	681a      	ldr	r2, [r3, #0]
 80168c2:	193b      	adds	r3, r7, r4
 80168c4:	881b      	ldrh	r3, [r3, #0]
 80168c6:	18d0      	adds	r0, r2, r3
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	3306      	adds	r3, #6
 80168cc:	2208      	movs	r2, #8
 80168ce:	0019      	movs	r1, r3
 80168d0:	f002 fe54 	bl	801957c <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 80168d4:	193b      	adds	r3, r7, r4
 80168d6:	193a      	adds	r2, r7, r4
 80168d8:	8812      	ldrh	r2, [r2, #0]
 80168da:	3208      	adds	r2, #8
 80168dc:	801a      	strh	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 80168de:	687b      	ldr	r3, [r7, #4]
 80168e0:	681a      	ldr	r2, [r3, #0]
 80168e2:	193b      	adds	r3, r7, r4
 80168e4:	881b      	ldrh	r3, [r3, #0]
 80168e6:	18d0      	adds	r0, r2, r3
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	330e      	adds	r3, #14
 80168ec:	2208      	movs	r2, #8
 80168ee:	0019      	movs	r1, r3
 80168f0:	f002 fe44 	bl	801957c <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 80168f4:	193b      	adds	r3, r7, r4
 80168f6:	0025      	movs	r5, r4
 80168f8:	193a      	adds	r2, r7, r4
 80168fa:	8812      	ldrh	r2, [r2, #0]
 80168fc:	3208      	adds	r2, #8
 80168fe:	801a      	strh	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	8ad8      	ldrh	r0, [r3, #22]
 8016904:	687b      	ldr	r3, [r7, #4]
 8016906:	681a      	ldr	r2, [r3, #0]
 8016908:	197b      	adds	r3, r7, r5
 801690a:	881b      	ldrh	r3, [r3, #0]
 801690c:	1979      	adds	r1, r7, r5
 801690e:	1c5c      	adds	r4, r3, #1
 8016910:	800c      	strh	r4, [r1, #0]
 8016912:	18d3      	adds	r3, r2, r3
 8016914:	b2c2      	uxtb	r2, r0
 8016916:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	8adb      	ldrh	r3, [r3, #22]
 801691c:	0a1b      	lsrs	r3, r3, #8
 801691e:	b298      	uxth	r0, r3
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	681a      	ldr	r2, [r3, #0]
 8016924:	197b      	adds	r3, r7, r5
 8016926:	881b      	ldrh	r3, [r3, #0]
 8016928:	1979      	adds	r1, r7, r5
 801692a:	1c5c      	adds	r4, r3, #1
 801692c:	800c      	strh	r4, [r1, #0]
 801692e:	18d3      	adds	r3, r2, r3
 8016930:	b2c2      	uxtb	r2, r0
 8016932:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8016934:	687b      	ldr	r3, [r7, #4]
 8016936:	6998      	ldr	r0, [r3, #24]
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	681a      	ldr	r2, [r3, #0]
 801693c:	197b      	adds	r3, r7, r5
 801693e:	881b      	ldrh	r3, [r3, #0]
 8016940:	1979      	adds	r1, r7, r5
 8016942:	1c5c      	adds	r4, r3, #1
 8016944:	800c      	strh	r4, [r1, #0]
 8016946:	18d3      	adds	r3, r2, r3
 8016948:	b2c2      	uxtb	r2, r0
 801694a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 801694c:	687b      	ldr	r3, [r7, #4]
 801694e:	699b      	ldr	r3, [r3, #24]
 8016950:	0a18      	lsrs	r0, r3, #8
 8016952:	687b      	ldr	r3, [r7, #4]
 8016954:	681a      	ldr	r2, [r3, #0]
 8016956:	197b      	adds	r3, r7, r5
 8016958:	881b      	ldrh	r3, [r3, #0]
 801695a:	1979      	adds	r1, r7, r5
 801695c:	1c5c      	adds	r4, r3, #1
 801695e:	800c      	strh	r4, [r1, #0]
 8016960:	18d3      	adds	r3, r2, r3
 8016962:	b2c2      	uxtb	r2, r0
 8016964:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	699b      	ldr	r3, [r3, #24]
 801696a:	0c18      	lsrs	r0, r3, #16
 801696c:	687b      	ldr	r3, [r7, #4]
 801696e:	681a      	ldr	r2, [r3, #0]
 8016970:	197b      	adds	r3, r7, r5
 8016972:	881b      	ldrh	r3, [r3, #0]
 8016974:	1979      	adds	r1, r7, r5
 8016976:	1c5c      	adds	r4, r3, #1
 8016978:	800c      	strh	r4, [r1, #0]
 801697a:	18d3      	adds	r3, r2, r3
 801697c:	b2c2      	uxtb	r2, r0
 801697e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8016980:	687b      	ldr	r3, [r7, #4]
 8016982:	699b      	ldr	r3, [r3, #24]
 8016984:	0e18      	lsrs	r0, r3, #24
 8016986:	687b      	ldr	r3, [r7, #4]
 8016988:	681a      	ldr	r2, [r3, #0]
 801698a:	197b      	adds	r3, r7, r5
 801698c:	881b      	ldrh	r3, [r3, #0]
 801698e:	1979      	adds	r1, r7, r5
 8016990:	1c5c      	adds	r4, r3, #1
 8016992:	800c      	strh	r4, [r1, #0]
 8016994:	18d3      	adds	r3, r2, r3
 8016996:	b2c2      	uxtb	r2, r0
 8016998:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 801699a:	197b      	adds	r3, r7, r5
 801699c:	881b      	ldrh	r3, [r3, #0]
 801699e:	b2da      	uxtb	r2, r3
 80169a0:	687b      	ldr	r3, [r7, #4]
 80169a2:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80169a4:	2300      	movs	r3, #0
}
 80169a6:	0018      	movs	r0, r3
 80169a8:	46bd      	mov	sp, r7
 80169aa:	b004      	add	sp, #16
 80169ac:	bdb0      	pop	{r4, r5, r7, pc}

080169ae <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 80169ae:	b5b0      	push	{r4, r5, r7, lr}
 80169b0:	b084      	sub	sp, #16
 80169b2:	af00      	add	r7, sp, #0
 80169b4:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	2b00      	cmp	r3, #0
 80169ba:	d003      	beq.n	80169c4 <LoRaMacSerializerData+0x16>
 80169bc:	687b      	ldr	r3, [r7, #4]
 80169be:	681b      	ldr	r3, [r3, #0]
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	d101      	bne.n	80169c8 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80169c4:	2301      	movs	r3, #1
 80169c6:	e119      	b.n	8016bfc <LoRaMacSerializerData+0x24e>
    }

    uint16_t bufItr = 0;
 80169c8:	230e      	movs	r3, #14
 80169ca:	18fb      	adds	r3, r7, r3
 80169cc:	2200      	movs	r2, #0
 80169ce:	801a      	strh	r2, [r3, #0]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 80169d0:	200c      	movs	r0, #12
 80169d2:	183b      	adds	r3, r7, r0
 80169d4:	2208      	movs	r2, #8
 80169d6:	801a      	strh	r2, [r3, #0]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	7b1b      	ldrb	r3, [r3, #12]
 80169dc:	071b      	lsls	r3, r3, #28
 80169de:	0f1b      	lsrs	r3, r3, #28
 80169e0:	b2db      	uxtb	r3, r3
 80169e2:	b299      	uxth	r1, r3
 80169e4:	183b      	adds	r3, r7, r0
 80169e6:	183a      	adds	r2, r7, r0
 80169e8:	8812      	ldrh	r2, [r2, #0]
 80169ea:	188a      	adds	r2, r1, r2
 80169ec:	801a      	strh	r2, [r3, #0]

    if( macMsg->FRMPayloadSize > 0 )
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	2228      	movs	r2, #40	; 0x28
 80169f2:	5c9b      	ldrb	r3, [r3, r2]
 80169f4:	2b00      	cmp	r3, #0
 80169f6:	d004      	beq.n	8016a02 <LoRaMacSerializerData+0x54>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 80169f8:	183b      	adds	r3, r7, r0
 80169fa:	183a      	adds	r2, r7, r0
 80169fc:	8812      	ldrh	r2, [r2, #0]
 80169fe:	3201      	adds	r2, #1
 8016a00:	801a      	strh	r2, [r3, #0]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	2228      	movs	r2, #40	; 0x28
 8016a06:	5c9b      	ldrb	r3, [r3, r2]
 8016a08:	b299      	uxth	r1, r3
 8016a0a:	200c      	movs	r0, #12
 8016a0c:	183b      	adds	r3, r7, r0
 8016a0e:	183a      	adds	r2, r7, r0
 8016a10:	8812      	ldrh	r2, [r2, #0]
 8016a12:	188a      	adds	r2, r1, r2
 8016a14:	801a      	strh	r2, [r3, #0]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8016a16:	0001      	movs	r1, r0
 8016a18:	187b      	adds	r3, r7, r1
 8016a1a:	187a      	adds	r2, r7, r1
 8016a1c:	8812      	ldrh	r2, [r2, #0]
 8016a1e:	3204      	adds	r2, #4
 8016a20:	801a      	strh	r2, [r3, #0]

    if( macMsg->BufSize < computedBufSize )
 8016a22:	687b      	ldr	r3, [r7, #4]
 8016a24:	791b      	ldrb	r3, [r3, #4]
 8016a26:	b29b      	uxth	r3, r3
 8016a28:	187a      	adds	r2, r7, r1
 8016a2a:	8812      	ldrh	r2, [r2, #0]
 8016a2c:	429a      	cmp	r2, r3
 8016a2e:	d901      	bls.n	8016a34 <LoRaMacSerializerData+0x86>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8016a30:	2302      	movs	r3, #2
 8016a32:	e0e3      	b.n	8016bfc <LoRaMacSerializerData+0x24e>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8016a34:	687b      	ldr	r3, [r7, #4]
 8016a36:	681a      	ldr	r2, [r3, #0]
 8016a38:	250e      	movs	r5, #14
 8016a3a:	197b      	adds	r3, r7, r5
 8016a3c:	881b      	ldrh	r3, [r3, #0]
 8016a3e:	1979      	adds	r1, r7, r5
 8016a40:	1c58      	adds	r0, r3, #1
 8016a42:	8008      	strh	r0, [r1, #0]
 8016a44:	18d3      	adds	r3, r2, r3
 8016a46:	687a      	ldr	r2, [r7, #4]
 8016a48:	7952      	ldrb	r2, [r2, #5]
 8016a4a:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8016a4c:	687b      	ldr	r3, [r7, #4]
 8016a4e:	6898      	ldr	r0, [r3, #8]
 8016a50:	687b      	ldr	r3, [r7, #4]
 8016a52:	681a      	ldr	r2, [r3, #0]
 8016a54:	197b      	adds	r3, r7, r5
 8016a56:	881b      	ldrh	r3, [r3, #0]
 8016a58:	1979      	adds	r1, r7, r5
 8016a5a:	1c5c      	adds	r4, r3, #1
 8016a5c:	800c      	strh	r4, [r1, #0]
 8016a5e:	18d3      	adds	r3, r2, r3
 8016a60:	b2c2      	uxtb	r2, r0
 8016a62:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	689b      	ldr	r3, [r3, #8]
 8016a68:	0a18      	lsrs	r0, r3, #8
 8016a6a:	687b      	ldr	r3, [r7, #4]
 8016a6c:	681a      	ldr	r2, [r3, #0]
 8016a6e:	197b      	adds	r3, r7, r5
 8016a70:	881b      	ldrh	r3, [r3, #0]
 8016a72:	1979      	adds	r1, r7, r5
 8016a74:	1c5c      	adds	r4, r3, #1
 8016a76:	800c      	strh	r4, [r1, #0]
 8016a78:	18d3      	adds	r3, r2, r3
 8016a7a:	b2c2      	uxtb	r2, r0
 8016a7c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8016a7e:	687b      	ldr	r3, [r7, #4]
 8016a80:	689b      	ldr	r3, [r3, #8]
 8016a82:	0c18      	lsrs	r0, r3, #16
 8016a84:	687b      	ldr	r3, [r7, #4]
 8016a86:	681a      	ldr	r2, [r3, #0]
 8016a88:	197b      	adds	r3, r7, r5
 8016a8a:	881b      	ldrh	r3, [r3, #0]
 8016a8c:	1979      	adds	r1, r7, r5
 8016a8e:	1c5c      	adds	r4, r3, #1
 8016a90:	800c      	strh	r4, [r1, #0]
 8016a92:	18d3      	adds	r3, r2, r3
 8016a94:	b2c2      	uxtb	r2, r0
 8016a96:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	689b      	ldr	r3, [r3, #8]
 8016a9c:	0e18      	lsrs	r0, r3, #24
 8016a9e:	687b      	ldr	r3, [r7, #4]
 8016aa0:	681a      	ldr	r2, [r3, #0]
 8016aa2:	197b      	adds	r3, r7, r5
 8016aa4:	881b      	ldrh	r3, [r3, #0]
 8016aa6:	1979      	adds	r1, r7, r5
 8016aa8:	1c5c      	adds	r4, r3, #1
 8016aaa:	800c      	strh	r4, [r1, #0]
 8016aac:	18d3      	adds	r3, r2, r3
 8016aae:	b2c2      	uxtb	r2, r0
 8016ab0:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8016ab2:	687b      	ldr	r3, [r7, #4]
 8016ab4:	681a      	ldr	r2, [r3, #0]
 8016ab6:	197b      	adds	r3, r7, r5
 8016ab8:	881b      	ldrh	r3, [r3, #0]
 8016aba:	1979      	adds	r1, r7, r5
 8016abc:	1c58      	adds	r0, r3, #1
 8016abe:	8008      	strh	r0, [r1, #0]
 8016ac0:	18d3      	adds	r3, r2, r3
 8016ac2:	687a      	ldr	r2, [r7, #4]
 8016ac4:	7b12      	ldrb	r2, [r2, #12]
 8016ac6:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	89d8      	ldrh	r0, [r3, #14]
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	681a      	ldr	r2, [r3, #0]
 8016ad0:	197b      	adds	r3, r7, r5
 8016ad2:	881b      	ldrh	r3, [r3, #0]
 8016ad4:	1979      	adds	r1, r7, r5
 8016ad6:	1c5c      	adds	r4, r3, #1
 8016ad8:	800c      	strh	r4, [r1, #0]
 8016ada:	18d3      	adds	r3, r2, r3
 8016adc:	b2c2      	uxtb	r2, r0
 8016ade:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	89db      	ldrh	r3, [r3, #14]
 8016ae4:	0a1b      	lsrs	r3, r3, #8
 8016ae6:	b298      	uxth	r0, r3
 8016ae8:	687b      	ldr	r3, [r7, #4]
 8016aea:	681a      	ldr	r2, [r3, #0]
 8016aec:	197b      	adds	r3, r7, r5
 8016aee:	881b      	ldrh	r3, [r3, #0]
 8016af0:	1979      	adds	r1, r7, r5
 8016af2:	1c5c      	adds	r4, r3, #1
 8016af4:	800c      	strh	r4, [r1, #0]
 8016af6:	18d3      	adds	r3, r2, r3
 8016af8:	b2c2      	uxtb	r2, r0
 8016afa:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	681a      	ldr	r2, [r3, #0]
 8016b00:	002c      	movs	r4, r5
 8016b02:	197b      	adds	r3, r7, r5
 8016b04:	881b      	ldrh	r3, [r3, #0]
 8016b06:	18d0      	adds	r0, r2, r3
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	3310      	adds	r3, #16
 8016b0c:	0019      	movs	r1, r3
 8016b0e:	687b      	ldr	r3, [r7, #4]
 8016b10:	7b1b      	ldrb	r3, [r3, #12]
 8016b12:	071b      	lsls	r3, r3, #28
 8016b14:	0f1b      	lsrs	r3, r3, #28
 8016b16:	b2db      	uxtb	r3, r3
 8016b18:	b29b      	uxth	r3, r3
 8016b1a:	001a      	movs	r2, r3
 8016b1c:	f002 fd12 	bl	8019544 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	7b1b      	ldrb	r3, [r3, #12]
 8016b24:	071b      	lsls	r3, r3, #28
 8016b26:	0f1b      	lsrs	r3, r3, #28
 8016b28:	b2db      	uxtb	r3, r3
 8016b2a:	b299      	uxth	r1, r3
 8016b2c:	193b      	adds	r3, r7, r4
 8016b2e:	193a      	adds	r2, r7, r4
 8016b30:	8812      	ldrh	r2, [r2, #0]
 8016b32:	188a      	adds	r2, r1, r2
 8016b34:	801a      	strh	r2, [r3, #0]

    if( macMsg->FRMPayloadSize > 0 )
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	2228      	movs	r2, #40	; 0x28
 8016b3a:	5c9b      	ldrb	r3, [r3, r2]
 8016b3c:	2b00      	cmp	r3, #0
 8016b3e:	d00b      	beq.n	8016b58 <LoRaMacSerializerData+0x1aa>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8016b40:	687b      	ldr	r3, [r7, #4]
 8016b42:	681a      	ldr	r2, [r3, #0]
 8016b44:	193b      	adds	r3, r7, r4
 8016b46:	881b      	ldrh	r3, [r3, #0]
 8016b48:	1939      	adds	r1, r7, r4
 8016b4a:	1c58      	adds	r0, r3, #1
 8016b4c:	8008      	strh	r0, [r1, #0]
 8016b4e:	18d3      	adds	r3, r2, r3
 8016b50:	687a      	ldr	r2, [r7, #4]
 8016b52:	2120      	movs	r1, #32
 8016b54:	5c52      	ldrb	r2, [r2, r1]
 8016b56:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8016b58:	687b      	ldr	r3, [r7, #4]
 8016b5a:	681a      	ldr	r2, [r3, #0]
 8016b5c:	240e      	movs	r4, #14
 8016b5e:	193b      	adds	r3, r7, r4
 8016b60:	881b      	ldrh	r3, [r3, #0]
 8016b62:	18d0      	adds	r0, r2, r3
 8016b64:	687b      	ldr	r3, [r7, #4]
 8016b66:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8016b68:	687b      	ldr	r3, [r7, #4]
 8016b6a:	2228      	movs	r2, #40	; 0x28
 8016b6c:	5c9b      	ldrb	r3, [r3, r2]
 8016b6e:	b29b      	uxth	r3, r3
 8016b70:	001a      	movs	r2, r3
 8016b72:	f002 fce7 	bl	8019544 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8016b76:	687b      	ldr	r3, [r7, #4]
 8016b78:	2228      	movs	r2, #40	; 0x28
 8016b7a:	5c9b      	ldrb	r3, [r3, r2]
 8016b7c:	b299      	uxth	r1, r3
 8016b7e:	193b      	adds	r3, r7, r4
 8016b80:	193a      	adds	r2, r7, r4
 8016b82:	8812      	ldrh	r2, [r2, #0]
 8016b84:	188a      	adds	r2, r1, r2
 8016b86:	801a      	strh	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8016b8c:	687b      	ldr	r3, [r7, #4]
 8016b8e:	681a      	ldr	r2, [r3, #0]
 8016b90:	193b      	adds	r3, r7, r4
 8016b92:	881b      	ldrh	r3, [r3, #0]
 8016b94:	0025      	movs	r5, r4
 8016b96:	1939      	adds	r1, r7, r4
 8016b98:	1c5c      	adds	r4, r3, #1
 8016b9a:	800c      	strh	r4, [r1, #0]
 8016b9c:	18d3      	adds	r3, r2, r3
 8016b9e:	b2c2      	uxtb	r2, r0
 8016ba0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8016ba2:	687b      	ldr	r3, [r7, #4]
 8016ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ba6:	0a18      	lsrs	r0, r3, #8
 8016ba8:	687b      	ldr	r3, [r7, #4]
 8016baa:	681a      	ldr	r2, [r3, #0]
 8016bac:	197b      	adds	r3, r7, r5
 8016bae:	881b      	ldrh	r3, [r3, #0]
 8016bb0:	1979      	adds	r1, r7, r5
 8016bb2:	1c5c      	adds	r4, r3, #1
 8016bb4:	800c      	strh	r4, [r1, #0]
 8016bb6:	18d3      	adds	r3, r2, r3
 8016bb8:	b2c2      	uxtb	r2, r0
 8016bba:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8016bbc:	687b      	ldr	r3, [r7, #4]
 8016bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016bc0:	0c18      	lsrs	r0, r3, #16
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	681a      	ldr	r2, [r3, #0]
 8016bc6:	197b      	adds	r3, r7, r5
 8016bc8:	881b      	ldrh	r3, [r3, #0]
 8016bca:	1979      	adds	r1, r7, r5
 8016bcc:	1c5c      	adds	r4, r3, #1
 8016bce:	800c      	strh	r4, [r1, #0]
 8016bd0:	18d3      	adds	r3, r2, r3
 8016bd2:	b2c2      	uxtb	r2, r0
 8016bd4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8016bd6:	687b      	ldr	r3, [r7, #4]
 8016bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016bda:	0e18      	lsrs	r0, r3, #24
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	681a      	ldr	r2, [r3, #0]
 8016be0:	197b      	adds	r3, r7, r5
 8016be2:	881b      	ldrh	r3, [r3, #0]
 8016be4:	1979      	adds	r1, r7, r5
 8016be6:	1c5c      	adds	r4, r3, #1
 8016be8:	800c      	strh	r4, [r1, #0]
 8016bea:	18d3      	adds	r3, r2, r3
 8016bec:	b2c2      	uxtb	r2, r0
 8016bee:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8016bf0:	197b      	adds	r3, r7, r5
 8016bf2:	881b      	ldrh	r3, [r3, #0]
 8016bf4:	b2da      	uxtb	r2, r3
 8016bf6:	687b      	ldr	r3, [r7, #4]
 8016bf8:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8016bfa:	2300      	movs	r3, #0
}
 8016bfc:	0018      	movs	r0, r3
 8016bfe:	46bd      	mov	sp, r7
 8016c00:	b004      	add	sp, #16
 8016c02:	bdb0      	pop	{r4, r5, r7, pc}

08016c04 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8016c04:	b580      	push	{r7, lr}
 8016c06:	b082      	sub	sp, #8
 8016c08:	af00      	add	r7, sp, #0
 8016c0a:	0002      	movs	r2, r0
 8016c0c:	1dfb      	adds	r3, r7, #7
 8016c0e:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016c10:	1dfb      	adds	r3, r7, #7
 8016c12:	781b      	ldrb	r3, [r3, #0]
 8016c14:	2b05      	cmp	r3, #5
 8016c16:	d101      	bne.n	8016c1c <RegionIsActive+0x18>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 8016c18:	2301      	movs	r3, #1
 8016c1a:	e000      	b.n	8016c1e <RegionIsActive+0x1a>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8016c1c:	2300      	movs	r3, #0
        }
    }
}
 8016c1e:	0018      	movs	r0, r3
 8016c20:	46bd      	mov	sp, r7
 8016c22:	b002      	add	sp, #8
 8016c24:	bd80      	pop	{r7, pc}

08016c26 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8016c26:	b580      	push	{r7, lr}
 8016c28:	b084      	sub	sp, #16
 8016c2a:	af00      	add	r7, sp, #0
 8016c2c:	0002      	movs	r2, r0
 8016c2e:	6039      	str	r1, [r7, #0]
 8016c30:	1dfb      	adds	r3, r7, #7
 8016c32:	701a      	strb	r2, [r3, #0]
    PhyParam_t phyParam = { 0 };
 8016c34:	2308      	movs	r3, #8
 8016c36:	18fb      	adds	r3, r7, r3
 8016c38:	2200      	movs	r2, #0
 8016c3a:	601a      	str	r2, [r3, #0]
    switch( region )
 8016c3c:	1dfb      	adds	r3, r7, #7
 8016c3e:	781b      	ldrb	r3, [r3, #0]
 8016c40:	2b05      	cmp	r3, #5
 8016c42:	d109      	bne.n	8016c58 <RegionGetPhyParam+0x32>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 8016c44:	683b      	ldr	r3, [r7, #0]
 8016c46:	0018      	movs	r0, r3
 8016c48:	f001 fa5e 	bl	8018108 <RegionEU868GetPhyParam>
 8016c4c:	0003      	movs	r3, r0
 8016c4e:	001a      	movs	r2, r3
 8016c50:	230c      	movs	r3, #12
 8016c52:	18fb      	adds	r3, r7, r3
 8016c54:	601a      	str	r2, [r3, #0]
 8016c56:	e005      	b.n	8016c64 <RegionGetPhyParam+0x3e>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8016c58:	230c      	movs	r3, #12
 8016c5a:	18fb      	adds	r3, r7, r3
 8016c5c:	2208      	movs	r2, #8
 8016c5e:	18ba      	adds	r2, r7, r2
 8016c60:	6812      	ldr	r2, [r2, #0]
 8016c62:	601a      	str	r2, [r3, #0]
 8016c64:	230c      	movs	r3, #12
 8016c66:	18fb      	adds	r3, r7, r3
 8016c68:	2200      	movs	r2, #0
 8016c6a:	681a      	ldr	r2, [r3, #0]
 8016c6c:	0013      	movs	r3, r2
        }
    }
}
 8016c6e:	0018      	movs	r0, r3
 8016c70:	46bd      	mov	sp, r7
 8016c72:	b004      	add	sp, #16
 8016c74:	bd80      	pop	{r7, pc}

08016c76 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8016c76:	b580      	push	{r7, lr}
 8016c78:	b082      	sub	sp, #8
 8016c7a:	af00      	add	r7, sp, #0
 8016c7c:	0002      	movs	r2, r0
 8016c7e:	6039      	str	r1, [r7, #0]
 8016c80:	1dfb      	adds	r3, r7, #7
 8016c82:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016c84:	1dfb      	adds	r3, r7, #7
 8016c86:	781b      	ldrb	r3, [r3, #0]
 8016c88:	2b05      	cmp	r3, #5
 8016c8a:	d104      	bne.n	8016c96 <RegionSetBandTxDone+0x20>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 8016c8c:	683b      	ldr	r3, [r7, #0]
 8016c8e:	0018      	movs	r0, r3
 8016c90:	f001 fb5a 	bl	8018348 <RegionEU868SetBandTxDone>
 8016c94:	e000      	b.n	8016c98 <RegionSetBandTxDone+0x22>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8016c96:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8016c98:	46bd      	mov	sp, r7
 8016c9a:	b002      	add	sp, #8
 8016c9c:	bd80      	pop	{r7, pc}

08016c9e <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8016c9e:	b580      	push	{r7, lr}
 8016ca0:	b082      	sub	sp, #8
 8016ca2:	af00      	add	r7, sp, #0
 8016ca4:	0002      	movs	r2, r0
 8016ca6:	6039      	str	r1, [r7, #0]
 8016ca8:	1dfb      	adds	r3, r7, #7
 8016caa:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016cac:	1dfb      	adds	r3, r7, #7
 8016cae:	781b      	ldrb	r3, [r3, #0]
 8016cb0:	2b05      	cmp	r3, #5
 8016cb2:	d104      	bne.n	8016cbe <RegionInitDefaults+0x20>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 8016cb4:	683b      	ldr	r3, [r7, #0]
 8016cb6:	0018      	movs	r0, r3
 8016cb8:	f001 fb72 	bl	80183a0 <RegionEU868InitDefaults>
 8016cbc:	e000      	b.n	8016cc0 <RegionInitDefaults+0x22>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8016cbe:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8016cc0:	46c0      	nop			; (mov r8, r8)
 8016cc2:	46bd      	mov	sp, r7
 8016cc4:	b002      	add	sp, #8
 8016cc6:	bd80      	pop	{r7, pc}

08016cc8 <RegionGetNvmCtx>:

void* RegionGetNvmCtx( LoRaMacRegion_t region, GetNvmCtxParams_t* params )
{
 8016cc8:	b580      	push	{r7, lr}
 8016cca:	b082      	sub	sp, #8
 8016ccc:	af00      	add	r7, sp, #0
 8016cce:	0002      	movs	r2, r0
 8016cd0:	6039      	str	r1, [r7, #0]
 8016cd2:	1dfb      	adds	r3, r7, #7
 8016cd4:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016cd6:	1dfb      	adds	r3, r7, #7
 8016cd8:	781b      	ldrb	r3, [r3, #0]
 8016cda:	2b05      	cmp	r3, #5
 8016cdc:	d105      	bne.n	8016cea <RegionGetNvmCtx+0x22>
        AS923_GET_NVM_CTX( );
        AU915_GET_NVM_CTX( );
        CN470_GET_NVM_CTX( );
        CN779_GET_NVM_CTX( );
        EU433_GET_NVM_CTX( );
        EU868_GET_NVM_CTX( );
 8016cde:	683b      	ldr	r3, [r7, #0]
 8016ce0:	0018      	movs	r0, r3
 8016ce2:	f001 fbf1 	bl	80184c8 <RegionEU868GetNvmCtx>
 8016ce6:	0003      	movs	r3, r0
 8016ce8:	e000      	b.n	8016cec <RegionGetNvmCtx+0x24>
        IN865_GET_NVM_CTX( );
        US915_GET_NVM_CTX( );
        RU864_GET_NVM_CTX( );
        default:
        {
           return 0;
 8016cea:	2300      	movs	r3, #0
        }
    }
}
 8016cec:	0018      	movs	r0, r3
 8016cee:	46bd      	mov	sp, r7
 8016cf0:	b002      	add	sp, #8
 8016cf2:	bd80      	pop	{r7, pc}

08016cf4 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8016cf4:	b580      	push	{r7, lr}
 8016cf6:	b082      	sub	sp, #8
 8016cf8:	af00      	add	r7, sp, #0
 8016cfa:	6039      	str	r1, [r7, #0]
 8016cfc:	0011      	movs	r1, r2
 8016cfe:	1dfb      	adds	r3, r7, #7
 8016d00:	1c02      	adds	r2, r0, #0
 8016d02:	701a      	strb	r2, [r3, #0]
 8016d04:	1dbb      	adds	r3, r7, #6
 8016d06:	1c0a      	adds	r2, r1, #0
 8016d08:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016d0a:	1dfb      	adds	r3, r7, #7
 8016d0c:	781b      	ldrb	r3, [r3, #0]
 8016d0e:	2b05      	cmp	r3, #5
 8016d10:	d108      	bne.n	8016d24 <RegionVerify+0x30>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 8016d12:	1dbb      	adds	r3, r7, #6
 8016d14:	781a      	ldrb	r2, [r3, #0]
 8016d16:	683b      	ldr	r3, [r7, #0]
 8016d18:	0011      	movs	r1, r2
 8016d1a:	0018      	movs	r0, r3
 8016d1c:	f001 fbe4 	bl	80184e8 <RegionEU868Verify>
 8016d20:	0003      	movs	r3, r0
 8016d22:	e000      	b.n	8016d26 <RegionVerify+0x32>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 8016d24:	2300      	movs	r3, #0
        }
    }
}
 8016d26:	0018      	movs	r0, r3
 8016d28:	46bd      	mov	sp, r7
 8016d2a:	b002      	add	sp, #8
 8016d2c:	bd80      	pop	{r7, pc}

08016d2e <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8016d2e:	b580      	push	{r7, lr}
 8016d30:	b082      	sub	sp, #8
 8016d32:	af00      	add	r7, sp, #0
 8016d34:	0002      	movs	r2, r0
 8016d36:	6039      	str	r1, [r7, #0]
 8016d38:	1dfb      	adds	r3, r7, #7
 8016d3a:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016d3c:	1dfb      	adds	r3, r7, #7
 8016d3e:	781b      	ldrb	r3, [r3, #0]
 8016d40:	2b05      	cmp	r3, #5
 8016d42:	d104      	bne.n	8016d4e <RegionApplyCFList+0x20>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 8016d44:	683b      	ldr	r3, [r7, #0]
 8016d46:	0018      	movs	r0, r3
 8016d48:	f001 fc28 	bl	801859c <RegionEU868ApplyCFList>
 8016d4c:	e000      	b.n	8016d50 <RegionApplyCFList+0x22>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8016d4e:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8016d50:	46c0      	nop			; (mov r8, r8)
 8016d52:	46bd      	mov	sp, r7
 8016d54:	b002      	add	sp, #8
 8016d56:	bd80      	pop	{r7, pc}

08016d58 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8016d58:	b580      	push	{r7, lr}
 8016d5a:	b082      	sub	sp, #8
 8016d5c:	af00      	add	r7, sp, #0
 8016d5e:	0002      	movs	r2, r0
 8016d60:	6039      	str	r1, [r7, #0]
 8016d62:	1dfb      	adds	r3, r7, #7
 8016d64:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016d66:	1dfb      	adds	r3, r7, #7
 8016d68:	781b      	ldrb	r3, [r3, #0]
 8016d6a:	2b05      	cmp	r3, #5
 8016d6c:	d105      	bne.n	8016d7a <RegionChanMaskSet+0x22>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 8016d6e:	683b      	ldr	r3, [r7, #0]
 8016d70:	0018      	movs	r0, r3
 8016d72:	f001 fca3 	bl	80186bc <RegionEU868ChanMaskSet>
 8016d76:	0003      	movs	r3, r0
 8016d78:	e000      	b.n	8016d7c <RegionChanMaskSet+0x24>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8016d7a:	2300      	movs	r3, #0
        }
    }
}
 8016d7c:	0018      	movs	r0, r3
 8016d7e:	46bd      	mov	sp, r7
 8016d80:	b002      	add	sp, #8
 8016d82:	bd80      	pop	{r7, pc}

08016d84 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8016d84:	b590      	push	{r4, r7, lr}
 8016d86:	b083      	sub	sp, #12
 8016d88:	af00      	add	r7, sp, #0
 8016d8a:	0004      	movs	r4, r0
 8016d8c:	0008      	movs	r0, r1
 8016d8e:	0011      	movs	r1, r2
 8016d90:	603b      	str	r3, [r7, #0]
 8016d92:	1dfb      	adds	r3, r7, #7
 8016d94:	1c22      	adds	r2, r4, #0
 8016d96:	701a      	strb	r2, [r3, #0]
 8016d98:	1dbb      	adds	r3, r7, #6
 8016d9a:	1c02      	adds	r2, r0, #0
 8016d9c:	701a      	strb	r2, [r3, #0]
 8016d9e:	1d7b      	adds	r3, r7, #5
 8016da0:	1c0a      	adds	r2, r1, #0
 8016da2:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016da4:	1dfb      	adds	r3, r7, #7
 8016da6:	781b      	ldrb	r3, [r3, #0]
 8016da8:	2b05      	cmp	r3, #5
 8016daa:	d10a      	bne.n	8016dc2 <RegionComputeRxWindowParameters+0x3e>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 8016dac:	69bc      	ldr	r4, [r7, #24]
 8016dae:	683a      	ldr	r2, [r7, #0]
 8016db0:	1d7b      	adds	r3, r7, #5
 8016db2:	7819      	ldrb	r1, [r3, #0]
 8016db4:	1dbb      	adds	r3, r7, #6
 8016db6:	2000      	movs	r0, #0
 8016db8:	5618      	ldrsb	r0, [r3, r0]
 8016dba:	0023      	movs	r3, r4
 8016dbc:	f001 fca4 	bl	8018708 <RegionEU868ComputeRxWindowParameters>
 8016dc0:	e000      	b.n	8016dc4 <RegionComputeRxWindowParameters+0x40>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8016dc2:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8016dc4:	46c0      	nop			; (mov r8, r8)
 8016dc6:	46bd      	mov	sp, r7
 8016dc8:	b003      	add	sp, #12
 8016dca:	bd90      	pop	{r4, r7, pc}

08016dcc <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8016dcc:	b580      	push	{r7, lr}
 8016dce:	b084      	sub	sp, #16
 8016dd0:	af00      	add	r7, sp, #0
 8016dd2:	60b9      	str	r1, [r7, #8]
 8016dd4:	607a      	str	r2, [r7, #4]
 8016dd6:	210f      	movs	r1, #15
 8016dd8:	187b      	adds	r3, r7, r1
 8016dda:	1c02      	adds	r2, r0, #0
 8016ddc:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016dde:	187b      	adds	r3, r7, r1
 8016de0:	781b      	ldrb	r3, [r3, #0]
 8016de2:	2b05      	cmp	r3, #5
 8016de4:	d107      	bne.n	8016df6 <RegionRxConfig+0x2a>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8016de6:	687a      	ldr	r2, [r7, #4]
 8016de8:	68bb      	ldr	r3, [r7, #8]
 8016dea:	0011      	movs	r1, r2
 8016dec:	0018      	movs	r0, r3
 8016dee:	f001 fced 	bl	80187cc <RegionEU868RxConfig>
 8016df2:	0003      	movs	r3, r0
 8016df4:	e000      	b.n	8016df8 <RegionRxConfig+0x2c>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8016df6:	2300      	movs	r3, #0
        }
    }
}
 8016df8:	0018      	movs	r0, r3
 8016dfa:	46bd      	mov	sp, r7
 8016dfc:	b004      	add	sp, #16
 8016dfe:	bd80      	pop	{r7, pc}

08016e00 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8016e00:	b580      	push	{r7, lr}
 8016e02:	b084      	sub	sp, #16
 8016e04:	af00      	add	r7, sp, #0
 8016e06:	60b9      	str	r1, [r7, #8]
 8016e08:	607a      	str	r2, [r7, #4]
 8016e0a:	603b      	str	r3, [r7, #0]
 8016e0c:	210f      	movs	r1, #15
 8016e0e:	187b      	adds	r3, r7, r1
 8016e10:	1c02      	adds	r2, r0, #0
 8016e12:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016e14:	187b      	adds	r3, r7, r1
 8016e16:	781b      	ldrb	r3, [r3, #0]
 8016e18:	2b05      	cmp	r3, #5
 8016e1a:	d107      	bne.n	8016e2c <RegionTxConfig+0x2c>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8016e1c:	683a      	ldr	r2, [r7, #0]
 8016e1e:	6879      	ldr	r1, [r7, #4]
 8016e20:	68bb      	ldr	r3, [r7, #8]
 8016e22:	0018      	movs	r0, r3
 8016e24:	f001 fdc6 	bl	80189b4 <RegionEU868TxConfig>
 8016e28:	0003      	movs	r3, r0
 8016e2a:	e000      	b.n	8016e2e <RegionTxConfig+0x2e>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8016e2c:	2300      	movs	r3, #0
        }
    }
}
 8016e2e:	0018      	movs	r0, r3
 8016e30:	46bd      	mov	sp, r7
 8016e32:	b004      	add	sp, #16
 8016e34:	bd80      	pop	{r7, pc}

08016e36 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8016e36:	b590      	push	{r4, r7, lr}
 8016e38:	b087      	sub	sp, #28
 8016e3a:	af02      	add	r7, sp, #8
 8016e3c:	60b9      	str	r1, [r7, #8]
 8016e3e:	607a      	str	r2, [r7, #4]
 8016e40:	603b      	str	r3, [r7, #0]
 8016e42:	210f      	movs	r1, #15
 8016e44:	187b      	adds	r3, r7, r1
 8016e46:	1c02      	adds	r2, r0, #0
 8016e48:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016e4a:	187b      	adds	r3, r7, r1
 8016e4c:	781b      	ldrb	r3, [r3, #0]
 8016e4e:	2b05      	cmp	r3, #5
 8016e50:	d10a      	bne.n	8016e68 <RegionLinkAdrReq+0x32>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 8016e52:	6a3c      	ldr	r4, [r7, #32]
 8016e54:	683a      	ldr	r2, [r7, #0]
 8016e56:	6879      	ldr	r1, [r7, #4]
 8016e58:	68b8      	ldr	r0, [r7, #8]
 8016e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e5c:	9300      	str	r3, [sp, #0]
 8016e5e:	0023      	movs	r3, r4
 8016e60:	f001 fe94 	bl	8018b8c <RegionEU868LinkAdrReq>
 8016e64:	0003      	movs	r3, r0
 8016e66:	e000      	b.n	8016e6a <RegionLinkAdrReq+0x34>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8016e68:	2300      	movs	r3, #0
        }
    }
}
 8016e6a:	0018      	movs	r0, r3
 8016e6c:	46bd      	mov	sp, r7
 8016e6e:	b005      	add	sp, #20
 8016e70:	bd90      	pop	{r4, r7, pc}

08016e72 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8016e72:	b580      	push	{r7, lr}
 8016e74:	b082      	sub	sp, #8
 8016e76:	af00      	add	r7, sp, #0
 8016e78:	0002      	movs	r2, r0
 8016e7a:	6039      	str	r1, [r7, #0]
 8016e7c:	1dfb      	adds	r3, r7, #7
 8016e7e:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016e80:	1dfb      	adds	r3, r7, #7
 8016e82:	781b      	ldrb	r3, [r3, #0]
 8016e84:	2b05      	cmp	r3, #5
 8016e86:	d105      	bne.n	8016e94 <RegionRxParamSetupReq+0x22>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 8016e88:	683b      	ldr	r3, [r7, #0]
 8016e8a:	0018      	movs	r0, r3
 8016e8c:	f001 ffd6 	bl	8018e3c <RegionEU868RxParamSetupReq>
 8016e90:	0003      	movs	r3, r0
 8016e92:	e000      	b.n	8016e96 <RegionRxParamSetupReq+0x24>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8016e94:	2300      	movs	r3, #0
        }
    }
}
 8016e96:	0018      	movs	r0, r3
 8016e98:	46bd      	mov	sp, r7
 8016e9a:	b002      	add	sp, #8
 8016e9c:	bd80      	pop	{r7, pc}

08016e9e <RegionNewChannelReq>:

uint8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8016e9e:	b580      	push	{r7, lr}
 8016ea0:	b082      	sub	sp, #8
 8016ea2:	af00      	add	r7, sp, #0
 8016ea4:	0002      	movs	r2, r0
 8016ea6:	6039      	str	r1, [r7, #0]
 8016ea8:	1dfb      	adds	r3, r7, #7
 8016eaa:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016eac:	1dfb      	adds	r3, r7, #7
 8016eae:	781b      	ldrb	r3, [r3, #0]
 8016eb0:	2b05      	cmp	r3, #5
 8016eb2:	d105      	bne.n	8016ec0 <RegionNewChannelReq+0x22>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 8016eb4:	683b      	ldr	r3, [r7, #0]
 8016eb6:	0018      	movs	r0, r3
 8016eb8:	f002 f809 	bl	8018ece <RegionEU868NewChannelReq>
 8016ebc:	0003      	movs	r3, r0
 8016ebe:	e000      	b.n	8016ec2 <RegionNewChannelReq+0x24>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8016ec0:	2300      	movs	r3, #0
        }
    }
}
 8016ec2:	0018      	movs	r0, r3
 8016ec4:	46bd      	mov	sp, r7
 8016ec6:	b002      	add	sp, #8
 8016ec8:	bd80      	pop	{r7, pc}

08016eca <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8016eca:	b580      	push	{r7, lr}
 8016ecc:	b082      	sub	sp, #8
 8016ece:	af00      	add	r7, sp, #0
 8016ed0:	0002      	movs	r2, r0
 8016ed2:	6039      	str	r1, [r7, #0]
 8016ed4:	1dfb      	adds	r3, r7, #7
 8016ed6:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016ed8:	1dfb      	adds	r3, r7, #7
 8016eda:	781b      	ldrb	r3, [r3, #0]
 8016edc:	2b05      	cmp	r3, #5
 8016ede:	d105      	bne.n	8016eec <RegionTxParamSetupReq+0x22>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 8016ee0:	683b      	ldr	r3, [r7, #0]
 8016ee2:	0018      	movs	r0, r3
 8016ee4:	f002 f85b 	bl	8018f9e <RegionEU868TxParamSetupReq>
 8016ee8:	0003      	movs	r3, r0
 8016eea:	e000      	b.n	8016eee <RegionTxParamSetupReq+0x24>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8016eec:	2300      	movs	r3, #0
        }
    }
}
 8016eee:	0018      	movs	r0, r3
 8016ef0:	46bd      	mov	sp, r7
 8016ef2:	b002      	add	sp, #8
 8016ef4:	bd80      	pop	{r7, pc}

08016ef6 <RegionDlChannelReq>:

uint8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8016ef6:	b580      	push	{r7, lr}
 8016ef8:	b082      	sub	sp, #8
 8016efa:	af00      	add	r7, sp, #0
 8016efc:	0002      	movs	r2, r0
 8016efe:	6039      	str	r1, [r7, #0]
 8016f00:	1dfb      	adds	r3, r7, #7
 8016f02:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016f04:	1dfb      	adds	r3, r7, #7
 8016f06:	781b      	ldrb	r3, [r3, #0]
 8016f08:	2b05      	cmp	r3, #5
 8016f0a:	d105      	bne.n	8016f18 <RegionDlChannelReq+0x22>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8016f0c:	683b      	ldr	r3, [r7, #0]
 8016f0e:	0018      	movs	r0, r3
 8016f10:	f002 f850 	bl	8018fb4 <RegionEU868DlChannelReq>
 8016f14:	0003      	movs	r3, r0
 8016f16:	e000      	b.n	8016f1a <RegionDlChannelReq+0x24>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8016f18:	2300      	movs	r3, #0
        }
    }
}
 8016f1a:	0018      	movs	r0, r3
 8016f1c:	46bd      	mov	sp, r7
 8016f1e:	b002      	add	sp, #8
 8016f20:	bd80      	pop	{r7, pc}

08016f22 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8016f22:	b590      	push	{r4, r7, lr}
 8016f24:	b083      	sub	sp, #12
 8016f26:	af00      	add	r7, sp, #0
 8016f28:	0004      	movs	r4, r0
 8016f2a:	0008      	movs	r0, r1
 8016f2c:	0011      	movs	r1, r2
 8016f2e:	1dfb      	adds	r3, r7, #7
 8016f30:	1c22      	adds	r2, r4, #0
 8016f32:	701a      	strb	r2, [r3, #0]
 8016f34:	1dbb      	adds	r3, r7, #6
 8016f36:	1c02      	adds	r2, r0, #0
 8016f38:	701a      	strb	r2, [r3, #0]
 8016f3a:	1d7b      	adds	r3, r7, #5
 8016f3c:	1c0a      	adds	r2, r1, #0
 8016f3e:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016f40:	1dfb      	adds	r3, r7, #7
 8016f42:	781b      	ldrb	r3, [r3, #0]
 8016f44:	2b05      	cmp	r3, #5
 8016f46:	d10a      	bne.n	8016f5e <RegionAlternateDr+0x3c>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8016f48:	1d7b      	adds	r3, r7, #5
 8016f4a:	781a      	ldrb	r2, [r3, #0]
 8016f4c:	1dbb      	adds	r3, r7, #6
 8016f4e:	781b      	ldrb	r3, [r3, #0]
 8016f50:	b25b      	sxtb	r3, r3
 8016f52:	0011      	movs	r1, r2
 8016f54:	0018      	movs	r0, r3
 8016f56:	f002 f87b 	bl	8019050 <RegionEU868AlternateDr>
 8016f5a:	0003      	movs	r3, r0
 8016f5c:	e000      	b.n	8016f60 <RegionAlternateDr+0x3e>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8016f5e:	2300      	movs	r3, #0
        }
    }
}
 8016f60:	0018      	movs	r0, r3
 8016f62:	46bd      	mov	sp, r7
 8016f64:	b003      	add	sp, #12
 8016f66:	bd90      	pop	{r4, r7, pc}

08016f68 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8016f68:	b580      	push	{r7, lr}
 8016f6a:	b084      	sub	sp, #16
 8016f6c:	af00      	add	r7, sp, #0
 8016f6e:	60b9      	str	r1, [r7, #8]
 8016f70:	607a      	str	r2, [r7, #4]
 8016f72:	603b      	str	r3, [r7, #0]
 8016f74:	210f      	movs	r1, #15
 8016f76:	187b      	adds	r3, r7, r1
 8016f78:	1c02      	adds	r2, r0, #0
 8016f7a:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016f7c:	187b      	adds	r3, r7, r1
 8016f7e:	781b      	ldrb	r3, [r3, #0]
 8016f80:	2b05      	cmp	r3, #5
 8016f82:	d107      	bne.n	8016f94 <RegionNextChannel+0x2c>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 8016f84:	69bb      	ldr	r3, [r7, #24]
 8016f86:	683a      	ldr	r2, [r7, #0]
 8016f88:	6879      	ldr	r1, [r7, #4]
 8016f8a:	68b8      	ldr	r0, [r7, #8]
 8016f8c:	f002 f870 	bl	8019070 <RegionEU868NextChannel>
 8016f90:	0003      	movs	r3, r0
 8016f92:	e000      	b.n	8016f96 <RegionNextChannel+0x2e>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8016f94:	2309      	movs	r3, #9
        }
    }
}
 8016f96:	0018      	movs	r0, r3
 8016f98:	46bd      	mov	sp, r7
 8016f9a:	b004      	add	sp, #16
 8016f9c:	bd80      	pop	{r7, pc}

08016f9e <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 8016f9e:	b580      	push	{r7, lr}
 8016fa0:	b082      	sub	sp, #8
 8016fa2:	af00      	add	r7, sp, #0
 8016fa4:	0002      	movs	r2, r0
 8016fa6:	6039      	str	r1, [r7, #0]
 8016fa8:	1dfb      	adds	r3, r7, #7
 8016faa:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016fac:	1dfb      	adds	r3, r7, #7
 8016fae:	781b      	ldrb	r3, [r3, #0]
 8016fb0:	2b05      	cmp	r3, #5
 8016fb2:	d104      	bne.n	8016fbe <RegionSetContinuousWave+0x20>
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 8016fb4:	683b      	ldr	r3, [r7, #0]
 8016fb6:	0018      	movs	r0, r3
 8016fb8:	f002 fa04 	bl	80193c4 <RegionEU868SetContinuousWave>
 8016fbc:	e000      	b.n	8016fc0 <RegionSetContinuousWave+0x22>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 8016fbe:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8016fc0:	46c0      	nop			; (mov r8, r8)
 8016fc2:	46bd      	mov	sp, r7
 8016fc4:	b002      	add	sp, #8
 8016fc6:	bd80      	pop	{r7, pc}

08016fc8 <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8016fc8:	b5b0      	push	{r4, r5, r7, lr}
 8016fca:	b082      	sub	sp, #8
 8016fcc:	af00      	add	r7, sp, #0
 8016fce:	0005      	movs	r5, r0
 8016fd0:	000c      	movs	r4, r1
 8016fd2:	0010      	movs	r0, r2
 8016fd4:	0019      	movs	r1, r3
 8016fd6:	1dfb      	adds	r3, r7, #7
 8016fd8:	1c2a      	adds	r2, r5, #0
 8016fda:	701a      	strb	r2, [r3, #0]
 8016fdc:	1dbb      	adds	r3, r7, #6
 8016fde:	1c22      	adds	r2, r4, #0
 8016fe0:	701a      	strb	r2, [r3, #0]
 8016fe2:	1d7b      	adds	r3, r7, #5
 8016fe4:	1c02      	adds	r2, r0, #0
 8016fe6:	701a      	strb	r2, [r3, #0]
 8016fe8:	1d3b      	adds	r3, r7, #4
 8016fea:	1c0a      	adds	r2, r1, #0
 8016fec:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016fee:	1dfb      	adds	r3, r7, #7
 8016ff0:	781b      	ldrb	r3, [r3, #0]
 8016ff2:	2b05      	cmp	r3, #5
 8016ff4:	d10c      	bne.n	8017010 <RegionApplyDrOffset+0x48>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 8016ff6:	1d3b      	adds	r3, r7, #4
 8016ff8:	2200      	movs	r2, #0
 8016ffa:	569a      	ldrsb	r2, [r3, r2]
 8016ffc:	1d7b      	adds	r3, r7, #5
 8016ffe:	2100      	movs	r1, #0
 8017000:	5659      	ldrsb	r1, [r3, r1]
 8017002:	1dbb      	adds	r3, r7, #6
 8017004:	781b      	ldrb	r3, [r3, #0]
 8017006:	0018      	movs	r0, r3
 8017008:	f002 fa34 	bl	8019474 <RegionEU868ApplyDrOffset>
 801700c:	0003      	movs	r3, r0
 801700e:	e001      	b.n	8017014 <RegionApplyDrOffset+0x4c>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8017010:	1d7b      	adds	r3, r7, #5
 8017012:	781b      	ldrb	r3, [r3, #0]
        }
    }
}
 8017014:	0018      	movs	r0, r3
 8017016:	46bd      	mov	sp, r7
 8017018:	b002      	add	sp, #8
 801701a:	bdb0      	pop	{r4, r5, r7, pc}

0801701c <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 801701c:	b580      	push	{r7, lr}
 801701e:	b082      	sub	sp, #8
 8017020:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8017022:	4b03      	ldr	r3, [pc, #12]	; (8017030 <RegionGetVersion+0x14>)
 8017024:	607b      	str	r3, [r7, #4]

    return version;
 8017026:	687b      	ldr	r3, [r7, #4]
}
 8017028:	0018      	movs	r0, r3
 801702a:	46bd      	mov	sp, r7
 801702c:	b002      	add	sp, #8
 801702e:	bd80      	pop	{r7, pc}
 8017030:	01000300 	.word	0x01000300

08017034 <GetDutyCycle>:
 */
#define DUTY_CYCLE_TIME_PERIOD              3600000
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8017034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017036:	b087      	sub	sp, #28
 8017038:	af00      	add	r7, sp, #0
 801703a:	60f8      	str	r0, [r7, #12]
 801703c:	0008      	movs	r0, r1
 801703e:	0039      	movs	r1, r7
 8017040:	600a      	str	r2, [r1, #0]
 8017042:	604b      	str	r3, [r1, #4]
 8017044:	230b      	movs	r3, #11
 8017046:	18fb      	adds	r3, r7, r3
 8017048:	1c02      	adds	r2, r0, #0
 801704a:	701a      	strb	r2, [r3, #0]
    uint16_t joinDutyCycle = RegionCommonGetJoinDc( elapsedTimeSinceStartup );
 801704c:	2514      	movs	r5, #20
 801704e:	197c      	adds	r4, r7, r5
 8017050:	003b      	movs	r3, r7
 8017052:	6818      	ldr	r0, [r3, #0]
 8017054:	6859      	ldr	r1, [r3, #4]
 8017056:	f000 f91b 	bl	8017290 <RegionCommonGetJoinDc>
 801705a:	0003      	movs	r3, r0
 801705c:	8023      	strh	r3, [r4, #0]
    uint16_t dutyCycle = band->DCycle;
 801705e:	2616      	movs	r6, #22
 8017060:	19bb      	adds	r3, r7, r6
 8017062:	68fa      	ldr	r2, [r7, #12]
 8017064:	8812      	ldrh	r2, [r2, #0]
 8017066:	801a      	strh	r2, [r3, #0]

    if( joined == false )
 8017068:	230b      	movs	r3, #11
 801706a:	18fb      	adds	r3, r7, r3
 801706c:	781b      	ldrb	r3, [r3, #0]
 801706e:	2201      	movs	r2, #1
 8017070:	4053      	eors	r3, r2
 8017072:	b2db      	uxtb	r3, r3
 8017074:	2b00      	cmp	r3, #0
 8017076:	d012      	beq.n	801709e <GetDutyCycle+0x6a>
    {
        // Get the join duty cycle which depends on the runtime
        joinDutyCycle = RegionCommonGetJoinDc( elapsedTimeSinceStartup );
 8017078:	197c      	adds	r4, r7, r5
 801707a:	003b      	movs	r3, r7
 801707c:	6818      	ldr	r0, [r3, #0]
 801707e:	6859      	ldr	r1, [r3, #4]
 8017080:	f000 f906 	bl	8017290 <RegionCommonGetJoinDc>
 8017084:	0003      	movs	r3, r0
 8017086:	8023      	strh	r3, [r4, #0]
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8017088:	19ba      	adds	r2, r7, r6
 801708a:	197b      	adds	r3, r7, r5
 801708c:	19b9      	adds	r1, r7, r6
 801708e:	880c      	ldrh	r4, [r1, #0]
 8017090:	881b      	ldrh	r3, [r3, #0]
 8017092:	b298      	uxth	r0, r3
 8017094:	b2a1      	uxth	r1, r4
 8017096:	4288      	cmp	r0, r1
 8017098:	d200      	bcs.n	801709c <GetDutyCycle+0x68>
 801709a:	1c23      	adds	r3, r4, #0
 801709c:	8013      	strh	r3, [r2, #0]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 801709e:	2216      	movs	r2, #22
 80170a0:	18bb      	adds	r3, r7, r2
 80170a2:	881b      	ldrh	r3, [r3, #0]
 80170a4:	2b00      	cmp	r3, #0
 80170a6:	d102      	bne.n	80170ae <GetDutyCycle+0x7a>
    {
        dutyCycle = 1;
 80170a8:	18bb      	adds	r3, r7, r2
 80170aa:	2201      	movs	r2, #1
 80170ac:	801a      	strh	r2, [r3, #0]
    }

    return dutyCycle;
 80170ae:	2316      	movs	r3, #22
 80170b0:	18fb      	adds	r3, r7, r3
 80170b2:	881b      	ldrh	r3, [r3, #0]
}
 80170b4:	0018      	movs	r0, r3
 80170b6:	46bd      	mov	sp, r7
 80170b8:	b007      	add	sp, #28
 80170ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080170bc <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80170bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80170be:	b087      	sub	sp, #28
 80170c0:	af00      	add	r7, sp, #0
 80170c2:	60f8      	str	r0, [r7, #12]
 80170c4:	0008      	movs	r0, r1
 80170c6:	0039      	movs	r1, r7
 80170c8:	600a      	str	r2, [r1, #0]
 80170ca:	604b      	str	r3, [r1, #4]
 80170cc:	210b      	movs	r1, #11
 80170ce:	187b      	adds	r3, r7, r1
 80170d0:	1c02      	adds	r2, r0, #0
 80170d2:	701a      	strb	r2, [r3, #0]
    uint16_t dutyCycle = band->DCycle;
 80170d4:	2614      	movs	r6, #20
 80170d6:	19bb      	adds	r3, r7, r6
 80170d8:	68fa      	ldr	r2, [r7, #12]
 80170da:	8812      	ldrh	r2, [r2, #0]
 80170dc:	801a      	strh	r2, [r3, #0]
    uint8_t timePeriodFactor = 1;
 80170de:	2317      	movs	r3, #23
 80170e0:	18fb      	adds	r3, r7, r3
 80170e2:	2201      	movs	r2, #1
 80170e4:	701a      	strb	r2, [r3, #0]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80170e6:	19bc      	adds	r4, r7, r6
 80170e8:	003b      	movs	r3, r7
 80170ea:	000d      	movs	r5, r1
 80170ec:	187a      	adds	r2, r7, r1
 80170ee:	7811      	ldrb	r1, [r2, #0]
 80170f0:	68f8      	ldr	r0, [r7, #12]
 80170f2:	681a      	ldr	r2, [r3, #0]
 80170f4:	685b      	ldr	r3, [r3, #4]
 80170f6:	f7ff ff9d 	bl	8017034 <GetDutyCycle>
 80170fa:	0003      	movs	r3, r0
 80170fc:	8023      	strh	r3, [r4, #0]

    if( joined == false )
 80170fe:	197b      	adds	r3, r7, r5
 8017100:	781b      	ldrb	r3, [r3, #0]
 8017102:	2201      	movs	r2, #1
 8017104:	4053      	eors	r3, r2
 8017106:	b2db      	uxtb	r3, r3
 8017108:	2b00      	cmp	r3, #0
 801710a:	d00a      	beq.n	8017122 <SetMaxTimeCredits+0x66>
    {
        // Apply a factor to increase the maximum time period of observation
        timePeriodFactor = dutyCycle / BACKOFF_DC_TIMER_PERIOD_FACTOR;
 801710c:	19bb      	adds	r3, r7, r6
 801710e:	881b      	ldrh	r3, [r3, #0]
 8017110:	2164      	movs	r1, #100	; 0x64
 8017112:	0018      	movs	r0, r3
 8017114:	f7e9 f80a 	bl	800012c <__udivsi3>
 8017118:	0003      	movs	r3, r0
 801711a:	b29a      	uxth	r2, r3
 801711c:	2317      	movs	r3, #23
 801711e:	18fb      	adds	r3, r7, r3
 8017120:	701a      	strb	r2, [r3, #0]
    }

    // Setup the maximum allowed credits
    band->MaxTimeCredits = DUTY_CYCLE_TIME_PERIOD * timePeriodFactor;
 8017122:	2317      	movs	r3, #23
 8017124:	18fb      	adds	r3, r7, r3
 8017126:	781b      	ldrb	r3, [r3, #0]
 8017128:	4a09      	ldr	r2, [pc, #36]	; (8017150 <SetMaxTimeCredits+0x94>)
 801712a:	4353      	muls	r3, r2
 801712c:	001a      	movs	r2, r3
 801712e:	68fb      	ldr	r3, [r7, #12]
 8017130:	60da      	str	r2, [r3, #12]

    // In case if it is the first time, update also the current
    // time credits
    if( band->LastBandUpdateTime == 0 )
 8017132:	68fb      	ldr	r3, [r7, #12]
 8017134:	685b      	ldr	r3, [r3, #4]
 8017136:	2b00      	cmp	r3, #0
 8017138:	d103      	bne.n	8017142 <SetMaxTimeCredits+0x86>
    {
        band->TimeCredits = band->MaxTimeCredits;
 801713a:	68fb      	ldr	r3, [r7, #12]
 801713c:	68da      	ldr	r2, [r3, #12]
 801713e:	68fb      	ldr	r3, [r7, #12]
 8017140:	609a      	str	r2, [r3, #8]
    }

    return dutyCycle;
 8017142:	2314      	movs	r3, #20
 8017144:	18fb      	adds	r3, r7, r3
 8017146:	881b      	ldrh	r3, [r3, #0]
}
 8017148:	0018      	movs	r0, r3
 801714a:	46bd      	mov	sp, r7
 801714c:	b007      	add	sp, #28
 801714e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017150:	0036ee80 	.word	0x0036ee80

08017154 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8017154:	b590      	push	{r4, r7, lr}
 8017156:	b085      	sub	sp, #20
 8017158:	af00      	add	r7, sp, #0
 801715a:	6078      	str	r0, [r7, #4]
 801715c:	000c      	movs	r4, r1
 801715e:	0010      	movs	r0, r2
 8017160:	0019      	movs	r1, r3
 8017162:	1cfb      	adds	r3, r7, #3
 8017164:	1c22      	adds	r2, r4, #0
 8017166:	701a      	strb	r2, [r3, #0]
 8017168:	1cbb      	adds	r3, r7, #2
 801716a:	1c02      	adds	r2, r0, #0
 801716c:	701a      	strb	r2, [r3, #0]
 801716e:	1c7b      	adds	r3, r7, #1
 8017170:	1c0a      	adds	r2, r1, #0
 8017172:	701a      	strb	r2, [r3, #0]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup );
 8017174:	230e      	movs	r3, #14
 8017176:	18fc      	adds	r4, r7, r3
 8017178:	2320      	movs	r3, #32
 801717a:	18fb      	adds	r3, r7, r3
 801717c:	1cfa      	adds	r2, r7, #3
 801717e:	7811      	ldrb	r1, [r2, #0]
 8017180:	6878      	ldr	r0, [r7, #4]
 8017182:	681a      	ldr	r2, [r3, #0]
 8017184:	685b      	ldr	r3, [r3, #4]
 8017186:	f7ff ff99 	bl	80170bc <SetMaxTimeCredits>
 801718a:	0003      	movs	r3, r0
 801718c:	8023      	strh	r3, [r4, #0]

    if( joined == false )
 801718e:	1cfb      	adds	r3, r7, #3
 8017190:	781b      	ldrb	r3, [r3, #0]
 8017192:	2201      	movs	r2, #1
 8017194:	4053      	eors	r3, r2
 8017196:	b2db      	uxtb	r3, r3
 8017198:	2b00      	cmp	r3, #0
 801719a:	d012      	beq.n	80171c2 <UpdateTimeCredits+0x6e>
    {
        if( ( dutyCycleEnabled == false ) &&
 801719c:	1cbb      	adds	r3, r7, #2
 801719e:	781b      	ldrb	r3, [r3, #0]
 80171a0:	2201      	movs	r2, #1
 80171a2:	4053      	eors	r3, r2
 80171a4:	b2db      	uxtb	r3, r3
 80171a6:	2b00      	cmp	r3, #0
 80171a8:	d016      	beq.n	80171d8 <UpdateTimeCredits+0x84>
            ( lastTxIsJoinRequest == false ) )
 80171aa:	1c7b      	adds	r3, r7, #1
 80171ac:	781b      	ldrb	r3, [r3, #0]
 80171ae:	2201      	movs	r2, #1
 80171b0:	4053      	eors	r3, r2
 80171b2:	b2db      	uxtb	r3, r3
        if( ( dutyCycleEnabled == false ) &&
 80171b4:	2b00      	cmp	r3, #0
 80171b6:	d00f      	beq.n	80171d8 <UpdateTimeCredits+0x84>
        {
            // This is the case when the duty cycle is off and the last uplink frame was not a join.
            // This could happen in case of a rejoin, e.g. in compliance test mode.
            // In this special case we have to set the time off to 0, since the join duty cycle shall only
            // be applied after the first join request.
            band->TimeCredits = band->MaxTimeCredits;
 80171b8:	687b      	ldr	r3, [r7, #4]
 80171ba:	68da      	ldr	r2, [r3, #12]
 80171bc:	687b      	ldr	r3, [r7, #4]
 80171be:	609a      	str	r2, [r3, #8]
 80171c0:	e00a      	b.n	80171d8 <UpdateTimeCredits+0x84>
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 80171c2:	1cbb      	adds	r3, r7, #2
 80171c4:	781b      	ldrb	r3, [r3, #0]
 80171c6:	2201      	movs	r2, #1
 80171c8:	4053      	eors	r3, r2
 80171ca:	b2db      	uxtb	r3, r3
 80171cc:	2b00      	cmp	r3, #0
 80171ce:	d003      	beq.n	80171d8 <UpdateTimeCredits+0x84>
        {
            band->TimeCredits = band->MaxTimeCredits;
 80171d0:	687b      	ldr	r3, [r7, #4]
 80171d2:	68da      	ldr	r2, [r3, #12]
 80171d4:	687b      	ldr	r3, [r7, #4]
 80171d6:	609a      	str	r2, [r3, #8]
        }
    }

    // Get the difference between now and the last update
    band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 80171d8:	687b      	ldr	r3, [r7, #4]
 80171da:	685b      	ldr	r3, [r3, #4]
 80171dc:	0018      	movs	r0, r3
 80171de:	f005 fead 	bl	801cf3c <UTIL_TIMER_GetElapsedTime>
 80171e2:	0002      	movs	r2, r0
 80171e4:	687b      	ldr	r3, [r7, #4]
 80171e6:	689b      	ldr	r3, [r3, #8]
 80171e8:	18d2      	adds	r2, r2, r3
 80171ea:	687b      	ldr	r3, [r7, #4]
 80171ec:	609a      	str	r2, [r3, #8]

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	689a      	ldr	r2, [r3, #8]
 80171f2:	687b      	ldr	r3, [r7, #4]
 80171f4:	68db      	ldr	r3, [r3, #12]
 80171f6:	429a      	cmp	r2, r3
 80171f8:	d903      	bls.n	8017202 <UpdateTimeCredits+0xae>
    {
        band->TimeCredits = band->MaxTimeCredits;
 80171fa:	687b      	ldr	r3, [r7, #4]
 80171fc:	68da      	ldr	r2, [r3, #12]
 80171fe:	687b      	ldr	r3, [r7, #4]
 8017200:	609a      	str	r2, [r3, #8]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8017202:	687b      	ldr	r3, [r7, #4]
 8017204:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017206:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 8017208:	230e      	movs	r3, #14
 801720a:	18fb      	adds	r3, r7, r3
 801720c:	881b      	ldrh	r3, [r3, #0]
}
 801720e:	0018      	movs	r0, r3
 8017210:	46bd      	mov	sp, r7
 8017212:	b005      	add	sp, #20
 8017214:	bd90      	pop	{r4, r7, pc}

08017216 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8017216:	b580      	push	{r7, lr}
 8017218:	b084      	sub	sp, #16
 801721a:	af00      	add	r7, sp, #0
 801721c:	0002      	movs	r2, r0
 801721e:	1dbb      	adds	r3, r7, #6
 8017220:	801a      	strh	r2, [r3, #0]
 8017222:	1d7b      	adds	r3, r7, #5
 8017224:	1c0a      	adds	r2, r1, #0
 8017226:	701a      	strb	r2, [r3, #0]
    uint8_t nbActiveBits = 0;
 8017228:	230f      	movs	r3, #15
 801722a:	18fb      	adds	r3, r7, r3
 801722c:	2200      	movs	r2, #0
 801722e:	701a      	strb	r2, [r3, #0]

    for( uint8_t j = 0; j < nbBits; j++ )
 8017230:	230e      	movs	r3, #14
 8017232:	18fb      	adds	r3, r7, r3
 8017234:	2200      	movs	r2, #0
 8017236:	701a      	strb	r2, [r3, #0]
 8017238:	e01b      	b.n	8017272 <CountChannels+0x5c>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 801723a:	1dbb      	adds	r3, r7, #6
 801723c:	881b      	ldrh	r3, [r3, #0]
 801723e:	200e      	movs	r0, #14
 8017240:	183a      	adds	r2, r7, r0
 8017242:	7812      	ldrb	r2, [r2, #0]
 8017244:	2101      	movs	r1, #1
 8017246:	4091      	lsls	r1, r2
 8017248:	000a      	movs	r2, r1
 801724a:	401a      	ands	r2, r3
 801724c:	183b      	adds	r3, r7, r0
 801724e:	781b      	ldrb	r3, [r3, #0]
 8017250:	2101      	movs	r1, #1
 8017252:	4099      	lsls	r1, r3
 8017254:	000b      	movs	r3, r1
 8017256:	429a      	cmp	r2, r3
 8017258:	d105      	bne.n	8017266 <CountChannels+0x50>
        {
            nbActiveBits++;
 801725a:	210f      	movs	r1, #15
 801725c:	187b      	adds	r3, r7, r1
 801725e:	781a      	ldrb	r2, [r3, #0]
 8017260:	187b      	adds	r3, r7, r1
 8017262:	3201      	adds	r2, #1
 8017264:	701a      	strb	r2, [r3, #0]
    for( uint8_t j = 0; j < nbBits; j++ )
 8017266:	210e      	movs	r1, #14
 8017268:	187b      	adds	r3, r7, r1
 801726a:	781a      	ldrb	r2, [r3, #0]
 801726c:	187b      	adds	r3, r7, r1
 801726e:	3201      	adds	r2, #1
 8017270:	701a      	strb	r2, [r3, #0]
 8017272:	230e      	movs	r3, #14
 8017274:	18fa      	adds	r2, r7, r3
 8017276:	1d7b      	adds	r3, r7, #5
 8017278:	7812      	ldrb	r2, [r2, #0]
 801727a:	781b      	ldrb	r3, [r3, #0]
 801727c:	429a      	cmp	r2, r3
 801727e:	d3dc      	bcc.n	801723a <CountChannels+0x24>
        }
    }
    return nbActiveBits;
 8017280:	230f      	movs	r3, #15
 8017282:	18fb      	adds	r3, r7, r3
 8017284:	781b      	ldrb	r3, [r3, #0]
}
 8017286:	0018      	movs	r0, r3
 8017288:	46bd      	mov	sp, r7
 801728a:	b004      	add	sp, #16
 801728c:	bd80      	pop	{r7, pc}
	...

08017290 <RegionCommonGetJoinDc>:

uint16_t RegionCommonGetJoinDc( SysTime_t elapsedTime )
{
 8017290:	b580      	push	{r7, lr}
 8017292:	b084      	sub	sp, #16
 8017294:	af00      	add	r7, sp, #0
 8017296:	003b      	movs	r3, r7
 8017298:	6018      	str	r0, [r3, #0]
 801729a:	6059      	str	r1, [r3, #4]
    uint16_t dutyCycle = 0;
 801729c:	210e      	movs	r1, #14
 801729e:	187b      	adds	r3, r7, r1
 80172a0:	2200      	movs	r2, #0
 80172a2:	801a      	strh	r2, [r3, #0]

    if( elapsedTime.Seconds < 3600 )
 80172a4:	003b      	movs	r3, r7
 80172a6:	681a      	ldr	r2, [r3, #0]
 80172a8:	23e1      	movs	r3, #225	; 0xe1
 80172aa:	011b      	lsls	r3, r3, #4
 80172ac:	429a      	cmp	r2, r3
 80172ae:	d203      	bcs.n	80172b8 <RegionCommonGetJoinDc+0x28>
    {
        dutyCycle = BACKOFF_DC_1_HOUR;
 80172b0:	187b      	adds	r3, r7, r1
 80172b2:	2264      	movs	r2, #100	; 0x64
 80172b4:	801a      	strh	r2, [r3, #0]
 80172b6:	e00e      	b.n	80172d6 <RegionCommonGetJoinDc+0x46>
    }
    else if( elapsedTime.Seconds < ( 3600 + 36000 ) )
 80172b8:	003b      	movs	r3, r7
 80172ba:	681b      	ldr	r3, [r3, #0]
 80172bc:	4a09      	ldr	r2, [pc, #36]	; (80172e4 <RegionCommonGetJoinDc+0x54>)
 80172be:	4293      	cmp	r3, r2
 80172c0:	d805      	bhi.n	80172ce <RegionCommonGetJoinDc+0x3e>
    {
        dutyCycle = BACKOFF_DC_10_HOURS;
 80172c2:	230e      	movs	r3, #14
 80172c4:	18fb      	adds	r3, r7, r3
 80172c6:	22fa      	movs	r2, #250	; 0xfa
 80172c8:	0092      	lsls	r2, r2, #2
 80172ca:	801a      	strh	r2, [r3, #0]
 80172cc:	e003      	b.n	80172d6 <RegionCommonGetJoinDc+0x46>
    }
    else
    {
        dutyCycle = BACKOFF_DC_24_HOURS;
 80172ce:	230e      	movs	r3, #14
 80172d0:	18fb      	adds	r3, r7, r3
 80172d2:	4a05      	ldr	r2, [pc, #20]	; (80172e8 <RegionCommonGetJoinDc+0x58>)
 80172d4:	801a      	strh	r2, [r3, #0]
    }
    return dutyCycle;
 80172d6:	230e      	movs	r3, #14
 80172d8:	18fb      	adds	r3, r7, r3
 80172da:	881b      	ldrh	r3, [r3, #0]
}
 80172dc:	0018      	movs	r0, r3
 80172de:	46bd      	mov	sp, r7
 80172e0:	b004      	add	sp, #16
 80172e2:	bd80      	pop	{r7, pc}
 80172e4:	00009aaf 	.word	0x00009aaf
 80172e8:	00002710 	.word	0x00002710

080172ec <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 80172ec:	b590      	push	{r4, r7, lr}
 80172ee:	b085      	sub	sp, #20
 80172f0:	af00      	add	r7, sp, #0
 80172f2:	0004      	movs	r4, r0
 80172f4:	6039      	str	r1, [r7, #0]
 80172f6:	0010      	movs	r0, r2
 80172f8:	0019      	movs	r1, r3
 80172fa:	1dfb      	adds	r3, r7, #7
 80172fc:	1c22      	adds	r2, r4, #0
 80172fe:	701a      	strb	r2, [r3, #0]
 8017300:	1dbb      	adds	r3, r7, #6
 8017302:	1c02      	adds	r2, r0, #0
 8017304:	701a      	strb	r2, [r3, #0]
 8017306:	1d7b      	adds	r3, r7, #5
 8017308:	1c0a      	adds	r2, r1, #0
 801730a:	701a      	strb	r2, [r3, #0]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 801730c:	2320      	movs	r3, #32
 801730e:	18fb      	adds	r3, r7, r3
 8017310:	2200      	movs	r2, #0
 8017312:	569a      	ldrsb	r2, [r3, r2]
 8017314:	1d7b      	adds	r3, r7, #5
 8017316:	2100      	movs	r1, #0
 8017318:	5659      	ldrsb	r1, [r3, r1]
 801731a:	1dbb      	adds	r3, r7, #6
 801731c:	781b      	ldrb	r3, [r3, #0]
 801731e:	b25b      	sxtb	r3, r3
 8017320:	0018      	movs	r0, r3
 8017322:	f000 f87c 	bl	801741e <RegionCommonValueInRange>
 8017326:	1e03      	subs	r3, r0, #0
 8017328:	d101      	bne.n	801732e <RegionCommonChanVerifyDr+0x42>
    {
        return false;
 801732a:	2300      	movs	r3, #0
 801732c:	e073      	b.n	8017416 <RegionCommonChanVerifyDr+0x12a>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 801732e:	230f      	movs	r3, #15
 8017330:	18fb      	adds	r3, r7, r3
 8017332:	2200      	movs	r2, #0
 8017334:	701a      	strb	r2, [r3, #0]
 8017336:	230e      	movs	r3, #14
 8017338:	18fb      	adds	r3, r7, r3
 801733a:	2200      	movs	r2, #0
 801733c:	701a      	strb	r2, [r3, #0]
 801733e:	e062      	b.n	8017406 <RegionCommonChanVerifyDr+0x11a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8017340:	230d      	movs	r3, #13
 8017342:	18fb      	adds	r3, r7, r3
 8017344:	2200      	movs	r2, #0
 8017346:	701a      	strb	r2, [r3, #0]
 8017348:	e04c      	b.n	80173e4 <RegionCommonChanVerifyDr+0xf8>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 801734a:	230e      	movs	r3, #14
 801734c:	18fb      	adds	r3, r7, r3
 801734e:	781b      	ldrb	r3, [r3, #0]
 8017350:	005b      	lsls	r3, r3, #1
 8017352:	683a      	ldr	r2, [r7, #0]
 8017354:	18d3      	adds	r3, r2, r3
 8017356:	881b      	ldrh	r3, [r3, #0]
 8017358:	001a      	movs	r2, r3
 801735a:	200d      	movs	r0, #13
 801735c:	183b      	adds	r3, r7, r0
 801735e:	781b      	ldrb	r3, [r3, #0]
 8017360:	411a      	asrs	r2, r3
 8017362:	0013      	movs	r3, r2
 8017364:	2201      	movs	r2, #1
 8017366:	4013      	ands	r3, r2
 8017368:	d036      	beq.n	80173d8 <RegionCommonChanVerifyDr+0xec>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 801736a:	240f      	movs	r4, #15
 801736c:	193b      	adds	r3, r7, r4
 801736e:	781a      	ldrb	r2, [r3, #0]
 8017370:	183b      	adds	r3, r7, r0
 8017372:	781b      	ldrb	r3, [r3, #0]
 8017374:	18d3      	adds	r3, r2, r3
 8017376:	001a      	movs	r2, r3
 8017378:	0013      	movs	r3, r2
 801737a:	005b      	lsls	r3, r3, #1
 801737c:	189b      	adds	r3, r3, r2
 801737e:	009b      	lsls	r3, r3, #2
 8017380:	001a      	movs	r2, r3
 8017382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017384:	189b      	adds	r3, r3, r2
 8017386:	7a1b      	ldrb	r3, [r3, #8]
 8017388:	011b      	lsls	r3, r3, #4
 801738a:	b25b      	sxtb	r3, r3
 801738c:	111b      	asrs	r3, r3, #4
 801738e:	b25b      	sxtb	r3, r3
 8017390:	001a      	movs	r2, r3
 8017392:	230f      	movs	r3, #15
 8017394:	4013      	ands	r3, r2
 8017396:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8017398:	193b      	adds	r3, r7, r4
 801739a:	781a      	ldrb	r2, [r3, #0]
 801739c:	183b      	adds	r3, r7, r0
 801739e:	781b      	ldrb	r3, [r3, #0]
 80173a0:	18d3      	adds	r3, r2, r3
 80173a2:	001a      	movs	r2, r3
 80173a4:	0013      	movs	r3, r2
 80173a6:	005b      	lsls	r3, r3, #1
 80173a8:	189b      	adds	r3, r3, r2
 80173aa:	009b      	lsls	r3, r3, #2
 80173ac:	001a      	movs	r2, r3
 80173ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173b0:	189b      	adds	r3, r3, r2
 80173b2:	7a1b      	ldrb	r3, [r3, #8]
 80173b4:	b25b      	sxtb	r3, r3
 80173b6:	111b      	asrs	r3, r3, #4
 80173b8:	b25b      	sxtb	r3, r3
 80173ba:	001a      	movs	r2, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 80173bc:	230f      	movs	r3, #15
 80173be:	4013      	ands	r3, r2
 80173c0:	b25a      	sxtb	r2, r3
 80173c2:	1dbb      	adds	r3, r7, #6
 80173c4:	781b      	ldrb	r3, [r3, #0]
 80173c6:	b25b      	sxtb	r3, r3
 80173c8:	0018      	movs	r0, r3
 80173ca:	f000 f828 	bl	801741e <RegionCommonValueInRange>
 80173ce:	0003      	movs	r3, r0
 80173d0:	2b01      	cmp	r3, #1
 80173d2:	d101      	bne.n	80173d8 <RegionCommonChanVerifyDr+0xec>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 80173d4:	2301      	movs	r3, #1
 80173d6:	e01e      	b.n	8017416 <RegionCommonChanVerifyDr+0x12a>
        for( uint8_t j = 0; j < 16; j++ )
 80173d8:	210d      	movs	r1, #13
 80173da:	187b      	adds	r3, r7, r1
 80173dc:	781a      	ldrb	r2, [r3, #0]
 80173de:	187b      	adds	r3, r7, r1
 80173e0:	3201      	adds	r2, #1
 80173e2:	701a      	strb	r2, [r3, #0]
 80173e4:	230d      	movs	r3, #13
 80173e6:	18fb      	adds	r3, r7, r3
 80173e8:	781b      	ldrb	r3, [r3, #0]
 80173ea:	2b0f      	cmp	r3, #15
 80173ec:	d9ad      	bls.n	801734a <RegionCommonChanVerifyDr+0x5e>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80173ee:	220f      	movs	r2, #15
 80173f0:	18bb      	adds	r3, r7, r2
 80173f2:	18ba      	adds	r2, r7, r2
 80173f4:	7812      	ldrb	r2, [r2, #0]
 80173f6:	3210      	adds	r2, #16
 80173f8:	701a      	strb	r2, [r3, #0]
 80173fa:	210e      	movs	r1, #14
 80173fc:	187b      	adds	r3, r7, r1
 80173fe:	781a      	ldrb	r2, [r3, #0]
 8017400:	187b      	adds	r3, r7, r1
 8017402:	3201      	adds	r2, #1
 8017404:	701a      	strb	r2, [r3, #0]
 8017406:	230f      	movs	r3, #15
 8017408:	18fa      	adds	r2, r7, r3
 801740a:	1dfb      	adds	r3, r7, #7
 801740c:	7812      	ldrb	r2, [r2, #0]
 801740e:	781b      	ldrb	r3, [r3, #0]
 8017410:	429a      	cmp	r2, r3
 8017412:	d395      	bcc.n	8017340 <RegionCommonChanVerifyDr+0x54>
                }
            }
        }
    }
    return false;
 8017414:	2300      	movs	r3, #0
}
 8017416:	0018      	movs	r0, r3
 8017418:	46bd      	mov	sp, r7
 801741a:	b005      	add	sp, #20
 801741c:	bd90      	pop	{r4, r7, pc}

0801741e <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 801741e:	b590      	push	{r4, r7, lr}
 8017420:	b083      	sub	sp, #12
 8017422:	af00      	add	r7, sp, #0
 8017424:	0004      	movs	r4, r0
 8017426:	0008      	movs	r0, r1
 8017428:	0011      	movs	r1, r2
 801742a:	1dfb      	adds	r3, r7, #7
 801742c:	1c22      	adds	r2, r4, #0
 801742e:	701a      	strb	r2, [r3, #0]
 8017430:	1dbb      	adds	r3, r7, #6
 8017432:	1c02      	adds	r2, r0, #0
 8017434:	701a      	strb	r2, [r3, #0]
 8017436:	1d7b      	adds	r3, r7, #5
 8017438:	1c0a      	adds	r2, r1, #0
 801743a:	701a      	strb	r2, [r3, #0]
    if( ( value >= min ) && ( value <= max ) )
 801743c:	1dfa      	adds	r2, r7, #7
 801743e:	1dbb      	adds	r3, r7, #6
 8017440:	7812      	ldrb	r2, [r2, #0]
 8017442:	b252      	sxtb	r2, r2
 8017444:	781b      	ldrb	r3, [r3, #0]
 8017446:	b25b      	sxtb	r3, r3
 8017448:	429a      	cmp	r2, r3
 801744a:	db09      	blt.n	8017460 <RegionCommonValueInRange+0x42>
 801744c:	1dfa      	adds	r2, r7, #7
 801744e:	1d7b      	adds	r3, r7, #5
 8017450:	7812      	ldrb	r2, [r2, #0]
 8017452:	b252      	sxtb	r2, r2
 8017454:	781b      	ldrb	r3, [r3, #0]
 8017456:	b25b      	sxtb	r3, r3
 8017458:	429a      	cmp	r2, r3
 801745a:	dc01      	bgt.n	8017460 <RegionCommonValueInRange+0x42>
    {
        return 1;
 801745c:	2301      	movs	r3, #1
 801745e:	e000      	b.n	8017462 <RegionCommonValueInRange+0x44>
    }
    return 0;
 8017460:	2300      	movs	r3, #0
}
 8017462:	0018      	movs	r0, r3
 8017464:	46bd      	mov	sp, r7
 8017466:	b003      	add	sp, #12
 8017468:	bd90      	pop	{r4, r7, pc}

0801746a <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 801746a:	b580      	push	{r7, lr}
 801746c:	b084      	sub	sp, #16
 801746e:	af00      	add	r7, sp, #0
 8017470:	6078      	str	r0, [r7, #4]
 8017472:	0008      	movs	r0, r1
 8017474:	0011      	movs	r1, r2
 8017476:	1cfb      	adds	r3, r7, #3
 8017478:	1c02      	adds	r2, r0, #0
 801747a:	701a      	strb	r2, [r3, #0]
 801747c:	1cbb      	adds	r3, r7, #2
 801747e:	1c0a      	adds	r2, r1, #0
 8017480:	701a      	strb	r2, [r3, #0]
    uint8_t index = id / 16;
 8017482:	210f      	movs	r1, #15
 8017484:	187b      	adds	r3, r7, r1
 8017486:	1cfa      	adds	r2, r7, #3
 8017488:	7812      	ldrb	r2, [r2, #0]
 801748a:	0912      	lsrs	r2, r2, #4
 801748c:	701a      	strb	r2, [r3, #0]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 801748e:	1cbb      	adds	r3, r7, #2
 8017490:	781b      	ldrb	r3, [r3, #0]
 8017492:	091b      	lsrs	r3, r3, #4
 8017494:	b2db      	uxtb	r3, r3
 8017496:	187a      	adds	r2, r7, r1
 8017498:	7812      	ldrb	r2, [r2, #0]
 801749a:	429a      	cmp	r2, r3
 801749c:	d805      	bhi.n	80174aa <RegionCommonChanDisable+0x40>
 801749e:	1cfa      	adds	r2, r7, #3
 80174a0:	1cbb      	adds	r3, r7, #2
 80174a2:	7812      	ldrb	r2, [r2, #0]
 80174a4:	781b      	ldrb	r3, [r3, #0]
 80174a6:	429a      	cmp	r2, r3
 80174a8:	d301      	bcc.n	80174ae <RegionCommonChanDisable+0x44>
    {
        return false;
 80174aa:	2300      	movs	r3, #0
 80174ac:	e01b      	b.n	80174e6 <RegionCommonChanDisable+0x7c>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 80174ae:	200f      	movs	r0, #15
 80174b0:	183b      	adds	r3, r7, r0
 80174b2:	781b      	ldrb	r3, [r3, #0]
 80174b4:	005b      	lsls	r3, r3, #1
 80174b6:	687a      	ldr	r2, [r7, #4]
 80174b8:	18d3      	adds	r3, r2, r3
 80174ba:	881b      	ldrh	r3, [r3, #0]
 80174bc:	b21b      	sxth	r3, r3
 80174be:	1cfa      	adds	r2, r7, #3
 80174c0:	7812      	ldrb	r2, [r2, #0]
 80174c2:	210f      	movs	r1, #15
 80174c4:	400a      	ands	r2, r1
 80174c6:	2101      	movs	r1, #1
 80174c8:	4091      	lsls	r1, r2
 80174ca:	000a      	movs	r2, r1
 80174cc:	b212      	sxth	r2, r2
 80174ce:	43d2      	mvns	r2, r2
 80174d0:	b212      	sxth	r2, r2
 80174d2:	4013      	ands	r3, r2
 80174d4:	b219      	sxth	r1, r3
 80174d6:	183b      	adds	r3, r7, r0
 80174d8:	781b      	ldrb	r3, [r3, #0]
 80174da:	005b      	lsls	r3, r3, #1
 80174dc:	687a      	ldr	r2, [r7, #4]
 80174de:	18d3      	adds	r3, r2, r3
 80174e0:	b28a      	uxth	r2, r1
 80174e2:	801a      	strh	r2, [r3, #0]

    return true;
 80174e4:	2301      	movs	r3, #1
}
 80174e6:	0018      	movs	r0, r3
 80174e8:	46bd      	mov	sp, r7
 80174ea:	b004      	add	sp, #16
 80174ec:	bd80      	pop	{r7, pc}

080174ee <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 80174ee:	b590      	push	{r4, r7, lr}
 80174f0:	b085      	sub	sp, #20
 80174f2:	af00      	add	r7, sp, #0
 80174f4:	6078      	str	r0, [r7, #4]
 80174f6:	0008      	movs	r0, r1
 80174f8:	0011      	movs	r1, r2
 80174fa:	1cfb      	adds	r3, r7, #3
 80174fc:	1c02      	adds	r2, r0, #0
 80174fe:	701a      	strb	r2, [r3, #0]
 8017500:	1cbb      	adds	r3, r7, #2
 8017502:	1c0a      	adds	r2, r1, #0
 8017504:	701a      	strb	r2, [r3, #0]
    uint8_t nbChannels = 0;
 8017506:	230f      	movs	r3, #15
 8017508:	18fb      	adds	r3, r7, r3
 801750a:	2200      	movs	r2, #0
 801750c:	701a      	strb	r2, [r3, #0]

    if( channelsMask == NULL )
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	2b00      	cmp	r3, #0
 8017512:	d101      	bne.n	8017518 <RegionCommonCountChannels+0x2a>
    {
        return 0;
 8017514:	2300      	movs	r3, #0
 8017516:	e027      	b.n	8017568 <RegionCommonCountChannels+0x7a>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8017518:	230e      	movs	r3, #14
 801751a:	18fb      	adds	r3, r7, r3
 801751c:	1cfa      	adds	r2, r7, #3
 801751e:	7812      	ldrb	r2, [r2, #0]
 8017520:	701a      	strb	r2, [r3, #0]
 8017522:	e017      	b.n	8017554 <RegionCommonCountChannels+0x66>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8017524:	240e      	movs	r4, #14
 8017526:	193b      	adds	r3, r7, r4
 8017528:	781b      	ldrb	r3, [r3, #0]
 801752a:	005b      	lsls	r3, r3, #1
 801752c:	687a      	ldr	r2, [r7, #4]
 801752e:	18d3      	adds	r3, r2, r3
 8017530:	881b      	ldrh	r3, [r3, #0]
 8017532:	2110      	movs	r1, #16
 8017534:	0018      	movs	r0, r3
 8017536:	f7ff fe6e 	bl	8017216 <CountChannels>
 801753a:	0003      	movs	r3, r0
 801753c:	0019      	movs	r1, r3
 801753e:	220f      	movs	r2, #15
 8017540:	18bb      	adds	r3, r7, r2
 8017542:	18ba      	adds	r2, r7, r2
 8017544:	7812      	ldrb	r2, [r2, #0]
 8017546:	188a      	adds	r2, r1, r2
 8017548:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 801754a:	193b      	adds	r3, r7, r4
 801754c:	781a      	ldrb	r2, [r3, #0]
 801754e:	193b      	adds	r3, r7, r4
 8017550:	3201      	adds	r2, #1
 8017552:	701a      	strb	r2, [r3, #0]
 8017554:	230e      	movs	r3, #14
 8017556:	18fa      	adds	r2, r7, r3
 8017558:	1cbb      	adds	r3, r7, #2
 801755a:	7812      	ldrb	r2, [r2, #0]
 801755c:	781b      	ldrb	r3, [r3, #0]
 801755e:	429a      	cmp	r2, r3
 8017560:	d3e0      	bcc.n	8017524 <RegionCommonCountChannels+0x36>
    }

    return nbChannels;
 8017562:	230f      	movs	r3, #15
 8017564:	18fb      	adds	r3, r7, r3
 8017566:	781b      	ldrb	r3, [r3, #0]
}
 8017568:	0018      	movs	r0, r3
 801756a:	46bd      	mov	sp, r7
 801756c:	b005      	add	sp, #20
 801756e:	bd90      	pop	{r4, r7, pc}

08017570 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8017570:	b580      	push	{r7, lr}
 8017572:	b086      	sub	sp, #24
 8017574:	af00      	add	r7, sp, #0
 8017576:	60f8      	str	r0, [r7, #12]
 8017578:	60b9      	str	r1, [r7, #8]
 801757a:	1dfb      	adds	r3, r7, #7
 801757c:	701a      	strb	r2, [r3, #0]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 801757e:	68fb      	ldr	r3, [r7, #12]
 8017580:	2b00      	cmp	r3, #0
 8017582:	d020      	beq.n	80175c6 <RegionCommonChanMaskCopy+0x56>
 8017584:	68bb      	ldr	r3, [r7, #8]
 8017586:	2b00      	cmp	r3, #0
 8017588:	d01d      	beq.n	80175c6 <RegionCommonChanMaskCopy+0x56>
    {
        for( uint8_t i = 0; i < len; i++ )
 801758a:	2317      	movs	r3, #23
 801758c:	18fb      	adds	r3, r7, r3
 801758e:	2200      	movs	r2, #0
 8017590:	701a      	strb	r2, [r3, #0]
 8017592:	e011      	b.n	80175b8 <RegionCommonChanMaskCopy+0x48>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8017594:	2017      	movs	r0, #23
 8017596:	183b      	adds	r3, r7, r0
 8017598:	781b      	ldrb	r3, [r3, #0]
 801759a:	005b      	lsls	r3, r3, #1
 801759c:	68ba      	ldr	r2, [r7, #8]
 801759e:	18d2      	adds	r2, r2, r3
 80175a0:	183b      	adds	r3, r7, r0
 80175a2:	781b      	ldrb	r3, [r3, #0]
 80175a4:	005b      	lsls	r3, r3, #1
 80175a6:	68f9      	ldr	r1, [r7, #12]
 80175a8:	18cb      	adds	r3, r1, r3
 80175aa:	8812      	ldrh	r2, [r2, #0]
 80175ac:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 80175ae:	183b      	adds	r3, r7, r0
 80175b0:	781a      	ldrb	r2, [r3, #0]
 80175b2:	183b      	adds	r3, r7, r0
 80175b4:	3201      	adds	r2, #1
 80175b6:	701a      	strb	r2, [r3, #0]
 80175b8:	2317      	movs	r3, #23
 80175ba:	18fa      	adds	r2, r7, r3
 80175bc:	1dfb      	adds	r3, r7, #7
 80175be:	7812      	ldrb	r2, [r2, #0]
 80175c0:	781b      	ldrb	r3, [r3, #0]
 80175c2:	429a      	cmp	r2, r3
 80175c4:	d3e6      	bcc.n	8017594 <RegionCommonChanMaskCopy+0x24>
        }
    }
}
 80175c6:	46c0      	nop			; (mov r8, r8)
 80175c8:	46bd      	mov	sp, r7
 80175ca:	b006      	add	sp, #24
 80175cc:	bd80      	pop	{r7, pc}

080175ce <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80175ce:	b082      	sub	sp, #8
 80175d0:	b5b0      	push	{r4, r5, r7, lr}
 80175d2:	b086      	sub	sp, #24
 80175d4:	af00      	add	r7, sp, #0
 80175d6:	60f8      	str	r0, [r7, #12]
 80175d8:	60b9      	str	r1, [r7, #8]
 80175da:	0011      	movs	r1, r2
 80175dc:	2204      	movs	r2, #4
 80175de:	2028      	movs	r0, #40	; 0x28
 80175e0:	4684      	mov	ip, r0
 80175e2:	44bc      	add	ip, r7
 80175e4:	4462      	add	r2, ip
 80175e6:	6013      	str	r3, [r2, #0]
 80175e8:	1dfb      	adds	r3, r7, #7
 80175ea:	1c0a      	adds	r2, r1, #0
 80175ec:	701a      	strb	r2, [r3, #0]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80175ee:	2516      	movs	r5, #22
 80175f0:	197c      	adds	r4, r7, r5
 80175f2:	2304      	movs	r3, #4
 80175f4:	2228      	movs	r2, #40	; 0x28
 80175f6:	4694      	mov	ip, r2
 80175f8:	44bc      	add	ip, r7
 80175fa:	4463      	add	r3, ip
 80175fc:	1dfa      	adds	r2, r7, #7
 80175fe:	7811      	ldrb	r1, [r2, #0]
 8017600:	68f8      	ldr	r0, [r7, #12]
 8017602:	681a      	ldr	r2, [r3, #0]
 8017604:	685b      	ldr	r3, [r3, #4]
 8017606:	f7ff fd15 	bl	8017034 <GetDutyCycle>
 801760a:	0003      	movs	r3, r0
 801760c:	8023      	strh	r3, [r4, #0]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 801760e:	68fb      	ldr	r3, [r7, #12]
 8017610:	689a      	ldr	r2, [r3, #8]
 8017612:	197b      	adds	r3, r7, r5
 8017614:	881b      	ldrh	r3, [r3, #0]
 8017616:	68b9      	ldr	r1, [r7, #8]
 8017618:	434b      	muls	r3, r1
 801761a:	429a      	cmp	r2, r3
 801761c:	d909      	bls.n	8017632 <RegionCommonSetBandTxDone+0x64>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 801761e:	68fb      	ldr	r3, [r7, #12]
 8017620:	689a      	ldr	r2, [r3, #8]
 8017622:	197b      	adds	r3, r7, r5
 8017624:	881b      	ldrh	r3, [r3, #0]
 8017626:	68b9      	ldr	r1, [r7, #8]
 8017628:	434b      	muls	r3, r1
 801762a:	1ad2      	subs	r2, r2, r3
 801762c:	68fb      	ldr	r3, [r7, #12]
 801762e:	609a      	str	r2, [r3, #8]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8017630:	e002      	b.n	8017638 <RegionCommonSetBandTxDone+0x6a>
        band->TimeCredits = 0;
 8017632:	68fb      	ldr	r3, [r7, #12]
 8017634:	2200      	movs	r2, #0
 8017636:	609a      	str	r2, [r3, #8]
}
 8017638:	46c0      	nop			; (mov r8, r8)
 801763a:	46bd      	mov	sp, r7
 801763c:	b006      	add	sp, #24
 801763e:	bcb0      	pop	{r4, r5, r7}
 8017640:	bc08      	pop	{r3}
 8017642:	b002      	add	sp, #8
 8017644:	4718      	bx	r3

08017646 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8017646:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017648:	46c6      	mov	lr, r8
 801764a:	b500      	push	{lr}
 801764c:	b08c      	sub	sp, #48	; 0x30
 801764e:	af04      	add	r7, sp, #16
 8017650:	0004      	movs	r4, r0
 8017652:	6039      	str	r1, [r7, #0]
 8017654:	0010      	movs	r0, r2
 8017656:	0019      	movs	r1, r3
 8017658:	1dfb      	adds	r3, r7, #7
 801765a:	1c22      	adds	r2, r4, #0
 801765c:	701a      	strb	r2, [r3, #0]
 801765e:	1dbb      	adds	r3, r7, #6
 8017660:	1c02      	adds	r2, r0, #0
 8017662:	701a      	strb	r2, [r3, #0]
 8017664:	1d7b      	adds	r3, r7, #5
 8017666:	1c0a      	adds	r2, r1, #0
 8017668:	701a      	strb	r2, [r3, #0]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 801766a:	2301      	movs	r3, #1
 801766c:	425b      	negs	r3, r3
 801766e:	61fb      	str	r3, [r7, #28]
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8017670:	f005 fc50 	bl	801cf14 <UTIL_TIMER_GetCurrentTime>
 8017674:	0003      	movs	r3, r0
 8017676:	617b      	str	r3, [r7, #20]
    TimerTime_t creditCosts = 0;
 8017678:	2300      	movs	r3, #0
 801767a:	613b      	str	r3, [r7, #16]
    uint16_t dutyCycle = 1;
 801767c:	230e      	movs	r3, #14
 801767e:	18fb      	adds	r3, r7, r3
 8017680:	2201      	movs	r2, #1
 8017682:	801a      	strh	r2, [r3, #0]
    uint8_t validBands = 0;
 8017684:	231b      	movs	r3, #27
 8017686:	18fb      	adds	r3, r7, r3
 8017688:	2200      	movs	r2, #0
 801768a:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0; i < nbBands; i++ )
 801768c:	231a      	movs	r3, #26
 801768e:	18fb      	adds	r3, r7, r3
 8017690:	2200      	movs	r2, #0
 8017692:	701a      	strb	r2, [r3, #0]
 8017694:	e089      	b.n	80177aa <RegionCommonUpdateBandTimeOff+0x164>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8017696:	231a      	movs	r3, #26
 8017698:	18fb      	adds	r3, r7, r3
 801769a:	781a      	ldrb	r2, [r3, #0]
 801769c:	0013      	movs	r3, r2
 801769e:	009b      	lsls	r3, r3, #2
 80176a0:	189b      	adds	r3, r3, r2
 80176a2:	009b      	lsls	r3, r3, #2
 80176a4:	001a      	movs	r2, r3
 80176a6:	683b      	ldr	r3, [r7, #0]
 80176a8:	469c      	mov	ip, r3
 80176aa:	4494      	add	ip, r2
 80176ac:	220e      	movs	r2, #14
 80176ae:	18bc      	adds	r4, r7, r2
 80176b0:	2138      	movs	r1, #56	; 0x38
 80176b2:	000a      	movs	r2, r1
 80176b4:	187b      	adds	r3, r7, r1
 80176b6:	781e      	ldrb	r6, [r3, #0]
 80176b8:	1d7b      	adds	r3, r7, #5
 80176ba:	781d      	ldrb	r5, [r3, #0]
 80176bc:	1dfb      	adds	r3, r7, #7
 80176be:	781b      	ldrb	r3, [r3, #0]
 80176c0:	4698      	mov	r8, r3
 80176c2:	697b      	ldr	r3, [r7, #20]
 80176c4:	9302      	str	r3, [sp, #8]
 80176c6:	2304      	movs	r3, #4
 80176c8:	18ba      	adds	r2, r7, r2
 80176ca:	18d2      	adds	r2, r2, r3
 80176cc:	466b      	mov	r3, sp
 80176ce:	ca03      	ldmia	r2!, {r0, r1}
 80176d0:	c303      	stmia	r3!, {r0, r1}
 80176d2:	0033      	movs	r3, r6
 80176d4:	002a      	movs	r2, r5
 80176d6:	4641      	mov	r1, r8
 80176d8:	4660      	mov	r0, ip
 80176da:	f7ff fd3b 	bl	8017154 <UpdateTimeCredits>
 80176de:	0003      	movs	r3, r0
 80176e0:	8023      	strh	r3, [r4, #0]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 80176e2:	220e      	movs	r2, #14
 80176e4:	18bb      	adds	r3, r7, r2
 80176e6:	881a      	ldrh	r2, [r3, #0]
 80176e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80176ea:	4353      	muls	r3, r2
 80176ec:	613b      	str	r3, [r7, #16]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 80176ee:	231a      	movs	r3, #26
 80176f0:	18fb      	adds	r3, r7, r3
 80176f2:	781a      	ldrb	r2, [r3, #0]
 80176f4:	0013      	movs	r3, r2
 80176f6:	009b      	lsls	r3, r3, #2
 80176f8:	189b      	adds	r3, r3, r2
 80176fa:	009b      	lsls	r3, r3, #2
 80176fc:	001a      	movs	r2, r3
 80176fe:	683b      	ldr	r3, [r7, #0]
 8017700:	189b      	adds	r3, r3, r2
 8017702:	689b      	ldr	r3, [r3, #8]
 8017704:	693a      	ldr	r2, [r7, #16]
 8017706:	429a      	cmp	r2, r3
 8017708:	d306      	bcc.n	8017718 <RegionCommonUpdateBandTimeOff+0xd2>
            ( dutyCycleEnabled == false ) )
 801770a:	1d7b      	adds	r3, r7, #5
 801770c:	781b      	ldrb	r3, [r3, #0]
 801770e:	2201      	movs	r2, #1
 8017710:	4053      	eors	r3, r2
 8017712:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8017714:	2b00      	cmp	r3, #0
 8017716:	d012      	beq.n	801773e <RegionCommonUpdateBandTimeOff+0xf8>
        {
            bands[i].ReadyForTransmission = true;
 8017718:	231a      	movs	r3, #26
 801771a:	18fb      	adds	r3, r7, r3
 801771c:	781a      	ldrb	r2, [r3, #0]
 801771e:	0013      	movs	r3, r2
 8017720:	009b      	lsls	r3, r3, #2
 8017722:	189b      	adds	r3, r3, r2
 8017724:	009b      	lsls	r3, r3, #2
 8017726:	001a      	movs	r2, r3
 8017728:	683b      	ldr	r3, [r7, #0]
 801772a:	189b      	adds	r3, r3, r2
 801772c:	2201      	movs	r2, #1
 801772e:	741a      	strb	r2, [r3, #16]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8017730:	211b      	movs	r1, #27
 8017732:	187b      	adds	r3, r7, r1
 8017734:	781a      	ldrb	r2, [r3, #0]
 8017736:	187b      	adds	r3, r7, r1
 8017738:	3201      	adds	r2, #1
 801773a:	701a      	strb	r2, [r3, #0]
 801773c:	e02f      	b.n	801779e <RegionCommonUpdateBandTimeOff+0x158>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 801773e:	211a      	movs	r1, #26
 8017740:	187b      	adds	r3, r7, r1
 8017742:	781a      	ldrb	r2, [r3, #0]
 8017744:	0013      	movs	r3, r2
 8017746:	009b      	lsls	r3, r3, #2
 8017748:	189b      	adds	r3, r3, r2
 801774a:	009b      	lsls	r3, r3, #2
 801774c:	001a      	movs	r2, r3
 801774e:	683b      	ldr	r3, [r7, #0]
 8017750:	189b      	adds	r3, r3, r2
 8017752:	2200      	movs	r2, #0
 8017754:	741a      	strb	r2, [r3, #16]

            if( bands[i].MaxTimeCredits > creditCosts )
 8017756:	187b      	adds	r3, r7, r1
 8017758:	781a      	ldrb	r2, [r3, #0]
 801775a:	0013      	movs	r3, r2
 801775c:	009b      	lsls	r3, r3, #2
 801775e:	189b      	adds	r3, r3, r2
 8017760:	009b      	lsls	r3, r3, #2
 8017762:	001a      	movs	r2, r3
 8017764:	683b      	ldr	r3, [r7, #0]
 8017766:	189b      	adds	r3, r3, r2
 8017768:	68db      	ldr	r3, [r3, #12]
 801776a:	693a      	ldr	r2, [r7, #16]
 801776c:	429a      	cmp	r2, r3
 801776e:	d216      	bcs.n	801779e <RegionCommonUpdateBandTimeOff+0x158>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8017770:	187b      	adds	r3, r7, r1
 8017772:	781a      	ldrb	r2, [r3, #0]
 8017774:	0013      	movs	r3, r2
 8017776:	009b      	lsls	r3, r3, #2
 8017778:	189b      	adds	r3, r3, r2
 801777a:	009b      	lsls	r3, r3, #2
 801777c:	001a      	movs	r2, r3
 801777e:	683b      	ldr	r3, [r7, #0]
 8017780:	189b      	adds	r3, r3, r2
 8017782:	689b      	ldr	r3, [r3, #8]
 8017784:	693a      	ldr	r2, [r7, #16]
 8017786:	1ad2      	subs	r2, r2, r3
 8017788:	69fb      	ldr	r3, [r7, #28]
 801778a:	4293      	cmp	r3, r2
 801778c:	d900      	bls.n	8017790 <RegionCommonUpdateBandTimeOff+0x14a>
 801778e:	0013      	movs	r3, r2
 8017790:	61fb      	str	r3, [r7, #28]
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8017792:	211b      	movs	r1, #27
 8017794:	187b      	adds	r3, r7, r1
 8017796:	781a      	ldrb	r2, [r3, #0]
 8017798:	187b      	adds	r3, r7, r1
 801779a:	3201      	adds	r2, #1
 801779c:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < nbBands; i++ )
 801779e:	211a      	movs	r1, #26
 80177a0:	187b      	adds	r3, r7, r1
 80177a2:	781a      	ldrb	r2, [r3, #0]
 80177a4:	187b      	adds	r3, r7, r1
 80177a6:	3201      	adds	r2, #1
 80177a8:	701a      	strb	r2, [r3, #0]
 80177aa:	231a      	movs	r3, #26
 80177ac:	18fa      	adds	r2, r7, r3
 80177ae:	1dbb      	adds	r3, r7, #6
 80177b0:	7812      	ldrb	r2, [r2, #0]
 80177b2:	781b      	ldrb	r3, [r3, #0]
 80177b4:	429a      	cmp	r2, r3
 80177b6:	d200      	bcs.n	80177ba <RegionCommonUpdateBandTimeOff+0x174>
 80177b8:	e76d      	b.n	8017696 <RegionCommonUpdateBandTimeOff+0x50>
            }
        }
    }


    if( validBands == 0 )
 80177ba:	231b      	movs	r3, #27
 80177bc:	18fb      	adds	r3, r7, r3
 80177be:	781b      	ldrb	r3, [r3, #0]
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	d102      	bne.n	80177ca <RegionCommonUpdateBandTimeOff+0x184>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 80177c4:	2301      	movs	r3, #1
 80177c6:	425b      	negs	r3, r3
 80177c8:	e000      	b.n	80177cc <RegionCommonUpdateBandTimeOff+0x186>
    }
    return minTimeToWait;
 80177ca:	69fb      	ldr	r3, [r7, #28]
}
 80177cc:	0018      	movs	r0, r3
 80177ce:	46bd      	mov	sp, r7
 80177d0:	b008      	add	sp, #32
 80177d2:	bc80      	pop	{r7}
 80177d4:	46b8      	mov	r8, r7
 80177d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080177d8 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 80177d8:	b580      	push	{r7, lr}
 80177da:	b084      	sub	sp, #16
 80177dc:	af00      	add	r7, sp, #0
 80177de:	6078      	str	r0, [r7, #4]
 80177e0:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 80177e2:	210f      	movs	r1, #15
 80177e4:	187b      	adds	r3, r7, r1
 80177e6:	2200      	movs	r2, #0
 80177e8:	701a      	strb	r2, [r3, #0]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 80177ea:	687b      	ldr	r3, [r7, #4]
 80177ec:	781b      	ldrb	r3, [r3, #0]
 80177ee:	2b03      	cmp	r3, #3
 80177f0:	d140      	bne.n	8017874 <RegionCommonParseLinkAdrReq+0x9c>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 80177f2:	687b      	ldr	r3, [r7, #4]
 80177f4:	3301      	adds	r3, #1
 80177f6:	781b      	ldrb	r3, [r3, #0]
 80177f8:	b25a      	sxtb	r2, r3
 80177fa:	683b      	ldr	r3, [r7, #0]
 80177fc:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 80177fe:	683b      	ldr	r3, [r7, #0]
 8017800:	785b      	ldrb	r3, [r3, #1]
 8017802:	b25b      	sxtb	r3, r3
 8017804:	220f      	movs	r2, #15
 8017806:	4013      	ands	r3, r2
 8017808:	b25a      	sxtb	r2, r3
 801780a:	683b      	ldr	r3, [r7, #0]
 801780c:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 801780e:	683b      	ldr	r3, [r7, #0]
 8017810:	785b      	ldrb	r3, [r3, #1]
 8017812:	b25b      	sxtb	r3, r3
 8017814:	b2db      	uxtb	r3, r3
 8017816:	091b      	lsrs	r3, r3, #4
 8017818:	b2db      	uxtb	r3, r3
 801781a:	b25a      	sxtb	r2, r3
 801781c:	683b      	ldr	r3, [r7, #0]
 801781e:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8017820:	687b      	ldr	r3, [r7, #4]
 8017822:	3302      	adds	r3, #2
 8017824:	781b      	ldrb	r3, [r3, #0]
 8017826:	b29a      	uxth	r2, r3
 8017828:	683b      	ldr	r3, [r7, #0]
 801782a:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 801782c:	683b      	ldr	r3, [r7, #0]
 801782e:	889b      	ldrh	r3, [r3, #4]
 8017830:	b21a      	sxth	r2, r3
 8017832:	687b      	ldr	r3, [r7, #4]
 8017834:	3303      	adds	r3, #3
 8017836:	781b      	ldrb	r3, [r3, #0]
 8017838:	021b      	lsls	r3, r3, #8
 801783a:	b21b      	sxth	r3, r3
 801783c:	4313      	orrs	r3, r2
 801783e:	b21b      	sxth	r3, r3
 8017840:	b29a      	uxth	r2, r3
 8017842:	683b      	ldr	r3, [r7, #0]
 8017844:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8017846:	687b      	ldr	r3, [r7, #4]
 8017848:	791a      	ldrb	r2, [r3, #4]
 801784a:	683b      	ldr	r3, [r7, #0]
 801784c:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 801784e:	683b      	ldr	r3, [r7, #0]
 8017850:	781b      	ldrb	r3, [r3, #0]
 8017852:	091b      	lsrs	r3, r3, #4
 8017854:	b2db      	uxtb	r3, r3
 8017856:	2207      	movs	r2, #7
 8017858:	4013      	ands	r3, r2
 801785a:	b2da      	uxtb	r2, r3
 801785c:	683b      	ldr	r3, [r7, #0]
 801785e:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8017860:	683b      	ldr	r3, [r7, #0]
 8017862:	781b      	ldrb	r3, [r3, #0]
 8017864:	220f      	movs	r2, #15
 8017866:	4013      	ands	r3, r2
 8017868:	b2da      	uxtb	r2, r3
 801786a:	683b      	ldr	r3, [r7, #0]
 801786c:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 801786e:	187b      	adds	r3, r7, r1
 8017870:	2205      	movs	r2, #5
 8017872:	701a      	strb	r2, [r3, #0]
    }
    return retIndex;
 8017874:	230f      	movs	r3, #15
 8017876:	18fb      	adds	r3, r7, r3
 8017878:	781b      	ldrb	r3, [r3, #0]
}
 801787a:	0018      	movs	r0, r3
 801787c:	46bd      	mov	sp, r7
 801787e:	b004      	add	sp, #16
 8017880:	bd80      	pop	{r7, pc}

08017882 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8017882:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017884:	b089      	sub	sp, #36	; 0x24
 8017886:	af02      	add	r7, sp, #8
 8017888:	60f8      	str	r0, [r7, #12]
 801788a:	60b9      	str	r1, [r7, #8]
 801788c:	607a      	str	r2, [r7, #4]
 801788e:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8017890:	2317      	movs	r3, #23
 8017892:	18fb      	adds	r3, r7, r3
 8017894:	68fa      	ldr	r2, [r7, #12]
 8017896:	7912      	ldrb	r2, [r2, #4]
 8017898:	701a      	strb	r2, [r3, #0]
    int8_t datarate = verifyParams->Datarate;
 801789a:	2116      	movs	r1, #22
 801789c:	187b      	adds	r3, r7, r1
 801789e:	68fa      	ldr	r2, [r7, #12]
 80178a0:	7992      	ldrb	r2, [r2, #6]
 80178a2:	701a      	strb	r2, [r3, #0]
    int8_t txPower = verifyParams->TxPower;
 80178a4:	2015      	movs	r0, #21
 80178a6:	183b      	adds	r3, r7, r0
 80178a8:	68fa      	ldr	r2, [r7, #12]
 80178aa:	79d2      	ldrb	r2, [r2, #7]
 80178ac:	701a      	strb	r2, [r3, #0]
    int8_t nbRepetitions = verifyParams->NbRep;
 80178ae:	68fb      	ldr	r3, [r7, #12]
 80178b0:	7a1a      	ldrb	r2, [r3, #8]
 80178b2:	2414      	movs	r4, #20
 80178b4:	193b      	adds	r3, r7, r4
 80178b6:	701a      	strb	r2, [r3, #0]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 80178b8:	68fb      	ldr	r3, [r7, #12]
 80178ba:	795b      	ldrb	r3, [r3, #5]
 80178bc:	2201      	movs	r2, #1
 80178be:	4053      	eors	r3, r2
 80178c0:	b2db      	uxtb	r3, r3
 80178c2:	2b00      	cmp	r3, #0
 80178c4:	d00b      	beq.n	80178de <RegionCommonLinkAdrReqVerifyParams+0x5c>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 80178c6:	193b      	adds	r3, r7, r4
 80178c8:	68fa      	ldr	r2, [r7, #12]
 80178ca:	7ad2      	ldrb	r2, [r2, #11]
 80178cc:	701a      	strb	r2, [r3, #0]
        datarate =  verifyParams->CurrentDatarate;
 80178ce:	187b      	adds	r3, r7, r1
 80178d0:	68fa      	ldr	r2, [r7, #12]
 80178d2:	7a52      	ldrb	r2, [r2, #9]
 80178d4:	701a      	strb	r2, [r3, #0]
        txPower =  verifyParams->CurrentTxPower;
 80178d6:	183b      	adds	r3, r7, r0
 80178d8:	68fa      	ldr	r2, [r7, #12]
 80178da:	7a92      	ldrb	r2, [r2, #10]
 80178dc:	701a      	strb	r2, [r3, #0]
    }

    if( status != 0 )
 80178de:	2617      	movs	r6, #23
 80178e0:	19bb      	adds	r3, r7, r6
 80178e2:	781b      	ldrb	r3, [r3, #0]
 80178e4:	2b00      	cmp	r3, #0
 80178e6:	d046      	beq.n	8017976 <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80178e8:	68fb      	ldr	r3, [r7, #12]
 80178ea:	7b18      	ldrb	r0, [r3, #12]
 80178ec:	68fb      	ldr	r3, [r7, #12]
 80178ee:	691c      	ldr	r4, [r3, #16]
 80178f0:	68fb      	ldr	r3, [r7, #12]
 80178f2:	2514      	movs	r5, #20
 80178f4:	575d      	ldrsb	r5, [r3, r5]
 80178f6:	68fb      	ldr	r3, [r7, #12]
 80178f8:	2215      	movs	r2, #21
 80178fa:	569a      	ldrsb	r2, [r3, r2]
 80178fc:	68fb      	ldr	r3, [r7, #12]
 80178fe:	699b      	ldr	r3, [r3, #24]
 8017900:	2116      	movs	r1, #22
 8017902:	1879      	adds	r1, r7, r1
 8017904:	7809      	ldrb	r1, [r1, #0]
 8017906:	b249      	sxtb	r1, r1
 8017908:	9301      	str	r3, [sp, #4]
 801790a:	9200      	str	r2, [sp, #0]
 801790c:	002b      	movs	r3, r5
 801790e:	000a      	movs	r2, r1
 8017910:	0021      	movs	r1, r4
 8017912:	f7ff fceb 	bl	80172ec <RegionCommonChanVerifyDr>
 8017916:	0003      	movs	r3, r0
 8017918:	001a      	movs	r2, r3
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 801791a:	2301      	movs	r3, #1
 801791c:	4053      	eors	r3, r2
 801791e:	b2db      	uxtb	r3, r3
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8017920:	2b00      	cmp	r3, #0
 8017922:	d005      	beq.n	8017930 <RegionCommonLinkAdrReqVerifyParams+0xae>
        {
            status &= 0xFD; // Datarate KO
 8017924:	19bb      	adds	r3, r7, r6
 8017926:	19ba      	adds	r2, r7, r6
 8017928:	7812      	ldrb	r2, [r2, #0]
 801792a:	2102      	movs	r1, #2
 801792c:	438a      	bics	r2, r1
 801792e:	701a      	strb	r2, [r3, #0]
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8017930:	68fb      	ldr	r3, [r7, #12]
 8017932:	211d      	movs	r1, #29
 8017934:	5659      	ldrsb	r1, [r3, r1]
 8017936:	68fb      	ldr	r3, [r7, #12]
 8017938:	221c      	movs	r2, #28
 801793a:	569a      	ldrsb	r2, [r3, r2]
 801793c:	2415      	movs	r4, #21
 801793e:	193b      	adds	r3, r7, r4
 8017940:	781b      	ldrb	r3, [r3, #0]
 8017942:	b25b      	sxtb	r3, r3
 8017944:	0018      	movs	r0, r3
 8017946:	f7ff fd6a 	bl	801741e <RegionCommonValueInRange>
 801794a:	1e03      	subs	r3, r0, #0
 801794c:	d113      	bne.n	8017976 <RegionCommonLinkAdrReqVerifyParams+0xf4>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 801794e:	68fb      	ldr	r3, [r7, #12]
 8017950:	7f5b      	ldrb	r3, [r3, #29]
 8017952:	b25b      	sxtb	r3, r3
 8017954:	193a      	adds	r2, r7, r4
 8017956:	7812      	ldrb	r2, [r2, #0]
 8017958:	b252      	sxtb	r2, r2
 801795a:	429a      	cmp	r2, r3
 801795c:	da04      	bge.n	8017968 <RegionCommonLinkAdrReqVerifyParams+0xe6>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 801795e:	193b      	adds	r3, r7, r4
 8017960:	68fa      	ldr	r2, [r7, #12]
 8017962:	7f52      	ldrb	r2, [r2, #29]
 8017964:	701a      	strb	r2, [r3, #0]
 8017966:	e006      	b.n	8017976 <RegionCommonLinkAdrReqVerifyParams+0xf4>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8017968:	2217      	movs	r2, #23
 801796a:	18bb      	adds	r3, r7, r2
 801796c:	18ba      	adds	r2, r7, r2
 801796e:	7812      	ldrb	r2, [r2, #0]
 8017970:	2104      	movs	r1, #4
 8017972:	438a      	bics	r2, r1
 8017974:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8017976:	2317      	movs	r3, #23
 8017978:	18fb      	adds	r3, r7, r3
 801797a:	781b      	ldrb	r3, [r3, #0]
 801797c:	2b07      	cmp	r3, #7
 801797e:	d108      	bne.n	8017992 <RegionCommonLinkAdrReqVerifyParams+0x110>
    {
        if( nbRepetitions == 0 )
 8017980:	2214      	movs	r2, #20
 8017982:	18bb      	adds	r3, r7, r2
 8017984:	781b      	ldrb	r3, [r3, #0]
 8017986:	b25b      	sxtb	r3, r3
 8017988:	2b00      	cmp	r3, #0
 801798a:	d102      	bne.n	8017992 <RegionCommonLinkAdrReqVerifyParams+0x110>
        { // Restore the default value according to the LoRaWAN specification
            nbRepetitions = 1;
 801798c:	18bb      	adds	r3, r7, r2
 801798e:	2201      	movs	r2, #1
 8017990:	701a      	strb	r2, [r3, #0]
        }
    }

    // Apply changes
    *dr = datarate;
 8017992:	68bb      	ldr	r3, [r7, #8]
 8017994:	2216      	movs	r2, #22
 8017996:	18ba      	adds	r2, r7, r2
 8017998:	7812      	ldrb	r2, [r2, #0]
 801799a:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 801799c:	687b      	ldr	r3, [r7, #4]
 801799e:	2215      	movs	r2, #21
 80179a0:	18ba      	adds	r2, r7, r2
 80179a2:	7812      	ldrb	r2, [r2, #0]
 80179a4:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 80179a6:	2314      	movs	r3, #20
 80179a8:	18fb      	adds	r3, r7, r3
 80179aa:	781a      	ldrb	r2, [r3, #0]
 80179ac:	683b      	ldr	r3, [r7, #0]
 80179ae:	701a      	strb	r2, [r3, #0]

    return status;
 80179b0:	2317      	movs	r3, #23
 80179b2:	18fb      	adds	r3, r7, r3
 80179b4:	781b      	ldrb	r3, [r3, #0]
}
 80179b6:	0018      	movs	r0, r3
 80179b8:	46bd      	mov	sp, r7
 80179ba:	b007      	add	sp, #28
 80179bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080179c0 <RegionCommonComputeSymbolTimeLoRa>:

/* ST_WORKAROUND_BEGIN: remove float/double */
uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidth )
{
 80179c0:	b580      	push	{r7, lr}
 80179c2:	b082      	sub	sp, #8
 80179c4:	af00      	add	r7, sp, #0
 80179c6:	0002      	movs	r2, r0
 80179c8:	6039      	str	r1, [r7, #0]
 80179ca:	1dfb      	adds	r3, r7, #7
 80179cc:	701a      	strb	r2, [r3, #0]
    return (1000000000UL/bandwidth) * (1 << phyDr);
 80179ce:	6839      	ldr	r1, [r7, #0]
 80179d0:	4806      	ldr	r0, [pc, #24]	; (80179ec <RegionCommonComputeSymbolTimeLoRa+0x2c>)
 80179d2:	f7e8 fbab 	bl	800012c <__udivsi3>
 80179d6:	0003      	movs	r3, r0
 80179d8:	001a      	movs	r2, r3
 80179da:	1dfb      	adds	r3, r7, #7
 80179dc:	781b      	ldrb	r3, [r3, #0]
 80179de:	409a      	lsls	r2, r3
 80179e0:	0013      	movs	r3, r2
}
 80179e2:	0018      	movs	r0, r3
 80179e4:	46bd      	mov	sp, r7
 80179e6:	b002      	add	sp, #8
 80179e8:	bd80      	pop	{r7, pc}
 80179ea:	46c0      	nop			; (mov r8, r8)
 80179ec:	3b9aca00 	.word	0x3b9aca00

080179f0 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDr )
{
 80179f0:	b580      	push	{r7, lr}
 80179f2:	b082      	sub	sp, #8
 80179f4:	af00      	add	r7, sp, #0
 80179f6:	0002      	movs	r2, r0
 80179f8:	1dfb      	adds	r3, r7, #7
 80179fa:	701a      	strb	r2, [r3, #0]
    // ((8 * 1000000) / 50);
    return 160000UL;
 80179fc:	4b02      	ldr	r3, [pc, #8]	; (8017a08 <RegionCommonComputeSymbolTimeFsk+0x18>)
}
 80179fe:	0018      	movs	r0, r3
 8017a00:	46bd      	mov	sp, r7
 8017a02:	b002      	add	sp, #8
 8017a04:	bd80      	pop	{r7, pc}
 8017a06:	46c0      	nop			; (mov r8, r8)
 8017a08:	00027100 	.word	0x00027100

08017a0c <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbol, uint8_t minRxSymbols, uint32_t rxError, uint32_t wakeUpTime, uint32_t* windowTimeout, int32_t* windowOffset )
{
 8017a0c:	b5b0      	push	{r4, r5, r7, lr}
 8017a0e:	b084      	sub	sp, #16
 8017a10:	af00      	add	r7, sp, #0
 8017a12:	60f8      	str	r0, [r7, #12]
 8017a14:	607a      	str	r2, [r7, #4]
 8017a16:	603b      	str	r3, [r7, #0]
 8017a18:	200b      	movs	r0, #11
 8017a1a:	183b      	adds	r3, r7, r0
 8017a1c:	1c0a      	adds	r2, r1, #0
 8017a1e:	701a      	strb	r2, [r3, #0]
  *windowTimeout = MAX( (uint32_t)2 * minRxSymbols - 8 + DIVC(2 * rxError * 1000000UL, tSymbol ), minRxSymbols);
 8017a20:	0002      	movs	r2, r0
 8017a22:	18bb      	adds	r3, r7, r2
 8017a24:	781d      	ldrb	r5, [r3, #0]
 8017a26:	18bb      	adds	r3, r7, r2
 8017a28:	781b      	ldrb	r3, [r3, #0]
 8017a2a:	4a1c      	ldr	r2, [pc, #112]	; (8017a9c <RegionCommonComputeRxWindowParameters+0x90>)
 8017a2c:	4694      	mov	ip, r2
 8017a2e:	4463      	add	r3, ip
 8017a30:	005c      	lsls	r4, r3, #1
 8017a32:	6879      	ldr	r1, [r7, #4]
 8017a34:	000a      	movs	r2, r1
 8017a36:	0152      	lsls	r2, r2, #5
 8017a38:	1a52      	subs	r2, r2, r1
 8017a3a:	0193      	lsls	r3, r2, #6
 8017a3c:	1a9b      	subs	r3, r3, r2
 8017a3e:	00db      	lsls	r3, r3, #3
 8017a40:	185b      	adds	r3, r3, r1
 8017a42:	01db      	lsls	r3, r3, #7
 8017a44:	001a      	movs	r2, r3
 8017a46:	68fb      	ldr	r3, [r7, #12]
 8017a48:	18d3      	adds	r3, r2, r3
 8017a4a:	3b01      	subs	r3, #1
 8017a4c:	68f9      	ldr	r1, [r7, #12]
 8017a4e:	0018      	movs	r0, r3
 8017a50:	f7e8 fb6c 	bl	800012c <__udivsi3>
 8017a54:	0003      	movs	r3, r0
 8017a56:	18e2      	adds	r2, r4, r3
 8017a58:	002b      	movs	r3, r5
 8017a5a:	4293      	cmp	r3, r2
 8017a5c:	d200      	bcs.n	8017a60 <RegionCommonComputeRxWindowParameters+0x54>
 8017a5e:	0013      	movs	r3, r2
 8017a60:	6a3a      	ldr	r2, [r7, #32]
 8017a62:	6013      	str	r3, [r2, #0]
  *windowOffset = DIVC((int32_t)(4 * tSymbol - ((*windowTimeout * tSymbol) >> 1)), 1000000L) - 1 - wakeUpTime;
 8017a64:	68fb      	ldr	r3, [r7, #12]
 8017a66:	009a      	lsls	r2, r3, #2
 8017a68:	6a3b      	ldr	r3, [r7, #32]
 8017a6a:	681b      	ldr	r3, [r3, #0]
 8017a6c:	68f9      	ldr	r1, [r7, #12]
 8017a6e:	434b      	muls	r3, r1
 8017a70:	085b      	lsrs	r3, r3, #1
 8017a72:	1ad3      	subs	r3, r2, r3
 8017a74:	4a0a      	ldr	r2, [pc, #40]	; (8017aa0 <RegionCommonComputeRxWindowParameters+0x94>)
 8017a76:	4694      	mov	ip, r2
 8017a78:	4463      	add	r3, ip
 8017a7a:	490a      	ldr	r1, [pc, #40]	; (8017aa4 <RegionCommonComputeRxWindowParameters+0x98>)
 8017a7c:	0018      	movs	r0, r3
 8017a7e:	f7e8 fbdf 	bl	8000240 <__divsi3>
 8017a82:	0003      	movs	r3, r0
 8017a84:	001a      	movs	r2, r3
 8017a86:	683b      	ldr	r3, [r7, #0]
 8017a88:	1ad3      	subs	r3, r2, r3
 8017a8a:	3b01      	subs	r3, #1
 8017a8c:	001a      	movs	r2, r3
 8017a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a90:	601a      	str	r2, [r3, #0]
}
 8017a92:	46c0      	nop			; (mov r8, r8)
 8017a94:	46bd      	mov	sp, r7
 8017a96:	b004      	add	sp, #16
 8017a98:	bdb0      	pop	{r4, r5, r7, pc}
 8017a9a:	46c0      	nop			; (mov r8, r8)
 8017a9c:	7ffffffc 	.word	0x7ffffffc
 8017aa0:	000f423f 	.word	0x000f423f
 8017aa4:	000f4240 	.word	0x000f4240

08017aa8 <RegionCommonComputeTxPower>:
/* ST_WORKAROUND_END */

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8017aa8:	b5b0      	push	{r4, r5, r7, lr}
 8017aaa:	b086      	sub	sp, #24
 8017aac:	af00      	add	r7, sp, #0
 8017aae:	60b9      	str	r1, [r7, #8]
 8017ab0:	607a      	str	r2, [r7, #4]
 8017ab2:	210f      	movs	r1, #15
 8017ab4:	187b      	adds	r3, r7, r1
 8017ab6:	1c02      	adds	r2, r0, #0
 8017ab8:	701a      	strb	r2, [r3, #0]
    int8_t phyTxPower = 0;
 8017aba:	2417      	movs	r4, #23
 8017abc:	193b      	adds	r3, r7, r4
 8017abe:	2200      	movs	r2, #0
 8017ac0:	701a      	strb	r2, [r3, #0]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8017ac2:	187b      	adds	r3, r7, r1
 8017ac4:	781b      	ldrb	r3, [r3, #0]
 8017ac6:	b25b      	sxtb	r3, r3
 8017ac8:	005b      	lsls	r3, r3, #1
 8017aca:	0018      	movs	r0, r3
 8017acc:	f7e9 faa0 	bl	8001010 <__aeabi_ui2f>
 8017ad0:	1c03      	adds	r3, r0, #0
 8017ad2:	1c19      	adds	r1, r3, #0
 8017ad4:	68b8      	ldr	r0, [r7, #8]
 8017ad6:	f7e9 f86d 	bl	8000bb4 <__aeabi_fsub>
 8017ada:	1c03      	adds	r3, r0, #0
 8017adc:	6879      	ldr	r1, [r7, #4]
 8017ade:	1c18      	adds	r0, r3, #0
 8017ae0:	f7e9 f868 	bl	8000bb4 <__aeabi_fsub>
 8017ae4:	1c03      	adds	r3, r0, #0
 8017ae6:	1c18      	adds	r0, r3, #0
 8017ae8:	f7eb f8c8 	bl	8002c7c <__aeabi_f2d>
 8017aec:	0002      	movs	r2, r0
 8017aee:	000b      	movs	r3, r1
 8017af0:	0010      	movs	r0, r2
 8017af2:	0019      	movs	r1, r3
 8017af4:	f006 fea8 	bl	801e848 <floor>
 8017af8:	0002      	movs	r2, r0
 8017afa:	000b      	movs	r3, r1
 8017afc:	0025      	movs	r5, r4
 8017afe:	193c      	adds	r4, r7, r4
 8017b00:	0010      	movs	r0, r2
 8017b02:	0019      	movs	r1, r3
 8017b04:	f7eb f82e 	bl	8002b64 <__aeabi_d2iz>
 8017b08:	0003      	movs	r3, r0
 8017b0a:	7023      	strb	r3, [r4, #0]

    return phyTxPower;
 8017b0c:	197b      	adds	r3, r7, r5
 8017b0e:	781b      	ldrb	r3, [r3, #0]
 8017b10:	b25b      	sxtb	r3, r3
}
 8017b12:	0018      	movs	r0, r3
 8017b14:	46bd      	mov	sp, r7
 8017b16:	b006      	add	sp, #24
 8017b18:	bdb0      	pop	{r4, r5, r7, pc}

08017b1a <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8017b1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017b1c:	b087      	sub	sp, #28
 8017b1e:	af00      	add	r7, sp, #0
 8017b20:	60f8      	str	r0, [r7, #12]
 8017b22:	60b9      	str	r1, [r7, #8]
 8017b24:	607a      	str	r2, [r7, #4]
 8017b26:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8017b28:	2317      	movs	r3, #23
 8017b2a:	18fb      	adds	r3, r7, r3
 8017b2c:	2200      	movs	r2, #0
 8017b2e:	701a      	strb	r2, [r3, #0]
    uint8_t nbRestrictedChannelsCount = 0;
 8017b30:	2316      	movs	r3, #22
 8017b32:	18fb      	adds	r3, r7, r3
 8017b34:	2200      	movs	r2, #0
 8017b36:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8017b38:	2315      	movs	r3, #21
 8017b3a:	18fb      	adds	r3, r7, r3
 8017b3c:	2200      	movs	r2, #0
 8017b3e:	701a      	strb	r2, [r3, #0]
 8017b40:	2314      	movs	r3, #20
 8017b42:	18fb      	adds	r3, r7, r3
 8017b44:	2200      	movs	r2, #0
 8017b46:	701a      	strb	r2, [r3, #0]
 8017b48:	e0bf      	b.n	8017cca <RegionCommonCountNbOfEnabledChannels+0x1b0>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8017b4a:	2313      	movs	r3, #19
 8017b4c:	18fb      	adds	r3, r7, r3
 8017b4e:	2200      	movs	r2, #0
 8017b50:	701a      	strb	r2, [r3, #0]
 8017b52:	e0a8      	b.n	8017ca6 <RegionCommonCountNbOfEnabledChannels+0x18c>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8017b54:	68fb      	ldr	r3, [r7, #12]
 8017b56:	685a      	ldr	r2, [r3, #4]
 8017b58:	2314      	movs	r3, #20
 8017b5a:	18fb      	adds	r3, r7, r3
 8017b5c:	781b      	ldrb	r3, [r3, #0]
 8017b5e:	005b      	lsls	r3, r3, #1
 8017b60:	18d3      	adds	r3, r2, r3
 8017b62:	881b      	ldrh	r3, [r3, #0]
 8017b64:	001a      	movs	r2, r3
 8017b66:	2013      	movs	r0, #19
 8017b68:	183b      	adds	r3, r7, r0
 8017b6a:	781b      	ldrb	r3, [r3, #0]
 8017b6c:	411a      	asrs	r2, r3
 8017b6e:	0013      	movs	r3, r2
 8017b70:	2201      	movs	r2, #1
 8017b72:	4013      	ands	r3, r2
 8017b74:	d100      	bne.n	8017b78 <RegionCommonCountNbOfEnabledChannels+0x5e>
 8017b76:	e090      	b.n	8017c9a <RegionCommonCountNbOfEnabledChannels+0x180>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8017b78:	68fb      	ldr	r3, [r7, #12]
 8017b7a:	689a      	ldr	r2, [r3, #8]
 8017b7c:	2315      	movs	r3, #21
 8017b7e:	18fb      	adds	r3, r7, r3
 8017b80:	7819      	ldrb	r1, [r3, #0]
 8017b82:	183b      	adds	r3, r7, r0
 8017b84:	781b      	ldrb	r3, [r3, #0]
 8017b86:	18cb      	adds	r3, r1, r3
 8017b88:	0019      	movs	r1, r3
 8017b8a:	000b      	movs	r3, r1
 8017b8c:	005b      	lsls	r3, r3, #1
 8017b8e:	185b      	adds	r3, r3, r1
 8017b90:	009b      	lsls	r3, r3, #2
 8017b92:	18d3      	adds	r3, r2, r3
 8017b94:	681b      	ldr	r3, [r3, #0]
 8017b96:	2b00      	cmp	r3, #0
 8017b98:	d100      	bne.n	8017b9c <RegionCommonCountNbOfEnabledChannels+0x82>
 8017b9a:	e079      	b.n	8017c90 <RegionCommonCountNbOfEnabledChannels+0x176>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8017b9c:	68fb      	ldr	r3, [r7, #12]
 8017b9e:	781b      	ldrb	r3, [r3, #0]
 8017ba0:	2201      	movs	r2, #1
 8017ba2:	4053      	eors	r3, r2
 8017ba4:	b2db      	uxtb	r3, r3
 8017ba6:	2b00      	cmp	r3, #0
 8017ba8:	d00d      	beq.n	8017bc6 <RegionCommonCountNbOfEnabledChannels+0xac>
                    ( countNbOfEnabledChannelsParams->JoinChannels > 0 ) )
 8017baa:	68fb      	ldr	r3, [r7, #12]
 8017bac:	8a5b      	ldrh	r3, [r3, #18]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8017bae:	2b00      	cmp	r3, #0
 8017bb0:	d009      	beq.n	8017bc6 <RegionCommonCountNbOfEnabledChannels+0xac>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels & ( 1 << j ) ) == 0 )
 8017bb2:	68fb      	ldr	r3, [r7, #12]
 8017bb4:	8a5b      	ldrh	r3, [r3, #18]
 8017bb6:	001a      	movs	r2, r3
 8017bb8:	183b      	adds	r3, r7, r0
 8017bba:	781b      	ldrb	r3, [r3, #0]
 8017bbc:	411a      	asrs	r2, r3
 8017bbe:	0013      	movs	r3, r2
 8017bc0:	2201      	movs	r2, #1
 8017bc2:	4013      	ands	r3, r2
 8017bc4:	d066      	beq.n	8017c94 <RegionCommonCountNbOfEnabledChannels+0x17a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8017bc6:	68fb      	ldr	r3, [r7, #12]
 8017bc8:	785b      	ldrb	r3, [r3, #1]
 8017bca:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8017bcc:	68fb      	ldr	r3, [r7, #12]
 8017bce:	689a      	ldr	r2, [r3, #8]
 8017bd0:	2515      	movs	r5, #21
 8017bd2:	197b      	adds	r3, r7, r5
 8017bd4:	7819      	ldrb	r1, [r3, #0]
 8017bd6:	2613      	movs	r6, #19
 8017bd8:	19bb      	adds	r3, r7, r6
 8017bda:	781b      	ldrb	r3, [r3, #0]
 8017bdc:	18cb      	adds	r3, r1, r3
 8017bde:	0019      	movs	r1, r3
 8017be0:	000b      	movs	r3, r1
 8017be2:	005b      	lsls	r3, r3, #1
 8017be4:	185b      	adds	r3, r3, r1
 8017be6:	009b      	lsls	r3, r3, #2
 8017be8:	18d3      	adds	r3, r2, r3
 8017bea:	7a1b      	ldrb	r3, [r3, #8]
 8017bec:	011b      	lsls	r3, r3, #4
 8017bee:	b25b      	sxtb	r3, r3
 8017bf0:	111b      	asrs	r3, r3, #4
 8017bf2:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8017bf4:	001c      	movs	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8017bf6:	68fb      	ldr	r3, [r7, #12]
 8017bf8:	689a      	ldr	r2, [r3, #8]
 8017bfa:	197b      	adds	r3, r7, r5
 8017bfc:	7819      	ldrb	r1, [r3, #0]
 8017bfe:	19bb      	adds	r3, r7, r6
 8017c00:	781b      	ldrb	r3, [r3, #0]
 8017c02:	18cb      	adds	r3, r1, r3
 8017c04:	0019      	movs	r1, r3
 8017c06:	000b      	movs	r3, r1
 8017c08:	005b      	lsls	r3, r3, #1
 8017c0a:	185b      	adds	r3, r3, r1
 8017c0c:	009b      	lsls	r3, r3, #2
 8017c0e:	18d3      	adds	r3, r2, r3
 8017c10:	7a1b      	ldrb	r3, [r3, #8]
 8017c12:	b25b      	sxtb	r3, r3
 8017c14:	111b      	asrs	r3, r3, #4
 8017c16:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8017c18:	001a      	movs	r2, r3
 8017c1a:	0021      	movs	r1, r4
 8017c1c:	f7ff fbff 	bl	801741e <RegionCommonValueInRange>
 8017c20:	1e03      	subs	r3, r0, #0
 8017c22:	d039      	beq.n	8017c98 <RegionCommonCountNbOfEnabledChannels+0x17e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8017c24:	68fb      	ldr	r3, [r7, #12]
 8017c26:	68da      	ldr	r2, [r3, #12]
 8017c28:	68fb      	ldr	r3, [r7, #12]
 8017c2a:	6899      	ldr	r1, [r3, #8]
 8017c2c:	197b      	adds	r3, r7, r5
 8017c2e:	7818      	ldrb	r0, [r3, #0]
 8017c30:	19bb      	adds	r3, r7, r6
 8017c32:	781b      	ldrb	r3, [r3, #0]
 8017c34:	18c3      	adds	r3, r0, r3
 8017c36:	0018      	movs	r0, r3
 8017c38:	0003      	movs	r3, r0
 8017c3a:	005b      	lsls	r3, r3, #1
 8017c3c:	181b      	adds	r3, r3, r0
 8017c3e:	009b      	lsls	r3, r3, #2
 8017c40:	18cb      	adds	r3, r1, r3
 8017c42:	7a5b      	ldrb	r3, [r3, #9]
 8017c44:	0019      	movs	r1, r3
 8017c46:	000b      	movs	r3, r1
 8017c48:	009b      	lsls	r3, r3, #2
 8017c4a:	185b      	adds	r3, r3, r1
 8017c4c:	009b      	lsls	r3, r3, #2
 8017c4e:	18d3      	adds	r3, r2, r3
 8017c50:	7c1b      	ldrb	r3, [r3, #16]
 8017c52:	2201      	movs	r2, #1
 8017c54:	4053      	eors	r3, r2
 8017c56:	b2db      	uxtb	r3, r3
 8017c58:	2b00      	cmp	r3, #0
 8017c5a:	d006      	beq.n	8017c6a <RegionCommonCountNbOfEnabledChannels+0x150>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8017c5c:	2116      	movs	r1, #22
 8017c5e:	187b      	adds	r3, r7, r1
 8017c60:	781a      	ldrb	r2, [r3, #0]
 8017c62:	187b      	adds	r3, r7, r1
 8017c64:	3201      	adds	r2, #1
 8017c66:	701a      	strb	r2, [r3, #0]
                    continue;
 8017c68:	e017      	b.n	8017c9a <RegionCommonCountNbOfEnabledChannels+0x180>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8017c6a:	2217      	movs	r2, #23
 8017c6c:	18bb      	adds	r3, r7, r2
 8017c6e:	781b      	ldrb	r3, [r3, #0]
 8017c70:	18ba      	adds	r2, r7, r2
 8017c72:	1c59      	adds	r1, r3, #1
 8017c74:	7011      	strb	r1, [r2, #0]
 8017c76:	001a      	movs	r2, r3
 8017c78:	68bb      	ldr	r3, [r7, #8]
 8017c7a:	189b      	adds	r3, r3, r2
 8017c7c:	2215      	movs	r2, #21
 8017c7e:	18b9      	adds	r1, r7, r2
 8017c80:	2213      	movs	r2, #19
 8017c82:	18ba      	adds	r2, r7, r2
 8017c84:	7809      	ldrb	r1, [r1, #0]
 8017c86:	7812      	ldrb	r2, [r2, #0]
 8017c88:	188a      	adds	r2, r1, r2
 8017c8a:	b2d2      	uxtb	r2, r2
 8017c8c:	701a      	strb	r2, [r3, #0]
 8017c8e:	e004      	b.n	8017c9a <RegionCommonCountNbOfEnabledChannels+0x180>
                    continue;
 8017c90:	46c0      	nop			; (mov r8, r8)
 8017c92:	e002      	b.n	8017c9a <RegionCommonCountNbOfEnabledChannels+0x180>
                        continue;
 8017c94:	46c0      	nop			; (mov r8, r8)
 8017c96:	e000      	b.n	8017c9a <RegionCommonCountNbOfEnabledChannels+0x180>
                    continue;
 8017c98:	46c0      	nop			; (mov r8, r8)
        for( uint8_t j = 0; j < 16; j++ )
 8017c9a:	2113      	movs	r1, #19
 8017c9c:	187b      	adds	r3, r7, r1
 8017c9e:	781a      	ldrb	r2, [r3, #0]
 8017ca0:	187b      	adds	r3, r7, r1
 8017ca2:	3201      	adds	r2, #1
 8017ca4:	701a      	strb	r2, [r3, #0]
 8017ca6:	2313      	movs	r3, #19
 8017ca8:	18fb      	adds	r3, r7, r3
 8017caa:	781b      	ldrb	r3, [r3, #0]
 8017cac:	2b0f      	cmp	r3, #15
 8017cae:	d800      	bhi.n	8017cb2 <RegionCommonCountNbOfEnabledChannels+0x198>
 8017cb0:	e750      	b.n	8017b54 <RegionCommonCountNbOfEnabledChannels+0x3a>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8017cb2:	2215      	movs	r2, #21
 8017cb4:	18bb      	adds	r3, r7, r2
 8017cb6:	18ba      	adds	r2, r7, r2
 8017cb8:	7812      	ldrb	r2, [r2, #0]
 8017cba:	3210      	adds	r2, #16
 8017cbc:	701a      	strb	r2, [r3, #0]
 8017cbe:	2114      	movs	r1, #20
 8017cc0:	187b      	adds	r3, r7, r1
 8017cc2:	781a      	ldrb	r2, [r3, #0]
 8017cc4:	187b      	adds	r3, r7, r1
 8017cc6:	3201      	adds	r2, #1
 8017cc8:	701a      	strb	r2, [r3, #0]
 8017cca:	2315      	movs	r3, #21
 8017ccc:	18fb      	adds	r3, r7, r3
 8017cce:	781b      	ldrb	r3, [r3, #0]
 8017cd0:	b29a      	uxth	r2, r3
 8017cd2:	68fb      	ldr	r3, [r7, #12]
 8017cd4:	8a1b      	ldrh	r3, [r3, #16]
 8017cd6:	429a      	cmp	r2, r3
 8017cd8:	d200      	bcs.n	8017cdc <RegionCommonCountNbOfEnabledChannels+0x1c2>
 8017cda:	e736      	b.n	8017b4a <RegionCommonCountNbOfEnabledChannels+0x30>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8017cdc:	687b      	ldr	r3, [r7, #4]
 8017cde:	2217      	movs	r2, #23
 8017ce0:	18ba      	adds	r2, r7, r2
 8017ce2:	7812      	ldrb	r2, [r2, #0]
 8017ce4:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8017ce6:	683b      	ldr	r3, [r7, #0]
 8017ce8:	2216      	movs	r2, #22
 8017cea:	18ba      	adds	r2, r7, r2
 8017cec:	7812      	ldrb	r2, [r2, #0]
 8017cee:	701a      	strb	r2, [r3, #0]
}
 8017cf0:	46c0      	nop			; (mov r8, r8)
 8017cf2:	46bd      	mov	sp, r7
 8017cf4:	b007      	add	sp, #28
 8017cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017cf8 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8017cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017cfa:	46c6      	mov	lr, r8
 8017cfc:	b500      	push	{lr}
 8017cfe:	b08a      	sub	sp, #40	; 0x28
 8017d00:	af04      	add	r7, sp, #16
 8017d02:	60f8      	str	r0, [r7, #12]
 8017d04:	60b9      	str	r1, [r7, #8]
 8017d06:	607a      	str	r2, [r7, #4]
 8017d08:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8017d0a:	68fb      	ldr	r3, [r7, #12]
 8017d0c:	685b      	ldr	r3, [r3, #4]
 8017d0e:	0018      	movs	r0, r3
 8017d10:	f005 f914 	bl	801cf3c <UTIL_TIMER_GetElapsedTime>
 8017d14:	0003      	movs	r3, r0
 8017d16:	617b      	str	r3, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8017d18:	68fb      	ldr	r3, [r7, #12]
 8017d1a:	681a      	ldr	r2, [r3, #0]
 8017d1c:	697b      	ldr	r3, [r7, #20]
 8017d1e:	1ad2      	subs	r2, r2, r3
 8017d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017d22:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8017d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d26:	2201      	movs	r2, #1
 8017d28:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 8017d2a:	683b      	ldr	r3, [r7, #0]
 8017d2c:	2200      	movs	r2, #0
 8017d2e:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8017d30:	68fb      	ldr	r3, [r7, #12]
 8017d32:	685b      	ldr	r3, [r3, #4]
 8017d34:	2b00      	cmp	r3, #0
 8017d36:	d004      	beq.n	8017d42 <RegionCommonIdentifyChannels+0x4a>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8017d38:	68fb      	ldr	r3, [r7, #12]
 8017d3a:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8017d3c:	697a      	ldr	r2, [r7, #20]
 8017d3e:	429a      	cmp	r2, r3
 8017d40:	d32b      	bcc.n	8017d9a <RegionCommonIdentifyChannels+0xa2>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8017d42:	68bb      	ldr	r3, [r7, #8]
 8017d44:	2200      	movs	r2, #0
 8017d46:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8017d48:	68fb      	ldr	r3, [r7, #12]
 8017d4a:	69db      	ldr	r3, [r3, #28]
 8017d4c:	781b      	ldrb	r3, [r3, #0]
 8017d4e:	469c      	mov	ip, r3
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8017d50:	68fb      	ldr	r3, [r7, #12]
 8017d52:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8017d54:	68dc      	ldr	r4, [r3, #12]
 8017d56:	68fb      	ldr	r3, [r7, #12]
 8017d58:	7a5d      	ldrb	r5, [r3, #9]
 8017d5a:	68fb      	ldr	r3, [r7, #12]
 8017d5c:	7a1e      	ldrb	r6, [r3, #8]
 8017d5e:	68fb      	ldr	r3, [r7, #12]
 8017d60:	7d1b      	ldrb	r3, [r3, #20]
 8017d62:	4698      	mov	r8, r3
 8017d64:	68fb      	ldr	r3, [r7, #12]
 8017d66:	699b      	ldr	r3, [r3, #24]
 8017d68:	9303      	str	r3, [sp, #12]
 8017d6a:	68fb      	ldr	r3, [r7, #12]
 8017d6c:	2204      	movs	r2, #4
 8017d6e:	446a      	add	r2, sp
 8017d70:	330c      	adds	r3, #12
 8017d72:	cb03      	ldmia	r3!, {r0, r1}
 8017d74:	c203      	stmia	r2!, {r0, r1}
 8017d76:	4643      	mov	r3, r8
 8017d78:	9300      	str	r3, [sp, #0]
 8017d7a:	0033      	movs	r3, r6
 8017d7c:	002a      	movs	r2, r5
 8017d7e:	0021      	movs	r1, r4
 8017d80:	4660      	mov	r0, ip
 8017d82:	f7ff fc60 	bl	8017646 <RegionCommonUpdateBandTimeOff>
 8017d86:	0002      	movs	r2, r0
 8017d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017d8a:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8017d8c:	68fb      	ldr	r3, [r7, #12]
 8017d8e:	69d8      	ldr	r0, [r3, #28]
 8017d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d92:	683a      	ldr	r2, [r7, #0]
 8017d94:	6879      	ldr	r1, [r7, #4]
 8017d96:	f7ff fec0 	bl	8017b1a <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8017d9a:	683b      	ldr	r3, [r7, #0]
 8017d9c:	781b      	ldrb	r3, [r3, #0]
 8017d9e:	2b00      	cmp	r3, #0
 8017da0:	d004      	beq.n	8017dac <RegionCommonIdentifyChannels+0xb4>
    {
        *nextTxDelay = 0;
 8017da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017da4:	2200      	movs	r2, #0
 8017da6:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8017da8:	2300      	movs	r3, #0
 8017daa:	e006      	b.n	8017dba <RegionCommonIdentifyChannels+0xc2>
    }
    else if( *nbRestrictedChannels > 0 )
 8017dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017dae:	781b      	ldrb	r3, [r3, #0]
 8017db0:	2b00      	cmp	r3, #0
 8017db2:	d001      	beq.n	8017db8 <RegionCommonIdentifyChannels+0xc0>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8017db4:	230b      	movs	r3, #11
 8017db6:	e000      	b.n	8017dba <RegionCommonIdentifyChannels+0xc2>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8017db8:	230c      	movs	r3, #12
    }
}
 8017dba:	0018      	movs	r0, r3
 8017dbc:	46bd      	mov	sp, r7
 8017dbe:	b006      	add	sp, #24
 8017dc0:	bc80      	pop	{r7}
 8017dc2:	46b8      	mov	r8, r7
 8017dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08017dc8 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8017dc8:	b5b0      	push	{r4, r5, r7, lr}
 8017dca:	b08c      	sub	sp, #48	; 0x30
 8017dcc:	af04      	add	r7, sp, #16
 8017dce:	6039      	str	r1, [r7, #0]
 8017dd0:	0011      	movs	r1, r2
 8017dd2:	1dfb      	adds	r3, r7, #7
 8017dd4:	1c02      	adds	r2, r0, #0
 8017dd6:	701a      	strb	r2, [r3, #0]
 8017dd8:	1dbb      	adds	r3, r7, #6
 8017dda:	1c0a      	adds	r2, r1, #0
 8017ddc:	701a      	strb	r2, [r3, #0]
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 8017dde:	2108      	movs	r1, #8
 8017de0:	187b      	adds	r3, r7, r1
 8017de2:	4a17      	ldr	r2, [pc, #92]	; (8017e40 <RegionCommonRxConfigPrint+0x78>)
 8017de4:	ca31      	ldmia	r2!, {r0, r4, r5}
 8017de6:	c331      	stmia	r3!, {r0, r4, r5}
 8017de8:	ca31      	ldmia	r2!, {r0, r4, r5}
 8017dea:	c331      	stmia	r3!, {r0, r4, r5}

    if ( rxSlot < RX_SLOT_NONE )
 8017dec:	1dfb      	adds	r3, r7, #7
 8017dee:	781b      	ldrb	r3, [r3, #0]
 8017df0:	2b05      	cmp	r3, #5
 8017df2:	d813      	bhi.n	8017e1c <RegionCommonRxConfigPrint+0x54>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", slotStrings[rxSlot], frequency, dr );
 8017df4:	1dfb      	adds	r3, r7, #7
 8017df6:	781a      	ldrb	r2, [r3, #0]
 8017df8:	187b      	adds	r3, r7, r1
 8017dfa:	0092      	lsls	r2, r2, #2
 8017dfc:	58d3      	ldr	r3, [r2, r3]
 8017dfe:	1dba      	adds	r2, r7, #6
 8017e00:	7812      	ldrb	r2, [r2, #0]
 8017e02:	b252      	sxtb	r2, r2
 8017e04:	490f      	ldr	r1, [pc, #60]	; (8017e44 <RegionCommonRxConfigPrint+0x7c>)
 8017e06:	9202      	str	r2, [sp, #8]
 8017e08:	683a      	ldr	r2, [r7, #0]
 8017e0a:	9201      	str	r2, [sp, #4]
 8017e0c:	9300      	str	r3, [sp, #0]
 8017e0e:	000b      	movs	r3, r1
 8017e10:	2201      	movs	r2, #1
 8017e12:	2100      	movs	r1, #0
 8017e14:	2002      	movs	r0, #2
 8017e16:	f004 f809 	bl	801be2c <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8017e1a:	e00c      	b.n	8017e36 <RegionCommonRxConfigPrint+0x6e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8017e1c:	1dbb      	adds	r3, r7, #6
 8017e1e:	781b      	ldrb	r3, [r3, #0]
 8017e20:	b25b      	sxtb	r3, r3
 8017e22:	4a09      	ldr	r2, [pc, #36]	; (8017e48 <RegionCommonRxConfigPrint+0x80>)
 8017e24:	9301      	str	r3, [sp, #4]
 8017e26:	683b      	ldr	r3, [r7, #0]
 8017e28:	9300      	str	r3, [sp, #0]
 8017e2a:	0013      	movs	r3, r2
 8017e2c:	2201      	movs	r2, #1
 8017e2e:	2100      	movs	r1, #0
 8017e30:	2002      	movs	r0, #2
 8017e32:	f003 fffb 	bl	801be2c <UTIL_ADV_TRACE_COND_FSend>
}
 8017e36:	46c0      	nop			; (mov r8, r8)
 8017e38:	46bd      	mov	sp, r7
 8017e3a:	b008      	add	sp, #32
 8017e3c:	bdb0      	pop	{r4, r5, r7, pc}
 8017e3e:	46c0      	nop			; (mov r8, r8)
 8017e40:	0801f99c 	.word	0x0801f99c
 8017e44:	0801f960 	.word	0x0801f960
 8017e48:	0801f980 	.word	0x0801f980

08017e4c <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8017e4c:	b580      	push	{r7, lr}
 8017e4e:	b084      	sub	sp, #16
 8017e50:	af02      	add	r7, sp, #8
 8017e52:	6078      	str	r0, [r7, #4]
 8017e54:	000a      	movs	r2, r1
 8017e56:	1cfb      	adds	r3, r7, #3
 8017e58:	701a      	strb	r2, [r3, #0]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8017e5a:	1cfb      	adds	r3, r7, #3
 8017e5c:	781b      	ldrb	r3, [r3, #0]
 8017e5e:	b25b      	sxtb	r3, r3
 8017e60:	4a06      	ldr	r2, [pc, #24]	; (8017e7c <RegionCommonTxConfigPrint+0x30>)
 8017e62:	9301      	str	r3, [sp, #4]
 8017e64:	687b      	ldr	r3, [r7, #4]
 8017e66:	9300      	str	r3, [sp, #0]
 8017e68:	0013      	movs	r3, r2
 8017e6a:	2201      	movs	r2, #1
 8017e6c:	2100      	movs	r1, #0
 8017e6e:	2002      	movs	r0, #2
 8017e70:	f003 ffdc 	bl	801be2c <UTIL_ADV_TRACE_COND_FSend>
}
 8017e74:	46c0      	nop			; (mov r8, r8)
 8017e76:	46bd      	mov	sp, r7
 8017e78:	b002      	add	sp, #8
 8017e7a:	bd80      	pop	{r7, pc}
 8017e7c:	0801f9b4 	.word	0x0801f9b4

08017e80 <GetNextLowerTxDr>:
 */
static RegionEU868NvmCtx_t NvmCtx;

// Static functions
static int8_t GetNextLowerTxDr( int8_t dr, int8_t minDr )
{
 8017e80:	b580      	push	{r7, lr}
 8017e82:	b084      	sub	sp, #16
 8017e84:	af00      	add	r7, sp, #0
 8017e86:	0002      	movs	r2, r0
 8017e88:	1dfb      	adds	r3, r7, #7
 8017e8a:	701a      	strb	r2, [r3, #0]
 8017e8c:	1dbb      	adds	r3, r7, #6
 8017e8e:	1c0a      	adds	r2, r1, #0
 8017e90:	701a      	strb	r2, [r3, #0]
    uint8_t nextLowerDr = 0;
 8017e92:	210f      	movs	r1, #15
 8017e94:	187b      	adds	r3, r7, r1
 8017e96:	2200      	movs	r2, #0
 8017e98:	701a      	strb	r2, [r3, #0]

    if( dr == minDr )
 8017e9a:	1dfa      	adds	r2, r7, #7
 8017e9c:	1dbb      	adds	r3, r7, #6
 8017e9e:	7812      	ldrb	r2, [r2, #0]
 8017ea0:	b252      	sxtb	r2, r2
 8017ea2:	781b      	ldrb	r3, [r3, #0]
 8017ea4:	b25b      	sxtb	r3, r3
 8017ea6:	429a      	cmp	r2, r3
 8017ea8:	d104      	bne.n	8017eb4 <GetNextLowerTxDr+0x34>
    {
        nextLowerDr = minDr;
 8017eaa:	187b      	adds	r3, r7, r1
 8017eac:	1dba      	adds	r2, r7, #6
 8017eae:	7812      	ldrb	r2, [r2, #0]
 8017eb0:	701a      	strb	r2, [r3, #0]
 8017eb2:	e005      	b.n	8017ec0 <GetNextLowerTxDr+0x40>
    }
    else
    {
        nextLowerDr = dr - 1;
 8017eb4:	1dfb      	adds	r3, r7, #7
 8017eb6:	781a      	ldrb	r2, [r3, #0]
 8017eb8:	230f      	movs	r3, #15
 8017eba:	18fb      	adds	r3, r7, r3
 8017ebc:	3a01      	subs	r2, #1
 8017ebe:	701a      	strb	r2, [r3, #0]
    }
    return nextLowerDr;
 8017ec0:	230f      	movs	r3, #15
 8017ec2:	18fb      	adds	r3, r7, r3
 8017ec4:	781b      	ldrb	r3, [r3, #0]
 8017ec6:	b25b      	sxtb	r3, r3
}
 8017ec8:	0018      	movs	r0, r3
 8017eca:	46bd      	mov	sp, r7
 8017ecc:	b004      	add	sp, #16
 8017ece:	bd80      	pop	{r7, pc}

08017ed0 <GetBandwidth>:

static uint32_t GetBandwidth( uint32_t drIndex )
{
 8017ed0:	b580      	push	{r7, lr}
 8017ed2:	b082      	sub	sp, #8
 8017ed4:	af00      	add	r7, sp, #0
 8017ed6:	6078      	str	r0, [r7, #4]
    switch( BandwidthsEU868[drIndex] )
 8017ed8:	4b09      	ldr	r3, [pc, #36]	; (8017f00 <GetBandwidth+0x30>)
 8017eda:	687a      	ldr	r2, [r7, #4]
 8017edc:	0092      	lsls	r2, r2, #2
 8017ede:	58d3      	ldr	r3, [r2, r3]
 8017ee0:	4a08      	ldr	r2, [pc, #32]	; (8017f04 <GetBandwidth+0x34>)
 8017ee2:	4293      	cmp	r3, r2
 8017ee4:	d004      	beq.n	8017ef0 <GetBandwidth+0x20>
 8017ee6:	4a08      	ldr	r2, [pc, #32]	; (8017f08 <GetBandwidth+0x38>)
 8017ee8:	4293      	cmp	r3, r2
 8017eea:	d003      	beq.n	8017ef4 <GetBandwidth+0x24>
    {
        default:
        case 125000:
            return 0;
 8017eec:	2300      	movs	r3, #0
 8017eee:	e002      	b.n	8017ef6 <GetBandwidth+0x26>
        case 250000:
            return 1;
 8017ef0:	2301      	movs	r3, #1
 8017ef2:	e000      	b.n	8017ef6 <GetBandwidth+0x26>
        case 500000:
            return 2;
 8017ef4:	2302      	movs	r3, #2
    }
}
 8017ef6:	0018      	movs	r0, r3
 8017ef8:	46bd      	mov	sp, r7
 8017efa:	b002      	add	sp, #8
 8017efc:	bd80      	pop	{r7, pc}
 8017efe:	46c0      	nop			; (mov r8, r8)
 8017f00:	0801f9e8 	.word	0x0801f9e8
 8017f04:	0003d090 	.word	0x0003d090
 8017f08:	0007a120 	.word	0x0007a120

08017f0c <LimitTxPower>:

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 8017f0c:	b590      	push	{r4, r7, lr}
 8017f0e:	b085      	sub	sp, #20
 8017f10:	af00      	add	r7, sp, #0
 8017f12:	0004      	movs	r4, r0
 8017f14:	0008      	movs	r0, r1
 8017f16:	0011      	movs	r1, r2
 8017f18:	603b      	str	r3, [r7, #0]
 8017f1a:	1dfb      	adds	r3, r7, #7
 8017f1c:	1c22      	adds	r2, r4, #0
 8017f1e:	701a      	strb	r2, [r3, #0]
 8017f20:	1dbb      	adds	r3, r7, #6
 8017f22:	1c02      	adds	r2, r0, #0
 8017f24:	701a      	strb	r2, [r3, #0]
 8017f26:	1d7b      	adds	r3, r7, #5
 8017f28:	1c0a      	adds	r2, r1, #0
 8017f2a:	701a      	strb	r2, [r3, #0]
    int8_t txPowerResult = txPower;
 8017f2c:	210f      	movs	r1, #15
 8017f2e:	187b      	adds	r3, r7, r1
 8017f30:	1dfa      	adds	r2, r7, #7
 8017f32:	7812      	ldrb	r2, [r2, #0]
 8017f34:	701a      	strb	r2, [r3, #0]

    // Limit tx power to the band max
    txPowerResult =  MAX( txPower, maxBandTxPower );
 8017f36:	187a      	adds	r2, r7, r1
 8017f38:	1dbb      	adds	r3, r7, #6
 8017f3a:	1df9      	adds	r1, r7, #7
 8017f3c:	780c      	ldrb	r4, [r1, #0]
 8017f3e:	781b      	ldrb	r3, [r3, #0]
 8017f40:	b258      	sxtb	r0, r3
 8017f42:	b261      	sxtb	r1, r4
 8017f44:	4288      	cmp	r0, r1
 8017f46:	da00      	bge.n	8017f4a <LimitTxPower+0x3e>
 8017f48:	1c23      	adds	r3, r4, #0
 8017f4a:	7013      	strb	r3, [r2, #0]

    return txPowerResult;
 8017f4c:	230f      	movs	r3, #15
 8017f4e:	18fb      	adds	r3, r7, r3
 8017f50:	781b      	ldrb	r3, [r3, #0]
 8017f52:	b25b      	sxtb	r3, r3
}
 8017f54:	0018      	movs	r0, r3
 8017f56:	46bd      	mov	sp, r7
 8017f58:	b005      	add	sp, #20
 8017f5a:	bd90      	pop	{r4, r7, pc}

08017f5c <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8017f5c:	b580      	push	{r7, lr}
 8017f5e:	b082      	sub	sp, #8
 8017f60:	af00      	add	r7, sp, #0
 8017f62:	6078      	str	r0, [r7, #4]
 8017f64:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8017f66:	4b2e      	ldr	r3, [pc, #184]	; (8018020 <VerifyRfFreq+0xc4>)
 8017f68:	6a1b      	ldr	r3, [r3, #32]
 8017f6a:	687a      	ldr	r2, [r7, #4]
 8017f6c:	0010      	movs	r0, r2
 8017f6e:	4798      	blx	r3
 8017f70:	0003      	movs	r3, r0
 8017f72:	001a      	movs	r2, r3
 8017f74:	2301      	movs	r3, #1
 8017f76:	4053      	eors	r3, r2
 8017f78:	b2db      	uxtb	r3, r3
 8017f7a:	2b00      	cmp	r3, #0
 8017f7c:	d001      	beq.n	8017f82 <VerifyRfFreq+0x26>
    {
        return false;
 8017f7e:	2300      	movs	r3, #0
 8017f80:	e04a      	b.n	8018018 <VerifyRfFreq+0xbc>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 8017f82:	687b      	ldr	r3, [r7, #4]
 8017f84:	4a27      	ldr	r2, [pc, #156]	; (8018024 <VerifyRfFreq+0xc8>)
 8017f86:	4293      	cmp	r3, r2
 8017f88:	d907      	bls.n	8017f9a <VerifyRfFreq+0x3e>
 8017f8a:	687b      	ldr	r3, [r7, #4]
 8017f8c:	4a26      	ldr	r2, [pc, #152]	; (8018028 <VerifyRfFreq+0xcc>)
 8017f8e:	4293      	cmp	r3, r2
 8017f90:	d803      	bhi.n	8017f9a <VerifyRfFreq+0x3e>
    {
        *band = 2;
 8017f92:	683b      	ldr	r3, [r7, #0]
 8017f94:	2202      	movs	r2, #2
 8017f96:	701a      	strb	r2, [r3, #0]
 8017f98:	e03d      	b.n	8018016 <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 8017f9a:	687b      	ldr	r3, [r7, #4]
 8017f9c:	4a22      	ldr	r2, [pc, #136]	; (8018028 <VerifyRfFreq+0xcc>)
 8017f9e:	4293      	cmp	r3, r2
 8017fa0:	d907      	bls.n	8017fb2 <VerifyRfFreq+0x56>
 8017fa2:	687b      	ldr	r3, [r7, #4]
 8017fa4:	4a21      	ldr	r2, [pc, #132]	; (801802c <VerifyRfFreq+0xd0>)
 8017fa6:	4293      	cmp	r3, r2
 8017fa8:	d803      	bhi.n	8017fb2 <VerifyRfFreq+0x56>
    {
        *band = 0;
 8017faa:	683b      	ldr	r3, [r7, #0]
 8017fac:	2200      	movs	r2, #0
 8017fae:	701a      	strb	r2, [r3, #0]
 8017fb0:	e031      	b.n	8018016 <VerifyRfFreq+0xba>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 8017fb2:	687b      	ldr	r3, [r7, #4]
 8017fb4:	4a1d      	ldr	r2, [pc, #116]	; (801802c <VerifyRfFreq+0xd0>)
 8017fb6:	4293      	cmp	r3, r2
 8017fb8:	d907      	bls.n	8017fca <VerifyRfFreq+0x6e>
 8017fba:	687b      	ldr	r3, [r7, #4]
 8017fbc:	4a1c      	ldr	r2, [pc, #112]	; (8018030 <VerifyRfFreq+0xd4>)
 8017fbe:	4293      	cmp	r3, r2
 8017fc0:	d803      	bhi.n	8017fca <VerifyRfFreq+0x6e>
    {
        *band = 1;
 8017fc2:	683b      	ldr	r3, [r7, #0]
 8017fc4:	2201      	movs	r2, #1
 8017fc6:	701a      	strb	r2, [r3, #0]
 8017fc8:	e025      	b.n	8018016 <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 8017fca:	687b      	ldr	r3, [r7, #4]
 8017fcc:	4a19      	ldr	r2, [pc, #100]	; (8018034 <VerifyRfFreq+0xd8>)
 8017fce:	4293      	cmp	r3, r2
 8017fd0:	d907      	bls.n	8017fe2 <VerifyRfFreq+0x86>
 8017fd2:	687b      	ldr	r3, [r7, #4]
 8017fd4:	4a18      	ldr	r2, [pc, #96]	; (8018038 <VerifyRfFreq+0xdc>)
 8017fd6:	4293      	cmp	r3, r2
 8017fd8:	d803      	bhi.n	8017fe2 <VerifyRfFreq+0x86>
    {
        *band = 5;
 8017fda:	683b      	ldr	r3, [r7, #0]
 8017fdc:	2205      	movs	r2, #5
 8017fde:	701a      	strb	r2, [r3, #0]
 8017fe0:	e019      	b.n	8018016 <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 8017fe2:	687b      	ldr	r3, [r7, #4]
 8017fe4:	4a15      	ldr	r2, [pc, #84]	; (801803c <VerifyRfFreq+0xe0>)
 8017fe6:	4293      	cmp	r3, r2
 8017fe8:	d907      	bls.n	8017ffa <VerifyRfFreq+0x9e>
 8017fea:	687b      	ldr	r3, [r7, #4]
 8017fec:	4a14      	ldr	r2, [pc, #80]	; (8018040 <VerifyRfFreq+0xe4>)
 8017fee:	4293      	cmp	r3, r2
 8017ff0:	d803      	bhi.n	8017ffa <VerifyRfFreq+0x9e>
    {
        *band = 3;
 8017ff2:	683b      	ldr	r3, [r7, #0]
 8017ff4:	2203      	movs	r2, #3
 8017ff6:	701a      	strb	r2, [r3, #0]
 8017ff8:	e00d      	b.n	8018016 <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 8017ffa:	687b      	ldr	r3, [r7, #4]
 8017ffc:	4a11      	ldr	r2, [pc, #68]	; (8018044 <VerifyRfFreq+0xe8>)
 8017ffe:	4293      	cmp	r3, r2
 8018000:	d907      	bls.n	8018012 <VerifyRfFreq+0xb6>
 8018002:	687b      	ldr	r3, [r7, #4]
 8018004:	4a10      	ldr	r2, [pc, #64]	; (8018048 <VerifyRfFreq+0xec>)
 8018006:	4293      	cmp	r3, r2
 8018008:	d803      	bhi.n	8018012 <VerifyRfFreq+0xb6>
    {
        *band = 4;
 801800a:	683b      	ldr	r3, [r7, #0]
 801800c:	2204      	movs	r2, #4
 801800e:	701a      	strb	r2, [r3, #0]
 8018010:	e001      	b.n	8018016 <VerifyRfFreq+0xba>
    }
    else
    {
        return false;
 8018012:	2300      	movs	r3, #0
 8018014:	e000      	b.n	8018018 <VerifyRfFreq+0xbc>
    }
    return true;
 8018016:	2301      	movs	r3, #1
}
 8018018:	0018      	movs	r0, r3
 801801a:	46bd      	mov	sp, r7
 801801c:	b002      	add	sp, #8
 801801e:	bd80      	pop	{r7, pc}
 8018020:	0801fb64 	.word	0x0801fb64
 8018024:	337055bf 	.word	0x337055bf
 8018028:	338eda3f 	.word	0x338eda3f
 801802c:	33bca100 	.word	0x33bca100
 8018030:	33c5c8c0 	.word	0x33c5c8c0
 8018034:	33c74f5f 	.word	0x33c74f5f
 8018038:	33cef080 	.word	0x33cef080
 801803c:	33d1fdbf 	.word	0x33d1fdbf
 8018040:	33d5ce50 	.word	0x33d5ce50
 8018044:	33d6919f 	.word	0x33d6919f
 8018048:	33db2580 	.word	0x33db2580

0801804c <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 801804c:	b5b0      	push	{r4, r5, r7, lr}
 801804e:	b08a      	sub	sp, #40	; 0x28
 8018050:	af04      	add	r7, sp, #16
 8018052:	0002      	movs	r2, r0
 8018054:	1dfb      	adds	r3, r7, #7
 8018056:	701a      	strb	r2, [r3, #0]
 8018058:	1d3b      	adds	r3, r7, #4
 801805a:	1c0a      	adds	r2, r1, #0
 801805c:	801a      	strh	r2, [r3, #0]
    int8_t phyDr = DataratesEU868[datarate];
 801805e:	1dfb      	adds	r3, r7, #7
 8018060:	781b      	ldrb	r3, [r3, #0]
 8018062:	b25b      	sxtb	r3, r3
 8018064:	4a26      	ldr	r2, [pc, #152]	; (8018100 <GetTimeOnAir+0xb4>)
 8018066:	5cd2      	ldrb	r2, [r2, r3]
 8018068:	2513      	movs	r5, #19
 801806a:	197b      	adds	r3, r7, r5
 801806c:	701a      	strb	r2, [r3, #0]
    uint32_t bandwidth = GetBandwidth( datarate );
 801806e:	1dfb      	adds	r3, r7, #7
 8018070:	781b      	ldrb	r3, [r3, #0]
 8018072:	b25b      	sxtb	r3, r3
 8018074:	0018      	movs	r0, r3
 8018076:	f7ff ff2b 	bl	8017ed0 <GetBandwidth>
 801807a:	0003      	movs	r3, r0
 801807c:	60fb      	str	r3, [r7, #12]
    TimerTime_t timeOnAir = 0;
 801807e:	2300      	movs	r3, #0
 8018080:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8018082:	1dfb      	adds	r3, r7, #7
 8018084:	781b      	ldrb	r3, [r3, #0]
 8018086:	b25b      	sxtb	r3, r3
 8018088:	2b07      	cmp	r3, #7
 801808a:	d11d      	bne.n	80180c8 <GetTimeOnAir+0x7c>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 801808c:	4b1d      	ldr	r3, [pc, #116]	; (8018104 <GetTimeOnAir+0xb8>)
 801808e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8018090:	197b      	adds	r3, r7, r5
 8018092:	2200      	movs	r2, #0
 8018094:	569a      	ldrsb	r2, [r3, r2]
 8018096:	0013      	movs	r3, r2
 8018098:	015b      	lsls	r3, r3, #5
 801809a:	1a9b      	subs	r3, r3, r2
 801809c:	009b      	lsls	r3, r3, #2
 801809e:	189b      	adds	r3, r3, r2
 80180a0:	00db      	lsls	r3, r3, #3
 80180a2:	0018      	movs	r0, r3
 80180a4:	1d3b      	adds	r3, r7, #4
 80180a6:	881b      	ldrh	r3, [r3, #0]
 80180a8:	b2db      	uxtb	r3, r3
 80180aa:	68f9      	ldr	r1, [r7, #12]
 80180ac:	2201      	movs	r2, #1
 80180ae:	9203      	str	r2, [sp, #12]
 80180b0:	9302      	str	r3, [sp, #8]
 80180b2:	2300      	movs	r3, #0
 80180b4:	9301      	str	r3, [sp, #4]
 80180b6:	2305      	movs	r3, #5
 80180b8:	9300      	str	r3, [sp, #0]
 80180ba:	2300      	movs	r3, #0
 80180bc:	0002      	movs	r2, r0
 80180be:	2000      	movs	r0, #0
 80180c0:	47a0      	blx	r4
 80180c2:	0003      	movs	r3, r0
 80180c4:	617b      	str	r3, [r7, #20]
 80180c6:	e015      	b.n	80180f4 <GetTimeOnAir+0xa8>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 80180c8:	4b0e      	ldr	r3, [pc, #56]	; (8018104 <GetTimeOnAir+0xb8>)
 80180ca:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80180cc:	2313      	movs	r3, #19
 80180ce:	18fb      	adds	r3, r7, r3
 80180d0:	2200      	movs	r2, #0
 80180d2:	569a      	ldrsb	r2, [r3, r2]
 80180d4:	1d3b      	adds	r3, r7, #4
 80180d6:	881b      	ldrh	r3, [r3, #0]
 80180d8:	b2db      	uxtb	r3, r3
 80180da:	68f9      	ldr	r1, [r7, #12]
 80180dc:	2001      	movs	r0, #1
 80180de:	9003      	str	r0, [sp, #12]
 80180e0:	9302      	str	r3, [sp, #8]
 80180e2:	2300      	movs	r3, #0
 80180e4:	9301      	str	r3, [sp, #4]
 80180e6:	2308      	movs	r3, #8
 80180e8:	9300      	str	r3, [sp, #0]
 80180ea:	2301      	movs	r3, #1
 80180ec:	2001      	movs	r0, #1
 80180ee:	47a0      	blx	r4
 80180f0:	0003      	movs	r3, r0
 80180f2:	617b      	str	r3, [r7, #20]
    }
    return timeOnAir;
 80180f4:	697b      	ldr	r3, [r7, #20]
}
 80180f6:	0018      	movs	r0, r3
 80180f8:	46bd      	mov	sp, r7
 80180fa:	b006      	add	sp, #24
 80180fc:	bdb0      	pop	{r4, r5, r7, pc}
 80180fe:	46c0      	nop			; (mov r8, r8)
 8018100:	0801f9e0 	.word	0x0801f9e0
 8018104:	0801fb64 	.word	0x0801fb64

08018108 <RegionEU868GetPhyParam>:

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8018108:	b580      	push	{r7, lr}
 801810a:	b084      	sub	sp, #16
 801810c:	af00      	add	r7, sp, #0
 801810e:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8018110:	2308      	movs	r3, #8
 8018112:	18fb      	adds	r3, r7, r3
 8018114:	2200      	movs	r2, #0
 8018116:	601a      	str	r2, [r3, #0]

    switch( getPhy->Attribute )
 8018118:	687b      	ldr	r3, [r7, #4]
 801811a:	781b      	ldrb	r3, [r3, #0]
 801811c:	2b39      	cmp	r3, #57	; 0x39
 801811e:	d900      	bls.n	8018122 <RegionEU868GetPhyParam+0x1a>
 8018120:	e0e9      	b.n	80182f6 <RegionEU868GetPhyParam+0x1ee>
 8018122:	009a      	lsls	r2, r3, #2
 8018124:	4b7b      	ldr	r3, [pc, #492]	; (8018314 <RegionEU868GetPhyParam+0x20c>)
 8018126:	18d3      	adds	r3, r2, r3
 8018128:	681b      	ldr	r3, [r3, #0]
 801812a:	469f      	mov	pc, r3
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 801812c:	2308      	movs	r3, #8
 801812e:	18fb      	adds	r3, r7, r3
 8018130:	2200      	movs	r2, #0
 8018132:	601a      	str	r2, [r3, #0]
            break;
 8018134:	e0e0      	b.n	80182f8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 8018136:	2308      	movs	r3, #8
 8018138:	18fb      	adds	r3, r7, r3
 801813a:	2200      	movs	r2, #0
 801813c:	601a      	str	r2, [r3, #0]
            break;
 801813e:	e0db      	b.n	80182f8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8018140:	2308      	movs	r3, #8
 8018142:	18fb      	adds	r3, r7, r3
 8018144:	2200      	movs	r2, #0
 8018146:	601a      	str	r2, [r3, #0]
            break;
 8018148:	e0d6      	b.n	80182f8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, EU868_TX_MIN_DATARATE );
 801814a:	687b      	ldr	r3, [r7, #4]
 801814c:	785b      	ldrb	r3, [r3, #1]
 801814e:	b25b      	sxtb	r3, r3
 8018150:	2100      	movs	r1, #0
 8018152:	0018      	movs	r0, r3
 8018154:	f7ff fe94 	bl	8017e80 <GetNextLowerTxDr>
 8018158:	0003      	movs	r3, r0
 801815a:	001a      	movs	r2, r3
 801815c:	2308      	movs	r3, #8
 801815e:	18fb      	adds	r3, r7, r3
 8018160:	601a      	str	r2, [r3, #0]
            break;
 8018162:	e0c9      	b.n	80182f8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 8018164:	2308      	movs	r3, #8
 8018166:	18fb      	adds	r3, r7, r3
 8018168:	2200      	movs	r2, #0
 801816a:	601a      	str	r2, [r3, #0]
            break;
 801816c:	e0c4      	b.n	80182f8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 801816e:	2308      	movs	r3, #8
 8018170:	18fb      	adds	r3, r7, r3
 8018172:	2200      	movs	r2, #0
 8018174:	601a      	str	r2, [r3, #0]
            break;
 8018176:	e0bf      	b.n	80182f8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = EU868_ADR_ACK_LIMIT;
 8018178:	2308      	movs	r3, #8
 801817a:	18fb      	adds	r3, r7, r3
 801817c:	2240      	movs	r2, #64	; 0x40
 801817e:	601a      	str	r2, [r3, #0]
            break;
 8018180:	e0ba      	b.n	80182f8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = EU868_ADR_ACK_DELAY;
 8018182:	2308      	movs	r3, #8
 8018184:	18fb      	adds	r3, r7, r3
 8018186:	2220      	movs	r2, #32
 8018188:	601a      	str	r2, [r3, #0]
            break;
 801818a:	e0b5      	b.n	80182f8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 801818c:	687b      	ldr	r3, [r7, #4]
 801818e:	785b      	ldrb	r3, [r3, #1]
 8018190:	b25b      	sxtb	r3, r3
 8018192:	001a      	movs	r2, r3
 8018194:	4b60      	ldr	r3, [pc, #384]	; (8018318 <RegionEU868GetPhyParam+0x210>)
 8018196:	5c9b      	ldrb	r3, [r3, r2]
 8018198:	001a      	movs	r2, r3
 801819a:	2308      	movs	r3, #8
 801819c:	18fb      	adds	r3, r7, r3
 801819e:	601a      	str	r2, [r3, #0]
            break;
 80181a0:	e0aa      	b.n	80182f8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 80181a2:	687b      	ldr	r3, [r7, #4]
 80181a4:	785b      	ldrb	r3, [r3, #1]
 80181a6:	b25b      	sxtb	r3, r3
 80181a8:	001a      	movs	r2, r3
 80181aa:	4b5c      	ldr	r3, [pc, #368]	; (801831c <RegionEU868GetPhyParam+0x214>)
 80181ac:	5c9b      	ldrb	r3, [r3, r2]
 80181ae:	001a      	movs	r2, r3
 80181b0:	2308      	movs	r3, #8
 80181b2:	18fb      	adds	r3, r7, r3
 80181b4:	601a      	str	r2, [r3, #0]
            break;
 80181b6:	e09f      	b.n	80182f8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 80181b8:	2308      	movs	r3, #8
 80181ba:	18fb      	adds	r3, r7, r3
 80181bc:	2201      	movs	r2, #1
 80181be:	601a      	str	r2, [r3, #0]
            break;
 80181c0:	e09a      	b.n	80182f8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 80181c2:	2308      	movs	r3, #8
 80181c4:	18fb      	adds	r3, r7, r3
 80181c6:	4a56      	ldr	r2, [pc, #344]	; (8018320 <RegionEU868GetPhyParam+0x218>)
 80181c8:	601a      	str	r2, [r3, #0]
            break;
 80181ca:	e095      	b.n	80182f8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = EU868_RECEIVE_DELAY1;
 80181cc:	2308      	movs	r3, #8
 80181ce:	18fb      	adds	r3, r7, r3
 80181d0:	22fa      	movs	r2, #250	; 0xfa
 80181d2:	0092      	lsls	r2, r2, #2
 80181d4:	601a      	str	r2, [r3, #0]
            break;
 80181d6:	e08f      	b.n	80182f8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = EU868_RECEIVE_DELAY2;
 80181d8:	2308      	movs	r3, #8
 80181da:	18fb      	adds	r3, r7, r3
 80181dc:	22fa      	movs	r2, #250	; 0xfa
 80181de:	00d2      	lsls	r2, r2, #3
 80181e0:	601a      	str	r2, [r3, #0]
            break;
 80181e2:	e089      	b.n	80182f8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = EU868_JOIN_ACCEPT_DELAY1;
 80181e4:	2308      	movs	r3, #8
 80181e6:	18fb      	adds	r3, r7, r3
 80181e8:	4a4e      	ldr	r2, [pc, #312]	; (8018324 <RegionEU868GetPhyParam+0x21c>)
 80181ea:	601a      	str	r2, [r3, #0]
            break;
 80181ec:	e084      	b.n	80182f8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = EU868_JOIN_ACCEPT_DELAY2;
 80181ee:	2308      	movs	r3, #8
 80181f0:	18fb      	adds	r3, r7, r3
 80181f2:	4a4d      	ldr	r2, [pc, #308]	; (8018328 <RegionEU868GetPhyParam+0x220>)
 80181f4:	601a      	str	r2, [r3, #0]
            break;
 80181f6:	e07f      	b.n	80182f8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = EU868_MAX_FCNT_GAP;
 80181f8:	2308      	movs	r3, #8
 80181fa:	18fb      	adds	r3, r7, r3
 80181fc:	2280      	movs	r2, #128	; 0x80
 80181fe:	01d2      	lsls	r2, r2, #7
 8018200:	601a      	str	r2, [r3, #0]
            break;
 8018202:	e079      	b.n	80182f8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( EU868_ACKTIMEOUT + randr( -EU868_ACK_TIMEOUT_RND, EU868_ACK_TIMEOUT_RND ) );
 8018204:	23fa      	movs	r3, #250	; 0xfa
 8018206:	009b      	lsls	r3, r3, #2
 8018208:	4a48      	ldr	r2, [pc, #288]	; (801832c <RegionEU868GetPhyParam+0x224>)
 801820a:	0019      	movs	r1, r3
 801820c:	0010      	movs	r0, r2
 801820e:	f001 f983 	bl	8019518 <randr>
 8018212:	0003      	movs	r3, r0
 8018214:	22fa      	movs	r2, #250	; 0xfa
 8018216:	00d2      	lsls	r2, r2, #3
 8018218:	4694      	mov	ip, r2
 801821a:	4463      	add	r3, ip
 801821c:	001a      	movs	r2, r3
 801821e:	2308      	movs	r3, #8
 8018220:	18fb      	adds	r3, r7, r3
 8018222:	601a      	str	r2, [r3, #0]
            break;
 8018224:	e068      	b.n	80182f8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = EU868_DEFAULT_RX1_DR_OFFSET;
 8018226:	2308      	movs	r3, #8
 8018228:	18fb      	adds	r3, r7, r3
 801822a:	2200      	movs	r2, #0
 801822c:	601a      	str	r2, [r3, #0]
            break;
 801822e:	e063      	b.n	80182f8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8018230:	2308      	movs	r3, #8
 8018232:	18fb      	adds	r3, r7, r3
 8018234:	4a3e      	ldr	r2, [pc, #248]	; (8018330 <RegionEU868GetPhyParam+0x228>)
 8018236:	601a      	str	r2, [r3, #0]
            break;
 8018238:	e05e      	b.n	80182f8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 801823a:	2308      	movs	r3, #8
 801823c:	18fb      	adds	r3, r7, r3
 801823e:	2200      	movs	r2, #0
 8018240:	601a      	str	r2, [r3, #0]
            break;
 8018242:	e059      	b.n	80182f8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsMask;
 8018244:	2308      	movs	r3, #8
 8018246:	18fb      	adds	r3, r7, r3
 8018248:	4a3a      	ldr	r2, [pc, #232]	; (8018334 <RegionEU868GetPhyParam+0x22c>)
 801824a:	601a      	str	r2, [r3, #0]
            break;
 801824c:	e054      	b.n	80182f8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsDefaultMask;
 801824e:	2308      	movs	r3, #8
 8018250:	18fb      	adds	r3, r7, r3
 8018252:	4a39      	ldr	r2, [pc, #228]	; (8018338 <RegionEU868GetPhyParam+0x230>)
 8018254:	601a      	str	r2, [r3, #0]
            break;
 8018256:	e04f      	b.n	80182f8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8018258:	2308      	movs	r3, #8
 801825a:	18fb      	adds	r3, r7, r3
 801825c:	2210      	movs	r2, #16
 801825e:	601a      	str	r2, [r3, #0]
            break;
 8018260:	e04a      	b.n	80182f8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = NvmCtx.Channels;
 8018262:	2308      	movs	r3, #8
 8018264:	18fb      	adds	r3, r7, r3
 8018266:	4a35      	ldr	r2, [pc, #212]	; (801833c <RegionEU868GetPhyParam+0x234>)
 8018268:	601a      	str	r2, [r3, #0]
            break;
 801826a:	e045      	b.n	80182f8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = 0;
 801826c:	2308      	movs	r3, #8
 801826e:	18fb      	adds	r3, r7, r3
 8018270:	2200      	movs	r2, #0
 8018272:	601a      	str	r2, [r3, #0]
            break;
 8018274:	e040      	b.n	80182f8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8018276:	2308      	movs	r3, #8
 8018278:	18fb      	adds	r3, r7, r3
 801827a:	2283      	movs	r2, #131	; 0x83
 801827c:	05d2      	lsls	r2, r2, #23
 801827e:	601a      	str	r2, [r3, #0]
            break;
 8018280:	e03a      	b.n	80182f8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8018282:	2308      	movs	r3, #8
 8018284:	18fb      	adds	r3, r7, r3
 8018286:	4a2e      	ldr	r2, [pc, #184]	; (8018340 <RegionEU868GetPhyParam+0x238>)
 8018288:	601a      	str	r2, [r3, #0]
            break;
 801828a:	e035      	b.n	80182f8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 801828c:	2308      	movs	r3, #8
 801828e:	18fb      	adds	r3, r7, r3
 8018290:	4a27      	ldr	r2, [pc, #156]	; (8018330 <RegionEU868GetPhyParam+0x228>)
 8018292:	601a      	str	r2, [r3, #0]
            break;
 8018294:	e030      	b.n	80182f8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8018296:	2108      	movs	r1, #8
 8018298:	187b      	adds	r3, r7, r1
 801829a:	2211      	movs	r2, #17
 801829c:	701a      	strb	r2, [r3, #0]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 801829e:	187b      	adds	r3, r7, r1
 80182a0:	2202      	movs	r2, #2
 80182a2:	705a      	strb	r2, [r3, #1]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 80182a4:	187b      	adds	r3, r7, r1
 80182a6:	2200      	movs	r2, #0
 80182a8:	709a      	strb	r2, [r3, #2]
            break;
 80182aa:	e025      	b.n	80182f8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 80182ac:	2308      	movs	r3, #8
 80182ae:	18fb      	adds	r3, r7, r3
 80182b0:	2203      	movs	r2, #3
 80182b2:	601a      	str	r2, [r3, #0]
            break;
 80182b4:	e020      	b.n	80182f8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 80182b6:	2308      	movs	r3, #8
 80182b8:	18fb      	adds	r3, r7, r3
 80182ba:	4a1d      	ldr	r2, [pc, #116]	; (8018330 <RegionEU868GetPhyParam+0x228>)
 80182bc:	601a      	str	r2, [r3, #0]
            break;
 80182be:	e01b      	b.n	80182f8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 80182c0:	2308      	movs	r3, #8
 80182c2:	18fb      	adds	r3, r7, r3
 80182c4:	2203      	movs	r2, #3
 80182c6:	601a      	str	r2, [r3, #0]
            break;
 80182c8:	e016      	b.n	80182f8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 80182ca:	687b      	ldr	r3, [r7, #4]
 80182cc:	785b      	ldrb	r3, [r3, #1]
 80182ce:	b25b      	sxtb	r3, r3
 80182d0:	001a      	movs	r2, r3
 80182d2:	4b1c      	ldr	r3, [pc, #112]	; (8018344 <RegionEU868GetPhyParam+0x23c>)
 80182d4:	5c9b      	ldrb	r3, [r3, r2]
 80182d6:	001a      	movs	r2, r3
 80182d8:	2308      	movs	r3, #8
 80182da:	18fb      	adds	r3, r7, r3
 80182dc:	601a      	str	r2, [r3, #0]
            break;
 80182de:	e00b      	b.n	80182f8 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = GetBandwidth( getPhy->Datarate );
 80182e0:	687b      	ldr	r3, [r7, #4]
 80182e2:	785b      	ldrb	r3, [r3, #1]
 80182e4:	b25b      	sxtb	r3, r3
 80182e6:	0018      	movs	r0, r3
 80182e8:	f7ff fdf2 	bl	8017ed0 <GetBandwidth>
 80182ec:	0002      	movs	r2, r0
 80182ee:	2308      	movs	r3, #8
 80182f0:	18fb      	adds	r3, r7, r3
 80182f2:	601a      	str	r2, [r3, #0]
            break;
 80182f4:	e000      	b.n	80182f8 <RegionEU868GetPhyParam+0x1f0>
        }
        default:
        {
            break;
 80182f6:	46c0      	nop			; (mov r8, r8)
        }
    }

    return phyParam;
 80182f8:	210c      	movs	r1, #12
 80182fa:	187b      	adds	r3, r7, r1
 80182fc:	2208      	movs	r2, #8
 80182fe:	18ba      	adds	r2, r7, r2
 8018300:	6812      	ldr	r2, [r2, #0]
 8018302:	601a      	str	r2, [r3, #0]
 8018304:	187b      	adds	r3, r7, r1
 8018306:	2200      	movs	r2, #0
 8018308:	681a      	ldr	r2, [r3, #0]
 801830a:	0013      	movs	r3, r2
}
 801830c:	0018      	movs	r0, r3
 801830e:	46bd      	mov	sp, r7
 8018310:	b004      	add	sp, #16
 8018312:	bd80      	pop	{r7, pc}
 8018314:	0801fa18 	.word	0x0801fa18
 8018318:	0801fa08 	.word	0x0801fa08
 801831c:	0801fa10 	.word	0x0801fa10
 8018320:	00000bb8 	.word	0x00000bb8
 8018324:	00001388 	.word	0x00001388
 8018328:	00001770 	.word	0x00001770
 801832c:	fffffc18 	.word	0xfffffc18
 8018330:	33d3e608 	.word	0x33d3e608
 8018334:	20000e78 	.word	0x20000e78
 8018338:	20000e7a 	.word	0x20000e7a
 801833c:	20000d40 	.word	0x20000d40
 8018340:	4009999a 	.word	0x4009999a
 8018344:	0801f9e0 	.word	0x0801f9e0

08018348 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8018348:	b5b0      	push	{r4, r5, r7, lr}
 801834a:	b084      	sub	sp, #16
 801834c:	af02      	add	r7, sp, #8
 801834e:	6078      	str	r0, [r7, #4]
    RegionCommonSetBandTxDone( &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band],
 8018350:	687b      	ldr	r3, [r7, #4]
 8018352:	781b      	ldrb	r3, [r3, #0]
 8018354:	0019      	movs	r1, r3
 8018356:	4a11      	ldr	r2, [pc, #68]	; (801839c <RegionEU868SetBandTxDone+0x54>)
 8018358:	000b      	movs	r3, r1
 801835a:	005b      	lsls	r3, r3, #1
 801835c:	185b      	adds	r3, r3, r1
 801835e:	009b      	lsls	r3, r3, #2
 8018360:	18d3      	adds	r3, r2, r3
 8018362:	3309      	adds	r3, #9
 8018364:	781b      	ldrb	r3, [r3, #0]
 8018366:	001a      	movs	r2, r3
 8018368:	0013      	movs	r3, r2
 801836a:	009b      	lsls	r3, r3, #2
 801836c:	189b      	adds	r3, r3, r2
 801836e:	009b      	lsls	r3, r3, #2
 8018370:	33c0      	adds	r3, #192	; 0xc0
 8018372:	001a      	movs	r2, r3
 8018374:	4b09      	ldr	r3, [pc, #36]	; (801839c <RegionEU868SetBandTxDone+0x54>)
 8018376:	18d0      	adds	r0, r2, r3
 8018378:	687b      	ldr	r3, [r7, #4]
 801837a:	689c      	ldr	r4, [r3, #8]
 801837c:	687b      	ldr	r3, [r7, #4]
 801837e:	785d      	ldrb	r5, [r3, #1]
 8018380:	687b      	ldr	r3, [r7, #4]
 8018382:	466a      	mov	r2, sp
 8018384:	6919      	ldr	r1, [r3, #16]
 8018386:	6011      	str	r1, [r2, #0]
 8018388:	68db      	ldr	r3, [r3, #12]
 801838a:	002a      	movs	r2, r5
 801838c:	0021      	movs	r1, r4
 801838e:	f7ff f91e 	bl	80175ce <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
}
 8018392:	46c0      	nop			; (mov r8, r8)
 8018394:	46bd      	mov	sp, r7
 8018396:	b002      	add	sp, #8
 8018398:	bdb0      	pop	{r4, r5, r7, pc}
 801839a:	46c0      	nop			; (mov r8, r8)
 801839c:	20000d40 	.word	0x20000d40

080183a0 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 80183a0:	b590      	push	{r4, r7, lr}
 80183a2:	b0ab      	sub	sp, #172	; 0xac
 80183a4:	af00      	add	r7, sp, #0
 80183a6:	6078      	str	r0, [r7, #4]
    Band_t bands[EU868_MAX_NB_BANDS] =
 80183a8:	2430      	movs	r4, #48	; 0x30
 80183aa:	193b      	adds	r3, r7, r4
 80183ac:	0018      	movs	r0, r3
 80183ae:	2378      	movs	r3, #120	; 0x78
 80183b0:	001a      	movs	r2, r3
 80183b2:	2100      	movs	r1, #0
 80183b4:	f005 fe23 	bl	801dffe <memset>
 80183b8:	0021      	movs	r1, r4
 80183ba:	187b      	adds	r3, r7, r1
 80183bc:	2264      	movs	r2, #100	; 0x64
 80183be:	801a      	strh	r2, [r3, #0]
 80183c0:	187b      	adds	r3, r7, r1
 80183c2:	2264      	movs	r2, #100	; 0x64
 80183c4:	829a      	strh	r2, [r3, #20]
 80183c6:	187b      	adds	r3, r7, r1
 80183c8:	22fa      	movs	r2, #250	; 0xfa
 80183ca:	0092      	lsls	r2, r2, #2
 80183cc:	851a      	strh	r2, [r3, #40]	; 0x28
 80183ce:	187b      	adds	r3, r7, r1
 80183d0:	220a      	movs	r2, #10
 80183d2:	879a      	strh	r2, [r3, #60]	; 0x3c
 80183d4:	0008      	movs	r0, r1
 80183d6:	187b      	adds	r3, r7, r1
 80183d8:	2250      	movs	r2, #80	; 0x50
 80183da:	2164      	movs	r1, #100	; 0x64
 80183dc:	5299      	strh	r1, [r3, r2]
 80183de:	183b      	adds	r3, r7, r0
 80183e0:	2264      	movs	r2, #100	; 0x64
 80183e2:	21fa      	movs	r1, #250	; 0xfa
 80183e4:	0089      	lsls	r1, r1, #2
 80183e6:	5299      	strh	r1, [r3, r2]
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 80183e8:	687b      	ldr	r3, [r7, #4]
 80183ea:	791b      	ldrb	r3, [r3, #4]
 80183ec:	2b03      	cmp	r3, #3
 80183ee:	d048      	beq.n	8018482 <RegionEU868InitDefaults+0xe2>
 80183f0:	dc54      	bgt.n	801849c <RegionEU868InitDefaults+0xfc>
 80183f2:	2b02      	cmp	r3, #2
 80183f4:	d036      	beq.n	8018464 <RegionEU868InitDefaults+0xc4>
 80183f6:	dc51      	bgt.n	801849c <RegionEU868InitDefaults+0xfc>
 80183f8:	2b00      	cmp	r3, #0
 80183fa:	d002      	beq.n	8018402 <RegionEU868InitDefaults+0x62>
 80183fc:	2b01      	cmp	r3, #1
 80183fe:	d021      	beq.n	8018444 <RegionEU868InitDefaults+0xa4>
            }
            break;
        }
        default:
        {
            break;
 8018400:	e04c      	b.n	801849c <RegionEU868InitDefaults+0xfc>
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 8018402:	2330      	movs	r3, #48	; 0x30
 8018404:	18f9      	adds	r1, r7, r3
 8018406:	4b29      	ldr	r3, [pc, #164]	; (80184ac <RegionEU868InitDefaults+0x10c>)
 8018408:	2278      	movs	r2, #120	; 0x78
 801840a:	0018      	movs	r0, r3
 801840c:	f001 f89a 	bl	8019544 <memcpy1>
            NvmCtx.Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8018410:	4b27      	ldr	r3, [pc, #156]	; (80184b0 <RegionEU868InitDefaults+0x110>)
 8018412:	4a28      	ldr	r2, [pc, #160]	; (80184b4 <RegionEU868InitDefaults+0x114>)
 8018414:	ca13      	ldmia	r2!, {r0, r1, r4}
 8018416:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8018418:	4b25      	ldr	r3, [pc, #148]	; (80184b0 <RegionEU868InitDefaults+0x110>)
 801841a:	4a27      	ldr	r2, [pc, #156]	; (80184b8 <RegionEU868InitDefaults+0x118>)
 801841c:	330c      	adds	r3, #12
 801841e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8018420:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8018422:	4b23      	ldr	r3, [pc, #140]	; (80184b0 <RegionEU868InitDefaults+0x110>)
 8018424:	4a25      	ldr	r2, [pc, #148]	; (80184bc <RegionEU868InitDefaults+0x11c>)
 8018426:	3318      	adds	r3, #24
 8018428:	ca13      	ldmia	r2!, {r0, r1, r4}
 801842a:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 801842c:	4a20      	ldr	r2, [pc, #128]	; (80184b0 <RegionEU868InitDefaults+0x110>)
 801842e:	239d      	movs	r3, #157	; 0x9d
 8018430:	005b      	lsls	r3, r3, #1
 8018432:	2107      	movs	r1, #7
 8018434:	52d1      	strh	r1, [r2, r3]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8018436:	4922      	ldr	r1, [pc, #136]	; (80184c0 <RegionEU868InitDefaults+0x120>)
 8018438:	4b22      	ldr	r3, [pc, #136]	; (80184c4 <RegionEU868InitDefaults+0x124>)
 801843a:	2201      	movs	r2, #1
 801843c:	0018      	movs	r0, r3
 801843e:	f7ff f897 	bl	8017570 <RegionCommonChanMaskCopy>
            break;
 8018442:	e02e      	b.n	80184a2 <RegionEU868InitDefaults+0x102>
            NvmCtx.Channels[0].Rx1Frequency = 0;
 8018444:	4b1a      	ldr	r3, [pc, #104]	; (80184b0 <RegionEU868InitDefaults+0x110>)
 8018446:	2200      	movs	r2, #0
 8018448:	605a      	str	r2, [r3, #4]
            NvmCtx.Channels[1].Rx1Frequency = 0;
 801844a:	4b19      	ldr	r3, [pc, #100]	; (80184b0 <RegionEU868InitDefaults+0x110>)
 801844c:	2200      	movs	r2, #0
 801844e:	611a      	str	r2, [r3, #16]
            NvmCtx.Channels[2].Rx1Frequency = 0;
 8018450:	4b17      	ldr	r3, [pc, #92]	; (80184b0 <RegionEU868InitDefaults+0x110>)
 8018452:	2200      	movs	r2, #0
 8018454:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8018456:	491a      	ldr	r1, [pc, #104]	; (80184c0 <RegionEU868InitDefaults+0x120>)
 8018458:	4b1a      	ldr	r3, [pc, #104]	; (80184c4 <RegionEU868InitDefaults+0x124>)
 801845a:	2201      	movs	r2, #1
 801845c:	0018      	movs	r0, r3
 801845e:	f7ff f887 	bl	8017570 <RegionCommonChanMaskCopy>
            break;
 8018462:	e01e      	b.n	80184a2 <RegionEU868InitDefaults+0x102>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
 8018464:	4a12      	ldr	r2, [pc, #72]	; (80184b0 <RegionEU868InitDefaults+0x110>)
 8018466:	239c      	movs	r3, #156	; 0x9c
 8018468:	005b      	lsls	r3, r3, #1
 801846a:	5ad2      	ldrh	r2, [r2, r3]
 801846c:	4910      	ldr	r1, [pc, #64]	; (80184b0 <RegionEU868InitDefaults+0x110>)
 801846e:	239d      	movs	r3, #157	; 0x9d
 8018470:	005b      	lsls	r3, r3, #1
 8018472:	5acb      	ldrh	r3, [r1, r3]
 8018474:	4313      	orrs	r3, r2
 8018476:	b299      	uxth	r1, r3
 8018478:	4a0d      	ldr	r2, [pc, #52]	; (80184b0 <RegionEU868InitDefaults+0x110>)
 801847a:	239c      	movs	r3, #156	; 0x9c
 801847c:	005b      	lsls	r3, r3, #1
 801847e:	52d1      	strh	r1, [r2, r3]
            break;
 8018480:	e00f      	b.n	80184a2 <RegionEU868InitDefaults+0x102>
            if( params->NvmCtx != 0 )
 8018482:	687b      	ldr	r3, [r7, #4]
 8018484:	681b      	ldr	r3, [r3, #0]
 8018486:	2b00      	cmp	r3, #0
 8018488:	d00a      	beq.n	80184a0 <RegionEU868InitDefaults+0x100>
                memcpy1( (uint8_t*) &NvmCtx, (uint8_t*) params->NvmCtx, sizeof( NvmCtx ) );
 801848a:	687b      	ldr	r3, [r7, #4]
 801848c:	6819      	ldr	r1, [r3, #0]
 801848e:	239e      	movs	r3, #158	; 0x9e
 8018490:	005a      	lsls	r2, r3, #1
 8018492:	4b07      	ldr	r3, [pc, #28]	; (80184b0 <RegionEU868InitDefaults+0x110>)
 8018494:	0018      	movs	r0, r3
 8018496:	f001 f855 	bl	8019544 <memcpy1>
            break;
 801849a:	e001      	b.n	80184a0 <RegionEU868InitDefaults+0x100>
            break;
 801849c:	46c0      	nop			; (mov r8, r8)
 801849e:	e000      	b.n	80184a2 <RegionEU868InitDefaults+0x102>
            break;
 80184a0:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 80184a2:	46c0      	nop			; (mov r8, r8)
 80184a4:	46bd      	mov	sp, r7
 80184a6:	b02b      	add	sp, #172	; 0xac
 80184a8:	bd90      	pop	{r4, r7, pc}
 80184aa:	46c0      	nop			; (mov r8, r8)
 80184ac:	20000e00 	.word	0x20000e00
 80184b0:	20000d40 	.word	0x20000d40
 80184b4:	0801fb00 	.word	0x0801fb00
 80184b8:	0801fb0c 	.word	0x0801fb0c
 80184bc:	0801fb18 	.word	0x0801fb18
 80184c0:	20000e7a 	.word	0x20000e7a
 80184c4:	20000e78 	.word	0x20000e78

080184c8 <RegionEU868GetNvmCtx>:

void* RegionEU868GetNvmCtx( GetNvmCtxParams_t* params )
{
 80184c8:	b580      	push	{r7, lr}
 80184ca:	b082      	sub	sp, #8
 80184cc:	af00      	add	r7, sp, #0
 80184ce:	6078      	str	r0, [r7, #4]
    params->nvmCtxSize = sizeof( RegionEU868NvmCtx_t );
 80184d0:	687b      	ldr	r3, [r7, #4]
 80184d2:	229e      	movs	r2, #158	; 0x9e
 80184d4:	0052      	lsls	r2, r2, #1
 80184d6:	601a      	str	r2, [r3, #0]
    return &NvmCtx;
 80184d8:	4b02      	ldr	r3, [pc, #8]	; (80184e4 <RegionEU868GetNvmCtx+0x1c>)
}
 80184da:	0018      	movs	r0, r3
 80184dc:	46bd      	mov	sp, r7
 80184de:	b002      	add	sp, #8
 80184e0:	bd80      	pop	{r7, pc}
 80184e2:	46c0      	nop			; (mov r8, r8)
 80184e4:	20000d40 	.word	0x20000d40

080184e8 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80184e8:	b580      	push	{r7, lr}
 80184ea:	b084      	sub	sp, #16
 80184ec:	af00      	add	r7, sp, #0
 80184ee:	6078      	str	r0, [r7, #4]
 80184f0:	000a      	movs	r2, r1
 80184f2:	1cfb      	adds	r3, r7, #3
 80184f4:	701a      	strb	r2, [r3, #0]
    switch( phyAttribute )
 80184f6:	1cfb      	adds	r3, r7, #3
 80184f8:	781b      	ldrb	r3, [r3, #0]
 80184fa:	2b0f      	cmp	r3, #15
 80184fc:	d847      	bhi.n	801858e <RegionEU868Verify+0xa6>
 80184fe:	009a      	lsls	r2, r3, #2
 8018500:	4b25      	ldr	r3, [pc, #148]	; (8018598 <RegionEU868Verify+0xb0>)
 8018502:	18d3      	adds	r3, r2, r3
 8018504:	681b      	ldr	r3, [r3, #0]
 8018506:	469f      	mov	pc, r3
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8018508:	210f      	movs	r1, #15
 801850a:	187b      	adds	r3, r7, r1
 801850c:	2200      	movs	r2, #0
 801850e:	701a      	strb	r2, [r3, #0]
            return VerifyRfFreq( verify->Frequency, &band );
 8018510:	687b      	ldr	r3, [r7, #4]
 8018512:	681b      	ldr	r3, [r3, #0]
 8018514:	187a      	adds	r2, r7, r1
 8018516:	0011      	movs	r1, r2
 8018518:	0018      	movs	r0, r3
 801851a:	f7ff fd1f 	bl	8017f5c <VerifyRfFreq>
 801851e:	0003      	movs	r3, r0
 8018520:	e036      	b.n	8018590 <RegionEU868Verify+0xa8>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8018522:	687b      	ldr	r3, [r7, #4]
 8018524:	781b      	ldrb	r3, [r3, #0]
 8018526:	b25b      	sxtb	r3, r3
 8018528:	2207      	movs	r2, #7
 801852a:	2100      	movs	r1, #0
 801852c:	0018      	movs	r0, r3
 801852e:	f7fe ff76 	bl	801741e <RegionCommonValueInRange>
 8018532:	0003      	movs	r3, r0
 8018534:	1e5a      	subs	r2, r3, #1
 8018536:	4193      	sbcs	r3, r2
 8018538:	b2db      	uxtb	r3, r3
 801853a:	e029      	b.n	8018590 <RegionEU868Verify+0xa8>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 801853c:	687b      	ldr	r3, [r7, #4]
 801853e:	781b      	ldrb	r3, [r3, #0]
 8018540:	b25b      	sxtb	r3, r3
 8018542:	2205      	movs	r2, #5
 8018544:	2100      	movs	r1, #0
 8018546:	0018      	movs	r0, r3
 8018548:	f7fe ff69 	bl	801741e <RegionCommonValueInRange>
 801854c:	0003      	movs	r3, r0
 801854e:	1e5a      	subs	r2, r3, #1
 8018550:	4193      	sbcs	r3, r2
 8018552:	b2db      	uxtb	r3, r3
 8018554:	e01c      	b.n	8018590 <RegionEU868Verify+0xa8>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8018556:	687b      	ldr	r3, [r7, #4]
 8018558:	781b      	ldrb	r3, [r3, #0]
 801855a:	b25b      	sxtb	r3, r3
 801855c:	2207      	movs	r2, #7
 801855e:	2100      	movs	r1, #0
 8018560:	0018      	movs	r0, r3
 8018562:	f7fe ff5c 	bl	801741e <RegionCommonValueInRange>
 8018566:	0003      	movs	r3, r0
 8018568:	1e5a      	subs	r2, r3, #1
 801856a:	4193      	sbcs	r3, r2
 801856c:	b2db      	uxtb	r3, r3
 801856e:	e00f      	b.n	8018590 <RegionEU868Verify+0xa8>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8018570:	687b      	ldr	r3, [r7, #4]
 8018572:	781b      	ldrb	r3, [r3, #0]
 8018574:	b25b      	sxtb	r3, r3
 8018576:	2207      	movs	r2, #7
 8018578:	2100      	movs	r1, #0
 801857a:	0018      	movs	r0, r3
 801857c:	f7fe ff4f 	bl	801741e <RegionCommonValueInRange>
 8018580:	0003      	movs	r3, r0
 8018582:	1e5a      	subs	r2, r3, #1
 8018584:	4193      	sbcs	r3, r2
 8018586:	b2db      	uxtb	r3, r3
 8018588:	e002      	b.n	8018590 <RegionEU868Verify+0xa8>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 801858a:	2301      	movs	r3, #1
 801858c:	e000      	b.n	8018590 <RegionEU868Verify+0xa8>
        }
        default:
            return false;
 801858e:	2300      	movs	r3, #0
    }
}
 8018590:	0018      	movs	r0, r3
 8018592:	46bd      	mov	sp, r7
 8018594:	b004      	add	sp, #16
 8018596:	bd80      	pop	{r7, pc}
 8018598:	0801fb24 	.word	0x0801fb24

0801859c <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 801859c:	b590      	push	{r4, r7, lr}
 801859e:	b08b      	sub	sp, #44	; 0x2c
 80185a0:	af00      	add	r7, sp, #0
 80185a2:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 80185a4:	2318      	movs	r3, #24
 80185a6:	18fb      	adds	r3, r7, r3
 80185a8:	2250      	movs	r2, #80	; 0x50
 80185aa:	721a      	strb	r2, [r3, #8]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 80185ac:	687b      	ldr	r3, [r7, #4]
 80185ae:	791b      	ldrb	r3, [r3, #4]
 80185b0:	2b10      	cmp	r3, #16
 80185b2:	d000      	beq.n	80185b6 <RegionEU868ApplyCFList+0x1a>
 80185b4:	e07c      	b.n	80186b0 <RegionEU868ApplyCFList+0x114>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 80185b6:	687b      	ldr	r3, [r7, #4]
 80185b8:	681b      	ldr	r3, [r3, #0]
 80185ba:	330f      	adds	r3, #15
 80185bc:	781b      	ldrb	r3, [r3, #0]
 80185be:	2b00      	cmp	r3, #0
 80185c0:	d000      	beq.n	80185c4 <RegionEU868ApplyCFList+0x28>
 80185c2:	e077      	b.n	80186b4 <RegionEU868ApplyCFList+0x118>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 80185c4:	2327      	movs	r3, #39	; 0x27
 80185c6:	18fb      	adds	r3, r7, r3
 80185c8:	2200      	movs	r2, #0
 80185ca:	701a      	strb	r2, [r3, #0]
 80185cc:	2326      	movs	r3, #38	; 0x26
 80185ce:	18fb      	adds	r3, r7, r3
 80185d0:	2203      	movs	r2, #3
 80185d2:	701a      	strb	r2, [r3, #0]
 80185d4:	e066      	b.n	80186a4 <RegionEU868ApplyCFList+0x108>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 80185d6:	2326      	movs	r3, #38	; 0x26
 80185d8:	18fb      	adds	r3, r7, r3
 80185da:	781b      	ldrb	r3, [r3, #0]
 80185dc:	2b07      	cmp	r3, #7
 80185de:	d82e      	bhi.n	801863e <RegionEU868ApplyCFList+0xa2>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 80185e0:	687b      	ldr	r3, [r7, #4]
 80185e2:	681a      	ldr	r2, [r3, #0]
 80185e4:	2427      	movs	r4, #39	; 0x27
 80185e6:	193b      	adds	r3, r7, r4
 80185e8:	781b      	ldrb	r3, [r3, #0]
 80185ea:	18d3      	adds	r3, r2, r3
 80185ec:	781b      	ldrb	r3, [r3, #0]
 80185ee:	001a      	movs	r2, r3
 80185f0:	2018      	movs	r0, #24
 80185f2:	183b      	adds	r3, r7, r0
 80185f4:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 80185f6:	183b      	adds	r3, r7, r0
 80185f8:	681a      	ldr	r2, [r3, #0]
 80185fa:	687b      	ldr	r3, [r7, #4]
 80185fc:	6819      	ldr	r1, [r3, #0]
 80185fe:	193b      	adds	r3, r7, r4
 8018600:	781b      	ldrb	r3, [r3, #0]
 8018602:	3301      	adds	r3, #1
 8018604:	18cb      	adds	r3, r1, r3
 8018606:	781b      	ldrb	r3, [r3, #0]
 8018608:	021b      	lsls	r3, r3, #8
 801860a:	431a      	orrs	r2, r3
 801860c:	183b      	adds	r3, r7, r0
 801860e:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8018610:	183b      	adds	r3, r7, r0
 8018612:	681a      	ldr	r2, [r3, #0]
 8018614:	687b      	ldr	r3, [r7, #4]
 8018616:	6819      	ldr	r1, [r3, #0]
 8018618:	193b      	adds	r3, r7, r4
 801861a:	781b      	ldrb	r3, [r3, #0]
 801861c:	3302      	adds	r3, #2
 801861e:	18cb      	adds	r3, r1, r3
 8018620:	781b      	ldrb	r3, [r3, #0]
 8018622:	041b      	lsls	r3, r3, #16
 8018624:	431a      	orrs	r2, r3
 8018626:	183b      	adds	r3, r7, r0
 8018628:	601a      	str	r2, [r3, #0]
            newChannel.Frequency *= 100;
 801862a:	183b      	adds	r3, r7, r0
 801862c:	681b      	ldr	r3, [r3, #0]
 801862e:	2264      	movs	r2, #100	; 0x64
 8018630:	435a      	muls	r2, r3
 8018632:	183b      	adds	r3, r7, r0
 8018634:	601a      	str	r2, [r3, #0]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8018636:	183b      	adds	r3, r7, r0
 8018638:	2200      	movs	r2, #0
 801863a:	605a      	str	r2, [r3, #4]
 801863c:	e009      	b.n	8018652 <RegionEU868ApplyCFList+0xb6>
        }
        else
        {
            newChannel.Frequency = 0;
 801863e:	2118      	movs	r1, #24
 8018640:	187b      	adds	r3, r7, r1
 8018642:	2200      	movs	r2, #0
 8018644:	601a      	str	r2, [r3, #0]
            newChannel.DrRange.Value = 0;
 8018646:	187b      	adds	r3, r7, r1
 8018648:	2200      	movs	r2, #0
 801864a:	721a      	strb	r2, [r3, #8]
            newChannel.Rx1Frequency = 0;
 801864c:	187b      	adds	r3, r7, r1
 801864e:	2200      	movs	r2, #0
 8018650:	605a      	str	r2, [r3, #4]
        }

        if( newChannel.Frequency != 0 )
 8018652:	2218      	movs	r2, #24
 8018654:	18bb      	adds	r3, r7, r2
 8018656:	681b      	ldr	r3, [r3, #0]
 8018658:	2b00      	cmp	r3, #0
 801865a:	d00d      	beq.n	8018678 <RegionEU868ApplyCFList+0xdc>
        {
            channelAdd.NewChannel = &newChannel;
 801865c:	2110      	movs	r1, #16
 801865e:	187b      	adds	r3, r7, r1
 8018660:	18ba      	adds	r2, r7, r2
 8018662:	601a      	str	r2, [r3, #0]
            channelAdd.ChannelId = chanIdx;
 8018664:	187b      	adds	r3, r7, r1
 8018666:	2226      	movs	r2, #38	; 0x26
 8018668:	18ba      	adds	r2, r7, r2
 801866a:	7812      	ldrb	r2, [r2, #0]
 801866c:	711a      	strb	r2, [r3, #4]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 801866e:	187b      	adds	r3, r7, r1
 8018670:	0018      	movs	r0, r3
 8018672:	f000 fdb5 	bl	80191e0 <RegionEU868ChannelAdd>
 8018676:	e009      	b.n	801868c <RegionEU868ApplyCFList+0xf0>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8018678:	210c      	movs	r1, #12
 801867a:	187b      	adds	r3, r7, r1
 801867c:	2226      	movs	r2, #38	; 0x26
 801867e:	18ba      	adds	r2, r7, r2
 8018680:	7812      	ldrb	r2, [r2, #0]
 8018682:	701a      	strb	r2, [r3, #0]

            RegionEU868ChannelsRemove( &channelRemove );
 8018684:	187b      	adds	r3, r7, r1
 8018686:	0018      	movs	r0, r3
 8018688:	f000 fe6e 	bl	8019368 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801868c:	2227      	movs	r2, #39	; 0x27
 801868e:	18bb      	adds	r3, r7, r2
 8018690:	18ba      	adds	r2, r7, r2
 8018692:	7812      	ldrb	r2, [r2, #0]
 8018694:	3203      	adds	r2, #3
 8018696:	701a      	strb	r2, [r3, #0]
 8018698:	2126      	movs	r1, #38	; 0x26
 801869a:	187b      	adds	r3, r7, r1
 801869c:	781a      	ldrb	r2, [r3, #0]
 801869e:	187b      	adds	r3, r7, r1
 80186a0:	3201      	adds	r2, #1
 80186a2:	701a      	strb	r2, [r3, #0]
 80186a4:	2326      	movs	r3, #38	; 0x26
 80186a6:	18fb      	adds	r3, r7, r3
 80186a8:	781b      	ldrb	r3, [r3, #0]
 80186aa:	2b0f      	cmp	r3, #15
 80186ac:	d993      	bls.n	80185d6 <RegionEU868ApplyCFList+0x3a>
 80186ae:	e002      	b.n	80186b6 <RegionEU868ApplyCFList+0x11a>
        return;
 80186b0:	46c0      	nop			; (mov r8, r8)
 80186b2:	e000      	b.n	80186b6 <RegionEU868ApplyCFList+0x11a>
        return;
 80186b4:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 80186b6:	46bd      	mov	sp, r7
 80186b8:	b00b      	add	sp, #44	; 0x2c
 80186ba:	bd90      	pop	{r4, r7, pc}

080186bc <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 80186bc:	b580      	push	{r7, lr}
 80186be:	b082      	sub	sp, #8
 80186c0:	af00      	add	r7, sp, #0
 80186c2:	6078      	str	r0, [r7, #4]
    switch( chanMaskSet->ChannelsMaskType )
 80186c4:	687b      	ldr	r3, [r7, #4]
 80186c6:	791b      	ldrb	r3, [r3, #4]
 80186c8:	2b00      	cmp	r3, #0
 80186ca:	d002      	beq.n	80186d2 <RegionEU868ChanMaskSet+0x16>
 80186cc:	2b01      	cmp	r3, #1
 80186ce:	d008      	beq.n	80186e2 <RegionEU868ChanMaskSet+0x26>
 80186d0:	e00f      	b.n	80186f2 <RegionEU868ChanMaskSet+0x36>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 80186d2:	687b      	ldr	r3, [r7, #4]
 80186d4:	6819      	ldr	r1, [r3, #0]
 80186d6:	4b0a      	ldr	r3, [pc, #40]	; (8018700 <RegionEU868ChanMaskSet+0x44>)
 80186d8:	2201      	movs	r2, #1
 80186da:	0018      	movs	r0, r3
 80186dc:	f7fe ff48 	bl	8017570 <RegionCommonChanMaskCopy>
            break;
 80186e0:	e009      	b.n	80186f6 <RegionEU868ChanMaskSet+0x3a>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( NvmCtx.ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 80186e2:	687b      	ldr	r3, [r7, #4]
 80186e4:	6819      	ldr	r1, [r3, #0]
 80186e6:	4b07      	ldr	r3, [pc, #28]	; (8018704 <RegionEU868ChanMaskSet+0x48>)
 80186e8:	2201      	movs	r2, #1
 80186ea:	0018      	movs	r0, r3
 80186ec:	f7fe ff40 	bl	8017570 <RegionCommonChanMaskCopy>
            break;
 80186f0:	e001      	b.n	80186f6 <RegionEU868ChanMaskSet+0x3a>
        }
        default:
            return false;
 80186f2:	2300      	movs	r3, #0
 80186f4:	e000      	b.n	80186f8 <RegionEU868ChanMaskSet+0x3c>
    }
    return true;
 80186f6:	2301      	movs	r3, #1
}
 80186f8:	0018      	movs	r0, r3
 80186fa:	46bd      	mov	sp, r7
 80186fc:	b002      	add	sp, #8
 80186fe:	bd80      	pop	{r7, pc}
 8018700:	20000e78 	.word	0x20000e78
 8018704:	20000e7a 	.word	0x20000e7a

08018708 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8018708:	b5b0      	push	{r4, r5, r7, lr}
 801870a:	b088      	sub	sp, #32
 801870c:	af02      	add	r7, sp, #8
 801870e:	60ba      	str	r2, [r7, #8]
 8018710:	607b      	str	r3, [r7, #4]
 8018712:	240f      	movs	r4, #15
 8018714:	193b      	adds	r3, r7, r4
 8018716:	1c02      	adds	r2, r0, #0
 8018718:	701a      	strb	r2, [r3, #0]
 801871a:	230e      	movs	r3, #14
 801871c:	18fb      	adds	r3, r7, r3
 801871e:	1c0a      	adds	r2, r1, #0
 8018720:	701a      	strb	r2, [r3, #0]
    /* ST_WORKAROUND_BEGIN: remove float/double */
    uint32_t tSymbol = 0;
 8018722:	2300      	movs	r3, #0
 8018724:	617b      	str	r3, [r7, #20]
    /* ST_WORKAROUND_END */

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8018726:	193b      	adds	r3, r7, r4
 8018728:	781b      	ldrb	r3, [r3, #0]
 801872a:	b25a      	sxtb	r2, r3
 801872c:	2a07      	cmp	r2, #7
 801872e:	dd00      	ble.n	8018732 <RegionEU868ComputeRxWindowParameters+0x2a>
 8018730:	2307      	movs	r3, #7
 8018732:	b25a      	sxtb	r2, r3
 8018734:	687b      	ldr	r3, [r7, #4]
 8018736:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 8018738:	687b      	ldr	r3, [r7, #4]
 801873a:	785b      	ldrb	r3, [r3, #1]
 801873c:	b25b      	sxtb	r3, r3
 801873e:	0018      	movs	r0, r3
 8018740:	f7ff fbc6 	bl	8017ed0 <GetBandwidth>
 8018744:	0003      	movs	r3, r0
 8018746:	b2da      	uxtb	r2, r3
 8018748:	687b      	ldr	r3, [r7, #4]
 801874a:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 801874c:	687b      	ldr	r3, [r7, #4]
 801874e:	785b      	ldrb	r3, [r3, #1]
 8018750:	b25b      	sxtb	r3, r3
 8018752:	2b07      	cmp	r3, #7
 8018754:	d10b      	bne.n	801876e <RegionEU868ComputeRxWindowParameters+0x66>
    { // FSK
        tSymbol = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 8018756:	687b      	ldr	r3, [r7, #4]
 8018758:	785b      	ldrb	r3, [r3, #1]
 801875a:	b25b      	sxtb	r3, r3
 801875c:	001a      	movs	r2, r3
 801875e:	4b18      	ldr	r3, [pc, #96]	; (80187c0 <RegionEU868ComputeRxWindowParameters+0xb8>)
 8018760:	5c9b      	ldrb	r3, [r3, r2]
 8018762:	0018      	movs	r0, r3
 8018764:	f7ff f944 	bl	80179f0 <RegionCommonComputeSymbolTimeFsk>
 8018768:	0003      	movs	r3, r0
 801876a:	617b      	str	r3, [r7, #20]
 801876c:	e011      	b.n	8018792 <RegionEU868ComputeRxWindowParameters+0x8a>
    }
    else
    { // LoRa
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 801876e:	687b      	ldr	r3, [r7, #4]
 8018770:	785b      	ldrb	r3, [r3, #1]
 8018772:	b25b      	sxtb	r3, r3
 8018774:	001a      	movs	r2, r3
 8018776:	4b12      	ldr	r3, [pc, #72]	; (80187c0 <RegionEU868ComputeRxWindowParameters+0xb8>)
 8018778:	5c98      	ldrb	r0, [r3, r2]
 801877a:	687b      	ldr	r3, [r7, #4]
 801877c:	785b      	ldrb	r3, [r3, #1]
 801877e:	b25b      	sxtb	r3, r3
 8018780:	001a      	movs	r2, r3
 8018782:	4b10      	ldr	r3, [pc, #64]	; (80187c4 <RegionEU868ComputeRxWindowParameters+0xbc>)
 8018784:	0092      	lsls	r2, r2, #2
 8018786:	58d3      	ldr	r3, [r2, r3]
 8018788:	0019      	movs	r1, r3
 801878a:	f7ff f919 	bl	80179c0 <RegionCommonComputeSymbolTimeLoRa>
 801878e:	0003      	movs	r3, r0
 8018790:	617b      	str	r3, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8018792:	4b0d      	ldr	r3, [pc, #52]	; (80187c8 <RegionEU868ComputeRxWindowParameters+0xc0>)
 8018794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018796:	4798      	blx	r3
 8018798:	0005      	movs	r5, r0
 801879a:	687b      	ldr	r3, [r7, #4]
 801879c:	3308      	adds	r3, #8
 801879e:	687a      	ldr	r2, [r7, #4]
 80187a0:	320c      	adds	r2, #12
 80187a2:	68bc      	ldr	r4, [r7, #8]
 80187a4:	210e      	movs	r1, #14
 80187a6:	1879      	adds	r1, r7, r1
 80187a8:	7809      	ldrb	r1, [r1, #0]
 80187aa:	6978      	ldr	r0, [r7, #20]
 80187ac:	9201      	str	r2, [sp, #4]
 80187ae:	9300      	str	r3, [sp, #0]
 80187b0:	002b      	movs	r3, r5
 80187b2:	0022      	movs	r2, r4
 80187b4:	f7ff f92a 	bl	8017a0c <RegionCommonComputeRxWindowParameters>
}
 80187b8:	46c0      	nop			; (mov r8, r8)
 80187ba:	46bd      	mov	sp, r7
 80187bc:	b006      	add	sp, #24
 80187be:	bdb0      	pop	{r4, r5, r7, pc}
 80187c0:	0801f9e0 	.word	0x0801f9e0
 80187c4:	0801f9e8 	.word	0x0801f9e8
 80187c8:	0801fb64 	.word	0x0801fb64

080187cc <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80187cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80187ce:	b091      	sub	sp, #68	; 0x44
 80187d0:	af0a      	add	r7, sp, #40	; 0x28
 80187d2:	6078      	str	r0, [r7, #4]
 80187d4:	6039      	str	r1, [r7, #0]
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 80187d6:	230f      	movs	r3, #15
 80187d8:	18fb      	adds	r3, r7, r3
 80187da:	687a      	ldr	r2, [r7, #4]
 80187dc:	7852      	ldrb	r2, [r2, #1]
 80187de:	701a      	strb	r2, [r3, #0]
    uint8_t maxPayload = 0;
 80187e0:	2316      	movs	r3, #22
 80187e2:	18fb      	adds	r3, r7, r3
 80187e4:	2200      	movs	r2, #0
 80187e6:	701a      	strb	r2, [r3, #0]
    int8_t phyDr = 0;
 80187e8:	230e      	movs	r3, #14
 80187ea:	18fb      	adds	r3, r7, r3
 80187ec:	2200      	movs	r2, #0
 80187ee:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = rxConfig->Frequency;
 80187f0:	687b      	ldr	r3, [r7, #4]
 80187f2:	685b      	ldr	r3, [r3, #4]
 80187f4:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 80187f6:	4b68      	ldr	r3, [pc, #416]	; (8018998 <RegionEU868RxConfig+0x1cc>)
 80187f8:	685b      	ldr	r3, [r3, #4]
 80187fa:	4798      	blx	r3
 80187fc:	1e03      	subs	r3, r0, #0
 80187fe:	d001      	beq.n	8018804 <RegionEU868RxConfig+0x38>
    {
        return false;
 8018800:	2300      	movs	r3, #0
 8018802:	e0c4      	b.n	801898e <RegionEU868RxConfig+0x1c2>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8018804:	687b      	ldr	r3, [r7, #4]
 8018806:	7cdb      	ldrb	r3, [r3, #19]
 8018808:	2b00      	cmp	r3, #0
 801880a:	d122      	bne.n	8018852 <RegionEU868RxConfig+0x86>
    {
        // Apply window 1 frequency
        frequency = NvmCtx.Channels[rxConfig->Channel].Frequency;
 801880c:	687b      	ldr	r3, [r7, #4]
 801880e:	781b      	ldrb	r3, [r3, #0]
 8018810:	0019      	movs	r1, r3
 8018812:	4a62      	ldr	r2, [pc, #392]	; (801899c <RegionEU868RxConfig+0x1d0>)
 8018814:	000b      	movs	r3, r1
 8018816:	005b      	lsls	r3, r3, #1
 8018818:	185b      	adds	r3, r3, r1
 801881a:	009b      	lsls	r3, r3, #2
 801881c:	589b      	ldr	r3, [r3, r2]
 801881e:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( NvmCtx.Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8018820:	687b      	ldr	r3, [r7, #4]
 8018822:	781b      	ldrb	r3, [r3, #0]
 8018824:	0019      	movs	r1, r3
 8018826:	4a5d      	ldr	r2, [pc, #372]	; (801899c <RegionEU868RxConfig+0x1d0>)
 8018828:	000b      	movs	r3, r1
 801882a:	005b      	lsls	r3, r3, #1
 801882c:	185b      	adds	r3, r3, r1
 801882e:	009b      	lsls	r3, r3, #2
 8018830:	18d3      	adds	r3, r2, r3
 8018832:	3304      	adds	r3, #4
 8018834:	681b      	ldr	r3, [r3, #0]
 8018836:	2b00      	cmp	r3, #0
 8018838:	d00b      	beq.n	8018852 <RegionEU868RxConfig+0x86>
        {
            frequency = NvmCtx.Channels[rxConfig->Channel].Rx1Frequency;
 801883a:	687b      	ldr	r3, [r7, #4]
 801883c:	781b      	ldrb	r3, [r3, #0]
 801883e:	0019      	movs	r1, r3
 8018840:	4a56      	ldr	r2, [pc, #344]	; (801899c <RegionEU868RxConfig+0x1d0>)
 8018842:	000b      	movs	r3, r1
 8018844:	005b      	lsls	r3, r3, #1
 8018846:	185b      	adds	r3, r3, r1
 8018848:	009b      	lsls	r3, r3, #2
 801884a:	18d3      	adds	r3, r2, r3
 801884c:	3304      	adds	r3, #4
 801884e:	681b      	ldr	r3, [r3, #0]
 8018850:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8018852:	240f      	movs	r4, #15
 8018854:	193b      	adds	r3, r7, r4
 8018856:	781b      	ldrb	r3, [r3, #0]
 8018858:	b25b      	sxtb	r3, r3
 801885a:	4a51      	ldr	r2, [pc, #324]	; (80189a0 <RegionEU868RxConfig+0x1d4>)
 801885c:	5cd2      	ldrb	r2, [r2, r3]
 801885e:	250e      	movs	r5, #14
 8018860:	197b      	adds	r3, r7, r5
 8018862:	701a      	strb	r2, [r3, #0]

    Radio.SetChannel( frequency );
 8018864:	4b4c      	ldr	r3, [pc, #304]	; (8018998 <RegionEU868RxConfig+0x1cc>)
 8018866:	68db      	ldr	r3, [r3, #12]
 8018868:	693a      	ldr	r2, [r7, #16]
 801886a:	0010      	movs	r0, r2
 801886c:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 801886e:	193b      	adds	r3, r7, r4
 8018870:	781b      	ldrb	r3, [r3, #0]
 8018872:	b25b      	sxtb	r3, r3
 8018874:	2b07      	cmp	r3, #7
 8018876:	d12e      	bne.n	80188d6 <RegionEU868RxConfig+0x10a>
    {
        modem = MODEM_FSK;
 8018878:	2117      	movs	r1, #23
 801887a:	187b      	adds	r3, r7, r1
 801887c:	2200      	movs	r2, #0
 801887e:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8018880:	4b45      	ldr	r3, [pc, #276]	; (8018998 <RegionEU868RxConfig+0x1cc>)
 8018882:	699c      	ldr	r4, [r3, #24]
 8018884:	197b      	adds	r3, r7, r5
 8018886:	2200      	movs	r2, #0
 8018888:	569a      	ldrsb	r2, [r3, r2]
 801888a:	0013      	movs	r3, r2
 801888c:	015b      	lsls	r3, r3, #5
 801888e:	1a9b      	subs	r3, r3, r2
 8018890:	009b      	lsls	r3, r3, #2
 8018892:	189b      	adds	r3, r3, r2
 8018894:	00db      	lsls	r3, r3, #3
 8018896:	001e      	movs	r6, r3
 8018898:	687b      	ldr	r3, [r7, #4]
 801889a:	689b      	ldr	r3, [r3, #8]
 801889c:	b29b      	uxth	r3, r3
 801889e:	687a      	ldr	r2, [r7, #4]
 80188a0:	7c92      	ldrb	r2, [r2, #18]
 80188a2:	4d40      	ldr	r5, [pc, #256]	; (80189a4 <RegionEU868RxConfig+0x1d8>)
 80188a4:	1879      	adds	r1, r7, r1
 80188a6:	7808      	ldrb	r0, [r1, #0]
 80188a8:	9209      	str	r2, [sp, #36]	; 0x24
 80188aa:	2200      	movs	r2, #0
 80188ac:	9208      	str	r2, [sp, #32]
 80188ae:	2200      	movs	r2, #0
 80188b0:	9207      	str	r2, [sp, #28]
 80188b2:	2200      	movs	r2, #0
 80188b4:	9206      	str	r2, [sp, #24]
 80188b6:	2201      	movs	r2, #1
 80188b8:	9205      	str	r2, [sp, #20]
 80188ba:	2200      	movs	r2, #0
 80188bc:	9204      	str	r2, [sp, #16]
 80188be:	2200      	movs	r2, #0
 80188c0:	9203      	str	r2, [sp, #12]
 80188c2:	9302      	str	r3, [sp, #8]
 80188c4:	2305      	movs	r3, #5
 80188c6:	9301      	str	r3, [sp, #4]
 80188c8:	4b37      	ldr	r3, [pc, #220]	; (80189a8 <RegionEU868RxConfig+0x1dc>)
 80188ca:	9300      	str	r3, [sp, #0]
 80188cc:	2300      	movs	r3, #0
 80188ce:	0032      	movs	r2, r6
 80188d0:	0029      	movs	r1, r5
 80188d2:	47a0      	blx	r4
 80188d4:	e029      	b.n	801892a <RegionEU868RxConfig+0x15e>
    }
    else
    {
        modem = MODEM_LORA;
 80188d6:	2117      	movs	r1, #23
 80188d8:	187b      	adds	r3, r7, r1
 80188da:	2201      	movs	r2, #1
 80188dc:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 80188de:	4b2e      	ldr	r3, [pc, #184]	; (8018998 <RegionEU868RxConfig+0x1cc>)
 80188e0:	699c      	ldr	r4, [r3, #24]
 80188e2:	687b      	ldr	r3, [r7, #4]
 80188e4:	789b      	ldrb	r3, [r3, #2]
 80188e6:	001e      	movs	r6, r3
 80188e8:	230e      	movs	r3, #14
 80188ea:	18fb      	adds	r3, r7, r3
 80188ec:	2500      	movs	r5, #0
 80188ee:	575d      	ldrsb	r5, [r3, r5]
 80188f0:	687b      	ldr	r3, [r7, #4]
 80188f2:	689b      	ldr	r3, [r3, #8]
 80188f4:	b29b      	uxth	r3, r3
 80188f6:	687a      	ldr	r2, [r7, #4]
 80188f8:	7c92      	ldrb	r2, [r2, #18]
 80188fa:	1879      	adds	r1, r7, r1
 80188fc:	7808      	ldrb	r0, [r1, #0]
 80188fe:	9209      	str	r2, [sp, #36]	; 0x24
 8018900:	2201      	movs	r2, #1
 8018902:	9208      	str	r2, [sp, #32]
 8018904:	2200      	movs	r2, #0
 8018906:	9207      	str	r2, [sp, #28]
 8018908:	2200      	movs	r2, #0
 801890a:	9206      	str	r2, [sp, #24]
 801890c:	2200      	movs	r2, #0
 801890e:	9205      	str	r2, [sp, #20]
 8018910:	2200      	movs	r2, #0
 8018912:	9204      	str	r2, [sp, #16]
 8018914:	2200      	movs	r2, #0
 8018916:	9203      	str	r2, [sp, #12]
 8018918:	9302      	str	r3, [sp, #8]
 801891a:	2308      	movs	r3, #8
 801891c:	9301      	str	r3, [sp, #4]
 801891e:	2300      	movs	r3, #0
 8018920:	9300      	str	r3, [sp, #0]
 8018922:	2301      	movs	r3, #1
 8018924:	002a      	movs	r2, r5
 8018926:	0031      	movs	r1, r6
 8018928:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 801892a:	687b      	ldr	r3, [r7, #4]
 801892c:	7c5b      	ldrb	r3, [r3, #17]
 801892e:	2b00      	cmp	r3, #0
 8018930:	d009      	beq.n	8018946 <RegionEU868RxConfig+0x17a>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 8018932:	230f      	movs	r3, #15
 8018934:	18fb      	adds	r3, r7, r3
 8018936:	2200      	movs	r2, #0
 8018938:	569a      	ldrsb	r2, [r3, r2]
 801893a:	2316      	movs	r3, #22
 801893c:	18fb      	adds	r3, r7, r3
 801893e:	491b      	ldr	r1, [pc, #108]	; (80189ac <RegionEU868RxConfig+0x1e0>)
 8018940:	5c8a      	ldrb	r2, [r1, r2]
 8018942:	701a      	strb	r2, [r3, #0]
 8018944:	e008      	b.n	8018958 <RegionEU868RxConfig+0x18c>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 8018946:	230f      	movs	r3, #15
 8018948:	18fb      	adds	r3, r7, r3
 801894a:	2200      	movs	r2, #0
 801894c:	569a      	ldrsb	r2, [r3, r2]
 801894e:	2316      	movs	r3, #22
 8018950:	18fb      	adds	r3, r7, r3
 8018952:	4917      	ldr	r1, [pc, #92]	; (80189b0 <RegionEU868RxConfig+0x1e4>)
 8018954:	5c8a      	ldrb	r2, [r1, r2]
 8018956:	701a      	strb	r2, [r3, #0]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8018958:	4b0f      	ldr	r3, [pc, #60]	; (8018998 <RegionEU868RxConfig+0x1cc>)
 801895a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801895c:	2216      	movs	r2, #22
 801895e:	18ba      	adds	r2, r7, r2
 8018960:	7812      	ldrb	r2, [r2, #0]
 8018962:	320d      	adds	r2, #13
 8018964:	b2d1      	uxtb	r1, r2
 8018966:	2217      	movs	r2, #23
 8018968:	18ba      	adds	r2, r7, r2
 801896a:	7812      	ldrb	r2, [r2, #0]
 801896c:	0010      	movs	r0, r2
 801896e:	4798      	blx	r3
    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8018970:	687b      	ldr	r3, [r7, #4]
 8018972:	7cd8      	ldrb	r0, [r3, #19]
 8018974:	240f      	movs	r4, #15
 8018976:	193b      	adds	r3, r7, r4
 8018978:	2200      	movs	r2, #0
 801897a:	569a      	ldrsb	r2, [r3, r2]
 801897c:	693b      	ldr	r3, [r7, #16]
 801897e:	0019      	movs	r1, r3
 8018980:	f7ff fa22 	bl	8017dc8 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 8018984:	683b      	ldr	r3, [r7, #0]
 8018986:	193a      	adds	r2, r7, r4
 8018988:	7812      	ldrb	r2, [r2, #0]
 801898a:	701a      	strb	r2, [r3, #0]
    return true;
 801898c:	2301      	movs	r3, #1
}
 801898e:	0018      	movs	r0, r3
 8018990:	46bd      	mov	sp, r7
 8018992:	b007      	add	sp, #28
 8018994:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018996:	46c0      	nop			; (mov r8, r8)
 8018998:	0801fb64 	.word	0x0801fb64
 801899c:	20000d40 	.word	0x20000d40
 80189a0:	0801f9e0 	.word	0x0801f9e0
 80189a4:	0000c350 	.word	0x0000c350
 80189a8:	00014585 	.word	0x00014585
 80189ac:	0801fa10 	.word	0x0801fa10
 80189b0:	0801fa08 	.word	0x0801fa08

080189b4 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80189b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80189b6:	b093      	sub	sp, #76	; 0x4c
 80189b8:	af0a      	add	r7, sp, #40	; 0x28
 80189ba:	60f8      	str	r0, [r7, #12]
 80189bc:	60b9      	str	r1, [r7, #8]
 80189be:	607a      	str	r2, [r7, #4]
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 80189c0:	68fb      	ldr	r3, [r7, #12]
 80189c2:	785b      	ldrb	r3, [r3, #1]
 80189c4:	b25b      	sxtb	r3, r3
 80189c6:	001a      	movs	r2, r3
 80189c8:	4b6b      	ldr	r3, [pc, #428]	; (8018b78 <RegionEU868TxConfig+0x1c4>)
 80189ca:	5c9a      	ldrb	r2, [r3, r2]
 80189cc:	251e      	movs	r5, #30
 80189ce:	197b      	adds	r3, r7, r5
 80189d0:	701a      	strb	r2, [r3, #0]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 80189d2:	68fb      	ldr	r3, [r7, #12]
 80189d4:	2002      	movs	r0, #2
 80189d6:	5618      	ldrsb	r0, [r3, r0]
 80189d8:	68fb      	ldr	r3, [r7, #12]
 80189da:	781b      	ldrb	r3, [r3, #0]
 80189dc:	0019      	movs	r1, r3
 80189de:	4a67      	ldr	r2, [pc, #412]	; (8018b7c <RegionEU868TxConfig+0x1c8>)
 80189e0:	000b      	movs	r3, r1
 80189e2:	005b      	lsls	r3, r3, #1
 80189e4:	185b      	adds	r3, r3, r1
 80189e6:	009b      	lsls	r3, r3, #2
 80189e8:	18d3      	adds	r3, r2, r3
 80189ea:	3309      	adds	r3, #9
 80189ec:	781b      	ldrb	r3, [r3, #0]
 80189ee:	001c      	movs	r4, r3
 80189f0:	4a62      	ldr	r2, [pc, #392]	; (8018b7c <RegionEU868TxConfig+0x1c8>)
 80189f2:	21c2      	movs	r1, #194	; 0xc2
 80189f4:	0023      	movs	r3, r4
 80189f6:	009b      	lsls	r3, r3, #2
 80189f8:	191b      	adds	r3, r3, r4
 80189fa:	009b      	lsls	r3, r3, #2
 80189fc:	18d3      	adds	r3, r2, r3
 80189fe:	185b      	adds	r3, r3, r1
 8018a00:	2100      	movs	r1, #0
 8018a02:	5659      	ldrsb	r1, [r3, r1]
 8018a04:	68fb      	ldr	r3, [r7, #12]
 8018a06:	2201      	movs	r2, #1
 8018a08:	569a      	ldrsb	r2, [r3, r2]
 8018a0a:	261d      	movs	r6, #29
 8018a0c:	19bc      	adds	r4, r7, r6
 8018a0e:	4b5c      	ldr	r3, [pc, #368]	; (8018b80 <RegionEU868TxConfig+0x1cc>)
 8018a10:	f7ff fa7c 	bl	8017f0c <LimitTxPower>
 8018a14:	0003      	movs	r3, r0
 8018a16:	7023      	strb	r3, [r4, #0]
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
 8018a18:	68fb      	ldr	r3, [r7, #12]
 8018a1a:	785b      	ldrb	r3, [r3, #1]
 8018a1c:	b25b      	sxtb	r3, r3
 8018a1e:	0018      	movs	r0, r3
 8018a20:	f7ff fa56 	bl	8017ed0 <GetBandwidth>
 8018a24:	0003      	movs	r3, r0
 8018a26:	61bb      	str	r3, [r7, #24]
    int8_t phyTxPower = 0;
 8018a28:	2017      	movs	r0, #23
 8018a2a:	183b      	adds	r3, r7, r0
 8018a2c:	2200      	movs	r2, #0
 8018a2e:	701a      	strb	r2, [r3, #0]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8018a30:	68fb      	ldr	r3, [r7, #12]
 8018a32:	6859      	ldr	r1, [r3, #4]
 8018a34:	68fb      	ldr	r3, [r7, #12]
 8018a36:	689a      	ldr	r2, [r3, #8]
 8018a38:	183c      	adds	r4, r7, r0
 8018a3a:	19bb      	adds	r3, r7, r6
 8018a3c:	781b      	ldrb	r3, [r3, #0]
 8018a3e:	b25b      	sxtb	r3, r3
 8018a40:	0018      	movs	r0, r3
 8018a42:	f7ff f831 	bl	8017aa8 <RegionCommonComputeTxPower>
 8018a46:	0003      	movs	r3, r0
 8018a48:	7023      	strb	r3, [r4, #0]

    // Setup the radio frequency
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 8018a4a:	4b4e      	ldr	r3, [pc, #312]	; (8018b84 <RegionEU868TxConfig+0x1d0>)
 8018a4c:	68da      	ldr	r2, [r3, #12]
 8018a4e:	68fb      	ldr	r3, [r7, #12]
 8018a50:	781b      	ldrb	r3, [r3, #0]
 8018a52:	0018      	movs	r0, r3
 8018a54:	4949      	ldr	r1, [pc, #292]	; (8018b7c <RegionEU868TxConfig+0x1c8>)
 8018a56:	0003      	movs	r3, r0
 8018a58:	005b      	lsls	r3, r3, #1
 8018a5a:	181b      	adds	r3, r3, r0
 8018a5c:	009b      	lsls	r3, r3, #2
 8018a5e:	585b      	ldr	r3, [r3, r1]
 8018a60:	0018      	movs	r0, r3
 8018a62:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8018a64:	68fb      	ldr	r3, [r7, #12]
 8018a66:	785b      	ldrb	r3, [r3, #1]
 8018a68:	b25b      	sxtb	r3, r3
 8018a6a:	2b07      	cmp	r3, #7
 8018a6c:	d12e      	bne.n	8018acc <RegionEU868TxConfig+0x118>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8018a6e:	231f      	movs	r3, #31
 8018a70:	18fb      	adds	r3, r7, r3
 8018a72:	2200      	movs	r2, #0
 8018a74:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8018a76:	4b43      	ldr	r3, [pc, #268]	; (8018b84 <RegionEU868TxConfig+0x1d0>)
 8018a78:	69dc      	ldr	r4, [r3, #28]
 8018a7a:	197b      	adds	r3, r7, r5
 8018a7c:	2200      	movs	r2, #0
 8018a7e:	569a      	ldrsb	r2, [r3, r2]
 8018a80:	0013      	movs	r3, r2
 8018a82:	015b      	lsls	r3, r3, #5
 8018a84:	1a9b      	subs	r3, r3, r2
 8018a86:	009b      	lsls	r3, r3, #2
 8018a88:	189b      	adds	r3, r3, r2
 8018a8a:	00db      	lsls	r3, r3, #3
 8018a8c:	001e      	movs	r6, r3
 8018a8e:	69ba      	ldr	r2, [r7, #24]
 8018a90:	4d3d      	ldr	r5, [pc, #244]	; (8018b88 <RegionEU868TxConfig+0x1d4>)
 8018a92:	2017      	movs	r0, #23
 8018a94:	183b      	adds	r3, r7, r0
 8018a96:	2100      	movs	r1, #0
 8018a98:	5659      	ldrsb	r1, [r3, r1]
 8018a9a:	231f      	movs	r3, #31
 8018a9c:	18fb      	adds	r3, r7, r3
 8018a9e:	7818      	ldrb	r0, [r3, #0]
 8018aa0:	23fa      	movs	r3, #250	; 0xfa
 8018aa2:	011b      	lsls	r3, r3, #4
 8018aa4:	9308      	str	r3, [sp, #32]
 8018aa6:	2300      	movs	r3, #0
 8018aa8:	9307      	str	r3, [sp, #28]
 8018aaa:	2300      	movs	r3, #0
 8018aac:	9306      	str	r3, [sp, #24]
 8018aae:	2300      	movs	r3, #0
 8018ab0:	9305      	str	r3, [sp, #20]
 8018ab2:	2301      	movs	r3, #1
 8018ab4:	9304      	str	r3, [sp, #16]
 8018ab6:	2300      	movs	r3, #0
 8018ab8:	9303      	str	r3, [sp, #12]
 8018aba:	2305      	movs	r3, #5
 8018abc:	9302      	str	r3, [sp, #8]
 8018abe:	2300      	movs	r3, #0
 8018ac0:	9301      	str	r3, [sp, #4]
 8018ac2:	9600      	str	r6, [sp, #0]
 8018ac4:	0013      	movs	r3, r2
 8018ac6:	002a      	movs	r2, r5
 8018ac8:	47a0      	blx	r4
 8018aca:	e025      	b.n	8018b18 <RegionEU868TxConfig+0x164>
    }
    else
    {
        modem = MODEM_LORA;
 8018acc:	201f      	movs	r0, #31
 8018ace:	183b      	adds	r3, r7, r0
 8018ad0:	2201      	movs	r2, #1
 8018ad2:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8018ad4:	4b2b      	ldr	r3, [pc, #172]	; (8018b84 <RegionEU868TxConfig+0x1d0>)
 8018ad6:	69dc      	ldr	r4, [r3, #28]
 8018ad8:	231e      	movs	r3, #30
 8018ada:	18fb      	adds	r3, r7, r3
 8018adc:	781b      	ldrb	r3, [r3, #0]
 8018ade:	b25b      	sxtb	r3, r3
 8018ae0:	69bd      	ldr	r5, [r7, #24]
 8018ae2:	2217      	movs	r2, #23
 8018ae4:	18ba      	adds	r2, r7, r2
 8018ae6:	2100      	movs	r1, #0
 8018ae8:	5651      	ldrsb	r1, [r2, r1]
 8018aea:	183a      	adds	r2, r7, r0
 8018aec:	7810      	ldrb	r0, [r2, #0]
 8018aee:	22fa      	movs	r2, #250	; 0xfa
 8018af0:	0112      	lsls	r2, r2, #4
 8018af2:	9208      	str	r2, [sp, #32]
 8018af4:	2200      	movs	r2, #0
 8018af6:	9207      	str	r2, [sp, #28]
 8018af8:	2200      	movs	r2, #0
 8018afa:	9206      	str	r2, [sp, #24]
 8018afc:	2200      	movs	r2, #0
 8018afe:	9205      	str	r2, [sp, #20]
 8018b00:	2201      	movs	r2, #1
 8018b02:	9204      	str	r2, [sp, #16]
 8018b04:	2200      	movs	r2, #0
 8018b06:	9203      	str	r2, [sp, #12]
 8018b08:	2208      	movs	r2, #8
 8018b0a:	9202      	str	r2, [sp, #8]
 8018b0c:	2201      	movs	r2, #1
 8018b0e:	9201      	str	r2, [sp, #4]
 8018b10:	9300      	str	r3, [sp, #0]
 8018b12:	002b      	movs	r3, r5
 8018b14:	2200      	movs	r2, #0
 8018b16:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8018b18:	68fb      	ldr	r3, [r7, #12]
 8018b1a:	781b      	ldrb	r3, [r3, #0]
 8018b1c:	0019      	movs	r1, r3
 8018b1e:	4a17      	ldr	r2, [pc, #92]	; (8018b7c <RegionEU868TxConfig+0x1c8>)
 8018b20:	000b      	movs	r3, r1
 8018b22:	005b      	lsls	r3, r3, #1
 8018b24:	185b      	adds	r3, r3, r1
 8018b26:	009b      	lsls	r3, r3, #2
 8018b28:	589a      	ldr	r2, [r3, r2]
 8018b2a:	68fb      	ldr	r3, [r7, #12]
 8018b2c:	785b      	ldrb	r3, [r3, #1]
 8018b2e:	b25b      	sxtb	r3, r3
 8018b30:	0019      	movs	r1, r3
 8018b32:	0010      	movs	r0, r2
 8018b34:	f7ff f98a 	bl	8017e4c <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8018b38:	68fb      	ldr	r3, [r7, #12]
 8018b3a:	2201      	movs	r2, #1
 8018b3c:	569a      	ldrsb	r2, [r3, r2]
 8018b3e:	68fb      	ldr	r3, [r7, #12]
 8018b40:	899b      	ldrh	r3, [r3, #12]
 8018b42:	0019      	movs	r1, r3
 8018b44:	0010      	movs	r0, r2
 8018b46:	f7ff fa81 	bl	801804c <GetTimeOnAir>
 8018b4a:	0002      	movs	r2, r0
 8018b4c:	687b      	ldr	r3, [r7, #4]
 8018b4e:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8018b50:	4b0c      	ldr	r3, [pc, #48]	; (8018b84 <RegionEU868TxConfig+0x1d0>)
 8018b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018b54:	68fa      	ldr	r2, [r7, #12]
 8018b56:	8992      	ldrh	r2, [r2, #12]
 8018b58:	b2d1      	uxtb	r1, r2
 8018b5a:	221f      	movs	r2, #31
 8018b5c:	18ba      	adds	r2, r7, r2
 8018b5e:	7812      	ldrb	r2, [r2, #0]
 8018b60:	0010      	movs	r0, r2
 8018b62:	4798      	blx	r3

    *txPower = txPowerLimited;
 8018b64:	68bb      	ldr	r3, [r7, #8]
 8018b66:	221d      	movs	r2, #29
 8018b68:	18ba      	adds	r2, r7, r2
 8018b6a:	7812      	ldrb	r2, [r2, #0]
 8018b6c:	701a      	strb	r2, [r3, #0]
    return true;
 8018b6e:	2301      	movs	r3, #1
}
 8018b70:	0018      	movs	r0, r3
 8018b72:	46bd      	mov	sp, r7
 8018b74:	b009      	add	sp, #36	; 0x24
 8018b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018b78:	0801f9e0 	.word	0x0801f9e0
 8018b7c:	20000d40 	.word	0x20000d40
 8018b80:	20000e78 	.word	0x20000e78
 8018b84:	0801fb64 	.word	0x0801fb64
 8018b88:	000061a8 	.word	0x000061a8

08018b8c <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8018b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018b8e:	b093      	sub	sp, #76	; 0x4c
 8018b90:	af00      	add	r7, sp, #0
 8018b92:	60f8      	str	r0, [r7, #12]
 8018b94:	60b9      	str	r1, [r7, #8]
 8018b96:	607a      	str	r2, [r7, #4]
 8018b98:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8018b9a:	2347      	movs	r3, #71	; 0x47
 8018b9c:	18fb      	adds	r3, r7, r3
 8018b9e:	2207      	movs	r2, #7
 8018ba0:	701a      	strb	r2, [r3, #0]
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8018ba2:	233c      	movs	r3, #60	; 0x3c
 8018ba4:	18fb      	adds	r3, r7, r3
 8018ba6:	0018      	movs	r0, r3
 8018ba8:	2306      	movs	r3, #6
 8018baa:	001a      	movs	r2, r3
 8018bac:	2100      	movs	r1, #0
 8018bae:	f005 fa26 	bl	801dffe <memset>
    uint8_t nextIndex = 0;
 8018bb2:	2344      	movs	r3, #68	; 0x44
 8018bb4:	18fb      	adds	r3, r7, r3
 8018bb6:	2200      	movs	r2, #0
 8018bb8:	701a      	strb	r2, [r3, #0]
    uint8_t bytesProcessed = 0;
 8018bba:	2346      	movs	r3, #70	; 0x46
 8018bbc:	18fb      	adds	r3, r7, r3
 8018bbe:	2200      	movs	r2, #0
 8018bc0:	701a      	strb	r2, [r3, #0]
    uint16_t chMask = 0;
 8018bc2:	233a      	movs	r3, #58	; 0x3a
 8018bc4:	18fb      	adds	r3, r7, r3
 8018bc6:	2200      	movs	r2, #0
 8018bc8:	801a      	strh	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8018bca:	e098      	b.n	8018cfe <RegionEU868LinkAdrReq+0x172>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8018bcc:	68fb      	ldr	r3, [r7, #12]
 8018bce:	685a      	ldr	r2, [r3, #4]
 8018bd0:	2546      	movs	r5, #70	; 0x46
 8018bd2:	197b      	adds	r3, r7, r5
 8018bd4:	781b      	ldrb	r3, [r3, #0]
 8018bd6:	18d3      	adds	r3, r2, r3
 8018bd8:	2644      	movs	r6, #68	; 0x44
 8018bda:	19bc      	adds	r4, r7, r6
 8018bdc:	203c      	movs	r0, #60	; 0x3c
 8018bde:	183a      	adds	r2, r7, r0
 8018be0:	0011      	movs	r1, r2
 8018be2:	0018      	movs	r0, r3
 8018be4:	f7fe fdf8 	bl	80177d8 <RegionCommonParseLinkAdrReq>
 8018be8:	0003      	movs	r3, r0
 8018bea:	7023      	strb	r3, [r4, #0]

        if( nextIndex == 0 )
 8018bec:	0032      	movs	r2, r6
 8018bee:	18bb      	adds	r3, r7, r2
 8018bf0:	781b      	ldrb	r3, [r3, #0]
 8018bf2:	2b00      	cmp	r3, #0
 8018bf4:	d100      	bne.n	8018bf8 <RegionEU868LinkAdrReq+0x6c>
 8018bf6:	e08b      	b.n	8018d10 <RegionEU868LinkAdrReq+0x184>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8018bf8:	197b      	adds	r3, r7, r5
 8018bfa:	1979      	adds	r1, r7, r5
 8018bfc:	18ba      	adds	r2, r7, r2
 8018bfe:	7809      	ldrb	r1, [r1, #0]
 8018c00:	7812      	ldrb	r2, [r2, #0]
 8018c02:	188a      	adds	r2, r1, r2
 8018c04:	701a      	strb	r2, [r3, #0]

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8018c06:	2147      	movs	r1, #71	; 0x47
 8018c08:	187b      	adds	r3, r7, r1
 8018c0a:	2207      	movs	r2, #7
 8018c0c:	701a      	strb	r2, [r3, #0]

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8018c0e:	203c      	movs	r0, #60	; 0x3c
 8018c10:	183b      	adds	r3, r7, r0
 8018c12:	889a      	ldrh	r2, [r3, #4]
 8018c14:	243a      	movs	r4, #58	; 0x3a
 8018c16:	193b      	adds	r3, r7, r4
 8018c18:	801a      	strh	r2, [r3, #0]

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8018c1a:	183b      	adds	r3, r7, r0
 8018c1c:	78db      	ldrb	r3, [r3, #3]
 8018c1e:	2b00      	cmp	r3, #0
 8018c20:	d10a      	bne.n	8018c38 <RegionEU868LinkAdrReq+0xac>
 8018c22:	193b      	adds	r3, r7, r4
 8018c24:	881b      	ldrh	r3, [r3, #0]
 8018c26:	2b00      	cmp	r3, #0
 8018c28:	d106      	bne.n	8018c38 <RegionEU868LinkAdrReq+0xac>
        {
            status &= 0xFE; // Channel mask KO
 8018c2a:	187b      	adds	r3, r7, r1
 8018c2c:	187a      	adds	r2, r7, r1
 8018c2e:	7812      	ldrb	r2, [r2, #0]
 8018c30:	2101      	movs	r1, #1
 8018c32:	438a      	bics	r2, r1
 8018c34:	701a      	strb	r2, [r3, #0]
 8018c36:	e062      	b.n	8018cfe <RegionEU868LinkAdrReq+0x172>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8018c38:	223c      	movs	r2, #60	; 0x3c
 8018c3a:	18bb      	adds	r3, r7, r2
 8018c3c:	78db      	ldrb	r3, [r3, #3]
 8018c3e:	2b00      	cmp	r3, #0
 8018c40:	d003      	beq.n	8018c4a <RegionEU868LinkAdrReq+0xbe>
 8018c42:	18bb      	adds	r3, r7, r2
 8018c44:	78db      	ldrb	r3, [r3, #3]
 8018c46:	2b05      	cmp	r3, #5
 8018c48:	d904      	bls.n	8018c54 <RegionEU868LinkAdrReq+0xc8>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8018c4a:	233c      	movs	r3, #60	; 0x3c
 8018c4c:	18fb      	adds	r3, r7, r3
 8018c4e:	78db      	ldrb	r3, [r3, #3]
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8018c50:	2b06      	cmp	r3, #6
 8018c52:	d907      	bls.n	8018c64 <RegionEU868LinkAdrReq+0xd8>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8018c54:	2247      	movs	r2, #71	; 0x47
 8018c56:	18bb      	adds	r3, r7, r2
 8018c58:	18ba      	adds	r2, r7, r2
 8018c5a:	7812      	ldrb	r2, [r2, #0]
 8018c5c:	2101      	movs	r1, #1
 8018c5e:	438a      	bics	r2, r1
 8018c60:	701a      	strb	r2, [r3, #0]
 8018c62:	e04c      	b.n	8018cfe <RegionEU868LinkAdrReq+0x172>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8018c64:	2345      	movs	r3, #69	; 0x45
 8018c66:	18fb      	adds	r3, r7, r3
 8018c68:	2200      	movs	r2, #0
 8018c6a:	701a      	strb	r2, [r3, #0]
 8018c6c:	e042      	b.n	8018cf4 <RegionEU868LinkAdrReq+0x168>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8018c6e:	233c      	movs	r3, #60	; 0x3c
 8018c70:	18fb      	adds	r3, r7, r3
 8018c72:	78db      	ldrb	r3, [r3, #3]
 8018c74:	2b06      	cmp	r3, #6
 8018c76:	d11a      	bne.n	8018cae <RegionEU868LinkAdrReq+0x122>
                {
                    if( NvmCtx.Channels[i].Frequency != 0 )
 8018c78:	2045      	movs	r0, #69	; 0x45
 8018c7a:	183b      	adds	r3, r7, r0
 8018c7c:	781a      	ldrb	r2, [r3, #0]
 8018c7e:	496d      	ldr	r1, [pc, #436]	; (8018e34 <RegionEU868LinkAdrReq+0x2a8>)
 8018c80:	0013      	movs	r3, r2
 8018c82:	005b      	lsls	r3, r3, #1
 8018c84:	189b      	adds	r3, r3, r2
 8018c86:	009b      	lsls	r3, r3, #2
 8018c88:	585b      	ldr	r3, [r3, r1]
 8018c8a:	2b00      	cmp	r3, #0
 8018c8c:	d02c      	beq.n	8018ce8 <RegionEU868LinkAdrReq+0x15c>
                    {
                        chMask |= 1 << i;
 8018c8e:	183b      	adds	r3, r7, r0
 8018c90:	781b      	ldrb	r3, [r3, #0]
 8018c92:	2201      	movs	r2, #1
 8018c94:	409a      	lsls	r2, r3
 8018c96:	0013      	movs	r3, r2
 8018c98:	b21a      	sxth	r2, r3
 8018c9a:	213a      	movs	r1, #58	; 0x3a
 8018c9c:	187b      	adds	r3, r7, r1
 8018c9e:	881b      	ldrh	r3, [r3, #0]
 8018ca0:	b21b      	sxth	r3, r3
 8018ca2:	4313      	orrs	r3, r2
 8018ca4:	b21b      	sxth	r3, r3
 8018ca6:	b29a      	uxth	r2, r3
 8018ca8:	187b      	adds	r3, r7, r1
 8018caa:	801a      	strh	r2, [r3, #0]
 8018cac:	e01c      	b.n	8018ce8 <RegionEU868LinkAdrReq+0x15c>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8018cae:	233a      	movs	r3, #58	; 0x3a
 8018cb0:	18fb      	adds	r3, r7, r3
 8018cb2:	881b      	ldrh	r3, [r3, #0]
 8018cb4:	001a      	movs	r2, r3
 8018cb6:	2145      	movs	r1, #69	; 0x45
 8018cb8:	187b      	adds	r3, r7, r1
 8018cba:	781b      	ldrb	r3, [r3, #0]
 8018cbc:	411a      	asrs	r2, r3
 8018cbe:	0013      	movs	r3, r2
 8018cc0:	2201      	movs	r2, #1
 8018cc2:	4013      	ands	r3, r2
 8018cc4:	d010      	beq.n	8018ce8 <RegionEU868LinkAdrReq+0x15c>
                        ( NvmCtx.Channels[i].Frequency == 0 ) )
 8018cc6:	187b      	adds	r3, r7, r1
 8018cc8:	781a      	ldrb	r2, [r3, #0]
 8018cca:	495a      	ldr	r1, [pc, #360]	; (8018e34 <RegionEU868LinkAdrReq+0x2a8>)
 8018ccc:	0013      	movs	r3, r2
 8018cce:	005b      	lsls	r3, r3, #1
 8018cd0:	189b      	adds	r3, r3, r2
 8018cd2:	009b      	lsls	r3, r3, #2
 8018cd4:	585b      	ldr	r3, [r3, r1]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8018cd6:	2b00      	cmp	r3, #0
 8018cd8:	d106      	bne.n	8018ce8 <RegionEU868LinkAdrReq+0x15c>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8018cda:	2247      	movs	r2, #71	; 0x47
 8018cdc:	18bb      	adds	r3, r7, r2
 8018cde:	18ba      	adds	r2, r7, r2
 8018ce0:	7812      	ldrb	r2, [r2, #0]
 8018ce2:	2101      	movs	r1, #1
 8018ce4:	438a      	bics	r2, r1
 8018ce6:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8018ce8:	2145      	movs	r1, #69	; 0x45
 8018cea:	187b      	adds	r3, r7, r1
 8018cec:	781a      	ldrb	r2, [r3, #0]
 8018cee:	187b      	adds	r3, r7, r1
 8018cf0:	3201      	adds	r2, #1
 8018cf2:	701a      	strb	r2, [r3, #0]
 8018cf4:	2345      	movs	r3, #69	; 0x45
 8018cf6:	18fb      	adds	r3, r7, r3
 8018cf8:	781b      	ldrb	r3, [r3, #0]
 8018cfa:	2b0f      	cmp	r3, #15
 8018cfc:	d9b7      	bls.n	8018c6e <RegionEU868LinkAdrReq+0xe2>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8018cfe:	68fb      	ldr	r3, [r7, #12]
 8018d00:	7a1b      	ldrb	r3, [r3, #8]
 8018d02:	2246      	movs	r2, #70	; 0x46
 8018d04:	18ba      	adds	r2, r7, r2
 8018d06:	7812      	ldrb	r2, [r2, #0]
 8018d08:	429a      	cmp	r2, r3
 8018d0a:	d200      	bcs.n	8018d0e <RegionEU868LinkAdrReq+0x182>
 8018d0c:	e75e      	b.n	8018bcc <RegionEU868LinkAdrReq+0x40>
 8018d0e:	e000      	b.n	8018d12 <RegionEU868LinkAdrReq+0x186>
            break; // break loop, since no more request has been found
 8018d10:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8018d12:	2134      	movs	r1, #52	; 0x34
 8018d14:	187b      	adds	r3, r7, r1
 8018d16:	2202      	movs	r2, #2
 8018d18:	701a      	strb	r2, [r3, #0]
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8018d1a:	68fb      	ldr	r3, [r7, #12]
 8018d1c:	7a5a      	ldrb	r2, [r3, #9]
 8018d1e:	187b      	adds	r3, r7, r1
 8018d20:	709a      	strb	r2, [r3, #2]
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8018d22:	187b      	adds	r3, r7, r1
 8018d24:	0018      	movs	r0, r3
 8018d26:	f7ff f9ef 	bl	8018108 <RegionEU868GetPhyParam>
 8018d2a:	0003      	movs	r3, r0
 8018d2c:	001a      	movs	r2, r3
 8018d2e:	2030      	movs	r0, #48	; 0x30
 8018d30:	183b      	adds	r3, r7, r0
 8018d32:	601a      	str	r2, [r3, #0]

    linkAdrVerifyParams.Status = status;
 8018d34:	2110      	movs	r1, #16
 8018d36:	187b      	adds	r3, r7, r1
 8018d38:	2447      	movs	r4, #71	; 0x47
 8018d3a:	193a      	adds	r2, r7, r4
 8018d3c:	7812      	ldrb	r2, [r2, #0]
 8018d3e:	711a      	strb	r2, [r3, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8018d40:	68fb      	ldr	r3, [r7, #12]
 8018d42:	7a9a      	ldrb	r2, [r3, #10]
 8018d44:	187b      	adds	r3, r7, r1
 8018d46:	715a      	strb	r2, [r3, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8018d48:	253c      	movs	r5, #60	; 0x3c
 8018d4a:	197b      	adds	r3, r7, r5
 8018d4c:	2201      	movs	r2, #1
 8018d4e:	569a      	ldrsb	r2, [r3, r2]
 8018d50:	187b      	adds	r3, r7, r1
 8018d52:	719a      	strb	r2, [r3, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8018d54:	197b      	adds	r3, r7, r5
 8018d56:	2202      	movs	r2, #2
 8018d58:	569a      	ldrsb	r2, [r3, r2]
 8018d5a:	187b      	adds	r3, r7, r1
 8018d5c:	71da      	strb	r2, [r3, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8018d5e:	197b      	adds	r3, r7, r5
 8018d60:	781a      	ldrb	r2, [r3, #0]
 8018d62:	187b      	adds	r3, r7, r1
 8018d64:	721a      	strb	r2, [r3, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8018d66:	68fb      	ldr	r3, [r7, #12]
 8018d68:	220b      	movs	r2, #11
 8018d6a:	569a      	ldrsb	r2, [r3, r2]
 8018d6c:	187b      	adds	r3, r7, r1
 8018d6e:	725a      	strb	r2, [r3, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8018d70:	68fb      	ldr	r3, [r7, #12]
 8018d72:	220c      	movs	r2, #12
 8018d74:	569a      	ldrsb	r2, [r3, r2]
 8018d76:	187b      	adds	r3, r7, r1
 8018d78:	729a      	strb	r2, [r3, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8018d7a:	68fb      	ldr	r3, [r7, #12]
 8018d7c:	7b5b      	ldrb	r3, [r3, #13]
 8018d7e:	b25a      	sxtb	r2, r3
 8018d80:	187b      	adds	r3, r7, r1
 8018d82:	72da      	strb	r2, [r3, #11]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8018d84:	187b      	adds	r3, r7, r1
 8018d86:	2210      	movs	r2, #16
 8018d88:	731a      	strb	r2, [r3, #12]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8018d8a:	187b      	adds	r3, r7, r1
 8018d8c:	223a      	movs	r2, #58	; 0x3a
 8018d8e:	18ba      	adds	r2, r7, r2
 8018d90:	611a      	str	r2, [r3, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8018d92:	183b      	adds	r3, r7, r0
 8018d94:	681b      	ldr	r3, [r3, #0]
 8018d96:	b25a      	sxtb	r2, r3
 8018d98:	0008      	movs	r0, r1
 8018d9a:	183b      	adds	r3, r7, r0
 8018d9c:	751a      	strb	r2, [r3, #20]
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 8018d9e:	183b      	adds	r3, r7, r0
 8018da0:	2207      	movs	r2, #7
 8018da2:	755a      	strb	r2, [r3, #21]
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 8018da4:	183b      	adds	r3, r7, r0
 8018da6:	4a23      	ldr	r2, [pc, #140]	; (8018e34 <RegionEU868LinkAdrReq+0x2a8>)
 8018da8:	619a      	str	r2, [r3, #24]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8018daa:	183b      	adds	r3, r7, r0
 8018dac:	2207      	movs	r2, #7
 8018dae:	771a      	strb	r2, [r3, #28]
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8018db0:	183b      	adds	r3, r7, r0
 8018db2:	2200      	movs	r2, #0
 8018db4:	775a      	strb	r2, [r3, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8018db6:	183b      	adds	r3, r7, r0
 8018db8:	68fa      	ldr	r2, [r7, #12]
 8018dba:	6812      	ldr	r2, [r2, #0]
 8018dbc:	601a      	str	r2, [r3, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8018dbe:	0026      	movs	r6, r4
 8018dc0:	193c      	adds	r4, r7, r4
 8018dc2:	0029      	movs	r1, r5
 8018dc4:	187d      	adds	r5, r7, r1
 8018dc6:	187b      	adds	r3, r7, r1
 8018dc8:	1c9a      	adds	r2, r3, #2
 8018dca:	187b      	adds	r3, r7, r1
 8018dcc:	1c59      	adds	r1, r3, #1
 8018dce:	1838      	adds	r0, r7, r0
 8018dd0:	002b      	movs	r3, r5
 8018dd2:	f7fe fd56 	bl	8017882 <RegionCommonLinkAdrReqVerifyParams>
 8018dd6:	0003      	movs	r3, r0
 8018dd8:	7023      	strb	r3, [r4, #0]

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8018dda:	19bb      	adds	r3, r7, r6
 8018ddc:	781b      	ldrb	r3, [r3, #0]
 8018dde:	2b07      	cmp	r3, #7
 8018de0:	d10c      	bne.n	8018dfc <RegionEU868LinkAdrReq+0x270>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) NvmCtx.ChannelsMask, 0, sizeof( NvmCtx.ChannelsMask ) );
 8018de2:	4b15      	ldr	r3, [pc, #84]	; (8018e38 <RegionEU868LinkAdrReq+0x2ac>)
 8018de4:	2202      	movs	r2, #2
 8018de6:	2100      	movs	r1, #0
 8018de8:	0018      	movs	r0, r3
 8018dea:	f000 fbe9 	bl	80195c0 <memset1>
        // Update the channels mask
        NvmCtx.ChannelsMask[0] = chMask;
 8018dee:	223a      	movs	r2, #58	; 0x3a
 8018df0:	18bb      	adds	r3, r7, r2
 8018df2:	8819      	ldrh	r1, [r3, #0]
 8018df4:	4a0f      	ldr	r2, [pc, #60]	; (8018e34 <RegionEU868LinkAdrReq+0x2a8>)
 8018df6:	239c      	movs	r3, #156	; 0x9c
 8018df8:	005b      	lsls	r3, r3, #1
 8018dfa:	52d1      	strh	r1, [r2, r3]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8018dfc:	213c      	movs	r1, #60	; 0x3c
 8018dfe:	187b      	adds	r3, r7, r1
 8018e00:	2201      	movs	r2, #1
 8018e02:	569a      	ldrsb	r2, [r3, r2]
 8018e04:	68bb      	ldr	r3, [r7, #8]
 8018e06:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8018e08:	187b      	adds	r3, r7, r1
 8018e0a:	2202      	movs	r2, #2
 8018e0c:	569a      	ldrsb	r2, [r3, r2]
 8018e0e:	687b      	ldr	r3, [r7, #4]
 8018e10:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8018e12:	187b      	adds	r3, r7, r1
 8018e14:	781a      	ldrb	r2, [r3, #0]
 8018e16:	683b      	ldr	r3, [r7, #0]
 8018e18:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8018e1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018e1c:	2246      	movs	r2, #70	; 0x46
 8018e1e:	18ba      	adds	r2, r7, r2
 8018e20:	7812      	ldrb	r2, [r2, #0]
 8018e22:	701a      	strb	r2, [r3, #0]

    return status;
 8018e24:	2347      	movs	r3, #71	; 0x47
 8018e26:	18fb      	adds	r3, r7, r3
 8018e28:	781b      	ldrb	r3, [r3, #0]
}
 8018e2a:	0018      	movs	r0, r3
 8018e2c:	46bd      	mov	sp, r7
 8018e2e:	b013      	add	sp, #76	; 0x4c
 8018e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018e32:	46c0      	nop			; (mov r8, r8)
 8018e34:	20000d40 	.word	0x20000d40
 8018e38:	20000e78 	.word	0x20000e78

08018e3c <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8018e3c:	b590      	push	{r4, r7, lr}
 8018e3e:	b085      	sub	sp, #20
 8018e40:	af00      	add	r7, sp, #0
 8018e42:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8018e44:	240f      	movs	r4, #15
 8018e46:	193b      	adds	r3, r7, r4
 8018e48:	2207      	movs	r2, #7
 8018e4a:	701a      	strb	r2, [r3, #0]
    uint8_t band = 0;
 8018e4c:	210e      	movs	r1, #14
 8018e4e:	187b      	adds	r3, r7, r1
 8018e50:	2200      	movs	r2, #0
 8018e52:	701a      	strb	r2, [r3, #0]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8018e54:	687b      	ldr	r3, [r7, #4]
 8018e56:	685b      	ldr	r3, [r3, #4]
 8018e58:	187a      	adds	r2, r7, r1
 8018e5a:	0011      	movs	r1, r2
 8018e5c:	0018      	movs	r0, r3
 8018e5e:	f7ff f87d 	bl	8017f5c <VerifyRfFreq>
 8018e62:	0003      	movs	r3, r0
 8018e64:	001a      	movs	r2, r3
 8018e66:	2301      	movs	r3, #1
 8018e68:	4053      	eors	r3, r2
 8018e6a:	b2db      	uxtb	r3, r3
 8018e6c:	2b00      	cmp	r3, #0
 8018e6e:	d005      	beq.n	8018e7c <RegionEU868RxParamSetupReq+0x40>
    {
        status &= 0xFE; // Channel frequency KO
 8018e70:	193b      	adds	r3, r7, r4
 8018e72:	193a      	adds	r2, r7, r4
 8018e74:	7812      	ldrb	r2, [r2, #0]
 8018e76:	2101      	movs	r1, #1
 8018e78:	438a      	bics	r2, r1
 8018e7a:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8018e7c:	687b      	ldr	r3, [r7, #4]
 8018e7e:	781b      	ldrb	r3, [r3, #0]
 8018e80:	b25b      	sxtb	r3, r3
 8018e82:	2207      	movs	r2, #7
 8018e84:	2100      	movs	r1, #0
 8018e86:	0018      	movs	r0, r3
 8018e88:	f7fe fac9 	bl	801741e <RegionCommonValueInRange>
 8018e8c:	1e03      	subs	r3, r0, #0
 8018e8e:	d106      	bne.n	8018e9e <RegionEU868RxParamSetupReq+0x62>
    {
        status &= 0xFD; // Datarate KO
 8018e90:	220f      	movs	r2, #15
 8018e92:	18bb      	adds	r3, r7, r2
 8018e94:	18ba      	adds	r2, r7, r2
 8018e96:	7812      	ldrb	r2, [r2, #0]
 8018e98:	2102      	movs	r1, #2
 8018e9a:	438a      	bics	r2, r1
 8018e9c:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8018e9e:	687b      	ldr	r3, [r7, #4]
 8018ea0:	785b      	ldrb	r3, [r3, #1]
 8018ea2:	b25b      	sxtb	r3, r3
 8018ea4:	2205      	movs	r2, #5
 8018ea6:	2100      	movs	r1, #0
 8018ea8:	0018      	movs	r0, r3
 8018eaa:	f7fe fab8 	bl	801741e <RegionCommonValueInRange>
 8018eae:	1e03      	subs	r3, r0, #0
 8018eb0:	d106      	bne.n	8018ec0 <RegionEU868RxParamSetupReq+0x84>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8018eb2:	220f      	movs	r2, #15
 8018eb4:	18bb      	adds	r3, r7, r2
 8018eb6:	18ba      	adds	r2, r7, r2
 8018eb8:	7812      	ldrb	r2, [r2, #0]
 8018eba:	2104      	movs	r1, #4
 8018ebc:	438a      	bics	r2, r1
 8018ebe:	701a      	strb	r2, [r3, #0]
    }

    return status;
 8018ec0:	230f      	movs	r3, #15
 8018ec2:	18fb      	adds	r3, r7, r3
 8018ec4:	781b      	ldrb	r3, [r3, #0]
}
 8018ec6:	0018      	movs	r0, r3
 8018ec8:	46bd      	mov	sp, r7
 8018eca:	b005      	add	sp, #20
 8018ecc:	bd90      	pop	{r4, r7, pc}

08018ece <RegionEU868NewChannelReq>:

uint8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8018ece:	b590      	push	{r4, r7, lr}
 8018ed0:	b087      	sub	sp, #28
 8018ed2:	af00      	add	r7, sp, #0
 8018ed4:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8018ed6:	2417      	movs	r4, #23
 8018ed8:	193b      	adds	r3, r7, r4
 8018eda:	2203      	movs	r2, #3
 8018edc:	701a      	strb	r2, [r3, #0]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8018ede:	687b      	ldr	r3, [r7, #4]
 8018ee0:	681b      	ldr	r3, [r3, #0]
 8018ee2:	681b      	ldr	r3, [r3, #0]
 8018ee4:	2b00      	cmp	r3, #0
 8018ee6:	d118      	bne.n	8018f1a <RegionEU868NewChannelReq+0x4c>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8018ee8:	687b      	ldr	r3, [r7, #4]
 8018eea:	791b      	ldrb	r3, [r3, #4]
 8018eec:	b25b      	sxtb	r3, r3
 8018eee:	b2da      	uxtb	r2, r3
 8018ef0:	2108      	movs	r1, #8
 8018ef2:	187b      	adds	r3, r7, r1
 8018ef4:	701a      	strb	r2, [r3, #0]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8018ef6:	187b      	adds	r3, r7, r1
 8018ef8:	0018      	movs	r0, r3
 8018efa:	f000 fa35 	bl	8019368 <RegionEU868ChannelsRemove>
 8018efe:	0003      	movs	r3, r0
 8018f00:	001a      	movs	r2, r3
 8018f02:	2301      	movs	r3, #1
 8018f04:	4053      	eors	r3, r2
 8018f06:	b2db      	uxtb	r3, r3
 8018f08:	2b00      	cmp	r3, #0
 8018f0a:	d041      	beq.n	8018f90 <RegionEU868NewChannelReq+0xc2>
        {
            status &= 0xFC;
 8018f0c:	193b      	adds	r3, r7, r4
 8018f0e:	193a      	adds	r2, r7, r4
 8018f10:	7812      	ldrb	r2, [r2, #0]
 8018f12:	2103      	movs	r1, #3
 8018f14:	438a      	bics	r2, r1
 8018f16:	701a      	strb	r2, [r3, #0]
 8018f18:	e03a      	b.n	8018f90 <RegionEU868NewChannelReq+0xc2>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8018f1a:	687b      	ldr	r3, [r7, #4]
 8018f1c:	681a      	ldr	r2, [r3, #0]
 8018f1e:	210c      	movs	r1, #12
 8018f20:	187b      	adds	r3, r7, r1
 8018f22:	601a      	str	r2, [r3, #0]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8018f24:	687b      	ldr	r3, [r7, #4]
 8018f26:	791b      	ldrb	r3, [r3, #4]
 8018f28:	b25b      	sxtb	r3, r3
 8018f2a:	b2da      	uxtb	r2, r3
 8018f2c:	187b      	adds	r3, r7, r1
 8018f2e:	711a      	strb	r2, [r3, #4]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8018f30:	187b      	adds	r3, r7, r1
 8018f32:	0018      	movs	r0, r3
 8018f34:	f000 f954 	bl	80191e0 <RegionEU868ChannelAdd>
 8018f38:	0003      	movs	r3, r0
 8018f3a:	2b06      	cmp	r3, #6
 8018f3c:	d017      	beq.n	8018f6e <RegionEU868NewChannelReq+0xa0>
 8018f3e:	dc1e      	bgt.n	8018f7e <RegionEU868NewChannelReq+0xb0>
 8018f40:	2b05      	cmp	r3, #5
 8018f42:	d00c      	beq.n	8018f5e <RegionEU868NewChannelReq+0x90>
 8018f44:	dc1b      	bgt.n	8018f7e <RegionEU868NewChannelReq+0xb0>
 8018f46:	2b00      	cmp	r3, #0
 8018f48:	d021      	beq.n	8018f8e <RegionEU868NewChannelReq+0xc0>
 8018f4a:	2b04      	cmp	r3, #4
 8018f4c:	d117      	bne.n	8018f7e <RegionEU868NewChannelReq+0xb0>
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8018f4e:	2217      	movs	r2, #23
 8018f50:	18bb      	adds	r3, r7, r2
 8018f52:	18ba      	adds	r2, r7, r2
 8018f54:	7812      	ldrb	r2, [r2, #0]
 8018f56:	2101      	movs	r1, #1
 8018f58:	438a      	bics	r2, r1
 8018f5a:	701a      	strb	r2, [r3, #0]
                break;
 8018f5c:	e018      	b.n	8018f90 <RegionEU868NewChannelReq+0xc2>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8018f5e:	2217      	movs	r2, #23
 8018f60:	18bb      	adds	r3, r7, r2
 8018f62:	18ba      	adds	r2, r7, r2
 8018f64:	7812      	ldrb	r2, [r2, #0]
 8018f66:	2102      	movs	r1, #2
 8018f68:	438a      	bics	r2, r1
 8018f6a:	701a      	strb	r2, [r3, #0]
                break;
 8018f6c:	e010      	b.n	8018f90 <RegionEU868NewChannelReq+0xc2>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8018f6e:	2217      	movs	r2, #23
 8018f70:	18bb      	adds	r3, r7, r2
 8018f72:	18ba      	adds	r2, r7, r2
 8018f74:	7812      	ldrb	r2, [r2, #0]
 8018f76:	2103      	movs	r1, #3
 8018f78:	438a      	bics	r2, r1
 8018f7a:	701a      	strb	r2, [r3, #0]
                break;
 8018f7c:	e008      	b.n	8018f90 <RegionEU868NewChannelReq+0xc2>
            }
            default:
            {
                status &= 0xFC;
 8018f7e:	2217      	movs	r2, #23
 8018f80:	18bb      	adds	r3, r7, r2
 8018f82:	18ba      	adds	r2, r7, r2
 8018f84:	7812      	ldrb	r2, [r2, #0]
 8018f86:	2103      	movs	r1, #3
 8018f88:	438a      	bics	r2, r1
 8018f8a:	701a      	strb	r2, [r3, #0]
                break;
 8018f8c:	e000      	b.n	8018f90 <RegionEU868NewChannelReq+0xc2>
                break;
 8018f8e:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    return status;
 8018f90:	2317      	movs	r3, #23
 8018f92:	18fb      	adds	r3, r7, r3
 8018f94:	781b      	ldrb	r3, [r3, #0]
}
 8018f96:	0018      	movs	r0, r3
 8018f98:	46bd      	mov	sp, r7
 8018f9a:	b007      	add	sp, #28
 8018f9c:	bd90      	pop	{r4, r7, pc}

08018f9e <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8018f9e:	b580      	push	{r7, lr}
 8018fa0:	b082      	sub	sp, #8
 8018fa2:	af00      	add	r7, sp, #0
 8018fa4:	6078      	str	r0, [r7, #4]
    return -1;
 8018fa6:	2301      	movs	r3, #1
 8018fa8:	425b      	negs	r3, r3
}
 8018faa:	0018      	movs	r0, r3
 8018fac:	46bd      	mov	sp, r7
 8018fae:	b002      	add	sp, #8
 8018fb0:	bd80      	pop	{r7, pc}
	...

08018fb4 <RegionEU868DlChannelReq>:

uint8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8018fb4:	b590      	push	{r4, r7, lr}
 8018fb6:	b085      	sub	sp, #20
 8018fb8:	af00      	add	r7, sp, #0
 8018fba:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8018fbc:	240f      	movs	r4, #15
 8018fbe:	193b      	adds	r3, r7, r4
 8018fc0:	2203      	movs	r2, #3
 8018fc2:	701a      	strb	r2, [r3, #0]
    uint8_t band = 0;
 8018fc4:	210e      	movs	r1, #14
 8018fc6:	187b      	adds	r3, r7, r1
 8018fc8:	2200      	movs	r2, #0
 8018fca:	701a      	strb	r2, [r3, #0]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8018fcc:	687b      	ldr	r3, [r7, #4]
 8018fce:	685b      	ldr	r3, [r3, #4]
 8018fd0:	187a      	adds	r2, r7, r1
 8018fd2:	0011      	movs	r1, r2
 8018fd4:	0018      	movs	r0, r3
 8018fd6:	f7fe ffc1 	bl	8017f5c <VerifyRfFreq>
 8018fda:	0003      	movs	r3, r0
 8018fdc:	001a      	movs	r2, r3
 8018fde:	2301      	movs	r3, #1
 8018fe0:	4053      	eors	r3, r2
 8018fe2:	b2db      	uxtb	r3, r3
 8018fe4:	2b00      	cmp	r3, #0
 8018fe6:	d005      	beq.n	8018ff4 <RegionEU868DlChannelReq+0x40>
    {
        status &= 0xFE;
 8018fe8:	193b      	adds	r3, r7, r4
 8018fea:	193a      	adds	r2, r7, r4
 8018fec:	7812      	ldrb	r2, [r2, #0]
 8018fee:	2101      	movs	r1, #1
 8018ff0:	438a      	bics	r2, r1
 8018ff2:	701a      	strb	r2, [r3, #0]
    }

    // Verify if an uplink frequency exists
    if( NvmCtx.Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8018ff4:	687b      	ldr	r3, [r7, #4]
 8018ff6:	781b      	ldrb	r3, [r3, #0]
 8018ff8:	0019      	movs	r1, r3
 8018ffa:	4a14      	ldr	r2, [pc, #80]	; (801904c <RegionEU868DlChannelReq+0x98>)
 8018ffc:	000b      	movs	r3, r1
 8018ffe:	005b      	lsls	r3, r3, #1
 8019000:	185b      	adds	r3, r3, r1
 8019002:	009b      	lsls	r3, r3, #2
 8019004:	589b      	ldr	r3, [r3, r2]
 8019006:	2b00      	cmp	r3, #0
 8019008:	d106      	bne.n	8019018 <RegionEU868DlChannelReq+0x64>
    {
        status &= 0xFD;
 801900a:	220f      	movs	r2, #15
 801900c:	18bb      	adds	r3, r7, r2
 801900e:	18ba      	adds	r2, r7, r2
 8019010:	7812      	ldrb	r2, [r2, #0]
 8019012:	2102      	movs	r1, #2
 8019014:	438a      	bics	r2, r1
 8019016:	701a      	strb	r2, [r3, #0]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8019018:	230f      	movs	r3, #15
 801901a:	18fb      	adds	r3, r7, r3
 801901c:	781b      	ldrb	r3, [r3, #0]
 801901e:	2b03      	cmp	r3, #3
 8019020:	d10c      	bne.n	801903c <RegionEU868DlChannelReq+0x88>
    {
        NvmCtx.Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8019022:	687b      	ldr	r3, [r7, #4]
 8019024:	781b      	ldrb	r3, [r3, #0]
 8019026:	0018      	movs	r0, r3
 8019028:	687b      	ldr	r3, [r7, #4]
 801902a:	685a      	ldr	r2, [r3, #4]
 801902c:	4907      	ldr	r1, [pc, #28]	; (801904c <RegionEU868DlChannelReq+0x98>)
 801902e:	0003      	movs	r3, r0
 8019030:	005b      	lsls	r3, r3, #1
 8019032:	181b      	adds	r3, r3, r0
 8019034:	009b      	lsls	r3, r3, #2
 8019036:	18cb      	adds	r3, r1, r3
 8019038:	3304      	adds	r3, #4
 801903a:	601a      	str	r2, [r3, #0]
    }

    return status;
 801903c:	230f      	movs	r3, #15
 801903e:	18fb      	adds	r3, r7, r3
 8019040:	781b      	ldrb	r3, [r3, #0]
}
 8019042:	0018      	movs	r0, r3
 8019044:	46bd      	mov	sp, r7
 8019046:	b005      	add	sp, #20
 8019048:	bd90      	pop	{r4, r7, pc}
 801904a:	46c0      	nop			; (mov r8, r8)
 801904c:	20000d40 	.word	0x20000d40

08019050 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8019050:	b580      	push	{r7, lr}
 8019052:	b082      	sub	sp, #8
 8019054:	af00      	add	r7, sp, #0
 8019056:	0002      	movs	r2, r0
 8019058:	1dfb      	adds	r3, r7, #7
 801905a:	701a      	strb	r2, [r3, #0]
 801905c:	1dbb      	adds	r3, r7, #6
 801905e:	1c0a      	adds	r2, r1, #0
 8019060:	701a      	strb	r2, [r3, #0]
    return currentDr;
 8019062:	1dfb      	adds	r3, r7, #7
 8019064:	781b      	ldrb	r3, [r3, #0]
 8019066:	b25b      	sxtb	r3, r3
}
 8019068:	0018      	movs	r0, r3
 801906a:	46bd      	mov	sp, r7
 801906c:	b002      	add	sp, #8
 801906e:	bd80      	pop	{r7, pc}

08019070 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8019070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019072:	b099      	sub	sp, #100	; 0x64
 8019074:	af02      	add	r7, sp, #8
 8019076:	60f8      	str	r0, [r7, #12]
 8019078:	60b9      	str	r1, [r7, #8]
 801907a:	607a      	str	r2, [r7, #4]
 801907c:	603b      	str	r3, [r7, #0]
    uint8_t nbEnabledChannels = 0;
 801907e:	2356      	movs	r3, #86	; 0x56
 8019080:	18fb      	adds	r3, r7, r3
 8019082:	2200      	movs	r2, #0
 8019084:	701a      	strb	r2, [r3, #0]
    uint8_t nbRestrictedChannels = 0;
 8019086:	2355      	movs	r3, #85	; 0x55
 8019088:	18fb      	adds	r3, r7, r3
 801908a:	2200      	movs	r2, #0
 801908c:	701a      	strb	r2, [r3, #0]
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 801908e:	2344      	movs	r3, #68	; 0x44
 8019090:	18fb      	adds	r3, r7, r3
 8019092:	2200      	movs	r2, #0
 8019094:	601a      	str	r2, [r3, #0]
 8019096:	3304      	adds	r3, #4
 8019098:	220c      	movs	r2, #12
 801909a:	2100      	movs	r1, #0
 801909c:	0018      	movs	r0, r3
 801909e:	f004 ffae 	bl	801dffe <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80190a2:	2357      	movs	r3, #87	; 0x57
 80190a4:	18fb      	adds	r3, r7, r3
 80190a6:	220c      	movs	r2, #12
 80190a8:	701a      	strb	r2, [r3, #0]

    if( RegionCommonCountChannels( NvmCtx.ChannelsMask, 0, 1 ) == 0 )
 80190aa:	4b4a      	ldr	r3, [pc, #296]	; (80191d4 <RegionEU868NextChannel+0x164>)
 80190ac:	2201      	movs	r2, #1
 80190ae:	2100      	movs	r1, #0
 80190b0:	0018      	movs	r0, r3
 80190b2:	f7fe fa1c 	bl	80174ee <RegionCommonCountChannels>
 80190b6:	1e03      	subs	r3, r0, #0
 80190b8:	d10a      	bne.n	80190d0 <RegionEU868NextChannel+0x60>
    { // Reactivate default channels
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80190ba:	4a47      	ldr	r2, [pc, #284]	; (80191d8 <RegionEU868NextChannel+0x168>)
 80190bc:	239c      	movs	r3, #156	; 0x9c
 80190be:	005b      	lsls	r3, r3, #1
 80190c0:	5ad3      	ldrh	r3, [r2, r3]
 80190c2:	2207      	movs	r2, #7
 80190c4:	4313      	orrs	r3, r2
 80190c6:	b299      	uxth	r1, r3
 80190c8:	4a43      	ldr	r2, [pc, #268]	; (80191d8 <RegionEU868NextChannel+0x168>)
 80190ca:	239c      	movs	r3, #156	; 0x9c
 80190cc:	005b      	lsls	r3, r3, #1
 80190ce:	52d1      	strh	r1, [r2, r3]
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 80190d0:	68fb      	ldr	r3, [r7, #12]
 80190d2:	7a5a      	ldrb	r2, [r3, #9]
 80190d4:	2110      	movs	r1, #16
 80190d6:	187b      	adds	r3, r7, r1
 80190d8:	701a      	strb	r2, [r3, #0]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 80190da:	68fb      	ldr	r3, [r7, #12]
 80190dc:	7a1b      	ldrb	r3, [r3, #8]
 80190de:	b25b      	sxtb	r3, r3
 80190e0:	b2da      	uxtb	r2, r3
 80190e2:	187b      	adds	r3, r7, r1
 80190e4:	705a      	strb	r2, [r3, #1]
    countChannelsParams.ChannelsMask = NvmCtx.ChannelsMask;
 80190e6:	000d      	movs	r5, r1
 80190e8:	197b      	adds	r3, r7, r5
 80190ea:	4a3a      	ldr	r2, [pc, #232]	; (80191d4 <RegionEU868NextChannel+0x164>)
 80190ec:	605a      	str	r2, [r3, #4]
    countChannelsParams.Channels = NvmCtx.Channels;
 80190ee:	197b      	adds	r3, r7, r5
 80190f0:	4a39      	ldr	r2, [pc, #228]	; (80191d8 <RegionEU868NextChannel+0x168>)
 80190f2:	609a      	str	r2, [r3, #8]
    countChannelsParams.Bands = NvmCtx.Bands;
 80190f4:	197b      	adds	r3, r7, r5
 80190f6:	4a39      	ldr	r2, [pc, #228]	; (80191dc <RegionEU868NextChannel+0x16c>)
 80190f8:	60da      	str	r2, [r3, #12]
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 80190fa:	197b      	adds	r3, r7, r5
 80190fc:	2210      	movs	r2, #16
 80190fe:	821a      	strh	r2, [r3, #16]
    countChannelsParams.JoinChannels = EU868_JOIN_CHANNELS;
 8019100:	197b      	adds	r3, r7, r5
 8019102:	2207      	movs	r2, #7
 8019104:	825a      	strh	r2, [r3, #18]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8019106:	68fb      	ldr	r3, [r7, #12]
 8019108:	681a      	ldr	r2, [r3, #0]
 801910a:	2424      	movs	r4, #36	; 0x24
 801910c:	193b      	adds	r3, r7, r4
 801910e:	601a      	str	r2, [r3, #0]
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8019110:	68fb      	ldr	r3, [r7, #12]
 8019112:	685a      	ldr	r2, [r3, #4]
 8019114:	193b      	adds	r3, r7, r4
 8019116:	605a      	str	r2, [r3, #4]
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8019118:	68fb      	ldr	r3, [r7, #12]
 801911a:	7a9a      	ldrb	r2, [r3, #10]
 801911c:	193b      	adds	r3, r7, r4
 801911e:	721a      	strb	r2, [r3, #8]
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 8019120:	193b      	adds	r3, r7, r4
 8019122:	2206      	movs	r2, #6
 8019124:	725a      	strb	r2, [r3, #9]

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8019126:	193b      	adds	r3, r7, r4
 8019128:	68fa      	ldr	r2, [r7, #12]
 801912a:	330c      	adds	r3, #12
 801912c:	320c      	adds	r2, #12
 801912e:	ca03      	ldmia	r2!, {r0, r1}
 8019130:	c303      	stmia	r3!, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8019132:	68fb      	ldr	r3, [r7, #12]
 8019134:	7d1a      	ldrb	r2, [r3, #20]
 8019136:	193b      	adds	r3, r7, r4
 8019138:	751a      	strb	r2, [r3, #20]
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 801913a:	68fb      	ldr	r3, [r7, #12]
 801913c:	2208      	movs	r2, #8
 801913e:	569a      	ldrsb	r2, [r3, r2]
 8019140:	68fb      	ldr	r3, [r7, #12]
 8019142:	8adb      	ldrh	r3, [r3, #22]
 8019144:	0019      	movs	r1, r3
 8019146:	0010      	movs	r0, r2
 8019148:	f7fe ff80 	bl	801804c <GetTimeOnAir>
 801914c:	0002      	movs	r2, r0
 801914e:	0020      	movs	r0, r4
 8019150:	183b      	adds	r3, r7, r0
 8019152:	619a      	str	r2, [r3, #24]

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8019154:	183b      	adds	r3, r7, r0
 8019156:	197a      	adds	r2, r7, r5
 8019158:	61da      	str	r2, [r3, #28]

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 801915a:	2657      	movs	r6, #87	; 0x57
 801915c:	19bc      	adds	r4, r7, r6
 801915e:	2356      	movs	r3, #86	; 0x56
 8019160:	18fd      	adds	r5, r7, r3
 8019162:	2244      	movs	r2, #68	; 0x44
 8019164:	18ba      	adds	r2, r7, r2
 8019166:	6839      	ldr	r1, [r7, #0]
 8019168:	1838      	adds	r0, r7, r0
 801916a:	687b      	ldr	r3, [r7, #4]
 801916c:	9301      	str	r3, [sp, #4]
 801916e:	2355      	movs	r3, #85	; 0x55
 8019170:	18fb      	adds	r3, r7, r3
 8019172:	9300      	str	r3, [sp, #0]
 8019174:	002b      	movs	r3, r5
 8019176:	f7fe fdbf 	bl	8017cf8 <RegionCommonIdentifyChannels>
 801917a:	0003      	movs	r3, r0
 801917c:	7023      	strb	r3, [r4, #0]
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 801917e:	19bb      	adds	r3, r7, r6
 8019180:	781b      	ldrb	r3, [r3, #0]
 8019182:	2b00      	cmp	r3, #0
 8019184:	d10e      	bne.n	80191a4 <RegionEU868NextChannel+0x134>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8019186:	2356      	movs	r3, #86	; 0x56
 8019188:	18fb      	adds	r3, r7, r3
 801918a:	781b      	ldrb	r3, [r3, #0]
 801918c:	3b01      	subs	r3, #1
 801918e:	0019      	movs	r1, r3
 8019190:	2000      	movs	r0, #0
 8019192:	f000 f9c1 	bl	8019518 <randr>
 8019196:	0002      	movs	r2, r0
 8019198:	2344      	movs	r3, #68	; 0x44
 801919a:	18fb      	adds	r3, r7, r3
 801919c:	5c9a      	ldrb	r2, [r3, r2]
 801919e:	68bb      	ldr	r3, [r7, #8]
 80191a0:	701a      	strb	r2, [r3, #0]
 80191a2:	e00f      	b.n	80191c4 <RegionEU868NextChannel+0x154>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 80191a4:	2357      	movs	r3, #87	; 0x57
 80191a6:	18fb      	adds	r3, r7, r3
 80191a8:	781b      	ldrb	r3, [r3, #0]
 80191aa:	2b0c      	cmp	r3, #12
 80191ac:	d10a      	bne.n	80191c4 <RegionEU868NextChannel+0x154>
    {
        // Datarate not supported by any channel, restore defaults
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80191ae:	4a0a      	ldr	r2, [pc, #40]	; (80191d8 <RegionEU868NextChannel+0x168>)
 80191b0:	239c      	movs	r3, #156	; 0x9c
 80191b2:	005b      	lsls	r3, r3, #1
 80191b4:	5ad3      	ldrh	r3, [r2, r3]
 80191b6:	2207      	movs	r2, #7
 80191b8:	4313      	orrs	r3, r2
 80191ba:	b299      	uxth	r1, r3
 80191bc:	4a06      	ldr	r2, [pc, #24]	; (80191d8 <RegionEU868NextChannel+0x168>)
 80191be:	239c      	movs	r3, #156	; 0x9c
 80191c0:	005b      	lsls	r3, r3, #1
 80191c2:	52d1      	strh	r1, [r2, r3]
    }
    return status;
 80191c4:	2357      	movs	r3, #87	; 0x57
 80191c6:	18fb      	adds	r3, r7, r3
 80191c8:	781b      	ldrb	r3, [r3, #0]
}
 80191ca:	0018      	movs	r0, r3
 80191cc:	46bd      	mov	sp, r7
 80191ce:	b017      	add	sp, #92	; 0x5c
 80191d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80191d2:	46c0      	nop			; (mov r8, r8)
 80191d4:	20000e78 	.word	0x20000e78
 80191d8:	20000d40 	.word	0x20000d40
 80191dc:	20000e00 	.word	0x20000e00

080191e0 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 80191e0:	b590      	push	{r4, r7, lr}
 80191e2:	b085      	sub	sp, #20
 80191e4:	af00      	add	r7, sp, #0
 80191e6:	6078      	str	r0, [r7, #4]
    uint8_t band = 0;
 80191e8:	230c      	movs	r3, #12
 80191ea:	18fb      	adds	r3, r7, r3
 80191ec:	2200      	movs	r2, #0
 80191ee:	701a      	strb	r2, [r3, #0]
    bool drInvalid = false;
 80191f0:	230f      	movs	r3, #15
 80191f2:	18fb      	adds	r3, r7, r3
 80191f4:	2200      	movs	r2, #0
 80191f6:	701a      	strb	r2, [r3, #0]
    bool freqInvalid = false;
 80191f8:	230e      	movs	r3, #14
 80191fa:	18fb      	adds	r3, r7, r3
 80191fc:	2200      	movs	r2, #0
 80191fe:	701a      	strb	r2, [r3, #0]
    uint8_t id = channelAdd->ChannelId;
 8019200:	210d      	movs	r1, #13
 8019202:	187b      	adds	r3, r7, r1
 8019204:	687a      	ldr	r2, [r7, #4]
 8019206:	7912      	ldrb	r2, [r2, #4]
 8019208:	701a      	strb	r2, [r3, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 801920a:	187b      	adds	r3, r7, r1
 801920c:	781b      	ldrb	r3, [r3, #0]
 801920e:	2b02      	cmp	r3, #2
 8019210:	d801      	bhi.n	8019216 <RegionEU868ChannelAdd+0x36>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8019212:	2306      	movs	r3, #6
 8019214:	e0a1      	b.n	801935a <RegionEU868ChannelAdd+0x17a>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8019216:	230d      	movs	r3, #13
 8019218:	18fb      	adds	r3, r7, r3
 801921a:	781b      	ldrb	r3, [r3, #0]
 801921c:	2b0f      	cmp	r3, #15
 801921e:	d901      	bls.n	8019224 <RegionEU868ChannelAdd+0x44>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8019220:	2303      	movs	r3, #3
 8019222:	e09a      	b.n	801935a <RegionEU868ChannelAdd+0x17a>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8019224:	687b      	ldr	r3, [r7, #4]
 8019226:	681b      	ldr	r3, [r3, #0]
 8019228:	7a1b      	ldrb	r3, [r3, #8]
 801922a:	011b      	lsls	r3, r3, #4
 801922c:	b25b      	sxtb	r3, r3
 801922e:	111b      	asrs	r3, r3, #4
 8019230:	b25b      	sxtb	r3, r3
 8019232:	2207      	movs	r2, #7
 8019234:	2100      	movs	r1, #0
 8019236:	0018      	movs	r0, r3
 8019238:	f7fe f8f1 	bl	801741e <RegionCommonValueInRange>
 801923c:	1e03      	subs	r3, r0, #0
 801923e:	d103      	bne.n	8019248 <RegionEU868ChannelAdd+0x68>
    {
        drInvalid = true;
 8019240:	230f      	movs	r3, #15
 8019242:	18fb      	adds	r3, r7, r3
 8019244:	2201      	movs	r2, #1
 8019246:	701a      	strb	r2, [r3, #0]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8019248:	687b      	ldr	r3, [r7, #4]
 801924a:	681b      	ldr	r3, [r3, #0]
 801924c:	7a1b      	ldrb	r3, [r3, #8]
 801924e:	b25b      	sxtb	r3, r3
 8019250:	111b      	asrs	r3, r3, #4
 8019252:	b25b      	sxtb	r3, r3
 8019254:	2207      	movs	r2, #7
 8019256:	2100      	movs	r1, #0
 8019258:	0018      	movs	r0, r3
 801925a:	f7fe f8e0 	bl	801741e <RegionCommonValueInRange>
 801925e:	1e03      	subs	r3, r0, #0
 8019260:	d103      	bne.n	801926a <RegionEU868ChannelAdd+0x8a>
    {
        drInvalid = true;
 8019262:	230f      	movs	r3, #15
 8019264:	18fb      	adds	r3, r7, r3
 8019266:	2201      	movs	r2, #1
 8019268:	701a      	strb	r2, [r3, #0]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 801926a:	687b      	ldr	r3, [r7, #4]
 801926c:	681b      	ldr	r3, [r3, #0]
 801926e:	7a1b      	ldrb	r3, [r3, #8]
 8019270:	011b      	lsls	r3, r3, #4
 8019272:	b25b      	sxtb	r3, r3
 8019274:	111b      	asrs	r3, r3, #4
 8019276:	b25a      	sxtb	r2, r3
 8019278:	687b      	ldr	r3, [r7, #4]
 801927a:	681b      	ldr	r3, [r3, #0]
 801927c:	7a1b      	ldrb	r3, [r3, #8]
 801927e:	b25b      	sxtb	r3, r3
 8019280:	111b      	asrs	r3, r3, #4
 8019282:	b25b      	sxtb	r3, r3
 8019284:	429a      	cmp	r2, r3
 8019286:	dd03      	ble.n	8019290 <RegionEU868ChannelAdd+0xb0>
    {
        drInvalid = true;
 8019288:	230f      	movs	r3, #15
 801928a:	18fb      	adds	r3, r7, r3
 801928c:	2201      	movs	r2, #1
 801928e:	701a      	strb	r2, [r3, #0]
    }

    // Check frequency
    if( freqInvalid == false )
 8019290:	240e      	movs	r4, #14
 8019292:	193b      	adds	r3, r7, r4
 8019294:	781b      	ldrb	r3, [r3, #0]
 8019296:	2201      	movs	r2, #1
 8019298:	4053      	eors	r3, r2
 801929a:	b2db      	uxtb	r3, r3
 801929c:	2b00      	cmp	r3, #0
 801929e:	d012      	beq.n	80192c6 <RegionEU868ChannelAdd+0xe6>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 80192a0:	687b      	ldr	r3, [r7, #4]
 80192a2:	681b      	ldr	r3, [r3, #0]
 80192a4:	681b      	ldr	r3, [r3, #0]
 80192a6:	220c      	movs	r2, #12
 80192a8:	18ba      	adds	r2, r7, r2
 80192aa:	0011      	movs	r1, r2
 80192ac:	0018      	movs	r0, r3
 80192ae:	f7fe fe55 	bl	8017f5c <VerifyRfFreq>
 80192b2:	0003      	movs	r3, r0
 80192b4:	001a      	movs	r2, r3
 80192b6:	2301      	movs	r3, #1
 80192b8:	4053      	eors	r3, r2
 80192ba:	b2db      	uxtb	r3, r3
 80192bc:	2b00      	cmp	r3, #0
 80192be:	d002      	beq.n	80192c6 <RegionEU868ChannelAdd+0xe6>
        {
            freqInvalid = true;
 80192c0:	193b      	adds	r3, r7, r4
 80192c2:	2201      	movs	r2, #1
 80192c4:	701a      	strb	r2, [r3, #0]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 80192c6:	230f      	movs	r3, #15
 80192c8:	18fb      	adds	r3, r7, r3
 80192ca:	781b      	ldrb	r3, [r3, #0]
 80192cc:	2b00      	cmp	r3, #0
 80192ce:	d006      	beq.n	80192de <RegionEU868ChannelAdd+0xfe>
 80192d0:	230e      	movs	r3, #14
 80192d2:	18fb      	adds	r3, r7, r3
 80192d4:	781b      	ldrb	r3, [r3, #0]
 80192d6:	2b00      	cmp	r3, #0
 80192d8:	d001      	beq.n	80192de <RegionEU868ChannelAdd+0xfe>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80192da:	2306      	movs	r3, #6
 80192dc:	e03d      	b.n	801935a <RegionEU868ChannelAdd+0x17a>
    }
    if( drInvalid == true )
 80192de:	230f      	movs	r3, #15
 80192e0:	18fb      	adds	r3, r7, r3
 80192e2:	781b      	ldrb	r3, [r3, #0]
 80192e4:	2b00      	cmp	r3, #0
 80192e6:	d001      	beq.n	80192ec <RegionEU868ChannelAdd+0x10c>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 80192e8:	2305      	movs	r3, #5
 80192ea:	e036      	b.n	801935a <RegionEU868ChannelAdd+0x17a>
    }
    if( freqInvalid == true )
 80192ec:	230e      	movs	r3, #14
 80192ee:	18fb      	adds	r3, r7, r3
 80192f0:	781b      	ldrb	r3, [r3, #0]
 80192f2:	2b00      	cmp	r3, #0
 80192f4:	d001      	beq.n	80192fa <RegionEU868ChannelAdd+0x11a>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 80192f6:	2304      	movs	r3, #4
 80192f8:	e02f      	b.n	801935a <RegionEU868ChannelAdd+0x17a>
    }

    memcpy1( ( uint8_t* ) &(NvmCtx.Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( NvmCtx.Channels[id] ) );
 80192fa:	240d      	movs	r4, #13
 80192fc:	193b      	adds	r3, r7, r4
 80192fe:	781a      	ldrb	r2, [r3, #0]
 8019300:	0013      	movs	r3, r2
 8019302:	005b      	lsls	r3, r3, #1
 8019304:	189b      	adds	r3, r3, r2
 8019306:	009b      	lsls	r3, r3, #2
 8019308:	4a16      	ldr	r2, [pc, #88]	; (8019364 <RegionEU868ChannelAdd+0x184>)
 801930a:	1898      	adds	r0, r3, r2
 801930c:	687b      	ldr	r3, [r7, #4]
 801930e:	681b      	ldr	r3, [r3, #0]
 8019310:	220c      	movs	r2, #12
 8019312:	0019      	movs	r1, r3
 8019314:	f000 f916 	bl	8019544 <memcpy1>
    NvmCtx.Channels[id].Band = band;
 8019318:	193b      	adds	r3, r7, r4
 801931a:	781a      	ldrb	r2, [r3, #0]
 801931c:	230c      	movs	r3, #12
 801931e:	18fb      	adds	r3, r7, r3
 8019320:	7818      	ldrb	r0, [r3, #0]
 8019322:	4910      	ldr	r1, [pc, #64]	; (8019364 <RegionEU868ChannelAdd+0x184>)
 8019324:	0013      	movs	r3, r2
 8019326:	005b      	lsls	r3, r3, #1
 8019328:	189b      	adds	r3, r3, r2
 801932a:	009b      	lsls	r3, r3, #2
 801932c:	18cb      	adds	r3, r1, r3
 801932e:	3309      	adds	r3, #9
 8019330:	1c02      	adds	r2, r0, #0
 8019332:	701a      	strb	r2, [r3, #0]
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
 8019334:	4a0b      	ldr	r2, [pc, #44]	; (8019364 <RegionEU868ChannelAdd+0x184>)
 8019336:	239c      	movs	r3, #156	; 0x9c
 8019338:	005b      	lsls	r3, r3, #1
 801933a:	5ad3      	ldrh	r3, [r2, r3]
 801933c:	b21a      	sxth	r2, r3
 801933e:	193b      	adds	r3, r7, r4
 8019340:	781b      	ldrb	r3, [r3, #0]
 8019342:	2101      	movs	r1, #1
 8019344:	4099      	lsls	r1, r3
 8019346:	000b      	movs	r3, r1
 8019348:	b21b      	sxth	r3, r3
 801934a:	4313      	orrs	r3, r2
 801934c:	b21b      	sxth	r3, r3
 801934e:	b299      	uxth	r1, r3
 8019350:	4a04      	ldr	r2, [pc, #16]	; (8019364 <RegionEU868ChannelAdd+0x184>)
 8019352:	239c      	movs	r3, #156	; 0x9c
 8019354:	005b      	lsls	r3, r3, #1
 8019356:	52d1      	strh	r1, [r2, r3]
    return LORAMAC_STATUS_OK;
 8019358:	2300      	movs	r3, #0
}
 801935a:	0018      	movs	r0, r3
 801935c:	46bd      	mov	sp, r7
 801935e:	b005      	add	sp, #20
 8019360:	bd90      	pop	{r4, r7, pc}
 8019362:	46c0      	nop			; (mov r8, r8)
 8019364:	20000d40 	.word	0x20000d40

08019368 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8019368:	b590      	push	{r4, r7, lr}
 801936a:	b087      	sub	sp, #28
 801936c:	af00      	add	r7, sp, #0
 801936e:	6078      	str	r0, [r7, #4]
    uint8_t id = channelRemove->ChannelId;
 8019370:	2117      	movs	r1, #23
 8019372:	187b      	adds	r3, r7, r1
 8019374:	687a      	ldr	r2, [r7, #4]
 8019376:	7812      	ldrb	r2, [r2, #0]
 8019378:	701a      	strb	r2, [r3, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 801937a:	187b      	adds	r3, r7, r1
 801937c:	781b      	ldrb	r3, [r3, #0]
 801937e:	2b02      	cmp	r3, #2
 8019380:	d801      	bhi.n	8019386 <RegionEU868ChannelsRemove+0x1e>
    {
        return false;
 8019382:	2300      	movs	r3, #0
 8019384:	e015      	b.n	80193b2 <RegionEU868ChannelsRemove+0x4a>
    }

    // Remove the channel from the list of channels
    NvmCtx.Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8019386:	2417      	movs	r4, #23
 8019388:	193b      	adds	r3, r7, r4
 801938a:	781a      	ldrb	r2, [r3, #0]
 801938c:	490b      	ldr	r1, [pc, #44]	; (80193bc <RegionEU868ChannelsRemove+0x54>)
 801938e:	0013      	movs	r3, r2
 8019390:	005b      	lsls	r3, r3, #1
 8019392:	189b      	adds	r3, r3, r2
 8019394:	009b      	lsls	r3, r3, #2
 8019396:	18cb      	adds	r3, r1, r3
 8019398:	220c      	movs	r2, #12
 801939a:	2100      	movs	r1, #0
 801939c:	0018      	movs	r0, r3
 801939e:	f004 fe2e 	bl	801dffe <memset>

    return RegionCommonChanDisable( NvmCtx.ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 80193a2:	193b      	adds	r3, r7, r4
 80193a4:	7819      	ldrb	r1, [r3, #0]
 80193a6:	4b06      	ldr	r3, [pc, #24]	; (80193c0 <RegionEU868ChannelsRemove+0x58>)
 80193a8:	2210      	movs	r2, #16
 80193aa:	0018      	movs	r0, r3
 80193ac:	f7fe f85d 	bl	801746a <RegionCommonChanDisable>
 80193b0:	0003      	movs	r3, r0
}
 80193b2:	0018      	movs	r0, r3
 80193b4:	46bd      	mov	sp, r7
 80193b6:	b007      	add	sp, #28
 80193b8:	bd90      	pop	{r4, r7, pc}
 80193ba:	46c0      	nop			; (mov r8, r8)
 80193bc:	20000d40 	.word	0x20000d40
 80193c0:	20000e78 	.word	0x20000e78

080193c4 <RegionEU868SetContinuousWave>:

void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 80193c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80193c6:	b085      	sub	sp, #20
 80193c8:	af00      	add	r7, sp, #0
 80193ca:	6078      	str	r0, [r7, #4]
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 80193cc:	687b      	ldr	r3, [r7, #4]
 80193ce:	2002      	movs	r0, #2
 80193d0:	5618      	ldrsb	r0, [r3, r0]
 80193d2:	687b      	ldr	r3, [r7, #4]
 80193d4:	781b      	ldrb	r3, [r3, #0]
 80193d6:	0019      	movs	r1, r3
 80193d8:	4a23      	ldr	r2, [pc, #140]	; (8019468 <RegionEU868SetContinuousWave+0xa4>)
 80193da:	000b      	movs	r3, r1
 80193dc:	005b      	lsls	r3, r3, #1
 80193de:	185b      	adds	r3, r3, r1
 80193e0:	009b      	lsls	r3, r3, #2
 80193e2:	18d3      	adds	r3, r2, r3
 80193e4:	3309      	adds	r3, #9
 80193e6:	781b      	ldrb	r3, [r3, #0]
 80193e8:	001c      	movs	r4, r3
 80193ea:	4a1f      	ldr	r2, [pc, #124]	; (8019468 <RegionEU868SetContinuousWave+0xa4>)
 80193ec:	21c2      	movs	r1, #194	; 0xc2
 80193ee:	0023      	movs	r3, r4
 80193f0:	009b      	lsls	r3, r3, #2
 80193f2:	191b      	adds	r3, r3, r4
 80193f4:	009b      	lsls	r3, r3, #2
 80193f6:	18d3      	adds	r3, r2, r3
 80193f8:	185b      	adds	r3, r3, r1
 80193fa:	2100      	movs	r1, #0
 80193fc:	5659      	ldrsb	r1, [r3, r1]
 80193fe:	687b      	ldr	r3, [r7, #4]
 8019400:	2201      	movs	r2, #1
 8019402:	569a      	ldrsb	r2, [r3, r2]
 8019404:	260f      	movs	r6, #15
 8019406:	19bc      	adds	r4, r7, r6
 8019408:	4b18      	ldr	r3, [pc, #96]	; (801946c <RegionEU868SetContinuousWave+0xa8>)
 801940a:	f7fe fd7f 	bl	8017f0c <LimitTxPower>
 801940e:	0003      	movs	r3, r0
 8019410:	7023      	strb	r3, [r4, #0]
    int8_t phyTxPower = 0;
 8019412:	200e      	movs	r0, #14
 8019414:	183b      	adds	r3, r7, r0
 8019416:	2200      	movs	r2, #0
 8019418:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = NvmCtx.Channels[continuousWave->Channel].Frequency;
 801941a:	687b      	ldr	r3, [r7, #4]
 801941c:	781b      	ldrb	r3, [r3, #0]
 801941e:	0019      	movs	r1, r3
 8019420:	4a11      	ldr	r2, [pc, #68]	; (8019468 <RegionEU868SetContinuousWave+0xa4>)
 8019422:	000b      	movs	r3, r1
 8019424:	005b      	lsls	r3, r3, #1
 8019426:	185b      	adds	r3, r3, r1
 8019428:	009b      	lsls	r3, r3, #2
 801942a:	589b      	ldr	r3, [r3, r2]
 801942c:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 801942e:	687b      	ldr	r3, [r7, #4]
 8019430:	6859      	ldr	r1, [r3, #4]
 8019432:	687b      	ldr	r3, [r7, #4]
 8019434:	689a      	ldr	r2, [r3, #8]
 8019436:	0005      	movs	r5, r0
 8019438:	183c      	adds	r4, r7, r0
 801943a:	19bb      	adds	r3, r7, r6
 801943c:	781b      	ldrb	r3, [r3, #0]
 801943e:	b25b      	sxtb	r3, r3
 8019440:	0018      	movs	r0, r3
 8019442:	f7fe fb31 	bl	8017aa8 <RegionCommonComputeTxPower>
 8019446:	0003      	movs	r3, r0
 8019448:	7023      	strb	r3, [r4, #0]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 801944a:	4b09      	ldr	r3, [pc, #36]	; (8019470 <RegionEU868SetContinuousWave+0xac>)
 801944c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801944e:	687a      	ldr	r2, [r7, #4]
 8019450:	8994      	ldrh	r4, [r2, #12]
 8019452:	197a      	adds	r2, r7, r5
 8019454:	2100      	movs	r1, #0
 8019456:	5651      	ldrsb	r1, [r2, r1]
 8019458:	68b8      	ldr	r0, [r7, #8]
 801945a:	0022      	movs	r2, r4
 801945c:	4798      	blx	r3
}
 801945e:	46c0      	nop			; (mov r8, r8)
 8019460:	46bd      	mov	sp, r7
 8019462:	b005      	add	sp, #20
 8019464:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019466:	46c0      	nop			; (mov r8, r8)
 8019468:	20000d40 	.word	0x20000d40
 801946c:	20000e78 	.word	0x20000e78
 8019470:	0801fb64 	.word	0x0801fb64

08019474 <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8019474:	b590      	push	{r4, r7, lr}
 8019476:	b085      	sub	sp, #20
 8019478:	af00      	add	r7, sp, #0
 801947a:	0004      	movs	r4, r0
 801947c:	0008      	movs	r0, r1
 801947e:	0011      	movs	r1, r2
 8019480:	1dfb      	adds	r3, r7, #7
 8019482:	1c22      	adds	r2, r4, #0
 8019484:	701a      	strb	r2, [r3, #0]
 8019486:	1dbb      	adds	r3, r7, #6
 8019488:	1c02      	adds	r2, r0, #0
 801948a:	701a      	strb	r2, [r3, #0]
 801948c:	1d7b      	adds	r3, r7, #5
 801948e:	1c0a      	adds	r2, r1, #0
 8019490:	701a      	strb	r2, [r3, #0]
    int8_t datarate = dr - drOffset;
 8019492:	1dbb      	adds	r3, r7, #6
 8019494:	781a      	ldrb	r2, [r3, #0]
 8019496:	1d7b      	adds	r3, r7, #5
 8019498:	781b      	ldrb	r3, [r3, #0]
 801949a:	1ad3      	subs	r3, r2, r3
 801949c:	b2da      	uxtb	r2, r3
 801949e:	210f      	movs	r1, #15
 80194a0:	187b      	adds	r3, r7, r1
 80194a2:	701a      	strb	r2, [r3, #0]

    if( datarate < 0 )
 80194a4:	000a      	movs	r2, r1
 80194a6:	18bb      	adds	r3, r7, r2
 80194a8:	781b      	ldrb	r3, [r3, #0]
 80194aa:	2b7f      	cmp	r3, #127	; 0x7f
 80194ac:	d902      	bls.n	80194b4 <RegionEU868ApplyDrOffset+0x40>
    {
        datarate = DR_0;
 80194ae:	18bb      	adds	r3, r7, r2
 80194b0:	2200      	movs	r2, #0
 80194b2:	701a      	strb	r2, [r3, #0]
    }
    return datarate;
 80194b4:	230f      	movs	r3, #15
 80194b6:	18fb      	adds	r3, r7, r3
 80194b8:	781b      	ldrb	r3, [r3, #0]
}
 80194ba:	0018      	movs	r0, r3
 80194bc:	46bd      	mov	sp, r7
 80194be:	b005      	add	sp, #20
 80194c0:	bd90      	pop	{r4, r7, pc}
	...

080194c4 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 80194c4:	b580      	push	{r7, lr}
 80194c6:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 80194c8:	4b08      	ldr	r3, [pc, #32]	; (80194ec <rand1+0x28>)
 80194ca:	681b      	ldr	r3, [r3, #0]
 80194cc:	4a08      	ldr	r2, [pc, #32]	; (80194f0 <rand1+0x2c>)
 80194ce:	4353      	muls	r3, r2
 80194d0:	4a08      	ldr	r2, [pc, #32]	; (80194f4 <rand1+0x30>)
 80194d2:	189a      	adds	r2, r3, r2
 80194d4:	4b05      	ldr	r3, [pc, #20]	; (80194ec <rand1+0x28>)
 80194d6:	601a      	str	r2, [r3, #0]
 80194d8:	4b04      	ldr	r3, [pc, #16]	; (80194ec <rand1+0x28>)
 80194da:	681b      	ldr	r3, [r3, #0]
 80194dc:	4906      	ldr	r1, [pc, #24]	; (80194f8 <rand1+0x34>)
 80194de:	0018      	movs	r0, r3
 80194e0:	f7e6 feaa 	bl	8000238 <__aeabi_uidivmod>
 80194e4:	000b      	movs	r3, r1
}
 80194e6:	0018      	movs	r0, r3
 80194e8:	46bd      	mov	sp, r7
 80194ea:	bd80      	pop	{r7, pc}
 80194ec:	200001ac 	.word	0x200001ac
 80194f0:	41c64e6d 	.word	0x41c64e6d
 80194f4:	00003039 	.word	0x00003039
 80194f8:	7fffffff 	.word	0x7fffffff

080194fc <srand1>:

void srand1( uint32_t seed )
{
 80194fc:	b580      	push	{r7, lr}
 80194fe:	b082      	sub	sp, #8
 8019500:	af00      	add	r7, sp, #0
 8019502:	6078      	str	r0, [r7, #4]
    next = seed;
 8019504:	4b03      	ldr	r3, [pc, #12]	; (8019514 <srand1+0x18>)
 8019506:	687a      	ldr	r2, [r7, #4]
 8019508:	601a      	str	r2, [r3, #0]
}
 801950a:	46c0      	nop			; (mov r8, r8)
 801950c:	46bd      	mov	sp, r7
 801950e:	b002      	add	sp, #8
 8019510:	bd80      	pop	{r7, pc}
 8019512:	46c0      	nop			; (mov r8, r8)
 8019514:	200001ac 	.word	0x200001ac

08019518 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8019518:	b580      	push	{r7, lr}
 801951a:	b082      	sub	sp, #8
 801951c:	af00      	add	r7, sp, #0
 801951e:	6078      	str	r0, [r7, #4]
 8019520:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8019522:	f7ff ffcf 	bl	80194c4 <rand1>
 8019526:	683a      	ldr	r2, [r7, #0]
 8019528:	687b      	ldr	r3, [r7, #4]
 801952a:	1ad3      	subs	r3, r2, r3
 801952c:	3301      	adds	r3, #1
 801952e:	0019      	movs	r1, r3
 8019530:	f7e6 ff6c 	bl	800040c <__aeabi_idivmod>
 8019534:	000b      	movs	r3, r1
 8019536:	001a      	movs	r2, r3
 8019538:	687b      	ldr	r3, [r7, #4]
 801953a:	18d3      	adds	r3, r2, r3
}
 801953c:	0018      	movs	r0, r3
 801953e:	46bd      	mov	sp, r7
 8019540:	b002      	add	sp, #8
 8019542:	bd80      	pop	{r7, pc}

08019544 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8019544:	b580      	push	{r7, lr}
 8019546:	b084      	sub	sp, #16
 8019548:	af00      	add	r7, sp, #0
 801954a:	60f8      	str	r0, [r7, #12]
 801954c:	60b9      	str	r1, [r7, #8]
 801954e:	1dbb      	adds	r3, r7, #6
 8019550:	801a      	strh	r2, [r3, #0]
    while( size-- )
 8019552:	e007      	b.n	8019564 <memcpy1+0x20>
    {
        *dst++ = *src++;
 8019554:	68ba      	ldr	r2, [r7, #8]
 8019556:	1c53      	adds	r3, r2, #1
 8019558:	60bb      	str	r3, [r7, #8]
 801955a:	68fb      	ldr	r3, [r7, #12]
 801955c:	1c59      	adds	r1, r3, #1
 801955e:	60f9      	str	r1, [r7, #12]
 8019560:	7812      	ldrb	r2, [r2, #0]
 8019562:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8019564:	1dbb      	adds	r3, r7, #6
 8019566:	881b      	ldrh	r3, [r3, #0]
 8019568:	1dba      	adds	r2, r7, #6
 801956a:	1e59      	subs	r1, r3, #1
 801956c:	8011      	strh	r1, [r2, #0]
 801956e:	2b00      	cmp	r3, #0
 8019570:	d1f0      	bne.n	8019554 <memcpy1+0x10>
    }
}
 8019572:	46c0      	nop			; (mov r8, r8)
 8019574:	46c0      	nop			; (mov r8, r8)
 8019576:	46bd      	mov	sp, r7
 8019578:	b004      	add	sp, #16
 801957a:	bd80      	pop	{r7, pc}

0801957c <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801957c:	b580      	push	{r7, lr}
 801957e:	b084      	sub	sp, #16
 8019580:	af00      	add	r7, sp, #0
 8019582:	60f8      	str	r0, [r7, #12]
 8019584:	60b9      	str	r1, [r7, #8]
 8019586:	1dbb      	adds	r3, r7, #6
 8019588:	801a      	strh	r2, [r3, #0]
    dst = dst + ( size - 1 );
 801958a:	1dbb      	adds	r3, r7, #6
 801958c:	881b      	ldrh	r3, [r3, #0]
 801958e:	3b01      	subs	r3, #1
 8019590:	68fa      	ldr	r2, [r7, #12]
 8019592:	18d3      	adds	r3, r2, r3
 8019594:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8019596:	e007      	b.n	80195a8 <memcpyr+0x2c>
    {
        *dst-- = *src++;
 8019598:	68ba      	ldr	r2, [r7, #8]
 801959a:	1c53      	adds	r3, r2, #1
 801959c:	60bb      	str	r3, [r7, #8]
 801959e:	68fb      	ldr	r3, [r7, #12]
 80195a0:	1e59      	subs	r1, r3, #1
 80195a2:	60f9      	str	r1, [r7, #12]
 80195a4:	7812      	ldrb	r2, [r2, #0]
 80195a6:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80195a8:	1dbb      	adds	r3, r7, #6
 80195aa:	881b      	ldrh	r3, [r3, #0]
 80195ac:	1dba      	adds	r2, r7, #6
 80195ae:	1e59      	subs	r1, r3, #1
 80195b0:	8011      	strh	r1, [r2, #0]
 80195b2:	2b00      	cmp	r3, #0
 80195b4:	d1f0      	bne.n	8019598 <memcpyr+0x1c>
    }
}
 80195b6:	46c0      	nop			; (mov r8, r8)
 80195b8:	46c0      	nop			; (mov r8, r8)
 80195ba:	46bd      	mov	sp, r7
 80195bc:	b004      	add	sp, #16
 80195be:	bd80      	pop	{r7, pc}

080195c0 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 80195c0:	b580      	push	{r7, lr}
 80195c2:	b082      	sub	sp, #8
 80195c4:	af00      	add	r7, sp, #0
 80195c6:	6078      	str	r0, [r7, #4]
 80195c8:	0008      	movs	r0, r1
 80195ca:	0011      	movs	r1, r2
 80195cc:	1cfb      	adds	r3, r7, #3
 80195ce:	1c02      	adds	r2, r0, #0
 80195d0:	701a      	strb	r2, [r3, #0]
 80195d2:	003b      	movs	r3, r7
 80195d4:	1c0a      	adds	r2, r1, #0
 80195d6:	801a      	strh	r2, [r3, #0]
    while( size-- )
 80195d8:	e005      	b.n	80195e6 <memset1+0x26>
    {
        *dst++ = value;
 80195da:	687b      	ldr	r3, [r7, #4]
 80195dc:	1c5a      	adds	r2, r3, #1
 80195de:	607a      	str	r2, [r7, #4]
 80195e0:	1cfa      	adds	r2, r7, #3
 80195e2:	7812      	ldrb	r2, [r2, #0]
 80195e4:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80195e6:	003b      	movs	r3, r7
 80195e8:	881b      	ldrh	r3, [r3, #0]
 80195ea:	003a      	movs	r2, r7
 80195ec:	1e59      	subs	r1, r3, #1
 80195ee:	8011      	strh	r1, [r2, #0]
 80195f0:	2b00      	cmp	r3, #0
 80195f2:	d1f2      	bne.n	80195da <memset1+0x1a>
    }
}
 80195f4:	46c0      	nop			; (mov r8, r8)
 80195f6:	46c0      	nop			; (mov r8, r8)
 80195f8:	46bd      	mov	sp, r7
 80195fa:	b002      	add	sp, #8
 80195fc:	bd80      	pop	{r7, pc}
	...

08019600 <SX1276Init>:
/*
 * Radio driver functions implementation
 */

uint32_t SX1276Init( RadioEvents_t *events )
{
 8019600:	b590      	push	{r4, r7, lr}
 8019602:	b087      	sub	sp, #28
 8019604:	af02      	add	r7, sp, #8
 8019606:	6078      	str	r0, [r7, #4]
    uint8_t i;

    RadioEvents = events;
 8019608:	4b34      	ldr	r3, [pc, #208]	; (80196dc <SX1276Init+0xdc>)
 801960a:	687a      	ldr	r2, [r7, #4]
 801960c:	601a      	str	r2, [r3, #0]

    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 801960e:	4b34      	ldr	r3, [pc, #208]	; (80196e0 <SX1276Init+0xe0>)
 8019610:	2201      	movs	r2, #1
 8019612:	4251      	negs	r1, r2
 8019614:	4833      	ldr	r0, [pc, #204]	; (80196e4 <SX1276Init+0xe4>)
 8019616:	2200      	movs	r2, #0
 8019618:	9200      	str	r2, [sp, #0]
 801961a:	2200      	movs	r2, #0
 801961c:	f003 fa9a 	bl	801cb54 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 8019620:	4b2f      	ldr	r3, [pc, #188]	; (80196e0 <SX1276Init+0xe0>)
 8019622:	2201      	movs	r2, #1
 8019624:	4251      	negs	r1, r2
 8019626:	4830      	ldr	r0, [pc, #192]	; (80196e8 <SX1276Init+0xe8>)
 8019628:	2200      	movs	r2, #0
 801962a:	9200      	str	r2, [sp, #0]
 801962c:	2200      	movs	r2, #0
 801962e:	f003 fa91 	bl	801cb54 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 8019632:	4b2b      	ldr	r3, [pc, #172]	; (80196e0 <SX1276Init+0xe0>)
 8019634:	2201      	movs	r2, #1
 8019636:	4251      	negs	r1, r2
 8019638:	482c      	ldr	r0, [pc, #176]	; (80196ec <SX1276Init+0xec>)
 801963a:	2200      	movs	r2, #0
 801963c:	9200      	str	r2, [sp, #0]
 801963e:	2200      	movs	r2, #0
 8019640:	f003 fa88 	bl	801cb54 <UTIL_TIMER_Create>

    Sx_Board_SetXO( SET );
 8019644:	2001      	movs	r0, #1
 8019646:	f7ec fbe7 	bl	8005e18 <CMWX1ZZABZ0XX_RADIO_SetXO>

    SX1276Reset( );
 801964a:	f001 fbf1 	bl	801ae30 <SX1276Reset>

    RxChainCalibration( );
 801964e:	f000 f937 	bl	80198c0 <RxChainCalibration>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 8019652:	2000      	movs	r0, #0
 8019654:	f001 fbf3 	bl	801ae3e <SX1276SetOpMode>

    Sx_Board_IoIrqInit( DioIrq );
 8019658:	4b25      	ldr	r3, [pc, #148]	; (80196f0 <SX1276Init+0xf0>)
 801965a:	0018      	movs	r0, r3
 801965c:	f7ec fd3c 	bl	80060d8 <CMWX1ZZABZ0XX_RADIO_IoIrqInit>

    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8019660:	230f      	movs	r3, #15
 8019662:	18fb      	adds	r3, r7, r3
 8019664:	2200      	movs	r2, #0
 8019666:	701a      	strb	r2, [r3, #0]
 8019668:	e025      	b.n	80196b6 <SX1276Init+0xb6>
    {
        SX1276SetModem( RadioRegsInit[i].Modem );
 801966a:	240f      	movs	r4, #15
 801966c:	193b      	adds	r3, r7, r4
 801966e:	781a      	ldrb	r2, [r3, #0]
 8019670:	4920      	ldr	r1, [pc, #128]	; (80196f4 <SX1276Init+0xf4>)
 8019672:	0013      	movs	r3, r2
 8019674:	005b      	lsls	r3, r3, #1
 8019676:	189b      	adds	r3, r3, r2
 8019678:	5c5b      	ldrb	r3, [r3, r1]
 801967a:	0018      	movs	r0, r3
 801967c:	f001 fc4c 	bl	801af18 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8019680:	193b      	adds	r3, r7, r4
 8019682:	781a      	ldrb	r2, [r3, #0]
 8019684:	491b      	ldr	r1, [pc, #108]	; (80196f4 <SX1276Init+0xf4>)
 8019686:	0013      	movs	r3, r2
 8019688:	005b      	lsls	r3, r3, #1
 801968a:	189b      	adds	r3, r3, r2
 801968c:	18cb      	adds	r3, r1, r3
 801968e:	3301      	adds	r3, #1
 8019690:	781b      	ldrb	r3, [r3, #0]
 8019692:	0018      	movs	r0, r3
 8019694:	193b      	adds	r3, r7, r4
 8019696:	781a      	ldrb	r2, [r3, #0]
 8019698:	4916      	ldr	r1, [pc, #88]	; (80196f4 <SX1276Init+0xf4>)
 801969a:	0013      	movs	r3, r2
 801969c:	005b      	lsls	r3, r3, #1
 801969e:	189b      	adds	r3, r3, r2
 80196a0:	18cb      	adds	r3, r1, r3
 80196a2:	3302      	adds	r3, #2
 80196a4:	781b      	ldrb	r3, [r3, #0]
 80196a6:	0019      	movs	r1, r3
 80196a8:	f001 fc90 	bl	801afcc <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 80196ac:	193b      	adds	r3, r7, r4
 80196ae:	781a      	ldrb	r2, [r3, #0]
 80196b0:	193b      	adds	r3, r7, r4
 80196b2:	3201      	adds	r2, #1
 80196b4:	701a      	strb	r2, [r3, #0]
 80196b6:	230f      	movs	r3, #15
 80196b8:	18fb      	adds	r3, r7, r3
 80196ba:	781b      	ldrb	r3, [r3, #0]
 80196bc:	2b0f      	cmp	r3, #15
 80196be:	d9d4      	bls.n	801966a <SX1276Init+0x6a>
    }

    SX1276SetModem( MODEM_FSK );
 80196c0:	2000      	movs	r0, #0
 80196c2:	f001 fc29 	bl	801af18 <SX1276SetModem>

    SX1276.Settings.State = RF_IDLE;
 80196c6:	4b0c      	ldr	r3, [pc, #48]	; (80196f8 <SX1276Init+0xf8>)
 80196c8:	2200      	movs	r2, #0
 80196ca:	711a      	strb	r2, [r3, #4]

    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
 80196cc:	f7ec fb9e 	bl	8005e0c <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>
 80196d0:	0003      	movs	r3, r0
 80196d2:	3302      	adds	r3, #2
}
 80196d4:	0018      	movs	r0, r3
 80196d6:	46bd      	mov	sp, r7
 80196d8:	b005      	add	sp, #20
 80196da:	bd90      	pop	{r4, r7, pc}
 80196dc:	20000e7c 	.word	0x20000e7c
 80196e0:	0801b445 	.word	0x0801b445
 80196e4:	200016f4 	.word	0x200016f4
 80196e8:	2000178c 	.word	0x2000178c
 80196ec:	2000170c 	.word	0x2000170c
 80196f0:	200001b0 	.word	0x200001b0
 80196f4:	0801fbd0 	.word	0x0801fbd0
 80196f8:	20001724 	.word	0x20001724

080196fc <SX1276GetStatus>:

RadioState_t SX1276GetStatus( void )
{
 80196fc:	b580      	push	{r7, lr}
 80196fe:	af00      	add	r7, sp, #0
    return SX1276.Settings.State;
 8019700:	4b02      	ldr	r3, [pc, #8]	; (801970c <SX1276GetStatus+0x10>)
 8019702:	791b      	ldrb	r3, [r3, #4]
}
 8019704:	0018      	movs	r0, r3
 8019706:	46bd      	mov	sp, r7
 8019708:	bd80      	pop	{r7, pc}
 801970a:	46c0      	nop			; (mov r8, r8)
 801970c:	20001724 	.word	0x20001724

08019710 <SX1276SetChannel>:

void SX1276SetChannel( uint32_t freq )
{
 8019710:	b590      	push	{r4, r7, lr}
 8019712:	b087      	sub	sp, #28
 8019714:	af00      	add	r7, sp, #0
 8019716:	6078      	str	r0, [r7, #4]
    uint32_t channel;

    SX1276.Settings.Channel = freq;
 8019718:	4b1d      	ldr	r3, [pc, #116]	; (8019790 <SX1276SetChannel+0x80>)
 801971a:	687a      	ldr	r2, [r7, #4]
 801971c:	609a      	str	r2, [r3, #8]

    SX_FREQ_TO_CHANNEL( channel, freq );
 801971e:	687b      	ldr	r3, [r7, #4]
 8019720:	491c      	ldr	r1, [pc, #112]	; (8019794 <SX1276SetChannel+0x84>)
 8019722:	0018      	movs	r0, r3
 8019724:	f7e6 fd02 	bl	800012c <__udivsi3>
 8019728:	0003      	movs	r3, r0
 801972a:	617b      	str	r3, [r7, #20]
 801972c:	6979      	ldr	r1, [r7, #20]
 801972e:	000b      	movs	r3, r1
 8019730:	015b      	lsls	r3, r3, #5
 8019732:	1a5b      	subs	r3, r3, r1
 8019734:	019a      	lsls	r2, r3, #6
 8019736:	1ad2      	subs	r2, r2, r3
 8019738:	00d2      	lsls	r2, r2, #3
 801973a:	1853      	adds	r3, r2, r1
 801973c:	687a      	ldr	r2, [r7, #4]
 801973e:	1ad3      	subs	r3, r2, r3
 8019740:	613b      	str	r3, [r7, #16]
 8019742:	697b      	ldr	r3, [r7, #20]
 8019744:	021c      	lsls	r4, r3, #8
 8019746:	693b      	ldr	r3, [r7, #16]
 8019748:	021b      	lsls	r3, r3, #8
 801974a:	4a13      	ldr	r2, [pc, #76]	; (8019798 <SX1276SetChannel+0x88>)
 801974c:	4694      	mov	ip, r2
 801974e:	4463      	add	r3, ip
 8019750:	4910      	ldr	r1, [pc, #64]	; (8019794 <SX1276SetChannel+0x84>)
 8019752:	0018      	movs	r0, r3
 8019754:	f7e6 fcea 	bl	800012c <__udivsi3>
 8019758:	0003      	movs	r3, r0
 801975a:	18e3      	adds	r3, r4, r3
 801975c:	60fb      	str	r3, [r7, #12]

    SX1276Write( REG_FRFMSB, ( uint8_t )( ( channel >> 16 ) & 0xFF ) );
 801975e:	68fb      	ldr	r3, [r7, #12]
 8019760:	0c1b      	lsrs	r3, r3, #16
 8019762:	b2db      	uxtb	r3, r3
 8019764:	0019      	movs	r1, r3
 8019766:	2006      	movs	r0, #6
 8019768:	f001 fc30 	bl	801afcc <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( channel >> 8 ) & 0xFF ) );
 801976c:	68fb      	ldr	r3, [r7, #12]
 801976e:	0a1b      	lsrs	r3, r3, #8
 8019770:	b2db      	uxtb	r3, r3
 8019772:	0019      	movs	r1, r3
 8019774:	2007      	movs	r0, #7
 8019776:	f001 fc29 	bl	801afcc <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( channel & 0xFF ) );
 801977a:	68fb      	ldr	r3, [r7, #12]
 801977c:	b2db      	uxtb	r3, r3
 801977e:	0019      	movs	r1, r3
 8019780:	2008      	movs	r0, #8
 8019782:	f001 fc23 	bl	801afcc <SX1276Write>
}
 8019786:	46c0      	nop			; (mov r8, r8)
 8019788:	46bd      	mov	sp, r7
 801978a:	b007      	add	sp, #28
 801978c:	bd90      	pop	{r4, r7, pc}
 801978e:	46c0      	nop			; (mov r8, r8)
 8019790:	20001724 	.word	0x20001724
 8019794:	00003d09 	.word	0x00003d09
 8019798:	00001e84 	.word	0x00001e84

0801979c <SX1276IsChannelFree>:

bool SX1276IsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 801979c:	b5b0      	push	{r4, r5, r7, lr}
 801979e:	b086      	sub	sp, #24
 80197a0:	af00      	add	r7, sp, #0
 80197a2:	60f8      	str	r0, [r7, #12]
 80197a4:	60b9      	str	r1, [r7, #8]
 80197a6:	603b      	str	r3, [r7, #0]
 80197a8:	1dbb      	adds	r3, r7, #6
 80197aa:	801a      	strh	r2, [r3, #0]
    bool status = true;
 80197ac:	2317      	movs	r3, #23
 80197ae:	18fb      	adds	r3, r7, r3
 80197b0:	2201      	movs	r2, #1
 80197b2:	701a      	strb	r2, [r3, #0]
    int16_t rssi = 0;
 80197b4:	2314      	movs	r3, #20
 80197b6:	18fb      	adds	r3, r7, r3
 80197b8:	2200      	movs	r2, #0
 80197ba:	801a      	strh	r2, [r3, #0]
    uint32_t carrierSenseTime = 0;
 80197bc:	2300      	movs	r3, #0
 80197be:	613b      	str	r3, [r7, #16]

    SX1276SetSleep( );
 80197c0:	f001 f80c 	bl	801a7dc <SX1276SetSleep>

    SX1276SetModem( MODEM_FSK );
 80197c4:	2000      	movs	r0, #0
 80197c6:	f001 fba7 	bl	801af18 <SX1276SetModem>

    SX1276SetChannel( freq );
 80197ca:	68fb      	ldr	r3, [r7, #12]
 80197cc:	0018      	movs	r0, r3
 80197ce:	f7ff ff9f 	bl	8019710 <SX1276SetChannel>

    SX1276Write( REG_RXBW, GetFskBandwidthRegValue( rxBandwidth ) );
 80197d2:	68bb      	ldr	r3, [r7, #8]
 80197d4:	0018      	movs	r0, r3
 80197d6:	f001 fd07 	bl	801b1e8 <GetFskBandwidthRegValue>
 80197da:	0003      	movs	r3, r0
 80197dc:	0019      	movs	r1, r3
 80197de:	2012      	movs	r0, #18
 80197e0:	f001 fbf4 	bl	801afcc <SX1276Write>
    SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( rxBandwidth ) );
 80197e4:	68bb      	ldr	r3, [r7, #8]
 80197e6:	0018      	movs	r0, r3
 80197e8:	f001 fcfe 	bl	801b1e8 <GetFskBandwidthRegValue>
 80197ec:	0003      	movs	r3, r0
 80197ee:	0019      	movs	r1, r3
 80197f0:	2013      	movs	r0, #19
 80197f2:	f001 fbeb 	bl	801afcc <SX1276Write>

    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 80197f6:	2005      	movs	r0, #5
 80197f8:	f001 fb21 	bl	801ae3e <SX1276SetOpMode>

    RADIO_DELAY_MS( 1 );
 80197fc:	2001      	movs	r0, #1
 80197fe:	f7eb fcb0 	bl	8005162 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8019802:	f003 fb87 	bl	801cf14 <UTIL_TIMER_GetCurrentTime>
 8019806:	0003      	movs	r3, r0
 8019808:	613b      	str	r3, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801980a:	e013      	b.n	8019834 <SX1276IsChannelFree+0x98>
    {
        rssi = SX1276ReadRssi( MODEM_FSK );
 801980c:	2514      	movs	r5, #20
 801980e:	197c      	adds	r4, r7, r5
 8019810:	2000      	movs	r0, #0
 8019812:	f001 fac1 	bl	801ad98 <SX1276ReadRssi>
 8019816:	0003      	movs	r3, r0
 8019818:	8023      	strh	r3, [r4, #0]

        if( rssi > rssiThresh )
 801981a:	197a      	adds	r2, r7, r5
 801981c:	1dbb      	adds	r3, r7, #6
 801981e:	2100      	movs	r1, #0
 8019820:	5e52      	ldrsh	r2, [r2, r1]
 8019822:	2100      	movs	r1, #0
 8019824:	5e5b      	ldrsh	r3, [r3, r1]
 8019826:	429a      	cmp	r2, r3
 8019828:	dd04      	ble.n	8019834 <SX1276IsChannelFree+0x98>
        {
            status = false;
 801982a:	2317      	movs	r3, #23
 801982c:	18fb      	adds	r3, r7, r3
 801982e:	2200      	movs	r2, #0
 8019830:	701a      	strb	r2, [r3, #0]
            break;
 8019832:	e007      	b.n	8019844 <SX1276IsChannelFree+0xa8>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8019834:	693b      	ldr	r3, [r7, #16]
 8019836:	0018      	movs	r0, r3
 8019838:	f003 fb80 	bl	801cf3c <UTIL_TIMER_GetElapsedTime>
 801983c:	0002      	movs	r2, r0
 801983e:	683b      	ldr	r3, [r7, #0]
 8019840:	4293      	cmp	r3, r2
 8019842:	d8e3      	bhi.n	801980c <SX1276IsChannelFree+0x70>
        }
    }
    SX1276SetSleep( );
 8019844:	f000 ffca 	bl	801a7dc <SX1276SetSleep>
    return status;
 8019848:	2317      	movs	r3, #23
 801984a:	18fb      	adds	r3, r7, r3
 801984c:	781b      	ldrb	r3, [r3, #0]
}
 801984e:	0018      	movs	r0, r3
 8019850:	46bd      	mov	sp, r7
 8019852:	b006      	add	sp, #24
 8019854:	bdb0      	pop	{r4, r5, r7, pc}

08019856 <SX1276Random>:

uint32_t SX1276Random( void )
{
 8019856:	b580      	push	{r7, lr}
 8019858:	b082      	sub	sp, #8
 801985a:	af00      	add	r7, sp, #0
    uint8_t i;
    uint32_t rnd = 0;
 801985c:	2300      	movs	r3, #0
 801985e:	603b      	str	r3, [r7, #0]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    SX1276SetModem( MODEM_LORA );
 8019860:	2001      	movs	r0, #1
 8019862:	f001 fb59 	bl	801af18 <SX1276SetModem>

    // Disable LoRa modem interrupts
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8019866:	21ff      	movs	r1, #255	; 0xff
 8019868:	2011      	movs	r0, #17
 801986a:	f001 fbaf 	bl	801afcc <SX1276Write>
                  RFLR_IRQFLAGS_CADDONE |
                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                  RFLR_IRQFLAGS_CADDETECTED );

    // Set radio in continuous reception
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 801986e:	2005      	movs	r0, #5
 8019870:	f001 fae5 	bl	801ae3e <SX1276SetOpMode>

    for( i = 0; i < 32; i++ )
 8019874:	1dfb      	adds	r3, r7, #7
 8019876:	2200      	movs	r2, #0
 8019878:	701a      	strb	r2, [r3, #0]
 801987a:	e015      	b.n	80198a8 <SX1276Random+0x52>
    {
        RADIO_DELAY_MS( 1 );
 801987c:	2001      	movs	r0, #1
 801987e:	f7eb fc70 	bl	8005162 <HAL_Delay>
        // Unfiltered RSSI value reading. Only takes the LSB value
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 8019882:	202c      	movs	r0, #44	; 0x2c
 8019884:	f001 fbb3 	bl	801afee <SX1276Read>
 8019888:	0003      	movs	r3, r0
 801988a:	001a      	movs	r2, r3
 801988c:	2301      	movs	r3, #1
 801988e:	401a      	ands	r2, r3
 8019890:	1dfb      	adds	r3, r7, #7
 8019892:	781b      	ldrb	r3, [r3, #0]
 8019894:	409a      	lsls	r2, r3
 8019896:	0013      	movs	r3, r2
 8019898:	683a      	ldr	r2, [r7, #0]
 801989a:	4313      	orrs	r3, r2
 801989c:	603b      	str	r3, [r7, #0]
    for( i = 0; i < 32; i++ )
 801989e:	1dfb      	adds	r3, r7, #7
 80198a0:	781a      	ldrb	r2, [r3, #0]
 80198a2:	1dfb      	adds	r3, r7, #7
 80198a4:	3201      	adds	r2, #1
 80198a6:	701a      	strb	r2, [r3, #0]
 80198a8:	1dfb      	adds	r3, r7, #7
 80198aa:	781b      	ldrb	r3, [r3, #0]
 80198ac:	2b1f      	cmp	r3, #31
 80198ae:	d9e5      	bls.n	801987c <SX1276Random+0x26>
    }

    SX1276SetSleep( );
 80198b0:	f000 ff94 	bl	801a7dc <SX1276SetSleep>

    return rnd;
 80198b4:	683b      	ldr	r3, [r7, #0]
}
 80198b6:	0018      	movs	r0, r3
 80198b8:	46bd      	mov	sp, r7
 80198ba:	b002      	add	sp, #8
 80198bc:	bd80      	pop	{r7, pc}
	...

080198c0 <RxChainCalibration>:
 * Performs the Rx chain calibration for LF and HF bands
 * \remark Must be called just after the reset so all registers are at their
 *         default values
 */
static void RxChainCalibration( void )
{
 80198c0:	b590      	push	{r4, r7, lr}
 80198c2:	b087      	sub	sp, #28
 80198c4:	af00      	add	r7, sp, #0
    uint8_t regPaConfigInitVal;
    uint32_t initialFreq;
    uint32_t channel;

    // Save context
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 80198c6:	2317      	movs	r3, #23
 80198c8:	18fc      	adds	r4, r7, r3
 80198ca:	2009      	movs	r0, #9
 80198cc:	f001 fb8f 	bl	801afee <SX1276Read>
 80198d0:	0003      	movs	r3, r0
 80198d2:	7023      	strb	r3, [r4, #0]

    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80198d4:	2006      	movs	r0, #6
 80198d6:	f001 fb8a 	bl	801afee <SX1276Read>
 80198da:	0003      	movs	r3, r0
 80198dc:	041c      	lsls	r4, r3, #16
                ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 80198de:	2007      	movs	r0, #7
 80198e0:	f001 fb85 	bl	801afee <SX1276Read>
 80198e4:	0003      	movs	r3, r0
 80198e6:	021b      	lsls	r3, r3, #8
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80198e8:	431c      	orrs	r4, r3
                ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) );
 80198ea:	2008      	movs	r0, #8
 80198ec:	f001 fb7f 	bl	801afee <SX1276Read>
 80198f0:	0003      	movs	r3, r0
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 80198f2:	4323      	orrs	r3, r4
 80198f4:	613b      	str	r3, [r7, #16]

    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 80198f6:	693b      	ldr	r3, [r7, #16]
 80198f8:	0a1b      	lsrs	r3, r3, #8
 80198fa:	60fb      	str	r3, [r7, #12]
 80198fc:	68fb      	ldr	r3, [r7, #12]
 80198fe:	021b      	lsls	r3, r3, #8
 8019900:	693a      	ldr	r2, [r7, #16]
 8019902:	1ad3      	subs	r3, r2, r3
 8019904:	60bb      	str	r3, [r7, #8]
 8019906:	68f9      	ldr	r1, [r7, #12]
 8019908:	000b      	movs	r3, r1
 801990a:	015b      	lsls	r3, r3, #5
 801990c:	1a5b      	subs	r3, r3, r1
 801990e:	019a      	lsls	r2, r3, #6
 8019910:	1ad2      	subs	r2, r2, r3
 8019912:	00d2      	lsls	r2, r2, #3
 8019914:	1850      	adds	r0, r2, r1
 8019916:	68b9      	ldr	r1, [r7, #8]
 8019918:	000b      	movs	r3, r1
 801991a:	015b      	lsls	r3, r3, #5
 801991c:	1a5b      	subs	r3, r3, r1
 801991e:	019a      	lsls	r2, r3, #6
 8019920:	1ad2      	subs	r2, r2, r3
 8019922:	00d2      	lsls	r2, r2, #3
 8019924:	1853      	adds	r3, r2, r1
 8019926:	3380      	adds	r3, #128	; 0x80
 8019928:	0a1b      	lsrs	r3, r3, #8
 801992a:	18c3      	adds	r3, r0, r3
 801992c:	607b      	str	r3, [r7, #4]

    // Cut the PA just in case, RFO output, power = -1 dBm
    SX1276Write( REG_PACONFIG, 0x00 );
 801992e:	2100      	movs	r1, #0
 8019930:	2009      	movs	r0, #9
 8019932:	f001 fb4b 	bl	801afcc <SX1276Write>

    // Launch Rx chain calibration for LF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8019936:	203b      	movs	r0, #59	; 0x3b
 8019938:	f001 fb59 	bl	801afee <SX1276Read>
 801993c:	0003      	movs	r3, r0
 801993e:	001a      	movs	r2, r3
 8019940:	2340      	movs	r3, #64	; 0x40
 8019942:	4313      	orrs	r3, r2
 8019944:	b2db      	uxtb	r3, r3
 8019946:	0019      	movs	r1, r3
 8019948:	203b      	movs	r0, #59	; 0x3b
 801994a:	f001 fb3f 	bl	801afcc <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 801994e:	46c0      	nop			; (mov r8, r8)
 8019950:	203b      	movs	r0, #59	; 0x3b
 8019952:	f001 fb4c 	bl	801afee <SX1276Read>
 8019956:	0003      	movs	r3, r0
 8019958:	001a      	movs	r2, r3
 801995a:	2320      	movs	r3, #32
 801995c:	4013      	ands	r3, r2
 801995e:	2b20      	cmp	r3, #32
 8019960:	d0f6      	beq.n	8019950 <RxChainCalibration+0x90>
    {
    }

    // Sets a Frequency in HF band
    SX1276SetChannel( 868000000 );
 8019962:	4b14      	ldr	r3, [pc, #80]	; (80199b4 <RxChainCalibration+0xf4>)
 8019964:	0018      	movs	r0, r3
 8019966:	f7ff fed3 	bl	8019710 <SX1276SetChannel>

    // Launch Rx chain calibration for HF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 801996a:	203b      	movs	r0, #59	; 0x3b
 801996c:	f001 fb3f 	bl	801afee <SX1276Read>
 8019970:	0003      	movs	r3, r0
 8019972:	001a      	movs	r2, r3
 8019974:	2340      	movs	r3, #64	; 0x40
 8019976:	4313      	orrs	r3, r2
 8019978:	b2db      	uxtb	r3, r3
 801997a:	0019      	movs	r1, r3
 801997c:	203b      	movs	r0, #59	; 0x3b
 801997e:	f001 fb25 	bl	801afcc <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8019982:	46c0      	nop			; (mov r8, r8)
 8019984:	203b      	movs	r0, #59	; 0x3b
 8019986:	f001 fb32 	bl	801afee <SX1276Read>
 801998a:	0003      	movs	r3, r0
 801998c:	001a      	movs	r2, r3
 801998e:	2320      	movs	r3, #32
 8019990:	4013      	ands	r3, r2
 8019992:	2b20      	cmp	r3, #32
 8019994:	d0f6      	beq.n	8019984 <RxChainCalibration+0xc4>
    {
    }

    // Restore context
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 8019996:	2317      	movs	r3, #23
 8019998:	18fb      	adds	r3, r7, r3
 801999a:	781b      	ldrb	r3, [r3, #0]
 801999c:	0019      	movs	r1, r3
 801999e:	2009      	movs	r0, #9
 80199a0:	f001 fb14 	bl	801afcc <SX1276Write>
    SX1276SetChannel( initialFreq );
 80199a4:	687b      	ldr	r3, [r7, #4]
 80199a6:	0018      	movs	r0, r3
 80199a8:	f7ff feb2 	bl	8019710 <SX1276SetChannel>
}
 80199ac:	46c0      	nop			; (mov r8, r8)
 80199ae:	46bd      	mov	sp, r7
 80199b0:	b007      	add	sp, #28
 80199b2:	bd90      	pop	{r4, r7, pc}
 80199b4:	33bca100 	.word	0x33bca100

080199b8 <SX1276SetRxConfig>:
                         uint32_t bandwidthAfc, uint16_t preambleLen,
                         uint16_t symbTimeout, bool fixLen,
                         uint8_t payloadLen,
                         bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                         bool iqInverted, bool rxContinuous )
{
 80199b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80199ba:	46c6      	mov	lr, r8
 80199bc:	b500      	push	{lr}
 80199be:	b084      	sub	sp, #16
 80199c0:	af00      	add	r7, sp, #0
 80199c2:	60b9      	str	r1, [r7, #8]
 80199c4:	607a      	str	r2, [r7, #4]
 80199c6:	0019      	movs	r1, r3
 80199c8:	240f      	movs	r4, #15
 80199ca:	193b      	adds	r3, r7, r4
 80199cc:	1c02      	adds	r2, r0, #0
 80199ce:	701a      	strb	r2, [r3, #0]
 80199d0:	230e      	movs	r3, #14
 80199d2:	18fb      	adds	r3, r7, r3
 80199d4:	1c0a      	adds	r2, r1, #0
 80199d6:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( modem );
 80199d8:	193b      	adds	r3, r7, r4
 80199da:	781b      	ldrb	r3, [r3, #0]
 80199dc:	0018      	movs	r0, r3
 80199de:	f001 fa9b 	bl	801af18 <SX1276SetModem>

    switch( modem )
 80199e2:	193b      	adds	r3, r7, r4
 80199e4:	781b      	ldrb	r3, [r3, #0]
 80199e6:	2b00      	cmp	r3, #0
 80199e8:	d003      	beq.n	80199f2 <SX1276SetRxConfig+0x3a>
 80199ea:	2b01      	cmp	r3, #1
 80199ec:	d100      	bne.n	80199f0 <SX1276SetRxConfig+0x38>
 80199ee:	e0fb      	b.n	8019be8 <SX1276SetRxConfig+0x230>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 80199f0:	e26e      	b.n	8019ed0 <SX1276SetRxConfig+0x518>
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 80199f2:	4bbd      	ldr	r3, [pc, #756]	; (8019ce8 <SX1276SetRxConfig+0x330>)
 80199f4:	68ba      	ldr	r2, [r7, #8]
 80199f6:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 80199f8:	4bbb      	ldr	r3, [pc, #748]	; (8019ce8 <SX1276SetRxConfig+0x330>)
 80199fa:	687a      	ldr	r2, [r7, #4]
 80199fc:	61da      	str	r2, [r3, #28]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 80199fe:	4bba      	ldr	r3, [pc, #744]	; (8019ce8 <SX1276SetRxConfig+0x330>)
 8019a00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019a02:	619a      	str	r2, [r3, #24]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8019a04:	4bb8      	ldr	r3, [pc, #736]	; (8019ce8 <SX1276SetRxConfig+0x330>)
 8019a06:	222c      	movs	r2, #44	; 0x2c
 8019a08:	2108      	movs	r1, #8
 8019a0a:	468c      	mov	ip, r1
 8019a0c:	44bc      	add	ip, r7
 8019a0e:	4462      	add	r2, ip
 8019a10:	2122      	movs	r1, #34	; 0x22
 8019a12:	7812      	ldrb	r2, [r2, #0]
 8019a14:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 8019a16:	4bb4      	ldr	r3, [pc, #720]	; (8019ce8 <SX1276SetRxConfig+0x330>)
 8019a18:	2130      	movs	r1, #48	; 0x30
 8019a1a:	2408      	movs	r4, #8
 8019a1c:	193a      	adds	r2, r7, r4
 8019a1e:	1852      	adds	r2, r2, r1
 8019a20:	2123      	movs	r1, #35	; 0x23
 8019a22:	7812      	ldrb	r2, [r2, #0]
 8019a24:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8019a26:	4bb0      	ldr	r3, [pc, #704]	; (8019ce8 <SX1276SetRxConfig+0x330>)
 8019a28:	2034      	movs	r0, #52	; 0x34
 8019a2a:	193a      	adds	r2, r7, r4
 8019a2c:	1812      	adds	r2, r2, r0
 8019a2e:	2124      	movs	r1, #36	; 0x24
 8019a30:	7812      	ldrb	r2, [r2, #0]
 8019a32:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8019a34:	4bac      	ldr	r3, [pc, #688]	; (8019ce8 <SX1276SetRxConfig+0x330>)
 8019a36:	2220      	movs	r2, #32
 8019a38:	2020      	movs	r0, #32
 8019a3a:	4684      	mov	ip, r0
 8019a3c:	2108      	movs	r1, #8
 8019a3e:	4688      	mov	r8, r1
 8019a40:	44b8      	add	r8, r7
 8019a42:	44c4      	add	ip, r8
 8019a44:	4462      	add	r2, ip
 8019a46:	2125      	movs	r1, #37	; 0x25
 8019a48:	7812      	ldrb	r2, [r2, #0]
 8019a4a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 8019a4c:	4ba6      	ldr	r3, [pc, #664]	; (8019ce8 <SX1276SetRxConfig+0x330>)
 8019a4e:	2224      	movs	r2, #36	; 0x24
 8019a50:	2020      	movs	r0, #32
 8019a52:	4684      	mov	ip, r0
 8019a54:	2108      	movs	r1, #8
 8019a56:	4688      	mov	r8, r1
 8019a58:	44b8      	add	r8, r7
 8019a5a:	44c4      	add	ip, r8
 8019a5c:	4462      	add	r2, ip
 8019a5e:	2126      	movs	r1, #38	; 0x26
 8019a60:	7812      	ldrb	r2, [r2, #0]
 8019a62:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8019a64:	4ba0      	ldr	r3, [pc, #640]	; (8019ce8 <SX1276SetRxConfig+0x330>)
 8019a66:	2624      	movs	r6, #36	; 0x24
 8019a68:	193a      	adds	r2, r7, r4
 8019a6a:	1992      	adds	r2, r2, r6
 8019a6c:	8812      	ldrh	r2, [r2, #0]
 8019a6e:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 8019a70:	2328      	movs	r3, #40	; 0x28
 8019a72:	2208      	movs	r2, #8
 8019a74:	4694      	mov	ip, r2
 8019a76:	44bc      	add	ip, r7
 8019a78:	4463      	add	r3, ip
 8019a7a:	881b      	ldrh	r3, [r3, #0]
 8019a7c:	0018      	movs	r0, r3
 8019a7e:	f7e9 f8a7 	bl	8002bd0 <__aeabi_i2d>
 8019a82:	0004      	movs	r4, r0
 8019a84:	000d      	movs	r5, r1
 8019a86:	6878      	ldr	r0, [r7, #4]
 8019a88:	f7e9 f8d2 	bl	8002c30 <__aeabi_ui2d>
 8019a8c:	0002      	movs	r2, r0
 8019a8e:	000b      	movs	r3, r1
 8019a90:	2000      	movs	r0, #0
 8019a92:	4996      	ldr	r1, [pc, #600]	; (8019cec <SX1276SetRxConfig+0x334>)
 8019a94:	f7e7 fe62 	bl	800175c <__aeabi_ddiv>
 8019a98:	0002      	movs	r2, r0
 8019a9a:	000b      	movs	r3, r1
 8019a9c:	0010      	movs	r0, r2
 8019a9e:	0019      	movs	r1, r3
 8019aa0:	2200      	movs	r2, #0
 8019aa2:	4b93      	ldr	r3, [pc, #588]	; (8019cf0 <SX1276SetRxConfig+0x338>)
 8019aa4:	f7e8 fa60 	bl	8001f68 <__aeabi_dmul>
 8019aa8:	0002      	movs	r2, r0
 8019aaa:	000b      	movs	r3, r1
 8019aac:	0020      	movs	r0, r4
 8019aae:	0029      	movs	r1, r5
 8019ab0:	f7e8 fa5a 	bl	8001f68 <__aeabi_dmul>
 8019ab4:	0002      	movs	r2, r0
 8019ab6:	000b      	movs	r3, r1
 8019ab8:	0010      	movs	r0, r2
 8019aba:	0019      	movs	r1, r3
 8019abc:	2200      	movs	r2, #0
 8019abe:	4b8d      	ldr	r3, [pc, #564]	; (8019cf4 <SX1276SetRxConfig+0x33c>)
 8019ac0:	f7e8 fa52 	bl	8001f68 <__aeabi_dmul>
 8019ac4:	0002      	movs	r2, r0
 8019ac6:	000b      	movs	r3, r1
 8019ac8:	0010      	movs	r0, r2
 8019aca:	0019      	movs	r1, r3
 8019acc:	f7e6 fda0 	bl	8000610 <__aeabi_d2uiz>
 8019ad0:	0002      	movs	r2, r0
 8019ad2:	4b85      	ldr	r3, [pc, #532]	; (8019ce8 <SX1276SetRxConfig+0x330>)
 8019ad4:	62da      	str	r2, [r3, #44]	; 0x2c
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8019ad6:	6878      	ldr	r0, [r7, #4]
 8019ad8:	f7e9 f8aa 	bl	8002c30 <__aeabi_ui2d>
 8019adc:	0002      	movs	r2, r0
 8019ade:	000b      	movs	r3, r1
 8019ae0:	2000      	movs	r0, #0
 8019ae2:	4985      	ldr	r1, [pc, #532]	; (8019cf8 <SX1276SetRxConfig+0x340>)
 8019ae4:	f7e7 fe3a 	bl	800175c <__aeabi_ddiv>
 8019ae8:	0002      	movs	r2, r0
 8019aea:	000b      	movs	r3, r1
 8019aec:	0010      	movs	r0, r2
 8019aee:	0019      	movs	r1, r3
 8019af0:	f7e6 fd8e 	bl	8000610 <__aeabi_d2uiz>
 8019af4:	0003      	movs	r3, r0
 8019af6:	b29b      	uxth	r3, r3
 8019af8:	607b      	str	r3, [r7, #4]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 8019afa:	687b      	ldr	r3, [r7, #4]
 8019afc:	0a1b      	lsrs	r3, r3, #8
 8019afe:	b2db      	uxtb	r3, r3
 8019b00:	0019      	movs	r1, r3
 8019b02:	2002      	movs	r0, #2
 8019b04:	f001 fa62 	bl	801afcc <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8019b08:	687b      	ldr	r3, [r7, #4]
 8019b0a:	b2db      	uxtb	r3, r3
 8019b0c:	0019      	movs	r1, r3
 8019b0e:	2003      	movs	r0, #3
 8019b10:	f001 fa5c 	bl	801afcc <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 8019b14:	68bb      	ldr	r3, [r7, #8]
 8019b16:	0018      	movs	r0, r3
 8019b18:	f001 fb66 	bl	801b1e8 <GetFskBandwidthRegValue>
 8019b1c:	0003      	movs	r3, r0
 8019b1e:	0019      	movs	r1, r3
 8019b20:	2012      	movs	r0, #18
 8019b22:	f001 fa53 	bl	801afcc <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 8019b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b28:	0018      	movs	r0, r3
 8019b2a:	f001 fb5d 	bl	801b1e8 <GetFskBandwidthRegValue>
 8019b2e:	0003      	movs	r3, r0
 8019b30:	0019      	movs	r1, r3
 8019b32:	2013      	movs	r0, #19
 8019b34:	f001 fa4a 	bl	801afcc <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8019b38:	2408      	movs	r4, #8
 8019b3a:	193b      	adds	r3, r7, r4
 8019b3c:	199b      	adds	r3, r3, r6
 8019b3e:	881b      	ldrh	r3, [r3, #0]
 8019b40:	0a1b      	lsrs	r3, r3, #8
 8019b42:	b29b      	uxth	r3, r3
 8019b44:	b2db      	uxtb	r3, r3
 8019b46:	0019      	movs	r1, r3
 8019b48:	2025      	movs	r0, #37	; 0x25
 8019b4a:	f001 fa3f 	bl	801afcc <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8019b4e:	193b      	adds	r3, r7, r4
 8019b50:	199b      	adds	r3, r3, r6
 8019b52:	881b      	ldrh	r3, [r3, #0]
 8019b54:	b2db      	uxtb	r3, r3
 8019b56:	0019      	movs	r1, r3
 8019b58:	2026      	movs	r0, #38	; 0x26
 8019b5a:	f001 fa37 	bl	801afcc <SX1276Write>
            if( fixLen == 1 )
 8019b5e:	222c      	movs	r2, #44	; 0x2c
 8019b60:	193b      	adds	r3, r7, r4
 8019b62:	189b      	adds	r3, r3, r2
 8019b64:	781b      	ldrb	r3, [r3, #0]
 8019b66:	2b00      	cmp	r3, #0
 8019b68:	d008      	beq.n	8019b7c <SX1276SetRxConfig+0x1c4>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 8019b6a:	2130      	movs	r1, #48	; 0x30
 8019b6c:	193b      	adds	r3, r7, r4
 8019b6e:	185b      	adds	r3, r3, r1
 8019b70:	781b      	ldrb	r3, [r3, #0]
 8019b72:	0019      	movs	r1, r3
 8019b74:	2032      	movs	r0, #50	; 0x32
 8019b76:	f001 fa29 	bl	801afcc <SX1276Write>
 8019b7a:	e003      	b.n	8019b84 <SX1276SetRxConfig+0x1cc>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8019b7c:	21ff      	movs	r1, #255	; 0xff
 8019b7e:	2032      	movs	r0, #50	; 0x32
 8019b80:	f001 fa24 	bl	801afcc <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8019b84:	2030      	movs	r0, #48	; 0x30
 8019b86:	f001 fa32 	bl	801afee <SX1276Read>
 8019b8a:	0003      	movs	r3, r0
 8019b8c:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 8019b8e:	226f      	movs	r2, #111	; 0x6f
 8019b90:	4013      	ands	r3, r2
 8019b92:	b25a      	sxtb	r2, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8019b94:	232c      	movs	r3, #44	; 0x2c
 8019b96:	2108      	movs	r1, #8
 8019b98:	468c      	mov	ip, r1
 8019b9a:	44bc      	add	ip, r7
 8019b9c:	4463      	add	r3, ip
 8019b9e:	781b      	ldrb	r3, [r3, #0]
 8019ba0:	2b00      	cmp	r3, #0
 8019ba2:	d001      	beq.n	8019ba8 <SX1276SetRxConfig+0x1f0>
 8019ba4:	2300      	movs	r3, #0
 8019ba6:	e001      	b.n	8019bac <SX1276SetRxConfig+0x1f4>
 8019ba8:	2380      	movs	r3, #128	; 0x80
 8019baa:	425b      	negs	r3, r3
 8019bac:	4313      	orrs	r3, r2
 8019bae:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 8019bb0:	2334      	movs	r3, #52	; 0x34
 8019bb2:	2108      	movs	r1, #8
 8019bb4:	468c      	mov	ip, r1
 8019bb6:	44bc      	add	ip, r7
 8019bb8:	4463      	add	r3, ip
 8019bba:	781b      	ldrb	r3, [r3, #0]
 8019bbc:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8019bbe:	b25b      	sxtb	r3, r3
 8019bc0:	4313      	orrs	r3, r2
 8019bc2:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 8019bc4:	b2db      	uxtb	r3, r3
 8019bc6:	0019      	movs	r1, r3
 8019bc8:	2030      	movs	r0, #48	; 0x30
 8019bca:	f001 f9ff 	bl	801afcc <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8019bce:	2031      	movs	r0, #49	; 0x31
 8019bd0:	f001 fa0d 	bl	801afee <SX1276Read>
 8019bd4:	0003      	movs	r3, r0
 8019bd6:	001a      	movs	r2, r3
 8019bd8:	2340      	movs	r3, #64	; 0x40
 8019bda:	4313      	orrs	r3, r2
 8019bdc:	b2db      	uxtb	r3, r3
 8019bde:	0019      	movs	r1, r3
 8019be0:	2031      	movs	r0, #49	; 0x31
 8019be2:	f001 f9f3 	bl	801afcc <SX1276Write>
        break;
 8019be6:	e173      	b.n	8019ed0 <SX1276SetRxConfig+0x518>
            if( bandwidth > 2 )
 8019be8:	68bb      	ldr	r3, [r7, #8]
 8019bea:	2b02      	cmp	r3, #2
 8019bec:	d900      	bls.n	8019bf0 <SX1276SetRxConfig+0x238>
                while( 1 );
 8019bee:	e7fe      	b.n	8019bee <SX1276SetRxConfig+0x236>
            bandwidth += 7;
 8019bf0:	68bb      	ldr	r3, [r7, #8]
 8019bf2:	3307      	adds	r3, #7
 8019bf4:	60bb      	str	r3, [r7, #8]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8019bf6:	4b3c      	ldr	r3, [pc, #240]	; (8019ce8 <SX1276SetRxConfig+0x330>)
 8019bf8:	68ba      	ldr	r2, [r7, #8]
 8019bfa:	645a      	str	r2, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 8019bfc:	4b3a      	ldr	r3, [pc, #232]	; (8019ce8 <SX1276SetRxConfig+0x330>)
 8019bfe:	687a      	ldr	r2, [r7, #4]
 8019c00:	649a      	str	r2, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.Coderate = coderate;
 8019c02:	4b39      	ldr	r3, [pc, #228]	; (8019ce8 <SX1276SetRxConfig+0x330>)
 8019c04:	220e      	movs	r2, #14
 8019c06:	18ba      	adds	r2, r7, r2
 8019c08:	214d      	movs	r1, #77	; 0x4d
 8019c0a:	7812      	ldrb	r2, [r2, #0]
 8019c0c:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8019c0e:	4b36      	ldr	r3, [pc, #216]	; (8019ce8 <SX1276SetRxConfig+0x330>)
 8019c10:	2224      	movs	r2, #36	; 0x24
 8019c12:	2108      	movs	r1, #8
 8019c14:	468c      	mov	ip, r1
 8019c16:	44bc      	add	ip, r7
 8019c18:	4462      	add	r2, ip
 8019c1a:	214e      	movs	r1, #78	; 0x4e
 8019c1c:	8812      	ldrh	r2, [r2, #0]
 8019c1e:	525a      	strh	r2, [r3, r1]
            SX1276.Settings.LoRa.FixLen = fixLen;
 8019c20:	4b31      	ldr	r3, [pc, #196]	; (8019ce8 <SX1276SetRxConfig+0x330>)
 8019c22:	222c      	movs	r2, #44	; 0x2c
 8019c24:	2108      	movs	r1, #8
 8019c26:	468c      	mov	ip, r1
 8019c28:	44bc      	add	ip, r7
 8019c2a:	4462      	add	r2, ip
 8019c2c:	2150      	movs	r1, #80	; 0x50
 8019c2e:	7812      	ldrb	r2, [r2, #0]
 8019c30:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 8019c32:	4b2d      	ldr	r3, [pc, #180]	; (8019ce8 <SX1276SetRxConfig+0x330>)
 8019c34:	2230      	movs	r2, #48	; 0x30
 8019c36:	2108      	movs	r1, #8
 8019c38:	468c      	mov	ip, r1
 8019c3a:	44bc      	add	ip, r7
 8019c3c:	4462      	add	r2, ip
 8019c3e:	2151      	movs	r1, #81	; 0x51
 8019c40:	7812      	ldrb	r2, [r2, #0]
 8019c42:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8019c44:	4b28      	ldr	r3, [pc, #160]	; (8019ce8 <SX1276SetRxConfig+0x330>)
 8019c46:	2234      	movs	r2, #52	; 0x34
 8019c48:	2108      	movs	r1, #8
 8019c4a:	468c      	mov	ip, r1
 8019c4c:	44bc      	add	ip, r7
 8019c4e:	4462      	add	r2, ip
 8019c50:	2152      	movs	r1, #82	; 0x52
 8019c52:	7812      	ldrb	r2, [r2, #0]
 8019c54:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8019c56:	4b24      	ldr	r3, [pc, #144]	; (8019ce8 <SX1276SetRxConfig+0x330>)
 8019c58:	2238      	movs	r2, #56	; 0x38
 8019c5a:	2108      	movs	r1, #8
 8019c5c:	468c      	mov	ip, r1
 8019c5e:	44bc      	add	ip, r7
 8019c60:	4462      	add	r2, ip
 8019c62:	2153      	movs	r1, #83	; 0x53
 8019c64:	7812      	ldrb	r2, [r2, #0]
 8019c66:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8019c68:	4b1f      	ldr	r3, [pc, #124]	; (8019ce8 <SX1276SetRxConfig+0x330>)
 8019c6a:	223c      	movs	r2, #60	; 0x3c
 8019c6c:	2108      	movs	r1, #8
 8019c6e:	468c      	mov	ip, r1
 8019c70:	44bc      	add	ip, r7
 8019c72:	4462      	add	r2, ip
 8019c74:	2154      	movs	r1, #84	; 0x54
 8019c76:	7812      	ldrb	r2, [r2, #0]
 8019c78:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8019c7a:	4b1b      	ldr	r3, [pc, #108]	; (8019ce8 <SX1276SetRxConfig+0x330>)
 8019c7c:	2220      	movs	r2, #32
 8019c7e:	2120      	movs	r1, #32
 8019c80:	468c      	mov	ip, r1
 8019c82:	2108      	movs	r1, #8
 8019c84:	4688      	mov	r8, r1
 8019c86:	44b8      	add	r8, r7
 8019c88:	44c4      	add	ip, r8
 8019c8a:	4462      	add	r2, ip
 8019c8c:	2155      	movs	r1, #85	; 0x55
 8019c8e:	7812      	ldrb	r2, [r2, #0]
 8019c90:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8019c92:	4b15      	ldr	r3, [pc, #84]	; (8019ce8 <SX1276SetRxConfig+0x330>)
 8019c94:	2224      	movs	r2, #36	; 0x24
 8019c96:	2120      	movs	r1, #32
 8019c98:	468c      	mov	ip, r1
 8019c9a:	2108      	movs	r1, #8
 8019c9c:	4688      	mov	r8, r1
 8019c9e:	44b8      	add	r8, r7
 8019ca0:	44c4      	add	ip, r8
 8019ca2:	4462      	add	r2, ip
 8019ca4:	2156      	movs	r1, #86	; 0x56
 8019ca6:	7812      	ldrb	r2, [r2, #0]
 8019ca8:	545a      	strb	r2, [r3, r1]
            if( datarate > 12 )
 8019caa:	687b      	ldr	r3, [r7, #4]
 8019cac:	2b0c      	cmp	r3, #12
 8019cae:	d902      	bls.n	8019cb6 <SX1276SetRxConfig+0x2fe>
                datarate = 12;
 8019cb0:	230c      	movs	r3, #12
 8019cb2:	607b      	str	r3, [r7, #4]
 8019cb4:	e004      	b.n	8019cc0 <SX1276SetRxConfig+0x308>
            else if( datarate < 6 )
 8019cb6:	687b      	ldr	r3, [r7, #4]
 8019cb8:	2b05      	cmp	r3, #5
 8019cba:	d801      	bhi.n	8019cc0 <SX1276SetRxConfig+0x308>
                datarate = 6;
 8019cbc:	2306      	movs	r3, #6
 8019cbe:	607b      	str	r3, [r7, #4]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8019cc0:	68bb      	ldr	r3, [r7, #8]
 8019cc2:	2b07      	cmp	r3, #7
 8019cc4:	d105      	bne.n	8019cd2 <SX1276SetRxConfig+0x31a>
 8019cc6:	687b      	ldr	r3, [r7, #4]
 8019cc8:	2b0b      	cmp	r3, #11
 8019cca:	d008      	beq.n	8019cde <SX1276SetRxConfig+0x326>
 8019ccc:	687b      	ldr	r3, [r7, #4]
 8019cce:	2b0c      	cmp	r3, #12
 8019cd0:	d005      	beq.n	8019cde <SX1276SetRxConfig+0x326>
 8019cd2:	68bb      	ldr	r3, [r7, #8]
 8019cd4:	2b08      	cmp	r3, #8
 8019cd6:	d111      	bne.n	8019cfc <SX1276SetRxConfig+0x344>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8019cd8:	687b      	ldr	r3, [r7, #4]
 8019cda:	2b0c      	cmp	r3, #12
 8019cdc:	d10e      	bne.n	8019cfc <SX1276SetRxConfig+0x344>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8019cde:	4b02      	ldr	r3, [pc, #8]	; (8019ce8 <SX1276SetRxConfig+0x330>)
 8019ce0:	224c      	movs	r2, #76	; 0x4c
 8019ce2:	2101      	movs	r1, #1
 8019ce4:	5499      	strb	r1, [r3, r2]
 8019ce6:	e00d      	b.n	8019d04 <SX1276SetRxConfig+0x34c>
 8019ce8:	20001724 	.word	0x20001724
 8019cec:	3ff00000 	.word	0x3ff00000
 8019cf0:	40200000 	.word	0x40200000
 8019cf4:	408f4000 	.word	0x408f4000
 8019cf8:	417e8480 	.word	0x417e8480
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8019cfc:	4b77      	ldr	r3, [pc, #476]	; (8019edc <SX1276SetRxConfig+0x524>)
 8019cfe:	224c      	movs	r2, #76	; 0x4c
 8019d00:	2100      	movs	r1, #0
 8019d02:	5499      	strb	r1, [r3, r2]
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8019d04:	201d      	movs	r0, #29
 8019d06:	f001 f972 	bl	801afee <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8019d0a:	68bb      	ldr	r3, [r7, #8]
 8019d0c:	b2db      	uxtb	r3, r3
 8019d0e:	011b      	lsls	r3, r3, #4
 8019d10:	b2da      	uxtb	r2, r3
 8019d12:	230e      	movs	r3, #14
 8019d14:	18fb      	adds	r3, r7, r3
 8019d16:	781b      	ldrb	r3, [r3, #0]
 8019d18:	18db      	adds	r3, r3, r3
 8019d1a:	b2db      	uxtb	r3, r3
 8019d1c:	4313      	orrs	r3, r2
 8019d1e:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8019d20:	242c      	movs	r4, #44	; 0x2c
 8019d22:	2608      	movs	r6, #8
 8019d24:	19bb      	adds	r3, r7, r6
 8019d26:	191b      	adds	r3, r3, r4
 8019d28:	781b      	ldrb	r3, [r3, #0]
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8019d2a:	4313      	orrs	r3, r2
 8019d2c:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8019d2e:	0019      	movs	r1, r3
 8019d30:	201d      	movs	r0, #29
 8019d32:	f001 f94b 	bl	801afcc <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8019d36:	201e      	movs	r0, #30
 8019d38:	f001 f959 	bl	801afee <SX1276Read>
 8019d3c:	0003      	movs	r3, r0
 8019d3e:	001a      	movs	r2, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 8019d40:	2308      	movs	r3, #8
 8019d42:	4013      	ands	r3, r2
 8019d44:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8019d46:	687b      	ldr	r3, [r7, #4]
 8019d48:	b2db      	uxtb	r3, r3
 8019d4a:	011b      	lsls	r3, r3, #4
 8019d4c:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 8019d4e:	4313      	orrs	r3, r2
 8019d50:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8019d52:	2334      	movs	r3, #52	; 0x34
 8019d54:	2108      	movs	r1, #8
 8019d56:	468c      	mov	ip, r1
 8019d58:	44bc      	add	ip, r7
 8019d5a:	4463      	add	r3, ip
 8019d5c:	781b      	ldrb	r3, [r3, #0]
 8019d5e:	009b      	lsls	r3, r3, #2
 8019d60:	b2db      	uxtb	r3, r3
 8019d62:	4313      	orrs	r3, r2
 8019d64:	b2da      	uxtb	r2, r3
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8019d66:	2528      	movs	r5, #40	; 0x28
 8019d68:	19bb      	adds	r3, r7, r6
 8019d6a:	195b      	adds	r3, r3, r5
 8019d6c:	881b      	ldrh	r3, [r3, #0]
 8019d6e:	0a1b      	lsrs	r3, r3, #8
 8019d70:	b29b      	uxth	r3, r3
 8019d72:	b2db      	uxtb	r3, r3
 8019d74:	2103      	movs	r1, #3
 8019d76:	400b      	ands	r3, r1
 8019d78:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 8019d7a:	4313      	orrs	r3, r2
 8019d7c:	b2db      	uxtb	r3, r3
 8019d7e:	0019      	movs	r1, r3
 8019d80:	201e      	movs	r0, #30
 8019d82:	f001 f923 	bl	801afcc <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8019d86:	2026      	movs	r0, #38	; 0x26
 8019d88:	f001 f931 	bl	801afee <SX1276Read>
 8019d8c:	0003      	movs	r3, r0
 8019d8e:	b25b      	sxtb	r3, r3
 8019d90:	2208      	movs	r2, #8
 8019d92:	4393      	bics	r3, r2
 8019d94:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8019d96:	4b51      	ldr	r3, [pc, #324]	; (8019edc <SX1276SetRxConfig+0x524>)
 8019d98:	214c      	movs	r1, #76	; 0x4c
 8019d9a:	5c5b      	ldrb	r3, [r3, r1]
 8019d9c:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8019d9e:	b25b      	sxtb	r3, r3
 8019da0:	4313      	orrs	r3, r2
 8019da2:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8019da4:	b2db      	uxtb	r3, r3
 8019da6:	0019      	movs	r1, r3
 8019da8:	2026      	movs	r0, #38	; 0x26
 8019daa:	f001 f90f 	bl	801afcc <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 8019dae:	19bb      	adds	r3, r7, r6
 8019db0:	195b      	adds	r3, r3, r5
 8019db2:	881b      	ldrh	r3, [r3, #0]
 8019db4:	b2db      	uxtb	r3, r3
 8019db6:	0019      	movs	r1, r3
 8019db8:	201f      	movs	r0, #31
 8019dba:	f001 f907 	bl	801afcc <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8019dbe:	2524      	movs	r5, #36	; 0x24
 8019dc0:	19bb      	adds	r3, r7, r6
 8019dc2:	195b      	adds	r3, r3, r5
 8019dc4:	881b      	ldrh	r3, [r3, #0]
 8019dc6:	0a1b      	lsrs	r3, r3, #8
 8019dc8:	b29b      	uxth	r3, r3
 8019dca:	b2db      	uxtb	r3, r3
 8019dcc:	0019      	movs	r1, r3
 8019dce:	2020      	movs	r0, #32
 8019dd0:	f001 f8fc 	bl	801afcc <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8019dd4:	19bb      	adds	r3, r7, r6
 8019dd6:	195b      	adds	r3, r3, r5
 8019dd8:	881b      	ldrh	r3, [r3, #0]
 8019dda:	b2db      	uxtb	r3, r3
 8019ddc:	0019      	movs	r1, r3
 8019dde:	2021      	movs	r0, #33	; 0x21
 8019de0:	f001 f8f4 	bl	801afcc <SX1276Write>
            if( fixLen == 1 )
 8019de4:	19bb      	adds	r3, r7, r6
 8019de6:	191b      	adds	r3, r3, r4
 8019de8:	781b      	ldrb	r3, [r3, #0]
 8019dea:	2b00      	cmp	r3, #0
 8019dec:	d009      	beq.n	8019e02 <SX1276SetRxConfig+0x44a>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 8019dee:	2330      	movs	r3, #48	; 0x30
 8019df0:	2208      	movs	r2, #8
 8019df2:	4694      	mov	ip, r2
 8019df4:	44bc      	add	ip, r7
 8019df6:	4463      	add	r3, ip
 8019df8:	781b      	ldrb	r3, [r3, #0]
 8019dfa:	0019      	movs	r1, r3
 8019dfc:	2022      	movs	r0, #34	; 0x22
 8019dfe:	f001 f8e5 	bl	801afcc <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8019e02:	4b36      	ldr	r3, [pc, #216]	; (8019edc <SX1276SetRxConfig+0x524>)
 8019e04:	2253      	movs	r2, #83	; 0x53
 8019e06:	5c9b      	ldrb	r3, [r3, r2]
 8019e08:	2b00      	cmp	r3, #0
 8019e0a:	d013      	beq.n	8019e34 <SX1276SetRxConfig+0x47c>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8019e0c:	2044      	movs	r0, #68	; 0x44
 8019e0e:	f001 f8ee 	bl	801afee <SX1276Read>
 8019e12:	0003      	movs	r3, r0
 8019e14:	001a      	movs	r2, r3
 8019e16:	2380      	movs	r3, #128	; 0x80
 8019e18:	425b      	negs	r3, r3
 8019e1a:	4313      	orrs	r3, r2
 8019e1c:	b2db      	uxtb	r3, r3
 8019e1e:	0019      	movs	r1, r3
 8019e20:	2044      	movs	r0, #68	; 0x44
 8019e22:	f001 f8d3 	bl	801afcc <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8019e26:	4b2d      	ldr	r3, [pc, #180]	; (8019edc <SX1276SetRxConfig+0x524>)
 8019e28:	2254      	movs	r2, #84	; 0x54
 8019e2a:	5c9b      	ldrb	r3, [r3, r2]
 8019e2c:	0019      	movs	r1, r3
 8019e2e:	2024      	movs	r0, #36	; 0x24
 8019e30:	f001 f8cc 	bl	801afcc <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8019e34:	68bb      	ldr	r3, [r7, #8]
 8019e36:	2b09      	cmp	r3, #9
 8019e38:	d10d      	bne.n	8019e56 <SX1276SetRxConfig+0x49e>
 8019e3a:	4b28      	ldr	r3, [pc, #160]	; (8019edc <SX1276SetRxConfig+0x524>)
 8019e3c:	689b      	ldr	r3, [r3, #8]
 8019e3e:	4a28      	ldr	r2, [pc, #160]	; (8019ee0 <SX1276SetRxConfig+0x528>)
 8019e40:	4293      	cmp	r3, r2
 8019e42:	d908      	bls.n	8019e56 <SX1276SetRxConfig+0x49e>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8019e44:	2102      	movs	r1, #2
 8019e46:	2036      	movs	r0, #54	; 0x36
 8019e48:	f001 f8c0 	bl	801afcc <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 8019e4c:	2164      	movs	r1, #100	; 0x64
 8019e4e:	203a      	movs	r0, #58	; 0x3a
 8019e50:	f001 f8bc 	bl	801afcc <SX1276Write>
 8019e54:	e00f      	b.n	8019e76 <SX1276SetRxConfig+0x4be>
            else if( bandwidth == 9 )
 8019e56:	68bb      	ldr	r3, [r7, #8]
 8019e58:	2b09      	cmp	r3, #9
 8019e5a:	d108      	bne.n	8019e6e <SX1276SetRxConfig+0x4b6>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8019e5c:	2102      	movs	r1, #2
 8019e5e:	2036      	movs	r0, #54	; 0x36
 8019e60:	f001 f8b4 	bl	801afcc <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 8019e64:	217f      	movs	r1, #127	; 0x7f
 8019e66:	203a      	movs	r0, #58	; 0x3a
 8019e68:	f001 f8b0 	bl	801afcc <SX1276Write>
 8019e6c:	e003      	b.n	8019e76 <SX1276SetRxConfig+0x4be>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 8019e6e:	2103      	movs	r1, #3
 8019e70:	2036      	movs	r0, #54	; 0x36
 8019e72:	f001 f8ab 	bl	801afcc <SX1276Write>
            if( datarate == 6 )
 8019e76:	687b      	ldr	r3, [r7, #4]
 8019e78:	2b06      	cmp	r3, #6
 8019e7a:	d114      	bne.n	8019ea6 <SX1276SetRxConfig+0x4ee>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8019e7c:	2031      	movs	r0, #49	; 0x31
 8019e7e:	f001 f8b6 	bl	801afee <SX1276Read>
 8019e82:	0003      	movs	r3, r0
 8019e84:	b25b      	sxtb	r3, r3
 8019e86:	2207      	movs	r2, #7
 8019e88:	4393      	bics	r3, r2
 8019e8a:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8019e8c:	2205      	movs	r2, #5
 8019e8e:	4313      	orrs	r3, r2
 8019e90:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8019e92:	b2db      	uxtb	r3, r3
 8019e94:	0019      	movs	r1, r3
 8019e96:	2031      	movs	r0, #49	; 0x31
 8019e98:	f001 f898 	bl	801afcc <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8019e9c:	210c      	movs	r1, #12
 8019e9e:	2037      	movs	r0, #55	; 0x37
 8019ea0:	f001 f894 	bl	801afcc <SX1276Write>
        break;
 8019ea4:	e013      	b.n	8019ece <SX1276SetRxConfig+0x516>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8019ea6:	2031      	movs	r0, #49	; 0x31
 8019ea8:	f001 f8a1 	bl	801afee <SX1276Read>
 8019eac:	0003      	movs	r3, r0
 8019eae:	b25b      	sxtb	r3, r3
 8019eb0:	2207      	movs	r2, #7
 8019eb2:	4393      	bics	r3, r2
 8019eb4:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8019eb6:	2203      	movs	r2, #3
 8019eb8:	4313      	orrs	r3, r2
 8019eba:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8019ebc:	b2db      	uxtb	r3, r3
 8019ebe:	0019      	movs	r1, r3
 8019ec0:	2031      	movs	r0, #49	; 0x31
 8019ec2:	f001 f883 	bl	801afcc <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8019ec6:	210a      	movs	r1, #10
 8019ec8:	2037      	movs	r0, #55	; 0x37
 8019eca:	f001 f87f 	bl	801afcc <SX1276Write>
        break;
 8019ece:	46c0      	nop			; (mov r8, r8)
}
 8019ed0:	46c0      	nop			; (mov r8, r8)
 8019ed2:	46bd      	mov	sp, r7
 8019ed4:	b004      	add	sp, #16
 8019ed6:	bc80      	pop	{r7}
 8019ed8:	46b8      	mov	r8, r7
 8019eda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019edc:	20001724 	.word	0x20001724
 8019ee0:	1f4add40 	.word	0x1f4add40

08019ee4 <SX1276SetTxConfig>:
void SX1276SetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                        uint32_t bandwidth, uint32_t datarate,
                        uint8_t coderate, uint16_t preambleLen,
                        bool fixLen, bool crcOn, bool freqHopOn,
                        uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8019ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019ee6:	46c6      	mov	lr, r8
 8019ee8:	b500      	push	{lr}
 8019eea:	b084      	sub	sp, #16
 8019eec:	af00      	add	r7, sp, #0
 8019eee:	60ba      	str	r2, [r7, #8]
 8019ef0:	607b      	str	r3, [r7, #4]
 8019ef2:	240f      	movs	r4, #15
 8019ef4:	193b      	adds	r3, r7, r4
 8019ef6:	1c02      	adds	r2, r0, #0
 8019ef8:	701a      	strb	r2, [r3, #0]
 8019efa:	230e      	movs	r3, #14
 8019efc:	18fb      	adds	r3, r7, r3
 8019efe:	1c0a      	adds	r2, r1, #0
 8019f00:	701a      	strb	r2, [r3, #0]
    if( ( SX1276.Settings.State == RF_RX_RUNNING ) && ( modem == MODEM_FSK ) )
 8019f02:	4bb7      	ldr	r3, [pc, #732]	; (801a1e0 <SX1276SetTxConfig+0x2fc>)
 8019f04:	791b      	ldrb	r3, [r3, #4]
 8019f06:	2b01      	cmp	r3, #1
 8019f08:	d108      	bne.n	8019f1c <SX1276SetTxConfig+0x38>
 8019f0a:	193b      	adds	r3, r7, r4
 8019f0c:	781b      	ldrb	r3, [r3, #0]
 8019f0e:	2b00      	cmp	r3, #0
 8019f10:	d104      	bne.n	8019f1c <SX1276SetTxConfig+0x38>
    {
        SX1276SetSleep( );
 8019f12:	f000 fc63 	bl	801a7dc <SX1276SetSleep>
        RADIO_DELAY_MS( 1 );
 8019f16:	2001      	movs	r0, #1
 8019f18:	f7eb f923 	bl	8005162 <HAL_Delay>
    }

    SX1276SetModem( modem );
 8019f1c:	240f      	movs	r4, #15
 8019f1e:	193b      	adds	r3, r7, r4
 8019f20:	781b      	ldrb	r3, [r3, #0]
 8019f22:	0018      	movs	r0, r3
 8019f24:	f000 fff8 	bl	801af18 <SX1276SetModem>

    SX1276SetRfTxPower( power );
 8019f28:	250e      	movs	r5, #14
 8019f2a:	197b      	adds	r3, r7, r5
 8019f2c:	781b      	ldrb	r3, [r3, #0]
 8019f2e:	b25b      	sxtb	r3, r3
 8019f30:	0018      	movs	r0, r3
 8019f32:	f000 fb41 	bl	801a5b8 <SX1276SetRfTxPower>
    power = 7;  // Изменение параметра мощности передачи
 8019f36:	197b      	adds	r3, r7, r5
 8019f38:	2207      	movs	r2, #7
 8019f3a:	701a      	strb	r2, [r3, #0]
    switch( modem )
 8019f3c:	193b      	adds	r3, r7, r4
 8019f3e:	781b      	ldrb	r3, [r3, #0]
 8019f40:	2b00      	cmp	r3, #0
 8019f42:	d003      	beq.n	8019f4c <SX1276SetTxConfig+0x68>
 8019f44:	2b01      	cmp	r3, #1
 8019f46:	d100      	bne.n	8019f4a <SX1276SetTxConfig+0x66>
 8019f48:	e0c1      	b.n	801a0ce <SX1276SetTxConfig+0x1ea>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 8019f4a:	e207      	b.n	801a35c <SX1276SetTxConfig+0x478>
            SX1276.Settings.Fsk.Power = power;
 8019f4c:	4ba4      	ldr	r3, [pc, #656]	; (801a1e0 <SX1276SetTxConfig+0x2fc>)
 8019f4e:	220e      	movs	r2, #14
 8019f50:	18ba      	adds	r2, r7, r2
 8019f52:	7812      	ldrb	r2, [r2, #0]
 8019f54:	731a      	strb	r2, [r3, #12]
            SX1276.Settings.Fsk.Fdev = fdev;
 8019f56:	4ba2      	ldr	r3, [pc, #648]	; (801a1e0 <SX1276SetTxConfig+0x2fc>)
 8019f58:	68ba      	ldr	r2, [r7, #8]
 8019f5a:	611a      	str	r2, [r3, #16]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8019f5c:	4ba0      	ldr	r3, [pc, #640]	; (801a1e0 <SX1276SetTxConfig+0x2fc>)
 8019f5e:	687a      	ldr	r2, [r7, #4]
 8019f60:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 8019f62:	4b9f      	ldr	r3, [pc, #636]	; (801a1e0 <SX1276SetTxConfig+0x2fc>)
 8019f64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019f66:	61da      	str	r2, [r3, #28]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8019f68:	4b9d      	ldr	r3, [pc, #628]	; (801a1e0 <SX1276SetTxConfig+0x2fc>)
 8019f6a:	2420      	movs	r4, #32
 8019f6c:	2608      	movs	r6, #8
 8019f6e:	2208      	movs	r2, #8
 8019f70:	18ba      	adds	r2, r7, r2
 8019f72:	1992      	adds	r2, r2, r6
 8019f74:	1912      	adds	r2, r2, r4
 8019f76:	8812      	ldrh	r2, [r2, #0]
 8019f78:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8019f7a:	4b99      	ldr	r3, [pc, #612]	; (801a1e0 <SX1276SetTxConfig+0x2fc>)
 8019f7c:	2524      	movs	r5, #36	; 0x24
 8019f7e:	2208      	movs	r2, #8
 8019f80:	18ba      	adds	r2, r7, r2
 8019f82:	1992      	adds	r2, r2, r6
 8019f84:	1952      	adds	r2, r2, r5
 8019f86:	2122      	movs	r1, #34	; 0x22
 8019f88:	7812      	ldrb	r2, [r2, #0]
 8019f8a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8019f8c:	4b94      	ldr	r3, [pc, #592]	; (801a1e0 <SX1276SetTxConfig+0x2fc>)
 8019f8e:	2228      	movs	r2, #40	; 0x28
 8019f90:	2108      	movs	r1, #8
 8019f92:	468c      	mov	ip, r1
 8019f94:	2108      	movs	r1, #8
 8019f96:	4688      	mov	r8, r1
 8019f98:	44b8      	add	r8, r7
 8019f9a:	44c4      	add	ip, r8
 8019f9c:	4462      	add	r2, ip
 8019f9e:	2124      	movs	r1, #36	; 0x24
 8019fa0:	7812      	ldrb	r2, [r2, #0]
 8019fa2:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8019fa4:	4b8e      	ldr	r3, [pc, #568]	; (801a1e0 <SX1276SetTxConfig+0x2fc>)
 8019fa6:	2234      	movs	r2, #52	; 0x34
 8019fa8:	2108      	movs	r1, #8
 8019faa:	468c      	mov	ip, r1
 8019fac:	2108      	movs	r1, #8
 8019fae:	4688      	mov	r8, r1
 8019fb0:	44b8      	add	r8, r7
 8019fb2:	44c4      	add	ip, r8
 8019fb4:	4462      	add	r2, ip
 8019fb6:	2125      	movs	r1, #37	; 0x25
 8019fb8:	7812      	ldrb	r2, [r2, #0]
 8019fba:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8019fbc:	4b88      	ldr	r3, [pc, #544]	; (801a1e0 <SX1276SetTxConfig+0x2fc>)
 8019fbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019fc0:	629a      	str	r2, [r3, #40]	; 0x28
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 8019fc2:	68b8      	ldr	r0, [r7, #8]
 8019fc4:	f7e8 fe34 	bl	8002c30 <__aeabi_ui2d>
 8019fc8:	2200      	movs	r2, #0
 8019fca:	4b86      	ldr	r3, [pc, #536]	; (801a1e4 <SX1276SetTxConfig+0x300>)
 8019fcc:	f7e7 fbc6 	bl	800175c <__aeabi_ddiv>
 8019fd0:	0002      	movs	r2, r0
 8019fd2:	000b      	movs	r3, r1
 8019fd4:	0010      	movs	r0, r2
 8019fd6:	0019      	movs	r1, r3
 8019fd8:	f7e6 fb1a 	bl	8000610 <__aeabi_d2uiz>
 8019fdc:	0003      	movs	r3, r0
 8019fde:	b29b      	uxth	r3, r3
 8019fe0:	60bb      	str	r3, [r7, #8]
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 8019fe2:	68bb      	ldr	r3, [r7, #8]
 8019fe4:	0a1b      	lsrs	r3, r3, #8
 8019fe6:	b2db      	uxtb	r3, r3
 8019fe8:	0019      	movs	r1, r3
 8019fea:	2004      	movs	r0, #4
 8019fec:	f000 ffee 	bl	801afcc <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 8019ff0:	68bb      	ldr	r3, [r7, #8]
 8019ff2:	b2db      	uxtb	r3, r3
 8019ff4:	0019      	movs	r1, r3
 8019ff6:	2005      	movs	r0, #5
 8019ff8:	f000 ffe8 	bl	801afcc <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8019ffc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019ffe:	f7e8 fe17 	bl	8002c30 <__aeabi_ui2d>
 801a002:	0002      	movs	r2, r0
 801a004:	000b      	movs	r3, r1
 801a006:	2000      	movs	r0, #0
 801a008:	4977      	ldr	r1, [pc, #476]	; (801a1e8 <SX1276SetTxConfig+0x304>)
 801a00a:	f7e7 fba7 	bl	800175c <__aeabi_ddiv>
 801a00e:	0002      	movs	r2, r0
 801a010:	000b      	movs	r3, r1
 801a012:	0010      	movs	r0, r2
 801a014:	0019      	movs	r1, r3
 801a016:	f7e6 fafb 	bl	8000610 <__aeabi_d2uiz>
 801a01a:	0003      	movs	r3, r0
 801a01c:	b29b      	uxth	r3, r3
 801a01e:	62bb      	str	r3, [r7, #40]	; 0x28
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 801a020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a022:	0a1b      	lsrs	r3, r3, #8
 801a024:	b2db      	uxtb	r3, r3
 801a026:	0019      	movs	r1, r3
 801a028:	2002      	movs	r0, #2
 801a02a:	f000 ffcf 	bl	801afcc <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 801a02e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a030:	b2db      	uxtb	r3, r3
 801a032:	0019      	movs	r1, r3
 801a034:	2003      	movs	r0, #3
 801a036:	f000 ffc9 	bl	801afcc <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 801a03a:	2308      	movs	r3, #8
 801a03c:	18fb      	adds	r3, r7, r3
 801a03e:	199b      	adds	r3, r3, r6
 801a040:	191b      	adds	r3, r3, r4
 801a042:	881b      	ldrh	r3, [r3, #0]
 801a044:	0a1b      	lsrs	r3, r3, #8
 801a046:	b29b      	uxth	r3, r3
 801a048:	b2db      	uxtb	r3, r3
 801a04a:	0019      	movs	r1, r3
 801a04c:	2025      	movs	r0, #37	; 0x25
 801a04e:	f000 ffbd 	bl	801afcc <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 801a052:	2308      	movs	r3, #8
 801a054:	18fb      	adds	r3, r7, r3
 801a056:	199b      	adds	r3, r3, r6
 801a058:	191b      	adds	r3, r3, r4
 801a05a:	881b      	ldrh	r3, [r3, #0]
 801a05c:	b2db      	uxtb	r3, r3
 801a05e:	0019      	movs	r1, r3
 801a060:	2026      	movs	r0, #38	; 0x26
 801a062:	f000 ffb3 	bl	801afcc <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 801a066:	2030      	movs	r0, #48	; 0x30
 801a068:	f000 ffc1 	bl	801afee <SX1276Read>
 801a06c:	0003      	movs	r3, r0
 801a06e:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 801a070:	226f      	movs	r2, #111	; 0x6f
 801a072:	4013      	ands	r3, r2
 801a074:	b25a      	sxtb	r2, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 801a076:	2308      	movs	r3, #8
 801a078:	18fb      	adds	r3, r7, r3
 801a07a:	199b      	adds	r3, r3, r6
 801a07c:	195b      	adds	r3, r3, r5
 801a07e:	781b      	ldrb	r3, [r3, #0]
 801a080:	2b00      	cmp	r3, #0
 801a082:	d001      	beq.n	801a088 <SX1276SetTxConfig+0x1a4>
 801a084:	2300      	movs	r3, #0
 801a086:	e001      	b.n	801a08c <SX1276SetTxConfig+0x1a8>
 801a088:	2380      	movs	r3, #128	; 0x80
 801a08a:	425b      	negs	r3, r3
 801a08c:	4313      	orrs	r3, r2
 801a08e:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 801a090:	2328      	movs	r3, #40	; 0x28
 801a092:	2108      	movs	r1, #8
 801a094:	468c      	mov	ip, r1
 801a096:	2108      	movs	r1, #8
 801a098:	4688      	mov	r8, r1
 801a09a:	44b8      	add	r8, r7
 801a09c:	44c4      	add	ip, r8
 801a09e:	4463      	add	r3, ip
 801a0a0:	781b      	ldrb	r3, [r3, #0]
 801a0a2:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 801a0a4:	b25b      	sxtb	r3, r3
 801a0a6:	4313      	orrs	r3, r2
 801a0a8:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 801a0aa:	b2db      	uxtb	r3, r3
 801a0ac:	0019      	movs	r1, r3
 801a0ae:	2030      	movs	r0, #48	; 0x30
 801a0b0:	f000 ff8c 	bl	801afcc <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 801a0b4:	2031      	movs	r0, #49	; 0x31
 801a0b6:	f000 ff9a 	bl	801afee <SX1276Read>
 801a0ba:	0003      	movs	r3, r0
 801a0bc:	001a      	movs	r2, r3
 801a0be:	2340      	movs	r3, #64	; 0x40
 801a0c0:	4313      	orrs	r3, r2
 801a0c2:	b2db      	uxtb	r3, r3
 801a0c4:	0019      	movs	r1, r3
 801a0c6:	2031      	movs	r0, #49	; 0x31
 801a0c8:	f000 ff80 	bl	801afcc <SX1276Write>
        break;
 801a0cc:	e146      	b.n	801a35c <SX1276SetTxConfig+0x478>
            SX1276.Settings.LoRa.Power = power;
 801a0ce:	4b44      	ldr	r3, [pc, #272]	; (801a1e0 <SX1276SetTxConfig+0x2fc>)
 801a0d0:	220e      	movs	r2, #14
 801a0d2:	18ba      	adds	r2, r7, r2
 801a0d4:	2140      	movs	r1, #64	; 0x40
 801a0d6:	7812      	ldrb	r2, [r2, #0]
 801a0d8:	545a      	strb	r2, [r3, r1]
            if( bandwidth > 2 )
 801a0da:	687b      	ldr	r3, [r7, #4]
 801a0dc:	2b02      	cmp	r3, #2
 801a0de:	d900      	bls.n	801a0e2 <SX1276SetTxConfig+0x1fe>
                while( 1 );
 801a0e0:	e7fe      	b.n	801a0e0 <SX1276SetTxConfig+0x1fc>
            bandwidth += 7;
 801a0e2:	687b      	ldr	r3, [r7, #4]
 801a0e4:	3307      	adds	r3, #7
 801a0e6:	607b      	str	r3, [r7, #4]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 801a0e8:	4b3d      	ldr	r3, [pc, #244]	; (801a1e0 <SX1276SetTxConfig+0x2fc>)
 801a0ea:	687a      	ldr	r2, [r7, #4]
 801a0ec:	645a      	str	r2, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 801a0ee:	4b3c      	ldr	r3, [pc, #240]	; (801a1e0 <SX1276SetTxConfig+0x2fc>)
 801a0f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a0f2:	649a      	str	r2, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.Coderate = coderate;
 801a0f4:	4b3a      	ldr	r3, [pc, #232]	; (801a1e0 <SX1276SetTxConfig+0x2fc>)
 801a0f6:	221c      	movs	r2, #28
 801a0f8:	2108      	movs	r1, #8
 801a0fa:	468c      	mov	ip, r1
 801a0fc:	2108      	movs	r1, #8
 801a0fe:	4688      	mov	r8, r1
 801a100:	44b8      	add	r8, r7
 801a102:	44c4      	add	ip, r8
 801a104:	4462      	add	r2, ip
 801a106:	214d      	movs	r1, #77	; 0x4d
 801a108:	7812      	ldrb	r2, [r2, #0]
 801a10a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 801a10c:	4b34      	ldr	r3, [pc, #208]	; (801a1e0 <SX1276SetTxConfig+0x2fc>)
 801a10e:	2220      	movs	r2, #32
 801a110:	2108      	movs	r1, #8
 801a112:	468c      	mov	ip, r1
 801a114:	2108      	movs	r1, #8
 801a116:	4688      	mov	r8, r1
 801a118:	44b8      	add	r8, r7
 801a11a:	44c4      	add	ip, r8
 801a11c:	4462      	add	r2, ip
 801a11e:	214e      	movs	r1, #78	; 0x4e
 801a120:	8812      	ldrh	r2, [r2, #0]
 801a122:	525a      	strh	r2, [r3, r1]
            SX1276.Settings.LoRa.FixLen = fixLen;
 801a124:	4b2e      	ldr	r3, [pc, #184]	; (801a1e0 <SX1276SetTxConfig+0x2fc>)
 801a126:	2224      	movs	r2, #36	; 0x24
 801a128:	2108      	movs	r1, #8
 801a12a:	468c      	mov	ip, r1
 801a12c:	2108      	movs	r1, #8
 801a12e:	4688      	mov	r8, r1
 801a130:	44b8      	add	r8, r7
 801a132:	44c4      	add	ip, r8
 801a134:	4462      	add	r2, ip
 801a136:	2150      	movs	r1, #80	; 0x50
 801a138:	7812      	ldrb	r2, [r2, #0]
 801a13a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 801a13c:	4b28      	ldr	r3, [pc, #160]	; (801a1e0 <SX1276SetTxConfig+0x2fc>)
 801a13e:	222c      	movs	r2, #44	; 0x2c
 801a140:	2108      	movs	r1, #8
 801a142:	468c      	mov	ip, r1
 801a144:	2108      	movs	r1, #8
 801a146:	4688      	mov	r8, r1
 801a148:	44b8      	add	r8, r7
 801a14a:	44c4      	add	ip, r8
 801a14c:	4462      	add	r2, ip
 801a14e:	2153      	movs	r1, #83	; 0x53
 801a150:	7812      	ldrb	r2, [r2, #0]
 801a152:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 801a154:	4b22      	ldr	r3, [pc, #136]	; (801a1e0 <SX1276SetTxConfig+0x2fc>)
 801a156:	2230      	movs	r2, #48	; 0x30
 801a158:	2108      	movs	r1, #8
 801a15a:	468c      	mov	ip, r1
 801a15c:	2108      	movs	r1, #8
 801a15e:	4688      	mov	r8, r1
 801a160:	44b8      	add	r8, r7
 801a162:	44c4      	add	ip, r8
 801a164:	4462      	add	r2, ip
 801a166:	2154      	movs	r1, #84	; 0x54
 801a168:	7812      	ldrb	r2, [r2, #0]
 801a16a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 801a16c:	4b1c      	ldr	r3, [pc, #112]	; (801a1e0 <SX1276SetTxConfig+0x2fc>)
 801a16e:	2228      	movs	r2, #40	; 0x28
 801a170:	2108      	movs	r1, #8
 801a172:	468c      	mov	ip, r1
 801a174:	2108      	movs	r1, #8
 801a176:	4688      	mov	r8, r1
 801a178:	44b8      	add	r8, r7
 801a17a:	44c4      	add	ip, r8
 801a17c:	4462      	add	r2, ip
 801a17e:	2152      	movs	r1, #82	; 0x52
 801a180:	7812      	ldrb	r2, [r2, #0]
 801a182:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 801a184:	4b16      	ldr	r3, [pc, #88]	; (801a1e0 <SX1276SetTxConfig+0x2fc>)
 801a186:	2234      	movs	r2, #52	; 0x34
 801a188:	2108      	movs	r1, #8
 801a18a:	468c      	mov	ip, r1
 801a18c:	2108      	movs	r1, #8
 801a18e:	4688      	mov	r8, r1
 801a190:	44b8      	add	r8, r7
 801a192:	44c4      	add	ip, r8
 801a194:	4462      	add	r2, ip
 801a196:	2155      	movs	r1, #85	; 0x55
 801a198:	7812      	ldrb	r2, [r2, #0]
 801a19a:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.TxTimeout = timeout;
 801a19c:	4b10      	ldr	r3, [pc, #64]	; (801a1e0 <SX1276SetTxConfig+0x2fc>)
 801a19e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a1a0:	659a      	str	r2, [r3, #88]	; 0x58
            if( datarate > 12 )
 801a1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a1a4:	2b0c      	cmp	r3, #12
 801a1a6:	d902      	bls.n	801a1ae <SX1276SetTxConfig+0x2ca>
                datarate = 12;
 801a1a8:	230c      	movs	r3, #12
 801a1aa:	62bb      	str	r3, [r7, #40]	; 0x28
 801a1ac:	e004      	b.n	801a1b8 <SX1276SetTxConfig+0x2d4>
            else if( datarate < 6 )
 801a1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a1b0:	2b05      	cmp	r3, #5
 801a1b2:	d801      	bhi.n	801a1b8 <SX1276SetTxConfig+0x2d4>
                datarate = 6;
 801a1b4:	2306      	movs	r3, #6
 801a1b6:	62bb      	str	r3, [r7, #40]	; 0x28
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801a1b8:	687b      	ldr	r3, [r7, #4]
 801a1ba:	2b07      	cmp	r3, #7
 801a1bc:	d105      	bne.n	801a1ca <SX1276SetTxConfig+0x2e6>
 801a1be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a1c0:	2b0b      	cmp	r3, #11
 801a1c2:	d008      	beq.n	801a1d6 <SX1276SetTxConfig+0x2f2>
 801a1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a1c6:	2b0c      	cmp	r3, #12
 801a1c8:	d005      	beq.n	801a1d6 <SX1276SetTxConfig+0x2f2>
 801a1ca:	687b      	ldr	r3, [r7, #4]
 801a1cc:	2b08      	cmp	r3, #8
 801a1ce:	d10d      	bne.n	801a1ec <SX1276SetTxConfig+0x308>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 801a1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a1d2:	2b0c      	cmp	r3, #12
 801a1d4:	d10a      	bne.n	801a1ec <SX1276SetTxConfig+0x308>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 801a1d6:	4b02      	ldr	r3, [pc, #8]	; (801a1e0 <SX1276SetTxConfig+0x2fc>)
 801a1d8:	224c      	movs	r2, #76	; 0x4c
 801a1da:	2101      	movs	r1, #1
 801a1dc:	5499      	strb	r1, [r3, r2]
 801a1de:	e009      	b.n	801a1f4 <SX1276SetTxConfig+0x310>
 801a1e0:	20001724 	.word	0x20001724
 801a1e4:	404e8480 	.word	0x404e8480
 801a1e8:	417e8480 	.word	0x417e8480
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 801a1ec:	4b5e      	ldr	r3, [pc, #376]	; (801a368 <SX1276SetTxConfig+0x484>)
 801a1ee:	224c      	movs	r2, #76	; 0x4c
 801a1f0:	2100      	movs	r1, #0
 801a1f2:	5499      	strb	r1, [r3, r2]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 801a1f4:	4b5c      	ldr	r3, [pc, #368]	; (801a368 <SX1276SetTxConfig+0x484>)
 801a1f6:	2253      	movs	r2, #83	; 0x53
 801a1f8:	5c9b      	ldrb	r3, [r3, r2]
 801a1fa:	2b00      	cmp	r3, #0
 801a1fc:	d013      	beq.n	801a226 <SX1276SetTxConfig+0x342>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 801a1fe:	2044      	movs	r0, #68	; 0x44
 801a200:	f000 fef5 	bl	801afee <SX1276Read>
 801a204:	0003      	movs	r3, r0
 801a206:	001a      	movs	r2, r3
 801a208:	2380      	movs	r3, #128	; 0x80
 801a20a:	425b      	negs	r3, r3
 801a20c:	4313      	orrs	r3, r2
 801a20e:	b2db      	uxtb	r3, r3
 801a210:	0019      	movs	r1, r3
 801a212:	2044      	movs	r0, #68	; 0x44
 801a214:	f000 feda 	bl	801afcc <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 801a218:	4b53      	ldr	r3, [pc, #332]	; (801a368 <SX1276SetTxConfig+0x484>)
 801a21a:	2254      	movs	r2, #84	; 0x54
 801a21c:	5c9b      	ldrb	r3, [r3, r2]
 801a21e:	0019      	movs	r1, r3
 801a220:	2024      	movs	r0, #36	; 0x24
 801a222:	f000 fed3 	bl	801afcc <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 801a226:	201d      	movs	r0, #29
 801a228:	f000 fee1 	bl	801afee <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 801a22c:	687b      	ldr	r3, [r7, #4]
 801a22e:	b2db      	uxtb	r3, r3
 801a230:	011b      	lsls	r3, r3, #4
 801a232:	b2da      	uxtb	r2, r3
 801a234:	231c      	movs	r3, #28
 801a236:	2108      	movs	r1, #8
 801a238:	468c      	mov	ip, r1
 801a23a:	2108      	movs	r1, #8
 801a23c:	4688      	mov	r8, r1
 801a23e:	44b8      	add	r8, r7
 801a240:	44c4      	add	ip, r8
 801a242:	4463      	add	r3, ip
 801a244:	781b      	ldrb	r3, [r3, #0]
 801a246:	18db      	adds	r3, r3, r3
 801a248:	b2db      	uxtb	r3, r3
 801a24a:	4313      	orrs	r3, r2
 801a24c:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 801a24e:	2324      	movs	r3, #36	; 0x24
 801a250:	2108      	movs	r1, #8
 801a252:	468c      	mov	ip, r1
 801a254:	2108      	movs	r1, #8
 801a256:	4688      	mov	r8, r1
 801a258:	44b8      	add	r8, r7
 801a25a:	44c4      	add	ip, r8
 801a25c:	4463      	add	r3, ip
 801a25e:	781b      	ldrb	r3, [r3, #0]
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 801a260:	4313      	orrs	r3, r2
 801a262:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 801a264:	0019      	movs	r1, r3
 801a266:	201d      	movs	r0, #29
 801a268:	f000 feb0 	bl	801afcc <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 801a26c:	201e      	movs	r0, #30
 801a26e:	f000 febe 	bl	801afee <SX1276Read>
 801a272:	0003      	movs	r3, r0
 801a274:	001a      	movs	r2, r3
                           RFLR_MODEMCONFIG2_SF_MASK &
 801a276:	230b      	movs	r3, #11
 801a278:	4013      	ands	r3, r2
 801a27a:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 801a27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a27e:	b2db      	uxtb	r3, r3
 801a280:	011b      	lsls	r3, r3, #4
 801a282:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
 801a284:	4313      	orrs	r3, r2
 801a286:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 801a288:	2328      	movs	r3, #40	; 0x28
 801a28a:	2108      	movs	r1, #8
 801a28c:	468c      	mov	ip, r1
 801a28e:	2108      	movs	r1, #8
 801a290:	4688      	mov	r8, r1
 801a292:	44b8      	add	r8, r7
 801a294:	44c4      	add	ip, r8
 801a296:	4463      	add	r3, ip
 801a298:	781b      	ldrb	r3, [r3, #0]
 801a29a:	009b      	lsls	r3, r3, #2
 801a29c:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 801a29e:	4313      	orrs	r3, r2
 801a2a0:	b2db      	uxtb	r3, r3
 801a2a2:	0019      	movs	r1, r3
 801a2a4:	201e      	movs	r0, #30
 801a2a6:	f000 fe91 	bl	801afcc <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 801a2aa:	2026      	movs	r0, #38	; 0x26
 801a2ac:	f000 fe9f 	bl	801afee <SX1276Read>
 801a2b0:	0003      	movs	r3, r0
 801a2b2:	b25b      	sxtb	r3, r3
 801a2b4:	2208      	movs	r2, #8
 801a2b6:	4393      	bics	r3, r2
 801a2b8:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 801a2ba:	4b2b      	ldr	r3, [pc, #172]	; (801a368 <SX1276SetTxConfig+0x484>)
 801a2bc:	214c      	movs	r1, #76	; 0x4c
 801a2be:	5c5b      	ldrb	r3, [r3, r1]
 801a2c0:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 801a2c2:	b25b      	sxtb	r3, r3
 801a2c4:	4313      	orrs	r3, r2
 801a2c6:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 801a2c8:	b2db      	uxtb	r3, r3
 801a2ca:	0019      	movs	r1, r3
 801a2cc:	2026      	movs	r0, #38	; 0x26
 801a2ce:	f000 fe7d 	bl	801afcc <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 801a2d2:	2420      	movs	r4, #32
 801a2d4:	2508      	movs	r5, #8
 801a2d6:	2308      	movs	r3, #8
 801a2d8:	18fb      	adds	r3, r7, r3
 801a2da:	195b      	adds	r3, r3, r5
 801a2dc:	191b      	adds	r3, r3, r4
 801a2de:	881b      	ldrh	r3, [r3, #0]
 801a2e0:	0a1b      	lsrs	r3, r3, #8
 801a2e2:	b29b      	uxth	r3, r3
 801a2e4:	b2db      	uxtb	r3, r3
 801a2e6:	0019      	movs	r1, r3
 801a2e8:	2020      	movs	r0, #32
 801a2ea:	f000 fe6f 	bl	801afcc <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 801a2ee:	2308      	movs	r3, #8
 801a2f0:	18fb      	adds	r3, r7, r3
 801a2f2:	195b      	adds	r3, r3, r5
 801a2f4:	191b      	adds	r3, r3, r4
 801a2f6:	881b      	ldrh	r3, [r3, #0]
 801a2f8:	b2db      	uxtb	r3, r3
 801a2fa:	0019      	movs	r1, r3
 801a2fc:	2021      	movs	r0, #33	; 0x21
 801a2fe:	f000 fe65 	bl	801afcc <SX1276Write>
            if( datarate == 6 )
 801a302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a304:	2b06      	cmp	r3, #6
 801a306:	d114      	bne.n	801a332 <SX1276SetTxConfig+0x44e>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 801a308:	2031      	movs	r0, #49	; 0x31
 801a30a:	f000 fe70 	bl	801afee <SX1276Read>
 801a30e:	0003      	movs	r3, r0
 801a310:	b25b      	sxtb	r3, r3
 801a312:	2207      	movs	r2, #7
 801a314:	4393      	bics	r3, r2
 801a316:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 801a318:	2205      	movs	r2, #5
 801a31a:	4313      	orrs	r3, r2
 801a31c:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 801a31e:	b2db      	uxtb	r3, r3
 801a320:	0019      	movs	r1, r3
 801a322:	2031      	movs	r0, #49	; 0x31
 801a324:	f000 fe52 	bl	801afcc <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 801a328:	210c      	movs	r1, #12
 801a32a:	2037      	movs	r0, #55	; 0x37
 801a32c:	f000 fe4e 	bl	801afcc <SX1276Write>
        break;
 801a330:	e013      	b.n	801a35a <SX1276SetTxConfig+0x476>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 801a332:	2031      	movs	r0, #49	; 0x31
 801a334:	f000 fe5b 	bl	801afee <SX1276Read>
 801a338:	0003      	movs	r3, r0
 801a33a:	b25b      	sxtb	r3, r3
 801a33c:	2207      	movs	r2, #7
 801a33e:	4393      	bics	r3, r2
 801a340:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 801a342:	2203      	movs	r2, #3
 801a344:	4313      	orrs	r3, r2
 801a346:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 801a348:	b2db      	uxtb	r3, r3
 801a34a:	0019      	movs	r1, r3
 801a34c:	2031      	movs	r0, #49	; 0x31
 801a34e:	f000 fe3d 	bl	801afcc <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 801a352:	210a      	movs	r1, #10
 801a354:	2037      	movs	r0, #55	; 0x37
 801a356:	f000 fe39 	bl	801afcc <SX1276Write>
        break;
 801a35a:	46c0      	nop			; (mov r8, r8)
}
 801a35c:	46c0      	nop			; (mov r8, r8)
 801a35e:	46bd      	mov	sp, r7
 801a360:	b004      	add	sp, #16
 801a362:	bc80      	pop	{r7}
 801a364:	46b8      	mov	r8, r7
 801a366:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a368:	20001724 	.word	0x20001724

0801a36c <SX1276GetTimeOnAir>:

uint32_t SX1276GetTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                              uint32_t datarate, uint8_t coderate,
                              uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                              bool crcOn )
{
 801a36c:	b590      	push	{r4, r7, lr}
 801a36e:	b08b      	sub	sp, #44	; 0x2c
 801a370:	af04      	add	r7, sp, #16
 801a372:	60b9      	str	r1, [r7, #8]
 801a374:	607a      	str	r2, [r7, #4]
 801a376:	0019      	movs	r1, r3
 801a378:	240f      	movs	r4, #15
 801a37a:	193b      	adds	r3, r7, r4
 801a37c:	1c02      	adds	r2, r0, #0
 801a37e:	701a      	strb	r2, [r3, #0]
 801a380:	230e      	movs	r3, #14
 801a382:	18fb      	adds	r3, r7, r3
 801a384:	1c0a      	adds	r2, r1, #0
 801a386:	701a      	strb	r2, [r3, #0]
    uint32_t numerator = 0;
 801a388:	2300      	movs	r3, #0
 801a38a:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 801a38c:	2301      	movs	r3, #1
 801a38e:	613b      	str	r3, [r7, #16]

    switch( modem )
 801a390:	193b      	adds	r3, r7, r4
 801a392:	781b      	ldrb	r3, [r3, #0]
 801a394:	2b00      	cmp	r3, #0
 801a396:	d002      	beq.n	801a39e <SX1276GetTimeOnAir+0x32>
 801a398:	2b01      	cmp	r3, #1
 801a39a:	d01a      	beq.n	801a3d2 <SX1276GetTimeOnAir+0x66>
 801a39c:	e03f      	b.n	801a41e <SX1276GetTimeOnAir+0xb2>
    {
    case MODEM_FSK:
        {
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 801a39e:	2334      	movs	r3, #52	; 0x34
 801a3a0:	18fb      	adds	r3, r7, r3
 801a3a2:	781c      	ldrb	r4, [r3, #0]
 801a3a4:	2330      	movs	r3, #48	; 0x30
 801a3a6:	18fb      	adds	r3, r7, r3
 801a3a8:	781a      	ldrb	r2, [r3, #0]
 801a3aa:	232c      	movs	r3, #44	; 0x2c
 801a3ac:	18fb      	adds	r3, r7, r3
 801a3ae:	7819      	ldrb	r1, [r3, #0]
 801a3b0:	2328      	movs	r3, #40	; 0x28
 801a3b2:	18fb      	adds	r3, r7, r3
 801a3b4:	8818      	ldrh	r0, [r3, #0]
 801a3b6:	0023      	movs	r3, r4
 801a3b8:	f000 ff7e 	bl	801b2b8 <SX1276GetGfskTimeOnAirNumerator>
 801a3bc:	0002      	movs	r2, r0
 801a3be:	0013      	movs	r3, r2
 801a3c0:	015b      	lsls	r3, r3, #5
 801a3c2:	1a9b      	subs	r3, r3, r2
 801a3c4:	009b      	lsls	r3, r3, #2
 801a3c6:	189b      	adds	r3, r3, r2
 801a3c8:	00db      	lsls	r3, r3, #3
 801a3ca:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 801a3cc:	687b      	ldr	r3, [r7, #4]
 801a3ce:	613b      	str	r3, [r7, #16]
        }
        break;
 801a3d0:	e025      	b.n	801a41e <SX1276GetTimeOnAir+0xb2>
    case MODEM_LORA:
        {
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 801a3d2:	2328      	movs	r3, #40	; 0x28
 801a3d4:	18fb      	adds	r3, r7, r3
 801a3d6:	881c      	ldrh	r4, [r3, #0]
 801a3d8:	230e      	movs	r3, #14
 801a3da:	18fb      	adds	r3, r7, r3
 801a3dc:	781a      	ldrb	r2, [r3, #0]
 801a3de:	6879      	ldr	r1, [r7, #4]
 801a3e0:	68b8      	ldr	r0, [r7, #8]
 801a3e2:	2334      	movs	r3, #52	; 0x34
 801a3e4:	18fb      	adds	r3, r7, r3
 801a3e6:	781b      	ldrb	r3, [r3, #0]
 801a3e8:	9302      	str	r3, [sp, #8]
 801a3ea:	2330      	movs	r3, #48	; 0x30
 801a3ec:	18fb      	adds	r3, r7, r3
 801a3ee:	781b      	ldrb	r3, [r3, #0]
 801a3f0:	9301      	str	r3, [sp, #4]
 801a3f2:	232c      	movs	r3, #44	; 0x2c
 801a3f4:	18fb      	adds	r3, r7, r3
 801a3f6:	781b      	ldrb	r3, [r3, #0]
 801a3f8:	9300      	str	r3, [sp, #0]
 801a3fa:	0023      	movs	r3, r4
 801a3fc:	f000 ff96 	bl	801b32c <SX1276GetLoRaTimeOnAirNumerator>
 801a400:	0002      	movs	r2, r0
 801a402:	0013      	movs	r3, r2
 801a404:	015b      	lsls	r3, r3, #5
 801a406:	1a9b      	subs	r3, r3, r2
 801a408:	009b      	lsls	r3, r3, #2
 801a40a:	189b      	adds	r3, r3, r2
 801a40c:	00db      	lsls	r3, r3, #3
 801a40e:	617b      	str	r3, [r7, #20]
                                                                   payloadLen, crcOn );
            denominator = SX1276GetLoRaBandwidthInHz( bandwidth );
 801a410:	68bb      	ldr	r3, [r7, #8]
 801a412:	0018      	movs	r0, r3
 801a414:	f000 ff1e 	bl	801b254 <SX1276GetLoRaBandwidthInHz>
 801a418:	0003      	movs	r3, r0
 801a41a:	613b      	str	r3, [r7, #16]
        }
        break;
 801a41c:	46c0      	nop			; (mov r8, r8)
    }
    // Perform integral ceil()
    return ( numerator + denominator - 1 ) / denominator;
 801a41e:	697a      	ldr	r2, [r7, #20]
 801a420:	693b      	ldr	r3, [r7, #16]
 801a422:	18d3      	adds	r3, r2, r3
 801a424:	3b01      	subs	r3, #1
 801a426:	6939      	ldr	r1, [r7, #16]
 801a428:	0018      	movs	r0, r3
 801a42a:	f7e5 fe7f 	bl	800012c <__udivsi3>
 801a42e:	0003      	movs	r3, r0
}
 801a430:	0018      	movs	r0, r3
 801a432:	46bd      	mov	sp, r7
 801a434:	b007      	add	sp, #28
 801a436:	bd90      	pop	{r4, r7, pc}

0801a438 <SX1276Send>:

void SX1276Send( uint8_t *buffer, uint8_t size )
{
 801a438:	b580      	push	{r7, lr}
 801a43a:	b084      	sub	sp, #16
 801a43c:	af00      	add	r7, sp, #0
 801a43e:	6078      	str	r0, [r7, #4]
 801a440:	000a      	movs	r2, r1
 801a442:	1cfb      	adds	r3, r7, #3
 801a444:	701a      	strb	r2, [r3, #0]
    uint32_t txTimeout = 0;
 801a446:	2300      	movs	r3, #0
 801a448:	60fb      	str	r3, [r7, #12]

    switch( SX1276.Settings.Modem )
 801a44a:	4b59      	ldr	r3, [pc, #356]	; (801a5b0 <SX1276Send+0x178>)
 801a44c:	795b      	ldrb	r3, [r3, #5]
 801a44e:	2b00      	cmp	r3, #0
 801a450:	d002      	beq.n	801a458 <SX1276Send+0x20>
 801a452:	2b01      	cmp	r3, #1
 801a454:	d04c      	beq.n	801a4f0 <SX1276Send+0xb8>
 801a456:	e0a2      	b.n	801a59e <SX1276Send+0x166>
    {
    case MODEM_FSK:
        {
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801a458:	4b55      	ldr	r3, [pc, #340]	; (801a5b0 <SX1276Send+0x178>)
 801a45a:	2200      	movs	r2, #0
 801a45c:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = size;
 801a45e:	1cfb      	adds	r3, r7, #3
 801a460:	781b      	ldrb	r3, [r3, #0]
 801a462:	b29a      	uxth	r2, r3
 801a464:	4b52      	ldr	r3, [pc, #328]	; (801a5b0 <SX1276Send+0x178>)
 801a466:	875a      	strh	r2, [r3, #58]	; 0x3a

            if( SX1276.Settings.Fsk.FixLen == false )
 801a468:	4b51      	ldr	r3, [pc, #324]	; (801a5b0 <SX1276Send+0x178>)
 801a46a:	2222      	movs	r2, #34	; 0x22
 801a46c:	5c9b      	ldrb	r3, [r3, r2]
 801a46e:	2201      	movs	r2, #1
 801a470:	4053      	eors	r3, r2
 801a472:	b2db      	uxtb	r3, r3
 801a474:	2b00      	cmp	r3, #0
 801a476:	d005      	beq.n	801a484 <SX1276Send+0x4c>
            {
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 801a478:	1cfb      	adds	r3, r7, #3
 801a47a:	2101      	movs	r1, #1
 801a47c:	0018      	movs	r0, r3
 801a47e:	f000 fe31 	bl	801b0e4 <SX1276WriteFifo>
 801a482:	e005      	b.n	801a490 <SX1276Send+0x58>
            }
            else
            {
                SX1276Write( REG_PAYLOADLENGTH, size );
 801a484:	1cfb      	adds	r3, r7, #3
 801a486:	781b      	ldrb	r3, [r3, #0]
 801a488:	0019      	movs	r1, r3
 801a48a:	2032      	movs	r0, #50	; 0x32
 801a48c:	f000 fd9e 	bl	801afcc <SX1276Write>
            }

            if( ( size > 0 ) && ( size <= 64 ) )
 801a490:	1cfb      	adds	r3, r7, #3
 801a492:	781b      	ldrb	r3, [r3, #0]
 801a494:	2b00      	cmp	r3, #0
 801a496:	d009      	beq.n	801a4ac <SX1276Send+0x74>
 801a498:	1cfb      	adds	r3, r7, #3
 801a49a:	781b      	ldrb	r3, [r3, #0]
 801a49c:	2b40      	cmp	r3, #64	; 0x40
 801a49e:	d805      	bhi.n	801a4ac <SX1276Send+0x74>
            {
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 801a4a0:	1cfb      	adds	r3, r7, #3
 801a4a2:	7819      	ldrb	r1, [r3, #0]
 801a4a4:	4b42      	ldr	r3, [pc, #264]	; (801a5b0 <SX1276Send+0x178>)
 801a4a6:	223f      	movs	r2, #63	; 0x3f
 801a4a8:	5499      	strb	r1, [r3, r2]
 801a4aa:	e00b      	b.n	801a4c4 <SX1276Send+0x8c>
            }
            else
            {
                RADIO_MEMCPY8( RxTxBuffer, buffer, size );
 801a4ac:	1cfb      	adds	r3, r7, #3
 801a4ae:	781b      	ldrb	r3, [r3, #0]
 801a4b0:	b29a      	uxth	r2, r3
 801a4b2:	6879      	ldr	r1, [r7, #4]
 801a4b4:	4b3f      	ldr	r3, [pc, #252]	; (801a5b4 <SX1276Send+0x17c>)
 801a4b6:	0018      	movs	r0, r3
 801a4b8:	f002 f838 	bl	801c52c <UTIL_MEM_cpy_8>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 801a4bc:	4b3c      	ldr	r3, [pc, #240]	; (801a5b0 <SX1276Send+0x178>)
 801a4be:	223f      	movs	r2, #63	; 0x3f
 801a4c0:	2120      	movs	r1, #32
 801a4c2:	5499      	strb	r1, [r3, r2]
            }

            // Write payload buffer
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 801a4c4:	4b3a      	ldr	r3, [pc, #232]	; (801a5b0 <SX1276Send+0x178>)
 801a4c6:	223f      	movs	r2, #63	; 0x3f
 801a4c8:	5c9a      	ldrb	r2, [r3, r2]
 801a4ca:	687b      	ldr	r3, [r7, #4]
 801a4cc:	0011      	movs	r1, r2
 801a4ce:	0018      	movs	r0, r3
 801a4d0:	f000 fe08 	bl	801b0e4 <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 801a4d4:	4b36      	ldr	r3, [pc, #216]	; (801a5b0 <SX1276Send+0x178>)
 801a4d6:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 801a4d8:	4b35      	ldr	r3, [pc, #212]	; (801a5b0 <SX1276Send+0x178>)
 801a4da:	213f      	movs	r1, #63	; 0x3f
 801a4dc:	5c5b      	ldrb	r3, [r3, r1]
 801a4de:	b29b      	uxth	r3, r3
 801a4e0:	18d3      	adds	r3, r2, r3
 801a4e2:	b29a      	uxth	r2, r3
 801a4e4:	4b32      	ldr	r3, [pc, #200]	; (801a5b0 <SX1276Send+0x178>)
 801a4e6:	879a      	strh	r2, [r3, #60]	; 0x3c
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 801a4e8:	4b31      	ldr	r3, [pc, #196]	; (801a5b0 <SX1276Send+0x178>)
 801a4ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a4ec:	60fb      	str	r3, [r7, #12]
        }
        break;
 801a4ee:	e056      	b.n	801a59e <SX1276Send+0x166>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 801a4f0:	4b2f      	ldr	r3, [pc, #188]	; (801a5b0 <SX1276Send+0x178>)
 801a4f2:	2255      	movs	r2, #85	; 0x55
 801a4f4:	5c9b      	ldrb	r3, [r3, r2]
 801a4f6:	2b00      	cmp	r3, #0
 801a4f8:	d011      	beq.n	801a51e <SX1276Send+0xe6>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 801a4fa:	2033      	movs	r0, #51	; 0x33
 801a4fc:	f000 fd77 	bl	801afee <SX1276Read>
 801a500:	0003      	movs	r3, r0
 801a502:	001a      	movs	r2, r3
 801a504:	2341      	movs	r3, #65	; 0x41
 801a506:	439a      	bics	r2, r3
 801a508:	0013      	movs	r3, r2
 801a50a:	b2db      	uxtb	r3, r3
 801a50c:	0019      	movs	r1, r3
 801a50e:	2033      	movs	r0, #51	; 0x33
 801a510:	f000 fd5c 	bl	801afcc <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 801a514:	2119      	movs	r1, #25
 801a516:	203b      	movs	r0, #59	; 0x3b
 801a518:	f000 fd58 	bl	801afcc <SX1276Write>
 801a51c:	e013      	b.n	801a546 <SX1276Send+0x10e>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 801a51e:	2033      	movs	r0, #51	; 0x33
 801a520:	f000 fd65 	bl	801afee <SX1276Read>
 801a524:	0003      	movs	r3, r0
 801a526:	b25b      	sxtb	r3, r3
 801a528:	2241      	movs	r2, #65	; 0x41
 801a52a:	4393      	bics	r3, r2
 801a52c:	b25b      	sxtb	r3, r3
 801a52e:	2201      	movs	r2, #1
 801a530:	4313      	orrs	r3, r2
 801a532:	b25b      	sxtb	r3, r3
 801a534:	b2db      	uxtb	r3, r3
 801a536:	0019      	movs	r1, r3
 801a538:	2033      	movs	r0, #51	; 0x33
 801a53a:	f000 fd47 	bl	801afcc <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 801a53e:	211d      	movs	r1, #29
 801a540:	203b      	movs	r0, #59	; 0x3b
 801a542:	f000 fd43 	bl	801afcc <SX1276Write>
            }

            SX1276.Settings.LoRaPacketHandler.Size = size;
 801a546:	1cfb      	adds	r3, r7, #3
 801a548:	7819      	ldrb	r1, [r3, #0]
 801a54a:	4b19      	ldr	r3, [pc, #100]	; (801a5b0 <SX1276Send+0x178>)
 801a54c:	2264      	movs	r2, #100	; 0x64
 801a54e:	5499      	strb	r1, [r3, r2]

            // Initializes the payload size
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 801a550:	1cfb      	adds	r3, r7, #3
 801a552:	781b      	ldrb	r3, [r3, #0]
 801a554:	0019      	movs	r1, r3
 801a556:	2022      	movs	r0, #34	; 0x22
 801a558:	f000 fd38 	bl	801afcc <SX1276Write>

            // Full buffer used for Tx
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 801a55c:	2100      	movs	r1, #0
 801a55e:	200e      	movs	r0, #14
 801a560:	f000 fd34 	bl	801afcc <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 801a564:	2100      	movs	r1, #0
 801a566:	200d      	movs	r0, #13
 801a568:	f000 fd30 	bl	801afcc <SX1276Write>

            // FIFO operations can not take place in Sleep mode
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 801a56c:	2001      	movs	r0, #1
 801a56e:	f000 fd3e 	bl	801afee <SX1276Read>
 801a572:	0003      	movs	r3, r0
 801a574:	001a      	movs	r2, r3
 801a576:	23f8      	movs	r3, #248	; 0xf8
 801a578:	439a      	bics	r2, r3
 801a57a:	1e13      	subs	r3, r2, #0
 801a57c:	d104      	bne.n	801a588 <SX1276Send+0x150>
            {
                SX1276SetStby( );
 801a57e:	f000 f94f 	bl	801a820 <SX1276SetStby>
                RADIO_DELAY_MS( 1 );
 801a582:	2001      	movs	r0, #1
 801a584:	f7ea fded 	bl	8005162 <HAL_Delay>
            }
            // Write payload buffer
            SX1276WriteFifo( buffer, size );
 801a588:	1cfb      	adds	r3, r7, #3
 801a58a:	781a      	ldrb	r2, [r3, #0]
 801a58c:	687b      	ldr	r3, [r7, #4]
 801a58e:	0011      	movs	r1, r2
 801a590:	0018      	movs	r0, r3
 801a592:	f000 fda7 	bl	801b0e4 <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 801a596:	4b06      	ldr	r3, [pc, #24]	; (801a5b0 <SX1276Send+0x178>)
 801a598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a59a:	60fb      	str	r3, [r7, #12]
        }
        break;
 801a59c:	46c0      	nop			; (mov r8, r8)
    }

    SX1276SetTx( txTimeout );
 801a59e:	68fb      	ldr	r3, [r7, #12]
 801a5a0:	0018      	movs	r0, r3
 801a5a2:	f000 faf3 	bl	801ab8c <SX1276SetTx>
}
 801a5a6:	46c0      	nop			; (mov r8, r8)
 801a5a8:	46bd      	mov	sp, r7
 801a5aa:	b004      	add	sp, #16
 801a5ac:	bd80      	pop	{r7, pc}
 801a5ae:	46c0      	nop			; (mov r8, r8)
 801a5b0:	20001724 	.word	0x20001724
 801a5b4:	20000e80 	.word	0x20000e80

0801a5b8 <SX1276SetRfTxPower>:


static void SX1276SetRfTxPower( int8_t power )
{
 801a5b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a5ba:	b085      	sub	sp, #20
 801a5bc:	af00      	add	r7, sp, #0
 801a5be:	0002      	movs	r2, r0
 801a5c0:	1dfb      	adds	r3, r7, #7
 801a5c2:	701a      	strb	r2, [r3, #0]
    uint8_t paConfig = 0;
 801a5c4:	210f      	movs	r1, #15
 801a5c6:	187b      	adds	r3, r7, r1
 801a5c8:	2200      	movs	r2, #0
 801a5ca:	701a      	strb	r2, [r3, #0]
    uint8_t paDac = 0;
 801a5cc:	250e      	movs	r5, #14
 801a5ce:	197b      	adds	r3, r7, r5
 801a5d0:	2200      	movs	r2, #0
 801a5d2:	701a      	strb	r2, [r3, #0]
    uint8_t board_config = 0;
 801a5d4:	260d      	movs	r6, #13
 801a5d6:	19bb      	adds	r3, r7, r6
 801a5d8:	2200      	movs	r2, #0
 801a5da:	701a      	strb	r2, [r3, #0]

    paConfig = SX1276Read( REG_PACONFIG );
 801a5dc:	187c      	adds	r4, r7, r1
 801a5de:	2009      	movs	r0, #9
 801a5e0:	f000 fd05 	bl	801afee <SX1276Read>
 801a5e4:	0003      	movs	r3, r0
 801a5e6:	7023      	strb	r3, [r4, #0]
    paDac = SX1276Read( REG_PADAC );
 801a5e8:	197c      	adds	r4, r7, r5
 801a5ea:	204d      	movs	r0, #77	; 0x4d
 801a5ec:	f000 fcff 	bl	801afee <SX1276Read>
 801a5f0:	0003      	movs	r3, r0
 801a5f2:	7023      	strb	r3, [r4, #0]
    switch( Sx_Board_GetPaSelect(SX1276.Settings.Channel) )
 801a5f4:	4b78      	ldr	r3, [pc, #480]	; (801a7d8 <SX1276SetRfTxPower+0x220>)
 801a5f6:	689b      	ldr	r3, [r3, #8]
 801a5f8:	0018      	movs	r0, r3
 801a5fa:	f7eb fdc1 	bl	8006180 <CMWX1ZZABZ0XX_RADIO_GetPaSelect>
 801a5fe:	0003      	movs	r3, r0
 801a600:	2b03      	cmp	r3, #3
 801a602:	d01f      	beq.n	801a644 <SX1276SetRfTxPower+0x8c>
 801a604:	dc23      	bgt.n	801a64e <SX1276SetRfTxPower+0x96>
 801a606:	2b02      	cmp	r3, #2
 801a608:	d008      	beq.n	801a61c <SX1276SetRfTxPower+0x64>
 801a60a:	dc20      	bgt.n	801a64e <SX1276SetRfTxPower+0x96>
 801a60c:	2b00      	cmp	r3, #0
 801a60e:	d00a      	beq.n	801a626 <SX1276SetRfTxPower+0x6e>
 801a610:	2b01      	cmp	r3, #1
 801a612:	d11c      	bne.n	801a64e <SX1276SetRfTxPower+0x96>
    {
      case CONF_RFO_LP:
        board_config = RF_PACONFIG_PASELECT_RFO;
 801a614:	19bb      	adds	r3, r7, r6
 801a616:	2200      	movs	r2, #0
 801a618:	701a      	strb	r2, [r3, #0]
        break;
 801a61a:	e019      	b.n	801a650 <SX1276SetRfTxPower+0x98>
      case CONF_RFO_HP:
        board_config = RF_PACONFIG_PASELECT_PABOOST;
 801a61c:	230d      	movs	r3, #13
 801a61e:	18fb      	adds	r3, r7, r3
 801a620:	2280      	movs	r2, #128	; 0x80
 801a622:	701a      	strb	r2, [r3, #0]
        break;
 801a624:	e014      	b.n	801a650 <SX1276SetRfTxPower+0x98>
      case CONF_RFO_LP_HP:
        if (power > 14)
 801a626:	1dfb      	adds	r3, r7, #7
 801a628:	781b      	ldrb	r3, [r3, #0]
 801a62a:	b25b      	sxtb	r3, r3
 801a62c:	2b0e      	cmp	r3, #14
 801a62e:	dd04      	ble.n	801a63a <SX1276SetRfTxPower+0x82>
        {
          board_config = RF_PACONFIG_PASELECT_PABOOST;
 801a630:	230d      	movs	r3, #13
 801a632:	18fb      	adds	r3, r7, r3
 801a634:	2280      	movs	r2, #128	; 0x80
 801a636:	701a      	strb	r2, [r3, #0]
        }
        else
        {
          board_config = RF_PACONFIG_PASELECT_RFO;
        }
        break;
 801a638:	e00a      	b.n	801a650 <SX1276SetRfTxPower+0x98>
          board_config = RF_PACONFIG_PASELECT_RFO;
 801a63a:	230d      	movs	r3, #13
 801a63c:	18fb      	adds	r3, r7, r3
 801a63e:	2200      	movs	r2, #0
 801a640:	701a      	strb	r2, [r3, #0]
        break;
 801a642:	e005      	b.n	801a650 <SX1276SetRfTxPower+0x98>
        case CONF_RFO_LF:
          board_config=RF_PACONFIG_PASELECT_PABOOST;
 801a644:	230d      	movs	r3, #13
 801a646:	18fb      	adds	r3, r7, r3
 801a648:	2280      	movs	r2, #128	; 0x80
 801a64a:	701a      	strb	r2, [r3, #0]
          break;
 801a64c:	e000      	b.n	801a650 <SX1276SetRfTxPower+0x98>
        default:
        break;
 801a64e:	46c0      	nop			; (mov r8, r8)
    }

    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | board_config;
 801a650:	210f      	movs	r1, #15
 801a652:	187b      	adds	r3, r7, r1
 801a654:	781b      	ldrb	r3, [r3, #0]
 801a656:	b25b      	sxtb	r3, r3
 801a658:	227f      	movs	r2, #127	; 0x7f
 801a65a:	4013      	ands	r3, r2
 801a65c:	b25a      	sxtb	r2, r3
 801a65e:	230d      	movs	r3, #13
 801a660:	18fb      	adds	r3, r7, r3
 801a662:	781b      	ldrb	r3, [r3, #0]
 801a664:	b25b      	sxtb	r3, r3
 801a666:	4313      	orrs	r3, r2
 801a668:	b25a      	sxtb	r2, r3
 801a66a:	187b      	adds	r3, r7, r1
 801a66c:	701a      	strb	r2, [r3, #0]

    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 801a66e:	187b      	adds	r3, r7, r1
 801a670:	781b      	ldrb	r3, [r3, #0]
 801a672:	b25b      	sxtb	r3, r3
 801a674:	2b00      	cmp	r3, #0
 801a676:	da67      	bge.n	801a748 <SX1276SetRfTxPower+0x190>
    {
        if( power > 17 )
 801a678:	1dfb      	adds	r3, r7, #7
 801a67a:	781b      	ldrb	r3, [r3, #0]
 801a67c:	b25b      	sxtb	r3, r3
 801a67e:	2b11      	cmp	r3, #17
 801a680:	dd07      	ble.n	801a692 <SX1276SetRfTxPower+0xda>
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 801a682:	220e      	movs	r2, #14
 801a684:	18bb      	adds	r3, r7, r2
 801a686:	18ba      	adds	r2, r7, r2
 801a688:	7812      	ldrb	r2, [r2, #0]
 801a68a:	2107      	movs	r1, #7
 801a68c:	430a      	orrs	r2, r1
 801a68e:	701a      	strb	r2, [r3, #0]
 801a690:	e00b      	b.n	801a6aa <SX1276SetRfTxPower+0xf2>
        }
        else
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 801a692:	210e      	movs	r1, #14
 801a694:	187b      	adds	r3, r7, r1
 801a696:	781b      	ldrb	r3, [r3, #0]
 801a698:	b25b      	sxtb	r3, r3
 801a69a:	2207      	movs	r2, #7
 801a69c:	4393      	bics	r3, r2
 801a69e:	b25b      	sxtb	r3, r3
 801a6a0:	2204      	movs	r2, #4
 801a6a2:	4313      	orrs	r3, r2
 801a6a4:	b25a      	sxtb	r2, r3
 801a6a6:	187b      	adds	r3, r7, r1
 801a6a8:	701a      	strb	r2, [r3, #0]
        }
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 801a6aa:	230e      	movs	r3, #14
 801a6ac:	18fb      	adds	r3, r7, r3
 801a6ae:	781b      	ldrb	r3, [r3, #0]
 801a6b0:	2207      	movs	r2, #7
 801a6b2:	4013      	ands	r3, r2
 801a6b4:	2b07      	cmp	r3, #7
 801a6b6:	d123      	bne.n	801a700 <SX1276SetRfTxPower+0x148>
        {
            if( power < 5 )
 801a6b8:	1dfb      	adds	r3, r7, #7
 801a6ba:	781b      	ldrb	r3, [r3, #0]
 801a6bc:	b25b      	sxtb	r3, r3
 801a6be:	2b04      	cmp	r3, #4
 801a6c0:	dc02      	bgt.n	801a6c8 <SX1276SetRfTxPower+0x110>
            {
                power = 5;
 801a6c2:	1dfb      	adds	r3, r7, #7
 801a6c4:	2205      	movs	r2, #5
 801a6c6:	701a      	strb	r2, [r3, #0]
            }
            if( power > 20 )
 801a6c8:	1dfb      	adds	r3, r7, #7
 801a6ca:	781b      	ldrb	r3, [r3, #0]
 801a6cc:	b25b      	sxtb	r3, r3
 801a6ce:	2b14      	cmp	r3, #20
 801a6d0:	dd02      	ble.n	801a6d8 <SX1276SetRfTxPower+0x120>
            {
                power = 20;
 801a6d2:	1dfb      	adds	r3, r7, #7
 801a6d4:	2214      	movs	r2, #20
 801a6d6:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 801a6d8:	200f      	movs	r0, #15
 801a6da:	183b      	adds	r3, r7, r0
 801a6dc:	781b      	ldrb	r3, [r3, #0]
 801a6de:	b25b      	sxtb	r3, r3
 801a6e0:	220f      	movs	r2, #15
 801a6e2:	4393      	bics	r3, r2
 801a6e4:	b25a      	sxtb	r2, r3
 801a6e6:	1dfb      	adds	r3, r7, #7
 801a6e8:	781b      	ldrb	r3, [r3, #0]
 801a6ea:	3b05      	subs	r3, #5
 801a6ec:	b2db      	uxtb	r3, r3
 801a6ee:	b25b      	sxtb	r3, r3
 801a6f0:	210f      	movs	r1, #15
 801a6f2:	400b      	ands	r3, r1
 801a6f4:	b25b      	sxtb	r3, r3
 801a6f6:	4313      	orrs	r3, r2
 801a6f8:	b25a      	sxtb	r2, r3
 801a6fa:	183b      	adds	r3, r7, r0
 801a6fc:	701a      	strb	r2, [r3, #0]
 801a6fe:	e059      	b.n	801a7b4 <SX1276SetRfTxPower+0x1fc>
        }
        else
        {
            if( power < 2 )
 801a700:	1dfb      	adds	r3, r7, #7
 801a702:	781b      	ldrb	r3, [r3, #0]
 801a704:	b25b      	sxtb	r3, r3
 801a706:	2b01      	cmp	r3, #1
 801a708:	dc02      	bgt.n	801a710 <SX1276SetRfTxPower+0x158>
            {
                power = 2;
 801a70a:	1dfb      	adds	r3, r7, #7
 801a70c:	2202      	movs	r2, #2
 801a70e:	701a      	strb	r2, [r3, #0]
            }
            if( power > 17 )
 801a710:	1dfb      	adds	r3, r7, #7
 801a712:	781b      	ldrb	r3, [r3, #0]
 801a714:	b25b      	sxtb	r3, r3
 801a716:	2b11      	cmp	r3, #17
 801a718:	dd02      	ble.n	801a720 <SX1276SetRfTxPower+0x168>
            {
                power = 17;
 801a71a:	1dfb      	adds	r3, r7, #7
 801a71c:	2211      	movs	r2, #17
 801a71e:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 801a720:	200f      	movs	r0, #15
 801a722:	183b      	adds	r3, r7, r0
 801a724:	781b      	ldrb	r3, [r3, #0]
 801a726:	b25b      	sxtb	r3, r3
 801a728:	220f      	movs	r2, #15
 801a72a:	4393      	bics	r3, r2
 801a72c:	b25a      	sxtb	r2, r3
 801a72e:	1dfb      	adds	r3, r7, #7
 801a730:	781b      	ldrb	r3, [r3, #0]
 801a732:	3b02      	subs	r3, #2
 801a734:	b2db      	uxtb	r3, r3
 801a736:	b25b      	sxtb	r3, r3
 801a738:	210f      	movs	r1, #15
 801a73a:	400b      	ands	r3, r1
 801a73c:	b25b      	sxtb	r3, r3
 801a73e:	4313      	orrs	r3, r2
 801a740:	b25a      	sxtb	r2, r3
 801a742:	183b      	adds	r3, r7, r0
 801a744:	701a      	strb	r2, [r3, #0]
 801a746:	e035      	b.n	801a7b4 <SX1276SetRfTxPower+0x1fc>
        }
    }
    else
    {
        if( power > 0 )
 801a748:	1dfb      	adds	r3, r7, #7
 801a74a:	781b      	ldrb	r3, [r3, #0]
 801a74c:	b25b      	sxtb	r3, r3
 801a74e:	2b00      	cmp	r3, #0
 801a750:	dd18      	ble.n	801a784 <SX1276SetRfTxPower+0x1cc>
        {
            if( power > 15 )
 801a752:	1dfb      	adds	r3, r7, #7
 801a754:	781b      	ldrb	r3, [r3, #0]
 801a756:	b25b      	sxtb	r3, r3
 801a758:	2b0f      	cmp	r3, #15
 801a75a:	dd02      	ble.n	801a762 <SX1276SetRfTxPower+0x1aa>
            {
                power = 15;
 801a75c:	1dfb      	adds	r3, r7, #7
 801a75e:	220f      	movs	r2, #15
 801a760:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
 801a762:	210f      	movs	r1, #15
 801a764:	187b      	adds	r3, r7, r1
 801a766:	781b      	ldrb	r3, [r3, #0]
 801a768:	b25b      	sxtb	r3, r3
 801a76a:	227f      	movs	r2, #127	; 0x7f
 801a76c:	4393      	bics	r3, r2
 801a76e:	b25b      	sxtb	r3, r3
 801a770:	2270      	movs	r2, #112	; 0x70
 801a772:	4313      	orrs	r3, r2
 801a774:	b25a      	sxtb	r2, r3
 801a776:	1dfb      	adds	r3, r7, #7
 801a778:	781b      	ldrb	r3, [r3, #0]
 801a77a:	4313      	orrs	r3, r2
 801a77c:	b25a      	sxtb	r2, r3
 801a77e:	187b      	adds	r3, r7, r1
 801a780:	701a      	strb	r2, [r3, #0]
 801a782:	e017      	b.n	801a7b4 <SX1276SetRfTxPower+0x1fc>
        }
        else
        {
            if( power < -4 )
 801a784:	1dfb      	adds	r3, r7, #7
 801a786:	781b      	ldrb	r3, [r3, #0]
 801a788:	b25b      	sxtb	r3, r3
 801a78a:	3304      	adds	r3, #4
 801a78c:	da02      	bge.n	801a794 <SX1276SetRfTxPower+0x1dc>
            {
                power = -4;
 801a78e:	1dfb      	adds	r3, r7, #7
 801a790:	22fc      	movs	r2, #252	; 0xfc
 801a792:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 801a794:	210f      	movs	r1, #15
 801a796:	187b      	adds	r3, r7, r1
 801a798:	781b      	ldrb	r3, [r3, #0]
 801a79a:	b25b      	sxtb	r3, r3
 801a79c:	227f      	movs	r2, #127	; 0x7f
 801a79e:	4393      	bics	r3, r2
 801a7a0:	b25a      	sxtb	r2, r3
 801a7a2:	1dfb      	adds	r3, r7, #7
 801a7a4:	781b      	ldrb	r3, [r3, #0]
 801a7a6:	3304      	adds	r3, #4
 801a7a8:	b2db      	uxtb	r3, r3
 801a7aa:	b25b      	sxtb	r3, r3
 801a7ac:	4313      	orrs	r3, r2
 801a7ae:	b25a      	sxtb	r2, r3
 801a7b0:	187b      	adds	r3, r7, r1
 801a7b2:	701a      	strb	r2, [r3, #0]
        }
    }
    SX1276Write( REG_PACONFIG, paConfig );
 801a7b4:	230f      	movs	r3, #15
 801a7b6:	18fb      	adds	r3, r7, r3
 801a7b8:	781b      	ldrb	r3, [r3, #0]
 801a7ba:	0019      	movs	r1, r3
 801a7bc:	2009      	movs	r0, #9
 801a7be:	f000 fc05 	bl	801afcc <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 801a7c2:	230e      	movs	r3, #14
 801a7c4:	18fb      	adds	r3, r7, r3
 801a7c6:	781b      	ldrb	r3, [r3, #0]
 801a7c8:	0019      	movs	r1, r3
 801a7ca:	204d      	movs	r0, #77	; 0x4d
 801a7cc:	f000 fbfe 	bl	801afcc <SX1276Write>
}
 801a7d0:	46c0      	nop			; (mov r8, r8)
 801a7d2:	46bd      	mov	sp, r7
 801a7d4:	b005      	add	sp, #20
 801a7d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a7d8:	20001724 	.word	0x20001724

0801a7dc <SX1276SetSleep>:

void SX1276SetSleep( void )
{
 801a7dc:	b580      	push	{r7, lr}
 801a7de:	af00      	add	r7, sp, #0
	//SX1276SetOpMode( RF_OPMODE_SLEEP );   // new
    TimerStop( &RxTimeoutTimer );
 801a7e0:	4b0b      	ldr	r3, [pc, #44]	; (801a810 <SX1276SetSleep+0x34>)
 801a7e2:	0018      	movs	r0, r3
 801a7e4:	f002 fa66 	bl	801ccb4 <UTIL_TIMER_Stop>
    TimerStop( &TxTimeoutTimer );
 801a7e8:	4b0a      	ldr	r3, [pc, #40]	; (801a814 <SX1276SetSleep+0x38>)
 801a7ea:	0018      	movs	r0, r3
 801a7ec:	f002 fa62 	bl	801ccb4 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutSyncWord );
 801a7f0:	4b09      	ldr	r3, [pc, #36]	; (801a818 <SX1276SetSleep+0x3c>)
 801a7f2:	0018      	movs	r0, r3
 801a7f4:	f002 fa5e 	bl	801ccb4 <UTIL_TIMER_Stop>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 801a7f8:	2000      	movs	r0, #0
 801a7fa:	f000 fb20 	bl	801ae3e <SX1276SetOpMode>

    // Disable TCXO radio is in SLEEP mode
    Sx_Board_SetXO( RESET );
 801a7fe:	2000      	movs	r0, #0
 801a800:	f7eb fb0a 	bl	8005e18 <CMWX1ZZABZ0XX_RADIO_SetXO>

    SX1276.Settings.State = RF_IDLE;
 801a804:	4b05      	ldr	r3, [pc, #20]	; (801a81c <SX1276SetSleep+0x40>)
 801a806:	2200      	movs	r2, #0
 801a808:	711a      	strb	r2, [r3, #4]
}
 801a80a:	46c0      	nop			; (mov r8, r8)
 801a80c:	46bd      	mov	sp, r7
 801a80e:	bd80      	pop	{r7, pc}
 801a810:	2000178c 	.word	0x2000178c
 801a814:	200016f4 	.word	0x200016f4
 801a818:	2000170c 	.word	0x2000170c
 801a81c:	20001724 	.word	0x20001724

0801a820 <SX1276SetStby>:

void SX1276SetStby( void )
{
 801a820:	b580      	push	{r7, lr}
 801a822:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 801a824:	4b0a      	ldr	r3, [pc, #40]	; (801a850 <SX1276SetStby+0x30>)
 801a826:	0018      	movs	r0, r3
 801a828:	f002 fa44 	bl	801ccb4 <UTIL_TIMER_Stop>
    TimerStop( &TxTimeoutTimer );
 801a82c:	4b09      	ldr	r3, [pc, #36]	; (801a854 <SX1276SetStby+0x34>)
 801a82e:	0018      	movs	r0, r3
 801a830:	f002 fa40 	bl	801ccb4 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutSyncWord );
 801a834:	4b08      	ldr	r3, [pc, #32]	; (801a858 <SX1276SetStby+0x38>)
 801a836:	0018      	movs	r0, r3
 801a838:	f002 fa3c 	bl	801ccb4 <UTIL_TIMER_Stop>

    SX1276SetOpMode( RF_OPMODE_STANDBY );
 801a83c:	2001      	movs	r0, #1
 801a83e:	f000 fafe 	bl	801ae3e <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 801a842:	4b06      	ldr	r3, [pc, #24]	; (801a85c <SX1276SetStby+0x3c>)
 801a844:	2200      	movs	r2, #0
 801a846:	711a      	strb	r2, [r3, #4]
}
 801a848:	46c0      	nop			; (mov r8, r8)
 801a84a:	46bd      	mov	sp, r7
 801a84c:	bd80      	pop	{r7, pc}
 801a84e:	46c0      	nop			; (mov r8, r8)
 801a850:	2000178c 	.word	0x2000178c
 801a854:	200016f4 	.word	0x200016f4
 801a858:	2000170c 	.word	0x2000170c
 801a85c:	20001724 	.word	0x20001724

0801a860 <SX1276SetRx>:

void SX1276SetRx( uint32_t timeout )
{
 801a860:	b580      	push	{r7, lr}
 801a862:	b084      	sub	sp, #16
 801a864:	af00      	add	r7, sp, #0
 801a866:	6078      	str	r0, [r7, #4]
    bool rxContinuous = false;
 801a868:	230f      	movs	r3, #15
 801a86a:	18fb      	adds	r3, r7, r3
 801a86c:	2200      	movs	r2, #0
 801a86e:	701a      	strb	r2, [r3, #0]
    TimerStop( &TxTimeoutTimer );
 801a870:	4bba      	ldr	r3, [pc, #744]	; (801ab5c <SX1276SetRx+0x2fc>)
 801a872:	0018      	movs	r0, r3
 801a874:	f002 fa1e 	bl	801ccb4 <UTIL_TIMER_Stop>

    switch( SX1276.Settings.Modem )
 801a878:	4bb9      	ldr	r3, [pc, #740]	; (801ab60 <SX1276SetRx+0x300>)
 801a87a:	795b      	ldrb	r3, [r3, #5]
 801a87c:	2b00      	cmp	r3, #0
 801a87e:	d002      	beq.n	801a886 <SX1276SetRx+0x26>
 801a880:	2b01      	cmp	r3, #1
 801a882:	d041      	beq.n	801a908 <SX1276SetRx+0xa8>
 801a884:	e127      	b.n	801aad6 <SX1276SetRx+0x276>
    {
    case MODEM_FSK:
        {
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 801a886:	230f      	movs	r3, #15
 801a888:	18fb      	adds	r3, r7, r3
 801a88a:	4ab5      	ldr	r2, [pc, #724]	; (801ab60 <SX1276SetRx+0x300>)
 801a88c:	2126      	movs	r1, #38	; 0x26
 801a88e:	5c52      	ldrb	r2, [r2, r1]
 801a890:	701a      	strb	r2, [r3, #0]
            // DIO1=FifoLevel
            // DIO2=SyncAddr
            // DIO3=FifoEmpty
            // DIO4=Preamble
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 801a892:	2040      	movs	r0, #64	; 0x40
 801a894:	f000 fbab 	bl	801afee <SX1276Read>
 801a898:	0003      	movs	r3, r0
 801a89a:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
                                                                            RF_DIOMAPPING1_DIO0_00 |
 801a89c:	2203      	movs	r2, #3
 801a89e:	4013      	ands	r3, r2
 801a8a0:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_00 |
 801a8a2:	220c      	movs	r2, #12
 801a8a4:	4313      	orrs	r3, r2
 801a8a6:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 801a8a8:	b2db      	uxtb	r3, r3
 801a8aa:	0019      	movs	r1, r3
 801a8ac:	2040      	movs	r0, #64	; 0x40
 801a8ae:	f000 fb8d 	bl	801afcc <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO2_11 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 801a8b2:	2041      	movs	r0, #65	; 0x41
 801a8b4:	f000 fb9b 	bl	801afee <SX1276Read>
 801a8b8:	0003      	movs	r3, r0
 801a8ba:	001a      	movs	r2, r3
 801a8bc:	233f      	movs	r3, #63	; 0x3f
 801a8be:	425b      	negs	r3, r3
 801a8c0:	4313      	orrs	r3, r2
 801a8c2:	b2db      	uxtb	r3, r3
 801a8c4:	0019      	movs	r1, r3
 801a8c6:	2041      	movs	r0, #65	; 0x41
 801a8c8:	f000 fb80 	bl	801afcc <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) |
                                                                            RF_DIOMAPPING2_DIO4_11 |
                                                                            RF_DIOMAPPING2_MAP_PREAMBLEDETECT );

            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 801a8cc:	2035      	movs	r0, #53	; 0x35
 801a8ce:	f000 fb8e 	bl	801afee <SX1276Read>
 801a8d2:	0003      	movs	r3, r0
 801a8d4:	001a      	movs	r2, r3
 801a8d6:	233f      	movs	r3, #63	; 0x3f
 801a8d8:	4013      	ands	r3, r2
 801a8da:	b2d9      	uxtb	r1, r3
 801a8dc:	4ba0      	ldr	r3, [pc, #640]	; (801ab60 <SX1276SetRx+0x300>)
 801a8de:	223e      	movs	r2, #62	; 0x3e
 801a8e0:	5499      	strb	r1, [r3, r2]

            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 801a8e2:	211e      	movs	r1, #30
 801a8e4:	200d      	movs	r0, #13
 801a8e6:	f000 fb71 	bl	801afcc <SX1276Write>

            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 801a8ea:	4b9d      	ldr	r3, [pc, #628]	; (801ab60 <SX1276SetRx+0x300>)
 801a8ec:	2230      	movs	r2, #48	; 0x30
 801a8ee:	2100      	movs	r1, #0
 801a8f0:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 801a8f2:	4b9b      	ldr	r3, [pc, #620]	; (801ab60 <SX1276SetRx+0x300>)
 801a8f4:	2231      	movs	r2, #49	; 0x31
 801a8f6:	2100      	movs	r1, #0
 801a8f8:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801a8fa:	4b99      	ldr	r3, [pc, #612]	; (801ab60 <SX1276SetRx+0x300>)
 801a8fc:	2200      	movs	r2, #0
 801a8fe:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 801a900:	4b97      	ldr	r3, [pc, #604]	; (801ab60 <SX1276SetRx+0x300>)
 801a902:	2200      	movs	r2, #0
 801a904:	875a      	strh	r2, [r3, #58]	; 0x3a
        }
        break;
 801a906:	e0e6      	b.n	801aad6 <SX1276SetRx+0x276>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 801a908:	4b95      	ldr	r3, [pc, #596]	; (801ab60 <SX1276SetRx+0x300>)
 801a90a:	2255      	movs	r2, #85	; 0x55
 801a90c:	5c9b      	ldrb	r3, [r3, r2]
 801a90e:	2b00      	cmp	r3, #0
 801a910:	d010      	beq.n	801a934 <SX1276SetRx+0xd4>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 801a912:	2033      	movs	r0, #51	; 0x33
 801a914:	f000 fb6b 	bl	801afee <SX1276Read>
 801a918:	0003      	movs	r3, r0
 801a91a:	001a      	movs	r2, r3
 801a91c:	2341      	movs	r3, #65	; 0x41
 801a91e:	4313      	orrs	r3, r2
 801a920:	b2db      	uxtb	r3, r3
 801a922:	0019      	movs	r1, r3
 801a924:	2033      	movs	r0, #51	; 0x33
 801a926:	f000 fb51 	bl	801afcc <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 801a92a:	2119      	movs	r1, #25
 801a92c:	203b      	movs	r0, #59	; 0x3b
 801a92e:	f000 fb4d 	bl	801afcc <SX1276Write>
 801a932:	e013      	b.n	801a95c <SX1276SetRx+0xfc>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 801a934:	2033      	movs	r0, #51	; 0x33
 801a936:	f000 fb5a 	bl	801afee <SX1276Read>
 801a93a:	0003      	movs	r3, r0
 801a93c:	b25b      	sxtb	r3, r3
 801a93e:	2241      	movs	r2, #65	; 0x41
 801a940:	4393      	bics	r3, r2
 801a942:	b25b      	sxtb	r3, r3
 801a944:	2201      	movs	r2, #1
 801a946:	4313      	orrs	r3, r2
 801a948:	b25b      	sxtb	r3, r3
 801a94a:	b2db      	uxtb	r3, r3
 801a94c:	0019      	movs	r1, r3
 801a94e:	2033      	movs	r0, #51	; 0x33
 801a950:	f000 fb3c 	bl	801afcc <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 801a954:	211d      	movs	r1, #29
 801a956:	203b      	movs	r0, #59	; 0x3b
 801a958:	f000 fb38 	bl	801afcc <SX1276Write>
            }

            // ERRATA 2.3 - Receiver Spurious Reception of a LoRa Signal
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 801a95c:	4b80      	ldr	r3, [pc, #512]	; (801ab60 <SX1276SetRx+0x300>)
 801a95e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a960:	2b08      	cmp	r3, #8
 801a962:	d900      	bls.n	801a966 <SX1276SetRx+0x106>
 801a964:	e075      	b.n	801aa52 <SX1276SetRx+0x1f2>
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 801a966:	2031      	movs	r0, #49	; 0x31
 801a968:	f000 fb41 	bl	801afee <SX1276Read>
 801a96c:	0003      	movs	r3, r0
 801a96e:	001a      	movs	r2, r3
 801a970:	237f      	movs	r3, #127	; 0x7f
 801a972:	4013      	ands	r3, r2
 801a974:	b2db      	uxtb	r3, r3
 801a976:	0019      	movs	r1, r3
 801a978:	2031      	movs	r0, #49	; 0x31
 801a97a:	f000 fb27 	bl	801afcc <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 801a97e:	2100      	movs	r1, #0
 801a980:	2030      	movs	r0, #48	; 0x30
 801a982:	f000 fb23 	bl	801afcc <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 801a986:	4b76      	ldr	r3, [pc, #472]	; (801ab60 <SX1276SetRx+0x300>)
 801a988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a98a:	2b08      	cmp	r3, #8
 801a98c:	d86e      	bhi.n	801aa6c <SX1276SetRx+0x20c>
 801a98e:	009a      	lsls	r2, r3, #2
 801a990:	4b74      	ldr	r3, [pc, #464]	; (801ab64 <SX1276SetRx+0x304>)
 801a992:	18d3      	adds	r3, r2, r3
 801a994:	681b      	ldr	r3, [r3, #0]
 801a996:	469f      	mov	pc, r3
                {
                case 0: // 7.8 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 801a998:	2148      	movs	r1, #72	; 0x48
 801a99a:	202f      	movs	r0, #47	; 0x2f
 801a99c:	f000 fb16 	bl	801afcc <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 801a9a0:	4b6f      	ldr	r3, [pc, #444]	; (801ab60 <SX1276SetRx+0x300>)
 801a9a2:	689b      	ldr	r3, [r3, #8]
 801a9a4:	4a70      	ldr	r2, [pc, #448]	; (801ab68 <SX1276SetRx+0x308>)
 801a9a6:	4694      	mov	ip, r2
 801a9a8:	4463      	add	r3, ip
 801a9aa:	0018      	movs	r0, r3
 801a9ac:	f7fe feb0 	bl	8019710 <SX1276SetChannel>
                    break;
 801a9b0:	e05c      	b.n	801aa6c <SX1276SetRx+0x20c>
                case 1: // 10.4 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 801a9b2:	2144      	movs	r1, #68	; 0x44
 801a9b4:	202f      	movs	r0, #47	; 0x2f
 801a9b6:	f000 fb09 	bl	801afcc <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 801a9ba:	4b69      	ldr	r3, [pc, #420]	; (801ab60 <SX1276SetRx+0x300>)
 801a9bc:	689b      	ldr	r3, [r3, #8]
 801a9be:	4a6b      	ldr	r2, [pc, #428]	; (801ab6c <SX1276SetRx+0x30c>)
 801a9c0:	4694      	mov	ip, r2
 801a9c2:	4463      	add	r3, ip
 801a9c4:	0018      	movs	r0, r3
 801a9c6:	f7fe fea3 	bl	8019710 <SX1276SetChannel>
                    break;
 801a9ca:	e04f      	b.n	801aa6c <SX1276SetRx+0x20c>
                case 2: // 15.6 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 801a9cc:	2144      	movs	r1, #68	; 0x44
 801a9ce:	202f      	movs	r0, #47	; 0x2f
 801a9d0:	f000 fafc 	bl	801afcc <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 801a9d4:	4b62      	ldr	r3, [pc, #392]	; (801ab60 <SX1276SetRx+0x300>)
 801a9d6:	689b      	ldr	r3, [r3, #8]
 801a9d8:	4a65      	ldr	r2, [pc, #404]	; (801ab70 <SX1276SetRx+0x310>)
 801a9da:	4694      	mov	ip, r2
 801a9dc:	4463      	add	r3, ip
 801a9de:	0018      	movs	r0, r3
 801a9e0:	f7fe fe96 	bl	8019710 <SX1276SetChannel>
                    break;
 801a9e4:	e042      	b.n	801aa6c <SX1276SetRx+0x20c>
                case 3: // 20.8 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 801a9e6:	2144      	movs	r1, #68	; 0x44
 801a9e8:	202f      	movs	r0, #47	; 0x2f
 801a9ea:	f000 faef 	bl	801afcc <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 801a9ee:	4b5c      	ldr	r3, [pc, #368]	; (801ab60 <SX1276SetRx+0x300>)
 801a9f0:	689b      	ldr	r3, [r3, #8]
 801a9f2:	4a60      	ldr	r2, [pc, #384]	; (801ab74 <SX1276SetRx+0x314>)
 801a9f4:	4694      	mov	ip, r2
 801a9f6:	4463      	add	r3, ip
 801a9f8:	0018      	movs	r0, r3
 801a9fa:	f7fe fe89 	bl	8019710 <SX1276SetChannel>
                    break;
 801a9fe:	e035      	b.n	801aa6c <SX1276SetRx+0x20c>
                case 4: // 31.2 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 801aa00:	2144      	movs	r1, #68	; 0x44
 801aa02:	202f      	movs	r0, #47	; 0x2f
 801aa04:	f000 fae2 	bl	801afcc <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 801aa08:	4b55      	ldr	r3, [pc, #340]	; (801ab60 <SX1276SetRx+0x300>)
 801aa0a:	689b      	ldr	r3, [r3, #8]
 801aa0c:	4a5a      	ldr	r2, [pc, #360]	; (801ab78 <SX1276SetRx+0x318>)
 801aa0e:	4694      	mov	ip, r2
 801aa10:	4463      	add	r3, ip
 801aa12:	0018      	movs	r0, r3
 801aa14:	f7fe fe7c 	bl	8019710 <SX1276SetChannel>
                    break;
 801aa18:	e028      	b.n	801aa6c <SX1276SetRx+0x20c>
                case 5: // 41.4 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 801aa1a:	2144      	movs	r1, #68	; 0x44
 801aa1c:	202f      	movs	r0, #47	; 0x2f
 801aa1e:	f000 fad5 	bl	801afcc <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 801aa22:	4b4f      	ldr	r3, [pc, #316]	; (801ab60 <SX1276SetRx+0x300>)
 801aa24:	689b      	ldr	r3, [r3, #8]
 801aa26:	4a55      	ldr	r2, [pc, #340]	; (801ab7c <SX1276SetRx+0x31c>)
 801aa28:	4694      	mov	ip, r2
 801aa2a:	4463      	add	r3, ip
 801aa2c:	0018      	movs	r0, r3
 801aa2e:	f7fe fe6f 	bl	8019710 <SX1276SetChannel>
                    break;
 801aa32:	e01b      	b.n	801aa6c <SX1276SetRx+0x20c>
                case 6: // 62.5 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 801aa34:	2140      	movs	r1, #64	; 0x40
 801aa36:	202f      	movs	r0, #47	; 0x2f
 801aa38:	f000 fac8 	bl	801afcc <SX1276Write>
                    break;
 801aa3c:	e016      	b.n	801aa6c <SX1276SetRx+0x20c>
                case 7: // 125 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 801aa3e:	2140      	movs	r1, #64	; 0x40
 801aa40:	202f      	movs	r0, #47	; 0x2f
 801aa42:	f000 fac3 	bl	801afcc <SX1276Write>
                    break;
 801aa46:	e011      	b.n	801aa6c <SX1276SetRx+0x20c>
                case 8: // 250 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 801aa48:	2140      	movs	r1, #64	; 0x40
 801aa4a:	202f      	movs	r0, #47	; 0x2f
 801aa4c:	f000 fabe 	bl	801afcc <SX1276Write>
                    break;
 801aa50:	e00c      	b.n	801aa6c <SX1276SetRx+0x20c>
                }
            }
            else
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 801aa52:	2031      	movs	r0, #49	; 0x31
 801aa54:	f000 facb 	bl	801afee <SX1276Read>
 801aa58:	0003      	movs	r3, r0
 801aa5a:	001a      	movs	r2, r3
 801aa5c:	2380      	movs	r3, #128	; 0x80
 801aa5e:	425b      	negs	r3, r3
 801aa60:	4313      	orrs	r3, r2
 801aa62:	b2db      	uxtb	r3, r3
 801aa64:	0019      	movs	r1, r3
 801aa66:	2031      	movs	r0, #49	; 0x31
 801aa68:	f000 fab0 	bl	801afcc <SX1276Write>
            }

            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 801aa6c:	230f      	movs	r3, #15
 801aa6e:	18fb      	adds	r3, r7, r3
 801aa70:	4a3b      	ldr	r2, [pc, #236]	; (801ab60 <SX1276SetRx+0x300>)
 801aa72:	2156      	movs	r1, #86	; 0x56
 801aa74:	5c52      	ldrb	r2, [r2, r1]
 801aa76:	701a      	strb	r2, [r3, #0]

            if( SX1276.Settings.LoRa.FreqHopOn == true )
 801aa78:	4b39      	ldr	r3, [pc, #228]	; (801ab60 <SX1276SetRx+0x300>)
 801aa7a:	2253      	movs	r2, #83	; 0x53
 801aa7c:	5c9b      	ldrb	r3, [r3, r2]
 801aa7e:	2b00      	cmp	r3, #0
 801aa80:	d010      	beq.n	801aaa4 <SX1276SetRx+0x244>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 801aa82:	211d      	movs	r1, #29
 801aa84:	2011      	movs	r0, #17
 801aa86:	f000 faa1 	bl	801afcc <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 801aa8a:	2040      	movs	r0, #64	; 0x40
 801aa8c:	f000 faaf 	bl	801afee <SX1276Read>
 801aa90:	0003      	movs	r3, r0
 801aa92:	001a      	movs	r2, r3
 801aa94:	2333      	movs	r3, #51	; 0x33
 801aa96:	4013      	ands	r3, r2
 801aa98:	b2db      	uxtb	r3, r3
 801aa9a:	0019      	movs	r1, r3
 801aa9c:	2040      	movs	r0, #64	; 0x40
 801aa9e:	f000 fa95 	bl	801afcc <SX1276Write>
 801aaa2:	e00f      	b.n	801aac4 <SX1276SetRx+0x264>
            }
            else
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 801aaa4:	211f      	movs	r1, #31
 801aaa6:	2011      	movs	r0, #17
 801aaa8:	f000 fa90 	bl	801afcc <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 801aaac:	2040      	movs	r0, #64	; 0x40
 801aaae:	f000 fa9e 	bl	801afee <SX1276Read>
 801aab2:	0003      	movs	r3, r0
 801aab4:	001a      	movs	r2, r3
 801aab6:	233f      	movs	r3, #63	; 0x3f
 801aab8:	4013      	ands	r3, r2
 801aaba:	b2db      	uxtb	r3, r3
 801aabc:	0019      	movs	r1, r3
 801aabe:	2040      	movs	r0, #64	; 0x40
 801aac0:	f000 fa84 	bl	801afcc <SX1276Write>
            }
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 801aac4:	2100      	movs	r1, #0
 801aac6:	200f      	movs	r0, #15
 801aac8:	f000 fa80 	bl	801afcc <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 801aacc:	2100      	movs	r1, #0
 801aace:	200d      	movs	r0, #13
 801aad0:	f000 fa7c 	bl	801afcc <SX1276Write>
        }
        break;
 801aad4:	46c0      	nop			; (mov r8, r8)
    }

    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 801aad6:	2380      	movs	r3, #128	; 0x80
 801aad8:	005a      	lsls	r2, r3, #1
 801aada:	4b29      	ldr	r3, [pc, #164]	; (801ab80 <SX1276SetRx+0x320>)
 801aadc:	2100      	movs	r1, #0
 801aade:	0018      	movs	r0, r3
 801aae0:	f003 fa8d 	bl	801dffe <memset>

    SX1276.Settings.State = RF_RX_RUNNING;
 801aae4:	4b1e      	ldr	r3, [pc, #120]	; (801ab60 <SX1276SetRx+0x300>)
 801aae6:	2201      	movs	r2, #1
 801aae8:	711a      	strb	r2, [r3, #4]
    if( timeout != 0 )
 801aaea:	687b      	ldr	r3, [r7, #4]
 801aaec:	2b00      	cmp	r3, #0
 801aaee:	d009      	beq.n	801ab04 <SX1276SetRx+0x2a4>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801aaf0:	687a      	ldr	r2, [r7, #4]
 801aaf2:	4b24      	ldr	r3, [pc, #144]	; (801ab84 <SX1276SetRx+0x324>)
 801aaf4:	0011      	movs	r1, r2
 801aaf6:	0018      	movs	r0, r3
 801aaf8:	f002 f954 	bl	801cda4 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801aafc:	4b21      	ldr	r3, [pc, #132]	; (801ab84 <SX1276SetRx+0x324>)
 801aafe:	0018      	movs	r0, r3
 801ab00:	f002 f860 	bl	801cbc4 <UTIL_TIMER_Start>
    }

    if( SX1276.Settings.Modem == MODEM_FSK )
 801ab04:	4b16      	ldr	r3, [pc, #88]	; (801ab60 <SX1276SetRx+0x300>)
 801ab06:	795b      	ldrb	r3, [r3, #5]
 801ab08:	2b00      	cmp	r3, #0
 801ab0a:	d116      	bne.n	801ab3a <SX1276SetRx+0x2da>
    {
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 801ab0c:	2005      	movs	r0, #5
 801ab0e:	f000 f996 	bl	801ae3e <SX1276SetOpMode>

        if( rxContinuous == false )
 801ab12:	230f      	movs	r3, #15
 801ab14:	18fb      	adds	r3, r7, r3
 801ab16:	781b      	ldrb	r3, [r3, #0]
 801ab18:	2201      	movs	r2, #1
 801ab1a:	4053      	eors	r3, r2
 801ab1c:	b2db      	uxtb	r3, r3
 801ab1e:	2b00      	cmp	r3, #0
 801ab20:	d017      	beq.n	801ab52 <SX1276SetRx+0x2f2>
        {
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 801ab22:	4b0f      	ldr	r3, [pc, #60]	; (801ab60 <SX1276SetRx+0x300>)
 801ab24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ab26:	4b18      	ldr	r3, [pc, #96]	; (801ab88 <SX1276SetRx+0x328>)
 801ab28:	0011      	movs	r1, r2
 801ab2a:	0018      	movs	r0, r3
 801ab2c:	f002 f93a 	bl	801cda4 <UTIL_TIMER_SetPeriod>
            TimerStart( &RxTimeoutSyncWord );
 801ab30:	4b15      	ldr	r3, [pc, #84]	; (801ab88 <SX1276SetRx+0x328>)
 801ab32:	0018      	movs	r0, r3
 801ab34:	f002 f846 	bl	801cbc4 <UTIL_TIMER_Start>
        else
        {
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
        }
    }
}
 801ab38:	e00b      	b.n	801ab52 <SX1276SetRx+0x2f2>
        if( rxContinuous == true )
 801ab3a:	230f      	movs	r3, #15
 801ab3c:	18fb      	adds	r3, r7, r3
 801ab3e:	781b      	ldrb	r3, [r3, #0]
 801ab40:	2b00      	cmp	r3, #0
 801ab42:	d003      	beq.n	801ab4c <SX1276SetRx+0x2ec>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 801ab44:	2005      	movs	r0, #5
 801ab46:	f000 f97a 	bl	801ae3e <SX1276SetOpMode>
}
 801ab4a:	e002      	b.n	801ab52 <SX1276SetRx+0x2f2>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 801ab4c:	2006      	movs	r0, #6
 801ab4e:	f000 f976 	bl	801ae3e <SX1276SetOpMode>
}
 801ab52:	46c0      	nop			; (mov r8, r8)
 801ab54:	46bd      	mov	sp, r7
 801ab56:	b004      	add	sp, #16
 801ab58:	bd80      	pop	{r7, pc}
 801ab5a:	46c0      	nop			; (mov r8, r8)
 801ab5c:	200016f4 	.word	0x200016f4
 801ab60:	20001724 	.word	0x20001724
 801ab64:	0801fcb0 	.word	0x0801fcb0
 801ab68:	00001e82 	.word	0x00001e82
 801ab6c:	000028b4 	.word	0x000028b4
 801ab70:	00003d04 	.word	0x00003d04
 801ab74:	0000515e 	.word	0x0000515e
 801ab78:	00007a12 	.word	0x00007a12
 801ab7c:	0000a2c6 	.word	0x0000a2c6
 801ab80:	20000e80 	.word	0x20000e80
 801ab84:	2000178c 	.word	0x2000178c
 801ab88:	2000170c 	.word	0x2000170c

0801ab8c <SX1276SetTx>:

static void SX1276SetTx( uint32_t timeout )
{
 801ab8c:	b580      	push	{r7, lr}
 801ab8e:	b082      	sub	sp, #8
 801ab90:	af00      	add	r7, sp, #0
 801ab92:	6078      	str	r0, [r7, #4]
    TimerStop( &RxTimeoutTimer );
 801ab94:	4b38      	ldr	r3, [pc, #224]	; (801ac78 <SX1276SetTx+0xec>)
 801ab96:	0018      	movs	r0, r3
 801ab98:	f002 f88c 	bl	801ccb4 <UTIL_TIMER_Stop>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801ab9c:	687a      	ldr	r2, [r7, #4]
 801ab9e:	4b37      	ldr	r3, [pc, #220]	; (801ac7c <SX1276SetTx+0xf0>)
 801aba0:	0011      	movs	r1, r2
 801aba2:	0018      	movs	r0, r3
 801aba4:	f002 f8fe 	bl	801cda4 <UTIL_TIMER_SetPeriod>

    switch( SX1276.Settings.Modem )
 801aba8:	4b35      	ldr	r3, [pc, #212]	; (801ac80 <SX1276SetTx+0xf4>)
 801abaa:	795b      	ldrb	r3, [r3, #5]
 801abac:	2b00      	cmp	r3, #0
 801abae:	d002      	beq.n	801abb6 <SX1276SetTx+0x2a>
 801abb0:	2b01      	cmp	r3, #1
 801abb2:	d024      	beq.n	801abfe <SX1276SetTx+0x72>
 801abb4:	e052      	b.n	801ac5c <SX1276SetTx+0xd0>
            // DIO1=FifoLevel
            // DIO2=FifoFull
            // DIO3=FifoEmpty
            // DIO4=LowBat
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 801abb6:	2040      	movs	r0, #64	; 0x40
 801abb8:	f000 fa19 	bl	801afee <SX1276Read>
 801abbc:	0003      	movs	r3, r0
 801abbe:	001a      	movs	r2, r3
 801abc0:	2303      	movs	r3, #3
 801abc2:	4013      	ands	r3, r2
 801abc4:	b2db      	uxtb	r3, r3
 801abc6:	0019      	movs	r1, r3
 801abc8:	2040      	movs	r0, #64	; 0x40
 801abca:	f000 f9ff 	bl	801afcc <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 801abce:	2041      	movs	r0, #65	; 0x41
 801abd0:	f000 fa0d 	bl	801afee <SX1276Read>
 801abd4:	0003      	movs	r3, r0
 801abd6:	001a      	movs	r2, r3
 801abd8:	233e      	movs	r3, #62	; 0x3e
 801abda:	4013      	ands	r3, r2
 801abdc:	b2db      	uxtb	r3, r3
 801abde:	0019      	movs	r1, r3
 801abe0:	2041      	movs	r0, #65	; 0x41
 801abe2:	f000 f9f3 	bl	801afcc <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) );
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 801abe6:	2035      	movs	r0, #53	; 0x35
 801abe8:	f000 fa01 	bl	801afee <SX1276Read>
 801abec:	0003      	movs	r3, r0
 801abee:	001a      	movs	r2, r3
 801abf0:	233f      	movs	r3, #63	; 0x3f
 801abf2:	4013      	ands	r3, r2
 801abf4:	b2d9      	uxtb	r1, r3
 801abf6:	4b22      	ldr	r3, [pc, #136]	; (801ac80 <SX1276SetTx+0xf4>)
 801abf8:	223e      	movs	r2, #62	; 0x3e
 801abfa:	5499      	strb	r1, [r3, r2]
        }
        break;
 801abfc:	e02e      	b.n	801ac5c <SX1276SetTx+0xd0>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 801abfe:	4b20      	ldr	r3, [pc, #128]	; (801ac80 <SX1276SetTx+0xf4>)
 801ac00:	2253      	movs	r2, #83	; 0x53
 801ac02:	5c9b      	ldrb	r3, [r3, r2]
 801ac04:	2b00      	cmp	r3, #0
 801ac06:	d014      	beq.n	801ac32 <SX1276SetTx+0xa6>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 801ac08:	21f5      	movs	r1, #245	; 0xf5
 801ac0a:	2011      	movs	r0, #17
 801ac0c:	f000 f9de 	bl	801afcc <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=TxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 801ac10:	2040      	movs	r0, #64	; 0x40
 801ac12:	f000 f9ec 	bl	801afee <SX1276Read>
 801ac16:	0003      	movs	r3, r0
 801ac18:	b25b      	sxtb	r3, r3
 801ac1a:	2233      	movs	r2, #51	; 0x33
 801ac1c:	4013      	ands	r3, r2
 801ac1e:	b25b      	sxtb	r3, r3
 801ac20:	2240      	movs	r2, #64	; 0x40
 801ac22:	4313      	orrs	r3, r2
 801ac24:	b25b      	sxtb	r3, r3
 801ac26:	b2db      	uxtb	r3, r3
 801ac28:	0019      	movs	r1, r3
 801ac2a:	2040      	movs	r0, #64	; 0x40
 801ac2c:	f000 f9ce 	bl	801afcc <SX1276Write>

                // DIO0=TxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
            }
        }
        break;
 801ac30:	e013      	b.n	801ac5a <SX1276SetTx+0xce>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 801ac32:	21f7      	movs	r1, #247	; 0xf7
 801ac34:	2011      	movs	r0, #17
 801ac36:	f000 f9c9 	bl	801afcc <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 801ac3a:	2040      	movs	r0, #64	; 0x40
 801ac3c:	f000 f9d7 	bl	801afee <SX1276Read>
 801ac40:	0003      	movs	r3, r0
 801ac42:	b25b      	sxtb	r3, r3
 801ac44:	223f      	movs	r2, #63	; 0x3f
 801ac46:	4013      	ands	r3, r2
 801ac48:	b25b      	sxtb	r3, r3
 801ac4a:	2240      	movs	r2, #64	; 0x40
 801ac4c:	4313      	orrs	r3, r2
 801ac4e:	b25b      	sxtb	r3, r3
 801ac50:	b2db      	uxtb	r3, r3
 801ac52:	0019      	movs	r1, r3
 801ac54:	2040      	movs	r0, #64	; 0x40
 801ac56:	f000 f9b9 	bl	801afcc <SX1276Write>
        break;
 801ac5a:	46c0      	nop			; (mov r8, r8)
    }

    SX1276.Settings.State = RF_TX_RUNNING;
 801ac5c:	4b08      	ldr	r3, [pc, #32]	; (801ac80 <SX1276SetTx+0xf4>)
 801ac5e:	2202      	movs	r2, #2
 801ac60:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 801ac62:	4b06      	ldr	r3, [pc, #24]	; (801ac7c <SX1276SetTx+0xf0>)
 801ac64:	0018      	movs	r0, r3
 801ac66:	f001 ffad 	bl	801cbc4 <UTIL_TIMER_Start>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 801ac6a:	2003      	movs	r0, #3
 801ac6c:	f000 f8e7 	bl	801ae3e <SX1276SetOpMode>
    //  TimerStop( &TxTimeoutTimer );// новый для возможности передачи только одного сообщения 1 раз сработало а дальше гг
}
 801ac70:	46c0      	nop			; (mov r8, r8)
 801ac72:	46bd      	mov	sp, r7
 801ac74:	b002      	add	sp, #8
 801ac76:	bd80      	pop	{r7, pc}
 801ac78:	2000178c 	.word	0x2000178c
 801ac7c:	200016f4 	.word	0x200016f4
 801ac80:	20001724 	.word	0x20001724

0801ac84 <SX1276StartCad>:

void SX1276StartCad( void )
{
 801ac84:	b580      	push	{r7, lr}
 801ac86:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 801ac88:	4b11      	ldr	r3, [pc, #68]	; (801acd0 <SX1276StartCad+0x4c>)
 801ac8a:	795b      	ldrb	r3, [r3, #5]
 801ac8c:	2b00      	cmp	r3, #0
 801ac8e:	d01a      	beq.n	801acc6 <SX1276StartCad+0x42>
 801ac90:	2b01      	cmp	r3, #1
 801ac92:	d000      	beq.n	801ac96 <SX1276StartCad+0x12>
            SX1276.Settings.State = RF_CAD;
            SX1276SetOpMode( RFLR_OPMODE_CAD );
        }
        break;
    default:
        break;
 801ac94:	e018      	b.n	801acc8 <SX1276StartCad+0x44>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 801ac96:	21fa      	movs	r1, #250	; 0xfa
 801ac98:	2011      	movs	r0, #17
 801ac9a:	f000 f997 	bl	801afcc <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 801ac9e:	2040      	movs	r0, #64	; 0x40
 801aca0:	f000 f9a5 	bl	801afee <SX1276Read>
 801aca4:	0003      	movs	r3, r0
 801aca6:	001a      	movs	r2, r3
 801aca8:	2303      	movs	r3, #3
 801acaa:	439a      	bics	r2, r3
 801acac:	0013      	movs	r3, r2
 801acae:	b2db      	uxtb	r3, r3
 801acb0:	0019      	movs	r1, r3
 801acb2:	2040      	movs	r0, #64	; 0x40
 801acb4:	f000 f98a 	bl	801afcc <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 801acb8:	4b05      	ldr	r3, [pc, #20]	; (801acd0 <SX1276StartCad+0x4c>)
 801acba:	2203      	movs	r2, #3
 801acbc:	711a      	strb	r2, [r3, #4]
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 801acbe:	2007      	movs	r0, #7
 801acc0:	f000 f8bd 	bl	801ae3e <SX1276SetOpMode>
        break;
 801acc4:	e000      	b.n	801acc8 <SX1276StartCad+0x44>
        break;
 801acc6:	46c0      	nop			; (mov r8, r8)
    }
}
 801acc8:	46c0      	nop			; (mov r8, r8)
 801acca:	46bd      	mov	sp, r7
 801accc:	bd80      	pop	{r7, pc}
 801acce:	46c0      	nop			; (mov r8, r8)
 801acd0:	20001724 	.word	0x20001724

0801acd4 <SX1276SetTxContinuousWave>:

void SX1276SetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 801acd4:	b580      	push	{r7, lr}
 801acd6:	b08e      	sub	sp, #56	; 0x38
 801acd8:	af0a      	add	r7, sp, #40	; 0x28
 801acda:	6078      	str	r0, [r7, #4]
 801acdc:	0008      	movs	r0, r1
 801acde:	0011      	movs	r1, r2
 801ace0:	1cfb      	adds	r3, r7, #3
 801ace2:	1c02      	adds	r2, r0, #0
 801ace4:	701a      	strb	r2, [r3, #0]
 801ace6:	003b      	movs	r3, r7
 801ace8:	1c0a      	adds	r2, r1, #0
 801acea:	801a      	strh	r2, [r3, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 801acec:	003b      	movs	r3, r7
 801acee:	881a      	ldrh	r2, [r3, #0]
 801acf0:	0013      	movs	r3, r2
 801acf2:	015b      	lsls	r3, r3, #5
 801acf4:	1a9b      	subs	r3, r3, r2
 801acf6:	009b      	lsls	r3, r3, #2
 801acf8:	189b      	adds	r3, r3, r2
 801acfa:	00db      	lsls	r3, r3, #3
 801acfc:	60fb      	str	r3, [r7, #12]

    SX1276SetChannel( freq );
 801acfe:	687b      	ldr	r3, [r7, #4]
 801ad00:	0018      	movs	r0, r3
 801ad02:	f7fe fd05 	bl	8019710 <SX1276SetChannel>

    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 801ad06:	1cfb      	adds	r3, r7, #3
 801ad08:	2100      	movs	r1, #0
 801ad0a:	5659      	ldrsb	r1, [r3, r1]
 801ad0c:	68fb      	ldr	r3, [r7, #12]
 801ad0e:	9308      	str	r3, [sp, #32]
 801ad10:	2300      	movs	r3, #0
 801ad12:	9307      	str	r3, [sp, #28]
 801ad14:	2300      	movs	r3, #0
 801ad16:	9306      	str	r3, [sp, #24]
 801ad18:	2300      	movs	r3, #0
 801ad1a:	9305      	str	r3, [sp, #20]
 801ad1c:	2300      	movs	r3, #0
 801ad1e:	9304      	str	r3, [sp, #16]
 801ad20:	2300      	movs	r3, #0
 801ad22:	9303      	str	r3, [sp, #12]
 801ad24:	2305      	movs	r3, #5
 801ad26:	9302      	str	r3, [sp, #8]
 801ad28:	2300      	movs	r3, #0
 801ad2a:	9301      	str	r3, [sp, #4]
 801ad2c:	2396      	movs	r3, #150	; 0x96
 801ad2e:	015b      	lsls	r3, r3, #5
 801ad30:	9300      	str	r3, [sp, #0]
 801ad32:	2300      	movs	r3, #0
 801ad34:	2200      	movs	r2, #0
 801ad36:	2000      	movs	r0, #0
 801ad38:	f7ff f8d4 	bl	8019ee4 <SX1276SetTxConfig>

    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 801ad3c:	2031      	movs	r0, #49	; 0x31
 801ad3e:	f000 f956 	bl	801afee <SX1276Read>
 801ad42:	0003      	movs	r3, r0
 801ad44:	001a      	movs	r2, r3
 801ad46:	2340      	movs	r3, #64	; 0x40
 801ad48:	439a      	bics	r2, r3
 801ad4a:	0013      	movs	r3, r2
 801ad4c:	b2db      	uxtb	r3, r3
 801ad4e:	0019      	movs	r1, r3
 801ad50:	2031      	movs	r0, #49	; 0x31
 801ad52:	f000 f93b 	bl	801afcc <SX1276Write>
    // Disable radio interrupts
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 801ad56:	21f0      	movs	r1, #240	; 0xf0
 801ad58:	2040      	movs	r0, #64	; 0x40
 801ad5a:	f000 f937 	bl	801afcc <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 801ad5e:	21a0      	movs	r1, #160	; 0xa0
 801ad60:	2041      	movs	r0, #65	; 0x41
 801ad62:	f000 f933 	bl	801afcc <SX1276Write>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801ad66:	68fa      	ldr	r2, [r7, #12]
 801ad68:	4b09      	ldr	r3, [pc, #36]	; (801ad90 <SX1276SetTxContinuousWave+0xbc>)
 801ad6a:	0011      	movs	r1, r2
 801ad6c:	0018      	movs	r0, r3
 801ad6e:	f002 f819 	bl	801cda4 <UTIL_TIMER_SetPeriod>

    SX1276.Settings.State = RF_TX_RUNNING;
 801ad72:	4b08      	ldr	r3, [pc, #32]	; (801ad94 <SX1276SetTxContinuousWave+0xc0>)
 801ad74:	2202      	movs	r2, #2
 801ad76:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 801ad78:	4b05      	ldr	r3, [pc, #20]	; (801ad90 <SX1276SetTxContinuousWave+0xbc>)
 801ad7a:	0018      	movs	r0, r3
 801ad7c:	f001 ff22 	bl	801cbc4 <UTIL_TIMER_Start>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 801ad80:	2003      	movs	r0, #3
 801ad82:	f000 f85c 	bl	801ae3e <SX1276SetOpMode>
}
 801ad86:	46c0      	nop			; (mov r8, r8)
 801ad88:	46bd      	mov	sp, r7
 801ad8a:	b004      	add	sp, #16
 801ad8c:	bd80      	pop	{r7, pc}
 801ad8e:	46c0      	nop			; (mov r8, r8)
 801ad90:	200016f4 	.word	0x200016f4
 801ad94:	20001724 	.word	0x20001724

0801ad98 <SX1276ReadRssi>:

int16_t SX1276ReadRssi( RadioModems_t modem )
{
 801ad98:	b580      	push	{r7, lr}
 801ad9a:	b084      	sub	sp, #16
 801ad9c:	af00      	add	r7, sp, #0
 801ad9e:	0002      	movs	r2, r0
 801ada0:	1dfb      	adds	r3, r7, #7
 801ada2:	701a      	strb	r2, [r3, #0]
    int16_t rssi = 0;
 801ada4:	230e      	movs	r3, #14
 801ada6:	18fb      	adds	r3, r7, r3
 801ada8:	2200      	movs	r2, #0
 801adaa:	801a      	strh	r2, [r3, #0]

    switch( modem )
 801adac:	1dfb      	adds	r3, r7, #7
 801adae:	781b      	ldrb	r3, [r3, #0]
 801adb0:	2b00      	cmp	r3, #0
 801adb2:	d002      	beq.n	801adba <SX1276ReadRssi+0x22>
 801adb4:	2b01      	cmp	r3, #1
 801adb6:	d00d      	beq.n	801add4 <SX1276ReadRssi+0x3c>
 801adb8:	e027      	b.n	801ae0a <SX1276ReadRssi+0x72>
    {
    case MODEM_FSK:
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 801adba:	2011      	movs	r0, #17
 801adbc:	f000 f917 	bl	801afee <SX1276Read>
 801adc0:	0003      	movs	r3, r0
 801adc2:	085b      	lsrs	r3, r3, #1
 801adc4:	b2db      	uxtb	r3, r3
 801adc6:	b29b      	uxth	r3, r3
 801adc8:	425b      	negs	r3, r3
 801adca:	b29a      	uxth	r2, r3
 801adcc:	230e      	movs	r3, #14
 801adce:	18fb      	adds	r3, r7, r3
 801add0:	801a      	strh	r2, [r3, #0]
        break;
 801add2:	e020      	b.n	801ae16 <SX1276ReadRssi+0x7e>
    case MODEM_LORA:
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 801add4:	4b14      	ldr	r3, [pc, #80]	; (801ae28 <SX1276ReadRssi+0x90>)
 801add6:	689b      	ldr	r3, [r3, #8]
 801add8:	4a14      	ldr	r2, [pc, #80]	; (801ae2c <SX1276ReadRssi+0x94>)
 801adda:	4293      	cmp	r3, r2
 801addc:	d90a      	bls.n	801adf4 <SX1276ReadRssi+0x5c>
        {
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 801adde:	201b      	movs	r0, #27
 801ade0:	f000 f905 	bl	801afee <SX1276Read>
 801ade4:	0003      	movs	r3, r0
 801ade6:	b29b      	uxth	r3, r3
 801ade8:	3b9d      	subs	r3, #157	; 0x9d
 801adea:	b29a      	uxth	r2, r3
 801adec:	230e      	movs	r3, #14
 801adee:	18fb      	adds	r3, r7, r3
 801adf0:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
        }
        break;
 801adf2:	e010      	b.n	801ae16 <SX1276ReadRssi+0x7e>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 801adf4:	201b      	movs	r0, #27
 801adf6:	f000 f8fa 	bl	801afee <SX1276Read>
 801adfa:	0003      	movs	r3, r0
 801adfc:	b29b      	uxth	r3, r3
 801adfe:	3ba4      	subs	r3, #164	; 0xa4
 801ae00:	b29a      	uxth	r2, r3
 801ae02:	230e      	movs	r3, #14
 801ae04:	18fb      	adds	r3, r7, r3
 801ae06:	801a      	strh	r2, [r3, #0]
        break;
 801ae08:	e005      	b.n	801ae16 <SX1276ReadRssi+0x7e>
    default:
        rssi = -1;
 801ae0a:	230e      	movs	r3, #14
 801ae0c:	18fb      	adds	r3, r7, r3
 801ae0e:	2201      	movs	r2, #1
 801ae10:	4252      	negs	r2, r2
 801ae12:	801a      	strh	r2, [r3, #0]
        break;
 801ae14:	46c0      	nop			; (mov r8, r8)
    }
    return rssi;
 801ae16:	230e      	movs	r3, #14
 801ae18:	18fb      	adds	r3, r7, r3
 801ae1a:	2200      	movs	r2, #0
 801ae1c:	5e9b      	ldrsh	r3, [r3, r2]
}
 801ae1e:	0018      	movs	r0, r3
 801ae20:	46bd      	mov	sp, r7
 801ae22:	b004      	add	sp, #16
 801ae24:	bd80      	pop	{r7, pc}
 801ae26:	46c0      	nop			; (mov r8, r8)
 801ae28:	20001724 	.word	0x20001724
 801ae2c:	1f4add40 	.word	0x1f4add40

0801ae30 <SX1276Reset>:

static void SX1276Reset( void )
{
 801ae30:	b580      	push	{r7, lr}
 801ae32:	af00      	add	r7, sp, #0
    Sx_Board_Reset();
 801ae34:	f7eb fa0e 	bl	8006254 <CMWX1ZZABZ0XX_RADIO_Reset>
  
}
 801ae38:	46c0      	nop			; (mov r8, r8)
 801ae3a:	46bd      	mov	sp, r7
 801ae3c:	bd80      	pop	{r7, pc}

0801ae3e <SX1276SetOpMode>:

static void SX1276SetOpMode( uint8_t opMode )
{
 801ae3e:	b5b0      	push	{r4, r5, r7, lr}
 801ae40:	b084      	sub	sp, #16
 801ae42:	af00      	add	r7, sp, #0
 801ae44:	0002      	movs	r2, r0
 801ae46:	1dfb      	adds	r3, r7, #7
 801ae48:	701a      	strb	r2, [r3, #0]
    if( opMode == RF_OPMODE_SLEEP )
 801ae4a:	1dfb      	adds	r3, r7, #7
 801ae4c:	781b      	ldrb	r3, [r3, #0]
 801ae4e:	2b00      	cmp	r3, #0
 801ae50:	d118      	bne.n	801ae84 <SX1276SetOpMode+0x46>
    {
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 801ae52:	2001      	movs	r0, #1
 801ae54:	f000 f8cb 	bl	801afee <SX1276Read>
 801ae58:	0003      	movs	r3, r0
 801ae5a:	b25b      	sxtb	r3, r3
 801ae5c:	2207      	movs	r2, #7
 801ae5e:	4393      	bics	r3, r2
 801ae60:	b25a      	sxtb	r2, r3
 801ae62:	1dfb      	adds	r3, r7, #7
 801ae64:	781b      	ldrb	r3, [r3, #0]
 801ae66:	b25b      	sxtb	r3, r3
 801ae68:	4313      	orrs	r3, r2
 801ae6a:	b25b      	sxtb	r3, r3
 801ae6c:	b2db      	uxtb	r3, r3
 801ae6e:	0019      	movs	r1, r3
 801ae70:	2001      	movs	r0, #1
 801ae72:	f000 f8ab 	bl	801afcc <SX1276Write>

      Sx_Board_SetAntSw( RFSW_OFF );
 801ae76:	2000      	movs	r0, #0
 801ae78:	f7eb f98c 	bl	8006194 <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      
      Sx_Board_SetXO( RESET ); 
 801ae7c:	2000      	movs	r0, #0
 801ae7e:	f7ea ffcb 	bl	8005e18 <CMWX1ZZABZ0XX_RADIO_SetXO>
        Sx_Board_SetAntSw( RFSW_RFO_LP );
      }
      
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
    }
}
 801ae82:	e044      	b.n	801af0e <SX1276SetOpMode+0xd0>
    else if ( opMode == RF_OPMODE_RECEIVER )
 801ae84:	1dfb      	adds	r3, r7, #7
 801ae86:	781b      	ldrb	r3, [r3, #0]
 801ae88:	2b05      	cmp	r3, #5
 801ae8a:	d118      	bne.n	801aebe <SX1276SetOpMode+0x80>
      Sx_Board_SetXO( SET ); 
 801ae8c:	2001      	movs	r0, #1
 801ae8e:	f7ea ffc3 	bl	8005e18 <CMWX1ZZABZ0XX_RADIO_SetXO>
      Sx_Board_SetAntSw( RFSW_RX );
 801ae92:	2001      	movs	r0, #1
 801ae94:	f7eb f97e 	bl	8006194 <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 801ae98:	2001      	movs	r0, #1
 801ae9a:	f000 f8a8 	bl	801afee <SX1276Read>
 801ae9e:	0003      	movs	r3, r0
 801aea0:	b25b      	sxtb	r3, r3
 801aea2:	2207      	movs	r2, #7
 801aea4:	4393      	bics	r3, r2
 801aea6:	b25a      	sxtb	r2, r3
 801aea8:	1dfb      	adds	r3, r7, #7
 801aeaa:	781b      	ldrb	r3, [r3, #0]
 801aeac:	b25b      	sxtb	r3, r3
 801aeae:	4313      	orrs	r3, r2
 801aeb0:	b25b      	sxtb	r3, r3
 801aeb2:	b2db      	uxtb	r3, r3
 801aeb4:	0019      	movs	r1, r3
 801aeb6:	2001      	movs	r0, #1
 801aeb8:	f000 f888 	bl	801afcc <SX1276Write>
}
 801aebc:	e027      	b.n	801af0e <SX1276SetOpMode+0xd0>
      uint8_t paConfig =  SX1276Read( REG_PACONFIG );
 801aebe:	250f      	movs	r5, #15
 801aec0:	197c      	adds	r4, r7, r5
 801aec2:	2009      	movs	r0, #9
 801aec4:	f000 f893 	bl	801afee <SX1276Read>
 801aec8:	0003      	movs	r3, r0
 801aeca:	7023      	strb	r3, [r4, #0]
      Sx_Board_SetXO( SET ); 
 801aecc:	2001      	movs	r0, #1
 801aece:	f7ea ffa3 	bl	8005e18 <CMWX1ZZABZ0XX_RADIO_SetXO>
      if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 801aed2:	197b      	adds	r3, r7, r5
 801aed4:	781b      	ldrb	r3, [r3, #0]
 801aed6:	b25b      	sxtb	r3, r3
 801aed8:	2b00      	cmp	r3, #0
 801aeda:	da03      	bge.n	801aee4 <SX1276SetOpMode+0xa6>
        Sx_Board_SetAntSw( RFSW_RFO_HP );
 801aedc:	2003      	movs	r0, #3
 801aede:	f7eb f959 	bl	8006194 <CMWX1ZZABZ0XX_RADIO_SetAntSw>
 801aee2:	e002      	b.n	801aeea <SX1276SetOpMode+0xac>
        Sx_Board_SetAntSw( RFSW_RFO_LP );
 801aee4:	2002      	movs	r0, #2
 801aee6:	f7eb f955 	bl	8006194 <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 801aeea:	2001      	movs	r0, #1
 801aeec:	f000 f87f 	bl	801afee <SX1276Read>
 801aef0:	0003      	movs	r3, r0
 801aef2:	b25b      	sxtb	r3, r3
 801aef4:	2207      	movs	r2, #7
 801aef6:	4393      	bics	r3, r2
 801aef8:	b25a      	sxtb	r2, r3
 801aefa:	1dfb      	adds	r3, r7, #7
 801aefc:	781b      	ldrb	r3, [r3, #0]
 801aefe:	b25b      	sxtb	r3, r3
 801af00:	4313      	orrs	r3, r2
 801af02:	b25b      	sxtb	r3, r3
 801af04:	b2db      	uxtb	r3, r3
 801af06:	0019      	movs	r1, r3
 801af08:	2001      	movs	r0, #1
 801af0a:	f000 f85f 	bl	801afcc <SX1276Write>
}
 801af0e:	46c0      	nop			; (mov r8, r8)
 801af10:	46bd      	mov	sp, r7
 801af12:	b004      	add	sp, #16
 801af14:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801af18 <SX1276SetModem>:

void SX1276SetModem( RadioModems_t modem )
{
 801af18:	b580      	push	{r7, lr}
 801af1a:	b082      	sub	sp, #8
 801af1c:	af00      	add	r7, sp, #0
 801af1e:	0002      	movs	r2, r0
 801af20:	1dfb      	adds	r3, r7, #7
 801af22:	701a      	strb	r2, [r3, #0]
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 801af24:	2001      	movs	r0, #1
 801af26:	f000 f862 	bl	801afee <SX1276Read>
 801af2a:	0003      	movs	r3, r0
 801af2c:	b25b      	sxtb	r3, r3
 801af2e:	2b00      	cmp	r3, #0
 801af30:	da03      	bge.n	801af3a <SX1276SetModem+0x22>
    {
        SX1276.Settings.Modem = MODEM_LORA;
 801af32:	4b25      	ldr	r3, [pc, #148]	; (801afc8 <SX1276SetModem+0xb0>)
 801af34:	2201      	movs	r2, #1
 801af36:	715a      	strb	r2, [r3, #5]
 801af38:	e002      	b.n	801af40 <SX1276SetModem+0x28>
    }
    else
    {
        SX1276.Settings.Modem = MODEM_FSK;
 801af3a:	4b23      	ldr	r3, [pc, #140]	; (801afc8 <SX1276SetModem+0xb0>)
 801af3c:	2200      	movs	r2, #0
 801af3e:	715a      	strb	r2, [r3, #5]
    }

    if( SX1276.Settings.Modem == modem )
 801af40:	4b21      	ldr	r3, [pc, #132]	; (801afc8 <SX1276SetModem+0xb0>)
 801af42:	795b      	ldrb	r3, [r3, #5]
 801af44:	1dfa      	adds	r2, r7, #7
 801af46:	7812      	ldrb	r2, [r2, #0]
 801af48:	429a      	cmp	r2, r3
 801af4a:	d038      	beq.n	801afbe <SX1276SetModem+0xa6>
    {
        return;
    }

    SX1276.Settings.Modem = modem;
 801af4c:	4b1e      	ldr	r3, [pc, #120]	; (801afc8 <SX1276SetModem+0xb0>)
 801af4e:	1dfa      	adds	r2, r7, #7
 801af50:	7812      	ldrb	r2, [r2, #0]
 801af52:	715a      	strb	r2, [r3, #5]
    switch( SX1276.Settings.Modem )
 801af54:	4b1c      	ldr	r3, [pc, #112]	; (801afc8 <SX1276SetModem+0xb0>)
 801af56:	795b      	ldrb	r3, [r3, #5]
 801af58:	2b01      	cmp	r3, #1
 801af5a:	d017      	beq.n	801af8c <SX1276SetModem+0x74>
    {
    default:
    case MODEM_FSK:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 801af5c:	2000      	movs	r0, #0
 801af5e:	f7ff ff6e 	bl	801ae3e <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 801af62:	2001      	movs	r0, #1
 801af64:	f000 f843 	bl	801afee <SX1276Read>
 801af68:	0003      	movs	r3, r0
 801af6a:	001a      	movs	r2, r3
 801af6c:	237f      	movs	r3, #127	; 0x7f
 801af6e:	4013      	ands	r3, r2
 801af70:	b2db      	uxtb	r3, r3
 801af72:	0019      	movs	r1, r3
 801af74:	2001      	movs	r0, #1
 801af76:	f000 f829 	bl	801afcc <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 801af7a:	2100      	movs	r1, #0
 801af7c:	2040      	movs	r0, #64	; 0x40
 801af7e:	f000 f825 	bl	801afcc <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 801af82:	2130      	movs	r1, #48	; 0x30
 801af84:	2041      	movs	r0, #65	; 0x41
 801af86:	f000 f821 	bl	801afcc <SX1276Write>
        break;
 801af8a:	e019      	b.n	801afc0 <SX1276SetModem+0xa8>
    case MODEM_LORA:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 801af8c:	2000      	movs	r0, #0
 801af8e:	f7ff ff56 	bl	801ae3e <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 801af92:	2001      	movs	r0, #1
 801af94:	f000 f82b 	bl	801afee <SX1276Read>
 801af98:	0003      	movs	r3, r0
 801af9a:	001a      	movs	r2, r3
 801af9c:	2380      	movs	r3, #128	; 0x80
 801af9e:	425b      	negs	r3, r3
 801afa0:	4313      	orrs	r3, r2
 801afa2:	b2db      	uxtb	r3, r3
 801afa4:	0019      	movs	r1, r3
 801afa6:	2001      	movs	r0, #1
 801afa8:	f000 f810 	bl	801afcc <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 801afac:	2100      	movs	r1, #0
 801afae:	2040      	movs	r0, #64	; 0x40
 801afb0:	f000 f80c 	bl	801afcc <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 801afb4:	2100      	movs	r1, #0
 801afb6:	2041      	movs	r0, #65	; 0x41
 801afb8:	f000 f808 	bl	801afcc <SX1276Write>
        break;
 801afbc:	e000      	b.n	801afc0 <SX1276SetModem+0xa8>
        return;
 801afbe:	46c0      	nop			; (mov r8, r8)
    }
}
 801afc0:	46bd      	mov	sp, r7
 801afc2:	b002      	add	sp, #8
 801afc4:	bd80      	pop	{r7, pc}
 801afc6:	46c0      	nop			; (mov r8, r8)
 801afc8:	20001724 	.word	0x20001724

0801afcc <SX1276Write>:

void SX1276Write( uint32_t addr, uint8_t data )
{
 801afcc:	b580      	push	{r7, lr}
 801afce:	b082      	sub	sp, #8
 801afd0:	af00      	add	r7, sp, #0
 801afd2:	6078      	str	r0, [r7, #4]
 801afd4:	000a      	movs	r2, r1
 801afd6:	1cfb      	adds	r3, r7, #3
 801afd8:	701a      	strb	r2, [r3, #0]
    SX1276WriteBuffer( addr, &data, 1 );
 801afda:	1cf9      	adds	r1, r7, #3
 801afdc:	687b      	ldr	r3, [r7, #4]
 801afde:	2201      	movs	r2, #1
 801afe0:	0018      	movs	r0, r3
 801afe2:	f000 f815 	bl	801b010 <SX1276WriteBuffer>
}
 801afe6:	46c0      	nop			; (mov r8, r8)
 801afe8:	46bd      	mov	sp, r7
 801afea:	b002      	add	sp, #8
 801afec:	bd80      	pop	{r7, pc}

0801afee <SX1276Read>:

uint8_t SX1276Read( uint32_t addr )
{
 801afee:	b590      	push	{r4, r7, lr}
 801aff0:	b085      	sub	sp, #20
 801aff2:	af00      	add	r7, sp, #0
 801aff4:	6078      	str	r0, [r7, #4]
    uint8_t data;
    SX1276ReadBuffer( addr, &data, 1 );
 801aff6:	240f      	movs	r4, #15
 801aff8:	1939      	adds	r1, r7, r4
 801affa:	687b      	ldr	r3, [r7, #4]
 801affc:	2201      	movs	r2, #1
 801affe:	0018      	movs	r0, r3
 801b000:	f000 f83a 	bl	801b078 <SX1276ReadBuffer>
    return data;
 801b004:	193b      	adds	r3, r7, r4
 801b006:	781b      	ldrb	r3, [r3, #0]
}
 801b008:	0018      	movs	r0, r3
 801b00a:	46bd      	mov	sp, r7
 801b00c:	b005      	add	sp, #20
 801b00e:	bd90      	pop	{r4, r7, pc}

0801b010 <SX1276WriteBuffer>:

void SX1276WriteBuffer( uint32_t addr, uint8_t *buffer, uint8_t size )
{
 801b010:	b590      	push	{r4, r7, lr}
 801b012:	b087      	sub	sp, #28
 801b014:	af00      	add	r7, sp, #0
 801b016:	60f8      	str	r0, [r7, #12]
 801b018:	60b9      	str	r1, [r7, #8]
 801b01a:	1dfb      	adds	r3, r7, #7
 801b01c:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    //NSS = 0;
    Sx_Board_ChipSelect( 0 );
 801b01e:	2000      	movs	r0, #0
 801b020:	f7eb f96a 	bl	80062f8 <CMWX1ZZABZ0XX_RADIO_ChipSelect>

    Sx_Board_SendRecv( addr | 0x80 );
 801b024:	68fb      	ldr	r3, [r7, #12]
 801b026:	b29b      	uxth	r3, r3
 801b028:	2280      	movs	r2, #128	; 0x80
 801b02a:	4313      	orrs	r3, r2
 801b02c:	b29b      	uxth	r3, r3
 801b02e:	0018      	movs	r0, r3
 801b030:	f7eb f94f 	bl	80062d2 <CMWX1ZZABZ0XX_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 801b034:	2317      	movs	r3, #23
 801b036:	18fb      	adds	r3, r7, r3
 801b038:	2200      	movs	r2, #0
 801b03a:	701a      	strb	r2, [r3, #0]
 801b03c:	e00e      	b.n	801b05c <SX1276WriteBuffer+0x4c>
    {
        Sx_Board_SendRecv( buffer[i] );
 801b03e:	2417      	movs	r4, #23
 801b040:	193b      	adds	r3, r7, r4
 801b042:	781b      	ldrb	r3, [r3, #0]
 801b044:	68ba      	ldr	r2, [r7, #8]
 801b046:	18d3      	adds	r3, r2, r3
 801b048:	781b      	ldrb	r3, [r3, #0]
 801b04a:	b29b      	uxth	r3, r3
 801b04c:	0018      	movs	r0, r3
 801b04e:	f7eb f940 	bl	80062d2 <CMWX1ZZABZ0XX_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 801b052:	193b      	adds	r3, r7, r4
 801b054:	781a      	ldrb	r2, [r3, #0]
 801b056:	193b      	adds	r3, r7, r4
 801b058:	3201      	adds	r2, #1
 801b05a:	701a      	strb	r2, [r3, #0]
 801b05c:	2317      	movs	r3, #23
 801b05e:	18fa      	adds	r2, r7, r3
 801b060:	1dfb      	adds	r3, r7, #7
 801b062:	7812      	ldrb	r2, [r2, #0]
 801b064:	781b      	ldrb	r3, [r3, #0]
 801b066:	429a      	cmp	r2, r3
 801b068:	d3e9      	bcc.n	801b03e <SX1276WriteBuffer+0x2e>
    }

    //NSS = 1;
    Sx_Board_ChipSelect( 1 );
 801b06a:	2001      	movs	r0, #1
 801b06c:	f7eb f944 	bl	80062f8 <CMWX1ZZABZ0XX_RADIO_ChipSelect>
}
 801b070:	46c0      	nop			; (mov r8, r8)
 801b072:	46bd      	mov	sp, r7
 801b074:	b007      	add	sp, #28
 801b076:	bd90      	pop	{r4, r7, pc}

0801b078 <SX1276ReadBuffer>:

void SX1276ReadBuffer( uint32_t addr, uint8_t *buffer, uint8_t size )
{
 801b078:	b580      	push	{r7, lr}
 801b07a:	b086      	sub	sp, #24
 801b07c:	af00      	add	r7, sp, #0
 801b07e:	60f8      	str	r0, [r7, #12]
 801b080:	60b9      	str	r1, [r7, #8]
 801b082:	1dfb      	adds	r3, r7, #7
 801b084:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    //NSS = 0;
    Sx_Board_ChipSelect( 0 );
 801b086:	2000      	movs	r0, #0
 801b088:	f7eb f936 	bl	80062f8 <CMWX1ZZABZ0XX_RADIO_ChipSelect>

    Sx_Board_SendRecv( addr & 0x7F );
 801b08c:	68fb      	ldr	r3, [r7, #12]
 801b08e:	b29b      	uxth	r3, r3
 801b090:	227f      	movs	r2, #127	; 0x7f
 801b092:	4013      	ands	r3, r2
 801b094:	b29b      	uxth	r3, r3
 801b096:	0018      	movs	r0, r3
 801b098:	f7eb f91b 	bl	80062d2 <CMWX1ZZABZ0XX_RADIO_SendRecv>

    for( i = 0; i < size; i++ )
 801b09c:	2317      	movs	r3, #23
 801b09e:	18fb      	adds	r3, r7, r3
 801b0a0:	2200      	movs	r2, #0
 801b0a2:	701a      	strb	r2, [r3, #0]
 801b0a4:	e010      	b.n	801b0c8 <SX1276ReadBuffer+0x50>
    {
        buffer[i] = Sx_Board_SendRecv( 0 );
 801b0a6:	2000      	movs	r0, #0
 801b0a8:	f7eb f913 	bl	80062d2 <CMWX1ZZABZ0XX_RADIO_SendRecv>
 801b0ac:	0003      	movs	r3, r0
 801b0ae:	0019      	movs	r1, r3
 801b0b0:	2017      	movs	r0, #23
 801b0b2:	183b      	adds	r3, r7, r0
 801b0b4:	781b      	ldrb	r3, [r3, #0]
 801b0b6:	68ba      	ldr	r2, [r7, #8]
 801b0b8:	18d3      	adds	r3, r2, r3
 801b0ba:	b2ca      	uxtb	r2, r1
 801b0bc:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 801b0be:	183b      	adds	r3, r7, r0
 801b0c0:	781a      	ldrb	r2, [r3, #0]
 801b0c2:	183b      	adds	r3, r7, r0
 801b0c4:	3201      	adds	r2, #1
 801b0c6:	701a      	strb	r2, [r3, #0]
 801b0c8:	2317      	movs	r3, #23
 801b0ca:	18fa      	adds	r2, r7, r3
 801b0cc:	1dfb      	adds	r3, r7, #7
 801b0ce:	7812      	ldrb	r2, [r2, #0]
 801b0d0:	781b      	ldrb	r3, [r3, #0]
 801b0d2:	429a      	cmp	r2, r3
 801b0d4:	d3e7      	bcc.n	801b0a6 <SX1276ReadBuffer+0x2e>
    }

    //NSS = 1;
    Sx_Board_ChipSelect( 1 );
 801b0d6:	2001      	movs	r0, #1
 801b0d8:	f7eb f90e 	bl	80062f8 <CMWX1ZZABZ0XX_RADIO_ChipSelect>
}
 801b0dc:	46c0      	nop			; (mov r8, r8)
 801b0de:	46bd      	mov	sp, r7
 801b0e0:	b006      	add	sp, #24
 801b0e2:	bd80      	pop	{r7, pc}

0801b0e4 <SX1276WriteFifo>:

void SX1276WriteFifo( uint8_t *buffer, uint8_t size )
{
 801b0e4:	b580      	push	{r7, lr}
 801b0e6:	b082      	sub	sp, #8
 801b0e8:	af00      	add	r7, sp, #0
 801b0ea:	6078      	str	r0, [r7, #4]
 801b0ec:	000a      	movs	r2, r1
 801b0ee:	1cfb      	adds	r3, r7, #3
 801b0f0:	701a      	strb	r2, [r3, #0]
    SX1276WriteBuffer( 0, buffer, size );
 801b0f2:	1cfb      	adds	r3, r7, #3
 801b0f4:	781a      	ldrb	r2, [r3, #0]
 801b0f6:	687b      	ldr	r3, [r7, #4]
 801b0f8:	0019      	movs	r1, r3
 801b0fa:	2000      	movs	r0, #0
 801b0fc:	f7ff ff88 	bl	801b010 <SX1276WriteBuffer>
}
 801b100:	46c0      	nop			; (mov r8, r8)
 801b102:	46bd      	mov	sp, r7
 801b104:	b002      	add	sp, #8
 801b106:	bd80      	pop	{r7, pc}

0801b108 <SX1276ReadFifo>:

void SX1276ReadFifo( uint8_t *buffer, uint8_t size )
{
 801b108:	b580      	push	{r7, lr}
 801b10a:	b082      	sub	sp, #8
 801b10c:	af00      	add	r7, sp, #0
 801b10e:	6078      	str	r0, [r7, #4]
 801b110:	000a      	movs	r2, r1
 801b112:	1cfb      	adds	r3, r7, #3
 801b114:	701a      	strb	r2, [r3, #0]
    SX1276ReadBuffer( 0, buffer, size );
 801b116:	1cfb      	adds	r3, r7, #3
 801b118:	781a      	ldrb	r2, [r3, #0]
 801b11a:	687b      	ldr	r3, [r7, #4]
 801b11c:	0019      	movs	r1, r3
 801b11e:	2000      	movs	r0, #0
 801b120:	f7ff ffaa 	bl	801b078 <SX1276ReadBuffer>
}
 801b124:	46c0      	nop			; (mov r8, r8)
 801b126:	46bd      	mov	sp, r7
 801b128:	b002      	add	sp, #8
 801b12a:	bd80      	pop	{r7, pc}

0801b12c <SX1276SetMaxPayloadLength>:

void SX1276SetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 801b12c:	b580      	push	{r7, lr}
 801b12e:	b082      	sub	sp, #8
 801b130:	af00      	add	r7, sp, #0
 801b132:	0002      	movs	r2, r0
 801b134:	1dfb      	adds	r3, r7, #7
 801b136:	701a      	strb	r2, [r3, #0]
 801b138:	1dbb      	adds	r3, r7, #6
 801b13a:	1c0a      	adds	r2, r1, #0
 801b13c:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( modem );
 801b13e:	1dfb      	adds	r3, r7, #7
 801b140:	781b      	ldrb	r3, [r3, #0]
 801b142:	0018      	movs	r0, r3
 801b144:	f7ff fee8 	bl	801af18 <SX1276SetModem>

    switch( modem )
 801b148:	1dfb      	adds	r3, r7, #7
 801b14a:	781b      	ldrb	r3, [r3, #0]
 801b14c:	2b00      	cmp	r3, #0
 801b14e:	d002      	beq.n	801b156 <SX1276SetMaxPayloadLength+0x2a>
 801b150:	2b01      	cmp	r3, #1
 801b152:	d00f      	beq.n	801b174 <SX1276SetMaxPayloadLength+0x48>
        break;
    case MODEM_LORA:
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
        break;
    }
}
 801b154:	e016      	b.n	801b184 <SX1276SetMaxPayloadLength+0x58>
        if( SX1276.Settings.Fsk.FixLen == false )
 801b156:	4b0d      	ldr	r3, [pc, #52]	; (801b18c <SX1276SetMaxPayloadLength+0x60>)
 801b158:	2222      	movs	r2, #34	; 0x22
 801b15a:	5c9b      	ldrb	r3, [r3, r2]
 801b15c:	2201      	movs	r2, #1
 801b15e:	4053      	eors	r3, r2
 801b160:	b2db      	uxtb	r3, r3
 801b162:	2b00      	cmp	r3, #0
 801b164:	d00d      	beq.n	801b182 <SX1276SetMaxPayloadLength+0x56>
            SX1276Write( REG_PAYLOADLENGTH, max );
 801b166:	1dbb      	adds	r3, r7, #6
 801b168:	781b      	ldrb	r3, [r3, #0]
 801b16a:	0019      	movs	r1, r3
 801b16c:	2032      	movs	r0, #50	; 0x32
 801b16e:	f7ff ff2d 	bl	801afcc <SX1276Write>
        break;
 801b172:	e006      	b.n	801b182 <SX1276SetMaxPayloadLength+0x56>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 801b174:	1dbb      	adds	r3, r7, #6
 801b176:	781b      	ldrb	r3, [r3, #0]
 801b178:	0019      	movs	r1, r3
 801b17a:	2023      	movs	r0, #35	; 0x23
 801b17c:	f7ff ff26 	bl	801afcc <SX1276Write>
        break;
 801b180:	e000      	b.n	801b184 <SX1276SetMaxPayloadLength+0x58>
        break;
 801b182:	46c0      	nop			; (mov r8, r8)
}
 801b184:	46c0      	nop			; (mov r8, r8)
 801b186:	46bd      	mov	sp, r7
 801b188:	b002      	add	sp, #8
 801b18a:	bd80      	pop	{r7, pc}
 801b18c:	20001724 	.word	0x20001724

0801b190 <SX1276SetPublicNetwork>:

void SX1276SetPublicNetwork( bool enable )
{
 801b190:	b580      	push	{r7, lr}
 801b192:	b082      	sub	sp, #8
 801b194:	af00      	add	r7, sp, #0
 801b196:	0002      	movs	r2, r0
 801b198:	1dfb      	adds	r3, r7, #7
 801b19a:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( MODEM_LORA );
 801b19c:	2001      	movs	r0, #1
 801b19e:	f7ff febb 	bl	801af18 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 801b1a2:	4b0b      	ldr	r3, [pc, #44]	; (801b1d0 <SX1276SetPublicNetwork+0x40>)
 801b1a4:	1dfa      	adds	r2, r7, #7
 801b1a6:	215c      	movs	r1, #92	; 0x5c
 801b1a8:	7812      	ldrb	r2, [r2, #0]
 801b1aa:	545a      	strb	r2, [r3, r1]
    if( enable == true )
 801b1ac:	1dfb      	adds	r3, r7, #7
 801b1ae:	781b      	ldrb	r3, [r3, #0]
 801b1b0:	2b00      	cmp	r3, #0
 801b1b2:	d004      	beq.n	801b1be <SX1276SetPublicNetwork+0x2e>
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 801b1b4:	2134      	movs	r1, #52	; 0x34
 801b1b6:	2039      	movs	r0, #57	; 0x39
 801b1b8:	f7ff ff08 	bl	801afcc <SX1276Write>
    else
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
    }
}
 801b1bc:	e003      	b.n	801b1c6 <SX1276SetPublicNetwork+0x36>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 801b1be:	2112      	movs	r1, #18
 801b1c0:	2039      	movs	r0, #57	; 0x39
 801b1c2:	f7ff ff03 	bl	801afcc <SX1276Write>
}
 801b1c6:	46c0      	nop			; (mov r8, r8)
 801b1c8:	46bd      	mov	sp, r7
 801b1ca:	b002      	add	sp, #8
 801b1cc:	bd80      	pop	{r7, pc}
 801b1ce:	46c0      	nop			; (mov r8, r8)
 801b1d0:	20001724 	.word	0x20001724

0801b1d4 <SX1276GetWakeupTime>:

uint32_t SX1276GetWakeupTime( void )
{
 801b1d4:	b580      	push	{r7, lr}
 801b1d6:	af00      	add	r7, sp, #0
    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
 801b1d8:	f7ea fe18 	bl	8005e0c <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>
 801b1dc:	0003      	movs	r3, r0
 801b1de:	3302      	adds	r3, #2
}
 801b1e0:	0018      	movs	r0, r3
 801b1e2:	46bd      	mov	sp, r7
 801b1e4:	bd80      	pop	{r7, pc}
	...

0801b1e8 <GetFskBandwidthRegValue>:

static uint8_t GetFskBandwidthRegValue( uint32_t bw )
{
 801b1e8:	b580      	push	{r7, lr}
 801b1ea:	b084      	sub	sp, #16
 801b1ec:	af00      	add	r7, sp, #0
 801b1ee:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 801b1f0:	230f      	movs	r3, #15
 801b1f2:	18fb      	adds	r3, r7, r3
 801b1f4:	2200      	movs	r2, #0
 801b1f6:	701a      	strb	r2, [r3, #0]
 801b1f8:	e01f      	b.n	801b23a <GetFskBandwidthRegValue+0x52>
    {
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 801b1fa:	210f      	movs	r1, #15
 801b1fc:	187b      	adds	r3, r7, r1
 801b1fe:	781a      	ldrb	r2, [r3, #0]
 801b200:	4b13      	ldr	r3, [pc, #76]	; (801b250 <GetFskBandwidthRegValue+0x68>)
 801b202:	00d2      	lsls	r2, r2, #3
 801b204:	58d3      	ldr	r3, [r2, r3]
 801b206:	687a      	ldr	r2, [r7, #4]
 801b208:	429a      	cmp	r2, r3
 801b20a:	d310      	bcc.n	801b22e <GetFskBandwidthRegValue+0x46>
 801b20c:	187b      	adds	r3, r7, r1
 801b20e:	781b      	ldrb	r3, [r3, #0]
 801b210:	1c5a      	adds	r2, r3, #1
 801b212:	4b0f      	ldr	r3, [pc, #60]	; (801b250 <GetFskBandwidthRegValue+0x68>)
 801b214:	00d2      	lsls	r2, r2, #3
 801b216:	58d3      	ldr	r3, [r2, r3]
 801b218:	687a      	ldr	r2, [r7, #4]
 801b21a:	429a      	cmp	r2, r3
 801b21c:	d207      	bcs.n	801b22e <GetFskBandwidthRegValue+0x46>
        {
            return FskBandwidths[i].RegValue;
 801b21e:	187b      	adds	r3, r7, r1
 801b220:	781b      	ldrb	r3, [r3, #0]
 801b222:	4a0b      	ldr	r2, [pc, #44]	; (801b250 <GetFskBandwidthRegValue+0x68>)
 801b224:	00db      	lsls	r3, r3, #3
 801b226:	18d3      	adds	r3, r2, r3
 801b228:	3304      	adds	r3, #4
 801b22a:	781b      	ldrb	r3, [r3, #0]
 801b22c:	e00b      	b.n	801b246 <GetFskBandwidthRegValue+0x5e>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 801b22e:	210f      	movs	r1, #15
 801b230:	187b      	adds	r3, r7, r1
 801b232:	781a      	ldrb	r2, [r3, #0]
 801b234:	187b      	adds	r3, r7, r1
 801b236:	3201      	adds	r2, #1
 801b238:	701a      	strb	r2, [r3, #0]
 801b23a:	230f      	movs	r3, #15
 801b23c:	18fb      	adds	r3, r7, r3
 801b23e:	781b      	ldrb	r3, [r3, #0]
 801b240:	2b14      	cmp	r3, #20
 801b242:	d9da      	bls.n	801b1fa <GetFskBandwidthRegValue+0x12>
        }
    }
    // ERROR: Value not found
    while( 1 );
 801b244:	e7fe      	b.n	801b244 <GetFskBandwidthRegValue+0x5c>
}
 801b246:	0018      	movs	r0, r3
 801b248:	46bd      	mov	sp, r7
 801b24a:	b004      	add	sp, #16
 801b24c:	bd80      	pop	{r7, pc}
 801b24e:	46c0      	nop			; (mov r8, r8)
 801b250:	0801fc00 	.word	0x0801fc00

0801b254 <SX1276GetLoRaBandwidthInHz>:

static uint32_t SX1276GetLoRaBandwidthInHz( uint32_t bw )
{
 801b254:	b580      	push	{r7, lr}
 801b256:	b084      	sub	sp, #16
 801b258:	af00      	add	r7, sp, #0
 801b25a:	6078      	str	r0, [r7, #4]
    uint32_t bandwidthInHz = 0;
 801b25c:	2300      	movs	r3, #0
 801b25e:	60fb      	str	r3, [r7, #12]

    switch( bw )
 801b260:	687b      	ldr	r3, [r7, #4]
 801b262:	2b03      	cmp	r3, #3
 801b264:	d018      	beq.n	801b298 <SX1276GetLoRaBandwidthInHz+0x44>
 801b266:	687b      	ldr	r3, [r7, #4]
 801b268:	2b03      	cmp	r3, #3
 801b26a:	d818      	bhi.n	801b29e <SX1276GetLoRaBandwidthInHz+0x4a>
 801b26c:	687b      	ldr	r3, [r7, #4]
 801b26e:	2b02      	cmp	r3, #2
 801b270:	d00f      	beq.n	801b292 <SX1276GetLoRaBandwidthInHz+0x3e>
 801b272:	687b      	ldr	r3, [r7, #4]
 801b274:	2b02      	cmp	r3, #2
 801b276:	d812      	bhi.n	801b29e <SX1276GetLoRaBandwidthInHz+0x4a>
 801b278:	687b      	ldr	r3, [r7, #4]
 801b27a:	2b00      	cmp	r3, #0
 801b27c:	d003      	beq.n	801b286 <SX1276GetLoRaBandwidthInHz+0x32>
 801b27e:	687b      	ldr	r3, [r7, #4]
 801b280:	2b01      	cmp	r3, #1
 801b282:	d003      	beq.n	801b28c <SX1276GetLoRaBandwidthInHz+0x38>
 801b284:	e00b      	b.n	801b29e <SX1276GetLoRaBandwidthInHz+0x4a>
    {
    case 0: // 125 kHz
        bandwidthInHz = 125000UL;
 801b286:	4b08      	ldr	r3, [pc, #32]	; (801b2a8 <SX1276GetLoRaBandwidthInHz+0x54>)
 801b288:	60fb      	str	r3, [r7, #12]
        break;
 801b28a:	e008      	b.n	801b29e <SX1276GetLoRaBandwidthInHz+0x4a>
    case 1: // 250 kHz
        bandwidthInHz = 250000UL;
 801b28c:	4b07      	ldr	r3, [pc, #28]	; (801b2ac <SX1276GetLoRaBandwidthInHz+0x58>)
 801b28e:	60fb      	str	r3, [r7, #12]
        break;
 801b290:	e005      	b.n	801b29e <SX1276GetLoRaBandwidthInHz+0x4a>
    case 2: // 500 kHz
        bandwidthInHz = 500000UL;
 801b292:	4b07      	ldr	r3, [pc, #28]	; (801b2b0 <SX1276GetLoRaBandwidthInHz+0x5c>)
 801b294:	60fb      	str	r3, [r7, #12]
        break;
 801b296:	e002      	b.n	801b29e <SX1276GetLoRaBandwidthInHz+0x4a>
    case 3: // 62.5 kHz NEW
            bandwidthInHz = 62500UL;
 801b298:	4b06      	ldr	r3, [pc, #24]	; (801b2b4 <SX1276GetLoRaBandwidthInHz+0x60>)
 801b29a:	60fb      	str	r3, [r7, #12]
            break;
 801b29c:	46c0      	nop			; (mov r8, r8)
    }

    return bandwidthInHz;
 801b29e:	68fb      	ldr	r3, [r7, #12]
}
 801b2a0:	0018      	movs	r0, r3
 801b2a2:	46bd      	mov	sp, r7
 801b2a4:	b004      	add	sp, #16
 801b2a6:	bd80      	pop	{r7, pc}
 801b2a8:	0001e848 	.word	0x0001e848
 801b2ac:	0003d090 	.word	0x0003d090
 801b2b0:	0007a120 	.word	0x0007a120
 801b2b4:	0000f424 	.word	0x0000f424

0801b2b8 <SX1276GetGfskTimeOnAirNumerator>:

static uint32_t SX1276GetGfskTimeOnAirNumerator( uint16_t preambleLen, bool fixLen,
                                                 uint8_t payloadLen, bool crcOn )
{
 801b2b8:	b5b0      	push	{r4, r5, r7, lr}
 801b2ba:	b084      	sub	sp, #16
 801b2bc:	af00      	add	r7, sp, #0
 801b2be:	0005      	movs	r5, r0
 801b2c0:	000c      	movs	r4, r1
 801b2c2:	0010      	movs	r0, r2
 801b2c4:	0019      	movs	r1, r3
 801b2c6:	1dbb      	adds	r3, r7, #6
 801b2c8:	1c2a      	adds	r2, r5, #0
 801b2ca:	801a      	strh	r2, [r3, #0]
 801b2cc:	1d7b      	adds	r3, r7, #5
 801b2ce:	1c22      	adds	r2, r4, #0
 801b2d0:	701a      	strb	r2, [r3, #0]
 801b2d2:	1d3b      	adds	r3, r7, #4
 801b2d4:	1c02      	adds	r2, r0, #0
 801b2d6:	701a      	strb	r2, [r3, #0]
 801b2d8:	1cfb      	adds	r3, r7, #3
 801b2da:	1c0a      	adds	r2, r1, #0
 801b2dc:	701a      	strb	r2, [r3, #0]
    const uint8_t syncWordLength = 3;
 801b2de:	230f      	movs	r3, #15
 801b2e0:	18fb      	adds	r3, r7, r3
 801b2e2:	2203      	movs	r2, #3
 801b2e4:	701a      	strb	r2, [r3, #0]

    return ( preambleLen << 3 ) +
 801b2e6:	1dbb      	adds	r3, r7, #6
 801b2e8:	881b      	ldrh	r3, [r3, #0]
 801b2ea:	00da      	lsls	r2, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) +
 801b2ec:	1d7b      	adds	r3, r7, #5
 801b2ee:	781b      	ldrb	r3, [r3, #0]
 801b2f0:	2101      	movs	r1, #1
 801b2f2:	404b      	eors	r3, r1
 801b2f4:	b2db      	uxtb	r3, r3
 801b2f6:	2b00      	cmp	r3, #0
 801b2f8:	d001      	beq.n	801b2fe <SX1276GetGfskTimeOnAirNumerator+0x46>
 801b2fa:	2308      	movs	r3, #8
 801b2fc:	e000      	b.n	801b300 <SX1276GetGfskTimeOnAirNumerator+0x48>
 801b2fe:	2300      	movs	r3, #0
    return ( preambleLen << 3 ) +
 801b300:	189a      	adds	r2, r3, r2
             ( syncWordLength << 3 ) +
 801b302:	230f      	movs	r3, #15
 801b304:	18fb      	adds	r3, r7, r3
 801b306:	781b      	ldrb	r3, [r3, #0]
 801b308:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) +
 801b30a:	18d2      	adds	r2, r2, r3
             ( ( payloadLen +
 801b30c:	1d3b      	adds	r3, r7, #4
 801b30e:	7819      	ldrb	r1, [r3, #0]
               ( 0 ) + // Address filter size
               ( ( crcOn == true ) ? 2 : 0 ) 
 801b310:	1cfb      	adds	r3, r7, #3
 801b312:	781b      	ldrb	r3, [r3, #0]
 801b314:	2b00      	cmp	r3, #0
 801b316:	d001      	beq.n	801b31c <SX1276GetGfskTimeOnAirNumerator+0x64>
 801b318:	2302      	movs	r3, #2
 801b31a:	e000      	b.n	801b31e <SX1276GetGfskTimeOnAirNumerator+0x66>
 801b31c:	2300      	movs	r3, #0
               ( 0 ) + // Address filter size
 801b31e:	185b      	adds	r3, r3, r1
               ) << 3 
 801b320:	00db      	lsls	r3, r3, #3
             ( syncWordLength << 3 ) +
 801b322:	18d3      	adds	r3, r2, r3
             );
}
 801b324:	0018      	movs	r0, r3
 801b326:	46bd      	mov	sp, r7
 801b328:	b004      	add	sp, #16
 801b32a:	bdb0      	pop	{r4, r5, r7, pc}

0801b32c <SX1276GetLoRaTimeOnAirNumerator>:

static uint32_t SX1276GetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                              uint32_t datarate, uint8_t coderate,
                              uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                              bool crcOn )
{
 801b32c:	b580      	push	{r7, lr}
 801b32e:	b08a      	sub	sp, #40	; 0x28
 801b330:	af00      	add	r7, sp, #0
 801b332:	60f8      	str	r0, [r7, #12]
 801b334:	60b9      	str	r1, [r7, #8]
 801b336:	0019      	movs	r1, r3
 801b338:	1dfb      	adds	r3, r7, #7
 801b33a:	701a      	strb	r2, [r3, #0]
 801b33c:	1d3b      	adds	r3, r7, #4
 801b33e:	1c0a      	adds	r2, r1, #0
 801b340:	801a      	strh	r2, [r3, #0]
    int32_t crDenom           = coderate + 4;
 801b342:	1dfb      	adds	r3, r7, #7
 801b344:	781b      	ldrb	r3, [r3, #0]
 801b346:	3304      	adds	r3, #4
 801b348:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 801b34a:	2327      	movs	r3, #39	; 0x27
 801b34c:	18fb      	adds	r3, r7, r3
 801b34e:	2200      	movs	r2, #0
 801b350:	701a      	strb	r2, [r3, #0]

    // Ensure that the preamble length is at least 12 symbols when using SF5 or
    // SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801b352:	68bb      	ldr	r3, [r7, #8]
 801b354:	2b05      	cmp	r3, #5
 801b356:	d002      	beq.n	801b35e <SX1276GetLoRaTimeOnAirNumerator+0x32>
 801b358:	68bb      	ldr	r3, [r7, #8]
 801b35a:	2b06      	cmp	r3, #6
 801b35c:	d106      	bne.n	801b36c <SX1276GetLoRaTimeOnAirNumerator+0x40>
    {
        if( preambleLen < 12 )
 801b35e:	1d3b      	adds	r3, r7, #4
 801b360:	881b      	ldrh	r3, [r3, #0]
 801b362:	2b0b      	cmp	r3, #11
 801b364:	d802      	bhi.n	801b36c <SX1276GetLoRaTimeOnAirNumerator+0x40>
        {
            preambleLen = 12;
 801b366:	1d3b      	adds	r3, r7, #4
 801b368:	220c      	movs	r2, #12
 801b36a:	801a      	strh	r2, [r3, #0]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801b36c:	68fb      	ldr	r3, [r7, #12]
 801b36e:	2b00      	cmp	r3, #0
 801b370:	d105      	bne.n	801b37e <SX1276GetLoRaTimeOnAirNumerator+0x52>
 801b372:	68bb      	ldr	r3, [r7, #8]
 801b374:	2b0b      	cmp	r3, #11
 801b376:	d008      	beq.n	801b38a <SX1276GetLoRaTimeOnAirNumerator+0x5e>
 801b378:	68bb      	ldr	r3, [r7, #8]
 801b37a:	2b0c      	cmp	r3, #12
 801b37c:	d005      	beq.n	801b38a <SX1276GetLoRaTimeOnAirNumerator+0x5e>
 801b37e:	68fb      	ldr	r3, [r7, #12]
 801b380:	2b01      	cmp	r3, #1
 801b382:	d106      	bne.n	801b392 <SX1276GetLoRaTimeOnAirNumerator+0x66>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801b384:	68bb      	ldr	r3, [r7, #8]
 801b386:	2b0c      	cmp	r3, #12
 801b388:	d103      	bne.n	801b392 <SX1276GetLoRaTimeOnAirNumerator+0x66>
    {
        lowDatareOptimize = true;
 801b38a:	2327      	movs	r3, #39	; 0x27
 801b38c:	18fb      	adds	r3, r7, r3
 801b38e:	2201      	movs	r2, #1
 801b390:	701a      	strb	r2, [r3, #0]
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801b392:	2334      	movs	r3, #52	; 0x34
 801b394:	18fb      	adds	r3, r7, r3
 801b396:	781b      	ldrb	r3, [r3, #0]
 801b398:	00da      	lsls	r2, r3, #3
                            ( crcOn ? 16 : 0 ) -
 801b39a:	2338      	movs	r3, #56	; 0x38
 801b39c:	18fb      	adds	r3, r7, r3
 801b39e:	781b      	ldrb	r3, [r3, #0]
 801b3a0:	2b00      	cmp	r3, #0
 801b3a2:	d001      	beq.n	801b3a8 <SX1276GetLoRaTimeOnAirNumerator+0x7c>
 801b3a4:	2310      	movs	r3, #16
 801b3a6:	e000      	b.n	801b3aa <SX1276GetLoRaTimeOnAirNumerator+0x7e>
 801b3a8:	2300      	movs	r3, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801b3aa:	189b      	adds	r3, r3, r2
 801b3ac:	001a      	movs	r2, r3
                            ( 4 * datarate ) +
 801b3ae:	68bb      	ldr	r3, [r7, #8]
 801b3b0:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 801b3b2:	1ad2      	subs	r2, r2, r3
                            ( fixLen ? 0 : 20 );
 801b3b4:	2330      	movs	r3, #48	; 0x30
 801b3b6:	18fb      	adds	r3, r7, r3
 801b3b8:	781b      	ldrb	r3, [r3, #0]
 801b3ba:	2b00      	cmp	r3, #0
 801b3bc:	d001      	beq.n	801b3c2 <SX1276GetLoRaTimeOnAirNumerator+0x96>
 801b3be:	2300      	movs	r3, #0
 801b3c0:	e000      	b.n	801b3c4 <SX1276GetLoRaTimeOnAirNumerator+0x98>
 801b3c2:	2314      	movs	r3, #20
                            ( 4 * datarate ) +
 801b3c4:	189b      	adds	r3, r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801b3c6:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 801b3c8:	68bb      	ldr	r3, [r7, #8]
 801b3ca:	2b06      	cmp	r3, #6
 801b3cc:	d803      	bhi.n	801b3d6 <SX1276GetLoRaTimeOnAirNumerator+0xaa>
    {
        ceilDenominator = 4 * datarate;
 801b3ce:	68bb      	ldr	r3, [r7, #8]
 801b3d0:	009b      	lsls	r3, r3, #2
 801b3d2:	623b      	str	r3, [r7, #32]
 801b3d4:	e00f      	b.n	801b3f6 <SX1276GetLoRaTimeOnAirNumerator+0xca>
    }
    else
    {
        ceilNumerator += 8;
 801b3d6:	69fb      	ldr	r3, [r7, #28]
 801b3d8:	3308      	adds	r3, #8
 801b3da:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 801b3dc:	2327      	movs	r3, #39	; 0x27
 801b3de:	18fb      	adds	r3, r7, r3
 801b3e0:	781b      	ldrb	r3, [r3, #0]
 801b3e2:	2b00      	cmp	r3, #0
 801b3e4:	d004      	beq.n	801b3f0 <SX1276GetLoRaTimeOnAirNumerator+0xc4>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 801b3e6:	68bb      	ldr	r3, [r7, #8]
 801b3e8:	3b02      	subs	r3, #2
 801b3ea:	009b      	lsls	r3, r3, #2
 801b3ec:	623b      	str	r3, [r7, #32]
 801b3ee:	e002      	b.n	801b3f6 <SX1276GetLoRaTimeOnAirNumerator+0xca>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 801b3f0:	68bb      	ldr	r3, [r7, #8]
 801b3f2:	009b      	lsls	r3, r3, #2
 801b3f4:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 801b3f6:	69fb      	ldr	r3, [r7, #28]
 801b3f8:	2b00      	cmp	r3, #0
 801b3fa:	da01      	bge.n	801b400 <SX1276GetLoRaTimeOnAirNumerator+0xd4>
    {
        ceilNumerator = 0;
 801b3fc:	2300      	movs	r3, #0
 801b3fe:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 801b400:	69fa      	ldr	r2, [r7, #28]
 801b402:	6a3b      	ldr	r3, [r7, #32]
 801b404:	18d3      	adds	r3, r2, r3
 801b406:	3b01      	subs	r3, #1
 801b408:	6a39      	ldr	r1, [r7, #32]
 801b40a:	0018      	movs	r0, r3
 801b40c:	f7e4 ff18 	bl	8000240 <__divsi3>
 801b410:	0003      	movs	r3, r0
 801b412:	001a      	movs	r2, r3
 801b414:	697b      	ldr	r3, [r7, #20]
 801b416:	435a      	muls	r2, r3
 801b418:	1d3b      	adds	r3, r7, #4
 801b41a:	881b      	ldrh	r3, [r3, #0]
 801b41c:	18d3      	adds	r3, r2, r3
    int32_t intermediate =
 801b41e:	330c      	adds	r3, #12
 801b420:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 801b422:	68bb      	ldr	r3, [r7, #8]
 801b424:	2b06      	cmp	r3, #6
 801b426:	d802      	bhi.n	801b42e <SX1276GetLoRaTimeOnAirNumerator+0x102>
    {
        intermediate += 2;
 801b428:	69bb      	ldr	r3, [r7, #24]
 801b42a:	3302      	adds	r3, #2
 801b42c:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 801b42e:	69bb      	ldr	r3, [r7, #24]
 801b430:	009b      	lsls	r3, r3, #2
 801b432:	1c5a      	adds	r2, r3, #1
 801b434:	68bb      	ldr	r3, [r7, #8]
 801b436:	3b02      	subs	r3, #2
 801b438:	409a      	lsls	r2, r3
 801b43a:	0013      	movs	r3, r2
}
 801b43c:	0018      	movs	r0, r3
 801b43e:	46bd      	mov	sp, r7
 801b440:	b00a      	add	sp, #40	; 0x28
 801b442:	bd80      	pop	{r7, pc}

0801b444 <SX1276OnTimeoutIrq>:

static void SX1276OnTimeoutIrq( void* context )
{
 801b444:	b590      	push	{r4, r7, lr}
 801b446:	b085      	sub	sp, #20
 801b448:	af00      	add	r7, sp, #0
 801b44a:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.State )
 801b44c:	4b4f      	ldr	r3, [pc, #316]	; (801b58c <SX1276OnTimeoutIrq+0x148>)
 801b44e:	791b      	ldrb	r3, [r3, #4]
 801b450:	2b01      	cmp	r3, #1
 801b452:	d002      	beq.n	801b45a <SX1276OnTimeoutIrq+0x16>
 801b454:	2b02      	cmp	r3, #2
 801b456:	d041      	beq.n	801b4dc <SX1276OnTimeoutIrq+0x98>
        {
            RadioEvents->TxTimeout( );
        }
        break;
    default:
        break;
 801b458:	e094      	b.n	801b584 <SX1276OnTimeoutIrq+0x140>
        if( SX1276.Settings.Modem == MODEM_FSK )
 801b45a:	4b4c      	ldr	r3, [pc, #304]	; (801b58c <SX1276OnTimeoutIrq+0x148>)
 801b45c:	795b      	ldrb	r3, [r3, #5]
 801b45e:	2b00      	cmp	r3, #0
 801b460:	d12e      	bne.n	801b4c0 <SX1276OnTimeoutIrq+0x7c>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 801b462:	4b4a      	ldr	r3, [pc, #296]	; (801b58c <SX1276OnTimeoutIrq+0x148>)
 801b464:	2230      	movs	r2, #48	; 0x30
 801b466:	2100      	movs	r1, #0
 801b468:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 801b46a:	4b48      	ldr	r3, [pc, #288]	; (801b58c <SX1276OnTimeoutIrq+0x148>)
 801b46c:	2231      	movs	r2, #49	; 0x31
 801b46e:	2100      	movs	r1, #0
 801b470:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801b472:	4b46      	ldr	r3, [pc, #280]	; (801b58c <SX1276OnTimeoutIrq+0x148>)
 801b474:	2200      	movs	r2, #0
 801b476:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 801b478:	4b44      	ldr	r3, [pc, #272]	; (801b58c <SX1276OnTimeoutIrq+0x148>)
 801b47a:	2200      	movs	r2, #0
 801b47c:	875a      	strh	r2, [r3, #58]	; 0x3a
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 801b47e:	210b      	movs	r1, #11
 801b480:	203e      	movs	r0, #62	; 0x3e
 801b482:	f7ff fda3 	bl	801afcc <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 801b486:	2110      	movs	r1, #16
 801b488:	203f      	movs	r0, #63	; 0x3f
 801b48a:	f7ff fd9f 	bl	801afcc <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 801b48e:	4b3f      	ldr	r3, [pc, #252]	; (801b58c <SX1276OnTimeoutIrq+0x148>)
 801b490:	2226      	movs	r2, #38	; 0x26
 801b492:	5c9b      	ldrb	r3, [r3, r2]
 801b494:	2b00      	cmp	r3, #0
 801b496:	d00c      	beq.n	801b4b2 <SX1276OnTimeoutIrq+0x6e>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 801b498:	200d      	movs	r0, #13
 801b49a:	f7ff fda8 	bl	801afee <SX1276Read>
 801b49e:	0003      	movs	r3, r0
 801b4a0:	001a      	movs	r2, r3
 801b4a2:	2340      	movs	r3, #64	; 0x40
 801b4a4:	4313      	orrs	r3, r2
 801b4a6:	b2db      	uxtb	r3, r3
 801b4a8:	0019      	movs	r1, r3
 801b4aa:	200d      	movs	r0, #13
 801b4ac:	f7ff fd8e 	bl	801afcc <SX1276Write>
 801b4b0:	e006      	b.n	801b4c0 <SX1276OnTimeoutIrq+0x7c>
                SX1276.Settings.State = RF_IDLE;
 801b4b2:	4b36      	ldr	r3, [pc, #216]	; (801b58c <SX1276OnTimeoutIrq+0x148>)
 801b4b4:	2200      	movs	r2, #0
 801b4b6:	711a      	strb	r2, [r3, #4]
                TimerStop( &RxTimeoutSyncWord );
 801b4b8:	4b35      	ldr	r3, [pc, #212]	; (801b590 <SX1276OnTimeoutIrq+0x14c>)
 801b4ba:	0018      	movs	r0, r3
 801b4bc:	f001 fbfa 	bl	801ccb4 <UTIL_TIMER_Stop>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801b4c0:	4b34      	ldr	r3, [pc, #208]	; (801b594 <SX1276OnTimeoutIrq+0x150>)
 801b4c2:	681b      	ldr	r3, [r3, #0]
 801b4c4:	2b00      	cmp	r3, #0
 801b4c6:	d05a      	beq.n	801b57e <SX1276OnTimeoutIrq+0x13a>
 801b4c8:	4b32      	ldr	r3, [pc, #200]	; (801b594 <SX1276OnTimeoutIrq+0x150>)
 801b4ca:	681b      	ldr	r3, [r3, #0]
 801b4cc:	68db      	ldr	r3, [r3, #12]
 801b4ce:	2b00      	cmp	r3, #0
 801b4d0:	d055      	beq.n	801b57e <SX1276OnTimeoutIrq+0x13a>
            RadioEvents->RxTimeout( );
 801b4d2:	4b30      	ldr	r3, [pc, #192]	; (801b594 <SX1276OnTimeoutIrq+0x150>)
 801b4d4:	681b      	ldr	r3, [r3, #0]
 801b4d6:	68db      	ldr	r3, [r3, #12]
 801b4d8:	4798      	blx	r3
        break;
 801b4da:	e050      	b.n	801b57e <SX1276OnTimeoutIrq+0x13a>
        SX1276Reset( );
 801b4dc:	f7ff fca8 	bl	801ae30 <SX1276Reset>
        RxChainCalibration( );
 801b4e0:	f7fe f9ee 	bl	80198c0 <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 801b4e4:	2000      	movs	r0, #0
 801b4e6:	f7ff fcaa 	bl	801ae3e <SX1276SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 801b4ea:	230f      	movs	r3, #15
 801b4ec:	18fb      	adds	r3, r7, r3
 801b4ee:	2200      	movs	r2, #0
 801b4f0:	701a      	strb	r2, [r3, #0]
 801b4f2:	e025      	b.n	801b540 <SX1276OnTimeoutIrq+0xfc>
            SX1276SetModem( RadioRegsInit[i].Modem );
 801b4f4:	240f      	movs	r4, #15
 801b4f6:	193b      	adds	r3, r7, r4
 801b4f8:	781a      	ldrb	r2, [r3, #0]
 801b4fa:	4927      	ldr	r1, [pc, #156]	; (801b598 <SX1276OnTimeoutIrq+0x154>)
 801b4fc:	0013      	movs	r3, r2
 801b4fe:	005b      	lsls	r3, r3, #1
 801b500:	189b      	adds	r3, r3, r2
 801b502:	5c5b      	ldrb	r3, [r3, r1]
 801b504:	0018      	movs	r0, r3
 801b506:	f7ff fd07 	bl	801af18 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 801b50a:	193b      	adds	r3, r7, r4
 801b50c:	781a      	ldrb	r2, [r3, #0]
 801b50e:	4922      	ldr	r1, [pc, #136]	; (801b598 <SX1276OnTimeoutIrq+0x154>)
 801b510:	0013      	movs	r3, r2
 801b512:	005b      	lsls	r3, r3, #1
 801b514:	189b      	adds	r3, r3, r2
 801b516:	18cb      	adds	r3, r1, r3
 801b518:	3301      	adds	r3, #1
 801b51a:	781b      	ldrb	r3, [r3, #0]
 801b51c:	0018      	movs	r0, r3
 801b51e:	193b      	adds	r3, r7, r4
 801b520:	781a      	ldrb	r2, [r3, #0]
 801b522:	491d      	ldr	r1, [pc, #116]	; (801b598 <SX1276OnTimeoutIrq+0x154>)
 801b524:	0013      	movs	r3, r2
 801b526:	005b      	lsls	r3, r3, #1
 801b528:	189b      	adds	r3, r3, r2
 801b52a:	18cb      	adds	r3, r1, r3
 801b52c:	3302      	adds	r3, #2
 801b52e:	781b      	ldrb	r3, [r3, #0]
 801b530:	0019      	movs	r1, r3
 801b532:	f7ff fd4b 	bl	801afcc <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 801b536:	193b      	adds	r3, r7, r4
 801b538:	781a      	ldrb	r2, [r3, #0]
 801b53a:	193b      	adds	r3, r7, r4
 801b53c:	3201      	adds	r2, #1
 801b53e:	701a      	strb	r2, [r3, #0]
 801b540:	230f      	movs	r3, #15
 801b542:	18fb      	adds	r3, r7, r3
 801b544:	781b      	ldrb	r3, [r3, #0]
 801b546:	2b0f      	cmp	r3, #15
 801b548:	d9d4      	bls.n	801b4f4 <SX1276OnTimeoutIrq+0xb0>
        SX1276SetModem( MODEM_FSK );
 801b54a:	2000      	movs	r0, #0
 801b54c:	f7ff fce4 	bl	801af18 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 801b550:	4b0e      	ldr	r3, [pc, #56]	; (801b58c <SX1276OnTimeoutIrq+0x148>)
 801b552:	225c      	movs	r2, #92	; 0x5c
 801b554:	5c9b      	ldrb	r3, [r3, r2]
 801b556:	0018      	movs	r0, r3
 801b558:	f7ff fe1a 	bl	801b190 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 801b55c:	4b0b      	ldr	r3, [pc, #44]	; (801b58c <SX1276OnTimeoutIrq+0x148>)
 801b55e:	2200      	movs	r2, #0
 801b560:	711a      	strb	r2, [r3, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801b562:	4b0c      	ldr	r3, [pc, #48]	; (801b594 <SX1276OnTimeoutIrq+0x150>)
 801b564:	681b      	ldr	r3, [r3, #0]
 801b566:	2b00      	cmp	r3, #0
 801b568:	d00b      	beq.n	801b582 <SX1276OnTimeoutIrq+0x13e>
 801b56a:	4b0a      	ldr	r3, [pc, #40]	; (801b594 <SX1276OnTimeoutIrq+0x150>)
 801b56c:	681b      	ldr	r3, [r3, #0]
 801b56e:	685b      	ldr	r3, [r3, #4]
 801b570:	2b00      	cmp	r3, #0
 801b572:	d006      	beq.n	801b582 <SX1276OnTimeoutIrq+0x13e>
            RadioEvents->TxTimeout( );
 801b574:	4b07      	ldr	r3, [pc, #28]	; (801b594 <SX1276OnTimeoutIrq+0x150>)
 801b576:	681b      	ldr	r3, [r3, #0]
 801b578:	685b      	ldr	r3, [r3, #4]
 801b57a:	4798      	blx	r3
        break;
 801b57c:	e001      	b.n	801b582 <SX1276OnTimeoutIrq+0x13e>
        break;
 801b57e:	46c0      	nop			; (mov r8, r8)
 801b580:	e000      	b.n	801b584 <SX1276OnTimeoutIrq+0x140>
        break;
 801b582:	46c0      	nop			; (mov r8, r8)
    }
}
 801b584:	46c0      	nop			; (mov r8, r8)
 801b586:	46bd      	mov	sp, r7
 801b588:	b005      	add	sp, #20
 801b58a:	bd90      	pop	{r4, r7, pc}
 801b58c:	20001724 	.word	0x20001724
 801b590:	2000170c 	.word	0x2000170c
 801b594:	20000e7c 	.word	0x20000e7c
 801b598:	0801fbd0 	.word	0x0801fbd0

0801b59c <SX1276OnDio0Irq>:

static void SX1276OnDio0Irq( void )
{
 801b59c:	b590      	push	{r4, r7, lr}
 801b59e:	b083      	sub	sp, #12
 801b5a0:	af00      	add	r7, sp, #0
    volatile uint8_t irqFlags = 0;
 801b5a2:	1d7b      	adds	r3, r7, #5
 801b5a4:	2200      	movs	r2, #0
 801b5a6:	701a      	strb	r2, [r3, #0]

    switch( SX1276.Settings.State )
 801b5a8:	4bc3      	ldr	r3, [pc, #780]	; (801b8b8 <SX1276OnDio0Irq+0x31c>)
 801b5aa:	791b      	ldrb	r3, [r3, #4]
 801b5ac:	2b01      	cmp	r3, #1
 801b5ae:	d003      	beq.n	801b5b8 <SX1276OnDio0Irq+0x1c>
 801b5b0:	2b02      	cmp	r3, #2
 801b5b2:	d100      	bne.n	801b5b6 <SX1276OnDio0Irq+0x1a>
 801b5b4:	e1e2      	b.n	801b97c <SX1276OnDio0Irq+0x3e0>
                }
                break;
            }
            break;
        default:
            break;
 801b5b6:	e1ff      	b.n	801b9b8 <SX1276OnDio0Irq+0x41c>
            switch( SX1276.Settings.Modem )
 801b5b8:	4bbf      	ldr	r3, [pc, #764]	; (801b8b8 <SX1276OnDio0Irq+0x31c>)
 801b5ba:	795b      	ldrb	r3, [r3, #5]
 801b5bc:	2b00      	cmp	r3, #0
 801b5be:	d003      	beq.n	801b5c8 <SX1276OnDio0Irq+0x2c>
 801b5c0:	2b01      	cmp	r3, #1
 801b5c2:	d100      	bne.n	801b5c6 <SX1276OnDio0Irq+0x2a>
 801b5c4:	e0e2      	b.n	801b78c <SX1276OnDio0Irq+0x1f0>
                break;
 801b5c6:	e1d8      	b.n	801b97a <SX1276OnDio0Irq+0x3de>
                if( SX1276.Settings.Fsk.CrcOn == true )
 801b5c8:	4bbb      	ldr	r3, [pc, #748]	; (801b8b8 <SX1276OnDio0Irq+0x31c>)
 801b5ca:	2224      	movs	r2, #36	; 0x24
 801b5cc:	5c9b      	ldrb	r3, [r3, r2]
 801b5ce:	2b00      	cmp	r3, #0
 801b5d0:	d052      	beq.n	801b678 <SX1276OnDio0Irq+0xdc>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 801b5d2:	203f      	movs	r0, #63	; 0x3f
 801b5d4:	f7ff fd0b 	bl	801afee <SX1276Read>
 801b5d8:	0003      	movs	r3, r0
 801b5da:	001a      	movs	r2, r3
 801b5dc:	1d7b      	adds	r3, r7, #5
 801b5de:	701a      	strb	r2, [r3, #0]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 801b5e0:	1d7b      	adds	r3, r7, #5
 801b5e2:	781b      	ldrb	r3, [r3, #0]
 801b5e4:	b2db      	uxtb	r3, r3
 801b5e6:	001a      	movs	r2, r3
 801b5e8:	2302      	movs	r3, #2
 801b5ea:	4013      	ands	r3, r2
 801b5ec:	2b02      	cmp	r3, #2
 801b5ee:	d043      	beq.n	801b678 <SX1276OnDio0Irq+0xdc>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 801b5f0:	210b      	movs	r1, #11
 801b5f2:	203e      	movs	r0, #62	; 0x3e
 801b5f4:	f7ff fcea 	bl	801afcc <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 801b5f8:	2110      	movs	r1, #16
 801b5fa:	203f      	movs	r0, #63	; 0x3f
 801b5fc:	f7ff fce6 	bl	801afcc <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 801b600:	4bae      	ldr	r3, [pc, #696]	; (801b8bc <SX1276OnDio0Irq+0x320>)
 801b602:	0018      	movs	r0, r3
 801b604:	f001 fb56 	bl	801ccb4 <UTIL_TIMER_Stop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 801b608:	4bab      	ldr	r3, [pc, #684]	; (801b8b8 <SX1276OnDio0Irq+0x31c>)
 801b60a:	2226      	movs	r2, #38	; 0x26
 801b60c:	5c9b      	ldrb	r3, [r3, r2]
 801b60e:	2201      	movs	r2, #1
 801b610:	4053      	eors	r3, r2
 801b612:	b2db      	uxtb	r3, r3
 801b614:	2b00      	cmp	r3, #0
 801b616:	d007      	beq.n	801b628 <SX1276OnDio0Irq+0x8c>
                            TimerStop( &RxTimeoutSyncWord );
 801b618:	4ba9      	ldr	r3, [pc, #676]	; (801b8c0 <SX1276OnDio0Irq+0x324>)
 801b61a:	0018      	movs	r0, r3
 801b61c:	f001 fb4a 	bl	801ccb4 <UTIL_TIMER_Stop>
                            SX1276.Settings.State = RF_IDLE;
 801b620:	4ba5      	ldr	r3, [pc, #660]	; (801b8b8 <SX1276OnDio0Irq+0x31c>)
 801b622:	2200      	movs	r2, #0
 801b624:	711a      	strb	r2, [r3, #4]
 801b626:	e00b      	b.n	801b640 <SX1276OnDio0Irq+0xa4>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 801b628:	200d      	movs	r0, #13
 801b62a:	f7ff fce0 	bl	801afee <SX1276Read>
 801b62e:	0003      	movs	r3, r0
 801b630:	001a      	movs	r2, r3
 801b632:	2340      	movs	r3, #64	; 0x40
 801b634:	4313      	orrs	r3, r2
 801b636:	b2db      	uxtb	r3, r3
 801b638:	0019      	movs	r1, r3
 801b63a:	200d      	movs	r0, #13
 801b63c:	f7ff fcc6 	bl	801afcc <SX1276Write>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 801b640:	4ba0      	ldr	r3, [pc, #640]	; (801b8c4 <SX1276OnDio0Irq+0x328>)
 801b642:	681b      	ldr	r3, [r3, #0]
 801b644:	2b00      	cmp	r3, #0
 801b646:	d008      	beq.n	801b65a <SX1276OnDio0Irq+0xbe>
 801b648:	4b9e      	ldr	r3, [pc, #632]	; (801b8c4 <SX1276OnDio0Irq+0x328>)
 801b64a:	681b      	ldr	r3, [r3, #0]
 801b64c:	691b      	ldr	r3, [r3, #16]
 801b64e:	2b00      	cmp	r3, #0
 801b650:	d003      	beq.n	801b65a <SX1276OnDio0Irq+0xbe>
                            RadioEvents->RxError( );
 801b652:	4b9c      	ldr	r3, [pc, #624]	; (801b8c4 <SX1276OnDio0Irq+0x328>)
 801b654:	681b      	ldr	r3, [r3, #0]
 801b656:	691b      	ldr	r3, [r3, #16]
 801b658:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 801b65a:	4b97      	ldr	r3, [pc, #604]	; (801b8b8 <SX1276OnDio0Irq+0x31c>)
 801b65c:	2230      	movs	r2, #48	; 0x30
 801b65e:	2100      	movs	r1, #0
 801b660:	5499      	strb	r1, [r3, r2]
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 801b662:	4b95      	ldr	r3, [pc, #596]	; (801b8b8 <SX1276OnDio0Irq+0x31c>)
 801b664:	2231      	movs	r2, #49	; 0x31
 801b666:	2100      	movs	r1, #0
 801b668:	5499      	strb	r1, [r3, r2]
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801b66a:	4b93      	ldr	r3, [pc, #588]	; (801b8b8 <SX1276OnDio0Irq+0x31c>)
 801b66c:	2200      	movs	r2, #0
 801b66e:	879a      	strh	r2, [r3, #60]	; 0x3c
                        SX1276.Settings.FskPacketHandler.Size = 0;
 801b670:	4b91      	ldr	r3, [pc, #580]	; (801b8b8 <SX1276OnDio0Irq+0x31c>)
 801b672:	2200      	movs	r2, #0
 801b674:	875a      	strh	r2, [r3, #58]	; 0x3a
                        break;
 801b676:	e180      	b.n	801b97a <SX1276OnDio0Irq+0x3de>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 801b678:	4b8f      	ldr	r3, [pc, #572]	; (801b8b8 <SX1276OnDio0Irq+0x31c>)
 801b67a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801b67c:	2b00      	cmp	r3, #0
 801b67e:	d12d      	bne.n	801b6dc <SX1276OnDio0Irq+0x140>
 801b680:	4b8d      	ldr	r3, [pc, #564]	; (801b8b8 <SX1276OnDio0Irq+0x31c>)
 801b682:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b684:	2b00      	cmp	r3, #0
 801b686:	d129      	bne.n	801b6dc <SX1276OnDio0Irq+0x140>
                    if( SX1276.Settings.Fsk.FixLen == false )
 801b688:	4b8b      	ldr	r3, [pc, #556]	; (801b8b8 <SX1276OnDio0Irq+0x31c>)
 801b68a:	2222      	movs	r2, #34	; 0x22
 801b68c:	5c9b      	ldrb	r3, [r3, r2]
 801b68e:	2201      	movs	r2, #1
 801b690:	4053      	eors	r3, r2
 801b692:	b2db      	uxtb	r3, r3
 801b694:	2b00      	cmp	r3, #0
 801b696:	d005      	beq.n	801b6a4 <SX1276OnDio0Irq+0x108>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 801b698:	4b8b      	ldr	r3, [pc, #556]	; (801b8c8 <SX1276OnDio0Irq+0x32c>)
 801b69a:	2101      	movs	r1, #1
 801b69c:	0018      	movs	r0, r3
 801b69e:	f7ff fd33 	bl	801b108 <SX1276ReadFifo>
 801b6a2:	e006      	b.n	801b6b2 <SX1276OnDio0Irq+0x116>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 801b6a4:	2032      	movs	r0, #50	; 0x32
 801b6a6:	f7ff fca2 	bl	801afee <SX1276Read>
 801b6aa:	0003      	movs	r3, r0
 801b6ac:	b29a      	uxth	r2, r3
 801b6ae:	4b82      	ldr	r3, [pc, #520]	; (801b8b8 <SX1276OnDio0Irq+0x31c>)
 801b6b0:	875a      	strh	r2, [r3, #58]	; 0x3a
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801b6b2:	4b81      	ldr	r3, [pc, #516]	; (801b8b8 <SX1276OnDio0Irq+0x31c>)
 801b6b4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b6b6:	001a      	movs	r2, r3
 801b6b8:	4b84      	ldr	r3, [pc, #528]	; (801b8cc <SX1276OnDio0Irq+0x330>)
 801b6ba:	18d0      	adds	r0, r2, r3
 801b6bc:	4b7e      	ldr	r3, [pc, #504]	; (801b8b8 <SX1276OnDio0Irq+0x31c>)
 801b6be:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801b6c0:	b2da      	uxtb	r2, r3
 801b6c2:	4b7d      	ldr	r3, [pc, #500]	; (801b8b8 <SX1276OnDio0Irq+0x31c>)
 801b6c4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b6c6:	b2db      	uxtb	r3, r3
 801b6c8:	1ad3      	subs	r3, r2, r3
 801b6ca:	b2db      	uxtb	r3, r3
 801b6cc:	0019      	movs	r1, r3
 801b6ce:	f7ff fd1b 	bl	801b108 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801b6d2:	4b79      	ldr	r3, [pc, #484]	; (801b8b8 <SX1276OnDio0Irq+0x31c>)
 801b6d4:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801b6d6:	4b78      	ldr	r3, [pc, #480]	; (801b8b8 <SX1276OnDio0Irq+0x31c>)
 801b6d8:	879a      	strh	r2, [r3, #60]	; 0x3c
 801b6da:	e013      	b.n	801b704 <SX1276OnDio0Irq+0x168>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801b6dc:	4b76      	ldr	r3, [pc, #472]	; (801b8b8 <SX1276OnDio0Irq+0x31c>)
 801b6de:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b6e0:	001a      	movs	r2, r3
 801b6e2:	4b7a      	ldr	r3, [pc, #488]	; (801b8cc <SX1276OnDio0Irq+0x330>)
 801b6e4:	18d0      	adds	r0, r2, r3
 801b6e6:	4b74      	ldr	r3, [pc, #464]	; (801b8b8 <SX1276OnDio0Irq+0x31c>)
 801b6e8:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801b6ea:	b2da      	uxtb	r2, r3
 801b6ec:	4b72      	ldr	r3, [pc, #456]	; (801b8b8 <SX1276OnDio0Irq+0x31c>)
 801b6ee:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b6f0:	b2db      	uxtb	r3, r3
 801b6f2:	1ad3      	subs	r3, r2, r3
 801b6f4:	b2db      	uxtb	r3, r3
 801b6f6:	0019      	movs	r1, r3
 801b6f8:	f7ff fd06 	bl	801b108 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801b6fc:	4b6e      	ldr	r3, [pc, #440]	; (801b8b8 <SX1276OnDio0Irq+0x31c>)
 801b6fe:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801b700:	4b6d      	ldr	r3, [pc, #436]	; (801b8b8 <SX1276OnDio0Irq+0x31c>)
 801b702:	879a      	strh	r2, [r3, #60]	; 0x3c
                TimerStop( &RxTimeoutTimer );
 801b704:	4b6d      	ldr	r3, [pc, #436]	; (801b8bc <SX1276OnDio0Irq+0x320>)
 801b706:	0018      	movs	r0, r3
 801b708:	f001 fad4 	bl	801ccb4 <UTIL_TIMER_Stop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 801b70c:	4b6a      	ldr	r3, [pc, #424]	; (801b8b8 <SX1276OnDio0Irq+0x31c>)
 801b70e:	2226      	movs	r2, #38	; 0x26
 801b710:	5c9b      	ldrb	r3, [r3, r2]
 801b712:	2201      	movs	r2, #1
 801b714:	4053      	eors	r3, r2
 801b716:	b2db      	uxtb	r3, r3
 801b718:	2b00      	cmp	r3, #0
 801b71a:	d007      	beq.n	801b72c <SX1276OnDio0Irq+0x190>
                    SX1276.Settings.State = RF_IDLE;
 801b71c:	4b66      	ldr	r3, [pc, #408]	; (801b8b8 <SX1276OnDio0Irq+0x31c>)
 801b71e:	2200      	movs	r2, #0
 801b720:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutSyncWord );
 801b722:	4b67      	ldr	r3, [pc, #412]	; (801b8c0 <SX1276OnDio0Irq+0x324>)
 801b724:	0018      	movs	r0, r3
 801b726:	f001 fac5 	bl	801ccb4 <UTIL_TIMER_Stop>
 801b72a:	e00b      	b.n	801b744 <SX1276OnDio0Irq+0x1a8>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 801b72c:	200d      	movs	r0, #13
 801b72e:	f7ff fc5e 	bl	801afee <SX1276Read>
 801b732:	0003      	movs	r3, r0
 801b734:	001a      	movs	r2, r3
 801b736:	2340      	movs	r3, #64	; 0x40
 801b738:	4313      	orrs	r3, r2
 801b73a:	b2db      	uxtb	r3, r3
 801b73c:	0019      	movs	r1, r3
 801b73e:	200d      	movs	r0, #13
 801b740:	f7ff fc44 	bl	801afcc <SX1276Write>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801b744:	4b5f      	ldr	r3, [pc, #380]	; (801b8c4 <SX1276OnDio0Irq+0x328>)
 801b746:	681b      	ldr	r3, [r3, #0]
 801b748:	2b00      	cmp	r3, #0
 801b74a:	d010      	beq.n	801b76e <SX1276OnDio0Irq+0x1d2>
 801b74c:	4b5d      	ldr	r3, [pc, #372]	; (801b8c4 <SX1276OnDio0Irq+0x328>)
 801b74e:	681b      	ldr	r3, [r3, #0]
 801b750:	689b      	ldr	r3, [r3, #8]
 801b752:	2b00      	cmp	r3, #0
 801b754:	d00b      	beq.n	801b76e <SX1276OnDio0Irq+0x1d2>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 801b756:	4b5b      	ldr	r3, [pc, #364]	; (801b8c4 <SX1276OnDio0Irq+0x328>)
 801b758:	681b      	ldr	r3, [r3, #0]
 801b75a:	689c      	ldr	r4, [r3, #8]
 801b75c:	4b56      	ldr	r3, [pc, #344]	; (801b8b8 <SX1276OnDio0Irq+0x31c>)
 801b75e:	8f59      	ldrh	r1, [r3, #58]	; 0x3a
 801b760:	4b55      	ldr	r3, [pc, #340]	; (801b8b8 <SX1276OnDio0Irq+0x31c>)
 801b762:	2232      	movs	r2, #50	; 0x32
 801b764:	569b      	ldrsb	r3, [r3, r2]
 801b766:	b21a      	sxth	r2, r3
 801b768:	4858      	ldr	r0, [pc, #352]	; (801b8cc <SX1276OnDio0Irq+0x330>)
 801b76a:	2300      	movs	r3, #0
 801b76c:	47a0      	blx	r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 801b76e:	4b52      	ldr	r3, [pc, #328]	; (801b8b8 <SX1276OnDio0Irq+0x31c>)
 801b770:	2230      	movs	r2, #48	; 0x30
 801b772:	2100      	movs	r1, #0
 801b774:	5499      	strb	r1, [r3, r2]
                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 801b776:	4b50      	ldr	r3, [pc, #320]	; (801b8b8 <SX1276OnDio0Irq+0x31c>)
 801b778:	2231      	movs	r2, #49	; 0x31
 801b77a:	2100      	movs	r1, #0
 801b77c:	5499      	strb	r1, [r3, r2]
                SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801b77e:	4b4e      	ldr	r3, [pc, #312]	; (801b8b8 <SX1276OnDio0Irq+0x31c>)
 801b780:	2200      	movs	r2, #0
 801b782:	879a      	strh	r2, [r3, #60]	; 0x3c
                SX1276.Settings.FskPacketHandler.Size = 0;
 801b784:	4b4c      	ldr	r3, [pc, #304]	; (801b8b8 <SX1276OnDio0Irq+0x31c>)
 801b786:	2200      	movs	r2, #0
 801b788:	875a      	strh	r2, [r3, #58]	; 0x3a
                break;
 801b78a:	e0f6      	b.n	801b97a <SX1276OnDio0Irq+0x3de>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 801b78c:	2140      	movs	r1, #64	; 0x40
 801b78e:	2012      	movs	r0, #18
 801b790:	f7ff fc1c 	bl	801afcc <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 801b794:	2012      	movs	r0, #18
 801b796:	f7ff fc2a 	bl	801afee <SX1276Read>
 801b79a:	0003      	movs	r3, r0
 801b79c:	001a      	movs	r2, r3
 801b79e:	1d7b      	adds	r3, r7, #5
 801b7a0:	701a      	strb	r2, [r3, #0]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 801b7a2:	1d7b      	adds	r3, r7, #5
 801b7a4:	781b      	ldrb	r3, [r3, #0]
 801b7a6:	b2db      	uxtb	r3, r3
 801b7a8:	001a      	movs	r2, r3
 801b7aa:	2320      	movs	r3, #32
 801b7ac:	4013      	ands	r3, r2
 801b7ae:	2b20      	cmp	r3, #32
 801b7b0:	d122      	bne.n	801b7f8 <SX1276OnDio0Irq+0x25c>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 801b7b2:	2120      	movs	r1, #32
 801b7b4:	2012      	movs	r0, #18
 801b7b6:	f7ff fc09 	bl	801afcc <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 801b7ba:	4b3f      	ldr	r3, [pc, #252]	; (801b8b8 <SX1276OnDio0Irq+0x31c>)
 801b7bc:	2256      	movs	r2, #86	; 0x56
 801b7be:	5c9b      	ldrb	r3, [r3, r2]
 801b7c0:	2201      	movs	r2, #1
 801b7c2:	4053      	eors	r3, r2
 801b7c4:	b2db      	uxtb	r3, r3
 801b7c6:	2b00      	cmp	r3, #0
 801b7c8:	d002      	beq.n	801b7d0 <SX1276OnDio0Irq+0x234>
                            SX1276.Settings.State = RF_IDLE;
 801b7ca:	4b3b      	ldr	r3, [pc, #236]	; (801b8b8 <SX1276OnDio0Irq+0x31c>)
 801b7cc:	2200      	movs	r2, #0
 801b7ce:	711a      	strb	r2, [r3, #4]
                        TimerStop( &RxTimeoutTimer );
 801b7d0:	4b3a      	ldr	r3, [pc, #232]	; (801b8bc <SX1276OnDio0Irq+0x320>)
 801b7d2:	0018      	movs	r0, r3
 801b7d4:	f001 fa6e 	bl	801ccb4 <UTIL_TIMER_Stop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 801b7d8:	4b3a      	ldr	r3, [pc, #232]	; (801b8c4 <SX1276OnDio0Irq+0x328>)
 801b7da:	681b      	ldr	r3, [r3, #0]
 801b7dc:	2b00      	cmp	r3, #0
 801b7de:	d100      	bne.n	801b7e2 <SX1276OnDio0Irq+0x246>
 801b7e0:	e0c8      	b.n	801b974 <SX1276OnDio0Irq+0x3d8>
 801b7e2:	4b38      	ldr	r3, [pc, #224]	; (801b8c4 <SX1276OnDio0Irq+0x328>)
 801b7e4:	681b      	ldr	r3, [r3, #0]
 801b7e6:	691b      	ldr	r3, [r3, #16]
 801b7e8:	2b00      	cmp	r3, #0
 801b7ea:	d100      	bne.n	801b7ee <SX1276OnDio0Irq+0x252>
 801b7ec:	e0c2      	b.n	801b974 <SX1276OnDio0Irq+0x3d8>
                            RadioEvents->RxError( );
 801b7ee:	4b35      	ldr	r3, [pc, #212]	; (801b8c4 <SX1276OnDio0Irq+0x328>)
 801b7f0:	681b      	ldr	r3, [r3, #0]
 801b7f2:	691b      	ldr	r3, [r3, #16]
 801b7f4:	4798      	blx	r3
                        break;
 801b7f6:	e0bd      	b.n	801b974 <SX1276OnDio0Irq+0x3d8>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 801b7f8:	2019      	movs	r0, #25
 801b7fa:	f7ff fbf8 	bl	801afee <SX1276Read>
 801b7fe:	0003      	movs	r3, r0
 801b800:	b25b      	sxtb	r3, r3
 801b802:	3302      	adds	r3, #2
 801b804:	109b      	asrs	r3, r3, #2
 801b806:	b259      	sxtb	r1, r3
 801b808:	4b2b      	ldr	r3, [pc, #172]	; (801b8b8 <SX1276OnDio0Irq+0x31c>)
 801b80a:	2260      	movs	r2, #96	; 0x60
 801b80c:	5499      	strb	r1, [r3, r2]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 801b80e:	201a      	movs	r0, #26
 801b810:	f7ff fbed 	bl	801afee <SX1276Read>
 801b814:	0003      	movs	r3, r0
 801b816:	001a      	movs	r2, r3
 801b818:	1dbb      	adds	r3, r7, #6
 801b81a:	801a      	strh	r2, [r3, #0]
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 801b81c:	4b26      	ldr	r3, [pc, #152]	; (801b8b8 <SX1276OnDio0Irq+0x31c>)
 801b81e:	2260      	movs	r2, #96	; 0x60
 801b820:	569b      	ldrsb	r3, [r3, r2]
 801b822:	2b00      	cmp	r3, #0
 801b824:	da32      	bge.n	801b88c <SX1276OnDio0Irq+0x2f0>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 801b826:	4b24      	ldr	r3, [pc, #144]	; (801b8b8 <SX1276OnDio0Irq+0x31c>)
 801b828:	689b      	ldr	r3, [r3, #8]
 801b82a:	4a29      	ldr	r2, [pc, #164]	; (801b8d0 <SX1276OnDio0Irq+0x334>)
 801b82c:	4293      	cmp	r3, r2
 801b82e:	d916      	bls.n	801b85e <SX1276OnDio0Irq+0x2c2>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 801b830:	1dbb      	adds	r3, r7, #6
 801b832:	2200      	movs	r2, #0
 801b834:	5e9b      	ldrsh	r3, [r3, r2]
 801b836:	111b      	asrs	r3, r3, #4
 801b838:	b21b      	sxth	r3, r3
 801b83a:	b29a      	uxth	r2, r3
 801b83c:	1dbb      	adds	r3, r7, #6
 801b83e:	881b      	ldrh	r3, [r3, #0]
 801b840:	18d3      	adds	r3, r2, r3
 801b842:	b29a      	uxth	r2, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 801b844:	4b1c      	ldr	r3, [pc, #112]	; (801b8b8 <SX1276OnDio0Irq+0x31c>)
 801b846:	2160      	movs	r1, #96	; 0x60
 801b848:	565b      	ldrsb	r3, [r3, r1]
 801b84a:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 801b84c:	18d3      	adds	r3, r2, r3
 801b84e:	b29b      	uxth	r3, r3
 801b850:	3b9d      	subs	r3, #157	; 0x9d
 801b852:	b29b      	uxth	r3, r3
 801b854:	b219      	sxth	r1, r3
 801b856:	4b18      	ldr	r3, [pc, #96]	; (801b8b8 <SX1276OnDio0Irq+0x31c>)
 801b858:	2262      	movs	r2, #98	; 0x62
 801b85a:	5299      	strh	r1, [r3, r2]
 801b85c:	e04a      	b.n	801b8f4 <SX1276OnDio0Irq+0x358>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 801b85e:	1dbb      	adds	r3, r7, #6
 801b860:	2200      	movs	r2, #0
 801b862:	5e9b      	ldrsh	r3, [r3, r2]
 801b864:	111b      	asrs	r3, r3, #4
 801b866:	b21b      	sxth	r3, r3
 801b868:	b29a      	uxth	r2, r3
 801b86a:	1dbb      	adds	r3, r7, #6
 801b86c:	881b      	ldrh	r3, [r3, #0]
 801b86e:	18d3      	adds	r3, r2, r3
 801b870:	b29a      	uxth	r2, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 801b872:	4b11      	ldr	r3, [pc, #68]	; (801b8b8 <SX1276OnDio0Irq+0x31c>)
 801b874:	2160      	movs	r1, #96	; 0x60
 801b876:	565b      	ldrsb	r3, [r3, r1]
 801b878:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 801b87a:	18d3      	adds	r3, r2, r3
 801b87c:	b29b      	uxth	r3, r3
 801b87e:	3ba4      	subs	r3, #164	; 0xa4
 801b880:	b29b      	uxth	r3, r3
 801b882:	b219      	sxth	r1, r3
 801b884:	4b0c      	ldr	r3, [pc, #48]	; (801b8b8 <SX1276OnDio0Irq+0x31c>)
 801b886:	2262      	movs	r2, #98	; 0x62
 801b888:	5299      	strh	r1, [r3, r2]
 801b88a:	e033      	b.n	801b8f4 <SX1276OnDio0Irq+0x358>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 801b88c:	4b0a      	ldr	r3, [pc, #40]	; (801b8b8 <SX1276OnDio0Irq+0x31c>)
 801b88e:	689b      	ldr	r3, [r3, #8]
 801b890:	4a0f      	ldr	r2, [pc, #60]	; (801b8d0 <SX1276OnDio0Irq+0x334>)
 801b892:	4293      	cmp	r3, r2
 801b894:	d91e      	bls.n	801b8d4 <SX1276OnDio0Irq+0x338>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 801b896:	1dbb      	adds	r3, r7, #6
 801b898:	2200      	movs	r2, #0
 801b89a:	5e9b      	ldrsh	r3, [r3, r2]
 801b89c:	111b      	asrs	r3, r3, #4
 801b89e:	b21b      	sxth	r3, r3
 801b8a0:	b29a      	uxth	r2, r3
 801b8a2:	1dbb      	adds	r3, r7, #6
 801b8a4:	881b      	ldrh	r3, [r3, #0]
 801b8a6:	18d3      	adds	r3, r2, r3
 801b8a8:	b29b      	uxth	r3, r3
 801b8aa:	3b9d      	subs	r3, #157	; 0x9d
 801b8ac:	b29b      	uxth	r3, r3
 801b8ae:	b219      	sxth	r1, r3
 801b8b0:	4b01      	ldr	r3, [pc, #4]	; (801b8b8 <SX1276OnDio0Irq+0x31c>)
 801b8b2:	2262      	movs	r2, #98	; 0x62
 801b8b4:	5299      	strh	r1, [r3, r2]
 801b8b6:	e01d      	b.n	801b8f4 <SX1276OnDio0Irq+0x358>
 801b8b8:	20001724 	.word	0x20001724
 801b8bc:	2000178c 	.word	0x2000178c
 801b8c0:	2000170c 	.word	0x2000170c
 801b8c4:	20000e7c 	.word	0x20000e7c
 801b8c8:	2000175e 	.word	0x2000175e
 801b8cc:	20000e80 	.word	0x20000e80
 801b8d0:	1f4add40 	.word	0x1f4add40
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 801b8d4:	1dbb      	adds	r3, r7, #6
 801b8d6:	2200      	movs	r2, #0
 801b8d8:	5e9b      	ldrsh	r3, [r3, r2]
 801b8da:	111b      	asrs	r3, r3, #4
 801b8dc:	b21b      	sxth	r3, r3
 801b8de:	b29a      	uxth	r2, r3
 801b8e0:	1dbb      	adds	r3, r7, #6
 801b8e2:	881b      	ldrh	r3, [r3, #0]
 801b8e4:	18d3      	adds	r3, r2, r3
 801b8e6:	b29b      	uxth	r3, r3
 801b8e8:	3ba4      	subs	r3, #164	; 0xa4
 801b8ea:	b29b      	uxth	r3, r3
 801b8ec:	b219      	sxth	r1, r3
 801b8ee:	4b34      	ldr	r3, [pc, #208]	; (801b9c0 <SX1276OnDio0Irq+0x424>)
 801b8f0:	2262      	movs	r2, #98	; 0x62
 801b8f2:	5299      	strh	r1, [r3, r2]
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 801b8f4:	2013      	movs	r0, #19
 801b8f6:	f7ff fb7a 	bl	801afee <SX1276Read>
 801b8fa:	0003      	movs	r3, r0
 801b8fc:	0019      	movs	r1, r3
 801b8fe:	4b30      	ldr	r3, [pc, #192]	; (801b9c0 <SX1276OnDio0Irq+0x424>)
 801b900:	2264      	movs	r2, #100	; 0x64
 801b902:	5499      	strb	r1, [r3, r2]
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 801b904:	2010      	movs	r0, #16
 801b906:	f7ff fb72 	bl	801afee <SX1276Read>
 801b90a:	0003      	movs	r3, r0
 801b90c:	0019      	movs	r1, r3
 801b90e:	200d      	movs	r0, #13
 801b910:	f7ff fb5c 	bl	801afcc <SX1276Write>
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 801b914:	4b2a      	ldr	r3, [pc, #168]	; (801b9c0 <SX1276OnDio0Irq+0x424>)
 801b916:	2264      	movs	r2, #100	; 0x64
 801b918:	5c9a      	ldrb	r2, [r3, r2]
 801b91a:	4b2a      	ldr	r3, [pc, #168]	; (801b9c4 <SX1276OnDio0Irq+0x428>)
 801b91c:	0011      	movs	r1, r2
 801b91e:	0018      	movs	r0, r3
 801b920:	f7ff fbf2 	bl	801b108 <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 801b924:	4b26      	ldr	r3, [pc, #152]	; (801b9c0 <SX1276OnDio0Irq+0x424>)
 801b926:	2256      	movs	r2, #86	; 0x56
 801b928:	5c9b      	ldrb	r3, [r3, r2]
 801b92a:	2201      	movs	r2, #1
 801b92c:	4053      	eors	r3, r2
 801b92e:	b2db      	uxtb	r3, r3
 801b930:	2b00      	cmp	r3, #0
 801b932:	d002      	beq.n	801b93a <SX1276OnDio0Irq+0x39e>
                        SX1276.Settings.State = RF_IDLE;
 801b934:	4b22      	ldr	r3, [pc, #136]	; (801b9c0 <SX1276OnDio0Irq+0x424>)
 801b936:	2200      	movs	r2, #0
 801b938:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutTimer );
 801b93a:	4b23      	ldr	r3, [pc, #140]	; (801b9c8 <SX1276OnDio0Irq+0x42c>)
 801b93c:	0018      	movs	r0, r3
 801b93e:	f001 f9b9 	bl	801ccb4 <UTIL_TIMER_Stop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801b942:	4b22      	ldr	r3, [pc, #136]	; (801b9cc <SX1276OnDio0Irq+0x430>)
 801b944:	681b      	ldr	r3, [r3, #0]
 801b946:	2b00      	cmp	r3, #0
 801b948:	d016      	beq.n	801b978 <SX1276OnDio0Irq+0x3dc>
 801b94a:	4b20      	ldr	r3, [pc, #128]	; (801b9cc <SX1276OnDio0Irq+0x430>)
 801b94c:	681b      	ldr	r3, [r3, #0]
 801b94e:	689b      	ldr	r3, [r3, #8]
 801b950:	2b00      	cmp	r3, #0
 801b952:	d011      	beq.n	801b978 <SX1276OnDio0Irq+0x3dc>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 801b954:	4b1d      	ldr	r3, [pc, #116]	; (801b9cc <SX1276OnDio0Irq+0x430>)
 801b956:	681b      	ldr	r3, [r3, #0]
 801b958:	689c      	ldr	r4, [r3, #8]
 801b95a:	4b19      	ldr	r3, [pc, #100]	; (801b9c0 <SX1276OnDio0Irq+0x424>)
 801b95c:	2264      	movs	r2, #100	; 0x64
 801b95e:	5c9b      	ldrb	r3, [r3, r2]
 801b960:	b299      	uxth	r1, r3
 801b962:	4b17      	ldr	r3, [pc, #92]	; (801b9c0 <SX1276OnDio0Irq+0x424>)
 801b964:	2262      	movs	r2, #98	; 0x62
 801b966:	5e9a      	ldrsh	r2, [r3, r2]
 801b968:	4b15      	ldr	r3, [pc, #84]	; (801b9c0 <SX1276OnDio0Irq+0x424>)
 801b96a:	2060      	movs	r0, #96	; 0x60
 801b96c:	561b      	ldrsb	r3, [r3, r0]
 801b96e:	4815      	ldr	r0, [pc, #84]	; (801b9c4 <SX1276OnDio0Irq+0x428>)
 801b970:	47a0      	blx	r4
                break;
 801b972:	e001      	b.n	801b978 <SX1276OnDio0Irq+0x3dc>
                        break;
 801b974:	46c0      	nop			; (mov r8, r8)
 801b976:	e01f      	b.n	801b9b8 <SX1276OnDio0Irq+0x41c>
                break;
 801b978:	46c0      	nop			; (mov r8, r8)
            break;
 801b97a:	e01d      	b.n	801b9b8 <SX1276OnDio0Irq+0x41c>
            TimerStop( &TxTimeoutTimer );
 801b97c:	4b14      	ldr	r3, [pc, #80]	; (801b9d0 <SX1276OnDio0Irq+0x434>)
 801b97e:	0018      	movs	r0, r3
 801b980:	f001 f998 	bl	801ccb4 <UTIL_TIMER_Stop>
            switch( SX1276.Settings.Modem )
 801b984:	4b0e      	ldr	r3, [pc, #56]	; (801b9c0 <SX1276OnDio0Irq+0x424>)
 801b986:	795b      	ldrb	r3, [r3, #5]
 801b988:	2b01      	cmp	r3, #1
 801b98a:	d103      	bne.n	801b994 <SX1276OnDio0Irq+0x3f8>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 801b98c:	2108      	movs	r1, #8
 801b98e:	2012      	movs	r0, #18
 801b990:	f7ff fb1c 	bl	801afcc <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 801b994:	4b0a      	ldr	r3, [pc, #40]	; (801b9c0 <SX1276OnDio0Irq+0x424>)
 801b996:	2200      	movs	r2, #0
 801b998:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 801b99a:	4b0c      	ldr	r3, [pc, #48]	; (801b9cc <SX1276OnDio0Irq+0x430>)
 801b99c:	681b      	ldr	r3, [r3, #0]
 801b99e:	2b00      	cmp	r3, #0
 801b9a0:	d008      	beq.n	801b9b4 <SX1276OnDio0Irq+0x418>
 801b9a2:	4b0a      	ldr	r3, [pc, #40]	; (801b9cc <SX1276OnDio0Irq+0x430>)
 801b9a4:	681b      	ldr	r3, [r3, #0]
 801b9a6:	681b      	ldr	r3, [r3, #0]
 801b9a8:	2b00      	cmp	r3, #0
 801b9aa:	d003      	beq.n	801b9b4 <SX1276OnDio0Irq+0x418>
                    RadioEvents->TxDone( );
 801b9ac:	4b07      	ldr	r3, [pc, #28]	; (801b9cc <SX1276OnDio0Irq+0x430>)
 801b9ae:	681b      	ldr	r3, [r3, #0]
 801b9b0:	681b      	ldr	r3, [r3, #0]
 801b9b2:	4798      	blx	r3
                break;
 801b9b4:	46c0      	nop			; (mov r8, r8)
            break;
 801b9b6:	46c0      	nop			; (mov r8, r8)
    }
}
 801b9b8:	46c0      	nop			; (mov r8, r8)
 801b9ba:	46bd      	mov	sp, r7
 801b9bc:	b003      	add	sp, #12
 801b9be:	bd90      	pop	{r4, r7, pc}
 801b9c0:	20001724 	.word	0x20001724
 801b9c4:	20000e80 	.word	0x20000e80
 801b9c8:	2000178c 	.word	0x2000178c
 801b9cc:	20000e7c 	.word	0x20000e7c
 801b9d0:	200016f4 	.word	0x200016f4

0801b9d4 <SX1276OnDio1Irq>:

static void SX1276OnDio1Irq( void )
{
 801b9d4:	b580      	push	{r7, lr}
 801b9d6:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.State )
 801b9d8:	4b6c      	ldr	r3, [pc, #432]	; (801bb8c <SX1276OnDio1Irq+0x1b8>)
 801b9da:	791b      	ldrb	r3, [r3, #4]
 801b9dc:	2b01      	cmp	r3, #1
 801b9de:	d003      	beq.n	801b9e8 <SX1276OnDio1Irq+0x14>
 801b9e0:	2b02      	cmp	r3, #2
 801b9e2:	d100      	bne.n	801b9e6 <SX1276OnDio1Irq+0x12>
 801b9e4:	e08b      	b.n	801bafe <SX1276OnDio1Irq+0x12a>
            default:
                break;
            }
            break;
        default:
            break;
 801b9e6:	e0ce      	b.n	801bb86 <SX1276OnDio1Irq+0x1b2>
            switch( SX1276.Settings.Modem )
 801b9e8:	4b68      	ldr	r3, [pc, #416]	; (801bb8c <SX1276OnDio1Irq+0x1b8>)
 801b9ea:	795b      	ldrb	r3, [r3, #5]
 801b9ec:	2b00      	cmp	r3, #0
 801b9ee:	d002      	beq.n	801b9f6 <SX1276OnDio1Irq+0x22>
 801b9f0:	2b01      	cmp	r3, #1
 801b9f2:	d061      	beq.n	801bab8 <SX1276OnDio1Irq+0xe4>
                break;
 801b9f4:	e082      	b.n	801bafc <SX1276OnDio1Irq+0x128>
                if( Sx_Board_GetDio1PinState( ) == 0 )
 801b9f6:	f7ea fc9b 	bl	8006330 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 801b9fa:	1e03      	subs	r3, r0, #0
 801b9fc:	d100      	bne.n	801ba00 <SX1276OnDio1Irq+0x2c>
 801b9fe:	e078      	b.n	801baf2 <SX1276OnDio1Irq+0x11e>
                TimerStop( &RxTimeoutSyncWord );
 801ba00:	4b63      	ldr	r3, [pc, #396]	; (801bb90 <SX1276OnDio1Irq+0x1bc>)
 801ba02:	0018      	movs	r0, r3
 801ba04:	f001 f956 	bl	801ccb4 <UTIL_TIMER_Stop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 801ba08:	4b60      	ldr	r3, [pc, #384]	; (801bb8c <SX1276OnDio1Irq+0x1b8>)
 801ba0a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801ba0c:	2b00      	cmp	r3, #0
 801ba0e:	d118      	bne.n	801ba42 <SX1276OnDio1Irq+0x6e>
 801ba10:	4b5e      	ldr	r3, [pc, #376]	; (801bb8c <SX1276OnDio1Irq+0x1b8>)
 801ba12:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801ba14:	2b00      	cmp	r3, #0
 801ba16:	d114      	bne.n	801ba42 <SX1276OnDio1Irq+0x6e>
                    if( SX1276.Settings.Fsk.FixLen == false )
 801ba18:	4b5c      	ldr	r3, [pc, #368]	; (801bb8c <SX1276OnDio1Irq+0x1b8>)
 801ba1a:	2222      	movs	r2, #34	; 0x22
 801ba1c:	5c9b      	ldrb	r3, [r3, r2]
 801ba1e:	2201      	movs	r2, #1
 801ba20:	4053      	eors	r3, r2
 801ba22:	b2db      	uxtb	r3, r3
 801ba24:	2b00      	cmp	r3, #0
 801ba26:	d005      	beq.n	801ba34 <SX1276OnDio1Irq+0x60>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 801ba28:	4b5a      	ldr	r3, [pc, #360]	; (801bb94 <SX1276OnDio1Irq+0x1c0>)
 801ba2a:	2101      	movs	r1, #1
 801ba2c:	0018      	movs	r0, r3
 801ba2e:	f7ff fb6b 	bl	801b108 <SX1276ReadFifo>
 801ba32:	e006      	b.n	801ba42 <SX1276OnDio1Irq+0x6e>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 801ba34:	2032      	movs	r0, #50	; 0x32
 801ba36:	f7ff fada 	bl	801afee <SX1276Read>
 801ba3a:	0003      	movs	r3, r0
 801ba3c:	b29a      	uxth	r2, r3
 801ba3e:	4b53      	ldr	r3, [pc, #332]	; (801bb8c <SX1276OnDio1Irq+0x1b8>)
 801ba40:	875a      	strh	r2, [r3, #58]	; 0x3a
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 801ba42:	4b52      	ldr	r3, [pc, #328]	; (801bb8c <SX1276OnDio1Irq+0x1b8>)
 801ba44:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801ba46:	001a      	movs	r2, r3
 801ba48:	4b50      	ldr	r3, [pc, #320]	; (801bb8c <SX1276OnDio1Irq+0x1b8>)
 801ba4a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801ba4c:	1ad3      	subs	r3, r2, r3
 801ba4e:	4a4f      	ldr	r2, [pc, #316]	; (801bb8c <SX1276OnDio1Irq+0x1b8>)
 801ba50:	213e      	movs	r1, #62	; 0x3e
 801ba52:	5c52      	ldrb	r2, [r2, r1]
 801ba54:	4293      	cmp	r3, r2
 801ba56:	db1a      	blt.n	801ba8e <SX1276OnDio1Irq+0xba>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 801ba58:	4b4c      	ldr	r3, [pc, #304]	; (801bb8c <SX1276OnDio1Irq+0x1b8>)
 801ba5a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801ba5c:	001a      	movs	r2, r3
 801ba5e:	4b4e      	ldr	r3, [pc, #312]	; (801bb98 <SX1276OnDio1Irq+0x1c4>)
 801ba60:	18d2      	adds	r2, r2, r3
 801ba62:	4b4a      	ldr	r3, [pc, #296]	; (801bb8c <SX1276OnDio1Irq+0x1b8>)
 801ba64:	213e      	movs	r1, #62	; 0x3e
 801ba66:	5c5b      	ldrb	r3, [r3, r1]
 801ba68:	3b01      	subs	r3, #1
 801ba6a:	b2db      	uxtb	r3, r3
 801ba6c:	0019      	movs	r1, r3
 801ba6e:	0010      	movs	r0, r2
 801ba70:	f7ff fb4a 	bl	801b108 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 801ba74:	4b45      	ldr	r3, [pc, #276]	; (801bb8c <SX1276OnDio1Irq+0x1b8>)
 801ba76:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 801ba78:	4b44      	ldr	r3, [pc, #272]	; (801bb8c <SX1276OnDio1Irq+0x1b8>)
 801ba7a:	213e      	movs	r1, #62	; 0x3e
 801ba7c:	5c5b      	ldrb	r3, [r3, r1]
 801ba7e:	b29b      	uxth	r3, r3
 801ba80:	18d3      	adds	r3, r2, r3
 801ba82:	b29b      	uxth	r3, r3
 801ba84:	3b01      	subs	r3, #1
 801ba86:	b29a      	uxth	r2, r3
 801ba88:	4b40      	ldr	r3, [pc, #256]	; (801bb8c <SX1276OnDio1Irq+0x1b8>)
 801ba8a:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 801ba8c:	e036      	b.n	801bafc <SX1276OnDio1Irq+0x128>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801ba8e:	4b3f      	ldr	r3, [pc, #252]	; (801bb8c <SX1276OnDio1Irq+0x1b8>)
 801ba90:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801ba92:	001a      	movs	r2, r3
 801ba94:	4b40      	ldr	r3, [pc, #256]	; (801bb98 <SX1276OnDio1Irq+0x1c4>)
 801ba96:	18d0      	adds	r0, r2, r3
 801ba98:	4b3c      	ldr	r3, [pc, #240]	; (801bb8c <SX1276OnDio1Irq+0x1b8>)
 801ba9a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801ba9c:	b2da      	uxtb	r2, r3
 801ba9e:	4b3b      	ldr	r3, [pc, #236]	; (801bb8c <SX1276OnDio1Irq+0x1b8>)
 801baa0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801baa2:	b2db      	uxtb	r3, r3
 801baa4:	1ad3      	subs	r3, r2, r3
 801baa6:	b2db      	uxtb	r3, r3
 801baa8:	0019      	movs	r1, r3
 801baaa:	f7ff fb2d 	bl	801b108 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801baae:	4b37      	ldr	r3, [pc, #220]	; (801bb8c <SX1276OnDio1Irq+0x1b8>)
 801bab0:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801bab2:	4b36      	ldr	r3, [pc, #216]	; (801bb8c <SX1276OnDio1Irq+0x1b8>)
 801bab4:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 801bab6:	e021      	b.n	801bafc <SX1276OnDio1Irq+0x128>
                if( Sx_Board_GetDio1PinState( ) == 0 )
 801bab8:	f7ea fc3a 	bl	8006330 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 801babc:	1e03      	subs	r3, r0, #0
 801babe:	d01a      	beq.n	801baf6 <SX1276OnDio1Irq+0x122>
                TimerStop( &RxTimeoutTimer );
 801bac0:	4b36      	ldr	r3, [pc, #216]	; (801bb9c <SX1276OnDio1Irq+0x1c8>)
 801bac2:	0018      	movs	r0, r3
 801bac4:	f001 f8f6 	bl	801ccb4 <UTIL_TIMER_Stop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 801bac8:	2180      	movs	r1, #128	; 0x80
 801baca:	2012      	movs	r0, #18
 801bacc:	f7ff fa7e 	bl	801afcc <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 801bad0:	4b2e      	ldr	r3, [pc, #184]	; (801bb8c <SX1276OnDio1Irq+0x1b8>)
 801bad2:	2200      	movs	r2, #0
 801bad4:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801bad6:	4b32      	ldr	r3, [pc, #200]	; (801bba0 <SX1276OnDio1Irq+0x1cc>)
 801bad8:	681b      	ldr	r3, [r3, #0]
 801bada:	2b00      	cmp	r3, #0
 801badc:	d00d      	beq.n	801bafa <SX1276OnDio1Irq+0x126>
 801bade:	4b30      	ldr	r3, [pc, #192]	; (801bba0 <SX1276OnDio1Irq+0x1cc>)
 801bae0:	681b      	ldr	r3, [r3, #0]
 801bae2:	68db      	ldr	r3, [r3, #12]
 801bae4:	2b00      	cmp	r3, #0
 801bae6:	d008      	beq.n	801bafa <SX1276OnDio1Irq+0x126>
                    RadioEvents->RxTimeout( );
 801bae8:	4b2d      	ldr	r3, [pc, #180]	; (801bba0 <SX1276OnDio1Irq+0x1cc>)
 801baea:	681b      	ldr	r3, [r3, #0]
 801baec:	68db      	ldr	r3, [r3, #12]
 801baee:	4798      	blx	r3
                break;
 801baf0:	e003      	b.n	801bafa <SX1276OnDio1Irq+0x126>
                    break;
 801baf2:	46c0      	nop			; (mov r8, r8)
 801baf4:	e047      	b.n	801bb86 <SX1276OnDio1Irq+0x1b2>
                    break;
 801baf6:	46c0      	nop			; (mov r8, r8)
 801baf8:	e045      	b.n	801bb86 <SX1276OnDio1Irq+0x1b2>
                break;
 801bafa:	46c0      	nop			; (mov r8, r8)
            break;
 801bafc:	e043      	b.n	801bb86 <SX1276OnDio1Irq+0x1b2>
            switch( SX1276.Settings.Modem )
 801bafe:	4b23      	ldr	r3, [pc, #140]	; (801bb8c <SX1276OnDio1Irq+0x1b8>)
 801bb00:	795b      	ldrb	r3, [r3, #5]
 801bb02:	2b00      	cmp	r3, #0
 801bb04:	d13b      	bne.n	801bb7e <SX1276OnDio1Irq+0x1aa>
                if( Sx_Board_GetDio1PinState( ) == 1 )
 801bb06:	f7ea fc13 	bl	8006330 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 801bb0a:	0003      	movs	r3, r0
 801bb0c:	2b01      	cmp	r3, #1
 801bb0e:	d038      	beq.n	801bb82 <SX1276OnDio1Irq+0x1ae>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 801bb10:	4b1e      	ldr	r3, [pc, #120]	; (801bb8c <SX1276OnDio1Irq+0x1b8>)
 801bb12:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801bb14:	001a      	movs	r2, r3
 801bb16:	4b1d      	ldr	r3, [pc, #116]	; (801bb8c <SX1276OnDio1Irq+0x1b8>)
 801bb18:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801bb1a:	1ad3      	subs	r3, r2, r3
 801bb1c:	4a1b      	ldr	r2, [pc, #108]	; (801bb8c <SX1276OnDio1Irq+0x1b8>)
 801bb1e:	213f      	movs	r1, #63	; 0x3f
 801bb20:	5c52      	ldrb	r2, [r2, r1]
 801bb22:	4293      	cmp	r3, r2
 801bb24:	dd16      	ble.n	801bb54 <SX1276OnDio1Irq+0x180>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 801bb26:	4b19      	ldr	r3, [pc, #100]	; (801bb8c <SX1276OnDio1Irq+0x1b8>)
 801bb28:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801bb2a:	001a      	movs	r2, r3
 801bb2c:	4b1a      	ldr	r3, [pc, #104]	; (801bb98 <SX1276OnDio1Irq+0x1c4>)
 801bb2e:	18d2      	adds	r2, r2, r3
 801bb30:	4b16      	ldr	r3, [pc, #88]	; (801bb8c <SX1276OnDio1Irq+0x1b8>)
 801bb32:	213f      	movs	r1, #63	; 0x3f
 801bb34:	5c5b      	ldrb	r3, [r3, r1]
 801bb36:	0019      	movs	r1, r3
 801bb38:	0010      	movs	r0, r2
 801bb3a:	f7ff fad3 	bl	801b0e4 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 801bb3e:	4b13      	ldr	r3, [pc, #76]	; (801bb8c <SX1276OnDio1Irq+0x1b8>)
 801bb40:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 801bb42:	4b12      	ldr	r3, [pc, #72]	; (801bb8c <SX1276OnDio1Irq+0x1b8>)
 801bb44:	213f      	movs	r1, #63	; 0x3f
 801bb46:	5c5b      	ldrb	r3, [r3, r1]
 801bb48:	b29b      	uxth	r3, r3
 801bb4a:	18d3      	adds	r3, r2, r3
 801bb4c:	b29a      	uxth	r2, r3
 801bb4e:	4b0f      	ldr	r3, [pc, #60]	; (801bb8c <SX1276OnDio1Irq+0x1b8>)
 801bb50:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 801bb52:	e017      	b.n	801bb84 <SX1276OnDio1Irq+0x1b0>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801bb54:	4b0d      	ldr	r3, [pc, #52]	; (801bb8c <SX1276OnDio1Irq+0x1b8>)
 801bb56:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801bb58:	001a      	movs	r2, r3
 801bb5a:	4b0f      	ldr	r3, [pc, #60]	; (801bb98 <SX1276OnDio1Irq+0x1c4>)
 801bb5c:	18d0      	adds	r0, r2, r3
 801bb5e:	4b0b      	ldr	r3, [pc, #44]	; (801bb8c <SX1276OnDio1Irq+0x1b8>)
 801bb60:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801bb62:	b2da      	uxtb	r2, r3
 801bb64:	4b09      	ldr	r3, [pc, #36]	; (801bb8c <SX1276OnDio1Irq+0x1b8>)
 801bb66:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801bb68:	b2db      	uxtb	r3, r3
 801bb6a:	1ad3      	subs	r3, r2, r3
 801bb6c:	b2db      	uxtb	r3, r3
 801bb6e:	0019      	movs	r1, r3
 801bb70:	f7ff fab8 	bl	801b0e4 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 801bb74:	4b05      	ldr	r3, [pc, #20]	; (801bb8c <SX1276OnDio1Irq+0x1b8>)
 801bb76:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801bb78:	4b04      	ldr	r3, [pc, #16]	; (801bb8c <SX1276OnDio1Irq+0x1b8>)
 801bb7a:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 801bb7c:	e002      	b.n	801bb84 <SX1276OnDio1Irq+0x1b0>
                break;
 801bb7e:	46c0      	nop			; (mov r8, r8)
 801bb80:	e000      	b.n	801bb84 <SX1276OnDio1Irq+0x1b0>
                    break;
 801bb82:	46c0      	nop			; (mov r8, r8)
            break;
 801bb84:	46c0      	nop			; (mov r8, r8)
    }
}
 801bb86:	46c0      	nop			; (mov r8, r8)
 801bb88:	46bd      	mov	sp, r7
 801bb8a:	bd80      	pop	{r7, pc}
 801bb8c:	20001724 	.word	0x20001724
 801bb90:	2000170c 	.word	0x2000170c
 801bb94:	2000175e 	.word	0x2000175e
 801bb98:	20000e80 	.word	0x20000e80
 801bb9c:	2000178c 	.word	0x2000178c
 801bba0:	20000e7c 	.word	0x20000e7c

0801bba4 <SX1276OnDio2Irq>:

static void SX1276OnDio2Irq( void )
{
 801bba4:	b590      	push	{r4, r7, lr}
 801bba6:	b085      	sub	sp, #20
 801bba8:	af00      	add	r7, sp, #0
    uint32_t afcChannel = 0;
 801bbaa:	2300      	movs	r3, #0
 801bbac:	60fb      	str	r3, [r7, #12]

    switch( SX1276.Settings.State )
 801bbae:	4b5d      	ldr	r3, [pc, #372]	; (801bd24 <SX1276OnDio2Irq+0x180>)
 801bbb0:	791b      	ldrb	r3, [r3, #4]
 801bbb2:	2b01      	cmp	r3, #1
 801bbb4:	d003      	beq.n	801bbbe <SX1276OnDio2Irq+0x1a>
 801bbb6:	2b02      	cmp	r3, #2
 801bbb8:	d100      	bne.n	801bbbc <SX1276OnDio2Irq+0x18>
 801bbba:	e083      	b.n	801bcc4 <SX1276OnDio2Irq+0x120>
            default:
                break;
            }
            break;
        default:
            break;
 801bbbc:	e0ae      	b.n	801bd1c <SX1276OnDio2Irq+0x178>
            switch( SX1276.Settings.Modem )
 801bbbe:	4b59      	ldr	r3, [pc, #356]	; (801bd24 <SX1276OnDio2Irq+0x180>)
 801bbc0:	795b      	ldrb	r3, [r3, #5]
 801bbc2:	2b00      	cmp	r3, #0
 801bbc4:	d002      	beq.n	801bbcc <SX1276OnDio2Irq+0x28>
 801bbc6:	2b01      	cmp	r3, #1
 801bbc8:	d058      	beq.n	801bc7c <SX1276OnDio2Irq+0xd8>
                break;
 801bbca:	e07a      	b.n	801bcc2 <SX1276OnDio2Irq+0x11e>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 801bbcc:	4b55      	ldr	r3, [pc, #340]	; (801bd24 <SX1276OnDio2Irq+0x180>)
 801bbce:	2230      	movs	r2, #48	; 0x30
 801bbd0:	2101      	movs	r1, #1
 801bbd2:	5499      	strb	r1, [r3, r2]
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 801bbd4:	4b53      	ldr	r3, [pc, #332]	; (801bd24 <SX1276OnDio2Irq+0x180>)
 801bbd6:	2230      	movs	r2, #48	; 0x30
 801bbd8:	5c9b      	ldrb	r3, [r3, r2]
 801bbda:	2b00      	cmp	r3, #0
 801bbdc:	d06e      	beq.n	801bcbc <SX1276OnDio2Irq+0x118>
 801bbde:	4b51      	ldr	r3, [pc, #324]	; (801bd24 <SX1276OnDio2Irq+0x180>)
 801bbe0:	2231      	movs	r2, #49	; 0x31
 801bbe2:	5c9b      	ldrb	r3, [r3, r2]
 801bbe4:	2b00      	cmp	r3, #0
 801bbe6:	d169      	bne.n	801bcbc <SX1276OnDio2Irq+0x118>
                    TimerStop( &RxTimeoutSyncWord );
 801bbe8:	4b4f      	ldr	r3, [pc, #316]	; (801bd28 <SX1276OnDio2Irq+0x184>)
 801bbea:	0018      	movs	r0, r3
 801bbec:	f001 f862 	bl	801ccb4 <UTIL_TIMER_Stop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 801bbf0:	4b4c      	ldr	r3, [pc, #304]	; (801bd24 <SX1276OnDio2Irq+0x180>)
 801bbf2:	2231      	movs	r2, #49	; 0x31
 801bbf4:	2101      	movs	r1, #1
 801bbf6:	5499      	strb	r1, [r3, r2]
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 801bbf8:	2011      	movs	r0, #17
 801bbfa:	f7ff f9f8 	bl	801afee <SX1276Read>
 801bbfe:	0003      	movs	r3, r0
 801bc00:	085b      	lsrs	r3, r3, #1
 801bc02:	b2db      	uxtb	r3, r3
 801bc04:	425b      	negs	r3, r3
 801bc06:	b2db      	uxtb	r3, r3
 801bc08:	b259      	sxtb	r1, r3
 801bc0a:	4b46      	ldr	r3, [pc, #280]	; (801bd24 <SX1276OnDio2Irq+0x180>)
 801bc0c:	2232      	movs	r2, #50	; 0x32
 801bc0e:	5499      	strb	r1, [r3, r2]
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 801bc10:	201b      	movs	r0, #27
 801bc12:	f7ff f9ec 	bl	801afee <SX1276Read>
 801bc16:	0003      	movs	r3, r0
 801bc18:	021c      	lsls	r4, r3, #8
                                     ( uint16_t )SX1276Read( REG_AFCLSB ) );
 801bc1a:	201c      	movs	r0, #28
 801bc1c:	f7ff f9e7 	bl	801afee <SX1276Read>
 801bc20:	0003      	movs	r3, r0
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 801bc22:	4323      	orrs	r3, r4
 801bc24:	60fb      	str	r3, [r7, #12]
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue );
 801bc26:	68fb      	ldr	r3, [r7, #12]
 801bc28:	0a1b      	lsrs	r3, r3, #8
 801bc2a:	60bb      	str	r3, [r7, #8]
 801bc2c:	68bb      	ldr	r3, [r7, #8]
 801bc2e:	021b      	lsls	r3, r3, #8
 801bc30:	68fa      	ldr	r2, [r7, #12]
 801bc32:	1ad3      	subs	r3, r2, r3
 801bc34:	607b      	str	r3, [r7, #4]
 801bc36:	68b9      	ldr	r1, [r7, #8]
 801bc38:	000b      	movs	r3, r1
 801bc3a:	015b      	lsls	r3, r3, #5
 801bc3c:	1a5b      	subs	r3, r3, r1
 801bc3e:	019a      	lsls	r2, r3, #6
 801bc40:	1ad2      	subs	r2, r2, r3
 801bc42:	00d2      	lsls	r2, r2, #3
 801bc44:	1850      	adds	r0, r2, r1
 801bc46:	6879      	ldr	r1, [r7, #4]
 801bc48:	000b      	movs	r3, r1
 801bc4a:	015b      	lsls	r3, r3, #5
 801bc4c:	1a5b      	subs	r3, r3, r1
 801bc4e:	019a      	lsls	r2, r3, #6
 801bc50:	1ad2      	subs	r2, r2, r3
 801bc52:	00d2      	lsls	r2, r2, #3
 801bc54:	1853      	adds	r3, r2, r1
 801bc56:	3380      	adds	r3, #128	; 0x80
 801bc58:	0a1b      	lsrs	r3, r3, #8
 801bc5a:	18c3      	adds	r3, r0, r3
 801bc5c:	001a      	movs	r2, r3
 801bc5e:	4b31      	ldr	r3, [pc, #196]	; (801bd24 <SX1276OnDio2Irq+0x180>)
 801bc60:	635a      	str	r2, [r3, #52]	; 0x34
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 801bc62:	200c      	movs	r0, #12
 801bc64:	f7ff f9c3 	bl	801afee <SX1276Read>
 801bc68:	0003      	movs	r3, r0
 801bc6a:	095b      	lsrs	r3, r3, #5
 801bc6c:	b2db      	uxtb	r3, r3
 801bc6e:	2207      	movs	r2, #7
 801bc70:	4013      	ands	r3, r2
 801bc72:	b2d9      	uxtb	r1, r3
 801bc74:	4b2b      	ldr	r3, [pc, #172]	; (801bd24 <SX1276OnDio2Irq+0x180>)
 801bc76:	2238      	movs	r2, #56	; 0x38
 801bc78:	5499      	strb	r1, [r3, r2]
                break;
 801bc7a:	e01f      	b.n	801bcbc <SX1276OnDio2Irq+0x118>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 801bc7c:	4b29      	ldr	r3, [pc, #164]	; (801bd24 <SX1276OnDio2Irq+0x180>)
 801bc7e:	2253      	movs	r2, #83	; 0x53
 801bc80:	5c9b      	ldrb	r3, [r3, r2]
 801bc82:	2b00      	cmp	r3, #0
 801bc84:	d01c      	beq.n	801bcc0 <SX1276OnDio2Irq+0x11c>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 801bc86:	2102      	movs	r1, #2
 801bc88:	2012      	movs	r0, #18
 801bc8a:	f7ff f99f 	bl	801afcc <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 801bc8e:	4b27      	ldr	r3, [pc, #156]	; (801bd2c <SX1276OnDio2Irq+0x188>)
 801bc90:	681b      	ldr	r3, [r3, #0]
 801bc92:	2b00      	cmp	r3, #0
 801bc94:	d014      	beq.n	801bcc0 <SX1276OnDio2Irq+0x11c>
 801bc96:	4b25      	ldr	r3, [pc, #148]	; (801bd2c <SX1276OnDio2Irq+0x188>)
 801bc98:	681b      	ldr	r3, [r3, #0]
 801bc9a:	695b      	ldr	r3, [r3, #20]
 801bc9c:	2b00      	cmp	r3, #0
 801bc9e:	d00f      	beq.n	801bcc0 <SX1276OnDio2Irq+0x11c>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 801bca0:	4b22      	ldr	r3, [pc, #136]	; (801bd2c <SX1276OnDio2Irq+0x188>)
 801bca2:	681b      	ldr	r3, [r3, #0]
 801bca4:	695c      	ldr	r4, [r3, #20]
 801bca6:	201c      	movs	r0, #28
 801bca8:	f7ff f9a1 	bl	801afee <SX1276Read>
 801bcac:	0003      	movs	r3, r0
 801bcae:	001a      	movs	r2, r3
 801bcb0:	233f      	movs	r3, #63	; 0x3f
 801bcb2:	4013      	ands	r3, r2
 801bcb4:	b2db      	uxtb	r3, r3
 801bcb6:	0018      	movs	r0, r3
 801bcb8:	47a0      	blx	r4
                break;
 801bcba:	e001      	b.n	801bcc0 <SX1276OnDio2Irq+0x11c>
                break;
 801bcbc:	46c0      	nop			; (mov r8, r8)
 801bcbe:	e02d      	b.n	801bd1c <SX1276OnDio2Irq+0x178>
                break;
 801bcc0:	46c0      	nop			; (mov r8, r8)
            break;
 801bcc2:	e02b      	b.n	801bd1c <SX1276OnDio2Irq+0x178>
            switch( SX1276.Settings.Modem )
 801bcc4:	4b17      	ldr	r3, [pc, #92]	; (801bd24 <SX1276OnDio2Irq+0x180>)
 801bcc6:	795b      	ldrb	r3, [r3, #5]
 801bcc8:	2b00      	cmp	r3, #0
 801bcca:	d021      	beq.n	801bd10 <SX1276OnDio2Irq+0x16c>
 801bccc:	2b01      	cmp	r3, #1
 801bcce:	d121      	bne.n	801bd14 <SX1276OnDio2Irq+0x170>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 801bcd0:	4b14      	ldr	r3, [pc, #80]	; (801bd24 <SX1276OnDio2Irq+0x180>)
 801bcd2:	2253      	movs	r2, #83	; 0x53
 801bcd4:	5c9b      	ldrb	r3, [r3, r2]
 801bcd6:	2b00      	cmp	r3, #0
 801bcd8:	d01e      	beq.n	801bd18 <SX1276OnDio2Irq+0x174>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 801bcda:	2102      	movs	r1, #2
 801bcdc:	2012      	movs	r0, #18
 801bcde:	f7ff f975 	bl	801afcc <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 801bce2:	4b12      	ldr	r3, [pc, #72]	; (801bd2c <SX1276OnDio2Irq+0x188>)
 801bce4:	681b      	ldr	r3, [r3, #0]
 801bce6:	2b00      	cmp	r3, #0
 801bce8:	d016      	beq.n	801bd18 <SX1276OnDio2Irq+0x174>
 801bcea:	4b10      	ldr	r3, [pc, #64]	; (801bd2c <SX1276OnDio2Irq+0x188>)
 801bcec:	681b      	ldr	r3, [r3, #0]
 801bcee:	695b      	ldr	r3, [r3, #20]
 801bcf0:	2b00      	cmp	r3, #0
 801bcf2:	d011      	beq.n	801bd18 <SX1276OnDio2Irq+0x174>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 801bcf4:	4b0d      	ldr	r3, [pc, #52]	; (801bd2c <SX1276OnDio2Irq+0x188>)
 801bcf6:	681b      	ldr	r3, [r3, #0]
 801bcf8:	695c      	ldr	r4, [r3, #20]
 801bcfa:	201c      	movs	r0, #28
 801bcfc:	f7ff f977 	bl	801afee <SX1276Read>
 801bd00:	0003      	movs	r3, r0
 801bd02:	001a      	movs	r2, r3
 801bd04:	233f      	movs	r3, #63	; 0x3f
 801bd06:	4013      	ands	r3, r2
 801bd08:	b2db      	uxtb	r3, r3
 801bd0a:	0018      	movs	r0, r3
 801bd0c:	47a0      	blx	r4
                break;
 801bd0e:	e003      	b.n	801bd18 <SX1276OnDio2Irq+0x174>
                break;
 801bd10:	46c0      	nop			; (mov r8, r8)
 801bd12:	e002      	b.n	801bd1a <SX1276OnDio2Irq+0x176>
                break;
 801bd14:	46c0      	nop			; (mov r8, r8)
 801bd16:	e000      	b.n	801bd1a <SX1276OnDio2Irq+0x176>
                break;
 801bd18:	46c0      	nop			; (mov r8, r8)
            break;
 801bd1a:	46c0      	nop			; (mov r8, r8)
    }
}
 801bd1c:	46c0      	nop			; (mov r8, r8)
 801bd1e:	46bd      	mov	sp, r7
 801bd20:	b005      	add	sp, #20
 801bd22:	bd90      	pop	{r4, r7, pc}
 801bd24:	20001724 	.word	0x20001724
 801bd28:	2000170c 	.word	0x2000170c
 801bd2c:	20000e7c 	.word	0x20000e7c

0801bd30 <SX1276OnDio3Irq>:

static void SX1276OnDio3Irq( void )
{
 801bd30:	b580      	push	{r7, lr}
 801bd32:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 801bd34:	4b1d      	ldr	r3, [pc, #116]	; (801bdac <SX1276OnDio3Irq+0x7c>)
 801bd36:	795b      	ldrb	r3, [r3, #5]
 801bd38:	2b00      	cmp	r3, #0
 801bd3a:	d031      	beq.n	801bda0 <SX1276OnDio3Irq+0x70>
 801bd3c:	2b01      	cmp	r3, #1
 801bd3e:	d000      	beq.n	801bd42 <SX1276OnDio3Irq+0x12>
                RadioEvents->CadDone( false );
            }
        }
        break;
    default:
        break;
 801bd40:	e031      	b.n	801bda6 <SX1276OnDio3Irq+0x76>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 801bd42:	2012      	movs	r0, #18
 801bd44:	f7ff f953 	bl	801afee <SX1276Read>
 801bd48:	0003      	movs	r3, r0
 801bd4a:	001a      	movs	r2, r3
 801bd4c:	2301      	movs	r3, #1
 801bd4e:	4013      	ands	r3, r2
 801bd50:	2b01      	cmp	r3, #1
 801bd52:	d112      	bne.n	801bd7a <SX1276OnDio3Irq+0x4a>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 801bd54:	2105      	movs	r1, #5
 801bd56:	2012      	movs	r0, #18
 801bd58:	f7ff f938 	bl	801afcc <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801bd5c:	4b14      	ldr	r3, [pc, #80]	; (801bdb0 <SX1276OnDio3Irq+0x80>)
 801bd5e:	681b      	ldr	r3, [r3, #0]
 801bd60:	2b00      	cmp	r3, #0
 801bd62:	d01f      	beq.n	801bda4 <SX1276OnDio3Irq+0x74>
 801bd64:	4b12      	ldr	r3, [pc, #72]	; (801bdb0 <SX1276OnDio3Irq+0x80>)
 801bd66:	681b      	ldr	r3, [r3, #0]
 801bd68:	699b      	ldr	r3, [r3, #24]
 801bd6a:	2b00      	cmp	r3, #0
 801bd6c:	d01a      	beq.n	801bda4 <SX1276OnDio3Irq+0x74>
                RadioEvents->CadDone( true );
 801bd6e:	4b10      	ldr	r3, [pc, #64]	; (801bdb0 <SX1276OnDio3Irq+0x80>)
 801bd70:	681b      	ldr	r3, [r3, #0]
 801bd72:	699b      	ldr	r3, [r3, #24]
 801bd74:	2001      	movs	r0, #1
 801bd76:	4798      	blx	r3
        break;
 801bd78:	e014      	b.n	801bda4 <SX1276OnDio3Irq+0x74>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 801bd7a:	2104      	movs	r1, #4
 801bd7c:	2012      	movs	r0, #18
 801bd7e:	f7ff f925 	bl	801afcc <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801bd82:	4b0b      	ldr	r3, [pc, #44]	; (801bdb0 <SX1276OnDio3Irq+0x80>)
 801bd84:	681b      	ldr	r3, [r3, #0]
 801bd86:	2b00      	cmp	r3, #0
 801bd88:	d00c      	beq.n	801bda4 <SX1276OnDio3Irq+0x74>
 801bd8a:	4b09      	ldr	r3, [pc, #36]	; (801bdb0 <SX1276OnDio3Irq+0x80>)
 801bd8c:	681b      	ldr	r3, [r3, #0]
 801bd8e:	699b      	ldr	r3, [r3, #24]
 801bd90:	2b00      	cmp	r3, #0
 801bd92:	d007      	beq.n	801bda4 <SX1276OnDio3Irq+0x74>
                RadioEvents->CadDone( false );
 801bd94:	4b06      	ldr	r3, [pc, #24]	; (801bdb0 <SX1276OnDio3Irq+0x80>)
 801bd96:	681b      	ldr	r3, [r3, #0]
 801bd98:	699b      	ldr	r3, [r3, #24]
 801bd9a:	2000      	movs	r0, #0
 801bd9c:	4798      	blx	r3
        break;
 801bd9e:	e001      	b.n	801bda4 <SX1276OnDio3Irq+0x74>
        break;
 801bda0:	46c0      	nop			; (mov r8, r8)
 801bda2:	e000      	b.n	801bda6 <SX1276OnDio3Irq+0x76>
        break;
 801bda4:	46c0      	nop			; (mov r8, r8)
    }
}
 801bda6:	46c0      	nop			; (mov r8, r8)
 801bda8:	46bd      	mov	sp, r7
 801bdaa:	bd80      	pop	{r7, pc}
 801bdac:	20001724 	.word	0x20001724
 801bdb0:	20000e7c 	.word	0x20000e7c

0801bdb4 <SX1276OnDio4Irq>:

static void SX1276OnDio4Irq( void )
{
 801bdb4:	b580      	push	{r7, lr}
 801bdb6:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 801bdb8:	4b0b      	ldr	r3, [pc, #44]	; (801bde8 <SX1276OnDio4Irq+0x34>)
 801bdba:	795b      	ldrb	r3, [r3, #5]
 801bdbc:	2b00      	cmp	r3, #0
 801bdbe:	d002      	beq.n	801bdc6 <SX1276OnDio4Irq+0x12>
 801bdc0:	2b01      	cmp	r3, #1
 801bdc2:	d00a      	beq.n	801bdda <SX1276OnDio4Irq+0x26>
        }
        break;
    case MODEM_LORA:
        break;
    default:
        break;
 801bdc4:	e00c      	b.n	801bde0 <SX1276OnDio4Irq+0x2c>
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 801bdc6:	4b08      	ldr	r3, [pc, #32]	; (801bde8 <SX1276OnDio4Irq+0x34>)
 801bdc8:	2230      	movs	r2, #48	; 0x30
 801bdca:	5c9b      	ldrb	r3, [r3, r2]
 801bdcc:	2b00      	cmp	r3, #0
 801bdce:	d106      	bne.n	801bdde <SX1276OnDio4Irq+0x2a>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 801bdd0:	4b05      	ldr	r3, [pc, #20]	; (801bde8 <SX1276OnDio4Irq+0x34>)
 801bdd2:	2230      	movs	r2, #48	; 0x30
 801bdd4:	2101      	movs	r1, #1
 801bdd6:	5499      	strb	r1, [r3, r2]
        break;
 801bdd8:	e001      	b.n	801bdde <SX1276OnDio4Irq+0x2a>
        break;
 801bdda:	46c0      	nop			; (mov r8, r8)
 801bddc:	e000      	b.n	801bde0 <SX1276OnDio4Irq+0x2c>
        break;
 801bdde:	46c0      	nop			; (mov r8, r8)
    }
}
 801bde0:	46c0      	nop			; (mov r8, r8)
 801bde2:	46bd      	mov	sp, r7
 801bde4:	bd80      	pop	{r7, pc}
 801bde6:	46c0      	nop			; (mov r8, r8)
 801bde8:	20001724 	.word	0x20001724

0801bdec <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801bdec:	b580      	push	{r7, lr}
 801bdee:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801bdf0:	4b0a      	ldr	r3, [pc, #40]	; (801be1c <UTIL_ADV_TRACE_Init+0x30>)
 801bdf2:	2218      	movs	r2, #24
 801bdf4:	2100      	movs	r1, #0
 801bdf6:	0018      	movs	r0, r3
 801bdf8:	f000 fbb8 	bl	801c56c <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801bdfc:	2380      	movs	r3, #128	; 0x80
 801bdfe:	009a      	lsls	r2, r3, #2
 801be00:	4b07      	ldr	r3, [pc, #28]	; (801be20 <UTIL_ADV_TRACE_Init+0x34>)
 801be02:	2100      	movs	r1, #0
 801be04:	0018      	movs	r0, r3
 801be06:	f000 fbb1 	bl	801c56c <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();
  
  /* Initialize the Low Level interface */  
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801be0a:	4b06      	ldr	r3, [pc, #24]	; (801be24 <UTIL_ADV_TRACE_Init+0x38>)
 801be0c:	681b      	ldr	r3, [r3, #0]
 801be0e:	4a06      	ldr	r2, [pc, #24]	; (801be28 <UTIL_ADV_TRACE_Init+0x3c>)
 801be10:	0010      	movs	r0, r2
 801be12:	4798      	blx	r3
 801be14:	0003      	movs	r3, r0
}
 801be16:	0018      	movs	r0, r3
 801be18:	46bd      	mov	sp, r7
 801be1a:	bd80      	pop	{r7, pc}
 801be1c:	20000f80 	.word	0x20000f80
 801be20:	20000f98 	.word	0x20000f98
 801be24:	0801ee94 	.word	0x0801ee94
 801be28:	0801c0ad 	.word	0x0801c0ad

0801be2c <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801be2c:	b408      	push	{r3}
 801be2e:	b590      	push	{r4, r7, lr}
 801be30:	b08c      	sub	sp, #48	; 0x30
 801be32:	af00      	add	r7, sp, #0
 801be34:	60f8      	str	r0, [r7, #12]
 801be36:	60b9      	str	r1, [r7, #8]
 801be38:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801be3a:	2316      	movs	r3, #22
 801be3c:	18fb      	adds	r3, r7, r3
 801be3e:	2200      	movs	r2, #0
 801be40:	801a      	strh	r2, [r3, #0]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801be42:	232c      	movs	r3, #44	; 0x2c
 801be44:	18fb      	adds	r3, r7, r3
 801be46:	2200      	movs	r2, #0
 801be48:	801a      	strh	r2, [r3, #0]

  /* check verbose level */
  if (!( ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801be4a:	4b41      	ldr	r3, [pc, #260]	; (801bf50 <UTIL_ADV_TRACE_COND_FSend+0x124>)
 801be4c:	7a1b      	ldrb	r3, [r3, #8]
 801be4e:	001a      	movs	r2, r3
 801be50:	68fb      	ldr	r3, [r7, #12]
 801be52:	4293      	cmp	r3, r2
 801be54:	d902      	bls.n	801be5c <UTIL_ADV_TRACE_COND_FSend+0x30>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801be56:	2305      	movs	r3, #5
 801be58:	425b      	negs	r3, r3
 801be5a:	e072      	b.n	801bf42 <UTIL_ADV_TRACE_COND_FSend+0x116>
  }

  if(( Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801be5c:	4b3c      	ldr	r3, [pc, #240]	; (801bf50 <UTIL_ADV_TRACE_COND_FSend+0x124>)
 801be5e:	68db      	ldr	r3, [r3, #12]
 801be60:	68ba      	ldr	r2, [r7, #8]
 801be62:	4013      	ands	r3, r2
 801be64:	68ba      	ldr	r2, [r7, #8]
 801be66:	429a      	cmp	r2, r3
 801be68:	d002      	beq.n	801be70 <UTIL_ADV_TRACE_COND_FSend+0x44>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801be6a:	2306      	movs	r3, #6
 801be6c:	425b      	negs	r3, r3
 801be6e:	e068      	b.n	801bf42 <UTIL_ADV_TRACE_COND_FSend+0x116>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801be70:	4b37      	ldr	r3, [pc, #220]	; (801bf50 <UTIL_ADV_TRACE_COND_FSend+0x124>)
 801be72:	685b      	ldr	r3, [r3, #4]
 801be74:	2b00      	cmp	r3, #0
 801be76:	d00a      	beq.n	801be8e <UTIL_ADV_TRACE_COND_FSend+0x62>
 801be78:	687b      	ldr	r3, [r7, #4]
 801be7a:	2b00      	cmp	r3, #0
 801be7c:	d007      	beq.n	801be8e <UTIL_ADV_TRACE_COND_FSend+0x62>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801be7e:	4b34      	ldr	r3, [pc, #208]	; (801bf50 <UTIL_ADV_TRACE_COND_FSend+0x124>)
 801be80:	685b      	ldr	r3, [r3, #4]
 801be82:	2216      	movs	r2, #22
 801be84:	18b9      	adds	r1, r7, r2
 801be86:	2218      	movs	r2, #24
 801be88:	18ba      	adds	r2, r7, r2
 801be8a:	0010      	movs	r0, r2
 801be8c:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801be8e:	2340      	movs	r3, #64	; 0x40
 801be90:	18fb      	adds	r3, r7, r3
 801be92:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801be94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801be96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801be98:	2180      	movs	r1, #128	; 0x80
 801be9a:	0049      	lsls	r1, r1, #1
 801be9c:	482d      	ldr	r0, [pc, #180]	; (801bf54 <UTIL_ADV_TRACE_COND_FSend+0x128>)
 801be9e:	f001 fa13 	bl	801d2c8 <tiny_vsnprintf_like>
 801bea2:	0002      	movs	r2, r0
 801bea4:	242c      	movs	r4, #44	; 0x2c
 801bea6:	193b      	adds	r3, r7, r4
 801bea8:	801a      	strh	r2, [r3, #0]

  TRACE_Lock();
 801beaa:	f000 fa23 	bl	801c2f4 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801beae:	2316      	movs	r3, #22
 801beb0:	18fb      	adds	r3, r7, r3
 801beb2:	881a      	ldrh	r2, [r3, #0]
 801beb4:	193b      	adds	r3, r7, r4
 801beb6:	881b      	ldrh	r3, [r3, #0]
 801beb8:	18d3      	adds	r3, r2, r3
 801beba:	b29b      	uxth	r3, r3
 801bebc:	2214      	movs	r2, #20
 801bebe:	18ba      	adds	r2, r7, r2
 801bec0:	0011      	movs	r1, r2
 801bec2:	0018      	movs	r0, r3
 801bec4:	f000 f97c 	bl	801c1c0 <TRACE_AllocateBufer>
 801bec8:	0003      	movs	r3, r0
 801beca:	3301      	adds	r3, #1
 801becc:	d035      	beq.n	801bf3a <UTIL_ADV_TRACE_COND_FSend+0x10e>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801bece:	232e      	movs	r3, #46	; 0x2e
 801bed0:	18fb      	adds	r3, r7, r3
 801bed2:	2200      	movs	r2, #0
 801bed4:	801a      	strh	r2, [r3, #0]
 801bed6:	e016      	b.n	801bf06 <UTIL_ADV_TRACE_COND_FSend+0xda>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801bed8:	202e      	movs	r0, #46	; 0x2e
 801beda:	183b      	adds	r3, r7, r0
 801bedc:	881b      	ldrh	r3, [r3, #0]
 801bede:	2414      	movs	r4, #20
 801bee0:	193a      	adds	r2, r7, r4
 801bee2:	8812      	ldrh	r2, [r2, #0]
 801bee4:	0011      	movs	r1, r2
 801bee6:	2218      	movs	r2, #24
 801bee8:	18ba      	adds	r2, r7, r2
 801beea:	5cd2      	ldrb	r2, [r2, r3]
 801beec:	4b1a      	ldr	r3, [pc, #104]	; (801bf58 <UTIL_ADV_TRACE_COND_FSend+0x12c>)
 801beee:	545a      	strb	r2, [r3, r1]
      writepos = writepos + 1u;
 801bef0:	193b      	adds	r3, r7, r4
 801bef2:	881b      	ldrh	r3, [r3, #0]
 801bef4:	3301      	adds	r3, #1
 801bef6:	b29a      	uxth	r2, r3
 801bef8:	193b      	adds	r3, r7, r4
 801befa:	801a      	strh	r2, [r3, #0]
    for (idx = 0u; idx < timestamp_size; idx++)
 801befc:	183b      	adds	r3, r7, r0
 801befe:	881a      	ldrh	r2, [r3, #0]
 801bf00:	183b      	adds	r3, r7, r0
 801bf02:	3201      	adds	r2, #1
 801bf04:	801a      	strh	r2, [r3, #0]
 801bf06:	2316      	movs	r3, #22
 801bf08:	18fb      	adds	r3, r7, r3
 801bf0a:	881b      	ldrh	r3, [r3, #0]
 801bf0c:	222e      	movs	r2, #46	; 0x2e
 801bf0e:	18ba      	adds	r2, r7, r2
 801bf10:	8812      	ldrh	r2, [r2, #0]
 801bf12:	429a      	cmp	r2, r3
 801bf14:	d3e0      	bcc.n	801bed8 <UTIL_ADV_TRACE_COND_FSend+0xac>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801bf16:	2314      	movs	r3, #20
 801bf18:	18fb      	adds	r3, r7, r3
 801bf1a:	881b      	ldrh	r3, [r3, #0]
 801bf1c:	001a      	movs	r2, r3
 801bf1e:	4b0e      	ldr	r3, [pc, #56]	; (801bf58 <UTIL_ADV_TRACE_COND_FSend+0x12c>)
 801bf20:	18d0      	adds	r0, r2, r3
 801bf22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bf24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801bf26:	2180      	movs	r1, #128	; 0x80
 801bf28:	0049      	lsls	r1, r1, #1
 801bf2a:	f001 f9cd 	bl	801d2c8 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801bf2e:	f000 f9fd 	bl	801c32c <TRACE_UnLock>

    return TRACE_Send();
 801bf32:	f000 f831 	bl	801bf98 <TRACE_Send>
 801bf36:	0003      	movs	r3, r0
 801bf38:	e003      	b.n	801bf42 <UTIL_ADV_TRACE_COND_FSend+0x116>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801bf3a:	f000 f9f7 	bl	801c32c <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801bf3e:	2303      	movs	r3, #3
 801bf40:	425b      	negs	r3, r3
  buff_size+=(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801bf42:	0018      	movs	r0, r3
 801bf44:	46bd      	mov	sp, r7
 801bf46:	b00c      	add	sp, #48	; 0x30
 801bf48:	bc90      	pop	{r4, r7}
 801bf4a:	bc08      	pop	{r3}
 801bf4c:	b001      	add	sp, #4
 801bf4e:	4718      	bx	r3
 801bf50:	20000f80 	.word	0x20000f80
 801bf54:	20001198 	.word	0x20001198
 801bf58:	20000f98 	.word	0x20000f98

0801bf5c <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801bf5c:	b580      	push	{r7, lr}
 801bf5e:	b082      	sub	sp, #8
 801bf60:	af00      	add	r7, sp, #0
 801bf62:	6078      	str	r0, [r7, #4]
	ADV_TRACE_Ctx.timestamp_func = *cb;
 801bf64:	4b03      	ldr	r3, [pc, #12]	; (801bf74 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801bf66:	687a      	ldr	r2, [r7, #4]
 801bf68:	605a      	str	r2, [r3, #4]
}
 801bf6a:	46c0      	nop			; (mov r8, r8)
 801bf6c:	46bd      	mov	sp, r7
 801bf6e:	b002      	add	sp, #8
 801bf70:	bd80      	pop	{r7, pc}
 801bf72:	46c0      	nop			; (mov r8, r8)
 801bf74:	20000f80 	.word	0x20000f80

0801bf78 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801bf78:	b580      	push	{r7, lr}
 801bf7a:	b082      	sub	sp, #8
 801bf7c:	af00      	add	r7, sp, #0
 801bf7e:	0002      	movs	r2, r0
 801bf80:	1dfb      	adds	r3, r7, #7
 801bf82:	701a      	strb	r2, [r3, #0]
	ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801bf84:	4b03      	ldr	r3, [pc, #12]	; (801bf94 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801bf86:	1dfa      	adds	r2, r7, #7
 801bf88:	7812      	ldrb	r2, [r2, #0]
 801bf8a:	721a      	strb	r2, [r3, #8]
}
 801bf8c:	46c0      	nop			; (mov r8, r8)
 801bf8e:	46bd      	mov	sp, r7
 801bf90:	b002      	add	sp, #8
 801bf92:	bd80      	pop	{r7, pc}
 801bf94:	20000f80 	.word	0x20000f80

0801bf98 <TRACE_Send>:
/**
  * @brief send the data of the trace to low layer
  * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
  */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801bf98:	b590      	push	{r4, r7, lr}
 801bf9a:	b089      	sub	sp, #36	; 0x24
 801bf9c:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;  
 801bf9e:	231f      	movs	r3, #31
 801bfa0:	18fb      	adds	r3, r7, r3
 801bfa2:	2200      	movs	r2, #0
 801bfa4:	701a      	strb	r2, [r3, #0]
  uint8_t *ptr = NULL;
 801bfa6:	2300      	movs	r3, #0
 801bfa8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bfaa:	f3ef 8310 	mrs	r3, PRIMASK
 801bfae:	613b      	str	r3, [r7, #16]
  return(result);
 801bfb0:	693b      	ldr	r3, [r7, #16]
  
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();  
 801bfb2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bfb4:	b672      	cpsid	i
}
 801bfb6:	46c0      	nop			; (mov r8, r8)
  
  if(TRACE_IsLocked() == 0u)
 801bfb8:	f000 f9d4 	bl	801c364 <TRACE_IsLocked>
 801bfbc:	1e03      	subs	r3, r0, #0
 801bfbe:	d160      	bne.n	801c082 <TRACE_Send+0xea>
  {
    TRACE_Lock();
 801bfc0:	f000 f998 	bl	801c2f4 <TRACE_Lock>
	    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send overrun(%d)--\n", ADV_TRACE_Ctx.TraceSentSize);
	    return UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
	}
#endif

    if (ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801bfc4:	4b36      	ldr	r3, [pc, #216]	; (801c0a0 <TRACE_Send+0x108>)
 801bfc6:	8a1a      	ldrh	r2, [r3, #16]
 801bfc8:	4b35      	ldr	r3, [pc, #212]	; (801c0a0 <TRACE_Send+0x108>)
 801bfca:	8a5b      	ldrh	r3, [r3, #18]
 801bfcc:	429a      	cmp	r2, r3
 801bfce:	d050      	beq.n	801c072 <TRACE_Send+0xda>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
   	  if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801bfd0:	4b33      	ldr	r3, [pc, #204]	; (801c0a0 <TRACE_Send+0x108>)
 801bfd2:	789b      	ldrb	r3, [r3, #2]
 801bfd4:	2b01      	cmp	r3, #1
 801bfd6:	d117      	bne.n	801c008 <TRACE_Send+0x70>
   	  {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t)(ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801bfd8:	4b31      	ldr	r3, [pc, #196]	; (801c0a0 <TRACE_Send+0x108>)
 801bfda:	881a      	ldrh	r2, [r3, #0]
 801bfdc:	4b30      	ldr	r3, [pc, #192]	; (801c0a0 <TRACE_Send+0x108>)
 801bfde:	8a1b      	ldrh	r3, [r3, #16]
 801bfe0:	1ad3      	subs	r3, r2, r3
 801bfe2:	b29a      	uxth	r2, r3
 801bfe4:	4b2e      	ldr	r3, [pc, #184]	; (801c0a0 <TRACE_Send+0x108>)
 801bfe6:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801bfe8:	4b2d      	ldr	r3, [pc, #180]	; (801c0a0 <TRACE_Send+0x108>)
 801bfea:	2202      	movs	r2, #2
 801bfec:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801bfee:	4b2c      	ldr	r3, [pc, #176]	; (801c0a0 <TRACE_Send+0x108>)
 801bff0:	2200      	movs	r2, #0
 801bff2:	801a      	strh	r2, [r3, #0]
        
        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n",ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);
        
        if (0u == ADV_TRACE_Ctx.TraceSentSize)
 801bff4:	4b2a      	ldr	r3, [pc, #168]	; (801c0a0 <TRACE_Send+0x108>)
 801bff6:	8a9b      	ldrh	r3, [r3, #20]
 801bff8:	2b00      	cmp	r3, #0
 801bffa:	d105      	bne.n	801c008 <TRACE_Send+0x70>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801bffc:	4b28      	ldr	r3, [pc, #160]	; (801c0a0 <TRACE_Send+0x108>)
 801bffe:	2200      	movs	r2, #0
 801c000:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801c002:	4b27      	ldr	r3, [pc, #156]	; (801c0a0 <TRACE_Send+0x108>)
 801c004:	2200      	movs	r2, #0
 801c006:	821a      	strh	r2, [r3, #16]
        }
   	  }
      
   	  if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801c008:	4b25      	ldr	r3, [pc, #148]	; (801c0a0 <TRACE_Send+0x108>)
 801c00a:	789b      	ldrb	r3, [r3, #2]
 801c00c:	2b00      	cmp	r3, #0
 801c00e:	d116      	bne.n	801c03e <TRACE_Send+0xa6>
   	  {
#endif
   	    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801c010:	4b23      	ldr	r3, [pc, #140]	; (801c0a0 <TRACE_Send+0x108>)
 801c012:	8a5a      	ldrh	r2, [r3, #18]
 801c014:	4b22      	ldr	r3, [pc, #136]	; (801c0a0 <TRACE_Send+0x108>)
 801c016:	8a1b      	ldrh	r3, [r3, #16]
 801c018:	429a      	cmp	r2, r3
 801c01a:	d908      	bls.n	801c02e <TRACE_Send+0x96>
        {
   	    	ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801c01c:	4b20      	ldr	r3, [pc, #128]	; (801c0a0 <TRACE_Send+0x108>)
 801c01e:	8a5a      	ldrh	r2, [r3, #18]
 801c020:	4b1f      	ldr	r3, [pc, #124]	; (801c0a0 <TRACE_Send+0x108>)
 801c022:	8a1b      	ldrh	r3, [r3, #16]
 801c024:	1ad3      	subs	r3, r2, r3
 801c026:	b29a      	uxth	r2, r3
 801c028:	4b1d      	ldr	r3, [pc, #116]	; (801c0a0 <TRACE_Send+0x108>)
 801c02a:	829a      	strh	r2, [r3, #20]
 801c02c:	e007      	b.n	801c03e <TRACE_Send+0xa6>
        }
        else  /* TraceRdPtr > TraceWrPtr */
        {
        	ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801c02e:	4b1c      	ldr	r3, [pc, #112]	; (801c0a0 <TRACE_Send+0x108>)
 801c030:	8a1b      	ldrh	r3, [r3, #16]
 801c032:	2280      	movs	r2, #128	; 0x80
 801c034:	0092      	lsls	r2, r2, #2
 801c036:	1ad3      	subs	r3, r2, r3
 801c038:	b29a      	uxth	r2, r3
 801c03a:	4b19      	ldr	r3, [pc, #100]	; (801c0a0 <TRACE_Send+0x108>)
 801c03c:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801c03e:	4b18      	ldr	r3, [pc, #96]	; (801c0a0 <TRACE_Send+0x108>)
 801c040:	8a1b      	ldrh	r3, [r3, #16]
 801c042:	001a      	movs	r2, r3
 801c044:	4b17      	ldr	r3, [pc, #92]	; (801c0a4 <TRACE_Send+0x10c>)
 801c046:	18d3      	adds	r3, r2, r3
 801c048:	61bb      	str	r3, [r7, #24]
 801c04a:	697b      	ldr	r3, [r7, #20]
 801c04c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c04e:	68fb      	ldr	r3, [r7, #12]
 801c050:	f383 8810 	msr	PRIMASK, r3
}
 801c054:	46c0      	nop			; (mov r8, r8)

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook(); 
 801c056:	f7e9 f84b 	bl	80050f0 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n",ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801c05a:	4b13      	ldr	r3, [pc, #76]	; (801c0a8 <TRACE_Send+0x110>)
 801c05c:	68db      	ldr	r3, [r3, #12]
 801c05e:	4a10      	ldr	r2, [pc, #64]	; (801c0a0 <TRACE_Send+0x108>)
 801c060:	8a91      	ldrh	r1, [r2, #20]
 801c062:	221f      	movs	r2, #31
 801c064:	18bc      	adds	r4, r7, r2
 801c066:	69ba      	ldr	r2, [r7, #24]
 801c068:	0010      	movs	r0, r2
 801c06a:	4798      	blx	r3
 801c06c:	0003      	movs	r3, r0
 801c06e:	7023      	strb	r3, [r4, #0]
 801c070:	e00d      	b.n	801c08e <TRACE_Send+0xf6>
    }
    else
    {
      TRACE_UnLock();
 801c072:	f000 f95b 	bl	801c32c <TRACE_UnLock>
 801c076:	697b      	ldr	r3, [r7, #20]
 801c078:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c07a:	68bb      	ldr	r3, [r7, #8]
 801c07c:	f383 8810 	msr	PRIMASK, r3
}
 801c080:	e005      	b.n	801c08e <TRACE_Send+0xf6>
 801c082:	697b      	ldr	r3, [r7, #20]
 801c084:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c086:	687b      	ldr	r3, [r7, #4]
 801c088:	f383 8810 	msr	PRIMASK, r3
}
 801c08c:	46c0      	nop			; (mov r8, r8)
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();  
  }
  
  return ret;
 801c08e:	231f      	movs	r3, #31
 801c090:	18fb      	adds	r3, r7, r3
 801c092:	781b      	ldrb	r3, [r3, #0]
 801c094:	b25b      	sxtb	r3, r3
}
 801c096:	0018      	movs	r0, r3
 801c098:	46bd      	mov	sp, r7
 801c09a:	b009      	add	sp, #36	; 0x24
 801c09c:	bd90      	pop	{r4, r7, pc}
 801c09e:	46c0      	nop			; (mov r8, r8)
 801c0a0:	20000f80 	.word	0x20000f80
 801c0a4:	20000f98 	.word	0x20000f98
 801c0a8:	0801ee94 	.word	0x0801ee94

0801c0ac <TRACE_TxCpltCallback>:
  * @brief Tx callback called by the low layer level to inform a transfer complete
  * @param Ptr pointer not used only for HAL compatibility
  * @retval none
  */
static void TRACE_TxCpltCallback(void *Ptr)
{ 
 801c0ac:	b580      	push	{r7, lr}
 801c0ae:	b086      	sub	sp, #24
 801c0b0:	af00      	add	r7, sp, #0
 801c0b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c0b4:	f3ef 8310 	mrs	r3, PRIMASK
 801c0b8:	613b      	str	r3, [r7, #16]
  return(result);
 801c0ba:	693b      	ldr	r3, [r7, #16]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c0bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c0be:	b672      	cpsid	i
}
 801c0c0:	46c0      	nop			; (mov r8, r8)
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif
  
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801c0c2:	4b3c      	ldr	r3, [pc, #240]	; (801c1b4 <TRACE_TxCpltCallback+0x108>)
 801c0c4:	789b      	ldrb	r3, [r3, #2]
 801c0c6:	2b02      	cmp	r3, #2
 801c0c8:	d106      	bne.n	801c0d8 <TRACE_TxCpltCallback+0x2c>
  {
	  ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801c0ca:	4b3a      	ldr	r3, [pc, #232]	; (801c1b4 <TRACE_TxCpltCallback+0x108>)
 801c0cc:	2200      	movs	r2, #0
 801c0ce:	709a      	strb	r2, [r3, #2]
	  ADV_TRACE_Ctx.TraceRdPtr = 0;
 801c0d0:	4b38      	ldr	r3, [pc, #224]	; (801c1b4 <TRACE_TxCpltCallback+0x108>)
 801c0d2:	2200      	movs	r2, #0
 801c0d4:	821a      	strh	r2, [r3, #16]
 801c0d6:	e00a      	b.n	801c0ee <TRACE_TxCpltCallback+0x42>
	  UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
	  ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801c0d8:	4b36      	ldr	r3, [pc, #216]	; (801c1b4 <TRACE_TxCpltCallback+0x108>)
 801c0da:	8a1a      	ldrh	r2, [r3, #16]
 801c0dc:	4b35      	ldr	r3, [pc, #212]	; (801c1b4 <TRACE_TxCpltCallback+0x108>)
 801c0de:	8a9b      	ldrh	r3, [r3, #20]
 801c0e0:	18d3      	adds	r3, r2, r3
 801c0e2:	b29b      	uxth	r3, r3
 801c0e4:	05db      	lsls	r3, r3, #23
 801c0e6:	0ddb      	lsrs	r3, r3, #23
 801c0e8:	b29a      	uxth	r2, r3
 801c0ea:	4b32      	ldr	r3, [pc, #200]	; (801c1b4 <TRACE_TxCpltCallback+0x108>)
 801c0ec:	821a      	strh	r2, [r3, #16]
		UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
	}
#endif
  
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801c0ee:	4b31      	ldr	r3, [pc, #196]	; (801c1b4 <TRACE_TxCpltCallback+0x108>)
 801c0f0:	8a1a      	ldrh	r2, [r3, #16]
 801c0f2:	4b30      	ldr	r3, [pc, #192]	; (801c1b4 <TRACE_TxCpltCallback+0x108>)
 801c0f4:	8a5b      	ldrh	r3, [r3, #18]
 801c0f6:	429a      	cmp	r2, r3
 801c0f8:	d04c      	beq.n	801c194 <TRACE_TxCpltCallback+0xe8>
 801c0fa:	4b2e      	ldr	r3, [pc, #184]	; (801c1b4 <TRACE_TxCpltCallback+0x108>)
 801c0fc:	8adb      	ldrh	r3, [r3, #22]
 801c0fe:	2b01      	cmp	r3, #1
 801c100:	d148      	bne.n	801c194 <TRACE_TxCpltCallback+0xe8>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801c102:	4b2c      	ldr	r3, [pc, #176]	; (801c1b4 <TRACE_TxCpltCallback+0x108>)
 801c104:	789b      	ldrb	r3, [r3, #2]
 801c106:	2b01      	cmp	r3, #1
 801c108:	d117      	bne.n	801c13a <TRACE_TxCpltCallback+0x8e>
    {
   		ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801c10a:	4b2a      	ldr	r3, [pc, #168]	; (801c1b4 <TRACE_TxCpltCallback+0x108>)
 801c10c:	881a      	ldrh	r2, [r3, #0]
 801c10e:	4b29      	ldr	r3, [pc, #164]	; (801c1b4 <TRACE_TxCpltCallback+0x108>)
 801c110:	8a1b      	ldrh	r3, [r3, #16]
 801c112:	1ad3      	subs	r3, r2, r3
 801c114:	b29a      	uxth	r2, r3
 801c116:	4b27      	ldr	r3, [pc, #156]	; (801c1b4 <TRACE_TxCpltCallback+0x108>)
 801c118:	829a      	strh	r2, [r3, #20]
   		ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801c11a:	4b26      	ldr	r3, [pc, #152]	; (801c1b4 <TRACE_TxCpltCallback+0x108>)
 801c11c:	2202      	movs	r2, #2
 801c11e:	709a      	strb	r2, [r3, #2]
   		ADV_TRACE_Ctx.unchunk_enabled = 0;
 801c120:	4b24      	ldr	r3, [pc, #144]	; (801c1b4 <TRACE_TxCpltCallback+0x108>)
 801c122:	2200      	movs	r2, #0
 801c124:	801a      	strh	r2, [r3, #0]
      
    	UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n",ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);
      
    	if (0u == ADV_TRACE_Ctx.TraceSentSize)
 801c126:	4b23      	ldr	r3, [pc, #140]	; (801c1b4 <TRACE_TxCpltCallback+0x108>)
 801c128:	8a9b      	ldrh	r3, [r3, #20]
 801c12a:	2b00      	cmp	r3, #0
 801c12c:	d105      	bne.n	801c13a <TRACE_TxCpltCallback+0x8e>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801c12e:	4b21      	ldr	r3, [pc, #132]	; (801c1b4 <TRACE_TxCpltCallback+0x108>)
 801c130:	2200      	movs	r2, #0
 801c132:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801c134:	4b1f      	ldr	r3, [pc, #124]	; (801c1b4 <TRACE_TxCpltCallback+0x108>)
 801c136:	2200      	movs	r2, #0
 801c138:	821a      	strh	r2, [r3, #16]
      }
    }
    
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801c13a:	4b1e      	ldr	r3, [pc, #120]	; (801c1b4 <TRACE_TxCpltCallback+0x108>)
 801c13c:	789b      	ldrb	r3, [r3, #2]
 801c13e:	2b00      	cmp	r3, #0
 801c140:	d116      	bne.n	801c170 <TRACE_TxCpltCallback+0xc4>
    {
#endif
      if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801c142:	4b1c      	ldr	r3, [pc, #112]	; (801c1b4 <TRACE_TxCpltCallback+0x108>)
 801c144:	8a5a      	ldrh	r2, [r3, #18]
 801c146:	4b1b      	ldr	r3, [pc, #108]	; (801c1b4 <TRACE_TxCpltCallback+0x108>)
 801c148:	8a1b      	ldrh	r3, [r3, #16]
 801c14a:	429a      	cmp	r2, r3
 801c14c:	d908      	bls.n	801c160 <TRACE_TxCpltCallback+0xb4>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801c14e:	4b19      	ldr	r3, [pc, #100]	; (801c1b4 <TRACE_TxCpltCallback+0x108>)
 801c150:	8a5a      	ldrh	r2, [r3, #18]
 801c152:	4b18      	ldr	r3, [pc, #96]	; (801c1b4 <TRACE_TxCpltCallback+0x108>)
 801c154:	8a1b      	ldrh	r3, [r3, #16]
 801c156:	1ad3      	subs	r3, r2, r3
 801c158:	b29a      	uxth	r2, r3
 801c15a:	4b16      	ldr	r3, [pc, #88]	; (801c1b4 <TRACE_TxCpltCallback+0x108>)
 801c15c:	829a      	strh	r2, [r3, #20]
 801c15e:	e007      	b.n	801c170 <TRACE_TxCpltCallback+0xc4>
      }
      else  /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801c160:	4b14      	ldr	r3, [pc, #80]	; (801c1b4 <TRACE_TxCpltCallback+0x108>)
 801c162:	8a1b      	ldrh	r3, [r3, #16]
 801c164:	2280      	movs	r2, #128	; 0x80
 801c166:	0092      	lsls	r2, r2, #2
 801c168:	1ad3      	subs	r3, r2, r3
 801c16a:	b29a      	uxth	r2, r3
 801c16c:	4b11      	ldr	r3, [pc, #68]	; (801c1b4 <TRACE_TxCpltCallback+0x108>)
 801c16e:	829a      	strh	r2, [r3, #20]
 801c170:	697b      	ldr	r3, [r7, #20]
 801c172:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c174:	68fb      	ldr	r3, [r7, #12]
 801c176:	f383 8810 	msr	PRIMASK, r3
}
 801c17a:	46c0      	nop			; (mov r8, r8)
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION(); 
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(&ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr], ADV_TRACE_Ctx.TraceSentSize);
 801c17c:	4b0e      	ldr	r3, [pc, #56]	; (801c1b8 <TRACE_TxCpltCallback+0x10c>)
 801c17e:	68db      	ldr	r3, [r3, #12]
 801c180:	4a0c      	ldr	r2, [pc, #48]	; (801c1b4 <TRACE_TxCpltCallback+0x108>)
 801c182:	8a12      	ldrh	r2, [r2, #16]
 801c184:	0011      	movs	r1, r2
 801c186:	4a0d      	ldr	r2, [pc, #52]	; (801c1bc <TRACE_TxCpltCallback+0x110>)
 801c188:	1888      	adds	r0, r1, r2
 801c18a:	4a0a      	ldr	r2, [pc, #40]	; (801c1b4 <TRACE_TxCpltCallback+0x108>)
 801c18c:	8a92      	ldrh	r2, [r2, #20]
 801c18e:	0011      	movs	r1, r2
 801c190:	4798      	blx	r3
 801c192:	e00a      	b.n	801c1aa <TRACE_TxCpltCallback+0xfe>
  }
  else
  {
    UTIL_ADV_TRACE_PostSendHook();      
 801c194:	f7e8 ffb5 	bl	8005102 <UTIL_ADV_TRACE_PostSendHook>
 801c198:	697b      	ldr	r3, [r7, #20]
 801c19a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c19c:	68bb      	ldr	r3, [r7, #8]
 801c19e:	f383 8810 	msr	PRIMASK, r3
}
 801c1a2:	46c0      	nop			; (mov r8, r8)
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION(); 
    TRACE_UnLock();
 801c1a4:	f000 f8c2 	bl	801c32c <TRACE_UnLock>
  }
}
 801c1a8:	46c0      	nop			; (mov r8, r8)
 801c1aa:	46c0      	nop			; (mov r8, r8)
 801c1ac:	46bd      	mov	sp, r7
 801c1ae:	b006      	add	sp, #24
 801c1b0:	bd80      	pop	{r7, pc}
 801c1b2:	46c0      	nop			; (mov r8, r8)
 801c1b4:	20000f80 	.word	0x20000f80
 801c1b8:	0801ee94 	.word	0x0801ee94
 801c1bc:	20000f98 	.word	0x20000f98

0801c1c0 <TRACE_AllocateBufer>:
  * @param  Size to allocate within fifo
  * @param  Pos position within the fifo
  * @retval write position inside the buffer is -1 no space available.
  */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801c1c0:	b580      	push	{r7, lr}
 801c1c2:	b086      	sub	sp, #24
 801c1c4:	af00      	add	r7, sp, #0
 801c1c6:	0002      	movs	r2, r0
 801c1c8:	6039      	str	r1, [r7, #0]
 801c1ca:	1dbb      	adds	r3, r7, #6
 801c1cc:	801a      	strh	r2, [r3, #0]
  uint16_t freesize;
  int16_t ret = -1;
 801c1ce:	2314      	movs	r3, #20
 801c1d0:	18fb      	adds	r3, r7, r3
 801c1d2:	2201      	movs	r2, #1
 801c1d4:	4252      	negs	r2, r2
 801c1d6:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c1d8:	f3ef 8310 	mrs	r3, PRIMASK
 801c1dc:	60fb      	str	r3, [r7, #12]
  return(result);
 801c1de:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c1e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801c1e2:	b672      	cpsid	i
}
 801c1e4:	46c0      	nop			; (mov r8, r8)

  if (ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801c1e6:	4b42      	ldr	r3, [pc, #264]	; (801c2f0 <TRACE_AllocateBufer+0x130>)
 801c1e8:	8a5a      	ldrh	r2, [r3, #18]
 801c1ea:	4b41      	ldr	r3, [pc, #260]	; (801c2f0 <TRACE_AllocateBufer+0x130>)
 801c1ec:	8a1b      	ldrh	r3, [r3, #16]
 801c1ee:	429a      	cmp	r2, r3
 801c1f0:	d123      	bne.n	801c23a <TRACE_AllocateBufer+0x7a>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801c1f2:	4b3f      	ldr	r3, [pc, #252]	; (801c2f0 <TRACE_AllocateBufer+0x130>)
 801c1f4:	8a5a      	ldrh	r2, [r3, #18]
 801c1f6:	2016      	movs	r0, #22
 801c1f8:	183b      	adds	r3, r7, r0
 801c1fa:	2180      	movs	r1, #128	; 0x80
 801c1fc:	0089      	lsls	r1, r1, #2
 801c1fe:	1a8a      	subs	r2, r1, r2
 801c200:	801a      	strh	r2, [r3, #0]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801c202:	1dba      	adds	r2, r7, #6
 801c204:	0001      	movs	r1, r0
 801c206:	187b      	adds	r3, r7, r1
 801c208:	8812      	ldrh	r2, [r2, #0]
 801c20a:	881b      	ldrh	r3, [r3, #0]
 801c20c:	429a      	cmp	r2, r3
 801c20e:	d346      	bcc.n	801c29e <TRACE_AllocateBufer+0xde>
 801c210:	4b37      	ldr	r3, [pc, #220]	; (801c2f0 <TRACE_AllocateBufer+0x130>)
 801c212:	8a1b      	ldrh	r3, [r3, #16]
 801c214:	1dba      	adds	r2, r7, #6
 801c216:	8812      	ldrh	r2, [r2, #0]
 801c218:	429a      	cmp	r2, r3
 801c21a:	d240      	bcs.n	801c29e <TRACE_AllocateBufer+0xde>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801c21c:	4b34      	ldr	r3, [pc, #208]	; (801c2f0 <TRACE_AllocateBufer+0x130>)
 801c21e:	2201      	movs	r2, #1
 801c220:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801c222:	4b33      	ldr	r3, [pc, #204]	; (801c2f0 <TRACE_AllocateBufer+0x130>)
 801c224:	8a5a      	ldrh	r2, [r3, #18]
 801c226:	4b32      	ldr	r3, [pc, #200]	; (801c2f0 <TRACE_AllocateBufer+0x130>)
 801c228:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801c22a:	187b      	adds	r3, r7, r1
 801c22c:	4a30      	ldr	r2, [pc, #192]	; (801c2f0 <TRACE_AllocateBufer+0x130>)
 801c22e:	8a12      	ldrh	r2, [r2, #16]
 801c230:	801a      	strh	r2, [r3, #0]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801c232:	4b2f      	ldr	r3, [pc, #188]	; (801c2f0 <TRACE_AllocateBufer+0x130>)
 801c234:	2200      	movs	r2, #0
 801c236:	825a      	strh	r2, [r3, #18]
 801c238:	e031      	b.n	801c29e <TRACE_AllocateBufer+0xde>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801c23a:	4b2d      	ldr	r3, [pc, #180]	; (801c2f0 <TRACE_AllocateBufer+0x130>)
 801c23c:	8a5a      	ldrh	r2, [r3, #18]
 801c23e:	4b2c      	ldr	r3, [pc, #176]	; (801c2f0 <TRACE_AllocateBufer+0x130>)
 801c240:	8a1b      	ldrh	r3, [r3, #16]
 801c242:	429a      	cmp	r2, r3
 801c244:	d923      	bls.n	801c28e <TRACE_AllocateBufer+0xce>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801c246:	4b2a      	ldr	r3, [pc, #168]	; (801c2f0 <TRACE_AllocateBufer+0x130>)
 801c248:	8a5a      	ldrh	r2, [r3, #18]
 801c24a:	2016      	movs	r0, #22
 801c24c:	183b      	adds	r3, r7, r0
 801c24e:	2180      	movs	r1, #128	; 0x80
 801c250:	0089      	lsls	r1, r1, #2
 801c252:	1a8a      	subs	r2, r1, r2
 801c254:	801a      	strh	r2, [r3, #0]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801c256:	1dba      	adds	r2, r7, #6
 801c258:	0001      	movs	r1, r0
 801c25a:	187b      	adds	r3, r7, r1
 801c25c:	8812      	ldrh	r2, [r2, #0]
 801c25e:	881b      	ldrh	r3, [r3, #0]
 801c260:	429a      	cmp	r2, r3
 801c262:	d31c      	bcc.n	801c29e <TRACE_AllocateBufer+0xde>
 801c264:	4b22      	ldr	r3, [pc, #136]	; (801c2f0 <TRACE_AllocateBufer+0x130>)
 801c266:	8a1b      	ldrh	r3, [r3, #16]
 801c268:	1dba      	adds	r2, r7, #6
 801c26a:	8812      	ldrh	r2, [r2, #0]
 801c26c:	429a      	cmp	r2, r3
 801c26e:	d216      	bcs.n	801c29e <TRACE_AllocateBufer+0xde>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801c270:	4b1f      	ldr	r3, [pc, #124]	; (801c2f0 <TRACE_AllocateBufer+0x130>)
 801c272:	2201      	movs	r2, #1
 801c274:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801c276:	4b1e      	ldr	r3, [pc, #120]	; (801c2f0 <TRACE_AllocateBufer+0x130>)
 801c278:	8a5a      	ldrh	r2, [r3, #18]
 801c27a:	4b1d      	ldr	r3, [pc, #116]	; (801c2f0 <TRACE_AllocateBufer+0x130>)
 801c27c:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801c27e:	187b      	adds	r3, r7, r1
 801c280:	4a1b      	ldr	r2, [pc, #108]	; (801c2f0 <TRACE_AllocateBufer+0x130>)
 801c282:	8a12      	ldrh	r2, [r2, #16]
 801c284:	801a      	strh	r2, [r3, #0]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801c286:	4b1a      	ldr	r3, [pc, #104]	; (801c2f0 <TRACE_AllocateBufer+0x130>)
 801c288:	2200      	movs	r2, #0
 801c28a:	825a      	strh	r2, [r3, #18]
 801c28c:	e007      	b.n	801c29e <TRACE_AllocateBufer+0xde>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801c28e:	4b18      	ldr	r3, [pc, #96]	; (801c2f0 <TRACE_AllocateBufer+0x130>)
 801c290:	8a19      	ldrh	r1, [r3, #16]
 801c292:	4b17      	ldr	r3, [pc, #92]	; (801c2f0 <TRACE_AllocateBufer+0x130>)
 801c294:	8a5a      	ldrh	r2, [r3, #18]
 801c296:	2316      	movs	r3, #22
 801c298:	18fb      	adds	r3, r7, r3
 801c29a:	1a8a      	subs	r2, r1, r2
 801c29c:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }
  
  if (freesize > Size)
 801c29e:	2316      	movs	r3, #22
 801c2a0:	18fa      	adds	r2, r7, r3
 801c2a2:	1dbb      	adds	r3, r7, #6
 801c2a4:	8812      	ldrh	r2, [r2, #0]
 801c2a6:	881b      	ldrh	r3, [r3, #0]
 801c2a8:	429a      	cmp	r2, r3
 801c2aa:	d912      	bls.n	801c2d2 <TRACE_AllocateBufer+0x112>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801c2ac:	4b10      	ldr	r3, [pc, #64]	; (801c2f0 <TRACE_AllocateBufer+0x130>)
 801c2ae:	8a5a      	ldrh	r2, [r3, #18]
 801c2b0:	683b      	ldr	r3, [r7, #0]
 801c2b2:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801c2b4:	4b0e      	ldr	r3, [pc, #56]	; (801c2f0 <TRACE_AllocateBufer+0x130>)
 801c2b6:	8a5a      	ldrh	r2, [r3, #18]
 801c2b8:	1dbb      	adds	r3, r7, #6
 801c2ba:	881b      	ldrh	r3, [r3, #0]
 801c2bc:	18d3      	adds	r3, r2, r3
 801c2be:	b29b      	uxth	r3, r3
 801c2c0:	05db      	lsls	r3, r3, #23
 801c2c2:	0ddb      	lsrs	r3, r3, #23
 801c2c4:	b29a      	uxth	r2, r3
 801c2c6:	4b0a      	ldr	r3, [pc, #40]	; (801c2f0 <TRACE_AllocateBufer+0x130>)
 801c2c8:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801c2ca:	2314      	movs	r3, #20
 801c2cc:	18fb      	adds	r3, r7, r3
 801c2ce:	2200      	movs	r2, #0
 801c2d0:	801a      	strh	r2, [r3, #0]
 801c2d2:	693b      	ldr	r3, [r7, #16]
 801c2d4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c2d6:	68bb      	ldr	r3, [r7, #8]
 801c2d8:	f383 8810 	msr	PRIMASK, r3
}
 801c2dc:	46c0      	nop			; (mov r8, r8)
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_AllocateBufer(%d-%d::%d-%d)--\n",freesize - Size, Size, ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceWrPtr);
#endif
  }

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();  
  return ret;
 801c2de:	2314      	movs	r3, #20
 801c2e0:	18fb      	adds	r3, r7, r3
 801c2e2:	2200      	movs	r2, #0
 801c2e4:	5e9b      	ldrsh	r3, [r3, r2]
}
 801c2e6:	0018      	movs	r0, r3
 801c2e8:	46bd      	mov	sp, r7
 801c2ea:	b006      	add	sp, #24
 801c2ec:	bd80      	pop	{r7, pc}
 801c2ee:	46c0      	nop			; (mov r8, r8)
 801c2f0:	20000f80 	.word	0x20000f80

0801c2f4 <TRACE_Lock>:
/**
  * @brief  Lock the trace buffer.
  * @retval None.
  */
static void TRACE_Lock(void)
{
 801c2f4:	b580      	push	{r7, lr}
 801c2f6:	b084      	sub	sp, #16
 801c2f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c2fa:	f3ef 8310 	mrs	r3, PRIMASK
 801c2fe:	607b      	str	r3, [r7, #4]
  return(result);
 801c300:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c302:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801c304:	b672      	cpsid	i
}
 801c306:	46c0      	nop			; (mov r8, r8)
  ADV_TRACE_Ctx.TraceLock++;
 801c308:	4b07      	ldr	r3, [pc, #28]	; (801c328 <TRACE_Lock+0x34>)
 801c30a:	8adb      	ldrh	r3, [r3, #22]
 801c30c:	3301      	adds	r3, #1
 801c30e:	b29a      	uxth	r2, r3
 801c310:	4b05      	ldr	r3, [pc, #20]	; (801c328 <TRACE_Lock+0x34>)
 801c312:	82da      	strh	r2, [r3, #22]
 801c314:	68fb      	ldr	r3, [r7, #12]
 801c316:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c318:	68bb      	ldr	r3, [r7, #8]
 801c31a:	f383 8810 	msr	PRIMASK, r3
}
 801c31e:	46c0      	nop			; (mov r8, r8)
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801c320:	46c0      	nop			; (mov r8, r8)
 801c322:	46bd      	mov	sp, r7
 801c324:	b004      	add	sp, #16
 801c326:	bd80      	pop	{r7, pc}
 801c328:	20000f80 	.word	0x20000f80

0801c32c <TRACE_UnLock>:
/**
  * @brief  UnLock the trace buffer.
  * @retval None.
  */
static void TRACE_UnLock(void)
{
 801c32c:	b580      	push	{r7, lr}
 801c32e:	b084      	sub	sp, #16
 801c330:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c332:	f3ef 8310 	mrs	r3, PRIMASK
 801c336:	607b      	str	r3, [r7, #4]
  return(result);
 801c338:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c33a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801c33c:	b672      	cpsid	i
}
 801c33e:	46c0      	nop			; (mov r8, r8)
  ADV_TRACE_Ctx.TraceLock--;
 801c340:	4b07      	ldr	r3, [pc, #28]	; (801c360 <TRACE_UnLock+0x34>)
 801c342:	8adb      	ldrh	r3, [r3, #22]
 801c344:	3b01      	subs	r3, #1
 801c346:	b29a      	uxth	r2, r3
 801c348:	4b05      	ldr	r3, [pc, #20]	; (801c360 <TRACE_UnLock+0x34>)
 801c34a:	82da      	strh	r2, [r3, #22]
 801c34c:	68fb      	ldr	r3, [r7, #12]
 801c34e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c350:	68bb      	ldr	r3, [r7, #8]
 801c352:	f383 8810 	msr	PRIMASK, r3
}
 801c356:	46c0      	nop			; (mov r8, r8)
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801c358:	46c0      	nop			; (mov r8, r8)
 801c35a:	46bd      	mov	sp, r7
 801c35c:	b004      	add	sp, #16
 801c35e:	bd80      	pop	{r7, pc}
 801c360:	20000f80 	.word	0x20000f80

0801c364 <TRACE_IsLocked>:
/**
  * @brief  UnLock the trace buffer.
  * @retval None.
  */
static uint32_t TRACE_IsLocked(void)
{
 801c364:	b580      	push	{r7, lr}
 801c366:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801c368:	4b03      	ldr	r3, [pc, #12]	; (801c378 <TRACE_IsLocked+0x14>)
 801c36a:	8adb      	ldrh	r3, [r3, #22]
 801c36c:	1e5a      	subs	r2, r3, #1
 801c36e:	4193      	sbcs	r3, r2
 801c370:	b2db      	uxtb	r3, r3
}
 801c372:	0018      	movs	r0, r3
 801c374:	46bd      	mov	sp, r7
 801c376:	bd80      	pop	{r7, pc}
 801c378:	20000f80 	.word	0x20000f80

0801c37c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801c37c:	b580      	push	{r7, lr}
 801c37e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801c380:	4b04      	ldr	r3, [pc, #16]	; (801c394 <UTIL_LPM_Init+0x18>)
 801c382:	2200      	movs	r2, #0
 801c384:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801c386:	4b04      	ldr	r3, [pc, #16]	; (801c398 <UTIL_LPM_Init+0x1c>)
 801c388:	2200      	movs	r2, #0
 801c38a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801c38c:	46c0      	nop			; (mov r8, r8)
 801c38e:	46bd      	mov	sp, r7
 801c390:	bd80      	pop	{r7, pc}
 801c392:	46c0      	nop			; (mov r8, r8)
 801c394:	20001298 	.word	0x20001298
 801c398:	2000129c 	.word	0x2000129c

0801c39c <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801c39c:	b580      	push	{r7, lr}
 801c39e:	b086      	sub	sp, #24
 801c3a0:	af00      	add	r7, sp, #0
 801c3a2:	6078      	str	r0, [r7, #4]
 801c3a4:	000a      	movs	r2, r1
 801c3a6:	1cfb      	adds	r3, r7, #3
 801c3a8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c3aa:	f3ef 8310 	mrs	r3, PRIMASK
 801c3ae:	613b      	str	r3, [r7, #16]
  return(result);
 801c3b0:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801c3b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c3b4:	b672      	cpsid	i
}
 801c3b6:	46c0      	nop			; (mov r8, r8)
  
  switch( state )
 801c3b8:	1cfb      	adds	r3, r7, #3
 801c3ba:	781b      	ldrb	r3, [r3, #0]
 801c3bc:	2b00      	cmp	r3, #0
 801c3be:	d008      	beq.n	801c3d2 <UTIL_LPM_SetStopMode+0x36>
 801c3c0:	2b01      	cmp	r3, #1
 801c3c2:	d10e      	bne.n	801c3e2 <UTIL_LPM_SetStopMode+0x46>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801c3c4:	4b0c      	ldr	r3, [pc, #48]	; (801c3f8 <UTIL_LPM_SetStopMode+0x5c>)
 801c3c6:	681a      	ldr	r2, [r3, #0]
 801c3c8:	687b      	ldr	r3, [r7, #4]
 801c3ca:	431a      	orrs	r2, r3
 801c3cc:	4b0a      	ldr	r3, [pc, #40]	; (801c3f8 <UTIL_LPM_SetStopMode+0x5c>)
 801c3ce:	601a      	str	r2, [r3, #0]
      break;
 801c3d0:	e008      	b.n	801c3e4 <UTIL_LPM_SetStopMode+0x48>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801c3d2:	687b      	ldr	r3, [r7, #4]
 801c3d4:	43da      	mvns	r2, r3
 801c3d6:	4b08      	ldr	r3, [pc, #32]	; (801c3f8 <UTIL_LPM_SetStopMode+0x5c>)
 801c3d8:	681b      	ldr	r3, [r3, #0]
 801c3da:	401a      	ands	r2, r3
 801c3dc:	4b06      	ldr	r3, [pc, #24]	; (801c3f8 <UTIL_LPM_SetStopMode+0x5c>)
 801c3de:	601a      	str	r2, [r3, #0]
      break;
 801c3e0:	e000      	b.n	801c3e4 <UTIL_LPM_SetStopMode+0x48>
    }
  default :
    {
      break;
 801c3e2:	46c0      	nop			; (mov r8, r8)
 801c3e4:	697b      	ldr	r3, [r7, #20]
 801c3e6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c3e8:	68fb      	ldr	r3, [r7, #12]
 801c3ea:	f383 8810 	msr	PRIMASK, r3
}
 801c3ee:	46c0      	nop			; (mov r8, r8)
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801c3f0:	46c0      	nop			; (mov r8, r8)
 801c3f2:	46bd      	mov	sp, r7
 801c3f4:	b006      	add	sp, #24
 801c3f6:	bd80      	pop	{r7, pc}
 801c3f8:	20001298 	.word	0x20001298

0801c3fc <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801c3fc:	b580      	push	{r7, lr}
 801c3fe:	b086      	sub	sp, #24
 801c400:	af00      	add	r7, sp, #0
 801c402:	6078      	str	r0, [r7, #4]
 801c404:	000a      	movs	r2, r1
 801c406:	1cfb      	adds	r3, r7, #3
 801c408:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c40a:	f3ef 8310 	mrs	r3, PRIMASK
 801c40e:	613b      	str	r3, [r7, #16]
  return(result);
 801c410:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801c412:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c414:	b672      	cpsid	i
}
 801c416:	46c0      	nop			; (mov r8, r8)
  
  switch(state)
 801c418:	1cfb      	adds	r3, r7, #3
 801c41a:	781b      	ldrb	r3, [r3, #0]
 801c41c:	2b00      	cmp	r3, #0
 801c41e:	d008      	beq.n	801c432 <UTIL_LPM_SetOffMode+0x36>
 801c420:	2b01      	cmp	r3, #1
 801c422:	d10e      	bne.n	801c442 <UTIL_LPM_SetOffMode+0x46>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801c424:	4b0c      	ldr	r3, [pc, #48]	; (801c458 <UTIL_LPM_SetOffMode+0x5c>)
 801c426:	681a      	ldr	r2, [r3, #0]
 801c428:	687b      	ldr	r3, [r7, #4]
 801c42a:	431a      	orrs	r2, r3
 801c42c:	4b0a      	ldr	r3, [pc, #40]	; (801c458 <UTIL_LPM_SetOffMode+0x5c>)
 801c42e:	601a      	str	r2, [r3, #0]
      break;
 801c430:	e008      	b.n	801c444 <UTIL_LPM_SetOffMode+0x48>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801c432:	687b      	ldr	r3, [r7, #4]
 801c434:	43da      	mvns	r2, r3
 801c436:	4b08      	ldr	r3, [pc, #32]	; (801c458 <UTIL_LPM_SetOffMode+0x5c>)
 801c438:	681b      	ldr	r3, [r3, #0]
 801c43a:	401a      	ands	r2, r3
 801c43c:	4b06      	ldr	r3, [pc, #24]	; (801c458 <UTIL_LPM_SetOffMode+0x5c>)
 801c43e:	601a      	str	r2, [r3, #0]
      break;
 801c440:	e000      	b.n	801c444 <UTIL_LPM_SetOffMode+0x48>
    }
  default :
    {
      break;
 801c442:	46c0      	nop			; (mov r8, r8)
 801c444:	697b      	ldr	r3, [r7, #20]
 801c446:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c448:	68fb      	ldr	r3, [r7, #12]
 801c44a:	f383 8810 	msr	PRIMASK, r3
}
 801c44e:	46c0      	nop			; (mov r8, r8)
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801c450:	46c0      	nop			; (mov r8, r8)
 801c452:	46bd      	mov	sp, r7
 801c454:	b006      	add	sp, #24
 801c456:	bd80      	pop	{r7, pc}
 801c458:	2000129c 	.word	0x2000129c

0801c45c <UTIL_LPM_GetMode>:

UTIL_LPM_Mode_t UTIL_LPM_GetMode( void )
{
 801c45c:	b580      	push	{r7, lr}
 801c45e:	b084      	sub	sp, #16
 801c460:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c462:	f3ef 8310 	mrs	r3, PRIMASK
 801c466:	607b      	str	r3, [r7, #4]
  return(result);
 801c468:	687b      	ldr	r3, [r7, #4]
  UTIL_LPM_Mode_t mode_selected;

  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801c46a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 801c46c:	b672      	cpsid	i
}
 801c46e:	46c0      	nop			; (mov r8, r8)

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801c470:	4b11      	ldr	r3, [pc, #68]	; (801c4b8 <UTIL_LPM_GetMode+0x5c>)
 801c472:	681b      	ldr	r3, [r3, #0]
 801c474:	2b00      	cmp	r3, #0
 801c476:	d004      	beq.n	801c482 <UTIL_LPM_GetMode+0x26>
  {
    /**
     * At least one user disallows Stop Mode
     */
    mode_selected = UTIL_LPM_SLEEPMODE;
 801c478:	230f      	movs	r3, #15
 801c47a:	18fb      	adds	r3, r7, r3
 801c47c:	2200      	movs	r2, #0
 801c47e:	701a      	strb	r2, [r3, #0]
 801c480:	e00c      	b.n	801c49c <UTIL_LPM_GetMode+0x40>
  }
  else
  {
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801c482:	4b0e      	ldr	r3, [pc, #56]	; (801c4bc <UTIL_LPM_GetMode+0x60>)
 801c484:	681b      	ldr	r3, [r3, #0]
 801c486:	2b00      	cmp	r3, #0
 801c488:	d004      	beq.n	801c494 <UTIL_LPM_GetMode+0x38>
    {
      /**
       * At least one user disallows Off Mode
       */
      mode_selected = UTIL_LPM_STOPMODE;
 801c48a:	230f      	movs	r3, #15
 801c48c:	18fb      	adds	r3, r7, r3
 801c48e:	2201      	movs	r2, #1
 801c490:	701a      	strb	r2, [r3, #0]
 801c492:	e003      	b.n	801c49c <UTIL_LPM_GetMode+0x40>
    }
    else
    {
      mode_selected = UTIL_LPM_OFFMODE;
 801c494:	230f      	movs	r3, #15
 801c496:	18fb      	adds	r3, r7, r3
 801c498:	2202      	movs	r2, #2
 801c49a:	701a      	strb	r2, [r3, #0]
 801c49c:	68bb      	ldr	r3, [r7, #8]
 801c49e:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c4a0:	683b      	ldr	r3, [r7, #0]
 801c4a2:	f383 8810 	msr	PRIMASK, r3
}
 801c4a6:	46c0      	nop			; (mov r8, r8)
    }
  }

  UTIL_LPM_EXIT_CRITICAL_SECTION( );

  return mode_selected;
 801c4a8:	230f      	movs	r3, #15
 801c4aa:	18fb      	adds	r3, r7, r3
 801c4ac:	781b      	ldrb	r3, [r3, #0]
}
 801c4ae:	0018      	movs	r0, r3
 801c4b0:	46bd      	mov	sp, r7
 801c4b2:	b004      	add	sp, #16
 801c4b4:	bd80      	pop	{r7, pc}
 801c4b6:	46c0      	nop			; (mov r8, r8)
 801c4b8:	20001298 	.word	0x20001298
 801c4bc:	2000129c 	.word	0x2000129c

0801c4c0 <UTIL_LPM_EnterLowPower>:

void UTIL_LPM_EnterLowPower( void )
{
 801c4c0:	b580      	push	{r7, lr}
 801c4c2:	b084      	sub	sp, #16
 801c4c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c4c6:	f3ef 8310 	mrs	r3, PRIMASK
 801c4ca:	60bb      	str	r3, [r7, #8]
  return(result);
 801c4cc:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801c4ce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801c4d0:	b672      	cpsid	i
}
 801c4d2:	46c0      	nop			; (mov r8, r8)

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801c4d4:	4b12      	ldr	r3, [pc, #72]	; (801c520 <UTIL_LPM_EnterLowPower+0x60>)
 801c4d6:	681b      	ldr	r3, [r3, #0]
 801c4d8:	2b00      	cmp	r3, #0
 801c4da:	d006      	beq.n	801c4ea <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801c4dc:	4b11      	ldr	r3, [pc, #68]	; (801c524 <UTIL_LPM_EnterLowPower+0x64>)
 801c4de:	681b      	ldr	r3, [r3, #0]
 801c4e0:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801c4e2:	4b10      	ldr	r3, [pc, #64]	; (801c524 <UTIL_LPM_EnterLowPower+0x64>)
 801c4e4:	685b      	ldr	r3, [r3, #4]
 801c4e6:	4798      	blx	r3
 801c4e8:	e010      	b.n	801c50c <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801c4ea:	4b0f      	ldr	r3, [pc, #60]	; (801c528 <UTIL_LPM_EnterLowPower+0x68>)
 801c4ec:	681b      	ldr	r3, [r3, #0]
 801c4ee:	2b00      	cmp	r3, #0
 801c4f0:	d006      	beq.n	801c500 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801c4f2:	4b0c      	ldr	r3, [pc, #48]	; (801c524 <UTIL_LPM_EnterLowPower+0x64>)
 801c4f4:	689b      	ldr	r3, [r3, #8]
 801c4f6:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801c4f8:	4b0a      	ldr	r3, [pc, #40]	; (801c524 <UTIL_LPM_EnterLowPower+0x64>)
 801c4fa:	68db      	ldr	r3, [r3, #12]
 801c4fc:	4798      	blx	r3
 801c4fe:	e005      	b.n	801c50c <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801c500:	4b08      	ldr	r3, [pc, #32]	; (801c524 <UTIL_LPM_EnterLowPower+0x64>)
 801c502:	691b      	ldr	r3, [r3, #16]
 801c504:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801c506:	4b07      	ldr	r3, [pc, #28]	; (801c524 <UTIL_LPM_EnterLowPower+0x64>)
 801c508:	695b      	ldr	r3, [r3, #20]
 801c50a:	4798      	blx	r3
 801c50c:	68fb      	ldr	r3, [r7, #12]
 801c50e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c510:	687b      	ldr	r3, [r7, #4]
 801c512:	f383 8810 	msr	PRIMASK, r3
}
 801c516:	46c0      	nop			; (mov r8, r8)
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801c518:	46c0      	nop			; (mov r8, r8)
 801c51a:	46bd      	mov	sp, r7
 801c51c:	b004      	add	sp, #16
 801c51e:	bd80      	pop	{r7, pc}
 801c520:	20001298 	.word	0x20001298
 801c524:	0801ee64 	.word	0x0801ee64
 801c528:	2000129c 	.word	0x2000129c

0801c52c <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801c52c:	b580      	push	{r7, lr}
 801c52e:	b086      	sub	sp, #24
 801c530:	af00      	add	r7, sp, #0
 801c532:	60f8      	str	r0, [r7, #12]
 801c534:	60b9      	str	r1, [r7, #8]
 801c536:	1dbb      	adds	r3, r7, #6
 801c538:	801a      	strh	r2, [r3, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801c53a:	68fb      	ldr	r3, [r7, #12]
 801c53c:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801c53e:	68bb      	ldr	r3, [r7, #8]
 801c540:	613b      	str	r3, [r7, #16]

  while( size-- )
 801c542:	e007      	b.n	801c554 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801c544:	693a      	ldr	r2, [r7, #16]
 801c546:	1c53      	adds	r3, r2, #1
 801c548:	613b      	str	r3, [r7, #16]
 801c54a:	697b      	ldr	r3, [r7, #20]
 801c54c:	1c59      	adds	r1, r3, #1
 801c54e:	6179      	str	r1, [r7, #20]
 801c550:	7812      	ldrb	r2, [r2, #0]
 801c552:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801c554:	1dbb      	adds	r3, r7, #6
 801c556:	881b      	ldrh	r3, [r3, #0]
 801c558:	1dba      	adds	r2, r7, #6
 801c55a:	1e59      	subs	r1, r3, #1
 801c55c:	8011      	strh	r1, [r2, #0]
 801c55e:	2b00      	cmp	r3, #0
 801c560:	d1f0      	bne.n	801c544 <UTIL_MEM_cpy_8+0x18>
    }
}
 801c562:	46c0      	nop			; (mov r8, r8)
 801c564:	46c0      	nop			; (mov r8, r8)
 801c566:	46bd      	mov	sp, r7
 801c568:	b006      	add	sp, #24
 801c56a:	bd80      	pop	{r7, pc}

0801c56c <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801c56c:	b580      	push	{r7, lr}
 801c56e:	b084      	sub	sp, #16
 801c570:	af00      	add	r7, sp, #0
 801c572:	6078      	str	r0, [r7, #4]
 801c574:	0008      	movs	r0, r1
 801c576:	0011      	movs	r1, r2
 801c578:	1cfb      	adds	r3, r7, #3
 801c57a:	1c02      	adds	r2, r0, #0
 801c57c:	701a      	strb	r2, [r3, #0]
 801c57e:	003b      	movs	r3, r7
 801c580:	1c0a      	adds	r2, r1, #0
 801c582:	801a      	strh	r2, [r3, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801c584:	687b      	ldr	r3, [r7, #4]
 801c586:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801c588:	e005      	b.n	801c596 <UTIL_MEM_set_8+0x2a>
  {
    *dst8++ = value;
 801c58a:	68fb      	ldr	r3, [r7, #12]
 801c58c:	1c5a      	adds	r2, r3, #1
 801c58e:	60fa      	str	r2, [r7, #12]
 801c590:	1cfa      	adds	r2, r7, #3
 801c592:	7812      	ldrb	r2, [r2, #0]
 801c594:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801c596:	003b      	movs	r3, r7
 801c598:	881b      	ldrh	r3, [r3, #0]
 801c59a:	003a      	movs	r2, r7
 801c59c:	1e59      	subs	r1, r3, #1
 801c59e:	8011      	strh	r1, [r2, #0]
 801c5a0:	2b00      	cmp	r3, #0
 801c5a2:	d1f2      	bne.n	801c58a <UTIL_MEM_set_8+0x1e>
  }
}
 801c5a4:	46c0      	nop			; (mov r8, r8)
 801c5a6:	46c0      	nop			; (mov r8, r8)
 801c5a8:	46bd      	mov	sp, r7
 801c5aa:	b004      	add	sp, #16
 801c5ac:	bd80      	pop	{r7, pc}
	...

0801c5b0 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801c5b0:	b580      	push	{r7, lr}
 801c5b2:	b08c      	sub	sp, #48	; 0x30
 801c5b4:	af00      	add	r7, sp, #0
 801c5b6:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801c5b8:	4b66      	ldr	r3, [pc, #408]	; (801c754 <UTIL_SEQ_Run+0x1a4>)
 801c5ba:	681b      	ldr	r3, [r3, #0]
 801c5bc:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 801c5be:	4b65      	ldr	r3, [pc, #404]	; (801c754 <UTIL_SEQ_Run+0x1a4>)
 801c5c0:	681b      	ldr	r3, [r3, #0]
 801c5c2:	687a      	ldr	r2, [r7, #4]
 801c5c4:	401a      	ands	r2, r3
 801c5c6:	4b63      	ldr	r3, [pc, #396]	; (801c754 <UTIL_SEQ_Run+0x1a4>)
 801c5c8:	601a      	str	r2, [r3, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 801c5ca:	e086      	b.n	801c6da <UTIL_SEQ_Run+0x12a>
  {
    counter = 0U;
 801c5cc:	2300      	movs	r3, #0
 801c5ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 801c5d0:	e002      	b.n	801c5d8 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 801c5d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c5d4:	3301      	adds	r3, #1
 801c5d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 801c5d8:	4b5f      	ldr	r3, [pc, #380]	; (801c758 <UTIL_SEQ_Run+0x1a8>)
 801c5da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c5dc:	00d2      	lsls	r2, r2, #3
 801c5de:	58d2      	ldr	r2, [r2, r3]
 801c5e0:	4b5e      	ldr	r3, [pc, #376]	; (801c75c <UTIL_SEQ_Run+0x1ac>)
 801c5e2:	681b      	ldr	r3, [r3, #0]
 801c5e4:	401a      	ands	r2, r3
 801c5e6:	4b5b      	ldr	r3, [pc, #364]	; (801c754 <UTIL_SEQ_Run+0x1a4>)
 801c5e8:	681b      	ldr	r3, [r3, #0]
 801c5ea:	4013      	ands	r3, r2
 801c5ec:	d0f1      	beq.n	801c5d2 <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 801c5ee:	4b5a      	ldr	r3, [pc, #360]	; (801c758 <UTIL_SEQ_Run+0x1a8>)
 801c5f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c5f2:	00d2      	lsls	r2, r2, #3
 801c5f4:	58d2      	ldr	r2, [r2, r3]
 801c5f6:	4b59      	ldr	r3, [pc, #356]	; (801c75c <UTIL_SEQ_Run+0x1ac>)
 801c5f8:	681b      	ldr	r3, [r3, #0]
 801c5fa:	401a      	ands	r2, r3
 801c5fc:	4b55      	ldr	r3, [pc, #340]	; (801c754 <UTIL_SEQ_Run+0x1a4>)
 801c5fe:	681b      	ldr	r3, [r3, #0]
 801c600:	4013      	ands	r3, r2
 801c602:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801c604:	4a54      	ldr	r2, [pc, #336]	; (801c758 <UTIL_SEQ_Run+0x1a8>)
 801c606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c608:	00db      	lsls	r3, r3, #3
 801c60a:	18d3      	adds	r3, r2, r3
 801c60c:	3304      	adds	r3, #4
 801c60e:	681b      	ldr	r3, [r3, #0]
 801c610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c612:	4013      	ands	r3, r2
 801c614:	d107      	bne.n	801c626 <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801c616:	4a50      	ldr	r2, [pc, #320]	; (801c758 <UTIL_SEQ_Run+0x1a8>)
 801c618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c61a:	00db      	lsls	r3, r3, #3
 801c61c:	18d3      	adds	r3, r2, r3
 801c61e:	3304      	adds	r3, #4
 801c620:	2201      	movs	r2, #1
 801c622:	4252      	negs	r2, r2
 801c624:	601a      	str	r2, [r3, #0]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801c626:	4a4c      	ldr	r2, [pc, #304]	; (801c758 <UTIL_SEQ_Run+0x1a8>)
 801c628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c62a:	00db      	lsls	r3, r3, #3
 801c62c:	18d3      	adds	r3, r2, r3
 801c62e:	3304      	adds	r3, #4
 801c630:	681b      	ldr	r3, [r3, #0]
 801c632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c634:	4013      	ands	r3, r2
 801c636:	0018      	movs	r0, r3
 801c638:	f000 f8f6 	bl	801c828 <SEQ_BitPosition>
 801c63c:	0003      	movs	r3, r0
 801c63e:	001a      	movs	r2, r3
 801c640:	4b47      	ldr	r3, [pc, #284]	; (801c760 <UTIL_SEQ_Run+0x1b0>)
 801c642:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801c644:	4a44      	ldr	r2, [pc, #272]	; (801c758 <UTIL_SEQ_Run+0x1a8>)
 801c646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c648:	00db      	lsls	r3, r3, #3
 801c64a:	18d3      	adds	r3, r2, r3
 801c64c:	3304      	adds	r3, #4
 801c64e:	681a      	ldr	r2, [r3, #0]
 801c650:	4b43      	ldr	r3, [pc, #268]	; (801c760 <UTIL_SEQ_Run+0x1b0>)
 801c652:	681b      	ldr	r3, [r3, #0]
 801c654:	2101      	movs	r1, #1
 801c656:	4099      	lsls	r1, r3
 801c658:	000b      	movs	r3, r1
 801c65a:	43db      	mvns	r3, r3
 801c65c:	401a      	ands	r2, r3
 801c65e:	493e      	ldr	r1, [pc, #248]	; (801c758 <UTIL_SEQ_Run+0x1a8>)
 801c660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c662:	00db      	lsls	r3, r3, #3
 801c664:	18cb      	adds	r3, r1, r3
 801c666:	3304      	adds	r3, #4
 801c668:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c66a:	f3ef 8310 	mrs	r3, PRIMASK
 801c66e:	61bb      	str	r3, [r7, #24]
  return(result);
 801c670:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801c672:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801c674:	b672      	cpsid	i
}
 801c676:	46c0      	nop			; (mov r8, r8)
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801c678:	4b39      	ldr	r3, [pc, #228]	; (801c760 <UTIL_SEQ_Run+0x1b0>)
 801c67a:	681b      	ldr	r3, [r3, #0]
 801c67c:	2201      	movs	r2, #1
 801c67e:	409a      	lsls	r2, r3
 801c680:	0013      	movs	r3, r2
 801c682:	43da      	mvns	r2, r3
 801c684:	4b37      	ldr	r3, [pc, #220]	; (801c764 <UTIL_SEQ_Run+0x1b4>)
 801c686:	681b      	ldr	r3, [r3, #0]
 801c688:	401a      	ands	r2, r3
 801c68a:	4b36      	ldr	r3, [pc, #216]	; (801c764 <UTIL_SEQ_Run+0x1b4>)
 801c68c:	601a      	str	r2, [r3, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801c68e:	2302      	movs	r3, #2
 801c690:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c692:	e013      	b.n	801c6bc <UTIL_SEQ_Run+0x10c>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801c694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c696:	1e5a      	subs	r2, r3, #1
 801c698:	4b2f      	ldr	r3, [pc, #188]	; (801c758 <UTIL_SEQ_Run+0x1a8>)
 801c69a:	00d2      	lsls	r2, r2, #3
 801c69c:	58d1      	ldr	r1, [r2, r3]
 801c69e:	4b30      	ldr	r3, [pc, #192]	; (801c760 <UTIL_SEQ_Run+0x1b0>)
 801c6a0:	681b      	ldr	r3, [r3, #0]
 801c6a2:	2201      	movs	r2, #1
 801c6a4:	409a      	lsls	r2, r3
 801c6a6:	0013      	movs	r3, r2
 801c6a8:	43db      	mvns	r3, r3
 801c6aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c6ac:	3a01      	subs	r2, #1
 801c6ae:	4019      	ands	r1, r3
 801c6b0:	4b29      	ldr	r3, [pc, #164]	; (801c758 <UTIL_SEQ_Run+0x1a8>)
 801c6b2:	00d2      	lsls	r2, r2, #3
 801c6b4:	50d1      	str	r1, [r2, r3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801c6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c6b8:	3b01      	subs	r3, #1
 801c6ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c6bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c6be:	2b00      	cmp	r3, #0
 801c6c0:	d1e8      	bne.n	801c694 <UTIL_SEQ_Run+0xe4>
 801c6c2:	6a3b      	ldr	r3, [r7, #32]
 801c6c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c6c6:	697b      	ldr	r3, [r7, #20]
 801c6c8:	f383 8810 	msr	PRIMASK, r3
}
 801c6cc:	46c0      	nop			; (mov r8, r8)
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801c6ce:	4b24      	ldr	r3, [pc, #144]	; (801c760 <UTIL_SEQ_Run+0x1b0>)
 801c6d0:	681a      	ldr	r2, [r3, #0]
 801c6d2:	4b25      	ldr	r3, [pc, #148]	; (801c768 <UTIL_SEQ_Run+0x1b8>)
 801c6d4:	0092      	lsls	r2, r2, #2
 801c6d6:	58d3      	ldr	r3, [r2, r3]
 801c6d8:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 801c6da:	4b22      	ldr	r3, [pc, #136]	; (801c764 <UTIL_SEQ_Run+0x1b4>)
 801c6dc:	681a      	ldr	r2, [r3, #0]
 801c6de:	4b1f      	ldr	r3, [pc, #124]	; (801c75c <UTIL_SEQ_Run+0x1ac>)
 801c6e0:	681b      	ldr	r3, [r3, #0]
 801c6e2:	401a      	ands	r2, r3
 801c6e4:	4b1b      	ldr	r3, [pc, #108]	; (801c754 <UTIL_SEQ_Run+0x1a4>)
 801c6e6:	681b      	ldr	r3, [r3, #0]
 801c6e8:	4013      	ands	r3, r2
 801c6ea:	d006      	beq.n	801c6fa <UTIL_SEQ_Run+0x14a>
 801c6ec:	4b1f      	ldr	r3, [pc, #124]	; (801c76c <UTIL_SEQ_Run+0x1bc>)
 801c6ee:	681a      	ldr	r2, [r3, #0]
 801c6f0:	4b1f      	ldr	r3, [pc, #124]	; (801c770 <UTIL_SEQ_Run+0x1c0>)
 801c6f2:	681b      	ldr	r3, [r3, #0]
 801c6f4:	4013      	ands	r3, r2
 801c6f6:	d100      	bne.n	801c6fa <UTIL_SEQ_Run+0x14a>
 801c6f8:	e768      	b.n	801c5cc <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801c6fa:	4b19      	ldr	r3, [pc, #100]	; (801c760 <UTIL_SEQ_Run+0x1b0>)
 801c6fc:	2201      	movs	r2, #1
 801c6fe:	4252      	negs	r2, r2
 801c700:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801c702:	f000 f887 	bl	801c814 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c706:	f3ef 8310 	mrs	r3, PRIMASK
 801c70a:	613b      	str	r3, [r7, #16]
  return(result);
 801c70c:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801c70e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c710:	b672      	cpsid	i
}
 801c712:	46c0      	nop			; (mov r8, r8)
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 801c714:	4b13      	ldr	r3, [pc, #76]	; (801c764 <UTIL_SEQ_Run+0x1b4>)
 801c716:	681a      	ldr	r2, [r3, #0]
 801c718:	4b10      	ldr	r3, [pc, #64]	; (801c75c <UTIL_SEQ_Run+0x1ac>)
 801c71a:	681b      	ldr	r3, [r3, #0]
 801c71c:	401a      	ands	r2, r3
 801c71e:	4b0d      	ldr	r3, [pc, #52]	; (801c754 <UTIL_SEQ_Run+0x1a4>)
 801c720:	681b      	ldr	r3, [r3, #0]
 801c722:	4013      	ands	r3, r2
 801c724:	d107      	bne.n	801c736 <UTIL_SEQ_Run+0x186>
 801c726:	4b11      	ldr	r3, [pc, #68]	; (801c76c <UTIL_SEQ_Run+0x1bc>)
 801c728:	681a      	ldr	r2, [r3, #0]
 801c72a:	4b11      	ldr	r3, [pc, #68]	; (801c770 <UTIL_SEQ_Run+0x1c0>)
 801c72c:	681b      	ldr	r3, [r3, #0]
 801c72e:	4013      	ands	r3, r2
 801c730:	d101      	bne.n	801c736 <UTIL_SEQ_Run+0x186>
  {
	UTIL_SEQ_Idle( );
 801c732:	f7e8 fb79 	bl	8004e28 <UTIL_SEQ_Idle>
 801c736:	69fb      	ldr	r3, [r7, #28]
 801c738:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c73a:	68fb      	ldr	r3, [r7, #12]
 801c73c:	f383 8810 	msr	PRIMASK, r3
}
 801c740:	46c0      	nop			; (mov r8, r8)
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 801c742:	f000 f86c 	bl	801c81e <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801c746:	4b03      	ldr	r3, [pc, #12]	; (801c754 <UTIL_SEQ_Run+0x1a4>)
 801c748:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c74a:	601a      	str	r2, [r3, #0]

  return;
 801c74c:	46c0      	nop			; (mov r8, r8)
}
 801c74e:	46bd      	mov	sp, r7
 801c750:	b00c      	add	sp, #48	; 0x30
 801c752:	bd80      	pop	{r7, pc}
 801c754:	200001cc 	.word	0x200001cc
 801c758:	20001330 	.word	0x20001330
 801c75c:	200001c8 	.word	0x200001c8
 801c760:	200012ac 	.word	0x200012ac
 801c764:	200012a0 	.word	0x200012a0
 801c768:	200012b0 	.word	0x200012b0
 801c76c:	200012a4 	.word	0x200012a4
 801c770:	200012a8 	.word	0x200012a8

0801c774 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801c774:	b580      	push	{r7, lr}
 801c776:	b088      	sub	sp, #32
 801c778:	af00      	add	r7, sp, #0
 801c77a:	60f8      	str	r0, [r7, #12]
 801c77c:	60b9      	str	r1, [r7, #8]
 801c77e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c780:	f3ef 8310 	mrs	r3, PRIMASK
 801c784:	617b      	str	r3, [r7, #20]
  return(result);
 801c786:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801c788:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c78a:	b672      	cpsid	i
}
 801c78c:	46c0      	nop			; (mov r8, r8)

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801c78e:	68fb      	ldr	r3, [r7, #12]
 801c790:	0018      	movs	r0, r3
 801c792:	f000 f849 	bl	801c828 <SEQ_BitPosition>
 801c796:	0003      	movs	r3, r0
 801c798:	001a      	movs	r2, r3
 801c79a:	4b07      	ldr	r3, [pc, #28]	; (801c7b8 <UTIL_SEQ_RegTask+0x44>)
 801c79c:	0092      	lsls	r2, r2, #2
 801c79e:	6879      	ldr	r1, [r7, #4]
 801c7a0:	50d1      	str	r1, [r2, r3]
 801c7a2:	69fb      	ldr	r3, [r7, #28]
 801c7a4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c7a6:	69bb      	ldr	r3, [r7, #24]
 801c7a8:	f383 8810 	msr	PRIMASK, r3
}
 801c7ac:	46c0      	nop			; (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801c7ae:	46c0      	nop			; (mov r8, r8)
}
 801c7b0:	46bd      	mov	sp, r7
 801c7b2:	b008      	add	sp, #32
 801c7b4:	bd80      	pop	{r7, pc}
 801c7b6:	46c0      	nop			; (mov r8, r8)
 801c7b8:	200012b0 	.word	0x200012b0

0801c7bc <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801c7bc:	b580      	push	{r7, lr}
 801c7be:	b086      	sub	sp, #24
 801c7c0:	af00      	add	r7, sp, #0
 801c7c2:	6078      	str	r0, [r7, #4]
 801c7c4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c7c6:	f3ef 8310 	mrs	r3, PRIMASK
 801c7ca:	60fb      	str	r3, [r7, #12]
  return(result);
 801c7cc:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801c7ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c7d0:	b672      	cpsid	i
}
 801c7d2:	46c0      	nop			; (mov r8, r8)

  TaskSet |= TaskId_bm;
 801c7d4:	4b0d      	ldr	r3, [pc, #52]	; (801c80c <UTIL_SEQ_SetTask+0x50>)
 801c7d6:	681a      	ldr	r2, [r3, #0]
 801c7d8:	687b      	ldr	r3, [r7, #4]
 801c7da:	431a      	orrs	r2, r3
 801c7dc:	4b0b      	ldr	r3, [pc, #44]	; (801c80c <UTIL_SEQ_SetTask+0x50>)
 801c7de:	601a      	str	r2, [r3, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801c7e0:	4b0b      	ldr	r3, [pc, #44]	; (801c810 <UTIL_SEQ_SetTask+0x54>)
 801c7e2:	683a      	ldr	r2, [r7, #0]
 801c7e4:	00d2      	lsls	r2, r2, #3
 801c7e6:	58d2      	ldr	r2, [r2, r3]
 801c7e8:	687b      	ldr	r3, [r7, #4]
 801c7ea:	431a      	orrs	r2, r3
 801c7ec:	0011      	movs	r1, r2
 801c7ee:	4b08      	ldr	r3, [pc, #32]	; (801c810 <UTIL_SEQ_SetTask+0x54>)
 801c7f0:	683a      	ldr	r2, [r7, #0]
 801c7f2:	00d2      	lsls	r2, r2, #3
 801c7f4:	50d1      	str	r1, [r2, r3]
 801c7f6:	697b      	ldr	r3, [r7, #20]
 801c7f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c7fa:	693b      	ldr	r3, [r7, #16]
 801c7fc:	f383 8810 	msr	PRIMASK, r3
}
 801c800:	46c0      	nop			; (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801c802:	46c0      	nop			; (mov r8, r8)
}
 801c804:	46bd      	mov	sp, r7
 801c806:	b006      	add	sp, #24
 801c808:	bd80      	pop	{r7, pc}
 801c80a:	46c0      	nop			; (mov r8, r8)
 801c80c:	200012a0 	.word	0x200012a0
 801c810:	20001330 	.word	0x20001330

0801c814 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801c814:	b580      	push	{r7, lr}
 801c816:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801c818:	46c0      	nop			; (mov r8, r8)
}
 801c81a:	46bd      	mov	sp, r7
 801c81c:	bd80      	pop	{r7, pc}

0801c81e <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801c81e:	b580      	push	{r7, lr}
 801c820:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801c822:	46c0      	nop			; (mov r8, r8)
}
 801c824:	46bd      	mov	sp, r7
 801c826:	bd80      	pop	{r7, pc}

0801c828 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801c828:	b580      	push	{r7, lr}
 801c82a:	b084      	sub	sp, #16
 801c82c:	af00      	add	r7, sp, #0
 801c82e:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 801c830:	210f      	movs	r1, #15
 801c832:	187b      	adds	r3, r7, r1
 801c834:	2200      	movs	r2, #0
 801c836:	701a      	strb	r2, [r3, #0]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 801c838:	687b      	ldr	r3, [r7, #4]
 801c83a:	0c1b      	lsrs	r3, r3, #16
 801c83c:	041b      	lsls	r3, r3, #16
 801c83e:	d105      	bne.n	801c84c <SEQ_BitPosition+0x24>
 801c840:	187b      	adds	r3, r7, r1
 801c842:	2210      	movs	r2, #16
 801c844:	701a      	strb	r2, [r3, #0]
 801c846:	687b      	ldr	r3, [r7, #4]
 801c848:	041b      	lsls	r3, r3, #16
 801c84a:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 801c84c:	687b      	ldr	r3, [r7, #4]
 801c84e:	0e1b      	lsrs	r3, r3, #24
 801c850:	061b      	lsls	r3, r3, #24
 801c852:	d108      	bne.n	801c866 <SEQ_BitPosition+0x3e>
 801c854:	220f      	movs	r2, #15
 801c856:	18bb      	adds	r3, r7, r2
 801c858:	18ba      	adds	r2, r7, r2
 801c85a:	7812      	ldrb	r2, [r2, #0]
 801c85c:	3208      	adds	r2, #8
 801c85e:	701a      	strb	r2, [r3, #0]
 801c860:	687b      	ldr	r3, [r7, #4]
 801c862:	021b      	lsls	r3, r3, #8
 801c864:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 801c866:	687b      	ldr	r3, [r7, #4]
 801c868:	0f1b      	lsrs	r3, r3, #28
 801c86a:	071b      	lsls	r3, r3, #28
 801c86c:	d108      	bne.n	801c880 <SEQ_BitPosition+0x58>
 801c86e:	220f      	movs	r2, #15
 801c870:	18bb      	adds	r3, r7, r2
 801c872:	18ba      	adds	r2, r7, r2
 801c874:	7812      	ldrb	r2, [r2, #0]
 801c876:	3204      	adds	r2, #4
 801c878:	701a      	strb	r2, [r3, #0]
 801c87a:	687b      	ldr	r3, [r7, #4]
 801c87c:	011b      	lsls	r3, r3, #4
 801c87e:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 801c880:	687b      	ldr	r3, [r7, #4]
 801c882:	0f1b      	lsrs	r3, r3, #28
 801c884:	4a08      	ldr	r2, [pc, #32]	; (801c8a8 <SEQ_BitPosition+0x80>)
 801c886:	5cd1      	ldrb	r1, [r2, r3]
 801c888:	200f      	movs	r0, #15
 801c88a:	183b      	adds	r3, r7, r0
 801c88c:	183a      	adds	r2, r7, r0
 801c88e:	7812      	ldrb	r2, [r2, #0]
 801c890:	188a      	adds	r2, r1, r2
 801c892:	701a      	strb	r2, [r3, #0]

  return (uint8_t)(31U-n);
 801c894:	183b      	adds	r3, r7, r0
 801c896:	781b      	ldrb	r3, [r3, #0]
 801c898:	221f      	movs	r2, #31
 801c89a:	1ad3      	subs	r3, r2, r3
 801c89c:	b2db      	uxtb	r3, r3
}
 801c89e:	0018      	movs	r0, r3
 801c8a0:	46bd      	mov	sp, r7
 801c8a2:	b004      	add	sp, #16
 801c8a4:	bd80      	pop	{r7, pc}
 801c8a6:	46c0      	nop			; (mov r8, r8)
 801c8a8:	0801fcd4 	.word	0x0801fcd4

0801c8ac <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801c8ac:	b082      	sub	sp, #8
 801c8ae:	b580      	push	{r7, lr}
 801c8b0:	b086      	sub	sp, #24
 801c8b2:	af00      	add	r7, sp, #0
 801c8b4:	60f8      	str	r0, [r7, #12]
 801c8b6:	1d38      	adds	r0, r7, #4
 801c8b8:	6001      	str	r1, [r0, #0]
 801c8ba:	6042      	str	r2, [r0, #4]
 801c8bc:	2204      	movs	r2, #4
 801c8be:	2120      	movs	r1, #32
 801c8c0:	468c      	mov	ip, r1
 801c8c2:	44bc      	add	ip, r7
 801c8c4:	4462      	add	r2, ip
 801c8c6:	6013      	str	r3, [r2, #0]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801c8c8:	2110      	movs	r1, #16
 801c8ca:	187b      	adds	r3, r7, r1
 801c8cc:	2200      	movs	r2, #0
 801c8ce:	601a      	str	r2, [r3, #0]
 801c8d0:	187b      	adds	r3, r7, r1
 801c8d2:	2200      	movs	r2, #0
 801c8d4:	809a      	strh	r2, [r3, #4]

  c.Seconds = a.Seconds + b.Seconds;
 801c8d6:	1d3b      	adds	r3, r7, #4
 801c8d8:	681a      	ldr	r2, [r3, #0]
 801c8da:	2304      	movs	r3, #4
 801c8dc:	2020      	movs	r0, #32
 801c8de:	4684      	mov	ip, r0
 801c8e0:	44bc      	add	ip, r7
 801c8e2:	4463      	add	r3, ip
 801c8e4:	681b      	ldr	r3, [r3, #0]
 801c8e6:	18d2      	adds	r2, r2, r3
 801c8e8:	187b      	adds	r3, r7, r1
 801c8ea:	601a      	str	r2, [r3, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801c8ec:	1d3b      	adds	r3, r7, #4
 801c8ee:	2204      	movs	r2, #4
 801c8f0:	5e9b      	ldrsh	r3, [r3, r2]
 801c8f2:	b29a      	uxth	r2, r3
 801c8f4:	2304      	movs	r3, #4
 801c8f6:	2020      	movs	r0, #32
 801c8f8:	4684      	mov	ip, r0
 801c8fa:	44bc      	add	ip, r7
 801c8fc:	4463      	add	r3, ip
 801c8fe:	2004      	movs	r0, #4
 801c900:	5e1b      	ldrsh	r3, [r3, r0]
 801c902:	b29b      	uxth	r3, r3
 801c904:	18d3      	adds	r3, r2, r3
 801c906:	b29b      	uxth	r3, r3
 801c908:	b21a      	sxth	r2, r3
 801c90a:	187b      	adds	r3, r7, r1
 801c90c:	809a      	strh	r2, [r3, #4]
  if( c.SubSeconds >= 1000 )
 801c90e:	187b      	adds	r3, r7, r1
 801c910:	2204      	movs	r2, #4
 801c912:	5e9a      	ldrsh	r2, [r3, r2]
 801c914:	23fa      	movs	r3, #250	; 0xfa
 801c916:	009b      	lsls	r3, r3, #2
 801c918:	429a      	cmp	r2, r3
 801c91a:	db0f      	blt.n	801c93c <SysTimeAdd+0x90>
  {
    c.Seconds++;
 801c91c:	187b      	adds	r3, r7, r1
 801c91e:	681b      	ldr	r3, [r3, #0]
 801c920:	1c5a      	adds	r2, r3, #1
 801c922:	187b      	adds	r3, r7, r1
 801c924:	601a      	str	r2, [r3, #0]
    c.SubSeconds -= 1000;
 801c926:	187b      	adds	r3, r7, r1
 801c928:	2204      	movs	r2, #4
 801c92a:	5e9b      	ldrsh	r3, [r3, r2]
 801c92c:	b29b      	uxth	r3, r3
 801c92e:	4a09      	ldr	r2, [pc, #36]	; (801c954 <SysTimeAdd+0xa8>)
 801c930:	4694      	mov	ip, r2
 801c932:	4463      	add	r3, ip
 801c934:	b29b      	uxth	r3, r3
 801c936:	b21a      	sxth	r2, r3
 801c938:	187b      	adds	r3, r7, r1
 801c93a:	809a      	strh	r2, [r3, #4]
  }
  return c;
 801c93c:	68fb      	ldr	r3, [r7, #12]
 801c93e:	2210      	movs	r2, #16
 801c940:	18ba      	adds	r2, r7, r2
 801c942:	ca03      	ldmia	r2!, {r0, r1}
 801c944:	c303      	stmia	r3!, {r0, r1}
}
 801c946:	68f8      	ldr	r0, [r7, #12]
 801c948:	46bd      	mov	sp, r7
 801c94a:	b006      	add	sp, #24
 801c94c:	bc80      	pop	{r7}
 801c94e:	bc08      	pop	{r3}
 801c950:	b002      	add	sp, #8
 801c952:	4718      	bx	r3
 801c954:	fffffc18 	.word	0xfffffc18

0801c958 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801c958:	b082      	sub	sp, #8
 801c95a:	b580      	push	{r7, lr}
 801c95c:	b086      	sub	sp, #24
 801c95e:	af00      	add	r7, sp, #0
 801c960:	60f8      	str	r0, [r7, #12]
 801c962:	1d38      	adds	r0, r7, #4
 801c964:	6001      	str	r1, [r0, #0]
 801c966:	6042      	str	r2, [r0, #4]
 801c968:	2204      	movs	r2, #4
 801c96a:	2120      	movs	r1, #32
 801c96c:	468c      	mov	ip, r1
 801c96e:	44bc      	add	ip, r7
 801c970:	4462      	add	r2, ip
 801c972:	6013      	str	r3, [r2, #0]
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801c974:	2110      	movs	r1, #16
 801c976:	187b      	adds	r3, r7, r1
 801c978:	2200      	movs	r2, #0
 801c97a:	601a      	str	r2, [r3, #0]
 801c97c:	187b      	adds	r3, r7, r1
 801c97e:	2200      	movs	r2, #0
 801c980:	809a      	strh	r2, [r3, #4]

  c.Seconds = a.Seconds - b.Seconds;
 801c982:	1d3b      	adds	r3, r7, #4
 801c984:	681a      	ldr	r2, [r3, #0]
 801c986:	2304      	movs	r3, #4
 801c988:	2020      	movs	r0, #32
 801c98a:	4684      	mov	ip, r0
 801c98c:	44bc      	add	ip, r7
 801c98e:	4463      	add	r3, ip
 801c990:	681b      	ldr	r3, [r3, #0]
 801c992:	1ad2      	subs	r2, r2, r3
 801c994:	187b      	adds	r3, r7, r1
 801c996:	601a      	str	r2, [r3, #0]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801c998:	1d3b      	adds	r3, r7, #4
 801c99a:	2204      	movs	r2, #4
 801c99c:	5e9b      	ldrsh	r3, [r3, r2]
 801c99e:	b29a      	uxth	r2, r3
 801c9a0:	2304      	movs	r3, #4
 801c9a2:	2020      	movs	r0, #32
 801c9a4:	4684      	mov	ip, r0
 801c9a6:	44bc      	add	ip, r7
 801c9a8:	4463      	add	r3, ip
 801c9aa:	2004      	movs	r0, #4
 801c9ac:	5e1b      	ldrsh	r3, [r3, r0]
 801c9ae:	b29b      	uxth	r3, r3
 801c9b0:	1ad3      	subs	r3, r2, r3
 801c9b2:	b29b      	uxth	r3, r3
 801c9b4:	b21a      	sxth	r2, r3
 801c9b6:	187b      	adds	r3, r7, r1
 801c9b8:	809a      	strh	r2, [r3, #4]
  if( c.SubSeconds < 0 )
 801c9ba:	187b      	adds	r3, r7, r1
 801c9bc:	2204      	movs	r2, #4
 801c9be:	5e9b      	ldrsh	r3, [r3, r2]
 801c9c0:	2b00      	cmp	r3, #0
 801c9c2:	da10      	bge.n	801c9e6 <SysTimeSub+0x8e>
  {
    c.Seconds--;
 801c9c4:	187b      	adds	r3, r7, r1
 801c9c6:	681b      	ldr	r3, [r3, #0]
 801c9c8:	1e5a      	subs	r2, r3, #1
 801c9ca:	187b      	adds	r3, r7, r1
 801c9cc:	601a      	str	r2, [r3, #0]
    c.SubSeconds += 1000;
 801c9ce:	187b      	adds	r3, r7, r1
 801c9d0:	2204      	movs	r2, #4
 801c9d2:	5e9b      	ldrsh	r3, [r3, r2]
 801c9d4:	b29b      	uxth	r3, r3
 801c9d6:	22fa      	movs	r2, #250	; 0xfa
 801c9d8:	0092      	lsls	r2, r2, #2
 801c9da:	4694      	mov	ip, r2
 801c9dc:	4463      	add	r3, ip
 801c9de:	b29b      	uxth	r3, r3
 801c9e0:	b21a      	sxth	r2, r3
 801c9e2:	187b      	adds	r3, r7, r1
 801c9e4:	809a      	strh	r2, [r3, #4]
  }
  return c;
 801c9e6:	68fb      	ldr	r3, [r7, #12]
 801c9e8:	2210      	movs	r2, #16
 801c9ea:	18ba      	adds	r2, r7, r2
 801c9ec:	ca03      	ldmia	r2!, {r0, r1}
 801c9ee:	c303      	stmia	r3!, {r0, r1}
}
 801c9f0:	68f8      	ldr	r0, [r7, #12]
 801c9f2:	46bd      	mov	sp, r7
 801c9f4:	b006      	add	sp, #24
 801c9f6:	bc80      	pop	{r7}
 801c9f8:	bc08      	pop	{r3}
 801c9fa:	b002      	add	sp, #8
 801c9fc:	4718      	bx	r3
	...

0801ca00 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801ca00:	b5b0      	push	{r4, r5, r7, lr}
 801ca02:	b088      	sub	sp, #32
 801ca04:	af02      	add	r7, sp, #8
 801ca06:	003b      	movs	r3, r7
 801ca08:	6018      	str	r0, [r3, #0]
 801ca0a:	6059      	str	r1, [r3, #4]
  SysTime_t DeltaTime;
  
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801ca0c:	2108      	movs	r1, #8
 801ca0e:	187b      	adds	r3, r7, r1
 801ca10:	2200      	movs	r2, #0
 801ca12:	601a      	str	r2, [r3, #0]
 801ca14:	187b      	adds	r3, r7, r1
 801ca16:	2200      	movs	r2, #0
 801ca18:	809a      	strh	r2, [r3, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801ca1a:	4b14      	ldr	r3, [pc, #80]	; (801ca6c <SysTimeSet+0x6c>)
 801ca1c:	691b      	ldr	r3, [r3, #16]
 801ca1e:	000c      	movs	r4, r1
 801ca20:	187a      	adds	r2, r7, r1
 801ca22:	3204      	adds	r2, #4
 801ca24:	0010      	movs	r0, r2
 801ca26:	4798      	blx	r3
 801ca28:	0002      	movs	r2, r0
 801ca2a:	0021      	movs	r1, r4
 801ca2c:	187b      	adds	r3, r7, r1
 801ca2e:	601a      	str	r2, [r3, #0]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801ca30:	2510      	movs	r5, #16
 801ca32:	197c      	adds	r4, r7, r5
 801ca34:	187b      	adds	r3, r7, r1
 801ca36:	003a      	movs	r2, r7
 801ca38:	4669      	mov	r1, sp
 801ca3a:	6858      	ldr	r0, [r3, #4]
 801ca3c:	6008      	str	r0, [r1, #0]
 801ca3e:	681b      	ldr	r3, [r3, #0]
 801ca40:	6811      	ldr	r1, [r2, #0]
 801ca42:	6852      	ldr	r2, [r2, #4]
 801ca44:	0020      	movs	r0, r4
 801ca46:	f7ff ff87 	bl	801c958 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801ca4a:	4b08      	ldr	r3, [pc, #32]	; (801ca6c <SysTimeSet+0x6c>)
 801ca4c:	681a      	ldr	r2, [r3, #0]
 801ca4e:	197b      	adds	r3, r7, r5
 801ca50:	681b      	ldr	r3, [r3, #0]
 801ca52:	0018      	movs	r0, r3
 801ca54:	4790      	blx	r2
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801ca56:	4b05      	ldr	r3, [pc, #20]	; (801ca6c <SysTimeSet+0x6c>)
 801ca58:	689b      	ldr	r3, [r3, #8]
 801ca5a:	197a      	adds	r2, r7, r5
 801ca5c:	2104      	movs	r1, #4
 801ca5e:	5e52      	ldrsh	r2, [r2, r1]
 801ca60:	0010      	movs	r0, r2
 801ca62:	4798      	blx	r3
}
 801ca64:	46c0      	nop			; (mov r8, r8)
 801ca66:	46bd      	mov	sp, r7
 801ca68:	b006      	add	sp, #24
 801ca6a:	bdb0      	pop	{r4, r5, r7, pc}
 801ca6c:	0801ee50 	.word	0x0801ee50

0801ca70 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801ca70:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ca72:	b08b      	sub	sp, #44	; 0x2c
 801ca74:	af02      	add	r7, sp, #8
 801ca76:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801ca78:	2518      	movs	r5, #24
 801ca7a:	197b      	adds	r3, r7, r5
 801ca7c:	2200      	movs	r2, #0
 801ca7e:	601a      	str	r2, [r3, #0]
 801ca80:	197b      	adds	r3, r7, r5
 801ca82:	2200      	movs	r2, #0
 801ca84:	809a      	strh	r2, [r3, #4]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801ca86:	2410      	movs	r4, #16
 801ca88:	193b      	adds	r3, r7, r4
 801ca8a:	2200      	movs	r2, #0
 801ca8c:	601a      	str	r2, [r3, #0]
 801ca8e:	193b      	adds	r3, r7, r4
 801ca90:	2200      	movs	r2, #0
 801ca92:	809a      	strh	r2, [r3, #4]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801ca94:	4b16      	ldr	r3, [pc, #88]	; (801caf0 <SysTimeGet+0x80>)
 801ca96:	691b      	ldr	r3, [r3, #16]
 801ca98:	197a      	adds	r2, r7, r5
 801ca9a:	3204      	adds	r2, #4
 801ca9c:	0010      	movs	r0, r2
 801ca9e:	4798      	blx	r3
 801caa0:	0002      	movs	r2, r0
 801caa2:	197b      	adds	r3, r7, r5
 801caa4:	601a      	str	r2, [r3, #0]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801caa6:	4b12      	ldr	r3, [pc, #72]	; (801caf0 <SysTimeGet+0x80>)
 801caa8:	68db      	ldr	r3, [r3, #12]
 801caaa:	4798      	blx	r3
 801caac:	0003      	movs	r3, r0
 801caae:	b21a      	sxth	r2, r3
 801cab0:	2608      	movs	r6, #8
 801cab2:	19bb      	adds	r3, r7, r6
 801cab4:	809a      	strh	r2, [r3, #4]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801cab6:	4b0e      	ldr	r3, [pc, #56]	; (801caf0 <SysTimeGet+0x80>)
 801cab8:	685b      	ldr	r3, [r3, #4]
 801caba:	4798      	blx	r3
 801cabc:	0002      	movs	r2, r0
 801cabe:	0031      	movs	r1, r6
 801cac0:	187b      	adds	r3, r7, r1
 801cac2:	601a      	str	r2, [r3, #0]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801cac4:	0026      	movs	r6, r4
 801cac6:	193c      	adds	r4, r7, r4
 801cac8:	197b      	adds	r3, r7, r5
 801caca:	187a      	adds	r2, r7, r1
 801cacc:	4669      	mov	r1, sp
 801cace:	6858      	ldr	r0, [r3, #4]
 801cad0:	6008      	str	r0, [r1, #0]
 801cad2:	681b      	ldr	r3, [r3, #0]
 801cad4:	6811      	ldr	r1, [r2, #0]
 801cad6:	6852      	ldr	r2, [r2, #4]
 801cad8:	0020      	movs	r0, r4
 801cada:	f7ff fee7 	bl	801c8ac <SysTimeAdd>

  return sysTime;
 801cade:	687b      	ldr	r3, [r7, #4]
 801cae0:	19ba      	adds	r2, r7, r6
 801cae2:	ca03      	ldmia	r2!, {r0, r1}
 801cae4:	c303      	stmia	r3!, {r0, r1}
}
 801cae6:	6878      	ldr	r0, [r7, #4]
 801cae8:	46bd      	mov	sp, r7
 801caea:	b009      	add	sp, #36	; 0x24
 801caec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801caee:	46c0      	nop			; (mov r8, r8)
 801caf0:	0801ee50 	.word	0x0801ee50

0801caf4 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801caf4:	b590      	push	{r4, r7, lr}
 801caf6:	b085      	sub	sp, #20
 801caf8:	af00      	add	r7, sp, #0
 801cafa:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801cafc:	2108      	movs	r1, #8
 801cafe:	187b      	adds	r3, r7, r1
 801cb00:	2200      	movs	r2, #0
 801cb02:	601a      	str	r2, [r3, #0]
 801cb04:	187b      	adds	r3, r7, r1
 801cb06:	2200      	movs	r2, #0
 801cb08:	809a      	strh	r2, [r3, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801cb0a:	4b09      	ldr	r3, [pc, #36]	; (801cb30 <SysTimeGetMcuTime+0x3c>)
 801cb0c:	691b      	ldr	r3, [r3, #16]
 801cb0e:	000c      	movs	r4, r1
 801cb10:	187a      	adds	r2, r7, r1
 801cb12:	3204      	adds	r2, #4
 801cb14:	0010      	movs	r0, r2
 801cb16:	4798      	blx	r3
 801cb18:	0002      	movs	r2, r0
 801cb1a:	193b      	adds	r3, r7, r4
 801cb1c:	601a      	str	r2, [r3, #0]
  
  return calendarTime;
 801cb1e:	687b      	ldr	r3, [r7, #4]
 801cb20:	193a      	adds	r2, r7, r4
 801cb22:	ca03      	ldmia	r2!, {r0, r1}
 801cb24:	c303      	stmia	r3!, {r0, r1}
}
 801cb26:	6878      	ldr	r0, [r7, #4]
 801cb28:	46bd      	mov	sp, r7
 801cb2a:	b005      	add	sp, #20
 801cb2c:	bd90      	pop	{r4, r7, pc}
 801cb2e:	46c0      	nop			; (mov r8, r8)
 801cb30:	0801ee50 	.word	0x0801ee50

0801cb34 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801cb34:	b580      	push	{r7, lr}
 801cb36:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801cb38:	4b04      	ldr	r3, [pc, #16]	; (801cb4c <UTIL_TIMER_Init+0x18>)
 801cb3a:	2200      	movs	r2, #0
 801cb3c:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801cb3e:	4b04      	ldr	r3, [pc, #16]	; (801cb50 <UTIL_TIMER_Init+0x1c>)
 801cb40:	681b      	ldr	r3, [r3, #0]
 801cb42:	4798      	blx	r3
 801cb44:	0003      	movs	r3, r0
}
 801cb46:	0018      	movs	r0, r3
 801cb48:	46bd      	mov	sp, r7
 801cb4a:	bd80      	pop	{r7, pc}
 801cb4c:	20001340 	.word	0x20001340
 801cb50:	0801ee24 	.word	0x0801ee24

0801cb54 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801cb54:	b580      	push	{r7, lr}
 801cb56:	b084      	sub	sp, #16
 801cb58:	af00      	add	r7, sp, #0
 801cb5a:	60f8      	str	r0, [r7, #12]
 801cb5c:	60b9      	str	r1, [r7, #8]
 801cb5e:	603b      	str	r3, [r7, #0]
 801cb60:	1dfb      	adds	r3, r7, #7
 801cb62:	701a      	strb	r2, [r3, #0]
  if((TimerObject != NULL) && (Callback != NULL))
 801cb64:	68fb      	ldr	r3, [r7, #12]
 801cb66:	2b00      	cmp	r3, #0
 801cb68:	d025      	beq.n	801cbb6 <UTIL_TIMER_Create+0x62>
 801cb6a:	683b      	ldr	r3, [r7, #0]
 801cb6c:	2b00      	cmp	r3, #0
 801cb6e:	d022      	beq.n	801cbb6 <UTIL_TIMER_Create+0x62>
  {
    TimerObject->Timestamp = 0U;
 801cb70:	68fb      	ldr	r3, [r7, #12]
 801cb72:	2200      	movs	r2, #0
 801cb74:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801cb76:	4b12      	ldr	r3, [pc, #72]	; (801cbc0 <UTIL_TIMER_Create+0x6c>)
 801cb78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cb7a:	68ba      	ldr	r2, [r7, #8]
 801cb7c:	0010      	movs	r0, r2
 801cb7e:	4798      	blx	r3
 801cb80:	0002      	movs	r2, r0
 801cb82:	68fb      	ldr	r3, [r7, #12]
 801cb84:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801cb86:	68fb      	ldr	r3, [r7, #12]
 801cb88:	2200      	movs	r2, #0
 801cb8a:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801cb8c:	68fb      	ldr	r3, [r7, #12]
 801cb8e:	2200      	movs	r2, #0
 801cb90:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801cb92:	68fb      	ldr	r3, [r7, #12]
 801cb94:	2200      	movs	r2, #0
 801cb96:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801cb98:	68fb      	ldr	r3, [r7, #12]
 801cb9a:	683a      	ldr	r2, [r7, #0]
 801cb9c:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801cb9e:	68fb      	ldr	r3, [r7, #12]
 801cba0:	69ba      	ldr	r2, [r7, #24]
 801cba2:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801cba4:	68fb      	ldr	r3, [r7, #12]
 801cba6:	1dfa      	adds	r2, r7, #7
 801cba8:	7812      	ldrb	r2, [r2, #0]
 801cbaa:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801cbac:	68fb      	ldr	r3, [r7, #12]
 801cbae:	2200      	movs	r2, #0
 801cbb0:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801cbb2:	2300      	movs	r3, #0
 801cbb4:	e000      	b.n	801cbb8 <UTIL_TIMER_Create+0x64>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801cbb6:	2301      	movs	r3, #1
  }
}
 801cbb8:	0018      	movs	r0, r3
 801cbba:	46bd      	mov	sp, r7
 801cbbc:	b004      	add	sp, #16
 801cbbe:	bd80      	pop	{r7, pc}
 801cbc0:	0801ee24 	.word	0x0801ee24

0801cbc4 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801cbc4:	b580      	push	{r7, lr}
 801cbc6:	b08a      	sub	sp, #40	; 0x28
 801cbc8:	af00      	add	r7, sp, #0
 801cbca:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801cbcc:	2327      	movs	r3, #39	; 0x27
 801cbce:	18fb      	adds	r3, r7, r3
 801cbd0:	2200      	movs	r2, #0
 801cbd2:	701a      	strb	r2, [r3, #0]
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801cbd4:	687b      	ldr	r3, [r7, #4]
 801cbd6:	2b00      	cmp	r3, #0
 801cbd8:	d05d      	beq.n	801cc96 <UTIL_TIMER_Start+0xd2>
 801cbda:	687b      	ldr	r3, [r7, #4]
 801cbdc:	0018      	movs	r0, r3
 801cbde:	f000 f9cb 	bl	801cf78 <TimerExists>
 801cbe2:	0003      	movs	r3, r0
 801cbe4:	001a      	movs	r2, r3
 801cbe6:	2301      	movs	r3, #1
 801cbe8:	4053      	eors	r3, r2
 801cbea:	b2db      	uxtb	r3, r3
 801cbec:	2b00      	cmp	r3, #0
 801cbee:	d052      	beq.n	801cc96 <UTIL_TIMER_Start+0xd2>
 801cbf0:	687b      	ldr	r3, [r7, #4]
 801cbf2:	7a5b      	ldrb	r3, [r3, #9]
 801cbf4:	2b00      	cmp	r3, #0
 801cbf6:	d14e      	bne.n	801cc96 <UTIL_TIMER_Start+0xd2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cbf8:	f3ef 8310 	mrs	r3, PRIMASK
 801cbfc:	613b      	str	r3, [r7, #16]
  return(result);
 801cbfe:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801cc00:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801cc02:	b672      	cpsid	i
}
 801cc04:	46c0      	nop			; (mov r8, r8)
    ticks = TimerObject->ReloadValue;
 801cc06:	687b      	ldr	r3, [r7, #4]
 801cc08:	685b      	ldr	r3, [r3, #4]
 801cc0a:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801cc0c:	4b27      	ldr	r3, [pc, #156]	; (801ccac <UTIL_TIMER_Start+0xe8>)
 801cc0e:	6a1b      	ldr	r3, [r3, #32]
 801cc10:	4798      	blx	r3
 801cc12:	0003      	movs	r3, r0
 801cc14:	61bb      	str	r3, [r7, #24]
    
    if( ticks < minValue )
 801cc16:	6a3a      	ldr	r2, [r7, #32]
 801cc18:	69bb      	ldr	r3, [r7, #24]
 801cc1a:	429a      	cmp	r2, r3
 801cc1c:	d201      	bcs.n	801cc22 <UTIL_TIMER_Start+0x5e>
    {
      ticks = minValue;
 801cc1e:	69bb      	ldr	r3, [r7, #24]
 801cc20:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801cc22:	687b      	ldr	r3, [r7, #4]
 801cc24:	6a3a      	ldr	r2, [r7, #32]
 801cc26:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801cc28:	687b      	ldr	r3, [r7, #4]
 801cc2a:	2200      	movs	r2, #0
 801cc2c:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801cc2e:	687b      	ldr	r3, [r7, #4]
 801cc30:	2201      	movs	r2, #1
 801cc32:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801cc34:	687b      	ldr	r3, [r7, #4]
 801cc36:	2200      	movs	r2, #0
 801cc38:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801cc3a:	4b1d      	ldr	r3, [pc, #116]	; (801ccb0 <UTIL_TIMER_Start+0xec>)
 801cc3c:	681b      	ldr	r3, [r3, #0]
 801cc3e:	2b00      	cmp	r3, #0
 801cc40:	d107      	bne.n	801cc52 <UTIL_TIMER_Start+0x8e>
    {
      UTIL_TimerDriver.SetTimerContext();
 801cc42:	4b1a      	ldr	r3, [pc, #104]	; (801ccac <UTIL_TIMER_Start+0xe8>)
 801cc44:	691b      	ldr	r3, [r3, #16]
 801cc46:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801cc48:	687b      	ldr	r3, [r7, #4]
 801cc4a:	0018      	movs	r0, r3
 801cc4c:	f000 fa08 	bl	801d060 <TimerInsertNewHeadTimer>
 801cc50:	e01a      	b.n	801cc88 <UTIL_TIMER_Start+0xc4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801cc52:	4b16      	ldr	r3, [pc, #88]	; (801ccac <UTIL_TIMER_Start+0xe8>)
 801cc54:	699b      	ldr	r3, [r3, #24]
 801cc56:	4798      	blx	r3
 801cc58:	0003      	movs	r3, r0
 801cc5a:	617b      	str	r3, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801cc5c:	687b      	ldr	r3, [r7, #4]
 801cc5e:	681a      	ldr	r2, [r3, #0]
 801cc60:	697b      	ldr	r3, [r7, #20]
 801cc62:	18d2      	adds	r2, r2, r3
 801cc64:	687b      	ldr	r3, [r7, #4]
 801cc66:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801cc68:	687b      	ldr	r3, [r7, #4]
 801cc6a:	681a      	ldr	r2, [r3, #0]
 801cc6c:	4b10      	ldr	r3, [pc, #64]	; (801ccb0 <UTIL_TIMER_Start+0xec>)
 801cc6e:	681b      	ldr	r3, [r3, #0]
 801cc70:	681b      	ldr	r3, [r3, #0]
 801cc72:	429a      	cmp	r2, r3
 801cc74:	d204      	bcs.n	801cc80 <UTIL_TIMER_Start+0xbc>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801cc76:	687b      	ldr	r3, [r7, #4]
 801cc78:	0018      	movs	r0, r3
 801cc7a:	f000 f9f1 	bl	801d060 <TimerInsertNewHeadTimer>
 801cc7e:	e003      	b.n	801cc88 <UTIL_TIMER_Start+0xc4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801cc80:	687b      	ldr	r3, [r7, #4]
 801cc82:	0018      	movs	r0, r3
 801cc84:	f000 f9be 	bl	801d004 <TimerInsertTimer>
 801cc88:	69fb      	ldr	r3, [r7, #28]
 801cc8a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cc8c:	68fb      	ldr	r3, [r7, #12]
 801cc8e:	f383 8810 	msr	PRIMASK, r3
}
 801cc92:	46c0      	nop			; (mov r8, r8)
  {
 801cc94:	e003      	b.n	801cc9e <UTIL_TIMER_Start+0xda>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801cc96:	2327      	movs	r3, #39	; 0x27
 801cc98:	18fb      	adds	r3, r7, r3
 801cc9a:	2201      	movs	r2, #1
 801cc9c:	701a      	strb	r2, [r3, #0]
  }
  return ret;
 801cc9e:	2327      	movs	r3, #39	; 0x27
 801cca0:	18fb      	adds	r3, r7, r3
 801cca2:	781b      	ldrb	r3, [r3, #0]
}
 801cca4:	0018      	movs	r0, r3
 801cca6:	46bd      	mov	sp, r7
 801cca8:	b00a      	add	sp, #40	; 0x28
 801ccaa:	bd80      	pop	{r7, pc}
 801ccac:	0801ee24 	.word	0x0801ee24
 801ccb0:	20001340 	.word	0x20001340

0801ccb4 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801ccb4:	b580      	push	{r7, lr}
 801ccb6:	b088      	sub	sp, #32
 801ccb8:	af00      	add	r7, sp, #0
 801ccba:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801ccbc:	231f      	movs	r3, #31
 801ccbe:	18fb      	adds	r3, r7, r3
 801ccc0:	2200      	movs	r2, #0
 801ccc2:	701a      	strb	r2, [r3, #0]

  if (NULL != TimerObject)
 801ccc4:	687b      	ldr	r3, [r7, #4]
 801ccc6:	2b00      	cmp	r3, #0
 801ccc8:	d05d      	beq.n	801cd86 <UTIL_TIMER_Stop+0xd2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ccca:	f3ef 8310 	mrs	r3, PRIMASK
 801ccce:	60fb      	str	r3, [r7, #12]
  return(result);
 801ccd0:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801ccd2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801ccd4:	b672      	cpsid	i
}
 801ccd6:	46c0      	nop			; (mov r8, r8)
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801ccd8:	4b30      	ldr	r3, [pc, #192]	; (801cd9c <UTIL_TIMER_Stop+0xe8>)
 801ccda:	681b      	ldr	r3, [r3, #0]
 801ccdc:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801ccde:	4b2f      	ldr	r3, [pc, #188]	; (801cd9c <UTIL_TIMER_Stop+0xe8>)
 801cce0:	681b      	ldr	r3, [r3, #0]
 801cce2:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801cce4:	687b      	ldr	r3, [r7, #4]
 801cce6:	2201      	movs	r2, #1
 801cce8:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801ccea:	4b2c      	ldr	r3, [pc, #176]	; (801cd9c <UTIL_TIMER_Stop+0xe8>)
 801ccec:	681b      	ldr	r3, [r3, #0]
 801ccee:	2b00      	cmp	r3, #0
 801ccf0:	d043      	beq.n	801cd7a <UTIL_TIMER_Stop+0xc6>
    {
      TimerObject->IsRunning = 0U;
 801ccf2:	687b      	ldr	r3, [r7, #4]
 801ccf4:	2200      	movs	r2, #0
 801ccf6:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801ccf8:	4b28      	ldr	r3, [pc, #160]	; (801cd9c <UTIL_TIMER_Stop+0xe8>)
 801ccfa:	681b      	ldr	r3, [r3, #0]
 801ccfc:	687a      	ldr	r2, [r7, #4]
 801ccfe:	429a      	cmp	r2, r3
 801cd00:	d134      	bne.n	801cd6c <UTIL_TIMER_Stop+0xb8>
      {
          TimerListHead->IsPending = 0;
 801cd02:	4b26      	ldr	r3, [pc, #152]	; (801cd9c <UTIL_TIMER_Stop+0xe8>)
 801cd04:	681b      	ldr	r3, [r3, #0]
 801cd06:	2200      	movs	r2, #0
 801cd08:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801cd0a:	4b24      	ldr	r3, [pc, #144]	; (801cd9c <UTIL_TIMER_Stop+0xe8>)
 801cd0c:	681b      	ldr	r3, [r3, #0]
 801cd0e:	695b      	ldr	r3, [r3, #20]
 801cd10:	2b00      	cmp	r3, #0
 801cd12:	d00a      	beq.n	801cd2a <UTIL_TIMER_Stop+0x76>
          {
            TimerListHead = TimerListHead->Next;
 801cd14:	4b21      	ldr	r3, [pc, #132]	; (801cd9c <UTIL_TIMER_Stop+0xe8>)
 801cd16:	681b      	ldr	r3, [r3, #0]
 801cd18:	695a      	ldr	r2, [r3, #20]
 801cd1a:	4b20      	ldr	r3, [pc, #128]	; (801cd9c <UTIL_TIMER_Stop+0xe8>)
 801cd1c:	601a      	str	r2, [r3, #0]
            TimerSetTimeout( TimerListHead );
 801cd1e:	4b1f      	ldr	r3, [pc, #124]	; (801cd9c <UTIL_TIMER_Stop+0xe8>)
 801cd20:	681b      	ldr	r3, [r3, #0]
 801cd22:	0018      	movs	r0, r3
 801cd24:	f000 f944 	bl	801cfb0 <TimerSetTimeout>
 801cd28:	e023      	b.n	801cd72 <UTIL_TIMER_Stop+0xbe>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801cd2a:	4b1d      	ldr	r3, [pc, #116]	; (801cda0 <UTIL_TIMER_Stop+0xec>)
 801cd2c:	68db      	ldr	r3, [r3, #12]
 801cd2e:	4798      	blx	r3
            TimerListHead = NULL;
 801cd30:	4b1a      	ldr	r3, [pc, #104]	; (801cd9c <UTIL_TIMER_Stop+0xe8>)
 801cd32:	2200      	movs	r2, #0
 801cd34:	601a      	str	r2, [r3, #0]
 801cd36:	e01c      	b.n	801cd72 <UTIL_TIMER_Stop+0xbe>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801cd38:	697a      	ldr	r2, [r7, #20]
 801cd3a:	687b      	ldr	r3, [r7, #4]
 801cd3c:	429a      	cmp	r2, r3
 801cd3e:	d110      	bne.n	801cd62 <UTIL_TIMER_Stop+0xae>
          {
            if( cur->Next != NULL )
 801cd40:	697b      	ldr	r3, [r7, #20]
 801cd42:	695b      	ldr	r3, [r3, #20]
 801cd44:	2b00      	cmp	r3, #0
 801cd46:	d006      	beq.n	801cd56 <UTIL_TIMER_Stop+0xa2>
            {
              cur = cur->Next;
 801cd48:	697b      	ldr	r3, [r7, #20]
 801cd4a:	695b      	ldr	r3, [r3, #20]
 801cd4c:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801cd4e:	69bb      	ldr	r3, [r7, #24]
 801cd50:	697a      	ldr	r2, [r7, #20]
 801cd52:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801cd54:	e00d      	b.n	801cd72 <UTIL_TIMER_Stop+0xbe>
              cur = NULL;
 801cd56:	2300      	movs	r3, #0
 801cd58:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801cd5a:	69bb      	ldr	r3, [r7, #24]
 801cd5c:	697a      	ldr	r2, [r7, #20]
 801cd5e:	615a      	str	r2, [r3, #20]
            break;
 801cd60:	e007      	b.n	801cd72 <UTIL_TIMER_Stop+0xbe>
          }
          else
          {
            prev = cur;
 801cd62:	697b      	ldr	r3, [r7, #20]
 801cd64:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801cd66:	697b      	ldr	r3, [r7, #20]
 801cd68:	695b      	ldr	r3, [r3, #20]
 801cd6a:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801cd6c:	697b      	ldr	r3, [r7, #20]
 801cd6e:	2b00      	cmp	r3, #0
 801cd70:	d1e2      	bne.n	801cd38 <UTIL_TIMER_Stop+0x84>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801cd72:	231f      	movs	r3, #31
 801cd74:	18fb      	adds	r3, r7, r3
 801cd76:	2200      	movs	r2, #0
 801cd78:	701a      	strb	r2, [r3, #0]
 801cd7a:	693b      	ldr	r3, [r7, #16]
 801cd7c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cd7e:	68bb      	ldr	r3, [r7, #8]
 801cd80:	f383 8810 	msr	PRIMASK, r3
}
 801cd84:	e003      	b.n	801cd8e <UTIL_TIMER_Stop+0xda>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801cd86:	231f      	movs	r3, #31
 801cd88:	18fb      	adds	r3, r7, r3
 801cd8a:	2201      	movs	r2, #1
 801cd8c:	701a      	strb	r2, [r3, #0]
  }
  return ret;
 801cd8e:	231f      	movs	r3, #31
 801cd90:	18fb      	adds	r3, r7, r3
 801cd92:	781b      	ldrb	r3, [r3, #0]
}
 801cd94:	0018      	movs	r0, r3
 801cd96:	46bd      	mov	sp, r7
 801cd98:	b008      	add	sp, #32
 801cd9a:	bd80      	pop	{r7, pc}
 801cd9c:	20001340 	.word	0x20001340
 801cda0:	0801ee24 	.word	0x0801ee24

0801cda4 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801cda4:	b590      	push	{r4, r7, lr}
 801cda6:	b085      	sub	sp, #20
 801cda8:	af00      	add	r7, sp, #0
 801cdaa:	6078      	str	r0, [r7, #4]
 801cdac:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801cdae:	210f      	movs	r1, #15
 801cdb0:	187b      	adds	r3, r7, r1
 801cdb2:	2200      	movs	r2, #0
 801cdb4:	701a      	strb	r2, [r3, #0]
  
  if(NULL == TimerObject)
 801cdb6:	687b      	ldr	r3, [r7, #4]
 801cdb8:	2b00      	cmp	r3, #0
 801cdba:	d103      	bne.n	801cdc4 <UTIL_TIMER_SetPeriod+0x20>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801cdbc:	187b      	adds	r3, r7, r1
 801cdbe:	2201      	movs	r2, #1
 801cdc0:	701a      	strb	r2, [r3, #0]
 801cdc2:	e019      	b.n	801cdf8 <UTIL_TIMER_SetPeriod+0x54>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801cdc4:	4b10      	ldr	r3, [pc, #64]	; (801ce08 <UTIL_TIMER_SetPeriod+0x64>)
 801cdc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cdc8:	683a      	ldr	r2, [r7, #0]
 801cdca:	0010      	movs	r0, r2
 801cdcc:	4798      	blx	r3
 801cdce:	0002      	movs	r2, r0
 801cdd0:	687b      	ldr	r3, [r7, #4]
 801cdd2:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801cdd4:	687b      	ldr	r3, [r7, #4]
 801cdd6:	0018      	movs	r0, r3
 801cdd8:	f000 f8ce 	bl	801cf78 <TimerExists>
 801cddc:	1e03      	subs	r3, r0, #0
 801cdde:	d00b      	beq.n	801cdf8 <UTIL_TIMER_SetPeriod+0x54>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801cde0:	687b      	ldr	r3, [r7, #4]
 801cde2:	0018      	movs	r0, r3
 801cde4:	f7ff ff66 	bl	801ccb4 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801cde8:	230f      	movs	r3, #15
 801cdea:	18fc      	adds	r4, r7, r3
 801cdec:	687b      	ldr	r3, [r7, #4]
 801cdee:	0018      	movs	r0, r3
 801cdf0:	f7ff fee8 	bl	801cbc4 <UTIL_TIMER_Start>
 801cdf4:	0003      	movs	r3, r0
 801cdf6:	7023      	strb	r3, [r4, #0]
    }
  }
  return ret;
 801cdf8:	230f      	movs	r3, #15
 801cdfa:	18fb      	adds	r3, r7, r3
 801cdfc:	781b      	ldrb	r3, [r3, #0]
}
 801cdfe:	0018      	movs	r0, r3
 801ce00:	46bd      	mov	sp, r7
 801ce02:	b005      	add	sp, #20
 801ce04:	bd90      	pop	{r4, r7, pc}
 801ce06:	46c0      	nop			; (mov r8, r8)
 801ce08:	0801ee24 	.word	0x0801ee24

0801ce0c <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801ce0c:	b590      	push	{r4, r7, lr}
 801ce0e:	b089      	sub	sp, #36	; 0x24
 801ce10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ce12:	f3ef 8310 	mrs	r3, PRIMASK
 801ce16:	60bb      	str	r3, [r7, #8]
  return(result);
 801ce18:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801ce1a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801ce1c:	b672      	cpsid	i
}
 801ce1e:	46c0      	nop			; (mov r8, r8)

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801ce20:	4b3a      	ldr	r3, [pc, #232]	; (801cf0c <UTIL_TIMER_IRQ_Handler+0x100>)
 801ce22:	695b      	ldr	r3, [r3, #20]
 801ce24:	4798      	blx	r3
 801ce26:	0003      	movs	r3, r0
 801ce28:	617b      	str	r3, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801ce2a:	4b38      	ldr	r3, [pc, #224]	; (801cf0c <UTIL_TIMER_IRQ_Handler+0x100>)
 801ce2c:	691b      	ldr	r3, [r3, #16]
 801ce2e:	4798      	blx	r3
 801ce30:	0003      	movs	r3, r0
 801ce32:	613b      	str	r3, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801ce34:	693a      	ldr	r2, [r7, #16]
 801ce36:	697b      	ldr	r3, [r7, #20]
 801ce38:	1ad3      	subs	r3, r2, r3
 801ce3a:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801ce3c:	4b34      	ldr	r3, [pc, #208]	; (801cf10 <UTIL_TIMER_IRQ_Handler+0x104>)
 801ce3e:	681b      	ldr	r3, [r3, #0]
 801ce40:	2b00      	cmp	r3, #0
 801ce42:	d038      	beq.n	801ceb6 <UTIL_TIMER_IRQ_Handler+0xaa>
  {
    cur = TimerListHead;
 801ce44:	4b32      	ldr	r3, [pc, #200]	; (801cf10 <UTIL_TIMER_IRQ_Handler+0x104>)
 801ce46:	681b      	ldr	r3, [r3, #0]
 801ce48:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801ce4a:	69fb      	ldr	r3, [r7, #28]
 801ce4c:	681b      	ldr	r3, [r3, #0]
 801ce4e:	68fa      	ldr	r2, [r7, #12]
 801ce50:	429a      	cmp	r2, r3
 801ce52:	d206      	bcs.n	801ce62 <UTIL_TIMER_IRQ_Handler+0x56>
      {
        cur->Timestamp -= DeltaContext;
 801ce54:	69fb      	ldr	r3, [r7, #28]
 801ce56:	681a      	ldr	r2, [r3, #0]
 801ce58:	68fb      	ldr	r3, [r7, #12]
 801ce5a:	1ad2      	subs	r2, r2, r3
 801ce5c:	69fb      	ldr	r3, [r7, #28]
 801ce5e:	601a      	str	r2, [r3, #0]
 801ce60:	e002      	b.n	801ce68 <UTIL_TIMER_IRQ_Handler+0x5c>
      }
      else
      {
        cur->Timestamp = 0;
 801ce62:	69fb      	ldr	r3, [r7, #28]
 801ce64:	2200      	movs	r2, #0
 801ce66:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801ce68:	69fb      	ldr	r3, [r7, #28]
 801ce6a:	695b      	ldr	r3, [r3, #20]
 801ce6c:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801ce6e:	69fb      	ldr	r3, [r7, #28]
 801ce70:	2b00      	cmp	r3, #0
 801ce72:	d1ea      	bne.n	801ce4a <UTIL_TIMER_IRQ_Handler+0x3e>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801ce74:	e01f      	b.n	801ceb6 <UTIL_TIMER_IRQ_Handler+0xaa>
  {
      cur = TimerListHead;
 801ce76:	4b26      	ldr	r3, [pc, #152]	; (801cf10 <UTIL_TIMER_IRQ_Handler+0x104>)
 801ce78:	681b      	ldr	r3, [r3, #0]
 801ce7a:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801ce7c:	4b24      	ldr	r3, [pc, #144]	; (801cf10 <UTIL_TIMER_IRQ_Handler+0x104>)
 801ce7e:	681b      	ldr	r3, [r3, #0]
 801ce80:	695a      	ldr	r2, [r3, #20]
 801ce82:	4b23      	ldr	r3, [pc, #140]	; (801cf10 <UTIL_TIMER_IRQ_Handler+0x104>)
 801ce84:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 801ce86:	69fb      	ldr	r3, [r7, #28]
 801ce88:	2200      	movs	r2, #0
 801ce8a:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801ce8c:	69fb      	ldr	r3, [r7, #28]
 801ce8e:	2200      	movs	r2, #0
 801ce90:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801ce92:	69fb      	ldr	r3, [r7, #28]
 801ce94:	68da      	ldr	r2, [r3, #12]
 801ce96:	69fb      	ldr	r3, [r7, #28]
 801ce98:	691b      	ldr	r3, [r3, #16]
 801ce9a:	0018      	movs	r0, r3
 801ce9c:	4790      	blx	r2
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801ce9e:	69fb      	ldr	r3, [r7, #28]
 801cea0:	7adb      	ldrb	r3, [r3, #11]
 801cea2:	2b01      	cmp	r3, #1
 801cea4:	d107      	bne.n	801ceb6 <UTIL_TIMER_IRQ_Handler+0xaa>
 801cea6:	69fb      	ldr	r3, [r7, #28]
 801cea8:	7a9b      	ldrb	r3, [r3, #10]
 801ceaa:	2b00      	cmp	r3, #0
 801ceac:	d103      	bne.n	801ceb6 <UTIL_TIMER_IRQ_Handler+0xaa>
      {
        (void)UTIL_TIMER_Start(cur);
 801ceae:	69fb      	ldr	r3, [r7, #28]
 801ceb0:	0018      	movs	r0, r3
 801ceb2:	f7ff fe87 	bl	801cbc4 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801ceb6:	4b16      	ldr	r3, [pc, #88]	; (801cf10 <UTIL_TIMER_IRQ_Handler+0x104>)
 801ceb8:	681b      	ldr	r3, [r3, #0]
 801ceba:	2b00      	cmp	r3, #0
 801cebc:	d00d      	beq.n	801ceda <UTIL_TIMER_IRQ_Handler+0xce>
 801cebe:	4b14      	ldr	r3, [pc, #80]	; (801cf10 <UTIL_TIMER_IRQ_Handler+0x104>)
 801cec0:	681b      	ldr	r3, [r3, #0]
 801cec2:	681b      	ldr	r3, [r3, #0]
 801cec4:	2b00      	cmp	r3, #0
 801cec6:	d0d6      	beq.n	801ce76 <UTIL_TIMER_IRQ_Handler+0x6a>
 801cec8:	4b11      	ldr	r3, [pc, #68]	; (801cf10 <UTIL_TIMER_IRQ_Handler+0x104>)
 801ceca:	681b      	ldr	r3, [r3, #0]
 801cecc:	681c      	ldr	r4, [r3, #0]
 801cece:	4b0f      	ldr	r3, [pc, #60]	; (801cf0c <UTIL_TIMER_IRQ_Handler+0x100>)
 801ced0:	699b      	ldr	r3, [r3, #24]
 801ced2:	4798      	blx	r3
 801ced4:	0003      	movs	r3, r0
 801ced6:	429c      	cmp	r4, r3
 801ced8:	d3cd      	bcc.n	801ce76 <UTIL_TIMER_IRQ_Handler+0x6a>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801ceda:	4b0d      	ldr	r3, [pc, #52]	; (801cf10 <UTIL_TIMER_IRQ_Handler+0x104>)
 801cedc:	681b      	ldr	r3, [r3, #0]
 801cede:	2b00      	cmp	r3, #0
 801cee0:	d009      	beq.n	801cef6 <UTIL_TIMER_IRQ_Handler+0xea>
 801cee2:	4b0b      	ldr	r3, [pc, #44]	; (801cf10 <UTIL_TIMER_IRQ_Handler+0x104>)
 801cee4:	681b      	ldr	r3, [r3, #0]
 801cee6:	7a1b      	ldrb	r3, [r3, #8]
 801cee8:	2b00      	cmp	r3, #0
 801ceea:	d104      	bne.n	801cef6 <UTIL_TIMER_IRQ_Handler+0xea>
  {
    TimerSetTimeout( TimerListHead );
 801ceec:	4b08      	ldr	r3, [pc, #32]	; (801cf10 <UTIL_TIMER_IRQ_Handler+0x104>)
 801ceee:	681b      	ldr	r3, [r3, #0]
 801cef0:	0018      	movs	r0, r3
 801cef2:	f000 f85d 	bl	801cfb0 <TimerSetTimeout>
 801cef6:	69bb      	ldr	r3, [r7, #24]
 801cef8:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cefa:	687b      	ldr	r3, [r7, #4]
 801cefc:	f383 8810 	msr	PRIMASK, r3
}
 801cf00:	46c0      	nop			; (mov r8, r8)
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801cf02:	46c0      	nop			; (mov r8, r8)
 801cf04:	46bd      	mov	sp, r7
 801cf06:	b009      	add	sp, #36	; 0x24
 801cf08:	bd90      	pop	{r4, r7, pc}
 801cf0a:	46c0      	nop			; (mov r8, r8)
 801cf0c:	0801ee24 	.word	0x0801ee24
 801cf10:	20001340 	.word	0x20001340

0801cf14 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801cf14:	b580      	push	{r7, lr}
 801cf16:	b082      	sub	sp, #8
 801cf18:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801cf1a:	4b07      	ldr	r3, [pc, #28]	; (801cf38 <UTIL_TIMER_GetCurrentTime+0x24>)
 801cf1c:	69db      	ldr	r3, [r3, #28]
 801cf1e:	4798      	blx	r3
 801cf20:	0003      	movs	r3, r0
 801cf22:	607b      	str	r3, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801cf24:	4b04      	ldr	r3, [pc, #16]	; (801cf38 <UTIL_TIMER_GetCurrentTime+0x24>)
 801cf26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cf28:	687a      	ldr	r2, [r7, #4]
 801cf2a:	0010      	movs	r0, r2
 801cf2c:	4798      	blx	r3
 801cf2e:	0003      	movs	r3, r0
}
 801cf30:	0018      	movs	r0, r3
 801cf32:	46bd      	mov	sp, r7
 801cf34:	b002      	add	sp, #8
 801cf36:	bd80      	pop	{r7, pc}
 801cf38:	0801ee24 	.word	0x0801ee24

0801cf3c <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801cf3c:	b580      	push	{r7, lr}
 801cf3e:	b084      	sub	sp, #16
 801cf40:	af00      	add	r7, sp, #0
 801cf42:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801cf44:	4b0b      	ldr	r3, [pc, #44]	; (801cf74 <UTIL_TIMER_GetElapsedTime+0x38>)
 801cf46:	69db      	ldr	r3, [r3, #28]
 801cf48:	4798      	blx	r3
 801cf4a:	0003      	movs	r3, r0
 801cf4c:	60fb      	str	r3, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801cf4e:	4b09      	ldr	r3, [pc, #36]	; (801cf74 <UTIL_TIMER_GetElapsedTime+0x38>)
 801cf50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cf52:	687a      	ldr	r2, [r7, #4]
 801cf54:	0010      	movs	r0, r2
 801cf56:	4798      	blx	r3
 801cf58:	0003      	movs	r3, r0
 801cf5a:	60bb      	str	r3, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801cf5c:	4b05      	ldr	r3, [pc, #20]	; (801cf74 <UTIL_TIMER_GetElapsedTime+0x38>)
 801cf5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cf60:	68f9      	ldr	r1, [r7, #12]
 801cf62:	68ba      	ldr	r2, [r7, #8]
 801cf64:	1a8a      	subs	r2, r1, r2
 801cf66:	0010      	movs	r0, r2
 801cf68:	4798      	blx	r3
 801cf6a:	0003      	movs	r3, r0
}
 801cf6c:	0018      	movs	r0, r3
 801cf6e:	46bd      	mov	sp, r7
 801cf70:	b004      	add	sp, #16
 801cf72:	bd80      	pop	{r7, pc}
 801cf74:	0801ee24 	.word	0x0801ee24

0801cf78 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801cf78:	b580      	push	{r7, lr}
 801cf7a:	b084      	sub	sp, #16
 801cf7c:	af00      	add	r7, sp, #0
 801cf7e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801cf80:	4b0a      	ldr	r3, [pc, #40]	; (801cfac <TimerExists+0x34>)
 801cf82:	681b      	ldr	r3, [r3, #0]
 801cf84:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801cf86:	e008      	b.n	801cf9a <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801cf88:	68fa      	ldr	r2, [r7, #12]
 801cf8a:	687b      	ldr	r3, [r7, #4]
 801cf8c:	429a      	cmp	r2, r3
 801cf8e:	d101      	bne.n	801cf94 <TimerExists+0x1c>
    {
      return true;
 801cf90:	2301      	movs	r3, #1
 801cf92:	e006      	b.n	801cfa2 <TimerExists+0x2a>
    }
    cur = cur->Next;
 801cf94:	68fb      	ldr	r3, [r7, #12]
 801cf96:	695b      	ldr	r3, [r3, #20]
 801cf98:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801cf9a:	68fb      	ldr	r3, [r7, #12]
 801cf9c:	2b00      	cmp	r3, #0
 801cf9e:	d1f3      	bne.n	801cf88 <TimerExists+0x10>
  }
  return false;
 801cfa0:	2300      	movs	r3, #0
}
 801cfa2:	0018      	movs	r0, r3
 801cfa4:	46bd      	mov	sp, r7
 801cfa6:	b004      	add	sp, #16
 801cfa8:	bd80      	pop	{r7, pc}
 801cfaa:	46c0      	nop			; (mov r8, r8)
 801cfac:	20001340 	.word	0x20001340

0801cfb0 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801cfb0:	b590      	push	{r4, r7, lr}
 801cfb2:	b085      	sub	sp, #20
 801cfb4:	af00      	add	r7, sp, #0
 801cfb6:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801cfb8:	4b11      	ldr	r3, [pc, #68]	; (801d000 <TimerSetTimeout+0x50>)
 801cfba:	6a1b      	ldr	r3, [r3, #32]
 801cfbc:	4798      	blx	r3
 801cfbe:	0003      	movs	r3, r0
 801cfc0:	60fb      	str	r3, [r7, #12]
  TimerObject->IsPending = 1;
 801cfc2:	687b      	ldr	r3, [r7, #4]
 801cfc4:	2201      	movs	r2, #1
 801cfc6:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801cfc8:	687b      	ldr	r3, [r7, #4]
 801cfca:	681c      	ldr	r4, [r3, #0]
 801cfcc:	4b0c      	ldr	r3, [pc, #48]	; (801d000 <TimerSetTimeout+0x50>)
 801cfce:	699b      	ldr	r3, [r3, #24]
 801cfd0:	4798      	blx	r3
 801cfd2:	0002      	movs	r2, r0
 801cfd4:	68fb      	ldr	r3, [r7, #12]
 801cfd6:	18d3      	adds	r3, r2, r3
 801cfd8:	429c      	cmp	r4, r3
 801cfda:	d207      	bcs.n	801cfec <TimerSetTimeout+0x3c>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801cfdc:	4b08      	ldr	r3, [pc, #32]	; (801d000 <TimerSetTimeout+0x50>)
 801cfde:	699b      	ldr	r3, [r3, #24]
 801cfe0:	4798      	blx	r3
 801cfe2:	0002      	movs	r2, r0
 801cfe4:	68fb      	ldr	r3, [r7, #12]
 801cfe6:	18d2      	adds	r2, r2, r3
 801cfe8:	687b      	ldr	r3, [r7, #4]
 801cfea:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801cfec:	4b04      	ldr	r3, [pc, #16]	; (801d000 <TimerSetTimeout+0x50>)
 801cfee:	689a      	ldr	r2, [r3, #8]
 801cff0:	687b      	ldr	r3, [r7, #4]
 801cff2:	681b      	ldr	r3, [r3, #0]
 801cff4:	0018      	movs	r0, r3
 801cff6:	4790      	blx	r2
}
 801cff8:	46c0      	nop			; (mov r8, r8)
 801cffa:	46bd      	mov	sp, r7
 801cffc:	b005      	add	sp, #20
 801cffe:	bd90      	pop	{r4, r7, pc}
 801d000:	0801ee24 	.word	0x0801ee24

0801d004 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801d004:	b580      	push	{r7, lr}
 801d006:	b084      	sub	sp, #16
 801d008:	af00      	add	r7, sp, #0
 801d00a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801d00c:	4b13      	ldr	r3, [pc, #76]	; (801d05c <TimerInsertTimer+0x58>)
 801d00e:	681b      	ldr	r3, [r3, #0]
 801d010:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801d012:	4b12      	ldr	r3, [pc, #72]	; (801d05c <TimerInsertTimer+0x58>)
 801d014:	681b      	ldr	r3, [r3, #0]
 801d016:	695b      	ldr	r3, [r3, #20]
 801d018:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801d01a:	e012      	b.n	801d042 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801d01c:	687b      	ldr	r3, [r7, #4]
 801d01e:	681a      	ldr	r2, [r3, #0]
 801d020:	68bb      	ldr	r3, [r7, #8]
 801d022:	681b      	ldr	r3, [r3, #0]
 801d024:	429a      	cmp	r2, r3
 801d026:	d905      	bls.n	801d034 <TimerInsertTimer+0x30>
    {
        cur = next;
 801d028:	68bb      	ldr	r3, [r7, #8]
 801d02a:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801d02c:	68bb      	ldr	r3, [r7, #8]
 801d02e:	695b      	ldr	r3, [r3, #20]
 801d030:	60bb      	str	r3, [r7, #8]
 801d032:	e006      	b.n	801d042 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801d034:	68fb      	ldr	r3, [r7, #12]
 801d036:	687a      	ldr	r2, [r7, #4]
 801d038:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801d03a:	687b      	ldr	r3, [r7, #4]
 801d03c:	68ba      	ldr	r2, [r7, #8]
 801d03e:	615a      	str	r2, [r3, #20]
        return;
 801d040:	e009      	b.n	801d056 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801d042:	68fb      	ldr	r3, [r7, #12]
 801d044:	695b      	ldr	r3, [r3, #20]
 801d046:	2b00      	cmp	r3, #0
 801d048:	d1e8      	bne.n	801d01c <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801d04a:	68fb      	ldr	r3, [r7, #12]
 801d04c:	687a      	ldr	r2, [r7, #4]
 801d04e:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801d050:	687b      	ldr	r3, [r7, #4]
 801d052:	2200      	movs	r2, #0
 801d054:	615a      	str	r2, [r3, #20]
}
 801d056:	46bd      	mov	sp, r7
 801d058:	b004      	add	sp, #16
 801d05a:	bd80      	pop	{r7, pc}
 801d05c:	20001340 	.word	0x20001340

0801d060 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801d060:	b580      	push	{r7, lr}
 801d062:	b084      	sub	sp, #16
 801d064:	af00      	add	r7, sp, #0
 801d066:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801d068:	4b0b      	ldr	r3, [pc, #44]	; (801d098 <TimerInsertNewHeadTimer+0x38>)
 801d06a:	681b      	ldr	r3, [r3, #0]
 801d06c:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801d06e:	68fb      	ldr	r3, [r7, #12]
 801d070:	2b00      	cmp	r3, #0
 801d072:	d002      	beq.n	801d07a <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801d074:	68fb      	ldr	r3, [r7, #12]
 801d076:	2200      	movs	r2, #0
 801d078:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801d07a:	687b      	ldr	r3, [r7, #4]
 801d07c:	68fa      	ldr	r2, [r7, #12]
 801d07e:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801d080:	4b05      	ldr	r3, [pc, #20]	; (801d098 <TimerInsertNewHeadTimer+0x38>)
 801d082:	687a      	ldr	r2, [r7, #4]
 801d084:	601a      	str	r2, [r3, #0]
  TimerSetTimeout( TimerListHead );
 801d086:	4b04      	ldr	r3, [pc, #16]	; (801d098 <TimerInsertNewHeadTimer+0x38>)
 801d088:	681b      	ldr	r3, [r3, #0]
 801d08a:	0018      	movs	r0, r3
 801d08c:	f7ff ff90 	bl	801cfb0 <TimerSetTimeout>
}
 801d090:	46c0      	nop			; (mov r8, r8)
 801d092:	46bd      	mov	sp, r7
 801d094:	b004      	add	sp, #16
 801d096:	bd80      	pop	{r7, pc}
 801d098:	20001340 	.word	0x20001340

0801d09c <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801d09c:	b580      	push	{r7, lr}
 801d09e:	b084      	sub	sp, #16
 801d0a0:	af00      	add	r7, sp, #0
 801d0a2:	6078      	str	r0, [r7, #4]
  int i = 0;
 801d0a4:	2300      	movs	r3, #0
 801d0a6:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801d0a8:	e00e      	b.n	801d0c8 <ee_skip_atoi+0x2c>
 801d0aa:	68fa      	ldr	r2, [r7, #12]
 801d0ac:	0013      	movs	r3, r2
 801d0ae:	009b      	lsls	r3, r3, #2
 801d0b0:	189b      	adds	r3, r3, r2
 801d0b2:	005b      	lsls	r3, r3, #1
 801d0b4:	0018      	movs	r0, r3
 801d0b6:	687b      	ldr	r3, [r7, #4]
 801d0b8:	681b      	ldr	r3, [r3, #0]
 801d0ba:	1c59      	adds	r1, r3, #1
 801d0bc:	687a      	ldr	r2, [r7, #4]
 801d0be:	6011      	str	r1, [r2, #0]
 801d0c0:	781b      	ldrb	r3, [r3, #0]
 801d0c2:	18c3      	adds	r3, r0, r3
 801d0c4:	3b30      	subs	r3, #48	; 0x30
 801d0c6:	60fb      	str	r3, [r7, #12]
 801d0c8:	687b      	ldr	r3, [r7, #4]
 801d0ca:	681b      	ldr	r3, [r3, #0]
 801d0cc:	781b      	ldrb	r3, [r3, #0]
 801d0ce:	2b2f      	cmp	r3, #47	; 0x2f
 801d0d0:	d904      	bls.n	801d0dc <ee_skip_atoi+0x40>
 801d0d2:	687b      	ldr	r3, [r7, #4]
 801d0d4:	681b      	ldr	r3, [r3, #0]
 801d0d6:	781b      	ldrb	r3, [r3, #0]
 801d0d8:	2b39      	cmp	r3, #57	; 0x39
 801d0da:	d9e6      	bls.n	801d0aa <ee_skip_atoi+0xe>
  return i;
 801d0dc:	68fb      	ldr	r3, [r7, #12]
}
 801d0de:	0018      	movs	r0, r3
 801d0e0:	46bd      	mov	sp, r7
 801d0e2:	b004      	add	sp, #16
 801d0e4:	bd80      	pop	{r7, pc}
	...

0801d0e8 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801d0e8:	b580      	push	{r7, lr}
 801d0ea:	b098      	sub	sp, #96	; 0x60
 801d0ec:	af00      	add	r7, sp, #0
 801d0ee:	60f8      	str	r0, [r7, #12]
 801d0f0:	60b9      	str	r1, [r7, #8]
 801d0f2:	607a      	str	r2, [r7, #4]
 801d0f4:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801d0f6:	4b72      	ldr	r3, [pc, #456]	; (801d2c0 <ee_number+0x1d8>)
 801d0f8:	681b      	ldr	r3, [r3, #0]
 801d0fa:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801d0fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d0fe:	2240      	movs	r2, #64	; 0x40
 801d100:	4013      	ands	r3, r2
 801d102:	d002      	beq.n	801d10a <ee_number+0x22>
 801d104:	4b6f      	ldr	r3, [pc, #444]	; (801d2c4 <ee_number+0x1dc>)
 801d106:	681b      	ldr	r3, [r3, #0]
 801d108:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801d10a:	683b      	ldr	r3, [r7, #0]
 801d10c:	2b01      	cmp	r3, #1
 801d10e:	dd02      	ble.n	801d116 <ee_number+0x2e>
 801d110:	683b      	ldr	r3, [r7, #0]
 801d112:	2b24      	cmp	r3, #36	; 0x24
 801d114:	dd01      	ble.n	801d11a <ee_number+0x32>
 801d116:	2300      	movs	r3, #0
 801d118:	e0cd      	b.n	801d2b6 <ee_number+0x1ce>
  
  c = (type & ZEROPAD) ? '0' : ' ';
 801d11a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d11c:	2201      	movs	r2, #1
 801d11e:	4013      	ands	r3, r2
 801d120:	d001      	beq.n	801d126 <ee_number+0x3e>
 801d122:	2230      	movs	r2, #48	; 0x30
 801d124:	e000      	b.n	801d128 <ee_number+0x40>
 801d126:	2220      	movs	r2, #32
 801d128:	2353      	movs	r3, #83	; 0x53
 801d12a:	18fb      	adds	r3, r7, r3
 801d12c:	701a      	strb	r2, [r3, #0]
  sign = 0;
 801d12e:	215f      	movs	r1, #95	; 0x5f
 801d130:	187b      	adds	r3, r7, r1
 801d132:	2200      	movs	r2, #0
 801d134:	701a      	strb	r2, [r3, #0]
  if (type & SIGN)
 801d136:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d138:	2202      	movs	r2, #2
 801d13a:	4013      	ands	r3, r2
 801d13c:	d00b      	beq.n	801d156 <ee_number+0x6e>
  {
    if (num < 0)
 801d13e:	687b      	ldr	r3, [r7, #4]
 801d140:	2b00      	cmp	r3, #0
 801d142:	da08      	bge.n	801d156 <ee_number+0x6e>
    {
      sign = '-';
 801d144:	187b      	adds	r3, r7, r1
 801d146:	222d      	movs	r2, #45	; 0x2d
 801d148:	701a      	strb	r2, [r3, #0]
      num = -num;
 801d14a:	687b      	ldr	r3, [r7, #4]
 801d14c:	425b      	negs	r3, r3
 801d14e:	607b      	str	r3, [r7, #4]
      size--;
 801d150:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d152:	3b01      	subs	r3, #1
 801d154:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif
  
  i = 0;
 801d156:	2300      	movs	r3, #0
 801d158:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 801d15a:	687b      	ldr	r3, [r7, #4]
 801d15c:	2b00      	cmp	r3, #0
 801d15e:	d120      	bne.n	801d1a2 <ee_number+0xba>
    tmp[i++] = '0';
 801d160:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d162:	1c5a      	adds	r2, r3, #1
 801d164:	657a      	str	r2, [r7, #84]	; 0x54
 801d166:	2210      	movs	r2, #16
 801d168:	18ba      	adds	r2, r7, r2
 801d16a:	2130      	movs	r1, #48	; 0x30
 801d16c:	54d1      	strb	r1, [r2, r3]
 801d16e:	e01b      	b.n	801d1a8 <ee_number+0xc0>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801d170:	687b      	ldr	r3, [r7, #4]
 801d172:	683a      	ldr	r2, [r7, #0]
 801d174:	0011      	movs	r1, r2
 801d176:	0018      	movs	r0, r3
 801d178:	f7e3 f85e 	bl	8000238 <__aeabi_uidivmod>
 801d17c:	000b      	movs	r3, r1
 801d17e:	001a      	movs	r2, r3
 801d180:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801d182:	189a      	adds	r2, r3, r2
 801d184:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d186:	1c59      	adds	r1, r3, #1
 801d188:	6579      	str	r1, [r7, #84]	; 0x54
 801d18a:	7811      	ldrb	r1, [r2, #0]
 801d18c:	2210      	movs	r2, #16
 801d18e:	18ba      	adds	r2, r7, r2
 801d190:	54d1      	strb	r1, [r2, r3]
      num = ((unsigned long) num) / (unsigned) base;
 801d192:	687b      	ldr	r3, [r7, #4]
 801d194:	683a      	ldr	r2, [r7, #0]
 801d196:	0011      	movs	r1, r2
 801d198:	0018      	movs	r0, r3
 801d19a:	f7e2 ffc7 	bl	800012c <__udivsi3>
 801d19e:	0003      	movs	r3, r0
 801d1a0:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801d1a2:	687b      	ldr	r3, [r7, #4]
 801d1a4:	2b00      	cmp	r3, #0
 801d1a6:	d1e3      	bne.n	801d170 <ee_number+0x88>
    }
  }

  if (i > precision) precision = i;
 801d1a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d1aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d1ac:	429a      	cmp	r2, r3
 801d1ae:	dd01      	ble.n	801d1b4 <ee_number+0xcc>
 801d1b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d1b2:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 801d1b4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801d1b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d1b8:	1ad3      	subs	r3, r2, r3
 801d1ba:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801d1bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d1be:	2201      	movs	r2, #1
 801d1c0:	4013      	ands	r3, r2
 801d1c2:	d112      	bne.n	801d1ea <ee_number+0x102>
 801d1c4:	e00c      	b.n	801d1e0 <ee_number+0xf8>
 801d1c6:	68fb      	ldr	r3, [r7, #12]
 801d1c8:	1c5a      	adds	r2, r3, #1
 801d1ca:	60fa      	str	r2, [r7, #12]
 801d1cc:	2220      	movs	r2, #32
 801d1ce:	701a      	strb	r2, [r3, #0]
 801d1d0:	68bb      	ldr	r3, [r7, #8]
 801d1d2:	3b01      	subs	r3, #1
 801d1d4:	60bb      	str	r3, [r7, #8]
 801d1d6:	68bb      	ldr	r3, [r7, #8]
 801d1d8:	2b00      	cmp	r3, #0
 801d1da:	d101      	bne.n	801d1e0 <ee_number+0xf8>
 801d1dc:	68fb      	ldr	r3, [r7, #12]
 801d1de:	e06a      	b.n	801d2b6 <ee_number+0x1ce>
 801d1e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d1e2:	1e5a      	subs	r2, r3, #1
 801d1e4:	66ba      	str	r2, [r7, #104]	; 0x68
 801d1e6:	2b00      	cmp	r3, #0
 801d1e8:	dced      	bgt.n	801d1c6 <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801d1ea:	215f      	movs	r1, #95	; 0x5f
 801d1ec:	187b      	adds	r3, r7, r1
 801d1ee:	781b      	ldrb	r3, [r3, #0]
 801d1f0:	2b00      	cmp	r3, #0
 801d1f2:	d01c      	beq.n	801d22e <ee_number+0x146>
 801d1f4:	68fb      	ldr	r3, [r7, #12]
 801d1f6:	1c5a      	adds	r2, r3, #1
 801d1f8:	60fa      	str	r2, [r7, #12]
 801d1fa:	187a      	adds	r2, r7, r1
 801d1fc:	7812      	ldrb	r2, [r2, #0]
 801d1fe:	701a      	strb	r2, [r3, #0]
 801d200:	68bb      	ldr	r3, [r7, #8]
 801d202:	3b01      	subs	r3, #1
 801d204:	60bb      	str	r3, [r7, #8]
 801d206:	68bb      	ldr	r3, [r7, #8]
 801d208:	2b00      	cmp	r3, #0
 801d20a:	d110      	bne.n	801d22e <ee_number+0x146>
 801d20c:	68fb      	ldr	r3, [r7, #12]
 801d20e:	e052      	b.n	801d2b6 <ee_number+0x1ce>
    }
  }
#endif
  
#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801d210:	68fb      	ldr	r3, [r7, #12]
 801d212:	1c5a      	adds	r2, r3, #1
 801d214:	60fa      	str	r2, [r7, #12]
 801d216:	2253      	movs	r2, #83	; 0x53
 801d218:	18ba      	adds	r2, r7, r2
 801d21a:	7812      	ldrb	r2, [r2, #0]
 801d21c:	701a      	strb	r2, [r3, #0]
 801d21e:	68bb      	ldr	r3, [r7, #8]
 801d220:	3b01      	subs	r3, #1
 801d222:	60bb      	str	r3, [r7, #8]
 801d224:	68bb      	ldr	r3, [r7, #8]
 801d226:	2b00      	cmp	r3, #0
 801d228:	d101      	bne.n	801d22e <ee_number+0x146>
 801d22a:	68fb      	ldr	r3, [r7, #12]
 801d22c:	e043      	b.n	801d2b6 <ee_number+0x1ce>
 801d22e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d230:	1e5a      	subs	r2, r3, #1
 801d232:	66ba      	str	r2, [r7, #104]	; 0x68
 801d234:	2b00      	cmp	r3, #0
 801d236:	dceb      	bgt.n	801d210 <ee_number+0x128>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801d238:	e00c      	b.n	801d254 <ee_number+0x16c>
 801d23a:	68fb      	ldr	r3, [r7, #12]
 801d23c:	1c5a      	adds	r2, r3, #1
 801d23e:	60fa      	str	r2, [r7, #12]
 801d240:	2230      	movs	r2, #48	; 0x30
 801d242:	701a      	strb	r2, [r3, #0]
 801d244:	68bb      	ldr	r3, [r7, #8]
 801d246:	3b01      	subs	r3, #1
 801d248:	60bb      	str	r3, [r7, #8]
 801d24a:	68bb      	ldr	r3, [r7, #8]
 801d24c:	2b00      	cmp	r3, #0
 801d24e:	d101      	bne.n	801d254 <ee_number+0x16c>
 801d250:	68fb      	ldr	r3, [r7, #12]
 801d252:	e030      	b.n	801d2b6 <ee_number+0x1ce>
 801d254:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d256:	1e5a      	subs	r2, r3, #1
 801d258:	66fa      	str	r2, [r7, #108]	; 0x6c
 801d25a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d25c:	429a      	cmp	r2, r3
 801d25e:	dbec      	blt.n	801d23a <ee_number+0x152>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801d260:	e010      	b.n	801d284 <ee_number+0x19c>
 801d262:	68fb      	ldr	r3, [r7, #12]
 801d264:	1c5a      	adds	r2, r3, #1
 801d266:	60fa      	str	r2, [r7, #12]
 801d268:	2210      	movs	r2, #16
 801d26a:	18b9      	adds	r1, r7, r2
 801d26c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d26e:	188a      	adds	r2, r1, r2
 801d270:	7812      	ldrb	r2, [r2, #0]
 801d272:	701a      	strb	r2, [r3, #0]
 801d274:	68bb      	ldr	r3, [r7, #8]
 801d276:	3b01      	subs	r3, #1
 801d278:	60bb      	str	r3, [r7, #8]
 801d27a:	68bb      	ldr	r3, [r7, #8]
 801d27c:	2b00      	cmp	r3, #0
 801d27e:	d101      	bne.n	801d284 <ee_number+0x19c>
 801d280:	68fb      	ldr	r3, [r7, #12]
 801d282:	e018      	b.n	801d2b6 <ee_number+0x1ce>
 801d284:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d286:	1e5a      	subs	r2, r3, #1
 801d288:	657a      	str	r2, [r7, #84]	; 0x54
 801d28a:	2b00      	cmp	r3, #0
 801d28c:	dce9      	bgt.n	801d262 <ee_number+0x17a>
  while (size-- > 0) ASSIGN_STR(' ');
 801d28e:	e00c      	b.n	801d2aa <ee_number+0x1c2>
 801d290:	68fb      	ldr	r3, [r7, #12]
 801d292:	1c5a      	adds	r2, r3, #1
 801d294:	60fa      	str	r2, [r7, #12]
 801d296:	2220      	movs	r2, #32
 801d298:	701a      	strb	r2, [r3, #0]
 801d29a:	68bb      	ldr	r3, [r7, #8]
 801d29c:	3b01      	subs	r3, #1
 801d29e:	60bb      	str	r3, [r7, #8]
 801d2a0:	68bb      	ldr	r3, [r7, #8]
 801d2a2:	2b00      	cmp	r3, #0
 801d2a4:	d101      	bne.n	801d2aa <ee_number+0x1c2>
 801d2a6:	68fb      	ldr	r3, [r7, #12]
 801d2a8:	e005      	b.n	801d2b6 <ee_number+0x1ce>
 801d2aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d2ac:	1e5a      	subs	r2, r3, #1
 801d2ae:	66ba      	str	r2, [r7, #104]	; 0x68
 801d2b0:	2b00      	cmp	r3, #0
 801d2b2:	dced      	bgt.n	801d290 <ee_number+0x1a8>

  return str;
 801d2b4:	68fb      	ldr	r3, [r7, #12]
}
 801d2b6:	0018      	movs	r0, r3
 801d2b8:	46bd      	mov	sp, r7
 801d2ba:	b018      	add	sp, #96	; 0x60
 801d2bc:	bd80      	pop	{r7, pc}
 801d2be:	46c0      	nop			; (mov r8, r8)
 801d2c0:	200001d0 	.word	0x200001d0
 801d2c4:	200001d4 	.word	0x200001d4

0801d2c8 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801d2c8:	b590      	push	{r4, r7, lr}
 801d2ca:	b093      	sub	sp, #76	; 0x4c
 801d2cc:	af04      	add	r7, sp, #16
 801d2ce:	60f8      	str	r0, [r7, #12]
 801d2d0:	60b9      	str	r1, [r7, #8]
 801d2d2:	607a      	str	r2, [r7, #4]
 801d2d4:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801d2d6:	68bb      	ldr	r3, [r7, #8]
 801d2d8:	2b00      	cmp	r3, #0
 801d2da:	dc01      	bgt.n	801d2e0 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801d2dc:	2300      	movs	r3, #0
 801d2de:	e104      	b.n	801d4ea <tiny_vsnprintf_like+0x222>
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801d2e0:	68fb      	ldr	r3, [r7, #12]
 801d2e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d2e4:	e0ec      	b.n	801d4c0 <tiny_vsnprintf_like+0x1f8>
  {
    CHECK_STR_SIZE(buf, str, size);
 801d2e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d2e8:	68fb      	ldr	r3, [r7, #12]
 801d2ea:	1ad2      	subs	r2, r2, r3
 801d2ec:	68bb      	ldr	r3, [r7, #8]
 801d2ee:	3b01      	subs	r3, #1
 801d2f0:	429a      	cmp	r2, r3
 801d2f2:	db00      	blt.n	801d2f6 <tiny_vsnprintf_like+0x2e>
 801d2f4:	e0f2      	b.n	801d4dc <tiny_vsnprintf_like+0x214>
    
    if (*fmt != '%')
 801d2f6:	687b      	ldr	r3, [r7, #4]
 801d2f8:	781b      	ldrb	r3, [r3, #0]
 801d2fa:	2b25      	cmp	r3, #37	; 0x25
 801d2fc:	d006      	beq.n	801d30c <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801d2fe:	687a      	ldr	r2, [r7, #4]
 801d300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d302:	1c59      	adds	r1, r3, #1
 801d304:	62f9      	str	r1, [r7, #44]	; 0x2c
 801d306:	7812      	ldrb	r2, [r2, #0]
 801d308:	701a      	strb	r2, [r3, #0]
      continue;
 801d30a:	e0d6      	b.n	801d4ba <tiny_vsnprintf_like+0x1f2>
    }
                  
    // Process flags
    flags = 0;
 801d30c:	2300      	movs	r3, #0
 801d30e:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801d310:	687b      	ldr	r3, [r7, #4]
 801d312:	3301      	adds	r3, #1
 801d314:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801d316:	687b      	ldr	r3, [r7, #4]
 801d318:	781b      	ldrb	r3, [r3, #0]
 801d31a:	2b30      	cmp	r3, #48	; 0x30
 801d31c:	d103      	bne.n	801d326 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801d31e:	6a3b      	ldr	r3, [r7, #32]
 801d320:	2201      	movs	r2, #1
 801d322:	4313      	orrs	r3, r2
 801d324:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif
    
    // Get field width
    field_width = -1;
 801d326:	2301      	movs	r3, #1
 801d328:	425b      	negs	r3, r3
 801d32a:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801d32c:	687b      	ldr	r3, [r7, #4]
 801d32e:	781b      	ldrb	r3, [r3, #0]
 801d330:	2b2f      	cmp	r3, #47	; 0x2f
 801d332:	d909      	bls.n	801d348 <tiny_vsnprintf_like+0x80>
 801d334:	687b      	ldr	r3, [r7, #4]
 801d336:	781b      	ldrb	r3, [r3, #0]
 801d338:	2b39      	cmp	r3, #57	; 0x39
 801d33a:	d805      	bhi.n	801d348 <tiny_vsnprintf_like+0x80>
      field_width = ee_skip_atoi(&fmt);
 801d33c:	1d3b      	adds	r3, r7, #4
 801d33e:	0018      	movs	r0, r3
 801d340:	f7ff feac 	bl	801d09c <ee_skip_atoi>
 801d344:	0003      	movs	r3, r0
 801d346:	61fb      	str	r3, [r7, #28]
      }
    }
#endif
    
    // Get the precision
    precision = -1;
 801d348:	2301      	movs	r3, #1
 801d34a:	425b      	negs	r3, r3
 801d34c:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif
    
    // Get the conversion qualifier
    qualifier = -1;
 801d34e:	2301      	movs	r3, #1
 801d350:	425b      	negs	r3, r3
 801d352:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif
    
    // Default base
    base = 10;
 801d354:	230a      	movs	r3, #10
 801d356:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 801d358:	687b      	ldr	r3, [r7, #4]
 801d35a:	781b      	ldrb	r3, [r3, #0]
 801d35c:	3b58      	subs	r3, #88	; 0x58
 801d35e:	2b20      	cmp	r3, #32
 801d360:	d854      	bhi.n	801d40c <tiny_vsnprintf_like+0x144>
 801d362:	009a      	lsls	r2, r3, #2
 801d364:	4b63      	ldr	r3, [pc, #396]	; (801d4f4 <tiny_vsnprintf_like+0x22c>)
 801d366:	18d3      	adds	r3, r2, r3
 801d368:	681b      	ldr	r3, [r3, #0]
 801d36a:	469f      	mov	pc, r3
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801d36c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d36e:	1c5a      	adds	r2, r3, #1
 801d370:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d372:	2220      	movs	r2, #32
 801d374:	701a      	strb	r2, [r3, #0]
 801d376:	69fb      	ldr	r3, [r7, #28]
 801d378:	3b01      	subs	r3, #1
 801d37a:	61fb      	str	r3, [r7, #28]
 801d37c:	69fb      	ldr	r3, [r7, #28]
 801d37e:	2b00      	cmp	r3, #0
 801d380:	dcf4      	bgt.n	801d36c <tiny_vsnprintf_like+0xa4>
        *str++ = (unsigned char) va_arg(args, int);
 801d382:	683b      	ldr	r3, [r7, #0]
 801d384:	1d1a      	adds	r2, r3, #4
 801d386:	603a      	str	r2, [r7, #0]
 801d388:	6819      	ldr	r1, [r3, #0]
 801d38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d38c:	1c5a      	adds	r2, r3, #1
 801d38e:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d390:	b2ca      	uxtb	r2, r1
 801d392:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801d394:	e091      	b.n	801d4ba <tiny_vsnprintf_like+0x1f2>

      case 's':
        s = va_arg(args, char *);
 801d396:	683b      	ldr	r3, [r7, #0]
 801d398:	1d1a      	adds	r2, r3, #4
 801d39a:	603a      	str	r2, [r7, #0]
 801d39c:	681b      	ldr	r3, [r3, #0]
 801d39e:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801d3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d3a2:	2b00      	cmp	r3, #0
 801d3a4:	d101      	bne.n	801d3aa <tiny_vsnprintf_like+0xe2>
 801d3a6:	4b54      	ldr	r3, [pc, #336]	; (801d4f8 <tiny_vsnprintf_like+0x230>)
 801d3a8:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801d3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d3ac:	0018      	movs	r0, r3
 801d3ae:	f7e2 feab 	bl	8000108 <strlen>
 801d3b2:	0003      	movs	r3, r0
 801d3b4:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801d3b6:	e004      	b.n	801d3c2 <tiny_vsnprintf_like+0xfa>
 801d3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d3ba:	1c5a      	adds	r2, r3, #1
 801d3bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d3be:	2220      	movs	r2, #32
 801d3c0:	701a      	strb	r2, [r3, #0]
 801d3c2:	69fb      	ldr	r3, [r7, #28]
 801d3c4:	1e5a      	subs	r2, r3, #1
 801d3c6:	61fa      	str	r2, [r7, #28]
 801d3c8:	693a      	ldr	r2, [r7, #16]
 801d3ca:	429a      	cmp	r2, r3
 801d3cc:	dbf4      	blt.n	801d3b8 <tiny_vsnprintf_like+0xf0>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801d3ce:	2300      	movs	r3, #0
 801d3d0:	62bb      	str	r3, [r7, #40]	; 0x28
 801d3d2:	e00a      	b.n	801d3ea <tiny_vsnprintf_like+0x122>
 801d3d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d3d6:	1c53      	adds	r3, r2, #1
 801d3d8:	627b      	str	r3, [r7, #36]	; 0x24
 801d3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d3dc:	1c59      	adds	r1, r3, #1
 801d3de:	62f9      	str	r1, [r7, #44]	; 0x2c
 801d3e0:	7812      	ldrb	r2, [r2, #0]
 801d3e2:	701a      	strb	r2, [r3, #0]
 801d3e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d3e6:	3301      	adds	r3, #1
 801d3e8:	62bb      	str	r3, [r7, #40]	; 0x28
 801d3ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d3ec:	693b      	ldr	r3, [r7, #16]
 801d3ee:	429a      	cmp	r2, r3
 801d3f0:	dbf0      	blt.n	801d3d4 <tiny_vsnprintf_like+0x10c>
#ifdef TINY_PRINTF
#else        
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801d3f2:	e062      	b.n	801d4ba <tiny_vsnprintf_like+0x1f2>
        base = 8;
        break;
#endif
      
      case 'X':
        flags |= UPPERCASE;
 801d3f4:	6a3b      	ldr	r3, [r7, #32]
 801d3f6:	2240      	movs	r2, #64	; 0x40
 801d3f8:	4313      	orrs	r3, r2
 801d3fa:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801d3fc:	2310      	movs	r3, #16
 801d3fe:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801d400:	e02d      	b.n	801d45e <tiny_vsnprintf_like+0x196>

      case 'd':
      case 'i':
        flags |= SIGN;
 801d402:	6a3b      	ldr	r3, [r7, #32]
 801d404:	2202      	movs	r2, #2
 801d406:	4313      	orrs	r3, r2
 801d408:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801d40a:	e025      	b.n	801d458 <tiny_vsnprintf_like+0x190>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801d40c:	687b      	ldr	r3, [r7, #4]
 801d40e:	781b      	ldrb	r3, [r3, #0]
 801d410:	2b25      	cmp	r3, #37	; 0x25
 801d412:	d004      	beq.n	801d41e <tiny_vsnprintf_like+0x156>
 801d414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d416:	1c5a      	adds	r2, r3, #1
 801d418:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d41a:	2225      	movs	r2, #37	; 0x25
 801d41c:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801d41e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d420:	68fb      	ldr	r3, [r7, #12]
 801d422:	1ad2      	subs	r2, r2, r3
 801d424:	68bb      	ldr	r3, [r7, #8]
 801d426:	3b01      	subs	r3, #1
 801d428:	429a      	cmp	r2, r3
 801d42a:	da17      	bge.n	801d45c <tiny_vsnprintf_like+0x194>
        if (*fmt)
 801d42c:	687b      	ldr	r3, [r7, #4]
 801d42e:	781b      	ldrb	r3, [r3, #0]
 801d430:	2b00      	cmp	r3, #0
 801d432:	d006      	beq.n	801d442 <tiny_vsnprintf_like+0x17a>
          *str++ = *fmt;
 801d434:	687a      	ldr	r2, [r7, #4]
 801d436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d438:	1c59      	adds	r1, r3, #1
 801d43a:	62f9      	str	r1, [r7, #44]	; 0x2c
 801d43c:	7812      	ldrb	r2, [r2, #0]
 801d43e:	701a      	strb	r2, [r3, #0]
 801d440:	e002      	b.n	801d448 <tiny_vsnprintf_like+0x180>
        else
          --fmt;
 801d442:	687b      	ldr	r3, [r7, #4]
 801d444:	3b01      	subs	r3, #1
 801d446:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801d448:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d44a:	68fb      	ldr	r3, [r7, #12]
 801d44c:	1ad2      	subs	r2, r2, r3
 801d44e:	68bb      	ldr	r3, [r7, #8]
 801d450:	3b01      	subs	r3, #1
 801d452:	429a      	cmp	r2, r3
 801d454:	db30      	blt.n	801d4b8 <tiny_vsnprintf_like+0x1f0>
 801d456:	e002      	b.n	801d45e <tiny_vsnprintf_like+0x196>
        break;
 801d458:	46c0      	nop			; (mov r8, r8)
 801d45a:	e000      	b.n	801d45e <tiny_vsnprintf_like+0x196>
        CHECK_STR_SIZE(buf, str, size);
 801d45c:	46c0      	nop			; (mov r8, r8)
        continue;
    }

    if (qualifier == 'l')
 801d45e:	697b      	ldr	r3, [r7, #20]
 801d460:	2b6c      	cmp	r3, #108	; 0x6c
 801d462:	d105      	bne.n	801d470 <tiny_vsnprintf_like+0x1a8>
      num = va_arg(args, unsigned long);
 801d464:	683b      	ldr	r3, [r7, #0]
 801d466:	1d1a      	adds	r2, r3, #4
 801d468:	603a      	str	r2, [r7, #0]
 801d46a:	681b      	ldr	r3, [r3, #0]
 801d46c:	637b      	str	r3, [r7, #52]	; 0x34
 801d46e:	e00e      	b.n	801d48e <tiny_vsnprintf_like+0x1c6>
    else if (flags & SIGN)
 801d470:	6a3b      	ldr	r3, [r7, #32]
 801d472:	2202      	movs	r2, #2
 801d474:	4013      	ands	r3, r2
 801d476:	d005      	beq.n	801d484 <tiny_vsnprintf_like+0x1bc>
      num = va_arg(args, int);
 801d478:	683b      	ldr	r3, [r7, #0]
 801d47a:	1d1a      	adds	r2, r3, #4
 801d47c:	603a      	str	r2, [r7, #0]
 801d47e:	681b      	ldr	r3, [r3, #0]
 801d480:	637b      	str	r3, [r7, #52]	; 0x34
 801d482:	e004      	b.n	801d48e <tiny_vsnprintf_like+0x1c6>
    else
      num = va_arg(args, unsigned int);
 801d484:	683b      	ldr	r3, [r7, #0]
 801d486:	1d1a      	adds	r2, r3, #4
 801d488:	603a      	str	r2, [r7, #0]
 801d48a:	681b      	ldr	r3, [r3, #0]
 801d48c:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801d48e:	68bb      	ldr	r3, [r7, #8]
 801d490:	1e5a      	subs	r2, r3, #1
 801d492:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801d494:	68fb      	ldr	r3, [r7, #12]
 801d496:	1acb      	subs	r3, r1, r3
 801d498:	1ad1      	subs	r1, r2, r3
 801d49a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d49c:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 801d49e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801d4a0:	6a3b      	ldr	r3, [r7, #32]
 801d4a2:	9302      	str	r3, [sp, #8]
 801d4a4:	69bb      	ldr	r3, [r7, #24]
 801d4a6:	9301      	str	r3, [sp, #4]
 801d4a8:	69fb      	ldr	r3, [r7, #28]
 801d4aa:	9300      	str	r3, [sp, #0]
 801d4ac:	0023      	movs	r3, r4
 801d4ae:	f7ff fe1b 	bl	801d0e8 <ee_number>
 801d4b2:	0003      	movs	r3, r0
 801d4b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d4b6:	e000      	b.n	801d4ba <tiny_vsnprintf_like+0x1f2>
        continue;
 801d4b8:	46c0      	nop			; (mov r8, r8)
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801d4ba:	687b      	ldr	r3, [r7, #4]
 801d4bc:	3301      	adds	r3, #1
 801d4be:	607b      	str	r3, [r7, #4]
 801d4c0:	687b      	ldr	r3, [r7, #4]
 801d4c2:	781b      	ldrb	r3, [r3, #0]
 801d4c4:	2b00      	cmp	r3, #0
 801d4c6:	d000      	beq.n	801d4ca <tiny_vsnprintf_like+0x202>
 801d4c8:	e70d      	b.n	801d2e6 <tiny_vsnprintf_like+0x1e>
 801d4ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d4cc:	68fb      	ldr	r3, [r7, #12]
 801d4ce:	1ad2      	subs	r2, r2, r3
 801d4d0:	68bb      	ldr	r3, [r7, #8]
 801d4d2:	3b01      	subs	r3, #1
 801d4d4:	429a      	cmp	r2, r3
 801d4d6:	db00      	blt.n	801d4da <tiny_vsnprintf_like+0x212>
 801d4d8:	e705      	b.n	801d2e6 <tiny_vsnprintf_like+0x1e>
 801d4da:	e000      	b.n	801d4de <tiny_vsnprintf_like+0x216>
    CHECK_STR_SIZE(buf, str, size);
 801d4dc:	46c0      	nop			; (mov r8, r8)
  }

  *str = '\0';
 801d4de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d4e0:	2200      	movs	r2, #0
 801d4e2:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801d4e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d4e6:	68fb      	ldr	r3, [r7, #12]
 801d4e8:	1ad3      	subs	r3, r2, r3
}
 801d4ea:	0018      	movs	r0, r3
 801d4ec:	46bd      	mov	sp, r7
 801d4ee:	b00f      	add	sp, #60	; 0x3c
 801d4f0:	bd90      	pop	{r4, r7, pc}
 801d4f2:	46c0      	nop			; (mov r8, r8)
 801d4f4:	0801fd3c 	.word	0x0801fd3c
 801d4f8:	0801fd34 	.word	0x0801fd34

0801d4fc <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 801d4fc:	b580      	push	{r7, lr}
 801d4fe:	b082      	sub	sp, #8
 801d500:	af00      	add	r7, sp, #0
 801d502:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 801d504:	687b      	ldr	r3, [r7, #4]
 801d506:	2203      	movs	r2, #3
 801d508:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 801d50a:	687b      	ldr	r3, [r7, #4]
 801d50c:	2200      	movs	r2, #0
 801d50e:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 801d510:	687b      	ldr	r3, [r7, #4]
 801d512:	2203      	movs	r2, #3
 801d514:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 801d516:	687b      	ldr	r3, [r7, #4]
 801d518:	2203      	movs	r2, #3
 801d51a:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 801d51c:	687b      	ldr	r3, [r7, #4]
 801d51e:	2203      	movs	r2, #3
 801d520:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 801d522:	687b      	ldr	r3, [r7, #4]
 801d524:	2203      	movs	r2, #3
 801d526:	715a      	strb	r2, [r3, #5]
}
 801d528:	46c0      	nop			; (mov r8, r8)
 801d52a:	46bd      	mov	sp, r7
 801d52c:	b002      	add	sp, #8
 801d52e:	bd80      	pop	{r7, pc}

0801d530 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 801d530:	b590      	push	{r4, r7, lr}
 801d532:	b08b      	sub	sp, #44	; 0x2c
 801d534:	af04      	add	r7, sp, #16
 801d536:	60f8      	str	r0, [r7, #12]
 801d538:	607a      	str	r2, [r7, #4]
 801d53a:	240b      	movs	r4, #11
 801d53c:	193b      	adds	r3, r7, r4
 801d53e:	1c0a      	adds	r2, r1, #0
 801d540:	701a      	strb	r2, [r3, #0]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 801d542:	68fb      	ldr	r3, [r7, #12]
 801d544:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801d546:	2116      	movs	r1, #22
 801d548:	187a      	adds	r2, r7, r1
 801d54a:	18db      	adds	r3, r3, r3
 801d54c:	8013      	strh	r3, [r2, #0]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 801d54e:	68fb      	ldr	r3, [r7, #12]
 801d550:	6a98      	ldr	r0, [r3, #40]	; 0x28
 801d552:	193b      	adds	r3, r7, r4
 801d554:	781b      	ldrb	r3, [r3, #0]
 801d556:	b29a      	uxth	r2, r3
 801d558:	187b      	adds	r3, r7, r1
 801d55a:	8819      	ldrh	r1, [r3, #0]
 801d55c:	4b0f      	ldr	r3, [pc, #60]	; (801d59c <read_register16+0x6c>)
 801d55e:	9302      	str	r3, [sp, #8]
 801d560:	2302      	movs	r3, #2
 801d562:	9301      	str	r3, [sp, #4]
 801d564:	2414      	movs	r4, #20
 801d566:	193b      	adds	r3, r7, r4
 801d568:	9300      	str	r3, [sp, #0]
 801d56a:	2301      	movs	r3, #1
 801d56c:	f7ea fe26 	bl	80081bc <HAL_I2C_Mem_Read>
 801d570:	1e03      	subs	r3, r0, #0
 801d572:	d10e      	bne.n	801d592 <read_register16+0x62>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 801d574:	0021      	movs	r1, r4
 801d576:	187b      	adds	r3, r7, r1
 801d578:	785b      	ldrb	r3, [r3, #1]
 801d57a:	021b      	lsls	r3, r3, #8
 801d57c:	b21a      	sxth	r2, r3
 801d57e:	187b      	adds	r3, r7, r1
 801d580:	781b      	ldrb	r3, [r3, #0]
 801d582:	b21b      	sxth	r3, r3
 801d584:	4313      	orrs	r3, r2
 801d586:	b21b      	sxth	r3, r3
 801d588:	b29a      	uxth	r2, r3
 801d58a:	687b      	ldr	r3, [r7, #4]
 801d58c:	801a      	strh	r2, [r3, #0]
		return true;
 801d58e:	2301      	movs	r3, #1
 801d590:	e000      	b.n	801d594 <read_register16+0x64>
	} else
		return false;
 801d592:	2300      	movs	r3, #0

}
 801d594:	0018      	movs	r0, r3
 801d596:	46bd      	mov	sp, r7
 801d598:	b007      	add	sp, #28
 801d59a:	bd90      	pop	{r4, r7, pc}
 801d59c:	00001388 	.word	0x00001388

0801d5a0 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 801d5a0:	b5b0      	push	{r4, r5, r7, lr}
 801d5a2:	b08a      	sub	sp, #40	; 0x28
 801d5a4:	af04      	add	r7, sp, #16
 801d5a6:	60f8      	str	r0, [r7, #12]
 801d5a8:	0008      	movs	r0, r1
 801d5aa:	607a      	str	r2, [r7, #4]
 801d5ac:	0019      	movs	r1, r3
 801d5ae:	240b      	movs	r4, #11
 801d5b0:	193b      	adds	r3, r7, r4
 801d5b2:	1c02      	adds	r2, r0, #0
 801d5b4:	701a      	strb	r2, [r3, #0]
 801d5b6:	250a      	movs	r5, #10
 801d5b8:	197b      	adds	r3, r7, r5
 801d5ba:	1c0a      	adds	r2, r1, #0
 801d5bc:	701a      	strb	r2, [r3, #0]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 801d5be:	68fb      	ldr	r3, [r7, #12]
 801d5c0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801d5c2:	2116      	movs	r1, #22
 801d5c4:	187a      	adds	r2, r7, r1
 801d5c6:	18db      	adds	r3, r3, r3
 801d5c8:	8013      	strh	r3, [r2, #0]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 801d5ca:	68fb      	ldr	r3, [r7, #12]
 801d5cc:	6a98      	ldr	r0, [r3, #40]	; 0x28
 801d5ce:	193b      	adds	r3, r7, r4
 801d5d0:	781b      	ldrb	r3, [r3, #0]
 801d5d2:	b29c      	uxth	r4, r3
 801d5d4:	197b      	adds	r3, r7, r5
 801d5d6:	781b      	ldrb	r3, [r3, #0]
 801d5d8:	b29b      	uxth	r3, r3
 801d5da:	187a      	adds	r2, r7, r1
 801d5dc:	8811      	ldrh	r1, [r2, #0]
 801d5de:	4a09      	ldr	r2, [pc, #36]	; (801d604 <read_data+0x64>)
 801d5e0:	9202      	str	r2, [sp, #8]
 801d5e2:	9301      	str	r3, [sp, #4]
 801d5e4:	687b      	ldr	r3, [r7, #4]
 801d5e6:	9300      	str	r3, [sp, #0]
 801d5e8:	2301      	movs	r3, #1
 801d5ea:	0022      	movs	r2, r4
 801d5ec:	f7ea fde6 	bl	80081bc <HAL_I2C_Mem_Read>
 801d5f0:	1e03      	subs	r3, r0, #0
 801d5f2:	d101      	bne.n	801d5f8 <read_data+0x58>
		return 0;
 801d5f4:	2300      	movs	r3, #0
 801d5f6:	e000      	b.n	801d5fa <read_data+0x5a>
	else
		return 1;
 801d5f8:	2301      	movs	r3, #1

}
 801d5fa:	0018      	movs	r0, r3
 801d5fc:	46bd      	mov	sp, r7
 801d5fe:	b006      	add	sp, #24
 801d600:	bdb0      	pop	{r4, r5, r7, pc}
 801d602:	46c0      	nop			; (mov r8, r8)
 801d604:	00001388 	.word	0x00001388

0801d608 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 801d608:	b580      	push	{r7, lr}
 801d60a:	b082      	sub	sp, #8
 801d60c:	af00      	add	r7, sp, #0
 801d60e:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 801d610:	687a      	ldr	r2, [r7, #4]
 801d612:	687b      	ldr	r3, [r7, #4]
 801d614:	2188      	movs	r1, #136	; 0x88
 801d616:	0018      	movs	r0, r3
 801d618:	f7ff ff8a 	bl	801d530 <read_register16>
 801d61c:	1e03      	subs	r3, r0, #0
 801d61e:	d100      	bne.n	801d622 <read_calibration_data+0x1a>
 801d620:	e06d      	b.n	801d6fe <read_calibration_data+0xf6>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 801d622:	687b      	ldr	r3, [r7, #4]
 801d624:	1c9a      	adds	r2, r3, #2
 801d626:	687b      	ldr	r3, [r7, #4]
 801d628:	218a      	movs	r1, #138	; 0x8a
 801d62a:	0018      	movs	r0, r3
 801d62c:	f7ff ff80 	bl	801d530 <read_register16>
 801d630:	1e03      	subs	r3, r0, #0
 801d632:	d100      	bne.n	801d636 <read_calibration_data+0x2e>
 801d634:	e063      	b.n	801d6fe <read_calibration_data+0xf6>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 801d636:	687b      	ldr	r3, [r7, #4]
 801d638:	1d1a      	adds	r2, r3, #4
 801d63a:	687b      	ldr	r3, [r7, #4]
 801d63c:	218c      	movs	r1, #140	; 0x8c
 801d63e:	0018      	movs	r0, r3
 801d640:	f7ff ff76 	bl	801d530 <read_register16>
 801d644:	1e03      	subs	r3, r0, #0
 801d646:	d05a      	beq.n	801d6fe <read_calibration_data+0xf6>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 801d648:	687b      	ldr	r3, [r7, #4]
 801d64a:	1d9a      	adds	r2, r3, #6
 801d64c:	687b      	ldr	r3, [r7, #4]
 801d64e:	218e      	movs	r1, #142	; 0x8e
 801d650:	0018      	movs	r0, r3
 801d652:	f7ff ff6d 	bl	801d530 <read_register16>
 801d656:	1e03      	subs	r3, r0, #0
 801d658:	d051      	beq.n	801d6fe <read_calibration_data+0xf6>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 801d65a:	687b      	ldr	r3, [r7, #4]
 801d65c:	3308      	adds	r3, #8
 801d65e:	001a      	movs	r2, r3
 801d660:	687b      	ldr	r3, [r7, #4]
 801d662:	2190      	movs	r1, #144	; 0x90
 801d664:	0018      	movs	r0, r3
 801d666:	f7ff ff63 	bl	801d530 <read_register16>
 801d66a:	1e03      	subs	r3, r0, #0
 801d66c:	d047      	beq.n	801d6fe <read_calibration_data+0xf6>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 801d66e:	687b      	ldr	r3, [r7, #4]
 801d670:	330a      	adds	r3, #10
 801d672:	001a      	movs	r2, r3
 801d674:	687b      	ldr	r3, [r7, #4]
 801d676:	2192      	movs	r1, #146	; 0x92
 801d678:	0018      	movs	r0, r3
 801d67a:	f7ff ff59 	bl	801d530 <read_register16>
 801d67e:	1e03      	subs	r3, r0, #0
 801d680:	d03d      	beq.n	801d6fe <read_calibration_data+0xf6>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 801d682:	687b      	ldr	r3, [r7, #4]
 801d684:	330c      	adds	r3, #12
 801d686:	001a      	movs	r2, r3
 801d688:	687b      	ldr	r3, [r7, #4]
 801d68a:	2194      	movs	r1, #148	; 0x94
 801d68c:	0018      	movs	r0, r3
 801d68e:	f7ff ff4f 	bl	801d530 <read_register16>
 801d692:	1e03      	subs	r3, r0, #0
 801d694:	d033      	beq.n	801d6fe <read_calibration_data+0xf6>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 801d696:	687b      	ldr	r3, [r7, #4]
 801d698:	330e      	adds	r3, #14
 801d69a:	001a      	movs	r2, r3
 801d69c:	687b      	ldr	r3, [r7, #4]
 801d69e:	2196      	movs	r1, #150	; 0x96
 801d6a0:	0018      	movs	r0, r3
 801d6a2:	f7ff ff45 	bl	801d530 <read_register16>
 801d6a6:	1e03      	subs	r3, r0, #0
 801d6a8:	d029      	beq.n	801d6fe <read_calibration_data+0xf6>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 801d6aa:	687b      	ldr	r3, [r7, #4]
 801d6ac:	3310      	adds	r3, #16
 801d6ae:	001a      	movs	r2, r3
 801d6b0:	687b      	ldr	r3, [r7, #4]
 801d6b2:	2198      	movs	r1, #152	; 0x98
 801d6b4:	0018      	movs	r0, r3
 801d6b6:	f7ff ff3b 	bl	801d530 <read_register16>
 801d6ba:	1e03      	subs	r3, r0, #0
 801d6bc:	d01f      	beq.n	801d6fe <read_calibration_data+0xf6>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 801d6be:	687b      	ldr	r3, [r7, #4]
 801d6c0:	3312      	adds	r3, #18
 801d6c2:	001a      	movs	r2, r3
 801d6c4:	687b      	ldr	r3, [r7, #4]
 801d6c6:	219a      	movs	r1, #154	; 0x9a
 801d6c8:	0018      	movs	r0, r3
 801d6ca:	f7ff ff31 	bl	801d530 <read_register16>
 801d6ce:	1e03      	subs	r3, r0, #0
 801d6d0:	d015      	beq.n	801d6fe <read_calibration_data+0xf6>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 801d6d2:	687b      	ldr	r3, [r7, #4]
 801d6d4:	3314      	adds	r3, #20
 801d6d6:	001a      	movs	r2, r3
 801d6d8:	687b      	ldr	r3, [r7, #4]
 801d6da:	219c      	movs	r1, #156	; 0x9c
 801d6dc:	0018      	movs	r0, r3
 801d6de:	f7ff ff27 	bl	801d530 <read_register16>
 801d6e2:	1e03      	subs	r3, r0, #0
 801d6e4:	d00b      	beq.n	801d6fe <read_calibration_data+0xf6>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 801d6e6:	687b      	ldr	r3, [r7, #4]
 801d6e8:	3316      	adds	r3, #22
 801d6ea:	001a      	movs	r2, r3
			&& read_register16(dev, 0x9e,
 801d6ec:	687b      	ldr	r3, [r7, #4]
 801d6ee:	219e      	movs	r1, #158	; 0x9e
 801d6f0:	0018      	movs	r0, r3
 801d6f2:	f7ff ff1d 	bl	801d530 <read_register16>
 801d6f6:	1e03      	subs	r3, r0, #0
 801d6f8:	d001      	beq.n	801d6fe <read_calibration_data+0xf6>

		return true;
 801d6fa:	2301      	movs	r3, #1
 801d6fc:	e000      	b.n	801d700 <read_calibration_data+0xf8>
	}

	return false;
 801d6fe:	2300      	movs	r3, #0
}
 801d700:	0018      	movs	r0, r3
 801d702:	46bd      	mov	sp, r7
 801d704:	b002      	add	sp, #8
 801d706:	bd80      	pop	{r7, pc}

0801d708 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 801d708:	b5b0      	push	{r4, r5, r7, lr}
 801d70a:	b084      	sub	sp, #16
 801d70c:	af00      	add	r7, sp, #0
 801d70e:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 801d710:	687b      	ldr	r3, [r7, #4]
 801d712:	3318      	adds	r3, #24
 801d714:	001a      	movs	r2, r3
 801d716:	6878      	ldr	r0, [r7, #4]
 801d718:	2301      	movs	r3, #1
 801d71a:	21a1      	movs	r1, #161	; 0xa1
 801d71c:	f7ff ff40 	bl	801d5a0 <read_data>
 801d720:	1e03      	subs	r3, r0, #0
 801d722:	d14b      	bne.n	801d7bc <read_hum_calibration_data+0xb4>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 801d724:	687b      	ldr	r3, [r7, #4]
 801d726:	331a      	adds	r3, #26
 801d728:	001a      	movs	r2, r3
 801d72a:	687b      	ldr	r3, [r7, #4]
 801d72c:	21e1      	movs	r1, #225	; 0xe1
 801d72e:	0018      	movs	r0, r3
 801d730:	f7ff fefe 	bl	801d530 <read_register16>
 801d734:	1e03      	subs	r3, r0, #0
 801d736:	d041      	beq.n	801d7bc <read_hum_calibration_data+0xb4>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 801d738:	687b      	ldr	r3, [r7, #4]
 801d73a:	331c      	adds	r3, #28
 801d73c:	001a      	movs	r2, r3
 801d73e:	6878      	ldr	r0, [r7, #4]
 801d740:	2301      	movs	r3, #1
 801d742:	21e3      	movs	r1, #227	; 0xe3
 801d744:	f7ff ff2c 	bl	801d5a0 <read_data>
 801d748:	1e03      	subs	r3, r0, #0
 801d74a:	d137      	bne.n	801d7bc <read_hum_calibration_data+0xb4>
			&& read_register16(dev, 0xe4, &h4)
 801d74c:	240e      	movs	r4, #14
 801d74e:	193a      	adds	r2, r7, r4
 801d750:	687b      	ldr	r3, [r7, #4]
 801d752:	21e4      	movs	r1, #228	; 0xe4
 801d754:	0018      	movs	r0, r3
 801d756:	f7ff feeb 	bl	801d530 <read_register16>
 801d75a:	1e03      	subs	r3, r0, #0
 801d75c:	d02e      	beq.n	801d7bc <read_hum_calibration_data+0xb4>
			&& read_register16(dev, 0xe5, &h5)
 801d75e:	250c      	movs	r5, #12
 801d760:	197a      	adds	r2, r7, r5
 801d762:	687b      	ldr	r3, [r7, #4]
 801d764:	21e5      	movs	r1, #229	; 0xe5
 801d766:	0018      	movs	r0, r3
 801d768:	f7ff fee2 	bl	801d530 <read_register16>
 801d76c:	1e03      	subs	r3, r0, #0
 801d76e:	d025      	beq.n	801d7bc <read_hum_calibration_data+0xb4>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 801d770:	687b      	ldr	r3, [r7, #4]
 801d772:	3322      	adds	r3, #34	; 0x22
 801d774:	001a      	movs	r2, r3
 801d776:	6878      	ldr	r0, [r7, #4]
 801d778:	2301      	movs	r3, #1
 801d77a:	21e7      	movs	r1, #231	; 0xe7
 801d77c:	f7ff ff10 	bl	801d5a0 <read_data>
 801d780:	1e03      	subs	r3, r0, #0
 801d782:	d11b      	bne.n	801d7bc <read_hum_calibration_data+0xb4>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 801d784:	193b      	adds	r3, r7, r4
 801d786:	881b      	ldrh	r3, [r3, #0]
 801d788:	011b      	lsls	r3, r3, #4
 801d78a:	b21a      	sxth	r2, r3
 801d78c:	23ff      	movs	r3, #255	; 0xff
 801d78e:	011b      	lsls	r3, r3, #4
 801d790:	4013      	ands	r3, r2
 801d792:	b21a      	sxth	r2, r3
 801d794:	193b      	adds	r3, r7, r4
 801d796:	881b      	ldrh	r3, [r3, #0]
 801d798:	121b      	asrs	r3, r3, #8
 801d79a:	b21b      	sxth	r3, r3
 801d79c:	210f      	movs	r1, #15
 801d79e:	400b      	ands	r3, r1
 801d7a0:	b21b      	sxth	r3, r3
 801d7a2:	4313      	orrs	r3, r2
 801d7a4:	b21a      	sxth	r2, r3
 801d7a6:	687b      	ldr	r3, [r7, #4]
 801d7a8:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 801d7aa:	197b      	adds	r3, r7, r5
 801d7ac:	881b      	ldrh	r3, [r3, #0]
 801d7ae:	091b      	lsrs	r3, r3, #4
 801d7b0:	b29b      	uxth	r3, r3
 801d7b2:	b21a      	sxth	r2, r3
 801d7b4:	687b      	ldr	r3, [r7, #4]
 801d7b6:	841a      	strh	r2, [r3, #32]

		return true;
 801d7b8:	2301      	movs	r3, #1
 801d7ba:	e000      	b.n	801d7be <read_hum_calibration_data+0xb6>
	}

	return false;
 801d7bc:	2300      	movs	r3, #0
}
 801d7be:	0018      	movs	r0, r3
 801d7c0:	46bd      	mov	sp, r7
 801d7c2:	b004      	add	sp, #16
 801d7c4:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801d7c8 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 801d7c8:	b580      	push	{r7, lr}
 801d7ca:	b088      	sub	sp, #32
 801d7cc:	af04      	add	r7, sp, #16
 801d7ce:	6078      	str	r0, [r7, #4]
 801d7d0:	0008      	movs	r0, r1
 801d7d2:	0011      	movs	r1, r2
 801d7d4:	1cfb      	adds	r3, r7, #3
 801d7d6:	1c02      	adds	r2, r0, #0
 801d7d8:	701a      	strb	r2, [r3, #0]
 801d7da:	1cbb      	adds	r3, r7, #2
 801d7dc:	1c0a      	adds	r2, r1, #0
 801d7de:	701a      	strb	r2, [r3, #0]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 801d7e0:	687b      	ldr	r3, [r7, #4]
 801d7e2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801d7e4:	210e      	movs	r1, #14
 801d7e6:	187a      	adds	r2, r7, r1
 801d7e8:	18db      	adds	r3, r3, r3
 801d7ea:	8013      	strh	r3, [r2, #0]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 801d7ec:	687b      	ldr	r3, [r7, #4]
 801d7ee:	6a98      	ldr	r0, [r3, #40]	; 0x28
 801d7f0:	1cfb      	adds	r3, r7, #3
 801d7f2:	781b      	ldrb	r3, [r3, #0]
 801d7f4:	b29a      	uxth	r2, r3
 801d7f6:	187b      	adds	r3, r7, r1
 801d7f8:	8819      	ldrh	r1, [r3, #0]
 801d7fa:	4b09      	ldr	r3, [pc, #36]	; (801d820 <write_register8+0x58>)
 801d7fc:	9302      	str	r3, [sp, #8]
 801d7fe:	2301      	movs	r3, #1
 801d800:	9301      	str	r3, [sp, #4]
 801d802:	1cbb      	adds	r3, r7, #2
 801d804:	9300      	str	r3, [sp, #0]
 801d806:	2301      	movs	r3, #1
 801d808:	f7ea fbaa 	bl	8007f60 <HAL_I2C_Mem_Write>
 801d80c:	1e03      	subs	r3, r0, #0
 801d80e:	d101      	bne.n	801d814 <write_register8+0x4c>
		return false;
 801d810:	2300      	movs	r3, #0
 801d812:	e000      	b.n	801d816 <write_register8+0x4e>
	else
		return true;
 801d814:	2301      	movs	r3, #1
}
 801d816:	0018      	movs	r0, r3
 801d818:	46bd      	mov	sp, r7
 801d81a:	b004      	add	sp, #16
 801d81c:	bd80      	pop	{r7, pc}
 801d81e:	46c0      	nop			; (mov r8, r8)
 801d820:	00002710 	.word	0x00002710

0801d824 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 801d824:	b590      	push	{r4, r7, lr}
 801d826:	b085      	sub	sp, #20
 801d828:	af00      	add	r7, sp, #0
 801d82a:	6078      	str	r0, [r7, #4]
 801d82c:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 801d82e:	687b      	ldr	r3, [r7, #4]
 801d830:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801d832:	2b76      	cmp	r3, #118	; 0x76
 801d834:	d005      	beq.n	801d842 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 801d836:	687b      	ldr	r3, [r7, #4]
 801d838:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801d83a:	2b77      	cmp	r3, #119	; 0x77
 801d83c:	d001      	beq.n	801d842 <bmp280_init+0x1e>

		return false;
 801d83e:	2300      	movs	r3, #0
 801d840:	e0a3      	b.n	801d98a <bmp280_init+0x166>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 801d842:	687b      	ldr	r3, [r7, #4]
 801d844:	3332      	adds	r3, #50	; 0x32
 801d846:	001a      	movs	r2, r3
 801d848:	6878      	ldr	r0, [r7, #4]
 801d84a:	2301      	movs	r3, #1
 801d84c:	21d0      	movs	r1, #208	; 0xd0
 801d84e:	f7ff fea7 	bl	801d5a0 <read_data>
 801d852:	1e03      	subs	r3, r0, #0
 801d854:	d001      	beq.n	801d85a <bmp280_init+0x36>
		return false;
 801d856:	2300      	movs	r3, #0
 801d858:	e097      	b.n	801d98a <bmp280_init+0x166>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 801d85a:	687b      	ldr	r3, [r7, #4]
 801d85c:	2232      	movs	r2, #50	; 0x32
 801d85e:	5c9b      	ldrb	r3, [r3, r2]
 801d860:	2b58      	cmp	r3, #88	; 0x58
 801d862:	d006      	beq.n	801d872 <bmp280_init+0x4e>
 801d864:	687b      	ldr	r3, [r7, #4]
 801d866:	2232      	movs	r2, #50	; 0x32
 801d868:	5c9b      	ldrb	r3, [r3, r2]
 801d86a:	2b60      	cmp	r3, #96	; 0x60
 801d86c:	d001      	beq.n	801d872 <bmp280_init+0x4e>

		return false;
 801d86e:	2300      	movs	r3, #0
 801d870:	e08b      	b.n	801d98a <bmp280_init+0x166>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 801d872:	687b      	ldr	r3, [r7, #4]
 801d874:	22b6      	movs	r2, #182	; 0xb6
 801d876:	21e0      	movs	r1, #224	; 0xe0
 801d878:	0018      	movs	r0, r3
 801d87a:	f7ff ffa5 	bl	801d7c8 <write_register8>
 801d87e:	1e03      	subs	r3, r0, #0
 801d880:	d001      	beq.n	801d886 <bmp280_init+0x62>
		return false;
 801d882:	2300      	movs	r3, #0
 801d884:	e081      	b.n	801d98a <bmp280_init+0x166>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 801d886:	240c      	movs	r4, #12
 801d888:	193a      	adds	r2, r7, r4
 801d88a:	6878      	ldr	r0, [r7, #4]
 801d88c:	2301      	movs	r3, #1
 801d88e:	21f3      	movs	r1, #243	; 0xf3
 801d890:	f7ff fe86 	bl	801d5a0 <read_data>
 801d894:	1e03      	subs	r3, r0, #0
 801d896:	d1f6      	bne.n	801d886 <bmp280_init+0x62>
				&& (status & 1) == 0)
 801d898:	193b      	adds	r3, r7, r4
 801d89a:	781b      	ldrb	r3, [r3, #0]
 801d89c:	001a      	movs	r2, r3
 801d89e:	2301      	movs	r3, #1
 801d8a0:	4013      	ands	r3, r2
 801d8a2:	d1f0      	bne.n	801d886 <bmp280_init+0x62>
			break;
	}

	if (!read_calibration_data(dev)) {
 801d8a4:	687b      	ldr	r3, [r7, #4]
 801d8a6:	0018      	movs	r0, r3
 801d8a8:	f7ff feae 	bl	801d608 <read_calibration_data>
 801d8ac:	0003      	movs	r3, r0
 801d8ae:	001a      	movs	r2, r3
 801d8b0:	2301      	movs	r3, #1
 801d8b2:	4053      	eors	r3, r2
 801d8b4:	b2db      	uxtb	r3, r3
 801d8b6:	2b00      	cmp	r3, #0
 801d8b8:	d100      	bne.n	801d8bc <bmp280_init+0x98>
 801d8ba:	e001      	b.n	801d8c0 <bmp280_init+0x9c>
		return false;
 801d8bc:	2300      	movs	r3, #0
 801d8be:	e064      	b.n	801d98a <bmp280_init+0x166>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 801d8c0:	687b      	ldr	r3, [r7, #4]
 801d8c2:	2232      	movs	r2, #50	; 0x32
 801d8c4:	5c9b      	ldrb	r3, [r3, r2]
 801d8c6:	2b60      	cmp	r3, #96	; 0x60
 801d8c8:	d10c      	bne.n	801d8e4 <bmp280_init+0xc0>
 801d8ca:	687b      	ldr	r3, [r7, #4]
 801d8cc:	0018      	movs	r0, r3
 801d8ce:	f7ff ff1b 	bl	801d708 <read_hum_calibration_data>
 801d8d2:	0003      	movs	r3, r0
 801d8d4:	001a      	movs	r2, r3
 801d8d6:	2301      	movs	r3, #1
 801d8d8:	4053      	eors	r3, r2
 801d8da:	b2db      	uxtb	r3, r3
 801d8dc:	2b00      	cmp	r3, #0
 801d8de:	d001      	beq.n	801d8e4 <bmp280_init+0xc0>
		return false;
 801d8e0:	2300      	movs	r3, #0
 801d8e2:	e052      	b.n	801d98a <bmp280_init+0x166>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 801d8e4:	683b      	ldr	r3, [r7, #0]
 801d8e6:	795b      	ldrb	r3, [r3, #5]
 801d8e8:	015b      	lsls	r3, r3, #5
 801d8ea:	b25a      	sxtb	r2, r3
 801d8ec:	683b      	ldr	r3, [r7, #0]
 801d8ee:	785b      	ldrb	r3, [r3, #1]
 801d8f0:	009b      	lsls	r3, r3, #2
 801d8f2:	b25b      	sxtb	r3, r3
 801d8f4:	4313      	orrs	r3, r2
 801d8f6:	b25a      	sxtb	r2, r3
 801d8f8:	210f      	movs	r1, #15
 801d8fa:	187b      	adds	r3, r7, r1
 801d8fc:	701a      	strb	r2, [r3, #0]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 801d8fe:	187b      	adds	r3, r7, r1
 801d900:	781a      	ldrb	r2, [r3, #0]
 801d902:	687b      	ldr	r3, [r7, #4]
 801d904:	21f5      	movs	r1, #245	; 0xf5
 801d906:	0018      	movs	r0, r3
 801d908:	f7ff ff5e 	bl	801d7c8 <write_register8>
 801d90c:	1e03      	subs	r3, r0, #0
 801d90e:	d001      	beq.n	801d914 <bmp280_init+0xf0>
		return false;
 801d910:	2300      	movs	r3, #0
 801d912:	e03a      	b.n	801d98a <bmp280_init+0x166>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 801d914:	683b      	ldr	r3, [r7, #0]
 801d916:	781b      	ldrb	r3, [r3, #0]
 801d918:	2b01      	cmp	r3, #1
 801d91a:	d102      	bne.n	801d922 <bmp280_init+0xfe>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 801d91c:	683b      	ldr	r3, [r7, #0]
 801d91e:	2200      	movs	r2, #0
 801d920:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 801d922:	683b      	ldr	r3, [r7, #0]
 801d924:	78db      	ldrb	r3, [r3, #3]
 801d926:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 801d928:	b25a      	sxtb	r2, r3
 801d92a:	683b      	ldr	r3, [r7, #0]
 801d92c:	789b      	ldrb	r3, [r3, #2]
 801d92e:	009b      	lsls	r3, r3, #2
 801d930:	b25b      	sxtb	r3, r3
 801d932:	4313      	orrs	r3, r2
 801d934:	b25a      	sxtb	r2, r3
 801d936:	683b      	ldr	r3, [r7, #0]
 801d938:	781b      	ldrb	r3, [r3, #0]
 801d93a:	b25b      	sxtb	r3, r3
 801d93c:	4313      	orrs	r3, r2
 801d93e:	b25a      	sxtb	r2, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 801d940:	230e      	movs	r3, #14
 801d942:	18fb      	adds	r3, r7, r3
 801d944:	701a      	strb	r2, [r3, #0]

	if (dev->id == BME280_CHIP_ID) {
 801d946:	687b      	ldr	r3, [r7, #4]
 801d948:	2232      	movs	r2, #50	; 0x32
 801d94a:	5c9b      	ldrb	r3, [r3, r2]
 801d94c:	2b60      	cmp	r3, #96	; 0x60
 801d94e:	d10f      	bne.n	801d970 <bmp280_init+0x14c>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 801d950:	210d      	movs	r1, #13
 801d952:	187b      	adds	r3, r7, r1
 801d954:	683a      	ldr	r2, [r7, #0]
 801d956:	7912      	ldrb	r2, [r2, #4]
 801d958:	701a      	strb	r2, [r3, #0]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 801d95a:	187b      	adds	r3, r7, r1
 801d95c:	781a      	ldrb	r2, [r3, #0]
 801d95e:	687b      	ldr	r3, [r7, #4]
 801d960:	21f2      	movs	r1, #242	; 0xf2
 801d962:	0018      	movs	r0, r3
 801d964:	f7ff ff30 	bl	801d7c8 <write_register8>
 801d968:	1e03      	subs	r3, r0, #0
 801d96a:	d001      	beq.n	801d970 <bmp280_init+0x14c>
			return false;
 801d96c:	2300      	movs	r3, #0
 801d96e:	e00c      	b.n	801d98a <bmp280_init+0x166>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 801d970:	230e      	movs	r3, #14
 801d972:	18fb      	adds	r3, r7, r3
 801d974:	781a      	ldrb	r2, [r3, #0]
 801d976:	687b      	ldr	r3, [r7, #4]
 801d978:	21f4      	movs	r1, #244	; 0xf4
 801d97a:	0018      	movs	r0, r3
 801d97c:	f7ff ff24 	bl	801d7c8 <write_register8>
 801d980:	1e03      	subs	r3, r0, #0
 801d982:	d001      	beq.n	801d988 <bmp280_init+0x164>
		return false;
 801d984:	2300      	movs	r3, #0
 801d986:	e000      	b.n	801d98a <bmp280_init+0x166>
	}

	return true;
 801d988:	2301      	movs	r3, #1
}
 801d98a:	0018      	movs	r0, r3
 801d98c:	46bd      	mov	sp, r7
 801d98e:	b005      	add	sp, #20
 801d990:	bd90      	pop	{r4, r7, pc}

0801d992 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 801d992:	b580      	push	{r7, lr}
 801d994:	b086      	sub	sp, #24
 801d996:	af00      	add	r7, sp, #0
 801d998:	60f8      	str	r0, [r7, #12]
 801d99a:	60b9      	str	r1, [r7, #8]
 801d99c:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 801d99e:	68bb      	ldr	r3, [r7, #8]
 801d9a0:	10da      	asrs	r2, r3, #3
 801d9a2:	68fb      	ldr	r3, [r7, #12]
 801d9a4:	881b      	ldrh	r3, [r3, #0]
 801d9a6:	005b      	lsls	r3, r3, #1
 801d9a8:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 801d9aa:	68fa      	ldr	r2, [r7, #12]
 801d9ac:	2102      	movs	r1, #2
 801d9ae:	5e52      	ldrsh	r2, [r2, r1]
 801d9b0:	4353      	muls	r3, r2
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 801d9b2:	12db      	asrs	r3, r3, #11
 801d9b4:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 801d9b6:	68bb      	ldr	r3, [r7, #8]
 801d9b8:	111b      	asrs	r3, r3, #4
 801d9ba:	68fa      	ldr	r2, [r7, #12]
 801d9bc:	8812      	ldrh	r2, [r2, #0]
 801d9be:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 801d9c0:	68ba      	ldr	r2, [r7, #8]
 801d9c2:	1112      	asrs	r2, r2, #4
 801d9c4:	68f9      	ldr	r1, [r7, #12]
 801d9c6:	8809      	ldrh	r1, [r1, #0]
 801d9c8:	1a52      	subs	r2, r2, r1
 801d9ca:	4353      	muls	r3, r2
 801d9cc:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 801d9ce:	68fa      	ldr	r2, [r7, #12]
 801d9d0:	2104      	movs	r1, #4
 801d9d2:	5e52      	ldrsh	r2, [r2, r1]
 801d9d4:	4353      	muls	r3, r2
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 801d9d6:	139b      	asrs	r3, r3, #14
 801d9d8:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 801d9da:	697a      	ldr	r2, [r7, #20]
 801d9dc:	693b      	ldr	r3, [r7, #16]
 801d9de:	18d2      	adds	r2, r2, r3
 801d9e0:	687b      	ldr	r3, [r7, #4]
 801d9e2:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 801d9e4:	687b      	ldr	r3, [r7, #4]
 801d9e6:	681a      	ldr	r2, [r3, #0]
 801d9e8:	0013      	movs	r3, r2
 801d9ea:	009b      	lsls	r3, r3, #2
 801d9ec:	189b      	adds	r3, r3, r2
 801d9ee:	3380      	adds	r3, #128	; 0x80
 801d9f0:	121b      	asrs	r3, r3, #8
}
 801d9f2:	0018      	movs	r0, r3
 801d9f4:	46bd      	mov	sp, r7
 801d9f6:	b006      	add	sp, #24
 801d9f8:	bd80      	pop	{r7, pc}
	...

0801d9fc <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 801d9fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d9fe:	b0af      	sub	sp, #188	; 0xbc
 801da00:	af00      	add	r7, sp, #0
 801da02:	239c      	movs	r3, #156	; 0x9c
 801da04:	18fe      	adds	r6, r7, r3
 801da06:	6030      	str	r0, [r6, #0]
 801da08:	2098      	movs	r0, #152	; 0x98
 801da0a:	1838      	adds	r0, r7, r0
 801da0c:	6001      	str	r1, [r0, #0]
 801da0e:	2194      	movs	r1, #148	; 0x94
 801da10:	1878      	adds	r0, r7, r1
 801da12:	6002      	str	r2, [r0, #0]
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 801da14:	187a      	adds	r2, r7, r1
 801da16:	6813      	ldr	r3, [r2, #0]
 801da18:	65bb      	str	r3, [r7, #88]	; 0x58
 801da1a:	17db      	asrs	r3, r3, #31
 801da1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801da1e:	4ace      	ldr	r2, [pc, #824]	; (801dd58 <compensate_pressure+0x35c>)
 801da20:	2301      	movs	r3, #1
 801da22:	425b      	negs	r3, r3
 801da24:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801da26:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 801da28:	1880      	adds	r0, r0, r2
 801da2a:	4159      	adcs	r1, r3
 801da2c:	0002      	movs	r2, r0
 801da2e:	000b      	movs	r3, r1
 801da30:	26b0      	movs	r6, #176	; 0xb0
 801da32:	19b9      	adds	r1, r7, r6
 801da34:	600a      	str	r2, [r1, #0]
 801da36:	604b      	str	r3, [r1, #4]
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 801da38:	19ba      	adds	r2, r7, r6
 801da3a:	6853      	ldr	r3, [r2, #4]
 801da3c:	6812      	ldr	r2, [r2, #0]
 801da3e:	19b9      	adds	r1, r7, r6
 801da40:	6808      	ldr	r0, [r1, #0]
 801da42:	6849      	ldr	r1, [r1, #4]
 801da44:	f7e2 fda4 	bl	8000590 <__aeabi_lmul>
 801da48:	0002      	movs	r2, r0
 801da4a:	000b      	movs	r3, r1
 801da4c:	0010      	movs	r0, r2
 801da4e:	0019      	movs	r1, r3
 801da50:	239c      	movs	r3, #156	; 0x9c
 801da52:	18fa      	adds	r2, r7, r3
 801da54:	6813      	ldr	r3, [r2, #0]
 801da56:	2210      	movs	r2, #16
 801da58:	5e9b      	ldrsh	r3, [r3, r2]
 801da5a:	653b      	str	r3, [r7, #80]	; 0x50
 801da5c:	17db      	asrs	r3, r3, #31
 801da5e:	657b      	str	r3, [r7, #84]	; 0x54
 801da60:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801da62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801da64:	f7e2 fd94 	bl	8000590 <__aeabi_lmul>
 801da68:	0002      	movs	r2, r0
 801da6a:	000b      	movs	r3, r1
 801da6c:	21a8      	movs	r1, #168	; 0xa8
 801da6e:	1878      	adds	r0, r7, r1
 801da70:	6002      	str	r2, [r0, #0]
 801da72:	6043      	str	r3, [r0, #4]
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 801da74:	239c      	movs	r3, #156	; 0x9c
 801da76:	18fa      	adds	r2, r7, r3
 801da78:	6813      	ldr	r3, [r2, #0]
 801da7a:	220e      	movs	r2, #14
 801da7c:	5e9b      	ldrsh	r3, [r3, r2]
 801da7e:	64bb      	str	r3, [r7, #72]	; 0x48
 801da80:	17db      	asrs	r3, r3, #31
 801da82:	64fb      	str	r3, [r7, #76]	; 0x4c
 801da84:	19ba      	adds	r2, r7, r6
 801da86:	6853      	ldr	r3, [r2, #4]
 801da88:	6812      	ldr	r2, [r2, #0]
 801da8a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801da8c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801da8e:	f7e2 fd7f 	bl	8000590 <__aeabi_lmul>
 801da92:	0002      	movs	r2, r0
 801da94:	000b      	movs	r3, r1
 801da96:	0bd1      	lsrs	r1, r2, #15
 801da98:	045d      	lsls	r5, r3, #17
 801da9a:	430d      	orrs	r5, r1
 801da9c:	0454      	lsls	r4, r2, #17
 801da9e:	21a8      	movs	r1, #168	; 0xa8
 801daa0:	187a      	adds	r2, r7, r1
 801daa2:	6853      	ldr	r3, [r2, #4]
 801daa4:	6812      	ldr	r2, [r2, #0]
 801daa6:	1912      	adds	r2, r2, r4
 801daa8:	416b      	adcs	r3, r5
 801daaa:	1878      	adds	r0, r7, r1
 801daac:	6002      	str	r2, [r0, #0]
 801daae:	6043      	str	r3, [r0, #4]
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 801dab0:	259c      	movs	r5, #156	; 0x9c
 801dab2:	197b      	adds	r3, r7, r5
 801dab4:	681b      	ldr	r3, [r3, #0]
 801dab6:	220c      	movs	r2, #12
 801dab8:	5e9b      	ldrsh	r3, [r3, r2]
 801daba:	643b      	str	r3, [r7, #64]	; 0x40
 801dabc:	17db      	asrs	r3, r3, #31
 801dabe:	647b      	str	r3, [r7, #68]	; 0x44
 801dac0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801dac2:	00db      	lsls	r3, r3, #3
 801dac4:	63fb      	str	r3, [r7, #60]	; 0x3c
 801dac6:	2300      	movs	r3, #0
 801dac8:	63bb      	str	r3, [r7, #56]	; 0x38
 801daca:	000c      	movs	r4, r1
 801dacc:	187b      	adds	r3, r7, r1
 801dace:	681a      	ldr	r2, [r3, #0]
 801dad0:	685b      	ldr	r3, [r3, #4]
 801dad2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801dad4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801dad6:	1812      	adds	r2, r2, r0
 801dad8:	414b      	adcs	r3, r1
 801dada:	1939      	adds	r1, r7, r4
 801dadc:	600a      	str	r2, [r1, #0]
 801dade:	604b      	str	r3, [r1, #4]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 801dae0:	0034      	movs	r4, r6
 801dae2:	193b      	adds	r3, r7, r4
 801dae4:	681a      	ldr	r2, [r3, #0]
 801dae6:	685b      	ldr	r3, [r3, #4]
 801dae8:	1939      	adds	r1, r7, r4
 801daea:	6808      	ldr	r0, [r1, #0]
 801daec:	6849      	ldr	r1, [r1, #4]
 801daee:	f7e2 fd4f 	bl	8000590 <__aeabi_lmul>
 801daf2:	0002      	movs	r2, r0
 801daf4:	000b      	movs	r3, r1
 801daf6:	0010      	movs	r0, r2
 801daf8:	0019      	movs	r1, r3
 801dafa:	197b      	adds	r3, r7, r5
 801dafc:	681b      	ldr	r3, [r3, #0]
 801dafe:	220a      	movs	r2, #10
 801db00:	5e9b      	ldrsh	r3, [r3, r2]
 801db02:	633b      	str	r3, [r7, #48]	; 0x30
 801db04:	17db      	asrs	r3, r3, #31
 801db06:	637b      	str	r3, [r7, #52]	; 0x34
 801db08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801db0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801db0c:	f7e2 fd40 	bl	8000590 <__aeabi_lmul>
 801db10:	0002      	movs	r2, r0
 801db12:	000b      	movs	r3, r1
 801db14:	0619      	lsls	r1, r3, #24
 801db16:	468c      	mov	ip, r1
 801db18:	0a10      	lsrs	r0, r2, #8
 801db1a:	2688      	movs	r6, #136	; 0x88
 801db1c:	19b9      	adds	r1, r7, r6
 801db1e:	6008      	str	r0, [r1, #0]
 801db20:	19b8      	adds	r0, r7, r6
 801db22:	6800      	ldr	r0, [r0, #0]
 801db24:	4661      	mov	r1, ip
 801db26:	4308      	orrs	r0, r1
 801db28:	19b9      	adds	r1, r7, r6
 801db2a:	6008      	str	r0, [r1, #0]
 801db2c:	121b      	asrs	r3, r3, #8
 801db2e:	228c      	movs	r2, #140	; 0x8c
 801db30:	18ba      	adds	r2, r7, r2
 801db32:	6013      	str	r3, [r2, #0]
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 801db34:	197b      	adds	r3, r7, r5
 801db36:	681b      	ldr	r3, [r3, #0]
 801db38:	2208      	movs	r2, #8
 801db3a:	5e9b      	ldrsh	r3, [r3, r2]
 801db3c:	62bb      	str	r3, [r7, #40]	; 0x28
 801db3e:	17db      	asrs	r3, r3, #31
 801db40:	62fb      	str	r3, [r7, #44]	; 0x2c
 801db42:	193b      	adds	r3, r7, r4
 801db44:	681a      	ldr	r2, [r3, #0]
 801db46:	685b      	ldr	r3, [r3, #4]
 801db48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801db4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801db4c:	f7e2 fd20 	bl	8000590 <__aeabi_lmul>
 801db50:	0002      	movs	r2, r0
 801db52:	000b      	movs	r3, r1
 801db54:	0d11      	lsrs	r1, r2, #20
 801db56:	468c      	mov	ip, r1
 801db58:	0318      	lsls	r0, r3, #12
 801db5a:	2184      	movs	r1, #132	; 0x84
 801db5c:	1879      	adds	r1, r7, r1
 801db5e:	6008      	str	r0, [r1, #0]
 801db60:	2084      	movs	r0, #132	; 0x84
 801db62:	1839      	adds	r1, r7, r0
 801db64:	6808      	ldr	r0, [r1, #0]
 801db66:	4661      	mov	r1, ip
 801db68:	4308      	orrs	r0, r1
 801db6a:	2184      	movs	r1, #132	; 0x84
 801db6c:	1879      	adds	r1, r7, r1
 801db6e:	6008      	str	r0, [r1, #0]
 801db70:	0313      	lsls	r3, r2, #12
 801db72:	2180      	movs	r1, #128	; 0x80
 801db74:	187a      	adds	r2, r7, r1
 801db76:	6013      	str	r3, [r2, #0]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 801db78:	19bb      	adds	r3, r7, r6
 801db7a:	681a      	ldr	r2, [r3, #0]
 801db7c:	685b      	ldr	r3, [r3, #4]
 801db7e:	1879      	adds	r1, r7, r1
 801db80:	6808      	ldr	r0, [r1, #0]
 801db82:	6849      	ldr	r1, [r1, #4]
 801db84:	1812      	adds	r2, r2, r0
 801db86:	414b      	adcs	r3, r1
 801db88:	1939      	adds	r1, r7, r4
 801db8a:	600a      	str	r2, [r1, #0]
 801db8c:	604b      	str	r3, [r1, #4]
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 801db8e:	193b      	adds	r3, r7, r4
 801db90:	6818      	ldr	r0, [r3, #0]
 801db92:	6859      	ldr	r1, [r3, #4]
 801db94:	2200      	movs	r2, #0
 801db96:	2380      	movs	r3, #128	; 0x80
 801db98:	021b      	lsls	r3, r3, #8
 801db9a:	1880      	adds	r0, r0, r2
 801db9c:	4159      	adcs	r1, r3
 801db9e:	197b      	adds	r3, r7, r5
 801dba0:	681b      	ldr	r3, [r3, #0]
 801dba2:	88db      	ldrh	r3, [r3, #6]
 801dba4:	623b      	str	r3, [r7, #32]
 801dba6:	2300      	movs	r3, #0
 801dba8:	627b      	str	r3, [r7, #36]	; 0x24
 801dbaa:	6a3a      	ldr	r2, [r7, #32]
 801dbac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dbae:	f7e2 fcef 	bl	8000590 <__aeabi_lmul>
 801dbb2:	0002      	movs	r2, r0
 801dbb4:	000b      	movs	r3, r1
 801dbb6:	1059      	asrs	r1, r3, #1
 801dbb8:	1938      	adds	r0, r7, r4
 801dbba:	6001      	str	r1, [r0, #0]
 801dbbc:	17db      	asrs	r3, r3, #31
 801dbbe:	21b4      	movs	r1, #180	; 0xb4
 801dbc0:	187a      	adds	r2, r7, r1
 801dbc2:	6013      	str	r3, [r2, #0]

	if (var1 == 0) {
 801dbc4:	193b      	adds	r3, r7, r4
 801dbc6:	681a      	ldr	r2, [r3, #0]
 801dbc8:	187b      	adds	r3, r7, r1
 801dbca:	681b      	ldr	r3, [r3, #0]
 801dbcc:	431a      	orrs	r2, r3
 801dbce:	d101      	bne.n	801dbd4 <compensate_pressure+0x1d8>
		return 0;  // avoid exception caused by division by zero
 801dbd0:	2300      	movs	r3, #0
 801dbd2:	e0bc      	b.n	801dd4e <compensate_pressure+0x352>
	}

	p = 1048576 - adc_press;
 801dbd4:	2398      	movs	r3, #152	; 0x98
 801dbd6:	18fb      	adds	r3, r7, r3
 801dbd8:	681a      	ldr	r2, [r3, #0]
 801dbda:	2380      	movs	r3, #128	; 0x80
 801dbdc:	035b      	lsls	r3, r3, #13
 801dbde:	1a9b      	subs	r3, r3, r2
 801dbe0:	24a0      	movs	r4, #160	; 0xa0
 801dbe2:	193a      	adds	r2, r7, r4
 801dbe4:	6013      	str	r3, [r2, #0]
 801dbe6:	17db      	asrs	r3, r3, #31
 801dbe8:	25a4      	movs	r5, #164	; 0xa4
 801dbea:	197a      	adds	r2, r7, r5
 801dbec:	6013      	str	r3, [r2, #0]
	p = (((p << 31) - var2) * 3125) / var1;
 801dbee:	193b      	adds	r3, r7, r4
 801dbf0:	681b      	ldr	r3, [r3, #0]
 801dbf2:	105b      	asrs	r3, r3, #1
 801dbf4:	61fb      	str	r3, [r7, #28]
 801dbf6:	193b      	adds	r3, r7, r4
 801dbf8:	681b      	ldr	r3, [r3, #0]
 801dbfa:	07db      	lsls	r3, r3, #31
 801dbfc:	61bb      	str	r3, [r7, #24]
 801dbfe:	20a8      	movs	r0, #168	; 0xa8
 801dc00:	183a      	adds	r2, r7, r0
 801dc02:	6853      	ldr	r3, [r2, #4]
 801dc04:	6812      	ldr	r2, [r2, #0]
 801dc06:	69b8      	ldr	r0, [r7, #24]
 801dc08:	69f9      	ldr	r1, [r7, #28]
 801dc0a:	1a80      	subs	r0, r0, r2
 801dc0c:	4199      	sbcs	r1, r3
 801dc0e:	4a53      	ldr	r2, [pc, #332]	; (801dd5c <compensate_pressure+0x360>)
 801dc10:	2300      	movs	r3, #0
 801dc12:	f7e2 fcbd 	bl	8000590 <__aeabi_lmul>
 801dc16:	0002      	movs	r2, r0
 801dc18:	000b      	movs	r3, r1
 801dc1a:	0010      	movs	r0, r2
 801dc1c:	0019      	movs	r1, r3
 801dc1e:	23b0      	movs	r3, #176	; 0xb0
 801dc20:	18fa      	adds	r2, r7, r3
 801dc22:	6853      	ldr	r3, [r2, #4]
 801dc24:	6812      	ldr	r2, [r2, #0]
 801dc26:	f7e2 fc6f 	bl	8000508 <__aeabi_ldivmod>
 801dc2a:	0002      	movs	r2, r0
 801dc2c:	000b      	movs	r3, r1
 801dc2e:	1939      	adds	r1, r7, r4
 801dc30:	600a      	str	r2, [r1, #0]
 801dc32:	604b      	str	r3, [r1, #4]
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 801dc34:	269c      	movs	r6, #156	; 0x9c
 801dc36:	19ba      	adds	r2, r7, r6
 801dc38:	6813      	ldr	r3, [r2, #0]
 801dc3a:	2216      	movs	r2, #22
 801dc3c:	5e9b      	ldrsh	r3, [r3, r2]
 801dc3e:	613b      	str	r3, [r7, #16]
 801dc40:	17db      	asrs	r3, r3, #31
 801dc42:	617b      	str	r3, [r7, #20]
 801dc44:	197a      	adds	r2, r7, r5
 801dc46:	6813      	ldr	r3, [r2, #0]
 801dc48:	04da      	lsls	r2, r3, #19
 801dc4a:	1939      	adds	r1, r7, r4
 801dc4c:	680b      	ldr	r3, [r1, #0]
 801dc4e:	0b5b      	lsrs	r3, r3, #13
 801dc50:	67bb      	str	r3, [r7, #120]	; 0x78
 801dc52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801dc54:	4313      	orrs	r3, r2
 801dc56:	67bb      	str	r3, [r7, #120]	; 0x78
 801dc58:	197a      	adds	r2, r7, r5
 801dc5a:	6813      	ldr	r3, [r2, #0]
 801dc5c:	135b      	asrs	r3, r3, #13
 801dc5e:	67fb      	str	r3, [r7, #124]	; 0x7c
 801dc60:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801dc62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801dc64:	6938      	ldr	r0, [r7, #16]
 801dc66:	6979      	ldr	r1, [r7, #20]
 801dc68:	f7e2 fc92 	bl	8000590 <__aeabi_lmul>
 801dc6c:	0002      	movs	r2, r0
 801dc6e:	000b      	movs	r3, r1
 801dc70:	0010      	movs	r0, r2
 801dc72:	0019      	movs	r1, r3
 801dc74:	197a      	adds	r2, r7, r5
 801dc76:	6813      	ldr	r3, [r2, #0]
 801dc78:	04da      	lsls	r2, r3, #19
 801dc7a:	193b      	adds	r3, r7, r4
 801dc7c:	681b      	ldr	r3, [r3, #0]
 801dc7e:	0b5b      	lsrs	r3, r3, #13
 801dc80:	673b      	str	r3, [r7, #112]	; 0x70
 801dc82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801dc84:	4313      	orrs	r3, r2
 801dc86:	673b      	str	r3, [r7, #112]	; 0x70
 801dc88:	197a      	adds	r2, r7, r5
 801dc8a:	6813      	ldr	r3, [r2, #0]
 801dc8c:	135b      	asrs	r3, r3, #13
 801dc8e:	677b      	str	r3, [r7, #116]	; 0x74
 801dc90:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801dc92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801dc94:	f7e2 fc7c 	bl	8000590 <__aeabi_lmul>
 801dc98:	0002      	movs	r2, r0
 801dc9a:	000b      	movs	r3, r1
 801dc9c:	01d9      	lsls	r1, r3, #7
 801dc9e:	0e50      	lsrs	r0, r2, #25
 801dca0:	4301      	orrs	r1, r0
 801dca2:	25b0      	movs	r5, #176	; 0xb0
 801dca4:	1978      	adds	r0, r7, r5
 801dca6:	6001      	str	r1, [r0, #0]
 801dca8:	165b      	asrs	r3, r3, #25
 801dcaa:	22b4      	movs	r2, #180	; 0xb4
 801dcac:	18ba      	adds	r2, r7, r2
 801dcae:	6013      	str	r3, [r2, #0]
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 801dcb0:	19ba      	adds	r2, r7, r6
 801dcb2:	6813      	ldr	r3, [r2, #0]
 801dcb4:	2214      	movs	r2, #20
 801dcb6:	5e9b      	ldrsh	r3, [r3, r2]
 801dcb8:	60bb      	str	r3, [r7, #8]
 801dcba:	17db      	asrs	r3, r3, #31
 801dcbc:	60fb      	str	r3, [r7, #12]
 801dcbe:	193a      	adds	r2, r7, r4
 801dcc0:	6853      	ldr	r3, [r2, #4]
 801dcc2:	6812      	ldr	r2, [r2, #0]
 801dcc4:	68b8      	ldr	r0, [r7, #8]
 801dcc6:	68f9      	ldr	r1, [r7, #12]
 801dcc8:	f7e2 fc62 	bl	8000590 <__aeabi_lmul>
 801dccc:	0002      	movs	r2, r0
 801dcce:	000b      	movs	r3, r1
 801dcd0:	0359      	lsls	r1, r3, #13
 801dcd2:	0cd0      	lsrs	r0, r2, #19
 801dcd4:	4301      	orrs	r1, r0
 801dcd6:	20a8      	movs	r0, #168	; 0xa8
 801dcd8:	1838      	adds	r0, r7, r0
 801dcda:	6001      	str	r1, [r0, #0]
 801dcdc:	14db      	asrs	r3, r3, #19
 801dcde:	22ac      	movs	r2, #172	; 0xac
 801dce0:	18ba      	adds	r2, r7, r2
 801dce2:	6013      	str	r3, [r2, #0]

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 801dce4:	193a      	adds	r2, r7, r4
 801dce6:	6810      	ldr	r0, [r2, #0]
 801dce8:	6851      	ldr	r1, [r2, #4]
 801dcea:	197a      	adds	r2, r7, r5
 801dcec:	6853      	ldr	r3, [r2, #4]
 801dcee:	6812      	ldr	r2, [r2, #0]
 801dcf0:	1880      	adds	r0, r0, r2
 801dcf2:	4159      	adcs	r1, r3
 801dcf4:	23a8      	movs	r3, #168	; 0xa8
 801dcf6:	18fb      	adds	r3, r7, r3
 801dcf8:	681a      	ldr	r2, [r3, #0]
 801dcfa:	685b      	ldr	r3, [r3, #4]
 801dcfc:	1812      	adds	r2, r2, r0
 801dcfe:	414b      	adcs	r3, r1
 801dd00:	0619      	lsls	r1, r3, #24
 801dd02:	0a10      	lsrs	r0, r2, #8
 801dd04:	66b8      	str	r0, [r7, #104]	; 0x68
 801dd06:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 801dd08:	4308      	orrs	r0, r1
 801dd0a:	66b8      	str	r0, [r7, #104]	; 0x68
 801dd0c:	121b      	asrs	r3, r3, #8
 801dd0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 801dd10:	19bb      	adds	r3, r7, r6
 801dd12:	681b      	ldr	r3, [r3, #0]
 801dd14:	2212      	movs	r2, #18
 801dd16:	5e9b      	ldrsh	r3, [r3, r2]
 801dd18:	603b      	str	r3, [r7, #0]
 801dd1a:	17db      	asrs	r3, r3, #31
 801dd1c:	607b      	str	r3, [r7, #4]
 801dd1e:	6839      	ldr	r1, [r7, #0]
 801dd20:	687a      	ldr	r2, [r7, #4]
 801dd22:	000b      	movs	r3, r1
 801dd24:	0f1b      	lsrs	r3, r3, #28
 801dd26:	0010      	movs	r0, r2
 801dd28:	0100      	lsls	r0, r0, #4
 801dd2a:	6678      	str	r0, [r7, #100]	; 0x64
 801dd2c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 801dd2e:	4318      	orrs	r0, r3
 801dd30:	6678      	str	r0, [r7, #100]	; 0x64
 801dd32:	000b      	movs	r3, r1
 801dd34:	011b      	lsls	r3, r3, #4
 801dd36:	663b      	str	r3, [r7, #96]	; 0x60
 801dd38:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801dd3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801dd3c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801dd3e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801dd40:	1812      	adds	r2, r2, r0
 801dd42:	414b      	adcs	r3, r1
 801dd44:	1939      	adds	r1, r7, r4
 801dd46:	600a      	str	r2, [r1, #0]
 801dd48:	604b      	str	r3, [r1, #4]
	return p;
 801dd4a:	193b      	adds	r3, r7, r4
 801dd4c:	681b      	ldr	r3, [r3, #0]
}
 801dd4e:	0018      	movs	r0, r3
 801dd50:	46bd      	mov	sp, r7
 801dd52:	b02f      	add	sp, #188	; 0xbc
 801dd54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dd56:	46c0      	nop			; (mov r8, r8)
 801dd58:	fffe0c00 	.word	0xfffe0c00
 801dd5c:	00000c35 	.word	0x00000c35

0801dd60 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 801dd60:	b580      	push	{r7, lr}
 801dd62:	b086      	sub	sp, #24
 801dd64:	af00      	add	r7, sp, #0
 801dd66:	60f8      	str	r0, [r7, #12]
 801dd68:	60b9      	str	r1, [r7, #8]
 801dd6a:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 801dd6c:	687b      	ldr	r3, [r7, #4]
 801dd6e:	4a2c      	ldr	r2, [pc, #176]	; (801de20 <compensate_humidity+0xc0>)
 801dd70:	4694      	mov	ip, r2
 801dd72:	4463      	add	r3, ip
 801dd74:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 801dd76:	68bb      	ldr	r3, [r7, #8]
 801dd78:	039a      	lsls	r2, r3, #14
 801dd7a:	68fb      	ldr	r3, [r7, #12]
 801dd7c:	211e      	movs	r1, #30
 801dd7e:	5e5b      	ldrsh	r3, [r3, r1]
 801dd80:	051b      	lsls	r3, r3, #20
 801dd82:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 801dd84:	68fb      	ldr	r3, [r7, #12]
 801dd86:	2120      	movs	r1, #32
 801dd88:	5e5b      	ldrsh	r3, [r3, r1]
 801dd8a:	0019      	movs	r1, r3
 801dd8c:	697b      	ldr	r3, [r7, #20]
 801dd8e:	434b      	muls	r3, r1
 801dd90:	1ad3      	subs	r3, r2, r3
 801dd92:	2280      	movs	r2, #128	; 0x80
 801dd94:	01d2      	lsls	r2, r2, #7
 801dd96:	4694      	mov	ip, r2
 801dd98:	4463      	add	r3, ip
 801dd9a:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 801dd9c:	68fa      	ldr	r2, [r7, #12]
 801dd9e:	2122      	movs	r1, #34	; 0x22
 801dda0:	5652      	ldrsb	r2, [r2, r1]
 801dda2:	0011      	movs	r1, r2
 801dda4:	697a      	ldr	r2, [r7, #20]
 801dda6:	434a      	muls	r2, r1
 801dda8:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 801ddaa:	68f9      	ldr	r1, [r7, #12]
 801ddac:	7f09      	ldrb	r1, [r1, #28]
 801ddae:	0008      	movs	r0, r1
 801ddb0:	6979      	ldr	r1, [r7, #20]
 801ddb2:	4341      	muls	r1, r0
 801ddb4:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 801ddb6:	2080      	movs	r0, #128	; 0x80
 801ddb8:	0200      	lsls	r0, r0, #8
 801ddba:	4684      	mov	ip, r0
 801ddbc:	4461      	add	r1, ip
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 801ddbe:	434a      	muls	r2, r1
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 801ddc0:	1292      	asrs	r2, r2, #10
 801ddc2:	2180      	movs	r1, #128	; 0x80
 801ddc4:	0389      	lsls	r1, r1, #14
 801ddc6:	468c      	mov	ip, r1
 801ddc8:	4462      	add	r2, ip
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 801ddca:	68f9      	ldr	r1, [r7, #12]
 801ddcc:	201a      	movs	r0, #26
 801ddce:	5e09      	ldrsh	r1, [r1, r0]
 801ddd0:	434a      	muls	r2, r1
 801ddd2:	2180      	movs	r1, #128	; 0x80
 801ddd4:	0189      	lsls	r1, r1, #6
 801ddd6:	468c      	mov	ip, r1
 801ddd8:	4462      	add	r2, ip
 801ddda:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 801dddc:	4353      	muls	r3, r2
 801ddde:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 801dde0:	697b      	ldr	r3, [r7, #20]
 801dde2:	13db      	asrs	r3, r3, #15
 801dde4:	697a      	ldr	r2, [r7, #20]
 801dde6:	13d2      	asrs	r2, r2, #15
 801dde8:	4353      	muls	r3, r2
 801ddea:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 801ddec:	68fa      	ldr	r2, [r7, #12]
 801ddee:	7e12      	ldrb	r2, [r2, #24]
 801ddf0:	4353      	muls	r3, r2
 801ddf2:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 801ddf4:	697a      	ldr	r2, [r7, #20]
 801ddf6:	1ad3      	subs	r3, r2, r3
 801ddf8:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 801ddfa:	697b      	ldr	r3, [r7, #20]
 801ddfc:	2b00      	cmp	r3, #0
 801ddfe:	da00      	bge.n	801de02 <compensate_humidity+0xa2>
 801de00:	2300      	movs	r3, #0
 801de02:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 801de04:	697b      	ldr	r3, [r7, #20]
 801de06:	22c8      	movs	r2, #200	; 0xc8
 801de08:	0552      	lsls	r2, r2, #21
 801de0a:	4293      	cmp	r3, r2
 801de0c:	dd01      	ble.n	801de12 <compensate_humidity+0xb2>
 801de0e:	23c8      	movs	r3, #200	; 0xc8
 801de10:	055b      	lsls	r3, r3, #21
 801de12:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 801de14:	697b      	ldr	r3, [r7, #20]
 801de16:	131b      	asrs	r3, r3, #12
}
 801de18:	0018      	movs	r0, r3
 801de1a:	46bd      	mov	sp, r7
 801de1c:	b006      	add	sp, #24
 801de1e:	bd80      	pop	{r7, pc}
 801de20:	fffed400 	.word	0xfffed400

0801de24 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 801de24:	b590      	push	{r4, r7, lr}
 801de26:	b08d      	sub	sp, #52	; 0x34
 801de28:	af00      	add	r7, sp, #0
 801de2a:	60f8      	str	r0, [r7, #12]
 801de2c:	60b9      	str	r1, [r7, #8]
 801de2e:	607a      	str	r2, [r7, #4]
 801de30:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 801de32:	68fb      	ldr	r3, [r7, #12]
 801de34:	2232      	movs	r2, #50	; 0x32
 801de36:	5c9b      	ldrb	r3, [r3, r2]
 801de38:	2b60      	cmp	r3, #96	; 0x60
 801de3a:	d007      	beq.n	801de4c <bmp280_read_fixed+0x28>
		if (humidity)
 801de3c:	683b      	ldr	r3, [r7, #0]
 801de3e:	2b00      	cmp	r3, #0
 801de40:	d002      	beq.n	801de48 <bmp280_read_fixed+0x24>
			*humidity = 0;
 801de42:	683b      	ldr	r3, [r7, #0]
 801de44:	2200      	movs	r2, #0
 801de46:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 801de48:	2300      	movs	r3, #0
 801de4a:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 801de4c:	683b      	ldr	r3, [r7, #0]
 801de4e:	2b00      	cmp	r3, #0
 801de50:	d001      	beq.n	801de56 <bmp280_read_fixed+0x32>
 801de52:	2308      	movs	r3, #8
 801de54:	e000      	b.n	801de58 <bmp280_read_fixed+0x34>
 801de56:	2306      	movs	r3, #6
 801de58:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 801de5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801de5c:	b2db      	uxtb	r3, r3
 801de5e:	2218      	movs	r2, #24
 801de60:	18ba      	adds	r2, r7, r2
 801de62:	68f8      	ldr	r0, [r7, #12]
 801de64:	21f7      	movs	r1, #247	; 0xf7
 801de66:	f7ff fb9b 	bl	801d5a0 <read_data>
 801de6a:	1e03      	subs	r3, r0, #0
 801de6c:	d001      	beq.n	801de72 <bmp280_read_fixed+0x4e>
		return false;
 801de6e:	2300      	movs	r3, #0
 801de70:	e041      	b.n	801def6 <bmp280_read_fixed+0xd2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 801de72:	2418      	movs	r4, #24
 801de74:	193b      	adds	r3, r7, r4
 801de76:	781b      	ldrb	r3, [r3, #0]
 801de78:	031a      	lsls	r2, r3, #12
 801de7a:	193b      	adds	r3, r7, r4
 801de7c:	785b      	ldrb	r3, [r3, #1]
 801de7e:	011b      	lsls	r3, r3, #4
 801de80:	4313      	orrs	r3, r2
 801de82:	193a      	adds	r2, r7, r4
 801de84:	7892      	ldrb	r2, [r2, #2]
 801de86:	0912      	lsrs	r2, r2, #4
 801de88:	b2d2      	uxtb	r2, r2
 801de8a:	4313      	orrs	r3, r2
 801de8c:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 801de8e:	193b      	adds	r3, r7, r4
 801de90:	78db      	ldrb	r3, [r3, #3]
 801de92:	031a      	lsls	r2, r3, #12
 801de94:	193b      	adds	r3, r7, r4
 801de96:	791b      	ldrb	r3, [r3, #4]
 801de98:	011b      	lsls	r3, r3, #4
 801de9a:	4313      	orrs	r3, r2
 801de9c:	193a      	adds	r2, r7, r4
 801de9e:	7952      	ldrb	r2, [r2, #5]
 801dea0:	0912      	lsrs	r2, r2, #4
 801dea2:	b2d2      	uxtb	r2, r2
 801dea4:	4313      	orrs	r3, r2
 801dea6:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 801dea8:	2314      	movs	r3, #20
 801deaa:	18fa      	adds	r2, r7, r3
 801deac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801deae:	68fb      	ldr	r3, [r7, #12]
 801deb0:	0018      	movs	r0, r3
 801deb2:	f7ff fd6e 	bl	801d992 <compensate_temperature>
 801deb6:	0002      	movs	r2, r0
 801deb8:	68bb      	ldr	r3, [r7, #8]
 801deba:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 801debc:	697a      	ldr	r2, [r7, #20]
 801debe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801dec0:	68fb      	ldr	r3, [r7, #12]
 801dec2:	0018      	movs	r0, r3
 801dec4:	f7ff fd9a 	bl	801d9fc <compensate_pressure>
 801dec8:	0002      	movs	r2, r0
 801deca:	687b      	ldr	r3, [r7, #4]
 801decc:	601a      	str	r2, [r3, #0]

	if (humidity) {
 801dece:	683b      	ldr	r3, [r7, #0]
 801ded0:	2b00      	cmp	r3, #0
 801ded2:	d00f      	beq.n	801def4 <bmp280_read_fixed+0xd0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 801ded4:	193b      	adds	r3, r7, r4
 801ded6:	799b      	ldrb	r3, [r3, #6]
 801ded8:	021b      	lsls	r3, r3, #8
 801deda:	193a      	adds	r2, r7, r4
 801dedc:	79d2      	ldrb	r2, [r2, #7]
 801dede:	4313      	orrs	r3, r2
 801dee0:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 801dee2:	697a      	ldr	r2, [r7, #20]
 801dee4:	6a39      	ldr	r1, [r7, #32]
 801dee6:	68fb      	ldr	r3, [r7, #12]
 801dee8:	0018      	movs	r0, r3
 801deea:	f7ff ff39 	bl	801dd60 <compensate_humidity>
 801deee:	0002      	movs	r2, r0
 801def0:	683b      	ldr	r3, [r7, #0]
 801def2:	601a      	str	r2, [r3, #0]
	}

	return true;
 801def4:	2301      	movs	r3, #1
}
 801def6:	0018      	movs	r0, r3
 801def8:	46bd      	mov	sp, r7
 801defa:	b00d      	add	sp, #52	; 0x34
 801defc:	bd90      	pop	{r4, r7, pc}
	...

0801df00 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 801df00:	b580      	push	{r7, lr}
 801df02:	b088      	sub	sp, #32
 801df04:	af00      	add	r7, sp, #0
 801df06:	60f8      	str	r0, [r7, #12]
 801df08:	60b9      	str	r1, [r7, #8]
 801df0a:	607a      	str	r2, [r7, #4]
 801df0c:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 801df0e:	683b      	ldr	r3, [r7, #0]
 801df10:	2b00      	cmp	r3, #0
 801df12:	d002      	beq.n	801df1a <bmp280_read_float+0x1a>
 801df14:	2314      	movs	r3, #20
 801df16:	18fb      	adds	r3, r7, r3
 801df18:	e000      	b.n	801df1c <bmp280_read_float+0x1c>
 801df1a:	2300      	movs	r3, #0
 801df1c:	2218      	movs	r2, #24
 801df1e:	18ba      	adds	r2, r7, r2
 801df20:	211c      	movs	r1, #28
 801df22:	1879      	adds	r1, r7, r1
 801df24:	68f8      	ldr	r0, [r7, #12]
 801df26:	f7ff ff7d 	bl	801de24 <bmp280_read_fixed>
 801df2a:	1e03      	subs	r3, r0, #0
 801df2c:	d02d      	beq.n	801df8a <bmp280_read_float+0x8a>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 801df2e:	69fb      	ldr	r3, [r7, #28]
 801df30:	0018      	movs	r0, r3
 801df32:	f7e3 f827 	bl	8000f84 <__aeabi_i2f>
 801df36:	1c03      	adds	r3, r0, #0
 801df38:	4916      	ldr	r1, [pc, #88]	; (801df94 <bmp280_read_float+0x94>)
 801df3a:	1c18      	adds	r0, r3, #0
 801df3c:	f7e2 fc70 	bl	8000820 <__aeabi_fdiv>
 801df40:	1c03      	adds	r3, r0, #0
 801df42:	1c1a      	adds	r2, r3, #0
 801df44:	68bb      	ldr	r3, [r7, #8]
 801df46:	601a      	str	r2, [r3, #0]
		*pressure = (float) fixed_pressure / 256;
 801df48:	69bb      	ldr	r3, [r7, #24]
 801df4a:	0018      	movs	r0, r3
 801df4c:	f7e3 f860 	bl	8001010 <__aeabi_ui2f>
 801df50:	1c03      	adds	r3, r0, #0
 801df52:	2187      	movs	r1, #135	; 0x87
 801df54:	05c9      	lsls	r1, r1, #23
 801df56:	1c18      	adds	r0, r3, #0
 801df58:	f7e2 fc62 	bl	8000820 <__aeabi_fdiv>
 801df5c:	1c03      	adds	r3, r0, #0
 801df5e:	1c1a      	adds	r2, r3, #0
 801df60:	687b      	ldr	r3, [r7, #4]
 801df62:	601a      	str	r2, [r3, #0]
		if (humidity)
 801df64:	683b      	ldr	r3, [r7, #0]
 801df66:	2b00      	cmp	r3, #0
 801df68:	d00d      	beq.n	801df86 <bmp280_read_float+0x86>
			*humidity = (float) fixed_humidity / 1024;
 801df6a:	697b      	ldr	r3, [r7, #20]
 801df6c:	0018      	movs	r0, r3
 801df6e:	f7e3 f84f 	bl	8001010 <__aeabi_ui2f>
 801df72:	1c03      	adds	r3, r0, #0
 801df74:	2189      	movs	r1, #137	; 0x89
 801df76:	05c9      	lsls	r1, r1, #23
 801df78:	1c18      	adds	r0, r3, #0
 801df7a:	f7e2 fc51 	bl	8000820 <__aeabi_fdiv>
 801df7e:	1c03      	adds	r3, r0, #0
 801df80:	1c1a      	adds	r2, r3, #0
 801df82:	683b      	ldr	r3, [r7, #0]
 801df84:	601a      	str	r2, [r3, #0]
		return true;
 801df86:	2301      	movs	r3, #1
 801df88:	e000      	b.n	801df8c <bmp280_read_float+0x8c>
	}

	return false;
 801df8a:	2300      	movs	r3, #0
}
 801df8c:	0018      	movs	r0, r3
 801df8e:	46bd      	mov	sp, r7
 801df90:	b008      	add	sp, #32
 801df92:	bd80      	pop	{r7, pc}
 801df94:	42c80000 	.word	0x42c80000

0801df98 <__errno>:
 801df98:	4b01      	ldr	r3, [pc, #4]	; (801dfa0 <__errno+0x8>)
 801df9a:	6818      	ldr	r0, [r3, #0]
 801df9c:	4770      	bx	lr
 801df9e:	46c0      	nop			; (mov r8, r8)
 801dfa0:	200001d8 	.word	0x200001d8

0801dfa4 <__libc_init_array>:
 801dfa4:	b570      	push	{r4, r5, r6, lr}
 801dfa6:	2600      	movs	r6, #0
 801dfa8:	4d0c      	ldr	r5, [pc, #48]	; (801dfdc <__libc_init_array+0x38>)
 801dfaa:	4c0d      	ldr	r4, [pc, #52]	; (801dfe0 <__libc_init_array+0x3c>)
 801dfac:	1b64      	subs	r4, r4, r5
 801dfae:	10a4      	asrs	r4, r4, #2
 801dfb0:	42a6      	cmp	r6, r4
 801dfb2:	d109      	bne.n	801dfc8 <__libc_init_array+0x24>
 801dfb4:	2600      	movs	r6, #0
 801dfb6:	f000 fcd1 	bl	801e95c <_init>
 801dfba:	4d0a      	ldr	r5, [pc, #40]	; (801dfe4 <__libc_init_array+0x40>)
 801dfbc:	4c0a      	ldr	r4, [pc, #40]	; (801dfe8 <__libc_init_array+0x44>)
 801dfbe:	1b64      	subs	r4, r4, r5
 801dfc0:	10a4      	asrs	r4, r4, #2
 801dfc2:	42a6      	cmp	r6, r4
 801dfc4:	d105      	bne.n	801dfd2 <__libc_init_array+0x2e>
 801dfc6:	bd70      	pop	{r4, r5, r6, pc}
 801dfc8:	00b3      	lsls	r3, r6, #2
 801dfca:	58eb      	ldr	r3, [r5, r3]
 801dfcc:	4798      	blx	r3
 801dfce:	3601      	adds	r6, #1
 801dfd0:	e7ee      	b.n	801dfb0 <__libc_init_array+0xc>
 801dfd2:	00b3      	lsls	r3, r6, #2
 801dfd4:	58eb      	ldr	r3, [r5, r3]
 801dfd6:	4798      	blx	r3
 801dfd8:	3601      	adds	r6, #1
 801dfda:	e7f2      	b.n	801dfc2 <__libc_init_array+0x1e>
 801dfdc:	0801ff5c 	.word	0x0801ff5c
 801dfe0:	0801ff5c 	.word	0x0801ff5c
 801dfe4:	0801ff5c 	.word	0x0801ff5c
 801dfe8:	0801ff60 	.word	0x0801ff60

0801dfec <memcpy>:
 801dfec:	2300      	movs	r3, #0
 801dfee:	b510      	push	{r4, lr}
 801dff0:	429a      	cmp	r2, r3
 801dff2:	d100      	bne.n	801dff6 <memcpy+0xa>
 801dff4:	bd10      	pop	{r4, pc}
 801dff6:	5ccc      	ldrb	r4, [r1, r3]
 801dff8:	54c4      	strb	r4, [r0, r3]
 801dffa:	3301      	adds	r3, #1
 801dffc:	e7f8      	b.n	801dff0 <memcpy+0x4>

0801dffe <memset>:
 801dffe:	0003      	movs	r3, r0
 801e000:	1882      	adds	r2, r0, r2
 801e002:	4293      	cmp	r3, r2
 801e004:	d100      	bne.n	801e008 <memset+0xa>
 801e006:	4770      	bx	lr
 801e008:	7019      	strb	r1, [r3, #0]
 801e00a:	3301      	adds	r3, #1
 801e00c:	e7f9      	b.n	801e002 <memset+0x4>
	...

0801e010 <siprintf>:
 801e010:	b40e      	push	{r1, r2, r3}
 801e012:	b500      	push	{lr}
 801e014:	490b      	ldr	r1, [pc, #44]	; (801e044 <siprintf+0x34>)
 801e016:	b09c      	sub	sp, #112	; 0x70
 801e018:	ab1d      	add	r3, sp, #116	; 0x74
 801e01a:	9002      	str	r0, [sp, #8]
 801e01c:	9006      	str	r0, [sp, #24]
 801e01e:	9107      	str	r1, [sp, #28]
 801e020:	9104      	str	r1, [sp, #16]
 801e022:	4809      	ldr	r0, [pc, #36]	; (801e048 <siprintf+0x38>)
 801e024:	4909      	ldr	r1, [pc, #36]	; (801e04c <siprintf+0x3c>)
 801e026:	cb04      	ldmia	r3!, {r2}
 801e028:	9105      	str	r1, [sp, #20]
 801e02a:	6800      	ldr	r0, [r0, #0]
 801e02c:	a902      	add	r1, sp, #8
 801e02e:	9301      	str	r3, [sp, #4]
 801e030:	f000 f91a 	bl	801e268 <_svfiprintf_r>
 801e034:	2300      	movs	r3, #0
 801e036:	9a02      	ldr	r2, [sp, #8]
 801e038:	7013      	strb	r3, [r2, #0]
 801e03a:	b01c      	add	sp, #112	; 0x70
 801e03c:	bc08      	pop	{r3}
 801e03e:	b003      	add	sp, #12
 801e040:	4718      	bx	r3
 801e042:	46c0      	nop			; (mov r8, r8)
 801e044:	7fffffff 	.word	0x7fffffff
 801e048:	200001d8 	.word	0x200001d8
 801e04c:	ffff0208 	.word	0xffff0208

0801e050 <__retarget_lock_acquire_recursive>:
 801e050:	4770      	bx	lr

0801e052 <__retarget_lock_release_recursive>:
 801e052:	4770      	bx	lr

0801e054 <_free_r>:
 801e054:	b570      	push	{r4, r5, r6, lr}
 801e056:	0005      	movs	r5, r0
 801e058:	2900      	cmp	r1, #0
 801e05a:	d010      	beq.n	801e07e <_free_r+0x2a>
 801e05c:	1f0c      	subs	r4, r1, #4
 801e05e:	6823      	ldr	r3, [r4, #0]
 801e060:	2b00      	cmp	r3, #0
 801e062:	da00      	bge.n	801e066 <_free_r+0x12>
 801e064:	18e4      	adds	r4, r4, r3
 801e066:	0028      	movs	r0, r5
 801e068:	f000 fbb0 	bl	801e7cc <__malloc_lock>
 801e06c:	4a1d      	ldr	r2, [pc, #116]	; (801e0e4 <_free_r+0x90>)
 801e06e:	6813      	ldr	r3, [r2, #0]
 801e070:	2b00      	cmp	r3, #0
 801e072:	d105      	bne.n	801e080 <_free_r+0x2c>
 801e074:	6063      	str	r3, [r4, #4]
 801e076:	6014      	str	r4, [r2, #0]
 801e078:	0028      	movs	r0, r5
 801e07a:	f000 fbaf 	bl	801e7dc <__malloc_unlock>
 801e07e:	bd70      	pop	{r4, r5, r6, pc}
 801e080:	42a3      	cmp	r3, r4
 801e082:	d908      	bls.n	801e096 <_free_r+0x42>
 801e084:	6821      	ldr	r1, [r4, #0]
 801e086:	1860      	adds	r0, r4, r1
 801e088:	4283      	cmp	r3, r0
 801e08a:	d1f3      	bne.n	801e074 <_free_r+0x20>
 801e08c:	6818      	ldr	r0, [r3, #0]
 801e08e:	685b      	ldr	r3, [r3, #4]
 801e090:	1841      	adds	r1, r0, r1
 801e092:	6021      	str	r1, [r4, #0]
 801e094:	e7ee      	b.n	801e074 <_free_r+0x20>
 801e096:	001a      	movs	r2, r3
 801e098:	685b      	ldr	r3, [r3, #4]
 801e09a:	2b00      	cmp	r3, #0
 801e09c:	d001      	beq.n	801e0a2 <_free_r+0x4e>
 801e09e:	42a3      	cmp	r3, r4
 801e0a0:	d9f9      	bls.n	801e096 <_free_r+0x42>
 801e0a2:	6811      	ldr	r1, [r2, #0]
 801e0a4:	1850      	adds	r0, r2, r1
 801e0a6:	42a0      	cmp	r0, r4
 801e0a8:	d10b      	bne.n	801e0c2 <_free_r+0x6e>
 801e0aa:	6820      	ldr	r0, [r4, #0]
 801e0ac:	1809      	adds	r1, r1, r0
 801e0ae:	1850      	adds	r0, r2, r1
 801e0b0:	6011      	str	r1, [r2, #0]
 801e0b2:	4283      	cmp	r3, r0
 801e0b4:	d1e0      	bne.n	801e078 <_free_r+0x24>
 801e0b6:	6818      	ldr	r0, [r3, #0]
 801e0b8:	685b      	ldr	r3, [r3, #4]
 801e0ba:	1841      	adds	r1, r0, r1
 801e0bc:	6011      	str	r1, [r2, #0]
 801e0be:	6053      	str	r3, [r2, #4]
 801e0c0:	e7da      	b.n	801e078 <_free_r+0x24>
 801e0c2:	42a0      	cmp	r0, r4
 801e0c4:	d902      	bls.n	801e0cc <_free_r+0x78>
 801e0c6:	230c      	movs	r3, #12
 801e0c8:	602b      	str	r3, [r5, #0]
 801e0ca:	e7d5      	b.n	801e078 <_free_r+0x24>
 801e0cc:	6821      	ldr	r1, [r4, #0]
 801e0ce:	1860      	adds	r0, r4, r1
 801e0d0:	4283      	cmp	r3, r0
 801e0d2:	d103      	bne.n	801e0dc <_free_r+0x88>
 801e0d4:	6818      	ldr	r0, [r3, #0]
 801e0d6:	685b      	ldr	r3, [r3, #4]
 801e0d8:	1841      	adds	r1, r0, r1
 801e0da:	6021      	str	r1, [r4, #0]
 801e0dc:	6063      	str	r3, [r4, #4]
 801e0de:	6054      	str	r4, [r2, #4]
 801e0e0:	e7ca      	b.n	801e078 <_free_r+0x24>
 801e0e2:	46c0      	nop			; (mov r8, r8)
 801e0e4:	20001344 	.word	0x20001344

0801e0e8 <_malloc_r>:
 801e0e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e0ea:	2303      	movs	r3, #3
 801e0ec:	1ccd      	adds	r5, r1, #3
 801e0ee:	439d      	bics	r5, r3
 801e0f0:	3508      	adds	r5, #8
 801e0f2:	0006      	movs	r6, r0
 801e0f4:	2d0c      	cmp	r5, #12
 801e0f6:	d21f      	bcs.n	801e138 <_malloc_r+0x50>
 801e0f8:	250c      	movs	r5, #12
 801e0fa:	42a9      	cmp	r1, r5
 801e0fc:	d81e      	bhi.n	801e13c <_malloc_r+0x54>
 801e0fe:	0030      	movs	r0, r6
 801e100:	f000 fb64 	bl	801e7cc <__malloc_lock>
 801e104:	4925      	ldr	r1, [pc, #148]	; (801e19c <_malloc_r+0xb4>)
 801e106:	680a      	ldr	r2, [r1, #0]
 801e108:	0014      	movs	r4, r2
 801e10a:	2c00      	cmp	r4, #0
 801e10c:	d11a      	bne.n	801e144 <_malloc_r+0x5c>
 801e10e:	4f24      	ldr	r7, [pc, #144]	; (801e1a0 <_malloc_r+0xb8>)
 801e110:	683b      	ldr	r3, [r7, #0]
 801e112:	2b00      	cmp	r3, #0
 801e114:	d104      	bne.n	801e120 <_malloc_r+0x38>
 801e116:	0021      	movs	r1, r4
 801e118:	0030      	movs	r0, r6
 801e11a:	f000 fb27 	bl	801e76c <_sbrk_r>
 801e11e:	6038      	str	r0, [r7, #0]
 801e120:	0029      	movs	r1, r5
 801e122:	0030      	movs	r0, r6
 801e124:	f000 fb22 	bl	801e76c <_sbrk_r>
 801e128:	1c43      	adds	r3, r0, #1
 801e12a:	d12b      	bne.n	801e184 <_malloc_r+0x9c>
 801e12c:	230c      	movs	r3, #12
 801e12e:	0030      	movs	r0, r6
 801e130:	6033      	str	r3, [r6, #0]
 801e132:	f000 fb53 	bl	801e7dc <__malloc_unlock>
 801e136:	e003      	b.n	801e140 <_malloc_r+0x58>
 801e138:	2d00      	cmp	r5, #0
 801e13a:	dade      	bge.n	801e0fa <_malloc_r+0x12>
 801e13c:	230c      	movs	r3, #12
 801e13e:	6033      	str	r3, [r6, #0]
 801e140:	2000      	movs	r0, #0
 801e142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e144:	6823      	ldr	r3, [r4, #0]
 801e146:	1b5b      	subs	r3, r3, r5
 801e148:	d419      	bmi.n	801e17e <_malloc_r+0x96>
 801e14a:	2b0b      	cmp	r3, #11
 801e14c:	d903      	bls.n	801e156 <_malloc_r+0x6e>
 801e14e:	6023      	str	r3, [r4, #0]
 801e150:	18e4      	adds	r4, r4, r3
 801e152:	6025      	str	r5, [r4, #0]
 801e154:	e003      	b.n	801e15e <_malloc_r+0x76>
 801e156:	6863      	ldr	r3, [r4, #4]
 801e158:	42a2      	cmp	r2, r4
 801e15a:	d10e      	bne.n	801e17a <_malloc_r+0x92>
 801e15c:	600b      	str	r3, [r1, #0]
 801e15e:	0030      	movs	r0, r6
 801e160:	f000 fb3c 	bl	801e7dc <__malloc_unlock>
 801e164:	0020      	movs	r0, r4
 801e166:	2207      	movs	r2, #7
 801e168:	300b      	adds	r0, #11
 801e16a:	1d23      	adds	r3, r4, #4
 801e16c:	4390      	bics	r0, r2
 801e16e:	1ac2      	subs	r2, r0, r3
 801e170:	4298      	cmp	r0, r3
 801e172:	d0e6      	beq.n	801e142 <_malloc_r+0x5a>
 801e174:	1a1b      	subs	r3, r3, r0
 801e176:	50a3      	str	r3, [r4, r2]
 801e178:	e7e3      	b.n	801e142 <_malloc_r+0x5a>
 801e17a:	6053      	str	r3, [r2, #4]
 801e17c:	e7ef      	b.n	801e15e <_malloc_r+0x76>
 801e17e:	0022      	movs	r2, r4
 801e180:	6864      	ldr	r4, [r4, #4]
 801e182:	e7c2      	b.n	801e10a <_malloc_r+0x22>
 801e184:	2303      	movs	r3, #3
 801e186:	1cc4      	adds	r4, r0, #3
 801e188:	439c      	bics	r4, r3
 801e18a:	42a0      	cmp	r0, r4
 801e18c:	d0e1      	beq.n	801e152 <_malloc_r+0x6a>
 801e18e:	1a21      	subs	r1, r4, r0
 801e190:	0030      	movs	r0, r6
 801e192:	f000 faeb 	bl	801e76c <_sbrk_r>
 801e196:	1c43      	adds	r3, r0, #1
 801e198:	d1db      	bne.n	801e152 <_malloc_r+0x6a>
 801e19a:	e7c7      	b.n	801e12c <_malloc_r+0x44>
 801e19c:	20001344 	.word	0x20001344
 801e1a0:	20001348 	.word	0x20001348

0801e1a4 <__ssputs_r>:
 801e1a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e1a6:	688e      	ldr	r6, [r1, #8]
 801e1a8:	b085      	sub	sp, #20
 801e1aa:	0007      	movs	r7, r0
 801e1ac:	000c      	movs	r4, r1
 801e1ae:	9203      	str	r2, [sp, #12]
 801e1b0:	9301      	str	r3, [sp, #4]
 801e1b2:	429e      	cmp	r6, r3
 801e1b4:	d83c      	bhi.n	801e230 <__ssputs_r+0x8c>
 801e1b6:	2390      	movs	r3, #144	; 0x90
 801e1b8:	898a      	ldrh	r2, [r1, #12]
 801e1ba:	00db      	lsls	r3, r3, #3
 801e1bc:	421a      	tst	r2, r3
 801e1be:	d034      	beq.n	801e22a <__ssputs_r+0x86>
 801e1c0:	2503      	movs	r5, #3
 801e1c2:	6909      	ldr	r1, [r1, #16]
 801e1c4:	6823      	ldr	r3, [r4, #0]
 801e1c6:	1a5b      	subs	r3, r3, r1
 801e1c8:	9302      	str	r3, [sp, #8]
 801e1ca:	6963      	ldr	r3, [r4, #20]
 801e1cc:	9802      	ldr	r0, [sp, #8]
 801e1ce:	435d      	muls	r5, r3
 801e1d0:	0feb      	lsrs	r3, r5, #31
 801e1d2:	195d      	adds	r5, r3, r5
 801e1d4:	9b01      	ldr	r3, [sp, #4]
 801e1d6:	106d      	asrs	r5, r5, #1
 801e1d8:	3301      	adds	r3, #1
 801e1da:	181b      	adds	r3, r3, r0
 801e1dc:	42ab      	cmp	r3, r5
 801e1de:	d900      	bls.n	801e1e2 <__ssputs_r+0x3e>
 801e1e0:	001d      	movs	r5, r3
 801e1e2:	0553      	lsls	r3, r2, #21
 801e1e4:	d532      	bpl.n	801e24c <__ssputs_r+0xa8>
 801e1e6:	0029      	movs	r1, r5
 801e1e8:	0038      	movs	r0, r7
 801e1ea:	f7ff ff7d 	bl	801e0e8 <_malloc_r>
 801e1ee:	1e06      	subs	r6, r0, #0
 801e1f0:	d109      	bne.n	801e206 <__ssputs_r+0x62>
 801e1f2:	230c      	movs	r3, #12
 801e1f4:	603b      	str	r3, [r7, #0]
 801e1f6:	2340      	movs	r3, #64	; 0x40
 801e1f8:	2001      	movs	r0, #1
 801e1fa:	89a2      	ldrh	r2, [r4, #12]
 801e1fc:	4240      	negs	r0, r0
 801e1fe:	4313      	orrs	r3, r2
 801e200:	81a3      	strh	r3, [r4, #12]
 801e202:	b005      	add	sp, #20
 801e204:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e206:	9a02      	ldr	r2, [sp, #8]
 801e208:	6921      	ldr	r1, [r4, #16]
 801e20a:	f7ff feef 	bl	801dfec <memcpy>
 801e20e:	89a3      	ldrh	r3, [r4, #12]
 801e210:	4a14      	ldr	r2, [pc, #80]	; (801e264 <__ssputs_r+0xc0>)
 801e212:	401a      	ands	r2, r3
 801e214:	2380      	movs	r3, #128	; 0x80
 801e216:	4313      	orrs	r3, r2
 801e218:	81a3      	strh	r3, [r4, #12]
 801e21a:	9b02      	ldr	r3, [sp, #8]
 801e21c:	6126      	str	r6, [r4, #16]
 801e21e:	18f6      	adds	r6, r6, r3
 801e220:	6026      	str	r6, [r4, #0]
 801e222:	6165      	str	r5, [r4, #20]
 801e224:	9e01      	ldr	r6, [sp, #4]
 801e226:	1aed      	subs	r5, r5, r3
 801e228:	60a5      	str	r5, [r4, #8]
 801e22a:	9b01      	ldr	r3, [sp, #4]
 801e22c:	429e      	cmp	r6, r3
 801e22e:	d900      	bls.n	801e232 <__ssputs_r+0x8e>
 801e230:	9e01      	ldr	r6, [sp, #4]
 801e232:	0032      	movs	r2, r6
 801e234:	9903      	ldr	r1, [sp, #12]
 801e236:	6820      	ldr	r0, [r4, #0]
 801e238:	f000 fab5 	bl	801e7a6 <memmove>
 801e23c:	68a3      	ldr	r3, [r4, #8]
 801e23e:	2000      	movs	r0, #0
 801e240:	1b9b      	subs	r3, r3, r6
 801e242:	60a3      	str	r3, [r4, #8]
 801e244:	6823      	ldr	r3, [r4, #0]
 801e246:	199e      	adds	r6, r3, r6
 801e248:	6026      	str	r6, [r4, #0]
 801e24a:	e7da      	b.n	801e202 <__ssputs_r+0x5e>
 801e24c:	002a      	movs	r2, r5
 801e24e:	0038      	movs	r0, r7
 801e250:	f000 facc 	bl	801e7ec <_realloc_r>
 801e254:	1e06      	subs	r6, r0, #0
 801e256:	d1e0      	bne.n	801e21a <__ssputs_r+0x76>
 801e258:	0038      	movs	r0, r7
 801e25a:	6921      	ldr	r1, [r4, #16]
 801e25c:	f7ff fefa 	bl	801e054 <_free_r>
 801e260:	e7c7      	b.n	801e1f2 <__ssputs_r+0x4e>
 801e262:	46c0      	nop			; (mov r8, r8)
 801e264:	fffffb7f 	.word	0xfffffb7f

0801e268 <_svfiprintf_r>:
 801e268:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e26a:	b0a1      	sub	sp, #132	; 0x84
 801e26c:	9003      	str	r0, [sp, #12]
 801e26e:	001d      	movs	r5, r3
 801e270:	898b      	ldrh	r3, [r1, #12]
 801e272:	000f      	movs	r7, r1
 801e274:	0016      	movs	r6, r2
 801e276:	061b      	lsls	r3, r3, #24
 801e278:	d511      	bpl.n	801e29e <_svfiprintf_r+0x36>
 801e27a:	690b      	ldr	r3, [r1, #16]
 801e27c:	2b00      	cmp	r3, #0
 801e27e:	d10e      	bne.n	801e29e <_svfiprintf_r+0x36>
 801e280:	2140      	movs	r1, #64	; 0x40
 801e282:	f7ff ff31 	bl	801e0e8 <_malloc_r>
 801e286:	6038      	str	r0, [r7, #0]
 801e288:	6138      	str	r0, [r7, #16]
 801e28a:	2800      	cmp	r0, #0
 801e28c:	d105      	bne.n	801e29a <_svfiprintf_r+0x32>
 801e28e:	230c      	movs	r3, #12
 801e290:	9a03      	ldr	r2, [sp, #12]
 801e292:	3801      	subs	r0, #1
 801e294:	6013      	str	r3, [r2, #0]
 801e296:	b021      	add	sp, #132	; 0x84
 801e298:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e29a:	2340      	movs	r3, #64	; 0x40
 801e29c:	617b      	str	r3, [r7, #20]
 801e29e:	2300      	movs	r3, #0
 801e2a0:	ac08      	add	r4, sp, #32
 801e2a2:	6163      	str	r3, [r4, #20]
 801e2a4:	3320      	adds	r3, #32
 801e2a6:	7663      	strb	r3, [r4, #25]
 801e2a8:	3310      	adds	r3, #16
 801e2aa:	76a3      	strb	r3, [r4, #26]
 801e2ac:	9507      	str	r5, [sp, #28]
 801e2ae:	0035      	movs	r5, r6
 801e2b0:	782b      	ldrb	r3, [r5, #0]
 801e2b2:	2b00      	cmp	r3, #0
 801e2b4:	d001      	beq.n	801e2ba <_svfiprintf_r+0x52>
 801e2b6:	2b25      	cmp	r3, #37	; 0x25
 801e2b8:	d147      	bne.n	801e34a <_svfiprintf_r+0xe2>
 801e2ba:	1bab      	subs	r3, r5, r6
 801e2bc:	9305      	str	r3, [sp, #20]
 801e2be:	42b5      	cmp	r5, r6
 801e2c0:	d00c      	beq.n	801e2dc <_svfiprintf_r+0x74>
 801e2c2:	0032      	movs	r2, r6
 801e2c4:	0039      	movs	r1, r7
 801e2c6:	9803      	ldr	r0, [sp, #12]
 801e2c8:	f7ff ff6c 	bl	801e1a4 <__ssputs_r>
 801e2cc:	1c43      	adds	r3, r0, #1
 801e2ce:	d100      	bne.n	801e2d2 <_svfiprintf_r+0x6a>
 801e2d0:	e0ae      	b.n	801e430 <_svfiprintf_r+0x1c8>
 801e2d2:	6962      	ldr	r2, [r4, #20]
 801e2d4:	9b05      	ldr	r3, [sp, #20]
 801e2d6:	4694      	mov	ip, r2
 801e2d8:	4463      	add	r3, ip
 801e2da:	6163      	str	r3, [r4, #20]
 801e2dc:	782b      	ldrb	r3, [r5, #0]
 801e2de:	2b00      	cmp	r3, #0
 801e2e0:	d100      	bne.n	801e2e4 <_svfiprintf_r+0x7c>
 801e2e2:	e0a5      	b.n	801e430 <_svfiprintf_r+0x1c8>
 801e2e4:	2201      	movs	r2, #1
 801e2e6:	2300      	movs	r3, #0
 801e2e8:	4252      	negs	r2, r2
 801e2ea:	6062      	str	r2, [r4, #4]
 801e2ec:	a904      	add	r1, sp, #16
 801e2ee:	3254      	adds	r2, #84	; 0x54
 801e2f0:	1852      	adds	r2, r2, r1
 801e2f2:	1c6e      	adds	r6, r5, #1
 801e2f4:	6023      	str	r3, [r4, #0]
 801e2f6:	60e3      	str	r3, [r4, #12]
 801e2f8:	60a3      	str	r3, [r4, #8]
 801e2fa:	7013      	strb	r3, [r2, #0]
 801e2fc:	65a3      	str	r3, [r4, #88]	; 0x58
 801e2fe:	2205      	movs	r2, #5
 801e300:	7831      	ldrb	r1, [r6, #0]
 801e302:	4854      	ldr	r0, [pc, #336]	; (801e454 <_svfiprintf_r+0x1ec>)
 801e304:	f000 fa44 	bl	801e790 <memchr>
 801e308:	1c75      	adds	r5, r6, #1
 801e30a:	2800      	cmp	r0, #0
 801e30c:	d11f      	bne.n	801e34e <_svfiprintf_r+0xe6>
 801e30e:	6822      	ldr	r2, [r4, #0]
 801e310:	06d3      	lsls	r3, r2, #27
 801e312:	d504      	bpl.n	801e31e <_svfiprintf_r+0xb6>
 801e314:	2353      	movs	r3, #83	; 0x53
 801e316:	a904      	add	r1, sp, #16
 801e318:	185b      	adds	r3, r3, r1
 801e31a:	2120      	movs	r1, #32
 801e31c:	7019      	strb	r1, [r3, #0]
 801e31e:	0713      	lsls	r3, r2, #28
 801e320:	d504      	bpl.n	801e32c <_svfiprintf_r+0xc4>
 801e322:	2353      	movs	r3, #83	; 0x53
 801e324:	a904      	add	r1, sp, #16
 801e326:	185b      	adds	r3, r3, r1
 801e328:	212b      	movs	r1, #43	; 0x2b
 801e32a:	7019      	strb	r1, [r3, #0]
 801e32c:	7833      	ldrb	r3, [r6, #0]
 801e32e:	2b2a      	cmp	r3, #42	; 0x2a
 801e330:	d016      	beq.n	801e360 <_svfiprintf_r+0xf8>
 801e332:	0035      	movs	r5, r6
 801e334:	2100      	movs	r1, #0
 801e336:	200a      	movs	r0, #10
 801e338:	68e3      	ldr	r3, [r4, #12]
 801e33a:	782a      	ldrb	r2, [r5, #0]
 801e33c:	1c6e      	adds	r6, r5, #1
 801e33e:	3a30      	subs	r2, #48	; 0x30
 801e340:	2a09      	cmp	r2, #9
 801e342:	d94e      	bls.n	801e3e2 <_svfiprintf_r+0x17a>
 801e344:	2900      	cmp	r1, #0
 801e346:	d111      	bne.n	801e36c <_svfiprintf_r+0x104>
 801e348:	e017      	b.n	801e37a <_svfiprintf_r+0x112>
 801e34a:	3501      	adds	r5, #1
 801e34c:	e7b0      	b.n	801e2b0 <_svfiprintf_r+0x48>
 801e34e:	4b41      	ldr	r3, [pc, #260]	; (801e454 <_svfiprintf_r+0x1ec>)
 801e350:	6822      	ldr	r2, [r4, #0]
 801e352:	1ac0      	subs	r0, r0, r3
 801e354:	2301      	movs	r3, #1
 801e356:	4083      	lsls	r3, r0
 801e358:	4313      	orrs	r3, r2
 801e35a:	002e      	movs	r6, r5
 801e35c:	6023      	str	r3, [r4, #0]
 801e35e:	e7ce      	b.n	801e2fe <_svfiprintf_r+0x96>
 801e360:	9b07      	ldr	r3, [sp, #28]
 801e362:	1d19      	adds	r1, r3, #4
 801e364:	681b      	ldr	r3, [r3, #0]
 801e366:	9107      	str	r1, [sp, #28]
 801e368:	2b00      	cmp	r3, #0
 801e36a:	db01      	blt.n	801e370 <_svfiprintf_r+0x108>
 801e36c:	930b      	str	r3, [sp, #44]	; 0x2c
 801e36e:	e004      	b.n	801e37a <_svfiprintf_r+0x112>
 801e370:	425b      	negs	r3, r3
 801e372:	60e3      	str	r3, [r4, #12]
 801e374:	2302      	movs	r3, #2
 801e376:	4313      	orrs	r3, r2
 801e378:	6023      	str	r3, [r4, #0]
 801e37a:	782b      	ldrb	r3, [r5, #0]
 801e37c:	2b2e      	cmp	r3, #46	; 0x2e
 801e37e:	d10a      	bne.n	801e396 <_svfiprintf_r+0x12e>
 801e380:	786b      	ldrb	r3, [r5, #1]
 801e382:	2b2a      	cmp	r3, #42	; 0x2a
 801e384:	d135      	bne.n	801e3f2 <_svfiprintf_r+0x18a>
 801e386:	9b07      	ldr	r3, [sp, #28]
 801e388:	3502      	adds	r5, #2
 801e38a:	1d1a      	adds	r2, r3, #4
 801e38c:	681b      	ldr	r3, [r3, #0]
 801e38e:	9207      	str	r2, [sp, #28]
 801e390:	2b00      	cmp	r3, #0
 801e392:	db2b      	blt.n	801e3ec <_svfiprintf_r+0x184>
 801e394:	9309      	str	r3, [sp, #36]	; 0x24
 801e396:	4e30      	ldr	r6, [pc, #192]	; (801e458 <_svfiprintf_r+0x1f0>)
 801e398:	2203      	movs	r2, #3
 801e39a:	0030      	movs	r0, r6
 801e39c:	7829      	ldrb	r1, [r5, #0]
 801e39e:	f000 f9f7 	bl	801e790 <memchr>
 801e3a2:	2800      	cmp	r0, #0
 801e3a4:	d006      	beq.n	801e3b4 <_svfiprintf_r+0x14c>
 801e3a6:	2340      	movs	r3, #64	; 0x40
 801e3a8:	1b80      	subs	r0, r0, r6
 801e3aa:	4083      	lsls	r3, r0
 801e3ac:	6822      	ldr	r2, [r4, #0]
 801e3ae:	3501      	adds	r5, #1
 801e3b0:	4313      	orrs	r3, r2
 801e3b2:	6023      	str	r3, [r4, #0]
 801e3b4:	7829      	ldrb	r1, [r5, #0]
 801e3b6:	2206      	movs	r2, #6
 801e3b8:	4828      	ldr	r0, [pc, #160]	; (801e45c <_svfiprintf_r+0x1f4>)
 801e3ba:	1c6e      	adds	r6, r5, #1
 801e3bc:	7621      	strb	r1, [r4, #24]
 801e3be:	f000 f9e7 	bl	801e790 <memchr>
 801e3c2:	2800      	cmp	r0, #0
 801e3c4:	d03c      	beq.n	801e440 <_svfiprintf_r+0x1d8>
 801e3c6:	4b26      	ldr	r3, [pc, #152]	; (801e460 <_svfiprintf_r+0x1f8>)
 801e3c8:	2b00      	cmp	r3, #0
 801e3ca:	d125      	bne.n	801e418 <_svfiprintf_r+0x1b0>
 801e3cc:	2207      	movs	r2, #7
 801e3ce:	9b07      	ldr	r3, [sp, #28]
 801e3d0:	3307      	adds	r3, #7
 801e3d2:	4393      	bics	r3, r2
 801e3d4:	3308      	adds	r3, #8
 801e3d6:	9307      	str	r3, [sp, #28]
 801e3d8:	6963      	ldr	r3, [r4, #20]
 801e3da:	9a04      	ldr	r2, [sp, #16]
 801e3dc:	189b      	adds	r3, r3, r2
 801e3de:	6163      	str	r3, [r4, #20]
 801e3e0:	e765      	b.n	801e2ae <_svfiprintf_r+0x46>
 801e3e2:	4343      	muls	r3, r0
 801e3e4:	0035      	movs	r5, r6
 801e3e6:	2101      	movs	r1, #1
 801e3e8:	189b      	adds	r3, r3, r2
 801e3ea:	e7a6      	b.n	801e33a <_svfiprintf_r+0xd2>
 801e3ec:	2301      	movs	r3, #1
 801e3ee:	425b      	negs	r3, r3
 801e3f0:	e7d0      	b.n	801e394 <_svfiprintf_r+0x12c>
 801e3f2:	2300      	movs	r3, #0
 801e3f4:	200a      	movs	r0, #10
 801e3f6:	001a      	movs	r2, r3
 801e3f8:	3501      	adds	r5, #1
 801e3fa:	6063      	str	r3, [r4, #4]
 801e3fc:	7829      	ldrb	r1, [r5, #0]
 801e3fe:	1c6e      	adds	r6, r5, #1
 801e400:	3930      	subs	r1, #48	; 0x30
 801e402:	2909      	cmp	r1, #9
 801e404:	d903      	bls.n	801e40e <_svfiprintf_r+0x1a6>
 801e406:	2b00      	cmp	r3, #0
 801e408:	d0c5      	beq.n	801e396 <_svfiprintf_r+0x12e>
 801e40a:	9209      	str	r2, [sp, #36]	; 0x24
 801e40c:	e7c3      	b.n	801e396 <_svfiprintf_r+0x12e>
 801e40e:	4342      	muls	r2, r0
 801e410:	0035      	movs	r5, r6
 801e412:	2301      	movs	r3, #1
 801e414:	1852      	adds	r2, r2, r1
 801e416:	e7f1      	b.n	801e3fc <_svfiprintf_r+0x194>
 801e418:	ab07      	add	r3, sp, #28
 801e41a:	9300      	str	r3, [sp, #0]
 801e41c:	003a      	movs	r2, r7
 801e41e:	0021      	movs	r1, r4
 801e420:	4b10      	ldr	r3, [pc, #64]	; (801e464 <_svfiprintf_r+0x1fc>)
 801e422:	9803      	ldr	r0, [sp, #12]
 801e424:	e000      	b.n	801e428 <_svfiprintf_r+0x1c0>
 801e426:	bf00      	nop
 801e428:	9004      	str	r0, [sp, #16]
 801e42a:	9b04      	ldr	r3, [sp, #16]
 801e42c:	3301      	adds	r3, #1
 801e42e:	d1d3      	bne.n	801e3d8 <_svfiprintf_r+0x170>
 801e430:	89bb      	ldrh	r3, [r7, #12]
 801e432:	980d      	ldr	r0, [sp, #52]	; 0x34
 801e434:	065b      	lsls	r3, r3, #25
 801e436:	d400      	bmi.n	801e43a <_svfiprintf_r+0x1d2>
 801e438:	e72d      	b.n	801e296 <_svfiprintf_r+0x2e>
 801e43a:	2001      	movs	r0, #1
 801e43c:	4240      	negs	r0, r0
 801e43e:	e72a      	b.n	801e296 <_svfiprintf_r+0x2e>
 801e440:	ab07      	add	r3, sp, #28
 801e442:	9300      	str	r3, [sp, #0]
 801e444:	003a      	movs	r2, r7
 801e446:	0021      	movs	r1, r4
 801e448:	4b06      	ldr	r3, [pc, #24]	; (801e464 <_svfiprintf_r+0x1fc>)
 801e44a:	9803      	ldr	r0, [sp, #12]
 801e44c:	f000 f87c 	bl	801e548 <_printf_i>
 801e450:	e7ea      	b.n	801e428 <_svfiprintf_r+0x1c0>
 801e452:	46c0      	nop			; (mov r8, r8)
 801e454:	0801ff20 	.word	0x0801ff20
 801e458:	0801ff26 	.word	0x0801ff26
 801e45c:	0801ff2a 	.word	0x0801ff2a
 801e460:	00000000 	.word	0x00000000
 801e464:	0801e1a5 	.word	0x0801e1a5

0801e468 <_printf_common>:
 801e468:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e46a:	0015      	movs	r5, r2
 801e46c:	9301      	str	r3, [sp, #4]
 801e46e:	688a      	ldr	r2, [r1, #8]
 801e470:	690b      	ldr	r3, [r1, #16]
 801e472:	000c      	movs	r4, r1
 801e474:	9000      	str	r0, [sp, #0]
 801e476:	4293      	cmp	r3, r2
 801e478:	da00      	bge.n	801e47c <_printf_common+0x14>
 801e47a:	0013      	movs	r3, r2
 801e47c:	0022      	movs	r2, r4
 801e47e:	602b      	str	r3, [r5, #0]
 801e480:	3243      	adds	r2, #67	; 0x43
 801e482:	7812      	ldrb	r2, [r2, #0]
 801e484:	2a00      	cmp	r2, #0
 801e486:	d001      	beq.n	801e48c <_printf_common+0x24>
 801e488:	3301      	adds	r3, #1
 801e48a:	602b      	str	r3, [r5, #0]
 801e48c:	6823      	ldr	r3, [r4, #0]
 801e48e:	069b      	lsls	r3, r3, #26
 801e490:	d502      	bpl.n	801e498 <_printf_common+0x30>
 801e492:	682b      	ldr	r3, [r5, #0]
 801e494:	3302      	adds	r3, #2
 801e496:	602b      	str	r3, [r5, #0]
 801e498:	6822      	ldr	r2, [r4, #0]
 801e49a:	2306      	movs	r3, #6
 801e49c:	0017      	movs	r7, r2
 801e49e:	401f      	ands	r7, r3
 801e4a0:	421a      	tst	r2, r3
 801e4a2:	d027      	beq.n	801e4f4 <_printf_common+0x8c>
 801e4a4:	0023      	movs	r3, r4
 801e4a6:	3343      	adds	r3, #67	; 0x43
 801e4a8:	781b      	ldrb	r3, [r3, #0]
 801e4aa:	1e5a      	subs	r2, r3, #1
 801e4ac:	4193      	sbcs	r3, r2
 801e4ae:	6822      	ldr	r2, [r4, #0]
 801e4b0:	0692      	lsls	r2, r2, #26
 801e4b2:	d430      	bmi.n	801e516 <_printf_common+0xae>
 801e4b4:	0022      	movs	r2, r4
 801e4b6:	9901      	ldr	r1, [sp, #4]
 801e4b8:	9800      	ldr	r0, [sp, #0]
 801e4ba:	9e08      	ldr	r6, [sp, #32]
 801e4bc:	3243      	adds	r2, #67	; 0x43
 801e4be:	47b0      	blx	r6
 801e4c0:	1c43      	adds	r3, r0, #1
 801e4c2:	d025      	beq.n	801e510 <_printf_common+0xa8>
 801e4c4:	2306      	movs	r3, #6
 801e4c6:	6820      	ldr	r0, [r4, #0]
 801e4c8:	682a      	ldr	r2, [r5, #0]
 801e4ca:	68e1      	ldr	r1, [r4, #12]
 801e4cc:	2500      	movs	r5, #0
 801e4ce:	4003      	ands	r3, r0
 801e4d0:	2b04      	cmp	r3, #4
 801e4d2:	d103      	bne.n	801e4dc <_printf_common+0x74>
 801e4d4:	1a8d      	subs	r5, r1, r2
 801e4d6:	43eb      	mvns	r3, r5
 801e4d8:	17db      	asrs	r3, r3, #31
 801e4da:	401d      	ands	r5, r3
 801e4dc:	68a3      	ldr	r3, [r4, #8]
 801e4de:	6922      	ldr	r2, [r4, #16]
 801e4e0:	4293      	cmp	r3, r2
 801e4e2:	dd01      	ble.n	801e4e8 <_printf_common+0x80>
 801e4e4:	1a9b      	subs	r3, r3, r2
 801e4e6:	18ed      	adds	r5, r5, r3
 801e4e8:	2700      	movs	r7, #0
 801e4ea:	42bd      	cmp	r5, r7
 801e4ec:	d120      	bne.n	801e530 <_printf_common+0xc8>
 801e4ee:	2000      	movs	r0, #0
 801e4f0:	e010      	b.n	801e514 <_printf_common+0xac>
 801e4f2:	3701      	adds	r7, #1
 801e4f4:	68e3      	ldr	r3, [r4, #12]
 801e4f6:	682a      	ldr	r2, [r5, #0]
 801e4f8:	1a9b      	subs	r3, r3, r2
 801e4fa:	42bb      	cmp	r3, r7
 801e4fc:	ddd2      	ble.n	801e4a4 <_printf_common+0x3c>
 801e4fe:	0022      	movs	r2, r4
 801e500:	2301      	movs	r3, #1
 801e502:	9901      	ldr	r1, [sp, #4]
 801e504:	9800      	ldr	r0, [sp, #0]
 801e506:	9e08      	ldr	r6, [sp, #32]
 801e508:	3219      	adds	r2, #25
 801e50a:	47b0      	blx	r6
 801e50c:	1c43      	adds	r3, r0, #1
 801e50e:	d1f0      	bne.n	801e4f2 <_printf_common+0x8a>
 801e510:	2001      	movs	r0, #1
 801e512:	4240      	negs	r0, r0
 801e514:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801e516:	2030      	movs	r0, #48	; 0x30
 801e518:	18e1      	adds	r1, r4, r3
 801e51a:	3143      	adds	r1, #67	; 0x43
 801e51c:	7008      	strb	r0, [r1, #0]
 801e51e:	0021      	movs	r1, r4
 801e520:	1c5a      	adds	r2, r3, #1
 801e522:	3145      	adds	r1, #69	; 0x45
 801e524:	7809      	ldrb	r1, [r1, #0]
 801e526:	18a2      	adds	r2, r4, r2
 801e528:	3243      	adds	r2, #67	; 0x43
 801e52a:	3302      	adds	r3, #2
 801e52c:	7011      	strb	r1, [r2, #0]
 801e52e:	e7c1      	b.n	801e4b4 <_printf_common+0x4c>
 801e530:	0022      	movs	r2, r4
 801e532:	2301      	movs	r3, #1
 801e534:	9901      	ldr	r1, [sp, #4]
 801e536:	9800      	ldr	r0, [sp, #0]
 801e538:	9e08      	ldr	r6, [sp, #32]
 801e53a:	321a      	adds	r2, #26
 801e53c:	47b0      	blx	r6
 801e53e:	1c43      	adds	r3, r0, #1
 801e540:	d0e6      	beq.n	801e510 <_printf_common+0xa8>
 801e542:	3701      	adds	r7, #1
 801e544:	e7d1      	b.n	801e4ea <_printf_common+0x82>
	...

0801e548 <_printf_i>:
 801e548:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e54a:	b08b      	sub	sp, #44	; 0x2c
 801e54c:	9206      	str	r2, [sp, #24]
 801e54e:	000a      	movs	r2, r1
 801e550:	3243      	adds	r2, #67	; 0x43
 801e552:	9307      	str	r3, [sp, #28]
 801e554:	9005      	str	r0, [sp, #20]
 801e556:	9204      	str	r2, [sp, #16]
 801e558:	7e0a      	ldrb	r2, [r1, #24]
 801e55a:	000c      	movs	r4, r1
 801e55c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e55e:	2a78      	cmp	r2, #120	; 0x78
 801e560:	d806      	bhi.n	801e570 <_printf_i+0x28>
 801e562:	2a62      	cmp	r2, #98	; 0x62
 801e564:	d808      	bhi.n	801e578 <_printf_i+0x30>
 801e566:	2a00      	cmp	r2, #0
 801e568:	d100      	bne.n	801e56c <_printf_i+0x24>
 801e56a:	e0c0      	b.n	801e6ee <_printf_i+0x1a6>
 801e56c:	2a58      	cmp	r2, #88	; 0x58
 801e56e:	d052      	beq.n	801e616 <_printf_i+0xce>
 801e570:	0026      	movs	r6, r4
 801e572:	3642      	adds	r6, #66	; 0x42
 801e574:	7032      	strb	r2, [r6, #0]
 801e576:	e022      	b.n	801e5be <_printf_i+0x76>
 801e578:	0010      	movs	r0, r2
 801e57a:	3863      	subs	r0, #99	; 0x63
 801e57c:	2815      	cmp	r0, #21
 801e57e:	d8f7      	bhi.n	801e570 <_printf_i+0x28>
 801e580:	f7e1 fdca 	bl	8000118 <__gnu_thumb1_case_shi>
 801e584:	001f0016 	.word	0x001f0016
 801e588:	fff6fff6 	.word	0xfff6fff6
 801e58c:	fff6fff6 	.word	0xfff6fff6
 801e590:	fff6001f 	.word	0xfff6001f
 801e594:	fff6fff6 	.word	0xfff6fff6
 801e598:	00a8fff6 	.word	0x00a8fff6
 801e59c:	009a0036 	.word	0x009a0036
 801e5a0:	fff6fff6 	.word	0xfff6fff6
 801e5a4:	fff600b9 	.word	0xfff600b9
 801e5a8:	fff60036 	.word	0xfff60036
 801e5ac:	009efff6 	.word	0x009efff6
 801e5b0:	0026      	movs	r6, r4
 801e5b2:	681a      	ldr	r2, [r3, #0]
 801e5b4:	3642      	adds	r6, #66	; 0x42
 801e5b6:	1d11      	adds	r1, r2, #4
 801e5b8:	6019      	str	r1, [r3, #0]
 801e5ba:	6813      	ldr	r3, [r2, #0]
 801e5bc:	7033      	strb	r3, [r6, #0]
 801e5be:	2301      	movs	r3, #1
 801e5c0:	e0a7      	b.n	801e712 <_printf_i+0x1ca>
 801e5c2:	6808      	ldr	r0, [r1, #0]
 801e5c4:	6819      	ldr	r1, [r3, #0]
 801e5c6:	1d0a      	adds	r2, r1, #4
 801e5c8:	0605      	lsls	r5, r0, #24
 801e5ca:	d50b      	bpl.n	801e5e4 <_printf_i+0x9c>
 801e5cc:	680d      	ldr	r5, [r1, #0]
 801e5ce:	601a      	str	r2, [r3, #0]
 801e5d0:	2d00      	cmp	r5, #0
 801e5d2:	da03      	bge.n	801e5dc <_printf_i+0x94>
 801e5d4:	232d      	movs	r3, #45	; 0x2d
 801e5d6:	9a04      	ldr	r2, [sp, #16]
 801e5d8:	426d      	negs	r5, r5
 801e5da:	7013      	strb	r3, [r2, #0]
 801e5dc:	4b61      	ldr	r3, [pc, #388]	; (801e764 <_printf_i+0x21c>)
 801e5de:	270a      	movs	r7, #10
 801e5e0:	9303      	str	r3, [sp, #12]
 801e5e2:	e032      	b.n	801e64a <_printf_i+0x102>
 801e5e4:	680d      	ldr	r5, [r1, #0]
 801e5e6:	601a      	str	r2, [r3, #0]
 801e5e8:	0641      	lsls	r1, r0, #25
 801e5ea:	d5f1      	bpl.n	801e5d0 <_printf_i+0x88>
 801e5ec:	b22d      	sxth	r5, r5
 801e5ee:	e7ef      	b.n	801e5d0 <_printf_i+0x88>
 801e5f0:	680d      	ldr	r5, [r1, #0]
 801e5f2:	6819      	ldr	r1, [r3, #0]
 801e5f4:	1d08      	adds	r0, r1, #4
 801e5f6:	6018      	str	r0, [r3, #0]
 801e5f8:	062e      	lsls	r6, r5, #24
 801e5fa:	d501      	bpl.n	801e600 <_printf_i+0xb8>
 801e5fc:	680d      	ldr	r5, [r1, #0]
 801e5fe:	e003      	b.n	801e608 <_printf_i+0xc0>
 801e600:	066d      	lsls	r5, r5, #25
 801e602:	d5fb      	bpl.n	801e5fc <_printf_i+0xb4>
 801e604:	680d      	ldr	r5, [r1, #0]
 801e606:	b2ad      	uxth	r5, r5
 801e608:	4b56      	ldr	r3, [pc, #344]	; (801e764 <_printf_i+0x21c>)
 801e60a:	270a      	movs	r7, #10
 801e60c:	9303      	str	r3, [sp, #12]
 801e60e:	2a6f      	cmp	r2, #111	; 0x6f
 801e610:	d117      	bne.n	801e642 <_printf_i+0xfa>
 801e612:	2708      	movs	r7, #8
 801e614:	e015      	b.n	801e642 <_printf_i+0xfa>
 801e616:	3145      	adds	r1, #69	; 0x45
 801e618:	700a      	strb	r2, [r1, #0]
 801e61a:	4a52      	ldr	r2, [pc, #328]	; (801e764 <_printf_i+0x21c>)
 801e61c:	9203      	str	r2, [sp, #12]
 801e61e:	681a      	ldr	r2, [r3, #0]
 801e620:	6821      	ldr	r1, [r4, #0]
 801e622:	ca20      	ldmia	r2!, {r5}
 801e624:	601a      	str	r2, [r3, #0]
 801e626:	0608      	lsls	r0, r1, #24
 801e628:	d550      	bpl.n	801e6cc <_printf_i+0x184>
 801e62a:	07cb      	lsls	r3, r1, #31
 801e62c:	d502      	bpl.n	801e634 <_printf_i+0xec>
 801e62e:	2320      	movs	r3, #32
 801e630:	4319      	orrs	r1, r3
 801e632:	6021      	str	r1, [r4, #0]
 801e634:	2710      	movs	r7, #16
 801e636:	2d00      	cmp	r5, #0
 801e638:	d103      	bne.n	801e642 <_printf_i+0xfa>
 801e63a:	2320      	movs	r3, #32
 801e63c:	6822      	ldr	r2, [r4, #0]
 801e63e:	439a      	bics	r2, r3
 801e640:	6022      	str	r2, [r4, #0]
 801e642:	0023      	movs	r3, r4
 801e644:	2200      	movs	r2, #0
 801e646:	3343      	adds	r3, #67	; 0x43
 801e648:	701a      	strb	r2, [r3, #0]
 801e64a:	6863      	ldr	r3, [r4, #4]
 801e64c:	60a3      	str	r3, [r4, #8]
 801e64e:	2b00      	cmp	r3, #0
 801e650:	db03      	blt.n	801e65a <_printf_i+0x112>
 801e652:	2204      	movs	r2, #4
 801e654:	6821      	ldr	r1, [r4, #0]
 801e656:	4391      	bics	r1, r2
 801e658:	6021      	str	r1, [r4, #0]
 801e65a:	2d00      	cmp	r5, #0
 801e65c:	d102      	bne.n	801e664 <_printf_i+0x11c>
 801e65e:	9e04      	ldr	r6, [sp, #16]
 801e660:	2b00      	cmp	r3, #0
 801e662:	d00c      	beq.n	801e67e <_printf_i+0x136>
 801e664:	9e04      	ldr	r6, [sp, #16]
 801e666:	0028      	movs	r0, r5
 801e668:	0039      	movs	r1, r7
 801e66a:	f7e1 fde5 	bl	8000238 <__aeabi_uidivmod>
 801e66e:	9b03      	ldr	r3, [sp, #12]
 801e670:	3e01      	subs	r6, #1
 801e672:	5c5b      	ldrb	r3, [r3, r1]
 801e674:	7033      	strb	r3, [r6, #0]
 801e676:	002b      	movs	r3, r5
 801e678:	0005      	movs	r5, r0
 801e67a:	429f      	cmp	r7, r3
 801e67c:	d9f3      	bls.n	801e666 <_printf_i+0x11e>
 801e67e:	2f08      	cmp	r7, #8
 801e680:	d109      	bne.n	801e696 <_printf_i+0x14e>
 801e682:	6823      	ldr	r3, [r4, #0]
 801e684:	07db      	lsls	r3, r3, #31
 801e686:	d506      	bpl.n	801e696 <_printf_i+0x14e>
 801e688:	6863      	ldr	r3, [r4, #4]
 801e68a:	6922      	ldr	r2, [r4, #16]
 801e68c:	4293      	cmp	r3, r2
 801e68e:	dc02      	bgt.n	801e696 <_printf_i+0x14e>
 801e690:	2330      	movs	r3, #48	; 0x30
 801e692:	3e01      	subs	r6, #1
 801e694:	7033      	strb	r3, [r6, #0]
 801e696:	9b04      	ldr	r3, [sp, #16]
 801e698:	1b9b      	subs	r3, r3, r6
 801e69a:	6123      	str	r3, [r4, #16]
 801e69c:	9b07      	ldr	r3, [sp, #28]
 801e69e:	0021      	movs	r1, r4
 801e6a0:	9300      	str	r3, [sp, #0]
 801e6a2:	9805      	ldr	r0, [sp, #20]
 801e6a4:	9b06      	ldr	r3, [sp, #24]
 801e6a6:	aa09      	add	r2, sp, #36	; 0x24
 801e6a8:	f7ff fede 	bl	801e468 <_printf_common>
 801e6ac:	1c43      	adds	r3, r0, #1
 801e6ae:	d135      	bne.n	801e71c <_printf_i+0x1d4>
 801e6b0:	2001      	movs	r0, #1
 801e6b2:	4240      	negs	r0, r0
 801e6b4:	b00b      	add	sp, #44	; 0x2c
 801e6b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e6b8:	2220      	movs	r2, #32
 801e6ba:	6809      	ldr	r1, [r1, #0]
 801e6bc:	430a      	orrs	r2, r1
 801e6be:	6022      	str	r2, [r4, #0]
 801e6c0:	0022      	movs	r2, r4
 801e6c2:	2178      	movs	r1, #120	; 0x78
 801e6c4:	3245      	adds	r2, #69	; 0x45
 801e6c6:	7011      	strb	r1, [r2, #0]
 801e6c8:	4a27      	ldr	r2, [pc, #156]	; (801e768 <_printf_i+0x220>)
 801e6ca:	e7a7      	b.n	801e61c <_printf_i+0xd4>
 801e6cc:	0648      	lsls	r0, r1, #25
 801e6ce:	d5ac      	bpl.n	801e62a <_printf_i+0xe2>
 801e6d0:	b2ad      	uxth	r5, r5
 801e6d2:	e7aa      	b.n	801e62a <_printf_i+0xe2>
 801e6d4:	681a      	ldr	r2, [r3, #0]
 801e6d6:	680d      	ldr	r5, [r1, #0]
 801e6d8:	1d10      	adds	r0, r2, #4
 801e6da:	6949      	ldr	r1, [r1, #20]
 801e6dc:	6018      	str	r0, [r3, #0]
 801e6de:	6813      	ldr	r3, [r2, #0]
 801e6e0:	062e      	lsls	r6, r5, #24
 801e6e2:	d501      	bpl.n	801e6e8 <_printf_i+0x1a0>
 801e6e4:	6019      	str	r1, [r3, #0]
 801e6e6:	e002      	b.n	801e6ee <_printf_i+0x1a6>
 801e6e8:	066d      	lsls	r5, r5, #25
 801e6ea:	d5fb      	bpl.n	801e6e4 <_printf_i+0x19c>
 801e6ec:	8019      	strh	r1, [r3, #0]
 801e6ee:	2300      	movs	r3, #0
 801e6f0:	9e04      	ldr	r6, [sp, #16]
 801e6f2:	6123      	str	r3, [r4, #16]
 801e6f4:	e7d2      	b.n	801e69c <_printf_i+0x154>
 801e6f6:	681a      	ldr	r2, [r3, #0]
 801e6f8:	1d11      	adds	r1, r2, #4
 801e6fa:	6019      	str	r1, [r3, #0]
 801e6fc:	6816      	ldr	r6, [r2, #0]
 801e6fe:	2100      	movs	r1, #0
 801e700:	0030      	movs	r0, r6
 801e702:	6862      	ldr	r2, [r4, #4]
 801e704:	f000 f844 	bl	801e790 <memchr>
 801e708:	2800      	cmp	r0, #0
 801e70a:	d001      	beq.n	801e710 <_printf_i+0x1c8>
 801e70c:	1b80      	subs	r0, r0, r6
 801e70e:	6060      	str	r0, [r4, #4]
 801e710:	6863      	ldr	r3, [r4, #4]
 801e712:	6123      	str	r3, [r4, #16]
 801e714:	2300      	movs	r3, #0
 801e716:	9a04      	ldr	r2, [sp, #16]
 801e718:	7013      	strb	r3, [r2, #0]
 801e71a:	e7bf      	b.n	801e69c <_printf_i+0x154>
 801e71c:	6923      	ldr	r3, [r4, #16]
 801e71e:	0032      	movs	r2, r6
 801e720:	9906      	ldr	r1, [sp, #24]
 801e722:	9805      	ldr	r0, [sp, #20]
 801e724:	9d07      	ldr	r5, [sp, #28]
 801e726:	47a8      	blx	r5
 801e728:	1c43      	adds	r3, r0, #1
 801e72a:	d0c1      	beq.n	801e6b0 <_printf_i+0x168>
 801e72c:	6823      	ldr	r3, [r4, #0]
 801e72e:	079b      	lsls	r3, r3, #30
 801e730:	d415      	bmi.n	801e75e <_printf_i+0x216>
 801e732:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e734:	68e0      	ldr	r0, [r4, #12]
 801e736:	4298      	cmp	r0, r3
 801e738:	dabc      	bge.n	801e6b4 <_printf_i+0x16c>
 801e73a:	0018      	movs	r0, r3
 801e73c:	e7ba      	b.n	801e6b4 <_printf_i+0x16c>
 801e73e:	0022      	movs	r2, r4
 801e740:	2301      	movs	r3, #1
 801e742:	9906      	ldr	r1, [sp, #24]
 801e744:	9805      	ldr	r0, [sp, #20]
 801e746:	9e07      	ldr	r6, [sp, #28]
 801e748:	3219      	adds	r2, #25
 801e74a:	47b0      	blx	r6
 801e74c:	1c43      	adds	r3, r0, #1
 801e74e:	d0af      	beq.n	801e6b0 <_printf_i+0x168>
 801e750:	3501      	adds	r5, #1
 801e752:	68e3      	ldr	r3, [r4, #12]
 801e754:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e756:	1a9b      	subs	r3, r3, r2
 801e758:	42ab      	cmp	r3, r5
 801e75a:	dcf0      	bgt.n	801e73e <_printf_i+0x1f6>
 801e75c:	e7e9      	b.n	801e732 <_printf_i+0x1ea>
 801e75e:	2500      	movs	r5, #0
 801e760:	e7f7      	b.n	801e752 <_printf_i+0x20a>
 801e762:	46c0      	nop			; (mov r8, r8)
 801e764:	0801ff31 	.word	0x0801ff31
 801e768:	0801ff42 	.word	0x0801ff42

0801e76c <_sbrk_r>:
 801e76c:	2300      	movs	r3, #0
 801e76e:	b570      	push	{r4, r5, r6, lr}
 801e770:	4d06      	ldr	r5, [pc, #24]	; (801e78c <_sbrk_r+0x20>)
 801e772:	0004      	movs	r4, r0
 801e774:	0008      	movs	r0, r1
 801e776:	602b      	str	r3, [r5, #0]
 801e778:	f7e6 ffb0 	bl	80056dc <_sbrk>
 801e77c:	1c43      	adds	r3, r0, #1
 801e77e:	d103      	bne.n	801e788 <_sbrk_r+0x1c>
 801e780:	682b      	ldr	r3, [r5, #0]
 801e782:	2b00      	cmp	r3, #0
 801e784:	d000      	beq.n	801e788 <_sbrk_r+0x1c>
 801e786:	6023      	str	r3, [r4, #0]
 801e788:	bd70      	pop	{r4, r5, r6, pc}
 801e78a:	46c0      	nop			; (mov r8, r8)
 801e78c:	200017b0 	.word	0x200017b0

0801e790 <memchr>:
 801e790:	b2c9      	uxtb	r1, r1
 801e792:	1882      	adds	r2, r0, r2
 801e794:	4290      	cmp	r0, r2
 801e796:	d101      	bne.n	801e79c <memchr+0xc>
 801e798:	2000      	movs	r0, #0
 801e79a:	4770      	bx	lr
 801e79c:	7803      	ldrb	r3, [r0, #0]
 801e79e:	428b      	cmp	r3, r1
 801e7a0:	d0fb      	beq.n	801e79a <memchr+0xa>
 801e7a2:	3001      	adds	r0, #1
 801e7a4:	e7f6      	b.n	801e794 <memchr+0x4>

0801e7a6 <memmove>:
 801e7a6:	b510      	push	{r4, lr}
 801e7a8:	4288      	cmp	r0, r1
 801e7aa:	d902      	bls.n	801e7b2 <memmove+0xc>
 801e7ac:	188b      	adds	r3, r1, r2
 801e7ae:	4298      	cmp	r0, r3
 801e7b0:	d303      	bcc.n	801e7ba <memmove+0x14>
 801e7b2:	2300      	movs	r3, #0
 801e7b4:	e007      	b.n	801e7c6 <memmove+0x20>
 801e7b6:	5c8b      	ldrb	r3, [r1, r2]
 801e7b8:	5483      	strb	r3, [r0, r2]
 801e7ba:	3a01      	subs	r2, #1
 801e7bc:	d2fb      	bcs.n	801e7b6 <memmove+0x10>
 801e7be:	bd10      	pop	{r4, pc}
 801e7c0:	5ccc      	ldrb	r4, [r1, r3]
 801e7c2:	54c4      	strb	r4, [r0, r3]
 801e7c4:	3301      	adds	r3, #1
 801e7c6:	429a      	cmp	r2, r3
 801e7c8:	d1fa      	bne.n	801e7c0 <memmove+0x1a>
 801e7ca:	e7f8      	b.n	801e7be <memmove+0x18>

0801e7cc <__malloc_lock>:
 801e7cc:	b510      	push	{r4, lr}
 801e7ce:	4802      	ldr	r0, [pc, #8]	; (801e7d8 <__malloc_lock+0xc>)
 801e7d0:	f7ff fc3e 	bl	801e050 <__retarget_lock_acquire_recursive>
 801e7d4:	bd10      	pop	{r4, pc}
 801e7d6:	46c0      	nop			; (mov r8, r8)
 801e7d8:	200017a8 	.word	0x200017a8

0801e7dc <__malloc_unlock>:
 801e7dc:	b510      	push	{r4, lr}
 801e7de:	4802      	ldr	r0, [pc, #8]	; (801e7e8 <__malloc_unlock+0xc>)
 801e7e0:	f7ff fc37 	bl	801e052 <__retarget_lock_release_recursive>
 801e7e4:	bd10      	pop	{r4, pc}
 801e7e6:	46c0      	nop			; (mov r8, r8)
 801e7e8:	200017a8 	.word	0x200017a8

0801e7ec <_realloc_r>:
 801e7ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e7ee:	0007      	movs	r7, r0
 801e7f0:	000d      	movs	r5, r1
 801e7f2:	0016      	movs	r6, r2
 801e7f4:	2900      	cmp	r1, #0
 801e7f6:	d105      	bne.n	801e804 <_realloc_r+0x18>
 801e7f8:	0011      	movs	r1, r2
 801e7fa:	f7ff fc75 	bl	801e0e8 <_malloc_r>
 801e7fe:	0004      	movs	r4, r0
 801e800:	0020      	movs	r0, r4
 801e802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e804:	2a00      	cmp	r2, #0
 801e806:	d103      	bne.n	801e810 <_realloc_r+0x24>
 801e808:	f7ff fc24 	bl	801e054 <_free_r>
 801e80c:	0034      	movs	r4, r6
 801e80e:	e7f7      	b.n	801e800 <_realloc_r+0x14>
 801e810:	f000 f812 	bl	801e838 <_malloc_usable_size_r>
 801e814:	002c      	movs	r4, r5
 801e816:	42b0      	cmp	r0, r6
 801e818:	d2f2      	bcs.n	801e800 <_realloc_r+0x14>
 801e81a:	0031      	movs	r1, r6
 801e81c:	0038      	movs	r0, r7
 801e81e:	f7ff fc63 	bl	801e0e8 <_malloc_r>
 801e822:	1e04      	subs	r4, r0, #0
 801e824:	d0ec      	beq.n	801e800 <_realloc_r+0x14>
 801e826:	0029      	movs	r1, r5
 801e828:	0032      	movs	r2, r6
 801e82a:	f7ff fbdf 	bl	801dfec <memcpy>
 801e82e:	0029      	movs	r1, r5
 801e830:	0038      	movs	r0, r7
 801e832:	f7ff fc0f 	bl	801e054 <_free_r>
 801e836:	e7e3      	b.n	801e800 <_realloc_r+0x14>

0801e838 <_malloc_usable_size_r>:
 801e838:	1f0b      	subs	r3, r1, #4
 801e83a:	681b      	ldr	r3, [r3, #0]
 801e83c:	1f18      	subs	r0, r3, #4
 801e83e:	2b00      	cmp	r3, #0
 801e840:	da01      	bge.n	801e846 <_malloc_usable_size_r+0xe>
 801e842:	580b      	ldr	r3, [r1, r0]
 801e844:	18c0      	adds	r0, r0, r3
 801e846:	4770      	bx	lr

0801e848 <floor>:
 801e848:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e84a:	004b      	lsls	r3, r1, #1
 801e84c:	4a3d      	ldr	r2, [pc, #244]	; (801e944 <floor+0xfc>)
 801e84e:	0d5b      	lsrs	r3, r3, #21
 801e850:	189f      	adds	r7, r3, r2
 801e852:	4684      	mov	ip, r0
 801e854:	000e      	movs	r6, r1
 801e856:	000d      	movs	r5, r1
 801e858:	0004      	movs	r4, r0
 801e85a:	9001      	str	r0, [sp, #4]
 801e85c:	2f13      	cmp	r7, #19
 801e85e:	dc34      	bgt.n	801e8ca <floor+0x82>
 801e860:	2f00      	cmp	r7, #0
 801e862:	da16      	bge.n	801e892 <floor+0x4a>
 801e864:	4a38      	ldr	r2, [pc, #224]	; (801e948 <floor+0x100>)
 801e866:	4b39      	ldr	r3, [pc, #228]	; (801e94c <floor+0x104>)
 801e868:	4660      	mov	r0, ip
 801e86a:	0031      	movs	r1, r6
 801e86c:	f7e2 fc0c 	bl	8001088 <__aeabi_dadd>
 801e870:	2200      	movs	r2, #0
 801e872:	2300      	movs	r3, #0
 801e874:	f7e1 fdfa 	bl	800046c <__aeabi_dcmpgt>
 801e878:	2800      	cmp	r0, #0
 801e87a:	d007      	beq.n	801e88c <floor+0x44>
 801e87c:	2e00      	cmp	r6, #0
 801e87e:	da5d      	bge.n	801e93c <floor+0xf4>
 801e880:	0073      	lsls	r3, r6, #1
 801e882:	085b      	lsrs	r3, r3, #1
 801e884:	431c      	orrs	r4, r3
 801e886:	d001      	beq.n	801e88c <floor+0x44>
 801e888:	2400      	movs	r4, #0
 801e88a:	4d31      	ldr	r5, [pc, #196]	; (801e950 <floor+0x108>)
 801e88c:	46a4      	mov	ip, r4
 801e88e:	002e      	movs	r6, r5
 801e890:	e029      	b.n	801e8e6 <floor+0x9e>
 801e892:	4b30      	ldr	r3, [pc, #192]	; (801e954 <floor+0x10c>)
 801e894:	413b      	asrs	r3, r7
 801e896:	9300      	str	r3, [sp, #0]
 801e898:	400b      	ands	r3, r1
 801e89a:	4303      	orrs	r3, r0
 801e89c:	d023      	beq.n	801e8e6 <floor+0x9e>
 801e89e:	4a2a      	ldr	r2, [pc, #168]	; (801e948 <floor+0x100>)
 801e8a0:	4b2a      	ldr	r3, [pc, #168]	; (801e94c <floor+0x104>)
 801e8a2:	4660      	mov	r0, ip
 801e8a4:	0031      	movs	r1, r6
 801e8a6:	f7e2 fbef 	bl	8001088 <__aeabi_dadd>
 801e8aa:	2200      	movs	r2, #0
 801e8ac:	2300      	movs	r3, #0
 801e8ae:	f7e1 fddd 	bl	800046c <__aeabi_dcmpgt>
 801e8b2:	2800      	cmp	r0, #0
 801e8b4:	d0ea      	beq.n	801e88c <floor+0x44>
 801e8b6:	2e00      	cmp	r6, #0
 801e8b8:	da03      	bge.n	801e8c2 <floor+0x7a>
 801e8ba:	2380      	movs	r3, #128	; 0x80
 801e8bc:	035b      	lsls	r3, r3, #13
 801e8be:	413b      	asrs	r3, r7
 801e8c0:	18f5      	adds	r5, r6, r3
 801e8c2:	9b00      	ldr	r3, [sp, #0]
 801e8c4:	2400      	movs	r4, #0
 801e8c6:	439d      	bics	r5, r3
 801e8c8:	e7e0      	b.n	801e88c <floor+0x44>
 801e8ca:	2f33      	cmp	r7, #51	; 0x33
 801e8cc:	dd0f      	ble.n	801e8ee <floor+0xa6>
 801e8ce:	2380      	movs	r3, #128	; 0x80
 801e8d0:	00db      	lsls	r3, r3, #3
 801e8d2:	429f      	cmp	r7, r3
 801e8d4:	d107      	bne.n	801e8e6 <floor+0x9e>
 801e8d6:	0002      	movs	r2, r0
 801e8d8:	000b      	movs	r3, r1
 801e8da:	4660      	mov	r0, ip
 801e8dc:	0031      	movs	r1, r6
 801e8de:	f7e2 fbd3 	bl	8001088 <__aeabi_dadd>
 801e8e2:	4684      	mov	ip, r0
 801e8e4:	000e      	movs	r6, r1
 801e8e6:	4660      	mov	r0, ip
 801e8e8:	0031      	movs	r1, r6
 801e8ea:	b003      	add	sp, #12
 801e8ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e8ee:	4a1a      	ldr	r2, [pc, #104]	; (801e958 <floor+0x110>)
 801e8f0:	189b      	adds	r3, r3, r2
 801e8f2:	2201      	movs	r2, #1
 801e8f4:	4252      	negs	r2, r2
 801e8f6:	40da      	lsrs	r2, r3
 801e8f8:	9200      	str	r2, [sp, #0]
 801e8fa:	4210      	tst	r0, r2
 801e8fc:	d0f3      	beq.n	801e8e6 <floor+0x9e>
 801e8fe:	4a12      	ldr	r2, [pc, #72]	; (801e948 <floor+0x100>)
 801e900:	4b12      	ldr	r3, [pc, #72]	; (801e94c <floor+0x104>)
 801e902:	4660      	mov	r0, ip
 801e904:	0031      	movs	r1, r6
 801e906:	f7e2 fbbf 	bl	8001088 <__aeabi_dadd>
 801e90a:	2200      	movs	r2, #0
 801e90c:	2300      	movs	r3, #0
 801e90e:	f7e1 fdad 	bl	800046c <__aeabi_dcmpgt>
 801e912:	2800      	cmp	r0, #0
 801e914:	d0ba      	beq.n	801e88c <floor+0x44>
 801e916:	2e00      	cmp	r6, #0
 801e918:	da02      	bge.n	801e920 <floor+0xd8>
 801e91a:	2f14      	cmp	r7, #20
 801e91c:	d103      	bne.n	801e926 <floor+0xde>
 801e91e:	3501      	adds	r5, #1
 801e920:	9b00      	ldr	r3, [sp, #0]
 801e922:	439c      	bics	r4, r3
 801e924:	e7b2      	b.n	801e88c <floor+0x44>
 801e926:	2334      	movs	r3, #52	; 0x34
 801e928:	1bdf      	subs	r7, r3, r7
 801e92a:	3b33      	subs	r3, #51	; 0x33
 801e92c:	40bb      	lsls	r3, r7
 801e92e:	18e4      	adds	r4, r4, r3
 801e930:	9b01      	ldr	r3, [sp, #4]
 801e932:	429c      	cmp	r4, r3
 801e934:	419b      	sbcs	r3, r3
 801e936:	425b      	negs	r3, r3
 801e938:	18f5      	adds	r5, r6, r3
 801e93a:	e7f1      	b.n	801e920 <floor+0xd8>
 801e93c:	2400      	movs	r4, #0
 801e93e:	0025      	movs	r5, r4
 801e940:	e7a4      	b.n	801e88c <floor+0x44>
 801e942:	46c0      	nop			; (mov r8, r8)
 801e944:	fffffc01 	.word	0xfffffc01
 801e948:	8800759c 	.word	0x8800759c
 801e94c:	7e37e43c 	.word	0x7e37e43c
 801e950:	bff00000 	.word	0xbff00000
 801e954:	000fffff 	.word	0x000fffff
 801e958:	fffffbed 	.word	0xfffffbed

0801e95c <_init>:
 801e95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e95e:	46c0      	nop			; (mov r8, r8)
 801e960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e962:	bc08      	pop	{r3}
 801e964:	469e      	mov	lr, r3
 801e966:	4770      	bx	lr

0801e968 <_fini>:
 801e968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e96a:	46c0      	nop			; (mov r8, r8)
 801e96c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e96e:	bc08      	pop	{r3}
 801e970:	469e      	mov	lr, r3
 801e972:	4770      	bx	lr
