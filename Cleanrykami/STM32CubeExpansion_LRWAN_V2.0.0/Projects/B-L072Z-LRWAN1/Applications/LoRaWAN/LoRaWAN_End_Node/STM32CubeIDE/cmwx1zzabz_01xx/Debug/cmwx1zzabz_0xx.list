
cmwx1zzabz_0xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ea50  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001658  0801eb10  0801eb10  0002eb10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08020168  08020168  00030168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08020170  08020170  00030170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08020174  08020174  00030174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000023c  20000000  08020178  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000015d0  2000023c  080203b4  0004023c  2**2
                  ALLOC
  8 ._user_heap_stack 00000804  2000180c  080203b4  0004180c  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  0004023c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000596b2  00000000  00000000  00040264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000b19b  00000000  00000000  00099916  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002cc8  00000000  00000000  000a4ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000028b0  00000000  00000000  000a7780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00023f0c  00000000  00000000  000aa030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003fa94  00000000  00000000  000cdf3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000b4bdc  00000000  00000000  0010d9d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001c25ac  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a66c  00000000  00000000  001c2600  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000023c 	.word	0x2000023c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0801eaf8 	.word	0x0801eaf8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000240 	.word	0x20000240
 8000104:	0801eaf8 	.word	0x0801eaf8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdrcmple>:
 8000404:	4684      	mov	ip, r0
 8000406:	1c10      	adds	r0, r2, #0
 8000408:	4662      	mov	r2, ip
 800040a:	468c      	mov	ip, r1
 800040c:	1c19      	adds	r1, r3, #0
 800040e:	4663      	mov	r3, ip
 8000410:	e000      	b.n	8000414 <__aeabi_cdcmpeq>
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_cdcmpeq>:
 8000414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000416:	f001 faab 	bl	8001970 <__ledf2>
 800041a:	2800      	cmp	r0, #0
 800041c:	d401      	bmi.n	8000422 <__aeabi_cdcmpeq+0xe>
 800041e:	2100      	movs	r1, #0
 8000420:	42c8      	cmn	r0, r1
 8000422:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000424 <__aeabi_dcmpeq>:
 8000424:	b510      	push	{r4, lr}
 8000426:	f001 f9f5 	bl	8001814 <__eqdf2>
 800042a:	4240      	negs	r0, r0
 800042c:	3001      	adds	r0, #1
 800042e:	bd10      	pop	{r4, pc}

08000430 <__aeabi_dcmplt>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f001 fa9d 	bl	8001970 <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	db01      	blt.n	800043e <__aeabi_dcmplt+0xe>
 800043a:	2000      	movs	r0, #0
 800043c:	bd10      	pop	{r4, pc}
 800043e:	2001      	movs	r0, #1
 8000440:	bd10      	pop	{r4, pc}
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__aeabi_dcmple>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 fa93 	bl	8001970 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	dd01      	ble.n	8000452 <__aeabi_dcmple+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmpgt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fa17 	bl	800188c <__gedf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dc01      	bgt.n	8000466 <__aeabi_dcmpgt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpge>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fa0d 	bl	800188c <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	da01      	bge.n	800047a <__aeabi_dcmpge+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_ldivmod>:
 8000480:	2b00      	cmp	r3, #0
 8000482:	d115      	bne.n	80004b0 <__aeabi_ldivmod+0x30>
 8000484:	2a00      	cmp	r2, #0
 8000486:	d113      	bne.n	80004b0 <__aeabi_ldivmod+0x30>
 8000488:	2900      	cmp	r1, #0
 800048a:	db06      	blt.n	800049a <__aeabi_ldivmod+0x1a>
 800048c:	dc01      	bgt.n	8000492 <__aeabi_ldivmod+0x12>
 800048e:	2800      	cmp	r0, #0
 8000490:	d006      	beq.n	80004a0 <__aeabi_ldivmod+0x20>
 8000492:	2000      	movs	r0, #0
 8000494:	43c0      	mvns	r0, r0
 8000496:	0841      	lsrs	r1, r0, #1
 8000498:	e002      	b.n	80004a0 <__aeabi_ldivmod+0x20>
 800049a:	2180      	movs	r1, #128	; 0x80
 800049c:	0609      	lsls	r1, r1, #24
 800049e:	2000      	movs	r0, #0
 80004a0:	b407      	push	{r0, r1, r2}
 80004a2:	4802      	ldr	r0, [pc, #8]	; (80004ac <__aeabi_ldivmod+0x2c>)
 80004a4:	a101      	add	r1, pc, #4	; (adr r1, 80004ac <__aeabi_ldivmod+0x2c>)
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	9002      	str	r0, [sp, #8]
 80004aa:	bd03      	pop	{r0, r1, pc}
 80004ac:	ffffff55 	.word	0xffffff55
 80004b0:	b403      	push	{r0, r1}
 80004b2:	4668      	mov	r0, sp
 80004b4:	b501      	push	{r0, lr}
 80004b6:	9802      	ldr	r0, [sp, #8]
 80004b8:	f000 f938 	bl	800072c <__gnu_ldivmod_helper>
 80004bc:	9b01      	ldr	r3, [sp, #4]
 80004be:	469e      	mov	lr, r3
 80004c0:	b002      	add	sp, #8
 80004c2:	bc0c      	pop	{r2, r3}
 80004c4:	4770      	bx	lr
 80004c6:	46c0      	nop			; (mov r8, r8)

080004c8 <__aeabi_uldivmod>:
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d111      	bne.n	80004f0 <__aeabi_uldivmod+0x28>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	d10f      	bne.n	80004f0 <__aeabi_uldivmod+0x28>
 80004d0:	2900      	cmp	r1, #0
 80004d2:	d100      	bne.n	80004d6 <__aeabi_uldivmod+0xe>
 80004d4:	2800      	cmp	r0, #0
 80004d6:	d002      	beq.n	80004de <__aeabi_uldivmod+0x16>
 80004d8:	2100      	movs	r1, #0
 80004da:	43c9      	mvns	r1, r1
 80004dc:	1c08      	adds	r0, r1, #0
 80004de:	b407      	push	{r0, r1, r2}
 80004e0:	4802      	ldr	r0, [pc, #8]	; (80004ec <__aeabi_uldivmod+0x24>)
 80004e2:	a102      	add	r1, pc, #8	; (adr r1, 80004ec <__aeabi_uldivmod+0x24>)
 80004e4:	1840      	adds	r0, r0, r1
 80004e6:	9002      	str	r0, [sp, #8]
 80004e8:	bd03      	pop	{r0, r1, pc}
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	ffffff15 	.word	0xffffff15
 80004f0:	b403      	push	{r0, r1}
 80004f2:	4668      	mov	r0, sp
 80004f4:	b501      	push	{r0, lr}
 80004f6:	9802      	ldr	r0, [sp, #8]
 80004f8:	f000 f84c 	bl	8000594 <__udivmoddi4>
 80004fc:	9b01      	ldr	r3, [sp, #4]
 80004fe:	469e      	mov	lr, r3
 8000500:	b002      	add	sp, #8
 8000502:	bc0c      	pop	{r2, r3}
 8000504:	4770      	bx	lr
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_lmul>:
 8000508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800050a:	0415      	lsls	r5, r2, #16
 800050c:	0c2d      	lsrs	r5, r5, #16
 800050e:	000f      	movs	r7, r1
 8000510:	0001      	movs	r1, r0
 8000512:	002e      	movs	r6, r5
 8000514:	46c6      	mov	lr, r8
 8000516:	4684      	mov	ip, r0
 8000518:	0400      	lsls	r0, r0, #16
 800051a:	0c14      	lsrs	r4, r2, #16
 800051c:	0c00      	lsrs	r0, r0, #16
 800051e:	0c09      	lsrs	r1, r1, #16
 8000520:	4346      	muls	r6, r0
 8000522:	434d      	muls	r5, r1
 8000524:	4360      	muls	r0, r4
 8000526:	4361      	muls	r1, r4
 8000528:	1940      	adds	r0, r0, r5
 800052a:	0c34      	lsrs	r4, r6, #16
 800052c:	1824      	adds	r4, r4, r0
 800052e:	b500      	push	{lr}
 8000530:	42a5      	cmp	r5, r4
 8000532:	d903      	bls.n	800053c <__aeabi_lmul+0x34>
 8000534:	2080      	movs	r0, #128	; 0x80
 8000536:	0240      	lsls	r0, r0, #9
 8000538:	4680      	mov	r8, r0
 800053a:	4441      	add	r1, r8
 800053c:	0c25      	lsrs	r5, r4, #16
 800053e:	186d      	adds	r5, r5, r1
 8000540:	4661      	mov	r1, ip
 8000542:	4359      	muls	r1, r3
 8000544:	437a      	muls	r2, r7
 8000546:	0430      	lsls	r0, r6, #16
 8000548:	1949      	adds	r1, r1, r5
 800054a:	0424      	lsls	r4, r4, #16
 800054c:	0c00      	lsrs	r0, r0, #16
 800054e:	1820      	adds	r0, r4, r0
 8000550:	1889      	adds	r1, r1, r2
 8000552:	bc80      	pop	{r7}
 8000554:	46b8      	mov	r8, r7
 8000556:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000558 <__aeabi_d2uiz>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	2200      	movs	r2, #0
 800055c:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <__aeabi_d2uiz+0x38>)
 800055e:	0004      	movs	r4, r0
 8000560:	000d      	movs	r5, r1
 8000562:	f7ff ff83 	bl	800046c <__aeabi_dcmpge>
 8000566:	2800      	cmp	r0, #0
 8000568:	d104      	bne.n	8000574 <__aeabi_d2uiz+0x1c>
 800056a:	0020      	movs	r0, r4
 800056c:	0029      	movs	r1, r5
 800056e:	f002 f86d 	bl	800264c <__aeabi_d2iz>
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <__aeabi_d2uiz+0x38>)
 8000576:	2200      	movs	r2, #0
 8000578:	0020      	movs	r0, r4
 800057a:	0029      	movs	r1, r5
 800057c:	f001 fcd4 	bl	8001f28 <__aeabi_dsub>
 8000580:	f002 f864 	bl	800264c <__aeabi_d2iz>
 8000584:	2380      	movs	r3, #128	; 0x80
 8000586:	061b      	lsls	r3, r3, #24
 8000588:	469c      	mov	ip, r3
 800058a:	4460      	add	r0, ip
 800058c:	e7f1      	b.n	8000572 <__aeabi_d2uiz+0x1a>
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	41e00000 	.word	0x41e00000

08000594 <__udivmoddi4>:
 8000594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000596:	4657      	mov	r7, sl
 8000598:	464e      	mov	r6, r9
 800059a:	4645      	mov	r5, r8
 800059c:	46de      	mov	lr, fp
 800059e:	b5e0      	push	{r5, r6, r7, lr}
 80005a0:	0004      	movs	r4, r0
 80005a2:	000d      	movs	r5, r1
 80005a4:	4692      	mov	sl, r2
 80005a6:	4699      	mov	r9, r3
 80005a8:	b083      	sub	sp, #12
 80005aa:	428b      	cmp	r3, r1
 80005ac:	d830      	bhi.n	8000610 <__udivmoddi4+0x7c>
 80005ae:	d02d      	beq.n	800060c <__udivmoddi4+0x78>
 80005b0:	4649      	mov	r1, r9
 80005b2:	4650      	mov	r0, sl
 80005b4:	f002 f93c 	bl	8002830 <__clzdi2>
 80005b8:	0029      	movs	r1, r5
 80005ba:	0006      	movs	r6, r0
 80005bc:	0020      	movs	r0, r4
 80005be:	f002 f937 	bl	8002830 <__clzdi2>
 80005c2:	1a33      	subs	r3, r6, r0
 80005c4:	4698      	mov	r8, r3
 80005c6:	3b20      	subs	r3, #32
 80005c8:	469b      	mov	fp, r3
 80005ca:	d433      	bmi.n	8000634 <__udivmoddi4+0xa0>
 80005cc:	465a      	mov	r2, fp
 80005ce:	4653      	mov	r3, sl
 80005d0:	4093      	lsls	r3, r2
 80005d2:	4642      	mov	r2, r8
 80005d4:	001f      	movs	r7, r3
 80005d6:	4653      	mov	r3, sl
 80005d8:	4093      	lsls	r3, r2
 80005da:	001e      	movs	r6, r3
 80005dc:	42af      	cmp	r7, r5
 80005de:	d83a      	bhi.n	8000656 <__udivmoddi4+0xc2>
 80005e0:	42af      	cmp	r7, r5
 80005e2:	d100      	bne.n	80005e6 <__udivmoddi4+0x52>
 80005e4:	e078      	b.n	80006d8 <__udivmoddi4+0x144>
 80005e6:	465b      	mov	r3, fp
 80005e8:	1ba4      	subs	r4, r4, r6
 80005ea:	41bd      	sbcs	r5, r7
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	da00      	bge.n	80005f2 <__udivmoddi4+0x5e>
 80005f0:	e075      	b.n	80006de <__udivmoddi4+0x14a>
 80005f2:	2200      	movs	r2, #0
 80005f4:	2300      	movs	r3, #0
 80005f6:	9200      	str	r2, [sp, #0]
 80005f8:	9301      	str	r3, [sp, #4]
 80005fa:	2301      	movs	r3, #1
 80005fc:	465a      	mov	r2, fp
 80005fe:	4093      	lsls	r3, r2
 8000600:	9301      	str	r3, [sp, #4]
 8000602:	2301      	movs	r3, #1
 8000604:	4642      	mov	r2, r8
 8000606:	4093      	lsls	r3, r2
 8000608:	9300      	str	r3, [sp, #0]
 800060a:	e028      	b.n	800065e <__udivmoddi4+0xca>
 800060c:	4282      	cmp	r2, r0
 800060e:	d9cf      	bls.n	80005b0 <__udivmoddi4+0x1c>
 8000610:	2200      	movs	r2, #0
 8000612:	2300      	movs	r3, #0
 8000614:	9200      	str	r2, [sp, #0]
 8000616:	9301      	str	r3, [sp, #4]
 8000618:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <__udivmoddi4+0x8e>
 800061e:	601c      	str	r4, [r3, #0]
 8000620:	605d      	str	r5, [r3, #4]
 8000622:	9800      	ldr	r0, [sp, #0]
 8000624:	9901      	ldr	r1, [sp, #4]
 8000626:	b003      	add	sp, #12
 8000628:	bcf0      	pop	{r4, r5, r6, r7}
 800062a:	46bb      	mov	fp, r7
 800062c:	46b2      	mov	sl, r6
 800062e:	46a9      	mov	r9, r5
 8000630:	46a0      	mov	r8, r4
 8000632:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000634:	4642      	mov	r2, r8
 8000636:	2320      	movs	r3, #32
 8000638:	1a9b      	subs	r3, r3, r2
 800063a:	4652      	mov	r2, sl
 800063c:	40da      	lsrs	r2, r3
 800063e:	4641      	mov	r1, r8
 8000640:	0013      	movs	r3, r2
 8000642:	464a      	mov	r2, r9
 8000644:	408a      	lsls	r2, r1
 8000646:	0017      	movs	r7, r2
 8000648:	4642      	mov	r2, r8
 800064a:	431f      	orrs	r7, r3
 800064c:	4653      	mov	r3, sl
 800064e:	4093      	lsls	r3, r2
 8000650:	001e      	movs	r6, r3
 8000652:	42af      	cmp	r7, r5
 8000654:	d9c4      	bls.n	80005e0 <__udivmoddi4+0x4c>
 8000656:	2200      	movs	r2, #0
 8000658:	2300      	movs	r3, #0
 800065a:	9200      	str	r2, [sp, #0]
 800065c:	9301      	str	r3, [sp, #4]
 800065e:	4643      	mov	r3, r8
 8000660:	2b00      	cmp	r3, #0
 8000662:	d0d9      	beq.n	8000618 <__udivmoddi4+0x84>
 8000664:	07fb      	lsls	r3, r7, #31
 8000666:	0872      	lsrs	r2, r6, #1
 8000668:	431a      	orrs	r2, r3
 800066a:	4646      	mov	r6, r8
 800066c:	087b      	lsrs	r3, r7, #1
 800066e:	e00e      	b.n	800068e <__udivmoddi4+0xfa>
 8000670:	42ab      	cmp	r3, r5
 8000672:	d101      	bne.n	8000678 <__udivmoddi4+0xe4>
 8000674:	42a2      	cmp	r2, r4
 8000676:	d80c      	bhi.n	8000692 <__udivmoddi4+0xfe>
 8000678:	1aa4      	subs	r4, r4, r2
 800067a:	419d      	sbcs	r5, r3
 800067c:	2001      	movs	r0, #1
 800067e:	1924      	adds	r4, r4, r4
 8000680:	416d      	adcs	r5, r5
 8000682:	2100      	movs	r1, #0
 8000684:	3e01      	subs	r6, #1
 8000686:	1824      	adds	r4, r4, r0
 8000688:	414d      	adcs	r5, r1
 800068a:	2e00      	cmp	r6, #0
 800068c:	d006      	beq.n	800069c <__udivmoddi4+0x108>
 800068e:	42ab      	cmp	r3, r5
 8000690:	d9ee      	bls.n	8000670 <__udivmoddi4+0xdc>
 8000692:	3e01      	subs	r6, #1
 8000694:	1924      	adds	r4, r4, r4
 8000696:	416d      	adcs	r5, r5
 8000698:	2e00      	cmp	r6, #0
 800069a:	d1f8      	bne.n	800068e <__udivmoddi4+0xfa>
 800069c:	9800      	ldr	r0, [sp, #0]
 800069e:	9901      	ldr	r1, [sp, #4]
 80006a0:	465b      	mov	r3, fp
 80006a2:	1900      	adds	r0, r0, r4
 80006a4:	4169      	adcs	r1, r5
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	db24      	blt.n	80006f4 <__udivmoddi4+0x160>
 80006aa:	002b      	movs	r3, r5
 80006ac:	465a      	mov	r2, fp
 80006ae:	4644      	mov	r4, r8
 80006b0:	40d3      	lsrs	r3, r2
 80006b2:	002a      	movs	r2, r5
 80006b4:	40e2      	lsrs	r2, r4
 80006b6:	001c      	movs	r4, r3
 80006b8:	465b      	mov	r3, fp
 80006ba:	0015      	movs	r5, r2
 80006bc:	2b00      	cmp	r3, #0
 80006be:	db2a      	blt.n	8000716 <__udivmoddi4+0x182>
 80006c0:	0026      	movs	r6, r4
 80006c2:	409e      	lsls	r6, r3
 80006c4:	0033      	movs	r3, r6
 80006c6:	0026      	movs	r6, r4
 80006c8:	4647      	mov	r7, r8
 80006ca:	40be      	lsls	r6, r7
 80006cc:	0032      	movs	r2, r6
 80006ce:	1a80      	subs	r0, r0, r2
 80006d0:	4199      	sbcs	r1, r3
 80006d2:	9000      	str	r0, [sp, #0]
 80006d4:	9101      	str	r1, [sp, #4]
 80006d6:	e79f      	b.n	8000618 <__udivmoddi4+0x84>
 80006d8:	42a3      	cmp	r3, r4
 80006da:	d8bc      	bhi.n	8000656 <__udivmoddi4+0xc2>
 80006dc:	e783      	b.n	80005e6 <__udivmoddi4+0x52>
 80006de:	4642      	mov	r2, r8
 80006e0:	2320      	movs	r3, #32
 80006e2:	2100      	movs	r1, #0
 80006e4:	1a9b      	subs	r3, r3, r2
 80006e6:	2200      	movs	r2, #0
 80006e8:	9100      	str	r1, [sp, #0]
 80006ea:	9201      	str	r2, [sp, #4]
 80006ec:	2201      	movs	r2, #1
 80006ee:	40da      	lsrs	r2, r3
 80006f0:	9201      	str	r2, [sp, #4]
 80006f2:	e786      	b.n	8000602 <__udivmoddi4+0x6e>
 80006f4:	4642      	mov	r2, r8
 80006f6:	2320      	movs	r3, #32
 80006f8:	1a9b      	subs	r3, r3, r2
 80006fa:	002a      	movs	r2, r5
 80006fc:	4646      	mov	r6, r8
 80006fe:	409a      	lsls	r2, r3
 8000700:	0023      	movs	r3, r4
 8000702:	40f3      	lsrs	r3, r6
 8000704:	4644      	mov	r4, r8
 8000706:	4313      	orrs	r3, r2
 8000708:	002a      	movs	r2, r5
 800070a:	40e2      	lsrs	r2, r4
 800070c:	001c      	movs	r4, r3
 800070e:	465b      	mov	r3, fp
 8000710:	0015      	movs	r5, r2
 8000712:	2b00      	cmp	r3, #0
 8000714:	dad4      	bge.n	80006c0 <__udivmoddi4+0x12c>
 8000716:	4642      	mov	r2, r8
 8000718:	002f      	movs	r7, r5
 800071a:	2320      	movs	r3, #32
 800071c:	0026      	movs	r6, r4
 800071e:	4097      	lsls	r7, r2
 8000720:	1a9b      	subs	r3, r3, r2
 8000722:	40de      	lsrs	r6, r3
 8000724:	003b      	movs	r3, r7
 8000726:	4333      	orrs	r3, r6
 8000728:	e7cd      	b.n	80006c6 <__udivmoddi4+0x132>
 800072a:	46c0      	nop			; (mov r8, r8)

0800072c <__gnu_ldivmod_helper>:
 800072c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800072e:	46ce      	mov	lr, r9
 8000730:	4647      	mov	r7, r8
 8000732:	b580      	push	{r7, lr}
 8000734:	4691      	mov	r9, r2
 8000736:	4698      	mov	r8, r3
 8000738:	0004      	movs	r4, r0
 800073a:	000d      	movs	r5, r1
 800073c:	f002 f884 	bl	8002848 <__divdi3>
 8000740:	0007      	movs	r7, r0
 8000742:	000e      	movs	r6, r1
 8000744:	0002      	movs	r2, r0
 8000746:	000b      	movs	r3, r1
 8000748:	4648      	mov	r0, r9
 800074a:	4641      	mov	r1, r8
 800074c:	f7ff fedc 	bl	8000508 <__aeabi_lmul>
 8000750:	1a24      	subs	r4, r4, r0
 8000752:	418d      	sbcs	r5, r1
 8000754:	9b08      	ldr	r3, [sp, #32]
 8000756:	0038      	movs	r0, r7
 8000758:	0031      	movs	r1, r6
 800075a:	601c      	str	r4, [r3, #0]
 800075c:	605d      	str	r5, [r3, #4]
 800075e:	bcc0      	pop	{r6, r7}
 8000760:	46b9      	mov	r9, r7
 8000762:	46b0      	mov	r8, r6
 8000764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000766:	46c0      	nop			; (mov r8, r8)

08000768 <__aeabi_fsub>:
 8000768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800076a:	4646      	mov	r6, r8
 800076c:	46d6      	mov	lr, sl
 800076e:	464f      	mov	r7, r9
 8000770:	0243      	lsls	r3, r0, #9
 8000772:	0a5b      	lsrs	r3, r3, #9
 8000774:	00da      	lsls	r2, r3, #3
 8000776:	4694      	mov	ip, r2
 8000778:	024a      	lsls	r2, r1, #9
 800077a:	b5c0      	push	{r6, r7, lr}
 800077c:	0044      	lsls	r4, r0, #1
 800077e:	0a56      	lsrs	r6, r2, #9
 8000780:	1c05      	adds	r5, r0, #0
 8000782:	46b0      	mov	r8, r6
 8000784:	0e24      	lsrs	r4, r4, #24
 8000786:	004e      	lsls	r6, r1, #1
 8000788:	0992      	lsrs	r2, r2, #6
 800078a:	001f      	movs	r7, r3
 800078c:	0020      	movs	r0, r4
 800078e:	4692      	mov	sl, r2
 8000790:	0fed      	lsrs	r5, r5, #31
 8000792:	0e36      	lsrs	r6, r6, #24
 8000794:	0fc9      	lsrs	r1, r1, #31
 8000796:	2eff      	cmp	r6, #255	; 0xff
 8000798:	d100      	bne.n	800079c <__aeabi_fsub+0x34>
 800079a:	e07f      	b.n	800089c <__aeabi_fsub+0x134>
 800079c:	2201      	movs	r2, #1
 800079e:	4051      	eors	r1, r2
 80007a0:	428d      	cmp	r5, r1
 80007a2:	d051      	beq.n	8000848 <__aeabi_fsub+0xe0>
 80007a4:	1ba2      	subs	r2, r4, r6
 80007a6:	4691      	mov	r9, r2
 80007a8:	2a00      	cmp	r2, #0
 80007aa:	dc00      	bgt.n	80007ae <__aeabi_fsub+0x46>
 80007ac:	e07e      	b.n	80008ac <__aeabi_fsub+0x144>
 80007ae:	2e00      	cmp	r6, #0
 80007b0:	d100      	bne.n	80007b4 <__aeabi_fsub+0x4c>
 80007b2:	e099      	b.n	80008e8 <__aeabi_fsub+0x180>
 80007b4:	2cff      	cmp	r4, #255	; 0xff
 80007b6:	d100      	bne.n	80007ba <__aeabi_fsub+0x52>
 80007b8:	e08c      	b.n	80008d4 <__aeabi_fsub+0x16c>
 80007ba:	2380      	movs	r3, #128	; 0x80
 80007bc:	4652      	mov	r2, sl
 80007be:	04db      	lsls	r3, r3, #19
 80007c0:	431a      	orrs	r2, r3
 80007c2:	4692      	mov	sl, r2
 80007c4:	464a      	mov	r2, r9
 80007c6:	2301      	movs	r3, #1
 80007c8:	2a1b      	cmp	r2, #27
 80007ca:	dc08      	bgt.n	80007de <__aeabi_fsub+0x76>
 80007cc:	4653      	mov	r3, sl
 80007ce:	2120      	movs	r1, #32
 80007d0:	40d3      	lsrs	r3, r2
 80007d2:	1a89      	subs	r1, r1, r2
 80007d4:	4652      	mov	r2, sl
 80007d6:	408a      	lsls	r2, r1
 80007d8:	1e51      	subs	r1, r2, #1
 80007da:	418a      	sbcs	r2, r1
 80007dc:	4313      	orrs	r3, r2
 80007de:	4662      	mov	r2, ip
 80007e0:	1ad3      	subs	r3, r2, r3
 80007e2:	015a      	lsls	r2, r3, #5
 80007e4:	d400      	bmi.n	80007e8 <__aeabi_fsub+0x80>
 80007e6:	e0f3      	b.n	80009d0 <__aeabi_fsub+0x268>
 80007e8:	019b      	lsls	r3, r3, #6
 80007ea:	099e      	lsrs	r6, r3, #6
 80007ec:	0030      	movs	r0, r6
 80007ee:	f002 f801 	bl	80027f4 <__clzsi2>
 80007f2:	3805      	subs	r0, #5
 80007f4:	4086      	lsls	r6, r0
 80007f6:	4284      	cmp	r4, r0
 80007f8:	dd00      	ble.n	80007fc <__aeabi_fsub+0x94>
 80007fa:	e0f7      	b.n	80009ec <__aeabi_fsub+0x284>
 80007fc:	0032      	movs	r2, r6
 80007fe:	1b04      	subs	r4, r0, r4
 8000800:	2020      	movs	r0, #32
 8000802:	3401      	adds	r4, #1
 8000804:	40e2      	lsrs	r2, r4
 8000806:	1b04      	subs	r4, r0, r4
 8000808:	40a6      	lsls	r6, r4
 800080a:	0033      	movs	r3, r6
 800080c:	1e5e      	subs	r6, r3, #1
 800080e:	41b3      	sbcs	r3, r6
 8000810:	2400      	movs	r4, #0
 8000812:	4313      	orrs	r3, r2
 8000814:	075a      	lsls	r2, r3, #29
 8000816:	d004      	beq.n	8000822 <__aeabi_fsub+0xba>
 8000818:	220f      	movs	r2, #15
 800081a:	401a      	ands	r2, r3
 800081c:	2a04      	cmp	r2, #4
 800081e:	d000      	beq.n	8000822 <__aeabi_fsub+0xba>
 8000820:	3304      	adds	r3, #4
 8000822:	015a      	lsls	r2, r3, #5
 8000824:	d400      	bmi.n	8000828 <__aeabi_fsub+0xc0>
 8000826:	e0d6      	b.n	80009d6 <__aeabi_fsub+0x26e>
 8000828:	1c62      	adds	r2, r4, #1
 800082a:	2cfe      	cmp	r4, #254	; 0xfe
 800082c:	d100      	bne.n	8000830 <__aeabi_fsub+0xc8>
 800082e:	e0da      	b.n	80009e6 <__aeabi_fsub+0x27e>
 8000830:	019b      	lsls	r3, r3, #6
 8000832:	0a5f      	lsrs	r7, r3, #9
 8000834:	b2d0      	uxtb	r0, r2
 8000836:	05c0      	lsls	r0, r0, #23
 8000838:	4338      	orrs	r0, r7
 800083a:	07ed      	lsls	r5, r5, #31
 800083c:	4328      	orrs	r0, r5
 800083e:	bce0      	pop	{r5, r6, r7}
 8000840:	46ba      	mov	sl, r7
 8000842:	46b1      	mov	r9, r6
 8000844:	46a8      	mov	r8, r5
 8000846:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000848:	1ba2      	subs	r2, r4, r6
 800084a:	4691      	mov	r9, r2
 800084c:	2a00      	cmp	r2, #0
 800084e:	dd63      	ble.n	8000918 <__aeabi_fsub+0x1b0>
 8000850:	2e00      	cmp	r6, #0
 8000852:	d100      	bne.n	8000856 <__aeabi_fsub+0xee>
 8000854:	e099      	b.n	800098a <__aeabi_fsub+0x222>
 8000856:	2cff      	cmp	r4, #255	; 0xff
 8000858:	d03c      	beq.n	80008d4 <__aeabi_fsub+0x16c>
 800085a:	2380      	movs	r3, #128	; 0x80
 800085c:	4652      	mov	r2, sl
 800085e:	04db      	lsls	r3, r3, #19
 8000860:	431a      	orrs	r2, r3
 8000862:	4692      	mov	sl, r2
 8000864:	464a      	mov	r2, r9
 8000866:	2301      	movs	r3, #1
 8000868:	2a1b      	cmp	r2, #27
 800086a:	dc08      	bgt.n	800087e <__aeabi_fsub+0x116>
 800086c:	4653      	mov	r3, sl
 800086e:	2120      	movs	r1, #32
 8000870:	40d3      	lsrs	r3, r2
 8000872:	1a89      	subs	r1, r1, r2
 8000874:	4652      	mov	r2, sl
 8000876:	408a      	lsls	r2, r1
 8000878:	1e51      	subs	r1, r2, #1
 800087a:	418a      	sbcs	r2, r1
 800087c:	4313      	orrs	r3, r2
 800087e:	4463      	add	r3, ip
 8000880:	015a      	lsls	r2, r3, #5
 8000882:	d400      	bmi.n	8000886 <__aeabi_fsub+0x11e>
 8000884:	e0a4      	b.n	80009d0 <__aeabi_fsub+0x268>
 8000886:	3401      	adds	r4, #1
 8000888:	2cff      	cmp	r4, #255	; 0xff
 800088a:	d100      	bne.n	800088e <__aeabi_fsub+0x126>
 800088c:	e0ab      	b.n	80009e6 <__aeabi_fsub+0x27e>
 800088e:	2201      	movs	r2, #1
 8000890:	4997      	ldr	r1, [pc, #604]	; (8000af0 <__aeabi_fsub+0x388>)
 8000892:	401a      	ands	r2, r3
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	400b      	ands	r3, r1
 8000898:	4313      	orrs	r3, r2
 800089a:	e7bb      	b.n	8000814 <__aeabi_fsub+0xac>
 800089c:	2a00      	cmp	r2, #0
 800089e:	d032      	beq.n	8000906 <__aeabi_fsub+0x19e>
 80008a0:	428d      	cmp	r5, r1
 80008a2:	d035      	beq.n	8000910 <__aeabi_fsub+0x1a8>
 80008a4:	22ff      	movs	r2, #255	; 0xff
 80008a6:	4252      	negs	r2, r2
 80008a8:	4691      	mov	r9, r2
 80008aa:	44a1      	add	r9, r4
 80008ac:	464a      	mov	r2, r9
 80008ae:	2a00      	cmp	r2, #0
 80008b0:	d051      	beq.n	8000956 <__aeabi_fsub+0x1ee>
 80008b2:	1b30      	subs	r0, r6, r4
 80008b4:	2c00      	cmp	r4, #0
 80008b6:	d000      	beq.n	80008ba <__aeabi_fsub+0x152>
 80008b8:	e09c      	b.n	80009f4 <__aeabi_fsub+0x28c>
 80008ba:	4663      	mov	r3, ip
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d100      	bne.n	80008c2 <__aeabi_fsub+0x15a>
 80008c0:	e0df      	b.n	8000a82 <__aeabi_fsub+0x31a>
 80008c2:	3801      	subs	r0, #1
 80008c4:	2800      	cmp	r0, #0
 80008c6:	d100      	bne.n	80008ca <__aeabi_fsub+0x162>
 80008c8:	e0f7      	b.n	8000aba <__aeabi_fsub+0x352>
 80008ca:	2eff      	cmp	r6, #255	; 0xff
 80008cc:	d000      	beq.n	80008d0 <__aeabi_fsub+0x168>
 80008ce:	e099      	b.n	8000a04 <__aeabi_fsub+0x29c>
 80008d0:	000d      	movs	r5, r1
 80008d2:	4643      	mov	r3, r8
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d100      	bne.n	80008da <__aeabi_fsub+0x172>
 80008d8:	e085      	b.n	80009e6 <__aeabi_fsub+0x27e>
 80008da:	2780      	movs	r7, #128	; 0x80
 80008dc:	03ff      	lsls	r7, r7, #15
 80008de:	431f      	orrs	r7, r3
 80008e0:	027f      	lsls	r7, r7, #9
 80008e2:	20ff      	movs	r0, #255	; 0xff
 80008e4:	0a7f      	lsrs	r7, r7, #9
 80008e6:	e7a6      	b.n	8000836 <__aeabi_fsub+0xce>
 80008e8:	4652      	mov	r2, sl
 80008ea:	2a00      	cmp	r2, #0
 80008ec:	d074      	beq.n	80009d8 <__aeabi_fsub+0x270>
 80008ee:	2201      	movs	r2, #1
 80008f0:	4252      	negs	r2, r2
 80008f2:	4690      	mov	r8, r2
 80008f4:	44c1      	add	r9, r8
 80008f6:	464a      	mov	r2, r9
 80008f8:	2a00      	cmp	r2, #0
 80008fa:	d100      	bne.n	80008fe <__aeabi_fsub+0x196>
 80008fc:	e0c8      	b.n	8000a90 <__aeabi_fsub+0x328>
 80008fe:	2cff      	cmp	r4, #255	; 0xff
 8000900:	d000      	beq.n	8000904 <__aeabi_fsub+0x19c>
 8000902:	e75f      	b.n	80007c4 <__aeabi_fsub+0x5c>
 8000904:	e7e6      	b.n	80008d4 <__aeabi_fsub+0x16c>
 8000906:	2201      	movs	r2, #1
 8000908:	4051      	eors	r1, r2
 800090a:	42a9      	cmp	r1, r5
 800090c:	d000      	beq.n	8000910 <__aeabi_fsub+0x1a8>
 800090e:	e749      	b.n	80007a4 <__aeabi_fsub+0x3c>
 8000910:	22ff      	movs	r2, #255	; 0xff
 8000912:	4252      	negs	r2, r2
 8000914:	4691      	mov	r9, r2
 8000916:	44a1      	add	r9, r4
 8000918:	464a      	mov	r2, r9
 800091a:	2a00      	cmp	r2, #0
 800091c:	d043      	beq.n	80009a6 <__aeabi_fsub+0x23e>
 800091e:	1b31      	subs	r1, r6, r4
 8000920:	2c00      	cmp	r4, #0
 8000922:	d100      	bne.n	8000926 <__aeabi_fsub+0x1be>
 8000924:	e08c      	b.n	8000a40 <__aeabi_fsub+0x2d8>
 8000926:	2eff      	cmp	r6, #255	; 0xff
 8000928:	d100      	bne.n	800092c <__aeabi_fsub+0x1c4>
 800092a:	e092      	b.n	8000a52 <__aeabi_fsub+0x2ea>
 800092c:	2380      	movs	r3, #128	; 0x80
 800092e:	4662      	mov	r2, ip
 8000930:	04db      	lsls	r3, r3, #19
 8000932:	431a      	orrs	r2, r3
 8000934:	4694      	mov	ip, r2
 8000936:	2301      	movs	r3, #1
 8000938:	291b      	cmp	r1, #27
 800093a:	dc09      	bgt.n	8000950 <__aeabi_fsub+0x1e8>
 800093c:	2020      	movs	r0, #32
 800093e:	4663      	mov	r3, ip
 8000940:	4662      	mov	r2, ip
 8000942:	40cb      	lsrs	r3, r1
 8000944:	1a41      	subs	r1, r0, r1
 8000946:	408a      	lsls	r2, r1
 8000948:	0011      	movs	r1, r2
 800094a:	1e48      	subs	r0, r1, #1
 800094c:	4181      	sbcs	r1, r0
 800094e:	430b      	orrs	r3, r1
 8000950:	0034      	movs	r4, r6
 8000952:	4453      	add	r3, sl
 8000954:	e794      	b.n	8000880 <__aeabi_fsub+0x118>
 8000956:	22fe      	movs	r2, #254	; 0xfe
 8000958:	1c66      	adds	r6, r4, #1
 800095a:	4232      	tst	r2, r6
 800095c:	d164      	bne.n	8000a28 <__aeabi_fsub+0x2c0>
 800095e:	2c00      	cmp	r4, #0
 8000960:	d000      	beq.n	8000964 <__aeabi_fsub+0x1fc>
 8000962:	e082      	b.n	8000a6a <__aeabi_fsub+0x302>
 8000964:	4663      	mov	r3, ip
 8000966:	2b00      	cmp	r3, #0
 8000968:	d100      	bne.n	800096c <__aeabi_fsub+0x204>
 800096a:	e0ab      	b.n	8000ac4 <__aeabi_fsub+0x35c>
 800096c:	4653      	mov	r3, sl
 800096e:	2b00      	cmp	r3, #0
 8000970:	d100      	bne.n	8000974 <__aeabi_fsub+0x20c>
 8000972:	e760      	b.n	8000836 <__aeabi_fsub+0xce>
 8000974:	4663      	mov	r3, ip
 8000976:	4652      	mov	r2, sl
 8000978:	1a9b      	subs	r3, r3, r2
 800097a:	015a      	lsls	r2, r3, #5
 800097c:	d400      	bmi.n	8000980 <__aeabi_fsub+0x218>
 800097e:	e0aa      	b.n	8000ad6 <__aeabi_fsub+0x36e>
 8000980:	4663      	mov	r3, ip
 8000982:	4652      	mov	r2, sl
 8000984:	000d      	movs	r5, r1
 8000986:	1ad3      	subs	r3, r2, r3
 8000988:	e744      	b.n	8000814 <__aeabi_fsub+0xac>
 800098a:	4652      	mov	r2, sl
 800098c:	2a00      	cmp	r2, #0
 800098e:	d023      	beq.n	80009d8 <__aeabi_fsub+0x270>
 8000990:	2201      	movs	r2, #1
 8000992:	4252      	negs	r2, r2
 8000994:	4690      	mov	r8, r2
 8000996:	44c1      	add	r9, r8
 8000998:	464a      	mov	r2, r9
 800099a:	2a00      	cmp	r2, #0
 800099c:	d075      	beq.n	8000a8a <__aeabi_fsub+0x322>
 800099e:	2cff      	cmp	r4, #255	; 0xff
 80009a0:	d000      	beq.n	80009a4 <__aeabi_fsub+0x23c>
 80009a2:	e75f      	b.n	8000864 <__aeabi_fsub+0xfc>
 80009a4:	e796      	b.n	80008d4 <__aeabi_fsub+0x16c>
 80009a6:	26fe      	movs	r6, #254	; 0xfe
 80009a8:	3401      	adds	r4, #1
 80009aa:	4226      	tst	r6, r4
 80009ac:	d153      	bne.n	8000a56 <__aeabi_fsub+0x2ee>
 80009ae:	2800      	cmp	r0, #0
 80009b0:	d172      	bne.n	8000a98 <__aeabi_fsub+0x330>
 80009b2:	4663      	mov	r3, ip
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d100      	bne.n	80009ba <__aeabi_fsub+0x252>
 80009b8:	e093      	b.n	8000ae2 <__aeabi_fsub+0x37a>
 80009ba:	4653      	mov	r3, sl
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d100      	bne.n	80009c2 <__aeabi_fsub+0x25a>
 80009c0:	e739      	b.n	8000836 <__aeabi_fsub+0xce>
 80009c2:	4463      	add	r3, ip
 80009c4:	2400      	movs	r4, #0
 80009c6:	015a      	lsls	r2, r3, #5
 80009c8:	d502      	bpl.n	80009d0 <__aeabi_fsub+0x268>
 80009ca:	4a4a      	ldr	r2, [pc, #296]	; (8000af4 <__aeabi_fsub+0x38c>)
 80009cc:	3401      	adds	r4, #1
 80009ce:	4013      	ands	r3, r2
 80009d0:	075a      	lsls	r2, r3, #29
 80009d2:	d000      	beq.n	80009d6 <__aeabi_fsub+0x26e>
 80009d4:	e720      	b.n	8000818 <__aeabi_fsub+0xb0>
 80009d6:	08db      	lsrs	r3, r3, #3
 80009d8:	2cff      	cmp	r4, #255	; 0xff
 80009da:	d100      	bne.n	80009de <__aeabi_fsub+0x276>
 80009dc:	e77a      	b.n	80008d4 <__aeabi_fsub+0x16c>
 80009de:	025b      	lsls	r3, r3, #9
 80009e0:	0a5f      	lsrs	r7, r3, #9
 80009e2:	b2e0      	uxtb	r0, r4
 80009e4:	e727      	b.n	8000836 <__aeabi_fsub+0xce>
 80009e6:	20ff      	movs	r0, #255	; 0xff
 80009e8:	2700      	movs	r7, #0
 80009ea:	e724      	b.n	8000836 <__aeabi_fsub+0xce>
 80009ec:	4b41      	ldr	r3, [pc, #260]	; (8000af4 <__aeabi_fsub+0x38c>)
 80009ee:	1a24      	subs	r4, r4, r0
 80009f0:	4033      	ands	r3, r6
 80009f2:	e70f      	b.n	8000814 <__aeabi_fsub+0xac>
 80009f4:	2eff      	cmp	r6, #255	; 0xff
 80009f6:	d100      	bne.n	80009fa <__aeabi_fsub+0x292>
 80009f8:	e76a      	b.n	80008d0 <__aeabi_fsub+0x168>
 80009fa:	2380      	movs	r3, #128	; 0x80
 80009fc:	4662      	mov	r2, ip
 80009fe:	04db      	lsls	r3, r3, #19
 8000a00:	431a      	orrs	r2, r3
 8000a02:	4694      	mov	ip, r2
 8000a04:	2301      	movs	r3, #1
 8000a06:	281b      	cmp	r0, #27
 8000a08:	dc09      	bgt.n	8000a1e <__aeabi_fsub+0x2b6>
 8000a0a:	2420      	movs	r4, #32
 8000a0c:	4663      	mov	r3, ip
 8000a0e:	4662      	mov	r2, ip
 8000a10:	40c3      	lsrs	r3, r0
 8000a12:	1a20      	subs	r0, r4, r0
 8000a14:	4082      	lsls	r2, r0
 8000a16:	0010      	movs	r0, r2
 8000a18:	1e44      	subs	r4, r0, #1
 8000a1a:	41a0      	sbcs	r0, r4
 8000a1c:	4303      	orrs	r3, r0
 8000a1e:	4652      	mov	r2, sl
 8000a20:	000d      	movs	r5, r1
 8000a22:	0034      	movs	r4, r6
 8000a24:	1ad3      	subs	r3, r2, r3
 8000a26:	e6dc      	b.n	80007e2 <__aeabi_fsub+0x7a>
 8000a28:	4663      	mov	r3, ip
 8000a2a:	4652      	mov	r2, sl
 8000a2c:	1a9e      	subs	r6, r3, r2
 8000a2e:	0173      	lsls	r3, r6, #5
 8000a30:	d417      	bmi.n	8000a62 <__aeabi_fsub+0x2fa>
 8000a32:	2e00      	cmp	r6, #0
 8000a34:	d000      	beq.n	8000a38 <__aeabi_fsub+0x2d0>
 8000a36:	e6d9      	b.n	80007ec <__aeabi_fsub+0x84>
 8000a38:	2500      	movs	r5, #0
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	2700      	movs	r7, #0
 8000a3e:	e6fa      	b.n	8000836 <__aeabi_fsub+0xce>
 8000a40:	4663      	mov	r3, ip
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d044      	beq.n	8000ad0 <__aeabi_fsub+0x368>
 8000a46:	3901      	subs	r1, #1
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	d04c      	beq.n	8000ae6 <__aeabi_fsub+0x37e>
 8000a4c:	2eff      	cmp	r6, #255	; 0xff
 8000a4e:	d000      	beq.n	8000a52 <__aeabi_fsub+0x2ea>
 8000a50:	e771      	b.n	8000936 <__aeabi_fsub+0x1ce>
 8000a52:	4643      	mov	r3, r8
 8000a54:	e73e      	b.n	80008d4 <__aeabi_fsub+0x16c>
 8000a56:	2cff      	cmp	r4, #255	; 0xff
 8000a58:	d0c5      	beq.n	80009e6 <__aeabi_fsub+0x27e>
 8000a5a:	4652      	mov	r2, sl
 8000a5c:	4462      	add	r2, ip
 8000a5e:	0853      	lsrs	r3, r2, #1
 8000a60:	e7b6      	b.n	80009d0 <__aeabi_fsub+0x268>
 8000a62:	4663      	mov	r3, ip
 8000a64:	000d      	movs	r5, r1
 8000a66:	1ad6      	subs	r6, r2, r3
 8000a68:	e6c0      	b.n	80007ec <__aeabi_fsub+0x84>
 8000a6a:	4662      	mov	r2, ip
 8000a6c:	2a00      	cmp	r2, #0
 8000a6e:	d116      	bne.n	8000a9e <__aeabi_fsub+0x336>
 8000a70:	4653      	mov	r3, sl
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d000      	beq.n	8000a78 <__aeabi_fsub+0x310>
 8000a76:	e72b      	b.n	80008d0 <__aeabi_fsub+0x168>
 8000a78:	2780      	movs	r7, #128	; 0x80
 8000a7a:	2500      	movs	r5, #0
 8000a7c:	20ff      	movs	r0, #255	; 0xff
 8000a7e:	03ff      	lsls	r7, r7, #15
 8000a80:	e6d9      	b.n	8000836 <__aeabi_fsub+0xce>
 8000a82:	000d      	movs	r5, r1
 8000a84:	4643      	mov	r3, r8
 8000a86:	0034      	movs	r4, r6
 8000a88:	e7a6      	b.n	80009d8 <__aeabi_fsub+0x270>
 8000a8a:	4653      	mov	r3, sl
 8000a8c:	4463      	add	r3, ip
 8000a8e:	e6f7      	b.n	8000880 <__aeabi_fsub+0x118>
 8000a90:	4663      	mov	r3, ip
 8000a92:	4652      	mov	r2, sl
 8000a94:	1a9b      	subs	r3, r3, r2
 8000a96:	e6a4      	b.n	80007e2 <__aeabi_fsub+0x7a>
 8000a98:	4662      	mov	r2, ip
 8000a9a:	2a00      	cmp	r2, #0
 8000a9c:	d0d9      	beq.n	8000a52 <__aeabi_fsub+0x2ea>
 8000a9e:	4652      	mov	r2, sl
 8000aa0:	2a00      	cmp	r2, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_fsub+0x33e>
 8000aa4:	e716      	b.n	80008d4 <__aeabi_fsub+0x16c>
 8000aa6:	2280      	movs	r2, #128	; 0x80
 8000aa8:	03d2      	lsls	r2, r2, #15
 8000aaa:	4213      	tst	r3, r2
 8000aac:	d100      	bne.n	8000ab0 <__aeabi_fsub+0x348>
 8000aae:	e711      	b.n	80008d4 <__aeabi_fsub+0x16c>
 8000ab0:	4640      	mov	r0, r8
 8000ab2:	4210      	tst	r0, r2
 8000ab4:	d000      	beq.n	8000ab8 <__aeabi_fsub+0x350>
 8000ab6:	e70d      	b.n	80008d4 <__aeabi_fsub+0x16c>
 8000ab8:	e70a      	b.n	80008d0 <__aeabi_fsub+0x168>
 8000aba:	4652      	mov	r2, sl
 8000abc:	000d      	movs	r5, r1
 8000abe:	0034      	movs	r4, r6
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	e68e      	b.n	80007e2 <__aeabi_fsub+0x7a>
 8000ac4:	4653      	mov	r3, sl
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d008      	beq.n	8000adc <__aeabi_fsub+0x374>
 8000aca:	000d      	movs	r5, r1
 8000acc:	4647      	mov	r7, r8
 8000ace:	e6b2      	b.n	8000836 <__aeabi_fsub+0xce>
 8000ad0:	4643      	mov	r3, r8
 8000ad2:	0034      	movs	r4, r6
 8000ad4:	e780      	b.n	80009d8 <__aeabi_fsub+0x270>
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d000      	beq.n	8000adc <__aeabi_fsub+0x374>
 8000ada:	e779      	b.n	80009d0 <__aeabi_fsub+0x268>
 8000adc:	2500      	movs	r5, #0
 8000ade:	2700      	movs	r7, #0
 8000ae0:	e6a9      	b.n	8000836 <__aeabi_fsub+0xce>
 8000ae2:	4647      	mov	r7, r8
 8000ae4:	e6a7      	b.n	8000836 <__aeabi_fsub+0xce>
 8000ae6:	4653      	mov	r3, sl
 8000ae8:	0034      	movs	r4, r6
 8000aea:	4463      	add	r3, ip
 8000aec:	e6c8      	b.n	8000880 <__aeabi_fsub+0x118>
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	7dffffff 	.word	0x7dffffff
 8000af4:	fbffffff 	.word	0xfbffffff

08000af8 <__aeabi_ui2f>:
 8000af8:	b570      	push	{r4, r5, r6, lr}
 8000afa:	1e05      	subs	r5, r0, #0
 8000afc:	d00e      	beq.n	8000b1c <__aeabi_ui2f+0x24>
 8000afe:	f001 fe79 	bl	80027f4 <__clzsi2>
 8000b02:	239e      	movs	r3, #158	; 0x9e
 8000b04:	0004      	movs	r4, r0
 8000b06:	1a1b      	subs	r3, r3, r0
 8000b08:	2b96      	cmp	r3, #150	; 0x96
 8000b0a:	dc0c      	bgt.n	8000b26 <__aeabi_ui2f+0x2e>
 8000b0c:	2808      	cmp	r0, #8
 8000b0e:	dd01      	ble.n	8000b14 <__aeabi_ui2f+0x1c>
 8000b10:	3c08      	subs	r4, #8
 8000b12:	40a5      	lsls	r5, r4
 8000b14:	026d      	lsls	r5, r5, #9
 8000b16:	0a6d      	lsrs	r5, r5, #9
 8000b18:	b2d8      	uxtb	r0, r3
 8000b1a:	e001      	b.n	8000b20 <__aeabi_ui2f+0x28>
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	2500      	movs	r5, #0
 8000b20:	05c0      	lsls	r0, r0, #23
 8000b22:	4328      	orrs	r0, r5
 8000b24:	bd70      	pop	{r4, r5, r6, pc}
 8000b26:	2b99      	cmp	r3, #153	; 0x99
 8000b28:	dd09      	ble.n	8000b3e <__aeabi_ui2f+0x46>
 8000b2a:	0002      	movs	r2, r0
 8000b2c:	0029      	movs	r1, r5
 8000b2e:	321b      	adds	r2, #27
 8000b30:	4091      	lsls	r1, r2
 8000b32:	1e4a      	subs	r2, r1, #1
 8000b34:	4191      	sbcs	r1, r2
 8000b36:	2205      	movs	r2, #5
 8000b38:	1a12      	subs	r2, r2, r0
 8000b3a:	40d5      	lsrs	r5, r2
 8000b3c:	430d      	orrs	r5, r1
 8000b3e:	2c05      	cmp	r4, #5
 8000b40:	dd01      	ble.n	8000b46 <__aeabi_ui2f+0x4e>
 8000b42:	1f62      	subs	r2, r4, #5
 8000b44:	4095      	lsls	r5, r2
 8000b46:	0029      	movs	r1, r5
 8000b48:	4e08      	ldr	r6, [pc, #32]	; (8000b6c <__aeabi_ui2f+0x74>)
 8000b4a:	4031      	ands	r1, r6
 8000b4c:	076a      	lsls	r2, r5, #29
 8000b4e:	d009      	beq.n	8000b64 <__aeabi_ui2f+0x6c>
 8000b50:	200f      	movs	r0, #15
 8000b52:	4028      	ands	r0, r5
 8000b54:	2804      	cmp	r0, #4
 8000b56:	d005      	beq.n	8000b64 <__aeabi_ui2f+0x6c>
 8000b58:	3104      	adds	r1, #4
 8000b5a:	014a      	lsls	r2, r1, #5
 8000b5c:	d502      	bpl.n	8000b64 <__aeabi_ui2f+0x6c>
 8000b5e:	239f      	movs	r3, #159	; 0x9f
 8000b60:	4031      	ands	r1, r6
 8000b62:	1b1b      	subs	r3, r3, r4
 8000b64:	0189      	lsls	r1, r1, #6
 8000b66:	0a4d      	lsrs	r5, r1, #9
 8000b68:	b2d8      	uxtb	r0, r3
 8000b6a:	e7d9      	b.n	8000b20 <__aeabi_ui2f+0x28>
 8000b6c:	fbffffff 	.word	0xfbffffff

08000b70 <__aeabi_dadd>:
 8000b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b72:	464f      	mov	r7, r9
 8000b74:	46d6      	mov	lr, sl
 8000b76:	4646      	mov	r6, r8
 8000b78:	000d      	movs	r5, r1
 8000b7a:	0001      	movs	r1, r0
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	b5c0      	push	{r6, r7, lr}
 8000b80:	0017      	movs	r7, r2
 8000b82:	032b      	lsls	r3, r5, #12
 8000b84:	0a5a      	lsrs	r2, r3, #9
 8000b86:	0f4b      	lsrs	r3, r1, #29
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	00ca      	lsls	r2, r1, #3
 8000b8c:	4691      	mov	r9, r2
 8000b8e:	0302      	lsls	r2, r0, #12
 8000b90:	006e      	lsls	r6, r5, #1
 8000b92:	0041      	lsls	r1, r0, #1
 8000b94:	0a52      	lsrs	r2, r2, #9
 8000b96:	0fec      	lsrs	r4, r5, #31
 8000b98:	0f7d      	lsrs	r5, r7, #29
 8000b9a:	4315      	orrs	r5, r2
 8000b9c:	0d76      	lsrs	r6, r6, #21
 8000b9e:	0d49      	lsrs	r1, r1, #21
 8000ba0:	0fc0      	lsrs	r0, r0, #31
 8000ba2:	4682      	mov	sl, r0
 8000ba4:	46ac      	mov	ip, r5
 8000ba6:	00ff      	lsls	r7, r7, #3
 8000ba8:	1a72      	subs	r2, r6, r1
 8000baa:	4284      	cmp	r4, r0
 8000bac:	d100      	bne.n	8000bb0 <__aeabi_dadd+0x40>
 8000bae:	e098      	b.n	8000ce2 <__aeabi_dadd+0x172>
 8000bb0:	2a00      	cmp	r2, #0
 8000bb2:	dc00      	bgt.n	8000bb6 <__aeabi_dadd+0x46>
 8000bb4:	e081      	b.n	8000cba <__aeabi_dadd+0x14a>
 8000bb6:	2900      	cmp	r1, #0
 8000bb8:	d100      	bne.n	8000bbc <__aeabi_dadd+0x4c>
 8000bba:	e0b6      	b.n	8000d2a <__aeabi_dadd+0x1ba>
 8000bbc:	49c9      	ldr	r1, [pc, #804]	; (8000ee4 <__aeabi_dadd+0x374>)
 8000bbe:	428e      	cmp	r6, r1
 8000bc0:	d100      	bne.n	8000bc4 <__aeabi_dadd+0x54>
 8000bc2:	e172      	b.n	8000eaa <__aeabi_dadd+0x33a>
 8000bc4:	2180      	movs	r1, #128	; 0x80
 8000bc6:	0028      	movs	r0, r5
 8000bc8:	0409      	lsls	r1, r1, #16
 8000bca:	4308      	orrs	r0, r1
 8000bcc:	4684      	mov	ip, r0
 8000bce:	2a38      	cmp	r2, #56	; 0x38
 8000bd0:	dd00      	ble.n	8000bd4 <__aeabi_dadd+0x64>
 8000bd2:	e15e      	b.n	8000e92 <__aeabi_dadd+0x322>
 8000bd4:	2a1f      	cmp	r2, #31
 8000bd6:	dd00      	ble.n	8000bda <__aeabi_dadd+0x6a>
 8000bd8:	e1ee      	b.n	8000fb8 <__aeabi_dadd+0x448>
 8000bda:	2020      	movs	r0, #32
 8000bdc:	0039      	movs	r1, r7
 8000bde:	4665      	mov	r5, ip
 8000be0:	1a80      	subs	r0, r0, r2
 8000be2:	4087      	lsls	r7, r0
 8000be4:	40d1      	lsrs	r1, r2
 8000be6:	4085      	lsls	r5, r0
 8000be8:	430d      	orrs	r5, r1
 8000bea:	0039      	movs	r1, r7
 8000bec:	1e4f      	subs	r7, r1, #1
 8000bee:	41b9      	sbcs	r1, r7
 8000bf0:	4667      	mov	r7, ip
 8000bf2:	40d7      	lsrs	r7, r2
 8000bf4:	4329      	orrs	r1, r5
 8000bf6:	1bdb      	subs	r3, r3, r7
 8000bf8:	464a      	mov	r2, r9
 8000bfa:	1a55      	subs	r5, r2, r1
 8000bfc:	45a9      	cmp	r9, r5
 8000bfe:	4189      	sbcs	r1, r1
 8000c00:	4249      	negs	r1, r1
 8000c02:	1a5b      	subs	r3, r3, r1
 8000c04:	4698      	mov	r8, r3
 8000c06:	4643      	mov	r3, r8
 8000c08:	021b      	lsls	r3, r3, #8
 8000c0a:	d400      	bmi.n	8000c0e <__aeabi_dadd+0x9e>
 8000c0c:	e0cc      	b.n	8000da8 <__aeabi_dadd+0x238>
 8000c0e:	4643      	mov	r3, r8
 8000c10:	025b      	lsls	r3, r3, #9
 8000c12:	0a5b      	lsrs	r3, r3, #9
 8000c14:	4698      	mov	r8, r3
 8000c16:	4643      	mov	r3, r8
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d100      	bne.n	8000c1e <__aeabi_dadd+0xae>
 8000c1c:	e12c      	b.n	8000e78 <__aeabi_dadd+0x308>
 8000c1e:	4640      	mov	r0, r8
 8000c20:	f001 fde8 	bl	80027f4 <__clzsi2>
 8000c24:	0001      	movs	r1, r0
 8000c26:	3908      	subs	r1, #8
 8000c28:	2220      	movs	r2, #32
 8000c2a:	0028      	movs	r0, r5
 8000c2c:	4643      	mov	r3, r8
 8000c2e:	1a52      	subs	r2, r2, r1
 8000c30:	408b      	lsls	r3, r1
 8000c32:	40d0      	lsrs	r0, r2
 8000c34:	408d      	lsls	r5, r1
 8000c36:	4303      	orrs	r3, r0
 8000c38:	428e      	cmp	r6, r1
 8000c3a:	dd00      	ble.n	8000c3e <__aeabi_dadd+0xce>
 8000c3c:	e117      	b.n	8000e6e <__aeabi_dadd+0x2fe>
 8000c3e:	1b8e      	subs	r6, r1, r6
 8000c40:	1c72      	adds	r2, r6, #1
 8000c42:	2a1f      	cmp	r2, #31
 8000c44:	dd00      	ble.n	8000c48 <__aeabi_dadd+0xd8>
 8000c46:	e1a7      	b.n	8000f98 <__aeabi_dadd+0x428>
 8000c48:	2120      	movs	r1, #32
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	002e      	movs	r6, r5
 8000c4e:	1a89      	subs	r1, r1, r2
 8000c50:	408d      	lsls	r5, r1
 8000c52:	4088      	lsls	r0, r1
 8000c54:	40d6      	lsrs	r6, r2
 8000c56:	40d3      	lsrs	r3, r2
 8000c58:	1e69      	subs	r1, r5, #1
 8000c5a:	418d      	sbcs	r5, r1
 8000c5c:	4330      	orrs	r0, r6
 8000c5e:	4698      	mov	r8, r3
 8000c60:	2600      	movs	r6, #0
 8000c62:	4305      	orrs	r5, r0
 8000c64:	076b      	lsls	r3, r5, #29
 8000c66:	d009      	beq.n	8000c7c <__aeabi_dadd+0x10c>
 8000c68:	230f      	movs	r3, #15
 8000c6a:	402b      	ands	r3, r5
 8000c6c:	2b04      	cmp	r3, #4
 8000c6e:	d005      	beq.n	8000c7c <__aeabi_dadd+0x10c>
 8000c70:	1d2b      	adds	r3, r5, #4
 8000c72:	42ab      	cmp	r3, r5
 8000c74:	41ad      	sbcs	r5, r5
 8000c76:	426d      	negs	r5, r5
 8000c78:	44a8      	add	r8, r5
 8000c7a:	001d      	movs	r5, r3
 8000c7c:	4643      	mov	r3, r8
 8000c7e:	021b      	lsls	r3, r3, #8
 8000c80:	d400      	bmi.n	8000c84 <__aeabi_dadd+0x114>
 8000c82:	e094      	b.n	8000dae <__aeabi_dadd+0x23e>
 8000c84:	4b97      	ldr	r3, [pc, #604]	; (8000ee4 <__aeabi_dadd+0x374>)
 8000c86:	1c72      	adds	r2, r6, #1
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d100      	bne.n	8000c8e <__aeabi_dadd+0x11e>
 8000c8c:	e09d      	b.n	8000dca <__aeabi_dadd+0x25a>
 8000c8e:	4641      	mov	r1, r8
 8000c90:	4b95      	ldr	r3, [pc, #596]	; (8000ee8 <__aeabi_dadd+0x378>)
 8000c92:	08ed      	lsrs	r5, r5, #3
 8000c94:	4019      	ands	r1, r3
 8000c96:	000b      	movs	r3, r1
 8000c98:	0552      	lsls	r2, r2, #21
 8000c9a:	0749      	lsls	r1, r1, #29
 8000c9c:	025b      	lsls	r3, r3, #9
 8000c9e:	4329      	orrs	r1, r5
 8000ca0:	0b1b      	lsrs	r3, r3, #12
 8000ca2:	0d52      	lsrs	r2, r2, #21
 8000ca4:	0512      	lsls	r2, r2, #20
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	07e4      	lsls	r4, r4, #31
 8000caa:	4323      	orrs	r3, r4
 8000cac:	0008      	movs	r0, r1
 8000cae:	0019      	movs	r1, r3
 8000cb0:	bce0      	pop	{r5, r6, r7}
 8000cb2:	46ba      	mov	sl, r7
 8000cb4:	46b1      	mov	r9, r6
 8000cb6:	46a8      	mov	r8, r5
 8000cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cba:	2a00      	cmp	r2, #0
 8000cbc:	d043      	beq.n	8000d46 <__aeabi_dadd+0x1d6>
 8000cbe:	1b8a      	subs	r2, r1, r6
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d000      	beq.n	8000cc6 <__aeabi_dadd+0x156>
 8000cc4:	e12a      	b.n	8000f1c <__aeabi_dadd+0x3ac>
 8000cc6:	464c      	mov	r4, r9
 8000cc8:	431c      	orrs	r4, r3
 8000cca:	d100      	bne.n	8000cce <__aeabi_dadd+0x15e>
 8000ccc:	e1d1      	b.n	8001072 <__aeabi_dadd+0x502>
 8000cce:	1e54      	subs	r4, r2, #1
 8000cd0:	2a01      	cmp	r2, #1
 8000cd2:	d100      	bne.n	8000cd6 <__aeabi_dadd+0x166>
 8000cd4:	e21f      	b.n	8001116 <__aeabi_dadd+0x5a6>
 8000cd6:	4d83      	ldr	r5, [pc, #524]	; (8000ee4 <__aeabi_dadd+0x374>)
 8000cd8:	42aa      	cmp	r2, r5
 8000cda:	d100      	bne.n	8000cde <__aeabi_dadd+0x16e>
 8000cdc:	e272      	b.n	80011c4 <__aeabi_dadd+0x654>
 8000cde:	0022      	movs	r2, r4
 8000ce0:	e123      	b.n	8000f2a <__aeabi_dadd+0x3ba>
 8000ce2:	2a00      	cmp	r2, #0
 8000ce4:	dc00      	bgt.n	8000ce8 <__aeabi_dadd+0x178>
 8000ce6:	e098      	b.n	8000e1a <__aeabi_dadd+0x2aa>
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d042      	beq.n	8000d72 <__aeabi_dadd+0x202>
 8000cec:	497d      	ldr	r1, [pc, #500]	; (8000ee4 <__aeabi_dadd+0x374>)
 8000cee:	428e      	cmp	r6, r1
 8000cf0:	d100      	bne.n	8000cf4 <__aeabi_dadd+0x184>
 8000cf2:	e0da      	b.n	8000eaa <__aeabi_dadd+0x33a>
 8000cf4:	2180      	movs	r1, #128	; 0x80
 8000cf6:	0028      	movs	r0, r5
 8000cf8:	0409      	lsls	r1, r1, #16
 8000cfa:	4308      	orrs	r0, r1
 8000cfc:	4684      	mov	ip, r0
 8000cfe:	2a38      	cmp	r2, #56	; 0x38
 8000d00:	dd00      	ble.n	8000d04 <__aeabi_dadd+0x194>
 8000d02:	e129      	b.n	8000f58 <__aeabi_dadd+0x3e8>
 8000d04:	2a1f      	cmp	r2, #31
 8000d06:	dc00      	bgt.n	8000d0a <__aeabi_dadd+0x19a>
 8000d08:	e187      	b.n	800101a <__aeabi_dadd+0x4aa>
 8000d0a:	0011      	movs	r1, r2
 8000d0c:	4665      	mov	r5, ip
 8000d0e:	3920      	subs	r1, #32
 8000d10:	40cd      	lsrs	r5, r1
 8000d12:	2a20      	cmp	r2, #32
 8000d14:	d004      	beq.n	8000d20 <__aeabi_dadd+0x1b0>
 8000d16:	2040      	movs	r0, #64	; 0x40
 8000d18:	4661      	mov	r1, ip
 8000d1a:	1a82      	subs	r2, r0, r2
 8000d1c:	4091      	lsls	r1, r2
 8000d1e:	430f      	orrs	r7, r1
 8000d20:	0039      	movs	r1, r7
 8000d22:	1e4f      	subs	r7, r1, #1
 8000d24:	41b9      	sbcs	r1, r7
 8000d26:	430d      	orrs	r5, r1
 8000d28:	e11b      	b.n	8000f62 <__aeabi_dadd+0x3f2>
 8000d2a:	0029      	movs	r1, r5
 8000d2c:	4339      	orrs	r1, r7
 8000d2e:	d100      	bne.n	8000d32 <__aeabi_dadd+0x1c2>
 8000d30:	e0b5      	b.n	8000e9e <__aeabi_dadd+0x32e>
 8000d32:	1e51      	subs	r1, r2, #1
 8000d34:	2a01      	cmp	r2, #1
 8000d36:	d100      	bne.n	8000d3a <__aeabi_dadd+0x1ca>
 8000d38:	e1ab      	b.n	8001092 <__aeabi_dadd+0x522>
 8000d3a:	486a      	ldr	r0, [pc, #424]	; (8000ee4 <__aeabi_dadd+0x374>)
 8000d3c:	4282      	cmp	r2, r0
 8000d3e:	d100      	bne.n	8000d42 <__aeabi_dadd+0x1d2>
 8000d40:	e1b2      	b.n	80010a8 <__aeabi_dadd+0x538>
 8000d42:	000a      	movs	r2, r1
 8000d44:	e743      	b.n	8000bce <__aeabi_dadd+0x5e>
 8000d46:	4969      	ldr	r1, [pc, #420]	; (8000eec <__aeabi_dadd+0x37c>)
 8000d48:	1c75      	adds	r5, r6, #1
 8000d4a:	420d      	tst	r5, r1
 8000d4c:	d000      	beq.n	8000d50 <__aeabi_dadd+0x1e0>
 8000d4e:	e0cf      	b.n	8000ef0 <__aeabi_dadd+0x380>
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d000      	beq.n	8000d56 <__aeabi_dadd+0x1e6>
 8000d54:	e193      	b.n	800107e <__aeabi_dadd+0x50e>
 8000d56:	4649      	mov	r1, r9
 8000d58:	4319      	orrs	r1, r3
 8000d5a:	d100      	bne.n	8000d5e <__aeabi_dadd+0x1ee>
 8000d5c:	e1d1      	b.n	8001102 <__aeabi_dadd+0x592>
 8000d5e:	4661      	mov	r1, ip
 8000d60:	4339      	orrs	r1, r7
 8000d62:	d000      	beq.n	8000d66 <__aeabi_dadd+0x1f6>
 8000d64:	e1e3      	b.n	800112e <__aeabi_dadd+0x5be>
 8000d66:	4649      	mov	r1, r9
 8000d68:	0758      	lsls	r0, r3, #29
 8000d6a:	08c9      	lsrs	r1, r1, #3
 8000d6c:	4301      	orrs	r1, r0
 8000d6e:	08db      	lsrs	r3, r3, #3
 8000d70:	e026      	b.n	8000dc0 <__aeabi_dadd+0x250>
 8000d72:	0029      	movs	r1, r5
 8000d74:	4339      	orrs	r1, r7
 8000d76:	d100      	bne.n	8000d7a <__aeabi_dadd+0x20a>
 8000d78:	e091      	b.n	8000e9e <__aeabi_dadd+0x32e>
 8000d7a:	1e51      	subs	r1, r2, #1
 8000d7c:	2a01      	cmp	r2, #1
 8000d7e:	d005      	beq.n	8000d8c <__aeabi_dadd+0x21c>
 8000d80:	4858      	ldr	r0, [pc, #352]	; (8000ee4 <__aeabi_dadd+0x374>)
 8000d82:	4282      	cmp	r2, r0
 8000d84:	d100      	bne.n	8000d88 <__aeabi_dadd+0x218>
 8000d86:	e18f      	b.n	80010a8 <__aeabi_dadd+0x538>
 8000d88:	000a      	movs	r2, r1
 8000d8a:	e7b8      	b.n	8000cfe <__aeabi_dadd+0x18e>
 8000d8c:	003d      	movs	r5, r7
 8000d8e:	444d      	add	r5, r9
 8000d90:	454d      	cmp	r5, r9
 8000d92:	4189      	sbcs	r1, r1
 8000d94:	4463      	add	r3, ip
 8000d96:	4698      	mov	r8, r3
 8000d98:	4249      	negs	r1, r1
 8000d9a:	4488      	add	r8, r1
 8000d9c:	4643      	mov	r3, r8
 8000d9e:	2602      	movs	r6, #2
 8000da0:	021b      	lsls	r3, r3, #8
 8000da2:	d500      	bpl.n	8000da6 <__aeabi_dadd+0x236>
 8000da4:	e0eb      	b.n	8000f7e <__aeabi_dadd+0x40e>
 8000da6:	3e01      	subs	r6, #1
 8000da8:	076b      	lsls	r3, r5, #29
 8000daa:	d000      	beq.n	8000dae <__aeabi_dadd+0x23e>
 8000dac:	e75c      	b.n	8000c68 <__aeabi_dadd+0xf8>
 8000dae:	4643      	mov	r3, r8
 8000db0:	08e9      	lsrs	r1, r5, #3
 8000db2:	075a      	lsls	r2, r3, #29
 8000db4:	4311      	orrs	r1, r2
 8000db6:	0032      	movs	r2, r6
 8000db8:	08db      	lsrs	r3, r3, #3
 8000dba:	484a      	ldr	r0, [pc, #296]	; (8000ee4 <__aeabi_dadd+0x374>)
 8000dbc:	4282      	cmp	r2, r0
 8000dbe:	d021      	beq.n	8000e04 <__aeabi_dadd+0x294>
 8000dc0:	031b      	lsls	r3, r3, #12
 8000dc2:	0552      	lsls	r2, r2, #21
 8000dc4:	0b1b      	lsrs	r3, r3, #12
 8000dc6:	0d52      	lsrs	r2, r2, #21
 8000dc8:	e76c      	b.n	8000ca4 <__aeabi_dadd+0x134>
 8000dca:	2300      	movs	r3, #0
 8000dcc:	2100      	movs	r1, #0
 8000dce:	e769      	b.n	8000ca4 <__aeabi_dadd+0x134>
 8000dd0:	002a      	movs	r2, r5
 8000dd2:	433a      	orrs	r2, r7
 8000dd4:	d069      	beq.n	8000eaa <__aeabi_dadd+0x33a>
 8000dd6:	464a      	mov	r2, r9
 8000dd8:	0758      	lsls	r0, r3, #29
 8000dda:	08d1      	lsrs	r1, r2, #3
 8000ddc:	08da      	lsrs	r2, r3, #3
 8000dde:	2380      	movs	r3, #128	; 0x80
 8000de0:	031b      	lsls	r3, r3, #12
 8000de2:	4308      	orrs	r0, r1
 8000de4:	421a      	tst	r2, r3
 8000de6:	d007      	beq.n	8000df8 <__aeabi_dadd+0x288>
 8000de8:	0029      	movs	r1, r5
 8000dea:	08ed      	lsrs	r5, r5, #3
 8000dec:	421d      	tst	r5, r3
 8000dee:	d103      	bne.n	8000df8 <__aeabi_dadd+0x288>
 8000df0:	002a      	movs	r2, r5
 8000df2:	08ff      	lsrs	r7, r7, #3
 8000df4:	0748      	lsls	r0, r1, #29
 8000df6:	4338      	orrs	r0, r7
 8000df8:	0f43      	lsrs	r3, r0, #29
 8000dfa:	00c1      	lsls	r1, r0, #3
 8000dfc:	075b      	lsls	r3, r3, #29
 8000dfe:	08c9      	lsrs	r1, r1, #3
 8000e00:	4319      	orrs	r1, r3
 8000e02:	0013      	movs	r3, r2
 8000e04:	000a      	movs	r2, r1
 8000e06:	431a      	orrs	r2, r3
 8000e08:	d100      	bne.n	8000e0c <__aeabi_dadd+0x29c>
 8000e0a:	e213      	b.n	8001234 <__aeabi_dadd+0x6c4>
 8000e0c:	2280      	movs	r2, #128	; 0x80
 8000e0e:	0312      	lsls	r2, r2, #12
 8000e10:	4313      	orrs	r3, r2
 8000e12:	031b      	lsls	r3, r3, #12
 8000e14:	4a33      	ldr	r2, [pc, #204]	; (8000ee4 <__aeabi_dadd+0x374>)
 8000e16:	0b1b      	lsrs	r3, r3, #12
 8000e18:	e744      	b.n	8000ca4 <__aeabi_dadd+0x134>
 8000e1a:	2a00      	cmp	r2, #0
 8000e1c:	d04b      	beq.n	8000eb6 <__aeabi_dadd+0x346>
 8000e1e:	1b8a      	subs	r2, r1, r6
 8000e20:	2e00      	cmp	r6, #0
 8000e22:	d100      	bne.n	8000e26 <__aeabi_dadd+0x2b6>
 8000e24:	e0e7      	b.n	8000ff6 <__aeabi_dadd+0x486>
 8000e26:	482f      	ldr	r0, [pc, #188]	; (8000ee4 <__aeabi_dadd+0x374>)
 8000e28:	4281      	cmp	r1, r0
 8000e2a:	d100      	bne.n	8000e2e <__aeabi_dadd+0x2be>
 8000e2c:	e195      	b.n	800115a <__aeabi_dadd+0x5ea>
 8000e2e:	2080      	movs	r0, #128	; 0x80
 8000e30:	0400      	lsls	r0, r0, #16
 8000e32:	4303      	orrs	r3, r0
 8000e34:	2a38      	cmp	r2, #56	; 0x38
 8000e36:	dd00      	ble.n	8000e3a <__aeabi_dadd+0x2ca>
 8000e38:	e143      	b.n	80010c2 <__aeabi_dadd+0x552>
 8000e3a:	2a1f      	cmp	r2, #31
 8000e3c:	dd00      	ble.n	8000e40 <__aeabi_dadd+0x2d0>
 8000e3e:	e1db      	b.n	80011f8 <__aeabi_dadd+0x688>
 8000e40:	2020      	movs	r0, #32
 8000e42:	001d      	movs	r5, r3
 8000e44:	464e      	mov	r6, r9
 8000e46:	1a80      	subs	r0, r0, r2
 8000e48:	4085      	lsls	r5, r0
 8000e4a:	40d6      	lsrs	r6, r2
 8000e4c:	4335      	orrs	r5, r6
 8000e4e:	464e      	mov	r6, r9
 8000e50:	4086      	lsls	r6, r0
 8000e52:	0030      	movs	r0, r6
 8000e54:	40d3      	lsrs	r3, r2
 8000e56:	1e46      	subs	r6, r0, #1
 8000e58:	41b0      	sbcs	r0, r6
 8000e5a:	449c      	add	ip, r3
 8000e5c:	4305      	orrs	r5, r0
 8000e5e:	19ed      	adds	r5, r5, r7
 8000e60:	42bd      	cmp	r5, r7
 8000e62:	419b      	sbcs	r3, r3
 8000e64:	425b      	negs	r3, r3
 8000e66:	4463      	add	r3, ip
 8000e68:	4698      	mov	r8, r3
 8000e6a:	000e      	movs	r6, r1
 8000e6c:	e07f      	b.n	8000f6e <__aeabi_dadd+0x3fe>
 8000e6e:	4a1e      	ldr	r2, [pc, #120]	; (8000ee8 <__aeabi_dadd+0x378>)
 8000e70:	1a76      	subs	r6, r6, r1
 8000e72:	4013      	ands	r3, r2
 8000e74:	4698      	mov	r8, r3
 8000e76:	e6f5      	b.n	8000c64 <__aeabi_dadd+0xf4>
 8000e78:	0028      	movs	r0, r5
 8000e7a:	f001 fcbb 	bl	80027f4 <__clzsi2>
 8000e7e:	0001      	movs	r1, r0
 8000e80:	3118      	adds	r1, #24
 8000e82:	291f      	cmp	r1, #31
 8000e84:	dc00      	bgt.n	8000e88 <__aeabi_dadd+0x318>
 8000e86:	e6cf      	b.n	8000c28 <__aeabi_dadd+0xb8>
 8000e88:	002b      	movs	r3, r5
 8000e8a:	3808      	subs	r0, #8
 8000e8c:	4083      	lsls	r3, r0
 8000e8e:	2500      	movs	r5, #0
 8000e90:	e6d2      	b.n	8000c38 <__aeabi_dadd+0xc8>
 8000e92:	4662      	mov	r2, ip
 8000e94:	433a      	orrs	r2, r7
 8000e96:	0011      	movs	r1, r2
 8000e98:	1e4f      	subs	r7, r1, #1
 8000e9a:	41b9      	sbcs	r1, r7
 8000e9c:	e6ac      	b.n	8000bf8 <__aeabi_dadd+0x88>
 8000e9e:	4649      	mov	r1, r9
 8000ea0:	0758      	lsls	r0, r3, #29
 8000ea2:	08c9      	lsrs	r1, r1, #3
 8000ea4:	4301      	orrs	r1, r0
 8000ea6:	08db      	lsrs	r3, r3, #3
 8000ea8:	e787      	b.n	8000dba <__aeabi_dadd+0x24a>
 8000eaa:	4649      	mov	r1, r9
 8000eac:	075a      	lsls	r2, r3, #29
 8000eae:	08c9      	lsrs	r1, r1, #3
 8000eb0:	4311      	orrs	r1, r2
 8000eb2:	08db      	lsrs	r3, r3, #3
 8000eb4:	e7a6      	b.n	8000e04 <__aeabi_dadd+0x294>
 8000eb6:	490d      	ldr	r1, [pc, #52]	; (8000eec <__aeabi_dadd+0x37c>)
 8000eb8:	1c70      	adds	r0, r6, #1
 8000eba:	4208      	tst	r0, r1
 8000ebc:	d000      	beq.n	8000ec0 <__aeabi_dadd+0x350>
 8000ebe:	e0bb      	b.n	8001038 <__aeabi_dadd+0x4c8>
 8000ec0:	2e00      	cmp	r6, #0
 8000ec2:	d000      	beq.n	8000ec6 <__aeabi_dadd+0x356>
 8000ec4:	e114      	b.n	80010f0 <__aeabi_dadd+0x580>
 8000ec6:	4649      	mov	r1, r9
 8000ec8:	4319      	orrs	r1, r3
 8000eca:	d100      	bne.n	8000ece <__aeabi_dadd+0x35e>
 8000ecc:	e175      	b.n	80011ba <__aeabi_dadd+0x64a>
 8000ece:	0029      	movs	r1, r5
 8000ed0:	4339      	orrs	r1, r7
 8000ed2:	d000      	beq.n	8000ed6 <__aeabi_dadd+0x366>
 8000ed4:	e17e      	b.n	80011d4 <__aeabi_dadd+0x664>
 8000ed6:	4649      	mov	r1, r9
 8000ed8:	0758      	lsls	r0, r3, #29
 8000eda:	08c9      	lsrs	r1, r1, #3
 8000edc:	4301      	orrs	r1, r0
 8000ede:	08db      	lsrs	r3, r3, #3
 8000ee0:	e76e      	b.n	8000dc0 <__aeabi_dadd+0x250>
 8000ee2:	46c0      	nop			; (mov r8, r8)
 8000ee4:	000007ff 	.word	0x000007ff
 8000ee8:	ff7fffff 	.word	0xff7fffff
 8000eec:	000007fe 	.word	0x000007fe
 8000ef0:	4649      	mov	r1, r9
 8000ef2:	1bcd      	subs	r5, r1, r7
 8000ef4:	4661      	mov	r1, ip
 8000ef6:	1a58      	subs	r0, r3, r1
 8000ef8:	45a9      	cmp	r9, r5
 8000efa:	4189      	sbcs	r1, r1
 8000efc:	4249      	negs	r1, r1
 8000efe:	4688      	mov	r8, r1
 8000f00:	0001      	movs	r1, r0
 8000f02:	4640      	mov	r0, r8
 8000f04:	1a09      	subs	r1, r1, r0
 8000f06:	4688      	mov	r8, r1
 8000f08:	0209      	lsls	r1, r1, #8
 8000f0a:	d500      	bpl.n	8000f0e <__aeabi_dadd+0x39e>
 8000f0c:	e0a6      	b.n	800105c <__aeabi_dadd+0x4ec>
 8000f0e:	4641      	mov	r1, r8
 8000f10:	4329      	orrs	r1, r5
 8000f12:	d000      	beq.n	8000f16 <__aeabi_dadd+0x3a6>
 8000f14:	e67f      	b.n	8000c16 <__aeabi_dadd+0xa6>
 8000f16:	2300      	movs	r3, #0
 8000f18:	2400      	movs	r4, #0
 8000f1a:	e751      	b.n	8000dc0 <__aeabi_dadd+0x250>
 8000f1c:	4cc7      	ldr	r4, [pc, #796]	; (800123c <__aeabi_dadd+0x6cc>)
 8000f1e:	42a1      	cmp	r1, r4
 8000f20:	d100      	bne.n	8000f24 <__aeabi_dadd+0x3b4>
 8000f22:	e0c7      	b.n	80010b4 <__aeabi_dadd+0x544>
 8000f24:	2480      	movs	r4, #128	; 0x80
 8000f26:	0424      	lsls	r4, r4, #16
 8000f28:	4323      	orrs	r3, r4
 8000f2a:	2a38      	cmp	r2, #56	; 0x38
 8000f2c:	dc54      	bgt.n	8000fd8 <__aeabi_dadd+0x468>
 8000f2e:	2a1f      	cmp	r2, #31
 8000f30:	dd00      	ble.n	8000f34 <__aeabi_dadd+0x3c4>
 8000f32:	e0cc      	b.n	80010ce <__aeabi_dadd+0x55e>
 8000f34:	2420      	movs	r4, #32
 8000f36:	4648      	mov	r0, r9
 8000f38:	1aa4      	subs	r4, r4, r2
 8000f3a:	001d      	movs	r5, r3
 8000f3c:	464e      	mov	r6, r9
 8000f3e:	40a0      	lsls	r0, r4
 8000f40:	40d6      	lsrs	r6, r2
 8000f42:	40a5      	lsls	r5, r4
 8000f44:	0004      	movs	r4, r0
 8000f46:	40d3      	lsrs	r3, r2
 8000f48:	4662      	mov	r2, ip
 8000f4a:	4335      	orrs	r5, r6
 8000f4c:	1e66      	subs	r6, r4, #1
 8000f4e:	41b4      	sbcs	r4, r6
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	469c      	mov	ip, r3
 8000f54:	4325      	orrs	r5, r4
 8000f56:	e044      	b.n	8000fe2 <__aeabi_dadd+0x472>
 8000f58:	4662      	mov	r2, ip
 8000f5a:	433a      	orrs	r2, r7
 8000f5c:	0015      	movs	r5, r2
 8000f5e:	1e6f      	subs	r7, r5, #1
 8000f60:	41bd      	sbcs	r5, r7
 8000f62:	444d      	add	r5, r9
 8000f64:	454d      	cmp	r5, r9
 8000f66:	4189      	sbcs	r1, r1
 8000f68:	4249      	negs	r1, r1
 8000f6a:	4688      	mov	r8, r1
 8000f6c:	4498      	add	r8, r3
 8000f6e:	4643      	mov	r3, r8
 8000f70:	021b      	lsls	r3, r3, #8
 8000f72:	d400      	bmi.n	8000f76 <__aeabi_dadd+0x406>
 8000f74:	e718      	b.n	8000da8 <__aeabi_dadd+0x238>
 8000f76:	4bb1      	ldr	r3, [pc, #708]	; (800123c <__aeabi_dadd+0x6cc>)
 8000f78:	3601      	adds	r6, #1
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	d049      	beq.n	8001012 <__aeabi_dadd+0x4a2>
 8000f7e:	4642      	mov	r2, r8
 8000f80:	4baf      	ldr	r3, [pc, #700]	; (8001240 <__aeabi_dadd+0x6d0>)
 8000f82:	2101      	movs	r1, #1
 8000f84:	401a      	ands	r2, r3
 8000f86:	0013      	movs	r3, r2
 8000f88:	086a      	lsrs	r2, r5, #1
 8000f8a:	400d      	ands	r5, r1
 8000f8c:	4315      	orrs	r5, r2
 8000f8e:	07d9      	lsls	r1, r3, #31
 8000f90:	085b      	lsrs	r3, r3, #1
 8000f92:	4698      	mov	r8, r3
 8000f94:	430d      	orrs	r5, r1
 8000f96:	e665      	b.n	8000c64 <__aeabi_dadd+0xf4>
 8000f98:	0018      	movs	r0, r3
 8000f9a:	3e1f      	subs	r6, #31
 8000f9c:	40f0      	lsrs	r0, r6
 8000f9e:	2a20      	cmp	r2, #32
 8000fa0:	d003      	beq.n	8000faa <__aeabi_dadd+0x43a>
 8000fa2:	2140      	movs	r1, #64	; 0x40
 8000fa4:	1a8a      	subs	r2, r1, r2
 8000fa6:	4093      	lsls	r3, r2
 8000fa8:	431d      	orrs	r5, r3
 8000faa:	1e69      	subs	r1, r5, #1
 8000fac:	418d      	sbcs	r5, r1
 8000fae:	2300      	movs	r3, #0
 8000fb0:	2600      	movs	r6, #0
 8000fb2:	4698      	mov	r8, r3
 8000fb4:	4305      	orrs	r5, r0
 8000fb6:	e6f7      	b.n	8000da8 <__aeabi_dadd+0x238>
 8000fb8:	0011      	movs	r1, r2
 8000fba:	4665      	mov	r5, ip
 8000fbc:	3920      	subs	r1, #32
 8000fbe:	40cd      	lsrs	r5, r1
 8000fc0:	2a20      	cmp	r2, #32
 8000fc2:	d004      	beq.n	8000fce <__aeabi_dadd+0x45e>
 8000fc4:	2040      	movs	r0, #64	; 0x40
 8000fc6:	4661      	mov	r1, ip
 8000fc8:	1a82      	subs	r2, r0, r2
 8000fca:	4091      	lsls	r1, r2
 8000fcc:	430f      	orrs	r7, r1
 8000fce:	0039      	movs	r1, r7
 8000fd0:	1e4f      	subs	r7, r1, #1
 8000fd2:	41b9      	sbcs	r1, r7
 8000fd4:	4329      	orrs	r1, r5
 8000fd6:	e60f      	b.n	8000bf8 <__aeabi_dadd+0x88>
 8000fd8:	464a      	mov	r2, r9
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	001d      	movs	r5, r3
 8000fde:	1e6b      	subs	r3, r5, #1
 8000fe0:	419d      	sbcs	r5, r3
 8000fe2:	1b7d      	subs	r5, r7, r5
 8000fe4:	42af      	cmp	r7, r5
 8000fe6:	419b      	sbcs	r3, r3
 8000fe8:	4662      	mov	r2, ip
 8000fea:	425b      	negs	r3, r3
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	4698      	mov	r8, r3
 8000ff0:	4654      	mov	r4, sl
 8000ff2:	000e      	movs	r6, r1
 8000ff4:	e607      	b.n	8000c06 <__aeabi_dadd+0x96>
 8000ff6:	4648      	mov	r0, r9
 8000ff8:	4318      	orrs	r0, r3
 8000ffa:	d100      	bne.n	8000ffe <__aeabi_dadd+0x48e>
 8000ffc:	e0b3      	b.n	8001166 <__aeabi_dadd+0x5f6>
 8000ffe:	1e50      	subs	r0, r2, #1
 8001000:	2a01      	cmp	r2, #1
 8001002:	d100      	bne.n	8001006 <__aeabi_dadd+0x496>
 8001004:	e10d      	b.n	8001222 <__aeabi_dadd+0x6b2>
 8001006:	4d8d      	ldr	r5, [pc, #564]	; (800123c <__aeabi_dadd+0x6cc>)
 8001008:	42aa      	cmp	r2, r5
 800100a:	d100      	bne.n	800100e <__aeabi_dadd+0x49e>
 800100c:	e0a5      	b.n	800115a <__aeabi_dadd+0x5ea>
 800100e:	0002      	movs	r2, r0
 8001010:	e710      	b.n	8000e34 <__aeabi_dadd+0x2c4>
 8001012:	0032      	movs	r2, r6
 8001014:	2300      	movs	r3, #0
 8001016:	2100      	movs	r1, #0
 8001018:	e644      	b.n	8000ca4 <__aeabi_dadd+0x134>
 800101a:	2120      	movs	r1, #32
 800101c:	0038      	movs	r0, r7
 800101e:	1a89      	subs	r1, r1, r2
 8001020:	4665      	mov	r5, ip
 8001022:	408f      	lsls	r7, r1
 8001024:	408d      	lsls	r5, r1
 8001026:	40d0      	lsrs	r0, r2
 8001028:	1e79      	subs	r1, r7, #1
 800102a:	418f      	sbcs	r7, r1
 800102c:	4305      	orrs	r5, r0
 800102e:	433d      	orrs	r5, r7
 8001030:	4667      	mov	r7, ip
 8001032:	40d7      	lsrs	r7, r2
 8001034:	19db      	adds	r3, r3, r7
 8001036:	e794      	b.n	8000f62 <__aeabi_dadd+0x3f2>
 8001038:	4a80      	ldr	r2, [pc, #512]	; (800123c <__aeabi_dadd+0x6cc>)
 800103a:	4290      	cmp	r0, r2
 800103c:	d100      	bne.n	8001040 <__aeabi_dadd+0x4d0>
 800103e:	e0ec      	b.n	800121a <__aeabi_dadd+0x6aa>
 8001040:	0039      	movs	r1, r7
 8001042:	4449      	add	r1, r9
 8001044:	4549      	cmp	r1, r9
 8001046:	4192      	sbcs	r2, r2
 8001048:	4463      	add	r3, ip
 800104a:	4252      	negs	r2, r2
 800104c:	189b      	adds	r3, r3, r2
 800104e:	07dd      	lsls	r5, r3, #31
 8001050:	0849      	lsrs	r1, r1, #1
 8001052:	085b      	lsrs	r3, r3, #1
 8001054:	4698      	mov	r8, r3
 8001056:	0006      	movs	r6, r0
 8001058:	430d      	orrs	r5, r1
 800105a:	e6a5      	b.n	8000da8 <__aeabi_dadd+0x238>
 800105c:	464a      	mov	r2, r9
 800105e:	1abd      	subs	r5, r7, r2
 8001060:	42af      	cmp	r7, r5
 8001062:	4189      	sbcs	r1, r1
 8001064:	4662      	mov	r2, ip
 8001066:	4249      	negs	r1, r1
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	1a5b      	subs	r3, r3, r1
 800106c:	4698      	mov	r8, r3
 800106e:	4654      	mov	r4, sl
 8001070:	e5d1      	b.n	8000c16 <__aeabi_dadd+0xa6>
 8001072:	076c      	lsls	r4, r5, #29
 8001074:	08f9      	lsrs	r1, r7, #3
 8001076:	4321      	orrs	r1, r4
 8001078:	08eb      	lsrs	r3, r5, #3
 800107a:	0004      	movs	r4, r0
 800107c:	e69d      	b.n	8000dba <__aeabi_dadd+0x24a>
 800107e:	464a      	mov	r2, r9
 8001080:	431a      	orrs	r2, r3
 8001082:	d175      	bne.n	8001170 <__aeabi_dadd+0x600>
 8001084:	4661      	mov	r1, ip
 8001086:	4339      	orrs	r1, r7
 8001088:	d114      	bne.n	80010b4 <__aeabi_dadd+0x544>
 800108a:	2380      	movs	r3, #128	; 0x80
 800108c:	2400      	movs	r4, #0
 800108e:	031b      	lsls	r3, r3, #12
 8001090:	e6bc      	b.n	8000e0c <__aeabi_dadd+0x29c>
 8001092:	464a      	mov	r2, r9
 8001094:	1bd5      	subs	r5, r2, r7
 8001096:	45a9      	cmp	r9, r5
 8001098:	4189      	sbcs	r1, r1
 800109a:	4662      	mov	r2, ip
 800109c:	4249      	negs	r1, r1
 800109e:	1a9b      	subs	r3, r3, r2
 80010a0:	1a5b      	subs	r3, r3, r1
 80010a2:	4698      	mov	r8, r3
 80010a4:	2601      	movs	r6, #1
 80010a6:	e5ae      	b.n	8000c06 <__aeabi_dadd+0x96>
 80010a8:	464a      	mov	r2, r9
 80010aa:	08d1      	lsrs	r1, r2, #3
 80010ac:	075a      	lsls	r2, r3, #29
 80010ae:	4311      	orrs	r1, r2
 80010b0:	08db      	lsrs	r3, r3, #3
 80010b2:	e6a7      	b.n	8000e04 <__aeabi_dadd+0x294>
 80010b4:	4663      	mov	r3, ip
 80010b6:	08f9      	lsrs	r1, r7, #3
 80010b8:	075a      	lsls	r2, r3, #29
 80010ba:	4654      	mov	r4, sl
 80010bc:	4311      	orrs	r1, r2
 80010be:	08db      	lsrs	r3, r3, #3
 80010c0:	e6a0      	b.n	8000e04 <__aeabi_dadd+0x294>
 80010c2:	464a      	mov	r2, r9
 80010c4:	4313      	orrs	r3, r2
 80010c6:	001d      	movs	r5, r3
 80010c8:	1e6b      	subs	r3, r5, #1
 80010ca:	419d      	sbcs	r5, r3
 80010cc:	e6c7      	b.n	8000e5e <__aeabi_dadd+0x2ee>
 80010ce:	0014      	movs	r4, r2
 80010d0:	001e      	movs	r6, r3
 80010d2:	3c20      	subs	r4, #32
 80010d4:	40e6      	lsrs	r6, r4
 80010d6:	2a20      	cmp	r2, #32
 80010d8:	d005      	beq.n	80010e6 <__aeabi_dadd+0x576>
 80010da:	2440      	movs	r4, #64	; 0x40
 80010dc:	1aa2      	subs	r2, r4, r2
 80010de:	4093      	lsls	r3, r2
 80010e0:	464a      	mov	r2, r9
 80010e2:	431a      	orrs	r2, r3
 80010e4:	4691      	mov	r9, r2
 80010e6:	464d      	mov	r5, r9
 80010e8:	1e6b      	subs	r3, r5, #1
 80010ea:	419d      	sbcs	r5, r3
 80010ec:	4335      	orrs	r5, r6
 80010ee:	e778      	b.n	8000fe2 <__aeabi_dadd+0x472>
 80010f0:	464a      	mov	r2, r9
 80010f2:	431a      	orrs	r2, r3
 80010f4:	d000      	beq.n	80010f8 <__aeabi_dadd+0x588>
 80010f6:	e66b      	b.n	8000dd0 <__aeabi_dadd+0x260>
 80010f8:	076b      	lsls	r3, r5, #29
 80010fa:	08f9      	lsrs	r1, r7, #3
 80010fc:	4319      	orrs	r1, r3
 80010fe:	08eb      	lsrs	r3, r5, #3
 8001100:	e680      	b.n	8000e04 <__aeabi_dadd+0x294>
 8001102:	4661      	mov	r1, ip
 8001104:	4339      	orrs	r1, r7
 8001106:	d054      	beq.n	80011b2 <__aeabi_dadd+0x642>
 8001108:	4663      	mov	r3, ip
 800110a:	08f9      	lsrs	r1, r7, #3
 800110c:	075c      	lsls	r4, r3, #29
 800110e:	4321      	orrs	r1, r4
 8001110:	08db      	lsrs	r3, r3, #3
 8001112:	0004      	movs	r4, r0
 8001114:	e654      	b.n	8000dc0 <__aeabi_dadd+0x250>
 8001116:	464a      	mov	r2, r9
 8001118:	1abd      	subs	r5, r7, r2
 800111a:	42af      	cmp	r7, r5
 800111c:	4189      	sbcs	r1, r1
 800111e:	4662      	mov	r2, ip
 8001120:	4249      	negs	r1, r1
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	1a5b      	subs	r3, r3, r1
 8001126:	4698      	mov	r8, r3
 8001128:	0004      	movs	r4, r0
 800112a:	2601      	movs	r6, #1
 800112c:	e56b      	b.n	8000c06 <__aeabi_dadd+0x96>
 800112e:	464a      	mov	r2, r9
 8001130:	1bd5      	subs	r5, r2, r7
 8001132:	45a9      	cmp	r9, r5
 8001134:	4189      	sbcs	r1, r1
 8001136:	4662      	mov	r2, ip
 8001138:	4249      	negs	r1, r1
 800113a:	1a9a      	subs	r2, r3, r2
 800113c:	1a52      	subs	r2, r2, r1
 800113e:	4690      	mov	r8, r2
 8001140:	0212      	lsls	r2, r2, #8
 8001142:	d532      	bpl.n	80011aa <__aeabi_dadd+0x63a>
 8001144:	464a      	mov	r2, r9
 8001146:	1abd      	subs	r5, r7, r2
 8001148:	42af      	cmp	r7, r5
 800114a:	4189      	sbcs	r1, r1
 800114c:	4662      	mov	r2, ip
 800114e:	4249      	negs	r1, r1
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	1a5b      	subs	r3, r3, r1
 8001154:	4698      	mov	r8, r3
 8001156:	0004      	movs	r4, r0
 8001158:	e584      	b.n	8000c64 <__aeabi_dadd+0xf4>
 800115a:	4663      	mov	r3, ip
 800115c:	08f9      	lsrs	r1, r7, #3
 800115e:	075a      	lsls	r2, r3, #29
 8001160:	4311      	orrs	r1, r2
 8001162:	08db      	lsrs	r3, r3, #3
 8001164:	e64e      	b.n	8000e04 <__aeabi_dadd+0x294>
 8001166:	08f9      	lsrs	r1, r7, #3
 8001168:	0768      	lsls	r0, r5, #29
 800116a:	4301      	orrs	r1, r0
 800116c:	08eb      	lsrs	r3, r5, #3
 800116e:	e624      	b.n	8000dba <__aeabi_dadd+0x24a>
 8001170:	4662      	mov	r2, ip
 8001172:	433a      	orrs	r2, r7
 8001174:	d100      	bne.n	8001178 <__aeabi_dadd+0x608>
 8001176:	e698      	b.n	8000eaa <__aeabi_dadd+0x33a>
 8001178:	464a      	mov	r2, r9
 800117a:	08d1      	lsrs	r1, r2, #3
 800117c:	075a      	lsls	r2, r3, #29
 800117e:	4311      	orrs	r1, r2
 8001180:	08da      	lsrs	r2, r3, #3
 8001182:	2380      	movs	r3, #128	; 0x80
 8001184:	031b      	lsls	r3, r3, #12
 8001186:	421a      	tst	r2, r3
 8001188:	d008      	beq.n	800119c <__aeabi_dadd+0x62c>
 800118a:	4660      	mov	r0, ip
 800118c:	08c5      	lsrs	r5, r0, #3
 800118e:	421d      	tst	r5, r3
 8001190:	d104      	bne.n	800119c <__aeabi_dadd+0x62c>
 8001192:	4654      	mov	r4, sl
 8001194:	002a      	movs	r2, r5
 8001196:	08f9      	lsrs	r1, r7, #3
 8001198:	0743      	lsls	r3, r0, #29
 800119a:	4319      	orrs	r1, r3
 800119c:	0f4b      	lsrs	r3, r1, #29
 800119e:	00c9      	lsls	r1, r1, #3
 80011a0:	075b      	lsls	r3, r3, #29
 80011a2:	08c9      	lsrs	r1, r1, #3
 80011a4:	4319      	orrs	r1, r3
 80011a6:	0013      	movs	r3, r2
 80011a8:	e62c      	b.n	8000e04 <__aeabi_dadd+0x294>
 80011aa:	4641      	mov	r1, r8
 80011ac:	4329      	orrs	r1, r5
 80011ae:	d000      	beq.n	80011b2 <__aeabi_dadd+0x642>
 80011b0:	e5fa      	b.n	8000da8 <__aeabi_dadd+0x238>
 80011b2:	2300      	movs	r3, #0
 80011b4:	000a      	movs	r2, r1
 80011b6:	2400      	movs	r4, #0
 80011b8:	e602      	b.n	8000dc0 <__aeabi_dadd+0x250>
 80011ba:	076b      	lsls	r3, r5, #29
 80011bc:	08f9      	lsrs	r1, r7, #3
 80011be:	4319      	orrs	r1, r3
 80011c0:	08eb      	lsrs	r3, r5, #3
 80011c2:	e5fd      	b.n	8000dc0 <__aeabi_dadd+0x250>
 80011c4:	4663      	mov	r3, ip
 80011c6:	08f9      	lsrs	r1, r7, #3
 80011c8:	075b      	lsls	r3, r3, #29
 80011ca:	4319      	orrs	r1, r3
 80011cc:	4663      	mov	r3, ip
 80011ce:	0004      	movs	r4, r0
 80011d0:	08db      	lsrs	r3, r3, #3
 80011d2:	e617      	b.n	8000e04 <__aeabi_dadd+0x294>
 80011d4:	003d      	movs	r5, r7
 80011d6:	444d      	add	r5, r9
 80011d8:	4463      	add	r3, ip
 80011da:	454d      	cmp	r5, r9
 80011dc:	4189      	sbcs	r1, r1
 80011de:	4698      	mov	r8, r3
 80011e0:	4249      	negs	r1, r1
 80011e2:	4488      	add	r8, r1
 80011e4:	4643      	mov	r3, r8
 80011e6:	021b      	lsls	r3, r3, #8
 80011e8:	d400      	bmi.n	80011ec <__aeabi_dadd+0x67c>
 80011ea:	e5dd      	b.n	8000da8 <__aeabi_dadd+0x238>
 80011ec:	4642      	mov	r2, r8
 80011ee:	4b14      	ldr	r3, [pc, #80]	; (8001240 <__aeabi_dadd+0x6d0>)
 80011f0:	2601      	movs	r6, #1
 80011f2:	401a      	ands	r2, r3
 80011f4:	4690      	mov	r8, r2
 80011f6:	e5d7      	b.n	8000da8 <__aeabi_dadd+0x238>
 80011f8:	0010      	movs	r0, r2
 80011fa:	001e      	movs	r6, r3
 80011fc:	3820      	subs	r0, #32
 80011fe:	40c6      	lsrs	r6, r0
 8001200:	2a20      	cmp	r2, #32
 8001202:	d005      	beq.n	8001210 <__aeabi_dadd+0x6a0>
 8001204:	2040      	movs	r0, #64	; 0x40
 8001206:	1a82      	subs	r2, r0, r2
 8001208:	4093      	lsls	r3, r2
 800120a:	464a      	mov	r2, r9
 800120c:	431a      	orrs	r2, r3
 800120e:	4691      	mov	r9, r2
 8001210:	464d      	mov	r5, r9
 8001212:	1e6b      	subs	r3, r5, #1
 8001214:	419d      	sbcs	r5, r3
 8001216:	4335      	orrs	r5, r6
 8001218:	e621      	b.n	8000e5e <__aeabi_dadd+0x2ee>
 800121a:	0002      	movs	r2, r0
 800121c:	2300      	movs	r3, #0
 800121e:	2100      	movs	r1, #0
 8001220:	e540      	b.n	8000ca4 <__aeabi_dadd+0x134>
 8001222:	464a      	mov	r2, r9
 8001224:	19d5      	adds	r5, r2, r7
 8001226:	42bd      	cmp	r5, r7
 8001228:	4189      	sbcs	r1, r1
 800122a:	4463      	add	r3, ip
 800122c:	4698      	mov	r8, r3
 800122e:	4249      	negs	r1, r1
 8001230:	4488      	add	r8, r1
 8001232:	e5b3      	b.n	8000d9c <__aeabi_dadd+0x22c>
 8001234:	2100      	movs	r1, #0
 8001236:	4a01      	ldr	r2, [pc, #4]	; (800123c <__aeabi_dadd+0x6cc>)
 8001238:	000b      	movs	r3, r1
 800123a:	e533      	b.n	8000ca4 <__aeabi_dadd+0x134>
 800123c:	000007ff 	.word	0x000007ff
 8001240:	ff7fffff 	.word	0xff7fffff

08001244 <__aeabi_ddiv>:
 8001244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001246:	4657      	mov	r7, sl
 8001248:	464e      	mov	r6, r9
 800124a:	4645      	mov	r5, r8
 800124c:	46de      	mov	lr, fp
 800124e:	b5e0      	push	{r5, r6, r7, lr}
 8001250:	4681      	mov	r9, r0
 8001252:	0005      	movs	r5, r0
 8001254:	030c      	lsls	r4, r1, #12
 8001256:	0048      	lsls	r0, r1, #1
 8001258:	4692      	mov	sl, r2
 800125a:	001f      	movs	r7, r3
 800125c:	b085      	sub	sp, #20
 800125e:	0b24      	lsrs	r4, r4, #12
 8001260:	0d40      	lsrs	r0, r0, #21
 8001262:	0fce      	lsrs	r6, r1, #31
 8001264:	2800      	cmp	r0, #0
 8001266:	d059      	beq.n	800131c <__aeabi_ddiv+0xd8>
 8001268:	4b87      	ldr	r3, [pc, #540]	; (8001488 <__aeabi_ddiv+0x244>)
 800126a:	4298      	cmp	r0, r3
 800126c:	d100      	bne.n	8001270 <__aeabi_ddiv+0x2c>
 800126e:	e098      	b.n	80013a2 <__aeabi_ddiv+0x15e>
 8001270:	0f6b      	lsrs	r3, r5, #29
 8001272:	00e4      	lsls	r4, r4, #3
 8001274:	431c      	orrs	r4, r3
 8001276:	2380      	movs	r3, #128	; 0x80
 8001278:	041b      	lsls	r3, r3, #16
 800127a:	4323      	orrs	r3, r4
 800127c:	4698      	mov	r8, r3
 800127e:	4b83      	ldr	r3, [pc, #524]	; (800148c <__aeabi_ddiv+0x248>)
 8001280:	00ed      	lsls	r5, r5, #3
 8001282:	469b      	mov	fp, r3
 8001284:	2300      	movs	r3, #0
 8001286:	4699      	mov	r9, r3
 8001288:	4483      	add	fp, r0
 800128a:	9300      	str	r3, [sp, #0]
 800128c:	033c      	lsls	r4, r7, #12
 800128e:	007b      	lsls	r3, r7, #1
 8001290:	4650      	mov	r0, sl
 8001292:	0b24      	lsrs	r4, r4, #12
 8001294:	0d5b      	lsrs	r3, r3, #21
 8001296:	0fff      	lsrs	r7, r7, #31
 8001298:	2b00      	cmp	r3, #0
 800129a:	d067      	beq.n	800136c <__aeabi_ddiv+0x128>
 800129c:	4a7a      	ldr	r2, [pc, #488]	; (8001488 <__aeabi_ddiv+0x244>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d018      	beq.n	80012d4 <__aeabi_ddiv+0x90>
 80012a2:	497a      	ldr	r1, [pc, #488]	; (800148c <__aeabi_ddiv+0x248>)
 80012a4:	0f42      	lsrs	r2, r0, #29
 80012a6:	468c      	mov	ip, r1
 80012a8:	00e4      	lsls	r4, r4, #3
 80012aa:	4659      	mov	r1, fp
 80012ac:	4314      	orrs	r4, r2
 80012ae:	2280      	movs	r2, #128	; 0x80
 80012b0:	4463      	add	r3, ip
 80012b2:	0412      	lsls	r2, r2, #16
 80012b4:	1acb      	subs	r3, r1, r3
 80012b6:	4314      	orrs	r4, r2
 80012b8:	469b      	mov	fp, r3
 80012ba:	00c2      	lsls	r2, r0, #3
 80012bc:	2000      	movs	r0, #0
 80012be:	0033      	movs	r3, r6
 80012c0:	407b      	eors	r3, r7
 80012c2:	469a      	mov	sl, r3
 80012c4:	464b      	mov	r3, r9
 80012c6:	2b0f      	cmp	r3, #15
 80012c8:	d900      	bls.n	80012cc <__aeabi_ddiv+0x88>
 80012ca:	e0ef      	b.n	80014ac <__aeabi_ddiv+0x268>
 80012cc:	4970      	ldr	r1, [pc, #448]	; (8001490 <__aeabi_ddiv+0x24c>)
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	58cb      	ldr	r3, [r1, r3]
 80012d2:	469f      	mov	pc, r3
 80012d4:	4b6f      	ldr	r3, [pc, #444]	; (8001494 <__aeabi_ddiv+0x250>)
 80012d6:	4652      	mov	r2, sl
 80012d8:	469c      	mov	ip, r3
 80012da:	4322      	orrs	r2, r4
 80012dc:	44e3      	add	fp, ip
 80012de:	2a00      	cmp	r2, #0
 80012e0:	d000      	beq.n	80012e4 <__aeabi_ddiv+0xa0>
 80012e2:	e095      	b.n	8001410 <__aeabi_ddiv+0x1cc>
 80012e4:	4649      	mov	r1, r9
 80012e6:	2302      	movs	r3, #2
 80012e8:	4319      	orrs	r1, r3
 80012ea:	4689      	mov	r9, r1
 80012ec:	2400      	movs	r4, #0
 80012ee:	2002      	movs	r0, #2
 80012f0:	e7e5      	b.n	80012be <__aeabi_ddiv+0x7a>
 80012f2:	2300      	movs	r3, #0
 80012f4:	2400      	movs	r4, #0
 80012f6:	2500      	movs	r5, #0
 80012f8:	4652      	mov	r2, sl
 80012fa:	051b      	lsls	r3, r3, #20
 80012fc:	4323      	orrs	r3, r4
 80012fe:	07d2      	lsls	r2, r2, #31
 8001300:	4313      	orrs	r3, r2
 8001302:	0028      	movs	r0, r5
 8001304:	0019      	movs	r1, r3
 8001306:	b005      	add	sp, #20
 8001308:	bcf0      	pop	{r4, r5, r6, r7}
 800130a:	46bb      	mov	fp, r7
 800130c:	46b2      	mov	sl, r6
 800130e:	46a9      	mov	r9, r5
 8001310:	46a0      	mov	r8, r4
 8001312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001314:	2400      	movs	r4, #0
 8001316:	2500      	movs	r5, #0
 8001318:	4b5b      	ldr	r3, [pc, #364]	; (8001488 <__aeabi_ddiv+0x244>)
 800131a:	e7ed      	b.n	80012f8 <__aeabi_ddiv+0xb4>
 800131c:	464b      	mov	r3, r9
 800131e:	4323      	orrs	r3, r4
 8001320:	4698      	mov	r8, r3
 8001322:	d100      	bne.n	8001326 <__aeabi_ddiv+0xe2>
 8001324:	e089      	b.n	800143a <__aeabi_ddiv+0x1f6>
 8001326:	2c00      	cmp	r4, #0
 8001328:	d100      	bne.n	800132c <__aeabi_ddiv+0xe8>
 800132a:	e1e0      	b.n	80016ee <__aeabi_ddiv+0x4aa>
 800132c:	0020      	movs	r0, r4
 800132e:	f001 fa61 	bl	80027f4 <__clzsi2>
 8001332:	0001      	movs	r1, r0
 8001334:	0002      	movs	r2, r0
 8001336:	390b      	subs	r1, #11
 8001338:	231d      	movs	r3, #29
 800133a:	1a5b      	subs	r3, r3, r1
 800133c:	4649      	mov	r1, r9
 800133e:	0010      	movs	r0, r2
 8001340:	40d9      	lsrs	r1, r3
 8001342:	3808      	subs	r0, #8
 8001344:	4084      	lsls	r4, r0
 8001346:	000b      	movs	r3, r1
 8001348:	464d      	mov	r5, r9
 800134a:	4323      	orrs	r3, r4
 800134c:	4698      	mov	r8, r3
 800134e:	4085      	lsls	r5, r0
 8001350:	4851      	ldr	r0, [pc, #324]	; (8001498 <__aeabi_ddiv+0x254>)
 8001352:	033c      	lsls	r4, r7, #12
 8001354:	1a83      	subs	r3, r0, r2
 8001356:	469b      	mov	fp, r3
 8001358:	2300      	movs	r3, #0
 800135a:	4699      	mov	r9, r3
 800135c:	9300      	str	r3, [sp, #0]
 800135e:	007b      	lsls	r3, r7, #1
 8001360:	4650      	mov	r0, sl
 8001362:	0b24      	lsrs	r4, r4, #12
 8001364:	0d5b      	lsrs	r3, r3, #21
 8001366:	0fff      	lsrs	r7, r7, #31
 8001368:	2b00      	cmp	r3, #0
 800136a:	d197      	bne.n	800129c <__aeabi_ddiv+0x58>
 800136c:	4652      	mov	r2, sl
 800136e:	4322      	orrs	r2, r4
 8001370:	d055      	beq.n	800141e <__aeabi_ddiv+0x1da>
 8001372:	2c00      	cmp	r4, #0
 8001374:	d100      	bne.n	8001378 <__aeabi_ddiv+0x134>
 8001376:	e1ca      	b.n	800170e <__aeabi_ddiv+0x4ca>
 8001378:	0020      	movs	r0, r4
 800137a:	f001 fa3b 	bl	80027f4 <__clzsi2>
 800137e:	0002      	movs	r2, r0
 8001380:	3a0b      	subs	r2, #11
 8001382:	231d      	movs	r3, #29
 8001384:	0001      	movs	r1, r0
 8001386:	1a9b      	subs	r3, r3, r2
 8001388:	4652      	mov	r2, sl
 800138a:	3908      	subs	r1, #8
 800138c:	40da      	lsrs	r2, r3
 800138e:	408c      	lsls	r4, r1
 8001390:	4314      	orrs	r4, r2
 8001392:	4652      	mov	r2, sl
 8001394:	408a      	lsls	r2, r1
 8001396:	4b41      	ldr	r3, [pc, #260]	; (800149c <__aeabi_ddiv+0x258>)
 8001398:	4458      	add	r0, fp
 800139a:	469b      	mov	fp, r3
 800139c:	4483      	add	fp, r0
 800139e:	2000      	movs	r0, #0
 80013a0:	e78d      	b.n	80012be <__aeabi_ddiv+0x7a>
 80013a2:	464b      	mov	r3, r9
 80013a4:	4323      	orrs	r3, r4
 80013a6:	4698      	mov	r8, r3
 80013a8:	d140      	bne.n	800142c <__aeabi_ddiv+0x1e8>
 80013aa:	2308      	movs	r3, #8
 80013ac:	4699      	mov	r9, r3
 80013ae:	3b06      	subs	r3, #6
 80013b0:	2500      	movs	r5, #0
 80013b2:	4683      	mov	fp, r0
 80013b4:	9300      	str	r3, [sp, #0]
 80013b6:	e769      	b.n	800128c <__aeabi_ddiv+0x48>
 80013b8:	46b2      	mov	sl, r6
 80013ba:	9b00      	ldr	r3, [sp, #0]
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d0a9      	beq.n	8001314 <__aeabi_ddiv+0xd0>
 80013c0:	2b03      	cmp	r3, #3
 80013c2:	d100      	bne.n	80013c6 <__aeabi_ddiv+0x182>
 80013c4:	e211      	b.n	80017ea <__aeabi_ddiv+0x5a6>
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d093      	beq.n	80012f2 <__aeabi_ddiv+0xae>
 80013ca:	4a35      	ldr	r2, [pc, #212]	; (80014a0 <__aeabi_ddiv+0x25c>)
 80013cc:	445a      	add	r2, fp
 80013ce:	2a00      	cmp	r2, #0
 80013d0:	dc00      	bgt.n	80013d4 <__aeabi_ddiv+0x190>
 80013d2:	e13c      	b.n	800164e <__aeabi_ddiv+0x40a>
 80013d4:	076b      	lsls	r3, r5, #29
 80013d6:	d000      	beq.n	80013da <__aeabi_ddiv+0x196>
 80013d8:	e1a7      	b.n	800172a <__aeabi_ddiv+0x4e6>
 80013da:	08ed      	lsrs	r5, r5, #3
 80013dc:	4643      	mov	r3, r8
 80013de:	01db      	lsls	r3, r3, #7
 80013e0:	d506      	bpl.n	80013f0 <__aeabi_ddiv+0x1ac>
 80013e2:	4642      	mov	r2, r8
 80013e4:	4b2f      	ldr	r3, [pc, #188]	; (80014a4 <__aeabi_ddiv+0x260>)
 80013e6:	401a      	ands	r2, r3
 80013e8:	4690      	mov	r8, r2
 80013ea:	2280      	movs	r2, #128	; 0x80
 80013ec:	00d2      	lsls	r2, r2, #3
 80013ee:	445a      	add	r2, fp
 80013f0:	4b2d      	ldr	r3, [pc, #180]	; (80014a8 <__aeabi_ddiv+0x264>)
 80013f2:	429a      	cmp	r2, r3
 80013f4:	dc8e      	bgt.n	8001314 <__aeabi_ddiv+0xd0>
 80013f6:	4643      	mov	r3, r8
 80013f8:	0552      	lsls	r2, r2, #21
 80013fa:	0758      	lsls	r0, r3, #29
 80013fc:	025c      	lsls	r4, r3, #9
 80013fe:	4305      	orrs	r5, r0
 8001400:	0b24      	lsrs	r4, r4, #12
 8001402:	0d53      	lsrs	r3, r2, #21
 8001404:	e778      	b.n	80012f8 <__aeabi_ddiv+0xb4>
 8001406:	46ba      	mov	sl, r7
 8001408:	46a0      	mov	r8, r4
 800140a:	0015      	movs	r5, r2
 800140c:	9000      	str	r0, [sp, #0]
 800140e:	e7d4      	b.n	80013ba <__aeabi_ddiv+0x176>
 8001410:	464a      	mov	r2, r9
 8001412:	2303      	movs	r3, #3
 8001414:	431a      	orrs	r2, r3
 8001416:	4691      	mov	r9, r2
 8001418:	2003      	movs	r0, #3
 800141a:	4652      	mov	r2, sl
 800141c:	e74f      	b.n	80012be <__aeabi_ddiv+0x7a>
 800141e:	4649      	mov	r1, r9
 8001420:	2301      	movs	r3, #1
 8001422:	4319      	orrs	r1, r3
 8001424:	4689      	mov	r9, r1
 8001426:	2400      	movs	r4, #0
 8001428:	2001      	movs	r0, #1
 800142a:	e748      	b.n	80012be <__aeabi_ddiv+0x7a>
 800142c:	230c      	movs	r3, #12
 800142e:	4699      	mov	r9, r3
 8001430:	3b09      	subs	r3, #9
 8001432:	46a0      	mov	r8, r4
 8001434:	4683      	mov	fp, r0
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	e728      	b.n	800128c <__aeabi_ddiv+0x48>
 800143a:	2304      	movs	r3, #4
 800143c:	4699      	mov	r9, r3
 800143e:	2300      	movs	r3, #0
 8001440:	469b      	mov	fp, r3
 8001442:	3301      	adds	r3, #1
 8001444:	2500      	movs	r5, #0
 8001446:	9300      	str	r3, [sp, #0]
 8001448:	e720      	b.n	800128c <__aeabi_ddiv+0x48>
 800144a:	2300      	movs	r3, #0
 800144c:	2480      	movs	r4, #128	; 0x80
 800144e:	469a      	mov	sl, r3
 8001450:	2500      	movs	r5, #0
 8001452:	4b0d      	ldr	r3, [pc, #52]	; (8001488 <__aeabi_ddiv+0x244>)
 8001454:	0324      	lsls	r4, r4, #12
 8001456:	e74f      	b.n	80012f8 <__aeabi_ddiv+0xb4>
 8001458:	2380      	movs	r3, #128	; 0x80
 800145a:	4641      	mov	r1, r8
 800145c:	031b      	lsls	r3, r3, #12
 800145e:	4219      	tst	r1, r3
 8001460:	d008      	beq.n	8001474 <__aeabi_ddiv+0x230>
 8001462:	421c      	tst	r4, r3
 8001464:	d106      	bne.n	8001474 <__aeabi_ddiv+0x230>
 8001466:	431c      	orrs	r4, r3
 8001468:	0324      	lsls	r4, r4, #12
 800146a:	46ba      	mov	sl, r7
 800146c:	0015      	movs	r5, r2
 800146e:	4b06      	ldr	r3, [pc, #24]	; (8001488 <__aeabi_ddiv+0x244>)
 8001470:	0b24      	lsrs	r4, r4, #12
 8001472:	e741      	b.n	80012f8 <__aeabi_ddiv+0xb4>
 8001474:	2480      	movs	r4, #128	; 0x80
 8001476:	4643      	mov	r3, r8
 8001478:	0324      	lsls	r4, r4, #12
 800147a:	431c      	orrs	r4, r3
 800147c:	0324      	lsls	r4, r4, #12
 800147e:	46b2      	mov	sl, r6
 8001480:	4b01      	ldr	r3, [pc, #4]	; (8001488 <__aeabi_ddiv+0x244>)
 8001482:	0b24      	lsrs	r4, r4, #12
 8001484:	e738      	b.n	80012f8 <__aeabi_ddiv+0xb4>
 8001486:	46c0      	nop			; (mov r8, r8)
 8001488:	000007ff 	.word	0x000007ff
 800148c:	fffffc01 	.word	0xfffffc01
 8001490:	08020084 	.word	0x08020084
 8001494:	fffff801 	.word	0xfffff801
 8001498:	fffffc0d 	.word	0xfffffc0d
 800149c:	000003f3 	.word	0x000003f3
 80014a0:	000003ff 	.word	0x000003ff
 80014a4:	feffffff 	.word	0xfeffffff
 80014a8:	000007fe 	.word	0x000007fe
 80014ac:	4544      	cmp	r4, r8
 80014ae:	d200      	bcs.n	80014b2 <__aeabi_ddiv+0x26e>
 80014b0:	e116      	b.n	80016e0 <__aeabi_ddiv+0x49c>
 80014b2:	d100      	bne.n	80014b6 <__aeabi_ddiv+0x272>
 80014b4:	e111      	b.n	80016da <__aeabi_ddiv+0x496>
 80014b6:	2301      	movs	r3, #1
 80014b8:	425b      	negs	r3, r3
 80014ba:	469c      	mov	ip, r3
 80014bc:	002e      	movs	r6, r5
 80014be:	4640      	mov	r0, r8
 80014c0:	2500      	movs	r5, #0
 80014c2:	44e3      	add	fp, ip
 80014c4:	0223      	lsls	r3, r4, #8
 80014c6:	0e14      	lsrs	r4, r2, #24
 80014c8:	431c      	orrs	r4, r3
 80014ca:	0c1b      	lsrs	r3, r3, #16
 80014cc:	4699      	mov	r9, r3
 80014ce:	0423      	lsls	r3, r4, #16
 80014d0:	0c1f      	lsrs	r7, r3, #16
 80014d2:	0212      	lsls	r2, r2, #8
 80014d4:	4649      	mov	r1, r9
 80014d6:	9200      	str	r2, [sp, #0]
 80014d8:	9701      	str	r7, [sp, #4]
 80014da:	f7fe fea3 	bl	8000224 <__aeabi_uidivmod>
 80014de:	0002      	movs	r2, r0
 80014e0:	437a      	muls	r2, r7
 80014e2:	040b      	lsls	r3, r1, #16
 80014e4:	0c31      	lsrs	r1, r6, #16
 80014e6:	4680      	mov	r8, r0
 80014e8:	4319      	orrs	r1, r3
 80014ea:	428a      	cmp	r2, r1
 80014ec:	d90b      	bls.n	8001506 <__aeabi_ddiv+0x2c2>
 80014ee:	2301      	movs	r3, #1
 80014f0:	425b      	negs	r3, r3
 80014f2:	469c      	mov	ip, r3
 80014f4:	1909      	adds	r1, r1, r4
 80014f6:	44e0      	add	r8, ip
 80014f8:	428c      	cmp	r4, r1
 80014fa:	d804      	bhi.n	8001506 <__aeabi_ddiv+0x2c2>
 80014fc:	428a      	cmp	r2, r1
 80014fe:	d902      	bls.n	8001506 <__aeabi_ddiv+0x2c2>
 8001500:	1e83      	subs	r3, r0, #2
 8001502:	4698      	mov	r8, r3
 8001504:	1909      	adds	r1, r1, r4
 8001506:	1a88      	subs	r0, r1, r2
 8001508:	4649      	mov	r1, r9
 800150a:	f7fe fe8b 	bl	8000224 <__aeabi_uidivmod>
 800150e:	0409      	lsls	r1, r1, #16
 8001510:	468c      	mov	ip, r1
 8001512:	0431      	lsls	r1, r6, #16
 8001514:	4666      	mov	r6, ip
 8001516:	9a01      	ldr	r2, [sp, #4]
 8001518:	0c09      	lsrs	r1, r1, #16
 800151a:	4342      	muls	r2, r0
 800151c:	0003      	movs	r3, r0
 800151e:	4331      	orrs	r1, r6
 8001520:	428a      	cmp	r2, r1
 8001522:	d904      	bls.n	800152e <__aeabi_ddiv+0x2ea>
 8001524:	1909      	adds	r1, r1, r4
 8001526:	3b01      	subs	r3, #1
 8001528:	428c      	cmp	r4, r1
 800152a:	d800      	bhi.n	800152e <__aeabi_ddiv+0x2ea>
 800152c:	e111      	b.n	8001752 <__aeabi_ddiv+0x50e>
 800152e:	1a89      	subs	r1, r1, r2
 8001530:	4642      	mov	r2, r8
 8001532:	9e00      	ldr	r6, [sp, #0]
 8001534:	0412      	lsls	r2, r2, #16
 8001536:	431a      	orrs	r2, r3
 8001538:	0c33      	lsrs	r3, r6, #16
 800153a:	001f      	movs	r7, r3
 800153c:	0c10      	lsrs	r0, r2, #16
 800153e:	4690      	mov	r8, r2
 8001540:	9302      	str	r3, [sp, #8]
 8001542:	0413      	lsls	r3, r2, #16
 8001544:	0432      	lsls	r2, r6, #16
 8001546:	0c16      	lsrs	r6, r2, #16
 8001548:	0032      	movs	r2, r6
 800154a:	0c1b      	lsrs	r3, r3, #16
 800154c:	435a      	muls	r2, r3
 800154e:	9603      	str	r6, [sp, #12]
 8001550:	437b      	muls	r3, r7
 8001552:	4346      	muls	r6, r0
 8001554:	4378      	muls	r0, r7
 8001556:	0c17      	lsrs	r7, r2, #16
 8001558:	46bc      	mov	ip, r7
 800155a:	199b      	adds	r3, r3, r6
 800155c:	4463      	add	r3, ip
 800155e:	429e      	cmp	r6, r3
 8001560:	d903      	bls.n	800156a <__aeabi_ddiv+0x326>
 8001562:	2680      	movs	r6, #128	; 0x80
 8001564:	0276      	lsls	r6, r6, #9
 8001566:	46b4      	mov	ip, r6
 8001568:	4460      	add	r0, ip
 800156a:	0c1e      	lsrs	r6, r3, #16
 800156c:	1830      	adds	r0, r6, r0
 800156e:	0416      	lsls	r6, r2, #16
 8001570:	041b      	lsls	r3, r3, #16
 8001572:	0c36      	lsrs	r6, r6, #16
 8001574:	199e      	adds	r6, r3, r6
 8001576:	4281      	cmp	r1, r0
 8001578:	d200      	bcs.n	800157c <__aeabi_ddiv+0x338>
 800157a:	e09c      	b.n	80016b6 <__aeabi_ddiv+0x472>
 800157c:	d100      	bne.n	8001580 <__aeabi_ddiv+0x33c>
 800157e:	e097      	b.n	80016b0 <__aeabi_ddiv+0x46c>
 8001580:	1bae      	subs	r6, r5, r6
 8001582:	1a09      	subs	r1, r1, r0
 8001584:	42b5      	cmp	r5, r6
 8001586:	4180      	sbcs	r0, r0
 8001588:	4240      	negs	r0, r0
 800158a:	1a08      	subs	r0, r1, r0
 800158c:	4284      	cmp	r4, r0
 800158e:	d100      	bne.n	8001592 <__aeabi_ddiv+0x34e>
 8001590:	e111      	b.n	80017b6 <__aeabi_ddiv+0x572>
 8001592:	4649      	mov	r1, r9
 8001594:	f7fe fe46 	bl	8000224 <__aeabi_uidivmod>
 8001598:	9a01      	ldr	r2, [sp, #4]
 800159a:	040b      	lsls	r3, r1, #16
 800159c:	4342      	muls	r2, r0
 800159e:	0c31      	lsrs	r1, r6, #16
 80015a0:	0005      	movs	r5, r0
 80015a2:	4319      	orrs	r1, r3
 80015a4:	428a      	cmp	r2, r1
 80015a6:	d907      	bls.n	80015b8 <__aeabi_ddiv+0x374>
 80015a8:	1909      	adds	r1, r1, r4
 80015aa:	3d01      	subs	r5, #1
 80015ac:	428c      	cmp	r4, r1
 80015ae:	d803      	bhi.n	80015b8 <__aeabi_ddiv+0x374>
 80015b0:	428a      	cmp	r2, r1
 80015b2:	d901      	bls.n	80015b8 <__aeabi_ddiv+0x374>
 80015b4:	1e85      	subs	r5, r0, #2
 80015b6:	1909      	adds	r1, r1, r4
 80015b8:	1a88      	subs	r0, r1, r2
 80015ba:	4649      	mov	r1, r9
 80015bc:	f7fe fe32 	bl	8000224 <__aeabi_uidivmod>
 80015c0:	0409      	lsls	r1, r1, #16
 80015c2:	468c      	mov	ip, r1
 80015c4:	0431      	lsls	r1, r6, #16
 80015c6:	4666      	mov	r6, ip
 80015c8:	9a01      	ldr	r2, [sp, #4]
 80015ca:	0c09      	lsrs	r1, r1, #16
 80015cc:	4342      	muls	r2, r0
 80015ce:	0003      	movs	r3, r0
 80015d0:	4331      	orrs	r1, r6
 80015d2:	428a      	cmp	r2, r1
 80015d4:	d907      	bls.n	80015e6 <__aeabi_ddiv+0x3a2>
 80015d6:	1909      	adds	r1, r1, r4
 80015d8:	3b01      	subs	r3, #1
 80015da:	428c      	cmp	r4, r1
 80015dc:	d803      	bhi.n	80015e6 <__aeabi_ddiv+0x3a2>
 80015de:	428a      	cmp	r2, r1
 80015e0:	d901      	bls.n	80015e6 <__aeabi_ddiv+0x3a2>
 80015e2:	1e83      	subs	r3, r0, #2
 80015e4:	1909      	adds	r1, r1, r4
 80015e6:	9e03      	ldr	r6, [sp, #12]
 80015e8:	1a89      	subs	r1, r1, r2
 80015ea:	0032      	movs	r2, r6
 80015ec:	042d      	lsls	r5, r5, #16
 80015ee:	431d      	orrs	r5, r3
 80015f0:	9f02      	ldr	r7, [sp, #8]
 80015f2:	042b      	lsls	r3, r5, #16
 80015f4:	0c1b      	lsrs	r3, r3, #16
 80015f6:	435a      	muls	r2, r3
 80015f8:	437b      	muls	r3, r7
 80015fa:	469c      	mov	ip, r3
 80015fc:	0c28      	lsrs	r0, r5, #16
 80015fe:	4346      	muls	r6, r0
 8001600:	0c13      	lsrs	r3, r2, #16
 8001602:	44b4      	add	ip, r6
 8001604:	4463      	add	r3, ip
 8001606:	4378      	muls	r0, r7
 8001608:	429e      	cmp	r6, r3
 800160a:	d903      	bls.n	8001614 <__aeabi_ddiv+0x3d0>
 800160c:	2680      	movs	r6, #128	; 0x80
 800160e:	0276      	lsls	r6, r6, #9
 8001610:	46b4      	mov	ip, r6
 8001612:	4460      	add	r0, ip
 8001614:	0c1e      	lsrs	r6, r3, #16
 8001616:	0412      	lsls	r2, r2, #16
 8001618:	041b      	lsls	r3, r3, #16
 800161a:	0c12      	lsrs	r2, r2, #16
 800161c:	1830      	adds	r0, r6, r0
 800161e:	189b      	adds	r3, r3, r2
 8001620:	4281      	cmp	r1, r0
 8001622:	d306      	bcc.n	8001632 <__aeabi_ddiv+0x3ee>
 8001624:	d002      	beq.n	800162c <__aeabi_ddiv+0x3e8>
 8001626:	2301      	movs	r3, #1
 8001628:	431d      	orrs	r5, r3
 800162a:	e6ce      	b.n	80013ca <__aeabi_ddiv+0x186>
 800162c:	2b00      	cmp	r3, #0
 800162e:	d100      	bne.n	8001632 <__aeabi_ddiv+0x3ee>
 8001630:	e6cb      	b.n	80013ca <__aeabi_ddiv+0x186>
 8001632:	1861      	adds	r1, r4, r1
 8001634:	1e6e      	subs	r6, r5, #1
 8001636:	42a1      	cmp	r1, r4
 8001638:	d200      	bcs.n	800163c <__aeabi_ddiv+0x3f8>
 800163a:	e0a4      	b.n	8001786 <__aeabi_ddiv+0x542>
 800163c:	4281      	cmp	r1, r0
 800163e:	d200      	bcs.n	8001642 <__aeabi_ddiv+0x3fe>
 8001640:	e0c9      	b.n	80017d6 <__aeabi_ddiv+0x592>
 8001642:	d100      	bne.n	8001646 <__aeabi_ddiv+0x402>
 8001644:	e0d9      	b.n	80017fa <__aeabi_ddiv+0x5b6>
 8001646:	0035      	movs	r5, r6
 8001648:	e7ed      	b.n	8001626 <__aeabi_ddiv+0x3e2>
 800164a:	2501      	movs	r5, #1
 800164c:	426d      	negs	r5, r5
 800164e:	2101      	movs	r1, #1
 8001650:	1a89      	subs	r1, r1, r2
 8001652:	2938      	cmp	r1, #56	; 0x38
 8001654:	dd00      	ble.n	8001658 <__aeabi_ddiv+0x414>
 8001656:	e64c      	b.n	80012f2 <__aeabi_ddiv+0xae>
 8001658:	291f      	cmp	r1, #31
 800165a:	dc00      	bgt.n	800165e <__aeabi_ddiv+0x41a>
 800165c:	e07f      	b.n	800175e <__aeabi_ddiv+0x51a>
 800165e:	231f      	movs	r3, #31
 8001660:	425b      	negs	r3, r3
 8001662:	1a9a      	subs	r2, r3, r2
 8001664:	4643      	mov	r3, r8
 8001666:	40d3      	lsrs	r3, r2
 8001668:	2920      	cmp	r1, #32
 800166a:	d004      	beq.n	8001676 <__aeabi_ddiv+0x432>
 800166c:	4644      	mov	r4, r8
 800166e:	4a65      	ldr	r2, [pc, #404]	; (8001804 <__aeabi_ddiv+0x5c0>)
 8001670:	445a      	add	r2, fp
 8001672:	4094      	lsls	r4, r2
 8001674:	4325      	orrs	r5, r4
 8001676:	1e6a      	subs	r2, r5, #1
 8001678:	4195      	sbcs	r5, r2
 800167a:	2207      	movs	r2, #7
 800167c:	432b      	orrs	r3, r5
 800167e:	0015      	movs	r5, r2
 8001680:	2400      	movs	r4, #0
 8001682:	401d      	ands	r5, r3
 8001684:	421a      	tst	r2, r3
 8001686:	d100      	bne.n	800168a <__aeabi_ddiv+0x446>
 8001688:	e0a1      	b.n	80017ce <__aeabi_ddiv+0x58a>
 800168a:	220f      	movs	r2, #15
 800168c:	2400      	movs	r4, #0
 800168e:	401a      	ands	r2, r3
 8001690:	2a04      	cmp	r2, #4
 8001692:	d100      	bne.n	8001696 <__aeabi_ddiv+0x452>
 8001694:	e098      	b.n	80017c8 <__aeabi_ddiv+0x584>
 8001696:	1d1a      	adds	r2, r3, #4
 8001698:	429a      	cmp	r2, r3
 800169a:	419b      	sbcs	r3, r3
 800169c:	425b      	negs	r3, r3
 800169e:	18e4      	adds	r4, r4, r3
 80016a0:	0013      	movs	r3, r2
 80016a2:	0222      	lsls	r2, r4, #8
 80016a4:	d400      	bmi.n	80016a8 <__aeabi_ddiv+0x464>
 80016a6:	e08f      	b.n	80017c8 <__aeabi_ddiv+0x584>
 80016a8:	2301      	movs	r3, #1
 80016aa:	2400      	movs	r4, #0
 80016ac:	2500      	movs	r5, #0
 80016ae:	e623      	b.n	80012f8 <__aeabi_ddiv+0xb4>
 80016b0:	42b5      	cmp	r5, r6
 80016b2:	d300      	bcc.n	80016b6 <__aeabi_ddiv+0x472>
 80016b4:	e764      	b.n	8001580 <__aeabi_ddiv+0x33c>
 80016b6:	4643      	mov	r3, r8
 80016b8:	1e5a      	subs	r2, r3, #1
 80016ba:	9b00      	ldr	r3, [sp, #0]
 80016bc:	469c      	mov	ip, r3
 80016be:	4465      	add	r5, ip
 80016c0:	001f      	movs	r7, r3
 80016c2:	429d      	cmp	r5, r3
 80016c4:	419b      	sbcs	r3, r3
 80016c6:	425b      	negs	r3, r3
 80016c8:	191b      	adds	r3, r3, r4
 80016ca:	18c9      	adds	r1, r1, r3
 80016cc:	428c      	cmp	r4, r1
 80016ce:	d23a      	bcs.n	8001746 <__aeabi_ddiv+0x502>
 80016d0:	4288      	cmp	r0, r1
 80016d2:	d863      	bhi.n	800179c <__aeabi_ddiv+0x558>
 80016d4:	d060      	beq.n	8001798 <__aeabi_ddiv+0x554>
 80016d6:	4690      	mov	r8, r2
 80016d8:	e752      	b.n	8001580 <__aeabi_ddiv+0x33c>
 80016da:	42aa      	cmp	r2, r5
 80016dc:	d900      	bls.n	80016e0 <__aeabi_ddiv+0x49c>
 80016de:	e6ea      	b.n	80014b6 <__aeabi_ddiv+0x272>
 80016e0:	4643      	mov	r3, r8
 80016e2:	07de      	lsls	r6, r3, #31
 80016e4:	0858      	lsrs	r0, r3, #1
 80016e6:	086b      	lsrs	r3, r5, #1
 80016e8:	431e      	orrs	r6, r3
 80016ea:	07ed      	lsls	r5, r5, #31
 80016ec:	e6ea      	b.n	80014c4 <__aeabi_ddiv+0x280>
 80016ee:	4648      	mov	r0, r9
 80016f0:	f001 f880 	bl	80027f4 <__clzsi2>
 80016f4:	0001      	movs	r1, r0
 80016f6:	0002      	movs	r2, r0
 80016f8:	3115      	adds	r1, #21
 80016fa:	3220      	adds	r2, #32
 80016fc:	291c      	cmp	r1, #28
 80016fe:	dc00      	bgt.n	8001702 <__aeabi_ddiv+0x4be>
 8001700:	e61a      	b.n	8001338 <__aeabi_ddiv+0xf4>
 8001702:	464b      	mov	r3, r9
 8001704:	3808      	subs	r0, #8
 8001706:	4083      	lsls	r3, r0
 8001708:	2500      	movs	r5, #0
 800170a:	4698      	mov	r8, r3
 800170c:	e620      	b.n	8001350 <__aeabi_ddiv+0x10c>
 800170e:	f001 f871 	bl	80027f4 <__clzsi2>
 8001712:	0003      	movs	r3, r0
 8001714:	001a      	movs	r2, r3
 8001716:	3215      	adds	r2, #21
 8001718:	3020      	adds	r0, #32
 800171a:	2a1c      	cmp	r2, #28
 800171c:	dc00      	bgt.n	8001720 <__aeabi_ddiv+0x4dc>
 800171e:	e630      	b.n	8001382 <__aeabi_ddiv+0x13e>
 8001720:	4654      	mov	r4, sl
 8001722:	3b08      	subs	r3, #8
 8001724:	2200      	movs	r2, #0
 8001726:	409c      	lsls	r4, r3
 8001728:	e635      	b.n	8001396 <__aeabi_ddiv+0x152>
 800172a:	230f      	movs	r3, #15
 800172c:	402b      	ands	r3, r5
 800172e:	2b04      	cmp	r3, #4
 8001730:	d100      	bne.n	8001734 <__aeabi_ddiv+0x4f0>
 8001732:	e652      	b.n	80013da <__aeabi_ddiv+0x196>
 8001734:	2305      	movs	r3, #5
 8001736:	425b      	negs	r3, r3
 8001738:	42ab      	cmp	r3, r5
 800173a:	419b      	sbcs	r3, r3
 800173c:	3504      	adds	r5, #4
 800173e:	425b      	negs	r3, r3
 8001740:	08ed      	lsrs	r5, r5, #3
 8001742:	4498      	add	r8, r3
 8001744:	e64a      	b.n	80013dc <__aeabi_ddiv+0x198>
 8001746:	428c      	cmp	r4, r1
 8001748:	d1c5      	bne.n	80016d6 <__aeabi_ddiv+0x492>
 800174a:	42af      	cmp	r7, r5
 800174c:	d9c0      	bls.n	80016d0 <__aeabi_ddiv+0x48c>
 800174e:	4690      	mov	r8, r2
 8001750:	e716      	b.n	8001580 <__aeabi_ddiv+0x33c>
 8001752:	428a      	cmp	r2, r1
 8001754:	d800      	bhi.n	8001758 <__aeabi_ddiv+0x514>
 8001756:	e6ea      	b.n	800152e <__aeabi_ddiv+0x2ea>
 8001758:	1e83      	subs	r3, r0, #2
 800175a:	1909      	adds	r1, r1, r4
 800175c:	e6e7      	b.n	800152e <__aeabi_ddiv+0x2ea>
 800175e:	4a2a      	ldr	r2, [pc, #168]	; (8001808 <__aeabi_ddiv+0x5c4>)
 8001760:	0028      	movs	r0, r5
 8001762:	445a      	add	r2, fp
 8001764:	4643      	mov	r3, r8
 8001766:	4095      	lsls	r5, r2
 8001768:	4093      	lsls	r3, r2
 800176a:	40c8      	lsrs	r0, r1
 800176c:	1e6a      	subs	r2, r5, #1
 800176e:	4195      	sbcs	r5, r2
 8001770:	4644      	mov	r4, r8
 8001772:	4303      	orrs	r3, r0
 8001774:	432b      	orrs	r3, r5
 8001776:	40cc      	lsrs	r4, r1
 8001778:	075a      	lsls	r2, r3, #29
 800177a:	d092      	beq.n	80016a2 <__aeabi_ddiv+0x45e>
 800177c:	220f      	movs	r2, #15
 800177e:	401a      	ands	r2, r3
 8001780:	2a04      	cmp	r2, #4
 8001782:	d188      	bne.n	8001696 <__aeabi_ddiv+0x452>
 8001784:	e78d      	b.n	80016a2 <__aeabi_ddiv+0x45e>
 8001786:	0035      	movs	r5, r6
 8001788:	4281      	cmp	r1, r0
 800178a:	d000      	beq.n	800178e <__aeabi_ddiv+0x54a>
 800178c:	e74b      	b.n	8001626 <__aeabi_ddiv+0x3e2>
 800178e:	9a00      	ldr	r2, [sp, #0]
 8001790:	4293      	cmp	r3, r2
 8001792:	d000      	beq.n	8001796 <__aeabi_ddiv+0x552>
 8001794:	e747      	b.n	8001626 <__aeabi_ddiv+0x3e2>
 8001796:	e618      	b.n	80013ca <__aeabi_ddiv+0x186>
 8001798:	42ae      	cmp	r6, r5
 800179a:	d99c      	bls.n	80016d6 <__aeabi_ddiv+0x492>
 800179c:	2302      	movs	r3, #2
 800179e:	425b      	negs	r3, r3
 80017a0:	469c      	mov	ip, r3
 80017a2:	9b00      	ldr	r3, [sp, #0]
 80017a4:	44e0      	add	r8, ip
 80017a6:	469c      	mov	ip, r3
 80017a8:	4465      	add	r5, ip
 80017aa:	429d      	cmp	r5, r3
 80017ac:	419b      	sbcs	r3, r3
 80017ae:	425b      	negs	r3, r3
 80017b0:	191b      	adds	r3, r3, r4
 80017b2:	18c9      	adds	r1, r1, r3
 80017b4:	e6e4      	b.n	8001580 <__aeabi_ddiv+0x33c>
 80017b6:	4a15      	ldr	r2, [pc, #84]	; (800180c <__aeabi_ddiv+0x5c8>)
 80017b8:	445a      	add	r2, fp
 80017ba:	2a00      	cmp	r2, #0
 80017bc:	dc00      	bgt.n	80017c0 <__aeabi_ddiv+0x57c>
 80017be:	e744      	b.n	800164a <__aeabi_ddiv+0x406>
 80017c0:	2301      	movs	r3, #1
 80017c2:	2500      	movs	r5, #0
 80017c4:	4498      	add	r8, r3
 80017c6:	e609      	b.n	80013dc <__aeabi_ddiv+0x198>
 80017c8:	0765      	lsls	r5, r4, #29
 80017ca:	0264      	lsls	r4, r4, #9
 80017cc:	0b24      	lsrs	r4, r4, #12
 80017ce:	08db      	lsrs	r3, r3, #3
 80017d0:	431d      	orrs	r5, r3
 80017d2:	2300      	movs	r3, #0
 80017d4:	e590      	b.n	80012f8 <__aeabi_ddiv+0xb4>
 80017d6:	9e00      	ldr	r6, [sp, #0]
 80017d8:	3d02      	subs	r5, #2
 80017da:	0072      	lsls	r2, r6, #1
 80017dc:	42b2      	cmp	r2, r6
 80017de:	41bf      	sbcs	r7, r7
 80017e0:	427f      	negs	r7, r7
 80017e2:	193c      	adds	r4, r7, r4
 80017e4:	1909      	adds	r1, r1, r4
 80017e6:	9200      	str	r2, [sp, #0]
 80017e8:	e7ce      	b.n	8001788 <__aeabi_ddiv+0x544>
 80017ea:	2480      	movs	r4, #128	; 0x80
 80017ec:	4643      	mov	r3, r8
 80017ee:	0324      	lsls	r4, r4, #12
 80017f0:	431c      	orrs	r4, r3
 80017f2:	0324      	lsls	r4, r4, #12
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <__aeabi_ddiv+0x5cc>)
 80017f6:	0b24      	lsrs	r4, r4, #12
 80017f8:	e57e      	b.n	80012f8 <__aeabi_ddiv+0xb4>
 80017fa:	9a00      	ldr	r2, [sp, #0]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d3ea      	bcc.n	80017d6 <__aeabi_ddiv+0x592>
 8001800:	0035      	movs	r5, r6
 8001802:	e7c4      	b.n	800178e <__aeabi_ddiv+0x54a>
 8001804:	0000043e 	.word	0x0000043e
 8001808:	0000041e 	.word	0x0000041e
 800180c:	000003ff 	.word	0x000003ff
 8001810:	000007ff 	.word	0x000007ff

08001814 <__eqdf2>:
 8001814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001816:	464f      	mov	r7, r9
 8001818:	4646      	mov	r6, r8
 800181a:	46d6      	mov	lr, sl
 800181c:	4694      	mov	ip, r2
 800181e:	4691      	mov	r9, r2
 8001820:	031a      	lsls	r2, r3, #12
 8001822:	0b12      	lsrs	r2, r2, #12
 8001824:	4d18      	ldr	r5, [pc, #96]	; (8001888 <__eqdf2+0x74>)
 8001826:	b5c0      	push	{r6, r7, lr}
 8001828:	004c      	lsls	r4, r1, #1
 800182a:	030f      	lsls	r7, r1, #12
 800182c:	4692      	mov	sl, r2
 800182e:	005a      	lsls	r2, r3, #1
 8001830:	0006      	movs	r6, r0
 8001832:	4680      	mov	r8, r0
 8001834:	0b3f      	lsrs	r7, r7, #12
 8001836:	2001      	movs	r0, #1
 8001838:	0d64      	lsrs	r4, r4, #21
 800183a:	0fc9      	lsrs	r1, r1, #31
 800183c:	0d52      	lsrs	r2, r2, #21
 800183e:	0fdb      	lsrs	r3, r3, #31
 8001840:	42ac      	cmp	r4, r5
 8001842:	d00a      	beq.n	800185a <__eqdf2+0x46>
 8001844:	42aa      	cmp	r2, r5
 8001846:	d003      	beq.n	8001850 <__eqdf2+0x3c>
 8001848:	4294      	cmp	r4, r2
 800184a:	d101      	bne.n	8001850 <__eqdf2+0x3c>
 800184c:	4557      	cmp	r7, sl
 800184e:	d00d      	beq.n	800186c <__eqdf2+0x58>
 8001850:	bce0      	pop	{r5, r6, r7}
 8001852:	46ba      	mov	sl, r7
 8001854:	46b1      	mov	r9, r6
 8001856:	46a8      	mov	r8, r5
 8001858:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800185a:	003d      	movs	r5, r7
 800185c:	4335      	orrs	r5, r6
 800185e:	d1f7      	bne.n	8001850 <__eqdf2+0x3c>
 8001860:	42a2      	cmp	r2, r4
 8001862:	d1f5      	bne.n	8001850 <__eqdf2+0x3c>
 8001864:	4652      	mov	r2, sl
 8001866:	4665      	mov	r5, ip
 8001868:	432a      	orrs	r2, r5
 800186a:	d1f1      	bne.n	8001850 <__eqdf2+0x3c>
 800186c:	2001      	movs	r0, #1
 800186e:	45c8      	cmp	r8, r9
 8001870:	d1ee      	bne.n	8001850 <__eqdf2+0x3c>
 8001872:	4299      	cmp	r1, r3
 8001874:	d006      	beq.n	8001884 <__eqdf2+0x70>
 8001876:	2c00      	cmp	r4, #0
 8001878:	d1ea      	bne.n	8001850 <__eqdf2+0x3c>
 800187a:	433e      	orrs	r6, r7
 800187c:	0030      	movs	r0, r6
 800187e:	1e46      	subs	r6, r0, #1
 8001880:	41b0      	sbcs	r0, r6
 8001882:	e7e5      	b.n	8001850 <__eqdf2+0x3c>
 8001884:	2000      	movs	r0, #0
 8001886:	e7e3      	b.n	8001850 <__eqdf2+0x3c>
 8001888:	000007ff 	.word	0x000007ff

0800188c <__gedf2>:
 800188c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800188e:	464e      	mov	r6, r9
 8001890:	4645      	mov	r5, r8
 8001892:	4657      	mov	r7, sl
 8001894:	46de      	mov	lr, fp
 8001896:	0004      	movs	r4, r0
 8001898:	0018      	movs	r0, r3
 800189a:	b5e0      	push	{r5, r6, r7, lr}
 800189c:	0016      	movs	r6, r2
 800189e:	031b      	lsls	r3, r3, #12
 80018a0:	0b1b      	lsrs	r3, r3, #12
 80018a2:	4d32      	ldr	r5, [pc, #200]	; (800196c <__gedf2+0xe0>)
 80018a4:	030f      	lsls	r7, r1, #12
 80018a6:	004a      	lsls	r2, r1, #1
 80018a8:	4699      	mov	r9, r3
 80018aa:	0043      	lsls	r3, r0, #1
 80018ac:	46a4      	mov	ip, r4
 80018ae:	46b0      	mov	r8, r6
 80018b0:	0b3f      	lsrs	r7, r7, #12
 80018b2:	0d52      	lsrs	r2, r2, #21
 80018b4:	0fc9      	lsrs	r1, r1, #31
 80018b6:	0d5b      	lsrs	r3, r3, #21
 80018b8:	0fc0      	lsrs	r0, r0, #31
 80018ba:	42aa      	cmp	r2, r5
 80018bc:	d029      	beq.n	8001912 <__gedf2+0x86>
 80018be:	42ab      	cmp	r3, r5
 80018c0:	d018      	beq.n	80018f4 <__gedf2+0x68>
 80018c2:	2a00      	cmp	r2, #0
 80018c4:	d12a      	bne.n	800191c <__gedf2+0x90>
 80018c6:	433c      	orrs	r4, r7
 80018c8:	46a3      	mov	fp, r4
 80018ca:	4265      	negs	r5, r4
 80018cc:	4165      	adcs	r5, r4
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d102      	bne.n	80018d8 <__gedf2+0x4c>
 80018d2:	464c      	mov	r4, r9
 80018d4:	4326      	orrs	r6, r4
 80018d6:	d027      	beq.n	8001928 <__gedf2+0x9c>
 80018d8:	2d00      	cmp	r5, #0
 80018da:	d115      	bne.n	8001908 <__gedf2+0x7c>
 80018dc:	4281      	cmp	r1, r0
 80018de:	d028      	beq.n	8001932 <__gedf2+0xa6>
 80018e0:	2002      	movs	r0, #2
 80018e2:	3901      	subs	r1, #1
 80018e4:	4008      	ands	r0, r1
 80018e6:	3801      	subs	r0, #1
 80018e8:	bcf0      	pop	{r4, r5, r6, r7}
 80018ea:	46bb      	mov	fp, r7
 80018ec:	46b2      	mov	sl, r6
 80018ee:	46a9      	mov	r9, r5
 80018f0:	46a0      	mov	r8, r4
 80018f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018f4:	464d      	mov	r5, r9
 80018f6:	432e      	orrs	r6, r5
 80018f8:	d12f      	bne.n	800195a <__gedf2+0xce>
 80018fa:	2a00      	cmp	r2, #0
 80018fc:	d1ee      	bne.n	80018dc <__gedf2+0x50>
 80018fe:	433c      	orrs	r4, r7
 8001900:	4265      	negs	r5, r4
 8001902:	4165      	adcs	r5, r4
 8001904:	2d00      	cmp	r5, #0
 8001906:	d0e9      	beq.n	80018dc <__gedf2+0x50>
 8001908:	2800      	cmp	r0, #0
 800190a:	d1ed      	bne.n	80018e8 <__gedf2+0x5c>
 800190c:	2001      	movs	r0, #1
 800190e:	4240      	negs	r0, r0
 8001910:	e7ea      	b.n	80018e8 <__gedf2+0x5c>
 8001912:	003d      	movs	r5, r7
 8001914:	4325      	orrs	r5, r4
 8001916:	d120      	bne.n	800195a <__gedf2+0xce>
 8001918:	4293      	cmp	r3, r2
 800191a:	d0eb      	beq.n	80018f4 <__gedf2+0x68>
 800191c:	2b00      	cmp	r3, #0
 800191e:	d1dd      	bne.n	80018dc <__gedf2+0x50>
 8001920:	464c      	mov	r4, r9
 8001922:	4326      	orrs	r6, r4
 8001924:	d1da      	bne.n	80018dc <__gedf2+0x50>
 8001926:	e7db      	b.n	80018e0 <__gedf2+0x54>
 8001928:	465b      	mov	r3, fp
 800192a:	2000      	movs	r0, #0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d0db      	beq.n	80018e8 <__gedf2+0x5c>
 8001930:	e7d6      	b.n	80018e0 <__gedf2+0x54>
 8001932:	429a      	cmp	r2, r3
 8001934:	dc0a      	bgt.n	800194c <__gedf2+0xc0>
 8001936:	dbe7      	blt.n	8001908 <__gedf2+0x7c>
 8001938:	454f      	cmp	r7, r9
 800193a:	d8d1      	bhi.n	80018e0 <__gedf2+0x54>
 800193c:	d010      	beq.n	8001960 <__gedf2+0xd4>
 800193e:	2000      	movs	r0, #0
 8001940:	454f      	cmp	r7, r9
 8001942:	d2d1      	bcs.n	80018e8 <__gedf2+0x5c>
 8001944:	2900      	cmp	r1, #0
 8001946:	d0e1      	beq.n	800190c <__gedf2+0x80>
 8001948:	0008      	movs	r0, r1
 800194a:	e7cd      	b.n	80018e8 <__gedf2+0x5c>
 800194c:	4243      	negs	r3, r0
 800194e:	4158      	adcs	r0, r3
 8001950:	2302      	movs	r3, #2
 8001952:	4240      	negs	r0, r0
 8001954:	4018      	ands	r0, r3
 8001956:	3801      	subs	r0, #1
 8001958:	e7c6      	b.n	80018e8 <__gedf2+0x5c>
 800195a:	2002      	movs	r0, #2
 800195c:	4240      	negs	r0, r0
 800195e:	e7c3      	b.n	80018e8 <__gedf2+0x5c>
 8001960:	45c4      	cmp	ip, r8
 8001962:	d8bd      	bhi.n	80018e0 <__gedf2+0x54>
 8001964:	2000      	movs	r0, #0
 8001966:	45c4      	cmp	ip, r8
 8001968:	d2be      	bcs.n	80018e8 <__gedf2+0x5c>
 800196a:	e7eb      	b.n	8001944 <__gedf2+0xb8>
 800196c:	000007ff 	.word	0x000007ff

08001970 <__ledf2>:
 8001970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001972:	464e      	mov	r6, r9
 8001974:	4645      	mov	r5, r8
 8001976:	4657      	mov	r7, sl
 8001978:	46de      	mov	lr, fp
 800197a:	0004      	movs	r4, r0
 800197c:	0018      	movs	r0, r3
 800197e:	b5e0      	push	{r5, r6, r7, lr}
 8001980:	0016      	movs	r6, r2
 8001982:	031b      	lsls	r3, r3, #12
 8001984:	0b1b      	lsrs	r3, r3, #12
 8001986:	4d31      	ldr	r5, [pc, #196]	; (8001a4c <__ledf2+0xdc>)
 8001988:	030f      	lsls	r7, r1, #12
 800198a:	004a      	lsls	r2, r1, #1
 800198c:	4699      	mov	r9, r3
 800198e:	0043      	lsls	r3, r0, #1
 8001990:	46a4      	mov	ip, r4
 8001992:	46b0      	mov	r8, r6
 8001994:	0b3f      	lsrs	r7, r7, #12
 8001996:	0d52      	lsrs	r2, r2, #21
 8001998:	0fc9      	lsrs	r1, r1, #31
 800199a:	0d5b      	lsrs	r3, r3, #21
 800199c:	0fc0      	lsrs	r0, r0, #31
 800199e:	42aa      	cmp	r2, r5
 80019a0:	d011      	beq.n	80019c6 <__ledf2+0x56>
 80019a2:	42ab      	cmp	r3, r5
 80019a4:	d014      	beq.n	80019d0 <__ledf2+0x60>
 80019a6:	2a00      	cmp	r2, #0
 80019a8:	d12f      	bne.n	8001a0a <__ledf2+0x9a>
 80019aa:	433c      	orrs	r4, r7
 80019ac:	46a3      	mov	fp, r4
 80019ae:	4265      	negs	r5, r4
 80019b0:	4165      	adcs	r5, r4
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d114      	bne.n	80019e0 <__ledf2+0x70>
 80019b6:	464c      	mov	r4, r9
 80019b8:	4326      	orrs	r6, r4
 80019ba:	d111      	bne.n	80019e0 <__ledf2+0x70>
 80019bc:	465b      	mov	r3, fp
 80019be:	2000      	movs	r0, #0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d017      	beq.n	80019f4 <__ledf2+0x84>
 80019c4:	e010      	b.n	80019e8 <__ledf2+0x78>
 80019c6:	003d      	movs	r5, r7
 80019c8:	4325      	orrs	r5, r4
 80019ca:	d112      	bne.n	80019f2 <__ledf2+0x82>
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d11c      	bne.n	8001a0a <__ledf2+0x9a>
 80019d0:	464d      	mov	r5, r9
 80019d2:	432e      	orrs	r6, r5
 80019d4:	d10d      	bne.n	80019f2 <__ledf2+0x82>
 80019d6:	2a00      	cmp	r2, #0
 80019d8:	d104      	bne.n	80019e4 <__ledf2+0x74>
 80019da:	433c      	orrs	r4, r7
 80019dc:	4265      	negs	r5, r4
 80019de:	4165      	adcs	r5, r4
 80019e0:	2d00      	cmp	r5, #0
 80019e2:	d10d      	bne.n	8001a00 <__ledf2+0x90>
 80019e4:	4281      	cmp	r1, r0
 80019e6:	d016      	beq.n	8001a16 <__ledf2+0xa6>
 80019e8:	2002      	movs	r0, #2
 80019ea:	3901      	subs	r1, #1
 80019ec:	4008      	ands	r0, r1
 80019ee:	3801      	subs	r0, #1
 80019f0:	e000      	b.n	80019f4 <__ledf2+0x84>
 80019f2:	2002      	movs	r0, #2
 80019f4:	bcf0      	pop	{r4, r5, r6, r7}
 80019f6:	46bb      	mov	fp, r7
 80019f8:	46b2      	mov	sl, r6
 80019fa:	46a9      	mov	r9, r5
 80019fc:	46a0      	mov	r8, r4
 80019fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a00:	2800      	cmp	r0, #0
 8001a02:	d1f7      	bne.n	80019f4 <__ledf2+0x84>
 8001a04:	2001      	movs	r0, #1
 8001a06:	4240      	negs	r0, r0
 8001a08:	e7f4      	b.n	80019f4 <__ledf2+0x84>
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1ea      	bne.n	80019e4 <__ledf2+0x74>
 8001a0e:	464c      	mov	r4, r9
 8001a10:	4326      	orrs	r6, r4
 8001a12:	d1e7      	bne.n	80019e4 <__ledf2+0x74>
 8001a14:	e7e8      	b.n	80019e8 <__ledf2+0x78>
 8001a16:	429a      	cmp	r2, r3
 8001a18:	dd06      	ble.n	8001a28 <__ledf2+0xb8>
 8001a1a:	4243      	negs	r3, r0
 8001a1c:	4158      	adcs	r0, r3
 8001a1e:	2302      	movs	r3, #2
 8001a20:	4240      	negs	r0, r0
 8001a22:	4018      	ands	r0, r3
 8001a24:	3801      	subs	r0, #1
 8001a26:	e7e5      	b.n	80019f4 <__ledf2+0x84>
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	dbe9      	blt.n	8001a00 <__ledf2+0x90>
 8001a2c:	454f      	cmp	r7, r9
 8001a2e:	d8db      	bhi.n	80019e8 <__ledf2+0x78>
 8001a30:	d006      	beq.n	8001a40 <__ledf2+0xd0>
 8001a32:	2000      	movs	r0, #0
 8001a34:	454f      	cmp	r7, r9
 8001a36:	d2dd      	bcs.n	80019f4 <__ledf2+0x84>
 8001a38:	2900      	cmp	r1, #0
 8001a3a:	d0e3      	beq.n	8001a04 <__ledf2+0x94>
 8001a3c:	0008      	movs	r0, r1
 8001a3e:	e7d9      	b.n	80019f4 <__ledf2+0x84>
 8001a40:	45c4      	cmp	ip, r8
 8001a42:	d8d1      	bhi.n	80019e8 <__ledf2+0x78>
 8001a44:	2000      	movs	r0, #0
 8001a46:	45c4      	cmp	ip, r8
 8001a48:	d2d4      	bcs.n	80019f4 <__ledf2+0x84>
 8001a4a:	e7f5      	b.n	8001a38 <__ledf2+0xc8>
 8001a4c:	000007ff 	.word	0x000007ff

08001a50 <__aeabi_dmul>:
 8001a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a52:	4657      	mov	r7, sl
 8001a54:	464e      	mov	r6, r9
 8001a56:	4645      	mov	r5, r8
 8001a58:	46de      	mov	lr, fp
 8001a5a:	b5e0      	push	{r5, r6, r7, lr}
 8001a5c:	4698      	mov	r8, r3
 8001a5e:	030c      	lsls	r4, r1, #12
 8001a60:	004b      	lsls	r3, r1, #1
 8001a62:	0006      	movs	r6, r0
 8001a64:	4692      	mov	sl, r2
 8001a66:	b087      	sub	sp, #28
 8001a68:	0b24      	lsrs	r4, r4, #12
 8001a6a:	0d5b      	lsrs	r3, r3, #21
 8001a6c:	0fcf      	lsrs	r7, r1, #31
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d06c      	beq.n	8001b4c <__aeabi_dmul+0xfc>
 8001a72:	4add      	ldr	r2, [pc, #884]	; (8001de8 <__aeabi_dmul+0x398>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d100      	bne.n	8001a7a <__aeabi_dmul+0x2a>
 8001a78:	e086      	b.n	8001b88 <__aeabi_dmul+0x138>
 8001a7a:	0f42      	lsrs	r2, r0, #29
 8001a7c:	00e4      	lsls	r4, r4, #3
 8001a7e:	4314      	orrs	r4, r2
 8001a80:	2280      	movs	r2, #128	; 0x80
 8001a82:	0412      	lsls	r2, r2, #16
 8001a84:	4314      	orrs	r4, r2
 8001a86:	4ad9      	ldr	r2, [pc, #868]	; (8001dec <__aeabi_dmul+0x39c>)
 8001a88:	00c5      	lsls	r5, r0, #3
 8001a8a:	4694      	mov	ip, r2
 8001a8c:	4463      	add	r3, ip
 8001a8e:	9300      	str	r3, [sp, #0]
 8001a90:	2300      	movs	r3, #0
 8001a92:	4699      	mov	r9, r3
 8001a94:	469b      	mov	fp, r3
 8001a96:	4643      	mov	r3, r8
 8001a98:	4642      	mov	r2, r8
 8001a9a:	031e      	lsls	r6, r3, #12
 8001a9c:	0fd2      	lsrs	r2, r2, #31
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	4650      	mov	r0, sl
 8001aa2:	4690      	mov	r8, r2
 8001aa4:	0b36      	lsrs	r6, r6, #12
 8001aa6:	0d5b      	lsrs	r3, r3, #21
 8001aa8:	d100      	bne.n	8001aac <__aeabi_dmul+0x5c>
 8001aaa:	e078      	b.n	8001b9e <__aeabi_dmul+0x14e>
 8001aac:	4ace      	ldr	r2, [pc, #824]	; (8001de8 <__aeabi_dmul+0x398>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d01d      	beq.n	8001aee <__aeabi_dmul+0x9e>
 8001ab2:	49ce      	ldr	r1, [pc, #824]	; (8001dec <__aeabi_dmul+0x39c>)
 8001ab4:	0f42      	lsrs	r2, r0, #29
 8001ab6:	468c      	mov	ip, r1
 8001ab8:	9900      	ldr	r1, [sp, #0]
 8001aba:	4463      	add	r3, ip
 8001abc:	00f6      	lsls	r6, r6, #3
 8001abe:	468c      	mov	ip, r1
 8001ac0:	4316      	orrs	r6, r2
 8001ac2:	2280      	movs	r2, #128	; 0x80
 8001ac4:	449c      	add	ip, r3
 8001ac6:	0412      	lsls	r2, r2, #16
 8001ac8:	4663      	mov	r3, ip
 8001aca:	4316      	orrs	r6, r2
 8001acc:	00c2      	lsls	r2, r0, #3
 8001ace:	2000      	movs	r0, #0
 8001ad0:	9300      	str	r3, [sp, #0]
 8001ad2:	9900      	ldr	r1, [sp, #0]
 8001ad4:	4643      	mov	r3, r8
 8001ad6:	3101      	adds	r1, #1
 8001ad8:	468c      	mov	ip, r1
 8001ada:	4649      	mov	r1, r9
 8001adc:	407b      	eors	r3, r7
 8001ade:	9301      	str	r3, [sp, #4]
 8001ae0:	290f      	cmp	r1, #15
 8001ae2:	d900      	bls.n	8001ae6 <__aeabi_dmul+0x96>
 8001ae4:	e07e      	b.n	8001be4 <__aeabi_dmul+0x194>
 8001ae6:	4bc2      	ldr	r3, [pc, #776]	; (8001df0 <__aeabi_dmul+0x3a0>)
 8001ae8:	0089      	lsls	r1, r1, #2
 8001aea:	5859      	ldr	r1, [r3, r1]
 8001aec:	468f      	mov	pc, r1
 8001aee:	4652      	mov	r2, sl
 8001af0:	9b00      	ldr	r3, [sp, #0]
 8001af2:	4332      	orrs	r2, r6
 8001af4:	d000      	beq.n	8001af8 <__aeabi_dmul+0xa8>
 8001af6:	e156      	b.n	8001da6 <__aeabi_dmul+0x356>
 8001af8:	49bb      	ldr	r1, [pc, #748]	; (8001de8 <__aeabi_dmul+0x398>)
 8001afa:	2600      	movs	r6, #0
 8001afc:	468c      	mov	ip, r1
 8001afe:	4463      	add	r3, ip
 8001b00:	4649      	mov	r1, r9
 8001b02:	9300      	str	r3, [sp, #0]
 8001b04:	2302      	movs	r3, #2
 8001b06:	4319      	orrs	r1, r3
 8001b08:	4689      	mov	r9, r1
 8001b0a:	2002      	movs	r0, #2
 8001b0c:	e7e1      	b.n	8001ad2 <__aeabi_dmul+0x82>
 8001b0e:	4643      	mov	r3, r8
 8001b10:	9301      	str	r3, [sp, #4]
 8001b12:	0034      	movs	r4, r6
 8001b14:	0015      	movs	r5, r2
 8001b16:	4683      	mov	fp, r0
 8001b18:	465b      	mov	r3, fp
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d05e      	beq.n	8001bdc <__aeabi_dmul+0x18c>
 8001b1e:	2b03      	cmp	r3, #3
 8001b20:	d100      	bne.n	8001b24 <__aeabi_dmul+0xd4>
 8001b22:	e1f3      	b.n	8001f0c <__aeabi_dmul+0x4bc>
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d000      	beq.n	8001b2a <__aeabi_dmul+0xda>
 8001b28:	e118      	b.n	8001d5c <__aeabi_dmul+0x30c>
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	2400      	movs	r4, #0
 8001b2e:	2500      	movs	r5, #0
 8001b30:	9b01      	ldr	r3, [sp, #4]
 8001b32:	0512      	lsls	r2, r2, #20
 8001b34:	4322      	orrs	r2, r4
 8001b36:	07db      	lsls	r3, r3, #31
 8001b38:	431a      	orrs	r2, r3
 8001b3a:	0028      	movs	r0, r5
 8001b3c:	0011      	movs	r1, r2
 8001b3e:	b007      	add	sp, #28
 8001b40:	bcf0      	pop	{r4, r5, r6, r7}
 8001b42:	46bb      	mov	fp, r7
 8001b44:	46b2      	mov	sl, r6
 8001b46:	46a9      	mov	r9, r5
 8001b48:	46a0      	mov	r8, r4
 8001b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b4c:	0025      	movs	r5, r4
 8001b4e:	4305      	orrs	r5, r0
 8001b50:	d100      	bne.n	8001b54 <__aeabi_dmul+0x104>
 8001b52:	e141      	b.n	8001dd8 <__aeabi_dmul+0x388>
 8001b54:	2c00      	cmp	r4, #0
 8001b56:	d100      	bne.n	8001b5a <__aeabi_dmul+0x10a>
 8001b58:	e1ad      	b.n	8001eb6 <__aeabi_dmul+0x466>
 8001b5a:	0020      	movs	r0, r4
 8001b5c:	f000 fe4a 	bl	80027f4 <__clzsi2>
 8001b60:	0001      	movs	r1, r0
 8001b62:	0002      	movs	r2, r0
 8001b64:	390b      	subs	r1, #11
 8001b66:	231d      	movs	r3, #29
 8001b68:	0010      	movs	r0, r2
 8001b6a:	1a5b      	subs	r3, r3, r1
 8001b6c:	0031      	movs	r1, r6
 8001b6e:	0035      	movs	r5, r6
 8001b70:	3808      	subs	r0, #8
 8001b72:	4084      	lsls	r4, r0
 8001b74:	40d9      	lsrs	r1, r3
 8001b76:	4085      	lsls	r5, r0
 8001b78:	430c      	orrs	r4, r1
 8001b7a:	489e      	ldr	r0, [pc, #632]	; (8001df4 <__aeabi_dmul+0x3a4>)
 8001b7c:	1a83      	subs	r3, r0, r2
 8001b7e:	9300      	str	r3, [sp, #0]
 8001b80:	2300      	movs	r3, #0
 8001b82:	4699      	mov	r9, r3
 8001b84:	469b      	mov	fp, r3
 8001b86:	e786      	b.n	8001a96 <__aeabi_dmul+0x46>
 8001b88:	0005      	movs	r5, r0
 8001b8a:	4325      	orrs	r5, r4
 8001b8c:	d000      	beq.n	8001b90 <__aeabi_dmul+0x140>
 8001b8e:	e11c      	b.n	8001dca <__aeabi_dmul+0x37a>
 8001b90:	2208      	movs	r2, #8
 8001b92:	9300      	str	r3, [sp, #0]
 8001b94:	2302      	movs	r3, #2
 8001b96:	2400      	movs	r4, #0
 8001b98:	4691      	mov	r9, r2
 8001b9a:	469b      	mov	fp, r3
 8001b9c:	e77b      	b.n	8001a96 <__aeabi_dmul+0x46>
 8001b9e:	4652      	mov	r2, sl
 8001ba0:	4332      	orrs	r2, r6
 8001ba2:	d100      	bne.n	8001ba6 <__aeabi_dmul+0x156>
 8001ba4:	e10a      	b.n	8001dbc <__aeabi_dmul+0x36c>
 8001ba6:	2e00      	cmp	r6, #0
 8001ba8:	d100      	bne.n	8001bac <__aeabi_dmul+0x15c>
 8001baa:	e176      	b.n	8001e9a <__aeabi_dmul+0x44a>
 8001bac:	0030      	movs	r0, r6
 8001bae:	f000 fe21 	bl	80027f4 <__clzsi2>
 8001bb2:	0002      	movs	r2, r0
 8001bb4:	3a0b      	subs	r2, #11
 8001bb6:	231d      	movs	r3, #29
 8001bb8:	0001      	movs	r1, r0
 8001bba:	1a9b      	subs	r3, r3, r2
 8001bbc:	4652      	mov	r2, sl
 8001bbe:	3908      	subs	r1, #8
 8001bc0:	40da      	lsrs	r2, r3
 8001bc2:	408e      	lsls	r6, r1
 8001bc4:	4316      	orrs	r6, r2
 8001bc6:	4652      	mov	r2, sl
 8001bc8:	408a      	lsls	r2, r1
 8001bca:	9b00      	ldr	r3, [sp, #0]
 8001bcc:	4989      	ldr	r1, [pc, #548]	; (8001df4 <__aeabi_dmul+0x3a4>)
 8001bce:	1a18      	subs	r0, r3, r0
 8001bd0:	0003      	movs	r3, r0
 8001bd2:	468c      	mov	ip, r1
 8001bd4:	4463      	add	r3, ip
 8001bd6:	2000      	movs	r0, #0
 8001bd8:	9300      	str	r3, [sp, #0]
 8001bda:	e77a      	b.n	8001ad2 <__aeabi_dmul+0x82>
 8001bdc:	2400      	movs	r4, #0
 8001bde:	2500      	movs	r5, #0
 8001be0:	4a81      	ldr	r2, [pc, #516]	; (8001de8 <__aeabi_dmul+0x398>)
 8001be2:	e7a5      	b.n	8001b30 <__aeabi_dmul+0xe0>
 8001be4:	0c2f      	lsrs	r7, r5, #16
 8001be6:	042d      	lsls	r5, r5, #16
 8001be8:	0c2d      	lsrs	r5, r5, #16
 8001bea:	002b      	movs	r3, r5
 8001bec:	0c11      	lsrs	r1, r2, #16
 8001bee:	0412      	lsls	r2, r2, #16
 8001bf0:	0c12      	lsrs	r2, r2, #16
 8001bf2:	4353      	muls	r3, r2
 8001bf4:	4698      	mov	r8, r3
 8001bf6:	0013      	movs	r3, r2
 8001bf8:	0028      	movs	r0, r5
 8001bfa:	437b      	muls	r3, r7
 8001bfc:	4699      	mov	r9, r3
 8001bfe:	4348      	muls	r0, r1
 8001c00:	4448      	add	r0, r9
 8001c02:	4683      	mov	fp, r0
 8001c04:	4640      	mov	r0, r8
 8001c06:	000b      	movs	r3, r1
 8001c08:	0c00      	lsrs	r0, r0, #16
 8001c0a:	4682      	mov	sl, r0
 8001c0c:	4658      	mov	r0, fp
 8001c0e:	437b      	muls	r3, r7
 8001c10:	4450      	add	r0, sl
 8001c12:	9302      	str	r3, [sp, #8]
 8001c14:	4581      	cmp	r9, r0
 8001c16:	d906      	bls.n	8001c26 <__aeabi_dmul+0x1d6>
 8001c18:	469a      	mov	sl, r3
 8001c1a:	2380      	movs	r3, #128	; 0x80
 8001c1c:	025b      	lsls	r3, r3, #9
 8001c1e:	4699      	mov	r9, r3
 8001c20:	44ca      	add	sl, r9
 8001c22:	4653      	mov	r3, sl
 8001c24:	9302      	str	r3, [sp, #8]
 8001c26:	0c03      	lsrs	r3, r0, #16
 8001c28:	469b      	mov	fp, r3
 8001c2a:	4643      	mov	r3, r8
 8001c2c:	041b      	lsls	r3, r3, #16
 8001c2e:	0400      	lsls	r0, r0, #16
 8001c30:	0c1b      	lsrs	r3, r3, #16
 8001c32:	4698      	mov	r8, r3
 8001c34:	0003      	movs	r3, r0
 8001c36:	4443      	add	r3, r8
 8001c38:	9304      	str	r3, [sp, #16]
 8001c3a:	0c33      	lsrs	r3, r6, #16
 8001c3c:	4699      	mov	r9, r3
 8001c3e:	002b      	movs	r3, r5
 8001c40:	0436      	lsls	r6, r6, #16
 8001c42:	0c36      	lsrs	r6, r6, #16
 8001c44:	4373      	muls	r3, r6
 8001c46:	4698      	mov	r8, r3
 8001c48:	0033      	movs	r3, r6
 8001c4a:	437b      	muls	r3, r7
 8001c4c:	469a      	mov	sl, r3
 8001c4e:	464b      	mov	r3, r9
 8001c50:	435d      	muls	r5, r3
 8001c52:	435f      	muls	r7, r3
 8001c54:	4643      	mov	r3, r8
 8001c56:	4455      	add	r5, sl
 8001c58:	0c18      	lsrs	r0, r3, #16
 8001c5a:	1940      	adds	r0, r0, r5
 8001c5c:	4582      	cmp	sl, r0
 8001c5e:	d903      	bls.n	8001c68 <__aeabi_dmul+0x218>
 8001c60:	2380      	movs	r3, #128	; 0x80
 8001c62:	025b      	lsls	r3, r3, #9
 8001c64:	469a      	mov	sl, r3
 8001c66:	4457      	add	r7, sl
 8001c68:	0c05      	lsrs	r5, r0, #16
 8001c6a:	19eb      	adds	r3, r5, r7
 8001c6c:	9305      	str	r3, [sp, #20]
 8001c6e:	4643      	mov	r3, r8
 8001c70:	041d      	lsls	r5, r3, #16
 8001c72:	0c2d      	lsrs	r5, r5, #16
 8001c74:	0400      	lsls	r0, r0, #16
 8001c76:	1940      	adds	r0, r0, r5
 8001c78:	0c25      	lsrs	r5, r4, #16
 8001c7a:	0424      	lsls	r4, r4, #16
 8001c7c:	0c24      	lsrs	r4, r4, #16
 8001c7e:	0027      	movs	r7, r4
 8001c80:	4357      	muls	r7, r2
 8001c82:	436a      	muls	r2, r5
 8001c84:	4690      	mov	r8, r2
 8001c86:	002a      	movs	r2, r5
 8001c88:	0c3b      	lsrs	r3, r7, #16
 8001c8a:	469a      	mov	sl, r3
 8001c8c:	434a      	muls	r2, r1
 8001c8e:	4361      	muls	r1, r4
 8001c90:	4441      	add	r1, r8
 8001c92:	4451      	add	r1, sl
 8001c94:	4483      	add	fp, r0
 8001c96:	4588      	cmp	r8, r1
 8001c98:	d903      	bls.n	8001ca2 <__aeabi_dmul+0x252>
 8001c9a:	2380      	movs	r3, #128	; 0x80
 8001c9c:	025b      	lsls	r3, r3, #9
 8001c9e:	4698      	mov	r8, r3
 8001ca0:	4442      	add	r2, r8
 8001ca2:	043f      	lsls	r7, r7, #16
 8001ca4:	0c0b      	lsrs	r3, r1, #16
 8001ca6:	0c3f      	lsrs	r7, r7, #16
 8001ca8:	0409      	lsls	r1, r1, #16
 8001caa:	19c9      	adds	r1, r1, r7
 8001cac:	0027      	movs	r7, r4
 8001cae:	4698      	mov	r8, r3
 8001cb0:	464b      	mov	r3, r9
 8001cb2:	4377      	muls	r7, r6
 8001cb4:	435c      	muls	r4, r3
 8001cb6:	436e      	muls	r6, r5
 8001cb8:	435d      	muls	r5, r3
 8001cba:	0c3b      	lsrs	r3, r7, #16
 8001cbc:	4699      	mov	r9, r3
 8001cbe:	19a4      	adds	r4, r4, r6
 8001cc0:	444c      	add	r4, r9
 8001cc2:	4442      	add	r2, r8
 8001cc4:	9503      	str	r5, [sp, #12]
 8001cc6:	42a6      	cmp	r6, r4
 8001cc8:	d904      	bls.n	8001cd4 <__aeabi_dmul+0x284>
 8001cca:	2380      	movs	r3, #128	; 0x80
 8001ccc:	025b      	lsls	r3, r3, #9
 8001cce:	4698      	mov	r8, r3
 8001cd0:	4445      	add	r5, r8
 8001cd2:	9503      	str	r5, [sp, #12]
 8001cd4:	9b02      	ldr	r3, [sp, #8]
 8001cd6:	043f      	lsls	r7, r7, #16
 8001cd8:	445b      	add	r3, fp
 8001cda:	001e      	movs	r6, r3
 8001cdc:	4283      	cmp	r3, r0
 8001cde:	4180      	sbcs	r0, r0
 8001ce0:	0423      	lsls	r3, r4, #16
 8001ce2:	4698      	mov	r8, r3
 8001ce4:	9b05      	ldr	r3, [sp, #20]
 8001ce6:	0c3f      	lsrs	r7, r7, #16
 8001ce8:	4447      	add	r7, r8
 8001cea:	4698      	mov	r8, r3
 8001cec:	1876      	adds	r6, r6, r1
 8001cee:	428e      	cmp	r6, r1
 8001cf0:	4189      	sbcs	r1, r1
 8001cf2:	4447      	add	r7, r8
 8001cf4:	4240      	negs	r0, r0
 8001cf6:	183d      	adds	r5, r7, r0
 8001cf8:	46a8      	mov	r8, r5
 8001cfa:	4693      	mov	fp, r2
 8001cfc:	4249      	negs	r1, r1
 8001cfe:	468a      	mov	sl, r1
 8001d00:	44c3      	add	fp, r8
 8001d02:	429f      	cmp	r7, r3
 8001d04:	41bf      	sbcs	r7, r7
 8001d06:	4580      	cmp	r8, r0
 8001d08:	4180      	sbcs	r0, r0
 8001d0a:	9b03      	ldr	r3, [sp, #12]
 8001d0c:	44da      	add	sl, fp
 8001d0e:	4698      	mov	r8, r3
 8001d10:	4653      	mov	r3, sl
 8001d12:	4240      	negs	r0, r0
 8001d14:	427f      	negs	r7, r7
 8001d16:	4307      	orrs	r7, r0
 8001d18:	0c24      	lsrs	r4, r4, #16
 8001d1a:	4593      	cmp	fp, r2
 8001d1c:	4192      	sbcs	r2, r2
 8001d1e:	458a      	cmp	sl, r1
 8001d20:	4189      	sbcs	r1, r1
 8001d22:	193f      	adds	r7, r7, r4
 8001d24:	0ddc      	lsrs	r4, r3, #23
 8001d26:	9b04      	ldr	r3, [sp, #16]
 8001d28:	0275      	lsls	r5, r6, #9
 8001d2a:	431d      	orrs	r5, r3
 8001d2c:	1e68      	subs	r0, r5, #1
 8001d2e:	4185      	sbcs	r5, r0
 8001d30:	4653      	mov	r3, sl
 8001d32:	4252      	negs	r2, r2
 8001d34:	4249      	negs	r1, r1
 8001d36:	430a      	orrs	r2, r1
 8001d38:	18bf      	adds	r7, r7, r2
 8001d3a:	4447      	add	r7, r8
 8001d3c:	0df6      	lsrs	r6, r6, #23
 8001d3e:	027f      	lsls	r7, r7, #9
 8001d40:	4335      	orrs	r5, r6
 8001d42:	025a      	lsls	r2, r3, #9
 8001d44:	433c      	orrs	r4, r7
 8001d46:	4315      	orrs	r5, r2
 8001d48:	01fb      	lsls	r3, r7, #7
 8001d4a:	d400      	bmi.n	8001d4e <__aeabi_dmul+0x2fe>
 8001d4c:	e0c1      	b.n	8001ed2 <__aeabi_dmul+0x482>
 8001d4e:	2101      	movs	r1, #1
 8001d50:	086a      	lsrs	r2, r5, #1
 8001d52:	400d      	ands	r5, r1
 8001d54:	4315      	orrs	r5, r2
 8001d56:	07e2      	lsls	r2, r4, #31
 8001d58:	4315      	orrs	r5, r2
 8001d5a:	0864      	lsrs	r4, r4, #1
 8001d5c:	4926      	ldr	r1, [pc, #152]	; (8001df8 <__aeabi_dmul+0x3a8>)
 8001d5e:	4461      	add	r1, ip
 8001d60:	2900      	cmp	r1, #0
 8001d62:	dd56      	ble.n	8001e12 <__aeabi_dmul+0x3c2>
 8001d64:	076b      	lsls	r3, r5, #29
 8001d66:	d009      	beq.n	8001d7c <__aeabi_dmul+0x32c>
 8001d68:	220f      	movs	r2, #15
 8001d6a:	402a      	ands	r2, r5
 8001d6c:	2a04      	cmp	r2, #4
 8001d6e:	d005      	beq.n	8001d7c <__aeabi_dmul+0x32c>
 8001d70:	1d2a      	adds	r2, r5, #4
 8001d72:	42aa      	cmp	r2, r5
 8001d74:	41ad      	sbcs	r5, r5
 8001d76:	426d      	negs	r5, r5
 8001d78:	1964      	adds	r4, r4, r5
 8001d7a:	0015      	movs	r5, r2
 8001d7c:	01e3      	lsls	r3, r4, #7
 8001d7e:	d504      	bpl.n	8001d8a <__aeabi_dmul+0x33a>
 8001d80:	2180      	movs	r1, #128	; 0x80
 8001d82:	4a1e      	ldr	r2, [pc, #120]	; (8001dfc <__aeabi_dmul+0x3ac>)
 8001d84:	00c9      	lsls	r1, r1, #3
 8001d86:	4014      	ands	r4, r2
 8001d88:	4461      	add	r1, ip
 8001d8a:	4a1d      	ldr	r2, [pc, #116]	; (8001e00 <__aeabi_dmul+0x3b0>)
 8001d8c:	4291      	cmp	r1, r2
 8001d8e:	dd00      	ble.n	8001d92 <__aeabi_dmul+0x342>
 8001d90:	e724      	b.n	8001bdc <__aeabi_dmul+0x18c>
 8001d92:	0762      	lsls	r2, r4, #29
 8001d94:	08ed      	lsrs	r5, r5, #3
 8001d96:	0264      	lsls	r4, r4, #9
 8001d98:	0549      	lsls	r1, r1, #21
 8001d9a:	4315      	orrs	r5, r2
 8001d9c:	0b24      	lsrs	r4, r4, #12
 8001d9e:	0d4a      	lsrs	r2, r1, #21
 8001da0:	e6c6      	b.n	8001b30 <__aeabi_dmul+0xe0>
 8001da2:	9701      	str	r7, [sp, #4]
 8001da4:	e6b8      	b.n	8001b18 <__aeabi_dmul+0xc8>
 8001da6:	4a10      	ldr	r2, [pc, #64]	; (8001de8 <__aeabi_dmul+0x398>)
 8001da8:	2003      	movs	r0, #3
 8001daa:	4694      	mov	ip, r2
 8001dac:	4463      	add	r3, ip
 8001dae:	464a      	mov	r2, r9
 8001db0:	9300      	str	r3, [sp, #0]
 8001db2:	2303      	movs	r3, #3
 8001db4:	431a      	orrs	r2, r3
 8001db6:	4691      	mov	r9, r2
 8001db8:	4652      	mov	r2, sl
 8001dba:	e68a      	b.n	8001ad2 <__aeabi_dmul+0x82>
 8001dbc:	4649      	mov	r1, r9
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	4319      	orrs	r1, r3
 8001dc2:	4689      	mov	r9, r1
 8001dc4:	2600      	movs	r6, #0
 8001dc6:	2001      	movs	r0, #1
 8001dc8:	e683      	b.n	8001ad2 <__aeabi_dmul+0x82>
 8001dca:	220c      	movs	r2, #12
 8001dcc:	9300      	str	r3, [sp, #0]
 8001dce:	2303      	movs	r3, #3
 8001dd0:	0005      	movs	r5, r0
 8001dd2:	4691      	mov	r9, r2
 8001dd4:	469b      	mov	fp, r3
 8001dd6:	e65e      	b.n	8001a96 <__aeabi_dmul+0x46>
 8001dd8:	2304      	movs	r3, #4
 8001dda:	4699      	mov	r9, r3
 8001ddc:	2300      	movs	r3, #0
 8001dde:	9300      	str	r3, [sp, #0]
 8001de0:	3301      	adds	r3, #1
 8001de2:	2400      	movs	r4, #0
 8001de4:	469b      	mov	fp, r3
 8001de6:	e656      	b.n	8001a96 <__aeabi_dmul+0x46>
 8001de8:	000007ff 	.word	0x000007ff
 8001dec:	fffffc01 	.word	0xfffffc01
 8001df0:	080200c4 	.word	0x080200c4
 8001df4:	fffffc0d 	.word	0xfffffc0d
 8001df8:	000003ff 	.word	0x000003ff
 8001dfc:	feffffff 	.word	0xfeffffff
 8001e00:	000007fe 	.word	0x000007fe
 8001e04:	2300      	movs	r3, #0
 8001e06:	2480      	movs	r4, #128	; 0x80
 8001e08:	2500      	movs	r5, #0
 8001e0a:	4a44      	ldr	r2, [pc, #272]	; (8001f1c <__aeabi_dmul+0x4cc>)
 8001e0c:	9301      	str	r3, [sp, #4]
 8001e0e:	0324      	lsls	r4, r4, #12
 8001e10:	e68e      	b.n	8001b30 <__aeabi_dmul+0xe0>
 8001e12:	2001      	movs	r0, #1
 8001e14:	1a40      	subs	r0, r0, r1
 8001e16:	2838      	cmp	r0, #56	; 0x38
 8001e18:	dd00      	ble.n	8001e1c <__aeabi_dmul+0x3cc>
 8001e1a:	e686      	b.n	8001b2a <__aeabi_dmul+0xda>
 8001e1c:	281f      	cmp	r0, #31
 8001e1e:	dd5b      	ble.n	8001ed8 <__aeabi_dmul+0x488>
 8001e20:	221f      	movs	r2, #31
 8001e22:	0023      	movs	r3, r4
 8001e24:	4252      	negs	r2, r2
 8001e26:	1a51      	subs	r1, r2, r1
 8001e28:	40cb      	lsrs	r3, r1
 8001e2a:	0019      	movs	r1, r3
 8001e2c:	2820      	cmp	r0, #32
 8001e2e:	d003      	beq.n	8001e38 <__aeabi_dmul+0x3e8>
 8001e30:	4a3b      	ldr	r2, [pc, #236]	; (8001f20 <__aeabi_dmul+0x4d0>)
 8001e32:	4462      	add	r2, ip
 8001e34:	4094      	lsls	r4, r2
 8001e36:	4325      	orrs	r5, r4
 8001e38:	1e6a      	subs	r2, r5, #1
 8001e3a:	4195      	sbcs	r5, r2
 8001e3c:	002a      	movs	r2, r5
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	2107      	movs	r1, #7
 8001e42:	000d      	movs	r5, r1
 8001e44:	2400      	movs	r4, #0
 8001e46:	4015      	ands	r5, r2
 8001e48:	4211      	tst	r1, r2
 8001e4a:	d05b      	beq.n	8001f04 <__aeabi_dmul+0x4b4>
 8001e4c:	210f      	movs	r1, #15
 8001e4e:	2400      	movs	r4, #0
 8001e50:	4011      	ands	r1, r2
 8001e52:	2904      	cmp	r1, #4
 8001e54:	d053      	beq.n	8001efe <__aeabi_dmul+0x4ae>
 8001e56:	1d11      	adds	r1, r2, #4
 8001e58:	4291      	cmp	r1, r2
 8001e5a:	4192      	sbcs	r2, r2
 8001e5c:	4252      	negs	r2, r2
 8001e5e:	18a4      	adds	r4, r4, r2
 8001e60:	000a      	movs	r2, r1
 8001e62:	0223      	lsls	r3, r4, #8
 8001e64:	d54b      	bpl.n	8001efe <__aeabi_dmul+0x4ae>
 8001e66:	2201      	movs	r2, #1
 8001e68:	2400      	movs	r4, #0
 8001e6a:	2500      	movs	r5, #0
 8001e6c:	e660      	b.n	8001b30 <__aeabi_dmul+0xe0>
 8001e6e:	2380      	movs	r3, #128	; 0x80
 8001e70:	031b      	lsls	r3, r3, #12
 8001e72:	421c      	tst	r4, r3
 8001e74:	d009      	beq.n	8001e8a <__aeabi_dmul+0x43a>
 8001e76:	421e      	tst	r6, r3
 8001e78:	d107      	bne.n	8001e8a <__aeabi_dmul+0x43a>
 8001e7a:	4333      	orrs	r3, r6
 8001e7c:	031c      	lsls	r4, r3, #12
 8001e7e:	4643      	mov	r3, r8
 8001e80:	0015      	movs	r5, r2
 8001e82:	0b24      	lsrs	r4, r4, #12
 8001e84:	4a25      	ldr	r2, [pc, #148]	; (8001f1c <__aeabi_dmul+0x4cc>)
 8001e86:	9301      	str	r3, [sp, #4]
 8001e88:	e652      	b.n	8001b30 <__aeabi_dmul+0xe0>
 8001e8a:	2280      	movs	r2, #128	; 0x80
 8001e8c:	0312      	lsls	r2, r2, #12
 8001e8e:	4314      	orrs	r4, r2
 8001e90:	0324      	lsls	r4, r4, #12
 8001e92:	4a22      	ldr	r2, [pc, #136]	; (8001f1c <__aeabi_dmul+0x4cc>)
 8001e94:	0b24      	lsrs	r4, r4, #12
 8001e96:	9701      	str	r7, [sp, #4]
 8001e98:	e64a      	b.n	8001b30 <__aeabi_dmul+0xe0>
 8001e9a:	f000 fcab 	bl	80027f4 <__clzsi2>
 8001e9e:	0003      	movs	r3, r0
 8001ea0:	001a      	movs	r2, r3
 8001ea2:	3215      	adds	r2, #21
 8001ea4:	3020      	adds	r0, #32
 8001ea6:	2a1c      	cmp	r2, #28
 8001ea8:	dc00      	bgt.n	8001eac <__aeabi_dmul+0x45c>
 8001eaa:	e684      	b.n	8001bb6 <__aeabi_dmul+0x166>
 8001eac:	4656      	mov	r6, sl
 8001eae:	3b08      	subs	r3, #8
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	409e      	lsls	r6, r3
 8001eb4:	e689      	b.n	8001bca <__aeabi_dmul+0x17a>
 8001eb6:	f000 fc9d 	bl	80027f4 <__clzsi2>
 8001eba:	0001      	movs	r1, r0
 8001ebc:	0002      	movs	r2, r0
 8001ebe:	3115      	adds	r1, #21
 8001ec0:	3220      	adds	r2, #32
 8001ec2:	291c      	cmp	r1, #28
 8001ec4:	dc00      	bgt.n	8001ec8 <__aeabi_dmul+0x478>
 8001ec6:	e64e      	b.n	8001b66 <__aeabi_dmul+0x116>
 8001ec8:	0034      	movs	r4, r6
 8001eca:	3808      	subs	r0, #8
 8001ecc:	2500      	movs	r5, #0
 8001ece:	4084      	lsls	r4, r0
 8001ed0:	e653      	b.n	8001b7a <__aeabi_dmul+0x12a>
 8001ed2:	9b00      	ldr	r3, [sp, #0]
 8001ed4:	469c      	mov	ip, r3
 8001ed6:	e741      	b.n	8001d5c <__aeabi_dmul+0x30c>
 8001ed8:	4912      	ldr	r1, [pc, #72]	; (8001f24 <__aeabi_dmul+0x4d4>)
 8001eda:	0022      	movs	r2, r4
 8001edc:	4461      	add	r1, ip
 8001ede:	002e      	movs	r6, r5
 8001ee0:	408d      	lsls	r5, r1
 8001ee2:	408a      	lsls	r2, r1
 8001ee4:	40c6      	lsrs	r6, r0
 8001ee6:	1e69      	subs	r1, r5, #1
 8001ee8:	418d      	sbcs	r5, r1
 8001eea:	4332      	orrs	r2, r6
 8001eec:	432a      	orrs	r2, r5
 8001eee:	40c4      	lsrs	r4, r0
 8001ef0:	0753      	lsls	r3, r2, #29
 8001ef2:	d0b6      	beq.n	8001e62 <__aeabi_dmul+0x412>
 8001ef4:	210f      	movs	r1, #15
 8001ef6:	4011      	ands	r1, r2
 8001ef8:	2904      	cmp	r1, #4
 8001efa:	d1ac      	bne.n	8001e56 <__aeabi_dmul+0x406>
 8001efc:	e7b1      	b.n	8001e62 <__aeabi_dmul+0x412>
 8001efe:	0765      	lsls	r5, r4, #29
 8001f00:	0264      	lsls	r4, r4, #9
 8001f02:	0b24      	lsrs	r4, r4, #12
 8001f04:	08d2      	lsrs	r2, r2, #3
 8001f06:	4315      	orrs	r5, r2
 8001f08:	2200      	movs	r2, #0
 8001f0a:	e611      	b.n	8001b30 <__aeabi_dmul+0xe0>
 8001f0c:	2280      	movs	r2, #128	; 0x80
 8001f0e:	0312      	lsls	r2, r2, #12
 8001f10:	4314      	orrs	r4, r2
 8001f12:	0324      	lsls	r4, r4, #12
 8001f14:	4a01      	ldr	r2, [pc, #4]	; (8001f1c <__aeabi_dmul+0x4cc>)
 8001f16:	0b24      	lsrs	r4, r4, #12
 8001f18:	e60a      	b.n	8001b30 <__aeabi_dmul+0xe0>
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	000007ff 	.word	0x000007ff
 8001f20:	0000043e 	.word	0x0000043e
 8001f24:	0000041e 	.word	0x0000041e

08001f28 <__aeabi_dsub>:
 8001f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f2a:	4657      	mov	r7, sl
 8001f2c:	464e      	mov	r6, r9
 8001f2e:	4645      	mov	r5, r8
 8001f30:	46de      	mov	lr, fp
 8001f32:	0004      	movs	r4, r0
 8001f34:	b5e0      	push	{r5, r6, r7, lr}
 8001f36:	001f      	movs	r7, r3
 8001f38:	0010      	movs	r0, r2
 8001f3a:	030b      	lsls	r3, r1, #12
 8001f3c:	0f62      	lsrs	r2, r4, #29
 8001f3e:	004e      	lsls	r6, r1, #1
 8001f40:	0fcd      	lsrs	r5, r1, #31
 8001f42:	0a5b      	lsrs	r3, r3, #9
 8001f44:	0339      	lsls	r1, r7, #12
 8001f46:	4313      	orrs	r3, r2
 8001f48:	0a49      	lsrs	r1, r1, #9
 8001f4a:	00e2      	lsls	r2, r4, #3
 8001f4c:	0f44      	lsrs	r4, r0, #29
 8001f4e:	4321      	orrs	r1, r4
 8001f50:	4cc2      	ldr	r4, [pc, #776]	; (800225c <__aeabi_dsub+0x334>)
 8001f52:	4691      	mov	r9, r2
 8001f54:	4692      	mov	sl, r2
 8001f56:	00c0      	lsls	r0, r0, #3
 8001f58:	007a      	lsls	r2, r7, #1
 8001f5a:	4680      	mov	r8, r0
 8001f5c:	0d76      	lsrs	r6, r6, #21
 8001f5e:	0d52      	lsrs	r2, r2, #21
 8001f60:	0fff      	lsrs	r7, r7, #31
 8001f62:	42a2      	cmp	r2, r4
 8001f64:	d100      	bne.n	8001f68 <__aeabi_dsub+0x40>
 8001f66:	e0b4      	b.n	80020d2 <__aeabi_dsub+0x1aa>
 8001f68:	2401      	movs	r4, #1
 8001f6a:	4067      	eors	r7, r4
 8001f6c:	46bb      	mov	fp, r7
 8001f6e:	42bd      	cmp	r5, r7
 8001f70:	d100      	bne.n	8001f74 <__aeabi_dsub+0x4c>
 8001f72:	e088      	b.n	8002086 <__aeabi_dsub+0x15e>
 8001f74:	1ab4      	subs	r4, r6, r2
 8001f76:	46a4      	mov	ip, r4
 8001f78:	2c00      	cmp	r4, #0
 8001f7a:	dc00      	bgt.n	8001f7e <__aeabi_dsub+0x56>
 8001f7c:	e0b2      	b.n	80020e4 <__aeabi_dsub+0x1bc>
 8001f7e:	2a00      	cmp	r2, #0
 8001f80:	d100      	bne.n	8001f84 <__aeabi_dsub+0x5c>
 8001f82:	e0c5      	b.n	8002110 <__aeabi_dsub+0x1e8>
 8001f84:	4ab5      	ldr	r2, [pc, #724]	; (800225c <__aeabi_dsub+0x334>)
 8001f86:	4296      	cmp	r6, r2
 8001f88:	d100      	bne.n	8001f8c <__aeabi_dsub+0x64>
 8001f8a:	e28b      	b.n	80024a4 <__aeabi_dsub+0x57c>
 8001f8c:	2280      	movs	r2, #128	; 0x80
 8001f8e:	0412      	lsls	r2, r2, #16
 8001f90:	4311      	orrs	r1, r2
 8001f92:	4662      	mov	r2, ip
 8001f94:	2a38      	cmp	r2, #56	; 0x38
 8001f96:	dd00      	ble.n	8001f9a <__aeabi_dsub+0x72>
 8001f98:	e1a1      	b.n	80022de <__aeabi_dsub+0x3b6>
 8001f9a:	2a1f      	cmp	r2, #31
 8001f9c:	dd00      	ble.n	8001fa0 <__aeabi_dsub+0x78>
 8001f9e:	e216      	b.n	80023ce <__aeabi_dsub+0x4a6>
 8001fa0:	2720      	movs	r7, #32
 8001fa2:	000c      	movs	r4, r1
 8001fa4:	1abf      	subs	r7, r7, r2
 8001fa6:	40bc      	lsls	r4, r7
 8001fa8:	0002      	movs	r2, r0
 8001faa:	46a0      	mov	r8, r4
 8001fac:	4664      	mov	r4, ip
 8001fae:	40b8      	lsls	r0, r7
 8001fb0:	40e2      	lsrs	r2, r4
 8001fb2:	4644      	mov	r4, r8
 8001fb4:	4314      	orrs	r4, r2
 8001fb6:	0002      	movs	r2, r0
 8001fb8:	1e50      	subs	r0, r2, #1
 8001fba:	4182      	sbcs	r2, r0
 8001fbc:	4660      	mov	r0, ip
 8001fbe:	40c1      	lsrs	r1, r0
 8001fc0:	4322      	orrs	r2, r4
 8001fc2:	1a5b      	subs	r3, r3, r1
 8001fc4:	4649      	mov	r1, r9
 8001fc6:	1a8c      	subs	r4, r1, r2
 8001fc8:	45a1      	cmp	r9, r4
 8001fca:	4192      	sbcs	r2, r2
 8001fcc:	4252      	negs	r2, r2
 8001fce:	1a9b      	subs	r3, r3, r2
 8001fd0:	4698      	mov	r8, r3
 8001fd2:	4643      	mov	r3, r8
 8001fd4:	021b      	lsls	r3, r3, #8
 8001fd6:	d400      	bmi.n	8001fda <__aeabi_dsub+0xb2>
 8001fd8:	e117      	b.n	800220a <__aeabi_dsub+0x2e2>
 8001fda:	4643      	mov	r3, r8
 8001fdc:	025b      	lsls	r3, r3, #9
 8001fde:	0a5b      	lsrs	r3, r3, #9
 8001fe0:	4698      	mov	r8, r3
 8001fe2:	4643      	mov	r3, r8
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d100      	bne.n	8001fea <__aeabi_dsub+0xc2>
 8001fe8:	e16c      	b.n	80022c4 <__aeabi_dsub+0x39c>
 8001fea:	4640      	mov	r0, r8
 8001fec:	f000 fc02 	bl	80027f4 <__clzsi2>
 8001ff0:	0002      	movs	r2, r0
 8001ff2:	3a08      	subs	r2, #8
 8001ff4:	2120      	movs	r1, #32
 8001ff6:	0020      	movs	r0, r4
 8001ff8:	4643      	mov	r3, r8
 8001ffa:	1a89      	subs	r1, r1, r2
 8001ffc:	4093      	lsls	r3, r2
 8001ffe:	40c8      	lsrs	r0, r1
 8002000:	4094      	lsls	r4, r2
 8002002:	4303      	orrs	r3, r0
 8002004:	4296      	cmp	r6, r2
 8002006:	dd00      	ble.n	800200a <__aeabi_dsub+0xe2>
 8002008:	e157      	b.n	80022ba <__aeabi_dsub+0x392>
 800200a:	1b96      	subs	r6, r2, r6
 800200c:	1c71      	adds	r1, r6, #1
 800200e:	291f      	cmp	r1, #31
 8002010:	dd00      	ble.n	8002014 <__aeabi_dsub+0xec>
 8002012:	e1cb      	b.n	80023ac <__aeabi_dsub+0x484>
 8002014:	2220      	movs	r2, #32
 8002016:	0018      	movs	r0, r3
 8002018:	0026      	movs	r6, r4
 800201a:	1a52      	subs	r2, r2, r1
 800201c:	4094      	lsls	r4, r2
 800201e:	4090      	lsls	r0, r2
 8002020:	40ce      	lsrs	r6, r1
 8002022:	40cb      	lsrs	r3, r1
 8002024:	1e62      	subs	r2, r4, #1
 8002026:	4194      	sbcs	r4, r2
 8002028:	4330      	orrs	r0, r6
 800202a:	4698      	mov	r8, r3
 800202c:	2600      	movs	r6, #0
 800202e:	4304      	orrs	r4, r0
 8002030:	0763      	lsls	r3, r4, #29
 8002032:	d009      	beq.n	8002048 <__aeabi_dsub+0x120>
 8002034:	230f      	movs	r3, #15
 8002036:	4023      	ands	r3, r4
 8002038:	2b04      	cmp	r3, #4
 800203a:	d005      	beq.n	8002048 <__aeabi_dsub+0x120>
 800203c:	1d23      	adds	r3, r4, #4
 800203e:	42a3      	cmp	r3, r4
 8002040:	41a4      	sbcs	r4, r4
 8002042:	4264      	negs	r4, r4
 8002044:	44a0      	add	r8, r4
 8002046:	001c      	movs	r4, r3
 8002048:	4643      	mov	r3, r8
 800204a:	021b      	lsls	r3, r3, #8
 800204c:	d400      	bmi.n	8002050 <__aeabi_dsub+0x128>
 800204e:	e0df      	b.n	8002210 <__aeabi_dsub+0x2e8>
 8002050:	4b82      	ldr	r3, [pc, #520]	; (800225c <__aeabi_dsub+0x334>)
 8002052:	3601      	adds	r6, #1
 8002054:	429e      	cmp	r6, r3
 8002056:	d100      	bne.n	800205a <__aeabi_dsub+0x132>
 8002058:	e0fb      	b.n	8002252 <__aeabi_dsub+0x32a>
 800205a:	4642      	mov	r2, r8
 800205c:	4b80      	ldr	r3, [pc, #512]	; (8002260 <__aeabi_dsub+0x338>)
 800205e:	08e4      	lsrs	r4, r4, #3
 8002060:	401a      	ands	r2, r3
 8002062:	0013      	movs	r3, r2
 8002064:	0571      	lsls	r1, r6, #21
 8002066:	0752      	lsls	r2, r2, #29
 8002068:	025b      	lsls	r3, r3, #9
 800206a:	4322      	orrs	r2, r4
 800206c:	0b1b      	lsrs	r3, r3, #12
 800206e:	0d49      	lsrs	r1, r1, #21
 8002070:	0509      	lsls	r1, r1, #20
 8002072:	07ed      	lsls	r5, r5, #31
 8002074:	4319      	orrs	r1, r3
 8002076:	4329      	orrs	r1, r5
 8002078:	0010      	movs	r0, r2
 800207a:	bcf0      	pop	{r4, r5, r6, r7}
 800207c:	46bb      	mov	fp, r7
 800207e:	46b2      	mov	sl, r6
 8002080:	46a9      	mov	r9, r5
 8002082:	46a0      	mov	r8, r4
 8002084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002086:	1ab4      	subs	r4, r6, r2
 8002088:	46a4      	mov	ip, r4
 800208a:	2c00      	cmp	r4, #0
 800208c:	dd58      	ble.n	8002140 <__aeabi_dsub+0x218>
 800208e:	2a00      	cmp	r2, #0
 8002090:	d100      	bne.n	8002094 <__aeabi_dsub+0x16c>
 8002092:	e09e      	b.n	80021d2 <__aeabi_dsub+0x2aa>
 8002094:	4a71      	ldr	r2, [pc, #452]	; (800225c <__aeabi_dsub+0x334>)
 8002096:	4296      	cmp	r6, r2
 8002098:	d100      	bne.n	800209c <__aeabi_dsub+0x174>
 800209a:	e13b      	b.n	8002314 <__aeabi_dsub+0x3ec>
 800209c:	2280      	movs	r2, #128	; 0x80
 800209e:	0412      	lsls	r2, r2, #16
 80020a0:	4311      	orrs	r1, r2
 80020a2:	4662      	mov	r2, ip
 80020a4:	2a38      	cmp	r2, #56	; 0x38
 80020a6:	dd00      	ble.n	80020aa <__aeabi_dsub+0x182>
 80020a8:	e0c1      	b.n	800222e <__aeabi_dsub+0x306>
 80020aa:	2a1f      	cmp	r2, #31
 80020ac:	dc00      	bgt.n	80020b0 <__aeabi_dsub+0x188>
 80020ae:	e1bb      	b.n	8002428 <__aeabi_dsub+0x500>
 80020b0:	000c      	movs	r4, r1
 80020b2:	3a20      	subs	r2, #32
 80020b4:	40d4      	lsrs	r4, r2
 80020b6:	0022      	movs	r2, r4
 80020b8:	4664      	mov	r4, ip
 80020ba:	2c20      	cmp	r4, #32
 80020bc:	d004      	beq.n	80020c8 <__aeabi_dsub+0x1a0>
 80020be:	2740      	movs	r7, #64	; 0x40
 80020c0:	1b3f      	subs	r7, r7, r4
 80020c2:	40b9      	lsls	r1, r7
 80020c4:	4308      	orrs	r0, r1
 80020c6:	4680      	mov	r8, r0
 80020c8:	4644      	mov	r4, r8
 80020ca:	1e61      	subs	r1, r4, #1
 80020cc:	418c      	sbcs	r4, r1
 80020ce:	4314      	orrs	r4, r2
 80020d0:	e0b1      	b.n	8002236 <__aeabi_dsub+0x30e>
 80020d2:	000c      	movs	r4, r1
 80020d4:	4304      	orrs	r4, r0
 80020d6:	d02a      	beq.n	800212e <__aeabi_dsub+0x206>
 80020d8:	46bb      	mov	fp, r7
 80020da:	42bd      	cmp	r5, r7
 80020dc:	d02d      	beq.n	800213a <__aeabi_dsub+0x212>
 80020de:	4c61      	ldr	r4, [pc, #388]	; (8002264 <__aeabi_dsub+0x33c>)
 80020e0:	46a4      	mov	ip, r4
 80020e2:	44b4      	add	ip, r6
 80020e4:	4664      	mov	r4, ip
 80020e6:	2c00      	cmp	r4, #0
 80020e8:	d05c      	beq.n	80021a4 <__aeabi_dsub+0x27c>
 80020ea:	1b94      	subs	r4, r2, r6
 80020ec:	46a4      	mov	ip, r4
 80020ee:	2e00      	cmp	r6, #0
 80020f0:	d000      	beq.n	80020f4 <__aeabi_dsub+0x1cc>
 80020f2:	e115      	b.n	8002320 <__aeabi_dsub+0x3f8>
 80020f4:	464d      	mov	r5, r9
 80020f6:	431d      	orrs	r5, r3
 80020f8:	d100      	bne.n	80020fc <__aeabi_dsub+0x1d4>
 80020fa:	e1c3      	b.n	8002484 <__aeabi_dsub+0x55c>
 80020fc:	1e65      	subs	r5, r4, #1
 80020fe:	2c01      	cmp	r4, #1
 8002100:	d100      	bne.n	8002104 <__aeabi_dsub+0x1dc>
 8002102:	e20c      	b.n	800251e <__aeabi_dsub+0x5f6>
 8002104:	4e55      	ldr	r6, [pc, #340]	; (800225c <__aeabi_dsub+0x334>)
 8002106:	42b4      	cmp	r4, r6
 8002108:	d100      	bne.n	800210c <__aeabi_dsub+0x1e4>
 800210a:	e1f8      	b.n	80024fe <__aeabi_dsub+0x5d6>
 800210c:	46ac      	mov	ip, r5
 800210e:	e10e      	b.n	800232e <__aeabi_dsub+0x406>
 8002110:	000a      	movs	r2, r1
 8002112:	4302      	orrs	r2, r0
 8002114:	d100      	bne.n	8002118 <__aeabi_dsub+0x1f0>
 8002116:	e136      	b.n	8002386 <__aeabi_dsub+0x45e>
 8002118:	0022      	movs	r2, r4
 800211a:	3a01      	subs	r2, #1
 800211c:	2c01      	cmp	r4, #1
 800211e:	d100      	bne.n	8002122 <__aeabi_dsub+0x1fa>
 8002120:	e1c6      	b.n	80024b0 <__aeabi_dsub+0x588>
 8002122:	4c4e      	ldr	r4, [pc, #312]	; (800225c <__aeabi_dsub+0x334>)
 8002124:	45a4      	cmp	ip, r4
 8002126:	d100      	bne.n	800212a <__aeabi_dsub+0x202>
 8002128:	e0f4      	b.n	8002314 <__aeabi_dsub+0x3ec>
 800212a:	4694      	mov	ip, r2
 800212c:	e731      	b.n	8001f92 <__aeabi_dsub+0x6a>
 800212e:	2401      	movs	r4, #1
 8002130:	4067      	eors	r7, r4
 8002132:	46bb      	mov	fp, r7
 8002134:	42bd      	cmp	r5, r7
 8002136:	d000      	beq.n	800213a <__aeabi_dsub+0x212>
 8002138:	e71c      	b.n	8001f74 <__aeabi_dsub+0x4c>
 800213a:	4c4a      	ldr	r4, [pc, #296]	; (8002264 <__aeabi_dsub+0x33c>)
 800213c:	46a4      	mov	ip, r4
 800213e:	44b4      	add	ip, r6
 8002140:	4664      	mov	r4, ip
 8002142:	2c00      	cmp	r4, #0
 8002144:	d100      	bne.n	8002148 <__aeabi_dsub+0x220>
 8002146:	e0cf      	b.n	80022e8 <__aeabi_dsub+0x3c0>
 8002148:	1b94      	subs	r4, r2, r6
 800214a:	46a4      	mov	ip, r4
 800214c:	2e00      	cmp	r6, #0
 800214e:	d100      	bne.n	8002152 <__aeabi_dsub+0x22a>
 8002150:	e15c      	b.n	800240c <__aeabi_dsub+0x4e4>
 8002152:	4e42      	ldr	r6, [pc, #264]	; (800225c <__aeabi_dsub+0x334>)
 8002154:	42b2      	cmp	r2, r6
 8002156:	d100      	bne.n	800215a <__aeabi_dsub+0x232>
 8002158:	e1ec      	b.n	8002534 <__aeabi_dsub+0x60c>
 800215a:	2680      	movs	r6, #128	; 0x80
 800215c:	0436      	lsls	r6, r6, #16
 800215e:	4333      	orrs	r3, r6
 8002160:	4664      	mov	r4, ip
 8002162:	2c38      	cmp	r4, #56	; 0x38
 8002164:	dd00      	ble.n	8002168 <__aeabi_dsub+0x240>
 8002166:	e1b3      	b.n	80024d0 <__aeabi_dsub+0x5a8>
 8002168:	2c1f      	cmp	r4, #31
 800216a:	dd00      	ble.n	800216e <__aeabi_dsub+0x246>
 800216c:	e238      	b.n	80025e0 <__aeabi_dsub+0x6b8>
 800216e:	2620      	movs	r6, #32
 8002170:	1b36      	subs	r6, r6, r4
 8002172:	001c      	movs	r4, r3
 8002174:	40b4      	lsls	r4, r6
 8002176:	464f      	mov	r7, r9
 8002178:	46a0      	mov	r8, r4
 800217a:	4664      	mov	r4, ip
 800217c:	40e7      	lsrs	r7, r4
 800217e:	4644      	mov	r4, r8
 8002180:	433c      	orrs	r4, r7
 8002182:	464f      	mov	r7, r9
 8002184:	40b7      	lsls	r7, r6
 8002186:	003e      	movs	r6, r7
 8002188:	1e77      	subs	r7, r6, #1
 800218a:	41be      	sbcs	r6, r7
 800218c:	4334      	orrs	r4, r6
 800218e:	4666      	mov	r6, ip
 8002190:	40f3      	lsrs	r3, r6
 8002192:	18c9      	adds	r1, r1, r3
 8002194:	1824      	adds	r4, r4, r0
 8002196:	4284      	cmp	r4, r0
 8002198:	419b      	sbcs	r3, r3
 800219a:	425b      	negs	r3, r3
 800219c:	4698      	mov	r8, r3
 800219e:	0016      	movs	r6, r2
 80021a0:	4488      	add	r8, r1
 80021a2:	e04e      	b.n	8002242 <__aeabi_dsub+0x31a>
 80021a4:	4a30      	ldr	r2, [pc, #192]	; (8002268 <__aeabi_dsub+0x340>)
 80021a6:	1c74      	adds	r4, r6, #1
 80021a8:	4214      	tst	r4, r2
 80021aa:	d000      	beq.n	80021ae <__aeabi_dsub+0x286>
 80021ac:	e0d6      	b.n	800235c <__aeabi_dsub+0x434>
 80021ae:	464a      	mov	r2, r9
 80021b0:	431a      	orrs	r2, r3
 80021b2:	2e00      	cmp	r6, #0
 80021b4:	d000      	beq.n	80021b8 <__aeabi_dsub+0x290>
 80021b6:	e15b      	b.n	8002470 <__aeabi_dsub+0x548>
 80021b8:	2a00      	cmp	r2, #0
 80021ba:	d100      	bne.n	80021be <__aeabi_dsub+0x296>
 80021bc:	e1a5      	b.n	800250a <__aeabi_dsub+0x5e2>
 80021be:	000a      	movs	r2, r1
 80021c0:	4302      	orrs	r2, r0
 80021c2:	d000      	beq.n	80021c6 <__aeabi_dsub+0x29e>
 80021c4:	e1bb      	b.n	800253e <__aeabi_dsub+0x616>
 80021c6:	464a      	mov	r2, r9
 80021c8:	0759      	lsls	r1, r3, #29
 80021ca:	08d2      	lsrs	r2, r2, #3
 80021cc:	430a      	orrs	r2, r1
 80021ce:	08db      	lsrs	r3, r3, #3
 80021d0:	e027      	b.n	8002222 <__aeabi_dsub+0x2fa>
 80021d2:	000a      	movs	r2, r1
 80021d4:	4302      	orrs	r2, r0
 80021d6:	d100      	bne.n	80021da <__aeabi_dsub+0x2b2>
 80021d8:	e174      	b.n	80024c4 <__aeabi_dsub+0x59c>
 80021da:	0022      	movs	r2, r4
 80021dc:	3a01      	subs	r2, #1
 80021de:	2c01      	cmp	r4, #1
 80021e0:	d005      	beq.n	80021ee <__aeabi_dsub+0x2c6>
 80021e2:	4c1e      	ldr	r4, [pc, #120]	; (800225c <__aeabi_dsub+0x334>)
 80021e4:	45a4      	cmp	ip, r4
 80021e6:	d100      	bne.n	80021ea <__aeabi_dsub+0x2c2>
 80021e8:	e094      	b.n	8002314 <__aeabi_dsub+0x3ec>
 80021ea:	4694      	mov	ip, r2
 80021ec:	e759      	b.n	80020a2 <__aeabi_dsub+0x17a>
 80021ee:	4448      	add	r0, r9
 80021f0:	4548      	cmp	r0, r9
 80021f2:	4192      	sbcs	r2, r2
 80021f4:	185b      	adds	r3, r3, r1
 80021f6:	4698      	mov	r8, r3
 80021f8:	0004      	movs	r4, r0
 80021fa:	4252      	negs	r2, r2
 80021fc:	4490      	add	r8, r2
 80021fe:	4643      	mov	r3, r8
 8002200:	2602      	movs	r6, #2
 8002202:	021b      	lsls	r3, r3, #8
 8002204:	d500      	bpl.n	8002208 <__aeabi_dsub+0x2e0>
 8002206:	e0c4      	b.n	8002392 <__aeabi_dsub+0x46a>
 8002208:	3e01      	subs	r6, #1
 800220a:	0763      	lsls	r3, r4, #29
 800220c:	d000      	beq.n	8002210 <__aeabi_dsub+0x2e8>
 800220e:	e711      	b.n	8002034 <__aeabi_dsub+0x10c>
 8002210:	4643      	mov	r3, r8
 8002212:	46b4      	mov	ip, r6
 8002214:	0759      	lsls	r1, r3, #29
 8002216:	08e2      	lsrs	r2, r4, #3
 8002218:	430a      	orrs	r2, r1
 800221a:	08db      	lsrs	r3, r3, #3
 800221c:	490f      	ldr	r1, [pc, #60]	; (800225c <__aeabi_dsub+0x334>)
 800221e:	458c      	cmp	ip, r1
 8002220:	d040      	beq.n	80022a4 <__aeabi_dsub+0x37c>
 8002222:	4661      	mov	r1, ip
 8002224:	031b      	lsls	r3, r3, #12
 8002226:	0549      	lsls	r1, r1, #21
 8002228:	0b1b      	lsrs	r3, r3, #12
 800222a:	0d49      	lsrs	r1, r1, #21
 800222c:	e720      	b.n	8002070 <__aeabi_dsub+0x148>
 800222e:	4301      	orrs	r1, r0
 8002230:	000c      	movs	r4, r1
 8002232:	1e61      	subs	r1, r4, #1
 8002234:	418c      	sbcs	r4, r1
 8002236:	444c      	add	r4, r9
 8002238:	454c      	cmp	r4, r9
 800223a:	4192      	sbcs	r2, r2
 800223c:	4252      	negs	r2, r2
 800223e:	4690      	mov	r8, r2
 8002240:	4498      	add	r8, r3
 8002242:	4643      	mov	r3, r8
 8002244:	021b      	lsls	r3, r3, #8
 8002246:	d5e0      	bpl.n	800220a <__aeabi_dsub+0x2e2>
 8002248:	4b04      	ldr	r3, [pc, #16]	; (800225c <__aeabi_dsub+0x334>)
 800224a:	3601      	adds	r6, #1
 800224c:	429e      	cmp	r6, r3
 800224e:	d000      	beq.n	8002252 <__aeabi_dsub+0x32a>
 8002250:	e09f      	b.n	8002392 <__aeabi_dsub+0x46a>
 8002252:	0031      	movs	r1, r6
 8002254:	2300      	movs	r3, #0
 8002256:	2200      	movs	r2, #0
 8002258:	e70a      	b.n	8002070 <__aeabi_dsub+0x148>
 800225a:	46c0      	nop			; (mov r8, r8)
 800225c:	000007ff 	.word	0x000007ff
 8002260:	ff7fffff 	.word	0xff7fffff
 8002264:	fffff801 	.word	0xfffff801
 8002268:	000007fe 	.word	0x000007fe
 800226c:	2a00      	cmp	r2, #0
 800226e:	d100      	bne.n	8002272 <__aeabi_dsub+0x34a>
 8002270:	e160      	b.n	8002534 <__aeabi_dsub+0x60c>
 8002272:	000a      	movs	r2, r1
 8002274:	4302      	orrs	r2, r0
 8002276:	d04d      	beq.n	8002314 <__aeabi_dsub+0x3ec>
 8002278:	464a      	mov	r2, r9
 800227a:	075c      	lsls	r4, r3, #29
 800227c:	08d2      	lsrs	r2, r2, #3
 800227e:	4322      	orrs	r2, r4
 8002280:	2480      	movs	r4, #128	; 0x80
 8002282:	08db      	lsrs	r3, r3, #3
 8002284:	0324      	lsls	r4, r4, #12
 8002286:	4223      	tst	r3, r4
 8002288:	d007      	beq.n	800229a <__aeabi_dsub+0x372>
 800228a:	08ce      	lsrs	r6, r1, #3
 800228c:	4226      	tst	r6, r4
 800228e:	d104      	bne.n	800229a <__aeabi_dsub+0x372>
 8002290:	465d      	mov	r5, fp
 8002292:	0033      	movs	r3, r6
 8002294:	08c2      	lsrs	r2, r0, #3
 8002296:	0749      	lsls	r1, r1, #29
 8002298:	430a      	orrs	r2, r1
 800229a:	0f51      	lsrs	r1, r2, #29
 800229c:	00d2      	lsls	r2, r2, #3
 800229e:	08d2      	lsrs	r2, r2, #3
 80022a0:	0749      	lsls	r1, r1, #29
 80022a2:	430a      	orrs	r2, r1
 80022a4:	0011      	movs	r1, r2
 80022a6:	4319      	orrs	r1, r3
 80022a8:	d100      	bne.n	80022ac <__aeabi_dsub+0x384>
 80022aa:	e1c8      	b.n	800263e <__aeabi_dsub+0x716>
 80022ac:	2180      	movs	r1, #128	; 0x80
 80022ae:	0309      	lsls	r1, r1, #12
 80022b0:	430b      	orrs	r3, r1
 80022b2:	031b      	lsls	r3, r3, #12
 80022b4:	49d5      	ldr	r1, [pc, #852]	; (800260c <__aeabi_dsub+0x6e4>)
 80022b6:	0b1b      	lsrs	r3, r3, #12
 80022b8:	e6da      	b.n	8002070 <__aeabi_dsub+0x148>
 80022ba:	49d5      	ldr	r1, [pc, #852]	; (8002610 <__aeabi_dsub+0x6e8>)
 80022bc:	1ab6      	subs	r6, r6, r2
 80022be:	400b      	ands	r3, r1
 80022c0:	4698      	mov	r8, r3
 80022c2:	e6b5      	b.n	8002030 <__aeabi_dsub+0x108>
 80022c4:	0020      	movs	r0, r4
 80022c6:	f000 fa95 	bl	80027f4 <__clzsi2>
 80022ca:	0002      	movs	r2, r0
 80022cc:	3218      	adds	r2, #24
 80022ce:	2a1f      	cmp	r2, #31
 80022d0:	dc00      	bgt.n	80022d4 <__aeabi_dsub+0x3ac>
 80022d2:	e68f      	b.n	8001ff4 <__aeabi_dsub+0xcc>
 80022d4:	0023      	movs	r3, r4
 80022d6:	3808      	subs	r0, #8
 80022d8:	4083      	lsls	r3, r0
 80022da:	2400      	movs	r4, #0
 80022dc:	e692      	b.n	8002004 <__aeabi_dsub+0xdc>
 80022de:	4308      	orrs	r0, r1
 80022e0:	0002      	movs	r2, r0
 80022e2:	1e50      	subs	r0, r2, #1
 80022e4:	4182      	sbcs	r2, r0
 80022e6:	e66d      	b.n	8001fc4 <__aeabi_dsub+0x9c>
 80022e8:	4cca      	ldr	r4, [pc, #808]	; (8002614 <__aeabi_dsub+0x6ec>)
 80022ea:	1c72      	adds	r2, r6, #1
 80022ec:	4222      	tst	r2, r4
 80022ee:	d000      	beq.n	80022f2 <__aeabi_dsub+0x3ca>
 80022f0:	e0ad      	b.n	800244e <__aeabi_dsub+0x526>
 80022f2:	464a      	mov	r2, r9
 80022f4:	431a      	orrs	r2, r3
 80022f6:	2e00      	cmp	r6, #0
 80022f8:	d1b8      	bne.n	800226c <__aeabi_dsub+0x344>
 80022fa:	2a00      	cmp	r2, #0
 80022fc:	d100      	bne.n	8002300 <__aeabi_dsub+0x3d8>
 80022fe:	e158      	b.n	80025b2 <__aeabi_dsub+0x68a>
 8002300:	000a      	movs	r2, r1
 8002302:	4302      	orrs	r2, r0
 8002304:	d000      	beq.n	8002308 <__aeabi_dsub+0x3e0>
 8002306:	e159      	b.n	80025bc <__aeabi_dsub+0x694>
 8002308:	464a      	mov	r2, r9
 800230a:	0759      	lsls	r1, r3, #29
 800230c:	08d2      	lsrs	r2, r2, #3
 800230e:	430a      	orrs	r2, r1
 8002310:	08db      	lsrs	r3, r3, #3
 8002312:	e786      	b.n	8002222 <__aeabi_dsub+0x2fa>
 8002314:	464a      	mov	r2, r9
 8002316:	0759      	lsls	r1, r3, #29
 8002318:	08d2      	lsrs	r2, r2, #3
 800231a:	430a      	orrs	r2, r1
 800231c:	08db      	lsrs	r3, r3, #3
 800231e:	e7c1      	b.n	80022a4 <__aeabi_dsub+0x37c>
 8002320:	4dba      	ldr	r5, [pc, #744]	; (800260c <__aeabi_dsub+0x6e4>)
 8002322:	42aa      	cmp	r2, r5
 8002324:	d100      	bne.n	8002328 <__aeabi_dsub+0x400>
 8002326:	e11e      	b.n	8002566 <__aeabi_dsub+0x63e>
 8002328:	2580      	movs	r5, #128	; 0x80
 800232a:	042d      	lsls	r5, r5, #16
 800232c:	432b      	orrs	r3, r5
 800232e:	4664      	mov	r4, ip
 8002330:	2c38      	cmp	r4, #56	; 0x38
 8002332:	dc5d      	bgt.n	80023f0 <__aeabi_dsub+0x4c8>
 8002334:	2c1f      	cmp	r4, #31
 8002336:	dd00      	ble.n	800233a <__aeabi_dsub+0x412>
 8002338:	e0d0      	b.n	80024dc <__aeabi_dsub+0x5b4>
 800233a:	2520      	movs	r5, #32
 800233c:	4667      	mov	r7, ip
 800233e:	1b2d      	subs	r5, r5, r4
 8002340:	464e      	mov	r6, r9
 8002342:	001c      	movs	r4, r3
 8002344:	40fe      	lsrs	r6, r7
 8002346:	40ac      	lsls	r4, r5
 8002348:	4334      	orrs	r4, r6
 800234a:	464e      	mov	r6, r9
 800234c:	40ae      	lsls	r6, r5
 800234e:	0035      	movs	r5, r6
 8002350:	40fb      	lsrs	r3, r7
 8002352:	1e6e      	subs	r6, r5, #1
 8002354:	41b5      	sbcs	r5, r6
 8002356:	1ac9      	subs	r1, r1, r3
 8002358:	432c      	orrs	r4, r5
 800235a:	e04e      	b.n	80023fa <__aeabi_dsub+0x4d2>
 800235c:	464a      	mov	r2, r9
 800235e:	1a14      	subs	r4, r2, r0
 8002360:	45a1      	cmp	r9, r4
 8002362:	4192      	sbcs	r2, r2
 8002364:	4252      	negs	r2, r2
 8002366:	4690      	mov	r8, r2
 8002368:	1a5f      	subs	r7, r3, r1
 800236a:	003a      	movs	r2, r7
 800236c:	4647      	mov	r7, r8
 800236e:	1bd2      	subs	r2, r2, r7
 8002370:	4690      	mov	r8, r2
 8002372:	0212      	lsls	r2, r2, #8
 8002374:	d500      	bpl.n	8002378 <__aeabi_dsub+0x450>
 8002376:	e08b      	b.n	8002490 <__aeabi_dsub+0x568>
 8002378:	4642      	mov	r2, r8
 800237a:	4322      	orrs	r2, r4
 800237c:	d000      	beq.n	8002380 <__aeabi_dsub+0x458>
 800237e:	e630      	b.n	8001fe2 <__aeabi_dsub+0xba>
 8002380:	2300      	movs	r3, #0
 8002382:	2500      	movs	r5, #0
 8002384:	e74d      	b.n	8002222 <__aeabi_dsub+0x2fa>
 8002386:	464a      	mov	r2, r9
 8002388:	0759      	lsls	r1, r3, #29
 800238a:	08d2      	lsrs	r2, r2, #3
 800238c:	430a      	orrs	r2, r1
 800238e:	08db      	lsrs	r3, r3, #3
 8002390:	e744      	b.n	800221c <__aeabi_dsub+0x2f4>
 8002392:	4642      	mov	r2, r8
 8002394:	4b9e      	ldr	r3, [pc, #632]	; (8002610 <__aeabi_dsub+0x6e8>)
 8002396:	0861      	lsrs	r1, r4, #1
 8002398:	401a      	ands	r2, r3
 800239a:	0013      	movs	r3, r2
 800239c:	2201      	movs	r2, #1
 800239e:	4014      	ands	r4, r2
 80023a0:	430c      	orrs	r4, r1
 80023a2:	07da      	lsls	r2, r3, #31
 80023a4:	085b      	lsrs	r3, r3, #1
 80023a6:	4698      	mov	r8, r3
 80023a8:	4314      	orrs	r4, r2
 80023aa:	e641      	b.n	8002030 <__aeabi_dsub+0x108>
 80023ac:	001a      	movs	r2, r3
 80023ae:	3e1f      	subs	r6, #31
 80023b0:	40f2      	lsrs	r2, r6
 80023b2:	0016      	movs	r6, r2
 80023b4:	2920      	cmp	r1, #32
 80023b6:	d003      	beq.n	80023c0 <__aeabi_dsub+0x498>
 80023b8:	2240      	movs	r2, #64	; 0x40
 80023ba:	1a51      	subs	r1, r2, r1
 80023bc:	408b      	lsls	r3, r1
 80023be:	431c      	orrs	r4, r3
 80023c0:	1e62      	subs	r2, r4, #1
 80023c2:	4194      	sbcs	r4, r2
 80023c4:	2300      	movs	r3, #0
 80023c6:	4334      	orrs	r4, r6
 80023c8:	4698      	mov	r8, r3
 80023ca:	2600      	movs	r6, #0
 80023cc:	e71d      	b.n	800220a <__aeabi_dsub+0x2e2>
 80023ce:	000c      	movs	r4, r1
 80023d0:	3a20      	subs	r2, #32
 80023d2:	40d4      	lsrs	r4, r2
 80023d4:	0022      	movs	r2, r4
 80023d6:	4664      	mov	r4, ip
 80023d8:	2c20      	cmp	r4, #32
 80023da:	d004      	beq.n	80023e6 <__aeabi_dsub+0x4be>
 80023dc:	2740      	movs	r7, #64	; 0x40
 80023de:	1b3f      	subs	r7, r7, r4
 80023e0:	40b9      	lsls	r1, r7
 80023e2:	4308      	orrs	r0, r1
 80023e4:	4680      	mov	r8, r0
 80023e6:	4644      	mov	r4, r8
 80023e8:	1e61      	subs	r1, r4, #1
 80023ea:	418c      	sbcs	r4, r1
 80023ec:	4322      	orrs	r2, r4
 80023ee:	e5e9      	b.n	8001fc4 <__aeabi_dsub+0x9c>
 80023f0:	464c      	mov	r4, r9
 80023f2:	4323      	orrs	r3, r4
 80023f4:	001c      	movs	r4, r3
 80023f6:	1e63      	subs	r3, r4, #1
 80023f8:	419c      	sbcs	r4, r3
 80023fa:	1b04      	subs	r4, r0, r4
 80023fc:	42a0      	cmp	r0, r4
 80023fe:	419b      	sbcs	r3, r3
 8002400:	425b      	negs	r3, r3
 8002402:	1acb      	subs	r3, r1, r3
 8002404:	4698      	mov	r8, r3
 8002406:	465d      	mov	r5, fp
 8002408:	0016      	movs	r6, r2
 800240a:	e5e2      	b.n	8001fd2 <__aeabi_dsub+0xaa>
 800240c:	464e      	mov	r6, r9
 800240e:	431e      	orrs	r6, r3
 8002410:	d100      	bne.n	8002414 <__aeabi_dsub+0x4ec>
 8002412:	e0ae      	b.n	8002572 <__aeabi_dsub+0x64a>
 8002414:	1e66      	subs	r6, r4, #1
 8002416:	2c01      	cmp	r4, #1
 8002418:	d100      	bne.n	800241c <__aeabi_dsub+0x4f4>
 800241a:	e0fd      	b.n	8002618 <__aeabi_dsub+0x6f0>
 800241c:	4f7b      	ldr	r7, [pc, #492]	; (800260c <__aeabi_dsub+0x6e4>)
 800241e:	42bc      	cmp	r4, r7
 8002420:	d100      	bne.n	8002424 <__aeabi_dsub+0x4fc>
 8002422:	e107      	b.n	8002634 <__aeabi_dsub+0x70c>
 8002424:	46b4      	mov	ip, r6
 8002426:	e69b      	b.n	8002160 <__aeabi_dsub+0x238>
 8002428:	4664      	mov	r4, ip
 800242a:	2220      	movs	r2, #32
 800242c:	1b12      	subs	r2, r2, r4
 800242e:	000c      	movs	r4, r1
 8002430:	4094      	lsls	r4, r2
 8002432:	0007      	movs	r7, r0
 8002434:	4090      	lsls	r0, r2
 8002436:	46a0      	mov	r8, r4
 8002438:	4664      	mov	r4, ip
 800243a:	1e42      	subs	r2, r0, #1
 800243c:	4190      	sbcs	r0, r2
 800243e:	4662      	mov	r2, ip
 8002440:	40e7      	lsrs	r7, r4
 8002442:	4644      	mov	r4, r8
 8002444:	40d1      	lsrs	r1, r2
 8002446:	433c      	orrs	r4, r7
 8002448:	4304      	orrs	r4, r0
 800244a:	185b      	adds	r3, r3, r1
 800244c:	e6f3      	b.n	8002236 <__aeabi_dsub+0x30e>
 800244e:	4c6f      	ldr	r4, [pc, #444]	; (800260c <__aeabi_dsub+0x6e4>)
 8002450:	42a2      	cmp	r2, r4
 8002452:	d100      	bne.n	8002456 <__aeabi_dsub+0x52e>
 8002454:	e0d5      	b.n	8002602 <__aeabi_dsub+0x6da>
 8002456:	4448      	add	r0, r9
 8002458:	185b      	adds	r3, r3, r1
 800245a:	4548      	cmp	r0, r9
 800245c:	4189      	sbcs	r1, r1
 800245e:	4249      	negs	r1, r1
 8002460:	185b      	adds	r3, r3, r1
 8002462:	07dc      	lsls	r4, r3, #31
 8002464:	0840      	lsrs	r0, r0, #1
 8002466:	085b      	lsrs	r3, r3, #1
 8002468:	4698      	mov	r8, r3
 800246a:	0016      	movs	r6, r2
 800246c:	4304      	orrs	r4, r0
 800246e:	e6cc      	b.n	800220a <__aeabi_dsub+0x2e2>
 8002470:	2a00      	cmp	r2, #0
 8002472:	d000      	beq.n	8002476 <__aeabi_dsub+0x54e>
 8002474:	e082      	b.n	800257c <__aeabi_dsub+0x654>
 8002476:	000a      	movs	r2, r1
 8002478:	4302      	orrs	r2, r0
 800247a:	d140      	bne.n	80024fe <__aeabi_dsub+0x5d6>
 800247c:	2380      	movs	r3, #128	; 0x80
 800247e:	2500      	movs	r5, #0
 8002480:	031b      	lsls	r3, r3, #12
 8002482:	e713      	b.n	80022ac <__aeabi_dsub+0x384>
 8002484:	074b      	lsls	r3, r1, #29
 8002486:	08c2      	lsrs	r2, r0, #3
 8002488:	431a      	orrs	r2, r3
 800248a:	465d      	mov	r5, fp
 800248c:	08cb      	lsrs	r3, r1, #3
 800248e:	e6c5      	b.n	800221c <__aeabi_dsub+0x2f4>
 8002490:	464a      	mov	r2, r9
 8002492:	1a84      	subs	r4, r0, r2
 8002494:	42a0      	cmp	r0, r4
 8002496:	4192      	sbcs	r2, r2
 8002498:	1acb      	subs	r3, r1, r3
 800249a:	4252      	negs	r2, r2
 800249c:	1a9b      	subs	r3, r3, r2
 800249e:	4698      	mov	r8, r3
 80024a0:	465d      	mov	r5, fp
 80024a2:	e59e      	b.n	8001fe2 <__aeabi_dsub+0xba>
 80024a4:	464a      	mov	r2, r9
 80024a6:	0759      	lsls	r1, r3, #29
 80024a8:	08d2      	lsrs	r2, r2, #3
 80024aa:	430a      	orrs	r2, r1
 80024ac:	08db      	lsrs	r3, r3, #3
 80024ae:	e6f9      	b.n	80022a4 <__aeabi_dsub+0x37c>
 80024b0:	464a      	mov	r2, r9
 80024b2:	1a14      	subs	r4, r2, r0
 80024b4:	45a1      	cmp	r9, r4
 80024b6:	4192      	sbcs	r2, r2
 80024b8:	1a5b      	subs	r3, r3, r1
 80024ba:	4252      	negs	r2, r2
 80024bc:	1a9b      	subs	r3, r3, r2
 80024be:	4698      	mov	r8, r3
 80024c0:	2601      	movs	r6, #1
 80024c2:	e586      	b.n	8001fd2 <__aeabi_dsub+0xaa>
 80024c4:	464a      	mov	r2, r9
 80024c6:	0759      	lsls	r1, r3, #29
 80024c8:	08d2      	lsrs	r2, r2, #3
 80024ca:	430a      	orrs	r2, r1
 80024cc:	08db      	lsrs	r3, r3, #3
 80024ce:	e6a5      	b.n	800221c <__aeabi_dsub+0x2f4>
 80024d0:	464c      	mov	r4, r9
 80024d2:	4323      	orrs	r3, r4
 80024d4:	001c      	movs	r4, r3
 80024d6:	1e63      	subs	r3, r4, #1
 80024d8:	419c      	sbcs	r4, r3
 80024da:	e65b      	b.n	8002194 <__aeabi_dsub+0x26c>
 80024dc:	4665      	mov	r5, ip
 80024de:	001e      	movs	r6, r3
 80024e0:	3d20      	subs	r5, #32
 80024e2:	40ee      	lsrs	r6, r5
 80024e4:	2c20      	cmp	r4, #32
 80024e6:	d005      	beq.n	80024f4 <__aeabi_dsub+0x5cc>
 80024e8:	2540      	movs	r5, #64	; 0x40
 80024ea:	1b2d      	subs	r5, r5, r4
 80024ec:	40ab      	lsls	r3, r5
 80024ee:	464c      	mov	r4, r9
 80024f0:	431c      	orrs	r4, r3
 80024f2:	46a2      	mov	sl, r4
 80024f4:	4654      	mov	r4, sl
 80024f6:	1e63      	subs	r3, r4, #1
 80024f8:	419c      	sbcs	r4, r3
 80024fa:	4334      	orrs	r4, r6
 80024fc:	e77d      	b.n	80023fa <__aeabi_dsub+0x4d2>
 80024fe:	074b      	lsls	r3, r1, #29
 8002500:	08c2      	lsrs	r2, r0, #3
 8002502:	431a      	orrs	r2, r3
 8002504:	465d      	mov	r5, fp
 8002506:	08cb      	lsrs	r3, r1, #3
 8002508:	e6cc      	b.n	80022a4 <__aeabi_dsub+0x37c>
 800250a:	000a      	movs	r2, r1
 800250c:	4302      	orrs	r2, r0
 800250e:	d100      	bne.n	8002512 <__aeabi_dsub+0x5ea>
 8002510:	e736      	b.n	8002380 <__aeabi_dsub+0x458>
 8002512:	074b      	lsls	r3, r1, #29
 8002514:	08c2      	lsrs	r2, r0, #3
 8002516:	431a      	orrs	r2, r3
 8002518:	465d      	mov	r5, fp
 800251a:	08cb      	lsrs	r3, r1, #3
 800251c:	e681      	b.n	8002222 <__aeabi_dsub+0x2fa>
 800251e:	464a      	mov	r2, r9
 8002520:	1a84      	subs	r4, r0, r2
 8002522:	42a0      	cmp	r0, r4
 8002524:	4192      	sbcs	r2, r2
 8002526:	1acb      	subs	r3, r1, r3
 8002528:	4252      	negs	r2, r2
 800252a:	1a9b      	subs	r3, r3, r2
 800252c:	4698      	mov	r8, r3
 800252e:	465d      	mov	r5, fp
 8002530:	2601      	movs	r6, #1
 8002532:	e54e      	b.n	8001fd2 <__aeabi_dsub+0xaa>
 8002534:	074b      	lsls	r3, r1, #29
 8002536:	08c2      	lsrs	r2, r0, #3
 8002538:	431a      	orrs	r2, r3
 800253a:	08cb      	lsrs	r3, r1, #3
 800253c:	e6b2      	b.n	80022a4 <__aeabi_dsub+0x37c>
 800253e:	464a      	mov	r2, r9
 8002540:	1a14      	subs	r4, r2, r0
 8002542:	45a1      	cmp	r9, r4
 8002544:	4192      	sbcs	r2, r2
 8002546:	1a5f      	subs	r7, r3, r1
 8002548:	4252      	negs	r2, r2
 800254a:	1aba      	subs	r2, r7, r2
 800254c:	4690      	mov	r8, r2
 800254e:	0212      	lsls	r2, r2, #8
 8002550:	d56b      	bpl.n	800262a <__aeabi_dsub+0x702>
 8002552:	464a      	mov	r2, r9
 8002554:	1a84      	subs	r4, r0, r2
 8002556:	42a0      	cmp	r0, r4
 8002558:	4192      	sbcs	r2, r2
 800255a:	1acb      	subs	r3, r1, r3
 800255c:	4252      	negs	r2, r2
 800255e:	1a9b      	subs	r3, r3, r2
 8002560:	4698      	mov	r8, r3
 8002562:	465d      	mov	r5, fp
 8002564:	e564      	b.n	8002030 <__aeabi_dsub+0x108>
 8002566:	074b      	lsls	r3, r1, #29
 8002568:	08c2      	lsrs	r2, r0, #3
 800256a:	431a      	orrs	r2, r3
 800256c:	465d      	mov	r5, fp
 800256e:	08cb      	lsrs	r3, r1, #3
 8002570:	e698      	b.n	80022a4 <__aeabi_dsub+0x37c>
 8002572:	074b      	lsls	r3, r1, #29
 8002574:	08c2      	lsrs	r2, r0, #3
 8002576:	431a      	orrs	r2, r3
 8002578:	08cb      	lsrs	r3, r1, #3
 800257a:	e64f      	b.n	800221c <__aeabi_dsub+0x2f4>
 800257c:	000a      	movs	r2, r1
 800257e:	4302      	orrs	r2, r0
 8002580:	d090      	beq.n	80024a4 <__aeabi_dsub+0x57c>
 8002582:	464a      	mov	r2, r9
 8002584:	075c      	lsls	r4, r3, #29
 8002586:	08d2      	lsrs	r2, r2, #3
 8002588:	4314      	orrs	r4, r2
 800258a:	2280      	movs	r2, #128	; 0x80
 800258c:	08db      	lsrs	r3, r3, #3
 800258e:	0312      	lsls	r2, r2, #12
 8002590:	4213      	tst	r3, r2
 8002592:	d008      	beq.n	80025a6 <__aeabi_dsub+0x67e>
 8002594:	08ce      	lsrs	r6, r1, #3
 8002596:	4216      	tst	r6, r2
 8002598:	d105      	bne.n	80025a6 <__aeabi_dsub+0x67e>
 800259a:	08c0      	lsrs	r0, r0, #3
 800259c:	0749      	lsls	r1, r1, #29
 800259e:	4308      	orrs	r0, r1
 80025a0:	0004      	movs	r4, r0
 80025a2:	465d      	mov	r5, fp
 80025a4:	0033      	movs	r3, r6
 80025a6:	0f61      	lsrs	r1, r4, #29
 80025a8:	00e2      	lsls	r2, r4, #3
 80025aa:	0749      	lsls	r1, r1, #29
 80025ac:	08d2      	lsrs	r2, r2, #3
 80025ae:	430a      	orrs	r2, r1
 80025b0:	e678      	b.n	80022a4 <__aeabi_dsub+0x37c>
 80025b2:	074b      	lsls	r3, r1, #29
 80025b4:	08c2      	lsrs	r2, r0, #3
 80025b6:	431a      	orrs	r2, r3
 80025b8:	08cb      	lsrs	r3, r1, #3
 80025ba:	e632      	b.n	8002222 <__aeabi_dsub+0x2fa>
 80025bc:	4448      	add	r0, r9
 80025be:	185b      	adds	r3, r3, r1
 80025c0:	4548      	cmp	r0, r9
 80025c2:	4192      	sbcs	r2, r2
 80025c4:	4698      	mov	r8, r3
 80025c6:	4252      	negs	r2, r2
 80025c8:	4490      	add	r8, r2
 80025ca:	4643      	mov	r3, r8
 80025cc:	0004      	movs	r4, r0
 80025ce:	021b      	lsls	r3, r3, #8
 80025d0:	d400      	bmi.n	80025d4 <__aeabi_dsub+0x6ac>
 80025d2:	e61a      	b.n	800220a <__aeabi_dsub+0x2e2>
 80025d4:	4642      	mov	r2, r8
 80025d6:	4b0e      	ldr	r3, [pc, #56]	; (8002610 <__aeabi_dsub+0x6e8>)
 80025d8:	2601      	movs	r6, #1
 80025da:	401a      	ands	r2, r3
 80025dc:	4690      	mov	r8, r2
 80025de:	e614      	b.n	800220a <__aeabi_dsub+0x2e2>
 80025e0:	4666      	mov	r6, ip
 80025e2:	001f      	movs	r7, r3
 80025e4:	3e20      	subs	r6, #32
 80025e6:	40f7      	lsrs	r7, r6
 80025e8:	2c20      	cmp	r4, #32
 80025ea:	d005      	beq.n	80025f8 <__aeabi_dsub+0x6d0>
 80025ec:	2640      	movs	r6, #64	; 0x40
 80025ee:	1b36      	subs	r6, r6, r4
 80025f0:	40b3      	lsls	r3, r6
 80025f2:	464c      	mov	r4, r9
 80025f4:	431c      	orrs	r4, r3
 80025f6:	46a2      	mov	sl, r4
 80025f8:	4654      	mov	r4, sl
 80025fa:	1e63      	subs	r3, r4, #1
 80025fc:	419c      	sbcs	r4, r3
 80025fe:	433c      	orrs	r4, r7
 8002600:	e5c8      	b.n	8002194 <__aeabi_dsub+0x26c>
 8002602:	0011      	movs	r1, r2
 8002604:	2300      	movs	r3, #0
 8002606:	2200      	movs	r2, #0
 8002608:	e532      	b.n	8002070 <__aeabi_dsub+0x148>
 800260a:	46c0      	nop			; (mov r8, r8)
 800260c:	000007ff 	.word	0x000007ff
 8002610:	ff7fffff 	.word	0xff7fffff
 8002614:	000007fe 	.word	0x000007fe
 8002618:	464a      	mov	r2, r9
 800261a:	1814      	adds	r4, r2, r0
 800261c:	4284      	cmp	r4, r0
 800261e:	4192      	sbcs	r2, r2
 8002620:	185b      	adds	r3, r3, r1
 8002622:	4698      	mov	r8, r3
 8002624:	4252      	negs	r2, r2
 8002626:	4490      	add	r8, r2
 8002628:	e5e9      	b.n	80021fe <__aeabi_dsub+0x2d6>
 800262a:	4642      	mov	r2, r8
 800262c:	4322      	orrs	r2, r4
 800262e:	d100      	bne.n	8002632 <__aeabi_dsub+0x70a>
 8002630:	e6a6      	b.n	8002380 <__aeabi_dsub+0x458>
 8002632:	e5ea      	b.n	800220a <__aeabi_dsub+0x2e2>
 8002634:	074b      	lsls	r3, r1, #29
 8002636:	08c2      	lsrs	r2, r0, #3
 8002638:	431a      	orrs	r2, r3
 800263a:	08cb      	lsrs	r3, r1, #3
 800263c:	e632      	b.n	80022a4 <__aeabi_dsub+0x37c>
 800263e:	2200      	movs	r2, #0
 8002640:	4901      	ldr	r1, [pc, #4]	; (8002648 <__aeabi_dsub+0x720>)
 8002642:	0013      	movs	r3, r2
 8002644:	e514      	b.n	8002070 <__aeabi_dsub+0x148>
 8002646:	46c0      	nop			; (mov r8, r8)
 8002648:	000007ff 	.word	0x000007ff

0800264c <__aeabi_d2iz>:
 800264c:	000a      	movs	r2, r1
 800264e:	b530      	push	{r4, r5, lr}
 8002650:	4c13      	ldr	r4, [pc, #76]	; (80026a0 <__aeabi_d2iz+0x54>)
 8002652:	0053      	lsls	r3, r2, #1
 8002654:	0309      	lsls	r1, r1, #12
 8002656:	0005      	movs	r5, r0
 8002658:	0b09      	lsrs	r1, r1, #12
 800265a:	2000      	movs	r0, #0
 800265c:	0d5b      	lsrs	r3, r3, #21
 800265e:	0fd2      	lsrs	r2, r2, #31
 8002660:	42a3      	cmp	r3, r4
 8002662:	dd04      	ble.n	800266e <__aeabi_d2iz+0x22>
 8002664:	480f      	ldr	r0, [pc, #60]	; (80026a4 <__aeabi_d2iz+0x58>)
 8002666:	4283      	cmp	r3, r0
 8002668:	dd02      	ble.n	8002670 <__aeabi_d2iz+0x24>
 800266a:	4b0f      	ldr	r3, [pc, #60]	; (80026a8 <__aeabi_d2iz+0x5c>)
 800266c:	18d0      	adds	r0, r2, r3
 800266e:	bd30      	pop	{r4, r5, pc}
 8002670:	2080      	movs	r0, #128	; 0x80
 8002672:	0340      	lsls	r0, r0, #13
 8002674:	4301      	orrs	r1, r0
 8002676:	480d      	ldr	r0, [pc, #52]	; (80026ac <__aeabi_d2iz+0x60>)
 8002678:	1ac0      	subs	r0, r0, r3
 800267a:	281f      	cmp	r0, #31
 800267c:	dd08      	ble.n	8002690 <__aeabi_d2iz+0x44>
 800267e:	480c      	ldr	r0, [pc, #48]	; (80026b0 <__aeabi_d2iz+0x64>)
 8002680:	1ac3      	subs	r3, r0, r3
 8002682:	40d9      	lsrs	r1, r3
 8002684:	000b      	movs	r3, r1
 8002686:	4258      	negs	r0, r3
 8002688:	2a00      	cmp	r2, #0
 800268a:	d1f0      	bne.n	800266e <__aeabi_d2iz+0x22>
 800268c:	0018      	movs	r0, r3
 800268e:	e7ee      	b.n	800266e <__aeabi_d2iz+0x22>
 8002690:	4c08      	ldr	r4, [pc, #32]	; (80026b4 <__aeabi_d2iz+0x68>)
 8002692:	40c5      	lsrs	r5, r0
 8002694:	46a4      	mov	ip, r4
 8002696:	4463      	add	r3, ip
 8002698:	4099      	lsls	r1, r3
 800269a:	000b      	movs	r3, r1
 800269c:	432b      	orrs	r3, r5
 800269e:	e7f2      	b.n	8002686 <__aeabi_d2iz+0x3a>
 80026a0:	000003fe 	.word	0x000003fe
 80026a4:	0000041d 	.word	0x0000041d
 80026a8:	7fffffff 	.word	0x7fffffff
 80026ac:	00000433 	.word	0x00000433
 80026b0:	00000413 	.word	0x00000413
 80026b4:	fffffbed 	.word	0xfffffbed

080026b8 <__aeabi_i2d>:
 80026b8:	b570      	push	{r4, r5, r6, lr}
 80026ba:	2800      	cmp	r0, #0
 80026bc:	d016      	beq.n	80026ec <__aeabi_i2d+0x34>
 80026be:	17c3      	asrs	r3, r0, #31
 80026c0:	18c5      	adds	r5, r0, r3
 80026c2:	405d      	eors	r5, r3
 80026c4:	0fc4      	lsrs	r4, r0, #31
 80026c6:	0028      	movs	r0, r5
 80026c8:	f000 f894 	bl	80027f4 <__clzsi2>
 80026cc:	4a11      	ldr	r2, [pc, #68]	; (8002714 <__aeabi_i2d+0x5c>)
 80026ce:	1a12      	subs	r2, r2, r0
 80026d0:	280a      	cmp	r0, #10
 80026d2:	dc16      	bgt.n	8002702 <__aeabi_i2d+0x4a>
 80026d4:	0003      	movs	r3, r0
 80026d6:	002e      	movs	r6, r5
 80026d8:	3315      	adds	r3, #21
 80026da:	409e      	lsls	r6, r3
 80026dc:	230b      	movs	r3, #11
 80026de:	1a18      	subs	r0, r3, r0
 80026e0:	40c5      	lsrs	r5, r0
 80026e2:	0553      	lsls	r3, r2, #21
 80026e4:	032d      	lsls	r5, r5, #12
 80026e6:	0b2d      	lsrs	r5, r5, #12
 80026e8:	0d5b      	lsrs	r3, r3, #21
 80026ea:	e003      	b.n	80026f4 <__aeabi_i2d+0x3c>
 80026ec:	2400      	movs	r4, #0
 80026ee:	2300      	movs	r3, #0
 80026f0:	2500      	movs	r5, #0
 80026f2:	2600      	movs	r6, #0
 80026f4:	051b      	lsls	r3, r3, #20
 80026f6:	432b      	orrs	r3, r5
 80026f8:	07e4      	lsls	r4, r4, #31
 80026fa:	4323      	orrs	r3, r4
 80026fc:	0030      	movs	r0, r6
 80026fe:	0019      	movs	r1, r3
 8002700:	bd70      	pop	{r4, r5, r6, pc}
 8002702:	380b      	subs	r0, #11
 8002704:	4085      	lsls	r5, r0
 8002706:	0553      	lsls	r3, r2, #21
 8002708:	032d      	lsls	r5, r5, #12
 800270a:	2600      	movs	r6, #0
 800270c:	0b2d      	lsrs	r5, r5, #12
 800270e:	0d5b      	lsrs	r3, r3, #21
 8002710:	e7f0      	b.n	80026f4 <__aeabi_i2d+0x3c>
 8002712:	46c0      	nop			; (mov r8, r8)
 8002714:	0000041e 	.word	0x0000041e

08002718 <__aeabi_ui2d>:
 8002718:	b510      	push	{r4, lr}
 800271a:	1e04      	subs	r4, r0, #0
 800271c:	d010      	beq.n	8002740 <__aeabi_ui2d+0x28>
 800271e:	f000 f869 	bl	80027f4 <__clzsi2>
 8002722:	4b0f      	ldr	r3, [pc, #60]	; (8002760 <__aeabi_ui2d+0x48>)
 8002724:	1a1b      	subs	r3, r3, r0
 8002726:	280a      	cmp	r0, #10
 8002728:	dc11      	bgt.n	800274e <__aeabi_ui2d+0x36>
 800272a:	220b      	movs	r2, #11
 800272c:	0021      	movs	r1, r4
 800272e:	1a12      	subs	r2, r2, r0
 8002730:	40d1      	lsrs	r1, r2
 8002732:	3015      	adds	r0, #21
 8002734:	030a      	lsls	r2, r1, #12
 8002736:	055b      	lsls	r3, r3, #21
 8002738:	4084      	lsls	r4, r0
 800273a:	0b12      	lsrs	r2, r2, #12
 800273c:	0d5b      	lsrs	r3, r3, #21
 800273e:	e001      	b.n	8002744 <__aeabi_ui2d+0x2c>
 8002740:	2300      	movs	r3, #0
 8002742:	2200      	movs	r2, #0
 8002744:	051b      	lsls	r3, r3, #20
 8002746:	4313      	orrs	r3, r2
 8002748:	0020      	movs	r0, r4
 800274a:	0019      	movs	r1, r3
 800274c:	bd10      	pop	{r4, pc}
 800274e:	0022      	movs	r2, r4
 8002750:	380b      	subs	r0, #11
 8002752:	4082      	lsls	r2, r0
 8002754:	055b      	lsls	r3, r3, #21
 8002756:	0312      	lsls	r2, r2, #12
 8002758:	2400      	movs	r4, #0
 800275a:	0b12      	lsrs	r2, r2, #12
 800275c:	0d5b      	lsrs	r3, r3, #21
 800275e:	e7f1      	b.n	8002744 <__aeabi_ui2d+0x2c>
 8002760:	0000041e 	.word	0x0000041e

08002764 <__aeabi_f2d>:
 8002764:	b570      	push	{r4, r5, r6, lr}
 8002766:	0043      	lsls	r3, r0, #1
 8002768:	0246      	lsls	r6, r0, #9
 800276a:	0fc4      	lsrs	r4, r0, #31
 800276c:	20fe      	movs	r0, #254	; 0xfe
 800276e:	0e1b      	lsrs	r3, r3, #24
 8002770:	1c59      	adds	r1, r3, #1
 8002772:	0a75      	lsrs	r5, r6, #9
 8002774:	4208      	tst	r0, r1
 8002776:	d00c      	beq.n	8002792 <__aeabi_f2d+0x2e>
 8002778:	22e0      	movs	r2, #224	; 0xe0
 800277a:	0092      	lsls	r2, r2, #2
 800277c:	4694      	mov	ip, r2
 800277e:	076d      	lsls	r5, r5, #29
 8002780:	0b36      	lsrs	r6, r6, #12
 8002782:	4463      	add	r3, ip
 8002784:	051b      	lsls	r3, r3, #20
 8002786:	4333      	orrs	r3, r6
 8002788:	07e4      	lsls	r4, r4, #31
 800278a:	4323      	orrs	r3, r4
 800278c:	0028      	movs	r0, r5
 800278e:	0019      	movs	r1, r3
 8002790:	bd70      	pop	{r4, r5, r6, pc}
 8002792:	2b00      	cmp	r3, #0
 8002794:	d114      	bne.n	80027c0 <__aeabi_f2d+0x5c>
 8002796:	2d00      	cmp	r5, #0
 8002798:	d01b      	beq.n	80027d2 <__aeabi_f2d+0x6e>
 800279a:	0028      	movs	r0, r5
 800279c:	f000 f82a 	bl	80027f4 <__clzsi2>
 80027a0:	280a      	cmp	r0, #10
 80027a2:	dc1c      	bgt.n	80027de <__aeabi_f2d+0x7a>
 80027a4:	230b      	movs	r3, #11
 80027a6:	002a      	movs	r2, r5
 80027a8:	1a1b      	subs	r3, r3, r0
 80027aa:	40da      	lsrs	r2, r3
 80027ac:	0003      	movs	r3, r0
 80027ae:	3315      	adds	r3, #21
 80027b0:	409d      	lsls	r5, r3
 80027b2:	4b0e      	ldr	r3, [pc, #56]	; (80027ec <__aeabi_f2d+0x88>)
 80027b4:	0312      	lsls	r2, r2, #12
 80027b6:	1a1b      	subs	r3, r3, r0
 80027b8:	055b      	lsls	r3, r3, #21
 80027ba:	0b16      	lsrs	r6, r2, #12
 80027bc:	0d5b      	lsrs	r3, r3, #21
 80027be:	e7e1      	b.n	8002784 <__aeabi_f2d+0x20>
 80027c0:	2d00      	cmp	r5, #0
 80027c2:	d009      	beq.n	80027d8 <__aeabi_f2d+0x74>
 80027c4:	0b32      	lsrs	r2, r6, #12
 80027c6:	2680      	movs	r6, #128	; 0x80
 80027c8:	0336      	lsls	r6, r6, #12
 80027ca:	4b09      	ldr	r3, [pc, #36]	; (80027f0 <__aeabi_f2d+0x8c>)
 80027cc:	076d      	lsls	r5, r5, #29
 80027ce:	4316      	orrs	r6, r2
 80027d0:	e7d8      	b.n	8002784 <__aeabi_f2d+0x20>
 80027d2:	2300      	movs	r3, #0
 80027d4:	2600      	movs	r6, #0
 80027d6:	e7d5      	b.n	8002784 <__aeabi_f2d+0x20>
 80027d8:	2600      	movs	r6, #0
 80027da:	4b05      	ldr	r3, [pc, #20]	; (80027f0 <__aeabi_f2d+0x8c>)
 80027dc:	e7d2      	b.n	8002784 <__aeabi_f2d+0x20>
 80027de:	0003      	movs	r3, r0
 80027e0:	002a      	movs	r2, r5
 80027e2:	3b0b      	subs	r3, #11
 80027e4:	409a      	lsls	r2, r3
 80027e6:	2500      	movs	r5, #0
 80027e8:	e7e3      	b.n	80027b2 <__aeabi_f2d+0x4e>
 80027ea:	46c0      	nop			; (mov r8, r8)
 80027ec:	00000389 	.word	0x00000389
 80027f0:	000007ff 	.word	0x000007ff

080027f4 <__clzsi2>:
 80027f4:	211c      	movs	r1, #28
 80027f6:	2301      	movs	r3, #1
 80027f8:	041b      	lsls	r3, r3, #16
 80027fa:	4298      	cmp	r0, r3
 80027fc:	d301      	bcc.n	8002802 <__clzsi2+0xe>
 80027fe:	0c00      	lsrs	r0, r0, #16
 8002800:	3910      	subs	r1, #16
 8002802:	0a1b      	lsrs	r3, r3, #8
 8002804:	4298      	cmp	r0, r3
 8002806:	d301      	bcc.n	800280c <__clzsi2+0x18>
 8002808:	0a00      	lsrs	r0, r0, #8
 800280a:	3908      	subs	r1, #8
 800280c:	091b      	lsrs	r3, r3, #4
 800280e:	4298      	cmp	r0, r3
 8002810:	d301      	bcc.n	8002816 <__clzsi2+0x22>
 8002812:	0900      	lsrs	r0, r0, #4
 8002814:	3904      	subs	r1, #4
 8002816:	a202      	add	r2, pc, #8	; (adr r2, 8002820 <__clzsi2+0x2c>)
 8002818:	5c10      	ldrb	r0, [r2, r0]
 800281a:	1840      	adds	r0, r0, r1
 800281c:	4770      	bx	lr
 800281e:	46c0      	nop			; (mov r8, r8)
 8002820:	02020304 	.word	0x02020304
 8002824:	01010101 	.word	0x01010101
	...

08002830 <__clzdi2>:
 8002830:	b510      	push	{r4, lr}
 8002832:	2900      	cmp	r1, #0
 8002834:	d103      	bne.n	800283e <__clzdi2+0xe>
 8002836:	f7ff ffdd 	bl	80027f4 <__clzsi2>
 800283a:	3020      	adds	r0, #32
 800283c:	e002      	b.n	8002844 <__clzdi2+0x14>
 800283e:	1c08      	adds	r0, r1, #0
 8002840:	f7ff ffd8 	bl	80027f4 <__clzsi2>
 8002844:	bd10      	pop	{r4, pc}
 8002846:	46c0      	nop			; (mov r8, r8)

08002848 <__divdi3>:
 8002848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800284a:	4657      	mov	r7, sl
 800284c:	464e      	mov	r6, r9
 800284e:	4645      	mov	r5, r8
 8002850:	46de      	mov	lr, fp
 8002852:	b5e0      	push	{r5, r6, r7, lr}
 8002854:	000f      	movs	r7, r1
 8002856:	0019      	movs	r1, r3
 8002858:	2300      	movs	r3, #0
 800285a:	0006      	movs	r6, r0
 800285c:	4698      	mov	r8, r3
 800285e:	0010      	movs	r0, r2
 8002860:	b083      	sub	sp, #12
 8002862:	2f00      	cmp	r7, #0
 8002864:	da07      	bge.n	8002876 <__divdi3+0x2e>
 8002866:	0033      	movs	r3, r6
 8002868:	003c      	movs	r4, r7
 800286a:	2700      	movs	r7, #0
 800286c:	425e      	negs	r6, r3
 800286e:	41a7      	sbcs	r7, r4
 8002870:	2301      	movs	r3, #1
 8002872:	425b      	negs	r3, r3
 8002874:	4698      	mov	r8, r3
 8002876:	2900      	cmp	r1, #0
 8002878:	da07      	bge.n	800288a <__divdi3+0x42>
 800287a:	4643      	mov	r3, r8
 800287c:	43db      	mvns	r3, r3
 800287e:	000c      	movs	r4, r1
 8002880:	4698      	mov	r8, r3
 8002882:	0003      	movs	r3, r0
 8002884:	2100      	movs	r1, #0
 8002886:	4258      	negs	r0, r3
 8002888:	41a1      	sbcs	r1, r4
 800288a:	0034      	movs	r4, r6
 800288c:	003d      	movs	r5, r7
 800288e:	4682      	mov	sl, r0
 8002890:	4689      	mov	r9, r1
 8002892:	42b9      	cmp	r1, r7
 8002894:	d86a      	bhi.n	800296c <__divdi3+0x124>
 8002896:	d067      	beq.n	8002968 <__divdi3+0x120>
 8002898:	4649      	mov	r1, r9
 800289a:	4650      	mov	r0, sl
 800289c:	f7ff ffc8 	bl	8002830 <__clzdi2>
 80028a0:	4683      	mov	fp, r0
 80028a2:	0039      	movs	r1, r7
 80028a4:	0030      	movs	r0, r6
 80028a6:	f7ff ffc3 	bl	8002830 <__clzdi2>
 80028aa:	465b      	mov	r3, fp
 80028ac:	1a1b      	subs	r3, r3, r0
 80028ae:	469c      	mov	ip, r3
 80028b0:	3b20      	subs	r3, #32
 80028b2:	469b      	mov	fp, r3
 80028b4:	d46b      	bmi.n	800298e <__divdi3+0x146>
 80028b6:	4658      	mov	r0, fp
 80028b8:	4651      	mov	r1, sl
 80028ba:	4081      	lsls	r1, r0
 80028bc:	4660      	mov	r0, ip
 80028be:	000b      	movs	r3, r1
 80028c0:	4651      	mov	r1, sl
 80028c2:	4081      	lsls	r1, r0
 80028c4:	000a      	movs	r2, r1
 80028c6:	42bb      	cmp	r3, r7
 80028c8:	d900      	bls.n	80028cc <__divdi3+0x84>
 80028ca:	e072      	b.n	80029b2 <__divdi3+0x16a>
 80028cc:	42bb      	cmp	r3, r7
 80028ce:	d100      	bne.n	80028d2 <__divdi3+0x8a>
 80028d0:	e079      	b.n	80029c6 <__divdi3+0x17e>
 80028d2:	0034      	movs	r4, r6
 80028d4:	003d      	movs	r5, r7
 80028d6:	4659      	mov	r1, fp
 80028d8:	1aa4      	subs	r4, r4, r2
 80028da:	419d      	sbcs	r5, r3
 80028dc:	2900      	cmp	r1, #0
 80028de:	da00      	bge.n	80028e2 <__divdi3+0x9a>
 80028e0:	e074      	b.n	80029cc <__divdi3+0x184>
 80028e2:	2100      	movs	r1, #0
 80028e4:	2000      	movs	r0, #0
 80028e6:	2601      	movs	r6, #1
 80028e8:	9000      	str	r0, [sp, #0]
 80028ea:	9101      	str	r1, [sp, #4]
 80028ec:	4659      	mov	r1, fp
 80028ee:	408e      	lsls	r6, r1
 80028f0:	9601      	str	r6, [sp, #4]
 80028f2:	4661      	mov	r1, ip
 80028f4:	2601      	movs	r6, #1
 80028f6:	408e      	lsls	r6, r1
 80028f8:	4661      	mov	r1, ip
 80028fa:	9600      	str	r6, [sp, #0]
 80028fc:	2900      	cmp	r1, #0
 80028fe:	d05f      	beq.n	80029c0 <__divdi3+0x178>
 8002900:	07d9      	lsls	r1, r3, #31
 8002902:	0856      	lsrs	r6, r2, #1
 8002904:	430e      	orrs	r6, r1
 8002906:	085f      	lsrs	r7, r3, #1
 8002908:	4661      	mov	r1, ip
 800290a:	2201      	movs	r2, #1
 800290c:	2300      	movs	r3, #0
 800290e:	e00c      	b.n	800292a <__divdi3+0xe2>
 8002910:	42af      	cmp	r7, r5
 8002912:	d101      	bne.n	8002918 <__divdi3+0xd0>
 8002914:	42a6      	cmp	r6, r4
 8002916:	d80a      	bhi.n	800292e <__divdi3+0xe6>
 8002918:	1ba4      	subs	r4, r4, r6
 800291a:	41bd      	sbcs	r5, r7
 800291c:	1924      	adds	r4, r4, r4
 800291e:	416d      	adcs	r5, r5
 8002920:	3901      	subs	r1, #1
 8002922:	18a4      	adds	r4, r4, r2
 8002924:	415d      	adcs	r5, r3
 8002926:	2900      	cmp	r1, #0
 8002928:	d006      	beq.n	8002938 <__divdi3+0xf0>
 800292a:	42af      	cmp	r7, r5
 800292c:	d9f0      	bls.n	8002910 <__divdi3+0xc8>
 800292e:	3901      	subs	r1, #1
 8002930:	1924      	adds	r4, r4, r4
 8002932:	416d      	adcs	r5, r5
 8002934:	2900      	cmp	r1, #0
 8002936:	d1f8      	bne.n	800292a <__divdi3+0xe2>
 8002938:	9800      	ldr	r0, [sp, #0]
 800293a:	9901      	ldr	r1, [sp, #4]
 800293c:	465b      	mov	r3, fp
 800293e:	1900      	adds	r0, r0, r4
 8002940:	4169      	adcs	r1, r5
 8002942:	2b00      	cmp	r3, #0
 8002944:	db4d      	blt.n	80029e2 <__divdi3+0x19a>
 8002946:	002e      	movs	r6, r5
 8002948:	002c      	movs	r4, r5
 800294a:	40de      	lsrs	r6, r3
 800294c:	4663      	mov	r3, ip
 800294e:	40dc      	lsrs	r4, r3
 8002950:	465b      	mov	r3, fp
 8002952:	2b00      	cmp	r3, #0
 8002954:	db55      	blt.n	8002a02 <__divdi3+0x1ba>
 8002956:	0034      	movs	r4, r6
 8002958:	409c      	lsls	r4, r3
 800295a:	0023      	movs	r3, r4
 800295c:	4664      	mov	r4, ip
 800295e:	40a6      	lsls	r6, r4
 8002960:	0032      	movs	r2, r6
 8002962:	1a80      	subs	r0, r0, r2
 8002964:	4199      	sbcs	r1, r3
 8002966:	e003      	b.n	8002970 <__divdi3+0x128>
 8002968:	42b0      	cmp	r0, r6
 800296a:	d995      	bls.n	8002898 <__divdi3+0x50>
 800296c:	2000      	movs	r0, #0
 800296e:	2100      	movs	r1, #0
 8002970:	4643      	mov	r3, r8
 8002972:	2b00      	cmp	r3, #0
 8002974:	d004      	beq.n	8002980 <__divdi3+0x138>
 8002976:	0003      	movs	r3, r0
 8002978:	000c      	movs	r4, r1
 800297a:	2100      	movs	r1, #0
 800297c:	4258      	negs	r0, r3
 800297e:	41a1      	sbcs	r1, r4
 8002980:	b003      	add	sp, #12
 8002982:	bcf0      	pop	{r4, r5, r6, r7}
 8002984:	46bb      	mov	fp, r7
 8002986:	46b2      	mov	sl, r6
 8002988:	46a9      	mov	r9, r5
 800298a:	46a0      	mov	r8, r4
 800298c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800298e:	4662      	mov	r2, ip
 8002990:	4648      	mov	r0, r9
 8002992:	2320      	movs	r3, #32
 8002994:	4651      	mov	r1, sl
 8002996:	4090      	lsls	r0, r2
 8002998:	1a9b      	subs	r3, r3, r2
 800299a:	40d9      	lsrs	r1, r3
 800299c:	0003      	movs	r3, r0
 800299e:	9100      	str	r1, [sp, #0]
 80029a0:	9900      	ldr	r1, [sp, #0]
 80029a2:	4660      	mov	r0, ip
 80029a4:	430b      	orrs	r3, r1
 80029a6:	4651      	mov	r1, sl
 80029a8:	4081      	lsls	r1, r0
 80029aa:	000a      	movs	r2, r1
 80029ac:	42bb      	cmp	r3, r7
 80029ae:	d800      	bhi.n	80029b2 <__divdi3+0x16a>
 80029b0:	e78c      	b.n	80028cc <__divdi3+0x84>
 80029b2:	2100      	movs	r1, #0
 80029b4:	2000      	movs	r0, #0
 80029b6:	9000      	str	r0, [sp, #0]
 80029b8:	9101      	str	r1, [sp, #4]
 80029ba:	4661      	mov	r1, ip
 80029bc:	2900      	cmp	r1, #0
 80029be:	d19f      	bne.n	8002900 <__divdi3+0xb8>
 80029c0:	9800      	ldr	r0, [sp, #0]
 80029c2:	9901      	ldr	r1, [sp, #4]
 80029c4:	e7d4      	b.n	8002970 <__divdi3+0x128>
 80029c6:	42b1      	cmp	r1, r6
 80029c8:	d8f3      	bhi.n	80029b2 <__divdi3+0x16a>
 80029ca:	e782      	b.n	80028d2 <__divdi3+0x8a>
 80029cc:	4661      	mov	r1, ip
 80029ce:	2620      	movs	r6, #32
 80029d0:	2701      	movs	r7, #1
 80029d2:	1a76      	subs	r6, r6, r1
 80029d4:	2000      	movs	r0, #0
 80029d6:	2100      	movs	r1, #0
 80029d8:	40f7      	lsrs	r7, r6
 80029da:	9000      	str	r0, [sp, #0]
 80029dc:	9101      	str	r1, [sp, #4]
 80029de:	9701      	str	r7, [sp, #4]
 80029e0:	e787      	b.n	80028f2 <__divdi3+0xaa>
 80029e2:	4662      	mov	r2, ip
 80029e4:	2320      	movs	r3, #32
 80029e6:	1a9b      	subs	r3, r3, r2
 80029e8:	002a      	movs	r2, r5
 80029ea:	409a      	lsls	r2, r3
 80029ec:	0026      	movs	r6, r4
 80029ee:	0013      	movs	r3, r2
 80029f0:	4662      	mov	r2, ip
 80029f2:	40d6      	lsrs	r6, r2
 80029f4:	002c      	movs	r4, r5
 80029f6:	431e      	orrs	r6, r3
 80029f8:	4663      	mov	r3, ip
 80029fa:	40dc      	lsrs	r4, r3
 80029fc:	465b      	mov	r3, fp
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	daa9      	bge.n	8002956 <__divdi3+0x10e>
 8002a02:	4662      	mov	r2, ip
 8002a04:	2320      	movs	r3, #32
 8002a06:	0035      	movs	r5, r6
 8002a08:	4094      	lsls	r4, r2
 8002a0a:	1a9b      	subs	r3, r3, r2
 8002a0c:	40dd      	lsrs	r5, r3
 8002a0e:	0023      	movs	r3, r4
 8002a10:	432b      	orrs	r3, r5
 8002a12:	e7a3      	b.n	800295c <__divdi3+0x114>

08002a14 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8002a18:	f002 f82a 	bl	8004a70 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8002a1c:	f000 f80e 	bl	8002a3c <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8002a20:	46c0      	nop			; (mov r8, r8)
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	425b      	negs	r3, r3
 8002a2e:	0018      	movs	r0, r3
 8002a30:	f019 fde4 	bl	801c5fc <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 8002a34:	46c0      	nop			; (mov r8, r8)
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
	...

08002a3c <LoRaWAN_Init>:
//MX_I2C1_Init(hi2c1);
//MX_USART2_Init();
/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af04      	add	r7, sp, #16
	   	bmp280.addr = BMP280_I2C_ADDRESS_0;
	   	bmp280.i2c = &hi2c1;
*/
	   //float pressure1, temperature1, humidity1;
  /* USER CODE END LoRaWAN_Init_1 */
  LED_Init(LED_BLUE);
 8002a42:	2002      	movs	r0, #2
 8002a44:	f002 ff62 	bl	800590c <BSP_LED_Init>
  LED_Init(LED_RED1);
 8002a48:	2001      	movs	r0, #1
 8002a4a:	f002 ff5f 	bl	800590c <BSP_LED_Init>
  LED_Init(LED_RED2);
 8002a4e:	2003      	movs	r0, #3
 8002a50:	f002 ff5c 	bl	800590c <BSP_LED_Init>
  /* Get LoRa APP version*/
//  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION:        V%X.%X.%X\r\n",
//          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_MAIN_SHIFT),
//          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB1_SHIFT),
//          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB2_SHIFT));
  APP_LOG(TS_OFF, VLEVEL_M, "###### Версия протокола:   V%X.%X.%X\r\n",
 8002a54:	4b3e      	ldr	r3, [pc, #248]	; (8002b50 <LoRaWAN_Init+0x114>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	9202      	str	r2, [sp, #8]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	9201      	str	r2, [sp, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	9200      	str	r2, [sp, #0]
 8002a62:	2200      	movs	r2, #0
 8002a64:	2100      	movs	r1, #0
 8002a66:	2002      	movs	r0, #2
 8002a68:	f019 fa06 	bl	801be78 <UTIL_ADV_TRACE_COND_FSend>
//          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB1_SHIFT),
//          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB2_SHIFT)); // версия радио Middleware
  // APP_LOG(TS_OFF, VLEVEL_M, "MW_:   V%X.%X.%X\r\n",
//  APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ==== EEEPROM EST====\r\n");
  //	 (uint8_t) buffer[20]);
  UTIL_TIMER_Create(&TxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 8002a6c:	4b39      	ldr	r3, [pc, #228]	; (8002b54 <LoRaWAN_Init+0x118>)
 8002a6e:	2201      	movs	r2, #1
 8002a70:	4251      	negs	r1, r2
 8002a72:	4839      	ldr	r0, [pc, #228]	; (8002b58 <LoRaWAN_Init+0x11c>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	9200      	str	r2, [sp, #0]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f01a f891 	bl	801cba0 <UTIL_TIMER_Create>
  // HAL_LPTIM_Counter_Start_IT(&hlptim,1000);
 // HAL_LPTIM_TimeOut_Start(&TxLedTimer, uint32_t Period, uint32_t Timeout);
  //  HAL_LPTIM_TimeOut_Start(&TxLedTimer,5000,1000);
   UTIL_TIMER_Create(&RxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 8002a7e:	4b37      	ldr	r3, [pc, #220]	; (8002b5c <LoRaWAN_Init+0x120>)
 8002a80:	2201      	movs	r2, #1
 8002a82:	4251      	negs	r1, r2
 8002a84:	4836      	ldr	r0, [pc, #216]	; (8002b60 <LoRaWAN_Init+0x124>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	9200      	str	r2, [sp, #0]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f01a f888 	bl	801cba0 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, 0xFFFFFFFFU, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 8002a90:	4b34      	ldr	r3, [pc, #208]	; (8002b64 <LoRaWAN_Init+0x128>)
 8002a92:	2201      	movs	r2, #1
 8002a94:	4251      	negs	r1, r2
 8002a96:	4834      	ldr	r0, [pc, #208]	; (8002b68 <LoRaWAN_Init+0x12c>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	9200      	str	r2, [sp, #0]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f01a f87f 	bl	801cba0 <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&TxLedTimer, 500);// 3 стр отрубают светодиоды если их не будет,
 8002aa2:	23fa      	movs	r3, #250	; 0xfa
 8002aa4:	005a      	lsls	r2, r3, #1
 8002aa6:	4b2c      	ldr	r3, [pc, #176]	; (8002b58 <LoRaWAN_Init+0x11c>)
 8002aa8:	0011      	movs	r1, r2
 8002aaa:	0018      	movs	r0, r3
 8002aac:	f01a f9a0 	bl	801cdf0 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&RxLedTimer, 500);
 8002ab0:	23fa      	movs	r3, #250	; 0xfa
 8002ab2:	005a      	lsls	r2, r3, #1
 8002ab4:	4b2a      	ldr	r3, [pc, #168]	; (8002b60 <LoRaWAN_Init+0x124>)
 8002ab6:	0011      	movs	r1, r2
 8002ab8:	0018      	movs	r0, r3
 8002aba:	f01a f999 	bl	801cdf0 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&JoinLedTimer, 500);
 8002abe:	23fa      	movs	r3, #250	; 0xfa
 8002ac0:	005a      	lsls	r2, r3, #1
 8002ac2:	4b29      	ldr	r3, [pc, #164]	; (8002b68 <LoRaWAN_Init+0x12c>)
 8002ac4:	0011      	movs	r1, r2
 8002ac6:	0018      	movs	r0, r3
 8002ac8:	f01a f992 	bl	801cdf0 <UTIL_TIMER_SetPeriod>
 // bmp280_read_float(&bmp280, &temperature1, &pressure1, &humidity1);
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 8002acc:	4b27      	ldr	r3, [pc, #156]	; (8002b6c <LoRaWAN_Init+0x130>)
 8002ace:	001a      	movs	r2, r3
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	2001      	movs	r0, #1
 8002ad4:	f019 fe74 	bl	801c7c0 <UTIL_SEQ_RegTask>
 8002ad8:	4b25      	ldr	r3, [pc, #148]	; (8002b70 <LoRaWAN_Init+0x134>)
 8002ada:	001a      	movs	r2, r3
 8002adc:	2100      	movs	r1, #0
 8002ade:	2002      	movs	r0, #2
 8002ae0:	f019 fe6e 	bl	801c7c0 <UTIL_SEQ_RegTask>
  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 8002ae4:	f000 fbae 	bl	8003244 <LoraInfo_Init>
  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks);
 8002ae8:	4b22      	ldr	r3, [pc, #136]	; (8002b74 <LoRaWAN_Init+0x138>)
 8002aea:	0018      	movs	r0, r3
 8002aec:	f00b f9a6 	bl	800de3c <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 8002af0:	4b21      	ldr	r3, [pc, #132]	; (8002b78 <LoRaWAN_Init+0x13c>)
 8002af2:	0018      	movs	r0, r3
 8002af4:	f00b f9e8 	bl	800dec8 <LmHandlerConfigure>

  UTIL_TIMER_Start(&JoinLedTimer);
 8002af8:	4b1b      	ldr	r3, [pc, #108]	; (8002b68 <LoRaWAN_Init+0x12c>)
 8002afa:	0018      	movs	r0, r3
 8002afc:	f01a f888 	bl	801cc10 <UTIL_TIMER_Start>
  // HAL_LPTIM_Counter_Start_IT(&JoinLedTimer,1000); // попытка переделать светодиодом под LPTIM
  LmHandlerJoin(ActivationType);
 8002b00:	4b1e      	ldr	r3, [pc, #120]	; (8002b7c <LoRaWAN_Init+0x140>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	0018      	movs	r0, r3
 8002b06:	f00b fb2f 	bl	800e168 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 8002b0a:	4b1d      	ldr	r3, [pc, #116]	; (8002b80 <LoRaWAN_Init+0x144>)
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d115      	bne.n	8002b3e <LoRaWAN_Init+0x102>
  {
    /* send every time timer elapses */
 uint32_t APPTXDUTYCYCLE; // Для конфигурации периода передачи только нужно добавить в EEPROM
 APPTXDUTYCYCLE = 10000; // Для конфигурации периода передачи
 8002b12:	4b1c      	ldr	r3, [pc, #112]	; (8002b84 <LoRaWAN_Init+0x148>)
 8002b14:	607b      	str	r3, [r7, #4]
    UTIL_TIMER_Create(&TxTimer,  0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 8002b16:	4b1c      	ldr	r3, [pc, #112]	; (8002b88 <LoRaWAN_Init+0x14c>)
 8002b18:	2201      	movs	r2, #1
 8002b1a:	4251      	negs	r1, r2
 8002b1c:	481b      	ldr	r0, [pc, #108]	; (8002b8c <LoRaWAN_Init+0x150>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	9200      	str	r2, [sp, #0]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f01a f83c 	bl	801cba0 <UTIL_TIMER_Create>
//    UTIL_TIMER_SetPeriod(&TxTimer,  APP_TX_DUTYCYCLE);
    UTIL_TIMER_SetPeriod(&TxTimer,  APPTXDUTYCYCLE);
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	4b18      	ldr	r3, [pc, #96]	; (8002b8c <LoRaWAN_Init+0x150>)
 8002b2c:	0011      	movs	r1, r2
 8002b2e:	0018      	movs	r0, r3
 8002b30:	f01a f95e 	bl	801cdf0 <UTIL_TIMER_SetPeriod>
    //  HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
    //  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
    //HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI); // NEW
      UTIL_TIMER_Start(&TxTimer);
 8002b34:	4b15      	ldr	r3, [pc, #84]	; (8002b8c <LoRaWAN_Init+0x150>)
 8002b36:	0018      	movs	r0, r3
 8002b38:	f01a f86a 	bl	801cc10 <UTIL_TIMER_Start>
  /* bmp280_init_default_params(&bmp280.params);
   	bmp280.addr = BMP280_I2C_ADDRESS_0;
   	bmp280.i2c = &hi2c1;
   	*/
  /* USER CODE END LoRaWAN_Init_Last */
}
 8002b3c:	e003      	b.n	8002b46 <LoRaWAN_Init+0x10a>
    BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8002b3e:	2101      	movs	r1, #1
 8002b40:	2000      	movs	r0, #0
 8002b42:	f002 ffa5 	bl	8005a90 <BSP_PB_Init>
}
 8002b46:	46c0      	nop			; (mov r8, r8)
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	b002      	add	sp, #8
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	46c0      	nop			; (mov r8, r8)
 8002b50:	0801eb20 	.word	0x0801eb20
 8002b54:	08002fb9 	.word	0x08002fb9
 8002b58:	20000364 	.word	0x20000364
 8002b5c:	08002fcf 	.word	0x08002fcf
 8002b60:	2000037c 	.word	0x2000037c
 8002b64:	08002fe5 	.word	0x08002fe5
 8002b68:	20000394 	.word	0x20000394
 8002b6c:	0800e0ad 	.word	0x0800e0ad
 8002b70:	08002cc5 	.word	0x08002cc5
 8002b74:	2000000c 	.word	0x2000000c
 8002b78:	2000002c 	.word	0x2000002c
 8002b7c:	20000008 	.word	0x20000008
 8002b80:	2000034b 	.word	0x2000034b
 8002b84:	00002710 	.word	0x00002710
 8002b88:	08002f95 	.word	0x08002f95
 8002b8c:	2000034c 	.word	0x2000034c

08002b90 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 8002b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b92:	b089      	sub	sp, #36	; 0x24
 8002b94:	af06      	add	r7, sp, #24
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */

  /* USER CODE END OnRxData_1 */
  if ((appData != NULL) && (params != NULL))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d100      	bne.n	8002ba2 <OnRxData+0x12>
 8002ba0:	e07a      	b.n	8002c98 <OnRxData+0x108>
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d100      	bne.n	8002baa <OnRxData+0x1a>
 8002ba8:	e076      	b.n	8002c98 <OnRxData+0x108>
  {
    LED_On(LED_BLUE);
 8002baa:	2002      	movs	r0, #2
 8002bac:	f002 ff1c 	bl	80059e8 <BSP_LED_On>
    static const char *slotStrings[] = { "1", "2", "C", "C Multicast", "B Ping-Slot", "B Multicast Ping-Slot" };

//    APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Indication ==========\r\n");
    APP_LOG(TS_OFF, VLEVEL_M, "\r\n ========== Индикация приёма данных ==========\r\n");
 8002bb0:	4b3e      	ldr	r3, [pc, #248]	; (8002cac <OnRxData+0x11c>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	2100      	movs	r1, #0
 8002bb6:	2002      	movs	r0, #2
 8002bb8:	f019 f95e 	bl	801be78 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, " D/L FRAME:%04d | SLOT:%s | PORT:%d | DR:%d | RSSI:%d | SNR:%d\r\n",
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	7b12      	ldrb	r2, [r2, #12]
 8002bc4:	b252      	sxtb	r2, r2
 8002bc6:	0011      	movs	r1, r2
 8002bc8:	4a39      	ldr	r2, [pc, #228]	; (8002cb0 <OnRxData+0x120>)
 8002bca:	0089      	lsls	r1, r1, #2
 8002bcc:	588a      	ldr	r2, [r1, r2]
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	7809      	ldrb	r1, [r1, #0]
 8002bd2:	0008      	movs	r0, r1
 8002bd4:	6839      	ldr	r1, [r7, #0]
 8002bd6:	7889      	ldrb	r1, [r1, #2]
 8002bd8:	b249      	sxtb	r1, r1
 8002bda:	000c      	movs	r4, r1
 8002bdc:	6839      	ldr	r1, [r7, #0]
 8002bde:	78c9      	ldrb	r1, [r1, #3]
 8002be0:	b249      	sxtb	r1, r1
 8002be2:	000d      	movs	r5, r1
 8002be4:	6839      	ldr	r1, [r7, #0]
 8002be6:	7909      	ldrb	r1, [r1, #4]
 8002be8:	b249      	sxtb	r1, r1
 8002bea:	000e      	movs	r6, r1
 8002bec:	4931      	ldr	r1, [pc, #196]	; (8002cb4 <OnRxData+0x124>)
 8002bee:	9605      	str	r6, [sp, #20]
 8002bf0:	9504      	str	r5, [sp, #16]
 8002bf2:	9403      	str	r4, [sp, #12]
 8002bf4:	9002      	str	r0, [sp, #8]
 8002bf6:	9201      	str	r2, [sp, #4]
 8002bf8:	9300      	str	r3, [sp, #0]
 8002bfa:	000b      	movs	r3, r1
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	2100      	movs	r1, #0
 8002c00:	2003      	movs	r0, #3
 8002c02:	f019 f939 	bl	801be78 <UTIL_ADV_TRACE_COND_FSend>
            params->DownlinkCounter, slotStrings[params->RxSlot], appData->Port, params->Datarate, params->Rssi, params->Snr);
    switch (appData->Port)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d020      	beq.n	8002c50 <OnRxData+0xc0>
 8002c0e:	2b03      	cmp	r3, #3
 8002c10:	d144      	bne.n	8002c9c <OnRxData+0x10c>
    {
      case LORAWAN_SWITCH_CLASS_PORT:
        /*this port switches the class*/
        if (appData->BufferSize == 1)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	785b      	ldrb	r3, [r3, #1]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d116      	bne.n	8002c48 <OnRxData+0xb8>
        {
          switch (appData->Buffer[0])
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d00d      	beq.n	8002c40 <OnRxData+0xb0>
 8002c24:	dc12      	bgt.n	8002c4c <OnRxData+0xbc>
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d002      	beq.n	8002c30 <OnRxData+0xa0>
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d004      	beq.n	8002c38 <OnRxData+0xa8>
            {
              LmHandlerRequestClass(CLASS_C);
              break;
            }
            default:
              break;
 8002c2e:	e00d      	b.n	8002c4c <OnRxData+0xbc>
              LmHandlerRequestClass(CLASS_A);
 8002c30:	2000      	movs	r0, #0
 8002c32:	f00b fbf3 	bl	800e41c <LmHandlerRequestClass>
              break;
 8002c36:	e00a      	b.n	8002c4e <OnRxData+0xbe>
              LmHandlerRequestClass(CLASS_B);
 8002c38:	2001      	movs	r0, #1
 8002c3a:	f00b fbef 	bl	800e41c <LmHandlerRequestClass>
              break;
 8002c3e:	e006      	b.n	8002c4e <OnRxData+0xbe>
              LmHandlerRequestClass(CLASS_C);
 8002c40:	2002      	movs	r0, #2
 8002c42:	f00b fbeb 	bl	800e41c <LmHandlerRequestClass>
              break;
 8002c46:	e002      	b.n	8002c4e <OnRxData+0xbe>
          }
        }
 8002c48:	46c0      	nop			; (mov r8, r8)
 8002c4a:	e02a      	b.n	8002ca2 <OnRxData+0x112>
              break;
 8002c4c:	46c0      	nop			; (mov r8, r8)
        break;
 8002c4e:	e028      	b.n	8002ca2 <OnRxData+0x112>
      case LORAWAN_USER_APP_PORT:
        if (appData->BufferSize == 1)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	785b      	ldrb	r3, [r3, #1]
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d123      	bne.n	8002ca0 <OnRxData+0x110>
        {
          AppLedStateOn = appData->Buffer[0] & 0x01;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	4013      	ands	r3, r2
 8002c62:	b2da      	uxtb	r2, r3
 8002c64:	4b14      	ldr	r3, [pc, #80]	; (8002cb8 <OnRxData+0x128>)
 8002c66:	701a      	strb	r2, [r3, #0]
          if (AppLedStateOn == RESET)
 8002c68:	4b13      	ldr	r3, [pc, #76]	; (8002cb8 <OnRxData+0x128>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d109      	bne.n	8002c84 <OnRxData+0xf4>
          {
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
 8002c70:	4b12      	ldr	r3, [pc, #72]	; (8002cbc <OnRxData+0x12c>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	2100      	movs	r1, #0
 8002c76:	2003      	movs	r0, #3
 8002c78:	f019 f8fe 	bl	801be78 <UTIL_ADV_TRACE_COND_FSend>

            LED_Off(LED_RED1);
 8002c7c:	2001      	movs	r0, #1
 8002c7e:	f002 fecf 	bl	8005a20 <BSP_LED_Off>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");

            LED_On(LED_RED1);
          }
        }
        break;
 8002c82:	e00d      	b.n	8002ca0 <OnRxData+0x110>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 8002c84:	4b0e      	ldr	r3, [pc, #56]	; (8002cc0 <OnRxData+0x130>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	2100      	movs	r1, #0
 8002c8a:	2003      	movs	r0, #3
 8002c8c:	f019 f8f4 	bl	801be78 <UTIL_ADV_TRACE_COND_FSend>
            LED_On(LED_RED1);
 8002c90:	2001      	movs	r0, #1
 8002c92:	f002 fea9 	bl	80059e8 <BSP_LED_On>
        break;
 8002c96:	e003      	b.n	8002ca0 <OnRxData+0x110>
        /* USER CODE BEGIN OnRxData_Switch_default */

        /* USER CODE END OnRxData_Switch_default */
        break;
    }
  }
 8002c98:	46c0      	nop			; (mov r8, r8)
 8002c9a:	e002      	b.n	8002ca2 <OnRxData+0x112>
        break;
 8002c9c:	46c0      	nop			; (mov r8, r8)
 8002c9e:	e000      	b.n	8002ca2 <OnRxData+0x112>
        break;
 8002ca0:	46c0      	nop			; (mov r8, r8)

  /* USER CODE BEGIN OnRxData_2 */

  /* USER CODE END OnRxData_2 */
}
 8002ca2:	46c0      	nop			; (mov r8, r8)
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	b003      	add	sp, #12
 8002ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002caa:	46c0      	nop			; (mov r8, r8)
 8002cac:	0801eb58 	.word	0x0801eb58
 8002cb0:	20000034 	.word	0x20000034
 8002cb4:	0801eba0 	.word	0x0801eba0
 8002cb8:	2000034a 	.word	0x2000034a
 8002cbc:	0801ebe4 	.word	0x0801ebe4
 8002cc0:	0801ebf0 	.word	0x0801ebf0

08002cc4 <SendTxData>:

static void SendTxData(void)
{
 8002cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cc6:	b0e3      	sub	sp, #396	; 0x18c
 8002cc8:	af06      	add	r7, sp, #24
	// uint8_t payload = "textovik";
	 uint16_t pressure = 0;
 8002cca:	23b7      	movs	r3, #183	; 0xb7
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	18fb      	adds	r3, r7, r3
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	801a      	strh	r2, [r3, #0]
	 int16_t temperature = 0;
 8002cd4:	23b6      	movs	r3, #182	; 0xb6
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	18fb      	adds	r3, r7, r3
 8002cda:	2200      	movs	r2, #0
 8002cdc:	801a      	strh	r2, [r3, #0]
  	//int16_t temperature = 0;
  	uint16_t Defbuff;  // для счётчика с охранной кнопки
  sensor_t sensor_data;
  uint16_t size;
  uint8_t Datasens[256];
  UTIL_TIMER_Time_t nextTxIn = 0;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	63bb      	str	r3, [r7, #56]	; 0x38
  bmp280_params_t params;
	RTC_TimeTypeDef sTime1;
  	RTC_DateTypeDef sDate1;
  	uint8_t buffer[20];
  	volatile uint16_t adc = 0;
 8002ce2:	4b96      	ldr	r3, [pc, #600]	; (8002f3c <SendTxData+0x278>)
 8002ce4:	22b8      	movs	r2, #184	; 0xb8
 8002ce6:	0052      	lsls	r2, r2, #1
 8002ce8:	4694      	mov	ip, r2
 8002cea:	44bc      	add	ip, r7
 8002cec:	4463      	add	r3, ip
 8002cee:	2200      	movs	r2, #0
 8002cf0:	801a      	strh	r2, [r3, #0]
#ifdef CAYENNE_LPP
  uint8_t channel = 0;
#else
   uint16_t humidity = 0;
 8002cf2:	23b5      	movs	r3, #181	; 0xb5
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	18fb      	adds	r3, r7, r3
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	801a      	strh	r2, [r3, #0]
  uint32_t i = 0;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	22b2      	movs	r2, #178	; 0xb2
 8002d00:	0052      	lsls	r2, r2, #1
 8002d02:	18ba      	adds	r2, r7, r2
 8002d04:	6013      	str	r3, [r2, #0]
  int32_t latitude = 0;
 8002d06:	2300      	movs	r3, #0
 8002d08:	22b0      	movs	r2, #176	; 0xb0
 8002d0a:	0052      	lsls	r2, r2, #1
 8002d0c:	18ba      	adds	r2, r7, r2
 8002d0e:	6013      	str	r3, [r2, #0]
  int32_t longitude = 0;
 8002d10:	2300      	movs	r3, #0
 8002d12:	22ae      	movs	r2, #174	; 0xae
 8002d14:	0052      	lsls	r2, r2, #1
 8002d16:	18ba      	adds	r2, r7, r2
 8002d18:	6013      	str	r3, [r2, #0]
  uint16_t altitudeGps = 0;
 8002d1a:	23ad      	movs	r3, #173	; 0xad
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	18fb      	adds	r3, r7, r3
 8002d20:	2200      	movs	r2, #0
 8002d22:	801a      	strh	r2, [r3, #0]
  #else
   temperature = (SYS_GetTemperatureLevel() >> 8);
  #endif  /* SENSOR_ENABLED */
  /*  pressure    = (uint16_t)(sensor_data.pressure * 100 / 10);      /* in hPa / 10 */

    AppData.Port = LORAWAN_USER_APP_PORT;
 8002d24:	4b86      	ldr	r3, [pc, #536]	; (8002f40 <SendTxData+0x27c>)
 8002d26:	2202      	movs	r2, #2
 8002d28:	701a      	strb	r2, [r3, #0]
  //
  // MX_I2C1_Init();
 // MX_USART2_Init();
  // MX_I2C1_Init();
  // BSP_SPI1_Init();
  BSP_I2C1_Init();
 8002d2a:	f002 fca7 	bl	800567c <BSP_I2C1_Init>
  MX_ADC_Init();
 8002d2e:	f000 fabd 	bl	80032ac <MX_ADC_Init>
  MX_LPTIM1_Init();
 8002d32:	f000 fa01 	bl	8003138 <MX_LPTIM1_Init>

  HAL_LPTIM_Encoder_Start_IT(&hlptim1, 1000);
 8002d36:	23fa      	movs	r3, #250	; 0xfa
 8002d38:	009a      	lsls	r2, r3, #2
 8002d3a:	4b82      	ldr	r3, [pc, #520]	; (8002f44 <SendTxData+0x280>)
 8002d3c:	0011      	movs	r1, r2
 8002d3e:	0018      	movs	r0, r3
 8002d40:	f001 fbb2 	bl	80044a8 <HAL_LPTIM_Encoder_Start_IT>
    		 */
  // MX_I2C1_Init();
 // HAL_I2C_GetState;// cntGetValue(&Defbuff);  // здесь будет сбор значения вскрытий// HTS221_Init(pObj);//HTS221_GetCapabilities(pObj, Capabilities);  //  HAL_LPTIM_Counter_Start_IT(&hlptim1,1000);
  // HAL_LPTIM_Counter_Start_IT(&hlptim1,1000);
    //	  HAL_Delay(200);  //	UTIL_TIMER_Create(&ReadLedTimer, 0xFFFFFFFFU, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);  // UTIL_TIMER_SetPeriod(&ReadLedTimer, 5000);  	//UTIL_TIMER_Create(&RxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
  	  bmp280_init_default_params(&bmp280.params);
 8002d44:	4b80      	ldr	r3, [pc, #512]	; (8002f48 <SendTxData+0x284>)
 8002d46:	0018      	movs	r0, r3
 8002d48:	f01a fbfe 	bl	801d548 <bmp280_init_default_params>
    	bmp280.addr = BMP280_I2C_ADDRESS_0;
 8002d4c:	4b7f      	ldr	r3, [pc, #508]	; (8002f4c <SendTxData+0x288>)
 8002d4e:	2276      	movs	r2, #118	; 0x76
 8002d50:	849a      	strh	r2, [r3, #36]	; 0x24
    	bmp280.i2c = &hi2c1;
 8002d52:	4b7e      	ldr	r3, [pc, #504]	; (8002f4c <SendTxData+0x288>)
 8002d54:	4a7e      	ldr	r2, [pc, #504]	; (8002f50 <SendTxData+0x28c>)
 8002d56:	629a      	str	r2, [r3, #40]	; 0x28
    	bmp280_init(&bmp280, &bmp280.params);
 8002d58:	4a7b      	ldr	r2, [pc, #492]	; (8002f48 <SendTxData+0x284>)
 8002d5a:	4b7c      	ldr	r3, [pc, #496]	; (8002f4c <SendTxData+0x288>)
 8002d5c:	0011      	movs	r1, r2
 8002d5e:	0018      	movs	r0, r3
 8002d60:	f01a fd86 	bl	801d870 <bmp280_init>
    	HAL_Delay(2000);
 8002d64:	23fa      	movs	r3, #250	; 0xfa
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	0018      	movs	r0, r3
 8002d6a:	f002 f83e 	bl	8004dea <HAL_Delay>
    	 // HTS221_GetCapabilities(&hts221, temperature);
  // bmp280.i2c = &hi2c1;
  //  bmp280_read_float(&bmp280, &temperature1, &pressure1, &humidity1); старое
    	// HAL_Delay(100);
//    	 bmp280_read_float(&bmp280, &temperature1, &pressure1, &humidity1);
    	 bmp280_read_fixed(&bmp280, &temperaturei, &pressurei, &humidityi);
 8002d6e:	4b79      	ldr	r3, [pc, #484]	; (8002f54 <SendTxData+0x290>)
 8002d70:	4a79      	ldr	r2, [pc, #484]	; (8002f58 <SendTxData+0x294>)
 8002d72:	497a      	ldr	r1, [pc, #488]	; (8002f5c <SendTxData+0x298>)
 8002d74:	4875      	ldr	r0, [pc, #468]	; (8002f4c <SendTxData+0x288>)
 8002d76:	f01b f87b 	bl	801de70 <bmp280_read_fixed>
    	 int32_t temp_decimal = temperaturei % 100; // Получаем 2-ю цифру после запятой
 8002d7a:	4b78      	ldr	r3, [pc, #480]	; (8002f5c <SendTxData+0x298>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2164      	movs	r1, #100	; 0x64
 8002d80:	0018      	movs	r0, r3
 8002d82:	f7fd fb39 	bl	80003f8 <__aeabi_idivmod>
 8002d86:	000b      	movs	r3, r1
 8002d88:	22aa      	movs	r2, #170	; 0xaa
 8002d8a:	0052      	lsls	r2, r2, #1
 8002d8c:	18ba      	adds	r2, r7, r2
 8002d8e:	6013      	str	r3, [r2, #0]
//    	HAL_Delay(200);
//    	APP_LOG(TS_OFF, VLEVEL_M, " Температура:%d | Влажность:%d\r\n", Datasens, Datasens);
//    	 APP_LOG(TS_OFF, VLEVEL_M, " Номер модема:%d | Температура:%d | Влажность:%d | Период передачи:%d сек | Заряд батареи:%d%\r\n",
//    		       		numberdev, temperaturei, humidityi, per, chargebattery);

    	 if(bmp280.dig_T1!=0)
 8002d90:	4b6e      	ldr	r3, [pc, #440]	; (8002f4c <SendTxData+0x288>)
 8002d92:	881b      	ldrh	r3, [r3, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d006      	beq.n	8002da6 <SendTxData+0xe2>
    	//*/
    	{
//    	  APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ==== Temp, hum sensor Init ====\r\n");
    	  APP_LOG(TS_OFF, VLEVEL_M, " Датчик измерения активен \n");
 8002d98:	4b71      	ldr	r3, [pc, #452]	; (8002f60 <SendTxData+0x29c>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	2002      	movs	r0, #2
 8002da0:	f019 f86a 	bl	801be78 <UTIL_ADV_TRACE_COND_FSend>
 8002da4:	e005      	b.n	8002db2 <SendTxData+0xee>
    	} //*/
    	 else
    	 {

//    		 APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ==== Sensor initialization failed ====\r\n");
    		 APP_LOG(TS_OFF, VLEVEL_M, "<  Ошибка инициализации датчика >  \r\n");
 8002da6:	4b6f      	ldr	r3, [pc, #444]	; (8002f64 <SendTxData+0x2a0>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	2100      	movs	r1, #0
 8002dac:	2002      	movs	r0, #2
 8002dae:	f019 f863 	bl	801be78 <UTIL_ADV_TRACE_COND_FSend>
    	 }

    	 if(temperaturei/100>=1 && temperaturei/100<=30)
 8002db2:	4b6a      	ldr	r3, [pc, #424]	; (8002f5c <SendTxData+0x298>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2b63      	cmp	r3, #99	; 0x63
 8002db8:	dd0b      	ble.n	8002dd2 <SendTxData+0x10e>
 8002dba:	4b68      	ldr	r3, [pc, #416]	; (8002f5c <SendTxData+0x298>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a6a      	ldr	r2, [pc, #424]	; (8002f68 <SendTxData+0x2a4>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	dc06      	bgt.n	8002dd2 <SendTxData+0x10e>
//    		 if(temperature1>=1 && temperature1<=30 && pressure1>=1)
    	     	//*/
    	  {
//    	     	  APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ==== All parameters normal ====\r\n");
    	     	  APP_LOG(TS_OFF, VLEVEL_M, " Параметры окружающей среды в норме \r\n");
 8002dc4:	4b69      	ldr	r3, [pc, #420]	; (8002f6c <SendTxData+0x2a8>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	2100      	movs	r1, #0
 8002dca:	2002      	movs	r0, #2
 8002dcc:	f019 f854 	bl	801be78 <UTIL_ADV_TRACE_COND_FSend>
 8002dd0:	e005      	b.n	8002dde <SendTxData+0x11a>
    	  } //*/
    	     	 else
    	   {
//    	     		 APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ==== Accident ====\r\n");
    	       		 APP_LOG(TS_OFF, VLEVEL_M, " < Отклонение от нормы > \r\n");
 8002dd2:	4b67      	ldr	r3, [pc, #412]	; (8002f70 <SendTxData+0x2ac>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	2002      	movs	r0, #2
 8002dda:	f019 f84d 	bl	801be78 <UTIL_ADV_TRACE_COND_FSend>
    	   }
    	 modelnum = 1;
 8002dde:	4b65      	ldr	r3, [pc, #404]	; (8002f74 <SendTxData+0x2b0>)
 8002de0:	2201      	movs	r2, #1
 8002de2:	601a      	str	r2, [r3, #0]
    	 // EEPROMWRITE modelnum
    	 numberdev = 0x01;  // new 0b00010001
 8002de4:	4b64      	ldr	r3, [pc, #400]	; (8002f78 <SendTxData+0x2b4>)
 8002de6:	2201      	movs	r2, #1
 8002de8:	801a      	strh	r2, [r3, #0]
    	 per = 0xA; // new
 8002dea:	4b64      	ldr	r3, [pc, #400]	; (8002f7c <SendTxData+0x2b8>)
 8002dec:	220a      	movs	r2, #10
 8002dee:	801a      	strh	r2, [r3, #0]
         FirmwareVersion = 1.1;
 8002df0:	4b63      	ldr	r3, [pc, #396]	; (8002f80 <SendTxData+0x2bc>)
 8002df2:	2201      	movs	r2, #1
 8002df4:	601a      	str	r2, [r3, #0]
  // AppData.Buffer[i++] = (uint8_t)temperature1 >> 8 ;
  //  AppData.Buffer[i++] = (int)humidity1 >> 16;


    //AppData.Buffer[i++] = 0x00;
     AppData.Buffer[i++] = numberdev; // new номер устройства
 8002df6:	4b60      	ldr	r3, [pc, #384]	; (8002f78 <SendTxData+0x2b4>)
 8002df8:	2000      	movs	r0, #0
 8002dfa:	5e18      	ldrsh	r0, [r3, r0]
 8002dfc:	4b50      	ldr	r3, [pc, #320]	; (8002f40 <SendTxData+0x27c>)
 8002dfe:	685a      	ldr	r2, [r3, #4]
 8002e00:	26b2      	movs	r6, #178	; 0xb2
 8002e02:	0076      	lsls	r6, r6, #1
 8002e04:	19bb      	adds	r3, r7, r6
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	1c59      	adds	r1, r3, #1
 8002e0a:	19bc      	adds	r4, r7, r6
 8002e0c:	6021      	str	r1, [r4, #0]
 8002e0e:	18d3      	adds	r3, r2, r3
 8002e10:	b2c2      	uxtb	r2, r0
 8002e12:	701a      	strb	r2, [r3, #0]
     AppData.Buffer[i++] = temperaturei;
 8002e14:	4b51      	ldr	r3, [pc, #324]	; (8002f5c <SendTxData+0x298>)
 8002e16:	6818      	ldr	r0, [r3, #0]
 8002e18:	4b49      	ldr	r3, [pc, #292]	; (8002f40 <SendTxData+0x27c>)
 8002e1a:	685a      	ldr	r2, [r3, #4]
 8002e1c:	19bb      	adds	r3, r7, r6
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	1c59      	adds	r1, r3, #1
 8002e22:	19bc      	adds	r4, r7, r6
 8002e24:	6021      	str	r1, [r4, #0]
 8002e26:	18d3      	adds	r3, r2, r3
 8002e28:	b2c2      	uxtb	r2, r0
 8002e2a:	701a      	strb	r2, [r3, #0]
     AppData.Buffer[i++] = humidityi;
 8002e2c:	4b49      	ldr	r3, [pc, #292]	; (8002f54 <SendTxData+0x290>)
 8002e2e:	6818      	ldr	r0, [r3, #0]
 8002e30:	4b43      	ldr	r3, [pc, #268]	; (8002f40 <SendTxData+0x27c>)
 8002e32:	685a      	ldr	r2, [r3, #4]
 8002e34:	19bb      	adds	r3, r7, r6
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	1c59      	adds	r1, r3, #1
 8002e3a:	19bc      	adds	r4, r7, r6
 8002e3c:	6021      	str	r1, [r4, #0]
 8002e3e:	18d3      	adds	r3, r2, r3
 8002e40:	b2c2      	uxtb	r2, r0
 8002e42:	701a      	strb	r2, [r3, #0]
     AppData.Buffer[i++] = per; // new период включения прибора
 8002e44:	4b4d      	ldr	r3, [pc, #308]	; (8002f7c <SendTxData+0x2b8>)
 8002e46:	2000      	movs	r0, #0
 8002e48:	5e18      	ldrsh	r0, [r3, r0]
 8002e4a:	4b3d      	ldr	r3, [pc, #244]	; (8002f40 <SendTxData+0x27c>)
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	19bb      	adds	r3, r7, r6
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	1c59      	adds	r1, r3, #1
 8002e54:	19bc      	adds	r4, r7, r6
 8002e56:	6021      	str	r1, [r4, #0]
 8002e58:	18d3      	adds	r3, r2, r3
 8002e5a:	b2c2      	uxtb	r2, r0
 8002e5c:	701a      	strb	r2, [r3, #0]
//     temperatureint = temperature1;
//     humidityint = humidity1;
      // AppData.Buffer[i++] = BAT_CR2032; // new заряд батареи, CR2032 старая батарейка, новая LS14500
  // SYS_GetBatteryLevel(); // new заряд батареи
     chargebattery = GetBatteryLevel(); // new заряд батареи
 8002e5e:	f001 fe33 	bl	8004ac8 <GetBatteryLevel>
 8002e62:	0003      	movs	r3, r0
 8002e64:	b21a      	sxth	r2, r3
 8002e66:	4b47      	ldr	r3, [pc, #284]	; (8002f84 <SendTxData+0x2c0>)
 8002e68:	801a      	strh	r2, [r3, #0]
  // AppData.Buffer[i++] = batteryLevel; // new заряд батареи
     AppData.Buffer[i++] = chargebattery;
 8002e6a:	4b46      	ldr	r3, [pc, #280]	; (8002f84 <SendTxData+0x2c0>)
 8002e6c:	2000      	movs	r0, #0
 8002e6e:	5e18      	ldrsh	r0, [r3, r0]
 8002e70:	4b33      	ldr	r3, [pc, #204]	; (8002f40 <SendTxData+0x27c>)
 8002e72:	685a      	ldr	r2, [r3, #4]
 8002e74:	19bb      	adds	r3, r7, r6
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	1c59      	adds	r1, r3, #1
 8002e7a:	19bc      	adds	r4, r7, r6
 8002e7c:	6021      	str	r1, [r4, #0]
 8002e7e:	18d3      	adds	r3, r2, r3
 8002e80:	b2c2      	uxtb	r2, r0
 8002e82:	701a      	strb	r2, [r3, #0]
//     HAL_Delay(1000);
//     APP_LOG(TS_OFF, VLEVEL_M, " Номер модема:%d | Температура:%d | Влажность:%d | Период передачи:%d сек | Заряд батареи:%d%\r\n",
//       		numberdev, temperatureint, humidityint, per, chargebattery);
//     APP_LOG(TS_OFF, VLEVEL_M, "Заряд батареи:%d\r\n", chargebattery);
     HAL_Delay(200);
 8002e84:	20c8      	movs	r0, #200	; 0xc8
 8002e86:	f001 ffb0 	bl	8004dea <HAL_Delay>

		 APP_LOG(TS_OFF, VLEVEL_M, " Номер устройства:%d | Температура:%d,%02d °C | Влажность:%d%  | Период передачи:%d сек | Заряд батареи:%d%\r\n",
 8002e8a:	4b3b      	ldr	r3, [pc, #236]	; (8002f78 <SendTxData+0x2b4>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	5e9b      	ldrsh	r3, [r3, r2]
 8002e90:	001c      	movs	r4, r3
 8002e92:	4b32      	ldr	r3, [pc, #200]	; (8002f5c <SendTxData+0x298>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2164      	movs	r1, #100	; 0x64
 8002e98:	0018      	movs	r0, r3
 8002e9a:	f7fd f9c7 	bl	800022c <__divsi3>
 8002e9e:	0003      	movs	r3, r0
 8002ea0:	001d      	movs	r5, r3
 8002ea2:	4b2c      	ldr	r3, [pc, #176]	; (8002f54 <SendTxData+0x290>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	22fa      	movs	r2, #250	; 0xfa
 8002ea8:	0091      	lsls	r1, r2, #2
 8002eaa:	0018      	movs	r0, r3
 8002eac:	f7fd f9be 	bl	800022c <__divsi3>
 8002eb0:	0003      	movs	r3, r0
 8002eb2:	0019      	movs	r1, r3
 8002eb4:	4b31      	ldr	r3, [pc, #196]	; (8002f7c <SendTxData+0x2b8>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	5e9b      	ldrsh	r3, [r3, r2]
 8002eba:	0018      	movs	r0, r3
 8002ebc:	4b31      	ldr	r3, [pc, #196]	; (8002f84 <SendTxData+0x2c0>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	5e9b      	ldrsh	r3, [r3, r2]
 8002ec2:	4a31      	ldr	r2, [pc, #196]	; (8002f88 <SendTxData+0x2c4>)
 8002ec4:	9305      	str	r3, [sp, #20]
 8002ec6:	9004      	str	r0, [sp, #16]
 8002ec8:	9103      	str	r1, [sp, #12]
 8002eca:	23aa      	movs	r3, #170	; 0xaa
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	18fb      	adds	r3, r7, r3
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	9302      	str	r3, [sp, #8]
 8002ed4:	9501      	str	r5, [sp, #4]
 8002ed6:	9400      	str	r4, [sp, #0]
 8002ed8:	0013      	movs	r3, r2
 8002eda:	2200      	movs	r2, #0
 8002edc:	2100      	movs	r1, #0
 8002ede:	2002      	movs	r0, #2
 8002ee0:	f018 ffca 	bl	801be78 <UTIL_ADV_TRACE_COND_FSend>
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);

	   }
*/
  AppData.BufferSize = i;
 8002ee4:	19bb      	adds	r3, r7, r6
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	b2da      	uxtb	r2, r3
 8002eea:	4b15      	ldr	r3, [pc, #84]	; (8002f40 <SendTxData+0x27c>)
 8002eec:	705a      	strb	r2, [r3, #1]
  /*  #endif /* CAYENNE_LPP */

   if (LORAMAC_HANDLER_SUCCESS == LmHandlerSend(&AppData, LORAWAN_DEFAULT_CONFIRMED_MSG_STATE, &nextTxIn, false))
 8002eee:	2338      	movs	r3, #56	; 0x38
 8002ef0:	18fa      	adds	r2, r7, r3
 8002ef2:	4813      	ldr	r0, [pc, #76]	; (8002f40 <SendTxData+0x27c>)
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	f00b f9be 	bl	800e278 <LmHandlerSend>
 8002efc:	1e03      	subs	r3, r0, #0
 8002efe:	d106      	bne.n	8002f0e <SendTxData+0x24a>
  {
	  APP_LOG(TS_OFF, VLEVEL_L, " Запрос на подключение отправлен\r\n");
 8002f00:	4b22      	ldr	r3, [pc, #136]	; (8002f8c <SendTxData+0x2c8>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	2100      	movs	r1, #0
 8002f06:	2001      	movs	r0, #1
 8002f08:	f018 ffb6 	bl	801be78 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_L, " Следующий запрос на отправку через : ~%d секунд\r\n", (nextTxIn / 1000));
  }
  /* USER CODE BEGIN SendTxData_2 */
  // HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
  /* USER CODE END SendTxData_2 */
}
 8002f0c:	e011      	b.n	8002f32 <SendTxData+0x26e>
  else if (nextTxIn > 0)
 8002f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d00e      	beq.n	8002f32 <SendTxData+0x26e>
    APP_LOG(TS_OFF, VLEVEL_L, " Следующий запрос на отправку через : ~%d секунд\r\n", (nextTxIn / 1000));
 8002f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f16:	22fa      	movs	r2, #250	; 0xfa
 8002f18:	0091      	lsls	r1, r2, #2
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	f7fd f8fc 	bl	8000118 <__udivsi3>
 8002f20:	0003      	movs	r3, r0
 8002f22:	001a      	movs	r2, r3
 8002f24:	4b1a      	ldr	r3, [pc, #104]	; (8002f90 <SendTxData+0x2cc>)
 8002f26:	9200      	str	r2, [sp, #0]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	2001      	movs	r0, #1
 8002f2e:	f018 ffa3 	bl	801be78 <UTIL_ADV_TRACE_COND_FSend>
}
 8002f32:	46c0      	nop			; (mov r8, r8)
 8002f34:	46bd      	mov	sp, r7
 8002f36:	b05d      	add	sp, #372	; 0x174
 8002f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f3a:	46c0      	nop			; (mov r8, r8)
 8002f3c:	fffffe92 	.word	0xfffffe92
 8002f40:	20000000 	.word	0x20000000
 8002f44:	20001478 	.word	0x20001478
 8002f48:	20001598 	.word	0x20001598
 8002f4c:	2000156c 	.word	0x2000156c
 8002f50:	200013bc 	.word	0x200013bc
 8002f54:	20001510 	.word	0x20001510
 8002f58:	20001468 	.word	0x20001468
 8002f5c:	200014d0 	.word	0x200014d0
 8002f60:	0801ebfc 	.word	0x0801ebfc
 8002f64:	0801ec30 	.word	0x0801ec30
 8002f68:	00000c1b 	.word	0x00000c1b
 8002f6c:	0801ec70 	.word	0x0801ec70
 8002f70:	0801ecb8 	.word	0x0801ecb8
 8002f74:	200013b8 	.word	0x200013b8
 8002f78:	200015a0 	.word	0x200015a0
 8002f7c:	20001358 	.word	0x20001358
 8002f80:	20001628 	.word	0x20001628
 8002f84:	200003ac 	.word	0x200003ac
 8002f88:	0801ece8 	.word	0x0801ece8
 8002f8c:	0801ed98 	.word	0x0801ed98
 8002f90:	0801edd8 	.word	0x0801edd8

08002f94 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	2002      	movs	r0, #2
 8002fa0:	f019 fc32 	bl	801c808 <UTIL_SEQ_SetTask>
 // HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 8002fa4:	4b03      	ldr	r3, [pc, #12]	; (8002fb4 <OnTxTimerEvent+0x20>)
 8002fa6:	0018      	movs	r0, r3
 8002fa8:	f019 fe32 	bl	801cc10 <UTIL_TIMER_Start>
 // UTIL_TIMER_Stop(&TxTimer); // попытка передать только одно сообщение
//HAL_LPTIM_Counter_Start_IT(&hlptim1,1000);
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 8002fac:	46c0      	nop			; (mov r8, r8)
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	b002      	add	sp, #8
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	2000034c 	.word	0x2000034c

08002fb8 <OnTxTimerLedEvent>:

static void OnTxTimerLedEvent(void *context)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerLedEvent_1 */

  /* USER CODE END OnTxTimerLedEvent_1 */
  LED_Off(LED_RED2);
 8002fc0:	2003      	movs	r0, #3
 8002fc2:	f002 fd2d 	bl	8005a20 <BSP_LED_Off>
  /* USER CODE BEGIN OnTxTimerLedEvent_2 */

  /* USER CODE END OnTxTimerLedEvent_2 */
}
 8002fc6:	46c0      	nop			; (mov r8, r8)
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	b002      	add	sp, #8
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b082      	sub	sp, #8
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnRxTimerLedEvent_1 */

  /* USER CODE END OnRxTimerLedEvent_1 */
  LED_Off(LED_BLUE) ;
 8002fd6:	2002      	movs	r0, #2
 8002fd8:	f002 fd22 	bl	8005a20 <BSP_LED_Off>
  /* USER CODE BEGIN OnRxTimerLedEvent_2 */

  /* USER CODE END OnRxTimerLedEvent_2 */
}
 8002fdc:	46c0      	nop			; (mov r8, r8)
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	b002      	add	sp, #8
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinTimerLedEvent_1 */

  /* USER CODE END OnJoinTimerLedEvent_1 */
  LED_Toggle(LED_RED1) ;
 8002fec:	2001      	movs	r0, #1
 8002fee:	f002 fd33 	bl	8005a58 <BSP_LED_Toggle>
  /* USER CODE BEGIN OnJoinTimerLedEvent_2 */

  /* USER CODE END OnJoinTimerLedEvent_2 */
}
 8002ff2:	46c0      	nop			; (mov r8, r8)
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	b002      	add	sp, #8
 8002ff8:	bd80      	pop	{r7, pc}
	...

08002ffc <OnTxData>:

static void OnTxData(LmHandlerTxParams_t *params)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af04      	add	r7, sp, #16
 8003002:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */

  /* USER CODE END OnTxData_1 */
  if ((params != NULL) && (params->IsMcpsConfirm != 0))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d042      	beq.n	8003090 <OnTxData+0x94>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d03e      	beq.n	8003090 <OnTxData+0x94>
  {
    LED_On(LED_RED2) ;
 8003012:	2003      	movs	r0, #3
 8003014:	f002 fce8 	bl	80059e8 <BSP_LED_On>
   // LED_Off(LED_RED2);

    UTIL_TIMER_Start(&TxLedTimer);
 8003018:	4b1f      	ldr	r3, [pc, #124]	; (8003098 <OnTxData+0x9c>)
 800301a:	0018      	movs	r0, r3
 800301c:	f019 fdf8 	bl	801cc10 <UTIL_TIMER_Start>
    //HAL_LPTIM_Counter_Start_IT(&TxTimer,1000);
//    APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirmation =============\r\n");
    APP_LOG(TS_OFF, VLEVEL_M, " MCPS Подтверждение \r");
 8003020:	4b1e      	ldr	r3, [pc, #120]	; (800309c <OnTxData+0xa0>)
 8003022:	2200      	movs	r2, #0
 8003024:	2100      	movs	r1, #0
 8003026:	2002      	movs	r0, #2
 8003028:	f018 ff26 	bl	801be78 <UTIL_ADV_TRACE_COND_FSend>
//            params->AppData.Port, params->Datarate, params->TxPower,params->Channel);
//    int8_t txPower2 = 7;
//    LmHandlerSetTxPower(txPower2);
//    APP_LOG(TS_OFF, VLEVEL_M, " Номер посылки:%01d | Порт:%d | Мощность:%d | Канал связи:%d\r\n",
//    		params->UplinkCounter, params->AppData.Port, params->TxPower, params->Channel);
    APP_LOG(TS_OFF, VLEVEL_M, " Номер посылки:%01d | Порт:%d | Канал связи:%d\r",
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	7b12      	ldrb	r2, [r2, #12]
 8003034:	0011      	movs	r1, r2
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	7d52      	ldrb	r2, [r2, #21]
 800303a:	0010      	movs	r0, r2
 800303c:	4a18      	ldr	r2, [pc, #96]	; (80030a0 <OnTxData+0xa4>)
 800303e:	9002      	str	r0, [sp, #8]
 8003040:	9101      	str	r1, [sp, #4]
 8003042:	9300      	str	r3, [sp, #0]
 8003044:	0013      	movs	r3, r2
 8003046:	2200      	movs	r2, #0
 8003048:	2100      	movs	r1, #0
 800304a:	2002      	movs	r0, #2
 800304c:	f018 ff14 	bl	801be78 <UTIL_ADV_TRACE_COND_FSend>
       		params->UplinkCounter, params->AppData.Port, params->Channel);
    APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 8003050:	4b14      	ldr	r3, [pc, #80]	; (80030a4 <OnTxData+0xa8>)
 8003052:	2200      	movs	r2, #0
 8003054:	2100      	movs	r1, #0
 8003056:	2003      	movs	r0, #3
 8003058:	f018 ff0e 	bl	801be78 <UTIL_ADV_TRACE_COND_FSend>
//    APP_LOG(TS_OFF, VLEVEL_M, " | c:");
    if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	789b      	ldrb	r3, [r3, #2]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d10f      	bne.n	8003084 <OnTxData+0x88>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "\r\n CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	78db      	ldrb	r3, [r3, #3]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d001      	beq.n	8003070 <OnTxData+0x74>
 800306c:	4b0e      	ldr	r3, [pc, #56]	; (80030a8 <OnTxData+0xac>)
 800306e:	e000      	b.n	8003072 <OnTxData+0x76>
 8003070:	4b0e      	ldr	r3, [pc, #56]	; (80030ac <OnTxData+0xb0>)
 8003072:	4a0f      	ldr	r2, [pc, #60]	; (80030b0 <OnTxData+0xb4>)
 8003074:	9300      	str	r3, [sp, #0]
 8003076:	0013      	movs	r3, r2
 8003078:	2200      	movs	r2, #0
 800307a:	2100      	movs	r1, #0
 800307c:	2003      	movs	r0, #3
 800307e:	f018 fefb 	bl	801be78 <UTIL_ADV_TRACE_COND_FSend>
  }

  /* USER CODE BEGIN OnTxData_2 */

  /* USER CODE END OnTxData_2 */
}
 8003082:	e005      	b.n	8003090 <OnTxData+0x94>
      APP_LOG(TS_OFF, VLEVEL_H, "\r\n UNCONFIRMED\r\n");
 8003084:	4b0b      	ldr	r3, [pc, #44]	; (80030b4 <OnTxData+0xb8>)
 8003086:	2200      	movs	r2, #0
 8003088:	2100      	movs	r1, #0
 800308a:	2003      	movs	r0, #3
 800308c:	f018 fef4 	bl	801be78 <UTIL_ADV_TRACE_COND_FSend>
}
 8003090:	46c0      	nop			; (mov r8, r8)
 8003092:	46bd      	mov	sp, r7
 8003094:	b002      	add	sp, #8
 8003096:	bd80      	pop	{r7, pc}
 8003098:	20000364 	.word	0x20000364
 800309c:	0801ee30 	.word	0x0801ee30
 80030a0:	0801ee54 	.word	0x0801ee54
 80030a4:	0801eea0 	.word	0x0801eea0
 80030a8:	0801eeb0 	.word	0x0801eeb0
 80030ac:	0801eeb4 	.word	0x0801eeb4
 80030b0:	0801eebc 	.word	0x0801eebc
 80030b4:	0801eed0 	.word	0x0801eed0

080030b8 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */

  /* USER CODE END OnJoinRequest_1 */
  if (joinParams != NULL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d029      	beq.n	800311a <OnJoinRequest+0x62>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	785b      	ldrb	r3, [r3, #1]
 80030ca:	b25b      	sxtb	r3, r3
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d11e      	bne.n	800310e <OnJoinRequest+0x56>
    {
      UTIL_TIMER_Stop(&JoinLedTimer);
 80030d0:	4b14      	ldr	r3, [pc, #80]	; (8003124 <OnJoinRequest+0x6c>)
 80030d2:	0018      	movs	r0, r3
 80030d4:	f019 fe14 	bl	801cd00 <UTIL_TIMER_Stop>

      LED_Off(LED_RED1) ;
 80030d8:	2001      	movs	r0, #1
 80030da:	f002 fca1 	bl	8005a20 <BSP_LED_Off>

//      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
      APP_LOG(TS_OFF, VLEVEL_M, " Устройство подключено \r\n  ");
 80030de:	4b12      	ldr	r3, [pc, #72]	; (8003128 <OnJoinRequest+0x70>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	2100      	movs	r1, #0
 80030e4:	2002      	movs	r0, #2
 80030e6:	f018 fec7 	bl	801be78 <UTIL_ADV_TRACE_COND_FSend>
      //if (joinParams->Mode == ACTIVATION_TYPE_ABP) //
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	789b      	ldrb	r3, [r3, #2]
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d106      	bne.n	8003100 <OnJoinRequest+0x48>
      {
//        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
    	  APP_LOG(TS_OFF, VLEVEL_M, " Активация по воздуху  \r\n");
 80030f2:	4b0e      	ldr	r3, [pc, #56]	; (800312c <OnJoinRequest+0x74>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	2100      	movs	r1, #0
 80030f8:	2002      	movs	r0, #2
 80030fa:	f018 febd 	bl	801be78 <UTIL_ADV_TRACE_COND_FSend>
  }

  /* USER CODE BEGIN OnJoinRequest_2 */

  /* USER CODE END OnJoinRequest_2 */
}
 80030fe:	e00c      	b.n	800311a <OnJoinRequest+0x62>
    	  APP_LOG(TS_OFF, VLEVEL_M, " Активация по персонализации  \r\n");
 8003100:	4b0b      	ldr	r3, [pc, #44]	; (8003130 <OnJoinRequest+0x78>)
 8003102:	2200      	movs	r2, #0
 8003104:	2100      	movs	r1, #0
 8003106:	2002      	movs	r0, #2
 8003108:	f018 feb6 	bl	801be78 <UTIL_ADV_TRACE_COND_FSend>
}
 800310c:	e005      	b.n	800311a <OnJoinRequest+0x62>
      APP_LOG(TS_OFF, VLEVEL_M, " < Подключение к базовой станции не удалось > \r\n");
 800310e:	4b09      	ldr	r3, [pc, #36]	; (8003134 <OnJoinRequest+0x7c>)
 8003110:	2200      	movs	r2, #0
 8003112:	2100      	movs	r1, #0
 8003114:	2002      	movs	r0, #2
 8003116:	f018 feaf 	bl	801be78 <UTIL_ADV_TRACE_COND_FSend>
}
 800311a:	46c0      	nop			; (mov r8, r8)
 800311c:	46bd      	mov	sp, r7
 800311e:	b002      	add	sp, #8
 8003120:	bd80      	pop	{r7, pc}
 8003122:	46c0      	nop			; (mov r8, r8)
 8003124:	20000394 	.word	0x20000394
 8003128:	0801eee4 	.word	0x0801eee4
 800312c:	0801ef14 	.word	0x0801ef14
 8003130:	0801ef40 	.word	0x0801ef40
 8003134:	0801ef7c 	.word	0x0801ef7c

08003138 <MX_LPTIM1_Init>:
  }
  */
/*

 */ static void MX_LPTIM1_Init(void) // new
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
	  hlptim1.Instance = LPTIM1;
 800313c:	4b13      	ldr	r3, [pc, #76]	; (800318c <MX_LPTIM1_Init+0x54>)
 800313e:	4a14      	ldr	r2, [pc, #80]	; (8003190 <MX_LPTIM1_Init+0x58>)
 8003140:	601a      	str	r2, [r3, #0]
	  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8003142:	4b12      	ldr	r3, [pc, #72]	; (800318c <MX_LPTIM1_Init+0x54>)
 8003144:	2200      	movs	r2, #0
 8003146:	605a      	str	r2, [r3, #4]
	  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8003148:	4b10      	ldr	r3, [pc, #64]	; (800318c <MX_LPTIM1_Init+0x54>)
 800314a:	2200      	movs	r2, #0
 800314c:	609a      	str	r2, [r3, #8]
	  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 800314e:	4b0f      	ldr	r3, [pc, #60]	; (800318c <MX_LPTIM1_Init+0x54>)
 8003150:	2200      	movs	r2, #0
 8003152:	60da      	str	r2, [r3, #12]
	  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 8003154:	4b0d      	ldr	r3, [pc, #52]	; (800318c <MX_LPTIM1_Init+0x54>)
 8003156:	2200      	movs	r2, #0
 8003158:	611a      	str	r2, [r3, #16]
	  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800315a:	4b0c      	ldr	r3, [pc, #48]	; (800318c <MX_LPTIM1_Init+0x54>)
 800315c:	4a0d      	ldr	r2, [pc, #52]	; (8003194 <MX_LPTIM1_Init+0x5c>)
 800315e:	615a      	str	r2, [r3, #20]
	  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8003160:	4b0a      	ldr	r3, [pc, #40]	; (800318c <MX_LPTIM1_Init+0x54>)
 8003162:	2200      	movs	r2, #0
 8003164:	621a      	str	r2, [r3, #32]
	  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8003166:	4b09      	ldr	r3, [pc, #36]	; (800318c <MX_LPTIM1_Init+0x54>)
 8003168:	2200      	movs	r2, #0
 800316a:	625a      	str	r2, [r3, #36]	; 0x24
	  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 800316c:	4b07      	ldr	r3, [pc, #28]	; (800318c <MX_LPTIM1_Init+0x54>)
 800316e:	2280      	movs	r2, #128	; 0x80
 8003170:	0412      	lsls	r2, r2, #16
 8003172:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8003174:	4b05      	ldr	r3, [pc, #20]	; (800318c <MX_LPTIM1_Init+0x54>)
 8003176:	0018      	movs	r0, r3
 8003178:	f001 f914 	bl	80043a4 <HAL_LPTIM_Init>
 800317c:	1e03      	subs	r3, r0, #0
 800317e:	d001      	beq.n	8003184 <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 8003180:	f000 fbea 	bl	8003958 <Error_Handler>
  /*
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8003184:	46c0      	nop			; (mov r8, r8)
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	46c0      	nop			; (mov r8, r8)
 800318c:	20001478 	.word	0x20001478
 8003190:	40007c00 	.word	0x40007c00
 8003194:	0000ffff 	.word	0x0000ffff

08003198 <HAL_LPTIM_MspInit>:
  void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
  {
 8003198:	b590      	push	{r4, r7, lr}
 800319a:	b089      	sub	sp, #36	; 0x24
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031a0:	240c      	movs	r4, #12
 80031a2:	193b      	adds	r3, r7, r4
 80031a4:	0018      	movs	r0, r3
 80031a6:	2314      	movs	r3, #20
 80031a8:	001a      	movs	r2, r3
 80031aa:	2100      	movs	r1, #0
 80031ac:	f01a ff01 	bl	801dfb2 <memset>
    if(hlptim->Instance==LPTIM1)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a1b      	ldr	r2, [pc, #108]	; (8003224 <HAL_LPTIM_MspInit+0x8c>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d130      	bne.n	800321c <HAL_LPTIM_MspInit+0x84>
    {
    /* USER CODE BEGIN LPTIM1_MspInit 0 */

    /* USER CODE END LPTIM1_MspInit 0 */
      /* Peripheral clock enable */
      __HAL_RCC_LPTIM1_CLK_ENABLE();
 80031ba:	4b1b      	ldr	r3, [pc, #108]	; (8003228 <HAL_LPTIM_MspInit+0x90>)
 80031bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031be:	4b1a      	ldr	r3, [pc, #104]	; (8003228 <HAL_LPTIM_MspInit+0x90>)
 80031c0:	2180      	movs	r1, #128	; 0x80
 80031c2:	0609      	lsls	r1, r1, #24
 80031c4:	430a      	orrs	r2, r1
 80031c6:	639a      	str	r2, [r3, #56]	; 0x38

      __HAL_RCC_GPIOB_CLK_ENABLE();
 80031c8:	4b17      	ldr	r3, [pc, #92]	; (8003228 <HAL_LPTIM_MspInit+0x90>)
 80031ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031cc:	4b16      	ldr	r3, [pc, #88]	; (8003228 <HAL_LPTIM_MspInit+0x90>)
 80031ce:	2102      	movs	r1, #2
 80031d0:	430a      	orrs	r2, r1
 80031d2:	62da      	str	r2, [r3, #44]	; 0x2c
 80031d4:	4b14      	ldr	r3, [pc, #80]	; (8003228 <HAL_LPTIM_MspInit+0x90>)
 80031d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d8:	2202      	movs	r2, #2
 80031da:	4013      	ands	r3, r2
 80031dc:	60bb      	str	r3, [r7, #8]
 80031de:	68bb      	ldr	r3, [r7, #8]
      /**LPTIM1 GPIO Configuration
      PB5     ------> LPTIM1_IN1
      PB7     ------> LPTIM1_IN2
      */
      GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80031e0:	0021      	movs	r1, r4
 80031e2:	187b      	adds	r3, r7, r1
 80031e4:	22a0      	movs	r2, #160	; 0xa0
 80031e6:	601a      	str	r2, [r3, #0]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e8:	187b      	adds	r3, r7, r1
 80031ea:	2202      	movs	r2, #2
 80031ec:	605a      	str	r2, [r3, #4]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ee:	187b      	adds	r3, r7, r1
 80031f0:	2200      	movs	r2, #0
 80031f2:	609a      	str	r2, [r3, #8]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031f4:	187b      	adds	r3, r7, r1
 80031f6:	2200      	movs	r2, #0
 80031f8:	60da      	str	r2, [r3, #12]
      GPIO_InitStruct.Alternate = GPIO_AF2_LPTIM1;
 80031fa:	187b      	adds	r3, r7, r1
 80031fc:	2202      	movs	r2, #2
 80031fe:	611a      	str	r2, [r3, #16]
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003200:	187b      	adds	r3, r7, r1
 8003202:	4a0a      	ldr	r2, [pc, #40]	; (800322c <HAL_LPTIM_MspInit+0x94>)
 8003204:	0019      	movs	r1, r3
 8003206:	0010      	movs	r0, r2
 8003208:	f004 fbcc 	bl	80079a4 <HAL_GPIO_Init>

      /* LPTIM1 interrupt Init */
      HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 800320c:	2200      	movs	r2, #0
 800320e:	2100      	movs	r1, #0
 8003210:	200d      	movs	r0, #13
 8003212:	f003 fecd 	bl	8006fb0 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8003216:	200d      	movs	r0, #13
 8003218:	f003 fedf 	bl	8006fda <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN LPTIM1_MspInit 1 */

    /* USER CODE END LPTIM1_MspInit 1 */
    }

  }
 800321c:	46c0      	nop			; (mov r8, r8)
 800321e:	46bd      	mov	sp, r7
 8003220:	b009      	add	sp, #36	; 0x24
 8003222:	bd90      	pop	{r4, r7, pc}
 8003224:	40007c00 	.word	0x40007c00
 8003228:	40021000 	.word	0x40021000
 800322c:	50000400 	.word	0x50000400

08003230 <OnMacProcessNotify>:
    }

  }

static void OnMacProcessNotify(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 8003234:	2100      	movs	r1, #0
 8003236:	2001      	movs	r0, #1
 8003238:	f019 fae6 	bl	801c808 <UTIL_SEQ_SetTask>
  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800323c:	46c0      	nop			; (mov r8, r8)
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
	...

08003244 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 8003248:	4b12      	ldr	r3, [pc, #72]	; (8003294 <LoraInfo_Init+0x50>)
 800324a:	2200      	movs	r2, #0
 800324c:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800324e:	4b11      	ldr	r3, [pc, #68]	; (8003294 <LoraInfo_Init+0x50>)
 8003250:	2200      	movs	r2, #0
 8003252:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 8003254:	4b0f      	ldr	r3, [pc, #60]	; (8003294 <LoraInfo_Init+0x50>)
 8003256:	2200      	movs	r2, #0
 8003258:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800325a:	4b0e      	ldr	r3, [pc, #56]	; (8003294 <LoraInfo_Init+0x50>)
 800325c:	2200      	movs	r2, #0
 800325e:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433) ;
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868) ;
 8003260:	4b0c      	ldr	r3, [pc, #48]	; (8003294 <LoraInfo_Init+0x50>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	2220      	movs	r2, #32
 8003266:	431a      	orrs	r2, r3
 8003268:	4b0a      	ldr	r3, [pc, #40]	; (8003294 <LoraInfo_Init+0x50>)
 800326a:	605a      	str	r2, [r3, #4]
#endif /* REGION_US915 */
#ifdef REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864) ;
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800326c:	4b09      	ldr	r3, [pc, #36]	; (8003294 <LoraInfo_Init+0x50>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d106      	bne.n	8003282 <LoraInfo_Init+0x3e>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 8003274:	4b08      	ldr	r3, [pc, #32]	; (8003298 <LoraInfo_Init+0x54>)
 8003276:	2200      	movs	r2, #0
 8003278:	2100      	movs	r1, #0
 800327a:	2000      	movs	r0, #0
 800327c:	f018 fdfc 	bl	801be78 <UTIL_ADV_TRACE_COND_FSend>
    while (1) {} /* At least one region shall be defined */
 8003280:	e7fe      	b.n	8003280 <LoraInfo_Init+0x3c>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 8003282:	4b04      	ldr	r3, [pc, #16]	; (8003294 <LoraInfo_Init+0x50>)
 8003284:	2200      	movs	r2, #0
 8003286:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 8003288:	4b02      	ldr	r3, [pc, #8]	; (8003294 <LoraInfo_Init+0x50>)
 800328a:	2203      	movs	r2, #3
 800328c:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALISATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800328e:	46c0      	nop			; (mov r8, r8)
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	200003b0 	.word	0x200003b0
 8003298:	0801f01c 	.word	0x0801f01c

0800329c <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 80032a0:	4b01      	ldr	r3, [pc, #4]	; (80032a8 <LoraInfo_GetPtr+0xc>)
}
 80032a2:	0018      	movs	r0, r3
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	200003b0 	.word	0x200003b0

080032ac <MX_ADC_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC init function */
void MX_ADC_Init(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance  = ADC1;
 80032b0:	4b22      	ldr	r3, [pc, #136]	; (800333c <MX_ADC_Init+0x90>)
 80032b2:	4a23      	ldr	r2, [pc, #140]	; (8003340 <MX_ADC_Init+0x94>)
 80032b4:	601a      	str	r2, [r3, #0]

  hadc1.Init.OversamplingMode      = DISABLE;
 80032b6:	4b21      	ldr	r3, [pc, #132]	; (800333c <MX_ADC_Init+0x90>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	63da      	str	r2, [r3, #60]	; 0x3c

  hadc1.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 80032bc:	4b1f      	ldr	r3, [pc, #124]	; (800333c <MX_ADC_Init+0x90>)
 80032be:	2280      	movs	r2, #128	; 0x80
 80032c0:	0612      	lsls	r2, r2, #24
 80032c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.LowPowerAutoPowerOff  = DISABLE;
 80032c4:	4b1d      	ldr	r3, [pc, #116]	; (800333c <MX_ADC_Init+0x90>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	61da      	str	r2, [r3, #28]
  hadc1.Init.LowPowerFrequencyMode = ENABLE;
 80032ca:	4b1c      	ldr	r3, [pc, #112]	; (800333c <MX_ADC_Init+0x90>)
 80032cc:	2201      	movs	r2, #1
 80032ce:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.LowPowerAutoWait      = DISABLE;
 80032d0:	4b1a      	ldr	r3, [pc, #104]	; (800333c <MX_ADC_Init+0x90>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	619a      	str	r2, [r3, #24]
  hadc1.Init.Resolution            = ADC_RESOLUTION_12B;
 80032d6:	4b19      	ldr	r3, [pc, #100]	; (800333c <MX_ADC_Init+0x90>)
 80032d8:	2200      	movs	r2, #0
 80032da:	609a      	str	r2, [r3, #8]
  hadc1.Init.SamplingTime          = ADC_SAMPLETIME_160CYCLES_5;
 80032dc:	4b17      	ldr	r3, [pc, #92]	; (800333c <MX_ADC_Init+0x90>)
 80032de:	2207      	movs	r2, #7
 80032e0:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.ScanConvMode          = ADC_SCAN_DIRECTION_FORWARD;
 80032e2:	4b16      	ldr	r3, [pc, #88]	; (800333c <MX_ADC_Init+0x90>)
 80032e4:	2201      	movs	r2, #1
 80032e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 80032e8:	4b14      	ldr	r3, [pc, #80]	; (800333c <MX_ADC_Init+0x90>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	60da      	str	r2, [r3, #12]
  hadc1.Init.ContinuousConvMode    = DISABLE;
 80032ee:	4b13      	ldr	r3, [pc, #76]	; (800333c <MX_ADC_Init+0x90>)
 80032f0:	2220      	movs	r2, #32
 80032f2:	2100      	movs	r1, #0
 80032f4:	5499      	strb	r1, [r3, r2]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80032f6:	4b11      	ldr	r3, [pc, #68]	; (800333c <MX_ADC_Init+0x90>)
 80032f8:	2221      	movs	r2, #33	; 0x21
 80032fa:	2100      	movs	r1, #0
 80032fc:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80032fe:	4b0f      	ldr	r3, [pc, #60]	; (800333c <MX_ADC_Init+0x90>)
 8003300:	2200      	movs	r2, #0
 8003302:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 8003304:	4b0d      	ldr	r3, [pc, #52]	; (800333c <MX_ADC_Init+0x90>)
 8003306:	2204      	movs	r2, #4
 8003308:	615a      	str	r2, [r3, #20]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800330a:	4b0c      	ldr	r3, [pc, #48]	; (800333c <MX_ADC_Init+0x90>)
 800330c:	222c      	movs	r2, #44	; 0x2c
 800330e:	2100      	movs	r1, #0
 8003310:	5499      	strb	r1, [r3, r2]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003312:	4b0a      	ldr	r3, [pc, #40]	; (800333c <MX_ADC_Init+0x90>)
 8003314:	0018      	movs	r0, r3
 8003316:	f003 f819 	bl	800634c <HAL_ADC_Init>
 800331a:	1e03      	subs	r3, r0, #0
 800331c:	d001      	beq.n	8003322 <MX_ADC_Init+0x76>
  {
    Error_Handler();
 800331e:	f000 fb1b 	bl	8003958 <Error_Handler>
  }

  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 8003322:	4b06      	ldr	r3, [pc, #24]	; (800333c <MX_ADC_Init+0x90>)
 8003324:	2100      	movs	r1, #0
 8003326:	0018      	movs	r0, r3
 8003328:	f003 fd02 	bl	8006d30 <HAL_ADCEx_Calibration_Start>
 800332c:	1e03      	subs	r3, r0, #0
 800332e:	d001      	beq.n	8003334 <MX_ADC_Init+0x88>
  {
    Error_Handler();
 8003330:	f000 fb12 	bl	8003958 <Error_Handler>
  }
}
 8003334:	46c0      	nop			; (mov r8, r8)
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	46c0      	nop			; (mov r8, r8)
 800333c:	2000140c 	.word	0x2000140c
 8003340:	40012400 	.word	0x40012400

08003344 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle)
{
 8003344:	b590      	push	{r4, r7, lr}
 8003346:	b089      	sub	sp, #36	; 0x24
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]

  if (adcHandle->Instance == ADC1)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a12      	ldr	r2, [pc, #72]	; (800339c <HAL_ADC_MspInit+0x58>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d11e      	bne.n	8003394 <HAL_ADC_MspInit+0x50>
  {
    /* USER CODE BEGIN ADC_MspInit 0 */
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003356:	240c      	movs	r4, #12
 8003358:	193b      	adds	r3, r7, r4
 800335a:	0018      	movs	r0, r3
 800335c:	2314      	movs	r3, #20
 800335e:	001a      	movs	r2, r3
 8003360:	2100      	movs	r1, #0
 8003362:	f01a fe26 	bl	801dfb2 <memset>

    /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003366:	4b0e      	ldr	r3, [pc, #56]	; (80033a0 <HAL_ADC_MspInit+0x5c>)
 8003368:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800336a:	4b0d      	ldr	r3, [pc, #52]	; (80033a0 <HAL_ADC_MspInit+0x5c>)
 800336c:	2180      	movs	r1, #128	; 0x80
 800336e:	0089      	lsls	r1, r1, #2
 8003370:	430a      	orrs	r2, r1
 8003372:	635a      	str	r2, [r3, #52]	; 0x34
    /* USER CODE BEGIN ADC_MspInit 1 */
    GPIO_InitStruct.Pin = GPIO_PIN_4; //N
 8003374:	193b      	adds	r3, r7, r4
 8003376:	2210      	movs	r2, #16
 8003378:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG; //N
 800337a:	193b      	adds	r3, r7, r4
 800337c:	2203      	movs	r2, #3
 800337e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL; //N
 8003380:	193b      	adds	r3, r7, r4
 8003382:	2200      	movs	r2, #0
 8003384:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); //N
 8003386:	193a      	adds	r2, r7, r4
 8003388:	23a0      	movs	r3, #160	; 0xa0
 800338a:	05db      	lsls	r3, r3, #23
 800338c:	0011      	movs	r1, r2
 800338e:	0018      	movs	r0, r3
 8003390:	f004 fb08 	bl	80079a4 <HAL_GPIO_Init>
    /* USER CODE END ADC_MspInit 1
     * */
  }
}
 8003394:	46c0      	nop			; (mov r8, r8)
 8003396:	46bd      	mov	sp, r7
 8003398:	b009      	add	sp, #36	; 0x24
 800339a:	bd90      	pop	{r4, r7, pc}
 800339c:	40012400 	.word	0x40012400
 80033a0:	40021000 	.word	0x40021000

080033a4 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef *adcHandle)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]

  if (adcHandle->Instance == ADC1)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a0f      	ldr	r2, [pc, #60]	; (80033f0 <HAL_ADC_MspDeInit+0x4c>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d118      	bne.n	80033e8 <HAL_ADC_MspDeInit+0x44>
  {
    /* USER CODE BEGIN ADC_MspDeInit 0 */

    /* USER CODE END ADC_MspDeInit 0 */

    __HAL_RCC_ADC1_FORCE_RESET();
 80033b6:	4b0f      	ldr	r3, [pc, #60]	; (80033f4 <HAL_ADC_MspDeInit+0x50>)
 80033b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033ba:	4b0e      	ldr	r3, [pc, #56]	; (80033f4 <HAL_ADC_MspDeInit+0x50>)
 80033bc:	2180      	movs	r1, #128	; 0x80
 80033be:	0089      	lsls	r1, r1, #2
 80033c0:	430a      	orrs	r2, r1
 80033c2:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_RCC_ADC1_RELEASE_RESET();
 80033c4:	4b0b      	ldr	r3, [pc, #44]	; (80033f4 <HAL_ADC_MspDeInit+0x50>)
 80033c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033c8:	4b0a      	ldr	r3, [pc, #40]	; (80033f4 <HAL_ADC_MspDeInit+0x50>)
 80033ca:	490b      	ldr	r1, [pc, #44]	; (80033f8 <HAL_ADC_MspDeInit+0x54>)
 80033cc:	400a      	ands	r2, r1
 80033ce:	625a      	str	r2, [r3, #36]	; 0x24
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 80033d0:	4b08      	ldr	r3, [pc, #32]	; (80033f4 <HAL_ADC_MspDeInit+0x50>)
 80033d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033d4:	4b07      	ldr	r3, [pc, #28]	; (80033f4 <HAL_ADC_MspDeInit+0x50>)
 80033d6:	4908      	ldr	r1, [pc, #32]	; (80033f8 <HAL_ADC_MspDeInit+0x54>)
 80033d8:	400a      	ands	r2, r1
 80033da:	635a      	str	r2, [r3, #52]	; 0x34
    /* USER CODE BEGIN ADC_MspDeInit 1 */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);//N
 80033dc:	23a0      	movs	r3, #160	; 0xa0
 80033de:	05db      	lsls	r3, r3, #23
 80033e0:	2110      	movs	r1, #16
 80033e2:	0018      	movs	r0, r3
 80033e4:	f004 fc5c 	bl	8007ca0 <HAL_GPIO_DeInit>
    /* USER CODE END ADC_MspDeInit 1 */
  }
}
 80033e8:	46c0      	nop			; (mov r8, r8)
 80033ea:	46bd      	mov	sp, r7
 80033ec:	b002      	add	sp, #8
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	40012400 	.word	0x40012400
 80033f4:	40021000 	.word	0x40021000
 80033f8:	fffffdff 	.word	0xfffffdff

080033fc <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc1.Instance = ADC1;
 8003400:	4b02      	ldr	r3, [pc, #8]	; (800340c <SYS_InitMeasurement+0x10>)
 8003402:	4a03      	ldr	r2, [pc, #12]	; (8003410 <SYS_InitMeasurement+0x14>)
 8003404:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 8003406:	46c0      	nop			; (mov r8, r8)
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	2000140c 	.word	0x2000140c
 8003410:	40012400 	.word	0x40012400

08003414 <SYS_GetTemperatureLevel>:

  /* USER CODE END SYS_DeInitMeasurement_1 */
}

int16_t SYS_GetTemperatureLevel(void)
{
 8003414:	b5b0      	push	{r4, r5, r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetTemperatureLevel_1 */

  /* USER CODE END SYS_GetTemperatureLevel_1 */
  int16_t temperatureDegreeC = 0;
 800341a:	250e      	movs	r5, #14
 800341c:	197b      	adds	r3, r7, r5
 800341e:	2200      	movs	r2, #0
 8003420:	801a      	strh	r2, [r3, #0]
  uint32_t measuredLevel = 0;
 8003422:	2300      	movs	r3, #0
 8003424:	60bb      	str	r3, [r7, #8]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 8003426:	1dbc      	adds	r4, r7, #6
 8003428:	f000 f83c 	bl	80034a4 <SYS_GetBatteryLevel>
 800342c:	0003      	movs	r3, r0
 800342e:	8023      	strh	r3, [r4, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8003430:	4b18      	ldr	r3, [pc, #96]	; (8003494 <SYS_GetTemperatureLevel+0x80>)
 8003432:	0018      	movs	r0, r3
 8003434:	f000 f864 	bl	8003500 <ADC_ReadChannels>
 8003438:	0003      	movs	r3, r0
 800343a:	60bb      	str	r3, [r7, #8]

  temperatureDegreeC = COMPUTE_TEMPERATURE(measuredLevel, batteryLevelmV);
 800343c:	1dbb      	adds	r3, r7, #6
 800343e:	881b      	ldrh	r3, [r3, #0]
 8003440:	68ba      	ldr	r2, [r7, #8]
 8003442:	4353      	muls	r3, r2
 8003444:	4914      	ldr	r1, [pc, #80]	; (8003498 <SYS_GetTemperatureLevel+0x84>)
 8003446:	0018      	movs	r0, r3
 8003448:	f7fc fe66 	bl	8000118 <__udivsi3>
 800344c:	0003      	movs	r3, r0
 800344e:	001a      	movs	r2, r3
 8003450:	4b12      	ldr	r3, [pc, #72]	; (800349c <SYS_GetTemperatureLevel+0x88>)
 8003452:	881b      	ldrh	r3, [r3, #0]
 8003454:	1ad2      	subs	r2, r2, r3
 8003456:	0013      	movs	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	189b      	adds	r3, r3, r2
 800345c:	011b      	lsls	r3, r3, #4
 800345e:	021b      	lsls	r3, r3, #8
 8003460:	4a0f      	ldr	r2, [pc, #60]	; (80034a0 <SYS_GetTemperatureLevel+0x8c>)
 8003462:	8812      	ldrh	r2, [r2, #0]
 8003464:	0011      	movs	r1, r2
 8003466:	4a0d      	ldr	r2, [pc, #52]	; (800349c <SYS_GetTemperatureLevel+0x88>)
 8003468:	8812      	ldrh	r2, [r2, #0]
 800346a:	1a8a      	subs	r2, r1, r2
 800346c:	0011      	movs	r1, r2
 800346e:	0018      	movs	r0, r3
 8003470:	f7fc fedc 	bl	800022c <__divsi3>
 8003474:	0003      	movs	r3, r0
 8003476:	b29b      	uxth	r3, r3
 8003478:	22f0      	movs	r2, #240	; 0xf0
 800347a:	0152      	lsls	r2, r2, #5
 800347c:	4694      	mov	ip, r2
 800347e:	4463      	add	r3, ip
 8003480:	b29a      	uxth	r2, r3
 8003482:	197b      	adds	r3, r7, r5
 8003484:	801a      	strh	r2, [r3, #0]

//  APP_LOG(TS_ON, VLEVEL_L, "temp= %d\n\r", temperatureDegreeC >> 8);

  return (int16_t) temperatureDegreeC;
 8003486:	197b      	adds	r3, r7, r5
 8003488:	2200      	movs	r2, #0
 800348a:	5e9b      	ldrsh	r3, [r3, r2]
  /* USER CODE BEGIN SYS_GetTemperatureLevel_2 */

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}
 800348c:	0018      	movs	r0, r3
 800348e:	46bd      	mov	sp, r7
 8003490:	b004      	add	sp, #16
 8003492:	bdb0      	pop	{r4, r5, r7, pc}
 8003494:	48040000 	.word	0x48040000
 8003498:	00000bb8 	.word	0x00000bb8
 800349c:	1ff8007a 	.word	0x1ff8007a
 80034a0:	1ff8007e 	.word	0x1ff8007e

080034a4 <SYS_GetBatteryLevel>:

uint16_t SYS_GetBatteryLevel(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 80034aa:	1dbb      	adds	r3, r7, #6
 80034ac:	2200      	movs	r2, #0
 80034ae:	801a      	strh	r2, [r3, #0]
  uint32_t measuredLevel = 0;
 80034b0:	2300      	movs	r3, #0
 80034b2:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 80034b4:	4b0f      	ldr	r3, [pc, #60]	; (80034f4 <SYS_GetBatteryLevel+0x50>)
 80034b6:	0018      	movs	r0, r3
 80034b8:	f000 f822 	bl	8003500 <ADC_ReadChannels>
 80034bc:	0003      	movs	r3, r0
 80034be:	603b      	str	r3, [r7, #0]

  if (measuredLevel == 0)
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d103      	bne.n	80034ce <SYS_GetBatteryLevel+0x2a>
  {
    batteryLevelmV = 0;
 80034c6:	1dbb      	adds	r3, r7, #6
 80034c8:	2200      	movs	r2, #0
 80034ca:	801a      	strh	r2, [r3, #0]
 80034cc:	e00c      	b.n	80034e8 <SYS_GetBatteryLevel+0x44>
  }
  else
  {
    batteryLevelmV = (((uint32_t) VDDA_VREFINT_CAL * (*VREFINT_CAL)) / measuredLevel);
 80034ce:	4b0a      	ldr	r3, [pc, #40]	; (80034f8 <SYS_GetBatteryLevel+0x54>)
 80034d0:	881b      	ldrh	r3, [r3, #0]
 80034d2:	001a      	movs	r2, r3
 80034d4:	4b09      	ldr	r3, [pc, #36]	; (80034fc <SYS_GetBatteryLevel+0x58>)
 80034d6:	4353      	muls	r3, r2
 80034d8:	6839      	ldr	r1, [r7, #0]
 80034da:	0018      	movs	r0, r3
 80034dc:	f7fc fe1c 	bl	8000118 <__udivsi3>
 80034e0:	0003      	movs	r3, r0
 80034e2:	001a      	movs	r2, r3
 80034e4:	1dbb      	adds	r3, r7, #6
 80034e6:	801a      	strh	r2, [r3, #0]
  }

  return batteryLevelmV;
 80034e8:	1dbb      	adds	r3, r7, #6
 80034ea:	881b      	ldrh	r3, [r3, #0]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 80034ec:	0018      	movs	r0, r3
 80034ee:	46bd      	mov	sp, r7
 80034f0:	b002      	add	sp, #8
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	44020000 	.word	0x44020000
 80034f8:	1ff80078 	.word	0x1ff80078
 80034fc:	00000bb8 	.word	0x00000bb8

08003500 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8003500:	b590      	push	{r4, r7, lr}
 8003502:	b087      	sub	sp, #28
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8003508:	2300      	movs	r3, #0
 800350a:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 800350c:	230c      	movs	r3, #12
 800350e:	18fb      	adds	r3, r7, r3
 8003510:	0018      	movs	r0, r3
 8003512:	2308      	movs	r3, #8
 8003514:	001a      	movs	r2, r3
 8003516:	2100      	movs	r1, #0
 8003518:	f01a fd4b 	bl	801dfb2 <memset>

  MX_ADC_Init();
 800351c:	f7ff fec6 	bl	80032ac <MX_ADC_Init>

  /* wait the the Vrefint used by adc is set */
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VREFINTRDY) == RESET) {};
 8003520:	46c0      	nop			; (mov r8, r8)
 8003522:	4b2c      	ldr	r3, [pc, #176]	; (80035d4 <ADC_ReadChannels+0xd4>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	2208      	movs	r2, #8
 8003528:	4013      	ands	r3, r2
 800352a:	2b08      	cmp	r3, #8
 800352c:	d1f9      	bne.n	8003522 <ADC_ReadChannels+0x22>

  __HAL_RCC_ADC1_CLK_ENABLE();
 800352e:	4b2a      	ldr	r3, [pc, #168]	; (80035d8 <ADC_ReadChannels+0xd8>)
 8003530:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003532:	4b29      	ldr	r3, [pc, #164]	; (80035d8 <ADC_ReadChannels+0xd8>)
 8003534:	2180      	movs	r1, #128	; 0x80
 8003536:	0089      	lsls	r1, r1, #2
 8003538:	430a      	orrs	r2, r1
 800353a:	635a      	str	r2, [r3, #52]	; 0x34

  /*calibrate ADC if any calibraiton hardware*/
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800353c:	4b27      	ldr	r3, [pc, #156]	; (80035dc <ADC_ReadChannels+0xdc>)
 800353e:	2100      	movs	r1, #0
 8003540:	0018      	movs	r0, r3
 8003542:	f003 fbf5 	bl	8006d30 <HAL_ADCEx_Calibration_Start>

  /* Deselects all channels*/
  sConfig.Channel = ADC_CHANNEL_MASK;
 8003546:	240c      	movs	r4, #12
 8003548:	193b      	adds	r3, r7, r4
 800354a:	4a25      	ldr	r2, [pc, #148]	; (80035e0 <ADC_ReadChannels+0xe0>)
 800354c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 800354e:	193b      	adds	r3, r7, r4
 8003550:	4a24      	ldr	r2, [pc, #144]	; (80035e4 <ADC_ReadChannels+0xe4>)
 8003552:	605a      	str	r2, [r3, #4]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8003554:	193a      	adds	r2, r7, r4
 8003556:	4b21      	ldr	r3, [pc, #132]	; (80035dc <ADC_ReadChannels+0xdc>)
 8003558:	0011      	movs	r1, r2
 800355a:	0018      	movs	r0, r3
 800355c:	f003 fa3c 	bl	80069d8 <HAL_ADC_ConfigChannel>

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8003560:	0021      	movs	r1, r4
 8003562:	187b      	adds	r3, r7, r1
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003568:	187b      	adds	r3, r7, r1
 800356a:	2280      	movs	r2, #128	; 0x80
 800356c:	0152      	lsls	r2, r2, #5
 800356e:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003570:	187a      	adds	r2, r7, r1
 8003572:	4b1a      	ldr	r3, [pc, #104]	; (80035dc <ADC_ReadChannels+0xdc>)
 8003574:	0011      	movs	r1, r2
 8003576:	0018      	movs	r0, r3
 8003578:	f003 fa2e 	bl	80069d8 <HAL_ADC_ConfigChannel>
 800357c:	1e03      	subs	r3, r0, #0
 800357e:	d001      	beq.n	8003584 <ADC_ReadChannels+0x84>
  {
    Error_Handler();
 8003580:	f000 f9ea 	bl	8003958 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc1) != HAL_OK)
 8003584:	4b15      	ldr	r3, [pc, #84]	; (80035dc <ADC_ReadChannels+0xdc>)
 8003586:	0018      	movs	r0, r3
 8003588:	f003 f8f0 	bl	800676c <HAL_ADC_Start>
 800358c:	1e03      	subs	r3, r0, #0
 800358e:	d001      	beq.n	8003594 <ADC_ReadChannels+0x94>
  {
    /* Start Error */
    Error_Handler();
 8003590:	f000 f9e2 	bl	8003958 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8003594:	2301      	movs	r3, #1
 8003596:	425a      	negs	r2, r3
 8003598:	4b10      	ldr	r3, [pc, #64]	; (80035dc <ADC_ReadChannels+0xdc>)
 800359a:	0011      	movs	r1, r2
 800359c:	0018      	movs	r0, r3
 800359e:	f003 f979 	bl	8006894 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc1) ;   /* it calls also ADC_Disable() */
 80035a2:	4b0e      	ldr	r3, [pc, #56]	; (80035dc <ADC_ReadChannels+0xdc>)
 80035a4:	0018      	movs	r0, r3
 80035a6:	f003 f935 	bl	8006814 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc1);
 80035aa:	4b0c      	ldr	r3, [pc, #48]	; (80035dc <ADC_ReadChannels+0xdc>)
 80035ac:	0018      	movs	r0, r3
 80035ae:	f003 fa07 	bl	80069c0 <HAL_ADC_GetValue>
 80035b2:	0003      	movs	r3, r0
 80035b4:	617b      	str	r3, [r7, #20]

  HAL_ADC_DeInit(&hadc1);
 80035b6:	4b09      	ldr	r3, [pc, #36]	; (80035dc <ADC_ReadChannels+0xdc>)
 80035b8:	0018      	movs	r0, r3
 80035ba:	f003 f83b 	bl	8006634 <HAL_ADC_DeInit>

  __HAL_RCC_ADC1_CLK_DISABLE();
 80035be:	4b06      	ldr	r3, [pc, #24]	; (80035d8 <ADC_ReadChannels+0xd8>)
 80035c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035c2:	4b05      	ldr	r3, [pc, #20]	; (80035d8 <ADC_ReadChannels+0xd8>)
 80035c4:	4908      	ldr	r1, [pc, #32]	; (80035e8 <ADC_ReadChannels+0xe8>)
 80035c6:	400a      	ands	r2, r1
 80035c8:	635a      	str	r2, [r3, #52]	; 0x34

  return ADCxConvertedValues;
 80035ca:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 80035cc:	0018      	movs	r0, r3
 80035ce:	46bd      	mov	sp, r7
 80035d0:	b007      	add	sp, #28
 80035d2:	bd90      	pop	{r4, r7, pc}
 80035d4:	40007000 	.word	0x40007000
 80035d8:	40021000 	.word	0x40021000
 80035dc:	2000140c 	.word	0x2000140c
 80035e0:	0007ffff 	.word	0x0007ffff
 80035e4:	00001001 	.word	0x00001001
 80035e8:	fffffdff 	.word	0xfffffdff

080035ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */

  __HAL_RCC_DMA1_CLK_ENABLE();
 80035f2:	4b0c      	ldr	r3, [pc, #48]	; (8003624 <MX_DMA_Init+0x38>)
 80035f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035f6:	4b0b      	ldr	r3, [pc, #44]	; (8003624 <MX_DMA_Init+0x38>)
 80035f8:	2101      	movs	r1, #1
 80035fa:	430a      	orrs	r2, r1
 80035fc:	631a      	str	r2, [r3, #48]	; 0x30
 80035fe:	4b09      	ldr	r3, [pc, #36]	; (8003624 <MX_DMA_Init+0x38>)
 8003600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003602:	2201      	movs	r2, #1
 8003604:	4013      	ands	r3, r2
 8003606:	607b      	str	r3, [r7, #4]
 8003608:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 800360a:	2200      	movs	r2, #0
 800360c:	2100      	movs	r1, #0
 800360e:	200b      	movs	r0, #11
 8003610:	f003 fcce 	bl	8006fb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8003614:	200b      	movs	r0, #11
 8003616:	f003 fce0 	bl	8006fda <HAL_NVIC_EnableIRQ>

}
 800361a:	46c0      	nop			; (mov r8, r8)
 800361c:	46bd      	mov	sp, r7
 800361e:	b002      	add	sp, #8
 8003620:	bd80      	pop	{r7, pc}
 8003622:	46c0      	nop			; (mov r8, r8)
 8003624:	40021000 	.word	0x40021000

08003628 <EEPROM_WRITE_DATA>:

	}
	HAL_FLASHEx_DATAEEPROM_Lock();
}
 void EEPROM_WRITE_DATA(uint32_t addrepr, void *dataeprom, uint32_t sizeepr) // метод записи от АКТИВ
 {
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
	if ((addrepr < STM32L072_EEPROM_START_ADDR) || (addrepr >= STM32L072_EEPROM_END_ADDR))
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	4a1c      	ldr	r2, [pc, #112]	; (80036a8 <EEPROM_WRITE_DATA+0x80>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d903      	bls.n	8003644 <EEPROM_WRITE_DATA+0x1c>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	4a1b      	ldr	r2, [pc, #108]	; (80036ac <EEPROM_WRITE_DATA+0x84>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d90b      	bls.n	800365c <EEPROM_WRITE_DATA+0x34>
//			return EEPROM_ADDR_ERROR;
//		return;
	if ((sizeepr % 4 != 0) || ( sizeepr > STM32L072_EEPROM_END_ADDR - addrepr))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2203      	movs	r2, #3
 8003648:	4013      	ands	r3, r2
 800364a:	d105      	bne.n	8003658 <EEPROM_WRITE_DATA+0x30>
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	4a18      	ldr	r2, [pc, #96]	; (80036b0 <EEPROM_WRITE_DATA+0x88>)
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	429a      	cmp	r2, r3
 8003656:	d901      	bls.n	800365c <EEPROM_WRITE_DATA+0x34>
//			return EEPROM_SIZE_ERROR;
//		return;

	HAL_FLASHEx_DATAEEPROM_Unlock();            // Разблокировка памяти для чтения и записи с EEPROM
 8003658:	f004 f8e4 	bl	8007824 <HAL_FLASHEx_DATAEEPROM_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);  // Сброс флага write protect
 800365c:	4b15      	ldr	r3, [pc, #84]	; (80036b4 <EEPROM_WRITE_DATA+0x8c>)
 800365e:	2280      	movs	r2, #128	; 0x80
 8003660:	0052      	lsls	r2, r2, #1
 8003662:	619a      	str	r2, [r3, #24]
		for(uint32_t i = 0; i < sizeepr / 4 ; i++)
 8003664:	2300      	movs	r3, #0
 8003666:	617b      	str	r3, [r7, #20]
 8003668:	e013      	b.n	8003692 <EEPROM_WRITE_DATA+0x6a>
		{
			if (HAL_FLASHEx_DATAEEPROM_Erase(addrepr) != HAL_OK) {
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	0018      	movs	r0, r3
 800366e:	f004 f915 	bl	800789c <HAL_FLASHEx_DATAEEPROM_Erase>
//				return EEPROM_ERASE_ERROR;
//				return;
			}
			if (HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addrepr, ((uint32_t*)dataeprom)[i]) != HAL_OK) {
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	68ba      	ldr	r2, [r7, #8]
 8003678:	18d3      	adds	r3, r2, r3
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	0019      	movs	r1, r3
 8003680:	2000      	movs	r0, #0
 8003682:	f004 f937 	bl	80078f4 <HAL_FLASHEx_DATAEEPROM_Program>
//				return EEPROM_WRITE_ERROR;
//				return;
		    }

			addrepr = addrepr + 4;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	3304      	adds	r3, #4
 800368a:	60fb      	str	r3, [r7, #12]
		for(uint32_t i = 0; i < sizeepr / 4 ; i++)
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	3301      	adds	r3, #1
 8003690:	617b      	str	r3, [r7, #20]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	089b      	lsrs	r3, r3, #2
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	429a      	cmp	r2, r3
 800369a:	d3e6      	bcc.n	800366a <EEPROM_WRITE_DATA+0x42>
			}
  	HAL_FLASHEx_DATAEEPROM_Lock();
 800369c:	f004 f8f0 	bl	8007880 <HAL_FLASHEx_DATAEEPROM_Lock>
// 	return EEPROM_SOK;
 }
 80036a0:	46c0      	nop			; (mov r8, r8)
 80036a2:	46bd      	mov	sp, r7
 80036a4:	b006      	add	sp, #24
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	0807ffff 	.word	0x0807ffff
 80036ac:	080807ff 	.word	0x080807ff
 80036b0:	08080800 	.word	0x08080800
 80036b4:	40022000 	.word	0x40022000

080036b8 <EEPROM_Read_Data>:
   uint32_t readData;
   readData = *(__IO uint32_t*)(EEPROM_BASE_ADDR); // Чтение данных из EEPROM
   return readData;
 }

 void EEPROM_Read_Data(uint32_t addrepr, void *dataeprom, uint32_t sizeepr) {  // чтение от АКТИВ
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]

	 if ((addrepr < STM32L072_EEPROM_START_ADDR) || (addrepr >= STM32L072_EEPROM_END_ADDR))
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	4a1b      	ldr	r2, [pc, #108]	; (8003734 <EEPROM_Read_Data+0x7c>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d903      	bls.n	80036d4 <EEPROM_Read_Data+0x1c>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	4a1a      	ldr	r2, [pc, #104]	; (8003738 <EEPROM_Read_Data+0x80>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d903      	bls.n	80036dc <EEPROM_Read_Data+0x24>
//		 return EEPROM_ADDR_ERROR;
		  printf("Ошибка записи по адресу из EEPROM\n");
 80036d4:	4b19      	ldr	r3, [pc, #100]	; (800373c <EEPROM_Read_Data+0x84>)
 80036d6:	0018      	movs	r0, r3
 80036d8:	f01a fce6 	bl	801e0a8 <puts>
//	 	 return;
	 if ((sizeepr % 4 != 0) || ( sizeepr > STM32L072_EEPROM_END_ADDR - addrepr))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2203      	movs	r2, #3
 80036e0:	4013      	ands	r3, r2
 80036e2:	d105      	bne.n	80036f0 <EEPROM_Read_Data+0x38>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	4a16      	ldr	r2, [pc, #88]	; (8003740 <EEPROM_Read_Data+0x88>)
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d903      	bls.n	80036f8 <EEPROM_Read_Data+0x40>
//		 return EEPROM_SIZE_ERROR;
		  printf("Ошибка размера данных из EEPROM\n");
 80036f0:	4b14      	ldr	r3, [pc, #80]	; (8003744 <EEPROM_Read_Data+0x8c>)
 80036f2:	0018      	movs	r0, r3
 80036f4:	f01a fcd8 	bl	801e0a8 <puts>
//	 	 return;
	for(uint32_t i = 0; i < sizeepr / 4 ; i++) {
 80036f8:	2300      	movs	r3, #0
 80036fa:	617b      	str	r3, [r7, #20]
 80036fc:	e00f      	b.n	800371e <EEPROM_Read_Data+0x66>
		((uint8_t*)dataeprom)[i] = *(uint8_t*)(addrepr + i);
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	18d3      	adds	r3, r2, r3
 8003704:	0019      	movs	r1, r3
 8003706:	68ba      	ldr	r2, [r7, #8]
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	18d3      	adds	r3, r2, r3
 800370c:	780a      	ldrb	r2, [r1, #0]
 800370e:	701a      	strb	r2, [r3, #0]
		  printf("Данные успешно записаны и прочитаны из EEPROM\n");
 8003710:	4b0d      	ldr	r3, [pc, #52]	; (8003748 <EEPROM_Read_Data+0x90>)
 8003712:	0018      	movs	r0, r3
 8003714:	f01a fcc8 	bl	801e0a8 <puts>
	for(uint32_t i = 0; i < sizeepr / 4 ; i++) {
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	3301      	adds	r3, #1
 800371c:	617b      	str	r3, [r7, #20]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	089b      	lsrs	r3, r3, #2
 8003722:	697a      	ldr	r2, [r7, #20]
 8003724:	429a      	cmp	r2, r3
 8003726:	d3ea      	bcc.n	80036fe <EEPROM_Read_Data+0x46>
//		  return;
		}
	 // 	return EEPROM_SOK;
  }
 8003728:	46c0      	nop			; (mov r8, r8)
 800372a:	46c0      	nop			; (mov r8, r8)
 800372c:	46bd      	mov	sp, r7
 800372e:	b006      	add	sp, #24
 8003730:	bd80      	pop	{r7, pc}
 8003732:	46c0      	nop			; (mov r8, r8)
 8003734:	0807ffff 	.word	0x0807ffff
 8003738:	080807ff 	.word	0x080807ff
 800373c:	0801f07c 	.word	0x0801f07c
 8003740:	08080800 	.word	0x08080800
 8003744:	0801f0b4 	.word	0x0801f0b4
 8003748:	0801f0ec 	.word	0x0801f0ec

0800374c <EEPROM_CLEAR>:

 void EEPROM_CLEAR(void) {    // Очистка записи статистики от АКТИВ
 800374c:	b580      	push	{r7, lr}
 800374e:	b086      	sub	sp, #24
 8003750:	af00      	add	r7, sp, #0

	uint32_t address = 0;
 8003752:	2300      	movs	r3, #0
 8003754:	613b      	str	r3, [r7, #16]
	uint32_t Dataepr = 0;
 8003756:	2300      	movs	r3, #0
 8003758:	607b      	str	r3, [r7, #4]
    uint32_t max = 250;
 800375a:	23fa      	movs	r3, #250	; 0xfa
 800375c:	60fb      	str	r3, [r7, #12]
    uint32_t pause = 10;
 800375e:	230a      	movs	r3, #10
 8003760:	60bb      	str	r3, [r7, #8]
    	for (uint32_t i = 0; i < max; i++) {
 8003762:	2300      	movs	r3, #0
 8003764:	617b      	str	r3, [r7, #20]
 8003766:	e012      	b.n	800378e <EEPROM_CLEAR+0x42>
    		address = STM32L072_EEPROM_START_ADDR + i * 4;
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	4a0d      	ldr	r2, [pc, #52]	; (80037a0 <EEPROM_CLEAR+0x54>)
 800376c:	4694      	mov	ip, r2
 800376e:	4463      	add	r3, ip
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	613b      	str	r3, [r7, #16]
    		EEPROM_WRITE_DATA(address, &Dataepr, 4);
 8003774:	1d39      	adds	r1, r7, #4
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	2204      	movs	r2, #4
 800377a:	0018      	movs	r0, r3
 800377c:	f7ff ff54 	bl	8003628 <EEPROM_WRITE_DATA>
    		HAL_Delay(pause);
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	0018      	movs	r0, r3
 8003784:	f001 fb31 	bl	8004dea <HAL_Delay>
    	for (uint32_t i = 0; i < max; i++) {
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	3301      	adds	r3, #1
 800378c:	617b      	str	r3, [r7, #20]
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	429a      	cmp	r2, r3
 8003794:	d3e8      	bcc.n	8003768 <EEPROM_CLEAR+0x1c>
  }
 }
 8003796:	46c0      	nop			; (mov r8, r8)
 8003798:	46c0      	nop			; (mov r8, r8)
 800379a:	46bd      	mov	sp, r7
 800379c:	b006      	add	sp, #24
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	02020000 	.word	0x02020000

080037a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80037aa:	f002 fd55 	bl	8006258 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80037ae:	f000 f83d 	bl	800382c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_LoRaWAN_Init();
 80037b2:	f7ff f92f 	bl	8002a14 <MX_LoRaWAN_Init>
      	   		size = sprintf((char *)Data, "BMP280: found %s\n", bme280p ? "BME280" : "BMP280");
      	 	HAL_UART_Transmit(&husart2, Data, size, 1000);
      	 	*/
  //      uint16_t eepromBaseAddress = 0x08080000; // Пример адреса EEPROM
  	  #define eepromBaseAddress 0x08080000UL
        uint8_t dataToWrite[] = {0x01, 0x02, 0x03}; // Пример данных для записи
 80037b6:	003b      	movs	r3, r7
 80037b8:	4a1a      	ldr	r2, [pc, #104]	; (8003824 <main+0x80>)
 80037ba:	8811      	ldrh	r1, [r2, #0]
 80037bc:	8019      	strh	r1, [r3, #0]
 80037be:	7892      	ldrb	r2, [r2, #2]
 80037c0:	709a      	strb	r2, [r3, #2]
        uint8_t dataToWrite1 = 10; // Пример данных для записи
 80037c2:	1dfb      	adds	r3, r7, #7
 80037c4:	220a      	movs	r2, #10
 80037c6:	701a      	strb	r2, [r3, #0]
        uint8_t dataSize = sizeof(dataToWrite1); // Размер данных
 80037c8:	1dbb      	adds	r3, r7, #6
 80037ca:	2201      	movs	r2, #1
 80037cc:	701a      	strb	r2, [r3, #0]
  //      HAL_Delay(1000);
//        EEPROM_CLEAR();
//        EEPROM_WRITE_DATA(STM32L072_EEPROM_START_ADDR, dataToWrite1, dataSize);
  //    FLASHEx_EEPROM_WRITE(0, params->DownlinkCounter, sizeof(params->DownlinkCounter));
  //      dataeprom = dataToWrite;
        EEPROM_CLEAR();      // возможный вариант
 80037ce:	f7ff ffbd 	bl	800374c <EEPROM_CLEAR>
        EEPROM_WRITE_DATA(eepromBaseAddress, dataToWrite1, dataSize); // возможный вариант
 80037d2:	1dfb      	adds	r3, r7, #7
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	0019      	movs	r1, r3
 80037d8:	1dbb      	adds	r3, r7, #6
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	4812      	ldr	r0, [pc, #72]	; (8003828 <main+0x84>)
 80037de:	001a      	movs	r2, r3
 80037e0:	f7ff ff22 	bl	8003628 <EEPROM_WRITE_DATA>
        uint8_t datareadepr = 0; // Прочитанные данные
 80037e4:	1d7b      	adds	r3, r7, #5
 80037e6:	2200      	movs	r2, #0
 80037e8:	701a      	strb	r2, [r3, #0]
//        EEPROM_ReadData();
        uint8_t datareadeprerror = 2; // Буфер ошибки
 80037ea:	1d3b      	adds	r3, r7, #4
 80037ec:	2202      	movs	r2, #2
 80037ee:	701a      	strb	r2, [r3, #0]
        EEPROM_Read_Data(eepromBaseAddress, datareadepr, dataSize); //  возможный вариант
 80037f0:	1d7b      	adds	r3, r7, #5
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	0019      	movs	r1, r3
 80037f6:	1dbb      	adds	r3, r7, #6
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	480b      	ldr	r0, [pc, #44]	; (8003828 <main+0x84>)
 80037fc:	001a      	movs	r2, r3
 80037fe:	f7ff ff5b 	bl	80036b8 <EEPROM_Read_Data>
//        datareadepr =  EEPROM_ReadData();
//        datareadepr = EEPROM_Read_Data();
//        memcmp(datareadepr,dataToWrite);
         if (datareadepr == dataToWrite1)
 8003802:	1d7a      	adds	r2, r7, #5
 8003804:	1dfb      	adds	r3, r7, #7
 8003806:	7812      	ldrb	r2, [r2, #0]
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	429a      	cmp	r2, r3
 800380c:	d103      	bne.n	8003816 <main+0x72>
        {
        	datareadeprerror = 100;
 800380e:	1d3b      	adds	r3, r7, #4
 8003810:	2264      	movs	r2, #100	; 0x64
 8003812:	701a      	strb	r2, [r3, #0]
 8003814:	e002      	b.n	800381c <main+0x78>
        }
        else {
            // Прочитанные данные не соответствуют записанным данным
            // Выполняйте необходимые действия здесь
//               printf("Ошибка при записи или чтении данных из EEPROM\n");
            datareadeprerror =  0;
 8003816:	1d3b      	adds	r3, r7, #4
 8003818:	2200      	movs	r2, #0
 800381a:	701a      	strb	r2, [r3, #0]
    /* USER CODE END WHILE */
	  // HAL_LPTIM_Counter_Start_IT(&hlptim1,1000);
	  // HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
	  // HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);

    MX_LoRaWAN_Process();
 800381c:	f7ff f903 	bl	8002a26 <MX_LoRaWAN_Process>
 8003820:	e7fc      	b.n	800381c <main+0x78>
 8003822:	46c0      	nop			; (mov r8, r8)
 8003824:	0801f13c 	.word	0x0801f13c
 8003828:	08080000 	.word	0x08080000

0800382c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) //NEW С МЭЙНА
{
 800382c:	b590      	push	{r4, r7, lr}
 800382e:	b09d      	sub	sp, #116	; 0x74
 8003830:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003832:	2438      	movs	r4, #56	; 0x38
 8003834:	193b      	adds	r3, r7, r4
 8003836:	0018      	movs	r0, r3
 8003838:	2338      	movs	r3, #56	; 0x38
 800383a:	001a      	movs	r2, r3
 800383c:	2100      	movs	r1, #0
 800383e:	f01a fbb8 	bl	801dfb2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003842:	2324      	movs	r3, #36	; 0x24
 8003844:	18fb      	adds	r3, r7, r3
 8003846:	0018      	movs	r0, r3
 8003848:	2314      	movs	r3, #20
 800384a:	001a      	movs	r2, r3
 800384c:	2100      	movs	r1, #0
 800384e:	f01a fbb0 	bl	801dfb2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003852:	003b      	movs	r3, r7
 8003854:	0018      	movs	r0, r3
 8003856:	2324      	movs	r3, #36	; 0x24
 8003858:	001a      	movs	r2, r3
 800385a:	2100      	movs	r1, #0
 800385c:	f01a fba9 	bl	801dfb2 <memset>
  /* Enable HSE Oscillator and Activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 8003860:	0021      	movs	r1, r4
 8003862:	187b      	adds	r3, r7, r1
 8003864:	2202      	movs	r2, #2
 8003866:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState            = RCC_HSE_OFF;
 8003868:	187b      	adds	r3, r7, r1
 800386a:	2200      	movs	r2, #0
 800386c:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 800386e:	187b      	adds	r3, r7, r1
 8003870:	2201      	movs	r2, #1
 8003872:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;// n
 8003874:	187b      	adds	r3, r7, r1
 8003876:	2201      	movs	r2, #1
 8003878:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800387a:	187b      	adds	r3, r7, r1
 800387c:	2210      	movs	r2, #16
 800387e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 8003880:	187b      	adds	r3, r7, r1
 8003882:	2202      	movs	r2, #2
 8003884:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
 8003886:	187b      	adds	r3, r7, r1
 8003888:	2200      	movs	r2, #0
 800388a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLLMUL_6;
 800388c:	187b      	adds	r3, r7, r1
 800388e:	2280      	movs	r2, #128	; 0x80
 8003890:	0312      	lsls	r2, r2, #12
 8003892:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 8003894:	187b      	adds	r3, r7, r1
 8003896:	2280      	movs	r2, #128	; 0x80
 8003898:	0412      	lsls	r2, r2, #16
 800389a:	635a      	str	r2, [r3, #52]	; 0x34

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800389c:	187b      	adds	r3, r7, r1
 800389e:	0018      	movs	r0, r3
 80038a0:	f005 f9f6 	bl	8008c90 <HAL_RCC_OscConfig>
 80038a4:	1e03      	subs	r3, r0, #0
 80038a6:	d001      	beq.n	80038ac <SystemClock_Config+0x80>
  {
    Error_Handler();
 80038a8:	f000 f856 	bl	8003958 <Error_Handler>
  }

  /* Set Voltage scale1 as MCU will run at 32MHz */
__HAL_RCC_PWR_CLK_ENABLE();
 80038ac:	4b27      	ldr	r3, [pc, #156]	; (800394c <SystemClock_Config+0x120>)
 80038ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038b0:	4b26      	ldr	r3, [pc, #152]	; (800394c <SystemClock_Config+0x120>)
 80038b2:	2180      	movs	r1, #128	; 0x80
 80038b4:	0549      	lsls	r1, r1, #21
 80038b6:	430a      	orrs	r2, r1
 80038b8:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80038ba:	4b25      	ldr	r3, [pc, #148]	; (8003950 <SystemClock_Config+0x124>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a25      	ldr	r2, [pc, #148]	; (8003954 <SystemClock_Config+0x128>)
 80038c0:	401a      	ands	r2, r3
 80038c2:	4b23      	ldr	r3, [pc, #140]	; (8003950 <SystemClock_Config+0x124>)
 80038c4:	2180      	movs	r1, #128	; 0x80
 80038c6:	0109      	lsls	r1, r1, #4
 80038c8:	430a      	orrs	r2, r1
 80038ca:	601a      	str	r2, [r3, #0]

  /* Poll VOSF bit of in PWR_CSR. Wait until it is reset to 0 */
 while (__HAL_PWR_GET_FLAG(PWR_FLAG_VOS) != RESET) {};
 80038cc:	46c0      	nop			; (mov r8, r8)
 80038ce:	4b20      	ldr	r3, [pc, #128]	; (8003950 <SystemClock_Config+0x124>)
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	2210      	movs	r2, #16
 80038d4:	4013      	ands	r3, r2
 80038d6:	2b10      	cmp	r3, #16
 80038d8:	d0f9      	beq.n	80038ce <SystemClock_Config+0xa2>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
  clocks dividers */
 RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 80038da:	2124      	movs	r1, #36	; 0x24
 80038dc:	187b      	adds	r3, r7, r1
 80038de:	220f      	movs	r2, #15
 80038e0:	601a      	str	r2, [r3, #0]
		 | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038e2:	187b      	adds	r3, r7, r1
 80038e4:	2203      	movs	r2, #3
 80038e6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038e8:	187b      	adds	r3, r7, r1
 80038ea:	2200      	movs	r2, #0
 80038ec:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80038ee:	187b      	adds	r3, r7, r1
 80038f0:	2200      	movs	r2, #0
 80038f2:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80038f4:	187b      	adds	r3, r7, r1
 80038f6:	2200      	movs	r2, #0
 80038f8:	611a      	str	r2, [r3, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80038fa:	187b      	adds	r3, r7, r1
 80038fc:	2101      	movs	r1, #1
 80038fe:	0018      	movs	r0, r3
 8003900:	f005 fd9a 	bl	8009438 <HAL_RCC_ClockConfig>
 8003904:	1e03      	subs	r3, r0, #0
 8003906:	d001      	beq.n	800390c <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8003908:	f000 f826 	bl	8003958 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 800390c:	003b      	movs	r3, r7
 800390e:	22ab      	movs	r2, #171	; 0xab
 8003910:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_LPTIM1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003912:	003b      	movs	r3, r7
 8003914:	2200      	movs	r2, #0
 8003916:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003918:	003b      	movs	r3, r7
 800391a:	2200      	movs	r2, #0
 800391c:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800391e:	003b      	movs	r3, r7
 8003920:	2200      	movs	r2, #0
 8003922:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003924:	003b      	movs	r3, r7
 8003926:	2280      	movs	r2, #128	; 0x80
 8003928:	0292      	lsls	r2, r2, #10
 800392a:	605a      	str	r2, [r3, #4]
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 800392c:	003b      	movs	r3, r7
 800392e:	2200      	movs	r2, #0
 8003930:	61da      	str	r2, [r3, #28]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003932:	003b      	movs	r3, r7
 8003934:	0018      	movs	r0, r3
 8003936:	f005 ffa3 	bl	8009880 <HAL_RCCEx_PeriphCLKConfig>
 800393a:	1e03      	subs	r3, r0, #0
 800393c:	d001      	beq.n	8003942 <SystemClock_Config+0x116>
  {
    Error_Handler();
 800393e:	f000 f80b 	bl	8003958 <Error_Handler>
  }
}
 8003942:	46c0      	nop			; (mov r8, r8)
 8003944:	46bd      	mov	sp, r7
 8003946:	b01d      	add	sp, #116	; 0x74
 8003948:	bd90      	pop	{r4, r7, pc}
 800394a:	46c0      	nop			; (mov r8, r8)
 800394c:	40021000 	.word	0x40021000
 8003950:	40007000 	.word	0x40007000
 8003954:	ffffe7ff 	.word	0xffffe7ff

08003958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while (1)
 800395c:	e7fe      	b.n	800395c <Error_Handler+0x4>
	...

08003960 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b090      	sub	sp, #64	; 0x40
 8003964:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8003966:	232c      	movs	r3, #44	; 0x2c
 8003968:	18fb      	adds	r3, r7, r3
 800396a:	0018      	movs	r0, r3
 800396c:	2314      	movs	r3, #20
 800396e:	001a      	movs	r2, r3
 8003970:	2100      	movs	r1, #0
 8003972:	f01a fb1e 	bl	801dfb2 <memset>
  RTC_DateTypeDef sDate = {0};
 8003976:	2328      	movs	r3, #40	; 0x28
 8003978:	18fb      	adds	r3, r7, r3
 800397a:	2200      	movs	r2, #0
 800397c:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 800397e:	003b      	movs	r3, r7
 8003980:	0018      	movs	r0, r3
 8003982:	2328      	movs	r3, #40	; 0x28
 8003984:	001a      	movs	r2, r3
 8003986:	2100      	movs	r1, #0
 8003988:	f01a fb13 	bl	801dfb2 <memset>

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800398c:	4b41      	ldr	r3, [pc, #260]	; (8003a94 <MX_RTC_Init+0x134>)
 800398e:	4a42      	ldr	r2, [pc, #264]	; (8003a98 <MX_RTC_Init+0x138>)
 8003990:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003992:	4b40      	ldr	r3, [pc, #256]	; (8003a94 <MX_RTC_Init+0x134>)
 8003994:	2200      	movs	r2, #0
 8003996:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8003998:	4b3e      	ldr	r3, [pc, #248]	; (8003a94 <MX_RTC_Init+0x134>)
 800399a:	221f      	movs	r2, #31
 800399c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = RTC_PREDIV_S;
 800399e:	4b3d      	ldr	r3, [pc, #244]	; (8003a94 <MX_RTC_Init+0x134>)
 80039a0:	4a3e      	ldr	r2, [pc, #248]	; (8003a9c <MX_RTC_Init+0x13c>)
 80039a2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80039a4:	4b3b      	ldr	r3, [pc, #236]	; (8003a94 <MX_RTC_Init+0x134>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80039aa:	4b3a      	ldr	r3, [pc, #232]	; (8003a94 <MX_RTC_Init+0x134>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80039b0:	4b38      	ldr	r3, [pc, #224]	; (8003a94 <MX_RTC_Init+0x134>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80039b6:	4b37      	ldr	r3, [pc, #220]	; (8003a94 <MX_RTC_Init+0x134>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	61da      	str	r2, [r3, #28]

  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80039bc:	4b35      	ldr	r3, [pc, #212]	; (8003a94 <MX_RTC_Init+0x134>)
 80039be:	0018      	movs	r0, r3
 80039c0:	f006 f8b4 	bl	8009b2c <HAL_RTC_Init>
 80039c4:	1e03      	subs	r3, r0, #0
 80039c6:	d001      	beq.n	80039cc <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 80039c8:	f7ff ffc6 	bl	8003958 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80039cc:	212c      	movs	r1, #44	; 0x2c
 80039ce:	187b      	adds	r3, r7, r1
 80039d0:	2200      	movs	r2, #0
 80039d2:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 80039d4:	187b      	adds	r3, r7, r1
 80039d6:	2200      	movs	r2, #0
 80039d8:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 80039da:	187b      	adds	r3, r7, r1
 80039dc:	2200      	movs	r2, #0
 80039de:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80039e0:	187b      	adds	r3, r7, r1
 80039e2:	2200      	movs	r2, #0
 80039e4:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80039e6:	187b      	adds	r3, r7, r1
 80039e8:	2200      	movs	r2, #0
 80039ea:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80039ec:	1879      	adds	r1, r7, r1
 80039ee:	4b29      	ldr	r3, [pc, #164]	; (8003a94 <MX_RTC_Init+0x134>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	0018      	movs	r0, r3
 80039f4:	f006 f938 	bl	8009c68 <HAL_RTC_SetTime>
 80039f8:	1e03      	subs	r3, r0, #0
 80039fa:	d001      	beq.n	8003a00 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 80039fc:	f7ff ffac 	bl	8003958 <Error_Handler>
  }

  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003a00:	2128      	movs	r1, #40	; 0x28
 8003a02:	187b      	adds	r3, r7, r1
 8003a04:	2201      	movs	r2, #1
 8003a06:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003a08:	187b      	adds	r3, r7, r1
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 8003a0e:	187b      	adds	r3, r7, r1
 8003a10:	2201      	movs	r2, #1
 8003a12:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 8003a14:	187b      	adds	r3, r7, r1
 8003a16:	2200      	movs	r2, #0
 8003a18:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8003a1a:	1879      	adds	r1, r7, r1
 8003a1c:	4b1d      	ldr	r3, [pc, #116]	; (8003a94 <MX_RTC_Init+0x134>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	0018      	movs	r0, r3
 8003a22:	f006 fa41 	bl	8009ea8 <HAL_RTC_SetDate>
 8003a26:	1e03      	subs	r3, r0, #0
 8003a28:	d001      	beq.n	8003a2e <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8003a2a:	f7ff ff95 	bl	8003958 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8003a2e:	003b      	movs	r3, r7
 8003a30:	2200      	movs	r2, #0
 8003a32:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8003a34:	003b      	movs	r3, r7
 8003a36:	2200      	movs	r2, #0
 8003a38:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8003a3a:	003b      	movs	r3, r7
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8003a40:	003b      	movs	r3, r7
 8003a42:	2200      	movs	r2, #0
 8003a44:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003a46:	003b      	movs	r3, r7
 8003a48:	2200      	movs	r2, #0
 8003a4a:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003a4c:	003b      	movs	r3, r7
 8003a4e:	2200      	movs	r2, #0
 8003a50:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8003a52:	003b      	movs	r3, r7
 8003a54:	2200      	movs	r2, #0
 8003a56:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_SS14_10;
 8003a58:	003b      	movs	r3, r7
 8003a5a:	22a0      	movs	r2, #160	; 0xa0
 8003a5c:	0512      	lsls	r2, r2, #20
 8003a5e:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003a60:	003b      	movs	r3, r7
 8003a62:	2200      	movs	r2, #0
 8003a64:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 30;
 8003a66:	003b      	movs	r3, r7
 8003a68:	2220      	movs	r2, #32
 8003a6a:	211e      	movs	r1, #30
 8003a6c:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8003a6e:	003b      	movs	r3, r7
 8003a70:	2280      	movs	r2, #128	; 0x80
 8003a72:	0052      	lsls	r2, r2, #1
 8003a74:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8003a76:	0039      	movs	r1, r7
 8003a78:	4b06      	ldr	r3, [pc, #24]	; (8003a94 <MX_RTC_Init+0x134>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	0018      	movs	r0, r3
 8003a7e:	f006 fb0f 	bl	800a0a0 <HAL_RTC_SetAlarm_IT>
 8003a82:	1e03      	subs	r3, r0, #0
 8003a84:	d001      	beq.n	8003a8a <MX_RTC_Init+0x12a>
  {
    Error_Handler();
 8003a86:	f7ff ff67 	bl	8003958 <Error_Handler>
  }

}
 8003a8a:	46c0      	nop			; (mov r8, r8)
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	b010      	add	sp, #64	; 0x40
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	46c0      	nop			; (mov r8, r8)
 8003a94:	200014a8 	.word	0x200014a8
 8003a98:	40002800 	.word	0x40002800
 8003a9c:	000003ff 	.word	0x000003ff

08003aa0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef *rtcHandle)
{
 8003aa0:	b590      	push	{r4, r7, lr}
 8003aa2:	b091      	sub	sp, #68	; 0x44
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]

  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003aa8:	2408      	movs	r4, #8
 8003aaa:	193b      	adds	r3, r7, r4
 8003aac:	0018      	movs	r0, r3
 8003aae:	2338      	movs	r3, #56	; 0x38
 8003ab0:	001a      	movs	r2, r3
 8003ab2:	2100      	movs	r1, #0
 8003ab4:	f01a fa7d 	bl	801dfb2 <memset>
  if (rtcHandle->Instance == RTC)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a16      	ldr	r2, [pc, #88]	; (8003b18 <HAL_RTC_MspInit+0x78>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d126      	bne.n	8003b10 <HAL_RTC_MspInit+0x70>
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /** Initializes the peripherals clocks
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 8003ac2:	193b      	adds	r3, r7, r4
 8003ac4:	2204      	movs	r2, #4
 8003ac6:	601a      	str	r2, [r3, #0]
    RCC_OscInitStruct.LSEState = RCC_LSE_ON; // SWAP OFF НО ТОЛКУ ТО? Спасёт ли это при моей проблеме
 8003ac8:	193b      	adds	r3, r7, r4
 8003aca:	2280      	movs	r2, #128	; 0x80
 8003acc:	0052      	lsls	r2, r2, #1
 8003ace:	609a      	str	r2, [r3, #8]
    RCC_OscInitStruct.LSIState = RCC_LSI_OFF;// SWAP ON
 8003ad0:	193b      	adds	r3, r7, r4
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	615a      	str	r2, [r3, #20]
    RCC_OscInitStruct.HSEState = RCC_HSE_OFF;
 8003ad6:	193b      	adds	r3, r7, r4
 8003ad8:	2200      	movs	r2, #0
 8003ada:	605a      	str	r2, [r3, #4]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003adc:	193b      	adds	r3, r7, r4
 8003ade:	2200      	movs	r2, #0
 8003ae0:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ae2:	193b      	adds	r3, r7, r4
 8003ae4:	0018      	movs	r0, r3
 8003ae6:	f005 f8d3 	bl	8008c90 <HAL_RCC_OscConfig>
 8003aea:	1e03      	subs	r3, r0, #0
 8003aec:	d001      	beq.n	8003af2 <HAL_RTC_MspInit+0x52>
    {
      Error_Handler();
 8003aee:	f7ff ff33 	bl	8003958 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003af2:	4b0a      	ldr	r3, [pc, #40]	; (8003b1c <HAL_RTC_MspInit+0x7c>)
 8003af4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003af6:	4b09      	ldr	r3, [pc, #36]	; (8003b1c <HAL_RTC_MspInit+0x7c>)
 8003af8:	2180      	movs	r1, #128	; 0x80
 8003afa:	02c9      	lsls	r1, r1, #11
 8003afc:	430a      	orrs	r2, r1
 8003afe:	651a      	str	r2, [r3, #80]	; 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8003b00:	2200      	movs	r2, #0
 8003b02:	2100      	movs	r1, #0
 8003b04:	2002      	movs	r0, #2
 8003b06:	f003 fa53 	bl	8006fb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn); // вот это отрубать еси шо
 8003b0a:	2002      	movs	r0, #2
 8003b0c:	f003 fa65 	bl	8006fda <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN RTC_MspInit 1 */

    /* USER CODE END RTC_MspInit 1 */
  }
}
 8003b10:	46c0      	nop			; (mov r8, r8)
 8003b12:	46bd      	mov	sp, r7
 8003b14:	b011      	add	sp, #68	; 0x44
 8003b16:	bd90      	pop	{r4, r7, pc}
 8003b18:	40002800 	.word	0x40002800
 8003b1c:	40021000 	.word	0x40021000

08003b20 <LL_RTC_TIME_GetSubSecond>:
  * @rmtoll SSR          SS            LL_RTC_TIME_GetSubSecond
  * @param  RTCx RTC Instance
  * @retval Sub second value (number between 0 and 65535)
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b2c:	041b      	lsls	r3, r3, #16
 8003b2e:	0c1b      	lsrs	r3, r3, #16
}
 8003b30:	0018      	movs	r0, r3
 8003b32:	46bd      	mov	sp, r7
 8003b34:	b002      	add	sp, #8
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <RTC_IF_Init>:
/* USER CODE BEGIN Exported_Functions */

/* USER CODE END Exported_Functions */

UTIL_TIMER_Status_t RTC_IF_Init(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b08a      	sub	sp, #40	; 0x28
 8003b3c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;

  if (RTC_Initalized == false)
 8003b3e:	4b16      	ldr	r3, [pc, #88]	; (8003b98 <RTC_IF_Init+0x60>)
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	2201      	movs	r2, #1
 8003b44:	4053      	eors	r3, r2
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d01f      	beq.n	8003b8c <RTC_IF_Init+0x54>
    RTC_IF_DBG_PRINTF("RTC_init\n\r");

    /* ##-1- Configure the RTC clock source ###################################### */

    /* Select LSE as RTC clock source */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003b4c:	1d3b      	adds	r3, r7, #4
 8003b4e:	2220      	movs	r2, #32
 8003b50:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003b52:	1d3b      	adds	r3, r7, #4
 8003b54:	2280      	movs	r2, #128	; 0x80
 8003b56:	0252      	lsls	r2, r2, #9
 8003b58:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b5a:	1d3b      	adds	r3, r7, #4
 8003b5c:	0018      	movs	r0, r3
 8003b5e:	f005 fe8f 	bl	8009880 <HAL_RCCEx_PeriphCLKConfig>
 8003b62:	1e03      	subs	r3, r0, #0
 8003b64:	d000      	beq.n	8003b68 <RTC_IF_Init+0x30>
    {
      /* Initialization Error */
      while (1);
 8003b66:	e7fe      	b.n	8003b66 <RTC_IF_Init+0x2e>
    }

    MX_RTC_Init();
 8003b68:	f7ff fefa 	bl	8003960 <MX_RTC_Init>

    /** Configure the Alarm A */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8003b6c:	2380      	movs	r3, #128	; 0x80
 8003b6e:	005a      	lsls	r2, r3, #1
 8003b70:	4b0a      	ldr	r3, [pc, #40]	; (8003b9c <RTC_IF_Init+0x64>)
 8003b72:	0011      	movs	r1, r2
 8003b74:	0018      	movs	r0, r3
 8003b76:	f006 fbdf 	bl	800a338 <HAL_RTC_DeactivateAlarm>
    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8003b7a:	4b08      	ldr	r3, [pc, #32]	; (8003b9c <RTC_IF_Init+0x64>)
 8003b7c:	0018      	movs	r0, r3
 8003b7e:	f006 fd89 	bl	800a694 <HAL_RTCEx_EnableBypassShadow>

    RTC_IF_SetTimerContext();
 8003b82:	f000 f859 	bl	8003c38 <RTC_IF_SetTimerContext>

    RTC_Initalized = true;
 8003b86:	4b04      	ldr	r3, [pc, #16]	; (8003b98 <RTC_IF_Init+0x60>)
 8003b88:	2201      	movs	r2, #1
 8003b8a:	701a      	strb	r2, [r3, #0]
  }
  return UTIL_TIMER_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	0018      	movs	r0, r3
 8003b90:	46bd      	mov	sp, r7
 8003b92:	b00a      	add	sp, #40	; 0x28
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	46c0      	nop			; (mov r8, r8)
 8003b98:	200003c0 	.word	0x200003c0
 8003b9c:	200014a8 	.word	0x200014a8

08003ba0 <RTC_IF_StartTimer>:

UTIL_TIMER_Status_t RTC_IF_StartTimer(uint32_t timeout)
{
 8003ba0:	b590      	push	{r4, r7, lr}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  /* we don't go in Low Power mode for timeout below MIN_ALARM_DELAY */
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - RTC_IF_GetTimerElapsedTime())))
 8003ba8:	4b14      	ldr	r3, [pc, #80]	; (8003bfc <RTC_IF_StartTimer+0x5c>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	5e9b      	ldrsh	r3, [r3, r2]
 8003bae:	3303      	adds	r3, #3
 8003bb0:	001c      	movs	r4, r3
 8003bb2:	f000 f861 	bl	8003c78 <RTC_IF_GetTimerElapsedTime>
 8003bb6:	0002      	movs	r2, r0
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	1a9b      	subs	r3, r3, r2
 8003bbc:	429c      	cmp	r4, r3
 8003bbe:	d204      	bcs.n	8003bca <RTC_IF_StartTimer+0x2a>
  {
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_ENABLE);
 8003bc0:	2100      	movs	r1, #0
 8003bc2:	2002      	movs	r0, #2
 8003bc4:	f018 fc10 	bl	801c3e8 <UTIL_LPM_SetStopMode>
 8003bc8:	e003      	b.n	8003bd2 <RTC_IF_StartTimer+0x32>
  }
  else
  {
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_DISABLE);
 8003bca:	2101      	movs	r1, #1
 8003bcc:	2002      	movs	r0, #2
 8003bce:	f018 fc0b 	bl	801c3e8 <UTIL_LPM_SetStopMode>
  }

  /*In case stop mode is required */
  if (UTIL_LPM_GetMode() == UTIL_LPM_STOPMODE)
 8003bd2:	f018 fc69 	bl	801c4a8 <UTIL_LPM_GetMode>
 8003bd6:	0003      	movs	r3, r0
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d106      	bne.n	8003bea <RTC_IF_StartTimer+0x4a>
  {
    timeout = timeout -  McuWakeUpTimeCal;
 8003bdc:	4b07      	ldr	r3, [pc, #28]	; (8003bfc <RTC_IF_StartTimer+0x5c>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	5e9b      	ldrsh	r3, [r3, r2]
 8003be2:	001a      	movs	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	1a9b      	subs	r3, r3, r2
 8003be8:	607b      	str	r3, [r7, #4]
  }

  RTC_StartWakeUpAlarm(timeout);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	0018      	movs	r0, r3
 8003bee:	f000 f959 	bl	8003ea4 <RTC_StartWakeUpAlarm>
  return UTIL_TIMER_OK;
 8003bf2:	2300      	movs	r3, #0
}
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	b003      	add	sp, #12
 8003bfa:	bd90      	pop	{r4, r7, pc}
 8003bfc:	200003c2 	.word	0x200003c2

08003c00 <RTC_IF_StopTimer>:

UTIL_TIMER_Status_t RTC_IF_StopTimer(void)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	af00      	add	r7, sp, #0
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8003c04:	4b0a      	ldr	r3, [pc, #40]	; (8003c30 <RTC_IF_StopTimer+0x30>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	22ff      	movs	r2, #255	; 0xff
 8003c0c:	401a      	ands	r2, r3
 8003c0e:	4b08      	ldr	r3, [pc, #32]	; (8003c30 <RTC_IF_StopTimer+0x30>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4908      	ldr	r1, [pc, #32]	; (8003c34 <RTC_IF_StopTimer+0x34>)
 8003c14:	430a      	orrs	r2, r1
 8003c16:	60da      	str	r2, [r3, #12]
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8003c18:	2380      	movs	r3, #128	; 0x80
 8003c1a:	005a      	lsls	r2, r3, #1
 8003c1c:	4b04      	ldr	r3, [pc, #16]	; (8003c30 <RTC_IF_StopTimer+0x30>)
 8003c1e:	0011      	movs	r1, r2
 8003c20:	0018      	movs	r0, r3
 8003c22:	f006 fb89 	bl	800a338 <HAL_RTC_DeactivateAlarm>
  return UTIL_TIMER_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	0018      	movs	r0, r3
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	46c0      	nop			; (mov r8, r8)
 8003c30:	200014a8 	.word	0x200014a8
 8003c34:	fffffe7f 	.word	0xfffffe7f

08003c38 <RTC_IF_SetTimerContext>:

uint32_t RTC_IF_SetTimerContext(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext.Rtc_Time = RTC_GetCalendarValue(&RtcTimerContext.RTC_Calndr_Date, &RtcTimerContext.RTC_Calndr_Time);
 8003c3c:	4a06      	ldr	r2, [pc, #24]	; (8003c58 <RTC_IF_SetTimerContext+0x20>)
 8003c3e:	4b07      	ldr	r3, [pc, #28]	; (8003c5c <RTC_IF_SetTimerContext+0x24>)
 8003c40:	0011      	movs	r1, r2
 8003c42:	0018      	movs	r0, r3
 8003c44:	f000 fa94 	bl	8004170 <RTC_GetCalendarValue>
 8003c48:	0002      	movs	r2, r0
 8003c4a:	4b05      	ldr	r3, [pc, #20]	; (8003c60 <RTC_IF_SetTimerContext+0x28>)
 8003c4c:	601a      	str	r2, [r3, #0]
  RTC_IF_DBG_PRINTF("RTC_IF_SetTimerContext=%d\n\r", RtcTimerContext.Rtc_Time);
  /*return time context*/
  return (uint32_t) RtcTimerContext.Rtc_Time;
 8003c4e:	4b04      	ldr	r3, [pc, #16]	; (8003c60 <RTC_IF_SetTimerContext+0x28>)
 8003c50:	681b      	ldr	r3, [r3, #0]
}
 8003c52:	0018      	movs	r0, r3
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	200003f0 	.word	0x200003f0
 8003c5c:	20000404 	.word	0x20000404
 8003c60:	200003ec 	.word	0x200003ec

08003c64 <RTC_IF_GetTimerContext>:

uint32_t RTC_IF_GetTimerContext(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	af00      	add	r7, sp, #0
  RTC_IF_DBG_PRINTF("RTC_IF_GetTimerContext=%d\n\r", RtcTimerContext.Rtc_Time);
  /*return time context*/
  return (uint32_t) RtcTimerContext.Rtc_Time;
 8003c68:	4b02      	ldr	r3, [pc, #8]	; (8003c74 <RTC_IF_GetTimerContext+0x10>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
}
 8003c6c:	0018      	movs	r0, r3
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	46c0      	nop			; (mov r8, r8)
 8003c74:	200003ec 	.word	0x200003ec

08003c78 <RTC_IF_GetTimerElapsedTime>:

uint32_t RTC_IF_GetTimerElapsedTime(void)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b088      	sub	sp, #32
 8003c7c:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_DateTypeDef RTC_DateStruct;

  uint32_t CalendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8003c7e:	2308      	movs	r3, #8
 8003c80:	18fa      	adds	r2, r7, r3
 8003c82:	1d3b      	adds	r3, r7, #4
 8003c84:	0011      	movs	r1, r2
 8003c86:	0018      	movs	r0, r3
 8003c88:	f000 fa72 	bl	8004170 <RTC_GetCalendarValue>
 8003c8c:	0003      	movs	r3, r0
 8003c8e:	61fb      	str	r3, [r7, #28]

  return ((uint32_t)(CalendarValue - RtcTimerContext.Rtc_Time));
 8003c90:	4b03      	ldr	r3, [pc, #12]	; (8003ca0 <RTC_IF_GetTimerElapsedTime+0x28>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	69fa      	ldr	r2, [r7, #28]
 8003c96:	1ad3      	subs	r3, r2, r3
}
 8003c98:	0018      	movs	r0, r3
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	b008      	add	sp, #32
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	200003ec 	.word	0x200003ec

08003ca4 <RTC_IF_GetTimerValue>:

uint32_t RTC_IF_GetTimerValue(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b088      	sub	sp, #32
 8003ca8:	af00      	add	r7, sp, #0
  uint32_t CalendarValue = 0;
 8003caa:	2300      	movs	r3, #0
 8003cac:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_DateTypeDef RTC_DateStruct;

  if (RTC_Initalized == true)
 8003cae:	4b09      	ldr	r3, [pc, #36]	; (8003cd4 <RTC_IF_GetTimerValue+0x30>)
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d008      	beq.n	8003cc8 <RTC_IF_GetTimerValue+0x24>
  {
    CalendarValue = (uint32_t) RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8003cb6:	2308      	movs	r3, #8
 8003cb8:	18fa      	adds	r2, r7, r3
 8003cba:	1d3b      	adds	r3, r7, #4
 8003cbc:	0011      	movs	r1, r2
 8003cbe:	0018      	movs	r0, r3
 8003cc0:	f000 fa56 	bl	8004170 <RTC_GetCalendarValue>
 8003cc4:	0003      	movs	r3, r0
 8003cc6:	61fb      	str	r3, [r7, #28]
  }
  return CalendarValue;
 8003cc8:	69fb      	ldr	r3, [r7, #28]
}
 8003cca:	0018      	movs	r0, r3
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	b008      	add	sp, #32
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	46c0      	nop			; (mov r8, r8)
 8003cd4:	200003c0 	.word	0x200003c0

08003cd8 <RTC_IF_GetMinimumTimeout>:

uint32_t RTC_IF_GetMinimumTimeout(void)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	af00      	add	r7, sp, #0
  return (MIN_ALARM_DELAY);
 8003cdc:	2303      	movs	r3, #3
}
 8003cde:	0018      	movs	r0, r3
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <RTC_IF_Convert_ms2Tick>:

uint32_t RTC_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8003ce4:	b5b0      	push	{r4, r5, r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 8003cec:	6879      	ldr	r1, [r7, #4]
 8003cee:	000a      	movs	r2, r1
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	000b      	movs	r3, r1
 8003cf4:	0e51      	lsrs	r1, r2, #25
 8003cf6:	01dd      	lsls	r5, r3, #7
 8003cf8:	430d      	orrs	r5, r1
 8003cfa:	01d4      	lsls	r4, r2, #7
 8003cfc:	227d      	movs	r2, #125	; 0x7d
 8003cfe:	2300      	movs	r3, #0
 8003d00:	0020      	movs	r0, r4
 8003d02:	0029      	movs	r1, r5
 8003d04:	f7fc fbe0 	bl	80004c8 <__aeabi_uldivmod>
 8003d08:	0002      	movs	r2, r0
 8003d0a:	000b      	movs	r3, r1
 8003d0c:	0013      	movs	r3, r2
}
 8003d0e:	0018      	movs	r0, r3
 8003d10:	46bd      	mov	sp, r7
 8003d12:	b002      	add	sp, #8
 8003d14:	bdb0      	pop	{r4, r5, r7, pc}

08003d16 <RTC_IF_Convert_Tick2ms>:

uint32_t RTC_IF_Convert_Tick2ms(uint32_t tick)
{
 8003d16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d18:	b089      	sub	sp, #36	; 0x24
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	61f8      	str	r0, [r7, #28]
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	613b      	str	r3, [r7, #16]
 8003d22:	2300      	movs	r3, #0
 8003d24:	617b      	str	r3, [r7, #20]
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	0ed1      	lsrs	r1, r2, #27
 8003d2c:	0158      	lsls	r0, r3, #5
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	4308      	orrs	r0, r1
 8003d34:	60f8      	str	r0, [r7, #12]
 8003d36:	0153      	lsls	r3, r2, #5
 8003d38:	60bb      	str	r3, [r7, #8]
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	68fc      	ldr	r4, [r7, #12]
 8003d3e:	6939      	ldr	r1, [r7, #16]
 8003d40:	697a      	ldr	r2, [r7, #20]
 8003d42:	1a5b      	subs	r3, r3, r1
 8003d44:	4194      	sbcs	r4, r2
 8003d46:	001a      	movs	r2, r3
 8003d48:	0023      	movs	r3, r4
 8003d4a:	0f91      	lsrs	r1, r2, #30
 8003d4c:	0098      	lsls	r0, r3, #2
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	4308      	orrs	r0, r1
 8003d54:	6078      	str	r0, [r7, #4]
 8003d56:	0093      	lsls	r3, r2, #2
 8003d58:	603b      	str	r3, [r7, #0]
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	6838      	ldr	r0, [r7, #0]
 8003d60:	6879      	ldr	r1, [r7, #4]
 8003d62:	1812      	adds	r2, r2, r0
 8003d64:	414b      	adcs	r3, r1
 8003d66:	0659      	lsls	r1, r3, #25
 8003d68:	09d0      	lsrs	r0, r2, #7
 8003d6a:	0005      	movs	r5, r0
 8003d6c:	0028      	movs	r0, r5
 8003d6e:	4308      	orrs	r0, r1
 8003d70:	0005      	movs	r5, r0
 8003d72:	09db      	lsrs	r3, r3, #7
 8003d74:	001e      	movs	r6, r3
 8003d76:	002b      	movs	r3, r5
}
 8003d78:	0018      	movs	r0, r3
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	b009      	add	sp, #36	; 0x24
 8003d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d80 <RTC_IF_DelayMs>:

void RTC_IF_DelayMs(uint32_t delay)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  uint32_t delayValue = 0;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = 0;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	60bb      	str	r3, [r7, #8]

  delayValue = RTC_IF_Convert_ms2Tick(delay);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	0018      	movs	r0, r3
 8003d94:	f7ff ffa6 	bl	8003ce4 <RTC_IF_Convert_ms2Tick>
 8003d98:	0003      	movs	r3, r0
 8003d9a:	60fb      	str	r3, [r7, #12]

  /* Wait delay ms */
  timeout = RTC_IF_GetTimerValue();
 8003d9c:	f7ff ff82 	bl	8003ca4 <RTC_IF_GetTimerValue>
 8003da0:	0003      	movs	r3, r0
 8003da2:	60bb      	str	r3, [r7, #8]
  while (((RTC_IF_GetTimerValue() - timeout)) < delayValue)
 8003da4:	e000      	b.n	8003da8 <RTC_IF_DelayMs+0x28>
  {
    __NOP();
 8003da6:	46c0      	nop			; (mov r8, r8)
  while (((RTC_IF_GetTimerValue() - timeout)) < delayValue)
 8003da8:	f7ff ff7c 	bl	8003ca4 <RTC_IF_GetTimerValue>
 8003dac:	0002      	movs	r2, r0
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d8f6      	bhi.n	8003da6 <RTC_IF_DelayMs+0x26>
  }
}
 8003db8:	46c0      	nop			; (mov r8, r8)
 8003dba:	46c0      	nop			; (mov r8, r8)
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	b004      	add	sp, #16
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  RtcHandle: RTC handle
  * @retval None
  */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *RtcHandle)
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b082      	sub	sp, #8
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_IRQ_Handler();
 8003dca:	f019 f845 	bl	801ce58 <UTIL_TIMER_IRQ_Handler>
}
 8003dce:	46c0      	nop			; (mov r8, r8)
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	b002      	add	sp, #8
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <RTC_IF_GetTime>:

uint32_t RTC_IF_GetTime(uint16_t *mSeconds)
{
 8003dd6:	b5b0      	push	{r4, r5, r7, lr}
 8003dd8:	b08c      	sub	sp, #48	; 0x30
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef RTC_TimeStruct ;
  RTC_DateTypeDef RTC_DateStruct;
  uint32_t ticks;

  uint64_t calendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8003dde:	230c      	movs	r3, #12
 8003de0:	18fa      	adds	r2, r7, r3
 8003de2:	2308      	movs	r3, #8
 8003de4:	18fb      	adds	r3, r7, r3
 8003de6:	0011      	movs	r1, r2
 8003de8:	0018      	movs	r0, r3
 8003dea:	f000 f9c1 	bl	8004170 <RTC_GetCalendarValue>
 8003dee:	0003      	movs	r3, r0
 8003df0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003df2:	2300      	movs	r3, #0
 8003df4:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t seconds = (uint32_t)(calendarValue >> RTC_N_PREDIV_S);
 8003df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df8:	059b      	lsls	r3, r3, #22
 8003dfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dfc:	0a94      	lsrs	r4, r2, #10
 8003dfe:	431c      	orrs	r4, r3
 8003e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e02:	0a9d      	lsrs	r5, r3, #10
 8003e04:	0023      	movs	r3, r4
 8003e06:	627b      	str	r3, [r7, #36]	; 0x24

  ticks = (uint32_t) calendarValue & RTC_PREDIV_S;
 8003e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e0a:	059b      	lsls	r3, r3, #22
 8003e0c:	0d9b      	lsrs	r3, r3, #22
 8003e0e:	623b      	str	r3, [r7, #32]

  *mSeconds = RTC_IF_Convert_Tick2ms(ticks);
 8003e10:	6a3b      	ldr	r3, [r7, #32]
 8003e12:	0018      	movs	r0, r3
 8003e14:	f7ff ff7f 	bl	8003d16 <RTC_IF_Convert_Tick2ms>
 8003e18:	0003      	movs	r3, r0
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	801a      	strh	r2, [r3, #0]

  return seconds;
 8003e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003e22:	0018      	movs	r0, r3
 8003e24:	46bd      	mov	sp, r7
 8003e26:	b00c      	add	sp, #48	; 0x30
 8003e28:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003e2c <RTC_IF_BkUp_Write_Seconds>:

void RTC_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	4b04      	ldr	r3, [pc, #16]	; (8003e48 <RTC_IF_BkUp_Write_Seconds+0x1c>)
 8003e38:	2100      	movs	r1, #0
 8003e3a:	0018      	movs	r0, r3
 8003e3c:	f006 fc00 	bl	800a640 <HAL_RTCEx_BKUPWrite>
}
 8003e40:	46c0      	nop			; (mov r8, r8)
 8003e42:	46bd      	mov	sp, r7
 8003e44:	b002      	add	sp, #8
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	200014a8 	.word	0x200014a8

08003e4c <RTC_IF_BkUp_Write_SubSeconds>:

void RTC_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	4b04      	ldr	r3, [pc, #16]	; (8003e68 <RTC_IF_BkUp_Write_SubSeconds+0x1c>)
 8003e58:	2101      	movs	r1, #1
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	f006 fbf0 	bl	800a640 <HAL_RTCEx_BKUPWrite>
}
 8003e60:	46c0      	nop			; (mov r8, r8)
 8003e62:	46bd      	mov	sp, r7
 8003e64:	b002      	add	sp, #8
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	200014a8 	.word	0x200014a8

08003e6c <RTC_IF_BkUp_Read_Seconds>:

uint32_t RTC_IF_BkUp_Read_Seconds(void)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	af00      	add	r7, sp, #0
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8003e70:	4b04      	ldr	r3, [pc, #16]	; (8003e84 <RTC_IF_BkUp_Read_Seconds+0x18>)
 8003e72:	2100      	movs	r1, #0
 8003e74:	0018      	movs	r0, r3
 8003e76:	f006 fbf9 	bl	800a66c <HAL_RTCEx_BKUPRead>
 8003e7a:	0003      	movs	r3, r0
}
 8003e7c:	0018      	movs	r0, r3
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	46c0      	nop			; (mov r8, r8)
 8003e84:	200014a8 	.word	0x200014a8

08003e88 <RTC_IF_BkUp_Read_SubSeconds>:

uint32_t RTC_IF_BkUp_Read_SubSeconds(void)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	af00      	add	r7, sp, #0
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8003e8c:	4b04      	ldr	r3, [pc, #16]	; (8003ea0 <RTC_IF_BkUp_Read_SubSeconds+0x18>)
 8003e8e:	2101      	movs	r1, #1
 8003e90:	0018      	movs	r0, r3
 8003e92:	f006 fbeb 	bl	800a66c <HAL_RTCEx_BKUPRead>
 8003e96:	0003      	movs	r3, r0
}
 8003e98:	0018      	movs	r0, r3
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	46c0      	nop			; (mov r8, r8)
 8003ea0:	200014a8 	.word	0x200014a8

08003ea4 <RTC_StartWakeUpAlarm>:
 * @note  alarm in RtcTimerContext.Rtc_Time + timeoutValue
 * @param timeoutValue in ticks
 * @retval none
 */
static void RTC_StartWakeUpAlarm(uint32_t timeoutValue)
{
 8003ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ea6:	b08d      	sub	sp, #52	; 0x34
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  uint16_t rtcAlarmSubSeconds = 0;
 8003eac:	242e      	movs	r4, #46	; 0x2e
 8003eae:	193b      	adds	r3, r7, r4
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmSeconds = 0;
 8003eb4:	232c      	movs	r3, #44	; 0x2c
 8003eb6:	18fb      	adds	r3, r7, r3
 8003eb8:	2200      	movs	r2, #0
 8003eba:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmMinutes = 0;
 8003ebc:	232a      	movs	r3, #42	; 0x2a
 8003ebe:	18fb      	adds	r3, r7, r3
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmHours = 0;
 8003ec4:	2328      	movs	r3, #40	; 0x28
 8003ec6:	18fb      	adds	r3, r7, r3
 8003ec8:	2200      	movs	r2, #0
 8003eca:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmDays = 0;
 8003ecc:	2526      	movs	r5, #38	; 0x26
 8003ece:	197b      	adds	r3, r7, r5
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	801a      	strh	r2, [r3, #0]
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 8003ed4:	2610      	movs	r6, #16
 8003ed6:	19ba      	adds	r2, r7, r6
 8003ed8:	4b9b      	ldr	r3, [pc, #620]	; (8004148 <RTC_StartWakeUpAlarm+0x2a4>)
 8003eda:	3304      	adds	r3, #4
 8003edc:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003ede:	c223      	stmia	r2!, {r0, r1, r5}
 8003ee0:	cb03      	ldmia	r3!, {r0, r1}
 8003ee2:	c203      	stmia	r2!, {r0, r1}
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 8003ee4:	230c      	movs	r3, #12
 8003ee6:	001d      	movs	r5, r3
 8003ee8:	18fb      	adds	r3, r7, r3
 8003eea:	4a97      	ldr	r2, [pc, #604]	; (8004148 <RTC_StartWakeUpAlarm+0x2a4>)
 8003eec:	6992      	ldr	r2, [r2, #24]
 8003eee:	601a      	str	r2, [r3, #0]

  RTC_IF_StopTimer();
 8003ef0:	f7ff fe86 	bl	8003c00 <RTC_IF_StopTimer>


  /*reverse counter */
  rtcAlarmSubSeconds =  RTC_PREDIV_S - RTC_TimeStruct.SubSeconds;
 8003ef4:	19bb      	adds	r3, r7, r6
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	b29a      	uxth	r2, r3
 8003efa:	193b      	adds	r3, r7, r4
 8003efc:	4993      	ldr	r1, [pc, #588]	; (800414c <RTC_StartWakeUpAlarm+0x2a8>)
 8003efe:	1a8a      	subs	r2, r1, r2
 8003f00:	801a      	strh	r2, [r3, #0]
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	059b      	lsls	r3, r3, #22
 8003f08:	0d9b      	lsrs	r3, r3, #22
 8003f0a:	b299      	uxth	r1, r3
 8003f0c:	193b      	adds	r3, r7, r4
 8003f0e:	193a      	adds	r2, r7, r4
 8003f10:	8812      	ldrh	r2, [r2, #0]
 8003f12:	188a      	adds	r2, r1, r2
 8003f14:	801a      	strh	r2, [r3, #0]
  /* convert timeout  to seconds */
  timeoutValue >>= RTC_N_PREDIV_S;  /* convert timeout  in seconds */
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	0a9b      	lsrs	r3, r3, #10
 8003f1a:	607b      	str	r3, [r7, #4]

  /*convert microsecs to RTC format and add to 'Now' */
  rtcAlarmDays =  RTC_DateStruct.Date;
 8003f1c:	002b      	movs	r3, r5
 8003f1e:	18fb      	adds	r3, r7, r3
 8003f20:	789a      	ldrb	r2, [r3, #2]
 8003f22:	2526      	movs	r5, #38	; 0x26
 8003f24:	197b      	adds	r3, r7, r5
 8003f26:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1DAY)
 8003f28:	e00a      	b.n	8003f40 <RTC_StartWakeUpAlarm+0x9c>
  {
    timeoutValue -= SECONDS_IN_1DAY;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a88      	ldr	r2, [pc, #544]	; (8004150 <RTC_StartWakeUpAlarm+0x2ac>)
 8003f2e:	4694      	mov	ip, r2
 8003f30:	4463      	add	r3, ip
 8003f32:	607b      	str	r3, [r7, #4]
    rtcAlarmDays++;
 8003f34:	2126      	movs	r1, #38	; 0x26
 8003f36:	187b      	adds	r3, r7, r1
 8003f38:	881a      	ldrh	r2, [r3, #0]
 8003f3a:	187b      	adds	r3, r7, r1
 8003f3c:	3201      	adds	r2, #1
 8003f3e:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1DAY)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a84      	ldr	r2, [pc, #528]	; (8004154 <RTC_StartWakeUpAlarm+0x2b0>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d8f0      	bhi.n	8003f2a <RTC_StartWakeUpAlarm+0x86>
  }

  /* calc hours */
  rtcAlarmHours = RTC_TimeStruct.Hours;
 8003f48:	2310      	movs	r3, #16
 8003f4a:	18fb      	adds	r3, r7, r3
 8003f4c:	781a      	ldrb	r2, [r3, #0]
 8003f4e:	2328      	movs	r3, #40	; 0x28
 8003f50:	18fb      	adds	r3, r7, r3
 8003f52:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1HOUR)
 8003f54:	e00a      	b.n	8003f6c <RTC_StartWakeUpAlarm+0xc8>
  {
    timeoutValue -= SECONDS_IN_1HOUR;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a7f      	ldr	r2, [pc, #508]	; (8004158 <RTC_StartWakeUpAlarm+0x2b4>)
 8003f5a:	4694      	mov	ip, r2
 8003f5c:	4463      	add	r3, ip
 8003f5e:	607b      	str	r3, [r7, #4]
    rtcAlarmHours++;
 8003f60:	2128      	movs	r1, #40	; 0x28
 8003f62:	187b      	adds	r3, r7, r1
 8003f64:	881a      	ldrh	r2, [r3, #0]
 8003f66:	187b      	adds	r3, r7, r1
 8003f68:	3201      	adds	r2, #1
 8003f6a:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1HOUR)
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	23e1      	movs	r3, #225	; 0xe1
 8003f70:	011b      	lsls	r3, r3, #4
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d2ef      	bcs.n	8003f56 <RTC_StartWakeUpAlarm+0xb2>
  }

  /* calc minutes */
  rtcAlarmMinutes = RTC_TimeStruct.Minutes;
 8003f76:	2310      	movs	r3, #16
 8003f78:	18fb      	adds	r3, r7, r3
 8003f7a:	785a      	ldrb	r2, [r3, #1]
 8003f7c:	232a      	movs	r3, #42	; 0x2a
 8003f7e:	18fb      	adds	r3, r7, r3
 8003f80:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 8003f82:	e008      	b.n	8003f96 <RTC_StartWakeUpAlarm+0xf2>
  {
    timeoutValue -= SECONDS_IN_1MINUTE;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	3b3c      	subs	r3, #60	; 0x3c
 8003f88:	607b      	str	r3, [r7, #4]
    rtcAlarmMinutes++;
 8003f8a:	212a      	movs	r1, #42	; 0x2a
 8003f8c:	187b      	adds	r3, r7, r1
 8003f8e:	881a      	ldrh	r2, [r3, #0]
 8003f90:	187b      	adds	r3, r7, r1
 8003f92:	3201      	adds	r2, #1
 8003f94:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2b3b      	cmp	r3, #59	; 0x3b
 8003f9a:	d8f3      	bhi.n	8003f84 <RTC_StartWakeUpAlarm+0xe0>
  }

  /* calc seconds */
  rtcAlarmSeconds =  RTC_TimeStruct.Seconds + timeoutValue;
 8003f9c:	2310      	movs	r3, #16
 8003f9e:	18fb      	adds	r3, r7, r3
 8003fa0:	789b      	ldrb	r3, [r3, #2]
 8003fa2:	b299      	uxth	r1, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	232c      	movs	r3, #44	; 0x2c
 8003faa:	18fb      	adds	r3, r7, r3
 8003fac:	188a      	adds	r2, r1, r2
 8003fae:	801a      	strh	r2, [r3, #0]

  /***** correct for modulo********/
  while (rtcAlarmSubSeconds >= (RTC_PREDIV_S + 1))
 8003fb0:	e00d      	b.n	8003fce <RTC_StartWakeUpAlarm+0x12a>
  {
    rtcAlarmSubSeconds -= (RTC_PREDIV_S + 1);
 8003fb2:	222e      	movs	r2, #46	; 0x2e
 8003fb4:	18bb      	adds	r3, r7, r2
 8003fb6:	18ba      	adds	r2, r7, r2
 8003fb8:	8812      	ldrh	r2, [r2, #0]
 8003fba:	4968      	ldr	r1, [pc, #416]	; (800415c <RTC_StartWakeUpAlarm+0x2b8>)
 8003fbc:	468c      	mov	ip, r1
 8003fbe:	4462      	add	r2, ip
 8003fc0:	801a      	strh	r2, [r3, #0]
    rtcAlarmSeconds++;
 8003fc2:	212c      	movs	r1, #44	; 0x2c
 8003fc4:	187b      	adds	r3, r7, r1
 8003fc6:	881a      	ldrh	r2, [r3, #0]
 8003fc8:	187b      	adds	r3, r7, r1
 8003fca:	3201      	adds	r2, #1
 8003fcc:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmSubSeconds >= (RTC_PREDIV_S + 1))
 8003fce:	232e      	movs	r3, #46	; 0x2e
 8003fd0:	18fb      	adds	r3, r7, r3
 8003fd2:	881a      	ldrh	r2, [r3, #0]
 8003fd4:	2380      	movs	r3, #128	; 0x80
 8003fd6:	00db      	lsls	r3, r3, #3
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d2ea      	bcs.n	8003fb2 <RTC_StartWakeUpAlarm+0x10e>
  }

  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 8003fdc:	e00b      	b.n	8003ff6 <RTC_StartWakeUpAlarm+0x152>
  {
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 8003fde:	222c      	movs	r2, #44	; 0x2c
 8003fe0:	18bb      	adds	r3, r7, r2
 8003fe2:	18ba      	adds	r2, r7, r2
 8003fe4:	8812      	ldrh	r2, [r2, #0]
 8003fe6:	3a3c      	subs	r2, #60	; 0x3c
 8003fe8:	801a      	strh	r2, [r3, #0]
    rtcAlarmMinutes++;
 8003fea:	212a      	movs	r1, #42	; 0x2a
 8003fec:	187b      	adds	r3, r7, r1
 8003fee:	881a      	ldrh	r2, [r3, #0]
 8003ff0:	187b      	adds	r3, r7, r1
 8003ff2:	3201      	adds	r2, #1
 8003ff4:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 8003ff6:	232c      	movs	r3, #44	; 0x2c
 8003ff8:	18fb      	adds	r3, r7, r3
 8003ffa:	881b      	ldrh	r3, [r3, #0]
 8003ffc:	2b3b      	cmp	r3, #59	; 0x3b
 8003ffe:	d8ee      	bhi.n	8003fde <RTC_StartWakeUpAlarm+0x13a>
  }

  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 8004000:	e00b      	b.n	800401a <RTC_StartWakeUpAlarm+0x176>
  {
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 8004002:	222a      	movs	r2, #42	; 0x2a
 8004004:	18bb      	adds	r3, r7, r2
 8004006:	18ba      	adds	r2, r7, r2
 8004008:	8812      	ldrh	r2, [r2, #0]
 800400a:	3a3c      	subs	r2, #60	; 0x3c
 800400c:	801a      	strh	r2, [r3, #0]
    rtcAlarmHours++;
 800400e:	2128      	movs	r1, #40	; 0x28
 8004010:	187b      	adds	r3, r7, r1
 8004012:	881a      	ldrh	r2, [r3, #0]
 8004014:	187b      	adds	r3, r7, r1
 8004016:	3201      	adds	r2, #1
 8004018:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 800401a:	232a      	movs	r3, #42	; 0x2a
 800401c:	18fb      	adds	r3, r7, r3
 800401e:	881b      	ldrh	r3, [r3, #0]
 8004020:	2b3b      	cmp	r3, #59	; 0x3b
 8004022:	d8ee      	bhi.n	8004002 <RTC_StartWakeUpAlarm+0x15e>
  }

  while (rtcAlarmHours >= HOURS_IN_1DAY)
 8004024:	e00b      	b.n	800403e <RTC_StartWakeUpAlarm+0x19a>
  {
    rtcAlarmHours -= HOURS_IN_1DAY;
 8004026:	2228      	movs	r2, #40	; 0x28
 8004028:	18bb      	adds	r3, r7, r2
 800402a:	18ba      	adds	r2, r7, r2
 800402c:	8812      	ldrh	r2, [r2, #0]
 800402e:	3a18      	subs	r2, #24
 8004030:	801a      	strh	r2, [r3, #0]
    rtcAlarmDays++;
 8004032:	2126      	movs	r1, #38	; 0x26
 8004034:	187b      	adds	r3, r7, r1
 8004036:	881a      	ldrh	r2, [r3, #0]
 8004038:	187b      	adds	r3, r7, r1
 800403a:	3201      	adds	r2, #1
 800403c:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmHours >= HOURS_IN_1DAY)
 800403e:	2328      	movs	r3, #40	; 0x28
 8004040:	18fb      	adds	r3, r7, r3
 8004042:	881b      	ldrh	r3, [r3, #0]
 8004044:	2b17      	cmp	r3, #23
 8004046:	d8ee      	bhi.n	8004026 <RTC_StartWakeUpAlarm+0x182>
  }

  if (RTC_DateStruct.Year % 4 == 0)
 8004048:	210c      	movs	r1, #12
 800404a:	187b      	adds	r3, r7, r1
 800404c:	78db      	ldrb	r3, [r3, #3]
 800404e:	2203      	movs	r2, #3
 8004050:	4013      	ands	r3, r2
 8004052:	b2db      	uxtb	r3, r3
 8004054:	2b00      	cmp	r3, #0
 8004056:	d119      	bne.n	800408c <RTC_StartWakeUpAlarm+0x1e8>
  {
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 8004058:	187b      	adds	r3, r7, r1
 800405a:	785b      	ldrb	r3, [r3, #1]
 800405c:	3b01      	subs	r3, #1
 800405e:	4a40      	ldr	r2, [pc, #256]	; (8004160 <RTC_StartWakeUpAlarm+0x2bc>)
 8004060:	5cd3      	ldrb	r3, [r2, r3]
 8004062:	b29b      	uxth	r3, r3
 8004064:	2426      	movs	r4, #38	; 0x26
 8004066:	193a      	adds	r2, r7, r4
 8004068:	8812      	ldrh	r2, [r2, #0]
 800406a:	429a      	cmp	r2, r3
 800406c:	d928      	bls.n	80040c0 <RTC_StartWakeUpAlarm+0x21c>
    {
      rtcAlarmDays = rtcAlarmDays % DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ];
 800406e:	193b      	adds	r3, r7, r4
 8004070:	8818      	ldrh	r0, [r3, #0]
 8004072:	187b      	adds	r3, r7, r1
 8004074:	785b      	ldrb	r3, [r3, #1]
 8004076:	3b01      	subs	r3, #1
 8004078:	4a39      	ldr	r2, [pc, #228]	; (8004160 <RTC_StartWakeUpAlarm+0x2bc>)
 800407a:	5cd3      	ldrb	r3, [r2, r3]
 800407c:	0019      	movs	r1, r3
 800407e:	f7fc f9bb 	bl	80003f8 <__aeabi_idivmod>
 8004082:	000b      	movs	r3, r1
 8004084:	001a      	movs	r2, r3
 8004086:	193b      	adds	r3, r7, r4
 8004088:	801a      	strh	r2, [r3, #0]
 800408a:	e019      	b.n	80040c0 <RTC_StartWakeUpAlarm+0x21c>
    }
  }
  else
  {
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 800408c:	210c      	movs	r1, #12
 800408e:	187b      	adds	r3, r7, r1
 8004090:	785b      	ldrb	r3, [r3, #1]
 8004092:	3b01      	subs	r3, #1
 8004094:	4a33      	ldr	r2, [pc, #204]	; (8004164 <RTC_StartWakeUpAlarm+0x2c0>)
 8004096:	5cd3      	ldrb	r3, [r2, r3]
 8004098:	b29b      	uxth	r3, r3
 800409a:	2426      	movs	r4, #38	; 0x26
 800409c:	193a      	adds	r2, r7, r4
 800409e:	8812      	ldrh	r2, [r2, #0]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d90d      	bls.n	80040c0 <RTC_StartWakeUpAlarm+0x21c>
    {
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 80040a4:	193b      	adds	r3, r7, r4
 80040a6:	8818      	ldrh	r0, [r3, #0]
 80040a8:	187b      	adds	r3, r7, r1
 80040aa:	785b      	ldrb	r3, [r3, #1]
 80040ac:	3b01      	subs	r3, #1
 80040ae:	4a2d      	ldr	r2, [pc, #180]	; (8004164 <RTC_StartWakeUpAlarm+0x2c0>)
 80040b0:	5cd3      	ldrb	r3, [r2, r3]
 80040b2:	0019      	movs	r1, r3
 80040b4:	f7fc f9a0 	bl	80003f8 <__aeabi_idivmod>
 80040b8:	000b      	movs	r3, r1
 80040ba:	001a      	movs	r2, r3
 80040bc:	193b      	adds	r3, r7, r4
 80040be:	801a      	strh	r2, [r3, #0]
    }
  }

  /* Set RTC_AlarmStructure with calculated values*/
  RTC_AlarmStructure.AlarmTime.SubSeconds = RTC_PREDIV_S - rtcAlarmSubSeconds;
 80040c0:	232e      	movs	r3, #46	; 0x2e
 80040c2:	18fb      	adds	r3, r7, r3
 80040c4:	881b      	ldrh	r3, [r3, #0]
 80040c6:	4a21      	ldr	r2, [pc, #132]	; (800414c <RTC_StartWakeUpAlarm+0x2a8>)
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	001a      	movs	r2, r3
 80040cc:	4b26      	ldr	r3, [pc, #152]	; (8004168 <RTC_StartWakeUpAlarm+0x2c4>)
 80040ce:	605a      	str	r2, [r3, #4]
  RTC_AlarmStructure.AlarmSubSecondMask  = RTC_ALARMSUBSECONDMASK;
 80040d0:	4b25      	ldr	r3, [pc, #148]	; (8004168 <RTC_StartWakeUpAlarm+0x2c4>)
 80040d2:	22a0      	movs	r2, #160	; 0xa0
 80040d4:	0512      	lsls	r2, r2, #20
 80040d6:	619a      	str	r2, [r3, #24]
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 80040d8:	232c      	movs	r3, #44	; 0x2c
 80040da:	18fb      	adds	r3, r7, r3
 80040dc:	881b      	ldrh	r3, [r3, #0]
 80040de:	b2da      	uxtb	r2, r3
 80040e0:	4b21      	ldr	r3, [pc, #132]	; (8004168 <RTC_StartWakeUpAlarm+0x2c4>)
 80040e2:	709a      	strb	r2, [r3, #2]
  RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 80040e4:	232a      	movs	r3, #42	; 0x2a
 80040e6:	18fb      	adds	r3, r7, r3
 80040e8:	881b      	ldrh	r3, [r3, #0]
 80040ea:	b2da      	uxtb	r2, r3
 80040ec:	4b1e      	ldr	r3, [pc, #120]	; (8004168 <RTC_StartWakeUpAlarm+0x2c4>)
 80040ee:	705a      	strb	r2, [r3, #1]
  RTC_AlarmStructure.AlarmTime.Hours   = rtcAlarmHours;
 80040f0:	2328      	movs	r3, #40	; 0x28
 80040f2:	18fb      	adds	r3, r7, r3
 80040f4:	881b      	ldrh	r3, [r3, #0]
 80040f6:	b2da      	uxtb	r2, r3
 80040f8:	4b1b      	ldr	r3, [pc, #108]	; (8004168 <RTC_StartWakeUpAlarm+0x2c4>)
 80040fa:	701a      	strb	r2, [r3, #0]
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 80040fc:	2326      	movs	r3, #38	; 0x26
 80040fe:	18fb      	adds	r3, r7, r3
 8004100:	881b      	ldrh	r3, [r3, #0]
 8004102:	b2d9      	uxtb	r1, r3
 8004104:	4b18      	ldr	r3, [pc, #96]	; (8004168 <RTC_StartWakeUpAlarm+0x2c4>)
 8004106:	2220      	movs	r2, #32
 8004108:	5499      	strb	r1, [r3, r2]
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 800410a:	2310      	movs	r3, #16
 800410c:	18fb      	adds	r3, r7, r3
 800410e:	78da      	ldrb	r2, [r3, #3]
 8004110:	4b15      	ldr	r3, [pc, #84]	; (8004168 <RTC_StartWakeUpAlarm+0x2c4>)
 8004112:	70da      	strb	r2, [r3, #3]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8004114:	4b14      	ldr	r3, [pc, #80]	; (8004168 <RTC_StartWakeUpAlarm+0x2c4>)
 8004116:	2200      	movs	r2, #0
 8004118:	61da      	str	r2, [r3, #28]
  RTC_AlarmStructure.AlarmMask       = RTC_ALARMMASK_NONE;
 800411a:	4b13      	ldr	r3, [pc, #76]	; (8004168 <RTC_StartWakeUpAlarm+0x2c4>)
 800411c:	2200      	movs	r2, #0
 800411e:	615a      	str	r2, [r3, #20]
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8004120:	4b11      	ldr	r3, [pc, #68]	; (8004168 <RTC_StartWakeUpAlarm+0x2c4>)
 8004122:	2280      	movs	r2, #128	; 0x80
 8004124:	0052      	lsls	r2, r2, #1
 8004126:	625a      	str	r2, [r3, #36]	; 0x24
  RTC_AlarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004128:	4b0f      	ldr	r3, [pc, #60]	; (8004168 <RTC_StartWakeUpAlarm+0x2c4>)
 800412a:	2200      	movs	r2, #0
 800412c:	60da      	str	r2, [r3, #12]
  RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800412e:	4b0e      	ldr	r3, [pc, #56]	; (8004168 <RTC_StartWakeUpAlarm+0x2c4>)
 8004130:	2200      	movs	r2, #0
 8004132:	611a      	str	r2, [r3, #16]

  /* Set RTC_Alarm */
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 8004134:	490c      	ldr	r1, [pc, #48]	; (8004168 <RTC_StartWakeUpAlarm+0x2c4>)
 8004136:	4b0d      	ldr	r3, [pc, #52]	; (800416c <RTC_StartWakeUpAlarm+0x2c8>)
 8004138:	2200      	movs	r2, #0
 800413a:	0018      	movs	r0, r3
 800413c:	f005 ffb0 	bl	800a0a0 <HAL_RTC_SetAlarm_IT>
}
 8004140:	46c0      	nop			; (mov r8, r8)
 8004142:	46bd      	mov	sp, r7
 8004144:	b00d      	add	sp, #52	; 0x34
 8004146:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004148:	200003ec 	.word	0x200003ec
 800414c:	000003ff 	.word	0x000003ff
 8004150:	fffeae80 	.word	0xfffeae80
 8004154:	0001517f 	.word	0x0001517f
 8004158:	fffff1f0 	.word	0xfffff1f0
 800415c:	fffffc00 	.word	0xfffffc00
 8004160:	0801f14c 	.word	0x0801f14c
 8004164:	0801f140 	.word	0x0801f140
 8004168:	200003c4 	.word	0x200003c4
 800416c:	200014a8 	.word	0x200014a8

08004170 <RTC_GetCalendarValue>:
  * @param pointer to RTC_DateStruct
  * @param pointer to RTC_TimeStruct
  * @retval time in ticks
  */
static uint32_t RTC_GetCalendarValue(RTC_DateTypeDef *RTC_DateStruct, RTC_TimeTypeDef *RTC_TimeStruct)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b086      	sub	sp, #24
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  uint32_t calendarValue = 0;
 800417a:	2300      	movs	r3, #0
 800417c:	617b      	str	r3, [r7, #20]
  uint32_t first_read;
  uint32_t correction;

  /* Get Time and Date*/
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 800417e:	6839      	ldr	r1, [r7, #0]
 8004180:	4b42      	ldr	r3, [pc, #264]	; (800428c <RTC_GetCalendarValue+0x11c>)
 8004182:	2200      	movs	r2, #0
 8004184:	0018      	movs	r0, r3
 8004186:	f005 fe33 	bl	8009df0 <HAL_RTC_GetTime>

  /* make sure it is correct due to asynchronus nature of RTC*/
  do
  {
    first_read = LL_RTC_TIME_GetSubSecond(RTC);
 800418a:	4b41      	ldr	r3, [pc, #260]	; (8004290 <RTC_GetCalendarValue+0x120>)
 800418c:	0018      	movs	r0, r3
 800418e:	f7ff fcc7 	bl	8003b20 <LL_RTC_TIME_GetSubSecond>
 8004192:	0003      	movs	r3, r0
 8004194:	613b      	str	r3, [r7, #16]
    HAL_RTC_GetDate(&hrtc, RTC_DateStruct, RTC_FORMAT_BIN);
 8004196:	6879      	ldr	r1, [r7, #4]
 8004198:	4b3c      	ldr	r3, [pc, #240]	; (800428c <RTC_GetCalendarValue+0x11c>)
 800419a:	2200      	movs	r2, #0
 800419c:	0018      	movs	r0, r3
 800419e:	f005 ff31 	bl	800a004 <HAL_RTC_GetDate>
    HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 80041a2:	6839      	ldr	r1, [r7, #0]
 80041a4:	4b39      	ldr	r3, [pc, #228]	; (800428c <RTC_GetCalendarValue+0x11c>)
 80041a6:	2200      	movs	r2, #0
 80041a8:	0018      	movs	r0, r3
 80041aa:	f005 fe21 	bl	8009df0 <HAL_RTC_GetTime>

  } while (first_read != LL_RTC_TIME_GetSubSecond(RTC));
 80041ae:	4b38      	ldr	r3, [pc, #224]	; (8004290 <RTC_GetCalendarValue+0x120>)
 80041b0:	0018      	movs	r0, r3
 80041b2:	f7ff fcb5 	bl	8003b20 <LL_RTC_TIME_GetSubSecond>
 80041b6:	0002      	movs	r2, r0
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d1e5      	bne.n	800418a <RTC_GetCalendarValue+0x1a>

  /* calculte amount of elapsed days since 01/01/2000 */
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	78db      	ldrb	r3, [r3, #3]
 80041c2:	001a      	movs	r2, r3
 80041c4:	4b33      	ldr	r3, [pc, #204]	; (8004294 <RTC_GetCalendarValue+0x124>)
 80041c6:	4353      	muls	r3, r2
 80041c8:	3303      	adds	r3, #3
 80041ca:	089b      	lsrs	r3, r3, #2
 80041cc:	617b      	str	r3, [r7, #20]

  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	78db      	ldrb	r3, [r3, #3]
 80041d2:	2203      	movs	r2, #3
 80041d4:	4013      	ands	r3, r2
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d101      	bne.n	80041e0 <RTC_GetCalendarValue+0x70>
 80041dc:	4b2e      	ldr	r3, [pc, #184]	; (8004298 <RTC_GetCalendarValue+0x128>)
 80041de:	e000      	b.n	80041e2 <RTC_GetCalendarValue+0x72>
 80041e0:	4b2e      	ldr	r3, [pc, #184]	; (800429c <RTC_GetCalendarValue+0x12c>)
 80041e2:	60fb      	str	r3, [r7, #12]

  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	785b      	ldrb	r3, [r3, #1]
 80041e8:	1e5a      	subs	r2, r3, #1
 80041ea:	0013      	movs	r3, r2
 80041ec:	011b      	lsls	r3, r3, #4
 80041ee:	1a9b      	subs	r3, r3, r2
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	189b      	adds	r3, r3, r2
 80041f4:	3301      	adds	r3, #1
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	da00      	bge.n	80041fc <RTC_GetCalendarValue+0x8c>
 80041fa:	3301      	adds	r3, #1
 80041fc:	105b      	asrs	r3, r3, #1
 80041fe:	0019      	movs	r1, r3
                         2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	785b      	ldrb	r3, [r3, #1]
 8004204:	3b01      	subs	r3, #1
 8004206:	005b      	lsls	r3, r3, #1
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	40da      	lsrs	r2, r3
 800420c:	0013      	movs	r3, r2
 800420e:	2203      	movs	r2, #3
 8004210:	4013      	ands	r3, r2
 8004212:	1acb      	subs	r3, r1, r3
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	18d3      	adds	r3, r2, r3
 8004218:	617b      	str	r3, [r7, #20]

  calendarValue += (RTC_DateStruct->Date - 1);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	789b      	ldrb	r3, [r3, #2]
 800421e:	001a      	movs	r2, r3
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	18d3      	adds	r3, r2, r3
 8004224:	3b01      	subs	r3, #1
 8004226:	617b      	str	r3, [r7, #20]

  /* convert from days to seconds */
  calendarValue *= SECONDS_IN_1DAY;
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	0013      	movs	r3, r2
 800422c:	005b      	lsls	r3, r3, #1
 800422e:	189b      	adds	r3, r3, r2
 8004230:	011a      	lsls	r2, r3, #4
 8004232:	1ad2      	subs	r2, r2, r3
 8004234:	0113      	lsls	r3, r2, #4
 8004236:	1a9b      	subs	r3, r3, r2
 8004238:	01db      	lsls	r3, r3, #7
 800423a:	617b      	str	r3, [r7, #20]

  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	789b      	ldrb	r3, [r3, #2]
 8004240:	0019      	movs	r1, r3
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
                    ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	001a      	movs	r2, r3
 8004248:	0013      	movs	r3, r2
 800424a:	011b      	lsls	r3, r3, #4
 800424c:	1a9b      	subs	r3, r3, r2
 800424e:	011a      	lsls	r2, r3, #4
 8004250:	1ad2      	subs	r2, r2, r3
 8004252:	0113      	lsls	r3, r2, #4
 8004254:	001a      	movs	r2, r3
 8004256:	0010      	movs	r0, r2
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	785b      	ldrb	r3, [r3, #1]
 800425c:	001a      	movs	r2, r3
 800425e:	0013      	movs	r3, r2
 8004260:	011b      	lsls	r3, r3, #4
 8004262:	1a9b      	subs	r3, r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	18c3      	adds	r3, r0, r3
 8004268:	18cb      	adds	r3, r1, r3
  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	18d3      	adds	r3, r2, r3
 800426e:	617b      	str	r3, [r7, #20]

  calendarValue = (calendarValue << RTC_N_PREDIV_S) + (RTC_PREDIV_S - RTC_TimeStruct->SubSeconds);
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	029a      	lsls	r2, r3, #10
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	4a09      	ldr	r2, [pc, #36]	; (80042a0 <RTC_GetCalendarValue+0x130>)
 800427c:	4694      	mov	ip, r2
 800427e:	4463      	add	r3, ip
 8004280:	617b      	str	r3, [r7, #20]

  return (calendarValue);
 8004282:	697b      	ldr	r3, [r7, #20]
}
 8004284:	0018      	movs	r0, r3
 8004286:	46bd      	mov	sp, r7
 8004288:	b006      	add	sp, #24
 800428a:	bd80      	pop	{r7, pc}
 800428c:	200014a8 	.word	0x200014a8
 8004290:	40002800 	.word	0x40002800
 8004294:	000005b5 	.word	0x000005b5
 8004298:	00445550 	.word	0x00445550
 800429c:	0099aaa0 	.word	0x0099aaa0
 80042a0:	000003ff 	.word	0x000003ff

080042a4 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 80042a8:	46c0      	nop			; (mov r8, r8)
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 80042ae:	b580      	push	{r7, lr}
 80042b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 80042b2:	46c0      	nop			; (mov r8, r8)
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042be:	f3ef 8310 	mrs	r3, PRIMASK
 80042c2:	607b      	str	r3, [r7, #4]
  return(result);
 80042c4:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 80042c6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80042c8:	b672      	cpsid	i
}
 80042ca:	46c0      	nop			; (mov r8, r8)

  Sx_Board_IoDeInit();
 80042cc:	f001 fd74 	bl	8005db8 <CMWX1ZZABZ0XX_RADIO_IoDeInit>

  HAL_ADC_MspDeInit(&hadc1);
 80042d0:	4b0b      	ldr	r3, [pc, #44]	; (8004300 <PWR_EnterStopMode+0x48>)
 80042d2:	0018      	movs	r0, r3
 80042d4:	f7ff f866 	bl	80033a4 <HAL_ADC_MspDeInit>

  /*clear wake up flag*/
  SET_BIT(PWR->CR, PWR_CR_CWUF);
 80042d8:	4b0a      	ldr	r3, [pc, #40]	; (8004304 <PWR_EnterStopMode+0x4c>)
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	4b09      	ldr	r3, [pc, #36]	; (8004304 <PWR_EnterStopMode+0x4c>)
 80042de:	2104      	movs	r1, #4
 80042e0:	430a      	orrs	r2, r1
 80042e2:	601a      	str	r2, [r3, #0]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	f383 8810 	msr	PRIMASK, r3
}
 80042ee:	46c0      	nop			; (mov r8, r8)

  UTILS_EXIT_CRITICAL_SECTION();

  /* Enter Stop Mode */
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80042f0:	2101      	movs	r1, #1
 80042f2:	2001      	movs	r0, #1
 80042f4:	f004 fc54 	bl	8008ba0 <HAL_PWR_EnterSTOPMode>
}
 80042f8:	46c0      	nop			; (mov r8, r8)
 80042fa:	46bd      	mov	sp, r7
 80042fc:	b004      	add	sp, #16
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	2000140c 	.word	0x2000140c
 8004304:	40007000 	.word	0x40007000

08004308 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800430e:	f3ef 8310 	mrs	r3, PRIMASK
 8004312:	60bb      	str	r3, [r7, #8]
  return(result);
 8004314:	68bb      	ldr	r3, [r7, #8]
  /* Disable IRQ while the MCU is not running on HSI */

  UTILS_ENTER_CRITICAL_SECTION();
 8004316:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8004318:	b672      	cpsid	i
}
 800431a:	46c0      	nop			; (mov r8, r8)

  /* After wake-up from STOP reconfigure the system clock */
  /* Enable HSI */
  __HAL_RCC_HSI_ENABLE();
 800431c:	4b19      	ldr	r3, [pc, #100]	; (8004384 <PWR_ExitStopMode+0x7c>)
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	4b18      	ldr	r3, [pc, #96]	; (8004384 <PWR_ExitStopMode+0x7c>)
 8004322:	2101      	movs	r1, #1
 8004324:	430a      	orrs	r2, r1
 8004326:	601a      	str	r2, [r3, #0]

  /* Wait till HSI is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {}
 8004328:	46c0      	nop			; (mov r8, r8)
 800432a:	4b16      	ldr	r3, [pc, #88]	; (8004384 <PWR_ExitStopMode+0x7c>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2204      	movs	r2, #4
 8004330:	4013      	ands	r3, r2
 8004332:	d0fa      	beq.n	800432a <PWR_ExitStopMode+0x22>

  /* Enable PLL */
  __HAL_RCC_PLL_ENABLE();
 8004334:	4b13      	ldr	r3, [pc, #76]	; (8004384 <PWR_ExitStopMode+0x7c>)
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	4b12      	ldr	r3, [pc, #72]	; (8004384 <PWR_ExitStopMode+0x7c>)
 800433a:	2180      	movs	r1, #128	; 0x80
 800433c:	0449      	lsls	r1, r1, #17
 800433e:	430a      	orrs	r2, r1
 8004340:	601a      	str	r2, [r3, #0]
  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {}
 8004342:	46c0      	nop			; (mov r8, r8)
 8004344:	4b0f      	ldr	r3, [pc, #60]	; (8004384 <PWR_ExitStopMode+0x7c>)
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	2380      	movs	r3, #128	; 0x80
 800434a:	049b      	lsls	r3, r3, #18
 800434c:	4013      	ands	r3, r2
 800434e:	d0f9      	beq.n	8004344 <PWR_ExitStopMode+0x3c>

  /* Select PLL as system clock source */
  __HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_PLLCLK);
 8004350:	4b0c      	ldr	r3, [pc, #48]	; (8004384 <PWR_ExitStopMode+0x7c>)
 8004352:	68da      	ldr	r2, [r3, #12]
 8004354:	4b0b      	ldr	r3, [pc, #44]	; (8004384 <PWR_ExitStopMode+0x7c>)
 8004356:	2103      	movs	r1, #3
 8004358:	430a      	orrs	r2, r1
 800435a:	60da      	str	r2, [r3, #12]

  /* Wait till PLL is used as system clock source */
  while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {}
 800435c:	46c0      	nop			; (mov r8, r8)
 800435e:	4b09      	ldr	r3, [pc, #36]	; (8004384 <PWR_ExitStopMode+0x7c>)
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	220c      	movs	r2, #12
 8004364:	4013      	ands	r3, r2
 8004366:	2b0c      	cmp	r3, #12
 8004368:	d1f9      	bne.n	800435e <PWR_ExitStopMode+0x56>

  /* initializes the peripherals */
  Sx_Board_IoInit();
 800436a:	f001 fc1f 	bl	8005bac <CMWX1ZZABZ0XX_RADIO_IoInit>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f383 8810 	msr	PRIMASK, r3
}
 8004378:	46c0      	nop			; (mov r8, r8)

  UTILS_EXIT_CRITICAL_SECTION();
}
 800437a:	46c0      	nop			; (mov r8, r8)
 800437c:	46bd      	mov	sp, r7
 800437e:	b004      	add	sp, #16
 8004380:	bd80      	pop	{r7, pc}
 8004382:	46c0      	nop			; (mov r8, r8)
 8004384:	40021000 	.word	0x40021000

08004388 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	af00      	add	r7, sp, #0
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800438c:	2101      	movs	r1, #1
 800438e:	2000      	movs	r0, #0
 8004390:	f004 fbae 	bl	8008af0 <HAL_PWR_EnterSLEEPMode>
}
 8004394:	46c0      	nop			; (mov r8, r8)
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 800439a:	b580      	push	{r7, lr}
 800439c:	af00      	add	r7, sp, #0
}
 800439e:	46c0      	nop			; (mov r8, r8)
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e06e      	b.n	8004494 <HAL_LPTIM_Init+0xf0>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	222e      	movs	r2, #46	; 0x2e
 80043ba:	5c9b      	ldrb	r3, [r3, r2]
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d107      	bne.n	80043d2 <HAL_LPTIM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	222d      	movs	r2, #45	; 0x2d
 80043c6:	2100      	movs	r1, #0
 80043c8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	0018      	movs	r0, r3
 80043ce:	f7fe fee3 	bl	8003198 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	222e      	movs	r2, #46	; 0x2e
 80043d6:	2102      	movs	r1, #2
 80043d8:	5499      	strb	r1, [r3, r2]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	60fb      	str	r3, [r7, #12]

  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d103      	bne.n	80043f2 <HAL_LPTIM_Init+0x4e>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL));
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2206      	movs	r2, #6
 80043ee:	4393      	bics	r3, r2
 80043f0:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	4a29      	ldr	r2, [pc, #164]	; (800449c <HAL_LPTIM_Init+0xf8>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d003      	beq.n	8004404 <HAL_LPTIM_Init+0x60>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRIGSEL));
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	4a28      	ldr	r2, [pc, #160]	; (80044a0 <HAL_LPTIM_Init+0xfc>)
 8004400:	4013      	ands	r3, r2
 8004402:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d103      	bne.n	8004414 <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_CKFLT));
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	22d8      	movs	r2, #216	; 0xd8
 8004410:	4393      	bics	r3, r2
 8004412:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, CKPOL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	4a23      	ldr	r2, [pc, #140]	; (80044a4 <HAL_LPTIM_Init+0x100>)
 8004418:	4013      	ands	r3, r2
 800441a:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004424:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 800442a:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8004430:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8004436:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	4313      	orrs	r3, r2
 800443c:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d107      	bne.n	8004456 <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800444e:	4313      	orrs	r3, r2
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	4313      	orrs	r3, r2
 8004454:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the active edge or edges used by the counter only if LPTIM is
   * clocked by an external clock source
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	2b01      	cmp	r3, #1
 800445c:	d104      	bne.n	8004468 <HAL_LPTIM_Init+0xc4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	4313      	orrs	r3, r2
 8004466:	60fb      	str	r3, [r7, #12]
  }

  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	695b      	ldr	r3, [r3, #20]
 800446c:	4a0b      	ldr	r2, [pc, #44]	; (800449c <HAL_LPTIM_Init+0xf8>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d007      	beq.n	8004482 <HAL_LPTIM_Init+0xde>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source |
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source |
 800447a:	4313      	orrs	r3, r2
 800447c:	68fa      	ldr	r2, [r7, #12]
 800447e:	4313      	orrs	r3, r2
 8004480:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	60da      	str	r2, [r3, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	222e      	movs	r2, #46	; 0x2e
 800448e:	2101      	movs	r1, #1
 8004490:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	0018      	movs	r0, r3
 8004496:	46bd      	mov	sp, r7
 8004498:	b004      	add	sp, #16
 800449a:	bd80      	pop	{r7, pc}
 800449c:	0000ffff 	.word	0x0000ffff
 80044a0:	ffff1fff 	.word	0xffff1fff
 80044a4:	ff19f1f8 	.word	0xff19f1f8

080044a8 <HAL_LPTIM_Encoder_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Encoder_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  assert_param(hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC);
  assert_param(hlptim->Init.Clock.Prescaler == LPTIM_PRESCALER_DIV1);
  assert_param(IS_LPTIM_CLOCK_POLARITY(hlptim->Init.UltraLowPowerClock.Polarity));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	222e      	movs	r2, #46	; 0x2e
 80044b6:	2102      	movs	r1, #2
 80044b8:	5499      	strb	r1, [r3, r2]

  /* Configure edge sensitivity for encoder mode */
  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	60fb      	str	r3, [r7, #12]

  /* Clear CKPOL bits */
  tmpcfgr &= (uint32_t)(~LPTIM_CFGR_CKPOL);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2206      	movs	r2, #6
 80044c6:	4393      	bics	r3, r2
 80044c8:	60fb      	str	r3, [r7, #12]

  /* Set Input polarity */
  tmpcfgr |=  hlptim->Init.UltraLowPowerClock.Polarity;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	60fb      	str	r3, [r7, #12]

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	60da      	str	r2, [r3, #12]

  /* Set ENC bit to enable the encoder interface */
  hlptim->Instance->CFGR |= LPTIM_CFGR_ENC;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68da      	ldr	r2, [r3, #12]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2180      	movs	r1, #128	; 0x80
 80044e8:	0449      	lsls	r1, r1, #17
 80044ea:	430a      	orrs	r2, r1
 80044ec:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	691a      	ldr	r2, [r3, #16]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2101      	movs	r1, #1
 80044fa:	430a      	orrs	r2, r1
 80044fc:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2210      	movs	r2, #16
 8004504:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	683a      	ldr	r2, [r7, #0]
 800450c:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2110      	movs	r1, #16
 8004512:	0018      	movs	r0, r3
 8004514:	f000 f922 	bl	800475c <LPTIM_WaitForFlag>
 8004518:	0003      	movs	r3, r0
 800451a:	2b03      	cmp	r3, #3
 800451c:	d101      	bne.n	8004522 <HAL_LPTIM_Encoder_Start_IT+0x7a>
  {
    return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e031      	b.n	8004586 <HAL_LPTIM_Encoder_Start_IT+0xde>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	0018      	movs	r0, r3
 8004526:	f000 f951 	bl	80047cc <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	0018      	movs	r0, r3
 800452e:	f000 f908 	bl	8004742 <HAL_LPTIM_GetState>
 8004532:	0003      	movs	r3, r0
 8004534:	2b03      	cmp	r3, #3
 8004536:	d101      	bne.n	800453c <HAL_LPTIM_Encoder_Start_IT+0x94>
  {
    return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e024      	b.n	8004586 <HAL_LPTIM_Encoder_Start_IT+0xde>
  }

  /* Enable "switch to down direction" interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_DOWN);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	689a      	ldr	r2, [r3, #8]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2140      	movs	r1, #64	; 0x40
 8004548:	430a      	orrs	r2, r1
 800454a:	609a      	str	r2, [r3, #8]

  /* Enable "switch to up direction" interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_UP);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	689a      	ldr	r2, [r3, #8]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2120      	movs	r1, #32
 8004558:	430a      	orrs	r2, r1
 800455a:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	691a      	ldr	r2, [r3, #16]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2101      	movs	r1, #1
 8004568:	430a      	orrs	r2, r1
 800456a:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	691a      	ldr	r2, [r3, #16]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2104      	movs	r1, #4
 8004578:	430a      	orrs	r2, r1
 800457a:	611a      	str	r2, [r3, #16]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	222e      	movs	r2, #46	; 0x2e
 8004580:	2101      	movs	r1, #1
 8004582:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	0018      	movs	r0, r3
 8004588:	46bd      	mov	sp, r7
 800458a:	b004      	add	sp, #16
 800458c:	bd80      	pop	{r7, pc}

0800458e <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 800458e:	b580      	push	{r7, lr}
 8004590:	b082      	sub	sp, #8
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2201      	movs	r2, #1
 800459e:	4013      	ands	r3, r2
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d10e      	bne.n	80045c2 <HAL_LPTIM_IRQHandler+0x34>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	2201      	movs	r2, #1
 80045ac:	4013      	ands	r3, r2
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d107      	bne.n	80045c2 <HAL_LPTIM_IRQHandler+0x34>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2201      	movs	r2, #1
 80045b8:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	0018      	movs	r0, r3
 80045be:	f000 f888 	bl	80046d2 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2202      	movs	r2, #2
 80045ca:	4013      	ands	r3, r2
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d10e      	bne.n	80045ee <HAL_LPTIM_IRQHandler+0x60>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	2202      	movs	r2, #2
 80045d8:	4013      	ands	r3, r2
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d107      	bne.n	80045ee <HAL_LPTIM_IRQHandler+0x60>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2202      	movs	r2, #2
 80045e4:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	0018      	movs	r0, r3
 80045ea:	f000 f87a 	bl	80046e2 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2204      	movs	r2, #4
 80045f6:	4013      	ands	r3, r2
 80045f8:	2b04      	cmp	r3, #4
 80045fa:	d10e      	bne.n	800461a <HAL_LPTIM_IRQHandler+0x8c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	2204      	movs	r2, #4
 8004604:	4013      	ands	r3, r2
 8004606:	2b04      	cmp	r3, #4
 8004608:	d107      	bne.n	800461a <HAL_LPTIM_IRQHandler+0x8c>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2204      	movs	r2, #4
 8004610:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	0018      	movs	r0, r3
 8004616:	f000 f86c 	bl	80046f2 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2208      	movs	r2, #8
 8004622:	4013      	ands	r3, r2
 8004624:	2b08      	cmp	r3, #8
 8004626:	d10e      	bne.n	8004646 <HAL_LPTIM_IRQHandler+0xb8>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	2208      	movs	r2, #8
 8004630:	4013      	ands	r3, r2
 8004632:	2b08      	cmp	r3, #8
 8004634:	d107      	bne.n	8004646 <HAL_LPTIM_IRQHandler+0xb8>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2208      	movs	r2, #8
 800463c:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	0018      	movs	r0, r3
 8004642:	f000 f85e 	bl	8004702 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2210      	movs	r2, #16
 800464e:	4013      	ands	r3, r2
 8004650:	2b10      	cmp	r3, #16
 8004652:	d10e      	bne.n	8004672 <HAL_LPTIM_IRQHandler+0xe4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	2210      	movs	r2, #16
 800465c:	4013      	ands	r3, r2
 800465e:	2b10      	cmp	r3, #16
 8004660:	d107      	bne.n	8004672 <HAL_LPTIM_IRQHandler+0xe4>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2210      	movs	r2, #16
 8004668:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	0018      	movs	r0, r3
 800466e:	f000 f850 	bl	8004712 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2220      	movs	r2, #32
 800467a:	4013      	ands	r3, r2
 800467c:	2b20      	cmp	r3, #32
 800467e:	d10e      	bne.n	800469e <HAL_LPTIM_IRQHandler+0x110>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	2220      	movs	r2, #32
 8004688:	4013      	ands	r3, r2
 800468a:	2b20      	cmp	r3, #32
 800468c:	d107      	bne.n	800469e <HAL_LPTIM_IRQHandler+0x110>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2220      	movs	r2, #32
 8004694:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	0018      	movs	r0, r3
 800469a:	f000 f842 	bl	8004722 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2240      	movs	r2, #64	; 0x40
 80046a6:	4013      	ands	r3, r2
 80046a8:	2b40      	cmp	r3, #64	; 0x40
 80046aa:	d10e      	bne.n	80046ca <HAL_LPTIM_IRQHandler+0x13c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	2240      	movs	r2, #64	; 0x40
 80046b4:	4013      	ands	r3, r2
 80046b6:	2b40      	cmp	r3, #64	; 0x40
 80046b8:	d107      	bne.n	80046ca <HAL_LPTIM_IRQHandler+0x13c>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2240      	movs	r2, #64	; 0x40
 80046c0:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	0018      	movs	r0, r3
 80046c6:	f000 f834 	bl	8004732 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 80046ca:	46c0      	nop			; (mov r8, r8)
 80046cc:	46bd      	mov	sp, r7
 80046ce:	b002      	add	sp, #8
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b082      	sub	sp, #8
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 80046da:	46c0      	nop			; (mov r8, r8)
 80046dc:	46bd      	mov	sp, r7
 80046de:	b002      	add	sp, #8
 80046e0:	bd80      	pop	{r7, pc}

080046e2 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80046e2:	b580      	push	{r7, lr}
 80046e4:	b082      	sub	sp, #8
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 80046ea:	46c0      	nop			; (mov r8, r8)
 80046ec:	46bd      	mov	sp, r7
 80046ee:	b002      	add	sp, #8
 80046f0:	bd80      	pop	{r7, pc}

080046f2 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 80046f2:	b580      	push	{r7, lr}
 80046f4:	b082      	sub	sp, #8
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 80046fa:	46c0      	nop			; (mov r8, r8)
 80046fc:	46bd      	mov	sp, r7
 80046fe:	b002      	add	sp, #8
 8004700:	bd80      	pop	{r7, pc}

08004702 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004702:	b580      	push	{r7, lr}
 8004704:	b082      	sub	sp, #8
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 800470a:	46c0      	nop			; (mov r8, r8)
 800470c:	46bd      	mov	sp, r7
 800470e:	b002      	add	sp, #8
 8004710:	bd80      	pop	{r7, pc}

08004712 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004712:	b580      	push	{r7, lr}
 8004714:	b082      	sub	sp, #8
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 800471a:	46c0      	nop			; (mov r8, r8)
 800471c:	46bd      	mov	sp, r7
 800471e:	b002      	add	sp, #8
 8004720:	bd80      	pop	{r7, pc}

08004722 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004722:	b580      	push	{r7, lr}
 8004724:	b082      	sub	sp, #8
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 800472a:	46c0      	nop			; (mov r8, r8)
 800472c:	46bd      	mov	sp, r7
 800472e:	b002      	add	sp, #8
 8004730:	bd80      	pop	{r7, pc}

08004732 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b082      	sub	sp, #8
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 800473a:	46c0      	nop			; (mov r8, r8)
 800473c:	46bd      	mov	sp, r7
 800473e:	b002      	add	sp, #8
 8004740:	bd80      	pop	{r7, pc}

08004742 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8004742:	b580      	push	{r7, lr}
 8004744:	b082      	sub	sp, #8
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	222e      	movs	r2, #46	; 0x2e
 800474e:	5c9b      	ldrb	r3, [r3, r2]
 8004750:	b2db      	uxtb	r3, r3
}
 8004752:	0018      	movs	r0, r3
 8004754:	46bd      	mov	sp, r7
 8004756:	b002      	add	sp, #8
 8004758:	bd80      	pop	{r7, pc}
	...

0800475c <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8004766:	230f      	movs	r3, #15
 8004768:	18fb      	adds	r3, r7, r3
 800476a:	2200      	movs	r2, #0
 800476c:	701a      	strb	r2, [r3, #0]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 800476e:	4b15      	ldr	r3, [pc, #84]	; (80047c4 <LPTIM_WaitForFlag+0x68>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4915      	ldr	r1, [pc, #84]	; (80047c8 <LPTIM_WaitForFlag+0x6c>)
 8004774:	0018      	movs	r0, r3
 8004776:	f7fb fccf 	bl	8000118 <__udivsi3>
 800477a:	0003      	movs	r3, r0
 800477c:	001a      	movs	r2, r3
 800477e:	0013      	movs	r3, r2
 8004780:	015b      	lsls	r3, r3, #5
 8004782:	1a9b      	subs	r3, r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	189b      	adds	r3, r3, r2
 8004788:	00db      	lsls	r3, r3, #3
 800478a:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	3b01      	subs	r3, #1
 8004790:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d103      	bne.n	80047a0 <LPTIM_WaitForFlag+0x44>
    {
      result = HAL_TIMEOUT;
 8004798:	230f      	movs	r3, #15
 800479a:	18fb      	adds	r3, r7, r3
 800479c:	2203      	movs	r2, #3
 800479e:	701a      	strb	r2, [r3, #0]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	683a      	ldr	r2, [r7, #0]
 80047a8:	4013      	ands	r3, r2
 80047aa:	683a      	ldr	r2, [r7, #0]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d002      	beq.n	80047b6 <LPTIM_WaitForFlag+0x5a>
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d1ea      	bne.n	800478c <LPTIM_WaitForFlag+0x30>

  return result;
 80047b6:	230f      	movs	r3, #15
 80047b8:	18fb      	adds	r3, r7, r3
 80047ba:	781b      	ldrb	r3, [r3, #0]
}
 80047bc:	0018      	movs	r0, r3
 80047be:	46bd      	mov	sp, r7
 80047c0:	b004      	add	sp, #16
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	20000070 	.word	0x20000070
 80047c8:	00004e20 	.word	0x00004e20

080047cc <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b088      	sub	sp, #32
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 80047d4:	2300      	movs	r3, #0
 80047d6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80047d8:	b672      	cpsid	i
}
 80047da:	46c0      	nop			; (mov r8, r8)

  __disable_irq();

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	001a      	movs	r2, r3
 80047e2:	4b55      	ldr	r3, [pc, #340]	; (8004938 <LPTIM_Disable+0x16c>)
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d106      	bne.n	80047f6 <LPTIM_Disable+0x2a>
  {
    case LPTIM1_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 80047e8:	4b54      	ldr	r3, [pc, #336]	; (800493c <LPTIM_Disable+0x170>)
 80047ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047ec:	23c0      	movs	r3, #192	; 0xc0
 80047ee:	031b      	lsls	r3, r3, #12
 80047f0:	4013      	ands	r3, r2
 80047f2:	61fb      	str	r3, [r7, #28]
      break;
 80047f4:	e000      	b.n	80047f8 <LPTIM_Disable+0x2c>
    default:
      break;
 80047f6:	46c0      	nop			; (mov r8, r8)
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	61bb      	str	r3, [r7, #24]
  tmpCFGR = hlptim->Instance->CFGR;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	617b      	str	r3, [r7, #20]
  tmpCMP = hlptim->Instance->CMP;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	613b      	str	r3, [r7, #16]
  tmpARR = hlptim->Instance->ARR;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	60fb      	str	r3, [r7, #12]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	001a      	movs	r2, r3
 800481e:	4b46      	ldr	r3, [pc, #280]	; (8004938 <LPTIM_Disable+0x16c>)
 8004820:	429a      	cmp	r2, r3
 8004822:	d10d      	bne.n	8004840 <LPTIM_Disable+0x74>
  {
    case LPTIM1_BASE:
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8004824:	4b45      	ldr	r3, [pc, #276]	; (800493c <LPTIM_Disable+0x170>)
 8004826:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004828:	4b44      	ldr	r3, [pc, #272]	; (800493c <LPTIM_Disable+0x170>)
 800482a:	2180      	movs	r1, #128	; 0x80
 800482c:	0609      	lsls	r1, r1, #24
 800482e:	430a      	orrs	r2, r1
 8004830:	629a      	str	r2, [r3, #40]	; 0x28
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8004832:	4b42      	ldr	r3, [pc, #264]	; (800493c <LPTIM_Disable+0x170>)
 8004834:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004836:	4b41      	ldr	r3, [pc, #260]	; (800493c <LPTIM_Disable+0x170>)
 8004838:	0052      	lsls	r2, r2, #1
 800483a:	0852      	lsrs	r2, r2, #1
 800483c:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800483e:	e000      	b.n	8004842 <LPTIM_Disable+0x76>
    default:
      break;
 8004840:	46c0      	nop			; (mov r8, r8)
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d102      	bne.n	800484e <LPTIM_Disable+0x82>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d05b      	beq.n	8004906 <LPTIM_Disable+0x13a>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	001a      	movs	r2, r3
 8004854:	4b38      	ldr	r3, [pc, #224]	; (8004938 <LPTIM_Disable+0x16c>)
 8004856:	429a      	cmp	r2, r3
 8004858:	d106      	bne.n	8004868 <LPTIM_Disable+0x9c>
    {
      case LPTIM1_BASE:
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 800485a:	4b38      	ldr	r3, [pc, #224]	; (800493c <LPTIM_Disable+0x170>)
 800485c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800485e:	4b37      	ldr	r3, [pc, #220]	; (800493c <LPTIM_Disable+0x170>)
 8004860:	4937      	ldr	r1, [pc, #220]	; (8004940 <LPTIM_Disable+0x174>)
 8004862:	400a      	ands	r2, r1
 8004864:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8004866:	e000      	b.n	800486a <LPTIM_Disable+0x9e>
      default:
        break;
 8004868:	46c0      	nop			; (mov r8, r8)
    }

    if (tmpCMP != 0UL)
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d01b      	beq.n	80048a8 <LPTIM_Disable+0xdc>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	691a      	ldr	r2, [r3, #16]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2101      	movs	r1, #1
 800487c:	430a      	orrs	r2, r1
 800487e:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	693a      	ldr	r2, [r7, #16]
 8004886:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2108      	movs	r1, #8
 800488c:	0018      	movs	r0, r3
 800488e:	f7ff ff65 	bl	800475c <LPTIM_WaitForFlag>
 8004892:	0003      	movs	r3, r0
 8004894:	2b03      	cmp	r3, #3
 8004896:	d103      	bne.n	80048a0 <LPTIM_Disable+0xd4>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	222e      	movs	r2, #46	; 0x2e
 800489c:	2103      	movs	r1, #3
 800489e:	5499      	strb	r1, [r3, r2]
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2208      	movs	r2, #8
 80048a6:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d01b      	beq.n	80048e6 <LPTIM_Disable+0x11a>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	691a      	ldr	r2, [r3, #16]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2101      	movs	r1, #1
 80048ba:	430a      	orrs	r2, r1
 80048bc:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2110      	movs	r1, #16
 80048ca:	0018      	movs	r0, r3
 80048cc:	f7ff ff46 	bl	800475c <LPTIM_WaitForFlag>
 80048d0:	0003      	movs	r3, r0
 80048d2:	2b03      	cmp	r3, #3
 80048d4:	d103      	bne.n	80048de <LPTIM_Disable+0x112>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	222e      	movs	r2, #46	; 0x2e
 80048da:	2103      	movs	r1, #3
 80048dc:	5499      	strb	r1, [r3, r2]
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2210      	movs	r2, #16
 80048e4:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	001a      	movs	r2, r3
 80048ec:	4b12      	ldr	r3, [pc, #72]	; (8004938 <LPTIM_Disable+0x16c>)
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d10b      	bne.n	800490a <LPTIM_Disable+0x13e>
    {
      case LPTIM1_BASE:
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 80048f2:	4b12      	ldr	r3, [pc, #72]	; (800493c <LPTIM_Disable+0x170>)
 80048f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048f6:	4a12      	ldr	r2, [pc, #72]	; (8004940 <LPTIM_Disable+0x174>)
 80048f8:	4013      	ands	r3, r2
 80048fa:	0019      	movs	r1, r3
 80048fc:	4b0f      	ldr	r3, [pc, #60]	; (800493c <LPTIM_Disable+0x170>)
 80048fe:	69fa      	ldr	r2, [r7, #28]
 8004900:	430a      	orrs	r2, r1
 8004902:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8004904:	e002      	b.n	800490c <LPTIM_Disable+0x140>
      default:
        break;
    }
  }
 8004906:	46c0      	nop			; (mov r8, r8)
 8004908:	e000      	b.n	800490c <LPTIM_Disable+0x140>
        break;
 800490a:	46c0      	nop			; (mov r8, r8)

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	691a      	ldr	r2, [r3, #16]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2101      	movs	r1, #1
 8004918:	438a      	bics	r2, r1
 800491a:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	69ba      	ldr	r2, [r7, #24]
 8004922:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	697a      	ldr	r2, [r7, #20]
 800492a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 800492c:	b662      	cpsie	i
}
 800492e:	46c0      	nop			; (mov r8, r8)

  __enable_irq();
}
 8004930:	46c0      	nop			; (mov r8, r8)
 8004932:	46bd      	mov	sp, r7
 8004934:	b008      	add	sp, #32
 8004936:	bd80      	pop	{r7, pc}
 8004938:	40007c00 	.word	0x40007c00
 800493c:	40021000 	.word	0x40021000
 8004940:	fff3ffff 	.word	0xfff3ffff

08004944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004948:	4b0d      	ldr	r3, [pc, #52]	; (8004980 <HAL_MspInit+0x3c>)
 800494a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800494c:	4b0c      	ldr	r3, [pc, #48]	; (8004980 <HAL_MspInit+0x3c>)
 800494e:	2180      	movs	r1, #128	; 0x80
 8004950:	0549      	lsls	r1, r1, #21
 8004952:	430a      	orrs	r2, r1
 8004954:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable the Power Voltage Detector */
  HAL_PWR_DisablePVD();
 8004956:	f004 f8bd 	bl	8008ad4 <HAL_PWR_DisablePVD>

  /* Enables the Ultra Low Power mode */
  HAL_PWREx_EnableUltraLowPower();
 800495a:	f004 f98b 	bl	8008c74 <HAL_PWREx_EnableUltraLowPower>

  __HAL_FLASH_SLEEP_POWERDOWN_ENABLE();
 800495e:	4b09      	ldr	r3, [pc, #36]	; (8004984 <HAL_MspInit+0x40>)
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	4b08      	ldr	r3, [pc, #32]	; (8004984 <HAL_MspInit+0x40>)
 8004964:	2108      	movs	r1, #8
 8004966:	430a      	orrs	r2, r1
 8004968:	601a      	str	r2, [r3, #0]

  /*In debug mode, e.g. when DBGMCU is activated, Arm core has always clocks
   * And will not wait that the FLACH is ready to be read. It can miss in this
   * case the first instruction. To overcome this issue, the flash remain clcoked during sleep mode
   */
  DBG(__HAL_FLASH_SLEEP_POWERDOWN_DISABLE(););
 800496a:	4b06      	ldr	r3, [pc, #24]	; (8004984 <HAL_MspInit+0x40>)
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	4b05      	ldr	r3, [pc, #20]	; (8004984 <HAL_MspInit+0x40>)
 8004970:	2108      	movs	r1, #8
 8004972:	438a      	bics	r2, r1
 8004974:	601a      	str	r2, [r3, #0]

#ifdef ENABLE_FAST_WAKEUP
  /*Enable fast wakeUp*/
  HAL_PWREx_EnableFastWakeUp();
 8004976:	f004 f96f 	bl	8008c58 <HAL_PWREx_EnableFastWakeUp>
#endif

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800497a:	46c0      	nop			; (mov r8, r8)
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	40021000 	.word	0x40021000
 8004984:	40022000 	.word	0x40022000

08004988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800498c:	46c0      	nop			; (mov r8, r8)
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}

08004992 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004992:	b580      	push	{r7, lr}
 8004994:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    __NOP();
 8004996:	46c0      	nop			; (mov r8, r8)
 8004998:	e7fd      	b.n	8004996 <HardFault_Handler+0x4>

0800499a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800499a:	b580      	push	{r7, lr}
 800499c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800499e:	46c0      	nop			; (mov r8, r8)
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80049a8:	46c0      	nop			; (mov r8, r8)
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80049ae:	b580      	push	{r7, lr}
 80049b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80049b2:	f001 fc71 	bl	8006298 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80049b6:	46c0      	nop			; (mov r8, r8)
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <EXTI0_1_IRQHandler>:
/*void PPP_IRQHandler(void)
{
}*/

void EXTI0_1_IRQHandler(void)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	af00      	add	r7, sp, #0
#if (defined(CMWX1ZZABZ0XX))
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 80049c0:	4b05      	ldr	r3, [pc, #20]	; (80049d8 <EXTI0_1_IRQHandler+0x1c>)
 80049c2:	0018      	movs	r0, r3
 80049c4:	f002 fdfc 	bl	80075c0 <HAL_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_1);
 80049c8:	4b04      	ldr	r3, [pc, #16]	; (80049dc <EXTI0_1_IRQHandler+0x20>)
 80049ca:	0018      	movs	r0, r3
 80049cc:	f002 fdf8 	bl	80075c0 <HAL_EXTI_IRQHandler>
#endif
}
 80049d0:	46c0      	nop			; (mov r8, r8)
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	46c0      	nop			; (mov r8, r8)
 80049d8:	2000170c 	.word	0x2000170c
 80049dc:	20001704 	.word	0x20001704

080049e0 <EXTI2_3_IRQHandler>:

void EXTI2_3_IRQHandler(void)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	af00      	add	r7, sp, #0
#if (defined(SX1276MB1MAS) | defined(SX1276MB1LAS) | defined(SX1272MB2DAS))
  HAL_EXTI_IRQHandler(&H_EXTI_3);
#endif
}
 80049e4:	46c0      	nop			; (mov r8, r8)
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
	...

080049ec <EXTI4_15_IRQHandler>:

void EXTI4_15_IRQHandler(void)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	af00      	add	r7, sp, #0
  HAL_EXTI_IRQHandler(&H_EXTI_4);
 80049f0:	4b05      	ldr	r3, [pc, #20]	; (8004a08 <EXTI4_15_IRQHandler+0x1c>)
 80049f2:	0018      	movs	r0, r3
 80049f4:	f002 fde4 	bl	80075c0 <HAL_EXTI_IRQHandler>
#if (defined(SX1276MB1MAS) | defined(SX1276MB1LAS) | defined(SX1272MB2DAS))
  HAL_EXTI_IRQHandler(&H_EXTI_10);
#endif

#if (defined(CMWX1ZZABZ0XX))
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 80049f8:	4b04      	ldr	r3, [pc, #16]	; (8004a0c <EXTI4_15_IRQHandler+0x20>)
 80049fa:	0018      	movs	r0, r3
 80049fc:	f002 fde0 	bl	80075c0 <HAL_EXTI_IRQHandler>
#endif
}
 8004a00:	46c0      	nop			; (mov r8, r8)
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	46c0      	nop			; (mov r8, r8)
 8004a08:	200016fc 	.word	0x200016fc
 8004a0c:	20001714 	.word	0x20001714

08004a10 <DMA1_Channel4_5_6_7_IRQHandler>:

void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(husart2.hdmatx);
 8004a14:	4b03      	ldr	r3, [pc, #12]	; (8004a24 <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 8004a16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a18:	0018      	movs	r0, r3
 8004a1a:	f002 fcc2 	bl	80073a2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8004a1e:	46c0      	nop			; (mov r8, r8)
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	20001674 	.word	0x20001674

08004a28 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&husart2);
 8004a2c:	4b03      	ldr	r3, [pc, #12]	; (8004a3c <USART2_IRQHandler+0x14>)
 8004a2e:	0018      	movs	r0, r3
 8004a30:	f006 fae2 	bl	800aff8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004a34:	46c0      	nop			; (mov r8, r8)
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	46c0      	nop			; (mov r8, r8)
 8004a3c:	20001674 	.word	0x20001674

08004a40 <LPTIM1_IRQHandler>:
/**
  * @brief This function handles LPTIM1 global interrupt / LPTIM1 wake-up interrupt through EXTI line 29.
  */
void LPTIM1_IRQHandler(void)// New
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8004a44:	4b03      	ldr	r3, [pc, #12]	; (8004a54 <LPTIM1_IRQHandler+0x14>)
 8004a46:	0018      	movs	r0, r3
 8004a48:	f7ff fda1 	bl	800458e <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8004a4c:	46c0      	nop			; (mov r8, r8)
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	46c0      	nop			; (mov r8, r8)
 8004a54:	20001478 	.word	0x20001478

08004a58 <RTC_IRQHandler>:
/*}*/



void RTC_IRQHandler(void)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc); // тоже поднимает из сна sx1276 и плату
 8004a5c:	4b03      	ldr	r3, [pc, #12]	; (8004a6c <RTC_IRQHandler+0x14>)
 8004a5e:	0018      	movs	r0, r3
 8004a60:	f005 fd0a 	bl	800a478 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8004a64:	46c0      	nop			; (mov r8, r8)
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	46c0      	nop			; (mov r8, r8)
 8004a6c:	200014a8 	.word	0x200014a8

08004a70 <SystemApp_Init>:
  * @brief initialises the system (dbg pins, trace, mbmux, systiemr, LPM, ...)
  * @param none
  * @retval  none
  */
void SystemApp_Init(void)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /*Initialises timer and RTC*/
  UTIL_TIMER_Init();
 8004a74:	f018 f884 	bl	801cb80 <UTIL_TIMER_Init>

  Gpio_PreInit();
 8004a78:	f000 f8f6 	bl	8004c68 <Gpio_PreInit>

  /* Configure the debug mode*/
  DBG_Init();
 8004a7c:	f000 f9c2 	bl	8004e04 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8004a80:	f017 f9da 	bl	801be38 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8004a84:	4b0b      	ldr	r3, [pc, #44]	; (8004ab4 <SystemApp_Init+0x44>)
 8004a86:	0018      	movs	r0, r3
 8004a88:	f017 fa8e 	bl	801bfa8 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8004a8c:	2002      	movs	r0, #2
 8004a8e:	f017 fa99 	bl	801bfc4 <UTIL_ADV_TRACE_SetVerboseLevel>
  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8004a92:	f7fe fcb3 	bl	80033fc <SYS_InitMeasurement>

  Sx_Board_Bus_Init();
 8004a96:	f001 fabd 	bl	8006014 <CMWX1ZZABZ0XX_RADIO_Bus_Init>

  Sx_Board_IoInit();
 8004a9a:	f001 f887 	bl	8005bac <CMWX1ZZABZ0XX_RADIO_IoInit>

  /*Initialize the Sensors */
  EnvSensors_Init(); //  dell
 8004a9e:	f000 fa55 	bl	8004f4c <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8004aa2:	f017 fc91 	bl	801c3c8 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8004aa6:	2101      	movs	r1, #1
 8004aa8:	2001      	movs	r0, #1
 8004aaa:	f017 fccd 	bl	801c448 <UTIL_LPM_SetOffMode>
#error LOW_POWER_DISABLE not defined
#endif /* LOW_POWER_DISABLE */
  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8004aae:	46c0      	nop			; (mov r8, r8)
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	08004c1d 	.word	0x08004c1d

08004ab8 <UTIL_SEQ_Idle>:
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  * @param none
  * @retval  none
  */
void UTIL_SEQ_Idle(void)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8004abc:	f017 fd26 	bl	801c50c <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8004ac0:	46c0      	nop			; (mov r8, r8)
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
	...

08004ac8 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8004ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 8004ace:	250f      	movs	r5, #15
 8004ad0:	197b      	adds	r3, r7, r5
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8004ad6:	260c      	movs	r6, #12
 8004ad8:	19bc      	adds	r4, r7, r6
 8004ada:	f7fe fce3 	bl	80034a4 <SYS_GetBatteryLevel>
 8004ade:	0003      	movs	r3, r0
 8004ae0:	8023      	strh	r3, [r4, #0]

  /* Convert batterey level from mV to linea scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8004ae2:	19bb      	adds	r3, r7, r6
 8004ae4:	881b      	ldrh	r3, [r3, #0]
 8004ae6:	4a18      	ldr	r2, [pc, #96]	; (8004b48 <GetBatteryLevel+0x80>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d903      	bls.n	8004af4 <GetBatteryLevel+0x2c>
  {
//    batteryLevel = LORAWAN_MAX_BAT;
	  batteryLevel = 100;
 8004aec:	197b      	adds	r3, r7, r5
 8004aee:	2264      	movs	r2, #100	; 0x64
 8004af0:	701a      	strb	r2, [r3, #0]
 8004af2:	e021      	b.n	8004b38 <GetBatteryLevel+0x70>
  }
  else if (batteryLevelmV < VDD_MIN)
 8004af4:	230c      	movs	r3, #12
 8004af6:	18fb      	adds	r3, r7, r3
 8004af8:	881a      	ldrh	r2, [r3, #0]
 8004afa:	23e1      	movs	r3, #225	; 0xe1
 8004afc:	00db      	lsls	r3, r3, #3
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d204      	bcs.n	8004b0c <GetBatteryLevel+0x44>
  {
    batteryLevel = 0;
 8004b02:	230f      	movs	r3, #15
 8004b04:	18fb      	adds	r3, r7, r3
 8004b06:	2200      	movs	r2, #0
 8004b08:	701a      	strb	r2, [r3, #0]
 8004b0a:	e015      	b.n	8004b38 <GetBatteryLevel+0x70>
  }
  else
  {
//    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
    uint32_t batteryRange = VDD_BAT - VDD_MIN;
 8004b0c:	2396      	movs	r3, #150	; 0x96
 8004b0e:	00db      	lsls	r3, r3, #3
 8004b10:	60bb      	str	r3, [r7, #8]
    uint32_t batteryRemaining = batteryLevelmV - VDD_MIN;
 8004b12:	230c      	movs	r3, #12
 8004b14:	18fb      	adds	r3, r7, r3
 8004b16:	881b      	ldrh	r3, [r3, #0]
 8004b18:	4a0c      	ldr	r2, [pc, #48]	; (8004b4c <GetBatteryLevel+0x84>)
 8004b1a:	4694      	mov	ip, r2
 8004b1c:	4463      	add	r3, ip
 8004b1e:	607b      	str	r3, [r7, #4]
    batteryLevel = (batteryRemaining * 100) / batteryRange;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2264      	movs	r2, #100	; 0x64
 8004b24:	4353      	muls	r3, r2
 8004b26:	68b9      	ldr	r1, [r7, #8]
 8004b28:	0018      	movs	r0, r3
 8004b2a:	f7fb faf5 	bl	8000118 <__udivsi3>
 8004b2e:	0003      	movs	r3, r0
 8004b30:	001a      	movs	r2, r3
 8004b32:	230f      	movs	r3, #15
 8004b34:	18fb      	adds	r3, r7, r3
 8004b36:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8004b38:	230f      	movs	r3, #15
 8004b3a:	18fb      	adds	r3, r7, r3
 8004b3c:	781b      	ldrb	r3, [r3, #0]
}
 8004b3e:	0018      	movs	r0, r3
 8004b40:	46bd      	mov	sp, r7
 8004b42:	b005      	add	sp, #20
 8004b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b46:	46c0      	nop			; (mov r8, r8)
 8004b48:	00000bb8 	.word	0x00000bb8
 8004b4c:	fffff8f8 	.word	0xfffff8f8

08004b50 <GetTemperatureLevel>:

uint16_t GetTemperatureLevel(void)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
  uint16_t temperatureLevel = 0;
 8004b56:	1dbb      	adds	r3, r7, #6
 8004b58:	2200      	movs	r2, #0
 8004b5a:	801a      	strh	r2, [r3, #0]

  temperatureLevel = (uint16_t)(SYS_GetTemperatureLevel() / 256);
 8004b5c:	f7fe fc5a 	bl	8003414 <SYS_GetTemperatureLevel>
 8004b60:	1e03      	subs	r3, r0, #0
 8004b62:	da00      	bge.n	8004b66 <GetTemperatureLevel+0x16>
 8004b64:	33ff      	adds	r3, #255	; 0xff
 8004b66:	121b      	asrs	r3, r3, #8
 8004b68:	b21a      	sxth	r2, r3
 8004b6a:	1dbb      	adds	r3, r7, #6
 8004b6c:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8004b6e:	1dbb      	adds	r3, r7, #6
 8004b70:	881b      	ldrh	r3, [r3, #0]
}
 8004b72:	0018      	movs	r0, r3
 8004b74:	46bd      	mov	sp, r7
 8004b76:	b002      	add	sp, #8
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8004b7a:	b590      	push	{r4, r7, lr}
 8004b7c:	b085      	sub	sp, #20
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8004b82:	f001 fb9b 	bl	80062bc <HAL_GetUIDw0>
 8004b86:	0004      	movs	r4, r0
 8004b88:	f001 fbac 	bl	80062e4 <HAL_GetUIDw2>
 8004b8c:	0003      	movs	r3, r0
 8004b8e:	18e3      	adds	r3, r4, r3
 8004b90:	60fb      	str	r3, [r7, #12]
  uint32_t ID_2_val = HAL_GetUIDw1();
 8004b92:	f001 fb9d 	bl	80062d0 <HAL_GetUIDw1>
 8004b96:	0003      	movs	r3, r0
 8004b98:	60bb      	str	r3, [r7, #8]

  id[7] = (ID_1_3_val) >> 24;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	0e1a      	lsrs	r2, r3, #24
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	3307      	adds	r3, #7
 8004ba2:	b2d2      	uxtb	r2, r2
 8004ba4:	701a      	strb	r2, [r3, #0]
  id[6] = (ID_1_3_val) >> 16;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	0c1a      	lsrs	r2, r3, #16
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	3306      	adds	r3, #6
 8004bae:	b2d2      	uxtb	r2, r2
 8004bb0:	701a      	strb	r2, [r3, #0]
  id[5] = (ID_1_3_val) >> 8;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	0a1a      	lsrs	r2, r3, #8
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	3305      	adds	r3, #5
 8004bba:	b2d2      	uxtb	r2, r2
 8004bbc:	701a      	strb	r2, [r3, #0]
  id[4] = (ID_1_3_val);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	3304      	adds	r3, #4
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	b2d2      	uxtb	r2, r2
 8004bc6:	701a      	strb	r2, [r3, #0]
  id[3] = (ID_2_val) >> 24;
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	0e1a      	lsrs	r2, r3, #24
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	3303      	adds	r3, #3
 8004bd0:	b2d2      	uxtb	r2, r2
 8004bd2:	701a      	strb	r2, [r3, #0]
  id[2] = (ID_2_val) >> 16;
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	0c1a      	lsrs	r2, r3, #16
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	3302      	adds	r3, #2
 8004bdc:	b2d2      	uxtb	r2, r2
 8004bde:	701a      	strb	r2, [r3, #0]
  id[1] = (ID_2_val) >> 8;
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	0a1a      	lsrs	r2, r3, #8
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	3301      	adds	r3, #1
 8004be8:	b2d2      	uxtb	r2, r2
 8004bea:	701a      	strb	r2, [r3, #0]
  id[0] = (ID_2_val);
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	b2da      	uxtb	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8004bf4:	46c0      	nop			; (mov r8, r8)
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	b005      	add	sp, #20
 8004bfa:	bd90      	pop	{r4, r7, pc}

08004bfc <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 8004bfc:	b5b0      	push	{r4, r5, r7, lr}
 8004bfe:	af00      	add	r7, sp, #0
  return ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8004c00:	f001 fb5c 	bl	80062bc <HAL_GetUIDw0>
 8004c04:	0004      	movs	r4, r0
 8004c06:	f001 fb63 	bl	80062d0 <HAL_GetUIDw1>
 8004c0a:	0003      	movs	r3, r0
 8004c0c:	405c      	eors	r4, r3
 8004c0e:	f001 fb69 	bl	80062e4 <HAL_GetUIDw2>
 8004c12:	0003      	movs	r3, r0
 8004c14:	4063      	eors	r3, r4
}
 8004c16:	0018      	movs	r0, r3
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bdb0      	pop	{r4, r5, r7, pc}

08004c1c <TimestampNow>:

/* USER CODE END ExF */

/* Private functions ---------------------------------------------------------*/
static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8004c1c:	b590      	push	{r4, r7, lr}
 8004c1e:	b087      	sub	sp, #28
 8004c20:	af02      	add	r7, sp, #8
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8004c26:	2408      	movs	r4, #8
 8004c28:	193b      	adds	r3, r7, r4
 8004c2a:	0018      	movs	r0, r3
 8004c2c:	f017 ff46 	bl	801cabc <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8004c30:	0022      	movs	r2, r4
 8004c32:	18bb      	adds	r3, r7, r2
 8004c34:	6819      	ldr	r1, [r3, #0]
 8004c36:	18bb      	adds	r3, r7, r2
 8004c38:	2204      	movs	r2, #4
 8004c3a:	5e9b      	ldrsh	r3, [r3, r2]
 8004c3c:	4a09      	ldr	r2, [pc, #36]	; (8004c64 <TimestampNow+0x48>)
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	9300      	str	r3, [sp, #0]
 8004c42:	000b      	movs	r3, r1
 8004c44:	2110      	movs	r1, #16
 8004c46:	f000 f8a9 	bl	8004d9c <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	0018      	movs	r0, r3
 8004c4e:	f7fb fa5b 	bl	8000108 <strlen>
 8004c52:	0003      	movs	r3, r0
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8004c5a:	46c0      	nop			; (mov r8, r8)
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	b005      	add	sp, #20
 8004c60:	bd90      	pop	{r4, r7, pc}
 8004c62:	46c0      	nop			; (mov r8, r8)
 8004c64:	0801f1b0 	.word	0x0801f1b0

08004c68 <Gpio_PreInit>:

static void Gpio_PreInit(void)
{
 8004c68:	b590      	push	{r4, r7, lr}
 8004c6a:	b08b      	sub	sp, #44	; 0x2c
 8004c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Gpio_PreInit_1 */

  /* USER CODE END Gpio_PreInit_1 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c6e:	2414      	movs	r4, #20
 8004c70:	193b      	adds	r3, r7, r4
 8004c72:	0018      	movs	r0, r3
 8004c74:	2314      	movs	r3, #20
 8004c76:	001a      	movs	r2, r3
 8004c78:	2100      	movs	r1, #0
 8004c7a:	f019 f99a 	bl	801dfb2 <memset>
  /* Configure all IOs in analog input              */
  /* Except PA143 and PA14 (SWCLK and SWD) for debug*/
  /* PA13 and PA14 are configured in debug_init     */
  /* Configure all GPIO as analog to reduce current consumption on non used IOs */
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c7e:	4b38      	ldr	r3, [pc, #224]	; (8004d60 <Gpio_PreInit+0xf8>)
 8004c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c82:	4b37      	ldr	r3, [pc, #220]	; (8004d60 <Gpio_PreInit+0xf8>)
 8004c84:	2101      	movs	r1, #1
 8004c86:	430a      	orrs	r2, r1
 8004c88:	62da      	str	r2, [r3, #44]	; 0x2c
 8004c8a:	4b35      	ldr	r3, [pc, #212]	; (8004d60 <Gpio_PreInit+0xf8>)
 8004c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8e:	2201      	movs	r2, #1
 8004c90:	4013      	ands	r3, r2
 8004c92:	613b      	str	r3, [r7, #16]
 8004c94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c96:	4b32      	ldr	r3, [pc, #200]	; (8004d60 <Gpio_PreInit+0xf8>)
 8004c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c9a:	4b31      	ldr	r3, [pc, #196]	; (8004d60 <Gpio_PreInit+0xf8>)
 8004c9c:	2102      	movs	r1, #2
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	62da      	str	r2, [r3, #44]	; 0x2c
 8004ca2:	4b2f      	ldr	r3, [pc, #188]	; (8004d60 <Gpio_PreInit+0xf8>)
 8004ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	4013      	ands	r3, r2
 8004caa:	60fb      	str	r3, [r7, #12]
 8004cac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004cae:	4b2c      	ldr	r3, [pc, #176]	; (8004d60 <Gpio_PreInit+0xf8>)
 8004cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cb2:	4b2b      	ldr	r3, [pc, #172]	; (8004d60 <Gpio_PreInit+0xf8>)
 8004cb4:	2104      	movs	r1, #4
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	62da      	str	r2, [r3, #44]	; 0x2c
 8004cba:	4b29      	ldr	r3, [pc, #164]	; (8004d60 <Gpio_PreInit+0xf8>)
 8004cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cbe:	2204      	movs	r2, #4
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	60bb      	str	r3, [r7, #8]
 8004cc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004cc6:	4b26      	ldr	r3, [pc, #152]	; (8004d60 <Gpio_PreInit+0xf8>)
 8004cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cca:	4b25      	ldr	r3, [pc, #148]	; (8004d60 <Gpio_PreInit+0xf8>)
 8004ccc:	2180      	movs	r1, #128	; 0x80
 8004cce:	430a      	orrs	r2, r1
 8004cd0:	62da      	str	r2, [r3, #44]	; 0x2c
 8004cd2:	4b23      	ldr	r3, [pc, #140]	; (8004d60 <Gpio_PreInit+0xf8>)
 8004cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd6:	2280      	movs	r2, #128	; 0x80
 8004cd8:	4013      	ands	r3, r2
 8004cda:	607b      	str	r3, [r7, #4]
 8004cdc:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004cde:	193b      	adds	r3, r7, r4
 8004ce0:	2203      	movs	r2, #3
 8004ce2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ce4:	193b      	adds	r3, r7, r4
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	609a      	str	r2, [r3, #8]
  /* All GPIOs except debug pins (SWCLK and SWD) */
  GPIO_InitStruct.Pin = GPIO_PIN_All & (~(GPIO_PIN_13 | GPIO_PIN_14));
 8004cea:	193b      	adds	r3, r7, r4
 8004cec:	4a1d      	ldr	r2, [pc, #116]	; (8004d64 <Gpio_PreInit+0xfc>)
 8004cee:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cf0:	193a      	adds	r2, r7, r4
 8004cf2:	23a0      	movs	r3, #160	; 0xa0
 8004cf4:	05db      	lsls	r3, r3, #23
 8004cf6:	0011      	movs	r1, r2
 8004cf8:	0018      	movs	r0, r3
 8004cfa:	f002 fe53 	bl	80079a4 <HAL_GPIO_Init>

  /* All GPIOs */
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 8004cfe:	193b      	adds	r3, r7, r4
 8004d00:	4a19      	ldr	r2, [pc, #100]	; (8004d68 <Gpio_PreInit+0x100>)
 8004d02:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d04:	193b      	adds	r3, r7, r4
 8004d06:	4a19      	ldr	r2, [pc, #100]	; (8004d6c <Gpio_PreInit+0x104>)
 8004d08:	0019      	movs	r1, r3
 8004d0a:	0010      	movs	r0, r2
 8004d0c:	f002 fe4a 	bl	80079a4 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d10:	193b      	adds	r3, r7, r4
 8004d12:	4a17      	ldr	r2, [pc, #92]	; (8004d70 <Gpio_PreInit+0x108>)
 8004d14:	0019      	movs	r1, r3
 8004d16:	0010      	movs	r0, r2
 8004d18:	f002 fe44 	bl	80079a4 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004d1c:	193b      	adds	r3, r7, r4
 8004d1e:	4a15      	ldr	r2, [pc, #84]	; (8004d74 <Gpio_PreInit+0x10c>)
 8004d20:	0019      	movs	r1, r3
 8004d22:	0010      	movs	r0, r2
 8004d24:	f002 fe3e 	bl	80079a4 <HAL_GPIO_Init>

  /* Disable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_DISABLE();
 8004d28:	4b0d      	ldr	r3, [pc, #52]	; (8004d60 <Gpio_PreInit+0xf8>)
 8004d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d2c:	4b0c      	ldr	r3, [pc, #48]	; (8004d60 <Gpio_PreInit+0xf8>)
 8004d2e:	2101      	movs	r1, #1
 8004d30:	438a      	bics	r2, r1
 8004d32:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_DISABLE();
 8004d34:	4b0a      	ldr	r3, [pc, #40]	; (8004d60 <Gpio_PreInit+0xf8>)
 8004d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d38:	4b09      	ldr	r3, [pc, #36]	; (8004d60 <Gpio_PreInit+0xf8>)
 8004d3a:	2102      	movs	r1, #2
 8004d3c:	438a      	bics	r2, r1
 8004d3e:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_DISABLE();
 8004d40:	4b07      	ldr	r3, [pc, #28]	; (8004d60 <Gpio_PreInit+0xf8>)
 8004d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d44:	4b06      	ldr	r3, [pc, #24]	; (8004d60 <Gpio_PreInit+0xf8>)
 8004d46:	2104      	movs	r1, #4
 8004d48:	438a      	bics	r2, r1
 8004d4a:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_DISABLE();
 8004d4c:	4b04      	ldr	r3, [pc, #16]	; (8004d60 <Gpio_PreInit+0xf8>)
 8004d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d50:	4b03      	ldr	r3, [pc, #12]	; (8004d60 <Gpio_PreInit+0xf8>)
 8004d52:	2180      	movs	r1, #128	; 0x80
 8004d54:	438a      	bics	r2, r1
 8004d56:	62da      	str	r2, [r3, #44]	; 0x2c
  /* USER CODE BEGIN Gpio_PreInit_2 */

  /* USER CODE END Gpio_PreInit_2 */
}
 8004d58:	46c0      	nop			; (mov r8, r8)
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	b00b      	add	sp, #44	; 0x2c
 8004d5e:	bd90      	pop	{r4, r7, pc}
 8004d60:	40021000 	.word	0x40021000
 8004d64:	00009fff 	.word	0x00009fff
 8004d68:	0000ffff 	.word	0x0000ffff
 8004d6c:	50000400 	.word	0x50000400
 8004d70:	50000800 	.word	0x50000800
 8004d74:	50001c00 	.word	0x50001c00

08004d78 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8004d7c:	2101      	movs	r1, #1
 8004d7e:	2004      	movs	r0, #4
 8004d80:	f017 fb32 	bl	801c3e8 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8004d84:	46c0      	nop			; (mov r8, r8)
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8004d8e:	2100      	movs	r1, #0
 8004d90:	2004      	movs	r0, #4
 8004d92:	f017 fb29 	bl	801c3e8 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8004d96:	46c0      	nop			; (mov r8, r8)
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8004d9c:	b40c      	push	{r2, r3}
 8004d9e:	b580      	push	{r7, lr}
 8004da0:	b084      	sub	sp, #16
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
 8004da6:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8004da8:	231c      	movs	r3, #28
 8004daa:	18fb      	adds	r3, r7, r3
 8004dac:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8004dae:	6839      	ldr	r1, [r7, #0]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	69ba      	ldr	r2, [r7, #24]
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f018 faad 	bl	801d314 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8004dba:	46c0      	nop			; (mov r8, r8)
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	b004      	add	sp, #16
 8004dc0:	bc80      	pop	{r7}
 8004dc2:	bc08      	pop	{r3}
 8004dc4:	b002      	add	sp, #8
 8004dc6:	4718      	bx	r3

08004dc8 <HAL_InitTick>:
  * @brief  don't enable systick
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8004dd2:	0018      	movs	r0, r3
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	b002      	add	sp, #8
 8004dd8:	bd80      	pop	{r7, pc}

08004dda <HAL_GetTick>:
  * @brief Provide a tick value in millisecond measured using RTC
  * @note This function overwrites the __weak one from HAL
  * @retval tick value
  */
uint32_t HAL_GetTick(void)
{
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return RTC_IF_GetTimerValue();
 8004dde:	f7fe ff61 	bl	8003ca4 <RTC_IF_GetTimerValue>
 8004de2:	0003      	movs	r3, r0
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 8004de4:	0018      	movs	r0, r3
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}

08004dea <HAL_Delay>:
  * @brief This function provides delay (in ms)
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8004dea:	b580      	push	{r7, lr}
 8004dec:	b082      	sub	sp, #8
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  RTC_IF_DelayMs(Delay);   /* based on RTC */
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	0018      	movs	r0, r3
 8004df6:	f7fe ffc3 	bl	8003d80 <RTC_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8004dfa:	46c0      	nop			; (mov r8, r8)
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	b002      	add	sp, #8
 8004e00:	bd80      	pop	{r7, pc}
	...

08004e04 <DBG_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void DBG_Init(void)
{
 8004e04:	b590      	push	{r4, r7, lr}
 8004e06:	b08b      	sub	sp, #44	; 0x2c
 8004e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DBG_Init_1 */

  /* USER CODE END DBG_Init_1 */
#if defined (DEBUGGER_ON) && ( DEBUGGER_ON == 1 )
  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8004e0a:	2414      	movs	r4, #20
 8004e0c:	193b      	adds	r3, r7, r4
 8004e0e:	0018      	movs	r0, r3
 8004e10:	2314      	movs	r3, #20
 8004e12:	001a      	movs	r2, r3
 8004e14:	2100      	movs	r1, #0
 8004e16:	f019 f8cc 	bl	801dfb2 <memset>

  /* Enable the GPIO Clock */
  DGB_LINE1_CLK_ENABLE();
 8004e1a:	4b4a      	ldr	r3, [pc, #296]	; (8004f44 <DBG_Init+0x140>)
 8004e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e1e:	4b49      	ldr	r3, [pc, #292]	; (8004f44 <DBG_Init+0x140>)
 8004e20:	2102      	movs	r1, #2
 8004e22:	430a      	orrs	r2, r1
 8004e24:	62da      	str	r2, [r3, #44]	; 0x2c
 8004e26:	4b47      	ldr	r3, [pc, #284]	; (8004f44 <DBG_Init+0x140>)
 8004e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	613b      	str	r3, [r7, #16]
 8004e30:	693b      	ldr	r3, [r7, #16]
  DGB_LINE2_CLK_ENABLE();
 8004e32:	4b44      	ldr	r3, [pc, #272]	; (8004f44 <DBG_Init+0x140>)
 8004e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e36:	4b43      	ldr	r3, [pc, #268]	; (8004f44 <DBG_Init+0x140>)
 8004e38:	2102      	movs	r1, #2
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	62da      	str	r2, [r3, #44]	; 0x2c
 8004e3e:	4b41      	ldr	r3, [pc, #260]	; (8004f44 <DBG_Init+0x140>)
 8004e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e42:	2202      	movs	r2, #2
 8004e44:	4013      	ands	r3, r2
 8004e46:	60fb      	str	r3, [r7, #12]
 8004e48:	68fb      	ldr	r3, [r7, #12]
  DGB_LINE3_CLK_ENABLE();
 8004e4a:	4b3e      	ldr	r3, [pc, #248]	; (8004f44 <DBG_Init+0x140>)
 8004e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e4e:	4b3d      	ldr	r3, [pc, #244]	; (8004f44 <DBG_Init+0x140>)
 8004e50:	2102      	movs	r1, #2
 8004e52:	430a      	orrs	r2, r1
 8004e54:	62da      	str	r2, [r3, #44]	; 0x2c
 8004e56:	4b3b      	ldr	r3, [pc, #236]	; (8004f44 <DBG_Init+0x140>)
 8004e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5a:	2202      	movs	r2, #2
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	60bb      	str	r3, [r7, #8]
 8004e60:	68bb      	ldr	r3, [r7, #8]
  DGB_LINE4_CLK_ENABLE();
 8004e62:	4b38      	ldr	r3, [pc, #224]	; (8004f44 <DBG_Init+0x140>)
 8004e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e66:	4b37      	ldr	r3, [pc, #220]	; (8004f44 <DBG_Init+0x140>)
 8004e68:	2102      	movs	r1, #2
 8004e6a:	430a      	orrs	r2, r1
 8004e6c:	62da      	str	r2, [r3, #44]	; 0x2c
 8004e6e:	4b35      	ldr	r3, [pc, #212]	; (8004f44 <DBG_Init+0x140>)
 8004e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e72:	2202      	movs	r2, #2
 8004e74:	4013      	ands	r3, r2
 8004e76:	607b      	str	r3, [r7, #4]
 8004e78:	687b      	ldr	r3, [r7, #4]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8004e7a:	0021      	movs	r1, r4
 8004e7c:	187b      	adds	r3, r7, r1
 8004e7e:	2201      	movs	r2, #1
 8004e80:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull   = GPIO_PULLUP;
 8004e82:	187b      	adds	r3, r7, r1
 8004e84:	2201      	movs	r2, #1
 8004e86:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed  = GPIO_SPEED_HIGH;
 8004e88:	187b      	adds	r3, r7, r1
 8004e8a:	2203      	movs	r2, #3
 8004e8c:	60da      	str	r2, [r3, #12]

  GPIO_InitStruct.Pin    = DGB_LINE1_PIN;
 8004e8e:	187b      	adds	r3, r7, r1
 8004e90:	2280      	movs	r2, #128	; 0x80
 8004e92:	0152      	lsls	r2, r2, #5
 8004e94:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(DGB_LINE1_PORT, &GPIO_InitStruct);
 8004e96:	000c      	movs	r4, r1
 8004e98:	187b      	adds	r3, r7, r1
 8004e9a:	4a2b      	ldr	r2, [pc, #172]	; (8004f48 <DBG_Init+0x144>)
 8004e9c:	0019      	movs	r1, r3
 8004e9e:	0010      	movs	r0, r2
 8004ea0:	f002 fd80 	bl	80079a4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = DGB_LINE2_PIN;
 8004ea4:	0021      	movs	r1, r4
 8004ea6:	187b      	adds	r3, r7, r1
 8004ea8:	2280      	movs	r2, #128	; 0x80
 8004eaa:	0192      	lsls	r2, r2, #6
 8004eac:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(DGB_LINE2_PORT, &GPIO_InitStruct);
 8004eae:	000c      	movs	r4, r1
 8004eb0:	187b      	adds	r3, r7, r1
 8004eb2:	4a25      	ldr	r2, [pc, #148]	; (8004f48 <DBG_Init+0x144>)
 8004eb4:	0019      	movs	r1, r3
 8004eb6:	0010      	movs	r0, r2
 8004eb8:	f002 fd74 	bl	80079a4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = DGB_LINE3_PIN;
 8004ebc:	0021      	movs	r1, r4
 8004ebe:	187b      	adds	r3, r7, r1
 8004ec0:	2280      	movs	r2, #128	; 0x80
 8004ec2:	01d2      	lsls	r2, r2, #7
 8004ec4:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(DGB_LINE3_PORT, &GPIO_InitStruct);
 8004ec6:	000c      	movs	r4, r1
 8004ec8:	187b      	adds	r3, r7, r1
 8004eca:	4a1f      	ldr	r2, [pc, #124]	; (8004f48 <DBG_Init+0x144>)
 8004ecc:	0019      	movs	r1, r3
 8004ece:	0010      	movs	r0, r2
 8004ed0:	f002 fd68 	bl	80079a4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = DGB_LINE4_PIN;
 8004ed4:	0021      	movs	r1, r4
 8004ed6:	187b      	adds	r3, r7, r1
 8004ed8:	2280      	movs	r2, #128	; 0x80
 8004eda:	0212      	lsls	r2, r2, #8
 8004edc:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(DGB_LINE4_PORT, &GPIO_InitStruct);
 8004ede:	187b      	adds	r3, r7, r1
 8004ee0:	4a19      	ldr	r2, [pc, #100]	; (8004f48 <DBG_Init+0x144>)
 8004ee2:	0019      	movs	r1, r3
 8004ee4:	0010      	movs	r0, r2
 8004ee6:	f002 fd5d 	bl	80079a4 <HAL_GPIO_Init>

  /* Reset debug Pins */
  HAL_GPIO_WritePin(DGB_LINE1_PORT, DGB_LINE1_PIN, GPIO_PIN_RESET);
 8004eea:	2380      	movs	r3, #128	; 0x80
 8004eec:	015b      	lsls	r3, r3, #5
 8004eee:	4816      	ldr	r0, [pc, #88]	; (8004f48 <DBG_Init+0x144>)
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	0019      	movs	r1, r3
 8004ef4:	f002 ffd3 	bl	8007e9e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DGB_LINE2_PORT, DGB_LINE2_PIN, GPIO_PIN_RESET);
 8004ef8:	2380      	movs	r3, #128	; 0x80
 8004efa:	019b      	lsls	r3, r3, #6
 8004efc:	4812      	ldr	r0, [pc, #72]	; (8004f48 <DBG_Init+0x144>)
 8004efe:	2200      	movs	r2, #0
 8004f00:	0019      	movs	r1, r3
 8004f02:	f002 ffcc 	bl	8007e9e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DGB_LINE3_PORT, DGB_LINE3_PIN, GPIO_PIN_RESET);
 8004f06:	2380      	movs	r3, #128	; 0x80
 8004f08:	01db      	lsls	r3, r3, #7
 8004f0a:	480f      	ldr	r0, [pc, #60]	; (8004f48 <DBG_Init+0x144>)
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	0019      	movs	r1, r3
 8004f10:	f002 ffc5 	bl	8007e9e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DGB_LINE4_PORT, DGB_LINE4_PIN, GPIO_PIN_RESET);
 8004f14:	2380      	movs	r3, #128	; 0x80
 8004f16:	021b      	lsls	r3, r3, #8
 8004f18:	480b      	ldr	r0, [pc, #44]	; (8004f48 <DBG_Init+0x144>)
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	0019      	movs	r1, r3
 8004f1e:	f002 ffbe 	bl	8007e9e <HAL_GPIO_WritePin>

  __HAL_RCC_DBGMCU_CLK_ENABLE();
 8004f22:	4b08      	ldr	r3, [pc, #32]	; (8004f44 <DBG_Init+0x140>)
 8004f24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f26:	4b07      	ldr	r3, [pc, #28]	; (8004f44 <DBG_Init+0x140>)
 8004f28:	2180      	movs	r1, #128	; 0x80
 8004f2a:	03c9      	lsls	r1, r1, #15
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	635a      	str	r2, [r3, #52]	; 0x34

  HAL_DBGMCU_EnableDBGSleepMode();
 8004f30:	f001 f9e2 	bl	80062f8 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8004f34:	f001 f9ee 	bl	8006314 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8004f38:	f001 f9fa 	bl	8006330 <HAL_DBGMCU_EnableDBGStandbyMode>
#error "DEBUGGER_ON not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */
  /* USER CODE BEGIN DBG_Init_Last */

  /* USER CODE END DBG_Init_Last */
}
 8004f3c:	46c0      	nop			; (mov r8, r8)
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	b00b      	add	sp, #44	; 0x2c
 8004f42:	bd90      	pop	{r4, r7, pc}
 8004f44:	40021000 	.word	0x40021000
 8004f48:	50000400 	.word	0x50000400

08004f4c <EnvSensors_Init>:

  /* USER CODE END EnvSensors_Read_Last */
}

void  EnvSensors_Init(void)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	af00      	add	r7, sp, #0
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  /* USER CODE BEGIN EnvSensors_Init_Last */

  /* USER CODE END EnvSensors_Init_Last */
}
 8004f50:	46c0      	nop			; (mov r8, r8)
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
	...

08004f58 <MX_USART2_Init>:
DMA_HandleTypeDef hdma_tx;

/* USART2 init function */

void MX_USART2_Init(void)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	af00      	add	r7, sp, #0

  husart2.Instance        = USART2;
 8004f5c:	4b10      	ldr	r3, [pc, #64]	; (8004fa0 <MX_USART2_Init+0x48>)
 8004f5e:	4a11      	ldr	r2, [pc, #68]	; (8004fa4 <MX_USART2_Init+0x4c>)
 8004f60:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate   = USART_BAUDRATE;
 8004f62:	4b0f      	ldr	r3, [pc, #60]	; (8004fa0 <MX_USART2_Init+0x48>)
 8004f64:	22e1      	movs	r2, #225	; 0xe1
 8004f66:	0252      	lsls	r2, r2, #9
 8004f68:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004f6a:	4b0d      	ldr	r3, [pc, #52]	; (8004fa0 <MX_USART2_Init+0x48>)
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits   = UART_STOPBITS_1;
 8004f70:	4b0b      	ldr	r3, [pc, #44]	; (8004fa0 <MX_USART2_Init+0x48>)
 8004f72:	2200      	movs	r2, #0
 8004f74:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity     = UART_PARITY_NONE;
 8004f76:	4b0a      	ldr	r3, [pc, #40]	; (8004fa0 <MX_USART2_Init+0x48>)
 8004f78:	2200      	movs	r2, #0
 8004f7a:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode       = UART_MODE_TX;
 8004f7c:	4b08      	ldr	r3, [pc, #32]	; (8004fa0 <MX_USART2_Init+0x48>)
 8004f7e:	2208      	movs	r2, #8
 8004f80:	615a      	str	r2, [r3, #20]
  husart2.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8004f82:	4b07      	ldr	r3, [pc, #28]	; (8004fa0 <MX_USART2_Init+0x48>)
 8004f84:	2200      	movs	r2, #0
 8004f86:	619a      	str	r2, [r3, #24]

  if (HAL_UART_Init(&husart2) != HAL_OK)
 8004f88:	4b05      	ldr	r3, [pc, #20]	; (8004fa0 <MX_USART2_Init+0x48>)
 8004f8a:	0018      	movs	r0, r3
 8004f8c:	f005 fef6 	bl	800ad7c <HAL_UART_Init>
 8004f90:	1e03      	subs	r3, r0, #0
 8004f92:	d001      	beq.n	8004f98 <MX_USART2_Init+0x40>
  {
    Error_Handler();
 8004f94:	f7fe fce0 	bl	8003958 <Error_Handler>
  }
}
 8004f98:	46c0      	nop			; (mov r8, r8)
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	46c0      	nop			; (mov r8, r8)
 8004fa0:	20001674 	.word	0x20001674
 8004fa4:	40004400 	.word	0x40004400

08004fa8 <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle)
{
 8004fa8:	b590      	push	{r4, r7, lr}
 8004faa:	b095      	sub	sp, #84	; 0x54
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fb0:	233c      	movs	r3, #60	; 0x3c
 8004fb2:	18fb      	adds	r3, r7, r3
 8004fb4:	0018      	movs	r0, r3
 8004fb6:	2314      	movs	r3, #20
 8004fb8:	001a      	movs	r2, r3
 8004fba:	2100      	movs	r1, #0
 8004fbc:	f018 fff9 	bl	801dfb2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004fc0:	2418      	movs	r4, #24
 8004fc2:	193b      	adds	r3, r7, r4
 8004fc4:	0018      	movs	r0, r3
 8004fc6:	2324      	movs	r3, #36	; 0x24
 8004fc8:	001a      	movs	r2, r3
 8004fca:	2100      	movs	r1, #0
 8004fcc:	f018 fff1 	bl	801dfb2 <memset>
  if (uartHandle->Instance == USART2)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a57      	ldr	r2, [pc, #348]	; (8005134 <HAL_UART_MspInit+0x18c>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d000      	beq.n	8004fdc <HAL_UART_MspInit+0x34>
 8004fda:	e0a6      	b.n	800512a <HAL_UART_MspInit+0x182>

    /* USER CODE END USART2_MspInit 0 */

    /* Enable peripherals and GPIO Clocks */
    /* Enable GPIO TX/RX clock */
    USARTx_TX_GPIO_CLK_ENABLE();
 8004fdc:	4b56      	ldr	r3, [pc, #344]	; (8005138 <HAL_UART_MspInit+0x190>)
 8004fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fe0:	4b55      	ldr	r3, [pc, #340]	; (8005138 <HAL_UART_MspInit+0x190>)
 8004fe2:	2101      	movs	r1, #1
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	62da      	str	r2, [r3, #44]	; 0x2c
 8004fe8:	4b53      	ldr	r3, [pc, #332]	; (8005138 <HAL_UART_MspInit+0x190>)
 8004fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fec:	2201      	movs	r2, #1
 8004fee:	4013      	ands	r3, r2
 8004ff0:	617b      	str	r3, [r7, #20]
 8004ff2:	697b      	ldr	r3, [r7, #20]
    USARTx_RX_GPIO_CLK_ENABLE();
 8004ff4:	4b50      	ldr	r3, [pc, #320]	; (8005138 <HAL_UART_MspInit+0x190>)
 8004ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ff8:	4b4f      	ldr	r3, [pc, #316]	; (8005138 <HAL_UART_MspInit+0x190>)
 8004ffa:	2101      	movs	r1, #1
 8004ffc:	430a      	orrs	r2, r1
 8004ffe:	62da      	str	r2, [r3, #44]	; 0x2c
 8005000:	4b4d      	ldr	r3, [pc, #308]	; (8005138 <HAL_UART_MspInit+0x190>)
 8005002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005004:	2201      	movs	r2, #1
 8005006:	4013      	ands	r3, r2
 8005008:	613b      	str	r3, [r7, #16]
 800500a:	693b      	ldr	r3, [r7, #16]

    /* Enable USARTx clock */
    __USART2_CLK_ENABLE();
 800500c:	4b4a      	ldr	r3, [pc, #296]	; (8005138 <HAL_UART_MspInit+0x190>)
 800500e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005010:	4b49      	ldr	r3, [pc, #292]	; (8005138 <HAL_UART_MspInit+0x190>)
 8005012:	2180      	movs	r1, #128	; 0x80
 8005014:	0289      	lsls	r1, r1, #10
 8005016:	430a      	orrs	r2, r1
 8005018:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable DMA clock */
    DMAx_CLK_ENABLE();
 800501a:	4b47      	ldr	r3, [pc, #284]	; (8005138 <HAL_UART_MspInit+0x190>)
 800501c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800501e:	4b46      	ldr	r3, [pc, #280]	; (8005138 <HAL_UART_MspInit+0x190>)
 8005020:	2101      	movs	r1, #1
 8005022:	430a      	orrs	r2, r1
 8005024:	631a      	str	r2, [r3, #48]	; 0x30
 8005026:	4b44      	ldr	r3, [pc, #272]	; (8005138 <HAL_UART_MspInit+0x190>)
 8005028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800502a:	2201      	movs	r2, #1
 800502c:	4013      	ands	r3, r2
 800502e:	60fb      	str	r3, [r7, #12]
 8005030:	68fb      	ldr	r3, [r7, #12]

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005032:	4b41      	ldr	r3, [pc, #260]	; (8005138 <HAL_UART_MspInit+0x190>)
 8005034:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005036:	4b40      	ldr	r3, [pc, #256]	; (8005138 <HAL_UART_MspInit+0x190>)
 8005038:	2180      	movs	r1, #128	; 0x80
 800503a:	0289      	lsls	r1, r1, #10
 800503c:	430a      	orrs	r2, r1
 800503e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Select SYSTEM clock for USART2 commuincation TX/RX */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005040:	193b      	adds	r3, r7, r4
 8005042:	2202      	movs	r2, #2
 8005044:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8005046:	193b      	adds	r3, r7, r4
 8005048:	2204      	movs	r2, #4
 800504a:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800504c:	193b      	adds	r3, r7, r4
 800504e:	0018      	movs	r0, r3
 8005050:	f004 fc16 	bl	8009880 <HAL_RCCEx_PeriphCLKConfig>
 8005054:	1e03      	subs	r3, r0, #0
 8005056:	d001      	beq.n	800505c <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 8005058:	f7fe fc7e 	bl	8003958 <Error_Handler>

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
      */
    GPIO_InitStruct.Pin = USARTx_TX_Pin;
 800505c:	243c      	movs	r4, #60	; 0x3c
 800505e:	193b      	adds	r3, r7, r4
 8005060:	2204      	movs	r2, #4
 8005062:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005064:	193b      	adds	r3, r7, r4
 8005066:	2202      	movs	r2, #2
 8005068:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800506a:	193b      	adds	r3, r7, r4
 800506c:	2200      	movs	r2, #0
 800506e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8005070:	193b      	adds	r3, r7, r4
 8005072:	2203      	movs	r2, #3
 8005074:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8005076:	193b      	adds	r3, r7, r4
 8005078:	2204      	movs	r2, #4
 800507a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 800507c:	193a      	adds	r2, r7, r4
 800507e:	23a0      	movs	r3, #160	; 0xa0
 8005080:	05db      	lsls	r3, r3, #23
 8005082:	0011      	movs	r1, r2
 8005084:	0018      	movs	r0, r3
 8005086:	f002 fc8d 	bl	80079a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USARTx_RX_Pin;
 800508a:	0021      	movs	r1, r4
 800508c:	187b      	adds	r3, r7, r1
 800508e:	2208      	movs	r2, #8
 8005090:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005092:	187b      	adds	r3, r7, r1
 8005094:	2202      	movs	r2, #2
 8005096:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005098:	187b      	adds	r3, r7, r1
 800509a:	2200      	movs	r2, #0
 800509c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800509e:	187b      	adds	r3, r7, r1
 80050a0:	2203      	movs	r2, #3
 80050a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = USARTx_RX_AF;
 80050a4:	187b      	adds	r3, r7, r1
 80050a6:	2204      	movs	r2, #4
 80050a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 80050aa:	187a      	adds	r2, r7, r1
 80050ac:	23a0      	movs	r3, #160	; 0xa0
 80050ae:	05db      	lsls	r3, r3, #23
 80050b0:	0011      	movs	r1, r2
 80050b2:	0018      	movs	r0, r3
 80050b4:	f002 fc76 	bl	80079a4 <HAL_GPIO_Init>


    /* USART2 DMA Init */
    /* USART2_TX Init */
    /* Configure the DMA handler for Transmission process */
    hdma_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 80050b8:	4b20      	ldr	r3, [pc, #128]	; (800513c <HAL_UART_MspInit+0x194>)
 80050ba:	4a21      	ldr	r2, [pc, #132]	; (8005140 <HAL_UART_MspInit+0x198>)
 80050bc:	601a      	str	r2, [r3, #0]
    hdma_tx.Init.Request             = USARTx_TX_DMA_REQUEST;
 80050be:	4b1f      	ldr	r3, [pc, #124]	; (800513c <HAL_UART_MspInit+0x194>)
 80050c0:	2204      	movs	r2, #4
 80050c2:	605a      	str	r2, [r3, #4]
    hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80050c4:	4b1d      	ldr	r3, [pc, #116]	; (800513c <HAL_UART_MspInit+0x194>)
 80050c6:	2210      	movs	r2, #16
 80050c8:	609a      	str	r2, [r3, #8]
    hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80050ca:	4b1c      	ldr	r3, [pc, #112]	; (800513c <HAL_UART_MspInit+0x194>)
 80050cc:	2200      	movs	r2, #0
 80050ce:	60da      	str	r2, [r3, #12]
    hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 80050d0:	4b1a      	ldr	r3, [pc, #104]	; (800513c <HAL_UART_MspInit+0x194>)
 80050d2:	2280      	movs	r2, #128	; 0x80
 80050d4:	611a      	str	r2, [r3, #16]
    hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80050d6:	4b19      	ldr	r3, [pc, #100]	; (800513c <HAL_UART_MspInit+0x194>)
 80050d8:	2200      	movs	r2, #0
 80050da:	615a      	str	r2, [r3, #20]
    hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 80050dc:	4b17      	ldr	r3, [pc, #92]	; (800513c <HAL_UART_MspInit+0x194>)
 80050de:	2200      	movs	r2, #0
 80050e0:	619a      	str	r2, [r3, #24]
    hdma_tx.Init.Mode                = DMA_NORMAL;
 80050e2:	4b16      	ldr	r3, [pc, #88]	; (800513c <HAL_UART_MspInit+0x194>)
 80050e4:	2200      	movs	r2, #0
 80050e6:	61da      	str	r2, [r3, #28]
    hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
 80050e8:	4b14      	ldr	r3, [pc, #80]	; (800513c <HAL_UART_MspInit+0x194>)
 80050ea:	2200      	movs	r2, #0
 80050ec:	621a      	str	r2, [r3, #32]

    if (HAL_DMA_Init(&hdma_tx) != HAL_OK)
 80050ee:	4b13      	ldr	r3, [pc, #76]	; (800513c <HAL_UART_MspInit+0x194>)
 80050f0:	0018      	movs	r0, r3
 80050f2:	f001 ff93 	bl	800701c <HAL_DMA_Init>
 80050f6:	1e03      	subs	r3, r0, #0
 80050f8:	d001      	beq.n	80050fe <HAL_UART_MspInit+0x156>
    {
      Error_Handler();
 80050fa:	f7fe fc2d 	bl	8003958 <Error_Handler>
    }


    /* Associate the initialized DMA handle to the UART handle */
    __HAL_LINKDMA(uartHandle, hdmatx, hdma_tx);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a0e      	ldr	r2, [pc, #56]	; (800513c <HAL_UART_MspInit+0x194>)
 8005102:	66da      	str	r2, [r3, #108]	; 0x6c
 8005104:	4b0d      	ldr	r3, [pc, #52]	; (800513c <HAL_UART_MspInit+0x194>)
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	629a      	str	r2, [r3, #40]	; 0x28

    /* Configure the NVIC for DMA */
    /* NVIC configuration for DMA transfer complete interrupt (USART1_TX) */
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 800510a:	2201      	movs	r2, #1
 800510c:	2100      	movs	r1, #0
 800510e:	200b      	movs	r0, #11
 8005110:	f001 ff4e 	bl	8006fb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 8005114:	200b      	movs	r0, #11
 8005116:	f001 ff60 	bl	8006fda <HAL_NVIC_EnableIRQ>

    /* NVIC for USART, to catch the TX complete */
    HAL_NVIC_SetPriority(USARTx_IRQn, USARTx_DMA_Priority, 1);
 800511a:	2201      	movs	r2, #1
 800511c:	2100      	movs	r1, #0
 800511e:	201c      	movs	r0, #28
 8005120:	f001 ff46 	bl	8006fb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_IRQn);
 8005124:	201c      	movs	r0, #28
 8005126:	f001 ff58 	bl	8006fda <HAL_NVIC_EnableIRQ>

    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }
}
 800512a:	46c0      	nop			; (mov r8, r8)
 800512c:	46bd      	mov	sp, r7
 800512e:	b015      	add	sp, #84	; 0x54
 8005130:	bd90      	pop	{r4, r7, pc}
 8005132:	46c0      	nop			; (mov r8, r8)
 8005134:	40004400 	.word	0x40004400
 8005138:	40021000 	.word	0x40021000
 800513c:	2000162c 	.word	0x2000162c
 8005140:	40020080 	.word	0x40020080

08005144 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef *uartHandle)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]

  if (uartHandle->Instance == USART2)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a0d      	ldr	r2, [pc, #52]	; (8005188 <HAL_UART_MspDeInit+0x44>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d113      	bne.n	800517e <HAL_UART_MspDeInit+0x3a>
  {
    /* USER CODE BEGIN USART2_MspDeInit 0 */

    /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8005156:	4b0d      	ldr	r3, [pc, #52]	; (800518c <HAL_UART_MspDeInit+0x48>)
 8005158:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800515a:	4b0c      	ldr	r3, [pc, #48]	; (800518c <HAL_UART_MspDeInit+0x48>)
 800515c:	490c      	ldr	r1, [pc, #48]	; (8005190 <HAL_UART_MspDeInit+0x4c>)
 800515e:	400a      	ands	r2, r1
 8005160:	639a      	str	r2, [r3, #56]	; 0x38

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
      */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 8005162:	23a0      	movs	r3, #160	; 0xa0
 8005164:	05db      	lsls	r3, r3, #23
 8005166:	210c      	movs	r1, #12
 8005168:	0018      	movs	r0, r3
 800516a:	f002 fd99 	bl	8007ca0 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005172:	0018      	movs	r0, r3
 8005174:	f001 ffca 	bl	800710c <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8005178:	201c      	movs	r0, #28
 800517a:	f001 ff3e 	bl	8006ffa <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN USART2_MspDeInit 1 */

    /* USER CODE END USART2_MspDeInit 1 */
  }
}
 800517e:	46c0      	nop			; (mov r8, r8)
 8005180:	46bd      	mov	sp, r7
 8005182:	b002      	add	sp, #8
 8005184:	bd80      	pop	{r7, pc}
 8005186:	46c0      	nop			; (mov r8, r8)
 8005188:	40004400 	.word	0x40004400
 800518c:	40021000 	.word	0x40021000
 8005190:	fffdffff 	.word	0xfffdffff

08005194 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 800519c:	4b05      	ldr	r3, [pc, #20]	; (80051b4 <vcom_Init+0x20>)
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	601a      	str	r2, [r3, #0]
  MX_DMA_Init();
 80051a2:	f7fe fa23 	bl	80035ec <MX_DMA_Init>
  MX_USART2_Init();
 80051a6:	f7ff fed7 	bl	8004f58 <MX_USART2_Init>
  return UTIL_ADV_TRACE_OK;
 80051aa:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 80051ac:	0018      	movs	r0, r3
 80051ae:	46bd      	mov	sp, r7
 80051b0:	b002      	add	sp, #8
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	20000408 	.word	0x20000408

080051b8 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
 80051bc:	4b0b      	ldr	r3, [pc, #44]	; (80051ec <vcom_DeInit+0x34>)
 80051be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051c0:	4b0a      	ldr	r3, [pc, #40]	; (80051ec <vcom_DeInit+0x34>)
 80051c2:	2180      	movs	r1, #128	; 0x80
 80051c4:	0289      	lsls	r1, r1, #10
 80051c6:	430a      	orrs	r2, r1
 80051c8:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_USART2_RELEASE_RESET();
 80051ca:	4b08      	ldr	r3, [pc, #32]	; (80051ec <vcom_DeInit+0x34>)
 80051cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051ce:	4b07      	ldr	r3, [pc, #28]	; (80051ec <vcom_DeInit+0x34>)
 80051d0:	4907      	ldr	r1, [pc, #28]	; (80051f0 <vcom_DeInit+0x38>)
 80051d2:	400a      	ands	r2, r1
 80051d4:	629a      	str	r2, [r3, #40]	; 0x28

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&UartHandle);
 80051d6:	4b07      	ldr	r3, [pc, #28]	; (80051f4 <vcom_DeInit+0x3c>)
 80051d8:	0018      	movs	r0, r3
 80051da:	f7ff ffb3 	bl	8005144 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* temporary while waiting CR 50840: MX implementation of  MX_DMA_DeInit() */
  /* For the time being user should change manually the channel according to the MX settings */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80051de:	200b      	movs	r0, #11
 80051e0:	f001 ff0b 	bl	8006ffa <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 80051e4:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 80051e6:	0018      	movs	r0, r3
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	40021000 	.word	0x40021000
 80051f0:	fffdffff 	.word	0xfffdffff
 80051f4:	20001674 	.word	0x20001674

080051f8 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	000a      	movs	r2, r1
 8005202:	1cbb      	adds	r3, r7, #2
 8005204:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&UartHandle, p_data, size);
 8005206:	1cbb      	adds	r3, r7, #2
 8005208:	881a      	ldrh	r2, [r3, #0]
 800520a:	6879      	ldr	r1, [r7, #4]
 800520c:	4b04      	ldr	r3, [pc, #16]	; (8005220 <vcom_Trace_DMA+0x28>)
 800520e:	0018      	movs	r0, r3
 8005210:	f005 fe60 	bl	800aed4 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8005214:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8005216:	0018      	movs	r0, r3
 8005218:	46bd      	mov	sp, r7
 800521a:	b002      	add	sp, #8
 800521c:	bd80      	pop	{r7, pc}
 800521e:	46c0      	nop			; (mov r8, r8)
 8005220:	20001674 	.word	0x20001674

08005224 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 800522c:	4b1d      	ldr	r3, [pc, #116]	; (80052a4 <vcom_ReceiveInit+0x80>)
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	601a      	str	r2, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8005232:	2108      	movs	r1, #8
 8005234:	187b      	adds	r3, r7, r1
 8005236:	2280      	movs	r2, #128	; 0x80
 8005238:	0392      	lsls	r2, r2, #14
 800523a:	601a      	str	r2, [r3, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&UartHandle, WakeUpSelection);
 800523c:	187b      	adds	r3, r7, r1
 800523e:	481a      	ldr	r0, [pc, #104]	; (80052a8 <vcom_ReceiveInit+0x84>)
 8005240:	6819      	ldr	r1, [r3, #0]
 8005242:	685a      	ldr	r2, [r3, #4]
 8005244:	f006 ff9e 	bl	800c184 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&UartHandle, USART_ISR_BUSY) == SET);
 8005248:	46c0      	nop			; (mov r8, r8)
 800524a:	4b17      	ldr	r3, [pc, #92]	; (80052a8 <vcom_ReceiveInit+0x84>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	69da      	ldr	r2, [r3, #28]
 8005250:	2380      	movs	r3, #128	; 0x80
 8005252:	025b      	lsls	r3, r3, #9
 8005254:	401a      	ands	r2, r3
 8005256:	2380      	movs	r3, #128	; 0x80
 8005258:	025b      	lsls	r3, r3, #9
 800525a:	429a      	cmp	r2, r3
 800525c:	d0f5      	beq.n	800524a <vcom_ReceiveInit+0x26>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&UartHandle, USART_ISR_REACK) == RESET);
 800525e:	46c0      	nop			; (mov r8, r8)
 8005260:	4b11      	ldr	r3, [pc, #68]	; (80052a8 <vcom_ReceiveInit+0x84>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	69da      	ldr	r2, [r3, #28]
 8005266:	2380      	movs	r3, #128	; 0x80
 8005268:	03db      	lsls	r3, r3, #15
 800526a:	401a      	ands	r2, r3
 800526c:	2380      	movs	r3, #128	; 0x80
 800526e:	03db      	lsls	r3, r3, #15
 8005270:	429a      	cmp	r2, r3
 8005272:	d1f5      	bne.n	8005260 <vcom_ReceiveInit+0x3c>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&UartHandle, UART_IT_WUF);
 8005274:	4b0c      	ldr	r3, [pc, #48]	; (80052a8 <vcom_ReceiveInit+0x84>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	689a      	ldr	r2, [r3, #8]
 800527a:	4b0b      	ldr	r3, [pc, #44]	; (80052a8 <vcom_ReceiveInit+0x84>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2180      	movs	r1, #128	; 0x80
 8005280:	03c9      	lsls	r1, r1, #15
 8005282:	430a      	orrs	r2, r1
 8005284:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&UartHandle);
 8005286:	4b08      	ldr	r3, [pc, #32]	; (80052a8 <vcom_ReceiveInit+0x84>)
 8005288:	0018      	movs	r0, r3
 800528a:	f006 ffe1 	bl	800c250 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&UartHandle, &charRx, 1);
 800528e:	4907      	ldr	r1, [pc, #28]	; (80052ac <vcom_ReceiveInit+0x88>)
 8005290:	4b05      	ldr	r3, [pc, #20]	; (80052a8 <vcom_ReceiveInit+0x84>)
 8005292:	2201      	movs	r2, #1
 8005294:	0018      	movs	r0, r3
 8005296:	f005 fdc5 	bl	800ae24 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 800529a:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 800529c:	0018      	movs	r0, r3
 800529e:	46bd      	mov	sp, r7
 80052a0:	b004      	add	sp, #16
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	2000040c 	.word	0x2000040c
 80052a8:	20001674 	.word	0x20001674
 80052ac:	200016f8 	.word	0x200016f8

080052b0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 80052b8:	4b03      	ldr	r3, [pc, #12]	; (80052c8 <HAL_UART_TxCpltCallback+0x18>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2000      	movs	r0, #0
 80052be:	4798      	blx	r3
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 80052c0:	46c0      	nop			; (mov r8, r8)
 80052c2:	46bd      	mov	sp, r7
 80052c4:	b002      	add	sp, #8
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	20000408 	.word	0x20000408

080052cc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b082      	sub	sp, #8
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == UartHandle->ErrorCode))
 80052d4:	4b0c      	ldr	r3, [pc, #48]	; (8005308 <HAL_UART_RxCpltCallback+0x3c>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d00a      	beq.n	80052f2 <HAL_UART_RxCpltCallback+0x26>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2280      	movs	r2, #128	; 0x80
 80052e0:	589b      	ldr	r3, [r3, r2]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d105      	bne.n	80052f2 <HAL_UART_RxCpltCallback+0x26>
  {
    RxCpltCallback(&charRx, 1, 0);
 80052e6:	4b08      	ldr	r3, [pc, #32]	; (8005308 <HAL_UART_RxCpltCallback+0x3c>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4808      	ldr	r0, [pc, #32]	; (800530c <HAL_UART_RxCpltCallback+0x40>)
 80052ec:	2200      	movs	r2, #0
 80052ee:	2101      	movs	r1, #1
 80052f0:	4798      	blx	r3
  }
  HAL_UART_Receive_IT(UartHandle, &charRx, 1);
 80052f2:	4906      	ldr	r1, [pc, #24]	; (800530c <HAL_UART_RxCpltCallback+0x40>)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	0018      	movs	r0, r3
 80052fa:	f005 fd93 	bl	800ae24 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 80052fe:	46c0      	nop			; (mov r8, r8)
 8005300:	46bd      	mov	sp, r7
 8005302:	b002      	add	sp, #8
 8005304:	bd80      	pop	{r7, pc}
 8005306:	46c0      	nop			; (mov r8, r8)
 8005308:	2000040c 	.word	0x2000040c
 800530c:	200016f8 	.word	0x200016f8

08005310 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8005310:	480d      	ldr	r0, [pc, #52]	; (8005348 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8005312:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005314:	480d      	ldr	r0, [pc, #52]	; (800534c <LoopForever+0x6>)
  ldr r1, =_edata
 8005316:	490e      	ldr	r1, [pc, #56]	; (8005350 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005318:	4a0e      	ldr	r2, [pc, #56]	; (8005354 <LoopForever+0xe>)
  movs r3, #0
 800531a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800531c:	e002      	b.n	8005324 <LoopCopyDataInit>

0800531e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800531e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005320:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005322:	3304      	adds	r3, #4

08005324 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005324:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005326:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005328:	d3f9      	bcc.n	800531e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800532a:	4a0b      	ldr	r2, [pc, #44]	; (8005358 <LoopForever+0x12>)
  ldr r4, =_ebss
 800532c:	4c0b      	ldr	r4, [pc, #44]	; (800535c <LoopForever+0x16>)
  movs r3, #0
 800532e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005330:	e001      	b.n	8005336 <LoopFillZerobss>

08005332 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005332:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005334:	3204      	adds	r2, #4

08005336 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005336:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005338:	d3fb      	bcc.n	8005332 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800533a:	f000 ff4f 	bl	80061dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800533e:	f018 fe0b 	bl	801df58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005342:	f7fe fa2f 	bl	80037a4 <main>

08005346 <LoopForever>:

LoopForever:
    b LoopForever
 8005346:	e7fe      	b.n	8005346 <LoopForever>
   ldr   r0, =_estack
 8005348:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800534c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005350:	2000023c 	.word	0x2000023c
  ldr r2, =_sidata
 8005354:	08020178 	.word	0x08020178
  ldr r2, =_sbss
 8005358:	2000023c 	.word	0x2000023c
  ldr r4, =_ebss
 800535c:	2000180c 	.word	0x2000180c

08005360 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005360:	e7fe      	b.n	8005360 <ADC1_COMP_IRQHandler>

08005362 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005362:	b580      	push	{r7, lr}
 8005364:	b086      	sub	sp, #24
 8005366:	af00      	add	r7, sp, #0
 8005368:	60f8      	str	r0, [r7, #12]
 800536a:	60b9      	str	r1, [r7, #8]
 800536c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800536e:	2300      	movs	r3, #0
 8005370:	617b      	str	r3, [r7, #20]
 8005372:	e00a      	b.n	800538a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005374:	e000      	b.n	8005378 <_read+0x16>
 8005376:	bf00      	nop
 8005378:	0001      	movs	r1, r0
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	1c5a      	adds	r2, r3, #1
 800537e:	60ba      	str	r2, [r7, #8]
 8005380:	b2ca      	uxtb	r2, r1
 8005382:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	3301      	adds	r3, #1
 8005388:	617b      	str	r3, [r7, #20]
 800538a:	697a      	ldr	r2, [r7, #20]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	429a      	cmp	r2, r3
 8005390:	dbf0      	blt.n	8005374 <_read+0x12>
	}

return len;
 8005392:	687b      	ldr	r3, [r7, #4]
}
 8005394:	0018      	movs	r0, r3
 8005396:	46bd      	mov	sp, r7
 8005398:	b006      	add	sp, #24
 800539a:	bd80      	pop	{r7, pc}

0800539c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b086      	sub	sp, #24
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053a8:	2300      	movs	r3, #0
 80053aa:	617b      	str	r3, [r7, #20]
 80053ac:	e009      	b.n	80053c2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	1c5a      	adds	r2, r3, #1
 80053b2:	60ba      	str	r2, [r7, #8]
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	0018      	movs	r0, r3
 80053b8:	e000      	b.n	80053bc <_write+0x20>
 80053ba:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	3301      	adds	r3, #1
 80053c0:	617b      	str	r3, [r7, #20]
 80053c2:	697a      	ldr	r2, [r7, #20]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	dbf1      	blt.n	80053ae <_write+0x12>
	}
	return len;
 80053ca:	687b      	ldr	r3, [r7, #4]
}
 80053cc:	0018      	movs	r0, r3
 80053ce:	46bd      	mov	sp, r7
 80053d0:	b006      	add	sp, #24
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <_sbrk>:

caddr_t _sbrk(int incr)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80053dc:	4b11      	ldr	r3, [pc, #68]	; (8005424 <_sbrk+0x50>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d102      	bne.n	80053ea <_sbrk+0x16>
		heap_end = &end;
 80053e4:	4b0f      	ldr	r3, [pc, #60]	; (8005424 <_sbrk+0x50>)
 80053e6:	4a10      	ldr	r2, [pc, #64]	; (8005428 <_sbrk+0x54>)
 80053e8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80053ea:	4b0e      	ldr	r3, [pc, #56]	; (8005424 <_sbrk+0x50>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80053f0:	4b0c      	ldr	r3, [pc, #48]	; (8005424 <_sbrk+0x50>)
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	18d2      	adds	r2, r2, r3
 80053f8:	466b      	mov	r3, sp
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d907      	bls.n	800540e <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80053fe:	f018 fda5 	bl	801df4c <__errno>
 8005402:	0003      	movs	r3, r0
 8005404:	220c      	movs	r2, #12
 8005406:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8005408:	2301      	movs	r3, #1
 800540a:	425b      	negs	r3, r3
 800540c:	e006      	b.n	800541c <_sbrk+0x48>
	}

	heap_end += incr;
 800540e:	4b05      	ldr	r3, [pc, #20]	; (8005424 <_sbrk+0x50>)
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	18d2      	adds	r2, r2, r3
 8005416:	4b03      	ldr	r3, [pc, #12]	; (8005424 <_sbrk+0x50>)
 8005418:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 800541a:	68fb      	ldr	r3, [r7, #12]
}
 800541c:	0018      	movs	r0, r3
 800541e:	46bd      	mov	sp, r7
 8005420:	b004      	add	sp, #16
 8005422:	bd80      	pop	{r7, pc}
 8005424:	20000414 	.word	0x20000414
 8005428:	20001810 	.word	0x20001810

0800542c <_close>:

int _close(int file)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
	return -1;
 8005434:	2301      	movs	r3, #1
 8005436:	425b      	negs	r3, r3
}
 8005438:	0018      	movs	r0, r3
 800543a:	46bd      	mov	sp, r7
 800543c:	b002      	add	sp, #8
 800543e:	bd80      	pop	{r7, pc}

08005440 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	2280      	movs	r2, #128	; 0x80
 800544e:	0192      	lsls	r2, r2, #6
 8005450:	605a      	str	r2, [r3, #4]
	return 0;
 8005452:	2300      	movs	r3, #0
}
 8005454:	0018      	movs	r0, r3
 8005456:	46bd      	mov	sp, r7
 8005458:	b002      	add	sp, #8
 800545a:	bd80      	pop	{r7, pc}

0800545c <_isatty>:

int _isatty(int file)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
	return 1;
 8005464:	2301      	movs	r3, #1
}
 8005466:	0018      	movs	r0, r3
 8005468:	46bd      	mov	sp, r7
 800546a:	b002      	add	sp, #8
 800546c:	bd80      	pop	{r7, pc}

0800546e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800546e:	b580      	push	{r7, lr}
 8005470:	b084      	sub	sp, #16
 8005472:	af00      	add	r7, sp, #0
 8005474:	60f8      	str	r0, [r7, #12]
 8005476:	60b9      	str	r1, [r7, #8]
 8005478:	607a      	str	r2, [r7, #4]
	return 0;
 800547a:	2300      	movs	r3, #0
}
 800547c:	0018      	movs	r0, r3
 800547e:	46bd      	mov	sp, r7
 8005480:	b004      	add	sp, #16
 8005482:	bd80      	pop	{r7, pc}

08005484 <BSP_SPI1_Init>:
  * @brief  Initializes SPI HAL.
  * @retval None
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b082      	sub	sp, #8
 8005488:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800548a:	2300      	movs	r3, #0
 800548c:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 800548e:	4b0d      	ldr	r3, [pc, #52]	; (80054c4 <BSP_SPI1_Init+0x40>)
 8005490:	4a0d      	ldr	r2, [pc, #52]	; (80054c8 <BSP_SPI1_Init+0x44>)
 8005492:	601a      	str	r2, [r3, #0]
  if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8005494:	4b0b      	ldr	r3, [pc, #44]	; (80054c4 <BSP_SPI1_Init+0x40>)
 8005496:	0018      	movs	r0, r3
 8005498:	f005 fb8f 	bl	800abba <HAL_SPI_GetState>
 800549c:	1e03      	subs	r3, r0, #0
 800549e:	d10c      	bne.n	80054ba <BSP_SPI1_Init+0x36>
  {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0)
    /* Init the SPI Msp */
    SPI1_MspInit(&hspi1);
 80054a0:	4b08      	ldr	r3, [pc, #32]	; (80054c4 <BSP_SPI1_Init+0x40>)
 80054a2:	0018      	movs	r0, r3
 80054a4:	f000 f87e 	bl	80055a4 <SPI1_MspInit>
      }
    }
#endif

    /* Init the SPI */
    if (MX_SPI1_Init(&hspi1) != HAL_OK)
 80054a8:	4b06      	ldr	r3, [pc, #24]	; (80054c4 <BSP_SPI1_Init+0x40>)
 80054aa:	0018      	movs	r0, r3
 80054ac:	f000 f830 	bl	8005510 <MX_SPI1_Init>
 80054b0:	1e03      	subs	r3, r0, #0
 80054b2:	d002      	beq.n	80054ba <BSP_SPI1_Init+0x36>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 80054b4:	2308      	movs	r3, #8
 80054b6:	425b      	negs	r3, r3
 80054b8:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 80054ba:	687b      	ldr	r3, [r7, #4]
}
 80054bc:	0018      	movs	r0, r3
 80054be:	46bd      	mov	sp, r7
 80054c0:	b002      	add	sp, #8
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	20001514 	.word	0x20001514
 80054c8:	40013000 	.word	0x40013000

080054cc <BSP_SPI1_SendRecv>:
  * @param  pData: Data
  * @param  len: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t len)
{
 80054cc:	b590      	push	{r4, r7, lr}
 80054ce:	b089      	sub	sp, #36	; 0x24
 80054d0:	af02      	add	r7, sp, #8
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	1dbb      	adds	r3, r7, #6
 80054d8:	801a      	strh	r2, [r3, #0]
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 80054da:	2306      	movs	r3, #6
 80054dc:	425b      	negs	r3, r3
 80054de:	617b      	str	r3, [r7, #20]

  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 80054e0:	1dbb      	adds	r3, r7, #6
 80054e2:	881c      	ldrh	r4, [r3, #0]
 80054e4:	68ba      	ldr	r2, [r7, #8]
 80054e6:	68f9      	ldr	r1, [r7, #12]
 80054e8:	4808      	ldr	r0, [pc, #32]	; (800550c <BSP_SPI1_SendRecv+0x40>)
 80054ea:	23fa      	movs	r3, #250	; 0xfa
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	9300      	str	r3, [sp, #0]
 80054f0:	0023      	movs	r3, r4
 80054f2:	f005 f9a7 	bl	800a844 <HAL_SPI_TransmitReceive>
 80054f6:	1e03      	subs	r3, r0, #0
 80054f8:	d102      	bne.n	8005500 <BSP_SPI1_SendRecv+0x34>
  {
    ret = len;
 80054fa:	1dbb      	adds	r3, r7, #6
 80054fc:	881b      	ldrh	r3, [r3, #0]
 80054fe:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8005500:	697b      	ldr	r3, [r7, #20]
}
 8005502:	0018      	movs	r0, r3
 8005504:	46bd      	mov	sp, r7
 8005506:	b007      	add	sp, #28
 8005508:	bd90      	pop	{r4, r7, pc}
 800550a:	46c0      	nop			; (mov r8, r8)
 800550c:	20001514 	.word	0x20001514

08005510 <MX_SPI1_Init>:
}

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef *hspi)
{
 8005510:	b590      	push	{r4, r7, lr}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005518:	240f      	movs	r4, #15
 800551a:	193b      	adds	r3, r7, r4
 800551c:	2200      	movs	r2, #0
 800551e:	701a      	strb	r2, [r3, #0]
  hspi->Instance = SPI1;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a1e      	ldr	r2, [pc, #120]	; (800559c <MX_SPI1_Init+0x8c>)
 8005524:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2282      	movs	r2, #130	; 0x82
 800552a:	0052      	lsls	r2, r2, #1
 800552c:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2280      	movs	r2, #128	; 0x80
 800554a:	0092      	lsls	r2, r2, #2
 800554c:	619a      	str	r2, [r3, #24]
  /* SPI1 is on APB2 for L0x3 -> HAL_RCC_GetPCLK2Freq */
  hspi->Init.BaudRatePrescaler = SPI_GetPrescaler(HAL_RCC_GetPCLK2Freq(), RADIO_SPI_BAUDRATE);
 800554e:	f004 f981 	bl	8009854 <HAL_RCC_GetPCLK2Freq>
 8005552:	0003      	movs	r3, r0
 8005554:	4a12      	ldr	r2, [pc, #72]	; (80055a0 <MX_SPI1_Init+0x90>)
 8005556:	0011      	movs	r1, r2
 8005558:	0018      	movs	r0, r3
 800555a:	f000 f867 	bl	800562c <SPI_GetPrescaler>
 800555e:	0002      	movs	r2, r0
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2207      	movs	r2, #7
 800557a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	0018      	movs	r0, r3
 8005580:	f005 f8c4 	bl	800a70c <HAL_SPI_Init>
 8005584:	1e03      	subs	r3, r0, #0
 8005586:	d002      	beq.n	800558e <MX_SPI1_Init+0x7e>
  {
    ret = HAL_ERROR;
 8005588:	193b      	adds	r3, r7, r4
 800558a:	2201      	movs	r2, #1
 800558c:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800558e:	230f      	movs	r3, #15
 8005590:	18fb      	adds	r3, r7, r3
 8005592:	781b      	ldrb	r3, [r3, #0]
}
 8005594:	0018      	movs	r0, r3
 8005596:	46bd      	mov	sp, r7
 8005598:	b005      	add	sp, #20
 800559a:	bd90      	pop	{r4, r7, pc}
 800559c:	40013000 	.word	0x40013000
 80055a0:	00989680 	.word	0x00989680

080055a4 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef *spiHandle)
{
 80055a4:	b590      	push	{r4, r7, lr}
 80055a6:	b089      	sub	sp, #36	; 0x24
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /* Enable Peripheral clock */
  __HAL_RCC_SPI1_CLK_ENABLE();
 80055ac:	4b1d      	ldr	r3, [pc, #116]	; (8005624 <SPI1_MspInit+0x80>)
 80055ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055b0:	4b1c      	ldr	r3, [pc, #112]	; (8005624 <SPI1_MspInit+0x80>)
 80055b2:	2180      	movs	r1, #128	; 0x80
 80055b4:	0149      	lsls	r1, r1, #5
 80055b6:	430a      	orrs	r2, r1
 80055b8:	635a      	str	r2, [r3, #52]	; 0x34
  /**SPI1 GPIO Configuration
  PA5     ------> SPI1_SCK
  PA6     ------> SPI1_MISO
  PA7     ------> SPI1_MOSI
    */
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055ba:	240c      	movs	r4, #12
 80055bc:	193b      	adds	r3, r7, r4
 80055be:	2202      	movs	r2, #2
 80055c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055c2:	193b      	adds	r3, r7, r4
 80055c4:	2200      	movs	r2, #0
 80055c6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055c8:	193b      	adds	r3, r7, r4
 80055ca:	2203      	movs	r2, #3
 80055cc:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 80055ce:	193b      	adds	r3, r7, r4
 80055d0:	2200      	movs	r2, #0
 80055d2:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 80055d4:	193b      	adds	r3, r7, r4
 80055d6:	2280      	movs	r2, #128	; 0x80
 80055d8:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80055da:	193a      	adds	r2, r7, r4
 80055dc:	23a0      	movs	r3, #160	; 0xa0
 80055de:	05db      	lsls	r3, r3, #23
 80055e0:	0011      	movs	r1, r2
 80055e2:	0018      	movs	r0, r3
 80055e4:	f002 f9de 	bl	80079a4 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 80055e8:	193b      	adds	r3, r7, r4
 80055ea:	2200      	movs	r2, #0
 80055ec:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 80055ee:	193b      	adds	r3, r7, r4
 80055f0:	2240      	movs	r2, #64	; 0x40
 80055f2:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 80055f4:	193a      	adds	r2, r7, r4
 80055f6:	23a0      	movs	r3, #160	; 0xa0
 80055f8:	05db      	lsls	r3, r3, #23
 80055fa:	0011      	movs	r1, r2
 80055fc:	0018      	movs	r0, r3
 80055fe:	f002 f9d1 	bl	80079a4 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8005602:	193b      	adds	r3, r7, r4
 8005604:	2200      	movs	r2, #0
 8005606:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8005608:	193b      	adds	r3, r7, r4
 800560a:	2208      	movs	r2, #8
 800560c:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 800560e:	193b      	adds	r3, r7, r4
 8005610:	4a05      	ldr	r2, [pc, #20]	; (8005628 <SPI1_MspInit+0x84>)
 8005612:	0019      	movs	r1, r3
 8005614:	0010      	movs	r0, r2
 8005616:	f002 f9c5 	bl	80079a4 <HAL_GPIO_Init>


  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 800561a:	46c0      	nop			; (mov r8, r8)
 800561c:	46bd      	mov	sp, r7
 800561e:	b009      	add	sp, #36	; 0x24
 8005620:	bd90      	pop	{r4, r7, pc}
 8005622:	46c0      	nop			; (mov r8, r8)
 8005624:	40021000 	.word	0x40021000
 8005628:	50000400 	.word	0x50000400

0800562c <SPI_GetPrescaler>:

  /* USER CODE END SPI1_MspDeInit 1 */
}

static uint32_t SPI_GetPrescaler(uint32_t clock_src_hz, uint32_t baudrate_mbps)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b086      	sub	sp, #24
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
  uint32_t divisor = 0;
 8005636:	2300      	movs	r3, #0
 8005638:	617b      	str	r3, [r7, #20]
  uint32_t spi_clk = clock_src_hz;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	613b      	str	r3, [r7, #16]
  uint32_t presc = 0;
 800563e:	2300      	movs	r3, #0
 8005640:	60fb      	str	r3, [r7, #12]
    SPI_BAUDRATEPRESCALER_64,
    SPI_BAUDRATEPRESCALER_128,
    SPI_BAUDRATEPRESCALER_256,
  };

  while (spi_clk > baudrate_mbps)
 8005642:	e00d      	b.n	8005660 <SPI_GetPrescaler+0x34>
  {
    presc = baudrate[divisor];
 8005644:	4b0c      	ldr	r3, [pc, #48]	; (8005678 <SPI_GetPrescaler+0x4c>)
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	0092      	lsls	r2, r2, #2
 800564a:	58d3      	ldr	r3, [r2, r3]
 800564c:	60fb      	str	r3, [r7, #12]
    if (++divisor > 7)
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	3301      	adds	r3, #1
 8005652:	617b      	str	r3, [r7, #20]
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	2b07      	cmp	r3, #7
 8005658:	d807      	bhi.n	800566a <SPI_GetPrescaler+0x3e>
    {
      break;
    }

    spi_clk = (spi_clk >> 1);
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	085b      	lsrs	r3, r3, #1
 800565e:	613b      	str	r3, [r7, #16]
  while (spi_clk > baudrate_mbps)
 8005660:	693a      	ldr	r2, [r7, #16]
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	429a      	cmp	r2, r3
 8005666:	d8ed      	bhi.n	8005644 <SPI_GetPrescaler+0x18>
 8005668:	e000      	b.n	800566c <SPI_GetPrescaler+0x40>
      break;
 800566a:	46c0      	nop			; (mov r8, r8)
  }

  return presc;
 800566c:	68fb      	ldr	r3, [r7, #12]
}
 800566e:	0018      	movs	r0, r3
 8005670:	46bd      	mov	sp, r7
 8005672:	b006      	add	sp, #24
 8005674:	bd80      	pop	{r7, pc}
 8005676:	46c0      	nop			; (mov r8, r8)
 8005678:	0801f1cc 	.word	0x0801f1cc

0800567c <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8005682:	2300      	movs	r3, #0
 8005684:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8005686:	4b19      	ldr	r3, [pc, #100]	; (80056ec <BSP_I2C1_Init+0x70>)
 8005688:	4a19      	ldr	r2, [pc, #100]	; (80056f0 <BSP_I2C1_Init+0x74>)
 800568a:	601a      	str	r2, [r3, #0]

  if (I2C1InitCounter++ == 0)
 800568c:	4b19      	ldr	r3, [pc, #100]	; (80056f4 <BSP_I2C1_Init+0x78>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	1c59      	adds	r1, r3, #1
 8005692:	4a18      	ldr	r2, [pc, #96]	; (80056f4 <BSP_I2C1_Init+0x78>)
 8005694:	6011      	str	r1, [r2, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d123      	bne.n	80056e2 <BSP_I2C1_Init+0x66>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 800569a:	4b14      	ldr	r3, [pc, #80]	; (80056ec <BSP_I2C1_Init+0x70>)
 800569c:	0018      	movs	r0, r3
 800569e:	f002 ff37 	bl	8008510 <HAL_I2C_GetState>
 80056a2:	1e03      	subs	r3, r0, #0
 80056a4:	d11d      	bne.n	80056e2 <BSP_I2C1_Init+0x66>
    {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 80056a6:	4b11      	ldr	r3, [pc, #68]	; (80056ec <BSP_I2C1_Init+0x70>)
 80056a8:	0018      	movs	r0, r3
 80056aa:	f000 f873 	bl	8005794 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
#endif
      if (ret == BSP_ERROR_NONE)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d116      	bne.n	80056e2 <BSP_I2C1_Init+0x66>
      {
        /* Init the I2C */
        if (MX_I2C1_Init(&hi2c1) != HAL_OK)
 80056b4:	4b0d      	ldr	r3, [pc, #52]	; (80056ec <BSP_I2C1_Init+0x70>)
 80056b6:	0018      	movs	r0, r3
 80056b8:	f000 f81e 	bl	80056f8 <MX_I2C1_Init>
 80056bc:	1e03      	subs	r3, r0, #0
 80056be:	d003      	beq.n	80056c8 <BSP_I2C1_Init+0x4c>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80056c0:	2308      	movs	r3, #8
 80056c2:	425b      	negs	r3, r3
 80056c4:	607b      	str	r3, [r7, #4]
 80056c6:	e00c      	b.n	80056e2 <BSP_I2C1_Init+0x66>
        }
        else if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80056c8:	4b08      	ldr	r3, [pc, #32]	; (80056ec <BSP_I2C1_Init+0x70>)
 80056ca:	2100      	movs	r1, #0
 80056cc:	0018      	movs	r0, r3
 80056ce:	f003 f969 	bl	80089a4 <HAL_I2CEx_ConfigAnalogFilter>
 80056d2:	1e03      	subs	r3, r0, #0
 80056d4:	d003      	beq.n	80056de <BSP_I2C1_Init+0x62>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80056d6:	2308      	movs	r3, #8
 80056d8:	425b      	negs	r3, r3
 80056da:	607b      	str	r3, [r7, #4]
 80056dc:	e001      	b.n	80056e2 <BSP_I2C1_Init+0x66>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 80056de:	2300      	movs	r3, #0
 80056e0:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 80056e2:	687b      	ldr	r3, [r7, #4]
}
 80056e4:	0018      	movs	r0, r3
 80056e6:	46bd      	mov	sp, r7
 80056e8:	b002      	add	sp, #8
 80056ea:	bd80      	pop	{r7, pc}
 80056ec:	200013bc 	.word	0x200013bc
 80056f0:	40005400 	.word	0x40005400
 80056f4:	20000418 	.word	0x20000418

080056f8 <MX_I2C1_Init>:
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef *hi2c)
{
 80056f8:	b590      	push	{r4, r7, lr}
 80056fa:	b085      	sub	sp, #20
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005700:	240f      	movs	r4, #15
 8005702:	193b      	adds	r3, r7, r4
 8005704:	2200      	movs	r2, #0
 8005706:	701a      	strb	r2, [r3, #0]
  hi2c->Instance = I2C1;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a20      	ldr	r2, [pc, #128]	; (800578c <MX_I2C1_Init+0x94>)
 800570c:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00707CBB;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a1f      	ldr	r2, [pc, #124]	; (8005790 <MX_I2C1_Init+0x98>)
 8005712:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2201      	movs	r2, #1
 800571e:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	0018      	movs	r0, r3
 8005742:	f002 fbe5 	bl	8007f10 <HAL_I2C_Init>
 8005746:	1e03      	subs	r3, r0, #0
 8005748:	d002      	beq.n	8005750 <MX_I2C1_Init+0x58>
  {
    ret = HAL_ERROR;
 800574a:	193b      	adds	r3, r7, r4
 800574c:	2201      	movs	r2, #1
 800574e:	701a      	strb	r2, [r3, #0]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2100      	movs	r1, #0
 8005754:	0018      	movs	r0, r3
 8005756:	f003 f925 	bl	80089a4 <HAL_I2CEx_ConfigAnalogFilter>
 800575a:	1e03      	subs	r3, r0, #0
 800575c:	d003      	beq.n	8005766 <MX_I2C1_Init+0x6e>
  {
    ret = HAL_ERROR;
 800575e:	230f      	movs	r3, #15
 8005760:	18fb      	adds	r3, r7, r3
 8005762:	2201      	movs	r2, #1
 8005764:	701a      	strb	r2, [r3, #0]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2100      	movs	r1, #0
 800576a:	0018      	movs	r0, r3
 800576c:	f003 f966 	bl	8008a3c <HAL_I2CEx_ConfigDigitalFilter>
 8005770:	1e03      	subs	r3, r0, #0
 8005772:	d003      	beq.n	800577c <MX_I2C1_Init+0x84>
  {
    ret = HAL_ERROR;
 8005774:	230f      	movs	r3, #15
 8005776:	18fb      	adds	r3, r7, r3
 8005778:	2201      	movs	r2, #1
 800577a:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800577c:	230f      	movs	r3, #15
 800577e:	18fb      	adds	r3, r7, r3
 8005780:	781b      	ldrb	r3, [r3, #0]
}
 8005782:	0018      	movs	r0, r3
 8005784:	46bd      	mov	sp, r7
 8005786:	b005      	add	sp, #20
 8005788:	bd90      	pop	{r4, r7, pc}
 800578a:	46c0      	nop			; (mov r8, r8)
 800578c:	40005400 	.word	0x40005400
 8005790:	00707cbb 	.word	0x00707cbb

08005794 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef *i2cHandle)
{
 8005794:	b590      	push	{r4, r7, lr}
 8005796:	b089      	sub	sp, #36	; 0x24
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

  __HAL_RCC_GPIOB_CLK_ENABLE();
 800579c:	4b22      	ldr	r3, [pc, #136]	; (8005828 <I2C1_MspInit+0x94>)
 800579e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057a0:	4b21      	ldr	r3, [pc, #132]	; (8005828 <I2C1_MspInit+0x94>)
 80057a2:	2102      	movs	r1, #2
 80057a4:	430a      	orrs	r2, r1
 80057a6:	62da      	str	r2, [r3, #44]	; 0x2c
 80057a8:	4b1f      	ldr	r3, [pc, #124]	; (8005828 <I2C1_MspInit+0x94>)
 80057aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ac:	2202      	movs	r2, #2
 80057ae:	4013      	ands	r3, r2
 80057b0:	60bb      	str	r3, [r7, #8]
 80057b2:	68bb      	ldr	r3, [r7, #8]
  /**I2C1 GPIO Configuration
  PB8     ------> I2C1_SCL
  PB9     ------> I2C1_SDA
    */
  GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 80057b4:	210c      	movs	r1, #12
 80057b6:	187b      	adds	r3, r7, r1
 80057b8:	2280      	movs	r2, #128	; 0x80
 80057ba:	0052      	lsls	r2, r2, #1
 80057bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80057be:	000c      	movs	r4, r1
 80057c0:	193b      	adds	r3, r7, r4
 80057c2:	2212      	movs	r2, #18
 80057c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80057c6:	193b      	adds	r3, r7, r4
 80057c8:	2201      	movs	r2, #1
 80057ca:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057cc:	193b      	adds	r3, r7, r4
 80057ce:	2203      	movs	r2, #3
 80057d0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 80057d2:	193b      	adds	r3, r7, r4
 80057d4:	2204      	movs	r2, #4
 80057d6:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 80057d8:	193b      	adds	r3, r7, r4
 80057da:	4a14      	ldr	r2, [pc, #80]	; (800582c <I2C1_MspInit+0x98>)
 80057dc:	0019      	movs	r1, r3
 80057de:	0010      	movs	r0, r2
 80057e0:	f002 f8e0 	bl	80079a4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 80057e4:	0021      	movs	r1, r4
 80057e6:	187b      	adds	r3, r7, r1
 80057e8:	2280      	movs	r2, #128	; 0x80
 80057ea:	0092      	lsls	r2, r2, #2
 80057ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80057ee:	187b      	adds	r3, r7, r1
 80057f0:	2212      	movs	r2, #18
 80057f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80057f4:	187b      	adds	r3, r7, r1
 80057f6:	2201      	movs	r2, #1
 80057f8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057fa:	187b      	adds	r3, r7, r1
 80057fc:	2203      	movs	r2, #3
 80057fe:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8005800:	187b      	adds	r3, r7, r1
 8005802:	2204      	movs	r2, #4
 8005804:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8005806:	187b      	adds	r3, r7, r1
 8005808:	4a08      	ldr	r2, [pc, #32]	; (800582c <I2C1_MspInit+0x98>)
 800580a:	0019      	movs	r1, r3
 800580c:	0010      	movs	r0, r2
 800580e:	f002 f8c9 	bl	80079a4 <HAL_GPIO_Init>

  /* Peripheral clock enable */
  __HAL_RCC_I2C1_CLK_ENABLE();
 8005812:	4b05      	ldr	r3, [pc, #20]	; (8005828 <I2C1_MspInit+0x94>)
 8005814:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005816:	4b04      	ldr	r3, [pc, #16]	; (8005828 <I2C1_MspInit+0x94>)
 8005818:	2180      	movs	r1, #128	; 0x80
 800581a:	0389      	lsls	r1, r1, #14
 800581c:	430a      	orrs	r2, r1
 800581e:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8005820:	46c0      	nop			; (mov r8, r8)
 8005822:	46bd      	mov	sp, r7
 8005824:	b009      	add	sp, #36	; 0x24
 8005826:	bd90      	pop	{r4, r7, pc}
 8005828:	40021000 	.word	0x40021000
 800582c:	50000400 	.word	0x50000400

08005830 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005830:	b590      	push	{r4, r7, lr}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	0002      	movs	r2, r0
 8005838:	6039      	str	r1, [r7, #0]
 800583a:	1dfb      	adds	r3, r7, #7
 800583c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800583e:	1dfb      	adds	r3, r7, #7
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	2b7f      	cmp	r3, #127	; 0x7f
 8005844:	d828      	bhi.n	8005898 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005846:	4a2f      	ldr	r2, [pc, #188]	; (8005904 <__NVIC_SetPriority+0xd4>)
 8005848:	1dfb      	adds	r3, r7, #7
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	b25b      	sxtb	r3, r3
 800584e:	089b      	lsrs	r3, r3, #2
 8005850:	33c0      	adds	r3, #192	; 0xc0
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	589b      	ldr	r3, [r3, r2]
 8005856:	1dfa      	adds	r2, r7, #7
 8005858:	7812      	ldrb	r2, [r2, #0]
 800585a:	0011      	movs	r1, r2
 800585c:	2203      	movs	r2, #3
 800585e:	400a      	ands	r2, r1
 8005860:	00d2      	lsls	r2, r2, #3
 8005862:	21ff      	movs	r1, #255	; 0xff
 8005864:	4091      	lsls	r1, r2
 8005866:	000a      	movs	r2, r1
 8005868:	43d2      	mvns	r2, r2
 800586a:	401a      	ands	r2, r3
 800586c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	019b      	lsls	r3, r3, #6
 8005872:	22ff      	movs	r2, #255	; 0xff
 8005874:	401a      	ands	r2, r3
 8005876:	1dfb      	adds	r3, r7, #7
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	0018      	movs	r0, r3
 800587c:	2303      	movs	r3, #3
 800587e:	4003      	ands	r3, r0
 8005880:	00db      	lsls	r3, r3, #3
 8005882:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005884:	481f      	ldr	r0, [pc, #124]	; (8005904 <__NVIC_SetPriority+0xd4>)
 8005886:	1dfb      	adds	r3, r7, #7
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	b25b      	sxtb	r3, r3
 800588c:	089b      	lsrs	r3, r3, #2
 800588e:	430a      	orrs	r2, r1
 8005890:	33c0      	adds	r3, #192	; 0xc0
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8005896:	e031      	b.n	80058fc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005898:	4a1b      	ldr	r2, [pc, #108]	; (8005908 <__NVIC_SetPriority+0xd8>)
 800589a:	1dfb      	adds	r3, r7, #7
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	0019      	movs	r1, r3
 80058a0:	230f      	movs	r3, #15
 80058a2:	400b      	ands	r3, r1
 80058a4:	3b08      	subs	r3, #8
 80058a6:	089b      	lsrs	r3, r3, #2
 80058a8:	3306      	adds	r3, #6
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	18d3      	adds	r3, r2, r3
 80058ae:	3304      	adds	r3, #4
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	1dfa      	adds	r2, r7, #7
 80058b4:	7812      	ldrb	r2, [r2, #0]
 80058b6:	0011      	movs	r1, r2
 80058b8:	2203      	movs	r2, #3
 80058ba:	400a      	ands	r2, r1
 80058bc:	00d2      	lsls	r2, r2, #3
 80058be:	21ff      	movs	r1, #255	; 0xff
 80058c0:	4091      	lsls	r1, r2
 80058c2:	000a      	movs	r2, r1
 80058c4:	43d2      	mvns	r2, r2
 80058c6:	401a      	ands	r2, r3
 80058c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	019b      	lsls	r3, r3, #6
 80058ce:	22ff      	movs	r2, #255	; 0xff
 80058d0:	401a      	ands	r2, r3
 80058d2:	1dfb      	adds	r3, r7, #7
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	0018      	movs	r0, r3
 80058d8:	2303      	movs	r3, #3
 80058da:	4003      	ands	r3, r0
 80058dc:	00db      	lsls	r3, r3, #3
 80058de:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80058e0:	4809      	ldr	r0, [pc, #36]	; (8005908 <__NVIC_SetPriority+0xd8>)
 80058e2:	1dfb      	adds	r3, r7, #7
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	001c      	movs	r4, r3
 80058e8:	230f      	movs	r3, #15
 80058ea:	4023      	ands	r3, r4
 80058ec:	3b08      	subs	r3, #8
 80058ee:	089b      	lsrs	r3, r3, #2
 80058f0:	430a      	orrs	r2, r1
 80058f2:	3306      	adds	r3, #6
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	18c3      	adds	r3, r0, r3
 80058f8:	3304      	adds	r3, #4
 80058fa:	601a      	str	r2, [r3, #0]
}
 80058fc:	46c0      	nop			; (mov r8, r8)
 80058fe:	46bd      	mov	sp, r7
 8005900:	b003      	add	sp, #12
 8005902:	bd90      	pop	{r4, r7, pc}
 8005904:	e000e100 	.word	0xe000e100
 8005908:	e000ed00 	.word	0xe000ed00

0800590c <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b08c      	sub	sp, #48	; 0x30
 8005910:	af00      	add	r7, sp, #0
 8005912:	0002      	movs	r2, r0
 8005914:	1dfb      	adds	r3, r7, #7
 8005916:	701a      	strb	r2, [r3, #0]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8005918:	1dfb      	adds	r3, r7, #7
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	2b03      	cmp	r3, #3
 800591e:	d02f      	beq.n	8005980 <BSP_LED_Init+0x74>
 8005920:	dc3a      	bgt.n	8005998 <BSP_LED_Init+0x8c>
 8005922:	2b02      	cmp	r3, #2
 8005924:	d01f      	beq.n	8005966 <BSP_LED_Init+0x5a>
 8005926:	dc37      	bgt.n	8005998 <BSP_LED_Init+0x8c>
 8005928:	2b00      	cmp	r3, #0
 800592a:	d002      	beq.n	8005932 <BSP_LED_Init+0x26>
 800592c:	2b01      	cmp	r3, #1
 800592e:	d00d      	beq.n	800594c <BSP_LED_Init+0x40>
 8005930:	e032      	b.n	8005998 <BSP_LED_Init+0x8c>
 8005932:	4b2a      	ldr	r3, [pc, #168]	; (80059dc <BSP_LED_Init+0xd0>)
 8005934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005936:	4b29      	ldr	r3, [pc, #164]	; (80059dc <BSP_LED_Init+0xd0>)
 8005938:	2102      	movs	r1, #2
 800593a:	430a      	orrs	r2, r1
 800593c:	62da      	str	r2, [r3, #44]	; 0x2c
 800593e:	4b27      	ldr	r3, [pc, #156]	; (80059dc <BSP_LED_Init+0xd0>)
 8005940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005942:	2202      	movs	r2, #2
 8005944:	4013      	ands	r3, r2
 8005946:	61bb      	str	r3, [r7, #24]
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	e025      	b.n	8005998 <BSP_LED_Init+0x8c>
 800594c:	4b23      	ldr	r3, [pc, #140]	; (80059dc <BSP_LED_Init+0xd0>)
 800594e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005950:	4b22      	ldr	r3, [pc, #136]	; (80059dc <BSP_LED_Init+0xd0>)
 8005952:	2101      	movs	r1, #1
 8005954:	430a      	orrs	r2, r1
 8005956:	62da      	str	r2, [r3, #44]	; 0x2c
 8005958:	4b20      	ldr	r3, [pc, #128]	; (80059dc <BSP_LED_Init+0xd0>)
 800595a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800595c:	2201      	movs	r2, #1
 800595e:	4013      	ands	r3, r2
 8005960:	617b      	str	r3, [r7, #20]
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	e018      	b.n	8005998 <BSP_LED_Init+0x8c>
 8005966:	4b1d      	ldr	r3, [pc, #116]	; (80059dc <BSP_LED_Init+0xd0>)
 8005968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800596a:	4b1c      	ldr	r3, [pc, #112]	; (80059dc <BSP_LED_Init+0xd0>)
 800596c:	2102      	movs	r1, #2
 800596e:	430a      	orrs	r2, r1
 8005970:	62da      	str	r2, [r3, #44]	; 0x2c
 8005972:	4b1a      	ldr	r3, [pc, #104]	; (80059dc <BSP_LED_Init+0xd0>)
 8005974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005976:	2202      	movs	r2, #2
 8005978:	4013      	ands	r3, r2
 800597a:	613b      	str	r3, [r7, #16]
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	e00b      	b.n	8005998 <BSP_LED_Init+0x8c>
 8005980:	4b16      	ldr	r3, [pc, #88]	; (80059dc <BSP_LED_Init+0xd0>)
 8005982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005984:	4b15      	ldr	r3, [pc, #84]	; (80059dc <BSP_LED_Init+0xd0>)
 8005986:	2102      	movs	r1, #2
 8005988:	430a      	orrs	r2, r1
 800598a:	62da      	str	r2, [r3, #44]	; 0x2c
 800598c:	4b13      	ldr	r3, [pc, #76]	; (80059dc <BSP_LED_Init+0xd0>)
 800598e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005990:	2202      	movs	r2, #2
 8005992:	4013      	ands	r3, r2
 8005994:	60fb      	str	r3, [r7, #12]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	46c0      	nop			; (mov r8, r8)

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 800599a:	1dfb      	adds	r3, r7, #7
 800599c:	781a      	ldrb	r2, [r3, #0]
 800599e:	4b10      	ldr	r3, [pc, #64]	; (80059e0 <BSP_LED_Init+0xd4>)
 80059a0:	0052      	lsls	r2, r2, #1
 80059a2:	5ad3      	ldrh	r3, [r2, r3]
 80059a4:	001a      	movs	r2, r3
 80059a6:	211c      	movs	r1, #28
 80059a8:	187b      	adds	r3, r7, r1
 80059aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80059ac:	187b      	adds	r3, r7, r1
 80059ae:	2201      	movs	r2, #1
 80059b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059b2:	187b      	adds	r3, r7, r1
 80059b4:	2200      	movs	r2, #0
 80059b6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059b8:	187b      	adds	r3, r7, r1
 80059ba:	2203      	movs	r2, #3
 80059bc:	60da      	str	r2, [r3, #12]

  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 80059be:	1dfb      	adds	r3, r7, #7
 80059c0:	781a      	ldrb	r2, [r3, #0]
 80059c2:	4b08      	ldr	r3, [pc, #32]	; (80059e4 <BSP_LED_Init+0xd8>)
 80059c4:	0092      	lsls	r2, r2, #2
 80059c6:	58d3      	ldr	r3, [r2, r3]
 80059c8:	187a      	adds	r2, r7, r1
 80059ca:	0011      	movs	r1, r2
 80059cc:	0018      	movs	r0, r3
 80059ce:	f001 ffe9 	bl	80079a4 <HAL_GPIO_Init>
}
 80059d2:	46c0      	nop			; (mov r8, r8)
 80059d4:	46bd      	mov	sp, r7
 80059d6:	b00c      	add	sp, #48	; 0x30
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	46c0      	nop			; (mov r8, r8)
 80059dc:	40021000 	.word	0x40021000
 80059e0:	0801f1ec 	.word	0x0801f1ec
 80059e4:	2000004c 	.word	0x2000004c

080059e8 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	0002      	movs	r2, r0
 80059f0:	1dfb      	adds	r3, r7, #7
 80059f2:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80059f4:	1dfb      	adds	r3, r7, #7
 80059f6:	781a      	ldrb	r2, [r3, #0]
 80059f8:	4b07      	ldr	r3, [pc, #28]	; (8005a18 <BSP_LED_On+0x30>)
 80059fa:	0092      	lsls	r2, r2, #2
 80059fc:	58d0      	ldr	r0, [r2, r3]
 80059fe:	1dfb      	adds	r3, r7, #7
 8005a00:	781a      	ldrb	r2, [r3, #0]
 8005a02:	4b06      	ldr	r3, [pc, #24]	; (8005a1c <BSP_LED_On+0x34>)
 8005a04:	0052      	lsls	r2, r2, #1
 8005a06:	5ad3      	ldrh	r3, [r2, r3]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	0019      	movs	r1, r3
 8005a0c:	f002 fa47 	bl	8007e9e <HAL_GPIO_WritePin>
}
 8005a10:	46c0      	nop			; (mov r8, r8)
 8005a12:	46bd      	mov	sp, r7
 8005a14:	b002      	add	sp, #8
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	2000004c 	.word	0x2000004c
 8005a1c:	0801f1ec 	.word	0x0801f1ec

08005a20 <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	0002      	movs	r2, r0
 8005a28:	1dfb      	adds	r3, r7, #7
 8005a2a:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8005a2c:	1dfb      	adds	r3, r7, #7
 8005a2e:	781a      	ldrb	r2, [r3, #0]
 8005a30:	4b07      	ldr	r3, [pc, #28]	; (8005a50 <BSP_LED_Off+0x30>)
 8005a32:	0092      	lsls	r2, r2, #2
 8005a34:	58d0      	ldr	r0, [r2, r3]
 8005a36:	1dfb      	adds	r3, r7, #7
 8005a38:	781a      	ldrb	r2, [r3, #0]
 8005a3a:	4b06      	ldr	r3, [pc, #24]	; (8005a54 <BSP_LED_Off+0x34>)
 8005a3c:	0052      	lsls	r2, r2, #1
 8005a3e:	5ad3      	ldrh	r3, [r2, r3]
 8005a40:	2200      	movs	r2, #0
 8005a42:	0019      	movs	r1, r3
 8005a44:	f002 fa2b 	bl	8007e9e <HAL_GPIO_WritePin>
}
 8005a48:	46c0      	nop			; (mov r8, r8)
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	b002      	add	sp, #8
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	2000004c 	.word	0x2000004c
 8005a54:	0801f1ec 	.word	0x0801f1ec

08005a58 <BSP_LED_Toggle>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b082      	sub	sp, #8
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	0002      	movs	r2, r0
 8005a60:	1dfb      	adds	r3, r7, #7
 8005a62:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8005a64:	1dfb      	adds	r3, r7, #7
 8005a66:	781a      	ldrb	r2, [r3, #0]
 8005a68:	4b07      	ldr	r3, [pc, #28]	; (8005a88 <BSP_LED_Toggle+0x30>)
 8005a6a:	0092      	lsls	r2, r2, #2
 8005a6c:	58d0      	ldr	r0, [r2, r3]
 8005a6e:	1dfb      	adds	r3, r7, #7
 8005a70:	781a      	ldrb	r2, [r3, #0]
 8005a72:	4b06      	ldr	r3, [pc, #24]	; (8005a8c <BSP_LED_Toggle+0x34>)
 8005a74:	0052      	lsls	r2, r2, #1
 8005a76:	5ad3      	ldrh	r3, [r2, r3]
 8005a78:	0019      	movs	r1, r3
 8005a7a:	f002 fa2d 	bl	8007ed8 <HAL_GPIO_TogglePin>
}
 8005a7e:	46c0      	nop			; (mov r8, r8)
 8005a80:	46bd      	mov	sp, r7
 8005a82:	b002      	add	sp, #8
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	46c0      	nop			; (mov r8, r8)
 8005a88:	2000004c 	.word	0x2000004c
 8005a8c:	0801f1ec 	.word	0x0801f1ec

08005a90 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b088      	sub	sp, #32
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	0002      	movs	r2, r0
 8005a98:	1dfb      	adds	r3, r7, #7
 8005a9a:	701a      	strb	r2, [r3, #0]
 8005a9c:	1dbb      	adds	r3, r7, #6
 8005a9e:	1c0a      	adds	r2, r1, #0
 8005aa0:	701a      	strb	r2, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8005aa2:	4b2b      	ldr	r3, [pc, #172]	; (8005b50 <BSP_PB_Init+0xc0>)
 8005aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aa6:	4b2a      	ldr	r3, [pc, #168]	; (8005b50 <BSP_PB_Init+0xc0>)
 8005aa8:	2102      	movs	r1, #2
 8005aaa:	430a      	orrs	r2, r1
 8005aac:	62da      	str	r2, [r3, #44]	; 0x2c
 8005aae:	4b28      	ldr	r3, [pc, #160]	; (8005b50 <BSP_PB_Init+0xc0>)
 8005ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab2:	2202      	movs	r2, #2
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	60bb      	str	r3, [r7, #8]
 8005ab8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005aba:	4b25      	ldr	r3, [pc, #148]	; (8005b50 <BSP_PB_Init+0xc0>)
 8005abc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005abe:	4b24      	ldr	r3, [pc, #144]	; (8005b50 <BSP_PB_Init+0xc0>)
 8005ac0:	2101      	movs	r1, #1
 8005ac2:	430a      	orrs	r2, r1
 8005ac4:	635a      	str	r2, [r3, #52]	; 0x34

  if (ButtonMode == BUTTON_MODE_GPIO)
 8005ac6:	1dbb      	adds	r3, r7, #6
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d117      	bne.n	8005afe <BSP_PB_Init+0x6e>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8005ace:	2304      	movs	r3, #4
 8005ad0:	001a      	movs	r2, r3
 8005ad2:	210c      	movs	r1, #12
 8005ad4:	187b      	adds	r3, r7, r1
 8005ad6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005ad8:	187b      	adds	r3, r7, r1
 8005ada:	2200      	movs	r2, #0
 8005adc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005ade:	187b      	adds	r3, r7, r1
 8005ae0:	2202      	movs	r2, #2
 8005ae2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ae4:	187b      	adds	r3, r7, r1
 8005ae6:	2203      	movs	r2, #3
 8005ae8:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8005aea:	1dfb      	adds	r3, r7, #7
 8005aec:	781a      	ldrb	r2, [r3, #0]
 8005aee:	4b19      	ldr	r3, [pc, #100]	; (8005b54 <BSP_PB_Init+0xc4>)
 8005af0:	0092      	lsls	r2, r2, #2
 8005af2:	58d3      	ldr	r3, [r2, r3]
 8005af4:	187a      	adds	r2, r7, r1
 8005af6:	0011      	movs	r1, r2
 8005af8:	0018      	movs	r0, r3
 8005afa:	f001 ff53 	bl	80079a4 <HAL_GPIO_Init>
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
 8005afe:	1dbb      	adds	r3, r7, #6
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d11f      	bne.n	8005b46 <BSP_PB_Init+0xb6>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8005b06:	2304      	movs	r3, #4
 8005b08:	001a      	movs	r2, r3
 8005b0a:	210c      	movs	r1, #12
 8005b0c:	187b      	adds	r3, r7, r1
 8005b0e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b10:	187b      	adds	r3, r7, r1
 8005b12:	2200      	movs	r2, #0
 8005b14:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005b16:	187b      	adds	r3, r7, r1
 8005b18:	4a0f      	ldr	r2, [pc, #60]	; (8005b58 <BSP_PB_Init+0xc8>)
 8005b1a:	605a      	str	r2, [r3, #4]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8005b1c:	1dfb      	adds	r3, r7, #7
 8005b1e:	781a      	ldrb	r2, [r3, #0]
 8005b20:	4b0c      	ldr	r3, [pc, #48]	; (8005b54 <BSP_PB_Init+0xc4>)
 8005b22:	0092      	lsls	r2, r2, #2
 8005b24:	58d3      	ldr	r3, [r2, r3]
 8005b26:	187a      	adds	r2, r7, r1
 8005b28:	0011      	movs	r1, r2
 8005b2a:	0018      	movs	r0, r3
 8005b2c:	f001 ff3a 	bl	80079a4 <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x03);
 8005b30:	2306      	movs	r3, #6
 8005b32:	b25b      	sxtb	r3, r3
 8005b34:	2103      	movs	r1, #3
 8005b36:	0018      	movs	r0, r3
 8005b38:	f7ff fe7a 	bl	8005830 <__NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8005b3c:	2306      	movs	r3, #6
 8005b3e:	b25b      	sxtb	r3, r3
 8005b40:	0018      	movs	r0, r3
 8005b42:	f001 fa4a 	bl	8006fda <HAL_NVIC_EnableIRQ>
  }
}
 8005b46:	46c0      	nop			; (mov r8, r8)
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	b008      	add	sp, #32
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	46c0      	nop			; (mov r8, r8)
 8005b50:	40021000 	.word	0x40021000
 8005b54:	2000005c 	.word	0x2000005c
 8005b58:	10110000 	.word	0x10110000

08005b5c <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>:
static void CMWX1ZZABZ0XX_RADIO_SPI_IoInit(SPI_HandleTypeDef *spiHandle);
static void CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit(void);

/* Exported functions ---------------------------------------------------------*/
uint32_t CMWX1ZZABZ0XX_RADIO_GetWakeUpTime(void)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	af00      	add	r7, sp, #0
  return  BOARD_WAKEUP_TIME;
 8005b60:	2305      	movs	r3, #5
}
 8005b62:	0018      	movs	r0, r3
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <CMWX1ZZABZ0XX_RADIO_SetXO>:

void CMWX1ZZABZ0XX_RADIO_SetXO(uint8_t state)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	0002      	movs	r2, r0
 8005b70:	1dfb      	adds	r3, r7, #7
 8005b72:	701a      	strb	r2, [r3, #0]

  if (state == SET)
 8005b74:	1dfb      	adds	r3, r7, #7
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d10b      	bne.n	8005b94 <CMWX1ZZABZ0XX_RADIO_SetXO+0x2c>
  {
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_SET);
 8005b7c:	2380      	movs	r3, #128	; 0x80
 8005b7e:	0159      	lsls	r1, r3, #5
 8005b80:	23a0      	movs	r3, #160	; 0xa0
 8005b82:	05db      	lsls	r3, r3, #23
 8005b84:	2201      	movs	r2, #1
 8005b86:	0018      	movs	r0, r3
 8005b88:	f002 f989 	bl	8007e9e <HAL_GPIO_WritePin>

    HAL_Delay(BOARD_WAKEUP_TIME);   //start up time of TCXO
 8005b8c:	2005      	movs	r0, #5
 8005b8e:	f7ff f92c 	bl	8004dea <HAL_Delay>
  }
  else
  {
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_RESET);
  }
}
 8005b92:	e007      	b.n	8005ba4 <CMWX1ZZABZ0XX_RADIO_SetXO+0x3c>
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_RESET);
 8005b94:	2380      	movs	r3, #128	; 0x80
 8005b96:	0159      	lsls	r1, r3, #5
 8005b98:	23a0      	movs	r3, #160	; 0xa0
 8005b9a:	05db      	lsls	r3, r3, #23
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	0018      	movs	r0, r3
 8005ba0:	f002 f97d 	bl	8007e9e <HAL_GPIO_WritePin>
}
 8005ba4:	46c0      	nop			; (mov r8, r8)
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	b002      	add	sp, #8
 8005baa:	bd80      	pop	{r7, pc}

08005bac <CMWX1ZZABZ0XX_RADIO_IoInit>:
void CMWX1ZZABZ0XX_RADIO_IoInit(void)
{
 8005bac:	b590      	push	{r4, r7, lr}
 8005bae:	b0a7      	sub	sp, #156	; 0x9c
 8005bb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct = {0};
 8005bb2:	2480      	movs	r4, #128	; 0x80
 8005bb4:	193b      	adds	r3, r7, r4
 8005bb6:	0018      	movs	r0, r3
 8005bb8:	2314      	movs	r3, #20
 8005bba:	001a      	movs	r2, r3
 8005bbc:	2100      	movs	r1, #0
 8005bbe:	f018 f9f8 	bl	801dfb2 <memset>
  SPI_HandleTypeDef dummy_hspi;

  /* Enable DIO GPIO clock */
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8005bc2:	4b78      	ldr	r3, [pc, #480]	; (8005da4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bc6:	4b77      	ldr	r3, [pc, #476]	; (8005da4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005bc8:	2102      	movs	r1, #2
 8005bca:	430a      	orrs	r2, r1
 8005bcc:	62da      	str	r2, [r3, #44]	; 0x2c
 8005bce:	4b75      	ldr	r3, [pc, #468]	; (8005da4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd2:	2202      	movs	r2, #2
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	627b      	str	r3, [r7, #36]	; 0x24
 8005bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8005bda:	4b72      	ldr	r3, [pc, #456]	; (8005da4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bde:	4b71      	ldr	r3, [pc, #452]	; (8005da4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005be0:	2102      	movs	r1, #2
 8005be2:	430a      	orrs	r2, r1
 8005be4:	62da      	str	r2, [r3, #44]	; 0x2c
 8005be6:	4b6f      	ldr	r3, [pc, #444]	; (8005da4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bea:	2202      	movs	r2, #2
 8005bec:	4013      	ands	r3, r2
 8005bee:	623b      	str	r3, [r7, #32]
 8005bf0:	6a3b      	ldr	r3, [r7, #32]
  RADIO_DIO_2_GPIO_CLK_ENABLE();
 8005bf2:	4b6c      	ldr	r3, [pc, #432]	; (8005da4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bf6:	4b6b      	ldr	r3, [pc, #428]	; (8005da4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005bf8:	2102      	movs	r1, #2
 8005bfa:	430a      	orrs	r2, r1
 8005bfc:	62da      	str	r2, [r3, #44]	; 0x2c
 8005bfe:	4b69      	ldr	r3, [pc, #420]	; (8005da4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c02:	2202      	movs	r2, #2
 8005c04:	4013      	ands	r3, r2
 8005c06:	61fb      	str	r3, [r7, #28]
 8005c08:	69fb      	ldr	r3, [r7, #28]
  RADIO_DIO_3_GPIO_CLK_ENABLE();
 8005c0a:	4b66      	ldr	r3, [pc, #408]	; (8005da4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c0e:	4b65      	ldr	r3, [pc, #404]	; (8005da4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005c10:	2104      	movs	r1, #4
 8005c12:	430a      	orrs	r2, r1
 8005c14:	62da      	str	r2, [r3, #44]	; 0x2c
 8005c16:	4b63      	ldr	r3, [pc, #396]	; (8005da4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1a:	2204      	movs	r2, #4
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	61bb      	str	r3, [r7, #24]
 8005c20:	69bb      	ldr	r3, [r7, #24]
#if( RADIO_DIOn > 5 )
  RADIO_DIO_5_GPIO_CLK_ENABLE();
#endif

  /* DIO IO Init */
  initStruct.Pull = GPIO_PULLDOWN;
 8005c22:	193b      	adds	r3, r7, r4
 8005c24:	2202      	movs	r2, #2
 8005c26:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8005c28:	193b      	adds	r3, r7, r4
 8005c2a:	2203      	movs	r2, #3
 8005c2c:	60da      	str	r2, [r3, #12]

  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8005c2e:	2300      	movs	r3, #0
 8005c30:	2294      	movs	r2, #148	; 0x94
 8005c32:	18ba      	adds	r2, r7, r2
 8005c34:	6013      	str	r3, [r2, #0]
 8005c36:	e020      	b.n	8005c7a <CMWX1ZZABZ0XX_RADIO_IoInit+0xce>
  {
    initStruct.Mode = RADIO_DIO_MODE[i];
 8005c38:	4b5b      	ldr	r3, [pc, #364]	; (8005da8 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1fc>)
 8005c3a:	2194      	movs	r1, #148	; 0x94
 8005c3c:	187a      	adds	r2, r7, r1
 8005c3e:	6812      	ldr	r2, [r2, #0]
 8005c40:	0092      	lsls	r2, r2, #2
 8005c42:	58d2      	ldr	r2, [r2, r3]
 8005c44:	2080      	movs	r0, #128	; 0x80
 8005c46:	183b      	adds	r3, r7, r0
 8005c48:	605a      	str	r2, [r3, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8005c4a:	4b58      	ldr	r3, [pc, #352]	; (8005dac <CMWX1ZZABZ0XX_RADIO_IoInit+0x200>)
 8005c4c:	187a      	adds	r2, r7, r1
 8005c4e:	6812      	ldr	r2, [r2, #0]
 8005c50:	0052      	lsls	r2, r2, #1
 8005c52:	5ad3      	ldrh	r3, [r2, r3]
 8005c54:	001a      	movs	r2, r3
 8005c56:	183b      	adds	r3, r7, r0
 8005c58:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8005c5a:	4b55      	ldr	r3, [pc, #340]	; (8005db0 <CMWX1ZZABZ0XX_RADIO_IoInit+0x204>)
 8005c5c:	000c      	movs	r4, r1
 8005c5e:	187a      	adds	r2, r7, r1
 8005c60:	6812      	ldr	r2, [r2, #0]
 8005c62:	0092      	lsls	r2, r2, #2
 8005c64:	58d3      	ldr	r3, [r2, r3]
 8005c66:	183a      	adds	r2, r7, r0
 8005c68:	0011      	movs	r1, r2
 8005c6a:	0018      	movs	r0, r3
 8005c6c:	f001 fe9a 	bl	80079a4 <HAL_GPIO_Init>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8005c70:	193b      	adds	r3, r7, r4
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	3301      	adds	r3, #1
 8005c76:	193a      	adds	r2, r7, r4
 8005c78:	6013      	str	r3, [r2, #0]
 8005c7a:	2394      	movs	r3, #148	; 0x94
 8005c7c:	18fb      	adds	r3, r7, r3
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2b03      	cmp	r3, #3
 8005c82:	d9d9      	bls.n	8005c38 <CMWX1ZZABZ0XX_RADIO_IoInit+0x8c>
  }


  /* SPI IO Init */
  /* Normally done by the HAL_MSP callback but not for this applic */
  CMWX1ZZABZ0XX_RADIO_SPI_IoInit(&dummy_hspi);
 8005c84:	2328      	movs	r3, #40	; 0x28
 8005c86:	18fb      	adds	r3, r7, r3
 8005c88:	0018      	movs	r0, r3
 8005c8a:	f000 fa07 	bl	800609c <CMWX1ZZABZ0XX_RADIO_SPI_IoInit>

  /* NSS initialization */
  initStruct.Pin = RADIO_NSS_PIN;
 8005c8e:	2480      	movs	r4, #128	; 0x80
 8005c90:	193b      	adds	r3, r7, r4
 8005c92:	2280      	movs	r2, #128	; 0x80
 8005c94:	0212      	lsls	r2, r2, #8
 8005c96:	601a      	str	r2, [r3, #0]
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c98:	193b      	adds	r3, r7, r4
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_PULLUP;
 8005c9e:	193b      	adds	r3, r7, r4
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	609a      	str	r2, [r3, #8]

  /* Enable NSS */
  RADIO_NSS_CLK_ENABLE();
 8005ca4:	4b3f      	ldr	r3, [pc, #252]	; (8005da4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ca8:	4b3e      	ldr	r3, [pc, #248]	; (8005da4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005caa:	2101      	movs	r1, #1
 8005cac:	430a      	orrs	r2, r1
 8005cae:	62da      	str	r2, [r3, #44]	; 0x2c
 8005cb0:	4b3c      	ldr	r3, [pc, #240]	; (8005da4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	617b      	str	r3, [r7, #20]
 8005cba:	697b      	ldr	r3, [r7, #20]
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 8005cbc:	193a      	adds	r2, r7, r4
 8005cbe:	23a0      	movs	r3, #160	; 0xa0
 8005cc0:	05db      	lsls	r3, r3, #23
 8005cc2:	0011      	movs	r1, r2
 8005cc4:	0018      	movs	r0, r3
 8005cc6:	f001 fe6d 	bl	80079a4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 8005cca:	2380      	movs	r3, #128	; 0x80
 8005ccc:	0219      	lsls	r1, r3, #8
 8005cce:	23a0      	movs	r3, #160	; 0xa0
 8005cd0:	05db      	lsls	r3, r3, #23
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	0018      	movs	r0, r3
 8005cd6:	f002 f8e2 	bl	8007e9e <HAL_GPIO_WritePin>

  /* Antenna IO Init */
  RADIO_TCXO_VCC_CLK_ENABLE();
 8005cda:	4b32      	ldr	r3, [pc, #200]	; (8005da4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cde:	4b31      	ldr	r3, [pc, #196]	; (8005da4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005ce0:	2101      	movs	r1, #1
 8005ce2:	430a      	orrs	r2, r1
 8005ce4:	62da      	str	r2, [r3, #44]	; 0x2c
 8005ce6:	4b2f      	ldr	r3, [pc, #188]	; (8005da4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cea:	2201      	movs	r2, #1
 8005cec:	4013      	ands	r3, r2
 8005cee:	613b      	str	r3, [r7, #16]
 8005cf0:	693b      	ldr	r3, [r7, #16]
  RADIO_ANT_SWITCH_CLK_ENABLE_RX();
 8005cf2:	4b2c      	ldr	r3, [pc, #176]	; (8005da4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cf6:	4b2b      	ldr	r3, [pc, #172]	; (8005da4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005cf8:	2101      	movs	r1, #1
 8005cfa:	430a      	orrs	r2, r1
 8005cfc:	62da      	str	r2, [r3, #44]	; 0x2c
 8005cfe:	4b29      	ldr	r3, [pc, #164]	; (8005da4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d02:	2201      	movs	r2, #1
 8005d04:	4013      	ands	r3, r2
 8005d06:	60fb      	str	r3, [r7, #12]
 8005d08:	68fb      	ldr	r3, [r7, #12]
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_BOOST();
 8005d0a:	4b26      	ldr	r3, [pc, #152]	; (8005da4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d0e:	4b25      	ldr	r3, [pc, #148]	; (8005da4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005d10:	2104      	movs	r1, #4
 8005d12:	430a      	orrs	r2, r1
 8005d14:	62da      	str	r2, [r3, #44]	; 0x2c
 8005d16:	4b23      	ldr	r3, [pc, #140]	; (8005da4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d1a:	2204      	movs	r2, #4
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	60bb      	str	r3, [r7, #8]
 8005d20:	68bb      	ldr	r3, [r7, #8]
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_RFO();
 8005d22:	4b20      	ldr	r3, [pc, #128]	; (8005da4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d26:	4b1f      	ldr	r3, [pc, #124]	; (8005da4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005d28:	2104      	movs	r1, #4
 8005d2a:	430a      	orrs	r2, r1
 8005d2c:	62da      	str	r2, [r3, #44]	; 0x2c
 8005d2e:	4b1d      	ldr	r3, [pc, #116]	; (8005da4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1f8>)
 8005d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d32:	2204      	movs	r2, #4
 8005d34:	4013      	ands	r3, r2
 8005d36:	607b      	str	r3, [r7, #4]
 8005d38:	687b      	ldr	r3, [r7, #4]


  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005d3a:	193b      	adds	r3, r7, r4
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_NOPULL;
 8005d40:	193b      	adds	r3, r7, r4
 8005d42:	2200      	movs	r2, #0
 8005d44:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8005d46:	193b      	adds	r3, r7, r4
 8005d48:	2203      	movs	r2, #3
 8005d4a:	60da      	str	r2, [r3, #12]

  initStruct.Pin = RADIO_TCXO_VCC_PIN;
 8005d4c:	193b      	adds	r3, r7, r4
 8005d4e:	2280      	movs	r2, #128	; 0x80
 8005d50:	0152      	lsls	r2, r2, #5
 8005d52:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_TCXO_VCC_PORT, &initStruct);
 8005d54:	193a      	adds	r2, r7, r4
 8005d56:	23a0      	movs	r3, #160	; 0xa0
 8005d58:	05db      	lsls	r3, r3, #23
 8005d5a:	0011      	movs	r1, r2
 8005d5c:	0018      	movs	r0, r3
 8005d5e:	f001 fe21 	bl	80079a4 <HAL_GPIO_Init>

  initStruct.Pin = RADIO_ANT_SWITCH_PIN_RX;
 8005d62:	193b      	adds	r3, r7, r4
 8005d64:	2202      	movs	r2, #2
 8005d66:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_RX, &initStruct);
 8005d68:	193a      	adds	r2, r7, r4
 8005d6a:	23a0      	movs	r3, #160	; 0xa0
 8005d6c:	05db      	lsls	r3, r3, #23
 8005d6e:	0011      	movs	r1, r2
 8005d70:	0018      	movs	r0, r3
 8005d72:	f001 fe17 	bl	80079a4 <HAL_GPIO_Init>

  initStruct.Pin = RADIO_ANT_SWITCH_PIN_TX_BOOST;
 8005d76:	193b      	adds	r3, r7, r4
 8005d78:	2202      	movs	r2, #2
 8005d7a:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_BOOST, &initStruct);
 8005d7c:	193b      	adds	r3, r7, r4
 8005d7e:	4a0d      	ldr	r2, [pc, #52]	; (8005db4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x208>)
 8005d80:	0019      	movs	r1, r3
 8005d82:	0010      	movs	r0, r2
 8005d84:	f001 fe0e 	bl	80079a4 <HAL_GPIO_Init>

  initStruct.Pin = RADIO_ANT_SWITCH_PIN_TX_RFO;
 8005d88:	193b      	adds	r3, r7, r4
 8005d8a:	2204      	movs	r2, #4
 8005d8c:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_RFO, &initStruct);
 8005d8e:	193b      	adds	r3, r7, r4
 8005d90:	4a08      	ldr	r2, [pc, #32]	; (8005db4 <CMWX1ZZABZ0XX_RADIO_IoInit+0x208>)
 8005d92:	0019      	movs	r1, r3
 8005d94:	0010      	movs	r0, r2
 8005d96:	f001 fe05 	bl	80079a4 <HAL_GPIO_Init>
}
 8005d9a:	46c0      	nop			; (mov r8, r8)
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	b027      	add	sp, #156	; 0x9c
 8005da0:	bd90      	pop	{r4, r7, pc}
 8005da2:	46c0      	nop			; (mov r8, r8)
 8005da4:	40021000 	.word	0x40021000
 8005da8:	0801f228 	.word	0x0801f228
 8005dac:	0801f220 	.word	0x0801f220
 8005db0:	20000060 	.word	0x20000060
 8005db4:	50000800 	.word	0x50000800

08005db8 <CMWX1ZZABZ0XX_RADIO_IoDeInit>:

void CMWX1ZZABZ0XX_RADIO_IoDeInit(void)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b086      	sub	sp, #24
 8005dbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct = {0};
 8005dbe:	003b      	movs	r3, r7
 8005dc0:	0018      	movs	r0, r3
 8005dc2:	2314      	movs	r3, #20
 8005dc4:	001a      	movs	r2, r3
 8005dc6:	2100      	movs	r1, #0
 8005dc8:	f018 f8f3 	bl	801dfb2 <memset>

  /* DIO IO DeInit */

  initStruct.Pull = GPIO_PULLDOWN;
 8005dcc:	003b      	movs	r3, r7
 8005dce:	2202      	movs	r2, #2
 8005dd0:	609a      	str	r2, [r3, #8]

  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	617b      	str	r3, [r7, #20]
 8005dd6:	e018      	b.n	8005e0a <CMWX1ZZABZ0XX_RADIO_IoDeInit+0x52>
  {
    initStruct.Mode = RADIO_DIO_MODE[i];
 8005dd8:	4b10      	ldr	r3, [pc, #64]	; (8005e1c <CMWX1ZZABZ0XX_RADIO_IoDeInit+0x64>)
 8005dda:	697a      	ldr	r2, [r7, #20]
 8005ddc:	0092      	lsls	r2, r2, #2
 8005dde:	58d2      	ldr	r2, [r2, r3]
 8005de0:	003b      	movs	r3, r7
 8005de2:	605a      	str	r2, [r3, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8005de4:	4b0e      	ldr	r3, [pc, #56]	; (8005e20 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0x68>)
 8005de6:	697a      	ldr	r2, [r7, #20]
 8005de8:	0052      	lsls	r2, r2, #1
 8005dea:	5ad3      	ldrh	r3, [r2, r3]
 8005dec:	001a      	movs	r2, r3
 8005dee:	003b      	movs	r3, r7
 8005df0:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8005df2:	4b0c      	ldr	r3, [pc, #48]	; (8005e24 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0x6c>)
 8005df4:	697a      	ldr	r2, [r7, #20]
 8005df6:	0092      	lsls	r2, r2, #2
 8005df8:	58d3      	ldr	r3, [r2, r3]
 8005dfa:	003a      	movs	r2, r7
 8005dfc:	0011      	movs	r1, r2
 8005dfe:	0018      	movs	r0, r3
 8005e00:	f001 fdd0 	bl	80079a4 <HAL_GPIO_Init>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	3301      	adds	r3, #1
 8005e08:	617b      	str	r3, [r7, #20]
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	2b03      	cmp	r3, #3
 8005e0e:	d9e3      	bls.n	8005dd8 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0x20>
  }

  /* SPI IO DeInit */
  CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit();
 8005e10:	f000 f9a4 	bl	800615c <CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit>
  /* NSS IO DeInit is not done */

  /* Antenna IO DeInit is not done */

  /* Reset IO DeInit is not done */
}
 8005e14:	46c0      	nop			; (mov r8, r8)
 8005e16:	46bd      	mov	sp, r7
 8005e18:	b006      	add	sp, #24
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	0801f228 	.word	0x0801f228
 8005e20:	0801f220 	.word	0x0801f220
 8005e24:	20000060 	.word	0x20000060

08005e28 <CMWX1ZZABZ0XX_RADIO_IoIrqInit>:

void CMWX1ZZABZ0XX_RADIO_IoIrqInit(DioIrqHandler **irqHandlers)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b086      	sub	sp, #24
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e30:	f3ef 8310 	mrs	r3, PRIMASK
 8005e34:	60fb      	str	r3, [r7, #12]
  return(result);
 8005e36:	68fb      	ldr	r3, [r7, #12]
  CRITICAL_SECTION_BEGIN();
 8005e38:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005e3a:	b672      	cpsid	i
}
 8005e3c:	46c0      	nop			; (mov r8, r8)
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8005e3e:	2300      	movs	r3, #0
 8005e40:	617b      	str	r3, [r7, #20]
 8005e42:	e02f      	b.n	8005ea4 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x7c>
  {
    HAL_EXTI_GetHandle(&hRADIO_DIO_exti[i], RADIO_DIO_EXTI_LINE[i]);
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	00da      	lsls	r2, r3, #3
 8005e48:	4b1d      	ldr	r3, [pc, #116]	; (8005ec0 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x98>)
 8005e4a:	18d0      	adds	r0, r2, r3
 8005e4c:	4b1d      	ldr	r3, [pc, #116]	; (8005ec4 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x9c>)
 8005e4e:	697a      	ldr	r2, [r7, #20]
 8005e50:	0092      	lsls	r2, r2, #2
 8005e52:	58d3      	ldr	r3, [r2, r3]
 8005e54:	0019      	movs	r1, r3
 8005e56:	f001 fba1 	bl	800759c <HAL_EXTI_GetHandle>
    HAL_EXTI_RegisterCallback(&hRADIO_DIO_exti[i], HAL_EXTI_COMMON_CB_ID, irqHandlers[i]);
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	00da      	lsls	r2, r3, #3
 8005e5e:	4b18      	ldr	r3, [pc, #96]	; (8005ec0 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x98>)
 8005e60:	18d0      	adds	r0, r2, r3
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	18d3      	adds	r3, r2, r3
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	001a      	movs	r2, r3
 8005e6e:	2100      	movs	r1, #0
 8005e70:	f001 fb73 	bl	800755a <HAL_EXTI_RegisterCallback>
    HAL_NVIC_SetPriority(RADIO_DIO_IRQn[i], RADIO_DIO_IT_PRIO[i], 0x00);
 8005e74:	4a14      	ldr	r2, [pc, #80]	; (8005ec8 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0xa0>)
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	18d3      	adds	r3, r2, r3
 8005e7a:	2000      	movs	r0, #0
 8005e7c:	5618      	ldrsb	r0, [r3, r0]
 8005e7e:	4b13      	ldr	r3, [pc, #76]	; (8005ecc <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0xa4>)
 8005e80:	697a      	ldr	r2, [r7, #20]
 8005e82:	0092      	lsls	r2, r2, #2
 8005e84:	58d3      	ldr	r3, [r2, r3]
 8005e86:	2200      	movs	r2, #0
 8005e88:	0019      	movs	r1, r3
 8005e8a:	f001 f891 	bl	8006fb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RADIO_DIO_IRQn[i]);
 8005e8e:	4a0e      	ldr	r2, [pc, #56]	; (8005ec8 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0xa0>)
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	18d3      	adds	r3, r2, r3
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	b25b      	sxtb	r3, r3
 8005e98:	0018      	movs	r0, r3
 8005e9a:	f001 f89e 	bl	8006fda <HAL_NVIC_EnableIRQ>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	617b      	str	r3, [r7, #20]
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	2b03      	cmp	r3, #3
 8005ea8:	d9cc      	bls.n	8005e44 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x1c>
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	f383 8810 	msr	PRIMASK, r3
}
 8005eb4:	46c0      	nop			; (mov r8, r8)
  }
  CRITICAL_SECTION_END();
}
 8005eb6:	46c0      	nop			; (mov r8, r8)
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	b006      	add	sp, #24
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	46c0      	nop			; (mov r8, r8)
 8005ec0:	200016fc 	.word	0x200016fc
 8005ec4:	0801f1fc 	.word	0x0801f1fc
 8005ec8:	0801f21c 	.word	0x0801f21c
 8005ecc:	0801f20c 	.word	0x0801f20c

08005ed0 <CMWX1ZZABZ0XX_RADIO_GetPaSelect>:
{
  HAL_EXTI_IRQHandler(&hRADIO_DIO_exti[DIO]);
}

TxConfig_TypeDef CMWX1ZZABZ0XX_RADIO_GetPaSelect(uint32_t channel)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  return CONF_RFO_LP_HP;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	0018      	movs	r0, r3
 8005edc:	46bd      	mov	sp, r7
 8005ede:	b002      	add	sp, #8
 8005ee0:	bd80      	pop	{r7, pc}
	...

08005ee4 <CMWX1ZZABZ0XX_RADIO_SetAntSw>:



void CMWX1ZZABZ0XX_RADIO_SetAntSw(RfSw_TypeDef state)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	0002      	movs	r2, r0
 8005eec:	1dfb      	adds	r3, r7, #7
 8005eee:	701a      	strb	r2, [r3, #0]

  switch (state)
 8005ef0:	1dfb      	adds	r3, r7, #7
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	2b04      	cmp	r3, #4
 8005ef6:	d82e      	bhi.n	8005f56 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x72>
 8005ef8:	009a      	lsls	r2, r3, #2
 8005efa:	4b23      	ldr	r3, [pc, #140]	; (8005f88 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa4>)
 8005efc:	18d3      	adds	r3, r2, r3
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	469f      	mov	pc, r3
  {
    case RFSW_RX:
    {
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, GPIO_PIN_SET);
 8005f02:	23a0      	movs	r3, #160	; 0xa0
 8005f04:	05db      	lsls	r3, r3, #23
 8005f06:	2201      	movs	r2, #1
 8005f08:	2102      	movs	r1, #2
 8005f0a:	0018      	movs	r0, r3
 8005f0c:	f001 ffc7 	bl	8007e9e <HAL_GPIO_WritePin>
      break;
 8005f10:	e036      	b.n	8005f80 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x9c>
    }
    case RFSW_RFO_LP:
    {
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, GPIO_PIN_SET);
 8005f12:	4b1e      	ldr	r3, [pc, #120]	; (8005f8c <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 8005f14:	2201      	movs	r2, #1
 8005f16:	2104      	movs	r1, #4
 8005f18:	0018      	movs	r0, r3
 8005f1a:	f001 ffc0 	bl	8007e9e <HAL_GPIO_WritePin>
      break;
 8005f1e:	e02f      	b.n	8005f80 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x9c>
    }
    case RFSW_RFO_HP:
    {
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_SET);
 8005f20:	4b1a      	ldr	r3, [pc, #104]	; (8005f8c <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 8005f22:	2201      	movs	r2, #1
 8005f24:	2102      	movs	r1, #2
 8005f26:	0018      	movs	r0, r3
 8005f28:	f001 ffb9 	bl	8007e9e <HAL_GPIO_WritePin>
      break;
 8005f2c:	e028      	b.n	8005f80 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x9c>
    case RFSW_RFO_LF:
    {
      break;
    }
    case RFSW_OFF:
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, GPIO_PIN_RESET);
 8005f2e:	23a0      	movs	r3, #160	; 0xa0
 8005f30:	05db      	lsls	r3, r3, #23
 8005f32:	2200      	movs	r2, #0
 8005f34:	2102      	movs	r1, #2
 8005f36:	0018      	movs	r0, r3
 8005f38:	f001 ffb1 	bl	8007e9e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, GPIO_PIN_RESET);
 8005f3c:	4b13      	ldr	r3, [pc, #76]	; (8005f8c <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 8005f3e:	2200      	movs	r2, #0
 8005f40:	2104      	movs	r1, #4
 8005f42:	0018      	movs	r0, r3
 8005f44:	f001 ffab 	bl	8007e9e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 8005f48:	4b10      	ldr	r3, [pc, #64]	; (8005f8c <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	2102      	movs	r1, #2
 8005f4e:	0018      	movs	r0, r3
 8005f50:	f001 ffa5 	bl	8007e9e <HAL_GPIO_WritePin>
      break;
 8005f54:	e014      	b.n	8005f80 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x9c>
    default:
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, GPIO_PIN_RESET);
 8005f56:	23a0      	movs	r3, #160	; 0xa0
 8005f58:	05db      	lsls	r3, r3, #23
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	2102      	movs	r1, #2
 8005f5e:	0018      	movs	r0, r3
 8005f60:	f001 ff9d 	bl	8007e9e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, GPIO_PIN_RESET);
 8005f64:	4b09      	ldr	r3, [pc, #36]	; (8005f8c <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 8005f66:	2200      	movs	r2, #0
 8005f68:	2104      	movs	r1, #4
 8005f6a:	0018      	movs	r0, r3
 8005f6c:	f001 ff97 	bl	8007e9e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 8005f70:	4b06      	ldr	r3, [pc, #24]	; (8005f8c <CMWX1ZZABZ0XX_RADIO_SetAntSw+0xa8>)
 8005f72:	2200      	movs	r2, #0
 8005f74:	2102      	movs	r1, #2
 8005f76:	0018      	movs	r0, r3
 8005f78:	f001 ff91 	bl	8007e9e <HAL_GPIO_WritePin>

      break;
 8005f7c:	e000      	b.n	8005f80 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x9c>
      break;
 8005f7e:	46c0      	nop			; (mov r8, r8)
  }
}
 8005f80:	46c0      	nop			; (mov r8, r8)
 8005f82:	46bd      	mov	sp, r7
 8005f84:	b002      	add	sp, #8
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	0801f238 	.word	0x0801f238
 8005f8c:	50000800 	.word	0x50000800

08005f90 <CMWX1ZZABZ0XX_RADIO_CheckRfFrequency>:

bool CMWX1ZZABZ0XX_RADIO_CheckRfFrequency(uint32_t frequency)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b082      	sub	sp, #8
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  // Implement check. Currently all frequencies are supported
  return true;
 8005f98:	2301      	movs	r3, #1
}
 8005f9a:	0018      	movs	r0, r3
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	b002      	add	sp, #8
 8005fa0:	bd80      	pop	{r7, pc}
	...

08005fa4 <CMWX1ZZABZ0XX_RADIO_Reset>:

void CMWX1ZZABZ0XX_RADIO_Reset(void)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b086      	sub	sp, #24
 8005fa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct = { 0 };
 8005faa:	1d3b      	adds	r3, r7, #4
 8005fac:	0018      	movs	r0, r3
 8005fae:	2314      	movs	r3, #20
 8005fb0:	001a      	movs	r2, r3
 8005fb2:	2100      	movs	r1, #0
 8005fb4:	f017 fffd 	bl	801dfb2 <memset>

  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005fb8:	1d3b      	adds	r3, r7, #4
 8005fba:	2201      	movs	r2, #1
 8005fbc:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_NOPULL;
 8005fbe:	1d3b      	adds	r3, r7, #4
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8005fc4:	1d3b      	adds	r3, r7, #4
 8005fc6:	2203      	movs	r2, #3
 8005fc8:	60da      	str	r2, [r3, #12]
  initStruct.Pin = RADIO_RESET_PIN;
 8005fca:	1d3b      	adds	r3, r7, #4
 8005fcc:	2201      	movs	r2, #1
 8005fce:	601a      	str	r2, [r3, #0]

  // Set RESET pin to 0
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8005fd0:	1d3b      	adds	r3, r7, #4
 8005fd2:	4a0f      	ldr	r2, [pc, #60]	; (8006010 <CMWX1ZZABZ0XX_RADIO_Reset+0x6c>)
 8005fd4:	0019      	movs	r1, r3
 8005fd6:	0010      	movs	r0, r2
 8005fd8:	f001 fce4 	bl	80079a4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_RESET_PORT, RADIO_RESET_PIN, GPIO_PIN_RESET);
 8005fdc:	4b0c      	ldr	r3, [pc, #48]	; (8006010 <CMWX1ZZABZ0XX_RADIO_Reset+0x6c>)
 8005fde:	2200      	movs	r2, #0
 8005fe0:	2101      	movs	r1, #1
 8005fe2:	0018      	movs	r0, r3
 8005fe4:	f001 ff5b 	bl	8007e9e <HAL_GPIO_WritePin>

  // Wait 1 ms
  HAL_Delay(1);
 8005fe8:	2001      	movs	r0, #1
 8005fea:	f7fe fefe 	bl	8004dea <HAL_Delay>

  // Configure RESET as input
  initStruct.Mode = GPIO_NOPULL;
 8005fee:	1d3b      	adds	r3, r7, #4
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	605a      	str	r2, [r3, #4]
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8005ff4:	1d3b      	adds	r3, r7, #4
 8005ff6:	4a06      	ldr	r2, [pc, #24]	; (8006010 <CMWX1ZZABZ0XX_RADIO_Reset+0x6c>)
 8005ff8:	0019      	movs	r1, r3
 8005ffa:	0010      	movs	r0, r2
 8005ffc:	f001 fcd2 	bl	80079a4 <HAL_GPIO_Init>

  // Wait 6 ms
  HAL_Delay(6);
 8006000:	2006      	movs	r0, #6
 8006002:	f7fe fef2 	bl	8004dea <HAL_Delay>
}
 8006006:	46c0      	nop			; (mov r8, r8)
 8006008:	46bd      	mov	sp, r7
 800600a:	b006      	add	sp, #24
 800600c:	bd80      	pop	{r7, pc}
 800600e:	46c0      	nop			; (mov r8, r8)
 8006010:	50000800 	.word	0x50000800

08006014 <CMWX1ZZABZ0XX_RADIO_Bus_Init>:

/* Bus mapping to SPI */

void CMWX1ZZABZ0XX_RADIO_Bus_Init(void)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	af00      	add	r7, sp, #0
  RADIO_SPI_Init();
 8006018:	f7ff fa34 	bl	8005484 <BSP_SPI1_Init>
}
 800601c:	46c0      	nop			; (mov r8, r8)
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}

08006022 <CMWX1ZZABZ0XX_RADIO_SendRecv>:
  * @brief  Send Receive data via SPI
  * @param  Data to send
  * @retval Received data
  */
uint16_t CMWX1ZZABZ0XX_RADIO_SendRecv(uint16_t txData)
{
 8006022:	b590      	push	{r4, r7, lr}
 8006024:	b085      	sub	sp, #20
 8006026:	af00      	add	r7, sp, #0
 8006028:	0002      	movs	r2, r0
 800602a:	1dbb      	adds	r3, r7, #6
 800602c:	801a      	strh	r2, [r3, #0]
  uint16_t rxData ;

  /*RADIO_SPI_SendRecv(( uint8_t * ) &txData, ( uint8_t* ) &rxData, 1);*/
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 800602e:	240e      	movs	r4, #14
 8006030:	1939      	adds	r1, r7, r4
 8006032:	1dbb      	adds	r3, r7, #6
 8006034:	2201      	movs	r2, #1
 8006036:	0018      	movs	r0, r3
 8006038:	f7ff fa48 	bl	80054cc <BSP_SPI1_SendRecv>

  return rxData;
 800603c:	193b      	adds	r3, r7, r4
 800603e:	881b      	ldrh	r3, [r3, #0]
}
 8006040:	0018      	movs	r0, r3
 8006042:	46bd      	mov	sp, r7
 8006044:	b005      	add	sp, #20
 8006046:	bd90      	pop	{r4, r7, pc}

08006048 <CMWX1ZZABZ0XX_RADIO_ChipSelect>:

void CMWX1ZZABZ0XX_RADIO_ChipSelect(int32_t state)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b082      	sub	sp, #8
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  if (state == 0)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d108      	bne.n	8006068 <CMWX1ZZABZ0XX_RADIO_ChipSelect+0x20>
  {
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_RESET);
 8006056:	2380      	movs	r3, #128	; 0x80
 8006058:	0219      	lsls	r1, r3, #8
 800605a:	23a0      	movs	r3, #160	; 0xa0
 800605c:	05db      	lsls	r3, r3, #23
 800605e:	2200      	movs	r2, #0
 8006060:	0018      	movs	r0, r3
 8006062:	f001 ff1c 	bl	8007e9e <HAL_GPIO_WritePin>
  }
  else
  {
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
  }
}
 8006066:	e007      	b.n	8006078 <CMWX1ZZABZ0XX_RADIO_ChipSelect+0x30>
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 8006068:	2380      	movs	r3, #128	; 0x80
 800606a:	0219      	lsls	r1, r3, #8
 800606c:	23a0      	movs	r3, #160	; 0xa0
 800606e:	05db      	lsls	r3, r3, #23
 8006070:	2201      	movs	r2, #1
 8006072:	0018      	movs	r0, r3
 8006074:	f001 ff13 	bl	8007e9e <HAL_GPIO_WritePin>
}
 8006078:	46c0      	nop			; (mov r8, r8)
 800607a:	46bd      	mov	sp, r7
 800607c:	b002      	add	sp, #8
 800607e:	bd80      	pop	{r7, pc}

08006080 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>:

uint32_t CMWX1ZZABZ0XX_RADIO_GetDio1PinState(void)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(RADIO_DIO_1_PORT, RADIO_DIO_1_PIN);
 8006084:	4b04      	ldr	r3, [pc, #16]	; (8006098 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState+0x18>)
 8006086:	2102      	movs	r1, #2
 8006088:	0018      	movs	r0, r3
 800608a:	f001 feeb 	bl	8007e64 <HAL_GPIO_ReadPin>
 800608e:	0003      	movs	r3, r0
}
 8006090:	0018      	movs	r0, r3
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	46c0      	nop			; (mov r8, r8)
 8006098:	50000400 	.word	0x50000400

0800609c <CMWX1ZZABZ0XX_RADIO_SPI_IoInit>:
  * @brief  Initializes SPI MSP.
  * @param  hspi  SPI handler
  * @retval None
*/
static void CMWX1ZZABZ0XX_RADIO_SPI_IoInit(SPI_HandleTypeDef *spiHandle)
{
 800609c:	b590      	push	{r4, r7, lr}
 800609e:	b08b      	sub	sp, #44	; 0x2c
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /* Enable Peripheral clock */
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 80060a4:	4b2b      	ldr	r3, [pc, #172]	; (8006154 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 80060a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060a8:	4b2a      	ldr	r3, [pc, #168]	; (8006154 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 80060aa:	2102      	movs	r1, #2
 80060ac:	430a      	orrs	r2, r1
 80060ae:	62da      	str	r2, [r3, #44]	; 0x2c
 80060b0:	4b28      	ldr	r3, [pc, #160]	; (8006154 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 80060b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b4:	2202      	movs	r2, #2
 80060b6:	4013      	ands	r3, r2
 80060b8:	613b      	str	r3, [r7, #16]
 80060ba:	693b      	ldr	r3, [r7, #16]
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 80060bc:	4b25      	ldr	r3, [pc, #148]	; (8006154 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 80060be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060c0:	4b24      	ldr	r3, [pc, #144]	; (8006154 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 80060c2:	2101      	movs	r1, #1
 80060c4:	430a      	orrs	r2, r1
 80060c6:	62da      	str	r2, [r3, #44]	; 0x2c
 80060c8:	4b22      	ldr	r3, [pc, #136]	; (8006154 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 80060ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060cc:	2201      	movs	r2, #1
 80060ce:	4013      	ands	r3, r2
 80060d0:	60fb      	str	r3, [r7, #12]
 80060d2:	68fb      	ldr	r3, [r7, #12]
  RADIO_SPI_MISO_GPIO_CLK_ENABLE();
 80060d4:	4b1f      	ldr	r3, [pc, #124]	; (8006154 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 80060d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060d8:	4b1e      	ldr	r3, [pc, #120]	; (8006154 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 80060da:	2101      	movs	r1, #1
 80060dc:	430a      	orrs	r2, r1
 80060de:	62da      	str	r2, [r3, #44]	; 0x2c
 80060e0:	4b1c      	ldr	r3, [pc, #112]	; (8006154 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xb8>)
 80060e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e4:	2201      	movs	r2, #1
 80060e6:	4013      	ands	r3, r2
 80060e8:	60bb      	str	r3, [r7, #8]
 80060ea:	68bb      	ldr	r3, [r7, #8]
  /**SPI1 GPIO Configuration
  PA5     ------> SPI1_SCK
  PA6     ------> SPI1_MISO
  PA7     ------> SPI1_MOSI
    */
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060ec:	2414      	movs	r4, #20
 80060ee:	193b      	adds	r3, r7, r4
 80060f0:	2202      	movs	r2, #2
 80060f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80060f4:	193b      	adds	r3, r7, r4
 80060f6:	2202      	movs	r2, #2
 80060f8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060fa:	193b      	adds	r3, r7, r4
 80060fc:	2203      	movs	r2, #3
 80060fe:	60da      	str	r2, [r3, #12]

  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
 8006100:	193b      	adds	r3, r7, r4
 8006102:	2200      	movs	r2, #0
 8006104:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8006106:	193b      	adds	r3, r7, r4
 8006108:	2280      	movs	r2, #128	; 0x80
 800610a:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800610c:	193a      	adds	r2, r7, r4
 800610e:	23a0      	movs	r3, #160	; 0xa0
 8006110:	05db      	lsls	r3, r3, #23
 8006112:	0011      	movs	r1, r2
 8006114:	0018      	movs	r0, r3
 8006116:	f001 fc45 	bl	80079a4 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_MISO_GPIO_AF;
 800611a:	193b      	adds	r3, r7, r4
 800611c:	2200      	movs	r2, #0
 800611e:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 8006120:	193b      	adds	r3, r7, r4
 8006122:	2240      	movs	r2, #64	; 0x40
 8006124:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8006126:	193a      	adds	r2, r7, r4
 8006128:	23a0      	movs	r3, #160	; 0xa0
 800612a:	05db      	lsls	r3, r3, #23
 800612c:	0011      	movs	r1, r2
 800612e:	0018      	movs	r0, r3
 8006130:	f001 fc38 	bl	80079a4 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_SCK_GPIO_AF;
 8006134:	193b      	adds	r3, r7, r4
 8006136:	2200      	movs	r2, #0
 8006138:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 800613a:	193b      	adds	r3, r7, r4
 800613c:	2208      	movs	r2, #8
 800613e:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8006140:	193b      	adds	r3, r7, r4
 8006142:	4a05      	ldr	r2, [pc, #20]	; (8006158 <CMWX1ZZABZ0XX_RADIO_SPI_IoInit+0xbc>)
 8006144:	0019      	movs	r1, r3
 8006146:	0010      	movs	r0, r2
 8006148:	f001 fc2c 	bl	80079a4 <HAL_GPIO_Init>
}
 800614c:	46c0      	nop			; (mov r8, r8)
 800614e:	46bd      	mov	sp, r7
 8006150:	b00b      	add	sp, #44	; 0x2c
 8006152:	bd90      	pop	{r4, r7, pc}
 8006154:	40021000 	.word	0x40021000
 8006158:	50000400 	.word	0x50000400

0800615c <CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit>:
  * @brief  DeInitializes SPI MSP.
  * @param  hspi  SPI handler
  * @retval None
  */
static void CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit(void)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b086      	sub	sp, #24
 8006160:	af00      	add	r7, sp, #0

  /* DeInitialize Peripheral GPIOs */
  /* Instead of using HAL_GPIO_DeInit() which set ANALOG mode
     it's preferred to set in OUTPUT_PP mode, with the pins set to 0 */

  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006162:	1d3b      	adds	r3, r7, #4
 8006164:	2201      	movs	r2, #1
 8006166:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006168:	1d3b      	adds	r3, r7, #4
 800616a:	2202      	movs	r2, #2
 800616c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 800616e:	1d3b      	adds	r3, r7, #4
 8006170:	2280      	movs	r2, #128	; 0x80
 8006172:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8006174:	1d3a      	adds	r2, r7, #4
 8006176:	23a0      	movs	r3, #160	; 0xa0
 8006178:	05db      	lsls	r3, r3, #23
 800617a:	0011      	movs	r1, r2
 800617c:	0018      	movs	r0, r3
 800617e:	f001 fc11 	bl	80079a4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 8006182:	1d3b      	adds	r3, r7, #4
 8006184:	2240      	movs	r2, #64	; 0x40
 8006186:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8006188:	1d3a      	adds	r2, r7, #4
 800618a:	23a0      	movs	r3, #160	; 0xa0
 800618c:	05db      	lsls	r3, r3, #23
 800618e:	0011      	movs	r1, r2
 8006190:	0018      	movs	r0, r3
 8006192:	f001 fc07 	bl	80079a4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 8006196:	1d3b      	adds	r3, r7, #4
 8006198:	2208      	movs	r2, #8
 800619a:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 800619c:	1d3b      	adds	r3, r7, #4
 800619e:	4a0e      	ldr	r2, [pc, #56]	; (80061d8 <CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit+0x7c>)
 80061a0:	0019      	movs	r1, r3
 80061a2:	0010      	movs	r0, r2
 80061a4:	f001 fbfe 	bl	80079a4 <HAL_GPIO_Init>


  HAL_GPIO_WritePin(RADIO_SPI_MOSI_GPIO_PORT, RADIO_SPI_MOSI_GPIO_PIN, GPIO_PIN_RESET);
 80061a8:	23a0      	movs	r3, #160	; 0xa0
 80061aa:	05db      	lsls	r3, r3, #23
 80061ac:	2200      	movs	r2, #0
 80061ae:	2180      	movs	r1, #128	; 0x80
 80061b0:	0018      	movs	r0, r3
 80061b2:	f001 fe74 	bl	8007e9e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_MISO_GPIO_PORT, RADIO_SPI_MISO_GPIO_PIN, GPIO_PIN_RESET);
 80061b6:	23a0      	movs	r3, #160	; 0xa0
 80061b8:	05db      	lsls	r3, r3, #23
 80061ba:	2200      	movs	r2, #0
 80061bc:	2140      	movs	r1, #64	; 0x40
 80061be:	0018      	movs	r0, r3
 80061c0:	f001 fe6d 	bl	8007e9e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_SCK_GPIO_PORT, RADIO_SPI_SCK_GPIO_PIN, GPIO_PIN_RESET);
 80061c4:	4b04      	ldr	r3, [pc, #16]	; (80061d8 <CMWX1ZZABZ0XX_RADIO_SPI_IoDeInit+0x7c>)
 80061c6:	2200      	movs	r2, #0
 80061c8:	2108      	movs	r1, #8
 80061ca:	0018      	movs	r0, r3
 80061cc:	f001 fe67 	bl	8007e9e <HAL_GPIO_WritePin>

}
 80061d0:	46c0      	nop			; (mov r8, r8)
 80061d2:	46bd      	mov	sp, r7
 80061d4:	b006      	add	sp, #24
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	50000400 	.word	0x50000400

080061dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 80061e0:	4b17      	ldr	r3, [pc, #92]	; (8006240 <SystemInit+0x64>)
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	4b16      	ldr	r3, [pc, #88]	; (8006240 <SystemInit+0x64>)
 80061e6:	2180      	movs	r1, #128	; 0x80
 80061e8:	0049      	lsls	r1, r1, #1
 80061ea:	430a      	orrs	r2, r1
 80061ec:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 80061ee:	4b14      	ldr	r3, [pc, #80]	; (8006240 <SystemInit+0x64>)
 80061f0:	68da      	ldr	r2, [r3, #12]
 80061f2:	4b13      	ldr	r3, [pc, #76]	; (8006240 <SystemInit+0x64>)
 80061f4:	4913      	ldr	r1, [pc, #76]	; (8006244 <SystemInit+0x68>)
 80061f6:	400a      	ands	r2, r1
 80061f8:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80061fa:	4b11      	ldr	r3, [pc, #68]	; (8006240 <SystemInit+0x64>)
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	4b10      	ldr	r3, [pc, #64]	; (8006240 <SystemInit+0x64>)
 8006200:	4911      	ldr	r1, [pc, #68]	; (8006248 <SystemInit+0x6c>)
 8006202:	400a      	ands	r2, r1
 8006204:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8006206:	4b0e      	ldr	r3, [pc, #56]	; (8006240 <SystemInit+0x64>)
 8006208:	689a      	ldr	r2, [r3, #8]
 800620a:	4b0d      	ldr	r3, [pc, #52]	; (8006240 <SystemInit+0x64>)
 800620c:	2101      	movs	r1, #1
 800620e:	438a      	bics	r2, r1
 8006210:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8006212:	4b0b      	ldr	r3, [pc, #44]	; (8006240 <SystemInit+0x64>)
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	4b0a      	ldr	r3, [pc, #40]	; (8006240 <SystemInit+0x64>)
 8006218:	490c      	ldr	r1, [pc, #48]	; (800624c <SystemInit+0x70>)
 800621a:	400a      	ands	r2, r1
 800621c:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 800621e:	4b08      	ldr	r3, [pc, #32]	; (8006240 <SystemInit+0x64>)
 8006220:	68da      	ldr	r2, [r3, #12]
 8006222:	4b07      	ldr	r3, [pc, #28]	; (8006240 <SystemInit+0x64>)
 8006224:	490a      	ldr	r1, [pc, #40]	; (8006250 <SystemInit+0x74>)
 8006226:	400a      	ands	r2, r1
 8006228:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800622a:	4b05      	ldr	r3, [pc, #20]	; (8006240 <SystemInit+0x64>)
 800622c:	2200      	movs	r2, #0
 800622e:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006230:	4b08      	ldr	r3, [pc, #32]	; (8006254 <SystemInit+0x78>)
 8006232:	2280      	movs	r2, #128	; 0x80
 8006234:	0512      	lsls	r2, r2, #20
 8006236:	609a      	str	r2, [r3, #8]
#endif
}
 8006238:	46c0      	nop			; (mov r8, r8)
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	46c0      	nop			; (mov r8, r8)
 8006240:	40021000 	.word	0x40021000
 8006244:	88ff400c 	.word	0x88ff400c
 8006248:	fef6fff6 	.word	0xfef6fff6
 800624c:	fffbffff 	.word	0xfffbffff
 8006250:	ff02ffff 	.word	0xff02ffff
 8006254:	e000ed00 	.word	0xe000ed00

08006258 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800625e:	1dfb      	adds	r3, r7, #7
 8006260:	2200      	movs	r2, #0
 8006262:	701a      	strb	r2, [r3, #0]
#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
#endif /* PREREAD_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006264:	4b0b      	ldr	r3, [pc, #44]	; (8006294 <HAL_Init+0x3c>)
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	4b0a      	ldr	r3, [pc, #40]	; (8006294 <HAL_Init+0x3c>)
 800626a:	2102      	movs	r1, #2
 800626c:	430a      	orrs	r2, r1
 800626e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006270:	2003      	movs	r0, #3
 8006272:	f7fe fda9 	bl	8004dc8 <HAL_InitTick>
 8006276:	1e03      	subs	r3, r0, #0
 8006278:	d003      	beq.n	8006282 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800627a:	1dfb      	adds	r3, r7, #7
 800627c:	2201      	movs	r2, #1
 800627e:	701a      	strb	r2, [r3, #0]
 8006280:	e001      	b.n	8006286 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006282:	f7fe fb5f 	bl	8004944 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006286:	1dfb      	adds	r3, r7, #7
 8006288:	781b      	ldrb	r3, [r3, #0]
}
 800628a:	0018      	movs	r0, r3
 800628c:	46bd      	mov	sp, r7
 800628e:	b002      	add	sp, #8
 8006290:	bd80      	pop	{r7, pc}
 8006292:	46c0      	nop			; (mov r8, r8)
 8006294:	40022000 	.word	0x40022000

08006298 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800629c:	4b05      	ldr	r3, [pc, #20]	; (80062b4 <HAL_IncTick+0x1c>)
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	001a      	movs	r2, r3
 80062a2:	4b05      	ldr	r3, [pc, #20]	; (80062b8 <HAL_IncTick+0x20>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	18d2      	adds	r2, r2, r3
 80062a8:	4b03      	ldr	r3, [pc, #12]	; (80062b8 <HAL_IncTick+0x20>)
 80062aa:	601a      	str	r2, [r3, #0]
}
 80062ac:	46c0      	nop			; (mov r8, r8)
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
 80062b2:	46c0      	nop			; (mov r8, r8)
 80062b4:	20000078 	.word	0x20000078
 80062b8:	2000171c 	.word	0x2000171c

080062bc <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 80062c0:	4b02      	ldr	r3, [pc, #8]	; (80062cc <HAL_GetUIDw0+0x10>)
 80062c2:	681b      	ldr	r3, [r3, #0]
}
 80062c4:	0018      	movs	r0, r3
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	46c0      	nop			; (mov r8, r8)
 80062cc:	1ff80050 	.word	0x1ff80050

080062d0 <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 80062d4:	4b02      	ldr	r3, [pc, #8]	; (80062e0 <HAL_GetUIDw1+0x10>)
 80062d6:	681b      	ldr	r3, [r3, #0]
}
 80062d8:	0018      	movs	r0, r3
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	46c0      	nop			; (mov r8, r8)
 80062e0:	1ff80054 	.word	0x1ff80054

080062e4 <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 80062e8:	4b02      	ldr	r3, [pc, #8]	; (80062f4 <HAL_GetUIDw2+0x10>)
 80062ea:	681b      	ldr	r3, [r3, #0]
}
 80062ec:	0018      	movs	r0, r3
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	46c0      	nop			; (mov r8, r8)
 80062f4:	1ff80064 	.word	0x1ff80064

080062f8 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enables the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80062fc:	4b04      	ldr	r3, [pc, #16]	; (8006310 <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 80062fe:	685a      	ldr	r2, [r3, #4]
 8006300:	4b03      	ldr	r3, [pc, #12]	; (8006310 <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 8006302:	2101      	movs	r1, #1
 8006304:	430a      	orrs	r2, r1
 8006306:	605a      	str	r2, [r3, #4]
}
 8006308:	46c0      	nop			; (mov r8, r8)
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	46c0      	nop			; (mov r8, r8)
 8006310:	40015800 	.word	0x40015800

08006314 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enables the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8006318:	4b04      	ldr	r3, [pc, #16]	; (800632c <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 800631a:	685a      	ldr	r2, [r3, #4]
 800631c:	4b03      	ldr	r3, [pc, #12]	; (800632c <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 800631e:	2102      	movs	r1, #2
 8006320:	430a      	orrs	r2, r1
 8006322:	605a      	str	r2, [r3, #4]
}
 8006324:	46c0      	nop			; (mov r8, r8)
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	46c0      	nop			; (mov r8, r8)
 800632c:	40015800 	.word	0x40015800

08006330 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enables the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8006334:	4b04      	ldr	r3, [pc, #16]	; (8006348 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8006336:	685a      	ldr	r2, [r3, #4]
 8006338:	4b03      	ldr	r3, [pc, #12]	; (8006348 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 800633a:	2104      	movs	r1, #4
 800633c:	430a      	orrs	r2, r1
 800633e:	605a      	str	r2, [r3, #4]
}
 8006340:	46c0      	nop			; (mov r8, r8)
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	46c0      	nop			; (mov r8, r8)
 8006348:	40015800 	.word	0x40015800

0800634c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b082      	sub	sp, #8
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d101      	bne.n	800635e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e159      	b.n	8006612 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006362:	2b00      	cmp	r3, #0
 8006364:	d10a      	bne.n	800637c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2250      	movs	r2, #80	; 0x50
 8006370:	2100      	movs	r1, #0
 8006372:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	0018      	movs	r0, r3
 8006378:	f7fc ffe4 	bl	8003344 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006380:	2210      	movs	r2, #16
 8006382:	4013      	ands	r3, r2
 8006384:	2b10      	cmp	r3, #16
 8006386:	d005      	beq.n	8006394 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	2204      	movs	r2, #4
 8006390:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8006392:	d00b      	beq.n	80063ac <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006398:	2210      	movs	r2, #16
 800639a:	431a      	orrs	r2, r3
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2250      	movs	r2, #80	; 0x50
 80063a4:	2100      	movs	r1, #0
 80063a6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	e132      	b.n	8006612 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063b0:	4a9a      	ldr	r2, [pc, #616]	; (800661c <HAL_ADC_Init+0x2d0>)
 80063b2:	4013      	ands	r3, r2
 80063b4:	2202      	movs	r2, #2
 80063b6:	431a      	orrs	r2, r3
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	2203      	movs	r2, #3
 80063c4:	4013      	ands	r3, r2
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d108      	bne.n	80063dc <HAL_ADC_Init+0x90>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	2201      	movs	r2, #1
 80063d2:	4013      	ands	r3, r2
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d101      	bne.n	80063dc <HAL_ADC_Init+0x90>
 80063d8:	2301      	movs	r3, #1
 80063da:	e000      	b.n	80063de <HAL_ADC_Init+0x92>
 80063dc:	2300      	movs	r3, #0
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d149      	bne.n	8006476 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	685a      	ldr	r2, [r3, #4]
 80063e6:	23c0      	movs	r3, #192	; 0xc0
 80063e8:	061b      	lsls	r3, r3, #24
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d00b      	beq.n	8006406 <HAL_ADC_Init+0xba>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	685a      	ldr	r2, [r3, #4]
 80063f2:	2380      	movs	r3, #128	; 0x80
 80063f4:	05db      	lsls	r3, r3, #23
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d005      	beq.n	8006406 <HAL_ADC_Init+0xba>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	685a      	ldr	r2, [r3, #4]
 80063fe:	2380      	movs	r3, #128	; 0x80
 8006400:	061b      	lsls	r3, r3, #24
 8006402:	429a      	cmp	r2, r3
 8006404:	d111      	bne.n	800642a <HAL_ADC_Init+0xde>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	691a      	ldr	r2, [r3, #16]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	0092      	lsls	r2, r2, #2
 8006412:	0892      	lsrs	r2, r2, #2
 8006414:	611a      	str	r2, [r3, #16]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	6919      	ldr	r1, [r3, #16]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	685a      	ldr	r2, [r3, #4]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	430a      	orrs	r2, r1
 8006426:	611a      	str	r2, [r3, #16]
 8006428:	e014      	b.n	8006454 <HAL_ADC_Init+0x108>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	691a      	ldr	r2, [r3, #16]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	0092      	lsls	r2, r2, #2
 8006436:	0892      	lsrs	r2, r2, #2
 8006438:	611a      	str	r2, [r3, #16]
 800643a:	4b79      	ldr	r3, [pc, #484]	; (8006620 <HAL_ADC_Init+0x2d4>)
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	4b78      	ldr	r3, [pc, #480]	; (8006620 <HAL_ADC_Init+0x2d4>)
 8006440:	4978      	ldr	r1, [pc, #480]	; (8006624 <HAL_ADC_Init+0x2d8>)
 8006442:	400a      	ands	r2, r1
 8006444:	601a      	str	r2, [r3, #0]
 8006446:	4b76      	ldr	r3, [pc, #472]	; (8006620 <HAL_ADC_Init+0x2d4>)
 8006448:	6819      	ldr	r1, [r3, #0]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	685a      	ldr	r2, [r3, #4]
 800644e:	4b74      	ldr	r3, [pc, #464]	; (8006620 <HAL_ADC_Init+0x2d4>)
 8006450:	430a      	orrs	r2, r1
 8006452:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68da      	ldr	r2, [r3, #12]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2118      	movs	r1, #24
 8006460:	438a      	bics	r2, r1
 8006462:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68d9      	ldr	r1, [r3, #12]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	689a      	ldr	r2, [r3, #8]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	430a      	orrs	r2, r1
 8006474:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8006476:	4b6a      	ldr	r3, [pc, #424]	; (8006620 <HAL_ADC_Init+0x2d4>)
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	4b69      	ldr	r3, [pc, #420]	; (8006620 <HAL_ADC_Init+0x2d4>)
 800647c:	496a      	ldr	r1, [pc, #424]	; (8006628 <HAL_ADC_Init+0x2dc>)
 800647e:	400a      	ands	r2, r1
 8006480:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8006482:	4b67      	ldr	r3, [pc, #412]	; (8006620 <HAL_ADC_Init+0x2d4>)
 8006484:	6819      	ldr	r1, [r3, #0]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800648a:	065a      	lsls	r2, r3, #25
 800648c:	4b64      	ldr	r3, [pc, #400]	; (8006620 <HAL_ADC_Init+0x2d4>)
 800648e:	430a      	orrs	r2, r1
 8006490:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	689a      	ldr	r2, [r3, #8]
 8006498:	2380      	movs	r3, #128	; 0x80
 800649a:	055b      	lsls	r3, r3, #21
 800649c:	4013      	ands	r3, r2
 800649e:	d108      	bne.n	80064b2 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	689a      	ldr	r2, [r3, #8]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	2180      	movs	r1, #128	; 0x80
 80064ac:	0549      	lsls	r1, r1, #21
 80064ae:	430a      	orrs	r2, r1
 80064b0:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	68da      	ldr	r2, [r3, #12]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	495b      	ldr	r1, [pc, #364]	; (800662c <HAL_ADC_Init+0x2e0>)
 80064be:	400a      	ands	r2, r1
 80064c0:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	68d9      	ldr	r1, [r3, #12]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	691b      	ldr	r3, [r3, #16]
 80064d0:	2b02      	cmp	r3, #2
 80064d2:	d101      	bne.n	80064d8 <HAL_ADC_Init+0x18c>
 80064d4:	2304      	movs	r3, #4
 80064d6:	e000      	b.n	80064da <HAL_ADC_Init+0x18e>
 80064d8:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80064da:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2020      	movs	r0, #32
 80064e0:	5c1b      	ldrb	r3, [r3, r0]
 80064e2:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80064e4:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	202c      	movs	r0, #44	; 0x2c
 80064ea:	5c1b      	ldrb	r3, [r3, r0]
 80064ec:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80064ee:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80064f4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	699b      	ldr	r3, [r3, #24]
 80064fa:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80064fc:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	69db      	ldr	r3, [r3, #28]
 8006502:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8006504:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	430a      	orrs	r2, r1
 800650c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006512:	23c2      	movs	r3, #194	; 0xc2
 8006514:	33ff      	adds	r3, #255	; 0xff
 8006516:	429a      	cmp	r2, r3
 8006518:	d00b      	beq.n	8006532 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	68d9      	ldr	r1, [r3, #12]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8006528:	431a      	orrs	r2, r3
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	430a      	orrs	r2, r1
 8006530:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2221      	movs	r2, #33	; 0x21
 8006536:	5c9b      	ldrb	r3, [r3, r2]
 8006538:	2b01      	cmp	r3, #1
 800653a:	d11a      	bne.n	8006572 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2220      	movs	r2, #32
 8006540:	5c9b      	ldrb	r3, [r3, r2]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d109      	bne.n	800655a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68da      	ldr	r2, [r3, #12]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	2180      	movs	r1, #128	; 0x80
 8006552:	0249      	lsls	r1, r1, #9
 8006554:	430a      	orrs	r2, r1
 8006556:	60da      	str	r2, [r3, #12]
 8006558:	e00b      	b.n	8006572 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800655e:	2220      	movs	r2, #32
 8006560:	431a      	orrs	r2, r3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800656a:	2201      	movs	r2, #1
 800656c:	431a      	orrs	r2, r3
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006576:	2b01      	cmp	r3, #1
 8006578:	d11f      	bne.n	80065ba <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	691a      	ldr	r2, [r3, #16]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	492a      	ldr	r1, [pc, #168]	; (8006630 <HAL_ADC_Init+0x2e4>)
 8006586:	400a      	ands	r2, r1
 8006588:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	6919      	ldr	r1, [r3, #16]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8006598:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 800659e:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	430a      	orrs	r2, r1
 80065a6:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	691a      	ldr	r2, [r3, #16]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	2101      	movs	r1, #1
 80065b4:	430a      	orrs	r2, r1
 80065b6:	611a      	str	r2, [r3, #16]
 80065b8:	e00e      	b.n	80065d8 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	691b      	ldr	r3, [r3, #16]
 80065c0:	2201      	movs	r2, #1
 80065c2:	4013      	ands	r3, r2
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d107      	bne.n	80065d8 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	691a      	ldr	r2, [r3, #16]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	2101      	movs	r1, #1
 80065d4:	438a      	bics	r2, r1
 80065d6:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	695a      	ldr	r2, [r3, #20]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	2107      	movs	r1, #7
 80065e4:	438a      	bics	r2, r1
 80065e6:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	6959      	ldr	r1, [r3, #20]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	430a      	orrs	r2, r1
 80065f8:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006604:	2203      	movs	r2, #3
 8006606:	4393      	bics	r3, r2
 8006608:	2201      	movs	r2, #1
 800660a:	431a      	orrs	r2, r3
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	0018      	movs	r0, r3
 8006614:	46bd      	mov	sp, r7
 8006616:	b002      	add	sp, #8
 8006618:	bd80      	pop	{r7, pc}
 800661a:	46c0      	nop			; (mov r8, r8)
 800661c:	fffffefd 	.word	0xfffffefd
 8006620:	40012708 	.word	0x40012708
 8006624:	ffc3ffff 	.word	0xffc3ffff
 8006628:	fdffffff 	.word	0xfdffffff
 800662c:	fffe0219 	.word	0xfffe0219
 8006630:	fffffc03 	.word	0xfffffc03

08006634 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 8006634:	b5b0      	push	{r4, r5, r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800663c:	230f      	movs	r3, #15
 800663e:	18fb      	adds	r3, r7, r3
 8006640:	2200      	movs	r2, #0
 8006642:	701a      	strb	r2, [r3, #0]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d101      	bne.n	800664e <HAL_ADC_DeInit+0x1a>
  {
    return HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	e07d      	b.n	800674a <HAL_ADC_DeInit+0x116>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006652:	2202      	movs	r2, #2
 8006654:	431a      	orrs	r2, r3
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800665a:	250f      	movs	r5, #15
 800665c:	197c      	adds	r4, r7, r5
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	0018      	movs	r0, r3
 8006662:	f000 faff 	bl	8006c64 <ADC_ConversionStop>
 8006666:	0003      	movs	r3, r0
 8006668:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800666a:	197b      	adds	r3, r7, r5
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d10d      	bne.n	800668e <HAL_ADC_DeInit+0x5a>
  {   
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8006672:	197c      	adds	r4, r7, r5
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	0018      	movs	r0, r3
 8006678:	f000 fa94 	bl	8006ba4 <ADC_Disable>
 800667c:	0003      	movs	r3, r0
 800667e:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status != HAL_ERROR)
 8006680:	197b      	adds	r3, r7, r5
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	2b01      	cmp	r3, #1
 8006686:	d002      	beq.n	800668e <HAL_ADC_DeInit+0x5a>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	655a      	str	r2, [r3, #84]	; 0x54
  }
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (tmp_hal_status != HAL_ERROR)
 800668e:	230f      	movs	r3, #15
 8006690:	18fb      	adds	r3, r7, r3
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	2b01      	cmp	r3, #1
 8006696:	d051      	beq.n	800673c <HAL_ADC_DeInit+0x108>
  {
    
    /* ========== Reset ADC registers ========== */
    /* Reset register IER */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	685a      	ldr	r2, [r3, #4]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	492c      	ldr	r1, [pc, #176]	; (8006754 <HAL_ADC_DeInit+0x120>)
 80066a4:	400a      	ands	r2, r1
 80066a6:	605a      	str	r2, [r3, #4]
                                ADC_IT_EOC | ADC_IT_RDY | ADC_IT_EOSMP ));
  
        
    /* Reset register ISR */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a2a      	ldr	r2, [pc, #168]	; (8006758 <HAL_ADC_DeInit+0x124>)
 80066ae:	601a      	str	r2, [r3, #0]
    
    /* Reset register CR */
    /* Disable voltage regulator */
    /* Note: Regulator disable useful for power saving */
    /* Reset ADVREGEN bit */
    hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	689a      	ldr	r2, [r3, #8]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4928      	ldr	r1, [pc, #160]	; (800675c <HAL_ADC_DeInit+0x128>)
 80066bc:	400a      	ands	r2, r1
 80066be:	609a      	str	r2, [r3, #8]
    
    /* Bits ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode "read-set": no direct reset applicable */
    /* No action */
    
    /* Reset register CFGR1 */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWDCH  | ADC_CFGR1_AWDEN  | ADC_CFGR1_AWDSGL | \
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68da      	ldr	r2, [r3, #12]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4925      	ldr	r1, [pc, #148]	; (8006760 <HAL_ADC_DeInit+0x12c>)
 80066cc:	400a      	ands	r2, r1
 80066ce:	60da      	str	r2, [r3, #12]
                               ADC_CFGR1_CONT   | ADC_CFGR1_OVRMOD | ADC_CFGR1_EXTEN  | \
                               ADC_CFGR1_EXTSEL | ADC_CFGR1_ALIGN  | ADC_CFGR1_RES    | \
                               ADC_CFGR1_SCANDIR| ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);
  
    /* Reset register CFGR2 */
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	691a      	ldr	r2, [r3, #16]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4922      	ldr	r1, [pc, #136]	; (8006764 <HAL_ADC_DeInit+0x130>)
 80066dc:	400a      	ands	r2, r1
 80066de:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSE  | ADC_CFGR2_CKMODE );
  
    
    /* Reset register SMPR */
    hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	695a      	ldr	r2, [r3, #20]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	2107      	movs	r1, #7
 80066ec:	438a      	bics	r2, r1
 80066ee:	615a      	str	r2, [r3, #20]
    
    /* Reset register TR */
    hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	6a1a      	ldr	r2, [r3, #32]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	491b      	ldr	r1, [pc, #108]	; (8006768 <HAL_ADC_DeInit+0x134>)
 80066fc:	400a      	ands	r2, r1
 80066fe:	621a      	str	r2, [r3, #32]
    
    /* Reset register CALFACT */
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	22b4      	movs	r2, #180	; 0xb4
 8006706:	589a      	ldr	r2, [r3, r2]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	217f      	movs	r1, #127	; 0x7f
 800670e:	438a      	bics	r2, r1
 8006710:	21b4      	movs	r1, #180	; 0xb4
 8006712:	505a      	str	r2, [r3, r1]
    
    /* Reset register DR */
    /* bits in access mode read only, no direct reset applicable*/
  
    /* Reset register CALFACT */
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	22b4      	movs	r2, #180	; 0xb4
 800671a:	589a      	ldr	r2, [r3, r2]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	217f      	movs	r1, #127	; 0x7f
 8006722:	438a      	bics	r2, r1
 8006724:	21b4      	movs	r1, #180	; 0xb4
 8006726:	505a      	str	r2, [r3, r1]
    
    /* DeInit the low level hardware */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware */
    HAL_ADC_MspDeInit(hadc);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	0018      	movs	r0, r3
 800672c:	f7fc fe3a 	bl	80033a4 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	655a      	str	r2, [r3, #84]	; 0x54
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2250      	movs	r2, #80	; 0x50
 8006740:	2100      	movs	r1, #0
 8006742:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8006744:	230f      	movs	r3, #15
 8006746:	18fb      	adds	r3, r7, r3
 8006748:	781b      	ldrb	r3, [r3, #0]
}
 800674a:	0018      	movs	r0, r3
 800674c:	46bd      	mov	sp, r7
 800674e:	b004      	add	sp, #16
 8006750:	bdb0      	pop	{r4, r5, r7, pc}
 8006752:	46c0      	nop			; (mov r8, r8)
 8006754:	fffff760 	.word	0xfffff760
 8006758:	0000089f 	.word	0x0000089f
 800675c:	efffffff 	.word	0xefffffff
 8006760:	833e0200 	.word	0x833e0200
 8006764:	3ffffc02 	.word	0x3ffffc02
 8006768:	f000f000 	.word	0xf000f000

0800676c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800676c:	b590      	push	{r4, r7, lr}
 800676e:	b085      	sub	sp, #20
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006774:	230f      	movs	r3, #15
 8006776:	18fb      	adds	r3, r7, r3
 8006778:	2200      	movs	r2, #0
 800677a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	2204      	movs	r2, #4
 8006784:	4013      	ands	r3, r2
 8006786:	d138      	bne.n	80067fa <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2250      	movs	r2, #80	; 0x50
 800678c:	5c9b      	ldrb	r3, [r3, r2]
 800678e:	2b01      	cmp	r3, #1
 8006790:	d101      	bne.n	8006796 <HAL_ADC_Start+0x2a>
 8006792:	2302      	movs	r3, #2
 8006794:	e038      	b.n	8006808 <HAL_ADC_Start+0x9c>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2250      	movs	r2, #80	; 0x50
 800679a:	2101      	movs	r1, #1
 800679c:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	69db      	ldr	r3, [r3, #28]
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d007      	beq.n	80067b6 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80067a6:	230f      	movs	r3, #15
 80067a8:	18fc      	adds	r4, r7, r3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	0018      	movs	r0, r3
 80067ae:	f000 f999 	bl	8006ae4 <ADC_Enable>
 80067b2:	0003      	movs	r3, r0
 80067b4:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80067b6:	230f      	movs	r3, #15
 80067b8:	18fb      	adds	r3, r7, r3
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d120      	bne.n	8006802 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067c4:	4a12      	ldr	r2, [pc, #72]	; (8006810 <HAL_ADC_Start+0xa4>)
 80067c6:	4013      	ands	r3, r2
 80067c8:	2280      	movs	r2, #128	; 0x80
 80067ca:	0052      	lsls	r2, r2, #1
 80067cc:	431a      	orrs	r2, r3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2250      	movs	r2, #80	; 0x50
 80067dc:	2100      	movs	r1, #0
 80067de:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	221c      	movs	r2, #28
 80067e6:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	689a      	ldr	r2, [r3, #8]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	2104      	movs	r1, #4
 80067f4:	430a      	orrs	r2, r1
 80067f6:	609a      	str	r2, [r3, #8]
 80067f8:	e003      	b.n	8006802 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80067fa:	230f      	movs	r3, #15
 80067fc:	18fb      	adds	r3, r7, r3
 80067fe:	2202      	movs	r2, #2
 8006800:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8006802:	230f      	movs	r3, #15
 8006804:	18fb      	adds	r3, r7, r3
 8006806:	781b      	ldrb	r3, [r3, #0]
}
 8006808:	0018      	movs	r0, r3
 800680a:	46bd      	mov	sp, r7
 800680c:	b005      	add	sp, #20
 800680e:	bd90      	pop	{r4, r7, pc}
 8006810:	fffff0fe 	.word	0xfffff0fe

08006814 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8006814:	b5b0      	push	{r4, r5, r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800681c:	230f      	movs	r3, #15
 800681e:	18fb      	adds	r3, r7, r3
 8006820:	2200      	movs	r2, #0
 8006822:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2250      	movs	r2, #80	; 0x50
 8006828:	5c9b      	ldrb	r3, [r3, r2]
 800682a:	2b01      	cmp	r3, #1
 800682c:	d101      	bne.n	8006832 <HAL_ADC_Stop+0x1e>
 800682e:	2302      	movs	r3, #2
 8006830:	e029      	b.n	8006886 <HAL_ADC_Stop+0x72>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2250      	movs	r2, #80	; 0x50
 8006836:	2101      	movs	r1, #1
 8006838:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800683a:	250f      	movs	r5, #15
 800683c:	197c      	adds	r4, r7, r5
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	0018      	movs	r0, r3
 8006842:	f000 fa0f 	bl	8006c64 <ADC_ConversionStop>
 8006846:	0003      	movs	r3, r0
 8006848:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800684a:	197b      	adds	r3, r7, r5
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d112      	bne.n	8006878 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8006852:	197c      	adds	r4, r7, r5
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	0018      	movs	r0, r3
 8006858:	f000 f9a4 	bl	8006ba4 <ADC_Disable>
 800685c:	0003      	movs	r3, r0
 800685e:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8006860:	197b      	adds	r3, r7, r5
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d107      	bne.n	8006878 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800686c:	4a08      	ldr	r2, [pc, #32]	; (8006890 <HAL_ADC_Stop+0x7c>)
 800686e:	4013      	ands	r3, r2
 8006870:	2201      	movs	r2, #1
 8006872:	431a      	orrs	r2, r3
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2250      	movs	r2, #80	; 0x50
 800687c:	2100      	movs	r1, #0
 800687e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8006880:	230f      	movs	r3, #15
 8006882:	18fb      	adds	r3, r7, r3
 8006884:	781b      	ldrb	r3, [r3, #0]
}
 8006886:	0018      	movs	r0, r3
 8006888:	46bd      	mov	sp, r7
 800688a:	b004      	add	sp, #16
 800688c:	bdb0      	pop	{r4, r5, r7, pc}
 800688e:	46c0      	nop			; (mov r8, r8)
 8006890:	fffffefe 	.word	0xfffffefe

08006894 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800689e:	2300      	movs	r3, #0
 80068a0:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 80068a2:	2300      	movs	r3, #0
 80068a4:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	695b      	ldr	r3, [r3, #20]
 80068aa:	2b08      	cmp	r3, #8
 80068ac:	d102      	bne.n	80068b4 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80068ae:	2308      	movs	r3, #8
 80068b0:	60fb      	str	r3, [r7, #12]
 80068b2:	e014      	b.n	80068de <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	2201      	movs	r2, #1
 80068bc:	4013      	ands	r3, r2
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d10b      	bne.n	80068da <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068c6:	2220      	movs	r2, #32
 80068c8:	431a      	orrs	r2, r3
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2250      	movs	r2, #80	; 0x50
 80068d2:	2100      	movs	r1, #0
 80068d4:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e06c      	b.n	80069b4 <HAL_ADC_PollForConversion+0x120>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80068da:	230c      	movs	r3, #12
 80068dc:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80068de:	f7fe fa7c 	bl	8004dda <HAL_GetTick>
 80068e2:	0003      	movs	r3, r0
 80068e4:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80068e6:	e019      	b.n	800691c <HAL_ADC_PollForConversion+0x88>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	3301      	adds	r3, #1
 80068ec:	d016      	beq.n	800691c <HAL_ADC_PollForConversion+0x88>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d007      	beq.n	8006904 <HAL_ADC_PollForConversion+0x70>
 80068f4:	f7fe fa71 	bl	8004dda <HAL_GetTick>
 80068f8:	0002      	movs	r2, r0
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	1ad3      	subs	r3, r2, r3
 80068fe:	683a      	ldr	r2, [r7, #0]
 8006900:	429a      	cmp	r2, r3
 8006902:	d20b      	bcs.n	800691c <HAL_ADC_PollForConversion+0x88>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006908:	2204      	movs	r2, #4
 800690a:	431a      	orrs	r2, r3
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2250      	movs	r2, #80	; 0x50
 8006914:	2100      	movs	r1, #0
 8006916:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 8006918:	2303      	movs	r3, #3
 800691a:	e04b      	b.n	80069b4 <HAL_ADC_PollForConversion+0x120>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	4013      	ands	r3, r2
 8006926:	d0df      	beq.n	80068e8 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800692c:	2280      	movs	r2, #128	; 0x80
 800692e:	0092      	lsls	r2, r2, #2
 8006930:	431a      	orrs	r2, r3
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68da      	ldr	r2, [r3, #12]
 800693c:	23c0      	movs	r3, #192	; 0xc0
 800693e:	011b      	lsls	r3, r3, #4
 8006940:	4013      	ands	r3, r2
 8006942:	d12e      	bne.n	80069a2 <HAL_ADC_PollForConversion+0x10e>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2220      	movs	r2, #32
 8006948:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800694a:	2b00      	cmp	r3, #0
 800694c:	d129      	bne.n	80069a2 <HAL_ADC_PollForConversion+0x10e>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	2208      	movs	r2, #8
 8006956:	4013      	ands	r3, r2
 8006958:	2b08      	cmp	r3, #8
 800695a:	d122      	bne.n	80069a2 <HAL_ADC_PollForConversion+0x10e>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	2204      	movs	r2, #4
 8006964:	4013      	ands	r3, r2
 8006966:	d110      	bne.n	800698a <HAL_ADC_PollForConversion+0xf6>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	685a      	ldr	r2, [r3, #4]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	210c      	movs	r1, #12
 8006974:	438a      	bics	r2, r1
 8006976:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800697c:	4a0f      	ldr	r2, [pc, #60]	; (80069bc <HAL_ADC_PollForConversion+0x128>)
 800697e:	4013      	ands	r3, r2
 8006980:	2201      	movs	r2, #1
 8006982:	431a      	orrs	r2, r3
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	655a      	str	r2, [r3, #84]	; 0x54
 8006988:	e00b      	b.n	80069a2 <HAL_ADC_PollForConversion+0x10e>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800698e:	2220      	movs	r2, #32
 8006990:	431a      	orrs	r2, r3
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800699a:	2201      	movs	r2, #1
 800699c:	431a      	orrs	r2, r3
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	699b      	ldr	r3, [r3, #24]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d103      	bne.n	80069b2 <HAL_ADC_PollForConversion+0x11e>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	220c      	movs	r2, #12
 80069b0:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 80069b2:	2300      	movs	r3, #0
}
 80069b4:	0018      	movs	r0, r3
 80069b6:	46bd      	mov	sp, r7
 80069b8:	b004      	add	sp, #16
 80069ba:	bd80      	pop	{r7, pc}
 80069bc:	fffffefe 	.word	0xfffffefe

080069c0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b082      	sub	sp, #8
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80069ce:	0018      	movs	r0, r3
 80069d0:	46bd      	mov	sp, r7
 80069d2:	b002      	add	sp, #8
 80069d4:	bd80      	pop	{r7, pc}
	...

080069d8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b082      	sub	sp, #8
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2250      	movs	r2, #80	; 0x50
 80069e6:	5c9b      	ldrb	r3, [r3, r2]
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d101      	bne.n	80069f0 <HAL_ADC_ConfigChannel+0x18>
 80069ec:	2302      	movs	r3, #2
 80069ee:	e06c      	b.n	8006aca <HAL_ADC_ConfigChannel+0xf2>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2250      	movs	r2, #80	; 0x50
 80069f4:	2101      	movs	r1, #1
 80069f6:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	2204      	movs	r2, #4
 8006a00:	4013      	ands	r3, r2
 8006a02:	d00b      	beq.n	8006a1c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a08:	2220      	movs	r2, #32
 8006a0a:	431a      	orrs	r2, r3
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2250      	movs	r2, #80	; 0x50
 8006a14:	2100      	movs	r1, #0
 8006a16:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e056      	b.n	8006aca <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	4a2c      	ldr	r2, [pc, #176]	; (8006ad4 <HAL_ADC_ConfigChannel+0xfc>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d028      	beq.n	8006a78 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	035b      	lsls	r3, r3, #13
 8006a32:	0b5a      	lsrs	r2, r3, #13
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	430a      	orrs	r2, r1
 8006a3a:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	2380      	movs	r3, #128	; 0x80
 8006a42:	02db      	lsls	r3, r3, #11
 8006a44:	4013      	ands	r3, r2
 8006a46:	d009      	beq.n	8006a5c <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8006a48:	4b23      	ldr	r3, [pc, #140]	; (8006ad8 <HAL_ADC_ConfigChannel+0x100>)
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	4b22      	ldr	r3, [pc, #136]	; (8006ad8 <HAL_ADC_ConfigChannel+0x100>)
 8006a4e:	2180      	movs	r1, #128	; 0x80
 8006a50:	0409      	lsls	r1, r1, #16
 8006a52:	430a      	orrs	r2, r1
 8006a54:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8006a56:	200a      	movs	r0, #10
 8006a58:	f000 f94a 	bl	8006cf0 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	2380      	movs	r3, #128	; 0x80
 8006a62:	029b      	lsls	r3, r3, #10
 8006a64:	4013      	ands	r3, r2
 8006a66:	d02b      	beq.n	8006ac0 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8006a68:	4b1b      	ldr	r3, [pc, #108]	; (8006ad8 <HAL_ADC_ConfigChannel+0x100>)
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	4b1a      	ldr	r3, [pc, #104]	; (8006ad8 <HAL_ADC_ConfigChannel+0x100>)
 8006a6e:	2180      	movs	r1, #128	; 0x80
 8006a70:	03c9      	lsls	r1, r1, #15
 8006a72:	430a      	orrs	r2, r1
 8006a74:	601a      	str	r2, [r3, #0]
 8006a76:	e023      	b.n	8006ac0 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	035b      	lsls	r3, r3, #13
 8006a84:	0b5b      	lsrs	r3, r3, #13
 8006a86:	43d9      	mvns	r1, r3
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	400a      	ands	r2, r1
 8006a8e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	2380      	movs	r3, #128	; 0x80
 8006a96:	02db      	lsls	r3, r3, #11
 8006a98:	4013      	ands	r3, r2
 8006a9a:	d005      	beq.n	8006aa8 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8006a9c:	4b0e      	ldr	r3, [pc, #56]	; (8006ad8 <HAL_ADC_ConfigChannel+0x100>)
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	4b0d      	ldr	r3, [pc, #52]	; (8006ad8 <HAL_ADC_ConfigChannel+0x100>)
 8006aa2:	490e      	ldr	r1, [pc, #56]	; (8006adc <HAL_ADC_ConfigChannel+0x104>)
 8006aa4:	400a      	ands	r2, r1
 8006aa6:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	2380      	movs	r3, #128	; 0x80
 8006aae:	029b      	lsls	r3, r3, #10
 8006ab0:	4013      	ands	r3, r2
 8006ab2:	d005      	beq.n	8006ac0 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8006ab4:	4b08      	ldr	r3, [pc, #32]	; (8006ad8 <HAL_ADC_ConfigChannel+0x100>)
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	4b07      	ldr	r3, [pc, #28]	; (8006ad8 <HAL_ADC_ConfigChannel+0x100>)
 8006aba:	4909      	ldr	r1, [pc, #36]	; (8006ae0 <HAL_ADC_ConfigChannel+0x108>)
 8006abc:	400a      	ands	r2, r1
 8006abe:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2250      	movs	r2, #80	; 0x50
 8006ac4:	2100      	movs	r1, #0
 8006ac6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8006ac8:	2300      	movs	r3, #0
}
 8006aca:	0018      	movs	r0, r3
 8006acc:	46bd      	mov	sp, r7
 8006ace:	b002      	add	sp, #8
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	46c0      	nop			; (mov r8, r8)
 8006ad4:	00001001 	.word	0x00001001
 8006ad8:	40012708 	.word	0x40012708
 8006adc:	ff7fffff 	.word	0xff7fffff
 8006ae0:	ffbfffff 	.word	0xffbfffff

08006ae4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b084      	sub	sp, #16
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006aec:	2300      	movs	r3, #0
 8006aee:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	2203      	movs	r2, #3
 8006af8:	4013      	ands	r3, r2
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d108      	bne.n	8006b10 <ADC_Enable+0x2c>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	2201      	movs	r2, #1
 8006b06:	4013      	ands	r3, r2
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d101      	bne.n	8006b10 <ADC_Enable+0x2c>
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e000      	b.n	8006b12 <ADC_Enable+0x2e>
 8006b10:	2300      	movs	r3, #0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d13f      	bne.n	8006b96 <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	4a20      	ldr	r2, [pc, #128]	; (8006ba0 <ADC_Enable+0xbc>)
 8006b1e:	4013      	ands	r3, r2
 8006b20:	d00d      	beq.n	8006b3e <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b26:	2210      	movs	r2, #16
 8006b28:	431a      	orrs	r2, r3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b32:	2201      	movs	r2, #1
 8006b34:	431a      	orrs	r2, r3
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e02c      	b.n	8006b98 <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	689a      	ldr	r2, [r3, #8]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2101      	movs	r1, #1
 8006b4a:	430a      	orrs	r2, r1
 8006b4c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8006b4e:	2001      	movs	r0, #1
 8006b50:	f000 f8ce 	bl	8006cf0 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8006b54:	f7fe f941 	bl	8004dda <HAL_GetTick>
 8006b58:	0003      	movs	r3, r0
 8006b5a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006b5c:	e014      	b.n	8006b88 <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006b5e:	f7fe f93c 	bl	8004dda <HAL_GetTick>
 8006b62:	0002      	movs	r2, r0
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	1ad3      	subs	r3, r2, r3
 8006b68:	2b0a      	cmp	r3, #10
 8006b6a:	d90d      	bls.n	8006b88 <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b70:	2210      	movs	r2, #16
 8006b72:	431a      	orrs	r2, r3
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	431a      	orrs	r2, r3
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	e007      	b.n	8006b98 <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	4013      	ands	r3, r2
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d1e3      	bne.n	8006b5e <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8006b96:	2300      	movs	r3, #0
}
 8006b98:	0018      	movs	r0, r3
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	b004      	add	sp, #16
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	80000017 	.word	0x80000017

08006ba4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006bac:	2300      	movs	r3, #0
 8006bae:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	2203      	movs	r2, #3
 8006bb8:	4013      	ands	r3, r2
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d108      	bne.n	8006bd0 <ADC_Disable+0x2c>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d101      	bne.n	8006bd0 <ADC_Disable+0x2c>
 8006bcc:	2301      	movs	r3, #1
 8006bce:	e000      	b.n	8006bd2 <ADC_Disable+0x2e>
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d041      	beq.n	8006c5a <ADC_Disable+0xb6>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	2205      	movs	r2, #5
 8006bde:	4013      	ands	r3, r2
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d110      	bne.n	8006c06 <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	689a      	ldr	r2, [r3, #8]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	2102      	movs	r1, #2
 8006bf0:	430a      	orrs	r2, r1
 8006bf2:	609a      	str	r2, [r3, #8]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	2203      	movs	r2, #3
 8006bfa:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006bfc:	f7fe f8ed 	bl	8004dda <HAL_GetTick>
 8006c00:	0003      	movs	r3, r0
 8006c02:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8006c04:	e022      	b.n	8006c4c <ADC_Disable+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c0a:	2210      	movs	r2, #16
 8006c0c:	431a      	orrs	r2, r3
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c16:	2201      	movs	r2, #1
 8006c18:	431a      	orrs	r2, r3
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e01c      	b.n	8006c5c <ADC_Disable+0xb8>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006c22:	f7fe f8da 	bl	8004dda <HAL_GetTick>
 8006c26:	0002      	movs	r2, r0
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	1ad3      	subs	r3, r2, r3
 8006c2c:	2b0a      	cmp	r3, #10
 8006c2e:	d90d      	bls.n	8006c4c <ADC_Disable+0xa8>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c34:	2210      	movs	r2, #16
 8006c36:	431a      	orrs	r2, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c40:	2201      	movs	r2, #1
 8006c42:	431a      	orrs	r2, r3
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	e007      	b.n	8006c5c <ADC_Disable+0xb8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	2201      	movs	r2, #1
 8006c54:	4013      	ands	r3, r2
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d0e3      	beq.n	8006c22 <ADC_Disable+0x7e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8006c5a:	2300      	movs	r3, #0
}
 8006c5c:	0018      	movs	r0, r3
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	b004      	add	sp, #16
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	2204      	movs	r2, #4
 8006c78:	4013      	ands	r3, r2
 8006c7a:	d034      	beq.n	8006ce6 <ADC_ConversionStop+0x82>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	2204      	movs	r2, #4
 8006c84:	4013      	ands	r3, r2
 8006c86:	2b04      	cmp	r3, #4
 8006c88:	d10d      	bne.n	8006ca6 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	2202      	movs	r2, #2
 8006c92:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8006c94:	d107      	bne.n	8006ca6 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	689a      	ldr	r2, [r3, #8]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	2110      	movs	r1, #16
 8006ca2:	430a      	orrs	r2, r1
 8006ca4:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006ca6:	f7fe f898 	bl	8004dda <HAL_GetTick>
 8006caa:	0003      	movs	r3, r0
 8006cac:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8006cae:	e014      	b.n	8006cda <ADC_ConversionStop+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8006cb0:	f7fe f893 	bl	8004dda <HAL_GetTick>
 8006cb4:	0002      	movs	r2, r0
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	1ad3      	subs	r3, r2, r3
 8006cba:	2b0a      	cmp	r3, #10
 8006cbc:	d90d      	bls.n	8006cda <ADC_ConversionStop+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cc2:	2210      	movs	r2, #16
 8006cc4:	431a      	orrs	r2, r3
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	655a      	str	r2, [r3, #84]	; 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cce:	2201      	movs	r2, #1
 8006cd0:	431a      	orrs	r2, r3
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e006      	b.n	8006ce8 <ADC_ConversionStop+0x84>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	2204      	movs	r2, #4
 8006ce2:	4013      	ands	r3, r2
 8006ce4:	d1e4      	bne.n	8006cb0 <ADC_ConversionStop+0x4c>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8006ce6:	2300      	movs	r3, #0
}
 8006ce8:	0018      	movs	r0, r3
 8006cea:	46bd      	mov	sp, r7
 8006cec:	b004      	add	sp, #16
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8006cf8:	4b0b      	ldr	r3, [pc, #44]	; (8006d28 <ADC_DelayMicroSecond+0x38>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	490b      	ldr	r1, [pc, #44]	; (8006d2c <ADC_DelayMicroSecond+0x3c>)
 8006cfe:	0018      	movs	r0, r3
 8006d00:	f7f9 fa0a 	bl	8000118 <__udivsi3>
 8006d04:	0003      	movs	r3, r0
 8006d06:	001a      	movs	r2, r3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	4353      	muls	r3, r2
 8006d0c:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8006d0e:	e002      	b.n	8006d16 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	3b01      	subs	r3, #1
 8006d14:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d1f9      	bne.n	8006d10 <ADC_DelayMicroSecond+0x20>
  } 
}
 8006d1c:	46c0      	nop			; (mov r8, r8)
 8006d1e:	46c0      	nop			; (mov r8, r8)
 8006d20:	46bd      	mov	sp, r7
 8006d22:	b004      	add	sp, #16
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	46c0      	nop			; (mov r8, r8)
 8006d28:	20000070 	.word	0x20000070
 8006d2c:	000f4240 	.word	0x000f4240

08006d30 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b086      	sub	sp, #24
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006d3a:	2317      	movs	r3, #23
 8006d3c:	18fb      	adds	r3, r7, r3
 8006d3e:	2200      	movs	r2, #0
 8006d40:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8006d42:	2300      	movs	r3, #0
 8006d44:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8006d46:	2300      	movs	r3, #0
 8006d48:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2250      	movs	r2, #80	; 0x50
 8006d4e:	5c9b      	ldrb	r3, [r3, r2]
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d101      	bne.n	8006d58 <HAL_ADCEx_Calibration_Start+0x28>
 8006d54:	2302      	movs	r3, #2
 8006d56:	e07a      	b.n	8006e4e <HAL_ADCEx_Calibration_Start+0x11e>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2250      	movs	r2, #80	; 0x50
 8006d5c:	2101      	movs	r1, #1
 8006d5e:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	2203      	movs	r2, #3
 8006d68:	4013      	ands	r3, r2
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d108      	bne.n	8006d80 <HAL_ADCEx_Calibration_Start+0x50>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	2201      	movs	r2, #1
 8006d76:	4013      	ands	r3, r2
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d101      	bne.n	8006d80 <HAL_ADCEx_Calibration_Start+0x50>
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e000      	b.n	8006d82 <HAL_ADCEx_Calibration_Start+0x52>
 8006d80:	2300      	movs	r3, #0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d152      	bne.n	8006e2c <HAL_ADCEx_Calibration_Start+0xfc>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d8a:	4a33      	ldr	r2, [pc, #204]	; (8006e58 <HAL_ADCEx_Calibration_Start+0x128>)
 8006d8c:	4013      	ands	r3, r2
 8006d8e:	2202      	movs	r2, #2
 8006d90:	431a      	orrs	r2, r3
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	2203      	movs	r2, #3
 8006d9e:	4013      	ands	r3, r2
 8006da0:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	68da      	ldr	r2, [r3, #12]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	2103      	movs	r1, #3
 8006dae:	438a      	bics	r2, r1
 8006db0:	60da      	str	r2, [r3, #12]
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	689a      	ldr	r2, [r3, #8]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	2180      	movs	r1, #128	; 0x80
 8006dbe:	0609      	lsls	r1, r1, #24
 8006dc0:	430a      	orrs	r2, r1
 8006dc2:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8006dc4:	f7fe f809 	bl	8004dda <HAL_GetTick>
 8006dc8:	0003      	movs	r3, r0
 8006dca:	613b      	str	r3, [r7, #16]
    
    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8006dcc:	e014      	b.n	8006df8 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8006dce:	f7fe f804 	bl	8004dda <HAL_GetTick>
 8006dd2:	0002      	movs	r2, r0
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	1ad3      	subs	r3, r2, r3
 8006dd8:	2b0a      	cmp	r3, #10
 8006dda:	d90d      	bls.n	8006df8 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006de0:	2212      	movs	r2, #18
 8006de2:	4393      	bics	r3, r2
 8006de4:	2210      	movs	r2, #16
 8006de6:	431a      	orrs	r2, r3
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2250      	movs	r2, #80	; 0x50
 8006df0:	2100      	movs	r1, #0
 8006df2:	5499      	strb	r1, [r3, r2]
        
        return HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	e02a      	b.n	8006e4e <HAL_ADCEx_Calibration_Start+0x11e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	0fdb      	lsrs	r3, r3, #31
 8006e00:	07da      	lsls	r2, r3, #31
 8006e02:	2380      	movs	r3, #128	; 0x80
 8006e04:	061b      	lsls	r3, r3, #24
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d0e1      	beq.n	8006dce <HAL_ADCEx_Calibration_Start+0x9e>
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	68d9      	ldr	r1, [r3, #12]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	68fa      	ldr	r2, [r7, #12]
 8006e16:	430a      	orrs	r2, r1
 8006e18:	60da      	str	r2, [r3, #12]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e1e:	2203      	movs	r2, #3
 8006e20:	4393      	bics	r3, r2
 8006e22:	2201      	movs	r2, #1
 8006e24:	431a      	orrs	r2, r3
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	655a      	str	r2, [r3, #84]	; 0x54
 8006e2a:	e009      	b.n	8006e40 <HAL_ADCEx_Calibration_Start+0x110>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e30:	2220      	movs	r2, #32
 8006e32:	431a      	orrs	r2, r3
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 8006e38:	2317      	movs	r3, #23
 8006e3a:	18fb      	adds	r3, r7, r3
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2250      	movs	r2, #80	; 0x50
 8006e44:	2100      	movs	r1, #0
 8006e46:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8006e48:	2317      	movs	r3, #23
 8006e4a:	18fb      	adds	r3, r7, r3
 8006e4c:	781b      	ldrb	r3, [r3, #0]
}
 8006e4e:	0018      	movs	r0, r3
 8006e50:	46bd      	mov	sp, r7
 8006e52:	b006      	add	sp, #24
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	46c0      	nop			; (mov r8, r8)
 8006e58:	fffffefd 	.word	0xfffffefd

08006e5c <__NVIC_EnableIRQ>:
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b082      	sub	sp, #8
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	0002      	movs	r2, r0
 8006e64:	1dfb      	adds	r3, r7, #7
 8006e66:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006e68:	1dfb      	adds	r3, r7, #7
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	2b7f      	cmp	r3, #127	; 0x7f
 8006e6e:	d809      	bhi.n	8006e84 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e70:	1dfb      	adds	r3, r7, #7
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	001a      	movs	r2, r3
 8006e76:	231f      	movs	r3, #31
 8006e78:	401a      	ands	r2, r3
 8006e7a:	4b04      	ldr	r3, [pc, #16]	; (8006e8c <__NVIC_EnableIRQ+0x30>)
 8006e7c:	2101      	movs	r1, #1
 8006e7e:	4091      	lsls	r1, r2
 8006e80:	000a      	movs	r2, r1
 8006e82:	601a      	str	r2, [r3, #0]
}
 8006e84:	46c0      	nop			; (mov r8, r8)
 8006e86:	46bd      	mov	sp, r7
 8006e88:	b002      	add	sp, #8
 8006e8a:	bd80      	pop	{r7, pc}
 8006e8c:	e000e100 	.word	0xe000e100

08006e90 <__NVIC_DisableIRQ>:
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b082      	sub	sp, #8
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	0002      	movs	r2, r0
 8006e98:	1dfb      	adds	r3, r7, #7
 8006e9a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006e9c:	1dfb      	adds	r3, r7, #7
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	2b7f      	cmp	r3, #127	; 0x7f
 8006ea2:	d810      	bhi.n	8006ec6 <__NVIC_DisableIRQ+0x36>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006ea4:	1dfb      	adds	r3, r7, #7
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	001a      	movs	r2, r3
 8006eaa:	231f      	movs	r3, #31
 8006eac:	4013      	ands	r3, r2
 8006eae:	4908      	ldr	r1, [pc, #32]	; (8006ed0 <__NVIC_DisableIRQ+0x40>)
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	409a      	lsls	r2, r3
 8006eb4:	0013      	movs	r3, r2
 8006eb6:	2280      	movs	r2, #128	; 0x80
 8006eb8:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006eba:	f3bf 8f4f 	dsb	sy
}
 8006ebe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8006ec0:	f3bf 8f6f 	isb	sy
}
 8006ec4:	46c0      	nop			; (mov r8, r8)
}
 8006ec6:	46c0      	nop			; (mov r8, r8)
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	b002      	add	sp, #8
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	46c0      	nop			; (mov r8, r8)
 8006ed0:	e000e100 	.word	0xe000e100

08006ed4 <__NVIC_SetPriority>:
{
 8006ed4:	b590      	push	{r4, r7, lr}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	0002      	movs	r2, r0
 8006edc:	6039      	str	r1, [r7, #0]
 8006ede:	1dfb      	adds	r3, r7, #7
 8006ee0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006ee2:	1dfb      	adds	r3, r7, #7
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	2b7f      	cmp	r3, #127	; 0x7f
 8006ee8:	d828      	bhi.n	8006f3c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006eea:	4a2f      	ldr	r2, [pc, #188]	; (8006fa8 <__NVIC_SetPriority+0xd4>)
 8006eec:	1dfb      	adds	r3, r7, #7
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	b25b      	sxtb	r3, r3
 8006ef2:	089b      	lsrs	r3, r3, #2
 8006ef4:	33c0      	adds	r3, #192	; 0xc0
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	589b      	ldr	r3, [r3, r2]
 8006efa:	1dfa      	adds	r2, r7, #7
 8006efc:	7812      	ldrb	r2, [r2, #0]
 8006efe:	0011      	movs	r1, r2
 8006f00:	2203      	movs	r2, #3
 8006f02:	400a      	ands	r2, r1
 8006f04:	00d2      	lsls	r2, r2, #3
 8006f06:	21ff      	movs	r1, #255	; 0xff
 8006f08:	4091      	lsls	r1, r2
 8006f0a:	000a      	movs	r2, r1
 8006f0c:	43d2      	mvns	r2, r2
 8006f0e:	401a      	ands	r2, r3
 8006f10:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	019b      	lsls	r3, r3, #6
 8006f16:	22ff      	movs	r2, #255	; 0xff
 8006f18:	401a      	ands	r2, r3
 8006f1a:	1dfb      	adds	r3, r7, #7
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	0018      	movs	r0, r3
 8006f20:	2303      	movs	r3, #3
 8006f22:	4003      	ands	r3, r0
 8006f24:	00db      	lsls	r3, r3, #3
 8006f26:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006f28:	481f      	ldr	r0, [pc, #124]	; (8006fa8 <__NVIC_SetPriority+0xd4>)
 8006f2a:	1dfb      	adds	r3, r7, #7
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	b25b      	sxtb	r3, r3
 8006f30:	089b      	lsrs	r3, r3, #2
 8006f32:	430a      	orrs	r2, r1
 8006f34:	33c0      	adds	r3, #192	; 0xc0
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	501a      	str	r2, [r3, r0]
}
 8006f3a:	e031      	b.n	8006fa0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006f3c:	4a1b      	ldr	r2, [pc, #108]	; (8006fac <__NVIC_SetPriority+0xd8>)
 8006f3e:	1dfb      	adds	r3, r7, #7
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	0019      	movs	r1, r3
 8006f44:	230f      	movs	r3, #15
 8006f46:	400b      	ands	r3, r1
 8006f48:	3b08      	subs	r3, #8
 8006f4a:	089b      	lsrs	r3, r3, #2
 8006f4c:	3306      	adds	r3, #6
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	18d3      	adds	r3, r2, r3
 8006f52:	3304      	adds	r3, #4
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	1dfa      	adds	r2, r7, #7
 8006f58:	7812      	ldrb	r2, [r2, #0]
 8006f5a:	0011      	movs	r1, r2
 8006f5c:	2203      	movs	r2, #3
 8006f5e:	400a      	ands	r2, r1
 8006f60:	00d2      	lsls	r2, r2, #3
 8006f62:	21ff      	movs	r1, #255	; 0xff
 8006f64:	4091      	lsls	r1, r2
 8006f66:	000a      	movs	r2, r1
 8006f68:	43d2      	mvns	r2, r2
 8006f6a:	401a      	ands	r2, r3
 8006f6c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	019b      	lsls	r3, r3, #6
 8006f72:	22ff      	movs	r2, #255	; 0xff
 8006f74:	401a      	ands	r2, r3
 8006f76:	1dfb      	adds	r3, r7, #7
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	0018      	movs	r0, r3
 8006f7c:	2303      	movs	r3, #3
 8006f7e:	4003      	ands	r3, r0
 8006f80:	00db      	lsls	r3, r3, #3
 8006f82:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006f84:	4809      	ldr	r0, [pc, #36]	; (8006fac <__NVIC_SetPriority+0xd8>)
 8006f86:	1dfb      	adds	r3, r7, #7
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	001c      	movs	r4, r3
 8006f8c:	230f      	movs	r3, #15
 8006f8e:	4023      	ands	r3, r4
 8006f90:	3b08      	subs	r3, #8
 8006f92:	089b      	lsrs	r3, r3, #2
 8006f94:	430a      	orrs	r2, r1
 8006f96:	3306      	adds	r3, #6
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	18c3      	adds	r3, r0, r3
 8006f9c:	3304      	adds	r3, #4
 8006f9e:	601a      	str	r2, [r3, #0]
}
 8006fa0:	46c0      	nop			; (mov r8, r8)
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	b003      	add	sp, #12
 8006fa6:	bd90      	pop	{r4, r7, pc}
 8006fa8:	e000e100 	.word	0xe000e100
 8006fac:	e000ed00 	.word	0xe000ed00

08006fb0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	60b9      	str	r1, [r7, #8]
 8006fb8:	607a      	str	r2, [r7, #4]
 8006fba:	210f      	movs	r1, #15
 8006fbc:	187b      	adds	r3, r7, r1
 8006fbe:	1c02      	adds	r2, r0, #0
 8006fc0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8006fc2:	68ba      	ldr	r2, [r7, #8]
 8006fc4:	187b      	adds	r3, r7, r1
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	b25b      	sxtb	r3, r3
 8006fca:	0011      	movs	r1, r2
 8006fcc:	0018      	movs	r0, r3
 8006fce:	f7ff ff81 	bl	8006ed4 <__NVIC_SetPriority>
}
 8006fd2:	46c0      	nop			; (mov r8, r8)
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	b004      	add	sp, #16
 8006fd8:	bd80      	pop	{r7, pc}

08006fda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006fda:	b580      	push	{r7, lr}
 8006fdc:	b082      	sub	sp, #8
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	0002      	movs	r2, r0
 8006fe2:	1dfb      	adds	r3, r7, #7
 8006fe4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006fe6:	1dfb      	adds	r3, r7, #7
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	b25b      	sxtb	r3, r3
 8006fec:	0018      	movs	r0, r3
 8006fee:	f7ff ff35 	bl	8006e5c <__NVIC_EnableIRQ>
}
 8006ff2:	46c0      	nop			; (mov r8, r8)
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	b002      	add	sp, #8
 8006ff8:	bd80      	pop	{r7, pc}

08006ffa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b082      	sub	sp, #8
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	0002      	movs	r2, r0
 8007002:	1dfb      	adds	r3, r7, #7
 8007004:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007006:	1dfb      	adds	r3, r7, #7
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	b25b      	sxtb	r3, r3
 800700c:	0018      	movs	r0, r3
 800700e:	f7ff ff3f 	bl	8006e90 <__NVIC_DisableIRQ>
}
 8007012:	46c0      	nop			; (mov r8, r8)
 8007014:	46bd      	mov	sp, r7
 8007016:	b002      	add	sp, #8
 8007018:	bd80      	pop	{r7, pc}
	...

0800701c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b084      	sub	sp, #16
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d101      	bne.n	800702e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	e061      	b.n	80070f2 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a32      	ldr	r2, [pc, #200]	; (80070fc <HAL_DMA_Init+0xe0>)
 8007034:	4694      	mov	ip, r2
 8007036:	4463      	add	r3, ip
 8007038:	2114      	movs	r1, #20
 800703a:	0018      	movs	r0, r3
 800703c:	f7f9 f86c 	bl	8000118 <__udivsi3>
 8007040:	0003      	movs	r3, r0
 8007042:	009a      	lsls	r2, r3, #2
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	4a2d      	ldr	r2, [pc, #180]	; (8007100 <HAL_DMA_Init+0xe4>)
 800704c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2225      	movs	r2, #37	; 0x25
 8007052:	2102      	movs	r1, #2
 8007054:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	4a28      	ldr	r2, [pc, #160]	; (8007104 <HAL_DMA_Init+0xe8>)
 8007062:	4013      	ands	r3, r2
 8007064:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800706e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800707a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	699b      	ldr	r3, [r3, #24]
 8007080:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007086:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6a1b      	ldr	r3, [r3, #32]
 800708c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800708e:	68fa      	ldr	r2, [r7, #12]
 8007090:	4313      	orrs	r3, r2
 8007092:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68fa      	ldr	r2, [r7, #12]
 800709a:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	689a      	ldr	r2, [r3, #8]
 80070a0:	2380      	movs	r3, #128	; 0x80
 80070a2:	01db      	lsls	r3, r3, #7
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d018      	beq.n	80070da <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80070a8:	4b17      	ldr	r3, [pc, #92]	; (8007108 <HAL_DMA_Init+0xec>)
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070b0:	211c      	movs	r1, #28
 80070b2:	400b      	ands	r3, r1
 80070b4:	210f      	movs	r1, #15
 80070b6:	4099      	lsls	r1, r3
 80070b8:	000b      	movs	r3, r1
 80070ba:	43d9      	mvns	r1, r3
 80070bc:	4b12      	ldr	r3, [pc, #72]	; (8007108 <HAL_DMA_Init+0xec>)
 80070be:	400a      	ands	r2, r1
 80070c0:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80070c2:	4b11      	ldr	r3, [pc, #68]	; (8007108 <HAL_DMA_Init+0xec>)
 80070c4:	6819      	ldr	r1, [r3, #0]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	685a      	ldr	r2, [r3, #4]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ce:	201c      	movs	r0, #28
 80070d0:	4003      	ands	r3, r0
 80070d2:	409a      	lsls	r2, r3
 80070d4:	4b0c      	ldr	r3, [pc, #48]	; (8007108 <HAL_DMA_Init+0xec>)
 80070d6:	430a      	orrs	r2, r1
 80070d8:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2225      	movs	r2, #37	; 0x25
 80070e4:	2101      	movs	r1, #1
 80070e6:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2224      	movs	r2, #36	; 0x24
 80070ec:	2100      	movs	r1, #0
 80070ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	0018      	movs	r0, r3
 80070f4:	46bd      	mov	sp, r7
 80070f6:	b004      	add	sp, #16
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	46c0      	nop			; (mov r8, r8)
 80070fc:	bffdfff8 	.word	0xbffdfff8
 8007100:	40020000 	.word	0x40020000
 8007104:	ffff800f 	.word	0xffff800f
 8007108:	400200a8 	.word	0x400200a8

0800710c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b082      	sub	sp, #8
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d101      	bne.n	800711e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	e04a      	b.n	80071b4 <HAL_DMA_DeInit+0xa8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	2101      	movs	r1, #1
 800712a:	438a      	bics	r2, r1
 800712c:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a22      	ldr	r2, [pc, #136]	; (80071bc <HAL_DMA_DeInit+0xb0>)
 8007134:	4694      	mov	ip, r2
 8007136:	4463      	add	r3, ip
 8007138:	2114      	movs	r1, #20
 800713a:	0018      	movs	r0, r3
 800713c:	f7f8 ffec 	bl	8000118 <__udivsi3>
 8007140:	0003      	movs	r3, r0
 8007142:	009a      	lsls	r2, r3, #2
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	4a1d      	ldr	r2, [pc, #116]	; (80071c0 <HAL_DMA_DeInit+0xb4>)
 800714c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	2200      	movs	r2, #0
 8007154:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800715a:	221c      	movs	r2, #28
 800715c:	401a      	ands	r2, r3
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007162:	2101      	movs	r1, #1
 8007164:	4091      	lsls	r1, r2
 8007166:	000a      	movs	r2, r1
 8007168:	605a      	str	r2, [r3, #4]

  /* Reset DMA channel selection register */
  /* DMA1 */
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800716a:	4b16      	ldr	r3, [pc, #88]	; (80071c4 <HAL_DMA_DeInit+0xb8>)
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007172:	211c      	movs	r1, #28
 8007174:	400b      	ands	r3, r1
 8007176:	210f      	movs	r1, #15
 8007178:	4099      	lsls	r1, r3
 800717a:	000b      	movs	r3, r1
 800717c:	43d9      	mvns	r1, r3
 800717e:	4b11      	ldr	r3, [pc, #68]	; (80071c4 <HAL_DMA_DeInit+0xb8>)
 8007180:	400a      	ands	r2, r1
 8007182:	601a      	str	r2, [r3, #0]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2225      	movs	r2, #37	; 0x25
 80071a6:	2100      	movs	r1, #0
 80071a8:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2224      	movs	r2, #36	; 0x24
 80071ae:	2100      	movs	r1, #0
 80071b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80071b2:	2300      	movs	r3, #0
}
 80071b4:	0018      	movs	r0, r3
 80071b6:	46bd      	mov	sp, r7
 80071b8:	b002      	add	sp, #8
 80071ba:	bd80      	pop	{r7, pc}
 80071bc:	bffdfff8 	.word	0xbffdfff8
 80071c0:	40020000 	.word	0x40020000
 80071c4:	400200a8 	.word	0x400200a8

080071c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b086      	sub	sp, #24
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	607a      	str	r2, [r7, #4]
 80071d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80071d6:	2317      	movs	r3, #23
 80071d8:	18fb      	adds	r3, r7, r3
 80071da:	2200      	movs	r2, #0
 80071dc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2224      	movs	r2, #36	; 0x24
 80071e2:	5c9b      	ldrb	r3, [r3, r2]
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d101      	bne.n	80071ec <HAL_DMA_Start_IT+0x24>
 80071e8:	2302      	movs	r3, #2
 80071ea:	e04f      	b.n	800728c <HAL_DMA_Start_IT+0xc4>
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2224      	movs	r2, #36	; 0x24
 80071f0:	2101      	movs	r1, #1
 80071f2:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2225      	movs	r2, #37	; 0x25
 80071f8:	5c9b      	ldrb	r3, [r3, r2]
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d13a      	bne.n	8007276 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2225      	movs	r2, #37	; 0x25
 8007204:	2102      	movs	r1, #2
 8007206:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2200      	movs	r2, #0
 800720c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	2101      	movs	r1, #1
 800721a:	438a      	bics	r2, r1
 800721c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	68b9      	ldr	r1, [r7, #8]
 8007224:	68f8      	ldr	r0, [r7, #12]
 8007226:	f000 f96a 	bl	80074fe <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800722e:	2b00      	cmp	r3, #0
 8007230:	d008      	beq.n	8007244 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	210e      	movs	r1, #14
 800723e:	430a      	orrs	r2, r1
 8007240:	601a      	str	r2, [r3, #0]
 8007242:	e00f      	b.n	8007264 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	2104      	movs	r1, #4
 8007250:	438a      	bics	r2, r1
 8007252:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	210a      	movs	r1, #10
 8007260:	430a      	orrs	r2, r1
 8007262:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2101      	movs	r1, #1
 8007270:	430a      	orrs	r2, r1
 8007272:	601a      	str	r2, [r3, #0]
 8007274:	e007      	b.n	8007286 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2224      	movs	r2, #36	; 0x24
 800727a:	2100      	movs	r1, #0
 800727c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800727e:	2317      	movs	r3, #23
 8007280:	18fb      	adds	r3, r7, r3
 8007282:	2202      	movs	r2, #2
 8007284:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8007286:	2317      	movs	r3, #23
 8007288:	18fb      	adds	r3, r7, r3
 800728a:	781b      	ldrb	r3, [r3, #0]
}
 800728c:	0018      	movs	r0, r3
 800728e:	46bd      	mov	sp, r7
 8007290:	b006      	add	sp, #24
 8007292:	bd80      	pop	{r7, pc}

08007294 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800729c:	230f      	movs	r3, #15
 800729e:	18fb      	adds	r3, r7, r3
 80072a0:	2200      	movs	r2, #0
 80072a2:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2225      	movs	r2, #37	; 0x25
 80072a8:	5c9b      	ldrb	r3, [r3, r2]
 80072aa:	b2db      	uxtb	r3, r3
 80072ac:	2b02      	cmp	r3, #2
 80072ae:	d008      	beq.n	80072c2 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2204      	movs	r2, #4
 80072b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2224      	movs	r2, #36	; 0x24
 80072ba:	2100      	movs	r1, #0
 80072bc:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80072be:	2301      	movs	r3, #1
 80072c0:	e024      	b.n	800730c <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	210e      	movs	r1, #14
 80072ce:	438a      	bics	r2, r1
 80072d0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2101      	movs	r1, #1
 80072de:	438a      	bics	r2, r1
 80072e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072e6:	221c      	movs	r2, #28
 80072e8:	401a      	ands	r2, r3
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ee:	2101      	movs	r1, #1
 80072f0:	4091      	lsls	r1, r2
 80072f2:	000a      	movs	r2, r1
 80072f4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2225      	movs	r2, #37	; 0x25
 80072fa:	2101      	movs	r1, #1
 80072fc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2224      	movs	r2, #36	; 0x24
 8007302:	2100      	movs	r1, #0
 8007304:	5499      	strb	r1, [r3, r2]

    return status;
 8007306:	230f      	movs	r3, #15
 8007308:	18fb      	adds	r3, r7, r3
 800730a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800730c:	0018      	movs	r0, r3
 800730e:	46bd      	mov	sp, r7
 8007310:	b004      	add	sp, #16
 8007312:	bd80      	pop	{r7, pc}

08007314 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800731c:	210f      	movs	r1, #15
 800731e:	187b      	adds	r3, r7, r1
 8007320:	2200      	movs	r2, #0
 8007322:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2225      	movs	r2, #37	; 0x25
 8007328:	5c9b      	ldrb	r3, [r3, r2]
 800732a:	b2db      	uxtb	r3, r3
 800732c:	2b02      	cmp	r3, #2
 800732e:	d006      	beq.n	800733e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2204      	movs	r2, #4
 8007334:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8007336:	187b      	adds	r3, r7, r1
 8007338:	2201      	movs	r2, #1
 800733a:	701a      	strb	r2, [r3, #0]
 800733c:	e02a      	b.n	8007394 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	210e      	movs	r1, #14
 800734a:	438a      	bics	r2, r1
 800734c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	2101      	movs	r1, #1
 800735a:	438a      	bics	r2, r1
 800735c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007362:	221c      	movs	r2, #28
 8007364:	401a      	ands	r2, r3
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736a:	2101      	movs	r1, #1
 800736c:	4091      	lsls	r1, r2
 800736e:	000a      	movs	r2, r1
 8007370:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2225      	movs	r2, #37	; 0x25
 8007376:	2101      	movs	r1, #1
 8007378:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2224      	movs	r2, #36	; 0x24
 800737e:	2100      	movs	r1, #0
 8007380:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007386:	2b00      	cmp	r3, #0
 8007388:	d004      	beq.n	8007394 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	0010      	movs	r0, r2
 8007392:	4798      	blx	r3
    }
  }
  return status;
 8007394:	230f      	movs	r3, #15
 8007396:	18fb      	adds	r3, r7, r3
 8007398:	781b      	ldrb	r3, [r3, #0]
}
 800739a:	0018      	movs	r0, r3
 800739c:	46bd      	mov	sp, r7
 800739e:	b004      	add	sp, #16
 80073a0:	bd80      	pop	{r7, pc}

080073a2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80073a2:	b580      	push	{r7, lr}
 80073a4:	b084      	sub	sp, #16
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073be:	221c      	movs	r2, #28
 80073c0:	4013      	ands	r3, r2
 80073c2:	2204      	movs	r2, #4
 80073c4:	409a      	lsls	r2, r3
 80073c6:	0013      	movs	r3, r2
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	4013      	ands	r3, r2
 80073cc:	d026      	beq.n	800741c <HAL_DMA_IRQHandler+0x7a>
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	2204      	movs	r2, #4
 80073d2:	4013      	ands	r3, r2
 80073d4:	d022      	beq.n	800741c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	2220      	movs	r2, #32
 80073de:	4013      	ands	r3, r2
 80073e0:	d107      	bne.n	80073f2 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2104      	movs	r1, #4
 80073ee:	438a      	bics	r2, r1
 80073f0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073f6:	221c      	movs	r2, #28
 80073f8:	401a      	ands	r2, r3
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073fe:	2104      	movs	r1, #4
 8007400:	4091      	lsls	r1, r2
 8007402:	000a      	movs	r2, r1
 8007404:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800740a:	2b00      	cmp	r3, #0
 800740c:	d100      	bne.n	8007410 <HAL_DMA_IRQHandler+0x6e>
 800740e:	e071      	b.n	80074f4 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	0010      	movs	r0, r2
 8007418:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800741a:	e06b      	b.n	80074f4 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007420:	221c      	movs	r2, #28
 8007422:	4013      	ands	r3, r2
 8007424:	2202      	movs	r2, #2
 8007426:	409a      	lsls	r2, r3
 8007428:	0013      	movs	r3, r2
 800742a:	68fa      	ldr	r2, [r7, #12]
 800742c:	4013      	ands	r3, r2
 800742e:	d02d      	beq.n	800748c <HAL_DMA_IRQHandler+0xea>
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	2202      	movs	r2, #2
 8007434:	4013      	ands	r3, r2
 8007436:	d029      	beq.n	800748c <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	2220      	movs	r2, #32
 8007440:	4013      	ands	r3, r2
 8007442:	d10b      	bne.n	800745c <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	210a      	movs	r1, #10
 8007450:	438a      	bics	r2, r1
 8007452:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2225      	movs	r2, #37	; 0x25
 8007458:	2101      	movs	r1, #1
 800745a:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007460:	221c      	movs	r2, #28
 8007462:	401a      	ands	r2, r3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007468:	2102      	movs	r1, #2
 800746a:	4091      	lsls	r1, r2
 800746c:	000a      	movs	r2, r1
 800746e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2224      	movs	r2, #36	; 0x24
 8007474:	2100      	movs	r1, #0
 8007476:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800747c:	2b00      	cmp	r3, #0
 800747e:	d039      	beq.n	80074f4 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	0010      	movs	r0, r2
 8007488:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800748a:	e033      	b.n	80074f4 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007490:	221c      	movs	r2, #28
 8007492:	4013      	ands	r3, r2
 8007494:	2208      	movs	r2, #8
 8007496:	409a      	lsls	r2, r3
 8007498:	0013      	movs	r3, r2
 800749a:	68fa      	ldr	r2, [r7, #12]
 800749c:	4013      	ands	r3, r2
 800749e:	d02a      	beq.n	80074f6 <HAL_DMA_IRQHandler+0x154>
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	2208      	movs	r2, #8
 80074a4:	4013      	ands	r3, r2
 80074a6:	d026      	beq.n	80074f6 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	681a      	ldr	r2, [r3, #0]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	210e      	movs	r1, #14
 80074b4:	438a      	bics	r2, r1
 80074b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074bc:	221c      	movs	r2, #28
 80074be:	401a      	ands	r2, r3
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c4:	2101      	movs	r1, #1
 80074c6:	4091      	lsls	r1, r2
 80074c8:	000a      	movs	r2, r1
 80074ca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2201      	movs	r2, #1
 80074d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2225      	movs	r2, #37	; 0x25
 80074d6:	2101      	movs	r1, #1
 80074d8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2224      	movs	r2, #36	; 0x24
 80074de:	2100      	movs	r1, #0
 80074e0:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d005      	beq.n	80074f6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	0010      	movs	r0, r2
 80074f2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80074f4:	46c0      	nop			; (mov r8, r8)
 80074f6:	46c0      	nop			; (mov r8, r8)
}
 80074f8:	46bd      	mov	sp, r7
 80074fa:	b004      	add	sp, #16
 80074fc:	bd80      	pop	{r7, pc}

080074fe <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80074fe:	b580      	push	{r7, lr}
 8007500:	b084      	sub	sp, #16
 8007502:	af00      	add	r7, sp, #0
 8007504:	60f8      	str	r0, [r7, #12]
 8007506:	60b9      	str	r1, [r7, #8]
 8007508:	607a      	str	r2, [r7, #4]
 800750a:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007510:	221c      	movs	r2, #28
 8007512:	401a      	ands	r2, r3
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007518:	2101      	movs	r1, #1
 800751a:	4091      	lsls	r1, r2
 800751c:	000a      	movs	r2, r1
 800751e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	683a      	ldr	r2, [r7, #0]
 8007526:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	2b10      	cmp	r3, #16
 800752e:	d108      	bne.n	8007542 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	68ba      	ldr	r2, [r7, #8]
 800753e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007540:	e007      	b.n	8007552 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	68ba      	ldr	r2, [r7, #8]
 8007548:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	60da      	str	r2, [r3, #12]
}
 8007552:	46c0      	nop			; (mov r8, r8)
 8007554:	46bd      	mov	sp, r7
 8007556:	b004      	add	sp, #16
 8007558:	bd80      	pop	{r7, pc}

0800755a <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800755a:	b580      	push	{r7, lr}
 800755c:	b086      	sub	sp, #24
 800755e:	af00      	add	r7, sp, #0
 8007560:	60f8      	str	r0, [r7, #12]
 8007562:	607a      	str	r2, [r7, #4]
 8007564:	200b      	movs	r0, #11
 8007566:	183b      	adds	r3, r7, r0
 8007568:	1c0a      	adds	r2, r1, #0
 800756a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800756c:	2317      	movs	r3, #23
 800756e:	18fb      	adds	r3, r7, r3
 8007570:	2200      	movs	r2, #0
 8007572:	701a      	strb	r2, [r3, #0]

  switch (CallbackID)
 8007574:	183b      	adds	r3, r7, r0
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d103      	bne.n	8007584 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	605a      	str	r2, [r3, #4]
      break;
 8007582:	e004      	b.n	800758e <HAL_EXTI_RegisterCallback+0x34>

    default:
      status = HAL_ERROR;
 8007584:	2317      	movs	r3, #23
 8007586:	18fb      	adds	r3, r7, r3
 8007588:	2201      	movs	r2, #1
 800758a:	701a      	strb	r2, [r3, #0]
      break;
 800758c:	46c0      	nop			; (mov r8, r8)
  }

  return status;
 800758e:	2317      	movs	r3, #23
 8007590:	18fb      	adds	r3, r7, r3
 8007592:	781b      	ldrb	r3, [r3, #0]
}
 8007594:	0018      	movs	r0, r3
 8007596:	46bd      	mov	sp, r7
 8007598:	b006      	add	sp, #24
 800759a:	bd80      	pop	{r7, pc}

0800759c <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b082      	sub	sp, #8
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d101      	bne.n	80075b0 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80075ac:	2301      	movs	r3, #1
 80075ae:	e003      	b.n	80075b8 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	683a      	ldr	r2, [r7, #0]
 80075b4:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80075b6:	2300      	movs	r3, #0
  }
}
 80075b8:	0018      	movs	r0, r3
 80075ba:	46bd      	mov	sp, r7
 80075bc:	b002      	add	sp, #8
 80075be:	bd80      	pop	{r7, pc}

080075c0 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b084      	sub	sp, #16
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	221f      	movs	r2, #31
 80075ce:	4013      	ands	r3, r2
 80075d0:	2201      	movs	r2, #1
 80075d2:	409a      	lsls	r2, r3
 80075d4:	0013      	movs	r3, r2
 80075d6:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 80075d8:	4b0a      	ldr	r3, [pc, #40]	; (8007604 <HAL_EXTI_IRQHandler+0x44>)
 80075da:	695a      	ldr	r2, [r3, #20]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	4013      	ands	r3, r2
 80075e0:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d009      	beq.n	80075fc <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 80075e8:	4b06      	ldr	r3, [pc, #24]	; (8007604 <HAL_EXTI_IRQHandler+0x44>)
 80075ea:	68fa      	ldr	r2, [r7, #12]
 80075ec:	615a      	str	r2, [r3, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d002      	beq.n	80075fc <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	4798      	blx	r3
    }
  }
}
 80075fc:	46c0      	nop			; (mov r8, r8)
 80075fe:	46bd      	mov	sp, r7
 8007600:	b004      	add	sp, #16
 8007602:	bd80      	pop	{r7, pc}
 8007604:	40010400 	.word	0x40010400

08007608 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b084      	sub	sp, #16
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8007610:	f7fd fbe3 	bl	8004dda <HAL_GetTick>
 8007614:	0003      	movs	r3, r0
 8007616:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8007618:	e00f      	b.n	800763a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	3301      	adds	r3, #1
 800761e:	d00c      	beq.n	800763a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d007      	beq.n	8007636 <FLASH_WaitForLastOperation+0x2e>
 8007626:	f7fd fbd8 	bl	8004dda <HAL_GetTick>
 800762a:	0002      	movs	r2, r0
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	1ad3      	subs	r3, r2, r3
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	429a      	cmp	r2, r3
 8007634:	d201      	bcs.n	800763a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8007636:	2303      	movs	r3, #3
 8007638:	e052      	b.n	80076e0 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800763a:	4b2b      	ldr	r3, [pc, #172]	; (80076e8 <FLASH_WaitForLastOperation+0xe0>)
 800763c:	699b      	ldr	r3, [r3, #24]
 800763e:	2201      	movs	r2, #1
 8007640:	4013      	ands	r3, r2
 8007642:	2b01      	cmp	r3, #1
 8007644:	d0e9      	beq.n	800761a <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8007646:	4b28      	ldr	r3, [pc, #160]	; (80076e8 <FLASH_WaitForLastOperation+0xe0>)
 8007648:	699b      	ldr	r3, [r3, #24]
 800764a:	2202      	movs	r2, #2
 800764c:	4013      	ands	r3, r2
 800764e:	2b02      	cmp	r3, #2
 8007650:	d102      	bne.n	8007658 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007652:	4b25      	ldr	r3, [pc, #148]	; (80076e8 <FLASH_WaitForLastOperation+0xe0>)
 8007654:	2202      	movs	r2, #2
 8007656:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8007658:	4b23      	ldr	r3, [pc, #140]	; (80076e8 <FLASH_WaitForLastOperation+0xe0>)
 800765a:	699a      	ldr	r2, [r3, #24]
 800765c:	2380      	movs	r3, #128	; 0x80
 800765e:	005b      	lsls	r3, r3, #1
 8007660:	401a      	ands	r2, r3
 8007662:	2380      	movs	r3, #128	; 0x80
 8007664:	005b      	lsls	r3, r3, #1
 8007666:	429a      	cmp	r2, r3
 8007668:	d035      	beq.n	80076d6 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800766a:	4b1f      	ldr	r3, [pc, #124]	; (80076e8 <FLASH_WaitForLastOperation+0xe0>)
 800766c:	699a      	ldr	r2, [r3, #24]
 800766e:	2380      	movs	r3, #128	; 0x80
 8007670:	009b      	lsls	r3, r3, #2
 8007672:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8007674:	2380      	movs	r3, #128	; 0x80
 8007676:	009b      	lsls	r3, r3, #2
 8007678:	429a      	cmp	r2, r3
 800767a:	d02c      	beq.n	80076d6 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800767c:	4b1a      	ldr	r3, [pc, #104]	; (80076e8 <FLASH_WaitForLastOperation+0xe0>)
 800767e:	699a      	ldr	r2, [r3, #24]
 8007680:	2380      	movs	r3, #128	; 0x80
 8007682:	00db      	lsls	r3, r3, #3
 8007684:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8007686:	2380      	movs	r3, #128	; 0x80
 8007688:	00db      	lsls	r3, r3, #3
 800768a:	429a      	cmp	r2, r3
 800768c:	d023      	beq.n	80076d6 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800768e:	4b16      	ldr	r3, [pc, #88]	; (80076e8 <FLASH_WaitForLastOperation+0xe0>)
 8007690:	699a      	ldr	r2, [r3, #24]
 8007692:	2380      	movs	r3, #128	; 0x80
 8007694:	011b      	lsls	r3, r3, #4
 8007696:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8007698:	2380      	movs	r3, #128	; 0x80
 800769a:	011b      	lsls	r3, r3, #4
 800769c:	429a      	cmp	r2, r3
 800769e:	d01a      	beq.n	80076d6 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 80076a0:	4b11      	ldr	r3, [pc, #68]	; (80076e8 <FLASH_WaitForLastOperation+0xe0>)
 80076a2:	699a      	ldr	r2, [r3, #24]
 80076a4:	2380      	movs	r3, #128	; 0x80
 80076a6:	019b      	lsls	r3, r3, #6
 80076a8:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 80076aa:	2380      	movs	r3, #128	; 0x80
 80076ac:	019b      	lsls	r3, r3, #6
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d011      	beq.n	80076d6 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 80076b2:	4b0d      	ldr	r3, [pc, #52]	; (80076e8 <FLASH_WaitForLastOperation+0xe0>)
 80076b4:	699a      	ldr	r2, [r3, #24]
 80076b6:	2380      	movs	r3, #128	; 0x80
 80076b8:	029b      	lsls	r3, r3, #10
 80076ba:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 80076bc:	2380      	movs	r3, #128	; 0x80
 80076be:	029b      	lsls	r3, r3, #10
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d008      	beq.n	80076d6 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 80076c4:	4b08      	ldr	r3, [pc, #32]	; (80076e8 <FLASH_WaitForLastOperation+0xe0>)
 80076c6:	699a      	ldr	r2, [r3, #24]
 80076c8:	2380      	movs	r3, #128	; 0x80
 80076ca:	025b      	lsls	r3, r3, #9
 80076cc:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 80076ce:	2380      	movs	r3, #128	; 0x80
 80076d0:	025b      	lsls	r3, r3, #9
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d103      	bne.n	80076de <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 80076d6:	f000 f809 	bl	80076ec <FLASH_SetErrorCode>
    return HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	e000      	b.n	80076e0 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 80076de:	2300      	movs	r3, #0
}
 80076e0:	0018      	movs	r0, r3
 80076e2:	46bd      	mov	sp, r7
 80076e4:	b004      	add	sp, #16
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	40022000 	.word	0x40022000

080076ec <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b082      	sub	sp, #8
 80076f0:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 80076f2:	2300      	movs	r3, #0
 80076f4:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80076f6:	4b49      	ldr	r3, [pc, #292]	; (800781c <FLASH_SetErrorCode+0x130>)
 80076f8:	699a      	ldr	r2, [r3, #24]
 80076fa:	2380      	movs	r3, #128	; 0x80
 80076fc:	005b      	lsls	r3, r3, #1
 80076fe:	401a      	ands	r2, r3
 8007700:	2380      	movs	r3, #128	; 0x80
 8007702:	005b      	lsls	r3, r3, #1
 8007704:	429a      	cmp	r2, r3
 8007706:	d10a      	bne.n	800771e <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8007708:	4b45      	ldr	r3, [pc, #276]	; (8007820 <FLASH_SetErrorCode+0x134>)
 800770a:	695b      	ldr	r3, [r3, #20]
 800770c:	2202      	movs	r2, #2
 800770e:	431a      	orrs	r2, r3
 8007710:	4b43      	ldr	r3, [pc, #268]	; (8007820 <FLASH_SetErrorCode+0x134>)
 8007712:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2280      	movs	r2, #128	; 0x80
 8007718:	0052      	lsls	r2, r2, #1
 800771a:	4313      	orrs	r3, r2
 800771c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800771e:	4b3f      	ldr	r3, [pc, #252]	; (800781c <FLASH_SetErrorCode+0x130>)
 8007720:	699a      	ldr	r2, [r3, #24]
 8007722:	2380      	movs	r3, #128	; 0x80
 8007724:	009b      	lsls	r3, r3, #2
 8007726:	401a      	ands	r2, r3
 8007728:	2380      	movs	r3, #128	; 0x80
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	429a      	cmp	r2, r3
 800772e:	d10a      	bne.n	8007746 <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8007730:	4b3b      	ldr	r3, [pc, #236]	; (8007820 <FLASH_SetErrorCode+0x134>)
 8007732:	695b      	ldr	r3, [r3, #20]
 8007734:	2201      	movs	r2, #1
 8007736:	431a      	orrs	r2, r3
 8007738:	4b39      	ldr	r3, [pc, #228]	; (8007820 <FLASH_SetErrorCode+0x134>)
 800773a:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2280      	movs	r2, #128	; 0x80
 8007740:	0092      	lsls	r2, r2, #2
 8007742:	4313      	orrs	r3, r2
 8007744:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8007746:	4b35      	ldr	r3, [pc, #212]	; (800781c <FLASH_SetErrorCode+0x130>)
 8007748:	699a      	ldr	r2, [r3, #24]
 800774a:	2380      	movs	r3, #128	; 0x80
 800774c:	00db      	lsls	r3, r3, #3
 800774e:	401a      	ands	r2, r3
 8007750:	2380      	movs	r3, #128	; 0x80
 8007752:	00db      	lsls	r3, r3, #3
 8007754:	429a      	cmp	r2, r3
 8007756:	d10a      	bne.n	800776e <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8007758:	4b31      	ldr	r3, [pc, #196]	; (8007820 <FLASH_SetErrorCode+0x134>)
 800775a:	695b      	ldr	r3, [r3, #20]
 800775c:	2208      	movs	r2, #8
 800775e:	431a      	orrs	r2, r3
 8007760:	4b2f      	ldr	r3, [pc, #188]	; (8007820 <FLASH_SetErrorCode+0x134>)
 8007762:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2280      	movs	r2, #128	; 0x80
 8007768:	00d2      	lsls	r2, r2, #3
 800776a:	4313      	orrs	r3, r2
 800776c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800776e:	4b2b      	ldr	r3, [pc, #172]	; (800781c <FLASH_SetErrorCode+0x130>)
 8007770:	699a      	ldr	r2, [r3, #24]
 8007772:	2380      	movs	r3, #128	; 0x80
 8007774:	011b      	lsls	r3, r3, #4
 8007776:	401a      	ands	r2, r3
 8007778:	2380      	movs	r3, #128	; 0x80
 800777a:	011b      	lsls	r3, r3, #4
 800777c:	429a      	cmp	r2, r3
 800777e:	d10a      	bne.n	8007796 <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8007780:	4b27      	ldr	r3, [pc, #156]	; (8007820 <FLASH_SetErrorCode+0x134>)
 8007782:	695b      	ldr	r3, [r3, #20]
 8007784:	2204      	movs	r2, #4
 8007786:	431a      	orrs	r2, r3
 8007788:	4b25      	ldr	r3, [pc, #148]	; (8007820 <FLASH_SetErrorCode+0x134>)
 800778a:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2280      	movs	r2, #128	; 0x80
 8007790:	0112      	lsls	r2, r2, #4
 8007792:	4313      	orrs	r3, r2
 8007794:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 8007796:	4b21      	ldr	r3, [pc, #132]	; (800781c <FLASH_SetErrorCode+0x130>)
 8007798:	699a      	ldr	r2, [r3, #24]
 800779a:	2380      	movs	r3, #128	; 0x80
 800779c:	019b      	lsls	r3, r3, #6
 800779e:	401a      	ands	r2, r3
 80077a0:	2380      	movs	r3, #128	; 0x80
 80077a2:	019b      	lsls	r3, r3, #6
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d10a      	bne.n	80077be <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80077a8:	4b1d      	ldr	r3, [pc, #116]	; (8007820 <FLASH_SetErrorCode+0x134>)
 80077aa:	695b      	ldr	r3, [r3, #20]
 80077ac:	2210      	movs	r2, #16
 80077ae:	431a      	orrs	r2, r3
 80077b0:	4b1b      	ldr	r3, [pc, #108]	; (8007820 <FLASH_SetErrorCode+0x134>)
 80077b2:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2280      	movs	r2, #128	; 0x80
 80077b8:	0192      	lsls	r2, r2, #6
 80077ba:	4313      	orrs	r3, r2
 80077bc:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 80077be:	4b17      	ldr	r3, [pc, #92]	; (800781c <FLASH_SetErrorCode+0x130>)
 80077c0:	699a      	ldr	r2, [r3, #24]
 80077c2:	2380      	movs	r3, #128	; 0x80
 80077c4:	029b      	lsls	r3, r3, #10
 80077c6:	401a      	ands	r2, r3
 80077c8:	2380      	movs	r3, #128	; 0x80
 80077ca:	029b      	lsls	r3, r3, #10
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d109      	bne.n	80077e4 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 80077d0:	4b13      	ldr	r3, [pc, #76]	; (8007820 <FLASH_SetErrorCode+0x134>)
 80077d2:	695b      	ldr	r3, [r3, #20]
 80077d4:	2220      	movs	r2, #32
 80077d6:	431a      	orrs	r2, r3
 80077d8:	4b11      	ldr	r3, [pc, #68]	; (8007820 <FLASH_SetErrorCode+0x134>)
 80077da:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2220      	movs	r2, #32
 80077e0:	4313      	orrs	r3, r2
 80077e2:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 80077e4:	4b0d      	ldr	r3, [pc, #52]	; (800781c <FLASH_SetErrorCode+0x130>)
 80077e6:	699a      	ldr	r2, [r3, #24]
 80077e8:	2380      	movs	r3, #128	; 0x80
 80077ea:	025b      	lsls	r3, r3, #9
 80077ec:	401a      	ands	r2, r3
 80077ee:	2380      	movs	r3, #128	; 0x80
 80077f0:	025b      	lsls	r3, r3, #9
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d10a      	bne.n	800780c <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 80077f6:	4b0a      	ldr	r3, [pc, #40]	; (8007820 <FLASH_SetErrorCode+0x134>)
 80077f8:	695b      	ldr	r3, [r3, #20]
 80077fa:	2240      	movs	r2, #64	; 0x40
 80077fc:	431a      	orrs	r2, r3
 80077fe:	4b08      	ldr	r3, [pc, #32]	; (8007820 <FLASH_SetErrorCode+0x134>)
 8007800:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2280      	movs	r2, #128	; 0x80
 8007806:	0252      	lsls	r2, r2, #9
 8007808:	4313      	orrs	r3, r2
 800780a:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800780c:	4b03      	ldr	r3, [pc, #12]	; (800781c <FLASH_SetErrorCode+0x130>)
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	619a      	str	r2, [r3, #24]
}  
 8007812:	46c0      	nop			; (mov r8, r8)
 8007814:	46bd      	mov	sp, r7
 8007816:	b002      	add	sp, #8
 8007818:	bd80      	pop	{r7, pc}
 800781a:	46c0      	nop			; (mov r8, r8)
 800781c:	40022000 	.word	0x40022000
 8007820:	20001720 	.word	0x20001720

08007824 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b084      	sub	sp, #16
 8007828:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800782a:	4b12      	ldr	r3, [pc, #72]	; (8007874 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	2201      	movs	r2, #1
 8007830:	4013      	ands	r3, r2
 8007832:	d019      	beq.n	8007868 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007834:	f3ef 8310 	mrs	r3, PRIMASK
 8007838:	607b      	str	r3, [r7, #4]
  return(result);
 800783a:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 800783c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800783e:	b672      	cpsid	i
}
 8007840:	46c0      	nop			; (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 8007842:	4b0c      	ldr	r3, [pc, #48]	; (8007874 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8007844:	4a0c      	ldr	r2, [pc, #48]	; (8007878 <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 8007846:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 8007848:	4b0a      	ldr	r3, [pc, #40]	; (8007874 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800784a:	4a0c      	ldr	r2, [pc, #48]	; (800787c <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 800784c:	60da      	str	r2, [r3, #12]
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	f383 8810 	msr	PRIMASK, r3
}
 8007858:	46c0      	nop			; (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800785a:	4b06      	ldr	r3, [pc, #24]	; (8007874 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	2201      	movs	r2, #1
 8007860:	4013      	ands	r3, r2
 8007862:	d001      	beq.n	8007868 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 8007864:	2301      	movs	r3, #1
 8007866:	e000      	b.n	800786a <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 8007868:	2300      	movs	r3, #0
}
 800786a:	0018      	movs	r0, r3
 800786c:	46bd      	mov	sp, r7
 800786e:	b004      	add	sp, #16
 8007870:	bd80      	pop	{r7, pc}
 8007872:	46c0      	nop			; (mov r8, r8)
 8007874:	40022000 	.word	0x40022000
 8007878:	89abcdef 	.word	0x89abcdef
 800787c:	02030405 	.word	0x02030405

08007880 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8007884:	4b04      	ldr	r3, [pc, #16]	; (8007898 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 8007886:	685a      	ldr	r2, [r3, #4]
 8007888:	4b03      	ldr	r3, [pc, #12]	; (8007898 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800788a:	2101      	movs	r1, #1
 800788c:	430a      	orrs	r2, r1
 800788e:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 8007890:	2300      	movs	r3, #0
}
 8007892:	0018      	movs	r0, r3
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}
 8007898:	40022000 	.word	0x40022000

0800789c <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 800789c:	b5b0      	push	{r4, r5, r7, lr}
 800789e:	b084      	sub	sp, #16
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80078a4:	250f      	movs	r5, #15
 80078a6:	197b      	adds	r3, r7, r5
 80078a8:	2200      	movs	r2, #0
 80078aa:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80078ac:	197c      	adds	r4, r7, r5
 80078ae:	4b0f      	ldr	r3, [pc, #60]	; (80078ec <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 80078b0:	0018      	movs	r0, r3
 80078b2:	f7ff fea9 	bl	8007608 <FLASH_WaitForLastOperation>
 80078b6:	0003      	movs	r3, r0
 80078b8:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 80078ba:	0029      	movs	r1, r5
 80078bc:	187b      	adds	r3, r7, r1
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d10c      	bne.n	80078de <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80078c4:	4b0a      	ldr	r3, [pc, #40]	; (80078f0 <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 80078c6:	2200      	movs	r2, #0
 80078c8:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2200      	movs	r2, #0
 80078ce:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80078d0:	187c      	adds	r4, r7, r1
 80078d2:	4b06      	ldr	r3, [pc, #24]	; (80078ec <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 80078d4:	0018      	movs	r0, r3
 80078d6:	f7ff fe97 	bl	8007608 <FLASH_WaitForLastOperation>
 80078da:	0003      	movs	r3, r0
 80078dc:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 80078de:	230f      	movs	r3, #15
 80078e0:	18fb      	adds	r3, r7, r3
 80078e2:	781b      	ldrb	r3, [r3, #0]
}  
 80078e4:	0018      	movs	r0, r3
 80078e6:	46bd      	mov	sp, r7
 80078e8:	b004      	add	sp, #16
 80078ea:	bdb0      	pop	{r4, r5, r7, pc}
 80078ec:	0000c350 	.word	0x0000c350
 80078f0:	20001720 	.word	0x20001720

080078f4 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 80078f4:	b5b0      	push	{r4, r5, r7, lr}
 80078f6:	b086      	sub	sp, #24
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	60f8      	str	r0, [r7, #12]
 80078fc:	60b9      	str	r1, [r7, #8]
 80078fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007900:	2317      	movs	r3, #23
 8007902:	18fb      	adds	r3, r7, r3
 8007904:	2201      	movs	r2, #1
 8007906:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007908:	4b24      	ldr	r3, [pc, #144]	; (800799c <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800790a:	7c1b      	ldrb	r3, [r3, #16]
 800790c:	2b01      	cmp	r3, #1
 800790e:	d101      	bne.n	8007914 <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 8007910:	2302      	movs	r3, #2
 8007912:	e03e      	b.n	8007992 <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 8007914:	4b21      	ldr	r3, [pc, #132]	; (800799c <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8007916:	2201      	movs	r2, #1
 8007918:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800791a:	2517      	movs	r5, #23
 800791c:	197c      	adds	r4, r7, r5
 800791e:	4b20      	ldr	r3, [pc, #128]	; (80079a0 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 8007920:	0018      	movs	r0, r3
 8007922:	f7ff fe71 	bl	8007608 <FLASH_WaitForLastOperation>
 8007926:	0003      	movs	r3, r0
 8007928:	7023      	strb	r3, [r4, #0]
//  status = HAL_OK;
  
  if(status == HAL_OK)
 800792a:	197b      	adds	r3, r7, r5
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d129      	bne.n	8007986 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007932:	4b1a      	ldr	r3, [pc, #104]	; (800799c <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8007934:	2200      	movs	r2, #0
 8007936:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2b02      	cmp	r3, #2
 800793c:	d103      	bne.n	8007946 <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	687a      	ldr	r2, [r7, #4]
 8007942:	601a      	str	r2, [r3, #0]
 8007944:	e013      	b.n	800796e <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2b01      	cmp	r3, #1
 800794a:	d104      	bne.n	8007956 <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	687a      	ldr	r2, [r7, #4]
 8007950:	b292      	uxth	r2, r2
 8007952:	801a      	strh	r2, [r3, #0]
 8007954:	e00b      	b.n	800796e <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d104      	bne.n	8007966 <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	b2d2      	uxtb	r2, r2
 8007962:	701a      	strb	r2, [r3, #0]
 8007964:	e003      	b.n	800796e <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 8007966:	2317      	movs	r3, #23
 8007968:	18fb      	adds	r3, r7, r3
 800796a:	2201      	movs	r2, #1
 800796c:	701a      	strb	r2, [r3, #0]
    }

    if (status != HAL_OK)
 800796e:	2217      	movs	r2, #23
 8007970:	18bb      	adds	r3, r7, r2
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d006      	beq.n	8007986 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8007978:	18bc      	adds	r4, r7, r2
 800797a:	4b09      	ldr	r3, [pc, #36]	; (80079a0 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800797c:	0018      	movs	r0, r3
 800797e:	f7ff fe43 	bl	8007608 <FLASH_WaitForLastOperation>
 8007982:	0003      	movs	r3, r0
 8007984:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007986:	4b05      	ldr	r3, [pc, #20]	; (800799c <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8007988:	2200      	movs	r2, #0
 800798a:	741a      	strb	r2, [r3, #16]

  return status;
 800798c:	2317      	movs	r3, #23
 800798e:	18fb      	adds	r3, r7, r3
 8007990:	781b      	ldrb	r3, [r3, #0]
}
 8007992:	0018      	movs	r0, r3
 8007994:	46bd      	mov	sp, r7
 8007996:	b006      	add	sp, #24
 8007998:	bdb0      	pop	{r4, r5, r7, pc}
 800799a:	46c0      	nop			; (mov r8, r8)
 800799c:	20001720 	.word	0x20001720
 80079a0:	0000c350 	.word	0x0000c350

080079a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b086      	sub	sp, #24
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80079ae:	2300      	movs	r3, #0
 80079b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80079b2:	2300      	movs	r3, #0
 80079b4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80079b6:	2300      	movs	r3, #0
 80079b8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80079ba:	e155      	b.n	8007c68 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	2101      	movs	r1, #1
 80079c2:	697a      	ldr	r2, [r7, #20]
 80079c4:	4091      	lsls	r1, r2
 80079c6:	000a      	movs	r2, r1
 80079c8:	4013      	ands	r3, r2
 80079ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d100      	bne.n	80079d4 <HAL_GPIO_Init+0x30>
 80079d2:	e146      	b.n	8007c62 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d00b      	beq.n	80079f4 <HAL_GPIO_Init+0x50>
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	2b02      	cmp	r3, #2
 80079e2:	d007      	beq.n	80079f4 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80079e8:	2b11      	cmp	r3, #17
 80079ea:	d003      	beq.n	80079f4 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	2b12      	cmp	r3, #18
 80079f2:	d130      	bne.n	8007a56 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	005b      	lsls	r3, r3, #1
 80079fe:	2203      	movs	r2, #3
 8007a00:	409a      	lsls	r2, r3
 8007a02:	0013      	movs	r3, r2
 8007a04:	43da      	mvns	r2, r3
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	4013      	ands	r3, r2
 8007a0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	68da      	ldr	r2, [r3, #12]
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	005b      	lsls	r3, r3, #1
 8007a14:	409a      	lsls	r2, r3
 8007a16:	0013      	movs	r3, r2
 8007a18:	693a      	ldr	r2, [r7, #16]
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	693a      	ldr	r2, [r7, #16]
 8007a22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	409a      	lsls	r2, r3
 8007a30:	0013      	movs	r3, r2
 8007a32:	43da      	mvns	r2, r3
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	4013      	ands	r3, r2
 8007a38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	091b      	lsrs	r3, r3, #4
 8007a40:	2201      	movs	r2, #1
 8007a42:	401a      	ands	r2, r3
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	409a      	lsls	r2, r3
 8007a48:	0013      	movs	r3, r2
 8007a4a:	693a      	ldr	r2, [r7, #16]
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	693a      	ldr	r2, [r7, #16]
 8007a54:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	68db      	ldr	r3, [r3, #12]
 8007a5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	005b      	lsls	r3, r3, #1
 8007a60:	2203      	movs	r2, #3
 8007a62:	409a      	lsls	r2, r3
 8007a64:	0013      	movs	r3, r2
 8007a66:	43da      	mvns	r2, r3
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	4013      	ands	r3, r2
 8007a6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	689a      	ldr	r2, [r3, #8]
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	005b      	lsls	r3, r3, #1
 8007a76:	409a      	lsls	r2, r3
 8007a78:	0013      	movs	r3, r2
 8007a7a:	693a      	ldr	r2, [r7, #16]
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	693a      	ldr	r2, [r7, #16]
 8007a84:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	2b02      	cmp	r3, #2
 8007a8c:	d003      	beq.n	8007a96 <HAL_GPIO_Init+0xf2>
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	2b12      	cmp	r3, #18
 8007a94:	d123      	bne.n	8007ade <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	08da      	lsrs	r2, r3, #3
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	3208      	adds	r2, #8
 8007a9e:	0092      	lsls	r2, r2, #2
 8007aa0:	58d3      	ldr	r3, [r2, r3]
 8007aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	2207      	movs	r2, #7
 8007aa8:	4013      	ands	r3, r2
 8007aaa:	009b      	lsls	r3, r3, #2
 8007aac:	220f      	movs	r2, #15
 8007aae:	409a      	lsls	r2, r3
 8007ab0:	0013      	movs	r3, r2
 8007ab2:	43da      	mvns	r2, r3
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	4013      	ands	r3, r2
 8007ab8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	691a      	ldr	r2, [r3, #16]
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	2107      	movs	r1, #7
 8007ac2:	400b      	ands	r3, r1
 8007ac4:	009b      	lsls	r3, r3, #2
 8007ac6:	409a      	lsls	r2, r3
 8007ac8:	0013      	movs	r3, r2
 8007aca:	693a      	ldr	r2, [r7, #16]
 8007acc:	4313      	orrs	r3, r2
 8007ace:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	08da      	lsrs	r2, r3, #3
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	3208      	adds	r2, #8
 8007ad8:	0092      	lsls	r2, r2, #2
 8007ada:	6939      	ldr	r1, [r7, #16]
 8007adc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	005b      	lsls	r3, r3, #1
 8007ae8:	2203      	movs	r2, #3
 8007aea:	409a      	lsls	r2, r3
 8007aec:	0013      	movs	r3, r2
 8007aee:	43da      	mvns	r2, r3
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	4013      	ands	r3, r2
 8007af4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	2203      	movs	r2, #3
 8007afc:	401a      	ands	r2, r3
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	005b      	lsls	r3, r3, #1
 8007b02:	409a      	lsls	r2, r3
 8007b04:	0013      	movs	r3, r2
 8007b06:	693a      	ldr	r2, [r7, #16]
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	693a      	ldr	r2, [r7, #16]
 8007b10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	685a      	ldr	r2, [r3, #4]
 8007b16:	2380      	movs	r3, #128	; 0x80
 8007b18:	055b      	lsls	r3, r3, #21
 8007b1a:	4013      	ands	r3, r2
 8007b1c:	d100      	bne.n	8007b20 <HAL_GPIO_Init+0x17c>
 8007b1e:	e0a0      	b.n	8007c62 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b20:	4b57      	ldr	r3, [pc, #348]	; (8007c80 <HAL_GPIO_Init+0x2dc>)
 8007b22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b24:	4b56      	ldr	r3, [pc, #344]	; (8007c80 <HAL_GPIO_Init+0x2dc>)
 8007b26:	2101      	movs	r1, #1
 8007b28:	430a      	orrs	r2, r1
 8007b2a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8007b2c:	4a55      	ldr	r2, [pc, #340]	; (8007c84 <HAL_GPIO_Init+0x2e0>)
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	089b      	lsrs	r3, r3, #2
 8007b32:	3302      	adds	r3, #2
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	589b      	ldr	r3, [r3, r2]
 8007b38:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	2203      	movs	r2, #3
 8007b3e:	4013      	ands	r3, r2
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	220f      	movs	r2, #15
 8007b44:	409a      	lsls	r2, r3
 8007b46:	0013      	movs	r3, r2
 8007b48:	43da      	mvns	r2, r3
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	4013      	ands	r3, r2
 8007b4e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8007b50:	687a      	ldr	r2, [r7, #4]
 8007b52:	23a0      	movs	r3, #160	; 0xa0
 8007b54:	05db      	lsls	r3, r3, #23
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d01f      	beq.n	8007b9a <HAL_GPIO_Init+0x1f6>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	4a4a      	ldr	r2, [pc, #296]	; (8007c88 <HAL_GPIO_Init+0x2e4>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d019      	beq.n	8007b96 <HAL_GPIO_Init+0x1f2>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	4a49      	ldr	r2, [pc, #292]	; (8007c8c <HAL_GPIO_Init+0x2e8>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d013      	beq.n	8007b92 <HAL_GPIO_Init+0x1ee>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	4a48      	ldr	r2, [pc, #288]	; (8007c90 <HAL_GPIO_Init+0x2ec>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d00d      	beq.n	8007b8e <HAL_GPIO_Init+0x1ea>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	4a47      	ldr	r2, [pc, #284]	; (8007c94 <HAL_GPIO_Init+0x2f0>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d007      	beq.n	8007b8a <HAL_GPIO_Init+0x1e6>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	4a46      	ldr	r2, [pc, #280]	; (8007c98 <HAL_GPIO_Init+0x2f4>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d101      	bne.n	8007b86 <HAL_GPIO_Init+0x1e2>
 8007b82:	2305      	movs	r3, #5
 8007b84:	e00a      	b.n	8007b9c <HAL_GPIO_Init+0x1f8>
 8007b86:	2306      	movs	r3, #6
 8007b88:	e008      	b.n	8007b9c <HAL_GPIO_Init+0x1f8>
 8007b8a:	2304      	movs	r3, #4
 8007b8c:	e006      	b.n	8007b9c <HAL_GPIO_Init+0x1f8>
 8007b8e:	2303      	movs	r3, #3
 8007b90:	e004      	b.n	8007b9c <HAL_GPIO_Init+0x1f8>
 8007b92:	2302      	movs	r3, #2
 8007b94:	e002      	b.n	8007b9c <HAL_GPIO_Init+0x1f8>
 8007b96:	2301      	movs	r3, #1
 8007b98:	e000      	b.n	8007b9c <HAL_GPIO_Init+0x1f8>
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	697a      	ldr	r2, [r7, #20]
 8007b9e:	2103      	movs	r1, #3
 8007ba0:	400a      	ands	r2, r1
 8007ba2:	0092      	lsls	r2, r2, #2
 8007ba4:	4093      	lsls	r3, r2
 8007ba6:	693a      	ldr	r2, [r7, #16]
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007bac:	4935      	ldr	r1, [pc, #212]	; (8007c84 <HAL_GPIO_Init+0x2e0>)
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	089b      	lsrs	r3, r3, #2
 8007bb2:	3302      	adds	r3, #2
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	693a      	ldr	r2, [r7, #16]
 8007bb8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007bba:	4b38      	ldr	r3, [pc, #224]	; (8007c9c <HAL_GPIO_Init+0x2f8>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	43da      	mvns	r2, r3
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	4013      	ands	r3, r2
 8007bc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	685a      	ldr	r2, [r3, #4]
 8007bce:	2380      	movs	r3, #128	; 0x80
 8007bd0:	025b      	lsls	r3, r3, #9
 8007bd2:	4013      	ands	r3, r2
 8007bd4:	d003      	beq.n	8007bde <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8007bd6:	693a      	ldr	r2, [r7, #16]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8007bde:	4b2f      	ldr	r3, [pc, #188]	; (8007c9c <HAL_GPIO_Init+0x2f8>)
 8007be0:	693a      	ldr	r2, [r7, #16]
 8007be2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8007be4:	4b2d      	ldr	r3, [pc, #180]	; (8007c9c <HAL_GPIO_Init+0x2f8>)
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	43da      	mvns	r2, r3
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	4013      	ands	r3, r2
 8007bf2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	685a      	ldr	r2, [r3, #4]
 8007bf8:	2380      	movs	r3, #128	; 0x80
 8007bfa:	029b      	lsls	r3, r3, #10
 8007bfc:	4013      	ands	r3, r2
 8007bfe:	d003      	beq.n	8007c08 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8007c00:	693a      	ldr	r2, [r7, #16]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	4313      	orrs	r3, r2
 8007c06:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8007c08:	4b24      	ldr	r3, [pc, #144]	; (8007c9c <HAL_GPIO_Init+0x2f8>)
 8007c0a:	693a      	ldr	r2, [r7, #16]
 8007c0c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007c0e:	4b23      	ldr	r3, [pc, #140]	; (8007c9c <HAL_GPIO_Init+0x2f8>)
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	43da      	mvns	r2, r3
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	4013      	ands	r3, r2
 8007c1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	685a      	ldr	r2, [r3, #4]
 8007c22:	2380      	movs	r3, #128	; 0x80
 8007c24:	035b      	lsls	r3, r3, #13
 8007c26:	4013      	ands	r3, r2
 8007c28:	d003      	beq.n	8007c32 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8007c2a:	693a      	ldr	r2, [r7, #16]
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8007c32:	4b1a      	ldr	r3, [pc, #104]	; (8007c9c <HAL_GPIO_Init+0x2f8>)
 8007c34:	693a      	ldr	r2, [r7, #16]
 8007c36:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8007c38:	4b18      	ldr	r3, [pc, #96]	; (8007c9c <HAL_GPIO_Init+0x2f8>)
 8007c3a:	68db      	ldr	r3, [r3, #12]
 8007c3c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	43da      	mvns	r2, r3
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	4013      	ands	r3, r2
 8007c46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	685a      	ldr	r2, [r3, #4]
 8007c4c:	2380      	movs	r3, #128	; 0x80
 8007c4e:	039b      	lsls	r3, r3, #14
 8007c50:	4013      	ands	r3, r2
 8007c52:	d003      	beq.n	8007c5c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8007c54:	693a      	ldr	r2, [r7, #16]
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8007c5c:	4b0f      	ldr	r3, [pc, #60]	; (8007c9c <HAL_GPIO_Init+0x2f8>)
 8007c5e:	693a      	ldr	r2, [r7, #16]
 8007c60:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	3301      	adds	r3, #1
 8007c66:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	40da      	lsrs	r2, r3
 8007c70:	1e13      	subs	r3, r2, #0
 8007c72:	d000      	beq.n	8007c76 <HAL_GPIO_Init+0x2d2>
 8007c74:	e6a2      	b.n	80079bc <HAL_GPIO_Init+0x18>
  }
}
 8007c76:	46c0      	nop			; (mov r8, r8)
 8007c78:	46c0      	nop			; (mov r8, r8)
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	b006      	add	sp, #24
 8007c7e:	bd80      	pop	{r7, pc}
 8007c80:	40021000 	.word	0x40021000
 8007c84:	40010000 	.word	0x40010000
 8007c88:	50000400 	.word	0x50000400
 8007c8c:	50000800 	.word	0x50000800
 8007c90:	50000c00 	.word	0x50000c00
 8007c94:	50001000 	.word	0x50001000
 8007c98:	50001c00 	.word	0x50001c00
 8007c9c:	40010400 	.word	0x40010400

08007ca0 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b086      	sub	sp, #24
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007caa:	2300      	movs	r3, #0
 8007cac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 8007cb6:	e0bc      	b.n	8007e32 <HAL_GPIO_DeInit+0x192>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8007cb8:	2201      	movs	r2, #1
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	409a      	lsls	r2, r3
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	4013      	ands	r3, r2
 8007cc2:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d100      	bne.n	8007ccc <HAL_GPIO_DeInit+0x2c>
 8007cca:	e0af      	b.n	8007e2c <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8007ccc:	4a5e      	ldr	r2, [pc, #376]	; (8007e48 <HAL_GPIO_DeInit+0x1a8>)
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	089b      	lsrs	r3, r3, #2
 8007cd2:	3302      	adds	r3, #2
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	589b      	ldr	r3, [r3, r2]
 8007cd8:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	2203      	movs	r2, #3
 8007cde:	4013      	ands	r3, r2
 8007ce0:	009b      	lsls	r3, r3, #2
 8007ce2:	220f      	movs	r2, #15
 8007ce4:	409a      	lsls	r2, r3
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	4013      	ands	r3, r2
 8007cea:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	23a0      	movs	r3, #160	; 0xa0
 8007cf0:	05db      	lsls	r3, r3, #23
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d01f      	beq.n	8007d36 <HAL_GPIO_DeInit+0x96>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	4a54      	ldr	r2, [pc, #336]	; (8007e4c <HAL_GPIO_DeInit+0x1ac>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d019      	beq.n	8007d32 <HAL_GPIO_DeInit+0x92>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	4a53      	ldr	r2, [pc, #332]	; (8007e50 <HAL_GPIO_DeInit+0x1b0>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d013      	beq.n	8007d2e <HAL_GPIO_DeInit+0x8e>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	4a52      	ldr	r2, [pc, #328]	; (8007e54 <HAL_GPIO_DeInit+0x1b4>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d00d      	beq.n	8007d2a <HAL_GPIO_DeInit+0x8a>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	4a51      	ldr	r2, [pc, #324]	; (8007e58 <HAL_GPIO_DeInit+0x1b8>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d007      	beq.n	8007d26 <HAL_GPIO_DeInit+0x86>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	4a50      	ldr	r2, [pc, #320]	; (8007e5c <HAL_GPIO_DeInit+0x1bc>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d101      	bne.n	8007d22 <HAL_GPIO_DeInit+0x82>
 8007d1e:	2305      	movs	r3, #5
 8007d20:	e00a      	b.n	8007d38 <HAL_GPIO_DeInit+0x98>
 8007d22:	2306      	movs	r3, #6
 8007d24:	e008      	b.n	8007d38 <HAL_GPIO_DeInit+0x98>
 8007d26:	2304      	movs	r3, #4
 8007d28:	e006      	b.n	8007d38 <HAL_GPIO_DeInit+0x98>
 8007d2a:	2303      	movs	r3, #3
 8007d2c:	e004      	b.n	8007d38 <HAL_GPIO_DeInit+0x98>
 8007d2e:	2302      	movs	r3, #2
 8007d30:	e002      	b.n	8007d38 <HAL_GPIO_DeInit+0x98>
 8007d32:	2301      	movs	r3, #1
 8007d34:	e000      	b.n	8007d38 <HAL_GPIO_DeInit+0x98>
 8007d36:	2300      	movs	r3, #0
 8007d38:	697a      	ldr	r2, [r7, #20]
 8007d3a:	2103      	movs	r1, #3
 8007d3c:	400a      	ands	r2, r1
 8007d3e:	0092      	lsls	r2, r2, #2
 8007d40:	4093      	lsls	r3, r2
 8007d42:	68fa      	ldr	r2, [r7, #12]
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d132      	bne.n	8007dae <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007d48:	4b45      	ldr	r3, [pc, #276]	; (8007e60 <HAL_GPIO_DeInit+0x1c0>)
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	43d9      	mvns	r1, r3
 8007d50:	4b43      	ldr	r3, [pc, #268]	; (8007e60 <HAL_GPIO_DeInit+0x1c0>)
 8007d52:	400a      	ands	r2, r1
 8007d54:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8007d56:	4b42      	ldr	r3, [pc, #264]	; (8007e60 <HAL_GPIO_DeInit+0x1c0>)
 8007d58:	685a      	ldr	r2, [r3, #4]
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	43d9      	mvns	r1, r3
 8007d5e:	4b40      	ldr	r3, [pc, #256]	; (8007e60 <HAL_GPIO_DeInit+0x1c0>)
 8007d60:	400a      	ands	r2, r1
 8007d62:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007d64:	4b3e      	ldr	r3, [pc, #248]	; (8007e60 <HAL_GPIO_DeInit+0x1c0>)
 8007d66:	689a      	ldr	r2, [r3, #8]
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	43d9      	mvns	r1, r3
 8007d6c:	4b3c      	ldr	r3, [pc, #240]	; (8007e60 <HAL_GPIO_DeInit+0x1c0>)
 8007d6e:	400a      	ands	r2, r1
 8007d70:	609a      	str	r2, [r3, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007d72:	4b3b      	ldr	r3, [pc, #236]	; (8007e60 <HAL_GPIO_DeInit+0x1c0>)
 8007d74:	68da      	ldr	r2, [r3, #12]
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	43d9      	mvns	r1, r3
 8007d7a:	4b39      	ldr	r3, [pc, #228]	; (8007e60 <HAL_GPIO_DeInit+0x1c0>)
 8007d7c:	400a      	ands	r2, r1
 8007d7e:	60da      	str	r2, [r3, #12]
        
        tmp = (0x0FUL) << (4U * (position & 0x03U));
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	2203      	movs	r2, #3
 8007d84:	4013      	ands	r3, r2
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	220f      	movs	r2, #15
 8007d8a:	409a      	lsls	r2, r3
 8007d8c:	0013      	movs	r3, r2
 8007d8e:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007d90:	4a2d      	ldr	r2, [pc, #180]	; (8007e48 <HAL_GPIO_DeInit+0x1a8>)
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	089b      	lsrs	r3, r3, #2
 8007d96:	3302      	adds	r3, #2
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	589a      	ldr	r2, [r3, r2]
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	43d9      	mvns	r1, r3
 8007da0:	4829      	ldr	r0, [pc, #164]	; (8007e48 <HAL_GPIO_DeInit+0x1a8>)
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	089b      	lsrs	r3, r3, #2
 8007da6:	400a      	ands	r2, r1
 8007da8:	3302      	adds	r3, #2
 8007daa:	009b      	lsls	r3, r3, #2
 8007dac:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681a      	ldr	r2, [r3, #0]
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	005b      	lsls	r3, r3, #1
 8007db6:	2103      	movs	r1, #3
 8007db8:	4099      	lsls	r1, r3
 8007dba:	000b      	movs	r3, r1
 8007dbc:	431a      	orrs	r2, r3
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	08da      	lsrs	r2, r3, #3
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	3208      	adds	r2, #8
 8007dca:	0092      	lsls	r2, r2, #2
 8007dcc:	58d3      	ldr	r3, [r2, r3]
 8007dce:	697a      	ldr	r2, [r7, #20]
 8007dd0:	2107      	movs	r1, #7
 8007dd2:	400a      	ands	r2, r1
 8007dd4:	0092      	lsls	r2, r2, #2
 8007dd6:	210f      	movs	r1, #15
 8007dd8:	4091      	lsls	r1, r2
 8007dda:	000a      	movs	r2, r1
 8007ddc:	43d1      	mvns	r1, r2
 8007dde:	697a      	ldr	r2, [r7, #20]
 8007de0:	08d2      	lsrs	r2, r2, #3
 8007de2:	4019      	ands	r1, r3
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	3208      	adds	r2, #8
 8007de8:	0092      	lsls	r2, r2, #2
 8007dea:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	68db      	ldr	r3, [r3, #12]
 8007df0:	697a      	ldr	r2, [r7, #20]
 8007df2:	0052      	lsls	r2, r2, #1
 8007df4:	2103      	movs	r1, #3
 8007df6:	4091      	lsls	r1, r2
 8007df8:	000a      	movs	r2, r1
 8007dfa:	43d2      	mvns	r2, r2
 8007dfc:	401a      	ands	r2, r3
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	2101      	movs	r1, #1
 8007e08:	697a      	ldr	r2, [r7, #20]
 8007e0a:	4091      	lsls	r1, r2
 8007e0c:	000a      	movs	r2, r1
 8007e0e:	43d2      	mvns	r2, r2
 8007e10:	401a      	ands	r2, r3
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	689b      	ldr	r3, [r3, #8]
 8007e1a:	697a      	ldr	r2, [r7, #20]
 8007e1c:	0052      	lsls	r2, r2, #1
 8007e1e:	2103      	movs	r1, #3
 8007e20:	4091      	lsls	r1, r2
 8007e22:	000a      	movs	r2, r1
 8007e24:	43d2      	mvns	r2, r2
 8007e26:	401a      	ands	r2, r3
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	609a      	str	r2, [r3, #8]
    }
    position++;
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	3301      	adds	r3, #1
 8007e30:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 8007e32:	683a      	ldr	r2, [r7, #0]
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	40da      	lsrs	r2, r3
 8007e38:	1e13      	subs	r3, r2, #0
 8007e3a:	d000      	beq.n	8007e3e <HAL_GPIO_DeInit+0x19e>
 8007e3c:	e73c      	b.n	8007cb8 <HAL_GPIO_DeInit+0x18>
  }
}
 8007e3e:	46c0      	nop			; (mov r8, r8)
 8007e40:	46c0      	nop			; (mov r8, r8)
 8007e42:	46bd      	mov	sp, r7
 8007e44:	b006      	add	sp, #24
 8007e46:	bd80      	pop	{r7, pc}
 8007e48:	40010000 	.word	0x40010000
 8007e4c:	50000400 	.word	0x50000400
 8007e50:	50000800 	.word	0x50000800
 8007e54:	50000c00 	.word	0x50000c00
 8007e58:	50001000 	.word	0x50001000
 8007e5c:	50001c00 	.word	0x50001c00
 8007e60:	40010400 	.word	0x40010400

08007e64 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b084      	sub	sp, #16
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	000a      	movs	r2, r1
 8007e6e:	1cbb      	adds	r3, r7, #2
 8007e70:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	691b      	ldr	r3, [r3, #16]
 8007e76:	1cba      	adds	r2, r7, #2
 8007e78:	8812      	ldrh	r2, [r2, #0]
 8007e7a:	4013      	ands	r3, r2
 8007e7c:	d004      	beq.n	8007e88 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8007e7e:	230f      	movs	r3, #15
 8007e80:	18fb      	adds	r3, r7, r3
 8007e82:	2201      	movs	r2, #1
 8007e84:	701a      	strb	r2, [r3, #0]
 8007e86:	e003      	b.n	8007e90 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007e88:	230f      	movs	r3, #15
 8007e8a:	18fb      	adds	r3, r7, r3
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8007e90:	230f      	movs	r3, #15
 8007e92:	18fb      	adds	r3, r7, r3
 8007e94:	781b      	ldrb	r3, [r3, #0]
}
 8007e96:	0018      	movs	r0, r3
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	b004      	add	sp, #16
 8007e9c:	bd80      	pop	{r7, pc}

08007e9e <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007e9e:	b580      	push	{r7, lr}
 8007ea0:	b082      	sub	sp, #8
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
 8007ea6:	0008      	movs	r0, r1
 8007ea8:	0011      	movs	r1, r2
 8007eaa:	1cbb      	adds	r3, r7, #2
 8007eac:	1c02      	adds	r2, r0, #0
 8007eae:	801a      	strh	r2, [r3, #0]
 8007eb0:	1c7b      	adds	r3, r7, #1
 8007eb2:	1c0a      	adds	r2, r1, #0
 8007eb4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007eb6:	1c7b      	adds	r3, r7, #1
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d004      	beq.n	8007ec8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007ebe:	1cbb      	adds	r3, r7, #2
 8007ec0:	881a      	ldrh	r2, [r3, #0]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8007ec6:	e003      	b.n	8007ed0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8007ec8:	1cbb      	adds	r3, r7, #2
 8007eca:	881a      	ldrh	r2, [r3, #0]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007ed0:	46c0      	nop			; (mov r8, r8)
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	b002      	add	sp, #8
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b084      	sub	sp, #16
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	000a      	movs	r2, r1
 8007ee2:	1cbb      	adds	r3, r7, #2
 8007ee4:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	695b      	ldr	r3, [r3, #20]
 8007eea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007eec:	1cbb      	adds	r3, r7, #2
 8007eee:	881b      	ldrh	r3, [r3, #0]
 8007ef0:	68fa      	ldr	r2, [r7, #12]
 8007ef2:	4013      	ands	r3, r2
 8007ef4:	041a      	lsls	r2, r3, #16
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	43db      	mvns	r3, r3
 8007efa:	1cb9      	adds	r1, r7, #2
 8007efc:	8809      	ldrh	r1, [r1, #0]
 8007efe:	400b      	ands	r3, r1
 8007f00:	431a      	orrs	r2, r3
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	619a      	str	r2, [r3, #24]
}
 8007f06:	46c0      	nop			; (mov r8, r8)
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	b004      	add	sp, #16
 8007f0c:	bd80      	pop	{r7, pc}
	...

08007f10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b082      	sub	sp, #8
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d101      	bne.n	8007f22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	e082      	b.n	8008028 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2241      	movs	r2, #65	; 0x41
 8007f26:	5c9b      	ldrb	r3, [r3, r2]
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d107      	bne.n	8007f3e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2240      	movs	r2, #64	; 0x40
 8007f32:	2100      	movs	r1, #0
 8007f34:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	0018      	movs	r0, r3
 8007f3a:	f000 f87f 	bl	800803c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2241      	movs	r2, #65	; 0x41
 8007f42:	2124      	movs	r1, #36	; 0x24
 8007f44:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	681a      	ldr	r2, [r3, #0]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	2101      	movs	r1, #1
 8007f52:	438a      	bics	r2, r1
 8007f54:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	685a      	ldr	r2, [r3, #4]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4934      	ldr	r1, [pc, #208]	; (8008030 <HAL_I2C_Init+0x120>)
 8007f60:	400a      	ands	r2, r1
 8007f62:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	689a      	ldr	r2, [r3, #8]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4931      	ldr	r1, [pc, #196]	; (8008034 <HAL_I2C_Init+0x124>)
 8007f70:	400a      	ands	r2, r1
 8007f72:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	68db      	ldr	r3, [r3, #12]
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d108      	bne.n	8007f8e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	689a      	ldr	r2, [r3, #8]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	2180      	movs	r1, #128	; 0x80
 8007f86:	0209      	lsls	r1, r1, #8
 8007f88:	430a      	orrs	r2, r1
 8007f8a:	609a      	str	r2, [r3, #8]
 8007f8c:	e007      	b.n	8007f9e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	689a      	ldr	r2, [r3, #8]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	2184      	movs	r1, #132	; 0x84
 8007f98:	0209      	lsls	r1, r1, #8
 8007f9a:	430a      	orrs	r2, r1
 8007f9c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	2b02      	cmp	r3, #2
 8007fa4:	d104      	bne.n	8007fb0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	2280      	movs	r2, #128	; 0x80
 8007fac:	0112      	lsls	r2, r2, #4
 8007fae:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	685a      	ldr	r2, [r3, #4]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	491f      	ldr	r1, [pc, #124]	; (8008038 <HAL_I2C_Init+0x128>)
 8007fbc:	430a      	orrs	r2, r1
 8007fbe:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	68da      	ldr	r2, [r3, #12]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	491a      	ldr	r1, [pc, #104]	; (8008034 <HAL_I2C_Init+0x124>)
 8007fcc:	400a      	ands	r2, r1
 8007fce:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	691a      	ldr	r2, [r3, #16]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	695b      	ldr	r3, [r3, #20]
 8007fd8:	431a      	orrs	r2, r3
 8007fda:	0011      	movs	r1, r2
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	699b      	ldr	r3, [r3, #24]
 8007fe0:	021a      	lsls	r2, r3, #8
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	430a      	orrs	r2, r1
 8007fe8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	69d9      	ldr	r1, [r3, #28]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6a1a      	ldr	r2, [r3, #32]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	430a      	orrs	r2, r1
 8007ff8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	2101      	movs	r1, #1
 8008006:	430a      	orrs	r2, r1
 8008008:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2200      	movs	r2, #0
 800800e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2241      	movs	r2, #65	; 0x41
 8008014:	2120      	movs	r1, #32
 8008016:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2200      	movs	r2, #0
 800801c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2242      	movs	r2, #66	; 0x42
 8008022:	2100      	movs	r1, #0
 8008024:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008026:	2300      	movs	r3, #0
}
 8008028:	0018      	movs	r0, r3
 800802a:	46bd      	mov	sp, r7
 800802c:	b002      	add	sp, #8
 800802e:	bd80      	pop	{r7, pc}
 8008030:	f0ffffff 	.word	0xf0ffffff
 8008034:	ffff7fff 	.word	0xffff7fff
 8008038:	02008000 	.word	0x02008000

0800803c <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8008044:	46c0      	nop			; (mov r8, r8)
 8008046:	46bd      	mov	sp, r7
 8008048:	b002      	add	sp, #8
 800804a:	bd80      	pop	{r7, pc}

0800804c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800804c:	b590      	push	{r4, r7, lr}
 800804e:	b089      	sub	sp, #36	; 0x24
 8008050:	af02      	add	r7, sp, #8
 8008052:	60f8      	str	r0, [r7, #12]
 8008054:	000c      	movs	r4, r1
 8008056:	0010      	movs	r0, r2
 8008058:	0019      	movs	r1, r3
 800805a:	230a      	movs	r3, #10
 800805c:	18fb      	adds	r3, r7, r3
 800805e:	1c22      	adds	r2, r4, #0
 8008060:	801a      	strh	r2, [r3, #0]
 8008062:	2308      	movs	r3, #8
 8008064:	18fb      	adds	r3, r7, r3
 8008066:	1c02      	adds	r2, r0, #0
 8008068:	801a      	strh	r2, [r3, #0]
 800806a:	1dbb      	adds	r3, r7, #6
 800806c:	1c0a      	adds	r2, r1, #0
 800806e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2241      	movs	r2, #65	; 0x41
 8008074:	5c9b      	ldrb	r3, [r3, r2]
 8008076:	b2db      	uxtb	r3, r3
 8008078:	2b20      	cmp	r3, #32
 800807a:	d000      	beq.n	800807e <HAL_I2C_Mem_Write+0x32>
 800807c:	e10c      	b.n	8008298 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800807e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008080:	2b00      	cmp	r3, #0
 8008082:	d004      	beq.n	800808e <HAL_I2C_Mem_Write+0x42>
 8008084:	232c      	movs	r3, #44	; 0x2c
 8008086:	18fb      	adds	r3, r7, r3
 8008088:	881b      	ldrh	r3, [r3, #0]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d105      	bne.n	800809a <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2280      	movs	r2, #128	; 0x80
 8008092:	0092      	lsls	r2, r2, #2
 8008094:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008096:	2301      	movs	r3, #1
 8008098:	e0ff      	b.n	800829a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2240      	movs	r2, #64	; 0x40
 800809e:	5c9b      	ldrb	r3, [r3, r2]
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d101      	bne.n	80080a8 <HAL_I2C_Mem_Write+0x5c>
 80080a4:	2302      	movs	r3, #2
 80080a6:	e0f8      	b.n	800829a <HAL_I2C_Mem_Write+0x24e>
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	2240      	movs	r2, #64	; 0x40
 80080ac:	2101      	movs	r1, #1
 80080ae:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80080b0:	f7fc fe93 	bl	8004dda <HAL_GetTick>
 80080b4:	0003      	movs	r3, r0
 80080b6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80080b8:	2380      	movs	r3, #128	; 0x80
 80080ba:	0219      	lsls	r1, r3, #8
 80080bc:	68f8      	ldr	r0, [r7, #12]
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	9300      	str	r3, [sp, #0]
 80080c2:	2319      	movs	r3, #25
 80080c4:	2201      	movs	r2, #1
 80080c6:	f000 fb17 	bl	80086f8 <I2C_WaitOnFlagUntilTimeout>
 80080ca:	1e03      	subs	r3, r0, #0
 80080cc:	d001      	beq.n	80080d2 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80080ce:	2301      	movs	r3, #1
 80080d0:	e0e3      	b.n	800829a <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2241      	movs	r2, #65	; 0x41
 80080d6:	2121      	movs	r1, #33	; 0x21
 80080d8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2242      	movs	r2, #66	; 0x42
 80080de:	2140      	movs	r1, #64	; 0x40
 80080e0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2200      	movs	r2, #0
 80080e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	222c      	movs	r2, #44	; 0x2c
 80080f2:	18ba      	adds	r2, r7, r2
 80080f4:	8812      	ldrh	r2, [r2, #0]
 80080f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	2200      	movs	r2, #0
 80080fc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80080fe:	1dbb      	adds	r3, r7, #6
 8008100:	881c      	ldrh	r4, [r3, #0]
 8008102:	2308      	movs	r3, #8
 8008104:	18fb      	adds	r3, r7, r3
 8008106:	881a      	ldrh	r2, [r3, #0]
 8008108:	230a      	movs	r3, #10
 800810a:	18fb      	adds	r3, r7, r3
 800810c:	8819      	ldrh	r1, [r3, #0]
 800810e:	68f8      	ldr	r0, [r7, #12]
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	9301      	str	r3, [sp, #4]
 8008114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008116:	9300      	str	r3, [sp, #0]
 8008118:	0023      	movs	r3, r4
 800811a:	f000 fa05 	bl	8008528 <I2C_RequestMemoryWrite>
 800811e:	1e03      	subs	r3, r0, #0
 8008120:	d005      	beq.n	800812e <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2240      	movs	r2, #64	; 0x40
 8008126:	2100      	movs	r1, #0
 8008128:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800812a:	2301      	movs	r3, #1
 800812c:	e0b5      	b.n	800829a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008132:	b29b      	uxth	r3, r3
 8008134:	2bff      	cmp	r3, #255	; 0xff
 8008136:	d911      	bls.n	800815c <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	22ff      	movs	r2, #255	; 0xff
 800813c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008142:	b2da      	uxtb	r2, r3
 8008144:	2380      	movs	r3, #128	; 0x80
 8008146:	045c      	lsls	r4, r3, #17
 8008148:	230a      	movs	r3, #10
 800814a:	18fb      	adds	r3, r7, r3
 800814c:	8819      	ldrh	r1, [r3, #0]
 800814e:	68f8      	ldr	r0, [r7, #12]
 8008150:	2300      	movs	r3, #0
 8008152:	9300      	str	r3, [sp, #0]
 8008154:	0023      	movs	r3, r4
 8008156:	f000 fbef 	bl	8008938 <I2C_TransferConfig>
 800815a:	e012      	b.n	8008182 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008160:	b29a      	uxth	r2, r3
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800816a:	b2da      	uxtb	r2, r3
 800816c:	2380      	movs	r3, #128	; 0x80
 800816e:	049c      	lsls	r4, r3, #18
 8008170:	230a      	movs	r3, #10
 8008172:	18fb      	adds	r3, r7, r3
 8008174:	8819      	ldrh	r1, [r3, #0]
 8008176:	68f8      	ldr	r0, [r7, #12]
 8008178:	2300      	movs	r3, #0
 800817a:	9300      	str	r3, [sp, #0]
 800817c:	0023      	movs	r3, r4
 800817e:	f000 fbdb 	bl	8008938 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008182:	697a      	ldr	r2, [r7, #20]
 8008184:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	0018      	movs	r0, r3
 800818a:	f000 faf4 	bl	8008776 <I2C_WaitOnTXISFlagUntilTimeout>
 800818e:	1e03      	subs	r3, r0, #0
 8008190:	d001      	beq.n	8008196 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8008192:	2301      	movs	r3, #1
 8008194:	e081      	b.n	800829a <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800819a:	781a      	ldrb	r2, [r3, #0]
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a6:	1c5a      	adds	r2, r3, #1
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	3b01      	subs	r3, #1
 80081b4:	b29a      	uxth	r2, r3
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081be:	3b01      	subs	r3, #1
 80081c0:	b29a      	uxth	r2, r3
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d03a      	beq.n	8008246 <HAL_I2C_Mem_Write+0x1fa>
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d136      	bne.n	8008246 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80081d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081da:	68f8      	ldr	r0, [r7, #12]
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	9300      	str	r3, [sp, #0]
 80081e0:	0013      	movs	r3, r2
 80081e2:	2200      	movs	r2, #0
 80081e4:	2180      	movs	r1, #128	; 0x80
 80081e6:	f000 fa87 	bl	80086f8 <I2C_WaitOnFlagUntilTimeout>
 80081ea:	1e03      	subs	r3, r0, #0
 80081ec:	d001      	beq.n	80081f2 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
 80081f0:	e053      	b.n	800829a <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	2bff      	cmp	r3, #255	; 0xff
 80081fa:	d911      	bls.n	8008220 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	22ff      	movs	r2, #255	; 0xff
 8008200:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008206:	b2da      	uxtb	r2, r3
 8008208:	2380      	movs	r3, #128	; 0x80
 800820a:	045c      	lsls	r4, r3, #17
 800820c:	230a      	movs	r3, #10
 800820e:	18fb      	adds	r3, r7, r3
 8008210:	8819      	ldrh	r1, [r3, #0]
 8008212:	68f8      	ldr	r0, [r7, #12]
 8008214:	2300      	movs	r3, #0
 8008216:	9300      	str	r3, [sp, #0]
 8008218:	0023      	movs	r3, r4
 800821a:	f000 fb8d 	bl	8008938 <I2C_TransferConfig>
 800821e:	e012      	b.n	8008246 <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008224:	b29a      	uxth	r2, r3
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800822e:	b2da      	uxtb	r2, r3
 8008230:	2380      	movs	r3, #128	; 0x80
 8008232:	049c      	lsls	r4, r3, #18
 8008234:	230a      	movs	r3, #10
 8008236:	18fb      	adds	r3, r7, r3
 8008238:	8819      	ldrh	r1, [r3, #0]
 800823a:	68f8      	ldr	r0, [r7, #12]
 800823c:	2300      	movs	r3, #0
 800823e:	9300      	str	r3, [sp, #0]
 8008240:	0023      	movs	r3, r4
 8008242:	f000 fb79 	bl	8008938 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800824a:	b29b      	uxth	r3, r3
 800824c:	2b00      	cmp	r3, #0
 800824e:	d198      	bne.n	8008182 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008250:	697a      	ldr	r2, [r7, #20]
 8008252:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	0018      	movs	r0, r3
 8008258:	f000 facc 	bl	80087f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800825c:	1e03      	subs	r3, r0, #0
 800825e:	d001      	beq.n	8008264 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8008260:	2301      	movs	r3, #1
 8008262:	e01a      	b.n	800829a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	2220      	movs	r2, #32
 800826a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	685a      	ldr	r2, [r3, #4]
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	490b      	ldr	r1, [pc, #44]	; (80082a4 <HAL_I2C_Mem_Write+0x258>)
 8008278:	400a      	ands	r2, r1
 800827a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2241      	movs	r2, #65	; 0x41
 8008280:	2120      	movs	r1, #32
 8008282:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2242      	movs	r2, #66	; 0x42
 8008288:	2100      	movs	r1, #0
 800828a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2240      	movs	r2, #64	; 0x40
 8008290:	2100      	movs	r1, #0
 8008292:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008294:	2300      	movs	r3, #0
 8008296:	e000      	b.n	800829a <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8008298:	2302      	movs	r3, #2
  }
}
 800829a:	0018      	movs	r0, r3
 800829c:	46bd      	mov	sp, r7
 800829e:	b007      	add	sp, #28
 80082a0:	bd90      	pop	{r4, r7, pc}
 80082a2:	46c0      	nop			; (mov r8, r8)
 80082a4:	fe00e800 	.word	0xfe00e800

080082a8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082a8:	b590      	push	{r4, r7, lr}
 80082aa:	b089      	sub	sp, #36	; 0x24
 80082ac:	af02      	add	r7, sp, #8
 80082ae:	60f8      	str	r0, [r7, #12]
 80082b0:	000c      	movs	r4, r1
 80082b2:	0010      	movs	r0, r2
 80082b4:	0019      	movs	r1, r3
 80082b6:	230a      	movs	r3, #10
 80082b8:	18fb      	adds	r3, r7, r3
 80082ba:	1c22      	adds	r2, r4, #0
 80082bc:	801a      	strh	r2, [r3, #0]
 80082be:	2308      	movs	r3, #8
 80082c0:	18fb      	adds	r3, r7, r3
 80082c2:	1c02      	adds	r2, r0, #0
 80082c4:	801a      	strh	r2, [r3, #0]
 80082c6:	1dbb      	adds	r3, r7, #6
 80082c8:	1c0a      	adds	r2, r1, #0
 80082ca:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2241      	movs	r2, #65	; 0x41
 80082d0:	5c9b      	ldrb	r3, [r3, r2]
 80082d2:	b2db      	uxtb	r3, r3
 80082d4:	2b20      	cmp	r3, #32
 80082d6:	d000      	beq.n	80082da <HAL_I2C_Mem_Read+0x32>
 80082d8:	e110      	b.n	80084fc <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80082da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d004      	beq.n	80082ea <HAL_I2C_Mem_Read+0x42>
 80082e0:	232c      	movs	r3, #44	; 0x2c
 80082e2:	18fb      	adds	r3, r7, r3
 80082e4:	881b      	ldrh	r3, [r3, #0]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d105      	bne.n	80082f6 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2280      	movs	r2, #128	; 0x80
 80082ee:	0092      	lsls	r2, r2, #2
 80082f0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80082f2:	2301      	movs	r3, #1
 80082f4:	e103      	b.n	80084fe <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	2240      	movs	r2, #64	; 0x40
 80082fa:	5c9b      	ldrb	r3, [r3, r2]
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d101      	bne.n	8008304 <HAL_I2C_Mem_Read+0x5c>
 8008300:	2302      	movs	r3, #2
 8008302:	e0fc      	b.n	80084fe <HAL_I2C_Mem_Read+0x256>
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2240      	movs	r2, #64	; 0x40
 8008308:	2101      	movs	r1, #1
 800830a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800830c:	f7fc fd65 	bl	8004dda <HAL_GetTick>
 8008310:	0003      	movs	r3, r0
 8008312:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008314:	2380      	movs	r3, #128	; 0x80
 8008316:	0219      	lsls	r1, r3, #8
 8008318:	68f8      	ldr	r0, [r7, #12]
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	9300      	str	r3, [sp, #0]
 800831e:	2319      	movs	r3, #25
 8008320:	2201      	movs	r2, #1
 8008322:	f000 f9e9 	bl	80086f8 <I2C_WaitOnFlagUntilTimeout>
 8008326:	1e03      	subs	r3, r0, #0
 8008328:	d001      	beq.n	800832e <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800832a:	2301      	movs	r3, #1
 800832c:	e0e7      	b.n	80084fe <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2241      	movs	r2, #65	; 0x41
 8008332:	2122      	movs	r1, #34	; 0x22
 8008334:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2242      	movs	r2, #66	; 0x42
 800833a:	2140      	movs	r1, #64	; 0x40
 800833c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2200      	movs	r2, #0
 8008342:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008348:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	222c      	movs	r2, #44	; 0x2c
 800834e:	18ba      	adds	r2, r7, r2
 8008350:	8812      	ldrh	r2, [r2, #0]
 8008352:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2200      	movs	r2, #0
 8008358:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800835a:	1dbb      	adds	r3, r7, #6
 800835c:	881c      	ldrh	r4, [r3, #0]
 800835e:	2308      	movs	r3, #8
 8008360:	18fb      	adds	r3, r7, r3
 8008362:	881a      	ldrh	r2, [r3, #0]
 8008364:	230a      	movs	r3, #10
 8008366:	18fb      	adds	r3, r7, r3
 8008368:	8819      	ldrh	r1, [r3, #0]
 800836a:	68f8      	ldr	r0, [r7, #12]
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	9301      	str	r3, [sp, #4]
 8008370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008372:	9300      	str	r3, [sp, #0]
 8008374:	0023      	movs	r3, r4
 8008376:	f000 f93b 	bl	80085f0 <I2C_RequestMemoryRead>
 800837a:	1e03      	subs	r3, r0, #0
 800837c:	d005      	beq.n	800838a <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2240      	movs	r2, #64	; 0x40
 8008382:	2100      	movs	r1, #0
 8008384:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8008386:	2301      	movs	r3, #1
 8008388:	e0b9      	b.n	80084fe <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800838e:	b29b      	uxth	r3, r3
 8008390:	2bff      	cmp	r3, #255	; 0xff
 8008392:	d911      	bls.n	80083b8 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	22ff      	movs	r2, #255	; 0xff
 8008398:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800839e:	b2da      	uxtb	r2, r3
 80083a0:	2380      	movs	r3, #128	; 0x80
 80083a2:	045c      	lsls	r4, r3, #17
 80083a4:	230a      	movs	r3, #10
 80083a6:	18fb      	adds	r3, r7, r3
 80083a8:	8819      	ldrh	r1, [r3, #0]
 80083aa:	68f8      	ldr	r0, [r7, #12]
 80083ac:	4b56      	ldr	r3, [pc, #344]	; (8008508 <HAL_I2C_Mem_Read+0x260>)
 80083ae:	9300      	str	r3, [sp, #0]
 80083b0:	0023      	movs	r3, r4
 80083b2:	f000 fac1 	bl	8008938 <I2C_TransferConfig>
 80083b6:	e012      	b.n	80083de <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083bc:	b29a      	uxth	r2, r3
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083c6:	b2da      	uxtb	r2, r3
 80083c8:	2380      	movs	r3, #128	; 0x80
 80083ca:	049c      	lsls	r4, r3, #18
 80083cc:	230a      	movs	r3, #10
 80083ce:	18fb      	adds	r3, r7, r3
 80083d0:	8819      	ldrh	r1, [r3, #0]
 80083d2:	68f8      	ldr	r0, [r7, #12]
 80083d4:	4b4c      	ldr	r3, [pc, #304]	; (8008508 <HAL_I2C_Mem_Read+0x260>)
 80083d6:	9300      	str	r3, [sp, #0]
 80083d8:	0023      	movs	r3, r4
 80083da:	f000 faad 	bl	8008938 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80083de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083e0:	68f8      	ldr	r0, [r7, #12]
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	9300      	str	r3, [sp, #0]
 80083e6:	0013      	movs	r3, r2
 80083e8:	2200      	movs	r2, #0
 80083ea:	2104      	movs	r1, #4
 80083ec:	f000 f984 	bl	80086f8 <I2C_WaitOnFlagUntilTimeout>
 80083f0:	1e03      	subs	r3, r0, #0
 80083f2:	d001      	beq.n	80083f8 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80083f4:	2301      	movs	r3, #1
 80083f6:	e082      	b.n	80084fe <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008402:	b2d2      	uxtb	r2, r2
 8008404:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800840a:	1c5a      	adds	r2, r3, #1
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008414:	3b01      	subs	r3, #1
 8008416:	b29a      	uxth	r2, r3
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008420:	b29b      	uxth	r3, r3
 8008422:	3b01      	subs	r3, #1
 8008424:	b29a      	uxth	r2, r3
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800842e:	b29b      	uxth	r3, r3
 8008430:	2b00      	cmp	r3, #0
 8008432:	d03a      	beq.n	80084aa <HAL_I2C_Mem_Read+0x202>
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008438:	2b00      	cmp	r3, #0
 800843a:	d136      	bne.n	80084aa <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800843c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800843e:	68f8      	ldr	r0, [r7, #12]
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	9300      	str	r3, [sp, #0]
 8008444:	0013      	movs	r3, r2
 8008446:	2200      	movs	r2, #0
 8008448:	2180      	movs	r1, #128	; 0x80
 800844a:	f000 f955 	bl	80086f8 <I2C_WaitOnFlagUntilTimeout>
 800844e:	1e03      	subs	r3, r0, #0
 8008450:	d001      	beq.n	8008456 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8008452:	2301      	movs	r3, #1
 8008454:	e053      	b.n	80084fe <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800845a:	b29b      	uxth	r3, r3
 800845c:	2bff      	cmp	r3, #255	; 0xff
 800845e:	d911      	bls.n	8008484 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	22ff      	movs	r2, #255	; 0xff
 8008464:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800846a:	b2da      	uxtb	r2, r3
 800846c:	2380      	movs	r3, #128	; 0x80
 800846e:	045c      	lsls	r4, r3, #17
 8008470:	230a      	movs	r3, #10
 8008472:	18fb      	adds	r3, r7, r3
 8008474:	8819      	ldrh	r1, [r3, #0]
 8008476:	68f8      	ldr	r0, [r7, #12]
 8008478:	2300      	movs	r3, #0
 800847a:	9300      	str	r3, [sp, #0]
 800847c:	0023      	movs	r3, r4
 800847e:	f000 fa5b 	bl	8008938 <I2C_TransferConfig>
 8008482:	e012      	b.n	80084aa <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008488:	b29a      	uxth	r2, r3
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008492:	b2da      	uxtb	r2, r3
 8008494:	2380      	movs	r3, #128	; 0x80
 8008496:	049c      	lsls	r4, r3, #18
 8008498:	230a      	movs	r3, #10
 800849a:	18fb      	adds	r3, r7, r3
 800849c:	8819      	ldrh	r1, [r3, #0]
 800849e:	68f8      	ldr	r0, [r7, #12]
 80084a0:	2300      	movs	r3, #0
 80084a2:	9300      	str	r3, [sp, #0]
 80084a4:	0023      	movs	r3, r4
 80084a6:	f000 fa47 	bl	8008938 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084ae:	b29b      	uxth	r3, r3
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d194      	bne.n	80083de <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80084b4:	697a      	ldr	r2, [r7, #20]
 80084b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	0018      	movs	r0, r3
 80084bc:	f000 f99a 	bl	80087f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80084c0:	1e03      	subs	r3, r0, #0
 80084c2:	d001      	beq.n	80084c8 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80084c4:	2301      	movs	r3, #1
 80084c6:	e01a      	b.n	80084fe <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	2220      	movs	r2, #32
 80084ce:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	685a      	ldr	r2, [r3, #4]
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	490c      	ldr	r1, [pc, #48]	; (800850c <HAL_I2C_Mem_Read+0x264>)
 80084dc:	400a      	ands	r2, r1
 80084de:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2241      	movs	r2, #65	; 0x41
 80084e4:	2120      	movs	r1, #32
 80084e6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2242      	movs	r2, #66	; 0x42
 80084ec:	2100      	movs	r1, #0
 80084ee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2240      	movs	r2, #64	; 0x40
 80084f4:	2100      	movs	r1, #0
 80084f6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80084f8:	2300      	movs	r3, #0
 80084fa:	e000      	b.n	80084fe <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80084fc:	2302      	movs	r3, #2
  }
}
 80084fe:	0018      	movs	r0, r3
 8008500:	46bd      	mov	sp, r7
 8008502:	b007      	add	sp, #28
 8008504:	bd90      	pop	{r4, r7, pc}
 8008506:	46c0      	nop			; (mov r8, r8)
 8008508:	80002400 	.word	0x80002400
 800850c:	fe00e800 	.word	0xfe00e800

08008510 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b082      	sub	sp, #8
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2241      	movs	r2, #65	; 0x41
 800851c:	5c9b      	ldrb	r3, [r3, r2]
 800851e:	b2db      	uxtb	r3, r3
}
 8008520:	0018      	movs	r0, r3
 8008522:	46bd      	mov	sp, r7
 8008524:	b002      	add	sp, #8
 8008526:	bd80      	pop	{r7, pc}

08008528 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008528:	b5b0      	push	{r4, r5, r7, lr}
 800852a:	b086      	sub	sp, #24
 800852c:	af02      	add	r7, sp, #8
 800852e:	60f8      	str	r0, [r7, #12]
 8008530:	000c      	movs	r4, r1
 8008532:	0010      	movs	r0, r2
 8008534:	0019      	movs	r1, r3
 8008536:	250a      	movs	r5, #10
 8008538:	197b      	adds	r3, r7, r5
 800853a:	1c22      	adds	r2, r4, #0
 800853c:	801a      	strh	r2, [r3, #0]
 800853e:	2308      	movs	r3, #8
 8008540:	18fb      	adds	r3, r7, r3
 8008542:	1c02      	adds	r2, r0, #0
 8008544:	801a      	strh	r2, [r3, #0]
 8008546:	1dbb      	adds	r3, r7, #6
 8008548:	1c0a      	adds	r2, r1, #0
 800854a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800854c:	1dbb      	adds	r3, r7, #6
 800854e:	881b      	ldrh	r3, [r3, #0]
 8008550:	b2da      	uxtb	r2, r3
 8008552:	2380      	movs	r3, #128	; 0x80
 8008554:	045c      	lsls	r4, r3, #17
 8008556:	197b      	adds	r3, r7, r5
 8008558:	8819      	ldrh	r1, [r3, #0]
 800855a:	68f8      	ldr	r0, [r7, #12]
 800855c:	4b23      	ldr	r3, [pc, #140]	; (80085ec <I2C_RequestMemoryWrite+0xc4>)
 800855e:	9300      	str	r3, [sp, #0]
 8008560:	0023      	movs	r3, r4
 8008562:	f000 f9e9 	bl	8008938 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008568:	6a39      	ldr	r1, [r7, #32]
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	0018      	movs	r0, r3
 800856e:	f000 f902 	bl	8008776 <I2C_WaitOnTXISFlagUntilTimeout>
 8008572:	1e03      	subs	r3, r0, #0
 8008574:	d001      	beq.n	800857a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8008576:	2301      	movs	r3, #1
 8008578:	e033      	b.n	80085e2 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800857a:	1dbb      	adds	r3, r7, #6
 800857c:	881b      	ldrh	r3, [r3, #0]
 800857e:	2b01      	cmp	r3, #1
 8008580:	d107      	bne.n	8008592 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008582:	2308      	movs	r3, #8
 8008584:	18fb      	adds	r3, r7, r3
 8008586:	881b      	ldrh	r3, [r3, #0]
 8008588:	b2da      	uxtb	r2, r3
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	629a      	str	r2, [r3, #40]	; 0x28
 8008590:	e019      	b.n	80085c6 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008592:	2308      	movs	r3, #8
 8008594:	18fb      	adds	r3, r7, r3
 8008596:	881b      	ldrh	r3, [r3, #0]
 8008598:	0a1b      	lsrs	r3, r3, #8
 800859a:	b29b      	uxth	r3, r3
 800859c:	b2da      	uxtb	r2, r3
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80085a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085a6:	6a39      	ldr	r1, [r7, #32]
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	0018      	movs	r0, r3
 80085ac:	f000 f8e3 	bl	8008776 <I2C_WaitOnTXISFlagUntilTimeout>
 80085b0:	1e03      	subs	r3, r0, #0
 80085b2:	d001      	beq.n	80085b8 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80085b4:	2301      	movs	r3, #1
 80085b6:	e014      	b.n	80085e2 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80085b8:	2308      	movs	r3, #8
 80085ba:	18fb      	adds	r3, r7, r3
 80085bc:	881b      	ldrh	r3, [r3, #0]
 80085be:	b2da      	uxtb	r2, r3
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80085c6:	6a3a      	ldr	r2, [r7, #32]
 80085c8:	68f8      	ldr	r0, [r7, #12]
 80085ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085cc:	9300      	str	r3, [sp, #0]
 80085ce:	0013      	movs	r3, r2
 80085d0:	2200      	movs	r2, #0
 80085d2:	2180      	movs	r1, #128	; 0x80
 80085d4:	f000 f890 	bl	80086f8 <I2C_WaitOnFlagUntilTimeout>
 80085d8:	1e03      	subs	r3, r0, #0
 80085da:	d001      	beq.n	80085e0 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80085dc:	2301      	movs	r3, #1
 80085de:	e000      	b.n	80085e2 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80085e0:	2300      	movs	r3, #0
}
 80085e2:	0018      	movs	r0, r3
 80085e4:	46bd      	mov	sp, r7
 80085e6:	b004      	add	sp, #16
 80085e8:	bdb0      	pop	{r4, r5, r7, pc}
 80085ea:	46c0      	nop			; (mov r8, r8)
 80085ec:	80002000 	.word	0x80002000

080085f0 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80085f0:	b5b0      	push	{r4, r5, r7, lr}
 80085f2:	b086      	sub	sp, #24
 80085f4:	af02      	add	r7, sp, #8
 80085f6:	60f8      	str	r0, [r7, #12]
 80085f8:	000c      	movs	r4, r1
 80085fa:	0010      	movs	r0, r2
 80085fc:	0019      	movs	r1, r3
 80085fe:	250a      	movs	r5, #10
 8008600:	197b      	adds	r3, r7, r5
 8008602:	1c22      	adds	r2, r4, #0
 8008604:	801a      	strh	r2, [r3, #0]
 8008606:	2308      	movs	r3, #8
 8008608:	18fb      	adds	r3, r7, r3
 800860a:	1c02      	adds	r2, r0, #0
 800860c:	801a      	strh	r2, [r3, #0]
 800860e:	1dbb      	adds	r3, r7, #6
 8008610:	1c0a      	adds	r2, r1, #0
 8008612:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008614:	1dbb      	adds	r3, r7, #6
 8008616:	881b      	ldrh	r3, [r3, #0]
 8008618:	b2da      	uxtb	r2, r3
 800861a:	197b      	adds	r3, r7, r5
 800861c:	8819      	ldrh	r1, [r3, #0]
 800861e:	68f8      	ldr	r0, [r7, #12]
 8008620:	4b23      	ldr	r3, [pc, #140]	; (80086b0 <I2C_RequestMemoryRead+0xc0>)
 8008622:	9300      	str	r3, [sp, #0]
 8008624:	2300      	movs	r3, #0
 8008626:	f000 f987 	bl	8008938 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800862a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800862c:	6a39      	ldr	r1, [r7, #32]
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	0018      	movs	r0, r3
 8008632:	f000 f8a0 	bl	8008776 <I2C_WaitOnTXISFlagUntilTimeout>
 8008636:	1e03      	subs	r3, r0, #0
 8008638:	d001      	beq.n	800863e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800863a:	2301      	movs	r3, #1
 800863c:	e033      	b.n	80086a6 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800863e:	1dbb      	adds	r3, r7, #6
 8008640:	881b      	ldrh	r3, [r3, #0]
 8008642:	2b01      	cmp	r3, #1
 8008644:	d107      	bne.n	8008656 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008646:	2308      	movs	r3, #8
 8008648:	18fb      	adds	r3, r7, r3
 800864a:	881b      	ldrh	r3, [r3, #0]
 800864c:	b2da      	uxtb	r2, r3
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	629a      	str	r2, [r3, #40]	; 0x28
 8008654:	e019      	b.n	800868a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008656:	2308      	movs	r3, #8
 8008658:	18fb      	adds	r3, r7, r3
 800865a:	881b      	ldrh	r3, [r3, #0]
 800865c:	0a1b      	lsrs	r3, r3, #8
 800865e:	b29b      	uxth	r3, r3
 8008660:	b2da      	uxtb	r2, r3
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800866a:	6a39      	ldr	r1, [r7, #32]
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	0018      	movs	r0, r3
 8008670:	f000 f881 	bl	8008776 <I2C_WaitOnTXISFlagUntilTimeout>
 8008674:	1e03      	subs	r3, r0, #0
 8008676:	d001      	beq.n	800867c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8008678:	2301      	movs	r3, #1
 800867a:	e014      	b.n	80086a6 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800867c:	2308      	movs	r3, #8
 800867e:	18fb      	adds	r3, r7, r3
 8008680:	881b      	ldrh	r3, [r3, #0]
 8008682:	b2da      	uxtb	r2, r3
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800868a:	6a3a      	ldr	r2, [r7, #32]
 800868c:	68f8      	ldr	r0, [r7, #12]
 800868e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008690:	9300      	str	r3, [sp, #0]
 8008692:	0013      	movs	r3, r2
 8008694:	2200      	movs	r2, #0
 8008696:	2140      	movs	r1, #64	; 0x40
 8008698:	f000 f82e 	bl	80086f8 <I2C_WaitOnFlagUntilTimeout>
 800869c:	1e03      	subs	r3, r0, #0
 800869e:	d001      	beq.n	80086a4 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80086a0:	2301      	movs	r3, #1
 80086a2:	e000      	b.n	80086a6 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80086a4:	2300      	movs	r3, #0
}
 80086a6:	0018      	movs	r0, r3
 80086a8:	46bd      	mov	sp, r7
 80086aa:	b004      	add	sp, #16
 80086ac:	bdb0      	pop	{r4, r5, r7, pc}
 80086ae:	46c0      	nop			; (mov r8, r8)
 80086b0:	80002000 	.word	0x80002000

080086b4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b082      	sub	sp, #8
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	699b      	ldr	r3, [r3, #24]
 80086c2:	2202      	movs	r2, #2
 80086c4:	4013      	ands	r3, r2
 80086c6:	2b02      	cmp	r3, #2
 80086c8:	d103      	bne.n	80086d2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	2200      	movs	r2, #0
 80086d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	699b      	ldr	r3, [r3, #24]
 80086d8:	2201      	movs	r2, #1
 80086da:	4013      	ands	r3, r2
 80086dc:	2b01      	cmp	r3, #1
 80086de:	d007      	beq.n	80086f0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	699a      	ldr	r2, [r3, #24]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	2101      	movs	r1, #1
 80086ec:	430a      	orrs	r2, r1
 80086ee:	619a      	str	r2, [r3, #24]
  }
}
 80086f0:	46c0      	nop			; (mov r8, r8)
 80086f2:	46bd      	mov	sp, r7
 80086f4:	b002      	add	sp, #8
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b084      	sub	sp, #16
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	60b9      	str	r1, [r7, #8]
 8008702:	603b      	str	r3, [r7, #0]
 8008704:	1dfb      	adds	r3, r7, #7
 8008706:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008708:	e021      	b.n	800874e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	3301      	adds	r3, #1
 800870e:	d01e      	beq.n	800874e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008710:	f7fc fb63 	bl	8004dda <HAL_GetTick>
 8008714:	0002      	movs	r2, r0
 8008716:	69bb      	ldr	r3, [r7, #24]
 8008718:	1ad3      	subs	r3, r2, r3
 800871a:	683a      	ldr	r2, [r7, #0]
 800871c:	429a      	cmp	r2, r3
 800871e:	d302      	bcc.n	8008726 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d113      	bne.n	800874e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800872a:	2220      	movs	r2, #32
 800872c:	431a      	orrs	r2, r3
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2241      	movs	r2, #65	; 0x41
 8008736:	2120      	movs	r1, #32
 8008738:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2242      	movs	r2, #66	; 0x42
 800873e:	2100      	movs	r1, #0
 8008740:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2240      	movs	r2, #64	; 0x40
 8008746:	2100      	movs	r1, #0
 8008748:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800874a:	2301      	movs	r3, #1
 800874c:	e00f      	b.n	800876e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	699b      	ldr	r3, [r3, #24]
 8008754:	68ba      	ldr	r2, [r7, #8]
 8008756:	4013      	ands	r3, r2
 8008758:	68ba      	ldr	r2, [r7, #8]
 800875a:	1ad3      	subs	r3, r2, r3
 800875c:	425a      	negs	r2, r3
 800875e:	4153      	adcs	r3, r2
 8008760:	b2db      	uxtb	r3, r3
 8008762:	001a      	movs	r2, r3
 8008764:	1dfb      	adds	r3, r7, #7
 8008766:	781b      	ldrb	r3, [r3, #0]
 8008768:	429a      	cmp	r2, r3
 800876a:	d0ce      	beq.n	800870a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800876c:	2300      	movs	r3, #0
}
 800876e:	0018      	movs	r0, r3
 8008770:	46bd      	mov	sp, r7
 8008772:	b004      	add	sp, #16
 8008774:	bd80      	pop	{r7, pc}

08008776 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008776:	b580      	push	{r7, lr}
 8008778:	b084      	sub	sp, #16
 800877a:	af00      	add	r7, sp, #0
 800877c:	60f8      	str	r0, [r7, #12]
 800877e:	60b9      	str	r1, [r7, #8]
 8008780:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008782:	e02b      	b.n	80087dc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8008784:	687a      	ldr	r2, [r7, #4]
 8008786:	68b9      	ldr	r1, [r7, #8]
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	0018      	movs	r0, r3
 800878c:	f000 f86e 	bl	800886c <I2C_IsAcknowledgeFailed>
 8008790:	1e03      	subs	r3, r0, #0
 8008792:	d001      	beq.n	8008798 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008794:	2301      	movs	r3, #1
 8008796:	e029      	b.n	80087ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	3301      	adds	r3, #1
 800879c:	d01e      	beq.n	80087dc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800879e:	f7fc fb1c 	bl	8004dda <HAL_GetTick>
 80087a2:	0002      	movs	r2, r0
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	1ad3      	subs	r3, r2, r3
 80087a8:	68ba      	ldr	r2, [r7, #8]
 80087aa:	429a      	cmp	r2, r3
 80087ac:	d302      	bcc.n	80087b4 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d113      	bne.n	80087dc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087b8:	2220      	movs	r2, #32
 80087ba:	431a      	orrs	r2, r3
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2241      	movs	r2, #65	; 0x41
 80087c4:	2120      	movs	r1, #32
 80087c6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	2242      	movs	r2, #66	; 0x42
 80087cc:	2100      	movs	r1, #0
 80087ce:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2240      	movs	r2, #64	; 0x40
 80087d4:	2100      	movs	r1, #0
 80087d6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80087d8:	2301      	movs	r3, #1
 80087da:	e007      	b.n	80087ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	699b      	ldr	r3, [r3, #24]
 80087e2:	2202      	movs	r2, #2
 80087e4:	4013      	ands	r3, r2
 80087e6:	2b02      	cmp	r3, #2
 80087e8:	d1cc      	bne.n	8008784 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80087ea:	2300      	movs	r3, #0
}
 80087ec:	0018      	movs	r0, r3
 80087ee:	46bd      	mov	sp, r7
 80087f0:	b004      	add	sp, #16
 80087f2:	bd80      	pop	{r7, pc}

080087f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b084      	sub	sp, #16
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	60f8      	str	r0, [r7, #12]
 80087fc:	60b9      	str	r1, [r7, #8]
 80087fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008800:	e028      	b.n	8008854 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	68b9      	ldr	r1, [r7, #8]
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	0018      	movs	r0, r3
 800880a:	f000 f82f 	bl	800886c <I2C_IsAcknowledgeFailed>
 800880e:	1e03      	subs	r3, r0, #0
 8008810:	d001      	beq.n	8008816 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008812:	2301      	movs	r3, #1
 8008814:	e026      	b.n	8008864 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008816:	f7fc fae0 	bl	8004dda <HAL_GetTick>
 800881a:	0002      	movs	r2, r0
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	1ad3      	subs	r3, r2, r3
 8008820:	68ba      	ldr	r2, [r7, #8]
 8008822:	429a      	cmp	r2, r3
 8008824:	d302      	bcc.n	800882c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d113      	bne.n	8008854 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008830:	2220      	movs	r2, #32
 8008832:	431a      	orrs	r2, r3
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2241      	movs	r2, #65	; 0x41
 800883c:	2120      	movs	r1, #32
 800883e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	2242      	movs	r2, #66	; 0x42
 8008844:	2100      	movs	r1, #0
 8008846:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2240      	movs	r2, #64	; 0x40
 800884c:	2100      	movs	r1, #0
 800884e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8008850:	2301      	movs	r3, #1
 8008852:	e007      	b.n	8008864 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	699b      	ldr	r3, [r3, #24]
 800885a:	2220      	movs	r2, #32
 800885c:	4013      	ands	r3, r2
 800885e:	2b20      	cmp	r3, #32
 8008860:	d1cf      	bne.n	8008802 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008862:	2300      	movs	r3, #0
}
 8008864:	0018      	movs	r0, r3
 8008866:	46bd      	mov	sp, r7
 8008868:	b004      	add	sp, #16
 800886a:	bd80      	pop	{r7, pc}

0800886c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b084      	sub	sp, #16
 8008870:	af00      	add	r7, sp, #0
 8008872:	60f8      	str	r0, [r7, #12]
 8008874:	60b9      	str	r1, [r7, #8]
 8008876:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	699b      	ldr	r3, [r3, #24]
 800887e:	2210      	movs	r2, #16
 8008880:	4013      	ands	r3, r2
 8008882:	2b10      	cmp	r3, #16
 8008884:	d151      	bne.n	800892a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008886:	e021      	b.n	80088cc <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	3301      	adds	r3, #1
 800888c:	d01e      	beq.n	80088cc <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800888e:	f7fc faa4 	bl	8004dda <HAL_GetTick>
 8008892:	0002      	movs	r2, r0
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	1ad3      	subs	r3, r2, r3
 8008898:	68ba      	ldr	r2, [r7, #8]
 800889a:	429a      	cmp	r2, r3
 800889c:	d302      	bcc.n	80088a4 <I2C_IsAcknowledgeFailed+0x38>
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d113      	bne.n	80088cc <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088a8:	2220      	movs	r2, #32
 80088aa:	431a      	orrs	r2, r3
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2241      	movs	r2, #65	; 0x41
 80088b4:	2120      	movs	r1, #32
 80088b6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2242      	movs	r2, #66	; 0x42
 80088bc:	2100      	movs	r1, #0
 80088be:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	2240      	movs	r2, #64	; 0x40
 80088c4:	2100      	movs	r1, #0
 80088c6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80088c8:	2301      	movs	r3, #1
 80088ca:	e02f      	b.n	800892c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	699b      	ldr	r3, [r3, #24]
 80088d2:	2220      	movs	r2, #32
 80088d4:	4013      	ands	r3, r2
 80088d6:	2b20      	cmp	r3, #32
 80088d8:	d1d6      	bne.n	8008888 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	2210      	movs	r2, #16
 80088e0:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	2220      	movs	r2, #32
 80088e8:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	0018      	movs	r0, r3
 80088ee:	f7ff fee1 	bl	80086b4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	685a      	ldr	r2, [r3, #4]
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	490d      	ldr	r1, [pc, #52]	; (8008934 <I2C_IsAcknowledgeFailed+0xc8>)
 80088fe:	400a      	ands	r2, r1
 8008900:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008906:	2204      	movs	r2, #4
 8008908:	431a      	orrs	r2, r3
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2241      	movs	r2, #65	; 0x41
 8008912:	2120      	movs	r1, #32
 8008914:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2242      	movs	r2, #66	; 0x42
 800891a:	2100      	movs	r1, #0
 800891c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2240      	movs	r2, #64	; 0x40
 8008922:	2100      	movs	r1, #0
 8008924:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8008926:	2301      	movs	r3, #1
 8008928:	e000      	b.n	800892c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800892a:	2300      	movs	r3, #0
}
 800892c:	0018      	movs	r0, r3
 800892e:	46bd      	mov	sp, r7
 8008930:	b004      	add	sp, #16
 8008932:	bd80      	pop	{r7, pc}
 8008934:	fe00e800 	.word	0xfe00e800

08008938 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008938:	b590      	push	{r4, r7, lr}
 800893a:	b085      	sub	sp, #20
 800893c:	af00      	add	r7, sp, #0
 800893e:	60f8      	str	r0, [r7, #12]
 8008940:	0008      	movs	r0, r1
 8008942:	0011      	movs	r1, r2
 8008944:	607b      	str	r3, [r7, #4]
 8008946:	240a      	movs	r4, #10
 8008948:	193b      	adds	r3, r7, r4
 800894a:	1c02      	adds	r2, r0, #0
 800894c:	801a      	strh	r2, [r3, #0]
 800894e:	2009      	movs	r0, #9
 8008950:	183b      	adds	r3, r7, r0
 8008952:	1c0a      	adds	r2, r1, #0
 8008954:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	6a3a      	ldr	r2, [r7, #32]
 800895e:	0d51      	lsrs	r1, r2, #21
 8008960:	2280      	movs	r2, #128	; 0x80
 8008962:	00d2      	lsls	r2, r2, #3
 8008964:	400a      	ands	r2, r1
 8008966:	490e      	ldr	r1, [pc, #56]	; (80089a0 <I2C_TransferConfig+0x68>)
 8008968:	430a      	orrs	r2, r1
 800896a:	43d2      	mvns	r2, r2
 800896c:	401a      	ands	r2, r3
 800896e:	0011      	movs	r1, r2
 8008970:	193b      	adds	r3, r7, r4
 8008972:	881b      	ldrh	r3, [r3, #0]
 8008974:	059b      	lsls	r3, r3, #22
 8008976:	0d9a      	lsrs	r2, r3, #22
 8008978:	183b      	adds	r3, r7, r0
 800897a:	781b      	ldrb	r3, [r3, #0]
 800897c:	0418      	lsls	r0, r3, #16
 800897e:	23ff      	movs	r3, #255	; 0xff
 8008980:	041b      	lsls	r3, r3, #16
 8008982:	4003      	ands	r3, r0
 8008984:	431a      	orrs	r2, r3
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	431a      	orrs	r2, r3
 800898a:	6a3b      	ldr	r3, [r7, #32]
 800898c:	431a      	orrs	r2, r3
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	430a      	orrs	r2, r1
 8008994:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8008996:	46c0      	nop			; (mov r8, r8)
 8008998:	46bd      	mov	sp, r7
 800899a:	b005      	add	sp, #20
 800899c:	bd90      	pop	{r4, r7, pc}
 800899e:	46c0      	nop			; (mov r8, r8)
 80089a0:	03ff63ff 	.word	0x03ff63ff

080089a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b082      	sub	sp, #8
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2241      	movs	r2, #65	; 0x41
 80089b2:	5c9b      	ldrb	r3, [r3, r2]
 80089b4:	b2db      	uxtb	r3, r3
 80089b6:	2b20      	cmp	r3, #32
 80089b8:	d138      	bne.n	8008a2c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2240      	movs	r2, #64	; 0x40
 80089be:	5c9b      	ldrb	r3, [r3, r2]
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d101      	bne.n	80089c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80089c4:	2302      	movs	r3, #2
 80089c6:	e032      	b.n	8008a2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2240      	movs	r2, #64	; 0x40
 80089cc:	2101      	movs	r1, #1
 80089ce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2241      	movs	r2, #65	; 0x41
 80089d4:	2124      	movs	r1, #36	; 0x24
 80089d6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	681a      	ldr	r2, [r3, #0]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	2101      	movs	r1, #1
 80089e4:	438a      	bics	r2, r1
 80089e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	681a      	ldr	r2, [r3, #0]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	4911      	ldr	r1, [pc, #68]	; (8008a38 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80089f4:	400a      	ands	r2, r1
 80089f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	6819      	ldr	r1, [r3, #0]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	683a      	ldr	r2, [r7, #0]
 8008a04:	430a      	orrs	r2, r1
 8008a06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	681a      	ldr	r2, [r3, #0]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	2101      	movs	r1, #1
 8008a14:	430a      	orrs	r2, r1
 8008a16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2241      	movs	r2, #65	; 0x41
 8008a1c:	2120      	movs	r1, #32
 8008a1e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2240      	movs	r2, #64	; 0x40
 8008a24:	2100      	movs	r1, #0
 8008a26:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	e000      	b.n	8008a2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008a2c:	2302      	movs	r3, #2
  }
}
 8008a2e:	0018      	movs	r0, r3
 8008a30:	46bd      	mov	sp, r7
 8008a32:	b002      	add	sp, #8
 8008a34:	bd80      	pop	{r7, pc}
 8008a36:	46c0      	nop			; (mov r8, r8)
 8008a38:	ffffefff 	.word	0xffffefff

08008a3c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b084      	sub	sp, #16
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2241      	movs	r2, #65	; 0x41
 8008a4a:	5c9b      	ldrb	r3, [r3, r2]
 8008a4c:	b2db      	uxtb	r3, r3
 8008a4e:	2b20      	cmp	r3, #32
 8008a50:	d139      	bne.n	8008ac6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2240      	movs	r2, #64	; 0x40
 8008a56:	5c9b      	ldrb	r3, [r3, r2]
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d101      	bne.n	8008a60 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008a5c:	2302      	movs	r3, #2
 8008a5e:	e033      	b.n	8008ac8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2240      	movs	r2, #64	; 0x40
 8008a64:	2101      	movs	r1, #1
 8008a66:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2241      	movs	r2, #65	; 0x41
 8008a6c:	2124      	movs	r1, #36	; 0x24
 8008a6e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	681a      	ldr	r2, [r3, #0]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	2101      	movs	r1, #1
 8008a7c:	438a      	bics	r2, r1
 8008a7e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	4a11      	ldr	r2, [pc, #68]	; (8008ad0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8008a8c:	4013      	ands	r3, r2
 8008a8e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	021b      	lsls	r3, r3, #8
 8008a94:	68fa      	ldr	r2, [r7, #12]
 8008a96:	4313      	orrs	r3, r2
 8008a98:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	68fa      	ldr	r2, [r7, #12]
 8008aa0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	681a      	ldr	r2, [r3, #0]
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	2101      	movs	r1, #1
 8008aae:	430a      	orrs	r2, r1
 8008ab0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2241      	movs	r2, #65	; 0x41
 8008ab6:	2120      	movs	r1, #32
 8008ab8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2240      	movs	r2, #64	; 0x40
 8008abe:	2100      	movs	r1, #0
 8008ac0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	e000      	b.n	8008ac8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008ac6:	2302      	movs	r3, #2
  }
}
 8008ac8:	0018      	movs	r0, r3
 8008aca:	46bd      	mov	sp, r7
 8008acc:	b004      	add	sp, #16
 8008ace:	bd80      	pop	{r7, pc}
 8008ad0:	fffff0ff 	.word	0xfffff0ff

08008ad4 <HAL_PWR_DisablePVD>:
/**
  * @brief Disables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	af00      	add	r7, sp, #0
  /* Disable the power voltage detector */
  CLEAR_BIT(PWR->CR, PWR_CR_PVDE);
 8008ad8:	4b04      	ldr	r3, [pc, #16]	; (8008aec <HAL_PWR_DisablePVD+0x18>)
 8008ada:	681a      	ldr	r2, [r3, #0]
 8008adc:	4b03      	ldr	r3, [pc, #12]	; (8008aec <HAL_PWR_DisablePVD+0x18>)
 8008ade:	2110      	movs	r1, #16
 8008ae0:	438a      	bics	r2, r1
 8008ae2:	601a      	str	r2, [r3, #0]
}
 8008ae4:	46c0      	nop			; (mov r8, r8)
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}
 8008aea:	46c0      	nop			; (mov r8, r8)
 8008aec:	40007000 	.word	0x40007000

08008af0 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b086      	sub	sp, #24
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
 8008af8:	000a      	movs	r2, r1
 8008afa:	1cfb      	adds	r3, r7, #3
 8008afc:	701a      	strb	r2, [r3, #0]
   uint32_t tmpreg = 0U;
 8008afe:	2300      	movs	r3, #0
 8008b00:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8008b02:	4b23      	ldr	r3, [pc, #140]	; (8008b90 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8008b04:	681a      	ldr	r2, [r3, #0]
 8008b06:	2380      	movs	r3, #128	; 0x80
 8008b08:	009b      	lsls	r3, r3, #2
 8008b0a:	4013      	ands	r3, r2
 8008b0c:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8008b0e:	4b21      	ldr	r3, [pc, #132]	; (8008b94 <HAL_PWR_EnterSLEEPMode+0xa4>)
 8008b10:	6a1b      	ldr	r3, [r3, #32]
 8008b12:	2201      	movs	r2, #1
 8008b14:	4013      	ands	r3, r2
 8008b16:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d008      	beq.n	8008b30 <HAL_PWR_EnterSLEEPMode+0x40>
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d005      	beq.n	8008b30 <HAL_PWR_EnterSLEEPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8008b24:	4b1a      	ldr	r3, [pc, #104]	; (8008b90 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8008b26:	681a      	ldr	r2, [r3, #0]
 8008b28:	4b19      	ldr	r3, [pc, #100]	; (8008b90 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8008b2a:	491b      	ldr	r1, [pc, #108]	; (8008b98 <HAL_PWR_EnterSLEEPMode+0xa8>)
 8008b2c:	400a      	ands	r2, r1
 8008b2e:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Sleep mode ---------------------------------*/
  tmpreg = PWR->CR;
 8008b30:	4b17      	ldr	r3, [pc, #92]	; (8008b90 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	617b      	str	r3, [r7, #20]

  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	2203      	movs	r2, #3
 8008b3a:	4393      	bics	r3, r2
 8008b3c:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8008b3e:	697a      	ldr	r2, [r7, #20]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	4313      	orrs	r3, r2
 8008b44:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8008b46:	4b12      	ldr	r3, [pc, #72]	; (8008b90 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8008b48:	697a      	ldr	r2, [r7, #20]
 8008b4a:	601a      	str	r2, [r3, #0]
  
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008b4c:	4b13      	ldr	r3, [pc, #76]	; (8008b9c <HAL_PWR_EnterSLEEPMode+0xac>)
 8008b4e:	691a      	ldr	r2, [r3, #16]
 8008b50:	4b12      	ldr	r3, [pc, #72]	; (8008b9c <HAL_PWR_EnterSLEEPMode+0xac>)
 8008b52:	2104      	movs	r1, #4
 8008b54:	438a      	bics	r2, r1
 8008b56:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8008b58:	1cfb      	adds	r3, r7, #3
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	d101      	bne.n	8008b64 <HAL_PWR_EnterSLEEPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8008b60:	bf30      	wfi
 8008b62:	e002      	b.n	8008b6a <HAL_PWR_EnterSLEEPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8008b64:	bf40      	sev
    __WFE();
 8008b66:	bf20      	wfe
    __WFE();
 8008b68:	bf20      	wfe
  }

  if((ulpbit != 0) && (vrefinbit != 0))
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d009      	beq.n	8008b84 <HAL_PWR_EnterSLEEPMode+0x94>
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d006      	beq.n	8008b84 <HAL_PWR_EnterSLEEPMode+0x94>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8008b76:	4b06      	ldr	r3, [pc, #24]	; (8008b90 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8008b78:	681a      	ldr	r2, [r3, #0]
 8008b7a:	4b05      	ldr	r3, [pc, #20]	; (8008b90 <HAL_PWR_EnterSLEEPMode+0xa0>)
 8008b7c:	2180      	movs	r1, #128	; 0x80
 8008b7e:	0089      	lsls	r1, r1, #2
 8008b80:	430a      	orrs	r2, r1
 8008b82:	601a      	str	r2, [r3, #0]
  }

  /* Additional NOP to ensure all pending instructions are flushed before entering low power mode */
  __NOP();
 8008b84:	46c0      	nop			; (mov r8, r8)

}
 8008b86:	46c0      	nop			; (mov r8, r8)
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	b006      	add	sp, #24
 8008b8c:	bd80      	pop	{r7, pc}
 8008b8e:	46c0      	nop			; (mov r8, r8)
 8008b90:	40007000 	.word	0x40007000
 8008b94:	40010000 	.word	0x40010000
 8008b98:	fffffdff 	.word	0xfffffdff
 8008b9c:	e000ed00 	.word	0xe000ed00

08008ba0 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b086      	sub	sp, #24
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
 8008ba8:	000a      	movs	r2, r1
 8008baa:	1cfb      	adds	r3, r7, #3
 8008bac:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8008bb2:	4b25      	ldr	r3, [pc, #148]	; (8008c48 <HAL_PWR_EnterSTOPMode+0xa8>)
 8008bb4:	681a      	ldr	r2, [r3, #0]
 8008bb6:	2380      	movs	r3, #128	; 0x80
 8008bb8:	009b      	lsls	r3, r3, #2
 8008bba:	4013      	ands	r3, r2
 8008bbc:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8008bbe:	4b23      	ldr	r3, [pc, #140]	; (8008c4c <HAL_PWR_EnterSTOPMode+0xac>)
 8008bc0:	6a1b      	ldr	r3, [r3, #32]
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	4013      	ands	r3, r2
 8008bc6:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d008      	beq.n	8008be0 <HAL_PWR_EnterSTOPMode+0x40>
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d005      	beq.n	8008be0 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8008bd4:	4b1c      	ldr	r3, [pc, #112]	; (8008c48 <HAL_PWR_EnterSTOPMode+0xa8>)
 8008bd6:	681a      	ldr	r2, [r3, #0]
 8008bd8:	4b1b      	ldr	r3, [pc, #108]	; (8008c48 <HAL_PWR_EnterSTOPMode+0xa8>)
 8008bda:	491d      	ldr	r1, [pc, #116]	; (8008c50 <HAL_PWR_EnterSTOPMode+0xb0>)
 8008bdc:	400a      	ands	r2, r1
 8008bde:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8008be0:	4b19      	ldr	r3, [pc, #100]	; (8008c48 <HAL_PWR_EnterSTOPMode+0xa8>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	2203      	movs	r2, #3
 8008bea:	4393      	bics	r3, r2
 8008bec:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8008bee:	697a      	ldr	r2, [r7, #20]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8008bf6:	4b14      	ldr	r3, [pc, #80]	; (8008c48 <HAL_PWR_EnterSTOPMode+0xa8>)
 8008bf8:	697a      	ldr	r2, [r7, #20]
 8008bfa:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008bfc:	4b15      	ldr	r3, [pc, #84]	; (8008c54 <HAL_PWR_EnterSTOPMode+0xb4>)
 8008bfe:	691a      	ldr	r2, [r3, #16]
 8008c00:	4b14      	ldr	r3, [pc, #80]	; (8008c54 <HAL_PWR_EnterSTOPMode+0xb4>)
 8008c02:	2104      	movs	r1, #4
 8008c04:	430a      	orrs	r2, r1
 8008c06:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8008c08:	1cfb      	adds	r3, r7, #3
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d101      	bne.n	8008c14 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8008c10:	bf30      	wfi
 8008c12:	e002      	b.n	8008c1a <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8008c14:	bf40      	sev
    __WFE();
 8008c16:	bf20      	wfe
    __WFE();
 8008c18:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8008c1a:	4b0e      	ldr	r3, [pc, #56]	; (8008c54 <HAL_PWR_EnterSTOPMode+0xb4>)
 8008c1c:	691a      	ldr	r2, [r3, #16]
 8008c1e:	4b0d      	ldr	r3, [pc, #52]	; (8008c54 <HAL_PWR_EnterSTOPMode+0xb4>)
 8008c20:	2104      	movs	r1, #4
 8008c22:	438a      	bics	r2, r1
 8008c24:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d009      	beq.n	8008c40 <HAL_PWR_EnterSTOPMode+0xa0>
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d006      	beq.n	8008c40 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8008c32:	4b05      	ldr	r3, [pc, #20]	; (8008c48 <HAL_PWR_EnterSTOPMode+0xa8>)
 8008c34:	681a      	ldr	r2, [r3, #0]
 8008c36:	4b04      	ldr	r3, [pc, #16]	; (8008c48 <HAL_PWR_EnterSTOPMode+0xa8>)
 8008c38:	2180      	movs	r1, #128	; 0x80
 8008c3a:	0089      	lsls	r1, r1, #2
 8008c3c:	430a      	orrs	r2, r1
 8008c3e:	601a      	str	r2, [r3, #0]
  }
}
 8008c40:	46c0      	nop			; (mov r8, r8)
 8008c42:	46bd      	mov	sp, r7
 8008c44:	b006      	add	sp, #24
 8008c46:	bd80      	pop	{r7, pc}
 8008c48:	40007000 	.word	0x40007000
 8008c4c:	40010000 	.word	0x40010000
 8008c50:	fffffdff 	.word	0xfffffdff
 8008c54:	e000ed00 	.word	0xe000ed00

08008c58 <HAL_PWREx_EnableFastWakeUp>:
  *        Means, when ULP = 1 and FWU = 1 :VREFINT startup time is ignored when 
  *        exiting from low power mode.
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	af00      	add	r7, sp, #0
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 8008c5c:	4b04      	ldr	r3, [pc, #16]	; (8008c70 <HAL_PWREx_EnableFastWakeUp+0x18>)
 8008c5e:	681a      	ldr	r2, [r3, #0]
 8008c60:	4b03      	ldr	r3, [pc, #12]	; (8008c70 <HAL_PWREx_EnableFastWakeUp+0x18>)
 8008c62:	2180      	movs	r1, #128	; 0x80
 8008c64:	00c9      	lsls	r1, r1, #3
 8008c66:	430a      	orrs	r2, r1
 8008c68:	601a      	str	r2, [r3, #0]
}
 8008c6a:	46c0      	nop			; (mov r8, r8)
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}
 8008c70:	40007000 	.word	0x40007000

08008c74 <HAL_PWREx_EnableUltraLowPower>:
/**
  * @brief  Enables the Ultra Low Power mode
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	af00      	add	r7, sp, #0
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 8008c78:	4b04      	ldr	r3, [pc, #16]	; (8008c8c <HAL_PWREx_EnableUltraLowPower+0x18>)
 8008c7a:	681a      	ldr	r2, [r3, #0]
 8008c7c:	4b03      	ldr	r3, [pc, #12]	; (8008c8c <HAL_PWREx_EnableUltraLowPower+0x18>)
 8008c7e:	2180      	movs	r1, #128	; 0x80
 8008c80:	0089      	lsls	r1, r1, #2
 8008c82:	430a      	orrs	r2, r1
 8008c84:	601a      	str	r2, [r3, #0]
}
 8008c86:	46c0      	nop			; (mov r8, r8)
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}
 8008c8c:	40007000 	.word	0x40007000

08008c90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008c90:	b5b0      	push	{r4, r5, r7, lr}
 8008c92:	b08a      	sub	sp, #40	; 0x28
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d102      	bne.n	8008ca4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	f000 fbbf 	bl	8009422 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ca4:	4bc9      	ldr	r3, [pc, #804]	; (8008fcc <HAL_RCC_OscConfig+0x33c>)
 8008ca6:	68db      	ldr	r3, [r3, #12]
 8008ca8:	220c      	movs	r2, #12
 8008caa:	4013      	ands	r3, r2
 8008cac:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008cae:	4bc7      	ldr	r3, [pc, #796]	; (8008fcc <HAL_RCC_OscConfig+0x33c>)
 8008cb0:	68da      	ldr	r2, [r3, #12]
 8008cb2:	2380      	movs	r3, #128	; 0x80
 8008cb4:	025b      	lsls	r3, r3, #9
 8008cb6:	4013      	ands	r3, r2
 8008cb8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	4013      	ands	r3, r2
 8008cc2:	d100      	bne.n	8008cc6 <HAL_RCC_OscConfig+0x36>
 8008cc4:	e07e      	b.n	8008dc4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008cc6:	69fb      	ldr	r3, [r7, #28]
 8008cc8:	2b08      	cmp	r3, #8
 8008cca:	d007      	beq.n	8008cdc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008ccc:	69fb      	ldr	r3, [r7, #28]
 8008cce:	2b0c      	cmp	r3, #12
 8008cd0:	d112      	bne.n	8008cf8 <HAL_RCC_OscConfig+0x68>
 8008cd2:	69ba      	ldr	r2, [r7, #24]
 8008cd4:	2380      	movs	r3, #128	; 0x80
 8008cd6:	025b      	lsls	r3, r3, #9
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d10d      	bne.n	8008cf8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008cdc:	4bbb      	ldr	r3, [pc, #748]	; (8008fcc <HAL_RCC_OscConfig+0x33c>)
 8008cde:	681a      	ldr	r2, [r3, #0]
 8008ce0:	2380      	movs	r3, #128	; 0x80
 8008ce2:	029b      	lsls	r3, r3, #10
 8008ce4:	4013      	ands	r3, r2
 8008ce6:	d100      	bne.n	8008cea <HAL_RCC_OscConfig+0x5a>
 8008ce8:	e06b      	b.n	8008dc2 <HAL_RCC_OscConfig+0x132>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d167      	bne.n	8008dc2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	f000 fb95 	bl	8009422 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	685a      	ldr	r2, [r3, #4]
 8008cfc:	2380      	movs	r3, #128	; 0x80
 8008cfe:	025b      	lsls	r3, r3, #9
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d107      	bne.n	8008d14 <HAL_RCC_OscConfig+0x84>
 8008d04:	4bb1      	ldr	r3, [pc, #708]	; (8008fcc <HAL_RCC_OscConfig+0x33c>)
 8008d06:	681a      	ldr	r2, [r3, #0]
 8008d08:	4bb0      	ldr	r3, [pc, #704]	; (8008fcc <HAL_RCC_OscConfig+0x33c>)
 8008d0a:	2180      	movs	r1, #128	; 0x80
 8008d0c:	0249      	lsls	r1, r1, #9
 8008d0e:	430a      	orrs	r2, r1
 8008d10:	601a      	str	r2, [r3, #0]
 8008d12:	e027      	b.n	8008d64 <HAL_RCC_OscConfig+0xd4>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	685a      	ldr	r2, [r3, #4]
 8008d18:	23a0      	movs	r3, #160	; 0xa0
 8008d1a:	02db      	lsls	r3, r3, #11
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d10e      	bne.n	8008d3e <HAL_RCC_OscConfig+0xae>
 8008d20:	4baa      	ldr	r3, [pc, #680]	; (8008fcc <HAL_RCC_OscConfig+0x33c>)
 8008d22:	681a      	ldr	r2, [r3, #0]
 8008d24:	4ba9      	ldr	r3, [pc, #676]	; (8008fcc <HAL_RCC_OscConfig+0x33c>)
 8008d26:	2180      	movs	r1, #128	; 0x80
 8008d28:	02c9      	lsls	r1, r1, #11
 8008d2a:	430a      	orrs	r2, r1
 8008d2c:	601a      	str	r2, [r3, #0]
 8008d2e:	4ba7      	ldr	r3, [pc, #668]	; (8008fcc <HAL_RCC_OscConfig+0x33c>)
 8008d30:	681a      	ldr	r2, [r3, #0]
 8008d32:	4ba6      	ldr	r3, [pc, #664]	; (8008fcc <HAL_RCC_OscConfig+0x33c>)
 8008d34:	2180      	movs	r1, #128	; 0x80
 8008d36:	0249      	lsls	r1, r1, #9
 8008d38:	430a      	orrs	r2, r1
 8008d3a:	601a      	str	r2, [r3, #0]
 8008d3c:	e012      	b.n	8008d64 <HAL_RCC_OscConfig+0xd4>
 8008d3e:	4ba3      	ldr	r3, [pc, #652]	; (8008fcc <HAL_RCC_OscConfig+0x33c>)
 8008d40:	681a      	ldr	r2, [r3, #0]
 8008d42:	4ba2      	ldr	r3, [pc, #648]	; (8008fcc <HAL_RCC_OscConfig+0x33c>)
 8008d44:	49a2      	ldr	r1, [pc, #648]	; (8008fd0 <HAL_RCC_OscConfig+0x340>)
 8008d46:	400a      	ands	r2, r1
 8008d48:	601a      	str	r2, [r3, #0]
 8008d4a:	4ba0      	ldr	r3, [pc, #640]	; (8008fcc <HAL_RCC_OscConfig+0x33c>)
 8008d4c:	681a      	ldr	r2, [r3, #0]
 8008d4e:	2380      	movs	r3, #128	; 0x80
 8008d50:	025b      	lsls	r3, r3, #9
 8008d52:	4013      	ands	r3, r2
 8008d54:	60fb      	str	r3, [r7, #12]
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	4b9c      	ldr	r3, [pc, #624]	; (8008fcc <HAL_RCC_OscConfig+0x33c>)
 8008d5a:	681a      	ldr	r2, [r3, #0]
 8008d5c:	4b9b      	ldr	r3, [pc, #620]	; (8008fcc <HAL_RCC_OscConfig+0x33c>)
 8008d5e:	499d      	ldr	r1, [pc, #628]	; (8008fd4 <HAL_RCC_OscConfig+0x344>)
 8008d60:	400a      	ands	r2, r1
 8008d62:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d015      	beq.n	8008d98 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d6c:	f7fc f835 	bl	8004dda <HAL_GetTick>
 8008d70:	0003      	movs	r3, r0
 8008d72:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008d74:	e009      	b.n	8008d8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008d76:	f7fc f830 	bl	8004dda <HAL_GetTick>
 8008d7a:	0002      	movs	r2, r0
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	1ad3      	subs	r3, r2, r3
 8008d80:	2b64      	cmp	r3, #100	; 0x64
 8008d82:	d902      	bls.n	8008d8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008d84:	2303      	movs	r3, #3
 8008d86:	f000 fb4c 	bl	8009422 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008d8a:	4b90      	ldr	r3, [pc, #576]	; (8008fcc <HAL_RCC_OscConfig+0x33c>)
 8008d8c:	681a      	ldr	r2, [r3, #0]
 8008d8e:	2380      	movs	r3, #128	; 0x80
 8008d90:	029b      	lsls	r3, r3, #10
 8008d92:	4013      	ands	r3, r2
 8008d94:	d0ef      	beq.n	8008d76 <HAL_RCC_OscConfig+0xe6>
 8008d96:	e015      	b.n	8008dc4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d98:	f7fc f81f 	bl	8004dda <HAL_GetTick>
 8008d9c:	0003      	movs	r3, r0
 8008d9e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008da0:	e008      	b.n	8008db4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008da2:	f7fc f81a 	bl	8004dda <HAL_GetTick>
 8008da6:	0002      	movs	r2, r0
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	1ad3      	subs	r3, r2, r3
 8008dac:	2b64      	cmp	r3, #100	; 0x64
 8008dae:	d901      	bls.n	8008db4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8008db0:	2303      	movs	r3, #3
 8008db2:	e336      	b.n	8009422 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008db4:	4b85      	ldr	r3, [pc, #532]	; (8008fcc <HAL_RCC_OscConfig+0x33c>)
 8008db6:	681a      	ldr	r2, [r3, #0]
 8008db8:	2380      	movs	r3, #128	; 0x80
 8008dba:	029b      	lsls	r3, r3, #10
 8008dbc:	4013      	ands	r3, r2
 8008dbe:	d1f0      	bne.n	8008da2 <HAL_RCC_OscConfig+0x112>
 8008dc0:	e000      	b.n	8008dc4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008dc2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	2202      	movs	r2, #2
 8008dca:	4013      	ands	r3, r2
 8008dcc:	d100      	bne.n	8008dd0 <HAL_RCC_OscConfig+0x140>
 8008dce:	e099      	b.n	8008f04 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	68db      	ldr	r3, [r3, #12]
 8008dd4:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8008dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd8:	2220      	movs	r2, #32
 8008dda:	4013      	ands	r3, r2
 8008ddc:	d009      	beq.n	8008df2 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8008dde:	4b7b      	ldr	r3, [pc, #492]	; (8008fcc <HAL_RCC_OscConfig+0x33c>)
 8008de0:	681a      	ldr	r2, [r3, #0]
 8008de2:	4b7a      	ldr	r3, [pc, #488]	; (8008fcc <HAL_RCC_OscConfig+0x33c>)
 8008de4:	2120      	movs	r1, #32
 8008de6:	430a      	orrs	r2, r1
 8008de8:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8008dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dec:	2220      	movs	r2, #32
 8008dee:	4393      	bics	r3, r2
 8008df0:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008df2:	69fb      	ldr	r3, [r7, #28]
 8008df4:	2b04      	cmp	r3, #4
 8008df6:	d005      	beq.n	8008e04 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008df8:	69fb      	ldr	r3, [r7, #28]
 8008dfa:	2b0c      	cmp	r3, #12
 8008dfc:	d13e      	bne.n	8008e7c <HAL_RCC_OscConfig+0x1ec>
 8008dfe:	69bb      	ldr	r3, [r7, #24]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d13b      	bne.n	8008e7c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8008e04:	4b71      	ldr	r3, [pc, #452]	; (8008fcc <HAL_RCC_OscConfig+0x33c>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	2204      	movs	r2, #4
 8008e0a:	4013      	ands	r3, r2
 8008e0c:	d004      	beq.n	8008e18 <HAL_RCC_OscConfig+0x188>
 8008e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d101      	bne.n	8008e18 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8008e14:	2301      	movs	r3, #1
 8008e16:	e304      	b.n	8009422 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e18:	4b6c      	ldr	r3, [pc, #432]	; (8008fcc <HAL_RCC_OscConfig+0x33c>)
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	4a6e      	ldr	r2, [pc, #440]	; (8008fd8 <HAL_RCC_OscConfig+0x348>)
 8008e1e:	4013      	ands	r3, r2
 8008e20:	0019      	movs	r1, r3
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	691b      	ldr	r3, [r3, #16]
 8008e26:	021a      	lsls	r2, r3, #8
 8008e28:	4b68      	ldr	r3, [pc, #416]	; (8008fcc <HAL_RCC_OscConfig+0x33c>)
 8008e2a:	430a      	orrs	r2, r1
 8008e2c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8008e2e:	4b67      	ldr	r3, [pc, #412]	; (8008fcc <HAL_RCC_OscConfig+0x33c>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	2209      	movs	r2, #9
 8008e34:	4393      	bics	r3, r2
 8008e36:	0019      	movs	r1, r3
 8008e38:	4b64      	ldr	r3, [pc, #400]	; (8008fcc <HAL_RCC_OscConfig+0x33c>)
 8008e3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e3c:	430a      	orrs	r2, r1
 8008e3e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008e40:	f000 fc42 	bl	80096c8 <HAL_RCC_GetSysClockFreq>
 8008e44:	0001      	movs	r1, r0
 8008e46:	4b61      	ldr	r3, [pc, #388]	; (8008fcc <HAL_RCC_OscConfig+0x33c>)
 8008e48:	68db      	ldr	r3, [r3, #12]
 8008e4a:	091b      	lsrs	r3, r3, #4
 8008e4c:	220f      	movs	r2, #15
 8008e4e:	4013      	ands	r3, r2
 8008e50:	4a62      	ldr	r2, [pc, #392]	; (8008fdc <HAL_RCC_OscConfig+0x34c>)
 8008e52:	5cd3      	ldrb	r3, [r2, r3]
 8008e54:	000a      	movs	r2, r1
 8008e56:	40da      	lsrs	r2, r3
 8008e58:	4b61      	ldr	r3, [pc, #388]	; (8008fe0 <HAL_RCC_OscConfig+0x350>)
 8008e5a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8008e5c:	4b61      	ldr	r3, [pc, #388]	; (8008fe4 <HAL_RCC_OscConfig+0x354>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	2513      	movs	r5, #19
 8008e62:	197c      	adds	r4, r7, r5
 8008e64:	0018      	movs	r0, r3
 8008e66:	f7fb ffaf 	bl	8004dc8 <HAL_InitTick>
 8008e6a:	0003      	movs	r3, r0
 8008e6c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8008e6e:	197b      	adds	r3, r7, r5
 8008e70:	781b      	ldrb	r3, [r3, #0]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d046      	beq.n	8008f04 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8008e76:	197b      	adds	r3, r7, r5
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	e2d2      	b.n	8009422 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8008e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d027      	beq.n	8008ed2 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8008e82:	4b52      	ldr	r3, [pc, #328]	; (8008fcc <HAL_RCC_OscConfig+0x33c>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	2209      	movs	r2, #9
 8008e88:	4393      	bics	r3, r2
 8008e8a:	0019      	movs	r1, r3
 8008e8c:	4b4f      	ldr	r3, [pc, #316]	; (8008fcc <HAL_RCC_OscConfig+0x33c>)
 8008e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e90:	430a      	orrs	r2, r1
 8008e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e94:	f7fb ffa1 	bl	8004dda <HAL_GetTick>
 8008e98:	0003      	movs	r3, r0
 8008e9a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008e9c:	e008      	b.n	8008eb0 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008e9e:	f7fb ff9c 	bl	8004dda <HAL_GetTick>
 8008ea2:	0002      	movs	r2, r0
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	1ad3      	subs	r3, r2, r3
 8008ea8:	2b02      	cmp	r3, #2
 8008eaa:	d901      	bls.n	8008eb0 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8008eac:	2303      	movs	r3, #3
 8008eae:	e2b8      	b.n	8009422 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008eb0:	4b46      	ldr	r3, [pc, #280]	; (8008fcc <HAL_RCC_OscConfig+0x33c>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	2204      	movs	r2, #4
 8008eb6:	4013      	ands	r3, r2
 8008eb8:	d0f1      	beq.n	8008e9e <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008eba:	4b44      	ldr	r3, [pc, #272]	; (8008fcc <HAL_RCC_OscConfig+0x33c>)
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	4a46      	ldr	r2, [pc, #280]	; (8008fd8 <HAL_RCC_OscConfig+0x348>)
 8008ec0:	4013      	ands	r3, r2
 8008ec2:	0019      	movs	r1, r3
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	691b      	ldr	r3, [r3, #16]
 8008ec8:	021a      	lsls	r2, r3, #8
 8008eca:	4b40      	ldr	r3, [pc, #256]	; (8008fcc <HAL_RCC_OscConfig+0x33c>)
 8008ecc:	430a      	orrs	r2, r1
 8008ece:	605a      	str	r2, [r3, #4]
 8008ed0:	e018      	b.n	8008f04 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008ed2:	4b3e      	ldr	r3, [pc, #248]	; (8008fcc <HAL_RCC_OscConfig+0x33c>)
 8008ed4:	681a      	ldr	r2, [r3, #0]
 8008ed6:	4b3d      	ldr	r3, [pc, #244]	; (8008fcc <HAL_RCC_OscConfig+0x33c>)
 8008ed8:	2101      	movs	r1, #1
 8008eda:	438a      	bics	r2, r1
 8008edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ede:	f7fb ff7c 	bl	8004dda <HAL_GetTick>
 8008ee2:	0003      	movs	r3, r0
 8008ee4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008ee6:	e008      	b.n	8008efa <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008ee8:	f7fb ff77 	bl	8004dda <HAL_GetTick>
 8008eec:	0002      	movs	r2, r0
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	1ad3      	subs	r3, r2, r3
 8008ef2:	2b02      	cmp	r3, #2
 8008ef4:	d901      	bls.n	8008efa <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8008ef6:	2303      	movs	r3, #3
 8008ef8:	e293      	b.n	8009422 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008efa:	4b34      	ldr	r3, [pc, #208]	; (8008fcc <HAL_RCC_OscConfig+0x33c>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	2204      	movs	r2, #4
 8008f00:	4013      	ands	r3, r2
 8008f02:	d1f1      	bne.n	8008ee8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	2210      	movs	r2, #16
 8008f0a:	4013      	ands	r3, r2
 8008f0c:	d100      	bne.n	8008f10 <HAL_RCC_OscConfig+0x280>
 8008f0e:	e0a2      	b.n	8009056 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008f10:	69fb      	ldr	r3, [r7, #28]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d140      	bne.n	8008f98 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008f16:	4b2d      	ldr	r3, [pc, #180]	; (8008fcc <HAL_RCC_OscConfig+0x33c>)
 8008f18:	681a      	ldr	r2, [r3, #0]
 8008f1a:	2380      	movs	r3, #128	; 0x80
 8008f1c:	009b      	lsls	r3, r3, #2
 8008f1e:	4013      	ands	r3, r2
 8008f20:	d005      	beq.n	8008f2e <HAL_RCC_OscConfig+0x29e>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	69db      	ldr	r3, [r3, #28]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d101      	bne.n	8008f2e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	e279      	b.n	8009422 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008f2e:	4b27      	ldr	r3, [pc, #156]	; (8008fcc <HAL_RCC_OscConfig+0x33c>)
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	4a2d      	ldr	r2, [pc, #180]	; (8008fe8 <HAL_RCC_OscConfig+0x358>)
 8008f34:	4013      	ands	r3, r2
 8008f36:	0019      	movs	r1, r3
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008f3c:	4b23      	ldr	r3, [pc, #140]	; (8008fcc <HAL_RCC_OscConfig+0x33c>)
 8008f3e:	430a      	orrs	r2, r1
 8008f40:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008f42:	4b22      	ldr	r3, [pc, #136]	; (8008fcc <HAL_RCC_OscConfig+0x33c>)
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	021b      	lsls	r3, r3, #8
 8008f48:	0a19      	lsrs	r1, r3, #8
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6a1b      	ldr	r3, [r3, #32]
 8008f4e:	061a      	lsls	r2, r3, #24
 8008f50:	4b1e      	ldr	r3, [pc, #120]	; (8008fcc <HAL_RCC_OscConfig+0x33c>)
 8008f52:	430a      	orrs	r2, r1
 8008f54:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f5a:	0b5b      	lsrs	r3, r3, #13
 8008f5c:	3301      	adds	r3, #1
 8008f5e:	2280      	movs	r2, #128	; 0x80
 8008f60:	0212      	lsls	r2, r2, #8
 8008f62:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8008f64:	4b19      	ldr	r3, [pc, #100]	; (8008fcc <HAL_RCC_OscConfig+0x33c>)
 8008f66:	68db      	ldr	r3, [r3, #12]
 8008f68:	091b      	lsrs	r3, r3, #4
 8008f6a:	210f      	movs	r1, #15
 8008f6c:	400b      	ands	r3, r1
 8008f6e:	491b      	ldr	r1, [pc, #108]	; (8008fdc <HAL_RCC_OscConfig+0x34c>)
 8008f70:	5ccb      	ldrb	r3, [r1, r3]
 8008f72:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8008f74:	4b1a      	ldr	r3, [pc, #104]	; (8008fe0 <HAL_RCC_OscConfig+0x350>)
 8008f76:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8008f78:	4b1a      	ldr	r3, [pc, #104]	; (8008fe4 <HAL_RCC_OscConfig+0x354>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	2513      	movs	r5, #19
 8008f7e:	197c      	adds	r4, r7, r5
 8008f80:	0018      	movs	r0, r3
 8008f82:	f7fb ff21 	bl	8004dc8 <HAL_InitTick>
 8008f86:	0003      	movs	r3, r0
 8008f88:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8008f8a:	197b      	adds	r3, r7, r5
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d061      	beq.n	8009056 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8008f92:	197b      	adds	r3, r7, r5
 8008f94:	781b      	ldrb	r3, [r3, #0]
 8008f96:	e244      	b.n	8009422 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	69db      	ldr	r3, [r3, #28]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d040      	beq.n	8009022 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008fa0:	4b0a      	ldr	r3, [pc, #40]	; (8008fcc <HAL_RCC_OscConfig+0x33c>)
 8008fa2:	681a      	ldr	r2, [r3, #0]
 8008fa4:	4b09      	ldr	r3, [pc, #36]	; (8008fcc <HAL_RCC_OscConfig+0x33c>)
 8008fa6:	2180      	movs	r1, #128	; 0x80
 8008fa8:	0049      	lsls	r1, r1, #1
 8008faa:	430a      	orrs	r2, r1
 8008fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008fae:	f7fb ff14 	bl	8004dda <HAL_GetTick>
 8008fb2:	0003      	movs	r3, r0
 8008fb4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8008fb6:	e019      	b.n	8008fec <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008fb8:	f7fb ff0f 	bl	8004dda <HAL_GetTick>
 8008fbc:	0002      	movs	r2, r0
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	1ad3      	subs	r3, r2, r3
 8008fc2:	2b02      	cmp	r3, #2
 8008fc4:	d912      	bls.n	8008fec <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8008fc6:	2303      	movs	r3, #3
 8008fc8:	e22b      	b.n	8009422 <HAL_RCC_OscConfig+0x792>
 8008fca:	46c0      	nop			; (mov r8, r8)
 8008fcc:	40021000 	.word	0x40021000
 8008fd0:	fffeffff 	.word	0xfffeffff
 8008fd4:	fffbffff 	.word	0xfffbffff
 8008fd8:	ffffe0ff 	.word	0xffffe0ff
 8008fdc:	0801f24c 	.word	0x0801f24c
 8008fe0:	20000070 	.word	0x20000070
 8008fe4:	20000074 	.word	0x20000074
 8008fe8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8008fec:	4bca      	ldr	r3, [pc, #808]	; (8009318 <HAL_RCC_OscConfig+0x688>)
 8008fee:	681a      	ldr	r2, [r3, #0]
 8008ff0:	2380      	movs	r3, #128	; 0x80
 8008ff2:	009b      	lsls	r3, r3, #2
 8008ff4:	4013      	ands	r3, r2
 8008ff6:	d0df      	beq.n	8008fb8 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008ff8:	4bc7      	ldr	r3, [pc, #796]	; (8009318 <HAL_RCC_OscConfig+0x688>)
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	4ac7      	ldr	r2, [pc, #796]	; (800931c <HAL_RCC_OscConfig+0x68c>)
 8008ffe:	4013      	ands	r3, r2
 8009000:	0019      	movs	r1, r3
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009006:	4bc4      	ldr	r3, [pc, #784]	; (8009318 <HAL_RCC_OscConfig+0x688>)
 8009008:	430a      	orrs	r2, r1
 800900a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800900c:	4bc2      	ldr	r3, [pc, #776]	; (8009318 <HAL_RCC_OscConfig+0x688>)
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	021b      	lsls	r3, r3, #8
 8009012:	0a19      	lsrs	r1, r3, #8
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6a1b      	ldr	r3, [r3, #32]
 8009018:	061a      	lsls	r2, r3, #24
 800901a:	4bbf      	ldr	r3, [pc, #764]	; (8009318 <HAL_RCC_OscConfig+0x688>)
 800901c:	430a      	orrs	r2, r1
 800901e:	605a      	str	r2, [r3, #4]
 8009020:	e019      	b.n	8009056 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8009022:	4bbd      	ldr	r3, [pc, #756]	; (8009318 <HAL_RCC_OscConfig+0x688>)
 8009024:	681a      	ldr	r2, [r3, #0]
 8009026:	4bbc      	ldr	r3, [pc, #752]	; (8009318 <HAL_RCC_OscConfig+0x688>)
 8009028:	49bd      	ldr	r1, [pc, #756]	; (8009320 <HAL_RCC_OscConfig+0x690>)
 800902a:	400a      	ands	r2, r1
 800902c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800902e:	f7fb fed4 	bl	8004dda <HAL_GetTick>
 8009032:	0003      	movs	r3, r0
 8009034:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8009036:	e008      	b.n	800904a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009038:	f7fb fecf 	bl	8004dda <HAL_GetTick>
 800903c:	0002      	movs	r2, r0
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	1ad3      	subs	r3, r2, r3
 8009042:	2b02      	cmp	r3, #2
 8009044:	d901      	bls.n	800904a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8009046:	2303      	movs	r3, #3
 8009048:	e1eb      	b.n	8009422 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800904a:	4bb3      	ldr	r3, [pc, #716]	; (8009318 <HAL_RCC_OscConfig+0x688>)
 800904c:	681a      	ldr	r2, [r3, #0]
 800904e:	2380      	movs	r3, #128	; 0x80
 8009050:	009b      	lsls	r3, r3, #2
 8009052:	4013      	ands	r3, r2
 8009054:	d1f0      	bne.n	8009038 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	2208      	movs	r2, #8
 800905c:	4013      	ands	r3, r2
 800905e:	d036      	beq.n	80090ce <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	695b      	ldr	r3, [r3, #20]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d019      	beq.n	800909c <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009068:	4bab      	ldr	r3, [pc, #684]	; (8009318 <HAL_RCC_OscConfig+0x688>)
 800906a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800906c:	4baa      	ldr	r3, [pc, #680]	; (8009318 <HAL_RCC_OscConfig+0x688>)
 800906e:	2101      	movs	r1, #1
 8009070:	430a      	orrs	r2, r1
 8009072:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009074:	f7fb feb1 	bl	8004dda <HAL_GetTick>
 8009078:	0003      	movs	r3, r0
 800907a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800907c:	e008      	b.n	8009090 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800907e:	f7fb feac 	bl	8004dda <HAL_GetTick>
 8009082:	0002      	movs	r2, r0
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	1ad3      	subs	r3, r2, r3
 8009088:	2b02      	cmp	r3, #2
 800908a:	d901      	bls.n	8009090 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 800908c:	2303      	movs	r3, #3
 800908e:	e1c8      	b.n	8009422 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009090:	4ba1      	ldr	r3, [pc, #644]	; (8009318 <HAL_RCC_OscConfig+0x688>)
 8009092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009094:	2202      	movs	r2, #2
 8009096:	4013      	ands	r3, r2
 8009098:	d0f1      	beq.n	800907e <HAL_RCC_OscConfig+0x3ee>
 800909a:	e018      	b.n	80090ce <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800909c:	4b9e      	ldr	r3, [pc, #632]	; (8009318 <HAL_RCC_OscConfig+0x688>)
 800909e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80090a0:	4b9d      	ldr	r3, [pc, #628]	; (8009318 <HAL_RCC_OscConfig+0x688>)
 80090a2:	2101      	movs	r1, #1
 80090a4:	438a      	bics	r2, r1
 80090a6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80090a8:	f7fb fe97 	bl	8004dda <HAL_GetTick>
 80090ac:	0003      	movs	r3, r0
 80090ae:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80090b0:	e008      	b.n	80090c4 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80090b2:	f7fb fe92 	bl	8004dda <HAL_GetTick>
 80090b6:	0002      	movs	r2, r0
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	1ad3      	subs	r3, r2, r3
 80090bc:	2b02      	cmp	r3, #2
 80090be:	d901      	bls.n	80090c4 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80090c0:	2303      	movs	r3, #3
 80090c2:	e1ae      	b.n	8009422 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80090c4:	4b94      	ldr	r3, [pc, #592]	; (8009318 <HAL_RCC_OscConfig+0x688>)
 80090c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090c8:	2202      	movs	r2, #2
 80090ca:	4013      	ands	r3, r2
 80090cc:	d1f1      	bne.n	80090b2 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	2204      	movs	r2, #4
 80090d4:	4013      	ands	r3, r2
 80090d6:	d100      	bne.n	80090da <HAL_RCC_OscConfig+0x44a>
 80090d8:	e0ae      	b.n	8009238 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80090da:	2023      	movs	r0, #35	; 0x23
 80090dc:	183b      	adds	r3, r7, r0
 80090de:	2200      	movs	r2, #0
 80090e0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80090e2:	4b8d      	ldr	r3, [pc, #564]	; (8009318 <HAL_RCC_OscConfig+0x688>)
 80090e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090e6:	2380      	movs	r3, #128	; 0x80
 80090e8:	055b      	lsls	r3, r3, #21
 80090ea:	4013      	ands	r3, r2
 80090ec:	d109      	bne.n	8009102 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80090ee:	4b8a      	ldr	r3, [pc, #552]	; (8009318 <HAL_RCC_OscConfig+0x688>)
 80090f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090f2:	4b89      	ldr	r3, [pc, #548]	; (8009318 <HAL_RCC_OscConfig+0x688>)
 80090f4:	2180      	movs	r1, #128	; 0x80
 80090f6:	0549      	lsls	r1, r1, #21
 80090f8:	430a      	orrs	r2, r1
 80090fa:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80090fc:	183b      	adds	r3, r7, r0
 80090fe:	2201      	movs	r2, #1
 8009100:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009102:	4b88      	ldr	r3, [pc, #544]	; (8009324 <HAL_RCC_OscConfig+0x694>)
 8009104:	681a      	ldr	r2, [r3, #0]
 8009106:	2380      	movs	r3, #128	; 0x80
 8009108:	005b      	lsls	r3, r3, #1
 800910a:	4013      	ands	r3, r2
 800910c:	d11a      	bne.n	8009144 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800910e:	4b85      	ldr	r3, [pc, #532]	; (8009324 <HAL_RCC_OscConfig+0x694>)
 8009110:	681a      	ldr	r2, [r3, #0]
 8009112:	4b84      	ldr	r3, [pc, #528]	; (8009324 <HAL_RCC_OscConfig+0x694>)
 8009114:	2180      	movs	r1, #128	; 0x80
 8009116:	0049      	lsls	r1, r1, #1
 8009118:	430a      	orrs	r2, r1
 800911a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800911c:	f7fb fe5d 	bl	8004dda <HAL_GetTick>
 8009120:	0003      	movs	r3, r0
 8009122:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009124:	e008      	b.n	8009138 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009126:	f7fb fe58 	bl	8004dda <HAL_GetTick>
 800912a:	0002      	movs	r2, r0
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	1ad3      	subs	r3, r2, r3
 8009130:	2b64      	cmp	r3, #100	; 0x64
 8009132:	d901      	bls.n	8009138 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8009134:	2303      	movs	r3, #3
 8009136:	e174      	b.n	8009422 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009138:	4b7a      	ldr	r3, [pc, #488]	; (8009324 <HAL_RCC_OscConfig+0x694>)
 800913a:	681a      	ldr	r2, [r3, #0]
 800913c:	2380      	movs	r3, #128	; 0x80
 800913e:	005b      	lsls	r3, r3, #1
 8009140:	4013      	ands	r3, r2
 8009142:	d0f0      	beq.n	8009126 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	689a      	ldr	r2, [r3, #8]
 8009148:	2380      	movs	r3, #128	; 0x80
 800914a:	005b      	lsls	r3, r3, #1
 800914c:	429a      	cmp	r2, r3
 800914e:	d107      	bne.n	8009160 <HAL_RCC_OscConfig+0x4d0>
 8009150:	4b71      	ldr	r3, [pc, #452]	; (8009318 <HAL_RCC_OscConfig+0x688>)
 8009152:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009154:	4b70      	ldr	r3, [pc, #448]	; (8009318 <HAL_RCC_OscConfig+0x688>)
 8009156:	2180      	movs	r1, #128	; 0x80
 8009158:	0049      	lsls	r1, r1, #1
 800915a:	430a      	orrs	r2, r1
 800915c:	651a      	str	r2, [r3, #80]	; 0x50
 800915e:	e031      	b.n	80091c4 <HAL_RCC_OscConfig+0x534>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	689b      	ldr	r3, [r3, #8]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d10c      	bne.n	8009182 <HAL_RCC_OscConfig+0x4f2>
 8009168:	4b6b      	ldr	r3, [pc, #428]	; (8009318 <HAL_RCC_OscConfig+0x688>)
 800916a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800916c:	4b6a      	ldr	r3, [pc, #424]	; (8009318 <HAL_RCC_OscConfig+0x688>)
 800916e:	496c      	ldr	r1, [pc, #432]	; (8009320 <HAL_RCC_OscConfig+0x690>)
 8009170:	400a      	ands	r2, r1
 8009172:	651a      	str	r2, [r3, #80]	; 0x50
 8009174:	4b68      	ldr	r3, [pc, #416]	; (8009318 <HAL_RCC_OscConfig+0x688>)
 8009176:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009178:	4b67      	ldr	r3, [pc, #412]	; (8009318 <HAL_RCC_OscConfig+0x688>)
 800917a:	496b      	ldr	r1, [pc, #428]	; (8009328 <HAL_RCC_OscConfig+0x698>)
 800917c:	400a      	ands	r2, r1
 800917e:	651a      	str	r2, [r3, #80]	; 0x50
 8009180:	e020      	b.n	80091c4 <HAL_RCC_OscConfig+0x534>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	689a      	ldr	r2, [r3, #8]
 8009186:	23a0      	movs	r3, #160	; 0xa0
 8009188:	00db      	lsls	r3, r3, #3
 800918a:	429a      	cmp	r2, r3
 800918c:	d10e      	bne.n	80091ac <HAL_RCC_OscConfig+0x51c>
 800918e:	4b62      	ldr	r3, [pc, #392]	; (8009318 <HAL_RCC_OscConfig+0x688>)
 8009190:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009192:	4b61      	ldr	r3, [pc, #388]	; (8009318 <HAL_RCC_OscConfig+0x688>)
 8009194:	2180      	movs	r1, #128	; 0x80
 8009196:	00c9      	lsls	r1, r1, #3
 8009198:	430a      	orrs	r2, r1
 800919a:	651a      	str	r2, [r3, #80]	; 0x50
 800919c:	4b5e      	ldr	r3, [pc, #376]	; (8009318 <HAL_RCC_OscConfig+0x688>)
 800919e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80091a0:	4b5d      	ldr	r3, [pc, #372]	; (8009318 <HAL_RCC_OscConfig+0x688>)
 80091a2:	2180      	movs	r1, #128	; 0x80
 80091a4:	0049      	lsls	r1, r1, #1
 80091a6:	430a      	orrs	r2, r1
 80091a8:	651a      	str	r2, [r3, #80]	; 0x50
 80091aa:	e00b      	b.n	80091c4 <HAL_RCC_OscConfig+0x534>
 80091ac:	4b5a      	ldr	r3, [pc, #360]	; (8009318 <HAL_RCC_OscConfig+0x688>)
 80091ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80091b0:	4b59      	ldr	r3, [pc, #356]	; (8009318 <HAL_RCC_OscConfig+0x688>)
 80091b2:	495b      	ldr	r1, [pc, #364]	; (8009320 <HAL_RCC_OscConfig+0x690>)
 80091b4:	400a      	ands	r2, r1
 80091b6:	651a      	str	r2, [r3, #80]	; 0x50
 80091b8:	4b57      	ldr	r3, [pc, #348]	; (8009318 <HAL_RCC_OscConfig+0x688>)
 80091ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80091bc:	4b56      	ldr	r3, [pc, #344]	; (8009318 <HAL_RCC_OscConfig+0x688>)
 80091be:	495a      	ldr	r1, [pc, #360]	; (8009328 <HAL_RCC_OscConfig+0x698>)
 80091c0:	400a      	ands	r2, r1
 80091c2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	689b      	ldr	r3, [r3, #8]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d015      	beq.n	80091f8 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80091cc:	f7fb fe05 	bl	8004dda <HAL_GetTick>
 80091d0:	0003      	movs	r3, r0
 80091d2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80091d4:	e009      	b.n	80091ea <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80091d6:	f7fb fe00 	bl	8004dda <HAL_GetTick>
 80091da:	0002      	movs	r2, r0
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	1ad3      	subs	r3, r2, r3
 80091e0:	4a52      	ldr	r2, [pc, #328]	; (800932c <HAL_RCC_OscConfig+0x69c>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d901      	bls.n	80091ea <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80091e6:	2303      	movs	r3, #3
 80091e8:	e11b      	b.n	8009422 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80091ea:	4b4b      	ldr	r3, [pc, #300]	; (8009318 <HAL_RCC_OscConfig+0x688>)
 80091ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80091ee:	2380      	movs	r3, #128	; 0x80
 80091f0:	009b      	lsls	r3, r3, #2
 80091f2:	4013      	ands	r3, r2
 80091f4:	d0ef      	beq.n	80091d6 <HAL_RCC_OscConfig+0x546>
 80091f6:	e014      	b.n	8009222 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80091f8:	f7fb fdef 	bl	8004dda <HAL_GetTick>
 80091fc:	0003      	movs	r3, r0
 80091fe:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009200:	e009      	b.n	8009216 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009202:	f7fb fdea 	bl	8004dda <HAL_GetTick>
 8009206:	0002      	movs	r2, r0
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	1ad3      	subs	r3, r2, r3
 800920c:	4a47      	ldr	r2, [pc, #284]	; (800932c <HAL_RCC_OscConfig+0x69c>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d901      	bls.n	8009216 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8009212:	2303      	movs	r3, #3
 8009214:	e105      	b.n	8009422 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009216:	4b40      	ldr	r3, [pc, #256]	; (8009318 <HAL_RCC_OscConfig+0x688>)
 8009218:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800921a:	2380      	movs	r3, #128	; 0x80
 800921c:	009b      	lsls	r3, r3, #2
 800921e:	4013      	ands	r3, r2
 8009220:	d1ef      	bne.n	8009202 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8009222:	2323      	movs	r3, #35	; 0x23
 8009224:	18fb      	adds	r3, r7, r3
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	2b01      	cmp	r3, #1
 800922a:	d105      	bne.n	8009238 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800922c:	4b3a      	ldr	r3, [pc, #232]	; (8009318 <HAL_RCC_OscConfig+0x688>)
 800922e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009230:	4b39      	ldr	r3, [pc, #228]	; (8009318 <HAL_RCC_OscConfig+0x688>)
 8009232:	493f      	ldr	r1, [pc, #252]	; (8009330 <HAL_RCC_OscConfig+0x6a0>)
 8009234:	400a      	ands	r2, r1
 8009236:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	2220      	movs	r2, #32
 800923e:	4013      	ands	r3, r2
 8009240:	d049      	beq.n	80092d6 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	699b      	ldr	r3, [r3, #24]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d026      	beq.n	8009298 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800924a:	4b33      	ldr	r3, [pc, #204]	; (8009318 <HAL_RCC_OscConfig+0x688>)
 800924c:	689a      	ldr	r2, [r3, #8]
 800924e:	4b32      	ldr	r3, [pc, #200]	; (8009318 <HAL_RCC_OscConfig+0x688>)
 8009250:	2101      	movs	r1, #1
 8009252:	430a      	orrs	r2, r1
 8009254:	609a      	str	r2, [r3, #8]
 8009256:	4b30      	ldr	r3, [pc, #192]	; (8009318 <HAL_RCC_OscConfig+0x688>)
 8009258:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800925a:	4b2f      	ldr	r3, [pc, #188]	; (8009318 <HAL_RCC_OscConfig+0x688>)
 800925c:	2101      	movs	r1, #1
 800925e:	430a      	orrs	r2, r1
 8009260:	635a      	str	r2, [r3, #52]	; 0x34
 8009262:	4b34      	ldr	r3, [pc, #208]	; (8009334 <HAL_RCC_OscConfig+0x6a4>)
 8009264:	6a1a      	ldr	r2, [r3, #32]
 8009266:	4b33      	ldr	r3, [pc, #204]	; (8009334 <HAL_RCC_OscConfig+0x6a4>)
 8009268:	2180      	movs	r1, #128	; 0x80
 800926a:	0189      	lsls	r1, r1, #6
 800926c:	430a      	orrs	r2, r1
 800926e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009270:	f7fb fdb3 	bl	8004dda <HAL_GetTick>
 8009274:	0003      	movs	r3, r0
 8009276:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009278:	e008      	b.n	800928c <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800927a:	f7fb fdae 	bl	8004dda <HAL_GetTick>
 800927e:	0002      	movs	r2, r0
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	1ad3      	subs	r3, r2, r3
 8009284:	2b02      	cmp	r3, #2
 8009286:	d901      	bls.n	800928c <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8009288:	2303      	movs	r3, #3
 800928a:	e0ca      	b.n	8009422 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800928c:	4b22      	ldr	r3, [pc, #136]	; (8009318 <HAL_RCC_OscConfig+0x688>)
 800928e:	689b      	ldr	r3, [r3, #8]
 8009290:	2202      	movs	r2, #2
 8009292:	4013      	ands	r3, r2
 8009294:	d0f1      	beq.n	800927a <HAL_RCC_OscConfig+0x5ea>
 8009296:	e01e      	b.n	80092d6 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8009298:	4b1f      	ldr	r3, [pc, #124]	; (8009318 <HAL_RCC_OscConfig+0x688>)
 800929a:	689a      	ldr	r2, [r3, #8]
 800929c:	4b1e      	ldr	r3, [pc, #120]	; (8009318 <HAL_RCC_OscConfig+0x688>)
 800929e:	2101      	movs	r1, #1
 80092a0:	438a      	bics	r2, r1
 80092a2:	609a      	str	r2, [r3, #8]
 80092a4:	4b23      	ldr	r3, [pc, #140]	; (8009334 <HAL_RCC_OscConfig+0x6a4>)
 80092a6:	6a1a      	ldr	r2, [r3, #32]
 80092a8:	4b22      	ldr	r3, [pc, #136]	; (8009334 <HAL_RCC_OscConfig+0x6a4>)
 80092aa:	4923      	ldr	r1, [pc, #140]	; (8009338 <HAL_RCC_OscConfig+0x6a8>)
 80092ac:	400a      	ands	r2, r1
 80092ae:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80092b0:	f7fb fd93 	bl	8004dda <HAL_GetTick>
 80092b4:	0003      	movs	r3, r0
 80092b6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80092b8:	e008      	b.n	80092cc <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80092ba:	f7fb fd8e 	bl	8004dda <HAL_GetTick>
 80092be:	0002      	movs	r2, r0
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	1ad3      	subs	r3, r2, r3
 80092c4:	2b02      	cmp	r3, #2
 80092c6:	d901      	bls.n	80092cc <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80092c8:	2303      	movs	r3, #3
 80092ca:	e0aa      	b.n	8009422 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80092cc:	4b12      	ldr	r3, [pc, #72]	; (8009318 <HAL_RCC_OscConfig+0x688>)
 80092ce:	689b      	ldr	r3, [r3, #8]
 80092d0:	2202      	movs	r2, #2
 80092d2:	4013      	ands	r3, r2
 80092d4:	d1f1      	bne.n	80092ba <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d100      	bne.n	80092e0 <HAL_RCC_OscConfig+0x650>
 80092de:	e09f      	b.n	8009420 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80092e0:	69fb      	ldr	r3, [r7, #28]
 80092e2:	2b0c      	cmp	r3, #12
 80092e4:	d100      	bne.n	80092e8 <HAL_RCC_OscConfig+0x658>
 80092e6:	e078      	b.n	80093da <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ec:	2b02      	cmp	r3, #2
 80092ee:	d159      	bne.n	80093a4 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80092f0:	4b09      	ldr	r3, [pc, #36]	; (8009318 <HAL_RCC_OscConfig+0x688>)
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	4b08      	ldr	r3, [pc, #32]	; (8009318 <HAL_RCC_OscConfig+0x688>)
 80092f6:	4911      	ldr	r1, [pc, #68]	; (800933c <HAL_RCC_OscConfig+0x6ac>)
 80092f8:	400a      	ands	r2, r1
 80092fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80092fc:	f7fb fd6d 	bl	8004dda <HAL_GetTick>
 8009300:	0003      	movs	r3, r0
 8009302:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8009304:	e01c      	b.n	8009340 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009306:	f7fb fd68 	bl	8004dda <HAL_GetTick>
 800930a:	0002      	movs	r2, r0
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	1ad3      	subs	r3, r2, r3
 8009310:	2b02      	cmp	r3, #2
 8009312:	d915      	bls.n	8009340 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8009314:	2303      	movs	r3, #3
 8009316:	e084      	b.n	8009422 <HAL_RCC_OscConfig+0x792>
 8009318:	40021000 	.word	0x40021000
 800931c:	ffff1fff 	.word	0xffff1fff
 8009320:	fffffeff 	.word	0xfffffeff
 8009324:	40007000 	.word	0x40007000
 8009328:	fffffbff 	.word	0xfffffbff
 800932c:	00001388 	.word	0x00001388
 8009330:	efffffff 	.word	0xefffffff
 8009334:	40010000 	.word	0x40010000
 8009338:	ffffdfff 	.word	0xffffdfff
 800933c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8009340:	4b3a      	ldr	r3, [pc, #232]	; (800942c <HAL_RCC_OscConfig+0x79c>)
 8009342:	681a      	ldr	r2, [r3, #0]
 8009344:	2380      	movs	r3, #128	; 0x80
 8009346:	049b      	lsls	r3, r3, #18
 8009348:	4013      	ands	r3, r2
 800934a:	d1dc      	bne.n	8009306 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800934c:	4b37      	ldr	r3, [pc, #220]	; (800942c <HAL_RCC_OscConfig+0x79c>)
 800934e:	68db      	ldr	r3, [r3, #12]
 8009350:	4a37      	ldr	r2, [pc, #220]	; (8009430 <HAL_RCC_OscConfig+0x7a0>)
 8009352:	4013      	ands	r3, r2
 8009354:	0019      	movs	r1, r3
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800935e:	431a      	orrs	r2, r3
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009364:	431a      	orrs	r2, r3
 8009366:	4b31      	ldr	r3, [pc, #196]	; (800942c <HAL_RCC_OscConfig+0x79c>)
 8009368:	430a      	orrs	r2, r1
 800936a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800936c:	4b2f      	ldr	r3, [pc, #188]	; (800942c <HAL_RCC_OscConfig+0x79c>)
 800936e:	681a      	ldr	r2, [r3, #0]
 8009370:	4b2e      	ldr	r3, [pc, #184]	; (800942c <HAL_RCC_OscConfig+0x79c>)
 8009372:	2180      	movs	r1, #128	; 0x80
 8009374:	0449      	lsls	r1, r1, #17
 8009376:	430a      	orrs	r2, r1
 8009378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800937a:	f7fb fd2e 	bl	8004dda <HAL_GetTick>
 800937e:	0003      	movs	r3, r0
 8009380:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8009382:	e008      	b.n	8009396 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009384:	f7fb fd29 	bl	8004dda <HAL_GetTick>
 8009388:	0002      	movs	r2, r0
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	1ad3      	subs	r3, r2, r3
 800938e:	2b02      	cmp	r3, #2
 8009390:	d901      	bls.n	8009396 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8009392:	2303      	movs	r3, #3
 8009394:	e045      	b.n	8009422 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8009396:	4b25      	ldr	r3, [pc, #148]	; (800942c <HAL_RCC_OscConfig+0x79c>)
 8009398:	681a      	ldr	r2, [r3, #0]
 800939a:	2380      	movs	r3, #128	; 0x80
 800939c:	049b      	lsls	r3, r3, #18
 800939e:	4013      	ands	r3, r2
 80093a0:	d0f0      	beq.n	8009384 <HAL_RCC_OscConfig+0x6f4>
 80093a2:	e03d      	b.n	8009420 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80093a4:	4b21      	ldr	r3, [pc, #132]	; (800942c <HAL_RCC_OscConfig+0x79c>)
 80093a6:	681a      	ldr	r2, [r3, #0]
 80093a8:	4b20      	ldr	r3, [pc, #128]	; (800942c <HAL_RCC_OscConfig+0x79c>)
 80093aa:	4922      	ldr	r1, [pc, #136]	; (8009434 <HAL_RCC_OscConfig+0x7a4>)
 80093ac:	400a      	ands	r2, r1
 80093ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80093b0:	f7fb fd13 	bl	8004dda <HAL_GetTick>
 80093b4:	0003      	movs	r3, r0
 80093b6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80093b8:	e008      	b.n	80093cc <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80093ba:	f7fb fd0e 	bl	8004dda <HAL_GetTick>
 80093be:	0002      	movs	r2, r0
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	1ad3      	subs	r3, r2, r3
 80093c4:	2b02      	cmp	r3, #2
 80093c6:	d901      	bls.n	80093cc <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80093c8:	2303      	movs	r3, #3
 80093ca:	e02a      	b.n	8009422 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80093cc:	4b17      	ldr	r3, [pc, #92]	; (800942c <HAL_RCC_OscConfig+0x79c>)
 80093ce:	681a      	ldr	r2, [r3, #0]
 80093d0:	2380      	movs	r3, #128	; 0x80
 80093d2:	049b      	lsls	r3, r3, #18
 80093d4:	4013      	ands	r3, r2
 80093d6:	d1f0      	bne.n	80093ba <HAL_RCC_OscConfig+0x72a>
 80093d8:	e022      	b.n	8009420 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093de:	2b01      	cmp	r3, #1
 80093e0:	d101      	bne.n	80093e6 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80093e2:	2301      	movs	r3, #1
 80093e4:	e01d      	b.n	8009422 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80093e6:	4b11      	ldr	r3, [pc, #68]	; (800942c <HAL_RCC_OscConfig+0x79c>)
 80093e8:	68db      	ldr	r3, [r3, #12]
 80093ea:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80093ec:	69ba      	ldr	r2, [r7, #24]
 80093ee:	2380      	movs	r3, #128	; 0x80
 80093f0:	025b      	lsls	r3, r3, #9
 80093f2:	401a      	ands	r2, r3
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093f8:	429a      	cmp	r2, r3
 80093fa:	d10f      	bne.n	800941c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80093fc:	69ba      	ldr	r2, [r7, #24]
 80093fe:	23f0      	movs	r3, #240	; 0xf0
 8009400:	039b      	lsls	r3, r3, #14
 8009402:	401a      	ands	r2, r3
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009408:	429a      	cmp	r2, r3
 800940a:	d107      	bne.n	800941c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800940c:	69ba      	ldr	r2, [r7, #24]
 800940e:	23c0      	movs	r3, #192	; 0xc0
 8009410:	041b      	lsls	r3, r3, #16
 8009412:	401a      	ands	r2, r3
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8009418:	429a      	cmp	r2, r3
 800941a:	d001      	beq.n	8009420 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 800941c:	2301      	movs	r3, #1
 800941e:	e000      	b.n	8009422 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8009420:	2300      	movs	r3, #0
}
 8009422:	0018      	movs	r0, r3
 8009424:	46bd      	mov	sp, r7
 8009426:	b00a      	add	sp, #40	; 0x28
 8009428:	bdb0      	pop	{r4, r5, r7, pc}
 800942a:	46c0      	nop			; (mov r8, r8)
 800942c:	40021000 	.word	0x40021000
 8009430:	ff02ffff 	.word	0xff02ffff
 8009434:	feffffff 	.word	0xfeffffff

08009438 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009438:	b5b0      	push	{r4, r5, r7, lr}
 800943a:	b084      	sub	sp, #16
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
 8009440:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d101      	bne.n	800944c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009448:	2301      	movs	r3, #1
 800944a:	e128      	b.n	800969e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800944c:	4b96      	ldr	r3, [pc, #600]	; (80096a8 <HAL_RCC_ClockConfig+0x270>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	2201      	movs	r2, #1
 8009452:	4013      	ands	r3, r2
 8009454:	683a      	ldr	r2, [r7, #0]
 8009456:	429a      	cmp	r2, r3
 8009458:	d91e      	bls.n	8009498 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800945a:	4b93      	ldr	r3, [pc, #588]	; (80096a8 <HAL_RCC_ClockConfig+0x270>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	2201      	movs	r2, #1
 8009460:	4393      	bics	r3, r2
 8009462:	0019      	movs	r1, r3
 8009464:	4b90      	ldr	r3, [pc, #576]	; (80096a8 <HAL_RCC_ClockConfig+0x270>)
 8009466:	683a      	ldr	r2, [r7, #0]
 8009468:	430a      	orrs	r2, r1
 800946a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800946c:	f7fb fcb5 	bl	8004dda <HAL_GetTick>
 8009470:	0003      	movs	r3, r0
 8009472:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009474:	e009      	b.n	800948a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009476:	f7fb fcb0 	bl	8004dda <HAL_GetTick>
 800947a:	0002      	movs	r2, r0
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	1ad3      	subs	r3, r2, r3
 8009480:	4a8a      	ldr	r2, [pc, #552]	; (80096ac <HAL_RCC_ClockConfig+0x274>)
 8009482:	4293      	cmp	r3, r2
 8009484:	d901      	bls.n	800948a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8009486:	2303      	movs	r3, #3
 8009488:	e109      	b.n	800969e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800948a:	4b87      	ldr	r3, [pc, #540]	; (80096a8 <HAL_RCC_ClockConfig+0x270>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	2201      	movs	r2, #1
 8009490:	4013      	ands	r3, r2
 8009492:	683a      	ldr	r2, [r7, #0]
 8009494:	429a      	cmp	r2, r3
 8009496:	d1ee      	bne.n	8009476 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	2202      	movs	r2, #2
 800949e:	4013      	ands	r3, r2
 80094a0:	d009      	beq.n	80094b6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80094a2:	4b83      	ldr	r3, [pc, #524]	; (80096b0 <HAL_RCC_ClockConfig+0x278>)
 80094a4:	68db      	ldr	r3, [r3, #12]
 80094a6:	22f0      	movs	r2, #240	; 0xf0
 80094a8:	4393      	bics	r3, r2
 80094aa:	0019      	movs	r1, r3
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	689a      	ldr	r2, [r3, #8]
 80094b0:	4b7f      	ldr	r3, [pc, #508]	; (80096b0 <HAL_RCC_ClockConfig+0x278>)
 80094b2:	430a      	orrs	r2, r1
 80094b4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	2201      	movs	r2, #1
 80094bc:	4013      	ands	r3, r2
 80094be:	d100      	bne.n	80094c2 <HAL_RCC_ClockConfig+0x8a>
 80094c0:	e089      	b.n	80095d6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	2b02      	cmp	r3, #2
 80094c8:	d107      	bne.n	80094da <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80094ca:	4b79      	ldr	r3, [pc, #484]	; (80096b0 <HAL_RCC_ClockConfig+0x278>)
 80094cc:	681a      	ldr	r2, [r3, #0]
 80094ce:	2380      	movs	r3, #128	; 0x80
 80094d0:	029b      	lsls	r3, r3, #10
 80094d2:	4013      	ands	r3, r2
 80094d4:	d120      	bne.n	8009518 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80094d6:	2301      	movs	r3, #1
 80094d8:	e0e1      	b.n	800969e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	685b      	ldr	r3, [r3, #4]
 80094de:	2b03      	cmp	r3, #3
 80094e0:	d107      	bne.n	80094f2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80094e2:	4b73      	ldr	r3, [pc, #460]	; (80096b0 <HAL_RCC_ClockConfig+0x278>)
 80094e4:	681a      	ldr	r2, [r3, #0]
 80094e6:	2380      	movs	r3, #128	; 0x80
 80094e8:	049b      	lsls	r3, r3, #18
 80094ea:	4013      	ands	r3, r2
 80094ec:	d114      	bne.n	8009518 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80094ee:	2301      	movs	r3, #1
 80094f0:	e0d5      	b.n	800969e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	685b      	ldr	r3, [r3, #4]
 80094f6:	2b01      	cmp	r3, #1
 80094f8:	d106      	bne.n	8009508 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80094fa:	4b6d      	ldr	r3, [pc, #436]	; (80096b0 <HAL_RCC_ClockConfig+0x278>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	2204      	movs	r2, #4
 8009500:	4013      	ands	r3, r2
 8009502:	d109      	bne.n	8009518 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8009504:	2301      	movs	r3, #1
 8009506:	e0ca      	b.n	800969e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8009508:	4b69      	ldr	r3, [pc, #420]	; (80096b0 <HAL_RCC_ClockConfig+0x278>)
 800950a:	681a      	ldr	r2, [r3, #0]
 800950c:	2380      	movs	r3, #128	; 0x80
 800950e:	009b      	lsls	r3, r3, #2
 8009510:	4013      	ands	r3, r2
 8009512:	d101      	bne.n	8009518 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8009514:	2301      	movs	r3, #1
 8009516:	e0c2      	b.n	800969e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009518:	4b65      	ldr	r3, [pc, #404]	; (80096b0 <HAL_RCC_ClockConfig+0x278>)
 800951a:	68db      	ldr	r3, [r3, #12]
 800951c:	2203      	movs	r2, #3
 800951e:	4393      	bics	r3, r2
 8009520:	0019      	movs	r1, r3
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	685a      	ldr	r2, [r3, #4]
 8009526:	4b62      	ldr	r3, [pc, #392]	; (80096b0 <HAL_RCC_ClockConfig+0x278>)
 8009528:	430a      	orrs	r2, r1
 800952a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800952c:	f7fb fc55 	bl	8004dda <HAL_GetTick>
 8009530:	0003      	movs	r3, r0
 8009532:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	2b02      	cmp	r3, #2
 800953a:	d111      	bne.n	8009560 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800953c:	e009      	b.n	8009552 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800953e:	f7fb fc4c 	bl	8004dda <HAL_GetTick>
 8009542:	0002      	movs	r2, r0
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	1ad3      	subs	r3, r2, r3
 8009548:	4a58      	ldr	r2, [pc, #352]	; (80096ac <HAL_RCC_ClockConfig+0x274>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d901      	bls.n	8009552 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800954e:	2303      	movs	r3, #3
 8009550:	e0a5      	b.n	800969e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009552:	4b57      	ldr	r3, [pc, #348]	; (80096b0 <HAL_RCC_ClockConfig+0x278>)
 8009554:	68db      	ldr	r3, [r3, #12]
 8009556:	220c      	movs	r2, #12
 8009558:	4013      	ands	r3, r2
 800955a:	2b08      	cmp	r3, #8
 800955c:	d1ef      	bne.n	800953e <HAL_RCC_ClockConfig+0x106>
 800955e:	e03a      	b.n	80095d6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	2b03      	cmp	r3, #3
 8009566:	d111      	bne.n	800958c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009568:	e009      	b.n	800957e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800956a:	f7fb fc36 	bl	8004dda <HAL_GetTick>
 800956e:	0002      	movs	r2, r0
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	1ad3      	subs	r3, r2, r3
 8009574:	4a4d      	ldr	r2, [pc, #308]	; (80096ac <HAL_RCC_ClockConfig+0x274>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d901      	bls.n	800957e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800957a:	2303      	movs	r3, #3
 800957c:	e08f      	b.n	800969e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800957e:	4b4c      	ldr	r3, [pc, #304]	; (80096b0 <HAL_RCC_ClockConfig+0x278>)
 8009580:	68db      	ldr	r3, [r3, #12]
 8009582:	220c      	movs	r2, #12
 8009584:	4013      	ands	r3, r2
 8009586:	2b0c      	cmp	r3, #12
 8009588:	d1ef      	bne.n	800956a <HAL_RCC_ClockConfig+0x132>
 800958a:	e024      	b.n	80095d6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	2b01      	cmp	r3, #1
 8009592:	d11b      	bne.n	80095cc <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8009594:	e009      	b.n	80095aa <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009596:	f7fb fc20 	bl	8004dda <HAL_GetTick>
 800959a:	0002      	movs	r2, r0
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	1ad3      	subs	r3, r2, r3
 80095a0:	4a42      	ldr	r2, [pc, #264]	; (80096ac <HAL_RCC_ClockConfig+0x274>)
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d901      	bls.n	80095aa <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80095a6:	2303      	movs	r3, #3
 80095a8:	e079      	b.n	800969e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80095aa:	4b41      	ldr	r3, [pc, #260]	; (80096b0 <HAL_RCC_ClockConfig+0x278>)
 80095ac:	68db      	ldr	r3, [r3, #12]
 80095ae:	220c      	movs	r2, #12
 80095b0:	4013      	ands	r3, r2
 80095b2:	2b04      	cmp	r3, #4
 80095b4:	d1ef      	bne.n	8009596 <HAL_RCC_ClockConfig+0x15e>
 80095b6:	e00e      	b.n	80095d6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80095b8:	f7fb fc0f 	bl	8004dda <HAL_GetTick>
 80095bc:	0002      	movs	r2, r0
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	1ad3      	subs	r3, r2, r3
 80095c2:	4a3a      	ldr	r2, [pc, #232]	; (80096ac <HAL_RCC_ClockConfig+0x274>)
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d901      	bls.n	80095cc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80095c8:	2303      	movs	r3, #3
 80095ca:	e068      	b.n	800969e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80095cc:	4b38      	ldr	r3, [pc, #224]	; (80096b0 <HAL_RCC_ClockConfig+0x278>)
 80095ce:	68db      	ldr	r3, [r3, #12]
 80095d0:	220c      	movs	r2, #12
 80095d2:	4013      	ands	r3, r2
 80095d4:	d1f0      	bne.n	80095b8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80095d6:	4b34      	ldr	r3, [pc, #208]	; (80096a8 <HAL_RCC_ClockConfig+0x270>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	2201      	movs	r2, #1
 80095dc:	4013      	ands	r3, r2
 80095de:	683a      	ldr	r2, [r7, #0]
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d21e      	bcs.n	8009622 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80095e4:	4b30      	ldr	r3, [pc, #192]	; (80096a8 <HAL_RCC_ClockConfig+0x270>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	2201      	movs	r2, #1
 80095ea:	4393      	bics	r3, r2
 80095ec:	0019      	movs	r1, r3
 80095ee:	4b2e      	ldr	r3, [pc, #184]	; (80096a8 <HAL_RCC_ClockConfig+0x270>)
 80095f0:	683a      	ldr	r2, [r7, #0]
 80095f2:	430a      	orrs	r2, r1
 80095f4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80095f6:	f7fb fbf0 	bl	8004dda <HAL_GetTick>
 80095fa:	0003      	movs	r3, r0
 80095fc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80095fe:	e009      	b.n	8009614 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009600:	f7fb fbeb 	bl	8004dda <HAL_GetTick>
 8009604:	0002      	movs	r2, r0
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	1ad3      	subs	r3, r2, r3
 800960a:	4a28      	ldr	r2, [pc, #160]	; (80096ac <HAL_RCC_ClockConfig+0x274>)
 800960c:	4293      	cmp	r3, r2
 800960e:	d901      	bls.n	8009614 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8009610:	2303      	movs	r3, #3
 8009612:	e044      	b.n	800969e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009614:	4b24      	ldr	r3, [pc, #144]	; (80096a8 <HAL_RCC_ClockConfig+0x270>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	2201      	movs	r2, #1
 800961a:	4013      	ands	r3, r2
 800961c:	683a      	ldr	r2, [r7, #0]
 800961e:	429a      	cmp	r2, r3
 8009620:	d1ee      	bne.n	8009600 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	2204      	movs	r2, #4
 8009628:	4013      	ands	r3, r2
 800962a:	d009      	beq.n	8009640 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800962c:	4b20      	ldr	r3, [pc, #128]	; (80096b0 <HAL_RCC_ClockConfig+0x278>)
 800962e:	68db      	ldr	r3, [r3, #12]
 8009630:	4a20      	ldr	r2, [pc, #128]	; (80096b4 <HAL_RCC_ClockConfig+0x27c>)
 8009632:	4013      	ands	r3, r2
 8009634:	0019      	movs	r1, r3
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	68da      	ldr	r2, [r3, #12]
 800963a:	4b1d      	ldr	r3, [pc, #116]	; (80096b0 <HAL_RCC_ClockConfig+0x278>)
 800963c:	430a      	orrs	r2, r1
 800963e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	2208      	movs	r2, #8
 8009646:	4013      	ands	r3, r2
 8009648:	d00a      	beq.n	8009660 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800964a:	4b19      	ldr	r3, [pc, #100]	; (80096b0 <HAL_RCC_ClockConfig+0x278>)
 800964c:	68db      	ldr	r3, [r3, #12]
 800964e:	4a1a      	ldr	r2, [pc, #104]	; (80096b8 <HAL_RCC_ClockConfig+0x280>)
 8009650:	4013      	ands	r3, r2
 8009652:	0019      	movs	r1, r3
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	691b      	ldr	r3, [r3, #16]
 8009658:	00da      	lsls	r2, r3, #3
 800965a:	4b15      	ldr	r3, [pc, #84]	; (80096b0 <HAL_RCC_ClockConfig+0x278>)
 800965c:	430a      	orrs	r2, r1
 800965e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009660:	f000 f832 	bl	80096c8 <HAL_RCC_GetSysClockFreq>
 8009664:	0001      	movs	r1, r0
 8009666:	4b12      	ldr	r3, [pc, #72]	; (80096b0 <HAL_RCC_ClockConfig+0x278>)
 8009668:	68db      	ldr	r3, [r3, #12]
 800966a:	091b      	lsrs	r3, r3, #4
 800966c:	220f      	movs	r2, #15
 800966e:	4013      	ands	r3, r2
 8009670:	4a12      	ldr	r2, [pc, #72]	; (80096bc <HAL_RCC_ClockConfig+0x284>)
 8009672:	5cd3      	ldrb	r3, [r2, r3]
 8009674:	000a      	movs	r2, r1
 8009676:	40da      	lsrs	r2, r3
 8009678:	4b11      	ldr	r3, [pc, #68]	; (80096c0 <HAL_RCC_ClockConfig+0x288>)
 800967a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800967c:	4b11      	ldr	r3, [pc, #68]	; (80096c4 <HAL_RCC_ClockConfig+0x28c>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	250b      	movs	r5, #11
 8009682:	197c      	adds	r4, r7, r5
 8009684:	0018      	movs	r0, r3
 8009686:	f7fb fb9f 	bl	8004dc8 <HAL_InitTick>
 800968a:	0003      	movs	r3, r0
 800968c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800968e:	197b      	adds	r3, r7, r5
 8009690:	781b      	ldrb	r3, [r3, #0]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d002      	beq.n	800969c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8009696:	197b      	adds	r3, r7, r5
 8009698:	781b      	ldrb	r3, [r3, #0]
 800969a:	e000      	b.n	800969e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800969c:	2300      	movs	r3, #0
}
 800969e:	0018      	movs	r0, r3
 80096a0:	46bd      	mov	sp, r7
 80096a2:	b004      	add	sp, #16
 80096a4:	bdb0      	pop	{r4, r5, r7, pc}
 80096a6:	46c0      	nop			; (mov r8, r8)
 80096a8:	40022000 	.word	0x40022000
 80096ac:	00001388 	.word	0x00001388
 80096b0:	40021000 	.word	0x40021000
 80096b4:	fffff8ff 	.word	0xfffff8ff
 80096b8:	ffffc7ff 	.word	0xffffc7ff
 80096bc:	0801f24c 	.word	0x0801f24c
 80096c0:	20000070 	.word	0x20000070
 80096c4:	20000074 	.word	0x20000074

080096c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80096c8:	b5b0      	push	{r4, r5, r7, lr}
 80096ca:	b08e      	sub	sp, #56	; 0x38
 80096cc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80096ce:	4b4c      	ldr	r3, [pc, #304]	; (8009800 <HAL_RCC_GetSysClockFreq+0x138>)
 80096d0:	68db      	ldr	r3, [r3, #12]
 80096d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80096d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096d6:	230c      	movs	r3, #12
 80096d8:	4013      	ands	r3, r2
 80096da:	2b0c      	cmp	r3, #12
 80096dc:	d014      	beq.n	8009708 <HAL_RCC_GetSysClockFreq+0x40>
 80096de:	d900      	bls.n	80096e2 <HAL_RCC_GetSysClockFreq+0x1a>
 80096e0:	e07b      	b.n	80097da <HAL_RCC_GetSysClockFreq+0x112>
 80096e2:	2b04      	cmp	r3, #4
 80096e4:	d002      	beq.n	80096ec <HAL_RCC_GetSysClockFreq+0x24>
 80096e6:	2b08      	cmp	r3, #8
 80096e8:	d00b      	beq.n	8009702 <HAL_RCC_GetSysClockFreq+0x3a>
 80096ea:	e076      	b.n	80097da <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80096ec:	4b44      	ldr	r3, [pc, #272]	; (8009800 <HAL_RCC_GetSysClockFreq+0x138>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	2210      	movs	r2, #16
 80096f2:	4013      	ands	r3, r2
 80096f4:	d002      	beq.n	80096fc <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80096f6:	4b43      	ldr	r3, [pc, #268]	; (8009804 <HAL_RCC_GetSysClockFreq+0x13c>)
 80096f8:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80096fa:	e07c      	b.n	80097f6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80096fc:	4b42      	ldr	r3, [pc, #264]	; (8009808 <HAL_RCC_GetSysClockFreq+0x140>)
 80096fe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8009700:	e079      	b.n	80097f6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8009702:	4b42      	ldr	r3, [pc, #264]	; (800980c <HAL_RCC_GetSysClockFreq+0x144>)
 8009704:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8009706:	e076      	b.n	80097f6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8009708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800970a:	0c9a      	lsrs	r2, r3, #18
 800970c:	230f      	movs	r3, #15
 800970e:	401a      	ands	r2, r3
 8009710:	4b3f      	ldr	r3, [pc, #252]	; (8009810 <HAL_RCC_GetSysClockFreq+0x148>)
 8009712:	5c9b      	ldrb	r3, [r3, r2]
 8009714:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8009716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009718:	0d9a      	lsrs	r2, r3, #22
 800971a:	2303      	movs	r3, #3
 800971c:	4013      	ands	r3, r2
 800971e:	3301      	adds	r3, #1
 8009720:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009722:	4b37      	ldr	r3, [pc, #220]	; (8009800 <HAL_RCC_GetSysClockFreq+0x138>)
 8009724:	68da      	ldr	r2, [r3, #12]
 8009726:	2380      	movs	r3, #128	; 0x80
 8009728:	025b      	lsls	r3, r3, #9
 800972a:	4013      	ands	r3, r2
 800972c:	d01a      	beq.n	8009764 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800972e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009730:	61bb      	str	r3, [r7, #24]
 8009732:	2300      	movs	r3, #0
 8009734:	61fb      	str	r3, [r7, #28]
 8009736:	4a35      	ldr	r2, [pc, #212]	; (800980c <HAL_RCC_GetSysClockFreq+0x144>)
 8009738:	2300      	movs	r3, #0
 800973a:	69b8      	ldr	r0, [r7, #24]
 800973c:	69f9      	ldr	r1, [r7, #28]
 800973e:	f7f6 fee3 	bl	8000508 <__aeabi_lmul>
 8009742:	0002      	movs	r2, r0
 8009744:	000b      	movs	r3, r1
 8009746:	0010      	movs	r0, r2
 8009748:	0019      	movs	r1, r3
 800974a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800974c:	613b      	str	r3, [r7, #16]
 800974e:	2300      	movs	r3, #0
 8009750:	617b      	str	r3, [r7, #20]
 8009752:	693a      	ldr	r2, [r7, #16]
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	f7f6 feb7 	bl	80004c8 <__aeabi_uldivmod>
 800975a:	0002      	movs	r2, r0
 800975c:	000b      	movs	r3, r1
 800975e:	0013      	movs	r3, r2
 8009760:	637b      	str	r3, [r7, #52]	; 0x34
 8009762:	e037      	b.n	80097d4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8009764:	4b26      	ldr	r3, [pc, #152]	; (8009800 <HAL_RCC_GetSysClockFreq+0x138>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	2210      	movs	r2, #16
 800976a:	4013      	ands	r3, r2
 800976c:	d01a      	beq.n	80097a4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800976e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009770:	60bb      	str	r3, [r7, #8]
 8009772:	2300      	movs	r3, #0
 8009774:	60fb      	str	r3, [r7, #12]
 8009776:	4a23      	ldr	r2, [pc, #140]	; (8009804 <HAL_RCC_GetSysClockFreq+0x13c>)
 8009778:	2300      	movs	r3, #0
 800977a:	68b8      	ldr	r0, [r7, #8]
 800977c:	68f9      	ldr	r1, [r7, #12]
 800977e:	f7f6 fec3 	bl	8000508 <__aeabi_lmul>
 8009782:	0002      	movs	r2, r0
 8009784:	000b      	movs	r3, r1
 8009786:	0010      	movs	r0, r2
 8009788:	0019      	movs	r1, r3
 800978a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800978c:	603b      	str	r3, [r7, #0]
 800978e:	2300      	movs	r3, #0
 8009790:	607b      	str	r3, [r7, #4]
 8009792:	683a      	ldr	r2, [r7, #0]
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f7f6 fe97 	bl	80004c8 <__aeabi_uldivmod>
 800979a:	0002      	movs	r2, r0
 800979c:	000b      	movs	r3, r1
 800979e:	0013      	movs	r3, r2
 80097a0:	637b      	str	r3, [r7, #52]	; 0x34
 80097a2:	e017      	b.n	80097d4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80097a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097a6:	0018      	movs	r0, r3
 80097a8:	2300      	movs	r3, #0
 80097aa:	0019      	movs	r1, r3
 80097ac:	4a16      	ldr	r2, [pc, #88]	; (8009808 <HAL_RCC_GetSysClockFreq+0x140>)
 80097ae:	2300      	movs	r3, #0
 80097b0:	f7f6 feaa 	bl	8000508 <__aeabi_lmul>
 80097b4:	0002      	movs	r2, r0
 80097b6:	000b      	movs	r3, r1
 80097b8:	0010      	movs	r0, r2
 80097ba:	0019      	movs	r1, r3
 80097bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097be:	001c      	movs	r4, r3
 80097c0:	2300      	movs	r3, #0
 80097c2:	001d      	movs	r5, r3
 80097c4:	0022      	movs	r2, r4
 80097c6:	002b      	movs	r3, r5
 80097c8:	f7f6 fe7e 	bl	80004c8 <__aeabi_uldivmod>
 80097cc:	0002      	movs	r2, r0
 80097ce:	000b      	movs	r3, r1
 80097d0:	0013      	movs	r3, r2
 80097d2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80097d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097d6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80097d8:	e00d      	b.n	80097f6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80097da:	4b09      	ldr	r3, [pc, #36]	; (8009800 <HAL_RCC_GetSysClockFreq+0x138>)
 80097dc:	685b      	ldr	r3, [r3, #4]
 80097de:	0b5b      	lsrs	r3, r3, #13
 80097e0:	2207      	movs	r2, #7
 80097e2:	4013      	ands	r3, r2
 80097e4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80097e6:	6a3b      	ldr	r3, [r7, #32]
 80097e8:	3301      	adds	r3, #1
 80097ea:	2280      	movs	r2, #128	; 0x80
 80097ec:	0212      	lsls	r2, r2, #8
 80097ee:	409a      	lsls	r2, r3
 80097f0:	0013      	movs	r3, r2
 80097f2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80097f4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80097f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80097f8:	0018      	movs	r0, r3
 80097fa:	46bd      	mov	sp, r7
 80097fc:	b00e      	add	sp, #56	; 0x38
 80097fe:	bdb0      	pop	{r4, r5, r7, pc}
 8009800:	40021000 	.word	0x40021000
 8009804:	003d0900 	.word	0x003d0900
 8009808:	00f42400 	.word	0x00f42400
 800980c:	007a1200 	.word	0x007a1200
 8009810:	0801f264 	.word	0x0801f264

08009814 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009818:	4b02      	ldr	r3, [pc, #8]	; (8009824 <HAL_RCC_GetHCLKFreq+0x10>)
 800981a:	681b      	ldr	r3, [r3, #0]
}
 800981c:	0018      	movs	r0, r3
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
 8009822:	46c0      	nop			; (mov r8, r8)
 8009824:	20000070 	.word	0x20000070

08009828 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800982c:	f7ff fff2 	bl	8009814 <HAL_RCC_GetHCLKFreq>
 8009830:	0001      	movs	r1, r0
 8009832:	4b06      	ldr	r3, [pc, #24]	; (800984c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009834:	68db      	ldr	r3, [r3, #12]
 8009836:	0a1b      	lsrs	r3, r3, #8
 8009838:	2207      	movs	r2, #7
 800983a:	4013      	ands	r3, r2
 800983c:	4a04      	ldr	r2, [pc, #16]	; (8009850 <HAL_RCC_GetPCLK1Freq+0x28>)
 800983e:	5cd3      	ldrb	r3, [r2, r3]
 8009840:	40d9      	lsrs	r1, r3
 8009842:	000b      	movs	r3, r1
}
 8009844:	0018      	movs	r0, r3
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}
 800984a:	46c0      	nop			; (mov r8, r8)
 800984c:	40021000 	.word	0x40021000
 8009850:	0801f25c 	.word	0x0801f25c

08009854 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009858:	f7ff ffdc 	bl	8009814 <HAL_RCC_GetHCLKFreq>
 800985c:	0001      	movs	r1, r0
 800985e:	4b06      	ldr	r3, [pc, #24]	; (8009878 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009860:	68db      	ldr	r3, [r3, #12]
 8009862:	0adb      	lsrs	r3, r3, #11
 8009864:	2207      	movs	r2, #7
 8009866:	4013      	ands	r3, r2
 8009868:	4a04      	ldr	r2, [pc, #16]	; (800987c <HAL_RCC_GetPCLK2Freq+0x28>)
 800986a:	5cd3      	ldrb	r3, [r2, r3]
 800986c:	40d9      	lsrs	r1, r3
 800986e:	000b      	movs	r3, r1
}
 8009870:	0018      	movs	r0, r3
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}
 8009876:	46c0      	nop			; (mov r8, r8)
 8009878:	40021000 	.word	0x40021000
 800987c:	0801f25c 	.word	0x0801f25c

08009880 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b086      	sub	sp, #24
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8009888:	2017      	movs	r0, #23
 800988a:	183b      	adds	r3, r7, r0
 800988c:	2200      	movs	r2, #0
 800988e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	2220      	movs	r2, #32
 8009896:	4013      	ands	r3, r2
 8009898:	d100      	bne.n	800989c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800989a:	e0c2      	b.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800989c:	4b98      	ldr	r3, [pc, #608]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800989e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098a0:	2380      	movs	r3, #128	; 0x80
 80098a2:	055b      	lsls	r3, r3, #21
 80098a4:	4013      	ands	r3, r2
 80098a6:	d109      	bne.n	80098bc <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80098a8:	4b95      	ldr	r3, [pc, #596]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80098aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098ac:	4b94      	ldr	r3, [pc, #592]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80098ae:	2180      	movs	r1, #128	; 0x80
 80098b0:	0549      	lsls	r1, r1, #21
 80098b2:	430a      	orrs	r2, r1
 80098b4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80098b6:	183b      	adds	r3, r7, r0
 80098b8:	2201      	movs	r2, #1
 80098ba:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80098bc:	4b91      	ldr	r3, [pc, #580]	; (8009b04 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80098be:	681a      	ldr	r2, [r3, #0]
 80098c0:	2380      	movs	r3, #128	; 0x80
 80098c2:	005b      	lsls	r3, r3, #1
 80098c4:	4013      	ands	r3, r2
 80098c6:	d11a      	bne.n	80098fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80098c8:	4b8e      	ldr	r3, [pc, #568]	; (8009b04 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80098ca:	681a      	ldr	r2, [r3, #0]
 80098cc:	4b8d      	ldr	r3, [pc, #564]	; (8009b04 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80098ce:	2180      	movs	r1, #128	; 0x80
 80098d0:	0049      	lsls	r1, r1, #1
 80098d2:	430a      	orrs	r2, r1
 80098d4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80098d6:	f7fb fa80 	bl	8004dda <HAL_GetTick>
 80098da:	0003      	movs	r3, r0
 80098dc:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80098de:	e008      	b.n	80098f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80098e0:	f7fb fa7b 	bl	8004dda <HAL_GetTick>
 80098e4:	0002      	movs	r2, r0
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	1ad3      	subs	r3, r2, r3
 80098ea:	2b64      	cmp	r3, #100	; 0x64
 80098ec:	d901      	bls.n	80098f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80098ee:	2303      	movs	r3, #3
 80098f0:	e102      	b.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0x278>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80098f2:	4b84      	ldr	r3, [pc, #528]	; (8009b04 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80098f4:	681a      	ldr	r2, [r3, #0]
 80098f6:	2380      	movs	r3, #128	; 0x80
 80098f8:	005b      	lsls	r3, r3, #1
 80098fa:	4013      	ands	r3, r2
 80098fc:	d0f0      	beq.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80098fe:	4b80      	ldr	r3, [pc, #512]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009900:	681a      	ldr	r2, [r3, #0]
 8009902:	23c0      	movs	r3, #192	; 0xc0
 8009904:	039b      	lsls	r3, r3, #14
 8009906:	4013      	ands	r3, r2
 8009908:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	685a      	ldr	r2, [r3, #4]
 800990e:	23c0      	movs	r3, #192	; 0xc0
 8009910:	039b      	lsls	r3, r3, #14
 8009912:	4013      	ands	r3, r2
 8009914:	68fa      	ldr	r2, [r7, #12]
 8009916:	429a      	cmp	r2, r3
 8009918:	d013      	beq.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	685a      	ldr	r2, [r3, #4]
 800991e:	23c0      	movs	r3, #192	; 0xc0
 8009920:	029b      	lsls	r3, r3, #10
 8009922:	401a      	ands	r2, r3
 8009924:	23c0      	movs	r3, #192	; 0xc0
 8009926:	029b      	lsls	r3, r3, #10
 8009928:	429a      	cmp	r2, r3
 800992a:	d10a      	bne.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800992c:	4b74      	ldr	r3, [pc, #464]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800992e:	681a      	ldr	r2, [r3, #0]
 8009930:	2380      	movs	r3, #128	; 0x80
 8009932:	029b      	lsls	r3, r3, #10
 8009934:	401a      	ands	r2, r3
 8009936:	2380      	movs	r3, #128	; 0x80
 8009938:	029b      	lsls	r3, r3, #10
 800993a:	429a      	cmp	r2, r3
 800993c:	d101      	bne.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800993e:	2301      	movs	r3, #1
 8009940:	e0da      	b.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0x278>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8009942:	4b6f      	ldr	r3, [pc, #444]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009944:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009946:	23c0      	movs	r3, #192	; 0xc0
 8009948:	029b      	lsls	r3, r3, #10
 800994a:	4013      	ands	r3, r2
 800994c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d03b      	beq.n	80099cc <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	685a      	ldr	r2, [r3, #4]
 8009958:	23c0      	movs	r3, #192	; 0xc0
 800995a:	029b      	lsls	r3, r3, #10
 800995c:	4013      	ands	r3, r2
 800995e:	68fa      	ldr	r2, [r7, #12]
 8009960:	429a      	cmp	r2, r3
 8009962:	d033      	beq.n	80099cc <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	2220      	movs	r2, #32
 800996a:	4013      	ands	r3, r2
 800996c:	d02e      	beq.n	80099cc <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800996e:	4b64      	ldr	r3, [pc, #400]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009970:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009972:	4a65      	ldr	r2, [pc, #404]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8009974:	4013      	ands	r3, r2
 8009976:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009978:	4b61      	ldr	r3, [pc, #388]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800997a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800997c:	4b60      	ldr	r3, [pc, #384]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800997e:	2180      	movs	r1, #128	; 0x80
 8009980:	0309      	lsls	r1, r1, #12
 8009982:	430a      	orrs	r2, r1
 8009984:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009986:	4b5e      	ldr	r3, [pc, #376]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009988:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800998a:	4b5d      	ldr	r3, [pc, #372]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800998c:	495f      	ldr	r1, [pc, #380]	; (8009b0c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800998e:	400a      	ands	r2, r1
 8009990:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8009992:	4b5b      	ldr	r3, [pc, #364]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009994:	68fa      	ldr	r2, [r7, #12]
 8009996:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8009998:	68fa      	ldr	r2, [r7, #12]
 800999a:	2380      	movs	r3, #128	; 0x80
 800999c:	005b      	lsls	r3, r3, #1
 800999e:	4013      	ands	r3, r2
 80099a0:	d014      	beq.n	80099cc <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80099a2:	f7fb fa1a 	bl	8004dda <HAL_GetTick>
 80099a6:	0003      	movs	r3, r0
 80099a8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80099aa:	e009      	b.n	80099c0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80099ac:	f7fb fa15 	bl	8004dda <HAL_GetTick>
 80099b0:	0002      	movs	r2, r0
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	1ad3      	subs	r3, r2, r3
 80099b6:	4a56      	ldr	r2, [pc, #344]	; (8009b10 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d901      	bls.n	80099c0 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80099bc:	2303      	movs	r3, #3
 80099be:	e09b      	b.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0x278>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80099c0:	4b4f      	ldr	r3, [pc, #316]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80099c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80099c4:	2380      	movs	r3, #128	; 0x80
 80099c6:	009b      	lsls	r3, r3, #2
 80099c8:	4013      	ands	r3, r2
 80099ca:	d0ef      	beq.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	685a      	ldr	r2, [r3, #4]
 80099d0:	23c0      	movs	r3, #192	; 0xc0
 80099d2:	029b      	lsls	r3, r3, #10
 80099d4:	401a      	ands	r2, r3
 80099d6:	23c0      	movs	r3, #192	; 0xc0
 80099d8:	029b      	lsls	r3, r3, #10
 80099da:	429a      	cmp	r2, r3
 80099dc:	d10c      	bne.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0x178>
 80099de:	4b48      	ldr	r3, [pc, #288]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	4a4c      	ldr	r2, [pc, #304]	; (8009b14 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80099e4:	4013      	ands	r3, r2
 80099e6:	0019      	movs	r1, r3
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	685a      	ldr	r2, [r3, #4]
 80099ec:	23c0      	movs	r3, #192	; 0xc0
 80099ee:	039b      	lsls	r3, r3, #14
 80099f0:	401a      	ands	r2, r3
 80099f2:	4b43      	ldr	r3, [pc, #268]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80099f4:	430a      	orrs	r2, r1
 80099f6:	601a      	str	r2, [r3, #0]
 80099f8:	4b41      	ldr	r3, [pc, #260]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80099fa:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	685a      	ldr	r2, [r3, #4]
 8009a00:	23c0      	movs	r3, #192	; 0xc0
 8009a02:	029b      	lsls	r3, r3, #10
 8009a04:	401a      	ands	r2, r3
 8009a06:	4b3e      	ldr	r3, [pc, #248]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a08:	430a      	orrs	r2, r1
 8009a0a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8009a0c:	2317      	movs	r3, #23
 8009a0e:	18fb      	adds	r3, r7, r3
 8009a10:	781b      	ldrb	r3, [r3, #0]
 8009a12:	2b01      	cmp	r3, #1
 8009a14:	d105      	bne.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009a16:	4b3a      	ldr	r3, [pc, #232]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a1a:	4b39      	ldr	r3, [pc, #228]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a1c:	493e      	ldr	r1, [pc, #248]	; (8009b18 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8009a1e:	400a      	ands	r2, r1
 8009a20:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	2201      	movs	r2, #1
 8009a28:	4013      	ands	r3, r2
 8009a2a:	d009      	beq.n	8009a40 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009a2c:	4b34      	ldr	r3, [pc, #208]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a30:	2203      	movs	r2, #3
 8009a32:	4393      	bics	r3, r2
 8009a34:	0019      	movs	r1, r3
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	689a      	ldr	r2, [r3, #8]
 8009a3a:	4b31      	ldr	r3, [pc, #196]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a3c:	430a      	orrs	r2, r1
 8009a3e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	2202      	movs	r2, #2
 8009a46:	4013      	ands	r3, r2
 8009a48:	d009      	beq.n	8009a5e <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009a4a:	4b2d      	ldr	r3, [pc, #180]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a4e:	220c      	movs	r2, #12
 8009a50:	4393      	bics	r3, r2
 8009a52:	0019      	movs	r1, r3
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	68da      	ldr	r2, [r3, #12]
 8009a58:	4b29      	ldr	r3, [pc, #164]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a5a:	430a      	orrs	r2, r1
 8009a5c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	2204      	movs	r2, #4
 8009a64:	4013      	ands	r3, r2
 8009a66:	d009      	beq.n	8009a7c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009a68:	4b25      	ldr	r3, [pc, #148]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a6c:	4a2b      	ldr	r2, [pc, #172]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8009a6e:	4013      	ands	r3, r2
 8009a70:	0019      	movs	r1, r3
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	691a      	ldr	r2, [r3, #16]
 8009a76:	4b22      	ldr	r3, [pc, #136]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a78:	430a      	orrs	r2, r1
 8009a7a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	2208      	movs	r2, #8
 8009a82:	4013      	ands	r3, r2
 8009a84:	d009      	beq.n	8009a9a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009a86:	4b1e      	ldr	r3, [pc, #120]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a8a:	4a25      	ldr	r2, [pc, #148]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8009a8c:	4013      	ands	r3, r2
 8009a8e:	0019      	movs	r1, r3
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	695a      	ldr	r2, [r3, #20]
 8009a94:	4b1a      	ldr	r3, [pc, #104]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a96:	430a      	orrs	r2, r1
 8009a98:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681a      	ldr	r2, [r3, #0]
 8009a9e:	2380      	movs	r3, #128	; 0x80
 8009aa0:	005b      	lsls	r3, r3, #1
 8009aa2:	4013      	ands	r3, r2
 8009aa4:	d009      	beq.n	8009aba <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009aa6:	4b16      	ldr	r3, [pc, #88]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009aaa:	4a17      	ldr	r2, [pc, #92]	; (8009b08 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8009aac:	4013      	ands	r3, r2
 8009aae:	0019      	movs	r1, r3
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	699a      	ldr	r2, [r3, #24]
 8009ab4:	4b12      	ldr	r3, [pc, #72]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009ab6:	430a      	orrs	r2, r1
 8009ab8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	2240      	movs	r2, #64	; 0x40
 8009ac0:	4013      	ands	r3, r2
 8009ac2:	d009      	beq.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009ac4:	4b0e      	ldr	r3, [pc, #56]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ac8:	4a16      	ldr	r2, [pc, #88]	; (8009b24 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8009aca:	4013      	ands	r3, r2
 8009acc:	0019      	movs	r1, r3
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6a1a      	ldr	r2, [r3, #32]
 8009ad2:	4b0b      	ldr	r3, [pc, #44]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009ad4:	430a      	orrs	r2, r1
 8009ad6:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	2280      	movs	r2, #128	; 0x80
 8009ade:	4013      	ands	r3, r2
 8009ae0:	d009      	beq.n	8009af6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8009ae2:	4b07      	ldr	r3, [pc, #28]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ae6:	4a10      	ldr	r2, [pc, #64]	; (8009b28 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8009ae8:	4013      	ands	r3, r2
 8009aea:	0019      	movs	r1, r3
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	69da      	ldr	r2, [r3, #28]
 8009af0:	4b03      	ldr	r3, [pc, #12]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009af2:	430a      	orrs	r2, r1
 8009af4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009af6:	2300      	movs	r3, #0
}
 8009af8:	0018      	movs	r0, r3
 8009afa:	46bd      	mov	sp, r7
 8009afc:	b006      	add	sp, #24
 8009afe:	bd80      	pop	{r7, pc}
 8009b00:	40021000 	.word	0x40021000
 8009b04:	40007000 	.word	0x40007000
 8009b08:	fffcffff 	.word	0xfffcffff
 8009b0c:	fff7ffff 	.word	0xfff7ffff
 8009b10:	00001388 	.word	0x00001388
 8009b14:	ffcfffff 	.word	0xffcfffff
 8009b18:	efffffff 	.word	0xefffffff
 8009b1c:	fffff3ff 	.word	0xfffff3ff
 8009b20:	ffffcfff 	.word	0xffffcfff
 8009b24:	fbffffff 	.word	0xfbffffff
 8009b28:	fff3ffff 	.word	0xfff3ffff

08009b2c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b082      	sub	sp, #8
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d101      	bne.n	8009b3e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	e08e      	b.n	8009c5c <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2221      	movs	r2, #33	; 0x21
 8009b42:	5c9b      	ldrb	r3, [r3, r2]
 8009b44:	b2db      	uxtb	r3, r3
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d107      	bne.n	8009b5a <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2220      	movs	r2, #32
 8009b4e:	2100      	movs	r1, #0
 8009b50:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	0018      	movs	r0, r3
 8009b56:	f7f9 ffa3 	bl	8003aa0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2221      	movs	r2, #33	; 0x21
 8009b5e:	2102      	movs	r1, #2
 8009b60:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	22ca      	movs	r2, #202	; 0xca
 8009b68:	625a      	str	r2, [r3, #36]	; 0x24
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	2253      	movs	r2, #83	; 0x53
 8009b70:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	0018      	movs	r0, r3
 8009b76:	f000 fcf4 	bl	800a562 <RTC_EnterInitMode>
 8009b7a:	1e03      	subs	r3, r0, #0
 8009b7c:	d009      	beq.n	8009b92 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	22ff      	movs	r2, #255	; 0xff
 8009b84:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2221      	movs	r2, #33	; 0x21
 8009b8a:	2104      	movs	r1, #4
 8009b8c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8009b8e:	2301      	movs	r3, #1
 8009b90:	e064      	b.n	8009c5c <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	689a      	ldr	r2, [r3, #8]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	4931      	ldr	r1, [pc, #196]	; (8009c64 <HAL_RTC_Init+0x138>)
 8009b9e:	400a      	ands	r2, r1
 8009ba0:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	6899      	ldr	r1, [r3, #8]
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	685a      	ldr	r2, [r3, #4]
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	691b      	ldr	r3, [r3, #16]
 8009bb0:	431a      	orrs	r2, r3
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	699b      	ldr	r3, [r3, #24]
 8009bb6:	431a      	orrs	r2, r3
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	430a      	orrs	r2, r1
 8009bbe:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	687a      	ldr	r2, [r7, #4]
 8009bc6:	68d2      	ldr	r2, [r2, #12]
 8009bc8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	6919      	ldr	r1, [r3, #16]
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	689b      	ldr	r3, [r3, #8]
 8009bd4:	041a      	lsls	r2, r3, #16
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	430a      	orrs	r2, r1
 8009bdc:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	68da      	ldr	r2, [r3, #12]
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	2180      	movs	r1, #128	; 0x80
 8009bea:	438a      	bics	r2, r1
 8009bec:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	2103      	movs	r1, #3
 8009bfa:	438a      	bics	r2, r1
 8009bfc:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	69da      	ldr	r2, [r3, #28]
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	695b      	ldr	r3, [r3, #20]
 8009c0c:	431a      	orrs	r2, r3
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	430a      	orrs	r2, r1
 8009c14:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	689b      	ldr	r3, [r3, #8]
 8009c1c:	2220      	movs	r2, #32
 8009c1e:	4013      	ands	r3, r2
 8009c20:	d113      	bne.n	8009c4a <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	0018      	movs	r0, r3
 8009c26:	f000 fc75 	bl	800a514 <HAL_RTC_WaitForSynchro>
 8009c2a:	1e03      	subs	r3, r0, #0
 8009c2c:	d00d      	beq.n	8009c4a <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	22ff      	movs	r2, #255	; 0xff
 8009c34:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2221      	movs	r2, #33	; 0x21
 8009c3a:	2104      	movs	r1, #4
 8009c3c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2220      	movs	r2, #32
 8009c42:	2100      	movs	r1, #0
 8009c44:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8009c46:	2301      	movs	r3, #1
 8009c48:	e008      	b.n	8009c5c <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	22ff      	movs	r2, #255	; 0xff
 8009c50:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2221      	movs	r2, #33	; 0x21
 8009c56:	2101      	movs	r1, #1
 8009c58:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009c5a:	2300      	movs	r3, #0
  }
}
 8009c5c:	0018      	movs	r0, r3
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	b002      	add	sp, #8
 8009c62:	bd80      	pop	{r7, pc}
 8009c64:	ff8fffbf 	.word	0xff8fffbf

08009c68 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009c68:	b590      	push	{r4, r7, lr}
 8009c6a:	b087      	sub	sp, #28
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	60f8      	str	r0, [r7, #12]
 8009c70:	60b9      	str	r1, [r7, #8]
 8009c72:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	2220      	movs	r2, #32
 8009c78:	5c9b      	ldrb	r3, [r3, r2]
 8009c7a:	2b01      	cmp	r3, #1
 8009c7c:	d101      	bne.n	8009c82 <HAL_RTC_SetTime+0x1a>
 8009c7e:	2302      	movs	r3, #2
 8009c80:	e0ad      	b.n	8009dde <HAL_RTC_SetTime+0x176>
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	2220      	movs	r2, #32
 8009c86:	2101      	movs	r1, #1
 8009c88:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	2221      	movs	r2, #33	; 0x21
 8009c8e:	2102      	movs	r1, #2
 8009c90:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d125      	bne.n	8009ce4 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	689b      	ldr	r3, [r3, #8]
 8009c9e:	2240      	movs	r2, #64	; 0x40
 8009ca0:	4013      	ands	r3, r2
 8009ca2:	d102      	bne.n	8009caa <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	781b      	ldrb	r3, [r3, #0]
 8009cae:	0018      	movs	r0, r3
 8009cb0:	f000 fc81 	bl	800a5b6 <RTC_ByteToBcd2>
 8009cb4:	0003      	movs	r3, r0
 8009cb6:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	785b      	ldrb	r3, [r3, #1]
 8009cbc:	0018      	movs	r0, r3
 8009cbe:	f000 fc7a 	bl	800a5b6 <RTC_ByteToBcd2>
 8009cc2:	0003      	movs	r3, r0
 8009cc4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009cc6:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	789b      	ldrb	r3, [r3, #2]
 8009ccc:	0018      	movs	r0, r3
 8009cce:	f000 fc72 	bl	800a5b6 <RTC_ByteToBcd2>
 8009cd2:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8009cd4:	0022      	movs	r2, r4
 8009cd6:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	78db      	ldrb	r3, [r3, #3]
 8009cdc:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009cde:	4313      	orrs	r3, r2
 8009ce0:	617b      	str	r3, [r7, #20]
 8009ce2:	e017      	b.n	8009d14 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	689b      	ldr	r3, [r3, #8]
 8009cea:	2240      	movs	r2, #64	; 0x40
 8009cec:	4013      	ands	r3, r2
 8009cee:	d102      	bne.n	8009cf6 <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	781b      	ldrb	r3, [r3, #0]
 8009cfa:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	785b      	ldrb	r3, [r3, #1]
 8009d00:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009d02:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8009d04:	68ba      	ldr	r2, [r7, #8]
 8009d06:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8009d08:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	78db      	ldrb	r3, [r3, #3]
 8009d0e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009d10:	4313      	orrs	r3, r2
 8009d12:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	22ca      	movs	r2, #202	; 0xca
 8009d1a:	625a      	str	r2, [r3, #36]	; 0x24
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	2253      	movs	r2, #83	; 0x53
 8009d22:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	0018      	movs	r0, r3
 8009d28:	f000 fc1b 	bl	800a562 <RTC_EnterInitMode>
 8009d2c:	1e03      	subs	r3, r0, #0
 8009d2e:	d00d      	beq.n	8009d4c <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	22ff      	movs	r2, #255	; 0xff
 8009d36:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	2221      	movs	r2, #33	; 0x21
 8009d3c:	2104      	movs	r1, #4
 8009d3e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	2220      	movs	r2, #32
 8009d44:	2100      	movs	r1, #0
 8009d46:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8009d48:	2301      	movs	r3, #1
 8009d4a:	e048      	b.n	8009dde <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	697a      	ldr	r2, [r7, #20]
 8009d52:	4925      	ldr	r1, [pc, #148]	; (8009de8 <HAL_RTC_SetTime+0x180>)
 8009d54:	400a      	ands	r2, r1
 8009d56:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	689a      	ldr	r2, [r3, #8]
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	4922      	ldr	r1, [pc, #136]	; (8009dec <HAL_RTC_SetTime+0x184>)
 8009d64:	400a      	ands	r2, r1
 8009d66:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	6899      	ldr	r1, [r3, #8]
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	68da      	ldr	r2, [r3, #12]
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	691b      	ldr	r3, [r3, #16]
 8009d76:	431a      	orrs	r2, r3
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	430a      	orrs	r2, r1
 8009d7e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	68da      	ldr	r2, [r3, #12]
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	2180      	movs	r1, #128	; 0x80
 8009d8c:	438a      	bics	r2, r1
 8009d8e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	689b      	ldr	r3, [r3, #8]
 8009d96:	2220      	movs	r2, #32
 8009d98:	4013      	ands	r3, r2
 8009d9a:	d113      	bne.n	8009dc4 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	0018      	movs	r0, r3
 8009da0:	f000 fbb8 	bl	800a514 <HAL_RTC_WaitForSynchro>
 8009da4:	1e03      	subs	r3, r0, #0
 8009da6:	d00d      	beq.n	8009dc4 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	22ff      	movs	r2, #255	; 0xff
 8009dae:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	2221      	movs	r2, #33	; 0x21
 8009db4:	2104      	movs	r1, #4
 8009db6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	2220      	movs	r2, #32
 8009dbc:	2100      	movs	r1, #0
 8009dbe:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	e00c      	b.n	8009dde <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	22ff      	movs	r2, #255	; 0xff
 8009dca:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	2221      	movs	r2, #33	; 0x21
 8009dd0:	2101      	movs	r1, #1
 8009dd2:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	2220      	movs	r2, #32
 8009dd8:	2100      	movs	r1, #0
 8009dda:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009ddc:	2300      	movs	r3, #0
  }
}
 8009dde:	0018      	movs	r0, r3
 8009de0:	46bd      	mov	sp, r7
 8009de2:	b007      	add	sp, #28
 8009de4:	bd90      	pop	{r4, r7, pc}
 8009de6:	46c0      	nop			; (mov r8, r8)
 8009de8:	007f7f7f 	.word	0x007f7f7f
 8009dec:	fffbffff 	.word	0xfffbffff

08009df0 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b086      	sub	sp, #24
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	60f8      	str	r0, [r7, #12]
 8009df8:	60b9      	str	r1, [r7, #8]
 8009dfa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	691b      	ldr	r3, [r3, #16]
 8009e0c:	045b      	lsls	r3, r3, #17
 8009e0e:	0c5a      	lsrs	r2, r3, #17
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	4a22      	ldr	r2, [pc, #136]	; (8009ea4 <HAL_RTC_GetTime+0xb4>)
 8009e1c:	4013      	ands	r3, r2
 8009e1e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	0c1b      	lsrs	r3, r3, #16
 8009e24:	b2db      	uxtb	r3, r3
 8009e26:	223f      	movs	r2, #63	; 0x3f
 8009e28:	4013      	ands	r3, r2
 8009e2a:	b2da      	uxtb	r2, r3
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8009e30:	697b      	ldr	r3, [r7, #20]
 8009e32:	0a1b      	lsrs	r3, r3, #8
 8009e34:	b2db      	uxtb	r3, r3
 8009e36:	227f      	movs	r2, #127	; 0x7f
 8009e38:	4013      	ands	r3, r2
 8009e3a:	b2da      	uxtb	r2, r3
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	b2db      	uxtb	r3, r3
 8009e44:	227f      	movs	r2, #127	; 0x7f
 8009e46:	4013      	ands	r3, r2
 8009e48:	b2da      	uxtb	r2, r3
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	0c1b      	lsrs	r3, r3, #16
 8009e52:	b2db      	uxtb	r3, r3
 8009e54:	2240      	movs	r2, #64	; 0x40
 8009e56:	4013      	ands	r3, r2
 8009e58:	b2da      	uxtb	r2, r3
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d11a      	bne.n	8009e9a <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	781b      	ldrb	r3, [r3, #0]
 8009e68:	0018      	movs	r0, r3
 8009e6a:	f000 fbcc 	bl	800a606 <RTC_Bcd2ToByte>
 8009e6e:	0003      	movs	r3, r0
 8009e70:	001a      	movs	r2, r3
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	785b      	ldrb	r3, [r3, #1]
 8009e7a:	0018      	movs	r0, r3
 8009e7c:	f000 fbc3 	bl	800a606 <RTC_Bcd2ToByte>
 8009e80:	0003      	movs	r3, r0
 8009e82:	001a      	movs	r2, r3
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	789b      	ldrb	r3, [r3, #2]
 8009e8c:	0018      	movs	r0, r3
 8009e8e:	f000 fbba 	bl	800a606 <RTC_Bcd2ToByte>
 8009e92:	0003      	movs	r3, r0
 8009e94:	001a      	movs	r2, r3
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8009e9a:	2300      	movs	r3, #0
}
 8009e9c:	0018      	movs	r0, r3
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	b006      	add	sp, #24
 8009ea2:	bd80      	pop	{r7, pc}
 8009ea4:	007f7f7f 	.word	0x007f7f7f

08009ea8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009ea8:	b590      	push	{r4, r7, lr}
 8009eaa:	b087      	sub	sp, #28
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	60f8      	str	r0, [r7, #12]
 8009eb0:	60b9      	str	r1, [r7, #8]
 8009eb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	2220      	movs	r2, #32
 8009eb8:	5c9b      	ldrb	r3, [r3, r2]
 8009eba:	2b01      	cmp	r3, #1
 8009ebc:	d101      	bne.n	8009ec2 <HAL_RTC_SetDate+0x1a>
 8009ebe:	2302      	movs	r3, #2
 8009ec0:	e099      	b.n	8009ff6 <HAL_RTC_SetDate+0x14e>
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	2220      	movs	r2, #32
 8009ec6:	2101      	movs	r1, #1
 8009ec8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	2221      	movs	r2, #33	; 0x21
 8009ece:	2102      	movs	r1, #2
 8009ed0:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d10e      	bne.n	8009ef6 <HAL_RTC_SetDate+0x4e>
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	785b      	ldrb	r3, [r3, #1]
 8009edc:	001a      	movs	r2, r3
 8009ede:	2310      	movs	r3, #16
 8009ee0:	4013      	ands	r3, r2
 8009ee2:	d008      	beq.n	8009ef6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	785b      	ldrb	r3, [r3, #1]
 8009ee8:	2210      	movs	r2, #16
 8009eea:	4393      	bics	r3, r2
 8009eec:	b2db      	uxtb	r3, r3
 8009eee:	330a      	adds	r3, #10
 8009ef0:	b2da      	uxtb	r2, r3
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d11c      	bne.n	8009f36 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	78db      	ldrb	r3, [r3, #3]
 8009f00:	0018      	movs	r0, r3
 8009f02:	f000 fb58 	bl	800a5b6 <RTC_ByteToBcd2>
 8009f06:	0003      	movs	r3, r0
 8009f08:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	785b      	ldrb	r3, [r3, #1]
 8009f0e:	0018      	movs	r0, r3
 8009f10:	f000 fb51 	bl	800a5b6 <RTC_ByteToBcd2>
 8009f14:	0003      	movs	r3, r0
 8009f16:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009f18:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	789b      	ldrb	r3, [r3, #2]
 8009f1e:	0018      	movs	r0, r3
 8009f20:	f000 fb49 	bl	800a5b6 <RTC_ByteToBcd2>
 8009f24:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8009f26:	0022      	movs	r2, r4
 8009f28:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	781b      	ldrb	r3, [r3, #0]
 8009f2e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009f30:	4313      	orrs	r3, r2
 8009f32:	617b      	str	r3, [r7, #20]
 8009f34:	e00e      	b.n	8009f54 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	78db      	ldrb	r3, [r3, #3]
 8009f3a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	785b      	ldrb	r3, [r3, #1]
 8009f40:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009f42:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8009f44:	68ba      	ldr	r2, [r7, #8]
 8009f46:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8009f48:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	781b      	ldrb	r3, [r3, #0]
 8009f4e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009f50:	4313      	orrs	r3, r2
 8009f52:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	22ca      	movs	r2, #202	; 0xca
 8009f5a:	625a      	str	r2, [r3, #36]	; 0x24
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	2253      	movs	r2, #83	; 0x53
 8009f62:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	0018      	movs	r0, r3
 8009f68:	f000 fafb 	bl	800a562 <RTC_EnterInitMode>
 8009f6c:	1e03      	subs	r3, r0, #0
 8009f6e:	d00d      	beq.n	8009f8c <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	22ff      	movs	r2, #255	; 0xff
 8009f76:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	2221      	movs	r2, #33	; 0x21
 8009f7c:	2104      	movs	r1, #4
 8009f7e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	2220      	movs	r2, #32
 8009f84:	2100      	movs	r1, #0
 8009f86:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8009f88:	2301      	movs	r3, #1
 8009f8a:	e034      	b.n	8009ff6 <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	697a      	ldr	r2, [r7, #20]
 8009f92:	491b      	ldr	r1, [pc, #108]	; (800a000 <HAL_RTC_SetDate+0x158>)
 8009f94:	400a      	ands	r2, r1
 8009f96:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	68da      	ldr	r2, [r3, #12]
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	2180      	movs	r1, #128	; 0x80
 8009fa4:	438a      	bics	r2, r1
 8009fa6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	689b      	ldr	r3, [r3, #8]
 8009fae:	2220      	movs	r2, #32
 8009fb0:	4013      	ands	r3, r2
 8009fb2:	d113      	bne.n	8009fdc <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	0018      	movs	r0, r3
 8009fb8:	f000 faac 	bl	800a514 <HAL_RTC_WaitForSynchro>
 8009fbc:	1e03      	subs	r3, r0, #0
 8009fbe:	d00d      	beq.n	8009fdc <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	22ff      	movs	r2, #255	; 0xff
 8009fc6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	2221      	movs	r2, #33	; 0x21
 8009fcc:	2104      	movs	r1, #4
 8009fce:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2220      	movs	r2, #32
 8009fd4:	2100      	movs	r1, #0
 8009fd6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8009fd8:	2301      	movs	r3, #1
 8009fda:	e00c      	b.n	8009ff6 <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	22ff      	movs	r2, #255	; 0xff
 8009fe2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	2221      	movs	r2, #33	; 0x21
 8009fe8:	2101      	movs	r1, #1
 8009fea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	2220      	movs	r2, #32
 8009ff0:	2100      	movs	r1, #0
 8009ff2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009ff4:	2300      	movs	r3, #0
  }
}
 8009ff6:	0018      	movs	r0, r3
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	b007      	add	sp, #28
 8009ffc:	bd90      	pop	{r4, r7, pc}
 8009ffe:	46c0      	nop			; (mov r8, r8)
 800a000:	00ffff3f 	.word	0x00ffff3f

0800a004 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b086      	sub	sp, #24
 800a008:	af00      	add	r7, sp, #0
 800a00a:	60f8      	str	r0, [r7, #12]
 800a00c:	60b9      	str	r1, [r7, #8]
 800a00e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	685b      	ldr	r3, [r3, #4]
 800a016:	4a21      	ldr	r2, [pc, #132]	; (800a09c <HAL_RTC_GetDate+0x98>)
 800a018:	4013      	ands	r3, r2
 800a01a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800a01c:	697b      	ldr	r3, [r7, #20]
 800a01e:	0c1b      	lsrs	r3, r3, #16
 800a020:	b2da      	uxtb	r2, r3
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800a026:	697b      	ldr	r3, [r7, #20]
 800a028:	0a1b      	lsrs	r3, r3, #8
 800a02a:	b2db      	uxtb	r3, r3
 800a02c:	221f      	movs	r2, #31
 800a02e:	4013      	ands	r3, r2
 800a030:	b2da      	uxtb	r2, r3
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	b2db      	uxtb	r3, r3
 800a03a:	223f      	movs	r2, #63	; 0x3f
 800a03c:	4013      	ands	r3, r2
 800a03e:	b2da      	uxtb	r2, r3
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	0b5b      	lsrs	r3, r3, #13
 800a048:	b2db      	uxtb	r3, r3
 800a04a:	2207      	movs	r2, #7
 800a04c:	4013      	ands	r3, r2
 800a04e:	b2da      	uxtb	r2, r3
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d11a      	bne.n	800a090 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800a05a:	68bb      	ldr	r3, [r7, #8]
 800a05c:	78db      	ldrb	r3, [r3, #3]
 800a05e:	0018      	movs	r0, r3
 800a060:	f000 fad1 	bl	800a606 <RTC_Bcd2ToByte>
 800a064:	0003      	movs	r3, r0
 800a066:	001a      	movs	r2, r3
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	785b      	ldrb	r3, [r3, #1]
 800a070:	0018      	movs	r0, r3
 800a072:	f000 fac8 	bl	800a606 <RTC_Bcd2ToByte>
 800a076:	0003      	movs	r3, r0
 800a078:	001a      	movs	r2, r3
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	789b      	ldrb	r3, [r3, #2]
 800a082:	0018      	movs	r0, r3
 800a084:	f000 fabf 	bl	800a606 <RTC_Bcd2ToByte>
 800a088:	0003      	movs	r3, r0
 800a08a:	001a      	movs	r2, r3
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800a090:	2300      	movs	r3, #0
}
 800a092:	0018      	movs	r0, r3
 800a094:	46bd      	mov	sp, r7
 800a096:	b006      	add	sp, #24
 800a098:	bd80      	pop	{r7, pc}
 800a09a:	46c0      	nop			; (mov r8, r8)
 800a09c:	00ffff3f 	.word	0x00ffff3f

0800a0a0 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800a0a0:	b590      	push	{r4, r7, lr}
 800a0a2:	b089      	sub	sp, #36	; 0x24
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	60f8      	str	r0, [r7, #12]
 800a0a8:	60b9      	str	r1, [r7, #8]
 800a0aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	2220      	movs	r2, #32
 800a0b0:	5c9b      	ldrb	r3, [r3, r2]
 800a0b2:	2b01      	cmp	r3, #1
 800a0b4:	d101      	bne.n	800a0ba <HAL_RTC_SetAlarm_IT+0x1a>
 800a0b6:	2302      	movs	r3, #2
 800a0b8:	e130      	b.n	800a31c <HAL_RTC_SetAlarm_IT+0x27c>
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	2220      	movs	r2, #32
 800a0be:	2101      	movs	r1, #1
 800a0c0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	2221      	movs	r2, #33	; 0x21
 800a0c6:	2102      	movs	r1, #2
 800a0c8:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d136      	bne.n	800a13e <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	689b      	ldr	r3, [r3, #8]
 800a0d6:	2240      	movs	r2, #64	; 0x40
 800a0d8:	4013      	ands	r3, r2
 800a0da:	d102      	bne.n	800a0e2 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	2200      	movs	r2, #0
 800a0e0:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	781b      	ldrb	r3, [r3, #0]
 800a0e6:	0018      	movs	r0, r3
 800a0e8:	f000 fa65 	bl	800a5b6 <RTC_ByteToBcd2>
 800a0ec:	0003      	movs	r3, r0
 800a0ee:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	785b      	ldrb	r3, [r3, #1]
 800a0f4:	0018      	movs	r0, r3
 800a0f6:	f000 fa5e 	bl	800a5b6 <RTC_ByteToBcd2>
 800a0fa:	0003      	movs	r3, r0
 800a0fc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800a0fe:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	789b      	ldrb	r3, [r3, #2]
 800a104:	0018      	movs	r0, r3
 800a106:	f000 fa56 	bl	800a5b6 <RTC_ByteToBcd2>
 800a10a:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800a10c:	0022      	movs	r2, r4
 800a10e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	78db      	ldrb	r3, [r3, #3]
 800a114:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800a116:	431a      	orrs	r2, r3
 800a118:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	2220      	movs	r2, #32
 800a11e:	5c9b      	ldrb	r3, [r3, r2]
 800a120:	0018      	movs	r0, r3
 800a122:	f000 fa48 	bl	800a5b6 <RTC_ByteToBcd2>
 800a126:	0003      	movs	r3, r0
 800a128:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800a12a:	0022      	movs	r2, r4
 800a12c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800a132:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800a138:	4313      	orrs	r3, r2
 800a13a:	61fb      	str	r3, [r7, #28]
 800a13c:	e022      	b.n	800a184 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	689b      	ldr	r3, [r3, #8]
 800a144:	2240      	movs	r2, #64	; 0x40
 800a146:	4013      	ands	r3, r2
 800a148:	d102      	bne.n	800a150 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	2200      	movs	r2, #0
 800a14e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	781b      	ldrb	r3, [r3, #0]
 800a154:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	785b      	ldrb	r3, [r3, #1]
 800a15a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800a15c:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800a15e:	68ba      	ldr	r2, [r7, #8]
 800a160:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800a162:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	78db      	ldrb	r3, [r3, #3]
 800a168:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800a16a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	2120      	movs	r1, #32
 800a170:	5c5b      	ldrb	r3, [r3, r1]
 800a172:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800a174:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800a17a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800a180:	4313      	orrs	r3, r2
 800a182:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	685a      	ldr	r2, [r3, #4]
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	699b      	ldr	r3, [r3, #24]
 800a18c:	4313      	orrs	r3, r2
 800a18e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	22ca      	movs	r2, #202	; 0xca
 800a196:	625a      	str	r2, [r3, #36]	; 0x24
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	2253      	movs	r2, #83	; 0x53
 800a19e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a1a4:	2380      	movs	r3, #128	; 0x80
 800a1a6:	005b      	lsls	r3, r3, #1
 800a1a8:	429a      	cmp	r2, r3
 800a1aa:	d14e      	bne.n	800a24a <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	689a      	ldr	r2, [r3, #8]
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	495b      	ldr	r1, [pc, #364]	; (800a324 <HAL_RTC_SetAlarm_IT+0x284>)
 800a1b8:	400a      	ands	r2, r1
 800a1ba:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	68db      	ldr	r3, [r3, #12]
 800a1c2:	22ff      	movs	r2, #255	; 0xff
 800a1c4:	401a      	ands	r2, r3
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	4957      	ldr	r1, [pc, #348]	; (800a328 <HAL_RTC_SetAlarm_IT+0x288>)
 800a1cc:	430a      	orrs	r2, r1
 800a1ce:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a1d0:	f7fa fe03 	bl	8004dda <HAL_GetTick>
 800a1d4:	0003      	movs	r3, r0
 800a1d6:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800a1d8:	e016      	b.n	800a208 <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a1da:	f7fa fdfe 	bl	8004dda <HAL_GetTick>
 800a1de:	0002      	movs	r2, r0
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	1ad2      	subs	r2, r2, r3
 800a1e4:	23fa      	movs	r3, #250	; 0xfa
 800a1e6:	009b      	lsls	r3, r3, #2
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	d90d      	bls.n	800a208 <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	22ff      	movs	r2, #255	; 0xff
 800a1f2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2221      	movs	r2, #33	; 0x21
 800a1f8:	2103      	movs	r1, #3
 800a1fa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2220      	movs	r2, #32
 800a200:	2100      	movs	r1, #0
 800a202:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a204:	2303      	movs	r3, #3
 800a206:	e089      	b.n	800a31c <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	68db      	ldr	r3, [r3, #12]
 800a20e:	2201      	movs	r2, #1
 800a210:	4013      	ands	r3, r2
 800a212:	d0e2      	beq.n	800a1da <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	69fa      	ldr	r2, [r7, #28]
 800a21a:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	69ba      	ldr	r2, [r7, #24]
 800a222:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	689a      	ldr	r2, [r3, #8]
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	2180      	movs	r1, #128	; 0x80
 800a230:	0049      	lsls	r1, r1, #1
 800a232:	430a      	orrs	r2, r1
 800a234:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	689a      	ldr	r2, [r3, #8]
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	2180      	movs	r1, #128	; 0x80
 800a242:	0149      	lsls	r1, r1, #5
 800a244:	430a      	orrs	r2, r1
 800a246:	609a      	str	r2, [r3, #8]
 800a248:	e04d      	b.n	800a2e6 <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	689a      	ldr	r2, [r3, #8]
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	4935      	ldr	r1, [pc, #212]	; (800a32c <HAL_RTC_SetAlarm_IT+0x28c>)
 800a256:	400a      	ands	r2, r1
 800a258:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	68db      	ldr	r3, [r3, #12]
 800a260:	22ff      	movs	r2, #255	; 0xff
 800a262:	401a      	ands	r2, r3
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	4931      	ldr	r1, [pc, #196]	; (800a330 <HAL_RTC_SetAlarm_IT+0x290>)
 800a26a:	430a      	orrs	r2, r1
 800a26c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a26e:	f7fa fdb4 	bl	8004dda <HAL_GetTick>
 800a272:	0003      	movs	r3, r0
 800a274:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800a276:	e016      	b.n	800a2a6 <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a278:	f7fa fdaf 	bl	8004dda <HAL_GetTick>
 800a27c:	0002      	movs	r2, r0
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	1ad2      	subs	r2, r2, r3
 800a282:	23fa      	movs	r3, #250	; 0xfa
 800a284:	009b      	lsls	r3, r3, #2
 800a286:	429a      	cmp	r2, r3
 800a288:	d90d      	bls.n	800a2a6 <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	22ff      	movs	r2, #255	; 0xff
 800a290:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	2221      	movs	r2, #33	; 0x21
 800a296:	2103      	movs	r1, #3
 800a298:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	2220      	movs	r2, #32
 800a29e:	2100      	movs	r1, #0
 800a2a0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a2a2:	2303      	movs	r3, #3
 800a2a4:	e03a      	b.n	800a31c <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	68db      	ldr	r3, [r3, #12]
 800a2ac:	2202      	movs	r2, #2
 800a2ae:	4013      	ands	r3, r2
 800a2b0:	d0e2      	beq.n	800a278 <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	69fa      	ldr	r2, [r7, #28]
 800a2b8:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	69ba      	ldr	r2, [r7, #24]
 800a2c0:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	689a      	ldr	r2, [r3, #8]
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	2180      	movs	r1, #128	; 0x80
 800a2ce:	0089      	lsls	r1, r1, #2
 800a2d0:	430a      	orrs	r2, r1
 800a2d2:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	689a      	ldr	r2, [r3, #8]
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	2180      	movs	r1, #128	; 0x80
 800a2e0:	0189      	lsls	r1, r1, #6
 800a2e2:	430a      	orrs	r2, r1
 800a2e4:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800a2e6:	4b13      	ldr	r3, [pc, #76]	; (800a334 <HAL_RTC_SetAlarm_IT+0x294>)
 800a2e8:	681a      	ldr	r2, [r3, #0]
 800a2ea:	4b12      	ldr	r3, [pc, #72]	; (800a334 <HAL_RTC_SetAlarm_IT+0x294>)
 800a2ec:	2180      	movs	r1, #128	; 0x80
 800a2ee:	0289      	lsls	r1, r1, #10
 800a2f0:	430a      	orrs	r2, r1
 800a2f2:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800a2f4:	4b0f      	ldr	r3, [pc, #60]	; (800a334 <HAL_RTC_SetAlarm_IT+0x294>)
 800a2f6:	689a      	ldr	r2, [r3, #8]
 800a2f8:	4b0e      	ldr	r3, [pc, #56]	; (800a334 <HAL_RTC_SetAlarm_IT+0x294>)
 800a2fa:	2180      	movs	r1, #128	; 0x80
 800a2fc:	0289      	lsls	r1, r1, #10
 800a2fe:	430a      	orrs	r2, r1
 800a300:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	22ff      	movs	r2, #255	; 0xff
 800a308:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	2221      	movs	r2, #33	; 0x21
 800a30e:	2101      	movs	r1, #1
 800a310:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	2220      	movs	r2, #32
 800a316:	2100      	movs	r1, #0
 800a318:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a31a:	2300      	movs	r3, #0
}
 800a31c:	0018      	movs	r0, r3
 800a31e:	46bd      	mov	sp, r7
 800a320:	b009      	add	sp, #36	; 0x24
 800a322:	bd90      	pop	{r4, r7, pc}
 800a324:	fffffeff 	.word	0xfffffeff
 800a328:	fffffe7f 	.word	0xfffffe7f
 800a32c:	fffffdff 	.word	0xfffffdff
 800a330:	fffffd7f 	.word	0xfffffd7f
 800a334:	40010400 	.word	0x40010400

0800a338 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b084      	sub	sp, #16
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2220      	movs	r2, #32
 800a346:	5c9b      	ldrb	r3, [r3, r2]
 800a348:	2b01      	cmp	r3, #1
 800a34a:	d101      	bne.n	800a350 <HAL_RTC_DeactivateAlarm+0x18>
 800a34c:	2302      	movs	r3, #2
 800a34e:	e086      	b.n	800a45e <HAL_RTC_DeactivateAlarm+0x126>
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2220      	movs	r2, #32
 800a354:	2101      	movs	r1, #1
 800a356:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2221      	movs	r2, #33	; 0x21
 800a35c:	2102      	movs	r1, #2
 800a35e:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	22ca      	movs	r2, #202	; 0xca
 800a366:	625a      	str	r2, [r3, #36]	; 0x24
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	2253      	movs	r2, #83	; 0x53
 800a36e:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 800a370:	683a      	ldr	r2, [r7, #0]
 800a372:	2380      	movs	r3, #128	; 0x80
 800a374:	005b      	lsls	r3, r3, #1
 800a376:	429a      	cmp	r2, r3
 800a378:	d132      	bne.n	800a3e0 <HAL_RTC_DeactivateAlarm+0xa8>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	689a      	ldr	r2, [r3, #8]
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	4938      	ldr	r1, [pc, #224]	; (800a468 <HAL_RTC_DeactivateAlarm+0x130>)
 800a386:	400a      	ands	r2, r1
 800a388:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	689a      	ldr	r2, [r3, #8]
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	4935      	ldr	r1, [pc, #212]	; (800a46c <HAL_RTC_DeactivateAlarm+0x134>)
 800a396:	400a      	ands	r2, r1
 800a398:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 800a39a:	f7fa fd1e 	bl	8004dda <HAL_GetTick>
 800a39e:	0003      	movs	r3, r0
 800a3a0:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800a3a2:	e016      	b.n	800a3d2 <HAL_RTC_DeactivateAlarm+0x9a>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a3a4:	f7fa fd19 	bl	8004dda <HAL_GetTick>
 800a3a8:	0002      	movs	r2, r0
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	1ad2      	subs	r2, r2, r3
 800a3ae:	23fa      	movs	r3, #250	; 0xfa
 800a3b0:	009b      	lsls	r3, r3, #2
 800a3b2:	429a      	cmp	r2, r3
 800a3b4:	d90d      	bls.n	800a3d2 <HAL_RTC_DeactivateAlarm+0x9a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	22ff      	movs	r2, #255	; 0xff
 800a3bc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2221      	movs	r2, #33	; 0x21
 800a3c2:	2103      	movs	r1, #3
 800a3c4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2220      	movs	r2, #32
 800a3ca:	2100      	movs	r1, #0
 800a3cc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a3ce:	2303      	movs	r3, #3
 800a3d0:	e045      	b.n	800a45e <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	68db      	ldr	r3, [r3, #12]
 800a3d8:	2201      	movs	r2, #1
 800a3da:	4013      	ands	r3, r2
 800a3dc:	d0e2      	beq.n	800a3a4 <HAL_RTC_DeactivateAlarm+0x6c>
 800a3de:	e031      	b.n	800a444 <HAL_RTC_DeactivateAlarm+0x10c>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	689a      	ldr	r2, [r3, #8]
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	4921      	ldr	r1, [pc, #132]	; (800a470 <HAL_RTC_DeactivateAlarm+0x138>)
 800a3ec:	400a      	ands	r2, r1
 800a3ee:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	689a      	ldr	r2, [r3, #8]
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	491e      	ldr	r1, [pc, #120]	; (800a474 <HAL_RTC_DeactivateAlarm+0x13c>)
 800a3fc:	400a      	ands	r2, r1
 800a3fe:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 800a400:	f7fa fceb 	bl	8004dda <HAL_GetTick>
 800a404:	0003      	movs	r3, r0
 800a406:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800a408:	e016      	b.n	800a438 <HAL_RTC_DeactivateAlarm+0x100>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a40a:	f7fa fce6 	bl	8004dda <HAL_GetTick>
 800a40e:	0002      	movs	r2, r0
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	1ad2      	subs	r2, r2, r3
 800a414:	23fa      	movs	r3, #250	; 0xfa
 800a416:	009b      	lsls	r3, r3, #2
 800a418:	429a      	cmp	r2, r3
 800a41a:	d90d      	bls.n	800a438 <HAL_RTC_DeactivateAlarm+0x100>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	22ff      	movs	r2, #255	; 0xff
 800a422:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2221      	movs	r2, #33	; 0x21
 800a428:	2103      	movs	r1, #3
 800a42a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2220      	movs	r2, #32
 800a430:	2100      	movs	r1, #0
 800a432:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a434:	2303      	movs	r3, #3
 800a436:	e012      	b.n	800a45e <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	68db      	ldr	r3, [r3, #12]
 800a43e:	2202      	movs	r2, #2
 800a440:	4013      	ands	r3, r2
 800a442:	d0e2      	beq.n	800a40a <HAL_RTC_DeactivateAlarm+0xd2>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	22ff      	movs	r2, #255	; 0xff
 800a44a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2221      	movs	r2, #33	; 0x21
 800a450:	2101      	movs	r1, #1
 800a452:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2220      	movs	r2, #32
 800a458:	2100      	movs	r1, #0
 800a45a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a45c:	2300      	movs	r3, #0
}
 800a45e:	0018      	movs	r0, r3
 800a460:	46bd      	mov	sp, r7
 800a462:	b004      	add	sp, #16
 800a464:	bd80      	pop	{r7, pc}
 800a466:	46c0      	nop			; (mov r8, r8)
 800a468:	fffffeff 	.word	0xfffffeff
 800a46c:	ffffefff 	.word	0xffffefff
 800a470:	fffffdff 	.word	0xfffffdff
 800a474:	ffffdfff 	.word	0xffffdfff

0800a478 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b082      	sub	sp, #8
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	689a      	ldr	r2, [r3, #8]
 800a486:	2380      	movs	r3, #128	; 0x80
 800a488:	015b      	lsls	r3, r3, #5
 800a48a:	4013      	ands	r3, r2
 800a48c:	d014      	beq.n	800a4b8 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	68da      	ldr	r2, [r3, #12]
 800a494:	2380      	movs	r3, #128	; 0x80
 800a496:	005b      	lsls	r3, r3, #1
 800a498:	4013      	ands	r3, r2
 800a49a:	d00d      	beq.n	800a4b8 <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	0018      	movs	r0, r3
 800a4a0:	f7f9 fc8f 	bl	8003dc2 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	68db      	ldr	r3, [r3, #12]
 800a4aa:	22ff      	movs	r2, #255	; 0xff
 800a4ac:	401a      	ands	r2, r3
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	4915      	ldr	r1, [pc, #84]	; (800a508 <HAL_RTC_AlarmIRQHandler+0x90>)
 800a4b4:	430a      	orrs	r2, r1
 800a4b6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	689a      	ldr	r2, [r3, #8]
 800a4be:	2380      	movs	r3, #128	; 0x80
 800a4c0:	019b      	lsls	r3, r3, #6
 800a4c2:	4013      	ands	r3, r2
 800a4c4:	d014      	beq.n	800a4f0 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	68da      	ldr	r2, [r3, #12]
 800a4cc:	2380      	movs	r3, #128	; 0x80
 800a4ce:	009b      	lsls	r3, r3, #2
 800a4d0:	4013      	ands	r3, r2
 800a4d2:	d00d      	beq.n	800a4f0 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	0018      	movs	r0, r3
 800a4d8:	f000 f910 	bl	800a6fc <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	68db      	ldr	r3, [r3, #12]
 800a4e2:	22ff      	movs	r2, #255	; 0xff
 800a4e4:	401a      	ands	r2, r3
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	4908      	ldr	r1, [pc, #32]	; (800a50c <HAL_RTC_AlarmIRQHandler+0x94>)
 800a4ec:	430a      	orrs	r2, r1
 800a4ee:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800a4f0:	4b07      	ldr	r3, [pc, #28]	; (800a510 <HAL_RTC_AlarmIRQHandler+0x98>)
 800a4f2:	2280      	movs	r2, #128	; 0x80
 800a4f4:	0292      	lsls	r2, r2, #10
 800a4f6:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2221      	movs	r2, #33	; 0x21
 800a4fc:	2101      	movs	r1, #1
 800a4fe:	5499      	strb	r1, [r3, r2]
}
 800a500:	46c0      	nop			; (mov r8, r8)
 800a502:	46bd      	mov	sp, r7
 800a504:	b002      	add	sp, #8
 800a506:	bd80      	pop	{r7, pc}
 800a508:	fffffe7f 	.word	0xfffffe7f
 800a50c:	fffffd7f 	.word	0xfffffd7f
 800a510:	40010400 	.word	0x40010400

0800a514 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b084      	sub	sp, #16
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	68da      	ldr	r2, [r3, #12]
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	21a0      	movs	r1, #160	; 0xa0
 800a528:	438a      	bics	r2, r1
 800a52a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800a52c:	f7fa fc55 	bl	8004dda <HAL_GetTick>
 800a530:	0003      	movs	r3, r0
 800a532:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a534:	e00a      	b.n	800a54c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a536:	f7fa fc50 	bl	8004dda <HAL_GetTick>
 800a53a:	0002      	movs	r2, r0
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	1ad2      	subs	r2, r2, r3
 800a540:	23fa      	movs	r3, #250	; 0xfa
 800a542:	009b      	lsls	r3, r3, #2
 800a544:	429a      	cmp	r2, r3
 800a546:	d901      	bls.n	800a54c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800a548:	2303      	movs	r3, #3
 800a54a:	e006      	b.n	800a55a <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	68db      	ldr	r3, [r3, #12]
 800a552:	2220      	movs	r2, #32
 800a554:	4013      	ands	r3, r2
 800a556:	d0ee      	beq.n	800a536 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 800a558:	2300      	movs	r3, #0
}
 800a55a:	0018      	movs	r0, r3
 800a55c:	46bd      	mov	sp, r7
 800a55e:	b004      	add	sp, #16
 800a560:	bd80      	pop	{r7, pc}

0800a562 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a562:	b580      	push	{r7, lr}
 800a564:	b084      	sub	sp, #16
 800a566:	af00      	add	r7, sp, #0
 800a568:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	68db      	ldr	r3, [r3, #12]
 800a570:	2240      	movs	r2, #64	; 0x40
 800a572:	4013      	ands	r3, r2
 800a574:	d11a      	bne.n	800a5ac <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	2201      	movs	r2, #1
 800a57c:	4252      	negs	r2, r2
 800a57e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a580:	f7fa fc2b 	bl	8004dda <HAL_GetTick>
 800a584:	0003      	movs	r3, r0
 800a586:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a588:	e00a      	b.n	800a5a0 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a58a:	f7fa fc26 	bl	8004dda <HAL_GetTick>
 800a58e:	0002      	movs	r2, r0
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	1ad2      	subs	r2, r2, r3
 800a594:	23fa      	movs	r3, #250	; 0xfa
 800a596:	009b      	lsls	r3, r3, #2
 800a598:	429a      	cmp	r2, r3
 800a59a:	d901      	bls.n	800a5a0 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 800a59c:	2303      	movs	r3, #3
 800a59e:	e006      	b.n	800a5ae <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	68db      	ldr	r3, [r3, #12]
 800a5a6:	2240      	movs	r2, #64	; 0x40
 800a5a8:	4013      	ands	r3, r2
 800a5aa:	d0ee      	beq.n	800a58a <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800a5ac:	2300      	movs	r3, #0
}
 800a5ae:	0018      	movs	r0, r3
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	b004      	add	sp, #16
 800a5b4:	bd80      	pop	{r7, pc}

0800a5b6 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a5b6:	b580      	push	{r7, lr}
 800a5b8:	b084      	sub	sp, #16
 800a5ba:	af00      	add	r7, sp, #0
 800a5bc:	0002      	movs	r2, r0
 800a5be:	1dfb      	adds	r3, r7, #7
 800a5c0:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800a5c6:	230b      	movs	r3, #11
 800a5c8:	18fb      	adds	r3, r7, r3
 800a5ca:	1dfa      	adds	r2, r7, #7
 800a5cc:	7812      	ldrb	r2, [r2, #0]
 800a5ce:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 800a5d0:	e008      	b.n	800a5e4 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	3301      	adds	r3, #1
 800a5d6:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800a5d8:	220b      	movs	r2, #11
 800a5da:	18bb      	adds	r3, r7, r2
 800a5dc:	18ba      	adds	r2, r7, r2
 800a5de:	7812      	ldrb	r2, [r2, #0]
 800a5e0:	3a0a      	subs	r2, #10
 800a5e2:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 800a5e4:	210b      	movs	r1, #11
 800a5e6:	187b      	adds	r3, r7, r1
 800a5e8:	781b      	ldrb	r3, [r3, #0]
 800a5ea:	2b09      	cmp	r3, #9
 800a5ec:	d8f1      	bhi.n	800a5d2 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	b2db      	uxtb	r3, r3
 800a5f2:	011b      	lsls	r3, r3, #4
 800a5f4:	b2da      	uxtb	r2, r3
 800a5f6:	187b      	adds	r3, r7, r1
 800a5f8:	781b      	ldrb	r3, [r3, #0]
 800a5fa:	4313      	orrs	r3, r2
 800a5fc:	b2db      	uxtb	r3, r3
}
 800a5fe:	0018      	movs	r0, r3
 800a600:	46bd      	mov	sp, r7
 800a602:	b004      	add	sp, #16
 800a604:	bd80      	pop	{r7, pc}

0800a606 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800a606:	b580      	push	{r7, lr}
 800a608:	b084      	sub	sp, #16
 800a60a:	af00      	add	r7, sp, #0
 800a60c:	0002      	movs	r2, r0
 800a60e:	1dfb      	adds	r3, r7, #7
 800a610:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800a612:	1dfb      	adds	r3, r7, #7
 800a614:	781b      	ldrb	r3, [r3, #0]
 800a616:	091b      	lsrs	r3, r3, #4
 800a618:	b2db      	uxtb	r3, r3
 800a61a:	001a      	movs	r2, r3
 800a61c:	0013      	movs	r3, r2
 800a61e:	009b      	lsls	r3, r3, #2
 800a620:	189b      	adds	r3, r3, r2
 800a622:	005b      	lsls	r3, r3, #1
 800a624:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	b2da      	uxtb	r2, r3
 800a62a:	1dfb      	adds	r3, r7, #7
 800a62c:	781b      	ldrb	r3, [r3, #0]
 800a62e:	210f      	movs	r1, #15
 800a630:	400b      	ands	r3, r1
 800a632:	b2db      	uxtb	r3, r3
 800a634:	18d3      	adds	r3, r2, r3
 800a636:	b2db      	uxtb	r3, r3
}
 800a638:	0018      	movs	r0, r3
 800a63a:	46bd      	mov	sp, r7
 800a63c:	b004      	add	sp, #16
 800a63e:	bd80      	pop	{r7, pc}

0800a640 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b086      	sub	sp, #24
 800a644:	af00      	add	r7, sp, #0
 800a646:	60f8      	str	r0, [r7, #12]
 800a648:	60b9      	str	r1, [r7, #8]
 800a64a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	3350      	adds	r3, #80	; 0x50
 800a652:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	009b      	lsls	r3, r3, #2
 800a658:	697a      	ldr	r2, [r7, #20]
 800a65a:	18d3      	adds	r3, r2, r3
 800a65c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800a65e:	697b      	ldr	r3, [r7, #20]
 800a660:	687a      	ldr	r2, [r7, #4]
 800a662:	601a      	str	r2, [r3, #0]
}
 800a664:	46c0      	nop			; (mov r8, r8)
 800a666:	46bd      	mov	sp, r7
 800a668:	b006      	add	sp, #24
 800a66a:	bd80      	pop	{r7, pc}

0800a66c <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b084      	sub	sp, #16
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	6039      	str	r1, [r7, #0]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	3350      	adds	r3, #80	; 0x50
 800a67c:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	009b      	lsls	r3, r3, #2
 800a682:	68fa      	ldr	r2, [r7, #12]
 800a684:	18d3      	adds	r3, r2, r3
 800a686:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	681b      	ldr	r3, [r3, #0]
}
 800a68c:	0018      	movs	r0, r3
 800a68e:	46bd      	mov	sp, r7
 800a690:	b004      	add	sp, #16
 800a692:	bd80      	pop	{r7, pc}

0800a694 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b082      	sub	sp, #8
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2220      	movs	r2, #32
 800a6a0:	5c9b      	ldrb	r3, [r3, r2]
 800a6a2:	2b01      	cmp	r3, #1
 800a6a4:	d101      	bne.n	800a6aa <HAL_RTCEx_EnableBypassShadow+0x16>
 800a6a6:	2302      	movs	r3, #2
 800a6a8:	e024      	b.n	800a6f4 <HAL_RTCEx_EnableBypassShadow+0x60>
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2220      	movs	r2, #32
 800a6ae:	2101      	movs	r1, #1
 800a6b0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2221      	movs	r2, #33	; 0x21
 800a6b6:	2102      	movs	r1, #2
 800a6b8:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	22ca      	movs	r2, #202	; 0xca
 800a6c0:	625a      	str	r2, [r3, #36]	; 0x24
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	2253      	movs	r2, #83	; 0x53
 800a6c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	689a      	ldr	r2, [r3, #8]
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	2120      	movs	r1, #32
 800a6d6:	430a      	orrs	r2, r1
 800a6d8:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	22ff      	movs	r2, #255	; 0xff
 800a6e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2221      	movs	r2, #33	; 0x21
 800a6e6:	2101      	movs	r1, #1
 800a6e8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2220      	movs	r2, #32
 800a6ee:	2100      	movs	r1, #0
 800a6f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a6f2:	2300      	movs	r3, #0
}
 800a6f4:	0018      	movs	r0, r3
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	b002      	add	sp, #8
 800a6fa:	bd80      	pop	{r7, pc}

0800a6fc <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b082      	sub	sp, #8
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800a704:	46c0      	nop			; (mov r8, r8)
 800a706:	46bd      	mov	sp, r7
 800a708:	b002      	add	sp, #8
 800a70a:	bd80      	pop	{r7, pc}

0800a70c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b082      	sub	sp, #8
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d101      	bne.n	800a71e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a71a:	2301      	movs	r3, #1
 800a71c:	e083      	b.n	800a826 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a722:	2b00      	cmp	r3, #0
 800a724:	d109      	bne.n	800a73a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	685a      	ldr	r2, [r3, #4]
 800a72a:	2382      	movs	r3, #130	; 0x82
 800a72c:	005b      	lsls	r3, r3, #1
 800a72e:	429a      	cmp	r2, r3
 800a730:	d009      	beq.n	800a746 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2200      	movs	r2, #0
 800a736:	61da      	str	r2, [r3, #28]
 800a738:	e005      	b.n	800a746 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2200      	movs	r2, #0
 800a73e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2200      	movs	r2, #0
 800a744:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2200      	movs	r2, #0
 800a74a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2251      	movs	r2, #81	; 0x51
 800a750:	5c9b      	ldrb	r3, [r3, r2]
 800a752:	b2db      	uxtb	r3, r3
 800a754:	2b00      	cmp	r3, #0
 800a756:	d107      	bne.n	800a768 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2250      	movs	r2, #80	; 0x50
 800a75c:	2100      	movs	r1, #0
 800a75e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	0018      	movs	r0, r3
 800a764:	f000 f866 	bl	800a834 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2251      	movs	r2, #81	; 0x51
 800a76c:	2102      	movs	r1, #2
 800a76e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	681a      	ldr	r2, [r3, #0]
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	2140      	movs	r1, #64	; 0x40
 800a77c:	438a      	bics	r2, r1
 800a77e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	685a      	ldr	r2, [r3, #4]
 800a784:	2382      	movs	r3, #130	; 0x82
 800a786:	005b      	lsls	r3, r3, #1
 800a788:	401a      	ands	r2, r3
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6899      	ldr	r1, [r3, #8]
 800a78e:	2384      	movs	r3, #132	; 0x84
 800a790:	021b      	lsls	r3, r3, #8
 800a792:	400b      	ands	r3, r1
 800a794:	431a      	orrs	r2, r3
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	68d9      	ldr	r1, [r3, #12]
 800a79a:	2380      	movs	r3, #128	; 0x80
 800a79c:	011b      	lsls	r3, r3, #4
 800a79e:	400b      	ands	r3, r1
 800a7a0:	431a      	orrs	r2, r3
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	691b      	ldr	r3, [r3, #16]
 800a7a6:	2102      	movs	r1, #2
 800a7a8:	400b      	ands	r3, r1
 800a7aa:	431a      	orrs	r2, r3
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	695b      	ldr	r3, [r3, #20]
 800a7b0:	2101      	movs	r1, #1
 800a7b2:	400b      	ands	r3, r1
 800a7b4:	431a      	orrs	r2, r3
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6999      	ldr	r1, [r3, #24]
 800a7ba:	2380      	movs	r3, #128	; 0x80
 800a7bc:	009b      	lsls	r3, r3, #2
 800a7be:	400b      	ands	r3, r1
 800a7c0:	431a      	orrs	r2, r3
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	69db      	ldr	r3, [r3, #28]
 800a7c6:	2138      	movs	r1, #56	; 0x38
 800a7c8:	400b      	ands	r3, r1
 800a7ca:	431a      	orrs	r2, r3
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6a1b      	ldr	r3, [r3, #32]
 800a7d0:	2180      	movs	r1, #128	; 0x80
 800a7d2:	400b      	ands	r3, r1
 800a7d4:	431a      	orrs	r2, r3
 800a7d6:	0011      	movs	r1, r2
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a7dc:	2380      	movs	r3, #128	; 0x80
 800a7de:	019b      	lsls	r3, r3, #6
 800a7e0:	401a      	ands	r2, r3
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	430a      	orrs	r2, r1
 800a7e8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	699b      	ldr	r3, [r3, #24]
 800a7ee:	0c1b      	lsrs	r3, r3, #16
 800a7f0:	2204      	movs	r2, #4
 800a7f2:	4013      	ands	r3, r2
 800a7f4:	0019      	movs	r1, r3
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7fa:	2210      	movs	r2, #16
 800a7fc:	401a      	ands	r2, r3
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	430a      	orrs	r2, r1
 800a804:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	69da      	ldr	r2, [r3, #28]
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	4907      	ldr	r1, [pc, #28]	; (800a830 <HAL_SPI_Init+0x124>)
 800a812:	400a      	ands	r2, r1
 800a814:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2200      	movs	r2, #0
 800a81a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2251      	movs	r2, #81	; 0x51
 800a820:	2101      	movs	r1, #1
 800a822:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a824:	2300      	movs	r3, #0
}
 800a826:	0018      	movs	r0, r3
 800a828:	46bd      	mov	sp, r7
 800a82a:	b002      	add	sp, #8
 800a82c:	bd80      	pop	{r7, pc}
 800a82e:	46c0      	nop			; (mov r8, r8)
 800a830:	fffff7ff 	.word	0xfffff7ff

0800a834 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b082      	sub	sp, #8
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800a83c:	46c0      	nop			; (mov r8, r8)
 800a83e:	46bd      	mov	sp, r7
 800a840:	b002      	add	sp, #8
 800a842:	bd80      	pop	{r7, pc}

0800a844 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b08c      	sub	sp, #48	; 0x30
 800a848:	af00      	add	r7, sp, #0
 800a84a:	60f8      	str	r0, [r7, #12]
 800a84c:	60b9      	str	r1, [r7, #8]
 800a84e:	607a      	str	r2, [r7, #4]
 800a850:	001a      	movs	r2, r3
 800a852:	1cbb      	adds	r3, r7, #2
 800a854:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a856:	2301      	movs	r3, #1
 800a858:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a85a:	232b      	movs	r3, #43	; 0x2b
 800a85c:	18fb      	adds	r3, r7, r3
 800a85e:	2200      	movs	r2, #0
 800a860:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	2250      	movs	r2, #80	; 0x50
 800a866:	5c9b      	ldrb	r3, [r3, r2]
 800a868:	2b01      	cmp	r3, #1
 800a86a:	d101      	bne.n	800a870 <HAL_SPI_TransmitReceive+0x2c>
 800a86c:	2302      	movs	r3, #2
 800a86e:	e1a0      	b.n	800abb2 <HAL_SPI_TransmitReceive+0x36e>
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	2250      	movs	r2, #80	; 0x50
 800a874:	2101      	movs	r1, #1
 800a876:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a878:	f7fa faaf 	bl	8004dda <HAL_GetTick>
 800a87c:	0003      	movs	r3, r0
 800a87e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a880:	2023      	movs	r0, #35	; 0x23
 800a882:	183b      	adds	r3, r7, r0
 800a884:	68fa      	ldr	r2, [r7, #12]
 800a886:	2151      	movs	r1, #81	; 0x51
 800a888:	5c52      	ldrb	r2, [r2, r1]
 800a88a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	685b      	ldr	r3, [r3, #4]
 800a890:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a892:	231a      	movs	r3, #26
 800a894:	18fb      	adds	r3, r7, r3
 800a896:	1cba      	adds	r2, r7, #2
 800a898:	8812      	ldrh	r2, [r2, #0]
 800a89a:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a89c:	183b      	adds	r3, r7, r0
 800a89e:	781b      	ldrb	r3, [r3, #0]
 800a8a0:	2b01      	cmp	r3, #1
 800a8a2:	d011      	beq.n	800a8c8 <HAL_SPI_TransmitReceive+0x84>
 800a8a4:	69fa      	ldr	r2, [r7, #28]
 800a8a6:	2382      	movs	r3, #130	; 0x82
 800a8a8:	005b      	lsls	r3, r3, #1
 800a8aa:	429a      	cmp	r2, r3
 800a8ac:	d107      	bne.n	800a8be <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	689b      	ldr	r3, [r3, #8]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d103      	bne.n	800a8be <HAL_SPI_TransmitReceive+0x7a>
 800a8b6:	183b      	adds	r3, r7, r0
 800a8b8:	781b      	ldrb	r3, [r3, #0]
 800a8ba:	2b04      	cmp	r3, #4
 800a8bc:	d004      	beq.n	800a8c8 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800a8be:	232b      	movs	r3, #43	; 0x2b
 800a8c0:	18fb      	adds	r3, r7, r3
 800a8c2:	2202      	movs	r2, #2
 800a8c4:	701a      	strb	r2, [r3, #0]
    goto error;
 800a8c6:	e169      	b.n	800ab9c <HAL_SPI_TransmitReceive+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d006      	beq.n	800a8dc <HAL_SPI_TransmitReceive+0x98>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d003      	beq.n	800a8dc <HAL_SPI_TransmitReceive+0x98>
 800a8d4:	1cbb      	adds	r3, r7, #2
 800a8d6:	881b      	ldrh	r3, [r3, #0]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d104      	bne.n	800a8e6 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800a8dc:	232b      	movs	r3, #43	; 0x2b
 800a8de:	18fb      	adds	r3, r7, r3
 800a8e0:	2201      	movs	r2, #1
 800a8e2:	701a      	strb	r2, [r3, #0]
    goto error;
 800a8e4:	e15a      	b.n	800ab9c <HAL_SPI_TransmitReceive+0x358>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	2251      	movs	r2, #81	; 0x51
 800a8ea:	5c9b      	ldrb	r3, [r3, r2]
 800a8ec:	b2db      	uxtb	r3, r3
 800a8ee:	2b04      	cmp	r3, #4
 800a8f0:	d003      	beq.n	800a8fa <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	2251      	movs	r2, #81	; 0x51
 800a8f6:	2105      	movs	r1, #5
 800a8f8:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	687a      	ldr	r2, [r7, #4]
 800a904:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	1cba      	adds	r2, r7, #2
 800a90a:	8812      	ldrh	r2, [r2, #0]
 800a90c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	1cba      	adds	r2, r7, #2
 800a912:	8812      	ldrh	r2, [r2, #0]
 800a914:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	68ba      	ldr	r2, [r7, #8]
 800a91a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	1cba      	adds	r2, r7, #2
 800a920:	8812      	ldrh	r2, [r2, #0]
 800a922:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	1cba      	adds	r2, r7, #2
 800a928:	8812      	ldrh	r2, [r2, #0]
 800a92a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	2200      	movs	r2, #0
 800a930:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	2200      	movs	r2, #0
 800a936:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	2240      	movs	r2, #64	; 0x40
 800a940:	4013      	ands	r3, r2
 800a942:	2b40      	cmp	r3, #64	; 0x40
 800a944:	d007      	beq.n	800a956 <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	681a      	ldr	r2, [r3, #0]
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	2140      	movs	r1, #64	; 0x40
 800a952:	430a      	orrs	r2, r1
 800a954:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	68da      	ldr	r2, [r3, #12]
 800a95a:	2380      	movs	r3, #128	; 0x80
 800a95c:	011b      	lsls	r3, r3, #4
 800a95e:	429a      	cmp	r2, r3
 800a960:	d000      	beq.n	800a964 <HAL_SPI_TransmitReceive+0x120>
 800a962:	e07a      	b.n	800aa5a <HAL_SPI_TransmitReceive+0x216>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	685b      	ldr	r3, [r3, #4]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d004      	beq.n	800a976 <HAL_SPI_TransmitReceive+0x132>
 800a96c:	231a      	movs	r3, #26
 800a96e:	18fb      	adds	r3, r7, r3
 800a970:	881b      	ldrh	r3, [r3, #0]
 800a972:	2b01      	cmp	r3, #1
 800a974:	d166      	bne.n	800aa44 <HAL_SPI_TransmitReceive+0x200>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a97a:	881a      	ldrh	r2, [r3, #0]
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a986:	1c9a      	adds	r2, r3, #2
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a990:	b29b      	uxth	r3, r3
 800a992:	3b01      	subs	r3, #1
 800a994:	b29a      	uxth	r2, r3
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a99a:	e053      	b.n	800aa44 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	689b      	ldr	r3, [r3, #8]
 800a9a2:	2202      	movs	r2, #2
 800a9a4:	4013      	ands	r3, r2
 800a9a6:	2b02      	cmp	r3, #2
 800a9a8:	d11b      	bne.n	800a9e2 <HAL_SPI_TransmitReceive+0x19e>
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a9ae:	b29b      	uxth	r3, r3
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d016      	beq.n	800a9e2 <HAL_SPI_TransmitReceive+0x19e>
 800a9b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9b6:	2b01      	cmp	r3, #1
 800a9b8:	d113      	bne.n	800a9e2 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9be:	881a      	ldrh	r2, [r3, #0]
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9ca:	1c9a      	adds	r2, r3, #2
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a9d4:	b29b      	uxth	r3, r3
 800a9d6:	3b01      	subs	r3, #1
 800a9d8:	b29a      	uxth	r2, r3
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	689b      	ldr	r3, [r3, #8]
 800a9e8:	2201      	movs	r2, #1
 800a9ea:	4013      	ands	r3, r2
 800a9ec:	2b01      	cmp	r3, #1
 800a9ee:	d119      	bne.n	800aa24 <HAL_SPI_TransmitReceive+0x1e0>
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a9f4:	b29b      	uxth	r3, r3
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d014      	beq.n	800aa24 <HAL_SPI_TransmitReceive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	68da      	ldr	r2, [r3, #12]
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa04:	b292      	uxth	r2, r2
 800aa06:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa0c:	1c9a      	adds	r2, r3, #2
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa16:	b29b      	uxth	r3, r3
 800aa18:	3b01      	subs	r3, #1
 800aa1a:	b29a      	uxth	r2, r3
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800aa20:	2301      	movs	r3, #1
 800aa22:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800aa24:	f7fa f9d9 	bl	8004dda <HAL_GetTick>
 800aa28:	0002      	movs	r2, r0
 800aa2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa2c:	1ad3      	subs	r3, r2, r3
 800aa2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa30:	429a      	cmp	r2, r3
 800aa32:	d807      	bhi.n	800aa44 <HAL_SPI_TransmitReceive+0x200>
 800aa34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa36:	3301      	adds	r3, #1
 800aa38:	d004      	beq.n	800aa44 <HAL_SPI_TransmitReceive+0x200>
      {
        errorcode = HAL_TIMEOUT;
 800aa3a:	232b      	movs	r3, #43	; 0x2b
 800aa3c:	18fb      	adds	r3, r7, r3
 800aa3e:	2203      	movs	r2, #3
 800aa40:	701a      	strb	r2, [r3, #0]
        goto error;
 800aa42:	e0ab      	b.n	800ab9c <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aa48:	b29b      	uxth	r3, r3
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d1a6      	bne.n	800a99c <HAL_SPI_TransmitReceive+0x158>
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa52:	b29b      	uxth	r3, r3
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d1a1      	bne.n	800a99c <HAL_SPI_TransmitReceive+0x158>
 800aa58:	e07f      	b.n	800ab5a <HAL_SPI_TransmitReceive+0x316>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	685b      	ldr	r3, [r3, #4]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d005      	beq.n	800aa6e <HAL_SPI_TransmitReceive+0x22a>
 800aa62:	231a      	movs	r3, #26
 800aa64:	18fb      	adds	r3, r7, r3
 800aa66:	881b      	ldrh	r3, [r3, #0]
 800aa68:	2b01      	cmp	r3, #1
 800aa6a:	d000      	beq.n	800aa6e <HAL_SPI_TransmitReceive+0x22a>
 800aa6c:	e06b      	b.n	800ab46 <HAL_SPI_TransmitReceive+0x302>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	330c      	adds	r3, #12
 800aa78:	7812      	ldrb	r2, [r2, #0]
 800aa7a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa80:	1c5a      	adds	r2, r3, #1
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aa8a:	b29b      	uxth	r3, r3
 800aa8c:	3b01      	subs	r3, #1
 800aa8e:	b29a      	uxth	r2, r3
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aa94:	e057      	b.n	800ab46 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	689b      	ldr	r3, [r3, #8]
 800aa9c:	2202      	movs	r2, #2
 800aa9e:	4013      	ands	r3, r2
 800aaa0:	2b02      	cmp	r3, #2
 800aaa2:	d11c      	bne.n	800aade <HAL_SPI_TransmitReceive+0x29a>
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aaa8:	b29b      	uxth	r3, r3
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d017      	beq.n	800aade <HAL_SPI_TransmitReceive+0x29a>
 800aaae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aab0:	2b01      	cmp	r3, #1
 800aab2:	d114      	bne.n	800aade <HAL_SPI_TransmitReceive+0x29a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	330c      	adds	r3, #12
 800aabe:	7812      	ldrb	r2, [r2, #0]
 800aac0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aac6:	1c5a      	adds	r2, r3, #1
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aad0:	b29b      	uxth	r3, r3
 800aad2:	3b01      	subs	r3, #1
 800aad4:	b29a      	uxth	r2, r3
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800aada:	2300      	movs	r3, #0
 800aadc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	689b      	ldr	r3, [r3, #8]
 800aae4:	2201      	movs	r2, #1
 800aae6:	4013      	ands	r3, r2
 800aae8:	2b01      	cmp	r3, #1
 800aaea:	d119      	bne.n	800ab20 <HAL_SPI_TransmitReceive+0x2dc>
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aaf0:	b29b      	uxth	r3, r3
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d014      	beq.n	800ab20 <HAL_SPI_TransmitReceive+0x2dc>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	68da      	ldr	r2, [r3, #12]
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab00:	b2d2      	uxtb	r2, r2
 800ab02:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab08:	1c5a      	adds	r2, r3, #1
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab12:	b29b      	uxth	r3, r3
 800ab14:	3b01      	subs	r3, #1
 800ab16:	b29a      	uxth	r2, r3
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	62fb      	str	r3, [r7, #44]	; 0x2c
       // HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ab20:	f7fa f95b 	bl	8004dda <HAL_GetTick>
 800ab24:	0002      	movs	r2, r0
 800ab26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab28:	1ad3      	subs	r3, r2, r3
 800ab2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ab2c:	429a      	cmp	r2, r3
 800ab2e:	d802      	bhi.n	800ab36 <HAL_SPI_TransmitReceive+0x2f2>
 800ab30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab32:	3301      	adds	r3, #1
 800ab34:	d102      	bne.n	800ab3c <HAL_SPI_TransmitReceive+0x2f8>
 800ab36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d104      	bne.n	800ab46 <HAL_SPI_TransmitReceive+0x302>
      {
        errorcode = HAL_TIMEOUT;
 800ab3c:	232b      	movs	r3, #43	; 0x2b
 800ab3e:	18fb      	adds	r3, r7, r3
 800ab40:	2203      	movs	r2, #3
 800ab42:	701a      	strb	r2, [r3, #0]
        goto error;
 800ab44:	e02a      	b.n	800ab9c <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ab4a:	b29b      	uxth	r3, r3
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d1a2      	bne.n	800aa96 <HAL_SPI_TransmitReceive+0x252>
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab54:	b29b      	uxth	r3, r3
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d19d      	bne.n	800aa96 <HAL_SPI_TransmitReceive+0x252>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ab5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab5c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	0018      	movs	r0, r3
 800ab62:	f000 f8c5 	bl	800acf0 <SPI_EndRxTxTransaction>
 800ab66:	1e03      	subs	r3, r0, #0
 800ab68:	d007      	beq.n	800ab7a <HAL_SPI_TransmitReceive+0x336>
  {
    errorcode = HAL_ERROR;
 800ab6a:	232b      	movs	r3, #43	; 0x2b
 800ab6c:	18fb      	adds	r3, r7, r3
 800ab6e:	2201      	movs	r2, #1
 800ab70:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	2220      	movs	r2, #32
 800ab76:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800ab78:	e010      	b.n	800ab9c <HAL_SPI_TransmitReceive+0x358>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	689b      	ldr	r3, [r3, #8]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d10b      	bne.n	800ab9a <HAL_SPI_TransmitReceive+0x356>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ab82:	2300      	movs	r3, #0
 800ab84:	617b      	str	r3, [r7, #20]
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	68db      	ldr	r3, [r3, #12]
 800ab8c:	617b      	str	r3, [r7, #20]
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	689b      	ldr	r3, [r3, #8]
 800ab94:	617b      	str	r3, [r7, #20]
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	e000      	b.n	800ab9c <HAL_SPI_TransmitReceive+0x358>
  }

error :
 800ab9a:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	2251      	movs	r2, #81	; 0x51
 800aba0:	2101      	movs	r1, #1
 800aba2:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	2250      	movs	r2, #80	; 0x50
 800aba8:	2100      	movs	r1, #0
 800abaa:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800abac:	232b      	movs	r3, #43	; 0x2b
 800abae:	18fb      	adds	r3, r7, r3
 800abb0:	781b      	ldrb	r3, [r3, #0]
}
 800abb2:	0018      	movs	r0, r3
 800abb4:	46bd      	mov	sp, r7
 800abb6:	b00c      	add	sp, #48	; 0x30
 800abb8:	bd80      	pop	{r7, pc}

0800abba <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800abba:	b580      	push	{r7, lr}
 800abbc:	b082      	sub	sp, #8
 800abbe:	af00      	add	r7, sp, #0
 800abc0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2251      	movs	r2, #81	; 0x51
 800abc6:	5c9b      	ldrb	r3, [r3, r2]
 800abc8:	b2db      	uxtb	r3, r3
}
 800abca:	0018      	movs	r0, r3
 800abcc:	46bd      	mov	sp, r7
 800abce:	b002      	add	sp, #8
 800abd0:	bd80      	pop	{r7, pc}
	...

0800abd4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b088      	sub	sp, #32
 800abd8:	af00      	add	r7, sp, #0
 800abda:	60f8      	str	r0, [r7, #12]
 800abdc:	60b9      	str	r1, [r7, #8]
 800abde:	603b      	str	r3, [r7, #0]
 800abe0:	1dfb      	adds	r3, r7, #7
 800abe2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800abe4:	f7fa f8f9 	bl	8004dda <HAL_GetTick>
 800abe8:	0002      	movs	r2, r0
 800abea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abec:	1a9b      	subs	r3, r3, r2
 800abee:	683a      	ldr	r2, [r7, #0]
 800abf0:	18d3      	adds	r3, r2, r3
 800abf2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800abf4:	f7fa f8f1 	bl	8004dda <HAL_GetTick>
 800abf8:	0003      	movs	r3, r0
 800abfa:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800abfc:	4b3a      	ldr	r3, [pc, #232]	; (800ace8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	015b      	lsls	r3, r3, #5
 800ac02:	0d1b      	lsrs	r3, r3, #20
 800ac04:	69fa      	ldr	r2, [r7, #28]
 800ac06:	4353      	muls	r3, r2
 800ac08:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ac0a:	e058      	b.n	800acbe <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	3301      	adds	r3, #1
 800ac10:	d055      	beq.n	800acbe <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ac12:	f7fa f8e2 	bl	8004dda <HAL_GetTick>
 800ac16:	0002      	movs	r2, r0
 800ac18:	69bb      	ldr	r3, [r7, #24]
 800ac1a:	1ad3      	subs	r3, r2, r3
 800ac1c:	69fa      	ldr	r2, [r7, #28]
 800ac1e:	429a      	cmp	r2, r3
 800ac20:	d902      	bls.n	800ac28 <SPI_WaitFlagStateUntilTimeout+0x54>
 800ac22:	69fb      	ldr	r3, [r7, #28]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d142      	bne.n	800acae <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	685a      	ldr	r2, [r3, #4]
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	21e0      	movs	r1, #224	; 0xe0
 800ac34:	438a      	bics	r2, r1
 800ac36:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	685a      	ldr	r2, [r3, #4]
 800ac3c:	2382      	movs	r3, #130	; 0x82
 800ac3e:	005b      	lsls	r3, r3, #1
 800ac40:	429a      	cmp	r2, r3
 800ac42:	d113      	bne.n	800ac6c <SPI_WaitFlagStateUntilTimeout+0x98>
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	689a      	ldr	r2, [r3, #8]
 800ac48:	2380      	movs	r3, #128	; 0x80
 800ac4a:	021b      	lsls	r3, r3, #8
 800ac4c:	429a      	cmp	r2, r3
 800ac4e:	d005      	beq.n	800ac5c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	689a      	ldr	r2, [r3, #8]
 800ac54:	2380      	movs	r3, #128	; 0x80
 800ac56:	00db      	lsls	r3, r3, #3
 800ac58:	429a      	cmp	r2, r3
 800ac5a:	d107      	bne.n	800ac6c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	681a      	ldr	r2, [r3, #0]
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	2140      	movs	r1, #64	; 0x40
 800ac68:	438a      	bics	r2, r1
 800ac6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ac70:	2380      	movs	r3, #128	; 0x80
 800ac72:	019b      	lsls	r3, r3, #6
 800ac74:	429a      	cmp	r2, r3
 800ac76:	d110      	bne.n	800ac9a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	681a      	ldr	r2, [r3, #0]
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	491a      	ldr	r1, [pc, #104]	; (800acec <SPI_WaitFlagStateUntilTimeout+0x118>)
 800ac84:	400a      	ands	r2, r1
 800ac86:	601a      	str	r2, [r3, #0]
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	681a      	ldr	r2, [r3, #0]
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	2180      	movs	r1, #128	; 0x80
 800ac94:	0189      	lsls	r1, r1, #6
 800ac96:	430a      	orrs	r2, r1
 800ac98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	2251      	movs	r2, #81	; 0x51
 800ac9e:	2101      	movs	r1, #1
 800aca0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	2250      	movs	r2, #80	; 0x50
 800aca6:	2100      	movs	r1, #0
 800aca8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800acaa:	2303      	movs	r3, #3
 800acac:	e017      	b.n	800acde <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d101      	bne.n	800acb8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800acb4:	2300      	movs	r3, #0
 800acb6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800acb8:	697b      	ldr	r3, [r7, #20]
 800acba:	3b01      	subs	r3, #1
 800acbc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	689b      	ldr	r3, [r3, #8]
 800acc4:	68ba      	ldr	r2, [r7, #8]
 800acc6:	4013      	ands	r3, r2
 800acc8:	68ba      	ldr	r2, [r7, #8]
 800acca:	1ad3      	subs	r3, r2, r3
 800accc:	425a      	negs	r2, r3
 800acce:	4153      	adcs	r3, r2
 800acd0:	b2db      	uxtb	r3, r3
 800acd2:	001a      	movs	r2, r3
 800acd4:	1dfb      	adds	r3, r7, #7
 800acd6:	781b      	ldrb	r3, [r3, #0]
 800acd8:	429a      	cmp	r2, r3
 800acda:	d197      	bne.n	800ac0c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800acdc:	2300      	movs	r3, #0
}
 800acde:	0018      	movs	r0, r3
 800ace0:	46bd      	mov	sp, r7
 800ace2:	b008      	add	sp, #32
 800ace4:	bd80      	pop	{r7, pc}
 800ace6:	46c0      	nop			; (mov r8, r8)
 800ace8:	20000070 	.word	0x20000070
 800acec:	ffffdfff 	.word	0xffffdfff

0800acf0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b088      	sub	sp, #32
 800acf4:	af02      	add	r7, sp, #8
 800acf6:	60f8      	str	r0, [r7, #12]
 800acf8:	60b9      	str	r1, [r7, #8]
 800acfa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800acfc:	4b1d      	ldr	r3, [pc, #116]	; (800ad74 <SPI_EndRxTxTransaction+0x84>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	491d      	ldr	r1, [pc, #116]	; (800ad78 <SPI_EndRxTxTransaction+0x88>)
 800ad02:	0018      	movs	r0, r3
 800ad04:	f7f5 fa08 	bl	8000118 <__udivsi3>
 800ad08:	0003      	movs	r3, r0
 800ad0a:	001a      	movs	r2, r3
 800ad0c:	0013      	movs	r3, r2
 800ad0e:	015b      	lsls	r3, r3, #5
 800ad10:	1a9b      	subs	r3, r3, r2
 800ad12:	009b      	lsls	r3, r3, #2
 800ad14:	189b      	adds	r3, r3, r2
 800ad16:	00db      	lsls	r3, r3, #3
 800ad18:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	685a      	ldr	r2, [r3, #4]
 800ad1e:	2382      	movs	r3, #130	; 0x82
 800ad20:	005b      	lsls	r3, r3, #1
 800ad22:	429a      	cmp	r2, r3
 800ad24:	d112      	bne.n	800ad4c <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ad26:	68ba      	ldr	r2, [r7, #8]
 800ad28:	68f8      	ldr	r0, [r7, #12]
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	9300      	str	r3, [sp, #0]
 800ad2e:	0013      	movs	r3, r2
 800ad30:	2200      	movs	r2, #0
 800ad32:	2180      	movs	r1, #128	; 0x80
 800ad34:	f7ff ff4e 	bl	800abd4 <SPI_WaitFlagStateUntilTimeout>
 800ad38:	1e03      	subs	r3, r0, #0
 800ad3a:	d016      	beq.n	800ad6a <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad40:	2220      	movs	r2, #32
 800ad42:	431a      	orrs	r2, r3
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800ad48:	2303      	movs	r3, #3
 800ad4a:	e00f      	b.n	800ad6c <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d00a      	beq.n	800ad68 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	3b01      	subs	r3, #1
 800ad56:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	689b      	ldr	r3, [r3, #8]
 800ad5e:	2280      	movs	r2, #128	; 0x80
 800ad60:	4013      	ands	r3, r2
 800ad62:	2b80      	cmp	r3, #128	; 0x80
 800ad64:	d0f2      	beq.n	800ad4c <SPI_EndRxTxTransaction+0x5c>
 800ad66:	e000      	b.n	800ad6a <SPI_EndRxTxTransaction+0x7a>
        break;
 800ad68:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 800ad6a:	2300      	movs	r3, #0
}
 800ad6c:	0018      	movs	r0, r3
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	b006      	add	sp, #24
 800ad72:	bd80      	pop	{r7, pc}
 800ad74:	20000070 	.word	0x20000070
 800ad78:	016e3600 	.word	0x016e3600

0800ad7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b082      	sub	sp, #8
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d101      	bne.n	800ad8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	e044      	b.n	800ae18 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d107      	bne.n	800ada6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2274      	movs	r2, #116	; 0x74
 800ad9a:	2100      	movs	r1, #0
 800ad9c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	0018      	movs	r0, r3
 800ada2:	f7fa f901 	bl	8004fa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2224      	movs	r2, #36	; 0x24
 800adaa:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	681a      	ldr	r2, [r3, #0]
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	2101      	movs	r1, #1
 800adb8:	438a      	bics	r2, r1
 800adba:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	0018      	movs	r0, r3
 800adc0:	f000 fb3a 	bl	800b438 <UART_SetConfig>
 800adc4:	0003      	movs	r3, r0
 800adc6:	2b01      	cmp	r3, #1
 800adc8:	d101      	bne.n	800adce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800adca:	2301      	movs	r3, #1
 800adcc:	e024      	b.n	800ae18 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add2:	2b00      	cmp	r3, #0
 800add4:	d003      	beq.n	800adde <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	0018      	movs	r0, r3
 800adda:	f000 fdeb 	bl	800b9b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	685a      	ldr	r2, [r3, #4]
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	490d      	ldr	r1, [pc, #52]	; (800ae20 <HAL_UART_Init+0xa4>)
 800adea:	400a      	ands	r2, r1
 800adec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	689a      	ldr	r2, [r3, #8]
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	212a      	movs	r1, #42	; 0x2a
 800adfa:	438a      	bics	r2, r1
 800adfc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	681a      	ldr	r2, [r3, #0]
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	2101      	movs	r1, #1
 800ae0a:	430a      	orrs	r2, r1
 800ae0c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	0018      	movs	r0, r3
 800ae12:	f000 fe83 	bl	800bb1c <UART_CheckIdleState>
 800ae16:	0003      	movs	r3, r0
}
 800ae18:	0018      	movs	r0, r3
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	b002      	add	sp, #8
 800ae1e:	bd80      	pop	{r7, pc}
 800ae20:	ffffb7ff 	.word	0xffffb7ff

0800ae24 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b084      	sub	sp, #16
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	60f8      	str	r0, [r7, #12]
 800ae2c:	60b9      	str	r1, [r7, #8]
 800ae2e:	1dbb      	adds	r3, r7, #6
 800ae30:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae36:	2b20      	cmp	r3, #32
 800ae38:	d144      	bne.n	800aec4 <HAL_UART_Receive_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d003      	beq.n	800ae48 <HAL_UART_Receive_IT+0x24>
 800ae40:	1dbb      	adds	r3, r7, #6
 800ae42:	881b      	ldrh	r3, [r3, #0]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d101      	bne.n	800ae4c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800ae48:	2301      	movs	r3, #1
 800ae4a:	e03c      	b.n	800aec6 <HAL_UART_Receive_IT+0xa2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	689a      	ldr	r2, [r3, #8]
 800ae50:	2380      	movs	r3, #128	; 0x80
 800ae52:	015b      	lsls	r3, r3, #5
 800ae54:	429a      	cmp	r2, r3
 800ae56:	d109      	bne.n	800ae6c <HAL_UART_Receive_IT+0x48>
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	691b      	ldr	r3, [r3, #16]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d105      	bne.n	800ae6c <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	2201      	movs	r2, #1
 800ae64:	4013      	ands	r3, r2
 800ae66:	d001      	beq.n	800ae6c <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 800ae68:	2301      	movs	r3, #1
 800ae6a:	e02c      	b.n	800aec6 <HAL_UART_Receive_IT+0xa2>
      }
    }

    __HAL_LOCK(huart);
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	2274      	movs	r2, #116	; 0x74
 800ae70:	5c9b      	ldrb	r3, [r3, r2]
 800ae72:	2b01      	cmp	r3, #1
 800ae74:	d101      	bne.n	800ae7a <HAL_UART_Receive_IT+0x56>
 800ae76:	2302      	movs	r3, #2
 800ae78:	e025      	b.n	800aec6 <HAL_UART_Receive_IT+0xa2>
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	2274      	movs	r2, #116	; 0x74
 800ae7e:	2101      	movs	r1, #1
 800ae80:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	2200      	movs	r2, #0
 800ae86:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	4a10      	ldr	r2, [pc, #64]	; (800aed0 <HAL_UART_Receive_IT+0xac>)
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	d00f      	beq.n	800aeb2 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	685a      	ldr	r2, [r3, #4]
 800ae98:	2380      	movs	r3, #128	; 0x80
 800ae9a:	041b      	lsls	r3, r3, #16
 800ae9c:	4013      	ands	r3, r2
 800ae9e:	d008      	beq.n	800aeb2 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	681a      	ldr	r2, [r3, #0]
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	2180      	movs	r1, #128	; 0x80
 800aeac:	04c9      	lsls	r1, r1, #19
 800aeae:	430a      	orrs	r2, r1
 800aeb0:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 800aeb2:	1dbb      	adds	r3, r7, #6
 800aeb4:	881a      	ldrh	r2, [r3, #0]
 800aeb6:	68b9      	ldr	r1, [r7, #8]
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	0018      	movs	r0, r3
 800aebc:	f000 fef4 	bl	800bca8 <UART_Start_Receive_IT>
 800aec0:	0003      	movs	r3, r0
 800aec2:	e000      	b.n	800aec6 <HAL_UART_Receive_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 800aec4:	2302      	movs	r3, #2
  }
}
 800aec6:	0018      	movs	r0, r3
 800aec8:	46bd      	mov	sp, r7
 800aeca:	b004      	add	sp, #16
 800aecc:	bd80      	pop	{r7, pc}
 800aece:	46c0      	nop			; (mov r8, r8)
 800aed0:	40004800 	.word	0x40004800

0800aed4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b084      	sub	sp, #16
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	60f8      	str	r0, [r7, #12]
 800aedc:	60b9      	str	r1, [r7, #8]
 800aede:	1dbb      	adds	r3, r7, #6
 800aee0:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aee6:	2b20      	cmp	r3, #32
 800aee8:	d000      	beq.n	800aeec <HAL_UART_Transmit_DMA+0x18>
 800aeea:	e079      	b.n	800afe0 <HAL_UART_Transmit_DMA+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d003      	beq.n	800aefa <HAL_UART_Transmit_DMA+0x26>
 800aef2:	1dbb      	adds	r3, r7, #6
 800aef4:	881b      	ldrh	r3, [r3, #0]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d101      	bne.n	800aefe <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800aefa:	2301      	movs	r3, #1
 800aefc:	e071      	b.n	800afe2 <HAL_UART_Transmit_DMA+0x10e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	689a      	ldr	r2, [r3, #8]
 800af02:	2380      	movs	r3, #128	; 0x80
 800af04:	015b      	lsls	r3, r3, #5
 800af06:	429a      	cmp	r2, r3
 800af08:	d109      	bne.n	800af1e <HAL_UART_Transmit_DMA+0x4a>
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	691b      	ldr	r3, [r3, #16]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d105      	bne.n	800af1e <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	2201      	movs	r2, #1
 800af16:	4013      	ands	r3, r2
 800af18:	d001      	beq.n	800af1e <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 800af1a:	2301      	movs	r3, #1
 800af1c:	e061      	b.n	800afe2 <HAL_UART_Transmit_DMA+0x10e>
      }
    }

    __HAL_LOCK(huart);
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	2274      	movs	r2, #116	; 0x74
 800af22:	5c9b      	ldrb	r3, [r3, r2]
 800af24:	2b01      	cmp	r3, #1
 800af26:	d101      	bne.n	800af2c <HAL_UART_Transmit_DMA+0x58>
 800af28:	2302      	movs	r3, #2
 800af2a:	e05a      	b.n	800afe2 <HAL_UART_Transmit_DMA+0x10e>
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	2274      	movs	r2, #116	; 0x74
 800af30:	2101      	movs	r1, #1
 800af32:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	68ba      	ldr	r2, [r7, #8]
 800af38:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	1dba      	adds	r2, r7, #6
 800af3e:	2150      	movs	r1, #80	; 0x50
 800af40:	8812      	ldrh	r2, [r2, #0]
 800af42:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	1dba      	adds	r2, r7, #6
 800af48:	2152      	movs	r1, #82	; 0x52
 800af4a:	8812      	ldrh	r2, [r2, #0]
 800af4c:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	2280      	movs	r2, #128	; 0x80
 800af52:	2100      	movs	r1, #0
 800af54:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	2221      	movs	r2, #33	; 0x21
 800af5a:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af60:	2b00      	cmp	r3, #0
 800af62:	d02b      	beq.n	800afbc <HAL_UART_Transmit_DMA+0xe8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af68:	4a20      	ldr	r2, [pc, #128]	; (800afec <HAL_UART_Transmit_DMA+0x118>)
 800af6a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af70:	4a1f      	ldr	r2, [pc, #124]	; (800aff0 <HAL_UART_Transmit_DMA+0x11c>)
 800af72:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af78:	4a1e      	ldr	r2, [pc, #120]	; (800aff4 <HAL_UART_Transmit_DMA+0x120>)
 800af7a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af80:	2200      	movs	r2, #0
 800af82:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af8c:	0019      	movs	r1, r3
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	3328      	adds	r3, #40	; 0x28
 800af94:	001a      	movs	r2, r3
 800af96:	1dbb      	adds	r3, r7, #6
 800af98:	881b      	ldrh	r3, [r3, #0]
 800af9a:	f7fc f915 	bl	80071c8 <HAL_DMA_Start_IT>
 800af9e:	1e03      	subs	r3, r0, #0
 800afa0:	d00c      	beq.n	800afbc <HAL_UART_Transmit_DMA+0xe8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	2280      	movs	r2, #128	; 0x80
 800afa6:	2110      	movs	r1, #16
 800afa8:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	2274      	movs	r2, #116	; 0x74
 800afae:	2100      	movs	r1, #0
 800afb0:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	2220      	movs	r2, #32
 800afb6:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 800afb8:	2301      	movs	r3, #1
 800afba:	e012      	b.n	800afe2 <HAL_UART_Transmit_DMA+0x10e>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	2240      	movs	r2, #64	; 0x40
 800afc2:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	2274      	movs	r2, #116	; 0x74
 800afc8:	2100      	movs	r1, #0
 800afca:	5499      	strb	r1, [r3, r2]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	689a      	ldr	r2, [r3, #8]
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	2180      	movs	r1, #128	; 0x80
 800afd8:	430a      	orrs	r2, r1
 800afda:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800afdc:	2300      	movs	r3, #0
 800afde:	e000      	b.n	800afe2 <HAL_UART_Transmit_DMA+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800afe0:	2302      	movs	r3, #2
  }
}
 800afe2:	0018      	movs	r0, r3
 800afe4:	46bd      	mov	sp, r7
 800afe6:	b004      	add	sp, #16
 800afe8:	bd80      	pop	{r7, pc}
 800afea:	46c0      	nop			; (mov r8, r8)
 800afec:	0800be4d 	.word	0x0800be4d
 800aff0:	0800bea1 	.word	0x0800bea1
 800aff4:	0800bebf 	.word	0x0800bebf

0800aff8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b088      	sub	sp, #32
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	69db      	ldr	r3, [r3, #28]
 800b006:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	689b      	ldr	r3, [r3, #8]
 800b016:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b018:	69fb      	ldr	r3, [r7, #28]
 800b01a:	4ab5      	ldr	r2, [pc, #724]	; (800b2f0 <HAL_UART_IRQHandler+0x2f8>)
 800b01c:	4013      	ands	r3, r2
 800b01e:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800b020:	693b      	ldr	r3, [r7, #16]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d112      	bne.n	800b04c <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800b026:	69fb      	ldr	r3, [r7, #28]
 800b028:	2220      	movs	r2, #32
 800b02a:	4013      	ands	r3, r2
 800b02c:	d00e      	beq.n	800b04c <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b02e:	69bb      	ldr	r3, [r7, #24]
 800b030:	2220      	movs	r2, #32
 800b032:	4013      	ands	r3, r2
 800b034:	d00a      	beq.n	800b04c <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d100      	bne.n	800b040 <HAL_UART_IRQHandler+0x48>
 800b03e:	e1d1      	b.n	800b3e4 <HAL_UART_IRQHandler+0x3ec>
      {
        huart->RxISR(huart);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b044:	687a      	ldr	r2, [r7, #4]
 800b046:	0010      	movs	r0, r2
 800b048:	4798      	blx	r3
      }
      return;
 800b04a:	e1cb      	b.n	800b3e4 <HAL_UART_IRQHandler+0x3ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b04c:	693b      	ldr	r3, [r7, #16]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d100      	bne.n	800b054 <HAL_UART_IRQHandler+0x5c>
 800b052:	e0d9      	b.n	800b208 <HAL_UART_IRQHandler+0x210>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800b054:	697b      	ldr	r3, [r7, #20]
 800b056:	2201      	movs	r2, #1
 800b058:	4013      	ands	r3, r2
 800b05a:	d104      	bne.n	800b066 <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800b05c:	69bb      	ldr	r3, [r7, #24]
 800b05e:	4aa5      	ldr	r2, [pc, #660]	; (800b2f4 <HAL_UART_IRQHandler+0x2fc>)
 800b060:	4013      	ands	r3, r2
 800b062:	d100      	bne.n	800b066 <HAL_UART_IRQHandler+0x6e>
 800b064:	e0d0      	b.n	800b208 <HAL_UART_IRQHandler+0x210>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b066:	69fb      	ldr	r3, [r7, #28]
 800b068:	2201      	movs	r2, #1
 800b06a:	4013      	ands	r3, r2
 800b06c:	d010      	beq.n	800b090 <HAL_UART_IRQHandler+0x98>
 800b06e:	69ba      	ldr	r2, [r7, #24]
 800b070:	2380      	movs	r3, #128	; 0x80
 800b072:	005b      	lsls	r3, r3, #1
 800b074:	4013      	ands	r3, r2
 800b076:	d00b      	beq.n	800b090 <HAL_UART_IRQHandler+0x98>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	2201      	movs	r2, #1
 800b07e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2280      	movs	r2, #128	; 0x80
 800b084:	589b      	ldr	r3, [r3, r2]
 800b086:	2201      	movs	r2, #1
 800b088:	431a      	orrs	r2, r3
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2180      	movs	r1, #128	; 0x80
 800b08e:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b090:	69fb      	ldr	r3, [r7, #28]
 800b092:	2202      	movs	r2, #2
 800b094:	4013      	ands	r3, r2
 800b096:	d00f      	beq.n	800b0b8 <HAL_UART_IRQHandler+0xc0>
 800b098:	697b      	ldr	r3, [r7, #20]
 800b09a:	2201      	movs	r2, #1
 800b09c:	4013      	ands	r3, r2
 800b09e:	d00b      	beq.n	800b0b8 <HAL_UART_IRQHandler+0xc0>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	2202      	movs	r2, #2
 800b0a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2280      	movs	r2, #128	; 0x80
 800b0ac:	589b      	ldr	r3, [r3, r2]
 800b0ae:	2204      	movs	r2, #4
 800b0b0:	431a      	orrs	r2, r3
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2180      	movs	r1, #128	; 0x80
 800b0b6:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b0b8:	69fb      	ldr	r3, [r7, #28]
 800b0ba:	2204      	movs	r2, #4
 800b0bc:	4013      	ands	r3, r2
 800b0be:	d00f      	beq.n	800b0e0 <HAL_UART_IRQHandler+0xe8>
 800b0c0:	697b      	ldr	r3, [r7, #20]
 800b0c2:	2201      	movs	r2, #1
 800b0c4:	4013      	ands	r3, r2
 800b0c6:	d00b      	beq.n	800b0e0 <HAL_UART_IRQHandler+0xe8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	2204      	movs	r2, #4
 800b0ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2280      	movs	r2, #128	; 0x80
 800b0d4:	589b      	ldr	r3, [r3, r2]
 800b0d6:	2202      	movs	r2, #2
 800b0d8:	431a      	orrs	r2, r3
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2180      	movs	r1, #128	; 0x80
 800b0de:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b0e0:	69fb      	ldr	r3, [r7, #28]
 800b0e2:	2208      	movs	r2, #8
 800b0e4:	4013      	ands	r3, r2
 800b0e6:	d013      	beq.n	800b110 <HAL_UART_IRQHandler+0x118>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b0e8:	69bb      	ldr	r3, [r7, #24]
 800b0ea:	2220      	movs	r2, #32
 800b0ec:	4013      	ands	r3, r2
 800b0ee:	d103      	bne.n	800b0f8 <HAL_UART_IRQHandler+0x100>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800b0f0:	697b      	ldr	r3, [r7, #20]
 800b0f2:	2201      	movs	r2, #1
 800b0f4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b0f6:	d00b      	beq.n	800b110 <HAL_UART_IRQHandler+0x118>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	2208      	movs	r2, #8
 800b0fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2280      	movs	r2, #128	; 0x80
 800b104:	589b      	ldr	r3, [r3, r2]
 800b106:	2208      	movs	r2, #8
 800b108:	431a      	orrs	r2, r3
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2180      	movs	r1, #128	; 0x80
 800b10e:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b110:	69fa      	ldr	r2, [r7, #28]
 800b112:	2380      	movs	r3, #128	; 0x80
 800b114:	011b      	lsls	r3, r3, #4
 800b116:	4013      	ands	r3, r2
 800b118:	d011      	beq.n	800b13e <HAL_UART_IRQHandler+0x146>
 800b11a:	69ba      	ldr	r2, [r7, #24]
 800b11c:	2380      	movs	r3, #128	; 0x80
 800b11e:	04db      	lsls	r3, r3, #19
 800b120:	4013      	ands	r3, r2
 800b122:	d00c      	beq.n	800b13e <HAL_UART_IRQHandler+0x146>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	2280      	movs	r2, #128	; 0x80
 800b12a:	0112      	lsls	r2, r2, #4
 800b12c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2280      	movs	r2, #128	; 0x80
 800b132:	589b      	ldr	r3, [r3, r2]
 800b134:	2220      	movs	r2, #32
 800b136:	431a      	orrs	r2, r3
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2180      	movs	r1, #128	; 0x80
 800b13c:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2280      	movs	r2, #128	; 0x80
 800b142:	589b      	ldr	r3, [r3, r2]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d100      	bne.n	800b14a <HAL_UART_IRQHandler+0x152>
 800b148:	e14e      	b.n	800b3e8 <HAL_UART_IRQHandler+0x3f0>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800b14a:	69fb      	ldr	r3, [r7, #28]
 800b14c:	2220      	movs	r2, #32
 800b14e:	4013      	ands	r3, r2
 800b150:	d00c      	beq.n	800b16c <HAL_UART_IRQHandler+0x174>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b152:	69bb      	ldr	r3, [r7, #24]
 800b154:	2220      	movs	r2, #32
 800b156:	4013      	ands	r3, r2
 800b158:	d008      	beq.n	800b16c <HAL_UART_IRQHandler+0x174>
      {
        if (huart->RxISR != NULL)
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d004      	beq.n	800b16c <HAL_UART_IRQHandler+0x174>
        {
          huart->RxISR(huart);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b166:	687a      	ldr	r2, [r7, #4]
 800b168:	0010      	movs	r0, r2
 800b16a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2280      	movs	r2, #128	; 0x80
 800b170:	589b      	ldr	r3, [r3, r2]
 800b172:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	689b      	ldr	r3, [r3, #8]
 800b17a:	2240      	movs	r2, #64	; 0x40
 800b17c:	4013      	ands	r3, r2
 800b17e:	2b40      	cmp	r3, #64	; 0x40
 800b180:	d003      	beq.n	800b18a <HAL_UART_IRQHandler+0x192>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	2228      	movs	r2, #40	; 0x28
 800b186:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b188:	d033      	beq.n	800b1f2 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	0018      	movs	r0, r3
 800b18e:	f000 fe2d 	bl	800bdec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	689b      	ldr	r3, [r3, #8]
 800b198:	2240      	movs	r2, #64	; 0x40
 800b19a:	4013      	ands	r3, r2
 800b19c:	2b40      	cmp	r3, #64	; 0x40
 800b19e:	d123      	bne.n	800b1e8 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	689a      	ldr	r2, [r3, #8]
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	2140      	movs	r1, #64	; 0x40
 800b1ac:	438a      	bics	r2, r1
 800b1ae:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d012      	beq.n	800b1de <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1bc:	4a4e      	ldr	r2, [pc, #312]	; (800b2f8 <HAL_UART_IRQHandler+0x300>)
 800b1be:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1c4:	0018      	movs	r0, r3
 800b1c6:	f7fc f8a5 	bl	8007314 <HAL_DMA_Abort_IT>
 800b1ca:	1e03      	subs	r3, r0, #0
 800b1cc:	d01a      	beq.n	800b204 <HAL_UART_IRQHandler+0x20c>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1d8:	0018      	movs	r0, r3
 800b1da:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1dc:	e012      	b.n	800b204 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	0018      	movs	r0, r3
 800b1e2:	f000 f915 	bl	800b410 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1e6:	e00d      	b.n	800b204 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	0018      	movs	r0, r3
 800b1ec:	f000 f910 	bl	800b410 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1f0:	e008      	b.n	800b204 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	0018      	movs	r0, r3
 800b1f6:	f000 f90b 	bl	800b410 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	2280      	movs	r2, #128	; 0x80
 800b1fe:	2100      	movs	r1, #0
 800b200:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800b202:	e0f1      	b.n	800b3e8 <HAL_UART_IRQHandler+0x3f0>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b204:	46c0      	nop			; (mov r8, r8)
    return;
 800b206:	e0ef      	b.n	800b3e8 <HAL_UART_IRQHandler+0x3f0>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b20c:	2b01      	cmp	r3, #1
 800b20e:	d000      	beq.n	800b212 <HAL_UART_IRQHandler+0x21a>
 800b210:	e0b5      	b.n	800b37e <HAL_UART_IRQHandler+0x386>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800b212:	69fb      	ldr	r3, [r7, #28]
 800b214:	2210      	movs	r2, #16
 800b216:	4013      	ands	r3, r2
 800b218:	d100      	bne.n	800b21c <HAL_UART_IRQHandler+0x224>
 800b21a:	e0b0      	b.n	800b37e <HAL_UART_IRQHandler+0x386>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800b21c:	69bb      	ldr	r3, [r7, #24]
 800b21e:	2210      	movs	r2, #16
 800b220:	4013      	ands	r3, r2
 800b222:	d100      	bne.n	800b226 <HAL_UART_IRQHandler+0x22e>
 800b224:	e0ab      	b.n	800b37e <HAL_UART_IRQHandler+0x386>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	2210      	movs	r2, #16
 800b22c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	689b      	ldr	r3, [r3, #8]
 800b234:	2240      	movs	r2, #64	; 0x40
 800b236:	4013      	ands	r3, r2
 800b238:	2b40      	cmp	r3, #64	; 0x40
 800b23a:	d161      	bne.n	800b300 <HAL_UART_IRQHandler+0x308>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	685a      	ldr	r2, [r3, #4]
 800b244:	2108      	movs	r1, #8
 800b246:	187b      	adds	r3, r7, r1
 800b248:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 800b24a:	187b      	adds	r3, r7, r1
 800b24c:	881b      	ldrh	r3, [r3, #0]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d100      	bne.n	800b254 <HAL_UART_IRQHandler+0x25c>
 800b252:	e0cb      	b.n	800b3ec <HAL_UART_IRQHandler+0x3f4>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2258      	movs	r2, #88	; 0x58
 800b258:	5a9b      	ldrh	r3, [r3, r2]
 800b25a:	187a      	adds	r2, r7, r1
 800b25c:	8812      	ldrh	r2, [r2, #0]
 800b25e:	429a      	cmp	r2, r3
 800b260:	d300      	bcc.n	800b264 <HAL_UART_IRQHandler+0x26c>
 800b262:	e0c3      	b.n	800b3ec <HAL_UART_IRQHandler+0x3f4>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	187a      	adds	r2, r7, r1
 800b268:	215a      	movs	r1, #90	; 0x5a
 800b26a:	8812      	ldrh	r2, [r2, #0]
 800b26c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	2220      	movs	r2, #32
 800b278:	4013      	ands	r3, r2
 800b27a:	d12a      	bne.n	800b2d2 <HAL_UART_IRQHandler+0x2da>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	681a      	ldr	r2, [r3, #0]
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	491d      	ldr	r1, [pc, #116]	; (800b2fc <HAL_UART_IRQHandler+0x304>)
 800b288:	400a      	ands	r2, r1
 800b28a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	689a      	ldr	r2, [r3, #8]
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	2101      	movs	r1, #1
 800b298:	438a      	bics	r2, r1
 800b29a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	689a      	ldr	r2, [r3, #8]
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	2140      	movs	r1, #64	; 0x40
 800b2a8:	438a      	bics	r2, r1
 800b2aa:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2220      	movs	r2, #32
 800b2b0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	681a      	ldr	r2, [r3, #0]
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	2110      	movs	r1, #16
 800b2c4:	438a      	bics	r2, r1
 800b2c6:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2cc:	0018      	movs	r0, r3
 800b2ce:	f7fb ffe1 	bl	8007294 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2258      	movs	r2, #88	; 0x58
 800b2d6:	5a9a      	ldrh	r2, [r3, r2]
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	215a      	movs	r1, #90	; 0x5a
 800b2dc:	5a5b      	ldrh	r3, [r3, r1]
 800b2de:	b29b      	uxth	r3, r3
 800b2e0:	1ad3      	subs	r3, r2, r3
 800b2e2:	b29a      	uxth	r2, r3
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	0011      	movs	r1, r2
 800b2e8:	0018      	movs	r0, r3
 800b2ea:	f000 f899 	bl	800b420 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800b2ee:	e07d      	b.n	800b3ec <HAL_UART_IRQHandler+0x3f4>
 800b2f0:	0000080f 	.word	0x0000080f
 800b2f4:	04000120 	.word	0x04000120
 800b2f8:	0800bf41 	.word	0x0800bf41
 800b2fc:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2258      	movs	r2, #88	; 0x58
 800b304:	5a99      	ldrh	r1, [r3, r2]
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	225a      	movs	r2, #90	; 0x5a
 800b30a:	5a9b      	ldrh	r3, [r3, r2]
 800b30c:	b29a      	uxth	r2, r3
 800b30e:	200a      	movs	r0, #10
 800b310:	183b      	adds	r3, r7, r0
 800b312:	1a8a      	subs	r2, r1, r2
 800b314:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	225a      	movs	r2, #90	; 0x5a
 800b31a:	5a9b      	ldrh	r3, [r3, r2]
 800b31c:	b29b      	uxth	r3, r3
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d100      	bne.n	800b324 <HAL_UART_IRQHandler+0x32c>
 800b322:	e065      	b.n	800b3f0 <HAL_UART_IRQHandler+0x3f8>
          &&(nb_rx_data > 0U) )
 800b324:	183b      	adds	r3, r7, r0
 800b326:	881b      	ldrh	r3, [r3, #0]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d061      	beq.n	800b3f0 <HAL_UART_IRQHandler+0x3f8>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	681a      	ldr	r2, [r3, #0]
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	4931      	ldr	r1, [pc, #196]	; (800b3fc <HAL_UART_IRQHandler+0x404>)
 800b338:	400a      	ands	r2, r1
 800b33a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	689a      	ldr	r2, [r3, #8]
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	2101      	movs	r1, #1
 800b348:	438a      	bics	r2, r1
 800b34a:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2220      	movs	r2, #32
 800b350:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2200      	movs	r2, #0
 800b356:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2200      	movs	r2, #0
 800b35c:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	681a      	ldr	r2, [r3, #0]
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	2110      	movs	r1, #16
 800b36a:	438a      	bics	r2, r1
 800b36c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b36e:	183b      	adds	r3, r7, r0
 800b370:	881a      	ldrh	r2, [r3, #0]
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	0011      	movs	r1, r2
 800b376:	0018      	movs	r0, r3
 800b378:	f000 f852 	bl	800b420 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800b37c:	e038      	b.n	800b3f0 <HAL_UART_IRQHandler+0x3f8>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b37e:	69fa      	ldr	r2, [r7, #28]
 800b380:	2380      	movs	r3, #128	; 0x80
 800b382:	035b      	lsls	r3, r3, #13
 800b384:	4013      	ands	r3, r2
 800b386:	d00e      	beq.n	800b3a6 <HAL_UART_IRQHandler+0x3ae>
 800b388:	697a      	ldr	r2, [r7, #20]
 800b38a:	2380      	movs	r3, #128	; 0x80
 800b38c:	03db      	lsls	r3, r3, #15
 800b38e:	4013      	ands	r3, r2
 800b390:	d009      	beq.n	800b3a6 <HAL_UART_IRQHandler+0x3ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	2280      	movs	r2, #128	; 0x80
 800b398:	0352      	lsls	r2, r2, #13
 800b39a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	0018      	movs	r0, r3
 800b3a0:	f000 fee8 	bl	800c174 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b3a4:	e027      	b.n	800b3f6 <HAL_UART_IRQHandler+0x3fe>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b3a6:	69fb      	ldr	r3, [r7, #28]
 800b3a8:	2280      	movs	r2, #128	; 0x80
 800b3aa:	4013      	ands	r3, r2
 800b3ac:	d00d      	beq.n	800b3ca <HAL_UART_IRQHandler+0x3d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b3ae:	69bb      	ldr	r3, [r7, #24]
 800b3b0:	2280      	movs	r2, #128	; 0x80
 800b3b2:	4013      	ands	r3, r2
 800b3b4:	d009      	beq.n	800b3ca <HAL_UART_IRQHandler+0x3d2>
  {
    if (huart->TxISR != NULL)
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d01a      	beq.n	800b3f4 <HAL_UART_IRQHandler+0x3fc>
    {
      huart->TxISR(huart);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b3c2:	687a      	ldr	r2, [r7, #4]
 800b3c4:	0010      	movs	r0, r2
 800b3c6:	4798      	blx	r3
    }
    return;
 800b3c8:	e014      	b.n	800b3f4 <HAL_UART_IRQHandler+0x3fc>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b3ca:	69fb      	ldr	r3, [r7, #28]
 800b3cc:	2240      	movs	r2, #64	; 0x40
 800b3ce:	4013      	ands	r3, r2
 800b3d0:	d011      	beq.n	800b3f6 <HAL_UART_IRQHandler+0x3fe>
 800b3d2:	69bb      	ldr	r3, [r7, #24]
 800b3d4:	2240      	movs	r2, #64	; 0x40
 800b3d6:	4013      	ands	r3, r2
 800b3d8:	d00d      	beq.n	800b3f6 <HAL_UART_IRQHandler+0x3fe>
  {
    UART_EndTransmit_IT(huart);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	0018      	movs	r0, r3
 800b3de:	f000 fdc6 	bl	800bf6e <UART_EndTransmit_IT>
    return;
 800b3e2:	e008      	b.n	800b3f6 <HAL_UART_IRQHandler+0x3fe>
      return;
 800b3e4:	46c0      	nop			; (mov r8, r8)
 800b3e6:	e006      	b.n	800b3f6 <HAL_UART_IRQHandler+0x3fe>
    return;
 800b3e8:	46c0      	nop			; (mov r8, r8)
 800b3ea:	e004      	b.n	800b3f6 <HAL_UART_IRQHandler+0x3fe>
      return;
 800b3ec:	46c0      	nop			; (mov r8, r8)
 800b3ee:	e002      	b.n	800b3f6 <HAL_UART_IRQHandler+0x3fe>
      return;
 800b3f0:	46c0      	nop			; (mov r8, r8)
 800b3f2:	e000      	b.n	800b3f6 <HAL_UART_IRQHandler+0x3fe>
    return;
 800b3f4:	46c0      	nop			; (mov r8, r8)
  }

}
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	b008      	add	sp, #32
 800b3fa:	bd80      	pop	{r7, pc}
 800b3fc:	fffffedf 	.word	0xfffffedf

0800b400 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b082      	sub	sp, #8
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b408:	46c0      	nop			; (mov r8, r8)
 800b40a:	46bd      	mov	sp, r7
 800b40c:	b002      	add	sp, #8
 800b40e:	bd80      	pop	{r7, pc}

0800b410 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b082      	sub	sp, #8
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b418:	46c0      	nop			; (mov r8, r8)
 800b41a:	46bd      	mov	sp, r7
 800b41c:	b002      	add	sp, #8
 800b41e:	bd80      	pop	{r7, pc}

0800b420 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b082      	sub	sp, #8
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
 800b428:	000a      	movs	r2, r1
 800b42a:	1cbb      	adds	r3, r7, #2
 800b42c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b42e:	46c0      	nop			; (mov r8, r8)
 800b430:	46bd      	mov	sp, r7
 800b432:	b002      	add	sp, #8
 800b434:	bd80      	pop	{r7, pc}
	...

0800b438 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b438:	b5b0      	push	{r4, r5, r7, lr}
 800b43a:	b08e      	sub	sp, #56	; 0x38
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b440:	231a      	movs	r3, #26
 800b442:	2218      	movs	r2, #24
 800b444:	4694      	mov	ip, r2
 800b446:	44bc      	add	ip, r7
 800b448:	4463      	add	r3, ip
 800b44a:	2200      	movs	r2, #0
 800b44c:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b44e:	69fb      	ldr	r3, [r7, #28]
 800b450:	689a      	ldr	r2, [r3, #8]
 800b452:	69fb      	ldr	r3, [r7, #28]
 800b454:	691b      	ldr	r3, [r3, #16]
 800b456:	431a      	orrs	r2, r3
 800b458:	69fb      	ldr	r3, [r7, #28]
 800b45a:	695b      	ldr	r3, [r3, #20]
 800b45c:	431a      	orrs	r2, r3
 800b45e:	69fb      	ldr	r3, [r7, #28]
 800b460:	69db      	ldr	r3, [r3, #28]
 800b462:	4313      	orrs	r3, r2
 800b464:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b466:	69fb      	ldr	r3, [r7, #28]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	4ab0      	ldr	r2, [pc, #704]	; (800b730 <UART_SetConfig+0x2f8>)
 800b46e:	4013      	ands	r3, r2
 800b470:	0019      	movs	r1, r3
 800b472:	69fb      	ldr	r3, [r7, #28]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b478:	430a      	orrs	r2, r1
 800b47a:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b47c:	69fb      	ldr	r3, [r7, #28]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	685b      	ldr	r3, [r3, #4]
 800b482:	4aac      	ldr	r2, [pc, #688]	; (800b734 <UART_SetConfig+0x2fc>)
 800b484:	4013      	ands	r3, r2
 800b486:	0019      	movs	r1, r3
 800b488:	69fb      	ldr	r3, [r7, #28]
 800b48a:	68da      	ldr	r2, [r3, #12]
 800b48c:	69fb      	ldr	r3, [r7, #28]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	430a      	orrs	r2, r1
 800b492:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b494:	69fb      	ldr	r3, [r7, #28]
 800b496:	699b      	ldr	r3, [r3, #24]
 800b498:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b49a:	69fb      	ldr	r3, [r7, #28]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	4aa6      	ldr	r2, [pc, #664]	; (800b738 <UART_SetConfig+0x300>)
 800b4a0:	4293      	cmp	r3, r2
 800b4a2:	d004      	beq.n	800b4ae <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b4a4:	69fb      	ldr	r3, [r7, #28]
 800b4a6:	6a1b      	ldr	r3, [r3, #32]
 800b4a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b4aa:	4313      	orrs	r3, r2
 800b4ac:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b4ae:	69fb      	ldr	r3, [r7, #28]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	689b      	ldr	r3, [r3, #8]
 800b4b4:	4aa1      	ldr	r2, [pc, #644]	; (800b73c <UART_SetConfig+0x304>)
 800b4b6:	4013      	ands	r3, r2
 800b4b8:	0019      	movs	r1, r3
 800b4ba:	69fb      	ldr	r3, [r7, #28]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b4c0:	430a      	orrs	r2, r1
 800b4c2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b4c4:	69fb      	ldr	r3, [r7, #28]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	4a9d      	ldr	r2, [pc, #628]	; (800b740 <UART_SetConfig+0x308>)
 800b4ca:	4293      	cmp	r3, r2
 800b4cc:	d136      	bne.n	800b53c <UART_SetConfig+0x104>
 800b4ce:	4b9d      	ldr	r3, [pc, #628]	; (800b744 <UART_SetConfig+0x30c>)
 800b4d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4d2:	2203      	movs	r2, #3
 800b4d4:	4013      	ands	r3, r2
 800b4d6:	2b03      	cmp	r3, #3
 800b4d8:	d020      	beq.n	800b51c <UART_SetConfig+0xe4>
 800b4da:	d827      	bhi.n	800b52c <UART_SetConfig+0xf4>
 800b4dc:	2b02      	cmp	r3, #2
 800b4de:	d00d      	beq.n	800b4fc <UART_SetConfig+0xc4>
 800b4e0:	d824      	bhi.n	800b52c <UART_SetConfig+0xf4>
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d002      	beq.n	800b4ec <UART_SetConfig+0xb4>
 800b4e6:	2b01      	cmp	r3, #1
 800b4e8:	d010      	beq.n	800b50c <UART_SetConfig+0xd4>
 800b4ea:	e01f      	b.n	800b52c <UART_SetConfig+0xf4>
 800b4ec:	231b      	movs	r3, #27
 800b4ee:	2218      	movs	r2, #24
 800b4f0:	4694      	mov	ip, r2
 800b4f2:	44bc      	add	ip, r7
 800b4f4:	4463      	add	r3, ip
 800b4f6:	2201      	movs	r2, #1
 800b4f8:	701a      	strb	r2, [r3, #0]
 800b4fa:	e0c5      	b.n	800b688 <UART_SetConfig+0x250>
 800b4fc:	231b      	movs	r3, #27
 800b4fe:	2218      	movs	r2, #24
 800b500:	4694      	mov	ip, r2
 800b502:	44bc      	add	ip, r7
 800b504:	4463      	add	r3, ip
 800b506:	2202      	movs	r2, #2
 800b508:	701a      	strb	r2, [r3, #0]
 800b50a:	e0bd      	b.n	800b688 <UART_SetConfig+0x250>
 800b50c:	231b      	movs	r3, #27
 800b50e:	2218      	movs	r2, #24
 800b510:	4694      	mov	ip, r2
 800b512:	44bc      	add	ip, r7
 800b514:	4463      	add	r3, ip
 800b516:	2204      	movs	r2, #4
 800b518:	701a      	strb	r2, [r3, #0]
 800b51a:	e0b5      	b.n	800b688 <UART_SetConfig+0x250>
 800b51c:	231b      	movs	r3, #27
 800b51e:	2218      	movs	r2, #24
 800b520:	4694      	mov	ip, r2
 800b522:	44bc      	add	ip, r7
 800b524:	4463      	add	r3, ip
 800b526:	2208      	movs	r2, #8
 800b528:	701a      	strb	r2, [r3, #0]
 800b52a:	e0ad      	b.n	800b688 <UART_SetConfig+0x250>
 800b52c:	231b      	movs	r3, #27
 800b52e:	2218      	movs	r2, #24
 800b530:	4694      	mov	ip, r2
 800b532:	44bc      	add	ip, r7
 800b534:	4463      	add	r3, ip
 800b536:	2210      	movs	r2, #16
 800b538:	701a      	strb	r2, [r3, #0]
 800b53a:	e0a5      	b.n	800b688 <UART_SetConfig+0x250>
 800b53c:	69fb      	ldr	r3, [r7, #28]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4a81      	ldr	r2, [pc, #516]	; (800b748 <UART_SetConfig+0x310>)
 800b542:	4293      	cmp	r3, r2
 800b544:	d136      	bne.n	800b5b4 <UART_SetConfig+0x17c>
 800b546:	4b7f      	ldr	r3, [pc, #508]	; (800b744 <UART_SetConfig+0x30c>)
 800b548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b54a:	220c      	movs	r2, #12
 800b54c:	4013      	ands	r3, r2
 800b54e:	2b0c      	cmp	r3, #12
 800b550:	d020      	beq.n	800b594 <UART_SetConfig+0x15c>
 800b552:	d827      	bhi.n	800b5a4 <UART_SetConfig+0x16c>
 800b554:	2b08      	cmp	r3, #8
 800b556:	d00d      	beq.n	800b574 <UART_SetConfig+0x13c>
 800b558:	d824      	bhi.n	800b5a4 <UART_SetConfig+0x16c>
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d002      	beq.n	800b564 <UART_SetConfig+0x12c>
 800b55e:	2b04      	cmp	r3, #4
 800b560:	d010      	beq.n	800b584 <UART_SetConfig+0x14c>
 800b562:	e01f      	b.n	800b5a4 <UART_SetConfig+0x16c>
 800b564:	231b      	movs	r3, #27
 800b566:	2218      	movs	r2, #24
 800b568:	4694      	mov	ip, r2
 800b56a:	44bc      	add	ip, r7
 800b56c:	4463      	add	r3, ip
 800b56e:	2200      	movs	r2, #0
 800b570:	701a      	strb	r2, [r3, #0]
 800b572:	e089      	b.n	800b688 <UART_SetConfig+0x250>
 800b574:	231b      	movs	r3, #27
 800b576:	2218      	movs	r2, #24
 800b578:	4694      	mov	ip, r2
 800b57a:	44bc      	add	ip, r7
 800b57c:	4463      	add	r3, ip
 800b57e:	2202      	movs	r2, #2
 800b580:	701a      	strb	r2, [r3, #0]
 800b582:	e081      	b.n	800b688 <UART_SetConfig+0x250>
 800b584:	231b      	movs	r3, #27
 800b586:	2218      	movs	r2, #24
 800b588:	4694      	mov	ip, r2
 800b58a:	44bc      	add	ip, r7
 800b58c:	4463      	add	r3, ip
 800b58e:	2204      	movs	r2, #4
 800b590:	701a      	strb	r2, [r3, #0]
 800b592:	e079      	b.n	800b688 <UART_SetConfig+0x250>
 800b594:	231b      	movs	r3, #27
 800b596:	2218      	movs	r2, #24
 800b598:	4694      	mov	ip, r2
 800b59a:	44bc      	add	ip, r7
 800b59c:	4463      	add	r3, ip
 800b59e:	2208      	movs	r2, #8
 800b5a0:	701a      	strb	r2, [r3, #0]
 800b5a2:	e071      	b.n	800b688 <UART_SetConfig+0x250>
 800b5a4:	231b      	movs	r3, #27
 800b5a6:	2218      	movs	r2, #24
 800b5a8:	4694      	mov	ip, r2
 800b5aa:	44bc      	add	ip, r7
 800b5ac:	4463      	add	r3, ip
 800b5ae:	2210      	movs	r2, #16
 800b5b0:	701a      	strb	r2, [r3, #0]
 800b5b2:	e069      	b.n	800b688 <UART_SetConfig+0x250>
 800b5b4:	69fb      	ldr	r3, [r7, #28]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	4a64      	ldr	r2, [pc, #400]	; (800b74c <UART_SetConfig+0x314>)
 800b5ba:	4293      	cmp	r3, r2
 800b5bc:	d107      	bne.n	800b5ce <UART_SetConfig+0x196>
 800b5be:	231b      	movs	r3, #27
 800b5c0:	2218      	movs	r2, #24
 800b5c2:	4694      	mov	ip, r2
 800b5c4:	44bc      	add	ip, r7
 800b5c6:	4463      	add	r3, ip
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	701a      	strb	r2, [r3, #0]
 800b5cc:	e05c      	b.n	800b688 <UART_SetConfig+0x250>
 800b5ce:	69fb      	ldr	r3, [r7, #28]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	4a5f      	ldr	r2, [pc, #380]	; (800b750 <UART_SetConfig+0x318>)
 800b5d4:	4293      	cmp	r3, r2
 800b5d6:	d107      	bne.n	800b5e8 <UART_SetConfig+0x1b0>
 800b5d8:	231b      	movs	r3, #27
 800b5da:	2218      	movs	r2, #24
 800b5dc:	4694      	mov	ip, r2
 800b5de:	44bc      	add	ip, r7
 800b5e0:	4463      	add	r3, ip
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	701a      	strb	r2, [r3, #0]
 800b5e6:	e04f      	b.n	800b688 <UART_SetConfig+0x250>
 800b5e8:	69fb      	ldr	r3, [r7, #28]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	4a52      	ldr	r2, [pc, #328]	; (800b738 <UART_SetConfig+0x300>)
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	d143      	bne.n	800b67a <UART_SetConfig+0x242>
 800b5f2:	4b54      	ldr	r3, [pc, #336]	; (800b744 <UART_SetConfig+0x30c>)
 800b5f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b5f6:	23c0      	movs	r3, #192	; 0xc0
 800b5f8:	011b      	lsls	r3, r3, #4
 800b5fa:	4013      	ands	r3, r2
 800b5fc:	22c0      	movs	r2, #192	; 0xc0
 800b5fe:	0112      	lsls	r2, r2, #4
 800b600:	4293      	cmp	r3, r2
 800b602:	d02a      	beq.n	800b65a <UART_SetConfig+0x222>
 800b604:	22c0      	movs	r2, #192	; 0xc0
 800b606:	0112      	lsls	r2, r2, #4
 800b608:	4293      	cmp	r3, r2
 800b60a:	d82e      	bhi.n	800b66a <UART_SetConfig+0x232>
 800b60c:	2280      	movs	r2, #128	; 0x80
 800b60e:	0112      	lsls	r2, r2, #4
 800b610:	4293      	cmp	r3, r2
 800b612:	d012      	beq.n	800b63a <UART_SetConfig+0x202>
 800b614:	2280      	movs	r2, #128	; 0x80
 800b616:	0112      	lsls	r2, r2, #4
 800b618:	4293      	cmp	r3, r2
 800b61a:	d826      	bhi.n	800b66a <UART_SetConfig+0x232>
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d004      	beq.n	800b62a <UART_SetConfig+0x1f2>
 800b620:	2280      	movs	r2, #128	; 0x80
 800b622:	00d2      	lsls	r2, r2, #3
 800b624:	4293      	cmp	r3, r2
 800b626:	d010      	beq.n	800b64a <UART_SetConfig+0x212>
 800b628:	e01f      	b.n	800b66a <UART_SetConfig+0x232>
 800b62a:	231b      	movs	r3, #27
 800b62c:	2218      	movs	r2, #24
 800b62e:	4694      	mov	ip, r2
 800b630:	44bc      	add	ip, r7
 800b632:	4463      	add	r3, ip
 800b634:	2200      	movs	r2, #0
 800b636:	701a      	strb	r2, [r3, #0]
 800b638:	e026      	b.n	800b688 <UART_SetConfig+0x250>
 800b63a:	231b      	movs	r3, #27
 800b63c:	2218      	movs	r2, #24
 800b63e:	4694      	mov	ip, r2
 800b640:	44bc      	add	ip, r7
 800b642:	4463      	add	r3, ip
 800b644:	2202      	movs	r2, #2
 800b646:	701a      	strb	r2, [r3, #0]
 800b648:	e01e      	b.n	800b688 <UART_SetConfig+0x250>
 800b64a:	231b      	movs	r3, #27
 800b64c:	2218      	movs	r2, #24
 800b64e:	4694      	mov	ip, r2
 800b650:	44bc      	add	ip, r7
 800b652:	4463      	add	r3, ip
 800b654:	2204      	movs	r2, #4
 800b656:	701a      	strb	r2, [r3, #0]
 800b658:	e016      	b.n	800b688 <UART_SetConfig+0x250>
 800b65a:	231b      	movs	r3, #27
 800b65c:	2218      	movs	r2, #24
 800b65e:	4694      	mov	ip, r2
 800b660:	44bc      	add	ip, r7
 800b662:	4463      	add	r3, ip
 800b664:	2208      	movs	r2, #8
 800b666:	701a      	strb	r2, [r3, #0]
 800b668:	e00e      	b.n	800b688 <UART_SetConfig+0x250>
 800b66a:	231b      	movs	r3, #27
 800b66c:	2218      	movs	r2, #24
 800b66e:	4694      	mov	ip, r2
 800b670:	44bc      	add	ip, r7
 800b672:	4463      	add	r3, ip
 800b674:	2210      	movs	r2, #16
 800b676:	701a      	strb	r2, [r3, #0]
 800b678:	e006      	b.n	800b688 <UART_SetConfig+0x250>
 800b67a:	231b      	movs	r3, #27
 800b67c:	2218      	movs	r2, #24
 800b67e:	4694      	mov	ip, r2
 800b680:	44bc      	add	ip, r7
 800b682:	4463      	add	r3, ip
 800b684:	2210      	movs	r2, #16
 800b686:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b688:	69fb      	ldr	r3, [r7, #28]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	4a2a      	ldr	r2, [pc, #168]	; (800b738 <UART_SetConfig+0x300>)
 800b68e:	4293      	cmp	r3, r2
 800b690:	d000      	beq.n	800b694 <UART_SetConfig+0x25c>
 800b692:	e09e      	b.n	800b7d2 <UART_SetConfig+0x39a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b694:	231b      	movs	r3, #27
 800b696:	2218      	movs	r2, #24
 800b698:	4694      	mov	ip, r2
 800b69a:	44bc      	add	ip, r7
 800b69c:	4463      	add	r3, ip
 800b69e:	781b      	ldrb	r3, [r3, #0]
 800b6a0:	2b08      	cmp	r3, #8
 800b6a2:	d01d      	beq.n	800b6e0 <UART_SetConfig+0x2a8>
 800b6a4:	dc20      	bgt.n	800b6e8 <UART_SetConfig+0x2b0>
 800b6a6:	2b04      	cmp	r3, #4
 800b6a8:	d015      	beq.n	800b6d6 <UART_SetConfig+0x29e>
 800b6aa:	dc1d      	bgt.n	800b6e8 <UART_SetConfig+0x2b0>
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d002      	beq.n	800b6b6 <UART_SetConfig+0x27e>
 800b6b0:	2b02      	cmp	r3, #2
 800b6b2:	d005      	beq.n	800b6c0 <UART_SetConfig+0x288>
 800b6b4:	e018      	b.n	800b6e8 <UART_SetConfig+0x2b0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b6b6:	f7fe f8b7 	bl	8009828 <HAL_RCC_GetPCLK1Freq>
 800b6ba:	0003      	movs	r3, r0
 800b6bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b6be:	e01d      	b.n	800b6fc <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b6c0:	4b20      	ldr	r3, [pc, #128]	; (800b744 <UART_SetConfig+0x30c>)
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	2210      	movs	r2, #16
 800b6c6:	4013      	ands	r3, r2
 800b6c8:	d002      	beq.n	800b6d0 <UART_SetConfig+0x298>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800b6ca:	4b22      	ldr	r3, [pc, #136]	; (800b754 <UART_SetConfig+0x31c>)
 800b6cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b6ce:	e015      	b.n	800b6fc <UART_SetConfig+0x2c4>
          pclk = (uint32_t) HSI_VALUE;
 800b6d0:	4b21      	ldr	r3, [pc, #132]	; (800b758 <UART_SetConfig+0x320>)
 800b6d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b6d4:	e012      	b.n	800b6fc <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b6d6:	f7fd fff7 	bl	80096c8 <HAL_RCC_GetSysClockFreq>
 800b6da:	0003      	movs	r3, r0
 800b6dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b6de:	e00d      	b.n	800b6fc <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b6e0:	2380      	movs	r3, #128	; 0x80
 800b6e2:	021b      	lsls	r3, r3, #8
 800b6e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b6e6:	e009      	b.n	800b6fc <UART_SetConfig+0x2c4>
      default:
        pclk = 0U;
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b6ec:	231a      	movs	r3, #26
 800b6ee:	2218      	movs	r2, #24
 800b6f0:	4694      	mov	ip, r2
 800b6f2:	44bc      	add	ip, r7
 800b6f4:	4463      	add	r3, ip
 800b6f6:	2201      	movs	r2, #1
 800b6f8:	701a      	strb	r2, [r3, #0]
        break;
 800b6fa:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b6fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d100      	bne.n	800b704 <UART_SetConfig+0x2cc>
 800b702:	e13c      	b.n	800b97e <UART_SetConfig+0x546>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b704:	69fb      	ldr	r3, [r7, #28]
 800b706:	685a      	ldr	r2, [r3, #4]
 800b708:	0013      	movs	r3, r2
 800b70a:	005b      	lsls	r3, r3, #1
 800b70c:	189b      	adds	r3, r3, r2
 800b70e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b710:	429a      	cmp	r2, r3
 800b712:	d305      	bcc.n	800b720 <UART_SetConfig+0x2e8>
          (pclk > (4096U * huart->Init.BaudRate)))
 800b714:	69fb      	ldr	r3, [r7, #28]
 800b716:	685b      	ldr	r3, [r3, #4]
 800b718:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b71a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b71c:	429a      	cmp	r2, r3
 800b71e:	d91d      	bls.n	800b75c <UART_SetConfig+0x324>
      {
        ret = HAL_ERROR;
 800b720:	231a      	movs	r3, #26
 800b722:	2218      	movs	r2, #24
 800b724:	4694      	mov	ip, r2
 800b726:	44bc      	add	ip, r7
 800b728:	4463      	add	r3, ip
 800b72a:	2201      	movs	r2, #1
 800b72c:	701a      	strb	r2, [r3, #0]
 800b72e:	e126      	b.n	800b97e <UART_SetConfig+0x546>
 800b730:	efff69f3 	.word	0xefff69f3
 800b734:	ffffcfff 	.word	0xffffcfff
 800b738:	40004800 	.word	0x40004800
 800b73c:	fffff4ff 	.word	0xfffff4ff
 800b740:	40013800 	.word	0x40013800
 800b744:	40021000 	.word	0x40021000
 800b748:	40004400 	.word	0x40004400
 800b74c:	40004c00 	.word	0x40004c00
 800b750:	40005000 	.word	0x40005000
 800b754:	003d0900 	.word	0x003d0900
 800b758:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800b75c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b75e:	613b      	str	r3, [r7, #16]
 800b760:	2300      	movs	r3, #0
 800b762:	617b      	str	r3, [r7, #20]
 800b764:	6939      	ldr	r1, [r7, #16]
 800b766:	697a      	ldr	r2, [r7, #20]
 800b768:	000b      	movs	r3, r1
 800b76a:	0e1b      	lsrs	r3, r3, #24
 800b76c:	0010      	movs	r0, r2
 800b76e:	0205      	lsls	r5, r0, #8
 800b770:	431d      	orrs	r5, r3
 800b772:	000b      	movs	r3, r1
 800b774:	021c      	lsls	r4, r3, #8
 800b776:	69fb      	ldr	r3, [r7, #28]
 800b778:	685b      	ldr	r3, [r3, #4]
 800b77a:	085b      	lsrs	r3, r3, #1
 800b77c:	60bb      	str	r3, [r7, #8]
 800b77e:	2300      	movs	r3, #0
 800b780:	60fb      	str	r3, [r7, #12]
 800b782:	68b8      	ldr	r0, [r7, #8]
 800b784:	68f9      	ldr	r1, [r7, #12]
 800b786:	1900      	adds	r0, r0, r4
 800b788:	4169      	adcs	r1, r5
 800b78a:	69fb      	ldr	r3, [r7, #28]
 800b78c:	685b      	ldr	r3, [r3, #4]
 800b78e:	603b      	str	r3, [r7, #0]
 800b790:	2300      	movs	r3, #0
 800b792:	607b      	str	r3, [r7, #4]
 800b794:	683a      	ldr	r2, [r7, #0]
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	f7f4 fe96 	bl	80004c8 <__aeabi_uldivmod>
 800b79c:	0002      	movs	r2, r0
 800b79e:	000b      	movs	r3, r1
 800b7a0:	0013      	movs	r3, r2
 800b7a2:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b7a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7a6:	23c0      	movs	r3, #192	; 0xc0
 800b7a8:	009b      	lsls	r3, r3, #2
 800b7aa:	429a      	cmp	r2, r3
 800b7ac:	d309      	bcc.n	800b7c2 <UART_SetConfig+0x38a>
 800b7ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7b0:	2380      	movs	r3, #128	; 0x80
 800b7b2:	035b      	lsls	r3, r3, #13
 800b7b4:	429a      	cmp	r2, r3
 800b7b6:	d204      	bcs.n	800b7c2 <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 800b7b8:	69fb      	ldr	r3, [r7, #28]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7be:	60da      	str	r2, [r3, #12]
 800b7c0:	e0dd      	b.n	800b97e <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 800b7c2:	231a      	movs	r3, #26
 800b7c4:	2218      	movs	r2, #24
 800b7c6:	4694      	mov	ip, r2
 800b7c8:	44bc      	add	ip, r7
 800b7ca:	4463      	add	r3, ip
 800b7cc:	2201      	movs	r2, #1
 800b7ce:	701a      	strb	r2, [r3, #0]
 800b7d0:	e0d5      	b.n	800b97e <UART_SetConfig+0x546>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b7d2:	69fb      	ldr	r3, [r7, #28]
 800b7d4:	69da      	ldr	r2, [r3, #28]
 800b7d6:	2380      	movs	r3, #128	; 0x80
 800b7d8:	021b      	lsls	r3, r3, #8
 800b7da:	429a      	cmp	r2, r3
 800b7dc:	d000      	beq.n	800b7e0 <UART_SetConfig+0x3a8>
 800b7de:	e074      	b.n	800b8ca <UART_SetConfig+0x492>
  {
    switch (clocksource)
 800b7e0:	231b      	movs	r3, #27
 800b7e2:	2218      	movs	r2, #24
 800b7e4:	4694      	mov	ip, r2
 800b7e6:	44bc      	add	ip, r7
 800b7e8:	4463      	add	r3, ip
 800b7ea:	781b      	ldrb	r3, [r3, #0]
 800b7ec:	2b08      	cmp	r3, #8
 800b7ee:	d822      	bhi.n	800b836 <UART_SetConfig+0x3fe>
 800b7f0:	009a      	lsls	r2, r3, #2
 800b7f2:	4b6b      	ldr	r3, [pc, #428]	; (800b9a0 <UART_SetConfig+0x568>)
 800b7f4:	18d3      	adds	r3, r2, r3
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b7fa:	f7fe f815 	bl	8009828 <HAL_RCC_GetPCLK1Freq>
 800b7fe:	0003      	movs	r3, r0
 800b800:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b802:	e022      	b.n	800b84a <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b804:	f7fe f826 	bl	8009854 <HAL_RCC_GetPCLK2Freq>
 800b808:	0003      	movs	r3, r0
 800b80a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b80c:	e01d      	b.n	800b84a <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b80e:	4b65      	ldr	r3, [pc, #404]	; (800b9a4 <UART_SetConfig+0x56c>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	2210      	movs	r2, #16
 800b814:	4013      	ands	r3, r2
 800b816:	d002      	beq.n	800b81e <UART_SetConfig+0x3e6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800b818:	4b63      	ldr	r3, [pc, #396]	; (800b9a8 <UART_SetConfig+0x570>)
 800b81a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b81c:	e015      	b.n	800b84a <UART_SetConfig+0x412>
          pclk = (uint32_t) HSI_VALUE;
 800b81e:	4b63      	ldr	r3, [pc, #396]	; (800b9ac <UART_SetConfig+0x574>)
 800b820:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b822:	e012      	b.n	800b84a <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b824:	f7fd ff50 	bl	80096c8 <HAL_RCC_GetSysClockFreq>
 800b828:	0003      	movs	r3, r0
 800b82a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b82c:	e00d      	b.n	800b84a <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b82e:	2380      	movs	r3, #128	; 0x80
 800b830:	021b      	lsls	r3, r3, #8
 800b832:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b834:	e009      	b.n	800b84a <UART_SetConfig+0x412>
      default:
        pclk = 0U;
 800b836:	2300      	movs	r3, #0
 800b838:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b83a:	231a      	movs	r3, #26
 800b83c:	2218      	movs	r2, #24
 800b83e:	4694      	mov	ip, r2
 800b840:	44bc      	add	ip, r7
 800b842:	4463      	add	r3, ip
 800b844:	2201      	movs	r2, #1
 800b846:	701a      	strb	r2, [r3, #0]
        break;
 800b848:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b84a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d100      	bne.n	800b852 <UART_SetConfig+0x41a>
 800b850:	e095      	b.n	800b97e <UART_SetConfig+0x546>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b854:	005a      	lsls	r2, r3, #1
 800b856:	69fb      	ldr	r3, [r7, #28]
 800b858:	685b      	ldr	r3, [r3, #4]
 800b85a:	085b      	lsrs	r3, r3, #1
 800b85c:	18d2      	adds	r2, r2, r3
 800b85e:	69fb      	ldr	r3, [r7, #28]
 800b860:	685b      	ldr	r3, [r3, #4]
 800b862:	0019      	movs	r1, r3
 800b864:	0010      	movs	r0, r2
 800b866:	f7f4 fc57 	bl	8000118 <__udivsi3>
 800b86a:	0003      	movs	r3, r0
 800b86c:	b29b      	uxth	r3, r3
 800b86e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b872:	2b0f      	cmp	r3, #15
 800b874:	d921      	bls.n	800b8ba <UART_SetConfig+0x482>
 800b876:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b878:	2380      	movs	r3, #128	; 0x80
 800b87a:	025b      	lsls	r3, r3, #9
 800b87c:	429a      	cmp	r2, r3
 800b87e:	d21c      	bcs.n	800b8ba <UART_SetConfig+0x482>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b882:	b29a      	uxth	r2, r3
 800b884:	200e      	movs	r0, #14
 800b886:	2418      	movs	r4, #24
 800b888:	193b      	adds	r3, r7, r4
 800b88a:	181b      	adds	r3, r3, r0
 800b88c:	210f      	movs	r1, #15
 800b88e:	438a      	bics	r2, r1
 800b890:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b894:	085b      	lsrs	r3, r3, #1
 800b896:	b29b      	uxth	r3, r3
 800b898:	2207      	movs	r2, #7
 800b89a:	4013      	ands	r3, r2
 800b89c:	b299      	uxth	r1, r3
 800b89e:	193b      	adds	r3, r7, r4
 800b8a0:	181b      	adds	r3, r3, r0
 800b8a2:	193a      	adds	r2, r7, r4
 800b8a4:	1812      	adds	r2, r2, r0
 800b8a6:	8812      	ldrh	r2, [r2, #0]
 800b8a8:	430a      	orrs	r2, r1
 800b8aa:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800b8ac:	69fb      	ldr	r3, [r7, #28]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	193a      	adds	r2, r7, r4
 800b8b2:	1812      	adds	r2, r2, r0
 800b8b4:	8812      	ldrh	r2, [r2, #0]
 800b8b6:	60da      	str	r2, [r3, #12]
 800b8b8:	e061      	b.n	800b97e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800b8ba:	231a      	movs	r3, #26
 800b8bc:	2218      	movs	r2, #24
 800b8be:	4694      	mov	ip, r2
 800b8c0:	44bc      	add	ip, r7
 800b8c2:	4463      	add	r3, ip
 800b8c4:	2201      	movs	r2, #1
 800b8c6:	701a      	strb	r2, [r3, #0]
 800b8c8:	e059      	b.n	800b97e <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b8ca:	231b      	movs	r3, #27
 800b8cc:	2218      	movs	r2, #24
 800b8ce:	4694      	mov	ip, r2
 800b8d0:	44bc      	add	ip, r7
 800b8d2:	4463      	add	r3, ip
 800b8d4:	781b      	ldrb	r3, [r3, #0]
 800b8d6:	2b08      	cmp	r3, #8
 800b8d8:	d822      	bhi.n	800b920 <UART_SetConfig+0x4e8>
 800b8da:	009a      	lsls	r2, r3, #2
 800b8dc:	4b34      	ldr	r3, [pc, #208]	; (800b9b0 <UART_SetConfig+0x578>)
 800b8de:	18d3      	adds	r3, r2, r3
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b8e4:	f7fd ffa0 	bl	8009828 <HAL_RCC_GetPCLK1Freq>
 800b8e8:	0003      	movs	r3, r0
 800b8ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b8ec:	e022      	b.n	800b934 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b8ee:	f7fd ffb1 	bl	8009854 <HAL_RCC_GetPCLK2Freq>
 800b8f2:	0003      	movs	r3, r0
 800b8f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b8f6:	e01d      	b.n	800b934 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b8f8:	4b2a      	ldr	r3, [pc, #168]	; (800b9a4 <UART_SetConfig+0x56c>)
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	2210      	movs	r2, #16
 800b8fe:	4013      	ands	r3, r2
 800b900:	d002      	beq.n	800b908 <UART_SetConfig+0x4d0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800b902:	4b29      	ldr	r3, [pc, #164]	; (800b9a8 <UART_SetConfig+0x570>)
 800b904:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b906:	e015      	b.n	800b934 <UART_SetConfig+0x4fc>
          pclk = (uint32_t) HSI_VALUE;
 800b908:	4b28      	ldr	r3, [pc, #160]	; (800b9ac <UART_SetConfig+0x574>)
 800b90a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b90c:	e012      	b.n	800b934 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b90e:	f7fd fedb 	bl	80096c8 <HAL_RCC_GetSysClockFreq>
 800b912:	0003      	movs	r3, r0
 800b914:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b916:	e00d      	b.n	800b934 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b918:	2380      	movs	r3, #128	; 0x80
 800b91a:	021b      	lsls	r3, r3, #8
 800b91c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b91e:	e009      	b.n	800b934 <UART_SetConfig+0x4fc>
      default:
        pclk = 0U;
 800b920:	2300      	movs	r3, #0
 800b922:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b924:	231a      	movs	r3, #26
 800b926:	2218      	movs	r2, #24
 800b928:	4694      	mov	ip, r2
 800b92a:	44bc      	add	ip, r7
 800b92c:	4463      	add	r3, ip
 800b92e:	2201      	movs	r2, #1
 800b930:	701a      	strb	r2, [r3, #0]
        break;
 800b932:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800b934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b936:	2b00      	cmp	r3, #0
 800b938:	d021      	beq.n	800b97e <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b93a:	69fb      	ldr	r3, [r7, #28]
 800b93c:	685b      	ldr	r3, [r3, #4]
 800b93e:	085a      	lsrs	r2, r3, #1
 800b940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b942:	18d2      	adds	r2, r2, r3
 800b944:	69fb      	ldr	r3, [r7, #28]
 800b946:	685b      	ldr	r3, [r3, #4]
 800b948:	0019      	movs	r1, r3
 800b94a:	0010      	movs	r0, r2
 800b94c:	f7f4 fbe4 	bl	8000118 <__udivsi3>
 800b950:	0003      	movs	r3, r0
 800b952:	b29b      	uxth	r3, r3
 800b954:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b958:	2b0f      	cmp	r3, #15
 800b95a:	d909      	bls.n	800b970 <UART_SetConfig+0x538>
 800b95c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b95e:	2380      	movs	r3, #128	; 0x80
 800b960:	025b      	lsls	r3, r3, #9
 800b962:	429a      	cmp	r2, r3
 800b964:	d204      	bcs.n	800b970 <UART_SetConfig+0x538>
      {
        huart->Instance->BRR = usartdiv;
 800b966:	69fb      	ldr	r3, [r7, #28]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b96c:	60da      	str	r2, [r3, #12]
 800b96e:	e006      	b.n	800b97e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800b970:	231a      	movs	r3, #26
 800b972:	2218      	movs	r2, #24
 800b974:	4694      	mov	ip, r2
 800b976:	44bc      	add	ip, r7
 800b978:	4463      	add	r3, ip
 800b97a:	2201      	movs	r2, #1
 800b97c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b97e:	69fb      	ldr	r3, [r7, #28]
 800b980:	2200      	movs	r2, #0
 800b982:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800b984:	69fb      	ldr	r3, [r7, #28]
 800b986:	2200      	movs	r2, #0
 800b988:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800b98a:	231a      	movs	r3, #26
 800b98c:	2218      	movs	r2, #24
 800b98e:	4694      	mov	ip, r2
 800b990:	44bc      	add	ip, r7
 800b992:	4463      	add	r3, ip
 800b994:	781b      	ldrb	r3, [r3, #0]
}
 800b996:	0018      	movs	r0, r3
 800b998:	46bd      	mov	sp, r7
 800b99a:	b00e      	add	sp, #56	; 0x38
 800b99c:	bdb0      	pop	{r4, r5, r7, pc}
 800b99e:	46c0      	nop			; (mov r8, r8)
 800b9a0:	0801f270 	.word	0x0801f270
 800b9a4:	40021000 	.word	0x40021000
 800b9a8:	003d0900 	.word	0x003d0900
 800b9ac:	00f42400 	.word	0x00f42400
 800b9b0:	0801f294 	.word	0x0801f294

0800b9b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b082      	sub	sp, #8
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9c0:	2201      	movs	r2, #1
 800b9c2:	4013      	ands	r3, r2
 800b9c4:	d00b      	beq.n	800b9de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	685b      	ldr	r3, [r3, #4]
 800b9cc:	4a4a      	ldr	r2, [pc, #296]	; (800baf8 <UART_AdvFeatureConfig+0x144>)
 800b9ce:	4013      	ands	r3, r2
 800b9d0:	0019      	movs	r1, r3
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	430a      	orrs	r2, r1
 800b9dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9e2:	2202      	movs	r2, #2
 800b9e4:	4013      	ands	r3, r2
 800b9e6:	d00b      	beq.n	800ba00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	685b      	ldr	r3, [r3, #4]
 800b9ee:	4a43      	ldr	r2, [pc, #268]	; (800bafc <UART_AdvFeatureConfig+0x148>)
 800b9f0:	4013      	ands	r3, r2
 800b9f2:	0019      	movs	r1, r3
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	430a      	orrs	r2, r1
 800b9fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba04:	2204      	movs	r2, #4
 800ba06:	4013      	ands	r3, r2
 800ba08:	d00b      	beq.n	800ba22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	685b      	ldr	r3, [r3, #4]
 800ba10:	4a3b      	ldr	r2, [pc, #236]	; (800bb00 <UART_AdvFeatureConfig+0x14c>)
 800ba12:	4013      	ands	r3, r2
 800ba14:	0019      	movs	r1, r3
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	430a      	orrs	r2, r1
 800ba20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba26:	2208      	movs	r2, #8
 800ba28:	4013      	ands	r3, r2
 800ba2a:	d00b      	beq.n	800ba44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	685b      	ldr	r3, [r3, #4]
 800ba32:	4a34      	ldr	r2, [pc, #208]	; (800bb04 <UART_AdvFeatureConfig+0x150>)
 800ba34:	4013      	ands	r3, r2
 800ba36:	0019      	movs	r1, r3
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	430a      	orrs	r2, r1
 800ba42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba48:	2210      	movs	r2, #16
 800ba4a:	4013      	ands	r3, r2
 800ba4c:	d00b      	beq.n	800ba66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	689b      	ldr	r3, [r3, #8]
 800ba54:	4a2c      	ldr	r2, [pc, #176]	; (800bb08 <UART_AdvFeatureConfig+0x154>)
 800ba56:	4013      	ands	r3, r2
 800ba58:	0019      	movs	r1, r3
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	430a      	orrs	r2, r1
 800ba64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba6a:	2220      	movs	r2, #32
 800ba6c:	4013      	ands	r3, r2
 800ba6e:	d00b      	beq.n	800ba88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	689b      	ldr	r3, [r3, #8]
 800ba76:	4a25      	ldr	r2, [pc, #148]	; (800bb0c <UART_AdvFeatureConfig+0x158>)
 800ba78:	4013      	ands	r3, r2
 800ba7a:	0019      	movs	r1, r3
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	430a      	orrs	r2, r1
 800ba86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba8c:	2240      	movs	r2, #64	; 0x40
 800ba8e:	4013      	ands	r3, r2
 800ba90:	d01d      	beq.n	800bace <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	685b      	ldr	r3, [r3, #4]
 800ba98:	4a1d      	ldr	r2, [pc, #116]	; (800bb10 <UART_AdvFeatureConfig+0x15c>)
 800ba9a:	4013      	ands	r3, r2
 800ba9c:	0019      	movs	r1, r3
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	430a      	orrs	r2, r1
 800baa8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800baae:	2380      	movs	r3, #128	; 0x80
 800bab0:	035b      	lsls	r3, r3, #13
 800bab2:	429a      	cmp	r2, r3
 800bab4:	d10b      	bne.n	800bace <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	685b      	ldr	r3, [r3, #4]
 800babc:	4a15      	ldr	r2, [pc, #84]	; (800bb14 <UART_AdvFeatureConfig+0x160>)
 800babe:	4013      	ands	r3, r2
 800bac0:	0019      	movs	r1, r3
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	430a      	orrs	r2, r1
 800bacc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bad2:	2280      	movs	r2, #128	; 0x80
 800bad4:	4013      	ands	r3, r2
 800bad6:	d00b      	beq.n	800baf0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	685b      	ldr	r3, [r3, #4]
 800bade:	4a0e      	ldr	r2, [pc, #56]	; (800bb18 <UART_AdvFeatureConfig+0x164>)
 800bae0:	4013      	ands	r3, r2
 800bae2:	0019      	movs	r1, r3
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	430a      	orrs	r2, r1
 800baee:	605a      	str	r2, [r3, #4]
  }
}
 800baf0:	46c0      	nop			; (mov r8, r8)
 800baf2:	46bd      	mov	sp, r7
 800baf4:	b002      	add	sp, #8
 800baf6:	bd80      	pop	{r7, pc}
 800baf8:	fffdffff 	.word	0xfffdffff
 800bafc:	fffeffff 	.word	0xfffeffff
 800bb00:	fffbffff 	.word	0xfffbffff
 800bb04:	ffff7fff 	.word	0xffff7fff
 800bb08:	ffffefff 	.word	0xffffefff
 800bb0c:	ffffdfff 	.word	0xffffdfff
 800bb10:	ffefffff 	.word	0xffefffff
 800bb14:	ff9fffff 	.word	0xff9fffff
 800bb18:	fff7ffff 	.word	0xfff7ffff

0800bb1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b086      	sub	sp, #24
 800bb20:	af02      	add	r7, sp, #8
 800bb22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2280      	movs	r2, #128	; 0x80
 800bb28:	2100      	movs	r1, #0
 800bb2a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bb2c:	f7f9 f955 	bl	8004dda <HAL_GetTick>
 800bb30:	0003      	movs	r3, r0
 800bb32:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	2208      	movs	r2, #8
 800bb3c:	4013      	ands	r3, r2
 800bb3e:	2b08      	cmp	r3, #8
 800bb40:	d10c      	bne.n	800bb5c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	2280      	movs	r2, #128	; 0x80
 800bb46:	0391      	lsls	r1, r2, #14
 800bb48:	6878      	ldr	r0, [r7, #4]
 800bb4a:	4a17      	ldr	r2, [pc, #92]	; (800bba8 <UART_CheckIdleState+0x8c>)
 800bb4c:	9200      	str	r2, [sp, #0]
 800bb4e:	2200      	movs	r2, #0
 800bb50:	f000 f82c 	bl	800bbac <UART_WaitOnFlagUntilTimeout>
 800bb54:	1e03      	subs	r3, r0, #0
 800bb56:	d001      	beq.n	800bb5c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bb58:	2303      	movs	r3, #3
 800bb5a:	e021      	b.n	800bba0 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	2204      	movs	r2, #4
 800bb64:	4013      	ands	r3, r2
 800bb66:	2b04      	cmp	r3, #4
 800bb68:	d10c      	bne.n	800bb84 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	2280      	movs	r2, #128	; 0x80
 800bb6e:	03d1      	lsls	r1, r2, #15
 800bb70:	6878      	ldr	r0, [r7, #4]
 800bb72:	4a0d      	ldr	r2, [pc, #52]	; (800bba8 <UART_CheckIdleState+0x8c>)
 800bb74:	9200      	str	r2, [sp, #0]
 800bb76:	2200      	movs	r2, #0
 800bb78:	f000 f818 	bl	800bbac <UART_WaitOnFlagUntilTimeout>
 800bb7c:	1e03      	subs	r3, r0, #0
 800bb7e:	d001      	beq.n	800bb84 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bb80:	2303      	movs	r3, #3
 800bb82:	e00d      	b.n	800bba0 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2220      	movs	r2, #32
 800bb88:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2220      	movs	r2, #32
 800bb8e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2200      	movs	r2, #0
 800bb94:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2274      	movs	r2, #116	; 0x74
 800bb9a:	2100      	movs	r1, #0
 800bb9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bb9e:	2300      	movs	r3, #0
}
 800bba0:	0018      	movs	r0, r3
 800bba2:	46bd      	mov	sp, r7
 800bba4:	b004      	add	sp, #16
 800bba6:	bd80      	pop	{r7, pc}
 800bba8:	01ffffff 	.word	0x01ffffff

0800bbac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b084      	sub	sp, #16
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	60f8      	str	r0, [r7, #12]
 800bbb4:	60b9      	str	r1, [r7, #8]
 800bbb6:	603b      	str	r3, [r7, #0]
 800bbb8:	1dfb      	adds	r3, r7, #7
 800bbba:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bbbc:	e05e      	b.n	800bc7c <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bbbe:	69bb      	ldr	r3, [r7, #24]
 800bbc0:	3301      	adds	r3, #1
 800bbc2:	d05b      	beq.n	800bc7c <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bbc4:	f7f9 f909 	bl	8004dda <HAL_GetTick>
 800bbc8:	0002      	movs	r2, r0
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	1ad3      	subs	r3, r2, r3
 800bbce:	69ba      	ldr	r2, [r7, #24]
 800bbd0:	429a      	cmp	r2, r3
 800bbd2:	d302      	bcc.n	800bbda <UART_WaitOnFlagUntilTimeout+0x2e>
 800bbd4:	69bb      	ldr	r3, [r7, #24]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d11b      	bne.n	800bc12 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	681a      	ldr	r2, [r3, #0]
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	492f      	ldr	r1, [pc, #188]	; (800bca4 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800bbe6:	400a      	ands	r2, r1
 800bbe8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	689a      	ldr	r2, [r3, #8]
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	2101      	movs	r1, #1
 800bbf6:	438a      	bics	r2, r1
 800bbf8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	2220      	movs	r2, #32
 800bbfe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	2220      	movs	r2, #32
 800bc04:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	2274      	movs	r2, #116	; 0x74
 800bc0a:	2100      	movs	r1, #0
 800bc0c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800bc0e:	2303      	movs	r3, #3
 800bc10:	e044      	b.n	800bc9c <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	2204      	movs	r2, #4
 800bc1a:	4013      	ands	r3, r2
 800bc1c:	d02e      	beq.n	800bc7c <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	69da      	ldr	r2, [r3, #28]
 800bc24:	2380      	movs	r3, #128	; 0x80
 800bc26:	011b      	lsls	r3, r3, #4
 800bc28:	401a      	ands	r2, r3
 800bc2a:	2380      	movs	r3, #128	; 0x80
 800bc2c:	011b      	lsls	r3, r3, #4
 800bc2e:	429a      	cmp	r2, r3
 800bc30:	d124      	bne.n	800bc7c <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	2280      	movs	r2, #128	; 0x80
 800bc38:	0112      	lsls	r2, r2, #4
 800bc3a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	681a      	ldr	r2, [r3, #0]
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	4917      	ldr	r1, [pc, #92]	; (800bca4 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800bc48:	400a      	ands	r2, r1
 800bc4a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	689a      	ldr	r2, [r3, #8]
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	2101      	movs	r1, #1
 800bc58:	438a      	bics	r2, r1
 800bc5a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	2220      	movs	r2, #32
 800bc60:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	2220      	movs	r2, #32
 800bc66:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	2280      	movs	r2, #128	; 0x80
 800bc6c:	2120      	movs	r1, #32
 800bc6e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	2274      	movs	r2, #116	; 0x74
 800bc74:	2100      	movs	r1, #0
 800bc76:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800bc78:	2303      	movs	r3, #3
 800bc7a:	e00f      	b.n	800bc9c <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	69db      	ldr	r3, [r3, #28]
 800bc82:	68ba      	ldr	r2, [r7, #8]
 800bc84:	4013      	ands	r3, r2
 800bc86:	68ba      	ldr	r2, [r7, #8]
 800bc88:	1ad3      	subs	r3, r2, r3
 800bc8a:	425a      	negs	r2, r3
 800bc8c:	4153      	adcs	r3, r2
 800bc8e:	b2db      	uxtb	r3, r3
 800bc90:	001a      	movs	r2, r3
 800bc92:	1dfb      	adds	r3, r7, #7
 800bc94:	781b      	ldrb	r3, [r3, #0]
 800bc96:	429a      	cmp	r2, r3
 800bc98:	d091      	beq.n	800bbbe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bc9a:	2300      	movs	r3, #0
}
 800bc9c:	0018      	movs	r0, r3
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	b004      	add	sp, #16
 800bca2:	bd80      	pop	{r7, pc}
 800bca4:	fffffe5f 	.word	0xfffffe5f

0800bca8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b084      	sub	sp, #16
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	60f8      	str	r0, [r7, #12]
 800bcb0:	60b9      	str	r1, [r7, #8]
 800bcb2:	1dbb      	adds	r3, r7, #6
 800bcb4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	68ba      	ldr	r2, [r7, #8]
 800bcba:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	1dba      	adds	r2, r7, #6
 800bcc0:	2158      	movs	r1, #88	; 0x58
 800bcc2:	8812      	ldrh	r2, [r2, #0]
 800bcc4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	1dba      	adds	r2, r7, #6
 800bcca:	215a      	movs	r1, #90	; 0x5a
 800bccc:	8812      	ldrh	r2, [r2, #0]
 800bcce:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	689a      	ldr	r2, [r3, #8]
 800bcda:	2380      	movs	r3, #128	; 0x80
 800bcdc:	015b      	lsls	r3, r3, #5
 800bcde:	429a      	cmp	r2, r3
 800bce0:	d10d      	bne.n	800bcfe <UART_Start_Receive_IT+0x56>
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	691b      	ldr	r3, [r3, #16]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d104      	bne.n	800bcf4 <UART_Start_Receive_IT+0x4c>
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	225c      	movs	r2, #92	; 0x5c
 800bcee:	4932      	ldr	r1, [pc, #200]	; (800bdb8 <UART_Start_Receive_IT+0x110>)
 800bcf0:	5299      	strh	r1, [r3, r2]
 800bcf2:	e02e      	b.n	800bd52 <UART_Start_Receive_IT+0xaa>
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	225c      	movs	r2, #92	; 0x5c
 800bcf8:	21ff      	movs	r1, #255	; 0xff
 800bcfa:	5299      	strh	r1, [r3, r2]
 800bcfc:	e029      	b.n	800bd52 <UART_Start_Receive_IT+0xaa>
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	689b      	ldr	r3, [r3, #8]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d10d      	bne.n	800bd22 <UART_Start_Receive_IT+0x7a>
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	691b      	ldr	r3, [r3, #16]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d104      	bne.n	800bd18 <UART_Start_Receive_IT+0x70>
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	225c      	movs	r2, #92	; 0x5c
 800bd12:	21ff      	movs	r1, #255	; 0xff
 800bd14:	5299      	strh	r1, [r3, r2]
 800bd16:	e01c      	b.n	800bd52 <UART_Start_Receive_IT+0xaa>
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	225c      	movs	r2, #92	; 0x5c
 800bd1c:	217f      	movs	r1, #127	; 0x7f
 800bd1e:	5299      	strh	r1, [r3, r2]
 800bd20:	e017      	b.n	800bd52 <UART_Start_Receive_IT+0xaa>
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	689a      	ldr	r2, [r3, #8]
 800bd26:	2380      	movs	r3, #128	; 0x80
 800bd28:	055b      	lsls	r3, r3, #21
 800bd2a:	429a      	cmp	r2, r3
 800bd2c:	d10d      	bne.n	800bd4a <UART_Start_Receive_IT+0xa2>
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	691b      	ldr	r3, [r3, #16]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d104      	bne.n	800bd40 <UART_Start_Receive_IT+0x98>
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	225c      	movs	r2, #92	; 0x5c
 800bd3a:	217f      	movs	r1, #127	; 0x7f
 800bd3c:	5299      	strh	r1, [r3, r2]
 800bd3e:	e008      	b.n	800bd52 <UART_Start_Receive_IT+0xaa>
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	225c      	movs	r2, #92	; 0x5c
 800bd44:	213f      	movs	r1, #63	; 0x3f
 800bd46:	5299      	strh	r1, [r3, r2]
 800bd48:	e003      	b.n	800bd52 <UART_Start_Receive_IT+0xaa>
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	225c      	movs	r2, #92	; 0x5c
 800bd4e:	2100      	movs	r1, #0
 800bd50:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	2280      	movs	r2, #128	; 0x80
 800bd56:	2100      	movs	r1, #0
 800bd58:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	2222      	movs	r2, #34	; 0x22
 800bd5e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	689a      	ldr	r2, [r3, #8]
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	2101      	movs	r1, #1
 800bd6c:	430a      	orrs	r2, r1
 800bd6e:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	689a      	ldr	r2, [r3, #8]
 800bd74:	2380      	movs	r3, #128	; 0x80
 800bd76:	015b      	lsls	r3, r3, #5
 800bd78:	429a      	cmp	r2, r3
 800bd7a:	d107      	bne.n	800bd8c <UART_Start_Receive_IT+0xe4>
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	691b      	ldr	r3, [r3, #16]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d103      	bne.n	800bd8c <UART_Start_Receive_IT+0xe4>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	4a0d      	ldr	r2, [pc, #52]	; (800bdbc <UART_Start_Receive_IT+0x114>)
 800bd88:	665a      	str	r2, [r3, #100]	; 0x64
 800bd8a:	e002      	b.n	800bd92 <UART_Start_Receive_IT+0xea>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	4a0c      	ldr	r2, [pc, #48]	; (800bdc0 <UART_Start_Receive_IT+0x118>)
 800bd90:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	2274      	movs	r2, #116	; 0x74
 800bd96:	2100      	movs	r1, #0
 800bd98:	5499      	strb	r1, [r3, r2]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	681a      	ldr	r2, [r3, #0]
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	2190      	movs	r1, #144	; 0x90
 800bda6:	0049      	lsls	r1, r1, #1
 800bda8:	430a      	orrs	r2, r1
 800bdaa:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800bdac:	2300      	movs	r3, #0
}
 800bdae:	0018      	movs	r0, r3
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	b004      	add	sp, #16
 800bdb4:	bd80      	pop	{r7, pc}
 800bdb6:	46c0      	nop			; (mov r8, r8)
 800bdb8:	000001ff 	.word	0x000001ff
 800bdbc:	0800c08d 	.word	0x0800c08d
 800bdc0:	0800bfa5 	.word	0x0800bfa5

0800bdc4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b082      	sub	sp, #8
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	681a      	ldr	r2, [r3, #0]
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	21c0      	movs	r1, #192	; 0xc0
 800bdd8:	438a      	bics	r2, r1
 800bdda:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2220      	movs	r2, #32
 800bde0:	679a      	str	r2, [r3, #120]	; 0x78
}
 800bde2:	46c0      	nop			; (mov r8, r8)
 800bde4:	46bd      	mov	sp, r7
 800bde6:	b002      	add	sp, #8
 800bde8:	bd80      	pop	{r7, pc}
	...

0800bdec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b082      	sub	sp, #8
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	681a      	ldr	r2, [r3, #0]
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	4912      	ldr	r1, [pc, #72]	; (800be48 <UART_EndRxTransfer+0x5c>)
 800be00:	400a      	ands	r2, r1
 800be02:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	689a      	ldr	r2, [r3, #8]
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	2101      	movs	r1, #1
 800be10:	438a      	bics	r2, r1
 800be12:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be18:	2b01      	cmp	r3, #1
 800be1a:	d107      	bne.n	800be2c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	681a      	ldr	r2, [r3, #0]
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	2110      	movs	r1, #16
 800be28:	438a      	bics	r2, r1
 800be2a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2220      	movs	r2, #32
 800be30:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2200      	movs	r2, #0
 800be36:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	2200      	movs	r2, #0
 800be3c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800be3e:	46c0      	nop			; (mov r8, r8)
 800be40:	46bd      	mov	sp, r7
 800be42:	b002      	add	sp, #8
 800be44:	bd80      	pop	{r7, pc}
 800be46:	46c0      	nop			; (mov r8, r8)
 800be48:	fffffedf 	.word	0xfffffedf

0800be4c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b084      	sub	sp, #16
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be58:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	2220      	movs	r2, #32
 800be62:	4013      	ands	r3, r2
 800be64:	d114      	bne.n	800be90 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0U;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	2252      	movs	r2, #82	; 0x52
 800be6a:	2100      	movs	r1, #0
 800be6c:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	689a      	ldr	r2, [r3, #8]
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	2180      	movs	r1, #128	; 0x80
 800be7a:	438a      	bics	r2, r1
 800be7c:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	681a      	ldr	r2, [r3, #0]
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	2140      	movs	r1, #64	; 0x40
 800be8a:	430a      	orrs	r2, r1
 800be8c:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800be8e:	e003      	b.n	800be98 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	0018      	movs	r0, r3
 800be94:	f7f9 fa0c 	bl	80052b0 <HAL_UART_TxCpltCallback>
}
 800be98:	46c0      	nop			; (mov r8, r8)
 800be9a:	46bd      	mov	sp, r7
 800be9c:	b004      	add	sp, #16
 800be9e:	bd80      	pop	{r7, pc}

0800bea0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b084      	sub	sp, #16
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800beac:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	0018      	movs	r0, r3
 800beb2:	f7ff faa5 	bl	800b400 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800beb6:	46c0      	nop			; (mov r8, r8)
 800beb8:	46bd      	mov	sp, r7
 800beba:	b004      	add	sp, #16
 800bebc:	bd80      	pop	{r7, pc}

0800bebe <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bebe:	b580      	push	{r7, lr}
 800bec0:	b086      	sub	sp, #24
 800bec2:	af00      	add	r7, sp, #0
 800bec4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800beca:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800becc:	697b      	ldr	r3, [r7, #20]
 800bece:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bed0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bed2:	697b      	ldr	r3, [r7, #20]
 800bed4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bed6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bed8:	697b      	ldr	r3, [r7, #20]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	689b      	ldr	r3, [r3, #8]
 800bede:	2280      	movs	r2, #128	; 0x80
 800bee0:	4013      	ands	r3, r2
 800bee2:	2b80      	cmp	r3, #128	; 0x80
 800bee4:	d10a      	bne.n	800befc <UART_DMAError+0x3e>
 800bee6:	693b      	ldr	r3, [r7, #16]
 800bee8:	2b21      	cmp	r3, #33	; 0x21
 800beea:	d107      	bne.n	800befc <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800beec:	697b      	ldr	r3, [r7, #20]
 800beee:	2252      	movs	r2, #82	; 0x52
 800bef0:	2100      	movs	r1, #0
 800bef2:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800bef4:	697b      	ldr	r3, [r7, #20]
 800bef6:	0018      	movs	r0, r3
 800bef8:	f7ff ff64 	bl	800bdc4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800befc:	697b      	ldr	r3, [r7, #20]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	689b      	ldr	r3, [r3, #8]
 800bf02:	2240      	movs	r2, #64	; 0x40
 800bf04:	4013      	ands	r3, r2
 800bf06:	2b40      	cmp	r3, #64	; 0x40
 800bf08:	d10a      	bne.n	800bf20 <UART_DMAError+0x62>
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	2b22      	cmp	r3, #34	; 0x22
 800bf0e:	d107      	bne.n	800bf20 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bf10:	697b      	ldr	r3, [r7, #20]
 800bf12:	225a      	movs	r2, #90	; 0x5a
 800bf14:	2100      	movs	r1, #0
 800bf16:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800bf18:	697b      	ldr	r3, [r7, #20]
 800bf1a:	0018      	movs	r0, r3
 800bf1c:	f7ff ff66 	bl	800bdec <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bf20:	697b      	ldr	r3, [r7, #20]
 800bf22:	2280      	movs	r2, #128	; 0x80
 800bf24:	589b      	ldr	r3, [r3, r2]
 800bf26:	2210      	movs	r2, #16
 800bf28:	431a      	orrs	r2, r3
 800bf2a:	697b      	ldr	r3, [r7, #20]
 800bf2c:	2180      	movs	r1, #128	; 0x80
 800bf2e:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bf30:	697b      	ldr	r3, [r7, #20]
 800bf32:	0018      	movs	r0, r3
 800bf34:	f7ff fa6c 	bl	800b410 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bf38:	46c0      	nop			; (mov r8, r8)
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	b006      	add	sp, #24
 800bf3e:	bd80      	pop	{r7, pc}

0800bf40 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b084      	sub	sp, #16
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf4c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	225a      	movs	r2, #90	; 0x5a
 800bf52:	2100      	movs	r1, #0
 800bf54:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	2252      	movs	r2, #82	; 0x52
 800bf5a:	2100      	movs	r1, #0
 800bf5c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	0018      	movs	r0, r3
 800bf62:	f7ff fa55 	bl	800b410 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bf66:	46c0      	nop			; (mov r8, r8)
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	b004      	add	sp, #16
 800bf6c:	bd80      	pop	{r7, pc}

0800bf6e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bf6e:	b580      	push	{r7, lr}
 800bf70:	b082      	sub	sp, #8
 800bf72:	af00      	add	r7, sp, #0
 800bf74:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	681a      	ldr	r2, [r3, #0]
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	2140      	movs	r1, #64	; 0x40
 800bf82:	438a      	bics	r2, r1
 800bf84:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2220      	movs	r2, #32
 800bf8a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2200      	movs	r2, #0
 800bf90:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	0018      	movs	r0, r3
 800bf96:	f7f9 f98b 	bl	80052b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bf9a:	46c0      	nop			; (mov r8, r8)
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	b002      	add	sp, #8
 800bfa0:	bd80      	pop	{r7, pc}
	...

0800bfa4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b084      	sub	sp, #16
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800bfac:	200e      	movs	r0, #14
 800bfae:	183b      	adds	r3, r7, r0
 800bfb0:	687a      	ldr	r2, [r7, #4]
 800bfb2:	215c      	movs	r1, #92	; 0x5c
 800bfb4:	5a52      	ldrh	r2, [r2, r1]
 800bfb6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bfbc:	2b22      	cmp	r3, #34	; 0x22
 800bfbe:	d157      	bne.n	800c070 <UART_RxISR_8BIT+0xcc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bfc6:	210c      	movs	r1, #12
 800bfc8:	187b      	adds	r3, r7, r1
 800bfca:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800bfcc:	187b      	adds	r3, r7, r1
 800bfce:	881b      	ldrh	r3, [r3, #0]
 800bfd0:	b2da      	uxtb	r2, r3
 800bfd2:	183b      	adds	r3, r7, r0
 800bfd4:	881b      	ldrh	r3, [r3, #0]
 800bfd6:	b2d9      	uxtb	r1, r3
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfdc:	400a      	ands	r2, r1
 800bfde:	b2d2      	uxtb	r2, r2
 800bfe0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfe6:	1c5a      	adds	r2, r3, #1
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	225a      	movs	r2, #90	; 0x5a
 800bff0:	5a9b      	ldrh	r3, [r3, r2]
 800bff2:	b29b      	uxth	r3, r3
 800bff4:	3b01      	subs	r3, #1
 800bff6:	b299      	uxth	r1, r3
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	225a      	movs	r2, #90	; 0x5a
 800bffc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	225a      	movs	r2, #90	; 0x5a
 800c002:	5a9b      	ldrh	r3, [r3, r2]
 800c004:	b29b      	uxth	r3, r3
 800c006:	2b00      	cmp	r3, #0
 800c008:	d13a      	bne.n	800c080 <UART_RxISR_8BIT+0xdc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	681a      	ldr	r2, [r3, #0]
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	491c      	ldr	r1, [pc, #112]	; (800c088 <UART_RxISR_8BIT+0xe4>)
 800c016:	400a      	ands	r2, r1
 800c018:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	689a      	ldr	r2, [r3, #8]
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	2101      	movs	r1, #1
 800c026:	438a      	bics	r2, r1
 800c028:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	2220      	movs	r2, #32
 800c02e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2200      	movs	r2, #0
 800c034:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c03a:	2b01      	cmp	r3, #1
 800c03c:	d110      	bne.n	800c060 <UART_RxISR_8BIT+0xbc>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	681a      	ldr	r2, [r3, #0]
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	2110      	movs	r1, #16
 800c04a:	438a      	bics	r2, r1
 800c04c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	2258      	movs	r2, #88	; 0x58
 800c052:	5a9a      	ldrh	r2, [r3, r2]
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	0011      	movs	r1, r2
 800c058:	0018      	movs	r0, r3
 800c05a:	f7ff f9e1 	bl	800b420 <HAL_UARTEx_RxEventCallback>
 800c05e:	e003      	b.n	800c068 <UART_RxISR_8BIT+0xc4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	0018      	movs	r0, r3
 800c064:	f7f9 f932 	bl	80052cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	2200      	movs	r2, #0
 800c06c:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c06e:	e007      	b.n	800c080 <UART_RxISR_8BIT+0xdc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	699a      	ldr	r2, [r3, #24]
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	2108      	movs	r1, #8
 800c07c:	430a      	orrs	r2, r1
 800c07e:	619a      	str	r2, [r3, #24]
}
 800c080:	46c0      	nop			; (mov r8, r8)
 800c082:	46bd      	mov	sp, r7
 800c084:	b004      	add	sp, #16
 800c086:	bd80      	pop	{r7, pc}
 800c088:	fffffedf 	.word	0xfffffedf

0800c08c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b084      	sub	sp, #16
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c094:	200e      	movs	r0, #14
 800c096:	183b      	adds	r3, r7, r0
 800c098:	687a      	ldr	r2, [r7, #4]
 800c09a:	215c      	movs	r1, #92	; 0x5c
 800c09c:	5a52      	ldrh	r2, [r2, r1]
 800c09e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c0a4:	2b22      	cmp	r3, #34	; 0x22
 800c0a6:	d157      	bne.n	800c158 <UART_RxISR_16BIT+0xcc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c0ae:	210c      	movs	r1, #12
 800c0b0:	187b      	adds	r3, r7, r1
 800c0b2:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0b8:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800c0ba:	187b      	adds	r3, r7, r1
 800c0bc:	183a      	adds	r2, r7, r0
 800c0be:	881b      	ldrh	r3, [r3, #0]
 800c0c0:	8812      	ldrh	r2, [r2, #0]
 800c0c2:	4013      	ands	r3, r2
 800c0c4:	b29a      	uxth	r2, r3
 800c0c6:	68bb      	ldr	r3, [r7, #8]
 800c0c8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0ce:	1c9a      	adds	r2, r3, #2
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	225a      	movs	r2, #90	; 0x5a
 800c0d8:	5a9b      	ldrh	r3, [r3, r2]
 800c0da:	b29b      	uxth	r3, r3
 800c0dc:	3b01      	subs	r3, #1
 800c0de:	b299      	uxth	r1, r3
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	225a      	movs	r2, #90	; 0x5a
 800c0e4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	225a      	movs	r2, #90	; 0x5a
 800c0ea:	5a9b      	ldrh	r3, [r3, r2]
 800c0ec:	b29b      	uxth	r3, r3
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d13a      	bne.n	800c168 <UART_RxISR_16BIT+0xdc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	681a      	ldr	r2, [r3, #0]
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	491c      	ldr	r1, [pc, #112]	; (800c170 <UART_RxISR_16BIT+0xe4>)
 800c0fe:	400a      	ands	r2, r1
 800c100:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	689a      	ldr	r2, [r3, #8]
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	2101      	movs	r1, #1
 800c10e:	438a      	bics	r2, r1
 800c110:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	2220      	movs	r2, #32
 800c116:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2200      	movs	r2, #0
 800c11c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c122:	2b01      	cmp	r3, #1
 800c124:	d110      	bne.n	800c148 <UART_RxISR_16BIT+0xbc>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	681a      	ldr	r2, [r3, #0]
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	2110      	movs	r1, #16
 800c132:	438a      	bics	r2, r1
 800c134:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	2258      	movs	r2, #88	; 0x58
 800c13a:	5a9a      	ldrh	r2, [r3, r2]
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	0011      	movs	r1, r2
 800c140:	0018      	movs	r0, r3
 800c142:	f7ff f96d 	bl	800b420 <HAL_UARTEx_RxEventCallback>
 800c146:	e003      	b.n	800c150 <UART_RxISR_16BIT+0xc4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	0018      	movs	r0, r3
 800c14c:	f7f9 f8be 	bl	80052cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2200      	movs	r2, #0
 800c154:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c156:	e007      	b.n	800c168 <UART_RxISR_16BIT+0xdc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	699a      	ldr	r2, [r3, #24]
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	2108      	movs	r1, #8
 800c164:	430a      	orrs	r2, r1
 800c166:	619a      	str	r2, [r3, #24]
}
 800c168:	46c0      	nop			; (mov r8, r8)
 800c16a:	46bd      	mov	sp, r7
 800c16c:	b004      	add	sp, #16
 800c16e:	bd80      	pop	{r7, pc}
 800c170:	fffffedf 	.word	0xfffffedf

0800c174 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b082      	sub	sp, #8
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c17c:	46c0      	nop			; (mov r8, r8)
 800c17e:	46bd      	mov	sp, r7
 800c180:	b002      	add	sp, #8
 800c182:	bd80      	pop	{r7, pc}

0800c184 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b088      	sub	sp, #32
 800c188:	af02      	add	r7, sp, #8
 800c18a:	60f8      	str	r0, [r7, #12]
 800c18c:	1d3b      	adds	r3, r7, #4
 800c18e:	6019      	str	r1, [r3, #0]
 800c190:	605a      	str	r2, [r3, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c192:	2317      	movs	r3, #23
 800c194:	18fb      	adds	r3, r7, r3
 800c196:	2200      	movs	r2, #0
 800c198:	701a      	strb	r2, [r3, #0]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	2274      	movs	r2, #116	; 0x74
 800c19e:	5c9b      	ldrb	r3, [r3, r2]
 800c1a0:	2b01      	cmp	r3, #1
 800c1a2:	d101      	bne.n	800c1a8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x24>
 800c1a4:	2302      	movs	r3, #2
 800c1a6:	e04a      	b.n	800c23e <HAL_UARTEx_StopModeWakeUpSourceConfig+0xba>
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	2274      	movs	r2, #116	; 0x74
 800c1ac:	2101      	movs	r1, #1
 800c1ae:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	2224      	movs	r2, #36	; 0x24
 800c1b4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	681a      	ldr	r2, [r3, #0]
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	2101      	movs	r1, #1
 800c1c2:	438a      	bics	r2, r1
 800c1c4:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	689b      	ldr	r3, [r3, #8]
 800c1cc:	4a1e      	ldr	r2, [pc, #120]	; (800c248 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc4>)
 800c1ce:	4013      	ands	r3, r2
 800c1d0:	0019      	movs	r1, r3
 800c1d2:	1d3b      	adds	r3, r7, #4
 800c1d4:	681a      	ldr	r2, [r3, #0]
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	430a      	orrs	r2, r1
 800c1dc:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800c1de:	1d3b      	adds	r3, r7, #4
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d105      	bne.n	800c1f2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x6e>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800c1e6:	1d3b      	adds	r3, r7, #4
 800c1e8:	68f8      	ldr	r0, [r7, #12]
 800c1ea:	6819      	ldr	r1, [r3, #0]
 800c1ec:	685a      	ldr	r2, [r3, #4]
 800c1ee:	f000 f84f 	bl	800c290 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	681a      	ldr	r2, [r3, #0]
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	2101      	movs	r1, #1
 800c1fe:	430a      	orrs	r2, r1
 800c200:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c202:	f7f8 fdea 	bl	8004dda <HAL_GetTick>
 800c206:	0003      	movs	r3, r0
 800c208:	613b      	str	r3, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c20a:	693b      	ldr	r3, [r7, #16]
 800c20c:	2280      	movs	r2, #128	; 0x80
 800c20e:	03d1      	lsls	r1, r2, #15
 800c210:	68f8      	ldr	r0, [r7, #12]
 800c212:	4a0e      	ldr	r2, [pc, #56]	; (800c24c <HAL_UARTEx_StopModeWakeUpSourceConfig+0xc8>)
 800c214:	9200      	str	r2, [sp, #0]
 800c216:	2200      	movs	r2, #0
 800c218:	f7ff fcc8 	bl	800bbac <UART_WaitOnFlagUntilTimeout>
 800c21c:	1e03      	subs	r3, r0, #0
 800c21e:	d004      	beq.n	800c22a <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa6>
  {
    status = HAL_TIMEOUT;
 800c220:	2317      	movs	r3, #23
 800c222:	18fb      	adds	r3, r7, r3
 800c224:	2203      	movs	r2, #3
 800c226:	701a      	strb	r2, [r3, #0]
 800c228:	e002      	b.n	800c230 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xac>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	2220      	movs	r2, #32
 800c22e:	679a      	str	r2, [r3, #120]	; 0x78
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	2274      	movs	r2, #116	; 0x74
 800c234:	2100      	movs	r1, #0
 800c236:	5499      	strb	r1, [r3, r2]

  return status;
 800c238:	2317      	movs	r3, #23
 800c23a:	18fb      	adds	r3, r7, r3
 800c23c:	781b      	ldrb	r3, [r3, #0]
}
 800c23e:	0018      	movs	r0, r3
 800c240:	46bd      	mov	sp, r7
 800c242:	b006      	add	sp, #24
 800c244:	bd80      	pop	{r7, pc}
 800c246:	46c0      	nop			; (mov r8, r8)
 800c248:	ffcfffff 	.word	0xffcfffff
 800c24c:	01ffffff 	.word	0x01ffffff

0800c250 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b082      	sub	sp, #8
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2274      	movs	r2, #116	; 0x74
 800c25c:	5c9b      	ldrb	r3, [r3, r2]
 800c25e:	2b01      	cmp	r3, #1
 800c260:	d101      	bne.n	800c266 <HAL_UARTEx_EnableStopMode+0x16>
 800c262:	2302      	movs	r3, #2
 800c264:	e010      	b.n	800c288 <HAL_UARTEx_EnableStopMode+0x38>
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	2274      	movs	r2, #116	; 0x74
 800c26a:	2101      	movs	r1, #1
 800c26c:	5499      	strb	r1, [r3, r2]

  /* Set UESM bit */
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	681a      	ldr	r2, [r3, #0]
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	2102      	movs	r1, #2
 800c27a:	430a      	orrs	r2, r1
 800c27c:	601a      	str	r2, [r3, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	2274      	movs	r2, #116	; 0x74
 800c282:	2100      	movs	r1, #0
 800c284:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c286:	2300      	movs	r3, #0
}
 800c288:	0018      	movs	r0, r3
 800c28a:	46bd      	mov	sp, r7
 800c28c:	b002      	add	sp, #8
 800c28e:	bd80      	pop	{r7, pc}

0800c290 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b084      	sub	sp, #16
 800c294:	af00      	add	r7, sp, #0
 800c296:	60f8      	str	r0, [r7, #12]
 800c298:	1d3b      	adds	r3, r7, #4
 800c29a:	6019      	str	r1, [r3, #0]
 800c29c:	605a      	str	r2, [r3, #4]
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	685b      	ldr	r3, [r3, #4]
 800c2a4:	2210      	movs	r2, #16
 800c2a6:	4393      	bics	r3, r2
 800c2a8:	001a      	movs	r2, r3
 800c2aa:	1d3b      	adds	r3, r7, #4
 800c2ac:	889b      	ldrh	r3, [r3, #4]
 800c2ae:	0019      	movs	r1, r3
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	430a      	orrs	r2, r1
 800c2b6:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	685b      	ldr	r3, [r3, #4]
 800c2be:	021b      	lsls	r3, r3, #8
 800c2c0:	0a19      	lsrs	r1, r3, #8
 800c2c2:	1d3b      	adds	r3, r7, #4
 800c2c4:	799b      	ldrb	r3, [r3, #6]
 800c2c6:	061a      	lsls	r2, r3, #24
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	430a      	orrs	r2, r1
 800c2ce:	605a      	str	r2, [r3, #4]
}
 800c2d0:	46c0      	nop			; (mov r8, r8)
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	b004      	add	sp, #16
 800c2d6:	bd80      	pop	{r7, pc}

0800c2d8 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b082      	sub	sp, #8
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	33f1      	adds	r3, #241	; 0xf1
 800c2e4:	2210      	movs	r2, #16
 800c2e6:	2100      	movs	r1, #0
 800c2e8:	0018      	movs	r0, r3
 800c2ea:	f00d f98f 	bl	801960c <memset1>
    ctx->M_n = 0;
 800c2ee:	687a      	ldr	r2, [r7, #4]
 800c2f0:	238a      	movs	r3, #138	; 0x8a
 800c2f2:	005b      	lsls	r3, r3, #1
 800c2f4:	2100      	movs	r1, #0
 800c2f6:	50d1      	str	r1, [r2, r3]
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	22f0      	movs	r2, #240	; 0xf0
 800c2fc:	2100      	movs	r1, #0
 800c2fe:	0018      	movs	r0, r3
 800c300:	f00d f984 	bl	801960c <memset1>
}
 800c304:	46c0      	nop			; (mov r8, r8)
 800c306:	46bd      	mov	sp, r7
 800c308:	b002      	add	sp, #8
 800c30a:	bd80      	pop	{r7, pc}

0800c30c <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b082      	sub	sp, #8
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
 800c314:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800c316:	687a      	ldr	r2, [r7, #4]
 800c318:	683b      	ldr	r3, [r7, #0]
 800c31a:	2110      	movs	r1, #16
 800c31c:	0018      	movs	r0, r3
 800c31e:	f000 feaf 	bl	800d080 <lorawan_aes_set_key>
}
 800c322:	46c0      	nop			; (mov r8, r8)
 800c324:	46bd      	mov	sp, r7
 800c326:	b002      	add	sp, #8
 800c328:	bd80      	pop	{r7, pc}

0800c32a <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800c32a:	b590      	push	{r4, r7, lr}
 800c32c:	b08d      	sub	sp, #52	; 0x34
 800c32e:	af00      	add	r7, sp, #0
 800c330:	60f8      	str	r0, [r7, #12]
 800c332:	60b9      	str	r1, [r7, #8]
 800c334:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800c336:	68fa      	ldr	r2, [r7, #12]
 800c338:	238a      	movs	r3, #138	; 0x8a
 800c33a:	005b      	lsls	r3, r3, #1
 800c33c:	58d3      	ldr	r3, [r2, r3]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d100      	bne.n	800c344 <AES_CMAC_Update+0x1a>
 800c342:	e0a4      	b.n	800c48e <AES_CMAC_Update+0x164>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800c344:	68fa      	ldr	r2, [r7, #12]
 800c346:	238a      	movs	r3, #138	; 0x8a
 800c348:	005b      	lsls	r3, r3, #1
 800c34a:	58d3      	ldr	r3, [r2, r3]
 800c34c:	2210      	movs	r2, #16
 800c34e:	1ad2      	subs	r2, r2, r3
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	4293      	cmp	r3, r2
 800c354:	d900      	bls.n	800c358 <AES_CMAC_Update+0x2e>
 800c356:	0013      	movs	r3, r2
 800c358:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	1c9a      	adds	r2, r3, #2
 800c35e:	32ff      	adds	r2, #255	; 0xff
 800c360:	68f9      	ldr	r1, [r7, #12]
 800c362:	238a      	movs	r3, #138	; 0x8a
 800c364:	005b      	lsls	r3, r3, #1
 800c366:	58cb      	ldr	r3, [r1, r3]
 800c368:	18d3      	adds	r3, r2, r3
 800c36a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c36c:	b292      	uxth	r2, r2
 800c36e:	68b9      	ldr	r1, [r7, #8]
 800c370:	0018      	movs	r0, r3
 800c372:	f00d f90d 	bl	8019590 <memcpy1>
        ctx->M_n += mlen;
 800c376:	68fa      	ldr	r2, [r7, #12]
 800c378:	238a      	movs	r3, #138	; 0x8a
 800c37a:	005b      	lsls	r3, r3, #1
 800c37c:	58d2      	ldr	r2, [r2, r3]
 800c37e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c380:	18d1      	adds	r1, r2, r3
 800c382:	68fa      	ldr	r2, [r7, #12]
 800c384:	238a      	movs	r3, #138	; 0x8a
 800c386:	005b      	lsls	r3, r3, #1
 800c388:	50d1      	str	r1, [r2, r3]
        if( ctx->M_n < 16 || len == mlen )
 800c38a:	68fa      	ldr	r2, [r7, #12]
 800c38c:	238a      	movs	r3, #138	; 0x8a
 800c38e:	005b      	lsls	r3, r3, #1
 800c390:	58d3      	ldr	r3, [r2, r3]
 800c392:	2b0f      	cmp	r3, #15
 800c394:	d800      	bhi.n	800c398 <AES_CMAC_Update+0x6e>
 800c396:	e08c      	b.n	800c4b2 <AES_CMAC_Update+0x188>
 800c398:	687a      	ldr	r2, [r7, #4]
 800c39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c39c:	429a      	cmp	r2, r3
 800c39e:	d100      	bne.n	800c3a2 <AES_CMAC_Update+0x78>
 800c3a0:	e087      	b.n	800c4b2 <AES_CMAC_Update+0x188>
            return;
        XOR( ctx->M_last, ctx->X );
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c3a6:	e018      	b.n	800c3da <AES_CMAC_Update+0xb0>
 800c3a8:	68fa      	ldr	r2, [r7, #12]
 800c3aa:	21f1      	movs	r1, #241	; 0xf1
 800c3ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ae:	18d3      	adds	r3, r2, r3
 800c3b0:	185b      	adds	r3, r3, r1
 800c3b2:	781a      	ldrb	r2, [r3, #0]
 800c3b4:	68f8      	ldr	r0, [r7, #12]
 800c3b6:	2302      	movs	r3, #2
 800c3b8:	33ff      	adds	r3, #255	; 0xff
 800c3ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c3bc:	1841      	adds	r1, r0, r1
 800c3be:	18cb      	adds	r3, r1, r3
 800c3c0:	781b      	ldrb	r3, [r3, #0]
 800c3c2:	4053      	eors	r3, r2
 800c3c4:	b2d8      	uxtb	r0, r3
 800c3c6:	68fa      	ldr	r2, [r7, #12]
 800c3c8:	21f1      	movs	r1, #241	; 0xf1
 800c3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3cc:	18d3      	adds	r3, r2, r3
 800c3ce:	185b      	adds	r3, r3, r1
 800c3d0:	1c02      	adds	r2, r0, #0
 800c3d2:	701a      	strb	r2, [r3, #0]
 800c3d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3d6:	3301      	adds	r3, #1
 800c3d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3dc:	2b0f      	cmp	r3, #15
 800c3de:	dde3      	ble.n	800c3a8 <AES_CMAC_Update+0x7e>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	33f1      	adds	r3, #241	; 0xf1
 800c3e4:	0019      	movs	r1, r3
 800c3e6:	2414      	movs	r4, #20
 800c3e8:	193b      	adds	r3, r7, r4
 800c3ea:	2210      	movs	r2, #16
 800c3ec:	0018      	movs	r0, r3
 800c3ee:	f00d f8cf 	bl	8019590 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800c3f2:	68fa      	ldr	r2, [r7, #12]
 800c3f4:	1939      	adds	r1, r7, r4
 800c3f6:	193b      	adds	r3, r7, r4
 800c3f8:	0018      	movs	r0, r3
 800c3fa:	f000 ff7d 	bl	800d2f8 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	33f1      	adds	r3, #241	; 0xf1
 800c402:	1939      	adds	r1, r7, r4
 800c404:	2210      	movs	r2, #16
 800c406:	0018      	movs	r0, r3
 800c408:	f00d f8c2 	bl	8019590 <memcpy1>

        data += mlen;
 800c40c:	68ba      	ldr	r2, [r7, #8]
 800c40e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c410:	18d3      	adds	r3, r2, r3
 800c412:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800c414:	687a      	ldr	r2, [r7, #4]
 800c416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c418:	1ad3      	subs	r3, r2, r3
 800c41a:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800c41c:	e037      	b.n	800c48e <AES_CMAC_Update+0x164>
    { /* not last block */

        XOR( data, ctx->X );
 800c41e:	2300      	movs	r3, #0
 800c420:	62bb      	str	r3, [r7, #40]	; 0x28
 800c422:	e015      	b.n	800c450 <AES_CMAC_Update+0x126>
 800c424:	68fa      	ldr	r2, [r7, #12]
 800c426:	21f1      	movs	r1, #241	; 0xf1
 800c428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c42a:	18d3      	adds	r3, r2, r3
 800c42c:	185b      	adds	r3, r3, r1
 800c42e:	781a      	ldrb	r2, [r3, #0]
 800c430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c432:	68b9      	ldr	r1, [r7, #8]
 800c434:	18cb      	adds	r3, r1, r3
 800c436:	781b      	ldrb	r3, [r3, #0]
 800c438:	4053      	eors	r3, r2
 800c43a:	b2d8      	uxtb	r0, r3
 800c43c:	68fa      	ldr	r2, [r7, #12]
 800c43e:	21f1      	movs	r1, #241	; 0xf1
 800c440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c442:	18d3      	adds	r3, r2, r3
 800c444:	185b      	adds	r3, r3, r1
 800c446:	1c02      	adds	r2, r0, #0
 800c448:	701a      	strb	r2, [r3, #0]
 800c44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c44c:	3301      	adds	r3, #1
 800c44e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c452:	2b0f      	cmp	r3, #15
 800c454:	dde6      	ble.n	800c424 <AES_CMAC_Update+0xfa>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	33f1      	adds	r3, #241	; 0xf1
 800c45a:	0019      	movs	r1, r3
 800c45c:	2414      	movs	r4, #20
 800c45e:	193b      	adds	r3, r7, r4
 800c460:	2210      	movs	r2, #16
 800c462:	0018      	movs	r0, r3
 800c464:	f00d f894 	bl	8019590 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800c468:	68fa      	ldr	r2, [r7, #12]
 800c46a:	1939      	adds	r1, r7, r4
 800c46c:	193b      	adds	r3, r7, r4
 800c46e:	0018      	movs	r0, r3
 800c470:	f000 ff42 	bl	800d2f8 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	33f1      	adds	r3, #241	; 0xf1
 800c478:	1939      	adds	r1, r7, r4
 800c47a:	2210      	movs	r2, #16
 800c47c:	0018      	movs	r0, r3
 800c47e:	f00d f887 	bl	8019590 <memcpy1>

        data += 16;
 800c482:	68bb      	ldr	r3, [r7, #8]
 800c484:	3310      	adds	r3, #16
 800c486:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	3b10      	subs	r3, #16
 800c48c:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	2b10      	cmp	r3, #16
 800c492:	d8c4      	bhi.n	800c41e <AES_CMAC_Update+0xf4>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	3302      	adds	r3, #2
 800c498:	33ff      	adds	r3, #255	; 0xff
 800c49a:	687a      	ldr	r2, [r7, #4]
 800c49c:	b292      	uxth	r2, r2
 800c49e:	68b9      	ldr	r1, [r7, #8]
 800c4a0:	0018      	movs	r0, r3
 800c4a2:	f00d f875 	bl	8019590 <memcpy1>
    ctx->M_n = len;
 800c4a6:	68fa      	ldr	r2, [r7, #12]
 800c4a8:	238a      	movs	r3, #138	; 0x8a
 800c4aa:	005b      	lsls	r3, r3, #1
 800c4ac:	6879      	ldr	r1, [r7, #4]
 800c4ae:	50d1      	str	r1, [r2, r3]
 800c4b0:	e000      	b.n	800c4b4 <AES_CMAC_Update+0x18a>
            return;
 800c4b2:	46c0      	nop			; (mov r8, r8)
}
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	b00d      	add	sp, #52	; 0x34
 800c4b8:	bd90      	pop	{r4, r7, pc}

0800c4ba <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800c4ba:	b590      	push	{r4, r7, lr}
 800c4bc:	b093      	sub	sp, #76	; 0x4c
 800c4be:	af00      	add	r7, sp, #0
 800c4c0:	6078      	str	r0, [r7, #4]
 800c4c2:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800c4c4:	241c      	movs	r4, #28
 800c4c6:	193b      	adds	r3, r7, r4
 800c4c8:	2210      	movs	r2, #16
 800c4ca:	2100      	movs	r1, #0
 800c4cc:	0018      	movs	r0, r3
 800c4ce:	f00d f89d 	bl	801960c <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800c4d2:	683a      	ldr	r2, [r7, #0]
 800c4d4:	1939      	adds	r1, r7, r4
 800c4d6:	193b      	adds	r3, r7, r4
 800c4d8:	0018      	movs	r0, r3
 800c4da:	f000 ff0d 	bl	800d2f8 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800c4de:	193b      	adds	r3, r7, r4
 800c4e0:	781b      	ldrb	r3, [r3, #0]
 800c4e2:	b25b      	sxtb	r3, r3
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	da2e      	bge.n	800c546 <AES_CMAC_Final+0x8c>
    {
        LSHIFT( K, K );
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	647b      	str	r3, [r7, #68]	; 0x44
 800c4ec:	e018      	b.n	800c520 <AES_CMAC_Final+0x66>
 800c4ee:	201c      	movs	r0, #28
 800c4f0:	183a      	adds	r2, r7, r0
 800c4f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c4f4:	18d3      	adds	r3, r2, r3
 800c4f6:	781b      	ldrb	r3, [r3, #0]
 800c4f8:	005b      	lsls	r3, r3, #1
 800c4fa:	b25a      	sxtb	r2, r3
 800c4fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c4fe:	3301      	adds	r3, #1
 800c500:	1839      	adds	r1, r7, r0
 800c502:	5ccb      	ldrb	r3, [r1, r3]
 800c504:	09db      	lsrs	r3, r3, #7
 800c506:	b2db      	uxtb	r3, r3
 800c508:	b25b      	sxtb	r3, r3
 800c50a:	4313      	orrs	r3, r2
 800c50c:	b25b      	sxtb	r3, r3
 800c50e:	b2d9      	uxtb	r1, r3
 800c510:	183a      	adds	r2, r7, r0
 800c512:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c514:	18d3      	adds	r3, r2, r3
 800c516:	1c0a      	adds	r2, r1, #0
 800c518:	701a      	strb	r2, [r3, #0]
 800c51a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c51c:	3301      	adds	r3, #1
 800c51e:	647b      	str	r3, [r7, #68]	; 0x44
 800c520:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c522:	2b0e      	cmp	r3, #14
 800c524:	dde3      	ble.n	800c4ee <AES_CMAC_Final+0x34>
 800c526:	211c      	movs	r1, #28
 800c528:	187b      	adds	r3, r7, r1
 800c52a:	7bdb      	ldrb	r3, [r3, #15]
 800c52c:	18db      	adds	r3, r3, r3
 800c52e:	b2da      	uxtb	r2, r3
 800c530:	187b      	adds	r3, r7, r1
 800c532:	73da      	strb	r2, [r3, #15]
        K[15] ^= 0x87;
 800c534:	187b      	adds	r3, r7, r1
 800c536:	7bdb      	ldrb	r3, [r3, #15]
 800c538:	2279      	movs	r2, #121	; 0x79
 800c53a:	4252      	negs	r2, r2
 800c53c:	4053      	eors	r3, r2
 800c53e:	b2da      	uxtb	r2, r3
 800c540:	187b      	adds	r3, r7, r1
 800c542:	73da      	strb	r2, [r3, #15]
 800c544:	e025      	b.n	800c592 <AES_CMAC_Final+0xd8>
    }
    else
        LSHIFT( K, K );
 800c546:	2300      	movs	r3, #0
 800c548:	643b      	str	r3, [r7, #64]	; 0x40
 800c54a:	e018      	b.n	800c57e <AES_CMAC_Final+0xc4>
 800c54c:	201c      	movs	r0, #28
 800c54e:	183a      	adds	r2, r7, r0
 800c550:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c552:	18d3      	adds	r3, r2, r3
 800c554:	781b      	ldrb	r3, [r3, #0]
 800c556:	005b      	lsls	r3, r3, #1
 800c558:	b25a      	sxtb	r2, r3
 800c55a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c55c:	3301      	adds	r3, #1
 800c55e:	1839      	adds	r1, r7, r0
 800c560:	5ccb      	ldrb	r3, [r1, r3]
 800c562:	09db      	lsrs	r3, r3, #7
 800c564:	b2db      	uxtb	r3, r3
 800c566:	b25b      	sxtb	r3, r3
 800c568:	4313      	orrs	r3, r2
 800c56a:	b25b      	sxtb	r3, r3
 800c56c:	b2d9      	uxtb	r1, r3
 800c56e:	183a      	adds	r2, r7, r0
 800c570:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c572:	18d3      	adds	r3, r2, r3
 800c574:	1c0a      	adds	r2, r1, #0
 800c576:	701a      	strb	r2, [r3, #0]
 800c578:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c57a:	3301      	adds	r3, #1
 800c57c:	643b      	str	r3, [r7, #64]	; 0x40
 800c57e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c580:	2b0e      	cmp	r3, #14
 800c582:	dde3      	ble.n	800c54c <AES_CMAC_Final+0x92>
 800c584:	211c      	movs	r1, #28
 800c586:	187b      	adds	r3, r7, r1
 800c588:	7bdb      	ldrb	r3, [r3, #15]
 800c58a:	18db      	adds	r3, r3, r3
 800c58c:	b2da      	uxtb	r2, r3
 800c58e:	187b      	adds	r3, r7, r1
 800c590:	73da      	strb	r2, [r3, #15]

    if( ctx->M_n == 16 )
 800c592:	683a      	ldr	r2, [r7, #0]
 800c594:	238a      	movs	r3, #138	; 0x8a
 800c596:	005b      	lsls	r3, r3, #1
 800c598:	58d3      	ldr	r3, [r2, r3]
 800c59a:	2b10      	cmp	r3, #16
 800c59c:	d11f      	bne.n	800c5de <AES_CMAC_Final+0x124>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800c59e:	2300      	movs	r3, #0
 800c5a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5a2:	e018      	b.n	800c5d6 <AES_CMAC_Final+0x11c>
 800c5a4:	6839      	ldr	r1, [r7, #0]
 800c5a6:	2302      	movs	r3, #2
 800c5a8:	33ff      	adds	r3, #255	; 0xff
 800c5aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c5ac:	188a      	adds	r2, r1, r2
 800c5ae:	18d3      	adds	r3, r2, r3
 800c5b0:	781a      	ldrb	r2, [r3, #0]
 800c5b2:	231c      	movs	r3, #28
 800c5b4:	18f9      	adds	r1, r7, r3
 800c5b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5b8:	18cb      	adds	r3, r1, r3
 800c5ba:	781b      	ldrb	r3, [r3, #0]
 800c5bc:	4053      	eors	r3, r2
 800c5be:	b2d8      	uxtb	r0, r3
 800c5c0:	6839      	ldr	r1, [r7, #0]
 800c5c2:	2302      	movs	r3, #2
 800c5c4:	33ff      	adds	r3, #255	; 0xff
 800c5c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c5c8:	188a      	adds	r2, r1, r2
 800c5ca:	18d3      	adds	r3, r2, r3
 800c5cc:	1c02      	adds	r2, r0, #0
 800c5ce:	701a      	strb	r2, [r3, #0]
 800c5d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5d2:	3301      	adds	r3, #1
 800c5d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5d8:	2b0f      	cmp	r3, #15
 800c5da:	dde3      	ble.n	800c5a4 <AES_CMAC_Final+0xea>
 800c5dc:	e09f      	b.n	800c71e <AES_CMAC_Final+0x264>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800c5de:	231c      	movs	r3, #28
 800c5e0:	18fb      	adds	r3, r7, r3
 800c5e2:	781b      	ldrb	r3, [r3, #0]
 800c5e4:	b25b      	sxtb	r3, r3
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	da2e      	bge.n	800c648 <AES_CMAC_Final+0x18e>
        {
            LSHIFT( K, K );
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	63bb      	str	r3, [r7, #56]	; 0x38
 800c5ee:	e018      	b.n	800c622 <AES_CMAC_Final+0x168>
 800c5f0:	201c      	movs	r0, #28
 800c5f2:	183a      	adds	r2, r7, r0
 800c5f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5f6:	18d3      	adds	r3, r2, r3
 800c5f8:	781b      	ldrb	r3, [r3, #0]
 800c5fa:	005b      	lsls	r3, r3, #1
 800c5fc:	b25a      	sxtb	r2, r3
 800c5fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c600:	3301      	adds	r3, #1
 800c602:	1839      	adds	r1, r7, r0
 800c604:	5ccb      	ldrb	r3, [r1, r3]
 800c606:	09db      	lsrs	r3, r3, #7
 800c608:	b2db      	uxtb	r3, r3
 800c60a:	b25b      	sxtb	r3, r3
 800c60c:	4313      	orrs	r3, r2
 800c60e:	b25b      	sxtb	r3, r3
 800c610:	b2d9      	uxtb	r1, r3
 800c612:	183a      	adds	r2, r7, r0
 800c614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c616:	18d3      	adds	r3, r2, r3
 800c618:	1c0a      	adds	r2, r1, #0
 800c61a:	701a      	strb	r2, [r3, #0]
 800c61c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c61e:	3301      	adds	r3, #1
 800c620:	63bb      	str	r3, [r7, #56]	; 0x38
 800c622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c624:	2b0e      	cmp	r3, #14
 800c626:	dde3      	ble.n	800c5f0 <AES_CMAC_Final+0x136>
 800c628:	211c      	movs	r1, #28
 800c62a:	187b      	adds	r3, r7, r1
 800c62c:	7bdb      	ldrb	r3, [r3, #15]
 800c62e:	18db      	adds	r3, r3, r3
 800c630:	b2da      	uxtb	r2, r3
 800c632:	187b      	adds	r3, r7, r1
 800c634:	73da      	strb	r2, [r3, #15]
            K[15] ^= 0x87;
 800c636:	187b      	adds	r3, r7, r1
 800c638:	7bdb      	ldrb	r3, [r3, #15]
 800c63a:	2279      	movs	r2, #121	; 0x79
 800c63c:	4252      	negs	r2, r2
 800c63e:	4053      	eors	r3, r2
 800c640:	b2da      	uxtb	r2, r3
 800c642:	187b      	adds	r3, r7, r1
 800c644:	73da      	strb	r2, [r3, #15]
 800c646:	e025      	b.n	800c694 <AES_CMAC_Final+0x1da>
        }
        else
            LSHIFT( K, K );
 800c648:	2300      	movs	r3, #0
 800c64a:	637b      	str	r3, [r7, #52]	; 0x34
 800c64c:	e018      	b.n	800c680 <AES_CMAC_Final+0x1c6>
 800c64e:	201c      	movs	r0, #28
 800c650:	183a      	adds	r2, r7, r0
 800c652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c654:	18d3      	adds	r3, r2, r3
 800c656:	781b      	ldrb	r3, [r3, #0]
 800c658:	005b      	lsls	r3, r3, #1
 800c65a:	b25a      	sxtb	r2, r3
 800c65c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c65e:	3301      	adds	r3, #1
 800c660:	1839      	adds	r1, r7, r0
 800c662:	5ccb      	ldrb	r3, [r1, r3]
 800c664:	09db      	lsrs	r3, r3, #7
 800c666:	b2db      	uxtb	r3, r3
 800c668:	b25b      	sxtb	r3, r3
 800c66a:	4313      	orrs	r3, r2
 800c66c:	b25b      	sxtb	r3, r3
 800c66e:	b2d9      	uxtb	r1, r3
 800c670:	183a      	adds	r2, r7, r0
 800c672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c674:	18d3      	adds	r3, r2, r3
 800c676:	1c0a      	adds	r2, r1, #0
 800c678:	701a      	strb	r2, [r3, #0]
 800c67a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c67c:	3301      	adds	r3, #1
 800c67e:	637b      	str	r3, [r7, #52]	; 0x34
 800c680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c682:	2b0e      	cmp	r3, #14
 800c684:	dde3      	ble.n	800c64e <AES_CMAC_Final+0x194>
 800c686:	211c      	movs	r1, #28
 800c688:	187b      	adds	r3, r7, r1
 800c68a:	7bdb      	ldrb	r3, [r3, #15]
 800c68c:	18db      	adds	r3, r3, r3
 800c68e:	b2da      	uxtb	r2, r3
 800c690:	187b      	adds	r3, r7, r1
 800c692:	73da      	strb	r2, [r3, #15]

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800c694:	683a      	ldr	r2, [r7, #0]
 800c696:	238a      	movs	r3, #138	; 0x8a
 800c698:	005b      	lsls	r3, r3, #1
 800c69a:	58d2      	ldr	r2, [r2, r3]
 800c69c:	6839      	ldr	r1, [r7, #0]
 800c69e:	2302      	movs	r3, #2
 800c6a0:	33ff      	adds	r3, #255	; 0xff
 800c6a2:	188a      	adds	r2, r1, r2
 800c6a4:	18d3      	adds	r3, r2, r3
 800c6a6:	2280      	movs	r2, #128	; 0x80
 800c6a8:	701a      	strb	r2, [r3, #0]
        while( ++ctx->M_n < 16 )
 800c6aa:	e00a      	b.n	800c6c2 <AES_CMAC_Final+0x208>
            ctx->M_last[ctx->M_n] = 0;
 800c6ac:	683a      	ldr	r2, [r7, #0]
 800c6ae:	238a      	movs	r3, #138	; 0x8a
 800c6b0:	005b      	lsls	r3, r3, #1
 800c6b2:	58d2      	ldr	r2, [r2, r3]
 800c6b4:	6839      	ldr	r1, [r7, #0]
 800c6b6:	2302      	movs	r3, #2
 800c6b8:	33ff      	adds	r3, #255	; 0xff
 800c6ba:	188a      	adds	r2, r1, r2
 800c6bc:	18d3      	adds	r3, r2, r3
 800c6be:	2200      	movs	r2, #0
 800c6c0:	701a      	strb	r2, [r3, #0]
        while( ++ctx->M_n < 16 )
 800c6c2:	683a      	ldr	r2, [r7, #0]
 800c6c4:	238a      	movs	r3, #138	; 0x8a
 800c6c6:	005b      	lsls	r3, r3, #1
 800c6c8:	58d3      	ldr	r3, [r2, r3]
 800c6ca:	1c59      	adds	r1, r3, #1
 800c6cc:	683a      	ldr	r2, [r7, #0]
 800c6ce:	238a      	movs	r3, #138	; 0x8a
 800c6d0:	005b      	lsls	r3, r3, #1
 800c6d2:	50d1      	str	r1, [r2, r3]
 800c6d4:	683a      	ldr	r2, [r7, #0]
 800c6d6:	238a      	movs	r3, #138	; 0x8a
 800c6d8:	005b      	lsls	r3, r3, #1
 800c6da:	58d3      	ldr	r3, [r2, r3]
 800c6dc:	2b0f      	cmp	r3, #15
 800c6de:	d9e5      	bls.n	800c6ac <AES_CMAC_Final+0x1f2>

        XOR( K, ctx->M_last );
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	633b      	str	r3, [r7, #48]	; 0x30
 800c6e4:	e018      	b.n	800c718 <AES_CMAC_Final+0x25e>
 800c6e6:	6839      	ldr	r1, [r7, #0]
 800c6e8:	2302      	movs	r3, #2
 800c6ea:	33ff      	adds	r3, #255	; 0xff
 800c6ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6ee:	188a      	adds	r2, r1, r2
 800c6f0:	18d3      	adds	r3, r2, r3
 800c6f2:	781a      	ldrb	r2, [r3, #0]
 800c6f4:	231c      	movs	r3, #28
 800c6f6:	18f9      	adds	r1, r7, r3
 800c6f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6fa:	18cb      	adds	r3, r1, r3
 800c6fc:	781b      	ldrb	r3, [r3, #0]
 800c6fe:	4053      	eors	r3, r2
 800c700:	b2d8      	uxtb	r0, r3
 800c702:	6839      	ldr	r1, [r7, #0]
 800c704:	2302      	movs	r3, #2
 800c706:	33ff      	adds	r3, #255	; 0xff
 800c708:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c70a:	188a      	adds	r2, r1, r2
 800c70c:	18d3      	adds	r3, r2, r3
 800c70e:	1c02      	adds	r2, r0, #0
 800c710:	701a      	strb	r2, [r3, #0]
 800c712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c714:	3301      	adds	r3, #1
 800c716:	633b      	str	r3, [r7, #48]	; 0x30
 800c718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c71a:	2b0f      	cmp	r3, #15
 800c71c:	dde3      	ble.n	800c6e6 <AES_CMAC_Final+0x22c>
    }
    XOR( ctx->M_last, ctx->X );
 800c71e:	2300      	movs	r3, #0
 800c720:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c722:	e018      	b.n	800c756 <AES_CMAC_Final+0x29c>
 800c724:	683a      	ldr	r2, [r7, #0]
 800c726:	21f1      	movs	r1, #241	; 0xf1
 800c728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c72a:	18d3      	adds	r3, r2, r3
 800c72c:	185b      	adds	r3, r3, r1
 800c72e:	781a      	ldrb	r2, [r3, #0]
 800c730:	6838      	ldr	r0, [r7, #0]
 800c732:	2302      	movs	r3, #2
 800c734:	33ff      	adds	r3, #255	; 0xff
 800c736:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c738:	1841      	adds	r1, r0, r1
 800c73a:	18cb      	adds	r3, r1, r3
 800c73c:	781b      	ldrb	r3, [r3, #0]
 800c73e:	4053      	eors	r3, r2
 800c740:	b2d8      	uxtb	r0, r3
 800c742:	683a      	ldr	r2, [r7, #0]
 800c744:	21f1      	movs	r1, #241	; 0xf1
 800c746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c748:	18d3      	adds	r3, r2, r3
 800c74a:	185b      	adds	r3, r3, r1
 800c74c:	1c02      	adds	r2, r0, #0
 800c74e:	701a      	strb	r2, [r3, #0]
 800c750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c752:	3301      	adds	r3, #1
 800c754:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c758:	2b0f      	cmp	r3, #15
 800c75a:	dde3      	ble.n	800c724 <AES_CMAC_Final+0x26a>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	33f1      	adds	r3, #241	; 0xf1
 800c760:	0019      	movs	r1, r3
 800c762:	240c      	movs	r4, #12
 800c764:	193b      	adds	r3, r7, r4
 800c766:	2210      	movs	r2, #16
 800c768:	0018      	movs	r0, r3
 800c76a:	f00c ff11 	bl	8019590 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800c76e:	683a      	ldr	r2, [r7, #0]
 800c770:	6879      	ldr	r1, [r7, #4]
 800c772:	193b      	adds	r3, r7, r4
 800c774:	0018      	movs	r0, r3
 800c776:	f000 fdbf 	bl	800d2f8 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800c77a:	231c      	movs	r3, #28
 800c77c:	18fb      	adds	r3, r7, r3
 800c77e:	2210      	movs	r2, #16
 800c780:	2100      	movs	r1, #0
 800c782:	0018      	movs	r0, r3
 800c784:	f00c ff42 	bl	801960c <memset1>
}
 800c788:	46c0      	nop			; (mov r8, r8)
 800c78a:	46bd      	mov	sp, r7
 800c78c:	b013      	add	sp, #76	; 0x4c
 800c78e:	bd90      	pop	{r4, r7, pc}

0800c790 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b082      	sub	sp, #8
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
 800c798:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	781a      	ldrb	r2, [r3, #0]
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	3301      	adds	r3, #1
 800c7a6:	683a      	ldr	r2, [r7, #0]
 800c7a8:	7852      	ldrb	r2, [r2, #1]
 800c7aa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	3302      	adds	r3, #2
 800c7b0:	683a      	ldr	r2, [r7, #0]
 800c7b2:	7892      	ldrb	r2, [r2, #2]
 800c7b4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	3303      	adds	r3, #3
 800c7ba:	683a      	ldr	r2, [r7, #0]
 800c7bc:	78d2      	ldrb	r2, [r2, #3]
 800c7be:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	3304      	adds	r3, #4
 800c7c4:	683a      	ldr	r2, [r7, #0]
 800c7c6:	7912      	ldrb	r2, [r2, #4]
 800c7c8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	3305      	adds	r3, #5
 800c7ce:	683a      	ldr	r2, [r7, #0]
 800c7d0:	7952      	ldrb	r2, [r2, #5]
 800c7d2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	3306      	adds	r3, #6
 800c7d8:	683a      	ldr	r2, [r7, #0]
 800c7da:	7992      	ldrb	r2, [r2, #6]
 800c7dc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	3307      	adds	r3, #7
 800c7e2:	683a      	ldr	r2, [r7, #0]
 800c7e4:	79d2      	ldrb	r2, [r2, #7]
 800c7e6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	3308      	adds	r3, #8
 800c7ec:	683a      	ldr	r2, [r7, #0]
 800c7ee:	7a12      	ldrb	r2, [r2, #8]
 800c7f0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	3309      	adds	r3, #9
 800c7f6:	683a      	ldr	r2, [r7, #0]
 800c7f8:	7a52      	ldrb	r2, [r2, #9]
 800c7fa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	330a      	adds	r3, #10
 800c800:	683a      	ldr	r2, [r7, #0]
 800c802:	7a92      	ldrb	r2, [r2, #10]
 800c804:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	330b      	adds	r3, #11
 800c80a:	683a      	ldr	r2, [r7, #0]
 800c80c:	7ad2      	ldrb	r2, [r2, #11]
 800c80e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	330c      	adds	r3, #12
 800c814:	683a      	ldr	r2, [r7, #0]
 800c816:	7b12      	ldrb	r2, [r2, #12]
 800c818:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	330d      	adds	r3, #13
 800c81e:	683a      	ldr	r2, [r7, #0]
 800c820:	7b52      	ldrb	r2, [r2, #13]
 800c822:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	330e      	adds	r3, #14
 800c828:	683a      	ldr	r2, [r7, #0]
 800c82a:	7b92      	ldrb	r2, [r2, #14]
 800c82c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	330f      	adds	r3, #15
 800c832:	683a      	ldr	r2, [r7, #0]
 800c834:	7bd2      	ldrb	r2, [r2, #15]
 800c836:	701a      	strb	r2, [r3, #0]
#endif
}
 800c838:	46c0      	nop			; (mov r8, r8)
 800c83a:	46bd      	mov	sp, r7
 800c83c:	b002      	add	sp, #8
 800c83e:	bd80      	pop	{r7, pc}

0800c840 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b084      	sub	sp, #16
 800c844:	af00      	add	r7, sp, #0
 800c846:	60f8      	str	r0, [r7, #12]
 800c848:	60b9      	str	r1, [r7, #8]
 800c84a:	1dfb      	adds	r3, r7, #7
 800c84c:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800c84e:	e007      	b.n	800c860 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800c850:	68ba      	ldr	r2, [r7, #8]
 800c852:	1c53      	adds	r3, r2, #1
 800c854:	60bb      	str	r3, [r7, #8]
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	1c59      	adds	r1, r3, #1
 800c85a:	60f9      	str	r1, [r7, #12]
 800c85c:	7812      	ldrb	r2, [r2, #0]
 800c85e:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800c860:	1dfb      	adds	r3, r7, #7
 800c862:	781b      	ldrb	r3, [r3, #0]
 800c864:	1dfa      	adds	r2, r7, #7
 800c866:	1e59      	subs	r1, r3, #1
 800c868:	7011      	strb	r1, [r2, #0]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d1f0      	bne.n	800c850 <copy_block_nn+0x10>
}
 800c86e:	46c0      	nop			; (mov r8, r8)
 800c870:	46c0      	nop			; (mov r8, r8)
 800c872:	46bd      	mov	sp, r7
 800c874:	b004      	add	sp, #16
 800c876:	bd80      	pop	{r7, pc}

0800c878 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b082      	sub	sp, #8
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
 800c880:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	781a      	ldrb	r2, [r3, #0]
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	781b      	ldrb	r3, [r3, #0]
 800c88a:	4053      	eors	r3, r2
 800c88c:	b2da      	uxtb	r2, r3
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	3301      	adds	r3, #1
 800c896:	7819      	ldrb	r1, [r3, #0]
 800c898:	683b      	ldr	r3, [r7, #0]
 800c89a:	3301      	adds	r3, #1
 800c89c:	781a      	ldrb	r2, [r3, #0]
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	3301      	adds	r3, #1
 800c8a2:	404a      	eors	r2, r1
 800c8a4:	b2d2      	uxtb	r2, r2
 800c8a6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	3302      	adds	r3, #2
 800c8ac:	7819      	ldrb	r1, [r3, #0]
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	3302      	adds	r3, #2
 800c8b2:	781a      	ldrb	r2, [r3, #0]
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	3302      	adds	r3, #2
 800c8b8:	404a      	eors	r2, r1
 800c8ba:	b2d2      	uxtb	r2, r2
 800c8bc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	3303      	adds	r3, #3
 800c8c2:	7819      	ldrb	r1, [r3, #0]
 800c8c4:	683b      	ldr	r3, [r7, #0]
 800c8c6:	3303      	adds	r3, #3
 800c8c8:	781a      	ldrb	r2, [r3, #0]
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	3303      	adds	r3, #3
 800c8ce:	404a      	eors	r2, r1
 800c8d0:	b2d2      	uxtb	r2, r2
 800c8d2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	3304      	adds	r3, #4
 800c8d8:	7819      	ldrb	r1, [r3, #0]
 800c8da:	683b      	ldr	r3, [r7, #0]
 800c8dc:	3304      	adds	r3, #4
 800c8de:	781a      	ldrb	r2, [r3, #0]
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	3304      	adds	r3, #4
 800c8e4:	404a      	eors	r2, r1
 800c8e6:	b2d2      	uxtb	r2, r2
 800c8e8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	3305      	adds	r3, #5
 800c8ee:	7819      	ldrb	r1, [r3, #0]
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	3305      	adds	r3, #5
 800c8f4:	781a      	ldrb	r2, [r3, #0]
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	3305      	adds	r3, #5
 800c8fa:	404a      	eors	r2, r1
 800c8fc:	b2d2      	uxtb	r2, r2
 800c8fe:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	3306      	adds	r3, #6
 800c904:	7819      	ldrb	r1, [r3, #0]
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	3306      	adds	r3, #6
 800c90a:	781a      	ldrb	r2, [r3, #0]
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	3306      	adds	r3, #6
 800c910:	404a      	eors	r2, r1
 800c912:	b2d2      	uxtb	r2, r2
 800c914:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	3307      	adds	r3, #7
 800c91a:	7819      	ldrb	r1, [r3, #0]
 800c91c:	683b      	ldr	r3, [r7, #0]
 800c91e:	3307      	adds	r3, #7
 800c920:	781a      	ldrb	r2, [r3, #0]
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	3307      	adds	r3, #7
 800c926:	404a      	eors	r2, r1
 800c928:	b2d2      	uxtb	r2, r2
 800c92a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	3308      	adds	r3, #8
 800c930:	7819      	ldrb	r1, [r3, #0]
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	3308      	adds	r3, #8
 800c936:	781a      	ldrb	r2, [r3, #0]
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	3308      	adds	r3, #8
 800c93c:	404a      	eors	r2, r1
 800c93e:	b2d2      	uxtb	r2, r2
 800c940:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	3309      	adds	r3, #9
 800c946:	7819      	ldrb	r1, [r3, #0]
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	3309      	adds	r3, #9
 800c94c:	781a      	ldrb	r2, [r3, #0]
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	3309      	adds	r3, #9
 800c952:	404a      	eors	r2, r1
 800c954:	b2d2      	uxtb	r2, r2
 800c956:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	330a      	adds	r3, #10
 800c95c:	7819      	ldrb	r1, [r3, #0]
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	330a      	adds	r3, #10
 800c962:	781a      	ldrb	r2, [r3, #0]
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	330a      	adds	r3, #10
 800c968:	404a      	eors	r2, r1
 800c96a:	b2d2      	uxtb	r2, r2
 800c96c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	330b      	adds	r3, #11
 800c972:	7819      	ldrb	r1, [r3, #0]
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	330b      	adds	r3, #11
 800c978:	781a      	ldrb	r2, [r3, #0]
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	330b      	adds	r3, #11
 800c97e:	404a      	eors	r2, r1
 800c980:	b2d2      	uxtb	r2, r2
 800c982:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	330c      	adds	r3, #12
 800c988:	7819      	ldrb	r1, [r3, #0]
 800c98a:	683b      	ldr	r3, [r7, #0]
 800c98c:	330c      	adds	r3, #12
 800c98e:	781a      	ldrb	r2, [r3, #0]
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	330c      	adds	r3, #12
 800c994:	404a      	eors	r2, r1
 800c996:	b2d2      	uxtb	r2, r2
 800c998:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	330d      	adds	r3, #13
 800c99e:	7819      	ldrb	r1, [r3, #0]
 800c9a0:	683b      	ldr	r3, [r7, #0]
 800c9a2:	330d      	adds	r3, #13
 800c9a4:	781a      	ldrb	r2, [r3, #0]
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	330d      	adds	r3, #13
 800c9aa:	404a      	eors	r2, r1
 800c9ac:	b2d2      	uxtb	r2, r2
 800c9ae:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	330e      	adds	r3, #14
 800c9b4:	7819      	ldrb	r1, [r3, #0]
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	330e      	adds	r3, #14
 800c9ba:	781a      	ldrb	r2, [r3, #0]
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	330e      	adds	r3, #14
 800c9c0:	404a      	eors	r2, r1
 800c9c2:	b2d2      	uxtb	r2, r2
 800c9c4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	330f      	adds	r3, #15
 800c9ca:	7819      	ldrb	r1, [r3, #0]
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	330f      	adds	r3, #15
 800c9d0:	781a      	ldrb	r2, [r3, #0]
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	330f      	adds	r3, #15
 800c9d6:	404a      	eors	r2, r1
 800c9d8:	b2d2      	uxtb	r2, r2
 800c9da:	701a      	strb	r2, [r3, #0]
#endif
}
 800c9dc:	46c0      	nop			; (mov r8, r8)
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	b002      	add	sp, #8
 800c9e2:	bd80      	pop	{r7, pc}

0800c9e4 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b084      	sub	sp, #16
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	60f8      	str	r0, [r7, #12]
 800c9ec:	60b9      	str	r1, [r7, #8]
 800c9ee:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800c9f0:	68bb      	ldr	r3, [r7, #8]
 800c9f2:	781a      	ldrb	r2, [r3, #0]
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	781b      	ldrb	r3, [r3, #0]
 800c9f8:	4053      	eors	r3, r2
 800c9fa:	b2da      	uxtb	r2, r3
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800ca00:	68bb      	ldr	r3, [r7, #8]
 800ca02:	3301      	adds	r3, #1
 800ca04:	7819      	ldrb	r1, [r3, #0]
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	3301      	adds	r3, #1
 800ca0a:	781a      	ldrb	r2, [r3, #0]
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	3301      	adds	r3, #1
 800ca10:	404a      	eors	r2, r1
 800ca12:	b2d2      	uxtb	r2, r2
 800ca14:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800ca16:	68bb      	ldr	r3, [r7, #8]
 800ca18:	3302      	adds	r3, #2
 800ca1a:	7819      	ldrb	r1, [r3, #0]
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	3302      	adds	r3, #2
 800ca20:	781a      	ldrb	r2, [r3, #0]
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	3302      	adds	r3, #2
 800ca26:	404a      	eors	r2, r1
 800ca28:	b2d2      	uxtb	r2, r2
 800ca2a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800ca2c:	68bb      	ldr	r3, [r7, #8]
 800ca2e:	3303      	adds	r3, #3
 800ca30:	7819      	ldrb	r1, [r3, #0]
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	3303      	adds	r3, #3
 800ca36:	781a      	ldrb	r2, [r3, #0]
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	3303      	adds	r3, #3
 800ca3c:	404a      	eors	r2, r1
 800ca3e:	b2d2      	uxtb	r2, r2
 800ca40:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800ca42:	68bb      	ldr	r3, [r7, #8]
 800ca44:	3304      	adds	r3, #4
 800ca46:	7819      	ldrb	r1, [r3, #0]
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	3304      	adds	r3, #4
 800ca4c:	781a      	ldrb	r2, [r3, #0]
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	3304      	adds	r3, #4
 800ca52:	404a      	eors	r2, r1
 800ca54:	b2d2      	uxtb	r2, r2
 800ca56:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800ca58:	68bb      	ldr	r3, [r7, #8]
 800ca5a:	3305      	adds	r3, #5
 800ca5c:	7819      	ldrb	r1, [r3, #0]
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	3305      	adds	r3, #5
 800ca62:	781a      	ldrb	r2, [r3, #0]
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	3305      	adds	r3, #5
 800ca68:	404a      	eors	r2, r1
 800ca6a:	b2d2      	uxtb	r2, r2
 800ca6c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800ca6e:	68bb      	ldr	r3, [r7, #8]
 800ca70:	3306      	adds	r3, #6
 800ca72:	7819      	ldrb	r1, [r3, #0]
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	3306      	adds	r3, #6
 800ca78:	781a      	ldrb	r2, [r3, #0]
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	3306      	adds	r3, #6
 800ca7e:	404a      	eors	r2, r1
 800ca80:	b2d2      	uxtb	r2, r2
 800ca82:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800ca84:	68bb      	ldr	r3, [r7, #8]
 800ca86:	3307      	adds	r3, #7
 800ca88:	7819      	ldrb	r1, [r3, #0]
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	3307      	adds	r3, #7
 800ca8e:	781a      	ldrb	r2, [r3, #0]
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	3307      	adds	r3, #7
 800ca94:	404a      	eors	r2, r1
 800ca96:	b2d2      	uxtb	r2, r2
 800ca98:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800ca9a:	68bb      	ldr	r3, [r7, #8]
 800ca9c:	3308      	adds	r3, #8
 800ca9e:	7819      	ldrb	r1, [r3, #0]
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	3308      	adds	r3, #8
 800caa4:	781a      	ldrb	r2, [r3, #0]
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	3308      	adds	r3, #8
 800caaa:	404a      	eors	r2, r1
 800caac:	b2d2      	uxtb	r2, r2
 800caae:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800cab0:	68bb      	ldr	r3, [r7, #8]
 800cab2:	3309      	adds	r3, #9
 800cab4:	7819      	ldrb	r1, [r3, #0]
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	3309      	adds	r3, #9
 800caba:	781a      	ldrb	r2, [r3, #0]
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	3309      	adds	r3, #9
 800cac0:	404a      	eors	r2, r1
 800cac2:	b2d2      	uxtb	r2, r2
 800cac4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800cac6:	68bb      	ldr	r3, [r7, #8]
 800cac8:	330a      	adds	r3, #10
 800caca:	7819      	ldrb	r1, [r3, #0]
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	330a      	adds	r3, #10
 800cad0:	781a      	ldrb	r2, [r3, #0]
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	330a      	adds	r3, #10
 800cad6:	404a      	eors	r2, r1
 800cad8:	b2d2      	uxtb	r2, r2
 800cada:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800cadc:	68bb      	ldr	r3, [r7, #8]
 800cade:	330b      	adds	r3, #11
 800cae0:	7819      	ldrb	r1, [r3, #0]
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	330b      	adds	r3, #11
 800cae6:	781a      	ldrb	r2, [r3, #0]
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	330b      	adds	r3, #11
 800caec:	404a      	eors	r2, r1
 800caee:	b2d2      	uxtb	r2, r2
 800caf0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800caf2:	68bb      	ldr	r3, [r7, #8]
 800caf4:	330c      	adds	r3, #12
 800caf6:	7819      	ldrb	r1, [r3, #0]
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	330c      	adds	r3, #12
 800cafc:	781a      	ldrb	r2, [r3, #0]
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	330c      	adds	r3, #12
 800cb02:	404a      	eors	r2, r1
 800cb04:	b2d2      	uxtb	r2, r2
 800cb06:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800cb08:	68bb      	ldr	r3, [r7, #8]
 800cb0a:	330d      	adds	r3, #13
 800cb0c:	7819      	ldrb	r1, [r3, #0]
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	330d      	adds	r3, #13
 800cb12:	781a      	ldrb	r2, [r3, #0]
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	330d      	adds	r3, #13
 800cb18:	404a      	eors	r2, r1
 800cb1a:	b2d2      	uxtb	r2, r2
 800cb1c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800cb1e:	68bb      	ldr	r3, [r7, #8]
 800cb20:	330e      	adds	r3, #14
 800cb22:	7819      	ldrb	r1, [r3, #0]
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	330e      	adds	r3, #14
 800cb28:	781a      	ldrb	r2, [r3, #0]
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	330e      	adds	r3, #14
 800cb2e:	404a      	eors	r2, r1
 800cb30:	b2d2      	uxtb	r2, r2
 800cb32:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800cb34:	68bb      	ldr	r3, [r7, #8]
 800cb36:	330f      	adds	r3, #15
 800cb38:	7819      	ldrb	r1, [r3, #0]
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	330f      	adds	r3, #15
 800cb3e:	781a      	ldrb	r2, [r3, #0]
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	330f      	adds	r3, #15
 800cb44:	404a      	eors	r2, r1
 800cb46:	b2d2      	uxtb	r2, r2
 800cb48:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800cb4a:	46c0      	nop			; (mov r8, r8)
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	b004      	add	sp, #16
 800cb50:	bd80      	pop	{r7, pc}

0800cb52 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800cb52:	b580      	push	{r7, lr}
 800cb54:	b082      	sub	sp, #8
 800cb56:	af00      	add	r7, sp, #0
 800cb58:	6078      	str	r0, [r7, #4]
 800cb5a:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800cb5c:	683a      	ldr	r2, [r7, #0]
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	0011      	movs	r1, r2
 800cb62:	0018      	movs	r0, r3
 800cb64:	f7ff fe88 	bl	800c878 <xor_block>
}
 800cb68:	46c0      	nop			; (mov r8, r8)
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	b002      	add	sp, #8
 800cb6e:	bd80      	pop	{r7, pc}

0800cb70 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b084      	sub	sp, #16
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	781b      	ldrb	r3, [r3, #0]
 800cb7c:	001a      	movs	r2, r3
 800cb7e:	4b4c      	ldr	r3, [pc, #304]	; (800ccb0 <shift_sub_rows+0x140>)
 800cb80:	5c9a      	ldrb	r2, [r3, r2]
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	701a      	strb	r2, [r3, #0]
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	3304      	adds	r3, #4
 800cb8a:	781b      	ldrb	r3, [r3, #0]
 800cb8c:	0019      	movs	r1, r3
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	3304      	adds	r3, #4
 800cb92:	4a47      	ldr	r2, [pc, #284]	; (800ccb0 <shift_sub_rows+0x140>)
 800cb94:	5c52      	ldrb	r2, [r2, r1]
 800cb96:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	3308      	adds	r3, #8
 800cb9c:	781b      	ldrb	r3, [r3, #0]
 800cb9e:	0019      	movs	r1, r3
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	3308      	adds	r3, #8
 800cba4:	4a42      	ldr	r2, [pc, #264]	; (800ccb0 <shift_sub_rows+0x140>)
 800cba6:	5c52      	ldrb	r2, [r2, r1]
 800cba8:	701a      	strb	r2, [r3, #0]
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	330c      	adds	r3, #12
 800cbae:	781b      	ldrb	r3, [r3, #0]
 800cbb0:	0019      	movs	r1, r3
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	330c      	adds	r3, #12
 800cbb6:	4a3e      	ldr	r2, [pc, #248]	; (800ccb0 <shift_sub_rows+0x140>)
 800cbb8:	5c52      	ldrb	r2, [r2, r1]
 800cbba:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800cbbc:	200f      	movs	r0, #15
 800cbbe:	183b      	adds	r3, r7, r0
 800cbc0:	687a      	ldr	r2, [r7, #4]
 800cbc2:	7852      	ldrb	r2, [r2, #1]
 800cbc4:	701a      	strb	r2, [r3, #0]
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	3305      	adds	r3, #5
 800cbca:	781b      	ldrb	r3, [r3, #0]
 800cbcc:	0019      	movs	r1, r3
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	3301      	adds	r3, #1
 800cbd2:	4a37      	ldr	r2, [pc, #220]	; (800ccb0 <shift_sub_rows+0x140>)
 800cbd4:	5c52      	ldrb	r2, [r2, r1]
 800cbd6:	701a      	strb	r2, [r3, #0]
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	3309      	adds	r3, #9
 800cbdc:	781b      	ldrb	r3, [r3, #0]
 800cbde:	0019      	movs	r1, r3
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	3305      	adds	r3, #5
 800cbe4:	4a32      	ldr	r2, [pc, #200]	; (800ccb0 <shift_sub_rows+0x140>)
 800cbe6:	5c52      	ldrb	r2, [r2, r1]
 800cbe8:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	330d      	adds	r3, #13
 800cbee:	781b      	ldrb	r3, [r3, #0]
 800cbf0:	0019      	movs	r1, r3
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	3309      	adds	r3, #9
 800cbf6:	4a2e      	ldr	r2, [pc, #184]	; (800ccb0 <shift_sub_rows+0x140>)
 800cbf8:	5c52      	ldrb	r2, [r2, r1]
 800cbfa:	701a      	strb	r2, [r3, #0]
 800cbfc:	183b      	adds	r3, r7, r0
 800cbfe:	781a      	ldrb	r2, [r3, #0]
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	330d      	adds	r3, #13
 800cc04:	492a      	ldr	r1, [pc, #168]	; (800ccb0 <shift_sub_rows+0x140>)
 800cc06:	5c8a      	ldrb	r2, [r1, r2]
 800cc08:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800cc0a:	183b      	adds	r3, r7, r0
 800cc0c:	687a      	ldr	r2, [r7, #4]
 800cc0e:	7892      	ldrb	r2, [r2, #2]
 800cc10:	701a      	strb	r2, [r3, #0]
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	330a      	adds	r3, #10
 800cc16:	781b      	ldrb	r3, [r3, #0]
 800cc18:	0019      	movs	r1, r3
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	3302      	adds	r3, #2
 800cc1e:	4a24      	ldr	r2, [pc, #144]	; (800ccb0 <shift_sub_rows+0x140>)
 800cc20:	5c52      	ldrb	r2, [r2, r1]
 800cc22:	701a      	strb	r2, [r3, #0]
 800cc24:	183b      	adds	r3, r7, r0
 800cc26:	781a      	ldrb	r2, [r3, #0]
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	330a      	adds	r3, #10
 800cc2c:	4920      	ldr	r1, [pc, #128]	; (800ccb0 <shift_sub_rows+0x140>)
 800cc2e:	5c8a      	ldrb	r2, [r1, r2]
 800cc30:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800cc32:	183b      	adds	r3, r7, r0
 800cc34:	687a      	ldr	r2, [r7, #4]
 800cc36:	7992      	ldrb	r2, [r2, #6]
 800cc38:	701a      	strb	r2, [r3, #0]
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	330e      	adds	r3, #14
 800cc3e:	781b      	ldrb	r3, [r3, #0]
 800cc40:	0019      	movs	r1, r3
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	3306      	adds	r3, #6
 800cc46:	4a1a      	ldr	r2, [pc, #104]	; (800ccb0 <shift_sub_rows+0x140>)
 800cc48:	5c52      	ldrb	r2, [r2, r1]
 800cc4a:	701a      	strb	r2, [r3, #0]
 800cc4c:	183b      	adds	r3, r7, r0
 800cc4e:	781a      	ldrb	r2, [r3, #0]
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	330e      	adds	r3, #14
 800cc54:	4916      	ldr	r1, [pc, #88]	; (800ccb0 <shift_sub_rows+0x140>)
 800cc56:	5c8a      	ldrb	r2, [r1, r2]
 800cc58:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800cc5a:	183b      	adds	r3, r7, r0
 800cc5c:	687a      	ldr	r2, [r7, #4]
 800cc5e:	7bd2      	ldrb	r2, [r2, #15]
 800cc60:	701a      	strb	r2, [r3, #0]
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	330b      	adds	r3, #11
 800cc66:	781b      	ldrb	r3, [r3, #0]
 800cc68:	0019      	movs	r1, r3
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	330f      	adds	r3, #15
 800cc6e:	4a10      	ldr	r2, [pc, #64]	; (800ccb0 <shift_sub_rows+0x140>)
 800cc70:	5c52      	ldrb	r2, [r2, r1]
 800cc72:	701a      	strb	r2, [r3, #0]
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	3307      	adds	r3, #7
 800cc78:	781b      	ldrb	r3, [r3, #0]
 800cc7a:	0019      	movs	r1, r3
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	330b      	adds	r3, #11
 800cc80:	4a0b      	ldr	r2, [pc, #44]	; (800ccb0 <shift_sub_rows+0x140>)
 800cc82:	5c52      	ldrb	r2, [r2, r1]
 800cc84:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	3303      	adds	r3, #3
 800cc8a:	781b      	ldrb	r3, [r3, #0]
 800cc8c:	0019      	movs	r1, r3
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	3307      	adds	r3, #7
 800cc92:	4a07      	ldr	r2, [pc, #28]	; (800ccb0 <shift_sub_rows+0x140>)
 800cc94:	5c52      	ldrb	r2, [r2, r1]
 800cc96:	701a      	strb	r2, [r3, #0]
 800cc98:	183b      	adds	r3, r7, r0
 800cc9a:	781a      	ldrb	r2, [r3, #0]
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	3303      	adds	r3, #3
 800cca0:	4903      	ldr	r1, [pc, #12]	; (800ccb0 <shift_sub_rows+0x140>)
 800cca2:	5c8a      	ldrb	r2, [r1, r2]
 800cca4:	701a      	strb	r2, [r3, #0]
}
 800cca6:	46c0      	nop			; (mov r8, r8)
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	b004      	add	sp, #16
 800ccac:	bd80      	pop	{r7, pc}
 800ccae:	46c0      	nop			; (mov r8, r8)
 800ccb0:	0801f2b8 	.word	0x0801f2b8

0800ccb4 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800ccb4:	b590      	push	{r4, r7, lr}
 800ccb6:	b087      	sub	sp, #28
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800ccbc:	687a      	ldr	r2, [r7, #4]
 800ccbe:	2408      	movs	r4, #8
 800ccc0:	193b      	adds	r3, r7, r4
 800ccc2:	0011      	movs	r1, r2
 800ccc4:	0018      	movs	r0, r3
 800ccc6:	f7ff fd63 	bl	800c790 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800ccca:	0020      	movs	r0, r4
 800cccc:	183b      	adds	r3, r7, r0
 800ccce:	781b      	ldrb	r3, [r3, #0]
 800ccd0:	001a      	movs	r2, r3
 800ccd2:	4be8      	ldr	r3, [pc, #928]	; (800d074 <mix_sub_columns+0x3c0>)
 800ccd4:	5c9a      	ldrb	r2, [r3, r2]
 800ccd6:	183b      	adds	r3, r7, r0
 800ccd8:	795b      	ldrb	r3, [r3, #5]
 800ccda:	0019      	movs	r1, r3
 800ccdc:	4be6      	ldr	r3, [pc, #920]	; (800d078 <mix_sub_columns+0x3c4>)
 800ccde:	5c5b      	ldrb	r3, [r3, r1]
 800cce0:	4053      	eors	r3, r2
 800cce2:	b2da      	uxtb	r2, r3
 800cce4:	183b      	adds	r3, r7, r0
 800cce6:	7a9b      	ldrb	r3, [r3, #10]
 800cce8:	0019      	movs	r1, r3
 800ccea:	4be4      	ldr	r3, [pc, #912]	; (800d07c <mix_sub_columns+0x3c8>)
 800ccec:	5c5b      	ldrb	r3, [r3, r1]
 800ccee:	4053      	eors	r3, r2
 800ccf0:	b2da      	uxtb	r2, r3
 800ccf2:	183b      	adds	r3, r7, r0
 800ccf4:	7bdb      	ldrb	r3, [r3, #15]
 800ccf6:	0019      	movs	r1, r3
 800ccf8:	4be0      	ldr	r3, [pc, #896]	; (800d07c <mix_sub_columns+0x3c8>)
 800ccfa:	5c5b      	ldrb	r3, [r3, r1]
 800ccfc:	4053      	eors	r3, r2
 800ccfe:	b2da      	uxtb	r2, r3
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800cd04:	183b      	adds	r3, r7, r0
 800cd06:	781b      	ldrb	r3, [r3, #0]
 800cd08:	001a      	movs	r2, r3
 800cd0a:	4bdc      	ldr	r3, [pc, #880]	; (800d07c <mix_sub_columns+0x3c8>)
 800cd0c:	5c9a      	ldrb	r2, [r3, r2]
 800cd0e:	183b      	adds	r3, r7, r0
 800cd10:	795b      	ldrb	r3, [r3, #5]
 800cd12:	0019      	movs	r1, r3
 800cd14:	4bd7      	ldr	r3, [pc, #860]	; (800d074 <mix_sub_columns+0x3c0>)
 800cd16:	5c5b      	ldrb	r3, [r3, r1]
 800cd18:	4053      	eors	r3, r2
 800cd1a:	b2da      	uxtb	r2, r3
 800cd1c:	183b      	adds	r3, r7, r0
 800cd1e:	7a9b      	ldrb	r3, [r3, #10]
 800cd20:	0019      	movs	r1, r3
 800cd22:	4bd5      	ldr	r3, [pc, #852]	; (800d078 <mix_sub_columns+0x3c4>)
 800cd24:	5c5b      	ldrb	r3, [r3, r1]
 800cd26:	4053      	eors	r3, r2
 800cd28:	b2d9      	uxtb	r1, r3
 800cd2a:	183b      	adds	r3, r7, r0
 800cd2c:	7bdb      	ldrb	r3, [r3, #15]
 800cd2e:	001a      	movs	r2, r3
 800cd30:	4bd2      	ldr	r3, [pc, #840]	; (800d07c <mix_sub_columns+0x3c8>)
 800cd32:	5c9a      	ldrb	r2, [r3, r2]
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	3301      	adds	r3, #1
 800cd38:	404a      	eors	r2, r1
 800cd3a:	b2d2      	uxtb	r2, r2
 800cd3c:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800cd3e:	183b      	adds	r3, r7, r0
 800cd40:	781b      	ldrb	r3, [r3, #0]
 800cd42:	001a      	movs	r2, r3
 800cd44:	4bcd      	ldr	r3, [pc, #820]	; (800d07c <mix_sub_columns+0x3c8>)
 800cd46:	5c9a      	ldrb	r2, [r3, r2]
 800cd48:	183b      	adds	r3, r7, r0
 800cd4a:	795b      	ldrb	r3, [r3, #5]
 800cd4c:	0019      	movs	r1, r3
 800cd4e:	4bcb      	ldr	r3, [pc, #812]	; (800d07c <mix_sub_columns+0x3c8>)
 800cd50:	5c5b      	ldrb	r3, [r3, r1]
 800cd52:	4053      	eors	r3, r2
 800cd54:	b2da      	uxtb	r2, r3
 800cd56:	183b      	adds	r3, r7, r0
 800cd58:	7a9b      	ldrb	r3, [r3, #10]
 800cd5a:	0019      	movs	r1, r3
 800cd5c:	4bc5      	ldr	r3, [pc, #788]	; (800d074 <mix_sub_columns+0x3c0>)
 800cd5e:	5c5b      	ldrb	r3, [r3, r1]
 800cd60:	4053      	eors	r3, r2
 800cd62:	b2d9      	uxtb	r1, r3
 800cd64:	183b      	adds	r3, r7, r0
 800cd66:	7bdb      	ldrb	r3, [r3, #15]
 800cd68:	001a      	movs	r2, r3
 800cd6a:	4bc3      	ldr	r3, [pc, #780]	; (800d078 <mix_sub_columns+0x3c4>)
 800cd6c:	5c9a      	ldrb	r2, [r3, r2]
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	3302      	adds	r3, #2
 800cd72:	404a      	eors	r2, r1
 800cd74:	b2d2      	uxtb	r2, r2
 800cd76:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800cd78:	183b      	adds	r3, r7, r0
 800cd7a:	781b      	ldrb	r3, [r3, #0]
 800cd7c:	001a      	movs	r2, r3
 800cd7e:	4bbe      	ldr	r3, [pc, #760]	; (800d078 <mix_sub_columns+0x3c4>)
 800cd80:	5c9a      	ldrb	r2, [r3, r2]
 800cd82:	183b      	adds	r3, r7, r0
 800cd84:	795b      	ldrb	r3, [r3, #5]
 800cd86:	0019      	movs	r1, r3
 800cd88:	4bbc      	ldr	r3, [pc, #752]	; (800d07c <mix_sub_columns+0x3c8>)
 800cd8a:	5c5b      	ldrb	r3, [r3, r1]
 800cd8c:	4053      	eors	r3, r2
 800cd8e:	b2da      	uxtb	r2, r3
 800cd90:	183b      	adds	r3, r7, r0
 800cd92:	7a9b      	ldrb	r3, [r3, #10]
 800cd94:	0019      	movs	r1, r3
 800cd96:	4bb9      	ldr	r3, [pc, #740]	; (800d07c <mix_sub_columns+0x3c8>)
 800cd98:	5c5b      	ldrb	r3, [r3, r1]
 800cd9a:	4053      	eors	r3, r2
 800cd9c:	b2d9      	uxtb	r1, r3
 800cd9e:	183b      	adds	r3, r7, r0
 800cda0:	7bdb      	ldrb	r3, [r3, #15]
 800cda2:	001a      	movs	r2, r3
 800cda4:	4bb3      	ldr	r3, [pc, #716]	; (800d074 <mix_sub_columns+0x3c0>)
 800cda6:	5c9a      	ldrb	r2, [r3, r2]
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	3303      	adds	r3, #3
 800cdac:	404a      	eors	r2, r1
 800cdae:	b2d2      	uxtb	r2, r2
 800cdb0:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800cdb2:	183b      	adds	r3, r7, r0
 800cdb4:	791b      	ldrb	r3, [r3, #4]
 800cdb6:	001a      	movs	r2, r3
 800cdb8:	4bae      	ldr	r3, [pc, #696]	; (800d074 <mix_sub_columns+0x3c0>)
 800cdba:	5c9a      	ldrb	r2, [r3, r2]
 800cdbc:	183b      	adds	r3, r7, r0
 800cdbe:	7a5b      	ldrb	r3, [r3, #9]
 800cdc0:	0019      	movs	r1, r3
 800cdc2:	4bad      	ldr	r3, [pc, #692]	; (800d078 <mix_sub_columns+0x3c4>)
 800cdc4:	5c5b      	ldrb	r3, [r3, r1]
 800cdc6:	4053      	eors	r3, r2
 800cdc8:	b2da      	uxtb	r2, r3
 800cdca:	183b      	adds	r3, r7, r0
 800cdcc:	7b9b      	ldrb	r3, [r3, #14]
 800cdce:	0019      	movs	r1, r3
 800cdd0:	4baa      	ldr	r3, [pc, #680]	; (800d07c <mix_sub_columns+0x3c8>)
 800cdd2:	5c5b      	ldrb	r3, [r3, r1]
 800cdd4:	4053      	eors	r3, r2
 800cdd6:	b2d9      	uxtb	r1, r3
 800cdd8:	183b      	adds	r3, r7, r0
 800cdda:	78db      	ldrb	r3, [r3, #3]
 800cddc:	001a      	movs	r2, r3
 800cdde:	4ba7      	ldr	r3, [pc, #668]	; (800d07c <mix_sub_columns+0x3c8>)
 800cde0:	5c9a      	ldrb	r2, [r3, r2]
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	3304      	adds	r3, #4
 800cde6:	404a      	eors	r2, r1
 800cde8:	b2d2      	uxtb	r2, r2
 800cdea:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800cdec:	183b      	adds	r3, r7, r0
 800cdee:	791b      	ldrb	r3, [r3, #4]
 800cdf0:	001a      	movs	r2, r3
 800cdf2:	4ba2      	ldr	r3, [pc, #648]	; (800d07c <mix_sub_columns+0x3c8>)
 800cdf4:	5c9a      	ldrb	r2, [r3, r2]
 800cdf6:	183b      	adds	r3, r7, r0
 800cdf8:	7a5b      	ldrb	r3, [r3, #9]
 800cdfa:	0019      	movs	r1, r3
 800cdfc:	4b9d      	ldr	r3, [pc, #628]	; (800d074 <mix_sub_columns+0x3c0>)
 800cdfe:	5c5b      	ldrb	r3, [r3, r1]
 800ce00:	4053      	eors	r3, r2
 800ce02:	b2da      	uxtb	r2, r3
 800ce04:	183b      	adds	r3, r7, r0
 800ce06:	7b9b      	ldrb	r3, [r3, #14]
 800ce08:	0019      	movs	r1, r3
 800ce0a:	4b9b      	ldr	r3, [pc, #620]	; (800d078 <mix_sub_columns+0x3c4>)
 800ce0c:	5c5b      	ldrb	r3, [r3, r1]
 800ce0e:	4053      	eors	r3, r2
 800ce10:	b2d9      	uxtb	r1, r3
 800ce12:	183b      	adds	r3, r7, r0
 800ce14:	78db      	ldrb	r3, [r3, #3]
 800ce16:	001a      	movs	r2, r3
 800ce18:	4b98      	ldr	r3, [pc, #608]	; (800d07c <mix_sub_columns+0x3c8>)
 800ce1a:	5c9a      	ldrb	r2, [r3, r2]
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	3305      	adds	r3, #5
 800ce20:	404a      	eors	r2, r1
 800ce22:	b2d2      	uxtb	r2, r2
 800ce24:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800ce26:	183b      	adds	r3, r7, r0
 800ce28:	791b      	ldrb	r3, [r3, #4]
 800ce2a:	001a      	movs	r2, r3
 800ce2c:	4b93      	ldr	r3, [pc, #588]	; (800d07c <mix_sub_columns+0x3c8>)
 800ce2e:	5c9a      	ldrb	r2, [r3, r2]
 800ce30:	183b      	adds	r3, r7, r0
 800ce32:	7a5b      	ldrb	r3, [r3, #9]
 800ce34:	0019      	movs	r1, r3
 800ce36:	4b91      	ldr	r3, [pc, #580]	; (800d07c <mix_sub_columns+0x3c8>)
 800ce38:	5c5b      	ldrb	r3, [r3, r1]
 800ce3a:	4053      	eors	r3, r2
 800ce3c:	b2da      	uxtb	r2, r3
 800ce3e:	183b      	adds	r3, r7, r0
 800ce40:	7b9b      	ldrb	r3, [r3, #14]
 800ce42:	0019      	movs	r1, r3
 800ce44:	4b8b      	ldr	r3, [pc, #556]	; (800d074 <mix_sub_columns+0x3c0>)
 800ce46:	5c5b      	ldrb	r3, [r3, r1]
 800ce48:	4053      	eors	r3, r2
 800ce4a:	b2d9      	uxtb	r1, r3
 800ce4c:	183b      	adds	r3, r7, r0
 800ce4e:	78db      	ldrb	r3, [r3, #3]
 800ce50:	001a      	movs	r2, r3
 800ce52:	4b89      	ldr	r3, [pc, #548]	; (800d078 <mix_sub_columns+0x3c4>)
 800ce54:	5c9a      	ldrb	r2, [r3, r2]
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	3306      	adds	r3, #6
 800ce5a:	404a      	eors	r2, r1
 800ce5c:	b2d2      	uxtb	r2, r2
 800ce5e:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800ce60:	183b      	adds	r3, r7, r0
 800ce62:	791b      	ldrb	r3, [r3, #4]
 800ce64:	001a      	movs	r2, r3
 800ce66:	4b84      	ldr	r3, [pc, #528]	; (800d078 <mix_sub_columns+0x3c4>)
 800ce68:	5c9a      	ldrb	r2, [r3, r2]
 800ce6a:	183b      	adds	r3, r7, r0
 800ce6c:	7a5b      	ldrb	r3, [r3, #9]
 800ce6e:	0019      	movs	r1, r3
 800ce70:	4b82      	ldr	r3, [pc, #520]	; (800d07c <mix_sub_columns+0x3c8>)
 800ce72:	5c5b      	ldrb	r3, [r3, r1]
 800ce74:	4053      	eors	r3, r2
 800ce76:	b2da      	uxtb	r2, r3
 800ce78:	183b      	adds	r3, r7, r0
 800ce7a:	7b9b      	ldrb	r3, [r3, #14]
 800ce7c:	0019      	movs	r1, r3
 800ce7e:	4b7f      	ldr	r3, [pc, #508]	; (800d07c <mix_sub_columns+0x3c8>)
 800ce80:	5c5b      	ldrb	r3, [r3, r1]
 800ce82:	4053      	eors	r3, r2
 800ce84:	b2d9      	uxtb	r1, r3
 800ce86:	183b      	adds	r3, r7, r0
 800ce88:	78db      	ldrb	r3, [r3, #3]
 800ce8a:	001a      	movs	r2, r3
 800ce8c:	4b79      	ldr	r3, [pc, #484]	; (800d074 <mix_sub_columns+0x3c0>)
 800ce8e:	5c9a      	ldrb	r2, [r3, r2]
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	3307      	adds	r3, #7
 800ce94:	404a      	eors	r2, r1
 800ce96:	b2d2      	uxtb	r2, r2
 800ce98:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800ce9a:	183b      	adds	r3, r7, r0
 800ce9c:	7a1b      	ldrb	r3, [r3, #8]
 800ce9e:	001a      	movs	r2, r3
 800cea0:	4b74      	ldr	r3, [pc, #464]	; (800d074 <mix_sub_columns+0x3c0>)
 800cea2:	5c9a      	ldrb	r2, [r3, r2]
 800cea4:	183b      	adds	r3, r7, r0
 800cea6:	7b5b      	ldrb	r3, [r3, #13]
 800cea8:	0019      	movs	r1, r3
 800ceaa:	4b73      	ldr	r3, [pc, #460]	; (800d078 <mix_sub_columns+0x3c4>)
 800ceac:	5c5b      	ldrb	r3, [r3, r1]
 800ceae:	4053      	eors	r3, r2
 800ceb0:	b2da      	uxtb	r2, r3
 800ceb2:	183b      	adds	r3, r7, r0
 800ceb4:	789b      	ldrb	r3, [r3, #2]
 800ceb6:	0019      	movs	r1, r3
 800ceb8:	4b70      	ldr	r3, [pc, #448]	; (800d07c <mix_sub_columns+0x3c8>)
 800ceba:	5c5b      	ldrb	r3, [r3, r1]
 800cebc:	4053      	eors	r3, r2
 800cebe:	b2d9      	uxtb	r1, r3
 800cec0:	183b      	adds	r3, r7, r0
 800cec2:	79db      	ldrb	r3, [r3, #7]
 800cec4:	001a      	movs	r2, r3
 800cec6:	4b6d      	ldr	r3, [pc, #436]	; (800d07c <mix_sub_columns+0x3c8>)
 800cec8:	5c9a      	ldrb	r2, [r3, r2]
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	3308      	adds	r3, #8
 800cece:	404a      	eors	r2, r1
 800ced0:	b2d2      	uxtb	r2, r2
 800ced2:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800ced4:	183b      	adds	r3, r7, r0
 800ced6:	7a1b      	ldrb	r3, [r3, #8]
 800ced8:	001a      	movs	r2, r3
 800ceda:	4b68      	ldr	r3, [pc, #416]	; (800d07c <mix_sub_columns+0x3c8>)
 800cedc:	5c9a      	ldrb	r2, [r3, r2]
 800cede:	183b      	adds	r3, r7, r0
 800cee0:	7b5b      	ldrb	r3, [r3, #13]
 800cee2:	0019      	movs	r1, r3
 800cee4:	4b63      	ldr	r3, [pc, #396]	; (800d074 <mix_sub_columns+0x3c0>)
 800cee6:	5c5b      	ldrb	r3, [r3, r1]
 800cee8:	4053      	eors	r3, r2
 800ceea:	b2da      	uxtb	r2, r3
 800ceec:	183b      	adds	r3, r7, r0
 800ceee:	789b      	ldrb	r3, [r3, #2]
 800cef0:	0019      	movs	r1, r3
 800cef2:	4b61      	ldr	r3, [pc, #388]	; (800d078 <mix_sub_columns+0x3c4>)
 800cef4:	5c5b      	ldrb	r3, [r3, r1]
 800cef6:	4053      	eors	r3, r2
 800cef8:	b2d9      	uxtb	r1, r3
 800cefa:	183b      	adds	r3, r7, r0
 800cefc:	79db      	ldrb	r3, [r3, #7]
 800cefe:	001a      	movs	r2, r3
 800cf00:	4b5e      	ldr	r3, [pc, #376]	; (800d07c <mix_sub_columns+0x3c8>)
 800cf02:	5c9a      	ldrb	r2, [r3, r2]
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	3309      	adds	r3, #9
 800cf08:	404a      	eors	r2, r1
 800cf0a:	b2d2      	uxtb	r2, r2
 800cf0c:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800cf0e:	183b      	adds	r3, r7, r0
 800cf10:	7a1b      	ldrb	r3, [r3, #8]
 800cf12:	001a      	movs	r2, r3
 800cf14:	4b59      	ldr	r3, [pc, #356]	; (800d07c <mix_sub_columns+0x3c8>)
 800cf16:	5c9a      	ldrb	r2, [r3, r2]
 800cf18:	183b      	adds	r3, r7, r0
 800cf1a:	7b5b      	ldrb	r3, [r3, #13]
 800cf1c:	0019      	movs	r1, r3
 800cf1e:	4b57      	ldr	r3, [pc, #348]	; (800d07c <mix_sub_columns+0x3c8>)
 800cf20:	5c5b      	ldrb	r3, [r3, r1]
 800cf22:	4053      	eors	r3, r2
 800cf24:	b2da      	uxtb	r2, r3
 800cf26:	183b      	adds	r3, r7, r0
 800cf28:	789b      	ldrb	r3, [r3, #2]
 800cf2a:	0019      	movs	r1, r3
 800cf2c:	4b51      	ldr	r3, [pc, #324]	; (800d074 <mix_sub_columns+0x3c0>)
 800cf2e:	5c5b      	ldrb	r3, [r3, r1]
 800cf30:	4053      	eors	r3, r2
 800cf32:	b2d9      	uxtb	r1, r3
 800cf34:	183b      	adds	r3, r7, r0
 800cf36:	79db      	ldrb	r3, [r3, #7]
 800cf38:	001a      	movs	r2, r3
 800cf3a:	4b4f      	ldr	r3, [pc, #316]	; (800d078 <mix_sub_columns+0x3c4>)
 800cf3c:	5c9a      	ldrb	r2, [r3, r2]
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	330a      	adds	r3, #10
 800cf42:	404a      	eors	r2, r1
 800cf44:	b2d2      	uxtb	r2, r2
 800cf46:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800cf48:	183b      	adds	r3, r7, r0
 800cf4a:	7a1b      	ldrb	r3, [r3, #8]
 800cf4c:	001a      	movs	r2, r3
 800cf4e:	4b4a      	ldr	r3, [pc, #296]	; (800d078 <mix_sub_columns+0x3c4>)
 800cf50:	5c9a      	ldrb	r2, [r3, r2]
 800cf52:	183b      	adds	r3, r7, r0
 800cf54:	7b5b      	ldrb	r3, [r3, #13]
 800cf56:	0019      	movs	r1, r3
 800cf58:	4b48      	ldr	r3, [pc, #288]	; (800d07c <mix_sub_columns+0x3c8>)
 800cf5a:	5c5b      	ldrb	r3, [r3, r1]
 800cf5c:	4053      	eors	r3, r2
 800cf5e:	b2da      	uxtb	r2, r3
 800cf60:	183b      	adds	r3, r7, r0
 800cf62:	789b      	ldrb	r3, [r3, #2]
 800cf64:	0019      	movs	r1, r3
 800cf66:	4b45      	ldr	r3, [pc, #276]	; (800d07c <mix_sub_columns+0x3c8>)
 800cf68:	5c5b      	ldrb	r3, [r3, r1]
 800cf6a:	4053      	eors	r3, r2
 800cf6c:	b2d9      	uxtb	r1, r3
 800cf6e:	183b      	adds	r3, r7, r0
 800cf70:	79db      	ldrb	r3, [r3, #7]
 800cf72:	001a      	movs	r2, r3
 800cf74:	4b3f      	ldr	r3, [pc, #252]	; (800d074 <mix_sub_columns+0x3c0>)
 800cf76:	5c9a      	ldrb	r2, [r3, r2]
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	330b      	adds	r3, #11
 800cf7c:	404a      	eors	r2, r1
 800cf7e:	b2d2      	uxtb	r2, r2
 800cf80:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800cf82:	183b      	adds	r3, r7, r0
 800cf84:	7b1b      	ldrb	r3, [r3, #12]
 800cf86:	001a      	movs	r2, r3
 800cf88:	4b3a      	ldr	r3, [pc, #232]	; (800d074 <mix_sub_columns+0x3c0>)
 800cf8a:	5c9a      	ldrb	r2, [r3, r2]
 800cf8c:	183b      	adds	r3, r7, r0
 800cf8e:	785b      	ldrb	r3, [r3, #1]
 800cf90:	0019      	movs	r1, r3
 800cf92:	4b39      	ldr	r3, [pc, #228]	; (800d078 <mix_sub_columns+0x3c4>)
 800cf94:	5c5b      	ldrb	r3, [r3, r1]
 800cf96:	4053      	eors	r3, r2
 800cf98:	b2da      	uxtb	r2, r3
 800cf9a:	183b      	adds	r3, r7, r0
 800cf9c:	799b      	ldrb	r3, [r3, #6]
 800cf9e:	0019      	movs	r1, r3
 800cfa0:	4b36      	ldr	r3, [pc, #216]	; (800d07c <mix_sub_columns+0x3c8>)
 800cfa2:	5c5b      	ldrb	r3, [r3, r1]
 800cfa4:	4053      	eors	r3, r2
 800cfa6:	b2d9      	uxtb	r1, r3
 800cfa8:	183b      	adds	r3, r7, r0
 800cfaa:	7adb      	ldrb	r3, [r3, #11]
 800cfac:	001a      	movs	r2, r3
 800cfae:	4b33      	ldr	r3, [pc, #204]	; (800d07c <mix_sub_columns+0x3c8>)
 800cfb0:	5c9a      	ldrb	r2, [r3, r2]
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	330c      	adds	r3, #12
 800cfb6:	404a      	eors	r2, r1
 800cfb8:	b2d2      	uxtb	r2, r2
 800cfba:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800cfbc:	183b      	adds	r3, r7, r0
 800cfbe:	7b1b      	ldrb	r3, [r3, #12]
 800cfc0:	001a      	movs	r2, r3
 800cfc2:	4b2e      	ldr	r3, [pc, #184]	; (800d07c <mix_sub_columns+0x3c8>)
 800cfc4:	5c9a      	ldrb	r2, [r3, r2]
 800cfc6:	183b      	adds	r3, r7, r0
 800cfc8:	785b      	ldrb	r3, [r3, #1]
 800cfca:	0019      	movs	r1, r3
 800cfcc:	4b29      	ldr	r3, [pc, #164]	; (800d074 <mix_sub_columns+0x3c0>)
 800cfce:	5c5b      	ldrb	r3, [r3, r1]
 800cfd0:	4053      	eors	r3, r2
 800cfd2:	b2da      	uxtb	r2, r3
 800cfd4:	183b      	adds	r3, r7, r0
 800cfd6:	799b      	ldrb	r3, [r3, #6]
 800cfd8:	0019      	movs	r1, r3
 800cfda:	4b27      	ldr	r3, [pc, #156]	; (800d078 <mix_sub_columns+0x3c4>)
 800cfdc:	5c5b      	ldrb	r3, [r3, r1]
 800cfde:	4053      	eors	r3, r2
 800cfe0:	b2d9      	uxtb	r1, r3
 800cfe2:	183b      	adds	r3, r7, r0
 800cfe4:	7adb      	ldrb	r3, [r3, #11]
 800cfe6:	001a      	movs	r2, r3
 800cfe8:	4b24      	ldr	r3, [pc, #144]	; (800d07c <mix_sub_columns+0x3c8>)
 800cfea:	5c9a      	ldrb	r2, [r3, r2]
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	330d      	adds	r3, #13
 800cff0:	404a      	eors	r2, r1
 800cff2:	b2d2      	uxtb	r2, r2
 800cff4:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800cff6:	183b      	adds	r3, r7, r0
 800cff8:	7b1b      	ldrb	r3, [r3, #12]
 800cffa:	001a      	movs	r2, r3
 800cffc:	4b1f      	ldr	r3, [pc, #124]	; (800d07c <mix_sub_columns+0x3c8>)
 800cffe:	5c9a      	ldrb	r2, [r3, r2]
 800d000:	183b      	adds	r3, r7, r0
 800d002:	785b      	ldrb	r3, [r3, #1]
 800d004:	0019      	movs	r1, r3
 800d006:	4b1d      	ldr	r3, [pc, #116]	; (800d07c <mix_sub_columns+0x3c8>)
 800d008:	5c5b      	ldrb	r3, [r3, r1]
 800d00a:	4053      	eors	r3, r2
 800d00c:	b2da      	uxtb	r2, r3
 800d00e:	183b      	adds	r3, r7, r0
 800d010:	799b      	ldrb	r3, [r3, #6]
 800d012:	0019      	movs	r1, r3
 800d014:	4b17      	ldr	r3, [pc, #92]	; (800d074 <mix_sub_columns+0x3c0>)
 800d016:	5c5b      	ldrb	r3, [r3, r1]
 800d018:	4053      	eors	r3, r2
 800d01a:	b2d9      	uxtb	r1, r3
 800d01c:	183b      	adds	r3, r7, r0
 800d01e:	7adb      	ldrb	r3, [r3, #11]
 800d020:	001a      	movs	r2, r3
 800d022:	4b15      	ldr	r3, [pc, #84]	; (800d078 <mix_sub_columns+0x3c4>)
 800d024:	5c9a      	ldrb	r2, [r3, r2]
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	330e      	adds	r3, #14
 800d02a:	404a      	eors	r2, r1
 800d02c:	b2d2      	uxtb	r2, r2
 800d02e:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800d030:	183b      	adds	r3, r7, r0
 800d032:	7b1b      	ldrb	r3, [r3, #12]
 800d034:	001a      	movs	r2, r3
 800d036:	4b10      	ldr	r3, [pc, #64]	; (800d078 <mix_sub_columns+0x3c4>)
 800d038:	5c9a      	ldrb	r2, [r3, r2]
 800d03a:	183b      	adds	r3, r7, r0
 800d03c:	785b      	ldrb	r3, [r3, #1]
 800d03e:	0019      	movs	r1, r3
 800d040:	4b0e      	ldr	r3, [pc, #56]	; (800d07c <mix_sub_columns+0x3c8>)
 800d042:	5c5b      	ldrb	r3, [r3, r1]
 800d044:	4053      	eors	r3, r2
 800d046:	b2da      	uxtb	r2, r3
 800d048:	183b      	adds	r3, r7, r0
 800d04a:	799b      	ldrb	r3, [r3, #6]
 800d04c:	0019      	movs	r1, r3
 800d04e:	4b0b      	ldr	r3, [pc, #44]	; (800d07c <mix_sub_columns+0x3c8>)
 800d050:	5c5b      	ldrb	r3, [r3, r1]
 800d052:	4053      	eors	r3, r2
 800d054:	b2d9      	uxtb	r1, r3
 800d056:	183b      	adds	r3, r7, r0
 800d058:	7adb      	ldrb	r3, [r3, #11]
 800d05a:	001a      	movs	r2, r3
 800d05c:	4b05      	ldr	r3, [pc, #20]	; (800d074 <mix_sub_columns+0x3c0>)
 800d05e:	5c9a      	ldrb	r2, [r3, r2]
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	330f      	adds	r3, #15
 800d064:	404a      	eors	r2, r1
 800d066:	b2d2      	uxtb	r2, r2
 800d068:	701a      	strb	r2, [r3, #0]
  }
 800d06a:	46c0      	nop			; (mov r8, r8)
 800d06c:	46bd      	mov	sp, r7
 800d06e:	b007      	add	sp, #28
 800d070:	bd90      	pop	{r4, r7, pc}
 800d072:	46c0      	nop			; (mov r8, r8)
 800d074:	0801f3b8 	.word	0x0801f3b8
 800d078:	0801f4b8 	.word	0x0801f4b8
 800d07c:	0801f2b8 	.word	0x0801f2b8

0800d080 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800d080:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d082:	b087      	sub	sp, #28
 800d084:	af00      	add	r7, sp, #0
 800d086:	60f8      	str	r0, [r7, #12]
 800d088:	607a      	str	r2, [r7, #4]
 800d08a:	200b      	movs	r0, #11
 800d08c:	183b      	adds	r3, r7, r0
 800d08e:	1c0a      	adds	r2, r1, #0
 800d090:	701a      	strb	r2, [r3, #0]
    uint8_t cc, rc, hi;

    switch( keylen )
 800d092:	183b      	adds	r3, r7, r0
 800d094:	781b      	ldrb	r3, [r3, #0]
 800d096:	3b10      	subs	r3, #16
 800d098:	2210      	movs	r2, #16
 800d09a:	429a      	cmp	r2, r3
 800d09c:	4192      	sbcs	r2, r2
 800d09e:	4252      	negs	r2, r2
 800d0a0:	b2d2      	uxtb	r2, r2
 800d0a2:	2a00      	cmp	r2, #0
 800d0a4:	d109      	bne.n	800d0ba <lorawan_aes_set_key+0x3a>
 800d0a6:	2201      	movs	r2, #1
 800d0a8:	409a      	lsls	r2, r3
 800d0aa:	0013      	movs	r3, r2
 800d0ac:	4a90      	ldr	r2, [pc, #576]	; (800d2f0 <lorawan_aes_set_key+0x270>)
 800d0ae:	4013      	ands	r3, r2
 800d0b0:	1e5a      	subs	r2, r3, #1
 800d0b2:	4193      	sbcs	r3, r2
 800d0b4:	b2db      	uxtb	r3, r3
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d105      	bne.n	800d0c6 <lorawan_aes_set_key+0x46>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	22f0      	movs	r2, #240	; 0xf0
 800d0be:	2100      	movs	r1, #0
 800d0c0:	5499      	strb	r1, [r3, r2]
        return ( uint8_t )-1;
 800d0c2:	23ff      	movs	r3, #255	; 0xff
 800d0c4:	e10f      	b.n	800d2e6 <lorawan_aes_set_key+0x266>
        break;
 800d0c6:	46c0      	nop			; (mov r8, r8)
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800d0c8:	6878      	ldr	r0, [r7, #4]
 800d0ca:	240b      	movs	r4, #11
 800d0cc:	193b      	adds	r3, r7, r4
 800d0ce:	781a      	ldrb	r2, [r3, #0]
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	0019      	movs	r1, r3
 800d0d4:	f7ff fbb4 	bl	800c840 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800d0d8:	0020      	movs	r0, r4
 800d0da:	183b      	adds	r3, r7, r0
 800d0dc:	781b      	ldrb	r3, [r3, #0]
 800d0de:	331c      	adds	r3, #28
 800d0e0:	b2da      	uxtb	r2, r3
 800d0e2:	2111      	movs	r1, #17
 800d0e4:	187b      	adds	r3, r7, r1
 800d0e6:	0092      	lsls	r2, r2, #2
 800d0e8:	701a      	strb	r2, [r3, #0]
    ctx->rnd = (hi >> 4) - 1;
 800d0ea:	187b      	adds	r3, r7, r1
 800d0ec:	781b      	ldrb	r3, [r3, #0]
 800d0ee:	091b      	lsrs	r3, r3, #4
 800d0f0:	b2db      	uxtb	r3, r3
 800d0f2:	3b01      	subs	r3, #1
 800d0f4:	b2d9      	uxtb	r1, r3
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	22f0      	movs	r2, #240	; 0xf0
 800d0fa:	5499      	strb	r1, [r3, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800d0fc:	2317      	movs	r3, #23
 800d0fe:	18fb      	adds	r3, r7, r3
 800d100:	183a      	adds	r2, r7, r0
 800d102:	7812      	ldrb	r2, [r2, #0]
 800d104:	701a      	strb	r2, [r3, #0]
 800d106:	2316      	movs	r3, #22
 800d108:	18fb      	adds	r3, r7, r3
 800d10a:	2201      	movs	r2, #1
 800d10c:	701a      	strb	r2, [r3, #0]
 800d10e:	e0e0      	b.n	800d2d2 <lorawan_aes_set_key+0x252>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800d110:	2017      	movs	r0, #23
 800d112:	183b      	adds	r3, r7, r0
 800d114:	781b      	ldrb	r3, [r3, #0]
 800d116:	1f1a      	subs	r2, r3, #4
 800d118:	2415      	movs	r4, #21
 800d11a:	193b      	adds	r3, r7, r4
 800d11c:	6879      	ldr	r1, [r7, #4]
 800d11e:	5c8a      	ldrb	r2, [r1, r2]
 800d120:	701a      	strb	r2, [r3, #0]
        t1 = ctx->ksch[cc - 3];
 800d122:	183b      	adds	r3, r7, r0
 800d124:	781b      	ldrb	r3, [r3, #0]
 800d126:	1eda      	subs	r2, r3, #3
 800d128:	2514      	movs	r5, #20
 800d12a:	197b      	adds	r3, r7, r5
 800d12c:	6879      	ldr	r1, [r7, #4]
 800d12e:	5c8a      	ldrb	r2, [r1, r2]
 800d130:	701a      	strb	r2, [r3, #0]
        t2 = ctx->ksch[cc - 2];
 800d132:	183b      	adds	r3, r7, r0
 800d134:	781b      	ldrb	r3, [r3, #0]
 800d136:	1e9a      	subs	r2, r3, #2
 800d138:	2613      	movs	r6, #19
 800d13a:	19bb      	adds	r3, r7, r6
 800d13c:	6879      	ldr	r1, [r7, #4]
 800d13e:	5c8a      	ldrb	r2, [r1, r2]
 800d140:	701a      	strb	r2, [r3, #0]
        t3 = ctx->ksch[cc - 1];
 800d142:	183b      	adds	r3, r7, r0
 800d144:	781b      	ldrb	r3, [r3, #0]
 800d146:	1e5a      	subs	r2, r3, #1
 800d148:	2312      	movs	r3, #18
 800d14a:	18fb      	adds	r3, r7, r3
 800d14c:	6879      	ldr	r1, [r7, #4]
 800d14e:	5c8a      	ldrb	r2, [r1, r2]
 800d150:	701a      	strb	r2, [r3, #0]
        if( cc % keylen == 0 )
 800d152:	183a      	adds	r2, r7, r0
 800d154:	210b      	movs	r1, #11
 800d156:	187b      	adds	r3, r7, r1
 800d158:	7812      	ldrb	r2, [r2, #0]
 800d15a:	781b      	ldrb	r3, [r3, #0]
 800d15c:	0019      	movs	r1, r3
 800d15e:	0010      	movs	r0, r2
 800d160:	f7f3 f860 	bl	8000224 <__aeabi_uidivmod>
 800d164:	000b      	movs	r3, r1
 800d166:	b2db      	uxtb	r3, r3
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d13b      	bne.n	800d1e4 <lorawan_aes_set_key+0x164>
        {
            tt = t0;
 800d16c:	2210      	movs	r2, #16
 800d16e:	18bb      	adds	r3, r7, r2
 800d170:	193a      	adds	r2, r7, r4
 800d172:	7812      	ldrb	r2, [r2, #0]
 800d174:	701a      	strb	r2, [r3, #0]
            t0 = s_box(t1) ^ rc;
 800d176:	197b      	adds	r3, r7, r5
 800d178:	781b      	ldrb	r3, [r3, #0]
 800d17a:	4a5e      	ldr	r2, [pc, #376]	; (800d2f4 <lorawan_aes_set_key+0x274>)
 800d17c:	5cd1      	ldrb	r1, [r2, r3]
 800d17e:	193b      	adds	r3, r7, r4
 800d180:	2016      	movs	r0, #22
 800d182:	183a      	adds	r2, r7, r0
 800d184:	7812      	ldrb	r2, [r2, #0]
 800d186:	404a      	eors	r2, r1
 800d188:	701a      	strb	r2, [r3, #0]
            t1 = s_box(t2);
 800d18a:	19bb      	adds	r3, r7, r6
 800d18c:	781a      	ldrb	r2, [r3, #0]
 800d18e:	197b      	adds	r3, r7, r5
 800d190:	4958      	ldr	r1, [pc, #352]	; (800d2f4 <lorawan_aes_set_key+0x274>)
 800d192:	5c8a      	ldrb	r2, [r1, r2]
 800d194:	701a      	strb	r2, [r3, #0]
            t2 = s_box(t3);
 800d196:	2412      	movs	r4, #18
 800d198:	193b      	adds	r3, r7, r4
 800d19a:	781a      	ldrb	r2, [r3, #0]
 800d19c:	19bb      	adds	r3, r7, r6
 800d19e:	4955      	ldr	r1, [pc, #340]	; (800d2f4 <lorawan_aes_set_key+0x274>)
 800d1a0:	5c8a      	ldrb	r2, [r1, r2]
 800d1a2:	701a      	strb	r2, [r3, #0]
            t3 = s_box(tt);
 800d1a4:	2210      	movs	r2, #16
 800d1a6:	18bb      	adds	r3, r7, r2
 800d1a8:	781a      	ldrb	r2, [r3, #0]
 800d1aa:	193b      	adds	r3, r7, r4
 800d1ac:	4951      	ldr	r1, [pc, #324]	; (800d2f4 <lorawan_aes_set_key+0x274>)
 800d1ae:	5c8a      	ldrb	r2, [r1, r2]
 800d1b0:	701a      	strb	r2, [r3, #0]
            rc = f2(rc);
 800d1b2:	183b      	adds	r3, r7, r0
 800d1b4:	781b      	ldrb	r3, [r3, #0]
 800d1b6:	005b      	lsls	r3, r3, #1
 800d1b8:	b25a      	sxtb	r2, r3
 800d1ba:	0004      	movs	r4, r0
 800d1bc:	183b      	adds	r3, r7, r0
 800d1be:	781b      	ldrb	r3, [r3, #0]
 800d1c0:	09db      	lsrs	r3, r3, #7
 800d1c2:	b2db      	uxtb	r3, r3
 800d1c4:	1c19      	adds	r1, r3, #0
 800d1c6:	1c0b      	adds	r3, r1, #0
 800d1c8:	18db      	adds	r3, r3, r3
 800d1ca:	185b      	adds	r3, r3, r1
 800d1cc:	1c19      	adds	r1, r3, #0
 800d1ce:	00c8      	lsls	r0, r1, #3
 800d1d0:	1c19      	adds	r1, r3, #0
 800d1d2:	1c03      	adds	r3, r0, #0
 800d1d4:	18cb      	adds	r3, r1, r3
 800d1d6:	b2db      	uxtb	r3, r3
 800d1d8:	b25b      	sxtb	r3, r3
 800d1da:	4053      	eors	r3, r2
 800d1dc:	b25a      	sxtb	r2, r3
 800d1de:	193b      	adds	r3, r7, r4
 800d1e0:	701a      	strb	r2, [r3, #0]
 800d1e2:	e02d      	b.n	800d240 <lorawan_aes_set_key+0x1c0>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800d1e4:	210b      	movs	r1, #11
 800d1e6:	187b      	adds	r3, r7, r1
 800d1e8:	781b      	ldrb	r3, [r3, #0]
 800d1ea:	2b18      	cmp	r3, #24
 800d1ec:	d928      	bls.n	800d240 <lorawan_aes_set_key+0x1c0>
 800d1ee:	2317      	movs	r3, #23
 800d1f0:	18fa      	adds	r2, r7, r3
 800d1f2:	187b      	adds	r3, r7, r1
 800d1f4:	7812      	ldrb	r2, [r2, #0]
 800d1f6:	781b      	ldrb	r3, [r3, #0]
 800d1f8:	0019      	movs	r1, r3
 800d1fa:	0010      	movs	r0, r2
 800d1fc:	f7f3 f812 	bl	8000224 <__aeabi_uidivmod>
 800d200:	000b      	movs	r3, r1
 800d202:	b2db      	uxtb	r3, r3
 800d204:	2b10      	cmp	r3, #16
 800d206:	d11b      	bne.n	800d240 <lorawan_aes_set_key+0x1c0>
        {
            t0 = s_box(t0);
 800d208:	2115      	movs	r1, #21
 800d20a:	187b      	adds	r3, r7, r1
 800d20c:	781a      	ldrb	r2, [r3, #0]
 800d20e:	187b      	adds	r3, r7, r1
 800d210:	4938      	ldr	r1, [pc, #224]	; (800d2f4 <lorawan_aes_set_key+0x274>)
 800d212:	5c8a      	ldrb	r2, [r1, r2]
 800d214:	701a      	strb	r2, [r3, #0]
            t1 = s_box(t1);
 800d216:	2114      	movs	r1, #20
 800d218:	187b      	adds	r3, r7, r1
 800d21a:	781a      	ldrb	r2, [r3, #0]
 800d21c:	187b      	adds	r3, r7, r1
 800d21e:	4935      	ldr	r1, [pc, #212]	; (800d2f4 <lorawan_aes_set_key+0x274>)
 800d220:	5c8a      	ldrb	r2, [r1, r2]
 800d222:	701a      	strb	r2, [r3, #0]
            t2 = s_box(t2);
 800d224:	2113      	movs	r1, #19
 800d226:	187b      	adds	r3, r7, r1
 800d228:	781a      	ldrb	r2, [r3, #0]
 800d22a:	187b      	adds	r3, r7, r1
 800d22c:	4931      	ldr	r1, [pc, #196]	; (800d2f4 <lorawan_aes_set_key+0x274>)
 800d22e:	5c8a      	ldrb	r2, [r1, r2]
 800d230:	701a      	strb	r2, [r3, #0]
            t3 = s_box(t3);
 800d232:	2112      	movs	r1, #18
 800d234:	187b      	adds	r3, r7, r1
 800d236:	781a      	ldrb	r2, [r3, #0]
 800d238:	187b      	adds	r3, r7, r1
 800d23a:	492e      	ldr	r1, [pc, #184]	; (800d2f4 <lorawan_aes_set_key+0x274>)
 800d23c:	5c8a      	ldrb	r2, [r1, r2]
 800d23e:	701a      	strb	r2, [r3, #0]
        }
        tt = cc - keylen;
 800d240:	2410      	movs	r4, #16
 800d242:	193b      	adds	r3, r7, r4
 800d244:	2017      	movs	r0, #23
 800d246:	1839      	adds	r1, r7, r0
 800d248:	220b      	movs	r2, #11
 800d24a:	18ba      	adds	r2, r7, r2
 800d24c:	7809      	ldrb	r1, [r1, #0]
 800d24e:	7812      	ldrb	r2, [r2, #0]
 800d250:	1a8a      	subs	r2, r1, r2
 800d252:	701a      	strb	r2, [r3, #0]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800d254:	193b      	adds	r3, r7, r4
 800d256:	781b      	ldrb	r3, [r3, #0]
 800d258:	687a      	ldr	r2, [r7, #4]
 800d25a:	5cd1      	ldrb	r1, [r2, r3]
 800d25c:	183b      	adds	r3, r7, r0
 800d25e:	781b      	ldrb	r3, [r3, #0]
 800d260:	2215      	movs	r2, #21
 800d262:	18ba      	adds	r2, r7, r2
 800d264:	7812      	ldrb	r2, [r2, #0]
 800d266:	404a      	eors	r2, r1
 800d268:	b2d1      	uxtb	r1, r2
 800d26a:	687a      	ldr	r2, [r7, #4]
 800d26c:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800d26e:	193b      	adds	r3, r7, r4
 800d270:	781b      	ldrb	r3, [r3, #0]
 800d272:	3301      	adds	r3, #1
 800d274:	687a      	ldr	r2, [r7, #4]
 800d276:	5cd1      	ldrb	r1, [r2, r3]
 800d278:	183b      	adds	r3, r7, r0
 800d27a:	781b      	ldrb	r3, [r3, #0]
 800d27c:	3301      	adds	r3, #1
 800d27e:	2214      	movs	r2, #20
 800d280:	18ba      	adds	r2, r7, r2
 800d282:	7812      	ldrb	r2, [r2, #0]
 800d284:	404a      	eors	r2, r1
 800d286:	b2d1      	uxtb	r1, r2
 800d288:	687a      	ldr	r2, [r7, #4]
 800d28a:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800d28c:	193b      	adds	r3, r7, r4
 800d28e:	781b      	ldrb	r3, [r3, #0]
 800d290:	3302      	adds	r3, #2
 800d292:	687a      	ldr	r2, [r7, #4]
 800d294:	5cd1      	ldrb	r1, [r2, r3]
 800d296:	183b      	adds	r3, r7, r0
 800d298:	781b      	ldrb	r3, [r3, #0]
 800d29a:	3302      	adds	r3, #2
 800d29c:	2213      	movs	r2, #19
 800d29e:	18ba      	adds	r2, r7, r2
 800d2a0:	7812      	ldrb	r2, [r2, #0]
 800d2a2:	404a      	eors	r2, r1
 800d2a4:	b2d1      	uxtb	r1, r2
 800d2a6:	687a      	ldr	r2, [r7, #4]
 800d2a8:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800d2aa:	193b      	adds	r3, r7, r4
 800d2ac:	781b      	ldrb	r3, [r3, #0]
 800d2ae:	3303      	adds	r3, #3
 800d2b0:	687a      	ldr	r2, [r7, #4]
 800d2b2:	5cd1      	ldrb	r1, [r2, r3]
 800d2b4:	183b      	adds	r3, r7, r0
 800d2b6:	781b      	ldrb	r3, [r3, #0]
 800d2b8:	3303      	adds	r3, #3
 800d2ba:	2212      	movs	r2, #18
 800d2bc:	18ba      	adds	r2, r7, r2
 800d2be:	7812      	ldrb	r2, [r2, #0]
 800d2c0:	404a      	eors	r2, r1
 800d2c2:	b2d1      	uxtb	r1, r2
 800d2c4:	687a      	ldr	r2, [r7, #4]
 800d2c6:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800d2c8:	183b      	adds	r3, r7, r0
 800d2ca:	183a      	adds	r2, r7, r0
 800d2cc:	7812      	ldrb	r2, [r2, #0]
 800d2ce:	3204      	adds	r2, #4
 800d2d0:	701a      	strb	r2, [r3, #0]
 800d2d2:	2317      	movs	r3, #23
 800d2d4:	18fa      	adds	r2, r7, r3
 800d2d6:	2311      	movs	r3, #17
 800d2d8:	18fb      	adds	r3, r7, r3
 800d2da:	7812      	ldrb	r2, [r2, #0]
 800d2dc:	781b      	ldrb	r3, [r3, #0]
 800d2de:	429a      	cmp	r2, r3
 800d2e0:	d200      	bcs.n	800d2e4 <lorawan_aes_set_key+0x264>
 800d2e2:	e715      	b.n	800d110 <lorawan_aes_set_key+0x90>
    }
    return 0;
 800d2e4:	2300      	movs	r3, #0
}
 800d2e6:	0018      	movs	r0, r3
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	b007      	add	sp, #28
 800d2ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2ee:	46c0      	nop			; (mov r8, r8)
 800d2f0:	00010101 	.word	0x00010101
 800d2f4:	0801f2b8 	.word	0x0801f2b8

0800d2f8 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800d2f8:	b5b0      	push	{r4, r5, r7, lr}
 800d2fa:	b08a      	sub	sp, #40	; 0x28
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	60f8      	str	r0, [r7, #12]
 800d300:	60b9      	str	r1, [r7, #8]
 800d302:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	22f0      	movs	r2, #240	; 0xf0
 800d308:	5c9b      	ldrb	r3, [r3, r2]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d039      	beq.n	800d382 <lorawan_aes_encrypt+0x8a>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800d30e:	687a      	ldr	r2, [r7, #4]
 800d310:	68f9      	ldr	r1, [r7, #12]
 800d312:	2314      	movs	r3, #20
 800d314:	18fb      	adds	r3, r7, r3
 800d316:	0018      	movs	r0, r3
 800d318:	f7ff fb64 	bl	800c9e4 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800d31c:	2327      	movs	r3, #39	; 0x27
 800d31e:	18fb      	adds	r3, r7, r3
 800d320:	2201      	movs	r2, #1
 800d322:	701a      	strb	r2, [r3, #0]
 800d324:	e014      	b.n	800d350 <lorawan_aes_encrypt+0x58>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800d326:	2514      	movs	r5, #20
 800d328:	197b      	adds	r3, r7, r5
 800d32a:	0018      	movs	r0, r3
 800d32c:	f7ff fcc2 	bl	800ccb4 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	2427      	movs	r4, #39	; 0x27
 800d334:	193a      	adds	r2, r7, r4
 800d336:	7812      	ldrb	r2, [r2, #0]
 800d338:	0112      	lsls	r2, r2, #4
 800d33a:	189a      	adds	r2, r3, r2
 800d33c:	197b      	adds	r3, r7, r5
 800d33e:	0011      	movs	r1, r2
 800d340:	0018      	movs	r0, r3
 800d342:	f7ff fc06 	bl	800cb52 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800d346:	193b      	adds	r3, r7, r4
 800d348:	193a      	adds	r2, r7, r4
 800d34a:	7812      	ldrb	r2, [r2, #0]
 800d34c:	3201      	adds	r2, #1
 800d34e:	701a      	strb	r2, [r3, #0]
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	22f0      	movs	r2, #240	; 0xf0
 800d354:	5c9b      	ldrb	r3, [r3, r2]
 800d356:	2427      	movs	r4, #39	; 0x27
 800d358:	193a      	adds	r2, r7, r4
 800d35a:	7812      	ldrb	r2, [r2, #0]
 800d35c:	429a      	cmp	r2, r3
 800d35e:	d3e2      	bcc.n	800d326 <lorawan_aes_encrypt+0x2e>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800d360:	2514      	movs	r5, #20
 800d362:	197b      	adds	r3, r7, r5
 800d364:	0018      	movs	r0, r3
 800d366:	f7ff fc03 	bl	800cb70 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	193a      	adds	r2, r7, r4
 800d36e:	7812      	ldrb	r2, [r2, #0]
 800d370:	0112      	lsls	r2, r2, #4
 800d372:	189a      	adds	r2, r3, r2
 800d374:	1979      	adds	r1, r7, r5
 800d376:	68bb      	ldr	r3, [r7, #8]
 800d378:	0018      	movs	r0, r3
 800d37a:	f7ff fb33 	bl	800c9e4 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800d37e:	2300      	movs	r3, #0
 800d380:	e000      	b.n	800d384 <lorawan_aes_encrypt+0x8c>
        return ( uint8_t )-1;
 800d382:	23ff      	movs	r3, #255	; 0xff
}
 800d384:	0018      	movs	r0, r3
 800d386:	46bd      	mov	sp, r7
 800d388:	b00a      	add	sp, #40	; 0x28
 800d38a:	bdb0      	pop	{r4, r5, r7, pc}

0800d38c <GetKeyByID>:
 * \param[IN]  keyID          - Key identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID(KeyIdentifier_t keyID, Key_t **keyItem)
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b084      	sub	sp, #16
 800d390:	af00      	add	r7, sp, #0
 800d392:	0002      	movs	r2, r0
 800d394:	6039      	str	r1, [r7, #0]
 800d396:	1dfb      	adds	r3, r7, #7
 800d398:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800d39a:	230f      	movs	r3, #15
 800d39c:	18fb      	adds	r3, r7, r3
 800d39e:	2200      	movs	r2, #0
 800d3a0:	701a      	strb	r2, [r3, #0]
 800d3a2:	e020      	b.n	800d3e6 <GetKeyByID+0x5a>
  {
    if (SeNvmCtx.KeyList[i].KeyID == keyID)
 800d3a4:	200f      	movs	r0, #15
 800d3a6:	183b      	adds	r3, r7, r0
 800d3a8:	781a      	ldrb	r2, [r3, #0]
 800d3aa:	4914      	ldr	r1, [pc, #80]	; (800d3fc <GetKeyByID+0x70>)
 800d3ac:	0013      	movs	r3, r2
 800d3ae:	011b      	lsls	r3, r3, #4
 800d3b0:	189b      	adds	r3, r3, r2
 800d3b2:	18cb      	adds	r3, r1, r3
 800d3b4:	3310      	adds	r3, #16
 800d3b6:	781b      	ldrb	r3, [r3, #0]
 800d3b8:	1dfa      	adds	r2, r7, #7
 800d3ba:	7812      	ldrb	r2, [r2, #0]
 800d3bc:	429a      	cmp	r2, r3
 800d3be:	d10c      	bne.n	800d3da <GetKeyByID+0x4e>
    {
      *keyItem = &(SeNvmCtx.KeyList[i]);
 800d3c0:	183b      	adds	r3, r7, r0
 800d3c2:	781a      	ldrb	r2, [r3, #0]
 800d3c4:	0013      	movs	r3, r2
 800d3c6:	011b      	lsls	r3, r3, #4
 800d3c8:	189b      	adds	r3, r3, r2
 800d3ca:	3310      	adds	r3, #16
 800d3cc:	001a      	movs	r2, r3
 800d3ce:	4b0b      	ldr	r3, [pc, #44]	; (800d3fc <GetKeyByID+0x70>)
 800d3d0:	18d2      	adds	r2, r2, r3
 800d3d2:	683b      	ldr	r3, [r7, #0]
 800d3d4:	601a      	str	r2, [r3, #0]
      return SECURE_ELEMENT_SUCCESS;
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	e00b      	b.n	800d3f2 <GetKeyByID+0x66>
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800d3da:	210f      	movs	r1, #15
 800d3dc:	187b      	adds	r3, r7, r1
 800d3de:	781a      	ldrb	r2, [r3, #0]
 800d3e0:	187b      	adds	r3, r7, r1
 800d3e2:	3201      	adds	r2, #1
 800d3e4:	701a      	strb	r2, [r3, #0]
 800d3e6:	230f      	movs	r3, #15
 800d3e8:	18fb      	adds	r3, r7, r3
 800d3ea:	781b      	ldrb	r3, [r3, #0]
 800d3ec:	2b09      	cmp	r3, #9
 800d3ee:	d9d9      	bls.n	800d3a4 <GetKeyByID+0x18>
    }
  }
  return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d3f0:	2303      	movs	r3, #3
}
 800d3f2:	0018      	movs	r0, r3
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	b004      	add	sp, #16
 800d3f8:	bd80      	pop	{r7, pc}
 800d3fa:	46c0      	nop			; (mov r8, r8)
 800d3fc:	2000007c 	.word	0x2000007c

0800d400 <DummyCB>:

/*
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB(void)
{
 800d400:	b580      	push	{r7, lr}
 800d402:	af00      	add	r7, sp, #0
  return;
 800d404:	46c0      	nop			; (mov r8, r8)
}
 800d406:	46bd      	mov	sp, r7
 800d408:	bd80      	pop	{r7, pc}
	...

0800d40c <ComputeCmac>:
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                         uint32_t *cmac)
{
 800d40c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d40e:	b0d1      	sub	sp, #324	; 0x144
 800d410:	af00      	add	r7, sp, #0
 800d412:	60f8      	str	r0, [r7, #12]
 800d414:	60b9      	str	r1, [r7, #8]
 800d416:	0019      	movs	r1, r3
 800d418:	4b40      	ldr	r3, [pc, #256]	; (800d51c <ComputeCmac+0x110>)
 800d41a:	20a0      	movs	r0, #160	; 0xa0
 800d41c:	0040      	lsls	r0, r0, #1
 800d41e:	4684      	mov	ip, r0
 800d420:	44bc      	add	ip, r7
 800d422:	4463      	add	r3, ip
 800d424:	801a      	strh	r2, [r3, #0]
 800d426:	4b3e      	ldr	r3, [pc, #248]	; (800d520 <ComputeCmac+0x114>)
 800d428:	22a0      	movs	r2, #160	; 0xa0
 800d42a:	0052      	lsls	r2, r2, #1
 800d42c:	4694      	mov	ip, r2
 800d42e:	44bc      	add	ip, r7
 800d430:	4463      	add	r3, ip
 800d432:	1c0a      	adds	r2, r1, #0
 800d434:	701a      	strb	r2, [r3, #0]
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800d436:	2340      	movs	r3, #64	; 0x40
 800d438:	33ff      	adds	r3, #255	; 0xff
 800d43a:	18fb      	adds	r3, r7, r3
 800d43c:	2206      	movs	r2, #6
 800d43e:	701a      	strb	r2, [r3, #0]
  if ((buffer == NULL) || (cmac == NULL))
 800d440:	68bb      	ldr	r3, [r7, #8]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d008      	beq.n	800d458 <ComputeCmac+0x4c>
 800d446:	23a8      	movs	r3, #168	; 0xa8
 800d448:	005b      	lsls	r3, r3, #1
 800d44a:	2208      	movs	r2, #8
 800d44c:	4694      	mov	ip, r2
 800d44e:	44bc      	add	ip, r7
 800d450:	4463      	add	r3, ip
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d101      	bne.n	800d45c <ComputeCmac+0x50>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800d458:	2302      	movs	r3, #2
 800d45a:	e05a      	b.n	800d512 <ComputeCmac+0x106>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  uint8_t Cmac[16];
  AES_CMAC_CTX aesCmacCtx[1];

  AES_CMAC_Init(aesCmacCtx);
 800d45c:	2514      	movs	r5, #20
 800d45e:	197b      	adds	r3, r7, r5
 800d460:	0018      	movs	r0, r3
 800d462:	f7fe ff39 	bl	800c2d8 <AES_CMAC_Init>

  Key_t *keyItem;
  retval = GetKeyByID(keyID, &keyItem);
 800d466:	2640      	movs	r6, #64	; 0x40
 800d468:	36ff      	adds	r6, #255	; 0xff
 800d46a:	19bc      	adds	r4, r7, r6
 800d46c:	2310      	movs	r3, #16
 800d46e:	18fa      	adds	r2, r7, r3
 800d470:	4b2b      	ldr	r3, [pc, #172]	; (800d520 <ComputeCmac+0x114>)
 800d472:	21a0      	movs	r1, #160	; 0xa0
 800d474:	0049      	lsls	r1, r1, #1
 800d476:	468c      	mov	ip, r1
 800d478:	44bc      	add	ip, r7
 800d47a:	4463      	add	r3, ip
 800d47c:	781b      	ldrb	r3, [r3, #0]
 800d47e:	0011      	movs	r1, r2
 800d480:	0018      	movs	r0, r3
 800d482:	f7ff ff83 	bl	800d38c <GetKeyByID>
 800d486:	0003      	movs	r3, r0
 800d488:	7023      	strb	r3, [r4, #0]

  if (retval == SECURE_ELEMENT_SUCCESS)
 800d48a:	19bb      	adds	r3, r7, r6
 800d48c:	781b      	ldrb	r3, [r3, #0]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d13b      	bne.n	800d50a <ComputeCmac+0xfe>
  {
    AES_CMAC_SetKey(aesCmacCtx, keyItem->KeyValue);
 800d492:	693b      	ldr	r3, [r7, #16]
 800d494:	1c5a      	adds	r2, r3, #1
 800d496:	197b      	adds	r3, r7, r5
 800d498:	0011      	movs	r1, r2
 800d49a:	0018      	movs	r0, r3
 800d49c:	f7fe ff36 	bl	800c30c <AES_CMAC_SetKey>

    if (micBxBuffer != NULL)
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d005      	beq.n	800d4b2 <ComputeCmac+0xa6>
    {
      AES_CMAC_Update(aesCmacCtx, micBxBuffer, 16);
 800d4a6:	68f9      	ldr	r1, [r7, #12]
 800d4a8:	197b      	adds	r3, r7, r5
 800d4aa:	2210      	movs	r2, #16
 800d4ac:	0018      	movs	r0, r3
 800d4ae:	f7fe ff3c 	bl	800c32a <AES_CMAC_Update>
    }

    AES_CMAC_Update(aesCmacCtx, buffer, size);
 800d4b2:	4b1a      	ldr	r3, [pc, #104]	; (800d51c <ComputeCmac+0x110>)
 800d4b4:	22a0      	movs	r2, #160	; 0xa0
 800d4b6:	0052      	lsls	r2, r2, #1
 800d4b8:	4694      	mov	ip, r2
 800d4ba:	44bc      	add	ip, r7
 800d4bc:	4463      	add	r3, ip
 800d4be:	881a      	ldrh	r2, [r3, #0]
 800d4c0:	68b9      	ldr	r1, [r7, #8]
 800d4c2:	2414      	movs	r4, #20
 800d4c4:	193b      	adds	r3, r7, r4
 800d4c6:	0018      	movs	r0, r3
 800d4c8:	f7fe ff2f 	bl	800c32a <AES_CMAC_Update>

    AES_CMAC_Final(Cmac, aesCmacCtx);
 800d4cc:	193a      	adds	r2, r7, r4
 800d4ce:	2496      	movs	r4, #150	; 0x96
 800d4d0:	0064      	lsls	r4, r4, #1
 800d4d2:	193b      	adds	r3, r7, r4
 800d4d4:	0011      	movs	r1, r2
 800d4d6:	0018      	movs	r0, r3
 800d4d8:	f7fe ffef 	bl	800c4ba <AES_CMAC_Final>

    /* Bring into the required format */
    *cmac = (uint32_t)((uint32_t) Cmac[3] << 24 | (uint32_t) Cmac[2] << 16 | (uint32_t) Cmac[1] << 8 |
 800d4dc:	0021      	movs	r1, r4
 800d4de:	187b      	adds	r3, r7, r1
 800d4e0:	78db      	ldrb	r3, [r3, #3]
 800d4e2:	061a      	lsls	r2, r3, #24
 800d4e4:	187b      	adds	r3, r7, r1
 800d4e6:	789b      	ldrb	r3, [r3, #2]
 800d4e8:	041b      	lsls	r3, r3, #16
 800d4ea:	431a      	orrs	r2, r3
 800d4ec:	187b      	adds	r3, r7, r1
 800d4ee:	785b      	ldrb	r3, [r3, #1]
 800d4f0:	021b      	lsls	r3, r3, #8
 800d4f2:	4313      	orrs	r3, r2
                       (uint32_t) Cmac[0]);
 800d4f4:	187a      	adds	r2, r7, r1
 800d4f6:	7812      	ldrb	r2, [r2, #0]
    *cmac = (uint32_t)((uint32_t) Cmac[3] << 24 | (uint32_t) Cmac[2] << 16 | (uint32_t) Cmac[1] << 8 |
 800d4f8:	431a      	orrs	r2, r3
 800d4fa:	23a8      	movs	r3, #168	; 0xa8
 800d4fc:	005b      	lsls	r3, r3, #1
 800d4fe:	2108      	movs	r1, #8
 800d500:	468c      	mov	ip, r1
 800d502:	44bc      	add	ip, r7
 800d504:	4463      	add	r3, ip
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	601a      	str	r2, [r3, #0]
  {
    retval = SECURE_ELEMENT_ERROR;
  }
#endif /* LORAWAN_KMS */

  return retval;
 800d50a:	2340      	movs	r3, #64	; 0x40
 800d50c:	33ff      	adds	r3, #255	; 0xff
 800d50e:	18fb      	adds	r3, r7, r3
 800d510:	781b      	ldrb	r3, [r3, #0]
}
 800d512:	0018      	movs	r0, r3
 800d514:	46bd      	mov	sp, r7
 800d516:	b051      	add	sp, #324	; 0x144
 800d518:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d51a:	46c0      	nop			; (mov r8, r8)
 800d51c:	fffffec6 	.word	0xfffffec6
 800d520:	fffffec5 	.word	0xfffffec5

0800d524 <SecureElementInit>:
/*
 * API functions
 */

SecureElementStatus_t SecureElementInit(SecureElementNvmEvent seNvmCtxChanged)
{
 800d524:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d526:	46de      	mov	lr, fp
 800d528:	4657      	mov	r7, sl
 800d52a:	464e      	mov	r6, r9
 800d52c:	4645      	mov	r5, r8
 800d52e:	b5e0      	push	{r5, r6, r7, lr}
 800d530:	b099      	sub	sp, #100	; 0x64
 800d532:	af10      	add	r7, sp, #64	; 0x40
 800d534:	6178      	str	r0, [r7, #20]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  Key_t *keyItem;
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800d536:	250f      	movs	r5, #15
 800d538:	2610      	movs	r6, #16
 800d53a:	19bb      	adds	r3, r7, r6
 800d53c:	195b      	adds	r3, r3, r5
 800d53e:	2206      	movs	r2, #6
 800d540:	701a      	strb	r2, [r3, #0]

  /* Initialize LoRaWAN Key List buffer */
  memcpy1((uint8_t *)(SeNvmCtx.KeyList), (const uint8_t *)InitialKeyList, sizeof(Key_t)*NUM_OF_KEYS);
 800d542:	49dd      	ldr	r1, [pc, #884]	; (800d8b8 <SecureElementInit+0x394>)
 800d544:	4bdd      	ldr	r3, [pc, #884]	; (800d8bc <SecureElementInit+0x398>)
 800d546:	22aa      	movs	r2, #170	; 0xaa
 800d548:	0018      	movs	r0, r3
 800d54a:	f00c f821 	bl	8019590 <memcpy1>

  retval = GetKeyByID(APP_KEY, &keyItem);
 800d54e:	19bb      	adds	r3, r7, r6
 800d550:	195c      	adds	r4, r3, r5
 800d552:	2308      	movs	r3, #8
 800d554:	2210      	movs	r2, #16
 800d556:	4694      	mov	ip, r2
 800d558:	44bc      	add	ip, r7
 800d55a:	4463      	add	r3, ip
 800d55c:	0019      	movs	r1, r3
 800d55e:	2000      	movs	r0, #0
 800d560:	f7ff ff14 	bl	800d38c <GetKeyByID>
 800d564:	0003      	movs	r3, r0
 800d566:	7023      	strb	r3, [r4, #0]
  KEY_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800d568:	4bd5      	ldr	r3, [pc, #852]	; (800d8c0 <SecureElementInit+0x39c>)
 800d56a:	2200      	movs	r2, #0
 800d56c:	2100      	movs	r1, #0
 800d56e:	2002      	movs	r0, #2
 800d570:	f00e fc82 	bl	801be78 <UTIL_ADV_TRACE_COND_FSend>
  if (retval == SECURE_ELEMENT_SUCCESS)
 800d574:	19bb      	adds	r3, r7, r6
 800d576:	195b      	adds	r3, r3, r5
 800d578:	781b      	ldrb	r3, [r3, #0]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d14f      	bne.n	800d61e <SecureElementInit+0xfa>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### AppKey:  %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\r\n", HEX16(keyItem->KeyValue));
 800d57e:	69bb      	ldr	r3, [r7, #24]
 800d580:	785b      	ldrb	r3, [r3, #1]
 800d582:	001d      	movs	r5, r3
 800d584:	69bb      	ldr	r3, [r7, #24]
 800d586:	789b      	ldrb	r3, [r3, #2]
 800d588:	001e      	movs	r6, r3
 800d58a:	69bb      	ldr	r3, [r7, #24]
 800d58c:	78db      	ldrb	r3, [r3, #3]
 800d58e:	469c      	mov	ip, r3
 800d590:	69bb      	ldr	r3, [r7, #24]
 800d592:	791b      	ldrb	r3, [r3, #4]
 800d594:	4698      	mov	r8, r3
 800d596:	69bb      	ldr	r3, [r7, #24]
 800d598:	795b      	ldrb	r3, [r3, #5]
 800d59a:	4699      	mov	r9, r3
 800d59c:	69bb      	ldr	r3, [r7, #24]
 800d59e:	799b      	ldrb	r3, [r3, #6]
 800d5a0:	469a      	mov	sl, r3
 800d5a2:	69bb      	ldr	r3, [r7, #24]
 800d5a4:	79db      	ldrb	r3, [r3, #7]
 800d5a6:	469b      	mov	fp, r3
 800d5a8:	69bb      	ldr	r3, [r7, #24]
 800d5aa:	7a1b      	ldrb	r3, [r3, #8]
 800d5ac:	613b      	str	r3, [r7, #16]
 800d5ae:	69bb      	ldr	r3, [r7, #24]
 800d5b0:	7a5b      	ldrb	r3, [r3, #9]
 800d5b2:	60fb      	str	r3, [r7, #12]
 800d5b4:	69bb      	ldr	r3, [r7, #24]
 800d5b6:	7a9b      	ldrb	r3, [r3, #10]
 800d5b8:	60bb      	str	r3, [r7, #8]
 800d5ba:	69bb      	ldr	r3, [r7, #24]
 800d5bc:	7adb      	ldrb	r3, [r3, #11]
 800d5be:	607b      	str	r3, [r7, #4]
 800d5c0:	69bb      	ldr	r3, [r7, #24]
 800d5c2:	7b1b      	ldrb	r3, [r3, #12]
 800d5c4:	603b      	str	r3, [r7, #0]
 800d5c6:	69bb      	ldr	r3, [r7, #24]
 800d5c8:	7b5b      	ldrb	r3, [r3, #13]
 800d5ca:	001c      	movs	r4, r3
 800d5cc:	69bb      	ldr	r3, [r7, #24]
 800d5ce:	7b9b      	ldrb	r3, [r3, #14]
 800d5d0:	0018      	movs	r0, r3
 800d5d2:	69bb      	ldr	r3, [r7, #24]
 800d5d4:	7bdb      	ldrb	r3, [r3, #15]
 800d5d6:	0019      	movs	r1, r3
 800d5d8:	69bb      	ldr	r3, [r7, #24]
 800d5da:	7c1b      	ldrb	r3, [r3, #16]
 800d5dc:	4ab9      	ldr	r2, [pc, #740]	; (800d8c4 <SecureElementInit+0x3a0>)
 800d5de:	930f      	str	r3, [sp, #60]	; 0x3c
 800d5e0:	910e      	str	r1, [sp, #56]	; 0x38
 800d5e2:	900d      	str	r0, [sp, #52]	; 0x34
 800d5e4:	940c      	str	r4, [sp, #48]	; 0x30
 800d5e6:	6839      	ldr	r1, [r7, #0]
 800d5e8:	910b      	str	r1, [sp, #44]	; 0x2c
 800d5ea:	6879      	ldr	r1, [r7, #4]
 800d5ec:	910a      	str	r1, [sp, #40]	; 0x28
 800d5ee:	68b9      	ldr	r1, [r7, #8]
 800d5f0:	9109      	str	r1, [sp, #36]	; 0x24
 800d5f2:	68f9      	ldr	r1, [r7, #12]
 800d5f4:	9108      	str	r1, [sp, #32]
 800d5f6:	693b      	ldr	r3, [r7, #16]
 800d5f8:	9307      	str	r3, [sp, #28]
 800d5fa:	465b      	mov	r3, fp
 800d5fc:	9306      	str	r3, [sp, #24]
 800d5fe:	4653      	mov	r3, sl
 800d600:	9305      	str	r3, [sp, #20]
 800d602:	464b      	mov	r3, r9
 800d604:	9304      	str	r3, [sp, #16]
 800d606:	4643      	mov	r3, r8
 800d608:	9303      	str	r3, [sp, #12]
 800d60a:	4663      	mov	r3, ip
 800d60c:	9302      	str	r3, [sp, #8]
 800d60e:	9601      	str	r6, [sp, #4]
 800d610:	9500      	str	r5, [sp, #0]
 800d612:	0013      	movs	r3, r2
 800d614:	2200      	movs	r2, #0
 800d616:	2100      	movs	r1, #0
 800d618:	2002      	movs	r0, #2
 800d61a:	f00e fc2d 	bl	801be78 <UTIL_ADV_TRACE_COND_FSend>
  }
  retval = GetKeyByID(NWK_KEY, &keyItem);
 800d61e:	250f      	movs	r5, #15
 800d620:	2610      	movs	r6, #16
 800d622:	19bb      	adds	r3, r7, r6
 800d624:	195c      	adds	r4, r3, r5
 800d626:	2308      	movs	r3, #8
 800d628:	2210      	movs	r2, #16
 800d62a:	4694      	mov	ip, r2
 800d62c:	44bc      	add	ip, r7
 800d62e:	4463      	add	r3, ip
 800d630:	0019      	movs	r1, r3
 800d632:	2001      	movs	r0, #1
 800d634:	f7ff feaa 	bl	800d38c <GetKeyByID>
 800d638:	0003      	movs	r3, r0
 800d63a:	7023      	strb	r3, [r4, #0]
  if (retval == SECURE_ELEMENT_SUCCESS)
 800d63c:	19bb      	adds	r3, r7, r6
 800d63e:	195b      	adds	r3, r3, r5
 800d640:	781b      	ldrb	r3, [r3, #0]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d14f      	bne.n	800d6e6 <SecureElementInit+0x1c2>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:  %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\r\n", HEX16(keyItem->KeyValue));
 800d646:	69bb      	ldr	r3, [r7, #24]
 800d648:	785b      	ldrb	r3, [r3, #1]
 800d64a:	001d      	movs	r5, r3
 800d64c:	69bb      	ldr	r3, [r7, #24]
 800d64e:	789b      	ldrb	r3, [r3, #2]
 800d650:	001e      	movs	r6, r3
 800d652:	69bb      	ldr	r3, [r7, #24]
 800d654:	78db      	ldrb	r3, [r3, #3]
 800d656:	469c      	mov	ip, r3
 800d658:	69bb      	ldr	r3, [r7, #24]
 800d65a:	791b      	ldrb	r3, [r3, #4]
 800d65c:	4698      	mov	r8, r3
 800d65e:	69bb      	ldr	r3, [r7, #24]
 800d660:	795b      	ldrb	r3, [r3, #5]
 800d662:	4699      	mov	r9, r3
 800d664:	69bb      	ldr	r3, [r7, #24]
 800d666:	799b      	ldrb	r3, [r3, #6]
 800d668:	469a      	mov	sl, r3
 800d66a:	69bb      	ldr	r3, [r7, #24]
 800d66c:	79db      	ldrb	r3, [r3, #7]
 800d66e:	469b      	mov	fp, r3
 800d670:	69bb      	ldr	r3, [r7, #24]
 800d672:	7a1b      	ldrb	r3, [r3, #8]
 800d674:	613b      	str	r3, [r7, #16]
 800d676:	69bb      	ldr	r3, [r7, #24]
 800d678:	7a5b      	ldrb	r3, [r3, #9]
 800d67a:	60fb      	str	r3, [r7, #12]
 800d67c:	69bb      	ldr	r3, [r7, #24]
 800d67e:	7a9b      	ldrb	r3, [r3, #10]
 800d680:	60bb      	str	r3, [r7, #8]
 800d682:	69bb      	ldr	r3, [r7, #24]
 800d684:	7adb      	ldrb	r3, [r3, #11]
 800d686:	607b      	str	r3, [r7, #4]
 800d688:	69bb      	ldr	r3, [r7, #24]
 800d68a:	7b1b      	ldrb	r3, [r3, #12]
 800d68c:	603b      	str	r3, [r7, #0]
 800d68e:	69bb      	ldr	r3, [r7, #24]
 800d690:	7b5b      	ldrb	r3, [r3, #13]
 800d692:	001c      	movs	r4, r3
 800d694:	69bb      	ldr	r3, [r7, #24]
 800d696:	7b9b      	ldrb	r3, [r3, #14]
 800d698:	0018      	movs	r0, r3
 800d69a:	69bb      	ldr	r3, [r7, #24]
 800d69c:	7bdb      	ldrb	r3, [r3, #15]
 800d69e:	0019      	movs	r1, r3
 800d6a0:	69bb      	ldr	r3, [r7, #24]
 800d6a2:	7c1b      	ldrb	r3, [r3, #16]
 800d6a4:	4a88      	ldr	r2, [pc, #544]	; (800d8c8 <SecureElementInit+0x3a4>)
 800d6a6:	930f      	str	r3, [sp, #60]	; 0x3c
 800d6a8:	910e      	str	r1, [sp, #56]	; 0x38
 800d6aa:	900d      	str	r0, [sp, #52]	; 0x34
 800d6ac:	940c      	str	r4, [sp, #48]	; 0x30
 800d6ae:	6839      	ldr	r1, [r7, #0]
 800d6b0:	910b      	str	r1, [sp, #44]	; 0x2c
 800d6b2:	6879      	ldr	r1, [r7, #4]
 800d6b4:	910a      	str	r1, [sp, #40]	; 0x28
 800d6b6:	68b9      	ldr	r1, [r7, #8]
 800d6b8:	9109      	str	r1, [sp, #36]	; 0x24
 800d6ba:	68f9      	ldr	r1, [r7, #12]
 800d6bc:	9108      	str	r1, [sp, #32]
 800d6be:	693b      	ldr	r3, [r7, #16]
 800d6c0:	9307      	str	r3, [sp, #28]
 800d6c2:	465b      	mov	r3, fp
 800d6c4:	9306      	str	r3, [sp, #24]
 800d6c6:	4653      	mov	r3, sl
 800d6c8:	9305      	str	r3, [sp, #20]
 800d6ca:	464b      	mov	r3, r9
 800d6cc:	9304      	str	r3, [sp, #16]
 800d6ce:	4643      	mov	r3, r8
 800d6d0:	9303      	str	r3, [sp, #12]
 800d6d2:	4663      	mov	r3, ip
 800d6d4:	9302      	str	r3, [sp, #8]
 800d6d6:	9601      	str	r6, [sp, #4]
 800d6d8:	9500      	str	r5, [sp, #0]
 800d6da:	0013      	movs	r3, r2
 800d6dc:	2200      	movs	r2, #0
 800d6de:	2100      	movs	r1, #0
 800d6e0:	2002      	movs	r0, #2
 800d6e2:	f00e fbc9 	bl	801be78 <UTIL_ADV_TRACE_COND_FSend>
  }
  KEY_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800d6e6:	4b79      	ldr	r3, [pc, #484]	; (800d8cc <SecureElementInit+0x3a8>)
 800d6e8:	2200      	movs	r2, #0
 800d6ea:	2100      	movs	r1, #0
 800d6ec:	2002      	movs	r0, #2
 800d6ee:	f00e fbc3 	bl	801be78 <UTIL_ADV_TRACE_COND_FSend>
  retval = GetKeyByID(APP_S_KEY, &keyItem);
 800d6f2:	250f      	movs	r5, #15
 800d6f4:	2610      	movs	r6, #16
 800d6f6:	19bb      	adds	r3, r7, r6
 800d6f8:	195c      	adds	r4, r3, r5
 800d6fa:	2308      	movs	r3, #8
 800d6fc:	2210      	movs	r2, #16
 800d6fe:	4694      	mov	ip, r2
 800d700:	44bc      	add	ip, r7
 800d702:	4463      	add	r3, ip
 800d704:	0019      	movs	r1, r3
 800d706:	2003      	movs	r0, #3
 800d708:	f7ff fe40 	bl	800d38c <GetKeyByID>
 800d70c:	0003      	movs	r3, r0
 800d70e:	7023      	strb	r3, [r4, #0]
  if (retval == SECURE_ELEMENT_SUCCESS)
 800d710:	19bb      	adds	r3, r7, r6
 800d712:	195b      	adds	r3, r3, r5
 800d714:	781b      	ldrb	r3, [r3, #0]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d14f      	bne.n	800d7ba <SecureElementInit+0x296>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### AppSKey: %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\r\n", HEX16(keyItem->KeyValue));
 800d71a:	69bb      	ldr	r3, [r7, #24]
 800d71c:	785b      	ldrb	r3, [r3, #1]
 800d71e:	001d      	movs	r5, r3
 800d720:	69bb      	ldr	r3, [r7, #24]
 800d722:	789b      	ldrb	r3, [r3, #2]
 800d724:	001e      	movs	r6, r3
 800d726:	69bb      	ldr	r3, [r7, #24]
 800d728:	78db      	ldrb	r3, [r3, #3]
 800d72a:	469c      	mov	ip, r3
 800d72c:	69bb      	ldr	r3, [r7, #24]
 800d72e:	791b      	ldrb	r3, [r3, #4]
 800d730:	4698      	mov	r8, r3
 800d732:	69bb      	ldr	r3, [r7, #24]
 800d734:	795b      	ldrb	r3, [r3, #5]
 800d736:	4699      	mov	r9, r3
 800d738:	69bb      	ldr	r3, [r7, #24]
 800d73a:	799b      	ldrb	r3, [r3, #6]
 800d73c:	469a      	mov	sl, r3
 800d73e:	69bb      	ldr	r3, [r7, #24]
 800d740:	79db      	ldrb	r3, [r3, #7]
 800d742:	469b      	mov	fp, r3
 800d744:	69bb      	ldr	r3, [r7, #24]
 800d746:	7a1b      	ldrb	r3, [r3, #8]
 800d748:	613b      	str	r3, [r7, #16]
 800d74a:	69bb      	ldr	r3, [r7, #24]
 800d74c:	7a5b      	ldrb	r3, [r3, #9]
 800d74e:	60fb      	str	r3, [r7, #12]
 800d750:	69bb      	ldr	r3, [r7, #24]
 800d752:	7a9b      	ldrb	r3, [r3, #10]
 800d754:	60bb      	str	r3, [r7, #8]
 800d756:	69bb      	ldr	r3, [r7, #24]
 800d758:	7adb      	ldrb	r3, [r3, #11]
 800d75a:	607b      	str	r3, [r7, #4]
 800d75c:	69bb      	ldr	r3, [r7, #24]
 800d75e:	7b1b      	ldrb	r3, [r3, #12]
 800d760:	603b      	str	r3, [r7, #0]
 800d762:	69bb      	ldr	r3, [r7, #24]
 800d764:	7b5b      	ldrb	r3, [r3, #13]
 800d766:	001c      	movs	r4, r3
 800d768:	69bb      	ldr	r3, [r7, #24]
 800d76a:	7b9b      	ldrb	r3, [r3, #14]
 800d76c:	0018      	movs	r0, r3
 800d76e:	69bb      	ldr	r3, [r7, #24]
 800d770:	7bdb      	ldrb	r3, [r3, #15]
 800d772:	0019      	movs	r1, r3
 800d774:	69bb      	ldr	r3, [r7, #24]
 800d776:	7c1b      	ldrb	r3, [r3, #16]
 800d778:	4a55      	ldr	r2, [pc, #340]	; (800d8d0 <SecureElementInit+0x3ac>)
 800d77a:	930f      	str	r3, [sp, #60]	; 0x3c
 800d77c:	910e      	str	r1, [sp, #56]	; 0x38
 800d77e:	900d      	str	r0, [sp, #52]	; 0x34
 800d780:	940c      	str	r4, [sp, #48]	; 0x30
 800d782:	6839      	ldr	r1, [r7, #0]
 800d784:	910b      	str	r1, [sp, #44]	; 0x2c
 800d786:	6879      	ldr	r1, [r7, #4]
 800d788:	910a      	str	r1, [sp, #40]	; 0x28
 800d78a:	68b9      	ldr	r1, [r7, #8]
 800d78c:	9109      	str	r1, [sp, #36]	; 0x24
 800d78e:	68f9      	ldr	r1, [r7, #12]
 800d790:	9108      	str	r1, [sp, #32]
 800d792:	693b      	ldr	r3, [r7, #16]
 800d794:	9307      	str	r3, [sp, #28]
 800d796:	465b      	mov	r3, fp
 800d798:	9306      	str	r3, [sp, #24]
 800d79a:	4653      	mov	r3, sl
 800d79c:	9305      	str	r3, [sp, #20]
 800d79e:	464b      	mov	r3, r9
 800d7a0:	9304      	str	r3, [sp, #16]
 800d7a2:	4643      	mov	r3, r8
 800d7a4:	9303      	str	r3, [sp, #12]
 800d7a6:	4663      	mov	r3, ip
 800d7a8:	9302      	str	r3, [sp, #8]
 800d7aa:	9601      	str	r6, [sp, #4]
 800d7ac:	9500      	str	r5, [sp, #0]
 800d7ae:	0013      	movs	r3, r2
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	2100      	movs	r1, #0
 800d7b4:	2002      	movs	r0, #2
 800d7b6:	f00e fb5f 	bl	801be78 <UTIL_ADV_TRACE_COND_FSend>
  }
  retval = GetKeyByID(NWK_S_KEY, &keyItem);
 800d7ba:	250f      	movs	r5, #15
 800d7bc:	2610      	movs	r6, #16
 800d7be:	19bb      	adds	r3, r7, r6
 800d7c0:	195c      	adds	r4, r3, r5
 800d7c2:	2308      	movs	r3, #8
 800d7c4:	2210      	movs	r2, #16
 800d7c6:	4694      	mov	ip, r2
 800d7c8:	44bc      	add	ip, r7
 800d7ca:	4463      	add	r3, ip
 800d7cc:	0019      	movs	r1, r3
 800d7ce:	2002      	movs	r0, #2
 800d7d0:	f7ff fddc 	bl	800d38c <GetKeyByID>
 800d7d4:	0003      	movs	r3, r0
 800d7d6:	7023      	strb	r3, [r4, #0]
  if (retval == SECURE_ELEMENT_SUCCESS)
 800d7d8:	19bb      	adds	r3, r7, r6
 800d7da:	195b      	adds	r3, r3, r5
 800d7dc:	781b      	ldrb	r3, [r3, #0]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d14f      	bne.n	800d882 <SecureElementInit+0x35e>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey: %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\r\n", HEX16(keyItem->KeyValue));
 800d7e2:	69bb      	ldr	r3, [r7, #24]
 800d7e4:	785b      	ldrb	r3, [r3, #1]
 800d7e6:	001d      	movs	r5, r3
 800d7e8:	69bb      	ldr	r3, [r7, #24]
 800d7ea:	789b      	ldrb	r3, [r3, #2]
 800d7ec:	001e      	movs	r6, r3
 800d7ee:	69bb      	ldr	r3, [r7, #24]
 800d7f0:	78db      	ldrb	r3, [r3, #3]
 800d7f2:	469c      	mov	ip, r3
 800d7f4:	69bb      	ldr	r3, [r7, #24]
 800d7f6:	791b      	ldrb	r3, [r3, #4]
 800d7f8:	4698      	mov	r8, r3
 800d7fa:	69bb      	ldr	r3, [r7, #24]
 800d7fc:	795b      	ldrb	r3, [r3, #5]
 800d7fe:	4699      	mov	r9, r3
 800d800:	69bb      	ldr	r3, [r7, #24]
 800d802:	799b      	ldrb	r3, [r3, #6]
 800d804:	469a      	mov	sl, r3
 800d806:	69bb      	ldr	r3, [r7, #24]
 800d808:	79db      	ldrb	r3, [r3, #7]
 800d80a:	469b      	mov	fp, r3
 800d80c:	69bb      	ldr	r3, [r7, #24]
 800d80e:	7a1b      	ldrb	r3, [r3, #8]
 800d810:	613b      	str	r3, [r7, #16]
 800d812:	69bb      	ldr	r3, [r7, #24]
 800d814:	7a5b      	ldrb	r3, [r3, #9]
 800d816:	60fb      	str	r3, [r7, #12]
 800d818:	69bb      	ldr	r3, [r7, #24]
 800d81a:	7a9b      	ldrb	r3, [r3, #10]
 800d81c:	60bb      	str	r3, [r7, #8]
 800d81e:	69bb      	ldr	r3, [r7, #24]
 800d820:	7adb      	ldrb	r3, [r3, #11]
 800d822:	607b      	str	r3, [r7, #4]
 800d824:	69bb      	ldr	r3, [r7, #24]
 800d826:	7b1b      	ldrb	r3, [r3, #12]
 800d828:	603b      	str	r3, [r7, #0]
 800d82a:	69bb      	ldr	r3, [r7, #24]
 800d82c:	7b5b      	ldrb	r3, [r3, #13]
 800d82e:	001c      	movs	r4, r3
 800d830:	69bb      	ldr	r3, [r7, #24]
 800d832:	7b9b      	ldrb	r3, [r3, #14]
 800d834:	0018      	movs	r0, r3
 800d836:	69bb      	ldr	r3, [r7, #24]
 800d838:	7bdb      	ldrb	r3, [r3, #15]
 800d83a:	0019      	movs	r1, r3
 800d83c:	69bb      	ldr	r3, [r7, #24]
 800d83e:	7c1b      	ldrb	r3, [r3, #16]
 800d840:	4a24      	ldr	r2, [pc, #144]	; (800d8d4 <SecureElementInit+0x3b0>)
 800d842:	930f      	str	r3, [sp, #60]	; 0x3c
 800d844:	910e      	str	r1, [sp, #56]	; 0x38
 800d846:	900d      	str	r0, [sp, #52]	; 0x34
 800d848:	940c      	str	r4, [sp, #48]	; 0x30
 800d84a:	6839      	ldr	r1, [r7, #0]
 800d84c:	910b      	str	r1, [sp, #44]	; 0x2c
 800d84e:	6879      	ldr	r1, [r7, #4]
 800d850:	910a      	str	r1, [sp, #40]	; 0x28
 800d852:	68b9      	ldr	r1, [r7, #8]
 800d854:	9109      	str	r1, [sp, #36]	; 0x24
 800d856:	68f9      	ldr	r1, [r7, #12]
 800d858:	9108      	str	r1, [sp, #32]
 800d85a:	693b      	ldr	r3, [r7, #16]
 800d85c:	9307      	str	r3, [sp, #28]
 800d85e:	465b      	mov	r3, fp
 800d860:	9306      	str	r3, [sp, #24]
 800d862:	4653      	mov	r3, sl
 800d864:	9305      	str	r3, [sp, #20]
 800d866:	464b      	mov	r3, r9
 800d868:	9304      	str	r3, [sp, #16]
 800d86a:	4643      	mov	r3, r8
 800d86c:	9303      	str	r3, [sp, #12]
 800d86e:	4663      	mov	r3, ip
 800d870:	9302      	str	r3, [sp, #8]
 800d872:	9601      	str	r6, [sp, #4]
 800d874:	9500      	str	r5, [sp, #0]
 800d876:	0013      	movs	r3, r2
 800d878:	2200      	movs	r2, #0
 800d87a:	2100      	movs	r1, #0
 800d87c:	2002      	movs	r0, #2
 800d87e:	f00e fafb 	bl	801be78 <UTIL_ADV_TRACE_COND_FSend>
  SeNvmCtx.KeyList[itr].KeyID = SLOT_RAND_ZERO_KEY;

#endif /* LORAWAN_KMS */

  /* Assign callback */
  if (seNvmCtxChanged != 0)
 800d882:	697b      	ldr	r3, [r7, #20]
 800d884:	2b00      	cmp	r3, #0
 800d886:	d003      	beq.n	800d890 <SecureElementInit+0x36c>
  {
    SeNvmCtxChanged = seNvmCtxChanged;
 800d888:	4b13      	ldr	r3, [pc, #76]	; (800d8d8 <SecureElementInit+0x3b4>)
 800d88a:	697a      	ldr	r2, [r7, #20]
 800d88c:	601a      	str	r2, [r3, #0]
 800d88e:	e002      	b.n	800d896 <SecureElementInit+0x372>
  }
  else
  {
    SeNvmCtxChanged = DummyCB;
 800d890:	4b11      	ldr	r3, [pc, #68]	; (800d8d8 <SecureElementInit+0x3b4>)
 800d892:	4a12      	ldr	r2, [pc, #72]	; (800d8dc <SecureElementInit+0x3b8>)
 800d894:	601a      	str	r2, [r3, #0]
  }

#if !defined( SECURE_ELEMENT_PRE_PROVISIONED )
#if ( STATIC_DEVICE_EUI == 0 )
  /* Get a DevEUI from MCU unique ID */
  GetUniqueId(SeNvmCtx.DevEui);
 800d896:	4b12      	ldr	r3, [pc, #72]	; (800d8e0 <SecureElementInit+0x3bc>)
 800d898:	0018      	movs	r0, r3
 800d89a:	f7f7 f96e 	bl	8004b7a <GetUniqueId>
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
  SeNvmCtxChanged();
 800d89e:	4b0e      	ldr	r3, [pc, #56]	; (800d8d8 <SecureElementInit+0x3b4>)
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	4798      	blx	r3

  return SECURE_ELEMENT_SUCCESS;
 800d8a4:	2300      	movs	r3, #0
}
 800d8a6:	0018      	movs	r0, r3
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	b009      	add	sp, #36	; 0x24
 800d8ac:	bcf0      	pop	{r4, r5, r6, r7}
 800d8ae:	46bb      	mov	fp, r7
 800d8b0:	46b2      	mov	sl, r6
 800d8b2:	46a9      	mov	r9, r5
 800d8b4:	46a0      	mov	r8, r4
 800d8b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d8b8:	0801f5b8 	.word	0x0801f5b8
 800d8bc:	2000008c 	.word	0x2000008c
 800d8c0:	0801f664 	.word	0x0801f664
 800d8c4:	0801f67c 	.word	0x0801f67c
 800d8c8:	0801f6e0 	.word	0x0801f6e0
 800d8cc:	0801f744 	.word	0x0801f744
 800d8d0:	0801f75c 	.word	0x0801f75c
 800d8d4:	0801f7c0 	.word	0x0801f7c0
 800d8d8:	2000041c 	.word	0x2000041c
 800d8dc:	0800d401 	.word	0x0800d401
 800d8e0:	2000007c 	.word	0x2000007c

0800d8e4 <SecureElementRestoreNvmCtx>:
  return SECURE_ELEMENT_SUCCESS;
#endif /* LORAWAN_KMS == 1 */
}

SecureElementStatus_t SecureElementRestoreNvmCtx(void *seNvmCtx)
{
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b082      	sub	sp, #8
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
  /* Restore nvm context */
  if (seNvmCtx != 0)
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d007      	beq.n	800d902 <SecureElementRestoreNvmCtx+0x1e>
  {
    memcpy1((uint8_t *) &SeNvmCtx, (uint8_t *) seNvmCtx, sizeof(SeNvmCtx));
 800d8f2:	6879      	ldr	r1, [r7, #4]
 800d8f4:	4b05      	ldr	r3, [pc, #20]	; (800d90c <SecureElementRestoreNvmCtx+0x28>)
 800d8f6:	22ba      	movs	r2, #186	; 0xba
 800d8f8:	0018      	movs	r0, r3
 800d8fa:	f00b fe49 	bl	8019590 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800d8fe:	2300      	movs	r3, #0
 800d900:	e000      	b.n	800d904 <SecureElementRestoreNvmCtx+0x20>
  }
  else
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800d902:	2302      	movs	r3, #2
  }
}
 800d904:	0018      	movs	r0, r3
 800d906:	46bd      	mov	sp, r7
 800d908:	b002      	add	sp, #8
 800d90a:	bd80      	pop	{r7, pc}
 800d90c:	2000007c 	.word	0x2000007c

0800d910 <SecureElementGetNvmCtx>:

void *SecureElementGetNvmCtx(size_t *seNvmCtxSize)
{
 800d910:	b580      	push	{r7, lr}
 800d912:	b082      	sub	sp, #8
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
  *seNvmCtxSize = sizeof(SeNvmCtx);
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	22ba      	movs	r2, #186	; 0xba
 800d91c:	601a      	str	r2, [r3, #0]
  return &SeNvmCtx;
 800d91e:	4b02      	ldr	r3, [pc, #8]	; (800d928 <SecureElementGetNvmCtx+0x18>)
}
 800d920:	0018      	movs	r0, r3
 800d922:	46bd      	mov	sp, r7
 800d924:	b002      	add	sp, #8
 800d926:	bd80      	pop	{r7, pc}
 800d928:	2000007c 	.word	0x2000007c

0800d92c <SecureElementSetKey>:

SecureElementStatus_t SecureElementSetKey(KeyIdentifier_t keyID, uint8_t *key)
{
 800d92c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d92e:	b089      	sub	sp, #36	; 0x24
 800d930:	af00      	add	r7, sp, #0
 800d932:	0002      	movs	r2, r0
 800d934:	6039      	str	r1, [r7, #0]
 800d936:	1dfb      	adds	r3, r7, #7
 800d938:	701a      	strb	r2, [r3, #0]
  if (key == NULL)
 800d93a:	683b      	ldr	r3, [r7, #0]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d101      	bne.n	800d944 <SecureElementSetKey+0x18>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800d940:	2302      	movs	r3, #2
 800d942:	e064      	b.n	800da0e <SecureElementSetKey+0xe2>
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800d944:	231f      	movs	r3, #31
 800d946:	18fb      	adds	r3, r7, r3
 800d948:	2200      	movs	r2, #0
 800d94a:	701a      	strb	r2, [r3, #0]
 800d94c:	e059      	b.n	800da02 <SecureElementSetKey+0xd6>
  {
    if (SeNvmCtx.KeyList[i].KeyID == keyID)
 800d94e:	231f      	movs	r3, #31
 800d950:	18fb      	adds	r3, r7, r3
 800d952:	781a      	ldrb	r2, [r3, #0]
 800d954:	4930      	ldr	r1, [pc, #192]	; (800da18 <SecureElementSetKey+0xec>)
 800d956:	0013      	movs	r3, r2
 800d958:	011b      	lsls	r3, r3, #4
 800d95a:	189b      	adds	r3, r3, r2
 800d95c:	18cb      	adds	r3, r1, r3
 800d95e:	3310      	adds	r3, #16
 800d960:	781b      	ldrb	r3, [r3, #0]
 800d962:	1dfa      	adds	r2, r7, #7
 800d964:	7812      	ldrb	r2, [r2, #0]
 800d966:	429a      	cmp	r2, r3
 800d968:	d145      	bne.n	800d9f6 <SecureElementSetKey+0xca>
    {
#if ( LORAMAC_MAX_MC_CTX == 1 )
      if (keyID == MC_KEY_0)
 800d96a:	1dfb      	adds	r3, r7, #7
 800d96c:	781b      	ldrb	r3, [r3, #0]
 800d96e:	2b80      	cmp	r3, #128	; 0x80
 800d970:	d12c      	bne.n	800d9cc <SecureElementSetKey+0xa0>
#else /* LORAMAC_MAX_MC_CTX > 1 */
      if ((keyID == MC_KEY_0) || (keyID == MC_KEY_1) || (keyID == MC_KEY_2) || (keyID == MC_KEY_3))
#endif /* LORAMAC_MAX_MC_CTX */
      {
        /* Decrypt the key if its a Mckey */
        SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800d972:	251e      	movs	r5, #30
 800d974:	197b      	adds	r3, r7, r5
 800d976:	2206      	movs	r2, #6
 800d978:	701a      	strb	r2, [r3, #0]
        uint8_t decryptedKey[16] = { 0 };
 800d97a:	260c      	movs	r6, #12
 800d97c:	19bb      	adds	r3, r7, r6
 800d97e:	2200      	movs	r2, #0
 800d980:	601a      	str	r2, [r3, #0]
 800d982:	3304      	adds	r3, #4
 800d984:	220c      	movs	r2, #12
 800d986:	2100      	movs	r1, #0
 800d988:	0018      	movs	r0, r3
 800d98a:	f010 fb12 	bl	801dfb2 <memset>

        retval = SecureElementAesEncrypt(key, 16, MC_KE_KEY, decryptedKey);
 800d98e:	197c      	adds	r4, r7, r5
 800d990:	19bb      	adds	r3, r7, r6
 800d992:	6838      	ldr	r0, [r7, #0]
 800d994:	227f      	movs	r2, #127	; 0x7f
 800d996:	2110      	movs	r1, #16
 800d998:	f000 f8a5 	bl	800dae6 <SecureElementAesEncrypt>
 800d99c:	0003      	movs	r3, r0
 800d99e:	7023      	strb	r3, [r4, #0]

        memcpy1(SeNvmCtx.KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE);
 800d9a0:	231f      	movs	r3, #31
 800d9a2:	18fb      	adds	r3, r7, r3
 800d9a4:	781a      	ldrb	r2, [r3, #0]
 800d9a6:	0013      	movs	r3, r2
 800d9a8:	011b      	lsls	r3, r3, #4
 800d9aa:	189b      	adds	r3, r3, r2
 800d9ac:	3310      	adds	r3, #16
 800d9ae:	001a      	movs	r2, r3
 800d9b0:	4b19      	ldr	r3, [pc, #100]	; (800da18 <SecureElementSetKey+0xec>)
 800d9b2:	18d3      	adds	r3, r2, r3
 800d9b4:	3301      	adds	r3, #1
 800d9b6:	19b9      	adds	r1, r7, r6
 800d9b8:	2210      	movs	r2, #16
 800d9ba:	0018      	movs	r0, r3
 800d9bc:	f00b fde8 	bl	8019590 <memcpy1>
        SeNvmCtxChanged();
 800d9c0:	4b16      	ldr	r3, [pc, #88]	; (800da1c <SecureElementSetKey+0xf0>)
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	4798      	blx	r3

        return retval;
 800d9c6:	197b      	adds	r3, r7, r5
 800d9c8:	781b      	ldrb	r3, [r3, #0]
 800d9ca:	e020      	b.n	800da0e <SecureElementSetKey+0xe2>
      }
      else
      {
        memcpy1(SeNvmCtx.KeyList[i].KeyValue, key, SE_KEY_SIZE);
 800d9cc:	231f      	movs	r3, #31
 800d9ce:	18fb      	adds	r3, r7, r3
 800d9d0:	781a      	ldrb	r2, [r3, #0]
 800d9d2:	0013      	movs	r3, r2
 800d9d4:	011b      	lsls	r3, r3, #4
 800d9d6:	189b      	adds	r3, r3, r2
 800d9d8:	3310      	adds	r3, #16
 800d9da:	001a      	movs	r2, r3
 800d9dc:	4b0e      	ldr	r3, [pc, #56]	; (800da18 <SecureElementSetKey+0xec>)
 800d9de:	18d3      	adds	r3, r2, r3
 800d9e0:	3301      	adds	r3, #1
 800d9e2:	6839      	ldr	r1, [r7, #0]
 800d9e4:	2210      	movs	r2, #16
 800d9e6:	0018      	movs	r0, r3
 800d9e8:	f00b fdd2 	bl	8019590 <memcpy1>
        SeNvmCtxChanged();
 800d9ec:	4b0b      	ldr	r3, [pc, #44]	; (800da1c <SecureElementSetKey+0xf0>)
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	4798      	blx	r3
        return SECURE_ELEMENT_SUCCESS;
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	e00b      	b.n	800da0e <SecureElementSetKey+0xe2>
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800d9f6:	211f      	movs	r1, #31
 800d9f8:	187b      	adds	r3, r7, r1
 800d9fa:	781a      	ldrb	r2, [r3, #0]
 800d9fc:	187b      	adds	r3, r7, r1
 800d9fe:	3201      	adds	r2, #1
 800da00:	701a      	strb	r2, [r3, #0]
 800da02:	231f      	movs	r3, #31
 800da04:	18fb      	adds	r3, r7, r3
 800da06:	781b      	ldrb	r3, [r3, #0]
 800da08:	2b09      	cmp	r3, #9
 800da0a:	d9a0      	bls.n	800d94e <SecureElementSetKey+0x22>
      }
    }
  }
  return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800da0c:	2303      	movs	r3, #3
#else /* LORAWAN_KMS == 1 */
  /* Indexes are already stored at init or when deriving the key */
  CK_OBJECT_HANDLE keyIndex;
  return GetKeyIndexByID(keyID, &keyIndex);
#endif /* LORAWAN_KMS */
}
 800da0e:	0018      	movs	r0, r3
 800da10:	46bd      	mov	sp, r7
 800da12:	b009      	add	sp, #36	; 0x24
 800da14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da16:	46c0      	nop			; (mov r8, r8)
 800da18:	2000007c 	.word	0x2000007c
 800da1c:	2000041c 	.word	0x2000041c

0800da20 <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size,
                                                  KeyIdentifier_t keyID, uint32_t *cmac)
{
 800da20:	b590      	push	{r4, r7, lr}
 800da22:	b087      	sub	sp, #28
 800da24:	af02      	add	r7, sp, #8
 800da26:	60f8      	str	r0, [r7, #12]
 800da28:	60b9      	str	r1, [r7, #8]
 800da2a:	0019      	movs	r1, r3
 800da2c:	1dbb      	adds	r3, r7, #6
 800da2e:	801a      	strh	r2, [r3, #0]
 800da30:	1d7b      	adds	r3, r7, #5
 800da32:	1c0a      	adds	r2, r1, #0
 800da34:	701a      	strb	r2, [r3, #0]
  if (keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS)
 800da36:	1d7b      	adds	r3, r7, #5
 800da38:	781b      	ldrb	r3, [r3, #0]
 800da3a:	2b7e      	cmp	r3, #126	; 0x7e
 800da3c:	d901      	bls.n	800da42 <SecureElementComputeAesCmac+0x22>
  {
    /* Never accept multicast key identifier for cmac computation */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800da3e:	2303      	movs	r3, #3
 800da40:	e00b      	b.n	800da5a <SecureElementComputeAesCmac+0x3a>
  }

  return ComputeCmac(micBxBuffer, buffer, size, keyID, cmac);
 800da42:	1d7b      	adds	r3, r7, #5
 800da44:	781c      	ldrb	r4, [r3, #0]
 800da46:	1dbb      	adds	r3, r7, #6
 800da48:	881a      	ldrh	r2, [r3, #0]
 800da4a:	68b9      	ldr	r1, [r7, #8]
 800da4c:	68f8      	ldr	r0, [r7, #12]
 800da4e:	6a3b      	ldr	r3, [r7, #32]
 800da50:	9300      	str	r3, [sp, #0]
 800da52:	0023      	movs	r3, r4
 800da54:	f7ff fcda 	bl	800d40c <ComputeCmac>
 800da58:	0003      	movs	r3, r0
}
 800da5a:	0018      	movs	r0, r3
 800da5c:	46bd      	mov	sp, r7
 800da5e:	b005      	add	sp, #20
 800da60:	bd90      	pop	{r4, r7, pc}

0800da62 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac(uint8_t *buffer, uint16_t size, uint32_t expectedCmac,
                                                 KeyIdentifier_t keyID)
{
 800da62:	b5b0      	push	{r4, r5, r7, lr}
 800da64:	b088      	sub	sp, #32
 800da66:	af02      	add	r7, sp, #8
 800da68:	60f8      	str	r0, [r7, #12]
 800da6a:	0008      	movs	r0, r1
 800da6c:	607a      	str	r2, [r7, #4]
 800da6e:	0019      	movs	r1, r3
 800da70:	230a      	movs	r3, #10
 800da72:	18fb      	adds	r3, r7, r3
 800da74:	1c02      	adds	r2, r0, #0
 800da76:	801a      	strh	r2, [r3, #0]
 800da78:	2309      	movs	r3, #9
 800da7a:	18fb      	adds	r3, r7, r3
 800da7c:	1c0a      	adds	r2, r1, #0
 800da7e:	701a      	strb	r2, [r3, #0]
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800da80:	2317      	movs	r3, #23
 800da82:	18fb      	adds	r3, r7, r3
 800da84:	2206      	movs	r2, #6
 800da86:	701a      	strb	r2, [r3, #0]
  if (buffer == NULL)
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d101      	bne.n	800da92 <SecureElementVerifyAesCmac+0x30>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800da8e:	2302      	movs	r3, #2
 800da90:	e025      	b.n	800dade <SecureElementVerifyAesCmac+0x7c>
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  uint32_t compCmac = 0;
 800da92:	2300      	movs	r3, #0
 800da94:	613b      	str	r3, [r7, #16]

  retval = ComputeCmac(NULL, buffer, size, keyID, &compCmac);
 800da96:	2517      	movs	r5, #23
 800da98:	197c      	adds	r4, r7, r5
 800da9a:	2309      	movs	r3, #9
 800da9c:	18fb      	adds	r3, r7, r3
 800da9e:	7818      	ldrb	r0, [r3, #0]
 800daa0:	230a      	movs	r3, #10
 800daa2:	18fb      	adds	r3, r7, r3
 800daa4:	881a      	ldrh	r2, [r3, #0]
 800daa6:	68f9      	ldr	r1, [r7, #12]
 800daa8:	2310      	movs	r3, #16
 800daaa:	18fb      	adds	r3, r7, r3
 800daac:	9300      	str	r3, [sp, #0]
 800daae:	0003      	movs	r3, r0
 800dab0:	2000      	movs	r0, #0
 800dab2:	f7ff fcab 	bl	800d40c <ComputeCmac>
 800dab6:	0003      	movs	r3, r0
 800dab8:	7023      	strb	r3, [r4, #0]
  if (retval != SECURE_ELEMENT_SUCCESS)
 800daba:	197b      	adds	r3, r7, r5
 800dabc:	781b      	ldrb	r3, [r3, #0]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d002      	beq.n	800dac8 <SecureElementVerifyAesCmac+0x66>
  {
    return retval;
 800dac2:	197b      	adds	r3, r7, r5
 800dac4:	781b      	ldrb	r3, [r3, #0]
 800dac6:	e00a      	b.n	800dade <SecureElementVerifyAesCmac+0x7c>
  }

  if (expectedCmac != compCmac)
 800dac8:	693b      	ldr	r3, [r7, #16]
 800daca:	687a      	ldr	r2, [r7, #4]
 800dacc:	429a      	cmp	r2, r3
 800dace:	d003      	beq.n	800dad8 <SecureElementVerifyAesCmac+0x76>
  {
    retval = SECURE_ELEMENT_FAIL_CMAC;
 800dad0:	2317      	movs	r3, #23
 800dad2:	18fb      	adds	r3, r7, r3
 800dad4:	2201      	movs	r2, #1
 800dad6:	701a      	strb	r2, [r3, #0]
    retval = SECURE_ELEMENT_ERROR;
  }

#endif /* LORAWAN_KMS */

  return retval;
 800dad8:	2317      	movs	r3, #23
 800dada:	18fb      	adds	r3, r7, r3
 800dadc:	781b      	ldrb	r3, [r3, #0]
}
 800dade:	0018      	movs	r0, r3
 800dae0:	46bd      	mov	sp, r7
 800dae2:	b006      	add	sp, #24
 800dae4:	bdb0      	pop	{r4, r5, r7, pc}

0800dae6 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt(uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                              uint8_t *encBuffer)
{
 800dae6:	b5b0      	push	{r4, r5, r7, lr}
 800dae8:	b0c2      	sub	sp, #264	; 0x108
 800daea:	af00      	add	r7, sp, #0
 800daec:	60f8      	str	r0, [r7, #12]
 800daee:	0008      	movs	r0, r1
 800daf0:	0011      	movs	r1, r2
 800daf2:	607b      	str	r3, [r7, #4]
 800daf4:	230a      	movs	r3, #10
 800daf6:	18fb      	adds	r3, r7, r3
 800daf8:	1c02      	adds	r2, r0, #0
 800dafa:	801a      	strh	r2, [r3, #0]
 800dafc:	2309      	movs	r3, #9
 800dafe:	18fb      	adds	r3, r7, r3
 800db00:	1c0a      	adds	r2, r1, #0
 800db02:	701a      	strb	r2, [r3, #0]
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800db04:	1dfb      	adds	r3, r7, #7
 800db06:	33ff      	adds	r3, #255	; 0xff
 800db08:	2206      	movs	r2, #6
 800db0a:	701a      	strb	r2, [r3, #0]
  if (buffer == NULL || encBuffer == NULL)
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d002      	beq.n	800db18 <SecureElementAesEncrypt+0x32>
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d101      	bne.n	800db1c <SecureElementAesEncrypt+0x36>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800db18:	2302      	movs	r3, #2
 800db1a:	e051      	b.n	800dbc0 <SecureElementAesEncrypt+0xda>
  }

  /* Check if the size is divisible by 16 */
  if ((size % 16) != 0)
 800db1c:	230a      	movs	r3, #10
 800db1e:	18fb      	adds	r3, r7, r3
 800db20:	881b      	ldrh	r3, [r3, #0]
 800db22:	220f      	movs	r2, #15
 800db24:	4013      	ands	r3, r2
 800db26:	b29b      	uxth	r3, r3
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d001      	beq.n	800db30 <SecureElementAesEncrypt+0x4a>
  {
    return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800db2c:	2305      	movs	r3, #5
 800db2e:	e047      	b.n	800dbc0 <SecureElementAesEncrypt+0xda>
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  lorawan_aes_context aesContext;
  memset1(aesContext.ksch, '\0', 240);
 800db30:	2514      	movs	r5, #20
 800db32:	197b      	adds	r3, r7, r5
 800db34:	22f0      	movs	r2, #240	; 0xf0
 800db36:	2100      	movs	r1, #0
 800db38:	0018      	movs	r0, r3
 800db3a:	f00b fd67 	bl	801960c <memset1>

  Key_t *pItem;
  retval = GetKeyByID(keyID, &pItem);
 800db3e:	1dfc      	adds	r4, r7, #7
 800db40:	34ff      	adds	r4, #255	; 0xff
 800db42:	2310      	movs	r3, #16
 800db44:	18fa      	adds	r2, r7, r3
 800db46:	2309      	movs	r3, #9
 800db48:	18fb      	adds	r3, r7, r3
 800db4a:	781b      	ldrb	r3, [r3, #0]
 800db4c:	0011      	movs	r1, r2
 800db4e:	0018      	movs	r0, r3
 800db50:	f7ff fc1c 	bl	800d38c <GetKeyByID>
 800db54:	0003      	movs	r3, r0
 800db56:	7023      	strb	r3, [r4, #0]

  if (retval == SECURE_ELEMENT_SUCCESS)
 800db58:	1dfb      	adds	r3, r7, #7
 800db5a:	33ff      	adds	r3, #255	; 0xff
 800db5c:	781b      	ldrb	r3, [r3, #0]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d12b      	bne.n	800dbba <SecureElementAesEncrypt+0xd4>
  {
    lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800db62:	693b      	ldr	r3, [r7, #16]
 800db64:	3301      	adds	r3, #1
 800db66:	197a      	adds	r2, r7, r5
 800db68:	2110      	movs	r1, #16
 800db6a:	0018      	movs	r0, r3
 800db6c:	f7ff fa88 	bl	800d080 <lorawan_aes_set_key>

    uint8_t block = 0;
 800db70:	2308      	movs	r3, #8
 800db72:	33ff      	adds	r3, #255	; 0xff
 800db74:	18fb      	adds	r3, r7, r3
 800db76:	2200      	movs	r2, #0
 800db78:	701a      	strb	r2, [r3, #0]

    while (size != 0)
 800db7a:	e019      	b.n	800dbb0 <SecureElementAesEncrypt+0xca>
    {
      lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800db7c:	2408      	movs	r4, #8
 800db7e:	34ff      	adds	r4, #255	; 0xff
 800db80:	193b      	adds	r3, r7, r4
 800db82:	781b      	ldrb	r3, [r3, #0]
 800db84:	68fa      	ldr	r2, [r7, #12]
 800db86:	18d0      	adds	r0, r2, r3
 800db88:	193b      	adds	r3, r7, r4
 800db8a:	781b      	ldrb	r3, [r3, #0]
 800db8c:	687a      	ldr	r2, [r7, #4]
 800db8e:	18d3      	adds	r3, r2, r3
 800db90:	2214      	movs	r2, #20
 800db92:	18ba      	adds	r2, r7, r2
 800db94:	0019      	movs	r1, r3
 800db96:	f7ff fbaf 	bl	800d2f8 <lorawan_aes_encrypt>
      block = block + 16;
 800db9a:	193b      	adds	r3, r7, r4
 800db9c:	193a      	adds	r2, r7, r4
 800db9e:	7812      	ldrb	r2, [r2, #0]
 800dba0:	3210      	adds	r2, #16
 800dba2:	701a      	strb	r2, [r3, #0]
      size = size - 16;
 800dba4:	220a      	movs	r2, #10
 800dba6:	18bb      	adds	r3, r7, r2
 800dba8:	18ba      	adds	r2, r7, r2
 800dbaa:	8812      	ldrh	r2, [r2, #0]
 800dbac:	3a10      	subs	r2, #16
 800dbae:	801a      	strh	r2, [r3, #0]
    while (size != 0)
 800dbb0:	230a      	movs	r3, #10
 800dbb2:	18fb      	adds	r3, r7, r3
 800dbb4:	881b      	ldrh	r3, [r3, #0]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d1e0      	bne.n	800db7c <SecureElementAesEncrypt+0x96>
  {
    retval = SECURE_ELEMENT_ERROR;
  }
#endif /* LORAWAN_KMS */

  return retval;
 800dbba:	1dfb      	adds	r3, r7, #7
 800dbbc:	33ff      	adds	r3, #255	; 0xff
 800dbbe:	781b      	ldrb	r3, [r3, #0]
}
 800dbc0:	0018      	movs	r0, r3
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	b042      	add	sp, #264	; 0x108
 800dbc6:	bdb0      	pop	{r4, r5, r7, pc}

0800dbc8 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey(Version_t version, uint8_t *input, KeyIdentifier_t rootKeyID,
                                                     KeyIdentifier_t targetKeyID)
{
 800dbc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dbca:	b08b      	sub	sp, #44	; 0x2c
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	60f8      	str	r0, [r7, #12]
 800dbd0:	60b9      	str	r1, [r7, #8]
 800dbd2:	0019      	movs	r1, r3
 800dbd4:	1dfb      	adds	r3, r7, #7
 800dbd6:	701a      	strb	r2, [r3, #0]
 800dbd8:	1dbb      	adds	r3, r7, #6
 800dbda:	1c0a      	adds	r2, r1, #0
 800dbdc:	701a      	strb	r2, [r3, #0]
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800dbde:	2327      	movs	r3, #39	; 0x27
 800dbe0:	18fb      	adds	r3, r7, r3
 800dbe2:	2206      	movs	r2, #6
 800dbe4:	701a      	strb	r2, [r3, #0]
  if (input == NULL)
 800dbe6:	68bb      	ldr	r3, [r7, #8]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d101      	bne.n	800dbf0 <SecureElementDeriveAndStoreKey+0x28>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800dbec:	2302      	movs	r3, #2
 800dbee:	e03c      	b.n	800dc6a <SecureElementDeriveAndStoreKey+0xa2>
  }

  /* In case of MC_KE_KEY, only McRootKey can be used as root key */
  if (targetKeyID == MC_KE_KEY)
 800dbf0:	1dbb      	adds	r3, r7, #6
 800dbf2:	781b      	ldrb	r3, [r3, #0]
 800dbf4:	2b7f      	cmp	r3, #127	; 0x7f
 800dbf6:	d105      	bne.n	800dc04 <SecureElementDeriveAndStoreKey+0x3c>
  {
    if (rootKeyID != MC_ROOT_KEY)
 800dbf8:	1dfb      	adds	r3, r7, #7
 800dbfa:	781b      	ldrb	r3, [r3, #0]
 800dbfc:	2b04      	cmp	r3, #4
 800dbfe:	d001      	beq.n	800dc04 <SecureElementDeriveAndStoreKey+0x3c>
    {
      return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800dc00:	2303      	movs	r3, #3
 800dc02:	e032      	b.n	800dc6a <SecureElementDeriveAndStoreKey+0xa2>
    }
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  uint8_t key[16] = { 0 };
 800dc04:	2614      	movs	r6, #20
 800dc06:	19bb      	adds	r3, r7, r6
 800dc08:	2200      	movs	r2, #0
 800dc0a:	601a      	str	r2, [r3, #0]
 800dc0c:	3304      	adds	r3, #4
 800dc0e:	220c      	movs	r2, #12
 800dc10:	2100      	movs	r1, #0
 800dc12:	0018      	movs	r0, r3
 800dc14:	f010 f9cd 	bl	801dfb2 <memset>
  /* Derive key */
  retval = SecureElementAesEncrypt(input, 16, rootKeyID, key);
 800dc18:	2527      	movs	r5, #39	; 0x27
 800dc1a:	197c      	adds	r4, r7, r5
 800dc1c:	19b9      	adds	r1, r7, r6
 800dc1e:	1dfb      	adds	r3, r7, #7
 800dc20:	781a      	ldrb	r2, [r3, #0]
 800dc22:	68b8      	ldr	r0, [r7, #8]
 800dc24:	000b      	movs	r3, r1
 800dc26:	2110      	movs	r1, #16
 800dc28:	f7ff ff5d 	bl	800dae6 <SecureElementAesEncrypt>
 800dc2c:	0003      	movs	r3, r0
 800dc2e:	7023      	strb	r3, [r4, #0]
  if (retval != SECURE_ELEMENT_SUCCESS)
 800dc30:	197b      	adds	r3, r7, r5
 800dc32:	781b      	ldrb	r3, [r3, #0]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d002      	beq.n	800dc3e <SecureElementDeriveAndStoreKey+0x76>
  {
    return retval;
 800dc38:	197b      	adds	r3, r7, r5
 800dc3a:	781b      	ldrb	r3, [r3, #0]
 800dc3c:	e015      	b.n	800dc6a <SecureElementDeriveAndStoreKey+0xa2>
  }

  /* Store key */
  retval = SecureElementSetKey(targetKeyID, key);
 800dc3e:	2527      	movs	r5, #39	; 0x27
 800dc40:	197c      	adds	r4, r7, r5
 800dc42:	2314      	movs	r3, #20
 800dc44:	18fa      	adds	r2, r7, r3
 800dc46:	1dbb      	adds	r3, r7, #6
 800dc48:	781b      	ldrb	r3, [r3, #0]
 800dc4a:	0011      	movs	r1, r2
 800dc4c:	0018      	movs	r0, r3
 800dc4e:	f7ff fe6d 	bl	800d92c <SecureElementSetKey>
 800dc52:	0003      	movs	r3, r0
 800dc54:	7023      	strb	r3, [r4, #0]
  if (retval != SECURE_ELEMENT_SUCCESS)
 800dc56:	197b      	adds	r3, r7, r5
 800dc58:	781b      	ldrb	r3, [r3, #0]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d002      	beq.n	800dc64 <SecureElementDeriveAndStoreKey+0x9c>
  {
    return retval;
 800dc5e:	197b      	adds	r3, r7, r5
 800dc60:	781b      	ldrb	r3, [r3, #0]
 800dc62:	e002      	b.n	800dc6a <SecureElementDeriveAndStoreKey+0xa2>
  {
    retval = SECURE_ELEMENT_ERROR;
  }
#endif /* LORAWAN_KMS */

  return retval;
 800dc64:	2327      	movs	r3, #39	; 0x27
 800dc66:	18fb      	adds	r3, r7, r3
 800dc68:	781b      	ldrb	r3, [r3, #0]
}
 800dc6a:	0018      	movs	r0, r3
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	b00b      	add	sp, #44	; 0x2c
 800dc70:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dc72 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept(JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                     uint16_t devNonce, uint8_t *encJoinAccept,
                                                     uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                     uint8_t *versionMinor)
{
 800dc72:	b5b0      	push	{r4, r5, r7, lr}
 800dc74:	b086      	sub	sp, #24
 800dc76:	af00      	add	r7, sp, #0
 800dc78:	60b9      	str	r1, [r7, #8]
 800dc7a:	0011      	movs	r1, r2
 800dc7c:	607b      	str	r3, [r7, #4]
 800dc7e:	230f      	movs	r3, #15
 800dc80:	18fb      	adds	r3, r7, r3
 800dc82:	1c02      	adds	r2, r0, #0
 800dc84:	701a      	strb	r2, [r3, #0]
 800dc86:	230c      	movs	r3, #12
 800dc88:	18fb      	adds	r3, r7, r3
 800dc8a:	1c0a      	adds	r2, r1, #0
 800dc8c:	801a      	strh	r2, [r3, #0]
  if ((encJoinAccept == NULL) || (decJoinAccept == NULL) || (versionMinor == NULL))
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d005      	beq.n	800dca0 <SecureElementProcessJoinAccept+0x2e>
 800dc94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d002      	beq.n	800dca0 <SecureElementProcessJoinAccept+0x2e>
 800dc9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d101      	bne.n	800dca4 <SecureElementProcessJoinAccept+0x32>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800dca0:	2302      	movs	r3, #2
 800dca2:	e069      	b.n	800dd78 <SecureElementProcessJoinAccept+0x106>
  }

  /* Check that frame size isn't bigger than a JoinAccept with CFList size */
  if (encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE)
 800dca4:	2328      	movs	r3, #40	; 0x28
 800dca6:	18fb      	adds	r3, r7, r3
 800dca8:	781b      	ldrb	r3, [r3, #0]
 800dcaa:	2b21      	cmp	r3, #33	; 0x21
 800dcac:	d901      	bls.n	800dcb2 <SecureElementProcessJoinAccept+0x40>
  {
    return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800dcae:	2305      	movs	r3, #5
 800dcb0:	e062      	b.n	800dd78 <SecureElementProcessJoinAccept+0x106>
  }

  /* Determine decryption key */
  KeyIdentifier_t encKeyID = NWK_KEY;
 800dcb2:	2517      	movs	r5, #23
 800dcb4:	197b      	adds	r3, r7, r5
 800dcb6:	2201      	movs	r2, #1
 800dcb8:	701a      	strb	r2, [r3, #0]
  {
    encKeyID = J_S_ENC_KEY;
  }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

  memcpy1(decJoinAccept, encJoinAccept, encJoinAcceptSize);
 800dcba:	2428      	movs	r4, #40	; 0x28
 800dcbc:	193b      	adds	r3, r7, r4
 800dcbe:	781b      	ldrb	r3, [r3, #0]
 800dcc0:	b29a      	uxth	r2, r3
 800dcc2:	6879      	ldr	r1, [r7, #4]
 800dcc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcc6:	0018      	movs	r0, r3
 800dcc8:	f00b fc62 	bl	8019590 <memcpy1>

  /* Decrypt JoinAccept, skip MHDR */
  if (SecureElementAesEncrypt(encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	1c58      	adds	r0, r3, #1
 800dcd0:	193b      	adds	r3, r7, r4
 800dcd2:	781b      	ldrb	r3, [r3, #0]
 800dcd4:	b29b      	uxth	r3, r3
 800dcd6:	3b01      	subs	r3, #1
 800dcd8:	b299      	uxth	r1, r3
 800dcda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcdc:	1c5c      	adds	r4, r3, #1
 800dcde:	197b      	adds	r3, r7, r5
 800dce0:	781a      	ldrb	r2, [r3, #0]
 800dce2:	0023      	movs	r3, r4
 800dce4:	f7ff feff 	bl	800dae6 <SecureElementAesEncrypt>
 800dce8:	1e03      	subs	r3, r0, #0
 800dcea:	d001      	beq.n	800dcf0 <SecureElementProcessJoinAccept+0x7e>
                              encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE) != SECURE_ELEMENT_SUCCESS)
  {
    return SECURE_ELEMENT_FAIL_ENCRYPT;
 800dcec:	2307      	movs	r3, #7
 800dcee:	e043      	b.n	800dd78 <SecureElementProcessJoinAccept+0x106>
  }

  *versionMinor = ((decJoinAccept[11] & 0x80) == 0x80) ? 1 : 0;
 800dcf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcf2:	330b      	adds	r3, #11
 800dcf4:	781b      	ldrb	r3, [r3, #0]
 800dcf6:	09db      	lsrs	r3, r3, #7
 800dcf8:	b2da      	uxtb	r2, r3
 800dcfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcfc:	701a      	strb	r2, [r3, #0]

  uint32_t mic = 0;
 800dcfe:	2300      	movs	r3, #0
 800dd00:	613b      	str	r3, [r7, #16]

  mic = ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0);
 800dd02:	2128      	movs	r1, #40	; 0x28
 800dd04:	187b      	adds	r3, r7, r1
 800dd06:	781b      	ldrb	r3, [r3, #0]
 800dd08:	3b04      	subs	r3, #4
 800dd0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd0c:	18d3      	adds	r3, r2, r3
 800dd0e:	781b      	ldrb	r3, [r3, #0]
 800dd10:	613b      	str	r3, [r7, #16]
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8);
 800dd12:	187b      	adds	r3, r7, r1
 800dd14:	781b      	ldrb	r3, [r3, #0]
 800dd16:	3b03      	subs	r3, #3
 800dd18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd1a:	18d3      	adds	r3, r2, r3
 800dd1c:	781b      	ldrb	r3, [r3, #0]
 800dd1e:	021b      	lsls	r3, r3, #8
 800dd20:	693a      	ldr	r2, [r7, #16]
 800dd22:	4313      	orrs	r3, r2
 800dd24:	613b      	str	r3, [r7, #16]
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16);
 800dd26:	187b      	adds	r3, r7, r1
 800dd28:	781b      	ldrb	r3, [r3, #0]
 800dd2a:	3b02      	subs	r3, #2
 800dd2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd2e:	18d3      	adds	r3, r2, r3
 800dd30:	781b      	ldrb	r3, [r3, #0]
 800dd32:	041b      	lsls	r3, r3, #16
 800dd34:	693a      	ldr	r2, [r7, #16]
 800dd36:	4313      	orrs	r3, r2
 800dd38:	613b      	str	r3, [r7, #16]
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24);
 800dd3a:	187b      	adds	r3, r7, r1
 800dd3c:	781b      	ldrb	r3, [r3, #0]
 800dd3e:	3b01      	subs	r3, #1
 800dd40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd42:	18d3      	adds	r3, r2, r3
 800dd44:	781b      	ldrb	r3, [r3, #0]
 800dd46:	061b      	lsls	r3, r3, #24
 800dd48:	693a      	ldr	r2, [r7, #16]
 800dd4a:	4313      	orrs	r3, r2
 800dd4c:	613b      	str	r3, [r7, #16]
  /*  - Header buffer to be used for MIC computation
   *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
   *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)] */

  /* Verify mic */
  if (*versionMinor == 0)
 800dd4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd50:	781b      	ldrb	r3, [r3, #0]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d10d      	bne.n	800dd72 <SecureElementProcessJoinAccept+0x100>
  {
    /* For LoRaWAN 1.0.x
     *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
     *   CFListType) */
    if (SecureElementVerifyAesCmac(decJoinAccept, (encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE), mic, NWK_KEY) !=
 800dd56:	187b      	adds	r3, r7, r1
 800dd58:	781b      	ldrb	r3, [r3, #0]
 800dd5a:	b29b      	uxth	r3, r3
 800dd5c:	3b04      	subs	r3, #4
 800dd5e:	b299      	uxth	r1, r3
 800dd60:	693a      	ldr	r2, [r7, #16]
 800dd62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dd64:	2301      	movs	r3, #1
 800dd66:	f7ff fe7c 	bl	800da62 <SecureElementVerifyAesCmac>
 800dd6a:	1e03      	subs	r3, r0, #0
 800dd6c:	d003      	beq.n	800dd76 <SecureElementProcessJoinAccept+0x104>
        SECURE_ELEMENT_SUCCESS)
    {
      return SECURE_ELEMENT_FAIL_CMAC;
 800dd6e:	2301      	movs	r3, #1
 800dd70:	e002      	b.n	800dd78 <SecureElementProcessJoinAccept+0x106>
    }
  }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
  else
  {
    return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800dd72:	2304      	movs	r3, #4
 800dd74:	e000      	b.n	800dd78 <SecureElementProcessJoinAccept+0x106>
  }

  return SECURE_ELEMENT_SUCCESS;
 800dd76:	2300      	movs	r3, #0
}
 800dd78:	0018      	movs	r0, r3
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	b006      	add	sp, #24
 800dd7e:	bdb0      	pop	{r4, r5, r7, pc}

0800dd80 <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber(uint32_t *randomNum)
{
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b082      	sub	sp, #8
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
  if (randomNum == NULL)
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d101      	bne.n	800dd92 <SecureElementRandomNumber+0x12>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800dd8e:	2302      	movs	r3, #2
 800dd90:	e006      	b.n	800dda0 <SecureElementRandomNumber+0x20>
  }
  *randomNum = Radio.Random( );
 800dd92:	4b05      	ldr	r3, [pc, #20]	; (800dda8 <SecureElementRandomNumber+0x28>)
 800dd94:	695b      	ldr	r3, [r3, #20]
 800dd96:	4798      	blx	r3
 800dd98:	0002      	movs	r2, r0
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	601a      	str	r2, [r3, #0]
  return SECURE_ELEMENT_SUCCESS;
 800dd9e:	2300      	movs	r3, #0
}
 800dda0:	0018      	movs	r0, r3
 800dda2:	46bd      	mov	sp, r7
 800dda4:	b002      	add	sp, #8
 800dda6:	bd80      	pop	{r7, pc}
 800dda8:	0801fe28 	.word	0x0801fe28

0800ddac <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui(uint8_t *devEui)
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b082      	sub	sp, #8
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
  if (devEui == NULL)
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d101      	bne.n	800ddbe <SecureElementSetDevEui+0x12>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800ddba:	2302      	movs	r3, #2
 800ddbc:	e009      	b.n	800ddd2 <SecureElementSetDevEui+0x26>
  }
  memcpy1(SeNvmCtx.DevEui, devEui, SE_EUI_SIZE);
 800ddbe:	6879      	ldr	r1, [r7, #4]
 800ddc0:	4b06      	ldr	r3, [pc, #24]	; (800dddc <SecureElementSetDevEui+0x30>)
 800ddc2:	2208      	movs	r2, #8
 800ddc4:	0018      	movs	r0, r3
 800ddc6:	f00b fbe3 	bl	8019590 <memcpy1>
  SeNvmCtxChanged();
 800ddca:	4b05      	ldr	r3, [pc, #20]	; (800dde0 <SecureElementSetDevEui+0x34>)
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	4798      	blx	r3
  return SECURE_ELEMENT_SUCCESS;
 800ddd0:	2300      	movs	r3, #0
}
 800ddd2:	0018      	movs	r0, r3
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	b002      	add	sp, #8
 800ddd8:	bd80      	pop	{r7, pc}
 800ddda:	46c0      	nop			; (mov r8, r8)
 800dddc:	2000007c 	.word	0x2000007c
 800dde0:	2000041c 	.word	0x2000041c

0800dde4 <SecureElementGetDevEui>:

uint8_t *SecureElementGetDevEui(void)
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	af00      	add	r7, sp, #0
  return SeNvmCtx.DevEui;
 800dde8:	4b01      	ldr	r3, [pc, #4]	; (800ddf0 <SecureElementGetDevEui+0xc>)
}
 800ddea:	0018      	movs	r0, r3
 800ddec:	46bd      	mov	sp, r7
 800ddee:	bd80      	pop	{r7, pc}
 800ddf0:	2000007c 	.word	0x2000007c

0800ddf4 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui(uint8_t *joinEui)
{
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b082      	sub	sp, #8
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
  if (joinEui == NULL)
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d101      	bne.n	800de06 <SecureElementSetJoinEui+0x12>
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800de02:	2302      	movs	r3, #2
 800de04:	e009      	b.n	800de1a <SecureElementSetJoinEui+0x26>
  }
  memcpy1(SeNvmCtx.JoinEui, joinEui, SE_EUI_SIZE);
 800de06:	6879      	ldr	r1, [r7, #4]
 800de08:	4b06      	ldr	r3, [pc, #24]	; (800de24 <SecureElementSetJoinEui+0x30>)
 800de0a:	2208      	movs	r2, #8
 800de0c:	0018      	movs	r0, r3
 800de0e:	f00b fbbf 	bl	8019590 <memcpy1>
  SeNvmCtxChanged();
 800de12:	4b05      	ldr	r3, [pc, #20]	; (800de28 <SecureElementSetJoinEui+0x34>)
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	4798      	blx	r3
  return SECURE_ELEMENT_SUCCESS;
 800de18:	2300      	movs	r3, #0
}
 800de1a:	0018      	movs	r0, r3
 800de1c:	46bd      	mov	sp, r7
 800de1e:	b002      	add	sp, #8
 800de20:	bd80      	pop	{r7, pc}
 800de22:	46c0      	nop			; (mov r8, r8)
 800de24:	20000084 	.word	0x20000084
 800de28:	2000041c 	.word	0x2000041c

0800de2c <SecureElementGetJoinEui>:

uint8_t *SecureElementGetJoinEui(void)
{
 800de2c:	b580      	push	{r7, lr}
 800de2e:	af00      	add	r7, sp, #0
  return SeNvmCtx.JoinEui;
 800de30:	4b01      	ldr	r3, [pc, #4]	; (800de38 <SecureElementGetJoinEui+0xc>)
}
 800de32:	0018      	movs	r0, r3
 800de34:	46bd      	mov	sp, r7
 800de36:	bd80      	pop	{r7, pc}
 800de38:	20000084 	.word	0x20000084

0800de3c <LmHandlerInit>:

static bool CtxRestoreDone = false;

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit(LmHandlerCallbacks_t *handlerCallbacks)
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b082      	sub	sp, #8
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
  UTIL_MEM_cpy_8((void *)&LmHandlerCallbacks, (const void *)handlerCallbacks, sizeof(LmHandlerCallbacks_t));
 800de44:	6879      	ldr	r1, [r7, #4]
 800de46:	4b17      	ldr	r3, [pc, #92]	; (800dea4 <LmHandlerInit+0x68>)
 800de48:	2220      	movs	r2, #32
 800de4a:	0018      	movs	r0, r3
 800de4c:	f00e fb94 	bl	801c578 <UTIL_MEM_cpy_8>

  LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800de50:	4b15      	ldr	r3, [pc, #84]	; (800dea8 <LmHandlerInit+0x6c>)
 800de52:	4a16      	ldr	r2, [pc, #88]	; (800deac <LmHandlerInit+0x70>)
 800de54:	601a      	str	r2, [r3, #0]
  LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800de56:	4b14      	ldr	r3, [pc, #80]	; (800dea8 <LmHandlerInit+0x6c>)
 800de58:	4a15      	ldr	r2, [pc, #84]	; (800deb0 <LmHandlerInit+0x74>)
 800de5a:	605a      	str	r2, [r3, #4]
  LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800de5c:	4b12      	ldr	r3, [pc, #72]	; (800dea8 <LmHandlerInit+0x6c>)
 800de5e:	4a15      	ldr	r2, [pc, #84]	; (800deb4 <LmHandlerInit+0x78>)
 800de60:	609a      	str	r2, [r3, #8]
  LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800de62:	4b11      	ldr	r3, [pc, #68]	; (800dea8 <LmHandlerInit+0x6c>)
 800de64:	4a14      	ldr	r2, [pc, #80]	; (800deb8 <LmHandlerInit+0x7c>)
 800de66:	60da      	str	r2, [r3, #12]
  LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks.GetBatteryLevel;
 800de68:	4b0e      	ldr	r3, [pc, #56]	; (800dea4 <LmHandlerInit+0x68>)
 800de6a:	681a      	ldr	r2, [r3, #0]
 800de6c:	4b13      	ldr	r3, [pc, #76]	; (800debc <LmHandlerInit+0x80>)
 800de6e:	601a      	str	r2, [r3, #0]
  LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks.GetTemperature;
 800de70:	4b0c      	ldr	r3, [pc, #48]	; (800dea4 <LmHandlerInit+0x68>)
 800de72:	685a      	ldr	r2, [r3, #4]
 800de74:	4b11      	ldr	r3, [pc, #68]	; (800debc <LmHandlerInit+0x80>)
 800de76:	605a      	str	r2, [r3, #4]
  LoRaMacCallbacks.NvmContextChange = NvmCtxMgmtEvent;
 800de78:	4b10      	ldr	r3, [pc, #64]	; (800debc <LmHandlerInit+0x80>)
 800de7a:	4a11      	ldr	r2, [pc, #68]	; (800dec0 <LmHandlerInit+0x84>)
 800de7c:	609a      	str	r2, [r3, #8]
  LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks.OnMacProcess;
 800de7e:	4b09      	ldr	r3, [pc, #36]	; (800dea4 <LmHandlerInit+0x68>)
 800de80:	689a      	ldr	r2, [r3, #8]
 800de82:	4b0e      	ldr	r3, [pc, #56]	; (800debc <LmHandlerInit+0x80>)
 800de84:	60da      	str	r2, [r3, #12]
  //SX1276SetSleep( ); // new
  /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
  if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800de86:	4b0f      	ldr	r3, [pc, #60]	; (800dec4 <LmHandlerInit+0x88>)
 800de88:	0019      	movs	r1, r3
 800de8a:	2000      	movs	r0, #0
 800de8c:	f000 fb56 	bl	800e53c <LmHandlerPackageRegister>
 800de90:	1e03      	subs	r3, r0, #0
 800de92:	d002      	beq.n	800de9a <LmHandlerInit+0x5e>
  {
    return LORAMAC_HANDLER_ERROR;
 800de94:	2301      	movs	r3, #1
 800de96:	425b      	negs	r3, r3
 800de98:	e000      	b.n	800de9c <LmHandlerInit+0x60>
  if (LmhpDataDistributionInit() != LORAMAC_HANDLER_SUCCESS)
  {
    return LORAMAC_HANDLER_ERROR;
  }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
  return LORAMAC_HANDLER_SUCCESS;
 800de9a:	2300      	movs	r3, #0
}
 800de9c:	0018      	movs	r0, r3
 800de9e:	46bd      	mov	sp, r7
 800dea0:	b002      	add	sp, #8
 800dea2:	bd80      	pop	{r7, pc}
 800dea4:	2000043c 	.word	0x2000043c
 800dea8:	2000045c 	.word	0x2000045c
 800deac:	0800e6a9 	.word	0x0800e6a9
 800deb0:	0800e715 	.word	0x0800e715
 800deb4:	0800e801 	.word	0x0800e801
 800deb8:	0800e8a9 	.word	0x0800e8a9
 800debc:	2000046c 	.word	0x2000046c
 800dec0:	0800f047 	.word	0x0800f047
 800dec4:	20000150 	.word	0x20000150

0800dec8 <LmHandlerConfigure>:

LmHandlerErrorStatus_t LmHandlerConfigure(LmHandlerParams_t *handlerParams)
{
 800dec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800deca:	46ce      	mov	lr, r9
 800decc:	4647      	mov	r7, r8
 800dece:	b580      	push	{r7, lr}
 800ded0:	b099      	sub	sp, #100	; 0x64
 800ded2:	af08      	add	r7, sp, #32
 800ded4:	6078      	str	r0, [r7, #4]
  MibRequestConfirm_t mibReq;
  LoraInfo_t *loraInfo;

  UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800ded6:	6879      	ldr	r1, [r7, #4]
 800ded8:	4b6b      	ldr	r3, [pc, #428]	; (800e088 <LmHandlerConfigure+0x1c0>)
 800deda:	2206      	movs	r2, #6
 800dedc:	0018      	movs	r0, r3
 800dede:	f00e fb4b 	bl	801c578 <UTIL_MEM_cpy_8>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
  IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

  loraInfo = LoraInfo_GetPtr();
 800dee2:	f7f5 f9db 	bl	800329c <LoraInfo_GetPtr>
 800dee6:	0003      	movs	r3, r0
 800dee8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (0U != ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800deea:	4b67      	ldr	r3, [pc, #412]	; (800e088 <LmHandlerConfigure+0x1c0>)
 800deec:	781b      	ldrb	r3, [r3, #0]
 800deee:	001a      	movs	r2, r3
 800def0:	2301      	movs	r3, #1
 800def2:	4093      	lsls	r3, r2
 800def4:	001a      	movs	r2, r3
 800def6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800def8:	685b      	ldr	r3, [r3, #4]
 800defa:	4013      	ands	r3, r2
 800defc:	d00b      	beq.n	800df16 <LmHandlerConfigure+0x4e>
  {
    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800defe:	4b62      	ldr	r3, [pc, #392]	; (800e088 <LmHandlerConfigure+0x1c0>)
 800df00:	781a      	ldrb	r2, [r3, #0]
 800df02:	4962      	ldr	r1, [pc, #392]	; (800e08c <LmHandlerConfigure+0x1c4>)
 800df04:	4b62      	ldr	r3, [pc, #392]	; (800e090 <LmHandlerConfigure+0x1c8>)
 800df06:	0018      	movs	r0, r3
 800df08:	f004 ffc2 	bl	8012e90 <LoRaMacInitialization>
 800df0c:	1e03      	subs	r3, r0, #0
 800df0e:	d009      	beq.n	800df24 <LmHandlerConfigure+0x5c>
    {
      return LORAMAC_HANDLER_ERROR;
 800df10:	2301      	movs	r3, #1
 800df12:	425b      	negs	r3, r3
 800df14:	e0b1      	b.n	800e07a <LmHandlerConfigure+0x1b2>
    }
  }
  else
  {
    MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800df16:	4b5f      	ldr	r3, [pc, #380]	; (800e094 <LmHandlerConfigure+0x1cc>)
 800df18:	2201      	movs	r2, #1
 800df1a:	2100      	movs	r1, #0
 800df1c:	2000      	movs	r0, #0
 800df1e:	f00d ffab 	bl	801be78 <UTIL_ADV_TRACE_COND_FSend>
    while (1) {}  /* error: Region is not defined in the MW */
 800df22:	e7fe      	b.n	800df22 <LmHandlerConfigure+0x5a>
  }

  /* Try to restore from NVM and query the mac if possible. */
  if (NvmCtxMgmtRestore() == NVMCTXMGMT_STATUS_SUCCESS)
 800df24:	f001 f89f 	bl	800f066 <NvmCtxMgmtRestore>
 800df28:	1e03      	subs	r3, r0, #0
 800df2a:	d103      	bne.n	800df34 <LmHandlerConfigure+0x6c>
  {
    CtxRestoreDone = true;
 800df2c:	4b5a      	ldr	r3, [pc, #360]	; (800e098 <LmHandlerConfigure+0x1d0>)
 800df2e:	2201      	movs	r2, #1
 800df30:	701a      	strb	r2, [r3, #0]
 800df32:	e021      	b.n	800df78 <LmHandlerConfigure+0xb0>
  }
  else
  {
    CtxRestoreDone = false;
 800df34:	4b58      	ldr	r3, [pc, #352]	; (800e098 <LmHandlerConfigure+0x1d0>)
 800df36:	2200      	movs	r2, #0
 800df38:	701a      	strb	r2, [r3, #0]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    SecureElementSetObjHandler(SLOT_RAND_ZERO_KEY, KMS_ZERO_KEY_OBJECT_HANDLE);
#endif /* LORAMAC_CLASSB_ENABLED */
#endif /* LORAWAN_KMS == 1 */
    /* Read secure-element DEV_EUI and JOIN_EUI values. */
    mibReq.Type = MIB_DEV_EUI;
 800df3a:	2418      	movs	r4, #24
 800df3c:	193b      	adds	r3, r7, r4
 800df3e:	2202      	movs	r2, #2
 800df40:	701a      	strb	r2, [r3, #0]
    LoRaMacMibGetRequestConfirm(&mibReq);
 800df42:	193b      	adds	r3, r7, r4
 800df44:	0018      	movs	r0, r3
 800df46:	f005 fc05 	bl	8013754 <LoRaMacMibGetRequestConfirm>
    memcpy1(CommissioningParams.DevEui, mibReq.Param.DevEui, 8);
 800df4a:	193b      	adds	r3, r7, r4
 800df4c:	6859      	ldr	r1, [r3, #4]
 800df4e:	4b53      	ldr	r3, [pc, #332]	; (800e09c <LmHandlerConfigure+0x1d4>)
 800df50:	2208      	movs	r2, #8
 800df52:	0018      	movs	r0, r3
 800df54:	f00b fb1c 	bl	8019590 <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800df58:	0021      	movs	r1, r4
 800df5a:	187b      	adds	r3, r7, r1
 800df5c:	2203      	movs	r2, #3
 800df5e:	701a      	strb	r2, [r3, #0]
    LoRaMacMibGetRequestConfirm(&mibReq);
 800df60:	000c      	movs	r4, r1
 800df62:	187b      	adds	r3, r7, r1
 800df64:	0018      	movs	r0, r3
 800df66:	f005 fbf5 	bl	8013754 <LoRaMacMibGetRequestConfirm>
    memcpy1(CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8);
 800df6a:	193b      	adds	r3, r7, r4
 800df6c:	6859      	ldr	r1, [r3, #4]
 800df6e:	4b4c      	ldr	r3, [pc, #304]	; (800e0a0 <LmHandlerConfigure+0x1d8>)
 800df70:	2208      	movs	r2, #8
 800df72:	0018      	movs	r0, r3
 800df74:	f00b fb0c 	bl	8019590 <memcpy1>
  }
  MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:  %02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X\r\n",
 800df78:	4b48      	ldr	r3, [pc, #288]	; (800e09c <LmHandlerConfigure+0x1d4>)
 800df7a:	781b      	ldrb	r3, [r3, #0]
 800df7c:	001a      	movs	r2, r3
 800df7e:	4b47      	ldr	r3, [pc, #284]	; (800e09c <LmHandlerConfigure+0x1d4>)
 800df80:	785b      	ldrb	r3, [r3, #1]
 800df82:	0019      	movs	r1, r3
 800df84:	4b45      	ldr	r3, [pc, #276]	; (800e09c <LmHandlerConfigure+0x1d4>)
 800df86:	789b      	ldrb	r3, [r3, #2]
 800df88:	0018      	movs	r0, r3
 800df8a:	4b44      	ldr	r3, [pc, #272]	; (800e09c <LmHandlerConfigure+0x1d4>)
 800df8c:	78db      	ldrb	r3, [r3, #3]
 800df8e:	001c      	movs	r4, r3
 800df90:	4b42      	ldr	r3, [pc, #264]	; (800e09c <LmHandlerConfigure+0x1d4>)
 800df92:	791b      	ldrb	r3, [r3, #4]
 800df94:	001d      	movs	r5, r3
 800df96:	4b41      	ldr	r3, [pc, #260]	; (800e09c <LmHandlerConfigure+0x1d4>)
 800df98:	795b      	ldrb	r3, [r3, #5]
 800df9a:	001e      	movs	r6, r3
 800df9c:	4b3f      	ldr	r3, [pc, #252]	; (800e09c <LmHandlerConfigure+0x1d4>)
 800df9e:	799b      	ldrb	r3, [r3, #6]
 800dfa0:	469c      	mov	ip, r3
 800dfa2:	4b3e      	ldr	r3, [pc, #248]	; (800e09c <LmHandlerConfigure+0x1d4>)
 800dfa4:	79db      	ldrb	r3, [r3, #7]
 800dfa6:	4698      	mov	r8, r3
 800dfa8:	4b3e      	ldr	r3, [pc, #248]	; (800e0a4 <LmHandlerConfigure+0x1dc>)
 800dfaa:	4699      	mov	r9, r3
 800dfac:	4643      	mov	r3, r8
 800dfae:	9307      	str	r3, [sp, #28]
 800dfb0:	4663      	mov	r3, ip
 800dfb2:	9306      	str	r3, [sp, #24]
 800dfb4:	9605      	str	r6, [sp, #20]
 800dfb6:	9504      	str	r5, [sp, #16]
 800dfb8:	9403      	str	r4, [sp, #12]
 800dfba:	9002      	str	r0, [sp, #8]
 800dfbc:	9101      	str	r1, [sp, #4]
 800dfbe:	9200      	str	r2, [sp, #0]
 800dfc0:	464b      	mov	r3, r9
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	2100      	movs	r1, #0
 800dfc6:	2002      	movs	r0, #2
 800dfc8:	f00d ff56 	bl	801be78 <UTIL_ADV_TRACE_COND_FSend>
         HEX8(CommissioningParams.DevEui));

  MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr:   %08X\r\n", CommissioningParams.DevAddr);
 800dfcc:	4b33      	ldr	r3, [pc, #204]	; (800e09c <LmHandlerConfigure+0x1d4>)
 800dfce:	695b      	ldr	r3, [r3, #20]
 800dfd0:	4a35      	ldr	r2, [pc, #212]	; (800e0a8 <LmHandlerConfigure+0x1e0>)
 800dfd2:	9300      	str	r3, [sp, #0]
 800dfd4:	0013      	movs	r3, r2
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	2100      	movs	r1, #0
 800dfda:	2002      	movs	r0, #2
 800dfdc:	f00d ff4c 	bl	801be78 <UTIL_ADV_TRACE_COND_FSend>
  //DevVVEUI = ACTIVATION_TYPE_OTAA;
#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
  MW_LOG(TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

  mibReq.Type = MIB_PUBLIC_NETWORK;
 800dfe0:	2118      	movs	r1, #24
 800dfe2:	187b      	adds	r3, r7, r1
 800dfe4:	220f      	movs	r2, #15
 800dfe6:	701a      	strb	r2, [r3, #0]
  mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800dfe8:	187b      	adds	r3, r7, r1
 800dfea:	2201      	movs	r2, #1
 800dfec:	711a      	strb	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 800dfee:	000c      	movs	r4, r1
 800dff0:	187b      	adds	r3, r7, r1
 800dff2:	0018      	movs	r0, r3
 800dff4:	f005 fd0c 	bl	8013a10 <LoRaMacMibSetRequestConfirm>

  mibReq.Type = MIB_REPEATER_SUPPORT;
 800dff8:	0021      	movs	r1, r4
 800dffa:	187b      	adds	r3, r7, r1
 800dffc:	2210      	movs	r2, #16
 800dffe:	701a      	strb	r2, [r3, #0]
  mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800e000:	187b      	adds	r3, r7, r1
 800e002:	2200      	movs	r2, #0
 800e004:	711a      	strb	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 800e006:	000c      	movs	r4, r1
 800e008:	187b      	adds	r3, r7, r1
 800e00a:	0018      	movs	r0, r3
 800e00c:	f005 fd00 	bl	8013a10 <LoRaMacMibSetRequestConfirm>

  mibReq.Type = MIB_ADR;
 800e010:	0021      	movs	r1, r4
 800e012:	187b      	adds	r3, r7, r1
 800e014:	2204      	movs	r2, #4
 800e016:	701a      	strb	r2, [r3, #0]
  mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800e018:	4b1b      	ldr	r3, [pc, #108]	; (800e088 <LmHandlerConfigure+0x1c0>)
 800e01a:	789a      	ldrb	r2, [r3, #2]
 800e01c:	187b      	adds	r3, r7, r1
 800e01e:	711a      	strb	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 800e020:	000c      	movs	r4, r1
 800e022:	187b      	adds	r3, r7, r1
 800e024:	0018      	movs	r0, r3
 800e026:	f005 fcf3 	bl	8013a10 <LoRaMacMibSetRequestConfirm>

  mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800e02a:	0021      	movs	r1, r4
 800e02c:	187b      	adds	r3, r7, r1
 800e02e:	2222      	movs	r2, #34	; 0x22
 800e030:	701a      	strb	r2, [r3, #0]
  mibReq.Param.SystemMaxRxError = 20;
 800e032:	187b      	adds	r3, r7, r1
 800e034:	2214      	movs	r2, #20
 800e036:	605a      	str	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 800e038:	187b      	adds	r3, r7, r1
 800e03a:	0018      	movs	r0, r3
 800e03c:	f005 fce8 	bl	8013a10 <LoRaMacMibSetRequestConfirm>

  GetPhyParams_t getPhy;
  PhyParam_t phyParam;
  getPhy.Attribute = PHY_DUTY_CYCLE;
 800e040:	2110      	movs	r1, #16
 800e042:	187b      	adds	r3, r7, r1
 800e044:	220f      	movs	r2, #15
 800e046:	701a      	strb	r2, [r3, #0]
  phyParam = RegionGetPhyParam(LmHandlerParams.ActiveRegion, &getPhy);
 800e048:	4b0f      	ldr	r3, [pc, #60]	; (800e088 <LmHandlerConfigure+0x1c0>)
 800e04a:	781b      	ldrb	r3, [r3, #0]
 800e04c:	187a      	adds	r2, r7, r1
 800e04e:	0011      	movs	r1, r2
 800e050:	0018      	movs	r0, r3
 800e052:	f008 fe1e 	bl	8016c92 <RegionGetPhyParam>
 800e056:	0003      	movs	r3, r0
 800e058:	001a      	movs	r2, r3
 800e05a:	210c      	movs	r1, #12
 800e05c:	187b      	adds	r3, r7, r1
 800e05e:	601a      	str	r2, [r3, #0]
  LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800e060:	187b      	adds	r3, r7, r1
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	1e5a      	subs	r2, r3, #1
 800e066:	4193      	sbcs	r3, r2
 800e068:	b2da      	uxtb	r2, r3
 800e06a:	4b07      	ldr	r3, [pc, #28]	; (800e088 <LmHandlerConfigure+0x1c0>)
 800e06c:	711a      	strb	r2, [r3, #4]

  /* override previous value if reconfigure new region */
  LoRaMacTestSetDutyCycleOn(LmHandlerParams.DutyCycleEnabled);
 800e06e:	4b06      	ldr	r3, [pc, #24]	; (800e088 <LmHandlerConfigure+0x1c0>)
 800e070:	791b      	ldrb	r3, [r3, #4]
 800e072:	0018      	movs	r0, r3
 800e074:	f006 faf8 	bl	8014668 <LoRaMacTestSetDutyCycleOn>

  return LORAMAC_HANDLER_SUCCESS;
 800e078:	2300      	movs	r3, #0
}
 800e07a:	0018      	movs	r0, r3
 800e07c:	46bd      	mov	sp, r7
 800e07e:	b011      	add	sp, #68	; 0x44
 800e080:	bcc0      	pop	{r6, r7}
 800e082:	46b9      	mov	r9, r7
 800e084:	46b0      	mov	r8, r6
 800e086:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e088:	20000434 	.word	0x20000434
 800e08c:	2000046c 	.word	0x2000046c
 800e090:	2000045c 	.word	0x2000045c
 800e094:	0801f834 	.word	0x0801f834
 800e098:	20000586 	.word	0x20000586
 800e09c:	20000138 	.word	0x20000138
 800e0a0:	20000140 	.word	0x20000140
 800e0a4:	0801f880 	.word	0x0801f880
 800e0a8:	0801f8bc 	.word	0x0801f8bc

0800e0ac <LmHandlerProcess>:
  }
  return false;
}

void LmHandlerProcess(void)
{
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b082      	sub	sp, #8
 800e0b0:	af00      	add	r7, sp, #0
  /* Call at first the LoRaMAC process before to run all package process features */
  /* Processes the LoRaMac events */
  LoRaMacProcess();
 800e0b2:	f004 fea7 	bl	8012e04 <LoRaMacProcess>

  /* Call all packages process functions */
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 800e0b6:	1dfb      	adds	r3, r7, #7
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	701a      	strb	r2, [r3, #0]
 800e0bc:	e027      	b.n	800e10e <LmHandlerProcess+0x62>
  {
    if ((LmHandlerPackages[i] != NULL) &&
 800e0be:	1dfb      	adds	r3, r7, #7
 800e0c0:	2200      	movs	r2, #0
 800e0c2:	569a      	ldrsb	r2, [r3, r2]
 800e0c4:	4b17      	ldr	r3, [pc, #92]	; (800e124 <LmHandlerProcess+0x78>)
 800e0c6:	0092      	lsls	r2, r2, #2
 800e0c8:	58d3      	ldr	r3, [r2, r3]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d017      	beq.n	800e0fe <LmHandlerProcess+0x52>
        (LmHandlerPackages[i]->Process != NULL) &&
 800e0ce:	1dfb      	adds	r3, r7, #7
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	569a      	ldrsb	r2, [r3, r2]
 800e0d4:	4b13      	ldr	r3, [pc, #76]	; (800e124 <LmHandlerProcess+0x78>)
 800e0d6:	0092      	lsls	r2, r2, #2
 800e0d8:	58d3      	ldr	r3, [r2, r3]
 800e0da:	691b      	ldr	r3, [r3, #16]
    if ((LmHandlerPackages[i] != NULL) &&
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d00e      	beq.n	800e0fe <LmHandlerProcess+0x52>
        (LmHandlerPackageIsInitialized(i) != false))
 800e0e0:	1dfb      	adds	r3, r7, #7
 800e0e2:	781b      	ldrb	r3, [r3, #0]
 800e0e4:	0018      	movs	r0, r3
 800e0e6:	f000 fbf1 	bl	800e8cc <LmHandlerPackageIsInitialized>
 800e0ea:	1e03      	subs	r3, r0, #0
        (LmHandlerPackages[i]->Process != NULL) &&
 800e0ec:	d007      	beq.n	800e0fe <LmHandlerProcess+0x52>
    {
      LmHandlerPackages[i]->Process();
 800e0ee:	1dfb      	adds	r3, r7, #7
 800e0f0:	2200      	movs	r2, #0
 800e0f2:	569a      	ldrsb	r2, [r3, r2]
 800e0f4:	4b0b      	ldr	r3, [pc, #44]	; (800e124 <LmHandlerProcess+0x78>)
 800e0f6:	0092      	lsls	r2, r2, #2
 800e0f8:	58d3      	ldr	r3, [r2, r3]
 800e0fa:	691b      	ldr	r3, [r3, #16]
 800e0fc:	4798      	blx	r3
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 800e0fe:	1dfb      	adds	r3, r7, #7
 800e100:	781b      	ldrb	r3, [r3, #0]
 800e102:	b25b      	sxtb	r3, r3
 800e104:	b2db      	uxtb	r3, r3
 800e106:	3301      	adds	r3, #1
 800e108:	b2da      	uxtb	r2, r3
 800e10a:	1dfb      	adds	r3, r7, #7
 800e10c:	701a      	strb	r2, [r3, #0]
 800e10e:	1dfb      	adds	r3, r7, #7
 800e110:	781b      	ldrb	r3, [r3, #0]
 800e112:	b25b      	sxtb	r3, r3
 800e114:	2b04      	cmp	r3, #4
 800e116:	ddd2      	ble.n	800e0be <LmHandlerProcess+0x12>
    }
  }

  NvmCtxMgmtStore();
 800e118:	f000 ff9f 	bl	800f05a <NvmCtxMgmtStore>
}
 800e11c:	46c0      	nop			; (mov r8, r8)
 800e11e:	46bd      	mov	sp, r7
 800e120:	b002      	add	sp, #8
 800e122:	bd80      	pop	{r7, pc}
 800e124:	20000420 	.word	0x20000420

0800e128 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus(void)
{
 800e128:	b5b0      	push	{r4, r5, r7, lr}
 800e12a:	b08a      	sub	sp, #40	; 0x28
 800e12c:	af00      	add	r7, sp, #0
  MibRequestConfirm_t mibReq;
  LoRaMacStatus_t status;

  mibReq.Type = MIB_NETWORK_ACTIVATION;
 800e12e:	003b      	movs	r3, r7
 800e130:	2201      	movs	r2, #1
 800e132:	701a      	strb	r2, [r3, #0]
  status = LoRaMacMibGetRequestConfirm(&mibReq);
 800e134:	2527      	movs	r5, #39	; 0x27
 800e136:	197c      	adds	r4, r7, r5
 800e138:	003b      	movs	r3, r7
 800e13a:	0018      	movs	r0, r3
 800e13c:	f005 fb0a 	bl	8013754 <LoRaMacMibGetRequestConfirm>
 800e140:	0003      	movs	r3, r0
 800e142:	7023      	strb	r3, [r4, #0]

  if (status == LORAMAC_STATUS_OK)
 800e144:	197b      	adds	r3, r7, r5
 800e146:	781b      	ldrb	r3, [r3, #0]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d107      	bne.n	800e15c <LmHandlerJoinStatus+0x34>
  {
    if (mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE)
 800e14c:	003b      	movs	r3, r7
 800e14e:	791b      	ldrb	r3, [r3, #4]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d101      	bne.n	800e158 <LmHandlerJoinStatus+0x30>
    {
      return LORAMAC_HANDLER_RESET;
 800e154:	2300      	movs	r3, #0
 800e156:	e002      	b.n	800e15e <LmHandlerJoinStatus+0x36>
    }
    else
    {
      return LORAMAC_HANDLER_SET;
 800e158:	2301      	movs	r3, #1
 800e15a:	e000      	b.n	800e15e <LmHandlerJoinStatus+0x36>
    }
  }
  else
  {
    return LORAMAC_HANDLER_RESET;
 800e15c:	2300      	movs	r3, #0
  }
}
 800e15e:	0018      	movs	r0, r3
 800e160:	46bd      	mov	sp, r7
 800e162:	b00a      	add	sp, #40	; 0x28
 800e164:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800e168 <LmHandlerJoin>:

void LmHandlerJoin(ActivationType_t mode)
{
 800e168:	b590      	push	{r4, r7, lr}
 800e16a:	b093      	sub	sp, #76	; 0x4c
 800e16c:	af02      	add	r7, sp, #8
 800e16e:	0002      	movs	r2, r0
 800e170:	1dfb      	adds	r3, r7, #7
 800e172:	701a      	strb	r2, [r3, #0]
  }
#endif /* ACTIVATION_BY_PERSONALISATION */
  SecureElementDeleteDerivedKeys(NULL);
#endif /* LORAWAN_KMS */

  if (mode == ACTIVATION_TYPE_OTAA)
 800e174:	1dfb      	adds	r3, r7, #7
 800e176:	781b      	ldrb	r3, [r3, #0]
 800e178:	2b02      	cmp	r3, #2
 800e17a:	d113      	bne.n	800e1a4 <LmHandlerJoin+0x3c>
  {
    MlmeReq_t mlmeReq;
    JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800e17c:	4b37      	ldr	r3, [pc, #220]	; (800e25c <LmHandlerJoin+0xf4>)
 800e17e:	2202      	movs	r2, #2
 800e180:	709a      	strb	r2, [r3, #2]

    LoRaMacStart();
 800e182:	f005 fa2d 	bl	80135e0 <LoRaMacStart>

    /* Starts the OTAA join procedure */
    mlmeReq.Type = MLME_JOIN;
 800e186:	2108      	movs	r1, #8
 800e188:	187b      	adds	r3, r7, r1
 800e18a:	2201      	movs	r2, #1
 800e18c:	701a      	strb	r2, [r3, #0]
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800e18e:	4b34      	ldr	r3, [pc, #208]	; (800e260 <LmHandlerJoin+0xf8>)
 800e190:	78db      	ldrb	r3, [r3, #3]
 800e192:	b25b      	sxtb	r3, r3
 800e194:	b2da      	uxtb	r2, r3
 800e196:	187b      	adds	r3, r7, r1
 800e198:	711a      	strb	r2, [r3, #4]
    LoRaMacMlmeRequest(&mlmeReq);
 800e19a:	187b      	adds	r3, r7, r1
 800e19c:	0018      	movs	r0, r3
 800e19e:	f005 ffbd 	bl	801411c <LoRaMacMlmeRequest>
    LoRaMacMibSetRequestConfirm(&mibReq);

    LmHandlerCallbacks.OnJoinRequest(&JoinParams);
    LmHandlerRequestClass(LmHandlerParams.DefaultClass);
  }
}
 800e1a2:	e057      	b.n	800e254 <LmHandlerJoin+0xec>
    JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800e1a4:	4b2d      	ldr	r3, [pc, #180]	; (800e25c <LmHandlerJoin+0xf4>)
 800e1a6:	2201      	movs	r2, #1
 800e1a8:	709a      	strb	r2, [r3, #2]
    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800e1aa:	4b2c      	ldr	r3, [pc, #176]	; (800e25c <LmHandlerJoin+0xf4>)
 800e1ac:	2200      	movs	r2, #0
 800e1ae:	705a      	strb	r2, [r3, #1]
    if (CtxRestoreDone == false)
 800e1b0:	4b2c      	ldr	r3, [pc, #176]	; (800e264 <LmHandlerJoin+0xfc>)
 800e1b2:	781b      	ldrb	r3, [r3, #0]
 800e1b4:	2201      	movs	r2, #1
 800e1b6:	4053      	eors	r3, r2
 800e1b8:	b2db      	uxtb	r3, r3
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d033      	beq.n	800e226 <LmHandlerJoin+0xbe>
      mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800e1be:	211c      	movs	r1, #28
 800e1c0:	187b      	adds	r3, r7, r1
 800e1c2:	2227      	movs	r2, #39	; 0x27
 800e1c4:	701a      	strb	r2, [r3, #0]
      mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800e1c6:	187b      	adds	r3, r7, r1
 800e1c8:	4a27      	ldr	r2, [pc, #156]	; (800e268 <LmHandlerJoin+0x100>)
 800e1ca:	605a      	str	r2, [r3, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 800e1cc:	000c      	movs	r4, r1
 800e1ce:	187b      	adds	r3, r7, r1
 800e1d0:	0018      	movs	r0, r3
 800e1d2:	f005 fc1d 	bl	8013a10 <LoRaMacMibSetRequestConfirm>
      mibReq.Type = MIB_NET_ID;
 800e1d6:	0021      	movs	r1, r4
 800e1d8:	187b      	adds	r3, r7, r1
 800e1da:	2205      	movs	r2, #5
 800e1dc:	701a      	strb	r2, [r3, #0]
      mibReq.Param.NetID = CommissioningParams.NetworkId;
 800e1de:	4b23      	ldr	r3, [pc, #140]	; (800e26c <LmHandlerJoin+0x104>)
 800e1e0:	691a      	ldr	r2, [r3, #16]
 800e1e2:	187b      	adds	r3, r7, r1
 800e1e4:	605a      	str	r2, [r3, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 800e1e6:	000c      	movs	r4, r1
 800e1e8:	187b      	adds	r3, r7, r1
 800e1ea:	0018      	movs	r0, r3
 800e1ec:	f005 fc10 	bl	8013a10 <LoRaMacMibSetRequestConfirm>
      CommissioningParams.DevAddr = GetDevAddr();
 800e1f0:	f7f6 fd04 	bl	8004bfc <GetDevAddr>
 800e1f4:	0002      	movs	r2, r0
 800e1f6:	4b1d      	ldr	r3, [pc, #116]	; (800e26c <LmHandlerJoin+0x104>)
 800e1f8:	615a      	str	r2, [r3, #20]
      mibReq.Type = MIB_DEV_ADDR;
 800e1fa:	0021      	movs	r1, r4
 800e1fc:	187b      	adds	r3, r7, r1
 800e1fe:	2206      	movs	r2, #6
 800e200:	701a      	strb	r2, [r3, #0]
      mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800e202:	4b1a      	ldr	r3, [pc, #104]	; (800e26c <LmHandlerJoin+0x104>)
 800e204:	695a      	ldr	r2, [r3, #20]
 800e206:	187b      	adds	r3, r7, r1
 800e208:	605a      	str	r2, [r3, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 800e20a:	187b      	adds	r3, r7, r1
 800e20c:	0018      	movs	r0, r3
 800e20e:	f005 fbff 	bl	8013a10 <LoRaMacMibSetRequestConfirm>
      MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr:   %08X\r\n", CommissioningParams.DevAddr);
 800e212:	4b16      	ldr	r3, [pc, #88]	; (800e26c <LmHandlerJoin+0x104>)
 800e214:	695b      	ldr	r3, [r3, #20]
 800e216:	4a16      	ldr	r2, [pc, #88]	; (800e270 <LmHandlerJoin+0x108>)
 800e218:	9300      	str	r3, [sp, #0]
 800e21a:	0013      	movs	r3, r2
 800e21c:	2200      	movs	r2, #0
 800e21e:	2100      	movs	r1, #0
 800e220:	2002      	movs	r0, #2
 800e222:	f00d fe29 	bl	801be78 <UTIL_ADV_TRACE_COND_FSend>
    LoRaMacStart();
 800e226:	f005 f9db 	bl	80135e0 <LoRaMacStart>
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800e22a:	211c      	movs	r1, #28
 800e22c:	187b      	adds	r3, r7, r1
 800e22e:	2201      	movs	r2, #1
 800e230:	701a      	strb	r2, [r3, #0]
    mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800e232:	187b      	adds	r3, r7, r1
 800e234:	2201      	movs	r2, #1
 800e236:	711a      	strb	r2, [r3, #4]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800e238:	187b      	adds	r3, r7, r1
 800e23a:	0018      	movs	r0, r3
 800e23c:	f005 fbe8 	bl	8013a10 <LoRaMacMibSetRequestConfirm>
    LmHandlerCallbacks.OnJoinRequest(&JoinParams);
 800e240:	4b0c      	ldr	r3, [pc, #48]	; (800e274 <LmHandlerJoin+0x10c>)
 800e242:	68db      	ldr	r3, [r3, #12]
 800e244:	4a05      	ldr	r2, [pc, #20]	; (800e25c <LmHandlerJoin+0xf4>)
 800e246:	0010      	movs	r0, r2
 800e248:	4798      	blx	r3
    LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800e24a:	4b05      	ldr	r3, [pc, #20]	; (800e260 <LmHandlerJoin+0xf8>)
 800e24c:	785b      	ldrb	r3, [r3, #1]
 800e24e:	0018      	movs	r0, r3
 800e250:	f000 f8e4 	bl	800e41c <LmHandlerRequestClass>
}
 800e254:	46c0      	nop			; (mov r8, r8)
 800e256:	46bd      	mov	sp, r7
 800e258:	b011      	add	sp, #68	; 0x44
 800e25a:	bd90      	pop	{r4, r7, pc}
 800e25c:	2000015c 	.word	0x2000015c
 800e260:	20000434 	.word	0x20000434
 800e264:	20000586 	.word	0x20000586
 800e268:	01000300 	.word	0x01000300
 800e26c:	20000138 	.word	0x20000138
 800e270:	0801f8bc 	.word	0x0801f8bc
 800e274:	2000043c 	.word	0x2000043c

0800e278 <LmHandlerSend>:
  }
}

LmHandlerErrorStatus_t LmHandlerSend(LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                     TimerTime_t *nextTxIn, bool allowDelayedTx)
{
 800e278:	b5b0      	push	{r4, r5, r7, lr}
 800e27a:	b08c      	sub	sp, #48	; 0x30
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	60f8      	str	r0, [r7, #12]
 800e280:	0008      	movs	r0, r1
 800e282:	607a      	str	r2, [r7, #4]
 800e284:	0019      	movs	r1, r3
 800e286:	230b      	movs	r3, #11
 800e288:	18fb      	adds	r3, r7, r3
 800e28a:	1c02      	adds	r2, r0, #0
 800e28c:	701a      	strb	r2, [r3, #0]
 800e28e:	230a      	movs	r3, #10
 800e290:	18fb      	adds	r3, r7, r3
 800e292:	1c0a      	adds	r2, r1, #0
 800e294:	701a      	strb	r2, [r3, #0]
  LoRaMacStatus_t status;
  LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800e296:	232f      	movs	r3, #47	; 0x2f
 800e298:	18fb      	adds	r3, r7, r3
 800e29a:	22ff      	movs	r2, #255	; 0xff
 800e29c:	701a      	strb	r2, [r3, #0]
  McpsReq_t mcpsReq;
  LoRaMacTxInfo_t txInfo;

  if (LoRaMacIsBusy() == true)
 800e29e:	f004 fd99 	bl	8012dd4 <LoRaMacIsBusy>
 800e2a2:	1e03      	subs	r3, r0, #0
 800e2a4:	d002      	beq.n	800e2ac <LmHandlerSend+0x34>
  {
    return LORAMAC_HANDLER_BUSY_ERROR;
 800e2a6:	2302      	movs	r3, #2
 800e2a8:	425b      	negs	r3, r3
 800e2aa:	e0a9      	b.n	800e400 <LmHandlerSend+0x188>
  }

  if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800e2ac:	f7ff ff3c 	bl	800e128 <LmHandlerJoinStatus>
 800e2b0:	0003      	movs	r3, r0
 800e2b2:	2b01      	cmp	r3, #1
 800e2b4:	d007      	beq.n	800e2c6 <LmHandlerSend+0x4e>
  {
    /* The network isn't yet joined, try again later. */
    LmHandlerJoin(JoinParams.Mode);
 800e2b6:	4b54      	ldr	r3, [pc, #336]	; (800e408 <LmHandlerSend+0x190>)
 800e2b8:	789b      	ldrb	r3, [r3, #2]
 800e2ba:	0018      	movs	r0, r3
 800e2bc:	f7ff ff54 	bl	800e168 <LmHandlerJoin>
    return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800e2c0:	2303      	movs	r3, #3
 800e2c2:	425b      	negs	r3, r3
 800e2c4:	e09c      	b.n	800e400 <LmHandlerSend+0x188>
  }

  if ((LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() == true)
 800e2c6:	4b51      	ldr	r3, [pc, #324]	; (800e40c <LmHandlerSend+0x194>)
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	68db      	ldr	r3, [r3, #12]
 800e2cc:	4798      	blx	r3
 800e2ce:	1e03      	subs	r3, r0, #0
 800e2d0:	d00d      	beq.n	800e2ee <LmHandlerSend+0x76>
      && (appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port) && (appData->Port != 0))
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	781a      	ldrb	r2, [r3, #0]
 800e2d6:	4b4d      	ldr	r3, [pc, #308]	; (800e40c <LmHandlerSend+0x194>)
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	781b      	ldrb	r3, [r3, #0]
 800e2dc:	429a      	cmp	r2, r3
 800e2de:	d006      	beq.n	800e2ee <LmHandlerSend+0x76>
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	781b      	ldrb	r3, [r3, #0]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d002      	beq.n	800e2ee <LmHandlerSend+0x76>
  {
    return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800e2e8:	2304      	movs	r3, #4
 800e2ea:	425b      	negs	r3, r3
 800e2ec:	e088      	b.n	800e400 <LmHandlerSend+0x188>
  }

  mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800e2ee:	4b48      	ldr	r3, [pc, #288]	; (800e410 <LmHandlerSend+0x198>)
 800e2f0:	2203      	movs	r2, #3
 800e2f2:	569a      	ldrsb	r2, [r3, r2]
 800e2f4:	2418      	movs	r4, #24
 800e2f6:	193b      	adds	r3, r7, r4
 800e2f8:	739a      	strb	r2, [r3, #14]
  if (LoRaMacQueryTxPossible(appData->BufferSize, &txInfo) != LORAMAC_STATUS_OK)
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	785b      	ldrb	r3, [r3, #1]
 800e2fe:	2214      	movs	r2, #20
 800e300:	18ba      	adds	r2, r7, r2
 800e302:	0011      	movs	r1, r2
 800e304:	0018      	movs	r0, r3
 800e306:	f005 f979 	bl	80135fc <LoRaMacQueryTxPossible>
 800e30a:	1e03      	subs	r3, r0, #0
 800e30c:	d00c      	beq.n	800e328 <LmHandlerSend+0xb0>
  {
    /* Send empty frame in order to flush MAC commands */
    TxParams.MsgType = LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800e30e:	4b41      	ldr	r3, [pc, #260]	; (800e414 <LmHandlerSend+0x19c>)
 800e310:	2200      	movs	r2, #0
 800e312:	709a      	strb	r2, [r3, #2]
    mcpsReq.Type = MCPS_UNCONFIRMED;
 800e314:	193b      	adds	r3, r7, r4
 800e316:	2200      	movs	r2, #0
 800e318:	701a      	strb	r2, [r3, #0]
    mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800e31a:	193b      	adds	r3, r7, r4
 800e31c:	2200      	movs	r2, #0
 800e31e:	609a      	str	r2, [r3, #8]
    mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800e320:	193b      	adds	r3, r7, r4
 800e322:	2200      	movs	r2, #0
 800e324:	819a      	strh	r2, [r3, #12]
 800e326:	e021      	b.n	800e36c <LmHandlerSend+0xf4>
  }
  else
  {
    TxParams.MsgType = isTxConfirmed;
 800e328:	4b3a      	ldr	r3, [pc, #232]	; (800e414 <LmHandlerSend+0x19c>)
 800e32a:	200b      	movs	r0, #11
 800e32c:	183a      	adds	r2, r7, r0
 800e32e:	7812      	ldrb	r2, [r2, #0]
 800e330:	709a      	strb	r2, [r3, #2]
    mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	781a      	ldrb	r2, [r3, #0]
 800e336:	2118      	movs	r1, #24
 800e338:	187b      	adds	r3, r7, r1
 800e33a:	711a      	strb	r2, [r3, #4]
    mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	785b      	ldrb	r3, [r3, #1]
 800e340:	b29a      	uxth	r2, r3
 800e342:	187b      	adds	r3, r7, r1
 800e344:	819a      	strh	r2, [r3, #12]
    mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	685a      	ldr	r2, [r3, #4]
 800e34a:	187b      	adds	r3, r7, r1
 800e34c:	609a      	str	r2, [r3, #8]
    if (isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG)
 800e34e:	183b      	adds	r3, r7, r0
 800e350:	781b      	ldrb	r3, [r3, #0]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d103      	bne.n	800e35e <LmHandlerSend+0xe6>
    {
      mcpsReq.Type = MCPS_UNCONFIRMED;
 800e356:	187b      	adds	r3, r7, r1
 800e358:	2200      	movs	r2, #0
 800e35a:	701a      	strb	r2, [r3, #0]
 800e35c:	e006      	b.n	800e36c <LmHandlerSend+0xf4>
    }
    else
    {
      mcpsReq.Type = MCPS_CONFIRMED;
 800e35e:	2118      	movs	r1, #24
 800e360:	187b      	adds	r3, r7, r1
 800e362:	2201      	movs	r2, #1
 800e364:	701a      	strb	r2, [r3, #0]
      mcpsReq.Req.Confirmed.NbTrials = 8;
 800e366:	187b      	adds	r3, r7, r1
 800e368:	2208      	movs	r2, #8
 800e36a:	73da      	strb	r2, [r3, #15]
    }
  }

  TxParams.AppData = *appData;
 800e36c:	4b29      	ldr	r3, [pc, #164]	; (800e414 <LmHandlerSend+0x19c>)
 800e36e:	68fa      	ldr	r2, [r7, #12]
 800e370:	330c      	adds	r3, #12
 800e372:	ca03      	ldmia	r2!, {r0, r1}
 800e374:	c303      	stmia	r3!, {r0, r1}
  TxParams.Datarate = LmHandlerParams.TxDatarate;
 800e376:	4b26      	ldr	r3, [pc, #152]	; (800e410 <LmHandlerSend+0x198>)
 800e378:	2203      	movs	r2, #3
 800e37a:	569a      	ldrsb	r2, [r3, r2]
 800e37c:	4b25      	ldr	r3, [pc, #148]	; (800e414 <LmHandlerSend+0x19c>)
 800e37e:	711a      	strb	r2, [r3, #4]

  status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800e380:	232e      	movs	r3, #46	; 0x2e
 800e382:	18fc      	adds	r4, r7, r3
 800e384:	230a      	movs	r3, #10
 800e386:	18fb      	adds	r3, r7, r3
 800e388:	781a      	ldrb	r2, [r3, #0]
 800e38a:	2518      	movs	r5, #24
 800e38c:	197b      	adds	r3, r7, r5
 800e38e:	0011      	movs	r1, r2
 800e390:	0018      	movs	r0, r3
 800e392:	f006 f81b 	bl	80143cc <LoRaMacMcpsRequest>
 800e396:	0003      	movs	r3, r0
 800e398:	7023      	strb	r3, [r4, #0]
  if (nextTxIn != NULL)
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d003      	beq.n	800e3a8 <LmHandlerSend+0x130>
  {
    *nextTxIn = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800e3a0:	197b      	adds	r3, r7, r5
 800e3a2:	691a      	ldr	r2, [r3, #16]
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	601a      	str	r2, [r3, #0]
  }

  switch(status)
 800e3a8:	232e      	movs	r3, #46	; 0x2e
 800e3aa:	18fb      	adds	r3, r7, r3
 800e3ac:	781b      	ldrb	r3, [r3, #0]
 800e3ae:	2b11      	cmp	r3, #17
 800e3b0:	d81d      	bhi.n	800e3ee <LmHandlerSend+0x176>
 800e3b2:	009a      	lsls	r2, r3, #2
 800e3b4:	4b18      	ldr	r3, [pc, #96]	; (800e418 <LmHandlerSend+0x1a0>)
 800e3b6:	18d3      	adds	r3, r2, r3
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	469f      	mov	pc, r3
  {
  case LORAMAC_STATUS_OK:
    lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800e3bc:	232f      	movs	r3, #47	; 0x2f
 800e3be:	18fb      	adds	r3, r7, r3
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	701a      	strb	r2, [r3, #0]
    break;
 800e3c4:	e018      	b.n	800e3f8 <LmHandlerSend+0x180>
  case LORAMAC_STATUS_BUSY:
  case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
  case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
  case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
    lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800e3c6:	232f      	movs	r3, #47	; 0x2f
 800e3c8:	18fb      	adds	r3, r7, r3
 800e3ca:	22fe      	movs	r2, #254	; 0xfe
 800e3cc:	701a      	strb	r2, [r3, #0]
    break;
 800e3ce:	e013      	b.n	800e3f8 <LmHandlerSend+0x180>
  case LORAMAC_STATUS_NO_NETWORK_JOINED:
    lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800e3d0:	232f      	movs	r3, #47	; 0x2f
 800e3d2:	18fb      	adds	r3, r7, r3
 800e3d4:	22fd      	movs	r2, #253	; 0xfd
 800e3d6:	701a      	strb	r2, [r3, #0]
    break;
 800e3d8:	e00e      	b.n	800e3f8 <LmHandlerSend+0x180>
  case LORAMAC_STATUS_CRYPTO_ERROR:
    lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800e3da:	232f      	movs	r3, #47	; 0x2f
 800e3dc:	18fb      	adds	r3, r7, r3
 800e3de:	22fb      	movs	r2, #251	; 0xfb
 800e3e0:	701a      	strb	r2, [r3, #0]
    break;
 800e3e2:	e009      	b.n	800e3f8 <LmHandlerSend+0x180>
  case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
    lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800e3e4:	232f      	movs	r3, #47	; 0x2f
 800e3e6:	18fb      	adds	r3, r7, r3
 800e3e8:	22fa      	movs	r2, #250	; 0xfa
 800e3ea:	701a      	strb	r2, [r3, #0]
    break;
 800e3ec:	e004      	b.n	800e3f8 <LmHandlerSend+0x180>
  case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
  case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
  case LORAMAC_STATUS_NO_CHANNEL_FOUND:
  case LORAMAC_STATUS_LENGTH_ERROR:
  default:
    lmhStatus = LORAMAC_HANDLER_ERROR;
 800e3ee:	232f      	movs	r3, #47	; 0x2f
 800e3f0:	18fb      	adds	r3, r7, r3
 800e3f2:	22ff      	movs	r2, #255	; 0xff
 800e3f4:	701a      	strb	r2, [r3, #0]
    break;
 800e3f6:	46c0      	nop			; (mov r8, r8)
  }
      
  return lmhStatus;
 800e3f8:	232f      	movs	r3, #47	; 0x2f
 800e3fa:	18fb      	adds	r3, r7, r3
 800e3fc:	781b      	ldrb	r3, [r3, #0]
 800e3fe:	b25b      	sxtb	r3, r3
}
 800e400:	0018      	movs	r0, r3
 800e402:	46bd      	mov	sp, r7
 800e404:	b00c      	add	sp, #48	; 0x30
 800e406:	bdb0      	pop	{r4, r5, r7, pc}
 800e408:	2000015c 	.word	0x2000015c
 800e40c:	20000420 	.word	0x20000420
 800e410:	20000434 	.word	0x20000434
 800e414:	2000047c 	.word	0x2000047c
 800e418:	0801f8d8 	.word	0x0801f8d8

0800e41c <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass(DeviceClass_t newClass)
{
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b08c      	sub	sp, #48	; 0x30
 800e420:	af00      	add	r7, sp, #0
 800e422:	0002      	movs	r2, r0
 800e424:	1dfb      	adds	r3, r7, #7
 800e426:	701a      	strb	r2, [r3, #0]
  MibRequestConfirm_t mibReq;
  DeviceClass_t currentClass;
  LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800e428:	232f      	movs	r3, #47	; 0x2f
 800e42a:	18fb      	adds	r3, r7, r3
 800e42c:	2200      	movs	r2, #0
 800e42e:	701a      	strb	r2, [r3, #0]

  if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800e430:	f7ff fe7a 	bl	800e128 <LmHandlerJoinStatus>
 800e434:	0003      	movs	r3, r0
 800e436:	2b01      	cmp	r3, #1
 800e438:	d002      	beq.n	800e440 <LmHandlerRequestClass+0x24>
  {
    return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800e43a:	2303      	movs	r3, #3
 800e43c:	425b      	negs	r3, r3
 800e43e:	e077      	b.n	800e530 <LmHandlerRequestClass+0x114>
  }

  mibReq.Type = MIB_DEVICE_CLASS;
 800e440:	2108      	movs	r1, #8
 800e442:	187b      	adds	r3, r7, r1
 800e444:	2200      	movs	r2, #0
 800e446:	701a      	strb	r2, [r3, #0]
  if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 800e448:	187b      	adds	r3, r7, r1
 800e44a:	0018      	movs	r0, r3
 800e44c:	f005 f982 	bl	8013754 <LoRaMacMibGetRequestConfirm>
 800e450:	1e03      	subs	r3, r0, #0
 800e452:	d002      	beq.n	800e45a <LmHandlerRequestClass+0x3e>
  {
    return LORAMAC_HANDLER_ERROR;
 800e454:	2301      	movs	r3, #1
 800e456:	425b      	negs	r3, r3
 800e458:	e06a      	b.n	800e530 <LmHandlerRequestClass+0x114>
  }
  currentClass = mibReq.Param.Class;
 800e45a:	212e      	movs	r1, #46	; 0x2e
 800e45c:	187b      	adds	r3, r7, r1
 800e45e:	2208      	movs	r2, #8
 800e460:	18ba      	adds	r2, r7, r2
 800e462:	7912      	ldrb	r2, [r2, #4]
 800e464:	701a      	strb	r2, [r3, #0]

  /* Attempt to switch only if class update */
  if (currentClass != newClass)
 800e466:	187a      	adds	r2, r7, r1
 800e468:	1dfb      	adds	r3, r7, #7
 800e46a:	7812      	ldrb	r2, [r2, #0]
 800e46c:	781b      	ldrb	r3, [r3, #0]
 800e46e:	429a      	cmp	r2, r3
 800e470:	d053      	beq.n	800e51a <LmHandlerRequestClass+0xfe>
  {
    switch (newClass)
 800e472:	1dfb      	adds	r3, r7, #7
 800e474:	781b      	ldrb	r3, [r3, #0]
 800e476:	2b02      	cmp	r3, #2
 800e478:	d02a      	beq.n	800e4d0 <LmHandlerRequestClass+0xb4>
 800e47a:	dc50      	bgt.n	800e51e <LmHandlerRequestClass+0x102>
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d002      	beq.n	800e486 <LmHandlerRequestClass+0x6a>
 800e480:	2b01      	cmp	r3, #1
 800e482:	d020      	beq.n	800e4c6 <LmHandlerRequestClass+0xaa>
          }
        }
      }
      break;
      default:
        break;
 800e484:	e04b      	b.n	800e51e <LmHandlerRequestClass+0x102>
        if (currentClass != CLASS_A)
 800e486:	232e      	movs	r3, #46	; 0x2e
 800e488:	18fb      	adds	r3, r7, r3
 800e48a:	781b      	ldrb	r3, [r3, #0]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d048      	beq.n	800e522 <LmHandlerRequestClass+0x106>
          mibReq.Param.Class = CLASS_A;
 800e490:	2108      	movs	r1, #8
 800e492:	187b      	adds	r3, r7, r1
 800e494:	2200      	movs	r2, #0
 800e496:	711a      	strb	r2, [r3, #4]
          if (LoRaMacMibSetRequestConfirm(&mibReq) == LORAMAC_STATUS_OK)
 800e498:	187b      	adds	r3, r7, r1
 800e49a:	0018      	movs	r0, r3
 800e49c:	f005 fab8 	bl	8013a10 <LoRaMacMibSetRequestConfirm>
 800e4a0:	1e03      	subs	r3, r0, #0
 800e4a2:	d10b      	bne.n	800e4bc <LmHandlerRequestClass+0xa0>
            DisplayClassUpdate(CLASS_A);
 800e4a4:	2000      	movs	r0, #0
 800e4a6:	f000 fac9 	bl	800ea3c <DisplayClassUpdate>
            if (LmHandlerCallbacks.OnClassChange != NULL)
 800e4aa:	4b23      	ldr	r3, [pc, #140]	; (800e538 <LmHandlerRequestClass+0x11c>)
 800e4ac:	699b      	ldr	r3, [r3, #24]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d037      	beq.n	800e522 <LmHandlerRequestClass+0x106>
              LmHandlerCallbacks.OnClassChange( CLASS_A );
 800e4b2:	4b21      	ldr	r3, [pc, #132]	; (800e538 <LmHandlerRequestClass+0x11c>)
 800e4b4:	699b      	ldr	r3, [r3, #24]
 800e4b6:	2000      	movs	r0, #0
 800e4b8:	4798      	blx	r3
      break;
 800e4ba:	e032      	b.n	800e522 <LmHandlerRequestClass+0x106>
            errorStatus = LORAMAC_HANDLER_ERROR;
 800e4bc:	232f      	movs	r3, #47	; 0x2f
 800e4be:	18fb      	adds	r3, r7, r3
 800e4c0:	22ff      	movs	r2, #255	; 0xff
 800e4c2:	701a      	strb	r2, [r3, #0]
      break;
 800e4c4:	e02d      	b.n	800e522 <LmHandlerRequestClass+0x106>
        errorStatus = LORAMAC_HANDLER_ERROR;
 800e4c6:	232f      	movs	r3, #47	; 0x2f
 800e4c8:	18fb      	adds	r3, r7, r3
 800e4ca:	22ff      	movs	r2, #255	; 0xff
 800e4cc:	701a      	strb	r2, [r3, #0]
      break;
 800e4ce:	e02b      	b.n	800e528 <LmHandlerRequestClass+0x10c>
        if (currentClass != CLASS_A)
 800e4d0:	232e      	movs	r3, #46	; 0x2e
 800e4d2:	18fb      	adds	r3, r7, r3
 800e4d4:	781b      	ldrb	r3, [r3, #0]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d004      	beq.n	800e4e4 <LmHandlerRequestClass+0xc8>
          errorStatus = LORAMAC_HANDLER_ERROR;
 800e4da:	232f      	movs	r3, #47	; 0x2f
 800e4dc:	18fb      	adds	r3, r7, r3
 800e4de:	22ff      	movs	r2, #255	; 0xff
 800e4e0:	701a      	strb	r2, [r3, #0]
      break;
 800e4e2:	e020      	b.n	800e526 <LmHandlerRequestClass+0x10a>
          mibReq.Param.Class = CLASS_C;
 800e4e4:	2108      	movs	r1, #8
 800e4e6:	187b      	adds	r3, r7, r1
 800e4e8:	2202      	movs	r2, #2
 800e4ea:	711a      	strb	r2, [r3, #4]
          if (LoRaMacMibSetRequestConfirm(&mibReq) == LORAMAC_STATUS_OK)
 800e4ec:	187b      	adds	r3, r7, r1
 800e4ee:	0018      	movs	r0, r3
 800e4f0:	f005 fa8e 	bl	8013a10 <LoRaMacMibSetRequestConfirm>
 800e4f4:	1e03      	subs	r3, r0, #0
 800e4f6:	d10b      	bne.n	800e510 <LmHandlerRequestClass+0xf4>
            DisplayClassUpdate(CLASS_C);
 800e4f8:	2002      	movs	r0, #2
 800e4fa:	f000 fa9f 	bl	800ea3c <DisplayClassUpdate>
            if (LmHandlerCallbacks.OnClassChange != NULL)
 800e4fe:	4b0e      	ldr	r3, [pc, #56]	; (800e538 <LmHandlerRequestClass+0x11c>)
 800e500:	699b      	ldr	r3, [r3, #24]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d00f      	beq.n	800e526 <LmHandlerRequestClass+0x10a>
              LmHandlerCallbacks.OnClassChange( CLASS_C );
 800e506:	4b0c      	ldr	r3, [pc, #48]	; (800e538 <LmHandlerRequestClass+0x11c>)
 800e508:	699b      	ldr	r3, [r3, #24]
 800e50a:	2002      	movs	r0, #2
 800e50c:	4798      	blx	r3
      break;
 800e50e:	e00a      	b.n	800e526 <LmHandlerRequestClass+0x10a>
            errorStatus = LORAMAC_HANDLER_ERROR;
 800e510:	232f      	movs	r3, #47	; 0x2f
 800e512:	18fb      	adds	r3, r7, r3
 800e514:	22ff      	movs	r2, #255	; 0xff
 800e516:	701a      	strb	r2, [r3, #0]
      break;
 800e518:	e005      	b.n	800e526 <LmHandlerRequestClass+0x10a>
    }
  }
 800e51a:	46c0      	nop			; (mov r8, r8)
 800e51c:	e004      	b.n	800e528 <LmHandlerRequestClass+0x10c>
        break;
 800e51e:	46c0      	nop			; (mov r8, r8)
 800e520:	e002      	b.n	800e528 <LmHandlerRequestClass+0x10c>
      break;
 800e522:	46c0      	nop			; (mov r8, r8)
 800e524:	e000      	b.n	800e528 <LmHandlerRequestClass+0x10c>
      break;
 800e526:	46c0      	nop			; (mov r8, r8)
  return errorStatus;
 800e528:	232f      	movs	r3, #47	; 0x2f
 800e52a:	18fb      	adds	r3, r7, r3
 800e52c:	781b      	ldrb	r3, [r3, #0]
 800e52e:	b25b      	sxtb	r3, r3
}
 800e530:	0018      	movs	r0, r3
 800e532:	46bd      	mov	sp, r7
 800e534:	b00c      	add	sp, #48	; 0x30
 800e536:	bd80      	pop	{r7, pc}
 800e538:	2000043c 	.word	0x2000043c

0800e53c <LmHandlerPackageRegister>:

LmHandlerErrorStatus_t LmHandlerPackageRegister(uint8_t id, void *params)
{
 800e53c:	b590      	push	{r4, r7, lr}
 800e53e:	b085      	sub	sp, #20
 800e540:	af00      	add	r7, sp, #0
 800e542:	0002      	movs	r2, r0
 800e544:	6039      	str	r1, [r7, #0]
 800e546:	1dfb      	adds	r3, r7, #7
 800e548:	701a      	strb	r2, [r3, #0]
  LmhPackage_t *package = NULL;
 800e54a:	2300      	movs	r3, #0
 800e54c:	60fb      	str	r3, [r7, #12]
  switch (id)
 800e54e:	1dfb      	adds	r3, r7, #7
 800e550:	781b      	ldrb	r3, [r3, #0]
 800e552:	2b00      	cmp	r3, #0
 800e554:	d104      	bne.n	800e560 <LmHandlerPackageRegister+0x24>
  {
    case PACKAGE_ID_COMPLIANCE:
    {
      package = LmphCompliancePackageFactory();
 800e556:	f000 fa8b 	bl	800ea70 <LmphCompliancePackageFactory>
 800e55a:	0003      	movs	r3, r0
 800e55c:	60fb      	str	r3, [r7, #12]
      break;
 800e55e:	e000      	b.n	800e562 <LmHandlerPackageRegister+0x26>
    default:
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
      LmhpDataDistributionPackageRegister(id, &package);
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
      break;
 800e560:	46c0      	nop			; (mov r8, r8)
  }

  if (package != NULL)
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d028      	beq.n	800e5ba <LmHandlerPackageRegister+0x7e>
  {
    LmHandlerPackages[id] = package;
 800e568:	1dfb      	adds	r3, r7, #7
 800e56a:	781a      	ldrb	r2, [r3, #0]
 800e56c:	4b16      	ldr	r3, [pc, #88]	; (800e5c8 <LmHandlerPackageRegister+0x8c>)
 800e56e:	0092      	lsls	r2, r2, #2
 800e570:	68f9      	ldr	r1, [r7, #12]
 800e572:	50d1      	str	r1, [r2, r3]
    LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800e574:	1dfb      	adds	r3, r7, #7
 800e576:	781a      	ldrb	r2, [r3, #0]
 800e578:	4b13      	ldr	r3, [pc, #76]	; (800e5c8 <LmHandlerPackageRegister+0x8c>)
 800e57a:	0092      	lsls	r2, r2, #2
 800e57c:	58d3      	ldr	r3, [r2, r3]
 800e57e:	4a13      	ldr	r2, [pc, #76]	; (800e5cc <LmHandlerPackageRegister+0x90>)
 800e580:	621a      	str	r2, [r3, #32]
    LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800e582:	1dfb      	adds	r3, r7, #7
 800e584:	781a      	ldrb	r2, [r3, #0]
 800e586:	4b10      	ldr	r3, [pc, #64]	; (800e5c8 <LmHandlerPackageRegister+0x8c>)
 800e588:	0092      	lsls	r2, r2, #2
 800e58a:	58d3      	ldr	r3, [r2, r3]
 800e58c:	4a10      	ldr	r2, [pc, #64]	; (800e5d0 <LmHandlerPackageRegister+0x94>)
 800e58e:	625a      	str	r2, [r3, #36]	; 0x24
    LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800e590:	1dfb      	adds	r3, r7, #7
 800e592:	781a      	ldrb	r2, [r3, #0]
 800e594:	4b0c      	ldr	r3, [pc, #48]	; (800e5c8 <LmHandlerPackageRegister+0x8c>)
 800e596:	0092      	lsls	r2, r2, #2
 800e598:	58d3      	ldr	r3, [r2, r3]
 800e59a:	4a0e      	ldr	r2, [pc, #56]	; (800e5d4 <LmHandlerPackageRegister+0x98>)
 800e59c:	629a      	str	r2, [r3, #40]	; 0x28
    LmHandlerPackages[id]->Init(params, AppData.Buffer, LORAWAN_APP_DATA_BUFFER_MAX_SIZE);
 800e59e:	1dfb      	adds	r3, r7, #7
 800e5a0:	781a      	ldrb	r2, [r3, #0]
 800e5a2:	4b09      	ldr	r3, [pc, #36]	; (800e5c8 <LmHandlerPackageRegister+0x8c>)
 800e5a4:	0092      	lsls	r2, r2, #2
 800e5a6:	58d3      	ldr	r3, [r2, r3]
 800e5a8:	685c      	ldr	r4, [r3, #4]
 800e5aa:	4b0b      	ldr	r3, [pc, #44]	; (800e5d8 <LmHandlerPackageRegister+0x9c>)
 800e5ac:	6859      	ldr	r1, [r3, #4]
 800e5ae:	683b      	ldr	r3, [r7, #0]
 800e5b0:	22f2      	movs	r2, #242	; 0xf2
 800e5b2:	0018      	movs	r0, r3
 800e5b4:	47a0      	blx	r4

    return LORAMAC_HANDLER_SUCCESS;
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	e001      	b.n	800e5be <LmHandlerPackageRegister+0x82>
  }
  else
  {
    return LORAMAC_HANDLER_ERROR;
 800e5ba:	2301      	movs	r3, #1
 800e5bc:	425b      	negs	r3, r3
  }
}
 800e5be:	0018      	movs	r0, r3
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	b005      	add	sp, #20
 800e5c4:	bd90      	pop	{r4, r7, pc}
 800e5c6:	46c0      	nop			; (mov r8, r8)
 800e5c8:	20000420 	.word	0x20000420
 800e5cc:	0800e169 	.word	0x0800e169
 800e5d0:	0800e279 	.word	0x0800e279
 800e5d4:	0800e675 	.word	0x0800e675
 800e5d8:	20000170 	.word	0x20000170

0800e5dc <LmHandlerGetCurrentClass>:

int32_t LmHandlerGetCurrentClass(DeviceClass_t *deviceClass)
{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b08c      	sub	sp, #48	; 0x30
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	6078      	str	r0, [r7, #4]
  MibRequestConfirm_t mibReq;
  if (deviceClass == NULL)
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d102      	bne.n	800e5f0 <LmHandlerGetCurrentClass+0x14>
  {
    return LORAMAC_HANDLER_ERROR;
 800e5ea:	2301      	movs	r3, #1
 800e5ec:	425b      	negs	r3, r3
 800e5ee:	e012      	b.n	800e616 <LmHandlerGetCurrentClass+0x3a>
  }

  mibReq.Type = MIB_DEVICE_CLASS;
 800e5f0:	210c      	movs	r1, #12
 800e5f2:	187b      	adds	r3, r7, r1
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	701a      	strb	r2, [r3, #0]
  if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 800e5f8:	187b      	adds	r3, r7, r1
 800e5fa:	0018      	movs	r0, r3
 800e5fc:	f005 f8aa 	bl	8013754 <LoRaMacMibGetRequestConfirm>
 800e600:	1e03      	subs	r3, r0, #0
 800e602:	d002      	beq.n	800e60a <LmHandlerGetCurrentClass+0x2e>
  {
    return LORAMAC_HANDLER_ERROR;
 800e604:	2301      	movs	r3, #1
 800e606:	425b      	negs	r3, r3
 800e608:	e005      	b.n	800e616 <LmHandlerGetCurrentClass+0x3a>
  }

  *deviceClass = mibReq.Param.Class;
 800e60a:	230c      	movs	r3, #12
 800e60c:	18fb      	adds	r3, r7, r3
 800e60e:	791a      	ldrb	r2, [r3, #4]
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	701a      	strb	r2, [r3, #0]
  return LORAMAC_HANDLER_SUCCESS;
 800e614:	2300      	movs	r3, #0
}
 800e616:	0018      	movs	r0, r3
 800e618:	46bd      	mov	sp, r7
 800e61a:	b00c      	add	sp, #48	; 0x30
 800e61c:	bd80      	pop	{r7, pc}
	...

0800e620 <LmHandlerGetTxDatarate>:

int32_t LmHandlerGetTxDatarate(int8_t *txDatarate)
{
 800e620:	b580      	push	{r7, lr}
 800e622:	b08c      	sub	sp, #48	; 0x30
 800e624:	af00      	add	r7, sp, #0
 800e626:	6078      	str	r0, [r7, #4]
  MibRequestConfirm_t mibGet;
  if (txDatarate == NULL)
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d102      	bne.n	800e634 <LmHandlerGetTxDatarate+0x14>
  {
    return LORAMAC_HANDLER_ERROR;
 800e62e:	2301      	movs	r3, #1
 800e630:	425b      	negs	r3, r3
 800e632:	e018      	b.n	800e666 <LmHandlerGetTxDatarate+0x46>
  }

  mibGet.Type = MIB_CHANNELS_DATARATE;
 800e634:	210c      	movs	r1, #12
 800e636:	187b      	adds	r3, r7, r1
 800e638:	221f      	movs	r2, #31
 800e63a:	701a      	strb	r2, [r3, #0]
  if (LoRaMacMibGetRequestConfirm(&mibGet) != LORAMAC_STATUS_OK)
 800e63c:	187b      	adds	r3, r7, r1
 800e63e:	0018      	movs	r0, r3
 800e640:	f005 f888 	bl	8013754 <LoRaMacMibGetRequestConfirm>
 800e644:	1e03      	subs	r3, r0, #0
 800e646:	d002      	beq.n	800e64e <LmHandlerGetTxDatarate+0x2e>
  {
    return LORAMAC_HANDLER_ERROR;
 800e648:	2301      	movs	r3, #1
 800e64a:	425b      	negs	r3, r3
 800e64c:	e00b      	b.n	800e666 <LmHandlerGetTxDatarate+0x46>
  }

  *txDatarate = mibGet.Param.ChannelsDatarate;
 800e64e:	210c      	movs	r1, #12
 800e650:	187b      	adds	r3, r7, r1
 800e652:	2204      	movs	r2, #4
 800e654:	569a      	ldrsb	r2, [r3, r2]
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	701a      	strb	r2, [r3, #0]
  LmHandlerParams.TxDatarate = mibGet.Param.ChannelsDatarate;
 800e65a:	187b      	adds	r3, r7, r1
 800e65c:	2204      	movs	r2, #4
 800e65e:	569a      	ldrsb	r2, [r3, r2]
 800e660:	4b03      	ldr	r3, [pc, #12]	; (800e670 <LmHandlerGetTxDatarate+0x50>)
 800e662:	70da      	strb	r2, [r3, #3]
  return LORAMAC_HANDLER_SUCCESS;
 800e664:	2300      	movs	r3, #0
}
 800e666:	0018      	movs	r0, r3
 800e668:	46bd      	mov	sp, r7
 800e66a:	b00c      	add	sp, #48	; 0x30
 800e66c:	bd80      	pop	{r7, pc}
 800e66e:	46c0      	nop			; (mov r8, r8)
 800e670:	20000434 	.word	0x20000434

0800e674 <LmHandlerDeviceTimeReq>:
#endif /* LORAMAC_CLASSB_ENABLED */
}

/* Private  functions ---------------------------------------------------------*/
static LmHandlerErrorStatus_t LmHandlerDeviceTimeReq(void)
{
 800e674:	b5b0      	push	{r4, r5, r7, lr}
 800e676:	b086      	sub	sp, #24
 800e678:	af00      	add	r7, sp, #0
  LoRaMacStatus_t status;
  MlmeReq_t mlmeReq;

  mlmeReq.Type = MLME_DEVICE_TIME;
 800e67a:	003b      	movs	r3, r7
 800e67c:	220a      	movs	r2, #10
 800e67e:	701a      	strb	r2, [r3, #0]

  status = LoRaMacMlmeRequest(&mlmeReq);
 800e680:	2517      	movs	r5, #23
 800e682:	197c      	adds	r4, r7, r5
 800e684:	003b      	movs	r3, r7
 800e686:	0018      	movs	r0, r3
 800e688:	f005 fd48 	bl	801411c <LoRaMacMlmeRequest>
 800e68c:	0003      	movs	r3, r0
 800e68e:	7023      	strb	r3, [r4, #0]

  if (status == LORAMAC_STATUS_OK)
 800e690:	197b      	adds	r3, r7, r5
 800e692:	781b      	ldrb	r3, [r3, #0]
 800e694:	2b00      	cmp	r3, #0
 800e696:	d101      	bne.n	800e69c <LmHandlerDeviceTimeReq+0x28>
  {
    return LORAMAC_HANDLER_SUCCESS;
 800e698:	2300      	movs	r3, #0
 800e69a:	e001      	b.n	800e6a0 <LmHandlerDeviceTimeReq+0x2c>
  }
  else
  {
    return LORAMAC_HANDLER_ERROR;
 800e69c:	2301      	movs	r3, #1
 800e69e:	425b      	negs	r3, r3
  }
}
 800e6a0:	0018      	movs	r0, r3
 800e6a2:	46bd      	mov	sp, r7
 800e6a4:	b006      	add	sp, #24
 800e6a6:	bdb0      	pop	{r4, r5, r7, pc}

0800e6a8 <McpsConfirm>:
  }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

static void McpsConfirm(McpsConfirm_t *mcpsConfirm)
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b082      	sub	sp, #8
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
  TxParams.IsMcpsConfirm = 1; // Здесь выставляется будет ли подтверждение или нет
 800e6b0:	4b16      	ldr	r3, [pc, #88]	; (800e70c <McpsConfirm+0x64>)
 800e6b2:	2201      	movs	r2, #1
 800e6b4:	701a      	strb	r2, [r3, #0]
  TxParams.Status = mcpsConfirm->Status;
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	785a      	ldrb	r2, [r3, #1]
 800e6ba:	4b14      	ldr	r3, [pc, #80]	; (800e70c <McpsConfirm+0x64>)
 800e6bc:	705a      	strb	r2, [r3, #1]
  TxParams.Datarate = mcpsConfirm->Datarate;
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	789b      	ldrb	r3, [r3, #2]
 800e6c2:	b25a      	sxtb	r2, r3
 800e6c4:	4b11      	ldr	r3, [pc, #68]	; (800e70c <McpsConfirm+0x64>)
 800e6c6:	711a      	strb	r2, [r3, #4]
  TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	68da      	ldr	r2, [r3, #12]
 800e6cc:	4b0f      	ldr	r3, [pc, #60]	; (800e70c <McpsConfirm+0x64>)
 800e6ce:	609a      	str	r2, [r3, #8]
  TxParams.TxPower = mcpsConfirm->TxPower;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	2203      	movs	r2, #3
 800e6d4:	569a      	ldrsb	r2, [r3, r2]
 800e6d6:	4b0d      	ldr	r3, [pc, #52]	; (800e70c <McpsConfirm+0x64>)
 800e6d8:	751a      	strb	r2, [r3, #20]
  TxParams.Channel = mcpsConfirm->Channel;
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	691b      	ldr	r3, [r3, #16]
 800e6de:	b2da      	uxtb	r2, r3
 800e6e0:	4b0a      	ldr	r3, [pc, #40]	; (800e70c <McpsConfirm+0x64>)
 800e6e2:	755a      	strb	r2, [r3, #21]
  TxParams.AckReceived = mcpsConfirm->AckReceived;
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	791b      	ldrb	r3, [r3, #4]
 800e6e8:	001a      	movs	r2, r3
 800e6ea:	4b08      	ldr	r3, [pc, #32]	; (800e70c <McpsConfirm+0x64>)
 800e6ec:	70da      	strb	r2, [r3, #3]

  LmHandlerCallbacks.OnTxData(&TxParams);
 800e6ee:	4b08      	ldr	r3, [pc, #32]	; (800e710 <McpsConfirm+0x68>)
 800e6f0:	691b      	ldr	r3, [r3, #16]
 800e6f2:	4a06      	ldr	r2, [pc, #24]	; (800e70c <McpsConfirm+0x64>)
 800e6f4:	0010      	movs	r0, r2
 800e6f6:	4798      	blx	r3

  LmHandlerPackagesNotify(PACKAGE_MCPS_CONFIRM, mcpsConfirm);
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	0019      	movs	r1, r3
 800e6fc:	2000      	movs	r0, #0
 800e6fe:	f000 f907 	bl	800e910 <LmHandlerPackagesNotify>
}
 800e702:	46c0      	nop			; (mov r8, r8)
 800e704:	46bd      	mov	sp, r7
 800e706:	b002      	add	sp, #8
 800e708:	bd80      	pop	{r7, pc}
 800e70a:	46c0      	nop			; (mov r8, r8)
 800e70c:	2000047c 	.word	0x2000047c
 800e710:	2000043c 	.word	0x2000043c

0800e714 <McpsIndication>:

static void McpsIndication(McpsIndication_t *mcpsIndication)
{
 800e714:	b590      	push	{r4, r7, lr}
 800e716:	b089      	sub	sp, #36	; 0x24
 800e718:	af00      	add	r7, sp, #0
 800e71a:	6078      	str	r0, [r7, #4]
  LmHandlerAppData_t appData;
  DeviceClass_t deviceClass;
  RxParams.IsMcpsIndication = 1;
 800e71c:	4b36      	ldr	r3, [pc, #216]	; (800e7f8 <McpsIndication+0xe4>)
 800e71e:	2201      	movs	r2, #1
 800e720:	701a      	strb	r2, [r3, #0]
  RxParams.Status = mcpsIndication->Status;
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	785a      	ldrb	r2, [r3, #1]
 800e726:	4b34      	ldr	r3, [pc, #208]	; (800e7f8 <McpsIndication+0xe4>)
 800e728:	705a      	strb	r2, [r3, #1]

  if (RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK)
 800e72a:	4b33      	ldr	r3, [pc, #204]	; (800e7f8 <McpsIndication+0xe4>)
 800e72c:	785b      	ldrb	r3, [r3, #1]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d15e      	bne.n	800e7f0 <McpsIndication+0xdc>
  {
    return;
  }

  if (mcpsIndication->BufferSize > 0)
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	7b1b      	ldrb	r3, [r3, #12]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d02c      	beq.n	800e794 <McpsIndication+0x80>
  {
    RxParams.Datarate = mcpsIndication->RxDatarate;
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	791b      	ldrb	r3, [r3, #4]
 800e73e:	b25a      	sxtb	r2, r3
 800e740:	4b2d      	ldr	r3, [pc, #180]	; (800e7f8 <McpsIndication+0xe4>)
 800e742:	709a      	strb	r2, [r3, #2]
    RxParams.Rssi = mcpsIndication->Rssi;
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	220e      	movs	r2, #14
 800e748:	5e9b      	ldrsh	r3, [r3, r2]
 800e74a:	b25a      	sxtb	r2, r3
 800e74c:	4b2a      	ldr	r3, [pc, #168]	; (800e7f8 <McpsIndication+0xe4>)
 800e74e:	70da      	strb	r2, [r3, #3]
    RxParams.Snr = mcpsIndication->Snr;
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	2210      	movs	r2, #16
 800e754:	569a      	ldrsb	r2, [r3, r2]
 800e756:	4b28      	ldr	r3, [pc, #160]	; (800e7f8 <McpsIndication+0xe4>)
 800e758:	711a      	strb	r2, [r3, #4]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	695a      	ldr	r2, [r3, #20]
 800e75e:	4b26      	ldr	r3, [pc, #152]	; (800e7f8 <McpsIndication+0xe4>)
 800e760:	609a      	str	r2, [r3, #8]
    RxParams.RxSlot = mcpsIndication->RxSlot;
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	7c5b      	ldrb	r3, [r3, #17]
 800e766:	b25a      	sxtb	r2, r3
 800e768:	4b23      	ldr	r3, [pc, #140]	; (800e7f8 <McpsIndication+0xe4>)
 800e76a:	731a      	strb	r2, [r3, #12]

    appData.Port = mcpsIndication->Port;
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	78da      	ldrb	r2, [r3, #3]
 800e770:	2118      	movs	r1, #24
 800e772:	187b      	adds	r3, r7, r1
 800e774:	701a      	strb	r2, [r3, #0]
    appData.BufferSize = mcpsIndication->BufferSize;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	7b1a      	ldrb	r2, [r3, #12]
 800e77a:	187b      	adds	r3, r7, r1
 800e77c:	705a      	strb	r2, [r3, #1]
    appData.Buffer = mcpsIndication->Buffer;
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	689a      	ldr	r2, [r3, #8]
 800e782:	0008      	movs	r0, r1
 800e784:	187b      	adds	r3, r7, r1
 800e786:	605a      	str	r2, [r3, #4]

    LmHandlerCallbacks.OnRxData(&appData, &RxParams);
 800e788:	4b1c      	ldr	r3, [pc, #112]	; (800e7fc <McpsIndication+0xe8>)
 800e78a:	695b      	ldr	r3, [r3, #20]
 800e78c:	491a      	ldr	r1, [pc, #104]	; (800e7f8 <McpsIndication+0xe4>)
 800e78e:	183a      	adds	r2, r7, r0
 800e790:	0010      	movs	r0, r2
 800e792:	4798      	blx	r3
  }
   
    if( mcpsIndication->DeviceTimeAnsReceived == true )
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	7f1b      	ldrb	r3, [r3, #28]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d006      	beq.n	800e7aa <McpsIndication+0x96>
    {
      if( LmHandlerCallbacks.OnSysTimeUpdate != NULL)
 800e79c:	4b17      	ldr	r3, [pc, #92]	; (800e7fc <McpsIndication+0xe8>)
 800e79e:	69db      	ldr	r3, [r3, #28]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d002      	beq.n	800e7aa <McpsIndication+0x96>
      { 
        /*callback used in Class C data transfert use case (fuota)*/
        LmHandlerCallbacks.OnSysTimeUpdate( );
 800e7a4:	4b15      	ldr	r3, [pc, #84]	; (800e7fc <McpsIndication+0xe8>)
 800e7a6:	69db      	ldr	r3, [r3, #28]
 800e7a8:	4798      	blx	r3
      }  
    }  
  
  /* Call packages RxProcess function */
  LmHandlerPackagesNotify(PACKAGE_MCPS_INDICATION, mcpsIndication);
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	0019      	movs	r1, r3
 800e7ae:	2001      	movs	r0, #1
 800e7b0:	f000 f8ae 	bl	800e910 <LmHandlerPackagesNotify>
  LmHandlerGetCurrentClass(&deviceClass);
 800e7b4:	2417      	movs	r4, #23
 800e7b6:	193b      	adds	r3, r7, r4
 800e7b8:	0018      	movs	r0, r3
 800e7ba:	f7ff ff0f 	bl	800e5dc <LmHandlerGetCurrentClass>
  if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	795b      	ldrb	r3, [r3, #5]
 800e7c2:	2b01      	cmp	r3, #1
 800e7c4:	d115      	bne.n	800e7f2 <McpsIndication+0xde>
 800e7c6:	193b      	adds	r3, r7, r4
 800e7c8:	781b      	ldrb	r3, [r3, #0]
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d111      	bne.n	800e7f2 <McpsIndication+0xde>
  {
    /* The server signals that it has pending data to be sent. */
    /* We schedule an uplink as soon as possible to flush the server. */

    /* Send an empty message */
    LmHandlerAppData_t appData =
 800e7ce:	210c      	movs	r1, #12
 800e7d0:	187b      	adds	r3, r7, r1
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	701a      	strb	r2, [r3, #0]
 800e7d6:	187b      	adds	r3, r7, r1
 800e7d8:	2200      	movs	r2, #0
 800e7da:	705a      	strb	r2, [r3, #1]
 800e7dc:	187b      	adds	r3, r7, r1
 800e7de:	2200      	movs	r2, #0
 800e7e0:	605a      	str	r2, [r3, #4]
    {
      .Buffer = NULL,
      .BufferSize = 0,
      .Port = 0
    };
    LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 800e7e2:	1878      	adds	r0, r7, r1
 800e7e4:	2301      	movs	r3, #1
 800e7e6:	2200      	movs	r2, #0
 800e7e8:	2100      	movs	r1, #0
 800e7ea:	f7ff fd45 	bl	800e278 <LmHandlerSend>
 800e7ee:	e000      	b.n	800e7f2 <McpsIndication+0xde>
    return;
 800e7f0:	46c0      	nop			; (mov r8, r8)
  }
}
 800e7f2:	46bd      	mov	sp, r7
 800e7f4:	b009      	add	sp, #36	; 0x24
 800e7f6:	bd90      	pop	{r4, r7, pc}
 800e7f8:	20000160 	.word	0x20000160
 800e7fc:	2000043c 	.word	0x2000043c

0800e800 <MlmeConfirm>:

static void MlmeConfirm(MlmeConfirm_t *mlmeConfirm)
{
 800e800:	b590      	push	{r4, r7, lr}
 800e802:	b08d      	sub	sp, #52	; 0x34
 800e804:	af00      	add	r7, sp, #0
 800e806:	6078      	str	r0, [r7, #4]
  TxParams.IsMcpsConfirm = 0;
 800e808:	4b22      	ldr	r3, [pc, #136]	; (800e894 <MlmeConfirm+0x94>)
 800e80a:	2200      	movs	r2, #0
 800e80c:	701a      	strb	r2, [r3, #0]
  TxParams.Status = mlmeConfirm->Status;
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	785a      	ldrb	r2, [r3, #1]
 800e812:	4b20      	ldr	r3, [pc, #128]	; (800e894 <MlmeConfirm+0x94>)
 800e814:	705a      	strb	r2, [r3, #1]

  LmHandlerPackagesNotify(PACKAGE_MLME_CONFIRM, mlmeConfirm);
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	0019      	movs	r1, r3
 800e81a:	2002      	movs	r0, #2
 800e81c:	f000 f878 	bl	800e910 <LmHandlerPackagesNotify>

  switch (mlmeConfirm->MlmeRequest)
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	781b      	ldrb	r3, [r3, #0]
 800e824:	2b0a      	cmp	r3, #10
 800e826:	d02c      	beq.n	800e882 <MlmeConfirm+0x82>
 800e828:	dc2d      	bgt.n	800e886 <MlmeConfirm+0x86>
 800e82a:	2b01      	cmp	r3, #1
 800e82c:	d002      	beq.n	800e834 <MlmeConfirm+0x34>
 800e82e:	2b04      	cmp	r3, #4
 800e830:	d02b      	beq.n	800e88a <MlmeConfirm+0x8a>
      }
    }
    break;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
      break;
 800e832:	e028      	b.n	800e886 <MlmeConfirm+0x86>
      mibReq.Type = MIB_DEV_ADDR;
 800e834:	210c      	movs	r1, #12
 800e836:	187b      	adds	r3, r7, r1
 800e838:	2206      	movs	r2, #6
 800e83a:	701a      	strb	r2, [r3, #0]
      LoRaMacMibGetRequestConfirm(&mibReq);
 800e83c:	000c      	movs	r4, r1
 800e83e:	187b      	adds	r3, r7, r1
 800e840:	0018      	movs	r0, r3
 800e842:	f004 ff87 	bl	8013754 <LoRaMacMibGetRequestConfirm>
      CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800e846:	193b      	adds	r3, r7, r4
 800e848:	685a      	ldr	r2, [r3, #4]
 800e84a:	4b13      	ldr	r3, [pc, #76]	; (800e898 <MlmeConfirm+0x98>)
 800e84c:	615a      	str	r2, [r3, #20]
      LmHandlerGetTxDatarate(&JoinParams.Datarate);
 800e84e:	4b13      	ldr	r3, [pc, #76]	; (800e89c <MlmeConfirm+0x9c>)
 800e850:	0018      	movs	r0, r3
 800e852:	f7ff fee5 	bl	800e620 <LmHandlerGetTxDatarate>
      if (mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK)
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	785b      	ldrb	r3, [r3, #1]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d108      	bne.n	800e870 <MlmeConfirm+0x70>
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800e85e:	4b0f      	ldr	r3, [pc, #60]	; (800e89c <MlmeConfirm+0x9c>)
 800e860:	2200      	movs	r2, #0
 800e862:	705a      	strb	r2, [r3, #1]
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800e864:	4b0e      	ldr	r3, [pc, #56]	; (800e8a0 <MlmeConfirm+0xa0>)
 800e866:	785b      	ldrb	r3, [r3, #1]
 800e868:	0018      	movs	r0, r3
 800e86a:	f7ff fdd7 	bl	800e41c <LmHandlerRequestClass>
 800e86e:	e002      	b.n	800e876 <MlmeConfirm+0x76>
        JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800e870:	4b0a      	ldr	r3, [pc, #40]	; (800e89c <MlmeConfirm+0x9c>)
 800e872:	22ff      	movs	r2, #255	; 0xff
 800e874:	705a      	strb	r2, [r3, #1]
      LmHandlerCallbacks.OnJoinRequest(&JoinParams);
 800e876:	4b0b      	ldr	r3, [pc, #44]	; (800e8a4 <MlmeConfirm+0xa4>)
 800e878:	68db      	ldr	r3, [r3, #12]
 800e87a:	4a08      	ldr	r2, [pc, #32]	; (800e89c <MlmeConfirm+0x9c>)
 800e87c:	0010      	movs	r0, r2
 800e87e:	4798      	blx	r3
    break;
 800e880:	e004      	b.n	800e88c <MlmeConfirm+0x8c>
    break;
 800e882:	46c0      	nop			; (mov r8, r8)
 800e884:	e002      	b.n	800e88c <MlmeConfirm+0x8c>
      break;
 800e886:	46c0      	nop			; (mov r8, r8)
 800e888:	e000      	b.n	800e88c <MlmeConfirm+0x8c>
    break;
 800e88a:	46c0      	nop			; (mov r8, r8)
  }
}
 800e88c:	46c0      	nop			; (mov r8, r8)
 800e88e:	46bd      	mov	sp, r7
 800e890:	b00d      	add	sp, #52	; 0x34
 800e892:	bd90      	pop	{r4, r7, pc}
 800e894:	2000047c 	.word	0x2000047c
 800e898:	20000138 	.word	0x20000138
 800e89c:	2000015c 	.word	0x2000015c
 800e8a0:	20000434 	.word	0x20000434
 800e8a4:	2000043c 	.word	0x2000043c

0800e8a8 <MlmeIndication>:

static void MlmeIndication(MlmeIndication_t *mlmeIndication)
{
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	b082      	sub	sp, #8
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
  RxParams.IsMcpsIndication = 0;
 800e8b0:	4b05      	ldr	r3, [pc, #20]	; (800e8c8 <MlmeIndication+0x20>)
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	701a      	strb	r2, [r3, #0]
  RxParams.Status = mlmeIndication->Status;
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	785a      	ldrb	r2, [r3, #1]
 800e8ba:	4b03      	ldr	r3, [pc, #12]	; (800e8c8 <MlmeIndication+0x20>)
 800e8bc:	705a      	strb	r2, [r3, #1]
      }
      break;
    }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
      break;
 800e8be:	46c0      	nop			; (mov r8, r8)
  }
}
 800e8c0:	46c0      	nop			; (mov r8, r8)
 800e8c2:	46bd      	mov	sp, r7
 800e8c4:	b002      	add	sp, #8
 800e8c6:	bd80      	pop	{r7, pc}
 800e8c8:	20000160 	.word	0x20000160

0800e8cc <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized(uint8_t id)
{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b082      	sub	sp, #8
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	0002      	movs	r2, r0
 800e8d4:	1dfb      	adds	r3, r7, #7
 800e8d6:	701a      	strb	r2, [r3, #0]
  if ((id < PKG_MAX_NUMBER) && (LmHandlerPackages[id]->IsInitialized != NULL))
 800e8d8:	1dfb      	adds	r3, r7, #7
 800e8da:	781b      	ldrb	r3, [r3, #0]
 800e8dc:	2b04      	cmp	r3, #4
 800e8de:	d810      	bhi.n	800e902 <LmHandlerPackageIsInitialized+0x36>
 800e8e0:	1dfb      	adds	r3, r7, #7
 800e8e2:	781a      	ldrb	r2, [r3, #0]
 800e8e4:	4b09      	ldr	r3, [pc, #36]	; (800e90c <LmHandlerPackageIsInitialized+0x40>)
 800e8e6:	0092      	lsls	r2, r2, #2
 800e8e8:	58d3      	ldr	r3, [r2, r3]
 800e8ea:	689b      	ldr	r3, [r3, #8]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d008      	beq.n	800e902 <LmHandlerPackageIsInitialized+0x36>
  {
    return LmHandlerPackages[id]->IsInitialized();
 800e8f0:	1dfb      	adds	r3, r7, #7
 800e8f2:	781a      	ldrb	r2, [r3, #0]
 800e8f4:	4b05      	ldr	r3, [pc, #20]	; (800e90c <LmHandlerPackageIsInitialized+0x40>)
 800e8f6:	0092      	lsls	r2, r2, #2
 800e8f8:	58d3      	ldr	r3, [r2, r3]
 800e8fa:	689b      	ldr	r3, [r3, #8]
 800e8fc:	4798      	blx	r3
 800e8fe:	0003      	movs	r3, r0
 800e900:	e000      	b.n	800e904 <LmHandlerPackageIsInitialized+0x38>
  }
  else
  {
    return false;
 800e902:	2300      	movs	r3, #0
  }
}
 800e904:	0018      	movs	r0, r3
 800e906:	46bd      	mov	sp, r7
 800e908:	b002      	add	sp, #8
 800e90a:	bd80      	pop	{r7, pc}
 800e90c:	20000420 	.word	0x20000420

0800e910 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify(PackageNotifyTypes_t notifyType, void *params)
{
 800e910:	b580      	push	{r7, lr}
 800e912:	b084      	sub	sp, #16
 800e914:	af00      	add	r7, sp, #0
 800e916:	0002      	movs	r2, r0
 800e918:	6039      	str	r1, [r7, #0]
 800e91a:	1dfb      	adds	r3, r7, #7
 800e91c:	701a      	strb	r2, [r3, #0]
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 800e91e:	230f      	movs	r3, #15
 800e920:	18fb      	adds	r3, r7, r3
 800e922:	2200      	movs	r2, #0
 800e924:	701a      	strb	r2, [r3, #0]
 800e926:	e07b      	b.n	800ea20 <LmHandlerPackagesNotify+0x110>
  {
    if (LmHandlerPackages[i] != NULL)
 800e928:	230f      	movs	r3, #15
 800e92a:	18fb      	adds	r3, r7, r3
 800e92c:	2200      	movs	r2, #0
 800e92e:	569a      	ldrsb	r2, [r3, r2]
 800e930:	4b41      	ldr	r3, [pc, #260]	; (800ea38 <LmHandlerPackagesNotify+0x128>)
 800e932:	0092      	lsls	r2, r2, #2
 800e934:	58d3      	ldr	r3, [r2, r3]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d100      	bne.n	800e93c <LmHandlerPackagesNotify+0x2c>
 800e93a:	e05f      	b.n	800e9fc <LmHandlerPackagesNotify+0xec>
    {
      switch (notifyType)
 800e93c:	1dfb      	adds	r3, r7, #7
 800e93e:	781b      	ldrb	r3, [r3, #0]
 800e940:	2b02      	cmp	r3, #2
 800e942:	d046      	beq.n	800e9d2 <LmHandlerPackagesNotify+0xc2>
 800e944:	dc5c      	bgt.n	800ea00 <LmHandlerPackagesNotify+0xf0>
 800e946:	2b00      	cmp	r3, #0
 800e948:	d002      	beq.n	800e950 <LmHandlerPackagesNotify+0x40>
 800e94a:	2b01      	cmp	r3, #1
 800e94c:	d015      	beq.n	800e97a <LmHandlerPackagesNotify+0x6a>
            LmHandlerPackages[i]->OnMlmeConfirmProcess(params);
          }
          break;
        }
        default:
          break;
 800e94e:	e057      	b.n	800ea00 <LmHandlerPackagesNotify+0xf0>
          if (LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL)
 800e950:	210f      	movs	r1, #15
 800e952:	187b      	adds	r3, r7, r1
 800e954:	2200      	movs	r2, #0
 800e956:	569a      	ldrsb	r2, [r3, r2]
 800e958:	4b37      	ldr	r3, [pc, #220]	; (800ea38 <LmHandlerPackagesNotify+0x128>)
 800e95a:	0092      	lsls	r2, r2, #2
 800e95c:	58d3      	ldr	r3, [r2, r3]
 800e95e:	695b      	ldr	r3, [r3, #20]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d04f      	beq.n	800ea04 <LmHandlerPackagesNotify+0xf4>
            LmHandlerPackages[i]->OnMcpsConfirmProcess(params);
 800e964:	187b      	adds	r3, r7, r1
 800e966:	2200      	movs	r2, #0
 800e968:	569a      	ldrsb	r2, [r3, r2]
 800e96a:	4b33      	ldr	r3, [pc, #204]	; (800ea38 <LmHandlerPackagesNotify+0x128>)
 800e96c:	0092      	lsls	r2, r2, #2
 800e96e:	58d3      	ldr	r3, [r2, r3]
 800e970:	695b      	ldr	r3, [r3, #20]
 800e972:	683a      	ldr	r2, [r7, #0]
 800e974:	0010      	movs	r0, r2
 800e976:	4798      	blx	r3
          break;
 800e978:	e044      	b.n	800ea04 <LmHandlerPackagesNotify+0xf4>
          if ((LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL) &&
 800e97a:	210f      	movs	r1, #15
 800e97c:	187b      	adds	r3, r7, r1
 800e97e:	2200      	movs	r2, #0
 800e980:	569a      	ldrsb	r2, [r3, r2]
 800e982:	4b2d      	ldr	r3, [pc, #180]	; (800ea38 <LmHandlerPackagesNotify+0x128>)
 800e984:	0092      	lsls	r2, r2, #2
 800e986:	58d3      	ldr	r3, [r2, r3]
 800e988:	699b      	ldr	r3, [r3, #24]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d03c      	beq.n	800ea08 <LmHandlerPackagesNotify+0xf8>
              ((LmHandlerPackages[i]->Port == ((McpsIndication_t *)params)->Port) ||
 800e98e:	187b      	adds	r3, r7, r1
 800e990:	2200      	movs	r2, #0
 800e992:	569a      	ldrsb	r2, [r3, r2]
 800e994:	4b28      	ldr	r3, [pc, #160]	; (800ea38 <LmHandlerPackagesNotify+0x128>)
 800e996:	0092      	lsls	r2, r2, #2
 800e998:	58d3      	ldr	r3, [r2, r3]
 800e99a:	781a      	ldrb	r2, [r3, #0]
 800e99c:	683b      	ldr	r3, [r7, #0]
 800e99e:	78db      	ldrb	r3, [r3, #3]
          if ((LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL) &&
 800e9a0:	429a      	cmp	r2, r3
 800e9a2:	d00a      	beq.n	800e9ba <LmHandlerPackagesNotify+0xaa>
              ((LmHandlerPackages[i]->Port == ((McpsIndication_t *)params)->Port) ||
 800e9a4:	187b      	adds	r3, r7, r1
 800e9a6:	781b      	ldrb	r3, [r3, #0]
 800e9a8:	b25b      	sxtb	r3, r3
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d12c      	bne.n	800ea08 <LmHandlerPackagesNotify+0xf8>
               ((i == PACKAGE_ID_COMPLIANCE) && (LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning()))))
 800e9ae:	4b22      	ldr	r3, [pc, #136]	; (800ea38 <LmHandlerPackagesNotify+0x128>)
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	68db      	ldr	r3, [r3, #12]
 800e9b4:	4798      	blx	r3
 800e9b6:	1e03      	subs	r3, r0, #0
 800e9b8:	d026      	beq.n	800ea08 <LmHandlerPackagesNotify+0xf8>
            LmHandlerPackages[i]->OnMcpsIndicationProcess(params);
 800e9ba:	230f      	movs	r3, #15
 800e9bc:	18fb      	adds	r3, r7, r3
 800e9be:	2200      	movs	r2, #0
 800e9c0:	569a      	ldrsb	r2, [r3, r2]
 800e9c2:	4b1d      	ldr	r3, [pc, #116]	; (800ea38 <LmHandlerPackagesNotify+0x128>)
 800e9c4:	0092      	lsls	r2, r2, #2
 800e9c6:	58d3      	ldr	r3, [r2, r3]
 800e9c8:	699b      	ldr	r3, [r3, #24]
 800e9ca:	683a      	ldr	r2, [r7, #0]
 800e9cc:	0010      	movs	r0, r2
 800e9ce:	4798      	blx	r3
          break;
 800e9d0:	e01a      	b.n	800ea08 <LmHandlerPackagesNotify+0xf8>
          if (LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL)
 800e9d2:	210f      	movs	r1, #15
 800e9d4:	187b      	adds	r3, r7, r1
 800e9d6:	2200      	movs	r2, #0
 800e9d8:	569a      	ldrsb	r2, [r3, r2]
 800e9da:	4b17      	ldr	r3, [pc, #92]	; (800ea38 <LmHandlerPackagesNotify+0x128>)
 800e9dc:	0092      	lsls	r2, r2, #2
 800e9de:	58d3      	ldr	r3, [r2, r3]
 800e9e0:	69db      	ldr	r3, [r3, #28]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d012      	beq.n	800ea0c <LmHandlerPackagesNotify+0xfc>
            LmHandlerPackages[i]->OnMlmeConfirmProcess(params);
 800e9e6:	187b      	adds	r3, r7, r1
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	569a      	ldrsb	r2, [r3, r2]
 800e9ec:	4b12      	ldr	r3, [pc, #72]	; (800ea38 <LmHandlerPackagesNotify+0x128>)
 800e9ee:	0092      	lsls	r2, r2, #2
 800e9f0:	58d3      	ldr	r3, [r2, r3]
 800e9f2:	69db      	ldr	r3, [r3, #28]
 800e9f4:	683a      	ldr	r2, [r7, #0]
 800e9f6:	0010      	movs	r0, r2
 800e9f8:	4798      	blx	r3
          break;
 800e9fa:	e007      	b.n	800ea0c <LmHandlerPackagesNotify+0xfc>
      }
    }
 800e9fc:	46c0      	nop			; (mov r8, r8)
 800e9fe:	e006      	b.n	800ea0e <LmHandlerPackagesNotify+0xfe>
          break;
 800ea00:	46c0      	nop			; (mov r8, r8)
 800ea02:	e004      	b.n	800ea0e <LmHandlerPackagesNotify+0xfe>
          break;
 800ea04:	46c0      	nop			; (mov r8, r8)
 800ea06:	e002      	b.n	800ea0e <LmHandlerPackagesNotify+0xfe>
          break;
 800ea08:	46c0      	nop			; (mov r8, r8)
 800ea0a:	e000      	b.n	800ea0e <LmHandlerPackagesNotify+0xfe>
          break;
 800ea0c:	46c0      	nop			; (mov r8, r8)
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 800ea0e:	210f      	movs	r1, #15
 800ea10:	187b      	adds	r3, r7, r1
 800ea12:	781b      	ldrb	r3, [r3, #0]
 800ea14:	b25b      	sxtb	r3, r3
 800ea16:	b2db      	uxtb	r3, r3
 800ea18:	3301      	adds	r3, #1
 800ea1a:	b2da      	uxtb	r2, r3
 800ea1c:	187b      	adds	r3, r7, r1
 800ea1e:	701a      	strb	r2, [r3, #0]
 800ea20:	230f      	movs	r3, #15
 800ea22:	18fb      	adds	r3, r7, r3
 800ea24:	781b      	ldrb	r3, [r3, #0]
 800ea26:	b25b      	sxtb	r3, r3
 800ea28:	2b04      	cmp	r3, #4
 800ea2a:	dc00      	bgt.n	800ea2e <LmHandlerPackagesNotify+0x11e>
 800ea2c:	e77c      	b.n	800e928 <LmHandlerPackagesNotify+0x18>
  }
}
 800ea2e:	46c0      	nop			; (mov r8, r8)
 800ea30:	46c0      	nop			; (mov r8, r8)
 800ea32:	46bd      	mov	sp, r7
 800ea34:	b004      	add	sp, #16
 800ea36:	bd80      	pop	{r7, pc}
 800ea38:	20000420 	.word	0x20000420

0800ea3c <DisplayClassUpdate>:

static void DisplayClassUpdate(DeviceClass_t deviceClass)
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b084      	sub	sp, #16
 800ea40:	af02      	add	r7, sp, #8
 800ea42:	0002      	movs	r2, r0
 800ea44:	1dfb      	adds	r3, r7, #7
 800ea46:	701a      	strb	r2, [r3, #0]
  MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800ea48:	1dfb      	adds	r3, r7, #7
 800ea4a:	781b      	ldrb	r3, [r3, #0]
 800ea4c:	4a06      	ldr	r2, [pc, #24]	; (800ea68 <DisplayClassUpdate+0x2c>)
 800ea4e:	5cd3      	ldrb	r3, [r2, r3]
 800ea50:	001a      	movs	r2, r3
 800ea52:	4b06      	ldr	r3, [pc, #24]	; (800ea6c <DisplayClassUpdate+0x30>)
 800ea54:	9200      	str	r2, [sp, #0]
 800ea56:	2200      	movs	r2, #0
 800ea58:	2100      	movs	r1, #0
 800ea5a:	2002      	movs	r0, #2
 800ea5c:	f00d fa0c 	bl	801be78 <UTIL_ADV_TRACE_COND_FSend>
}
 800ea60:	46c0      	nop			; (mov r8, r8)
 800ea62:	46bd      	mov	sp, r7
 800ea64:	b002      	add	sp, #8
 800ea66:	bd80      	pop	{r7, pc}
 800ea68:	0801f93c 	.word	0x0801f93c
 800ea6c:	0801f920 	.word	0x0801f920

0800ea70 <LmphCompliancePackageFactory>:
  .OnDeviceTimeRequest =        NULL,                           /* To be initialized by LmHandler */
};

/* Exported functions ---------------------------------------------------------*/
LmhPackage_t *LmphCompliancePackageFactory(void)
{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	af00      	add	r7, sp, #0
  return &LmhpCompliancePackage;
 800ea74:	4b01      	ldr	r3, [pc, #4]	; (800ea7c <LmphCompliancePackageFactory+0xc>)
}
 800ea76:	0018      	movs	r0, r3
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	bd80      	pop	{r7, pc}
 800ea7c:	20000178 	.word	0x20000178

0800ea80 <LmhpComplianceInit>:

/* Private  functions ---------------------------------------------------------*/
static void LmhpComplianceInit(void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize)
{
 800ea80:	b580      	push	{r7, lr}
 800ea82:	b084      	sub	sp, #16
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	60f8      	str	r0, [r7, #12]
 800ea88:	60b9      	str	r1, [r7, #8]
 800ea8a:	1dfb      	adds	r3, r7, #7
 800ea8c:	701a      	strb	r2, [r3, #0]
  if ((params != NULL) && (dataBuffer != NULL))
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d010      	beq.n	800eab6 <LmhpComplianceInit+0x36>
 800ea94:	68bb      	ldr	r3, [r7, #8]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d00d      	beq.n	800eab6 <LmhpComplianceInit+0x36>
  {
    LmhpComplianceParams = (LmhpComplianceParams_t *)params;
 800ea9a:	4b0c      	ldr	r3, [pc, #48]	; (800eacc <LmhpComplianceInit+0x4c>)
 800ea9c:	68fa      	ldr	r2, [r7, #12]
 800ea9e:	601a      	str	r2, [r3, #0]
    ComplianceTestState.DataBuffer = dataBuffer;
 800eaa0:	4b0b      	ldr	r3, [pc, #44]	; (800ead0 <LmhpComplianceInit+0x50>)
 800eaa2:	68ba      	ldr	r2, [r7, #8]
 800eaa4:	609a      	str	r2, [r3, #8]
    ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800eaa6:	4b0a      	ldr	r3, [pc, #40]	; (800ead0 <LmhpComplianceInit+0x50>)
 800eaa8:	1dfa      	adds	r2, r7, #7
 800eaaa:	7812      	ldrb	r2, [r2, #0]
 800eaac:	719a      	strb	r2, [r3, #6]
    ComplianceTestState.Initialized = true;
 800eaae:	4b08      	ldr	r3, [pc, #32]	; (800ead0 <LmhpComplianceInit+0x50>)
 800eab0:	2201      	movs	r2, #1
 800eab2:	701a      	strb	r2, [r3, #0]
 800eab4:	e006      	b.n	800eac4 <LmhpComplianceInit+0x44>
  }
  else
  {
    LmhpComplianceParams = NULL;
 800eab6:	4b05      	ldr	r3, [pc, #20]	; (800eacc <LmhpComplianceInit+0x4c>)
 800eab8:	2200      	movs	r2, #0
 800eaba:	601a      	str	r2, [r3, #0]
    ComplianceTestState.Initialized = false;
 800eabc:	4b04      	ldr	r3, [pc, #16]	; (800ead0 <LmhpComplianceInit+0x50>)
 800eabe:	2200      	movs	r2, #0
 800eac0:	701a      	strb	r2, [r3, #0]
  }
}
 800eac2:	46c0      	nop			; (mov r8, r8)
 800eac4:	46c0      	nop			; (mov r8, r8)
 800eac6:	46bd      	mov	sp, r7
 800eac8:	b004      	add	sp, #16
 800eaca:	bd80      	pop	{r7, pc}
 800eacc:	200005b4 	.word	0x200005b4
 800ead0:	200005a0 	.word	0x200005a0

0800ead4 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized(void)
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	af00      	add	r7, sp, #0
  return ComplianceTestState.Initialized;
 800ead8:	4b02      	ldr	r3, [pc, #8]	; (800eae4 <LmhpComplianceIsInitialized+0x10>)
 800eada:	781b      	ldrb	r3, [r3, #0]
}
 800eadc:	0018      	movs	r0, r3
 800eade:	46bd      	mov	sp, r7
 800eae0:	bd80      	pop	{r7, pc}
 800eae2:	46c0      	nop			; (mov r8, r8)
 800eae4:	200005a0 	.word	0x200005a0

0800eae8 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning(void)
{
 800eae8:	b580      	push	{r7, lr}
 800eaea:	af00      	add	r7, sp, #0
  if (ComplianceTestState.Initialized == false)
 800eaec:	4b06      	ldr	r3, [pc, #24]	; (800eb08 <LmhpComplianceIsRunning+0x20>)
 800eaee:	781b      	ldrb	r3, [r3, #0]
 800eaf0:	2201      	movs	r2, #1
 800eaf2:	4053      	eors	r3, r2
 800eaf4:	b2db      	uxtb	r3, r3
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d001      	beq.n	800eafe <LmhpComplianceIsRunning+0x16>
  {
    return false;
 800eafa:	2300      	movs	r3, #0
 800eafc:	e001      	b.n	800eb02 <LmhpComplianceIsRunning+0x1a>
  }

  return ComplianceTestState.IsRunning;
 800eafe:	4b02      	ldr	r3, [pc, #8]	; (800eb08 <LmhpComplianceIsRunning+0x20>)
 800eb00:	785b      	ldrb	r3, [r3, #1]
}
 800eb02:	0018      	movs	r0, r3
 800eb04:	46bd      	mov	sp, r7
 800eb06:	bd80      	pop	{r7, pc}
 800eb08:	200005a0 	.word	0x200005a0

0800eb0c <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm(McpsConfirm_t *mcpsConfirm)
{
 800eb0c:	b580      	push	{r7, lr}
 800eb0e:	b082      	sub	sp, #8
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	6078      	str	r0, [r7, #4]
  if (ComplianceTestState.Initialized == false)
 800eb14:	4b0e      	ldr	r3, [pc, #56]	; (800eb50 <LmhpComplianceOnMcpsConfirm+0x44>)
 800eb16:	781b      	ldrb	r3, [r3, #0]
 800eb18:	2201      	movs	r2, #1
 800eb1a:	4053      	eors	r3, r2
 800eb1c:	b2db      	uxtb	r3, r3
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d112      	bne.n	800eb48 <LmhpComplianceOnMcpsConfirm+0x3c>
  {
    return;
  }

  if ((ComplianceTestState.IsRunning == true) &&
 800eb22:	4b0b      	ldr	r3, [pc, #44]	; (800eb50 <LmhpComplianceOnMcpsConfirm+0x44>)
 800eb24:	785b      	ldrb	r3, [r3, #1]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d00f      	beq.n	800eb4a <LmhpComplianceOnMcpsConfirm+0x3e>
      (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	781b      	ldrb	r3, [r3, #0]
  if ((ComplianceTestState.IsRunning == true) &&
 800eb2e:	2b01      	cmp	r3, #1
 800eb30:	d10b      	bne.n	800eb4a <LmhpComplianceOnMcpsConfirm+0x3e>
      (mcpsConfirm->AckReceived != 0))
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	791b      	ldrb	r3, [r3, #4]
      (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d007      	beq.n	800eb4a <LmhpComplianceOnMcpsConfirm+0x3e>
  {
    /* Increment the compliance certification protocol downlink counter */
    ComplianceTestState.DownLinkCounter++;
 800eb3a:	4b05      	ldr	r3, [pc, #20]	; (800eb50 <LmhpComplianceOnMcpsConfirm+0x44>)
 800eb3c:	899b      	ldrh	r3, [r3, #12]
 800eb3e:	3301      	adds	r3, #1
 800eb40:	b29a      	uxth	r2, r3
 800eb42:	4b03      	ldr	r3, [pc, #12]	; (800eb50 <LmhpComplianceOnMcpsConfirm+0x44>)
 800eb44:	819a      	strh	r2, [r3, #12]
 800eb46:	e000      	b.n	800eb4a <LmhpComplianceOnMcpsConfirm+0x3e>
    return;
 800eb48:	46c0      	nop			; (mov r8, r8)
  }
}
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	b002      	add	sp, #8
 800eb4e:	bd80      	pop	{r7, pc}
 800eb50:	200005a0 	.word	0x200005a0

0800eb54 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm(MlmeConfirm_t *mlmeConfirm)
{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b082      	sub	sp, #8
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]
  if (ComplianceTestState.Initialized == false)
 800eb5c:	4b0d      	ldr	r3, [pc, #52]	; (800eb94 <LmhpComplianceOnMlmeConfirm+0x40>)
 800eb5e:	781b      	ldrb	r3, [r3, #0]
 800eb60:	2201      	movs	r2, #1
 800eb62:	4053      	eors	r3, r2
 800eb64:	b2db      	uxtb	r3, r3
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d10f      	bne.n	800eb8a <LmhpComplianceOnMlmeConfirm+0x36>
  {
    return;
  }

  if (mlmeConfirm->MlmeRequest == MLME_LINK_CHECK)
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	781b      	ldrb	r3, [r3, #0]
 800eb6e:	2b04      	cmp	r3, #4
 800eb70:	d10c      	bne.n	800eb8c <LmhpComplianceOnMlmeConfirm+0x38>
  {
    ComplianceTestState.LinkCheck = true;
 800eb72:	4b08      	ldr	r3, [pc, #32]	; (800eb94 <LmhpComplianceOnMlmeConfirm+0x40>)
 800eb74:	2201      	movs	r2, #1
 800eb76:	739a      	strb	r2, [r3, #14]
    ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	7a1a      	ldrb	r2, [r3, #8]
 800eb7c:	4b05      	ldr	r3, [pc, #20]	; (800eb94 <LmhpComplianceOnMlmeConfirm+0x40>)
 800eb7e:	73da      	strb	r2, [r3, #15]
    ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	7a5a      	ldrb	r2, [r3, #9]
 800eb84:	4b03      	ldr	r3, [pc, #12]	; (800eb94 <LmhpComplianceOnMlmeConfirm+0x40>)
 800eb86:	741a      	strb	r2, [r3, #16]
 800eb88:	e000      	b.n	800eb8c <LmhpComplianceOnMlmeConfirm+0x38>
    return;
 800eb8a:	46c0      	nop			; (mov r8, r8)
  }
}
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	b002      	add	sp, #8
 800eb90:	bd80      	pop	{r7, pc}
 800eb92:	46c0      	nop			; (mov r8, r8)
 800eb94:	200005a0 	.word	0x200005a0

0800eb98 <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess(void)
{
 800eb98:	b5b0      	push	{r4, r5, r7, lr}
 800eb9a:	b084      	sub	sp, #16
 800eb9c:	af00      	add	r7, sp, #0
  if (ComplianceTestState.Initialized == false)
 800eb9e:	4b32      	ldr	r3, [pc, #200]	; (800ec68 <LmhpComplianceTxProcess+0xd0>)
 800eba0:	781b      	ldrb	r3, [r3, #0]
 800eba2:	2201      	movs	r2, #1
 800eba4:	4053      	eors	r3, r2
 800eba6:	b2db      	uxtb	r3, r3
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d002      	beq.n	800ebb2 <LmhpComplianceTxProcess+0x1a>
  {
    return LORAMAC_HANDLER_ERROR;
 800ebac:	2301      	movs	r3, #1
 800ebae:	425b      	negs	r3, r3
 800ebb0:	e056      	b.n	800ec60 <LmhpComplianceTxProcess+0xc8>
  }

  if (ComplianceTestState.LinkCheck == true)
 800ebb2:	4b2d      	ldr	r3, [pc, #180]	; (800ec68 <LmhpComplianceTxProcess+0xd0>)
 800ebb4:	7b9b      	ldrb	r3, [r3, #14]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d019      	beq.n	800ebee <LmhpComplianceTxProcess+0x56>
  {
    ComplianceTestState.LinkCheck = false;
 800ebba:	4b2b      	ldr	r3, [pc, #172]	; (800ec68 <LmhpComplianceTxProcess+0xd0>)
 800ebbc:	2200      	movs	r2, #0
 800ebbe:	739a      	strb	r2, [r3, #14]
    ComplianceTestState.DataBufferSize = 3;
 800ebc0:	4b29      	ldr	r3, [pc, #164]	; (800ec68 <LmhpComplianceTxProcess+0xd0>)
 800ebc2:	2203      	movs	r2, #3
 800ebc4:	71da      	strb	r2, [r3, #7]
    ComplianceTestState.DataBuffer[0] = 5;
 800ebc6:	4b28      	ldr	r3, [pc, #160]	; (800ec68 <LmhpComplianceTxProcess+0xd0>)
 800ebc8:	689b      	ldr	r3, [r3, #8]
 800ebca:	2205      	movs	r2, #5
 800ebcc:	701a      	strb	r2, [r3, #0]
    ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 800ebce:	4b26      	ldr	r3, [pc, #152]	; (800ec68 <LmhpComplianceTxProcess+0xd0>)
 800ebd0:	689b      	ldr	r3, [r3, #8]
 800ebd2:	3301      	adds	r3, #1
 800ebd4:	4a24      	ldr	r2, [pc, #144]	; (800ec68 <LmhpComplianceTxProcess+0xd0>)
 800ebd6:	7bd2      	ldrb	r2, [r2, #15]
 800ebd8:	701a      	strb	r2, [r3, #0]
    ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 800ebda:	4b23      	ldr	r3, [pc, #140]	; (800ec68 <LmhpComplianceTxProcess+0xd0>)
 800ebdc:	689b      	ldr	r3, [r3, #8]
 800ebde:	3302      	adds	r3, #2
 800ebe0:	4a21      	ldr	r2, [pc, #132]	; (800ec68 <LmhpComplianceTxProcess+0xd0>)
 800ebe2:	7c12      	ldrb	r2, [r2, #16]
 800ebe4:	701a      	strb	r2, [r3, #0]
    ComplianceTestState.State = 1;
 800ebe6:	4b20      	ldr	r3, [pc, #128]	; (800ec68 <LmhpComplianceTxProcess+0xd0>)
 800ebe8:	2201      	movs	r2, #1
 800ebea:	709a      	strb	r2, [r3, #2]
 800ebec:	e01c      	b.n	800ec28 <LmhpComplianceTxProcess+0x90>
  }
  else
  {
    switch (ComplianceTestState.State)
 800ebee:	4b1e      	ldr	r3, [pc, #120]	; (800ec68 <LmhpComplianceTxProcess+0xd0>)
 800ebf0:	789b      	ldrb	r3, [r3, #2]
 800ebf2:	2b01      	cmp	r3, #1
 800ebf4:	d005      	beq.n	800ec02 <LmhpComplianceTxProcess+0x6a>
 800ebf6:	2b04      	cmp	r3, #4
 800ebf8:	d116      	bne.n	800ec28 <LmhpComplianceTxProcess+0x90>
    {
      case 4:
        ComplianceTestState.State = 1;
 800ebfa:	4b1b      	ldr	r3, [pc, #108]	; (800ec68 <LmhpComplianceTxProcess+0xd0>)
 800ebfc:	2201      	movs	r2, #1
 800ebfe:	709a      	strb	r2, [r3, #2]
        break;
 800ec00:	e012      	b.n	800ec28 <LmhpComplianceTxProcess+0x90>
      case 1:
        ComplianceTestState.DataBufferSize = 2;
 800ec02:	4b19      	ldr	r3, [pc, #100]	; (800ec68 <LmhpComplianceTxProcess+0xd0>)
 800ec04:	2202      	movs	r2, #2
 800ec06:	71da      	strb	r2, [r3, #7]
        ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 800ec08:	4b17      	ldr	r3, [pc, #92]	; (800ec68 <LmhpComplianceTxProcess+0xd0>)
 800ec0a:	899b      	ldrh	r3, [r3, #12]
 800ec0c:	0a1b      	lsrs	r3, r3, #8
 800ec0e:	b29a      	uxth	r2, r3
 800ec10:	4b15      	ldr	r3, [pc, #84]	; (800ec68 <LmhpComplianceTxProcess+0xd0>)
 800ec12:	689b      	ldr	r3, [r3, #8]
 800ec14:	b2d2      	uxtb	r2, r2
 800ec16:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 800ec18:	4b13      	ldr	r3, [pc, #76]	; (800ec68 <LmhpComplianceTxProcess+0xd0>)
 800ec1a:	899a      	ldrh	r2, [r3, #12]
 800ec1c:	4b12      	ldr	r3, [pc, #72]	; (800ec68 <LmhpComplianceTxProcess+0xd0>)
 800ec1e:	689b      	ldr	r3, [r3, #8]
 800ec20:	3301      	adds	r3, #1
 800ec22:	b2d2      	uxtb	r2, r2
 800ec24:	701a      	strb	r2, [r3, #0]
        break;
 800ec26:	46c0      	nop			; (mov r8, r8)
    }
  }
  LmHandlerAppData_t appData =
 800ec28:	2508      	movs	r5, #8
 800ec2a:	197b      	adds	r3, r7, r5
 800ec2c:	22e0      	movs	r2, #224	; 0xe0
 800ec2e:	701a      	strb	r2, [r3, #0]
  {
    .Buffer = ComplianceTestState.DataBuffer,
    .BufferSize = ComplianceTestState.DataBufferSize,
 800ec30:	4b0d      	ldr	r3, [pc, #52]	; (800ec68 <LmhpComplianceTxProcess+0xd0>)
 800ec32:	79da      	ldrb	r2, [r3, #7]
  LmHandlerAppData_t appData =
 800ec34:	197b      	adds	r3, r7, r5
 800ec36:	705a      	strb	r2, [r3, #1]
    .Buffer = ComplianceTestState.DataBuffer,
 800ec38:	4b0b      	ldr	r3, [pc, #44]	; (800ec68 <LmhpComplianceTxProcess+0xd0>)
 800ec3a:	689a      	ldr	r2, [r3, #8]
  LmHandlerAppData_t appData =
 800ec3c:	197b      	adds	r3, r7, r5
 800ec3e:	605a      	str	r2, [r3, #4]
    .Port = COMPLIANCE_PORT
  };
  TimerTime_t nextTxIn = 0;
 800ec40:	2300      	movs	r3, #0
 800ec42:	607b      	str	r3, [r7, #4]

  /* Schedule next transmission */
  TimerStart(&ComplianceTxNextPacketTimer);
 800ec44:	4b09      	ldr	r3, [pc, #36]	; (800ec6c <LmhpComplianceTxProcess+0xd4>)
 800ec46:	0018      	movs	r0, r3
 800ec48:	f00d ffe2 	bl	801cc10 <UTIL_TIMER_Start>

  return LmhpCompliancePackage.OnSendRequest(&appData, (LmHandlerMsgTypes_t)ComplianceTestState.IsTxConfirmed, &nextTxIn,
 800ec4c:	4b08      	ldr	r3, [pc, #32]	; (800ec70 <LmhpComplianceTxProcess+0xd8>)
 800ec4e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ec50:	4b05      	ldr	r3, [pc, #20]	; (800ec68 <LmhpComplianceTxProcess+0xd0>)
 800ec52:	791b      	ldrb	r3, [r3, #4]
 800ec54:	0019      	movs	r1, r3
 800ec56:	1d3a      	adds	r2, r7, #4
 800ec58:	1978      	adds	r0, r7, r5
 800ec5a:	2301      	movs	r3, #1
 800ec5c:	47a0      	blx	r4
 800ec5e:	0003      	movs	r3, r0
                                             true);
}
 800ec60:	0018      	movs	r0, r3
 800ec62:	46bd      	mov	sp, r7
 800ec64:	b004      	add	sp, #16
 800ec66:	bdb0      	pop	{r4, r5, r7, pc}
 800ec68:	200005a0 	.word	0x200005a0
 800ec6c:	20000588 	.word	0x20000588
 800ec70:	20000178 	.word	0x20000178

0800ec74 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication(McpsIndication_t *mcpsIndication)
{
 800ec74:	b580      	push	{r7, lr}
 800ec76:	b0a2      	sub	sp, #136	; 0x88
 800ec78:	af02      	add	r7, sp, #8
 800ec7a:	6078      	str	r0, [r7, #4]
  if (ComplianceTestState.Initialized == false)
 800ec7c:	4be1      	ldr	r3, [pc, #900]	; (800f004 <LmhpComplianceOnMcpsIndication+0x390>)
 800ec7e:	781b      	ldrb	r3, [r3, #0]
 800ec80:	2201      	movs	r2, #1
 800ec82:	4053      	eors	r3, r2
 800ec84:	b2db      	uxtb	r3, r3
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d000      	beq.n	800ec8c <LmhpComplianceOnMcpsIndication+0x18>
 800ec8a:	e1b2      	b.n	800eff2 <LmhpComplianceOnMcpsIndication+0x37e>
  {
    return;
  }

  if (mcpsIndication->RxData == false)
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	7b5b      	ldrb	r3, [r3, #13]
 800ec90:	2201      	movs	r2, #1
 800ec92:	4053      	eors	r3, r2
 800ec94:	b2db      	uxtb	r3, r3
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d000      	beq.n	800ec9c <LmhpComplianceOnMcpsIndication+0x28>
 800ec9a:	e1ac      	b.n	800eff6 <LmhpComplianceOnMcpsIndication+0x382>
  {
    return;
  }

  if ((ComplianceTestState.IsRunning == true) &&
 800ec9c:	4bd9      	ldr	r3, [pc, #868]	; (800f004 <LmhpComplianceOnMcpsIndication+0x390>)
 800ec9e:	785b      	ldrb	r3, [r3, #1]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d00c      	beq.n	800ecbe <LmhpComplianceOnMcpsIndication+0x4a>
      (mcpsIndication->AckReceived == 0))
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	7c9b      	ldrb	r3, [r3, #18]
 800eca8:	2201      	movs	r2, #1
 800ecaa:	4053      	eors	r3, r2
 800ecac:	b2db      	uxtb	r3, r3
  if ((ComplianceTestState.IsRunning == true) &&
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d005      	beq.n	800ecbe <LmhpComplianceOnMcpsIndication+0x4a>
  {
    /* Increment the compliance certification protocol downlink counter */
    ComplianceTestState.DownLinkCounter++;
 800ecb2:	4bd4      	ldr	r3, [pc, #848]	; (800f004 <LmhpComplianceOnMcpsIndication+0x390>)
 800ecb4:	899b      	ldrh	r3, [r3, #12]
 800ecb6:	3301      	adds	r3, #1
 800ecb8:	b29a      	uxth	r2, r3
 800ecba:	4bd2      	ldr	r3, [pc, #840]	; (800f004 <LmhpComplianceOnMcpsIndication+0x390>)
 800ecbc:	819a      	strh	r2, [r3, #12]
  }

  if (mcpsIndication->Port != COMPLIANCE_PORT)
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	78db      	ldrb	r3, [r3, #3]
 800ecc2:	2be0      	cmp	r3, #224	; 0xe0
 800ecc4:	d000      	beq.n	800ecc8 <LmhpComplianceOnMcpsIndication+0x54>
 800ecc6:	e198      	b.n	800effa <LmhpComplianceOnMcpsIndication+0x386>
  {
    return;
  }

  if (ComplianceTestState.IsRunning == false)
 800ecc8:	4bce      	ldr	r3, [pc, #824]	; (800f004 <LmhpComplianceOnMcpsIndication+0x390>)
 800ecca:	785b      	ldrb	r3, [r3, #1]
 800eccc:	2201      	movs	r2, #1
 800ecce:	4053      	eors	r3, r2
 800ecd0:	b2db      	uxtb	r3, r3
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d063      	beq.n	800ed9e <LmhpComplianceOnMcpsIndication+0x12a>
  {
    /* Check compliance test enable command (i) */
    if ((mcpsIndication->BufferSize == 4) &&
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	7b1b      	ldrb	r3, [r3, #12]
 800ecda:	2b04      	cmp	r3, #4
 800ecdc:	d000      	beq.n	800ece0 <LmhpComplianceOnMcpsIndication+0x6c>
 800ecde:	e1a0      	b.n	800f022 <LmhpComplianceOnMcpsIndication+0x3ae>
        (mcpsIndication->Buffer[0] == 0x01) &&
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	689b      	ldr	r3, [r3, #8]
 800ece4:	781b      	ldrb	r3, [r3, #0]
    if ((mcpsIndication->BufferSize == 4) &&
 800ece6:	2b01      	cmp	r3, #1
 800ece8:	d000      	beq.n	800ecec <LmhpComplianceOnMcpsIndication+0x78>
 800ecea:	e19a      	b.n	800f022 <LmhpComplianceOnMcpsIndication+0x3ae>
        (mcpsIndication->Buffer[1] == 0x01) &&
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	689b      	ldr	r3, [r3, #8]
 800ecf0:	3301      	adds	r3, #1
 800ecf2:	781b      	ldrb	r3, [r3, #0]
        (mcpsIndication->Buffer[0] == 0x01) &&
 800ecf4:	2b01      	cmp	r3, #1
 800ecf6:	d000      	beq.n	800ecfa <LmhpComplianceOnMcpsIndication+0x86>
 800ecf8:	e193      	b.n	800f022 <LmhpComplianceOnMcpsIndication+0x3ae>
        (mcpsIndication->Buffer[2] == 0x01) &&
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	689b      	ldr	r3, [r3, #8]
 800ecfe:	3302      	adds	r3, #2
 800ed00:	781b      	ldrb	r3, [r3, #0]
        (mcpsIndication->Buffer[1] == 0x01) &&
 800ed02:	2b01      	cmp	r3, #1
 800ed04:	d000      	beq.n	800ed08 <LmhpComplianceOnMcpsIndication+0x94>
 800ed06:	e18c      	b.n	800f022 <LmhpComplianceOnMcpsIndication+0x3ae>
        (mcpsIndication->Buffer[3] == 0x01))
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	689b      	ldr	r3, [r3, #8]
 800ed0c:	3303      	adds	r3, #3
 800ed0e:	781b      	ldrb	r3, [r3, #0]
        (mcpsIndication->Buffer[2] == 0x01) &&
 800ed10:	2b01      	cmp	r3, #1
 800ed12:	d000      	beq.n	800ed16 <LmhpComplianceOnMcpsIndication+0xa2>
 800ed14:	e185      	b.n	800f022 <LmhpComplianceOnMcpsIndication+0x3ae>
    {
      MibRequestConfirm_t mibReq;

      /* Initialize compliance test mode context */
      ComplianceTestState.IsTxConfirmed = false;
 800ed16:	4bbb      	ldr	r3, [pc, #748]	; (800f004 <LmhpComplianceOnMcpsIndication+0x390>)
 800ed18:	2200      	movs	r2, #0
 800ed1a:	711a      	strb	r2, [r3, #4]
      ComplianceTestState.Port = 224;
 800ed1c:	4bb9      	ldr	r3, [pc, #740]	; (800f004 <LmhpComplianceOnMcpsIndication+0x390>)
 800ed1e:	22e0      	movs	r2, #224	; 0xe0
 800ed20:	715a      	strb	r2, [r3, #5]
      ComplianceTestState.DataBufferSize = 2;
 800ed22:	4bb8      	ldr	r3, [pc, #736]	; (800f004 <LmhpComplianceOnMcpsIndication+0x390>)
 800ed24:	2202      	movs	r2, #2
 800ed26:	71da      	strb	r2, [r3, #7]
      ComplianceTestState.DownLinkCounter = 0;
 800ed28:	4bb6      	ldr	r3, [pc, #728]	; (800f004 <LmhpComplianceOnMcpsIndication+0x390>)
 800ed2a:	2200      	movs	r2, #0
 800ed2c:	819a      	strh	r2, [r3, #12]
      ComplianceTestState.LinkCheck = false;
 800ed2e:	4bb5      	ldr	r3, [pc, #724]	; (800f004 <LmhpComplianceOnMcpsIndication+0x390>)
 800ed30:	2200      	movs	r2, #0
 800ed32:	739a      	strb	r2, [r3, #14]
      ComplianceTestState.DemodMargin = 0;
 800ed34:	4bb3      	ldr	r3, [pc, #716]	; (800f004 <LmhpComplianceOnMcpsIndication+0x390>)
 800ed36:	2200      	movs	r2, #0
 800ed38:	73da      	strb	r2, [r3, #15]
      ComplianceTestState.NbGateways = 0;
 800ed3a:	4bb2      	ldr	r3, [pc, #712]	; (800f004 <LmhpComplianceOnMcpsIndication+0x390>)
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	741a      	strb	r2, [r3, #16]
      ComplianceTestState.IsRunning = true;
 800ed40:	4bb0      	ldr	r3, [pc, #704]	; (800f004 <LmhpComplianceOnMcpsIndication+0x390>)
 800ed42:	2201      	movs	r2, #1
 800ed44:	705a      	strb	r2, [r3, #1]
      ComplianceTestState.State = 1;
 800ed46:	4baf      	ldr	r3, [pc, #700]	; (800f004 <LmhpComplianceOnMcpsIndication+0x390>)
 800ed48:	2201      	movs	r2, #1
 800ed4a:	709a      	strb	r2, [r3, #2]

      /* Enable ADR while in compliance test mode */
      mibReq.Type = MIB_ADR;
 800ed4c:	2108      	movs	r1, #8
 800ed4e:	187b      	adds	r3, r7, r1
 800ed50:	2204      	movs	r2, #4
 800ed52:	701a      	strb	r2, [r3, #0]
      mibReq.Param.AdrEnable = true;
 800ed54:	187b      	adds	r3, r7, r1
 800ed56:	2201      	movs	r2, #1
 800ed58:	711a      	strb	r2, [r3, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 800ed5a:	187b      	adds	r3, r7, r1
 800ed5c:	0018      	movs	r0, r3
 800ed5e:	f004 fe57 	bl	8013a10 <LoRaMacMibSetRequestConfirm>

      /* Disable duty cycle enforcement while in compliance test mode */
      LoRaMacTestSetDutyCycleOn(false);
 800ed62:	2000      	movs	r0, #0
 800ed64:	f005 fc80 	bl	8014668 <LoRaMacTestSetDutyCycleOn>

      /* Stop peripherals */
      if (LmhpComplianceParams->StopPeripherals != NULL)
 800ed68:	4ba7      	ldr	r3, [pc, #668]	; (800f008 <LmhpComplianceOnMcpsIndication+0x394>)
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	685b      	ldr	r3, [r3, #4]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d003      	beq.n	800ed7a <LmhpComplianceOnMcpsIndication+0x106>
      {
        LmhpComplianceParams->StopPeripherals();
 800ed72:	4ba5      	ldr	r3, [pc, #660]	; (800f008 <LmhpComplianceOnMcpsIndication+0x394>)
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	685b      	ldr	r3, [r3, #4]
 800ed78:	4798      	blx	r3
      }
      /* Initialize compliance protocol transmission timer */
      TimerInit(&ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent);
 800ed7a:	4ba4      	ldr	r3, [pc, #656]	; (800f00c <LmhpComplianceOnMcpsIndication+0x398>)
 800ed7c:	2201      	movs	r2, #1
 800ed7e:	4251      	negs	r1, r2
 800ed80:	48a3      	ldr	r0, [pc, #652]	; (800f010 <LmhpComplianceOnMcpsIndication+0x39c>)
 800ed82:	2200      	movs	r2, #0
 800ed84:	9200      	str	r2, [sp, #0]
 800ed86:	2200      	movs	r2, #0
 800ed88:	f00d ff0a 	bl	801cba0 <UTIL_TIMER_Create>
      TimerSetValue(&ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE);
 800ed8c:	4aa1      	ldr	r2, [pc, #644]	; (800f014 <LmhpComplianceOnMcpsIndication+0x3a0>)
 800ed8e:	4ba0      	ldr	r3, [pc, #640]	; (800f010 <LmhpComplianceOnMcpsIndication+0x39c>)
 800ed90:	0011      	movs	r1, r2
 800ed92:	0018      	movs	r0, r3
 800ed94:	f00e f82c 	bl	801cdf0 <UTIL_TIMER_SetPeriod>

      /* Confirm compliance test protocol activation */
      LmhpComplianceTxProcess();
 800ed98:	f7ff fefe 	bl	800eb98 <LmhpComplianceTxProcess>
 800ed9c:	e141      	b.n	800f022 <LmhpComplianceOnMcpsIndication+0x3ae>
    }
  }
  else
  {
    /* Parse compliance test protocol */
    ComplianceTestState.State = mcpsIndication->Buffer[0];
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	689b      	ldr	r3, [r3, #8]
 800eda2:	781a      	ldrb	r2, [r3, #0]
 800eda4:	4b97      	ldr	r3, [pc, #604]	; (800f004 <LmhpComplianceOnMcpsIndication+0x390>)
 800eda6:	709a      	strb	r2, [r3, #2]
    switch (ComplianceTestState.State)
 800eda8:	4b96      	ldr	r3, [pc, #600]	; (800f004 <LmhpComplianceOnMcpsIndication+0x390>)
 800edaa:	789b      	ldrb	r3, [r3, #2]
 800edac:	2b0a      	cmp	r3, #10
 800edae:	d900      	bls.n	800edb2 <LmhpComplianceOnMcpsIndication+0x13e>
 800edb0:	e125      	b.n	800effe <LmhpComplianceOnMcpsIndication+0x38a>
 800edb2:	009a      	lsls	r2, r3, #2
 800edb4:	4b98      	ldr	r3, [pc, #608]	; (800f018 <LmhpComplianceOnMcpsIndication+0x3a4>)
 800edb6:	18d3      	adds	r3, r2, r3
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	469f      	mov	pc, r3
    {
      case 0: /* Check compliance test disable command (ii) */
      {
        MibRequestConfirm_t mibReq;

        TimerStop(&ComplianceTxNextPacketTimer);
 800edbc:	4b94      	ldr	r3, [pc, #592]	; (800f010 <LmhpComplianceOnMcpsIndication+0x39c>)
 800edbe:	0018      	movs	r0, r3
 800edc0:	f00d ff9e 	bl	801cd00 <UTIL_TIMER_Stop>

        /* Disable compliance test mode and reset the downlink counter. */
        ComplianceTestState.DownLinkCounter = 0;
 800edc4:	4b8f      	ldr	r3, [pc, #572]	; (800f004 <LmhpComplianceOnMcpsIndication+0x390>)
 800edc6:	2200      	movs	r2, #0
 800edc8:	819a      	strh	r2, [r3, #12]
        ComplianceTestState.IsRunning = false;
 800edca:	4b8e      	ldr	r3, [pc, #568]	; (800f004 <LmhpComplianceOnMcpsIndication+0x390>)
 800edcc:	2200      	movs	r2, #0
 800edce:	705a      	strb	r2, [r3, #1]

        /* Restore previous ADR seeting */
        mibReq.Type = MIB_ADR;
 800edd0:	2108      	movs	r1, #8
 800edd2:	187b      	adds	r3, r7, r1
 800edd4:	2204      	movs	r2, #4
 800edd6:	701a      	strb	r2, [r3, #0]
        mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800edd8:	4b8b      	ldr	r3, [pc, #556]	; (800f008 <LmhpComplianceOnMcpsIndication+0x394>)
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	781a      	ldrb	r2, [r3, #0]
 800edde:	187b      	adds	r3, r7, r1
 800ede0:	711a      	strb	r2, [r3, #4]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800ede2:	187b      	adds	r3, r7, r1
 800ede4:	0018      	movs	r0, r3
 800ede6:	f004 fe13 	bl	8013a10 <LoRaMacMibSetRequestConfirm>

        /* Enable duty cycle enforcement */
        LoRaMacTestSetDutyCycleOn(LmhpComplianceParams->DutyCycleEnabled);
 800edea:	4b87      	ldr	r3, [pc, #540]	; (800f008 <LmhpComplianceOnMcpsIndication+0x394>)
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	785b      	ldrb	r3, [r3, #1]
 800edf0:	0018      	movs	r0, r3
 800edf2:	f005 fc39 	bl	8014668 <LoRaMacTestSetDutyCycleOn>

        /* Restart peripherals */
        if (LmhpComplianceParams->StartPeripherals != NULL)
 800edf6:	4b84      	ldr	r3, [pc, #528]	; (800f008 <LmhpComplianceOnMcpsIndication+0x394>)
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	689b      	ldr	r3, [r3, #8]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d100      	bne.n	800ee02 <LmhpComplianceOnMcpsIndication+0x18e>
 800ee00:	e10e      	b.n	800f020 <LmhpComplianceOnMcpsIndication+0x3ac>
        {
          LmhpComplianceParams->StartPeripherals();
 800ee02:	4b81      	ldr	r3, [pc, #516]	; (800f008 <LmhpComplianceOnMcpsIndication+0x394>)
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	689b      	ldr	r3, [r3, #8]
 800ee08:	4798      	blx	r3
        }
      }
      break;
 800ee0a:	e109      	b.n	800f020 <LmhpComplianceOnMcpsIndication+0x3ac>
      case 1: /* (iii, iv) */
        ComplianceTestState.DataBufferSize = 2;
 800ee0c:	4b7d      	ldr	r3, [pc, #500]	; (800f004 <LmhpComplianceOnMcpsIndication+0x390>)
 800ee0e:	2202      	movs	r2, #2
 800ee10:	71da      	strb	r2, [r3, #7]
        break;
 800ee12:	e106      	b.n	800f022 <LmhpComplianceOnMcpsIndication+0x3ae>
      case 2: /* Enable confirmed messages (v) */
        ComplianceTestState.IsTxConfirmed = true;
 800ee14:	4b7b      	ldr	r3, [pc, #492]	; (800f004 <LmhpComplianceOnMcpsIndication+0x390>)
 800ee16:	2201      	movs	r2, #1
 800ee18:	711a      	strb	r2, [r3, #4]
        ComplianceTestState.State = 1;
 800ee1a:	4b7a      	ldr	r3, [pc, #488]	; (800f004 <LmhpComplianceOnMcpsIndication+0x390>)
 800ee1c:	2201      	movs	r2, #1
 800ee1e:	709a      	strb	r2, [r3, #2]
        break;
 800ee20:	e0ff      	b.n	800f022 <LmhpComplianceOnMcpsIndication+0x3ae>
      case 3:  /* Disable confirmed messages (vi) */
        ComplianceTestState.IsTxConfirmed = false;
 800ee22:	4b78      	ldr	r3, [pc, #480]	; (800f004 <LmhpComplianceOnMcpsIndication+0x390>)
 800ee24:	2200      	movs	r2, #0
 800ee26:	711a      	strb	r2, [r3, #4]
        ComplianceTestState.State = 1;
 800ee28:	4b76      	ldr	r3, [pc, #472]	; (800f004 <LmhpComplianceOnMcpsIndication+0x390>)
 800ee2a:	2201      	movs	r2, #1
 800ee2c:	709a      	strb	r2, [r3, #2]
        break;
 800ee2e:	e0f8      	b.n	800f022 <LmhpComplianceOnMcpsIndication+0x3ae>
      case 4: /* (vii) */
        ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	7b1a      	ldrb	r2, [r3, #12]
 800ee34:	4b73      	ldr	r3, [pc, #460]	; (800f004 <LmhpComplianceOnMcpsIndication+0x390>)
 800ee36:	71da      	strb	r2, [r3, #7]

        ComplianceTestState.DataBuffer[0] = 4;
 800ee38:	4b72      	ldr	r3, [pc, #456]	; (800f004 <LmhpComplianceOnMcpsIndication+0x390>)
 800ee3a:	689b      	ldr	r3, [r3, #8]
 800ee3c:	2204      	movs	r2, #4
 800ee3e:	701a      	strb	r2, [r3, #0]
        for (uint8_t i = 1; i < MIN(ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize); i++)
 800ee40:	237f      	movs	r3, #127	; 0x7f
 800ee42:	18fb      	adds	r3, r7, r3
 800ee44:	2201      	movs	r2, #1
 800ee46:	701a      	strb	r2, [r3, #0]
 800ee48:	e013      	b.n	800ee72 <LmhpComplianceOnMcpsIndication+0x1fe>
        {
          ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	689a      	ldr	r2, [r3, #8]
 800ee4e:	207f      	movs	r0, #127	; 0x7f
 800ee50:	183b      	adds	r3, r7, r0
 800ee52:	781b      	ldrb	r3, [r3, #0]
 800ee54:	18d3      	adds	r3, r2, r3
 800ee56:	781a      	ldrb	r2, [r3, #0]
 800ee58:	4b6a      	ldr	r3, [pc, #424]	; (800f004 <LmhpComplianceOnMcpsIndication+0x390>)
 800ee5a:	6899      	ldr	r1, [r3, #8]
 800ee5c:	183b      	adds	r3, r7, r0
 800ee5e:	781b      	ldrb	r3, [r3, #0]
 800ee60:	18cb      	adds	r3, r1, r3
 800ee62:	3201      	adds	r2, #1
 800ee64:	b2d2      	uxtb	r2, r2
 800ee66:	701a      	strb	r2, [r3, #0]
        for (uint8_t i = 1; i < MIN(ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize); i++)
 800ee68:	183b      	adds	r3, r7, r0
 800ee6a:	781a      	ldrb	r2, [r3, #0]
 800ee6c:	183b      	adds	r3, r7, r0
 800ee6e:	3201      	adds	r2, #1
 800ee70:	701a      	strb	r2, [r3, #0]
 800ee72:	4b64      	ldr	r3, [pc, #400]	; (800f004 <LmhpComplianceOnMcpsIndication+0x390>)
 800ee74:	799a      	ldrb	r2, [r3, #6]
 800ee76:	4b63      	ldr	r3, [pc, #396]	; (800f004 <LmhpComplianceOnMcpsIndication+0x390>)
 800ee78:	79db      	ldrb	r3, [r3, #7]
 800ee7a:	1c18      	adds	r0, r3, #0
 800ee7c:	1c11      	adds	r1, r2, #0
 800ee7e:	b2ca      	uxtb	r2, r1
 800ee80:	b2c3      	uxtb	r3, r0
 800ee82:	429a      	cmp	r2, r3
 800ee84:	d900      	bls.n	800ee88 <LmhpComplianceOnMcpsIndication+0x214>
 800ee86:	1c01      	adds	r1, r0, #0
 800ee88:	b2cb      	uxtb	r3, r1
 800ee8a:	227f      	movs	r2, #127	; 0x7f
 800ee8c:	18ba      	adds	r2, r7, r2
 800ee8e:	7812      	ldrb	r2, [r2, #0]
 800ee90:	429a      	cmp	r2, r3
 800ee92:	d3da      	bcc.n	800ee4a <LmhpComplianceOnMcpsIndication+0x1d6>
        }
        break;
 800ee94:	e0c5      	b.n	800f022 <LmhpComplianceOnMcpsIndication+0x3ae>
      case 5: /* (viii) */
      {
        MlmeReq_t mlmeReq;

        mlmeReq.Type = MLME_LINK_CHECK;
 800ee96:	2168      	movs	r1, #104	; 0x68
 800ee98:	187b      	adds	r3, r7, r1
 800ee9a:	2204      	movs	r2, #4
 800ee9c:	701a      	strb	r2, [r3, #0]

        LoRaMacMlmeRequest(&mlmeReq);
 800ee9e:	187b      	adds	r3, r7, r1
 800eea0:	0018      	movs	r0, r3
 800eea2:	f005 f93b 	bl	801411c <LoRaMacMlmeRequest>
      }
      break;
 800eea6:	e0bc      	b.n	800f022 <LmhpComplianceOnMcpsIndication+0x3ae>
      case 6: /* (ix) */
      {
        MibRequestConfirm_t mibReq;

        TimerStop(&ComplianceTxNextPacketTimer);
 800eea8:	4b59      	ldr	r3, [pc, #356]	; (800f010 <LmhpComplianceOnMcpsIndication+0x39c>)
 800eeaa:	0018      	movs	r0, r3
 800eeac:	f00d ff28 	bl	801cd00 <UTIL_TIMER_Stop>

        /* Disable TestMode and revert back to normal operation */
        /* Disable compliance test mode and reset the downlink counter. */
        ComplianceTestState.DownLinkCounter = 0;
 800eeb0:	4b54      	ldr	r3, [pc, #336]	; (800f004 <LmhpComplianceOnMcpsIndication+0x390>)
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	819a      	strh	r2, [r3, #12]
        ComplianceTestState.IsRunning = false;
 800eeb6:	4b53      	ldr	r3, [pc, #332]	; (800f004 <LmhpComplianceOnMcpsIndication+0x390>)
 800eeb8:	2200      	movs	r2, #0
 800eeba:	705a      	strb	r2, [r3, #1]

        /* Restore previous ADR seeting */
        mibReq.Type = MIB_ADR;
 800eebc:	2108      	movs	r1, #8
 800eebe:	187b      	adds	r3, r7, r1
 800eec0:	2204      	movs	r2, #4
 800eec2:	701a      	strb	r2, [r3, #0]
        mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800eec4:	4b50      	ldr	r3, [pc, #320]	; (800f008 <LmhpComplianceOnMcpsIndication+0x394>)
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	781a      	ldrb	r2, [r3, #0]
 800eeca:	187b      	adds	r3, r7, r1
 800eecc:	711a      	strb	r2, [r3, #4]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800eece:	187b      	adds	r3, r7, r1
 800eed0:	0018      	movs	r0, r3
 800eed2:	f004 fd9d 	bl	8013a10 <LoRaMacMibSetRequestConfirm>

        /* Enable duty cycle enforcement */
        LoRaMacTestSetDutyCycleOn(LmhpComplianceParams->DutyCycleEnabled);
 800eed6:	4b4c      	ldr	r3, [pc, #304]	; (800f008 <LmhpComplianceOnMcpsIndication+0x394>)
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	785b      	ldrb	r3, [r3, #1]
 800eedc:	0018      	movs	r0, r3
 800eede:	f005 fbc3 	bl	8014668 <LoRaMacTestSetDutyCycleOn>

        /* Restart peripherals */
        if (LmhpComplianceParams->StartPeripherals != NULL)
 800eee2:	4b49      	ldr	r3, [pc, #292]	; (800f008 <LmhpComplianceOnMcpsIndication+0x394>)
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	689b      	ldr	r3, [r3, #8]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d003      	beq.n	800eef4 <LmhpComplianceOnMcpsIndication+0x280>
        {
          LmhpComplianceParams->StartPeripherals();
 800eeec:	4b46      	ldr	r3, [pc, #280]	; (800f008 <LmhpComplianceOnMcpsIndication+0x394>)
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	689b      	ldr	r3, [r3, #8]
 800eef2:	4798      	blx	r3
        }

        LmhpCompliancePackage.OnJoinRequest(ACTIVATION_TYPE_OTAA);
 800eef4:	4b49      	ldr	r3, [pc, #292]	; (800f01c <LmhpComplianceOnMcpsIndication+0x3a8>)
 800eef6:	6a1b      	ldr	r3, [r3, #32]
 800eef8:	2002      	movs	r0, #2
 800eefa:	4798      	blx	r3
      }
      break;
 800eefc:	e091      	b.n	800f022 <LmhpComplianceOnMcpsIndication+0x3ae>
      case 7: /* (x) */
      {
        MlmeReq_t mlmeReq;
        if (mcpsIndication->BufferSize == 3)
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	7b1b      	ldrb	r3, [r3, #12]
 800ef02:	2b03      	cmp	r3, #3
 800ef04:	d114      	bne.n	800ef30 <LmhpComplianceOnMcpsIndication+0x2bc>
        {
          mlmeReq.Type = MLME_TXCW;
 800ef06:	2154      	movs	r1, #84	; 0x54
 800ef08:	187b      	adds	r3, r7, r1
 800ef0a:	2205      	movs	r2, #5
 800ef0c:	701a      	strb	r2, [r3, #0]
          mlmeReq.Req.TxCw.Timeout = (uint16_t)((mcpsIndication->Buffer[1] << 8) | mcpsIndication->Buffer[2]);
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	689b      	ldr	r3, [r3, #8]
 800ef12:	3301      	adds	r3, #1
 800ef14:	781b      	ldrb	r3, [r3, #0]
 800ef16:	021b      	lsls	r3, r3, #8
 800ef18:	b21a      	sxth	r2, r3
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	689b      	ldr	r3, [r3, #8]
 800ef1e:	3302      	adds	r3, #2
 800ef20:	781b      	ldrb	r3, [r3, #0]
 800ef22:	b21b      	sxth	r3, r3
 800ef24:	4313      	orrs	r3, r2
 800ef26:	b21b      	sxth	r3, r3
 800ef28:	b29a      	uxth	r2, r3
 800ef2a:	187b      	adds	r3, r7, r1
 800ef2c:	809a      	strh	r2, [r3, #4]
 800ef2e:	e031      	b.n	800ef94 <LmhpComplianceOnMcpsIndication+0x320>
        }
        else if (mcpsIndication->BufferSize == 7)
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	7b1b      	ldrb	r3, [r3, #12]
 800ef34:	2b07      	cmp	r3, #7
 800ef36:	d12d      	bne.n	800ef94 <LmhpComplianceOnMcpsIndication+0x320>
        {
          mlmeReq.Type = MLME_TXCW_1;
 800ef38:	2154      	movs	r1, #84	; 0x54
 800ef3a:	187b      	adds	r3, r7, r1
 800ef3c:	2206      	movs	r2, #6
 800ef3e:	701a      	strb	r2, [r3, #0]
          mlmeReq.Req.TxCw.Timeout = (uint16_t)((mcpsIndication->Buffer[1] << 8) | mcpsIndication->Buffer[2]);
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	689b      	ldr	r3, [r3, #8]
 800ef44:	3301      	adds	r3, #1
 800ef46:	781b      	ldrb	r3, [r3, #0]
 800ef48:	021b      	lsls	r3, r3, #8
 800ef4a:	b21a      	sxth	r2, r3
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	689b      	ldr	r3, [r3, #8]
 800ef50:	3302      	adds	r3, #2
 800ef52:	781b      	ldrb	r3, [r3, #0]
 800ef54:	b21b      	sxth	r3, r3
 800ef56:	4313      	orrs	r3, r2
 800ef58:	b21b      	sxth	r3, r3
 800ef5a:	b29a      	uxth	r2, r3
 800ef5c:	187b      	adds	r3, r7, r1
 800ef5e:	809a      	strh	r2, [r3, #4]
          mlmeReq.Req.TxCw.Frequency = (uint32_t)((mcpsIndication->Buffer[3] << 16) | (mcpsIndication->Buffer[4] << 8) | mcpsIndication->Buffer[5]) * 100;
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	689b      	ldr	r3, [r3, #8]
 800ef64:	3303      	adds	r3, #3
 800ef66:	781b      	ldrb	r3, [r3, #0]
 800ef68:	041a      	lsls	r2, r3, #16
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	689b      	ldr	r3, [r3, #8]
 800ef6e:	3304      	adds	r3, #4
 800ef70:	781b      	ldrb	r3, [r3, #0]
 800ef72:	021b      	lsls	r3, r3, #8
 800ef74:	431a      	orrs	r2, r3
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	689b      	ldr	r3, [r3, #8]
 800ef7a:	3305      	adds	r3, #5
 800ef7c:	781b      	ldrb	r3, [r3, #0]
 800ef7e:	4313      	orrs	r3, r2
 800ef80:	001a      	movs	r2, r3
 800ef82:	2364      	movs	r3, #100	; 0x64
 800ef84:	435a      	muls	r2, r3
 800ef86:	187b      	adds	r3, r7, r1
 800ef88:	609a      	str	r2, [r3, #8]
          mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	689b      	ldr	r3, [r3, #8]
 800ef8e:	799a      	ldrb	r2, [r3, #6]
 800ef90:	187b      	adds	r3, r7, r1
 800ef92:	731a      	strb	r2, [r3, #12]
        }
        LoRaMacMlmeRequest(&mlmeReq);
 800ef94:	2354      	movs	r3, #84	; 0x54
 800ef96:	18fb      	adds	r3, r7, r3
 800ef98:	0018      	movs	r0, r3
 800ef9a:	f005 f8bf 	bl	801411c <LoRaMacMlmeRequest>
        ComplianceTestState.State = 1;
 800ef9e:	4b19      	ldr	r3, [pc, #100]	; (800f004 <LmhpComplianceOnMcpsIndication+0x390>)
 800efa0:	2201      	movs	r2, #1
 800efa2:	709a      	strb	r2, [r3, #2]
      }
      break;
 800efa4:	e03d      	b.n	800f022 <LmhpComplianceOnMcpsIndication+0x3ae>
      case 8: /* Send DeviceTimeReq */
      {
        MlmeReq_t mlmeReq;

        mlmeReq.Type = MLME_DEVICE_TIME;
 800efa6:	2140      	movs	r1, #64	; 0x40
 800efa8:	187b      	adds	r3, r7, r1
 800efaa:	220a      	movs	r2, #10
 800efac:	701a      	strb	r2, [r3, #0]

        LoRaMacMlmeRequest(&mlmeReq);
 800efae:	187b      	adds	r3, r7, r1
 800efb0:	0018      	movs	r0, r3
 800efb2:	f005 f8b3 	bl	801411c <LoRaMacMlmeRequest>
      }
      break;
 800efb6:	e034      	b.n	800f022 <LmhpComplianceOnMcpsIndication+0x3ae>
      case 9: /* Switch end device Class */
      {
        MibRequestConfirm_t mibReq;

        mibReq.Type = MIB_DEVICE_CLASS;
 800efb8:	2108      	movs	r1, #8
 800efba:	187b      	adds	r3, r7, r1
 800efbc:	2200      	movs	r2, #0
 800efbe:	701a      	strb	r2, [r3, #0]
        /* CLASS_A = 0, CLASS_B = 1, CLASS_C = 2 */
        mibReq.Param.Class = (DeviceClass_t)mcpsIndication->Buffer[1];;
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	689b      	ldr	r3, [r3, #8]
 800efc4:	3301      	adds	r3, #1
 800efc6:	781a      	ldrb	r2, [r3, #0]
 800efc8:	187b      	adds	r3, r7, r1
 800efca:	711a      	strb	r2, [r3, #4]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800efcc:	187b      	adds	r3, r7, r1
 800efce:	0018      	movs	r0, r3
 800efd0:	f004 fd1e 	bl	8013a10 <LoRaMacMibSetRequestConfirm>
      }
      break;
 800efd4:	e025      	b.n	800f022 <LmhpComplianceOnMcpsIndication+0x3ae>
      case 10: /* Send PingSlotInfoReq */
      {
        MlmeReq_t mlmeReq;

        mlmeReq.Type = MLME_PING_SLOT_INFO;
 800efd6:	212c      	movs	r1, #44	; 0x2c
 800efd8:	187b      	adds	r3, r7, r1
 800efda:	220d      	movs	r2, #13
 800efdc:	701a      	strb	r2, [r3, #0]
        mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	689b      	ldr	r3, [r3, #8]
 800efe2:	785a      	ldrb	r2, [r3, #1]
 800efe4:	187b      	adds	r3, r7, r1
 800efe6:	711a      	strb	r2, [r3, #4]

        LoRaMacMlmeRequest(&mlmeReq);
 800efe8:	187b      	adds	r3, r7, r1
 800efea:	0018      	movs	r0, r3
 800efec:	f005 f896 	bl	801411c <LoRaMacMlmeRequest>
      }
      break;
 800eff0:	e017      	b.n	800f022 <LmhpComplianceOnMcpsIndication+0x3ae>
    return;
 800eff2:	46c0      	nop			; (mov r8, r8)
 800eff4:	e015      	b.n	800f022 <LmhpComplianceOnMcpsIndication+0x3ae>
    return;
 800eff6:	46c0      	nop			; (mov r8, r8)
 800eff8:	e013      	b.n	800f022 <LmhpComplianceOnMcpsIndication+0x3ae>
    return;
 800effa:	46c0      	nop			; (mov r8, r8)
 800effc:	e011      	b.n	800f022 <LmhpComplianceOnMcpsIndication+0x3ae>
      default:
        break;
 800effe:	46c0      	nop			; (mov r8, r8)
 800f000:	e00f      	b.n	800f022 <LmhpComplianceOnMcpsIndication+0x3ae>
 800f002:	46c0      	nop			; (mov r8, r8)
 800f004:	200005a0 	.word	0x200005a0
 800f008:	200005b4 	.word	0x200005b4
 800f00c:	0800f033 	.word	0x0800f033
 800f010:	20000588 	.word	0x20000588
 800f014:	00004e20 	.word	0x00004e20
 800f018:	0801f950 	.word	0x0801f950
 800f01c:	20000178 	.word	0x20000178
      break;
 800f020:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800f022:	46bd      	mov	sp, r7
 800f024:	b020      	add	sp, #128	; 0x80
 800f026:	bd80      	pop	{r7, pc}

0800f028 <LmhpComplianceProcess>:

static void LmhpComplianceProcess(void)
{
 800f028:	b580      	push	{r7, lr}
 800f02a:	af00      	add	r7, sp, #0
  /* Nothing to process */
}
 800f02c:	46c0      	nop			; (mov r8, r8)
 800f02e:	46bd      	mov	sp, r7
 800f030:	bd80      	pop	{r7, pc}

0800f032 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent(void *context)
{
 800f032:	b580      	push	{r7, lr}
 800f034:	b082      	sub	sp, #8
 800f036:	af00      	add	r7, sp, #0
 800f038:	6078      	str	r0, [r7, #4]
  LmhpComplianceTxProcess();
 800f03a:	f7ff fdad 	bl	800eb98 <LmhpComplianceTxProcess>
}
 800f03e:	46c0      	nop			; (mov r8, r8)
 800f040:	46bd      	mov	sp, r7
 800f042:	b002      	add	sp, #8
 800f044:	bd80      	pop	{r7, pc}

0800f046 <NvmCtxMgmtEvent>:
#endif /* MAX_PERSISTENT_CTX_MGMT_ENABLED == 1 */
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

/* Exported functions ---------------------------------------------------------*/
void NvmCtxMgmtEvent(LoRaMacNvmCtxModule_t module)
{
 800f046:	b580      	push	{r7, lr}
 800f048:	b082      	sub	sp, #8
 800f04a:	af00      	add	r7, sp, #0
 800f04c:	0002      	movs	r2, r0
 800f04e:	1dfb      	adds	r3, r7, #7
 800f050:	701a      	strb	r2, [r3, #0]
    {
      break;
    }
  }
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800f052:	46c0      	nop			; (mov r8, r8)
 800f054:	46bd      	mov	sp, r7
 800f056:	b002      	add	sp, #8
 800f058:	bd80      	pop	{r7, pc}

0800f05a <NvmCtxMgmtStore>:

NvmCtxMgmtStatus_t NvmCtxMgmtStore(void)
{
 800f05a:	b580      	push	{r7, lr}
 800f05c:	af00      	add	r7, sp, #0
  /* Resume LoRaMac */
  LoRaMacStart();

  return NVMCTXMGMT_STATUS_SUCCESS;
#else /* CONTEXT_MANAGEMENT_ENABLED == 0 */
  return NVMCTXMGMT_STATUS_FAIL;
 800f05e:	2301      	movs	r3, #1
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800f060:	0018      	movs	r0, r3
 800f062:	46bd      	mov	sp, r7
 800f064:	bd80      	pop	{r7, pc}

0800f066 <NvmCtxMgmtRestore>:

NvmCtxMgmtStatus_t NvmCtxMgmtRestore(void)
{
 800f066:	b580      	push	{r7, lr}
 800f068:	af00      	add	r7, sp, #0
    LoRaMacMibSetRequestConfirm(&mibReq);
  }

  return status;
#else /* CONTEXT_MANAGEMENT_ENABLED == 0 */
  return NVMCTXMGMT_STATUS_FAIL;
 800f06a:	2301      	movs	r3, #1
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800f06c:	0018      	movs	r0, r3
 800f06e:	46bd      	mov	sp, r7
 800f070:	bd80      	pop	{r7, pc}
	...

0800f074 <OnRadioTxDone>:
 */
static void LoRaMacHandleIndicationEvents( void );

/* Private  functions ---------------------------------------------------------*/
static void OnRadioTxDone( void )
{
 800f074:	b5b0      	push	{r4, r5, r7, lr}
 800f076:	b082      	sub	sp, #8
 800f078:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800f07a:	f00d ff71 	bl	801cf60 <UTIL_TIMER_GetCurrentTime>
 800f07e:	0002      	movs	r2, r0
 800f080:	4b14      	ldr	r3, [pc, #80]	; (800f0d4 <OnRadioTxDone+0x60>)
 800f082:	601a      	str	r2, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800f084:	4d14      	ldr	r5, [pc, #80]	; (800f0d8 <OnRadioTxDone+0x64>)
 800f086:	23ce      	movs	r3, #206	; 0xce
 800f088:	009c      	lsls	r4, r3, #2
 800f08a:	003b      	movs	r3, r7
 800f08c:	0018      	movs	r0, r3
 800f08e:	f00d fd15 	bl	801cabc <SysTimeGet>
 800f092:	003a      	movs	r2, r7
 800f094:	192b      	adds	r3, r5, r4
 800f096:	ca03      	ldmia	r2!, {r0, r1}
 800f098:	c303      	stmia	r3!, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800f09a:	4b10      	ldr	r3, [pc, #64]	; (800f0dc <OnRadioTxDone+0x68>)
 800f09c:	781a      	ldrb	r2, [r3, #0]
 800f09e:	2110      	movs	r1, #16
 800f0a0:	430a      	orrs	r2, r1
 800f0a2:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f0a4:	4a0c      	ldr	r2, [pc, #48]	; (800f0d8 <OnRadioTxDone+0x64>)
 800f0a6:	23d2      	movs	r3, #210	; 0xd2
 800f0a8:	009b      	lsls	r3, r3, #2
 800f0aa:	58d3      	ldr	r3, [r2, r3]
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d00c      	beq.n	800f0ca <OnRadioTxDone+0x56>
 800f0b0:	4a09      	ldr	r2, [pc, #36]	; (800f0d8 <OnRadioTxDone+0x64>)
 800f0b2:	23d2      	movs	r3, #210	; 0xd2
 800f0b4:	009b      	lsls	r3, r3, #2
 800f0b6:	58d3      	ldr	r3, [r2, r3]
 800f0b8:	68db      	ldr	r3, [r3, #12]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d005      	beq.n	800f0ca <OnRadioTxDone+0x56>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f0be:	4a06      	ldr	r2, [pc, #24]	; (800f0d8 <OnRadioTxDone+0x64>)
 800f0c0:	23d2      	movs	r3, #210	; 0xd2
 800f0c2:	009b      	lsls	r3, r3, #2
 800f0c4:	58d3      	ldr	r3, [r2, r3]
 800f0c6:	68db      	ldr	r3, [r3, #12]
 800f0c8:	4798      	blx	r3
    }
//    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
}
 800f0ca:	46c0      	nop			; (mov r8, r8)
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	b002      	add	sp, #8
 800f0d0:	bdb0      	pop	{r4, r5, r7, pc}
 800f0d2:	46c0      	nop			; (mov r8, r8)
 800f0d4:	20001738 	.word	0x20001738
 800f0d8:	200005b8 	.word	0x200005b8
 800f0dc:	20000be8 	.word	0x20000be8

0800f0e0 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800f0e0:	b5b0      	push	{r4, r5, r7, lr}
 800f0e2:	b084      	sub	sp, #16
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	60f8      	str	r0, [r7, #12]
 800f0e8:	000c      	movs	r4, r1
 800f0ea:	0010      	movs	r0, r2
 800f0ec:	0019      	movs	r1, r3
 800f0ee:	250a      	movs	r5, #10
 800f0f0:	197b      	adds	r3, r7, r5
 800f0f2:	1c22      	adds	r2, r4, #0
 800f0f4:	801a      	strh	r2, [r3, #0]
 800f0f6:	2408      	movs	r4, #8
 800f0f8:	193b      	adds	r3, r7, r4
 800f0fa:	1c02      	adds	r2, r0, #0
 800f0fc:	801a      	strh	r2, [r3, #0]
 800f0fe:	1dfb      	adds	r3, r7, #7
 800f100:	1c0a      	adds	r2, r1, #0
 800f102:	701a      	strb	r2, [r3, #0]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800f104:	f00d ff2c 	bl	801cf60 <UTIL_TIMER_GetCurrentTime>
 800f108:	0002      	movs	r2, r0
 800f10a:	4b16      	ldr	r3, [pc, #88]	; (800f164 <OnRadioRxDone+0x84>)
 800f10c:	601a      	str	r2, [r3, #0]
    RxDoneParams.Payload = payload;
 800f10e:	4b15      	ldr	r3, [pc, #84]	; (800f164 <OnRadioRxDone+0x84>)
 800f110:	68fa      	ldr	r2, [r7, #12]
 800f112:	605a      	str	r2, [r3, #4]
    RxDoneParams.Size = size;
 800f114:	4b13      	ldr	r3, [pc, #76]	; (800f164 <OnRadioRxDone+0x84>)
 800f116:	197a      	adds	r2, r7, r5
 800f118:	8812      	ldrh	r2, [r2, #0]
 800f11a:	811a      	strh	r2, [r3, #8]
    RxDoneParams.Rssi = rssi;
 800f11c:	4b11      	ldr	r3, [pc, #68]	; (800f164 <OnRadioRxDone+0x84>)
 800f11e:	193a      	adds	r2, r7, r4
 800f120:	8812      	ldrh	r2, [r2, #0]
 800f122:	815a      	strh	r2, [r3, #10]
    RxDoneParams.Snr = snr;
 800f124:	4b0f      	ldr	r3, [pc, #60]	; (800f164 <OnRadioRxDone+0x84>)
 800f126:	1dfa      	adds	r2, r7, #7
 800f128:	7812      	ldrb	r2, [r2, #0]
 800f12a:	731a      	strb	r2, [r3, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800f12c:	4b0e      	ldr	r3, [pc, #56]	; (800f168 <OnRadioRxDone+0x88>)
 800f12e:	781a      	ldrb	r2, [r3, #0]
 800f130:	2108      	movs	r1, #8
 800f132:	430a      	orrs	r2, r1
 800f134:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f136:	4a0d      	ldr	r2, [pc, #52]	; (800f16c <OnRadioRxDone+0x8c>)
 800f138:	23d2      	movs	r3, #210	; 0xd2
 800f13a:	009b      	lsls	r3, r3, #2
 800f13c:	58d3      	ldr	r3, [r2, r3]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d00c      	beq.n	800f15c <OnRadioRxDone+0x7c>
 800f142:	4a0a      	ldr	r2, [pc, #40]	; (800f16c <OnRadioRxDone+0x8c>)
 800f144:	23d2      	movs	r3, #210	; 0xd2
 800f146:	009b      	lsls	r3, r3, #2
 800f148:	58d3      	ldr	r3, [r2, r3]
 800f14a:	68db      	ldr	r3, [r3, #12]
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d005      	beq.n	800f15c <OnRadioRxDone+0x7c>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f150:	4a06      	ldr	r2, [pc, #24]	; (800f16c <OnRadioRxDone+0x8c>)
 800f152:	23d2      	movs	r3, #210	; 0xd2
 800f154:	009b      	lsls	r3, r3, #2
 800f156:	58d3      	ldr	r3, [r2, r3]
 800f158:	68db      	ldr	r3, [r3, #12]
 800f15a:	4798      	blx	r3
    }
//    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
}
 800f15c:	46c0      	nop			; (mov r8, r8)
 800f15e:	46bd      	mov	sp, r7
 800f160:	b004      	add	sp, #16
 800f162:	bdb0      	pop	{r4, r5, r7, pc}
 800f164:	2000173c 	.word	0x2000173c
 800f168:	20000be8 	.word	0x20000be8
 800f16c:	200005b8 	.word	0x200005b8

0800f170 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800f170:	b580      	push	{r7, lr}
 800f172:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800f174:	4b0d      	ldr	r3, [pc, #52]	; (800f1ac <OnRadioTxTimeout+0x3c>)
 800f176:	781a      	ldrb	r2, [r3, #0]
 800f178:	2104      	movs	r1, #4
 800f17a:	430a      	orrs	r2, r1
 800f17c:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f17e:	4a0c      	ldr	r2, [pc, #48]	; (800f1b0 <OnRadioTxTimeout+0x40>)
 800f180:	23d2      	movs	r3, #210	; 0xd2
 800f182:	009b      	lsls	r3, r3, #2
 800f184:	58d3      	ldr	r3, [r2, r3]
 800f186:	2b00      	cmp	r3, #0
 800f188:	d00c      	beq.n	800f1a4 <OnRadioTxTimeout+0x34>
 800f18a:	4a09      	ldr	r2, [pc, #36]	; (800f1b0 <OnRadioTxTimeout+0x40>)
 800f18c:	23d2      	movs	r3, #210	; 0xd2
 800f18e:	009b      	lsls	r3, r3, #2
 800f190:	58d3      	ldr	r3, [r2, r3]
 800f192:	68db      	ldr	r3, [r3, #12]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d005      	beq.n	800f1a4 <OnRadioTxTimeout+0x34>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f198:	4a05      	ldr	r2, [pc, #20]	; (800f1b0 <OnRadioTxTimeout+0x40>)
 800f19a:	23d2      	movs	r3, #210	; 0xd2
 800f19c:	009b      	lsls	r3, r3, #2
 800f19e:	58d3      	ldr	r3, [r2, r3]
 800f1a0:	68db      	ldr	r3, [r3, #12]
 800f1a2:	4798      	blx	r3
    }
//    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
}
 800f1a4:	46c0      	nop			; (mov r8, r8)
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	bd80      	pop	{r7, pc}
 800f1aa:	46c0      	nop			; (mov r8, r8)
 800f1ac:	20000be8 	.word	0x20000be8
 800f1b0:	200005b8 	.word	0x200005b8

0800f1b4 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800f1b4:	b580      	push	{r7, lr}
 800f1b6:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800f1b8:	4b0d      	ldr	r3, [pc, #52]	; (800f1f0 <OnRadioRxError+0x3c>)
 800f1ba:	781a      	ldrb	r2, [r3, #0]
 800f1bc:	2102      	movs	r1, #2
 800f1be:	430a      	orrs	r2, r1
 800f1c0:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f1c2:	4a0c      	ldr	r2, [pc, #48]	; (800f1f4 <OnRadioRxError+0x40>)
 800f1c4:	23d2      	movs	r3, #210	; 0xd2
 800f1c6:	009b      	lsls	r3, r3, #2
 800f1c8:	58d3      	ldr	r3, [r2, r3]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d00c      	beq.n	800f1e8 <OnRadioRxError+0x34>
 800f1ce:	4a09      	ldr	r2, [pc, #36]	; (800f1f4 <OnRadioRxError+0x40>)
 800f1d0:	23d2      	movs	r3, #210	; 0xd2
 800f1d2:	009b      	lsls	r3, r3, #2
 800f1d4:	58d3      	ldr	r3, [r2, r3]
 800f1d6:	68db      	ldr	r3, [r3, #12]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d005      	beq.n	800f1e8 <OnRadioRxError+0x34>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f1dc:	4a05      	ldr	r2, [pc, #20]	; (800f1f4 <OnRadioRxError+0x40>)
 800f1de:	23d2      	movs	r3, #210	; 0xd2
 800f1e0:	009b      	lsls	r3, r3, #2
 800f1e2:	58d3      	ldr	r3, [r2, r3]
 800f1e4:	68db      	ldr	r3, [r3, #12]
 800f1e6:	4798      	blx	r3
    }
}
 800f1e8:	46c0      	nop			; (mov r8, r8)
 800f1ea:	46bd      	mov	sp, r7
 800f1ec:	bd80      	pop	{r7, pc}
 800f1ee:	46c0      	nop			; (mov r8, r8)
 800f1f0:	20000be8 	.word	0x20000be8
 800f1f4:	200005b8 	.word	0x200005b8

0800f1f8 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800f1fc:	4b0d      	ldr	r3, [pc, #52]	; (800f234 <OnRadioRxTimeout+0x3c>)
 800f1fe:	781a      	ldrb	r2, [r3, #0]
 800f200:	2101      	movs	r1, #1
 800f202:	430a      	orrs	r2, r1
 800f204:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f206:	4a0c      	ldr	r2, [pc, #48]	; (800f238 <OnRadioRxTimeout+0x40>)
 800f208:	23d2      	movs	r3, #210	; 0xd2
 800f20a:	009b      	lsls	r3, r3, #2
 800f20c:	58d3      	ldr	r3, [r2, r3]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d00c      	beq.n	800f22c <OnRadioRxTimeout+0x34>
 800f212:	4a09      	ldr	r2, [pc, #36]	; (800f238 <OnRadioRxTimeout+0x40>)
 800f214:	23d2      	movs	r3, #210	; 0xd2
 800f216:	009b      	lsls	r3, r3, #2
 800f218:	58d3      	ldr	r3, [r2, r3]
 800f21a:	68db      	ldr	r3, [r3, #12]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d005      	beq.n	800f22c <OnRadioRxTimeout+0x34>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f220:	4a05      	ldr	r2, [pc, #20]	; (800f238 <OnRadioRxTimeout+0x40>)
 800f222:	23d2      	movs	r3, #210	; 0xd2
 800f224:	009b      	lsls	r3, r3, #2
 800f226:	58d3      	ldr	r3, [r2, r3]
 800f228:	68db      	ldr	r3, [r3, #12]
 800f22a:	4798      	blx	r3
    }
//    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}
 800f22c:	46c0      	nop			; (mov r8, r8)
 800f22e:	46bd      	mov	sp, r7
 800f230:	bd80      	pop	{r7, pc}
 800f232:	46c0      	nop			; (mov r8, r8)
 800f234:	20000be8 	.word	0x20000be8
 800f238:	200005b8 	.word	0x200005b8

0800f23c <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800f23c:	b580      	push	{r7, lr}
 800f23e:	af00      	add	r7, sp, #0
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800f240:	4b0a      	ldr	r3, [pc, #40]	; (800f26c <UpdateRxSlotIdleState+0x30>)
 800f242:	4a0b      	ldr	r2, [pc, #44]	; (800f270 <UpdateRxSlotIdleState+0x34>)
 800f244:	589b      	ldr	r3, [r3, r2]
 800f246:	227c      	movs	r2, #124	; 0x7c
 800f248:	5c9b      	ldrb	r3, [r3, r2]
 800f24a:	2b02      	cmp	r3, #2
 800f24c:	d005      	beq.n	800f25a <UpdateRxSlotIdleState+0x1e>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800f24e:	4a07      	ldr	r2, [pc, #28]	; (800f26c <UpdateRxSlotIdleState+0x30>)
 800f250:	2390      	movs	r3, #144	; 0x90
 800f252:	00db      	lsls	r3, r3, #3
 800f254:	2106      	movs	r1, #6
 800f256:	54d1      	strb	r1, [r2, r3]
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800f258:	e004      	b.n	800f264 <UpdateRxSlotIdleState+0x28>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800f25a:	4a04      	ldr	r2, [pc, #16]	; (800f26c <UpdateRxSlotIdleState+0x30>)
 800f25c:	2390      	movs	r3, #144	; 0x90
 800f25e:	00db      	lsls	r3, r3, #3
 800f260:	2102      	movs	r1, #2
 800f262:	54d1      	strb	r1, [r2, r3]
}
 800f264:	46c0      	nop			; (mov r8, r8)
 800f266:	46bd      	mov	sp, r7
 800f268:	bd80      	pop	{r7, pc}
 800f26a:	46c0      	nop			; (mov r8, r8)
 800f26c:	200005b8 	.word	0x200005b8
 800f270:	00000484 	.word	0x00000484

0800f274 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800f274:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f276:	b08f      	sub	sp, #60	; 0x3c
 800f278:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800f27a:	4b59      	ldr	r3, [pc, #356]	; (800f3e0 <ProcessRadioTxDone+0x16c>)
 800f27c:	4a59      	ldr	r2, [pc, #356]	; (800f3e4 <ProcessRadioTxDone+0x170>)
 800f27e:	589b      	ldr	r3, [r3, r2]
 800f280:	227c      	movs	r2, #124	; 0x7c
 800f282:	5c9b      	ldrb	r3, [r3, r2]
 800f284:	2b02      	cmp	r3, #2
 800f286:	d002      	beq.n	800f28e <ProcessRadioTxDone+0x1a>
    {
        Radio.Sleep( );
 800f288:	4b57      	ldr	r3, [pc, #348]	; (800f3e8 <ProcessRadioTxDone+0x174>)
 800f28a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f28c:	4798      	blx	r3
    }
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800f28e:	4a54      	ldr	r2, [pc, #336]	; (800f3e0 <ProcessRadioTxDone+0x16c>)
 800f290:	23ec      	movs	r3, #236	; 0xec
 800f292:	009b      	lsls	r3, r3, #2
 800f294:	58d2      	ldr	r2, [r2, r3]
 800f296:	4b55      	ldr	r3, [pc, #340]	; (800f3ec <ProcessRadioTxDone+0x178>)
 800f298:	0011      	movs	r1, r2
 800f29a:	0018      	movs	r0, r3
 800f29c:	f00d fda8 	bl	801cdf0 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800f2a0:	4b52      	ldr	r3, [pc, #328]	; (800f3ec <ProcessRadioTxDone+0x178>)
 800f2a2:	0018      	movs	r0, r3
 800f2a4:	f00d fcb4 	bl	801cc10 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800f2a8:	4a4d      	ldr	r2, [pc, #308]	; (800f3e0 <ProcessRadioTxDone+0x16c>)
 800f2aa:	23ed      	movs	r3, #237	; 0xed
 800f2ac:	009b      	lsls	r3, r3, #2
 800f2ae:	58d2      	ldr	r2, [r2, r3]
 800f2b0:	4b4f      	ldr	r3, [pc, #316]	; (800f3f0 <ProcessRadioTxDone+0x17c>)
 800f2b2:	0011      	movs	r1, r2
 800f2b4:	0018      	movs	r0, r3
 800f2b6:	f00d fd9b 	bl	801cdf0 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800f2ba:	4b4d      	ldr	r3, [pc, #308]	; (800f3f0 <ProcessRadioTxDone+0x17c>)
 800f2bc:	0018      	movs	r0, r3
 800f2be:	f00d fca7 	bl	801cc10 <UTIL_TIMER_Start>

    if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800f2c2:	4b47      	ldr	r3, [pc, #284]	; (800f3e0 <ProcessRadioTxDone+0x16c>)
 800f2c4:	4a47      	ldr	r2, [pc, #284]	; (800f3e4 <ProcessRadioTxDone+0x170>)
 800f2c6:	589b      	ldr	r3, [r3, r2]
 800f2c8:	227c      	movs	r2, #124	; 0x7c
 800f2ca:	5c9b      	ldrb	r3, [r3, r2]
 800f2cc:	2b02      	cmp	r3, #2
 800f2ce:	d004      	beq.n	800f2da <ProcessRadioTxDone+0x66>
 800f2d0:	4b43      	ldr	r3, [pc, #268]	; (800f3e0 <ProcessRadioTxDone+0x16c>)
 800f2d2:	4a48      	ldr	r2, [pc, #288]	; (800f3f4 <ProcessRadioTxDone+0x180>)
 800f2d4:	5c9b      	ldrb	r3, [r3, r2]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d021      	beq.n	800f31e <ProcessRadioTxDone+0xaa>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800f2da:	2120      	movs	r1, #32
 800f2dc:	187b      	adds	r3, r7, r1
 800f2de:	2216      	movs	r2, #22
 800f2e0:	701a      	strb	r2, [r3, #0]
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800f2e2:	4b3f      	ldr	r3, [pc, #252]	; (800f3e0 <ProcessRadioTxDone+0x16c>)
 800f2e4:	4a3f      	ldr	r2, [pc, #252]	; (800f3e4 <ProcessRadioTxDone+0x170>)
 800f2e6:	589b      	ldr	r3, [r3, r2]
 800f2e8:	781b      	ldrb	r3, [r3, #0]
 800f2ea:	187a      	adds	r2, r7, r1
 800f2ec:	0011      	movs	r1, r2
 800f2ee:	0018      	movs	r0, r3
 800f2f0:	f007 fccf 	bl	8016c92 <RegionGetPhyParam>
 800f2f4:	0003      	movs	r3, r0
 800f2f6:	001a      	movs	r2, r3
 800f2f8:	211c      	movs	r1, #28
 800f2fa:	187b      	adds	r3, r7, r1
 800f2fc:	601a      	str	r2, [r3, #0]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800f2fe:	4a38      	ldr	r2, [pc, #224]	; (800f3e0 <ProcessRadioTxDone+0x16c>)
 800f300:	23ed      	movs	r3, #237	; 0xed
 800f302:	009b      	lsls	r3, r3, #2
 800f304:	58d2      	ldr	r2, [r2, r3]
 800f306:	187b      	adds	r3, r7, r1
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	18d2      	adds	r2, r2, r3
 800f30c:	4b3a      	ldr	r3, [pc, #232]	; (800f3f8 <ProcessRadioTxDone+0x184>)
 800f30e:	0011      	movs	r1, r2
 800f310:	0018      	movs	r0, r3
 800f312:	f00d fd6d 	bl	801cdf0 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800f316:	4b38      	ldr	r3, [pc, #224]	; (800f3f8 <ProcessRadioTxDone+0x184>)
 800f318:	0018      	movs	r0, r3
 800f31a:	f00d fc79 	bl	801cc10 <UTIL_TIMER_Start>
    }

    // Update Aggregated last tx done time
    MacCtx.NvmCtx->LastTxDoneTime = TxDoneParams.CurTime;
 800f31e:	4b30      	ldr	r3, [pc, #192]	; (800f3e0 <ProcessRadioTxDone+0x16c>)
 800f320:	4a30      	ldr	r2, [pc, #192]	; (800f3e4 <ProcessRadioTxDone+0x170>)
 800f322:	589a      	ldr	r2, [r3, r2]
 800f324:	4b35      	ldr	r3, [pc, #212]	; (800f3fc <ProcessRadioTxDone+0x188>)
 800f326:	6819      	ldr	r1, [r3, #0]
 800f328:	23a8      	movs	r3, #168	; 0xa8
 800f32a:	005b      	lsls	r3, r3, #1
 800f32c:	50d1      	str	r1, [r2, r3]

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800f32e:	4b2c      	ldr	r3, [pc, #176]	; (800f3e0 <ProcessRadioTxDone+0x16c>)
 800f330:	4a33      	ldr	r2, [pc, #204]	; (800f400 <ProcessRadioTxDone+0x18c>)
 800f332:	5c9a      	ldrb	r2, [r3, r2]
 800f334:	2408      	movs	r4, #8
 800f336:	193b      	adds	r3, r7, r4
 800f338:	701a      	strb	r2, [r3, #0]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800f33a:	4b30      	ldr	r3, [pc, #192]	; (800f3fc <ProcessRadioTxDone+0x188>)
 800f33c:	681a      	ldr	r2, [r3, #0]
 800f33e:	193b      	adds	r3, r7, r4
 800f340:	605a      	str	r2, [r3, #4]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 800f342:	2328      	movs	r3, #40	; 0x28
 800f344:	18fb      	adds	r3, r7, r3
 800f346:	0018      	movs	r0, r3
 800f348:	f00d fbfa 	bl	801cb40 <SysTimeGetMcuTime>
 800f34c:	4b24      	ldr	r3, [pc, #144]	; (800f3e0 <ProcessRadioTxDone+0x16c>)
 800f34e:	4a25      	ldr	r2, [pc, #148]	; (800f3e4 <ProcessRadioTxDone+0x170>)
 800f350:	5898      	ldr	r0, [r3, r2]
 800f352:	193d      	adds	r5, r7, r4
 800f354:	003e      	movs	r6, r7
 800f356:	23ac      	movs	r3, #172	; 0xac
 800f358:	0059      	lsls	r1, r3, #1
 800f35a:	2328      	movs	r3, #40	; 0x28
 800f35c:	18fa      	adds	r2, r7, r3
 800f35e:	2404      	movs	r4, #4
 800f360:	1843      	adds	r3, r0, r1
 800f362:	191c      	adds	r4, r3, r4
 800f364:	466b      	mov	r3, sp
 800f366:	6824      	ldr	r4, [r4, #0]
 800f368:	601c      	str	r4, [r3, #0]
 800f36a:	5843      	ldr	r3, [r0, r1]
 800f36c:	6811      	ldr	r1, [r2, #0]
 800f36e:	6852      	ldr	r2, [r2, #4]
 800f370:	0030      	movs	r0, r6
 800f372:	f00d fb17 	bl	801c9a4 <SysTimeSub>
 800f376:	003a      	movs	r2, r7
 800f378:	002b      	movs	r3, r5
 800f37a:	330c      	adds	r3, #12
 800f37c:	ca21      	ldmia	r2!, {r0, r5}
 800f37e:	c321      	stmia	r3!, {r0, r5}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800f380:	4a17      	ldr	r2, [pc, #92]	; (800f3e0 <ProcessRadioTxDone+0x16c>)
 800f382:	2383      	movs	r3, #131	; 0x83
 800f384:	00db      	lsls	r3, r3, #3
 800f386:	58d2      	ldr	r2, [r2, r3]
 800f388:	2108      	movs	r1, #8
 800f38a:	187b      	adds	r3, r7, r1
 800f38c:	609a      	str	r2, [r3, #8]
    txDone.Joined  = true;
 800f38e:	187b      	adds	r3, r7, r1
 800f390:	2201      	movs	r2, #1
 800f392:	705a      	strb	r2, [r3, #1]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800f394:	4b12      	ldr	r3, [pc, #72]	; (800f3e0 <ProcessRadioTxDone+0x16c>)
 800f396:	4a13      	ldr	r2, [pc, #76]	; (800f3e4 <ProcessRadioTxDone+0x170>)
 800f398:	589a      	ldr	r2, [r3, r2]
 800f39a:	23b2      	movs	r3, #178	; 0xb2
 800f39c:	005b      	lsls	r3, r3, #1
 800f39e:	5cd3      	ldrb	r3, [r2, r3]
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d102      	bne.n	800f3aa <ProcessRadioTxDone+0x136>
    {
        txDone.Joined  = false;
 800f3a4:	187b      	adds	r3, r7, r1
 800f3a6:	2200      	movs	r2, #0
 800f3a8:	705a      	strb	r2, [r3, #1]
    }

    RegionSetBandTxDone( MacCtx.NvmCtx->Region, &txDone );
 800f3aa:	4b0d      	ldr	r3, [pc, #52]	; (800f3e0 <ProcessRadioTxDone+0x16c>)
 800f3ac:	4a0d      	ldr	r2, [pc, #52]	; (800f3e4 <ProcessRadioTxDone+0x170>)
 800f3ae:	589b      	ldr	r3, [r3, r2]
 800f3b0:	781b      	ldrb	r3, [r3, #0]
 800f3b2:	2208      	movs	r2, #8
 800f3b4:	18ba      	adds	r2, r7, r2
 800f3b6:	0011      	movs	r1, r2
 800f3b8:	0018      	movs	r0, r3
 800f3ba:	f007 fc92 	bl	8016ce2 <RegionSetBandTxDone>

    if( MacCtx.NodeAckRequested == false )
 800f3be:	4b08      	ldr	r3, [pc, #32]	; (800f3e0 <ProcessRadioTxDone+0x16c>)
 800f3c0:	4a0c      	ldr	r2, [pc, #48]	; (800f3f4 <ProcessRadioTxDone+0x180>)
 800f3c2:	5c9b      	ldrb	r3, [r3, r2]
 800f3c4:	2201      	movs	r2, #1
 800f3c6:	4053      	eors	r3, r2
 800f3c8:	b2db      	uxtb	r3, r3
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d003      	beq.n	800f3d6 <ProcessRadioTxDone+0x162>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f3ce:	4b04      	ldr	r3, [pc, #16]	; (800f3e0 <ProcessRadioTxDone+0x16c>)
 800f3d0:	4a0c      	ldr	r2, [pc, #48]	; (800f404 <ProcessRadioTxDone+0x190>)
 800f3d2:	2100      	movs	r1, #0
 800f3d4:	5499      	strb	r1, [r3, r2]
    }
}
 800f3d6:	46c0      	nop			; (mov r8, r8)
 800f3d8:	46bd      	mov	sp, r7
 800f3da:	b00d      	add	sp, #52	; 0x34
 800f3dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f3de:	46c0      	nop			; (mov r8, r8)
 800f3e0:	200005b8 	.word	0x200005b8
 800f3e4:	00000484 	.word	0x00000484
 800f3e8:	0801fe28 	.word	0x0801fe28
 800f3ec:	20000938 	.word	0x20000938
 800f3f0:	20000950 	.word	0x20000950
 800f3f4:	00000414 	.word	0x00000414
 800f3f8:	200009b0 	.word	0x200009b0
 800f3fc:	20001738 	.word	0x20001738
 800f400:	00000415 	.word	0x00000415
 800f404:	0000043d 	.word	0x0000043d

0800f408 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800f40c:	4a11      	ldr	r2, [pc, #68]	; (800f454 <PrepareRxDoneAbort+0x4c>)
 800f40e:	23d0      	movs	r3, #208	; 0xd0
 800f410:	009b      	lsls	r3, r3, #2
 800f412:	58d3      	ldr	r3, [r2, r3]
 800f414:	2280      	movs	r2, #128	; 0x80
 800f416:	431a      	orrs	r2, r3
 800f418:	0011      	movs	r1, r2
 800f41a:	4a0e      	ldr	r2, [pc, #56]	; (800f454 <PrepareRxDoneAbort+0x4c>)
 800f41c:	23d0      	movs	r3, #208	; 0xd0
 800f41e:	009b      	lsls	r3, r3, #2
 800f420:	50d1      	str	r1, [r2, r3]

    if( MacCtx.NodeAckRequested == true )
 800f422:	4b0c      	ldr	r3, [pc, #48]	; (800f454 <PrepareRxDoneAbort+0x4c>)
 800f424:	4a0c      	ldr	r2, [pc, #48]	; (800f458 <PrepareRxDoneAbort+0x50>)
 800f426:	5c9b      	ldrb	r3, [r3, r2]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d002      	beq.n	800f432 <PrepareRxDoneAbort+0x2a>
    {
        OnAckTimeoutTimerEvent( NULL );
 800f42c:	2000      	movs	r0, #0
 800f42e:	f001 f98d 	bl	801074c <OnAckTimeoutTimerEvent>
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800f432:	4b08      	ldr	r3, [pc, #32]	; (800f454 <PrepareRxDoneAbort+0x4c>)
 800f434:	4a09      	ldr	r2, [pc, #36]	; (800f45c <PrepareRxDoneAbort+0x54>)
 800f436:	5c99      	ldrb	r1, [r3, r2]
 800f438:	2002      	movs	r0, #2
 800f43a:	4301      	orrs	r1, r0
 800f43c:	5499      	strb	r1, [r3, r2]
    MacCtx.MacFlags.Bits.MacDone = 1;
 800f43e:	4b05      	ldr	r3, [pc, #20]	; (800f454 <PrepareRxDoneAbort+0x4c>)
 800f440:	4a06      	ldr	r2, [pc, #24]	; (800f45c <PrepareRxDoneAbort+0x54>)
 800f442:	5c99      	ldrb	r1, [r3, r2]
 800f444:	2020      	movs	r0, #32
 800f446:	4301      	orrs	r1, r0
 800f448:	5499      	strb	r1, [r3, r2]

    UpdateRxSlotIdleState( );
 800f44a:	f7ff fef7 	bl	800f23c <UpdateRxSlotIdleState>
}
 800f44e:	46c0      	nop			; (mov r8, r8)
 800f450:	46bd      	mov	sp, r7
 800f452:	bd80      	pop	{r7, pc}
 800f454:	200005b8 	.word	0x200005b8
 800f458:	00000414 	.word	0x00000414
 800f45c:	00000481 	.word	0x00000481

0800f460 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800f460:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f462:	b0a7      	sub	sp, #156	; 0x9c
 800f464:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800f466:	2380      	movs	r3, #128	; 0x80
 800f468:	18fb      	adds	r3, r7, r3
 800f46a:	2213      	movs	r2, #19
 800f46c:	701a      	strb	r2, [r3, #0]

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800f46e:	4bdf      	ldr	r3, [pc, #892]	; (800f7ec <ProcessRadioRxDone+0x38c>)
 800f470:	685b      	ldr	r3, [r3, #4]
 800f472:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint16_t size = RxDoneParams.Size;
 800f474:	267a      	movs	r6, #122	; 0x7a
 800f476:	19bb      	adds	r3, r7, r6
 800f478:	4adc      	ldr	r2, [pc, #880]	; (800f7ec <ProcessRadioRxDone+0x38c>)
 800f47a:	8912      	ldrh	r2, [r2, #8]
 800f47c:	801a      	strh	r2, [r3, #0]
    int16_t rssi = RxDoneParams.Rssi;
 800f47e:	2478      	movs	r4, #120	; 0x78
 800f480:	193b      	adds	r3, r7, r4
 800f482:	4ada      	ldr	r2, [pc, #872]	; (800f7ec <ProcessRadioRxDone+0x38c>)
 800f484:	8952      	ldrh	r2, [r2, #10]
 800f486:	801a      	strh	r2, [r3, #0]
    int8_t snr = RxDoneParams.Snr;
 800f488:	2577      	movs	r5, #119	; 0x77
 800f48a:	197b      	adds	r3, r7, r5
 800f48c:	4ad7      	ldr	r2, [pc, #860]	; (800f7ec <ProcessRadioRxDone+0x38c>)
 800f48e:	7b12      	ldrb	r2, [r2, #12]
 800f490:	701a      	strb	r2, [r3, #0]

    uint8_t pktHeaderLen = 0;
 800f492:	2376      	movs	r3, #118	; 0x76
 800f494:	18fb      	adds	r3, r7, r3
 800f496:	2200      	movs	r2, #0
 800f498:	701a      	strb	r2, [r3, #0]

    uint32_t downLinkCounter = 0;
 800f49a:	2300      	movs	r3, #0
 800f49c:	607b      	str	r3, [r7, #4]
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 800f49e:	4bd4      	ldr	r3, [pc, #848]	; (800f7f0 <ProcessRadioRxDone+0x390>)
 800f4a0:	4ad4      	ldr	r2, [pc, #848]	; (800f7f4 <ProcessRadioRxDone+0x394>)
 800f4a2:	589b      	ldr	r3, [r3, r2]
 800f4a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f4a6:	2284      	movs	r2, #132	; 0x84
 800f4a8:	18ba      	adds	r2, r7, r2
 800f4aa:	6013      	str	r3, [r2, #0]
    uint8_t multicast = 0;
 800f4ac:	2383      	movs	r3, #131	; 0x83
 800f4ae:	18fb      	adds	r3, r7, r3
 800f4b0:	2200      	movs	r2, #0
 800f4b2:	701a      	strb	r2, [r3, #0]
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800f4b4:	2382      	movs	r3, #130	; 0x82
 800f4b6:	18fb      	adds	r3, r7, r3
 800f4b8:	2201      	movs	r2, #1
 800f4ba:	701a      	strb	r2, [r3, #0]
    FCntIdentifier_t fCntID;

    MacCtx.McpsConfirm.AckReceived = false;
 800f4bc:	4acc      	ldr	r2, [pc, #816]	; (800f7f0 <ProcessRadioRxDone+0x390>)
 800f4be:	2388      	movs	r3, #136	; 0x88
 800f4c0:	00db      	lsls	r3, r3, #3
 800f4c2:	2100      	movs	r1, #0
 800f4c4:	54d1      	strb	r1, [r2, r3]
    MacCtx.McpsIndication.Rssi = rssi;
 800f4c6:	4bca      	ldr	r3, [pc, #808]	; (800f7f0 <ProcessRadioRxDone+0x390>)
 800f4c8:	193a      	adds	r2, r7, r4
 800f4ca:	49cb      	ldr	r1, [pc, #812]	; (800f7f8 <ProcessRadioRxDone+0x398>)
 800f4cc:	8812      	ldrh	r2, [r2, #0]
 800f4ce:	525a      	strh	r2, [r3, r1]
    MacCtx.McpsIndication.Snr = snr;
 800f4d0:	4bc7      	ldr	r3, [pc, #796]	; (800f7f0 <ProcessRadioRxDone+0x390>)
 800f4d2:	197a      	adds	r2, r7, r5
 800f4d4:	49c9      	ldr	r1, [pc, #804]	; (800f7fc <ProcessRadioRxDone+0x39c>)
 800f4d6:	7812      	ldrb	r2, [r2, #0]
 800f4d8:	545a      	strb	r2, [r3, r1]
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
 800f4da:	4ac5      	ldr	r2, [pc, #788]	; (800f7f0 <ProcessRadioRxDone+0x390>)
 800f4dc:	2390      	movs	r3, #144	; 0x90
 800f4de:	00db      	lsls	r3, r3, #3
 800f4e0:	5cd1      	ldrb	r1, [r2, r3]
 800f4e2:	4bc3      	ldr	r3, [pc, #780]	; (800f7f0 <ProcessRadioRxDone+0x390>)
 800f4e4:	4ac6      	ldr	r2, [pc, #792]	; (800f800 <ProcessRadioRxDone+0x3a0>)
 800f4e6:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Port = 0;
 800f4e8:	4bc1      	ldr	r3, [pc, #772]	; (800f7f0 <ProcessRadioRxDone+0x390>)
 800f4ea:	4ac6      	ldr	r2, [pc, #792]	; (800f804 <ProcessRadioRxDone+0x3a4>)
 800f4ec:	2100      	movs	r1, #0
 800f4ee:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Multicast = 0;
 800f4f0:	4bbf      	ldr	r3, [pc, #764]	; (800f7f0 <ProcessRadioRxDone+0x390>)
 800f4f2:	4ac5      	ldr	r2, [pc, #788]	; (800f808 <ProcessRadioRxDone+0x3a8>)
 800f4f4:	2100      	movs	r1, #0
 800f4f6:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.FramePending = 0;
 800f4f8:	4bbd      	ldr	r3, [pc, #756]	; (800f7f0 <ProcessRadioRxDone+0x390>)
 800f4fa:	4ac4      	ldr	r2, [pc, #784]	; (800f80c <ProcessRadioRxDone+0x3ac>)
 800f4fc:	2100      	movs	r1, #0
 800f4fe:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Buffer = NULL;
 800f500:	4bbb      	ldr	r3, [pc, #748]	; (800f7f0 <ProcessRadioRxDone+0x390>)
 800f502:	4ac3      	ldr	r2, [pc, #780]	; (800f810 <ProcessRadioRxDone+0x3b0>)
 800f504:	2100      	movs	r1, #0
 800f506:	5099      	str	r1, [r3, r2]
    MacCtx.McpsIndication.BufferSize = 0;
 800f508:	4ab9      	ldr	r2, [pc, #740]	; (800f7f0 <ProcessRadioRxDone+0x390>)
 800f50a:	2385      	movs	r3, #133	; 0x85
 800f50c:	00db      	lsls	r3, r3, #3
 800f50e:	2100      	movs	r1, #0
 800f510:	54d1      	strb	r1, [r2, r3]
    MacCtx.McpsIndication.RxData = false;
 800f512:	4bb7      	ldr	r3, [pc, #732]	; (800f7f0 <ProcessRadioRxDone+0x390>)
 800f514:	4abf      	ldr	r2, [pc, #764]	; (800f814 <ProcessRadioRxDone+0x3b4>)
 800f516:	2100      	movs	r1, #0
 800f518:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.AckReceived = false;
 800f51a:	4bb5      	ldr	r3, [pc, #724]	; (800f7f0 <ProcessRadioRxDone+0x390>)
 800f51c:	4abe      	ldr	r2, [pc, #760]	; (800f818 <ProcessRadioRxDone+0x3b8>)
 800f51e:	2100      	movs	r1, #0
 800f520:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800f522:	4ab3      	ldr	r2, [pc, #716]	; (800f7f0 <ProcessRadioRxDone+0x390>)
 800f524:	2386      	movs	r3, #134	; 0x86
 800f526:	00db      	lsls	r3, r3, #3
 800f528:	2100      	movs	r1, #0
 800f52a:	50d1      	str	r1, [r2, r3]
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800f52c:	4bb0      	ldr	r3, [pc, #704]	; (800f7f0 <ProcessRadioRxDone+0x390>)
 800f52e:	4abb      	ldr	r2, [pc, #748]	; (800f81c <ProcessRadioRxDone+0x3bc>)
 800f530:	2100      	movs	r1, #0
 800f532:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.DevAddress = 0;
 800f534:	4bae      	ldr	r3, [pc, #696]	; (800f7f0 <ProcessRadioRxDone+0x390>)
 800f536:	4aba      	ldr	r2, [pc, #744]	; (800f820 <ProcessRadioRxDone+0x3c0>)
 800f538:	2100      	movs	r1, #0
 800f53a:	5099      	str	r1, [r3, r2]
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800f53c:	4aac      	ldr	r2, [pc, #688]	; (800f7f0 <ProcessRadioRxDone+0x390>)
 800f53e:	2387      	movs	r3, #135	; 0x87
 800f540:	00db      	lsls	r3, r3, #3
 800f542:	2100      	movs	r1, #0
 800f544:	54d1      	strb	r1, [r2, r3]

    Radio.Sleep( );
 800f546:	4bb7      	ldr	r3, [pc, #732]	; (800f824 <ProcessRadioRxDone+0x3c4>)
 800f548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f54a:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 800f54c:	4bb6      	ldr	r3, [pc, #728]	; (800f828 <ProcessRadioRxDone+0x3c8>)
 800f54e:	0018      	movs	r0, r3
 800f550:	f00d fbd6 	bl	801cd00 <UTIL_TIMER_Stop>

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800f554:	19bb      	adds	r3, r7, r6
 800f556:	881a      	ldrh	r2, [r3, #0]
 800f558:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f55a:	0011      	movs	r1, r2
 800f55c:	0018      	movs	r0, r3
 800f55e:	f005 f9f1 	bl	8014944 <LoRaMacClassBRxBeacon>
 800f562:	1e03      	subs	r3, r0, #0
 800f564:	d00c      	beq.n	800f580 <ProcessRadioRxDone+0x120>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800f566:	4ba2      	ldr	r3, [pc, #648]	; (800f7f0 <ProcessRadioRxDone+0x390>)
 800f568:	193a      	adds	r2, r7, r4
 800f56a:	49b0      	ldr	r1, [pc, #704]	; (800f82c <ProcessRadioRxDone+0x3cc>)
 800f56c:	8812      	ldrh	r2, [r2, #0]
 800f56e:	525a      	strh	r2, [r3, r1]
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800f570:	4a9f      	ldr	r2, [pc, #636]	; (800f7f0 <ProcessRadioRxDone+0x390>)
 800f572:	1979      	adds	r1, r7, r5
 800f574:	238f      	movs	r3, #143	; 0x8f
 800f576:	00db      	lsls	r3, r3, #3
 800f578:	7809      	ldrb	r1, [r1, #0]
 800f57a:	54d1      	strb	r1, [r2, r3]
        return;
 800f57c:	f000 fc9e 	bl	800febc <ProcessRadioRxDone+0xa5c>
    }
    // Check if we expect a ping or a multicast slot.
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800f580:	4b9b      	ldr	r3, [pc, #620]	; (800f7f0 <ProcessRadioRxDone+0x390>)
 800f582:	4a9c      	ldr	r2, [pc, #624]	; (800f7f4 <ProcessRadioRxDone+0x394>)
 800f584:	589b      	ldr	r3, [r3, r2]
 800f586:	227c      	movs	r2, #124	; 0x7c
 800f588:	5c9b      	ldrb	r3, [r3, r2]
 800f58a:	2b01      	cmp	r3, #1
 800f58c:	d11c      	bne.n	800f5c8 <ProcessRadioRxDone+0x168>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800f58e:	f005 f9eb 	bl	8014968 <LoRaMacClassBIsPingExpected>
 800f592:	1e03      	subs	r3, r0, #0
 800f594:	d00a      	beq.n	800f5ac <ProcessRadioRxDone+0x14c>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f596:	2000      	movs	r0, #0
 800f598:	f005 f9a2 	bl	80148e0 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800f59c:	2000      	movs	r0, #0
 800f59e:	f005 f9c1 	bl	8014924 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800f5a2:	4b93      	ldr	r3, [pc, #588]	; (800f7f0 <ProcessRadioRxDone+0x390>)
 800f5a4:	4a96      	ldr	r2, [pc, #600]	; (800f800 <ProcessRadioRxDone+0x3a0>)
 800f5a6:	2104      	movs	r1, #4
 800f5a8:	5499      	strb	r1, [r3, r2]
 800f5aa:	e00d      	b.n	800f5c8 <ProcessRadioRxDone+0x168>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800f5ac:	f005 f9e2 	bl	8014974 <LoRaMacClassBIsMulticastExpected>
 800f5b0:	1e03      	subs	r3, r0, #0
 800f5b2:	d009      	beq.n	800f5c8 <ProcessRadioRxDone+0x168>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f5b4:	2000      	movs	r0, #0
 800f5b6:	f005 f99d 	bl	80148f4 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800f5ba:	2000      	movs	r0, #0
 800f5bc:	f005 f9ba 	bl	8014934 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800f5c0:	4b8b      	ldr	r3, [pc, #556]	; (800f7f0 <ProcessRadioRxDone+0x390>)
 800f5c2:	4a8f      	ldr	r2, [pc, #572]	; (800f800 <ProcessRadioRxDone+0x3a0>)
 800f5c4:	2105      	movs	r1, #5
 800f5c6:	5499      	strb	r1, [r3, r2]
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800f5c8:	2276      	movs	r2, #118	; 0x76
 800f5ca:	18bb      	adds	r3, r7, r2
 800f5cc:	781b      	ldrb	r3, [r3, #0]
 800f5ce:	18ba      	adds	r2, r7, r2
 800f5d0:	1c59      	adds	r1, r3, #1
 800f5d2:	7011      	strb	r1, [r2, #0]
 800f5d4:	001a      	movs	r2, r3
 800f5d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f5d8:	189b      	adds	r3, r3, r2
 800f5da:	781a      	ldrb	r2, [r3, #0]
 800f5dc:	2174      	movs	r1, #116	; 0x74
 800f5de:	187b      	adds	r3, r7, r1
 800f5e0:	701a      	strb	r2, [r3, #0]

    switch( macHdr.Bits.MType )
 800f5e2:	187b      	adds	r3, r7, r1
 800f5e4:	781b      	ldrb	r3, [r3, #0]
 800f5e6:	061b      	lsls	r3, r3, #24
 800f5e8:	0f5b      	lsrs	r3, r3, #29
 800f5ea:	b2db      	uxtb	r3, r3
 800f5ec:	2b07      	cmp	r3, #7
 800f5ee:	d101      	bne.n	800f5f4 <ProcessRadioRxDone+0x194>
 800f5f0:	f000 fc0c 	bl	800fe0c <ProcessRadioRxDone+0x9ac>
 800f5f4:	dd01      	ble.n	800f5fa <ProcessRadioRxDone+0x19a>
 800f5f6:	f000 fc38 	bl	800fe6a <ProcessRadioRxDone+0xa0a>
 800f5fa:	2b05      	cmp	r3, #5
 800f5fc:	d100      	bne.n	800f600 <ProcessRadioRxDone+0x1a0>
 800f5fe:	e119      	b.n	800f834 <ProcessRadioRxDone+0x3d4>
 800f600:	dd01      	ble.n	800f606 <ProcessRadioRxDone+0x1a6>
 800f602:	f000 fc32 	bl	800fe6a <ProcessRadioRxDone+0xa0a>
 800f606:	2b01      	cmp	r3, #1
 800f608:	d004      	beq.n	800f614 <ProcessRadioRxDone+0x1b4>
 800f60a:	2b03      	cmp	r3, #3
 800f60c:	d100      	bne.n	800f610 <ProcessRadioRxDone+0x1b0>
 800f60e:	e115      	b.n	800f83c <ProcessRadioRxDone+0x3dc>
 800f610:	f000 fc2b 	bl	800fe6a <ProcessRadioRxDone+0xa0a>
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800f614:	237a      	movs	r3, #122	; 0x7a
 800f616:	18fb      	adds	r3, r7, r3
 800f618:	881b      	ldrh	r3, [r3, #0]
 800f61a:	2b10      	cmp	r3, #16
 800f61c:	d807      	bhi.n	800f62e <ProcessRadioRxDone+0x1ce>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f61e:	4b74      	ldr	r3, [pc, #464]	; (800f7f0 <ProcessRadioRxDone+0x390>)
 800f620:	4a83      	ldr	r2, [pc, #524]	; (800f830 <ProcessRadioRxDone+0x3d0>)
 800f622:	2101      	movs	r1, #1
 800f624:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800f626:	f7ff feef 	bl	800f408 <PrepareRxDoneAbort>
                return;
 800f62a:	f000 fc47 	bl	800febc <ProcessRadioRxDone+0xa5c>
            }
            macMsgJoinAccept.Buffer = payload;
 800f62e:	2108      	movs	r1, #8
 800f630:	187b      	adds	r3, r7, r1
 800f632:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f634:	601a      	str	r2, [r3, #0]
            macMsgJoinAccept.BufSize = size;
 800f636:	237a      	movs	r3, #122	; 0x7a
 800f638:	18fb      	adds	r3, r7, r3
 800f63a:	881b      	ldrh	r3, [r3, #0]
 800f63c:	b2da      	uxtb	r2, r3
 800f63e:	187b      	adds	r3, r7, r1
 800f640:	711a      	strb	r2, [r3, #4]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 800f642:	4b6b      	ldr	r3, [pc, #428]	; (800f7f0 <ProcessRadioRxDone+0x390>)
 800f644:	4a6b      	ldr	r2, [pc, #428]	; (800f7f4 <ProcessRadioRxDone+0x394>)
 800f646:	589a      	ldr	r2, [r3, r2]
 800f648:	23b2      	movs	r3, #178	; 0xb2
 800f64a:	005b      	lsls	r3, r3, #1
 800f64c:	5cd3      	ldrb	r3, [r2, r3]
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d007      	beq.n	800f662 <ProcessRadioRxDone+0x202>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f652:	4b67      	ldr	r3, [pc, #412]	; (800f7f0 <ProcessRadioRxDone+0x390>)
 800f654:	4a76      	ldr	r2, [pc, #472]	; (800f830 <ProcessRadioRxDone+0x3d0>)
 800f656:	2101      	movs	r1, #1
 800f658:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800f65a:	f7ff fed5 	bl	800f408 <PrepareRxDoneAbort>
                return;
 800f65e:	f000 fc2d 	bl	800febc <ProcessRadioRxDone+0xa5c>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800f662:	f7fe fbe3 	bl	800de2c <SecureElementGetJoinEui>
 800f666:	0001      	movs	r1, r0
 800f668:	2680      	movs	r6, #128	; 0x80
 800f66a:	19bc      	adds	r4, r7, r6
 800f66c:	2508      	movs	r5, #8
 800f66e:	197b      	adds	r3, r7, r5
 800f670:	001a      	movs	r2, r3
 800f672:	20ff      	movs	r0, #255	; 0xff
 800f674:	f006 fcba 	bl	8015fec <LoRaMacCryptoHandleJoinAccept>
 800f678:	0003      	movs	r3, r0
 800f67a:	7023      	strb	r3, [r4, #0]

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800f67c:	19bb      	adds	r3, r7, r6
 800f67e:	781b      	ldrb	r3, [r3, #0]
 800f680:	2b00      	cmp	r3, #0
 800f682:	d000      	beq.n	800f686 <ProcessRadioRxDone+0x226>
 800f684:	e0a7      	b.n	800f7d6 <ProcessRadioRxDone+0x376>
            {
                // Network ID
                MacCtx.NvmCtx->NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800f686:	002c      	movs	r4, r5
 800f688:	193b      	adds	r3, r7, r4
 800f68a:	7a59      	ldrb	r1, [r3, #9]
 800f68c:	4b58      	ldr	r3, [pc, #352]	; (800f7f0 <ProcessRadioRxDone+0x390>)
 800f68e:	4a59      	ldr	r2, [pc, #356]	; (800f7f4 <ProcessRadioRxDone+0x394>)
 800f690:	589b      	ldr	r3, [r3, r2]
 800f692:	000a      	movs	r2, r1
 800f694:	649a      	str	r2, [r3, #72]	; 0x48
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800f696:	4b56      	ldr	r3, [pc, #344]	; (800f7f0 <ProcessRadioRxDone+0x390>)
 800f698:	4a56      	ldr	r2, [pc, #344]	; (800f7f4 <ProcessRadioRxDone+0x394>)
 800f69a:	589b      	ldr	r3, [r3, r2]
 800f69c:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800f69e:	193b      	adds	r3, r7, r4
 800f6a0:	7a9b      	ldrb	r3, [r3, #10]
 800f6a2:	021a      	lsls	r2, r3, #8
 800f6a4:	4b52      	ldr	r3, [pc, #328]	; (800f7f0 <ProcessRadioRxDone+0x390>)
 800f6a6:	4853      	ldr	r0, [pc, #332]	; (800f7f4 <ProcessRadioRxDone+0x394>)
 800f6a8:	581b      	ldr	r3, [r3, r0]
 800f6aa:	430a      	orrs	r2, r1
 800f6ac:	649a      	str	r2, [r3, #72]	; 0x48
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800f6ae:	4b50      	ldr	r3, [pc, #320]	; (800f7f0 <ProcessRadioRxDone+0x390>)
 800f6b0:	4a50      	ldr	r2, [pc, #320]	; (800f7f4 <ProcessRadioRxDone+0x394>)
 800f6b2:	589b      	ldr	r3, [r3, r2]
 800f6b4:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800f6b6:	193b      	adds	r3, r7, r4
 800f6b8:	7adb      	ldrb	r3, [r3, #11]
 800f6ba:	041a      	lsls	r2, r3, #16
 800f6bc:	4b4c      	ldr	r3, [pc, #304]	; (800f7f0 <ProcessRadioRxDone+0x390>)
 800f6be:	484d      	ldr	r0, [pc, #308]	; (800f7f4 <ProcessRadioRxDone+0x394>)
 800f6c0:	581b      	ldr	r3, [r3, r0]
 800f6c2:	430a      	orrs	r2, r1
 800f6c4:	649a      	str	r2, [r3, #72]	; 0x48

                // Device Address
                MacCtx.NvmCtx->DevAddr = macMsgJoinAccept.DevAddr;
 800f6c6:	4b4a      	ldr	r3, [pc, #296]	; (800f7f0 <ProcessRadioRxDone+0x390>)
 800f6c8:	4a4a      	ldr	r2, [pc, #296]	; (800f7f4 <ProcessRadioRxDone+0x394>)
 800f6ca:	589b      	ldr	r3, [r3, r2]
 800f6cc:	0020      	movs	r0, r4
 800f6ce:	183a      	adds	r2, r7, r0
 800f6d0:	68d2      	ldr	r2, [r2, #12]
 800f6d2:	64da      	str	r2, [r3, #76]	; 0x4c

                // DLSettings
                MacCtx.NvmCtx->MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800f6d4:	183b      	adds	r3, r7, r0
 800f6d6:	7c1b      	ldrb	r3, [r3, #16]
 800f6d8:	065b      	lsls	r3, r3, #25
 800f6da:	0f5b      	lsrs	r3, r3, #29
 800f6dc:	b2d9      	uxtb	r1, r3
 800f6de:	4b44      	ldr	r3, [pc, #272]	; (800f7f0 <ProcessRadioRxDone+0x390>)
 800f6e0:	4a44      	ldr	r2, [pc, #272]	; (800f7f4 <ProcessRadioRxDone+0x394>)
 800f6e2:	589b      	ldr	r3, [r3, r2]
 800f6e4:	22a5      	movs	r2, #165	; 0xa5
 800f6e6:	5499      	strb	r1, [r3, r2]
                MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800f6e8:	183b      	adds	r3, r7, r0
 800f6ea:	7c1b      	ldrb	r3, [r3, #16]
 800f6ec:	071b      	lsls	r3, r3, #28
 800f6ee:	0f1b      	lsrs	r3, r3, #28
 800f6f0:	b2d9      	uxtb	r1, r3
 800f6f2:	4b3f      	ldr	r3, [pc, #252]	; (800f7f0 <ProcessRadioRxDone+0x390>)
 800f6f4:	4a3f      	ldr	r2, [pc, #252]	; (800f7f4 <ProcessRadioRxDone+0x394>)
 800f6f6:	589b      	ldr	r3, [r3, r2]
 800f6f8:	22ac      	movs	r2, #172	; 0xac
 800f6fa:	5499      	strb	r1, [r3, r2]
                MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800f6fc:	183b      	adds	r3, r7, r0
 800f6fe:	7c1b      	ldrb	r3, [r3, #16]
 800f700:	071b      	lsls	r3, r3, #28
 800f702:	0f1b      	lsrs	r3, r3, #28
 800f704:	b2d9      	uxtb	r1, r3
 800f706:	4b3a      	ldr	r3, [pc, #232]	; (800f7f0 <ProcessRadioRxDone+0x390>)
 800f708:	4a3a      	ldr	r2, [pc, #232]	; (800f7f4 <ProcessRadioRxDone+0x394>)
 800f70a:	589b      	ldr	r3, [r3, r2]
 800f70c:	22b4      	movs	r2, #180	; 0xb4
 800f70e:	5499      	strb	r1, [r3, r2]

                // RxDelay
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800f710:	183b      	adds	r3, r7, r0
 800f712:	7c59      	ldrb	r1, [r3, #17]
 800f714:	4b36      	ldr	r3, [pc, #216]	; (800f7f0 <ProcessRadioRxDone+0x390>)
 800f716:	4a37      	ldr	r2, [pc, #220]	; (800f7f4 <ProcessRadioRxDone+0x394>)
 800f718:	589b      	ldr	r3, [r3, r2]
 800f71a:	2294      	movs	r2, #148	; 0x94
 800f71c:	5099      	str	r1, [r3, r2]
                if( MacCtx.NvmCtx->MacParams.ReceiveDelay1 == 0 )
 800f71e:	4b34      	ldr	r3, [pc, #208]	; (800f7f0 <ProcessRadioRxDone+0x390>)
 800f720:	4a34      	ldr	r2, [pc, #208]	; (800f7f4 <ProcessRadioRxDone+0x394>)
 800f722:	589b      	ldr	r3, [r3, r2]
 800f724:	2294      	movs	r2, #148	; 0x94
 800f726:	589b      	ldr	r3, [r3, r2]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d105      	bne.n	800f738 <ProcessRadioRxDone+0x2d8>
                {
                    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = 1;
 800f72c:	4b30      	ldr	r3, [pc, #192]	; (800f7f0 <ProcessRadioRxDone+0x390>)
 800f72e:	4a31      	ldr	r2, [pc, #196]	; (800f7f4 <ProcessRadioRxDone+0x394>)
 800f730:	589b      	ldr	r3, [r3, r2]
 800f732:	2294      	movs	r2, #148	; 0x94
 800f734:	2101      	movs	r1, #1
 800f736:	5099      	str	r1, [r3, r2]
                }
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 *= 1000;
 800f738:	4b2d      	ldr	r3, [pc, #180]	; (800f7f0 <ProcessRadioRxDone+0x390>)
 800f73a:	4a2e      	ldr	r2, [pc, #184]	; (800f7f4 <ProcessRadioRxDone+0x394>)
 800f73c:	589b      	ldr	r3, [r3, r2]
 800f73e:	2294      	movs	r2, #148	; 0x94
 800f740:	589a      	ldr	r2, [r3, r2]
 800f742:	4b2b      	ldr	r3, [pc, #172]	; (800f7f0 <ProcessRadioRxDone+0x390>)
 800f744:	492b      	ldr	r1, [pc, #172]	; (800f7f4 <ProcessRadioRxDone+0x394>)
 800f746:	5859      	ldr	r1, [r3, r1]
 800f748:	0013      	movs	r3, r2
 800f74a:	015b      	lsls	r3, r3, #5
 800f74c:	1a9b      	subs	r3, r3, r2
 800f74e:	009b      	lsls	r3, r3, #2
 800f750:	189b      	adds	r3, r3, r2
 800f752:	00db      	lsls	r3, r3, #3
 800f754:	001a      	movs	r2, r3
 800f756:	2394      	movs	r3, #148	; 0x94
 800f758:	50ca      	str	r2, [r1, r3]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 800f75a:	4b25      	ldr	r3, [pc, #148]	; (800f7f0 <ProcessRadioRxDone+0x390>)
 800f75c:	4a25      	ldr	r2, [pc, #148]	; (800f7f4 <ProcessRadioRxDone+0x394>)
 800f75e:	589b      	ldr	r3, [r3, r2]
 800f760:	2294      	movs	r2, #148	; 0x94
 800f762:	589b      	ldr	r3, [r3, r2]
 800f764:	4a22      	ldr	r2, [pc, #136]	; (800f7f0 <ProcessRadioRxDone+0x390>)
 800f766:	4923      	ldr	r1, [pc, #140]	; (800f7f4 <ProcessRadioRxDone+0x394>)
 800f768:	5852      	ldr	r2, [r2, r1]
 800f76a:	21fa      	movs	r1, #250	; 0xfa
 800f76c:	0089      	lsls	r1, r1, #2
 800f76e:	468c      	mov	ip, r1
 800f770:	4463      	add	r3, ip
 800f772:	2198      	movs	r1, #152	; 0x98
 800f774:	5053      	str	r3, [r2, r1]

                MacCtx.NvmCtx->Version.Fields.Minor = 0;
 800f776:	4b1e      	ldr	r3, [pc, #120]	; (800f7f0 <ProcessRadioRxDone+0x390>)
 800f778:	4a1e      	ldr	r2, [pc, #120]	; (800f7f4 <ProcessRadioRxDone+0x394>)
 800f77a:	589a      	ldr	r2, [r3, r2]
 800f77c:	23b1      	movs	r3, #177	; 0xb1
 800f77e:	005b      	lsls	r3, r3, #1
 800f780:	2100      	movs	r1, #0
 800f782:	54d1      	strb	r1, [r2, r3]

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800f784:	216c      	movs	r1, #108	; 0x6c
 800f786:	187b      	adds	r3, r7, r1
 800f788:	2208      	movs	r2, #8
 800f78a:	18ba      	adds	r2, r7, r2
 800f78c:	3212      	adds	r2, #18
 800f78e:	601a      	str	r2, [r3, #0]
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800f790:	237a      	movs	r3, #122	; 0x7a
 800f792:	18fb      	adds	r3, r7, r3
 800f794:	881b      	ldrh	r3, [r3, #0]
 800f796:	b2db      	uxtb	r3, r3
 800f798:	3b11      	subs	r3, #17
 800f79a:	b2da      	uxtb	r2, r3
 800f79c:	187b      	adds	r3, r7, r1
 800f79e:	711a      	strb	r2, [r3, #4]

                RegionApplyCFList( MacCtx.NvmCtx->Region, &applyCFList );
 800f7a0:	4b13      	ldr	r3, [pc, #76]	; (800f7f0 <ProcessRadioRxDone+0x390>)
 800f7a2:	4a14      	ldr	r2, [pc, #80]	; (800f7f4 <ProcessRadioRxDone+0x394>)
 800f7a4:	589b      	ldr	r3, [r3, r2]
 800f7a6:	781b      	ldrb	r3, [r3, #0]
 800f7a8:	187a      	adds	r2, r7, r1
 800f7aa:	0011      	movs	r1, r2
 800f7ac:	0018      	movs	r0, r3
 800f7ae:	f007 faf4 	bl	8016d9a <RegionApplyCFList>

                MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_OTAA;
 800f7b2:	4b0f      	ldr	r3, [pc, #60]	; (800f7f0 <ProcessRadioRxDone+0x390>)
 800f7b4:	4a0f      	ldr	r2, [pc, #60]	; (800f7f4 <ProcessRadioRxDone+0x394>)
 800f7b6:	589a      	ldr	r2, [r3, r2]
 800f7b8:	23b2      	movs	r3, #178	; 0xb2
 800f7ba:	005b      	lsls	r3, r3, #1
 800f7bc:	2102      	movs	r1, #2
 800f7be:	54d1      	strb	r1, [r2, r3]

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800f7c0:	2001      	movs	r0, #1
 800f7c2:	f005 fe49 	bl	8015458 <LoRaMacConfirmQueueIsCmdActive>
 800f7c6:	1e03      	subs	r3, r0, #0
 800f7c8:	d100      	bne.n	800f7cc <ProcessRadioRxDone+0x36c>
 800f7ca:	e355      	b.n	800fe78 <ProcessRadioRxDone+0xa18>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800f7cc:	2101      	movs	r1, #1
 800f7ce:	2000      	movs	r0, #0
 800f7d0:	f005 fda6 	bl	8015320 <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
                }
            }
            break;
 800f7d4:	e350      	b.n	800fe78 <ProcessRadioRxDone+0xa18>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800f7d6:	2001      	movs	r0, #1
 800f7d8:	f005 fe3e 	bl	8015458 <LoRaMacConfirmQueueIsCmdActive>
 800f7dc:	1e03      	subs	r3, r0, #0
 800f7de:	d100      	bne.n	800f7e2 <ProcessRadioRxDone+0x382>
 800f7e0:	e34a      	b.n	800fe78 <ProcessRadioRxDone+0xa18>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800f7e2:	2101      	movs	r1, #1
 800f7e4:	2007      	movs	r0, #7
 800f7e6:	f005 fd9b 	bl	8015320 <LoRaMacConfirmQueueSetStatus>
            break;
 800f7ea:	e345      	b.n	800fe78 <ProcessRadioRxDone+0xa18>
 800f7ec:	2000173c 	.word	0x2000173c
 800f7f0:	200005b8 	.word	0x200005b8
 800f7f4:	00000484 	.word	0x00000484
 800f7f8:	0000042a 	.word	0x0000042a
 800f7fc:	0000042c 	.word	0x0000042c
 800f800:	0000042d 	.word	0x0000042d
 800f804:	0000041f 	.word	0x0000041f
 800f808:	0000041e 	.word	0x0000041e
 800f80c:	00000421 	.word	0x00000421
 800f810:	00000424 	.word	0x00000424
 800f814:	00000429 	.word	0x00000429
 800f818:	0000042e 	.word	0x0000042e
 800f81c:	0000041c 	.word	0x0000041c
 800f820:	00000434 	.word	0x00000434
 800f824:	0801fe28 	.word	0x0801fe28
 800f828:	20000950 	.word	0x20000950
 800f82c:	00000476 	.word	0x00000476
 800f830:	0000041d 	.word	0x0000041d
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800f834:	4bd5      	ldr	r3, [pc, #852]	; (800fb8c <ProcessRadioRxDone+0x72c>)
 800f836:	4ad6      	ldr	r2, [pc, #856]	; (800fb90 <ProcessRadioRxDone+0x730>)
 800f838:	2101      	movs	r1, #1
 800f83a:	5499      	strb	r1, [r3, r2]
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800f83c:	4bd3      	ldr	r3, [pc, #844]	; (800fb8c <ProcessRadioRxDone+0x72c>)
 800f83e:	4ad5      	ldr	r2, [pc, #852]	; (800fb94 <ProcessRadioRxDone+0x734>)
 800f840:	589b      	ldr	r3, [r3, r2]
 800f842:	22b9      	movs	r2, #185	; 0xb9
 800f844:	5c9a      	ldrb	r2, [r3, r2]
 800f846:	2164      	movs	r1, #100	; 0x64
 800f848:	187b      	adds	r3, r7, r1
 800f84a:	709a      	strb	r2, [r3, #2]
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800f84c:	4acf      	ldr	r2, [pc, #828]	; (800fb8c <ProcessRadioRxDone+0x72c>)
 800f84e:	2384      	movs	r3, #132	; 0x84
 800f850:	00db      	lsls	r3, r3, #3
 800f852:	5cd3      	ldrb	r3, [r2, r3]
 800f854:	b25a      	sxtb	r2, r3
 800f856:	187b      	adds	r3, r7, r1
 800f858:	705a      	strb	r2, [r3, #1]
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800f85a:	187b      	adds	r3, r7, r1
 800f85c:	220d      	movs	r2, #13
 800f85e:	701a      	strb	r2, [r3, #0]

            // Get the maximum payload length
            if( MacCtx.NvmCtx->RepeaterSupport == true )
 800f860:	4bca      	ldr	r3, [pc, #808]	; (800fb8c <ProcessRadioRxDone+0x72c>)
 800f862:	4acc      	ldr	r2, [pc, #816]	; (800fb94 <ProcessRadioRxDone+0x734>)
 800f864:	589b      	ldr	r3, [r3, r2]
 800f866:	22ca      	movs	r2, #202	; 0xca
 800f868:	5c9b      	ldrb	r3, [r3, r2]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d002      	beq.n	800f874 <ProcessRadioRxDone+0x414>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800f86e:	187b      	adds	r3, r7, r1
 800f870:	220e      	movs	r2, #14
 800f872:	701a      	strb	r2, [r3, #0]
            }

            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800f874:	4bc5      	ldr	r3, [pc, #788]	; (800fb8c <ProcessRadioRxDone+0x72c>)
 800f876:	4ac7      	ldr	r2, [pc, #796]	; (800fb94 <ProcessRadioRxDone+0x734>)
 800f878:	589b      	ldr	r3, [r3, r2]
 800f87a:	781b      	ldrb	r3, [r3, #0]
 800f87c:	2264      	movs	r2, #100	; 0x64
 800f87e:	18ba      	adds	r2, r7, r2
 800f880:	0011      	movs	r1, r2
 800f882:	0018      	movs	r0, r3
 800f884:	f007 fa05 	bl	8016c92 <RegionGetPhyParam>
 800f888:	0003      	movs	r3, r0
 800f88a:	001a      	movs	r2, r3
 800f88c:	2360      	movs	r3, #96	; 0x60
 800f88e:	18fb      	adds	r3, r7, r3
 800f890:	601a      	str	r2, [r3, #0]
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800f892:	237a      	movs	r3, #122	; 0x7a
 800f894:	18fb      	adds	r3, r7, r3
 800f896:	881b      	ldrh	r3, [r3, #0]
 800f898:	3b0d      	subs	r3, #13
 800f89a:	b29b      	uxth	r3, r3
 800f89c:	b21b      	sxth	r3, r3
 800f89e:	1c1a      	adds	r2, r3, #0
 800f8a0:	b213      	sxth	r3, r2
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	da01      	bge.n	800f8aa <ProcessRadioRxDone+0x44a>
 800f8a6:	2300      	movs	r3, #0
 800f8a8:	1c1a      	adds	r2, r3, #0
 800f8aa:	b212      	sxth	r2, r2
 800f8ac:	2360      	movs	r3, #96	; 0x60
 800f8ae:	18fb      	adds	r3, r7, r3
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	b21b      	sxth	r3, r3
 800f8b4:	429a      	cmp	r2, r3
 800f8b6:	dc04      	bgt.n	800f8c2 <ProcessRadioRxDone+0x462>
 800f8b8:	237a      	movs	r3, #122	; 0x7a
 800f8ba:	18fb      	adds	r3, r7, r3
 800f8bc:	881b      	ldrh	r3, [r3, #0]
 800f8be:	2b0b      	cmp	r3, #11
 800f8c0:	d806      	bhi.n	800f8d0 <ProcessRadioRxDone+0x470>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f8c2:	4bb2      	ldr	r3, [pc, #712]	; (800fb8c <ProcessRadioRxDone+0x72c>)
 800f8c4:	4ab4      	ldr	r2, [pc, #720]	; (800fb98 <ProcessRadioRxDone+0x738>)
 800f8c6:	2101      	movs	r1, #1
 800f8c8:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800f8ca:	f7ff fd9d 	bl	800f408 <PrepareRxDoneAbort>
                return;
 800f8ce:	e2f5      	b.n	800febc <ProcessRadioRxDone+0xa5c>
            }
            macMsgData.Buffer = payload;
 800f8d0:	2130      	movs	r1, #48	; 0x30
 800f8d2:	187b      	adds	r3, r7, r1
 800f8d4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f8d6:	601a      	str	r2, [r3, #0]
            macMsgData.BufSize = size;
 800f8d8:	237a      	movs	r3, #122	; 0x7a
 800f8da:	18fb      	adds	r3, r7, r3
 800f8dc:	881b      	ldrh	r3, [r3, #0]
 800f8de:	b2da      	uxtb	r2, r3
 800f8e0:	187b      	adds	r3, r7, r1
 800f8e2:	711a      	strb	r2, [r3, #4]
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800f8e4:	187b      	adds	r3, r7, r1
 800f8e6:	4aad      	ldr	r2, [pc, #692]	; (800fb9c <ProcessRadioRxDone+0x73c>)
 800f8e8:	625a      	str	r2, [r3, #36]	; 0x24
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800f8ea:	0008      	movs	r0, r1
 800f8ec:	187b      	adds	r3, r7, r1
 800f8ee:	2228      	movs	r2, #40	; 0x28
 800f8f0:	21ff      	movs	r1, #255	; 0xff
 800f8f2:	5499      	strb	r1, [r3, r2]

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800f8f4:	183b      	adds	r3, r7, r0
 800f8f6:	0018      	movs	r0, r3
 800f8f8:	f006 fee4 	bl	80166c4 <LoRaMacParserData>
 800f8fc:	1e03      	subs	r3, r0, #0
 800f8fe:	d006      	beq.n	800f90e <ProcessRadioRxDone+0x4ae>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f900:	4ba2      	ldr	r3, [pc, #648]	; (800fb8c <ProcessRadioRxDone+0x72c>)
 800f902:	4aa5      	ldr	r2, [pc, #660]	; (800fb98 <ProcessRadioRxDone+0x738>)
 800f904:	2101      	movs	r1, #1
 800f906:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800f908:	f7ff fd7e 	bl	800f408 <PrepareRxDoneAbort>
                return;
 800f90c:	e2d6      	b.n	800febc <ProcessRadioRxDone+0xa5c>
            }

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800f90e:	2030      	movs	r0, #48	; 0x30
 800f910:	183b      	adds	r3, r7, r0
 800f912:	689a      	ldr	r2, [r3, #8]
 800f914:	4b9d      	ldr	r3, [pc, #628]	; (800fb8c <ProcessRadioRxDone+0x72c>)
 800f916:	49a2      	ldr	r1, [pc, #648]	; (800fba0 <ProcessRadioRxDone+0x740>)
 800f918:	505a      	str	r2, [r3, r1]

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800f91a:	1cba      	adds	r2, r7, #2
 800f91c:	183b      	adds	r3, r7, r0
 800f91e:	0011      	movs	r1, r2
 800f920:	0018      	movs	r0, r3
 800f922:	f003 f861 	bl	80129e8 <DetermineFrameType>
 800f926:	1e03      	subs	r3, r0, #0
 800f928:	d006      	beq.n	800f938 <ProcessRadioRxDone+0x4d8>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f92a:	4b98      	ldr	r3, [pc, #608]	; (800fb8c <ProcessRadioRxDone+0x72c>)
 800f92c:	4a9a      	ldr	r2, [pc, #616]	; (800fb98 <ProcessRadioRxDone+0x738>)
 800f92e:	2101      	movs	r1, #1
 800f930:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800f932:	f7ff fd69 	bl	800f408 <PrepareRxDoneAbort>
                return;
 800f936:	e2c1      	b.n	800febc <ProcessRadioRxDone+0xa5c>
            }

            //Check if it is a multicast message
            multicast = 0;
 800f938:	2383      	movs	r3, #131	; 0x83
 800f93a:	18fb      	adds	r3, r7, r3
 800f93c:	2200      	movs	r2, #0
 800f93e:	701a      	strb	r2, [r3, #0]
            downLinkCounter = 0;
 800f940:	2300      	movs	r3, #0
 800f942:	607b      	str	r3, [r7, #4]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f944:	2381      	movs	r3, #129	; 0x81
 800f946:	18fb      	adds	r3, r7, r3
 800f948:	2200      	movs	r2, #0
 800f94a:	701a      	strb	r2, [r3, #0]
 800f94c:	e05b      	b.n	800fa06 <ProcessRadioRxDone+0x5a6>
            {
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800f94e:	4b8f      	ldr	r3, [pc, #572]	; (800fb8c <ProcessRadioRxDone+0x72c>)
 800f950:	4a90      	ldr	r2, [pc, #576]	; (800fb94 <ProcessRadioRxDone+0x734>)
 800f952:	589a      	ldr	r2, [r3, r2]
 800f954:	2481      	movs	r4, #129	; 0x81
 800f956:	193b      	adds	r3, r7, r4
 800f958:	781b      	ldrb	r3, [r3, #0]
 800f95a:	212c      	movs	r1, #44	; 0x2c
 800f95c:	434b      	muls	r3, r1
 800f95e:	18d3      	adds	r3, r2, r3
 800f960:	3354      	adds	r3, #84	; 0x54
 800f962:	681a      	ldr	r2, [r3, #0]
 800f964:	2330      	movs	r3, #48	; 0x30
 800f966:	18fb      	adds	r3, r7, r3
 800f968:	689b      	ldr	r3, [r3, #8]
 800f96a:	429a      	cmp	r2, r3
 800f96c:	d145      	bne.n	800f9fa <ProcessRadioRxDone+0x59a>
                    ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800f96e:	4b87      	ldr	r3, [pc, #540]	; (800fb8c <ProcessRadioRxDone+0x72c>)
 800f970:	4a88      	ldr	r2, [pc, #544]	; (800fb94 <ProcessRadioRxDone+0x734>)
 800f972:	589a      	ldr	r2, [r3, r2]
 800f974:	193b      	adds	r3, r7, r4
 800f976:	781b      	ldrb	r3, [r3, #0]
 800f978:	2152      	movs	r1, #82	; 0x52
 800f97a:	202c      	movs	r0, #44	; 0x2c
 800f97c:	4343      	muls	r3, r0
 800f97e:	18d3      	adds	r3, r2, r3
 800f980:	185b      	adds	r3, r3, r1
 800f982:	781b      	ldrb	r3, [r3, #0]
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800f984:	2b00      	cmp	r3, #0
 800f986:	d038      	beq.n	800f9fa <ProcessRadioRxDone+0x59a>
                {
                    multicast = 1;
 800f988:	2383      	movs	r3, #131	; 0x83
 800f98a:	18fb      	adds	r3, r7, r3
 800f98c:	2201      	movs	r2, #1
 800f98e:	701a      	strb	r2, [r3, #0]
                    addrID = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.GroupID;
 800f990:	4b7e      	ldr	r3, [pc, #504]	; (800fb8c <ProcessRadioRxDone+0x72c>)
 800f992:	4a80      	ldr	r2, [pc, #512]	; (800fb94 <ProcessRadioRxDone+0x734>)
 800f994:	5899      	ldr	r1, [r3, r2]
 800f996:	0025      	movs	r5, r4
 800f998:	193b      	adds	r3, r7, r4
 800f99a:	781a      	ldrb	r2, [r3, #0]
 800f99c:	2382      	movs	r3, #130	; 0x82
 800f99e:	18fb      	adds	r3, r7, r3
 800f9a0:	2053      	movs	r0, #83	; 0x53
 800f9a2:	242c      	movs	r4, #44	; 0x2c
 800f9a4:	4362      	muls	r2, r4
 800f9a6:	188a      	adds	r2, r1, r2
 800f9a8:	1812      	adds	r2, r2, r0
 800f9aa:	7812      	ldrb	r2, [r2, #0]
 800f9ac:	701a      	strb	r2, [r3, #0]
                    downLinkCounter = *( MacCtx.NvmCtx->MulticastChannelList[i].DownLinkCounter );
 800f9ae:	4b77      	ldr	r3, [pc, #476]	; (800fb8c <ProcessRadioRxDone+0x72c>)
 800f9b0:	4a78      	ldr	r2, [pc, #480]	; (800fb94 <ProcessRadioRxDone+0x734>)
 800f9b2:	589a      	ldr	r2, [r3, r2]
 800f9b4:	002c      	movs	r4, r5
 800f9b6:	193b      	adds	r3, r7, r4
 800f9b8:	781b      	ldrb	r3, [r3, #0]
 800f9ba:	212c      	movs	r1, #44	; 0x2c
 800f9bc:	434b      	muls	r3, r1
 800f9be:	18d3      	adds	r3, r2, r3
 800f9c0:	3370      	adds	r3, #112	; 0x70
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	607b      	str	r3, [r7, #4]
                    address = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address;
 800f9c8:	4b70      	ldr	r3, [pc, #448]	; (800fb8c <ProcessRadioRxDone+0x72c>)
 800f9ca:	4a72      	ldr	r2, [pc, #456]	; (800fb94 <ProcessRadioRxDone+0x734>)
 800f9cc:	589a      	ldr	r2, [r3, r2]
 800f9ce:	193b      	adds	r3, r7, r4
 800f9d0:	781b      	ldrb	r3, [r3, #0]
 800f9d2:	212c      	movs	r1, #44	; 0x2c
 800f9d4:	434b      	muls	r3, r1
 800f9d6:	18d3      	adds	r3, r2, r3
 800f9d8:	3354      	adds	r3, #84	; 0x54
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	2284      	movs	r2, #132	; 0x84
 800f9de:	18ba      	adds	r2, r7, r2
 800f9e0:	6013      	str	r3, [r2, #0]
                    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800f9e2:	4b6a      	ldr	r3, [pc, #424]	; (800fb8c <ProcessRadioRxDone+0x72c>)
 800f9e4:	4a6b      	ldr	r2, [pc, #428]	; (800fb94 <ProcessRadioRxDone+0x734>)
 800f9e6:	589b      	ldr	r3, [r3, r2]
 800f9e8:	227c      	movs	r2, #124	; 0x7c
 800f9ea:	5c9b      	ldrb	r3, [r3, r2]
 800f9ec:	2b02      	cmp	r3, #2
 800f9ee:	d110      	bne.n	800fa12 <ProcessRadioRxDone+0x5b2>
                    {
                        MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800f9f0:	4b66      	ldr	r3, [pc, #408]	; (800fb8c <ProcessRadioRxDone+0x72c>)
 800f9f2:	4a6c      	ldr	r2, [pc, #432]	; (800fba4 <ProcessRadioRxDone+0x744>)
 800f9f4:	2103      	movs	r1, #3
 800f9f6:	5499      	strb	r1, [r3, r2]
                    }
                    break;
 800f9f8:	e00b      	b.n	800fa12 <ProcessRadioRxDone+0x5b2>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f9fa:	2181      	movs	r1, #129	; 0x81
 800f9fc:	187b      	adds	r3, r7, r1
 800f9fe:	781a      	ldrb	r2, [r3, #0]
 800fa00:	187b      	adds	r3, r7, r1
 800fa02:	3201      	adds	r2, #1
 800fa04:	701a      	strb	r2, [r3, #0]
 800fa06:	2381      	movs	r3, #129	; 0x81
 800fa08:	18fb      	adds	r3, r7, r3
 800fa0a:	781b      	ldrb	r3, [r3, #0]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d09e      	beq.n	800f94e <ProcessRadioRxDone+0x4ee>
 800fa10:	e000      	b.n	800fa14 <ProcessRadioRxDone+0x5b4>
                    break;
 800fa12:	46c0      	nop			; (mov r8, r8)
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800fa14:	2383      	movs	r3, #131	; 0x83
 800fa16:	18fb      	adds	r3, r7, r3
 800fa18:	781b      	ldrb	r3, [r3, #0]
 800fa1a:	2b01      	cmp	r3, #1
 800fa1c:	d119      	bne.n	800fa52 <ProcessRadioRxDone+0x5f2>
 800fa1e:	1cbb      	adds	r3, r7, #2
 800fa20:	781b      	ldrb	r3, [r3, #0]
 800fa22:	2b03      	cmp	r3, #3
 800fa24:	d10e      	bne.n	800fa44 <ProcessRadioRxDone+0x5e4>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800fa26:	2130      	movs	r1, #48	; 0x30
 800fa28:	187b      	adds	r3, r7, r1
 800fa2a:	7b1b      	ldrb	r3, [r3, #12]
 800fa2c:	2220      	movs	r2, #32
 800fa2e:	4013      	ands	r3, r2
 800fa30:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d106      	bne.n	800fa44 <ProcessRadioRxDone+0x5e4>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800fa36:	187b      	adds	r3, r7, r1
 800fa38:	7b1b      	ldrb	r3, [r3, #12]
 800fa3a:	2240      	movs	r2, #64	; 0x40
 800fa3c:	4013      	ands	r3, r2
 800fa3e:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d006      	beq.n	800fa52 <ProcessRadioRxDone+0x5f2>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fa44:	4b51      	ldr	r3, [pc, #324]	; (800fb8c <ProcessRadioRxDone+0x72c>)
 800fa46:	4a54      	ldr	r2, [pc, #336]	; (800fb98 <ProcessRadioRxDone+0x738>)
 800fa48:	2101      	movs	r1, #1
 800fa4a:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800fa4c:	f7ff fcdc 	bl	800f408 <PrepareRxDoneAbort>
                return;
 800fa50:	e234      	b.n	800febc <ProcessRadioRxDone+0xa5c>
            }

            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800fa52:	2164      	movs	r1, #100	; 0x64
 800fa54:	187b      	adds	r3, r7, r1
 800fa56:	2215      	movs	r2, #21
 800fa58:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800fa5a:	4b4c      	ldr	r3, [pc, #304]	; (800fb8c <ProcessRadioRxDone+0x72c>)
 800fa5c:	4a4d      	ldr	r2, [pc, #308]	; (800fb94 <ProcessRadioRxDone+0x734>)
 800fa5e:	589b      	ldr	r3, [r3, r2]
 800fa60:	781b      	ldrb	r3, [r3, #0]
 800fa62:	187a      	adds	r2, r7, r1
 800fa64:	0011      	movs	r1, r2
 800fa66:	0018      	movs	r0, r3
 800fa68:	f007 f913 	bl	8016c92 <RegionGetPhyParam>
 800fa6c:	0003      	movs	r3, r0
 800fa6e:	001a      	movs	r2, r3
 800fa70:	2060      	movs	r0, #96	; 0x60
 800fa72:	183b      	adds	r3, r7, r0
 800fa74:	601a      	str	r2, [r3, #0]

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, MacCtx.NvmCtx->Version, phyParam.Value, &fCntID, &downLinkCounter );
 800fa76:	1cbb      	adds	r3, r7, #2
 800fa78:	781d      	ldrb	r5, [r3, #0]
 800fa7a:	4b44      	ldr	r3, [pc, #272]	; (800fb8c <ProcessRadioRxDone+0x72c>)
 800fa7c:	4a45      	ldr	r2, [pc, #276]	; (800fb94 <ProcessRadioRxDone+0x734>)
 800fa7e:	5899      	ldr	r1, [r3, r2]
 800fa80:	183b      	adds	r3, r7, r0
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	b29b      	uxth	r3, r3
 800fa86:	2280      	movs	r2, #128	; 0x80
 800fa88:	18bc      	adds	r4, r7, r2
 800fa8a:	22b0      	movs	r2, #176	; 0xb0
 800fa8c:	0052      	lsls	r2, r2, #1
 800fa8e:	588e      	ldr	r6, [r1, r2]
 800fa90:	2130      	movs	r1, #48	; 0x30
 800fa92:	1879      	adds	r1, r7, r1
 800fa94:	2082      	movs	r0, #130	; 0x82
 800fa96:	183a      	adds	r2, r7, r0
 800fa98:	7810      	ldrb	r0, [r2, #0]
 800fa9a:	1d3a      	adds	r2, r7, #4
 800fa9c:	9202      	str	r2, [sp, #8]
 800fa9e:	1cfa      	adds	r2, r7, #3
 800faa0:	9201      	str	r2, [sp, #4]
 800faa2:	9300      	str	r3, [sp, #0]
 800faa4:	0033      	movs	r3, r6
 800faa6:	000a      	movs	r2, r1
 800faa8:	0029      	movs	r1, r5
 800faaa:	f000 fe91 	bl	80107d0 <GetFCntDown>
 800faae:	0003      	movs	r3, r0
 800fab0:	7023      	strb	r3, [r4, #0]
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800fab2:	2280      	movs	r2, #128	; 0x80
 800fab4:	18bb      	adds	r3, r7, r2
 800fab6:	781b      	ldrb	r3, [r3, #0]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d040      	beq.n	800fb3e <ProcessRadioRxDone+0x6de>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800fabc:	18bb      	adds	r3, r7, r2
 800fabe:	781b      	ldrb	r3, [r3, #0]
 800fac0:	2b07      	cmp	r3, #7
 800fac2:	d126      	bne.n	800fb12 <ProcessRadioRxDone+0x6b2>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800fac4:	4b31      	ldr	r3, [pc, #196]	; (800fb8c <ProcessRadioRxDone+0x72c>)
 800fac6:	4a34      	ldr	r2, [pc, #208]	; (800fb98 <ProcessRadioRxDone+0x738>)
 800fac8:	2108      	movs	r1, #8
 800faca:	5499      	strb	r1, [r3, r2]
                    if( ( MacCtx.NvmCtx->Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( MacCtx.NvmCtx->LastRxMic == macMsgData.MIC ) )
 800facc:	4b2f      	ldr	r3, [pc, #188]	; (800fb8c <ProcessRadioRxDone+0x72c>)
 800face:	4a31      	ldr	r2, [pc, #196]	; (800fb94 <ProcessRadioRxDone+0x734>)
 800fad0:	589a      	ldr	r2, [r3, r2]
 800fad2:	23b1      	movs	r3, #177	; 0xb1
 800fad4:	005b      	lsls	r3, r3, #1
 800fad6:	5cd3      	ldrb	r3, [r2, r3]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d128      	bne.n	800fb2e <ProcessRadioRxDone+0x6ce>
 800fadc:	2374      	movs	r3, #116	; 0x74
 800fade:	18fb      	adds	r3, r7, r3
 800fae0:	781b      	ldrb	r3, [r3, #0]
 800fae2:	221f      	movs	r2, #31
 800fae4:	4393      	bics	r3, r2
 800fae6:	b2db      	uxtb	r3, r3
 800fae8:	2ba0      	cmp	r3, #160	; 0xa0
 800faea:	d120      	bne.n	800fb2e <ProcessRadioRxDone+0x6ce>
 800faec:	4b27      	ldr	r3, [pc, #156]	; (800fb8c <ProcessRadioRxDone+0x72c>)
 800faee:	4a29      	ldr	r2, [pc, #164]	; (800fb94 <ProcessRadioRxDone+0x734>)
 800faf0:	589a      	ldr	r2, [r3, r2]
 800faf2:	23b4      	movs	r3, #180	; 0xb4
 800faf4:	005b      	lsls	r3, r3, #1
 800faf6:	58d2      	ldr	r2, [r2, r3]
 800faf8:	2130      	movs	r1, #48	; 0x30
 800fafa:	187b      	adds	r3, r7, r1
 800fafc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fafe:	429a      	cmp	r2, r3
 800fb00:	d115      	bne.n	800fb2e <ProcessRadioRxDone+0x6ce>
                    {
                        MacCtx.NvmCtx->SrvAckRequested = true;
 800fb02:	4b22      	ldr	r3, [pc, #136]	; (800fb8c <ProcessRadioRxDone+0x72c>)
 800fb04:	4a23      	ldr	r2, [pc, #140]	; (800fb94 <ProcessRadioRxDone+0x734>)
 800fb06:	589a      	ldr	r2, [r3, r2]
 800fb08:	234c      	movs	r3, #76	; 0x4c
 800fb0a:	33ff      	adds	r3, #255	; 0xff
 800fb0c:	2101      	movs	r1, #1
 800fb0e:	54d1      	strb	r1, [r2, r3]
 800fb10:	e00d      	b.n	800fb2e <ProcessRadioRxDone+0x6ce>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800fb12:	2380      	movs	r3, #128	; 0x80
 800fb14:	18fb      	adds	r3, r7, r3
 800fb16:	781b      	ldrb	r3, [r3, #0]
 800fb18:	2b08      	cmp	r3, #8
 800fb1a:	d104      	bne.n	800fb26 <ProcessRadioRxDone+0x6c6>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800fb1c:	4b1b      	ldr	r3, [pc, #108]	; (800fb8c <ProcessRadioRxDone+0x72c>)
 800fb1e:	4a1e      	ldr	r2, [pc, #120]	; (800fb98 <ProcessRadioRxDone+0x738>)
 800fb20:	210a      	movs	r1, #10
 800fb22:	5499      	strb	r1, [r3, r2]
 800fb24:	e003      	b.n	800fb2e <ProcessRadioRxDone+0x6ce>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fb26:	4b19      	ldr	r3, [pc, #100]	; (800fb8c <ProcessRadioRxDone+0x72c>)
 800fb28:	4a1b      	ldr	r2, [pc, #108]	; (800fb98 <ProcessRadioRxDone+0x738>)
 800fb2a:	2101      	movs	r1, #1
 800fb2c:	5499      	strb	r1, [r3, r2]
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800fb2e:	6879      	ldr	r1, [r7, #4]
 800fb30:	4a16      	ldr	r2, [pc, #88]	; (800fb8c <ProcessRadioRxDone+0x72c>)
 800fb32:	2386      	movs	r3, #134	; 0x86
 800fb34:	00db      	lsls	r3, r3, #3
 800fb36:	50d1      	str	r1, [r2, r3]
                PrepareRxDoneAbort( );
 800fb38:	f7ff fc66 	bl	800f408 <PrepareRxDoneAbort>
                return;
 800fb3c:	e1be      	b.n	800febc <ProcessRadioRxDone+0xa5c>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800fb3e:	1cfb      	adds	r3, r7, #3
 800fb40:	781a      	ldrb	r2, [r3, #0]
 800fb42:	687d      	ldr	r5, [r7, #4]
 800fb44:	2680      	movs	r6, #128	; 0x80
 800fb46:	19bc      	adds	r4, r7, r6
 800fb48:	2384      	movs	r3, #132	; 0x84
 800fb4a:	18fb      	adds	r3, r7, r3
 800fb4c:	6819      	ldr	r1, [r3, #0]
 800fb4e:	2382      	movs	r3, #130	; 0x82
 800fb50:	18fb      	adds	r3, r7, r3
 800fb52:	7818      	ldrb	r0, [r3, #0]
 800fb54:	2330      	movs	r3, #48	; 0x30
 800fb56:	18fb      	adds	r3, r7, r3
 800fb58:	9300      	str	r3, [sp, #0]
 800fb5a:	002b      	movs	r3, r5
 800fb5c:	f006 fb9c 	bl	8016298 <LoRaMacCryptoUnsecureMessage>
 800fb60:	0003      	movs	r3, r0
 800fb62:	7023      	strb	r3, [r4, #0]
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800fb64:	19bb      	adds	r3, r7, r6
 800fb66:	781b      	ldrb	r3, [r3, #0]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d01d      	beq.n	800fba8 <ProcessRadioRxDone+0x748>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800fb6c:	19bb      	adds	r3, r7, r6
 800fb6e:	781b      	ldrb	r3, [r3, #0]
 800fb70:	2b02      	cmp	r3, #2
 800fb72:	d104      	bne.n	800fb7e <ProcessRadioRxDone+0x71e>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800fb74:	4b05      	ldr	r3, [pc, #20]	; (800fb8c <ProcessRadioRxDone+0x72c>)
 800fb76:	4a08      	ldr	r2, [pc, #32]	; (800fb98 <ProcessRadioRxDone+0x738>)
 800fb78:	210b      	movs	r1, #11
 800fb7a:	5499      	strb	r1, [r3, r2]
 800fb7c:	e003      	b.n	800fb86 <ProcessRadioRxDone+0x726>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800fb7e:	4b03      	ldr	r3, [pc, #12]	; (800fb8c <ProcessRadioRxDone+0x72c>)
 800fb80:	4a05      	ldr	r2, [pc, #20]	; (800fb98 <ProcessRadioRxDone+0x738>)
 800fb82:	210c      	movs	r1, #12
 800fb84:	5499      	strb	r1, [r3, r2]
                }
                PrepareRxDoneAbort( );
 800fb86:	f7ff fc3f 	bl	800f408 <PrepareRxDoneAbort>
                return;
 800fb8a:	e197      	b.n	800febc <ProcessRadioRxDone+0xa5c>
 800fb8c:	200005b8 	.word	0x200005b8
 800fb90:	0000041c 	.word	0x0000041c
 800fb94:	00000484 	.word	0x00000484
 800fb98:	0000041d 	.word	0x0000041d
 800fb9c:	200007f0 	.word	0x200007f0
 800fba0:	00000434 	.word	0x00000434
 800fba4:	0000042d 	.word	0x0000042d
            }

            // Frame is valid
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800fba8:	4bc6      	ldr	r3, [pc, #792]	; (800fec4 <ProcessRadioRxDone+0xa64>)
 800fbaa:	4ac7      	ldr	r2, [pc, #796]	; (800fec8 <ProcessRadioRxDone+0xa68>)
 800fbac:	2100      	movs	r1, #0
 800fbae:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Multicast = multicast;
 800fbb0:	4bc4      	ldr	r3, [pc, #784]	; (800fec4 <ProcessRadioRxDone+0xa64>)
 800fbb2:	2283      	movs	r2, #131	; 0x83
 800fbb4:	18ba      	adds	r2, r7, r2
 800fbb6:	49c5      	ldr	r1, [pc, #788]	; (800fecc <ProcessRadioRxDone+0xa6c>)
 800fbb8:	7812      	ldrb	r2, [r2, #0]
 800fbba:	545a      	strb	r2, [r3, r1]
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800fbbc:	2030      	movs	r0, #48	; 0x30
 800fbbe:	183b      	adds	r3, r7, r0
 800fbc0:	7b1b      	ldrb	r3, [r3, #12]
 800fbc2:	06db      	lsls	r3, r3, #27
 800fbc4:	0fdb      	lsrs	r3, r3, #31
 800fbc6:	b2db      	uxtb	r3, r3
 800fbc8:	0019      	movs	r1, r3
 800fbca:	4bbe      	ldr	r3, [pc, #760]	; (800fec4 <ProcessRadioRxDone+0xa64>)
 800fbcc:	4ac0      	ldr	r2, [pc, #768]	; (800fed0 <ProcessRadioRxDone+0xa70>)
 800fbce:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Buffer = NULL;
 800fbd0:	4bbc      	ldr	r3, [pc, #752]	; (800fec4 <ProcessRadioRxDone+0xa64>)
 800fbd2:	4ac0      	ldr	r2, [pc, #768]	; (800fed4 <ProcessRadioRxDone+0xa74>)
 800fbd4:	2100      	movs	r1, #0
 800fbd6:	5099      	str	r1, [r3, r2]
            MacCtx.McpsIndication.BufferSize = 0;
 800fbd8:	4aba      	ldr	r2, [pc, #744]	; (800fec4 <ProcessRadioRxDone+0xa64>)
 800fbda:	2385      	movs	r3, #133	; 0x85
 800fbdc:	00db      	lsls	r3, r3, #3
 800fbde:	2100      	movs	r1, #0
 800fbe0:	54d1      	strb	r1, [r2, r3]
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800fbe2:	6879      	ldr	r1, [r7, #4]
 800fbe4:	4ab7      	ldr	r2, [pc, #732]	; (800fec4 <ProcessRadioRxDone+0xa64>)
 800fbe6:	2386      	movs	r3, #134	; 0x86
 800fbe8:	00db      	lsls	r3, r3, #3
 800fbea:	50d1      	str	r1, [r2, r3]
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800fbec:	183b      	adds	r3, r7, r0
 800fbee:	7b1b      	ldrb	r3, [r3, #12]
 800fbf0:	069b      	lsls	r3, r3, #26
 800fbf2:	0fdb      	lsrs	r3, r3, #31
 800fbf4:	b2db      	uxtb	r3, r3
 800fbf6:	1e5a      	subs	r2, r3, #1
 800fbf8:	4193      	sbcs	r3, r2
 800fbfa:	b2d9      	uxtb	r1, r3
 800fbfc:	4bb1      	ldr	r3, [pc, #708]	; (800fec4 <ProcessRadioRxDone+0xa64>)
 800fbfe:	4ab6      	ldr	r2, [pc, #728]	; (800fed8 <ProcessRadioRxDone+0xa78>)
 800fc00:	5499      	strb	r1, [r3, r2]

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800fc02:	4bb0      	ldr	r3, [pc, #704]	; (800fec4 <ProcessRadioRxDone+0xa64>)
 800fc04:	4ab5      	ldr	r2, [pc, #724]	; (800fedc <ProcessRadioRxDone+0xa7c>)
 800fc06:	2100      	movs	r1, #0
 800fc08:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800fc0a:	183b      	adds	r3, r7, r0
 800fc0c:	7b1b      	ldrb	r3, [r3, #12]
 800fc0e:	069b      	lsls	r3, r3, #26
 800fc10:	0fdb      	lsrs	r3, r3, #31
 800fc12:	b2db      	uxtb	r3, r3
 800fc14:	1e5a      	subs	r2, r3, #1
 800fc16:	4193      	sbcs	r3, r2
 800fc18:	b2d9      	uxtb	r1, r3
 800fc1a:	4aaa      	ldr	r2, [pc, #680]	; (800fec4 <ProcessRadioRxDone+0xa64>)
 800fc1c:	2388      	movs	r3, #136	; 0x88
 800fc1e:	00db      	lsls	r3, r3, #3
 800fc20:	54d1      	strb	r1, [r2, r3]

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 800fc22:	4ba8      	ldr	r3, [pc, #672]	; (800fec4 <ProcessRadioRxDone+0xa64>)
 800fc24:	4aae      	ldr	r2, [pc, #696]	; (800fee0 <ProcessRadioRxDone+0xa80>)
 800fc26:	5c9b      	ldrb	r3, [r3, r2]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d004      	beq.n	800fc36 <ProcessRadioRxDone+0x7d6>
                ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_2 ) )
 800fc2c:	4ba5      	ldr	r3, [pc, #660]	; (800fec4 <ProcessRadioRxDone+0xa64>)
 800fc2e:	4aac      	ldr	r2, [pc, #688]	; (800fee0 <ProcessRadioRxDone+0xa80>)
 800fc30:	5c9b      	ldrb	r3, [r3, r2]
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 800fc32:	2b01      	cmp	r3, #1
 800fc34:	d105      	bne.n	800fc42 <ProcessRadioRxDone+0x7e2>
            {
                MacCtx.NvmCtx->AdrAckCounter = 0;
 800fc36:	4ba3      	ldr	r3, [pc, #652]	; (800fec4 <ProcessRadioRxDone+0xa64>)
 800fc38:	4aaa      	ldr	r2, [pc, #680]	; (800fee4 <ProcessRadioRxDone+0xa84>)
 800fc3a:	589b      	ldr	r3, [r3, r2]
 800fc3c:	2280      	movs	r2, #128	; 0x80
 800fc3e:	2100      	movs	r1, #0
 800fc40:	5099      	str	r1, [r3, r2]
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800fc42:	2383      	movs	r3, #131	; 0x83
 800fc44:	18fb      	adds	r3, r7, r3
 800fc46:	781b      	ldrb	r3, [r3, #0]
 800fc48:	2b01      	cmp	r3, #1
 800fc4a:	d104      	bne.n	800fc56 <ProcessRadioRxDone+0x7f6>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800fc4c:	4b9d      	ldr	r3, [pc, #628]	; (800fec4 <ProcessRadioRxDone+0xa64>)
 800fc4e:	4aa6      	ldr	r2, [pc, #664]	; (800fee8 <ProcessRadioRxDone+0xa88>)
 800fc50:	2102      	movs	r1, #2
 800fc52:	5499      	strb	r1, [r3, r2]
 800fc54:	e02f      	b.n	800fcb6 <ProcessRadioRxDone+0x856>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800fc56:	2374      	movs	r3, #116	; 0x74
 800fc58:	18fb      	adds	r3, r7, r3
 800fc5a:	781b      	ldrb	r3, [r3, #0]
 800fc5c:	221f      	movs	r2, #31
 800fc5e:	4393      	bics	r3, r2
 800fc60:	b2db      	uxtb	r3, r3
 800fc62:	2ba0      	cmp	r3, #160	; 0xa0
 800fc64:	d11c      	bne.n	800fca0 <ProcessRadioRxDone+0x840>
                {
                    MacCtx.NvmCtx->SrvAckRequested = true;
 800fc66:	4b97      	ldr	r3, [pc, #604]	; (800fec4 <ProcessRadioRxDone+0xa64>)
 800fc68:	4a9e      	ldr	r2, [pc, #632]	; (800fee4 <ProcessRadioRxDone+0xa84>)
 800fc6a:	589a      	ldr	r2, [r3, r2]
 800fc6c:	234c      	movs	r3, #76	; 0x4c
 800fc6e:	33ff      	adds	r3, #255	; 0xff
 800fc70:	2101      	movs	r1, #1
 800fc72:	54d1      	strb	r1, [r2, r3]
                    if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 800fc74:	4b93      	ldr	r3, [pc, #588]	; (800fec4 <ProcessRadioRxDone+0xa64>)
 800fc76:	4a9b      	ldr	r2, [pc, #620]	; (800fee4 <ProcessRadioRxDone+0xa84>)
 800fc78:	589a      	ldr	r2, [r3, r2]
 800fc7a:	23b1      	movs	r3, #177	; 0xb1
 800fc7c:	005b      	lsls	r3, r3, #1
 800fc7e:	5cd3      	ldrb	r3, [r2, r3]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d108      	bne.n	800fc96 <ProcessRadioRxDone+0x836>
                    {
                        MacCtx.NvmCtx->LastRxMic = macMsgData.MIC;
 800fc84:	4b8f      	ldr	r3, [pc, #572]	; (800fec4 <ProcessRadioRxDone+0xa64>)
 800fc86:	4a97      	ldr	r2, [pc, #604]	; (800fee4 <ProcessRadioRxDone+0xa84>)
 800fc88:	589a      	ldr	r2, [r3, r2]
 800fc8a:	2330      	movs	r3, #48	; 0x30
 800fc8c:	18fb      	adds	r3, r7, r3
 800fc8e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800fc90:	23b4      	movs	r3, #180	; 0xb4
 800fc92:	005b      	lsls	r3, r3, #1
 800fc94:	50d1      	str	r1, [r2, r3]
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800fc96:	4b8b      	ldr	r3, [pc, #556]	; (800fec4 <ProcessRadioRxDone+0xa64>)
 800fc98:	4a93      	ldr	r2, [pc, #588]	; (800fee8 <ProcessRadioRxDone+0xa88>)
 800fc9a:	2101      	movs	r1, #1
 800fc9c:	5499      	strb	r1, [r3, r2]
 800fc9e:	e00a      	b.n	800fcb6 <ProcessRadioRxDone+0x856>
                }
                else
                {
                    MacCtx.NvmCtx->SrvAckRequested = false;
 800fca0:	4b88      	ldr	r3, [pc, #544]	; (800fec4 <ProcessRadioRxDone+0xa64>)
 800fca2:	4a90      	ldr	r2, [pc, #576]	; (800fee4 <ProcessRadioRxDone+0xa84>)
 800fca4:	589a      	ldr	r2, [r3, r2]
 800fca6:	234c      	movs	r3, #76	; 0x4c
 800fca8:	33ff      	adds	r3, #255	; 0xff
 800fcaa:	2100      	movs	r1, #0
 800fcac:	54d1      	strb	r1, [r2, r3]
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800fcae:	4b85      	ldr	r3, [pc, #532]	; (800fec4 <ProcessRadioRxDone+0xa64>)
 800fcb0:	4a8d      	ldr	r2, [pc, #564]	; (800fee8 <ProcessRadioRxDone+0xa88>)
 800fcb2:	2100      	movs	r1, #0
 800fcb4:	5499      	strb	r1, [r3, r2]
                }
            }

            RemoveMacCommands( MacCtx.McpsIndication.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800fcb6:	4b83      	ldr	r3, [pc, #524]	; (800fec4 <ProcessRadioRxDone+0xa64>)
 800fcb8:	4a89      	ldr	r2, [pc, #548]	; (800fee0 <ProcessRadioRxDone+0xa80>)
 800fcba:	5c98      	ldrb	r0, [r3, r2]
 800fcbc:	4b81      	ldr	r3, [pc, #516]	; (800fec4 <ProcessRadioRxDone+0xa64>)
 800fcbe:	4a8b      	ldr	r2, [pc, #556]	; (800feec <ProcessRadioRxDone+0xa8c>)
 800fcc0:	5c9a      	ldrb	r2, [r3, r2]
 800fcc2:	2330      	movs	r3, #48	; 0x30
 800fcc4:	18fb      	adds	r3, r7, r3
 800fcc6:	7b1b      	ldrb	r3, [r3, #12]
 800fcc8:	1c19      	adds	r1, r3, #0
 800fcca:	f002 f94f 	bl	8011f6c <RemoveMacCommands>

            switch( fType )
 800fcce:	1cbb      	adds	r3, r7, #2
 800fcd0:	781b      	ldrb	r3, [r3, #0]
 800fcd2:	2b03      	cmp	r3, #3
 800fcd4:	d100      	bne.n	800fcd8 <ProcessRadioRxDone+0x878>
 800fcd6:	e073      	b.n	800fdc0 <ProcessRadioRxDone+0x960>
 800fcd8:	dd00      	ble.n	800fcdc <ProcessRadioRxDone+0x87c>
 800fcda:	e089      	b.n	800fdf0 <ProcessRadioRxDone+0x990>
 800fcdc:	2b02      	cmp	r3, #2
 800fcde:	d055      	beq.n	800fd8c <ProcessRadioRxDone+0x92c>
 800fce0:	dd00      	ble.n	800fce4 <ProcessRadioRxDone+0x884>
 800fce2:	e085      	b.n	800fdf0 <ProcessRadioRxDone+0x990>
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d002      	beq.n	800fcee <ProcessRadioRxDone+0x88e>
 800fce8:	2b01      	cmp	r3, #1
 800fcea:	d030      	beq.n	800fd4e <ProcessRadioRxDone+0x8ee>
 800fcec:	e080      	b.n	800fdf0 <ProcessRadioRxDone+0x990>
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 800fcee:	2030      	movs	r0, #48	; 0x30
 800fcf0:	183b      	adds	r3, r7, r0
 800fcf2:	7b1b      	ldrb	r3, [r3, #12]
 800fcf4:	071b      	lsls	r3, r3, #28
 800fcf6:	0f1b      	lsrs	r3, r3, #28
 800fcf8:	b2db      	uxtb	r3, r3
 800fcfa:	001c      	movs	r4, r3
 800fcfc:	4b71      	ldr	r3, [pc, #452]	; (800fec4 <ProcessRadioRxDone+0xa64>)
 800fcfe:	4a78      	ldr	r2, [pc, #480]	; (800fee0 <ProcessRadioRxDone+0xa80>)
 800fd00:	5c9b      	ldrb	r3, [r3, r2]
 800fd02:	2277      	movs	r2, #119	; 0x77
 800fd04:	18ba      	adds	r2, r7, r2
 800fd06:	2100      	movs	r1, #0
 800fd08:	5651      	ldrsb	r1, [r2, r1]
 800fd0a:	0005      	movs	r5, r0
 800fd0c:	183a      	adds	r2, r7, r0
 800fd0e:	3210      	adds	r2, #16
 800fd10:	0010      	movs	r0, r2
 800fd12:	9300      	str	r3, [sp, #0]
 800fd14:	000b      	movs	r3, r1
 800fd16:	0022      	movs	r2, r4
 800fd18:	2100      	movs	r1, #0
 800fd1a:	f000 ff4f 	bl	8010bbc <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800fd1e:	0028      	movs	r0, r5
 800fd20:	183b      	adds	r3, r7, r0
 800fd22:	2220      	movs	r2, #32
 800fd24:	5c99      	ldrb	r1, [r3, r2]
 800fd26:	4b67      	ldr	r3, [pc, #412]	; (800fec4 <ProcessRadioRxDone+0xa64>)
 800fd28:	4a71      	ldr	r2, [pc, #452]	; (800fef0 <ProcessRadioRxDone+0xa90>)
 800fd2a:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800fd2c:	183b      	adds	r3, r7, r0
 800fd2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fd30:	4b64      	ldr	r3, [pc, #400]	; (800fec4 <ProcessRadioRxDone+0xa64>)
 800fd32:	4968      	ldr	r1, [pc, #416]	; (800fed4 <ProcessRadioRxDone+0xa74>)
 800fd34:	505a      	str	r2, [r3, r1]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800fd36:	183b      	adds	r3, r7, r0
 800fd38:	2228      	movs	r2, #40	; 0x28
 800fd3a:	5c99      	ldrb	r1, [r3, r2]
 800fd3c:	4a61      	ldr	r2, [pc, #388]	; (800fec4 <ProcessRadioRxDone+0xa64>)
 800fd3e:	2385      	movs	r3, #133	; 0x85
 800fd40:	00db      	lsls	r3, r3, #3
 800fd42:	54d1      	strb	r1, [r2, r3]
                    MacCtx.McpsIndication.RxData = true;
 800fd44:	4b5f      	ldr	r3, [pc, #380]	; (800fec4 <ProcessRadioRxDone+0xa64>)
 800fd46:	4a6b      	ldr	r2, [pc, #428]	; (800fef4 <ProcessRadioRxDone+0xa94>)
 800fd48:	2101      	movs	r1, #1
 800fd4a:	5499      	strb	r1, [r3, r2]
                    break;
 800fd4c:	e057      	b.n	800fdfe <ProcessRadioRxDone+0x99e>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 800fd4e:	2030      	movs	r0, #48	; 0x30
 800fd50:	183b      	adds	r3, r7, r0
 800fd52:	7b1b      	ldrb	r3, [r3, #12]
 800fd54:	071b      	lsls	r3, r3, #28
 800fd56:	0f1b      	lsrs	r3, r3, #28
 800fd58:	b2db      	uxtb	r3, r3
 800fd5a:	001c      	movs	r4, r3
 800fd5c:	4b59      	ldr	r3, [pc, #356]	; (800fec4 <ProcessRadioRxDone+0xa64>)
 800fd5e:	4a60      	ldr	r2, [pc, #384]	; (800fee0 <ProcessRadioRxDone+0xa80>)
 800fd60:	5c9b      	ldrb	r3, [r3, r2]
 800fd62:	2277      	movs	r2, #119	; 0x77
 800fd64:	18ba      	adds	r2, r7, r2
 800fd66:	2100      	movs	r1, #0
 800fd68:	5651      	ldrsb	r1, [r2, r1]
 800fd6a:	0005      	movs	r5, r0
 800fd6c:	183a      	adds	r2, r7, r0
 800fd6e:	3210      	adds	r2, #16
 800fd70:	0010      	movs	r0, r2
 800fd72:	9300      	str	r3, [sp, #0]
 800fd74:	000b      	movs	r3, r1
 800fd76:	0022      	movs	r2, r4
 800fd78:	2100      	movs	r1, #0
 800fd7a:	f000 ff1f 	bl	8010bbc <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800fd7e:	197b      	adds	r3, r7, r5
 800fd80:	2220      	movs	r2, #32
 800fd82:	5c99      	ldrb	r1, [r3, r2]
 800fd84:	4b4f      	ldr	r3, [pc, #316]	; (800fec4 <ProcessRadioRxDone+0xa64>)
 800fd86:	4a5a      	ldr	r2, [pc, #360]	; (800fef0 <ProcessRadioRxDone+0xa90>)
 800fd88:	5499      	strb	r1, [r3, r2]
                    break;
 800fd8a:	e038      	b.n	800fdfe <ProcessRadioRxDone+0x99e>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
 800fd8c:	2430      	movs	r4, #48	; 0x30
 800fd8e:	193b      	adds	r3, r7, r4
 800fd90:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800fd92:	193b      	adds	r3, r7, r4
 800fd94:	2228      	movs	r2, #40	; 0x28
 800fd96:	5c99      	ldrb	r1, [r3, r2]
 800fd98:	4b4a      	ldr	r3, [pc, #296]	; (800fec4 <ProcessRadioRxDone+0xa64>)
 800fd9a:	4a51      	ldr	r2, [pc, #324]	; (800fee0 <ProcessRadioRxDone+0xa80>)
 800fd9c:	5c9b      	ldrb	r3, [r3, r2]
 800fd9e:	2277      	movs	r2, #119	; 0x77
 800fda0:	18ba      	adds	r2, r7, r2
 800fda2:	7812      	ldrb	r2, [r2, #0]
 800fda4:	b252      	sxtb	r2, r2
 800fda6:	9300      	str	r3, [sp, #0]
 800fda8:	0013      	movs	r3, r2
 800fdaa:	000a      	movs	r2, r1
 800fdac:	2100      	movs	r1, #0
 800fdae:	f000 ff05 	bl	8010bbc <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800fdb2:	193b      	adds	r3, r7, r4
 800fdb4:	2220      	movs	r2, #32
 800fdb6:	5c99      	ldrb	r1, [r3, r2]
 800fdb8:	4b42      	ldr	r3, [pc, #264]	; (800fec4 <ProcessRadioRxDone+0xa64>)
 800fdba:	4a4d      	ldr	r2, [pc, #308]	; (800fef0 <ProcessRadioRxDone+0xa90>)
 800fdbc:	5499      	strb	r1, [r3, r2]
                    break;
 800fdbe:	e01e      	b.n	800fdfe <ProcessRadioRxDone+0x99e>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800fdc0:	2030      	movs	r0, #48	; 0x30
 800fdc2:	183b      	adds	r3, r7, r0
 800fdc4:	2220      	movs	r2, #32
 800fdc6:	5c99      	ldrb	r1, [r3, r2]
 800fdc8:	4b3e      	ldr	r3, [pc, #248]	; (800fec4 <ProcessRadioRxDone+0xa64>)
 800fdca:	4a49      	ldr	r2, [pc, #292]	; (800fef0 <ProcessRadioRxDone+0xa90>)
 800fdcc:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800fdce:	183b      	adds	r3, r7, r0
 800fdd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fdd2:	4b3c      	ldr	r3, [pc, #240]	; (800fec4 <ProcessRadioRxDone+0xa64>)
 800fdd4:	493f      	ldr	r1, [pc, #252]	; (800fed4 <ProcessRadioRxDone+0xa74>)
 800fdd6:	505a      	str	r2, [r3, r1]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800fdd8:	183b      	adds	r3, r7, r0
 800fdda:	2228      	movs	r2, #40	; 0x28
 800fddc:	5c99      	ldrb	r1, [r3, r2]
 800fdde:	4a39      	ldr	r2, [pc, #228]	; (800fec4 <ProcessRadioRxDone+0xa64>)
 800fde0:	2385      	movs	r3, #133	; 0x85
 800fde2:	00db      	lsls	r3, r3, #3
 800fde4:	54d1      	strb	r1, [r2, r3]
                    MacCtx.McpsIndication.RxData = true;
 800fde6:	4b37      	ldr	r3, [pc, #220]	; (800fec4 <ProcessRadioRxDone+0xa64>)
 800fde8:	4a42      	ldr	r2, [pc, #264]	; (800fef4 <ProcessRadioRxDone+0xa94>)
 800fdea:	2101      	movs	r1, #1
 800fdec:	5499      	strb	r1, [r3, r2]
                    break;
 800fdee:	e006      	b.n	800fdfe <ProcessRadioRxDone+0x99e>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fdf0:	4b34      	ldr	r3, [pc, #208]	; (800fec4 <ProcessRadioRxDone+0xa64>)
 800fdf2:	4a35      	ldr	r2, [pc, #212]	; (800fec8 <ProcessRadioRxDone+0xa68>)
 800fdf4:	2101      	movs	r1, #1
 800fdf6:	5499      	strb	r1, [r3, r2]
                    PrepareRxDoneAbort( );
 800fdf8:	f7ff fb06 	bl	800f408 <PrepareRxDoneAbort>
                    break;
 800fdfc:	46c0      	nop			; (mov r8, r8)
            }

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800fdfe:	4b31      	ldr	r3, [pc, #196]	; (800fec4 <ProcessRadioRxDone+0xa64>)
 800fe00:	4a3d      	ldr	r2, [pc, #244]	; (800fef8 <ProcessRadioRxDone+0xa98>)
 800fe02:	5c99      	ldrb	r1, [r3, r2]
 800fe04:	2002      	movs	r0, #2
 800fe06:	4301      	orrs	r1, r0
 800fe08:	5499      	strb	r1, [r3, r2]

            break;
 800fe0a:	e036      	b.n	800fe7a <ProcessRadioRxDone+0xa1a>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800fe0c:	2476      	movs	r4, #118	; 0x76
 800fe0e:	193b      	adds	r3, r7, r4
 800fe10:	781b      	ldrb	r3, [r3, #0]
 800fe12:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800fe14:	18d1      	adds	r1, r2, r3
 800fe16:	193b      	adds	r3, r7, r4
 800fe18:	781b      	ldrb	r3, [r3, #0]
 800fe1a:	b29b      	uxth	r3, r3
 800fe1c:	257a      	movs	r5, #122	; 0x7a
 800fe1e:	197a      	adds	r2, r7, r5
 800fe20:	8812      	ldrh	r2, [r2, #0]
 800fe22:	1ad3      	subs	r3, r2, r3
 800fe24:	b29a      	uxth	r2, r3
 800fe26:	4b35      	ldr	r3, [pc, #212]	; (800fefc <ProcessRadioRxDone+0xa9c>)
 800fe28:	0018      	movs	r0, r3
 800fe2a:	f009 fbb1 	bl	8019590 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800fe2e:	4b25      	ldr	r3, [pc, #148]	; (800fec4 <ProcessRadioRxDone+0xa64>)
 800fe30:	4a2d      	ldr	r2, [pc, #180]	; (800fee8 <ProcessRadioRxDone+0xa88>)
 800fe32:	2103      	movs	r1, #3
 800fe34:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800fe36:	4b23      	ldr	r3, [pc, #140]	; (800fec4 <ProcessRadioRxDone+0xa64>)
 800fe38:	4a23      	ldr	r2, [pc, #140]	; (800fec8 <ProcessRadioRxDone+0xa68>)
 800fe3a:	2100      	movs	r1, #0
 800fe3c:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800fe3e:	4b21      	ldr	r3, [pc, #132]	; (800fec4 <ProcessRadioRxDone+0xa64>)
 800fe40:	4924      	ldr	r1, [pc, #144]	; (800fed4 <ProcessRadioRxDone+0xa74>)
 800fe42:	4a2e      	ldr	r2, [pc, #184]	; (800fefc <ProcessRadioRxDone+0xa9c>)
 800fe44:	505a      	str	r2, [r3, r1]
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800fe46:	197b      	adds	r3, r7, r5
 800fe48:	881b      	ldrh	r3, [r3, #0]
 800fe4a:	b2da      	uxtb	r2, r3
 800fe4c:	193b      	adds	r3, r7, r4
 800fe4e:	781b      	ldrb	r3, [r3, #0]
 800fe50:	1ad3      	subs	r3, r2, r3
 800fe52:	b2d9      	uxtb	r1, r3
 800fe54:	4a1b      	ldr	r2, [pc, #108]	; (800fec4 <ProcessRadioRxDone+0xa64>)
 800fe56:	2385      	movs	r3, #133	; 0x85
 800fe58:	00db      	lsls	r3, r3, #3
 800fe5a:	54d1      	strb	r1, [r2, r3]

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800fe5c:	4b19      	ldr	r3, [pc, #100]	; (800fec4 <ProcessRadioRxDone+0xa64>)
 800fe5e:	4a26      	ldr	r2, [pc, #152]	; (800fef8 <ProcessRadioRxDone+0xa98>)
 800fe60:	5c99      	ldrb	r1, [r3, r2]
 800fe62:	2002      	movs	r0, #2
 800fe64:	4301      	orrs	r1, r0
 800fe66:	5499      	strb	r1, [r3, r2]
            break;
 800fe68:	e007      	b.n	800fe7a <ProcessRadioRxDone+0xa1a>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fe6a:	4b16      	ldr	r3, [pc, #88]	; (800fec4 <ProcessRadioRxDone+0xa64>)
 800fe6c:	4a16      	ldr	r2, [pc, #88]	; (800fec8 <ProcessRadioRxDone+0xa68>)
 800fe6e:	2101      	movs	r1, #1
 800fe70:	5499      	strb	r1, [r3, r2]
            PrepareRxDoneAbort( );
 800fe72:	f7ff fac9 	bl	800f408 <PrepareRxDoneAbort>
            break;
 800fe76:	e000      	b.n	800fe7a <ProcessRadioRxDone+0xa1a>
            break;
 800fe78:	46c0      	nop			; (mov r8, r8)
    }

    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 800fe7a:	4b12      	ldr	r3, [pc, #72]	; (800fec4 <ProcessRadioRxDone+0xa64>)
 800fe7c:	4a20      	ldr	r2, [pc, #128]	; (800ff00 <ProcessRadioRxDone+0xaa0>)
 800fe7e:	5c9b      	ldrb	r3, [r3, r2]
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d009      	beq.n	800fe98 <ProcessRadioRxDone+0xa38>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800fe84:	4a0f      	ldr	r2, [pc, #60]	; (800fec4 <ProcessRadioRxDone+0xa64>)
 800fe86:	2388      	movs	r3, #136	; 0x88
 800fe88:	00db      	lsls	r3, r3, #3
 800fe8a:	5cd3      	ldrb	r3, [r2, r3]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d00d      	beq.n	800feac <ProcessRadioRxDone+0xa4c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800fe90:	2000      	movs	r0, #0
 800fe92:	f000 fc5b 	bl	801074c <OnAckTimeoutTimerEvent>
 800fe96:	e009      	b.n	800feac <ProcessRadioRxDone+0xa4c>
        }
    }
    else
    {
        if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800fe98:	4b0a      	ldr	r3, [pc, #40]	; (800fec4 <ProcessRadioRxDone+0xa64>)
 800fe9a:	4a12      	ldr	r2, [pc, #72]	; (800fee4 <ProcessRadioRxDone+0xa84>)
 800fe9c:	589b      	ldr	r3, [r3, r2]
 800fe9e:	227c      	movs	r2, #124	; 0x7c
 800fea0:	5c9b      	ldrb	r3, [r3, r2]
 800fea2:	2b02      	cmp	r3, #2
 800fea4:	d102      	bne.n	800feac <ProcessRadioRxDone+0xa4c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800fea6:	2000      	movs	r0, #0
 800fea8:	f000 fc50 	bl	801074c <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800feac:	4b05      	ldr	r3, [pc, #20]	; (800fec4 <ProcessRadioRxDone+0xa64>)
 800feae:	4a12      	ldr	r2, [pc, #72]	; (800fef8 <ProcessRadioRxDone+0xa98>)
 800feb0:	5c99      	ldrb	r1, [r3, r2]
 800feb2:	2020      	movs	r0, #32
 800feb4:	4301      	orrs	r1, r0
 800feb6:	5499      	strb	r1, [r3, r2]

    UpdateRxSlotIdleState( );
 800feb8:	f7ff f9c0 	bl	800f23c <UpdateRxSlotIdleState>
}
 800febc:	46bd      	mov	sp, r7
 800febe:	b023      	add	sp, #140	; 0x8c
 800fec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fec2:	46c0      	nop			; (mov r8, r8)
 800fec4:	200005b8 	.word	0x200005b8
 800fec8:	0000041d 	.word	0x0000041d
 800fecc:	0000041e 	.word	0x0000041e
 800fed0:	00000421 	.word	0x00000421
 800fed4:	00000424 	.word	0x00000424
 800fed8:	0000042e 	.word	0x0000042e
 800fedc:	0000043d 	.word	0x0000043d
 800fee0:	0000042d 	.word	0x0000042d
 800fee4:	00000484 	.word	0x00000484
 800fee8:	0000041c 	.word	0x0000041c
 800feec:	0000043c 	.word	0x0000043c
 800fef0:	0000041f 	.word	0x0000041f
 800fef4:	00000429 	.word	0x00000429
 800fef8:	00000481 	.word	0x00000481
 800fefc:	200007f0 	.word	0x200007f0
 800ff00:	00000414 	.word	0x00000414

0800ff04 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800ff04:	b580      	push	{r7, lr}
 800ff06:	af00      	add	r7, sp, #0
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800ff08:	4b12      	ldr	r3, [pc, #72]	; (800ff54 <ProcessRadioTxTimeout+0x50>)
 800ff0a:	4a13      	ldr	r2, [pc, #76]	; (800ff58 <ProcessRadioTxTimeout+0x54>)
 800ff0c:	589b      	ldr	r3, [r3, r2]
 800ff0e:	227c      	movs	r2, #124	; 0x7c
 800ff10:	5c9b      	ldrb	r3, [r3, r2]
 800ff12:	2b02      	cmp	r3, #2
 800ff14:	d002      	beq.n	800ff1c <ProcessRadioTxTimeout+0x18>
    {
        Radio.Sleep( );
 800ff16:	4b11      	ldr	r3, [pc, #68]	; (800ff5c <ProcessRadioTxTimeout+0x58>)
 800ff18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff1a:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800ff1c:	f7ff f98e 	bl	800f23c <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800ff20:	4b0c      	ldr	r3, [pc, #48]	; (800ff54 <ProcessRadioTxTimeout+0x50>)
 800ff22:	4a0f      	ldr	r2, [pc, #60]	; (800ff60 <ProcessRadioTxTimeout+0x5c>)
 800ff24:	2102      	movs	r1, #2
 800ff26:	5499      	strb	r1, [r3, r2]
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800ff28:	2002      	movs	r0, #2
 800ff2a:	f005 fa5b 	bl	80153e4 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800ff2e:	4b09      	ldr	r3, [pc, #36]	; (800ff54 <ProcessRadioTxTimeout+0x50>)
 800ff30:	4a0c      	ldr	r2, [pc, #48]	; (800ff64 <ProcessRadioTxTimeout+0x60>)
 800ff32:	5c9b      	ldrb	r3, [r3, r2]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d003      	beq.n	800ff40 <ProcessRadioTxTimeout+0x3c>
    {
        MacCtx.AckTimeoutRetry = true;
 800ff38:	4b06      	ldr	r3, [pc, #24]	; (800ff54 <ProcessRadioTxTimeout+0x50>)
 800ff3a:	4a0b      	ldr	r2, [pc, #44]	; (800ff68 <ProcessRadioTxTimeout+0x64>)
 800ff3c:	2101      	movs	r1, #1
 800ff3e:	5499      	strb	r1, [r3, r2]
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800ff40:	4b04      	ldr	r3, [pc, #16]	; (800ff54 <ProcessRadioTxTimeout+0x50>)
 800ff42:	4a0a      	ldr	r2, [pc, #40]	; (800ff6c <ProcessRadioTxTimeout+0x68>)
 800ff44:	5c99      	ldrb	r1, [r3, r2]
 800ff46:	2020      	movs	r0, #32
 800ff48:	4301      	orrs	r1, r0
 800ff4a:	5499      	strb	r1, [r3, r2]
}
 800ff4c:	46c0      	nop			; (mov r8, r8)
 800ff4e:	46bd      	mov	sp, r7
 800ff50:	bd80      	pop	{r7, pc}
 800ff52:	46c0      	nop			; (mov r8, r8)
 800ff54:	200005b8 	.word	0x200005b8
 800ff58:	00000484 	.word	0x00000484
 800ff5c:	0801fe28 	.word	0x0801fe28
 800ff60:	0000043d 	.word	0x0000043d
 800ff64:	00000414 	.word	0x00000414
 800ff68:	00000413 	.word	0x00000413
 800ff6c:	00000481 	.word	0x00000481

0800ff70 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800ff70:	b580      	push	{r7, lr}
 800ff72:	b084      	sub	sp, #16
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	0002      	movs	r2, r0
 800ff78:	1dfb      	adds	r3, r7, #7
 800ff7a:	701a      	strb	r2, [r3, #0]
 800ff7c:	1dbb      	adds	r3, r7, #6
 800ff7e:	1c0a      	adds	r2, r1, #0
 800ff80:	701a      	strb	r2, [r3, #0]
    bool classBRx = false;
 800ff82:	230f      	movs	r3, #15
 800ff84:	18fb      	adds	r3, r7, r3
 800ff86:	2200      	movs	r2, #0
 800ff88:	701a      	strb	r2, [r3, #0]

    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800ff8a:	4b4a      	ldr	r3, [pc, #296]	; (80100b4 <HandleRadioRxErrorTimeout+0x144>)
 800ff8c:	4a4a      	ldr	r2, [pc, #296]	; (80100b8 <HandleRadioRxErrorTimeout+0x148>)
 800ff8e:	589b      	ldr	r3, [r3, r2]
 800ff90:	227c      	movs	r2, #124	; 0x7c
 800ff92:	5c9b      	ldrb	r3, [r3, r2]
 800ff94:	2b02      	cmp	r3, #2
 800ff96:	d002      	beq.n	800ff9e <HandleRadioRxErrorTimeout+0x2e>
    {
        Radio.Sleep( );
 800ff98:	4b48      	ldr	r3, [pc, #288]	; (80100bc <HandleRadioRxErrorTimeout+0x14c>)
 800ff9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff9c:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800ff9e:	f004 fcdd 	bl	801495c <LoRaMacClassBIsBeaconExpected>
 800ffa2:	1e03      	subs	r3, r0, #0
 800ffa4:	d009      	beq.n	800ffba <HandleRadioRxErrorTimeout+0x4a>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800ffa6:	2002      	movs	r0, #2
 800ffa8:	f004 fc90 	bl	80148cc <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800ffac:	2000      	movs	r0, #0
 800ffae:	f004 fcb1 	bl	8014914 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800ffb2:	230f      	movs	r3, #15
 800ffb4:	18fb      	adds	r3, r7, r3
 800ffb6:	2201      	movs	r2, #1
 800ffb8:	701a      	strb	r2, [r3, #0]
    }
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800ffba:	4b3e      	ldr	r3, [pc, #248]	; (80100b4 <HandleRadioRxErrorTimeout+0x144>)
 800ffbc:	4a3e      	ldr	r2, [pc, #248]	; (80100b8 <HandleRadioRxErrorTimeout+0x148>)
 800ffbe:	589b      	ldr	r3, [r3, r2]
 800ffc0:	227c      	movs	r2, #124	; 0x7c
 800ffc2:	5c9b      	ldrb	r3, [r3, r2]
 800ffc4:	2b01      	cmp	r3, #1
 800ffc6:	d11b      	bne.n	8010000 <HandleRadioRxErrorTimeout+0x90>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800ffc8:	f004 fcce 	bl	8014968 <LoRaMacClassBIsPingExpected>
 800ffcc:	1e03      	subs	r3, r0, #0
 800ffce:	d009      	beq.n	800ffe4 <HandleRadioRxErrorTimeout+0x74>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800ffd0:	2000      	movs	r0, #0
 800ffd2:	f004 fc85 	bl	80148e0 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800ffd6:	2000      	movs	r0, #0
 800ffd8:	f004 fca4 	bl	8014924 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800ffdc:	230f      	movs	r3, #15
 800ffde:	18fb      	adds	r3, r7, r3
 800ffe0:	2201      	movs	r2, #1
 800ffe2:	701a      	strb	r2, [r3, #0]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800ffe4:	f004 fcc6 	bl	8014974 <LoRaMacClassBIsMulticastExpected>
 800ffe8:	1e03      	subs	r3, r0, #0
 800ffea:	d009      	beq.n	8010000 <HandleRadioRxErrorTimeout+0x90>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800ffec:	2000      	movs	r0, #0
 800ffee:	f004 fc81 	bl	80148f4 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800fff2:	2000      	movs	r0, #0
 800fff4:	f004 fc9e 	bl	8014934 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800fff8:	230f      	movs	r3, #15
 800fffa:	18fb      	adds	r3, r7, r3
 800fffc:	2201      	movs	r2, #1
 800fffe:	701a      	strb	r2, [r3, #0]
        }
    }

    if( classBRx == false )
 8010000:	230f      	movs	r3, #15
 8010002:	18fb      	adds	r3, r7, r3
 8010004:	781b      	ldrb	r3, [r3, #0]
 8010006:	2201      	movs	r2, #1
 8010008:	4053      	eors	r3, r2
 801000a:	b2db      	uxtb	r3, r3
 801000c:	2b00      	cmp	r3, #0
 801000e:	d04b      	beq.n	80100a8 <HandleRadioRxErrorTimeout+0x138>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8010010:	4a28      	ldr	r2, [pc, #160]	; (80100b4 <HandleRadioRxErrorTimeout+0x144>)
 8010012:	2390      	movs	r3, #144	; 0x90
 8010014:	00db      	lsls	r3, r3, #3
 8010016:	5cd3      	ldrb	r3, [r2, r3]
 8010018:	2b00      	cmp	r3, #0
 801001a:	d129      	bne.n	8010070 <HandleRadioRxErrorTimeout+0x100>
        {
            if( MacCtx.NodeAckRequested == true )
 801001c:	4b25      	ldr	r3, [pc, #148]	; (80100b4 <HandleRadioRxErrorTimeout+0x144>)
 801001e:	4a28      	ldr	r2, [pc, #160]	; (80100c0 <HandleRadioRxErrorTimeout+0x150>)
 8010020:	5c9b      	ldrb	r3, [r3, r2]
 8010022:	2b00      	cmp	r3, #0
 8010024:	d004      	beq.n	8010030 <HandleRadioRxErrorTimeout+0xc0>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8010026:	4b23      	ldr	r3, [pc, #140]	; (80100b4 <HandleRadioRxErrorTimeout+0x144>)
 8010028:	1dfa      	adds	r2, r7, #7
 801002a:	4926      	ldr	r1, [pc, #152]	; (80100c4 <HandleRadioRxErrorTimeout+0x154>)
 801002c:	7812      	ldrb	r2, [r2, #0]
 801002e:	545a      	strb	r2, [r3, r1]
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8010030:	1dfb      	adds	r3, r7, #7
 8010032:	781b      	ldrb	r3, [r3, #0]
 8010034:	0018      	movs	r0, r3
 8010036:	f005 f9d5 	bl	80153e4 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( MacCtx.NvmCtx->LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 801003a:	4b1e      	ldr	r3, [pc, #120]	; (80100b4 <HandleRadioRxErrorTimeout+0x144>)
 801003c:	4a1e      	ldr	r2, [pc, #120]	; (80100b8 <HandleRadioRxErrorTimeout+0x148>)
 801003e:	589a      	ldr	r2, [r3, r2]
 8010040:	23a8      	movs	r3, #168	; 0xa8
 8010042:	005b      	lsls	r3, r3, #1
 8010044:	58d3      	ldr	r3, [r2, r3]
 8010046:	0018      	movs	r0, r3
 8010048:	f00c ff9e 	bl	801cf88 <UTIL_TIMER_GetElapsedTime>
 801004c:	0001      	movs	r1, r0
 801004e:	4a19      	ldr	r2, [pc, #100]	; (80100b4 <HandleRadioRxErrorTimeout+0x144>)
 8010050:	23ed      	movs	r3, #237	; 0xed
 8010052:	009b      	lsls	r3, r3, #2
 8010054:	58d3      	ldr	r3, [r2, r3]
 8010056:	4299      	cmp	r1, r3
 8010058:	d326      	bcc.n	80100a8 <HandleRadioRxErrorTimeout+0x138>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 801005a:	4b1b      	ldr	r3, [pc, #108]	; (80100c8 <HandleRadioRxErrorTimeout+0x158>)
 801005c:	0018      	movs	r0, r3
 801005e:	f00c fe4f 	bl	801cd00 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8010062:	4b14      	ldr	r3, [pc, #80]	; (80100b4 <HandleRadioRxErrorTimeout+0x144>)
 8010064:	4a19      	ldr	r2, [pc, #100]	; (80100cc <HandleRadioRxErrorTimeout+0x15c>)
 8010066:	5c99      	ldrb	r1, [r3, r2]
 8010068:	2020      	movs	r0, #32
 801006a:	4301      	orrs	r1, r0
 801006c:	5499      	strb	r1, [r3, r2]
 801006e:	e01b      	b.n	80100a8 <HandleRadioRxErrorTimeout+0x138>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 8010070:	4b10      	ldr	r3, [pc, #64]	; (80100b4 <HandleRadioRxErrorTimeout+0x144>)
 8010072:	4a13      	ldr	r2, [pc, #76]	; (80100c0 <HandleRadioRxErrorTimeout+0x150>)
 8010074:	5c9b      	ldrb	r3, [r3, r2]
 8010076:	2b00      	cmp	r3, #0
 8010078:	d004      	beq.n	8010084 <HandleRadioRxErrorTimeout+0x114>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 801007a:	4b0e      	ldr	r3, [pc, #56]	; (80100b4 <HandleRadioRxErrorTimeout+0x144>)
 801007c:	1dba      	adds	r2, r7, #6
 801007e:	4911      	ldr	r1, [pc, #68]	; (80100c4 <HandleRadioRxErrorTimeout+0x154>)
 8010080:	7812      	ldrb	r2, [r2, #0]
 8010082:	545a      	strb	r2, [r3, r1]
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 8010084:	1dbb      	adds	r3, r7, #6
 8010086:	781b      	ldrb	r3, [r3, #0]
 8010088:	0018      	movs	r0, r3
 801008a:	f005 f9ab 	bl	80153e4 <LoRaMacConfirmQueueSetStatusCmn>

            if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 801008e:	4b09      	ldr	r3, [pc, #36]	; (80100b4 <HandleRadioRxErrorTimeout+0x144>)
 8010090:	4a09      	ldr	r2, [pc, #36]	; (80100b8 <HandleRadioRxErrorTimeout+0x148>)
 8010092:	589b      	ldr	r3, [r3, r2]
 8010094:	227c      	movs	r2, #124	; 0x7c
 8010096:	5c9b      	ldrb	r3, [r3, r2]
 8010098:	2b02      	cmp	r3, #2
 801009a:	d005      	beq.n	80100a8 <HandleRadioRxErrorTimeout+0x138>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 801009c:	4b05      	ldr	r3, [pc, #20]	; (80100b4 <HandleRadioRxErrorTimeout+0x144>)
 801009e:	4a0b      	ldr	r2, [pc, #44]	; (80100cc <HandleRadioRxErrorTimeout+0x15c>)
 80100a0:	5c99      	ldrb	r1, [r3, r2]
 80100a2:	2020      	movs	r0, #32
 80100a4:	4301      	orrs	r1, r0
 80100a6:	5499      	strb	r1, [r3, r2]
            }
        }
    }

    UpdateRxSlotIdleState( );
 80100a8:	f7ff f8c8 	bl	800f23c <UpdateRxSlotIdleState>
}
 80100ac:	46c0      	nop			; (mov r8, r8)
 80100ae:	46bd      	mov	sp, r7
 80100b0:	b004      	add	sp, #16
 80100b2:	bd80      	pop	{r7, pc}
 80100b4:	200005b8 	.word	0x200005b8
 80100b8:	00000484 	.word	0x00000484
 80100bc:	0801fe28 	.word	0x0801fe28
 80100c0:	00000414 	.word	0x00000414
 80100c4:	0000043d 	.word	0x0000043d
 80100c8:	20000950 	.word	0x20000950
 80100cc:	00000481 	.word	0x00000481

080100d0 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 80100d0:	b580      	push	{r7, lr}
 80100d2:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 80100d4:	2106      	movs	r1, #6
 80100d6:	2005      	movs	r0, #5
 80100d8:	f7ff ff4a 	bl	800ff70 <HandleRadioRxErrorTimeout>
}
 80100dc:	46c0      	nop			; (mov r8, r8)
 80100de:	46bd      	mov	sp, r7
 80100e0:	bd80      	pop	{r7, pc}

080100e2 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 80100e2:	b580      	push	{r7, lr}
 80100e4:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 80100e6:	2104      	movs	r1, #4
 80100e8:	2003      	movs	r0, #3
 80100ea:	f7ff ff41 	bl	800ff70 <HandleRadioRxErrorTimeout>
}
 80100ee:	46c0      	nop			; (mov r8, r8)
 80100f0:	46bd      	mov	sp, r7
 80100f2:	bd80      	pop	{r7, pc}

080100f4 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 80100f4:	b580      	push	{r7, lr}
 80100f6:	b084      	sub	sp, #16
 80100f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80100fa:	f3ef 8310 	mrs	r3, PRIMASK
 80100fe:	607b      	str	r3, [r7, #4]
  return(result);
 8010100:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 8010102:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8010104:	b672      	cpsid	i
}
 8010106:	46c0      	nop			; (mov r8, r8)
    events = LoRaMacRadioEvents;
 8010108:	4b1f      	ldr	r3, [pc, #124]	; (8010188 <LoRaMacHandleIrqEvents+0x94>)
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 801010e:	4b1e      	ldr	r3, [pc, #120]	; (8010188 <LoRaMacHandleIrqEvents+0x94>)
 8010110:	2200      	movs	r2, #0
 8010112:	601a      	str	r2, [r3, #0]
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010118:	68bb      	ldr	r3, [r7, #8]
 801011a:	f383 8810 	msr	PRIMASK, r3
}
 801011e:	46c0      	nop			; (mov r8, r8)
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 8010120:	683b      	ldr	r3, [r7, #0]
 8010122:	2b00      	cmp	r3, #0
 8010124:	d02c      	beq.n	8010180 <LoRaMacHandleIrqEvents+0x8c>
    {
        if( events.Events.TxDone == 1 )
 8010126:	003b      	movs	r3, r7
 8010128:	781b      	ldrb	r3, [r3, #0]
 801012a:	2210      	movs	r2, #16
 801012c:	4013      	ands	r3, r2
 801012e:	b2db      	uxtb	r3, r3
 8010130:	2b00      	cmp	r3, #0
 8010132:	d001      	beq.n	8010138 <LoRaMacHandleIrqEvents+0x44>
        {
            ProcessRadioTxDone( );
 8010134:	f7ff f89e 	bl	800f274 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 8010138:	003b      	movs	r3, r7
 801013a:	781b      	ldrb	r3, [r3, #0]
 801013c:	2208      	movs	r2, #8
 801013e:	4013      	ands	r3, r2
 8010140:	b2db      	uxtb	r3, r3
 8010142:	2b00      	cmp	r3, #0
 8010144:	d001      	beq.n	801014a <LoRaMacHandleIrqEvents+0x56>
        {
            ProcessRadioRxDone( );
 8010146:	f7ff f98b 	bl	800f460 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 801014a:	003b      	movs	r3, r7
 801014c:	781b      	ldrb	r3, [r3, #0]
 801014e:	2204      	movs	r2, #4
 8010150:	4013      	ands	r3, r2
 8010152:	b2db      	uxtb	r3, r3
 8010154:	2b00      	cmp	r3, #0
 8010156:	d001      	beq.n	801015c <LoRaMacHandleIrqEvents+0x68>
        {
            ProcessRadioTxTimeout( );
 8010158:	f7ff fed4 	bl	800ff04 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 801015c:	003b      	movs	r3, r7
 801015e:	781b      	ldrb	r3, [r3, #0]
 8010160:	2202      	movs	r2, #2
 8010162:	4013      	ands	r3, r2
 8010164:	b2db      	uxtb	r3, r3
 8010166:	2b00      	cmp	r3, #0
 8010168:	d001      	beq.n	801016e <LoRaMacHandleIrqEvents+0x7a>
        {
            ProcessRadioRxError( );
 801016a:	f7ff ffb1 	bl	80100d0 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 801016e:	003b      	movs	r3, r7
 8010170:	781b      	ldrb	r3, [r3, #0]
 8010172:	2201      	movs	r2, #1
 8010174:	4013      	ands	r3, r2
 8010176:	b2db      	uxtb	r3, r3
 8010178:	2b00      	cmp	r3, #0
 801017a:	d001      	beq.n	8010180 <LoRaMacHandleIrqEvents+0x8c>
        {
            ProcessRadioRxTimeout( );
 801017c:	f7ff ffb1 	bl	80100e2 <ProcessRadioRxTimeout>
        }
    }
}
 8010180:	46c0      	nop			; (mov r8, r8)
 8010182:	46bd      	mov	sp, r7
 8010184:	b004      	add	sp, #16
 8010186:	bd80      	pop	{r7, pc}
 8010188:	20000be8 	.word	0x20000be8

0801018c <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 801018c:	b580      	push	{r7, lr}
 801018e:	b082      	sub	sp, #8
 8010190:	af00      	add	r7, sp, #0
 8010192:	0002      	movs	r2, r0
 8010194:	1dfb      	adds	r3, r7, #7
 8010196:	701a      	strb	r2, [r3, #0]
    MacCtx.AllowRequests = requestState;
 8010198:	4b04      	ldr	r3, [pc, #16]	; (80101ac <LoRaMacEnableRequests+0x20>)
 801019a:	1dfa      	adds	r2, r7, #7
 801019c:	4904      	ldr	r1, [pc, #16]	; (80101b0 <LoRaMacEnableRequests+0x24>)
 801019e:	7812      	ldrb	r2, [r2, #0]
 80101a0:	545a      	strb	r2, [r3, r1]
}
 80101a2:	46c0      	nop			; (mov r8, r8)
 80101a4:	46bd      	mov	sp, r7
 80101a6:	b002      	add	sp, #8
 80101a8:	bd80      	pop	{r7, pc}
 80101aa:	46c0      	nop			; (mov r8, r8)
 80101ac:	200005b8 	.word	0x200005b8
 80101b0:	00000482 	.word	0x00000482

080101b4 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 80101b4:	b580      	push	{r7, lr}
 80101b6:	b082      	sub	sp, #8
 80101b8:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 80101ba:	1d3b      	adds	r3, r7, #4
 80101bc:	4a2c      	ldr	r2, [pc, #176]	; (8010270 <LoRaMacHandleRequestEvents+0xbc>)
 80101be:	492d      	ldr	r1, [pc, #180]	; (8010274 <LoRaMacHandleRequestEvents+0xc0>)
 80101c0:	5c52      	ldrb	r2, [r2, r1]
 80101c2:	701a      	strb	r2, [r3, #0]

    if( MacCtx.MacState == LORAMAC_IDLE )
 80101c4:	4a2a      	ldr	r2, [pc, #168]	; (8010270 <LoRaMacHandleRequestEvents+0xbc>)
 80101c6:	23d0      	movs	r3, #208	; 0xd0
 80101c8:	009b      	lsls	r3, r3, #2
 80101ca:	58d3      	ldr	r3, [r2, r3]
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d14a      	bne.n	8010266 <LoRaMacHandleRequestEvents+0xb2>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 80101d0:	4b27      	ldr	r3, [pc, #156]	; (8010270 <LoRaMacHandleRequestEvents+0xbc>)
 80101d2:	4a28      	ldr	r2, [pc, #160]	; (8010274 <LoRaMacHandleRequestEvents+0xc0>)
 80101d4:	5c9b      	ldrb	r3, [r3, r2]
 80101d6:	2201      	movs	r2, #1
 80101d8:	4013      	ands	r3, r2
 80101da:	b2db      	uxtb	r3, r3
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d005      	beq.n	80101ec <LoRaMacHandleRequestEvents+0x38>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 80101e0:	4b23      	ldr	r3, [pc, #140]	; (8010270 <LoRaMacHandleRequestEvents+0xbc>)
 80101e2:	4a24      	ldr	r2, [pc, #144]	; (8010274 <LoRaMacHandleRequestEvents+0xc0>)
 80101e4:	5c99      	ldrb	r1, [r3, r2]
 80101e6:	2001      	movs	r0, #1
 80101e8:	4381      	bics	r1, r0
 80101ea:	5499      	strb	r1, [r3, r2]
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80101ec:	4b20      	ldr	r3, [pc, #128]	; (8010270 <LoRaMacHandleRequestEvents+0xbc>)
 80101ee:	4a21      	ldr	r2, [pc, #132]	; (8010274 <LoRaMacHandleRequestEvents+0xc0>)
 80101f0:	5c9b      	ldrb	r3, [r3, r2]
 80101f2:	2204      	movs	r2, #4
 80101f4:	4013      	ands	r3, r2
 80101f6:	b2db      	uxtb	r3, r3
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d005      	beq.n	8010208 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 80101fc:	4b1c      	ldr	r3, [pc, #112]	; (8010270 <LoRaMacHandleRequestEvents+0xbc>)
 80101fe:	4a1d      	ldr	r2, [pc, #116]	; (8010274 <LoRaMacHandleRequestEvents+0xc0>)
 8010200:	5c99      	ldrb	r1, [r3, r2]
 8010202:	2004      	movs	r0, #4
 8010204:	4381      	bics	r1, r0
 8010206:	5499      	strb	r1, [r3, r2]
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8010208:	2001      	movs	r0, #1
 801020a:	f7ff ffbf 	bl	801018c <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 801020e:	1d3b      	adds	r3, r7, #4
 8010210:	781b      	ldrb	r3, [r3, #0]
 8010212:	2201      	movs	r2, #1
 8010214:	4013      	ands	r3, r2
 8010216:	b2db      	uxtb	r3, r3
 8010218:	2b00      	cmp	r3, #0
 801021a:	d007      	beq.n	801022c <LoRaMacHandleRequestEvents+0x78>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 801021c:	4a14      	ldr	r2, [pc, #80]	; (8010270 <LoRaMacHandleRequestEvents+0xbc>)
 801021e:	23d1      	movs	r3, #209	; 0xd1
 8010220:	009b      	lsls	r3, r3, #2
 8010222:	58d3      	ldr	r3, [r2, r3]
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	4a14      	ldr	r2, [pc, #80]	; (8010278 <LoRaMacHandleRequestEvents+0xc4>)
 8010228:	0010      	movs	r0, r2
 801022a:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 801022c:	1d3b      	adds	r3, r7, #4
 801022e:	781b      	ldrb	r3, [r3, #0]
 8010230:	2204      	movs	r2, #4
 8010232:	4013      	ands	r3, r2
 8010234:	b2db      	uxtb	r3, r3
 8010236:	2b00      	cmp	r3, #0
 8010238:	d00d      	beq.n	8010256 <LoRaMacHandleRequestEvents+0xa2>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 801023a:	4b10      	ldr	r3, [pc, #64]	; (801027c <LoRaMacHandleRequestEvents+0xc8>)
 801023c:	0018      	movs	r0, r3
 801023e:	f005 f925 	bl	801548c <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 8010242:	f005 f985 	bl	8015550 <LoRaMacConfirmQueueGetCnt>
 8010246:	1e03      	subs	r3, r0, #0
 8010248:	d005      	beq.n	8010256 <LoRaMacHandleRequestEvents+0xa2>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 801024a:	4b09      	ldr	r3, [pc, #36]	; (8010270 <LoRaMacHandleRequestEvents+0xbc>)
 801024c:	4a09      	ldr	r2, [pc, #36]	; (8010274 <LoRaMacHandleRequestEvents+0xc0>)
 801024e:	5c99      	ldrb	r1, [r3, r2]
 8010250:	2004      	movs	r0, #4
 8010252:	4301      	orrs	r1, r0
 8010254:	5499      	strb	r1, [r3, r2]
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 8010256:	f004 fba8 	bl	80149aa <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 801025a:	4b05      	ldr	r3, [pc, #20]	; (8010270 <LoRaMacHandleRequestEvents+0xbc>)
 801025c:	4a05      	ldr	r2, [pc, #20]	; (8010274 <LoRaMacHandleRequestEvents+0xc0>)
 801025e:	5c99      	ldrb	r1, [r3, r2]
 8010260:	2020      	movs	r0, #32
 8010262:	4381      	bics	r1, r0
 8010264:	5499      	strb	r1, [r3, r2]
    }
}
 8010266:	46c0      	nop			; (mov r8, r8)
 8010268:	46bd      	mov	sp, r7
 801026a:	b002      	add	sp, #8
 801026c:	bd80      	pop	{r7, pc}
 801026e:	46c0      	nop			; (mov r8, r8)
 8010270:	200005b8 	.word	0x200005b8
 8010274:	00000481 	.word	0x00000481
 8010278:	200009f4 	.word	0x200009f4
 801027c:	20000a08 	.word	0x20000a08

08010280 <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 8010280:	b580      	push	{r7, lr}
 8010282:	b082      	sub	sp, #8
 8010284:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 8010286:	4a0b      	ldr	r2, [pc, #44]	; (80102b4 <LoRaMacHandleScheduleUplinkEvent+0x34>)
 8010288:	23d0      	movs	r3, #208	; 0xd0
 801028a:	009b      	lsls	r3, r3, #2
 801028c:	58d3      	ldr	r3, [r2, r3]
 801028e:	2b00      	cmp	r3, #0
 8010290:	d10c      	bne.n	80102ac <LoRaMacHandleScheduleUplinkEvent+0x2c>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 8010292:	1dfb      	adds	r3, r7, #7
 8010294:	2200      	movs	r2, #0
 8010296:	701a      	strb	r2, [r3, #0]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 8010298:	1dfb      	adds	r3, r7, #7
 801029a:	0018      	movs	r0, r3
 801029c:	f004 fe94 	bl	8014fc8 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 80102a0:	1dfb      	adds	r3, r7, #7
 80102a2:	781b      	ldrb	r3, [r3, #0]
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d001      	beq.n	80102ac <LoRaMacHandleScheduleUplinkEvent+0x2c>
        {// Setup MLME indication
            SetMlmeScheduleUplinkIndication( );
 80102a8:	f000 fc78 	bl	8010b9c <SetMlmeScheduleUplinkIndication>
        }
    }
}
 80102ac:	46c0      	nop			; (mov r8, r8)
 80102ae:	46bd      	mov	sp, r7
 80102b0:	b002      	add	sp, #8
 80102b2:	bd80      	pop	{r7, pc}
 80102b4:	200005b8 	.word	0x200005b8

080102b8 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 80102b8:	b580      	push	{r7, lr}
 80102ba:	b088      	sub	sp, #32
 80102bc:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 80102be:	4b26      	ldr	r3, [pc, #152]	; (8010358 <LoRaMacHandleIndicationEvents+0xa0>)
 80102c0:	4a26      	ldr	r2, [pc, #152]	; (801035c <LoRaMacHandleIndicationEvents+0xa4>)
 80102c2:	5c9b      	ldrb	r3, [r3, r2]
 80102c4:	2208      	movs	r2, #8
 80102c6:	4013      	ands	r3, r2
 80102c8:	b2db      	uxtb	r3, r3
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d00d      	beq.n	80102ea <LoRaMacHandleIndicationEvents+0x32>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 80102ce:	4b22      	ldr	r3, [pc, #136]	; (8010358 <LoRaMacHandleIndicationEvents+0xa0>)
 80102d0:	4a22      	ldr	r2, [pc, #136]	; (801035c <LoRaMacHandleIndicationEvents+0xa4>)
 80102d2:	5c99      	ldrb	r1, [r3, r2]
 80102d4:	2008      	movs	r0, #8
 80102d6:	4381      	bics	r1, r0
 80102d8:	5499      	strb	r1, [r3, r2]
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
 80102da:	4a1f      	ldr	r2, [pc, #124]	; (8010358 <LoRaMacHandleIndicationEvents+0xa0>)
 80102dc:	23d1      	movs	r3, #209	; 0xd1
 80102de:	009b      	lsls	r3, r3, #2
 80102e0:	58d3      	ldr	r3, [r2, r3]
 80102e2:	68db      	ldr	r3, [r3, #12]
 80102e4:	4a1e      	ldr	r2, [pc, #120]	; (8010360 <LoRaMacHandleIndicationEvents+0xa8>)
 80102e6:	0010      	movs	r0, r2
 80102e8:	4798      	blx	r3
    }

    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 80102ea:	4b1b      	ldr	r3, [pc, #108]	; (8010358 <LoRaMacHandleIndicationEvents+0xa0>)
 80102ec:	4a1b      	ldr	r2, [pc, #108]	; (801035c <LoRaMacHandleIndicationEvents+0xa4>)
 80102ee:	5c9b      	ldrb	r3, [r3, r2]
 80102f0:	2210      	movs	r2, #16
 80102f2:	4013      	ands	r3, r2
 80102f4:	b2db      	uxtb	r3, r3
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d013      	beq.n	8010322 <LoRaMacHandleIndicationEvents+0x6a>
    {
        MlmeIndication_t schduleUplinkIndication;
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 80102fa:	1d3b      	adds	r3, r7, #4
 80102fc:	2207      	movs	r2, #7
 80102fe:	701a      	strb	r2, [r3, #0]
        schduleUplinkIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8010300:	1d3b      	adds	r3, r7, #4
 8010302:	2200      	movs	r2, #0
 8010304:	705a      	strb	r2, [r3, #1]

        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication );
 8010306:	4a14      	ldr	r2, [pc, #80]	; (8010358 <LoRaMacHandleIndicationEvents+0xa0>)
 8010308:	23d1      	movs	r3, #209	; 0xd1
 801030a:	009b      	lsls	r3, r3, #2
 801030c:	58d3      	ldr	r3, [r2, r3]
 801030e:	68db      	ldr	r3, [r3, #12]
 8010310:	1d3a      	adds	r2, r7, #4
 8010312:	0010      	movs	r0, r2
 8010314:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 8010316:	4b10      	ldr	r3, [pc, #64]	; (8010358 <LoRaMacHandleIndicationEvents+0xa0>)
 8010318:	4a10      	ldr	r2, [pc, #64]	; (801035c <LoRaMacHandleIndicationEvents+0xa4>)
 801031a:	5c99      	ldrb	r1, [r3, r2]
 801031c:	2010      	movs	r0, #16
 801031e:	4381      	bics	r1, r0
 8010320:	5499      	strb	r1, [r3, r2]
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8010322:	4b0d      	ldr	r3, [pc, #52]	; (8010358 <LoRaMacHandleIndicationEvents+0xa0>)
 8010324:	4a0d      	ldr	r2, [pc, #52]	; (801035c <LoRaMacHandleIndicationEvents+0xa4>)
 8010326:	5c9b      	ldrb	r3, [r3, r2]
 8010328:	2202      	movs	r2, #2
 801032a:	4013      	ands	r3, r2
 801032c:	b2db      	uxtb	r3, r3
 801032e:	2b00      	cmp	r3, #0
 8010330:	d00d      	beq.n	801034e <LoRaMacHandleIndicationEvents+0x96>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8010332:	4b09      	ldr	r3, [pc, #36]	; (8010358 <LoRaMacHandleIndicationEvents+0xa0>)
 8010334:	4a09      	ldr	r2, [pc, #36]	; (801035c <LoRaMacHandleIndicationEvents+0xa4>)
 8010336:	5c99      	ldrb	r1, [r3, r2]
 8010338:	2002      	movs	r0, #2
 801033a:	4381      	bics	r1, r0
 801033c:	5499      	strb	r1, [r3, r2]
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication );
 801033e:	4a06      	ldr	r2, [pc, #24]	; (8010358 <LoRaMacHandleIndicationEvents+0xa0>)
 8010340:	23d1      	movs	r3, #209	; 0xd1
 8010342:	009b      	lsls	r3, r3, #2
 8010344:	58d3      	ldr	r3, [r2, r3]
 8010346:	685b      	ldr	r3, [r3, #4]
 8010348:	4a06      	ldr	r2, [pc, #24]	; (8010364 <LoRaMacHandleIndicationEvents+0xac>)
 801034a:	0010      	movs	r0, r2
 801034c:	4798      	blx	r3
    }
}
 801034e:	46c0      	nop			; (mov r8, r8)
 8010350:	46bd      	mov	sp, r7
 8010352:	b008      	add	sp, #32
 8010354:	bd80      	pop	{r7, pc}
 8010356:	46c0      	nop			; (mov r8, r8)
 8010358:	200005b8 	.word	0x200005b8
 801035c:	00000481 	.word	0x00000481
 8010360:	20000a1c 	.word	0x20000a1c
 8010364:	200009d4 	.word	0x200009d4

08010368 <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 8010368:	b590      	push	{r4, r7, lr}
 801036a:	b083      	sub	sp, #12
 801036c:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 801036e:	4b39      	ldr	r3, [pc, #228]	; (8010454 <LoRaMacHandleMcpsRequest+0xec>)
 8010370:	4a39      	ldr	r2, [pc, #228]	; (8010458 <LoRaMacHandleMcpsRequest+0xf0>)
 8010372:	5c9b      	ldrb	r3, [r3, r2]
 8010374:	2201      	movs	r2, #1
 8010376:	4013      	ands	r3, r2
 8010378:	b2db      	uxtb	r3, r3
 801037a:	2b00      	cmp	r3, #0
 801037c:	d066      	beq.n	801044c <LoRaMacHandleMcpsRequest+0xe4>
    {
        bool stopRetransmission = false;
 801037e:	1dfb      	adds	r3, r7, #7
 8010380:	2200      	movs	r2, #0
 8010382:	701a      	strb	r2, [r3, #0]
        bool waitForRetransmission = false;
 8010384:	1dbb      	adds	r3, r7, #6
 8010386:	2200      	movs	r2, #0
 8010388:	701a      	strb	r2, [r3, #0]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 801038a:	4b32      	ldr	r3, [pc, #200]	; (8010454 <LoRaMacHandleMcpsRequest+0xec>)
 801038c:	4a33      	ldr	r2, [pc, #204]	; (801045c <LoRaMacHandleMcpsRequest+0xf4>)
 801038e:	5c9b      	ldrb	r3, [r3, r2]
 8010390:	2b00      	cmp	r3, #0
 8010392:	d004      	beq.n	801039e <LoRaMacHandleMcpsRequest+0x36>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 8010394:	4b2f      	ldr	r3, [pc, #188]	; (8010454 <LoRaMacHandleMcpsRequest+0xec>)
 8010396:	4a31      	ldr	r2, [pc, #196]	; (801045c <LoRaMacHandleMcpsRequest+0xf4>)
 8010398:	5c9b      	ldrb	r3, [r3, r2]
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 801039a:	2b03      	cmp	r3, #3
 801039c:	d105      	bne.n	80103aa <LoRaMacHandleMcpsRequest+0x42>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 801039e:	1dfc      	adds	r4, r7, #7
 80103a0:	f002 fb70 	bl	8012a84 <CheckRetransUnconfirmedUplink>
 80103a4:	0003      	movs	r3, r0
 80103a6:	7023      	strb	r3, [r4, #0]
 80103a8:	e026      	b.n	80103f8 <LoRaMacHandleMcpsRequest+0x90>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 80103aa:	4b2a      	ldr	r3, [pc, #168]	; (8010454 <LoRaMacHandleMcpsRequest+0xec>)
 80103ac:	4a2b      	ldr	r2, [pc, #172]	; (801045c <LoRaMacHandleMcpsRequest+0xf4>)
 80103ae:	5c9b      	ldrb	r3, [r3, r2]
 80103b0:	2b01      	cmp	r3, #1
 80103b2:	d121      	bne.n	80103f8 <LoRaMacHandleMcpsRequest+0x90>
        {
            if( MacCtx.AckTimeoutRetry == true )
 80103b4:	4b27      	ldr	r3, [pc, #156]	; (8010454 <LoRaMacHandleMcpsRequest+0xec>)
 80103b6:	4a2a      	ldr	r2, [pc, #168]	; (8010460 <LoRaMacHandleMcpsRequest+0xf8>)
 80103b8:	5c9b      	ldrb	r3, [r3, r2]
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d019      	beq.n	80103f2 <LoRaMacHandleMcpsRequest+0x8a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 80103be:	1dfc      	adds	r4, r7, #7
 80103c0:	f002 fb94 	bl	8012aec <CheckRetransConfirmedUplink>
 80103c4:	0003      	movs	r3, r0
 80103c6:	7023      	strb	r3, [r4, #0]

                if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 80103c8:	4b22      	ldr	r3, [pc, #136]	; (8010454 <LoRaMacHandleMcpsRequest+0xec>)
 80103ca:	4a26      	ldr	r2, [pc, #152]	; (8010464 <LoRaMacHandleMcpsRequest+0xfc>)
 80103cc:	589a      	ldr	r2, [r3, r2]
 80103ce:	23b1      	movs	r3, #177	; 0xb1
 80103d0:	005b      	lsls	r3, r3, #1
 80103d2:	5cd3      	ldrb	r3, [r2, r3]
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d10f      	bne.n	80103f8 <LoRaMacHandleMcpsRequest+0x90>
                {
                    if( stopRetransmission == false )
 80103d8:	1dfb      	adds	r3, r7, #7
 80103da:	781b      	ldrb	r3, [r3, #0]
 80103dc:	2201      	movs	r2, #1
 80103de:	4053      	eors	r3, r2
 80103e0:	b2db      	uxtb	r3, r3
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d002      	beq.n	80103ec <LoRaMacHandleMcpsRequest+0x84>
                    {
                        AckTimeoutRetriesProcess( );
 80103e6:	f002 fbf5 	bl	8012bd4 <AckTimeoutRetriesProcess>
 80103ea:	e005      	b.n	80103f8 <LoRaMacHandleMcpsRequest+0x90>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 80103ec:	f002 fc40 	bl	8012c70 <AckTimeoutRetriesFinalize>
 80103f0:	e002      	b.n	80103f8 <LoRaMacHandleMcpsRequest+0x90>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 80103f2:	1dbb      	adds	r3, r7, #6
 80103f4:	2201      	movs	r2, #1
 80103f6:	701a      	strb	r2, [r3, #0]
            }
        }

        if( stopRetransmission == true )
 80103f8:	1dfb      	adds	r3, r7, #7
 80103fa:	781b      	ldrb	r3, [r3, #0]
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d011      	beq.n	8010424 <LoRaMacHandleMcpsRequest+0xbc>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 8010400:	4b19      	ldr	r3, [pc, #100]	; (8010468 <LoRaMacHandleMcpsRequest+0x100>)
 8010402:	0018      	movs	r0, r3
 8010404:	f00c fc7c 	bl	801cd00 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8010408:	4a12      	ldr	r2, [pc, #72]	; (8010454 <LoRaMacHandleMcpsRequest+0xec>)
 801040a:	23d0      	movs	r3, #208	; 0xd0
 801040c:	009b      	lsls	r3, r3, #2
 801040e:	58d3      	ldr	r3, [r2, r3]
 8010410:	2220      	movs	r2, #32
 8010412:	4393      	bics	r3, r2
 8010414:	0019      	movs	r1, r3
 8010416:	4a0f      	ldr	r2, [pc, #60]	; (8010454 <LoRaMacHandleMcpsRequest+0xec>)
 8010418:	23d0      	movs	r3, #208	; 0xd0
 801041a:	009b      	lsls	r3, r3, #2
 801041c:	50d1      	str	r1, [r2, r3]
            StopRetransmission( );
 801041e:	f002 fb8d 	bl	8012b3c <StopRetransmission>
            MacCtx.AckTimeoutRetry = false;
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 8010422:	e013      	b.n	801044c <LoRaMacHandleMcpsRequest+0xe4>
        else if( waitForRetransmission == false )
 8010424:	1dbb      	adds	r3, r7, #6
 8010426:	781b      	ldrb	r3, [r3, #0]
 8010428:	2201      	movs	r2, #1
 801042a:	4053      	eors	r3, r2
 801042c:	b2db      	uxtb	r3, r3
 801042e:	2b00      	cmp	r3, #0
 8010430:	d00c      	beq.n	801044c <LoRaMacHandleMcpsRequest+0xe4>
            MacCtx.MacFlags.Bits.MacDone = 0;
 8010432:	4b08      	ldr	r3, [pc, #32]	; (8010454 <LoRaMacHandleMcpsRequest+0xec>)
 8010434:	4a08      	ldr	r2, [pc, #32]	; (8010458 <LoRaMacHandleMcpsRequest+0xf0>)
 8010436:	5c99      	ldrb	r1, [r3, r2]
 8010438:	2020      	movs	r0, #32
 801043a:	4381      	bics	r1, r0
 801043c:	5499      	strb	r1, [r3, r2]
            MacCtx.AckTimeoutRetry = false;
 801043e:	4b05      	ldr	r3, [pc, #20]	; (8010454 <LoRaMacHandleMcpsRequest+0xec>)
 8010440:	4a07      	ldr	r2, [pc, #28]	; (8010460 <LoRaMacHandleMcpsRequest+0xf8>)
 8010442:	2100      	movs	r1, #0
 8010444:	5499      	strb	r1, [r3, r2]
            OnTxDelayedTimerEvent( NULL );
 8010446:	2000      	movs	r0, #0
 8010448:	f000 f8a2 	bl	8010590 <OnTxDelayedTimerEvent>
}
 801044c:	46c0      	nop			; (mov r8, r8)
 801044e:	46bd      	mov	sp, r7
 8010450:	b003      	add	sp, #12
 8010452:	bd90      	pop	{r4, r7, pc}
 8010454:	200005b8 	.word	0x200005b8
 8010458:	00000481 	.word	0x00000481
 801045c:	0000043c 	.word	0x0000043c
 8010460:	00000413 	.word	0x00000413
 8010464:	00000484 	.word	0x00000484
 8010468:	20000920 	.word	0x20000920

0801046c <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 801046c:	b580      	push	{r7, lr}
 801046e:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8010470:	4b1d      	ldr	r3, [pc, #116]	; (80104e8 <LoRaMacHandleMlmeRequest+0x7c>)
 8010472:	4a1e      	ldr	r2, [pc, #120]	; (80104ec <LoRaMacHandleMlmeRequest+0x80>)
 8010474:	5c9b      	ldrb	r3, [r3, r2]
 8010476:	2204      	movs	r2, #4
 8010478:	4013      	ands	r3, r2
 801047a:	b2db      	uxtb	r3, r3
 801047c:	2b00      	cmp	r3, #0
 801047e:	d02f      	beq.n	80104e0 <LoRaMacHandleMlmeRequest+0x74>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8010480:	2001      	movs	r0, #1
 8010482:	f004 ffe9 	bl	8015458 <LoRaMacConfirmQueueIsCmdActive>
 8010486:	1e03      	subs	r3, r0, #0
 8010488:	d015      	beq.n	80104b6 <LoRaMacHandleMlmeRequest+0x4a>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 801048a:	2001      	movs	r0, #1
 801048c:	f004 ff7c 	bl	8015388 <LoRaMacConfirmQueueGetStatus>
 8010490:	1e03      	subs	r3, r0, #0
 8010492:	d104      	bne.n	801049e <LoRaMacHandleMlmeRequest+0x32>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 8010494:	4a14      	ldr	r2, [pc, #80]	; (80104e8 <LoRaMacHandleMlmeRequest+0x7c>)
 8010496:	2382      	movs	r3, #130	; 0x82
 8010498:	00db      	lsls	r3, r3, #3
 801049a:	2100      	movs	r1, #0
 801049c:	54d1      	strb	r1, [r2, r3]
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 801049e:	4a12      	ldr	r2, [pc, #72]	; (80104e8 <LoRaMacHandleMlmeRequest+0x7c>)
 80104a0:	23d0      	movs	r3, #208	; 0xd0
 80104a2:	009b      	lsls	r3, r3, #2
 80104a4:	58d3      	ldr	r3, [r2, r3]
 80104a6:	2202      	movs	r2, #2
 80104a8:	4393      	bics	r3, r2
 80104aa:	0019      	movs	r1, r3
 80104ac:	4a0e      	ldr	r2, [pc, #56]	; (80104e8 <LoRaMacHandleMlmeRequest+0x7c>)
 80104ae:	23d0      	movs	r3, #208	; 0xd0
 80104b0:	009b      	lsls	r3, r3, #2
 80104b2:	50d1      	str	r1, [r2, r3]
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
    }
}
 80104b4:	e014      	b.n	80104e0 <LoRaMacHandleMlmeRequest+0x74>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 80104b6:	2005      	movs	r0, #5
 80104b8:	f004 ffce 	bl	8015458 <LoRaMacConfirmQueueIsCmdActive>
 80104bc:	1e03      	subs	r3, r0, #0
 80104be:	d104      	bne.n	80104ca <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 80104c0:	2006      	movs	r0, #6
 80104c2:	f004 ffc9 	bl	8015458 <LoRaMacConfirmQueueIsCmdActive>
 80104c6:	1e03      	subs	r3, r0, #0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 80104c8:	d00a      	beq.n	80104e0 <LoRaMacHandleMlmeRequest+0x74>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80104ca:	4a07      	ldr	r2, [pc, #28]	; (80104e8 <LoRaMacHandleMlmeRequest+0x7c>)
 80104cc:	23d0      	movs	r3, #208	; 0xd0
 80104ce:	009b      	lsls	r3, r3, #2
 80104d0:	58d3      	ldr	r3, [r2, r3]
 80104d2:	2202      	movs	r2, #2
 80104d4:	4393      	bics	r3, r2
 80104d6:	0019      	movs	r1, r3
 80104d8:	4a03      	ldr	r2, [pc, #12]	; (80104e8 <LoRaMacHandleMlmeRequest+0x7c>)
 80104da:	23d0      	movs	r3, #208	; 0xd0
 80104dc:	009b      	lsls	r3, r3, #2
 80104de:	50d1      	str	r1, [r2, r3]
}
 80104e0:	46c0      	nop			; (mov r8, r8)
 80104e2:	46bd      	mov	sp, r7
 80104e4:	bd80      	pop	{r7, pc}
 80104e6:	46c0      	nop			; (mov r8, r8)
 80104e8:	200005b8 	.word	0x200005b8
 80104ec:	00000481 	.word	0x00000481

080104f0 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 80104f0:	b580      	push	{r7, lr}
 80104f2:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 80104f4:	200c      	movs	r0, #12
 80104f6:	f004 ffaf 	bl	8015458 <LoRaMacConfirmQueueIsCmdActive>
 80104fa:	1e03      	subs	r3, r0, #0
 80104fc:	d01c      	beq.n	8010538 <LoRaMacCheckForBeaconAcquisition+0x48>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 80104fe:	4b10      	ldr	r3, [pc, #64]	; (8010540 <LoRaMacCheckForBeaconAcquisition+0x50>)
 8010500:	4a10      	ldr	r2, [pc, #64]	; (8010544 <LoRaMacCheckForBeaconAcquisition+0x54>)
 8010502:	5c9b      	ldrb	r3, [r3, r2]
 8010504:	2201      	movs	r2, #1
 8010506:	4013      	ands	r3, r2
 8010508:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 801050a:	2b00      	cmp	r3, #0
 801050c:	d114      	bne.n	8010538 <LoRaMacCheckForBeaconAcquisition+0x48>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 801050e:	4b0c      	ldr	r3, [pc, #48]	; (8010540 <LoRaMacCheckForBeaconAcquisition+0x50>)
 8010510:	4a0c      	ldr	r2, [pc, #48]	; (8010544 <LoRaMacCheckForBeaconAcquisition+0x54>)
 8010512:	5c9b      	ldrb	r3, [r3, r2]
 8010514:	2204      	movs	r2, #4
 8010516:	4013      	ands	r3, r2
 8010518:	b2db      	uxtb	r3, r3
 801051a:	2b00      	cmp	r3, #0
 801051c:	d00c      	beq.n	8010538 <LoRaMacCheckForBeaconAcquisition+0x48>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 801051e:	4a08      	ldr	r2, [pc, #32]	; (8010540 <LoRaMacCheckForBeaconAcquisition+0x50>)
 8010520:	23d0      	movs	r3, #208	; 0xd0
 8010522:	009b      	lsls	r3, r3, #2
 8010524:	58d3      	ldr	r3, [r2, r3]
 8010526:	2202      	movs	r2, #2
 8010528:	4393      	bics	r3, r2
 801052a:	0019      	movs	r1, r3
 801052c:	4a04      	ldr	r2, [pc, #16]	; (8010540 <LoRaMacCheckForBeaconAcquisition+0x50>)
 801052e:	23d0      	movs	r3, #208	; 0xd0
 8010530:	009b      	lsls	r3, r3, #2
 8010532:	50d1      	str	r1, [r2, r3]
            return 0x01;
 8010534:	2301      	movs	r3, #1
 8010536:	e000      	b.n	801053a <LoRaMacCheckForBeaconAcquisition+0x4a>
        }
    }
    return 0x00;
 8010538:	2300      	movs	r3, #0
}
 801053a:	0018      	movs	r0, r3
 801053c:	46bd      	mov	sp, r7
 801053e:	bd80      	pop	{r7, pc}
 8010540:	200005b8 	.word	0x200005b8
 8010544:	00000481 	.word	0x00000481

08010548 <LoRaMacCheckForRxAbort>:

static void LoRaMacCheckForRxAbort( void )
{
 8010548:	b580      	push	{r7, lr}
 801054a:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 801054c:	4a0f      	ldr	r2, [pc, #60]	; (801058c <LoRaMacCheckForRxAbort+0x44>)
 801054e:	23d0      	movs	r3, #208	; 0xd0
 8010550:	009b      	lsls	r3, r3, #2
 8010552:	58d3      	ldr	r3, [r2, r3]
 8010554:	2280      	movs	r2, #128	; 0x80
 8010556:	4013      	ands	r3, r2
 8010558:	d015      	beq.n	8010586 <LoRaMacCheckForRxAbort+0x3e>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 801055a:	4a0c      	ldr	r2, [pc, #48]	; (801058c <LoRaMacCheckForRxAbort+0x44>)
 801055c:	23d0      	movs	r3, #208	; 0xd0
 801055e:	009b      	lsls	r3, r3, #2
 8010560:	58d3      	ldr	r3, [r2, r3]
 8010562:	2280      	movs	r2, #128	; 0x80
 8010564:	4393      	bics	r3, r2
 8010566:	0019      	movs	r1, r3
 8010568:	4a08      	ldr	r2, [pc, #32]	; (801058c <LoRaMacCheckForRxAbort+0x44>)
 801056a:	23d0      	movs	r3, #208	; 0xd0
 801056c:	009b      	lsls	r3, r3, #2
 801056e:	50d1      	str	r1, [r2, r3]
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010570:	4a06      	ldr	r2, [pc, #24]	; (801058c <LoRaMacCheckForRxAbort+0x44>)
 8010572:	23d0      	movs	r3, #208	; 0xd0
 8010574:	009b      	lsls	r3, r3, #2
 8010576:	58d3      	ldr	r3, [r2, r3]
 8010578:	2202      	movs	r2, #2
 801057a:	4393      	bics	r3, r2
 801057c:	0019      	movs	r1, r3
 801057e:	4a03      	ldr	r2, [pc, #12]	; (801058c <LoRaMacCheckForRxAbort+0x44>)
 8010580:	23d0      	movs	r3, #208	; 0xd0
 8010582:	009b      	lsls	r3, r3, #2
 8010584:	50d1      	str	r1, [r2, r3]
    }
}
 8010586:	46c0      	nop			; (mov r8, r8)
 8010588:	46bd      	mov	sp, r7
 801058a:	bd80      	pop	{r7, pc}
 801058c:	200005b8 	.word	0x200005b8

08010590 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 8010590:	b580      	push	{r7, lr}
 8010592:	b082      	sub	sp, #8
 8010594:	af00      	add	r7, sp, #0
 8010596:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 8010598:	4b19      	ldr	r3, [pc, #100]	; (8010600 <OnTxDelayedTimerEvent+0x70>)
 801059a:	0018      	movs	r0, r3
 801059c:	f00c fbb0 	bl	801cd00 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 80105a0:	4a18      	ldr	r2, [pc, #96]	; (8010604 <OnTxDelayedTimerEvent+0x74>)
 80105a2:	23d0      	movs	r3, #208	; 0xd0
 80105a4:	009b      	lsls	r3, r3, #2
 80105a6:	58d3      	ldr	r3, [r2, r3]
 80105a8:	2220      	movs	r2, #32
 80105aa:	4393      	bics	r3, r2
 80105ac:	0019      	movs	r1, r3
 80105ae:	4a15      	ldr	r2, [pc, #84]	; (8010604 <OnTxDelayedTimerEvent+0x74>)
 80105b0:	23d0      	movs	r3, #208	; 0xd0
 80105b2:	009b      	lsls	r3, r3, #2
 80105b4:	50d1      	str	r1, [r2, r3]

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 80105b6:	2001      	movs	r0, #1
 80105b8:	f001 fb5a 	bl	8011c70 <ScheduleTx>
 80105bc:	1e03      	subs	r3, r0, #0
 80105be:	d01a      	beq.n	80105f6 <OnTxDelayedTimerEvent+0x66>
 80105c0:	2b0b      	cmp	r3, #11
 80105c2:	d018      	beq.n	80105f6 <OnTxDelayedTimerEvent+0x66>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 80105c4:	4b0f      	ldr	r3, [pc, #60]	; (8010604 <OnTxDelayedTimerEvent+0x74>)
 80105c6:	4a10      	ldr	r2, [pc, #64]	; (8010608 <OnTxDelayedTimerEvent+0x78>)
 80105c8:	589b      	ldr	r3, [r3, r2]
 80105ca:	2285      	movs	r2, #133	; 0x85
 80105cc:	569b      	ldrsb	r3, [r3, r2]
 80105ce:	b2d9      	uxtb	r1, r3
 80105d0:	4b0c      	ldr	r3, [pc, #48]	; (8010604 <OnTxDelayedTimerEvent+0x74>)
 80105d2:	4a0e      	ldr	r2, [pc, #56]	; (801060c <OnTxDelayedTimerEvent+0x7c>)
 80105d4:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 80105d6:	4b0b      	ldr	r3, [pc, #44]	; (8010604 <OnTxDelayedTimerEvent+0x74>)
 80105d8:	4a0d      	ldr	r2, [pc, #52]	; (8010610 <OnTxDelayedTimerEvent+0x80>)
 80105da:	5c99      	ldrb	r1, [r3, r2]
 80105dc:	4b09      	ldr	r3, [pc, #36]	; (8010604 <OnTxDelayedTimerEvent+0x74>)
 80105de:	4a0d      	ldr	r2, [pc, #52]	; (8010614 <OnTxDelayedTimerEvent+0x84>)
 80105e0:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 80105e2:	4b08      	ldr	r3, [pc, #32]	; (8010604 <OnTxDelayedTimerEvent+0x74>)
 80105e4:	4a0c      	ldr	r2, [pc, #48]	; (8010618 <OnTxDelayedTimerEvent+0x88>)
 80105e6:	2109      	movs	r1, #9
 80105e8:	5499      	strb	r1, [r3, r2]
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 80105ea:	2009      	movs	r0, #9
 80105ec:	f004 fefa 	bl	80153e4 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 80105f0:	f002 faa4 	bl	8012b3c <StopRetransmission>
            break;
 80105f4:	e000      	b.n	80105f8 <OnTxDelayedTimerEvent+0x68>
            break;
 80105f6:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 80105f8:	46c0      	nop			; (mov r8, r8)
 80105fa:	46bd      	mov	sp, r7
 80105fc:	b002      	add	sp, #8
 80105fe:	bd80      	pop	{r7, pc}
 8010600:	20000920 	.word	0x20000920
 8010604:	200005b8 	.word	0x200005b8
 8010608:	00000484 	.word	0x00000484
 801060c:	0000043e 	.word	0x0000043e
 8010610:	00000412 	.word	0x00000412
 8010614:	00000441 	.word	0x00000441
 8010618:	0000043d 	.word	0x0000043d

0801061c <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 801061c:	b580      	push	{r7, lr}
 801061e:	b082      	sub	sp, #8
 8010620:	af00      	add	r7, sp, #0
 8010622:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 8010624:	4b19      	ldr	r3, [pc, #100]	; (801068c <OnRxWindow1TimerEvent+0x70>)
 8010626:	4a1a      	ldr	r2, [pc, #104]	; (8010690 <OnRxWindow1TimerEvent+0x74>)
 8010628:	5c99      	ldrb	r1, [r3, r2]
 801062a:	4a18      	ldr	r2, [pc, #96]	; (801068c <OnRxWindow1TimerEvent+0x70>)
 801062c:	23ee      	movs	r3, #238	; 0xee
 801062e:	009b      	lsls	r3, r3, #2
 8010630:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow1Config.DrOffset = MacCtx.NvmCtx->MacParams.Rx1DrOffset;
 8010632:	4b16      	ldr	r3, [pc, #88]	; (801068c <OnRxWindow1TimerEvent+0x70>)
 8010634:	4a17      	ldr	r2, [pc, #92]	; (8010694 <OnRxWindow1TimerEvent+0x78>)
 8010636:	589b      	ldr	r3, [r3, r2]
 8010638:	22a5      	movs	r2, #165	; 0xa5
 801063a:	5c9b      	ldrb	r3, [r3, r2]
 801063c:	b259      	sxtb	r1, r3
 801063e:	4b13      	ldr	r3, [pc, #76]	; (801068c <OnRxWindow1TimerEvent+0x70>)
 8010640:	4a15      	ldr	r2, [pc, #84]	; (8010698 <OnRxWindow1TimerEvent+0x7c>)
 8010642:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8010644:	4b11      	ldr	r3, [pc, #68]	; (801068c <OnRxWindow1TimerEvent+0x70>)
 8010646:	4a13      	ldr	r2, [pc, #76]	; (8010694 <OnRxWindow1TimerEvent+0x78>)
 8010648:	589b      	ldr	r3, [r3, r2]
 801064a:	22b9      	movs	r2, #185	; 0xb9
 801064c:	5c99      	ldrb	r1, [r3, r2]
 801064e:	4a0f      	ldr	r2, [pc, #60]	; (801068c <OnRxWindow1TimerEvent+0x70>)
 8010650:	23f2      	movs	r3, #242	; 0xf2
 8010652:	009b      	lsls	r3, r3, #2
 8010654:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow1Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8010656:	4b0d      	ldr	r3, [pc, #52]	; (801068c <OnRxWindow1TimerEvent+0x70>)
 8010658:	4a0e      	ldr	r2, [pc, #56]	; (8010694 <OnRxWindow1TimerEvent+0x78>)
 801065a:	589b      	ldr	r3, [r3, r2]
 801065c:	22ca      	movs	r2, #202	; 0xca
 801065e:	5c99      	ldrb	r1, [r3, r2]
 8010660:	4b0a      	ldr	r3, [pc, #40]	; (801068c <OnRxWindow1TimerEvent+0x70>)
 8010662:	4a0e      	ldr	r2, [pc, #56]	; (801069c <OnRxWindow1TimerEvent+0x80>)
 8010664:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.RxContinuous = false;
 8010666:	4b09      	ldr	r3, [pc, #36]	; (801068c <OnRxWindow1TimerEvent+0x70>)
 8010668:	4a0d      	ldr	r2, [pc, #52]	; (80106a0 <OnRxWindow1TimerEvent+0x84>)
 801066a:	2100      	movs	r1, #0
 801066c:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 801066e:	4b07      	ldr	r3, [pc, #28]	; (801068c <OnRxWindow1TimerEvent+0x70>)
 8010670:	4a0c      	ldr	r2, [pc, #48]	; (80106a4 <OnRxWindow1TimerEvent+0x88>)
 8010672:	2100      	movs	r1, #0
 8010674:	5499      	strb	r1, [r3, r2]

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8010676:	4a0c      	ldr	r2, [pc, #48]	; (80106a8 <OnRxWindow1TimerEvent+0x8c>)
 8010678:	4b0c      	ldr	r3, [pc, #48]	; (80106ac <OnRxWindow1TimerEvent+0x90>)
 801067a:	0011      	movs	r1, r2
 801067c:	0018      	movs	r0, r3
 801067e:	f001 fd9d 	bl	80121bc <RxWindowSetup>
}
 8010682:	46c0      	nop			; (mov r8, r8)
 8010684:	46bd      	mov	sp, r7
 8010686:	b002      	add	sp, #8
 8010688:	bd80      	pop	{r7, pc}
 801068a:	46c0      	nop			; (mov r8, r8)
 801068c:	200005b8 	.word	0x200005b8
 8010690:	00000415 	.word	0x00000415
 8010694:	00000484 	.word	0x00000484
 8010698:	000003bb 	.word	0x000003bb
 801069c:	000003c9 	.word	0x000003c9
 80106a0:	000003ca 	.word	0x000003ca
 80106a4:	000003cb 	.word	0x000003cb
 80106a8:	20000970 	.word	0x20000970
 80106ac:	20000938 	.word	0x20000938

080106b0 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 80106b0:	b580      	push	{r7, lr}
 80106b2:	b082      	sub	sp, #8
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 80106b8:	4a1c      	ldr	r2, [pc, #112]	; (801072c <OnRxWindow2TimerEvent+0x7c>)
 80106ba:	2390      	movs	r3, #144	; 0x90
 80106bc:	00db      	lsls	r3, r3, #3
 80106be:	5cd3      	ldrb	r3, [r2, r3]
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d02f      	beq.n	8010724 <OnRxWindow2TimerEvent+0x74>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 80106c4:	4b19      	ldr	r3, [pc, #100]	; (801072c <OnRxWindow2TimerEvent+0x7c>)
 80106c6:	4a1a      	ldr	r2, [pc, #104]	; (8010730 <OnRxWindow2TimerEvent+0x80>)
 80106c8:	5c99      	ldrb	r1, [r3, r2]
 80106ca:	4a18      	ldr	r2, [pc, #96]	; (801072c <OnRxWindow2TimerEvent+0x7c>)
 80106cc:	23f3      	movs	r3, #243	; 0xf3
 80106ce:	009b      	lsls	r3, r3, #2
 80106d0:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 80106d2:	4b16      	ldr	r3, [pc, #88]	; (801072c <OnRxWindow2TimerEvent+0x7c>)
 80106d4:	4a17      	ldr	r2, [pc, #92]	; (8010734 <OnRxWindow2TimerEvent+0x84>)
 80106d6:	589b      	ldr	r3, [r3, r2]
 80106d8:	22a8      	movs	r2, #168	; 0xa8
 80106da:	5899      	ldr	r1, [r3, r2]
 80106dc:	4a13      	ldr	r2, [pc, #76]	; (801072c <OnRxWindow2TimerEvent+0x7c>)
 80106de:	23f4      	movs	r3, #244	; 0xf4
 80106e0:	009b      	lsls	r3, r3, #2
 80106e2:	50d1      	str	r1, [r2, r3]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80106e4:	4b11      	ldr	r3, [pc, #68]	; (801072c <OnRxWindow2TimerEvent+0x7c>)
 80106e6:	4a13      	ldr	r2, [pc, #76]	; (8010734 <OnRxWindow2TimerEvent+0x84>)
 80106e8:	589b      	ldr	r3, [r3, r2]
 80106ea:	22b9      	movs	r2, #185	; 0xb9
 80106ec:	5c99      	ldrb	r1, [r3, r2]
 80106ee:	4a0f      	ldr	r2, [pc, #60]	; (801072c <OnRxWindow2TimerEvent+0x7c>)
 80106f0:	23f7      	movs	r3, #247	; 0xf7
 80106f2:	009b      	lsls	r3, r3, #2
 80106f4:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 80106f6:	4b0d      	ldr	r3, [pc, #52]	; (801072c <OnRxWindow2TimerEvent+0x7c>)
 80106f8:	4a0e      	ldr	r2, [pc, #56]	; (8010734 <OnRxWindow2TimerEvent+0x84>)
 80106fa:	589b      	ldr	r3, [r3, r2]
 80106fc:	22ca      	movs	r2, #202	; 0xca
 80106fe:	5c99      	ldrb	r1, [r3, r2]
 8010700:	4b0a      	ldr	r3, [pc, #40]	; (801072c <OnRxWindow2TimerEvent+0x7c>)
 8010702:	4a0d      	ldr	r2, [pc, #52]	; (8010738 <OnRxWindow2TimerEvent+0x88>)
 8010704:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxContinuous = false;
 8010706:	4b09      	ldr	r3, [pc, #36]	; (801072c <OnRxWindow2TimerEvent+0x7c>)
 8010708:	4a0c      	ldr	r2, [pc, #48]	; (801073c <OnRxWindow2TimerEvent+0x8c>)
 801070a:	2100      	movs	r1, #0
 801070c:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 801070e:	4b07      	ldr	r3, [pc, #28]	; (801072c <OnRxWindow2TimerEvent+0x7c>)
 8010710:	4a0b      	ldr	r2, [pc, #44]	; (8010740 <OnRxWindow2TimerEvent+0x90>)
 8010712:	2101      	movs	r1, #1
 8010714:	5499      	strb	r1, [r3, r2]

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8010716:	4a0b      	ldr	r2, [pc, #44]	; (8010744 <OnRxWindow2TimerEvent+0x94>)
 8010718:	4b0b      	ldr	r3, [pc, #44]	; (8010748 <OnRxWindow2TimerEvent+0x98>)
 801071a:	0011      	movs	r1, r2
 801071c:	0018      	movs	r0, r3
 801071e:	f001 fd4d 	bl	80121bc <RxWindowSetup>
 8010722:	e000      	b.n	8010726 <OnRxWindow2TimerEvent+0x76>
        return;
 8010724:	46c0      	nop			; (mov r8, r8)
}
 8010726:	46bd      	mov	sp, r7
 8010728:	b002      	add	sp, #8
 801072a:	bd80      	pop	{r7, pc}
 801072c:	200005b8 	.word	0x200005b8
 8010730:	00000415 	.word	0x00000415
 8010734:	00000484 	.word	0x00000484
 8010738:	000003dd 	.word	0x000003dd
 801073c:	000003de 	.word	0x000003de
 8010740:	000003df 	.word	0x000003df
 8010744:	20000984 	.word	0x20000984
 8010748:	20000950 	.word	0x20000950

0801074c <OnAckTimeoutTimerEvent>:

static void OnAckTimeoutTimerEvent( void* context )
{
 801074c:	b580      	push	{r7, lr}
 801074e:	b082      	sub	sp, #8
 8010750:	af00      	add	r7, sp, #0
 8010752:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 8010754:	4b18      	ldr	r3, [pc, #96]	; (80107b8 <OnAckTimeoutTimerEvent+0x6c>)
 8010756:	0018      	movs	r0, r3
 8010758:	f00c fad2 	bl	801cd00 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 801075c:	4b17      	ldr	r3, [pc, #92]	; (80107bc <OnAckTimeoutTimerEvent+0x70>)
 801075e:	4a18      	ldr	r2, [pc, #96]	; (80107c0 <OnAckTimeoutTimerEvent+0x74>)
 8010760:	5c9b      	ldrb	r3, [r3, r2]
 8010762:	2b00      	cmp	r3, #0
 8010764:	d003      	beq.n	801076e <OnAckTimeoutTimerEvent+0x22>
    {
        MacCtx.AckTimeoutRetry = true;
 8010766:	4b15      	ldr	r3, [pc, #84]	; (80107bc <OnAckTimeoutTimerEvent+0x70>)
 8010768:	4a16      	ldr	r2, [pc, #88]	; (80107c4 <OnAckTimeoutTimerEvent+0x78>)
 801076a:	2101      	movs	r1, #1
 801076c:	5499      	strb	r1, [r3, r2]
    }
    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 801076e:	4b13      	ldr	r3, [pc, #76]	; (80107bc <OnAckTimeoutTimerEvent+0x70>)
 8010770:	4a15      	ldr	r2, [pc, #84]	; (80107c8 <OnAckTimeoutTimerEvent+0x7c>)
 8010772:	589b      	ldr	r3, [r3, r2]
 8010774:	227c      	movs	r2, #124	; 0x7c
 8010776:	5c9b      	ldrb	r3, [r3, r2]
 8010778:	2b02      	cmp	r3, #2
 801077a:	d105      	bne.n	8010788 <OnAckTimeoutTimerEvent+0x3c>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 801077c:	4b0f      	ldr	r3, [pc, #60]	; (80107bc <OnAckTimeoutTimerEvent+0x70>)
 801077e:	4a13      	ldr	r2, [pc, #76]	; (80107cc <OnAckTimeoutTimerEvent+0x80>)
 8010780:	5c99      	ldrb	r1, [r3, r2]
 8010782:	2020      	movs	r0, #32
 8010784:	4301      	orrs	r1, r0
 8010786:	5499      	strb	r1, [r3, r2]
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8010788:	4a0c      	ldr	r2, [pc, #48]	; (80107bc <OnAckTimeoutTimerEvent+0x70>)
 801078a:	23d2      	movs	r3, #210	; 0xd2
 801078c:	009b      	lsls	r3, r3, #2
 801078e:	58d3      	ldr	r3, [r2, r3]
 8010790:	2b00      	cmp	r3, #0
 8010792:	d00c      	beq.n	80107ae <OnAckTimeoutTimerEvent+0x62>
 8010794:	4a09      	ldr	r2, [pc, #36]	; (80107bc <OnAckTimeoutTimerEvent+0x70>)
 8010796:	23d2      	movs	r3, #210	; 0xd2
 8010798:	009b      	lsls	r3, r3, #2
 801079a:	58d3      	ldr	r3, [r2, r3]
 801079c:	68db      	ldr	r3, [r3, #12]
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d005      	beq.n	80107ae <OnAckTimeoutTimerEvent+0x62>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 80107a2:	4a06      	ldr	r2, [pc, #24]	; (80107bc <OnAckTimeoutTimerEvent+0x70>)
 80107a4:	23d2      	movs	r3, #210	; 0xd2
 80107a6:	009b      	lsls	r3, r3, #2
 80107a8:	58d3      	ldr	r3, [r2, r3]
 80107aa:	68db      	ldr	r3, [r3, #12]
 80107ac:	4798      	blx	r3
    }
}
 80107ae:	46c0      	nop			; (mov r8, r8)
 80107b0:	46bd      	mov	sp, r7
 80107b2:	b002      	add	sp, #8
 80107b4:	bd80      	pop	{r7, pc}
 80107b6:	46c0      	nop			; (mov r8, r8)
 80107b8:	200009b0 	.word	0x200009b0
 80107bc:	200005b8 	.word	0x200005b8
 80107c0:	00000414 	.word	0x00000414
 80107c4:	00000413 	.word	0x00000413
 80107c8:	00000484 	.word	0x00000484
 80107cc:	00000481 	.word	0x00000481

080107d0 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 80107d0:	b590      	push	{r4, r7, lr}
 80107d2:	b085      	sub	sp, #20
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	60ba      	str	r2, [r7, #8]
 80107d8:	607b      	str	r3, [r7, #4]
 80107da:	230f      	movs	r3, #15
 80107dc:	18fb      	adds	r3, r7, r3
 80107de:	1c02      	adds	r2, r0, #0
 80107e0:	701a      	strb	r2, [r3, #0]
 80107e2:	230e      	movs	r3, #14
 80107e4:	18fb      	adds	r3, r7, r3
 80107e6:	1c0a      	adds	r2, r1, #0
 80107e8:	701a      	strb	r2, [r3, #0]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 80107ea:	68bb      	ldr	r3, [r7, #8]
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d005      	beq.n	80107fc <GetFCntDown+0x2c>
 80107f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d002      	beq.n	80107fc <GetFCntDown+0x2c>
 80107f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d101      	bne.n	8010800 <GetFCntDown+0x30>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80107fc:	230a      	movs	r3, #10
 80107fe:	e033      	b.n	8010868 <GetFCntDown+0x98>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 8010800:	230f      	movs	r3, #15
 8010802:	18fb      	adds	r3, r7, r3
 8010804:	781b      	ldrb	r3, [r3, #0]
 8010806:	2b00      	cmp	r3, #0
 8010808:	d01a      	beq.n	8010840 <GetFCntDown+0x70>
 801080a:	2b01      	cmp	r3, #1
 801080c:	d11c      	bne.n	8010848 <GetFCntDown+0x78>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 801080e:	1d3b      	adds	r3, r7, #4
 8010810:	789b      	ldrb	r3, [r3, #2]
 8010812:	2b01      	cmp	r3, #1
 8010814:	d110      	bne.n	8010838 <GetFCntDown+0x68>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8010816:	220e      	movs	r2, #14
 8010818:	18bb      	adds	r3, r7, r2
 801081a:	781b      	ldrb	r3, [r3, #0]
 801081c:	2b00      	cmp	r3, #0
 801081e:	d003      	beq.n	8010828 <GetFCntDown+0x58>
 8010820:	18bb      	adds	r3, r7, r2
 8010822:	781b      	ldrb	r3, [r3, #0]
 8010824:	2b03      	cmp	r3, #3
 8010826:	d103      	bne.n	8010830 <GetFCntDown+0x60>
                {
                    *fCntID = A_FCNT_DOWN;
 8010828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801082a:	2202      	movs	r2, #2
 801082c:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 801082e:	e00d      	b.n	801084c <GetFCntDown+0x7c>
                    *fCntID = N_FCNT_DOWN;
 8010830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010832:	2201      	movs	r2, #1
 8010834:	701a      	strb	r2, [r3, #0]
            break;
 8010836:	e009      	b.n	801084c <GetFCntDown+0x7c>
                *fCntID = FCNT_DOWN;
 8010838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801083a:	2203      	movs	r2, #3
 801083c:	701a      	strb	r2, [r3, #0]
            break;
 801083e:	e005      	b.n	801084c <GetFCntDown+0x7c>
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 8010840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010842:	2204      	movs	r2, #4
 8010844:	701a      	strb	r2, [r3, #0]
            break;
 8010846:	e001      	b.n	801084c <GetFCntDown+0x7c>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 1 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8010848:	2305      	movs	r3, #5
 801084a:	e00d      	b.n	8010868 <GetFCntDown+0x98>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 801084c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801084e:	7818      	ldrb	r0, [r3, #0]
 8010850:	68bb      	ldr	r3, [r7, #8]
 8010852:	89db      	ldrh	r3, [r3, #14]
 8010854:	001c      	movs	r4, r3
 8010856:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010858:	2320      	movs	r3, #32
 801085a:	18fb      	adds	r3, r7, r3
 801085c:	8819      	ldrh	r1, [r3, #0]
 801085e:	0013      	movs	r3, r2
 8010860:	0022      	movs	r2, r4
 8010862:	f005 faa1 	bl	8015da8 <LoRaMacCryptoGetFCntDown>
 8010866:	0003      	movs	r3, r0
}
 8010868:	0018      	movs	r0, r3
 801086a:	46bd      	mov	sp, r7
 801086c:	b005      	add	sp, #20
 801086e:	bd90      	pop	{r4, r7, pc}

08010870 <SwitchClass>:

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 8010870:	b5b0      	push	{r4, r5, r7, lr}
 8010872:	b084      	sub	sp, #16
 8010874:	af00      	add	r7, sp, #0
 8010876:	0002      	movs	r2, r0
 8010878:	1dfb      	adds	r3, r7, #7
 801087a:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 801087c:	230f      	movs	r3, #15
 801087e:	18fb      	adds	r3, r7, r3
 8010880:	2203      	movs	r2, #3
 8010882:	701a      	strb	r2, [r3, #0]

    switch( MacCtx.NvmCtx->DeviceClass )
 8010884:	4b82      	ldr	r3, [pc, #520]	; (8010a90 <SwitchClass+0x220>)
 8010886:	4a83      	ldr	r2, [pc, #524]	; (8010a94 <SwitchClass+0x224>)
 8010888:	589b      	ldr	r3, [r3, r2]
 801088a:	227c      	movs	r2, #124	; 0x7c
 801088c:	5c9b      	ldrb	r3, [r3, r2]
 801088e:	2b02      	cmp	r3, #2
 8010890:	d100      	bne.n	8010894 <SwitchClass+0x24>
 8010892:	e0de      	b.n	8010a52 <SwitchClass+0x1e2>
 8010894:	dd00      	ble.n	8010898 <SwitchClass+0x28>
 8010896:	e0f4      	b.n	8010a82 <SwitchClass+0x212>
 8010898:	2b00      	cmp	r3, #0
 801089a:	d003      	beq.n	80108a4 <SwitchClass+0x34>
 801089c:	2b01      	cmp	r3, #1
 801089e:	d100      	bne.n	80108a2 <SwitchClass+0x32>
 80108a0:	e0c2      	b.n	8010a28 <SwitchClass+0x1b8>
 80108a2:	e0ee      	b.n	8010a82 <SwitchClass+0x212>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 80108a4:	1dfb      	adds	r3, r7, #7
 80108a6:	781b      	ldrb	r3, [r3, #0]
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d10b      	bne.n	80108c4 <SwitchClass+0x54>
            {
                // Revert back RxC parameters
                MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 80108ac:	4b78      	ldr	r3, [pc, #480]	; (8010a90 <SwitchClass+0x220>)
 80108ae:	4a79      	ldr	r2, [pc, #484]	; (8010a94 <SwitchClass+0x224>)
 80108b0:	589a      	ldr	r2, [r3, r2]
 80108b2:	4b77      	ldr	r3, [pc, #476]	; (8010a90 <SwitchClass+0x220>)
 80108b4:	4977      	ldr	r1, [pc, #476]	; (8010a94 <SwitchClass+0x224>)
 80108b6:	585b      	ldr	r3, [r3, r1]
 80108b8:	20b0      	movs	r0, #176	; 0xb0
 80108ba:	21a8      	movs	r1, #168	; 0xa8
 80108bc:	181b      	adds	r3, r3, r0
 80108be:	1852      	adds	r2, r2, r1
 80108c0:	ca03      	ldmia	r2!, {r0, r1}
 80108c2:	c303      	stmia	r3!, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 80108c4:	1dfb      	adds	r3, r7, #7
 80108c6:	781b      	ldrb	r3, [r3, #0]
 80108c8:	2b01      	cmp	r3, #1
 80108ca:	d113      	bne.n	80108f4 <SwitchClass+0x84>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 80108cc:	250f      	movs	r5, #15
 80108ce:	197c      	adds	r4, r7, r5
 80108d0:	1dfb      	adds	r3, r7, #7
 80108d2:	781b      	ldrb	r3, [r3, #0]
 80108d4:	0018      	movs	r0, r3
 80108d6:	f004 f86d 	bl	80149b4 <LoRaMacClassBSwitchClass>
 80108da:	0003      	movs	r3, r0
 80108dc:	7023      	strb	r3, [r4, #0]
                if( status == LORAMAC_STATUS_OK )
 80108de:	197b      	adds	r3, r7, r5
 80108e0:	781b      	ldrb	r3, [r3, #0]
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d106      	bne.n	80108f4 <SwitchClass+0x84>
                {
                    MacCtx.NvmCtx->DeviceClass = deviceClass;
 80108e6:	4b6a      	ldr	r3, [pc, #424]	; (8010a90 <SwitchClass+0x220>)
 80108e8:	4a6a      	ldr	r2, [pc, #424]	; (8010a94 <SwitchClass+0x224>)
 80108ea:	589b      	ldr	r3, [r3, r2]
 80108ec:	1dfa      	adds	r2, r7, #7
 80108ee:	217c      	movs	r1, #124	; 0x7c
 80108f0:	7812      	ldrb	r2, [r2, #0]
 80108f2:	545a      	strb	r2, [r3, r1]
                }
            }

            if( deviceClass == CLASS_C )
 80108f4:	1dfb      	adds	r3, r7, #7
 80108f6:	781b      	ldrb	r3, [r3, #0]
 80108f8:	2b02      	cmp	r3, #2
 80108fa:	d000      	beq.n	80108fe <SwitchClass+0x8e>
 80108fc:	e0bc      	b.n	8010a78 <SwitchClass+0x208>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 80108fe:	4b64      	ldr	r3, [pc, #400]	; (8010a90 <SwitchClass+0x220>)
 8010900:	4a64      	ldr	r2, [pc, #400]	; (8010a94 <SwitchClass+0x224>)
 8010902:	589b      	ldr	r3, [r3, r2]
 8010904:	1dfa      	adds	r2, r7, #7
 8010906:	217c      	movs	r1, #124	; 0x7c
 8010908:	7812      	ldrb	r2, [r2, #0]
 801090a:	545a      	strb	r2, [r3, r1]

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 801090c:	4860      	ldr	r0, [pc, #384]	; (8010a90 <SwitchClass+0x220>)
 801090e:	23f8      	movs	r3, #248	; 0xf8
 8010910:	009b      	lsls	r3, r3, #2
 8010912:	495f      	ldr	r1, [pc, #380]	; (8010a90 <SwitchClass+0x220>)
 8010914:	22f3      	movs	r2, #243	; 0xf3
 8010916:	0092      	lsls	r2, r2, #2
 8010918:	18c3      	adds	r3, r0, r3
 801091a:	188a      	adds	r2, r1, r2
 801091c:	ca13      	ldmia	r2!, {r0, r1, r4}
 801091e:	c313      	stmia	r3!, {r0, r1, r4}
 8010920:	ca03      	ldmia	r2!, {r0, r1}
 8010922:	c303      	stmia	r3!, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010924:	4b5a      	ldr	r3, [pc, #360]	; (8010a90 <SwitchClass+0x220>)
 8010926:	4a5c      	ldr	r2, [pc, #368]	; (8010a98 <SwitchClass+0x228>)
 8010928:	2102      	movs	r1, #2
 801092a:	5499      	strb	r1, [r3, r2]

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801092c:	230e      	movs	r3, #14
 801092e:	18fb      	adds	r3, r7, r3
 8010930:	2200      	movs	r2, #0
 8010932:	701a      	strb	r2, [r3, #0]
 8010934:	e064      	b.n	8010a00 <SwitchClass+0x190>
                {
                    if( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true )
 8010936:	4b56      	ldr	r3, [pc, #344]	; (8010a90 <SwitchClass+0x220>)
 8010938:	4a56      	ldr	r2, [pc, #344]	; (8010a94 <SwitchClass+0x224>)
 801093a:	589a      	ldr	r2, [r3, r2]
 801093c:	240e      	movs	r4, #14
 801093e:	193b      	adds	r3, r7, r4
 8010940:	781b      	ldrb	r3, [r3, #0]
 8010942:	b25b      	sxtb	r3, r3
 8010944:	2152      	movs	r1, #82	; 0x52
 8010946:	202c      	movs	r0, #44	; 0x2c
 8010948:	4343      	muls	r3, r0
 801094a:	18d3      	adds	r3, r2, r3
 801094c:	185b      	adds	r3, r3, r1
 801094e:	781b      	ldrb	r3, [r3, #0]
 8010950:	2b00      	cmp	r3, #0
 8010952:	d04c      	beq.n	80109ee <SwitchClass+0x17e>
                    {
                        MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 8010954:	4b4e      	ldr	r3, [pc, #312]	; (8010a90 <SwitchClass+0x220>)
 8010956:	4a4f      	ldr	r2, [pc, #316]	; (8010a94 <SwitchClass+0x224>)
 8010958:	5899      	ldr	r1, [r3, r2]
 801095a:	193b      	adds	r3, r7, r4
 801095c:	781b      	ldrb	r3, [r3, #0]
 801095e:	b25b      	sxtb	r3, r3
 8010960:	4a4b      	ldr	r2, [pc, #300]	; (8010a90 <SwitchClass+0x220>)
 8010962:	484c      	ldr	r0, [pc, #304]	; (8010a94 <SwitchClass+0x224>)
 8010964:	5812      	ldr	r2, [r2, r0]
 8010966:	202c      	movs	r0, #44	; 0x2c
 8010968:	4343      	muls	r3, r0
 801096a:	18cb      	adds	r3, r1, r3
 801096c:	3368      	adds	r3, #104	; 0x68
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	21b0      	movs	r1, #176	; 0xb0
 8010972:	5053      	str	r3, [r2, r1]
                        MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8010974:	4b46      	ldr	r3, [pc, #280]	; (8010a90 <SwitchClass+0x220>)
 8010976:	4a47      	ldr	r2, [pc, #284]	; (8010a94 <SwitchClass+0x224>)
 8010978:	589a      	ldr	r2, [r3, r2]
 801097a:	193b      	adds	r3, r7, r4
 801097c:	781b      	ldrb	r3, [r3, #0]
 801097e:	b25b      	sxtb	r3, r3
 8010980:	216c      	movs	r1, #108	; 0x6c
 8010982:	202c      	movs	r0, #44	; 0x2c
 8010984:	4343      	muls	r3, r0
 8010986:	18d3      	adds	r3, r2, r3
 8010988:	185b      	adds	r3, r3, r1
 801098a:	2100      	movs	r1, #0
 801098c:	5659      	ldrsb	r1, [r3, r1]
 801098e:	4b40      	ldr	r3, [pc, #256]	; (8010a90 <SwitchClass+0x220>)
 8010990:	4a40      	ldr	r2, [pc, #256]	; (8010a94 <SwitchClass+0x224>)
 8010992:	589b      	ldr	r3, [r3, r2]
 8010994:	b2c9      	uxtb	r1, r1
 8010996:	22b4      	movs	r2, #180	; 0xb4
 8010998:	5499      	strb	r1, [r3, r2]

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 801099a:	4b3d      	ldr	r3, [pc, #244]	; (8010a90 <SwitchClass+0x220>)
 801099c:	4a3f      	ldr	r2, [pc, #252]	; (8010a9c <SwitchClass+0x22c>)
 801099e:	5c99      	ldrb	r1, [r3, r2]
 80109a0:	4a3b      	ldr	r2, [pc, #236]	; (8010a90 <SwitchClass+0x220>)
 80109a2:	23f8      	movs	r3, #248	; 0xf8
 80109a4:	009b      	lsls	r3, r3, #2
 80109a6:	54d1      	strb	r1, [r2, r3]
                        MacCtx.RxWindowCConfig.Frequency = MacCtx.NvmCtx->MacParams.RxCChannel.Frequency;
 80109a8:	4b39      	ldr	r3, [pc, #228]	; (8010a90 <SwitchClass+0x220>)
 80109aa:	4a3a      	ldr	r2, [pc, #232]	; (8010a94 <SwitchClass+0x224>)
 80109ac:	589b      	ldr	r3, [r3, r2]
 80109ae:	22b0      	movs	r2, #176	; 0xb0
 80109b0:	5899      	ldr	r1, [r3, r2]
 80109b2:	4a37      	ldr	r2, [pc, #220]	; (8010a90 <SwitchClass+0x220>)
 80109b4:	23f9      	movs	r3, #249	; 0xf9
 80109b6:	009b      	lsls	r3, r3, #2
 80109b8:	50d1      	str	r1, [r2, r3]
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80109ba:	4b35      	ldr	r3, [pc, #212]	; (8010a90 <SwitchClass+0x220>)
 80109bc:	4a35      	ldr	r2, [pc, #212]	; (8010a94 <SwitchClass+0x224>)
 80109be:	589b      	ldr	r3, [r3, r2]
 80109c0:	22b9      	movs	r2, #185	; 0xb9
 80109c2:	5c99      	ldrb	r1, [r3, r2]
 80109c4:	4a32      	ldr	r2, [pc, #200]	; (8010a90 <SwitchClass+0x220>)
 80109c6:	23fc      	movs	r3, #252	; 0xfc
 80109c8:	009b      	lsls	r3, r3, #2
 80109ca:	54d1      	strb	r1, [r2, r3]
                        MacCtx.RxWindowCConfig.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 80109cc:	4b30      	ldr	r3, [pc, #192]	; (8010a90 <SwitchClass+0x220>)
 80109ce:	4a31      	ldr	r2, [pc, #196]	; (8010a94 <SwitchClass+0x224>)
 80109d0:	589b      	ldr	r3, [r3, r2]
 80109d2:	22ca      	movs	r2, #202	; 0xca
 80109d4:	5c99      	ldrb	r1, [r3, r2]
 80109d6:	4b2e      	ldr	r3, [pc, #184]	; (8010a90 <SwitchClass+0x220>)
 80109d8:	4a31      	ldr	r2, [pc, #196]	; (8010aa0 <SwitchClass+0x230>)
 80109da:	5499      	strb	r1, [r3, r2]
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 80109dc:	4b2c      	ldr	r3, [pc, #176]	; (8010a90 <SwitchClass+0x220>)
 80109de:	4a2e      	ldr	r2, [pc, #184]	; (8010a98 <SwitchClass+0x228>)
 80109e0:	2103      	movs	r1, #3
 80109e2:	5499      	strb	r1, [r3, r2]
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 80109e4:	4b2a      	ldr	r3, [pc, #168]	; (8010a90 <SwitchClass+0x220>)
 80109e6:	4a2f      	ldr	r2, [pc, #188]	; (8010aa4 <SwitchClass+0x234>)
 80109e8:	2101      	movs	r1, #1
 80109ea:	5499      	strb	r1, [r3, r2]
                        break;
 80109ec:	e00e      	b.n	8010a0c <SwitchClass+0x19c>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80109ee:	210e      	movs	r1, #14
 80109f0:	187b      	adds	r3, r7, r1
 80109f2:	781b      	ldrb	r3, [r3, #0]
 80109f4:	b25b      	sxtb	r3, r3
 80109f6:	b2db      	uxtb	r3, r3
 80109f8:	3301      	adds	r3, #1
 80109fa:	b2da      	uxtb	r2, r3
 80109fc:	187b      	adds	r3, r7, r1
 80109fe:	701a      	strb	r2, [r3, #0]
 8010a00:	230e      	movs	r3, #14
 8010a02:	18fb      	adds	r3, r7, r3
 8010a04:	781b      	ldrb	r3, [r3, #0]
 8010a06:	b25b      	sxtb	r3, r3
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	dd94      	ble.n	8010936 <SwitchClass+0xc6>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 8010a0c:	4b20      	ldr	r3, [pc, #128]	; (8010a90 <SwitchClass+0x220>)
 8010a0e:	4a26      	ldr	r2, [pc, #152]	; (8010aa8 <SwitchClass+0x238>)
 8010a10:	2100      	movs	r1, #0
 8010a12:	5499      	strb	r1, [r3, r2]
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 8010a14:	4b25      	ldr	r3, [pc, #148]	; (8010aac <SwitchClass+0x23c>)
 8010a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a18:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 8010a1a:	f001 fc01 	bl	8012220 <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 8010a1e:	230f      	movs	r3, #15
 8010a20:	18fb      	adds	r3, r7, r3
 8010a22:	2200      	movs	r2, #0
 8010a24:	701a      	strb	r2, [r3, #0]
            }
            break;
 8010a26:	e027      	b.n	8010a78 <SwitchClass+0x208>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 8010a28:	250f      	movs	r5, #15
 8010a2a:	197c      	adds	r4, r7, r5
 8010a2c:	1dfb      	adds	r3, r7, #7
 8010a2e:	781b      	ldrb	r3, [r3, #0]
 8010a30:	0018      	movs	r0, r3
 8010a32:	f003 ffbf 	bl	80149b4 <LoRaMacClassBSwitchClass>
 8010a36:	0003      	movs	r3, r0
 8010a38:	7023      	strb	r3, [r4, #0]
            if( status == LORAMAC_STATUS_OK )
 8010a3a:	197b      	adds	r3, r7, r5
 8010a3c:	781b      	ldrb	r3, [r3, #0]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d11c      	bne.n	8010a7c <SwitchClass+0x20c>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 8010a42:	4b13      	ldr	r3, [pc, #76]	; (8010a90 <SwitchClass+0x220>)
 8010a44:	4a13      	ldr	r2, [pc, #76]	; (8010a94 <SwitchClass+0x224>)
 8010a46:	589b      	ldr	r3, [r3, r2]
 8010a48:	1dfa      	adds	r2, r7, #7
 8010a4a:	217c      	movs	r1, #124	; 0x7c
 8010a4c:	7812      	ldrb	r2, [r2, #0]
 8010a4e:	545a      	strb	r2, [r3, r1]
            }
            break;
 8010a50:	e014      	b.n	8010a7c <SwitchClass+0x20c>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 8010a52:	1dfb      	adds	r3, r7, #7
 8010a54:	781b      	ldrb	r3, [r3, #0]
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d112      	bne.n	8010a80 <SwitchClass+0x210>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 8010a5a:	4b0d      	ldr	r3, [pc, #52]	; (8010a90 <SwitchClass+0x220>)
 8010a5c:	4a0d      	ldr	r2, [pc, #52]	; (8010a94 <SwitchClass+0x224>)
 8010a5e:	589b      	ldr	r3, [r3, r2]
 8010a60:	1dfa      	adds	r2, r7, #7
 8010a62:	217c      	movs	r1, #124	; 0x7c
 8010a64:	7812      	ldrb	r2, [r2, #0]
 8010a66:	545a      	strb	r2, [r3, r1]

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 8010a68:	4b10      	ldr	r3, [pc, #64]	; (8010aac <SwitchClass+0x23c>)
 8010a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a6c:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 8010a6e:	230f      	movs	r3, #15
 8010a70:	18fb      	adds	r3, r7, r3
 8010a72:	2200      	movs	r2, #0
 8010a74:	701a      	strb	r2, [r3, #0]
            }
            break;
 8010a76:	e003      	b.n	8010a80 <SwitchClass+0x210>
            break;
 8010a78:	46c0      	nop			; (mov r8, r8)
 8010a7a:	e002      	b.n	8010a82 <SwitchClass+0x212>
            break;
 8010a7c:	46c0      	nop			; (mov r8, r8)
 8010a7e:	e000      	b.n	8010a82 <SwitchClass+0x212>
            break;
 8010a80:	46c0      	nop			; (mov r8, r8)
        }
    }

    return status;
 8010a82:	230f      	movs	r3, #15
 8010a84:	18fb      	adds	r3, r7, r3
 8010a86:	781b      	ldrb	r3, [r3, #0]
}
 8010a88:	0018      	movs	r0, r3
 8010a8a:	46bd      	mov	sp, r7
 8010a8c:	b004      	add	sp, #16
 8010a8e:	bdb0      	pop	{r4, r5, r7, pc}
 8010a90:	200005b8 	.word	0x200005b8
 8010a94:	00000484 	.word	0x00000484
 8010a98:	000003f3 	.word	0x000003f3
 8010a9c:	00000415 	.word	0x00000415
 8010aa0:	000003f1 	.word	0x000003f1
 8010aa4:	000003f2 	.word	0x000003f2
 8010aa8:	00000414 	.word	0x00000414
 8010aac:	0801fe28 	.word	0x0801fe28

08010ab0 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 8010ab0:	b580      	push	{r7, lr}
 8010ab2:	b086      	sub	sp, #24
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	0002      	movs	r2, r0
 8010ab8:	1dfb      	adds	r3, r7, #7
 8010aba:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8010abc:	4b17      	ldr	r3, [pc, #92]	; (8010b1c <GetMaxAppPayloadWithoutFOptsLength+0x6c>)
 8010abe:	4a18      	ldr	r2, [pc, #96]	; (8010b20 <GetMaxAppPayloadWithoutFOptsLength+0x70>)
 8010ac0:	589b      	ldr	r3, [r3, r2]
 8010ac2:	22b8      	movs	r2, #184	; 0xb8
 8010ac4:	5c9a      	ldrb	r2, [r3, r2]
 8010ac6:	2110      	movs	r1, #16
 8010ac8:	187b      	adds	r3, r7, r1
 8010aca:	709a      	strb	r2, [r3, #2]
    getPhy.Datarate = datarate;
 8010acc:	187b      	adds	r3, r7, r1
 8010ace:	1dfa      	adds	r2, r7, #7
 8010ad0:	7812      	ldrb	r2, [r2, #0]
 8010ad2:	705a      	strb	r2, [r3, #1]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8010ad4:	187b      	adds	r3, r7, r1
 8010ad6:	220d      	movs	r2, #13
 8010ad8:	701a      	strb	r2, [r3, #0]

    // Get the maximum payload length
    if( MacCtx.NvmCtx->RepeaterSupport == true )
 8010ada:	4b10      	ldr	r3, [pc, #64]	; (8010b1c <GetMaxAppPayloadWithoutFOptsLength+0x6c>)
 8010adc:	4a10      	ldr	r2, [pc, #64]	; (8010b20 <GetMaxAppPayloadWithoutFOptsLength+0x70>)
 8010ade:	589b      	ldr	r3, [r3, r2]
 8010ae0:	22ca      	movs	r2, #202	; 0xca
 8010ae2:	5c9b      	ldrb	r3, [r3, r2]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d002      	beq.n	8010aee <GetMaxAppPayloadWithoutFOptsLength+0x3e>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8010ae8:	187b      	adds	r3, r7, r1
 8010aea:	220e      	movs	r2, #14
 8010aec:	701a      	strb	r2, [r3, #0]
    }

    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8010aee:	4b0b      	ldr	r3, [pc, #44]	; (8010b1c <GetMaxAppPayloadWithoutFOptsLength+0x6c>)
 8010af0:	4a0b      	ldr	r2, [pc, #44]	; (8010b20 <GetMaxAppPayloadWithoutFOptsLength+0x70>)
 8010af2:	589b      	ldr	r3, [r3, r2]
 8010af4:	781b      	ldrb	r3, [r3, #0]
 8010af6:	2210      	movs	r2, #16
 8010af8:	18ba      	adds	r2, r7, r2
 8010afa:	0011      	movs	r1, r2
 8010afc:	0018      	movs	r0, r3
 8010afe:	f006 f8c8 	bl	8016c92 <RegionGetPhyParam>
 8010b02:	0003      	movs	r3, r0
 8010b04:	001a      	movs	r2, r3
 8010b06:	210c      	movs	r1, #12
 8010b08:	187b      	adds	r3, r7, r1
 8010b0a:	601a      	str	r2, [r3, #0]

    return phyParam.Value;
 8010b0c:	187b      	adds	r3, r7, r1
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	b2db      	uxtb	r3, r3
}
 8010b12:	0018      	movs	r0, r3
 8010b14:	46bd      	mov	sp, r7
 8010b16:	b006      	add	sp, #24
 8010b18:	bd80      	pop	{r7, pc}
 8010b1a:	46c0      	nop			; (mov r8, r8)
 8010b1c:	200005b8 	.word	0x200005b8
 8010b20:	00000484 	.word	0x00000484

08010b24 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 8010b24:	b5b0      	push	{r4, r5, r7, lr}
 8010b26:	b084      	sub	sp, #16
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	0004      	movs	r4, r0
 8010b2c:	0008      	movs	r0, r1
 8010b2e:	0011      	movs	r1, r2
 8010b30:	1dfb      	adds	r3, r7, #7
 8010b32:	1c22      	adds	r2, r4, #0
 8010b34:	701a      	strb	r2, [r3, #0]
 8010b36:	1dbb      	adds	r3, r7, #6
 8010b38:	1c02      	adds	r2, r0, #0
 8010b3a:	701a      	strb	r2, [r3, #0]
 8010b3c:	1d7b      	adds	r3, r7, #5
 8010b3e:	1c0a      	adds	r2, r1, #0
 8010b40:	701a      	strb	r2, [r3, #0]
    uint16_t maxN = 0;
 8010b42:	250e      	movs	r5, #14
 8010b44:	197b      	adds	r3, r7, r5
 8010b46:	2200      	movs	r2, #0
 8010b48:	801a      	strh	r2, [r3, #0]
    uint16_t payloadSize = 0;
 8010b4a:	240c      	movs	r4, #12
 8010b4c:	193b      	adds	r3, r7, r4
 8010b4e:	2200      	movs	r2, #0
 8010b50:	801a      	strh	r2, [r3, #0]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8010b52:	1dbb      	adds	r3, r7, #6
 8010b54:	781b      	ldrb	r3, [r3, #0]
 8010b56:	b25b      	sxtb	r3, r3
 8010b58:	0018      	movs	r0, r3
 8010b5a:	f7ff ffa9 	bl	8010ab0 <GetMaxAppPayloadWithoutFOptsLength>
 8010b5e:	0003      	movs	r3, r0
 8010b60:	001a      	movs	r2, r3
 8010b62:	0028      	movs	r0, r5
 8010b64:	183b      	adds	r3, r7, r0
 8010b66:	801a      	strh	r2, [r3, #0]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 8010b68:	1dfb      	adds	r3, r7, #7
 8010b6a:	781b      	ldrb	r3, [r3, #0]
 8010b6c:	b299      	uxth	r1, r3
 8010b6e:	1d7b      	adds	r3, r7, #5
 8010b70:	781b      	ldrb	r3, [r3, #0]
 8010b72:	b29a      	uxth	r2, r3
 8010b74:	193b      	adds	r3, r7, r4
 8010b76:	188a      	adds	r2, r1, r2
 8010b78:	801a      	strh	r2, [r3, #0]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8010b7a:	193a      	adds	r2, r7, r4
 8010b7c:	183b      	adds	r3, r7, r0
 8010b7e:	8812      	ldrh	r2, [r2, #0]
 8010b80:	881b      	ldrh	r3, [r3, #0]
 8010b82:	429a      	cmp	r2, r3
 8010b84:	d805      	bhi.n	8010b92 <ValidatePayloadLength+0x6e>
 8010b86:	193b      	adds	r3, r7, r4
 8010b88:	881b      	ldrh	r3, [r3, #0]
 8010b8a:	2bff      	cmp	r3, #255	; 0xff
 8010b8c:	d801      	bhi.n	8010b92 <ValidatePayloadLength+0x6e>
    {
        return true;
 8010b8e:	2301      	movs	r3, #1
 8010b90:	e000      	b.n	8010b94 <ValidatePayloadLength+0x70>
    }
    return false;
 8010b92:	2300      	movs	r3, #0
}
 8010b94:	0018      	movs	r0, r3
 8010b96:	46bd      	mov	sp, r7
 8010b98:	b004      	add	sp, #16
 8010b9a:	bdb0      	pop	{r4, r5, r7, pc}

08010b9c <SetMlmeScheduleUplinkIndication>:

static void SetMlmeScheduleUplinkIndication( void )
{
 8010b9c:	b580      	push	{r7, lr}
 8010b9e:	af00      	add	r7, sp, #0
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8010ba0:	4b04      	ldr	r3, [pc, #16]	; (8010bb4 <SetMlmeScheduleUplinkIndication+0x18>)
 8010ba2:	4a05      	ldr	r2, [pc, #20]	; (8010bb8 <SetMlmeScheduleUplinkIndication+0x1c>)
 8010ba4:	5c99      	ldrb	r1, [r3, r2]
 8010ba6:	2010      	movs	r0, #16
 8010ba8:	4301      	orrs	r1, r0
 8010baa:	5499      	strb	r1, [r3, r2]
}
 8010bac:	46c0      	nop			; (mov r8, r8)
 8010bae:	46bd      	mov	sp, r7
 8010bb0:	bd80      	pop	{r7, pc}
 8010bb2:	46c0      	nop			; (mov r8, r8)
 8010bb4:	200005b8 	.word	0x200005b8
 8010bb8:	00000481 	.word	0x00000481

08010bbc <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 8010bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010bbe:	b0a5      	sub	sp, #148	; 0x94
 8010bc0:	af02      	add	r7, sp, #8
 8010bc2:	6078      	str	r0, [r7, #4]
 8010bc4:	000c      	movs	r4, r1
 8010bc6:	0010      	movs	r0, r2
 8010bc8:	0019      	movs	r1, r3
 8010bca:	1cfb      	adds	r3, r7, #3
 8010bcc:	1c22      	adds	r2, r4, #0
 8010bce:	701a      	strb	r2, [r3, #0]
 8010bd0:	1cbb      	adds	r3, r7, #2
 8010bd2:	1c02      	adds	r2, r0, #0
 8010bd4:	701a      	strb	r2, [r3, #0]
 8010bd6:	1c7b      	adds	r3, r7, #1
 8010bd8:	1c0a      	adds	r2, r1, #0
 8010bda:	701a      	strb	r2, [r3, #0]
    uint8_t status = 0;
 8010bdc:	236b      	movs	r3, #107	; 0x6b
 8010bde:	18fb      	adds	r3, r7, r3
 8010be0:	2200      	movs	r2, #0
 8010be2:	701a      	strb	r2, [r3, #0]
    bool adrBlockFound = false;
 8010be4:	2387      	movs	r3, #135	; 0x87
 8010be6:	18fb      	adds	r3, r7, r3
 8010be8:	2200      	movs	r2, #0
 8010bea:	701a      	strb	r2, [r3, #0]
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8010bec:	2368      	movs	r3, #104	; 0x68
 8010bee:	18fb      	adds	r3, r7, r3
 8010bf0:	2200      	movs	r2, #0
 8010bf2:	801a      	strh	r2, [r3, #0]

    while( macIndex < commandsSize )
 8010bf4:	f000 fd58 	bl	80116a8 <ProcessMacCommands+0xaec>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8010bf8:	1cfb      	adds	r3, r7, #3
 8010bfa:	781b      	ldrb	r3, [r3, #0]
 8010bfc:	687a      	ldr	r2, [r7, #4]
 8010bfe:	18d3      	adds	r3, r2, r3
 8010c00:	781b      	ldrb	r3, [r3, #0]
 8010c02:	0018      	movs	r0, r3
 8010c04:	f004 fa06 	bl	8015014 <LoRaMacCommandsGetCmdSize>
 8010c08:	0003      	movs	r3, r0
 8010c0a:	001a      	movs	r2, r3
 8010c0c:	1cfb      	adds	r3, r7, #3
 8010c0e:	781b      	ldrb	r3, [r3, #0]
 8010c10:	18d2      	adds	r2, r2, r3
 8010c12:	1cbb      	adds	r3, r7, #2
 8010c14:	781b      	ldrb	r3, [r3, #0]
 8010c16:	429a      	cmp	r2, r3
 8010c18:	dd01      	ble.n	8010c1e <ProcessMacCommands+0x62>
 8010c1a:	f000 fd4e 	bl	80116ba <ProcessMacCommands+0xafe>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 8010c1e:	1cfb      	adds	r3, r7, #3
 8010c20:	781b      	ldrb	r3, [r3, #0]
 8010c22:	1cfa      	adds	r2, r7, #3
 8010c24:	1c59      	adds	r1, r3, #1
 8010c26:	7011      	strb	r1, [r2, #0]
 8010c28:	001a      	movs	r2, r3
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	189b      	adds	r3, r3, r2
 8010c2e:	781b      	ldrb	r3, [r3, #0]
 8010c30:	2b13      	cmp	r3, #19
 8010c32:	d901      	bls.n	8010c38 <ProcessMacCommands+0x7c>
 8010c34:	f000 fd43 	bl	80116be <ProcessMacCommands+0xb02>
 8010c38:	009a      	lsls	r2, r3, #2
 8010c3a:	4bee      	ldr	r3, [pc, #952]	; (8010ff4 <ProcessMacCommands+0x438>)
 8010c3c:	18d3      	adds	r3, r2, r3
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	469f      	mov	pc, r3
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8010c42:	2004      	movs	r0, #4
 8010c44:	f004 fc08 	bl	8015458 <LoRaMacConfirmQueueIsCmdActive>
 8010c48:	1e03      	subs	r3, r0, #0
 8010c4a:	d101      	bne.n	8010c50 <ProcessMacCommands+0x94>
 8010c4c:	f000 fd2c 	bl	80116a8 <ProcessMacCommands+0xaec>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8010c50:	2104      	movs	r1, #4
 8010c52:	2000      	movs	r0, #0
 8010c54:	f004 fb64 	bl	8015320 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8010c58:	1cfb      	adds	r3, r7, #3
 8010c5a:	781b      	ldrb	r3, [r3, #0]
 8010c5c:	1cfa      	adds	r2, r7, #3
 8010c5e:	1c59      	adds	r1, r3, #1
 8010c60:	7011      	strb	r1, [r2, #0]
 8010c62:	001a      	movs	r2, r3
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	189b      	adds	r3, r3, r2
 8010c68:	7819      	ldrb	r1, [r3, #0]
 8010c6a:	4ae3      	ldr	r2, [pc, #908]	; (8010ff8 <ProcessMacCommands+0x43c>)
 8010c6c:	238b      	movs	r3, #139	; 0x8b
 8010c6e:	00db      	lsls	r3, r3, #3
 8010c70:	54d1      	strb	r1, [r2, r3]
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8010c72:	1cfb      	adds	r3, r7, #3
 8010c74:	781b      	ldrb	r3, [r3, #0]
 8010c76:	1cfa      	adds	r2, r7, #3
 8010c78:	1c59      	adds	r1, r3, #1
 8010c7a:	7011      	strb	r1, [r2, #0]
 8010c7c:	001a      	movs	r2, r3
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	189b      	adds	r3, r3, r2
 8010c82:	7819      	ldrb	r1, [r3, #0]
 8010c84:	4bdc      	ldr	r3, [pc, #880]	; (8010ff8 <ProcessMacCommands+0x43c>)
 8010c86:	4add      	ldr	r2, [pc, #884]	; (8010ffc <ProcessMacCommands+0x440>)
 8010c88:	5499      	strb	r1, [r3, r2]
                }
                break;
 8010c8a:	f000 fd0d 	bl	80116a8 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 8010c8e:	2657      	movs	r6, #87	; 0x57
 8010c90:	19bb      	adds	r3, r7, r6
 8010c92:	2200      	movs	r2, #0
 8010c94:	701a      	strb	r2, [r3, #0]
                int8_t linkAdrTxPower = TX_POWER_0;
 8010c96:	2456      	movs	r4, #86	; 0x56
 8010c98:	193b      	adds	r3, r7, r4
 8010c9a:	2200      	movs	r2, #0
 8010c9c:	701a      	strb	r2, [r3, #0]
                uint8_t linkAdrNbRep = 0;
 8010c9e:	2555      	movs	r5, #85	; 0x55
 8010ca0:	197b      	adds	r3, r7, r5
 8010ca2:	2200      	movs	r2, #0
 8010ca4:	701a      	strb	r2, [r3, #0]
                uint8_t linkAdrNbBytesParsed = 0;
 8010ca6:	2354      	movs	r3, #84	; 0x54
 8010ca8:	18fb      	adds	r3, r7, r3
 8010caa:	2200      	movs	r2, #0
 8010cac:	701a      	strb	r2, [r3, #0]

                if( adrBlockFound == false )
 8010cae:	2187      	movs	r1, #135	; 0x87
 8010cb0:	187b      	adds	r3, r7, r1
 8010cb2:	781b      	ldrb	r3, [r3, #0]
 8010cb4:	2201      	movs	r2, #1
 8010cb6:	4053      	eors	r3, r2
 8010cb8:	b2db      	uxtb	r3, r3
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d100      	bne.n	8010cc0 <ProcessMacCommands+0x104>
 8010cbe:	e09d      	b.n	8010dfc <ProcessMacCommands+0x240>
                {
                    adrBlockFound = true;
 8010cc0:	187b      	adds	r3, r7, r1
 8010cc2:	2201      	movs	r2, #1
 8010cc4:	701a      	strb	r2, [r3, #0]

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 8010cc6:	1cfb      	adds	r3, r7, #3
 8010cc8:	781b      	ldrb	r3, [r3, #0]
 8010cca:	3b01      	subs	r3, #1
 8010ccc:	687a      	ldr	r2, [r7, #4]
 8010cce:	18d2      	adds	r2, r2, r3
 8010cd0:	2158      	movs	r1, #88	; 0x58
 8010cd2:	187b      	adds	r3, r7, r1
 8010cd4:	605a      	str	r2, [r3, #4]
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8010cd6:	1cba      	adds	r2, r7, #2
 8010cd8:	1cfb      	adds	r3, r7, #3
 8010cda:	7812      	ldrb	r2, [r2, #0]
 8010cdc:	781b      	ldrb	r3, [r3, #0]
 8010cde:	1ad3      	subs	r3, r2, r3
 8010ce0:	b2db      	uxtb	r3, r3
 8010ce2:	3301      	adds	r3, #1
 8010ce4:	b2da      	uxtb	r2, r3
 8010ce6:	000d      	movs	r5, r1
 8010ce8:	197b      	adds	r3, r7, r5
 8010cea:	721a      	strb	r2, [r3, #8]
                    linkAdrReq.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 8010cec:	4bc2      	ldr	r3, [pc, #776]	; (8010ff8 <ProcessMacCommands+0x43c>)
 8010cee:	4ac4      	ldr	r2, [pc, #784]	; (8011000 <ProcessMacCommands+0x444>)
 8010cf0:	589b      	ldr	r3, [r3, r2]
 8010cf2:	227e      	movs	r2, #126	; 0x7e
 8010cf4:	5c9a      	ldrb	r2, [r3, r2]
 8010cf6:	197b      	adds	r3, r7, r5
 8010cf8:	729a      	strb	r2, [r3, #10]
                    linkAdrReq.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8010cfa:	4bbf      	ldr	r3, [pc, #764]	; (8010ff8 <ProcessMacCommands+0x43c>)
 8010cfc:	4ac0      	ldr	r2, [pc, #768]	; (8011000 <ProcessMacCommands+0x444>)
 8010cfe:	589b      	ldr	r3, [r3, r2]
 8010d00:	22b8      	movs	r2, #184	; 0xb8
 8010d02:	5c9a      	ldrb	r2, [r3, r2]
 8010d04:	197b      	adds	r3, r7, r5
 8010d06:	725a      	strb	r2, [r3, #9]
                    linkAdrReq.CurrentDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8010d08:	4bbb      	ldr	r3, [pc, #748]	; (8010ff8 <ProcessMacCommands+0x43c>)
 8010d0a:	4abd      	ldr	r2, [pc, #756]	; (8011000 <ProcessMacCommands+0x444>)
 8010d0c:	589b      	ldr	r3, [r3, r2]
 8010d0e:	2285      	movs	r2, #133	; 0x85
 8010d10:	569a      	ldrsb	r2, [r3, r2]
 8010d12:	197b      	adds	r3, r7, r5
 8010d14:	72da      	strb	r2, [r3, #11]
                    linkAdrReq.CurrentTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8010d16:	4bb8      	ldr	r3, [pc, #736]	; (8010ff8 <ProcessMacCommands+0x43c>)
 8010d18:	4ab9      	ldr	r2, [pc, #740]	; (8011000 <ProcessMacCommands+0x444>)
 8010d1a:	589b      	ldr	r3, [r3, r2]
 8010d1c:	2284      	movs	r2, #132	; 0x84
 8010d1e:	569a      	ldrsb	r2, [r3, r2]
 8010d20:	197b      	adds	r3, r7, r5
 8010d22:	731a      	strb	r2, [r3, #12]
                    linkAdrReq.CurrentNbRep = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 8010d24:	4bb4      	ldr	r3, [pc, #720]	; (8010ff8 <ProcessMacCommands+0x43c>)
 8010d26:	4ab6      	ldr	r2, [pc, #728]	; (8011000 <ProcessMacCommands+0x444>)
 8010d28:	589b      	ldr	r3, [r3, r2]
 8010d2a:	22a4      	movs	r2, #164	; 0xa4
 8010d2c:	5c9a      	ldrb	r2, [r3, r2]
 8010d2e:	197b      	adds	r3, r7, r5
 8010d30:	735a      	strb	r2, [r3, #13]
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 8010d32:	4bb1      	ldr	r3, [pc, #708]	; (8010ff8 <ProcessMacCommands+0x43c>)
 8010d34:	4ab2      	ldr	r2, [pc, #712]	; (8011000 <ProcessMacCommands+0x444>)
 8010d36:	5899      	ldr	r1, [r3, r2]
 8010d38:	197b      	adds	r3, r7, r5
 8010d3a:	22b0      	movs	r2, #176	; 0xb0
 8010d3c:	0052      	lsls	r2, r2, #1
 8010d3e:	588a      	ldr	r2, [r1, r2]
 8010d40:	601a      	str	r2, [r3, #0]

                    // Process the ADR requests
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 8010d42:	4bad      	ldr	r3, [pc, #692]	; (8010ff8 <ProcessMacCommands+0x43c>)
 8010d44:	4aae      	ldr	r2, [pc, #696]	; (8011000 <ProcessMacCommands+0x444>)
 8010d46:	589b      	ldr	r3, [r3, r2]
 8010d48:	7818      	ldrb	r0, [r3, #0]
 8010d4a:	193c      	adds	r4, r7, r4
 8010d4c:	19ba      	adds	r2, r7, r6
 8010d4e:	1979      	adds	r1, r7, r5
 8010d50:	2354      	movs	r3, #84	; 0x54
 8010d52:	18fb      	adds	r3, r7, r3
 8010d54:	9301      	str	r3, [sp, #4]
 8010d56:	2555      	movs	r5, #85	; 0x55
 8010d58:	197b      	adds	r3, r7, r5
 8010d5a:	9300      	str	r3, [sp, #0]
 8010d5c:	0023      	movs	r3, r4
 8010d5e:	f006 f8a0 	bl	8016ea2 <RegionLinkAdrReq>
 8010d62:	0003      	movs	r3, r0
 8010d64:	001a      	movs	r2, r3
 8010d66:	216b      	movs	r1, #107	; 0x6b
 8010d68:	187b      	adds	r3, r7, r1
 8010d6a:	701a      	strb	r2, [r3, #0]
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 8010d6c:	187b      	adds	r3, r7, r1
 8010d6e:	781b      	ldrb	r3, [r3, #0]
 8010d70:	001a      	movs	r2, r3
 8010d72:	2307      	movs	r3, #7
 8010d74:	4013      	ands	r3, r2
 8010d76:	2b07      	cmp	r3, #7
 8010d78:	d117      	bne.n	8010daa <ProcessMacCommands+0x1ee>
                    {
                        MacCtx.NvmCtx->MacParams.ChannelsDatarate = linkAdrDatarate;
 8010d7a:	4b9f      	ldr	r3, [pc, #636]	; (8010ff8 <ProcessMacCommands+0x43c>)
 8010d7c:	4aa0      	ldr	r2, [pc, #640]	; (8011000 <ProcessMacCommands+0x444>)
 8010d7e:	589b      	ldr	r3, [r3, r2]
 8010d80:	19ba      	adds	r2, r7, r6
 8010d82:	2100      	movs	r1, #0
 8010d84:	5651      	ldrsb	r1, [r2, r1]
 8010d86:	2285      	movs	r2, #133	; 0x85
 8010d88:	5499      	strb	r1, [r3, r2]
                        MacCtx.NvmCtx->MacParams.ChannelsTxPower = linkAdrTxPower;
 8010d8a:	4b9b      	ldr	r3, [pc, #620]	; (8010ff8 <ProcessMacCommands+0x43c>)
 8010d8c:	4a9c      	ldr	r2, [pc, #624]	; (8011000 <ProcessMacCommands+0x444>)
 8010d8e:	589b      	ldr	r3, [r3, r2]
 8010d90:	2456      	movs	r4, #86	; 0x56
 8010d92:	193a      	adds	r2, r7, r4
 8010d94:	2100      	movs	r1, #0
 8010d96:	5651      	ldrsb	r1, [r2, r1]
 8010d98:	2284      	movs	r2, #132	; 0x84
 8010d9a:	5499      	strb	r1, [r3, r2]
                        MacCtx.NvmCtx->MacParams.ChannelsNbTrans = linkAdrNbRep;
 8010d9c:	4b96      	ldr	r3, [pc, #600]	; (8010ff8 <ProcessMacCommands+0x43c>)
 8010d9e:	4a98      	ldr	r2, [pc, #608]	; (8011000 <ProcessMacCommands+0x444>)
 8010da0:	589b      	ldr	r3, [r3, r2]
 8010da2:	197a      	adds	r2, r7, r5
 8010da4:	7811      	ldrb	r1, [r2, #0]
 8010da6:	22a4      	movs	r2, #164	; 0xa4
 8010da8:	5499      	strb	r1, [r3, r2]
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8010daa:	2386      	movs	r3, #134	; 0x86
 8010dac:	18fb      	adds	r3, r7, r3
 8010dae:	2200      	movs	r2, #0
 8010db0:	701a      	strb	r2, [r3, #0]
 8010db2:	e00c      	b.n	8010dce <ProcessMacCommands+0x212>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8010db4:	236b      	movs	r3, #107	; 0x6b
 8010db6:	18fb      	adds	r3, r7, r3
 8010db8:	2201      	movs	r2, #1
 8010dba:	0019      	movs	r1, r3
 8010dbc:	2003      	movs	r0, #3
 8010dbe:	f003 ffb9 	bl	8014d34 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8010dc2:	2186      	movs	r1, #134	; 0x86
 8010dc4:	187b      	adds	r3, r7, r1
 8010dc6:	781a      	ldrb	r2, [r3, #0]
 8010dc8:	187b      	adds	r3, r7, r1
 8010dca:	3201      	adds	r2, #1
 8010dcc:	701a      	strb	r2, [r3, #0]
 8010dce:	2454      	movs	r4, #84	; 0x54
 8010dd0:	193b      	adds	r3, r7, r4
 8010dd2:	781b      	ldrb	r3, [r3, #0]
 8010dd4:	2105      	movs	r1, #5
 8010dd6:	0018      	movs	r0, r3
 8010dd8:	f7ef f99e 	bl	8000118 <__udivsi3>
 8010ddc:	0003      	movs	r3, r0
 8010dde:	b2db      	uxtb	r3, r3
 8010de0:	2286      	movs	r2, #134	; 0x86
 8010de2:	18ba      	adds	r2, r7, r2
 8010de4:	7812      	ldrb	r2, [r2, #0]
 8010de6:	429a      	cmp	r2, r3
 8010de8:	d3e4      	bcc.n	8010db4 <ProcessMacCommands+0x1f8>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 8010dea:	193b      	adds	r3, r7, r4
 8010dec:	781a      	ldrb	r2, [r3, #0]
 8010dee:	1cfb      	adds	r3, r7, #3
 8010df0:	781b      	ldrb	r3, [r3, #0]
 8010df2:	18d3      	adds	r3, r2, r3
 8010df4:	b2da      	uxtb	r2, r3
 8010df6:	1cfb      	adds	r3, r7, #3
 8010df8:	3a01      	subs	r2, #1
 8010dfa:	701a      	strb	r2, [r3, #0]
                }
                break;
 8010dfc:	46c0      	nop			; (mov r8, r8)
 8010dfe:	f000 fc53 	bl	80116a8 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 8010e02:	1cfb      	adds	r3, r7, #3
 8010e04:	781b      	ldrb	r3, [r3, #0]
 8010e06:	1cfa      	adds	r2, r7, #3
 8010e08:	1c59      	adds	r1, r3, #1
 8010e0a:	7011      	strb	r1, [r2, #0]
 8010e0c:	001a      	movs	r2, r3
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	189b      	adds	r3, r3, r2
 8010e12:	781a      	ldrb	r2, [r3, #0]
 8010e14:	4b78      	ldr	r3, [pc, #480]	; (8010ff8 <ProcessMacCommands+0x43c>)
 8010e16:	497a      	ldr	r1, [pc, #488]	; (8011000 <ProcessMacCommands+0x444>)
 8010e18:	585b      	ldr	r3, [r3, r1]
 8010e1a:	210f      	movs	r1, #15
 8010e1c:	400a      	ands	r2, r1
 8010e1e:	b2d1      	uxtb	r1, r2
 8010e20:	22c8      	movs	r2, #200	; 0xc8
 8010e22:	5499      	strb	r1, [r3, r2]
                MacCtx.NvmCtx->AggregatedDCycle = 1 << MacCtx.NvmCtx->MaxDCycle;
 8010e24:	4b74      	ldr	r3, [pc, #464]	; (8010ff8 <ProcessMacCommands+0x43c>)
 8010e26:	4a76      	ldr	r2, [pc, #472]	; (8011000 <ProcessMacCommands+0x444>)
 8010e28:	589b      	ldr	r3, [r3, r2]
 8010e2a:	22c8      	movs	r2, #200	; 0xc8
 8010e2c:	5c9b      	ldrb	r3, [r3, r2]
 8010e2e:	001a      	movs	r2, r3
 8010e30:	2301      	movs	r3, #1
 8010e32:	4093      	lsls	r3, r2
 8010e34:	0019      	movs	r1, r3
 8010e36:	4b70      	ldr	r3, [pc, #448]	; (8010ff8 <ProcessMacCommands+0x43c>)
 8010e38:	4a71      	ldr	r2, [pc, #452]	; (8011000 <ProcessMacCommands+0x444>)
 8010e3a:	589a      	ldr	r2, [r3, r2]
 8010e3c:	b289      	uxth	r1, r1
 8010e3e:	23a6      	movs	r3, #166	; 0xa6
 8010e40:	005b      	lsls	r3, r3, #1
 8010e42:	52d1      	strh	r1, [r2, r3]
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8010e44:	2368      	movs	r3, #104	; 0x68
 8010e46:	18fb      	adds	r3, r7, r3
 8010e48:	2200      	movs	r2, #0
 8010e4a:	0019      	movs	r1, r3
 8010e4c:	2004      	movs	r0, #4
 8010e4e:	f003 ff71 	bl	8014d34 <LoRaMacCommandsAddCmd>
                break;
 8010e52:	f000 fc29 	bl	80116a8 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 8010e56:	256b      	movs	r5, #107	; 0x6b
 8010e58:	197b      	adds	r3, r7, r5
 8010e5a:	2207      	movs	r2, #7
 8010e5c:	701a      	strb	r2, [r3, #0]

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8010e5e:	1cfb      	adds	r3, r7, #3
 8010e60:	781b      	ldrb	r3, [r3, #0]
 8010e62:	687a      	ldr	r2, [r7, #4]
 8010e64:	18d3      	adds	r3, r2, r3
 8010e66:	781b      	ldrb	r3, [r3, #0]
 8010e68:	091b      	lsrs	r3, r3, #4
 8010e6a:	b2db      	uxtb	r3, r3
 8010e6c:	b25b      	sxtb	r3, r3
 8010e6e:	2207      	movs	r2, #7
 8010e70:	4013      	ands	r3, r2
 8010e72:	b25a      	sxtb	r2, r3
 8010e74:	204c      	movs	r0, #76	; 0x4c
 8010e76:	183b      	adds	r3, r7, r0
 8010e78:	705a      	strb	r2, [r3, #1]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8010e7a:	1cfb      	adds	r3, r7, #3
 8010e7c:	781b      	ldrb	r3, [r3, #0]
 8010e7e:	687a      	ldr	r2, [r7, #4]
 8010e80:	18d3      	adds	r3, r2, r3
 8010e82:	781b      	ldrb	r3, [r3, #0]
 8010e84:	b25b      	sxtb	r3, r3
 8010e86:	220f      	movs	r2, #15
 8010e88:	4013      	ands	r3, r2
 8010e8a:	b25a      	sxtb	r2, r3
 8010e8c:	183b      	adds	r3, r7, r0
 8010e8e:	701a      	strb	r2, [r3, #0]
                macIndex++;
 8010e90:	1cfb      	adds	r3, r7, #3
 8010e92:	781a      	ldrb	r2, [r3, #0]
 8010e94:	1cfb      	adds	r3, r7, #3
 8010e96:	3201      	adds	r2, #1
 8010e98:	701a      	strb	r2, [r3, #0]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8010e9a:	1cfb      	adds	r3, r7, #3
 8010e9c:	781b      	ldrb	r3, [r3, #0]
 8010e9e:	1cfa      	adds	r2, r7, #3
 8010ea0:	1c59      	adds	r1, r3, #1
 8010ea2:	7011      	strb	r1, [r2, #0]
 8010ea4:	001a      	movs	r2, r3
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	189b      	adds	r3, r3, r2
 8010eaa:	781b      	ldrb	r3, [r3, #0]
 8010eac:	001a      	movs	r2, r3
 8010eae:	183b      	adds	r3, r7, r0
 8010eb0:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8010eb2:	1cfb      	adds	r3, r7, #3
 8010eb4:	781b      	ldrb	r3, [r3, #0]
 8010eb6:	1cfa      	adds	r2, r7, #3
 8010eb8:	1c59      	adds	r1, r3, #1
 8010eba:	7011      	strb	r1, [r2, #0]
 8010ebc:	001a      	movs	r2, r3
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	189b      	adds	r3, r3, r2
 8010ec2:	781b      	ldrb	r3, [r3, #0]
 8010ec4:	021a      	lsls	r2, r3, #8
 8010ec6:	183b      	adds	r3, r7, r0
 8010ec8:	685b      	ldr	r3, [r3, #4]
 8010eca:	431a      	orrs	r2, r3
 8010ecc:	183b      	adds	r3, r7, r0
 8010ece:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8010ed0:	1cfb      	adds	r3, r7, #3
 8010ed2:	781b      	ldrb	r3, [r3, #0]
 8010ed4:	1cfa      	adds	r2, r7, #3
 8010ed6:	1c59      	adds	r1, r3, #1
 8010ed8:	7011      	strb	r1, [r2, #0]
 8010eda:	001a      	movs	r2, r3
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	189b      	adds	r3, r3, r2
 8010ee0:	781b      	ldrb	r3, [r3, #0]
 8010ee2:	041a      	lsls	r2, r3, #16
 8010ee4:	183b      	adds	r3, r7, r0
 8010ee6:	685b      	ldr	r3, [r3, #4]
 8010ee8:	431a      	orrs	r2, r3
 8010eea:	0004      	movs	r4, r0
 8010eec:	193b      	adds	r3, r7, r4
 8010eee:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency *= 100;
 8010ef0:	193b      	adds	r3, r7, r4
 8010ef2:	685b      	ldr	r3, [r3, #4]
 8010ef4:	2264      	movs	r2, #100	; 0x64
 8010ef6:	435a      	muls	r2, r3
 8010ef8:	193b      	adds	r3, r7, r4
 8010efa:	605a      	str	r2, [r3, #4]

                // Perform request on region
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 8010efc:	4b3e      	ldr	r3, [pc, #248]	; (8010ff8 <ProcessMacCommands+0x43c>)
 8010efe:	4a40      	ldr	r2, [pc, #256]	; (8011000 <ProcessMacCommands+0x444>)
 8010f00:	589b      	ldr	r3, [r3, r2]
 8010f02:	781b      	ldrb	r3, [r3, #0]
 8010f04:	193a      	adds	r2, r7, r4
 8010f06:	0011      	movs	r1, r2
 8010f08:	0018      	movs	r0, r3
 8010f0a:	f005 ffe8 	bl	8016ede <RegionRxParamSetupReq>
 8010f0e:	0003      	movs	r3, r0
 8010f10:	001a      	movs	r2, r3
 8010f12:	197b      	adds	r3, r7, r5
 8010f14:	701a      	strb	r2, [r3, #0]

                if( ( status & 0x07 ) == 0x07 )
 8010f16:	197b      	adds	r3, r7, r5
 8010f18:	781b      	ldrb	r3, [r3, #0]
 8010f1a:	001a      	movs	r2, r3
 8010f1c:	2307      	movs	r3, #7
 8010f1e:	4013      	ands	r3, r2
 8010f20:	2b07      	cmp	r3, #7
 8010f22:	d128      	bne.n	8010f76 <ProcessMacCommands+0x3ba>
                {
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8010f24:	193b      	adds	r3, r7, r4
 8010f26:	2100      	movs	r1, #0
 8010f28:	5659      	ldrsb	r1, [r3, r1]
 8010f2a:	4b33      	ldr	r3, [pc, #204]	; (8010ff8 <ProcessMacCommands+0x43c>)
 8010f2c:	4a34      	ldr	r2, [pc, #208]	; (8011000 <ProcessMacCommands+0x444>)
 8010f2e:	589b      	ldr	r3, [r3, r2]
 8010f30:	b2c9      	uxtb	r1, r1
 8010f32:	22ac      	movs	r2, #172	; 0xac
 8010f34:	5499      	strb	r1, [r3, r2]
                    MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8010f36:	193b      	adds	r3, r7, r4
 8010f38:	2100      	movs	r1, #0
 8010f3a:	5659      	ldrsb	r1, [r3, r1]
 8010f3c:	4b2e      	ldr	r3, [pc, #184]	; (8010ff8 <ProcessMacCommands+0x43c>)
 8010f3e:	4a30      	ldr	r2, [pc, #192]	; (8011000 <ProcessMacCommands+0x444>)
 8010f40:	589b      	ldr	r3, [r3, r2]
 8010f42:	b2c9      	uxtb	r1, r1
 8010f44:	22b4      	movs	r2, #180	; 0xb4
 8010f46:	5499      	strb	r1, [r3, r2]
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8010f48:	4b2b      	ldr	r3, [pc, #172]	; (8010ff8 <ProcessMacCommands+0x43c>)
 8010f4a:	4a2d      	ldr	r2, [pc, #180]	; (8011000 <ProcessMacCommands+0x444>)
 8010f4c:	589a      	ldr	r2, [r3, r2]
 8010f4e:	193b      	adds	r3, r7, r4
 8010f50:	685b      	ldr	r3, [r3, #4]
 8010f52:	21a8      	movs	r1, #168	; 0xa8
 8010f54:	5053      	str	r3, [r2, r1]
                    MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8010f56:	4b28      	ldr	r3, [pc, #160]	; (8010ff8 <ProcessMacCommands+0x43c>)
 8010f58:	4a29      	ldr	r2, [pc, #164]	; (8011000 <ProcessMacCommands+0x444>)
 8010f5a:	589a      	ldr	r2, [r3, r2]
 8010f5c:	193b      	adds	r3, r7, r4
 8010f5e:	685b      	ldr	r3, [r3, #4]
 8010f60:	21b0      	movs	r1, #176	; 0xb0
 8010f62:	5053      	str	r3, [r2, r1]
                    MacCtx.NvmCtx->MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8010f64:	193b      	adds	r3, r7, r4
 8010f66:	2101      	movs	r1, #1
 8010f68:	5659      	ldrsb	r1, [r3, r1]
 8010f6a:	4b23      	ldr	r3, [pc, #140]	; (8010ff8 <ProcessMacCommands+0x43c>)
 8010f6c:	4a24      	ldr	r2, [pc, #144]	; (8011000 <ProcessMacCommands+0x444>)
 8010f6e:	589b      	ldr	r3, [r3, r2]
 8010f70:	b2c9      	uxtb	r1, r1
 8010f72:	22a5      	movs	r2, #165	; 0xa5
 8010f74:	5499      	strb	r1, [r3, r2]
                }
                macCmdPayload[0] = status;
 8010f76:	236b      	movs	r3, #107	; 0x6b
 8010f78:	18fb      	adds	r3, r7, r3
 8010f7a:	781a      	ldrb	r2, [r3, #0]
 8010f7c:	2168      	movs	r1, #104	; 0x68
 8010f7e:	187b      	adds	r3, r7, r1
 8010f80:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8010f82:	187b      	adds	r3, r7, r1
 8010f84:	2201      	movs	r2, #1
 8010f86:	0019      	movs	r1, r3
 8010f88:	2005      	movs	r0, #5
 8010f8a:	f003 fed3 	bl	8014d34 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 8010f8e:	f7ff fe05 	bl	8010b9c <SetMlmeScheduleUplinkIndication>
                break;
 8010f92:	46c0      	nop			; (mov r8, r8)
 8010f94:	e388      	b.n	80116a8 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8010f96:	2185      	movs	r1, #133	; 0x85
 8010f98:	187b      	adds	r3, r7, r1
 8010f9a:	22ff      	movs	r2, #255	; 0xff
 8010f9c:	701a      	strb	r2, [r3, #0]
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8010f9e:	4a16      	ldr	r2, [pc, #88]	; (8010ff8 <ProcessMacCommands+0x43c>)
 8010fa0:	23d2      	movs	r3, #210	; 0xd2
 8010fa2:	009b      	lsls	r3, r3, #2
 8010fa4:	58d3      	ldr	r3, [r2, r3]
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d00f      	beq.n	8010fca <ProcessMacCommands+0x40e>
 8010faa:	4a13      	ldr	r2, [pc, #76]	; (8010ff8 <ProcessMacCommands+0x43c>)
 8010fac:	23d2      	movs	r3, #210	; 0xd2
 8010fae:	009b      	lsls	r3, r3, #2
 8010fb0:	58d3      	ldr	r3, [r2, r3]
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d008      	beq.n	8010fca <ProcessMacCommands+0x40e>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8010fb8:	4a0f      	ldr	r2, [pc, #60]	; (8010ff8 <ProcessMacCommands+0x43c>)
 8010fba:	23d2      	movs	r3, #210	; 0xd2
 8010fbc:	009b      	lsls	r3, r3, #2
 8010fbe:	58d3      	ldr	r3, [r2, r3]
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	187c      	adds	r4, r7, r1
 8010fc4:	4798      	blx	r3
 8010fc6:	0003      	movs	r3, r0
 8010fc8:	7023      	strb	r3, [r4, #0]
                }
                macCmdPayload[0] = batteryLevel;
 8010fca:	2168      	movs	r1, #104	; 0x68
 8010fcc:	187b      	adds	r3, r7, r1
 8010fce:	2285      	movs	r2, #133	; 0x85
 8010fd0:	18ba      	adds	r2, r7, r2
 8010fd2:	7812      	ldrb	r2, [r2, #0]
 8010fd4:	701a      	strb	r2, [r3, #0]
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8010fd6:	1c7b      	adds	r3, r7, #1
 8010fd8:	781b      	ldrb	r3, [r3, #0]
 8010fda:	223f      	movs	r2, #63	; 0x3f
 8010fdc:	4013      	ands	r3, r2
 8010fde:	b2da      	uxtb	r2, r3
 8010fe0:	187b      	adds	r3, r7, r1
 8010fe2:	705a      	strb	r2, [r3, #1]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8010fe4:	187b      	adds	r3, r7, r1
 8010fe6:	2202      	movs	r2, #2
 8010fe8:	0019      	movs	r1, r3
 8010fea:	2006      	movs	r0, #6
 8010fec:	f003 fea2 	bl	8014d34 <LoRaMacCommandsAddCmd>
                break;
 8010ff0:	e35a      	b.n	80116a8 <ProcessMacCommands+0xaec>
 8010ff2:	46c0      	nop			; (mov r8, r8)
 8010ff4:	0801f98c 	.word	0x0801f98c
 8010ff8:	200005b8 	.word	0x200005b8
 8010ffc:	00000459 	.word	0x00000459
 8011000:	00000484 	.word	0x00000484
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 8011004:	246b      	movs	r4, #107	; 0x6b
 8011006:	193b      	adds	r3, r7, r4
 8011008:	2203      	movs	r2, #3
 801100a:	701a      	strb	r2, [r3, #0]

                newChannelReq.ChannelId = payload[macIndex++];
 801100c:	1cfb      	adds	r3, r7, #3
 801100e:	781b      	ldrb	r3, [r3, #0]
 8011010:	1cfa      	adds	r2, r7, #3
 8011012:	1c59      	adds	r1, r3, #1
 8011014:	7011      	strb	r1, [r2, #0]
 8011016:	001a      	movs	r2, r3
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	189b      	adds	r3, r3, r2
 801101c:	781b      	ldrb	r3, [r3, #0]
 801101e:	b25a      	sxtb	r2, r3
 8011020:	2544      	movs	r5, #68	; 0x44
 8011022:	197b      	adds	r3, r7, r5
 8011024:	711a      	strb	r2, [r3, #4]
                newChannelReq.NewChannel = &chParam;
 8011026:	197b      	adds	r3, r7, r5
 8011028:	2038      	movs	r0, #56	; 0x38
 801102a:	183a      	adds	r2, r7, r0
 801102c:	601a      	str	r2, [r3, #0]

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 801102e:	1cfb      	adds	r3, r7, #3
 8011030:	781b      	ldrb	r3, [r3, #0]
 8011032:	1cfa      	adds	r2, r7, #3
 8011034:	1c59      	adds	r1, r3, #1
 8011036:	7011      	strb	r1, [r2, #0]
 8011038:	001a      	movs	r2, r3
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	189b      	adds	r3, r3, r2
 801103e:	781b      	ldrb	r3, [r3, #0]
 8011040:	001a      	movs	r2, r3
 8011042:	183b      	adds	r3, r7, r0
 8011044:	601a      	str	r2, [r3, #0]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8011046:	1cfb      	adds	r3, r7, #3
 8011048:	781b      	ldrb	r3, [r3, #0]
 801104a:	1cfa      	adds	r2, r7, #3
 801104c:	1c59      	adds	r1, r3, #1
 801104e:	7011      	strb	r1, [r2, #0]
 8011050:	001a      	movs	r2, r3
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	189b      	adds	r3, r3, r2
 8011056:	781b      	ldrb	r3, [r3, #0]
 8011058:	021a      	lsls	r2, r3, #8
 801105a:	183b      	adds	r3, r7, r0
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	431a      	orrs	r2, r3
 8011060:	183b      	adds	r3, r7, r0
 8011062:	601a      	str	r2, [r3, #0]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8011064:	1cfb      	adds	r3, r7, #3
 8011066:	781b      	ldrb	r3, [r3, #0]
 8011068:	1cfa      	adds	r2, r7, #3
 801106a:	1c59      	adds	r1, r3, #1
 801106c:	7011      	strb	r1, [r2, #0]
 801106e:	001a      	movs	r2, r3
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	189b      	adds	r3, r3, r2
 8011074:	781b      	ldrb	r3, [r3, #0]
 8011076:	041a      	lsls	r2, r3, #16
 8011078:	183b      	adds	r3, r7, r0
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	431a      	orrs	r2, r3
 801107e:	183b      	adds	r3, r7, r0
 8011080:	601a      	str	r2, [r3, #0]
                chParam.Frequency *= 100;
 8011082:	183b      	adds	r3, r7, r0
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	2264      	movs	r2, #100	; 0x64
 8011088:	435a      	muls	r2, r3
 801108a:	183b      	adds	r3, r7, r0
 801108c:	601a      	str	r2, [r3, #0]
                chParam.Rx1Frequency = 0;
 801108e:	183b      	adds	r3, r7, r0
 8011090:	2200      	movs	r2, #0
 8011092:	605a      	str	r2, [r3, #4]
                chParam.DrRange.Value = payload[macIndex++];
 8011094:	1cfb      	adds	r3, r7, #3
 8011096:	781b      	ldrb	r3, [r3, #0]
 8011098:	1cfa      	adds	r2, r7, #3
 801109a:	1c59      	adds	r1, r3, #1
 801109c:	7011      	strb	r1, [r2, #0]
 801109e:	001a      	movs	r2, r3
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	189b      	adds	r3, r3, r2
 80110a4:	781b      	ldrb	r3, [r3, #0]
 80110a6:	b25a      	sxtb	r2, r3
 80110a8:	183b      	adds	r3, r7, r0
 80110aa:	721a      	strb	r2, [r3, #8]

                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 80110ac:	4ba0      	ldr	r3, [pc, #640]	; (8011330 <ProcessMacCommands+0x774>)
 80110ae:	4aa1      	ldr	r2, [pc, #644]	; (8011334 <ProcessMacCommands+0x778>)
 80110b0:	589b      	ldr	r3, [r3, r2]
 80110b2:	781b      	ldrb	r3, [r3, #0]
 80110b4:	197a      	adds	r2, r7, r5
 80110b6:	0011      	movs	r1, r2
 80110b8:	0018      	movs	r0, r3
 80110ba:	f005 ff26 	bl	8016f0a <RegionNewChannelReq>
 80110be:	0003      	movs	r3, r0
 80110c0:	001a      	movs	r2, r3
 80110c2:	193b      	adds	r3, r7, r4
 80110c4:	701a      	strb	r2, [r3, #0]

                macCmdPayload[0] = status;
 80110c6:	193b      	adds	r3, r7, r4
 80110c8:	781a      	ldrb	r2, [r3, #0]
 80110ca:	2168      	movs	r1, #104	; 0x68
 80110cc:	187b      	adds	r3, r7, r1
 80110ce:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 80110d0:	187b      	adds	r3, r7, r1
 80110d2:	2201      	movs	r2, #1
 80110d4:	0019      	movs	r1, r3
 80110d6:	2007      	movs	r0, #7
 80110d8:	f003 fe2c 	bl	8014d34 <LoRaMacCommandsAddCmd>
                break;
 80110dc:	46c0      	nop			; (mov r8, r8)
 80110de:	e2e3      	b.n	80116a8 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 80110e0:	1cfb      	adds	r3, r7, #3
 80110e2:	781b      	ldrb	r3, [r3, #0]
 80110e4:	1cfa      	adds	r2, r7, #3
 80110e6:	1c59      	adds	r1, r3, #1
 80110e8:	7011      	strb	r1, [r2, #0]
 80110ea:	001a      	movs	r2, r3
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	189b      	adds	r3, r3, r2
 80110f0:	781a      	ldrb	r2, [r3, #0]
 80110f2:	2084      	movs	r0, #132	; 0x84
 80110f4:	183b      	adds	r3, r7, r0
 80110f6:	210f      	movs	r1, #15
 80110f8:	400a      	ands	r2, r1
 80110fa:	701a      	strb	r2, [r3, #0]

                if( delay == 0 )
 80110fc:	183b      	adds	r3, r7, r0
 80110fe:	781b      	ldrb	r3, [r3, #0]
 8011100:	2b00      	cmp	r3, #0
 8011102:	d104      	bne.n	801110e <ProcessMacCommands+0x552>
                {
                    delay++;
 8011104:	183b      	adds	r3, r7, r0
 8011106:	781a      	ldrb	r2, [r3, #0]
 8011108:	183b      	adds	r3, r7, r0
 801110a:	3201      	adds	r2, #1
 801110c:	701a      	strb	r2, [r3, #0]
                }
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 801110e:	2384      	movs	r3, #132	; 0x84
 8011110:	18fb      	adds	r3, r7, r3
 8011112:	781a      	ldrb	r2, [r3, #0]
 8011114:	0013      	movs	r3, r2
 8011116:	015b      	lsls	r3, r3, #5
 8011118:	1a9b      	subs	r3, r3, r2
 801111a:	009b      	lsls	r3, r3, #2
 801111c:	189b      	adds	r3, r3, r2
 801111e:	00db      	lsls	r3, r3, #3
 8011120:	0019      	movs	r1, r3
 8011122:	4b83      	ldr	r3, [pc, #524]	; (8011330 <ProcessMacCommands+0x774>)
 8011124:	4a83      	ldr	r2, [pc, #524]	; (8011334 <ProcessMacCommands+0x778>)
 8011126:	589b      	ldr	r3, [r3, r2]
 8011128:	2294      	movs	r2, #148	; 0x94
 801112a:	5099      	str	r1, [r3, r2]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 801112c:	4b80      	ldr	r3, [pc, #512]	; (8011330 <ProcessMacCommands+0x774>)
 801112e:	4a81      	ldr	r2, [pc, #516]	; (8011334 <ProcessMacCommands+0x778>)
 8011130:	589b      	ldr	r3, [r3, r2]
 8011132:	2294      	movs	r2, #148	; 0x94
 8011134:	589b      	ldr	r3, [r3, r2]
 8011136:	4a7e      	ldr	r2, [pc, #504]	; (8011330 <ProcessMacCommands+0x774>)
 8011138:	497e      	ldr	r1, [pc, #504]	; (8011334 <ProcessMacCommands+0x778>)
 801113a:	5852      	ldr	r2, [r2, r1]
 801113c:	21fa      	movs	r1, #250	; 0xfa
 801113e:	0089      	lsls	r1, r1, #2
 8011140:	468c      	mov	ip, r1
 8011142:	4463      	add	r3, ip
 8011144:	2198      	movs	r1, #152	; 0x98
 8011146:	5053      	str	r3, [r2, r1]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8011148:	2368      	movs	r3, #104	; 0x68
 801114a:	18fb      	adds	r3, r7, r3
 801114c:	2200      	movs	r2, #0
 801114e:	0019      	movs	r1, r3
 8011150:	2008      	movs	r0, #8
 8011152:	f003 fdef 	bl	8014d34 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 8011156:	f7ff fd21 	bl	8010b9c <SetMlmeScheduleUplinkIndication>
                break;
 801115a:	e2a5      	b.n	80116a8 <ProcessMacCommands+0xaec>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 801115c:	1cfb      	adds	r3, r7, #3
 801115e:	781b      	ldrb	r3, [r3, #0]
 8011160:	1cfa      	adds	r2, r7, #3
 8011162:	1c59      	adds	r1, r3, #1
 8011164:	7011      	strb	r1, [r2, #0]
 8011166:	001a      	movs	r2, r3
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	189a      	adds	r2, r3, r2
 801116c:	2076      	movs	r0, #118	; 0x76
 801116e:	183b      	adds	r3, r7, r0
 8011170:	7812      	ldrb	r2, [r2, #0]
 8011172:	701a      	strb	r2, [r3, #0]

                txParamSetupReq.UplinkDwellTime = 0;
 8011174:	2134      	movs	r1, #52	; 0x34
 8011176:	187b      	adds	r3, r7, r1
 8011178:	2200      	movs	r2, #0
 801117a:	701a      	strb	r2, [r3, #0]
                txParamSetupReq.DownlinkDwellTime = 0;
 801117c:	187b      	adds	r3, r7, r1
 801117e:	2200      	movs	r2, #0
 8011180:	705a      	strb	r2, [r3, #1]

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8011182:	183b      	adds	r3, r7, r0
 8011184:	781b      	ldrb	r3, [r3, #0]
 8011186:	2220      	movs	r2, #32
 8011188:	4013      	ands	r3, r2
 801118a:	d002      	beq.n	8011192 <ProcessMacCommands+0x5d6>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 801118c:	187b      	adds	r3, r7, r1
 801118e:	2201      	movs	r2, #1
 8011190:	705a      	strb	r2, [r3, #1]
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8011192:	2376      	movs	r3, #118	; 0x76
 8011194:	18fb      	adds	r3, r7, r3
 8011196:	781b      	ldrb	r3, [r3, #0]
 8011198:	2210      	movs	r2, #16
 801119a:	4013      	ands	r3, r2
 801119c:	d003      	beq.n	80111a6 <ProcessMacCommands+0x5ea>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 801119e:	2334      	movs	r3, #52	; 0x34
 80111a0:	18fb      	adds	r3, r7, r3
 80111a2:	2201      	movs	r2, #1
 80111a4:	701a      	strb	r2, [r3, #0]
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 80111a6:	2376      	movs	r3, #118	; 0x76
 80111a8:	18fb      	adds	r3, r7, r3
 80111aa:	781b      	ldrb	r3, [r3, #0]
 80111ac:	220f      	movs	r2, #15
 80111ae:	4013      	ands	r3, r2
 80111b0:	b2da      	uxtb	r2, r3
 80111b2:	2434      	movs	r4, #52	; 0x34
 80111b4:	193b      	adds	r3, r7, r4
 80111b6:	709a      	strb	r2, [r3, #2]

                // Check the status for correctness
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 80111b8:	4b5d      	ldr	r3, [pc, #372]	; (8011330 <ProcessMacCommands+0x774>)
 80111ba:	4a5e      	ldr	r2, [pc, #376]	; (8011334 <ProcessMacCommands+0x778>)
 80111bc:	589b      	ldr	r3, [r3, r2]
 80111be:	781b      	ldrb	r3, [r3, #0]
 80111c0:	193a      	adds	r2, r7, r4
 80111c2:	0011      	movs	r1, r2
 80111c4:	0018      	movs	r0, r3
 80111c6:	f005 feb6 	bl	8016f36 <RegionTxParamSetupReq>
 80111ca:	0003      	movs	r3, r0
 80111cc:	3301      	adds	r3, #1
 80111ce:	d050      	beq.n	8011272 <ProcessMacCommands+0x6b6>
                {
                    // Accept command
                    MacCtx.NvmCtx->MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 80111d0:	4b57      	ldr	r3, [pc, #348]	; (8011330 <ProcessMacCommands+0x774>)
 80111d2:	4a58      	ldr	r2, [pc, #352]	; (8011334 <ProcessMacCommands+0x778>)
 80111d4:	589b      	ldr	r3, [r3, r2]
 80111d6:	193a      	adds	r2, r7, r4
 80111d8:	7811      	ldrb	r1, [r2, #0]
 80111da:	22b8      	movs	r2, #184	; 0xb8
 80111dc:	5499      	strb	r1, [r3, r2]
                    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 80111de:	4b54      	ldr	r3, [pc, #336]	; (8011330 <ProcessMacCommands+0x774>)
 80111e0:	4a54      	ldr	r2, [pc, #336]	; (8011334 <ProcessMacCommands+0x778>)
 80111e2:	589b      	ldr	r3, [r3, r2]
 80111e4:	193a      	adds	r2, r7, r4
 80111e6:	7851      	ldrb	r1, [r2, #1]
 80111e8:	22b9      	movs	r2, #185	; 0xb9
 80111ea:	5499      	strb	r1, [r3, r2]
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 80111ec:	193b      	adds	r3, r7, r4
 80111ee:	789b      	ldrb	r3, [r3, #2]
 80111f0:	001a      	movs	r2, r3
 80111f2:	4b51      	ldr	r3, [pc, #324]	; (8011338 <ProcessMacCommands+0x77c>)
 80111f4:	5c9a      	ldrb	r2, [r3, r2]
 80111f6:	4b4e      	ldr	r3, [pc, #312]	; (8011330 <ProcessMacCommands+0x774>)
 80111f8:	494e      	ldr	r1, [pc, #312]	; (8011334 <ProcessMacCommands+0x778>)
 80111fa:	585c      	ldr	r4, [r3, r1]
 80111fc:	0010      	movs	r0, r2
 80111fe:	f7ef fc7b 	bl	8000af8 <__aeabi_ui2f>
 8011202:	1c03      	adds	r3, r0, #0
 8011204:	22bc      	movs	r2, #188	; 0xbc
 8011206:	50a3      	str	r3, [r4, r2]
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8011208:	212c      	movs	r1, #44	; 0x2c
 801120a:	187b      	adds	r3, r7, r1
 801120c:	2202      	movs	r2, #2
 801120e:	701a      	strb	r2, [r3, #0]
                    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8011210:	4b47      	ldr	r3, [pc, #284]	; (8011330 <ProcessMacCommands+0x774>)
 8011212:	4a48      	ldr	r2, [pc, #288]	; (8011334 <ProcessMacCommands+0x778>)
 8011214:	589b      	ldr	r3, [r3, r2]
 8011216:	22b8      	movs	r2, #184	; 0xb8
 8011218:	5c9a      	ldrb	r2, [r3, r2]
 801121a:	187b      	adds	r3, r7, r1
 801121c:	709a      	strb	r2, [r3, #2]
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 801121e:	4b44      	ldr	r3, [pc, #272]	; (8011330 <ProcessMacCommands+0x774>)
 8011220:	4a44      	ldr	r2, [pc, #272]	; (8011334 <ProcessMacCommands+0x778>)
 8011222:	589b      	ldr	r3, [r3, r2]
 8011224:	781b      	ldrb	r3, [r3, #0]
 8011226:	187a      	adds	r2, r7, r1
 8011228:	0011      	movs	r1, r2
 801122a:	0018      	movs	r0, r3
 801122c:	f005 fd31 	bl	8016c92 <RegionGetPhyParam>
 8011230:	0003      	movs	r3, r0
 8011232:	001a      	movs	r2, r3
 8011234:	2128      	movs	r1, #40	; 0x28
 8011236:	187b      	adds	r3, r7, r1
 8011238:	601a      	str	r2, [r3, #0]
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 801123a:	187b      	adds	r3, r7, r1
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	b259      	sxtb	r1, r3
 8011240:	4b3b      	ldr	r3, [pc, #236]	; (8011330 <ProcessMacCommands+0x774>)
 8011242:	4a3c      	ldr	r2, [pc, #240]	; (8011334 <ProcessMacCommands+0x778>)
 8011244:	589b      	ldr	r3, [r3, r2]
 8011246:	2285      	movs	r2, #133	; 0x85
 8011248:	5698      	ldrsb	r0, [r3, r2]
 801124a:	4b39      	ldr	r3, [pc, #228]	; (8011330 <ProcessMacCommands+0x774>)
 801124c:	4a39      	ldr	r2, [pc, #228]	; (8011334 <ProcessMacCommands+0x778>)
 801124e:	589b      	ldr	r3, [r3, r2]
 8011250:	1c04      	adds	r4, r0, #0
 8011252:	1c08      	adds	r0, r1, #0
 8011254:	b241      	sxtb	r1, r0
 8011256:	b262      	sxtb	r2, r4
 8011258:	4291      	cmp	r1, r2
 801125a:	da00      	bge.n	801125e <ProcessMacCommands+0x6a2>
 801125c:	1c20      	adds	r0, r4, #0
 801125e:	b241      	sxtb	r1, r0
 8011260:	2285      	movs	r2, #133	; 0x85
 8011262:	5499      	strb	r1, [r3, r2]

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8011264:	2368      	movs	r3, #104	; 0x68
 8011266:	18fb      	adds	r3, r7, r3
 8011268:	2200      	movs	r2, #0
 801126a:	0019      	movs	r1, r3
 801126c:	2009      	movs	r0, #9
 801126e:	f003 fd61 	bl	8014d34 <LoRaMacCommandsAddCmd>
                }
                break;
 8011272:	46c0      	nop			; (mov r8, r8)
 8011274:	e218      	b.n	80116a8 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 8011276:	246b      	movs	r4, #107	; 0x6b
 8011278:	193b      	adds	r3, r7, r4
 801127a:	2203      	movs	r2, #3
 801127c:	701a      	strb	r2, [r3, #0]

                dlChannelReq.ChannelId = payload[macIndex++];
 801127e:	1cfb      	adds	r3, r7, #3
 8011280:	781b      	ldrb	r3, [r3, #0]
 8011282:	1cfa      	adds	r2, r7, #3
 8011284:	1c59      	adds	r1, r3, #1
 8011286:	7011      	strb	r1, [r2, #0]
 8011288:	001a      	movs	r2, r3
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	189b      	adds	r3, r3, r2
 801128e:	781a      	ldrb	r2, [r3, #0]
 8011290:	2020      	movs	r0, #32
 8011292:	183b      	adds	r3, r7, r0
 8011294:	701a      	strb	r2, [r3, #0]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8011296:	1cfb      	adds	r3, r7, #3
 8011298:	781b      	ldrb	r3, [r3, #0]
 801129a:	1cfa      	adds	r2, r7, #3
 801129c:	1c59      	adds	r1, r3, #1
 801129e:	7011      	strb	r1, [r2, #0]
 80112a0:	001a      	movs	r2, r3
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	189b      	adds	r3, r3, r2
 80112a6:	781b      	ldrb	r3, [r3, #0]
 80112a8:	001a      	movs	r2, r3
 80112aa:	183b      	adds	r3, r7, r0
 80112ac:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80112ae:	1cfb      	adds	r3, r7, #3
 80112b0:	781b      	ldrb	r3, [r3, #0]
 80112b2:	1cfa      	adds	r2, r7, #3
 80112b4:	1c59      	adds	r1, r3, #1
 80112b6:	7011      	strb	r1, [r2, #0]
 80112b8:	001a      	movs	r2, r3
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	189b      	adds	r3, r3, r2
 80112be:	781b      	ldrb	r3, [r3, #0]
 80112c0:	021a      	lsls	r2, r3, #8
 80112c2:	183b      	adds	r3, r7, r0
 80112c4:	685b      	ldr	r3, [r3, #4]
 80112c6:	431a      	orrs	r2, r3
 80112c8:	183b      	adds	r3, r7, r0
 80112ca:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80112cc:	1cfb      	adds	r3, r7, #3
 80112ce:	781b      	ldrb	r3, [r3, #0]
 80112d0:	1cfa      	adds	r2, r7, #3
 80112d2:	1c59      	adds	r1, r3, #1
 80112d4:	7011      	strb	r1, [r2, #0]
 80112d6:	001a      	movs	r2, r3
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	189b      	adds	r3, r3, r2
 80112dc:	781b      	ldrb	r3, [r3, #0]
 80112de:	041a      	lsls	r2, r3, #16
 80112e0:	183b      	adds	r3, r7, r0
 80112e2:	685b      	ldr	r3, [r3, #4]
 80112e4:	431a      	orrs	r2, r3
 80112e6:	0001      	movs	r1, r0
 80112e8:	187b      	adds	r3, r7, r1
 80112ea:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency *= 100;
 80112ec:	187b      	adds	r3, r7, r1
 80112ee:	685b      	ldr	r3, [r3, #4]
 80112f0:	2264      	movs	r2, #100	; 0x64
 80112f2:	435a      	muls	r2, r3
 80112f4:	187b      	adds	r3, r7, r1
 80112f6:	605a      	str	r2, [r3, #4]

                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 80112f8:	4b0d      	ldr	r3, [pc, #52]	; (8011330 <ProcessMacCommands+0x774>)
 80112fa:	4a0e      	ldr	r2, [pc, #56]	; (8011334 <ProcessMacCommands+0x778>)
 80112fc:	589b      	ldr	r3, [r3, r2]
 80112fe:	781b      	ldrb	r3, [r3, #0]
 8011300:	187a      	adds	r2, r7, r1
 8011302:	0011      	movs	r1, r2
 8011304:	0018      	movs	r0, r3
 8011306:	f005 fe2c 	bl	8016f62 <RegionDlChannelReq>
 801130a:	0003      	movs	r3, r0
 801130c:	001a      	movs	r2, r3
 801130e:	193b      	adds	r3, r7, r4
 8011310:	701a      	strb	r2, [r3, #0]
                macCmdPayload[0] = status;
 8011312:	193b      	adds	r3, r7, r4
 8011314:	781a      	ldrb	r2, [r3, #0]
 8011316:	2168      	movs	r1, #104	; 0x68
 8011318:	187b      	adds	r3, r7, r1
 801131a:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 801131c:	187b      	adds	r3, r7, r1
 801131e:	2201      	movs	r2, #1
 8011320:	0019      	movs	r1, r3
 8011322:	200a      	movs	r0, #10
 8011324:	f003 fd06 	bl	8014d34 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 8011328:	f7ff fc38 	bl	8010b9c <SetMlmeScheduleUplinkIndication>
                break;
 801132c:	46c0      	nop			; (mov r8, r8)
 801132e:	e1bb      	b.n	80116a8 <ProcessMacCommands+0xaec>
 8011330:	200005b8 	.word	0x200005b8
 8011334:	00000484 	.word	0x00000484
 8011338:	0801f97c 	.word	0x0801f97c
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 801133c:	200a      	movs	r0, #10
 801133e:	f004 f88b 	bl	8015458 <LoRaMacConfirmQueueIsCmdActive>
 8011342:	1e03      	subs	r3, r0, #0
 8011344:	d100      	bne.n	8011348 <ProcessMacCommands+0x78c>
 8011346:	e1af      	b.n	80116a8 <ProcessMacCommands+0xaec>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8011348:	210a      	movs	r1, #10
 801134a:	2000      	movs	r0, #0
 801134c:	f003 ffe8 	bl	8015320 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 8011350:	2418      	movs	r4, #24
 8011352:	193b      	adds	r3, r7, r4
 8011354:	0018      	movs	r0, r3
 8011356:	2308      	movs	r3, #8
 8011358:	001a      	movs	r2, r3
 801135a:	2100      	movs	r1, #0
 801135c:	f00c fe29 	bl	801dfb2 <memset>
                    SysTime_t sysTime = { 0 };
 8011360:	2510      	movs	r5, #16
 8011362:	197b      	adds	r3, r7, r5
 8011364:	0018      	movs	r0, r3
 8011366:	2308      	movs	r3, #8
 8011368:	001a      	movs	r2, r3
 801136a:	2100      	movs	r1, #0
 801136c:	f00c fe21 	bl	801dfb2 <memset>
                    SysTime_t sysTimeCurrent = { 0 };
 8011370:	2608      	movs	r6, #8
 8011372:	19bb      	adds	r3, r7, r6
 8011374:	0018      	movs	r0, r3
 8011376:	2308      	movs	r3, #8
 8011378:	001a      	movs	r2, r3
 801137a:	2100      	movs	r1, #0
 801137c:	f00c fe19 	bl	801dfb2 <memset>

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8011380:	1cfb      	adds	r3, r7, #3
 8011382:	781b      	ldrb	r3, [r3, #0]
 8011384:	1cfa      	adds	r2, r7, #3
 8011386:	1c59      	adds	r1, r3, #1
 8011388:	7011      	strb	r1, [r2, #0]
 801138a:	001a      	movs	r2, r3
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	189b      	adds	r3, r3, r2
 8011390:	781b      	ldrb	r3, [r3, #0]
 8011392:	001a      	movs	r2, r3
 8011394:	193b      	adds	r3, r7, r4
 8011396:	601a      	str	r2, [r3, #0]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8011398:	1cfb      	adds	r3, r7, #3
 801139a:	781b      	ldrb	r3, [r3, #0]
 801139c:	1cfa      	adds	r2, r7, #3
 801139e:	1c59      	adds	r1, r3, #1
 80113a0:	7011      	strb	r1, [r2, #0]
 80113a2:	001a      	movs	r2, r3
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	189b      	adds	r3, r3, r2
 80113a8:	781b      	ldrb	r3, [r3, #0]
 80113aa:	021a      	lsls	r2, r3, #8
 80113ac:	193b      	adds	r3, r7, r4
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	431a      	orrs	r2, r3
 80113b2:	0020      	movs	r0, r4
 80113b4:	193b      	adds	r3, r7, r4
 80113b6:	601a      	str	r2, [r3, #0]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 80113b8:	1cfb      	adds	r3, r7, #3
 80113ba:	781b      	ldrb	r3, [r3, #0]
 80113bc:	1cfa      	adds	r2, r7, #3
 80113be:	1c59      	adds	r1, r3, #1
 80113c0:	7011      	strb	r1, [r2, #0]
 80113c2:	001a      	movs	r2, r3
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	189b      	adds	r3, r3, r2
 80113c8:	781b      	ldrb	r3, [r3, #0]
 80113ca:	041a      	lsls	r2, r3, #16
 80113cc:	183b      	adds	r3, r7, r0
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	431a      	orrs	r2, r3
 80113d2:	183b      	adds	r3, r7, r0
 80113d4:	601a      	str	r2, [r3, #0]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 80113d6:	1cfb      	adds	r3, r7, #3
 80113d8:	781b      	ldrb	r3, [r3, #0]
 80113da:	1cfa      	adds	r2, r7, #3
 80113dc:	1c59      	adds	r1, r3, #1
 80113de:	7011      	strb	r1, [r2, #0]
 80113e0:	001a      	movs	r2, r3
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	189b      	adds	r3, r3, r2
 80113e6:	781b      	ldrb	r3, [r3, #0]
 80113e8:	061a      	lsls	r2, r3, #24
 80113ea:	183b      	adds	r3, r7, r0
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	431a      	orrs	r2, r3
 80113f0:	183b      	adds	r3, r7, r0
 80113f2:	601a      	str	r2, [r3, #0]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 80113f4:	1cfb      	adds	r3, r7, #3
 80113f6:	781b      	ldrb	r3, [r3, #0]
 80113f8:	1cfa      	adds	r2, r7, #3
 80113fa:	1c59      	adds	r1, r3, #1
 80113fc:	7011      	strb	r1, [r2, #0]
 80113fe:	001a      	movs	r2, r3
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	189b      	adds	r3, r3, r2
 8011404:	781b      	ldrb	r3, [r3, #0]
 8011406:	b21a      	sxth	r2, r3
 8011408:	183b      	adds	r3, r7, r0
 801140a:	809a      	strh	r2, [r3, #4]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 801140c:	0001      	movs	r1, r0
 801140e:	183b      	adds	r3, r7, r0
 8011410:	2204      	movs	r2, #4
 8011412:	5e9b      	ldrsh	r3, [r3, r2]
 8011414:	001a      	movs	r2, r3
 8011416:	0013      	movs	r3, r2
 8011418:	015b      	lsls	r3, r3, #5
 801141a:	1a9b      	subs	r3, r3, r2
 801141c:	009b      	lsls	r3, r3, #2
 801141e:	189b      	adds	r3, r3, r2
 8011420:	00db      	lsls	r3, r3, #3
 8011422:	121b      	asrs	r3, r3, #8
 8011424:	b21a      	sxth	r2, r3
 8011426:	187b      	adds	r3, r7, r1
 8011428:	809a      	strh	r2, [r3, #4]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 801142a:	197a      	adds	r2, r7, r5
 801142c:	187b      	adds	r3, r7, r1
 801142e:	0010      	movs	r0, r2
 8011430:	0019      	movs	r1, r3
 8011432:	2308      	movs	r3, #8
 8011434:	001a      	movs	r2, r3
 8011436:	f00c fdb3 	bl	801dfa0 <memcpy>
                    // Add Unix to Gps epcoh offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 801143a:	197b      	adds	r3, r7, r5
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	4aa2      	ldr	r2, [pc, #648]	; (80116c8 <ProcessMacCommands+0xb0c>)
 8011440:	189a      	adds	r2, r3, r2
 8011442:	002c      	movs	r4, r5
 8011444:	197b      	adds	r3, r7, r5
 8011446:	601a      	str	r2, [r3, #0]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 8011448:	19bb      	adds	r3, r7, r6
 801144a:	0018      	movs	r0, r3
 801144c:	f00b fb36 	bl	801cabc <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8011450:	236c      	movs	r3, #108	; 0x6c
 8011452:	18fd      	adds	r5, r7, r3
 8011454:	489d      	ldr	r0, [pc, #628]	; (80116cc <ProcessMacCommands+0xb10>)
 8011456:	23ce      	movs	r3, #206	; 0xce
 8011458:	0099      	lsls	r1, r3, #2
 801145a:	0026      	movs	r6, r4
 801145c:	193a      	adds	r2, r7, r4
 801145e:	2404      	movs	r4, #4
 8011460:	1843      	adds	r3, r0, r1
 8011462:	191c      	adds	r4, r3, r4
 8011464:	466b      	mov	r3, sp
 8011466:	6824      	ldr	r4, [r4, #0]
 8011468:	601c      	str	r4, [r3, #0]
 801146a:	5843      	ldr	r3, [r0, r1]
 801146c:	6811      	ldr	r1, [r2, #0]
 801146e:	6852      	ldr	r2, [r2, #4]
 8011470:	0028      	movs	r0, r5
 8011472:	f00b fa97 	bl	801c9a4 <SysTimeSub>
 8011476:	0035      	movs	r5, r6
 8011478:	197c      	adds	r4, r7, r5
 801147a:	236c      	movs	r3, #108	; 0x6c
 801147c:	18fb      	adds	r3, r7, r3
 801147e:	2608      	movs	r6, #8
 8011480:	19ba      	adds	r2, r7, r6
 8011482:	4669      	mov	r1, sp
 8011484:	6858      	ldr	r0, [r3, #4]
 8011486:	6008      	str	r0, [r1, #0]
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	6811      	ldr	r1, [r2, #0]
 801148c:	6852      	ldr	r2, [r2, #4]
 801148e:	0020      	movs	r0, r4
 8011490:	f00b fa32 	bl	801c8f8 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 8011494:	197b      	adds	r3, r7, r5
 8011496:	6818      	ldr	r0, [r3, #0]
 8011498:	6859      	ldr	r1, [r3, #4]
 801149a:	f00b fad7 	bl	801ca4c <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 801149e:	f003 fac5 	bl	8014a2c <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 80114a2:	4a8a      	ldr	r2, [pc, #552]	; (80116cc <ProcessMacCommands+0xb10>)
 80114a4:	2387      	movs	r3, #135	; 0x87
 80114a6:	00db      	lsls	r3, r3, #3
 80114a8:	2101      	movs	r1, #1
 80114aa:	54d1      	strb	r1, [r2, r3]
                }
                break;
 80114ac:	e0fc      	b.n	80116a8 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 80114ae:	200d      	movs	r0, #13
 80114b0:	f003 ffd2 	bl	8015458 <LoRaMacConfirmQueueIsCmdActive>
 80114b4:	1e03      	subs	r3, r0, #0
 80114b6:	d100      	bne.n	80114ba <ProcessMacCommands+0x8fe>
 80114b8:	e0f6      	b.n	80116a8 <ProcessMacCommands+0xaec>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 80114ba:	210d      	movs	r1, #13
 80114bc:	2000      	movs	r0, #0
 80114be:	f003 ff2f 	bl	8015320 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 80114c2:	4a82      	ldr	r2, [pc, #520]	; (80116cc <ProcessMacCommands+0xb10>)
 80114c4:	2390      	movs	r3, #144	; 0x90
 80114c6:	00db      	lsls	r3, r3, #3
 80114c8:	5cd3      	ldrb	r3, [r2, r3]
 80114ca:	2b04      	cmp	r3, #4
 80114cc:	d100      	bne.n	80114d0 <ProcessMacCommands+0x914>
 80114ce:	e0eb      	b.n	80116a8 <ProcessMacCommands+0xaec>
 80114d0:	4a7e      	ldr	r2, [pc, #504]	; (80116cc <ProcessMacCommands+0xb10>)
 80114d2:	2390      	movs	r3, #144	; 0x90
 80114d4:	00db      	lsls	r3, r3, #3
 80114d6:	5cd3      	ldrb	r3, [r2, r3]
 80114d8:	2b05      	cmp	r3, #5
 80114da:	d100      	bne.n	80114de <ProcessMacCommands+0x922>
 80114dc:	e0e4      	b.n	80116a8 <ProcessMacCommands+0xaec>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 80114de:	f003 fa86 	bl	80149ee <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 80114e2:	e0e1      	b.n	80116a8 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 80114e4:	207c      	movs	r0, #124	; 0x7c
 80114e6:	183b      	adds	r3, r7, r0
 80114e8:	2203      	movs	r2, #3
 80114ea:	701a      	strb	r2, [r3, #0]
                uint32_t frequency = 0;
 80114ec:	2300      	movs	r3, #0
 80114ee:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 80114f0:	1cfb      	adds	r3, r7, #3
 80114f2:	781b      	ldrb	r3, [r3, #0]
 80114f4:	1cfa      	adds	r2, r7, #3
 80114f6:	1c59      	adds	r1, r3, #1
 80114f8:	7011      	strb	r1, [r2, #0]
 80114fa:	001a      	movs	r2, r3
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	189b      	adds	r3, r3, r2
 8011500:	781b      	ldrb	r3, [r3, #0]
 8011502:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8011504:	1cfb      	adds	r3, r7, #3
 8011506:	781b      	ldrb	r3, [r3, #0]
 8011508:	1cfa      	adds	r2, r7, #3
 801150a:	1c59      	adds	r1, r3, #1
 801150c:	7011      	strb	r1, [r2, #0]
 801150e:	001a      	movs	r2, r3
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	189b      	adds	r3, r3, r2
 8011514:	781b      	ldrb	r3, [r3, #0]
 8011516:	021b      	lsls	r3, r3, #8
 8011518:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801151a:	4313      	orrs	r3, r2
 801151c:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 801151e:	1cfb      	adds	r3, r7, #3
 8011520:	781b      	ldrb	r3, [r3, #0]
 8011522:	1cfa      	adds	r2, r7, #3
 8011524:	1c59      	adds	r1, r3, #1
 8011526:	7011      	strb	r1, [r2, #0]
 8011528:	001a      	movs	r2, r3
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	189b      	adds	r3, r3, r2
 801152e:	781b      	ldrb	r3, [r3, #0]
 8011530:	041b      	lsls	r3, r3, #16
 8011532:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011534:	4313      	orrs	r3, r2
 8011536:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 8011538:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801153a:	2264      	movs	r2, #100	; 0x64
 801153c:	4353      	muls	r3, r2
 801153e:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 8011540:	1cfb      	adds	r3, r7, #3
 8011542:	781b      	ldrb	r3, [r3, #0]
 8011544:	1cfa      	adds	r2, r7, #3
 8011546:	1c59      	adds	r1, r3, #1
 8011548:	7011      	strb	r1, [r2, #0]
 801154a:	001a      	movs	r2, r3
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	189b      	adds	r3, r3, r2
 8011550:	781a      	ldrb	r2, [r3, #0]
 8011552:	2677      	movs	r6, #119	; 0x77
 8011554:	19bb      	adds	r3, r7, r6
 8011556:	210f      	movs	r1, #15
 8011558:	400a      	ands	r2, r1
 801155a:	701a      	strb	r2, [r3, #0]

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 801155c:	0005      	movs	r5, r0
 801155e:	183c      	adds	r4, r7, r0
 8011560:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011562:	19bb      	adds	r3, r7, r6
 8011564:	781b      	ldrb	r3, [r3, #0]
 8011566:	0011      	movs	r1, r2
 8011568:	0018      	movs	r0, r3
 801156a:	f003 fa45 	bl	80149f8 <LoRaMacClassBPingSlotChannelReq>
 801156e:	0003      	movs	r3, r0
 8011570:	7023      	strb	r3, [r4, #0]
                macCmdPayload[0] = status;
 8011572:	2168      	movs	r1, #104	; 0x68
 8011574:	187b      	adds	r3, r7, r1
 8011576:	197a      	adds	r2, r7, r5
 8011578:	7812      	ldrb	r2, [r2, #0]
 801157a:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 801157c:	187b      	adds	r3, r7, r1
 801157e:	2201      	movs	r2, #1
 8011580:	0019      	movs	r1, r3
 8011582:	2011      	movs	r0, #17
 8011584:	f003 fbd6 	bl	8014d34 <LoRaMacCommandsAddCmd>
                break;
 8011588:	e08e      	b.n	80116a8 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 801158a:	200e      	movs	r0, #14
 801158c:	f003 ff64 	bl	8015458 <LoRaMacConfirmQueueIsCmdActive>
 8011590:	1e03      	subs	r3, r0, #0
 8011592:	d100      	bne.n	8011596 <ProcessMacCommands+0x9da>
 8011594:	e088      	b.n	80116a8 <ProcessMacCommands+0xaec>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8011596:	210e      	movs	r1, #14
 8011598:	2000      	movs	r0, #0
 801159a:	f003 fec1 	bl	8015320 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 801159e:	207e      	movs	r0, #126	; 0x7e
 80115a0:	183b      	adds	r3, r7, r0
 80115a2:	2200      	movs	r2, #0
 80115a4:	801a      	strh	r2, [r3, #0]
                    uint8_t beaconTimingChannel = 0;
 80115a6:	247d      	movs	r4, #125	; 0x7d
 80115a8:	193b      	adds	r3, r7, r4
 80115aa:	2200      	movs	r2, #0
 80115ac:	701a      	strb	r2, [r3, #0]

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 80115ae:	1cfb      	adds	r3, r7, #3
 80115b0:	781b      	ldrb	r3, [r3, #0]
 80115b2:	1cfa      	adds	r2, r7, #3
 80115b4:	1c59      	adds	r1, r3, #1
 80115b6:	7011      	strb	r1, [r2, #0]
 80115b8:	001a      	movs	r2, r3
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	189b      	adds	r3, r3, r2
 80115be:	781a      	ldrb	r2, [r3, #0]
 80115c0:	183b      	adds	r3, r7, r0
 80115c2:	801a      	strh	r2, [r3, #0]
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 80115c4:	1cfb      	adds	r3, r7, #3
 80115c6:	781b      	ldrb	r3, [r3, #0]
 80115c8:	1cfa      	adds	r2, r7, #3
 80115ca:	1c59      	adds	r1, r3, #1
 80115cc:	7011      	strb	r1, [r2, #0]
 80115ce:	001a      	movs	r2, r3
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	189b      	adds	r3, r3, r2
 80115d4:	781b      	ldrb	r3, [r3, #0]
 80115d6:	021b      	lsls	r3, r3, #8
 80115d8:	b21a      	sxth	r2, r3
 80115da:	183b      	adds	r3, r7, r0
 80115dc:	2100      	movs	r1, #0
 80115de:	5e5b      	ldrsh	r3, [r3, r1]
 80115e0:	4313      	orrs	r3, r2
 80115e2:	b21a      	sxth	r2, r3
 80115e4:	183b      	adds	r3, r7, r0
 80115e6:	801a      	strh	r2, [r3, #0]
                    beaconTimingChannel = payload[macIndex++];
 80115e8:	1cfb      	adds	r3, r7, #3
 80115ea:	781b      	ldrb	r3, [r3, #0]
 80115ec:	1cfa      	adds	r2, r7, #3
 80115ee:	1c59      	adds	r1, r3, #1
 80115f0:	7011      	strb	r1, [r2, #0]
 80115f2:	001a      	movs	r2, r3
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	189a      	adds	r2, r3, r2
 80115f8:	193b      	adds	r3, r7, r4
 80115fa:	7812      	ldrb	r2, [r2, #0]
 80115fc:	701a      	strb	r2, [r3, #0]

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 80115fe:	4b34      	ldr	r3, [pc, #208]	; (80116d0 <ProcessMacCommands+0xb14>)
 8011600:	681a      	ldr	r2, [r3, #0]
 8011602:	193b      	adds	r3, r7, r4
 8011604:	7819      	ldrb	r1, [r3, #0]
 8011606:	183b      	adds	r3, r7, r0
 8011608:	881b      	ldrh	r3, [r3, #0]
 801160a:	0018      	movs	r0, r3
 801160c:	f003 fa00 	bl	8014a10 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 8011610:	e04a      	b.n	80116a8 <ProcessMacCommands+0xaec>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 8011612:	2300      	movs	r3, #0
 8011614:	2080      	movs	r0, #128	; 0x80
 8011616:	183a      	adds	r2, r7, r0
 8011618:	6013      	str	r3, [r2, #0]

                    frequency = ( uint32_t )payload[macIndex++];
 801161a:	1cfb      	adds	r3, r7, #3
 801161c:	781b      	ldrb	r3, [r3, #0]
 801161e:	1cfa      	adds	r2, r7, #3
 8011620:	1c59      	adds	r1, r3, #1
 8011622:	7011      	strb	r1, [r2, #0]
 8011624:	001a      	movs	r2, r3
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	189b      	adds	r3, r3, r2
 801162a:	781b      	ldrb	r3, [r3, #0]
 801162c:	183a      	adds	r2, r7, r0
 801162e:	6013      	str	r3, [r2, #0]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8011630:	1cfb      	adds	r3, r7, #3
 8011632:	781b      	ldrb	r3, [r3, #0]
 8011634:	1cfa      	adds	r2, r7, #3
 8011636:	1c59      	adds	r1, r3, #1
 8011638:	7011      	strb	r1, [r2, #0]
 801163a:	001a      	movs	r2, r3
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	189b      	adds	r3, r3, r2
 8011640:	781b      	ldrb	r3, [r3, #0]
 8011642:	021b      	lsls	r3, r3, #8
 8011644:	183a      	adds	r2, r7, r0
 8011646:	6812      	ldr	r2, [r2, #0]
 8011648:	4313      	orrs	r3, r2
 801164a:	183a      	adds	r2, r7, r0
 801164c:	6013      	str	r3, [r2, #0]
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 801164e:	1cfb      	adds	r3, r7, #3
 8011650:	781b      	ldrb	r3, [r3, #0]
 8011652:	1cfa      	adds	r2, r7, #3
 8011654:	1c59      	adds	r1, r3, #1
 8011656:	7011      	strb	r1, [r2, #0]
 8011658:	001a      	movs	r2, r3
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	189b      	adds	r3, r3, r2
 801165e:	781b      	ldrb	r3, [r3, #0]
 8011660:	041b      	lsls	r3, r3, #16
 8011662:	183a      	adds	r2, r7, r0
 8011664:	6812      	ldr	r2, [r2, #0]
 8011666:	4313      	orrs	r3, r2
 8011668:	183a      	adds	r2, r7, r0
 801166a:	6013      	str	r3, [r2, #0]
                    frequency *= 100;
 801166c:	183b      	adds	r3, r7, r0
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	2264      	movs	r2, #100	; 0x64
 8011672:	4353      	muls	r3, r2
 8011674:	183a      	adds	r2, r7, r0
 8011676:	6013      	str	r3, [r2, #0]

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8011678:	183b      	adds	r3, r7, r0
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	0018      	movs	r0, r3
 801167e:	f003 f9da 	bl	8014a36 <LoRaMacClassBBeaconFreqReq>
 8011682:	1e03      	subs	r3, r0, #0
 8011684:	d004      	beq.n	8011690 <ProcessMacCommands+0xad4>
                    {
                        macCmdPayload[0] = 1;
 8011686:	2368      	movs	r3, #104	; 0x68
 8011688:	18fb      	adds	r3, r7, r3
 801168a:	2201      	movs	r2, #1
 801168c:	701a      	strb	r2, [r3, #0]
 801168e:	e003      	b.n	8011698 <ProcessMacCommands+0xadc>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 8011690:	2368      	movs	r3, #104	; 0x68
 8011692:	18fb      	adds	r3, r7, r3
 8011694:	2200      	movs	r2, #0
 8011696:	701a      	strb	r2, [r3, #0]
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8011698:	2368      	movs	r3, #104	; 0x68
 801169a:	18fb      	adds	r3, r7, r3
 801169c:	2201      	movs	r2, #1
 801169e:	0019      	movs	r1, r3
 80116a0:	2013      	movs	r0, #19
 80116a2:	f003 fb47 	bl	8014d34 <LoRaMacCommandsAddCmd>
                }
                break;
 80116a6:	46c0      	nop			; (mov r8, r8)
    while( macIndex < commandsSize )
 80116a8:	1cfa      	adds	r2, r7, #3
 80116aa:	1cbb      	adds	r3, r7, #2
 80116ac:	7812      	ldrb	r2, [r2, #0]
 80116ae:	781b      	ldrb	r3, [r3, #0]
 80116b0:	429a      	cmp	r2, r3
 80116b2:	d201      	bcs.n	80116b8 <ProcessMacCommands+0xafc>
 80116b4:	f7ff faa0 	bl	8010bf8 <ProcessMacCommands+0x3c>
 80116b8:	e002      	b.n	80116c0 <ProcessMacCommands+0xb04>
            return;
 80116ba:	46c0      	nop			; (mov r8, r8)
 80116bc:	e000      	b.n	80116c0 <ProcessMacCommands+0xb04>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 80116be:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 80116c0:	46bd      	mov	sp, r7
 80116c2:	b023      	add	sp, #140	; 0x8c
 80116c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80116c6:	46c0      	nop			; (mov r8, r8)
 80116c8:	12d53d80 	.word	0x12d53d80
 80116cc:	200005b8 	.word	0x200005b8
 80116d0:	2000173c 	.word	0x2000173c

080116d4 <Send>:

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 80116d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80116d6:	b08f      	sub	sp, #60	; 0x3c
 80116d8:	af02      	add	r7, sp, #8
 80116da:	60f8      	str	r0, [r7, #12]
 80116dc:	0008      	movs	r0, r1
 80116de:	607a      	str	r2, [r7, #4]
 80116e0:	0019      	movs	r1, r3
 80116e2:	230b      	movs	r3, #11
 80116e4:	18fb      	adds	r3, r7, r3
 80116e6:	1c02      	adds	r2, r0, #0
 80116e8:	701a      	strb	r2, [r3, #0]
 80116ea:	2308      	movs	r3, #8
 80116ec:	18fb      	adds	r3, r7, r3
 80116ee:	1c0a      	adds	r2, r1, #0
 80116f0:	801a      	strh	r2, [r3, #0]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80116f2:	232f      	movs	r3, #47	; 0x2f
 80116f4:	18fb      	adds	r3, r7, r3
 80116f6:	2203      	movs	r2, #3
 80116f8:	701a      	strb	r2, [r3, #0]
    int8_t datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 80116fa:	4b90      	ldr	r3, [pc, #576]	; (801193c <Send+0x268>)
 80116fc:	4a90      	ldr	r2, [pc, #576]	; (8011940 <Send+0x26c>)
 80116fe:	589a      	ldr	r2, [r3, r2]
 8011700:	232e      	movs	r3, #46	; 0x2e
 8011702:	18fb      	adds	r3, r7, r3
 8011704:	2185      	movs	r1, #133	; 0x85
 8011706:	5c52      	ldrb	r2, [r2, r1]
 8011708:	701a      	strb	r2, [r3, #0]
    int8_t txPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 801170a:	4b8c      	ldr	r3, [pc, #560]	; (801193c <Send+0x268>)
 801170c:	4a8c      	ldr	r2, [pc, #560]	; (8011940 <Send+0x26c>)
 801170e:	589a      	ldr	r2, [r3, r2]
 8011710:	232d      	movs	r3, #45	; 0x2d
 8011712:	18fb      	adds	r3, r7, r3
 8011714:	2184      	movs	r1, #132	; 0x84
 8011716:	5c52      	ldrb	r2, [r2, r1]
 8011718:	701a      	strb	r2, [r3, #0]
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 801171a:	4b88      	ldr	r3, [pc, #544]	; (801193c <Send+0x268>)
 801171c:	4a88      	ldr	r2, [pc, #544]	; (8011940 <Send+0x26c>)
 801171e:	589b      	ldr	r3, [r3, r2]
 8011720:	2280      	movs	r2, #128	; 0x80
 8011722:	589b      	ldr	r3, [r3, r2]
 8011724:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8011726:	4b85      	ldr	r3, [pc, #532]	; (801193c <Send+0x268>)
 8011728:	4a85      	ldr	r2, [pc, #532]	; (8011940 <Send+0x26c>)
 801172a:	589a      	ldr	r2, [r3, r2]
 801172c:	23b2      	movs	r3, #178	; 0xb2
 801172e:	005b      	lsls	r3, r3, #1
 8011730:	5cd3      	ldrb	r3, [r2, r3]
 8011732:	2b00      	cmp	r3, #0
 8011734:	d101      	bne.n	801173a <Send+0x66>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8011736:	2307      	movs	r3, #7
 8011738:	e0fb      	b.n	8011932 <Send+0x25e>
    }
    if( MacCtx.NvmCtx->MaxDCycle == 0 )
 801173a:	4b80      	ldr	r3, [pc, #512]	; (801193c <Send+0x268>)
 801173c:	4a80      	ldr	r2, [pc, #512]	; (8011940 <Send+0x26c>)
 801173e:	589b      	ldr	r3, [r3, r2]
 8011740:	22c8      	movs	r2, #200	; 0xc8
 8011742:	5c9b      	ldrb	r3, [r3, r2]
 8011744:	2b00      	cmp	r3, #0
 8011746:	d106      	bne.n	8011756 <Send+0x82>
    {
        MacCtx.NvmCtx->AggregatedTimeOff = 0;
 8011748:	4b7c      	ldr	r3, [pc, #496]	; (801193c <Send+0x268>)
 801174a:	4a7d      	ldr	r2, [pc, #500]	; (8011940 <Send+0x26c>)
 801174c:	589a      	ldr	r2, [r3, r2]
 801174e:	23aa      	movs	r3, #170	; 0xaa
 8011750:	005b      	lsls	r3, r3, #1
 8011752:	2100      	movs	r1, #0
 8011754:	50d1      	str	r1, [r2, r3]
    }

    fCtrl.Value = 0;
 8011756:	242c      	movs	r4, #44	; 0x2c
 8011758:	193b      	adds	r3, r7, r4
 801175a:	2200      	movs	r2, #0
 801175c:	701a      	strb	r2, [r3, #0]
    fCtrl.Bits.FOptsLen      = 0;
 801175e:	193b      	adds	r3, r7, r4
 8011760:	781a      	ldrb	r2, [r3, #0]
 8011762:	210f      	movs	r1, #15
 8011764:	438a      	bics	r2, r1
 8011766:	701a      	strb	r2, [r3, #0]
    fCtrl.Bits.Adr           = MacCtx.NvmCtx->AdrCtrlOn;
 8011768:	4b74      	ldr	r3, [pc, #464]	; (801193c <Send+0x268>)
 801176a:	4a75      	ldr	r2, [pc, #468]	; (8011940 <Send+0x26c>)
 801176c:	589b      	ldr	r3, [r3, r2]
 801176e:	227e      	movs	r2, #126	; 0x7e
 8011770:	5c9a      	ldrb	r2, [r3, r2]
 8011772:	193b      	adds	r3, r7, r4
 8011774:	01d0      	lsls	r0, r2, #7
 8011776:	781a      	ldrb	r2, [r3, #0]
 8011778:	217f      	movs	r1, #127	; 0x7f
 801177a:	400a      	ands	r2, r1
 801177c:	1c11      	adds	r1, r2, #0
 801177e:	1c02      	adds	r2, r0, #0
 8011780:	430a      	orrs	r2, r1
 8011782:	701a      	strb	r2, [r3, #0]

    // Check class b
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8011784:	4b6d      	ldr	r3, [pc, #436]	; (801193c <Send+0x268>)
 8011786:	4a6e      	ldr	r2, [pc, #440]	; (8011940 <Send+0x26c>)
 8011788:	589b      	ldr	r3, [r3, r2]
 801178a:	227c      	movs	r2, #124	; 0x7c
 801178c:	5c9b      	ldrb	r3, [r3, r2]
 801178e:	2b01      	cmp	r3, #1
 8011790:	d105      	bne.n	801179e <Send+0xca>
    {
        fCtrl.Bits.FPending      = 1;
 8011792:	193b      	adds	r3, r7, r4
 8011794:	781a      	ldrb	r2, [r3, #0]
 8011796:	2110      	movs	r1, #16
 8011798:	430a      	orrs	r2, r1
 801179a:	701a      	strb	r2, [r3, #0]
 801179c:	e005      	b.n	80117aa <Send+0xd6>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 801179e:	232c      	movs	r3, #44	; 0x2c
 80117a0:	18fb      	adds	r3, r7, r3
 80117a2:	781a      	ldrb	r2, [r3, #0]
 80117a4:	2110      	movs	r1, #16
 80117a6:	438a      	bics	r2, r1
 80117a8:	701a      	strb	r2, [r3, #0]
    }

    // Check server ack
    if( MacCtx.NvmCtx->SrvAckRequested == true )
 80117aa:	4b64      	ldr	r3, [pc, #400]	; (801193c <Send+0x268>)
 80117ac:	4a64      	ldr	r2, [pc, #400]	; (8011940 <Send+0x26c>)
 80117ae:	589a      	ldr	r2, [r3, r2]
 80117b0:	234c      	movs	r3, #76	; 0x4c
 80117b2:	33ff      	adds	r3, #255	; 0xff
 80117b4:	5cd3      	ldrb	r3, [r2, r3]
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d005      	beq.n	80117c6 <Send+0xf2>
    {
        fCtrl.Bits.Ack = 1;
 80117ba:	232c      	movs	r3, #44	; 0x2c
 80117bc:	18fb      	adds	r3, r7, r3
 80117be:	781a      	ldrb	r2, [r3, #0]
 80117c0:	2120      	movs	r1, #32
 80117c2:	430a      	orrs	r2, r1
 80117c4:	701a      	strb	r2, [r3, #0]
    }

    // ADR next request
    adrNext.Version = MacCtx.NvmCtx->Version;
 80117c6:	4b5d      	ldr	r3, [pc, #372]	; (801193c <Send+0x268>)
 80117c8:	4a5d      	ldr	r2, [pc, #372]	; (8011940 <Send+0x26c>)
 80117ca:	5899      	ldr	r1, [r3, r2]
 80117cc:	2014      	movs	r0, #20
 80117ce:	183b      	adds	r3, r7, r0
 80117d0:	22b0      	movs	r2, #176	; 0xb0
 80117d2:	0052      	lsls	r2, r2, #1
 80117d4:	588a      	ldr	r2, [r1, r2]
 80117d6:	601a      	str	r2, [r3, #0]
    adrNext.UpdateChanMask = true;
 80117d8:	0001      	movs	r1, r0
 80117da:	187b      	adds	r3, r7, r1
 80117dc:	2201      	movs	r2, #1
 80117de:	711a      	strb	r2, [r3, #4]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 80117e0:	242c      	movs	r4, #44	; 0x2c
 80117e2:	193b      	adds	r3, r7, r4
 80117e4:	781b      	ldrb	r3, [r3, #0]
 80117e6:	061b      	lsls	r3, r3, #24
 80117e8:	0fdb      	lsrs	r3, r3, #31
 80117ea:	b2db      	uxtb	r3, r3
 80117ec:	1e5a      	subs	r2, r3, #1
 80117ee:	4193      	sbcs	r3, r2
 80117f0:	b2da      	uxtb	r2, r3
 80117f2:	187b      	adds	r3, r7, r1
 80117f4:	715a      	strb	r2, [r3, #5]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 80117f6:	4b51      	ldr	r3, [pc, #324]	; (801193c <Send+0x268>)
 80117f8:	4a51      	ldr	r2, [pc, #324]	; (8011940 <Send+0x26c>)
 80117fa:	589b      	ldr	r3, [r3, r2]
 80117fc:	2280      	movs	r2, #128	; 0x80
 80117fe:	589a      	ldr	r2, [r3, r2]
 8011800:	0008      	movs	r0, r1
 8011802:	183b      	adds	r3, r7, r0
 8011804:	609a      	str	r2, [r3, #8]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8011806:	4a4d      	ldr	r2, [pc, #308]	; (801193c <Send+0x268>)
 8011808:	23fd      	movs	r3, #253	; 0xfd
 801180a:	009b      	lsls	r3, r3, #2
 801180c:	5ad2      	ldrh	r2, [r2, r3]
 801180e:	183b      	adds	r3, r7, r0
 8011810:	819a      	strh	r2, [r3, #12]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8011812:	4b4a      	ldr	r3, [pc, #296]	; (801193c <Send+0x268>)
 8011814:	4a4b      	ldr	r2, [pc, #300]	; (8011944 <Send+0x270>)
 8011816:	5a9a      	ldrh	r2, [r3, r2]
 8011818:	183b      	adds	r3, r7, r0
 801181a:	81da      	strh	r2, [r3, #14]
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 801181c:	4b47      	ldr	r3, [pc, #284]	; (801193c <Send+0x268>)
 801181e:	4a48      	ldr	r2, [pc, #288]	; (8011940 <Send+0x26c>)
 8011820:	589b      	ldr	r3, [r3, r2]
 8011822:	2285      	movs	r2, #133	; 0x85
 8011824:	569a      	ldrsb	r2, [r3, r2]
 8011826:	183b      	adds	r3, r7, r0
 8011828:	741a      	strb	r2, [r3, #16]
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 801182a:	4b44      	ldr	r3, [pc, #272]	; (801193c <Send+0x268>)
 801182c:	4a44      	ldr	r2, [pc, #272]	; (8011940 <Send+0x26c>)
 801182e:	589b      	ldr	r3, [r3, r2]
 8011830:	2284      	movs	r2, #132	; 0x84
 8011832:	569a      	ldrsb	r2, [r3, r2]
 8011834:	183b      	adds	r3, r7, r0
 8011836:	745a      	strb	r2, [r3, #17]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8011838:	4b40      	ldr	r3, [pc, #256]	; (801193c <Send+0x268>)
 801183a:	4a41      	ldr	r2, [pc, #260]	; (8011940 <Send+0x26c>)
 801183c:	589b      	ldr	r3, [r3, r2]
 801183e:	22b8      	movs	r2, #184	; 0xb8
 8011840:	5c9a      	ldrb	r2, [r3, r2]
 8011842:	183b      	adds	r3, r7, r0
 8011844:	749a      	strb	r2, [r3, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;
 8011846:	4b3d      	ldr	r3, [pc, #244]	; (801193c <Send+0x268>)
 8011848:	4a3d      	ldr	r2, [pc, #244]	; (8011940 <Send+0x26c>)
 801184a:	589b      	ldr	r3, [r3, r2]
 801184c:	781a      	ldrb	r2, [r3, #0]
 801184e:	183b      	adds	r3, r7, r0
 8011850:	74da      	strb	r2, [r3, #19]

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 8011852:	4b3a      	ldr	r3, [pc, #232]	; (801193c <Send+0x268>)
 8011854:	4a3a      	ldr	r2, [pc, #232]	; (8011940 <Send+0x26c>)
 8011856:	589b      	ldr	r3, [r3, r2]
 8011858:	3385      	adds	r3, #133	; 0x85
 801185a:	0019      	movs	r1, r3
                                               &MacCtx.NvmCtx->MacParams.ChannelsTxPower, &adrAckCounter );
 801185c:	4b37      	ldr	r3, [pc, #220]	; (801193c <Send+0x268>)
 801185e:	4a38      	ldr	r2, [pc, #224]	; (8011940 <Send+0x26c>)
 8011860:	589b      	ldr	r3, [r3, r2]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 8011862:	3384      	adds	r3, #132	; 0x84
 8011864:	001a      	movs	r2, r3
 8011866:	2328      	movs	r3, #40	; 0x28
 8011868:	18fb      	adds	r3, r7, r3
 801186a:	1838      	adds	r0, r7, r0
 801186c:	f002 fff7 	bl	801485e <LoRaMacAdrCalcNext>
 8011870:	0003      	movs	r3, r0
 8011872:	0019      	movs	r1, r3
 8011874:	0026      	movs	r6, r4
 8011876:	193b      	adds	r3, r7, r4
 8011878:	2201      	movs	r2, #1
 801187a:	400a      	ands	r2, r1
 801187c:	0190      	lsls	r0, r2, #6
 801187e:	781a      	ldrb	r2, [r3, #0]
 8011880:	2140      	movs	r1, #64	; 0x40
 8011882:	438a      	bics	r2, r1
 8011884:	1c11      	adds	r1, r2, #0
 8011886:	1c02      	adds	r2, r0, #0
 8011888:	430a      	orrs	r2, r1
 801188a:	701a      	strb	r2, [r3, #0]

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 801188c:	222f      	movs	r2, #47	; 0x2f
 801188e:	18bc      	adds	r4, r7, r2
 8011890:	687d      	ldr	r5, [r7, #4]
 8011892:	230b      	movs	r3, #11
 8011894:	18fb      	adds	r3, r7, r3
 8011896:	781a      	ldrb	r2, [r3, #0]
 8011898:	19b9      	adds	r1, r7, r6
 801189a:	68f8      	ldr	r0, [r7, #12]
 801189c:	2308      	movs	r3, #8
 801189e:	18fb      	adds	r3, r7, r3
 80118a0:	881b      	ldrh	r3, [r3, #0]
 80118a2:	9300      	str	r3, [sp, #0]
 80118a4:	002b      	movs	r3, r5
 80118a6:	f000 fd07 	bl	80122b8 <PrepareFrame>
 80118aa:	0003      	movs	r3, r0
 80118ac:	7023      	strb	r3, [r4, #0]

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 80118ae:	222f      	movs	r2, #47	; 0x2f
 80118b0:	18bb      	adds	r3, r7, r2
 80118b2:	781b      	ldrb	r3, [r3, #0]
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d003      	beq.n	80118c0 <Send+0x1ec>
 80118b8:	18bb      	adds	r3, r7, r2
 80118ba:	781b      	ldrb	r3, [r3, #0]
 80118bc:	2b0a      	cmp	r3, #10
 80118be:	d10c      	bne.n	80118da <Send+0x206>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 80118c0:	232f      	movs	r3, #47	; 0x2f
 80118c2:	18fc      	adds	r4, r7, r3
 80118c4:	2340      	movs	r3, #64	; 0x40
 80118c6:	2208      	movs	r2, #8
 80118c8:	4694      	mov	ip, r2
 80118ca:	44bc      	add	ip, r7
 80118cc:	4463      	add	r3, ip
 80118ce:	781b      	ldrb	r3, [r3, #0]
 80118d0:	0018      	movs	r0, r3
 80118d2:	f000 f9cd 	bl	8011c70 <ScheduleTx>
 80118d6:	0003      	movs	r3, r0
 80118d8:	7023      	strb	r3, [r4, #0]
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 80118da:	232f      	movs	r3, #47	; 0x2f
 80118dc:	18fb      	adds	r3, r7, r3
 80118de:	781b      	ldrb	r3, [r3, #0]
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d010      	beq.n	8011906 <Send+0x232>
    {
        // Bad case - restore
        // Store local variables
        MacCtx.NvmCtx->MacParams.ChannelsDatarate = datarate;
 80118e4:	4b15      	ldr	r3, [pc, #84]	; (801193c <Send+0x268>)
 80118e6:	4a16      	ldr	r2, [pc, #88]	; (8011940 <Send+0x26c>)
 80118e8:	589b      	ldr	r3, [r3, r2]
 80118ea:	222e      	movs	r2, #46	; 0x2e
 80118ec:	18ba      	adds	r2, r7, r2
 80118ee:	2185      	movs	r1, #133	; 0x85
 80118f0:	7812      	ldrb	r2, [r2, #0]
 80118f2:	545a      	strb	r2, [r3, r1]
        MacCtx.NvmCtx->MacParams.ChannelsTxPower = txPower;
 80118f4:	4b11      	ldr	r3, [pc, #68]	; (801193c <Send+0x268>)
 80118f6:	4a12      	ldr	r2, [pc, #72]	; (8011940 <Send+0x26c>)
 80118f8:	589b      	ldr	r3, [r3, r2]
 80118fa:	222d      	movs	r2, #45	; 0x2d
 80118fc:	18ba      	adds	r2, r7, r2
 80118fe:	2184      	movs	r1, #132	; 0x84
 8011900:	7812      	ldrb	r2, [r2, #0]
 8011902:	545a      	strb	r2, [r3, r1]
 8011904:	e012      	b.n	801192c <Send+0x258>
    }
    else
    {
        // Good case
        MacCtx.NvmCtx->SrvAckRequested = false;
 8011906:	4b0d      	ldr	r3, [pc, #52]	; (801193c <Send+0x268>)
 8011908:	4a0d      	ldr	r2, [pc, #52]	; (8011940 <Send+0x26c>)
 801190a:	589a      	ldr	r2, [r3, r2]
 801190c:	234c      	movs	r3, #76	; 0x4c
 801190e:	33ff      	adds	r3, #255	; 0xff
 8011910:	2100      	movs	r1, #0
 8011912:	54d1      	strb	r1, [r2, r3]
        MacCtx.NvmCtx->AdrAckCounter = adrAckCounter;
 8011914:	4b09      	ldr	r3, [pc, #36]	; (801193c <Send+0x268>)
 8011916:	4a0a      	ldr	r2, [pc, #40]	; (8011940 <Send+0x26c>)
 8011918:	589b      	ldr	r3, [r3, r2]
 801191a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801191c:	2180      	movs	r1, #128	; 0x80
 801191e:	505a      	str	r2, [r3, r1]
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8011920:	f003 fa92 	bl	8014e48 <LoRaMacCommandsRemoveNoneStickyCmds>
 8011924:	1e03      	subs	r3, r0, #0
 8011926:	d001      	beq.n	801192c <Send+0x258>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011928:	2313      	movs	r3, #19
 801192a:	e002      	b.n	8011932 <Send+0x25e>
        }
    }
    return status;
 801192c:	232f      	movs	r3, #47	; 0x2f
 801192e:	18fb      	adds	r3, r7, r3
 8011930:	781b      	ldrb	r3, [r3, #0]
}
 8011932:	0018      	movs	r0, r3
 8011934:	46bd      	mov	sp, r7
 8011936:	b00d      	add	sp, #52	; 0x34
 8011938:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801193a:	46c0      	nop			; (mov r8, r8)
 801193c:	200005b8 	.word	0x200005b8
 8011940:	00000484 	.word	0x00000484
 8011944:	000003f6 	.word	0x000003f6

08011948 <SendReJoinReq>:

  static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType ) // ПОПЫТКА
{
 8011948:	b5b0      	push	{r4, r5, r7, lr}
 801194a:	b084      	sub	sp, #16
 801194c:	af00      	add	r7, sp, #0
 801194e:	0002      	movs	r2, r0
 8011950:	1dfb      	adds	r3, r7, #7
 8011952:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8011954:	230e      	movs	r3, #14
 8011956:	18fb      	adds	r3, r7, r3
 8011958:	2200      	movs	r2, #0
 801195a:	701a      	strb	r2, [r3, #0]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0; //  не влияет
 801195c:	240c      	movs	r4, #12
 801195e:	193b      	adds	r3, r7, r4
 8011960:	2200      	movs	r2, #0
 8011962:	701a      	strb	r2, [r3, #0]
    bool allowDelayedTx = true;
 8011964:	250f      	movs	r5, #15
 8011966:	197b      	adds	r3, r7, r5
 8011968:	2201      	movs	r2, #1
 801196a:	701a      	strb	r2, [r3, #0]

    // Setup join/rejoin message
    switch( joinReqType )
 801196c:	1dfb      	adds	r3, r7, #7
 801196e:	781b      	ldrb	r3, [r3, #0]
 8011970:	2bff      	cmp	r3, #255	; 0xff
 8011972:	d130      	bne.n	80119d6 <SendReJoinReq+0x8e>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 8011974:	2000      	movs	r0, #0
 8011976:	f7fe ff7b 	bl	8010870 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 801197a:	4a21      	ldr	r2, [pc, #132]	; (8011a00 <SendReJoinReq+0xb8>)
 801197c:	2382      	movs	r3, #130	; 0x82
 801197e:	005b      	lsls	r3, r3, #1
 8011980:	2100      	movs	r1, #0
 8011982:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8011984:	4a1e      	ldr	r2, [pc, #120]	; (8011a00 <SendReJoinReq+0xb8>)
 8011986:	2384      	movs	r3, #132	; 0x84
 8011988:	005b      	lsls	r3, r3, #1
 801198a:	491e      	ldr	r1, [pc, #120]	; (8011a04 <SendReJoinReq+0xbc>)
 801198c:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 801198e:	4a1c      	ldr	r2, [pc, #112]	; (8011a00 <SendReJoinReq+0xb8>)
 8011990:	2386      	movs	r3, #134	; 0x86
 8011992:	005b      	lsls	r3, r3, #1
 8011994:	21ff      	movs	r1, #255	; 0xff
 8011996:	54d1      	strb	r1, [r2, r3]

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 8011998:	193b      	adds	r3, r7, r4
 801199a:	781a      	ldrb	r2, [r3, #0]
 801199c:	211f      	movs	r1, #31
 801199e:	400a      	ands	r2, r1
 80119a0:	701a      	strb	r2, [r3, #0]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 80119a2:	193b      	adds	r3, r7, r4
 80119a4:	7819      	ldrb	r1, [r3, #0]
 80119a6:	4a16      	ldr	r2, [pc, #88]	; (8011a00 <SendReJoinReq+0xb8>)
 80119a8:	230e      	movs	r3, #14
 80119aa:	33ff      	adds	r3, #255	; 0xff
 80119ac:	54d1      	strb	r1, [r2, r3]

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 80119ae:	f7fc fa3d 	bl	800de2c <SecureElementGetJoinEui>
 80119b2:	0001      	movs	r1, r0
 80119b4:	4b14      	ldr	r3, [pc, #80]	; (8011a08 <SendReJoinReq+0xc0>)
 80119b6:	2208      	movs	r2, #8
 80119b8:	0018      	movs	r0, r3
 80119ba:	f007 fde9 	bl	8019590 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 80119be:	f7fc fa11 	bl	800dde4 <SecureElementGetDevEui>
 80119c2:	0001      	movs	r1, r0
 80119c4:	4b11      	ldr	r3, [pc, #68]	; (8011a0c <SendReJoinReq+0xc4>)
 80119c6:	2208      	movs	r2, #8
 80119c8:	0018      	movs	r0, r3
 80119ca:	f007 fde1 	bl	8019590 <memcpy1>

            allowDelayedTx = false;
 80119ce:	197b      	adds	r3, r7, r5
 80119d0:	2200      	movs	r2, #0
 80119d2:	701a      	strb	r2, [r3, #0]

            break;
 80119d4:	e004      	b.n	80119e0 <SendReJoinReq+0x98>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80119d6:	230e      	movs	r3, #14
 80119d8:	18fb      	adds	r3, r7, r3
 80119da:	2202      	movs	r2, #2
 80119dc:	701a      	strb	r2, [r3, #0]
            break;
 80119de:	46c0      	nop			; (mov r8, r8)
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 80119e0:	250e      	movs	r5, #14
 80119e2:	197c      	adds	r4, r7, r5
 80119e4:	230f      	movs	r3, #15
 80119e6:	18fb      	adds	r3, r7, r3
 80119e8:	781b      	ldrb	r3, [r3, #0]
 80119ea:	0018      	movs	r0, r3
 80119ec:	f000 f940 	bl	8011c70 <ScheduleTx>
 80119f0:	0003      	movs	r3, r0
 80119f2:	7023      	strb	r3, [r4, #0]
    return status;
 80119f4:	197b      	adds	r3, r7, r5
 80119f6:	781b      	ldrb	r3, [r3, #0]
}
 80119f8:	0018      	movs	r0, r3
 80119fa:	46bd      	mov	sp, r7
 80119fc:	b004      	add	sp, #16
 80119fe:	bdb0      	pop	{r4, r5, r7, pc}
 8011a00:	200005b8 	.word	0x200005b8
 8011a04:	200005ba 	.word	0x200005ba
 8011a08:	200006c6 	.word	0x200006c6
 8011a0c:	200006ce 	.word	0x200006ce

08011a10 <CheckForClassBCollision>:
 // NEW
static LoRaMacStatus_t CheckForClassBCollision( void )
{
 8011a10:	b580      	push	{r7, lr}
 8011a12:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8011a14:	f002 ffa2 	bl	801495c <LoRaMacClassBIsBeaconExpected>
 8011a18:	1e03      	subs	r3, r0, #0
 8011a1a:	d001      	beq.n	8011a20 <CheckForClassBCollision+0x10>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8011a1c:	230e      	movs	r3, #14
 8011a1e:	e013      	b.n	8011a48 <CheckForClassBCollision+0x38>
    }

    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8011a20:	4b0b      	ldr	r3, [pc, #44]	; (8011a50 <CheckForClassBCollision+0x40>)
 8011a22:	4a0c      	ldr	r2, [pc, #48]	; (8011a54 <CheckForClassBCollision+0x44>)
 8011a24:	589b      	ldr	r3, [r3, r2]
 8011a26:	227c      	movs	r2, #124	; 0x7c
 8011a28:	5c9b      	ldrb	r3, [r3, r2]
 8011a2a:	2b01      	cmp	r3, #1
 8011a2c:	d10b      	bne.n	8011a46 <CheckForClassBCollision+0x36>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8011a2e:	f002 ff9b 	bl	8014968 <LoRaMacClassBIsPingExpected>
 8011a32:	1e03      	subs	r3, r0, #0
 8011a34:	d001      	beq.n	8011a3a <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8011a36:	230f      	movs	r3, #15
 8011a38:	e006      	b.n	8011a48 <CheckForClassBCollision+0x38>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8011a3a:	f002 ff9b 	bl	8014974 <LoRaMacClassBIsMulticastExpected>
 8011a3e:	1e03      	subs	r3, r0, #0
 8011a40:	d001      	beq.n	8011a46 <CheckForClassBCollision+0x36>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8011a42:	230f      	movs	r3, #15
 8011a44:	e000      	b.n	8011a48 <CheckForClassBCollision+0x38>
        }
    }
    return LORAMAC_STATUS_OK;
 8011a46:	2300      	movs	r3, #0
}
 8011a48:	0018      	movs	r0, r3
 8011a4a:	46bd      	mov	sp, r7
 8011a4c:	bd80      	pop	{r7, pc}
 8011a4e:	46c0      	nop			; (mov r8, r8)
 8011a50:	200005b8 	.word	0x200005b8
 8011a54:	00000484 	.word	0x00000484

08011a58 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 8011a58:	b5b0      	push	{r4, r5, r7, lr}
 8011a5a:	b082      	sub	sp, #8
 8011a5c:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8011a5e:	4b44      	ldr	r3, [pc, #272]	; (8011b70 <ComputeRxWindowParameters+0x118>)
 8011a60:	4a44      	ldr	r2, [pc, #272]	; (8011b74 <ComputeRxWindowParameters+0x11c>)
 8011a62:	589b      	ldr	r3, [r3, r2]
 8011a64:	781c      	ldrb	r4, [r3, #0]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 8011a66:	4b42      	ldr	r3, [pc, #264]	; (8011b70 <ComputeRxWindowParameters+0x118>)
 8011a68:	4a42      	ldr	r2, [pc, #264]	; (8011b74 <ComputeRxWindowParameters+0x11c>)
 8011a6a:	589b      	ldr	r3, [r3, r2]
 8011a6c:	7818      	ldrb	r0, [r3, #0]
                                                          MacCtx.NvmCtx->MacParams.DownlinkDwellTime,
 8011a6e:	4b40      	ldr	r3, [pc, #256]	; (8011b70 <ComputeRxWindowParameters+0x118>)
 8011a70:	4a40      	ldr	r2, [pc, #256]	; (8011b74 <ComputeRxWindowParameters+0x11c>)
 8011a72:	589b      	ldr	r3, [r3, r2]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 8011a74:	22b9      	movs	r2, #185	; 0xb9
 8011a76:	5c99      	ldrb	r1, [r3, r2]
                                                          MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 8011a78:	4b3d      	ldr	r3, [pc, #244]	; (8011b70 <ComputeRxWindowParameters+0x118>)
 8011a7a:	4a3e      	ldr	r2, [pc, #248]	; (8011b74 <ComputeRxWindowParameters+0x11c>)
 8011a7c:	589b      	ldr	r3, [r3, r2]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 8011a7e:	2285      	movs	r2, #133	; 0x85
 8011a80:	569a      	ldrsb	r2, [r3, r2]
                                                          MacCtx.NvmCtx->MacParams.Rx1DrOffset ),
 8011a82:	4b3b      	ldr	r3, [pc, #236]	; (8011b70 <ComputeRxWindowParameters+0x118>)
 8011a84:	4d3b      	ldr	r5, [pc, #236]	; (8011b74 <ComputeRxWindowParameters+0x11c>)
 8011a86:	595b      	ldr	r3, [r3, r5]
 8011a88:	25a5      	movs	r5, #165	; 0xa5
 8011a8a:	5d5b      	ldrb	r3, [r3, r5]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 8011a8c:	b25b      	sxtb	r3, r3
 8011a8e:	f005 fad1 	bl	8017034 <RegionApplyDrOffset>
 8011a92:	0003      	movs	r3, r0
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8011a94:	b259      	sxtb	r1, r3
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 8011a96:	4b36      	ldr	r3, [pc, #216]	; (8011b70 <ComputeRxWindowParameters+0x118>)
 8011a98:	4a36      	ldr	r2, [pc, #216]	; (8011b74 <ComputeRxWindowParameters+0x11c>)
 8011a9a:	589b      	ldr	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8011a9c:	228c      	movs	r2, #140	; 0x8c
 8011a9e:	5c9a      	ldrb	r2, [r3, r2]
                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 8011aa0:	4b33      	ldr	r3, [pc, #204]	; (8011b70 <ComputeRxWindowParameters+0x118>)
 8011aa2:	4834      	ldr	r0, [pc, #208]	; (8011b74 <ComputeRxWindowParameters+0x11c>)
 8011aa4:	581b      	ldr	r3, [r3, r0]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8011aa6:	2088      	movs	r0, #136	; 0x88
 8011aa8:	5818      	ldr	r0, [r3, r0]
 8011aaa:	4b33      	ldr	r3, [pc, #204]	; (8011b78 <ComputeRxWindowParameters+0x120>)
 8011aac:	9300      	str	r3, [sp, #0]
 8011aae:	0003      	movs	r3, r0
 8011ab0:	0020      	movs	r0, r4
 8011ab2:	f005 f99d 	bl	8016df0 <RegionComputeRxWindowParameters>
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8011ab6:	4b2e      	ldr	r3, [pc, #184]	; (8011b70 <ComputeRxWindowParameters+0x118>)
 8011ab8:	4a2e      	ldr	r2, [pc, #184]	; (8011b74 <ComputeRxWindowParameters+0x11c>)
 8011aba:	589b      	ldr	r3, [r3, r2]
 8011abc:	7818      	ldrb	r0, [r3, #0]
                                     MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
 8011abe:	4b2c      	ldr	r3, [pc, #176]	; (8011b70 <ComputeRxWindowParameters+0x118>)
 8011ac0:	4a2c      	ldr	r2, [pc, #176]	; (8011b74 <ComputeRxWindowParameters+0x11c>)
 8011ac2:	589b      	ldr	r3, [r3, r2]
 8011ac4:	22ac      	movs	r2, #172	; 0xac
 8011ac6:	5c9b      	ldrb	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8011ac8:	b259      	sxtb	r1, r3
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 8011aca:	4b29      	ldr	r3, [pc, #164]	; (8011b70 <ComputeRxWindowParameters+0x118>)
 8011acc:	4a29      	ldr	r2, [pc, #164]	; (8011b74 <ComputeRxWindowParameters+0x11c>)
 8011ace:	589b      	ldr	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8011ad0:	228c      	movs	r2, #140	; 0x8c
 8011ad2:	5c9a      	ldrb	r2, [r3, r2]
                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 8011ad4:	4b26      	ldr	r3, [pc, #152]	; (8011b70 <ComputeRxWindowParameters+0x118>)
 8011ad6:	4c27      	ldr	r4, [pc, #156]	; (8011b74 <ComputeRxWindowParameters+0x11c>)
 8011ad8:	591b      	ldr	r3, [r3, r4]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8011ada:	2488      	movs	r4, #136	; 0x88
 8011adc:	591c      	ldr	r4, [r3, r4]
 8011ade:	4b27      	ldr	r3, [pc, #156]	; (8011b7c <ComputeRxWindowParameters+0x124>)
 8011ae0:	9300      	str	r3, [sp, #0]
 8011ae2:	0023      	movs	r3, r4
 8011ae4:	f005 f984 	bl	8016df0 <RegionComputeRxWindowParameters>
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8011ae8:	4b21      	ldr	r3, [pc, #132]	; (8011b70 <ComputeRxWindowParameters+0x118>)
 8011aea:	4a22      	ldr	r2, [pc, #136]	; (8011b74 <ComputeRxWindowParameters+0x11c>)
 8011aec:	589b      	ldr	r3, [r3, r2]
 8011aee:	2294      	movs	r2, #148	; 0x94
 8011af0:	589b      	ldr	r3, [r3, r2]
 8011af2:	491f      	ldr	r1, [pc, #124]	; (8011b70 <ComputeRxWindowParameters+0x118>)
 8011af4:	22f1      	movs	r2, #241	; 0xf1
 8011af6:	0092      	lsls	r2, r2, #2
 8011af8:	588a      	ldr	r2, [r1, r2]
 8011afa:	1899      	adds	r1, r3, r2
 8011afc:	4a1c      	ldr	r2, [pc, #112]	; (8011b70 <ComputeRxWindowParameters+0x118>)
 8011afe:	23ec      	movs	r3, #236	; 0xec
 8011b00:	009b      	lsls	r3, r3, #2
 8011b02:	50d1      	str	r1, [r2, r3]
    MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8011b04:	4b1a      	ldr	r3, [pc, #104]	; (8011b70 <ComputeRxWindowParameters+0x118>)
 8011b06:	4a1b      	ldr	r2, [pc, #108]	; (8011b74 <ComputeRxWindowParameters+0x11c>)
 8011b08:	589b      	ldr	r3, [r3, r2]
 8011b0a:	2298      	movs	r2, #152	; 0x98
 8011b0c:	589b      	ldr	r3, [r3, r2]
 8011b0e:	4918      	ldr	r1, [pc, #96]	; (8011b70 <ComputeRxWindowParameters+0x118>)
 8011b10:	22f6      	movs	r2, #246	; 0xf6
 8011b12:	0092      	lsls	r2, r2, #2
 8011b14:	588a      	ldr	r2, [r1, r2]
 8011b16:	1899      	adds	r1, r3, r2
 8011b18:	4a15      	ldr	r2, [pc, #84]	; (8011b70 <ComputeRxWindowParameters+0x118>)
 8011b1a:	23ed      	movs	r3, #237	; 0xed
 8011b1c:	009b      	lsls	r3, r3, #2
 8011b1e:	50d1      	str	r1, [r2, r3]

    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8011b20:	4b13      	ldr	r3, [pc, #76]	; (8011b70 <ComputeRxWindowParameters+0x118>)
 8011b22:	4a14      	ldr	r2, [pc, #80]	; (8011b74 <ComputeRxWindowParameters+0x11c>)
 8011b24:	589a      	ldr	r2, [r3, r2]
 8011b26:	23b2      	movs	r3, #178	; 0xb2
 8011b28:	005b      	lsls	r3, r3, #1
 8011b2a:	5cd3      	ldrb	r3, [r2, r3]
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d11b      	bne.n	8011b68 <ComputeRxWindowParameters+0x110>
    {
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8011b30:	4b0f      	ldr	r3, [pc, #60]	; (8011b70 <ComputeRxWindowParameters+0x118>)
 8011b32:	4a10      	ldr	r2, [pc, #64]	; (8011b74 <ComputeRxWindowParameters+0x11c>)
 8011b34:	589b      	ldr	r3, [r3, r2]
 8011b36:	229c      	movs	r2, #156	; 0x9c
 8011b38:	589b      	ldr	r3, [r3, r2]
 8011b3a:	490d      	ldr	r1, [pc, #52]	; (8011b70 <ComputeRxWindowParameters+0x118>)
 8011b3c:	22f1      	movs	r2, #241	; 0xf1
 8011b3e:	0092      	lsls	r2, r2, #2
 8011b40:	588a      	ldr	r2, [r1, r2]
 8011b42:	1899      	adds	r1, r3, r2
 8011b44:	4a0a      	ldr	r2, [pc, #40]	; (8011b70 <ComputeRxWindowParameters+0x118>)
 8011b46:	23ec      	movs	r3, #236	; 0xec
 8011b48:	009b      	lsls	r3, r3, #2
 8011b4a:	50d1      	str	r1, [r2, r3]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8011b4c:	4b08      	ldr	r3, [pc, #32]	; (8011b70 <ComputeRxWindowParameters+0x118>)
 8011b4e:	4a09      	ldr	r2, [pc, #36]	; (8011b74 <ComputeRxWindowParameters+0x11c>)
 8011b50:	589b      	ldr	r3, [r3, r2]
 8011b52:	22a0      	movs	r2, #160	; 0xa0
 8011b54:	589b      	ldr	r3, [r3, r2]
 8011b56:	4906      	ldr	r1, [pc, #24]	; (8011b70 <ComputeRxWindowParameters+0x118>)
 8011b58:	22f6      	movs	r2, #246	; 0xf6
 8011b5a:	0092      	lsls	r2, r2, #2
 8011b5c:	588a      	ldr	r2, [r1, r2]
 8011b5e:	1899      	adds	r1, r3, r2
 8011b60:	4a03      	ldr	r2, [pc, #12]	; (8011b70 <ComputeRxWindowParameters+0x118>)
 8011b62:	23ed      	movs	r3, #237	; 0xed
 8011b64:	009b      	lsls	r3, r3, #2
 8011b66:	50d1      	str	r1, [r2, r3]
    }
}
 8011b68:	46c0      	nop			; (mov r8, r8)
 8011b6a:	46bd      	mov	sp, r7
 8011b6c:	bdb0      	pop	{r4, r5, r7, pc}
 8011b6e:	46c0      	nop			; (mov r8, r8)
 8011b70:	200005b8 	.word	0x200005b8
 8011b74:	00000484 	.word	0x00000484
 8011b78:	20000970 	.word	0x20000970
 8011b7c:	20000984 	.word	0x20000984

08011b80 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 8011b80:	b580      	push	{r7, lr}
 8011b82:	b082      	sub	sp, #8
 8011b84:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 8011b86:	2300      	movs	r3, #0
 8011b88:	607b      	str	r3, [r7, #4]

    if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 8011b8a:	4b15      	ldr	r3, [pc, #84]	; (8011be0 <VerifyTxFrame+0x60>)
 8011b8c:	4a15      	ldr	r2, [pc, #84]	; (8011be4 <VerifyTxFrame+0x64>)
 8011b8e:	589a      	ldr	r2, [r3, r2]
 8011b90:	23b2      	movs	r3, #178	; 0xb2
 8011b92:	005b      	lsls	r3, r3, #1
 8011b94:	5cd3      	ldrb	r3, [r2, r3]
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d01d      	beq.n	8011bd6 <VerifyTxFrame+0x56>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8011b9a:	1d3b      	adds	r3, r7, #4
 8011b9c:	0018      	movs	r0, r3
 8011b9e:	f003 f99f 	bl	8014ee0 <LoRaMacCommandsGetSizeSerializedCmds>
 8011ba2:	1e03      	subs	r3, r0, #0
 8011ba4:	d001      	beq.n	8011baa <VerifyTxFrame+0x2a>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011ba6:	2313      	movs	r3, #19
 8011ba8:	e016      	b.n	8011bd8 <VerifyTxFrame+0x58>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, MacCtx.NvmCtx->MacParams.ChannelsDatarate, macCmdsSize ) == false )
 8011baa:	4b0d      	ldr	r3, [pc, #52]	; (8011be0 <VerifyTxFrame+0x60>)
 8011bac:	4a0e      	ldr	r2, [pc, #56]	; (8011be8 <VerifyTxFrame+0x68>)
 8011bae:	5c98      	ldrb	r0, [r3, r2]
 8011bb0:	4b0b      	ldr	r3, [pc, #44]	; (8011be0 <VerifyTxFrame+0x60>)
 8011bb2:	4a0c      	ldr	r2, [pc, #48]	; (8011be4 <VerifyTxFrame+0x64>)
 8011bb4:	589b      	ldr	r3, [r3, r2]
 8011bb6:	2285      	movs	r2, #133	; 0x85
 8011bb8:	569b      	ldrsb	r3, [r3, r2]
 8011bba:	687a      	ldr	r2, [r7, #4]
 8011bbc:	b2d2      	uxtb	r2, r2
 8011bbe:	0019      	movs	r1, r3
 8011bc0:	f7fe ffb0 	bl	8010b24 <ValidatePayloadLength>
 8011bc4:	0003      	movs	r3, r0
 8011bc6:	001a      	movs	r2, r3
 8011bc8:	2301      	movs	r3, #1
 8011bca:	4053      	eors	r3, r2
 8011bcc:	b2db      	uxtb	r3, r3
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d001      	beq.n	8011bd6 <VerifyTxFrame+0x56>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 8011bd2:	2308      	movs	r3, #8
 8011bd4:	e000      	b.n	8011bd8 <VerifyTxFrame+0x58>
        }
    }
    return LORAMAC_STATUS_OK;
 8011bd6:	2300      	movs	r3, #0
}
 8011bd8:	0018      	movs	r0, r3
 8011bda:	46bd      	mov	sp, r7
 8011bdc:	b002      	add	sp, #8
 8011bde:	bd80      	pop	{r7, pc}
 8011be0:	200005b8 	.word	0x200005b8
 8011be4:	00000484 	.word	0x00000484
 8011be8:	00000237 	.word	0x00000237

08011bec <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 8011bec:	b590      	push	{r4, r7, lr}
 8011bee:	b083      	sub	sp, #12
 8011bf0:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 8011bf2:	4a1d      	ldr	r2, [pc, #116]	; (8011c68 <SerializeTxFrame+0x7c>)
 8011bf4:	2382      	movs	r3, #130	; 0x82
 8011bf6:	005b      	lsls	r3, r3, #1
 8011bf8:	5cd3      	ldrb	r3, [r2, r3]
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d002      	beq.n	8011c04 <SerializeTxFrame+0x18>
 8011bfe:	2b04      	cmp	r3, #4
 8011c00:	d015      	beq.n	8011c2e <SerializeTxFrame+0x42>
 8011c02:	e029      	b.n	8011c58 <SerializeTxFrame+0x6c>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8011c04:	1dfc      	adds	r4, r7, #7
 8011c06:	4b19      	ldr	r3, [pc, #100]	; (8011c6c <SerializeTxFrame+0x80>)
 8011c08:	0018      	movs	r0, r3
 8011c0a:	f004 fe6b 	bl	80168e4 <LoRaMacSerializerJoinRequest>
 8011c0e:	0003      	movs	r3, r0
 8011c10:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8011c12:	1dfb      	adds	r3, r7, #7
 8011c14:	781b      	ldrb	r3, [r3, #0]
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d001      	beq.n	8011c1e <SerializeTxFrame+0x32>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011c1a:	2311      	movs	r3, #17
 8011c1c:	e01f      	b.n	8011c5e <SerializeTxFrame+0x72>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8011c1e:	4a12      	ldr	r2, [pc, #72]	; (8011c68 <SerializeTxFrame+0x7c>)
 8011c20:	2386      	movs	r3, #134	; 0x86
 8011c22:	005b      	lsls	r3, r3, #1
 8011c24:	5cd3      	ldrb	r3, [r2, r3]
 8011c26:	b29a      	uxth	r2, r3
 8011c28:	4b0f      	ldr	r3, [pc, #60]	; (8011c68 <SerializeTxFrame+0x7c>)
 8011c2a:	801a      	strh	r2, [r3, #0]
            break;
 8011c2c:	e016      	b.n	8011c5c <SerializeTxFrame+0x70>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8011c2e:	1dfc      	adds	r4, r7, #7
 8011c30:	4b0e      	ldr	r3, [pc, #56]	; (8011c6c <SerializeTxFrame+0x80>)
 8011c32:	0018      	movs	r0, r3
 8011c34:	f004 fef1 	bl	8016a1a <LoRaMacSerializerData>
 8011c38:	0003      	movs	r3, r0
 8011c3a:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8011c3c:	1dfb      	adds	r3, r7, #7
 8011c3e:	781b      	ldrb	r3, [r3, #0]
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d001      	beq.n	8011c48 <SerializeTxFrame+0x5c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011c44:	2311      	movs	r3, #17
 8011c46:	e00a      	b.n	8011c5e <SerializeTxFrame+0x72>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8011c48:	4a07      	ldr	r2, [pc, #28]	; (8011c68 <SerializeTxFrame+0x7c>)
 8011c4a:	2386      	movs	r3, #134	; 0x86
 8011c4c:	005b      	lsls	r3, r3, #1
 8011c4e:	5cd3      	ldrb	r3, [r2, r3]
 8011c50:	b29a      	uxth	r2, r3
 8011c52:	4b05      	ldr	r3, [pc, #20]	; (8011c68 <SerializeTxFrame+0x7c>)
 8011c54:	801a      	strh	r2, [r3, #0]
            break;
 8011c56:	e001      	b.n	8011c5c <SerializeTxFrame+0x70>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8011c58:	2303      	movs	r3, #3
 8011c5a:	e000      	b.n	8011c5e <SerializeTxFrame+0x72>
    }
    return LORAMAC_STATUS_OK;
 8011c5c:	2300      	movs	r3, #0
}
 8011c5e:	0018      	movs	r0, r3
 8011c60:	46bd      	mov	sp, r7
 8011c62:	b003      	add	sp, #12
 8011c64:	bd90      	pop	{r4, r7, pc}
 8011c66:	46c0      	nop			; (mov r8, r8)
 8011c68:	200005b8 	.word	0x200005b8
 8011c6c:	200006c0 	.word	0x200006c0

08011c70 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8011c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c72:	b091      	sub	sp, #68	; 0x44
 8011c74:	af02      	add	r7, sp, #8
 8011c76:	0002      	movs	r2, r0
 8011c78:	230f      	movs	r3, #15
 8011c7a:	18fb      	adds	r3, r7, r3
 8011c7c:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011c7e:	2537      	movs	r5, #55	; 0x37
 8011c80:	197b      	adds	r3, r7, r5
 8011c82:	2203      	movs	r2, #3
 8011c84:	701a      	strb	r2, [r3, #0]
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8011c86:	197c      	adds	r4, r7, r5
 8011c88:	f7ff fec2 	bl	8011a10 <CheckForClassBCollision>
 8011c8c:	0003      	movs	r3, r0
 8011c8e:	7023      	strb	r3, [r4, #0]
    if( status != LORAMAC_STATUS_OK )
 8011c90:	002a      	movs	r2, r5
 8011c92:	18bb      	adds	r3, r7, r2
 8011c94:	781b      	ldrb	r3, [r3, #0]
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d002      	beq.n	8011ca0 <ScheduleTx+0x30>
    {
        return status;
 8011c9a:	18bb      	adds	r3, r7, r2
 8011c9c:	781b      	ldrb	r3, [r3, #0]
 8011c9e:	e0c3      	b.n	8011e28 <ScheduleTx+0x1b8>
    }

    // Update back-off
    CalculateBackOff( );
 8011ca0:	f000 f940 	bl	8011f24 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8011ca4:	2537      	movs	r5, #55	; 0x37
 8011ca6:	197c      	adds	r4, r7, r5
 8011ca8:	f7ff ffa0 	bl	8011bec <SerializeTxFrame>
 8011cac:	0003      	movs	r3, r0
 8011cae:	7023      	strb	r3, [r4, #0]
    if( status != LORAMAC_STATUS_OK )
 8011cb0:	002a      	movs	r2, r5
 8011cb2:	18bb      	adds	r3, r7, r2
 8011cb4:	781b      	ldrb	r3, [r3, #0]
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d002      	beq.n	8011cc0 <ScheduleTx+0x50>
    {
        return status;
 8011cba:	18bb      	adds	r3, r7, r2
 8011cbc:	781b      	ldrb	r3, [r3, #0]
 8011cbe:	e0b3      	b.n	8011e28 <ScheduleTx+0x1b8>
    }

    nextChan.AggrTimeOff = MacCtx.NvmCtx->AggregatedTimeOff;
 8011cc0:	4b5b      	ldr	r3, [pc, #364]	; (8011e30 <ScheduleTx+0x1c0>)
 8011cc2:	4a5c      	ldr	r2, [pc, #368]	; (8011e34 <ScheduleTx+0x1c4>)
 8011cc4:	589a      	ldr	r2, [r3, r2]
 8011cc6:	23aa      	movs	r3, #170	; 0xaa
 8011cc8:	005b      	lsls	r3, r3, #1
 8011cca:	58d2      	ldr	r2, [r2, r3]
 8011ccc:	2414      	movs	r4, #20
 8011cce:	193b      	adds	r3, r7, r4
 8011cd0:	601a      	str	r2, [r3, #0]
    nextChan.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8011cd2:	4b57      	ldr	r3, [pc, #348]	; (8011e30 <ScheduleTx+0x1c0>)
 8011cd4:	4a57      	ldr	r2, [pc, #348]	; (8011e34 <ScheduleTx+0x1c4>)
 8011cd6:	589b      	ldr	r3, [r3, r2]
 8011cd8:	2285      	movs	r2, #133	; 0x85
 8011cda:	569a      	ldrsb	r2, [r3, r2]
 8011cdc:	193b      	adds	r3, r7, r4
 8011cde:	721a      	strb	r2, [r3, #8]
    nextChan.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 8011ce0:	4b53      	ldr	r3, [pc, #332]	; (8011e30 <ScheduleTx+0x1c0>)
 8011ce2:	4a54      	ldr	r2, [pc, #336]	; (8011e34 <ScheduleTx+0x1c4>)
 8011ce4:	589b      	ldr	r3, [r3, r2]
 8011ce6:	22c9      	movs	r2, #201	; 0xc9
 8011ce8:	5c9a      	ldrb	r2, [r3, r2]
 8011cea:	193b      	adds	r3, r7, r4
 8011cec:	729a      	strb	r2, [r3, #10]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 8011cee:	232c      	movs	r3, #44	; 0x2c
 8011cf0:	18fb      	adds	r3, r7, r3
 8011cf2:	0018      	movs	r0, r3
 8011cf4:	f00a ff24 	bl	801cb40 <SysTimeGetMcuTime>
 8011cf8:	4b4d      	ldr	r3, [pc, #308]	; (8011e30 <ScheduleTx+0x1c0>)
 8011cfa:	4a4e      	ldr	r2, [pc, #312]	; (8011e34 <ScheduleTx+0x1c4>)
 8011cfc:	5898      	ldr	r0, [r3, r2]
 8011cfe:	193d      	adds	r5, r7, r4
 8011d00:	003e      	movs	r6, r7
 8011d02:	23ac      	movs	r3, #172	; 0xac
 8011d04:	0059      	lsls	r1, r3, #1
 8011d06:	232c      	movs	r3, #44	; 0x2c
 8011d08:	18fa      	adds	r2, r7, r3
 8011d0a:	2404      	movs	r4, #4
 8011d0c:	1843      	adds	r3, r0, r1
 8011d0e:	191c      	adds	r4, r3, r4
 8011d10:	466b      	mov	r3, sp
 8011d12:	6824      	ldr	r4, [r4, #0]
 8011d14:	601c      	str	r4, [r3, #0]
 8011d16:	5843      	ldr	r3, [r0, r1]
 8011d18:	6811      	ldr	r1, [r2, #0]
 8011d1a:	6852      	ldr	r2, [r2, #4]
 8011d1c:	0030      	movs	r0, r6
 8011d1e:	f00a fe41 	bl	801c9a4 <SysTimeSub>
 8011d22:	003a      	movs	r2, r7
 8011d24:	002b      	movs	r3, r5
 8011d26:	330c      	adds	r3, #12
 8011d28:	ca21      	ldmia	r2!, {r0, r5}
 8011d2a:	c321      	stmia	r3!, {r0, r5}
    nextChan.LastAggrTx = MacCtx.NvmCtx->LastTxDoneTime;
 8011d2c:	4b40      	ldr	r3, [pc, #256]	; (8011e30 <ScheduleTx+0x1c0>)
 8011d2e:	4a41      	ldr	r2, [pc, #260]	; (8011e34 <ScheduleTx+0x1c4>)
 8011d30:	589a      	ldr	r2, [r3, r2]
 8011d32:	23a8      	movs	r3, #168	; 0xa8
 8011d34:	005b      	lsls	r3, r3, #1
 8011d36:	58d2      	ldr	r2, [r2, r3]
 8011d38:	2114      	movs	r1, #20
 8011d3a:	187b      	adds	r3, r7, r1
 8011d3c:	605a      	str	r2, [r3, #4]
    nextChan.LastTxIsJoinRequest = false;
 8011d3e:	187b      	adds	r3, r7, r1
 8011d40:	2200      	movs	r2, #0
 8011d42:	751a      	strb	r2, [r3, #20]
    nextChan.Joined = true;
 8011d44:	187b      	adds	r3, r7, r1
 8011d46:	2201      	movs	r2, #1
 8011d48:	725a      	strb	r2, [r3, #9]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8011d4a:	4b39      	ldr	r3, [pc, #228]	; (8011e30 <ScheduleTx+0x1c0>)
 8011d4c:	881a      	ldrh	r2, [r3, #0]
 8011d4e:	187b      	adds	r3, r7, r1
 8011d50:	82da      	strh	r2, [r3, #22]

    // Setup the parameters based on the join status
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8011d52:	4b37      	ldr	r3, [pc, #220]	; (8011e30 <ScheduleTx+0x1c0>)
 8011d54:	4a37      	ldr	r2, [pc, #220]	; (8011e34 <ScheduleTx+0x1c4>)
 8011d56:	589a      	ldr	r2, [r3, r2]
 8011d58:	23b2      	movs	r3, #178	; 0xb2
 8011d5a:	005b      	lsls	r3, r3, #1
 8011d5c:	5cd3      	ldrb	r3, [r2, r3]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d105      	bne.n	8011d6e <ScheduleTx+0xfe>
    {
        nextChan.LastTxIsJoinRequest = true;
 8011d62:	187b      	adds	r3, r7, r1
 8011d64:	2201      	movs	r2, #1
 8011d66:	751a      	strb	r2, [r3, #20]
        nextChan.Joined = false;
 8011d68:	187b      	adds	r3, r7, r1
 8011d6a:	2200      	movs	r2, #0
 8011d6c:	725a      	strb	r2, [r3, #9]
    }

    // Select channel
    status = RegionNextChannel( MacCtx.NvmCtx->Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &MacCtx.NvmCtx->AggregatedTimeOff );
 8011d6e:	4b30      	ldr	r3, [pc, #192]	; (8011e30 <ScheduleTx+0x1c0>)
 8011d70:	4a30      	ldr	r2, [pc, #192]	; (8011e34 <ScheduleTx+0x1c4>)
 8011d72:	589b      	ldr	r3, [r3, r2]
 8011d74:	7818      	ldrb	r0, [r3, #0]
 8011d76:	4b2e      	ldr	r3, [pc, #184]	; (8011e30 <ScheduleTx+0x1c0>)
 8011d78:	4a2e      	ldr	r2, [pc, #184]	; (8011e34 <ScheduleTx+0x1c4>)
 8011d7a:	589b      	ldr	r3, [r3, r2]
 8011d7c:	3355      	adds	r3, #85	; 0x55
 8011d7e:	33ff      	adds	r3, #255	; 0xff
 8011d80:	2637      	movs	r6, #55	; 0x37
 8011d82:	19bc      	adds	r4, r7, r6
 8011d84:	4d2c      	ldr	r5, [pc, #176]	; (8011e38 <ScheduleTx+0x1c8>)
 8011d86:	4a2d      	ldr	r2, [pc, #180]	; (8011e3c <ScheduleTx+0x1cc>)
 8011d88:	2114      	movs	r1, #20
 8011d8a:	1879      	adds	r1, r7, r1
 8011d8c:	9300      	str	r3, [sp, #0]
 8011d8e:	002b      	movs	r3, r5
 8011d90:	f005 f920 	bl	8016fd4 <RegionNextChannel>
 8011d94:	0003      	movs	r3, r0
 8011d96:	7023      	strb	r3, [r4, #0]

    if( status != LORAMAC_STATUS_OK )
 8011d98:	19bb      	adds	r3, r7, r6
 8011d9a:	781b      	ldrb	r3, [r3, #0]
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d02c      	beq.n	8011dfa <ScheduleTx+0x18a>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 8011da0:	19bb      	adds	r3, r7, r6
 8011da2:	781b      	ldrb	r3, [r3, #0]
 8011da4:	2b0b      	cmp	r3, #11
 8011da6:	d124      	bne.n	8011df2 <ScheduleTx+0x182>
 8011da8:	230f      	movs	r3, #15
 8011daa:	18fb      	adds	r3, r7, r3
 8011dac:	781b      	ldrb	r3, [r3, #0]
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d01f      	beq.n	8011df2 <ScheduleTx+0x182>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 8011db2:	4a1f      	ldr	r2, [pc, #124]	; (8011e30 <ScheduleTx+0x1c0>)
 8011db4:	2391      	movs	r3, #145	; 0x91
 8011db6:	00db      	lsls	r3, r3, #3
 8011db8:	58d3      	ldr	r3, [r2, r3]
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d017      	beq.n	8011dee <ScheduleTx+0x17e>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8011dbe:	4a1c      	ldr	r2, [pc, #112]	; (8011e30 <ScheduleTx+0x1c0>)
 8011dc0:	23d0      	movs	r3, #208	; 0xd0
 8011dc2:	009b      	lsls	r3, r3, #2
 8011dc4:	58d3      	ldr	r3, [r2, r3]
 8011dc6:	2220      	movs	r2, #32
 8011dc8:	431a      	orrs	r2, r3
 8011dca:	0011      	movs	r1, r2
 8011dcc:	4a18      	ldr	r2, [pc, #96]	; (8011e30 <ScheduleTx+0x1c0>)
 8011dce:	23d0      	movs	r3, #208	; 0xd0
 8011dd0:	009b      	lsls	r3, r3, #2
 8011dd2:	50d1      	str	r1, [r2, r3]
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8011dd4:	4a16      	ldr	r2, [pc, #88]	; (8011e30 <ScheduleTx+0x1c0>)
 8011dd6:	2391      	movs	r3, #145	; 0x91
 8011dd8:	00db      	lsls	r3, r3, #3
 8011dda:	58d2      	ldr	r2, [r2, r3]
 8011ddc:	4b18      	ldr	r3, [pc, #96]	; (8011e40 <ScheduleTx+0x1d0>)
 8011dde:	0011      	movs	r1, r2
 8011de0:	0018      	movs	r0, r3
 8011de2:	f00b f805 	bl	801cdf0 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 8011de6:	4b16      	ldr	r3, [pc, #88]	; (8011e40 <ScheduleTx+0x1d0>)
 8011de8:	0018      	movs	r0, r3
 8011dea:	f00a ff11 	bl	801cc10 <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 8011dee:	2300      	movs	r3, #0
 8011df0:	e01a      	b.n	8011e28 <ScheduleTx+0x1b8>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8011df2:	2337      	movs	r3, #55	; 0x37
 8011df4:	18fb      	adds	r3, r7, r3
 8011df6:	781b      	ldrb	r3, [r3, #0]
 8011df8:	e016      	b.n	8011e28 <ScheduleTx+0x1b8>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 8011dfa:	f7ff fe2d 	bl	8011a58 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 8011dfe:	2537      	movs	r5, #55	; 0x37
 8011e00:	197c      	adds	r4, r7, r5
 8011e02:	f7ff febd 	bl	8011b80 <VerifyTxFrame>
 8011e06:	0003      	movs	r3, r0
 8011e08:	7023      	strb	r3, [r4, #0]
    if( status != LORAMAC_STATUS_OK )
 8011e0a:	002a      	movs	r2, r5
 8011e0c:	18bb      	adds	r3, r7, r2
 8011e0e:	781b      	ldrb	r3, [r3, #0]
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d002      	beq.n	8011e1a <ScheduleTx+0x1aa>
    {
        return status;
 8011e14:	18bb      	adds	r3, r7, r2
 8011e16:	781b      	ldrb	r3, [r3, #0]
 8011e18:	e006      	b.n	8011e28 <ScheduleTx+0x1b8>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8011e1a:	4b05      	ldr	r3, [pc, #20]	; (8011e30 <ScheduleTx+0x1c0>)
 8011e1c:	4a09      	ldr	r2, [pc, #36]	; (8011e44 <ScheduleTx+0x1d4>)
 8011e1e:	5c9b      	ldrb	r3, [r3, r2]
 8011e20:	0018      	movs	r0, r3
 8011e22:	f000 fb99 	bl	8012558 <SendFrameOnChannel>
 8011e26:	0003      	movs	r3, r0
}
 8011e28:	0018      	movs	r0, r3
 8011e2a:	46bd      	mov	sp, r7
 8011e2c:	b00f      	add	sp, #60	; 0x3c
 8011e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e30:	200005b8 	.word	0x200005b8
 8011e34:	00000484 	.word	0x00000484
 8011e38:	20000a40 	.word	0x20000a40
 8011e3c:	200009cd 	.word	0x200009cd
 8011e40:	20000920 	.word	0x20000920
 8011e44:	00000415 	.word	0x00000415

08011e48 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8011e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e4a:	b085      	sub	sp, #20
 8011e4c:	af00      	add	r7, sp, #0
 8011e4e:	0002      	movs	r2, r0
 8011e50:	1dfb      	adds	r3, r7, #7
 8011e52:	701a      	strb	r2, [r3, #0]
 8011e54:	1dbb      	adds	r3, r7, #6
 8011e56:	1c0a      	adds	r2, r1, #0
 8011e58:	701a      	strb	r2, [r3, #0]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8011e5a:	230f      	movs	r3, #15
 8011e5c:	18fb      	adds	r3, r7, r3
 8011e5e:	2213      	movs	r2, #19
 8011e60:	701a      	strb	r2, [r3, #0]
    uint32_t fCntUp = 0;
 8011e62:	2300      	movs	r3, #0
 8011e64:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 8011e66:	4a2c      	ldr	r2, [pc, #176]	; (8011f18 <SecureFrame+0xd0>)
 8011e68:	2382      	movs	r3, #130	; 0x82
 8011e6a:	005b      	lsls	r3, r3, #1
 8011e6c:	5cd3      	ldrb	r3, [r2, r3]
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d002      	beq.n	8011e78 <SecureFrame+0x30>
 8011e72:	2b04      	cmp	r3, #4
 8011e74:	d016      	beq.n	8011ea4 <SecureFrame+0x5c>
 8011e76:	e047      	b.n	8011f08 <SecureFrame+0xc0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8011e78:	250f      	movs	r5, #15
 8011e7a:	197c      	adds	r4, r7, r5
 8011e7c:	4b27      	ldr	r3, [pc, #156]	; (8011f1c <SecureFrame+0xd4>)
 8011e7e:	0018      	movs	r0, r3
 8011e80:	f004 f86a 	bl	8015f58 <LoRaMacCryptoPrepareJoinRequest>
 8011e84:	0003      	movs	r3, r0
 8011e86:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8011e88:	197b      	adds	r3, r7, r5
 8011e8a:	781b      	ldrb	r3, [r3, #0]
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d001      	beq.n	8011e94 <SecureFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011e90:	2311      	movs	r3, #17
 8011e92:	e03c      	b.n	8011f0e <SecureFrame+0xc6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8011e94:	4a20      	ldr	r2, [pc, #128]	; (8011f18 <SecureFrame+0xd0>)
 8011e96:	2386      	movs	r3, #134	; 0x86
 8011e98:	005b      	lsls	r3, r3, #1
 8011e9a:	5cd3      	ldrb	r3, [r2, r3]
 8011e9c:	b29a      	uxth	r2, r3
 8011e9e:	4b1e      	ldr	r3, [pc, #120]	; (8011f18 <SecureFrame+0xd0>)
 8011ea0:	801a      	strh	r2, [r3, #0]
            break;
 8011ea2:	e033      	b.n	8011f0c <SecureFrame+0xc4>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8011ea4:	2308      	movs	r3, #8
 8011ea6:	18fb      	adds	r3, r7, r3
 8011ea8:	0018      	movs	r0, r3
 8011eaa:	f003 ff67 	bl	8015d7c <LoRaMacCryptoGetFCntUp>
 8011eae:	1e03      	subs	r3, r0, #0
 8011eb0:	d001      	beq.n	8011eb6 <SecureFrame+0x6e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8011eb2:	2312      	movs	r3, #18
 8011eb4:	e02b      	b.n	8011f0e <SecureFrame+0xc6>
            }

            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 8011eb6:	4a18      	ldr	r2, [pc, #96]	; (8011f18 <SecureFrame+0xd0>)
 8011eb8:	2382      	movs	r3, #130	; 0x82
 8011eba:	00db      	lsls	r3, r3, #3
 8011ebc:	5cd3      	ldrb	r3, [r2, r3]
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d104      	bne.n	8011ecc <SecureFrame+0x84>
 8011ec2:	4b15      	ldr	r3, [pc, #84]	; (8011f18 <SecureFrame+0xd0>)
 8011ec4:	4a16      	ldr	r2, [pc, #88]	; (8011f20 <SecureFrame+0xd8>)
 8011ec6:	5c9b      	ldrb	r3, [r3, r2]
 8011ec8:	2b01      	cmp	r3, #1
 8011eca:	d902      	bls.n	8011ed2 <SecureFrame+0x8a>
            {
                fCntUp -= 1;
 8011ecc:	68bb      	ldr	r3, [r7, #8]
 8011ece:	3b01      	subs	r3, #1
 8011ed0:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8011ed2:	68b8      	ldr	r0, [r7, #8]
 8011ed4:	260f      	movs	r6, #15
 8011ed6:	19bc      	adds	r4, r7, r6
 8011ed8:	4d10      	ldr	r5, [pc, #64]	; (8011f1c <SecureFrame+0xd4>)
 8011eda:	1dbb      	adds	r3, r7, #6
 8011edc:	781a      	ldrb	r2, [r3, #0]
 8011ede:	1dfb      	adds	r3, r7, #7
 8011ee0:	7819      	ldrb	r1, [r3, #0]
 8011ee2:	002b      	movs	r3, r5
 8011ee4:	f004 f942 	bl	801616c <LoRaMacCryptoSecureMessage>
 8011ee8:	0003      	movs	r3, r0
 8011eea:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8011eec:	19bb      	adds	r3, r7, r6
 8011eee:	781b      	ldrb	r3, [r3, #0]
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d001      	beq.n	8011ef8 <SecureFrame+0xb0>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011ef4:	2311      	movs	r3, #17
 8011ef6:	e00a      	b.n	8011f0e <SecureFrame+0xc6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8011ef8:	4a07      	ldr	r2, [pc, #28]	; (8011f18 <SecureFrame+0xd0>)
 8011efa:	2386      	movs	r3, #134	; 0x86
 8011efc:	005b      	lsls	r3, r3, #1
 8011efe:	5cd3      	ldrb	r3, [r2, r3]
 8011f00:	b29a      	uxth	r2, r3
 8011f02:	4b05      	ldr	r3, [pc, #20]	; (8011f18 <SecureFrame+0xd0>)
 8011f04:	801a      	strh	r2, [r3, #0]
            break;
 8011f06:	e001      	b.n	8011f0c <SecureFrame+0xc4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8011f08:	2303      	movs	r3, #3
 8011f0a:	e000      	b.n	8011f0e <SecureFrame+0xc6>
    }
    return LORAMAC_STATUS_OK;
 8011f0c:	2300      	movs	r3, #0
}
 8011f0e:	0018      	movs	r0, r3
 8011f10:	46bd      	mov	sp, r7
 8011f12:	b005      	add	sp, #20
 8011f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f16:	46c0      	nop			; (mov r8, r8)
 8011f18:	200005b8 	.word	0x200005b8
 8011f1c:	200006c0 	.word	0x200006c0
 8011f20:	00000412 	.word	0x00000412

08011f24 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8011f24:	b580      	push	{r7, lr}
 8011f26:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( MacCtx.NvmCtx->AggregatedTimeOff == 0 )
 8011f28:	4b0e      	ldr	r3, [pc, #56]	; (8011f64 <CalculateBackOff+0x40>)
 8011f2a:	4a0f      	ldr	r2, [pc, #60]	; (8011f68 <CalculateBackOff+0x44>)
 8011f2c:	589a      	ldr	r2, [r3, r2]
 8011f2e:	23aa      	movs	r3, #170	; 0xaa
 8011f30:	005b      	lsls	r3, r3, #1
 8011f32:	58d3      	ldr	r3, [r2, r3]
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d111      	bne.n	8011f5c <CalculateBackOff+0x38>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        MacCtx.NvmCtx->AggregatedTimeOff = ( MacCtx.TxTimeOnAir * MacCtx.NvmCtx->AggregatedDCycle - MacCtx.TxTimeOnAir );
 8011f38:	4b0a      	ldr	r3, [pc, #40]	; (8011f64 <CalculateBackOff+0x40>)
 8011f3a:	4a0b      	ldr	r2, [pc, #44]	; (8011f68 <CalculateBackOff+0x44>)
 8011f3c:	589a      	ldr	r2, [r3, r2]
 8011f3e:	23a6      	movs	r3, #166	; 0xa6
 8011f40:	005b      	lsls	r3, r3, #1
 8011f42:	5ad3      	ldrh	r3, [r2, r3]
 8011f44:	3b01      	subs	r3, #1
 8011f46:	4907      	ldr	r1, [pc, #28]	; (8011f64 <CalculateBackOff+0x40>)
 8011f48:	2283      	movs	r2, #131	; 0x83
 8011f4a:	00d2      	lsls	r2, r2, #3
 8011f4c:	5889      	ldr	r1, [r1, r2]
 8011f4e:	4a05      	ldr	r2, [pc, #20]	; (8011f64 <CalculateBackOff+0x40>)
 8011f50:	4805      	ldr	r0, [pc, #20]	; (8011f68 <CalculateBackOff+0x44>)
 8011f52:	5812      	ldr	r2, [r2, r0]
 8011f54:	4359      	muls	r1, r3
 8011f56:	23aa      	movs	r3, #170	; 0xaa
 8011f58:	005b      	lsls	r3, r3, #1
 8011f5a:	50d1      	str	r1, [r2, r3]
    }
}
 8011f5c:	46c0      	nop			; (mov r8, r8)
 8011f5e:	46bd      	mov	sp, r7
 8011f60:	bd80      	pop	{r7, pc}
 8011f62:	46c0      	nop			; (mov r8, r8)
 8011f64:	200005b8 	.word	0x200005b8
 8011f68:	00000484 	.word	0x00000484

08011f6c <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8011f6c:	b580      	push	{r7, lr}
 8011f6e:	b082      	sub	sp, #8
 8011f70:	af00      	add	r7, sp, #0
 8011f72:	1d3b      	adds	r3, r7, #4
 8011f74:	7019      	strb	r1, [r3, #0]
 8011f76:	0011      	movs	r1, r2
 8011f78:	1dfb      	adds	r3, r7, #7
 8011f7a:	1c02      	adds	r2, r0, #0
 8011f7c:	701a      	strb	r2, [r3, #0]
 8011f7e:	1dbb      	adds	r3, r7, #6
 8011f80:	1c0a      	adds	r2, r1, #0
 8011f82:	701a      	strb	r2, [r3, #0]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8011f84:	1dfb      	adds	r3, r7, #7
 8011f86:	781b      	ldrb	r3, [r3, #0]
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d003      	beq.n	8011f94 <RemoveMacCommands+0x28>
 8011f8c:	1dfb      	adds	r3, r7, #7
 8011f8e:	781b      	ldrb	r3, [r3, #0]
 8011f90:	2b01      	cmp	r3, #1
 8011f92:	d10f      	bne.n	8011fb4 <RemoveMacCommands+0x48>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 8011f94:	1dbb      	adds	r3, r7, #6
 8011f96:	781b      	ldrb	r3, [r3, #0]
 8011f98:	2b01      	cmp	r3, #1
 8011f9a:	d109      	bne.n	8011fb0 <RemoveMacCommands+0x44>
        {
            if( fCtrl.Bits.Ack == 1 )
 8011f9c:	1d3b      	adds	r3, r7, #4
 8011f9e:	781b      	ldrb	r3, [r3, #0]
 8011fa0:	2220      	movs	r2, #32
 8011fa2:	4013      	ands	r3, r2
 8011fa4:	b2db      	uxtb	r3, r3
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d004      	beq.n	8011fb4 <RemoveMacCommands+0x48>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8011faa:	f002 ff75 	bl	8014e98 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 8011fae:	e001      	b.n	8011fb4 <RemoveMacCommands+0x48>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8011fb0:	f002 ff72 	bl	8014e98 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8011fb4:	46c0      	nop			; (mov r8, r8)
 8011fb6:	46bd      	mov	sp, r7
 8011fb8:	b002      	add	sp, #8
 8011fba:	bd80      	pop	{r7, pc}

08011fbc <ResetMacParameters>:

static void ResetMacParameters( void )
{
 8011fbc:	b590      	push	{r4, r7, lr}
 8011fbe:	b083      	sub	sp, #12
 8011fc0:	af00      	add	r7, sp, #0
    MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
 8011fc2:	4b72      	ldr	r3, [pc, #456]	; (801218c <ResetMacParameters+0x1d0>)
 8011fc4:	4a72      	ldr	r2, [pc, #456]	; (8012190 <ResetMacParameters+0x1d4>)
 8011fc6:	589a      	ldr	r2, [r3, r2]
 8011fc8:	23b2      	movs	r3, #178	; 0xb2
 8011fca:	005b      	lsls	r3, r3, #1
 8011fcc:	2100      	movs	r1, #0
 8011fce:	54d1      	strb	r1, [r2, r3]

    // ADR counter
    MacCtx.NvmCtx->AdrAckCounter = 0;
 8011fd0:	4b6e      	ldr	r3, [pc, #440]	; (801218c <ResetMacParameters+0x1d0>)
 8011fd2:	4a6f      	ldr	r2, [pc, #444]	; (8012190 <ResetMacParameters+0x1d4>)
 8011fd4:	589b      	ldr	r3, [r3, r2]
 8011fd6:	2280      	movs	r2, #128	; 0x80
 8011fd8:	2100      	movs	r1, #0
 8011fda:	5099      	str	r1, [r3, r2]

    MacCtx.ChannelsNbTransCounter = 0;
 8011fdc:	4a6b      	ldr	r2, [pc, #428]	; (801218c <ResetMacParameters+0x1d0>)
 8011fde:	2382      	movs	r3, #130	; 0x82
 8011fe0:	00db      	lsls	r3, r3, #3
 8011fe2:	2100      	movs	r1, #0
 8011fe4:	54d1      	strb	r1, [r2, r3]
    MacCtx.AckTimeoutRetries = 1; //
 8011fe6:	4b69      	ldr	r3, [pc, #420]	; (801218c <ResetMacParameters+0x1d0>)
 8011fe8:	4a6a      	ldr	r2, [pc, #424]	; (8012194 <ResetMacParameters+0x1d8>)
 8011fea:	2101      	movs	r1, #1
 8011fec:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetriesCounter = 1; //
 8011fee:	4b67      	ldr	r3, [pc, #412]	; (801218c <ResetMacParameters+0x1d0>)
 8011ff0:	4a69      	ldr	r2, [pc, #420]	; (8012198 <ResetMacParameters+0x1dc>)
 8011ff2:	2101      	movs	r1, #1
 8011ff4:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetry = false;
 8011ff6:	4b65      	ldr	r3, [pc, #404]	; (801218c <ResetMacParameters+0x1d0>)
 8011ff8:	4a68      	ldr	r2, [pc, #416]	; (801219c <ResetMacParameters+0x1e0>)
 8011ffa:	2100      	movs	r1, #0
 8011ffc:	5499      	strb	r1, [r3, r2]

    MacCtx.NvmCtx->MaxDCycle = 0;
 8011ffe:	4b63      	ldr	r3, [pc, #396]	; (801218c <ResetMacParameters+0x1d0>)
 8012000:	4a63      	ldr	r2, [pc, #396]	; (8012190 <ResetMacParameters+0x1d4>)
 8012002:	589b      	ldr	r3, [r3, r2]
 8012004:	22c8      	movs	r2, #200	; 0xc8
 8012006:	2100      	movs	r1, #0
 8012008:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->AggregatedDCycle = 1;
 801200a:	4b60      	ldr	r3, [pc, #384]	; (801218c <ResetMacParameters+0x1d0>)
 801200c:	4a60      	ldr	r2, [pc, #384]	; (8012190 <ResetMacParameters+0x1d4>)
 801200e:	589a      	ldr	r2, [r3, r2]
 8012010:	23a6      	movs	r3, #166	; 0xa6
 8012012:	005b      	lsls	r3, r3, #1
 8012014:	2101      	movs	r1, #1
 8012016:	52d1      	strh	r1, [r2, r3]

    MacCtx.NvmCtx->MacParams.ChannelsTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 8012018:	4b5c      	ldr	r3, [pc, #368]	; (801218c <ResetMacParameters+0x1d0>)
 801201a:	4a5d      	ldr	r2, [pc, #372]	; (8012190 <ResetMacParameters+0x1d4>)
 801201c:	589a      	ldr	r2, [r3, r2]
 801201e:	4b5b      	ldr	r3, [pc, #364]	; (801218c <ResetMacParameters+0x1d0>)
 8012020:	495b      	ldr	r1, [pc, #364]	; (8012190 <ResetMacParameters+0x1d4>)
 8012022:	585b      	ldr	r3, [r3, r1]
 8012024:	2104      	movs	r1, #4
 8012026:	5651      	ldrsb	r1, [r2, r1]
 8012028:	2284      	movs	r2, #132	; 0x84
 801202a:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 801202c:	4b57      	ldr	r3, [pc, #348]	; (801218c <ResetMacParameters+0x1d0>)
 801202e:	4a58      	ldr	r2, [pc, #352]	; (8012190 <ResetMacParameters+0x1d4>)
 8012030:	589a      	ldr	r2, [r3, r2]
 8012032:	4b56      	ldr	r3, [pc, #344]	; (801218c <ResetMacParameters+0x1d0>)
 8012034:	4956      	ldr	r1, [pc, #344]	; (8012190 <ResetMacParameters+0x1d4>)
 8012036:	585b      	ldr	r3, [r3, r1]
 8012038:	2105      	movs	r1, #5
 801203a:	5651      	ldrsb	r1, [r2, r1]
 801203c:	2285      	movs	r2, #133	; 0x85
 801203e:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.Rx1DrOffset = MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset;
 8012040:	4b52      	ldr	r3, [pc, #328]	; (801218c <ResetMacParameters+0x1d0>)
 8012042:	4a53      	ldr	r2, [pc, #332]	; (8012190 <ResetMacParameters+0x1d4>)
 8012044:	589a      	ldr	r2, [r3, r2]
 8012046:	4b51      	ldr	r3, [pc, #324]	; (801218c <ResetMacParameters+0x1d0>)
 8012048:	4951      	ldr	r1, [pc, #324]	; (8012190 <ResetMacParameters+0x1d4>)
 801204a:	585b      	ldr	r3, [r3, r1]
 801204c:	2125      	movs	r1, #37	; 0x25
 801204e:	5c51      	ldrb	r1, [r2, r1]
 8012050:	22a5      	movs	r2, #165	; 0xa5
 8012052:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 8012054:	4b4d      	ldr	r3, [pc, #308]	; (801218c <ResetMacParameters+0x1d0>)
 8012056:	4a4e      	ldr	r2, [pc, #312]	; (8012190 <ResetMacParameters+0x1d4>)
 8012058:	589a      	ldr	r2, [r3, r2]
 801205a:	4b4c      	ldr	r3, [pc, #304]	; (801218c <ResetMacParameters+0x1d0>)
 801205c:	494c      	ldr	r1, [pc, #304]	; (8012190 <ResetMacParameters+0x1d4>)
 801205e:	585b      	ldr	r3, [r3, r1]
 8012060:	21a8      	movs	r1, #168	; 0xa8
 8012062:	185b      	adds	r3, r3, r1
 8012064:	3228      	adds	r2, #40	; 0x28
 8012066:	ca03      	ldmia	r2!, {r0, r1}
 8012068:	c303      	stmia	r3!, {r0, r1}
    MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 801206a:	4b48      	ldr	r3, [pc, #288]	; (801218c <ResetMacParameters+0x1d0>)
 801206c:	4a48      	ldr	r2, [pc, #288]	; (8012190 <ResetMacParameters+0x1d4>)
 801206e:	589a      	ldr	r2, [r3, r2]
 8012070:	4b46      	ldr	r3, [pc, #280]	; (801218c <ResetMacParameters+0x1d0>)
 8012072:	4947      	ldr	r1, [pc, #284]	; (8012190 <ResetMacParameters+0x1d4>)
 8012074:	585b      	ldr	r3, [r3, r1]
 8012076:	21b0      	movs	r1, #176	; 0xb0
 8012078:	185b      	adds	r3, r3, r1
 801207a:	3230      	adds	r2, #48	; 0x30
 801207c:	ca03      	ldmia	r2!, {r0, r1}
 801207e:	c303      	stmia	r3!, {r0, r1}
    MacCtx.NvmCtx->MacParams.UplinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime;
 8012080:	4b42      	ldr	r3, [pc, #264]	; (801218c <ResetMacParameters+0x1d0>)
 8012082:	4a43      	ldr	r2, [pc, #268]	; (8012190 <ResetMacParameters+0x1d4>)
 8012084:	589a      	ldr	r2, [r3, r2]
 8012086:	4b41      	ldr	r3, [pc, #260]	; (801218c <ResetMacParameters+0x1d0>)
 8012088:	4941      	ldr	r1, [pc, #260]	; (8012190 <ResetMacParameters+0x1d4>)
 801208a:	585b      	ldr	r3, [r3, r1]
 801208c:	2138      	movs	r1, #56	; 0x38
 801208e:	5c51      	ldrb	r1, [r2, r1]
 8012090:	22b8      	movs	r2, #184	; 0xb8
 8012092:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime;
 8012094:	4b3d      	ldr	r3, [pc, #244]	; (801218c <ResetMacParameters+0x1d0>)
 8012096:	4a3e      	ldr	r2, [pc, #248]	; (8012190 <ResetMacParameters+0x1d4>)
 8012098:	589a      	ldr	r2, [r3, r2]
 801209a:	4b3c      	ldr	r3, [pc, #240]	; (801218c <ResetMacParameters+0x1d0>)
 801209c:	493c      	ldr	r1, [pc, #240]	; (8012190 <ResetMacParameters+0x1d4>)
 801209e:	585b      	ldr	r3, [r3, r1]
 80120a0:	2139      	movs	r1, #57	; 0x39
 80120a2:	5c51      	ldrb	r1, [r2, r1]
 80120a4:	22b9      	movs	r2, #185	; 0xb9
 80120a6:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.MaxEirp = MacCtx.NvmCtx->MacParamsDefaults.MaxEirp;
 80120a8:	4b38      	ldr	r3, [pc, #224]	; (801218c <ResetMacParameters+0x1d0>)
 80120aa:	4a39      	ldr	r2, [pc, #228]	; (8012190 <ResetMacParameters+0x1d4>)
 80120ac:	589b      	ldr	r3, [r3, r2]
 80120ae:	4a37      	ldr	r2, [pc, #220]	; (801218c <ResetMacParameters+0x1d0>)
 80120b0:	4937      	ldr	r1, [pc, #220]	; (8012190 <ResetMacParameters+0x1d4>)
 80120b2:	5852      	ldr	r2, [r2, r1]
 80120b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80120b6:	21bc      	movs	r1, #188	; 0xbc
 80120b8:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.AntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 80120ba:	4b34      	ldr	r3, [pc, #208]	; (801218c <ResetMacParameters+0x1d0>)
 80120bc:	4a34      	ldr	r2, [pc, #208]	; (8012190 <ResetMacParameters+0x1d4>)
 80120be:	589b      	ldr	r3, [r3, r2]
 80120c0:	4a32      	ldr	r2, [pc, #200]	; (801218c <ResetMacParameters+0x1d0>)
 80120c2:	4933      	ldr	r1, [pc, #204]	; (8012190 <ResetMacParameters+0x1d4>)
 80120c4:	5852      	ldr	r2, [r2, r1]
 80120c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80120c8:	21c0      	movs	r1, #192	; 0xc0
 80120ca:	5053      	str	r3, [r2, r1]

    MacCtx.NodeAckRequested = false;
 80120cc:	4b2f      	ldr	r3, [pc, #188]	; (801218c <ResetMacParameters+0x1d0>)
 80120ce:	4a34      	ldr	r2, [pc, #208]	; (80121a0 <ResetMacParameters+0x1e4>)
 80120d0:	2100      	movs	r1, #0
 80120d2:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->SrvAckRequested = false;
 80120d4:	4b2d      	ldr	r3, [pc, #180]	; (801218c <ResetMacParameters+0x1d0>)
 80120d6:	4a2e      	ldr	r2, [pc, #184]	; (8012190 <ResetMacParameters+0x1d4>)
 80120d8:	589a      	ldr	r2, [r3, r2]
 80120da:	234c      	movs	r3, #76	; 0x4c
 80120dc:	33ff      	adds	r3, #255	; 0xff
 80120de:	2100      	movs	r1, #0
 80120e0:	54d1      	strb	r1, [r2, r3]

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 80120e2:	003b      	movs	r3, r7
 80120e4:	2201      	movs	r2, #1
 80120e6:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = NULL;
 80120e8:	003b      	movs	r3, r7
 80120ea:	2200      	movs	r2, #0
 80120ec:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 80120ee:	4b27      	ldr	r3, [pc, #156]	; (801218c <ResetMacParameters+0x1d0>)
 80120f0:	4a27      	ldr	r2, [pc, #156]	; (8012190 <ResetMacParameters+0x1d4>)
 80120f2:	589b      	ldr	r3, [r3, r2]
 80120f4:	781b      	ldrb	r3, [r3, #0]
 80120f6:	003a      	movs	r2, r7
 80120f8:	0011      	movs	r1, r2
 80120fa:	0018      	movs	r0, r3
 80120fc:	f004 fe05 	bl	8016d0a <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8012100:	4b22      	ldr	r3, [pc, #136]	; (801218c <ResetMacParameters+0x1d0>)
 8012102:	4a28      	ldr	r2, [pc, #160]	; (80121a4 <ResetMacParameters+0x1e8>)
 8012104:	2100      	movs	r1, #0
 8012106:	5499      	strb	r1, [r3, r2]

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8012108:	4b20      	ldr	r3, [pc, #128]	; (801218c <ResetMacParameters+0x1d0>)
 801210a:	4a26      	ldr	r2, [pc, #152]	; (80121a4 <ResetMacParameters+0x1e8>)
 801210c:	5c99      	ldrb	r1, [r3, r2]
 801210e:	4a1f      	ldr	r2, [pc, #124]	; (801218c <ResetMacParameters+0x1d0>)
 8012110:	23f3      	movs	r3, #243	; 0xf3
 8012112:	009b      	lsls	r3, r3, #2
 8012114:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 8012116:	4b1d      	ldr	r3, [pc, #116]	; (801218c <ResetMacParameters+0x1d0>)
 8012118:	4a1d      	ldr	r2, [pc, #116]	; (8012190 <ResetMacParameters+0x1d4>)
 801211a:	589b      	ldr	r3, [r3, r2]
 801211c:	22a8      	movs	r2, #168	; 0xa8
 801211e:	5899      	ldr	r1, [r3, r2]
 8012120:	4a1a      	ldr	r2, [pc, #104]	; (801218c <ResetMacParameters+0x1d0>)
 8012122:	23f4      	movs	r3, #244	; 0xf4
 8012124:	009b      	lsls	r3, r3, #2
 8012126:	50d1      	str	r1, [r2, r3]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8012128:	4b18      	ldr	r3, [pc, #96]	; (801218c <ResetMacParameters+0x1d0>)
 801212a:	4a19      	ldr	r2, [pc, #100]	; (8012190 <ResetMacParameters+0x1d4>)
 801212c:	589b      	ldr	r3, [r3, r2]
 801212e:	22b9      	movs	r2, #185	; 0xb9
 8012130:	5c99      	ldrb	r1, [r3, r2]
 8012132:	4a16      	ldr	r2, [pc, #88]	; (801218c <ResetMacParameters+0x1d0>)
 8012134:	23f7      	movs	r3, #247	; 0xf7
 8012136:	009b      	lsls	r3, r3, #2
 8012138:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 801213a:	4b14      	ldr	r3, [pc, #80]	; (801218c <ResetMacParameters+0x1d0>)
 801213c:	4a14      	ldr	r2, [pc, #80]	; (8012190 <ResetMacParameters+0x1d4>)
 801213e:	589b      	ldr	r3, [r3, r2]
 8012140:	22ca      	movs	r2, #202	; 0xca
 8012142:	5c99      	ldrb	r1, [r3, r2]
 8012144:	4b11      	ldr	r3, [pc, #68]	; (801218c <ResetMacParameters+0x1d0>)
 8012146:	4a18      	ldr	r2, [pc, #96]	; (80121a8 <ResetMacParameters+0x1ec>)
 8012148:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxContinuous = false;
 801214a:	4b10      	ldr	r3, [pc, #64]	; (801218c <ResetMacParameters+0x1d0>)
 801214c:	4a17      	ldr	r2, [pc, #92]	; (80121ac <ResetMacParameters+0x1f0>)
 801214e:	2100      	movs	r1, #0
 8012150:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8012152:	4b0e      	ldr	r3, [pc, #56]	; (801218c <ResetMacParameters+0x1d0>)
 8012154:	4a16      	ldr	r2, [pc, #88]	; (80121b0 <ResetMacParameters+0x1f4>)
 8012156:	2101      	movs	r1, #1
 8012158:	5499      	strb	r1, [r3, r2]

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 801215a:	480c      	ldr	r0, [pc, #48]	; (801218c <ResetMacParameters+0x1d0>)
 801215c:	23f8      	movs	r3, #248	; 0xf8
 801215e:	009b      	lsls	r3, r3, #2
 8012160:	490a      	ldr	r1, [pc, #40]	; (801218c <ResetMacParameters+0x1d0>)
 8012162:	22f3      	movs	r2, #243	; 0xf3
 8012164:	0092      	lsls	r2, r2, #2
 8012166:	18c3      	adds	r3, r0, r3
 8012168:	188a      	adds	r2, r1, r2
 801216a:	ca13      	ldmia	r2!, {r0, r1, r4}
 801216c:	c313      	stmia	r3!, {r0, r1, r4}
 801216e:	ca03      	ldmia	r2!, {r0, r1}
 8012170:	c303      	stmia	r3!, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8012172:	4b06      	ldr	r3, [pc, #24]	; (801218c <ResetMacParameters+0x1d0>)
 8012174:	4a0f      	ldr	r2, [pc, #60]	; (80121b4 <ResetMacParameters+0x1f8>)
 8012176:	2101      	movs	r1, #1
 8012178:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801217a:	4b04      	ldr	r3, [pc, #16]	; (801218c <ResetMacParameters+0x1d0>)
 801217c:	4a0e      	ldr	r2, [pc, #56]	; (80121b8 <ResetMacParameters+0x1fc>)
 801217e:	2102      	movs	r1, #2
 8012180:	5499      	strb	r1, [r3, r2]

}
 8012182:	46c0      	nop			; (mov r8, r8)
 8012184:	46bd      	mov	sp, r7
 8012186:	b003      	add	sp, #12
 8012188:	bd90      	pop	{r4, r7, pc}
 801218a:	46c0      	nop			; (mov r8, r8)
 801218c:	200005b8 	.word	0x200005b8
 8012190:	00000484 	.word	0x00000484
 8012194:	00000411 	.word	0x00000411
 8012198:	00000412 	.word	0x00000412
 801219c:	00000413 	.word	0x00000413
 80121a0:	00000414 	.word	0x00000414
 80121a4:	00000415 	.word	0x00000415
 80121a8:	000003dd 	.word	0x000003dd
 80121ac:	000003de 	.word	0x000003de
 80121b0:	000003df 	.word	0x000003df
 80121b4:	000003f2 	.word	0x000003f2
 80121b8:	000003f3 	.word	0x000003f3

080121bc <RxWindowSetup>:
 *
 * \param [IN] rxTimer  Window timer to be topped.
 * \param [IN] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 80121bc:	b580      	push	{r7, lr}
 80121be:	b082      	sub	sp, #8
 80121c0:	af00      	add	r7, sp, #0
 80121c2:	6078      	str	r0, [r7, #4]
 80121c4:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	0018      	movs	r0, r3
 80121ca:	f00a fd99 	bl	801cd00 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 80121ce:	4b10      	ldr	r3, [pc, #64]	; (8012210 <RxWindowSetup+0x54>)
 80121d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80121d2:	4798      	blx	r3

    if( RegionRxConfig( MacCtx.NvmCtx->Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80121d4:	4b0f      	ldr	r3, [pc, #60]	; (8012214 <RxWindowSetup+0x58>)
 80121d6:	4a10      	ldr	r2, [pc, #64]	; (8012218 <RxWindowSetup+0x5c>)
 80121d8:	589b      	ldr	r3, [r3, r2]
 80121da:	781b      	ldrb	r3, [r3, #0]
 80121dc:	4a0f      	ldr	r2, [pc, #60]	; (801221c <RxWindowSetup+0x60>)
 80121de:	6839      	ldr	r1, [r7, #0]
 80121e0:	0018      	movs	r0, r3
 80121e2:	f004 fe29 	bl	8016e38 <RegionRxConfig>
 80121e6:	1e03      	subs	r3, r0, #0
 80121e8:	d00e      	beq.n	8012208 <RxWindowSetup+0x4c>
    {
        Radio.Rx( MacCtx.NvmCtx->MacParams.MaxRxWindow );
 80121ea:	4b09      	ldr	r3, [pc, #36]	; (8012210 <RxWindowSetup+0x54>)
 80121ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80121ee:	4a09      	ldr	r2, [pc, #36]	; (8012214 <RxWindowSetup+0x58>)
 80121f0:	4909      	ldr	r1, [pc, #36]	; (8012218 <RxWindowSetup+0x5c>)
 80121f2:	5852      	ldr	r2, [r2, r1]
 80121f4:	2190      	movs	r1, #144	; 0x90
 80121f6:	5852      	ldr	r2, [r2, r1]
 80121f8:	0010      	movs	r0, r2
 80121fa:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 80121fc:	683b      	ldr	r3, [r7, #0]
 80121fe:	7cd9      	ldrb	r1, [r3, #19]
 8012200:	4a04      	ldr	r2, [pc, #16]	; (8012214 <RxWindowSetup+0x58>)
 8012202:	2390      	movs	r3, #144	; 0x90
 8012204:	00db      	lsls	r3, r3, #3
 8012206:	54d1      	strb	r1, [r2, r3]
    }
}
 8012208:	46c0      	nop			; (mov r8, r8)
 801220a:	46bd      	mov	sp, r7
 801220c:	b002      	add	sp, #8
 801220e:	bd80      	pop	{r7, pc}
 8012210:	0801fe28 	.word	0x0801fe28
 8012214:	200005b8 	.word	0x200005b8
 8012218:	00000484 	.word	0x00000484
 801221c:	200009d8 	.word	0x200009d8

08012220 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8012220:	b590      	push	{r4, r7, lr}
 8012222:	b083      	sub	sp, #12
 8012224:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8012226:	4b1d      	ldr	r3, [pc, #116]	; (801229c <OpenContinuousRxCWindow+0x7c>)
 8012228:	4a1d      	ldr	r2, [pc, #116]	; (80122a0 <OpenContinuousRxCWindow+0x80>)
 801222a:	589b      	ldr	r3, [r3, r2]
 801222c:	7818      	ldrb	r0, [r3, #0]
                                     MacCtx.NvmCtx->MacParams.RxCChannel.Datarate,
 801222e:	4b1b      	ldr	r3, [pc, #108]	; (801229c <OpenContinuousRxCWindow+0x7c>)
 8012230:	4a1b      	ldr	r2, [pc, #108]	; (80122a0 <OpenContinuousRxCWindow+0x80>)
 8012232:	589b      	ldr	r3, [r3, r2]
 8012234:	22b4      	movs	r2, #180	; 0xb4
 8012236:	5c9b      	ldrb	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8012238:	b259      	sxtb	r1, r3
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 801223a:	4b18      	ldr	r3, [pc, #96]	; (801229c <OpenContinuousRxCWindow+0x7c>)
 801223c:	4a18      	ldr	r2, [pc, #96]	; (80122a0 <OpenContinuousRxCWindow+0x80>)
 801223e:	589b      	ldr	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8012240:	228c      	movs	r2, #140	; 0x8c
 8012242:	5c9a      	ldrb	r2, [r3, r2]
                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 8012244:	4b15      	ldr	r3, [pc, #84]	; (801229c <OpenContinuousRxCWindow+0x7c>)
 8012246:	4c16      	ldr	r4, [pc, #88]	; (80122a0 <OpenContinuousRxCWindow+0x80>)
 8012248:	591b      	ldr	r3, [r3, r4]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 801224a:	2488      	movs	r4, #136	; 0x88
 801224c:	591c      	ldr	r4, [r3, r4]
 801224e:	4b15      	ldr	r3, [pc, #84]	; (80122a4 <OpenContinuousRxCWindow+0x84>)
 8012250:	9300      	str	r3, [sp, #0]
 8012252:	0023      	movs	r3, r4
 8012254:	f004 fdcc 	bl	8016df0 <RegionComputeRxWindowParameters>
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8012258:	4b10      	ldr	r3, [pc, #64]	; (801229c <OpenContinuousRxCWindow+0x7c>)
 801225a:	4a13      	ldr	r2, [pc, #76]	; (80122a8 <OpenContinuousRxCWindow+0x88>)
 801225c:	2102      	movs	r1, #2
 801225e:	5499      	strb	r1, [r3, r2]
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8012260:	4b0e      	ldr	r3, [pc, #56]	; (801229c <OpenContinuousRxCWindow+0x7c>)
 8012262:	4a12      	ldr	r2, [pc, #72]	; (80122ac <OpenContinuousRxCWindow+0x8c>)
 8012264:	2101      	movs	r1, #1
 8012266:	5499      	strb	r1, [r3, r2]

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8012268:	4b0c      	ldr	r3, [pc, #48]	; (801229c <OpenContinuousRxCWindow+0x7c>)
 801226a:	4a0d      	ldr	r2, [pc, #52]	; (80122a0 <OpenContinuousRxCWindow+0x80>)
 801226c:	589b      	ldr	r3, [r3, r2]
 801226e:	781b      	ldrb	r3, [r3, #0]
 8012270:	4a0f      	ldr	r2, [pc, #60]	; (80122b0 <OpenContinuousRxCWindow+0x90>)
 8012272:	490c      	ldr	r1, [pc, #48]	; (80122a4 <OpenContinuousRxCWindow+0x84>)
 8012274:	0018      	movs	r0, r3
 8012276:	f004 fddf 	bl	8016e38 <RegionRxConfig>
 801227a:	1e03      	subs	r3, r0, #0
 801227c:	d00a      	beq.n	8012294 <OpenContinuousRxCWindow+0x74>
    {
        Radio.Rx( 0 ); // Continuous mode
 801227e:	4b0d      	ldr	r3, [pc, #52]	; (80122b4 <OpenContinuousRxCWindow+0x94>)
 8012280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012282:	2000      	movs	r0, #0
 8012284:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8012286:	4b05      	ldr	r3, [pc, #20]	; (801229c <OpenContinuousRxCWindow+0x7c>)
 8012288:	4a07      	ldr	r2, [pc, #28]	; (80122a8 <OpenContinuousRxCWindow+0x88>)
 801228a:	5c99      	ldrb	r1, [r3, r2]
 801228c:	4a03      	ldr	r2, [pc, #12]	; (801229c <OpenContinuousRxCWindow+0x7c>)
 801228e:	2390      	movs	r3, #144	; 0x90
 8012290:	00db      	lsls	r3, r3, #3
 8012292:	54d1      	strb	r1, [r2, r3]
    }
}
 8012294:	46c0      	nop			; (mov r8, r8)
 8012296:	46bd      	mov	sp, r7
 8012298:	b001      	add	sp, #4
 801229a:	bd90      	pop	{r4, r7, pc}
 801229c:	200005b8 	.word	0x200005b8
 80122a0:	00000484 	.word	0x00000484
 80122a4:	20000998 	.word	0x20000998
 80122a8:	000003f3 	.word	0x000003f3
 80122ac:	000003f2 	.word	0x000003f2
 80122b0:	200009d8 	.word	0x200009d8
 80122b4:	0801fe28 	.word	0x0801fe28

080122b8 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 80122b8:	b590      	push	{r4, r7, lr}
 80122ba:	b089      	sub	sp, #36	; 0x24
 80122bc:	af00      	add	r7, sp, #0
 80122be:	60f8      	str	r0, [r7, #12]
 80122c0:	60b9      	str	r1, [r7, #8]
 80122c2:	603b      	str	r3, [r7, #0]
 80122c4:	1dfb      	adds	r3, r7, #7
 80122c6:	701a      	strb	r2, [r3, #0]
    MacCtx.PktBufferLen = 0;
 80122c8:	4b9a      	ldr	r3, [pc, #616]	; (8012534 <PrepareFrame+0x27c>)
 80122ca:	2200      	movs	r2, #0
 80122cc:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 80122ce:	4b99      	ldr	r3, [pc, #612]	; (8012534 <PrepareFrame+0x27c>)
 80122d0:	4a99      	ldr	r2, [pc, #612]	; (8012538 <PrepareFrame+0x280>)
 80122d2:	2100      	movs	r1, #0
 80122d4:	5499      	strb	r1, [r3, r2]
    uint32_t fCntUp = 0;
 80122d6:	2300      	movs	r3, #0
 80122d8:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 80122da:	2300      	movs	r3, #0
 80122dc:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 80122de:	231f      	movs	r3, #31
 80122e0:	18fb      	adds	r3, r7, r3
 80122e2:	2200      	movs	r2, #0
 80122e4:	701a      	strb	r2, [r3, #0]

    if( fBuffer == NULL )
 80122e6:	683b      	ldr	r3, [r7, #0]
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d103      	bne.n	80122f4 <PrepareFrame+0x3c>
    {
        fBufferSize = 0;
 80122ec:	2330      	movs	r3, #48	; 0x30
 80122ee:	18fb      	adds	r3, r7, r3
 80122f0:	2200      	movs	r2, #0
 80122f2:	801a      	strh	r2, [r3, #0]
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 80122f4:	2430      	movs	r4, #48	; 0x30
 80122f6:	193b      	adds	r3, r7, r4
 80122f8:	881a      	ldrh	r2, [r3, #0]
 80122fa:	6839      	ldr	r1, [r7, #0]
 80122fc:	4b8f      	ldr	r3, [pc, #572]	; (801253c <PrepareFrame+0x284>)
 80122fe:	0018      	movs	r0, r3
 8012300:	f007 f946 	bl	8019590 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8012304:	193b      	adds	r3, r7, r4
 8012306:	881b      	ldrh	r3, [r3, #0]
 8012308:	b2d9      	uxtb	r1, r3
 801230a:	4b8a      	ldr	r3, [pc, #552]	; (8012534 <PrepareFrame+0x27c>)
 801230c:	4a8c      	ldr	r2, [pc, #560]	; (8012540 <PrepareFrame+0x288>)
 801230e:	5499      	strb	r1, [r3, r2]
    MacCtx.PktBuffer[0] = macHdr->Value;
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	781a      	ldrb	r2, [r3, #0]
 8012314:	4b87      	ldr	r3, [pc, #540]	; (8012534 <PrepareFrame+0x27c>)
 8012316:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 8012318:	68fb      	ldr	r3, [r7, #12]
 801231a:	781b      	ldrb	r3, [r3, #0]
 801231c:	061b      	lsls	r3, r3, #24
 801231e:	0f5b      	lsrs	r3, r3, #29
 8012320:	b2db      	uxtb	r3, r3
 8012322:	2b07      	cmp	r3, #7
 8012324:	d100      	bne.n	8012328 <PrepareFrame+0x70>
 8012326:	e0e0      	b.n	80124ea <PrepareFrame+0x232>
 8012328:	dd00      	ble.n	801232c <PrepareFrame+0x74>
 801232a:	e0f8      	b.n	801251e <PrepareFrame+0x266>
 801232c:	2b02      	cmp	r3, #2
 801232e:	d006      	beq.n	801233e <PrepareFrame+0x86>
 8012330:	2b04      	cmp	r3, #4
 8012332:	d000      	beq.n	8012336 <PrepareFrame+0x7e>
 8012334:	e0f3      	b.n	801251e <PrepareFrame+0x266>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 8012336:	4b7f      	ldr	r3, [pc, #508]	; (8012534 <PrepareFrame+0x27c>)
 8012338:	4a7f      	ldr	r2, [pc, #508]	; (8012538 <PrepareFrame+0x280>)
 801233a:	2101      	movs	r1, #1
 801233c:	5499      	strb	r1, [r3, r2]
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 801233e:	4a7d      	ldr	r2, [pc, #500]	; (8012534 <PrepareFrame+0x27c>)
 8012340:	2382      	movs	r3, #130	; 0x82
 8012342:	005b      	lsls	r3, r3, #1
 8012344:	2104      	movs	r1, #4
 8012346:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8012348:	4a7a      	ldr	r2, [pc, #488]	; (8012534 <PrepareFrame+0x27c>)
 801234a:	2384      	movs	r3, #132	; 0x84
 801234c:	005b      	lsls	r3, r3, #1
 801234e:	497d      	ldr	r1, [pc, #500]	; (8012544 <PrepareFrame+0x28c>)
 8012350:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8012352:	4a78      	ldr	r2, [pc, #480]	; (8012534 <PrepareFrame+0x27c>)
 8012354:	2386      	movs	r3, #134	; 0x86
 8012356:	005b      	lsls	r3, r3, #1
 8012358:	21ff      	movs	r1, #255	; 0xff
 801235a:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 801235c:	68fb      	ldr	r3, [r7, #12]
 801235e:	7819      	ldrb	r1, [r3, #0]
 8012360:	4a74      	ldr	r2, [pc, #464]	; (8012534 <PrepareFrame+0x27c>)
 8012362:	230e      	movs	r3, #14
 8012364:	33ff      	adds	r3, #255	; 0xff
 8012366:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8012368:	4a72      	ldr	r2, [pc, #456]	; (8012534 <PrepareFrame+0x27c>)
 801236a:	1df9      	adds	r1, r7, #7
 801236c:	2394      	movs	r3, #148	; 0x94
 801236e:	005b      	lsls	r3, r3, #1
 8012370:	7809      	ldrb	r1, [r1, #0]
 8012372:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 8012374:	4b6f      	ldr	r3, [pc, #444]	; (8012534 <PrepareFrame+0x27c>)
 8012376:	4a74      	ldr	r2, [pc, #464]	; (8012548 <PrepareFrame+0x290>)
 8012378:	589b      	ldr	r3, [r3, r2]
 801237a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 801237c:	4a6d      	ldr	r2, [pc, #436]	; (8012534 <PrepareFrame+0x27c>)
 801237e:	2388      	movs	r3, #136	; 0x88
 8012380:	005b      	lsls	r3, r3, #1
 8012382:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8012384:	68bb      	ldr	r3, [r7, #8]
 8012386:	7819      	ldrb	r1, [r3, #0]
 8012388:	4a6a      	ldr	r2, [pc, #424]	; (8012534 <PrepareFrame+0x27c>)
 801238a:	238a      	movs	r3, #138	; 0x8a
 801238c:	005b      	lsls	r3, r3, #1
 801238e:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8012390:	4b68      	ldr	r3, [pc, #416]	; (8012534 <PrepareFrame+0x27c>)
 8012392:	4a6b      	ldr	r2, [pc, #428]	; (8012540 <PrepareFrame+0x288>)
 8012394:	5c99      	ldrb	r1, [r3, r2]
 8012396:	4a67      	ldr	r2, [pc, #412]	; (8012534 <PrepareFrame+0x27c>)
 8012398:	2398      	movs	r3, #152	; 0x98
 801239a:	005b      	lsls	r3, r3, #1
 801239c:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 801239e:	4a65      	ldr	r2, [pc, #404]	; (8012534 <PrepareFrame+0x27c>)
 80123a0:	2396      	movs	r3, #150	; 0x96
 80123a2:	005b      	lsls	r3, r3, #1
 80123a4:	4965      	ldr	r1, [pc, #404]	; (801253c <PrepareFrame+0x284>)
 80123a6:	50d1      	str	r1, [r2, r3]

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80123a8:	2318      	movs	r3, #24
 80123aa:	18fb      	adds	r3, r7, r3
 80123ac:	0018      	movs	r0, r3
 80123ae:	f003 fce5 	bl	8015d7c <LoRaMacCryptoGetFCntUp>
 80123b2:	1e03      	subs	r3, r0, #0
 80123b4:	d001      	beq.n	80123ba <PrepareFrame+0x102>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80123b6:	2312      	movs	r3, #18
 80123b8:	e0b7      	b.n	801252a <PrepareFrame+0x272>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 80123ba:	69bb      	ldr	r3, [r7, #24]
 80123bc:	b299      	uxth	r1, r3
 80123be:	4a5d      	ldr	r2, [pc, #372]	; (8012534 <PrepareFrame+0x27c>)
 80123c0:	238b      	movs	r3, #139	; 0x8b
 80123c2:	005b      	lsls	r3, r3, #1
 80123c4:	52d1      	strh	r1, [r2, r3]

            // Reset confirm parameters
            MacCtx.McpsConfirm.NbRetries = 0;
 80123c6:	4b5b      	ldr	r3, [pc, #364]	; (8012534 <PrepareFrame+0x27c>)
 80123c8:	4a60      	ldr	r2, [pc, #384]	; (801254c <PrepareFrame+0x294>)
 80123ca:	2100      	movs	r1, #0
 80123cc:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.AckReceived = false;
 80123ce:	4a59      	ldr	r2, [pc, #356]	; (8012534 <PrepareFrame+0x27c>)
 80123d0:	2388      	movs	r3, #136	; 0x88
 80123d2:	00db      	lsls	r3, r3, #3
 80123d4:	2100      	movs	r1, #0
 80123d6:	54d1      	strb	r1, [r2, r3]
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 80123d8:	69b9      	ldr	r1, [r7, #24]
 80123da:	4a56      	ldr	r2, [pc, #344]	; (8012534 <PrepareFrame+0x27c>)
 80123dc:	2389      	movs	r3, #137	; 0x89
 80123de:	00db      	lsls	r3, r3, #3
 80123e0:	50d1      	str	r1, [r2, r3]

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80123e2:	2314      	movs	r3, #20
 80123e4:	18fb      	adds	r3, r7, r3
 80123e6:	0018      	movs	r0, r3
 80123e8:	f002 fd7a 	bl	8014ee0 <LoRaMacCommandsGetSizeSerializedCmds>
 80123ec:	1e03      	subs	r3, r0, #0
 80123ee:	d001      	beq.n	80123f4 <PrepareFrame+0x13c>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80123f0:	2313      	movs	r3, #19
 80123f2:	e09a      	b.n	801252a <PrepareFrame+0x272>
            }

            if( macCmdsSize > 0 )
 80123f4:	697b      	ldr	r3, [r7, #20]
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d100      	bne.n	80123fc <PrepareFrame+0x144>
 80123fa:	e092      	b.n	8012522 <PrepareFrame+0x26a>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( MacCtx.NvmCtx->MacParams.ChannelsDatarate );
 80123fc:	4b4d      	ldr	r3, [pc, #308]	; (8012534 <PrepareFrame+0x27c>)
 80123fe:	4a52      	ldr	r2, [pc, #328]	; (8012548 <PrepareFrame+0x290>)
 8012400:	589b      	ldr	r3, [r3, r2]
 8012402:	2285      	movs	r2, #133	; 0x85
 8012404:	569b      	ldrsb	r3, [r3, r2]
 8012406:	221f      	movs	r2, #31
 8012408:	18bc      	adds	r4, r7, r2
 801240a:	0018      	movs	r0, r3
 801240c:	f7fe fb50 	bl	8010ab0 <GetMaxAppPayloadWithoutFOptsLength>
 8012410:	0003      	movs	r3, r0
 8012412:	7023      	strb	r3, [r4, #0]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8012414:	4b47      	ldr	r3, [pc, #284]	; (8012534 <PrepareFrame+0x27c>)
 8012416:	4a4a      	ldr	r2, [pc, #296]	; (8012540 <PrepareFrame+0x288>)
 8012418:	5c9b      	ldrb	r3, [r3, r2]
 801241a:	2b00      	cmp	r3, #0
 801241c:	d024      	beq.n	8012468 <PrepareFrame+0x1b0>
 801241e:	697b      	ldr	r3, [r7, #20]
 8012420:	2b0f      	cmp	r3, #15
 8012422:	d821      	bhi.n	8012468 <PrepareFrame+0x1b0>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8012424:	4a4a      	ldr	r2, [pc, #296]	; (8012550 <PrepareFrame+0x298>)
 8012426:	2314      	movs	r3, #20
 8012428:	18fb      	adds	r3, r7, r3
 801242a:	0019      	movs	r1, r3
 801242c:	200f      	movs	r0, #15
 801242e:	f002 fd6d 	bl	8014f0c <LoRaMacCommandsSerializeCmds>
 8012432:	1e03      	subs	r3, r0, #0
 8012434:	d001      	beq.n	801243a <PrepareFrame+0x182>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012436:	2313      	movs	r3, #19
 8012438:	e077      	b.n	801252a <PrepareFrame+0x272>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 801243a:	697b      	ldr	r3, [r7, #20]
 801243c:	1c1a      	adds	r2, r3, #0
 801243e:	230f      	movs	r3, #15
 8012440:	4013      	ands	r3, r2
 8012442:	b2da      	uxtb	r2, r3
 8012444:	68bb      	ldr	r3, [r7, #8]
 8012446:	210f      	movs	r1, #15
 8012448:	400a      	ands	r2, r1
 801244a:	0010      	movs	r0, r2
 801244c:	781a      	ldrb	r2, [r3, #0]
 801244e:	210f      	movs	r1, #15
 8012450:	438a      	bics	r2, r1
 8012452:	1c11      	adds	r1, r2, #0
 8012454:	1c02      	adds	r2, r0, #0
 8012456:	430a      	orrs	r2, r1
 8012458:	701a      	strb	r2, [r3, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 801245a:	68bb      	ldr	r3, [r7, #8]
 801245c:	7819      	ldrb	r1, [r3, #0]
 801245e:	4a35      	ldr	r2, [pc, #212]	; (8012534 <PrepareFrame+0x27c>)
 8012460:	238a      	movs	r3, #138	; 0x8a
 8012462:	005b      	lsls	r3, r3, #1
 8012464:	54d1      	strb	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 8012466:	e05c      	b.n	8012522 <PrepareFrame+0x26a>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8012468:	4b32      	ldr	r3, [pc, #200]	; (8012534 <PrepareFrame+0x27c>)
 801246a:	4a35      	ldr	r2, [pc, #212]	; (8012540 <PrepareFrame+0x288>)
 801246c:	5c9b      	ldrb	r3, [r3, r2]
 801246e:	2b00      	cmp	r3, #0
 8012470:	d015      	beq.n	801249e <PrepareFrame+0x1e6>
 8012472:	697b      	ldr	r3, [r7, #20]
 8012474:	2b0f      	cmp	r3, #15
 8012476:	d912      	bls.n	801249e <PrepareFrame+0x1e6>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8012478:	231f      	movs	r3, #31
 801247a:	18fb      	adds	r3, r7, r3
 801247c:	7818      	ldrb	r0, [r3, #0]
 801247e:	4b2d      	ldr	r3, [pc, #180]	; (8012534 <PrepareFrame+0x27c>)
 8012480:	4a31      	ldr	r2, [pc, #196]	; (8012548 <PrepareFrame+0x290>)
 8012482:	589b      	ldr	r3, [r3, r2]
 8012484:	33cb      	adds	r3, #203	; 0xcb
 8012486:	001a      	movs	r2, r3
 8012488:	2314      	movs	r3, #20
 801248a:	18fb      	adds	r3, r7, r3
 801248c:	0019      	movs	r1, r3
 801248e:	f002 fd3d 	bl	8014f0c <LoRaMacCommandsSerializeCmds>
 8012492:	1e03      	subs	r3, r0, #0
 8012494:	d001      	beq.n	801249a <PrepareFrame+0x1e2>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012496:	2313      	movs	r3, #19
 8012498:	e047      	b.n	801252a <PrepareFrame+0x272>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 801249a:	230a      	movs	r3, #10
 801249c:	e045      	b.n	801252a <PrepareFrame+0x272>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 801249e:	231f      	movs	r3, #31
 80124a0:	18fb      	adds	r3, r7, r3
 80124a2:	7818      	ldrb	r0, [r3, #0]
 80124a4:	4b23      	ldr	r3, [pc, #140]	; (8012534 <PrepareFrame+0x27c>)
 80124a6:	4a28      	ldr	r2, [pc, #160]	; (8012548 <PrepareFrame+0x290>)
 80124a8:	589b      	ldr	r3, [r3, r2]
 80124aa:	33cb      	adds	r3, #203	; 0xcb
 80124ac:	001a      	movs	r2, r3
 80124ae:	2314      	movs	r3, #20
 80124b0:	18fb      	adds	r3, r7, r3
 80124b2:	0019      	movs	r1, r3
 80124b4:	f002 fd2a 	bl	8014f0c <LoRaMacCommandsSerializeCmds>
 80124b8:	1e03      	subs	r3, r0, #0
 80124ba:	d001      	beq.n	80124c0 <PrepareFrame+0x208>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80124bc:	2313      	movs	r3, #19
 80124be:	e034      	b.n	801252a <PrepareFrame+0x272>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 80124c0:	4a1c      	ldr	r2, [pc, #112]	; (8012534 <PrepareFrame+0x27c>)
 80124c2:	2394      	movs	r3, #148	; 0x94
 80124c4:	005b      	lsls	r3, r3, #1
 80124c6:	2100      	movs	r1, #0
 80124c8:	54d1      	strb	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
 80124ca:	4b1a      	ldr	r3, [pc, #104]	; (8012534 <PrepareFrame+0x27c>)
 80124cc:	4a1e      	ldr	r2, [pc, #120]	; (8012548 <PrepareFrame+0x290>)
 80124ce:	589b      	ldr	r3, [r3, r2]
 80124d0:	33cb      	adds	r3, #203	; 0xcb
 80124d2:	0019      	movs	r1, r3
 80124d4:	4a17      	ldr	r2, [pc, #92]	; (8012534 <PrepareFrame+0x27c>)
 80124d6:	2396      	movs	r3, #150	; 0x96
 80124d8:	005b      	lsls	r3, r3, #1
 80124da:	50d1      	str	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 80124dc:	697b      	ldr	r3, [r7, #20]
 80124de:	b2d9      	uxtb	r1, r3
 80124e0:	4a14      	ldr	r2, [pc, #80]	; (8012534 <PrepareFrame+0x27c>)
 80124e2:	2398      	movs	r3, #152	; 0x98
 80124e4:	005b      	lsls	r3, r3, #1
 80124e6:	54d1      	strb	r1, [r2, r3]
            break;
 80124e8:	e01b      	b.n	8012522 <PrepareFrame+0x26a>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 80124ea:	683b      	ldr	r3, [r7, #0]
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d01a      	beq.n	8012526 <PrepareFrame+0x26e>
 80124f0:	4b10      	ldr	r3, [pc, #64]	; (8012534 <PrepareFrame+0x27c>)
 80124f2:	4a13      	ldr	r2, [pc, #76]	; (8012540 <PrepareFrame+0x288>)
 80124f4:	5c9b      	ldrb	r3, [r3, r2]
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d015      	beq.n	8012526 <PrepareFrame+0x26e>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 80124fa:	4816      	ldr	r0, [pc, #88]	; (8012554 <PrepareFrame+0x29c>)
 80124fc:	4b0d      	ldr	r3, [pc, #52]	; (8012534 <PrepareFrame+0x27c>)
 80124fe:	4a10      	ldr	r2, [pc, #64]	; (8012540 <PrepareFrame+0x288>)
 8012500:	5c9b      	ldrb	r3, [r3, r2]
 8012502:	b29a      	uxth	r2, r3
 8012504:	683b      	ldr	r3, [r7, #0]
 8012506:	0019      	movs	r1, r3
 8012508:	f007 f842 	bl	8019590 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 801250c:	4b09      	ldr	r3, [pc, #36]	; (8012534 <PrepareFrame+0x27c>)
 801250e:	4a0c      	ldr	r2, [pc, #48]	; (8012540 <PrepareFrame+0x288>)
 8012510:	5c9b      	ldrb	r3, [r3, r2]
 8012512:	b29b      	uxth	r3, r3
 8012514:	3301      	adds	r3, #1
 8012516:	b29a      	uxth	r2, r3
 8012518:	4b06      	ldr	r3, [pc, #24]	; (8012534 <PrepareFrame+0x27c>)
 801251a:	801a      	strh	r2, [r3, #0]
            }
            break;
 801251c:	e003      	b.n	8012526 <PrepareFrame+0x26e>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 801251e:	2302      	movs	r3, #2
 8012520:	e003      	b.n	801252a <PrepareFrame+0x272>
            break;
 8012522:	46c0      	nop			; (mov r8, r8)
 8012524:	e000      	b.n	8012528 <PrepareFrame+0x270>
            break;
 8012526:	46c0      	nop			; (mov r8, r8)
    }

    return LORAMAC_STATUS_OK;
 8012528:	2300      	movs	r3, #0
}
 801252a:	0018      	movs	r0, r3
 801252c:	46bd      	mov	sp, r7
 801252e:	b009      	add	sp, #36	; 0x24
 8012530:	bd90      	pop	{r4, r7, pc}
 8012532:	46c0      	nop			; (mov r8, r8)
 8012534:	200005b8 	.word	0x200005b8
 8012538:	00000414 	.word	0x00000414
 801253c:	200006f0 	.word	0x200006f0
 8012540:	00000237 	.word	0x00000237
 8012544:	200005ba 	.word	0x200005ba
 8012548:	00000484 	.word	0x00000484
 801254c:	00000441 	.word	0x00000441
 8012550:	200006d0 	.word	0x200006d0
 8012554:	200005bb 	.word	0x200005bb

08012558 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8012558:	b5b0      	push	{r4, r5, r7, lr}
 801255a:	b08a      	sub	sp, #40	; 0x28
 801255c:	af00      	add	r7, sp, #0
 801255e:	0002      	movs	r2, r0
 8012560:	1dfb      	adds	r3, r7, #7
 8012562:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012564:	2327      	movs	r3, #39	; 0x27
 8012566:	18fb      	adds	r3, r7, r3
 8012568:	2203      	movs	r2, #3
 801256a:	701a      	strb	r2, [r3, #0]
    TxConfigParams_t txConfig;
    int8_t txPower = 10;
 801256c:	240f      	movs	r4, #15
 801256e:	193b      	adds	r3, r7, r4
 8012570:	220a      	movs	r2, #10
 8012572:	701a      	strb	r2, [r3, #0]

    txConfig.Channel = channel;
 8012574:	2110      	movs	r1, #16
 8012576:	187b      	adds	r3, r7, r1
 8012578:	1dfa      	adds	r2, r7, #7
 801257a:	7812      	ldrb	r2, [r2, #0]
 801257c:	701a      	strb	r2, [r3, #0]
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 801257e:	4b57      	ldr	r3, [pc, #348]	; (80126dc <SendFrameOnChannel+0x184>)
 8012580:	4a57      	ldr	r2, [pc, #348]	; (80126e0 <SendFrameOnChannel+0x188>)
 8012582:	589b      	ldr	r3, [r3, r2]
 8012584:	2285      	movs	r2, #133	; 0x85
 8012586:	569a      	ldrsb	r2, [r3, r2]
 8012588:	187b      	adds	r3, r7, r1
 801258a:	705a      	strb	r2, [r3, #1]
    txConfig.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 801258c:	4b53      	ldr	r3, [pc, #332]	; (80126dc <SendFrameOnChannel+0x184>)
 801258e:	4a54      	ldr	r2, [pc, #336]	; (80126e0 <SendFrameOnChannel+0x188>)
 8012590:	589b      	ldr	r3, [r3, r2]
 8012592:	2284      	movs	r2, #132	; 0x84
 8012594:	569a      	ldrsb	r2, [r3, r2]
 8012596:	187b      	adds	r3, r7, r1
 8012598:	709a      	strb	r2, [r3, #2]
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 801259a:	4b50      	ldr	r3, [pc, #320]	; (80126dc <SendFrameOnChannel+0x184>)
 801259c:	4a50      	ldr	r2, [pc, #320]	; (80126e0 <SendFrameOnChannel+0x188>)
 801259e:	589b      	ldr	r3, [r3, r2]
 80125a0:	22bc      	movs	r2, #188	; 0xbc
 80125a2:	589a      	ldr	r2, [r3, r2]
 80125a4:	187b      	adds	r3, r7, r1
 80125a6:	605a      	str	r2, [r3, #4]
    txConfig.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 80125a8:	4b4c      	ldr	r3, [pc, #304]	; (80126dc <SendFrameOnChannel+0x184>)
 80125aa:	4a4d      	ldr	r2, [pc, #308]	; (80126e0 <SendFrameOnChannel+0x188>)
 80125ac:	589b      	ldr	r3, [r3, r2]
 80125ae:	22c0      	movs	r2, #192	; 0xc0
 80125b0:	589a      	ldr	r2, [r3, r2]
 80125b2:	187b      	adds	r3, r7, r1
 80125b4:	609a      	str	r2, [r3, #8]
    txConfig.PktLen = MacCtx.PktBufferLen;
 80125b6:	4b49      	ldr	r3, [pc, #292]	; (80126dc <SendFrameOnChannel+0x184>)
 80125b8:	881a      	ldrh	r2, [r3, #0]
 80125ba:	187b      	adds	r3, r7, r1
 80125bc:	819a      	strh	r2, [r3, #12]

    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 80125be:	4b47      	ldr	r3, [pc, #284]	; (80126dc <SendFrameOnChannel+0x184>)
 80125c0:	4a47      	ldr	r2, [pc, #284]	; (80126e0 <SendFrameOnChannel+0x188>)
 80125c2:	589b      	ldr	r3, [r3, r2]
 80125c4:	7818      	ldrb	r0, [r3, #0]
 80125c6:	4b47      	ldr	r3, [pc, #284]	; (80126e4 <SendFrameOnChannel+0x18c>)
 80125c8:	193a      	adds	r2, r7, r4
 80125ca:	1879      	adds	r1, r7, r1
 80125cc:	f004 fc4e 	bl	8016e6c <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80125d0:	4b42      	ldr	r3, [pc, #264]	; (80126dc <SendFrameOnChannel+0x184>)
 80125d2:	4a45      	ldr	r2, [pc, #276]	; (80126e8 <SendFrameOnChannel+0x190>)
 80125d4:	2101      	movs	r1, #1
 80125d6:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 80125d8:	4b40      	ldr	r3, [pc, #256]	; (80126dc <SendFrameOnChannel+0x184>)
 80125da:	4a41      	ldr	r2, [pc, #260]	; (80126e0 <SendFrameOnChannel+0x188>)
 80125dc:	589b      	ldr	r3, [r3, r2]
 80125de:	2285      	movs	r2, #133	; 0x85
 80125e0:	569b      	ldrsb	r3, [r3, r2]
 80125e2:	b2d9      	uxtb	r1, r3
 80125e4:	4b3d      	ldr	r3, [pc, #244]	; (80126dc <SendFrameOnChannel+0x184>)
 80125e6:	4a41      	ldr	r2, [pc, #260]	; (80126ec <SendFrameOnChannel+0x194>)
 80125e8:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.TxPower = txPower;
 80125ea:	193b      	adds	r3, r7, r4
 80125ec:	2100      	movs	r1, #0
 80125ee:	5659      	ldrsb	r1, [r3, r1]
 80125f0:	4b3a      	ldr	r3, [pc, #232]	; (80126dc <SendFrameOnChannel+0x184>)
 80125f2:	4a3f      	ldr	r2, [pc, #252]	; (80126f0 <SendFrameOnChannel+0x198>)
 80125f4:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.Channel = channel;
 80125f6:	1dfb      	adds	r3, r7, #7
 80125f8:	781a      	ldrb	r2, [r3, #0]
 80125fa:	4b38      	ldr	r3, [pc, #224]	; (80126dc <SendFrameOnChannel+0x184>)
 80125fc:	493d      	ldr	r1, [pc, #244]	; (80126f4 <SendFrameOnChannel+0x19c>)
 80125fe:	505a      	str	r2, [r3, r1]

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8012600:	4a36      	ldr	r2, [pc, #216]	; (80126dc <SendFrameOnChannel+0x184>)
 8012602:	2383      	movs	r3, #131	; 0x83
 8012604:	00db      	lsls	r3, r3, #3
 8012606:	58d2      	ldr	r2, [r2, r3]
 8012608:	4b34      	ldr	r3, [pc, #208]	; (80126dc <SendFrameOnChannel+0x184>)
 801260a:	493b      	ldr	r1, [pc, #236]	; (80126f8 <SendFrameOnChannel+0x1a0>)
 801260c:	505a      	str	r2, [r3, r1]
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 801260e:	4a33      	ldr	r2, [pc, #204]	; (80126dc <SendFrameOnChannel+0x184>)
 8012610:	2383      	movs	r3, #131	; 0x83
 8012612:	00db      	lsls	r3, r3, #3
 8012614:	58d2      	ldr	r2, [r2, r3]
 8012616:	4b31      	ldr	r3, [pc, #196]	; (80126dc <SendFrameOnChannel+0x184>)
 8012618:	4938      	ldr	r1, [pc, #224]	; (80126fc <SendFrameOnChannel+0x1a4>)
 801261a:	505a      	str	r2, [r3, r1]

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 801261c:	f002 f9b0 	bl	8014980 <LoRaMacClassBIsBeaconModeActive>
 8012620:	1e03      	subs	r3, r0, #0
 8012622:	d00d      	beq.n	8012640 <SendFrameOnChannel+0xe8>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8012624:	4a2d      	ldr	r2, [pc, #180]	; (80126dc <SendFrameOnChannel+0x184>)
 8012626:	2383      	movs	r3, #131	; 0x83
 8012628:	00db      	lsls	r3, r3, #3
 801262a:	58d3      	ldr	r3, [r2, r3]
 801262c:	0018      	movs	r0, r3
 801262e:	f002 fa0b 	bl	8014a48 <LoRaMacClassBIsUplinkCollision>
 8012632:	0003      	movs	r3, r0
 8012634:	623b      	str	r3, [r7, #32]

        if( collisionTime > 0 )
 8012636:	6a3b      	ldr	r3, [r7, #32]
 8012638:	2b00      	cmp	r3, #0
 801263a:	d001      	beq.n	8012640 <SendFrameOnChannel+0xe8>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 801263c:	2310      	movs	r3, #16
 801263e:	e048      	b.n	80126d2 <SendFrameOnChannel+0x17a>
        }
    }

    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8012640:	4b26      	ldr	r3, [pc, #152]	; (80126dc <SendFrameOnChannel+0x184>)
 8012642:	4a27      	ldr	r2, [pc, #156]	; (80126e0 <SendFrameOnChannel+0x188>)
 8012644:	589b      	ldr	r3, [r3, r2]
 8012646:	227c      	movs	r2, #124	; 0x7c
 8012648:	5c9b      	ldrb	r3, [r3, r2]
 801264a:	2b01      	cmp	r3, #1
 801264c:	d101      	bne.n	8012652 <SendFrameOnChannel+0xfa>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 801264e:	f002 fa04 	bl	8014a5a <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 8012652:	f002 f9a5 	bl	80149a0 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.Channel );
 8012656:	4b21      	ldr	r3, [pc, #132]	; (80126dc <SendFrameOnChannel+0x184>)
 8012658:	4a21      	ldr	r2, [pc, #132]	; (80126e0 <SendFrameOnChannel+0x188>)
 801265a:	589b      	ldr	r3, [r3, r2]
 801265c:	2285      	movs	r2, #133	; 0x85
 801265e:	569b      	ldrsb	r3, [r3, r2]
 8012660:	b2da      	uxtb	r2, r3
 8012662:	4b1e      	ldr	r3, [pc, #120]	; (80126dc <SendFrameOnChannel+0x184>)
 8012664:	4926      	ldr	r1, [pc, #152]	; (8012700 <SendFrameOnChannel+0x1a8>)
 8012666:	5c5b      	ldrb	r3, [r3, r1]
 8012668:	2527      	movs	r5, #39	; 0x27
 801266a:	197c      	adds	r4, r7, r5
 801266c:	0019      	movs	r1, r3
 801266e:	0010      	movs	r0, r2
 8012670:	f7ff fbea 	bl	8011e48 <SecureFrame>
 8012674:	0003      	movs	r3, r0
 8012676:	7023      	strb	r3, [r4, #0]
    if( status != LORAMAC_STATUS_OK )
 8012678:	197b      	adds	r3, r7, r5
 801267a:	781b      	ldrb	r3, [r3, #0]
 801267c:	2b00      	cmp	r3, #0
 801267e:	d002      	beq.n	8012686 <SendFrameOnChannel+0x12e>
    {
        return status;
 8012680:	197b      	adds	r3, r7, r5
 8012682:	781b      	ldrb	r3, [r3, #0]
 8012684:	e025      	b.n	80126d2 <SendFrameOnChannel+0x17a>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8012686:	4a15      	ldr	r2, [pc, #84]	; (80126dc <SendFrameOnChannel+0x184>)
 8012688:	23d0      	movs	r3, #208	; 0xd0
 801268a:	009b      	lsls	r3, r3, #2
 801268c:	58d3      	ldr	r3, [r2, r3]
 801268e:	2202      	movs	r2, #2
 8012690:	431a      	orrs	r2, r3
 8012692:	0011      	movs	r1, r2
 8012694:	4a11      	ldr	r2, [pc, #68]	; (80126dc <SendFrameOnChannel+0x184>)
 8012696:	23d0      	movs	r3, #208	; 0xd0
 8012698:	009b      	lsls	r3, r3, #2
 801269a:	50d1      	str	r1, [r2, r3]
    if( MacCtx.NodeAckRequested == false )
 801269c:	4b0f      	ldr	r3, [pc, #60]	; (80126dc <SendFrameOnChannel+0x184>)
 801269e:	4a19      	ldr	r2, [pc, #100]	; (8012704 <SendFrameOnChannel+0x1ac>)
 80126a0:	5c9b      	ldrb	r3, [r3, r2]
 80126a2:	2201      	movs	r2, #1
 80126a4:	4053      	eors	r3, r2
 80126a6:	b2db      	uxtb	r3, r3
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d009      	beq.n	80126c0 <SendFrameOnChannel+0x168>
    {
        MacCtx.ChannelsNbTransCounter++;
 80126ac:	4a0b      	ldr	r2, [pc, #44]	; (80126dc <SendFrameOnChannel+0x184>)
 80126ae:	2382      	movs	r3, #130	; 0x82
 80126b0:	00db      	lsls	r3, r3, #3
 80126b2:	5cd3      	ldrb	r3, [r2, r3]
 80126b4:	3301      	adds	r3, #1
 80126b6:	b2d9      	uxtb	r1, r3
 80126b8:	4a08      	ldr	r2, [pc, #32]	; (80126dc <SendFrameOnChannel+0x184>)
 80126ba:	2382      	movs	r3, #130	; 0x82
 80126bc:	00db      	lsls	r3, r3, #3
 80126be:	54d1      	strb	r1, [r2, r3]
    }

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 80126c0:	4b11      	ldr	r3, [pc, #68]	; (8012708 <SendFrameOnChannel+0x1b0>)
 80126c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80126c4:	4a05      	ldr	r2, [pc, #20]	; (80126dc <SendFrameOnChannel+0x184>)
 80126c6:	8812      	ldrh	r2, [r2, #0]
 80126c8:	b2d1      	uxtb	r1, r2
 80126ca:	4a10      	ldr	r2, [pc, #64]	; (801270c <SendFrameOnChannel+0x1b4>)
 80126cc:	0010      	movs	r0, r2
 80126ce:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 80126d0:	2300      	movs	r3, #0
}
 80126d2:	0018      	movs	r0, r3
 80126d4:	46bd      	mov	sp, r7
 80126d6:	b00a      	add	sp, #40	; 0x28
 80126d8:	bdb0      	pop	{r4, r5, r7, pc}
 80126da:	46c0      	nop			; (mov r8, r8)
 80126dc:	200005b8 	.word	0x200005b8
 80126e0:	00000484 	.word	0x00000484
 80126e4:	200009d0 	.word	0x200009d0
 80126e8:	0000043d 	.word	0x0000043d
 80126ec:	0000043e 	.word	0x0000043e
 80126f0:	0000043f 	.word	0x0000043f
 80126f4:	0000044c 	.word	0x0000044c
 80126f8:	00000444 	.word	0x00000444
 80126fc:	00000454 	.word	0x00000454
 8012700:	00000415 	.word	0x00000415
 8012704:	00000414 	.word	0x00000414
 8012708:	0801fe28 	.word	0x0801fe28
 801270c:	200005ba 	.word	0x200005ba

08012710 <SetTxContinuousWave>:

static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 8012710:	b580      	push	{r7, lr}
 8012712:	b086      	sub	sp, #24
 8012714:	af00      	add	r7, sp, #0
 8012716:	0002      	movs	r2, r0
 8012718:	1dbb      	adds	r3, r7, #6
 801271a:	801a      	strh	r2, [r3, #0]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 801271c:	4b1f      	ldr	r3, [pc, #124]	; (801279c <SetTxContinuousWave+0x8c>)
 801271e:	4a20      	ldr	r2, [pc, #128]	; (80127a0 <SetTxContinuousWave+0x90>)
 8012720:	5c9a      	ldrb	r2, [r3, r2]
 8012722:	2108      	movs	r1, #8
 8012724:	187b      	adds	r3, r7, r1
 8012726:	701a      	strb	r2, [r3, #0]
    continuousWave.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8012728:	4b1c      	ldr	r3, [pc, #112]	; (801279c <SetTxContinuousWave+0x8c>)
 801272a:	4a1e      	ldr	r2, [pc, #120]	; (80127a4 <SetTxContinuousWave+0x94>)
 801272c:	589b      	ldr	r3, [r3, r2]
 801272e:	2285      	movs	r2, #133	; 0x85
 8012730:	569a      	ldrsb	r2, [r3, r2]
 8012732:	187b      	adds	r3, r7, r1
 8012734:	705a      	strb	r2, [r3, #1]
    continuousWave.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8012736:	4b19      	ldr	r3, [pc, #100]	; (801279c <SetTxContinuousWave+0x8c>)
 8012738:	4a1a      	ldr	r2, [pc, #104]	; (80127a4 <SetTxContinuousWave+0x94>)
 801273a:	589b      	ldr	r3, [r3, r2]
 801273c:	2284      	movs	r2, #132	; 0x84
 801273e:	569a      	ldrsb	r2, [r3, r2]
 8012740:	187b      	adds	r3, r7, r1
 8012742:	709a      	strb	r2, [r3, #2]
    continuousWave.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 8012744:	4b15      	ldr	r3, [pc, #84]	; (801279c <SetTxContinuousWave+0x8c>)
 8012746:	4a17      	ldr	r2, [pc, #92]	; (80127a4 <SetTxContinuousWave+0x94>)
 8012748:	589b      	ldr	r3, [r3, r2]
 801274a:	22bc      	movs	r2, #188	; 0xbc
 801274c:	589a      	ldr	r2, [r3, r2]
 801274e:	187b      	adds	r3, r7, r1
 8012750:	605a      	str	r2, [r3, #4]
    continuousWave.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 8012752:	4b12      	ldr	r3, [pc, #72]	; (801279c <SetTxContinuousWave+0x8c>)
 8012754:	4a13      	ldr	r2, [pc, #76]	; (80127a4 <SetTxContinuousWave+0x94>)
 8012756:	589b      	ldr	r3, [r3, r2]
 8012758:	22c0      	movs	r2, #192	; 0xc0
 801275a:	589a      	ldr	r2, [r3, r2]
 801275c:	187b      	adds	r3, r7, r1
 801275e:	609a      	str	r2, [r3, #8]
    continuousWave.Timeout = timeout;
 8012760:	187b      	adds	r3, r7, r1
 8012762:	1dba      	adds	r2, r7, #6
 8012764:	8812      	ldrh	r2, [r2, #0]
 8012766:	819a      	strh	r2, [r3, #12]

    RegionSetContinuousWave( MacCtx.NvmCtx->Region, &continuousWave );
 8012768:	4b0c      	ldr	r3, [pc, #48]	; (801279c <SetTxContinuousWave+0x8c>)
 801276a:	4a0e      	ldr	r2, [pc, #56]	; (80127a4 <SetTxContinuousWave+0x94>)
 801276c:	589b      	ldr	r3, [r3, r2]
 801276e:	781b      	ldrb	r3, [r3, #0]
 8012770:	187a      	adds	r2, r7, r1
 8012772:	0011      	movs	r1, r2
 8012774:	0018      	movs	r0, r3
 8012776:	f004 fc48 	bl	801700a <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 801277a:	4a08      	ldr	r2, [pc, #32]	; (801279c <SetTxContinuousWave+0x8c>)
 801277c:	23d0      	movs	r3, #208	; 0xd0
 801277e:	009b      	lsls	r3, r3, #2
 8012780:	58d3      	ldr	r3, [r2, r3]
 8012782:	2202      	movs	r2, #2
 8012784:	431a      	orrs	r2, r3
 8012786:	0011      	movs	r1, r2
 8012788:	4a04      	ldr	r2, [pc, #16]	; (801279c <SetTxContinuousWave+0x8c>)
 801278a:	23d0      	movs	r3, #208	; 0xd0
 801278c:	009b      	lsls	r3, r3, #2
 801278e:	50d1      	str	r1, [r2, r3]

    return LORAMAC_STATUS_OK;
 8012790:	2300      	movs	r3, #0
}
 8012792:	0018      	movs	r0, r3
 8012794:	46bd      	mov	sp, r7
 8012796:	b006      	add	sp, #24
 8012798:	bd80      	pop	{r7, pc}
 801279a:	46c0      	nop			; (mov r8, r8)
 801279c:	200005b8 	.word	0x200005b8
 80127a0:	00000415 	.word	0x00000415
 80127a4:	00000484 	.word	0x00000484

080127a8 <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 80127a8:	b580      	push	{r7, lr}
 80127aa:	b082      	sub	sp, #8
 80127ac:	af00      	add	r7, sp, #0
 80127ae:	6039      	str	r1, [r7, #0]
 80127b0:	0011      	movs	r1, r2
 80127b2:	1dbb      	adds	r3, r7, #6
 80127b4:	1c02      	adds	r2, r0, #0
 80127b6:	801a      	strh	r2, [r3, #0]
 80127b8:	1d7b      	adds	r3, r7, #5
 80127ba:	1c0a      	adds	r2, r1, #0
 80127bc:	701a      	strb	r2, [r3, #0]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 80127be:	4b0c      	ldr	r3, [pc, #48]	; (80127f0 <SetTxContinuousWave1+0x48>)
 80127c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80127c2:	1d7a      	adds	r2, r7, #5
 80127c4:	2100      	movs	r1, #0
 80127c6:	5651      	ldrsb	r1, [r2, r1]
 80127c8:	1dba      	adds	r2, r7, #6
 80127ca:	8812      	ldrh	r2, [r2, #0]
 80127cc:	6838      	ldr	r0, [r7, #0]
 80127ce:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80127d0:	4a08      	ldr	r2, [pc, #32]	; (80127f4 <SetTxContinuousWave1+0x4c>)
 80127d2:	23d0      	movs	r3, #208	; 0xd0
 80127d4:	009b      	lsls	r3, r3, #2
 80127d6:	58d3      	ldr	r3, [r2, r3]
 80127d8:	2202      	movs	r2, #2
 80127da:	431a      	orrs	r2, r3
 80127dc:	0011      	movs	r1, r2
 80127de:	4a05      	ldr	r2, [pc, #20]	; (80127f4 <SetTxContinuousWave1+0x4c>)
 80127e0:	23d0      	movs	r3, #208	; 0xd0
 80127e2:	009b      	lsls	r3, r3, #2
 80127e4:	50d1      	str	r1, [r2, r3]

    return LORAMAC_STATUS_OK;
 80127e6:	2300      	movs	r3, #0
}
 80127e8:	0018      	movs	r0, r3
 80127ea:	46bd      	mov	sp, r7
 80127ec:	b002      	add	sp, #8
 80127ee:	bd80      	pop	{r7, pc}
 80127f0:	0801fe28 	.word	0x0801fe28
 80127f4:	200005b8 	.word	0x200005b8

080127f8 <GetCtxs>:

static LoRaMacCtxs_t* GetCtxs( void )
{
 80127f8:	b580      	push	{r7, lr}
 80127fa:	b082      	sub	sp, #8
 80127fc:	af00      	add	r7, sp, #0
    Contexts.MacNvmCtx = &NvmMacCtx;
 80127fe:	4b20      	ldr	r3, [pc, #128]	; (8012880 <GetCtxs+0x88>)
 8012800:	4a20      	ldr	r2, [pc, #128]	; (8012884 <GetCtxs+0x8c>)
 8012802:	601a      	str	r2, [r3, #0]
    Contexts.MacNvmCtxSize = sizeof( NvmMacCtx );
 8012804:	4b1e      	ldr	r3, [pc, #120]	; (8012880 <GetCtxs+0x88>)
 8012806:	22b6      	movs	r2, #182	; 0xb6
 8012808:	0052      	lsls	r2, r2, #1
 801280a:	605a      	str	r2, [r3, #4]
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 801280c:	4b1e      	ldr	r3, [pc, #120]	; (8012888 <GetCtxs+0x90>)
 801280e:	0018      	movs	r0, r3
 8012810:	f003 faa6 	bl	8015d60 <LoRaMacCryptoGetNvmCtx>
 8012814:	0002      	movs	r2, r0
 8012816:	4b1a      	ldr	r3, [pc, #104]	; (8012880 <GetCtxs+0x88>)
 8012818:	611a      	str	r2, [r3, #16]
    GetNvmCtxParams_t params ={ 0 };
 801281a:	2300      	movs	r3, #0
 801281c:	607b      	str	r3, [r7, #4]
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 801281e:	4b1b      	ldr	r3, [pc, #108]	; (801288c <GetCtxs+0x94>)
 8012820:	4a1b      	ldr	r2, [pc, #108]	; (8012890 <GetCtxs+0x98>)
 8012822:	589b      	ldr	r3, [r3, r2]
 8012824:	781b      	ldrb	r3, [r3, #0]
 8012826:	1d3a      	adds	r2, r7, #4
 8012828:	0011      	movs	r1, r2
 801282a:	0018      	movs	r0, r3
 801282c:	f004 fa82 	bl	8016d34 <RegionGetNvmCtx>
 8012830:	0002      	movs	r2, r0
 8012832:	4b13      	ldr	r3, [pc, #76]	; (8012880 <GetCtxs+0x88>)
 8012834:	609a      	str	r2, [r3, #8]
    Contexts.RegionNvmCtxSize = params.nvmCtxSize;
 8012836:	687a      	ldr	r2, [r7, #4]
 8012838:	4b11      	ldr	r3, [pc, #68]	; (8012880 <GetCtxs+0x88>)
 801283a:	60da      	str	r2, [r3, #12]
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
 801283c:	4b15      	ldr	r3, [pc, #84]	; (8012894 <GetCtxs+0x9c>)
 801283e:	0018      	movs	r0, r3
 8012840:	f7fb f866 	bl	800d910 <SecureElementGetNvmCtx>
 8012844:	0002      	movs	r2, r0
 8012846:	4b0e      	ldr	r3, [pc, #56]	; (8012880 <GetCtxs+0x88>)
 8012848:	619a      	str	r2, [r3, #24]
    Contexts.CommandsNvmCtx = LoRaMacCommandsGetNvmCtx( &Contexts.CommandsNvmCtxSize );
 801284a:	4b13      	ldr	r3, [pc, #76]	; (8012898 <GetCtxs+0xa0>)
 801284c:	0018      	movs	r0, r3
 801284e:	f002 fa63 	bl	8014d18 <LoRaMacCommandsGetNvmCtx>
 8012852:	0002      	movs	r2, r0
 8012854:	4b0a      	ldr	r3, [pc, #40]	; (8012880 <GetCtxs+0x88>)
 8012856:	621a      	str	r2, [r3, #32]
    Contexts.ClassBNvmCtx = LoRaMacClassBGetNvmCtx( &Contexts.ClassBNvmCtxSize );
 8012858:	4b10      	ldr	r3, [pc, #64]	; (801289c <GetCtxs+0xa4>)
 801285a:	0018      	movs	r0, r3
 801285c:	f002 f82a 	bl	80148b4 <LoRaMacClassBGetNvmCtx>
 8012860:	0002      	movs	r2, r0
 8012862:	4b07      	ldr	r3, [pc, #28]	; (8012880 <GetCtxs+0x88>)
 8012864:	629a      	str	r2, [r3, #40]	; 0x28
    Contexts.ConfirmQueueNvmCtx = LoRaMacConfirmQueueGetNvmCtx( &Contexts.ConfirmQueueNvmCtxSize );
 8012866:	4b0e      	ldr	r3, [pc, #56]	; (80128a0 <GetCtxs+0xa8>)
 8012868:	0018      	movs	r0, r3
 801286a:	f002 fcf5 	bl	8015258 <LoRaMacConfirmQueueGetNvmCtx>
 801286e:	0002      	movs	r2, r0
 8012870:	4b03      	ldr	r3, [pc, #12]	; (8012880 <GetCtxs+0x88>)
 8012872:	631a      	str	r2, [r3, #48]	; 0x30
    return &Contexts;
 8012874:	4b02      	ldr	r3, [pc, #8]	; (8012880 <GetCtxs+0x88>)
}
 8012876:	0018      	movs	r0, r3
 8012878:	46bd      	mov	sp, r7
 801287a:	b002      	add	sp, #8
 801287c:	bd80      	pop	{r7, pc}
 801287e:	46c0      	nop			; (mov r8, r8)
 8012880:	20000bb0 	.word	0x20000bb0
 8012884:	20000a44 	.word	0x20000a44
 8012888:	20000bc4 	.word	0x20000bc4
 801288c:	200005b8 	.word	0x200005b8
 8012890:	00000484 	.word	0x00000484
 8012894:	20000bcc 	.word	0x20000bcc
 8012898:	20000bd4 	.word	0x20000bd4
 801289c:	20000bdc 	.word	0x20000bdc
 80128a0:	20000be4 	.word	0x20000be4

080128a4 <RestoreCtxs>:

static LoRaMacStatus_t RestoreCtxs( LoRaMacCtxs_t* contexts )
{
 80128a4:	b580      	push	{r7, lr}
 80128a6:	b084      	sub	sp, #16
 80128a8:	af00      	add	r7, sp, #0
 80128aa:	6078      	str	r0, [r7, #4]
    if( contexts == NULL )
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d101      	bne.n	80128b6 <RestoreCtxs+0x12>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80128b2:	2303      	movs	r3, #3
 80128b4:	e086      	b.n	80129c4 <RestoreCtxs+0x120>
    }
    if( MacCtx.MacState != LORAMAC_STOPPED )
 80128b6:	4a45      	ldr	r2, [pc, #276]	; (80129cc <RestoreCtxs+0x128>)
 80128b8:	23d0      	movs	r3, #208	; 0xd0
 80128ba:	009b      	lsls	r3, r3, #2
 80128bc:	58d3      	ldr	r3, [r2, r3]
 80128be:	2b01      	cmp	r3, #1
 80128c0:	d001      	beq.n	80128c6 <RestoreCtxs+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 80128c2:	2301      	movs	r3, #1
 80128c4:	e07e      	b.n	80129c4 <RestoreCtxs+0x120>
    }

    if( contexts->MacNvmCtx != NULL )
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d008      	beq.n	80128e0 <RestoreCtxs+0x3c>
    {
        memcpy1( ( uint8_t* ) &NvmMacCtx, ( uint8_t* ) contexts->MacNvmCtx, contexts->MacNvmCtxSize );
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	6819      	ldr	r1, [r3, #0]
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	685b      	ldr	r3, [r3, #4]
 80128d6:	b29a      	uxth	r2, r3
 80128d8:	4b3d      	ldr	r3, [pc, #244]	; (80129d0 <RestoreCtxs+0x12c>)
 80128da:	0018      	movs	r0, r3
 80128dc:	f006 fe58 	bl	8019590 <memcpy1>
    }

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESTORE_CTX;
 80128e0:	2108      	movs	r1, #8
 80128e2:	187b      	adds	r3, r7, r1
 80128e4:	2203      	movs	r2, #3
 80128e6:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = contexts->RegionNvmCtx;
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	689a      	ldr	r2, [r3, #8]
 80128ec:	187b      	adds	r3, r7, r1
 80128ee:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 80128f0:	4b36      	ldr	r3, [pc, #216]	; (80129cc <RestoreCtxs+0x128>)
 80128f2:	4a38      	ldr	r2, [pc, #224]	; (80129d4 <RestoreCtxs+0x130>)
 80128f4:	589b      	ldr	r3, [r3, r2]
 80128f6:	781b      	ldrb	r3, [r3, #0]
 80128f8:	187a      	adds	r2, r7, r1
 80128fa:	0011      	movs	r1, r2
 80128fc:	0018      	movs	r0, r3
 80128fe:	f004 fa04 	bl	8016d0a <RegionInitDefaults>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8012902:	4b32      	ldr	r3, [pc, #200]	; (80129cc <RestoreCtxs+0x128>)
 8012904:	4a34      	ldr	r2, [pc, #208]	; (80129d8 <RestoreCtxs+0x134>)
 8012906:	5c99      	ldrb	r1, [r3, r2]
 8012908:	4a30      	ldr	r2, [pc, #192]	; (80129cc <RestoreCtxs+0x128>)
 801290a:	23f8      	movs	r3, #248	; 0xf8
 801290c:	009b      	lsls	r3, r3, #2
 801290e:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindowCConfig.Frequency = MacCtx.NvmCtx->MacParams.RxCChannel.Frequency;
 8012910:	4b2e      	ldr	r3, [pc, #184]	; (80129cc <RestoreCtxs+0x128>)
 8012912:	4a30      	ldr	r2, [pc, #192]	; (80129d4 <RestoreCtxs+0x130>)
 8012914:	589b      	ldr	r3, [r3, r2]
 8012916:	22b0      	movs	r2, #176	; 0xb0
 8012918:	5899      	ldr	r1, [r3, r2]
 801291a:	4a2c      	ldr	r2, [pc, #176]	; (80129cc <RestoreCtxs+0x128>)
 801291c:	23f9      	movs	r3, #249	; 0xf9
 801291e:	009b      	lsls	r3, r3, #2
 8012920:	50d1      	str	r1, [r2, r3]
    MacCtx.RxWindowCConfig.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8012922:	4b2a      	ldr	r3, [pc, #168]	; (80129cc <RestoreCtxs+0x128>)
 8012924:	4a2b      	ldr	r2, [pc, #172]	; (80129d4 <RestoreCtxs+0x130>)
 8012926:	589b      	ldr	r3, [r3, r2]
 8012928:	22b9      	movs	r2, #185	; 0xb9
 801292a:	5c99      	ldrb	r1, [r3, r2]
 801292c:	4a27      	ldr	r2, [pc, #156]	; (80129cc <RestoreCtxs+0x128>)
 801292e:	23fc      	movs	r3, #252	; 0xfc
 8012930:	009b      	lsls	r3, r3, #2
 8012932:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindowCConfig.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8012934:	4b25      	ldr	r3, [pc, #148]	; (80129cc <RestoreCtxs+0x128>)
 8012936:	4a27      	ldr	r2, [pc, #156]	; (80129d4 <RestoreCtxs+0x130>)
 8012938:	589b      	ldr	r3, [r3, r2]
 801293a:	22ca      	movs	r2, #202	; 0xca
 801293c:	5c99      	ldrb	r1, [r3, r2]
 801293e:	4b23      	ldr	r3, [pc, #140]	; (80129cc <RestoreCtxs+0x128>)
 8012940:	4a26      	ldr	r2, [pc, #152]	; (80129dc <RestoreCtxs+0x138>)
 8012942:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8012944:	4b21      	ldr	r3, [pc, #132]	; (80129cc <RestoreCtxs+0x128>)
 8012946:	4a26      	ldr	r2, [pc, #152]	; (80129e0 <RestoreCtxs+0x13c>)
 8012948:	2101      	movs	r1, #1
 801294a:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801294c:	4b1f      	ldr	r3, [pc, #124]	; (80129cc <RestoreCtxs+0x128>)
 801294e:	4a25      	ldr	r2, [pc, #148]	; (80129e4 <RestoreCtxs+0x140>)
 8012950:	2102      	movs	r1, #2
 8012952:	5499      	strb	r1, [r3, r2]

    if( SecureElementRestoreNvmCtx( contexts->SecureElementNvmCtx ) != SECURE_ELEMENT_SUCCESS )
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	699b      	ldr	r3, [r3, #24]
 8012958:	0018      	movs	r0, r3
 801295a:	f7fa ffc3 	bl	800d8e4 <SecureElementRestoreNvmCtx>
 801295e:	1e03      	subs	r3, r0, #0
 8012960:	d001      	beq.n	8012966 <RestoreCtxs+0xc2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8012962:	2311      	movs	r3, #17
 8012964:	e02e      	b.n	80129c4 <RestoreCtxs+0x120>
    }

    if( LoRaMacCryptoRestoreNvmCtx( contexts->CryptoNvmCtx ) != LORAMAC_CRYPTO_SUCCESS )
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	691b      	ldr	r3, [r3, #16]
 801296a:	0018      	movs	r0, r3
 801296c:	f003 f9e2 	bl	8015d34 <LoRaMacCryptoRestoreNvmCtx>
 8012970:	1e03      	subs	r3, r0, #0
 8012972:	d001      	beq.n	8012978 <RestoreCtxs+0xd4>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8012974:	2311      	movs	r3, #17
 8012976:	e025      	b.n	80129c4 <RestoreCtxs+0x120>
    }

    if( LoRaMacCommandsRestoreNvmCtx( contexts->CommandsNvmCtx ) != LORAMAC_COMMANDS_SUCCESS )
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	6a1b      	ldr	r3, [r3, #32]
 801297c:	0018      	movs	r0, r3
 801297e:	f002 f9b5 	bl	8014cec <LoRaMacCommandsRestoreNvmCtx>
 8012982:	1e03      	subs	r3, r0, #0
 8012984:	d001      	beq.n	801298a <RestoreCtxs+0xe6>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012986:	2313      	movs	r3, #19
 8012988:	e01c      	b.n	80129c4 <RestoreCtxs+0x120>
    }

    if( LoRaMacClassBRestoreNvmCtx( contexts->ClassBNvmCtx ) != true )
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801298e:	0018      	movs	r0, r3
 8012990:	f001 ff87 	bl	80148a2 <LoRaMacClassBRestoreNvmCtx>
 8012994:	0003      	movs	r3, r0
 8012996:	001a      	movs	r2, r3
 8012998:	2301      	movs	r3, #1
 801299a:	4053      	eors	r3, r2
 801299c:	b2db      	uxtb	r3, r3
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d001      	beq.n	80129a6 <RestoreCtxs+0x102>
    {
        return LORAMAC_STATUS_CLASS_B_ERROR;
 80129a2:	2314      	movs	r3, #20
 80129a4:	e00e      	b.n	80129c4 <RestoreCtxs+0x120>
    }

    if( LoRaMacConfirmQueueRestoreNvmCtx( contexts->ConfirmQueueNvmCtx ) != true )
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80129aa:	0018      	movs	r0, r3
 80129ac:	f002 fc3e 	bl	801522c <LoRaMacConfirmQueueRestoreNvmCtx>
 80129b0:	0003      	movs	r3, r0
 80129b2:	001a      	movs	r2, r3
 80129b4:	2301      	movs	r3, #1
 80129b6:	4053      	eors	r3, r2
 80129b8:	b2db      	uxtb	r3, r3
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d001      	beq.n	80129c2 <RestoreCtxs+0x11e>
    {
        return LORAMAC_STATUS_CONFIRM_QUEUE_ERROR;
 80129be:	2315      	movs	r3, #21
 80129c0:	e000      	b.n	80129c4 <RestoreCtxs+0x120>
    }

    return LORAMAC_STATUS_OK;
 80129c2:	2300      	movs	r3, #0
}
 80129c4:	0018      	movs	r0, r3
 80129c6:	46bd      	mov	sp, r7
 80129c8:	b004      	add	sp, #16
 80129ca:	bd80      	pop	{r7, pc}
 80129cc:	200005b8 	.word	0x200005b8
 80129d0:	20000a44 	.word	0x20000a44
 80129d4:	00000484 	.word	0x00000484
 80129d8:	00000415 	.word	0x00000415
 80129dc:	000003f1 	.word	0x000003f1
 80129e0:	000003f2 	.word	0x000003f2
 80129e4:	000003f3 	.word	0x000003f3

080129e8 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 80129e8:	b580      	push	{r7, lr}
 80129ea:	b082      	sub	sp, #8
 80129ec:	af00      	add	r7, sp, #0
 80129ee:	6078      	str	r0, [r7, #4]
 80129f0:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d002      	beq.n	80129fe <DetermineFrameType+0x16>
 80129f8:	683b      	ldr	r3, [r7, #0]
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d101      	bne.n	8012a02 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80129fe:	2303      	movs	r3, #3
 8012a00:	e03b      	b.n	8012a7a <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	7b1b      	ldrb	r3, [r3, #12]
 8012a06:	220f      	movs	r2, #15
 8012a08:	4013      	ands	r3, r2
 8012a0a:	b2db      	uxtb	r3, r3
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d008      	beq.n	8012a22 <DetermineFrameType+0x3a>
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	2220      	movs	r2, #32
 8012a14:	5c9b      	ldrb	r3, [r3, r2]
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d003      	beq.n	8012a22 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 8012a1a:	683b      	ldr	r3, [r7, #0]
 8012a1c:	2200      	movs	r2, #0
 8012a1e:	701a      	strb	r2, [r3, #0]
 8012a20:	e02a      	b.n	8012a78 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	2228      	movs	r2, #40	; 0x28
 8012a26:	5c9b      	ldrb	r3, [r3, r2]
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d103      	bne.n	8012a34 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8012a2c:	683b      	ldr	r3, [r7, #0]
 8012a2e:	2201      	movs	r2, #1
 8012a30:	701a      	strb	r2, [r3, #0]
 8012a32:	e021      	b.n	8012a78 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	7b1b      	ldrb	r3, [r3, #12]
 8012a38:	220f      	movs	r2, #15
 8012a3a:	4013      	ands	r3, r2
 8012a3c:	b2db      	uxtb	r3, r3
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d108      	bne.n	8012a54 <DetermineFrameType+0x6c>
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	2220      	movs	r2, #32
 8012a46:	5c9b      	ldrb	r3, [r3, r2]
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d103      	bne.n	8012a54 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8012a4c:	683b      	ldr	r3, [r7, #0]
 8012a4e:	2202      	movs	r2, #2
 8012a50:	701a      	strb	r2, [r3, #0]
 8012a52:	e011      	b.n	8012a78 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	7b1b      	ldrb	r3, [r3, #12]
 8012a58:	220f      	movs	r2, #15
 8012a5a:	4013      	ands	r3, r2
 8012a5c:	b2db      	uxtb	r3, r3
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d108      	bne.n	8012a74 <DetermineFrameType+0x8c>
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	2220      	movs	r2, #32
 8012a66:	5c9b      	ldrb	r3, [r3, r2]
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d003      	beq.n	8012a74 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8012a6c:	683b      	ldr	r3, [r7, #0]
 8012a6e:	2203      	movs	r2, #3
 8012a70:	701a      	strb	r2, [r3, #0]
 8012a72:	e001      	b.n	8012a78 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8012a74:	2317      	movs	r3, #23
 8012a76:	e000      	b.n	8012a7a <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8012a78:	2300      	movs	r3, #0
}
 8012a7a:	0018      	movs	r0, r3
 8012a7c:	46bd      	mov	sp, r7
 8012a7e:	b002      	add	sp, #8
 8012a80:	bd80      	pop	{r7, pc}
	...

08012a84 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8012a84:	b580      	push	{r7, lr}
 8012a86:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 8012a88:	4a14      	ldr	r2, [pc, #80]	; (8012adc <CheckRetransUnconfirmedUplink+0x58>)
 8012a8a:	2382      	movs	r3, #130	; 0x82
 8012a8c:	00db      	lsls	r3, r3, #3
 8012a8e:	5cd2      	ldrb	r2, [r2, r3]
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
 8012a90:	4b12      	ldr	r3, [pc, #72]	; (8012adc <CheckRetransUnconfirmedUplink+0x58>)
 8012a92:	4913      	ldr	r1, [pc, #76]	; (8012ae0 <CheckRetransUnconfirmedUplink+0x5c>)
 8012a94:	585b      	ldr	r3, [r3, r1]
 8012a96:	21a4      	movs	r1, #164	; 0xa4
 8012a98:	5c5b      	ldrb	r3, [r3, r1]
    if( MacCtx.ChannelsNbTransCounter >=
 8012a9a:	429a      	cmp	r2, r3
 8012a9c:	d301      	bcc.n	8012aa2 <CheckRetransUnconfirmedUplink+0x1e>
    {
        return true;
 8012a9e:	2301      	movs	r3, #1
 8012aa0:	e018      	b.n	8012ad4 <CheckRetransUnconfirmedUplink+0x50>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8012aa2:	4b0e      	ldr	r3, [pc, #56]	; (8012adc <CheckRetransUnconfirmedUplink+0x58>)
 8012aa4:	4a0f      	ldr	r2, [pc, #60]	; (8012ae4 <CheckRetransUnconfirmedUplink+0x60>)
 8012aa6:	5c9b      	ldrb	r3, [r3, r2]
 8012aa8:	2202      	movs	r2, #2
 8012aaa:	4013      	ands	r3, r2
 8012aac:	b2db      	uxtb	r3, r3
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d00f      	beq.n	8012ad2 <CheckRetransUnconfirmedUplink+0x4e>
    {
        // For Class A stop in each case
        if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 8012ab2:	4b0a      	ldr	r3, [pc, #40]	; (8012adc <CheckRetransUnconfirmedUplink+0x58>)
 8012ab4:	4a0a      	ldr	r2, [pc, #40]	; (8012ae0 <CheckRetransUnconfirmedUplink+0x5c>)
 8012ab6:	589b      	ldr	r3, [r3, r2]
 8012ab8:	227c      	movs	r2, #124	; 0x7c
 8012aba:	5c9b      	ldrb	r3, [r3, r2]
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	d101      	bne.n	8012ac4 <CheckRetransUnconfirmedUplink+0x40>
        {
            return true;
 8012ac0:	2301      	movs	r3, #1
 8012ac2:	e007      	b.n	8012ad4 <CheckRetransUnconfirmedUplink+0x50>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 )
 8012ac4:	4b05      	ldr	r3, [pc, #20]	; (8012adc <CheckRetransUnconfirmedUplink+0x58>)
 8012ac6:	4a08      	ldr	r2, [pc, #32]	; (8012ae8 <CheckRetransUnconfirmedUplink+0x64>)
 8012ac8:	5c9b      	ldrb	r3, [r3, r2]
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d101      	bne.n	8012ad2 <CheckRetransUnconfirmedUplink+0x4e>
            {
                return true;
 8012ace:	2301      	movs	r3, #1
 8012ad0:	e000      	b.n	8012ad4 <CheckRetransUnconfirmedUplink+0x50>
            }
        }
    }
    return false;
 8012ad2:	2300      	movs	r3, #0
}
 8012ad4:	0018      	movs	r0, r3
 8012ad6:	46bd      	mov	sp, r7
 8012ad8:	bd80      	pop	{r7, pc}
 8012ada:	46c0      	nop			; (mov r8, r8)
 8012adc:	200005b8 	.word	0x200005b8
 8012ae0:	00000484 	.word	0x00000484
 8012ae4:	00000481 	.word	0x00000481
 8012ae8:	0000042d 	.word	0x0000042d

08012aec <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8012aec:	b580      	push	{r7, lr}
 8012aee:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 8012af0:	4b0e      	ldr	r3, [pc, #56]	; (8012b2c <CheckRetransConfirmedUplink+0x40>)
 8012af2:	4a0f      	ldr	r2, [pc, #60]	; (8012b30 <CheckRetransConfirmedUplink+0x44>)
 8012af4:	5c9a      	ldrb	r2, [r3, r2]
        MacCtx.AckTimeoutRetries )
 8012af6:	4b0d      	ldr	r3, [pc, #52]	; (8012b2c <CheckRetransConfirmedUplink+0x40>)
 8012af8:	490e      	ldr	r1, [pc, #56]	; (8012b34 <CheckRetransConfirmedUplink+0x48>)
 8012afa:	5c5b      	ldrb	r3, [r3, r1]
    if( MacCtx.AckTimeoutRetriesCounter >=
 8012afc:	429a      	cmp	r2, r3
 8012afe:	d301      	bcc.n	8012b04 <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 8012b00:	2301      	movs	r3, #1
 8012b02:	e010      	b.n	8012b26 <CheckRetransConfirmedUplink+0x3a>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8012b04:	4b09      	ldr	r3, [pc, #36]	; (8012b2c <CheckRetransConfirmedUplink+0x40>)
 8012b06:	4a0c      	ldr	r2, [pc, #48]	; (8012b38 <CheckRetransConfirmedUplink+0x4c>)
 8012b08:	5c9b      	ldrb	r3, [r3, r2]
 8012b0a:	2202      	movs	r2, #2
 8012b0c:	4013      	ands	r3, r2
 8012b0e:	b2db      	uxtb	r3, r3
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d007      	beq.n	8012b24 <CheckRetransConfirmedUplink+0x38>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8012b14:	4a05      	ldr	r2, [pc, #20]	; (8012b2c <CheckRetransConfirmedUplink+0x40>)
 8012b16:	2388      	movs	r3, #136	; 0x88
 8012b18:	00db      	lsls	r3, r3, #3
 8012b1a:	5cd3      	ldrb	r3, [r2, r3]
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d001      	beq.n	8012b24 <CheckRetransConfirmedUplink+0x38>
        {
            return true;
 8012b20:	2301      	movs	r3, #1
 8012b22:	e000      	b.n	8012b26 <CheckRetransConfirmedUplink+0x3a>
        }
    }
    return false;
 8012b24:	2300      	movs	r3, #0
}
 8012b26:	0018      	movs	r0, r3
 8012b28:	46bd      	mov	sp, r7
 8012b2a:	bd80      	pop	{r7, pc}
 8012b2c:	200005b8 	.word	0x200005b8
 8012b30:	00000412 	.word	0x00000412
 8012b34:	00000411 	.word	0x00000411
 8012b38:	00000481 	.word	0x00000481

08012b3c <StopRetransmission>:

static bool StopRetransmission( void )
{
 8012b3c:	b580      	push	{r7, lr}
 8012b3e:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8012b40:	4b1e      	ldr	r3, [pc, #120]	; (8012bbc <StopRetransmission+0x80>)
 8012b42:	4a1f      	ldr	r2, [pc, #124]	; (8012bc0 <StopRetransmission+0x84>)
 8012b44:	5c9b      	ldrb	r3, [r3, r2]
 8012b46:	2202      	movs	r2, #2
 8012b48:	4013      	ands	r3, r2
 8012b4a:	b2db      	uxtb	r3, r3
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d009      	beq.n	8012b64 <StopRetransmission+0x28>
        ( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
 8012b50:	4b1a      	ldr	r3, [pc, #104]	; (8012bbc <StopRetransmission+0x80>)
 8012b52:	4a1c      	ldr	r2, [pc, #112]	; (8012bc4 <StopRetransmission+0x88>)
 8012b54:	5c9b      	ldrb	r3, [r3, r2]
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d013      	beq.n	8012b82 <StopRetransmission+0x46>
          ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_2 ) ) )
 8012b5a:	4b18      	ldr	r3, [pc, #96]	; (8012bbc <StopRetransmission+0x80>)
 8012b5c:	4a19      	ldr	r2, [pc, #100]	; (8012bc4 <StopRetransmission+0x88>)
 8012b5e:	5c9b      	ldrb	r3, [r3, r2]
        ( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
 8012b60:	2b01      	cmp	r3, #1
 8012b62:	d00e      	beq.n	8012b82 <StopRetransmission+0x46>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( MacCtx.NvmCtx->AdrCtrlOn == true )
 8012b64:	4b15      	ldr	r3, [pc, #84]	; (8012bbc <StopRetransmission+0x80>)
 8012b66:	4a18      	ldr	r2, [pc, #96]	; (8012bc8 <StopRetransmission+0x8c>)
 8012b68:	589b      	ldr	r3, [r3, r2]
 8012b6a:	227e      	movs	r2, #126	; 0x7e
 8012b6c:	5c9b      	ldrb	r3, [r3, r2]
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d007      	beq.n	8012b82 <StopRetransmission+0x46>
        {
            MacCtx.NvmCtx->AdrAckCounter++;
 8012b72:	4b12      	ldr	r3, [pc, #72]	; (8012bbc <StopRetransmission+0x80>)
 8012b74:	4a14      	ldr	r2, [pc, #80]	; (8012bc8 <StopRetransmission+0x8c>)
 8012b76:	589b      	ldr	r3, [r3, r2]
 8012b78:	2280      	movs	r2, #128	; 0x80
 8012b7a:	589a      	ldr	r2, [r3, r2]
 8012b7c:	3201      	adds	r2, #1
 8012b7e:	2180      	movs	r1, #128	; 0x80
 8012b80:	505a      	str	r2, [r3, r1]
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8012b82:	4a0e      	ldr	r2, [pc, #56]	; (8012bbc <StopRetransmission+0x80>)
 8012b84:	2382      	movs	r3, #130	; 0x82
 8012b86:	00db      	lsls	r3, r3, #3
 8012b88:	2100      	movs	r1, #0
 8012b8a:	54d1      	strb	r1, [r2, r3]
    MacCtx.NodeAckRequested = false;
 8012b8c:	4b0b      	ldr	r3, [pc, #44]	; (8012bbc <StopRetransmission+0x80>)
 8012b8e:	4a0f      	ldr	r2, [pc, #60]	; (8012bcc <StopRetransmission+0x90>)
 8012b90:	2100      	movs	r1, #0
 8012b92:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetry = false;
 8012b94:	4b09      	ldr	r3, [pc, #36]	; (8012bbc <StopRetransmission+0x80>)
 8012b96:	4a0e      	ldr	r2, [pc, #56]	; (8012bd0 <StopRetransmission+0x94>)
 8012b98:	2100      	movs	r1, #0
 8012b9a:	5499      	strb	r1, [r3, r2]
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8012b9c:	4a07      	ldr	r2, [pc, #28]	; (8012bbc <StopRetransmission+0x80>)
 8012b9e:	23d0      	movs	r3, #208	; 0xd0
 8012ba0:	009b      	lsls	r3, r3, #2
 8012ba2:	58d3      	ldr	r3, [r2, r3]
 8012ba4:	2202      	movs	r2, #2
 8012ba6:	4393      	bics	r3, r2
 8012ba8:	0019      	movs	r1, r3
 8012baa:	4a04      	ldr	r2, [pc, #16]	; (8012bbc <StopRetransmission+0x80>)
 8012bac:	23d0      	movs	r3, #208	; 0xd0
 8012bae:	009b      	lsls	r3, r3, #2
 8012bb0:	50d1      	str	r1, [r2, r3]

    return true;
 8012bb2:	2301      	movs	r3, #1
}
 8012bb4:	0018      	movs	r0, r3
 8012bb6:	46bd      	mov	sp, r7
 8012bb8:	bd80      	pop	{r7, pc}
 8012bba:	46c0      	nop			; (mov r8, r8)
 8012bbc:	200005b8 	.word	0x200005b8
 8012bc0:	00000481 	.word	0x00000481
 8012bc4:	0000042d 	.word	0x0000042d
 8012bc8:	00000484 	.word	0x00000484
 8012bcc:	00000414 	.word	0x00000414
 8012bd0:	00000413 	.word	0x00000413

08012bd4 <AckTimeoutRetriesProcess>:

static void AckTimeoutRetriesProcess( void )
{
 8012bd4:	b580      	push	{r7, lr}
 8012bd6:	b084      	sub	sp, #16
 8012bd8:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 8012bda:	4b21      	ldr	r3, [pc, #132]	; (8012c60 <AckTimeoutRetriesProcess+0x8c>)
 8012bdc:	4a21      	ldr	r2, [pc, #132]	; (8012c64 <AckTimeoutRetriesProcess+0x90>)
 8012bde:	5c9a      	ldrb	r2, [r3, r2]
 8012be0:	4b1f      	ldr	r3, [pc, #124]	; (8012c60 <AckTimeoutRetriesProcess+0x8c>)
 8012be2:	4921      	ldr	r1, [pc, #132]	; (8012c68 <AckTimeoutRetriesProcess+0x94>)
 8012be4:	5c5b      	ldrb	r3, [r3, r1]
 8012be6:	429a      	cmp	r2, r3
 8012be8:	d236      	bcs.n	8012c58 <AckTimeoutRetriesProcess+0x84>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 8012bea:	4b1d      	ldr	r3, [pc, #116]	; (8012c60 <AckTimeoutRetriesProcess+0x8c>)
 8012bec:	4a1d      	ldr	r2, [pc, #116]	; (8012c64 <AckTimeoutRetriesProcess+0x90>)
 8012bee:	5c9b      	ldrb	r3, [r3, r2]
 8012bf0:	3301      	adds	r3, #1
 8012bf2:	b2d9      	uxtb	r1, r3
 8012bf4:	4b1a      	ldr	r3, [pc, #104]	; (8012c60 <AckTimeoutRetriesProcess+0x8c>)
 8012bf6:	4a1b      	ldr	r2, [pc, #108]	; (8012c64 <AckTimeoutRetriesProcess+0x90>)
 8012bf8:	5499      	strb	r1, [r3, r2]
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 8012bfa:	4b19      	ldr	r3, [pc, #100]	; (8012c60 <AckTimeoutRetriesProcess+0x8c>)
 8012bfc:	4a19      	ldr	r2, [pc, #100]	; (8012c64 <AckTimeoutRetriesProcess+0x90>)
 8012bfe:	5c9b      	ldrb	r3, [r3, r2]
 8012c00:	2201      	movs	r2, #1
 8012c02:	4013      	ands	r3, r2
 8012c04:	b2db      	uxtb	r3, r3
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d026      	beq.n	8012c58 <AckTimeoutRetriesProcess+0x84>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8012c0a:	2108      	movs	r1, #8
 8012c0c:	187b      	adds	r3, r7, r1
 8012c0e:	2222      	movs	r2, #34	; 0x22
 8012c10:	701a      	strb	r2, [r3, #0]
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8012c12:	4b13      	ldr	r3, [pc, #76]	; (8012c60 <AckTimeoutRetriesProcess+0x8c>)
 8012c14:	4a15      	ldr	r2, [pc, #84]	; (8012c6c <AckTimeoutRetriesProcess+0x98>)
 8012c16:	589b      	ldr	r3, [r3, r2]
 8012c18:	22b8      	movs	r2, #184	; 0xb8
 8012c1a:	5c9a      	ldrb	r2, [r3, r2]
 8012c1c:	187b      	adds	r3, r7, r1
 8012c1e:	709a      	strb	r2, [r3, #2]
            getPhy.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8012c20:	4b0f      	ldr	r3, [pc, #60]	; (8012c60 <AckTimeoutRetriesProcess+0x8c>)
 8012c22:	4a12      	ldr	r2, [pc, #72]	; (8012c6c <AckTimeoutRetriesProcess+0x98>)
 8012c24:	589b      	ldr	r3, [r3, r2]
 8012c26:	2285      	movs	r2, #133	; 0x85
 8012c28:	569a      	ldrsb	r2, [r3, r2]
 8012c2a:	187b      	adds	r3, r7, r1
 8012c2c:	705a      	strb	r2, [r3, #1]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012c2e:	4b0c      	ldr	r3, [pc, #48]	; (8012c60 <AckTimeoutRetriesProcess+0x8c>)
 8012c30:	4a0e      	ldr	r2, [pc, #56]	; (8012c6c <AckTimeoutRetriesProcess+0x98>)
 8012c32:	589b      	ldr	r3, [r3, r2]
 8012c34:	781b      	ldrb	r3, [r3, #0]
 8012c36:	187a      	adds	r2, r7, r1
 8012c38:	0011      	movs	r1, r2
 8012c3a:	0018      	movs	r0, r3
 8012c3c:	f004 f829 	bl	8016c92 <RegionGetPhyParam>
 8012c40:	0003      	movs	r3, r0
 8012c42:	001a      	movs	r2, r3
 8012c44:	1d3b      	adds	r3, r7, #4
 8012c46:	601a      	str	r2, [r3, #0]
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = phyParam.Value;
 8012c48:	1d3b      	adds	r3, r7, #4
 8012c4a:	6819      	ldr	r1, [r3, #0]
 8012c4c:	4b04      	ldr	r3, [pc, #16]	; (8012c60 <AckTimeoutRetriesProcess+0x8c>)
 8012c4e:	4a07      	ldr	r2, [pc, #28]	; (8012c6c <AckTimeoutRetriesProcess+0x98>)
 8012c50:	589b      	ldr	r3, [r3, r2]
 8012c52:	b249      	sxtb	r1, r1
 8012c54:	2285      	movs	r2, #133	; 0x85
 8012c56:	5499      	strb	r1, [r3, r2]
        }
    }
}
 8012c58:	46c0      	nop			; (mov r8, r8)
 8012c5a:	46bd      	mov	sp, r7
 8012c5c:	b004      	add	sp, #16
 8012c5e:	bd80      	pop	{r7, pc}
 8012c60:	200005b8 	.word	0x200005b8
 8012c64:	00000412 	.word	0x00000412
 8012c68:	00000411 	.word	0x00000411
 8012c6c:	00000484 	.word	0x00000484

08012c70 <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 8012c70:	b580      	push	{r7, lr}
 8012c72:	b082      	sub	sp, #8
 8012c74:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 8012c76:	4a16      	ldr	r2, [pc, #88]	; (8012cd0 <AckTimeoutRetriesFinalize+0x60>)
 8012c78:	2388      	movs	r3, #136	; 0x88
 8012c7a:	00db      	lsls	r3, r3, #3
 8012c7c:	5cd3      	ldrb	r3, [r2, r3]
 8012c7e:	2201      	movs	r2, #1
 8012c80:	4053      	eors	r3, r2
 8012c82:	b2db      	uxtb	r3, r3
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d018      	beq.n	8012cba <AckTimeoutRetriesFinalize+0x4a>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8012c88:	003b      	movs	r3, r7
 8012c8a:	2202      	movs	r2, #2
 8012c8c:	711a      	strb	r2, [r3, #4]
        params.NvmCtx = Contexts.RegionNvmCtx;
 8012c8e:	4b11      	ldr	r3, [pc, #68]	; (8012cd4 <AckTimeoutRetriesFinalize+0x64>)
 8012c90:	689a      	ldr	r2, [r3, #8]
 8012c92:	003b      	movs	r3, r7
 8012c94:	601a      	str	r2, [r3, #0]
        RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8012c96:	4b0e      	ldr	r3, [pc, #56]	; (8012cd0 <AckTimeoutRetriesFinalize+0x60>)
 8012c98:	4a0f      	ldr	r2, [pc, #60]	; (8012cd8 <AckTimeoutRetriesFinalize+0x68>)
 8012c9a:	589b      	ldr	r3, [r3, r2]
 8012c9c:	781b      	ldrb	r3, [r3, #0]
 8012c9e:	003a      	movs	r2, r7
 8012ca0:	0011      	movs	r1, r2
 8012ca2:	0018      	movs	r0, r3
 8012ca4:	f004 f831 	bl	8016d0a <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 8012ca8:	4b09      	ldr	r3, [pc, #36]	; (8012cd0 <AckTimeoutRetriesFinalize+0x60>)
 8012caa:	4a0c      	ldr	r2, [pc, #48]	; (8012cdc <AckTimeoutRetriesFinalize+0x6c>)
 8012cac:	2100      	movs	r1, #0
 8012cae:	5499      	strb	r1, [r3, r2]
        MacCtx.McpsConfirm.AckReceived = false;
 8012cb0:	4a07      	ldr	r2, [pc, #28]	; (8012cd0 <AckTimeoutRetriesFinalize+0x60>)
 8012cb2:	2388      	movs	r3, #136	; 0x88
 8012cb4:	00db      	lsls	r3, r3, #3
 8012cb6:	2100      	movs	r1, #0
 8012cb8:	54d1      	strb	r1, [r2, r3]
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8012cba:	4b05      	ldr	r3, [pc, #20]	; (8012cd0 <AckTimeoutRetriesFinalize+0x60>)
 8012cbc:	4a08      	ldr	r2, [pc, #32]	; (8012ce0 <AckTimeoutRetriesFinalize+0x70>)
 8012cbe:	5c99      	ldrb	r1, [r3, r2]
 8012cc0:	4b03      	ldr	r3, [pc, #12]	; (8012cd0 <AckTimeoutRetriesFinalize+0x60>)
 8012cc2:	4a08      	ldr	r2, [pc, #32]	; (8012ce4 <AckTimeoutRetriesFinalize+0x74>)
 8012cc4:	5499      	strb	r1, [r3, r2]
}
 8012cc6:	46c0      	nop			; (mov r8, r8)
 8012cc8:	46bd      	mov	sp, r7
 8012cca:	b002      	add	sp, #8
 8012ccc:	bd80      	pop	{r7, pc}
 8012cce:	46c0      	nop			; (mov r8, r8)
 8012cd0:	200005b8 	.word	0x200005b8
 8012cd4:	20000bb0 	.word	0x20000bb0
 8012cd8:	00000484 	.word	0x00000484
 8012cdc:	00000414 	.word	0x00000414
 8012ce0:	00000412 	.word	0x00000412
 8012ce4:	00000441 	.word	0x00000441

08012ce8 <CallNvmCtxCallback>:

static void CallNvmCtxCallback( LoRaMacNvmCtxModule_t module )
{
 8012ce8:	b580      	push	{r7, lr}
 8012cea:	b082      	sub	sp, #8
 8012cec:	af00      	add	r7, sp, #0
 8012cee:	0002      	movs	r2, r0
 8012cf0:	1dfb      	adds	r3, r7, #7
 8012cf2:	701a      	strb	r2, [r3, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmContextChange != NULL ) )
 8012cf4:	4a0c      	ldr	r2, [pc, #48]	; (8012d28 <CallNvmCtxCallback+0x40>)
 8012cf6:	23d2      	movs	r3, #210	; 0xd2
 8012cf8:	009b      	lsls	r3, r3, #2
 8012cfa:	58d3      	ldr	r3, [r2, r3]
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d00f      	beq.n	8012d20 <CallNvmCtxCallback+0x38>
 8012d00:	4a09      	ldr	r2, [pc, #36]	; (8012d28 <CallNvmCtxCallback+0x40>)
 8012d02:	23d2      	movs	r3, #210	; 0xd2
 8012d04:	009b      	lsls	r3, r3, #2
 8012d06:	58d3      	ldr	r3, [r2, r3]
 8012d08:	689b      	ldr	r3, [r3, #8]
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d008      	beq.n	8012d20 <CallNvmCtxCallback+0x38>
    {
        MacCtx.MacCallbacks->NvmContextChange( module );
 8012d0e:	4a06      	ldr	r2, [pc, #24]	; (8012d28 <CallNvmCtxCallback+0x40>)
 8012d10:	23d2      	movs	r3, #210	; 0xd2
 8012d12:	009b      	lsls	r3, r3, #2
 8012d14:	58d3      	ldr	r3, [r2, r3]
 8012d16:	689b      	ldr	r3, [r3, #8]
 8012d18:	1dfa      	adds	r2, r7, #7
 8012d1a:	7812      	ldrb	r2, [r2, #0]
 8012d1c:	0010      	movs	r0, r2
 8012d1e:	4798      	blx	r3
    }
}
 8012d20:	46c0      	nop			; (mov r8, r8)
 8012d22:	46bd      	mov	sp, r7
 8012d24:	b002      	add	sp, #8
 8012d26:	bd80      	pop	{r7, pc}
 8012d28:	200005b8 	.word	0x200005b8

08012d2c <EventMacNvmCtxChanged>:

static void EventMacNvmCtxChanged( void )
{
 8012d2c:	b580      	push	{r7, lr}
 8012d2e:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_MAC );
 8012d30:	2000      	movs	r0, #0
 8012d32:	f7ff ffd9 	bl	8012ce8 <CallNvmCtxCallback>
}
 8012d36:	46c0      	nop			; (mov r8, r8)
 8012d38:	46bd      	mov	sp, r7
 8012d3a:	bd80      	pop	{r7, pc}

08012d3c <EventRegionNvmCtxChanged>:

static void EventRegionNvmCtxChanged( void )
{
 8012d3c:	b580      	push	{r7, lr}
 8012d3e:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_REGION );
 8012d40:	2001      	movs	r0, #1
 8012d42:	f7ff ffd1 	bl	8012ce8 <CallNvmCtxCallback>
}
 8012d46:	46c0      	nop			; (mov r8, r8)
 8012d48:	46bd      	mov	sp, r7
 8012d4a:	bd80      	pop	{r7, pc}

08012d4c <EventCryptoNvmCtxChanged>:

static void EventCryptoNvmCtxChanged( void )
{
 8012d4c:	b580      	push	{r7, lr}
 8012d4e:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CRYPTO );
 8012d50:	2002      	movs	r0, #2
 8012d52:	f7ff ffc9 	bl	8012ce8 <CallNvmCtxCallback>
}
 8012d56:	46c0      	nop			; (mov r8, r8)
 8012d58:	46bd      	mov	sp, r7
 8012d5a:	bd80      	pop	{r7, pc}

08012d5c <EventSecureElementNvmCtxChanged>:

static void EventSecureElementNvmCtxChanged( void )
{
 8012d5c:	b580      	push	{r7, lr}
 8012d5e:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_SECURE_ELEMENT );
 8012d60:	2003      	movs	r0, #3
 8012d62:	f7ff ffc1 	bl	8012ce8 <CallNvmCtxCallback>
}
 8012d66:	46c0      	nop			; (mov r8, r8)
 8012d68:	46bd      	mov	sp, r7
 8012d6a:	bd80      	pop	{r7, pc}

08012d6c <EventCommandsNvmCtxChanged>:

static void EventCommandsNvmCtxChanged( void )
{
 8012d6c:	b580      	push	{r7, lr}
 8012d6e:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_COMMANDS );
 8012d70:	2004      	movs	r0, #4
 8012d72:	f7ff ffb9 	bl	8012ce8 <CallNvmCtxCallback>
}
 8012d76:	46c0      	nop			; (mov r8, r8)
 8012d78:	46bd      	mov	sp, r7
 8012d7a:	bd80      	pop	{r7, pc}

08012d7c <EventClassBNvmCtxChanged>:

static void EventClassBNvmCtxChanged( void )
{
 8012d7c:	b580      	push	{r7, lr}
 8012d7e:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CLASS_B );
 8012d80:	2005      	movs	r0, #5
 8012d82:	f7ff ffb1 	bl	8012ce8 <CallNvmCtxCallback>
}
 8012d86:	46c0      	nop			; (mov r8, r8)
 8012d88:	46bd      	mov	sp, r7
 8012d8a:	bd80      	pop	{r7, pc}

08012d8c <EventConfirmQueueNvmCtxChanged>:

static void EventConfirmQueueNvmCtxChanged( void )
{
 8012d8c:	b580      	push	{r7, lr}
 8012d8e:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CONFIRM_QUEUE );
 8012d90:	2006      	movs	r0, #6
 8012d92:	f7ff ffa9 	bl	8012ce8 <CallNvmCtxCallback>
}
 8012d96:	46c0      	nop			; (mov r8, r8)
 8012d98:	46bd      	mov	sp, r7
 8012d9a:	bd80      	pop	{r7, pc}

08012d9c <IsRequestPending>:

static uint8_t IsRequestPending( void )
{
 8012d9c:	b580      	push	{r7, lr}
 8012d9e:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8012da0:	4b0a      	ldr	r3, [pc, #40]	; (8012dcc <IsRequestPending+0x30>)
 8012da2:	4a0b      	ldr	r2, [pc, #44]	; (8012dd0 <IsRequestPending+0x34>)
 8012da4:	5c9b      	ldrb	r3, [r3, r2]
 8012da6:	2204      	movs	r2, #4
 8012da8:	4013      	ands	r3, r2
 8012daa:	b2db      	uxtb	r3, r3
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d107      	bne.n	8012dc0 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8012db0:	4b06      	ldr	r3, [pc, #24]	; (8012dcc <IsRequestPending+0x30>)
 8012db2:	4a07      	ldr	r2, [pc, #28]	; (8012dd0 <IsRequestPending+0x34>)
 8012db4:	5c9b      	ldrb	r3, [r3, r2]
 8012db6:	2201      	movs	r2, #1
 8012db8:	4013      	ands	r3, r2
 8012dba:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d001      	beq.n	8012dc4 <IsRequestPending+0x28>
    {
        return 1;
 8012dc0:	2301      	movs	r3, #1
 8012dc2:	e000      	b.n	8012dc6 <IsRequestPending+0x2a>
    }
    return 0;
 8012dc4:	2300      	movs	r3, #0
}
 8012dc6:	0018      	movs	r0, r3
 8012dc8:	46bd      	mov	sp, r7
 8012dca:	bd80      	pop	{r7, pc}
 8012dcc:	200005b8 	.word	0x200005b8
 8012dd0:	00000481 	.word	0x00000481

08012dd4 <LoRaMacIsBusy>:

/* Exported functions ---------------------------------------------------------*/
bool LoRaMacIsBusy( void )
{
 8012dd4:	b580      	push	{r7, lr}
 8012dd6:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8012dd8:	4a08      	ldr	r2, [pc, #32]	; (8012dfc <LoRaMacIsBusy+0x28>)
 8012dda:	23d0      	movs	r3, #208	; 0xd0
 8012ddc:	009b      	lsls	r3, r3, #2
 8012dde:	58d3      	ldr	r3, [r2, r3]
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d106      	bne.n	8012df2 <LoRaMacIsBusy+0x1e>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 8012de4:	4b05      	ldr	r3, [pc, #20]	; (8012dfc <LoRaMacIsBusy+0x28>)
 8012de6:	4a06      	ldr	r2, [pc, #24]	; (8012e00 <LoRaMacIsBusy+0x2c>)
 8012de8:	5c9b      	ldrb	r3, [r3, r2]
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8012dea:	2b01      	cmp	r3, #1
 8012dec:	d101      	bne.n	8012df2 <LoRaMacIsBusy+0x1e>
    {
        return false;
 8012dee:	2300      	movs	r3, #0
 8012df0:	e000      	b.n	8012df4 <LoRaMacIsBusy+0x20>
    }
    return true;
 8012df2:	2301      	movs	r3, #1
}
 8012df4:	0018      	movs	r0, r3
 8012df6:	46bd      	mov	sp, r7
 8012df8:	bd80      	pop	{r7, pc}
 8012dfa:	46c0      	nop			; (mov r8, r8)
 8012dfc:	200005b8 	.word	0x200005b8
 8012e00:	00000482 	.word	0x00000482

08012e04 <LoRaMacProcess>:

void LoRaMacProcess( void )
{
 8012e04:	b580      	push	{r7, lr}
 8012e06:	b082      	sub	sp, #8
 8012e08:	af00      	add	r7, sp, #0
    uint8_t noTx = 0x00;
 8012e0a:	1dfb      	adds	r3, r7, #7
 8012e0c:	2200      	movs	r2, #0
 8012e0e:	701a      	strb	r2, [r3, #0]

    LoRaMacHandleIrqEvents( );
 8012e10:	f7fd f970 	bl	80100f4 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 8012e14:	f001 fe26 	bl	8014a64 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8012e18:	4b1b      	ldr	r3, [pc, #108]	; (8012e88 <LoRaMacProcess+0x84>)
 8012e1a:	4a1c      	ldr	r2, [pc, #112]	; (8012e8c <LoRaMacProcess+0x88>)
 8012e1c:	5c9b      	ldrb	r3, [r3, r2]
 8012e1e:	2220      	movs	r2, #32
 8012e20:	4013      	ands	r3, r2
 8012e22:	b2db      	uxtb	r3, r3
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d020      	beq.n	8012e6a <LoRaMacProcess+0x66>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 8012e28:	2000      	movs	r0, #0
 8012e2a:	f7fd f9af 	bl	801018c <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 8012e2e:	f7fd fb8b 	bl	8010548 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 8012e32:	f7ff ffb3 	bl	8012d9c <IsRequestPending>
 8012e36:	1e03      	subs	r3, r0, #0
 8012e38:	d008      	beq.n	8012e4c <LoRaMacProcess+0x48>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 8012e3a:	f7fd fb59 	bl	80104f0 <LoRaMacCheckForBeaconAcquisition>
 8012e3e:	0003      	movs	r3, r0
 8012e40:	0019      	movs	r1, r3
 8012e42:	1dfb      	adds	r3, r7, #7
 8012e44:	1dfa      	adds	r2, r7, #7
 8012e46:	7812      	ldrb	r2, [r2, #0]
 8012e48:	430a      	orrs	r2, r1
 8012e4a:	701a      	strb	r2, [r3, #0]
        }

        if( noTx == 0x00 )
 8012e4c:	1dfb      	adds	r3, r7, #7
 8012e4e:	781b      	ldrb	r3, [r3, #0]
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d103      	bne.n	8012e5c <LoRaMacProcess+0x58>
        {
            LoRaMacHandleMlmeRequest( );
 8012e54:	f7fd fb0a 	bl	801046c <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 8012e58:	f7fd fa86 	bl	8010368 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 8012e5c:	f7fd f9aa 	bl	80101b4 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 8012e60:	f7fd fa0e 	bl	8010280 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8012e64:	2001      	movs	r0, #1
 8012e66:	f7fd f991 	bl	801018c <LoRaMacEnableRequests>
    }
    LoRaMacHandleIndicationEvents( );
 8012e6a:	f7fd fa25 	bl	80102b8 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 8012e6e:	4a06      	ldr	r2, [pc, #24]	; (8012e88 <LoRaMacProcess+0x84>)
 8012e70:	2390      	movs	r3, #144	; 0x90
 8012e72:	00db      	lsls	r3, r3, #3
 8012e74:	5cd3      	ldrb	r3, [r2, r3]
 8012e76:	2b02      	cmp	r3, #2
 8012e78:	d101      	bne.n	8012e7e <LoRaMacProcess+0x7a>
    {
        OpenContinuousRxCWindow( );
 8012e7a:	f7ff f9d1 	bl	8012220 <OpenContinuousRxCWindow>
    }
}
 8012e7e:	46c0      	nop			; (mov r8, r8)
 8012e80:	46bd      	mov	sp, r7
 8012e82:	b002      	add	sp, #8
 8012e84:	bd80      	pop	{r7, pc}
 8012e86:	46c0      	nop			; (mov r8, r8)
 8012e88:	200005b8 	.word	0x200005b8
 8012e8c:	00000481 	.word	0x00000481

08012e90 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8012e90:	b5b0      	push	{r4, r5, r7, lr}
 8012e92:	b098      	sub	sp, #96	; 0x60
 8012e94:	af02      	add	r7, sp, #8
 8012e96:	6178      	str	r0, [r7, #20]
 8012e98:	6139      	str	r1, [r7, #16]
 8012e9a:	230f      	movs	r3, #15
 8012e9c:	18fb      	adds	r3, r7, r3
 8012e9e:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( ( primitives == NULL ) ||
 8012ea0:	697b      	ldr	r3, [r7, #20]
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d002      	beq.n	8012eac <LoRaMacInitialization+0x1c>
 8012ea6:	693b      	ldr	r3, [r7, #16]
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d101      	bne.n	8012eb0 <LoRaMacInitialization+0x20>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012eac:	2303      	movs	r3, #3
 8012eae:	e35e      	b.n	801356e <LoRaMacInitialization+0x6de>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8012eb0:	697b      	ldr	r3, [r7, #20]
 8012eb2:	681b      	ldr	r3, [r3, #0]
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d00b      	beq.n	8012ed0 <LoRaMacInitialization+0x40>
        ( primitives->MacMcpsIndication == NULL ) ||
 8012eb8:	697b      	ldr	r3, [r7, #20]
 8012eba:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d007      	beq.n	8012ed0 <LoRaMacInitialization+0x40>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8012ec0:	697b      	ldr	r3, [r7, #20]
 8012ec2:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d003      	beq.n	8012ed0 <LoRaMacInitialization+0x40>
        ( primitives->MacMlmeIndication == NULL ) )
 8012ec8:	697b      	ldr	r3, [r7, #20]
 8012eca:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d101      	bne.n	8012ed4 <LoRaMacInitialization+0x44>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012ed0:	2303      	movs	r3, #3
 8012ed2:	e34c      	b.n	801356e <LoRaMacInitialization+0x6de>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8012ed4:	230f      	movs	r3, #15
 8012ed6:	18fb      	adds	r3, r7, r3
 8012ed8:	781b      	ldrb	r3, [r3, #0]
 8012eda:	0018      	movs	r0, r3
 8012edc:	f003 fec8 	bl	8016c70 <RegionIsActive>
 8012ee0:	0003      	movs	r3, r0
 8012ee2:	001a      	movs	r2, r3
 8012ee4:	2301      	movs	r3, #1
 8012ee6:	4053      	eors	r3, r2
 8012ee8:	b2db      	uxtb	r3, r3
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d001      	beq.n	8012ef2 <LoRaMacInitialization+0x62>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8012eee:	2309      	movs	r3, #9
 8012ef0:	e33d      	b.n	801356e <LoRaMacInitialization+0x6de>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives, EventConfirmQueueNvmCtxChanged );
 8012ef2:	4afd      	ldr	r2, [pc, #1012]	; (80132e8 <LoRaMacInitialization+0x458>)
 8012ef4:	697b      	ldr	r3, [r7, #20]
 8012ef6:	0011      	movs	r1, r2
 8012ef8:	0018      	movs	r0, r3
 8012efa:	f002 f967 	bl	80151cc <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &NvmMacCtx, 0x00, sizeof( LoRaMacNvmCtx_t ) );
 8012efe:	23b6      	movs	r3, #182	; 0xb6
 8012f00:	005a      	lsls	r2, r3, #1
 8012f02:	4bfa      	ldr	r3, [pc, #1000]	; (80132ec <LoRaMacInitialization+0x45c>)
 8012f04:	2100      	movs	r1, #0
 8012f06:	0018      	movs	r0, r3
 8012f08:	f006 fb80 	bl	801960c <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8012f0c:	4af8      	ldr	r2, [pc, #992]	; (80132f0 <LoRaMacInitialization+0x460>)
 8012f0e:	4bf9      	ldr	r3, [pc, #996]	; (80132f4 <LoRaMacInitialization+0x464>)
 8012f10:	2100      	movs	r1, #0
 8012f12:	0018      	movs	r0, r3
 8012f14:	f006 fb7a 	bl	801960c <memset1>
    MacCtx.NvmCtx = &NvmMacCtx;
 8012f18:	4bf6      	ldr	r3, [pc, #984]	; (80132f4 <LoRaMacInitialization+0x464>)
 8012f1a:	49f7      	ldr	r1, [pc, #988]	; (80132f8 <LoRaMacInitialization+0x468>)
 8012f1c:	4af3      	ldr	r2, [pc, #972]	; (80132ec <LoRaMacInitialization+0x45c>)
 8012f1e:	505a      	str	r2, [r3, r1]

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 8012f20:	4bf4      	ldr	r3, [pc, #976]	; (80132f4 <LoRaMacInitialization+0x464>)
 8012f22:	4af6      	ldr	r2, [pc, #984]	; (80132fc <LoRaMacInitialization+0x46c>)
 8012f24:	2101      	movs	r1, #1
 8012f26:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetries = 1;
 8012f28:	4bf2      	ldr	r3, [pc, #968]	; (80132f4 <LoRaMacInitialization+0x464>)
 8012f2a:	4af5      	ldr	r2, [pc, #980]	; (8013300 <LoRaMacInitialization+0x470>)
 8012f2c:	2101      	movs	r1, #1
 8012f2e:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->Region = region;
 8012f30:	4bf0      	ldr	r3, [pc, #960]	; (80132f4 <LoRaMacInitialization+0x464>)
 8012f32:	4af1      	ldr	r2, [pc, #964]	; (80132f8 <LoRaMacInitialization+0x468>)
 8012f34:	589b      	ldr	r3, [r3, r2]
 8012f36:	220f      	movs	r2, #15
 8012f38:	18ba      	adds	r2, r7, r2
 8012f3a:	7812      	ldrb	r2, [r2, #0]
 8012f3c:	701a      	strb	r2, [r3, #0]
    MacCtx.NvmCtx->DeviceClass = CLASS_A;
 8012f3e:	4bed      	ldr	r3, [pc, #948]	; (80132f4 <LoRaMacInitialization+0x464>)
 8012f40:	4aed      	ldr	r2, [pc, #948]	; (80132f8 <LoRaMacInitialization+0x468>)
 8012f42:	589b      	ldr	r3, [r3, r2]
 8012f44:	227c      	movs	r2, #124	; 0x7c
 8012f46:	2100      	movs	r1, #0
 8012f48:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->RepeaterSupport = false;
 8012f4a:	4bea      	ldr	r3, [pc, #936]	; (80132f4 <LoRaMacInitialization+0x464>)
 8012f4c:	4aea      	ldr	r2, [pc, #936]	; (80132f8 <LoRaMacInitialization+0x468>)
 8012f4e:	589b      	ldr	r3, [r3, r2]
 8012f50:	22ca      	movs	r2, #202	; 0xca
 8012f52:	2100      	movs	r1, #0
 8012f54:	5499      	strb	r1, [r3, r2]

    // Setup version
    MacCtx.NvmCtx->Version.Value = LORAMAC_VERSION;
 8012f56:	4be7      	ldr	r3, [pc, #924]	; (80132f4 <LoRaMacInitialization+0x464>)
 8012f58:	4ae7      	ldr	r2, [pc, #924]	; (80132f8 <LoRaMacInitialization+0x468>)
 8012f5a:	589a      	ldr	r2, [r3, r2]
 8012f5c:	23b0      	movs	r3, #176	; 0xb0
 8012f5e:	005b      	lsls	r3, r3, #1
 8012f60:	49e8      	ldr	r1, [pc, #928]	; (8013304 <LoRaMacInitialization+0x474>)
 8012f62:	50d1      	str	r1, [r2, r3]

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8012f64:	2550      	movs	r5, #80	; 0x50
 8012f66:	197b      	adds	r3, r7, r5
 8012f68:	220f      	movs	r2, #15
 8012f6a:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012f6c:	4be1      	ldr	r3, [pc, #900]	; (80132f4 <LoRaMacInitialization+0x464>)
 8012f6e:	4ae2      	ldr	r2, [pc, #904]	; (80132f8 <LoRaMacInitialization+0x468>)
 8012f70:	589b      	ldr	r3, [r3, r2]
 8012f72:	781b      	ldrb	r3, [r3, #0]
 8012f74:	197a      	adds	r2, r7, r5
 8012f76:	0011      	movs	r1, r2
 8012f78:	0018      	movs	r0, r3
 8012f7a:	f003 fe8a 	bl	8016c92 <RegionGetPhyParam>
 8012f7e:	0003      	movs	r3, r0
 8012f80:	001a      	movs	r2, r3
 8012f82:	244c      	movs	r4, #76	; 0x4c
 8012f84:	193b      	adds	r3, r7, r4
 8012f86:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->DutyCycleOn = ( bool ) phyParam.Value;
 8012f88:	193b      	adds	r3, r7, r4
 8012f8a:	681a      	ldr	r2, [r3, #0]
 8012f8c:	4bd9      	ldr	r3, [pc, #868]	; (80132f4 <LoRaMacInitialization+0x464>)
 8012f8e:	49da      	ldr	r1, [pc, #872]	; (80132f8 <LoRaMacInitialization+0x468>)
 8012f90:	585b      	ldr	r3, [r3, r1]
 8012f92:	1e51      	subs	r1, r2, #1
 8012f94:	418a      	sbcs	r2, r1
 8012f96:	b2d1      	uxtb	r1, r2
 8012f98:	22c9      	movs	r2, #201	; 0xc9
 8012f9a:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8012f9c:	197b      	adds	r3, r7, r5
 8012f9e:	220a      	movs	r2, #10
 8012fa0:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012fa2:	4bd4      	ldr	r3, [pc, #848]	; (80132f4 <LoRaMacInitialization+0x464>)
 8012fa4:	4ad4      	ldr	r2, [pc, #848]	; (80132f8 <LoRaMacInitialization+0x468>)
 8012fa6:	589b      	ldr	r3, [r3, r2]
 8012fa8:	781b      	ldrb	r3, [r3, #0]
 8012faa:	197a      	adds	r2, r7, r5
 8012fac:	0011      	movs	r1, r2
 8012fae:	0018      	movs	r0, r3
 8012fb0:	f003 fe6f 	bl	8016c92 <RegionGetPhyParam>
 8012fb4:	0003      	movs	r3, r0
 8012fb6:	001a      	movs	r2, r3
 8012fb8:	193b      	adds	r3, r7, r4
 8012fba:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;
 8012fbc:	193b      	adds	r3, r7, r4
 8012fbe:	6819      	ldr	r1, [r3, #0]
 8012fc0:	4bcc      	ldr	r3, [pc, #816]	; (80132f4 <LoRaMacInitialization+0x464>)
 8012fc2:	4acd      	ldr	r2, [pc, #820]	; (80132f8 <LoRaMacInitialization+0x468>)
 8012fc4:	589b      	ldr	r3, [r3, r2]
 8012fc6:	b24a      	sxtb	r2, r1
 8012fc8:	711a      	strb	r2, [r3, #4]

    getPhy.Attribute = PHY_DEF_TX_DR;
 8012fca:	197b      	adds	r3, r7, r5
 8012fcc:	2206      	movs	r2, #6
 8012fce:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012fd0:	4bc8      	ldr	r3, [pc, #800]	; (80132f4 <LoRaMacInitialization+0x464>)
 8012fd2:	4ac9      	ldr	r2, [pc, #804]	; (80132f8 <LoRaMacInitialization+0x468>)
 8012fd4:	589b      	ldr	r3, [r3, r2]
 8012fd6:	781b      	ldrb	r3, [r3, #0]
 8012fd8:	197a      	adds	r2, r7, r5
 8012fda:	0011      	movs	r1, r2
 8012fdc:	0018      	movs	r0, r3
 8012fde:	f003 fe58 	bl	8016c92 <RegionGetPhyParam>
 8012fe2:	0003      	movs	r3, r0
 8012fe4:	001a      	movs	r2, r3
 8012fe6:	193b      	adds	r3, r7, r4
 8012fe8:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;
 8012fea:	193b      	adds	r3, r7, r4
 8012fec:	6819      	ldr	r1, [r3, #0]
 8012fee:	4bc1      	ldr	r3, [pc, #772]	; (80132f4 <LoRaMacInitialization+0x464>)
 8012ff0:	4ac1      	ldr	r2, [pc, #772]	; (80132f8 <LoRaMacInitialization+0x468>)
 8012ff2:	589b      	ldr	r3, [r3, r2]
 8012ff4:	b24a      	sxtb	r2, r1
 8012ff6:	715a      	strb	r2, [r3, #5]

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8012ff8:	197b      	adds	r3, r7, r5
 8012ffa:	2210      	movs	r2, #16
 8012ffc:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012ffe:	4bbd      	ldr	r3, [pc, #756]	; (80132f4 <LoRaMacInitialization+0x464>)
 8013000:	4abd      	ldr	r2, [pc, #756]	; (80132f8 <LoRaMacInitialization+0x468>)
 8013002:	589b      	ldr	r3, [r3, r2]
 8013004:	781b      	ldrb	r3, [r3, #0]
 8013006:	197a      	adds	r2, r7, r5
 8013008:	0011      	movs	r1, r2
 801300a:	0018      	movs	r0, r3
 801300c:	f003 fe41 	bl	8016c92 <RegionGetPhyParam>
 8013010:	0003      	movs	r3, r0
 8013012:	001a      	movs	r2, r3
 8013014:	193b      	adds	r3, r7, r4
 8013016:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8013018:	4bb6      	ldr	r3, [pc, #728]	; (80132f4 <LoRaMacInitialization+0x464>)
 801301a:	4ab7      	ldr	r2, [pc, #732]	; (80132f8 <LoRaMacInitialization+0x468>)
 801301c:	589b      	ldr	r3, [r3, r2]
 801301e:	193a      	adds	r2, r7, r4
 8013020:	6812      	ldr	r2, [r2, #0]
 8013022:	611a      	str	r2, [r3, #16]

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8013024:	197b      	adds	r3, r7, r5
 8013026:	2211      	movs	r2, #17
 8013028:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 801302a:	4bb2      	ldr	r3, [pc, #712]	; (80132f4 <LoRaMacInitialization+0x464>)
 801302c:	4ab2      	ldr	r2, [pc, #712]	; (80132f8 <LoRaMacInitialization+0x468>)
 801302e:	589b      	ldr	r3, [r3, r2]
 8013030:	781b      	ldrb	r3, [r3, #0]
 8013032:	197a      	adds	r2, r7, r5
 8013034:	0011      	movs	r1, r2
 8013036:	0018      	movs	r0, r3
 8013038:	f003 fe2b 	bl	8016c92 <RegionGetPhyParam>
 801303c:	0003      	movs	r3, r0
 801303e:	001a      	movs	r2, r3
 8013040:	193b      	adds	r3, r7, r4
 8013042:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8013044:	4bab      	ldr	r3, [pc, #684]	; (80132f4 <LoRaMacInitialization+0x464>)
 8013046:	4aac      	ldr	r2, [pc, #688]	; (80132f8 <LoRaMacInitialization+0x468>)
 8013048:	589b      	ldr	r3, [r3, r2]
 801304a:	193a      	adds	r2, r7, r4
 801304c:	6812      	ldr	r2, [r2, #0]
 801304e:	615a      	str	r2, [r3, #20]

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8013050:	197b      	adds	r3, r7, r5
 8013052:	2212      	movs	r2, #18
 8013054:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8013056:	4ba7      	ldr	r3, [pc, #668]	; (80132f4 <LoRaMacInitialization+0x464>)
 8013058:	4aa7      	ldr	r2, [pc, #668]	; (80132f8 <LoRaMacInitialization+0x468>)
 801305a:	589b      	ldr	r3, [r3, r2]
 801305c:	781b      	ldrb	r3, [r3, #0]
 801305e:	197a      	adds	r2, r7, r5
 8013060:	0011      	movs	r1, r2
 8013062:	0018      	movs	r0, r3
 8013064:	f003 fe15 	bl	8016c92 <RegionGetPhyParam>
 8013068:	0003      	movs	r3, r0
 801306a:	001a      	movs	r2, r3
 801306c:	193b      	adds	r3, r7, r4
 801306e:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8013070:	4ba0      	ldr	r3, [pc, #640]	; (80132f4 <LoRaMacInitialization+0x464>)
 8013072:	4aa1      	ldr	r2, [pc, #644]	; (80132f8 <LoRaMacInitialization+0x468>)
 8013074:	589b      	ldr	r3, [r3, r2]
 8013076:	193a      	adds	r2, r7, r4
 8013078:	6812      	ldr	r2, [r2, #0]
 801307a:	619a      	str	r2, [r3, #24]

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 801307c:	197b      	adds	r3, r7, r5
 801307e:	2213      	movs	r2, #19
 8013080:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8013082:	4b9c      	ldr	r3, [pc, #624]	; (80132f4 <LoRaMacInitialization+0x464>)
 8013084:	4a9c      	ldr	r2, [pc, #624]	; (80132f8 <LoRaMacInitialization+0x468>)
 8013086:	589b      	ldr	r3, [r3, r2]
 8013088:	781b      	ldrb	r3, [r3, #0]
 801308a:	197a      	adds	r2, r7, r5
 801308c:	0011      	movs	r1, r2
 801308e:	0018      	movs	r0, r3
 8013090:	f003 fdff 	bl	8016c92 <RegionGetPhyParam>
 8013094:	0003      	movs	r3, r0
 8013096:	001a      	movs	r2, r3
 8013098:	193b      	adds	r3, r7, r4
 801309a:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 801309c:	4b95      	ldr	r3, [pc, #596]	; (80132f4 <LoRaMacInitialization+0x464>)
 801309e:	4a96      	ldr	r2, [pc, #600]	; (80132f8 <LoRaMacInitialization+0x468>)
 80130a0:	589b      	ldr	r3, [r3, r2]
 80130a2:	193a      	adds	r2, r7, r4
 80130a4:	6812      	ldr	r2, [r2, #0]
 80130a6:	61da      	str	r2, [r3, #28]

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 80130a8:	197b      	adds	r3, r7, r5
 80130aa:	2214      	movs	r2, #20
 80130ac:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80130ae:	4b91      	ldr	r3, [pc, #580]	; (80132f4 <LoRaMacInitialization+0x464>)
 80130b0:	4a91      	ldr	r2, [pc, #580]	; (80132f8 <LoRaMacInitialization+0x468>)
 80130b2:	589b      	ldr	r3, [r3, r2]
 80130b4:	781b      	ldrb	r3, [r3, #0]
 80130b6:	197a      	adds	r2, r7, r5
 80130b8:	0011      	movs	r1, r2
 80130ba:	0018      	movs	r0, r3
 80130bc:	f003 fde9 	bl	8016c92 <RegionGetPhyParam>
 80130c0:	0003      	movs	r3, r0
 80130c2:	001a      	movs	r2, r3
 80130c4:	193b      	adds	r3, r7, r4
 80130c6:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 80130c8:	4b8a      	ldr	r3, [pc, #552]	; (80132f4 <LoRaMacInitialization+0x464>)
 80130ca:	4a8b      	ldr	r2, [pc, #556]	; (80132f8 <LoRaMacInitialization+0x468>)
 80130cc:	589b      	ldr	r3, [r3, r2]
 80130ce:	193a      	adds	r2, r7, r4
 80130d0:	6812      	ldr	r2, [r2, #0]
 80130d2:	621a      	str	r2, [r3, #32]

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 80130d4:	197b      	adds	r3, r7, r5
 80130d6:	2217      	movs	r2, #23
 80130d8:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80130da:	4b86      	ldr	r3, [pc, #536]	; (80132f4 <LoRaMacInitialization+0x464>)
 80130dc:	4a86      	ldr	r2, [pc, #536]	; (80132f8 <LoRaMacInitialization+0x468>)
 80130de:	589b      	ldr	r3, [r3, r2]
 80130e0:	781b      	ldrb	r3, [r3, #0]
 80130e2:	197a      	adds	r2, r7, r5
 80130e4:	0011      	movs	r1, r2
 80130e6:	0018      	movs	r0, r3
 80130e8:	f003 fdd3 	bl	8016c92 <RegionGetPhyParam>
 80130ec:	0003      	movs	r3, r0
 80130ee:	001a      	movs	r2, r3
 80130f0:	193b      	adds	r3, r7, r4
 80130f2:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 80130f4:	193b      	adds	r3, r7, r4
 80130f6:	6819      	ldr	r1, [r3, #0]
 80130f8:	4b7e      	ldr	r3, [pc, #504]	; (80132f4 <LoRaMacInitialization+0x464>)
 80130fa:	4a7f      	ldr	r2, [pc, #508]	; (80132f8 <LoRaMacInitialization+0x468>)
 80130fc:	589b      	ldr	r3, [r3, r2]
 80130fe:	b2c9      	uxtb	r1, r1
 8013100:	2225      	movs	r2, #37	; 0x25
 8013102:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8013104:	197b      	adds	r3, r7, r5
 8013106:	2218      	movs	r2, #24
 8013108:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 801310a:	4b7a      	ldr	r3, [pc, #488]	; (80132f4 <LoRaMacInitialization+0x464>)
 801310c:	4a7a      	ldr	r2, [pc, #488]	; (80132f8 <LoRaMacInitialization+0x468>)
 801310e:	589b      	ldr	r3, [r3, r2]
 8013110:	781b      	ldrb	r3, [r3, #0]
 8013112:	197a      	adds	r2, r7, r5
 8013114:	0011      	movs	r1, r2
 8013116:	0018      	movs	r0, r3
 8013118:	f003 fdbb 	bl	8016c92 <RegionGetPhyParam>
 801311c:	0003      	movs	r3, r0
 801311e:	001a      	movs	r2, r3
 8013120:	193b      	adds	r3, r7, r4
 8013122:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8013124:	4b73      	ldr	r3, [pc, #460]	; (80132f4 <LoRaMacInitialization+0x464>)
 8013126:	4a74      	ldr	r2, [pc, #464]	; (80132f8 <LoRaMacInitialization+0x468>)
 8013128:	589b      	ldr	r3, [r3, r2]
 801312a:	193a      	adds	r2, r7, r4
 801312c:	6812      	ldr	r2, [r2, #0]
 801312e:	629a      	str	r2, [r3, #40]	; 0x28
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8013130:	4b70      	ldr	r3, [pc, #448]	; (80132f4 <LoRaMacInitialization+0x464>)
 8013132:	4a71      	ldr	r2, [pc, #452]	; (80132f8 <LoRaMacInitialization+0x468>)
 8013134:	589b      	ldr	r3, [r3, r2]
 8013136:	193a      	adds	r2, r7, r4
 8013138:	6812      	ldr	r2, [r2, #0]
 801313a:	631a      	str	r2, [r3, #48]	; 0x30

    getPhy.Attribute = PHY_DEF_RX2_DR;
 801313c:	197b      	adds	r3, r7, r5
 801313e:	2219      	movs	r2, #25
 8013140:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8013142:	4b6c      	ldr	r3, [pc, #432]	; (80132f4 <LoRaMacInitialization+0x464>)
 8013144:	4a6c      	ldr	r2, [pc, #432]	; (80132f8 <LoRaMacInitialization+0x468>)
 8013146:	589b      	ldr	r3, [r3, r2]
 8013148:	781b      	ldrb	r3, [r3, #0]
 801314a:	197a      	adds	r2, r7, r5
 801314c:	0011      	movs	r1, r2
 801314e:	0018      	movs	r0, r3
 8013150:	f003 fd9f 	bl	8016c92 <RegionGetPhyParam>
 8013154:	0003      	movs	r3, r0
 8013156:	001a      	movs	r2, r3
 8013158:	193b      	adds	r3, r7, r4
 801315a:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 801315c:	193b      	adds	r3, r7, r4
 801315e:	6819      	ldr	r1, [r3, #0]
 8013160:	4b64      	ldr	r3, [pc, #400]	; (80132f4 <LoRaMacInitialization+0x464>)
 8013162:	4a65      	ldr	r2, [pc, #404]	; (80132f8 <LoRaMacInitialization+0x468>)
 8013164:	589b      	ldr	r3, [r3, r2]
 8013166:	b2c9      	uxtb	r1, r1
 8013168:	222c      	movs	r2, #44	; 0x2c
 801316a:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 801316c:	193b      	adds	r3, r7, r4
 801316e:	6819      	ldr	r1, [r3, #0]
 8013170:	4b60      	ldr	r3, [pc, #384]	; (80132f4 <LoRaMacInitialization+0x464>)
 8013172:	4a61      	ldr	r2, [pc, #388]	; (80132f8 <LoRaMacInitialization+0x468>)
 8013174:	589b      	ldr	r3, [r3, r2]
 8013176:	b2c9      	uxtb	r1, r1
 8013178:	2234      	movs	r2, #52	; 0x34
 801317a:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 801317c:	197b      	adds	r3, r7, r5
 801317e:	221e      	movs	r2, #30
 8013180:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8013182:	4b5c      	ldr	r3, [pc, #368]	; (80132f4 <LoRaMacInitialization+0x464>)
 8013184:	4a5c      	ldr	r2, [pc, #368]	; (80132f8 <LoRaMacInitialization+0x468>)
 8013186:	589b      	ldr	r3, [r3, r2]
 8013188:	781b      	ldrb	r3, [r3, #0]
 801318a:	197a      	adds	r2, r7, r5
 801318c:	0011      	movs	r1, r2
 801318e:	0018      	movs	r0, r3
 8013190:	f003 fd7f 	bl	8016c92 <RegionGetPhyParam>
 8013194:	0003      	movs	r3, r0
 8013196:	001a      	movs	r2, r3
 8013198:	193b      	adds	r3, r7, r4
 801319a:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 801319c:	193b      	adds	r3, r7, r4
 801319e:	6819      	ldr	r1, [r3, #0]
 80131a0:	4b54      	ldr	r3, [pc, #336]	; (80132f4 <LoRaMacInitialization+0x464>)
 80131a2:	4a55      	ldr	r2, [pc, #340]	; (80132f8 <LoRaMacInitialization+0x468>)
 80131a4:	589b      	ldr	r3, [r3, r2]
 80131a6:	b2c9      	uxtb	r1, r1
 80131a8:	2238      	movs	r2, #56	; 0x38
 80131aa:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 80131ac:	197b      	adds	r3, r7, r5
 80131ae:	221f      	movs	r2, #31
 80131b0:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80131b2:	4b50      	ldr	r3, [pc, #320]	; (80132f4 <LoRaMacInitialization+0x464>)
 80131b4:	4a50      	ldr	r2, [pc, #320]	; (80132f8 <LoRaMacInitialization+0x468>)
 80131b6:	589b      	ldr	r3, [r3, r2]
 80131b8:	781b      	ldrb	r3, [r3, #0]
 80131ba:	197a      	adds	r2, r7, r5
 80131bc:	0011      	movs	r1, r2
 80131be:	0018      	movs	r0, r3
 80131c0:	f003 fd67 	bl	8016c92 <RegionGetPhyParam>
 80131c4:	0003      	movs	r3, r0
 80131c6:	001a      	movs	r2, r3
 80131c8:	193b      	adds	r3, r7, r4
 80131ca:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 80131cc:	193b      	adds	r3, r7, r4
 80131ce:	6819      	ldr	r1, [r3, #0]
 80131d0:	4b48      	ldr	r3, [pc, #288]	; (80132f4 <LoRaMacInitialization+0x464>)
 80131d2:	4a49      	ldr	r2, [pc, #292]	; (80132f8 <LoRaMacInitialization+0x468>)
 80131d4:	589b      	ldr	r3, [r3, r2]
 80131d6:	b2c9      	uxtb	r1, r1
 80131d8:	2239      	movs	r2, #57	; 0x39
 80131da:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 80131dc:	197b      	adds	r3, r7, r5
 80131de:	2220      	movs	r2, #32
 80131e0:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80131e2:	4b44      	ldr	r3, [pc, #272]	; (80132f4 <LoRaMacInitialization+0x464>)
 80131e4:	4a44      	ldr	r2, [pc, #272]	; (80132f8 <LoRaMacInitialization+0x468>)
 80131e6:	589b      	ldr	r3, [r3, r2]
 80131e8:	781b      	ldrb	r3, [r3, #0]
 80131ea:	197a      	adds	r2, r7, r5
 80131ec:	0011      	movs	r1, r2
 80131ee:	0018      	movs	r0, r3
 80131f0:	f003 fd4f 	bl	8016c92 <RegionGetPhyParam>
 80131f4:	0003      	movs	r3, r0
 80131f6:	001a      	movs	r2, r3
 80131f8:	193b      	adds	r3, r7, r4
 80131fa:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.MaxEirp = phyParam.fValue;
 80131fc:	4b3d      	ldr	r3, [pc, #244]	; (80132f4 <LoRaMacInitialization+0x464>)
 80131fe:	4a3e      	ldr	r2, [pc, #248]	; (80132f8 <LoRaMacInitialization+0x468>)
 8013200:	589b      	ldr	r3, [r3, r2]
 8013202:	193a      	adds	r2, r7, r4
 8013204:	6812      	ldr	r2, [r2, #0]
 8013206:	63da      	str	r2, [r3, #60]	; 0x3c

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8013208:	197b      	adds	r3, r7, r5
 801320a:	2221      	movs	r2, #33	; 0x21
 801320c:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 801320e:	4b39      	ldr	r3, [pc, #228]	; (80132f4 <LoRaMacInitialization+0x464>)
 8013210:	4a39      	ldr	r2, [pc, #228]	; (80132f8 <LoRaMacInitialization+0x468>)
 8013212:	589b      	ldr	r3, [r3, r2]
 8013214:	781b      	ldrb	r3, [r3, #0]
 8013216:	197a      	adds	r2, r7, r5
 8013218:	0011      	movs	r1, r2
 801321a:	0018      	movs	r0, r3
 801321c:	f003 fd39 	bl	8016c92 <RegionGetPhyParam>
 8013220:	0003      	movs	r3, r0
 8013222:	001a      	movs	r2, r3
 8013224:	193b      	adds	r3, r7, r4
 8013226:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = phyParam.fValue;
 8013228:	4b32      	ldr	r3, [pc, #200]	; (80132f4 <LoRaMacInitialization+0x464>)
 801322a:	4a33      	ldr	r2, [pc, #204]	; (80132f8 <LoRaMacInitialization+0x468>)
 801322c:	589b      	ldr	r3, [r3, r2]
 801322e:	193a      	adds	r2, r7, r4
 8013230:	6812      	ldr	r2, [r2, #0]
 8013232:	641a      	str	r2, [r3, #64]	; 0x40

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8013234:	197b      	adds	r3, r7, r5
 8013236:	220b      	movs	r2, #11
 8013238:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 801323a:	4b2e      	ldr	r3, [pc, #184]	; (80132f4 <LoRaMacInitialization+0x464>)
 801323c:	4a2e      	ldr	r2, [pc, #184]	; (80132f8 <LoRaMacInitialization+0x468>)
 801323e:	589b      	ldr	r3, [r3, r2]
 8013240:	781b      	ldrb	r3, [r3, #0]
 8013242:	197a      	adds	r2, r7, r5
 8013244:	0011      	movs	r1, r2
 8013246:	0018      	movs	r0, r3
 8013248:	f003 fd23 	bl	8016c92 <RegionGetPhyParam>
 801324c:	0003      	movs	r3, r0
 801324e:	001a      	movs	r2, r3
 8013250:	193b      	adds	r3, r7, r4
 8013252:	601a      	str	r2, [r3, #0]
    MacCtx.AdrAckLimit = phyParam.Value;
 8013254:	193b      	adds	r3, r7, r4
 8013256:	681b      	ldr	r3, [r3, #0]
 8013258:	b299      	uxth	r1, r3
 801325a:	4a26      	ldr	r2, [pc, #152]	; (80132f4 <LoRaMacInitialization+0x464>)
 801325c:	23fd      	movs	r3, #253	; 0xfd
 801325e:	009b      	lsls	r3, r3, #2
 8013260:	52d1      	strh	r1, [r2, r3]

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8013262:	197b      	adds	r3, r7, r5
 8013264:	220c      	movs	r2, #12
 8013266:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8013268:	4b22      	ldr	r3, [pc, #136]	; (80132f4 <LoRaMacInitialization+0x464>)
 801326a:	4a23      	ldr	r2, [pc, #140]	; (80132f8 <LoRaMacInitialization+0x468>)
 801326c:	589b      	ldr	r3, [r3, r2]
 801326e:	781b      	ldrb	r3, [r3, #0]
 8013270:	197a      	adds	r2, r7, r5
 8013272:	0011      	movs	r1, r2
 8013274:	0018      	movs	r0, r3
 8013276:	f003 fd0c 	bl	8016c92 <RegionGetPhyParam>
 801327a:	0003      	movs	r3, r0
 801327c:	001a      	movs	r2, r3
 801327e:	193b      	adds	r3, r7, r4
 8013280:	601a      	str	r2, [r3, #0]
    MacCtx.AdrAckDelay = phyParam.Value;
 8013282:	193b      	adds	r3, r7, r4
 8013284:	681b      	ldr	r3, [r3, #0]
 8013286:	b299      	uxth	r1, r3
 8013288:	4b1a      	ldr	r3, [pc, #104]	; (80132f4 <LoRaMacInitialization+0x464>)
 801328a:	4a1f      	ldr	r2, [pc, #124]	; (8013308 <LoRaMacInitialization+0x478>)
 801328c:	5299      	strh	r1, [r3, r2]

    // Init parameters which are not set in function ResetMacParameters
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans = 1;
 801328e:	4b19      	ldr	r3, [pc, #100]	; (80132f4 <LoRaMacInitialization+0x464>)
 8013290:	4a19      	ldr	r2, [pc, #100]	; (80132f8 <LoRaMacInitialization+0x468>)
 8013292:	589b      	ldr	r3, [r3, r2]
 8013294:	2224      	movs	r2, #36	; 0x24
 8013296:	2101      	movs	r1, #1
 8013298:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = 10;
 801329a:	4b16      	ldr	r3, [pc, #88]	; (80132f4 <LoRaMacInitialization+0x464>)
 801329c:	4a16      	ldr	r2, [pc, #88]	; (80132f8 <LoRaMacInitialization+0x468>)
 801329e:	589b      	ldr	r3, [r3, r2]
 80132a0:	220a      	movs	r2, #10
 80132a2:	609a      	str	r2, [r3, #8]
    MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = 6;
 80132a4:	4b13      	ldr	r3, [pc, #76]	; (80132f4 <LoRaMacInitialization+0x464>)
 80132a6:	4a14      	ldr	r2, [pc, #80]	; (80132f8 <LoRaMacInitialization+0x468>)
 80132a8:	589b      	ldr	r3, [r3, r2]
 80132aa:	2206      	movs	r2, #6
 80132ac:	731a      	strb	r2, [r3, #12]

    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
 80132ae:	4b11      	ldr	r3, [pc, #68]	; (80132f4 <LoRaMacInitialization+0x464>)
 80132b0:	4a11      	ldr	r2, [pc, #68]	; (80132f8 <LoRaMacInitialization+0x468>)
 80132b2:	589b      	ldr	r3, [r3, r2]
 80132b4:	4a0f      	ldr	r2, [pc, #60]	; (80132f4 <LoRaMacInitialization+0x464>)
 80132b6:	4910      	ldr	r1, [pc, #64]	; (80132f8 <LoRaMacInitialization+0x468>)
 80132b8:	5852      	ldr	r2, [r2, r1]
 80132ba:	689b      	ldr	r3, [r3, #8]
 80132bc:	2188      	movs	r1, #136	; 0x88
 80132be:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols;
 80132c0:	4b0c      	ldr	r3, [pc, #48]	; (80132f4 <LoRaMacInitialization+0x464>)
 80132c2:	4a0d      	ldr	r2, [pc, #52]	; (80132f8 <LoRaMacInitialization+0x468>)
 80132c4:	589a      	ldr	r2, [r3, r2]
 80132c6:	4b0b      	ldr	r3, [pc, #44]	; (80132f4 <LoRaMacInitialization+0x464>)
 80132c8:	490b      	ldr	r1, [pc, #44]	; (80132f8 <LoRaMacInitialization+0x468>)
 80132ca:	585b      	ldr	r3, [r3, r1]
 80132cc:	7b11      	ldrb	r1, [r2, #12]
 80132ce:	228c      	movs	r2, #140	; 0x8c
 80132d0:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.MaxRxWindow = MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow;
 80132d2:	4b08      	ldr	r3, [pc, #32]	; (80132f4 <LoRaMacInitialization+0x464>)
 80132d4:	4a08      	ldr	r2, [pc, #32]	; (80132f8 <LoRaMacInitialization+0x468>)
 80132d6:	589b      	ldr	r3, [r3, r2]
 80132d8:	4a06      	ldr	r2, [pc, #24]	; (80132f4 <LoRaMacInitialization+0x464>)
 80132da:	4907      	ldr	r1, [pc, #28]	; (80132f8 <LoRaMacInitialization+0x468>)
 80132dc:	5852      	ldr	r2, [r2, r1]
 80132de:	691b      	ldr	r3, [r3, #16]
 80132e0:	2190      	movs	r1, #144	; 0x90
 80132e2:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1;
 80132e4:	4b03      	ldr	r3, [pc, #12]	; (80132f4 <LoRaMacInitialization+0x464>)
 80132e6:	e011      	b.n	801330c <LoRaMacInitialization+0x47c>
 80132e8:	08012d8d 	.word	0x08012d8d
 80132ec:	20000a44 	.word	0x20000a44
 80132f0:	0000048c 	.word	0x0000048c
 80132f4:	200005b8 	.word	0x200005b8
 80132f8:	00000484 	.word	0x00000484
 80132fc:	00000412 	.word	0x00000412
 8013300:	00000411 	.word	0x00000411
 8013304:	01000300 	.word	0x01000300
 8013308:	000003f6 	.word	0x000003f6
 801330c:	4a9a      	ldr	r2, [pc, #616]	; (8013578 <LoRaMacInitialization+0x6e8>)
 801330e:	589b      	ldr	r3, [r3, r2]
 8013310:	4a9a      	ldr	r2, [pc, #616]	; (801357c <LoRaMacInitialization+0x6ec>)
 8013312:	4999      	ldr	r1, [pc, #612]	; (8013578 <LoRaMacInitialization+0x6e8>)
 8013314:	5852      	ldr	r2, [r2, r1]
 8013316:	695b      	ldr	r3, [r3, #20]
 8013318:	2194      	movs	r1, #148	; 0x94
 801331a:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2;
 801331c:	4b97      	ldr	r3, [pc, #604]	; (801357c <LoRaMacInitialization+0x6ec>)
 801331e:	4a96      	ldr	r2, [pc, #600]	; (8013578 <LoRaMacInitialization+0x6e8>)
 8013320:	589b      	ldr	r3, [r3, r2]
 8013322:	4a96      	ldr	r2, [pc, #600]	; (801357c <LoRaMacInitialization+0x6ec>)
 8013324:	4994      	ldr	r1, [pc, #592]	; (8013578 <LoRaMacInitialization+0x6e8>)
 8013326:	5852      	ldr	r2, [r2, r1]
 8013328:	699b      	ldr	r3, [r3, #24]
 801332a:	2198      	movs	r1, #152	; 0x98
 801332c:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1;
 801332e:	4b93      	ldr	r3, [pc, #588]	; (801357c <LoRaMacInitialization+0x6ec>)
 8013330:	4a91      	ldr	r2, [pc, #580]	; (8013578 <LoRaMacInitialization+0x6e8>)
 8013332:	589b      	ldr	r3, [r3, r2]
 8013334:	4a91      	ldr	r2, [pc, #580]	; (801357c <LoRaMacInitialization+0x6ec>)
 8013336:	4990      	ldr	r1, [pc, #576]	; (8013578 <LoRaMacInitialization+0x6e8>)
 8013338:	5852      	ldr	r2, [r2, r1]
 801333a:	69db      	ldr	r3, [r3, #28]
 801333c:	219c      	movs	r1, #156	; 0x9c
 801333e:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2;
 8013340:	4b8e      	ldr	r3, [pc, #568]	; (801357c <LoRaMacInitialization+0x6ec>)
 8013342:	4a8d      	ldr	r2, [pc, #564]	; (8013578 <LoRaMacInitialization+0x6e8>)
 8013344:	589b      	ldr	r3, [r3, r2]
 8013346:	4a8d      	ldr	r2, [pc, #564]	; (801357c <LoRaMacInitialization+0x6ec>)
 8013348:	498b      	ldr	r1, [pc, #556]	; (8013578 <LoRaMacInitialization+0x6e8>)
 801334a:	5852      	ldr	r2, [r2, r1]
 801334c:	6a1b      	ldr	r3, [r3, #32]
 801334e:	21a0      	movs	r1, #160	; 0xa0
 8013350:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.ChannelsNbTrans = MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans;
 8013352:	4b8a      	ldr	r3, [pc, #552]	; (801357c <LoRaMacInitialization+0x6ec>)
 8013354:	4a88      	ldr	r2, [pc, #544]	; (8013578 <LoRaMacInitialization+0x6e8>)
 8013356:	589a      	ldr	r2, [r3, r2]
 8013358:	4b88      	ldr	r3, [pc, #544]	; (801357c <LoRaMacInitialization+0x6ec>)
 801335a:	4987      	ldr	r1, [pc, #540]	; (8013578 <LoRaMacInitialization+0x6e8>)
 801335c:	585b      	ldr	r3, [r3, r1]
 801335e:	2124      	movs	r1, #36	; 0x24
 8013360:	5c51      	ldrb	r1, [r2, r1]
 8013362:	22a4      	movs	r2, #164	; 0xa4
 8013364:	5499      	strb	r1, [r3, r2]

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8013366:	211c      	movs	r1, #28
 8013368:	187b      	adds	r3, r7, r1
 801336a:	2200      	movs	r2, #0
 801336c:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = NULL;
 801336e:	187b      	adds	r3, r7, r1
 8013370:	2200      	movs	r2, #0
 8013372:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8013374:	4b81      	ldr	r3, [pc, #516]	; (801357c <LoRaMacInitialization+0x6ec>)
 8013376:	4a80      	ldr	r2, [pc, #512]	; (8013578 <LoRaMacInitialization+0x6e8>)
 8013378:	589b      	ldr	r3, [r3, r2]
 801337a:	781b      	ldrb	r3, [r3, #0]
 801337c:	187a      	adds	r2, r7, r1
 801337e:	0011      	movs	r1, r2
 8013380:	0018      	movs	r0, r3
 8013382:	f003 fcc2 	bl	8016d0a <RegionInitDefaults>

    ResetMacParameters( );
 8013386:	f7fe fe19 	bl	8011fbc <ResetMacParameters>

    MacCtx.NvmCtx->PublicNetwork = true;
 801338a:	4b7c      	ldr	r3, [pc, #496]	; (801357c <LoRaMacInitialization+0x6ec>)
 801338c:	4a7a      	ldr	r2, [pc, #488]	; (8013578 <LoRaMacInitialization+0x6e8>)
 801338e:	589b      	ldr	r3, [r3, r2]
 8013390:	227d      	movs	r2, #125	; 0x7d
 8013392:	2101      	movs	r1, #1
 8013394:	5499      	strb	r1, [r3, r2]

    MacCtx.MacPrimitives = primitives;
 8013396:	4a79      	ldr	r2, [pc, #484]	; (801357c <LoRaMacInitialization+0x6ec>)
 8013398:	23d1      	movs	r3, #209	; 0xd1
 801339a:	009b      	lsls	r3, r3, #2
 801339c:	6979      	ldr	r1, [r7, #20]
 801339e:	50d1      	str	r1, [r2, r3]
    MacCtx.MacCallbacks = callbacks;
 80133a0:	4a76      	ldr	r2, [pc, #472]	; (801357c <LoRaMacInitialization+0x6ec>)
 80133a2:	23d2      	movs	r3, #210	; 0xd2
 80133a4:	009b      	lsls	r3, r3, #2
 80133a6:	6939      	ldr	r1, [r7, #16]
 80133a8:	50d1      	str	r1, [r2, r3]
    MacCtx.MacFlags.Value = 0;
 80133aa:	4b74      	ldr	r3, [pc, #464]	; (801357c <LoRaMacInitialization+0x6ec>)
 80133ac:	4a74      	ldr	r2, [pc, #464]	; (8013580 <LoRaMacInitialization+0x6f0>)
 80133ae:	2100      	movs	r1, #0
 80133b0:	5499      	strb	r1, [r3, r2]
    MacCtx.MacState = LORAMAC_STOPPED;
 80133b2:	4a72      	ldr	r2, [pc, #456]	; (801357c <LoRaMacInitialization+0x6ec>)
 80133b4:	23d0      	movs	r3, #208	; 0xd0
 80133b6:	009b      	lsls	r3, r3, #2
 80133b8:	2101      	movs	r1, #1
 80133ba:	50d1      	str	r1, [r2, r3]

    // Reset duty cycle times
    MacCtx.NvmCtx->LastTxDoneTime = 0;
 80133bc:	4b6f      	ldr	r3, [pc, #444]	; (801357c <LoRaMacInitialization+0x6ec>)
 80133be:	4a6e      	ldr	r2, [pc, #440]	; (8013578 <LoRaMacInitialization+0x6e8>)
 80133c0:	589a      	ldr	r2, [r3, r2]
 80133c2:	23a8      	movs	r3, #168	; 0xa8
 80133c4:	005b      	lsls	r3, r3, #1
 80133c6:	2100      	movs	r1, #0
 80133c8:	50d1      	str	r1, [r2, r3]
    MacCtx.NvmCtx->AggregatedTimeOff = 0;
 80133ca:	4b6c      	ldr	r3, [pc, #432]	; (801357c <LoRaMacInitialization+0x6ec>)
 80133cc:	4a6a      	ldr	r2, [pc, #424]	; (8013578 <LoRaMacInitialization+0x6e8>)
 80133ce:	589a      	ldr	r2, [r3, r2]
 80133d0:	23aa      	movs	r3, #170	; 0xaa
 80133d2:	005b      	lsls	r3, r3, #1
 80133d4:	2100      	movs	r1, #0
 80133d6:	50d1      	str	r1, [r2, r3]

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 80133d8:	4b6a      	ldr	r3, [pc, #424]	; (8013584 <LoRaMacInitialization+0x6f4>)
 80133da:	2201      	movs	r2, #1
 80133dc:	4251      	negs	r1, r2
 80133de:	486a      	ldr	r0, [pc, #424]	; (8013588 <LoRaMacInitialization+0x6f8>)
 80133e0:	2200      	movs	r2, #0
 80133e2:	9200      	str	r2, [sp, #0]
 80133e4:	2200      	movs	r2, #0
 80133e6:	f009 fbdb 	bl	801cba0 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 80133ea:	4b68      	ldr	r3, [pc, #416]	; (801358c <LoRaMacInitialization+0x6fc>)
 80133ec:	2201      	movs	r2, #1
 80133ee:	4251      	negs	r1, r2
 80133f0:	4867      	ldr	r0, [pc, #412]	; (8013590 <LoRaMacInitialization+0x700>)
 80133f2:	2200      	movs	r2, #0
 80133f4:	9200      	str	r2, [sp, #0]
 80133f6:	2200      	movs	r2, #0
 80133f8:	f009 fbd2 	bl	801cba0 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 80133fc:	4b65      	ldr	r3, [pc, #404]	; (8013594 <LoRaMacInitialization+0x704>)
 80133fe:	2201      	movs	r2, #1
 8013400:	4251      	negs	r1, r2
 8013402:	4865      	ldr	r0, [pc, #404]	; (8013598 <LoRaMacInitialization+0x708>)
 8013404:	2200      	movs	r2, #0
 8013406:	9200      	str	r2, [sp, #0]
 8013408:	2200      	movs	r2, #0
 801340a:	f009 fbc9 	bl	801cba0 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 801340e:	4b63      	ldr	r3, [pc, #396]	; (801359c <LoRaMacInitialization+0x70c>)
 8013410:	2201      	movs	r2, #1
 8013412:	4251      	negs	r1, r2
 8013414:	4862      	ldr	r0, [pc, #392]	; (80135a0 <LoRaMacInitialization+0x710>)
 8013416:	2200      	movs	r2, #0
 8013418:	9200      	str	r2, [sp, #0]
 801341a:	2200      	movs	r2, #0
 801341c:	f009 fbc0 	bl	801cba0 <UTIL_TIMER_Create>

    // Store the current initialization time
    MacCtx.NvmCtx->InitializationTime = SysTimeGetMcuTime( );
 8013420:	4b56      	ldr	r3, [pc, #344]	; (801357c <LoRaMacInitialization+0x6ec>)
 8013422:	4a55      	ldr	r2, [pc, #340]	; (8013578 <LoRaMacInitialization+0x6e8>)
 8013424:	589d      	ldr	r5, [r3, r2]
 8013426:	23ac      	movs	r3, #172	; 0xac
 8013428:	005c      	lsls	r4, r3, #1
 801342a:	003b      	movs	r3, r7
 801342c:	0018      	movs	r0, r3
 801342e:	f009 fb87 	bl	801cb40 <SysTimeGetMcuTime>
 8013432:	003a      	movs	r2, r7
 8013434:	192b      	adds	r3, r5, r4
 8013436:	ca03      	ldmia	r2!, {r0, r1}
 8013438:	c303      	stmia	r3!, {r0, r1}

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 801343a:	4a50      	ldr	r2, [pc, #320]	; (801357c <LoRaMacInitialization+0x6ec>)
 801343c:	23d3      	movs	r3, #211	; 0xd3
 801343e:	009b      	lsls	r3, r3, #2
 8013440:	4958      	ldr	r1, [pc, #352]	; (80135a4 <LoRaMacInitialization+0x714>)
 8013442:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8013444:	4a4d      	ldr	r2, [pc, #308]	; (801357c <LoRaMacInitialization+0x6ec>)
 8013446:	23d5      	movs	r3, #213	; 0xd5
 8013448:	009b      	lsls	r3, r3, #2
 801344a:	4957      	ldr	r1, [pc, #348]	; (80135a8 <LoRaMacInitialization+0x718>)
 801344c:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 801344e:	4a4b      	ldr	r2, [pc, #300]	; (801357c <LoRaMacInitialization+0x6ec>)
 8013450:	23d7      	movs	r3, #215	; 0xd7
 8013452:	009b      	lsls	r3, r3, #2
 8013454:	4955      	ldr	r1, [pc, #340]	; (80135ac <LoRaMacInitialization+0x71c>)
 8013456:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8013458:	4a48      	ldr	r2, [pc, #288]	; (801357c <LoRaMacInitialization+0x6ec>)
 801345a:	23d4      	movs	r3, #212	; 0xd4
 801345c:	009b      	lsls	r3, r3, #2
 801345e:	4954      	ldr	r1, [pc, #336]	; (80135b0 <LoRaMacInitialization+0x720>)
 8013460:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8013462:	4a46      	ldr	r2, [pc, #280]	; (801357c <LoRaMacInitialization+0x6ec>)
 8013464:	23d6      	movs	r3, #214	; 0xd6
 8013466:	009b      	lsls	r3, r3, #2
 8013468:	4952      	ldr	r1, [pc, #328]	; (80135b4 <LoRaMacInitialization+0x724>)
 801346a:	50d1      	str	r1, [r2, r3]
    Radio.Init( &MacCtx.RadioEvents );
 801346c:	4b52      	ldr	r3, [pc, #328]	; (80135b8 <LoRaMacInitialization+0x728>)
 801346e:	681b      	ldr	r3, [r3, #0]
 8013470:	4a52      	ldr	r2, [pc, #328]	; (80135bc <LoRaMacInitialization+0x72c>)
 8013472:	0010      	movs	r0, r2
 8013474:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( EventSecureElementNvmCtxChanged ) != SECURE_ELEMENT_SUCCESS )
 8013476:	4b52      	ldr	r3, [pc, #328]	; (80135c0 <LoRaMacInitialization+0x730>)
 8013478:	0018      	movs	r0, r3
 801347a:	f7fa f853 	bl	800d524 <SecureElementInit>
 801347e:	1e03      	subs	r3, r0, #0
 8013480:	d001      	beq.n	8013486 <LoRaMacInitialization+0x5f6>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8013482:	2311      	movs	r3, #17
 8013484:	e073      	b.n	801356e <LoRaMacInitialization+0x6de>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( EventCryptoNvmCtxChanged ) != LORAMAC_CRYPTO_SUCCESS )
 8013486:	4b4f      	ldr	r3, [pc, #316]	; (80135c4 <LoRaMacInitialization+0x734>)
 8013488:	0018      	movs	r0, r3
 801348a:	f002 fc0d 	bl	8015ca8 <LoRaMacCryptoInit>
 801348e:	1e03      	subs	r3, r0, #0
 8013490:	d001      	beq.n	8013496 <LoRaMacInitialization+0x606>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8013492:	2311      	movs	r3, #17
 8013494:	e06b      	b.n	801356e <LoRaMacInitialization+0x6de>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( EventCommandsNvmCtxChanged ) != LORAMAC_COMMANDS_SUCCESS )
 8013496:	4b4c      	ldr	r3, [pc, #304]	; (80135c8 <LoRaMacInitialization+0x738>)
 8013498:	0018      	movs	r0, r3
 801349a:	f001 fc0d 	bl	8014cb8 <LoRaMacCommandsInit>
 801349e:	1e03      	subs	r3, r0, #0
 80134a0:	d001      	beq.n	80134a6 <LoRaMacInitialization+0x616>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80134a2:	2313      	movs	r3, #19
 80134a4:	e063      	b.n	801356e <LoRaMacInitialization+0x6de>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( MacCtx.NvmCtx->MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 80134a6:	4b35      	ldr	r3, [pc, #212]	; (801357c <LoRaMacInitialization+0x6ec>)
 80134a8:	4a33      	ldr	r2, [pc, #204]	; (8013578 <LoRaMacInitialization+0x6e8>)
 80134aa:	589b      	ldr	r3, [r3, r2]
 80134ac:	3350      	adds	r3, #80	; 0x50
 80134ae:	0018      	movs	r0, r3
 80134b0:	f002 fd10 	bl	8015ed4 <LoRaMacCryptoSetMulticastReference>
 80134b4:	1e03      	subs	r3, r0, #0
 80134b6:	d001      	beq.n	80134bc <LoRaMacInitialization+0x62c>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80134b8:	2311      	movs	r3, #17
 80134ba:	e058      	b.n	801356e <LoRaMacInitialization+0x6de>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 80134bc:	4b3e      	ldr	r3, [pc, #248]	; (80135b8 <LoRaMacInitialization+0x728>)
 80134be:	695b      	ldr	r3, [r3, #20]
 80134c0:	4798      	blx	r3
 80134c2:	0003      	movs	r3, r0
 80134c4:	0018      	movs	r0, r3
 80134c6:	f006 f83f 	bl	8019548 <srand1>

    Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 80134ca:	4b3b      	ldr	r3, [pc, #236]	; (80135b8 <LoRaMacInitialization+0x728>)
 80134cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80134ce:	4a2b      	ldr	r2, [pc, #172]	; (801357c <LoRaMacInitialization+0x6ec>)
 80134d0:	4929      	ldr	r1, [pc, #164]	; (8013578 <LoRaMacInitialization+0x6e8>)
 80134d2:	5852      	ldr	r2, [r2, r1]
 80134d4:	217d      	movs	r1, #125	; 0x7d
 80134d6:	5c52      	ldrb	r2, [r2, r1]
 80134d8:	0010      	movs	r0, r2
 80134da:	4798      	blx	r3
    Radio.Sleep( );
 80134dc:	4b36      	ldr	r3, [pc, #216]	; (80135b8 <LoRaMacInitialization+0x728>)
 80134de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134e0:	4798      	blx	r3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 80134e2:	2144      	movs	r1, #68	; 0x44
 80134e4:	187b      	adds	r3, r7, r1
 80134e6:	2200      	movs	r2, #0
 80134e8:	601a      	str	r2, [r3, #0]
    classBCallbacks.MacProcessNotify = NULL;
 80134ea:	187b      	adds	r3, r7, r1
 80134ec:	2200      	movs	r2, #0
 80134ee:	605a      	str	r2, [r3, #4]
    if( callbacks != NULL )
 80134f0:	693b      	ldr	r3, [r7, #16]
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d007      	beq.n	8013506 <LoRaMacInitialization+0x676>
    {
        classBCallbacks.GetTemperatureLevel = callbacks->GetTemperatureLevel;
 80134f6:	693b      	ldr	r3, [r7, #16]
 80134f8:	685a      	ldr	r2, [r3, #4]
 80134fa:	187b      	adds	r3, r7, r1
 80134fc:	601a      	str	r2, [r3, #0]
        classBCallbacks.MacProcessNotify = callbacks->MacProcessNotify;
 80134fe:	693b      	ldr	r3, [r7, #16]
 8013500:	68da      	ldr	r2, [r3, #12]
 8013502:	187b      	adds	r3, r7, r1
 8013504:	605a      	str	r2, [r3, #4]
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8013506:	2124      	movs	r1, #36	; 0x24
 8013508:	187b      	adds	r3, r7, r1
 801350a:	4a30      	ldr	r2, [pc, #192]	; (80135cc <LoRaMacInitialization+0x73c>)
 801350c:	601a      	str	r2, [r3, #0]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 801350e:	187b      	adds	r3, r7, r1
 8013510:	4a2f      	ldr	r2, [pc, #188]	; (80135d0 <LoRaMacInitialization+0x740>)
 8013512:	605a      	str	r2, [r3, #4]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8013514:	187b      	adds	r3, r7, r1
 8013516:	4a2f      	ldr	r2, [pc, #188]	; (80135d4 <LoRaMacInitialization+0x744>)
 8013518:	609a      	str	r2, [r3, #8]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 801351a:	187b      	adds	r3, r7, r1
 801351c:	4a2e      	ldr	r2, [pc, #184]	; (80135d8 <LoRaMacInitialization+0x748>)
 801351e:	60da      	str	r2, [r3, #12]
    classBParams.LoRaMacDevAddr = &MacCtx.NvmCtx->DevAddr;
 8013520:	4b16      	ldr	r3, [pc, #88]	; (801357c <LoRaMacInitialization+0x6ec>)
 8013522:	4a15      	ldr	r2, [pc, #84]	; (8013578 <LoRaMacInitialization+0x6e8>)
 8013524:	589b      	ldr	r3, [r3, r2]
 8013526:	334c      	adds	r3, #76	; 0x4c
 8013528:	001a      	movs	r2, r3
 801352a:	187b      	adds	r3, r7, r1
 801352c:	611a      	str	r2, [r3, #16]
    classBParams.LoRaMacRegion = &MacCtx.NvmCtx->Region;
 801352e:	4b13      	ldr	r3, [pc, #76]	; (801357c <LoRaMacInitialization+0x6ec>)
 8013530:	4a11      	ldr	r2, [pc, #68]	; (8013578 <LoRaMacInitialization+0x6e8>)
 8013532:	589b      	ldr	r3, [r3, r2]
 8013534:	001a      	movs	r2, r3
 8013536:	187b      	adds	r3, r7, r1
 8013538:	615a      	str	r2, [r3, #20]
    classBParams.LoRaMacParams = &MacCtx.NvmCtx->MacParams;
 801353a:	4b10      	ldr	r3, [pc, #64]	; (801357c <LoRaMacInitialization+0x6ec>)
 801353c:	4a0e      	ldr	r2, [pc, #56]	; (8013578 <LoRaMacInitialization+0x6e8>)
 801353e:	589b      	ldr	r3, [r3, r2]
 8013540:	3384      	adds	r3, #132	; 0x84
 8013542:	001a      	movs	r2, r3
 8013544:	187b      	adds	r3, r7, r1
 8013546:	619a      	str	r2, [r3, #24]
    classBParams.MulticastChannels = &MacCtx.NvmCtx->MulticastChannelList[0];
 8013548:	4b0c      	ldr	r3, [pc, #48]	; (801357c <LoRaMacInitialization+0x6ec>)
 801354a:	4a0b      	ldr	r2, [pc, #44]	; (8013578 <LoRaMacInitialization+0x6e8>)
 801354c:	589b      	ldr	r3, [r3, r2]
 801354e:	3350      	adds	r3, #80	; 0x50
 8013550:	001a      	movs	r2, r3
 8013552:	0008      	movs	r0, r1
 8013554:	187b      	adds	r3, r7, r1
 8013556:	61da      	str	r2, [r3, #28]

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
 8013558:	4a20      	ldr	r2, [pc, #128]	; (80135dc <LoRaMacInitialization+0x74c>)
 801355a:	2344      	movs	r3, #68	; 0x44
 801355c:	18f9      	adds	r1, r7, r3
 801355e:	183b      	adds	r3, r7, r0
 8013560:	0018      	movs	r0, r3
 8013562:	f001 f994 	bl	801488e <LoRaMacClassBInit>

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8013566:	2001      	movs	r0, #1
 8013568:	f7fc fe10 	bl	801018c <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 801356c:	2300      	movs	r3, #0
}
 801356e:	0018      	movs	r0, r3
 8013570:	46bd      	mov	sp, r7
 8013572:	b016      	add	sp, #88	; 0x58
 8013574:	bdb0      	pop	{r4, r5, r7, pc}
 8013576:	46c0      	nop			; (mov r8, r8)
 8013578:	00000484 	.word	0x00000484
 801357c:	200005b8 	.word	0x200005b8
 8013580:	00000481 	.word	0x00000481
 8013584:	08010591 	.word	0x08010591
 8013588:	20000920 	.word	0x20000920
 801358c:	0801061d 	.word	0x0801061d
 8013590:	20000938 	.word	0x20000938
 8013594:	080106b1 	.word	0x080106b1
 8013598:	20000950 	.word	0x20000950
 801359c:	0801074d 	.word	0x0801074d
 80135a0:	200009b0 	.word	0x200009b0
 80135a4:	0800f075 	.word	0x0800f075
 80135a8:	0800f0e1 	.word	0x0800f0e1
 80135ac:	0800f1b5 	.word	0x0800f1b5
 80135b0:	0800f171 	.word	0x0800f171
 80135b4:	0800f1f9 	.word	0x0800f1f9
 80135b8:	0801fe28 	.word	0x0801fe28
 80135bc:	20000904 	.word	0x20000904
 80135c0:	08012d5d 	.word	0x08012d5d
 80135c4:	08012d4d 	.word	0x08012d4d
 80135c8:	08012d6d 	.word	0x08012d6d
 80135cc:	20000a1c 	.word	0x20000a1c
 80135d0:	200009d4 	.word	0x200009d4
 80135d4:	20000a08 	.word	0x20000a08
 80135d8:	20000a39 	.word	0x20000a39
 80135dc:	08012d7d 	.word	0x08012d7d

080135e0 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 80135e0:	b580      	push	{r7, lr}
 80135e2:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 80135e4:	4a04      	ldr	r2, [pc, #16]	; (80135f8 <LoRaMacStart+0x18>)
 80135e6:	23d0      	movs	r3, #208	; 0xd0
 80135e8:	009b      	lsls	r3, r3, #2
 80135ea:	2100      	movs	r1, #0
 80135ec:	50d1      	str	r1, [r2, r3]
    return LORAMAC_STATUS_OK;
 80135ee:	2300      	movs	r3, #0
}
 80135f0:	0018      	movs	r0, r3
 80135f2:	46bd      	mov	sp, r7
 80135f4:	bd80      	pop	{r7, pc}
 80135f6:	46c0      	nop			; (mov r8, r8)
 80135f8:	200005b8 	.word	0x200005b8

080135fc <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 80135fc:	b590      	push	{r4, r7, lr}
 80135fe:	b08b      	sub	sp, #44	; 0x2c
 8013600:	af00      	add	r7, sp, #0
 8013602:	0002      	movs	r2, r0
 8013604:	6039      	str	r1, [r7, #0]
 8013606:	1dfb      	adds	r3, r7, #7
 8013608:	701a      	strb	r2, [r3, #0]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 801360a:	4b4f      	ldr	r3, [pc, #316]	; (8013748 <LoRaMacQueryTxPossible+0x14c>)
 801360c:	4a4f      	ldr	r2, [pc, #316]	; (801374c <LoRaMacQueryTxPossible+0x150>)
 801360e:	589b      	ldr	r3, [r3, r2]
 8013610:	2280      	movs	r2, #128	; 0x80
 8013612:	589b      	ldr	r3, [r3, r2]
 8013614:	613b      	str	r3, [r7, #16]
    int8_t datarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 8013616:	4b4c      	ldr	r3, [pc, #304]	; (8013748 <LoRaMacQueryTxPossible+0x14c>)
 8013618:	4a4c      	ldr	r2, [pc, #304]	; (801374c <LoRaMacQueryTxPossible+0x150>)
 801361a:	589b      	ldr	r3, [r3, r2]
 801361c:	2205      	movs	r2, #5
 801361e:	569a      	ldrsb	r2, [r3, r2]
 8013620:	230f      	movs	r3, #15
 8013622:	18fb      	adds	r3, r7, r3
 8013624:	701a      	strb	r2, [r3, #0]
    int8_t txPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 8013626:	4b48      	ldr	r3, [pc, #288]	; (8013748 <LoRaMacQueryTxPossible+0x14c>)
 8013628:	4a48      	ldr	r2, [pc, #288]	; (801374c <LoRaMacQueryTxPossible+0x150>)
 801362a:	589b      	ldr	r3, [r3, r2]
 801362c:	2204      	movs	r2, #4
 801362e:	569a      	ldrsb	r2, [r3, r2]
 8013630:	230e      	movs	r3, #14
 8013632:	18fb      	adds	r3, r7, r3
 8013634:	701a      	strb	r2, [r3, #0]
    size_t macCmdsSize = 0;
 8013636:	2300      	movs	r3, #0
 8013638:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 801363a:	683b      	ldr	r3, [r7, #0]
 801363c:	2b00      	cmp	r3, #0
 801363e:	d101      	bne.n	8013644 <LoRaMacQueryTxPossible+0x48>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013640:	2303      	movs	r3, #3
 8013642:	e07d      	b.n	8013740 <LoRaMacQueryTxPossible+0x144>
    }

    // Setup ADR request
    adrNext.Version = MacCtx.NvmCtx->Version;
 8013644:	4b40      	ldr	r3, [pc, #256]	; (8013748 <LoRaMacQueryTxPossible+0x14c>)
 8013646:	4a41      	ldr	r2, [pc, #260]	; (801374c <LoRaMacQueryTxPossible+0x150>)
 8013648:	5899      	ldr	r1, [r3, r2]
 801364a:	2014      	movs	r0, #20
 801364c:	183b      	adds	r3, r7, r0
 801364e:	22b0      	movs	r2, #176	; 0xb0
 8013650:	0052      	lsls	r2, r2, #1
 8013652:	588a      	ldr	r2, [r1, r2]
 8013654:	601a      	str	r2, [r3, #0]
    adrNext.UpdateChanMask = false;
 8013656:	183b      	adds	r3, r7, r0
 8013658:	2200      	movs	r2, #0
 801365a:	711a      	strb	r2, [r3, #4]
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 801365c:	4b3a      	ldr	r3, [pc, #232]	; (8013748 <LoRaMacQueryTxPossible+0x14c>)
 801365e:	4a3b      	ldr	r2, [pc, #236]	; (801374c <LoRaMacQueryTxPossible+0x150>)
 8013660:	589b      	ldr	r3, [r3, r2]
 8013662:	227e      	movs	r2, #126	; 0x7e
 8013664:	5c9a      	ldrb	r2, [r3, r2]
 8013666:	183b      	adds	r3, r7, r0
 8013668:	715a      	strb	r2, [r3, #5]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 801366a:	4b37      	ldr	r3, [pc, #220]	; (8013748 <LoRaMacQueryTxPossible+0x14c>)
 801366c:	4a37      	ldr	r2, [pc, #220]	; (801374c <LoRaMacQueryTxPossible+0x150>)
 801366e:	589b      	ldr	r3, [r3, r2]
 8013670:	2280      	movs	r2, #128	; 0x80
 8013672:	589a      	ldr	r2, [r3, r2]
 8013674:	183b      	adds	r3, r7, r0
 8013676:	609a      	str	r2, [r3, #8]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8013678:	4a33      	ldr	r2, [pc, #204]	; (8013748 <LoRaMacQueryTxPossible+0x14c>)
 801367a:	23fd      	movs	r3, #253	; 0xfd
 801367c:	009b      	lsls	r3, r3, #2
 801367e:	5ad2      	ldrh	r2, [r2, r3]
 8013680:	183b      	adds	r3, r7, r0
 8013682:	819a      	strh	r2, [r3, #12]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8013684:	4b30      	ldr	r3, [pc, #192]	; (8013748 <LoRaMacQueryTxPossible+0x14c>)
 8013686:	4a32      	ldr	r2, [pc, #200]	; (8013750 <LoRaMacQueryTxPossible+0x154>)
 8013688:	5a9a      	ldrh	r2, [r3, r2]
 801368a:	183b      	adds	r3, r7, r0
 801368c:	81da      	strh	r2, [r3, #14]
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 801368e:	4b2e      	ldr	r3, [pc, #184]	; (8013748 <LoRaMacQueryTxPossible+0x14c>)
 8013690:	4a2e      	ldr	r2, [pc, #184]	; (801374c <LoRaMacQueryTxPossible+0x150>)
 8013692:	589b      	ldr	r3, [r3, r2]
 8013694:	2285      	movs	r2, #133	; 0x85
 8013696:	569a      	ldrsb	r2, [r3, r2]
 8013698:	183b      	adds	r3, r7, r0
 801369a:	741a      	strb	r2, [r3, #16]
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 801369c:	4b2a      	ldr	r3, [pc, #168]	; (8013748 <LoRaMacQueryTxPossible+0x14c>)
 801369e:	4a2b      	ldr	r2, [pc, #172]	; (801374c <LoRaMacQueryTxPossible+0x150>)
 80136a0:	589b      	ldr	r3, [r3, r2]
 80136a2:	2284      	movs	r2, #132	; 0x84
 80136a4:	569a      	ldrsb	r2, [r3, r2]
 80136a6:	183b      	adds	r3, r7, r0
 80136a8:	745a      	strb	r2, [r3, #17]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 80136aa:	4b27      	ldr	r3, [pc, #156]	; (8013748 <LoRaMacQueryTxPossible+0x14c>)
 80136ac:	4a27      	ldr	r2, [pc, #156]	; (801374c <LoRaMacQueryTxPossible+0x150>)
 80136ae:	589b      	ldr	r3, [r3, r2]
 80136b0:	22b8      	movs	r2, #184	; 0xb8
 80136b2:	5c9a      	ldrb	r2, [r3, r2]
 80136b4:	183b      	adds	r3, r7, r0
 80136b6:	749a      	strb	r2, [r3, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;
 80136b8:	4b23      	ldr	r3, [pc, #140]	; (8013748 <LoRaMacQueryTxPossible+0x14c>)
 80136ba:	4a24      	ldr	r2, [pc, #144]	; (801374c <LoRaMacQueryTxPossible+0x150>)
 80136bc:	589b      	ldr	r3, [r3, r2]
 80136be:	781a      	ldrb	r2, [r3, #0]
 80136c0:	183b      	adds	r3, r7, r0
 80136c2:	74da      	strb	r2, [r3, #19]

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 80136c4:	2310      	movs	r3, #16
 80136c6:	18fb      	adds	r3, r7, r3
 80136c8:	220e      	movs	r2, #14
 80136ca:	18ba      	adds	r2, r7, r2
 80136cc:	240f      	movs	r4, #15
 80136ce:	1939      	adds	r1, r7, r4
 80136d0:	1838      	adds	r0, r7, r0
 80136d2:	f001 f8c4 	bl	801485e <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80136d6:	193b      	adds	r3, r7, r4
 80136d8:	781b      	ldrb	r3, [r3, #0]
 80136da:	b25b      	sxtb	r3, r3
 80136dc:	0018      	movs	r0, r3
 80136de:	f7fd f9e7 	bl	8010ab0 <GetMaxAppPayloadWithoutFOptsLength>
 80136e2:	0003      	movs	r3, r0
 80136e4:	001a      	movs	r2, r3
 80136e6:	683b      	ldr	r3, [r7, #0]
 80136e8:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80136ea:	2308      	movs	r3, #8
 80136ec:	18fb      	adds	r3, r7, r3
 80136ee:	0018      	movs	r0, r3
 80136f0:	f001 fbf6 	bl	8014ee0 <LoRaMacCommandsGetSizeSerializedCmds>
 80136f4:	1e03      	subs	r3, r0, #0
 80136f6:	d001      	beq.n	80136fc <LoRaMacQueryTxPossible+0x100>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80136f8:	2313      	movs	r3, #19
 80136fa:	e021      	b.n	8013740 <LoRaMacQueryTxPossible+0x144>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 80136fc:	68bb      	ldr	r3, [r7, #8]
 80136fe:	2b0f      	cmp	r3, #15
 8013700:	d81a      	bhi.n	8013738 <LoRaMacQueryTxPossible+0x13c>
 8013702:	683b      	ldr	r3, [r7, #0]
 8013704:	785b      	ldrb	r3, [r3, #1]
 8013706:	001a      	movs	r2, r3
 8013708:	68bb      	ldr	r3, [r7, #8]
 801370a:	429a      	cmp	r2, r3
 801370c:	d314      	bcc.n	8013738 <LoRaMacQueryTxPossible+0x13c>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 801370e:	683b      	ldr	r3, [r7, #0]
 8013710:	785a      	ldrb	r2, [r3, #1]
 8013712:	68bb      	ldr	r3, [r7, #8]
 8013714:	b2db      	uxtb	r3, r3
 8013716:	1ad3      	subs	r3, r2, r3
 8013718:	b2da      	uxtb	r2, r3
 801371a:	683b      	ldr	r3, [r7, #0]
 801371c:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 801371e:	683b      	ldr	r3, [r7, #0]
 8013720:	785b      	ldrb	r3, [r3, #1]
 8013722:	0019      	movs	r1, r3
 8013724:	1dfb      	adds	r3, r7, #7
 8013726:	781a      	ldrb	r2, [r3, #0]
 8013728:	68bb      	ldr	r3, [r7, #8]
 801372a:	18d3      	adds	r3, r2, r3
 801372c:	4299      	cmp	r1, r3
 801372e:	d301      	bcc.n	8013734 <LoRaMacQueryTxPossible+0x138>
        {
            return LORAMAC_STATUS_OK;
 8013730:	2300      	movs	r3, #0
 8013732:	e005      	b.n	8013740 <LoRaMacQueryTxPossible+0x144>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8013734:	2308      	movs	r3, #8
 8013736:	e003      	b.n	8013740 <LoRaMacQueryTxPossible+0x144>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8013738:	683b      	ldr	r3, [r7, #0]
 801373a:	2200      	movs	r2, #0
 801373c:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 801373e:	2308      	movs	r3, #8
    }
}
 8013740:	0018      	movs	r0, r3
 8013742:	46bd      	mov	sp, r7
 8013744:	b00b      	add	sp, #44	; 0x2c
 8013746:	bd90      	pop	{r4, r7, pc}
 8013748:	200005b8 	.word	0x200005b8
 801374c:	00000484 	.word	0x00000484
 8013750:	000003f6 	.word	0x000003f6

08013754 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8013754:	b590      	push	{r4, r7, lr}
 8013756:	b087      	sub	sp, #28
 8013758:	af00      	add	r7, sp, #0
 801375a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 801375c:	2317      	movs	r3, #23
 801375e:	18fb      	adds	r3, r7, r3
 8013760:	2200      	movs	r2, #0
 8013762:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	2b00      	cmp	r3, #0
 8013768:	d101      	bne.n	801376e <LoRaMacMibGetRequestConfirm+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801376a:	2303      	movs	r3, #3
 801376c:	e146      	b.n	80139fc <LoRaMacMibGetRequestConfirm+0x2a8>
    }

    switch( mibGet->Type )
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	781b      	ldrb	r3, [r3, #0]
 8013772:	2b28      	cmp	r3, #40	; 0x28
 8013774:	d900      	bls.n	8013778 <LoRaMacMibGetRequestConfirm+0x24>
 8013776:	e135      	b.n	80139e4 <LoRaMacMibGetRequestConfirm+0x290>
 8013778:	009a      	lsls	r2, r3, #2
 801377a:	4ba2      	ldr	r3, [pc, #648]	; (8013a04 <LoRaMacMibGetRequestConfirm+0x2b0>)
 801377c:	18d3      	adds	r3, r2, r3
 801377e:	681b      	ldr	r3, [r3, #0]
 8013780:	469f      	mov	pc, r3
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = MacCtx.NvmCtx->DeviceClass;
 8013782:	4ba1      	ldr	r3, [pc, #644]	; (8013a08 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013784:	4aa1      	ldr	r2, [pc, #644]	; (8013a0c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013786:	589b      	ldr	r3, [r3, r2]
 8013788:	227c      	movs	r2, #124	; 0x7c
 801378a:	5c9a      	ldrb	r2, [r3, r2]
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	711a      	strb	r2, [r3, #4]
            break;
 8013790:	e131      	b.n	80139f6 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = MacCtx.NvmCtx->NetworkActivation;
 8013792:	4b9d      	ldr	r3, [pc, #628]	; (8013a08 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013794:	4a9d      	ldr	r2, [pc, #628]	; (8013a0c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013796:	589a      	ldr	r2, [r3, r2]
 8013798:	23b2      	movs	r3, #178	; 0xb2
 801379a:	005b      	lsls	r3, r3, #1
 801379c:	5cd2      	ldrb	r2, [r2, r3]
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	711a      	strb	r2, [r3, #4]
            break;
 80137a2:	e128      	b.n	80139f6 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 80137a4:	f7fa fb1e 	bl	800dde4 <SecureElementGetDevEui>
 80137a8:	0002      	movs	r2, r0
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	605a      	str	r2, [r3, #4]
            break;
 80137ae:	e122      	b.n	80139f6 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 80137b0:	f7fa fb3c 	bl	800de2c <SecureElementGetJoinEui>
 80137b4:	0002      	movs	r2, r0
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	605a      	str	r2, [r3, #4]
            break;
 80137ba:	e11c      	b.n	80139f6 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = MacCtx.NvmCtx->AdrCtrlOn;
 80137bc:	4b92      	ldr	r3, [pc, #584]	; (8013a08 <LoRaMacMibGetRequestConfirm+0x2b4>)
 80137be:	4a93      	ldr	r2, [pc, #588]	; (8013a0c <LoRaMacMibGetRequestConfirm+0x2b8>)
 80137c0:	589b      	ldr	r3, [r3, r2]
 80137c2:	227e      	movs	r2, #126	; 0x7e
 80137c4:	5c9a      	ldrb	r2, [r3, r2]
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	711a      	strb	r2, [r3, #4]
            break;
 80137ca:	e114      	b.n	80139f6 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = MacCtx.NvmCtx->NetID;
 80137cc:	4b8e      	ldr	r3, [pc, #568]	; (8013a08 <LoRaMacMibGetRequestConfirm+0x2b4>)
 80137ce:	4a8f      	ldr	r2, [pc, #572]	; (8013a0c <LoRaMacMibGetRequestConfirm+0x2b8>)
 80137d0:	589b      	ldr	r3, [r3, r2]
 80137d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	605a      	str	r2, [r3, #4]
            break;
 80137d8:	e10d      	b.n	80139f6 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = MacCtx.NvmCtx->DevAddr;
 80137da:	4b8b      	ldr	r3, [pc, #556]	; (8013a08 <LoRaMacMibGetRequestConfirm+0x2b4>)
 80137dc:	4a8b      	ldr	r2, [pc, #556]	; (8013a0c <LoRaMacMibGetRequestConfirm+0x2b8>)
 80137de:	589b      	ldr	r3, [r3, r2]
 80137e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	605a      	str	r2, [r3, #4]
            break;
 80137e6:	e106      	b.n	80139f6 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = MacCtx.NvmCtx->PublicNetwork;
 80137e8:	4b87      	ldr	r3, [pc, #540]	; (8013a08 <LoRaMacMibGetRequestConfirm+0x2b4>)
 80137ea:	4a88      	ldr	r2, [pc, #544]	; (8013a0c <LoRaMacMibGetRequestConfirm+0x2b8>)
 80137ec:	589b      	ldr	r3, [r3, r2]
 80137ee:	227d      	movs	r2, #125	; 0x7d
 80137f0:	5c9a      	ldrb	r2, [r3, r2]
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	711a      	strb	r2, [r3, #4]
            break;
 80137f6:	e0fe      	b.n	80139f6 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 80137f8:	4b83      	ldr	r3, [pc, #524]	; (8013a08 <LoRaMacMibGetRequestConfirm+0x2b4>)
 80137fa:	4a84      	ldr	r2, [pc, #528]	; (8013a0c <LoRaMacMibGetRequestConfirm+0x2b8>)
 80137fc:	589b      	ldr	r3, [r3, r2]
 80137fe:	22ca      	movs	r2, #202	; 0xca
 8013800:	5c9a      	ldrb	r2, [r3, r2]
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	711a      	strb	r2, [r3, #4]
            break;
 8013806:	e0f6      	b.n	80139f6 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8013808:	2110      	movs	r1, #16
 801380a:	187b      	adds	r3, r7, r1
 801380c:	221d      	movs	r2, #29
 801380e:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8013810:	4b7d      	ldr	r3, [pc, #500]	; (8013a08 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013812:	4a7e      	ldr	r2, [pc, #504]	; (8013a0c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013814:	589b      	ldr	r3, [r3, r2]
 8013816:	781b      	ldrb	r3, [r3, #0]
 8013818:	187a      	adds	r2, r7, r1
 801381a:	0011      	movs	r1, r2
 801381c:	0018      	movs	r0, r3
 801381e:	f003 fa38 	bl	8016c92 <RegionGetPhyParam>
 8013822:	0003      	movs	r3, r0
 8013824:	001a      	movs	r2, r3
 8013826:	210c      	movs	r1, #12
 8013828:	187b      	adds	r3, r7, r1
 801382a:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelList = phyParam.Channels;
 801382c:	187b      	adds	r3, r7, r1
 801382e:	681a      	ldr	r2, [r3, #0]
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	605a      	str	r2, [r3, #4]
            break;
 8013834:	e0df      	b.n	80139f6 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 8013836:	4b74      	ldr	r3, [pc, #464]	; (8013a08 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013838:	4a74      	ldr	r2, [pc, #464]	; (8013a0c <LoRaMacMibGetRequestConfirm+0x2b8>)
 801383a:	589a      	ldr	r2, [r3, r2]
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	21a8      	movs	r1, #168	; 0xa8
 8013840:	3304      	adds	r3, #4
 8013842:	1852      	adds	r2, r2, r1
 8013844:	ca03      	ldmia	r2!, {r0, r1}
 8013846:	c303      	stmia	r3!, {r0, r1}
            break;
 8013848:	e0d5      	b.n	80139f6 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 801384a:	4b6f      	ldr	r3, [pc, #444]	; (8013a08 <LoRaMacMibGetRequestConfirm+0x2b4>)
 801384c:	4a6f      	ldr	r2, [pc, #444]	; (8013a0c <LoRaMacMibGetRequestConfirm+0x2b8>)
 801384e:	589a      	ldr	r2, [r3, r2]
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	3304      	adds	r3, #4
 8013854:	3228      	adds	r2, #40	; 0x28
 8013856:	ca03      	ldmia	r2!, {r0, r1}
 8013858:	c303      	stmia	r3!, {r0, r1}
            break;
 801385a:	e0cc      	b.n	80139f6 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParams.RxCChannel;
 801385c:	4b6a      	ldr	r3, [pc, #424]	; (8013a08 <LoRaMacMibGetRequestConfirm+0x2b4>)
 801385e:	4a6b      	ldr	r2, [pc, #428]	; (8013a0c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013860:	589a      	ldr	r2, [r3, r2]
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	21b0      	movs	r1, #176	; 0xb0
 8013866:	3304      	adds	r3, #4
 8013868:	1852      	adds	r2, r2, r1
 801386a:	ca03      	ldmia	r2!, {r0, r1}
 801386c:	c303      	stmia	r3!, {r0, r1}
            break;
 801386e:	e0c2      	b.n	80139f6 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 8013870:	4b65      	ldr	r3, [pc, #404]	; (8013a08 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013872:	4a66      	ldr	r2, [pc, #408]	; (8013a0c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013874:	589a      	ldr	r2, [r3, r2]
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	3304      	adds	r3, #4
 801387a:	3230      	adds	r2, #48	; 0x30
 801387c:	ca03      	ldmia	r2!, {r0, r1}
 801387e:	c303      	stmia	r3!, {r0, r1}
            break;
 8013880:	e0b9      	b.n	80139f6 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8013882:	2110      	movs	r1, #16
 8013884:	187b      	adds	r3, r7, r1
 8013886:	221b      	movs	r2, #27
 8013888:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 801388a:	4b5f      	ldr	r3, [pc, #380]	; (8013a08 <LoRaMacMibGetRequestConfirm+0x2b4>)
 801388c:	4a5f      	ldr	r2, [pc, #380]	; (8013a0c <LoRaMacMibGetRequestConfirm+0x2b8>)
 801388e:	589b      	ldr	r3, [r3, r2]
 8013890:	781b      	ldrb	r3, [r3, #0]
 8013892:	187a      	adds	r2, r7, r1
 8013894:	0011      	movs	r1, r2
 8013896:	0018      	movs	r0, r3
 8013898:	f003 f9fb 	bl	8016c92 <RegionGetPhyParam>
 801389c:	0003      	movs	r3, r0
 801389e:	001a      	movs	r2, r3
 80138a0:	210c      	movs	r1, #12
 80138a2:	187b      	adds	r3, r7, r1
 80138a4:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 80138a6:	187b      	adds	r3, r7, r1
 80138a8:	681a      	ldr	r2, [r3, #0]
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	605a      	str	r2, [r3, #4]
            break;
 80138ae:	e0a2      	b.n	80139f6 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 80138b0:	2110      	movs	r1, #16
 80138b2:	187b      	adds	r3, r7, r1
 80138b4:	221a      	movs	r2, #26
 80138b6:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80138b8:	4b53      	ldr	r3, [pc, #332]	; (8013a08 <LoRaMacMibGetRequestConfirm+0x2b4>)
 80138ba:	4a54      	ldr	r2, [pc, #336]	; (8013a0c <LoRaMacMibGetRequestConfirm+0x2b8>)
 80138bc:	589b      	ldr	r3, [r3, r2]
 80138be:	781b      	ldrb	r3, [r3, #0]
 80138c0:	187a      	adds	r2, r7, r1
 80138c2:	0011      	movs	r1, r2
 80138c4:	0018      	movs	r0, r3
 80138c6:	f003 f9e4 	bl	8016c92 <RegionGetPhyParam>
 80138ca:	0003      	movs	r3, r0
 80138cc:	001a      	movs	r2, r3
 80138ce:	210c      	movs	r1, #12
 80138d0:	187b      	adds	r3, r7, r1
 80138d2:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 80138d4:	187b      	adds	r3, r7, r1
 80138d6:	681a      	ldr	r2, [r3, #0]
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	605a      	str	r2, [r3, #4]
            break;
 80138dc:	e08b      	b.n	80139f6 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 80138de:	4b4a      	ldr	r3, [pc, #296]	; (8013a08 <LoRaMacMibGetRequestConfirm+0x2b4>)
 80138e0:	4a4a      	ldr	r2, [pc, #296]	; (8013a0c <LoRaMacMibGetRequestConfirm+0x2b8>)
 80138e2:	589b      	ldr	r3, [r3, r2]
 80138e4:	22a4      	movs	r2, #164	; 0xa4
 80138e6:	5c9a      	ldrb	r2, [r3, r2]
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	711a      	strb	r2, [r3, #4]
            break;
 80138ec:	e083      	b.n	80139f6 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = MacCtx.NvmCtx->MacParams.MaxRxWindow;
 80138ee:	4b46      	ldr	r3, [pc, #280]	; (8013a08 <LoRaMacMibGetRequestConfirm+0x2b4>)
 80138f0:	4a46      	ldr	r2, [pc, #280]	; (8013a0c <LoRaMacMibGetRequestConfirm+0x2b8>)
 80138f2:	589b      	ldr	r3, [r3, r2]
 80138f4:	2290      	movs	r2, #144	; 0x90
 80138f6:	589a      	ldr	r2, [r3, r2]
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	605a      	str	r2, [r3, #4]
            break;
 80138fc:	e07b      	b.n	80139f6 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = MacCtx.NvmCtx->MacParams.ReceiveDelay1;
 80138fe:	4b42      	ldr	r3, [pc, #264]	; (8013a08 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013900:	4a42      	ldr	r2, [pc, #264]	; (8013a0c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013902:	589b      	ldr	r3, [r3, r2]
 8013904:	2294      	movs	r2, #148	; 0x94
 8013906:	589a      	ldr	r2, [r3, r2]
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	605a      	str	r2, [r3, #4]
            break;
 801390c:	e073      	b.n	80139f6 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay2;
 801390e:	4b3e      	ldr	r3, [pc, #248]	; (8013a08 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013910:	4a3e      	ldr	r2, [pc, #248]	; (8013a0c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013912:	589b      	ldr	r3, [r3, r2]
 8013914:	2298      	movs	r2, #152	; 0x98
 8013916:	589a      	ldr	r2, [r3, r2]
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	605a      	str	r2, [r3, #4]
            break;
 801391c:	e06b      	b.n	80139f6 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1;
 801391e:	4b3a      	ldr	r3, [pc, #232]	; (8013a08 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013920:	4a3a      	ldr	r2, [pc, #232]	; (8013a0c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013922:	589b      	ldr	r3, [r3, r2]
 8013924:	229c      	movs	r2, #156	; 0x9c
 8013926:	589a      	ldr	r2, [r3, r2]
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	605a      	str	r2, [r3, #4]
            break;
 801392c:	e063      	b.n	80139f6 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2;
 801392e:	4b36      	ldr	r3, [pc, #216]	; (8013a08 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013930:	4a36      	ldr	r2, [pc, #216]	; (8013a0c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013932:	589b      	ldr	r3, [r3, r2]
 8013934:	22a0      	movs	r2, #160	; 0xa0
 8013936:	589a      	ldr	r2, [r3, r2]
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	605a      	str	r2, [r3, #4]
            break;
 801393c:	e05b      	b.n	80139f6 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 801393e:	4b32      	ldr	r3, [pc, #200]	; (8013a08 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013940:	4a32      	ldr	r2, [pc, #200]	; (8013a0c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013942:	589b      	ldr	r3, [r3, r2]
 8013944:	2205      	movs	r2, #5
 8013946:	569a      	ldrsb	r2, [r3, r2]
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	711a      	strb	r2, [r3, #4]
            break;
 801394c:	e053      	b.n	80139f6 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 801394e:	4b2e      	ldr	r3, [pc, #184]	; (8013a08 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013950:	4a2e      	ldr	r2, [pc, #184]	; (8013a0c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013952:	589b      	ldr	r3, [r3, r2]
 8013954:	2285      	movs	r2, #133	; 0x85
 8013956:	569a      	ldrsb	r2, [r3, r2]
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	711a      	strb	r2, [r3, #4]
            break;
 801395c:	e04b      	b.n	80139f6 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 801395e:	4b2a      	ldr	r3, [pc, #168]	; (8013a08 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013960:	4a2a      	ldr	r2, [pc, #168]	; (8013a0c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013962:	589b      	ldr	r3, [r3, r2]
 8013964:	2204      	movs	r2, #4
 8013966:	569a      	ldrsb	r2, [r3, r2]
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	711a      	strb	r2, [r3, #4]
            break;
 801396c:	e043      	b.n	80139f6 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 801396e:	4b26      	ldr	r3, [pc, #152]	; (8013a08 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013970:	4a26      	ldr	r2, [pc, #152]	; (8013a0c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013972:	589b      	ldr	r3, [r3, r2]
 8013974:	2284      	movs	r2, #132	; 0x84
 8013976:	569a      	ldrsb	r2, [r3, r2]
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	711a      	strb	r2, [r3, #4]
            break;
 801397c:	e03b      	b.n	80139f6 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = MacCtx.NvmCtx->MacParams.SystemMaxRxError;
 801397e:	4b22      	ldr	r3, [pc, #136]	; (8013a08 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013980:	4a22      	ldr	r2, [pc, #136]	; (8013a0c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013982:	589b      	ldr	r3, [r3, r2]
 8013984:	2288      	movs	r2, #136	; 0x88
 8013986:	589a      	ldr	r2, [r3, r2]
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	605a      	str	r2, [r3, #4]
            break;
 801398c:	e033      	b.n	80139f6 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = MacCtx.NvmCtx->MacParams.MinRxSymbols;
 801398e:	4b1e      	ldr	r3, [pc, #120]	; (8013a08 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8013990:	4a1e      	ldr	r2, [pc, #120]	; (8013a0c <LoRaMacMibGetRequestConfirm+0x2b8>)
 8013992:	589b      	ldr	r3, [r3, r2]
 8013994:	228c      	movs	r2, #140	; 0x8c
 8013996:	5c9a      	ldrb	r2, [r3, r2]
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	711a      	strb	r2, [r3, #4]
            break;
 801399c:	e02b      	b.n	80139f6 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 801399e:	4b1a      	ldr	r3, [pc, #104]	; (8013a08 <LoRaMacMibGetRequestConfirm+0x2b4>)
 80139a0:	4a1a      	ldr	r2, [pc, #104]	; (8013a0c <LoRaMacMibGetRequestConfirm+0x2b8>)
 80139a2:	589b      	ldr	r3, [r3, r2]
 80139a4:	22c0      	movs	r2, #192	; 0xc0
 80139a6:	589a      	ldr	r2, [r3, r2]
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	605a      	str	r2, [r3, #4]
            break;
 80139ac:	e023      	b.n	80139f6 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = GetCtxs( );
 80139ae:	f7fe ff23 	bl	80127f8 <GetCtxs>
 80139b2:	0002      	movs	r2, r0
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	605a      	str	r2, [r3, #4]
            break;
 80139b8:	e01d      	b.n	80139f6 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 80139ba:	4b13      	ldr	r3, [pc, #76]	; (8013a08 <LoRaMacMibGetRequestConfirm+0x2b4>)
 80139bc:	4a13      	ldr	r2, [pc, #76]	; (8013a0c <LoRaMacMibGetRequestConfirm+0x2b8>)
 80139be:	589b      	ldr	r3, [r3, r2]
 80139c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	605a      	str	r2, [r3, #4]
            break;
 80139c6:	e016      	b.n	80139f6 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = MacCtx.NvmCtx->Version;
 80139c8:	4b0f      	ldr	r3, [pc, #60]	; (8013a08 <LoRaMacMibGetRequestConfirm+0x2b4>)
 80139ca:	4a10      	ldr	r2, [pc, #64]	; (8013a0c <LoRaMacMibGetRequestConfirm+0x2b8>)
 80139cc:	5899      	ldr	r1, [r3, r2]
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	22b0      	movs	r2, #176	; 0xb0
 80139d2:	0052      	lsls	r2, r2, #1
 80139d4:	588a      	ldr	r2, [r1, r2]
 80139d6:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 80139d8:	687c      	ldr	r4, [r7, #4]
 80139da:	f003 fb55 	bl	8017088 <RegionGetVersion>
 80139de:	0003      	movs	r3, r0
 80139e0:	60a3      	str	r3, [r4, #8]
            break;
 80139e2:	e008      	b.n	80139f6 <LoRaMacMibGetRequestConfirm+0x2a2>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 80139e4:	2317      	movs	r3, #23
 80139e6:	18fc      	adds	r4, r7, r3
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	0018      	movs	r0, r3
 80139ec:	f000 ffed 	bl	80149ca <LoRaMacClassBMibGetRequestConfirm>
 80139f0:	0003      	movs	r3, r0
 80139f2:	7023      	strb	r3, [r4, #0]
            break;
 80139f4:	46c0      	nop			; (mov r8, r8)
        }
    }
    return status;
 80139f6:	2317      	movs	r3, #23
 80139f8:	18fb      	adds	r3, r7, r3
 80139fa:	781b      	ldrb	r3, [r3, #0]
}
 80139fc:	0018      	movs	r0, r3
 80139fe:	46bd      	mov	sp, r7
 8013a00:	b007      	add	sp, #28
 8013a02:	bd90      	pop	{r4, r7, pc}
 8013a04:	0801f9dc 	.word	0x0801f9dc
 8013a08:	200005b8 	.word	0x200005b8
 8013a0c:	00000484 	.word	0x00000484

08013a10 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8013a10:	b590      	push	{r4, r7, lr}
 8013a12:	b087      	sub	sp, #28
 8013a14:	af00      	add	r7, sp, #0
 8013a16:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8013a18:	2317      	movs	r3, #23
 8013a1a:	18fb      	adds	r3, r7, r3
 8013a1c:	2200      	movs	r2, #0
 8013a1e:	701a      	strb	r2, [r3, #0]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d102      	bne.n	8013a2c <LoRaMacMibSetRequestConfirm+0x1c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013a26:	2303      	movs	r3, #3
 8013a28:	f000 fb74 	bl	8014114 <LoRaMacMibSetRequestConfirm+0x704>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8013a2c:	4ac3      	ldr	r2, [pc, #780]	; (8013d3c <LoRaMacMibSetRequestConfirm+0x32c>)
 8013a2e:	23d0      	movs	r3, #208	; 0xd0
 8013a30:	009b      	lsls	r3, r3, #2
 8013a32:	58d3      	ldr	r3, [r2, r3]
 8013a34:	2202      	movs	r2, #2
 8013a36:	4013      	ands	r3, r2
 8013a38:	d002      	beq.n	8013a40 <LoRaMacMibSetRequestConfirm+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 8013a3a:	2301      	movs	r3, #1
 8013a3c:	f000 fb6a 	bl	8014114 <LoRaMacMibSetRequestConfirm+0x704>
    }

    switch( mibSet->Type )
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	781b      	ldrb	r3, [r3, #0]
 8013a44:	2b27      	cmp	r3, #39	; 0x27
 8013a46:	d900      	bls.n	8013a4a <LoRaMacMibSetRequestConfirm+0x3a>
 8013a48:	e333      	b.n	80140b2 <LoRaMacMibSetRequestConfirm+0x6a2>
 8013a4a:	009a      	lsls	r2, r3, #2
 8013a4c:	4bbc      	ldr	r3, [pc, #752]	; (8013d40 <LoRaMacMibSetRequestConfirm+0x330>)
 8013a4e:	18d3      	adds	r3, r2, r3
 8013a50:	681b      	ldr	r3, [r3, #0]
 8013a52:	469f      	mov	pc, r3
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	791b      	ldrb	r3, [r3, #4]
 8013a58:	2217      	movs	r2, #23
 8013a5a:	18bc      	adds	r4, r7, r2
 8013a5c:	0018      	movs	r0, r3
 8013a5e:	f7fc ff07 	bl	8010870 <SwitchClass>
 8013a62:	0003      	movs	r3, r0
 8013a64:	7023      	strb	r3, [r4, #0]
            break;
 8013a66:	e34e      	b.n	8014106 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	791b      	ldrb	r3, [r3, #4]
 8013a6c:	2b02      	cmp	r3, #2
 8013a6e:	d008      	beq.n	8013a82 <LoRaMacMibSetRequestConfirm+0x72>
            {
                MacCtx.NvmCtx->NetworkActivation = mibSet->Param.NetworkActivation;
 8013a70:	4bb2      	ldr	r3, [pc, #712]	; (8013d3c <LoRaMacMibSetRequestConfirm+0x32c>)
 8013a72:	4ab4      	ldr	r2, [pc, #720]	; (8013d44 <LoRaMacMibSetRequestConfirm+0x334>)
 8013a74:	589a      	ldr	r2, [r3, r2]
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	7919      	ldrb	r1, [r3, #4]
 8013a7a:	23b2      	movs	r3, #178	; 0xb2
 8013a7c:	005b      	lsls	r3, r3, #1
 8013a7e:	54d1      	strb	r1, [r2, r3]
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013a80:	e341      	b.n	8014106 <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013a82:	2317      	movs	r3, #23
 8013a84:	18fb      	adds	r3, r7, r3
 8013a86:	2203      	movs	r2, #3
 8013a88:	701a      	strb	r2, [r3, #0]
            break;
 8013a8a:	e33c      	b.n	8014106 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	685b      	ldr	r3, [r3, #4]
 8013a90:	0018      	movs	r0, r3
 8013a92:	f7fa f98b 	bl	800ddac <SecureElementSetDevEui>
 8013a96:	1e03      	subs	r3, r0, #0
 8013a98:	d100      	bne.n	8013a9c <LoRaMacMibSetRequestConfirm+0x8c>
 8013a9a:	e319      	b.n	80140d0 <LoRaMacMibSetRequestConfirm+0x6c0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013a9c:	2317      	movs	r3, #23
 8013a9e:	18fb      	adds	r3, r7, r3
 8013aa0:	2203      	movs	r2, #3
 8013aa2:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013aa4:	e314      	b.n	80140d0 <LoRaMacMibSetRequestConfirm+0x6c0>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	685b      	ldr	r3, [r3, #4]
 8013aaa:	0018      	movs	r0, r3
 8013aac:	f7fa f9a2 	bl	800ddf4 <SecureElementSetJoinEui>
 8013ab0:	1e03      	subs	r3, r0, #0
 8013ab2:	d100      	bne.n	8013ab6 <LoRaMacMibSetRequestConfirm+0xa6>
 8013ab4:	e30e      	b.n	80140d4 <LoRaMacMibSetRequestConfirm+0x6c4>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013ab6:	2317      	movs	r3, #23
 8013ab8:	18fb      	adds	r3, r7, r3
 8013aba:	2203      	movs	r2, #3
 8013abc:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013abe:	e309      	b.n	80140d4 <LoRaMacMibSetRequestConfirm+0x6c4>
        }
        case MIB_ADR:
        {
            MacCtx.NvmCtx->AdrCtrlOn = mibSet->Param.AdrEnable;
 8013ac0:	4b9e      	ldr	r3, [pc, #632]	; (8013d3c <LoRaMacMibSetRequestConfirm+0x32c>)
 8013ac2:	4aa0      	ldr	r2, [pc, #640]	; (8013d44 <LoRaMacMibSetRequestConfirm+0x334>)
 8013ac4:	589b      	ldr	r3, [r3, r2]
 8013ac6:	687a      	ldr	r2, [r7, #4]
 8013ac8:	7911      	ldrb	r1, [r2, #4]
 8013aca:	227e      	movs	r2, #126	; 0x7e
 8013acc:	5499      	strb	r1, [r3, r2]
            break;
 8013ace:	e31a      	b.n	8014106 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_NET_ID:
        {
            MacCtx.NvmCtx->NetID = mibSet->Param.NetID;
 8013ad0:	4b9a      	ldr	r3, [pc, #616]	; (8013d3c <LoRaMacMibSetRequestConfirm+0x32c>)
 8013ad2:	4a9c      	ldr	r2, [pc, #624]	; (8013d44 <LoRaMacMibSetRequestConfirm+0x334>)
 8013ad4:	589b      	ldr	r3, [r3, r2]
 8013ad6:	687a      	ldr	r2, [r7, #4]
 8013ad8:	6852      	ldr	r2, [r2, #4]
 8013ada:	649a      	str	r2, [r3, #72]	; 0x48
            break;
 8013adc:	e313      	b.n	8014106 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_DEV_ADDR:
        {
            MacCtx.NvmCtx->DevAddr = mibSet->Param.DevAddr;
 8013ade:	4b97      	ldr	r3, [pc, #604]	; (8013d3c <LoRaMacMibSetRequestConfirm+0x32c>)
 8013ae0:	4a98      	ldr	r2, [pc, #608]	; (8013d44 <LoRaMacMibSetRequestConfirm+0x334>)
 8013ae2:	589b      	ldr	r3, [r3, r2]
 8013ae4:	687a      	ldr	r2, [r7, #4]
 8013ae6:	6852      	ldr	r2, [r2, #4]
 8013ae8:	64da      	str	r2, [r3, #76]	; 0x4c
            break;
 8013aea:	e30c      	b.n	8014106 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	685b      	ldr	r3, [r3, #4]
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d00a      	beq.n	8013b0a <LoRaMacMibSetRequestConfirm+0xfa>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	685b      	ldr	r3, [r3, #4]
 8013af8:	0019      	movs	r1, r3
 8013afa:	2000      	movs	r0, #0
 8013afc:	f002 fa00 	bl	8015f00 <LoRaMacCryptoSetKey>
 8013b00:	1e03      	subs	r3, r0, #0
 8013b02:	d100      	bne.n	8013b06 <LoRaMacMibSetRequestConfirm+0xf6>
 8013b04:	e2e8      	b.n	80140d8 <LoRaMacMibSetRequestConfirm+0x6c8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013b06:	2311      	movs	r3, #17
 8013b08:	e304      	b.n	8014114 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013b0a:	2317      	movs	r3, #23
 8013b0c:	18fb      	adds	r3, r7, r3
 8013b0e:	2203      	movs	r2, #3
 8013b10:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013b12:	e2e1      	b.n	80140d8 <LoRaMacMibSetRequestConfirm+0x6c8>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	685b      	ldr	r3, [r3, #4]
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	d00a      	beq.n	8013b32 <LoRaMacMibSetRequestConfirm+0x122>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	685b      	ldr	r3, [r3, #4]
 8013b20:	0019      	movs	r1, r3
 8013b22:	2001      	movs	r0, #1
 8013b24:	f002 f9ec 	bl	8015f00 <LoRaMacCryptoSetKey>
 8013b28:	1e03      	subs	r3, r0, #0
 8013b2a:	d100      	bne.n	8013b2e <LoRaMacMibSetRequestConfirm+0x11e>
 8013b2c:	e2d6      	b.n	80140dc <LoRaMacMibSetRequestConfirm+0x6cc>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013b2e:	2311      	movs	r3, #17
 8013b30:	e2f0      	b.n	8014114 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013b32:	2317      	movs	r3, #23
 8013b34:	18fb      	adds	r3, r7, r3
 8013b36:	2203      	movs	r2, #3
 8013b38:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013b3a:	e2cf      	b.n	80140dc <LoRaMacMibSetRequestConfirm+0x6cc>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	685b      	ldr	r3, [r3, #4]
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d00a      	beq.n	8013b5a <LoRaMacMibSetRequestConfirm+0x14a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	685b      	ldr	r3, [r3, #4]
 8013b48:	0019      	movs	r1, r3
 8013b4a:	2002      	movs	r0, #2
 8013b4c:	f002 f9d8 	bl	8015f00 <LoRaMacCryptoSetKey>
 8013b50:	1e03      	subs	r3, r0, #0
 8013b52:	d100      	bne.n	8013b56 <LoRaMacMibSetRequestConfirm+0x146>
 8013b54:	e2c4      	b.n	80140e0 <LoRaMacMibSetRequestConfirm+0x6d0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013b56:	2311      	movs	r3, #17
 8013b58:	e2dc      	b.n	8014114 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013b5a:	2317      	movs	r3, #23
 8013b5c:	18fb      	adds	r3, r7, r3
 8013b5e:	2203      	movs	r2, #3
 8013b60:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013b62:	e2bd      	b.n	80140e0 <LoRaMacMibSetRequestConfirm+0x6d0>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	685b      	ldr	r3, [r3, #4]
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d00a      	beq.n	8013b82 <LoRaMacMibSetRequestConfirm+0x172>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	685b      	ldr	r3, [r3, #4]
 8013b70:	0019      	movs	r1, r3
 8013b72:	2003      	movs	r0, #3
 8013b74:	f002 f9c4 	bl	8015f00 <LoRaMacCryptoSetKey>
 8013b78:	1e03      	subs	r3, r0, #0
 8013b7a:	d100      	bne.n	8013b7e <LoRaMacMibSetRequestConfirm+0x16e>
 8013b7c:	e2b2      	b.n	80140e4 <LoRaMacMibSetRequestConfirm+0x6d4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013b7e:	2311      	movs	r3, #17
 8013b80:	e2c8      	b.n	8014114 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013b82:	2317      	movs	r3, #23
 8013b84:	18fb      	adds	r3, r7, r3
 8013b86:	2203      	movs	r2, #3
 8013b88:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013b8a:	e2ab      	b.n	80140e4 <LoRaMacMibSetRequestConfirm+0x6d4>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	685b      	ldr	r3, [r3, #4]
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d00a      	beq.n	8013baa <LoRaMacMibSetRequestConfirm+0x19a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	685b      	ldr	r3, [r3, #4]
 8013b98:	0019      	movs	r1, r3
 8013b9a:	207f      	movs	r0, #127	; 0x7f
 8013b9c:	f002 f9b0 	bl	8015f00 <LoRaMacCryptoSetKey>
 8013ba0:	1e03      	subs	r3, r0, #0
 8013ba2:	d100      	bne.n	8013ba6 <LoRaMacMibSetRequestConfirm+0x196>
 8013ba4:	e2a0      	b.n	80140e8 <LoRaMacMibSetRequestConfirm+0x6d8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013ba6:	2311      	movs	r3, #17
 8013ba8:	e2b4      	b.n	8014114 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013baa:	2317      	movs	r3, #23
 8013bac:	18fb      	adds	r3, r7, r3
 8013bae:	2203      	movs	r2, #3
 8013bb0:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013bb2:	e299      	b.n	80140e8 <LoRaMacMibSetRequestConfirm+0x6d8>
        }
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	685b      	ldr	r3, [r3, #4]
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	d00a      	beq.n	8013bd2 <LoRaMacMibSetRequestConfirm+0x1c2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	685b      	ldr	r3, [r3, #4]
 8013bc0:	0019      	movs	r1, r3
 8013bc2:	2080      	movs	r0, #128	; 0x80
 8013bc4:	f002 f99c 	bl	8015f00 <LoRaMacCryptoSetKey>
 8013bc8:	1e03      	subs	r3, r0, #0
 8013bca:	d100      	bne.n	8013bce <LoRaMacMibSetRequestConfirm+0x1be>
 8013bcc:	e28e      	b.n	80140ec <LoRaMacMibSetRequestConfirm+0x6dc>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013bce:	2311      	movs	r3, #17
 8013bd0:	e2a0      	b.n	8014114 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013bd2:	2317      	movs	r3, #23
 8013bd4:	18fb      	adds	r3, r7, r3
 8013bd6:	2203      	movs	r2, #3
 8013bd8:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013bda:	e287      	b.n	80140ec <LoRaMacMibSetRequestConfirm+0x6dc>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	685b      	ldr	r3, [r3, #4]
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d00a      	beq.n	8013bfa <LoRaMacMibSetRequestConfirm+0x1ea>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	685b      	ldr	r3, [r3, #4]
 8013be8:	0019      	movs	r1, r3
 8013bea:	2081      	movs	r0, #129	; 0x81
 8013bec:	f002 f988 	bl	8015f00 <LoRaMacCryptoSetKey>
 8013bf0:	1e03      	subs	r3, r0, #0
 8013bf2:	d100      	bne.n	8013bf6 <LoRaMacMibSetRequestConfirm+0x1e6>
 8013bf4:	e27c      	b.n	80140f0 <LoRaMacMibSetRequestConfirm+0x6e0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013bf6:	2311      	movs	r3, #17
 8013bf8:	e28c      	b.n	8014114 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013bfa:	2317      	movs	r3, #23
 8013bfc:	18fb      	adds	r3, r7, r3
 8013bfe:	2203      	movs	r2, #3
 8013c00:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013c02:	e275      	b.n	80140f0 <LoRaMacMibSetRequestConfirm+0x6e0>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	685b      	ldr	r3, [r3, #4]
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d00a      	beq.n	8013c22 <LoRaMacMibSetRequestConfirm+0x212>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	685b      	ldr	r3, [r3, #4]
 8013c10:	0019      	movs	r1, r3
 8013c12:	2082      	movs	r0, #130	; 0x82
 8013c14:	f002 f974 	bl	8015f00 <LoRaMacCryptoSetKey>
 8013c18:	1e03      	subs	r3, r0, #0
 8013c1a:	d100      	bne.n	8013c1e <LoRaMacMibSetRequestConfirm+0x20e>
 8013c1c:	e26a      	b.n	80140f4 <LoRaMacMibSetRequestConfirm+0x6e4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8013c1e:	2311      	movs	r3, #17
 8013c20:	e278      	b.n	8014114 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013c22:	2317      	movs	r3, #23
 8013c24:	18fb      	adds	r3, r7, r3
 8013c26:	2203      	movs	r2, #3
 8013c28:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013c2a:	e263      	b.n	80140f4 <LoRaMacMibSetRequestConfirm+0x6e4>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 1 */
        case MIB_PUBLIC_NETWORK:
        {
            MacCtx.NvmCtx->PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8013c2c:	4b43      	ldr	r3, [pc, #268]	; (8013d3c <LoRaMacMibSetRequestConfirm+0x32c>)
 8013c2e:	4a45      	ldr	r2, [pc, #276]	; (8013d44 <LoRaMacMibSetRequestConfirm+0x334>)
 8013c30:	589b      	ldr	r3, [r3, r2]
 8013c32:	687a      	ldr	r2, [r7, #4]
 8013c34:	7911      	ldrb	r1, [r2, #4]
 8013c36:	227d      	movs	r2, #125	; 0x7d
 8013c38:	5499      	strb	r1, [r3, r2]
            Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 8013c3a:	4b43      	ldr	r3, [pc, #268]	; (8013d48 <LoRaMacMibSetRequestConfirm+0x338>)
 8013c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013c3e:	4a3f      	ldr	r2, [pc, #252]	; (8013d3c <LoRaMacMibSetRequestConfirm+0x32c>)
 8013c40:	4940      	ldr	r1, [pc, #256]	; (8013d44 <LoRaMacMibSetRequestConfirm+0x334>)
 8013c42:	5852      	ldr	r2, [r2, r1]
 8013c44:	217d      	movs	r1, #125	; 0x7d
 8013c46:	5c52      	ldrb	r2, [r2, r1]
 8013c48:	0010      	movs	r0, r2
 8013c4a:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 8013c4c:	4b3e      	ldr	r3, [pc, #248]	; (8013d48 <LoRaMacMibSetRequestConfirm+0x338>)
 8013c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c50:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 8013c52:	e258      	b.n	8014106 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_REPEATER_SUPPORT:
        {
            MacCtx.NvmCtx->RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8013c54:	4b39      	ldr	r3, [pc, #228]	; (8013d3c <LoRaMacMibSetRequestConfirm+0x32c>)
 8013c56:	4a3b      	ldr	r2, [pc, #236]	; (8013d44 <LoRaMacMibSetRequestConfirm+0x334>)
 8013c58:	589b      	ldr	r3, [r3, r2]
 8013c5a:	687a      	ldr	r2, [r7, #4]
 8013c5c:	7911      	ldrb	r1, [r2, #4]
 8013c5e:	22ca      	movs	r2, #202	; 0xca
 8013c60:	5499      	strb	r1, [r3, r2]
            break;
 8013c62:	e250      	b.n	8014106 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	7a1b      	ldrb	r3, [r3, #8]
 8013c68:	b25a      	sxtb	r2, r3
 8013c6a:	2108      	movs	r1, #8
 8013c6c:	187b      	adds	r3, r7, r1
 8013c6e:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8013c70:	4b32      	ldr	r3, [pc, #200]	; (8013d3c <LoRaMacMibSetRequestConfirm+0x32c>)
 8013c72:	4a34      	ldr	r2, [pc, #208]	; (8013d44 <LoRaMacMibSetRequestConfirm+0x334>)
 8013c74:	589b      	ldr	r3, [r3, r2]
 8013c76:	22b9      	movs	r2, #185	; 0xb9
 8013c78:	5c9a      	ldrb	r2, [r3, r2]
 8013c7a:	187b      	adds	r3, r7, r1
 8013c7c:	705a      	strb	r2, [r3, #1]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) != true )
 8013c7e:	4b2f      	ldr	r3, [pc, #188]	; (8013d3c <LoRaMacMibSetRequestConfirm+0x32c>)
 8013c80:	4a30      	ldr	r2, [pc, #192]	; (8013d44 <LoRaMacMibSetRequestConfirm+0x334>)
 8013c82:	589b      	ldr	r3, [r3, r2]
 8013c84:	781b      	ldrb	r3, [r3, #0]
 8013c86:	1879      	adds	r1, r7, r1
 8013c88:	2207      	movs	r2, #7
 8013c8a:	0018      	movs	r0, r3
 8013c8c:	f003 f868 	bl	8016d60 <RegionVerify>
 8013c90:	0003      	movs	r3, r0
 8013c92:	001a      	movs	r2, r3
 8013c94:	2301      	movs	r3, #1
 8013c96:	4053      	eors	r3, r2
 8013c98:	b2db      	uxtb	r3, r3
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d004      	beq.n	8013ca8 <LoRaMacMibSetRequestConfirm+0x298>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013c9e:	2317      	movs	r3, #23
 8013ca0:	18fb      	adds	r3, r7, r3
 8013ca2:	2203      	movs	r2, #3
 8013ca4:	701a      	strb	r2, [r3, #0]
                {
                    MacCtx.NvmCtx->MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 8013ca6:	e22e      	b.n	8014106 <LoRaMacMibSetRequestConfirm+0x6f6>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	685a      	ldr	r2, [r3, #4]
 8013cac:	2108      	movs	r1, #8
 8013cae:	187b      	adds	r3, r7, r1
 8013cb0:	601a      	str	r2, [r3, #0]
                if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_FREQUENCY ) != true )
 8013cb2:	4b22      	ldr	r3, [pc, #136]	; (8013d3c <LoRaMacMibSetRequestConfirm+0x32c>)
 8013cb4:	4a23      	ldr	r2, [pc, #140]	; (8013d44 <LoRaMacMibSetRequestConfirm+0x334>)
 8013cb6:	589b      	ldr	r3, [r3, r2]
 8013cb8:	781b      	ldrb	r3, [r3, #0]
 8013cba:	1879      	adds	r1, r7, r1
 8013cbc:	2200      	movs	r2, #0
 8013cbe:	0018      	movs	r0, r3
 8013cc0:	f003 f84e 	bl	8016d60 <RegionVerify>
 8013cc4:	0003      	movs	r3, r0
 8013cc6:	001a      	movs	r2, r3
 8013cc8:	2301      	movs	r3, #1
 8013cca:	4053      	eors	r3, r2
 8013ccc:	b2db      	uxtb	r3, r3
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d004      	beq.n	8013cdc <LoRaMacMibSetRequestConfirm+0x2cc>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013cd2:	2317      	movs	r3, #23
 8013cd4:	18fb      	adds	r3, r7, r3
 8013cd6:	2203      	movs	r2, #3
 8013cd8:	701a      	strb	r2, [r3, #0]
            break;
 8013cda:	e214      	b.n	8014106 <LoRaMacMibSetRequestConfirm+0x6f6>
                    MacCtx.NvmCtx->MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8013cdc:	4b17      	ldr	r3, [pc, #92]	; (8013d3c <LoRaMacMibSetRequestConfirm+0x32c>)
 8013cde:	4a19      	ldr	r2, [pc, #100]	; (8013d44 <LoRaMacMibSetRequestConfirm+0x334>)
 8013ce0:	589b      	ldr	r3, [r3, r2]
 8013ce2:	21a8      	movs	r1, #168	; 0xa8
 8013ce4:	687a      	ldr	r2, [r7, #4]
 8013ce6:	185b      	adds	r3, r3, r1
 8013ce8:	3204      	adds	r2, #4
 8013cea:	ca03      	ldmia	r2!, {r0, r1}
 8013cec:	c303      	stmia	r3!, {r0, r1}
            break;
 8013cee:	e20a      	b.n	8014106 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	7a1b      	ldrb	r3, [r3, #8]
 8013cf4:	b25a      	sxtb	r2, r3
 8013cf6:	2108      	movs	r1, #8
 8013cf8:	187b      	adds	r3, r7, r1
 8013cfa:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8013cfc:	4b0f      	ldr	r3, [pc, #60]	; (8013d3c <LoRaMacMibSetRequestConfirm+0x32c>)
 8013cfe:	4a11      	ldr	r2, [pc, #68]	; (8013d44 <LoRaMacMibSetRequestConfirm+0x334>)
 8013d00:	589b      	ldr	r3, [r3, r2]
 8013d02:	22b9      	movs	r2, #185	; 0xb9
 8013d04:	5c9a      	ldrb	r2, [r3, r2]
 8013d06:	187b      	adds	r3, r7, r1
 8013d08:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 8013d0a:	4b0c      	ldr	r3, [pc, #48]	; (8013d3c <LoRaMacMibSetRequestConfirm+0x32c>)
 8013d0c:	4a0d      	ldr	r2, [pc, #52]	; (8013d44 <LoRaMacMibSetRequestConfirm+0x334>)
 8013d0e:	589b      	ldr	r3, [r3, r2]
 8013d10:	781b      	ldrb	r3, [r3, #0]
 8013d12:	1879      	adds	r1, r7, r1
 8013d14:	2207      	movs	r2, #7
 8013d16:	0018      	movs	r0, r3
 8013d18:	f003 f822 	bl	8016d60 <RegionVerify>
 8013d1c:	1e03      	subs	r3, r0, #0
 8013d1e:	d008      	beq.n	8013d32 <LoRaMacMibSetRequestConfirm+0x322>
            {
                MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8013d20:	4b06      	ldr	r3, [pc, #24]	; (8013d3c <LoRaMacMibSetRequestConfirm+0x32c>)
 8013d22:	4a08      	ldr	r2, [pc, #32]	; (8013d44 <LoRaMacMibSetRequestConfirm+0x334>)
 8013d24:	589b      	ldr	r3, [r3, r2]
 8013d26:	687a      	ldr	r2, [r7, #4]
 8013d28:	3328      	adds	r3, #40	; 0x28
 8013d2a:	3204      	adds	r2, #4
 8013d2c:	ca03      	ldmia	r2!, {r0, r1}
 8013d2e:	c303      	stmia	r3!, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013d30:	e1e9      	b.n	8014106 <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013d32:	2317      	movs	r3, #23
 8013d34:	18fb      	adds	r3, r7, r3
 8013d36:	2203      	movs	r2, #3
 8013d38:	701a      	strb	r2, [r3, #0]
            break;
 8013d3a:	e1e4      	b.n	8014106 <LoRaMacMibSetRequestConfirm+0x6f6>
 8013d3c:	200005b8 	.word	0x200005b8
 8013d40:	0801fa80 	.word	0x0801fa80
 8013d44:	00000484 	.word	0x00000484
 8013d48:	0801fe28 	.word	0x0801fe28
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	7a1b      	ldrb	r3, [r3, #8]
 8013d50:	b25a      	sxtb	r2, r3
 8013d52:	2108      	movs	r1, #8
 8013d54:	187b      	adds	r3, r7, r1
 8013d56:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8013d58:	4bda      	ldr	r3, [pc, #872]	; (80140c4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013d5a:	4adb      	ldr	r2, [pc, #876]	; (80140c8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013d5c:	589b      	ldr	r3, [r3, r2]
 8013d5e:	22b9      	movs	r2, #185	; 0xb9
 8013d60:	5c9a      	ldrb	r2, [r3, r2]
 8013d62:	187b      	adds	r3, r7, r1
 8013d64:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 8013d66:	4bd7      	ldr	r3, [pc, #860]	; (80140c4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013d68:	4ad7      	ldr	r2, [pc, #860]	; (80140c8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013d6a:	589b      	ldr	r3, [r3, r2]
 8013d6c:	781b      	ldrb	r3, [r3, #0]
 8013d6e:	1879      	adds	r1, r7, r1
 8013d70:	2207      	movs	r2, #7
 8013d72:	0018      	movs	r0, r3
 8013d74:	f002 fff4 	bl	8016d60 <RegionVerify>
 8013d78:	1e03      	subs	r3, r0, #0
 8013d7a:	d01f      	beq.n	8013dbc <LoRaMacMibSetRequestConfirm+0x3ac>
            {
                MacCtx.NvmCtx->MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8013d7c:	4bd1      	ldr	r3, [pc, #836]	; (80140c4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013d7e:	4ad2      	ldr	r2, [pc, #840]	; (80140c8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013d80:	589b      	ldr	r3, [r3, r2]
 8013d82:	21b0      	movs	r1, #176	; 0xb0
 8013d84:	687a      	ldr	r2, [r7, #4]
 8013d86:	185b      	adds	r3, r3, r1
 8013d88:	3204      	adds	r2, #4
 8013d8a:	ca03      	ldmia	r2!, {r0, r1}
 8013d8c:	c303      	stmia	r3!, {r0, r1}

                if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) && ( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8013d8e:	4bcd      	ldr	r3, [pc, #820]	; (80140c4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013d90:	4acd      	ldr	r2, [pc, #820]	; (80140c8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013d92:	589b      	ldr	r3, [r3, r2]
 8013d94:	227c      	movs	r2, #124	; 0x7c
 8013d96:	5c9b      	ldrb	r3, [r3, r2]
 8013d98:	2b02      	cmp	r3, #2
 8013d9a:	d000      	beq.n	8013d9e <LoRaMacMibSetRequestConfirm+0x38e>
 8013d9c:	e1ac      	b.n	80140f8 <LoRaMacMibSetRequestConfirm+0x6e8>
 8013d9e:	4bc9      	ldr	r3, [pc, #804]	; (80140c4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013da0:	4ac9      	ldr	r2, [pc, #804]	; (80140c8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013da2:	589a      	ldr	r2, [r3, r2]
 8013da4:	23b2      	movs	r3, #178	; 0xb2
 8013da6:	005b      	lsls	r3, r3, #1
 8013da8:	5cd3      	ldrb	r3, [r2, r3]
 8013daa:	2b00      	cmp	r3, #0
 8013dac:	d100      	bne.n	8013db0 <LoRaMacMibSetRequestConfirm+0x3a0>
 8013dae:	e1a3      	b.n	80140f8 <LoRaMacMibSetRequestConfirm+0x6e8>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8013db0:	4bc6      	ldr	r3, [pc, #792]	; (80140cc <LoRaMacMibSetRequestConfirm+0x6bc>)
 8013db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013db4:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8013db6:	f7fe fa33 	bl	8012220 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013dba:	e19d      	b.n	80140f8 <LoRaMacMibSetRequestConfirm+0x6e8>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013dbc:	2317      	movs	r3, #23
 8013dbe:	18fb      	adds	r3, r7, r3
 8013dc0:	2203      	movs	r2, #3
 8013dc2:	701a      	strb	r2, [r3, #0]
            break;
 8013dc4:	e198      	b.n	80140f8 <LoRaMacMibSetRequestConfirm+0x6e8>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	7a1b      	ldrb	r3, [r3, #8]
 8013dca:	b25a      	sxtb	r2, r3
 8013dcc:	2108      	movs	r1, #8
 8013dce:	187b      	adds	r3, r7, r1
 8013dd0:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8013dd2:	4bbc      	ldr	r3, [pc, #752]	; (80140c4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013dd4:	4abc      	ldr	r2, [pc, #752]	; (80140c8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013dd6:	589b      	ldr	r3, [r3, r2]
 8013dd8:	22b9      	movs	r2, #185	; 0xb9
 8013dda:	5c9a      	ldrb	r2, [r3, r2]
 8013ddc:	187b      	adds	r3, r7, r1
 8013dde:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 8013de0:	4bb8      	ldr	r3, [pc, #736]	; (80140c4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013de2:	4ab9      	ldr	r2, [pc, #740]	; (80140c8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013de4:	589b      	ldr	r3, [r3, r2]
 8013de6:	781b      	ldrb	r3, [r3, #0]
 8013de8:	1879      	adds	r1, r7, r1
 8013dea:	2207      	movs	r2, #7
 8013dec:	0018      	movs	r0, r3
 8013dee:	f002 ffb7 	bl	8016d60 <RegionVerify>
 8013df2:	1e03      	subs	r3, r0, #0
 8013df4:	d008      	beq.n	8013e08 <LoRaMacMibSetRequestConfirm+0x3f8>
            {
                MacCtx.NvmCtx->MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8013df6:	4bb3      	ldr	r3, [pc, #716]	; (80140c4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013df8:	4ab3      	ldr	r2, [pc, #716]	; (80140c8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013dfa:	589b      	ldr	r3, [r3, r2]
 8013dfc:	687a      	ldr	r2, [r7, #4]
 8013dfe:	3330      	adds	r3, #48	; 0x30
 8013e00:	3204      	adds	r2, #4
 8013e02:	ca03      	ldmia	r2!, {r0, r1}
 8013e04:	c303      	stmia	r3!, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013e06:	e17e      	b.n	8014106 <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013e08:	2317      	movs	r3, #23
 8013e0a:	18fb      	adds	r3, r7, r3
 8013e0c:	2203      	movs	r2, #3
 8013e0e:	701a      	strb	r2, [r3, #0]
            break;
 8013e10:	e179      	b.n	8014106 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	685a      	ldr	r2, [r3, #4]
 8013e16:	210c      	movs	r1, #12
 8013e18:	187b      	adds	r3, r7, r1
 8013e1a:	601a      	str	r2, [r3, #0]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8013e1c:	187b      	adds	r3, r7, r1
 8013e1e:	2201      	movs	r2, #1
 8013e20:	711a      	strb	r2, [r3, #4]

            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
 8013e22:	4ba8      	ldr	r3, [pc, #672]	; (80140c4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013e24:	4aa8      	ldr	r2, [pc, #672]	; (80140c8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013e26:	589b      	ldr	r3, [r3, r2]
 8013e28:	781b      	ldrb	r3, [r3, #0]
 8013e2a:	187a      	adds	r2, r7, r1
 8013e2c:	0011      	movs	r1, r2
 8013e2e:	0018      	movs	r0, r3
 8013e30:	f002 ffc8 	bl	8016dc4 <RegionChanMaskSet>
 8013e34:	0003      	movs	r3, r0
 8013e36:	001a      	movs	r2, r3
 8013e38:	2301      	movs	r3, #1
 8013e3a:	4053      	eors	r3, r2
 8013e3c:	b2db      	uxtb	r3, r3
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	d100      	bne.n	8013e44 <LoRaMacMibSetRequestConfirm+0x434>
 8013e42:	e15b      	b.n	80140fc <LoRaMacMibSetRequestConfirm+0x6ec>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013e44:	2317      	movs	r3, #23
 8013e46:	18fb      	adds	r3, r7, r3
 8013e48:	2203      	movs	r2, #3
 8013e4a:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013e4c:	e156      	b.n	80140fc <LoRaMacMibSetRequestConfirm+0x6ec>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	685a      	ldr	r2, [r3, #4]
 8013e52:	210c      	movs	r1, #12
 8013e54:	187b      	adds	r3, r7, r1
 8013e56:	601a      	str	r2, [r3, #0]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8013e58:	187b      	adds	r3, r7, r1
 8013e5a:	2200      	movs	r2, #0
 8013e5c:	711a      	strb	r2, [r3, #4]

            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
 8013e5e:	4b99      	ldr	r3, [pc, #612]	; (80140c4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013e60:	4a99      	ldr	r2, [pc, #612]	; (80140c8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013e62:	589b      	ldr	r3, [r3, r2]
 8013e64:	781b      	ldrb	r3, [r3, #0]
 8013e66:	187a      	adds	r2, r7, r1
 8013e68:	0011      	movs	r1, r2
 8013e6a:	0018      	movs	r0, r3
 8013e6c:	f002 ffaa 	bl	8016dc4 <RegionChanMaskSet>
 8013e70:	0003      	movs	r3, r0
 8013e72:	001a      	movs	r2, r3
 8013e74:	2301      	movs	r3, #1
 8013e76:	4053      	eors	r3, r2
 8013e78:	b2db      	uxtb	r3, r3
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	d100      	bne.n	8013e80 <LoRaMacMibSetRequestConfirm+0x470>
 8013e7e:	e13f      	b.n	8014100 <LoRaMacMibSetRequestConfirm+0x6f0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013e80:	2317      	movs	r3, #23
 8013e82:	18fb      	adds	r3, r7, r3
 8013e84:	2203      	movs	r2, #3
 8013e86:	701a      	strb	r2, [r3, #0]
            }
            break;
 8013e88:	e13a      	b.n	8014100 <LoRaMacMibSetRequestConfirm+0x6f0>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	791b      	ldrb	r3, [r3, #4]
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d00b      	beq.n	8013eaa <LoRaMacMibSetRequestConfirm+0x49a>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8013e96:	2b0f      	cmp	r3, #15
 8013e98:	d807      	bhi.n	8013eaa <LoRaMacMibSetRequestConfirm+0x49a>
            {
                MacCtx.NvmCtx->MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8013e9a:	4b8a      	ldr	r3, [pc, #552]	; (80140c4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013e9c:	4a8a      	ldr	r2, [pc, #552]	; (80140c8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013e9e:	589b      	ldr	r3, [r3, r2]
 8013ea0:	687a      	ldr	r2, [r7, #4]
 8013ea2:	7911      	ldrb	r1, [r2, #4]
 8013ea4:	22a4      	movs	r2, #164	; 0xa4
 8013ea6:	5499      	strb	r1, [r3, r2]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013ea8:	e12d      	b.n	8014106 <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013eaa:	2317      	movs	r3, #23
 8013eac:	18fb      	adds	r3, r7, r3
 8013eae:	2203      	movs	r2, #3
 8013eb0:	701a      	strb	r2, [r3, #0]
            break;
 8013eb2:	e128      	b.n	8014106 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            MacCtx.NvmCtx->MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8013eb4:	4b83      	ldr	r3, [pc, #524]	; (80140c4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013eb6:	4a84      	ldr	r2, [pc, #528]	; (80140c8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013eb8:	589a      	ldr	r2, [r3, r2]
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	685b      	ldr	r3, [r3, #4]
 8013ebe:	2190      	movs	r1, #144	; 0x90
 8013ec0:	5053      	str	r3, [r2, r1]
            break;
 8013ec2:	e120      	b.n	8014106 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            MacCtx.NvmCtx->MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8013ec4:	4b7f      	ldr	r3, [pc, #508]	; (80140c4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013ec6:	4a80      	ldr	r2, [pc, #512]	; (80140c8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013ec8:	589a      	ldr	r2, [r3, r2]
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	685b      	ldr	r3, [r3, #4]
 8013ece:	2194      	movs	r1, #148	; 0x94
 8013ed0:	5053      	str	r3, [r2, r1]
            break;
 8013ed2:	e118      	b.n	8014106 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            MacCtx.NvmCtx->MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8013ed4:	4b7b      	ldr	r3, [pc, #492]	; (80140c4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013ed6:	4a7c      	ldr	r2, [pc, #496]	; (80140c8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013ed8:	589a      	ldr	r2, [r3, r2]
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	685b      	ldr	r3, [r3, #4]
 8013ede:	2198      	movs	r1, #152	; 0x98
 8013ee0:	5053      	str	r3, [r2, r1]
            break;
 8013ee2:	e110      	b.n	8014106 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8013ee4:	4b77      	ldr	r3, [pc, #476]	; (80140c4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013ee6:	4a78      	ldr	r2, [pc, #480]	; (80140c8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013ee8:	589a      	ldr	r2, [r3, r2]
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	685b      	ldr	r3, [r3, #4]
 8013eee:	219c      	movs	r1, #156	; 0x9c
 8013ef0:	5053      	str	r3, [r2, r1]
            break;
 8013ef2:	e108      	b.n	8014106 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8013ef4:	4b73      	ldr	r3, [pc, #460]	; (80140c4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013ef6:	4a74      	ldr	r2, [pc, #464]	; (80140c8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013ef8:	589a      	ldr	r2, [r3, r2]
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	685b      	ldr	r3, [r3, #4]
 8013efe:	21a0      	movs	r1, #160	; 0xa0
 8013f00:	5053      	str	r3, [r2, r1]
            break;
 8013f02:	e100      	b.n	8014106 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	2204      	movs	r2, #4
 8013f08:	569a      	ldrsb	r2, [r3, r2]
 8013f0a:	2408      	movs	r4, #8
 8013f0c:	193b      	adds	r3, r7, r4
 8013f0e:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_DR ) == true )
 8013f10:	4b6c      	ldr	r3, [pc, #432]	; (80140c4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013f12:	4a6d      	ldr	r2, [pc, #436]	; (80140c8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013f14:	589b      	ldr	r3, [r3, r2]
 8013f16:	781b      	ldrb	r3, [r3, #0]
 8013f18:	1939      	adds	r1, r7, r4
 8013f1a:	2206      	movs	r2, #6
 8013f1c:	0018      	movs	r0, r3
 8013f1e:	f002 ff1f 	bl	8016d60 <RegionVerify>
 8013f22:	1e03      	subs	r3, r0, #0
 8013f24:	d007      	beq.n	8013f36 <LoRaMacMibSetRequestConfirm+0x526>
            {
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = verify.DatarateParams.Datarate;
 8013f26:	4b67      	ldr	r3, [pc, #412]	; (80140c4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013f28:	4a67      	ldr	r2, [pc, #412]	; (80140c8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013f2a:	589b      	ldr	r3, [r3, r2]
 8013f2c:	193a      	adds	r2, r7, r4
 8013f2e:	7812      	ldrb	r2, [r2, #0]
 8013f30:	b252      	sxtb	r2, r2
 8013f32:	715a      	strb	r2, [r3, #5]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013f34:	e0e7      	b.n	8014106 <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013f36:	2317      	movs	r3, #23
 8013f38:	18fb      	adds	r3, r7, r3
 8013f3a:	2203      	movs	r2, #3
 8013f3c:	701a      	strb	r2, [r3, #0]
            break;
 8013f3e:	e0e2      	b.n	8014106 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	2204      	movs	r2, #4
 8013f44:	569a      	ldrsb	r2, [r3, r2]
 8013f46:	2408      	movs	r4, #8
 8013f48:	193b      	adds	r3, r7, r4
 8013f4a:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8013f4c:	4b5d      	ldr	r3, [pc, #372]	; (80140c4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013f4e:	4a5e      	ldr	r2, [pc, #376]	; (80140c8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013f50:	589b      	ldr	r3, [r3, r2]
 8013f52:	22b8      	movs	r2, #184	; 0xb8
 8013f54:	5c9a      	ldrb	r2, [r3, r2]
 8013f56:	193b      	adds	r3, r7, r4
 8013f58:	709a      	strb	r2, [r3, #2]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 8013f5a:	4b5a      	ldr	r3, [pc, #360]	; (80140c4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013f5c:	4a5a      	ldr	r2, [pc, #360]	; (80140c8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013f5e:	589b      	ldr	r3, [r3, r2]
 8013f60:	781b      	ldrb	r3, [r3, #0]
 8013f62:	1939      	adds	r1, r7, r4
 8013f64:	2205      	movs	r2, #5
 8013f66:	0018      	movs	r0, r3
 8013f68:	f002 fefa 	bl	8016d60 <RegionVerify>
 8013f6c:	1e03      	subs	r3, r0, #0
 8013f6e:	d008      	beq.n	8013f82 <LoRaMacMibSetRequestConfirm+0x572>
            {
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 8013f70:	4b54      	ldr	r3, [pc, #336]	; (80140c4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013f72:	4a55      	ldr	r2, [pc, #340]	; (80140c8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013f74:	589b      	ldr	r3, [r3, r2]
 8013f76:	193a      	adds	r2, r7, r4
 8013f78:	2100      	movs	r1, #0
 8013f7a:	5651      	ldrsb	r1, [r2, r1]
 8013f7c:	2285      	movs	r2, #133	; 0x85
 8013f7e:	5499      	strb	r1, [r3, r2]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013f80:	e0c1      	b.n	8014106 <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013f82:	2317      	movs	r3, #23
 8013f84:	18fb      	adds	r3, r7, r3
 8013f86:	2203      	movs	r2, #3
 8013f88:	701a      	strb	r2, [r3, #0]
            break;
 8013f8a:	e0bc      	b.n	8014106 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	2204      	movs	r2, #4
 8013f90:	569a      	ldrsb	r2, [r3, r2]
 8013f92:	2408      	movs	r4, #8
 8013f94:	193b      	adds	r3, r7, r4
 8013f96:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_POWER ) == true )
 8013f98:	4b4a      	ldr	r3, [pc, #296]	; (80140c4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013f9a:	4a4b      	ldr	r2, [pc, #300]	; (80140c8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013f9c:	589b      	ldr	r3, [r3, r2]
 8013f9e:	781b      	ldrb	r3, [r3, #0]
 8013fa0:	1939      	adds	r1, r7, r4
 8013fa2:	220a      	movs	r2, #10
 8013fa4:	0018      	movs	r0, r3
 8013fa6:	f002 fedb 	bl	8016d60 <RegionVerify>
 8013faa:	1e03      	subs	r3, r0, #0
 8013fac:	d007      	beq.n	8013fbe <LoRaMacMibSetRequestConfirm+0x5ae>
            {
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = verify.TxPower;
 8013fae:	4b45      	ldr	r3, [pc, #276]	; (80140c4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013fb0:	4a45      	ldr	r2, [pc, #276]	; (80140c8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013fb2:	589b      	ldr	r3, [r3, r2]
 8013fb4:	193a      	adds	r2, r7, r4
 8013fb6:	7812      	ldrb	r2, [r2, #0]
 8013fb8:	b252      	sxtb	r2, r2
 8013fba:	711a      	strb	r2, [r3, #4]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013fbc:	e0a3      	b.n	8014106 <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013fbe:	2317      	movs	r3, #23
 8013fc0:	18fb      	adds	r3, r7, r3
 8013fc2:	2203      	movs	r2, #3
 8013fc4:	701a      	strb	r2, [r3, #0]
            break;
 8013fc6:	e09e      	b.n	8014106 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	2204      	movs	r2, #4
 8013fcc:	569a      	ldrsb	r2, [r3, r2]
 8013fce:	2408      	movs	r4, #8
 8013fd0:	193b      	adds	r3, r7, r4
 8013fd2:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_POWER ) == true )
 8013fd4:	4b3b      	ldr	r3, [pc, #236]	; (80140c4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013fd6:	4a3c      	ldr	r2, [pc, #240]	; (80140c8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013fd8:	589b      	ldr	r3, [r3, r2]
 8013fda:	781b      	ldrb	r3, [r3, #0]
 8013fdc:	1939      	adds	r1, r7, r4
 8013fde:	2209      	movs	r2, #9
 8013fe0:	0018      	movs	r0, r3
 8013fe2:	f002 febd 	bl	8016d60 <RegionVerify>
 8013fe6:	1e03      	subs	r3, r0, #0
 8013fe8:	d008      	beq.n	8013ffc <LoRaMacMibSetRequestConfirm+0x5ec>
            {
                MacCtx.NvmCtx->MacParams.ChannelsTxPower = verify.TxPower;
 8013fea:	4b36      	ldr	r3, [pc, #216]	; (80140c4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8013fec:	4a36      	ldr	r2, [pc, #216]	; (80140c8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8013fee:	589b      	ldr	r3, [r3, r2]
 8013ff0:	193a      	adds	r2, r7, r4
 8013ff2:	2100      	movs	r1, #0
 8013ff4:	5651      	ldrsb	r1, [r2, r1]
 8013ff6:	2284      	movs	r2, #132	; 0x84
 8013ff8:	5499      	strb	r1, [r3, r2]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013ffa:	e084      	b.n	8014106 <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013ffc:	2317      	movs	r3, #23
 8013ffe:	18fb      	adds	r3, r7, r3
 8014000:	2203      	movs	r2, #3
 8014002:	701a      	strb	r2, [r3, #0]
            break;
 8014004:	e07f      	b.n	8014106 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8014006:	4b2f      	ldr	r3, [pc, #188]	; (80140c4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8014008:	4a2f      	ldr	r2, [pc, #188]	; (80140c8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 801400a:	589b      	ldr	r3, [r3, r2]
 801400c:	687a      	ldr	r2, [r7, #4]
 801400e:	6852      	ldr	r2, [r2, #4]
 8014010:	609a      	str	r2, [r3, #8]
 8014012:	4a2c      	ldr	r2, [pc, #176]	; (80140c4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8014014:	492c      	ldr	r1, [pc, #176]	; (80140c8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8014016:	5852      	ldr	r2, [r2, r1]
 8014018:	689b      	ldr	r3, [r3, #8]
 801401a:	2188      	movs	r1, #136	; 0x88
 801401c:	5053      	str	r3, [r2, r1]
            break;
 801401e:	e072      	b.n	8014106 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8014020:	4b28      	ldr	r3, [pc, #160]	; (80140c4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8014022:	4a29      	ldr	r2, [pc, #164]	; (80140c8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8014024:	589b      	ldr	r3, [r3, r2]
 8014026:	687a      	ldr	r2, [r7, #4]
 8014028:	7912      	ldrb	r2, [r2, #4]
 801402a:	731a      	strb	r2, [r3, #12]
 801402c:	4a25      	ldr	r2, [pc, #148]	; (80140c4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 801402e:	4926      	ldr	r1, [pc, #152]	; (80140c8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 8014030:	5852      	ldr	r2, [r2, r1]
 8014032:	7b19      	ldrb	r1, [r3, #12]
 8014034:	238c      	movs	r3, #140	; 0x8c
 8014036:	54d1      	strb	r1, [r2, r3]
            break;
 8014038:	e065      	b.n	8014106 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_ANTENNA_GAIN:
        {
            MacCtx.NvmCtx->MacParams.AntennaGain = mibSet->Param.AntennaGain;
 801403a:	4b22      	ldr	r3, [pc, #136]	; (80140c4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 801403c:	4a22      	ldr	r2, [pc, #136]	; (80140c8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 801403e:	589a      	ldr	r2, [r3, r2]
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	685b      	ldr	r3, [r3, #4]
 8014044:	21c0      	movs	r1, #192	; 0xc0
 8014046:	5053      	str	r3, [r2, r1]
            break;
 8014048:	e05d      	b.n	8014106 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 801404a:	4b1e      	ldr	r3, [pc, #120]	; (80140c4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 801404c:	4a1e      	ldr	r2, [pc, #120]	; (80140c8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 801404e:	589b      	ldr	r3, [r3, r2]
 8014050:	687a      	ldr	r2, [r7, #4]
 8014052:	6852      	ldr	r2, [r2, #4]
 8014054:	641a      	str	r2, [r3, #64]	; 0x40
            break;
 8014056:	e056      	b.n	8014106 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_NVM_CTXS:
        {
            if( mibSet->Param.Contexts != 0 )
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	685b      	ldr	r3, [r3, #4]
 801405c:	2b00      	cmp	r3, #0
 801405e:	d009      	beq.n	8014074 <LoRaMacMibSetRequestConfirm+0x664>
            {
                status = RestoreCtxs( mibSet->Param.Contexts );
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	685b      	ldr	r3, [r3, #4]
 8014064:	2217      	movs	r2, #23
 8014066:	18bc      	adds	r4, r7, r2
 8014068:	0018      	movs	r0, r3
 801406a:	f7fe fc1b 	bl	80128a4 <RestoreCtxs>
 801406e:	0003      	movs	r3, r0
 8014070:	7023      	strb	r3, [r4, #0]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014072:	e048      	b.n	8014106 <LoRaMacMibSetRequestConfirm+0x6f6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014074:	2317      	movs	r3, #23
 8014076:	18fb      	adds	r3, r7, r3
 8014078:	2203      	movs	r2, #3
 801407a:	701a      	strb	r2, [r3, #0]
            break;
 801407c:	e043      	b.n	8014106 <LoRaMacMibSetRequestConfirm+0x6f6>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	799b      	ldrb	r3, [r3, #6]
 8014082:	2b01      	cmp	r3, #1
 8014084:	d810      	bhi.n	80140a8 <LoRaMacMibSetRequestConfirm+0x698>
            {
                MacCtx.NvmCtx->Version = mibSet->Param.AbpLrWanVersion;
 8014086:	4b0f      	ldr	r3, [pc, #60]	; (80140c4 <LoRaMacMibSetRequestConfirm+0x6b4>)
 8014088:	4a0f      	ldr	r2, [pc, #60]	; (80140c8 <LoRaMacMibSetRequestConfirm+0x6b8>)
 801408a:	5899      	ldr	r1, [r3, r2]
 801408c:	23b0      	movs	r3, #176	; 0xb0
 801408e:	005a      	lsls	r2, r3, #1
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	685b      	ldr	r3, [r3, #4]
 8014094:	508b      	str	r3, [r1, r2]

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	685b      	ldr	r3, [r3, #4]
 801409a:	0018      	movs	r0, r3
 801409c:	f001 fe3a 	bl	8015d14 <LoRaMacCryptoSetLrWanVersion>
 80140a0:	1e03      	subs	r3, r0, #0
 80140a2:	d02f      	beq.n	8014104 <LoRaMacMibSetRequestConfirm+0x6f4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80140a4:	2311      	movs	r3, #17
 80140a6:	e035      	b.n	8014114 <LoRaMacMibSetRequestConfirm+0x704>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80140a8:	2317      	movs	r3, #23
 80140aa:	18fb      	adds	r3, r7, r3
 80140ac:	2203      	movs	r2, #3
 80140ae:	701a      	strb	r2, [r3, #0]
            }
            break;
 80140b0:	e028      	b.n	8014104 <LoRaMacMibSetRequestConfirm+0x6f4>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 80140b2:	2317      	movs	r3, #23
 80140b4:	18fc      	adds	r4, r7, r3
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	0018      	movs	r0, r3
 80140ba:	f000 fc8f 	bl	80149dc <LoRaMacMibClassBSetRequestConfirm>
 80140be:	0003      	movs	r3, r0
 80140c0:	7023      	strb	r3, [r4, #0]
            break;
 80140c2:	e020      	b.n	8014106 <LoRaMacMibSetRequestConfirm+0x6f6>
 80140c4:	200005b8 	.word	0x200005b8
 80140c8:	00000484 	.word	0x00000484
 80140cc:	0801fe28 	.word	0x0801fe28
            break;
 80140d0:	46c0      	nop			; (mov r8, r8)
 80140d2:	e018      	b.n	8014106 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 80140d4:	46c0      	nop			; (mov r8, r8)
 80140d6:	e016      	b.n	8014106 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 80140d8:	46c0      	nop			; (mov r8, r8)
 80140da:	e014      	b.n	8014106 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 80140dc:	46c0      	nop			; (mov r8, r8)
 80140de:	e012      	b.n	8014106 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 80140e0:	46c0      	nop			; (mov r8, r8)
 80140e2:	e010      	b.n	8014106 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 80140e4:	46c0      	nop			; (mov r8, r8)
 80140e6:	e00e      	b.n	8014106 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 80140e8:	46c0      	nop			; (mov r8, r8)
 80140ea:	e00c      	b.n	8014106 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 80140ec:	46c0      	nop			; (mov r8, r8)
 80140ee:	e00a      	b.n	8014106 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 80140f0:	46c0      	nop			; (mov r8, r8)
 80140f2:	e008      	b.n	8014106 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 80140f4:	46c0      	nop			; (mov r8, r8)
 80140f6:	e006      	b.n	8014106 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 80140f8:	46c0      	nop			; (mov r8, r8)
 80140fa:	e004      	b.n	8014106 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 80140fc:	46c0      	nop			; (mov r8, r8)
 80140fe:	e002      	b.n	8014106 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8014100:	46c0      	nop			; (mov r8, r8)
 8014102:	e000      	b.n	8014106 <LoRaMacMibSetRequestConfirm+0x6f6>
            break;
 8014104:	46c0      	nop			; (mov r8, r8)
        }
    }
    EventRegionNvmCtxChanged( );
 8014106:	f7fe fe19 	bl	8012d3c <EventRegionNvmCtxChanged>
    EventMacNvmCtxChanged( );
 801410a:	f7fe fe0f 	bl	8012d2c <EventMacNvmCtxChanged>
    return status;
 801410e:	2317      	movs	r3, #23
 8014110:	18fb      	adds	r3, r7, r3
 8014112:	781b      	ldrb	r3, [r3, #0]
}
 8014114:	0018      	movs	r0, r3
 8014116:	46bd      	mov	sp, r7
 8014118:	b007      	add	sp, #28
 801411a:	bd90      	pop	{r4, r7, pc}

0801411c <LoRaMacMlmeRequest>:
    EventRegionNvmCtxChanged( );
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 801411c:	b5b0      	push	{r4, r5, r7, lr}
 801411e:	b086      	sub	sp, #24
 8014120:	af00      	add	r7, sp, #0
 8014122:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014124:	2317      	movs	r3, #23
 8014126:	18fb      	adds	r3, r7, r3
 8014128:	2202      	movs	r2, #2
 801412a:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 801412c:	230c      	movs	r3, #12
 801412e:	18fb      	adds	r3, r7, r3
 8014130:	2200      	movs	r2, #0
 8014132:	801a      	strh	r2, [r3, #0]

    if( mlmeRequest == NULL )
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	2b00      	cmp	r3, #0
 8014138:	d101      	bne.n	801413e <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801413a:	2303      	movs	r3, #3
 801413c:	e133      	b.n	80143a6 <LoRaMacMlmeRequest+0x28a>
    }
    if( LoRaMacIsBusy( ) == true )
 801413e:	f7fe fe49 	bl	8012dd4 <LoRaMacIsBusy>
 8014142:	1e03      	subs	r3, r0, #0
 8014144:	d001      	beq.n	801414a <LoRaMacMlmeRequest+0x2e>
    {
        return LORAMAC_STATUS_BUSY;
 8014146:	2301      	movs	r3, #1
 8014148:	e12d      	b.n	80143a6 <LoRaMacMlmeRequest+0x28a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 801414a:	f001 fa0b 	bl	8015564 <LoRaMacConfirmQueueIsFull>
 801414e:	1e03      	subs	r3, r0, #0
 8014150:	d001      	beq.n	8014156 <LoRaMacMlmeRequest+0x3a>
    {
        return LORAMAC_STATUS_BUSY;
 8014152:	2301      	movs	r3, #1
 8014154:	e127      	b.n	80143a6 <LoRaMacMlmeRequest+0x28a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8014156:	f001 f9fb 	bl	8015550 <LoRaMacConfirmQueueGetCnt>
 801415a:	1e03      	subs	r3, r0, #0
 801415c:	d105      	bne.n	801416a <LoRaMacMlmeRequest+0x4e>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 801415e:	4b94      	ldr	r3, [pc, #592]	; (80143b0 <LoRaMacMlmeRequest+0x294>)
 8014160:	2214      	movs	r2, #20
 8014162:	2100      	movs	r1, #0
 8014164:	0018      	movs	r0, r3
 8014166:	f005 fa51 	bl	801960c <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801416a:	4b92      	ldr	r3, [pc, #584]	; (80143b4 <LoRaMacMlmeRequest+0x298>)
 801416c:	4a92      	ldr	r2, [pc, #584]	; (80143b8 <LoRaMacMlmeRequest+0x29c>)
 801416e:	2101      	movs	r1, #1
 8014170:	5499      	strb	r1, [r3, r2]

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8014172:	4b90      	ldr	r3, [pc, #576]	; (80143b4 <LoRaMacMlmeRequest+0x298>)
 8014174:	4a91      	ldr	r2, [pc, #580]	; (80143bc <LoRaMacMlmeRequest+0x2a0>)
 8014176:	5c99      	ldrb	r1, [r3, r2]
 8014178:	2004      	movs	r0, #4
 801417a:	4301      	orrs	r1, r0
 801417c:	5499      	strb	r1, [r3, r2]
    queueElement.Request = mlmeRequest->Type;
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	781a      	ldrb	r2, [r3, #0]
 8014182:	2110      	movs	r1, #16
 8014184:	187b      	adds	r3, r7, r1
 8014186:	701a      	strb	r2, [r3, #0]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8014188:	187b      	adds	r3, r7, r1
 801418a:	2201      	movs	r2, #1
 801418c:	705a      	strb	r2, [r3, #1]
    queueElement.RestrictCommonReadyToHandle = false;
 801418e:	187b      	adds	r3, r7, r1
 8014190:	2200      	movs	r2, #0
 8014192:	70da      	strb	r2, [r3, #3]

    switch( mlmeRequest->Type )
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	781b      	ldrb	r3, [r3, #0]
 8014198:	2b0e      	cmp	r3, #14
 801419a:	d900      	bls.n	801419e <LoRaMacMlmeRequest+0x82>
 801419c:	e0d4      	b.n	8014348 <LoRaMacMlmeRequest+0x22c>
 801419e:	009a      	lsls	r2, r3, #2
 80141a0:	4b87      	ldr	r3, [pc, #540]	; (80143c0 <LoRaMacMlmeRequest+0x2a4>)
 80141a2:	18d3      	adds	r3, r2, r3
 80141a4:	681b      	ldr	r3, [r3, #0]
 80141a6:	469f      	mov	pc, r3
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 80141a8:	4a82      	ldr	r2, [pc, #520]	; (80143b4 <LoRaMacMlmeRequest+0x298>)
 80141aa:	23d0      	movs	r3, #208	; 0xd0
 80141ac:	009b      	lsls	r3, r3, #2
 80141ae:	58d3      	ldr	r3, [r2, r3]
 80141b0:	2220      	movs	r2, #32
 80141b2:	4013      	ands	r3, r2
 80141b4:	d001      	beq.n	80141ba <LoRaMacMlmeRequest+0x9e>
            {
                return LORAMAC_STATUS_BUSY;
 80141b6:	2301      	movs	r3, #1
 80141b8:	e0f5      	b.n	80143a6 <LoRaMacMlmeRequest+0x28a>
            }

            ResetMacParameters( );
 80141ba:	f7fd feff 	bl	8011fbc <ResetMacParameters>

            MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 80141be:	4b7d      	ldr	r3, [pc, #500]	; (80143b4 <LoRaMacMlmeRequest+0x298>)
 80141c0:	4a80      	ldr	r2, [pc, #512]	; (80143c4 <LoRaMacMlmeRequest+0x2a8>)
 80141c2:	589b      	ldr	r3, [r3, r2]
 80141c4:	7818      	ldrb	r0, [r3, #0]
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	791b      	ldrb	r3, [r3, #4]
 80141ca:	b259      	sxtb	r1, r3
 80141cc:	4b79      	ldr	r3, [pc, #484]	; (80143b4 <LoRaMacMlmeRequest+0x298>)
 80141ce:	4a7d      	ldr	r2, [pc, #500]	; (80143c4 <LoRaMacMlmeRequest+0x2a8>)
 80141d0:	589c      	ldr	r4, [r3, r2]
 80141d2:	2200      	movs	r2, #0
 80141d4:	f002 fedb 	bl	8016f8e <RegionAlternateDr>
 80141d8:	0003      	movs	r3, r0
 80141da:	001a      	movs	r2, r3
 80141dc:	2385      	movs	r3, #133	; 0x85
 80141de:	54e2      	strb	r2, [r4, r3]

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 80141e0:	2310      	movs	r3, #16
 80141e2:	18fb      	adds	r3, r7, r3
 80141e4:	2207      	movs	r2, #7
 80141e6:	705a      	strb	r2, [r3, #1]

            status = SendReJoinReq( JOIN_REQ ); // попытка без реконекта
 80141e8:	2517      	movs	r5, #23
 80141ea:	197c      	adds	r4, r7, r5
 80141ec:	20ff      	movs	r0, #255	; 0xff
 80141ee:	f7fd fbab 	bl	8011948 <SendReJoinReq>
 80141f2:	0003      	movs	r3, r0
 80141f4:	7023      	strb	r3, [r4, #0]

            if( status != LORAMAC_STATUS_OK )
 80141f6:	197b      	adds	r3, r7, r5
 80141f8:	781b      	ldrb	r3, [r3, #0]
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d100      	bne.n	8014200 <LoRaMacMlmeRequest+0xe4>
 80141fe:	e0a5      	b.n	801434c <LoRaMacMlmeRequest+0x230>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8014200:	4b6c      	ldr	r3, [pc, #432]	; (80143b4 <LoRaMacMlmeRequest+0x298>)
 8014202:	4a70      	ldr	r2, [pc, #448]	; (80143c4 <LoRaMacMlmeRequest+0x2a8>)
 8014204:	589b      	ldr	r3, [r3, r2]
 8014206:	7818      	ldrb	r0, [r3, #0]
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	791b      	ldrb	r3, [r3, #4]
 801420c:	b259      	sxtb	r1, r3
 801420e:	4b69      	ldr	r3, [pc, #420]	; (80143b4 <LoRaMacMlmeRequest+0x298>)
 8014210:	4a6c      	ldr	r2, [pc, #432]	; (80143c4 <LoRaMacMlmeRequest+0x2a8>)
 8014212:	589c      	ldr	r4, [r3, r2]
 8014214:	2201      	movs	r2, #1
 8014216:	f002 feba 	bl	8016f8e <RegionAlternateDr>
 801421a:	0003      	movs	r3, r0
 801421c:	001a      	movs	r2, r3
 801421e:	2385      	movs	r3, #133	; 0x85
 8014220:	54e2      	strb	r2, [r4, r3]
            }
            break;
 8014222:	e093      	b.n	801434c <LoRaMacMlmeRequest+0x230>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8014224:	2417      	movs	r4, #23
 8014226:	193b      	adds	r3, r7, r4
 8014228:	2200      	movs	r2, #0
 801422a:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 801422c:	230c      	movs	r3, #12
 801422e:	18fb      	adds	r3, r7, r3
 8014230:	2200      	movs	r2, #0
 8014232:	0019      	movs	r1, r3
 8014234:	2002      	movs	r0, #2
 8014236:	f000 fd7d 	bl	8014d34 <LoRaMacCommandsAddCmd>
 801423a:	1e03      	subs	r3, r0, #0
 801423c:	d100      	bne.n	8014240 <LoRaMacMlmeRequest+0x124>
 801423e:	e087      	b.n	8014350 <LoRaMacMlmeRequest+0x234>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014240:	193b      	adds	r3, r7, r4
 8014242:	2213      	movs	r2, #19
 8014244:	701a      	strb	r2, [r3, #0]
            }
            break;
 8014246:	e083      	b.n	8014350 <LoRaMacMlmeRequest+0x234>
        }
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	889b      	ldrh	r3, [r3, #4]
 801424c:	2217      	movs	r2, #23
 801424e:	18bc      	adds	r4, r7, r2
 8014250:	0018      	movs	r0, r3
 8014252:	f7fe fa5d 	bl	8012710 <SetTxContinuousWave>
 8014256:	0003      	movs	r3, r0
 8014258:	7023      	strb	r3, [r4, #0]
            break;
 801425a:	e080      	b.n	801435e <LoRaMacMlmeRequest+0x242>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	8898      	ldrh	r0, [r3, #4]
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	6899      	ldr	r1, [r3, #8]
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	7b1b      	ldrb	r3, [r3, #12]
 8014268:	2217      	movs	r2, #23
 801426a:	18bc      	adds	r4, r7, r2
 801426c:	001a      	movs	r2, r3
 801426e:	f7fe fa9b 	bl	80127a8 <SetTxContinuousWave1>
 8014272:	0003      	movs	r3, r0
 8014274:	7023      	strb	r3, [r4, #0]
            break;
 8014276:	e072      	b.n	801435e <LoRaMacMlmeRequest+0x242>
        }
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8014278:	2417      	movs	r4, #23
 801427a:	193b      	adds	r3, r7, r4
 801427c:	2200      	movs	r2, #0
 801427e:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8014280:	230c      	movs	r3, #12
 8014282:	18fb      	adds	r3, r7, r3
 8014284:	2200      	movs	r2, #0
 8014286:	0019      	movs	r1, r3
 8014288:	200d      	movs	r0, #13
 801428a:	f000 fd53 	bl	8014d34 <LoRaMacCommandsAddCmd>
 801428e:	1e03      	subs	r3, r0, #0
 8014290:	d060      	beq.n	8014354 <LoRaMacMlmeRequest+0x238>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014292:	193b      	adds	r3, r7, r4
 8014294:	2213      	movs	r2, #19
 8014296:	701a      	strb	r2, [r3, #0]
            }
            break;
 8014298:	e05c      	b.n	8014354 <LoRaMacMlmeRequest+0x238>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 801429a:	4b46      	ldr	r3, [pc, #280]	; (80143b4 <LoRaMacMlmeRequest+0x298>)
 801429c:	4a49      	ldr	r2, [pc, #292]	; (80143c4 <LoRaMacMlmeRequest+0x2a8>)
 801429e:	589b      	ldr	r3, [r3, r2]
 80142a0:	227c      	movs	r2, #124	; 0x7c
 80142a2:	5c9b      	ldrb	r3, [r3, r2]
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d157      	bne.n	8014358 <LoRaMacMlmeRequest+0x23c>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 80142a8:	2416      	movs	r4, #22
 80142aa:	193b      	adds	r3, r7, r4
 80142ac:	687a      	ldr	r2, [r7, #4]
 80142ae:	7912      	ldrb	r2, [r2, #4]
 80142b0:	701a      	strb	r2, [r3, #0]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	791b      	ldrb	r3, [r3, #4]
 80142b6:	075b      	lsls	r3, r3, #29
 80142b8:	0f5b      	lsrs	r3, r3, #29
 80142ba:	b2db      	uxtb	r3, r3
 80142bc:	0018      	movs	r0, r3
 80142be:	f000 fb65 	bl	801498c <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 80142c2:	210c      	movs	r1, #12
 80142c4:	187b      	adds	r3, r7, r1
 80142c6:	193a      	adds	r2, r7, r4
 80142c8:	7812      	ldrb	r2, [r2, #0]
 80142ca:	701a      	strb	r2, [r3, #0]
                status = LORAMAC_STATUS_OK;
 80142cc:	2417      	movs	r4, #23
 80142ce:	193b      	adds	r3, r7, r4
 80142d0:	2200      	movs	r2, #0
 80142d2:	701a      	strb	r2, [r3, #0]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 80142d4:	187b      	adds	r3, r7, r1
 80142d6:	2201      	movs	r2, #1
 80142d8:	0019      	movs	r1, r3
 80142da:	2010      	movs	r0, #16
 80142dc:	f000 fd2a 	bl	8014d34 <LoRaMacCommandsAddCmd>
 80142e0:	1e03      	subs	r3, r0, #0
 80142e2:	d039      	beq.n	8014358 <LoRaMacMlmeRequest+0x23c>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80142e4:	193b      	adds	r3, r7, r4
 80142e6:	2213      	movs	r2, #19
 80142e8:	701a      	strb	r2, [r3, #0]
                }
            }
            break;
 80142ea:	e035      	b.n	8014358 <LoRaMacMlmeRequest+0x23c>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80142ec:	2417      	movs	r4, #23
 80142ee:	193b      	adds	r3, r7, r4
 80142f0:	2200      	movs	r2, #0
 80142f2:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80142f4:	230c      	movs	r3, #12
 80142f6:	18fb      	adds	r3, r7, r3
 80142f8:	2200      	movs	r2, #0
 80142fa:	0019      	movs	r1, r3
 80142fc:	2012      	movs	r0, #18
 80142fe:	f000 fd19 	bl	8014d34 <LoRaMacCommandsAddCmd>
 8014302:	1e03      	subs	r3, r0, #0
 8014304:	d02a      	beq.n	801435c <LoRaMacMlmeRequest+0x240>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014306:	193b      	adds	r3, r7, r4
 8014308:	2213      	movs	r2, #19
 801430a:	701a      	strb	r2, [r3, #0]
            }
            break;
 801430c:	e026      	b.n	801435c <LoRaMacMlmeRequest+0x240>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 801430e:	2310      	movs	r3, #16
 8014310:	18fb      	adds	r3, r7, r3
 8014312:	2201      	movs	r2, #1
 8014314:	70da      	strb	r2, [r3, #3]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8014316:	f000 faf7 	bl	8014908 <LoRaMacClassBIsAcquisitionInProgress>
 801431a:	0003      	movs	r3, r0
 801431c:	001a      	movs	r2, r3
 801431e:	2301      	movs	r3, #1
 8014320:	4053      	eors	r3, r2
 8014322:	b2db      	uxtb	r3, r3
 8014324:	2b00      	cmp	r3, #0
 8014326:	d00a      	beq.n	801433e <LoRaMacMlmeRequest+0x222>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8014328:	2000      	movs	r0, #0
 801432a:	f000 facf 	bl	80148cc <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 801432e:	2000      	movs	r0, #0
 8014330:	f000 faf0 	bl	8014914 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8014334:	2317      	movs	r3, #23
 8014336:	18fb      	adds	r3, r7, r3
 8014338:	2200      	movs	r2, #0
 801433a:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 801433c:	e00f      	b.n	801435e <LoRaMacMlmeRequest+0x242>
                status = LORAMAC_STATUS_BUSY;
 801433e:	2317      	movs	r3, #23
 8014340:	18fb      	adds	r3, r7, r3
 8014342:	2201      	movs	r2, #1
 8014344:	701a      	strb	r2, [r3, #0]
            break;
 8014346:	e00a      	b.n	801435e <LoRaMacMlmeRequest+0x242>
        }
        default:
            break;
 8014348:	46c0      	nop			; (mov r8, r8)
 801434a:	e008      	b.n	801435e <LoRaMacMlmeRequest+0x242>
            break;
 801434c:	46c0      	nop			; (mov r8, r8)
 801434e:	e006      	b.n	801435e <LoRaMacMlmeRequest+0x242>
            break;
 8014350:	46c0      	nop			; (mov r8, r8)
 8014352:	e004      	b.n	801435e <LoRaMacMlmeRequest+0x242>
            break;
 8014354:	46c0      	nop			; (mov r8, r8)
 8014356:	e002      	b.n	801435e <LoRaMacMlmeRequest+0x242>
            break;
 8014358:	46c0      	nop			; (mov r8, r8)
 801435a:	e000      	b.n	801435e <LoRaMacMlmeRequest+0x242>
            break;
 801435c:	46c0      	nop			; (mov r8, r8)
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 801435e:	4a15      	ldr	r2, [pc, #84]	; (80143b4 <LoRaMacMlmeRequest+0x298>)
 8014360:	2391      	movs	r3, #145	; 0x91
 8014362:	00db      	lsls	r3, r3, #3
 8014364:	58d2      	ldr	r2, [r2, r3]
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 801436a:	2317      	movs	r3, #23
 801436c:	18fb      	adds	r3, r7, r3
 801436e:	781b      	ldrb	r3, [r3, #0]
 8014370:	2b00      	cmp	r3, #0
 8014372:	d00e      	beq.n	8014392 <LoRaMacMlmeRequest+0x276>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8014374:	f001 f8ec 	bl	8015550 <LoRaMacConfirmQueueGetCnt>
 8014378:	1e03      	subs	r3, r0, #0
 801437a:	d111      	bne.n	80143a0 <LoRaMacMlmeRequest+0x284>
        {
            MacCtx.NodeAckRequested = false;
 801437c:	4b0d      	ldr	r3, [pc, #52]	; (80143b4 <LoRaMacMlmeRequest+0x298>)
 801437e:	4a12      	ldr	r2, [pc, #72]	; (80143c8 <LoRaMacMlmeRequest+0x2ac>)
 8014380:	2100      	movs	r1, #0
 8014382:	5499      	strb	r1, [r3, r2]
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8014384:	4b0b      	ldr	r3, [pc, #44]	; (80143b4 <LoRaMacMlmeRequest+0x298>)
 8014386:	4a0d      	ldr	r2, [pc, #52]	; (80143bc <LoRaMacMlmeRequest+0x2a0>)
 8014388:	5c99      	ldrb	r1, [r3, r2]
 801438a:	2004      	movs	r0, #4
 801438c:	4381      	bics	r1, r0
 801438e:	5499      	strb	r1, [r3, r2]
 8014390:	e006      	b.n	80143a0 <LoRaMacMlmeRequest+0x284>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8014392:	2310      	movs	r3, #16
 8014394:	18fb      	adds	r3, r7, r3
 8014396:	0018      	movs	r0, r3
 8014398:	f000 ff6c 	bl	8015274 <LoRaMacConfirmQueueAdd>
        EventMacNvmCtxChanged( );
 801439c:	f7fe fcc6 	bl	8012d2c <EventMacNvmCtxChanged>
    }
    return status;
 80143a0:	2317      	movs	r3, #23
 80143a2:	18fb      	adds	r3, r7, r3
 80143a4:	781b      	ldrb	r3, [r3, #0]
}
 80143a6:	0018      	movs	r0, r3
 80143a8:	46bd      	mov	sp, r7
 80143aa:	b006      	add	sp, #24
 80143ac:	bdb0      	pop	{r4, r5, r7, pc}
 80143ae:	46c0      	nop			; (mov r8, r8)
 80143b0:	20000a08 	.word	0x20000a08
 80143b4:	200005b8 	.word	0x200005b8
 80143b8:	00000451 	.word	0x00000451
 80143bc:	00000481 	.word	0x00000481
 80143c0:	0801fb20 	.word	0x0801fb20
 80143c4:	00000484 	.word	0x00000484
 80143c8:	00000414 	.word	0x00000414

080143cc <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 80143cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80143ce:	b08d      	sub	sp, #52	; 0x34
 80143d0:	af02      	add	r7, sp, #8
 80143d2:	6078      	str	r0, [r7, #4]
 80143d4:	000a      	movs	r2, r1
 80143d6:	1cfb      	adds	r3, r7, #3
 80143d8:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80143da:	2327      	movs	r3, #39	; 0x27
 80143dc:	18fb      	adds	r3, r7, r3
 80143de:	2202      	movs	r2, #2
 80143e0:	701a      	strb	r2, [r3, #0]
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 80143e2:	2326      	movs	r3, #38	; 0x26
 80143e4:	18fb      	adds	r3, r7, r3
 80143e6:	2200      	movs	r2, #0
 80143e8:	701a      	strb	r2, [r3, #0]
    void* fBuffer;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 80143ea:	231d      	movs	r3, #29
 80143ec:	18fb      	adds	r3, r7, r3
 80143ee:	2200      	movs	r2, #0
 80143f0:	701a      	strb	r2, [r3, #0]
    bool readyToSend = false;
 80143f2:	231c      	movs	r3, #28
 80143f4:	18fb      	adds	r3, r7, r3
 80143f6:	2200      	movs	r2, #0
 80143f8:	701a      	strb	r2, [r3, #0]

    if( mcpsRequest == NULL )
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d101      	bne.n	8014404 <LoRaMacMcpsRequest+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014400:	2303      	movs	r3, #3
 8014402:	e11b      	b.n	801463c <LoRaMacMcpsRequest+0x270>
    }
    if( LoRaMacIsBusy( ) == true )
 8014404:	f7fe fce6 	bl	8012dd4 <LoRaMacIsBusy>
 8014408:	1e03      	subs	r3, r0, #0
 801440a:	d001      	beq.n	8014410 <LoRaMacMcpsRequest+0x44>
    {
        return LORAMAC_STATUS_BUSY;
 801440c:	2301      	movs	r3, #1
 801440e:	e115      	b.n	801463c <LoRaMacMcpsRequest+0x270>
    }

    macHdr.Value = 0;
 8014410:	230c      	movs	r3, #12
 8014412:	18fb      	adds	r3, r7, r3
 8014414:	2200      	movs	r2, #0
 8014416:	701a      	strb	r2, [r3, #0]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8014418:	4b8a      	ldr	r3, [pc, #552]	; (8014644 <LoRaMacMcpsRequest+0x278>)
 801441a:	2214      	movs	r2, #20
 801441c:	2100      	movs	r1, #0
 801441e:	0018      	movs	r0, r3
 8014420:	f005 f8f4 	bl	801960c <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8014424:	4b88      	ldr	r3, [pc, #544]	; (8014648 <LoRaMacMcpsRequest+0x27c>)
 8014426:	4a89      	ldr	r2, [pc, #548]	; (801464c <LoRaMacMcpsRequest+0x280>)
 8014428:	2101      	movs	r1, #1
 801442a:	5499      	strb	r1, [r3, r2]

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 801442c:	4b86      	ldr	r3, [pc, #536]	; (8014648 <LoRaMacMcpsRequest+0x27c>)
 801442e:	4a88      	ldr	r2, [pc, #544]	; (8014650 <LoRaMacMcpsRequest+0x284>)
 8014430:	2101      	movs	r1, #1
 8014432:	5499      	strb	r1, [r3, r2]

    switch( mcpsRequest->Type )
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	781b      	ldrb	r3, [r3, #0]
 8014438:	2b03      	cmp	r3, #3
 801443a:	d056      	beq.n	80144ea <LoRaMacMcpsRequest+0x11e>
 801443c:	dc72      	bgt.n	8014524 <LoRaMacMcpsRequest+0x158>
 801443e:	2b00      	cmp	r3, #0
 8014440:	d002      	beq.n	8014448 <LoRaMacMcpsRequest+0x7c>
 8014442:	2b01      	cmp	r3, #1
 8014444:	d024      	beq.n	8014490 <LoRaMacMcpsRequest+0xc4>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8014446:	e06d      	b.n	8014524 <LoRaMacMcpsRequest+0x158>
            readyToSend = true;
 8014448:	231c      	movs	r3, #28
 801444a:	18fb      	adds	r3, r7, r3
 801444c:	2201      	movs	r2, #1
 801444e:	701a      	strb	r2, [r3, #0]
            MacCtx.AckTimeoutRetries = 1;
 8014450:	4b7d      	ldr	r3, [pc, #500]	; (8014648 <LoRaMacMcpsRequest+0x27c>)
 8014452:	4a80      	ldr	r2, [pc, #512]	; (8014654 <LoRaMacMcpsRequest+0x288>)
 8014454:	2101      	movs	r1, #1
 8014456:	5499      	strb	r1, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8014458:	230c      	movs	r3, #12
 801445a:	18fb      	adds	r3, r7, r3
 801445c:	781a      	ldrb	r2, [r3, #0]
 801445e:	211f      	movs	r1, #31
 8014460:	400a      	ands	r2, r1
 8014462:	1c11      	adds	r1, r2, #0
 8014464:	2240      	movs	r2, #64	; 0x40
 8014466:	430a      	orrs	r2, r1
 8014468:	701a      	strb	r2, [r3, #0]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 801446a:	2326      	movs	r3, #38	; 0x26
 801446c:	18fb      	adds	r3, r7, r3
 801446e:	687a      	ldr	r2, [r7, #4]
 8014470:	7912      	ldrb	r2, [r2, #4]
 8014472:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	689b      	ldr	r3, [r3, #8]
 8014478:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 801447a:	231e      	movs	r3, #30
 801447c:	18fb      	adds	r3, r7, r3
 801447e:	687a      	ldr	r2, [r7, #4]
 8014480:	8992      	ldrh	r2, [r2, #12]
 8014482:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 8014484:	231d      	movs	r3, #29
 8014486:	18fb      	adds	r3, r7, r3
 8014488:	687a      	ldr	r2, [r7, #4]
 801448a:	7b92      	ldrb	r2, [r2, #14]
 801448c:	701a      	strb	r2, [r3, #0]
            break;
 801448e:	e04a      	b.n	8014526 <LoRaMacMcpsRequest+0x15a>
            readyToSend = true;
 8014490:	231c      	movs	r3, #28
 8014492:	18fb      	adds	r3, r7, r3
 8014494:	2201      	movs	r2, #1
 8014496:	701a      	strb	r2, [r3, #0]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	7bdb      	ldrb	r3, [r3, #15]
 801449c:	1c1a      	adds	r2, r3, #0
 801449e:	b2d3      	uxtb	r3, r2
 80144a0:	2b08      	cmp	r3, #8
 80144a2:	d901      	bls.n	80144a8 <LoRaMacMcpsRequest+0xdc>
 80144a4:	2308      	movs	r3, #8
 80144a6:	1c1a      	adds	r2, r3, #0
 80144a8:	b2d1      	uxtb	r1, r2
 80144aa:	4b67      	ldr	r3, [pc, #412]	; (8014648 <LoRaMacMcpsRequest+0x27c>)
 80144ac:	4a69      	ldr	r2, [pc, #420]	; (8014654 <LoRaMacMcpsRequest+0x288>)
 80144ae:	5499      	strb	r1, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 80144b0:	230c      	movs	r3, #12
 80144b2:	18fb      	adds	r3, r7, r3
 80144b4:	781a      	ldrb	r2, [r3, #0]
 80144b6:	211f      	movs	r1, #31
 80144b8:	400a      	ands	r2, r1
 80144ba:	1c11      	adds	r1, r2, #0
 80144bc:	2280      	movs	r2, #128	; 0x80
 80144be:	4252      	negs	r2, r2
 80144c0:	430a      	orrs	r2, r1
 80144c2:	701a      	strb	r2, [r3, #0]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 80144c4:	2326      	movs	r3, #38	; 0x26
 80144c6:	18fb      	adds	r3, r7, r3
 80144c8:	687a      	ldr	r2, [r7, #4]
 80144ca:	7912      	ldrb	r2, [r2, #4]
 80144cc:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	689b      	ldr	r3, [r3, #8]
 80144d2:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 80144d4:	231e      	movs	r3, #30
 80144d6:	18fb      	adds	r3, r7, r3
 80144d8:	687a      	ldr	r2, [r7, #4]
 80144da:	8992      	ldrh	r2, [r2, #12]
 80144dc:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 80144de:	231d      	movs	r3, #29
 80144e0:	18fb      	adds	r3, r7, r3
 80144e2:	687a      	ldr	r2, [r7, #4]
 80144e4:	7b92      	ldrb	r2, [r2, #14]
 80144e6:	701a      	strb	r2, [r3, #0]
            break;
 80144e8:	e01d      	b.n	8014526 <LoRaMacMcpsRequest+0x15a>
            readyToSend = true;
 80144ea:	231c      	movs	r3, #28
 80144ec:	18fb      	adds	r3, r7, r3
 80144ee:	2201      	movs	r2, #1
 80144f0:	701a      	strb	r2, [r3, #0]
            MacCtx.AckTimeoutRetries = 1;
 80144f2:	4b55      	ldr	r3, [pc, #340]	; (8014648 <LoRaMacMcpsRequest+0x27c>)
 80144f4:	4a57      	ldr	r2, [pc, #348]	; (8014654 <LoRaMacMcpsRequest+0x288>)
 80144f6:	2101      	movs	r1, #1
 80144f8:	5499      	strb	r1, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 80144fa:	230c      	movs	r3, #12
 80144fc:	18fb      	adds	r3, r7, r3
 80144fe:	781a      	ldrb	r2, [r3, #0]
 8014500:	2120      	movs	r1, #32
 8014502:	4249      	negs	r1, r1
 8014504:	430a      	orrs	r2, r1
 8014506:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	685b      	ldr	r3, [r3, #4]
 801450c:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 801450e:	231e      	movs	r3, #30
 8014510:	18fb      	adds	r3, r7, r3
 8014512:	687a      	ldr	r2, [r7, #4]
 8014514:	8912      	ldrh	r2, [r2, #8]
 8014516:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 8014518:	231d      	movs	r3, #29
 801451a:	18fb      	adds	r3, r7, r3
 801451c:	687a      	ldr	r2, [r7, #4]
 801451e:	7a92      	ldrb	r2, [r2, #10]
 8014520:	701a      	strb	r2, [r3, #0]
            break;
 8014522:	e000      	b.n	8014526 <LoRaMacMcpsRequest+0x15a>
            break;
 8014524:	46c0      	nop			; (mov r8, r8)
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8014526:	2114      	movs	r1, #20
 8014528:	187b      	adds	r3, r7, r1
 801452a:	2202      	movs	r2, #2
 801452c:	701a      	strb	r2, [r3, #0]
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 801452e:	4b46      	ldr	r3, [pc, #280]	; (8014648 <LoRaMacMcpsRequest+0x27c>)
 8014530:	4a49      	ldr	r2, [pc, #292]	; (8014658 <LoRaMacMcpsRequest+0x28c>)
 8014532:	589b      	ldr	r3, [r3, r2]
 8014534:	22b8      	movs	r2, #184	; 0xb8
 8014536:	5c9a      	ldrb	r2, [r3, r2]
 8014538:	187b      	adds	r3, r7, r1
 801453a:	709a      	strb	r2, [r3, #2]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 801453c:	4b42      	ldr	r3, [pc, #264]	; (8014648 <LoRaMacMcpsRequest+0x27c>)
 801453e:	4a46      	ldr	r2, [pc, #280]	; (8014658 <LoRaMacMcpsRequest+0x28c>)
 8014540:	589b      	ldr	r3, [r3, r2]
 8014542:	781b      	ldrb	r3, [r3, #0]
 8014544:	187a      	adds	r2, r7, r1
 8014546:	0011      	movs	r1, r2
 8014548:	0018      	movs	r0, r3
 801454a:	f002 fba2 	bl	8016c92 <RegionGetPhyParam>
 801454e:	0003      	movs	r3, r0
 8014550:	001a      	movs	r2, r3
 8014552:	2110      	movs	r1, #16
 8014554:	187b      	adds	r3, r7, r1
 8014556:	601a      	str	r2, [r3, #0]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8014558:	187b      	adds	r3, r7, r1
 801455a:	681b      	ldr	r3, [r3, #0]
 801455c:	b259      	sxtb	r1, r3
 801455e:	231d      	movs	r3, #29
 8014560:	18fa      	adds	r2, r7, r3
 8014562:	18fb      	adds	r3, r7, r3
 8014564:	1c0c      	adds	r4, r1, #0
 8014566:	781b      	ldrb	r3, [r3, #0]
 8014568:	b258      	sxtb	r0, r3
 801456a:	b261      	sxtb	r1, r4
 801456c:	4288      	cmp	r0, r1
 801456e:	da00      	bge.n	8014572 <LoRaMacMcpsRequest+0x1a6>
 8014570:	1c23      	adds	r3, r4, #0
 8014572:	7013      	strb	r3, [r2, #0]

    if( readyToSend == true )
 8014574:	231c      	movs	r3, #28
 8014576:	18fb      	adds	r3, r7, r3
 8014578:	781b      	ldrb	r3, [r3, #0]
 801457a:	2b00      	cmp	r3, #0
 801457c:	d055      	beq.n	801462a <LoRaMacMcpsRequest+0x25e>
    {
        if( MacCtx.NvmCtx->AdrCtrlOn == false )
 801457e:	4b32      	ldr	r3, [pc, #200]	; (8014648 <LoRaMacMcpsRequest+0x27c>)
 8014580:	4a35      	ldr	r2, [pc, #212]	; (8014658 <LoRaMacMcpsRequest+0x28c>)
 8014582:	589b      	ldr	r3, [r3, r2]
 8014584:	227e      	movs	r2, #126	; 0x7e
 8014586:	5c9b      	ldrb	r3, [r3, r2]
 8014588:	2201      	movs	r2, #1
 801458a:	4053      	eors	r3, r2
 801458c:	b2db      	uxtb	r3, r3
 801458e:	2b00      	cmp	r3, #0
 8014590:	d022      	beq.n	80145d8 <LoRaMacMcpsRequest+0x20c>
        {
            verify.DatarateParams.Datarate = datarate;
 8014592:	2408      	movs	r4, #8
 8014594:	193b      	adds	r3, r7, r4
 8014596:	221d      	movs	r2, #29
 8014598:	18ba      	adds	r2, r7, r2
 801459a:	7812      	ldrb	r2, [r2, #0]
 801459c:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 801459e:	4b2a      	ldr	r3, [pc, #168]	; (8014648 <LoRaMacMcpsRequest+0x27c>)
 80145a0:	4a2d      	ldr	r2, [pc, #180]	; (8014658 <LoRaMacMcpsRequest+0x28c>)
 80145a2:	589b      	ldr	r3, [r3, r2]
 80145a4:	22b8      	movs	r2, #184	; 0xb8
 80145a6:	5c9a      	ldrb	r2, [r3, r2]
 80145a8:	193b      	adds	r3, r7, r4
 80145aa:	709a      	strb	r2, [r3, #2]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 80145ac:	4b26      	ldr	r3, [pc, #152]	; (8014648 <LoRaMacMcpsRequest+0x27c>)
 80145ae:	4a2a      	ldr	r2, [pc, #168]	; (8014658 <LoRaMacMcpsRequest+0x28c>)
 80145b0:	589b      	ldr	r3, [r3, r2]
 80145b2:	781b      	ldrb	r3, [r3, #0]
 80145b4:	1939      	adds	r1, r7, r4
 80145b6:	2205      	movs	r2, #5
 80145b8:	0018      	movs	r0, r3
 80145ba:	f002 fbd1 	bl	8016d60 <RegionVerify>
 80145be:	1e03      	subs	r3, r0, #0
 80145c0:	d008      	beq.n	80145d4 <LoRaMacMcpsRequest+0x208>
            {
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 80145c2:	4b21      	ldr	r3, [pc, #132]	; (8014648 <LoRaMacMcpsRequest+0x27c>)
 80145c4:	4a24      	ldr	r2, [pc, #144]	; (8014658 <LoRaMacMcpsRequest+0x28c>)
 80145c6:	589b      	ldr	r3, [r3, r2]
 80145c8:	193a      	adds	r2, r7, r4
 80145ca:	2100      	movs	r1, #0
 80145cc:	5651      	ldrsb	r1, [r2, r1]
 80145ce:	2285      	movs	r2, #133	; 0x85
 80145d0:	5499      	strb	r1, [r3, r2]
 80145d2:	e001      	b.n	80145d8 <LoRaMacMcpsRequest+0x20c>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 80145d4:	2303      	movs	r3, #3
 80145d6:	e031      	b.n	801463c <LoRaMacMcpsRequest+0x270>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 80145d8:	2627      	movs	r6, #39	; 0x27
 80145da:	19bc      	adds	r4, r7, r6
 80145dc:	231e      	movs	r3, #30
 80145de:	18fb      	adds	r3, r7, r3
 80145e0:	881d      	ldrh	r5, [r3, #0]
 80145e2:	6a3a      	ldr	r2, [r7, #32]
 80145e4:	2326      	movs	r3, #38	; 0x26
 80145e6:	18fb      	adds	r3, r7, r3
 80145e8:	7819      	ldrb	r1, [r3, #0]
 80145ea:	230c      	movs	r3, #12
 80145ec:	18f8      	adds	r0, r7, r3
 80145ee:	1cfb      	adds	r3, r7, #3
 80145f0:	781b      	ldrb	r3, [r3, #0]
 80145f2:	9300      	str	r3, [sp, #0]
 80145f4:	002b      	movs	r3, r5
 80145f6:	f7fd f86d 	bl	80116d4 <Send>
 80145fa:	0003      	movs	r3, r0
 80145fc:	7023      	strb	r3, [r4, #0]
        if( status == LORAMAC_STATUS_OK )
 80145fe:	19bb      	adds	r3, r7, r6
 8014600:	781b      	ldrb	r3, [r3, #0]
 8014602:	2b00      	cmp	r3, #0
 8014604:	d10d      	bne.n	8014622 <LoRaMacMcpsRequest+0x256>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	7819      	ldrb	r1, [r3, #0]
 801460a:	4b0f      	ldr	r3, [pc, #60]	; (8014648 <LoRaMacMcpsRequest+0x27c>)
 801460c:	4a13      	ldr	r2, [pc, #76]	; (801465c <LoRaMacMcpsRequest+0x290>)
 801460e:	5499      	strb	r1, [r3, r2]
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8014610:	4b0d      	ldr	r3, [pc, #52]	; (8014648 <LoRaMacMcpsRequest+0x27c>)
 8014612:	4a13      	ldr	r2, [pc, #76]	; (8014660 <LoRaMacMcpsRequest+0x294>)
 8014614:	5c99      	ldrb	r1, [r3, r2]
 8014616:	2001      	movs	r0, #1
 8014618:	4301      	orrs	r1, r0
 801461a:	5499      	strb	r1, [r3, r2]
            EventMacNvmCtxChanged( );
 801461c:	f7fe fb86 	bl	8012d2c <EventMacNvmCtxChanged>
 8014620:	e003      	b.n	801462a <LoRaMacMcpsRequest+0x25e>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8014622:	4b09      	ldr	r3, [pc, #36]	; (8014648 <LoRaMacMcpsRequest+0x27c>)
 8014624:	4a0f      	ldr	r2, [pc, #60]	; (8014664 <LoRaMacMcpsRequest+0x298>)
 8014626:	2100      	movs	r1, #0
 8014628:	5499      	strb	r1, [r3, r2]
        }
    }

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 801462a:	4a07      	ldr	r2, [pc, #28]	; (8014648 <LoRaMacMcpsRequest+0x27c>)
 801462c:	2391      	movs	r3, #145	; 0x91
 801462e:	00db      	lsls	r3, r3, #3
 8014630:	58d2      	ldr	r2, [r2, r3]
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	611a      	str	r2, [r3, #16]

    return status;
 8014636:	2327      	movs	r3, #39	; 0x27
 8014638:	18fb      	adds	r3, r7, r3
 801463a:	781b      	ldrb	r3, [r3, #0]
}
 801463c:	0018      	movs	r0, r3
 801463e:	46bd      	mov	sp, r7
 8014640:	b00b      	add	sp, #44	; 0x2c
 8014642:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014644:	200009f4 	.word	0x200009f4
 8014648:	200005b8 	.word	0x200005b8
 801464c:	0000043d 	.word	0x0000043d
 8014650:	00000412 	.word	0x00000412
 8014654:	00000411 	.word	0x00000411
 8014658:	00000484 	.word	0x00000484
 801465c:	0000043c 	.word	0x0000043c
 8014660:	00000481 	.word	0x00000481
 8014664:	00000414 	.word	0x00000414

08014668 <LoRaMacTestSetDutyCycleOn>:

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8014668:	b580      	push	{r7, lr}
 801466a:	b084      	sub	sp, #16
 801466c:	af00      	add	r7, sp, #0
 801466e:	0002      	movs	r2, r0
 8014670:	1dfb      	adds	r3, r7, #7
 8014672:	701a      	strb	r2, [r3, #0]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8014674:	210c      	movs	r1, #12
 8014676:	187b      	adds	r3, r7, r1
 8014678:	1dfa      	adds	r2, r7, #7
 801467a:	7812      	ldrb	r2, [r2, #0]
 801467c:	701a      	strb	r2, [r3, #0]

    if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DUTY_CYCLE ) == true )
 801467e:	4b0b      	ldr	r3, [pc, #44]	; (80146ac <LoRaMacTestSetDutyCycleOn+0x44>)
 8014680:	4a0b      	ldr	r2, [pc, #44]	; (80146b0 <LoRaMacTestSetDutyCycleOn+0x48>)
 8014682:	589b      	ldr	r3, [r3, r2]
 8014684:	781b      	ldrb	r3, [r3, #0]
 8014686:	1879      	adds	r1, r7, r1
 8014688:	220f      	movs	r2, #15
 801468a:	0018      	movs	r0, r3
 801468c:	f002 fb68 	bl	8016d60 <RegionVerify>
 8014690:	1e03      	subs	r3, r0, #0
 8014692:	d006      	beq.n	80146a2 <LoRaMacTestSetDutyCycleOn+0x3a>
    {
        MacCtx.NvmCtx->DutyCycleOn = enable;
 8014694:	4b05      	ldr	r3, [pc, #20]	; (80146ac <LoRaMacTestSetDutyCycleOn+0x44>)
 8014696:	4a06      	ldr	r2, [pc, #24]	; (80146b0 <LoRaMacTestSetDutyCycleOn+0x48>)
 8014698:	589b      	ldr	r3, [r3, r2]
 801469a:	1dfa      	adds	r2, r7, #7
 801469c:	21c9      	movs	r1, #201	; 0xc9
 801469e:	7812      	ldrb	r2, [r2, #0]
 80146a0:	545a      	strb	r2, [r3, r1]
    }
}
 80146a2:	46c0      	nop			; (mov r8, r8)
 80146a4:	46bd      	mov	sp, r7
 80146a6:	b004      	add	sp, #16
 80146a8:	bd80      	pop	{r7, pc}
 80146aa:	46c0      	nop			; (mov r8, r8)
 80146ac:	200005b8 	.word	0x200005b8
 80146b0:	00000484 	.word	0x00000484

080146b4 <CalcNextV10X>:

#include "Region.h"
#include "LoRaMacAdr.h"

static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 80146b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80146b6:	b08b      	sub	sp, #44	; 0x2c
 80146b8:	af00      	add	r7, sp, #0
 80146ba:	60f8      	str	r0, [r7, #12]
 80146bc:	60b9      	str	r1, [r7, #8]
 80146be:	607a      	str	r2, [r7, #4]
 80146c0:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 80146c2:	2327      	movs	r3, #39	; 0x27
 80146c4:	18fb      	adds	r3, r7, r3
 80146c6:	2200      	movs	r2, #0
 80146c8:	701a      	strb	r2, [r3, #0]
    int8_t datarate = adrNext->Datarate;
 80146ca:	2426      	movs	r4, #38	; 0x26
 80146cc:	193b      	adds	r3, r7, r4
 80146ce:	68fa      	ldr	r2, [r7, #12]
 80146d0:	7c12      	ldrb	r2, [r2, #16]
 80146d2:	701a      	strb	r2, [r3, #0]
    int8_t txPower = adrNext->TxPower;
 80146d4:	2325      	movs	r3, #37	; 0x25
 80146d6:	18fb      	adds	r3, r7, r3
 80146d8:	68fa      	ldr	r2, [r7, #12]
 80146da:	7c52      	ldrb	r2, [r2, #17]
 80146dc:	701a      	strb	r2, [r3, #0]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 80146de:	68fb      	ldr	r3, [r7, #12]
 80146e0:	689a      	ldr	r2, [r3, #8]
 80146e2:	683b      	ldr	r3, [r7, #0]
 80146e4:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 80146e6:	68fb      	ldr	r3, [r7, #12]
 80146e8:	795b      	ldrb	r3, [r3, #5]
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	d100      	bne.n	80146f0 <CalcNextV10X+0x3c>
 80146ee:	e0a5      	b.n	801483c <CalcNextV10X+0x188>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 80146f0:	211c      	movs	r1, #28
 80146f2:	187b      	adds	r3, r7, r1
 80146f4:	2202      	movs	r2, #2
 80146f6:	701a      	strb	r2, [r3, #0]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80146f8:	68fb      	ldr	r3, [r7, #12]
 80146fa:	7c9a      	ldrb	r2, [r3, #18]
 80146fc:	187b      	adds	r3, r7, r1
 80146fe:	709a      	strb	r2, [r3, #2]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8014700:	68fb      	ldr	r3, [r7, #12]
 8014702:	7cdb      	ldrb	r3, [r3, #19]
 8014704:	187a      	adds	r2, r7, r1
 8014706:	0011      	movs	r1, r2
 8014708:	0018      	movs	r0, r3
 801470a:	f002 fac2 	bl	8016c92 <RegionGetPhyParam>
 801470e:	0003      	movs	r3, r0
 8014710:	001a      	movs	r2, r3
 8014712:	2118      	movs	r1, #24
 8014714:	187b      	adds	r3, r7, r1
 8014716:	601a      	str	r2, [r3, #0]
        minTxDatarate = phyParam.Value;
 8014718:	187b      	adds	r3, r7, r1
 801471a:	681a      	ldr	r2, [r3, #0]
 801471c:	2124      	movs	r1, #36	; 0x24
 801471e:	187b      	adds	r3, r7, r1
 8014720:	701a      	strb	r2, [r3, #0]
        datarate = MAX( datarate, minTxDatarate );
 8014722:	193a      	adds	r2, r7, r4
 8014724:	187b      	adds	r3, r7, r1
 8014726:	1939      	adds	r1, r7, r4
 8014728:	780c      	ldrb	r4, [r1, #0]
 801472a:	781b      	ldrb	r3, [r3, #0]
 801472c:	b258      	sxtb	r0, r3
 801472e:	b261      	sxtb	r1, r4
 8014730:	4288      	cmp	r0, r1
 8014732:	da00      	bge.n	8014736 <CalcNextV10X+0x82>
 8014734:	1c23      	adds	r3, r4, #0
 8014736:	7013      	strb	r3, [r2, #0]

        if( datarate == minTxDatarate )
 8014738:	2326      	movs	r3, #38	; 0x26
 801473a:	18fa      	adds	r2, r7, r3
 801473c:	2324      	movs	r3, #36	; 0x24
 801473e:	18fb      	adds	r3, r7, r3
 8014740:	7812      	ldrb	r2, [r2, #0]
 8014742:	b252      	sxtb	r2, r2
 8014744:	781b      	ldrb	r3, [r3, #0]
 8014746:	b25b      	sxtb	r3, r3
 8014748:	429a      	cmp	r2, r3
 801474a:	d107      	bne.n	801475c <CalcNextV10X+0xa8>
        {
            *adrAckCounter = 0;
 801474c:	683b      	ldr	r3, [r7, #0]
 801474e:	2200      	movs	r2, #0
 8014750:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 8014752:	2327      	movs	r3, #39	; 0x27
 8014754:	18fb      	adds	r3, r7, r3
 8014756:	2200      	movs	r2, #0
 8014758:	701a      	strb	r2, [r3, #0]
 801475a:	e06f      	b.n	801483c <CalcNextV10X+0x188>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 801475c:	68fb      	ldr	r3, [r7, #12]
 801475e:	689b      	ldr	r3, [r3, #8]
 8014760:	68fa      	ldr	r2, [r7, #12]
 8014762:	8992      	ldrh	r2, [r2, #12]
 8014764:	4293      	cmp	r3, r2
 8014766:	d304      	bcc.n	8014772 <CalcNextV10X+0xbe>
            {
                adrAckReq = true;
 8014768:	2327      	movs	r3, #39	; 0x27
 801476a:	18fb      	adds	r3, r7, r3
 801476c:	2201      	movs	r2, #1
 801476e:	701a      	strb	r2, [r3, #0]
 8014770:	e003      	b.n	801477a <CalcNextV10X+0xc6>
            }
            else
            {
                adrAckReq = false;
 8014772:	2327      	movs	r3, #39	; 0x27
 8014774:	18fb      	adds	r3, r7, r3
 8014776:	2200      	movs	r2, #0
 8014778:	701a      	strb	r2, [r3, #0]
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 801477a:	68fb      	ldr	r3, [r7, #12]
 801477c:	689b      	ldr	r3, [r3, #8]
 801477e:	68fa      	ldr	r2, [r7, #12]
 8014780:	8992      	ldrh	r2, [r2, #12]
 8014782:	0011      	movs	r1, r2
 8014784:	68fa      	ldr	r2, [r7, #12]
 8014786:	89d2      	ldrh	r2, [r2, #14]
 8014788:	188a      	adds	r2, r1, r2
 801478a:	4293      	cmp	r3, r2
 801478c:	d356      	bcc.n	801483c <CalcNextV10X+0x188>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 801478e:	241c      	movs	r4, #28
 8014790:	193b      	adds	r3, r7, r4
 8014792:	2208      	movs	r2, #8
 8014794:	701a      	strb	r2, [r3, #0]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8014796:	68fb      	ldr	r3, [r7, #12]
 8014798:	7cdb      	ldrb	r3, [r3, #19]
 801479a:	193a      	adds	r2, r7, r4
 801479c:	0011      	movs	r1, r2
 801479e:	0018      	movs	r0, r3
 80147a0:	f002 fa77 	bl	8016c92 <RegionGetPhyParam>
 80147a4:	0003      	movs	r3, r0
 80147a6:	001a      	movs	r2, r3
 80147a8:	2518      	movs	r5, #24
 80147aa:	197b      	adds	r3, r7, r5
 80147ac:	601a      	str	r2, [r3, #0]
                txPower = phyParam.Value;
 80147ae:	197b      	adds	r3, r7, r5
 80147b0:	681a      	ldr	r2, [r3, #0]
 80147b2:	2325      	movs	r3, #37	; 0x25
 80147b4:	18fb      	adds	r3, r7, r3
 80147b6:	701a      	strb	r2, [r3, #0]

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 80147b8:	68fb      	ldr	r3, [r7, #12]
 80147ba:	689a      	ldr	r2, [r3, #8]
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	89db      	ldrh	r3, [r3, #14]
 80147c0:	0019      	movs	r1, r3
 80147c2:	0010      	movs	r0, r2
 80147c4:	f7eb fd2e 	bl	8000224 <__aeabi_uidivmod>
 80147c8:	000b      	movs	r3, r1
 80147ca:	2b01      	cmp	r3, #1
 80147cc:	d136      	bne.n	801483c <CalcNextV10X+0x188>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 80147ce:	193b      	adds	r3, r7, r4
 80147d0:	2222      	movs	r2, #34	; 0x22
 80147d2:	701a      	strb	r2, [r3, #0]
                    getPhy.Datarate = datarate;
 80147d4:	193b      	adds	r3, r7, r4
 80147d6:	2626      	movs	r6, #38	; 0x26
 80147d8:	19ba      	adds	r2, r7, r6
 80147da:	7812      	ldrb	r2, [r2, #0]
 80147dc:	705a      	strb	r2, [r3, #1]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80147de:	68fb      	ldr	r3, [r7, #12]
 80147e0:	7c9a      	ldrb	r2, [r3, #18]
 80147e2:	193b      	adds	r3, r7, r4
 80147e4:	709a      	strb	r2, [r3, #2]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80147e6:	68fb      	ldr	r3, [r7, #12]
 80147e8:	7cdb      	ldrb	r3, [r3, #19]
 80147ea:	193a      	adds	r2, r7, r4
 80147ec:	0011      	movs	r1, r2
 80147ee:	0018      	movs	r0, r3
 80147f0:	f002 fa4f 	bl	8016c92 <RegionGetPhyParam>
 80147f4:	0003      	movs	r3, r0
 80147f6:	001a      	movs	r2, r3
 80147f8:	197b      	adds	r3, r7, r5
 80147fa:	601a      	str	r2, [r3, #0]
                    datarate = phyParam.Value;
 80147fc:	197b      	adds	r3, r7, r5
 80147fe:	681a      	ldr	r2, [r3, #0]
 8014800:	19bb      	adds	r3, r7, r6
 8014802:	701a      	strb	r2, [r3, #0]

                    if( datarate == minTxDatarate )
 8014804:	19ba      	adds	r2, r7, r6
 8014806:	2324      	movs	r3, #36	; 0x24
 8014808:	18fb      	adds	r3, r7, r3
 801480a:	7812      	ldrb	r2, [r2, #0]
 801480c:	b252      	sxtb	r2, r2
 801480e:	781b      	ldrb	r3, [r3, #0]
 8014810:	b25b      	sxtb	r3, r3
 8014812:	429a      	cmp	r2, r3
 8014814:	d112      	bne.n	801483c <CalcNextV10X+0x188>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 8014816:	2327      	movs	r3, #39	; 0x27
 8014818:	18fb      	adds	r3, r7, r3
 801481a:	2200      	movs	r2, #0
 801481c:	701a      	strb	r2, [r3, #0]
                        if( adrNext->UpdateChanMask == true )
 801481e:	68fb      	ldr	r3, [r7, #12]
 8014820:	791b      	ldrb	r3, [r3, #4]
 8014822:	2b00      	cmp	r3, #0
 8014824:	d00a      	beq.n	801483c <CalcNextV10X+0x188>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8014826:	2110      	movs	r1, #16
 8014828:	187b      	adds	r3, r7, r1
 801482a:	2202      	movs	r2, #2
 801482c:	711a      	strb	r2, [r3, #4]
                            RegionInitDefaults( adrNext->Region, &params );
 801482e:	68fb      	ldr	r3, [r7, #12]
 8014830:	7cdb      	ldrb	r3, [r3, #19]
 8014832:	187a      	adds	r2, r7, r1
 8014834:	0011      	movs	r1, r2
 8014836:	0018      	movs	r0, r3
 8014838:	f002 fa67 	bl	8016d0a <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 801483c:	68bb      	ldr	r3, [r7, #8]
 801483e:	2226      	movs	r2, #38	; 0x26
 8014840:	18ba      	adds	r2, r7, r2
 8014842:	7812      	ldrb	r2, [r2, #0]
 8014844:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	2225      	movs	r2, #37	; 0x25
 801484a:	18ba      	adds	r2, r7, r2
 801484c:	7812      	ldrb	r2, [r2, #0]
 801484e:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8014850:	2327      	movs	r3, #39	; 0x27
 8014852:	18fb      	adds	r3, r7, r3
 8014854:	781b      	ldrb	r3, [r3, #0]
}
 8014856:	0018      	movs	r0, r3
 8014858:	46bd      	mov	sp, r7
 801485a:	b00b      	add	sp, #44	; 0x2c
 801485c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801485e <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 801485e:	b580      	push	{r7, lr}
 8014860:	b084      	sub	sp, #16
 8014862:	af00      	add	r7, sp, #0
 8014864:	60f8      	str	r0, [r7, #12]
 8014866:	60b9      	str	r1, [r7, #8]
 8014868:	607a      	str	r2, [r7, #4]
 801486a:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 801486c:	68fb      	ldr	r3, [r7, #12]
 801486e:	789b      	ldrb	r3, [r3, #2]
 8014870:	2b00      	cmp	r3, #0
 8014872:	d107      	bne.n	8014884 <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 8014874:	683b      	ldr	r3, [r7, #0]
 8014876:	687a      	ldr	r2, [r7, #4]
 8014878:	68b9      	ldr	r1, [r7, #8]
 801487a:	68f8      	ldr	r0, [r7, #12]
 801487c:	f7ff ff1a 	bl	80146b4 <CalcNextV10X>
 8014880:	0003      	movs	r3, r0
 8014882:	e000      	b.n	8014886 <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 8014884:	2300      	movs	r3, #0
}
 8014886:	0018      	movs	r0, r3
 8014888:	46bd      	mov	sp, r7
 801488a:	b004      	add	sp, #16
 801488c:	bd80      	pop	{r7, pc}

0801488e <LoRaMacClassBInit>:
}

#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmEvent classBNvmCtxChanged )
{
 801488e:	b580      	push	{r7, lr}
 8014890:	b084      	sub	sp, #16
 8014892:	af00      	add	r7, sp, #0
 8014894:	60f8      	str	r0, [r7, #12]
 8014896:	60b9      	str	r1, [r7, #8]
 8014898:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif // LORAMAC_CLASSB_ENABLED
}
 801489a:	46c0      	nop			; (mov r8, r8)
 801489c:	46bd      	mov	sp, r7
 801489e:	b004      	add	sp, #16
 80148a0:	bd80      	pop	{r7, pc}

080148a2 <LoRaMacClassBRestoreNvmCtx>:

bool LoRaMacClassBRestoreNvmCtx( void* classBNvmCtx )
{
 80148a2:	b580      	push	{r7, lr}
 80148a4:	b082      	sub	sp, #8
 80148a6:	af00      	add	r7, sp, #0
 80148a8:	6078      	str	r0, [r7, #4]
    else
    {
        return false;
    }
#else
    return true;
 80148aa:	2301      	movs	r3, #1
#endif // LORAMAC_CLASSB_ENABLED
}
 80148ac:	0018      	movs	r0, r3
 80148ae:	46bd      	mov	sp, r7
 80148b0:	b002      	add	sp, #8
 80148b2:	bd80      	pop	{r7, pc}

080148b4 <LoRaMacClassBGetNvmCtx>:

void* LoRaMacClassBGetNvmCtx( size_t* classBNvmCtxSize )
{
 80148b4:	b580      	push	{r7, lr}
 80148b6:	b082      	sub	sp, #8
 80148b8:	af00      	add	r7, sp, #0
 80148ba:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    *classBNvmCtxSize = sizeof( NvmCtx );
    return &NvmCtx;
#else
    *classBNvmCtxSize = 0;
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	2200      	movs	r2, #0
 80148c0:	601a      	str	r2, [r3, #0]
    return NULL;
 80148c2:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 80148c4:	0018      	movs	r0, r3
 80148c6:	46bd      	mov	sp, r7
 80148c8:	b002      	add	sp, #8
 80148ca:	bd80      	pop	{r7, pc}

080148cc <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 80148cc:	b580      	push	{r7, lr}
 80148ce:	b082      	sub	sp, #8
 80148d0:	af00      	add	r7, sp, #0
 80148d2:	0002      	movs	r2, r0
 80148d4:	1dfb      	adds	r3, r7, #7
 80148d6:	701a      	strb	r2, [r3, #0]
            Ctx.BeaconState = beaconState;
        }
    }
    Ctx.NvmCtx->BeaconCtx.BeaconState = Ctx.BeaconState;
#endif // LORAMAC_CLASSB_ENABLED
}
 80148d8:	46c0      	nop			; (mov r8, r8)
 80148da:	46bd      	mov	sp, r7
 80148dc:	b002      	add	sp, #8
 80148de:	bd80      	pop	{r7, pc}

080148e0 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 80148e0:	b580      	push	{r7, lr}
 80148e2:	b082      	sub	sp, #8
 80148e4:	af00      	add	r7, sp, #0
 80148e6:	0002      	movs	r2, r0
 80148e8:	1dfb      	adds	r3, r7, #7
 80148ea:	701a      	strb	r2, [r3, #0]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif // LORAMAC_CLASSB_ENABLED
}
 80148ec:	46c0      	nop			; (mov r8, r8)
 80148ee:	46bd      	mov	sp, r7
 80148f0:	b002      	add	sp, #8
 80148f2:	bd80      	pop	{r7, pc}

080148f4 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 80148f4:	b580      	push	{r7, lr}
 80148f6:	b082      	sub	sp, #8
 80148f8:	af00      	add	r7, sp, #0
 80148fa:	0002      	movs	r2, r0
 80148fc:	1dfb      	adds	r3, r7, #7
 80148fe:	701a      	strb	r2, [r3, #0]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif // LORAMAC_CLASSB_ENABLED
}
 8014900:	46c0      	nop			; (mov r8, r8)
 8014902:	46bd      	mov	sp, r7
 8014904:	b002      	add	sp, #8
 8014906:	bd80      	pop	{r7, pc}

08014908 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8014908:	b580      	push	{r7, lr}
 801490a:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 801490c:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 801490e:	0018      	movs	r0, r3
 8014910:	46bd      	mov	sp, r7
 8014912:	bd80      	pop	{r7, pc}

08014914 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8014914:	b580      	push	{r7, lr}
 8014916:	b082      	sub	sp, #8
 8014918:	af00      	add	r7, sp, #0
 801491a:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 801491c:	46c0      	nop			; (mov r8, r8)
 801491e:	46bd      	mov	sp, r7
 8014920:	b002      	add	sp, #8
 8014922:	bd80      	pop	{r7, pc}

08014924 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8014924:	b580      	push	{r7, lr}
 8014926:	b082      	sub	sp, #8
 8014928:	af00      	add	r7, sp, #0
 801492a:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 801492c:	46c0      	nop			; (mov r8, r8)
 801492e:	46bd      	mov	sp, r7
 8014930:	b002      	add	sp, #8
 8014932:	bd80      	pop	{r7, pc}

08014934 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8014934:	b580      	push	{r7, lr}
 8014936:	b082      	sub	sp, #8
 8014938:	af00      	add	r7, sp, #0
 801493a:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 801493c:	46c0      	nop			; (mov r8, r8)
 801493e:	46bd      	mov	sp, r7
 8014940:	b002      	add	sp, #8
 8014942:	bd80      	pop	{r7, pc}

08014944 <LoRaMacClassBRxBeacon>:
    }
}
#endif // LORAMAC_CLASSB_ENABLED

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 8014944:	b580      	push	{r7, lr}
 8014946:	b082      	sub	sp, #8
 8014948:	af00      	add	r7, sp, #0
 801494a:	6078      	str	r0, [r7, #4]
 801494c:	000a      	movs	r2, r1
 801494e:	1cbb      	adds	r3, r7, #2
 8014950:	801a      	strh	r2, [r3, #0]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8014952:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8014954:	0018      	movs	r0, r3
 8014956:	46bd      	mov	sp, r7
 8014958:	b002      	add	sp, #8
 801495a:	bd80      	pop	{r7, pc}

0801495c <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 801495c:	b580      	push	{r7, lr}
 801495e:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8014960:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8014962:	0018      	movs	r0, r3
 8014964:	46bd      	mov	sp, r7
 8014966:	bd80      	pop	{r7, pc}

08014968 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8014968:	b580      	push	{r7, lr}
 801496a:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 801496c:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 801496e:	0018      	movs	r0, r3
 8014970:	46bd      	mov	sp, r7
 8014972:	bd80      	pop	{r7, pc}

08014974 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 8014974:	b580      	push	{r7, lr}
 8014976:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8014978:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 801497a:	0018      	movs	r0, r3
 801497c:	46bd      	mov	sp, r7
 801497e:	bd80      	pop	{r7, pc}

08014980 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 8014980:	b580      	push	{r7, lr}
 8014982:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8014984:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8014986:	0018      	movs	r0, r3
 8014988:	46bd      	mov	sp, r7
 801498a:	bd80      	pop	{r7, pc}

0801498c <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 801498c:	b580      	push	{r7, lr}
 801498e:	b082      	sub	sp, #8
 8014990:	af00      	add	r7, sp, #0
 8014992:	0002      	movs	r2, r0
 8014994:	1dfb      	adds	r3, r7, #7
 8014996:	701a      	strb	r2, [r3, #0]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.NvmCtx->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    Ctx.NvmCtx->PingSlotCtx.PingPeriod = CalcPingPeriod( Ctx.NvmCtx->PingSlotCtx.PingNb );
    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
 8014998:	46c0      	nop			; (mov r8, r8)
 801499a:	46bd      	mov	sp, r7
 801499c:	b002      	add	sp, #8
 801499e:	bd80      	pop	{r7, pc}

080149a0 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 80149a0:	b580      	push	{r7, lr}
 80149a2:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 80149a4:	46c0      	nop			; (mov r8, r8)
 80149a6:	46bd      	mov	sp, r7
 80149a8:	bd80      	pop	{r7, pc}

080149aa <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 80149aa:	b580      	push	{r7, lr}
 80149ac:	af00      	add	r7, sp, #0

        Ctx.NvmCtx->BeaconCtx.BeaconState = Ctx.BeaconState;
        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 80149ae:	46c0      	nop			; (mov r8, r8)
 80149b0:	46bd      	mov	sp, r7
 80149b2:	bd80      	pop	{r7, pc}

080149b4 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 80149b4:	b580      	push	{r7, lr}
 80149b6:	b082      	sub	sp, #8
 80149b8:	af00      	add	r7, sp, #0
 80149ba:	0002      	movs	r2, r0
 80149bc:	1dfb      	adds	r3, r7, #7
 80149be:	701a      	strb	r2, [r3, #0]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80149c0:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
 80149c2:	0018      	movs	r0, r3
 80149c4:	46bd      	mov	sp, r7
 80149c6:	b002      	add	sp, #8
 80149c8:	bd80      	pop	{r7, pc}

080149ca <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 80149ca:	b580      	push	{r7, lr}
 80149cc:	b082      	sub	sp, #8
 80149ce:	af00      	add	r7, sp, #0
 80149d0:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80149d2:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
 80149d4:	0018      	movs	r0, r3
 80149d6:	46bd      	mov	sp, r7
 80149d8:	b002      	add	sp, #8
 80149da:	bd80      	pop	{r7, pc}

080149dc <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 80149dc:	b580      	push	{r7, lr}
 80149de:	b082      	sub	sp, #8
 80149e0:	af00      	add	r7, sp, #0
 80149e2:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80149e4:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
 80149e6:	0018      	movs	r0, r3
 80149e8:	46bd      	mov	sp, r7
 80149ea:	b002      	add	sp, #8
 80149ec:	bd80      	pop	{r7, pc}

080149ee <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 80149ee:	b580      	push	{r7, lr}
 80149f0:	af00      	add	r7, sp, #0
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        Ctx.NvmCtx->PingSlotCtx.Ctrl.Assigned = 1;
        NvmContextChange( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 80149f2:	46c0      	nop			; (mov r8, r8)
 80149f4:	46bd      	mov	sp, r7
 80149f6:	bd80      	pop	{r7, pc}

080149f8 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 80149f8:	b580      	push	{r7, lr}
 80149fa:	b082      	sub	sp, #8
 80149fc:	af00      	add	r7, sp, #0
 80149fe:	0002      	movs	r2, r0
 8014a00:	6039      	str	r1, [r7, #0]
 8014a02:	1dfb      	adds	r3, r7, #7
 8014a04:	701a      	strb	r2, [r3, #0]
        NvmContextChange( );
    }

    return status;
#else
    return 0;
 8014a06:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8014a08:	0018      	movs	r0, r3
 8014a0a:	46bd      	mov	sp, r7
 8014a0c:	b002      	add	sp, #8
 8014a0e:	bd80      	pop	{r7, pc}

08014a10 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8014a10:	b580      	push	{r7, lr}
 8014a12:	b082      	sub	sp, #8
 8014a14:	af00      	add	r7, sp, #0
 8014a16:	603a      	str	r2, [r7, #0]
 8014a18:	1dbb      	adds	r3, r7, #6
 8014a1a:	1c02      	adds	r2, r0, #0
 8014a1c:	801a      	strh	r2, [r3, #0]
 8014a1e:	1d7b      	adds	r3, r7, #5
 8014a20:	1c0a      	adds	r2, r1, #0
 8014a22:	701a      	strb	r2, [r3, #0]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8014a24:	46c0      	nop			; (mov r8, r8)
 8014a26:	46bd      	mov	sp, r7
 8014a28:	b002      	add	sp, #8
 8014a2a:	bd80      	pop	{r7, pc}

08014a2c <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8014a2c:	b580      	push	{r7, lr}
 8014a2e:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8014a30:	46c0      	nop			; (mov r8, r8)
 8014a32:	46bd      	mov	sp, r7
 8014a34:	bd80      	pop	{r7, pc}

08014a36 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8014a36:	b580      	push	{r7, lr}
 8014a38:	b082      	sub	sp, #8
 8014a3a:	af00      	add	r7, sp, #0
 8014a3c:	6078      	str	r0, [r7, #4]
        NvmContextChange( );
        return true;
    }
    return false;
#else
    return false;
 8014a3e:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8014a40:	0018      	movs	r0, r3
 8014a42:	46bd      	mov	sp, r7
 8014a44:	b002      	add	sp, #8
 8014a46:	bd80      	pop	{r7, pc}

08014a48 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8014a48:	b580      	push	{r7, lr}
 8014a4a:	b082      	sub	sp, #8
 8014a4c:	af00      	add	r7, sp, #0
 8014a4e:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 8014a50:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8014a52:	0018      	movs	r0, r3
 8014a54:	46bd      	mov	sp, r7
 8014a56:	b002      	add	sp, #8
 8014a58:	bd80      	pop	{r7, pc}

08014a5a <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8014a5a:	b580      	push	{r7, lr}
 8014a5c:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif // LORAMAC_CLASSB_ENABLED
}
 8014a5e:	46c0      	nop			; (mov r8, r8)
 8014a60:	46bd      	mov	sp, r7
 8014a62:	bd80      	pop	{r7, pc}

08014a64 <LoRaMacClassBProcess>:
    }
#endif // LORAMAC_CLASSB_ENABLED
}

void LoRaMacClassBProcess( void )
{
 8014a64:	b580      	push	{r7, lr}
 8014a66:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8014a68:	46c0      	nop			; (mov r8, r8)
 8014a6a:	46bd      	mov	sp, r7
 8014a6c:	bd80      	pop	{r7, pc}

08014a6e <IsSlotFree>:
 *
 * \param[IN]     slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8014a6e:	b580      	push	{r7, lr}
 8014a70:	b084      	sub	sp, #16
 8014a72:	af00      	add	r7, sp, #0
 8014a74:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8014a7a:	230e      	movs	r3, #14
 8014a7c:	18fb      	adds	r3, r7, r3
 8014a7e:	2200      	movs	r2, #0
 8014a80:	801a      	strh	r2, [r3, #0]
 8014a82:	e00f      	b.n	8014aa4 <IsSlotFree+0x36>
    {
        if( mem[size] != 0x00 )
 8014a84:	230e      	movs	r3, #14
 8014a86:	18fb      	adds	r3, r7, r3
 8014a88:	881b      	ldrh	r3, [r3, #0]
 8014a8a:	68ba      	ldr	r2, [r7, #8]
 8014a8c:	18d3      	adds	r3, r2, r3
 8014a8e:	781b      	ldrb	r3, [r3, #0]
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d001      	beq.n	8014a98 <IsSlotFree+0x2a>
        {
            return false;
 8014a94:	2300      	movs	r3, #0
 8014a96:	e00b      	b.n	8014ab0 <IsSlotFree+0x42>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8014a98:	210e      	movs	r1, #14
 8014a9a:	187b      	adds	r3, r7, r1
 8014a9c:	881a      	ldrh	r2, [r3, #0]
 8014a9e:	187b      	adds	r3, r7, r1
 8014aa0:	3201      	adds	r2, #1
 8014aa2:	801a      	strh	r2, [r3, #0]
 8014aa4:	230e      	movs	r3, #14
 8014aa6:	18fb      	adds	r3, r7, r3
 8014aa8:	881b      	ldrh	r3, [r3, #0]
 8014aaa:	2b0f      	cmp	r3, #15
 8014aac:	d9ea      	bls.n	8014a84 <IsSlotFree+0x16>
        }
    }
    return true;
 8014aae:	2301      	movs	r3, #1
}
 8014ab0:	0018      	movs	r0, r3
 8014ab2:	46bd      	mov	sp, r7
 8014ab4:	b004      	add	sp, #16
 8014ab6:	bd80      	pop	{r7, pc}

08014ab8 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8014ab8:	b580      	push	{r7, lr}
 8014aba:	b082      	sub	sp, #8
 8014abc:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8014abe:	1dfb      	adds	r3, r7, #7
 8014ac0:	2200      	movs	r2, #0
 8014ac2:	701a      	strb	r2, [r3, #0]

    while( IsSlotFree( ( const MacCommand_t* )&NvmCtx.MacCommandSlots[itr] ) == false )
 8014ac4:	e00a      	b.n	8014adc <MallocNewMacCommandSlot+0x24>
    {
        itr++;
 8014ac6:	1dfb      	adds	r3, r7, #7
 8014ac8:	781a      	ldrb	r2, [r3, #0]
 8014aca:	1dfb      	adds	r3, r7, #7
 8014acc:	3201      	adds	r2, #1
 8014ace:	701a      	strb	r2, [r3, #0]
        if( itr == NUM_OF_MAC_COMMANDS )
 8014ad0:	1dfb      	adds	r3, r7, #7
 8014ad2:	781b      	ldrb	r3, [r3, #0]
 8014ad4:	2b0f      	cmp	r3, #15
 8014ad6:	d101      	bne.n	8014adc <MallocNewMacCommandSlot+0x24>
        {
            return NULL;
 8014ad8:	2300      	movs	r3, #0
 8014ada:	e017      	b.n	8014b0c <MallocNewMacCommandSlot+0x54>
    while( IsSlotFree( ( const MacCommand_t* )&NvmCtx.MacCommandSlots[itr] ) == false )
 8014adc:	1dfb      	adds	r3, r7, #7
 8014ade:	781b      	ldrb	r3, [r3, #0]
 8014ae0:	011b      	lsls	r3, r3, #4
 8014ae2:	3308      	adds	r3, #8
 8014ae4:	001a      	movs	r2, r3
 8014ae6:	4b0b      	ldr	r3, [pc, #44]	; (8014b14 <MallocNewMacCommandSlot+0x5c>)
 8014ae8:	18d3      	adds	r3, r2, r3
 8014aea:	0018      	movs	r0, r3
 8014aec:	f7ff ffbf 	bl	8014a6e <IsSlotFree>
 8014af0:	0003      	movs	r3, r0
 8014af2:	001a      	movs	r2, r3
 8014af4:	2301      	movs	r3, #1
 8014af6:	4053      	eors	r3, r2
 8014af8:	b2db      	uxtb	r3, r3
 8014afa:	2b00      	cmp	r3, #0
 8014afc:	d1e3      	bne.n	8014ac6 <MallocNewMacCommandSlot+0xe>
        }
    }

    return &NvmCtx.MacCommandSlots[itr];
 8014afe:	1dfb      	adds	r3, r7, #7
 8014b00:	781b      	ldrb	r3, [r3, #0]
 8014b02:	011b      	lsls	r3, r3, #4
 8014b04:	3308      	adds	r3, #8
 8014b06:	001a      	movs	r2, r3
 8014b08:	4b02      	ldr	r3, [pc, #8]	; (8014b14 <MallocNewMacCommandSlot+0x5c>)
 8014b0a:	18d3      	adds	r3, r2, r3
}
 8014b0c:	0018      	movs	r0, r3
 8014b0e:	46bd      	mov	sp, r7
 8014b10:	b002      	add	sp, #8
 8014b12:	bd80      	pop	{r7, pc}
 8014b14:	20000bf0 	.word	0x20000bf0

08014b18 <FreeMacCommandSlot>:
 * \param[IN]     slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8014b18:	b580      	push	{r7, lr}
 8014b1a:	b082      	sub	sp, #8
 8014b1c:	af00      	add	r7, sp, #0
 8014b1e:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d101      	bne.n	8014b2a <FreeMacCommandSlot+0x12>
    {
        return false;
 8014b26:	2300      	movs	r3, #0
 8014b28:	e006      	b.n	8014b38 <FreeMacCommandSlot+0x20>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	2210      	movs	r2, #16
 8014b2e:	2100      	movs	r1, #0
 8014b30:	0018      	movs	r0, r3
 8014b32:	f004 fd6b 	bl	801960c <memset1>

    return true;
 8014b36:	2301      	movs	r3, #1
}
 8014b38:	0018      	movs	r0, r3
 8014b3a:	46bd      	mov	sp, r7
 8014b3c:	b002      	add	sp, #8
 8014b3e:	bd80      	pop	{r7, pc}

08014b40 <LinkedListInit>:
 *
 * \param[IN]     list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8014b40:	b580      	push	{r7, lr}
 8014b42:	b082      	sub	sp, #8
 8014b44:	af00      	add	r7, sp, #0
 8014b46:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	2b00      	cmp	r3, #0
 8014b4c:	d101      	bne.n	8014b52 <LinkedListInit+0x12>
    {
        return false;
 8014b4e:	2300      	movs	r3, #0
 8014b50:	e006      	b.n	8014b60 <LinkedListInit+0x20>
    }

    list->First = NULL;
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	2200      	movs	r2, #0
 8014b56:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	2200      	movs	r2, #0
 8014b5c:	605a      	str	r2, [r3, #4]

    return true;
 8014b5e:	2301      	movs	r3, #1
}
 8014b60:	0018      	movs	r0, r3
 8014b62:	46bd      	mov	sp, r7
 8014b64:	b002      	add	sp, #8
 8014b66:	bd80      	pop	{r7, pc}

08014b68 <LinkedListAdd>:
 * \param[IN]     list           - List where the element shall be added.
 * \param[IN]     element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8014b68:	b580      	push	{r7, lr}
 8014b6a:	b082      	sub	sp, #8
 8014b6c:	af00      	add	r7, sp, #0
 8014b6e:	6078      	str	r0, [r7, #4]
 8014b70:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	d002      	beq.n	8014b7e <LinkedListAdd+0x16>
 8014b78:	683b      	ldr	r3, [r7, #0]
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	d101      	bne.n	8014b82 <LinkedListAdd+0x1a>
    {
        return false;
 8014b7e:	2300      	movs	r3, #0
 8014b80:	e015      	b.n	8014bae <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	681b      	ldr	r3, [r3, #0]
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	d102      	bne.n	8014b90 <LinkedListAdd+0x28>
    {
        list->First = element;
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	683a      	ldr	r2, [r7, #0]
 8014b8e:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	685b      	ldr	r3, [r3, #4]
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d003      	beq.n	8014ba0 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	685b      	ldr	r3, [r3, #4]
 8014b9c:	683a      	ldr	r2, [r7, #0]
 8014b9e:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8014ba0:	683b      	ldr	r3, [r7, #0]
 8014ba2:	2200      	movs	r2, #0
 8014ba4:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	683a      	ldr	r2, [r7, #0]
 8014baa:	605a      	str	r2, [r3, #4]

    return true;
 8014bac:	2301      	movs	r3, #1
}
 8014bae:	0018      	movs	r0, r3
 8014bb0:	46bd      	mov	sp, r7
 8014bb2:	b002      	add	sp, #8
 8014bb4:	bd80      	pop	{r7, pc}

08014bb6 <LinkedListGetPrevious>:
 * \param[IN]     list           - List
 * \param[IN]     element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8014bb6:	b580      	push	{r7, lr}
 8014bb8:	b084      	sub	sp, #16
 8014bba:	af00      	add	r7, sp, #0
 8014bbc:	6078      	str	r0, [r7, #4]
 8014bbe:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	2b00      	cmp	r3, #0
 8014bc4:	d002      	beq.n	8014bcc <LinkedListGetPrevious+0x16>
 8014bc6:	683b      	ldr	r3, [r7, #0]
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d101      	bne.n	8014bd0 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8014bcc:	2300      	movs	r3, #0
 8014bce:	e016      	b.n	8014bfe <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	681b      	ldr	r3, [r3, #0]
 8014bd4:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8014bd6:	683a      	ldr	r2, [r7, #0]
 8014bd8:	68fb      	ldr	r3, [r7, #12]
 8014bda:	429a      	cmp	r2, r3
 8014bdc:	d00c      	beq.n	8014bf8 <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8014bde:	e002      	b.n	8014be6 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8014be0:	68fb      	ldr	r3, [r7, #12]
 8014be2:	681b      	ldr	r3, [r3, #0]
 8014be4:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8014be6:	68fb      	ldr	r3, [r7, #12]
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	d007      	beq.n	8014bfc <LinkedListGetPrevious+0x46>
 8014bec:	68fb      	ldr	r3, [r7, #12]
 8014bee:	681b      	ldr	r3, [r3, #0]
 8014bf0:	683a      	ldr	r2, [r7, #0]
 8014bf2:	429a      	cmp	r2, r3
 8014bf4:	d1f4      	bne.n	8014be0 <LinkedListGetPrevious+0x2a>
 8014bf6:	e001      	b.n	8014bfc <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8014bf8:	2300      	movs	r3, #0
 8014bfa:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8014bfc:	68fb      	ldr	r3, [r7, #12]
}
 8014bfe:	0018      	movs	r0, r3
 8014c00:	46bd      	mov	sp, r7
 8014c02:	b004      	add	sp, #16
 8014c04:	bd80      	pop	{r7, pc}

08014c06 <LinkedListRemove>:
 * \param[IN]     list           - List where the element shall be removed from.
 * \param[IN]     element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8014c06:	b580      	push	{r7, lr}
 8014c08:	b084      	sub	sp, #16
 8014c0a:	af00      	add	r7, sp, #0
 8014c0c:	6078      	str	r0, [r7, #4]
 8014c0e:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	2b00      	cmp	r3, #0
 8014c14:	d002      	beq.n	8014c1c <LinkedListRemove+0x16>
 8014c16:	683b      	ldr	r3, [r7, #0]
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	d101      	bne.n	8014c20 <LinkedListRemove+0x1a>
    {
        return false;
 8014c1c:	2300      	movs	r3, #0
 8014c1e:	e023      	b.n	8014c68 <LinkedListRemove+0x62>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8014c20:	683a      	ldr	r2, [r7, #0]
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	0011      	movs	r1, r2
 8014c26:	0018      	movs	r0, r3
 8014c28:	f7ff ffc5 	bl	8014bb6 <LinkedListGetPrevious>
 8014c2c:	0003      	movs	r3, r0
 8014c2e:	60fb      	str	r3, [r7, #12]

    if( list->First == element )
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	681b      	ldr	r3, [r3, #0]
 8014c34:	683a      	ldr	r2, [r7, #0]
 8014c36:	429a      	cmp	r2, r3
 8014c38:	d103      	bne.n	8014c42 <LinkedListRemove+0x3c>
    {
        list->First = element->Next;
 8014c3a:	683b      	ldr	r3, [r7, #0]
 8014c3c:	681a      	ldr	r2, [r3, #0]
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	685b      	ldr	r3, [r3, #4]
 8014c46:	683a      	ldr	r2, [r7, #0]
 8014c48:	429a      	cmp	r2, r3
 8014c4a:	d102      	bne.n	8014c52 <LinkedListRemove+0x4c>
    {
        list->Last = PrevElement;
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	68fa      	ldr	r2, [r7, #12]
 8014c50:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8014c52:	68fb      	ldr	r3, [r7, #12]
 8014c54:	2b00      	cmp	r3, #0
 8014c56:	d003      	beq.n	8014c60 <LinkedListRemove+0x5a>
    {
        PrevElement->Next = element->Next;
 8014c58:	683b      	ldr	r3, [r7, #0]
 8014c5a:	681a      	ldr	r2, [r3, #0]
 8014c5c:	68fb      	ldr	r3, [r7, #12]
 8014c5e:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8014c60:	683b      	ldr	r3, [r7, #0]
 8014c62:	2200      	movs	r2, #0
 8014c64:	601a      	str	r2, [r3, #0]

    return true;
 8014c66:	2301      	movs	r3, #1
}
 8014c68:	0018      	movs	r0, r3
 8014c6a:	46bd      	mov	sp, r7
 8014c6c:	b004      	add	sp, #16
 8014c6e:	bd80      	pop	{r7, pc}

08014c70 <IsSticky>:
 * \param[IN]   cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8014c70:	b580      	push	{r7, lr}
 8014c72:	b082      	sub	sp, #8
 8014c74:	af00      	add	r7, sp, #0
 8014c76:	0002      	movs	r2, r0
 8014c78:	1dfb      	adds	r3, r7, #7
 8014c7a:	701a      	strb	r2, [r3, #0]
    switch( cid )
 8014c7c:	1dfb      	adds	r3, r7, #7
 8014c7e:	781b      	ldrb	r3, [r3, #0]
 8014c80:	2b05      	cmp	r3, #5
 8014c82:	d003      	beq.n	8014c8c <IsSticky+0x1c>
 8014c84:	db04      	blt.n	8014c90 <IsSticky+0x20>
 8014c86:	3b08      	subs	r3, #8
 8014c88:	2b02      	cmp	r3, #2
 8014c8a:	d801      	bhi.n	8014c90 <IsSticky+0x20>
    {
        case MOTE_MAC_DL_CHANNEL_ANS:
        case MOTE_MAC_RX_PARAM_SETUP_ANS:
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
            return true;
 8014c8c:	2301      	movs	r3, #1
 8014c8e:	e000      	b.n	8014c92 <IsSticky+0x22>
        default:
            return false;
 8014c90:	2300      	movs	r3, #0
    }
}
 8014c92:	0018      	movs	r0, r3
 8014c94:	46bd      	mov	sp, r7
 8014c96:	b002      	add	sp, #8
 8014c98:	bd80      	pop	{r7, pc}
	...

08014c9c <NvmCtxCallback>:

/*
 * \brief Wrapper function for the NvmCtx
 */
static void NvmCtxCallback( void )
{
 8014c9c:	b580      	push	{r7, lr}
 8014c9e:	af00      	add	r7, sp, #0
    if( CommandsNvmCtxChanged != NULL )
 8014ca0:	4b04      	ldr	r3, [pc, #16]	; (8014cb4 <NvmCtxCallback+0x18>)
 8014ca2:	681b      	ldr	r3, [r3, #0]
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	d002      	beq.n	8014cae <NvmCtxCallback+0x12>
    {
        CommandsNvmCtxChanged( );
 8014ca8:	4b02      	ldr	r3, [pc, #8]	; (8014cb4 <NvmCtxCallback+0x18>)
 8014caa:	681b      	ldr	r3, [r3, #0]
 8014cac:	4798      	blx	r3
    }
}
 8014cae:	46c0      	nop			; (mov r8, r8)
 8014cb0:	46bd      	mov	sp, r7
 8014cb2:	bd80      	pop	{r7, pc}
 8014cb4:	20000bec 	.word	0x20000bec

08014cb8 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( LoRaMacCommandsNvmEvent commandsNvmCtxChanged )
{
 8014cb8:	b580      	push	{r7, lr}
 8014cba:	b082      	sub	sp, #8
 8014cbc:	af00      	add	r7, sp, #0
 8014cbe:	6078      	str	r0, [r7, #4]
    // Initialize with default
    memset1( ( uint8_t* )&NvmCtx, 0, sizeof( NvmCtx ) );
 8014cc0:	4b08      	ldr	r3, [pc, #32]	; (8014ce4 <LoRaMacCommandsInit+0x2c>)
 8014cc2:	22fc      	movs	r2, #252	; 0xfc
 8014cc4:	2100      	movs	r1, #0
 8014cc6:	0018      	movs	r0, r3
 8014cc8:	f004 fca0 	bl	801960c <memset1>

    LinkedListInit( &NvmCtx.MacCommandList );
 8014ccc:	4b05      	ldr	r3, [pc, #20]	; (8014ce4 <LoRaMacCommandsInit+0x2c>)
 8014cce:	0018      	movs	r0, r3
 8014cd0:	f7ff ff36 	bl	8014b40 <LinkedListInit>

    // Assign callback
    CommandsNvmCtxChanged = commandsNvmCtxChanged;
 8014cd4:	4b04      	ldr	r3, [pc, #16]	; (8014ce8 <LoRaMacCommandsInit+0x30>)
 8014cd6:	687a      	ldr	r2, [r7, #4]
 8014cd8:	601a      	str	r2, [r3, #0]

    return LORAMAC_COMMANDS_SUCCESS;
 8014cda:	2300      	movs	r3, #0
}
 8014cdc:	0018      	movs	r0, r3
 8014cde:	46bd      	mov	sp, r7
 8014ce0:	b002      	add	sp, #8
 8014ce2:	bd80      	pop	{r7, pc}
 8014ce4:	20000bf0 	.word	0x20000bf0
 8014ce8:	20000bec 	.word	0x20000bec

08014cec <LoRaMacCommandsRestoreNvmCtx>:

LoRaMacCommandStatus_t LoRaMacCommandsRestoreNvmCtx( void* commandsNvmCtx )
{
 8014cec:	b580      	push	{r7, lr}
 8014cee:	b082      	sub	sp, #8
 8014cf0:	af00      	add	r7, sp, #0
 8014cf2:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( commandsNvmCtx != NULL )
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	2b00      	cmp	r3, #0
 8014cf8:	d007      	beq.n	8014d0a <LoRaMacCommandsRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* )&NvmCtx, ( uint8_t* )commandsNvmCtx, sizeof( NvmCtx ) );
 8014cfa:	6879      	ldr	r1, [r7, #4]
 8014cfc:	4b05      	ldr	r3, [pc, #20]	; (8014d14 <LoRaMacCommandsRestoreNvmCtx+0x28>)
 8014cfe:	22fc      	movs	r2, #252	; 0xfc
 8014d00:	0018      	movs	r0, r3
 8014d02:	f004 fc45 	bl	8019590 <memcpy1>
        return LORAMAC_COMMANDS_SUCCESS;
 8014d06:	2300      	movs	r3, #0
 8014d08:	e000      	b.n	8014d0c <LoRaMacCommandsRestoreNvmCtx+0x20>
    }
    else
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014d0a:	2301      	movs	r3, #1
    }
}
 8014d0c:	0018      	movs	r0, r3
 8014d0e:	46bd      	mov	sp, r7
 8014d10:	b002      	add	sp, #8
 8014d12:	bd80      	pop	{r7, pc}
 8014d14:	20000bf0 	.word	0x20000bf0

08014d18 <LoRaMacCommandsGetNvmCtx>:

void* LoRaMacCommandsGetNvmCtx( size_t* commandsNvmCtxSize )
{
 8014d18:	b580      	push	{r7, lr}
 8014d1a:	b082      	sub	sp, #8
 8014d1c:	af00      	add	r7, sp, #0
 8014d1e:	6078      	str	r0, [r7, #4]
    *commandsNvmCtxSize = sizeof( NvmCtx );
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	22fc      	movs	r2, #252	; 0xfc
 8014d24:	601a      	str	r2, [r3, #0]
    return &NvmCtx;
 8014d26:	4b02      	ldr	r3, [pc, #8]	; (8014d30 <LoRaMacCommandsGetNvmCtx+0x18>)
}
 8014d28:	0018      	movs	r0, r3
 8014d2a:	46bd      	mov	sp, r7
 8014d2c:	b002      	add	sp, #8
 8014d2e:	bd80      	pop	{r7, pc}
 8014d30:	20000bf0 	.word	0x20000bf0

08014d34 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8014d34:	b590      	push	{r4, r7, lr}
 8014d36:	b087      	sub	sp, #28
 8014d38:	af00      	add	r7, sp, #0
 8014d3a:	60b9      	str	r1, [r7, #8]
 8014d3c:	607a      	str	r2, [r7, #4]
 8014d3e:	230f      	movs	r3, #15
 8014d40:	18fb      	adds	r3, r7, r3
 8014d42:	1c02      	adds	r2, r0, #0
 8014d44:	701a      	strb	r2, [r3, #0]
    if( payload == NULL )
 8014d46:	68bb      	ldr	r3, [r7, #8]
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	d101      	bne.n	8014d50 <LoRaMacCommandsAddCmd+0x1c>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014d4c:	2301      	movs	r3, #1
 8014d4e:	e03c      	b.n	8014dca <LoRaMacCommandsAddCmd+0x96>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8014d50:	f7ff feb2 	bl	8014ab8 <MallocNewMacCommandSlot>
 8014d54:	0003      	movs	r3, r0
 8014d56:	617b      	str	r3, [r7, #20]

    if( newCmd == NULL )
 8014d58:	697b      	ldr	r3, [r7, #20]
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	d101      	bne.n	8014d62 <LoRaMacCommandsAddCmd+0x2e>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8014d5e:	2302      	movs	r3, #2
 8014d60:	e033      	b.n	8014dca <LoRaMacCommandsAddCmd+0x96>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &NvmCtx.MacCommandList, newCmd ) == false )
 8014d62:	697a      	ldr	r2, [r7, #20]
 8014d64:	4b1b      	ldr	r3, [pc, #108]	; (8014dd4 <LoRaMacCommandsAddCmd+0xa0>)
 8014d66:	0011      	movs	r1, r2
 8014d68:	0018      	movs	r0, r3
 8014d6a:	f7ff fefd 	bl	8014b68 <LinkedListAdd>
 8014d6e:	0003      	movs	r3, r0
 8014d70:	001a      	movs	r2, r3
 8014d72:	2301      	movs	r3, #1
 8014d74:	4053      	eors	r3, r2
 8014d76:	b2db      	uxtb	r3, r3
 8014d78:	2b00      	cmp	r3, #0
 8014d7a:	d001      	beq.n	8014d80 <LoRaMacCommandsAddCmd+0x4c>
    {
        return LORAMAC_COMMANDS_ERROR;
 8014d7c:	2305      	movs	r3, #5
 8014d7e:	e024      	b.n	8014dca <LoRaMacCommandsAddCmd+0x96>
    }

    // Set Values
    newCmd->CID = cid;
 8014d80:	697b      	ldr	r3, [r7, #20]
 8014d82:	240f      	movs	r4, #15
 8014d84:	193a      	adds	r2, r7, r4
 8014d86:	7812      	ldrb	r2, [r2, #0]
 8014d88:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8014d8a:	697b      	ldr	r3, [r7, #20]
 8014d8c:	687a      	ldr	r2, [r7, #4]
 8014d8e:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8014d90:	697b      	ldr	r3, [r7, #20]
 8014d92:	3305      	adds	r3, #5
 8014d94:	687a      	ldr	r2, [r7, #4]
 8014d96:	b292      	uxth	r2, r2
 8014d98:	68b9      	ldr	r1, [r7, #8]
 8014d9a:	0018      	movs	r0, r3
 8014d9c:	f004 fbf8 	bl	8019590 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8014da0:	193b      	adds	r3, r7, r4
 8014da2:	781b      	ldrb	r3, [r3, #0]
 8014da4:	0018      	movs	r0, r3
 8014da6:	f7ff ff63 	bl	8014c70 <IsSticky>
 8014daa:	0003      	movs	r3, r0
 8014dac:	001a      	movs	r2, r3
 8014dae:	697b      	ldr	r3, [r7, #20]
 8014db0:	731a      	strb	r2, [r3, #12]

    NvmCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8014db2:	4b08      	ldr	r3, [pc, #32]	; (8014dd4 <LoRaMacCommandsAddCmd+0xa0>)
 8014db4:	22f8      	movs	r2, #248	; 0xf8
 8014db6:	589a      	ldr	r2, [r3, r2]
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	18d3      	adds	r3, r2, r3
 8014dbc:	1c5a      	adds	r2, r3, #1
 8014dbe:	4b05      	ldr	r3, [pc, #20]	; (8014dd4 <LoRaMacCommandsAddCmd+0xa0>)
 8014dc0:	21f8      	movs	r1, #248	; 0xf8
 8014dc2:	505a      	str	r2, [r3, r1]

    NvmCtxCallback( );
 8014dc4:	f7ff ff6a 	bl	8014c9c <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 8014dc8:	2300      	movs	r3, #0
}
 8014dca:	0018      	movs	r0, r3
 8014dcc:	46bd      	mov	sp, r7
 8014dce:	b007      	add	sp, #28
 8014dd0:	bd90      	pop	{r4, r7, pc}
 8014dd2:	46c0      	nop			; (mov r8, r8)
 8014dd4:	20000bf0 	.word	0x20000bf0

08014dd8 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8014dd8:	b580      	push	{r7, lr}
 8014dda:	b082      	sub	sp, #8
 8014ddc:	af00      	add	r7, sp, #0
 8014dde:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	d101      	bne.n	8014dea <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014de6:	2301      	movs	r3, #1
 8014de8:	e028      	b.n	8014e3c <LoRaMacCommandsRemoveCmd+0x64>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &NvmCtx.MacCommandList, macCmd ) == false )
 8014dea:	687a      	ldr	r2, [r7, #4]
 8014dec:	4b15      	ldr	r3, [pc, #84]	; (8014e44 <LoRaMacCommandsRemoveCmd+0x6c>)
 8014dee:	0011      	movs	r1, r2
 8014df0:	0018      	movs	r0, r3
 8014df2:	f7ff ff08 	bl	8014c06 <LinkedListRemove>
 8014df6:	0003      	movs	r3, r0
 8014df8:	001a      	movs	r2, r3
 8014dfa:	2301      	movs	r3, #1
 8014dfc:	4053      	eors	r3, r2
 8014dfe:	b2db      	uxtb	r3, r3
 8014e00:	2b00      	cmp	r3, #0
 8014e02:	d001      	beq.n	8014e08 <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8014e04:	2303      	movs	r3, #3
 8014e06:	e019      	b.n	8014e3c <LoRaMacCommandsRemoveCmd+0x64>
    }

    NvmCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8014e08:	4b0e      	ldr	r3, [pc, #56]	; (8014e44 <LoRaMacCommandsRemoveCmd+0x6c>)
 8014e0a:	22f8      	movs	r2, #248	; 0xf8
 8014e0c:	589a      	ldr	r2, [r3, r2]
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	689b      	ldr	r3, [r3, #8]
 8014e12:	1ad3      	subs	r3, r2, r3
 8014e14:	1e5a      	subs	r2, r3, #1
 8014e16:	4b0b      	ldr	r3, [pc, #44]	; (8014e44 <LoRaMacCommandsRemoveCmd+0x6c>)
 8014e18:	21f8      	movs	r1, #248	; 0xf8
 8014e1a:	505a      	str	r2, [r3, r1]

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	0018      	movs	r0, r3
 8014e20:	f7ff fe7a 	bl	8014b18 <FreeMacCommandSlot>
 8014e24:	0003      	movs	r3, r0
 8014e26:	001a      	movs	r2, r3
 8014e28:	2301      	movs	r3, #1
 8014e2a:	4053      	eors	r3, r2
 8014e2c:	b2db      	uxtb	r3, r3
 8014e2e:	2b00      	cmp	r3, #0
 8014e30:	d001      	beq.n	8014e36 <LoRaMacCommandsRemoveCmd+0x5e>
    {
        return LORAMAC_COMMANDS_ERROR;
 8014e32:	2305      	movs	r3, #5
 8014e34:	e002      	b.n	8014e3c <LoRaMacCommandsRemoveCmd+0x64>
    }

    NvmCtxCallback( );
 8014e36:	f7ff ff31 	bl	8014c9c <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 8014e3a:	2300      	movs	r3, #0
}
 8014e3c:	0018      	movs	r0, r3
 8014e3e:	46bd      	mov	sp, r7
 8014e40:	b002      	add	sp, #8
 8014e42:	bd80      	pop	{r7, pc}
 8014e44:	20000bf0 	.word	0x20000bf0

08014e48 <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8014e48:	b580      	push	{r7, lr}
 8014e4a:	b082      	sub	sp, #8
 8014e4c:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 8014e4e:	4b11      	ldr	r3, [pc, #68]	; (8014e94 <LoRaMacCommandsRemoveNoneStickyCmds+0x4c>)
 8014e50:	681b      	ldr	r3, [r3, #0]
 8014e52:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8014e54:	e013      	b.n	8014e7e <LoRaMacCommandsRemoveNoneStickyCmds+0x36>
    {
        if( curElement->IsSticky == false )
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	7b1b      	ldrb	r3, [r3, #12]
 8014e5a:	2201      	movs	r2, #1
 8014e5c:	4053      	eors	r3, r2
 8014e5e:	b2db      	uxtb	r3, r3
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	d009      	beq.n	8014e78 <LoRaMacCommandsRemoveNoneStickyCmds+0x30>
        {
            nexElement = curElement->Next;
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	681b      	ldr	r3, [r3, #0]
 8014e68:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	0018      	movs	r0, r3
 8014e6e:	f7ff ffb3 	bl	8014dd8 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8014e72:	683b      	ldr	r3, [r7, #0]
 8014e74:	607b      	str	r3, [r7, #4]
 8014e76:	e002      	b.n	8014e7e <LoRaMacCommandsRemoveNoneStickyCmds+0x36>
        }
        else
        {
            curElement = curElement->Next;
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	681b      	ldr	r3, [r3, #0]
 8014e7c:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	2b00      	cmp	r3, #0
 8014e82:	d1e8      	bne.n	8014e56 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    NvmCtxCallback( );
 8014e84:	f7ff ff0a 	bl	8014c9c <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 8014e88:	2300      	movs	r3, #0
}
 8014e8a:	0018      	movs	r0, r3
 8014e8c:	46bd      	mov	sp, r7
 8014e8e:	b002      	add	sp, #8
 8014e90:	bd80      	pop	{r7, pc}
 8014e92:	46c0      	nop			; (mov r8, r8)
 8014e94:	20000bf0 	.word	0x20000bf0

08014e98 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8014e98:	b580      	push	{r7, lr}
 8014e9a:	b082      	sub	sp, #8
 8014e9c:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 8014e9e:	4b0f      	ldr	r3, [pc, #60]	; (8014edc <LoRaMacCommandsRemoveStickyAnsCmds+0x44>)
 8014ea0:	681b      	ldr	r3, [r3, #0]
 8014ea2:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8014ea4:	e00f      	b.n	8014ec6 <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	681b      	ldr	r3, [r3, #0]
 8014eaa:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	791b      	ldrb	r3, [r3, #4]
 8014eb0:	0018      	movs	r0, r3
 8014eb2:	f7ff fedd 	bl	8014c70 <IsSticky>
 8014eb6:	1e03      	subs	r3, r0, #0
 8014eb8:	d003      	beq.n	8014ec2 <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	0018      	movs	r0, r3
 8014ebe:	f7ff ff8b 	bl	8014dd8 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8014ec2:	683b      	ldr	r3, [r7, #0]
 8014ec4:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	d1ec      	bne.n	8014ea6 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    NvmCtxCallback( );
 8014ecc:	f7ff fee6 	bl	8014c9c <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 8014ed0:	2300      	movs	r3, #0
}
 8014ed2:	0018      	movs	r0, r3
 8014ed4:	46bd      	mov	sp, r7
 8014ed6:	b002      	add	sp, #8
 8014ed8:	bd80      	pop	{r7, pc}
 8014eda:	46c0      	nop			; (mov r8, r8)
 8014edc:	20000bf0 	.word	0x20000bf0

08014ee0 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8014ee0:	b580      	push	{r7, lr}
 8014ee2:	b082      	sub	sp, #8
 8014ee4:	af00      	add	r7, sp, #0
 8014ee6:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d101      	bne.n	8014ef2 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014eee:	2301      	movs	r3, #1
 8014ef0:	e005      	b.n	8014efe <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = NvmCtx.SerializedCmdsSize;
 8014ef2:	4b05      	ldr	r3, [pc, #20]	; (8014f08 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8014ef4:	22f8      	movs	r2, #248	; 0xf8
 8014ef6:	589a      	ldr	r2, [r3, r2]
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8014efc:	2300      	movs	r3, #0
}
 8014efe:	0018      	movs	r0, r3
 8014f00:	46bd      	mov	sp, r7
 8014f02:	b002      	add	sp, #8
 8014f04:	bd80      	pop	{r7, pc}
 8014f06:	46c0      	nop			; (mov r8, r8)
 8014f08:	20000bf0 	.word	0x20000bf0

08014f0c <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8014f0c:	b590      	push	{r4, r7, lr}
 8014f0e:	b089      	sub	sp, #36	; 0x24
 8014f10:	af00      	add	r7, sp, #0
 8014f12:	60f8      	str	r0, [r7, #12]
 8014f14:	60b9      	str	r1, [r7, #8]
 8014f16:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = NvmCtx.MacCommandList.First;
 8014f18:	4b2a      	ldr	r3, [pc, #168]	; (8014fc4 <LoRaMacCommandsSerializeCmds+0xb8>)
 8014f1a:	681b      	ldr	r3, [r3, #0]
 8014f1c:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8014f1e:	231b      	movs	r3, #27
 8014f20:	18fb      	adds	r3, r7, r3
 8014f22:	2200      	movs	r2, #0
 8014f24:	701a      	strb	r2, [r3, #0]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	d002      	beq.n	8014f32 <LoRaMacCommandsSerializeCmds+0x26>
 8014f2c:	68bb      	ldr	r3, [r7, #8]
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d12d      	bne.n	8014f8e <LoRaMacCommandsSerializeCmds+0x82>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014f32:	2301      	movs	r3, #1
 8014f34:	e042      	b.n	8014fbc <LoRaMacCommandsSerializeCmds+0xb0>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8014f36:	241b      	movs	r4, #27
 8014f38:	193b      	adds	r3, r7, r4
 8014f3a:	781b      	ldrb	r3, [r3, #0]
 8014f3c:	68fa      	ldr	r2, [r7, #12]
 8014f3e:	1ad2      	subs	r2, r2, r3
 8014f40:	69fb      	ldr	r3, [r7, #28]
 8014f42:	689b      	ldr	r3, [r3, #8]
 8014f44:	3301      	adds	r3, #1
 8014f46:	429a      	cmp	r2, r3
 8014f48:	d325      	bcc.n	8014f96 <LoRaMacCommandsSerializeCmds+0x8a>
        {
            buffer[itr++] = curElement->CID;
 8014f4a:	193b      	adds	r3, r7, r4
 8014f4c:	781b      	ldrb	r3, [r3, #0]
 8014f4e:	193a      	adds	r2, r7, r4
 8014f50:	1c59      	adds	r1, r3, #1
 8014f52:	7011      	strb	r1, [r2, #0]
 8014f54:	001a      	movs	r2, r3
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	189b      	adds	r3, r3, r2
 8014f5a:	69fa      	ldr	r2, [r7, #28]
 8014f5c:	7912      	ldrb	r2, [r2, #4]
 8014f5e:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8014f60:	193b      	adds	r3, r7, r4
 8014f62:	781b      	ldrb	r3, [r3, #0]
 8014f64:	687a      	ldr	r2, [r7, #4]
 8014f66:	18d0      	adds	r0, r2, r3
 8014f68:	69fb      	ldr	r3, [r7, #28]
 8014f6a:	1d59      	adds	r1, r3, #5
 8014f6c:	69fb      	ldr	r3, [r7, #28]
 8014f6e:	689b      	ldr	r3, [r3, #8]
 8014f70:	b29b      	uxth	r3, r3
 8014f72:	001a      	movs	r2, r3
 8014f74:	f004 fb0c 	bl	8019590 <memcpy1>
            itr += curElement->PayloadSize;
 8014f78:	69fb      	ldr	r3, [r7, #28]
 8014f7a:	689b      	ldr	r3, [r3, #8]
 8014f7c:	b2d9      	uxtb	r1, r3
 8014f7e:	193b      	adds	r3, r7, r4
 8014f80:	193a      	adds	r2, r7, r4
 8014f82:	7812      	ldrb	r2, [r2, #0]
 8014f84:	188a      	adds	r2, r1, r2
 8014f86:	701a      	strb	r2, [r3, #0]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8014f88:	69fb      	ldr	r3, [r7, #28]
 8014f8a:	681b      	ldr	r3, [r3, #0]
 8014f8c:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8014f8e:	69fb      	ldr	r3, [r7, #28]
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d1d0      	bne.n	8014f36 <LoRaMacCommandsSerializeCmds+0x2a>
 8014f94:	e00a      	b.n	8014fac <LoRaMacCommandsSerializeCmds+0xa0>
            break;
 8014f96:	46c0      	nop			; (mov r8, r8)
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8014f98:	e008      	b.n	8014fac <LoRaMacCommandsSerializeCmds+0xa0>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8014f9a:	69fb      	ldr	r3, [r7, #28]
 8014f9c:	681b      	ldr	r3, [r3, #0]
 8014f9e:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8014fa0:	69fb      	ldr	r3, [r7, #28]
 8014fa2:	0018      	movs	r0, r3
 8014fa4:	f7ff ff18 	bl	8014dd8 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8014fa8:	697b      	ldr	r3, [r7, #20]
 8014faa:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8014fac:	69fb      	ldr	r3, [r7, #28]
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	d1f3      	bne.n	8014f9a <LoRaMacCommandsSerializeCmds+0x8e>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8014fb2:	68bb      	ldr	r3, [r7, #8]
 8014fb4:	0018      	movs	r0, r3
 8014fb6:	f7ff ff93 	bl	8014ee0 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8014fba:	2300      	movs	r3, #0
}
 8014fbc:	0018      	movs	r0, r3
 8014fbe:	46bd      	mov	sp, r7
 8014fc0:	b009      	add	sp, #36	; 0x24
 8014fc2:	bd90      	pop	{r4, r7, pc}
 8014fc4:	20000bf0 	.word	0x20000bf0

08014fc8 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 8014fc8:	b580      	push	{r7, lr}
 8014fca:	b084      	sub	sp, #16
 8014fcc:	af00      	add	r7, sp, #0
 8014fce:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d101      	bne.n	8014fda <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8014fd6:	2301      	movs	r3, #1
 8014fd8:	e016      	b.n	8015008 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
 8014fda:	4b0d      	ldr	r3, [pc, #52]	; (8015010 <LoRaMacCommandsStickyCmdsPending+0x48>)
 8014fdc:	681b      	ldr	r3, [r3, #0]
 8014fde:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	2200      	movs	r2, #0
 8014fe4:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 8014fe6:	e00b      	b.n	8015000 <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 8014fe8:	68fb      	ldr	r3, [r7, #12]
 8014fea:	7b1b      	ldrb	r3, [r3, #12]
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d004      	beq.n	8014ffa <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	2201      	movs	r2, #1
 8014ff4:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 8014ff6:	2300      	movs	r3, #0
 8014ff8:	e006      	b.n	8015008 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 8014ffa:	68fb      	ldr	r3, [r7, #12]
 8014ffc:	681b      	ldr	r3, [r3, #0]
 8014ffe:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 8015000:	68fb      	ldr	r3, [r7, #12]
 8015002:	2b00      	cmp	r3, #0
 8015004:	d1f0      	bne.n	8014fe8 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8015006:	2300      	movs	r3, #0
}
 8015008:	0018      	movs	r0, r3
 801500a:	46bd      	mov	sp, r7
 801500c:	b004      	add	sp, #16
 801500e:	bd80      	pop	{r7, pc}
 8015010:	20000bf0 	.word	0x20000bf0

08015014 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8015014:	b580      	push	{r7, lr}
 8015016:	b084      	sub	sp, #16
 8015018:	af00      	add	r7, sp, #0
 801501a:	0002      	movs	r2, r0
 801501c:	1dfb      	adds	r3, r7, #7
 801501e:	701a      	strb	r2, [r3, #0]
    uint8_t cidSize = 0;
 8015020:	230f      	movs	r3, #15
 8015022:	18fb      	adds	r3, r7, r3
 8015024:	2200      	movs	r2, #0
 8015026:	701a      	strb	r2, [r3, #0]

    // Decode Frame MAC commands
    switch( cid )
 8015028:	1dfb      	adds	r3, r7, #7
 801502a:	781b      	ldrb	r3, [r3, #0]
 801502c:	2b13      	cmp	r3, #19
 801502e:	d84a      	bhi.n	80150c6 <LoRaMacCommandsGetCmdSize+0xb2>
 8015030:	009a      	lsls	r2, r3, #2
 8015032:	4b29      	ldr	r3, [pc, #164]	; (80150d8 <LoRaMacCommandsGetCmdSize+0xc4>)
 8015034:	18d3      	adds	r3, r2, r3
 8015036:	681b      	ldr	r3, [r3, #0]
 8015038:	469f      	mov	pc, r3
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 801503a:	230f      	movs	r3, #15
 801503c:	18fb      	adds	r3, r7, r3
 801503e:	2203      	movs	r2, #3
 8015040:	701a      	strb	r2, [r3, #0]
            break;
 8015042:	e041      	b.n	80150c8 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8015044:	230f      	movs	r3, #15
 8015046:	18fb      	adds	r3, r7, r3
 8015048:	2205      	movs	r2, #5
 801504a:	701a      	strb	r2, [r3, #0]
            break;
 801504c:	e03c      	b.n	80150c8 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 801504e:	230f      	movs	r3, #15
 8015050:	18fb      	adds	r3, r7, r3
 8015052:	2202      	movs	r2, #2
 8015054:	701a      	strb	r2, [r3, #0]
            break;
 8015056:	e037      	b.n	80150c8 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 8015058:	230f      	movs	r3, #15
 801505a:	18fb      	adds	r3, r7, r3
 801505c:	2205      	movs	r2, #5
 801505e:	701a      	strb	r2, [r3, #0]
            break;
 8015060:	e032      	b.n	80150c8 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8015062:	230f      	movs	r3, #15
 8015064:	18fb      	adds	r3, r7, r3
 8015066:	2201      	movs	r2, #1
 8015068:	701a      	strb	r2, [r3, #0]
            break;
 801506a:	e02d      	b.n	80150c8 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 801506c:	230f      	movs	r3, #15
 801506e:	18fb      	adds	r3, r7, r3
 8015070:	2206      	movs	r2, #6
 8015072:	701a      	strb	r2, [r3, #0]
            break;
 8015074:	e028      	b.n	80150c8 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8015076:	230f      	movs	r3, #15
 8015078:	18fb      	adds	r3, r7, r3
 801507a:	2202      	movs	r2, #2
 801507c:	701a      	strb	r2, [r3, #0]
            break;
 801507e:	e023      	b.n	80150c8 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8015080:	230f      	movs	r3, #15
 8015082:	18fb      	adds	r3, r7, r3
 8015084:	2202      	movs	r2, #2
 8015086:	701a      	strb	r2, [r3, #0]
            break;
 8015088:	e01e      	b.n	80150c8 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 801508a:	230f      	movs	r3, #15
 801508c:	18fb      	adds	r3, r7, r3
 801508e:	2205      	movs	r2, #5
 8015090:	701a      	strb	r2, [r3, #0]
            break;
 8015092:	e019      	b.n	80150c8 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8015094:	230f      	movs	r3, #15
 8015096:	18fb      	adds	r3, r7, r3
 8015098:	2206      	movs	r2, #6
 801509a:	701a      	strb	r2, [r3, #0]
            break;
 801509c:	e014      	b.n	80150c8 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 801509e:	230f      	movs	r3, #15
 80150a0:	18fb      	adds	r3, r7, r3
 80150a2:	2201      	movs	r2, #1
 80150a4:	701a      	strb	r2, [r3, #0]
            break;
 80150a6:	e00f      	b.n	80150c8 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 80150a8:	230f      	movs	r3, #15
 80150aa:	18fb      	adds	r3, r7, r3
 80150ac:	2205      	movs	r2, #5
 80150ae:	701a      	strb	r2, [r3, #0]
            break;
 80150b0:	e00a      	b.n	80150c8 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 80150b2:	230f      	movs	r3, #15
 80150b4:	18fb      	adds	r3, r7, r3
 80150b6:	2204      	movs	r2, #4
 80150b8:	701a      	strb	r2, [r3, #0]
            break;
 80150ba:	e005      	b.n	80150c8 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 80150bc:	230f      	movs	r3, #15
 80150be:	18fb      	adds	r3, r7, r3
 80150c0:	2204      	movs	r2, #4
 80150c2:	701a      	strb	r2, [r3, #0]
            break;
 80150c4:	e000      	b.n	80150c8 <LoRaMacCommandsGetCmdSize+0xb4>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 80150c6:	46c0      	nop			; (mov r8, r8)
        }
    }
    return cidSize;
 80150c8:	230f      	movs	r3, #15
 80150ca:	18fb      	adds	r3, r7, r3
 80150cc:	781b      	ldrb	r3, [r3, #0]
}
 80150ce:	0018      	movs	r0, r3
 80150d0:	46bd      	mov	sp, r7
 80150d2:	b004      	add	sp, #16
 80150d4:	bd80      	pop	{r7, pc}
 80150d6:	46c0      	nop			; (mov r8, r8)
 80150d8:	0801fb6c 	.word	0x0801fb6c

080150dc <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 80150dc:	b580      	push	{r7, lr}
 80150de:	b082      	sub	sp, #8
 80150e0:	af00      	add	r7, sp, #0
 80150e2:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 80150e4:	4b08      	ldr	r3, [pc, #32]	; (8015108 <IncreaseBufferPointer+0x2c>)
 80150e6:	691b      	ldr	r3, [r3, #16]
 80150e8:	3310      	adds	r3, #16
 80150ea:	687a      	ldr	r2, [r7, #4]
 80150ec:	429a      	cmp	r2, r3
 80150ee:	d103      	bne.n	80150f8 <IncreaseBufferPointer+0x1c>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 80150f0:	4b05      	ldr	r3, [pc, #20]	; (8015108 <IncreaseBufferPointer+0x2c>)
 80150f2:	691b      	ldr	r3, [r3, #16]
 80150f4:	607b      	str	r3, [r7, #4]
 80150f6:	e002      	b.n	80150fe <IncreaseBufferPointer+0x22>
    }
    else
    {
        // Increase
        bufferPointer++;
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	3304      	adds	r3, #4
 80150fc:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 80150fe:	687b      	ldr	r3, [r7, #4]
}
 8015100:	0018      	movs	r0, r3
 8015102:	46bd      	mov	sp, r7
 8015104:	b002      	add	sp, #8
 8015106:	bd80      	pop	{r7, pc}
 8015108:	20000d04 	.word	0x20000d04

0801510c <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 801510c:	b580      	push	{r7, lr}
 801510e:	b082      	sub	sp, #8
 8015110:	af00      	add	r7, sp, #0
 8015112:	0002      	movs	r2, r0
 8015114:	1dfb      	adds	r3, r7, #7
 8015116:	701a      	strb	r2, [r3, #0]
    if( count == 0 )
 8015118:	1dfb      	adds	r3, r7, #7
 801511a:	781b      	ldrb	r3, [r3, #0]
 801511c:	2b00      	cmp	r3, #0
 801511e:	d101      	bne.n	8015124 <IsListEmpty+0x18>
    {
        return true;
 8015120:	2301      	movs	r3, #1
 8015122:	e000      	b.n	8015126 <IsListEmpty+0x1a>
    }
    return false;
 8015124:	2300      	movs	r3, #0
}
 8015126:	0018      	movs	r0, r3
 8015128:	46bd      	mov	sp, r7
 801512a:	b002      	add	sp, #8
 801512c:	bd80      	pop	{r7, pc}

0801512e <IsListFull>:

static bool IsListFull( uint8_t count )
{
 801512e:	b580      	push	{r7, lr}
 8015130:	b082      	sub	sp, #8
 8015132:	af00      	add	r7, sp, #0
 8015134:	0002      	movs	r2, r0
 8015136:	1dfb      	adds	r3, r7, #7
 8015138:	701a      	strb	r2, [r3, #0]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 801513a:	1dfb      	adds	r3, r7, #7
 801513c:	781b      	ldrb	r3, [r3, #0]
 801513e:	2b04      	cmp	r3, #4
 8015140:	d901      	bls.n	8015146 <IsListFull+0x18>
    {
        return true;
 8015142:	2301      	movs	r3, #1
 8015144:	e000      	b.n	8015148 <IsListFull+0x1a>
    }
    return false;
 8015146:	2300      	movs	r3, #0
}
 8015148:	0018      	movs	r0, r3
 801514a:	46bd      	mov	sp, r7
 801514c:	b002      	add	sp, #8
 801514e:	bd80      	pop	{r7, pc}

08015150 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8015150:	b580      	push	{r7, lr}
 8015152:	b086      	sub	sp, #24
 8015154:	af00      	add	r7, sp, #0
 8015156:	60b9      	str	r1, [r7, #8]
 8015158:	607a      	str	r2, [r7, #4]
 801515a:	230f      	movs	r3, #15
 801515c:	18fb      	adds	r3, r7, r3
 801515e:	1c02      	adds	r2, r0, #0
 8015160:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = bufferStart;
 8015162:	68bb      	ldr	r3, [r7, #8]
 8015164:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 8015166:	4b18      	ldr	r3, [pc, #96]	; (80151c8 <GetElement+0x78>)
 8015168:	691b      	ldr	r3, [r3, #16]
 801516a:	7d1b      	ldrb	r3, [r3, #20]
 801516c:	0018      	movs	r0, r3
 801516e:	f7ff ffcd 	bl	801510c <IsListEmpty>
 8015172:	1e03      	subs	r3, r0, #0
 8015174:	d001      	beq.n	801517a <GetElement+0x2a>
    {
        return NULL;
 8015176:	2300      	movs	r3, #0
 8015178:	e022      	b.n	80151c0 <GetElement+0x70>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt; elementCnt++ )
 801517a:	2313      	movs	r3, #19
 801517c:	18fb      	adds	r3, r7, r3
 801517e:	2200      	movs	r2, #0
 8015180:	701a      	strb	r2, [r3, #0]
 8015182:	e014      	b.n	80151ae <GetElement+0x5e>
    {
        if( element->Request == request )
 8015184:	697b      	ldr	r3, [r7, #20]
 8015186:	781b      	ldrb	r3, [r3, #0]
 8015188:	220f      	movs	r2, #15
 801518a:	18ba      	adds	r2, r7, r2
 801518c:	7812      	ldrb	r2, [r2, #0]
 801518e:	429a      	cmp	r2, r3
 8015190:	d101      	bne.n	8015196 <GetElement+0x46>
        {
            // We have found the element
            return element;
 8015192:	697b      	ldr	r3, [r7, #20]
 8015194:	e014      	b.n	80151c0 <GetElement+0x70>
        }
        element = IncreaseBufferPointer( element );
 8015196:	697b      	ldr	r3, [r7, #20]
 8015198:	0018      	movs	r0, r3
 801519a:	f7ff ff9f 	bl	80150dc <IncreaseBufferPointer>
 801519e:	0003      	movs	r3, r0
 80151a0:	617b      	str	r3, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt; elementCnt++ )
 80151a2:	2113      	movs	r1, #19
 80151a4:	187b      	adds	r3, r7, r1
 80151a6:	781a      	ldrb	r2, [r3, #0]
 80151a8:	187b      	adds	r3, r7, r1
 80151aa:	3201      	adds	r2, #1
 80151ac:	701a      	strb	r2, [r3, #0]
 80151ae:	4b06      	ldr	r3, [pc, #24]	; (80151c8 <GetElement+0x78>)
 80151b0:	691b      	ldr	r3, [r3, #16]
 80151b2:	7d1b      	ldrb	r3, [r3, #20]
 80151b4:	2213      	movs	r2, #19
 80151b6:	18ba      	adds	r2, r7, r2
 80151b8:	7812      	ldrb	r2, [r2, #0]
 80151ba:	429a      	cmp	r2, r3
 80151bc:	d3e2      	bcc.n	8015184 <GetElement+0x34>
    }

    return NULL;
 80151be:	2300      	movs	r3, #0
}
 80151c0:	0018      	movs	r0, r3
 80151c2:	46bd      	mov	sp, r7
 80151c4:	b006      	add	sp, #24
 80151c6:	bd80      	pop	{r7, pc}
 80151c8:	20000d04 	.word	0x20000d04

080151cc <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives, LoRaMacConfirmQueueNvmEvent confirmQueueNvmCtxChanged )
{
 80151cc:	b580      	push	{r7, lr}
 80151ce:	b082      	sub	sp, #8
 80151d0:	af00      	add	r7, sp, #0
 80151d2:	6078      	str	r0, [r7, #4]
 80151d4:	6039      	str	r1, [r7, #0]
    ConfirmQueueCtx.Primitives = primitives;
 80151d6:	4b13      	ldr	r3, [pc, #76]	; (8015224 <LoRaMacConfirmQueueInit+0x58>)
 80151d8:	687a      	ldr	r2, [r7, #4]
 80151da:	601a      	str	r2, [r3, #0]

    // Assign nvm context
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;
 80151dc:	4b11      	ldr	r3, [pc, #68]	; (8015224 <LoRaMacConfirmQueueInit+0x58>)
 80151de:	4a12      	ldr	r2, [pc, #72]	; (8015228 <LoRaMacConfirmQueueInit+0x5c>)
 80151e0:	611a      	str	r2, [r3, #16]

    // Init counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt = 0;
 80151e2:	4b10      	ldr	r3, [pc, #64]	; (8015224 <LoRaMacConfirmQueueInit+0x58>)
 80151e4:	691b      	ldr	r3, [r3, #16]
 80151e6:	2200      	movs	r2, #0
 80151e8:	751a      	strb	r2, [r3, #20]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 80151ea:	4b0e      	ldr	r3, [pc, #56]	; (8015224 <LoRaMacConfirmQueueInit+0x58>)
 80151ec:	691b      	ldr	r3, [r3, #16]
 80151ee:	001a      	movs	r2, r3
 80151f0:	4b0c      	ldr	r3, [pc, #48]	; (8015224 <LoRaMacConfirmQueueInit+0x58>)
 80151f2:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 80151f4:	4b0b      	ldr	r3, [pc, #44]	; (8015224 <LoRaMacConfirmQueueInit+0x58>)
 80151f6:	691b      	ldr	r3, [r3, #16]
 80151f8:	001a      	movs	r2, r3
 80151fa:	4b0a      	ldr	r3, [pc, #40]	; (8015224 <LoRaMacConfirmQueueInit+0x58>)
 80151fc:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue ) );
 80151fe:	4b09      	ldr	r3, [pc, #36]	; (8015224 <LoRaMacConfirmQueueInit+0x58>)
 8015200:	691b      	ldr	r3, [r3, #16]
 8015202:	2214      	movs	r2, #20
 8015204:	21ff      	movs	r1, #255	; 0xff
 8015206:	0018      	movs	r0, r3
 8015208:	f004 fa00 	bl	801960c <memset1>

    // Common status
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801520c:	4b05      	ldr	r3, [pc, #20]	; (8015224 <LoRaMacConfirmQueueInit+0x58>)
 801520e:	691b      	ldr	r3, [r3, #16]
 8015210:	2201      	movs	r2, #1
 8015212:	755a      	strb	r2, [r3, #21]

    // Assign callback
    ConfirmQueueCtx.LoRaMacConfirmQueueNvmEvent = confirmQueueNvmCtxChanged;
 8015214:	4b03      	ldr	r3, [pc, #12]	; (8015224 <LoRaMacConfirmQueueInit+0x58>)
 8015216:	683a      	ldr	r2, [r7, #0]
 8015218:	60da      	str	r2, [r3, #12]
}
 801521a:	46c0      	nop			; (mov r8, r8)
 801521c:	46bd      	mov	sp, r7
 801521e:	b002      	add	sp, #8
 8015220:	bd80      	pop	{r7, pc}
 8015222:	46c0      	nop			; (mov r8, r8)
 8015224:	20000d04 	.word	0x20000d04
 8015228:	20000cec 	.word	0x20000cec

0801522c <LoRaMacConfirmQueueRestoreNvmCtx>:

bool LoRaMacConfirmQueueRestoreNvmCtx( void* confirmQueueNvmCtx )
{
 801522c:	b580      	push	{r7, lr}
 801522e:	b082      	sub	sp, #8
 8015230:	af00      	add	r7, sp, #0
 8015232:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( confirmQueueNvmCtx != NULL )
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	2b00      	cmp	r3, #0
 8015238:	d007      	beq.n	801524a <LoRaMacConfirmQueueRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* )&ConfirmQueueNvmCtx, ( uint8_t* ) confirmQueueNvmCtx, sizeof( ConfirmQueueNvmCtx ) );
 801523a:	6879      	ldr	r1, [r7, #4]
 801523c:	4b05      	ldr	r3, [pc, #20]	; (8015254 <LoRaMacConfirmQueueRestoreNvmCtx+0x28>)
 801523e:	2216      	movs	r2, #22
 8015240:	0018      	movs	r0, r3
 8015242:	f004 f9a5 	bl	8019590 <memcpy1>
        return true;
 8015246:	2301      	movs	r3, #1
 8015248:	e000      	b.n	801524c <LoRaMacConfirmQueueRestoreNvmCtx+0x20>
    }
    else
    {
        return false;
 801524a:	2300      	movs	r3, #0
    }
}
 801524c:	0018      	movs	r0, r3
 801524e:	46bd      	mov	sp, r7
 8015250:	b002      	add	sp, #8
 8015252:	bd80      	pop	{r7, pc}
 8015254:	20000cec 	.word	0x20000cec

08015258 <LoRaMacConfirmQueueGetNvmCtx>:

void* LoRaMacConfirmQueueGetNvmCtx( size_t* confirmQueueNvmCtxSize )
{
 8015258:	b580      	push	{r7, lr}
 801525a:	b082      	sub	sp, #8
 801525c:	af00      	add	r7, sp, #0
 801525e:	6078      	str	r0, [r7, #4]
    *confirmQueueNvmCtxSize = sizeof( ConfirmQueueNvmCtx );
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	2216      	movs	r2, #22
 8015264:	601a      	str	r2, [r3, #0]
    return &ConfirmQueueNvmCtx;
 8015266:	4b02      	ldr	r3, [pc, #8]	; (8015270 <LoRaMacConfirmQueueGetNvmCtx+0x18>)
}
 8015268:	0018      	movs	r0, r3
 801526a:	46bd      	mov	sp, r7
 801526c:	b002      	add	sp, #8
 801526e:	bd80      	pop	{r7, pc}
 8015270:	20000cec 	.word	0x20000cec

08015274 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8015274:	b580      	push	{r7, lr}
 8015276:	b082      	sub	sp, #8
 8015278:	af00      	add	r7, sp, #0
 801527a:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 801527c:	4b17      	ldr	r3, [pc, #92]	; (80152dc <LoRaMacConfirmQueueAdd+0x68>)
 801527e:	691b      	ldr	r3, [r3, #16]
 8015280:	7d1b      	ldrb	r3, [r3, #20]
 8015282:	0018      	movs	r0, r3
 8015284:	f7ff ff53 	bl	801512e <IsListFull>
 8015288:	1e03      	subs	r3, r0, #0
 801528a:	d001      	beq.n	8015290 <LoRaMacConfirmQueueAdd+0x1c>
    {
        // Protect the buffer against overwrites
        return false;
 801528c:	2300      	movs	r3, #0
 801528e:	e021      	b.n	80152d4 <LoRaMacConfirmQueueAdd+0x60>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8015290:	4b12      	ldr	r3, [pc, #72]	; (80152dc <LoRaMacConfirmQueueAdd+0x68>)
 8015292:	689b      	ldr	r3, [r3, #8]
 8015294:	687a      	ldr	r2, [r7, #4]
 8015296:	7812      	ldrb	r2, [r2, #0]
 8015298:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 801529a:	4b10      	ldr	r3, [pc, #64]	; (80152dc <LoRaMacConfirmQueueAdd+0x68>)
 801529c:	689b      	ldr	r3, [r3, #8]
 801529e:	687a      	ldr	r2, [r7, #4]
 80152a0:	7852      	ldrb	r2, [r2, #1]
 80152a2:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 80152a4:	4b0d      	ldr	r3, [pc, #52]	; (80152dc <LoRaMacConfirmQueueAdd+0x68>)
 80152a6:	689b      	ldr	r3, [r3, #8]
 80152a8:	687a      	ldr	r2, [r7, #4]
 80152aa:	78d2      	ldrb	r2, [r2, #3]
 80152ac:	70da      	strb	r2, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 80152ae:	4b0b      	ldr	r3, [pc, #44]	; (80152dc <LoRaMacConfirmQueueAdd+0x68>)
 80152b0:	689b      	ldr	r3, [r3, #8]
 80152b2:	2200      	movs	r2, #0
 80152b4:	709a      	strb	r2, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt++;
 80152b6:	4b09      	ldr	r3, [pc, #36]	; (80152dc <LoRaMacConfirmQueueAdd+0x68>)
 80152b8:	691b      	ldr	r3, [r3, #16]
 80152ba:	7d1a      	ldrb	r2, [r3, #20]
 80152bc:	3201      	adds	r2, #1
 80152be:	b2d2      	uxtb	r2, r2
 80152c0:	751a      	strb	r2, [r3, #20]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 80152c2:	4b06      	ldr	r3, [pc, #24]	; (80152dc <LoRaMacConfirmQueueAdd+0x68>)
 80152c4:	689b      	ldr	r3, [r3, #8]
 80152c6:	0018      	movs	r0, r3
 80152c8:	f7ff ff08 	bl	80150dc <IncreaseBufferPointer>
 80152cc:	0002      	movs	r2, r0
 80152ce:	4b03      	ldr	r3, [pc, #12]	; (80152dc <LoRaMacConfirmQueueAdd+0x68>)
 80152d0:	609a      	str	r2, [r3, #8]

    return true;
 80152d2:	2301      	movs	r3, #1
}
 80152d4:	0018      	movs	r0, r3
 80152d6:	46bd      	mov	sp, r7
 80152d8:	b002      	add	sp, #8
 80152da:	bd80      	pop	{r7, pc}
 80152dc:	20000d04 	.word	0x20000d04

080152e0 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 80152e0:	b580      	push	{r7, lr}
 80152e2:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 80152e4:	4b0d      	ldr	r3, [pc, #52]	; (801531c <LoRaMacConfirmQueueRemoveFirst+0x3c>)
 80152e6:	691b      	ldr	r3, [r3, #16]
 80152e8:	7d1b      	ldrb	r3, [r3, #20]
 80152ea:	0018      	movs	r0, r3
 80152ec:	f7ff ff0e 	bl	801510c <IsListEmpty>
 80152f0:	1e03      	subs	r3, r0, #0
 80152f2:	d001      	beq.n	80152f8 <LoRaMacConfirmQueueRemoveFirst+0x18>
    {
        return false;
 80152f4:	2300      	movs	r3, #0
 80152f6:	e00e      	b.n	8015316 <LoRaMacConfirmQueueRemoveFirst+0x36>
    }

    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt--;
 80152f8:	4b08      	ldr	r3, [pc, #32]	; (801531c <LoRaMacConfirmQueueRemoveFirst+0x3c>)
 80152fa:	691b      	ldr	r3, [r3, #16]
 80152fc:	7d1a      	ldrb	r2, [r3, #20]
 80152fe:	3a01      	subs	r2, #1
 8015300:	b2d2      	uxtb	r2, r2
 8015302:	751a      	strb	r2, [r3, #20]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8015304:	4b05      	ldr	r3, [pc, #20]	; (801531c <LoRaMacConfirmQueueRemoveFirst+0x3c>)
 8015306:	685b      	ldr	r3, [r3, #4]
 8015308:	0018      	movs	r0, r3
 801530a:	f7ff fee7 	bl	80150dc <IncreaseBufferPointer>
 801530e:	0002      	movs	r2, r0
 8015310:	4b02      	ldr	r3, [pc, #8]	; (801531c <LoRaMacConfirmQueueRemoveFirst+0x3c>)
 8015312:	605a      	str	r2, [r3, #4]

    return true;
 8015314:	2301      	movs	r3, #1
}
 8015316:	0018      	movs	r0, r3
 8015318:	46bd      	mov	sp, r7
 801531a:	bd80      	pop	{r7, pc}
 801531c:	20000d04 	.word	0x20000d04

08015320 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8015320:	b580      	push	{r7, lr}
 8015322:	b084      	sub	sp, #16
 8015324:	af00      	add	r7, sp, #0
 8015326:	0002      	movs	r2, r0
 8015328:	1dfb      	adds	r3, r7, #7
 801532a:	701a      	strb	r2, [r3, #0]
 801532c:	1dbb      	adds	r3, r7, #6
 801532e:	1c0a      	adds	r2, r1, #0
 8015330:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = NULL;
 8015332:	2300      	movs	r3, #0
 8015334:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == false )
 8015336:	4b13      	ldr	r3, [pc, #76]	; (8015384 <LoRaMacConfirmQueueSetStatus+0x64>)
 8015338:	691b      	ldr	r3, [r3, #16]
 801533a:	7d1b      	ldrb	r3, [r3, #20]
 801533c:	0018      	movs	r0, r3
 801533e:	f7ff fee5 	bl	801510c <IsListEmpty>
 8015342:	0003      	movs	r3, r0
 8015344:	001a      	movs	r2, r3
 8015346:	2301      	movs	r3, #1
 8015348:	4053      	eors	r3, r2
 801534a:	b2db      	uxtb	r3, r3
 801534c:	2b00      	cmp	r3, #0
 801534e:	d014      	beq.n	801537a <LoRaMacConfirmQueueSetStatus+0x5a>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8015350:	4b0c      	ldr	r3, [pc, #48]	; (8015384 <LoRaMacConfirmQueueSetStatus+0x64>)
 8015352:	6859      	ldr	r1, [r3, #4]
 8015354:	4b0b      	ldr	r3, [pc, #44]	; (8015384 <LoRaMacConfirmQueueSetStatus+0x64>)
 8015356:	689a      	ldr	r2, [r3, #8]
 8015358:	1dbb      	adds	r3, r7, #6
 801535a:	781b      	ldrb	r3, [r3, #0]
 801535c:	0018      	movs	r0, r3
 801535e:	f7ff fef7 	bl	8015150 <GetElement>
 8015362:	0003      	movs	r3, r0
 8015364:	60fb      	str	r3, [r7, #12]
        if( element != NULL )
 8015366:	68fb      	ldr	r3, [r7, #12]
 8015368:	2b00      	cmp	r3, #0
 801536a:	d006      	beq.n	801537a <LoRaMacConfirmQueueSetStatus+0x5a>
        {
            element->Status = status;
 801536c:	68fb      	ldr	r3, [r7, #12]
 801536e:	1dfa      	adds	r2, r7, #7
 8015370:	7812      	ldrb	r2, [r2, #0]
 8015372:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8015374:	68fb      	ldr	r3, [r7, #12]
 8015376:	2201      	movs	r2, #1
 8015378:	709a      	strb	r2, [r3, #2]
        }
    }
}
 801537a:	46c0      	nop			; (mov r8, r8)
 801537c:	46bd      	mov	sp, r7
 801537e:	b004      	add	sp, #16
 8015380:	bd80      	pop	{r7, pc}
 8015382:	46c0      	nop			; (mov r8, r8)
 8015384:	20000d04 	.word	0x20000d04

08015388 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8015388:	b580      	push	{r7, lr}
 801538a:	b084      	sub	sp, #16
 801538c:	af00      	add	r7, sp, #0
 801538e:	0002      	movs	r2, r0
 8015390:	1dfb      	adds	r3, r7, #7
 8015392:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = NULL;
 8015394:	2300      	movs	r3, #0
 8015396:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == false )
 8015398:	4b11      	ldr	r3, [pc, #68]	; (80153e0 <LoRaMacConfirmQueueGetStatus+0x58>)
 801539a:	691b      	ldr	r3, [r3, #16]
 801539c:	7d1b      	ldrb	r3, [r3, #20]
 801539e:	0018      	movs	r0, r3
 80153a0:	f7ff feb4 	bl	801510c <IsListEmpty>
 80153a4:	0003      	movs	r3, r0
 80153a6:	001a      	movs	r2, r3
 80153a8:	2301      	movs	r3, #1
 80153aa:	4053      	eors	r3, r2
 80153ac:	b2db      	uxtb	r3, r3
 80153ae:	2b00      	cmp	r3, #0
 80153b0:	d010      	beq.n	80153d4 <LoRaMacConfirmQueueGetStatus+0x4c>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80153b2:	4b0b      	ldr	r3, [pc, #44]	; (80153e0 <LoRaMacConfirmQueueGetStatus+0x58>)
 80153b4:	6859      	ldr	r1, [r3, #4]
 80153b6:	4b0a      	ldr	r3, [pc, #40]	; (80153e0 <LoRaMacConfirmQueueGetStatus+0x58>)
 80153b8:	689a      	ldr	r2, [r3, #8]
 80153ba:	1dfb      	adds	r3, r7, #7
 80153bc:	781b      	ldrb	r3, [r3, #0]
 80153be:	0018      	movs	r0, r3
 80153c0:	f7ff fec6 	bl	8015150 <GetElement>
 80153c4:	0003      	movs	r3, r0
 80153c6:	60fb      	str	r3, [r7, #12]
        if( element != NULL )
 80153c8:	68fb      	ldr	r3, [r7, #12]
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	d002      	beq.n	80153d4 <LoRaMacConfirmQueueGetStatus+0x4c>
        {
            return element->Status;
 80153ce:	68fb      	ldr	r3, [r7, #12]
 80153d0:	785b      	ldrb	r3, [r3, #1]
 80153d2:	e000      	b.n	80153d6 <LoRaMacConfirmQueueGetStatus+0x4e>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 80153d4:	2301      	movs	r3, #1
}
 80153d6:	0018      	movs	r0, r3
 80153d8:	46bd      	mov	sp, r7
 80153da:	b004      	add	sp, #16
 80153dc:	bd80      	pop	{r7, pc}
 80153de:	46c0      	nop			; (mov r8, r8)
 80153e0:	20000d04 	.word	0x20000d04

080153e4 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 80153e4:	b580      	push	{r7, lr}
 80153e6:	b084      	sub	sp, #16
 80153e8:	af00      	add	r7, sp, #0
 80153ea:	0002      	movs	r2, r0
 80153ec:	1dfb      	adds	r3, r7, #7
 80153ee:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 80153f0:	4b18      	ldr	r3, [pc, #96]	; (8015454 <LoRaMacConfirmQueueSetStatusCmn+0x70>)
 80153f2:	685b      	ldr	r3, [r3, #4]
 80153f4:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = status;
 80153f6:	4b17      	ldr	r3, [pc, #92]	; (8015454 <LoRaMacConfirmQueueSetStatusCmn+0x70>)
 80153f8:	691b      	ldr	r3, [r3, #16]
 80153fa:	1dfa      	adds	r2, r7, #7
 80153fc:	7812      	ldrb	r2, [r2, #0]
 80153fe:	755a      	strb	r2, [r3, #21]

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == false )
 8015400:	4b14      	ldr	r3, [pc, #80]	; (8015454 <LoRaMacConfirmQueueSetStatusCmn+0x70>)
 8015402:	691b      	ldr	r3, [r3, #16]
 8015404:	7d1b      	ldrb	r3, [r3, #20]
 8015406:	0018      	movs	r0, r3
 8015408:	f7ff fe80 	bl	801510c <IsListEmpty>
 801540c:	0003      	movs	r3, r0
 801540e:	001a      	movs	r2, r3
 8015410:	2301      	movs	r3, #1
 8015412:	4053      	eors	r3, r2
 8015414:	b2db      	uxtb	r3, r3
 8015416:	2b00      	cmp	r3, #0
 8015418:	d018      	beq.n	801544c <LoRaMacConfirmQueueSetStatusCmn+0x68>
    {
        do
        {
            element->Status = status;
 801541a:	68fb      	ldr	r3, [r7, #12]
 801541c:	1dfa      	adds	r2, r7, #7
 801541e:	7812      	ldrb	r2, [r2, #0]
 8015420:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8015422:	68fb      	ldr	r3, [r7, #12]
 8015424:	78db      	ldrb	r3, [r3, #3]
 8015426:	2201      	movs	r2, #1
 8015428:	4053      	eors	r3, r2
 801542a:	b2db      	uxtb	r3, r3
 801542c:	2b00      	cmp	r3, #0
 801542e:	d002      	beq.n	8015436 <LoRaMacConfirmQueueSetStatusCmn+0x52>
            {
                element->ReadyToHandle = true;
 8015430:	68fb      	ldr	r3, [r7, #12]
 8015432:	2201      	movs	r2, #1
 8015434:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8015436:	68fb      	ldr	r3, [r7, #12]
 8015438:	0018      	movs	r0, r3
 801543a:	f7ff fe4f 	bl	80150dc <IncreaseBufferPointer>
 801543e:	0003      	movs	r3, r0
 8015440:	60fb      	str	r3, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8015442:	4b04      	ldr	r3, [pc, #16]	; (8015454 <LoRaMacConfirmQueueSetStatusCmn+0x70>)
 8015444:	689b      	ldr	r3, [r3, #8]
 8015446:	68fa      	ldr	r2, [r7, #12]
 8015448:	429a      	cmp	r2, r3
 801544a:	d1e6      	bne.n	801541a <LoRaMacConfirmQueueSetStatusCmn+0x36>
    }
}
 801544c:	46c0      	nop			; (mov r8, r8)
 801544e:	46bd      	mov	sp, r7
 8015450:	b004      	add	sp, #16
 8015452:	bd80      	pop	{r7, pc}
 8015454:	20000d04 	.word	0x20000d04

08015458 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8015458:	b580      	push	{r7, lr}
 801545a:	b082      	sub	sp, #8
 801545c:	af00      	add	r7, sp, #0
 801545e:	0002      	movs	r2, r0
 8015460:	1dfb      	adds	r3, r7, #7
 8015462:	701a      	strb	r2, [r3, #0]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8015464:	4b08      	ldr	r3, [pc, #32]	; (8015488 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8015466:	6859      	ldr	r1, [r3, #4]
 8015468:	4b07      	ldr	r3, [pc, #28]	; (8015488 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 801546a:	689a      	ldr	r2, [r3, #8]
 801546c:	1dfb      	adds	r3, r7, #7
 801546e:	781b      	ldrb	r3, [r3, #0]
 8015470:	0018      	movs	r0, r3
 8015472:	f7ff fe6d 	bl	8015150 <GetElement>
 8015476:	1e03      	subs	r3, r0, #0
 8015478:	d001      	beq.n	801547e <LoRaMacConfirmQueueIsCmdActive+0x26>
    {
        return true;
 801547a:	2301      	movs	r3, #1
 801547c:	e000      	b.n	8015480 <LoRaMacConfirmQueueIsCmdActive+0x28>
    }
    return false;
 801547e:	2300      	movs	r3, #0
}
 8015480:	0018      	movs	r0, r3
 8015482:	46bd      	mov	sp, r7
 8015484:	b002      	add	sp, #8
 8015486:	bd80      	pop	{r7, pc}
 8015488:	20000d04 	.word	0x20000d04

0801548c <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 801548c:	b580      	push	{r7, lr}
 801548e:	b084      	sub	sp, #16
 8015490:	af00      	add	r7, sp, #0
 8015492:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 8015494:	4b2d      	ldr	r3, [pc, #180]	; (801554c <LoRaMacConfirmQueueHandleCb+0xc0>)
 8015496:	691a      	ldr	r2, [r3, #16]
 8015498:	230e      	movs	r3, #14
 801549a:	18fb      	adds	r3, r7, r3
 801549c:	7d12      	ldrb	r2, [r2, #20]
 801549e:	701a      	strb	r2, [r3, #0]
    bool readyToHandle = false;
 80154a0:	230d      	movs	r3, #13
 80154a2:	18fb      	adds	r3, r7, r3
 80154a4:	2200      	movs	r2, #0
 80154a6:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 80154a8:	230f      	movs	r3, #15
 80154aa:	18fb      	adds	r3, r7, r3
 80154ac:	2200      	movs	r2, #0
 80154ae:	701a      	strb	r2, [r3, #0]
 80154b0:	e03f      	b.n	8015532 <LoRaMacConfirmQueueHandleCb+0xa6>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 80154b2:	4b26      	ldr	r3, [pc, #152]	; (801554c <LoRaMacConfirmQueueHandleCb+0xc0>)
 80154b4:	685b      	ldr	r3, [r3, #4]
 80154b6:	781a      	ldrb	r2, [r3, #0]
 80154b8:	687b      	ldr	r3, [r7, #4]
 80154ba:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 80154bc:	4b23      	ldr	r3, [pc, #140]	; (801554c <LoRaMacConfirmQueueHandleCb+0xc0>)
 80154be:	685b      	ldr	r3, [r3, #4]
 80154c0:	785a      	ldrb	r2, [r3, #1]
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 80154c6:	4b21      	ldr	r3, [pc, #132]	; (801554c <LoRaMacConfirmQueueHandleCb+0xc0>)
 80154c8:	685a      	ldr	r2, [r3, #4]
 80154ca:	210d      	movs	r1, #13
 80154cc:	187b      	adds	r3, r7, r1
 80154ce:	7892      	ldrb	r2, [r2, #2]
 80154d0:	701a      	strb	r2, [r3, #0]

        if( readyToHandle == true )
 80154d2:	187b      	adds	r3, r7, r1
 80154d4:	781b      	ldrb	r3, [r3, #0]
 80154d6:	2b00      	cmp	r3, #0
 80154d8:	d006      	beq.n	80154e8 <LoRaMacConfirmQueueHandleCb+0x5c>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 80154da:	4b1c      	ldr	r3, [pc, #112]	; (801554c <LoRaMacConfirmQueueHandleCb+0xc0>)
 80154dc:	681b      	ldr	r3, [r3, #0]
 80154de:	689b      	ldr	r3, [r3, #8]
 80154e0:	687a      	ldr	r2, [r7, #4]
 80154e2:	0010      	movs	r0, r2
 80154e4:	4798      	blx	r3
 80154e6:	e00f      	b.n	8015508 <LoRaMacConfirmQueueHandleCb+0x7c>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 80154e8:	4b18      	ldr	r3, [pc, #96]	; (801554c <LoRaMacConfirmQueueHandleCb+0xc0>)
 80154ea:	685b      	ldr	r3, [r3, #4]
 80154ec:	781a      	ldrb	r2, [r3, #0]
 80154ee:	2108      	movs	r1, #8
 80154f0:	187b      	adds	r3, r7, r1
 80154f2:	701a      	strb	r2, [r3, #0]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 80154f4:	4b15      	ldr	r3, [pc, #84]	; (801554c <LoRaMacConfirmQueueHandleCb+0xc0>)
 80154f6:	685b      	ldr	r3, [r3, #4]
 80154f8:	785a      	ldrb	r2, [r3, #1]
 80154fa:	187b      	adds	r3, r7, r1
 80154fc:	705a      	strb	r2, [r3, #1]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 80154fe:	4b13      	ldr	r3, [pc, #76]	; (801554c <LoRaMacConfirmQueueHandleCb+0xc0>)
 8015500:	685b      	ldr	r3, [r3, #4]
 8015502:	78da      	ldrb	r2, [r3, #3]
 8015504:	187b      	adds	r3, r7, r1
 8015506:	70da      	strb	r2, [r3, #3]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8015508:	f7ff feea 	bl	80152e0 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 801550c:	230d      	movs	r3, #13
 801550e:	18fb      	adds	r3, r7, r3
 8015510:	781b      	ldrb	r3, [r3, #0]
 8015512:	2201      	movs	r2, #1
 8015514:	4053      	eors	r3, r2
 8015516:	b2db      	uxtb	r3, r3
 8015518:	2b00      	cmp	r3, #0
 801551a:	d004      	beq.n	8015526 <LoRaMacConfirmQueueHandleCb+0x9a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 801551c:	2308      	movs	r3, #8
 801551e:	18fb      	adds	r3, r7, r3
 8015520:	0018      	movs	r0, r3
 8015522:	f7ff fea7 	bl	8015274 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8015526:	210f      	movs	r1, #15
 8015528:	187b      	adds	r3, r7, r1
 801552a:	781a      	ldrb	r2, [r3, #0]
 801552c:	187b      	adds	r3, r7, r1
 801552e:	3201      	adds	r2, #1
 8015530:	701a      	strb	r2, [r3, #0]
 8015532:	230f      	movs	r3, #15
 8015534:	18fa      	adds	r2, r7, r3
 8015536:	230e      	movs	r3, #14
 8015538:	18fb      	adds	r3, r7, r3
 801553a:	7812      	ldrb	r2, [r2, #0]
 801553c:	781b      	ldrb	r3, [r3, #0]
 801553e:	429a      	cmp	r2, r3
 8015540:	d3b7      	bcc.n	80154b2 <LoRaMacConfirmQueueHandleCb+0x26>
        }
    }
}
 8015542:	46c0      	nop			; (mov r8, r8)
 8015544:	46c0      	nop			; (mov r8, r8)
 8015546:	46bd      	mov	sp, r7
 8015548:	b004      	add	sp, #16
 801554a:	bd80      	pop	{r7, pc}
 801554c:	20000d04 	.word	0x20000d04

08015550 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8015550:	b580      	push	{r7, lr}
 8015552:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 8015554:	4b02      	ldr	r3, [pc, #8]	; (8015560 <LoRaMacConfirmQueueGetCnt+0x10>)
 8015556:	691b      	ldr	r3, [r3, #16]
 8015558:	7d1b      	ldrb	r3, [r3, #20]
}
 801555a:	0018      	movs	r0, r3
 801555c:	46bd      	mov	sp, r7
 801555e:	bd80      	pop	{r7, pc}
 8015560:	20000d04 	.word	0x20000d04

08015564 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8015564:	b580      	push	{r7, lr}
 8015566:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 8015568:	4b06      	ldr	r3, [pc, #24]	; (8015584 <LoRaMacConfirmQueueIsFull+0x20>)
 801556a:	691b      	ldr	r3, [r3, #16]
 801556c:	7d1b      	ldrb	r3, [r3, #20]
 801556e:	0018      	movs	r0, r3
 8015570:	f7ff fddd 	bl	801512e <IsListFull>
 8015574:	1e03      	subs	r3, r0, #0
 8015576:	d001      	beq.n	801557c <LoRaMacConfirmQueueIsFull+0x18>
    {
        return true;
 8015578:	2301      	movs	r3, #1
 801557a:	e000      	b.n	801557e <LoRaMacConfirmQueueIsFull+0x1a>
    }
    else
    {
        return false;
 801557c:	2300      	movs	r3, #0
    }
}
 801557e:	0018      	movs	r0, r3
 8015580:	46bd      	mov	sp, r7
 8015582:	bd80      	pop	{r7, pc}
 8015584:	20000d04 	.word	0x20000d04

08015588 <PayloadEncrypt>:
 * \param[IN]  size             - Size of data
 * \param[IN/OUT]  buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8015588:	b590      	push	{r4, r7, lr}
 801558a:	b08f      	sub	sp, #60	; 0x3c
 801558c:	af00      	add	r7, sp, #0
 801558e:	60f8      	str	r0, [r7, #12]
 8015590:	0008      	movs	r0, r1
 8015592:	0011      	movs	r1, r2
 8015594:	607b      	str	r3, [r7, #4]
 8015596:	230a      	movs	r3, #10
 8015598:	18fb      	adds	r3, r7, r3
 801559a:	1c02      	adds	r2, r0, #0
 801559c:	801a      	strh	r2, [r3, #0]
 801559e:	2309      	movs	r3, #9
 80155a0:	18fb      	adds	r3, r7, r3
 80155a2:	1c0a      	adds	r2, r1, #0
 80155a4:	701a      	strb	r2, [r3, #0]
    if( buffer == 0 )
 80155a6:	68fb      	ldr	r3, [r7, #12]
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	d101      	bne.n	80155b0 <PayloadEncrypt+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80155ac:	230a      	movs	r3, #10
 80155ae:	e0ae      	b.n	801570e <PayloadEncrypt+0x186>
    }

    uint8_t bufferIndex = 0;
 80155b0:	2337      	movs	r3, #55	; 0x37
 80155b2:	18fb      	adds	r3, r7, r3
 80155b4:	2200      	movs	r2, #0
 80155b6:	701a      	strb	r2, [r3, #0]
    uint16_t ctr = 1;
 80155b8:	2334      	movs	r3, #52	; 0x34
 80155ba:	18fb      	adds	r3, r7, r3
 80155bc:	2201      	movs	r2, #1
 80155be:	801a      	strh	r2, [r3, #0]
    uint8_t sBlock[16] = { 0 };
 80155c0:	2320      	movs	r3, #32
 80155c2:	18fb      	adds	r3, r7, r3
 80155c4:	2200      	movs	r2, #0
 80155c6:	601a      	str	r2, [r3, #0]
 80155c8:	3304      	adds	r3, #4
 80155ca:	220c      	movs	r2, #12
 80155cc:	2100      	movs	r1, #0
 80155ce:	0018      	movs	r0, r3
 80155d0:	f008 fcef 	bl	801dfb2 <memset>
    uint8_t aBlock[16] = { 0 };
 80155d4:	2410      	movs	r4, #16
 80155d6:	193b      	adds	r3, r7, r4
 80155d8:	2200      	movs	r2, #0
 80155da:	601a      	str	r2, [r3, #0]
 80155dc:	3304      	adds	r3, #4
 80155de:	220c      	movs	r2, #12
 80155e0:	2100      	movs	r1, #0
 80155e2:	0018      	movs	r0, r3
 80155e4:	f008 fce5 	bl	801dfb2 <memset>

    aBlock[0] = 0x01;
 80155e8:	0021      	movs	r1, r4
 80155ea:	187b      	adds	r3, r7, r1
 80155ec:	2201      	movs	r2, #1
 80155ee:	701a      	strb	r2, [r3, #0]

    aBlock[5] = dir;
 80155f0:	187a      	adds	r2, r7, r1
 80155f2:	2340      	movs	r3, #64	; 0x40
 80155f4:	2008      	movs	r0, #8
 80155f6:	4684      	mov	ip, r0
 80155f8:	44bc      	add	ip, r7
 80155fa:	4463      	add	r3, ip
 80155fc:	781b      	ldrb	r3, [r3, #0]
 80155fe:	7153      	strb	r3, [r2, #5]

    aBlock[6] = address & 0xFF;
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	b2da      	uxtb	r2, r3
 8015604:	187b      	adds	r3, r7, r1
 8015606:	719a      	strb	r2, [r3, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	0a1b      	lsrs	r3, r3, #8
 801560c:	b2da      	uxtb	r2, r3
 801560e:	187b      	adds	r3, r7, r1
 8015610:	71da      	strb	r2, [r3, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	0c1b      	lsrs	r3, r3, #16
 8015616:	b2da      	uxtb	r2, r3
 8015618:	187b      	adds	r3, r7, r1
 801561a:	721a      	strb	r2, [r3, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	0e1b      	lsrs	r3, r3, #24
 8015620:	b2da      	uxtb	r2, r3
 8015622:	187b      	adds	r3, r7, r1
 8015624:	725a      	strb	r2, [r3, #9]

    aBlock[10] = frameCounter & 0xFF;
 8015626:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015628:	b2da      	uxtb	r2, r3
 801562a:	187b      	adds	r3, r7, r1
 801562c:	729a      	strb	r2, [r3, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 801562e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015630:	0a1b      	lsrs	r3, r3, #8
 8015632:	b2da      	uxtb	r2, r3
 8015634:	187b      	adds	r3, r7, r1
 8015636:	72da      	strb	r2, [r3, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8015638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801563a:	0c1b      	lsrs	r3, r3, #16
 801563c:	b2da      	uxtb	r2, r3
 801563e:	187b      	adds	r3, r7, r1
 8015640:	731a      	strb	r2, [r3, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8015642:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015644:	0e1b      	lsrs	r3, r3, #24
 8015646:	b2da      	uxtb	r2, r3
 8015648:	187b      	adds	r3, r7, r1
 801564a:	735a      	strb	r2, [r3, #13]

    while( size > 0 )
 801564c:	e058      	b.n	8015700 <PayloadEncrypt+0x178>
    {
        aBlock[15] = ctr & 0xFF;
 801564e:	2134      	movs	r1, #52	; 0x34
 8015650:	187b      	adds	r3, r7, r1
 8015652:	881b      	ldrh	r3, [r3, #0]
 8015654:	b2da      	uxtb	r2, r3
 8015656:	2010      	movs	r0, #16
 8015658:	183b      	adds	r3, r7, r0
 801565a:	73da      	strb	r2, [r3, #15]
        ctr++;
 801565c:	187b      	adds	r3, r7, r1
 801565e:	881a      	ldrh	r2, [r3, #0]
 8015660:	187b      	adds	r3, r7, r1
 8015662:	3201      	adds	r2, #1
 8015664:	801a      	strh	r2, [r3, #0]
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8015666:	2320      	movs	r3, #32
 8015668:	18f9      	adds	r1, r7, r3
 801566a:	2309      	movs	r3, #9
 801566c:	18fb      	adds	r3, r7, r3
 801566e:	781a      	ldrb	r2, [r3, #0]
 8015670:	1838      	adds	r0, r7, r0
 8015672:	000b      	movs	r3, r1
 8015674:	2110      	movs	r1, #16
 8015676:	f7f8 fa36 	bl	800dae6 <SecureElementAesEncrypt>
 801567a:	1e03      	subs	r3, r0, #0
 801567c:	d001      	beq.n	8015682 <PayloadEncrypt+0xfa>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801567e:	230f      	movs	r3, #15
 8015680:	e045      	b.n	801570e <PayloadEncrypt+0x186>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8015682:	2333      	movs	r3, #51	; 0x33
 8015684:	18fb      	adds	r3, r7, r3
 8015686:	2200      	movs	r2, #0
 8015688:	701a      	strb	r2, [r3, #0]
 801568a:	e01f      	b.n	80156cc <PayloadEncrypt+0x144>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 801568c:	2037      	movs	r0, #55	; 0x37
 801568e:	183b      	adds	r3, r7, r0
 8015690:	781a      	ldrb	r2, [r3, #0]
 8015692:	2433      	movs	r4, #51	; 0x33
 8015694:	193b      	adds	r3, r7, r4
 8015696:	781b      	ldrb	r3, [r3, #0]
 8015698:	18d3      	adds	r3, r2, r3
 801569a:	001a      	movs	r2, r3
 801569c:	68fb      	ldr	r3, [r7, #12]
 801569e:	189b      	adds	r3, r3, r2
 80156a0:	7819      	ldrb	r1, [r3, #0]
 80156a2:	193b      	adds	r3, r7, r4
 80156a4:	781b      	ldrb	r3, [r3, #0]
 80156a6:	2220      	movs	r2, #32
 80156a8:	18ba      	adds	r2, r7, r2
 80156aa:	5cd2      	ldrb	r2, [r2, r3]
 80156ac:	183b      	adds	r3, r7, r0
 80156ae:	7818      	ldrb	r0, [r3, #0]
 80156b0:	193b      	adds	r3, r7, r4
 80156b2:	781b      	ldrb	r3, [r3, #0]
 80156b4:	18c3      	adds	r3, r0, r3
 80156b6:	0018      	movs	r0, r3
 80156b8:	68fb      	ldr	r3, [r7, #12]
 80156ba:	181b      	adds	r3, r3, r0
 80156bc:	404a      	eors	r2, r1
 80156be:	b2d2      	uxtb	r2, r2
 80156c0:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 80156c2:	193b      	adds	r3, r7, r4
 80156c4:	781a      	ldrb	r2, [r3, #0]
 80156c6:	193b      	adds	r3, r7, r4
 80156c8:	3201      	adds	r2, #1
 80156ca:	701a      	strb	r2, [r3, #0]
 80156cc:	2333      	movs	r3, #51	; 0x33
 80156ce:	18fb      	adds	r3, r7, r3
 80156d0:	781a      	ldrb	r2, [r3, #0]
 80156d2:	230a      	movs	r3, #10
 80156d4:	18fb      	adds	r3, r7, r3
 80156d6:	881b      	ldrh	r3, [r3, #0]
 80156d8:	b219      	sxth	r1, r3
 80156da:	2910      	cmp	r1, #16
 80156dc:	dd00      	ble.n	80156e0 <PayloadEncrypt+0x158>
 80156de:	2310      	movs	r3, #16
 80156e0:	b21b      	sxth	r3, r3
 80156e2:	429a      	cmp	r2, r3
 80156e4:	dbd2      	blt.n	801568c <PayloadEncrypt+0x104>
        }
        size -= 16;
 80156e6:	210a      	movs	r1, #10
 80156e8:	187b      	adds	r3, r7, r1
 80156ea:	881b      	ldrh	r3, [r3, #0]
 80156ec:	3b10      	subs	r3, #16
 80156ee:	b29a      	uxth	r2, r3
 80156f0:	187b      	adds	r3, r7, r1
 80156f2:	801a      	strh	r2, [r3, #0]
        bufferIndex += 16;
 80156f4:	2237      	movs	r2, #55	; 0x37
 80156f6:	18bb      	adds	r3, r7, r2
 80156f8:	18ba      	adds	r2, r7, r2
 80156fa:	7812      	ldrb	r2, [r2, #0]
 80156fc:	3210      	adds	r2, #16
 80156fe:	701a      	strb	r2, [r3, #0]
    while( size > 0 )
 8015700:	230a      	movs	r3, #10
 8015702:	18fb      	adds	r3, r7, r3
 8015704:	2200      	movs	r2, #0
 8015706:	5e9b      	ldrsh	r3, [r3, r2]
 8015708:	2b00      	cmp	r3, #0
 801570a:	dca0      	bgt.n	801564e <PayloadEncrypt+0xc6>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801570c:	2300      	movs	r3, #0
}
 801570e:	0018      	movs	r0, r3
 8015710:	46bd      	mov	sp, r7
 8015712:	b00f      	add	sp, #60	; 0x3c
 8015714:	bd90      	pop	{r4, r7, pc}

08015716 <PrepareB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8015716:	b5b0      	push	{r4, r5, r7, lr}
 8015718:	b082      	sub	sp, #8
 801571a:	af00      	add	r7, sp, #0
 801571c:	0005      	movs	r5, r0
 801571e:	000c      	movs	r4, r1
 8015720:	0010      	movs	r0, r2
 8015722:	0019      	movs	r1, r3
 8015724:	1dbb      	adds	r3, r7, #6
 8015726:	1c2a      	adds	r2, r5, #0
 8015728:	801a      	strh	r2, [r3, #0]
 801572a:	1d7b      	adds	r3, r7, #5
 801572c:	1c22      	adds	r2, r4, #0
 801572e:	701a      	strb	r2, [r3, #0]
 8015730:	1d3b      	adds	r3, r7, #4
 8015732:	1c02      	adds	r2, r0, #0
 8015734:	701a      	strb	r2, [r3, #0]
 8015736:	1cfb      	adds	r3, r7, #3
 8015738:	1c0a      	adds	r2, r1, #0
 801573a:	701a      	strb	r2, [r3, #0]
    if( b0 == 0 )
 801573c:	6a3b      	ldr	r3, [r7, #32]
 801573e:	2b00      	cmp	r3, #0
 8015740:	d101      	bne.n	8015746 <PrepareB0+0x30>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015742:	230a      	movs	r3, #10
 8015744:	e050      	b.n	80157e8 <PrepareB0+0xd2>
    }

    b0[0] = 0x49;
 8015746:	6a3b      	ldr	r3, [r7, #32]
 8015748:	2249      	movs	r2, #73	; 0x49
 801574a:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
/* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 801574c:	6a3b      	ldr	r3, [r7, #32]
 801574e:	3301      	adds	r3, #1
 8015750:	2200      	movs	r2, #0
 8015752:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8015754:	6a3b      	ldr	r3, [r7, #32]
 8015756:	3302      	adds	r3, #2
 8015758:	2200      	movs	r2, #0
 801575a:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 801575c:	6a3b      	ldr	r3, [r7, #32]
 801575e:	3303      	adds	r3, #3
 8015760:	2200      	movs	r2, #0
 8015762:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8015764:	6a3b      	ldr	r3, [r7, #32]
 8015766:	3304      	adds	r3, #4
 8015768:	2200      	movs	r2, #0
 801576a:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 801576c:	6a3b      	ldr	r3, [r7, #32]
 801576e:	3305      	adds	r3, #5
 8015770:	1cfa      	adds	r2, r7, #3
 8015772:	7812      	ldrb	r2, [r2, #0]
 8015774:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8015776:	6a3b      	ldr	r3, [r7, #32]
 8015778:	3306      	adds	r3, #6
 801577a:	69ba      	ldr	r2, [r7, #24]
 801577c:	b2d2      	uxtb	r2, r2
 801577e:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8015780:	69bb      	ldr	r3, [r7, #24]
 8015782:	0a1a      	lsrs	r2, r3, #8
 8015784:	6a3b      	ldr	r3, [r7, #32]
 8015786:	3307      	adds	r3, #7
 8015788:	b2d2      	uxtb	r2, r2
 801578a:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 801578c:	69bb      	ldr	r3, [r7, #24]
 801578e:	0c1a      	lsrs	r2, r3, #16
 8015790:	6a3b      	ldr	r3, [r7, #32]
 8015792:	3308      	adds	r3, #8
 8015794:	b2d2      	uxtb	r2, r2
 8015796:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8015798:	69bb      	ldr	r3, [r7, #24]
 801579a:	0e1a      	lsrs	r2, r3, #24
 801579c:	6a3b      	ldr	r3, [r7, #32]
 801579e:	3309      	adds	r3, #9
 80157a0:	b2d2      	uxtb	r2, r2
 80157a2:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 80157a4:	6a3b      	ldr	r3, [r7, #32]
 80157a6:	330a      	adds	r3, #10
 80157a8:	69fa      	ldr	r2, [r7, #28]
 80157aa:	b2d2      	uxtb	r2, r2
 80157ac:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 80157ae:	69fb      	ldr	r3, [r7, #28]
 80157b0:	0a1a      	lsrs	r2, r3, #8
 80157b2:	6a3b      	ldr	r3, [r7, #32]
 80157b4:	330b      	adds	r3, #11
 80157b6:	b2d2      	uxtb	r2, r2
 80157b8:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 80157ba:	69fb      	ldr	r3, [r7, #28]
 80157bc:	0c1a      	lsrs	r2, r3, #16
 80157be:	6a3b      	ldr	r3, [r7, #32]
 80157c0:	330c      	adds	r3, #12
 80157c2:	b2d2      	uxtb	r2, r2
 80157c4:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 80157c6:	69fb      	ldr	r3, [r7, #28]
 80157c8:	0e1a      	lsrs	r2, r3, #24
 80157ca:	6a3b      	ldr	r3, [r7, #32]
 80157cc:	330d      	adds	r3, #13
 80157ce:	b2d2      	uxtb	r2, r2
 80157d0:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 80157d2:	6a3b      	ldr	r3, [r7, #32]
 80157d4:	330e      	adds	r3, #14
 80157d6:	2200      	movs	r2, #0
 80157d8:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 80157da:	6a3b      	ldr	r3, [r7, #32]
 80157dc:	330f      	adds	r3, #15
 80157de:	1dba      	adds	r2, r7, #6
 80157e0:	8812      	ldrh	r2, [r2, #0]
 80157e2:	b2d2      	uxtb	r2, r2
 80157e4:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80157e6:	2300      	movs	r3, #0
}
 80157e8:	0018      	movs	r0, r3
 80157ea:	46bd      	mov	sp, r7
 80157ec:	b002      	add	sp, #8
 80157ee:	bdb0      	pop	{r4, r5, r7, pc}

080157f0 <ComputeCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 80157f0:	b5b0      	push	{r4, r5, r7, lr}
 80157f2:	b08a      	sub	sp, #40	; 0x28
 80157f4:	af04      	add	r7, sp, #16
 80157f6:	6078      	str	r0, [r7, #4]
 80157f8:	000c      	movs	r4, r1
 80157fa:	0010      	movs	r0, r2
 80157fc:	0019      	movs	r1, r3
 80157fe:	1cbb      	adds	r3, r7, #2
 8015800:	1c22      	adds	r2, r4, #0
 8015802:	801a      	strh	r2, [r3, #0]
 8015804:	1c7b      	adds	r3, r7, #1
 8015806:	1c02      	adds	r2, r0, #0
 8015808:	701a      	strb	r2, [r3, #0]
 801580a:	003b      	movs	r3, r7
 801580c:	1c0a      	adds	r2, r1, #0
 801580e:	701a      	strb	r2, [r3, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	2b00      	cmp	r3, #0
 8015814:	d002      	beq.n	801581c <ComputeCmacB0+0x2c>
 8015816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015818:	2b00      	cmp	r3, #0
 801581a:	d101      	bne.n	8015820 <ComputeCmacB0+0x30>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801581c:	230a      	movs	r3, #10
 801581e:	e02a      	b.n	8015876 <ComputeCmacB0+0x86>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8015820:	1cbb      	adds	r3, r7, #2
 8015822:	881a      	ldrh	r2, [r3, #0]
 8015824:	2380      	movs	r3, #128	; 0x80
 8015826:	005b      	lsls	r3, r3, #1
 8015828:	429a      	cmp	r2, r3
 801582a:	d901      	bls.n	8015830 <ComputeCmacB0+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 801582c:	230e      	movs	r3, #14
 801582e:	e022      	b.n	8015876 <ComputeCmacB0+0x86>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8015830:	2328      	movs	r3, #40	; 0x28
 8015832:	18fb      	adds	r3, r7, r3
 8015834:	781c      	ldrb	r4, [r3, #0]
 8015836:	003b      	movs	r3, r7
 8015838:	781a      	ldrb	r2, [r3, #0]
 801583a:	1c7b      	adds	r3, r7, #1
 801583c:	7819      	ldrb	r1, [r3, #0]
 801583e:	1cbb      	adds	r3, r7, #2
 8015840:	8818      	ldrh	r0, [r3, #0]
 8015842:	2508      	movs	r5, #8
 8015844:	197b      	adds	r3, r7, r5
 8015846:	9302      	str	r3, [sp, #8]
 8015848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801584a:	9301      	str	r3, [sp, #4]
 801584c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801584e:	9300      	str	r3, [sp, #0]
 8015850:	0023      	movs	r3, r4
 8015852:	f7ff ff60 	bl	8015716 <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8015856:	1c7b      	adds	r3, r7, #1
 8015858:	781c      	ldrb	r4, [r3, #0]
 801585a:	1cbb      	adds	r3, r7, #2
 801585c:	881a      	ldrh	r2, [r3, #0]
 801585e:	6879      	ldr	r1, [r7, #4]
 8015860:	1978      	adds	r0, r7, r5
 8015862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015864:	9300      	str	r3, [sp, #0]
 8015866:	0023      	movs	r3, r4
 8015868:	f7f8 f8da 	bl	800da20 <SecureElementComputeAesCmac>
 801586c:	1e03      	subs	r3, r0, #0
 801586e:	d001      	beq.n	8015874 <ComputeCmacB0+0x84>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015870:	230f      	movs	r3, #15
 8015872:	e000      	b.n	8015876 <ComputeCmacB0+0x86>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8015874:	2300      	movs	r3, #0
}
 8015876:	0018      	movs	r0, r3
 8015878:	46bd      	mov	sp, r7
 801587a:	b006      	add	sp, #24
 801587c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08015880 <VerifyCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[in]  expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8015880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015882:	b0cd      	sub	sp, #308	; 0x134
 8015884:	af04      	add	r7, sp, #16
 8015886:	6078      	str	r0, [r7, #4]
 8015888:	000c      	movs	r4, r1
 801588a:	0010      	movs	r0, r2
 801588c:	0019      	movs	r1, r3
 801588e:	4b52      	ldr	r3, [pc, #328]	; (80159d8 <VerifyCmacB0+0x158>)
 8015890:	2290      	movs	r2, #144	; 0x90
 8015892:	0052      	lsls	r2, r2, #1
 8015894:	4694      	mov	ip, r2
 8015896:	44bc      	add	ip, r7
 8015898:	4463      	add	r3, ip
 801589a:	1c22      	adds	r2, r4, #0
 801589c:	801a      	strh	r2, [r3, #0]
 801589e:	4b4f      	ldr	r3, [pc, #316]	; (80159dc <VerifyCmacB0+0x15c>)
 80158a0:	2290      	movs	r2, #144	; 0x90
 80158a2:	0052      	lsls	r2, r2, #1
 80158a4:	4694      	mov	ip, r2
 80158a6:	44bc      	add	ip, r7
 80158a8:	4463      	add	r3, ip
 80158aa:	1c02      	adds	r2, r0, #0
 80158ac:	701a      	strb	r2, [r3, #0]
 80158ae:	4b4c      	ldr	r3, [pc, #304]	; (80159e0 <VerifyCmacB0+0x160>)
 80158b0:	2290      	movs	r2, #144	; 0x90
 80158b2:	0052      	lsls	r2, r2, #1
 80158b4:	4694      	mov	ip, r2
 80158b6:	44bc      	add	ip, r7
 80158b8:	4463      	add	r3, ip
 80158ba:	1c0a      	adds	r2, r1, #0
 80158bc:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	d101      	bne.n	80158c8 <VerifyCmacB0+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80158c4:	230a      	movs	r3, #10
 80158c6:	e083      	b.n	80159d0 <VerifyCmacB0+0x150>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80158c8:	4b43      	ldr	r3, [pc, #268]	; (80159d8 <VerifyCmacB0+0x158>)
 80158ca:	2290      	movs	r2, #144	; 0x90
 80158cc:	0052      	lsls	r2, r2, #1
 80158ce:	4694      	mov	ip, r2
 80158d0:	44bc      	add	ip, r7
 80158d2:	4463      	add	r3, ip
 80158d4:	881a      	ldrh	r2, [r3, #0]
 80158d6:	2380      	movs	r3, #128	; 0x80
 80158d8:	005b      	lsls	r3, r3, #1
 80158da:	429a      	cmp	r2, r3
 80158dc:	d901      	bls.n	80158e2 <VerifyCmacB0+0x62>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 80158de:	230e      	movs	r3, #14
 80158e0:	e076      	b.n	80159d0 <VerifyCmacB0+0x150>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 80158e2:	2388      	movs	r3, #136	; 0x88
 80158e4:	005a      	lsls	r2, r3, #1
 80158e6:	250c      	movs	r5, #12
 80158e8:	197b      	adds	r3, r7, r5
 80158ea:	2100      	movs	r1, #0
 80158ec:	0018      	movs	r0, r3
 80158ee:	f003 fe8d 	bl	801960c <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80158f2:	2398      	movs	r3, #152	; 0x98
 80158f4:	005b      	lsls	r3, r3, #1
 80158f6:	2208      	movs	r2, #8
 80158f8:	4694      	mov	ip, r2
 80158fa:	44bc      	add	ip, r7
 80158fc:	4463      	add	r3, ip
 80158fe:	781c      	ldrb	r4, [r3, #0]
 8015900:	4b37      	ldr	r3, [pc, #220]	; (80159e0 <VerifyCmacB0+0x160>)
 8015902:	2290      	movs	r2, #144	; 0x90
 8015904:	0052      	lsls	r2, r2, #1
 8015906:	4694      	mov	ip, r2
 8015908:	44bc      	add	ip, r7
 801590a:	4463      	add	r3, ip
 801590c:	781a      	ldrb	r2, [r3, #0]
 801590e:	4b33      	ldr	r3, [pc, #204]	; (80159dc <VerifyCmacB0+0x15c>)
 8015910:	2190      	movs	r1, #144	; 0x90
 8015912:	0049      	lsls	r1, r1, #1
 8015914:	468c      	mov	ip, r1
 8015916:	44bc      	add	ip, r7
 8015918:	4463      	add	r3, ip
 801591a:	7819      	ldrb	r1, [r3, #0]
 801591c:	4b2e      	ldr	r3, [pc, #184]	; (80159d8 <VerifyCmacB0+0x158>)
 801591e:	2090      	movs	r0, #144	; 0x90
 8015920:	0040      	lsls	r0, r0, #1
 8015922:	4684      	mov	ip, r0
 8015924:	44bc      	add	ip, r7
 8015926:	4463      	add	r3, ip
 8015928:	8818      	ldrh	r0, [r3, #0]
 801592a:	197b      	adds	r3, r7, r5
 801592c:	9302      	str	r3, [sp, #8]
 801592e:	239c      	movs	r3, #156	; 0x9c
 8015930:	005b      	lsls	r3, r3, #1
 8015932:	2608      	movs	r6, #8
 8015934:	46b4      	mov	ip, r6
 8015936:	44bc      	add	ip, r7
 8015938:	4463      	add	r3, ip
 801593a:	681b      	ldr	r3, [r3, #0]
 801593c:	9301      	str	r3, [sp, #4]
 801593e:	239a      	movs	r3, #154	; 0x9a
 8015940:	005b      	lsls	r3, r3, #1
 8015942:	2608      	movs	r6, #8
 8015944:	46b4      	mov	ip, r6
 8015946:	44bc      	add	ip, r7
 8015948:	4463      	add	r3, ip
 801594a:	681b      	ldr	r3, [r3, #0]
 801594c:	9300      	str	r3, [sp, #0]
 801594e:	0023      	movs	r3, r4
 8015950:	f7ff fee1 	bl	8015716 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8015954:	197b      	adds	r3, r7, r5
 8015956:	3310      	adds	r3, #16
 8015958:	4a1f      	ldr	r2, [pc, #124]	; (80159d8 <VerifyCmacB0+0x158>)
 801595a:	2190      	movs	r1, #144	; 0x90
 801595c:	0049      	lsls	r1, r1, #1
 801595e:	468c      	mov	ip, r1
 8015960:	44bc      	add	ip, r7
 8015962:	4462      	add	r2, ip
 8015964:	8812      	ldrh	r2, [r2, #0]
 8015966:	6879      	ldr	r1, [r7, #4]
 8015968:	0018      	movs	r0, r3
 801596a:	f003 fe11 	bl	8019590 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 801596e:	2620      	movs	r6, #32
 8015970:	36ff      	adds	r6, #255	; 0xff
 8015972:	19bb      	adds	r3, r7, r6
 8015974:	2206      	movs	r2, #6
 8015976:	701a      	strb	r2, [r3, #0]
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8015978:	4b17      	ldr	r3, [pc, #92]	; (80159d8 <VerifyCmacB0+0x158>)
 801597a:	2290      	movs	r2, #144	; 0x90
 801597c:	0052      	lsls	r2, r2, #1
 801597e:	4694      	mov	ip, r2
 8015980:	44bc      	add	ip, r7
 8015982:	4463      	add	r3, ip
 8015984:	881b      	ldrh	r3, [r3, #0]
 8015986:	3310      	adds	r3, #16
 8015988:	b299      	uxth	r1, r3
 801598a:	19bc      	adds	r4, r7, r6
 801598c:	4b13      	ldr	r3, [pc, #76]	; (80159dc <VerifyCmacB0+0x15c>)
 801598e:	2290      	movs	r2, #144	; 0x90
 8015990:	0052      	lsls	r2, r2, #1
 8015992:	4694      	mov	ip, r2
 8015994:	44bc      	add	ip, r7
 8015996:	4463      	add	r3, ip
 8015998:	781b      	ldrb	r3, [r3, #0]
 801599a:	229e      	movs	r2, #158	; 0x9e
 801599c:	0052      	lsls	r2, r2, #1
 801599e:	2008      	movs	r0, #8
 80159a0:	4684      	mov	ip, r0
 80159a2:	44bc      	add	ip, r7
 80159a4:	4462      	add	r2, ip
 80159a6:	6812      	ldr	r2, [r2, #0]
 80159a8:	1978      	adds	r0, r7, r5
 80159aa:	f7f8 f85a 	bl	800da62 <SecureElementVerifyAesCmac>
 80159ae:	0003      	movs	r3, r0
 80159b0:	7023      	strb	r3, [r4, #0]

    if( retval == SECURE_ELEMENT_SUCCESS )
 80159b2:	19bb      	adds	r3, r7, r6
 80159b4:	781b      	ldrb	r3, [r3, #0]
 80159b6:	2b00      	cmp	r3, #0
 80159b8:	d101      	bne.n	80159be <VerifyCmacB0+0x13e>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 80159ba:	2300      	movs	r3, #0
 80159bc:	e008      	b.n	80159d0 <VerifyCmacB0+0x150>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 80159be:	2320      	movs	r3, #32
 80159c0:	33ff      	adds	r3, #255	; 0xff
 80159c2:	18fb      	adds	r3, r7, r3
 80159c4:	781b      	ldrb	r3, [r3, #0]
 80159c6:	2b01      	cmp	r3, #1
 80159c8:	d101      	bne.n	80159ce <VerifyCmacB0+0x14e>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 80159ca:	2301      	movs	r3, #1
 80159cc:	e000      	b.n	80159d0 <VerifyCmacB0+0x150>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80159ce:	230f      	movs	r3, #15
}
 80159d0:	0018      	movs	r0, r3
 80159d2:	46bd      	mov	sp, r7
 80159d4:	b049      	add	sp, #292	; 0x124
 80159d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80159d8:	fffffee2 	.word	0xfffffee2
 80159dc:	fffffee1 	.word	0xfffffee1
 80159e0:	fffffee0 	.word	0xfffffee0

080159e4 <GetKeyAddrItem>:
 * \param[IN]  addrID          - Address identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 80159e4:	b580      	push	{r7, lr}
 80159e6:	b084      	sub	sp, #16
 80159e8:	af00      	add	r7, sp, #0
 80159ea:	0002      	movs	r2, r0
 80159ec:	6039      	str	r1, [r7, #0]
 80159ee:	1dfb      	adds	r3, r7, #7
 80159f0:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 80159f2:	230f      	movs	r3, #15
 80159f4:	18fb      	adds	r3, r7, r3
 80159f6:	2200      	movs	r2, #0
 80159f8:	701a      	strb	r2, [r3, #0]
 80159fa:	e018      	b.n	8015a2e <GetKeyAddrItem+0x4a>
    {
        if( KeyAddrList[i].AddrID == addrID )
 80159fc:	210f      	movs	r1, #15
 80159fe:	187b      	adds	r3, r7, r1
 8015a00:	781a      	ldrb	r2, [r3, #0]
 8015a02:	4b10      	ldr	r3, [pc, #64]	; (8015a44 <GetKeyAddrItem+0x60>)
 8015a04:	0092      	lsls	r2, r2, #2
 8015a06:	5cd3      	ldrb	r3, [r2, r3]
 8015a08:	1dfa      	adds	r2, r7, #7
 8015a0a:	7812      	ldrb	r2, [r2, #0]
 8015a0c:	429a      	cmp	r2, r3
 8015a0e:	d108      	bne.n	8015a22 <GetKeyAddrItem+0x3e>
        {
            *item = &( KeyAddrList[i] );
 8015a10:	187b      	adds	r3, r7, r1
 8015a12:	781b      	ldrb	r3, [r3, #0]
 8015a14:	009a      	lsls	r2, r3, #2
 8015a16:	4b0b      	ldr	r3, [pc, #44]	; (8015a44 <GetKeyAddrItem+0x60>)
 8015a18:	18d2      	adds	r2, r2, r3
 8015a1a:	683b      	ldr	r3, [r7, #0]
 8015a1c:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8015a1e:	2300      	movs	r3, #0
 8015a20:	e00b      	b.n	8015a3a <GetKeyAddrItem+0x56>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8015a22:	210f      	movs	r1, #15
 8015a24:	187b      	adds	r3, r7, r1
 8015a26:	781a      	ldrb	r2, [r3, #0]
 8015a28:	187b      	adds	r3, r7, r1
 8015a2a:	3201      	adds	r2, #1
 8015a2c:	701a      	strb	r2, [r3, #0]
 8015a2e:	230f      	movs	r3, #15
 8015a30:	18fb      	adds	r3, r7, r3
 8015a32:	781b      	ldrb	r3, [r3, #0]
 8015a34:	2b01      	cmp	r3, #1
 8015a36:	d9e1      	bls.n	80159fc <GetKeyAddrItem+0x18>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8015a38:	230c      	movs	r3, #12
}
 8015a3a:	0018      	movs	r0, r3
 8015a3c:	46bd      	mov	sp, r7
 8015a3e:	b004      	add	sp, #16
 8015a40:	bd80      	pop	{r7, pc}
 8015a42:	46c0      	nop			; (mov r8, r8)
 8015a44:	200001a4 	.word	0x200001a4

08015a48 <DeriveSessionKey10x>:
 * \param[IN]  netID          - Network Identifier
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint8_t* joinNonce, uint8_t* netID, uint8_t* devNonce )
{
 8015a48:	b590      	push	{r4, r7, lr}
 8015a4a:	b089      	sub	sp, #36	; 0x24
 8015a4c:	af00      	add	r7, sp, #0
 8015a4e:	60b9      	str	r1, [r7, #8]
 8015a50:	607a      	str	r2, [r7, #4]
 8015a52:	603b      	str	r3, [r7, #0]
 8015a54:	230f      	movs	r3, #15
 8015a56:	18fb      	adds	r3, r7, r3
 8015a58:	1c02      	adds	r2, r0, #0
 8015a5a:	701a      	strb	r2, [r3, #0]
    if( ( joinNonce == 0 ) || ( netID == 0 ) || ( devNonce == 0 ) )
 8015a5c:	68bb      	ldr	r3, [r7, #8]
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	d005      	beq.n	8015a6e <DeriveSessionKey10x+0x26>
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	2b00      	cmp	r3, #0
 8015a66:	d002      	beq.n	8015a6e <DeriveSessionKey10x+0x26>
 8015a68:	683b      	ldr	r3, [r7, #0]
 8015a6a:	2b00      	cmp	r3, #0
 8015a6c:	d101      	bne.n	8015a72 <DeriveSessionKey10x+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015a6e:	230a      	movs	r3, #10
 8015a70:	e043      	b.n	8015afa <DeriveSessionKey10x+0xb2>
    }

    uint8_t compBase[16] = { 0 };
 8015a72:	2310      	movs	r3, #16
 8015a74:	18fb      	adds	r3, r7, r3
 8015a76:	2200      	movs	r2, #0
 8015a78:	601a      	str	r2, [r3, #0]
 8015a7a:	3304      	adds	r3, #4
 8015a7c:	220c      	movs	r2, #12
 8015a7e:	2100      	movs	r1, #0
 8015a80:	0018      	movs	r0, r3
 8015a82:	f008 fa96 	bl	801dfb2 <memset>

    switch( keyID )
 8015a86:	230f      	movs	r3, #15
 8015a88:	18fb      	adds	r3, r7, r3
 8015a8a:	781b      	ldrb	r3, [r3, #0]
 8015a8c:	2b02      	cmp	r3, #2
 8015a8e:	d002      	beq.n	8015a96 <DeriveSessionKey10x+0x4e>
 8015a90:	2b03      	cmp	r3, #3
 8015a92:	d005      	beq.n	8015aa0 <DeriveSessionKey10x+0x58>
 8015a94:	e009      	b.n	8015aaa <DeriveSessionKey10x+0x62>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 8015a96:	2310      	movs	r3, #16
 8015a98:	18fb      	adds	r3, r7, r3
 8015a9a:	2201      	movs	r2, #1
 8015a9c:	701a      	strb	r2, [r3, #0]
            break;
 8015a9e:	e006      	b.n	8015aae <DeriveSessionKey10x+0x66>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8015aa0:	2310      	movs	r3, #16
 8015aa2:	18fb      	adds	r3, r7, r3
 8015aa4:	2202      	movs	r2, #2
 8015aa6:	701a      	strb	r2, [r3, #0]
            break;
 8015aa8:	e001      	b.n	8015aae <DeriveSessionKey10x+0x66>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8015aaa:	230b      	movs	r3, #11
 8015aac:	e025      	b.n	8015afa <DeriveSessionKey10x+0xb2>
    }

    memcpy1( compBase + 1, joinNonce, 3 );
 8015aae:	2410      	movs	r4, #16
 8015ab0:	193b      	adds	r3, r7, r4
 8015ab2:	3301      	adds	r3, #1
 8015ab4:	68b9      	ldr	r1, [r7, #8]
 8015ab6:	2203      	movs	r2, #3
 8015ab8:	0018      	movs	r0, r3
 8015aba:	f003 fd69 	bl	8019590 <memcpy1>
    memcpy1( compBase + 4, netID, 3 );
 8015abe:	193b      	adds	r3, r7, r4
 8015ac0:	3304      	adds	r3, #4
 8015ac2:	6879      	ldr	r1, [r7, #4]
 8015ac4:	2203      	movs	r2, #3
 8015ac6:	0018      	movs	r0, r3
 8015ac8:	f003 fd62 	bl	8019590 <memcpy1>
    memcpy1( compBase + 7, devNonce, 2 );
 8015acc:	193b      	adds	r3, r7, r4
 8015ace:	3307      	adds	r3, #7
 8015ad0:	6839      	ldr	r1, [r7, #0]
 8015ad2:	2202      	movs	r2, #2
 8015ad4:	0018      	movs	r0, r3
 8015ad6:	f003 fd5b 	bl	8019590 <memcpy1>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8015ada:	4b0a      	ldr	r3, [pc, #40]	; (8015b04 <DeriveSessionKey10x+0xbc>)
 8015adc:	681b      	ldr	r3, [r3, #0]
 8015ade:	220f      	movs	r2, #15
 8015ae0:	18ba      	adds	r2, r7, r2
 8015ae2:	7812      	ldrb	r2, [r2, #0]
 8015ae4:	1939      	adds	r1, r7, r4
 8015ae6:	6818      	ldr	r0, [r3, #0]
 8015ae8:	0013      	movs	r3, r2
 8015aea:	2201      	movs	r2, #1
 8015aec:	f7f8 f86c 	bl	800dbc8 <SecureElementDeriveAndStoreKey>
 8015af0:	1e03      	subs	r3, r0, #0
 8015af2:	d001      	beq.n	8015af8 <DeriveSessionKey10x+0xb0>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015af4:	230f      	movs	r3, #15
 8015af6:	e000      	b.n	8015afa <DeriveSessionKey10x+0xb2>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015af8:	2300      	movs	r3, #0
}
 8015afa:	0018      	movs	r0, r3
 8015afc:	46bd      	mov	sp, r7
 8015afe:	b009      	add	sp, #36	; 0x24
 8015b00:	bd90      	pop	{r4, r7, pc}
 8015b02:	46c0      	nop			; (mov r8, r8)
 8015b04:	20000d18 	.word	0x20000d18

08015b08 <GetLastFcntDown>:
 * \param[IN]     lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8015b08:	b580      	push	{r7, lr}
 8015b0a:	b082      	sub	sp, #8
 8015b0c:	af00      	add	r7, sp, #0
 8015b0e:	0002      	movs	r2, r0
 8015b10:	6039      	str	r1, [r7, #0]
 8015b12:	1dfb      	adds	r3, r7, #7
 8015b14:	701a      	strb	r2, [r3, #0]
    if( lastDown == NULL )
 8015b16:	683b      	ldr	r3, [r7, #0]
 8015b18:	2b00      	cmp	r3, #0
 8015b1a:	d101      	bne.n	8015b20 <GetLastFcntDown+0x18>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015b1c:	230a      	movs	r3, #10
 8015b1e:	e039      	b.n	8015b94 <GetLastFcntDown+0x8c>
    }
    switch( fCntID )
 8015b20:	1dfb      	adds	r3, r7, #7
 8015b22:	781b      	ldrb	r3, [r3, #0]
 8015b24:	2b04      	cmp	r3, #4
 8015b26:	d02c      	beq.n	8015b82 <GetLastFcntDown+0x7a>
 8015b28:	dc31      	bgt.n	8015b8e <GetLastFcntDown+0x86>
 8015b2a:	2b03      	cmp	r3, #3
 8015b2c:	d01d      	beq.n	8015b6a <GetLastFcntDown+0x62>
 8015b2e:	dc2e      	bgt.n	8015b8e <GetLastFcntDown+0x86>
 8015b30:	2b01      	cmp	r3, #1
 8015b32:	d002      	beq.n	8015b3a <GetLastFcntDown+0x32>
 8015b34:	2b02      	cmp	r3, #2
 8015b36:	d00c      	beq.n	8015b52 <GetLastFcntDown+0x4a>
 8015b38:	e029      	b.n	8015b8e <GetLastFcntDown+0x86>
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoCtx.NvmCtx->FCntList.NFCntDown;
 8015b3a:	4b18      	ldr	r3, [pc, #96]	; (8015b9c <GetLastFcntDown+0x94>)
 8015b3c:	681b      	ldr	r3, [r3, #0]
 8015b3e:	691a      	ldr	r2, [r3, #16]
 8015b40:	683b      	ldr	r3, [r7, #0]
 8015b42:	601a      	str	r2, [r3, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.NFCntDown;
 8015b44:	4b15      	ldr	r3, [pc, #84]	; (8015b9c <GetLastFcntDown+0x94>)
 8015b46:	681a      	ldr	r2, [r3, #0]
 8015b48:	4b14      	ldr	r3, [pc, #80]	; (8015b9c <GetLastFcntDown+0x94>)
 8015b4a:	681b      	ldr	r3, [r3, #0]
 8015b4c:	3210      	adds	r2, #16
 8015b4e:	621a      	str	r2, [r3, #32]
            break;
 8015b50:	e01f      	b.n	8015b92 <GetLastFcntDown+0x8a>
        case A_FCNT_DOWN:
            *lastDown = CryptoCtx.NvmCtx->FCntList.AFCntDown;
 8015b52:	4b12      	ldr	r3, [pc, #72]	; (8015b9c <GetLastFcntDown+0x94>)
 8015b54:	681b      	ldr	r3, [r3, #0]
 8015b56:	695a      	ldr	r2, [r3, #20]
 8015b58:	683b      	ldr	r3, [r7, #0]
 8015b5a:	601a      	str	r2, [r3, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.AFCntDown;
 8015b5c:	4b0f      	ldr	r3, [pc, #60]	; (8015b9c <GetLastFcntDown+0x94>)
 8015b5e:	681a      	ldr	r2, [r3, #0]
 8015b60:	4b0e      	ldr	r3, [pc, #56]	; (8015b9c <GetLastFcntDown+0x94>)
 8015b62:	681b      	ldr	r3, [r3, #0]
 8015b64:	3214      	adds	r2, #20
 8015b66:	621a      	str	r2, [r3, #32]
            break;
 8015b68:	e013      	b.n	8015b92 <GetLastFcntDown+0x8a>
        case FCNT_DOWN:
            *lastDown = CryptoCtx.NvmCtx->FCntList.FCntDown;
 8015b6a:	4b0c      	ldr	r3, [pc, #48]	; (8015b9c <GetLastFcntDown+0x94>)
 8015b6c:	681b      	ldr	r3, [r3, #0]
 8015b6e:	699a      	ldr	r2, [r3, #24]
 8015b70:	683b      	ldr	r3, [r7, #0]
 8015b72:	601a      	str	r2, [r3, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 8015b74:	4b09      	ldr	r3, [pc, #36]	; (8015b9c <GetLastFcntDown+0x94>)
 8015b76:	681a      	ldr	r2, [r3, #0]
 8015b78:	4b08      	ldr	r3, [pc, #32]	; (8015b9c <GetLastFcntDown+0x94>)
 8015b7a:	681b      	ldr	r3, [r3, #0]
 8015b7c:	3218      	adds	r2, #24
 8015b7e:	621a      	str	r2, [r3, #32]
            break;
 8015b80:	e007      	b.n	8015b92 <GetLastFcntDown+0x8a>
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 8015b82:	4b06      	ldr	r3, [pc, #24]	; (8015b9c <GetLastFcntDown+0x94>)
 8015b84:	681b      	ldr	r3, [r3, #0]
 8015b86:	69da      	ldr	r2, [r3, #28]
 8015b88:	683b      	ldr	r3, [r7, #0]
 8015b8a:	601a      	str	r2, [r3, #0]
            break;
 8015b8c:	e001      	b.n	8015b92 <GetLastFcntDown+0x8a>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 1 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8015b8e:	2305      	movs	r3, #5
 8015b90:	e000      	b.n	8015b94 <GetLastFcntDown+0x8c>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8015b92:	2300      	movs	r3, #0
}
 8015b94:	0018      	movs	r0, r3
 8015b96:	46bd      	mov	sp, r7
 8015b98:	b002      	add	sp, #8
 8015b9a:	bd80      	pop	{r7, pc}
 8015b9c:	20000d18 	.word	0x20000d18

08015ba0 <CheckFCntDown>:
 * \param[IN]     currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8015ba0:	b580      	push	{r7, lr}
 8015ba2:	b084      	sub	sp, #16
 8015ba4:	af00      	add	r7, sp, #0
 8015ba6:	0002      	movs	r2, r0
 8015ba8:	6039      	str	r1, [r7, #0]
 8015baa:	1dfb      	adds	r3, r7, #7
 8015bac:	701a      	strb	r2, [r3, #0]
    uint32_t lastDown = 0;
 8015bae:	2300      	movs	r3, #0
 8015bb0:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8015bb2:	230c      	movs	r3, #12
 8015bb4:	18fa      	adds	r2, r7, r3
 8015bb6:	1dfb      	adds	r3, r7, #7
 8015bb8:	781b      	ldrb	r3, [r3, #0]
 8015bba:	0011      	movs	r1, r2
 8015bbc:	0018      	movs	r0, r3
 8015bbe:	f7ff ffa3 	bl	8015b08 <GetLastFcntDown>
 8015bc2:	1e03      	subs	r3, r0, #0
 8015bc4:	d001      	beq.n	8015bca <CheckFCntDown+0x2a>
    {
        return false;
 8015bc6:	2300      	movs	r3, #0
 8015bc8:	e009      	b.n	8015bde <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8015bca:	68fb      	ldr	r3, [r7, #12]
 8015bcc:	683a      	ldr	r2, [r7, #0]
 8015bce:	429a      	cmp	r2, r3
 8015bd0:	d802      	bhi.n	8015bd8 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 8015bd2:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8015bd4:	3301      	adds	r3, #1
 8015bd6:	d101      	bne.n	8015bdc <CheckFCntDown+0x3c>
    {
        return true;
 8015bd8:	2301      	movs	r3, #1
 8015bda:	e000      	b.n	8015bde <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8015bdc:	2300      	movs	r3, #0
    }
}
 8015bde:	0018      	movs	r0, r3
 8015be0:	46bd      	mov	sp, r7
 8015be2:	b004      	add	sp, #16
 8015be4:	bd80      	pop	{r7, pc}
	...

08015be8 <UpdateFCntDown>:
 * \param[IN]     currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8015be8:	b580      	push	{r7, lr}
 8015bea:	b082      	sub	sp, #8
 8015bec:	af00      	add	r7, sp, #0
 8015bee:	0002      	movs	r2, r0
 8015bf0:	6039      	str	r1, [r7, #0]
 8015bf2:	1dfb      	adds	r3, r7, #7
 8015bf4:	701a      	strb	r2, [r3, #0]
    switch( fCntID )
 8015bf6:	1dfb      	adds	r3, r7, #7
 8015bf8:	781b      	ldrb	r3, [r3, #0]
 8015bfa:	2b04      	cmp	r3, #4
 8015bfc:	d017      	beq.n	8015c2e <UpdateFCntDown+0x46>
 8015bfe:	dc1b      	bgt.n	8015c38 <UpdateFCntDown+0x50>
 8015c00:	2b03      	cmp	r3, #3
 8015c02:	d00f      	beq.n	8015c24 <UpdateFCntDown+0x3c>
 8015c04:	dc18      	bgt.n	8015c38 <UpdateFCntDown+0x50>
 8015c06:	2b01      	cmp	r3, #1
 8015c08:	d002      	beq.n	8015c10 <UpdateFCntDown+0x28>
 8015c0a:	2b02      	cmp	r3, #2
 8015c0c:	d005      	beq.n	8015c1a <UpdateFCntDown+0x32>
        case MC_FCNT_DOWN_3:
            CryptoCtx.NvmCtx->FCntList.McFCntDown3 = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 1 */
        default:
            break;
 8015c0e:	e013      	b.n	8015c38 <UpdateFCntDown+0x50>
            CryptoCtx.NvmCtx->FCntList.NFCntDown = currentDown;
 8015c10:	4b0d      	ldr	r3, [pc, #52]	; (8015c48 <UpdateFCntDown+0x60>)
 8015c12:	681b      	ldr	r3, [r3, #0]
 8015c14:	683a      	ldr	r2, [r7, #0]
 8015c16:	611a      	str	r2, [r3, #16]
            break;
 8015c18:	e00f      	b.n	8015c3a <UpdateFCntDown+0x52>
            CryptoCtx.NvmCtx->FCntList.AFCntDown = currentDown;
 8015c1a:	4b0b      	ldr	r3, [pc, #44]	; (8015c48 <UpdateFCntDown+0x60>)
 8015c1c:	681b      	ldr	r3, [r3, #0]
 8015c1e:	683a      	ldr	r2, [r7, #0]
 8015c20:	615a      	str	r2, [r3, #20]
            break;
 8015c22:	e00a      	b.n	8015c3a <UpdateFCntDown+0x52>
            CryptoCtx.NvmCtx->FCntList.FCntDown = currentDown;
 8015c24:	4b08      	ldr	r3, [pc, #32]	; (8015c48 <UpdateFCntDown+0x60>)
 8015c26:	681b      	ldr	r3, [r3, #0]
 8015c28:	683a      	ldr	r2, [r7, #0]
 8015c2a:	619a      	str	r2, [r3, #24]
            break;
 8015c2c:	e005      	b.n	8015c3a <UpdateFCntDown+0x52>
            CryptoCtx.NvmCtx->FCntList.McFCntDown0 = currentDown;
 8015c2e:	4b06      	ldr	r3, [pc, #24]	; (8015c48 <UpdateFCntDown+0x60>)
 8015c30:	681b      	ldr	r3, [r3, #0]
 8015c32:	683a      	ldr	r2, [r7, #0]
 8015c34:	61da      	str	r2, [r3, #28]
            break;
 8015c36:	e000      	b.n	8015c3a <UpdateFCntDown+0x52>
            break;
 8015c38:	46c0      	nop			; (mov r8, r8)
    }
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8015c3a:	4b03      	ldr	r3, [pc, #12]	; (8015c48 <UpdateFCntDown+0x60>)
 8015c3c:	685b      	ldr	r3, [r3, #4]
 8015c3e:	4798      	blx	r3
}
 8015c40:	46c0      	nop			; (mov r8, r8)
 8015c42:	46bd      	mov	sp, r7
 8015c44:	b002      	add	sp, #8
 8015c46:	bd80      	pop	{r7, pc}
 8015c48:	20000d18 	.word	0x20000d18

08015c4c <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8015c4c:	b580      	push	{r7, lr}
 8015c4e:	af00      	add	r7, sp, #0

    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 8015c50:	4b11      	ldr	r3, [pc, #68]	; (8015c98 <ResetFCnts+0x4c>)
 8015c52:	681b      	ldr	r3, [r3, #0]
 8015c54:	2200      	movs	r2, #0
 8015c56:	60da      	str	r2, [r3, #12]
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8015c58:	4b0f      	ldr	r3, [pc, #60]	; (8015c98 <ResetFCnts+0x4c>)
 8015c5a:	681b      	ldr	r3, [r3, #0]
 8015c5c:	2201      	movs	r2, #1
 8015c5e:	4252      	negs	r2, r2
 8015c60:	611a      	str	r2, [r3, #16]
    CryptoCtx.NvmCtx->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8015c62:	4b0d      	ldr	r3, [pc, #52]	; (8015c98 <ResetFCnts+0x4c>)
 8015c64:	681b      	ldr	r3, [r3, #0]
 8015c66:	2201      	movs	r2, #1
 8015c68:	4252      	negs	r2, r2
 8015c6a:	615a      	str	r2, [r3, #20]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8015c6c:	4b0a      	ldr	r3, [pc, #40]	; (8015c98 <ResetFCnts+0x4c>)
 8015c6e:	681b      	ldr	r3, [r3, #0]
 8015c70:	2201      	movs	r2, #1
 8015c72:	4252      	negs	r2, r2
 8015c74:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 8015c76:	4b08      	ldr	r3, [pc, #32]	; (8015c98 <ResetFCnts+0x4c>)
 8015c78:	681a      	ldr	r2, [r3, #0]
 8015c7a:	4b07      	ldr	r3, [pc, #28]	; (8015c98 <ResetFCnts+0x4c>)
 8015c7c:	681b      	ldr	r3, [r3, #0]
 8015c7e:	3218      	adds	r2, #24
 8015c80:	621a      	str	r2, [r3, #32]

    CryptoCtx.NvmCtx->FCntList.McFCntDown0 = FCNT_DOWN_INITAL_VALUE;
 8015c82:	4b05      	ldr	r3, [pc, #20]	; (8015c98 <ResetFCnts+0x4c>)
 8015c84:	681b      	ldr	r3, [r3, #0]
 8015c86:	2201      	movs	r2, #1
 8015c88:	4252      	negs	r2, r2
 8015c8a:	61da      	str	r2, [r3, #28]
#if ( LORAMAC_MAX_MC_CTX > 1 )
    CryptoCtx.NvmCtx->FCntList.McFCntDown1 = FCNT_DOWN_INITAL_VALUE;
    CryptoCtx.NvmCtx->FCntList.McFCntDown2 = FCNT_DOWN_INITAL_VALUE;
    CryptoCtx.NvmCtx->FCntList.McFCntDown3 = FCNT_DOWN_INITAL_VALUE;
#endif /* LORAMAC_MAX_MC_CTX > 1 */
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8015c8c:	4b02      	ldr	r3, [pc, #8]	; (8015c98 <ResetFCnts+0x4c>)
 8015c8e:	685b      	ldr	r3, [r3, #4]
 8015c90:	4798      	blx	r3
}
 8015c92:	46c0      	nop			; (mov r8, r8)
 8015c94:	46bd      	mov	sp, r7
 8015c96:	bd80      	pop	{r7, pc}
 8015c98:	20000d18 	.word	0x20000d18

08015c9c <DummyCB>:

/*
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB( void )
{
 8015c9c:	b580      	push	{r7, lr}
 8015c9e:	af00      	add	r7, sp, #0
    return;
 8015ca0:	46c0      	nop			; (mov r8, r8)
}
 8015ca2:	46bd      	mov	sp, r7
 8015ca4:	bd80      	pop	{r7, pc}
	...

08015ca8 <LoRaMacCryptoInit>:
/*
 *  API functions
 */

LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmEvent cryptoNvmCtxChanged )
{
 8015ca8:	b580      	push	{r7, lr}
 8015caa:	b082      	sub	sp, #8
 8015cac:	af00      	add	r7, sp, #0
 8015cae:	6078      	str	r0, [r7, #4]
    // Assign non volatile context
    CryptoCtx.NvmCtx = &NvmCryptoCtx;
 8015cb0:	4b15      	ldr	r3, [pc, #84]	; (8015d08 <LoRaMacCryptoInit+0x60>)
 8015cb2:	4a16      	ldr	r2, [pc, #88]	; (8015d0c <LoRaMacCryptoInit+0x64>)
 8015cb4:	601a      	str	r2, [r3, #0]

    // Assign callback
    if( cryptoNvmCtxChanged != 0 )
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	2b00      	cmp	r3, #0
 8015cba:	d003      	beq.n	8015cc4 <LoRaMacCryptoInit+0x1c>
    {
        CryptoCtx.EventCryptoNvmCtxChanged = cryptoNvmCtxChanged;
 8015cbc:	4b12      	ldr	r3, [pc, #72]	; (8015d08 <LoRaMacCryptoInit+0x60>)
 8015cbe:	687a      	ldr	r2, [r7, #4]
 8015cc0:	605a      	str	r2, [r3, #4]
 8015cc2:	e002      	b.n	8015cca <LoRaMacCryptoInit+0x22>
    }
    else
    {
        CryptoCtx.EventCryptoNvmCtxChanged = DummyCB;
 8015cc4:	4b10      	ldr	r3, [pc, #64]	; (8015d08 <LoRaMacCryptoInit+0x60>)
 8015cc6:	4a12      	ldr	r2, [pc, #72]	; (8015d10 <LoRaMacCryptoInit+0x68>)
 8015cc8:	605a      	str	r2, [r3, #4]
    }

    // Initialize with default
    memset1( ( uint8_t* )CryptoCtx.NvmCtx, 0, sizeof( LoRaMacCryptoNvmCtx_t ) );
 8015cca:	4b0f      	ldr	r3, [pc, #60]	; (8015d08 <LoRaMacCryptoInit+0x60>)
 8015ccc:	681b      	ldr	r3, [r3, #0]
 8015cce:	2224      	movs	r2, #36	; 0x24
 8015cd0:	2100      	movs	r1, #0
 8015cd2:	0018      	movs	r0, r3
 8015cd4:	f003 fc9a 	bl	801960c <memset1>

    // Set default LoRaWAN version
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Major = 1;
 8015cd8:	4b0b      	ldr	r3, [pc, #44]	; (8015d08 <LoRaMacCryptoInit+0x60>)
 8015cda:	681b      	ldr	r3, [r3, #0]
 8015cdc:	2201      	movs	r2, #1
 8015cde:	70da      	strb	r2, [r3, #3]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = 1;
 8015ce0:	4b09      	ldr	r3, [pc, #36]	; (8015d08 <LoRaMacCryptoInit+0x60>)
 8015ce2:	681b      	ldr	r3, [r3, #0]
 8015ce4:	2201      	movs	r2, #1
 8015ce6:	709a      	strb	r2, [r3, #2]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Patch = 1;
 8015ce8:	4b07      	ldr	r3, [pc, #28]	; (8015d08 <LoRaMacCryptoInit+0x60>)
 8015cea:	681b      	ldr	r3, [r3, #0]
 8015cec:	2201      	movs	r2, #1
 8015cee:	705a      	strb	r2, [r3, #1]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Revision = 0;
 8015cf0:	4b05      	ldr	r3, [pc, #20]	; (8015d08 <LoRaMacCryptoInit+0x60>)
 8015cf2:	681b      	ldr	r3, [r3, #0]
 8015cf4:	2200      	movs	r2, #0
 8015cf6:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8015cf8:	f7ff ffa8 	bl	8015c4c <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8015cfc:	2300      	movs	r3, #0
}
 8015cfe:	0018      	movs	r0, r3
 8015d00:	46bd      	mov	sp, r7
 8015d02:	b002      	add	sp, #8
 8015d04:	bd80      	pop	{r7, pc}
 8015d06:	46c0      	nop			; (mov r8, r8)
 8015d08:	20000d18 	.word	0x20000d18
 8015d0c:	20000d20 	.word	0x20000d20
 8015d10:	08015c9d 	.word	0x08015c9d

08015d14 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8015d14:	b580      	push	{r7, lr}
 8015d16:	b082      	sub	sp, #8
 8015d18:	af00      	add	r7, sp, #0
 8015d1a:	6078      	str	r0, [r7, #4]
    CryptoCtx.NvmCtx->LrWanVersion = version;
 8015d1c:	4b04      	ldr	r3, [pc, #16]	; (8015d30 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8015d1e:	681b      	ldr	r3, [r3, #0]
 8015d20:	687a      	ldr	r2, [r7, #4]
 8015d22:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8015d24:	2300      	movs	r3, #0
}
 8015d26:	0018      	movs	r0, r3
 8015d28:	46bd      	mov	sp, r7
 8015d2a:	b002      	add	sp, #8
 8015d2c:	bd80      	pop	{r7, pc}
 8015d2e:	46c0      	nop			; (mov r8, r8)
 8015d30:	20000d18 	.word	0x20000d18

08015d34 <LoRaMacCryptoRestoreNvmCtx>:

LoRaMacCryptoStatus_t LoRaMacCryptoRestoreNvmCtx( void* cryptoNvmCtx )
{
 8015d34:	b580      	push	{r7, lr}
 8015d36:	b082      	sub	sp, #8
 8015d38:	af00      	add	r7, sp, #0
 8015d3a:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( cryptoNvmCtx != 0 )
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	2b00      	cmp	r3, #0
 8015d40:	d007      	beq.n	8015d52 <LoRaMacCryptoRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* )&NvmCryptoCtx, ( uint8_t* )cryptoNvmCtx, CRYPTO_NVM_CTX_SIZE );
 8015d42:	6879      	ldr	r1, [r7, #4]
 8015d44:	4b05      	ldr	r3, [pc, #20]	; (8015d5c <LoRaMacCryptoRestoreNvmCtx+0x28>)
 8015d46:	2224      	movs	r2, #36	; 0x24
 8015d48:	0018      	movs	r0, r3
 8015d4a:	f003 fc21 	bl	8019590 <memcpy1>
        return LORAMAC_CRYPTO_SUCCESS;
 8015d4e:	2300      	movs	r3, #0
 8015d50:	e000      	b.n	8015d54 <LoRaMacCryptoRestoreNvmCtx+0x20>
    }
    else
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015d52:	230a      	movs	r3, #10
    }
}
 8015d54:	0018      	movs	r0, r3
 8015d56:	46bd      	mov	sp, r7
 8015d58:	b002      	add	sp, #8
 8015d5a:	bd80      	pop	{r7, pc}
 8015d5c:	20000d20 	.word	0x20000d20

08015d60 <LoRaMacCryptoGetNvmCtx>:

void* LoRaMacCryptoGetNvmCtx( size_t* cryptoNvmCtxSize )
{
 8015d60:	b580      	push	{r7, lr}
 8015d62:	b082      	sub	sp, #8
 8015d64:	af00      	add	r7, sp, #0
 8015d66:	6078      	str	r0, [r7, #4]
    *cryptoNvmCtxSize = CRYPTO_NVM_CTX_SIZE;
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	2224      	movs	r2, #36	; 0x24
 8015d6c:	601a      	str	r2, [r3, #0]
    return &NvmCryptoCtx;
 8015d6e:	4b02      	ldr	r3, [pc, #8]	; (8015d78 <LoRaMacCryptoGetNvmCtx+0x18>)
}
 8015d70:	0018      	movs	r0, r3
 8015d72:	46bd      	mov	sp, r7
 8015d74:	b002      	add	sp, #8
 8015d76:	bd80      	pop	{r7, pc}
 8015d78:	20000d20 	.word	0x20000d20

08015d7c <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8015d7c:	b580      	push	{r7, lr}
 8015d7e:	b082      	sub	sp, #8
 8015d80:	af00      	add	r7, sp, #0
 8015d82:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	2b00      	cmp	r3, #0
 8015d88:	d101      	bne.n	8015d8e <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015d8a:	230a      	movs	r3, #10
 8015d8c:	e006      	b.n	8015d9c <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoCtx.NvmCtx->FCntList.FCntUp + 1;
 8015d8e:	4b05      	ldr	r3, [pc, #20]	; (8015da4 <LoRaMacCryptoGetFCntUp+0x28>)
 8015d90:	681b      	ldr	r3, [r3, #0]
 8015d92:	68db      	ldr	r3, [r3, #12]
 8015d94:	1c5a      	adds	r2, r3, #1
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8015d9a:	2300      	movs	r3, #0
}
 8015d9c:	0018      	movs	r0, r3
 8015d9e:	46bd      	mov	sp, r7
 8015da0:	b002      	add	sp, #8
 8015da2:	bd80      	pop	{r7, pc}
 8015da4:	20000d18 	.word	0x20000d18

08015da8 <LoRaMacCryptoGetFCntDown>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 8015da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015daa:	b08d      	sub	sp, #52	; 0x34
 8015dac:	af00      	add	r7, sp, #0
 8015dae:	61ba      	str	r2, [r7, #24]
 8015db0:	617b      	str	r3, [r7, #20]
 8015db2:	230f      	movs	r3, #15
 8015db4:	2210      	movs	r2, #16
 8015db6:	4694      	mov	ip, r2
 8015db8:	44bc      	add	ip, r7
 8015dba:	4463      	add	r3, ip
 8015dbc:	1c02      	adds	r2, r0, #0
 8015dbe:	701a      	strb	r2, [r3, #0]
 8015dc0:	230c      	movs	r3, #12
 8015dc2:	2210      	movs	r2, #16
 8015dc4:	4694      	mov	ip, r2
 8015dc6:	44bc      	add	ip, r7
 8015dc8:	4463      	add	r3, ip
 8015dca:	1c0a      	adds	r2, r1, #0
 8015dcc:	801a      	strh	r2, [r3, #0]
    uint32_t lastDown = 0;
 8015dce:	2300      	movs	r3, #0
 8015dd0:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t fCntDiff = 0;
 8015dd2:	2300      	movs	r3, #0
 8015dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8015dd6:	231b      	movs	r3, #27
 8015dd8:	2210      	movs	r2, #16
 8015dda:	4694      	mov	ip, r2
 8015ddc:	44bc      	add	ip, r7
 8015dde:	4463      	add	r3, ip
 8015de0:	2213      	movs	r2, #19
 8015de2:	701a      	strb	r2, [r3, #0]

    if( currentDown == NULL )
 8015de4:	697b      	ldr	r3, [r7, #20]
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	d101      	bne.n	8015dee <LoRaMacCryptoGetFCntDown+0x46>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015dea:	230a      	movs	r3, #10
 8015dec:	e06b      	b.n	8015ec6 <LoRaMacCryptoGetFCntDown+0x11e>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8015dee:	221b      	movs	r2, #27
 8015df0:	2110      	movs	r1, #16
 8015df2:	187b      	adds	r3, r7, r1
 8015df4:	189e      	adds	r6, r3, r2
 8015df6:	2314      	movs	r3, #20
 8015df8:	187a      	adds	r2, r7, r1
 8015dfa:	18d2      	adds	r2, r2, r3
 8015dfc:	230f      	movs	r3, #15
 8015dfe:	2010      	movs	r0, #16
 8015e00:	4684      	mov	ip, r0
 8015e02:	44bc      	add	ip, r7
 8015e04:	4463      	add	r3, ip
 8015e06:	781b      	ldrb	r3, [r3, #0]
 8015e08:	0011      	movs	r1, r2
 8015e0a:	0018      	movs	r0, r3
 8015e0c:	f7ff fe7c 	bl	8015b08 <GetLastFcntDown>
 8015e10:	0003      	movs	r3, r0
 8015e12:	7033      	strb	r3, [r6, #0]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8015e14:	221b      	movs	r2, #27
 8015e16:	2110      	movs	r1, #16
 8015e18:	187b      	adds	r3, r7, r1
 8015e1a:	189b      	adds	r3, r3, r2
 8015e1c:	781b      	ldrb	r3, [r3, #0]
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	d003      	beq.n	8015e2a <LoRaMacCryptoGetFCntDown+0x82>
    {
        return cryptoStatus;
 8015e22:	187b      	adds	r3, r7, r1
 8015e24:	189b      	adds	r3, r3, r2
 8015e26:	781b      	ldrb	r3, [r3, #0]
 8015e28:	e04d      	b.n	8015ec6 <LoRaMacCryptoGetFCntDown+0x11e>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 8015e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e2c:	3301      	adds	r3, #1
 8015e2e:	d103      	bne.n	8015e38 <LoRaMacCryptoGetFCntDown+0x90>
    {
        *currentDown = frameFcnt;
 8015e30:	697b      	ldr	r3, [r7, #20]
 8015e32:	69ba      	ldr	r2, [r7, #24]
 8015e34:	601a      	str	r2, [r3, #0]
 8015e36:	e020      	b.n	8015e7a <LoRaMacCryptoGetFCntDown+0xd2>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8015e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e3a:	041b      	lsls	r3, r3, #16
 8015e3c:	0c1b      	lsrs	r3, r3, #16
 8015e3e:	69ba      	ldr	r2, [r7, #24]
 8015e40:	1ad3      	subs	r3, r2, r3
 8015e42:	62fb      	str	r3, [r7, #44]	; 0x2c

        if( fCntDiff > 0 )
 8015e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e46:	2b00      	cmp	r3, #0
 8015e48:	dd05      	ble.n	8015e56 <LoRaMacCryptoGetFCntDown+0xae>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8015e4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e4e:	18d2      	adds	r2, r2, r3
 8015e50:	697b      	ldr	r3, [r7, #20]
 8015e52:	601a      	str	r2, [r3, #0]
 8015e54:	e011      	b.n	8015e7a <LoRaMacCryptoGetFCntDown+0xd2>
        }
        else if( fCntDiff == 0 )
 8015e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	d104      	bne.n	8015e66 <LoRaMacCryptoGetFCntDown+0xbe>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8015e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015e5e:	697b      	ldr	r3, [r7, #20]
 8015e60:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8015e62:	2307      	movs	r3, #7
 8015e64:	e02f      	b.n	8015ec6 <LoRaMacCryptoGetFCntDown+0x11e>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8015e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e68:	0c1b      	lsrs	r3, r3, #16
 8015e6a:	041a      	lsls	r2, r3, #16
 8015e6c:	69bb      	ldr	r3, [r7, #24]
 8015e6e:	18d3      	adds	r3, r2, r3
 8015e70:	2280      	movs	r2, #128	; 0x80
 8015e72:	0252      	lsls	r2, r2, #9
 8015e74:	189a      	adds	r2, r3, r2
 8015e76:	697b      	ldr	r3, [r7, #20]
 8015e78:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 8015e7a:	4b15      	ldr	r3, [pc, #84]	; (8015ed0 <LoRaMacCryptoGetFCntDown+0x128>)
 8015e7c:	681b      	ldr	r3, [r3, #0]
 8015e7e:	789b      	ldrb	r3, [r3, #2]
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	d11f      	bne.n	8015ec4 <LoRaMacCryptoGetFCntDown+0x11c>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 8015e84:	697b      	ldr	r3, [r7, #20]
 8015e86:	681b      	ldr	r3, [r3, #0]
 8015e88:	60bb      	str	r3, [r7, #8]
 8015e8a:	2300      	movs	r3, #0
 8015e8c:	60fb      	str	r3, [r7, #12]
 8015e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e90:	603b      	str	r3, [r7, #0]
 8015e92:	2300      	movs	r3, #0
 8015e94:	607b      	str	r3, [r7, #4]
 8015e96:	68ba      	ldr	r2, [r7, #8]
 8015e98:	68fb      	ldr	r3, [r7, #12]
 8015e9a:	6838      	ldr	r0, [r7, #0]
 8015e9c:	6879      	ldr	r1, [r7, #4]
 8015e9e:	1a12      	subs	r2, r2, r0
 8015ea0:	418b      	sbcs	r3, r1
 8015ea2:	210c      	movs	r1, #12
 8015ea4:	2010      	movs	r0, #16
 8015ea6:	4684      	mov	ip, r0
 8015ea8:	44bc      	add	ip, r7
 8015eaa:	4461      	add	r1, ip
 8015eac:	8809      	ldrh	r1, [r1, #0]
 8015eae:	b289      	uxth	r1, r1
 8015eb0:	000c      	movs	r4, r1
 8015eb2:	2100      	movs	r1, #0
 8015eb4:	000d      	movs	r5, r1
 8015eb6:	429d      	cmp	r5, r3
 8015eb8:	dc04      	bgt.n	8015ec4 <LoRaMacCryptoGetFCntDown+0x11c>
 8015eba:	d101      	bne.n	8015ec0 <LoRaMacCryptoGetFCntDown+0x118>
 8015ebc:	4294      	cmp	r4, r2
 8015ebe:	d801      	bhi.n	8015ec4 <LoRaMacCryptoGetFCntDown+0x11c>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 8015ec0:	2308      	movs	r3, #8
 8015ec2:	e000      	b.n	8015ec6 <LoRaMacCryptoGetFCntDown+0x11e>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015ec4:	2300      	movs	r3, #0
}
 8015ec6:	0018      	movs	r0, r3
 8015ec8:	46bd      	mov	sp, r7
 8015eca:	b00d      	add	sp, #52	; 0x34
 8015ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015ece:	46c0      	nop			; (mov r8, r8)
 8015ed0:	20000d18 	.word	0x20000d18

08015ed4 <LoRaMacCryptoSetMulticastReference>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8015ed4:	b580      	push	{r7, lr}
 8015ed6:	b082      	sub	sp, #8
 8015ed8:	af00      	add	r7, sp, #0
 8015eda:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	2b00      	cmp	r3, #0
 8015ee0:	d101      	bne.n	8015ee6 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015ee2:	230a      	movs	r3, #10
 8015ee4:	e006      	b.n	8015ef4 <LoRaMacCryptoSetMulticastReference+0x20>
    }

    multicastList[0].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 8015ee6:	4b05      	ldr	r3, [pc, #20]	; (8015efc <LoRaMacCryptoSetMulticastReference+0x28>)
 8015ee8:	681b      	ldr	r3, [r3, #0]
 8015eea:	331c      	adds	r3, #28
 8015eec:	001a      	movs	r2, r3
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	621a      	str	r2, [r3, #32]
#if ( LORAMAC_MAX_MC_CTX > 1 )
    multicastList[1].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown1;
    multicastList[2].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown2;
    multicastList[3].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown3;
#endif /* LORAMAC_MAX_MC_CTX > 1 */
    return LORAMAC_CRYPTO_SUCCESS;
 8015ef2:	2300      	movs	r3, #0
}
 8015ef4:	0018      	movs	r0, r3
 8015ef6:	46bd      	mov	sp, r7
 8015ef8:	b002      	add	sp, #8
 8015efa:	bd80      	pop	{r7, pc}
 8015efc:	20000d18 	.word	0x20000d18

08015f00 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8015f00:	b580      	push	{r7, lr}
 8015f02:	b082      	sub	sp, #8
 8015f04:	af00      	add	r7, sp, #0
 8015f06:	0002      	movs	r2, r0
 8015f08:	6039      	str	r1, [r7, #0]
 8015f0a:	1dfb      	adds	r3, r7, #7
 8015f0c:	701a      	strb	r2, [r3, #0]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8015f0e:	683a      	ldr	r2, [r7, #0]
 8015f10:	1dfb      	adds	r3, r7, #7
 8015f12:	781b      	ldrb	r3, [r3, #0]
 8015f14:	0011      	movs	r1, r2
 8015f16:	0018      	movs	r0, r3
 8015f18:	f7f7 fd08 	bl	800d92c <SecureElementSetKey>
 8015f1c:	1e03      	subs	r3, r0, #0
 8015f1e:	d001      	beq.n	8015f24 <LoRaMacCryptoSetKey+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015f20:	230f      	movs	r3, #15
 8015f22:	e014      	b.n	8015f4e <LoRaMacCryptoSetKey+0x4e>
    }
    if( keyID == APP_KEY )
 8015f24:	1dfb      	adds	r3, r7, #7
 8015f26:	781b      	ldrb	r3, [r3, #0]
 8015f28:	2b00      	cmp	r3, #0
 8015f2a:	d10f      	bne.n	8015f4c <LoRaMacCryptoSetKey+0x4c>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( keyID ) != LORAMAC_CRYPTO_SUCCESS )
 8015f2c:	1dfb      	adds	r3, r7, #7
 8015f2e:	781b      	ldrb	r3, [r3, #0]
 8015f30:	0018      	movs	r0, r3
 8015f32:	f000 fa79 	bl	8016428 <LoRaMacCryptoDeriveMcRootKey>
 8015f36:	1e03      	subs	r3, r0, #0
 8015f38:	d001      	beq.n	8015f3e <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015f3a:	230f      	movs	r3, #15
 8015f3c:	e007      	b.n	8015f4e <LoRaMacCryptoSetKey+0x4e>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8015f3e:	2004      	movs	r0, #4
 8015f40:	f000 faa6 	bl	8016490 <LoRaMacCryptoDeriveMcKEKey>
 8015f44:	1e03      	subs	r3, r0, #0
 8015f46:	d001      	beq.n	8015f4c <LoRaMacCryptoSetKey+0x4c>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015f48:	230f      	movs	r3, #15
 8015f4a:	e000      	b.n	8015f4e <LoRaMacCryptoSetKey+0x4e>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8015f4c:	2300      	movs	r3, #0
}
 8015f4e:	0018      	movs	r0, r3
 8015f50:	46bd      	mov	sp, r7
 8015f52:	b002      	add	sp, #8
 8015f54:	bd80      	pop	{r7, pc}
	...

08015f58 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8015f58:	b580      	push	{r7, lr}
 8015f5a:	b086      	sub	sp, #24
 8015f5c:	af02      	add	r7, sp, #8
 8015f5e:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	2b00      	cmp	r3, #0
 8015f64:	d101      	bne.n	8015f6a <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015f66:	230a      	movs	r3, #10
 8015f68:	e039      	b.n	8015fde <LoRaMacCryptoPrepareJoinRequest+0x86>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8015f6a:	230f      	movs	r3, #15
 8015f6c:	18fb      	adds	r3, r7, r3
 8015f6e:	2201      	movs	r2, #1
 8015f70:	701a      	strb	r2, [r3, #0]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 8015f72:	2300      	movs	r3, #0
 8015f74:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 8015f76:	2308      	movs	r3, #8
 8015f78:	18fb      	adds	r3, r7, r3
 8015f7a:	0018      	movs	r0, r3
 8015f7c:	f7f7 ff00 	bl	800dd80 <SecureElementRandomNumber>
    CryptoCtx.NvmCtx->DevNonce = devNonce;
 8015f80:	68ba      	ldr	r2, [r7, #8]
 8015f82:	4b19      	ldr	r3, [pc, #100]	; (8015fe8 <LoRaMacCryptoPrepareJoinRequest+0x90>)
 8015f84:	681b      	ldr	r3, [r3, #0]
 8015f86:	b292      	uxth	r2, r2
 8015f88:	809a      	strh	r2, [r3, #4]
#else
    CryptoCtx.NvmCtx->DevNonce++;
#endif
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8015f8a:	4b17      	ldr	r3, [pc, #92]	; (8015fe8 <LoRaMacCryptoPrepareJoinRequest+0x90>)
 8015f8c:	685b      	ldr	r3, [r3, #4]
 8015f8e:	4798      	blx	r3
    macMsg->DevNonce = CryptoCtx.NvmCtx->DevNonce;
 8015f90:	4b15      	ldr	r3, [pc, #84]	; (8015fe8 <LoRaMacCryptoPrepareJoinRequest+0x90>)
 8015f92:	681b      	ldr	r3, [r3, #0]
 8015f94:	889a      	ldrh	r2, [r3, #4]
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	0018      	movs	r0, r3
 8015f9e:	f000 fca1 	bl	80168e4 <LoRaMacSerializerJoinRequest>
 8015fa2:	1e03      	subs	r3, r0, #0
 8015fa4:	d001      	beq.n	8015faa <LoRaMacCryptoPrepareJoinRequest+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8015fa6:	2311      	movs	r3, #17
 8015fa8:	e019      	b.n	8015fde <LoRaMacCryptoPrepareJoinRequest+0x86>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8015faa:	687b      	ldr	r3, [r7, #4]
 8015fac:	6819      	ldr	r1, [r3, #0]
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	3318      	adds	r3, #24
 8015fb2:	220f      	movs	r2, #15
 8015fb4:	18ba      	adds	r2, r7, r2
 8015fb6:	7812      	ldrb	r2, [r2, #0]
 8015fb8:	9300      	str	r3, [sp, #0]
 8015fba:	0013      	movs	r3, r2
 8015fbc:	2213      	movs	r2, #19
 8015fbe:	2000      	movs	r0, #0
 8015fc0:	f7f7 fd2e 	bl	800da20 <SecureElementComputeAesCmac>
 8015fc4:	1e03      	subs	r3, r0, #0
 8015fc6:	d001      	beq.n	8015fcc <LoRaMacCryptoPrepareJoinRequest+0x74>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015fc8:	230f      	movs	r3, #15
 8015fca:	e008      	b.n	8015fde <LoRaMacCryptoPrepareJoinRequest+0x86>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	0018      	movs	r0, r3
 8015fd0:	f000 fc88 	bl	80168e4 <LoRaMacSerializerJoinRequest>
 8015fd4:	1e03      	subs	r3, r0, #0
 8015fd6:	d001      	beq.n	8015fdc <LoRaMacCryptoPrepareJoinRequest+0x84>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8015fd8:	2311      	movs	r3, #17
 8015fda:	e000      	b.n	8015fde <LoRaMacCryptoPrepareJoinRequest+0x86>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015fdc:	2300      	movs	r3, #0
}
 8015fde:	0018      	movs	r0, r3
 8015fe0:	46bd      	mov	sp, r7
 8015fe2:	b004      	add	sp, #16
 8015fe4:	bd80      	pop	{r7, pc}
 8015fe6:	46c0      	nop			; (mov r8, r8)
 8015fe8:	20000d18 	.word	0x20000d18

08015fec <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8015fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015fee:	b095      	sub	sp, #84	; 0x54
 8015ff0:	af04      	add	r7, sp, #16
 8015ff2:	60b9      	str	r1, [r7, #8]
 8015ff4:	607a      	str	r2, [r7, #4]
 8015ff6:	230f      	movs	r3, #15
 8015ff8:	18fb      	adds	r3, r7, r3
 8015ffa:	1c02      	adds	r2, r0, #0
 8015ffc:	701a      	strb	r2, [r3, #0]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8015ffe:	687b      	ldr	r3, [r7, #4]
 8016000:	2b00      	cmp	r3, #0
 8016002:	d002      	beq.n	801600a <LoRaMacCryptoHandleJoinAccept+0x1e>
 8016004:	68bb      	ldr	r3, [r7, #8]
 8016006:	2b00      	cmp	r3, #0
 8016008:	d101      	bne.n	801600e <LoRaMacCryptoHandleJoinAccept+0x22>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801600a:	230a      	movs	r3, #10
 801600c:	e0a7      	b.n	801615e <LoRaMacCryptoHandleJoinAccept+0x172>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801600e:	233f      	movs	r3, #63	; 0x3f
 8016010:	18fb      	adds	r3, r7, r3
 8016012:	2213      	movs	r2, #19
 8016014:	701a      	strb	r2, [r3, #0]
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8016016:	2614      	movs	r6, #20
 8016018:	19bb      	adds	r3, r7, r6
 801601a:	2200      	movs	r2, #0
 801601c:	601a      	str	r2, [r3, #0]
 801601e:	3304      	adds	r3, #4
 8016020:	221d      	movs	r2, #29
 8016022:	2100      	movs	r1, #0
 8016024:	0018      	movs	r0, r3
 8016026:	f007 ffc4 	bl	801dfb2 <memset>
    uint8_t versionMinor         = 0;
 801602a:	2313      	movs	r3, #19
 801602c:	18fb      	adds	r3, r7, r3
 801602e:	2200      	movs	r2, #0
 8016030:	701a      	strb	r2, [r3, #0]
    uint8_t* nonce               = ( uint8_t* )&CryptoCtx.NvmCtx->DevNonce;
 8016032:	4b4d      	ldr	r3, [pc, #308]	; (8016168 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 8016034:	681b      	ldr	r3, [r3, #0]
 8016036:	3304      	adds	r3, #4
 8016038:	63bb      	str	r3, [r7, #56]	; 0x38
            nonce = ( uint8_t* )&CryptoCtx.NvmCtx->FCntList.RJcount1;
        }
    }
#endif

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, ( int16_t )*nonce, macMsg->Buffer,
 801603a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801603c:	781b      	ldrb	r3, [r3, #0]
 801603e:	b29c      	uxth	r4, r3
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	681d      	ldr	r5, [r3, #0]
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	791b      	ldrb	r3, [r3, #4]
 8016048:	68b9      	ldr	r1, [r7, #8]
 801604a:	200f      	movs	r0, #15
 801604c:	183a      	adds	r2, r7, r0
 801604e:	7810      	ldrb	r0, [r2, #0]
 8016050:	2213      	movs	r2, #19
 8016052:	18ba      	adds	r2, r7, r2
 8016054:	9202      	str	r2, [sp, #8]
 8016056:	19ba      	adds	r2, r7, r6
 8016058:	9201      	str	r2, [sp, #4]
 801605a:	9300      	str	r3, [sp, #0]
 801605c:	002b      	movs	r3, r5
 801605e:	0022      	movs	r2, r4
 8016060:	f7f7 fe07 	bl	800dc72 <SecureElementProcessJoinAccept>
 8016064:	1e03      	subs	r3, r0, #0
 8016066:	d001      	beq.n	801606c <LoRaMacCryptoHandleJoinAccept+0x80>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016068:	230f      	movs	r3, #15
 801606a:	e078      	b.n	801615e <LoRaMacCryptoHandleJoinAccept+0x172>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	6818      	ldr	r0, [r3, #0]
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	791b      	ldrb	r3, [r3, #4]
 8016074:	b29a      	uxth	r2, r3
 8016076:	2314      	movs	r3, #20
 8016078:	18fb      	adds	r3, r7, r3
 801607a:	0019      	movs	r1, r3
 801607c:	f003 fa88 	bl	8019590 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	0018      	movs	r0, r3
 8016084:	f000 fa2e 	bl	80164e4 <LoRaMacParserJoinAccept>
 8016088:	1e03      	subs	r3, r0, #0
 801608a:	d001      	beq.n	8016090 <LoRaMacCryptoHandleJoinAccept+0xa4>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 801608c:	2310      	movs	r3, #16
 801608e:	e066      	b.n	801615e <LoRaMacCryptoHandleJoinAccept+0x172>
            return retval;
        }
    }
#else
    // Operating in LoRaWAN 1.0.x mode
    retval = LoRaMacCryptoDeriveMcRootKey( APP_KEY );
 8016090:	253f      	movs	r5, #63	; 0x3f
 8016092:	197c      	adds	r4, r7, r5
 8016094:	2000      	movs	r0, #0
 8016096:	f000 f9c7 	bl	8016428 <LoRaMacCryptoDeriveMcRootKey>
 801609a:	0003      	movs	r3, r0
 801609c:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801609e:	002a      	movs	r2, r5
 80160a0:	18bb      	adds	r3, r7, r2
 80160a2:	781b      	ldrb	r3, [r3, #0]
 80160a4:	2b00      	cmp	r3, #0
 80160a6:	d002      	beq.n	80160ae <LoRaMacCryptoHandleJoinAccept+0xc2>
    {
        return retval;
 80160a8:	18bb      	adds	r3, r7, r2
 80160aa:	781b      	ldrb	r3, [r3, #0]
 80160ac:	e057      	b.n	801615e <LoRaMacCryptoHandleJoinAccept+0x172>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 80160ae:	253f      	movs	r5, #63	; 0x3f
 80160b0:	197c      	adds	r4, r7, r5
 80160b2:	2004      	movs	r0, #4
 80160b4:	f000 f9ec 	bl	8016490 <LoRaMacCryptoDeriveMcKEKey>
 80160b8:	0003      	movs	r3, r0
 80160ba:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80160bc:	002a      	movs	r2, r5
 80160be:	18bb      	adds	r3, r7, r2
 80160c0:	781b      	ldrb	r3, [r3, #0]
 80160c2:	2b00      	cmp	r3, #0
 80160c4:	d002      	beq.n	80160cc <LoRaMacCryptoHandleJoinAccept+0xe0>
    {
        return retval;
 80160c6:	18bb      	adds	r3, r7, r2
 80160c8:	781b      	ldrb	r3, [r3, #0]
 80160ca:	e048      	b.n	801615e <LoRaMacCryptoHandleJoinAccept+0x172>
    }

    retval = DeriveSessionKey10x( APP_S_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* )&CryptoCtx.NvmCtx->DevNonce );
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	1d99      	adds	r1, r3, #6
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	3309      	adds	r3, #9
 80160d4:	001a      	movs	r2, r3
 80160d6:	4b24      	ldr	r3, [pc, #144]	; (8016168 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 80160d8:	681b      	ldr	r3, [r3, #0]
 80160da:	3304      	adds	r3, #4
 80160dc:	253f      	movs	r5, #63	; 0x3f
 80160de:	197c      	adds	r4, r7, r5
 80160e0:	2003      	movs	r0, #3
 80160e2:	f7ff fcb1 	bl	8015a48 <DeriveSessionKey10x>
 80160e6:	0003      	movs	r3, r0
 80160e8:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80160ea:	197b      	adds	r3, r7, r5
 80160ec:	781b      	ldrb	r3, [r3, #0]
 80160ee:	2b00      	cmp	r3, #0
 80160f0:	d002      	beq.n	80160f8 <LoRaMacCryptoHandleJoinAccept+0x10c>
    {
        return retval;
 80160f2:	197b      	adds	r3, r7, r5
 80160f4:	781b      	ldrb	r3, [r3, #0]
 80160f6:	e032      	b.n	801615e <LoRaMacCryptoHandleJoinAccept+0x172>
    }
    retval = DeriveSessionKey10x( NWK_S_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* )&CryptoCtx.NvmCtx->DevNonce );
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	1d99      	adds	r1, r3, #6
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	3309      	adds	r3, #9
 8016100:	001a      	movs	r2, r3
 8016102:	4b19      	ldr	r3, [pc, #100]	; (8016168 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 8016104:	681b      	ldr	r3, [r3, #0]
 8016106:	3304      	adds	r3, #4
 8016108:	253f      	movs	r5, #63	; 0x3f
 801610a:	197c      	adds	r4, r7, r5
 801610c:	2002      	movs	r0, #2
 801610e:	f7ff fc9b 	bl	8015a48 <DeriveSessionKey10x>
 8016112:	0003      	movs	r3, r0
 8016114:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016116:	197b      	adds	r3, r7, r5
 8016118:	781b      	ldrb	r3, [r3, #0]
 801611a:	2b00      	cmp	r3, #0
 801611c:	d002      	beq.n	8016124 <LoRaMacCryptoHandleJoinAccept+0x138>
    {
        return retval;
 801611e:	197b      	adds	r3, r7, r5
 8016120:	781b      	ldrb	r3, [r3, #0]
 8016122:	e01c      	b.n	801615e <LoRaMacCryptoHandleJoinAccept+0x172>
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO */

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = versionMinor;
 8016124:	4b10      	ldr	r3, [pc, #64]	; (8016168 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 8016126:	681b      	ldr	r3, [r3, #0]
 8016128:	2213      	movs	r2, #19
 801612a:	18ba      	adds	r2, r7, r2
 801612c:	7812      	ldrb	r2, [r2, #0]
 801612e:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    CryptoCtx.RJcount0 = 0;
#endif
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 8016130:	4b0d      	ldr	r3, [pc, #52]	; (8016168 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 8016132:	681b      	ldr	r3, [r3, #0]
 8016134:	2200      	movs	r2, #0
 8016136:	60da      	str	r2, [r3, #12]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8016138:	4b0b      	ldr	r3, [pc, #44]	; (8016168 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 801613a:	681b      	ldr	r3, [r3, #0]
 801613c:	2201      	movs	r2, #1
 801613e:	4252      	negs	r2, r2
 8016140:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8016142:	4b09      	ldr	r3, [pc, #36]	; (8016168 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 8016144:	681b      	ldr	r3, [r3, #0]
 8016146:	2201      	movs	r2, #1
 8016148:	4252      	negs	r2, r2
 801614a:	611a      	str	r2, [r3, #16]
    CryptoCtx.NvmCtx->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 801614c:	4b06      	ldr	r3, [pc, #24]	; (8016168 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 801614e:	681b      	ldr	r3, [r3, #0]
 8016150:	2201      	movs	r2, #1
 8016152:	4252      	negs	r2, r2
 8016154:	615a      	str	r2, [r3, #20]

    CryptoCtx.EventCryptoNvmCtxChanged( );
 8016156:	4b04      	ldr	r3, [pc, #16]	; (8016168 <LoRaMacCryptoHandleJoinAccept+0x17c>)
 8016158:	685b      	ldr	r3, [r3, #4]
 801615a:	4798      	blx	r3

    return LORAMAC_CRYPTO_SUCCESS;
 801615c:	2300      	movs	r3, #0
}
 801615e:	0018      	movs	r0, r3
 8016160:	46bd      	mov	sp, r7
 8016162:	b011      	add	sp, #68	; 0x44
 8016164:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016166:	46c0      	nop			; (mov r8, r8)
 8016168:	20000d18 	.word	0x20000d18

0801616c <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 801616c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801616e:	b08b      	sub	sp, #44	; 0x2c
 8016170:	af04      	add	r7, sp, #16
 8016172:	60f8      	str	r0, [r7, #12]
 8016174:	0008      	movs	r0, r1
 8016176:	0011      	movs	r1, r2
 8016178:	607b      	str	r3, [r7, #4]
 801617a:	230b      	movs	r3, #11
 801617c:	18fb      	adds	r3, r7, r3
 801617e:	1c02      	adds	r2, r0, #0
 8016180:	701a      	strb	r2, [r3, #0]
 8016182:	230a      	movs	r3, #10
 8016184:	18fb      	adds	r3, r7, r3
 8016186:	1c0a      	adds	r2, r1, #0
 8016188:	701a      	strb	r2, [r3, #0]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801618a:	2316      	movs	r3, #22
 801618c:	18fb      	adds	r3, r7, r3
 801618e:	2213      	movs	r2, #19
 8016190:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8016192:	2317      	movs	r3, #23
 8016194:	18fb      	adds	r3, r7, r3
 8016196:	2203      	movs	r2, #3
 8016198:	701a      	strb	r2, [r3, #0]

    if( macMsg == NULL )
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	2b00      	cmp	r3, #0
 801619e:	d101      	bne.n	80161a4 <LoRaMacCryptoSecureMessage+0x38>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80161a0:	230a      	movs	r3, #10
 80161a2:	e072      	b.n	801628a <LoRaMacCryptoSecureMessage+0x11e>
    }

    if( fCntUp < CryptoCtx.NvmCtx->FCntList.FCntUp )
 80161a4:	4b3b      	ldr	r3, [pc, #236]	; (8016294 <LoRaMacCryptoSecureMessage+0x128>)
 80161a6:	681b      	ldr	r3, [r3, #0]
 80161a8:	68db      	ldr	r3, [r3, #12]
 80161aa:	68fa      	ldr	r2, [r7, #12]
 80161ac:	429a      	cmp	r2, r3
 80161ae:	d201      	bcs.n	80161b4 <LoRaMacCryptoSecureMessage+0x48>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 80161b0:	2306      	movs	r3, #6
 80161b2:	e06a      	b.n	801628a <LoRaMacCryptoSecureMessage+0x11e>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	2220      	movs	r2, #32
 80161b8:	5c9b      	ldrb	r3, [r3, r2]
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	d103      	bne.n	80161c6 <LoRaMacCryptoSecureMessage+0x5a>
    {
        // Use network session key
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 80161be:	2317      	movs	r3, #23
 80161c0:	18fb      	adds	r3, r7, r3
 80161c2:	2202      	movs	r2, #2
 80161c4:	701a      	strb	r2, [r3, #0]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    if( fCntUp > CryptoCtx.NvmCtx->FCntList.FCntUp )
 80161c6:	4b33      	ldr	r3, [pc, #204]	; (8016294 <LoRaMacCryptoSecureMessage+0x128>)
 80161c8:	681b      	ldr	r3, [r3, #0]
 80161ca:	68db      	ldr	r3, [r3, #12]
 80161cc:	68fa      	ldr	r2, [r7, #12]
 80161ce:	429a      	cmp	r2, r3
 80161d0:	d91c      	bls.n	801620c <LoRaMacCryptoSecureMessage+0xa0>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 80161d2:	687b      	ldr	r3, [r7, #4]
 80161d4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	2228      	movs	r2, #40	; 0x28
 80161da:	5c9b      	ldrb	r3, [r3, r2]
 80161dc:	b219      	sxth	r1, r3
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	689d      	ldr	r5, [r3, #8]
 80161e2:	2616      	movs	r6, #22
 80161e4:	19bc      	adds	r4, r7, r6
 80161e6:	2317      	movs	r3, #23
 80161e8:	18fb      	adds	r3, r7, r3
 80161ea:	781a      	ldrb	r2, [r3, #0]
 80161ec:	68fb      	ldr	r3, [r7, #12]
 80161ee:	9301      	str	r3, [sp, #4]
 80161f0:	2300      	movs	r3, #0
 80161f2:	9300      	str	r3, [sp, #0]
 80161f4:	002b      	movs	r3, r5
 80161f6:	f7ff f9c7 	bl	8015588 <PayloadEncrypt>
 80161fa:	0003      	movs	r3, r0
 80161fc:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80161fe:	19bb      	adds	r3, r7, r6
 8016200:	781b      	ldrb	r3, [r3, #0]
 8016202:	2b00      	cmp	r3, #0
 8016204:	d002      	beq.n	801620c <LoRaMacCryptoSecureMessage+0xa0>
        {
            return retval;
 8016206:	19bb      	adds	r3, r7, r6
 8016208:	781b      	ldrb	r3, [r3, #0]
 801620a:	e03e      	b.n	801628a <LoRaMacCryptoSecureMessage+0x11e>
        }
#endif
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	0018      	movs	r0, r3
 8016210:	f000 fc03 	bl	8016a1a <LoRaMacSerializerData>
 8016214:	1e03      	subs	r3, r0, #0
 8016216:	d001      	beq.n	801621c <LoRaMacCryptoSecureMessage+0xb0>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016218:	2311      	movs	r3, #17
 801621a:	e036      	b.n	801628a <LoRaMacCryptoSecureMessage+0x11e>
#endif
    {        // Use network session key
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 801621c:	2117      	movs	r1, #23
 801621e:	187b      	adds	r3, r7, r1
 8016220:	2202      	movs	r2, #2
 8016222:	701a      	strb	r2, [r3, #0]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	6818      	ldr	r0, [r3, #0]
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	791b      	ldrb	r3, [r3, #4]
 801622c:	b29b      	uxth	r3, r3
 801622e:	3b04      	subs	r3, #4
 8016230:	b29d      	uxth	r5, r3
 8016232:	687b      	ldr	r3, [r7, #4]
 8016234:	689b      	ldr	r3, [r3, #8]
 8016236:	687a      	ldr	r2, [r7, #4]
 8016238:	322c      	adds	r2, #44	; 0x2c
 801623a:	2616      	movs	r6, #22
 801623c:	19bc      	adds	r4, r7, r6
 801623e:	1879      	adds	r1, r7, r1
 8016240:	7809      	ldrb	r1, [r1, #0]
 8016242:	9203      	str	r2, [sp, #12]
 8016244:	68fa      	ldr	r2, [r7, #12]
 8016246:	9202      	str	r2, [sp, #8]
 8016248:	9301      	str	r3, [sp, #4]
 801624a:	2300      	movs	r3, #0
 801624c:	9300      	str	r3, [sp, #0]
 801624e:	2300      	movs	r3, #0
 8016250:	000a      	movs	r2, r1
 8016252:	0029      	movs	r1, r5
 8016254:	f7ff facc 	bl	80157f0 <ComputeCmacB0>
 8016258:	0003      	movs	r3, r0
 801625a:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801625c:	19bb      	adds	r3, r7, r6
 801625e:	781b      	ldrb	r3, [r3, #0]
 8016260:	2b00      	cmp	r3, #0
 8016262:	d002      	beq.n	801626a <LoRaMacCryptoSecureMessage+0xfe>
        {
            return retval;
 8016264:	19bb      	adds	r3, r7, r6
 8016266:	781b      	ldrb	r3, [r3, #0]
 8016268:	e00f      	b.n	801628a <LoRaMacCryptoSecureMessage+0x11e>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	0018      	movs	r0, r3
 801626e:	f000 fbd4 	bl	8016a1a <LoRaMacSerializerData>
 8016272:	1e03      	subs	r3, r0, #0
 8016274:	d001      	beq.n	801627a <LoRaMacCryptoSecureMessage+0x10e>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016276:	2311      	movs	r3, #17
 8016278:	e007      	b.n	801628a <LoRaMacCryptoSecureMessage+0x11e>
    }

    CryptoCtx.NvmCtx->FCntList.FCntUp = fCntUp;
 801627a:	4b06      	ldr	r3, [pc, #24]	; (8016294 <LoRaMacCryptoSecureMessage+0x128>)
 801627c:	681b      	ldr	r3, [r3, #0]
 801627e:	68fa      	ldr	r2, [r7, #12]
 8016280:	60da      	str	r2, [r3, #12]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8016282:	4b04      	ldr	r3, [pc, #16]	; (8016294 <LoRaMacCryptoSecureMessage+0x128>)
 8016284:	685b      	ldr	r3, [r3, #4]
 8016286:	4798      	blx	r3

    return LORAMAC_CRYPTO_SUCCESS;
 8016288:	2300      	movs	r3, #0
}
 801628a:	0018      	movs	r0, r3
 801628c:	46bd      	mov	sp, r7
 801628e:	b007      	add	sp, #28
 8016290:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016292:	46c0      	nop			; (mov r8, r8)
 8016294:	20000d18 	.word	0x20000d18

08016298 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8016298:	b5f0      	push	{r4, r5, r6, r7, lr}
 801629a:	b08b      	sub	sp, #44	; 0x2c
 801629c:	af04      	add	r7, sp, #16
 801629e:	60b9      	str	r1, [r7, #8]
 80162a0:	0011      	movs	r1, r2
 80162a2:	607b      	str	r3, [r7, #4]
 80162a4:	230f      	movs	r3, #15
 80162a6:	18fb      	adds	r3, r7, r3
 80162a8:	1c02      	adds	r2, r0, #0
 80162aa:	701a      	strb	r2, [r3, #0]
 80162ac:	230e      	movs	r3, #14
 80162ae:	18fb      	adds	r3, r7, r3
 80162b0:	1c0a      	adds	r2, r1, #0
 80162b2:	701a      	strb	r2, [r3, #0]
    if( macMsg == 0 )
 80162b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	d101      	bne.n	80162be <LoRaMacCryptoUnsecureMessage+0x26>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80162ba:	230a      	movs	r3, #10
 80162bc:	e0ae      	b.n	801641c <LoRaMacCryptoUnsecureMessage+0x184>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 80162be:	687a      	ldr	r2, [r7, #4]
 80162c0:	230e      	movs	r3, #14
 80162c2:	18fb      	adds	r3, r7, r3
 80162c4:	781b      	ldrb	r3, [r3, #0]
 80162c6:	0011      	movs	r1, r2
 80162c8:	0018      	movs	r0, r3
 80162ca:	f7ff fc69 	bl	8015ba0 <CheckFCntDown>
 80162ce:	0003      	movs	r3, r0
 80162d0:	001a      	movs	r2, r3
 80162d2:	2301      	movs	r3, #1
 80162d4:	4053      	eors	r3, r2
 80162d6:	b2db      	uxtb	r3, r3
 80162d8:	2b00      	cmp	r3, #0
 80162da:	d001      	beq.n	80162e0 <LoRaMacCryptoUnsecureMessage+0x48>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 80162dc:	2306      	movs	r3, #6
 80162de:	e09d      	b.n	801641c <LoRaMacCryptoUnsecureMessage+0x184>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80162e0:	2315      	movs	r3, #21
 80162e2:	18fb      	adds	r3, r7, r3
 80162e4:	2213      	movs	r2, #19
 80162e6:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 80162e8:	2317      	movs	r3, #23
 80162ea:	18fb      	adds	r3, r7, r3
 80162ec:	2203      	movs	r2, #3
 80162ee:	701a      	strb	r2, [r3, #0]

#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 80162f0:	2314      	movs	r3, #20
 80162f2:	18fb      	adds	r3, r7, r3
 80162f4:	2202      	movs	r2, #2
 80162f6:	701a      	strb	r2, [r3, #0]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80162f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162fa:	0018      	movs	r0, r3
 80162fc:	f000 f9e2 	bl	80166c4 <LoRaMacParserData>
 8016300:	1e03      	subs	r3, r0, #0
 8016302:	d001      	beq.n	8016308 <LoRaMacCryptoUnsecureMessage+0x70>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8016304:	2310      	movs	r3, #16
 8016306:	e089      	b.n	801641c <LoRaMacCryptoUnsecureMessage+0x184>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8016308:	2515      	movs	r5, #21
 801630a:	197c      	adds	r4, r7, r5
 801630c:	2310      	movs	r3, #16
 801630e:	18fa      	adds	r2, r7, r3
 8016310:	230f      	movs	r3, #15
 8016312:	18fb      	adds	r3, r7, r3
 8016314:	781b      	ldrb	r3, [r3, #0]
 8016316:	0011      	movs	r1, r2
 8016318:	0018      	movs	r0, r3
 801631a:	f7ff fb63 	bl	80159e4 <GetKeyAddrItem>
 801631e:	0003      	movs	r3, r0
 8016320:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016322:	197b      	adds	r3, r7, r5
 8016324:	781b      	ldrb	r3, [r3, #0]
 8016326:	2b00      	cmp	r3, #0
 8016328:	d002      	beq.n	8016330 <LoRaMacCryptoUnsecureMessage+0x98>
    {
        return retval;
 801632a:	197b      	adds	r3, r7, r5
 801632c:	781b      	ldrb	r3, [r3, #0]
 801632e:	e075      	b.n	801641c <LoRaMacCryptoUnsecureMessage+0x184>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8016330:	693a      	ldr	r2, [r7, #16]
 8016332:	2317      	movs	r3, #23
 8016334:	18fb      	adds	r3, r7, r3
 8016336:	7852      	ldrb	r2, [r2, #1]
 8016338:	701a      	strb	r2, [r3, #0]
    micComputationKeyID = curItem->NwkSkey;
 801633a:	693a      	ldr	r2, [r7, #16]
 801633c:	2314      	movs	r3, #20
 801633e:	18fb      	adds	r3, r7, r3
 8016340:	7892      	ldrb	r2, [r2, #2]
 8016342:	701a      	strb	r2, [r3, #0]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8016344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016346:	689b      	ldr	r3, [r3, #8]
 8016348:	68ba      	ldr	r2, [r7, #8]
 801634a:	429a      	cmp	r2, r3
 801634c:	d001      	beq.n	8016352 <LoRaMacCryptoUnsecureMessage+0xba>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 801634e:	2302      	movs	r3, #2
 8016350:	e064      	b.n	801641c <LoRaMacCryptoUnsecureMessage+0x184>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8016352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016354:	7b1b      	ldrb	r3, [r3, #12]
 8016356:	069b      	lsls	r3, r3, #26
 8016358:	0fdb      	lsrs	r3, r3, #31
 801635a:	b2db      	uxtb	r3, r3
 801635c:	001a      	movs	r2, r3
 801635e:	2016      	movs	r0, #22
 8016360:	183b      	adds	r3, r7, r0
 8016362:	1e51      	subs	r1, r2, #1
 8016364:	418a      	sbcs	r2, r1
 8016366:	701a      	strb	r2, [r3, #0]
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 8016368:	4b2e      	ldr	r3, [pc, #184]	; (8016424 <LoRaMacCryptoUnsecureMessage+0x18c>)
 801636a:	681b      	ldr	r3, [r3, #0]
 801636c:	789b      	ldrb	r3, [r3, #2]
 801636e:	2b00      	cmp	r3, #0
 8016370:	d102      	bne.n	8016378 <LoRaMacCryptoUnsecureMessage+0xe0>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8016372:	183b      	adds	r3, r7, r0
 8016374:	2200      	movs	r2, #0
 8016376:	701a      	strb	r2, [r3, #0]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8016378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801637a:	6818      	ldr	r0, [r3, #0]
 801637c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801637e:	791b      	ldrb	r3, [r3, #4]
 8016380:	b29b      	uxth	r3, r3
 8016382:	3b04      	subs	r3, #4
 8016384:	b299      	uxth	r1, r3
 8016386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801638a:	2615      	movs	r6, #21
 801638c:	19bc      	adds	r4, r7, r6
 801638e:	2216      	movs	r2, #22
 8016390:	18ba      	adds	r2, r7, r2
 8016392:	7815      	ldrb	r5, [r2, #0]
 8016394:	2214      	movs	r2, #20
 8016396:	18ba      	adds	r2, r7, r2
 8016398:	7812      	ldrb	r2, [r2, #0]
 801639a:	9303      	str	r3, [sp, #12]
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	9302      	str	r3, [sp, #8]
 80163a0:	68bb      	ldr	r3, [r7, #8]
 80163a2:	9301      	str	r3, [sp, #4]
 80163a4:	2301      	movs	r3, #1
 80163a6:	9300      	str	r3, [sp, #0]
 80163a8:	002b      	movs	r3, r5
 80163aa:	f7ff fa69 	bl	8015880 <VerifyCmacB0>
 80163ae:	0003      	movs	r3, r0
 80163b0:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80163b2:	19bb      	adds	r3, r7, r6
 80163b4:	781b      	ldrb	r3, [r3, #0]
 80163b6:	2b00      	cmp	r3, #0
 80163b8:	d002      	beq.n	80163c0 <LoRaMacCryptoUnsecureMessage+0x128>
    {
        return retval;
 80163ba:	19bb      	adds	r3, r7, r6
 80163bc:	781b      	ldrb	r3, [r3, #0]
 80163be:	e02d      	b.n	801641c <LoRaMacCryptoUnsecureMessage+0x184>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 80163c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163c2:	2220      	movs	r2, #32
 80163c4:	5c9b      	ldrb	r3, [r3, r2]
 80163c6:	2b00      	cmp	r3, #0
 80163c8:	d103      	bne.n	80163d2 <LoRaMacCryptoUnsecureMessage+0x13a>
    {
        // Use network session encryption key
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 80163ca:	2317      	movs	r3, #23
 80163cc:	18fb      	adds	r3, r7, r3
 80163ce:	2202      	movs	r2, #2
 80163d0:	701a      	strb	r2, [r3, #0]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 80163d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163d4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80163d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163d8:	2228      	movs	r2, #40	; 0x28
 80163da:	5c9b      	ldrb	r3, [r3, r2]
 80163dc:	b219      	sxth	r1, r3
 80163de:	2615      	movs	r6, #21
 80163e0:	19bc      	adds	r4, r7, r6
 80163e2:	68bd      	ldr	r5, [r7, #8]
 80163e4:	2317      	movs	r3, #23
 80163e6:	18fb      	adds	r3, r7, r3
 80163e8:	781a      	ldrb	r2, [r3, #0]
 80163ea:	687b      	ldr	r3, [r7, #4]
 80163ec:	9301      	str	r3, [sp, #4]
 80163ee:	2301      	movs	r3, #1
 80163f0:	9300      	str	r3, [sp, #0]
 80163f2:	002b      	movs	r3, r5
 80163f4:	f7ff f8c8 	bl	8015588 <PayloadEncrypt>
 80163f8:	0003      	movs	r3, r0
 80163fa:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80163fc:	19bb      	adds	r3, r7, r6
 80163fe:	781b      	ldrb	r3, [r3, #0]
 8016400:	2b00      	cmp	r3, #0
 8016402:	d002      	beq.n	801640a <LoRaMacCryptoUnsecureMessage+0x172>
    {
        return retval;
 8016404:	19bb      	adds	r3, r7, r6
 8016406:	781b      	ldrb	r3, [r3, #0]
 8016408:	e008      	b.n	801641c <LoRaMacCryptoUnsecureMessage+0x184>
            }
        } 
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 801640a:	687a      	ldr	r2, [r7, #4]
 801640c:	230e      	movs	r3, #14
 801640e:	18fb      	adds	r3, r7, r3
 8016410:	781b      	ldrb	r3, [r3, #0]
 8016412:	0011      	movs	r1, r2
 8016414:	0018      	movs	r0, r3
 8016416:	f7ff fbe7 	bl	8015be8 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 801641a:	2300      	movs	r3, #0
}
 801641c:	0018      	movs	r0, r3
 801641e:	46bd      	mov	sp, r7
 8016420:	b007      	add	sp, #28
 8016422:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016424:	20000d18 	.word	0x20000d18

08016428 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( KeyIdentifier_t keyID )
{
 8016428:	b590      	push	{r4, r7, lr}
 801642a:	b087      	sub	sp, #28
 801642c:	af00      	add	r7, sp, #0
 801642e:	0002      	movs	r2, r0
 8016430:	1dfb      	adds	r3, r7, #7
 8016432:	701a      	strb	r2, [r3, #0]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 8016434:	1dfb      	adds	r3, r7, #7
 8016436:	781b      	ldrb	r3, [r3, #0]
 8016438:	2b00      	cmp	r3, #0
 801643a:	d001      	beq.n	8016440 <LoRaMacCryptoDeriveMcRootKey+0x18>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 801643c:	230b      	movs	r3, #11
 801643e:	e020      	b.n	8016482 <LoRaMacCryptoDeriveMcRootKey+0x5a>
    }
    uint8_t compBase[16] = { 0 };
 8016440:	2408      	movs	r4, #8
 8016442:	193b      	adds	r3, r7, r4
 8016444:	2200      	movs	r2, #0
 8016446:	601a      	str	r2, [r3, #0]
 8016448:	3304      	adds	r3, #4
 801644a:	220c      	movs	r2, #12
 801644c:	2100      	movs	r1, #0
 801644e:	0018      	movs	r0, r3
 8016450:	f007 fdaf 	bl	801dfb2 <memset>

    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 1 )
 8016454:	4b0d      	ldr	r3, [pc, #52]	; (801648c <LoRaMacCryptoDeriveMcRootKey+0x64>)
 8016456:	681b      	ldr	r3, [r3, #0]
 8016458:	789b      	ldrb	r3, [r3, #2]
 801645a:	2b01      	cmp	r3, #1
 801645c:	d102      	bne.n	8016464 <LoRaMacCryptoDeriveMcRootKey+0x3c>
    {
        compBase[0] = 0x20;
 801645e:	193b      	adds	r3, r7, r4
 8016460:	2220      	movs	r2, #32
 8016462:	701a      	strb	r2, [r3, #0]
    }
    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 8016464:	4b09      	ldr	r3, [pc, #36]	; (801648c <LoRaMacCryptoDeriveMcRootKey+0x64>)
 8016466:	681b      	ldr	r3, [r3, #0]
 8016468:	1dfa      	adds	r2, r7, #7
 801646a:	7812      	ldrb	r2, [r2, #0]
 801646c:	2108      	movs	r1, #8
 801646e:	1879      	adds	r1, r7, r1
 8016470:	6818      	ldr	r0, [r3, #0]
 8016472:	2304      	movs	r3, #4
 8016474:	f7f7 fba8 	bl	800dbc8 <SecureElementDeriveAndStoreKey>
 8016478:	1e03      	subs	r3, r0, #0
 801647a:	d001      	beq.n	8016480 <LoRaMacCryptoDeriveMcRootKey+0x58>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801647c:	230f      	movs	r3, #15
 801647e:	e000      	b.n	8016482 <LoRaMacCryptoDeriveMcRootKey+0x5a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016480:	2300      	movs	r3, #0
}
 8016482:	0018      	movs	r0, r3
 8016484:	46bd      	mov	sp, r7
 8016486:	b007      	add	sp, #28
 8016488:	bd90      	pop	{r4, r7, pc}
 801648a:	46c0      	nop			; (mov r8, r8)
 801648c:	20000d18 	.word	0x20000d18

08016490 <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 8016490:	b590      	push	{r4, r7, lr}
 8016492:	b087      	sub	sp, #28
 8016494:	af00      	add	r7, sp, #0
 8016496:	0002      	movs	r2, r0
 8016498:	1dfb      	adds	r3, r7, #7
 801649a:	701a      	strb	r2, [r3, #0]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 801649c:	1dfb      	adds	r3, r7, #7
 801649e:	781b      	ldrb	r3, [r3, #0]
 80164a0:	2b04      	cmp	r3, #4
 80164a2:	d001      	beq.n	80164a8 <LoRaMacCryptoDeriveMcKEKey+0x18>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80164a4:	230b      	movs	r3, #11
 80164a6:	e017      	b.n	80164d8 <LoRaMacCryptoDeriveMcKEKey+0x48>
    }
    uint8_t compBase[16] = { 0 };
 80164a8:	2408      	movs	r4, #8
 80164aa:	193b      	adds	r3, r7, r4
 80164ac:	2200      	movs	r2, #0
 80164ae:	601a      	str	r2, [r3, #0]
 80164b0:	3304      	adds	r3, #4
 80164b2:	220c      	movs	r2, #12
 80164b4:	2100      	movs	r1, #0
 80164b6:	0018      	movs	r0, r3
 80164b8:	f007 fd7b 	bl	801dfb2 <memset>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 80164bc:	4b08      	ldr	r3, [pc, #32]	; (80164e0 <LoRaMacCryptoDeriveMcKEKey+0x50>)
 80164be:	681b      	ldr	r3, [r3, #0]
 80164c0:	1dfa      	adds	r2, r7, #7
 80164c2:	7812      	ldrb	r2, [r2, #0]
 80164c4:	1939      	adds	r1, r7, r4
 80164c6:	6818      	ldr	r0, [r3, #0]
 80164c8:	237f      	movs	r3, #127	; 0x7f
 80164ca:	f7f7 fb7d 	bl	800dbc8 <SecureElementDeriveAndStoreKey>
 80164ce:	1e03      	subs	r3, r0, #0
 80164d0:	d001      	beq.n	80164d6 <LoRaMacCryptoDeriveMcKEKey+0x46>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80164d2:	230f      	movs	r3, #15
 80164d4:	e000      	b.n	80164d8 <LoRaMacCryptoDeriveMcKEKey+0x48>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80164d6:	2300      	movs	r3, #0
}
 80164d8:	0018      	movs	r0, r3
 80164da:	46bd      	mov	sp, r7
 80164dc:	b007      	add	sp, #28
 80164de:	bd90      	pop	{r4, r7, pc}
 80164e0:	20000d18 	.word	0x20000d18

080164e4 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 80164e4:	b590      	push	{r4, r7, lr}
 80164e6:	b085      	sub	sp, #20
 80164e8:	af00      	add	r7, sp, #0
 80164ea:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	2b00      	cmp	r3, #0
 80164f0:	d003      	beq.n	80164fa <LoRaMacParserJoinAccept+0x16>
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	681b      	ldr	r3, [r3, #0]
 80164f6:	2b00      	cmp	r3, #0
 80164f8:	d101      	bne.n	80164fe <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 80164fa:	2302      	movs	r3, #2
 80164fc:	e0de      	b.n	80166bc <LoRaMacParserJoinAccept+0x1d8>
    }

    uint16_t bufItr = 0;
 80164fe:	240e      	movs	r4, #14
 8016500:	193b      	adds	r3, r7, r4
 8016502:	2200      	movs	r2, #0
 8016504:	801a      	strh	r2, [r3, #0]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	681a      	ldr	r2, [r3, #0]
 801650a:	193b      	adds	r3, r7, r4
 801650c:	881b      	ldrh	r3, [r3, #0]
 801650e:	1939      	adds	r1, r7, r4
 8016510:	1c58      	adds	r0, r3, #1
 8016512:	8008      	strh	r0, [r1, #0]
 8016514:	18d3      	adds	r3, r2, r3
 8016516:	781a      	ldrb	r2, [r3, #0]
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	1d98      	adds	r0, r3, #6
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	681a      	ldr	r2, [r3, #0]
 8016524:	193b      	adds	r3, r7, r4
 8016526:	881b      	ldrh	r3, [r3, #0]
 8016528:	18d3      	adds	r3, r2, r3
 801652a:	2203      	movs	r2, #3
 801652c:	0019      	movs	r1, r3
 801652e:	f003 f82f 	bl	8019590 <memcpy1>
    bufItr = bufItr + 3;
 8016532:	193b      	adds	r3, r7, r4
 8016534:	193a      	adds	r2, r7, r4
 8016536:	8812      	ldrh	r2, [r2, #0]
 8016538:	3203      	adds	r2, #3
 801653a:	801a      	strh	r2, [r3, #0]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 801653c:	687b      	ldr	r3, [r7, #4]
 801653e:	3309      	adds	r3, #9
 8016540:	0018      	movs	r0, r3
 8016542:	687b      	ldr	r3, [r7, #4]
 8016544:	681a      	ldr	r2, [r3, #0]
 8016546:	193b      	adds	r3, r7, r4
 8016548:	881b      	ldrh	r3, [r3, #0]
 801654a:	18d3      	adds	r3, r2, r3
 801654c:	2203      	movs	r2, #3
 801654e:	0019      	movs	r1, r3
 8016550:	f003 f81e 	bl	8019590 <memcpy1>
    bufItr = bufItr + 3;
 8016554:	193b      	adds	r3, r7, r4
 8016556:	193a      	adds	r2, r7, r4
 8016558:	8812      	ldrh	r2, [r2, #0]
 801655a:	3203      	adds	r2, #3
 801655c:	801a      	strh	r2, [r3, #0]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	681a      	ldr	r2, [r3, #0]
 8016562:	193b      	adds	r3, r7, r4
 8016564:	881b      	ldrh	r3, [r3, #0]
 8016566:	1939      	adds	r1, r7, r4
 8016568:	1c58      	adds	r0, r3, #1
 801656a:	8008      	strh	r0, [r1, #0]
 801656c:	18d3      	adds	r3, r2, r3
 801656e:	781b      	ldrb	r3, [r3, #0]
 8016570:	001a      	movs	r2, r3
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8016576:	687b      	ldr	r3, [r7, #4]
 8016578:	681a      	ldr	r2, [r3, #0]
 801657a:	193b      	adds	r3, r7, r4
 801657c:	881b      	ldrh	r3, [r3, #0]
 801657e:	1939      	adds	r1, r7, r4
 8016580:	1c58      	adds	r0, r3, #1
 8016582:	8008      	strh	r0, [r1, #0]
 8016584:	18d3      	adds	r3, r2, r3
 8016586:	781b      	ldrb	r3, [r3, #0]
 8016588:	021a      	lsls	r2, r3, #8
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	68db      	ldr	r3, [r3, #12]
 801658e:	431a      	orrs	r2, r3
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8016594:	687b      	ldr	r3, [r7, #4]
 8016596:	681a      	ldr	r2, [r3, #0]
 8016598:	193b      	adds	r3, r7, r4
 801659a:	881b      	ldrh	r3, [r3, #0]
 801659c:	1939      	adds	r1, r7, r4
 801659e:	1c58      	adds	r0, r3, #1
 80165a0:	8008      	strh	r0, [r1, #0]
 80165a2:	18d3      	adds	r3, r2, r3
 80165a4:	781b      	ldrb	r3, [r3, #0]
 80165a6:	041a      	lsls	r2, r3, #16
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	68db      	ldr	r3, [r3, #12]
 80165ac:	431a      	orrs	r2, r3
 80165ae:	687b      	ldr	r3, [r7, #4]
 80165b0:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	681a      	ldr	r2, [r3, #0]
 80165b6:	193b      	adds	r3, r7, r4
 80165b8:	881b      	ldrh	r3, [r3, #0]
 80165ba:	1939      	adds	r1, r7, r4
 80165bc:	1c58      	adds	r0, r3, #1
 80165be:	8008      	strh	r0, [r1, #0]
 80165c0:	18d3      	adds	r3, r2, r3
 80165c2:	781b      	ldrb	r3, [r3, #0]
 80165c4:	061a      	lsls	r2, r3, #24
 80165c6:	687b      	ldr	r3, [r7, #4]
 80165c8:	68db      	ldr	r3, [r3, #12]
 80165ca:	431a      	orrs	r2, r3
 80165cc:	687b      	ldr	r3, [r7, #4]
 80165ce:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	681a      	ldr	r2, [r3, #0]
 80165d4:	193b      	adds	r3, r7, r4
 80165d6:	881b      	ldrh	r3, [r3, #0]
 80165d8:	1939      	adds	r1, r7, r4
 80165da:	1c58      	adds	r0, r3, #1
 80165dc:	8008      	strh	r0, [r1, #0]
 80165de:	18d3      	adds	r3, r2, r3
 80165e0:	781a      	ldrb	r2, [r3, #0]
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 80165e6:	687b      	ldr	r3, [r7, #4]
 80165e8:	681a      	ldr	r2, [r3, #0]
 80165ea:	193b      	adds	r3, r7, r4
 80165ec:	881b      	ldrh	r3, [r3, #0]
 80165ee:	1939      	adds	r1, r7, r4
 80165f0:	1c58      	adds	r0, r3, #1
 80165f2:	8008      	strh	r0, [r1, #0]
 80165f4:	18d3      	adds	r3, r2, r3
 80165f6:	781a      	ldrb	r2, [r3, #0]
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 80165fc:	687b      	ldr	r3, [r7, #4]
 80165fe:	791b      	ldrb	r3, [r3, #4]
 8016600:	1f1a      	subs	r2, r3, #4
 8016602:	193b      	adds	r3, r7, r4
 8016604:	881b      	ldrh	r3, [r3, #0]
 8016606:	1ad3      	subs	r3, r2, r3
 8016608:	2b10      	cmp	r3, #16
 801660a:	d111      	bne.n	8016630 <LoRaMacParserJoinAccept+0x14c>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	3312      	adds	r3, #18
 8016610:	0018      	movs	r0, r3
 8016612:	687b      	ldr	r3, [r7, #4]
 8016614:	681a      	ldr	r2, [r3, #0]
 8016616:	193b      	adds	r3, r7, r4
 8016618:	881b      	ldrh	r3, [r3, #0]
 801661a:	18d3      	adds	r3, r2, r3
 801661c:	2210      	movs	r2, #16
 801661e:	0019      	movs	r1, r3
 8016620:	f002 ffb6 	bl	8019590 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8016624:	193b      	adds	r3, r7, r4
 8016626:	193a      	adds	r2, r7, r4
 8016628:	8812      	ldrh	r2, [r2, #0]
 801662a:	3210      	adds	r2, #16
 801662c:	801a      	strh	r2, [r3, #0]
 801662e:	e00a      	b.n	8016646 <LoRaMacParserJoinAccept+0x162>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	791b      	ldrb	r3, [r3, #4]
 8016634:	1f1a      	subs	r2, r3, #4
 8016636:	230e      	movs	r3, #14
 8016638:	18fb      	adds	r3, r7, r3
 801663a:	881b      	ldrh	r3, [r3, #0]
 801663c:	1ad3      	subs	r3, r2, r3
 801663e:	2b00      	cmp	r3, #0
 8016640:	dd01      	ble.n	8016646 <LoRaMacParserJoinAccept+0x162>
    {
        return LORAMAC_PARSER_FAIL;
 8016642:	2301      	movs	r3, #1
 8016644:	e03a      	b.n	80166bc <LoRaMacParserJoinAccept+0x1d8>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	681a      	ldr	r2, [r3, #0]
 801664a:	240e      	movs	r4, #14
 801664c:	193b      	adds	r3, r7, r4
 801664e:	881b      	ldrh	r3, [r3, #0]
 8016650:	1939      	adds	r1, r7, r4
 8016652:	1c58      	adds	r0, r3, #1
 8016654:	8008      	strh	r0, [r1, #0]
 8016656:	18d3      	adds	r3, r2, r3
 8016658:	781b      	ldrb	r3, [r3, #0]
 801665a:	001a      	movs	r2, r3
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	681a      	ldr	r2, [r3, #0]
 8016664:	193b      	adds	r3, r7, r4
 8016666:	881b      	ldrh	r3, [r3, #0]
 8016668:	1939      	adds	r1, r7, r4
 801666a:	1c58      	adds	r0, r3, #1
 801666c:	8008      	strh	r0, [r1, #0]
 801666e:	18d3      	adds	r3, r2, r3
 8016670:	781b      	ldrb	r3, [r3, #0]
 8016672:	021a      	lsls	r2, r3, #8
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016678:	431a      	orrs	r2, r3
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	681a      	ldr	r2, [r3, #0]
 8016682:	193b      	adds	r3, r7, r4
 8016684:	881b      	ldrh	r3, [r3, #0]
 8016686:	1939      	adds	r1, r7, r4
 8016688:	1c58      	adds	r0, r3, #1
 801668a:	8008      	strh	r0, [r1, #0]
 801668c:	18d3      	adds	r3, r2, r3
 801668e:	781b      	ldrb	r3, [r3, #0]
 8016690:	041a      	lsls	r2, r3, #16
 8016692:	687b      	ldr	r3, [r7, #4]
 8016694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016696:	431a      	orrs	r2, r3
 8016698:	687b      	ldr	r3, [r7, #4]
 801669a:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801669c:	687b      	ldr	r3, [r7, #4]
 801669e:	681a      	ldr	r2, [r3, #0]
 80166a0:	193b      	adds	r3, r7, r4
 80166a2:	881b      	ldrh	r3, [r3, #0]
 80166a4:	1939      	adds	r1, r7, r4
 80166a6:	1c58      	adds	r0, r3, #1
 80166a8:	8008      	strh	r0, [r1, #0]
 80166aa:	18d3      	adds	r3, r2, r3
 80166ac:	781b      	ldrb	r3, [r3, #0]
 80166ae:	061a      	lsls	r2, r3, #24
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80166b4:	431a      	orrs	r2, r3
 80166b6:	687b      	ldr	r3, [r7, #4]
 80166b8:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 80166ba:	2300      	movs	r3, #0
}
 80166bc:	0018      	movs	r0, r3
 80166be:	46bd      	mov	sp, r7
 80166c0:	b005      	add	sp, #20
 80166c2:	bd90      	pop	{r4, r7, pc}

080166c4 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 80166c4:	b590      	push	{r4, r7, lr}
 80166c6:	b085      	sub	sp, #20
 80166c8:	af00      	add	r7, sp, #0
 80166ca:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	2b00      	cmp	r3, #0
 80166d0:	d003      	beq.n	80166da <LoRaMacParserData+0x16>
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	681b      	ldr	r3, [r3, #0]
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	d101      	bne.n	80166de <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 80166da:	2302      	movs	r3, #2
 80166dc:	e0fe      	b.n	80168dc <LoRaMacParserData+0x218>
    }

    uint16_t bufItr = 0;
 80166de:	240e      	movs	r4, #14
 80166e0:	193b      	adds	r3, r7, r4
 80166e2:	2200      	movs	r2, #0
 80166e4:	801a      	strh	r2, [r3, #0]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	681a      	ldr	r2, [r3, #0]
 80166ea:	193b      	adds	r3, r7, r4
 80166ec:	881b      	ldrh	r3, [r3, #0]
 80166ee:	1939      	adds	r1, r7, r4
 80166f0:	1c58      	adds	r0, r3, #1
 80166f2:	8008      	strh	r0, [r1, #0]
 80166f4:	18d3      	adds	r3, r2, r3
 80166f6:	781a      	ldrb	r2, [r3, #0]
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	681a      	ldr	r2, [r3, #0]
 8016700:	193b      	adds	r3, r7, r4
 8016702:	881b      	ldrh	r3, [r3, #0]
 8016704:	1939      	adds	r1, r7, r4
 8016706:	1c58      	adds	r0, r3, #1
 8016708:	8008      	strh	r0, [r1, #0]
 801670a:	18d3      	adds	r3, r2, r3
 801670c:	781b      	ldrb	r3, [r3, #0]
 801670e:	001a      	movs	r2, r3
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	681a      	ldr	r2, [r3, #0]
 8016718:	193b      	adds	r3, r7, r4
 801671a:	881b      	ldrh	r3, [r3, #0]
 801671c:	1939      	adds	r1, r7, r4
 801671e:	1c58      	adds	r0, r3, #1
 8016720:	8008      	strh	r0, [r1, #0]
 8016722:	18d3      	adds	r3, r2, r3
 8016724:	781b      	ldrb	r3, [r3, #0]
 8016726:	021a      	lsls	r2, r3, #8
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	689b      	ldr	r3, [r3, #8]
 801672c:	431a      	orrs	r2, r3
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	681a      	ldr	r2, [r3, #0]
 8016736:	193b      	adds	r3, r7, r4
 8016738:	881b      	ldrh	r3, [r3, #0]
 801673a:	1939      	adds	r1, r7, r4
 801673c:	1c58      	adds	r0, r3, #1
 801673e:	8008      	strh	r0, [r1, #0]
 8016740:	18d3      	adds	r3, r2, r3
 8016742:	781b      	ldrb	r3, [r3, #0]
 8016744:	041a      	lsls	r2, r3, #16
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	689b      	ldr	r3, [r3, #8]
 801674a:	431a      	orrs	r2, r3
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8016750:	687b      	ldr	r3, [r7, #4]
 8016752:	681a      	ldr	r2, [r3, #0]
 8016754:	193b      	adds	r3, r7, r4
 8016756:	881b      	ldrh	r3, [r3, #0]
 8016758:	1939      	adds	r1, r7, r4
 801675a:	1c58      	adds	r0, r3, #1
 801675c:	8008      	strh	r0, [r1, #0]
 801675e:	18d3      	adds	r3, r2, r3
 8016760:	781b      	ldrb	r3, [r3, #0]
 8016762:	061a      	lsls	r2, r3, #24
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	689b      	ldr	r3, [r3, #8]
 8016768:	431a      	orrs	r2, r3
 801676a:	687b      	ldr	r3, [r7, #4]
 801676c:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	681a      	ldr	r2, [r3, #0]
 8016772:	193b      	adds	r3, r7, r4
 8016774:	881b      	ldrh	r3, [r3, #0]
 8016776:	1939      	adds	r1, r7, r4
 8016778:	1c58      	adds	r0, r3, #1
 801677a:	8008      	strh	r0, [r1, #0]
 801677c:	18d3      	adds	r3, r2, r3
 801677e:	781a      	ldrb	r2, [r3, #0]
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	681a      	ldr	r2, [r3, #0]
 8016788:	193b      	adds	r3, r7, r4
 801678a:	881b      	ldrh	r3, [r3, #0]
 801678c:	1939      	adds	r1, r7, r4
 801678e:	1c58      	adds	r0, r3, #1
 8016790:	8008      	strh	r0, [r1, #0]
 8016792:	18d3      	adds	r3, r2, r3
 8016794:	781b      	ldrb	r3, [r3, #0]
 8016796:	b29a      	uxth	r2, r3
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	681a      	ldr	r2, [r3, #0]
 80167a0:	193b      	adds	r3, r7, r4
 80167a2:	881b      	ldrh	r3, [r3, #0]
 80167a4:	1939      	adds	r1, r7, r4
 80167a6:	1c58      	adds	r0, r3, #1
 80167a8:	8008      	strh	r0, [r1, #0]
 80167aa:	18d3      	adds	r3, r2, r3
 80167ac:	781b      	ldrb	r3, [r3, #0]
 80167ae:	0219      	lsls	r1, r3, #8
 80167b0:	687b      	ldr	r3, [r7, #4]
 80167b2:	89db      	ldrh	r3, [r3, #14]
 80167b4:	b21a      	sxth	r2, r3
 80167b6:	b20b      	sxth	r3, r1
 80167b8:	4313      	orrs	r3, r2
 80167ba:	b21b      	sxth	r3, r3
 80167bc:	b29a      	uxth	r2, r3
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80167c2:	687b      	ldr	r3, [r7, #4]
 80167c4:	3310      	adds	r3, #16
 80167c6:	0018      	movs	r0, r3
 80167c8:	687b      	ldr	r3, [r7, #4]
 80167ca:	681a      	ldr	r2, [r3, #0]
 80167cc:	193b      	adds	r3, r7, r4
 80167ce:	881b      	ldrh	r3, [r3, #0]
 80167d0:	18d1      	adds	r1, r2, r3
 80167d2:	687b      	ldr	r3, [r7, #4]
 80167d4:	7b1b      	ldrb	r3, [r3, #12]
 80167d6:	071b      	lsls	r3, r3, #28
 80167d8:	0f1b      	lsrs	r3, r3, #28
 80167da:	b2db      	uxtb	r3, r3
 80167dc:	b29b      	uxth	r3, r3
 80167de:	001a      	movs	r2, r3
 80167e0:	f002 fed6 	bl	8019590 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	7b1b      	ldrb	r3, [r3, #12]
 80167e8:	071b      	lsls	r3, r3, #28
 80167ea:	0f1b      	lsrs	r3, r3, #28
 80167ec:	b2db      	uxtb	r3, r3
 80167ee:	b299      	uxth	r1, r3
 80167f0:	193b      	adds	r3, r7, r4
 80167f2:	193a      	adds	r2, r7, r4
 80167f4:	8812      	ldrh	r2, [r2, #0]
 80167f6:	188a      	adds	r2, r1, r2
 80167f8:	801a      	strh	r2, [r3, #0]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	2220      	movs	r2, #32
 80167fe:	2100      	movs	r1, #0
 8016800:	5499      	strb	r1, [r3, r2]
    macMsg->FRMPayloadSize = 0;
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	2228      	movs	r2, #40	; 0x28
 8016806:	2100      	movs	r1, #0
 8016808:	5499      	strb	r1, [r3, r2]

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	791b      	ldrb	r3, [r3, #4]
 801680e:	001a      	movs	r2, r3
 8016810:	193b      	adds	r3, r7, r4
 8016812:	881b      	ldrh	r3, [r3, #0]
 8016814:	1ad3      	subs	r3, r2, r3
 8016816:	2b04      	cmp	r3, #4
 8016818:	dd2e      	ble.n	8016878 <LoRaMacParserData+0x1b4>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	681a      	ldr	r2, [r3, #0]
 801681e:	193b      	adds	r3, r7, r4
 8016820:	881b      	ldrh	r3, [r3, #0]
 8016822:	1939      	adds	r1, r7, r4
 8016824:	1c58      	adds	r0, r3, #1
 8016826:	8008      	strh	r0, [r1, #0]
 8016828:	18d3      	adds	r3, r2, r3
 801682a:	7819      	ldrb	r1, [r3, #0]
 801682c:	687b      	ldr	r3, [r7, #4]
 801682e:	2220      	movs	r2, #32
 8016830:	5499      	strb	r1, [r3, r2]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8016832:	687b      	ldr	r3, [r7, #4]
 8016834:	791a      	ldrb	r2, [r3, #4]
 8016836:	193b      	adds	r3, r7, r4
 8016838:	881b      	ldrh	r3, [r3, #0]
 801683a:	b2db      	uxtb	r3, r3
 801683c:	1ad3      	subs	r3, r2, r3
 801683e:	b2db      	uxtb	r3, r3
 8016840:	3b04      	subs	r3, #4
 8016842:	b2d9      	uxtb	r1, r3
 8016844:	687b      	ldr	r3, [r7, #4]
 8016846:	2228      	movs	r2, #40	; 0x28
 8016848:	5499      	strb	r1, [r3, r2]
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801684e:	687b      	ldr	r3, [r7, #4]
 8016850:	681a      	ldr	r2, [r3, #0]
 8016852:	193b      	adds	r3, r7, r4
 8016854:	881b      	ldrh	r3, [r3, #0]
 8016856:	18d1      	adds	r1, r2, r3
 8016858:	687b      	ldr	r3, [r7, #4]
 801685a:	2228      	movs	r2, #40	; 0x28
 801685c:	5c9b      	ldrb	r3, [r3, r2]
 801685e:	b29b      	uxth	r3, r3
 8016860:	001a      	movs	r2, r3
 8016862:	f002 fe95 	bl	8019590 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	2228      	movs	r2, #40	; 0x28
 801686a:	5c9b      	ldrb	r3, [r3, r2]
 801686c:	b299      	uxth	r1, r3
 801686e:	193b      	adds	r3, r7, r4
 8016870:	193a      	adds	r2, r7, r4
 8016872:	8812      	ldrh	r2, [r2, #0]
 8016874:	188a      	adds	r2, r1, r2
 8016876:	801a      	strh	r2, [r3, #0]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8016878:	687b      	ldr	r3, [r7, #4]
 801687a:	681a      	ldr	r2, [r3, #0]
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	791b      	ldrb	r3, [r3, #4]
 8016880:	3b04      	subs	r3, #4
 8016882:	18d3      	adds	r3, r2, r3
 8016884:	781b      	ldrb	r3, [r3, #0]
 8016886:	001a      	movs	r2, r3
 8016888:	687b      	ldr	r3, [r7, #4]
 801688a:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016890:	687b      	ldr	r3, [r7, #4]
 8016892:	6819      	ldr	r1, [r3, #0]
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	791b      	ldrb	r3, [r3, #4]
 8016898:	3b03      	subs	r3, #3
 801689a:	18cb      	adds	r3, r1, r3
 801689c:	781b      	ldrb	r3, [r3, #0]
 801689e:	021b      	lsls	r3, r3, #8
 80168a0:	431a      	orrs	r2, r3
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	6819      	ldr	r1, [r3, #0]
 80168ae:	687b      	ldr	r3, [r7, #4]
 80168b0:	791b      	ldrb	r3, [r3, #4]
 80168b2:	3b02      	subs	r3, #2
 80168b4:	18cb      	adds	r3, r1, r3
 80168b6:	781b      	ldrb	r3, [r3, #0]
 80168b8:	041b      	lsls	r3, r3, #16
 80168ba:	431a      	orrs	r2, r3
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	6819      	ldr	r1, [r3, #0]
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	791b      	ldrb	r3, [r3, #4]
 80168cc:	3b01      	subs	r3, #1
 80168ce:	18cb      	adds	r3, r1, r3
 80168d0:	781b      	ldrb	r3, [r3, #0]
 80168d2:	061b      	lsls	r3, r3, #24
 80168d4:	431a      	orrs	r2, r3
 80168d6:	687b      	ldr	r3, [r7, #4]
 80168d8:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 80168da:	2300      	movs	r3, #0
}
 80168dc:	0018      	movs	r0, r3
 80168de:	46bd      	mov	sp, r7
 80168e0:	b005      	add	sp, #20
 80168e2:	bd90      	pop	{r4, r7, pc}

080168e4 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 80168e4:	b5b0      	push	{r4, r5, r7, lr}
 80168e6:	b084      	sub	sp, #16
 80168e8:	af00      	add	r7, sp, #0
 80168ea:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80168ec:	687b      	ldr	r3, [r7, #4]
 80168ee:	2b00      	cmp	r3, #0
 80168f0:	d003      	beq.n	80168fa <LoRaMacSerializerJoinRequest+0x16>
 80168f2:	687b      	ldr	r3, [r7, #4]
 80168f4:	681b      	ldr	r3, [r3, #0]
 80168f6:	2b00      	cmp	r3, #0
 80168f8:	d101      	bne.n	80168fe <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80168fa:	2301      	movs	r3, #1
 80168fc:	e089      	b.n	8016a12 <LoRaMacSerializerJoinRequest+0x12e>
    }

    uint16_t bufItr = 0;
 80168fe:	230e      	movs	r3, #14
 8016900:	18fb      	adds	r3, r7, r3
 8016902:	2200      	movs	r2, #0
 8016904:	801a      	strh	r2, [r3, #0]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8016906:	687b      	ldr	r3, [r7, #4]
 8016908:	791b      	ldrb	r3, [r3, #4]
 801690a:	2b16      	cmp	r3, #22
 801690c:	d801      	bhi.n	8016912 <LoRaMacSerializerJoinRequest+0x2e>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 801690e:	2302      	movs	r3, #2
 8016910:	e07f      	b.n	8016a12 <LoRaMacSerializerJoinRequest+0x12e>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	681a      	ldr	r2, [r3, #0]
 8016916:	240e      	movs	r4, #14
 8016918:	193b      	adds	r3, r7, r4
 801691a:	881b      	ldrh	r3, [r3, #0]
 801691c:	1939      	adds	r1, r7, r4
 801691e:	1c58      	adds	r0, r3, #1
 8016920:	8008      	strh	r0, [r1, #0]
 8016922:	18d3      	adds	r3, r2, r3
 8016924:	687a      	ldr	r2, [r7, #4]
 8016926:	7952      	ldrb	r2, [r2, #5]
 8016928:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	681a      	ldr	r2, [r3, #0]
 801692e:	193b      	adds	r3, r7, r4
 8016930:	881b      	ldrh	r3, [r3, #0]
 8016932:	18d0      	adds	r0, r2, r3
 8016934:	687b      	ldr	r3, [r7, #4]
 8016936:	3306      	adds	r3, #6
 8016938:	2208      	movs	r2, #8
 801693a:	0019      	movs	r1, r3
 801693c:	f002 fe44 	bl	80195c8 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8016940:	193b      	adds	r3, r7, r4
 8016942:	193a      	adds	r2, r7, r4
 8016944:	8812      	ldrh	r2, [r2, #0]
 8016946:	3208      	adds	r2, #8
 8016948:	801a      	strh	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 801694a:	687b      	ldr	r3, [r7, #4]
 801694c:	681a      	ldr	r2, [r3, #0]
 801694e:	193b      	adds	r3, r7, r4
 8016950:	881b      	ldrh	r3, [r3, #0]
 8016952:	18d0      	adds	r0, r2, r3
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	330e      	adds	r3, #14
 8016958:	2208      	movs	r2, #8
 801695a:	0019      	movs	r1, r3
 801695c:	f002 fe34 	bl	80195c8 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8016960:	193b      	adds	r3, r7, r4
 8016962:	0025      	movs	r5, r4
 8016964:	193a      	adds	r2, r7, r4
 8016966:	8812      	ldrh	r2, [r2, #0]
 8016968:	3208      	adds	r2, #8
 801696a:	801a      	strh	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 801696c:	687b      	ldr	r3, [r7, #4]
 801696e:	8ad8      	ldrh	r0, [r3, #22]
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	681a      	ldr	r2, [r3, #0]
 8016974:	197b      	adds	r3, r7, r5
 8016976:	881b      	ldrh	r3, [r3, #0]
 8016978:	1979      	adds	r1, r7, r5
 801697a:	1c5c      	adds	r4, r3, #1
 801697c:	800c      	strh	r4, [r1, #0]
 801697e:	18d3      	adds	r3, r2, r3
 8016980:	b2c2      	uxtb	r2, r0
 8016982:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	8adb      	ldrh	r3, [r3, #22]
 8016988:	0a1b      	lsrs	r3, r3, #8
 801698a:	b298      	uxth	r0, r3
 801698c:	687b      	ldr	r3, [r7, #4]
 801698e:	681a      	ldr	r2, [r3, #0]
 8016990:	197b      	adds	r3, r7, r5
 8016992:	881b      	ldrh	r3, [r3, #0]
 8016994:	1979      	adds	r1, r7, r5
 8016996:	1c5c      	adds	r4, r3, #1
 8016998:	800c      	strh	r4, [r1, #0]
 801699a:	18d3      	adds	r3, r2, r3
 801699c:	b2c2      	uxtb	r2, r0
 801699e:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80169a0:	687b      	ldr	r3, [r7, #4]
 80169a2:	6998      	ldr	r0, [r3, #24]
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	681a      	ldr	r2, [r3, #0]
 80169a8:	197b      	adds	r3, r7, r5
 80169aa:	881b      	ldrh	r3, [r3, #0]
 80169ac:	1979      	adds	r1, r7, r5
 80169ae:	1c5c      	adds	r4, r3, #1
 80169b0:	800c      	strh	r4, [r1, #0]
 80169b2:	18d3      	adds	r3, r2, r3
 80169b4:	b2c2      	uxtb	r2, r0
 80169b6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	699b      	ldr	r3, [r3, #24]
 80169bc:	0a18      	lsrs	r0, r3, #8
 80169be:	687b      	ldr	r3, [r7, #4]
 80169c0:	681a      	ldr	r2, [r3, #0]
 80169c2:	197b      	adds	r3, r7, r5
 80169c4:	881b      	ldrh	r3, [r3, #0]
 80169c6:	1979      	adds	r1, r7, r5
 80169c8:	1c5c      	adds	r4, r3, #1
 80169ca:	800c      	strh	r4, [r1, #0]
 80169cc:	18d3      	adds	r3, r2, r3
 80169ce:	b2c2      	uxtb	r2, r0
 80169d0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80169d2:	687b      	ldr	r3, [r7, #4]
 80169d4:	699b      	ldr	r3, [r3, #24]
 80169d6:	0c18      	lsrs	r0, r3, #16
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	681a      	ldr	r2, [r3, #0]
 80169dc:	197b      	adds	r3, r7, r5
 80169de:	881b      	ldrh	r3, [r3, #0]
 80169e0:	1979      	adds	r1, r7, r5
 80169e2:	1c5c      	adds	r4, r3, #1
 80169e4:	800c      	strh	r4, [r1, #0]
 80169e6:	18d3      	adds	r3, r2, r3
 80169e8:	b2c2      	uxtb	r2, r0
 80169ea:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	699b      	ldr	r3, [r3, #24]
 80169f0:	0e18      	lsrs	r0, r3, #24
 80169f2:	687b      	ldr	r3, [r7, #4]
 80169f4:	681a      	ldr	r2, [r3, #0]
 80169f6:	197b      	adds	r3, r7, r5
 80169f8:	881b      	ldrh	r3, [r3, #0]
 80169fa:	1979      	adds	r1, r7, r5
 80169fc:	1c5c      	adds	r4, r3, #1
 80169fe:	800c      	strh	r4, [r1, #0]
 8016a00:	18d3      	adds	r3, r2, r3
 8016a02:	b2c2      	uxtb	r2, r0
 8016a04:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8016a06:	197b      	adds	r3, r7, r5
 8016a08:	881b      	ldrh	r3, [r3, #0]
 8016a0a:	b2da      	uxtb	r2, r3
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8016a10:	2300      	movs	r3, #0
}
 8016a12:	0018      	movs	r0, r3
 8016a14:	46bd      	mov	sp, r7
 8016a16:	b004      	add	sp, #16
 8016a18:	bdb0      	pop	{r4, r5, r7, pc}

08016a1a <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8016a1a:	b5b0      	push	{r4, r5, r7, lr}
 8016a1c:	b084      	sub	sp, #16
 8016a1e:	af00      	add	r7, sp, #0
 8016a20:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8016a22:	687b      	ldr	r3, [r7, #4]
 8016a24:	2b00      	cmp	r3, #0
 8016a26:	d003      	beq.n	8016a30 <LoRaMacSerializerData+0x16>
 8016a28:	687b      	ldr	r3, [r7, #4]
 8016a2a:	681b      	ldr	r3, [r3, #0]
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	d101      	bne.n	8016a34 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8016a30:	2301      	movs	r3, #1
 8016a32:	e119      	b.n	8016c68 <LoRaMacSerializerData+0x24e>
    }

    uint16_t bufItr = 0;
 8016a34:	230e      	movs	r3, #14
 8016a36:	18fb      	adds	r3, r7, r3
 8016a38:	2200      	movs	r2, #0
 8016a3a:	801a      	strh	r2, [r3, #0]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8016a3c:	200c      	movs	r0, #12
 8016a3e:	183b      	adds	r3, r7, r0
 8016a40:	2208      	movs	r2, #8
 8016a42:	801a      	strh	r2, [r3, #0]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8016a44:	687b      	ldr	r3, [r7, #4]
 8016a46:	7b1b      	ldrb	r3, [r3, #12]
 8016a48:	071b      	lsls	r3, r3, #28
 8016a4a:	0f1b      	lsrs	r3, r3, #28
 8016a4c:	b2db      	uxtb	r3, r3
 8016a4e:	b299      	uxth	r1, r3
 8016a50:	183b      	adds	r3, r7, r0
 8016a52:	183a      	adds	r2, r7, r0
 8016a54:	8812      	ldrh	r2, [r2, #0]
 8016a56:	188a      	adds	r2, r1, r2
 8016a58:	801a      	strh	r2, [r3, #0]

    if( macMsg->FRMPayloadSize > 0 )
 8016a5a:	687b      	ldr	r3, [r7, #4]
 8016a5c:	2228      	movs	r2, #40	; 0x28
 8016a5e:	5c9b      	ldrb	r3, [r3, r2]
 8016a60:	2b00      	cmp	r3, #0
 8016a62:	d004      	beq.n	8016a6e <LoRaMacSerializerData+0x54>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8016a64:	183b      	adds	r3, r7, r0
 8016a66:	183a      	adds	r2, r7, r0
 8016a68:	8812      	ldrh	r2, [r2, #0]
 8016a6a:	3201      	adds	r2, #1
 8016a6c:	801a      	strh	r2, [r3, #0]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	2228      	movs	r2, #40	; 0x28
 8016a72:	5c9b      	ldrb	r3, [r3, r2]
 8016a74:	b299      	uxth	r1, r3
 8016a76:	200c      	movs	r0, #12
 8016a78:	183b      	adds	r3, r7, r0
 8016a7a:	183a      	adds	r2, r7, r0
 8016a7c:	8812      	ldrh	r2, [r2, #0]
 8016a7e:	188a      	adds	r2, r1, r2
 8016a80:	801a      	strh	r2, [r3, #0]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8016a82:	0001      	movs	r1, r0
 8016a84:	187b      	adds	r3, r7, r1
 8016a86:	187a      	adds	r2, r7, r1
 8016a88:	8812      	ldrh	r2, [r2, #0]
 8016a8a:	3204      	adds	r2, #4
 8016a8c:	801a      	strh	r2, [r3, #0]

    if( macMsg->BufSize < computedBufSize )
 8016a8e:	687b      	ldr	r3, [r7, #4]
 8016a90:	791b      	ldrb	r3, [r3, #4]
 8016a92:	b29b      	uxth	r3, r3
 8016a94:	187a      	adds	r2, r7, r1
 8016a96:	8812      	ldrh	r2, [r2, #0]
 8016a98:	429a      	cmp	r2, r3
 8016a9a:	d901      	bls.n	8016aa0 <LoRaMacSerializerData+0x86>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8016a9c:	2302      	movs	r3, #2
 8016a9e:	e0e3      	b.n	8016c68 <LoRaMacSerializerData+0x24e>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8016aa0:	687b      	ldr	r3, [r7, #4]
 8016aa2:	681a      	ldr	r2, [r3, #0]
 8016aa4:	250e      	movs	r5, #14
 8016aa6:	197b      	adds	r3, r7, r5
 8016aa8:	881b      	ldrh	r3, [r3, #0]
 8016aaa:	1979      	adds	r1, r7, r5
 8016aac:	1c58      	adds	r0, r3, #1
 8016aae:	8008      	strh	r0, [r1, #0]
 8016ab0:	18d3      	adds	r3, r2, r3
 8016ab2:	687a      	ldr	r2, [r7, #4]
 8016ab4:	7952      	ldrb	r2, [r2, #5]
 8016ab6:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8016ab8:	687b      	ldr	r3, [r7, #4]
 8016aba:	6898      	ldr	r0, [r3, #8]
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	681a      	ldr	r2, [r3, #0]
 8016ac0:	197b      	adds	r3, r7, r5
 8016ac2:	881b      	ldrh	r3, [r3, #0]
 8016ac4:	1979      	adds	r1, r7, r5
 8016ac6:	1c5c      	adds	r4, r3, #1
 8016ac8:	800c      	strh	r4, [r1, #0]
 8016aca:	18d3      	adds	r3, r2, r3
 8016acc:	b2c2      	uxtb	r2, r0
 8016ace:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8016ad0:	687b      	ldr	r3, [r7, #4]
 8016ad2:	689b      	ldr	r3, [r3, #8]
 8016ad4:	0a18      	lsrs	r0, r3, #8
 8016ad6:	687b      	ldr	r3, [r7, #4]
 8016ad8:	681a      	ldr	r2, [r3, #0]
 8016ada:	197b      	adds	r3, r7, r5
 8016adc:	881b      	ldrh	r3, [r3, #0]
 8016ade:	1979      	adds	r1, r7, r5
 8016ae0:	1c5c      	adds	r4, r3, #1
 8016ae2:	800c      	strh	r4, [r1, #0]
 8016ae4:	18d3      	adds	r3, r2, r3
 8016ae6:	b2c2      	uxtb	r2, r0
 8016ae8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8016aea:	687b      	ldr	r3, [r7, #4]
 8016aec:	689b      	ldr	r3, [r3, #8]
 8016aee:	0c18      	lsrs	r0, r3, #16
 8016af0:	687b      	ldr	r3, [r7, #4]
 8016af2:	681a      	ldr	r2, [r3, #0]
 8016af4:	197b      	adds	r3, r7, r5
 8016af6:	881b      	ldrh	r3, [r3, #0]
 8016af8:	1979      	adds	r1, r7, r5
 8016afa:	1c5c      	adds	r4, r3, #1
 8016afc:	800c      	strh	r4, [r1, #0]
 8016afe:	18d3      	adds	r3, r2, r3
 8016b00:	b2c2      	uxtb	r2, r0
 8016b02:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8016b04:	687b      	ldr	r3, [r7, #4]
 8016b06:	689b      	ldr	r3, [r3, #8]
 8016b08:	0e18      	lsrs	r0, r3, #24
 8016b0a:	687b      	ldr	r3, [r7, #4]
 8016b0c:	681a      	ldr	r2, [r3, #0]
 8016b0e:	197b      	adds	r3, r7, r5
 8016b10:	881b      	ldrh	r3, [r3, #0]
 8016b12:	1979      	adds	r1, r7, r5
 8016b14:	1c5c      	adds	r4, r3, #1
 8016b16:	800c      	strh	r4, [r1, #0]
 8016b18:	18d3      	adds	r3, r2, r3
 8016b1a:	b2c2      	uxtb	r2, r0
 8016b1c:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8016b1e:	687b      	ldr	r3, [r7, #4]
 8016b20:	681a      	ldr	r2, [r3, #0]
 8016b22:	197b      	adds	r3, r7, r5
 8016b24:	881b      	ldrh	r3, [r3, #0]
 8016b26:	1979      	adds	r1, r7, r5
 8016b28:	1c58      	adds	r0, r3, #1
 8016b2a:	8008      	strh	r0, [r1, #0]
 8016b2c:	18d3      	adds	r3, r2, r3
 8016b2e:	687a      	ldr	r2, [r7, #4]
 8016b30:	7b12      	ldrb	r2, [r2, #12]
 8016b32:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8016b34:	687b      	ldr	r3, [r7, #4]
 8016b36:	89d8      	ldrh	r0, [r3, #14]
 8016b38:	687b      	ldr	r3, [r7, #4]
 8016b3a:	681a      	ldr	r2, [r3, #0]
 8016b3c:	197b      	adds	r3, r7, r5
 8016b3e:	881b      	ldrh	r3, [r3, #0]
 8016b40:	1979      	adds	r1, r7, r5
 8016b42:	1c5c      	adds	r4, r3, #1
 8016b44:	800c      	strh	r4, [r1, #0]
 8016b46:	18d3      	adds	r3, r2, r3
 8016b48:	b2c2      	uxtb	r2, r0
 8016b4a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8016b4c:	687b      	ldr	r3, [r7, #4]
 8016b4e:	89db      	ldrh	r3, [r3, #14]
 8016b50:	0a1b      	lsrs	r3, r3, #8
 8016b52:	b298      	uxth	r0, r3
 8016b54:	687b      	ldr	r3, [r7, #4]
 8016b56:	681a      	ldr	r2, [r3, #0]
 8016b58:	197b      	adds	r3, r7, r5
 8016b5a:	881b      	ldrh	r3, [r3, #0]
 8016b5c:	1979      	adds	r1, r7, r5
 8016b5e:	1c5c      	adds	r4, r3, #1
 8016b60:	800c      	strh	r4, [r1, #0]
 8016b62:	18d3      	adds	r3, r2, r3
 8016b64:	b2c2      	uxtb	r2, r0
 8016b66:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8016b68:	687b      	ldr	r3, [r7, #4]
 8016b6a:	681a      	ldr	r2, [r3, #0]
 8016b6c:	002c      	movs	r4, r5
 8016b6e:	197b      	adds	r3, r7, r5
 8016b70:	881b      	ldrh	r3, [r3, #0]
 8016b72:	18d0      	adds	r0, r2, r3
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	3310      	adds	r3, #16
 8016b78:	0019      	movs	r1, r3
 8016b7a:	687b      	ldr	r3, [r7, #4]
 8016b7c:	7b1b      	ldrb	r3, [r3, #12]
 8016b7e:	071b      	lsls	r3, r3, #28
 8016b80:	0f1b      	lsrs	r3, r3, #28
 8016b82:	b2db      	uxtb	r3, r3
 8016b84:	b29b      	uxth	r3, r3
 8016b86:	001a      	movs	r2, r3
 8016b88:	f002 fd02 	bl	8019590 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8016b8c:	687b      	ldr	r3, [r7, #4]
 8016b8e:	7b1b      	ldrb	r3, [r3, #12]
 8016b90:	071b      	lsls	r3, r3, #28
 8016b92:	0f1b      	lsrs	r3, r3, #28
 8016b94:	b2db      	uxtb	r3, r3
 8016b96:	b299      	uxth	r1, r3
 8016b98:	193b      	adds	r3, r7, r4
 8016b9a:	193a      	adds	r2, r7, r4
 8016b9c:	8812      	ldrh	r2, [r2, #0]
 8016b9e:	188a      	adds	r2, r1, r2
 8016ba0:	801a      	strh	r2, [r3, #0]

    if( macMsg->FRMPayloadSize > 0 )
 8016ba2:	687b      	ldr	r3, [r7, #4]
 8016ba4:	2228      	movs	r2, #40	; 0x28
 8016ba6:	5c9b      	ldrb	r3, [r3, r2]
 8016ba8:	2b00      	cmp	r3, #0
 8016baa:	d00b      	beq.n	8016bc4 <LoRaMacSerializerData+0x1aa>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8016bac:	687b      	ldr	r3, [r7, #4]
 8016bae:	681a      	ldr	r2, [r3, #0]
 8016bb0:	193b      	adds	r3, r7, r4
 8016bb2:	881b      	ldrh	r3, [r3, #0]
 8016bb4:	1939      	adds	r1, r7, r4
 8016bb6:	1c58      	adds	r0, r3, #1
 8016bb8:	8008      	strh	r0, [r1, #0]
 8016bba:	18d3      	adds	r3, r2, r3
 8016bbc:	687a      	ldr	r2, [r7, #4]
 8016bbe:	2120      	movs	r1, #32
 8016bc0:	5c52      	ldrb	r2, [r2, r1]
 8016bc2:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8016bc4:	687b      	ldr	r3, [r7, #4]
 8016bc6:	681a      	ldr	r2, [r3, #0]
 8016bc8:	240e      	movs	r4, #14
 8016bca:	193b      	adds	r3, r7, r4
 8016bcc:	881b      	ldrh	r3, [r3, #0]
 8016bce:	18d0      	adds	r0, r2, r3
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8016bd4:	687b      	ldr	r3, [r7, #4]
 8016bd6:	2228      	movs	r2, #40	; 0x28
 8016bd8:	5c9b      	ldrb	r3, [r3, r2]
 8016bda:	b29b      	uxth	r3, r3
 8016bdc:	001a      	movs	r2, r3
 8016bde:	f002 fcd7 	bl	8019590 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8016be2:	687b      	ldr	r3, [r7, #4]
 8016be4:	2228      	movs	r2, #40	; 0x28
 8016be6:	5c9b      	ldrb	r3, [r3, r2]
 8016be8:	b299      	uxth	r1, r3
 8016bea:	193b      	adds	r3, r7, r4
 8016bec:	193a      	adds	r2, r7, r4
 8016bee:	8812      	ldrh	r2, [r2, #0]
 8016bf0:	188a      	adds	r2, r1, r2
 8016bf2:	801a      	strh	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	681a      	ldr	r2, [r3, #0]
 8016bfc:	193b      	adds	r3, r7, r4
 8016bfe:	881b      	ldrh	r3, [r3, #0]
 8016c00:	0025      	movs	r5, r4
 8016c02:	1939      	adds	r1, r7, r4
 8016c04:	1c5c      	adds	r4, r3, #1
 8016c06:	800c      	strh	r4, [r1, #0]
 8016c08:	18d3      	adds	r3, r2, r3
 8016c0a:	b2c2      	uxtb	r2, r0
 8016c0c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8016c0e:	687b      	ldr	r3, [r7, #4]
 8016c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c12:	0a18      	lsrs	r0, r3, #8
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	681a      	ldr	r2, [r3, #0]
 8016c18:	197b      	adds	r3, r7, r5
 8016c1a:	881b      	ldrh	r3, [r3, #0]
 8016c1c:	1979      	adds	r1, r7, r5
 8016c1e:	1c5c      	adds	r4, r3, #1
 8016c20:	800c      	strh	r4, [r1, #0]
 8016c22:	18d3      	adds	r3, r2, r3
 8016c24:	b2c2      	uxtb	r2, r0
 8016c26:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c2c:	0c18      	lsrs	r0, r3, #16
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	681a      	ldr	r2, [r3, #0]
 8016c32:	197b      	adds	r3, r7, r5
 8016c34:	881b      	ldrh	r3, [r3, #0]
 8016c36:	1979      	adds	r1, r7, r5
 8016c38:	1c5c      	adds	r4, r3, #1
 8016c3a:	800c      	strh	r4, [r1, #0]
 8016c3c:	18d3      	adds	r3, r2, r3
 8016c3e:	b2c2      	uxtb	r2, r0
 8016c40:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8016c42:	687b      	ldr	r3, [r7, #4]
 8016c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c46:	0e18      	lsrs	r0, r3, #24
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	681a      	ldr	r2, [r3, #0]
 8016c4c:	197b      	adds	r3, r7, r5
 8016c4e:	881b      	ldrh	r3, [r3, #0]
 8016c50:	1979      	adds	r1, r7, r5
 8016c52:	1c5c      	adds	r4, r3, #1
 8016c54:	800c      	strh	r4, [r1, #0]
 8016c56:	18d3      	adds	r3, r2, r3
 8016c58:	b2c2      	uxtb	r2, r0
 8016c5a:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8016c5c:	197b      	adds	r3, r7, r5
 8016c5e:	881b      	ldrh	r3, [r3, #0]
 8016c60:	b2da      	uxtb	r2, r3
 8016c62:	687b      	ldr	r3, [r7, #4]
 8016c64:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8016c66:	2300      	movs	r3, #0
}
 8016c68:	0018      	movs	r0, r3
 8016c6a:	46bd      	mov	sp, r7
 8016c6c:	b004      	add	sp, #16
 8016c6e:	bdb0      	pop	{r4, r5, r7, pc}

08016c70 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8016c70:	b580      	push	{r7, lr}
 8016c72:	b082      	sub	sp, #8
 8016c74:	af00      	add	r7, sp, #0
 8016c76:	0002      	movs	r2, r0
 8016c78:	1dfb      	adds	r3, r7, #7
 8016c7a:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016c7c:	1dfb      	adds	r3, r7, #7
 8016c7e:	781b      	ldrb	r3, [r3, #0]
 8016c80:	2b05      	cmp	r3, #5
 8016c82:	d101      	bne.n	8016c88 <RegionIsActive+0x18>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 8016c84:	2301      	movs	r3, #1
 8016c86:	e000      	b.n	8016c8a <RegionIsActive+0x1a>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8016c88:	2300      	movs	r3, #0
        }
    }
}
 8016c8a:	0018      	movs	r0, r3
 8016c8c:	46bd      	mov	sp, r7
 8016c8e:	b002      	add	sp, #8
 8016c90:	bd80      	pop	{r7, pc}

08016c92 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8016c92:	b580      	push	{r7, lr}
 8016c94:	b084      	sub	sp, #16
 8016c96:	af00      	add	r7, sp, #0
 8016c98:	0002      	movs	r2, r0
 8016c9a:	6039      	str	r1, [r7, #0]
 8016c9c:	1dfb      	adds	r3, r7, #7
 8016c9e:	701a      	strb	r2, [r3, #0]
    PhyParam_t phyParam = { 0 };
 8016ca0:	2308      	movs	r3, #8
 8016ca2:	18fb      	adds	r3, r7, r3
 8016ca4:	2200      	movs	r2, #0
 8016ca6:	601a      	str	r2, [r3, #0]
    switch( region )
 8016ca8:	1dfb      	adds	r3, r7, #7
 8016caa:	781b      	ldrb	r3, [r3, #0]
 8016cac:	2b05      	cmp	r3, #5
 8016cae:	d109      	bne.n	8016cc4 <RegionGetPhyParam+0x32>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 8016cb0:	683b      	ldr	r3, [r7, #0]
 8016cb2:	0018      	movs	r0, r3
 8016cb4:	f001 fa4e 	bl	8018154 <RegionEU868GetPhyParam>
 8016cb8:	0003      	movs	r3, r0
 8016cba:	001a      	movs	r2, r3
 8016cbc:	230c      	movs	r3, #12
 8016cbe:	18fb      	adds	r3, r7, r3
 8016cc0:	601a      	str	r2, [r3, #0]
 8016cc2:	e005      	b.n	8016cd0 <RegionGetPhyParam+0x3e>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8016cc4:	230c      	movs	r3, #12
 8016cc6:	18fb      	adds	r3, r7, r3
 8016cc8:	2208      	movs	r2, #8
 8016cca:	18ba      	adds	r2, r7, r2
 8016ccc:	6812      	ldr	r2, [r2, #0]
 8016cce:	601a      	str	r2, [r3, #0]
 8016cd0:	230c      	movs	r3, #12
 8016cd2:	18fb      	adds	r3, r7, r3
 8016cd4:	2200      	movs	r2, #0
 8016cd6:	681a      	ldr	r2, [r3, #0]
 8016cd8:	0013      	movs	r3, r2
        }
    }
}
 8016cda:	0018      	movs	r0, r3
 8016cdc:	46bd      	mov	sp, r7
 8016cde:	b004      	add	sp, #16
 8016ce0:	bd80      	pop	{r7, pc}

08016ce2 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8016ce2:	b580      	push	{r7, lr}
 8016ce4:	b082      	sub	sp, #8
 8016ce6:	af00      	add	r7, sp, #0
 8016ce8:	0002      	movs	r2, r0
 8016cea:	6039      	str	r1, [r7, #0]
 8016cec:	1dfb      	adds	r3, r7, #7
 8016cee:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016cf0:	1dfb      	adds	r3, r7, #7
 8016cf2:	781b      	ldrb	r3, [r3, #0]
 8016cf4:	2b05      	cmp	r3, #5
 8016cf6:	d104      	bne.n	8016d02 <RegionSetBandTxDone+0x20>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 8016cf8:	683b      	ldr	r3, [r7, #0]
 8016cfa:	0018      	movs	r0, r3
 8016cfc:	f001 fb4a 	bl	8018394 <RegionEU868SetBandTxDone>
 8016d00:	e000      	b.n	8016d04 <RegionSetBandTxDone+0x22>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8016d02:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8016d04:	46bd      	mov	sp, r7
 8016d06:	b002      	add	sp, #8
 8016d08:	bd80      	pop	{r7, pc}

08016d0a <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8016d0a:	b580      	push	{r7, lr}
 8016d0c:	b082      	sub	sp, #8
 8016d0e:	af00      	add	r7, sp, #0
 8016d10:	0002      	movs	r2, r0
 8016d12:	6039      	str	r1, [r7, #0]
 8016d14:	1dfb      	adds	r3, r7, #7
 8016d16:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016d18:	1dfb      	adds	r3, r7, #7
 8016d1a:	781b      	ldrb	r3, [r3, #0]
 8016d1c:	2b05      	cmp	r3, #5
 8016d1e:	d104      	bne.n	8016d2a <RegionInitDefaults+0x20>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 8016d20:	683b      	ldr	r3, [r7, #0]
 8016d22:	0018      	movs	r0, r3
 8016d24:	f001 fb62 	bl	80183ec <RegionEU868InitDefaults>
 8016d28:	e000      	b.n	8016d2c <RegionInitDefaults+0x22>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8016d2a:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8016d2c:	46c0      	nop			; (mov r8, r8)
 8016d2e:	46bd      	mov	sp, r7
 8016d30:	b002      	add	sp, #8
 8016d32:	bd80      	pop	{r7, pc}

08016d34 <RegionGetNvmCtx>:

void* RegionGetNvmCtx( LoRaMacRegion_t region, GetNvmCtxParams_t* params )
{
 8016d34:	b580      	push	{r7, lr}
 8016d36:	b082      	sub	sp, #8
 8016d38:	af00      	add	r7, sp, #0
 8016d3a:	0002      	movs	r2, r0
 8016d3c:	6039      	str	r1, [r7, #0]
 8016d3e:	1dfb      	adds	r3, r7, #7
 8016d40:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016d42:	1dfb      	adds	r3, r7, #7
 8016d44:	781b      	ldrb	r3, [r3, #0]
 8016d46:	2b05      	cmp	r3, #5
 8016d48:	d105      	bne.n	8016d56 <RegionGetNvmCtx+0x22>
        AS923_GET_NVM_CTX( );
        AU915_GET_NVM_CTX( );
        CN470_GET_NVM_CTX( );
        CN779_GET_NVM_CTX( );
        EU433_GET_NVM_CTX( );
        EU868_GET_NVM_CTX( );
 8016d4a:	683b      	ldr	r3, [r7, #0]
 8016d4c:	0018      	movs	r0, r3
 8016d4e:	f001 fbe1 	bl	8018514 <RegionEU868GetNvmCtx>
 8016d52:	0003      	movs	r3, r0
 8016d54:	e000      	b.n	8016d58 <RegionGetNvmCtx+0x24>
        IN865_GET_NVM_CTX( );
        US915_GET_NVM_CTX( );
        RU864_GET_NVM_CTX( );
        default:
        {
           return 0;
 8016d56:	2300      	movs	r3, #0
        }
    }
}
 8016d58:	0018      	movs	r0, r3
 8016d5a:	46bd      	mov	sp, r7
 8016d5c:	b002      	add	sp, #8
 8016d5e:	bd80      	pop	{r7, pc}

08016d60 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8016d60:	b580      	push	{r7, lr}
 8016d62:	b082      	sub	sp, #8
 8016d64:	af00      	add	r7, sp, #0
 8016d66:	6039      	str	r1, [r7, #0]
 8016d68:	0011      	movs	r1, r2
 8016d6a:	1dfb      	adds	r3, r7, #7
 8016d6c:	1c02      	adds	r2, r0, #0
 8016d6e:	701a      	strb	r2, [r3, #0]
 8016d70:	1dbb      	adds	r3, r7, #6
 8016d72:	1c0a      	adds	r2, r1, #0
 8016d74:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016d76:	1dfb      	adds	r3, r7, #7
 8016d78:	781b      	ldrb	r3, [r3, #0]
 8016d7a:	2b05      	cmp	r3, #5
 8016d7c:	d108      	bne.n	8016d90 <RegionVerify+0x30>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 8016d7e:	1dbb      	adds	r3, r7, #6
 8016d80:	781a      	ldrb	r2, [r3, #0]
 8016d82:	683b      	ldr	r3, [r7, #0]
 8016d84:	0011      	movs	r1, r2
 8016d86:	0018      	movs	r0, r3
 8016d88:	f001 fbd4 	bl	8018534 <RegionEU868Verify>
 8016d8c:	0003      	movs	r3, r0
 8016d8e:	e000      	b.n	8016d92 <RegionVerify+0x32>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 8016d90:	2300      	movs	r3, #0
        }
    }
}
 8016d92:	0018      	movs	r0, r3
 8016d94:	46bd      	mov	sp, r7
 8016d96:	b002      	add	sp, #8
 8016d98:	bd80      	pop	{r7, pc}

08016d9a <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8016d9a:	b580      	push	{r7, lr}
 8016d9c:	b082      	sub	sp, #8
 8016d9e:	af00      	add	r7, sp, #0
 8016da0:	0002      	movs	r2, r0
 8016da2:	6039      	str	r1, [r7, #0]
 8016da4:	1dfb      	adds	r3, r7, #7
 8016da6:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016da8:	1dfb      	adds	r3, r7, #7
 8016daa:	781b      	ldrb	r3, [r3, #0]
 8016dac:	2b05      	cmp	r3, #5
 8016dae:	d104      	bne.n	8016dba <RegionApplyCFList+0x20>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 8016db0:	683b      	ldr	r3, [r7, #0]
 8016db2:	0018      	movs	r0, r3
 8016db4:	f001 fc18 	bl	80185e8 <RegionEU868ApplyCFList>
 8016db8:	e000      	b.n	8016dbc <RegionApplyCFList+0x22>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8016dba:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8016dbc:	46c0      	nop			; (mov r8, r8)
 8016dbe:	46bd      	mov	sp, r7
 8016dc0:	b002      	add	sp, #8
 8016dc2:	bd80      	pop	{r7, pc}

08016dc4 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8016dc4:	b580      	push	{r7, lr}
 8016dc6:	b082      	sub	sp, #8
 8016dc8:	af00      	add	r7, sp, #0
 8016dca:	0002      	movs	r2, r0
 8016dcc:	6039      	str	r1, [r7, #0]
 8016dce:	1dfb      	adds	r3, r7, #7
 8016dd0:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016dd2:	1dfb      	adds	r3, r7, #7
 8016dd4:	781b      	ldrb	r3, [r3, #0]
 8016dd6:	2b05      	cmp	r3, #5
 8016dd8:	d105      	bne.n	8016de6 <RegionChanMaskSet+0x22>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 8016dda:	683b      	ldr	r3, [r7, #0]
 8016ddc:	0018      	movs	r0, r3
 8016dde:	f001 fc93 	bl	8018708 <RegionEU868ChanMaskSet>
 8016de2:	0003      	movs	r3, r0
 8016de4:	e000      	b.n	8016de8 <RegionChanMaskSet+0x24>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8016de6:	2300      	movs	r3, #0
        }
    }
}
 8016de8:	0018      	movs	r0, r3
 8016dea:	46bd      	mov	sp, r7
 8016dec:	b002      	add	sp, #8
 8016dee:	bd80      	pop	{r7, pc}

08016df0 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8016df0:	b590      	push	{r4, r7, lr}
 8016df2:	b083      	sub	sp, #12
 8016df4:	af00      	add	r7, sp, #0
 8016df6:	0004      	movs	r4, r0
 8016df8:	0008      	movs	r0, r1
 8016dfa:	0011      	movs	r1, r2
 8016dfc:	603b      	str	r3, [r7, #0]
 8016dfe:	1dfb      	adds	r3, r7, #7
 8016e00:	1c22      	adds	r2, r4, #0
 8016e02:	701a      	strb	r2, [r3, #0]
 8016e04:	1dbb      	adds	r3, r7, #6
 8016e06:	1c02      	adds	r2, r0, #0
 8016e08:	701a      	strb	r2, [r3, #0]
 8016e0a:	1d7b      	adds	r3, r7, #5
 8016e0c:	1c0a      	adds	r2, r1, #0
 8016e0e:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016e10:	1dfb      	adds	r3, r7, #7
 8016e12:	781b      	ldrb	r3, [r3, #0]
 8016e14:	2b05      	cmp	r3, #5
 8016e16:	d10a      	bne.n	8016e2e <RegionComputeRxWindowParameters+0x3e>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 8016e18:	69bc      	ldr	r4, [r7, #24]
 8016e1a:	683a      	ldr	r2, [r7, #0]
 8016e1c:	1d7b      	adds	r3, r7, #5
 8016e1e:	7819      	ldrb	r1, [r3, #0]
 8016e20:	1dbb      	adds	r3, r7, #6
 8016e22:	2000      	movs	r0, #0
 8016e24:	5618      	ldrsb	r0, [r3, r0]
 8016e26:	0023      	movs	r3, r4
 8016e28:	f001 fc94 	bl	8018754 <RegionEU868ComputeRxWindowParameters>
 8016e2c:	e000      	b.n	8016e30 <RegionComputeRxWindowParameters+0x40>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8016e2e:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8016e30:	46c0      	nop			; (mov r8, r8)
 8016e32:	46bd      	mov	sp, r7
 8016e34:	b003      	add	sp, #12
 8016e36:	bd90      	pop	{r4, r7, pc}

08016e38 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8016e38:	b580      	push	{r7, lr}
 8016e3a:	b084      	sub	sp, #16
 8016e3c:	af00      	add	r7, sp, #0
 8016e3e:	60b9      	str	r1, [r7, #8]
 8016e40:	607a      	str	r2, [r7, #4]
 8016e42:	210f      	movs	r1, #15
 8016e44:	187b      	adds	r3, r7, r1
 8016e46:	1c02      	adds	r2, r0, #0
 8016e48:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016e4a:	187b      	adds	r3, r7, r1
 8016e4c:	781b      	ldrb	r3, [r3, #0]
 8016e4e:	2b05      	cmp	r3, #5
 8016e50:	d107      	bne.n	8016e62 <RegionRxConfig+0x2a>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8016e52:	687a      	ldr	r2, [r7, #4]
 8016e54:	68bb      	ldr	r3, [r7, #8]
 8016e56:	0011      	movs	r1, r2
 8016e58:	0018      	movs	r0, r3
 8016e5a:	f001 fcdd 	bl	8018818 <RegionEU868RxConfig>
 8016e5e:	0003      	movs	r3, r0
 8016e60:	e000      	b.n	8016e64 <RegionRxConfig+0x2c>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8016e62:	2300      	movs	r3, #0
        }
    }
}
 8016e64:	0018      	movs	r0, r3
 8016e66:	46bd      	mov	sp, r7
 8016e68:	b004      	add	sp, #16
 8016e6a:	bd80      	pop	{r7, pc}

08016e6c <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8016e6c:	b580      	push	{r7, lr}
 8016e6e:	b084      	sub	sp, #16
 8016e70:	af00      	add	r7, sp, #0
 8016e72:	60b9      	str	r1, [r7, #8]
 8016e74:	607a      	str	r2, [r7, #4]
 8016e76:	603b      	str	r3, [r7, #0]
 8016e78:	210f      	movs	r1, #15
 8016e7a:	187b      	adds	r3, r7, r1
 8016e7c:	1c02      	adds	r2, r0, #0
 8016e7e:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016e80:	187b      	adds	r3, r7, r1
 8016e82:	781b      	ldrb	r3, [r3, #0]
 8016e84:	2b05      	cmp	r3, #5
 8016e86:	d107      	bne.n	8016e98 <RegionTxConfig+0x2c>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8016e88:	683a      	ldr	r2, [r7, #0]
 8016e8a:	6879      	ldr	r1, [r7, #4]
 8016e8c:	68bb      	ldr	r3, [r7, #8]
 8016e8e:	0018      	movs	r0, r3
 8016e90:	f001 fdb6 	bl	8018a00 <RegionEU868TxConfig>
 8016e94:	0003      	movs	r3, r0
 8016e96:	e000      	b.n	8016e9a <RegionTxConfig+0x2e>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8016e98:	2300      	movs	r3, #0
        }
    }
}
 8016e9a:	0018      	movs	r0, r3
 8016e9c:	46bd      	mov	sp, r7
 8016e9e:	b004      	add	sp, #16
 8016ea0:	bd80      	pop	{r7, pc}

08016ea2 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8016ea2:	b590      	push	{r4, r7, lr}
 8016ea4:	b087      	sub	sp, #28
 8016ea6:	af02      	add	r7, sp, #8
 8016ea8:	60b9      	str	r1, [r7, #8]
 8016eaa:	607a      	str	r2, [r7, #4]
 8016eac:	603b      	str	r3, [r7, #0]
 8016eae:	210f      	movs	r1, #15
 8016eb0:	187b      	adds	r3, r7, r1
 8016eb2:	1c02      	adds	r2, r0, #0
 8016eb4:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016eb6:	187b      	adds	r3, r7, r1
 8016eb8:	781b      	ldrb	r3, [r3, #0]
 8016eba:	2b05      	cmp	r3, #5
 8016ebc:	d10a      	bne.n	8016ed4 <RegionLinkAdrReq+0x32>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 8016ebe:	6a3c      	ldr	r4, [r7, #32]
 8016ec0:	683a      	ldr	r2, [r7, #0]
 8016ec2:	6879      	ldr	r1, [r7, #4]
 8016ec4:	68b8      	ldr	r0, [r7, #8]
 8016ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ec8:	9300      	str	r3, [sp, #0]
 8016eca:	0023      	movs	r3, r4
 8016ecc:	f001 fe84 	bl	8018bd8 <RegionEU868LinkAdrReq>
 8016ed0:	0003      	movs	r3, r0
 8016ed2:	e000      	b.n	8016ed6 <RegionLinkAdrReq+0x34>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8016ed4:	2300      	movs	r3, #0
        }
    }
}
 8016ed6:	0018      	movs	r0, r3
 8016ed8:	46bd      	mov	sp, r7
 8016eda:	b005      	add	sp, #20
 8016edc:	bd90      	pop	{r4, r7, pc}

08016ede <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8016ede:	b580      	push	{r7, lr}
 8016ee0:	b082      	sub	sp, #8
 8016ee2:	af00      	add	r7, sp, #0
 8016ee4:	0002      	movs	r2, r0
 8016ee6:	6039      	str	r1, [r7, #0]
 8016ee8:	1dfb      	adds	r3, r7, #7
 8016eea:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016eec:	1dfb      	adds	r3, r7, #7
 8016eee:	781b      	ldrb	r3, [r3, #0]
 8016ef0:	2b05      	cmp	r3, #5
 8016ef2:	d105      	bne.n	8016f00 <RegionRxParamSetupReq+0x22>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 8016ef4:	683b      	ldr	r3, [r7, #0]
 8016ef6:	0018      	movs	r0, r3
 8016ef8:	f001 ffc6 	bl	8018e88 <RegionEU868RxParamSetupReq>
 8016efc:	0003      	movs	r3, r0
 8016efe:	e000      	b.n	8016f02 <RegionRxParamSetupReq+0x24>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8016f00:	2300      	movs	r3, #0
        }
    }
}
 8016f02:	0018      	movs	r0, r3
 8016f04:	46bd      	mov	sp, r7
 8016f06:	b002      	add	sp, #8
 8016f08:	bd80      	pop	{r7, pc}

08016f0a <RegionNewChannelReq>:

uint8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8016f0a:	b580      	push	{r7, lr}
 8016f0c:	b082      	sub	sp, #8
 8016f0e:	af00      	add	r7, sp, #0
 8016f10:	0002      	movs	r2, r0
 8016f12:	6039      	str	r1, [r7, #0]
 8016f14:	1dfb      	adds	r3, r7, #7
 8016f16:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016f18:	1dfb      	adds	r3, r7, #7
 8016f1a:	781b      	ldrb	r3, [r3, #0]
 8016f1c:	2b05      	cmp	r3, #5
 8016f1e:	d105      	bne.n	8016f2c <RegionNewChannelReq+0x22>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 8016f20:	683b      	ldr	r3, [r7, #0]
 8016f22:	0018      	movs	r0, r3
 8016f24:	f001 fff9 	bl	8018f1a <RegionEU868NewChannelReq>
 8016f28:	0003      	movs	r3, r0
 8016f2a:	e000      	b.n	8016f2e <RegionNewChannelReq+0x24>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8016f2c:	2300      	movs	r3, #0
        }
    }
}
 8016f2e:	0018      	movs	r0, r3
 8016f30:	46bd      	mov	sp, r7
 8016f32:	b002      	add	sp, #8
 8016f34:	bd80      	pop	{r7, pc}

08016f36 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8016f36:	b580      	push	{r7, lr}
 8016f38:	b082      	sub	sp, #8
 8016f3a:	af00      	add	r7, sp, #0
 8016f3c:	0002      	movs	r2, r0
 8016f3e:	6039      	str	r1, [r7, #0]
 8016f40:	1dfb      	adds	r3, r7, #7
 8016f42:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016f44:	1dfb      	adds	r3, r7, #7
 8016f46:	781b      	ldrb	r3, [r3, #0]
 8016f48:	2b05      	cmp	r3, #5
 8016f4a:	d105      	bne.n	8016f58 <RegionTxParamSetupReq+0x22>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 8016f4c:	683b      	ldr	r3, [r7, #0]
 8016f4e:	0018      	movs	r0, r3
 8016f50:	f002 f84b 	bl	8018fea <RegionEU868TxParamSetupReq>
 8016f54:	0003      	movs	r3, r0
 8016f56:	e000      	b.n	8016f5a <RegionTxParamSetupReq+0x24>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8016f58:	2300      	movs	r3, #0
        }
    }
}
 8016f5a:	0018      	movs	r0, r3
 8016f5c:	46bd      	mov	sp, r7
 8016f5e:	b002      	add	sp, #8
 8016f60:	bd80      	pop	{r7, pc}

08016f62 <RegionDlChannelReq>:

uint8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8016f62:	b580      	push	{r7, lr}
 8016f64:	b082      	sub	sp, #8
 8016f66:	af00      	add	r7, sp, #0
 8016f68:	0002      	movs	r2, r0
 8016f6a:	6039      	str	r1, [r7, #0]
 8016f6c:	1dfb      	adds	r3, r7, #7
 8016f6e:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016f70:	1dfb      	adds	r3, r7, #7
 8016f72:	781b      	ldrb	r3, [r3, #0]
 8016f74:	2b05      	cmp	r3, #5
 8016f76:	d105      	bne.n	8016f84 <RegionDlChannelReq+0x22>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8016f78:	683b      	ldr	r3, [r7, #0]
 8016f7a:	0018      	movs	r0, r3
 8016f7c:	f002 f840 	bl	8019000 <RegionEU868DlChannelReq>
 8016f80:	0003      	movs	r3, r0
 8016f82:	e000      	b.n	8016f86 <RegionDlChannelReq+0x24>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8016f84:	2300      	movs	r3, #0
        }
    }
}
 8016f86:	0018      	movs	r0, r3
 8016f88:	46bd      	mov	sp, r7
 8016f8a:	b002      	add	sp, #8
 8016f8c:	bd80      	pop	{r7, pc}

08016f8e <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8016f8e:	b590      	push	{r4, r7, lr}
 8016f90:	b083      	sub	sp, #12
 8016f92:	af00      	add	r7, sp, #0
 8016f94:	0004      	movs	r4, r0
 8016f96:	0008      	movs	r0, r1
 8016f98:	0011      	movs	r1, r2
 8016f9a:	1dfb      	adds	r3, r7, #7
 8016f9c:	1c22      	adds	r2, r4, #0
 8016f9e:	701a      	strb	r2, [r3, #0]
 8016fa0:	1dbb      	adds	r3, r7, #6
 8016fa2:	1c02      	adds	r2, r0, #0
 8016fa4:	701a      	strb	r2, [r3, #0]
 8016fa6:	1d7b      	adds	r3, r7, #5
 8016fa8:	1c0a      	adds	r2, r1, #0
 8016faa:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016fac:	1dfb      	adds	r3, r7, #7
 8016fae:	781b      	ldrb	r3, [r3, #0]
 8016fb0:	2b05      	cmp	r3, #5
 8016fb2:	d10a      	bne.n	8016fca <RegionAlternateDr+0x3c>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8016fb4:	1d7b      	adds	r3, r7, #5
 8016fb6:	781a      	ldrb	r2, [r3, #0]
 8016fb8:	1dbb      	adds	r3, r7, #6
 8016fba:	781b      	ldrb	r3, [r3, #0]
 8016fbc:	b25b      	sxtb	r3, r3
 8016fbe:	0011      	movs	r1, r2
 8016fc0:	0018      	movs	r0, r3
 8016fc2:	f002 f86b 	bl	801909c <RegionEU868AlternateDr>
 8016fc6:	0003      	movs	r3, r0
 8016fc8:	e000      	b.n	8016fcc <RegionAlternateDr+0x3e>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8016fca:	2300      	movs	r3, #0
        }
    }
}
 8016fcc:	0018      	movs	r0, r3
 8016fce:	46bd      	mov	sp, r7
 8016fd0:	b003      	add	sp, #12
 8016fd2:	bd90      	pop	{r4, r7, pc}

08016fd4 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8016fd4:	b580      	push	{r7, lr}
 8016fd6:	b084      	sub	sp, #16
 8016fd8:	af00      	add	r7, sp, #0
 8016fda:	60b9      	str	r1, [r7, #8]
 8016fdc:	607a      	str	r2, [r7, #4]
 8016fde:	603b      	str	r3, [r7, #0]
 8016fe0:	210f      	movs	r1, #15
 8016fe2:	187b      	adds	r3, r7, r1
 8016fe4:	1c02      	adds	r2, r0, #0
 8016fe6:	701a      	strb	r2, [r3, #0]
    switch( region )
 8016fe8:	187b      	adds	r3, r7, r1
 8016fea:	781b      	ldrb	r3, [r3, #0]
 8016fec:	2b05      	cmp	r3, #5
 8016fee:	d107      	bne.n	8017000 <RegionNextChannel+0x2c>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 8016ff0:	69bb      	ldr	r3, [r7, #24]
 8016ff2:	683a      	ldr	r2, [r7, #0]
 8016ff4:	6879      	ldr	r1, [r7, #4]
 8016ff6:	68b8      	ldr	r0, [r7, #8]
 8016ff8:	f002 f860 	bl	80190bc <RegionEU868NextChannel>
 8016ffc:	0003      	movs	r3, r0
 8016ffe:	e000      	b.n	8017002 <RegionNextChannel+0x2e>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8017000:	2309      	movs	r3, #9
        }
    }
}
 8017002:	0018      	movs	r0, r3
 8017004:	46bd      	mov	sp, r7
 8017006:	b004      	add	sp, #16
 8017008:	bd80      	pop	{r7, pc}

0801700a <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 801700a:	b580      	push	{r7, lr}
 801700c:	b082      	sub	sp, #8
 801700e:	af00      	add	r7, sp, #0
 8017010:	0002      	movs	r2, r0
 8017012:	6039      	str	r1, [r7, #0]
 8017014:	1dfb      	adds	r3, r7, #7
 8017016:	701a      	strb	r2, [r3, #0]
    switch( region )
 8017018:	1dfb      	adds	r3, r7, #7
 801701a:	781b      	ldrb	r3, [r3, #0]
 801701c:	2b05      	cmp	r3, #5
 801701e:	d104      	bne.n	801702a <RegionSetContinuousWave+0x20>
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 8017020:	683b      	ldr	r3, [r7, #0]
 8017022:	0018      	movs	r0, r3
 8017024:	f002 f9f4 	bl	8019410 <RegionEU868SetContinuousWave>
 8017028:	e000      	b.n	801702c <RegionSetContinuousWave+0x22>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 801702a:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 801702c:	46c0      	nop			; (mov r8, r8)
 801702e:	46bd      	mov	sp, r7
 8017030:	b002      	add	sp, #8
 8017032:	bd80      	pop	{r7, pc}

08017034 <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8017034:	b5b0      	push	{r4, r5, r7, lr}
 8017036:	b082      	sub	sp, #8
 8017038:	af00      	add	r7, sp, #0
 801703a:	0005      	movs	r5, r0
 801703c:	000c      	movs	r4, r1
 801703e:	0010      	movs	r0, r2
 8017040:	0019      	movs	r1, r3
 8017042:	1dfb      	adds	r3, r7, #7
 8017044:	1c2a      	adds	r2, r5, #0
 8017046:	701a      	strb	r2, [r3, #0]
 8017048:	1dbb      	adds	r3, r7, #6
 801704a:	1c22      	adds	r2, r4, #0
 801704c:	701a      	strb	r2, [r3, #0]
 801704e:	1d7b      	adds	r3, r7, #5
 8017050:	1c02      	adds	r2, r0, #0
 8017052:	701a      	strb	r2, [r3, #0]
 8017054:	1d3b      	adds	r3, r7, #4
 8017056:	1c0a      	adds	r2, r1, #0
 8017058:	701a      	strb	r2, [r3, #0]
    switch( region )
 801705a:	1dfb      	adds	r3, r7, #7
 801705c:	781b      	ldrb	r3, [r3, #0]
 801705e:	2b05      	cmp	r3, #5
 8017060:	d10c      	bne.n	801707c <RegionApplyDrOffset+0x48>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 8017062:	1d3b      	adds	r3, r7, #4
 8017064:	2200      	movs	r2, #0
 8017066:	569a      	ldrsb	r2, [r3, r2]
 8017068:	1d7b      	adds	r3, r7, #5
 801706a:	2100      	movs	r1, #0
 801706c:	5659      	ldrsb	r1, [r3, r1]
 801706e:	1dbb      	adds	r3, r7, #6
 8017070:	781b      	ldrb	r3, [r3, #0]
 8017072:	0018      	movs	r0, r3
 8017074:	f002 fa24 	bl	80194c0 <RegionEU868ApplyDrOffset>
 8017078:	0003      	movs	r3, r0
 801707a:	e001      	b.n	8017080 <RegionApplyDrOffset+0x4c>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 801707c:	1d7b      	adds	r3, r7, #5
 801707e:	781b      	ldrb	r3, [r3, #0]
        }
    }
}
 8017080:	0018      	movs	r0, r3
 8017082:	46bd      	mov	sp, r7
 8017084:	b002      	add	sp, #8
 8017086:	bdb0      	pop	{r4, r5, r7, pc}

08017088 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8017088:	b580      	push	{r7, lr}
 801708a:	b082      	sub	sp, #8
 801708c:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 801708e:	4b03      	ldr	r3, [pc, #12]	; (801709c <RegionGetVersion+0x14>)
 8017090:	607b      	str	r3, [r7, #4]

    return version;
 8017092:	687b      	ldr	r3, [r7, #4]
}
 8017094:	0018      	movs	r0, r3
 8017096:	46bd      	mov	sp, r7
 8017098:	b002      	add	sp, #8
 801709a:	bd80      	pop	{r7, pc}
 801709c:	01000300 	.word	0x01000300

080170a0 <GetDutyCycle>:
 */
#define DUTY_CYCLE_TIME_PERIOD              3600000
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80170a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80170a2:	b087      	sub	sp, #28
 80170a4:	af00      	add	r7, sp, #0
 80170a6:	60f8      	str	r0, [r7, #12]
 80170a8:	0008      	movs	r0, r1
 80170aa:	0039      	movs	r1, r7
 80170ac:	600a      	str	r2, [r1, #0]
 80170ae:	604b      	str	r3, [r1, #4]
 80170b0:	230b      	movs	r3, #11
 80170b2:	18fb      	adds	r3, r7, r3
 80170b4:	1c02      	adds	r2, r0, #0
 80170b6:	701a      	strb	r2, [r3, #0]
    uint16_t joinDutyCycle = RegionCommonGetJoinDc( elapsedTimeSinceStartup );
 80170b8:	2514      	movs	r5, #20
 80170ba:	197c      	adds	r4, r7, r5
 80170bc:	003b      	movs	r3, r7
 80170be:	6818      	ldr	r0, [r3, #0]
 80170c0:	6859      	ldr	r1, [r3, #4]
 80170c2:	f000 f91b 	bl	80172fc <RegionCommonGetJoinDc>
 80170c6:	0003      	movs	r3, r0
 80170c8:	8023      	strh	r3, [r4, #0]
    uint16_t dutyCycle = band->DCycle;
 80170ca:	2616      	movs	r6, #22
 80170cc:	19bb      	adds	r3, r7, r6
 80170ce:	68fa      	ldr	r2, [r7, #12]
 80170d0:	8812      	ldrh	r2, [r2, #0]
 80170d2:	801a      	strh	r2, [r3, #0]

    if( joined == false )
 80170d4:	230b      	movs	r3, #11
 80170d6:	18fb      	adds	r3, r7, r3
 80170d8:	781b      	ldrb	r3, [r3, #0]
 80170da:	2201      	movs	r2, #1
 80170dc:	4053      	eors	r3, r2
 80170de:	b2db      	uxtb	r3, r3
 80170e0:	2b00      	cmp	r3, #0
 80170e2:	d012      	beq.n	801710a <GetDutyCycle+0x6a>
    {
        // Get the join duty cycle which depends on the runtime
        joinDutyCycle = RegionCommonGetJoinDc( elapsedTimeSinceStartup );
 80170e4:	197c      	adds	r4, r7, r5
 80170e6:	003b      	movs	r3, r7
 80170e8:	6818      	ldr	r0, [r3, #0]
 80170ea:	6859      	ldr	r1, [r3, #4]
 80170ec:	f000 f906 	bl	80172fc <RegionCommonGetJoinDc>
 80170f0:	0003      	movs	r3, r0
 80170f2:	8023      	strh	r3, [r4, #0]
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 80170f4:	19ba      	adds	r2, r7, r6
 80170f6:	197b      	adds	r3, r7, r5
 80170f8:	19b9      	adds	r1, r7, r6
 80170fa:	880c      	ldrh	r4, [r1, #0]
 80170fc:	881b      	ldrh	r3, [r3, #0]
 80170fe:	b298      	uxth	r0, r3
 8017100:	b2a1      	uxth	r1, r4
 8017102:	4288      	cmp	r0, r1
 8017104:	d200      	bcs.n	8017108 <GetDutyCycle+0x68>
 8017106:	1c23      	adds	r3, r4, #0
 8017108:	8013      	strh	r3, [r2, #0]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 801710a:	2216      	movs	r2, #22
 801710c:	18bb      	adds	r3, r7, r2
 801710e:	881b      	ldrh	r3, [r3, #0]
 8017110:	2b00      	cmp	r3, #0
 8017112:	d102      	bne.n	801711a <GetDutyCycle+0x7a>
    {
        dutyCycle = 1;
 8017114:	18bb      	adds	r3, r7, r2
 8017116:	2201      	movs	r2, #1
 8017118:	801a      	strh	r2, [r3, #0]
    }

    return dutyCycle;
 801711a:	2316      	movs	r3, #22
 801711c:	18fb      	adds	r3, r7, r3
 801711e:	881b      	ldrh	r3, [r3, #0]
}
 8017120:	0018      	movs	r0, r3
 8017122:	46bd      	mov	sp, r7
 8017124:	b007      	add	sp, #28
 8017126:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017128 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8017128:	b5f0      	push	{r4, r5, r6, r7, lr}
 801712a:	b087      	sub	sp, #28
 801712c:	af00      	add	r7, sp, #0
 801712e:	60f8      	str	r0, [r7, #12]
 8017130:	0008      	movs	r0, r1
 8017132:	0039      	movs	r1, r7
 8017134:	600a      	str	r2, [r1, #0]
 8017136:	604b      	str	r3, [r1, #4]
 8017138:	210b      	movs	r1, #11
 801713a:	187b      	adds	r3, r7, r1
 801713c:	1c02      	adds	r2, r0, #0
 801713e:	701a      	strb	r2, [r3, #0]
    uint16_t dutyCycle = band->DCycle;
 8017140:	2614      	movs	r6, #20
 8017142:	19bb      	adds	r3, r7, r6
 8017144:	68fa      	ldr	r2, [r7, #12]
 8017146:	8812      	ldrh	r2, [r2, #0]
 8017148:	801a      	strh	r2, [r3, #0]
    uint8_t timePeriodFactor = 1;
 801714a:	2317      	movs	r3, #23
 801714c:	18fb      	adds	r3, r7, r3
 801714e:	2201      	movs	r2, #1
 8017150:	701a      	strb	r2, [r3, #0]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8017152:	19bc      	adds	r4, r7, r6
 8017154:	003b      	movs	r3, r7
 8017156:	000d      	movs	r5, r1
 8017158:	187a      	adds	r2, r7, r1
 801715a:	7811      	ldrb	r1, [r2, #0]
 801715c:	68f8      	ldr	r0, [r7, #12]
 801715e:	681a      	ldr	r2, [r3, #0]
 8017160:	685b      	ldr	r3, [r3, #4]
 8017162:	f7ff ff9d 	bl	80170a0 <GetDutyCycle>
 8017166:	0003      	movs	r3, r0
 8017168:	8023      	strh	r3, [r4, #0]

    if( joined == false )
 801716a:	197b      	adds	r3, r7, r5
 801716c:	781b      	ldrb	r3, [r3, #0]
 801716e:	2201      	movs	r2, #1
 8017170:	4053      	eors	r3, r2
 8017172:	b2db      	uxtb	r3, r3
 8017174:	2b00      	cmp	r3, #0
 8017176:	d00a      	beq.n	801718e <SetMaxTimeCredits+0x66>
    {
        // Apply a factor to increase the maximum time period of observation
        timePeriodFactor = dutyCycle / BACKOFF_DC_TIMER_PERIOD_FACTOR;
 8017178:	19bb      	adds	r3, r7, r6
 801717a:	881b      	ldrh	r3, [r3, #0]
 801717c:	2164      	movs	r1, #100	; 0x64
 801717e:	0018      	movs	r0, r3
 8017180:	f7e8 ffca 	bl	8000118 <__udivsi3>
 8017184:	0003      	movs	r3, r0
 8017186:	b29a      	uxth	r2, r3
 8017188:	2317      	movs	r3, #23
 801718a:	18fb      	adds	r3, r7, r3
 801718c:	701a      	strb	r2, [r3, #0]
    }

    // Setup the maximum allowed credits
    band->MaxTimeCredits = DUTY_CYCLE_TIME_PERIOD * timePeriodFactor;
 801718e:	2317      	movs	r3, #23
 8017190:	18fb      	adds	r3, r7, r3
 8017192:	781b      	ldrb	r3, [r3, #0]
 8017194:	4a09      	ldr	r2, [pc, #36]	; (80171bc <SetMaxTimeCredits+0x94>)
 8017196:	4353      	muls	r3, r2
 8017198:	001a      	movs	r2, r3
 801719a:	68fb      	ldr	r3, [r7, #12]
 801719c:	60da      	str	r2, [r3, #12]

    // In case if it is the first time, update also the current
    // time credits
    if( band->LastBandUpdateTime == 0 )
 801719e:	68fb      	ldr	r3, [r7, #12]
 80171a0:	685b      	ldr	r3, [r3, #4]
 80171a2:	2b00      	cmp	r3, #0
 80171a4:	d103      	bne.n	80171ae <SetMaxTimeCredits+0x86>
    {
        band->TimeCredits = band->MaxTimeCredits;
 80171a6:	68fb      	ldr	r3, [r7, #12]
 80171a8:	68da      	ldr	r2, [r3, #12]
 80171aa:	68fb      	ldr	r3, [r7, #12]
 80171ac:	609a      	str	r2, [r3, #8]
    }

    return dutyCycle;
 80171ae:	2314      	movs	r3, #20
 80171b0:	18fb      	adds	r3, r7, r3
 80171b2:	881b      	ldrh	r3, [r3, #0]
}
 80171b4:	0018      	movs	r0, r3
 80171b6:	46bd      	mov	sp, r7
 80171b8:	b007      	add	sp, #28
 80171ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80171bc:	0036ee80 	.word	0x0036ee80

080171c0 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 80171c0:	b590      	push	{r4, r7, lr}
 80171c2:	b085      	sub	sp, #20
 80171c4:	af00      	add	r7, sp, #0
 80171c6:	6078      	str	r0, [r7, #4]
 80171c8:	000c      	movs	r4, r1
 80171ca:	0010      	movs	r0, r2
 80171cc:	0019      	movs	r1, r3
 80171ce:	1cfb      	adds	r3, r7, #3
 80171d0:	1c22      	adds	r2, r4, #0
 80171d2:	701a      	strb	r2, [r3, #0]
 80171d4:	1cbb      	adds	r3, r7, #2
 80171d6:	1c02      	adds	r2, r0, #0
 80171d8:	701a      	strb	r2, [r3, #0]
 80171da:	1c7b      	adds	r3, r7, #1
 80171dc:	1c0a      	adds	r2, r1, #0
 80171de:	701a      	strb	r2, [r3, #0]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup );
 80171e0:	230e      	movs	r3, #14
 80171e2:	18fc      	adds	r4, r7, r3
 80171e4:	2320      	movs	r3, #32
 80171e6:	18fb      	adds	r3, r7, r3
 80171e8:	1cfa      	adds	r2, r7, #3
 80171ea:	7811      	ldrb	r1, [r2, #0]
 80171ec:	6878      	ldr	r0, [r7, #4]
 80171ee:	681a      	ldr	r2, [r3, #0]
 80171f0:	685b      	ldr	r3, [r3, #4]
 80171f2:	f7ff ff99 	bl	8017128 <SetMaxTimeCredits>
 80171f6:	0003      	movs	r3, r0
 80171f8:	8023      	strh	r3, [r4, #0]

    if( joined == false )
 80171fa:	1cfb      	adds	r3, r7, #3
 80171fc:	781b      	ldrb	r3, [r3, #0]
 80171fe:	2201      	movs	r2, #1
 8017200:	4053      	eors	r3, r2
 8017202:	b2db      	uxtb	r3, r3
 8017204:	2b00      	cmp	r3, #0
 8017206:	d012      	beq.n	801722e <UpdateTimeCredits+0x6e>
    {
        if( ( dutyCycleEnabled == false ) &&
 8017208:	1cbb      	adds	r3, r7, #2
 801720a:	781b      	ldrb	r3, [r3, #0]
 801720c:	2201      	movs	r2, #1
 801720e:	4053      	eors	r3, r2
 8017210:	b2db      	uxtb	r3, r3
 8017212:	2b00      	cmp	r3, #0
 8017214:	d016      	beq.n	8017244 <UpdateTimeCredits+0x84>
            ( lastTxIsJoinRequest == false ) )
 8017216:	1c7b      	adds	r3, r7, #1
 8017218:	781b      	ldrb	r3, [r3, #0]
 801721a:	2201      	movs	r2, #1
 801721c:	4053      	eors	r3, r2
 801721e:	b2db      	uxtb	r3, r3
        if( ( dutyCycleEnabled == false ) &&
 8017220:	2b00      	cmp	r3, #0
 8017222:	d00f      	beq.n	8017244 <UpdateTimeCredits+0x84>
        {
            // This is the case when the duty cycle is off and the last uplink frame was not a join.
            // This could happen in case of a rejoin, e.g. in compliance test mode.
            // In this special case we have to set the time off to 0, since the join duty cycle shall only
            // be applied after the first join request.
            band->TimeCredits = band->MaxTimeCredits;
 8017224:	687b      	ldr	r3, [r7, #4]
 8017226:	68da      	ldr	r2, [r3, #12]
 8017228:	687b      	ldr	r3, [r7, #4]
 801722a:	609a      	str	r2, [r3, #8]
 801722c:	e00a      	b.n	8017244 <UpdateTimeCredits+0x84>
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 801722e:	1cbb      	adds	r3, r7, #2
 8017230:	781b      	ldrb	r3, [r3, #0]
 8017232:	2201      	movs	r2, #1
 8017234:	4053      	eors	r3, r2
 8017236:	b2db      	uxtb	r3, r3
 8017238:	2b00      	cmp	r3, #0
 801723a:	d003      	beq.n	8017244 <UpdateTimeCredits+0x84>
        {
            band->TimeCredits = band->MaxTimeCredits;
 801723c:	687b      	ldr	r3, [r7, #4]
 801723e:	68da      	ldr	r2, [r3, #12]
 8017240:	687b      	ldr	r3, [r7, #4]
 8017242:	609a      	str	r2, [r3, #8]
        }
    }

    // Get the difference between now and the last update
    band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8017244:	687b      	ldr	r3, [r7, #4]
 8017246:	685b      	ldr	r3, [r3, #4]
 8017248:	0018      	movs	r0, r3
 801724a:	f005 fe9d 	bl	801cf88 <UTIL_TIMER_GetElapsedTime>
 801724e:	0002      	movs	r2, r0
 8017250:	687b      	ldr	r3, [r7, #4]
 8017252:	689b      	ldr	r3, [r3, #8]
 8017254:	18d2      	adds	r2, r2, r3
 8017256:	687b      	ldr	r3, [r7, #4]
 8017258:	609a      	str	r2, [r3, #8]

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 801725a:	687b      	ldr	r3, [r7, #4]
 801725c:	689a      	ldr	r2, [r3, #8]
 801725e:	687b      	ldr	r3, [r7, #4]
 8017260:	68db      	ldr	r3, [r3, #12]
 8017262:	429a      	cmp	r2, r3
 8017264:	d903      	bls.n	801726e <UpdateTimeCredits+0xae>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8017266:	687b      	ldr	r3, [r7, #4]
 8017268:	68da      	ldr	r2, [r3, #12]
 801726a:	687b      	ldr	r3, [r7, #4]
 801726c:	609a      	str	r2, [r3, #8]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 801726e:	687b      	ldr	r3, [r7, #4]
 8017270:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017272:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 8017274:	230e      	movs	r3, #14
 8017276:	18fb      	adds	r3, r7, r3
 8017278:	881b      	ldrh	r3, [r3, #0]
}
 801727a:	0018      	movs	r0, r3
 801727c:	46bd      	mov	sp, r7
 801727e:	b005      	add	sp, #20
 8017280:	bd90      	pop	{r4, r7, pc}

08017282 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8017282:	b580      	push	{r7, lr}
 8017284:	b084      	sub	sp, #16
 8017286:	af00      	add	r7, sp, #0
 8017288:	0002      	movs	r2, r0
 801728a:	1dbb      	adds	r3, r7, #6
 801728c:	801a      	strh	r2, [r3, #0]
 801728e:	1d7b      	adds	r3, r7, #5
 8017290:	1c0a      	adds	r2, r1, #0
 8017292:	701a      	strb	r2, [r3, #0]
    uint8_t nbActiveBits = 0;
 8017294:	230f      	movs	r3, #15
 8017296:	18fb      	adds	r3, r7, r3
 8017298:	2200      	movs	r2, #0
 801729a:	701a      	strb	r2, [r3, #0]

    for( uint8_t j = 0; j < nbBits; j++ )
 801729c:	230e      	movs	r3, #14
 801729e:	18fb      	adds	r3, r7, r3
 80172a0:	2200      	movs	r2, #0
 80172a2:	701a      	strb	r2, [r3, #0]
 80172a4:	e01b      	b.n	80172de <CountChannels+0x5c>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 80172a6:	1dbb      	adds	r3, r7, #6
 80172a8:	881b      	ldrh	r3, [r3, #0]
 80172aa:	200e      	movs	r0, #14
 80172ac:	183a      	adds	r2, r7, r0
 80172ae:	7812      	ldrb	r2, [r2, #0]
 80172b0:	2101      	movs	r1, #1
 80172b2:	4091      	lsls	r1, r2
 80172b4:	000a      	movs	r2, r1
 80172b6:	401a      	ands	r2, r3
 80172b8:	183b      	adds	r3, r7, r0
 80172ba:	781b      	ldrb	r3, [r3, #0]
 80172bc:	2101      	movs	r1, #1
 80172be:	4099      	lsls	r1, r3
 80172c0:	000b      	movs	r3, r1
 80172c2:	429a      	cmp	r2, r3
 80172c4:	d105      	bne.n	80172d2 <CountChannels+0x50>
        {
            nbActiveBits++;
 80172c6:	210f      	movs	r1, #15
 80172c8:	187b      	adds	r3, r7, r1
 80172ca:	781a      	ldrb	r2, [r3, #0]
 80172cc:	187b      	adds	r3, r7, r1
 80172ce:	3201      	adds	r2, #1
 80172d0:	701a      	strb	r2, [r3, #0]
    for( uint8_t j = 0; j < nbBits; j++ )
 80172d2:	210e      	movs	r1, #14
 80172d4:	187b      	adds	r3, r7, r1
 80172d6:	781a      	ldrb	r2, [r3, #0]
 80172d8:	187b      	adds	r3, r7, r1
 80172da:	3201      	adds	r2, #1
 80172dc:	701a      	strb	r2, [r3, #0]
 80172de:	230e      	movs	r3, #14
 80172e0:	18fa      	adds	r2, r7, r3
 80172e2:	1d7b      	adds	r3, r7, #5
 80172e4:	7812      	ldrb	r2, [r2, #0]
 80172e6:	781b      	ldrb	r3, [r3, #0]
 80172e8:	429a      	cmp	r2, r3
 80172ea:	d3dc      	bcc.n	80172a6 <CountChannels+0x24>
        }
    }
    return nbActiveBits;
 80172ec:	230f      	movs	r3, #15
 80172ee:	18fb      	adds	r3, r7, r3
 80172f0:	781b      	ldrb	r3, [r3, #0]
}
 80172f2:	0018      	movs	r0, r3
 80172f4:	46bd      	mov	sp, r7
 80172f6:	b004      	add	sp, #16
 80172f8:	bd80      	pop	{r7, pc}
	...

080172fc <RegionCommonGetJoinDc>:

uint16_t RegionCommonGetJoinDc( SysTime_t elapsedTime )
{
 80172fc:	b580      	push	{r7, lr}
 80172fe:	b084      	sub	sp, #16
 8017300:	af00      	add	r7, sp, #0
 8017302:	003b      	movs	r3, r7
 8017304:	6018      	str	r0, [r3, #0]
 8017306:	6059      	str	r1, [r3, #4]
    uint16_t dutyCycle = 0;
 8017308:	210e      	movs	r1, #14
 801730a:	187b      	adds	r3, r7, r1
 801730c:	2200      	movs	r2, #0
 801730e:	801a      	strh	r2, [r3, #0]

    if( elapsedTime.Seconds < 3600 )
 8017310:	003b      	movs	r3, r7
 8017312:	681a      	ldr	r2, [r3, #0]
 8017314:	23e1      	movs	r3, #225	; 0xe1
 8017316:	011b      	lsls	r3, r3, #4
 8017318:	429a      	cmp	r2, r3
 801731a:	d203      	bcs.n	8017324 <RegionCommonGetJoinDc+0x28>
    {
        dutyCycle = BACKOFF_DC_1_HOUR;
 801731c:	187b      	adds	r3, r7, r1
 801731e:	2264      	movs	r2, #100	; 0x64
 8017320:	801a      	strh	r2, [r3, #0]
 8017322:	e00e      	b.n	8017342 <RegionCommonGetJoinDc+0x46>
    }
    else if( elapsedTime.Seconds < ( 3600 + 36000 ) )
 8017324:	003b      	movs	r3, r7
 8017326:	681b      	ldr	r3, [r3, #0]
 8017328:	4a09      	ldr	r2, [pc, #36]	; (8017350 <RegionCommonGetJoinDc+0x54>)
 801732a:	4293      	cmp	r3, r2
 801732c:	d805      	bhi.n	801733a <RegionCommonGetJoinDc+0x3e>
    {
        dutyCycle = BACKOFF_DC_10_HOURS;
 801732e:	230e      	movs	r3, #14
 8017330:	18fb      	adds	r3, r7, r3
 8017332:	22fa      	movs	r2, #250	; 0xfa
 8017334:	0092      	lsls	r2, r2, #2
 8017336:	801a      	strh	r2, [r3, #0]
 8017338:	e003      	b.n	8017342 <RegionCommonGetJoinDc+0x46>
    }
    else
    {
        dutyCycle = BACKOFF_DC_24_HOURS;
 801733a:	230e      	movs	r3, #14
 801733c:	18fb      	adds	r3, r7, r3
 801733e:	4a05      	ldr	r2, [pc, #20]	; (8017354 <RegionCommonGetJoinDc+0x58>)
 8017340:	801a      	strh	r2, [r3, #0]
    }
    return dutyCycle;
 8017342:	230e      	movs	r3, #14
 8017344:	18fb      	adds	r3, r7, r3
 8017346:	881b      	ldrh	r3, [r3, #0]
}
 8017348:	0018      	movs	r0, r3
 801734a:	46bd      	mov	sp, r7
 801734c:	b004      	add	sp, #16
 801734e:	bd80      	pop	{r7, pc}
 8017350:	00009aaf 	.word	0x00009aaf
 8017354:	00002710 	.word	0x00002710

08017358 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8017358:	b590      	push	{r4, r7, lr}
 801735a:	b085      	sub	sp, #20
 801735c:	af00      	add	r7, sp, #0
 801735e:	0004      	movs	r4, r0
 8017360:	6039      	str	r1, [r7, #0]
 8017362:	0010      	movs	r0, r2
 8017364:	0019      	movs	r1, r3
 8017366:	1dfb      	adds	r3, r7, #7
 8017368:	1c22      	adds	r2, r4, #0
 801736a:	701a      	strb	r2, [r3, #0]
 801736c:	1dbb      	adds	r3, r7, #6
 801736e:	1c02      	adds	r2, r0, #0
 8017370:	701a      	strb	r2, [r3, #0]
 8017372:	1d7b      	adds	r3, r7, #5
 8017374:	1c0a      	adds	r2, r1, #0
 8017376:	701a      	strb	r2, [r3, #0]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8017378:	2320      	movs	r3, #32
 801737a:	18fb      	adds	r3, r7, r3
 801737c:	2200      	movs	r2, #0
 801737e:	569a      	ldrsb	r2, [r3, r2]
 8017380:	1d7b      	adds	r3, r7, #5
 8017382:	2100      	movs	r1, #0
 8017384:	5659      	ldrsb	r1, [r3, r1]
 8017386:	1dbb      	adds	r3, r7, #6
 8017388:	781b      	ldrb	r3, [r3, #0]
 801738a:	b25b      	sxtb	r3, r3
 801738c:	0018      	movs	r0, r3
 801738e:	f000 f87c 	bl	801748a <RegionCommonValueInRange>
 8017392:	1e03      	subs	r3, r0, #0
 8017394:	d101      	bne.n	801739a <RegionCommonChanVerifyDr+0x42>
    {
        return false;
 8017396:	2300      	movs	r3, #0
 8017398:	e073      	b.n	8017482 <RegionCommonChanVerifyDr+0x12a>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 801739a:	230f      	movs	r3, #15
 801739c:	18fb      	adds	r3, r7, r3
 801739e:	2200      	movs	r2, #0
 80173a0:	701a      	strb	r2, [r3, #0]
 80173a2:	230e      	movs	r3, #14
 80173a4:	18fb      	adds	r3, r7, r3
 80173a6:	2200      	movs	r2, #0
 80173a8:	701a      	strb	r2, [r3, #0]
 80173aa:	e062      	b.n	8017472 <RegionCommonChanVerifyDr+0x11a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80173ac:	230d      	movs	r3, #13
 80173ae:	18fb      	adds	r3, r7, r3
 80173b0:	2200      	movs	r2, #0
 80173b2:	701a      	strb	r2, [r3, #0]
 80173b4:	e04c      	b.n	8017450 <RegionCommonChanVerifyDr+0xf8>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 80173b6:	230e      	movs	r3, #14
 80173b8:	18fb      	adds	r3, r7, r3
 80173ba:	781b      	ldrb	r3, [r3, #0]
 80173bc:	005b      	lsls	r3, r3, #1
 80173be:	683a      	ldr	r2, [r7, #0]
 80173c0:	18d3      	adds	r3, r2, r3
 80173c2:	881b      	ldrh	r3, [r3, #0]
 80173c4:	001a      	movs	r2, r3
 80173c6:	200d      	movs	r0, #13
 80173c8:	183b      	adds	r3, r7, r0
 80173ca:	781b      	ldrb	r3, [r3, #0]
 80173cc:	411a      	asrs	r2, r3
 80173ce:	0013      	movs	r3, r2
 80173d0:	2201      	movs	r2, #1
 80173d2:	4013      	ands	r3, r2
 80173d4:	d036      	beq.n	8017444 <RegionCommonChanVerifyDr+0xec>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 80173d6:	240f      	movs	r4, #15
 80173d8:	193b      	adds	r3, r7, r4
 80173da:	781a      	ldrb	r2, [r3, #0]
 80173dc:	183b      	adds	r3, r7, r0
 80173de:	781b      	ldrb	r3, [r3, #0]
 80173e0:	18d3      	adds	r3, r2, r3
 80173e2:	001a      	movs	r2, r3
 80173e4:	0013      	movs	r3, r2
 80173e6:	005b      	lsls	r3, r3, #1
 80173e8:	189b      	adds	r3, r3, r2
 80173ea:	009b      	lsls	r3, r3, #2
 80173ec:	001a      	movs	r2, r3
 80173ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173f0:	189b      	adds	r3, r3, r2
 80173f2:	7a1b      	ldrb	r3, [r3, #8]
 80173f4:	011b      	lsls	r3, r3, #4
 80173f6:	b25b      	sxtb	r3, r3
 80173f8:	111b      	asrs	r3, r3, #4
 80173fa:	b25b      	sxtb	r3, r3
 80173fc:	001a      	movs	r2, r3
 80173fe:	230f      	movs	r3, #15
 8017400:	4013      	ands	r3, r2
 8017402:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8017404:	193b      	adds	r3, r7, r4
 8017406:	781a      	ldrb	r2, [r3, #0]
 8017408:	183b      	adds	r3, r7, r0
 801740a:	781b      	ldrb	r3, [r3, #0]
 801740c:	18d3      	adds	r3, r2, r3
 801740e:	001a      	movs	r2, r3
 8017410:	0013      	movs	r3, r2
 8017412:	005b      	lsls	r3, r3, #1
 8017414:	189b      	adds	r3, r3, r2
 8017416:	009b      	lsls	r3, r3, #2
 8017418:	001a      	movs	r2, r3
 801741a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801741c:	189b      	adds	r3, r3, r2
 801741e:	7a1b      	ldrb	r3, [r3, #8]
 8017420:	b25b      	sxtb	r3, r3
 8017422:	111b      	asrs	r3, r3, #4
 8017424:	b25b      	sxtb	r3, r3
 8017426:	001a      	movs	r2, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8017428:	230f      	movs	r3, #15
 801742a:	4013      	ands	r3, r2
 801742c:	b25a      	sxtb	r2, r3
 801742e:	1dbb      	adds	r3, r7, #6
 8017430:	781b      	ldrb	r3, [r3, #0]
 8017432:	b25b      	sxtb	r3, r3
 8017434:	0018      	movs	r0, r3
 8017436:	f000 f828 	bl	801748a <RegionCommonValueInRange>
 801743a:	0003      	movs	r3, r0
 801743c:	2b01      	cmp	r3, #1
 801743e:	d101      	bne.n	8017444 <RegionCommonChanVerifyDr+0xec>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8017440:	2301      	movs	r3, #1
 8017442:	e01e      	b.n	8017482 <RegionCommonChanVerifyDr+0x12a>
        for( uint8_t j = 0; j < 16; j++ )
 8017444:	210d      	movs	r1, #13
 8017446:	187b      	adds	r3, r7, r1
 8017448:	781a      	ldrb	r2, [r3, #0]
 801744a:	187b      	adds	r3, r7, r1
 801744c:	3201      	adds	r2, #1
 801744e:	701a      	strb	r2, [r3, #0]
 8017450:	230d      	movs	r3, #13
 8017452:	18fb      	adds	r3, r7, r3
 8017454:	781b      	ldrb	r3, [r3, #0]
 8017456:	2b0f      	cmp	r3, #15
 8017458:	d9ad      	bls.n	80173b6 <RegionCommonChanVerifyDr+0x5e>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 801745a:	220f      	movs	r2, #15
 801745c:	18bb      	adds	r3, r7, r2
 801745e:	18ba      	adds	r2, r7, r2
 8017460:	7812      	ldrb	r2, [r2, #0]
 8017462:	3210      	adds	r2, #16
 8017464:	701a      	strb	r2, [r3, #0]
 8017466:	210e      	movs	r1, #14
 8017468:	187b      	adds	r3, r7, r1
 801746a:	781a      	ldrb	r2, [r3, #0]
 801746c:	187b      	adds	r3, r7, r1
 801746e:	3201      	adds	r2, #1
 8017470:	701a      	strb	r2, [r3, #0]
 8017472:	230f      	movs	r3, #15
 8017474:	18fa      	adds	r2, r7, r3
 8017476:	1dfb      	adds	r3, r7, #7
 8017478:	7812      	ldrb	r2, [r2, #0]
 801747a:	781b      	ldrb	r3, [r3, #0]
 801747c:	429a      	cmp	r2, r3
 801747e:	d395      	bcc.n	80173ac <RegionCommonChanVerifyDr+0x54>
                }
            }
        }
    }
    return false;
 8017480:	2300      	movs	r3, #0
}
 8017482:	0018      	movs	r0, r3
 8017484:	46bd      	mov	sp, r7
 8017486:	b005      	add	sp, #20
 8017488:	bd90      	pop	{r4, r7, pc}

0801748a <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 801748a:	b590      	push	{r4, r7, lr}
 801748c:	b083      	sub	sp, #12
 801748e:	af00      	add	r7, sp, #0
 8017490:	0004      	movs	r4, r0
 8017492:	0008      	movs	r0, r1
 8017494:	0011      	movs	r1, r2
 8017496:	1dfb      	adds	r3, r7, #7
 8017498:	1c22      	adds	r2, r4, #0
 801749a:	701a      	strb	r2, [r3, #0]
 801749c:	1dbb      	adds	r3, r7, #6
 801749e:	1c02      	adds	r2, r0, #0
 80174a0:	701a      	strb	r2, [r3, #0]
 80174a2:	1d7b      	adds	r3, r7, #5
 80174a4:	1c0a      	adds	r2, r1, #0
 80174a6:	701a      	strb	r2, [r3, #0]
    if( ( value >= min ) && ( value <= max ) )
 80174a8:	1dfa      	adds	r2, r7, #7
 80174aa:	1dbb      	adds	r3, r7, #6
 80174ac:	7812      	ldrb	r2, [r2, #0]
 80174ae:	b252      	sxtb	r2, r2
 80174b0:	781b      	ldrb	r3, [r3, #0]
 80174b2:	b25b      	sxtb	r3, r3
 80174b4:	429a      	cmp	r2, r3
 80174b6:	db09      	blt.n	80174cc <RegionCommonValueInRange+0x42>
 80174b8:	1dfa      	adds	r2, r7, #7
 80174ba:	1d7b      	adds	r3, r7, #5
 80174bc:	7812      	ldrb	r2, [r2, #0]
 80174be:	b252      	sxtb	r2, r2
 80174c0:	781b      	ldrb	r3, [r3, #0]
 80174c2:	b25b      	sxtb	r3, r3
 80174c4:	429a      	cmp	r2, r3
 80174c6:	dc01      	bgt.n	80174cc <RegionCommonValueInRange+0x42>
    {
        return 1;
 80174c8:	2301      	movs	r3, #1
 80174ca:	e000      	b.n	80174ce <RegionCommonValueInRange+0x44>
    }
    return 0;
 80174cc:	2300      	movs	r3, #0
}
 80174ce:	0018      	movs	r0, r3
 80174d0:	46bd      	mov	sp, r7
 80174d2:	b003      	add	sp, #12
 80174d4:	bd90      	pop	{r4, r7, pc}

080174d6 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 80174d6:	b580      	push	{r7, lr}
 80174d8:	b084      	sub	sp, #16
 80174da:	af00      	add	r7, sp, #0
 80174dc:	6078      	str	r0, [r7, #4]
 80174de:	0008      	movs	r0, r1
 80174e0:	0011      	movs	r1, r2
 80174e2:	1cfb      	adds	r3, r7, #3
 80174e4:	1c02      	adds	r2, r0, #0
 80174e6:	701a      	strb	r2, [r3, #0]
 80174e8:	1cbb      	adds	r3, r7, #2
 80174ea:	1c0a      	adds	r2, r1, #0
 80174ec:	701a      	strb	r2, [r3, #0]
    uint8_t index = id / 16;
 80174ee:	210f      	movs	r1, #15
 80174f0:	187b      	adds	r3, r7, r1
 80174f2:	1cfa      	adds	r2, r7, #3
 80174f4:	7812      	ldrb	r2, [r2, #0]
 80174f6:	0912      	lsrs	r2, r2, #4
 80174f8:	701a      	strb	r2, [r3, #0]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 80174fa:	1cbb      	adds	r3, r7, #2
 80174fc:	781b      	ldrb	r3, [r3, #0]
 80174fe:	091b      	lsrs	r3, r3, #4
 8017500:	b2db      	uxtb	r3, r3
 8017502:	187a      	adds	r2, r7, r1
 8017504:	7812      	ldrb	r2, [r2, #0]
 8017506:	429a      	cmp	r2, r3
 8017508:	d805      	bhi.n	8017516 <RegionCommonChanDisable+0x40>
 801750a:	1cfa      	adds	r2, r7, #3
 801750c:	1cbb      	adds	r3, r7, #2
 801750e:	7812      	ldrb	r2, [r2, #0]
 8017510:	781b      	ldrb	r3, [r3, #0]
 8017512:	429a      	cmp	r2, r3
 8017514:	d301      	bcc.n	801751a <RegionCommonChanDisable+0x44>
    {
        return false;
 8017516:	2300      	movs	r3, #0
 8017518:	e01b      	b.n	8017552 <RegionCommonChanDisable+0x7c>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 801751a:	200f      	movs	r0, #15
 801751c:	183b      	adds	r3, r7, r0
 801751e:	781b      	ldrb	r3, [r3, #0]
 8017520:	005b      	lsls	r3, r3, #1
 8017522:	687a      	ldr	r2, [r7, #4]
 8017524:	18d3      	adds	r3, r2, r3
 8017526:	881b      	ldrh	r3, [r3, #0]
 8017528:	b21b      	sxth	r3, r3
 801752a:	1cfa      	adds	r2, r7, #3
 801752c:	7812      	ldrb	r2, [r2, #0]
 801752e:	210f      	movs	r1, #15
 8017530:	400a      	ands	r2, r1
 8017532:	2101      	movs	r1, #1
 8017534:	4091      	lsls	r1, r2
 8017536:	000a      	movs	r2, r1
 8017538:	b212      	sxth	r2, r2
 801753a:	43d2      	mvns	r2, r2
 801753c:	b212      	sxth	r2, r2
 801753e:	4013      	ands	r3, r2
 8017540:	b219      	sxth	r1, r3
 8017542:	183b      	adds	r3, r7, r0
 8017544:	781b      	ldrb	r3, [r3, #0]
 8017546:	005b      	lsls	r3, r3, #1
 8017548:	687a      	ldr	r2, [r7, #4]
 801754a:	18d3      	adds	r3, r2, r3
 801754c:	b28a      	uxth	r2, r1
 801754e:	801a      	strh	r2, [r3, #0]

    return true;
 8017550:	2301      	movs	r3, #1
}
 8017552:	0018      	movs	r0, r3
 8017554:	46bd      	mov	sp, r7
 8017556:	b004      	add	sp, #16
 8017558:	bd80      	pop	{r7, pc}

0801755a <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 801755a:	b590      	push	{r4, r7, lr}
 801755c:	b085      	sub	sp, #20
 801755e:	af00      	add	r7, sp, #0
 8017560:	6078      	str	r0, [r7, #4]
 8017562:	0008      	movs	r0, r1
 8017564:	0011      	movs	r1, r2
 8017566:	1cfb      	adds	r3, r7, #3
 8017568:	1c02      	adds	r2, r0, #0
 801756a:	701a      	strb	r2, [r3, #0]
 801756c:	1cbb      	adds	r3, r7, #2
 801756e:	1c0a      	adds	r2, r1, #0
 8017570:	701a      	strb	r2, [r3, #0]
    uint8_t nbChannels = 0;
 8017572:	230f      	movs	r3, #15
 8017574:	18fb      	adds	r3, r7, r3
 8017576:	2200      	movs	r2, #0
 8017578:	701a      	strb	r2, [r3, #0]

    if( channelsMask == NULL )
 801757a:	687b      	ldr	r3, [r7, #4]
 801757c:	2b00      	cmp	r3, #0
 801757e:	d101      	bne.n	8017584 <RegionCommonCountChannels+0x2a>
    {
        return 0;
 8017580:	2300      	movs	r3, #0
 8017582:	e027      	b.n	80175d4 <RegionCommonCountChannels+0x7a>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8017584:	230e      	movs	r3, #14
 8017586:	18fb      	adds	r3, r7, r3
 8017588:	1cfa      	adds	r2, r7, #3
 801758a:	7812      	ldrb	r2, [r2, #0]
 801758c:	701a      	strb	r2, [r3, #0]
 801758e:	e017      	b.n	80175c0 <RegionCommonCountChannels+0x66>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8017590:	240e      	movs	r4, #14
 8017592:	193b      	adds	r3, r7, r4
 8017594:	781b      	ldrb	r3, [r3, #0]
 8017596:	005b      	lsls	r3, r3, #1
 8017598:	687a      	ldr	r2, [r7, #4]
 801759a:	18d3      	adds	r3, r2, r3
 801759c:	881b      	ldrh	r3, [r3, #0]
 801759e:	2110      	movs	r1, #16
 80175a0:	0018      	movs	r0, r3
 80175a2:	f7ff fe6e 	bl	8017282 <CountChannels>
 80175a6:	0003      	movs	r3, r0
 80175a8:	0019      	movs	r1, r3
 80175aa:	220f      	movs	r2, #15
 80175ac:	18bb      	adds	r3, r7, r2
 80175ae:	18ba      	adds	r2, r7, r2
 80175b0:	7812      	ldrb	r2, [r2, #0]
 80175b2:	188a      	adds	r2, r1, r2
 80175b4:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 80175b6:	193b      	adds	r3, r7, r4
 80175b8:	781a      	ldrb	r2, [r3, #0]
 80175ba:	193b      	adds	r3, r7, r4
 80175bc:	3201      	adds	r2, #1
 80175be:	701a      	strb	r2, [r3, #0]
 80175c0:	230e      	movs	r3, #14
 80175c2:	18fa      	adds	r2, r7, r3
 80175c4:	1cbb      	adds	r3, r7, #2
 80175c6:	7812      	ldrb	r2, [r2, #0]
 80175c8:	781b      	ldrb	r3, [r3, #0]
 80175ca:	429a      	cmp	r2, r3
 80175cc:	d3e0      	bcc.n	8017590 <RegionCommonCountChannels+0x36>
    }

    return nbChannels;
 80175ce:	230f      	movs	r3, #15
 80175d0:	18fb      	adds	r3, r7, r3
 80175d2:	781b      	ldrb	r3, [r3, #0]
}
 80175d4:	0018      	movs	r0, r3
 80175d6:	46bd      	mov	sp, r7
 80175d8:	b005      	add	sp, #20
 80175da:	bd90      	pop	{r4, r7, pc}

080175dc <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 80175dc:	b580      	push	{r7, lr}
 80175de:	b086      	sub	sp, #24
 80175e0:	af00      	add	r7, sp, #0
 80175e2:	60f8      	str	r0, [r7, #12]
 80175e4:	60b9      	str	r1, [r7, #8]
 80175e6:	1dfb      	adds	r3, r7, #7
 80175e8:	701a      	strb	r2, [r3, #0]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 80175ea:	68fb      	ldr	r3, [r7, #12]
 80175ec:	2b00      	cmp	r3, #0
 80175ee:	d020      	beq.n	8017632 <RegionCommonChanMaskCopy+0x56>
 80175f0:	68bb      	ldr	r3, [r7, #8]
 80175f2:	2b00      	cmp	r3, #0
 80175f4:	d01d      	beq.n	8017632 <RegionCommonChanMaskCopy+0x56>
    {
        for( uint8_t i = 0; i < len; i++ )
 80175f6:	2317      	movs	r3, #23
 80175f8:	18fb      	adds	r3, r7, r3
 80175fa:	2200      	movs	r2, #0
 80175fc:	701a      	strb	r2, [r3, #0]
 80175fe:	e011      	b.n	8017624 <RegionCommonChanMaskCopy+0x48>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8017600:	2017      	movs	r0, #23
 8017602:	183b      	adds	r3, r7, r0
 8017604:	781b      	ldrb	r3, [r3, #0]
 8017606:	005b      	lsls	r3, r3, #1
 8017608:	68ba      	ldr	r2, [r7, #8]
 801760a:	18d2      	adds	r2, r2, r3
 801760c:	183b      	adds	r3, r7, r0
 801760e:	781b      	ldrb	r3, [r3, #0]
 8017610:	005b      	lsls	r3, r3, #1
 8017612:	68f9      	ldr	r1, [r7, #12]
 8017614:	18cb      	adds	r3, r1, r3
 8017616:	8812      	ldrh	r2, [r2, #0]
 8017618:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 801761a:	183b      	adds	r3, r7, r0
 801761c:	781a      	ldrb	r2, [r3, #0]
 801761e:	183b      	adds	r3, r7, r0
 8017620:	3201      	adds	r2, #1
 8017622:	701a      	strb	r2, [r3, #0]
 8017624:	2317      	movs	r3, #23
 8017626:	18fa      	adds	r2, r7, r3
 8017628:	1dfb      	adds	r3, r7, #7
 801762a:	7812      	ldrb	r2, [r2, #0]
 801762c:	781b      	ldrb	r3, [r3, #0]
 801762e:	429a      	cmp	r2, r3
 8017630:	d3e6      	bcc.n	8017600 <RegionCommonChanMaskCopy+0x24>
        }
    }
}
 8017632:	46c0      	nop			; (mov r8, r8)
 8017634:	46bd      	mov	sp, r7
 8017636:	b006      	add	sp, #24
 8017638:	bd80      	pop	{r7, pc}

0801763a <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 801763a:	b082      	sub	sp, #8
 801763c:	b5b0      	push	{r4, r5, r7, lr}
 801763e:	b086      	sub	sp, #24
 8017640:	af00      	add	r7, sp, #0
 8017642:	60f8      	str	r0, [r7, #12]
 8017644:	60b9      	str	r1, [r7, #8]
 8017646:	0011      	movs	r1, r2
 8017648:	2204      	movs	r2, #4
 801764a:	2028      	movs	r0, #40	; 0x28
 801764c:	4684      	mov	ip, r0
 801764e:	44bc      	add	ip, r7
 8017650:	4462      	add	r2, ip
 8017652:	6013      	str	r3, [r2, #0]
 8017654:	1dfb      	adds	r3, r7, #7
 8017656:	1c0a      	adds	r2, r1, #0
 8017658:	701a      	strb	r2, [r3, #0]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 801765a:	2516      	movs	r5, #22
 801765c:	197c      	adds	r4, r7, r5
 801765e:	2304      	movs	r3, #4
 8017660:	2228      	movs	r2, #40	; 0x28
 8017662:	4694      	mov	ip, r2
 8017664:	44bc      	add	ip, r7
 8017666:	4463      	add	r3, ip
 8017668:	1dfa      	adds	r2, r7, #7
 801766a:	7811      	ldrb	r1, [r2, #0]
 801766c:	68f8      	ldr	r0, [r7, #12]
 801766e:	681a      	ldr	r2, [r3, #0]
 8017670:	685b      	ldr	r3, [r3, #4]
 8017672:	f7ff fd15 	bl	80170a0 <GetDutyCycle>
 8017676:	0003      	movs	r3, r0
 8017678:	8023      	strh	r3, [r4, #0]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 801767a:	68fb      	ldr	r3, [r7, #12]
 801767c:	689a      	ldr	r2, [r3, #8]
 801767e:	197b      	adds	r3, r7, r5
 8017680:	881b      	ldrh	r3, [r3, #0]
 8017682:	68b9      	ldr	r1, [r7, #8]
 8017684:	434b      	muls	r3, r1
 8017686:	429a      	cmp	r2, r3
 8017688:	d909      	bls.n	801769e <RegionCommonSetBandTxDone+0x64>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 801768a:	68fb      	ldr	r3, [r7, #12]
 801768c:	689a      	ldr	r2, [r3, #8]
 801768e:	197b      	adds	r3, r7, r5
 8017690:	881b      	ldrh	r3, [r3, #0]
 8017692:	68b9      	ldr	r1, [r7, #8]
 8017694:	434b      	muls	r3, r1
 8017696:	1ad2      	subs	r2, r2, r3
 8017698:	68fb      	ldr	r3, [r7, #12]
 801769a:	609a      	str	r2, [r3, #8]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 801769c:	e002      	b.n	80176a4 <RegionCommonSetBandTxDone+0x6a>
        band->TimeCredits = 0;
 801769e:	68fb      	ldr	r3, [r7, #12]
 80176a0:	2200      	movs	r2, #0
 80176a2:	609a      	str	r2, [r3, #8]
}
 80176a4:	46c0      	nop			; (mov r8, r8)
 80176a6:	46bd      	mov	sp, r7
 80176a8:	b006      	add	sp, #24
 80176aa:	bcb0      	pop	{r4, r5, r7}
 80176ac:	bc08      	pop	{r3}
 80176ae:	b002      	add	sp, #8
 80176b0:	4718      	bx	r3

080176b2 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 80176b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80176b4:	46c6      	mov	lr, r8
 80176b6:	b500      	push	{lr}
 80176b8:	b08c      	sub	sp, #48	; 0x30
 80176ba:	af04      	add	r7, sp, #16
 80176bc:	0004      	movs	r4, r0
 80176be:	6039      	str	r1, [r7, #0]
 80176c0:	0010      	movs	r0, r2
 80176c2:	0019      	movs	r1, r3
 80176c4:	1dfb      	adds	r3, r7, #7
 80176c6:	1c22      	adds	r2, r4, #0
 80176c8:	701a      	strb	r2, [r3, #0]
 80176ca:	1dbb      	adds	r3, r7, #6
 80176cc:	1c02      	adds	r2, r0, #0
 80176ce:	701a      	strb	r2, [r3, #0]
 80176d0:	1d7b      	adds	r3, r7, #5
 80176d2:	1c0a      	adds	r2, r1, #0
 80176d4:	701a      	strb	r2, [r3, #0]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 80176d6:	2301      	movs	r3, #1
 80176d8:	425b      	negs	r3, r3
 80176da:	61fb      	str	r3, [r7, #28]
    TimerTime_t currentTime = TimerGetCurrentTime( );
 80176dc:	f005 fc40 	bl	801cf60 <UTIL_TIMER_GetCurrentTime>
 80176e0:	0003      	movs	r3, r0
 80176e2:	617b      	str	r3, [r7, #20]
    TimerTime_t creditCosts = 0;
 80176e4:	2300      	movs	r3, #0
 80176e6:	613b      	str	r3, [r7, #16]
    uint16_t dutyCycle = 1;
 80176e8:	230e      	movs	r3, #14
 80176ea:	18fb      	adds	r3, r7, r3
 80176ec:	2201      	movs	r2, #1
 80176ee:	801a      	strh	r2, [r3, #0]
    uint8_t validBands = 0;
 80176f0:	231b      	movs	r3, #27
 80176f2:	18fb      	adds	r3, r7, r3
 80176f4:	2200      	movs	r2, #0
 80176f6:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0; i < nbBands; i++ )
 80176f8:	231a      	movs	r3, #26
 80176fa:	18fb      	adds	r3, r7, r3
 80176fc:	2200      	movs	r2, #0
 80176fe:	701a      	strb	r2, [r3, #0]
 8017700:	e089      	b.n	8017816 <RegionCommonUpdateBandTimeOff+0x164>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8017702:	231a      	movs	r3, #26
 8017704:	18fb      	adds	r3, r7, r3
 8017706:	781a      	ldrb	r2, [r3, #0]
 8017708:	0013      	movs	r3, r2
 801770a:	009b      	lsls	r3, r3, #2
 801770c:	189b      	adds	r3, r3, r2
 801770e:	009b      	lsls	r3, r3, #2
 8017710:	001a      	movs	r2, r3
 8017712:	683b      	ldr	r3, [r7, #0]
 8017714:	469c      	mov	ip, r3
 8017716:	4494      	add	ip, r2
 8017718:	220e      	movs	r2, #14
 801771a:	18bc      	adds	r4, r7, r2
 801771c:	2138      	movs	r1, #56	; 0x38
 801771e:	000a      	movs	r2, r1
 8017720:	187b      	adds	r3, r7, r1
 8017722:	781e      	ldrb	r6, [r3, #0]
 8017724:	1d7b      	adds	r3, r7, #5
 8017726:	781d      	ldrb	r5, [r3, #0]
 8017728:	1dfb      	adds	r3, r7, #7
 801772a:	781b      	ldrb	r3, [r3, #0]
 801772c:	4698      	mov	r8, r3
 801772e:	697b      	ldr	r3, [r7, #20]
 8017730:	9302      	str	r3, [sp, #8]
 8017732:	2304      	movs	r3, #4
 8017734:	18ba      	adds	r2, r7, r2
 8017736:	18d2      	adds	r2, r2, r3
 8017738:	466b      	mov	r3, sp
 801773a:	ca03      	ldmia	r2!, {r0, r1}
 801773c:	c303      	stmia	r3!, {r0, r1}
 801773e:	0033      	movs	r3, r6
 8017740:	002a      	movs	r2, r5
 8017742:	4641      	mov	r1, r8
 8017744:	4660      	mov	r0, ip
 8017746:	f7ff fd3b 	bl	80171c0 <UpdateTimeCredits>
 801774a:	0003      	movs	r3, r0
 801774c:	8023      	strh	r3, [r4, #0]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 801774e:	220e      	movs	r2, #14
 8017750:	18bb      	adds	r3, r7, r2
 8017752:	881a      	ldrh	r2, [r3, #0]
 8017754:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017756:	4353      	muls	r3, r2
 8017758:	613b      	str	r3, [r7, #16]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 801775a:	231a      	movs	r3, #26
 801775c:	18fb      	adds	r3, r7, r3
 801775e:	781a      	ldrb	r2, [r3, #0]
 8017760:	0013      	movs	r3, r2
 8017762:	009b      	lsls	r3, r3, #2
 8017764:	189b      	adds	r3, r3, r2
 8017766:	009b      	lsls	r3, r3, #2
 8017768:	001a      	movs	r2, r3
 801776a:	683b      	ldr	r3, [r7, #0]
 801776c:	189b      	adds	r3, r3, r2
 801776e:	689b      	ldr	r3, [r3, #8]
 8017770:	693a      	ldr	r2, [r7, #16]
 8017772:	429a      	cmp	r2, r3
 8017774:	d306      	bcc.n	8017784 <RegionCommonUpdateBandTimeOff+0xd2>
            ( dutyCycleEnabled == false ) )
 8017776:	1d7b      	adds	r3, r7, #5
 8017778:	781b      	ldrb	r3, [r3, #0]
 801777a:	2201      	movs	r2, #1
 801777c:	4053      	eors	r3, r2
 801777e:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8017780:	2b00      	cmp	r3, #0
 8017782:	d012      	beq.n	80177aa <RegionCommonUpdateBandTimeOff+0xf8>
        {
            bands[i].ReadyForTransmission = true;
 8017784:	231a      	movs	r3, #26
 8017786:	18fb      	adds	r3, r7, r3
 8017788:	781a      	ldrb	r2, [r3, #0]
 801778a:	0013      	movs	r3, r2
 801778c:	009b      	lsls	r3, r3, #2
 801778e:	189b      	adds	r3, r3, r2
 8017790:	009b      	lsls	r3, r3, #2
 8017792:	001a      	movs	r2, r3
 8017794:	683b      	ldr	r3, [r7, #0]
 8017796:	189b      	adds	r3, r3, r2
 8017798:	2201      	movs	r2, #1
 801779a:	741a      	strb	r2, [r3, #16]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 801779c:	211b      	movs	r1, #27
 801779e:	187b      	adds	r3, r7, r1
 80177a0:	781a      	ldrb	r2, [r3, #0]
 80177a2:	187b      	adds	r3, r7, r1
 80177a4:	3201      	adds	r2, #1
 80177a6:	701a      	strb	r2, [r3, #0]
 80177a8:	e02f      	b.n	801780a <RegionCommonUpdateBandTimeOff+0x158>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 80177aa:	211a      	movs	r1, #26
 80177ac:	187b      	adds	r3, r7, r1
 80177ae:	781a      	ldrb	r2, [r3, #0]
 80177b0:	0013      	movs	r3, r2
 80177b2:	009b      	lsls	r3, r3, #2
 80177b4:	189b      	adds	r3, r3, r2
 80177b6:	009b      	lsls	r3, r3, #2
 80177b8:	001a      	movs	r2, r3
 80177ba:	683b      	ldr	r3, [r7, #0]
 80177bc:	189b      	adds	r3, r3, r2
 80177be:	2200      	movs	r2, #0
 80177c0:	741a      	strb	r2, [r3, #16]

            if( bands[i].MaxTimeCredits > creditCosts )
 80177c2:	187b      	adds	r3, r7, r1
 80177c4:	781a      	ldrb	r2, [r3, #0]
 80177c6:	0013      	movs	r3, r2
 80177c8:	009b      	lsls	r3, r3, #2
 80177ca:	189b      	adds	r3, r3, r2
 80177cc:	009b      	lsls	r3, r3, #2
 80177ce:	001a      	movs	r2, r3
 80177d0:	683b      	ldr	r3, [r7, #0]
 80177d2:	189b      	adds	r3, r3, r2
 80177d4:	68db      	ldr	r3, [r3, #12]
 80177d6:	693a      	ldr	r2, [r7, #16]
 80177d8:	429a      	cmp	r2, r3
 80177da:	d216      	bcs.n	801780a <RegionCommonUpdateBandTimeOff+0x158>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 80177dc:	187b      	adds	r3, r7, r1
 80177de:	781a      	ldrb	r2, [r3, #0]
 80177e0:	0013      	movs	r3, r2
 80177e2:	009b      	lsls	r3, r3, #2
 80177e4:	189b      	adds	r3, r3, r2
 80177e6:	009b      	lsls	r3, r3, #2
 80177e8:	001a      	movs	r2, r3
 80177ea:	683b      	ldr	r3, [r7, #0]
 80177ec:	189b      	adds	r3, r3, r2
 80177ee:	689b      	ldr	r3, [r3, #8]
 80177f0:	693a      	ldr	r2, [r7, #16]
 80177f2:	1ad2      	subs	r2, r2, r3
 80177f4:	69fb      	ldr	r3, [r7, #28]
 80177f6:	4293      	cmp	r3, r2
 80177f8:	d900      	bls.n	80177fc <RegionCommonUpdateBandTimeOff+0x14a>
 80177fa:	0013      	movs	r3, r2
 80177fc:	61fb      	str	r3, [r7, #28]
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 80177fe:	211b      	movs	r1, #27
 8017800:	187b      	adds	r3, r7, r1
 8017802:	781a      	ldrb	r2, [r3, #0]
 8017804:	187b      	adds	r3, r7, r1
 8017806:	3201      	adds	r2, #1
 8017808:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < nbBands; i++ )
 801780a:	211a      	movs	r1, #26
 801780c:	187b      	adds	r3, r7, r1
 801780e:	781a      	ldrb	r2, [r3, #0]
 8017810:	187b      	adds	r3, r7, r1
 8017812:	3201      	adds	r2, #1
 8017814:	701a      	strb	r2, [r3, #0]
 8017816:	231a      	movs	r3, #26
 8017818:	18fa      	adds	r2, r7, r3
 801781a:	1dbb      	adds	r3, r7, #6
 801781c:	7812      	ldrb	r2, [r2, #0]
 801781e:	781b      	ldrb	r3, [r3, #0]
 8017820:	429a      	cmp	r2, r3
 8017822:	d200      	bcs.n	8017826 <RegionCommonUpdateBandTimeOff+0x174>
 8017824:	e76d      	b.n	8017702 <RegionCommonUpdateBandTimeOff+0x50>
            }
        }
    }


    if( validBands == 0 )
 8017826:	231b      	movs	r3, #27
 8017828:	18fb      	adds	r3, r7, r3
 801782a:	781b      	ldrb	r3, [r3, #0]
 801782c:	2b00      	cmp	r3, #0
 801782e:	d102      	bne.n	8017836 <RegionCommonUpdateBandTimeOff+0x184>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8017830:	2301      	movs	r3, #1
 8017832:	425b      	negs	r3, r3
 8017834:	e000      	b.n	8017838 <RegionCommonUpdateBandTimeOff+0x186>
    }
    return minTimeToWait;
 8017836:	69fb      	ldr	r3, [r7, #28]
}
 8017838:	0018      	movs	r0, r3
 801783a:	46bd      	mov	sp, r7
 801783c:	b008      	add	sp, #32
 801783e:	bc80      	pop	{r7}
 8017840:	46b8      	mov	r8, r7
 8017842:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017844 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8017844:	b580      	push	{r7, lr}
 8017846:	b084      	sub	sp, #16
 8017848:	af00      	add	r7, sp, #0
 801784a:	6078      	str	r0, [r7, #4]
 801784c:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 801784e:	210f      	movs	r1, #15
 8017850:	187b      	adds	r3, r7, r1
 8017852:	2200      	movs	r2, #0
 8017854:	701a      	strb	r2, [r3, #0]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8017856:	687b      	ldr	r3, [r7, #4]
 8017858:	781b      	ldrb	r3, [r3, #0]
 801785a:	2b03      	cmp	r3, #3
 801785c:	d140      	bne.n	80178e0 <RegionCommonParseLinkAdrReq+0x9c>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 801785e:	687b      	ldr	r3, [r7, #4]
 8017860:	3301      	adds	r3, #1
 8017862:	781b      	ldrb	r3, [r3, #0]
 8017864:	b25a      	sxtb	r2, r3
 8017866:	683b      	ldr	r3, [r7, #0]
 8017868:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 801786a:	683b      	ldr	r3, [r7, #0]
 801786c:	785b      	ldrb	r3, [r3, #1]
 801786e:	b25b      	sxtb	r3, r3
 8017870:	220f      	movs	r2, #15
 8017872:	4013      	ands	r3, r2
 8017874:	b25a      	sxtb	r2, r3
 8017876:	683b      	ldr	r3, [r7, #0]
 8017878:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 801787a:	683b      	ldr	r3, [r7, #0]
 801787c:	785b      	ldrb	r3, [r3, #1]
 801787e:	b25b      	sxtb	r3, r3
 8017880:	b2db      	uxtb	r3, r3
 8017882:	091b      	lsrs	r3, r3, #4
 8017884:	b2db      	uxtb	r3, r3
 8017886:	b25a      	sxtb	r2, r3
 8017888:	683b      	ldr	r3, [r7, #0]
 801788a:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 801788c:	687b      	ldr	r3, [r7, #4]
 801788e:	3302      	adds	r3, #2
 8017890:	781b      	ldrb	r3, [r3, #0]
 8017892:	b29a      	uxth	r2, r3
 8017894:	683b      	ldr	r3, [r7, #0]
 8017896:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8017898:	683b      	ldr	r3, [r7, #0]
 801789a:	889b      	ldrh	r3, [r3, #4]
 801789c:	b21a      	sxth	r2, r3
 801789e:	687b      	ldr	r3, [r7, #4]
 80178a0:	3303      	adds	r3, #3
 80178a2:	781b      	ldrb	r3, [r3, #0]
 80178a4:	021b      	lsls	r3, r3, #8
 80178a6:	b21b      	sxth	r3, r3
 80178a8:	4313      	orrs	r3, r2
 80178aa:	b21b      	sxth	r3, r3
 80178ac:	b29a      	uxth	r2, r3
 80178ae:	683b      	ldr	r3, [r7, #0]
 80178b0:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 80178b2:	687b      	ldr	r3, [r7, #4]
 80178b4:	791a      	ldrb	r2, [r3, #4]
 80178b6:	683b      	ldr	r3, [r7, #0]
 80178b8:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 80178ba:	683b      	ldr	r3, [r7, #0]
 80178bc:	781b      	ldrb	r3, [r3, #0]
 80178be:	091b      	lsrs	r3, r3, #4
 80178c0:	b2db      	uxtb	r3, r3
 80178c2:	2207      	movs	r2, #7
 80178c4:	4013      	ands	r3, r2
 80178c6:	b2da      	uxtb	r2, r3
 80178c8:	683b      	ldr	r3, [r7, #0]
 80178ca:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 80178cc:	683b      	ldr	r3, [r7, #0]
 80178ce:	781b      	ldrb	r3, [r3, #0]
 80178d0:	220f      	movs	r2, #15
 80178d2:	4013      	ands	r3, r2
 80178d4:	b2da      	uxtb	r2, r3
 80178d6:	683b      	ldr	r3, [r7, #0]
 80178d8:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 80178da:	187b      	adds	r3, r7, r1
 80178dc:	2205      	movs	r2, #5
 80178de:	701a      	strb	r2, [r3, #0]
    }
    return retIndex;
 80178e0:	230f      	movs	r3, #15
 80178e2:	18fb      	adds	r3, r7, r3
 80178e4:	781b      	ldrb	r3, [r3, #0]
}
 80178e6:	0018      	movs	r0, r3
 80178e8:	46bd      	mov	sp, r7
 80178ea:	b004      	add	sp, #16
 80178ec:	bd80      	pop	{r7, pc}

080178ee <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 80178ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80178f0:	b089      	sub	sp, #36	; 0x24
 80178f2:	af02      	add	r7, sp, #8
 80178f4:	60f8      	str	r0, [r7, #12]
 80178f6:	60b9      	str	r1, [r7, #8]
 80178f8:	607a      	str	r2, [r7, #4]
 80178fa:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 80178fc:	2317      	movs	r3, #23
 80178fe:	18fb      	adds	r3, r7, r3
 8017900:	68fa      	ldr	r2, [r7, #12]
 8017902:	7912      	ldrb	r2, [r2, #4]
 8017904:	701a      	strb	r2, [r3, #0]
    int8_t datarate = verifyParams->Datarate;
 8017906:	2116      	movs	r1, #22
 8017908:	187b      	adds	r3, r7, r1
 801790a:	68fa      	ldr	r2, [r7, #12]
 801790c:	7992      	ldrb	r2, [r2, #6]
 801790e:	701a      	strb	r2, [r3, #0]
    int8_t txPower = verifyParams->TxPower;
 8017910:	2015      	movs	r0, #21
 8017912:	183b      	adds	r3, r7, r0
 8017914:	68fa      	ldr	r2, [r7, #12]
 8017916:	79d2      	ldrb	r2, [r2, #7]
 8017918:	701a      	strb	r2, [r3, #0]
    int8_t nbRepetitions = verifyParams->NbRep;
 801791a:	68fb      	ldr	r3, [r7, #12]
 801791c:	7a1a      	ldrb	r2, [r3, #8]
 801791e:	2414      	movs	r4, #20
 8017920:	193b      	adds	r3, r7, r4
 8017922:	701a      	strb	r2, [r3, #0]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8017924:	68fb      	ldr	r3, [r7, #12]
 8017926:	795b      	ldrb	r3, [r3, #5]
 8017928:	2201      	movs	r2, #1
 801792a:	4053      	eors	r3, r2
 801792c:	b2db      	uxtb	r3, r3
 801792e:	2b00      	cmp	r3, #0
 8017930:	d00b      	beq.n	801794a <RegionCommonLinkAdrReqVerifyParams+0x5c>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8017932:	193b      	adds	r3, r7, r4
 8017934:	68fa      	ldr	r2, [r7, #12]
 8017936:	7ad2      	ldrb	r2, [r2, #11]
 8017938:	701a      	strb	r2, [r3, #0]
        datarate =  verifyParams->CurrentDatarate;
 801793a:	187b      	adds	r3, r7, r1
 801793c:	68fa      	ldr	r2, [r7, #12]
 801793e:	7a52      	ldrb	r2, [r2, #9]
 8017940:	701a      	strb	r2, [r3, #0]
        txPower =  verifyParams->CurrentTxPower;
 8017942:	183b      	adds	r3, r7, r0
 8017944:	68fa      	ldr	r2, [r7, #12]
 8017946:	7a92      	ldrb	r2, [r2, #10]
 8017948:	701a      	strb	r2, [r3, #0]
    }

    if( status != 0 )
 801794a:	2617      	movs	r6, #23
 801794c:	19bb      	adds	r3, r7, r6
 801794e:	781b      	ldrb	r3, [r3, #0]
 8017950:	2b00      	cmp	r3, #0
 8017952:	d046      	beq.n	80179e2 <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8017954:	68fb      	ldr	r3, [r7, #12]
 8017956:	7b18      	ldrb	r0, [r3, #12]
 8017958:	68fb      	ldr	r3, [r7, #12]
 801795a:	691c      	ldr	r4, [r3, #16]
 801795c:	68fb      	ldr	r3, [r7, #12]
 801795e:	2514      	movs	r5, #20
 8017960:	575d      	ldrsb	r5, [r3, r5]
 8017962:	68fb      	ldr	r3, [r7, #12]
 8017964:	2215      	movs	r2, #21
 8017966:	569a      	ldrsb	r2, [r3, r2]
 8017968:	68fb      	ldr	r3, [r7, #12]
 801796a:	699b      	ldr	r3, [r3, #24]
 801796c:	2116      	movs	r1, #22
 801796e:	1879      	adds	r1, r7, r1
 8017970:	7809      	ldrb	r1, [r1, #0]
 8017972:	b249      	sxtb	r1, r1
 8017974:	9301      	str	r3, [sp, #4]
 8017976:	9200      	str	r2, [sp, #0]
 8017978:	002b      	movs	r3, r5
 801797a:	000a      	movs	r2, r1
 801797c:	0021      	movs	r1, r4
 801797e:	f7ff fceb 	bl	8017358 <RegionCommonChanVerifyDr>
 8017982:	0003      	movs	r3, r0
 8017984:	001a      	movs	r2, r3
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8017986:	2301      	movs	r3, #1
 8017988:	4053      	eors	r3, r2
 801798a:	b2db      	uxtb	r3, r3
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 801798c:	2b00      	cmp	r3, #0
 801798e:	d005      	beq.n	801799c <RegionCommonLinkAdrReqVerifyParams+0xae>
        {
            status &= 0xFD; // Datarate KO
 8017990:	19bb      	adds	r3, r7, r6
 8017992:	19ba      	adds	r2, r7, r6
 8017994:	7812      	ldrb	r2, [r2, #0]
 8017996:	2102      	movs	r1, #2
 8017998:	438a      	bics	r2, r1
 801799a:	701a      	strb	r2, [r3, #0]
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 801799c:	68fb      	ldr	r3, [r7, #12]
 801799e:	211d      	movs	r1, #29
 80179a0:	5659      	ldrsb	r1, [r3, r1]
 80179a2:	68fb      	ldr	r3, [r7, #12]
 80179a4:	221c      	movs	r2, #28
 80179a6:	569a      	ldrsb	r2, [r3, r2]
 80179a8:	2415      	movs	r4, #21
 80179aa:	193b      	adds	r3, r7, r4
 80179ac:	781b      	ldrb	r3, [r3, #0]
 80179ae:	b25b      	sxtb	r3, r3
 80179b0:	0018      	movs	r0, r3
 80179b2:	f7ff fd6a 	bl	801748a <RegionCommonValueInRange>
 80179b6:	1e03      	subs	r3, r0, #0
 80179b8:	d113      	bne.n	80179e2 <RegionCommonLinkAdrReqVerifyParams+0xf4>
        {
//        	verifyParams->MaxTxPower = 20;
            // Verify if the maximum TX power is exceeded Проверьте, не превышена ли максимальная мощность TX
            if( verifyParams->MaxTxPower > txPower )
 80179ba:	68fb      	ldr	r3, [r7, #12]
 80179bc:	7f5b      	ldrb	r3, [r3, #29]
 80179be:	b25b      	sxtb	r3, r3
 80179c0:	193a      	adds	r2, r7, r4
 80179c2:	7812      	ldrb	r2, [r2, #0]
 80179c4:	b252      	sxtb	r2, r2
 80179c6:	429a      	cmp	r2, r3
 80179c8:	da04      	bge.n	80179d4 <RegionCommonLinkAdrReqVerifyParams+0xe6>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 80179ca:	193b      	adds	r3, r7, r4
 80179cc:	68fa      	ldr	r2, [r7, #12]
 80179ce:	7f52      	ldrb	r2, [r2, #29]
 80179d0:	701a      	strb	r2, [r3, #0]
 80179d2:	e006      	b.n	80179e2 <RegionCommonLinkAdrReqVerifyParams+0xf4>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 80179d4:	2217      	movs	r2, #23
 80179d6:	18bb      	adds	r3, r7, r2
 80179d8:	18ba      	adds	r2, r7, r2
 80179da:	7812      	ldrb	r2, [r2, #0]
 80179dc:	2104      	movs	r1, #4
 80179de:	438a      	bics	r2, r1
 80179e0:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 80179e2:	2317      	movs	r3, #23
 80179e4:	18fb      	adds	r3, r7, r3
 80179e6:	781b      	ldrb	r3, [r3, #0]
 80179e8:	2b07      	cmp	r3, #7
 80179ea:	d108      	bne.n	80179fe <RegionCommonLinkAdrReqVerifyParams+0x110>
    {
        if( nbRepetitions == 0 )
 80179ec:	2214      	movs	r2, #20
 80179ee:	18bb      	adds	r3, r7, r2
 80179f0:	781b      	ldrb	r3, [r3, #0]
 80179f2:	b25b      	sxtb	r3, r3
 80179f4:	2b00      	cmp	r3, #0
 80179f6:	d102      	bne.n	80179fe <RegionCommonLinkAdrReqVerifyParams+0x110>
        { // Restore the default value according to the LoRaWAN specification
            nbRepetitions = 1;
 80179f8:	18bb      	adds	r3, r7, r2
 80179fa:	2201      	movs	r2, #1
 80179fc:	701a      	strb	r2, [r3, #0]
        }
    }

    // Apply changes
    *dr = datarate;
 80179fe:	68bb      	ldr	r3, [r7, #8]
 8017a00:	2216      	movs	r2, #22
 8017a02:	18ba      	adds	r2, r7, r2
 8017a04:	7812      	ldrb	r2, [r2, #0]
 8017a06:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8017a08:	687b      	ldr	r3, [r7, #4]
 8017a0a:	2215      	movs	r2, #21
 8017a0c:	18ba      	adds	r2, r7, r2
 8017a0e:	7812      	ldrb	r2, [r2, #0]
 8017a10:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8017a12:	2314      	movs	r3, #20
 8017a14:	18fb      	adds	r3, r7, r3
 8017a16:	781a      	ldrb	r2, [r3, #0]
 8017a18:	683b      	ldr	r3, [r7, #0]
 8017a1a:	701a      	strb	r2, [r3, #0]

    return status;
 8017a1c:	2317      	movs	r3, #23
 8017a1e:	18fb      	adds	r3, r7, r3
 8017a20:	781b      	ldrb	r3, [r3, #0]
}
 8017a22:	0018      	movs	r0, r3
 8017a24:	46bd      	mov	sp, r7
 8017a26:	b007      	add	sp, #28
 8017a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08017a2c <RegionCommonComputeSymbolTimeLoRa>:

/* ST_WORKAROUND_BEGIN: remove float/double */
uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidth )
{
 8017a2c:	b580      	push	{r7, lr}
 8017a2e:	b082      	sub	sp, #8
 8017a30:	af00      	add	r7, sp, #0
 8017a32:	0002      	movs	r2, r0
 8017a34:	6039      	str	r1, [r7, #0]
 8017a36:	1dfb      	adds	r3, r7, #7
 8017a38:	701a      	strb	r2, [r3, #0]
    return (1000000000UL/bandwidth) * (1 << phyDr);
 8017a3a:	6839      	ldr	r1, [r7, #0]
 8017a3c:	4806      	ldr	r0, [pc, #24]	; (8017a58 <RegionCommonComputeSymbolTimeLoRa+0x2c>)
 8017a3e:	f7e8 fb6b 	bl	8000118 <__udivsi3>
 8017a42:	0003      	movs	r3, r0
 8017a44:	001a      	movs	r2, r3
 8017a46:	1dfb      	adds	r3, r7, #7
 8017a48:	781b      	ldrb	r3, [r3, #0]
 8017a4a:	409a      	lsls	r2, r3
 8017a4c:	0013      	movs	r3, r2
}
 8017a4e:	0018      	movs	r0, r3
 8017a50:	46bd      	mov	sp, r7
 8017a52:	b002      	add	sp, #8
 8017a54:	bd80      	pop	{r7, pc}
 8017a56:	46c0      	nop			; (mov r8, r8)
 8017a58:	3b9aca00 	.word	0x3b9aca00

08017a5c <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDr )
{
 8017a5c:	b580      	push	{r7, lr}
 8017a5e:	b082      	sub	sp, #8
 8017a60:	af00      	add	r7, sp, #0
 8017a62:	0002      	movs	r2, r0
 8017a64:	1dfb      	adds	r3, r7, #7
 8017a66:	701a      	strb	r2, [r3, #0]
    // ((8 * 1000000) / 50);
    return 160000UL;
 8017a68:	4b02      	ldr	r3, [pc, #8]	; (8017a74 <RegionCommonComputeSymbolTimeFsk+0x18>)
}
 8017a6a:	0018      	movs	r0, r3
 8017a6c:	46bd      	mov	sp, r7
 8017a6e:	b002      	add	sp, #8
 8017a70:	bd80      	pop	{r7, pc}
 8017a72:	46c0      	nop			; (mov r8, r8)
 8017a74:	00027100 	.word	0x00027100

08017a78 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbol, uint8_t minRxSymbols, uint32_t rxError, uint32_t wakeUpTime, uint32_t* windowTimeout, int32_t* windowOffset )
{
 8017a78:	b5b0      	push	{r4, r5, r7, lr}
 8017a7a:	b084      	sub	sp, #16
 8017a7c:	af00      	add	r7, sp, #0
 8017a7e:	60f8      	str	r0, [r7, #12]
 8017a80:	607a      	str	r2, [r7, #4]
 8017a82:	603b      	str	r3, [r7, #0]
 8017a84:	200b      	movs	r0, #11
 8017a86:	183b      	adds	r3, r7, r0
 8017a88:	1c0a      	adds	r2, r1, #0
 8017a8a:	701a      	strb	r2, [r3, #0]
  *windowTimeout = MAX( (uint32_t)2 * minRxSymbols - 8 + DIVC(2 * rxError * 1000000UL, tSymbol ), minRxSymbols);
 8017a8c:	0002      	movs	r2, r0
 8017a8e:	18bb      	adds	r3, r7, r2
 8017a90:	781d      	ldrb	r5, [r3, #0]
 8017a92:	18bb      	adds	r3, r7, r2
 8017a94:	781b      	ldrb	r3, [r3, #0]
 8017a96:	4a1c      	ldr	r2, [pc, #112]	; (8017b08 <RegionCommonComputeRxWindowParameters+0x90>)
 8017a98:	4694      	mov	ip, r2
 8017a9a:	4463      	add	r3, ip
 8017a9c:	005c      	lsls	r4, r3, #1
 8017a9e:	6879      	ldr	r1, [r7, #4]
 8017aa0:	000a      	movs	r2, r1
 8017aa2:	0152      	lsls	r2, r2, #5
 8017aa4:	1a52      	subs	r2, r2, r1
 8017aa6:	0193      	lsls	r3, r2, #6
 8017aa8:	1a9b      	subs	r3, r3, r2
 8017aaa:	00db      	lsls	r3, r3, #3
 8017aac:	185b      	adds	r3, r3, r1
 8017aae:	01db      	lsls	r3, r3, #7
 8017ab0:	001a      	movs	r2, r3
 8017ab2:	68fb      	ldr	r3, [r7, #12]
 8017ab4:	18d3      	adds	r3, r2, r3
 8017ab6:	3b01      	subs	r3, #1
 8017ab8:	68f9      	ldr	r1, [r7, #12]
 8017aba:	0018      	movs	r0, r3
 8017abc:	f7e8 fb2c 	bl	8000118 <__udivsi3>
 8017ac0:	0003      	movs	r3, r0
 8017ac2:	18e2      	adds	r2, r4, r3
 8017ac4:	002b      	movs	r3, r5
 8017ac6:	4293      	cmp	r3, r2
 8017ac8:	d200      	bcs.n	8017acc <RegionCommonComputeRxWindowParameters+0x54>
 8017aca:	0013      	movs	r3, r2
 8017acc:	6a3a      	ldr	r2, [r7, #32]
 8017ace:	6013      	str	r3, [r2, #0]
  *windowOffset = DIVC((int32_t)(4 * tSymbol - ((*windowTimeout * tSymbol) >> 1)), 1000000L) - 1 - wakeUpTime;
 8017ad0:	68fb      	ldr	r3, [r7, #12]
 8017ad2:	009a      	lsls	r2, r3, #2
 8017ad4:	6a3b      	ldr	r3, [r7, #32]
 8017ad6:	681b      	ldr	r3, [r3, #0]
 8017ad8:	68f9      	ldr	r1, [r7, #12]
 8017ada:	434b      	muls	r3, r1
 8017adc:	085b      	lsrs	r3, r3, #1
 8017ade:	1ad3      	subs	r3, r2, r3
 8017ae0:	4a0a      	ldr	r2, [pc, #40]	; (8017b0c <RegionCommonComputeRxWindowParameters+0x94>)
 8017ae2:	4694      	mov	ip, r2
 8017ae4:	4463      	add	r3, ip
 8017ae6:	490a      	ldr	r1, [pc, #40]	; (8017b10 <RegionCommonComputeRxWindowParameters+0x98>)
 8017ae8:	0018      	movs	r0, r3
 8017aea:	f7e8 fb9f 	bl	800022c <__divsi3>
 8017aee:	0003      	movs	r3, r0
 8017af0:	001a      	movs	r2, r3
 8017af2:	683b      	ldr	r3, [r7, #0]
 8017af4:	1ad3      	subs	r3, r2, r3
 8017af6:	3b01      	subs	r3, #1
 8017af8:	001a      	movs	r2, r3
 8017afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017afc:	601a      	str	r2, [r3, #0]
}
 8017afe:	46c0      	nop			; (mov r8, r8)
 8017b00:	46bd      	mov	sp, r7
 8017b02:	b004      	add	sp, #16
 8017b04:	bdb0      	pop	{r4, r5, r7, pc}
 8017b06:	46c0      	nop			; (mov r8, r8)
 8017b08:	7ffffffc 	.word	0x7ffffffc
 8017b0c:	000f423f 	.word	0x000f423f
 8017b10:	000f4240 	.word	0x000f4240

08017b14 <RegionCommonComputeTxPower>:
/* ST_WORKAROUND_END */

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8017b14:	b5b0      	push	{r4, r5, r7, lr}
 8017b16:	b086      	sub	sp, #24
 8017b18:	af00      	add	r7, sp, #0
 8017b1a:	60b9      	str	r1, [r7, #8]
 8017b1c:	607a      	str	r2, [r7, #4]
 8017b1e:	210f      	movs	r1, #15
 8017b20:	187b      	adds	r3, r7, r1
 8017b22:	1c02      	adds	r2, r0, #0
 8017b24:	701a      	strb	r2, [r3, #0]
    int8_t phyTxPower = 14;
 8017b26:	2417      	movs	r4, #23
 8017b28:	193b      	adds	r3, r7, r4
 8017b2a:	220e      	movs	r2, #14
 8017b2c:	701a      	strb	r2, [r3, #0]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8017b2e:	187b      	adds	r3, r7, r1
 8017b30:	781b      	ldrb	r3, [r3, #0]
 8017b32:	b25b      	sxtb	r3, r3
 8017b34:	005b      	lsls	r3, r3, #1
 8017b36:	0018      	movs	r0, r3
 8017b38:	f7e8 ffde 	bl	8000af8 <__aeabi_ui2f>
 8017b3c:	1c03      	adds	r3, r0, #0
 8017b3e:	1c19      	adds	r1, r3, #0
 8017b40:	68b8      	ldr	r0, [r7, #8]
 8017b42:	f7e8 fe11 	bl	8000768 <__aeabi_fsub>
 8017b46:	1c03      	adds	r3, r0, #0
 8017b48:	6879      	ldr	r1, [r7, #4]
 8017b4a:	1c18      	adds	r0, r3, #0
 8017b4c:	f7e8 fe0c 	bl	8000768 <__aeabi_fsub>
 8017b50:	1c03      	adds	r3, r0, #0
 8017b52:	1c18      	adds	r0, r3, #0
 8017b54:	f7ea fe06 	bl	8002764 <__aeabi_f2d>
 8017b58:	0002      	movs	r2, r0
 8017b5a:	000b      	movs	r3, r1
 8017b5c:	0010      	movs	r0, r2
 8017b5e:	0019      	movs	r1, r3
 8017b60:	f006 ff40 	bl	801e9e4 <floor>
 8017b64:	0002      	movs	r2, r0
 8017b66:	000b      	movs	r3, r1
 8017b68:	0025      	movs	r5, r4
 8017b6a:	193c      	adds	r4, r7, r4
 8017b6c:	0010      	movs	r0, r2
 8017b6e:	0019      	movs	r1, r3
 8017b70:	f7ea fd6c 	bl	800264c <__aeabi_d2iz>
 8017b74:	0003      	movs	r3, r0
 8017b76:	7023      	strb	r3, [r4, #0]

    return phyTxPower;
 8017b78:	197b      	adds	r3, r7, r5
 8017b7a:	781b      	ldrb	r3, [r3, #0]
 8017b7c:	b25b      	sxtb	r3, r3
}
 8017b7e:	0018      	movs	r0, r3
 8017b80:	46bd      	mov	sp, r7
 8017b82:	b006      	add	sp, #24
 8017b84:	bdb0      	pop	{r4, r5, r7, pc}

08017b86 <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8017b86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017b88:	b087      	sub	sp, #28
 8017b8a:	af00      	add	r7, sp, #0
 8017b8c:	60f8      	str	r0, [r7, #12]
 8017b8e:	60b9      	str	r1, [r7, #8]
 8017b90:	607a      	str	r2, [r7, #4]
 8017b92:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8017b94:	2317      	movs	r3, #23
 8017b96:	18fb      	adds	r3, r7, r3
 8017b98:	2200      	movs	r2, #0
 8017b9a:	701a      	strb	r2, [r3, #0]
    uint8_t nbRestrictedChannelsCount = 0;
 8017b9c:	2316      	movs	r3, #22
 8017b9e:	18fb      	adds	r3, r7, r3
 8017ba0:	2200      	movs	r2, #0
 8017ba2:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8017ba4:	2315      	movs	r3, #21
 8017ba6:	18fb      	adds	r3, r7, r3
 8017ba8:	2200      	movs	r2, #0
 8017baa:	701a      	strb	r2, [r3, #0]
 8017bac:	2314      	movs	r3, #20
 8017bae:	18fb      	adds	r3, r7, r3
 8017bb0:	2200      	movs	r2, #0
 8017bb2:	701a      	strb	r2, [r3, #0]
 8017bb4:	e0bf      	b.n	8017d36 <RegionCommonCountNbOfEnabledChannels+0x1b0>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8017bb6:	2313      	movs	r3, #19
 8017bb8:	18fb      	adds	r3, r7, r3
 8017bba:	2200      	movs	r2, #0
 8017bbc:	701a      	strb	r2, [r3, #0]
 8017bbe:	e0a8      	b.n	8017d12 <RegionCommonCountNbOfEnabledChannels+0x18c>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8017bc0:	68fb      	ldr	r3, [r7, #12]
 8017bc2:	685a      	ldr	r2, [r3, #4]
 8017bc4:	2314      	movs	r3, #20
 8017bc6:	18fb      	adds	r3, r7, r3
 8017bc8:	781b      	ldrb	r3, [r3, #0]
 8017bca:	005b      	lsls	r3, r3, #1
 8017bcc:	18d3      	adds	r3, r2, r3
 8017bce:	881b      	ldrh	r3, [r3, #0]
 8017bd0:	001a      	movs	r2, r3
 8017bd2:	2013      	movs	r0, #19
 8017bd4:	183b      	adds	r3, r7, r0
 8017bd6:	781b      	ldrb	r3, [r3, #0]
 8017bd8:	411a      	asrs	r2, r3
 8017bda:	0013      	movs	r3, r2
 8017bdc:	2201      	movs	r2, #1
 8017bde:	4013      	ands	r3, r2
 8017be0:	d100      	bne.n	8017be4 <RegionCommonCountNbOfEnabledChannels+0x5e>
 8017be2:	e090      	b.n	8017d06 <RegionCommonCountNbOfEnabledChannels+0x180>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8017be4:	68fb      	ldr	r3, [r7, #12]
 8017be6:	689a      	ldr	r2, [r3, #8]
 8017be8:	2315      	movs	r3, #21
 8017bea:	18fb      	adds	r3, r7, r3
 8017bec:	7819      	ldrb	r1, [r3, #0]
 8017bee:	183b      	adds	r3, r7, r0
 8017bf0:	781b      	ldrb	r3, [r3, #0]
 8017bf2:	18cb      	adds	r3, r1, r3
 8017bf4:	0019      	movs	r1, r3
 8017bf6:	000b      	movs	r3, r1
 8017bf8:	005b      	lsls	r3, r3, #1
 8017bfa:	185b      	adds	r3, r3, r1
 8017bfc:	009b      	lsls	r3, r3, #2
 8017bfe:	18d3      	adds	r3, r2, r3
 8017c00:	681b      	ldr	r3, [r3, #0]
 8017c02:	2b00      	cmp	r3, #0
 8017c04:	d100      	bne.n	8017c08 <RegionCommonCountNbOfEnabledChannels+0x82>
 8017c06:	e079      	b.n	8017cfc <RegionCommonCountNbOfEnabledChannels+0x176>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8017c08:	68fb      	ldr	r3, [r7, #12]
 8017c0a:	781b      	ldrb	r3, [r3, #0]
 8017c0c:	2201      	movs	r2, #1
 8017c0e:	4053      	eors	r3, r2
 8017c10:	b2db      	uxtb	r3, r3
 8017c12:	2b00      	cmp	r3, #0
 8017c14:	d00d      	beq.n	8017c32 <RegionCommonCountNbOfEnabledChannels+0xac>
                    ( countNbOfEnabledChannelsParams->JoinChannels > 0 ) )
 8017c16:	68fb      	ldr	r3, [r7, #12]
 8017c18:	8a5b      	ldrh	r3, [r3, #18]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8017c1a:	2b00      	cmp	r3, #0
 8017c1c:	d009      	beq.n	8017c32 <RegionCommonCountNbOfEnabledChannels+0xac>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels & ( 1 << j ) ) == 0 )
 8017c1e:	68fb      	ldr	r3, [r7, #12]
 8017c20:	8a5b      	ldrh	r3, [r3, #18]
 8017c22:	001a      	movs	r2, r3
 8017c24:	183b      	adds	r3, r7, r0
 8017c26:	781b      	ldrb	r3, [r3, #0]
 8017c28:	411a      	asrs	r2, r3
 8017c2a:	0013      	movs	r3, r2
 8017c2c:	2201      	movs	r2, #1
 8017c2e:	4013      	ands	r3, r2
 8017c30:	d066      	beq.n	8017d00 <RegionCommonCountNbOfEnabledChannels+0x17a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8017c32:	68fb      	ldr	r3, [r7, #12]
 8017c34:	785b      	ldrb	r3, [r3, #1]
 8017c36:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8017c38:	68fb      	ldr	r3, [r7, #12]
 8017c3a:	689a      	ldr	r2, [r3, #8]
 8017c3c:	2515      	movs	r5, #21
 8017c3e:	197b      	adds	r3, r7, r5
 8017c40:	7819      	ldrb	r1, [r3, #0]
 8017c42:	2613      	movs	r6, #19
 8017c44:	19bb      	adds	r3, r7, r6
 8017c46:	781b      	ldrb	r3, [r3, #0]
 8017c48:	18cb      	adds	r3, r1, r3
 8017c4a:	0019      	movs	r1, r3
 8017c4c:	000b      	movs	r3, r1
 8017c4e:	005b      	lsls	r3, r3, #1
 8017c50:	185b      	adds	r3, r3, r1
 8017c52:	009b      	lsls	r3, r3, #2
 8017c54:	18d3      	adds	r3, r2, r3
 8017c56:	7a1b      	ldrb	r3, [r3, #8]
 8017c58:	011b      	lsls	r3, r3, #4
 8017c5a:	b25b      	sxtb	r3, r3
 8017c5c:	111b      	asrs	r3, r3, #4
 8017c5e:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8017c60:	001c      	movs	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8017c62:	68fb      	ldr	r3, [r7, #12]
 8017c64:	689a      	ldr	r2, [r3, #8]
 8017c66:	197b      	adds	r3, r7, r5
 8017c68:	7819      	ldrb	r1, [r3, #0]
 8017c6a:	19bb      	adds	r3, r7, r6
 8017c6c:	781b      	ldrb	r3, [r3, #0]
 8017c6e:	18cb      	adds	r3, r1, r3
 8017c70:	0019      	movs	r1, r3
 8017c72:	000b      	movs	r3, r1
 8017c74:	005b      	lsls	r3, r3, #1
 8017c76:	185b      	adds	r3, r3, r1
 8017c78:	009b      	lsls	r3, r3, #2
 8017c7a:	18d3      	adds	r3, r2, r3
 8017c7c:	7a1b      	ldrb	r3, [r3, #8]
 8017c7e:	b25b      	sxtb	r3, r3
 8017c80:	111b      	asrs	r3, r3, #4
 8017c82:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8017c84:	001a      	movs	r2, r3
 8017c86:	0021      	movs	r1, r4
 8017c88:	f7ff fbff 	bl	801748a <RegionCommonValueInRange>
 8017c8c:	1e03      	subs	r3, r0, #0
 8017c8e:	d039      	beq.n	8017d04 <RegionCommonCountNbOfEnabledChannels+0x17e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8017c90:	68fb      	ldr	r3, [r7, #12]
 8017c92:	68da      	ldr	r2, [r3, #12]
 8017c94:	68fb      	ldr	r3, [r7, #12]
 8017c96:	6899      	ldr	r1, [r3, #8]
 8017c98:	197b      	adds	r3, r7, r5
 8017c9a:	7818      	ldrb	r0, [r3, #0]
 8017c9c:	19bb      	adds	r3, r7, r6
 8017c9e:	781b      	ldrb	r3, [r3, #0]
 8017ca0:	18c3      	adds	r3, r0, r3
 8017ca2:	0018      	movs	r0, r3
 8017ca4:	0003      	movs	r3, r0
 8017ca6:	005b      	lsls	r3, r3, #1
 8017ca8:	181b      	adds	r3, r3, r0
 8017caa:	009b      	lsls	r3, r3, #2
 8017cac:	18cb      	adds	r3, r1, r3
 8017cae:	7a5b      	ldrb	r3, [r3, #9]
 8017cb0:	0019      	movs	r1, r3
 8017cb2:	000b      	movs	r3, r1
 8017cb4:	009b      	lsls	r3, r3, #2
 8017cb6:	185b      	adds	r3, r3, r1
 8017cb8:	009b      	lsls	r3, r3, #2
 8017cba:	18d3      	adds	r3, r2, r3
 8017cbc:	7c1b      	ldrb	r3, [r3, #16]
 8017cbe:	2201      	movs	r2, #1
 8017cc0:	4053      	eors	r3, r2
 8017cc2:	b2db      	uxtb	r3, r3
 8017cc4:	2b00      	cmp	r3, #0
 8017cc6:	d006      	beq.n	8017cd6 <RegionCommonCountNbOfEnabledChannels+0x150>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8017cc8:	2116      	movs	r1, #22
 8017cca:	187b      	adds	r3, r7, r1
 8017ccc:	781a      	ldrb	r2, [r3, #0]
 8017cce:	187b      	adds	r3, r7, r1
 8017cd0:	3201      	adds	r2, #1
 8017cd2:	701a      	strb	r2, [r3, #0]
                    continue;
 8017cd4:	e017      	b.n	8017d06 <RegionCommonCountNbOfEnabledChannels+0x180>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8017cd6:	2217      	movs	r2, #23
 8017cd8:	18bb      	adds	r3, r7, r2
 8017cda:	781b      	ldrb	r3, [r3, #0]
 8017cdc:	18ba      	adds	r2, r7, r2
 8017cde:	1c59      	adds	r1, r3, #1
 8017ce0:	7011      	strb	r1, [r2, #0]
 8017ce2:	001a      	movs	r2, r3
 8017ce4:	68bb      	ldr	r3, [r7, #8]
 8017ce6:	189b      	adds	r3, r3, r2
 8017ce8:	2215      	movs	r2, #21
 8017cea:	18b9      	adds	r1, r7, r2
 8017cec:	2213      	movs	r2, #19
 8017cee:	18ba      	adds	r2, r7, r2
 8017cf0:	7809      	ldrb	r1, [r1, #0]
 8017cf2:	7812      	ldrb	r2, [r2, #0]
 8017cf4:	188a      	adds	r2, r1, r2
 8017cf6:	b2d2      	uxtb	r2, r2
 8017cf8:	701a      	strb	r2, [r3, #0]
 8017cfa:	e004      	b.n	8017d06 <RegionCommonCountNbOfEnabledChannels+0x180>
                    continue;
 8017cfc:	46c0      	nop			; (mov r8, r8)
 8017cfe:	e002      	b.n	8017d06 <RegionCommonCountNbOfEnabledChannels+0x180>
                        continue;
 8017d00:	46c0      	nop			; (mov r8, r8)
 8017d02:	e000      	b.n	8017d06 <RegionCommonCountNbOfEnabledChannels+0x180>
                    continue;
 8017d04:	46c0      	nop			; (mov r8, r8)
        for( uint8_t j = 0; j < 16; j++ )
 8017d06:	2113      	movs	r1, #19
 8017d08:	187b      	adds	r3, r7, r1
 8017d0a:	781a      	ldrb	r2, [r3, #0]
 8017d0c:	187b      	adds	r3, r7, r1
 8017d0e:	3201      	adds	r2, #1
 8017d10:	701a      	strb	r2, [r3, #0]
 8017d12:	2313      	movs	r3, #19
 8017d14:	18fb      	adds	r3, r7, r3
 8017d16:	781b      	ldrb	r3, [r3, #0]
 8017d18:	2b0f      	cmp	r3, #15
 8017d1a:	d800      	bhi.n	8017d1e <RegionCommonCountNbOfEnabledChannels+0x198>
 8017d1c:	e750      	b.n	8017bc0 <RegionCommonCountNbOfEnabledChannels+0x3a>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8017d1e:	2215      	movs	r2, #21
 8017d20:	18bb      	adds	r3, r7, r2
 8017d22:	18ba      	adds	r2, r7, r2
 8017d24:	7812      	ldrb	r2, [r2, #0]
 8017d26:	3210      	adds	r2, #16
 8017d28:	701a      	strb	r2, [r3, #0]
 8017d2a:	2114      	movs	r1, #20
 8017d2c:	187b      	adds	r3, r7, r1
 8017d2e:	781a      	ldrb	r2, [r3, #0]
 8017d30:	187b      	adds	r3, r7, r1
 8017d32:	3201      	adds	r2, #1
 8017d34:	701a      	strb	r2, [r3, #0]
 8017d36:	2315      	movs	r3, #21
 8017d38:	18fb      	adds	r3, r7, r3
 8017d3a:	781b      	ldrb	r3, [r3, #0]
 8017d3c:	b29a      	uxth	r2, r3
 8017d3e:	68fb      	ldr	r3, [r7, #12]
 8017d40:	8a1b      	ldrh	r3, [r3, #16]
 8017d42:	429a      	cmp	r2, r3
 8017d44:	d200      	bcs.n	8017d48 <RegionCommonCountNbOfEnabledChannels+0x1c2>
 8017d46:	e736      	b.n	8017bb6 <RegionCommonCountNbOfEnabledChannels+0x30>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8017d48:	687b      	ldr	r3, [r7, #4]
 8017d4a:	2217      	movs	r2, #23
 8017d4c:	18ba      	adds	r2, r7, r2
 8017d4e:	7812      	ldrb	r2, [r2, #0]
 8017d50:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8017d52:	683b      	ldr	r3, [r7, #0]
 8017d54:	2216      	movs	r2, #22
 8017d56:	18ba      	adds	r2, r7, r2
 8017d58:	7812      	ldrb	r2, [r2, #0]
 8017d5a:	701a      	strb	r2, [r3, #0]
}
 8017d5c:	46c0      	nop			; (mov r8, r8)
 8017d5e:	46bd      	mov	sp, r7
 8017d60:	b007      	add	sp, #28
 8017d62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017d64 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8017d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017d66:	46c6      	mov	lr, r8
 8017d68:	b500      	push	{lr}
 8017d6a:	b08a      	sub	sp, #40	; 0x28
 8017d6c:	af04      	add	r7, sp, #16
 8017d6e:	60f8      	str	r0, [r7, #12]
 8017d70:	60b9      	str	r1, [r7, #8]
 8017d72:	607a      	str	r2, [r7, #4]
 8017d74:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8017d76:	68fb      	ldr	r3, [r7, #12]
 8017d78:	685b      	ldr	r3, [r3, #4]
 8017d7a:	0018      	movs	r0, r3
 8017d7c:	f005 f904 	bl	801cf88 <UTIL_TIMER_GetElapsedTime>
 8017d80:	0003      	movs	r3, r0
 8017d82:	617b      	str	r3, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8017d84:	68fb      	ldr	r3, [r7, #12]
 8017d86:	681a      	ldr	r2, [r3, #0]
 8017d88:	697b      	ldr	r3, [r7, #20]
 8017d8a:	1ad2      	subs	r2, r2, r3
 8017d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017d8e:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8017d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d92:	2201      	movs	r2, #1
 8017d94:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 8017d96:	683b      	ldr	r3, [r7, #0]
 8017d98:	2200      	movs	r2, #0
 8017d9a:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8017d9c:	68fb      	ldr	r3, [r7, #12]
 8017d9e:	685b      	ldr	r3, [r3, #4]
 8017da0:	2b00      	cmp	r3, #0
 8017da2:	d004      	beq.n	8017dae <RegionCommonIdentifyChannels+0x4a>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8017da4:	68fb      	ldr	r3, [r7, #12]
 8017da6:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8017da8:	697a      	ldr	r2, [r7, #20]
 8017daa:	429a      	cmp	r2, r3
 8017dac:	d32b      	bcc.n	8017e06 <RegionCommonIdentifyChannels+0xa2>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8017dae:	68bb      	ldr	r3, [r7, #8]
 8017db0:	2200      	movs	r2, #0
 8017db2:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8017db4:	68fb      	ldr	r3, [r7, #12]
 8017db6:	69db      	ldr	r3, [r3, #28]
 8017db8:	781b      	ldrb	r3, [r3, #0]
 8017dba:	469c      	mov	ip, r3
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8017dbc:	68fb      	ldr	r3, [r7, #12]
 8017dbe:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8017dc0:	68dc      	ldr	r4, [r3, #12]
 8017dc2:	68fb      	ldr	r3, [r7, #12]
 8017dc4:	7a5d      	ldrb	r5, [r3, #9]
 8017dc6:	68fb      	ldr	r3, [r7, #12]
 8017dc8:	7a1e      	ldrb	r6, [r3, #8]
 8017dca:	68fb      	ldr	r3, [r7, #12]
 8017dcc:	7d1b      	ldrb	r3, [r3, #20]
 8017dce:	4698      	mov	r8, r3
 8017dd0:	68fb      	ldr	r3, [r7, #12]
 8017dd2:	699b      	ldr	r3, [r3, #24]
 8017dd4:	9303      	str	r3, [sp, #12]
 8017dd6:	68fb      	ldr	r3, [r7, #12]
 8017dd8:	2204      	movs	r2, #4
 8017dda:	446a      	add	r2, sp
 8017ddc:	330c      	adds	r3, #12
 8017dde:	cb03      	ldmia	r3!, {r0, r1}
 8017de0:	c203      	stmia	r2!, {r0, r1}
 8017de2:	4643      	mov	r3, r8
 8017de4:	9300      	str	r3, [sp, #0]
 8017de6:	0033      	movs	r3, r6
 8017de8:	002a      	movs	r2, r5
 8017dea:	0021      	movs	r1, r4
 8017dec:	4660      	mov	r0, ip
 8017dee:	f7ff fc60 	bl	80176b2 <RegionCommonUpdateBandTimeOff>
 8017df2:	0002      	movs	r2, r0
 8017df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017df6:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8017df8:	68fb      	ldr	r3, [r7, #12]
 8017dfa:	69d8      	ldr	r0, [r3, #28]
 8017dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017dfe:	683a      	ldr	r2, [r7, #0]
 8017e00:	6879      	ldr	r1, [r7, #4]
 8017e02:	f7ff fec0 	bl	8017b86 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8017e06:	683b      	ldr	r3, [r7, #0]
 8017e08:	781b      	ldrb	r3, [r3, #0]
 8017e0a:	2b00      	cmp	r3, #0
 8017e0c:	d004      	beq.n	8017e18 <RegionCommonIdentifyChannels+0xb4>
    {
        *nextTxDelay = 0;
 8017e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017e10:	2200      	movs	r2, #0
 8017e12:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8017e14:	2300      	movs	r3, #0
 8017e16:	e006      	b.n	8017e26 <RegionCommonIdentifyChannels+0xc2>
    }
    else if( *nbRestrictedChannels > 0 )
 8017e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e1a:	781b      	ldrb	r3, [r3, #0]
 8017e1c:	2b00      	cmp	r3, #0
 8017e1e:	d001      	beq.n	8017e24 <RegionCommonIdentifyChannels+0xc0>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8017e20:	230b      	movs	r3, #11
 8017e22:	e000      	b.n	8017e26 <RegionCommonIdentifyChannels+0xc2>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8017e24:	230c      	movs	r3, #12
    }
}
 8017e26:	0018      	movs	r0, r3
 8017e28:	46bd      	mov	sp, r7
 8017e2a:	b006      	add	sp, #24
 8017e2c:	bc80      	pop	{r7}
 8017e2e:	46b8      	mov	r8, r7
 8017e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08017e34 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8017e34:	b590      	push	{r4, r7, lr}
 8017e36:	b089      	sub	sp, #36	; 0x24
 8017e38:	af00      	add	r7, sp, #0
 8017e3a:	6039      	str	r1, [r7, #0]
 8017e3c:	0011      	movs	r1, r2
 8017e3e:	1dfb      	adds	r3, r7, #7
 8017e40:	1c02      	adds	r2, r0, #0
 8017e42:	701a      	strb	r2, [r3, #0]
 8017e44:	1dbb      	adds	r3, r7, #6
 8017e46:	1c0a      	adds	r2, r1, #0
 8017e48:	701a      	strb	r2, [r3, #0]
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 8017e4a:	2308      	movs	r3, #8
 8017e4c:	18fb      	adds	r3, r7, r3
 8017e4e:	4a04      	ldr	r2, [pc, #16]	; (8017e60 <RegionCommonRxConfigPrint+0x2c>)
 8017e50:	ca13      	ldmia	r2!, {r0, r1, r4}
 8017e52:	c313      	stmia	r3!, {r0, r1, r4}
 8017e54:	ca13      	ldmia	r2!, {r0, r1, r4}
 8017e56:	c313      	stmia	r3!, {r0, r1, r4}
    }
    else
    {
//        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8017e58:	46c0      	nop			; (mov r8, r8)
 8017e5a:	46bd      	mov	sp, r7
 8017e5c:	b009      	add	sp, #36	; 0x24
 8017e5e:	bd90      	pop	{r4, r7, pc}
 8017e60:	0801fc0c 	.word	0x0801fc0c

08017e64 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8017e64:	b580      	push	{r7, lr}
 8017e66:	b088      	sub	sp, #32
 8017e68:	af04      	add	r7, sp, #16
 8017e6a:	6078      	str	r0, [r7, #4]
 8017e6c:	000a      	movs	r2, r1
 8017e6e:	1cfb      	adds	r3, r7, #3
 8017e70:	701a      	strb	r2, [r3, #0]
	uint32_t freq_mhz = frequency / 1000000; // Конвертируем частоту в мегагерцы
 8017e72:	687b      	ldr	r3, [r7, #4]
 8017e74:	4912      	ldr	r1, [pc, #72]	; (8017ec0 <RegionCommonTxConfigPrint+0x5c>)
 8017e76:	0018      	movs	r0, r3
 8017e78:	f7e8 f94e 	bl	8000118 <__udivsi3>
 8017e7c:	0003      	movs	r3, r0
 8017e7e:	60fb      	str	r3, [r7, #12]
	uint32_t freq_decimal = (frequency % 1000000) / 100000; // Получаем 1-ю цифру после запятой
 8017e80:	687b      	ldr	r3, [r7, #4]
 8017e82:	490f      	ldr	r1, [pc, #60]	; (8017ec0 <RegionCommonTxConfigPrint+0x5c>)
 8017e84:	0018      	movs	r0, r3
 8017e86:	f7e8 f9cd 	bl	8000224 <__aeabi_uidivmod>
 8017e8a:	000b      	movs	r3, r1
 8017e8c:	490d      	ldr	r1, [pc, #52]	; (8017ec4 <RegionCommonTxConfigPrint+0x60>)
 8017e8e:	0018      	movs	r0, r3
 8017e90:	f7e8 f942 	bl	8000118 <__udivsi3>
 8017e94:	0003      	movs	r3, r0
 8017e96:	60bb      	str	r3, [r7, #8]
//	float freq_mhz2 = frequency / 1000000.0f; // Конвертируем частоту в мегагерцы
//    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
    MW_LOG(TS_OFF, VLEVEL_M,  "\r\n Отправка на частоте %d.%d МГц по каналу скорости передачи DR%d\r\n", freq_mhz, freq_decimal, dr );
 8017e98:	1cfb      	adds	r3, r7, #3
 8017e9a:	781b      	ldrb	r3, [r3, #0]
 8017e9c:	b25b      	sxtb	r3, r3
 8017e9e:	4a0a      	ldr	r2, [pc, #40]	; (8017ec8 <RegionCommonTxConfigPrint+0x64>)
 8017ea0:	9302      	str	r3, [sp, #8]
 8017ea2:	68bb      	ldr	r3, [r7, #8]
 8017ea4:	9301      	str	r3, [sp, #4]
 8017ea6:	68fb      	ldr	r3, [r7, #12]
 8017ea8:	9300      	str	r3, [sp, #0]
 8017eaa:	0013      	movs	r3, r2
 8017eac:	2200      	movs	r2, #0
 8017eae:	2100      	movs	r1, #0
 8017eb0:	2002      	movs	r0, #2
 8017eb2:	f003 ffe1 	bl	801be78 <UTIL_ADV_TRACE_COND_FSend>
}
 8017eb6:	46c0      	nop			; (mov r8, r8)
 8017eb8:	46bd      	mov	sp, r7
 8017eba:	b004      	add	sp, #16
 8017ebc:	bd80      	pop	{r7, pc}
 8017ebe:	46c0      	nop			; (mov r8, r8)
 8017ec0:	000f4240 	.word	0x000f4240
 8017ec4:	000186a0 	.word	0x000186a0
 8017ec8:	0801fc24 	.word	0x0801fc24

08017ecc <GetNextLowerTxDr>:
 */
static RegionEU868NvmCtx_t NvmCtx;

// Static functions
static int8_t GetNextLowerTxDr( int8_t dr, int8_t minDr )
{
 8017ecc:	b580      	push	{r7, lr}
 8017ece:	b084      	sub	sp, #16
 8017ed0:	af00      	add	r7, sp, #0
 8017ed2:	0002      	movs	r2, r0
 8017ed4:	1dfb      	adds	r3, r7, #7
 8017ed6:	701a      	strb	r2, [r3, #0]
 8017ed8:	1dbb      	adds	r3, r7, #6
 8017eda:	1c0a      	adds	r2, r1, #0
 8017edc:	701a      	strb	r2, [r3, #0]
    uint8_t nextLowerDr = 0;
 8017ede:	210f      	movs	r1, #15
 8017ee0:	187b      	adds	r3, r7, r1
 8017ee2:	2200      	movs	r2, #0
 8017ee4:	701a      	strb	r2, [r3, #0]

    if( dr == minDr )
 8017ee6:	1dfa      	adds	r2, r7, #7
 8017ee8:	1dbb      	adds	r3, r7, #6
 8017eea:	7812      	ldrb	r2, [r2, #0]
 8017eec:	b252      	sxtb	r2, r2
 8017eee:	781b      	ldrb	r3, [r3, #0]
 8017ef0:	b25b      	sxtb	r3, r3
 8017ef2:	429a      	cmp	r2, r3
 8017ef4:	d104      	bne.n	8017f00 <GetNextLowerTxDr+0x34>
    {
        nextLowerDr = minDr;
 8017ef6:	187b      	adds	r3, r7, r1
 8017ef8:	1dba      	adds	r2, r7, #6
 8017efa:	7812      	ldrb	r2, [r2, #0]
 8017efc:	701a      	strb	r2, [r3, #0]
 8017efe:	e005      	b.n	8017f0c <GetNextLowerTxDr+0x40>
    }
    else
    {
        nextLowerDr = dr - 1;
 8017f00:	1dfb      	adds	r3, r7, #7
 8017f02:	781a      	ldrb	r2, [r3, #0]
 8017f04:	230f      	movs	r3, #15
 8017f06:	18fb      	adds	r3, r7, r3
 8017f08:	3a01      	subs	r2, #1
 8017f0a:	701a      	strb	r2, [r3, #0]
    }
    return nextLowerDr;
 8017f0c:	230f      	movs	r3, #15
 8017f0e:	18fb      	adds	r3, r7, r3
 8017f10:	781b      	ldrb	r3, [r3, #0]
 8017f12:	b25b      	sxtb	r3, r3
}
 8017f14:	0018      	movs	r0, r3
 8017f16:	46bd      	mov	sp, r7
 8017f18:	b004      	add	sp, #16
 8017f1a:	bd80      	pop	{r7, pc}

08017f1c <GetBandwidth>:

static uint32_t GetBandwidth( uint32_t drIndex )
{
 8017f1c:	b580      	push	{r7, lr}
 8017f1e:	b082      	sub	sp, #8
 8017f20:	af00      	add	r7, sp, #0
 8017f22:	6078      	str	r0, [r7, #4]
    switch( BandwidthsEU868[drIndex] )
 8017f24:	4b09      	ldr	r3, [pc, #36]	; (8017f4c <GetBandwidth+0x30>)
 8017f26:	687a      	ldr	r2, [r7, #4]
 8017f28:	0092      	lsls	r2, r2, #2
 8017f2a:	58d3      	ldr	r3, [r2, r3]
 8017f2c:	4a08      	ldr	r2, [pc, #32]	; (8017f50 <GetBandwidth+0x34>)
 8017f2e:	4293      	cmp	r3, r2
 8017f30:	d004      	beq.n	8017f3c <GetBandwidth+0x20>
 8017f32:	4a08      	ldr	r2, [pc, #32]	; (8017f54 <GetBandwidth+0x38>)
 8017f34:	4293      	cmp	r3, r2
 8017f36:	d003      	beq.n	8017f40 <GetBandwidth+0x24>
    {
        default:
        case 125000:
            return 0;
 8017f38:	2300      	movs	r3, #0
 8017f3a:	e002      	b.n	8017f42 <GetBandwidth+0x26>
        case 250000:
            return 1;
 8017f3c:	2301      	movs	r3, #1
 8017f3e:	e000      	b.n	8017f42 <GetBandwidth+0x26>
        case 500000:
            return 2;
 8017f40:	2302      	movs	r3, #2
    }
}
 8017f42:	0018      	movs	r0, r3
 8017f44:	46bd      	mov	sp, r7
 8017f46:	b002      	add	sp, #8
 8017f48:	bd80      	pop	{r7, pc}
 8017f4a:	46c0      	nop			; (mov r8, r8)
 8017f4c:	0801fcac 	.word	0x0801fcac
 8017f50:	0003d090 	.word	0x0003d090
 8017f54:	0007a120 	.word	0x0007a120

08017f58 <LimitTxPower>:

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 8017f58:	b590      	push	{r4, r7, lr}
 8017f5a:	b085      	sub	sp, #20
 8017f5c:	af00      	add	r7, sp, #0
 8017f5e:	0004      	movs	r4, r0
 8017f60:	0008      	movs	r0, r1
 8017f62:	0011      	movs	r1, r2
 8017f64:	603b      	str	r3, [r7, #0]
 8017f66:	1dfb      	adds	r3, r7, #7
 8017f68:	1c22      	adds	r2, r4, #0
 8017f6a:	701a      	strb	r2, [r3, #0]
 8017f6c:	1dbb      	adds	r3, r7, #6
 8017f6e:	1c02      	adds	r2, r0, #0
 8017f70:	701a      	strb	r2, [r3, #0]
 8017f72:	1d7b      	adds	r3, r7, #5
 8017f74:	1c0a      	adds	r2, r1, #0
 8017f76:	701a      	strb	r2, [r3, #0]
    int8_t txPowerResult = txPower;
 8017f78:	210f      	movs	r1, #15
 8017f7a:	187b      	adds	r3, r7, r1
 8017f7c:	1dfa      	adds	r2, r7, #7
 8017f7e:	7812      	ldrb	r2, [r2, #0]
 8017f80:	701a      	strb	r2, [r3, #0]

    // Limit tx power to the band max
    txPowerResult =  MAX( txPower, maxBandTxPower );
 8017f82:	187a      	adds	r2, r7, r1
 8017f84:	1dbb      	adds	r3, r7, #6
 8017f86:	1df9      	adds	r1, r7, #7
 8017f88:	780c      	ldrb	r4, [r1, #0]
 8017f8a:	781b      	ldrb	r3, [r3, #0]
 8017f8c:	b258      	sxtb	r0, r3
 8017f8e:	b261      	sxtb	r1, r4
 8017f90:	4288      	cmp	r0, r1
 8017f92:	da00      	bge.n	8017f96 <LimitTxPower+0x3e>
 8017f94:	1c23      	adds	r3, r4, #0
 8017f96:	7013      	strb	r3, [r2, #0]

    return txPowerResult;
 8017f98:	230f      	movs	r3, #15
 8017f9a:	18fb      	adds	r3, r7, r3
 8017f9c:	781b      	ldrb	r3, [r3, #0]
 8017f9e:	b25b      	sxtb	r3, r3
}
 8017fa0:	0018      	movs	r0, r3
 8017fa2:	46bd      	mov	sp, r7
 8017fa4:	b005      	add	sp, #20
 8017fa6:	bd90      	pop	{r4, r7, pc}

08017fa8 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8017fa8:	b580      	push	{r7, lr}
 8017faa:	b082      	sub	sp, #8
 8017fac:	af00      	add	r7, sp, #0
 8017fae:	6078      	str	r0, [r7, #4]
 8017fb0:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8017fb2:	4b2e      	ldr	r3, [pc, #184]	; (801806c <VerifyRfFreq+0xc4>)
 8017fb4:	6a1b      	ldr	r3, [r3, #32]
 8017fb6:	687a      	ldr	r2, [r7, #4]
 8017fb8:	0010      	movs	r0, r2
 8017fba:	4798      	blx	r3
 8017fbc:	0003      	movs	r3, r0
 8017fbe:	001a      	movs	r2, r3
 8017fc0:	2301      	movs	r3, #1
 8017fc2:	4053      	eors	r3, r2
 8017fc4:	b2db      	uxtb	r3, r3
 8017fc6:	2b00      	cmp	r3, #0
 8017fc8:	d001      	beq.n	8017fce <VerifyRfFreq+0x26>
    {
        return false;
 8017fca:	2300      	movs	r3, #0
 8017fcc:	e04a      	b.n	8018064 <VerifyRfFreq+0xbc>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 8017fce:	687b      	ldr	r3, [r7, #4]
 8017fd0:	4a27      	ldr	r2, [pc, #156]	; (8018070 <VerifyRfFreq+0xc8>)
 8017fd2:	4293      	cmp	r3, r2
 8017fd4:	d907      	bls.n	8017fe6 <VerifyRfFreq+0x3e>
 8017fd6:	687b      	ldr	r3, [r7, #4]
 8017fd8:	4a26      	ldr	r2, [pc, #152]	; (8018074 <VerifyRfFreq+0xcc>)
 8017fda:	4293      	cmp	r3, r2
 8017fdc:	d803      	bhi.n	8017fe6 <VerifyRfFreq+0x3e>
    {
        *band = 2;
 8017fde:	683b      	ldr	r3, [r7, #0]
 8017fe0:	2202      	movs	r2, #2
 8017fe2:	701a      	strb	r2, [r3, #0]
 8017fe4:	e03d      	b.n	8018062 <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 8017fe6:	687b      	ldr	r3, [r7, #4]
 8017fe8:	4a22      	ldr	r2, [pc, #136]	; (8018074 <VerifyRfFreq+0xcc>)
 8017fea:	4293      	cmp	r3, r2
 8017fec:	d907      	bls.n	8017ffe <VerifyRfFreq+0x56>
 8017fee:	687b      	ldr	r3, [r7, #4]
 8017ff0:	4a21      	ldr	r2, [pc, #132]	; (8018078 <VerifyRfFreq+0xd0>)
 8017ff2:	4293      	cmp	r3, r2
 8017ff4:	d803      	bhi.n	8017ffe <VerifyRfFreq+0x56>
    {
        *band = 0;
 8017ff6:	683b      	ldr	r3, [r7, #0]
 8017ff8:	2200      	movs	r2, #0
 8017ffa:	701a      	strb	r2, [r3, #0]
 8017ffc:	e031      	b.n	8018062 <VerifyRfFreq+0xba>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 8017ffe:	687b      	ldr	r3, [r7, #4]
 8018000:	4a1d      	ldr	r2, [pc, #116]	; (8018078 <VerifyRfFreq+0xd0>)
 8018002:	4293      	cmp	r3, r2
 8018004:	d907      	bls.n	8018016 <VerifyRfFreq+0x6e>
 8018006:	687b      	ldr	r3, [r7, #4]
 8018008:	4a1c      	ldr	r2, [pc, #112]	; (801807c <VerifyRfFreq+0xd4>)
 801800a:	4293      	cmp	r3, r2
 801800c:	d803      	bhi.n	8018016 <VerifyRfFreq+0x6e>
    {
        *band = 1;
 801800e:	683b      	ldr	r3, [r7, #0]
 8018010:	2201      	movs	r2, #1
 8018012:	701a      	strb	r2, [r3, #0]
 8018014:	e025      	b.n	8018062 <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 8018016:	687b      	ldr	r3, [r7, #4]
 8018018:	4a19      	ldr	r2, [pc, #100]	; (8018080 <VerifyRfFreq+0xd8>)
 801801a:	4293      	cmp	r3, r2
 801801c:	d907      	bls.n	801802e <VerifyRfFreq+0x86>
 801801e:	687b      	ldr	r3, [r7, #4]
 8018020:	4a18      	ldr	r2, [pc, #96]	; (8018084 <VerifyRfFreq+0xdc>)
 8018022:	4293      	cmp	r3, r2
 8018024:	d803      	bhi.n	801802e <VerifyRfFreq+0x86>
    {
        *band = 5;
 8018026:	683b      	ldr	r3, [r7, #0]
 8018028:	2205      	movs	r2, #5
 801802a:	701a      	strb	r2, [r3, #0]
 801802c:	e019      	b.n	8018062 <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 801802e:	687b      	ldr	r3, [r7, #4]
 8018030:	4a15      	ldr	r2, [pc, #84]	; (8018088 <VerifyRfFreq+0xe0>)
 8018032:	4293      	cmp	r3, r2
 8018034:	d907      	bls.n	8018046 <VerifyRfFreq+0x9e>
 8018036:	687b      	ldr	r3, [r7, #4]
 8018038:	4a14      	ldr	r2, [pc, #80]	; (801808c <VerifyRfFreq+0xe4>)
 801803a:	4293      	cmp	r3, r2
 801803c:	d803      	bhi.n	8018046 <VerifyRfFreq+0x9e>
    {
        *band = 3;
 801803e:	683b      	ldr	r3, [r7, #0]
 8018040:	2203      	movs	r2, #3
 8018042:	701a      	strb	r2, [r3, #0]
 8018044:	e00d      	b.n	8018062 <VerifyRfFreq+0xba>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 8018046:	687b      	ldr	r3, [r7, #4]
 8018048:	4a11      	ldr	r2, [pc, #68]	; (8018090 <VerifyRfFreq+0xe8>)
 801804a:	4293      	cmp	r3, r2
 801804c:	d907      	bls.n	801805e <VerifyRfFreq+0xb6>
 801804e:	687b      	ldr	r3, [r7, #4]
 8018050:	4a10      	ldr	r2, [pc, #64]	; (8018094 <VerifyRfFreq+0xec>)
 8018052:	4293      	cmp	r3, r2
 8018054:	d803      	bhi.n	801805e <VerifyRfFreq+0xb6>
    {
        *band = 4;
 8018056:	683b      	ldr	r3, [r7, #0]
 8018058:	2204      	movs	r2, #4
 801805a:	701a      	strb	r2, [r3, #0]
 801805c:	e001      	b.n	8018062 <VerifyRfFreq+0xba>
    }
    else
    {
        return false;
 801805e:	2300      	movs	r3, #0
 8018060:	e000      	b.n	8018064 <VerifyRfFreq+0xbc>
    }
    return true;
 8018062:	2301      	movs	r3, #1
}
 8018064:	0018      	movs	r0, r3
 8018066:	46bd      	mov	sp, r7
 8018068:	b002      	add	sp, #8
 801806a:	bd80      	pop	{r7, pc}
 801806c:	0801fe28 	.word	0x0801fe28
 8018070:	337055bf 	.word	0x337055bf
 8018074:	338eda3f 	.word	0x338eda3f
 8018078:	33bca100 	.word	0x33bca100
 801807c:	33c5c8c0 	.word	0x33c5c8c0
 8018080:	33c74f5f 	.word	0x33c74f5f
 8018084:	33cef080 	.word	0x33cef080
 8018088:	33d1fdbf 	.word	0x33d1fdbf
 801808c:	33d5ce50 	.word	0x33d5ce50
 8018090:	33d6919f 	.word	0x33d6919f
 8018094:	33db2580 	.word	0x33db2580

08018098 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8018098:	b5b0      	push	{r4, r5, r7, lr}
 801809a:	b08a      	sub	sp, #40	; 0x28
 801809c:	af04      	add	r7, sp, #16
 801809e:	0002      	movs	r2, r0
 80180a0:	1dfb      	adds	r3, r7, #7
 80180a2:	701a      	strb	r2, [r3, #0]
 80180a4:	1d3b      	adds	r3, r7, #4
 80180a6:	1c0a      	adds	r2, r1, #0
 80180a8:	801a      	strh	r2, [r3, #0]
    int8_t phyDr = DataratesEU868[datarate];
 80180aa:	1dfb      	adds	r3, r7, #7
 80180ac:	781b      	ldrb	r3, [r3, #0]
 80180ae:	b25b      	sxtb	r3, r3
 80180b0:	4a26      	ldr	r2, [pc, #152]	; (801814c <GetTimeOnAir+0xb4>)
 80180b2:	5cd2      	ldrb	r2, [r2, r3]
 80180b4:	2513      	movs	r5, #19
 80180b6:	197b      	adds	r3, r7, r5
 80180b8:	701a      	strb	r2, [r3, #0]
    uint32_t bandwidth = GetBandwidth( datarate );
 80180ba:	1dfb      	adds	r3, r7, #7
 80180bc:	781b      	ldrb	r3, [r3, #0]
 80180be:	b25b      	sxtb	r3, r3
 80180c0:	0018      	movs	r0, r3
 80180c2:	f7ff ff2b 	bl	8017f1c <GetBandwidth>
 80180c6:	0003      	movs	r3, r0
 80180c8:	60fb      	str	r3, [r7, #12]
    TimerTime_t timeOnAir = 0;
 80180ca:	2300      	movs	r3, #0
 80180cc:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 80180ce:	1dfb      	adds	r3, r7, #7
 80180d0:	781b      	ldrb	r3, [r3, #0]
 80180d2:	b25b      	sxtb	r3, r3
 80180d4:	2b07      	cmp	r3, #7
 80180d6:	d11d      	bne.n	8018114 <GetTimeOnAir+0x7c>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 80180d8:	4b1d      	ldr	r3, [pc, #116]	; (8018150 <GetTimeOnAir+0xb8>)
 80180da:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80180dc:	197b      	adds	r3, r7, r5
 80180de:	2200      	movs	r2, #0
 80180e0:	569a      	ldrsb	r2, [r3, r2]
 80180e2:	0013      	movs	r3, r2
 80180e4:	015b      	lsls	r3, r3, #5
 80180e6:	1a9b      	subs	r3, r3, r2
 80180e8:	009b      	lsls	r3, r3, #2
 80180ea:	189b      	adds	r3, r3, r2
 80180ec:	00db      	lsls	r3, r3, #3
 80180ee:	0018      	movs	r0, r3
 80180f0:	1d3b      	adds	r3, r7, #4
 80180f2:	881b      	ldrh	r3, [r3, #0]
 80180f4:	b2db      	uxtb	r3, r3
 80180f6:	68f9      	ldr	r1, [r7, #12]
 80180f8:	2201      	movs	r2, #1
 80180fa:	9203      	str	r2, [sp, #12]
 80180fc:	9302      	str	r3, [sp, #8]
 80180fe:	2300      	movs	r3, #0
 8018100:	9301      	str	r3, [sp, #4]
 8018102:	2305      	movs	r3, #5
 8018104:	9300      	str	r3, [sp, #0]
 8018106:	2300      	movs	r3, #0
 8018108:	0002      	movs	r2, r0
 801810a:	2000      	movs	r0, #0
 801810c:	47a0      	blx	r4
 801810e:	0003      	movs	r3, r0
 8018110:	617b      	str	r3, [r7, #20]
 8018112:	e015      	b.n	8018140 <GetTimeOnAir+0xa8>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8018114:	4b0e      	ldr	r3, [pc, #56]	; (8018150 <GetTimeOnAir+0xb8>)
 8018116:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8018118:	2313      	movs	r3, #19
 801811a:	18fb      	adds	r3, r7, r3
 801811c:	2200      	movs	r2, #0
 801811e:	569a      	ldrsb	r2, [r3, r2]
 8018120:	1d3b      	adds	r3, r7, #4
 8018122:	881b      	ldrh	r3, [r3, #0]
 8018124:	b2db      	uxtb	r3, r3
 8018126:	68f9      	ldr	r1, [r7, #12]
 8018128:	2001      	movs	r0, #1
 801812a:	9003      	str	r0, [sp, #12]
 801812c:	9302      	str	r3, [sp, #8]
 801812e:	2300      	movs	r3, #0
 8018130:	9301      	str	r3, [sp, #4]
 8018132:	2308      	movs	r3, #8
 8018134:	9300      	str	r3, [sp, #0]
 8018136:	2301      	movs	r3, #1
 8018138:	2001      	movs	r0, #1
 801813a:	47a0      	blx	r4
 801813c:	0003      	movs	r3, r0
 801813e:	617b      	str	r3, [r7, #20]
    }
    return timeOnAir;
 8018140:	697b      	ldr	r3, [r7, #20]
}
 8018142:	0018      	movs	r0, r3
 8018144:	46bd      	mov	sp, r7
 8018146:	b006      	add	sp, #24
 8018148:	bdb0      	pop	{r4, r5, r7, pc}
 801814a:	46c0      	nop			; (mov r8, r8)
 801814c:	0801fca4 	.word	0x0801fca4
 8018150:	0801fe28 	.word	0x0801fe28

08018154 <RegionEU868GetPhyParam>:

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8018154:	b580      	push	{r7, lr}
 8018156:	b084      	sub	sp, #16
 8018158:	af00      	add	r7, sp, #0
 801815a:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 801815c:	2308      	movs	r3, #8
 801815e:	18fb      	adds	r3, r7, r3
 8018160:	2200      	movs	r2, #0
 8018162:	601a      	str	r2, [r3, #0]

    switch( getPhy->Attribute )
 8018164:	687b      	ldr	r3, [r7, #4]
 8018166:	781b      	ldrb	r3, [r3, #0]
 8018168:	2b39      	cmp	r3, #57	; 0x39
 801816a:	d900      	bls.n	801816e <RegionEU868GetPhyParam+0x1a>
 801816c:	e0e9      	b.n	8018342 <RegionEU868GetPhyParam+0x1ee>
 801816e:	009a      	lsls	r2, r3, #2
 8018170:	4b7b      	ldr	r3, [pc, #492]	; (8018360 <RegionEU868GetPhyParam+0x20c>)
 8018172:	18d3      	adds	r3, r2, r3
 8018174:	681b      	ldr	r3, [r3, #0]
 8018176:	469f      	mov	pc, r3
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8018178:	2308      	movs	r3, #8
 801817a:	18fb      	adds	r3, r7, r3
 801817c:	2200      	movs	r2, #0
 801817e:	601a      	str	r2, [r3, #0]
            break;
 8018180:	e0e0      	b.n	8018344 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 8018182:	2308      	movs	r3, #8
 8018184:	18fb      	adds	r3, r7, r3
 8018186:	2200      	movs	r2, #0
 8018188:	601a      	str	r2, [r3, #0]
            break;
 801818a:	e0db      	b.n	8018344 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 801818c:	2308      	movs	r3, #8
 801818e:	18fb      	adds	r3, r7, r3
 8018190:	2200      	movs	r2, #0
 8018192:	601a      	str	r2, [r3, #0]
            break;
 8018194:	e0d6      	b.n	8018344 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, EU868_TX_MIN_DATARATE );
 8018196:	687b      	ldr	r3, [r7, #4]
 8018198:	785b      	ldrb	r3, [r3, #1]
 801819a:	b25b      	sxtb	r3, r3
 801819c:	2100      	movs	r1, #0
 801819e:	0018      	movs	r0, r3
 80181a0:	f7ff fe94 	bl	8017ecc <GetNextLowerTxDr>
 80181a4:	0003      	movs	r3, r0
 80181a6:	001a      	movs	r2, r3
 80181a8:	2308      	movs	r3, #8
 80181aa:	18fb      	adds	r3, r7, r3
 80181ac:	601a      	str	r2, [r3, #0]
            break;
 80181ae:	e0c9      	b.n	8018344 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 80181b0:	2308      	movs	r3, #8
 80181b2:	18fb      	adds	r3, r7, r3
 80181b4:	2200      	movs	r2, #0
 80181b6:	601a      	str	r2, [r3, #0]
            break;
 80181b8:	e0c4      	b.n	8018344 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 80181ba:	2308      	movs	r3, #8
 80181bc:	18fb      	adds	r3, r7, r3
 80181be:	2200      	movs	r2, #0
 80181c0:	601a      	str	r2, [r3, #0]
            break;
 80181c2:	e0bf      	b.n	8018344 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = EU868_ADR_ACK_LIMIT;
 80181c4:	2308      	movs	r3, #8
 80181c6:	18fb      	adds	r3, r7, r3
 80181c8:	2240      	movs	r2, #64	; 0x40
 80181ca:	601a      	str	r2, [r3, #0]
            break;
 80181cc:	e0ba      	b.n	8018344 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = EU868_ADR_ACK_DELAY;
 80181ce:	2308      	movs	r3, #8
 80181d0:	18fb      	adds	r3, r7, r3
 80181d2:	2220      	movs	r2, #32
 80181d4:	601a      	str	r2, [r3, #0]
            break;
 80181d6:	e0b5      	b.n	8018344 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 80181d8:	687b      	ldr	r3, [r7, #4]
 80181da:	785b      	ldrb	r3, [r3, #1]
 80181dc:	b25b      	sxtb	r3, r3
 80181de:	001a      	movs	r2, r3
 80181e0:	4b60      	ldr	r3, [pc, #384]	; (8018364 <RegionEU868GetPhyParam+0x210>)
 80181e2:	5c9b      	ldrb	r3, [r3, r2]
 80181e4:	001a      	movs	r2, r3
 80181e6:	2308      	movs	r3, #8
 80181e8:	18fb      	adds	r3, r7, r3
 80181ea:	601a      	str	r2, [r3, #0]
            break;
 80181ec:	e0aa      	b.n	8018344 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 80181ee:	687b      	ldr	r3, [r7, #4]
 80181f0:	785b      	ldrb	r3, [r3, #1]
 80181f2:	b25b      	sxtb	r3, r3
 80181f4:	001a      	movs	r2, r3
 80181f6:	4b5c      	ldr	r3, [pc, #368]	; (8018368 <RegionEU868GetPhyParam+0x214>)
 80181f8:	5c9b      	ldrb	r3, [r3, r2]
 80181fa:	001a      	movs	r2, r3
 80181fc:	2308      	movs	r3, #8
 80181fe:	18fb      	adds	r3, r7, r3
 8018200:	601a      	str	r2, [r3, #0]
            break;
 8018202:	e09f      	b.n	8018344 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8018204:	2308      	movs	r3, #8
 8018206:	18fb      	adds	r3, r7, r3
 8018208:	2201      	movs	r2, #1
 801820a:	601a      	str	r2, [r3, #0]
            break;
 801820c:	e09a      	b.n	8018344 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 801820e:	2308      	movs	r3, #8
 8018210:	18fb      	adds	r3, r7, r3
 8018212:	4a56      	ldr	r2, [pc, #344]	; (801836c <RegionEU868GetPhyParam+0x218>)
 8018214:	601a      	str	r2, [r3, #0]
            break;
 8018216:	e095      	b.n	8018344 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = EU868_RECEIVE_DELAY1;
 8018218:	2308      	movs	r3, #8
 801821a:	18fb      	adds	r3, r7, r3
 801821c:	22fa      	movs	r2, #250	; 0xfa
 801821e:	0092      	lsls	r2, r2, #2
 8018220:	601a      	str	r2, [r3, #0]
            break;
 8018222:	e08f      	b.n	8018344 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = EU868_RECEIVE_DELAY2;
 8018224:	2308      	movs	r3, #8
 8018226:	18fb      	adds	r3, r7, r3
 8018228:	22fa      	movs	r2, #250	; 0xfa
 801822a:	00d2      	lsls	r2, r2, #3
 801822c:	601a      	str	r2, [r3, #0]
            break;
 801822e:	e089      	b.n	8018344 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = EU868_JOIN_ACCEPT_DELAY1;
 8018230:	2308      	movs	r3, #8
 8018232:	18fb      	adds	r3, r7, r3
 8018234:	4a4e      	ldr	r2, [pc, #312]	; (8018370 <RegionEU868GetPhyParam+0x21c>)
 8018236:	601a      	str	r2, [r3, #0]
            break;
 8018238:	e084      	b.n	8018344 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = EU868_JOIN_ACCEPT_DELAY2;
 801823a:	2308      	movs	r3, #8
 801823c:	18fb      	adds	r3, r7, r3
 801823e:	4a4d      	ldr	r2, [pc, #308]	; (8018374 <RegionEU868GetPhyParam+0x220>)
 8018240:	601a      	str	r2, [r3, #0]
            break;
 8018242:	e07f      	b.n	8018344 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = EU868_MAX_FCNT_GAP;
 8018244:	2308      	movs	r3, #8
 8018246:	18fb      	adds	r3, r7, r3
 8018248:	2280      	movs	r2, #128	; 0x80
 801824a:	01d2      	lsls	r2, r2, #7
 801824c:	601a      	str	r2, [r3, #0]
            break;
 801824e:	e079      	b.n	8018344 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( EU868_ACKTIMEOUT + randr( -EU868_ACK_TIMEOUT_RND, EU868_ACK_TIMEOUT_RND ) );
 8018250:	23fa      	movs	r3, #250	; 0xfa
 8018252:	009b      	lsls	r3, r3, #2
 8018254:	4a48      	ldr	r2, [pc, #288]	; (8018378 <RegionEU868GetPhyParam+0x224>)
 8018256:	0019      	movs	r1, r3
 8018258:	0010      	movs	r0, r2
 801825a:	f001 f983 	bl	8019564 <randr>
 801825e:	0003      	movs	r3, r0
 8018260:	22fa      	movs	r2, #250	; 0xfa
 8018262:	00d2      	lsls	r2, r2, #3
 8018264:	4694      	mov	ip, r2
 8018266:	4463      	add	r3, ip
 8018268:	001a      	movs	r2, r3
 801826a:	2308      	movs	r3, #8
 801826c:	18fb      	adds	r3, r7, r3
 801826e:	601a      	str	r2, [r3, #0]
            break;
 8018270:	e068      	b.n	8018344 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = EU868_DEFAULT_RX1_DR_OFFSET;
 8018272:	2308      	movs	r3, #8
 8018274:	18fb      	adds	r3, r7, r3
 8018276:	2200      	movs	r2, #0
 8018278:	601a      	str	r2, [r3, #0]
            break;
 801827a:	e063      	b.n	8018344 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 801827c:	2308      	movs	r3, #8
 801827e:	18fb      	adds	r3, r7, r3
 8018280:	4a3e      	ldr	r2, [pc, #248]	; (801837c <RegionEU868GetPhyParam+0x228>)
 8018282:	601a      	str	r2, [r3, #0]
            break;
 8018284:	e05e      	b.n	8018344 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8018286:	2308      	movs	r3, #8
 8018288:	18fb      	adds	r3, r7, r3
 801828a:	2200      	movs	r2, #0
 801828c:	601a      	str	r2, [r3, #0]
            break;
 801828e:	e059      	b.n	8018344 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsMask;
 8018290:	2308      	movs	r3, #8
 8018292:	18fb      	adds	r3, r7, r3
 8018294:	4a3a      	ldr	r2, [pc, #232]	; (8018380 <RegionEU868GetPhyParam+0x22c>)
 8018296:	601a      	str	r2, [r3, #0]
            break;
 8018298:	e054      	b.n	8018344 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsDefaultMask;
 801829a:	2308      	movs	r3, #8
 801829c:	18fb      	adds	r3, r7, r3
 801829e:	4a39      	ldr	r2, [pc, #228]	; (8018384 <RegionEU868GetPhyParam+0x230>)
 80182a0:	601a      	str	r2, [r3, #0]
            break;
 80182a2:	e04f      	b.n	8018344 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 80182a4:	2308      	movs	r3, #8
 80182a6:	18fb      	adds	r3, r7, r3
 80182a8:	2210      	movs	r2, #16
 80182aa:	601a      	str	r2, [r3, #0]
            break;
 80182ac:	e04a      	b.n	8018344 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = NvmCtx.Channels;
 80182ae:	2308      	movs	r3, #8
 80182b0:	18fb      	adds	r3, r7, r3
 80182b2:	4a35      	ldr	r2, [pc, #212]	; (8018388 <RegionEU868GetPhyParam+0x234>)
 80182b4:	601a      	str	r2, [r3, #0]
            break;
 80182b6:	e045      	b.n	8018344 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = 0;
 80182b8:	2308      	movs	r3, #8
 80182ba:	18fb      	adds	r3, r7, r3
 80182bc:	2200      	movs	r2, #0
 80182be:	601a      	str	r2, [r3, #0]
            break;
 80182c0:	e040      	b.n	8018344 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 80182c2:	2308      	movs	r3, #8
 80182c4:	18fb      	adds	r3, r7, r3
 80182c6:	2283      	movs	r2, #131	; 0x83
 80182c8:	05d2      	lsls	r2, r2, #23
 80182ca:	601a      	str	r2, [r3, #0]
            break;
 80182cc:	e03a      	b.n	8018344 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 80182ce:	2308      	movs	r3, #8
 80182d0:	18fb      	adds	r3, r7, r3
 80182d2:	4a2e      	ldr	r2, [pc, #184]	; (801838c <RegionEU868GetPhyParam+0x238>)
 80182d4:	601a      	str	r2, [r3, #0]
            break;
 80182d6:	e035      	b.n	8018344 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 80182d8:	2308      	movs	r3, #8
 80182da:	18fb      	adds	r3, r7, r3
 80182dc:	4a27      	ldr	r2, [pc, #156]	; (801837c <RegionEU868GetPhyParam+0x228>)
 80182de:	601a      	str	r2, [r3, #0]
            break;
 80182e0:	e030      	b.n	8018344 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 80182e2:	2108      	movs	r1, #8
 80182e4:	187b      	adds	r3, r7, r1
 80182e6:	2211      	movs	r2, #17
 80182e8:	701a      	strb	r2, [r3, #0]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 80182ea:	187b      	adds	r3, r7, r1
 80182ec:	2202      	movs	r2, #2
 80182ee:	705a      	strb	r2, [r3, #1]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 80182f0:	187b      	adds	r3, r7, r1
 80182f2:	2200      	movs	r2, #0
 80182f4:	709a      	strb	r2, [r3, #2]
            break;
 80182f6:	e025      	b.n	8018344 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 80182f8:	2308      	movs	r3, #8
 80182fa:	18fb      	adds	r3, r7, r3
 80182fc:	2203      	movs	r2, #3
 80182fe:	601a      	str	r2, [r3, #0]
            break;
 8018300:	e020      	b.n	8018344 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 8018302:	2308      	movs	r3, #8
 8018304:	18fb      	adds	r3, r7, r3
 8018306:	4a1d      	ldr	r2, [pc, #116]	; (801837c <RegionEU868GetPhyParam+0x228>)
 8018308:	601a      	str	r2, [r3, #0]
            break;
 801830a:	e01b      	b.n	8018344 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 801830c:	2308      	movs	r3, #8
 801830e:	18fb      	adds	r3, r7, r3
 8018310:	2203      	movs	r2, #3
 8018312:	601a      	str	r2, [r3, #0]
            break;
 8018314:	e016      	b.n	8018344 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 8018316:	687b      	ldr	r3, [r7, #4]
 8018318:	785b      	ldrb	r3, [r3, #1]
 801831a:	b25b      	sxtb	r3, r3
 801831c:	001a      	movs	r2, r3
 801831e:	4b1c      	ldr	r3, [pc, #112]	; (8018390 <RegionEU868GetPhyParam+0x23c>)
 8018320:	5c9b      	ldrb	r3, [r3, r2]
 8018322:	001a      	movs	r2, r3
 8018324:	2308      	movs	r3, #8
 8018326:	18fb      	adds	r3, r7, r3
 8018328:	601a      	str	r2, [r3, #0]
            break;
 801832a:	e00b      	b.n	8018344 <RegionEU868GetPhyParam+0x1f0>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = GetBandwidth( getPhy->Datarate );
 801832c:	687b      	ldr	r3, [r7, #4]
 801832e:	785b      	ldrb	r3, [r3, #1]
 8018330:	b25b      	sxtb	r3, r3
 8018332:	0018      	movs	r0, r3
 8018334:	f7ff fdf2 	bl	8017f1c <GetBandwidth>
 8018338:	0002      	movs	r2, r0
 801833a:	2308      	movs	r3, #8
 801833c:	18fb      	adds	r3, r7, r3
 801833e:	601a      	str	r2, [r3, #0]
            break;
 8018340:	e000      	b.n	8018344 <RegionEU868GetPhyParam+0x1f0>
        }
        default:
        {
            break;
 8018342:	46c0      	nop			; (mov r8, r8)
        }
    }

    return phyParam;
 8018344:	210c      	movs	r1, #12
 8018346:	187b      	adds	r3, r7, r1
 8018348:	2208      	movs	r2, #8
 801834a:	18ba      	adds	r2, r7, r2
 801834c:	6812      	ldr	r2, [r2, #0]
 801834e:	601a      	str	r2, [r3, #0]
 8018350:	187b      	adds	r3, r7, r1
 8018352:	2200      	movs	r2, #0
 8018354:	681a      	ldr	r2, [r3, #0]
 8018356:	0013      	movs	r3, r2
}
 8018358:	0018      	movs	r0, r3
 801835a:	46bd      	mov	sp, r7
 801835c:	b004      	add	sp, #16
 801835e:	bd80      	pop	{r7, pc}
 8018360:	0801fcdc 	.word	0x0801fcdc
 8018364:	0801fccc 	.word	0x0801fccc
 8018368:	0801fcd4 	.word	0x0801fcd4
 801836c:	00000bb8 	.word	0x00000bb8
 8018370:	00001388 	.word	0x00001388
 8018374:	00001770 	.word	0x00001770
 8018378:	fffffc18 	.word	0xfffffc18
 801837c:	33d3e608 	.word	0x33d3e608
 8018380:	20000e7c 	.word	0x20000e7c
 8018384:	20000e7e 	.word	0x20000e7e
 8018388:	20000d44 	.word	0x20000d44
 801838c:	4009999a 	.word	0x4009999a
 8018390:	0801fca4 	.word	0x0801fca4

08018394 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8018394:	b5b0      	push	{r4, r5, r7, lr}
 8018396:	b084      	sub	sp, #16
 8018398:	af02      	add	r7, sp, #8
 801839a:	6078      	str	r0, [r7, #4]
    RegionCommonSetBandTxDone( &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band],
 801839c:	687b      	ldr	r3, [r7, #4]
 801839e:	781b      	ldrb	r3, [r3, #0]
 80183a0:	0019      	movs	r1, r3
 80183a2:	4a11      	ldr	r2, [pc, #68]	; (80183e8 <RegionEU868SetBandTxDone+0x54>)
 80183a4:	000b      	movs	r3, r1
 80183a6:	005b      	lsls	r3, r3, #1
 80183a8:	185b      	adds	r3, r3, r1
 80183aa:	009b      	lsls	r3, r3, #2
 80183ac:	18d3      	adds	r3, r2, r3
 80183ae:	3309      	adds	r3, #9
 80183b0:	781b      	ldrb	r3, [r3, #0]
 80183b2:	001a      	movs	r2, r3
 80183b4:	0013      	movs	r3, r2
 80183b6:	009b      	lsls	r3, r3, #2
 80183b8:	189b      	adds	r3, r3, r2
 80183ba:	009b      	lsls	r3, r3, #2
 80183bc:	33c0      	adds	r3, #192	; 0xc0
 80183be:	001a      	movs	r2, r3
 80183c0:	4b09      	ldr	r3, [pc, #36]	; (80183e8 <RegionEU868SetBandTxDone+0x54>)
 80183c2:	18d0      	adds	r0, r2, r3
 80183c4:	687b      	ldr	r3, [r7, #4]
 80183c6:	689c      	ldr	r4, [r3, #8]
 80183c8:	687b      	ldr	r3, [r7, #4]
 80183ca:	785d      	ldrb	r5, [r3, #1]
 80183cc:	687b      	ldr	r3, [r7, #4]
 80183ce:	466a      	mov	r2, sp
 80183d0:	6919      	ldr	r1, [r3, #16]
 80183d2:	6011      	str	r1, [r2, #0]
 80183d4:	68db      	ldr	r3, [r3, #12]
 80183d6:	002a      	movs	r2, r5
 80183d8:	0021      	movs	r1, r4
 80183da:	f7ff f92e 	bl	801763a <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
}
 80183de:	46c0      	nop			; (mov r8, r8)
 80183e0:	46bd      	mov	sp, r7
 80183e2:	b002      	add	sp, #8
 80183e4:	bdb0      	pop	{r4, r5, r7, pc}
 80183e6:	46c0      	nop			; (mov r8, r8)
 80183e8:	20000d44 	.word	0x20000d44

080183ec <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 80183ec:	b590      	push	{r4, r7, lr}
 80183ee:	b0ab      	sub	sp, #172	; 0xac
 80183f0:	af00      	add	r7, sp, #0
 80183f2:	6078      	str	r0, [r7, #4]
    Band_t bands[EU868_MAX_NB_BANDS] =
 80183f4:	2430      	movs	r4, #48	; 0x30
 80183f6:	193b      	adds	r3, r7, r4
 80183f8:	0018      	movs	r0, r3
 80183fa:	2378      	movs	r3, #120	; 0x78
 80183fc:	001a      	movs	r2, r3
 80183fe:	2100      	movs	r1, #0
 8018400:	f005 fdd7 	bl	801dfb2 <memset>
 8018404:	0021      	movs	r1, r4
 8018406:	187b      	adds	r3, r7, r1
 8018408:	2264      	movs	r2, #100	; 0x64
 801840a:	801a      	strh	r2, [r3, #0]
 801840c:	187b      	adds	r3, r7, r1
 801840e:	2264      	movs	r2, #100	; 0x64
 8018410:	829a      	strh	r2, [r3, #20]
 8018412:	187b      	adds	r3, r7, r1
 8018414:	22fa      	movs	r2, #250	; 0xfa
 8018416:	0092      	lsls	r2, r2, #2
 8018418:	851a      	strh	r2, [r3, #40]	; 0x28
 801841a:	187b      	adds	r3, r7, r1
 801841c:	220a      	movs	r2, #10
 801841e:	879a      	strh	r2, [r3, #60]	; 0x3c
 8018420:	0008      	movs	r0, r1
 8018422:	187b      	adds	r3, r7, r1
 8018424:	2250      	movs	r2, #80	; 0x50
 8018426:	2164      	movs	r1, #100	; 0x64
 8018428:	5299      	strh	r1, [r3, r2]
 801842a:	183b      	adds	r3, r7, r0
 801842c:	2264      	movs	r2, #100	; 0x64
 801842e:	21fa      	movs	r1, #250	; 0xfa
 8018430:	0089      	lsls	r1, r1, #2
 8018432:	5299      	strh	r1, [r3, r2]
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8018434:	687b      	ldr	r3, [r7, #4]
 8018436:	791b      	ldrb	r3, [r3, #4]
 8018438:	2b03      	cmp	r3, #3
 801843a:	d048      	beq.n	80184ce <RegionEU868InitDefaults+0xe2>
 801843c:	dc54      	bgt.n	80184e8 <RegionEU868InitDefaults+0xfc>
 801843e:	2b02      	cmp	r3, #2
 8018440:	d036      	beq.n	80184b0 <RegionEU868InitDefaults+0xc4>
 8018442:	dc51      	bgt.n	80184e8 <RegionEU868InitDefaults+0xfc>
 8018444:	2b00      	cmp	r3, #0
 8018446:	d002      	beq.n	801844e <RegionEU868InitDefaults+0x62>
 8018448:	2b01      	cmp	r3, #1
 801844a:	d021      	beq.n	8018490 <RegionEU868InitDefaults+0xa4>
            }
            break;
        }
        default:
        {
            break;
 801844c:	e04c      	b.n	80184e8 <RegionEU868InitDefaults+0xfc>
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 801844e:	2330      	movs	r3, #48	; 0x30
 8018450:	18f9      	adds	r1, r7, r3
 8018452:	4b29      	ldr	r3, [pc, #164]	; (80184f8 <RegionEU868InitDefaults+0x10c>)
 8018454:	2278      	movs	r2, #120	; 0x78
 8018456:	0018      	movs	r0, r3
 8018458:	f001 f89a 	bl	8019590 <memcpy1>
            NvmCtx.Channels[0] = ( ChannelParams_t ) EU868_LC1;
 801845c:	4b27      	ldr	r3, [pc, #156]	; (80184fc <RegionEU868InitDefaults+0x110>)
 801845e:	4a28      	ldr	r2, [pc, #160]	; (8018500 <RegionEU868InitDefaults+0x114>)
 8018460:	ca13      	ldmia	r2!, {r0, r1, r4}
 8018462:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8018464:	4b25      	ldr	r3, [pc, #148]	; (80184fc <RegionEU868InitDefaults+0x110>)
 8018466:	4a27      	ldr	r2, [pc, #156]	; (8018504 <RegionEU868InitDefaults+0x118>)
 8018468:	330c      	adds	r3, #12
 801846a:	ca13      	ldmia	r2!, {r0, r1, r4}
 801846c:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[2] = ( ChannelParams_t ) EU868_LC3;
 801846e:	4b23      	ldr	r3, [pc, #140]	; (80184fc <RegionEU868InitDefaults+0x110>)
 8018470:	4a25      	ldr	r2, [pc, #148]	; (8018508 <RegionEU868InitDefaults+0x11c>)
 8018472:	3318      	adds	r3, #24
 8018474:	ca13      	ldmia	r2!, {r0, r1, r4}
 8018476:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8018478:	4a20      	ldr	r2, [pc, #128]	; (80184fc <RegionEU868InitDefaults+0x110>)
 801847a:	239d      	movs	r3, #157	; 0x9d
 801847c:	005b      	lsls	r3, r3, #1
 801847e:	2107      	movs	r1, #7
 8018480:	52d1      	strh	r1, [r2, r3]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8018482:	4922      	ldr	r1, [pc, #136]	; (801850c <RegionEU868InitDefaults+0x120>)
 8018484:	4b22      	ldr	r3, [pc, #136]	; (8018510 <RegionEU868InitDefaults+0x124>)
 8018486:	2201      	movs	r2, #1
 8018488:	0018      	movs	r0, r3
 801848a:	f7ff f8a7 	bl	80175dc <RegionCommonChanMaskCopy>
            break;
 801848e:	e02e      	b.n	80184ee <RegionEU868InitDefaults+0x102>
            NvmCtx.Channels[0].Rx1Frequency = 0;
 8018490:	4b1a      	ldr	r3, [pc, #104]	; (80184fc <RegionEU868InitDefaults+0x110>)
 8018492:	2200      	movs	r2, #0
 8018494:	605a      	str	r2, [r3, #4]
            NvmCtx.Channels[1].Rx1Frequency = 0;
 8018496:	4b19      	ldr	r3, [pc, #100]	; (80184fc <RegionEU868InitDefaults+0x110>)
 8018498:	2200      	movs	r2, #0
 801849a:	611a      	str	r2, [r3, #16]
            NvmCtx.Channels[2].Rx1Frequency = 0;
 801849c:	4b17      	ldr	r3, [pc, #92]	; (80184fc <RegionEU868InitDefaults+0x110>)
 801849e:	2200      	movs	r2, #0
 80184a0:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80184a2:	491a      	ldr	r1, [pc, #104]	; (801850c <RegionEU868InitDefaults+0x120>)
 80184a4:	4b1a      	ldr	r3, [pc, #104]	; (8018510 <RegionEU868InitDefaults+0x124>)
 80184a6:	2201      	movs	r2, #1
 80184a8:	0018      	movs	r0, r3
 80184aa:	f7ff f897 	bl	80175dc <RegionCommonChanMaskCopy>
            break;
 80184ae:	e01e      	b.n	80184ee <RegionEU868InitDefaults+0x102>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
 80184b0:	4a12      	ldr	r2, [pc, #72]	; (80184fc <RegionEU868InitDefaults+0x110>)
 80184b2:	239c      	movs	r3, #156	; 0x9c
 80184b4:	005b      	lsls	r3, r3, #1
 80184b6:	5ad2      	ldrh	r2, [r2, r3]
 80184b8:	4910      	ldr	r1, [pc, #64]	; (80184fc <RegionEU868InitDefaults+0x110>)
 80184ba:	239d      	movs	r3, #157	; 0x9d
 80184bc:	005b      	lsls	r3, r3, #1
 80184be:	5acb      	ldrh	r3, [r1, r3]
 80184c0:	4313      	orrs	r3, r2
 80184c2:	b299      	uxth	r1, r3
 80184c4:	4a0d      	ldr	r2, [pc, #52]	; (80184fc <RegionEU868InitDefaults+0x110>)
 80184c6:	239c      	movs	r3, #156	; 0x9c
 80184c8:	005b      	lsls	r3, r3, #1
 80184ca:	52d1      	strh	r1, [r2, r3]
            break;
 80184cc:	e00f      	b.n	80184ee <RegionEU868InitDefaults+0x102>
            if( params->NvmCtx != 0 )
 80184ce:	687b      	ldr	r3, [r7, #4]
 80184d0:	681b      	ldr	r3, [r3, #0]
 80184d2:	2b00      	cmp	r3, #0
 80184d4:	d00a      	beq.n	80184ec <RegionEU868InitDefaults+0x100>
                memcpy1( (uint8_t*) &NvmCtx, (uint8_t*) params->NvmCtx, sizeof( NvmCtx ) );
 80184d6:	687b      	ldr	r3, [r7, #4]
 80184d8:	6819      	ldr	r1, [r3, #0]
 80184da:	239e      	movs	r3, #158	; 0x9e
 80184dc:	005a      	lsls	r2, r3, #1
 80184de:	4b07      	ldr	r3, [pc, #28]	; (80184fc <RegionEU868InitDefaults+0x110>)
 80184e0:	0018      	movs	r0, r3
 80184e2:	f001 f855 	bl	8019590 <memcpy1>
            break;
 80184e6:	e001      	b.n	80184ec <RegionEU868InitDefaults+0x100>
            break;
 80184e8:	46c0      	nop			; (mov r8, r8)
 80184ea:	e000      	b.n	80184ee <RegionEU868InitDefaults+0x102>
            break;
 80184ec:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 80184ee:	46c0      	nop			; (mov r8, r8)
 80184f0:	46bd      	mov	sp, r7
 80184f2:	b02b      	add	sp, #172	; 0xac
 80184f4:	bd90      	pop	{r4, r7, pc}
 80184f6:	46c0      	nop			; (mov r8, r8)
 80184f8:	20000e04 	.word	0x20000e04
 80184fc:	20000d44 	.word	0x20000d44
 8018500:	0801fdc4 	.word	0x0801fdc4
 8018504:	0801fdd0 	.word	0x0801fdd0
 8018508:	0801fddc 	.word	0x0801fddc
 801850c:	20000e7e 	.word	0x20000e7e
 8018510:	20000e7c 	.word	0x20000e7c

08018514 <RegionEU868GetNvmCtx>:

void* RegionEU868GetNvmCtx( GetNvmCtxParams_t* params )
{
 8018514:	b580      	push	{r7, lr}
 8018516:	b082      	sub	sp, #8
 8018518:	af00      	add	r7, sp, #0
 801851a:	6078      	str	r0, [r7, #4]
    params->nvmCtxSize = sizeof( RegionEU868NvmCtx_t );
 801851c:	687b      	ldr	r3, [r7, #4]
 801851e:	229e      	movs	r2, #158	; 0x9e
 8018520:	0052      	lsls	r2, r2, #1
 8018522:	601a      	str	r2, [r3, #0]
    return &NvmCtx;
 8018524:	4b02      	ldr	r3, [pc, #8]	; (8018530 <RegionEU868GetNvmCtx+0x1c>)
}
 8018526:	0018      	movs	r0, r3
 8018528:	46bd      	mov	sp, r7
 801852a:	b002      	add	sp, #8
 801852c:	bd80      	pop	{r7, pc}
 801852e:	46c0      	nop			; (mov r8, r8)
 8018530:	20000d44 	.word	0x20000d44

08018534 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8018534:	b580      	push	{r7, lr}
 8018536:	b084      	sub	sp, #16
 8018538:	af00      	add	r7, sp, #0
 801853a:	6078      	str	r0, [r7, #4]
 801853c:	000a      	movs	r2, r1
 801853e:	1cfb      	adds	r3, r7, #3
 8018540:	701a      	strb	r2, [r3, #0]
    switch( phyAttribute )
 8018542:	1cfb      	adds	r3, r7, #3
 8018544:	781b      	ldrb	r3, [r3, #0]
 8018546:	2b0f      	cmp	r3, #15
 8018548:	d847      	bhi.n	80185da <RegionEU868Verify+0xa6>
 801854a:	009a      	lsls	r2, r3, #2
 801854c:	4b25      	ldr	r3, [pc, #148]	; (80185e4 <RegionEU868Verify+0xb0>)
 801854e:	18d3      	adds	r3, r2, r3
 8018550:	681b      	ldr	r3, [r3, #0]
 8018552:	469f      	mov	pc, r3
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8018554:	210f      	movs	r1, #15
 8018556:	187b      	adds	r3, r7, r1
 8018558:	2200      	movs	r2, #0
 801855a:	701a      	strb	r2, [r3, #0]
            return VerifyRfFreq( verify->Frequency, &band );
 801855c:	687b      	ldr	r3, [r7, #4]
 801855e:	681b      	ldr	r3, [r3, #0]
 8018560:	187a      	adds	r2, r7, r1
 8018562:	0011      	movs	r1, r2
 8018564:	0018      	movs	r0, r3
 8018566:	f7ff fd1f 	bl	8017fa8 <VerifyRfFreq>
 801856a:	0003      	movs	r3, r0
 801856c:	e036      	b.n	80185dc <RegionEU868Verify+0xa8>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 801856e:	687b      	ldr	r3, [r7, #4]
 8018570:	781b      	ldrb	r3, [r3, #0]
 8018572:	b25b      	sxtb	r3, r3
 8018574:	2207      	movs	r2, #7
 8018576:	2100      	movs	r1, #0
 8018578:	0018      	movs	r0, r3
 801857a:	f7fe ff86 	bl	801748a <RegionCommonValueInRange>
 801857e:	0003      	movs	r3, r0
 8018580:	1e5a      	subs	r2, r3, #1
 8018582:	4193      	sbcs	r3, r2
 8018584:	b2db      	uxtb	r3, r3
 8018586:	e029      	b.n	80185dc <RegionEU868Verify+0xa8>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8018588:	687b      	ldr	r3, [r7, #4]
 801858a:	781b      	ldrb	r3, [r3, #0]
 801858c:	b25b      	sxtb	r3, r3
 801858e:	2205      	movs	r2, #5
 8018590:	2100      	movs	r1, #0
 8018592:	0018      	movs	r0, r3
 8018594:	f7fe ff79 	bl	801748a <RegionCommonValueInRange>
 8018598:	0003      	movs	r3, r0
 801859a:	1e5a      	subs	r2, r3, #1
 801859c:	4193      	sbcs	r3, r2
 801859e:	b2db      	uxtb	r3, r3
 80185a0:	e01c      	b.n	80185dc <RegionEU868Verify+0xa8>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 80185a2:	687b      	ldr	r3, [r7, #4]
 80185a4:	781b      	ldrb	r3, [r3, #0]
 80185a6:	b25b      	sxtb	r3, r3
 80185a8:	2207      	movs	r2, #7
 80185aa:	2100      	movs	r1, #0
 80185ac:	0018      	movs	r0, r3
 80185ae:	f7fe ff6c 	bl	801748a <RegionCommonValueInRange>
 80185b2:	0003      	movs	r3, r0
 80185b4:	1e5a      	subs	r2, r3, #1
 80185b6:	4193      	sbcs	r3, r2
 80185b8:	b2db      	uxtb	r3, r3
 80185ba:	e00f      	b.n	80185dc <RegionEU868Verify+0xa8>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 80185bc:	687b      	ldr	r3, [r7, #4]
 80185be:	781b      	ldrb	r3, [r3, #0]
 80185c0:	b25b      	sxtb	r3, r3
 80185c2:	2200      	movs	r2, #0
 80185c4:	2100      	movs	r1, #0
 80185c6:	0018      	movs	r0, r3
 80185c8:	f7fe ff5f 	bl	801748a <RegionCommonValueInRange>
 80185cc:	0003      	movs	r3, r0
 80185ce:	1e5a      	subs	r2, r3, #1
 80185d0:	4193      	sbcs	r3, r2
 80185d2:	b2db      	uxtb	r3, r3
 80185d4:	e002      	b.n	80185dc <RegionEU868Verify+0xa8>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 80185d6:	2301      	movs	r3, #1
 80185d8:	e000      	b.n	80185dc <RegionEU868Verify+0xa8>
        }
        default:
            return false;
 80185da:	2300      	movs	r3, #0
    }
}
 80185dc:	0018      	movs	r0, r3
 80185de:	46bd      	mov	sp, r7
 80185e0:	b004      	add	sp, #16
 80185e2:	bd80      	pop	{r7, pc}
 80185e4:	0801fde8 	.word	0x0801fde8

080185e8 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 80185e8:	b590      	push	{r4, r7, lr}
 80185ea:	b08b      	sub	sp, #44	; 0x2c
 80185ec:	af00      	add	r7, sp, #0
 80185ee:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 80185f0:	2318      	movs	r3, #24
 80185f2:	18fb      	adds	r3, r7, r3
 80185f4:	2250      	movs	r2, #80	; 0x50
 80185f6:	721a      	strb	r2, [r3, #8]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 80185f8:	687b      	ldr	r3, [r7, #4]
 80185fa:	791b      	ldrb	r3, [r3, #4]
 80185fc:	2b10      	cmp	r3, #16
 80185fe:	d000      	beq.n	8018602 <RegionEU868ApplyCFList+0x1a>
 8018600:	e07c      	b.n	80186fc <RegionEU868ApplyCFList+0x114>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8018602:	687b      	ldr	r3, [r7, #4]
 8018604:	681b      	ldr	r3, [r3, #0]
 8018606:	330f      	adds	r3, #15
 8018608:	781b      	ldrb	r3, [r3, #0]
 801860a:	2b00      	cmp	r3, #0
 801860c:	d000      	beq.n	8018610 <RegionEU868ApplyCFList+0x28>
 801860e:	e077      	b.n	8018700 <RegionEU868ApplyCFList+0x118>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8018610:	2327      	movs	r3, #39	; 0x27
 8018612:	18fb      	adds	r3, r7, r3
 8018614:	2200      	movs	r2, #0
 8018616:	701a      	strb	r2, [r3, #0]
 8018618:	2326      	movs	r3, #38	; 0x26
 801861a:	18fb      	adds	r3, r7, r3
 801861c:	2203      	movs	r2, #3
 801861e:	701a      	strb	r2, [r3, #0]
 8018620:	e066      	b.n	80186f0 <RegionEU868ApplyCFList+0x108>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8018622:	2326      	movs	r3, #38	; 0x26
 8018624:	18fb      	adds	r3, r7, r3
 8018626:	781b      	ldrb	r3, [r3, #0]
 8018628:	2b07      	cmp	r3, #7
 801862a:	d82e      	bhi.n	801868a <RegionEU868ApplyCFList+0xa2>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 801862c:	687b      	ldr	r3, [r7, #4]
 801862e:	681a      	ldr	r2, [r3, #0]
 8018630:	2427      	movs	r4, #39	; 0x27
 8018632:	193b      	adds	r3, r7, r4
 8018634:	781b      	ldrb	r3, [r3, #0]
 8018636:	18d3      	adds	r3, r2, r3
 8018638:	781b      	ldrb	r3, [r3, #0]
 801863a:	001a      	movs	r2, r3
 801863c:	2018      	movs	r0, #24
 801863e:	183b      	adds	r3, r7, r0
 8018640:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8018642:	183b      	adds	r3, r7, r0
 8018644:	681a      	ldr	r2, [r3, #0]
 8018646:	687b      	ldr	r3, [r7, #4]
 8018648:	6819      	ldr	r1, [r3, #0]
 801864a:	193b      	adds	r3, r7, r4
 801864c:	781b      	ldrb	r3, [r3, #0]
 801864e:	3301      	adds	r3, #1
 8018650:	18cb      	adds	r3, r1, r3
 8018652:	781b      	ldrb	r3, [r3, #0]
 8018654:	021b      	lsls	r3, r3, #8
 8018656:	431a      	orrs	r2, r3
 8018658:	183b      	adds	r3, r7, r0
 801865a:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 801865c:	183b      	adds	r3, r7, r0
 801865e:	681a      	ldr	r2, [r3, #0]
 8018660:	687b      	ldr	r3, [r7, #4]
 8018662:	6819      	ldr	r1, [r3, #0]
 8018664:	193b      	adds	r3, r7, r4
 8018666:	781b      	ldrb	r3, [r3, #0]
 8018668:	3302      	adds	r3, #2
 801866a:	18cb      	adds	r3, r1, r3
 801866c:	781b      	ldrb	r3, [r3, #0]
 801866e:	041b      	lsls	r3, r3, #16
 8018670:	431a      	orrs	r2, r3
 8018672:	183b      	adds	r3, r7, r0
 8018674:	601a      	str	r2, [r3, #0]
            newChannel.Frequency *= 100;
 8018676:	183b      	adds	r3, r7, r0
 8018678:	681b      	ldr	r3, [r3, #0]
 801867a:	2264      	movs	r2, #100	; 0x64
 801867c:	435a      	muls	r2, r3
 801867e:	183b      	adds	r3, r7, r0
 8018680:	601a      	str	r2, [r3, #0]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8018682:	183b      	adds	r3, r7, r0
 8018684:	2200      	movs	r2, #0
 8018686:	605a      	str	r2, [r3, #4]
 8018688:	e009      	b.n	801869e <RegionEU868ApplyCFList+0xb6>
        }
        else
        {
            newChannel.Frequency = 0;
 801868a:	2118      	movs	r1, #24
 801868c:	187b      	adds	r3, r7, r1
 801868e:	2200      	movs	r2, #0
 8018690:	601a      	str	r2, [r3, #0]
            newChannel.DrRange.Value = 0;
 8018692:	187b      	adds	r3, r7, r1
 8018694:	2200      	movs	r2, #0
 8018696:	721a      	strb	r2, [r3, #8]
            newChannel.Rx1Frequency = 0;
 8018698:	187b      	adds	r3, r7, r1
 801869a:	2200      	movs	r2, #0
 801869c:	605a      	str	r2, [r3, #4]
        }

        if( newChannel.Frequency != 0 )
 801869e:	2218      	movs	r2, #24
 80186a0:	18bb      	adds	r3, r7, r2
 80186a2:	681b      	ldr	r3, [r3, #0]
 80186a4:	2b00      	cmp	r3, #0
 80186a6:	d00d      	beq.n	80186c4 <RegionEU868ApplyCFList+0xdc>
        {
            channelAdd.NewChannel = &newChannel;
 80186a8:	2110      	movs	r1, #16
 80186aa:	187b      	adds	r3, r7, r1
 80186ac:	18ba      	adds	r2, r7, r2
 80186ae:	601a      	str	r2, [r3, #0]
            channelAdd.ChannelId = chanIdx;
 80186b0:	187b      	adds	r3, r7, r1
 80186b2:	2226      	movs	r2, #38	; 0x26
 80186b4:	18ba      	adds	r2, r7, r2
 80186b6:	7812      	ldrb	r2, [r2, #0]
 80186b8:	711a      	strb	r2, [r3, #4]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 80186ba:	187b      	adds	r3, r7, r1
 80186bc:	0018      	movs	r0, r3
 80186be:	f000 fdb5 	bl	801922c <RegionEU868ChannelAdd>
 80186c2:	e009      	b.n	80186d8 <RegionEU868ApplyCFList+0xf0>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 80186c4:	210c      	movs	r1, #12
 80186c6:	187b      	adds	r3, r7, r1
 80186c8:	2226      	movs	r2, #38	; 0x26
 80186ca:	18ba      	adds	r2, r7, r2
 80186cc:	7812      	ldrb	r2, [r2, #0]
 80186ce:	701a      	strb	r2, [r3, #0]

            RegionEU868ChannelsRemove( &channelRemove );
 80186d0:	187b      	adds	r3, r7, r1
 80186d2:	0018      	movs	r0, r3
 80186d4:	f000 fe6e 	bl	80193b4 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 80186d8:	2227      	movs	r2, #39	; 0x27
 80186da:	18bb      	adds	r3, r7, r2
 80186dc:	18ba      	adds	r2, r7, r2
 80186de:	7812      	ldrb	r2, [r2, #0]
 80186e0:	3203      	adds	r2, #3
 80186e2:	701a      	strb	r2, [r3, #0]
 80186e4:	2126      	movs	r1, #38	; 0x26
 80186e6:	187b      	adds	r3, r7, r1
 80186e8:	781a      	ldrb	r2, [r3, #0]
 80186ea:	187b      	adds	r3, r7, r1
 80186ec:	3201      	adds	r2, #1
 80186ee:	701a      	strb	r2, [r3, #0]
 80186f0:	2326      	movs	r3, #38	; 0x26
 80186f2:	18fb      	adds	r3, r7, r3
 80186f4:	781b      	ldrb	r3, [r3, #0]
 80186f6:	2b0f      	cmp	r3, #15
 80186f8:	d993      	bls.n	8018622 <RegionEU868ApplyCFList+0x3a>
 80186fa:	e002      	b.n	8018702 <RegionEU868ApplyCFList+0x11a>
        return;
 80186fc:	46c0      	nop			; (mov r8, r8)
 80186fe:	e000      	b.n	8018702 <RegionEU868ApplyCFList+0x11a>
        return;
 8018700:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8018702:	46bd      	mov	sp, r7
 8018704:	b00b      	add	sp, #44	; 0x2c
 8018706:	bd90      	pop	{r4, r7, pc}

08018708 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8018708:	b580      	push	{r7, lr}
 801870a:	b082      	sub	sp, #8
 801870c:	af00      	add	r7, sp, #0
 801870e:	6078      	str	r0, [r7, #4]
    switch( chanMaskSet->ChannelsMaskType )
 8018710:	687b      	ldr	r3, [r7, #4]
 8018712:	791b      	ldrb	r3, [r3, #4]
 8018714:	2b00      	cmp	r3, #0
 8018716:	d002      	beq.n	801871e <RegionEU868ChanMaskSet+0x16>
 8018718:	2b01      	cmp	r3, #1
 801871a:	d008      	beq.n	801872e <RegionEU868ChanMaskSet+0x26>
 801871c:	e00f      	b.n	801873e <RegionEU868ChanMaskSet+0x36>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 801871e:	687b      	ldr	r3, [r7, #4]
 8018720:	6819      	ldr	r1, [r3, #0]
 8018722:	4b0a      	ldr	r3, [pc, #40]	; (801874c <RegionEU868ChanMaskSet+0x44>)
 8018724:	2201      	movs	r2, #1
 8018726:	0018      	movs	r0, r3
 8018728:	f7fe ff58 	bl	80175dc <RegionCommonChanMaskCopy>
            break;
 801872c:	e009      	b.n	8018742 <RegionEU868ChanMaskSet+0x3a>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( NvmCtx.ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 801872e:	687b      	ldr	r3, [r7, #4]
 8018730:	6819      	ldr	r1, [r3, #0]
 8018732:	4b07      	ldr	r3, [pc, #28]	; (8018750 <RegionEU868ChanMaskSet+0x48>)
 8018734:	2201      	movs	r2, #1
 8018736:	0018      	movs	r0, r3
 8018738:	f7fe ff50 	bl	80175dc <RegionCommonChanMaskCopy>
            break;
 801873c:	e001      	b.n	8018742 <RegionEU868ChanMaskSet+0x3a>
        }
        default:
            return false;
 801873e:	2300      	movs	r3, #0
 8018740:	e000      	b.n	8018744 <RegionEU868ChanMaskSet+0x3c>
    }
    return true;
 8018742:	2301      	movs	r3, #1
}
 8018744:	0018      	movs	r0, r3
 8018746:	46bd      	mov	sp, r7
 8018748:	b002      	add	sp, #8
 801874a:	bd80      	pop	{r7, pc}
 801874c:	20000e7c 	.word	0x20000e7c
 8018750:	20000e7e 	.word	0x20000e7e

08018754 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8018754:	b5b0      	push	{r4, r5, r7, lr}
 8018756:	b088      	sub	sp, #32
 8018758:	af02      	add	r7, sp, #8
 801875a:	60ba      	str	r2, [r7, #8]
 801875c:	607b      	str	r3, [r7, #4]
 801875e:	240f      	movs	r4, #15
 8018760:	193b      	adds	r3, r7, r4
 8018762:	1c02      	adds	r2, r0, #0
 8018764:	701a      	strb	r2, [r3, #0]
 8018766:	230e      	movs	r3, #14
 8018768:	18fb      	adds	r3, r7, r3
 801876a:	1c0a      	adds	r2, r1, #0
 801876c:	701a      	strb	r2, [r3, #0]
    /* ST_WORKAROUND_BEGIN: remove float/double */
    uint32_t tSymbol = 0;
 801876e:	2300      	movs	r3, #0
 8018770:	617b      	str	r3, [r7, #20]
    /* ST_WORKAROUND_END */

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8018772:	193b      	adds	r3, r7, r4
 8018774:	781b      	ldrb	r3, [r3, #0]
 8018776:	b25a      	sxtb	r2, r3
 8018778:	2a07      	cmp	r2, #7
 801877a:	dd00      	ble.n	801877e <RegionEU868ComputeRxWindowParameters+0x2a>
 801877c:	2307      	movs	r3, #7
 801877e:	b25a      	sxtb	r2, r3
 8018780:	687b      	ldr	r3, [r7, #4]
 8018782:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 8018784:	687b      	ldr	r3, [r7, #4]
 8018786:	785b      	ldrb	r3, [r3, #1]
 8018788:	b25b      	sxtb	r3, r3
 801878a:	0018      	movs	r0, r3
 801878c:	f7ff fbc6 	bl	8017f1c <GetBandwidth>
 8018790:	0003      	movs	r3, r0
 8018792:	b2da      	uxtb	r2, r3
 8018794:	687b      	ldr	r3, [r7, #4]
 8018796:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8018798:	687b      	ldr	r3, [r7, #4]
 801879a:	785b      	ldrb	r3, [r3, #1]
 801879c:	b25b      	sxtb	r3, r3
 801879e:	2b07      	cmp	r3, #7
 80187a0:	d10b      	bne.n	80187ba <RegionEU868ComputeRxWindowParameters+0x66>
    { // FSK
        tSymbol = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 80187a2:	687b      	ldr	r3, [r7, #4]
 80187a4:	785b      	ldrb	r3, [r3, #1]
 80187a6:	b25b      	sxtb	r3, r3
 80187a8:	001a      	movs	r2, r3
 80187aa:	4b18      	ldr	r3, [pc, #96]	; (801880c <RegionEU868ComputeRxWindowParameters+0xb8>)
 80187ac:	5c9b      	ldrb	r3, [r3, r2]
 80187ae:	0018      	movs	r0, r3
 80187b0:	f7ff f954 	bl	8017a5c <RegionCommonComputeSymbolTimeFsk>
 80187b4:	0003      	movs	r3, r0
 80187b6:	617b      	str	r3, [r7, #20]
 80187b8:	e011      	b.n	80187de <RegionEU868ComputeRxWindowParameters+0x8a>
    }
    else
    { // LoRa
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 80187ba:	687b      	ldr	r3, [r7, #4]
 80187bc:	785b      	ldrb	r3, [r3, #1]
 80187be:	b25b      	sxtb	r3, r3
 80187c0:	001a      	movs	r2, r3
 80187c2:	4b12      	ldr	r3, [pc, #72]	; (801880c <RegionEU868ComputeRxWindowParameters+0xb8>)
 80187c4:	5c98      	ldrb	r0, [r3, r2]
 80187c6:	687b      	ldr	r3, [r7, #4]
 80187c8:	785b      	ldrb	r3, [r3, #1]
 80187ca:	b25b      	sxtb	r3, r3
 80187cc:	001a      	movs	r2, r3
 80187ce:	4b10      	ldr	r3, [pc, #64]	; (8018810 <RegionEU868ComputeRxWindowParameters+0xbc>)
 80187d0:	0092      	lsls	r2, r2, #2
 80187d2:	58d3      	ldr	r3, [r2, r3]
 80187d4:	0019      	movs	r1, r3
 80187d6:	f7ff f929 	bl	8017a2c <RegionCommonComputeSymbolTimeLoRa>
 80187da:	0003      	movs	r3, r0
 80187dc:	617b      	str	r3, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 80187de:	4b0d      	ldr	r3, [pc, #52]	; (8018814 <RegionEU868ComputeRxWindowParameters+0xc0>)
 80187e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80187e2:	4798      	blx	r3
 80187e4:	0005      	movs	r5, r0
 80187e6:	687b      	ldr	r3, [r7, #4]
 80187e8:	3308      	adds	r3, #8
 80187ea:	687a      	ldr	r2, [r7, #4]
 80187ec:	320c      	adds	r2, #12
 80187ee:	68bc      	ldr	r4, [r7, #8]
 80187f0:	210e      	movs	r1, #14
 80187f2:	1879      	adds	r1, r7, r1
 80187f4:	7809      	ldrb	r1, [r1, #0]
 80187f6:	6978      	ldr	r0, [r7, #20]
 80187f8:	9201      	str	r2, [sp, #4]
 80187fa:	9300      	str	r3, [sp, #0]
 80187fc:	002b      	movs	r3, r5
 80187fe:	0022      	movs	r2, r4
 8018800:	f7ff f93a 	bl	8017a78 <RegionCommonComputeRxWindowParameters>
}
 8018804:	46c0      	nop			; (mov r8, r8)
 8018806:	46bd      	mov	sp, r7
 8018808:	b006      	add	sp, #24
 801880a:	bdb0      	pop	{r4, r5, r7, pc}
 801880c:	0801fca4 	.word	0x0801fca4
 8018810:	0801fcac 	.word	0x0801fcac
 8018814:	0801fe28 	.word	0x0801fe28

08018818 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8018818:	b5f0      	push	{r4, r5, r6, r7, lr}
 801881a:	b091      	sub	sp, #68	; 0x44
 801881c:	af0a      	add	r7, sp, #40	; 0x28
 801881e:	6078      	str	r0, [r7, #4]
 8018820:	6039      	str	r1, [r7, #0]
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8018822:	230f      	movs	r3, #15
 8018824:	18fb      	adds	r3, r7, r3
 8018826:	687a      	ldr	r2, [r7, #4]
 8018828:	7852      	ldrb	r2, [r2, #1]
 801882a:	701a      	strb	r2, [r3, #0]
    uint8_t maxPayload = 0;
 801882c:	2316      	movs	r3, #22
 801882e:	18fb      	adds	r3, r7, r3
 8018830:	2200      	movs	r2, #0
 8018832:	701a      	strb	r2, [r3, #0]
    int8_t phyDr = 0;
 8018834:	230e      	movs	r3, #14
 8018836:	18fb      	adds	r3, r7, r3
 8018838:	2200      	movs	r2, #0
 801883a:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = rxConfig->Frequency;
 801883c:	687b      	ldr	r3, [r7, #4]
 801883e:	685b      	ldr	r3, [r3, #4]
 8018840:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8018842:	4b68      	ldr	r3, [pc, #416]	; (80189e4 <RegionEU868RxConfig+0x1cc>)
 8018844:	685b      	ldr	r3, [r3, #4]
 8018846:	4798      	blx	r3
 8018848:	1e03      	subs	r3, r0, #0
 801884a:	d001      	beq.n	8018850 <RegionEU868RxConfig+0x38>
    {
        return false;
 801884c:	2300      	movs	r3, #0
 801884e:	e0c4      	b.n	80189da <RegionEU868RxConfig+0x1c2>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8018850:	687b      	ldr	r3, [r7, #4]
 8018852:	7cdb      	ldrb	r3, [r3, #19]
 8018854:	2b00      	cmp	r3, #0
 8018856:	d122      	bne.n	801889e <RegionEU868RxConfig+0x86>
    {
        // Apply window 1 frequency
        frequency = NvmCtx.Channels[rxConfig->Channel].Frequency;
 8018858:	687b      	ldr	r3, [r7, #4]
 801885a:	781b      	ldrb	r3, [r3, #0]
 801885c:	0019      	movs	r1, r3
 801885e:	4a62      	ldr	r2, [pc, #392]	; (80189e8 <RegionEU868RxConfig+0x1d0>)
 8018860:	000b      	movs	r3, r1
 8018862:	005b      	lsls	r3, r3, #1
 8018864:	185b      	adds	r3, r3, r1
 8018866:	009b      	lsls	r3, r3, #2
 8018868:	589b      	ldr	r3, [r3, r2]
 801886a:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( NvmCtx.Channels[rxConfig->Channel].Rx1Frequency != 0 )
 801886c:	687b      	ldr	r3, [r7, #4]
 801886e:	781b      	ldrb	r3, [r3, #0]
 8018870:	0019      	movs	r1, r3
 8018872:	4a5d      	ldr	r2, [pc, #372]	; (80189e8 <RegionEU868RxConfig+0x1d0>)
 8018874:	000b      	movs	r3, r1
 8018876:	005b      	lsls	r3, r3, #1
 8018878:	185b      	adds	r3, r3, r1
 801887a:	009b      	lsls	r3, r3, #2
 801887c:	18d3      	adds	r3, r2, r3
 801887e:	3304      	adds	r3, #4
 8018880:	681b      	ldr	r3, [r3, #0]
 8018882:	2b00      	cmp	r3, #0
 8018884:	d00b      	beq.n	801889e <RegionEU868RxConfig+0x86>
        {
            frequency = NvmCtx.Channels[rxConfig->Channel].Rx1Frequency;
 8018886:	687b      	ldr	r3, [r7, #4]
 8018888:	781b      	ldrb	r3, [r3, #0]
 801888a:	0019      	movs	r1, r3
 801888c:	4a56      	ldr	r2, [pc, #344]	; (80189e8 <RegionEU868RxConfig+0x1d0>)
 801888e:	000b      	movs	r3, r1
 8018890:	005b      	lsls	r3, r3, #1
 8018892:	185b      	adds	r3, r3, r1
 8018894:	009b      	lsls	r3, r3, #2
 8018896:	18d3      	adds	r3, r2, r3
 8018898:	3304      	adds	r3, #4
 801889a:	681b      	ldr	r3, [r3, #0]
 801889c:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 801889e:	240f      	movs	r4, #15
 80188a0:	193b      	adds	r3, r7, r4
 80188a2:	781b      	ldrb	r3, [r3, #0]
 80188a4:	b25b      	sxtb	r3, r3
 80188a6:	4a51      	ldr	r2, [pc, #324]	; (80189ec <RegionEU868RxConfig+0x1d4>)
 80188a8:	5cd2      	ldrb	r2, [r2, r3]
 80188aa:	250e      	movs	r5, #14
 80188ac:	197b      	adds	r3, r7, r5
 80188ae:	701a      	strb	r2, [r3, #0]

    Radio.SetChannel( frequency );
 80188b0:	4b4c      	ldr	r3, [pc, #304]	; (80189e4 <RegionEU868RxConfig+0x1cc>)
 80188b2:	68db      	ldr	r3, [r3, #12]
 80188b4:	693a      	ldr	r2, [r7, #16]
 80188b6:	0010      	movs	r0, r2
 80188b8:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 80188ba:	193b      	adds	r3, r7, r4
 80188bc:	781b      	ldrb	r3, [r3, #0]
 80188be:	b25b      	sxtb	r3, r3
 80188c0:	2b07      	cmp	r3, #7
 80188c2:	d12e      	bne.n	8018922 <RegionEU868RxConfig+0x10a>
    {
        modem = MODEM_FSK;
 80188c4:	2117      	movs	r1, #23
 80188c6:	187b      	adds	r3, r7, r1
 80188c8:	2200      	movs	r2, #0
 80188ca:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 80188cc:	4b45      	ldr	r3, [pc, #276]	; (80189e4 <RegionEU868RxConfig+0x1cc>)
 80188ce:	699c      	ldr	r4, [r3, #24]
 80188d0:	197b      	adds	r3, r7, r5
 80188d2:	2200      	movs	r2, #0
 80188d4:	569a      	ldrsb	r2, [r3, r2]
 80188d6:	0013      	movs	r3, r2
 80188d8:	015b      	lsls	r3, r3, #5
 80188da:	1a9b      	subs	r3, r3, r2
 80188dc:	009b      	lsls	r3, r3, #2
 80188de:	189b      	adds	r3, r3, r2
 80188e0:	00db      	lsls	r3, r3, #3
 80188e2:	001e      	movs	r6, r3
 80188e4:	687b      	ldr	r3, [r7, #4]
 80188e6:	689b      	ldr	r3, [r3, #8]
 80188e8:	b29b      	uxth	r3, r3
 80188ea:	687a      	ldr	r2, [r7, #4]
 80188ec:	7c92      	ldrb	r2, [r2, #18]
 80188ee:	4d40      	ldr	r5, [pc, #256]	; (80189f0 <RegionEU868RxConfig+0x1d8>)
 80188f0:	1879      	adds	r1, r7, r1
 80188f2:	7808      	ldrb	r0, [r1, #0]
 80188f4:	9209      	str	r2, [sp, #36]	; 0x24
 80188f6:	2200      	movs	r2, #0
 80188f8:	9208      	str	r2, [sp, #32]
 80188fa:	2200      	movs	r2, #0
 80188fc:	9207      	str	r2, [sp, #28]
 80188fe:	2200      	movs	r2, #0
 8018900:	9206      	str	r2, [sp, #24]
 8018902:	2201      	movs	r2, #1
 8018904:	9205      	str	r2, [sp, #20]
 8018906:	2200      	movs	r2, #0
 8018908:	9204      	str	r2, [sp, #16]
 801890a:	2200      	movs	r2, #0
 801890c:	9203      	str	r2, [sp, #12]
 801890e:	9302      	str	r3, [sp, #8]
 8018910:	2305      	movs	r3, #5
 8018912:	9301      	str	r3, [sp, #4]
 8018914:	4b37      	ldr	r3, [pc, #220]	; (80189f4 <RegionEU868RxConfig+0x1dc>)
 8018916:	9300      	str	r3, [sp, #0]
 8018918:	2300      	movs	r3, #0
 801891a:	0032      	movs	r2, r6
 801891c:	0029      	movs	r1, r5
 801891e:	47a0      	blx	r4
 8018920:	e029      	b.n	8018976 <RegionEU868RxConfig+0x15e>
    }
    else
    {
        modem = MODEM_LORA;
 8018922:	2117      	movs	r1, #23
 8018924:	187b      	adds	r3, r7, r1
 8018926:	2201      	movs	r2, #1
 8018928:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 801892a:	4b2e      	ldr	r3, [pc, #184]	; (80189e4 <RegionEU868RxConfig+0x1cc>)
 801892c:	699c      	ldr	r4, [r3, #24]
 801892e:	687b      	ldr	r3, [r7, #4]
 8018930:	789b      	ldrb	r3, [r3, #2]
 8018932:	001e      	movs	r6, r3
 8018934:	230e      	movs	r3, #14
 8018936:	18fb      	adds	r3, r7, r3
 8018938:	2500      	movs	r5, #0
 801893a:	575d      	ldrsb	r5, [r3, r5]
 801893c:	687b      	ldr	r3, [r7, #4]
 801893e:	689b      	ldr	r3, [r3, #8]
 8018940:	b29b      	uxth	r3, r3
 8018942:	687a      	ldr	r2, [r7, #4]
 8018944:	7c92      	ldrb	r2, [r2, #18]
 8018946:	1879      	adds	r1, r7, r1
 8018948:	7808      	ldrb	r0, [r1, #0]
 801894a:	9209      	str	r2, [sp, #36]	; 0x24
 801894c:	2201      	movs	r2, #1
 801894e:	9208      	str	r2, [sp, #32]
 8018950:	2200      	movs	r2, #0
 8018952:	9207      	str	r2, [sp, #28]
 8018954:	2200      	movs	r2, #0
 8018956:	9206      	str	r2, [sp, #24]
 8018958:	2200      	movs	r2, #0
 801895a:	9205      	str	r2, [sp, #20]
 801895c:	2200      	movs	r2, #0
 801895e:	9204      	str	r2, [sp, #16]
 8018960:	2200      	movs	r2, #0
 8018962:	9203      	str	r2, [sp, #12]
 8018964:	9302      	str	r3, [sp, #8]
 8018966:	2308      	movs	r3, #8
 8018968:	9301      	str	r3, [sp, #4]
 801896a:	2300      	movs	r3, #0
 801896c:	9300      	str	r3, [sp, #0]
 801896e:	2301      	movs	r3, #1
 8018970:	002a      	movs	r2, r5
 8018972:	0031      	movs	r1, r6
 8018974:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 8018976:	687b      	ldr	r3, [r7, #4]
 8018978:	7c5b      	ldrb	r3, [r3, #17]
 801897a:	2b00      	cmp	r3, #0
 801897c:	d009      	beq.n	8018992 <RegionEU868RxConfig+0x17a>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 801897e:	230f      	movs	r3, #15
 8018980:	18fb      	adds	r3, r7, r3
 8018982:	2200      	movs	r2, #0
 8018984:	569a      	ldrsb	r2, [r3, r2]
 8018986:	2316      	movs	r3, #22
 8018988:	18fb      	adds	r3, r7, r3
 801898a:	491b      	ldr	r1, [pc, #108]	; (80189f8 <RegionEU868RxConfig+0x1e0>)
 801898c:	5c8a      	ldrb	r2, [r1, r2]
 801898e:	701a      	strb	r2, [r3, #0]
 8018990:	e008      	b.n	80189a4 <RegionEU868RxConfig+0x18c>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 8018992:	230f      	movs	r3, #15
 8018994:	18fb      	adds	r3, r7, r3
 8018996:	2200      	movs	r2, #0
 8018998:	569a      	ldrsb	r2, [r3, r2]
 801899a:	2316      	movs	r3, #22
 801899c:	18fb      	adds	r3, r7, r3
 801899e:	4917      	ldr	r1, [pc, #92]	; (80189fc <RegionEU868RxConfig+0x1e4>)
 80189a0:	5c8a      	ldrb	r2, [r1, r2]
 80189a2:	701a      	strb	r2, [r3, #0]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 80189a4:	4b0f      	ldr	r3, [pc, #60]	; (80189e4 <RegionEU868RxConfig+0x1cc>)
 80189a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80189a8:	2216      	movs	r2, #22
 80189aa:	18ba      	adds	r2, r7, r2
 80189ac:	7812      	ldrb	r2, [r2, #0]
 80189ae:	320d      	adds	r2, #13
 80189b0:	b2d1      	uxtb	r1, r2
 80189b2:	2217      	movs	r2, #23
 80189b4:	18ba      	adds	r2, r7, r2
 80189b6:	7812      	ldrb	r2, [r2, #0]
 80189b8:	0010      	movs	r0, r2
 80189ba:	4798      	blx	r3
    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 80189bc:	687b      	ldr	r3, [r7, #4]
 80189be:	7cd8      	ldrb	r0, [r3, #19]
 80189c0:	240f      	movs	r4, #15
 80189c2:	193b      	adds	r3, r7, r4
 80189c4:	2200      	movs	r2, #0
 80189c6:	569a      	ldrsb	r2, [r3, r2]
 80189c8:	693b      	ldr	r3, [r7, #16]
 80189ca:	0019      	movs	r1, r3
 80189cc:	f7ff fa32 	bl	8017e34 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 80189d0:	683b      	ldr	r3, [r7, #0]
 80189d2:	193a      	adds	r2, r7, r4
 80189d4:	7812      	ldrb	r2, [r2, #0]
 80189d6:	701a      	strb	r2, [r3, #0]
    return true;
 80189d8:	2301      	movs	r3, #1
}
 80189da:	0018      	movs	r0, r3
 80189dc:	46bd      	mov	sp, r7
 80189de:	b007      	add	sp, #28
 80189e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80189e2:	46c0      	nop			; (mov r8, r8)
 80189e4:	0801fe28 	.word	0x0801fe28
 80189e8:	20000d44 	.word	0x20000d44
 80189ec:	0801fca4 	.word	0x0801fca4
 80189f0:	0000c350 	.word	0x0000c350
 80189f4:	00014585 	.word	0x00014585
 80189f8:	0801fcd4 	.word	0x0801fcd4
 80189fc:	0801fccc 	.word	0x0801fccc

08018a00 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8018a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018a02:	b093      	sub	sp, #76	; 0x4c
 8018a04:	af0a      	add	r7, sp, #40	; 0x28
 8018a06:	60f8      	str	r0, [r7, #12]
 8018a08:	60b9      	str	r1, [r7, #8]
 8018a0a:	607a      	str	r2, [r7, #4]
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8018a0c:	68fb      	ldr	r3, [r7, #12]
 8018a0e:	785b      	ldrb	r3, [r3, #1]
 8018a10:	b25b      	sxtb	r3, r3
 8018a12:	001a      	movs	r2, r3
 8018a14:	4b6b      	ldr	r3, [pc, #428]	; (8018bc4 <RegionEU868TxConfig+0x1c4>)
 8018a16:	5c9a      	ldrb	r2, [r3, r2]
 8018a18:	251e      	movs	r5, #30
 8018a1a:	197b      	adds	r3, r7, r5
 8018a1c:	701a      	strb	r2, [r3, #0]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 8018a1e:	68fb      	ldr	r3, [r7, #12]
 8018a20:	2002      	movs	r0, #2
 8018a22:	5618      	ldrsb	r0, [r3, r0]
 8018a24:	68fb      	ldr	r3, [r7, #12]
 8018a26:	781b      	ldrb	r3, [r3, #0]
 8018a28:	0019      	movs	r1, r3
 8018a2a:	4a67      	ldr	r2, [pc, #412]	; (8018bc8 <RegionEU868TxConfig+0x1c8>)
 8018a2c:	000b      	movs	r3, r1
 8018a2e:	005b      	lsls	r3, r3, #1
 8018a30:	185b      	adds	r3, r3, r1
 8018a32:	009b      	lsls	r3, r3, #2
 8018a34:	18d3      	adds	r3, r2, r3
 8018a36:	3309      	adds	r3, #9
 8018a38:	781b      	ldrb	r3, [r3, #0]
 8018a3a:	001c      	movs	r4, r3
 8018a3c:	4a62      	ldr	r2, [pc, #392]	; (8018bc8 <RegionEU868TxConfig+0x1c8>)
 8018a3e:	21c2      	movs	r1, #194	; 0xc2
 8018a40:	0023      	movs	r3, r4
 8018a42:	009b      	lsls	r3, r3, #2
 8018a44:	191b      	adds	r3, r3, r4
 8018a46:	009b      	lsls	r3, r3, #2
 8018a48:	18d3      	adds	r3, r2, r3
 8018a4a:	185b      	adds	r3, r3, r1
 8018a4c:	2100      	movs	r1, #0
 8018a4e:	5659      	ldrsb	r1, [r3, r1]
 8018a50:	68fb      	ldr	r3, [r7, #12]
 8018a52:	2201      	movs	r2, #1
 8018a54:	569a      	ldrsb	r2, [r3, r2]
 8018a56:	261d      	movs	r6, #29
 8018a58:	19bc      	adds	r4, r7, r6
 8018a5a:	4b5c      	ldr	r3, [pc, #368]	; (8018bcc <RegionEU868TxConfig+0x1cc>)
 8018a5c:	f7ff fa7c 	bl	8017f58 <LimitTxPower>
 8018a60:	0003      	movs	r3, r0
 8018a62:	7023      	strb	r3, [r4, #0]
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
 8018a64:	68fb      	ldr	r3, [r7, #12]
 8018a66:	785b      	ldrb	r3, [r3, #1]
 8018a68:	b25b      	sxtb	r3, r3
 8018a6a:	0018      	movs	r0, r3
 8018a6c:	f7ff fa56 	bl	8017f1c <GetBandwidth>
 8018a70:	0003      	movs	r3, r0
 8018a72:	61bb      	str	r3, [r7, #24]
    int8_t phyTxPower = 0;
 8018a74:	2017      	movs	r0, #23
 8018a76:	183b      	adds	r3, r7, r0
 8018a78:	2200      	movs	r2, #0
 8018a7a:	701a      	strb	r2, [r3, #0]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8018a7c:	68fb      	ldr	r3, [r7, #12]
 8018a7e:	6859      	ldr	r1, [r3, #4]
 8018a80:	68fb      	ldr	r3, [r7, #12]
 8018a82:	689a      	ldr	r2, [r3, #8]
 8018a84:	183c      	adds	r4, r7, r0
 8018a86:	19bb      	adds	r3, r7, r6
 8018a88:	781b      	ldrb	r3, [r3, #0]
 8018a8a:	b25b      	sxtb	r3, r3
 8018a8c:	0018      	movs	r0, r3
 8018a8e:	f7ff f841 	bl	8017b14 <RegionCommonComputeTxPower>
 8018a92:	0003      	movs	r3, r0
 8018a94:	7023      	strb	r3, [r4, #0]

    // Setup the radio frequency
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 8018a96:	4b4e      	ldr	r3, [pc, #312]	; (8018bd0 <RegionEU868TxConfig+0x1d0>)
 8018a98:	68da      	ldr	r2, [r3, #12]
 8018a9a:	68fb      	ldr	r3, [r7, #12]
 8018a9c:	781b      	ldrb	r3, [r3, #0]
 8018a9e:	0018      	movs	r0, r3
 8018aa0:	4949      	ldr	r1, [pc, #292]	; (8018bc8 <RegionEU868TxConfig+0x1c8>)
 8018aa2:	0003      	movs	r3, r0
 8018aa4:	005b      	lsls	r3, r3, #1
 8018aa6:	181b      	adds	r3, r3, r0
 8018aa8:	009b      	lsls	r3, r3, #2
 8018aaa:	585b      	ldr	r3, [r3, r1]
 8018aac:	0018      	movs	r0, r3
 8018aae:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8018ab0:	68fb      	ldr	r3, [r7, #12]
 8018ab2:	785b      	ldrb	r3, [r3, #1]
 8018ab4:	b25b      	sxtb	r3, r3
 8018ab6:	2b07      	cmp	r3, #7
 8018ab8:	d12e      	bne.n	8018b18 <RegionEU868TxConfig+0x118>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8018aba:	231f      	movs	r3, #31
 8018abc:	18fb      	adds	r3, r7, r3
 8018abe:	2200      	movs	r2, #0
 8018ac0:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8018ac2:	4b43      	ldr	r3, [pc, #268]	; (8018bd0 <RegionEU868TxConfig+0x1d0>)
 8018ac4:	69dc      	ldr	r4, [r3, #28]
 8018ac6:	197b      	adds	r3, r7, r5
 8018ac8:	2200      	movs	r2, #0
 8018aca:	569a      	ldrsb	r2, [r3, r2]
 8018acc:	0013      	movs	r3, r2
 8018ace:	015b      	lsls	r3, r3, #5
 8018ad0:	1a9b      	subs	r3, r3, r2
 8018ad2:	009b      	lsls	r3, r3, #2
 8018ad4:	189b      	adds	r3, r3, r2
 8018ad6:	00db      	lsls	r3, r3, #3
 8018ad8:	001e      	movs	r6, r3
 8018ada:	69ba      	ldr	r2, [r7, #24]
 8018adc:	4d3d      	ldr	r5, [pc, #244]	; (8018bd4 <RegionEU868TxConfig+0x1d4>)
 8018ade:	2017      	movs	r0, #23
 8018ae0:	183b      	adds	r3, r7, r0
 8018ae2:	2100      	movs	r1, #0
 8018ae4:	5659      	ldrsb	r1, [r3, r1]
 8018ae6:	231f      	movs	r3, #31
 8018ae8:	18fb      	adds	r3, r7, r3
 8018aea:	7818      	ldrb	r0, [r3, #0]
 8018aec:	23fa      	movs	r3, #250	; 0xfa
 8018aee:	011b      	lsls	r3, r3, #4
 8018af0:	9308      	str	r3, [sp, #32]
 8018af2:	2300      	movs	r3, #0
 8018af4:	9307      	str	r3, [sp, #28]
 8018af6:	2300      	movs	r3, #0
 8018af8:	9306      	str	r3, [sp, #24]
 8018afa:	2300      	movs	r3, #0
 8018afc:	9305      	str	r3, [sp, #20]
 8018afe:	2301      	movs	r3, #1
 8018b00:	9304      	str	r3, [sp, #16]
 8018b02:	2300      	movs	r3, #0
 8018b04:	9303      	str	r3, [sp, #12]
 8018b06:	2305      	movs	r3, #5
 8018b08:	9302      	str	r3, [sp, #8]
 8018b0a:	2300      	movs	r3, #0
 8018b0c:	9301      	str	r3, [sp, #4]
 8018b0e:	9600      	str	r6, [sp, #0]
 8018b10:	0013      	movs	r3, r2
 8018b12:	002a      	movs	r2, r5
 8018b14:	47a0      	blx	r4
 8018b16:	e025      	b.n	8018b64 <RegionEU868TxConfig+0x164>
    }
    else
    {
        modem = MODEM_LORA;
 8018b18:	201f      	movs	r0, #31
 8018b1a:	183b      	adds	r3, r7, r0
 8018b1c:	2201      	movs	r2, #1
 8018b1e:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8018b20:	4b2b      	ldr	r3, [pc, #172]	; (8018bd0 <RegionEU868TxConfig+0x1d0>)
 8018b22:	69dc      	ldr	r4, [r3, #28]
 8018b24:	231e      	movs	r3, #30
 8018b26:	18fb      	adds	r3, r7, r3
 8018b28:	781b      	ldrb	r3, [r3, #0]
 8018b2a:	b25b      	sxtb	r3, r3
 8018b2c:	69bd      	ldr	r5, [r7, #24]
 8018b2e:	2217      	movs	r2, #23
 8018b30:	18ba      	adds	r2, r7, r2
 8018b32:	2100      	movs	r1, #0
 8018b34:	5651      	ldrsb	r1, [r2, r1]
 8018b36:	183a      	adds	r2, r7, r0
 8018b38:	7810      	ldrb	r0, [r2, #0]
 8018b3a:	22fa      	movs	r2, #250	; 0xfa
 8018b3c:	0112      	lsls	r2, r2, #4
 8018b3e:	9208      	str	r2, [sp, #32]
 8018b40:	2200      	movs	r2, #0
 8018b42:	9207      	str	r2, [sp, #28]
 8018b44:	2200      	movs	r2, #0
 8018b46:	9206      	str	r2, [sp, #24]
 8018b48:	2200      	movs	r2, #0
 8018b4a:	9205      	str	r2, [sp, #20]
 8018b4c:	2201      	movs	r2, #1
 8018b4e:	9204      	str	r2, [sp, #16]
 8018b50:	2200      	movs	r2, #0
 8018b52:	9203      	str	r2, [sp, #12]
 8018b54:	2208      	movs	r2, #8
 8018b56:	9202      	str	r2, [sp, #8]
 8018b58:	2201      	movs	r2, #1
 8018b5a:	9201      	str	r2, [sp, #4]
 8018b5c:	9300      	str	r3, [sp, #0]
 8018b5e:	002b      	movs	r3, r5
 8018b60:	2200      	movs	r2, #0
 8018b62:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8018b64:	68fb      	ldr	r3, [r7, #12]
 8018b66:	781b      	ldrb	r3, [r3, #0]
 8018b68:	0019      	movs	r1, r3
 8018b6a:	4a17      	ldr	r2, [pc, #92]	; (8018bc8 <RegionEU868TxConfig+0x1c8>)
 8018b6c:	000b      	movs	r3, r1
 8018b6e:	005b      	lsls	r3, r3, #1
 8018b70:	185b      	adds	r3, r3, r1
 8018b72:	009b      	lsls	r3, r3, #2
 8018b74:	589a      	ldr	r2, [r3, r2]
 8018b76:	68fb      	ldr	r3, [r7, #12]
 8018b78:	785b      	ldrb	r3, [r3, #1]
 8018b7a:	b25b      	sxtb	r3, r3
 8018b7c:	0019      	movs	r1, r3
 8018b7e:	0010      	movs	r0, r2
 8018b80:	f7ff f970 	bl	8017e64 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8018b84:	68fb      	ldr	r3, [r7, #12]
 8018b86:	2201      	movs	r2, #1
 8018b88:	569a      	ldrsb	r2, [r3, r2]
 8018b8a:	68fb      	ldr	r3, [r7, #12]
 8018b8c:	899b      	ldrh	r3, [r3, #12]
 8018b8e:	0019      	movs	r1, r3
 8018b90:	0010      	movs	r0, r2
 8018b92:	f7ff fa81 	bl	8018098 <GetTimeOnAir>
 8018b96:	0002      	movs	r2, r0
 8018b98:	687b      	ldr	r3, [r7, #4]
 8018b9a:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8018b9c:	4b0c      	ldr	r3, [pc, #48]	; (8018bd0 <RegionEU868TxConfig+0x1d0>)
 8018b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018ba0:	68fa      	ldr	r2, [r7, #12]
 8018ba2:	8992      	ldrh	r2, [r2, #12]
 8018ba4:	b2d1      	uxtb	r1, r2
 8018ba6:	221f      	movs	r2, #31
 8018ba8:	18ba      	adds	r2, r7, r2
 8018baa:	7812      	ldrb	r2, [r2, #0]
 8018bac:	0010      	movs	r0, r2
 8018bae:	4798      	blx	r3

    *txPower = txPowerLimited;
 8018bb0:	68bb      	ldr	r3, [r7, #8]
 8018bb2:	221d      	movs	r2, #29
 8018bb4:	18ba      	adds	r2, r7, r2
 8018bb6:	7812      	ldrb	r2, [r2, #0]
 8018bb8:	701a      	strb	r2, [r3, #0]
    return true;
 8018bba:	2301      	movs	r3, #1
}
 8018bbc:	0018      	movs	r0, r3
 8018bbe:	46bd      	mov	sp, r7
 8018bc0:	b009      	add	sp, #36	; 0x24
 8018bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018bc4:	0801fca4 	.word	0x0801fca4
 8018bc8:	20000d44 	.word	0x20000d44
 8018bcc:	20000e7c 	.word	0x20000e7c
 8018bd0:	0801fe28 	.word	0x0801fe28
 8018bd4:	000061a8 	.word	0x000061a8

08018bd8 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8018bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018bda:	b093      	sub	sp, #76	; 0x4c
 8018bdc:	af00      	add	r7, sp, #0
 8018bde:	60f8      	str	r0, [r7, #12]
 8018be0:	60b9      	str	r1, [r7, #8]
 8018be2:	607a      	str	r2, [r7, #4]
 8018be4:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8018be6:	2347      	movs	r3, #71	; 0x47
 8018be8:	18fb      	adds	r3, r7, r3
 8018bea:	2207      	movs	r2, #7
 8018bec:	701a      	strb	r2, [r3, #0]
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8018bee:	233c      	movs	r3, #60	; 0x3c
 8018bf0:	18fb      	adds	r3, r7, r3
 8018bf2:	0018      	movs	r0, r3
 8018bf4:	2306      	movs	r3, #6
 8018bf6:	001a      	movs	r2, r3
 8018bf8:	2100      	movs	r1, #0
 8018bfa:	f005 f9da 	bl	801dfb2 <memset>
    uint8_t nextIndex = 0;
 8018bfe:	2344      	movs	r3, #68	; 0x44
 8018c00:	18fb      	adds	r3, r7, r3
 8018c02:	2200      	movs	r2, #0
 8018c04:	701a      	strb	r2, [r3, #0]
    uint8_t bytesProcessed = 0;
 8018c06:	2346      	movs	r3, #70	; 0x46
 8018c08:	18fb      	adds	r3, r7, r3
 8018c0a:	2200      	movs	r2, #0
 8018c0c:	701a      	strb	r2, [r3, #0]
    uint16_t chMask = 0;
 8018c0e:	233a      	movs	r3, #58	; 0x3a
 8018c10:	18fb      	adds	r3, r7, r3
 8018c12:	2200      	movs	r2, #0
 8018c14:	801a      	strh	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8018c16:	e098      	b.n	8018d4a <RegionEU868LinkAdrReq+0x172>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8018c18:	68fb      	ldr	r3, [r7, #12]
 8018c1a:	685a      	ldr	r2, [r3, #4]
 8018c1c:	2546      	movs	r5, #70	; 0x46
 8018c1e:	197b      	adds	r3, r7, r5
 8018c20:	781b      	ldrb	r3, [r3, #0]
 8018c22:	18d3      	adds	r3, r2, r3
 8018c24:	2644      	movs	r6, #68	; 0x44
 8018c26:	19bc      	adds	r4, r7, r6
 8018c28:	203c      	movs	r0, #60	; 0x3c
 8018c2a:	183a      	adds	r2, r7, r0
 8018c2c:	0011      	movs	r1, r2
 8018c2e:	0018      	movs	r0, r3
 8018c30:	f7fe fe08 	bl	8017844 <RegionCommonParseLinkAdrReq>
 8018c34:	0003      	movs	r3, r0
 8018c36:	7023      	strb	r3, [r4, #0]

        if( nextIndex == 0 )
 8018c38:	0032      	movs	r2, r6
 8018c3a:	18bb      	adds	r3, r7, r2
 8018c3c:	781b      	ldrb	r3, [r3, #0]
 8018c3e:	2b00      	cmp	r3, #0
 8018c40:	d100      	bne.n	8018c44 <RegionEU868LinkAdrReq+0x6c>
 8018c42:	e08b      	b.n	8018d5c <RegionEU868LinkAdrReq+0x184>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8018c44:	197b      	adds	r3, r7, r5
 8018c46:	1979      	adds	r1, r7, r5
 8018c48:	18ba      	adds	r2, r7, r2
 8018c4a:	7809      	ldrb	r1, [r1, #0]
 8018c4c:	7812      	ldrb	r2, [r2, #0]
 8018c4e:	188a      	adds	r2, r1, r2
 8018c50:	701a      	strb	r2, [r3, #0]

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8018c52:	2147      	movs	r1, #71	; 0x47
 8018c54:	187b      	adds	r3, r7, r1
 8018c56:	2207      	movs	r2, #7
 8018c58:	701a      	strb	r2, [r3, #0]

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8018c5a:	203c      	movs	r0, #60	; 0x3c
 8018c5c:	183b      	adds	r3, r7, r0
 8018c5e:	889a      	ldrh	r2, [r3, #4]
 8018c60:	243a      	movs	r4, #58	; 0x3a
 8018c62:	193b      	adds	r3, r7, r4
 8018c64:	801a      	strh	r2, [r3, #0]

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8018c66:	183b      	adds	r3, r7, r0
 8018c68:	78db      	ldrb	r3, [r3, #3]
 8018c6a:	2b00      	cmp	r3, #0
 8018c6c:	d10a      	bne.n	8018c84 <RegionEU868LinkAdrReq+0xac>
 8018c6e:	193b      	adds	r3, r7, r4
 8018c70:	881b      	ldrh	r3, [r3, #0]
 8018c72:	2b00      	cmp	r3, #0
 8018c74:	d106      	bne.n	8018c84 <RegionEU868LinkAdrReq+0xac>
        {
            status &= 0xFE; // Channel mask KO
 8018c76:	187b      	adds	r3, r7, r1
 8018c78:	187a      	adds	r2, r7, r1
 8018c7a:	7812      	ldrb	r2, [r2, #0]
 8018c7c:	2101      	movs	r1, #1
 8018c7e:	438a      	bics	r2, r1
 8018c80:	701a      	strb	r2, [r3, #0]
 8018c82:	e062      	b.n	8018d4a <RegionEU868LinkAdrReq+0x172>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8018c84:	223c      	movs	r2, #60	; 0x3c
 8018c86:	18bb      	adds	r3, r7, r2
 8018c88:	78db      	ldrb	r3, [r3, #3]
 8018c8a:	2b00      	cmp	r3, #0
 8018c8c:	d003      	beq.n	8018c96 <RegionEU868LinkAdrReq+0xbe>
 8018c8e:	18bb      	adds	r3, r7, r2
 8018c90:	78db      	ldrb	r3, [r3, #3]
 8018c92:	2b05      	cmp	r3, #5
 8018c94:	d904      	bls.n	8018ca0 <RegionEU868LinkAdrReq+0xc8>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8018c96:	233c      	movs	r3, #60	; 0x3c
 8018c98:	18fb      	adds	r3, r7, r3
 8018c9a:	78db      	ldrb	r3, [r3, #3]
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8018c9c:	2b06      	cmp	r3, #6
 8018c9e:	d907      	bls.n	8018cb0 <RegionEU868LinkAdrReq+0xd8>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8018ca0:	2247      	movs	r2, #71	; 0x47
 8018ca2:	18bb      	adds	r3, r7, r2
 8018ca4:	18ba      	adds	r2, r7, r2
 8018ca6:	7812      	ldrb	r2, [r2, #0]
 8018ca8:	2101      	movs	r1, #1
 8018caa:	438a      	bics	r2, r1
 8018cac:	701a      	strb	r2, [r3, #0]
 8018cae:	e04c      	b.n	8018d4a <RegionEU868LinkAdrReq+0x172>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8018cb0:	2345      	movs	r3, #69	; 0x45
 8018cb2:	18fb      	adds	r3, r7, r3
 8018cb4:	2200      	movs	r2, #0
 8018cb6:	701a      	strb	r2, [r3, #0]
 8018cb8:	e042      	b.n	8018d40 <RegionEU868LinkAdrReq+0x168>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8018cba:	233c      	movs	r3, #60	; 0x3c
 8018cbc:	18fb      	adds	r3, r7, r3
 8018cbe:	78db      	ldrb	r3, [r3, #3]
 8018cc0:	2b06      	cmp	r3, #6
 8018cc2:	d11a      	bne.n	8018cfa <RegionEU868LinkAdrReq+0x122>
                {
                    if( NvmCtx.Channels[i].Frequency != 0 )
 8018cc4:	2045      	movs	r0, #69	; 0x45
 8018cc6:	183b      	adds	r3, r7, r0
 8018cc8:	781a      	ldrb	r2, [r3, #0]
 8018cca:	496d      	ldr	r1, [pc, #436]	; (8018e80 <RegionEU868LinkAdrReq+0x2a8>)
 8018ccc:	0013      	movs	r3, r2
 8018cce:	005b      	lsls	r3, r3, #1
 8018cd0:	189b      	adds	r3, r3, r2
 8018cd2:	009b      	lsls	r3, r3, #2
 8018cd4:	585b      	ldr	r3, [r3, r1]
 8018cd6:	2b00      	cmp	r3, #0
 8018cd8:	d02c      	beq.n	8018d34 <RegionEU868LinkAdrReq+0x15c>
                    {
                        chMask |= 1 << i;
 8018cda:	183b      	adds	r3, r7, r0
 8018cdc:	781b      	ldrb	r3, [r3, #0]
 8018cde:	2201      	movs	r2, #1
 8018ce0:	409a      	lsls	r2, r3
 8018ce2:	0013      	movs	r3, r2
 8018ce4:	b21a      	sxth	r2, r3
 8018ce6:	213a      	movs	r1, #58	; 0x3a
 8018ce8:	187b      	adds	r3, r7, r1
 8018cea:	881b      	ldrh	r3, [r3, #0]
 8018cec:	b21b      	sxth	r3, r3
 8018cee:	4313      	orrs	r3, r2
 8018cf0:	b21b      	sxth	r3, r3
 8018cf2:	b29a      	uxth	r2, r3
 8018cf4:	187b      	adds	r3, r7, r1
 8018cf6:	801a      	strh	r2, [r3, #0]
 8018cf8:	e01c      	b.n	8018d34 <RegionEU868LinkAdrReq+0x15c>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8018cfa:	233a      	movs	r3, #58	; 0x3a
 8018cfc:	18fb      	adds	r3, r7, r3
 8018cfe:	881b      	ldrh	r3, [r3, #0]
 8018d00:	001a      	movs	r2, r3
 8018d02:	2145      	movs	r1, #69	; 0x45
 8018d04:	187b      	adds	r3, r7, r1
 8018d06:	781b      	ldrb	r3, [r3, #0]
 8018d08:	411a      	asrs	r2, r3
 8018d0a:	0013      	movs	r3, r2
 8018d0c:	2201      	movs	r2, #1
 8018d0e:	4013      	ands	r3, r2
 8018d10:	d010      	beq.n	8018d34 <RegionEU868LinkAdrReq+0x15c>
                        ( NvmCtx.Channels[i].Frequency == 0 ) )
 8018d12:	187b      	adds	r3, r7, r1
 8018d14:	781a      	ldrb	r2, [r3, #0]
 8018d16:	495a      	ldr	r1, [pc, #360]	; (8018e80 <RegionEU868LinkAdrReq+0x2a8>)
 8018d18:	0013      	movs	r3, r2
 8018d1a:	005b      	lsls	r3, r3, #1
 8018d1c:	189b      	adds	r3, r3, r2
 8018d1e:	009b      	lsls	r3, r3, #2
 8018d20:	585b      	ldr	r3, [r3, r1]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8018d22:	2b00      	cmp	r3, #0
 8018d24:	d106      	bne.n	8018d34 <RegionEU868LinkAdrReq+0x15c>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8018d26:	2247      	movs	r2, #71	; 0x47
 8018d28:	18bb      	adds	r3, r7, r2
 8018d2a:	18ba      	adds	r2, r7, r2
 8018d2c:	7812      	ldrb	r2, [r2, #0]
 8018d2e:	2101      	movs	r1, #1
 8018d30:	438a      	bics	r2, r1
 8018d32:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8018d34:	2145      	movs	r1, #69	; 0x45
 8018d36:	187b      	adds	r3, r7, r1
 8018d38:	781a      	ldrb	r2, [r3, #0]
 8018d3a:	187b      	adds	r3, r7, r1
 8018d3c:	3201      	adds	r2, #1
 8018d3e:	701a      	strb	r2, [r3, #0]
 8018d40:	2345      	movs	r3, #69	; 0x45
 8018d42:	18fb      	adds	r3, r7, r3
 8018d44:	781b      	ldrb	r3, [r3, #0]
 8018d46:	2b0f      	cmp	r3, #15
 8018d48:	d9b7      	bls.n	8018cba <RegionEU868LinkAdrReq+0xe2>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8018d4a:	68fb      	ldr	r3, [r7, #12]
 8018d4c:	7a1b      	ldrb	r3, [r3, #8]
 8018d4e:	2246      	movs	r2, #70	; 0x46
 8018d50:	18ba      	adds	r2, r7, r2
 8018d52:	7812      	ldrb	r2, [r2, #0]
 8018d54:	429a      	cmp	r2, r3
 8018d56:	d200      	bcs.n	8018d5a <RegionEU868LinkAdrReq+0x182>
 8018d58:	e75e      	b.n	8018c18 <RegionEU868LinkAdrReq+0x40>
 8018d5a:	e000      	b.n	8018d5e <RegionEU868LinkAdrReq+0x186>
            break; // break loop, since no more request has been found
 8018d5c:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8018d5e:	2134      	movs	r1, #52	; 0x34
 8018d60:	187b      	adds	r3, r7, r1
 8018d62:	2202      	movs	r2, #2
 8018d64:	701a      	strb	r2, [r3, #0]
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8018d66:	68fb      	ldr	r3, [r7, #12]
 8018d68:	7a5a      	ldrb	r2, [r3, #9]
 8018d6a:	187b      	adds	r3, r7, r1
 8018d6c:	709a      	strb	r2, [r3, #2]
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8018d6e:	187b      	adds	r3, r7, r1
 8018d70:	0018      	movs	r0, r3
 8018d72:	f7ff f9ef 	bl	8018154 <RegionEU868GetPhyParam>
 8018d76:	0003      	movs	r3, r0
 8018d78:	001a      	movs	r2, r3
 8018d7a:	2030      	movs	r0, #48	; 0x30
 8018d7c:	183b      	adds	r3, r7, r0
 8018d7e:	601a      	str	r2, [r3, #0]

    linkAdrVerifyParams.Status = status;
 8018d80:	2110      	movs	r1, #16
 8018d82:	187b      	adds	r3, r7, r1
 8018d84:	2447      	movs	r4, #71	; 0x47
 8018d86:	193a      	adds	r2, r7, r4
 8018d88:	7812      	ldrb	r2, [r2, #0]
 8018d8a:	711a      	strb	r2, [r3, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8018d8c:	68fb      	ldr	r3, [r7, #12]
 8018d8e:	7a9a      	ldrb	r2, [r3, #10]
 8018d90:	187b      	adds	r3, r7, r1
 8018d92:	715a      	strb	r2, [r3, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8018d94:	253c      	movs	r5, #60	; 0x3c
 8018d96:	197b      	adds	r3, r7, r5
 8018d98:	2201      	movs	r2, #1
 8018d9a:	569a      	ldrsb	r2, [r3, r2]
 8018d9c:	187b      	adds	r3, r7, r1
 8018d9e:	719a      	strb	r2, [r3, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8018da0:	197b      	adds	r3, r7, r5
 8018da2:	2202      	movs	r2, #2
 8018da4:	569a      	ldrsb	r2, [r3, r2]
 8018da6:	187b      	adds	r3, r7, r1
 8018da8:	71da      	strb	r2, [r3, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8018daa:	197b      	adds	r3, r7, r5
 8018dac:	781a      	ldrb	r2, [r3, #0]
 8018dae:	187b      	adds	r3, r7, r1
 8018db0:	721a      	strb	r2, [r3, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8018db2:	68fb      	ldr	r3, [r7, #12]
 8018db4:	220b      	movs	r2, #11
 8018db6:	569a      	ldrsb	r2, [r3, r2]
 8018db8:	187b      	adds	r3, r7, r1
 8018dba:	725a      	strb	r2, [r3, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8018dbc:	68fb      	ldr	r3, [r7, #12]
 8018dbe:	220c      	movs	r2, #12
 8018dc0:	569a      	ldrsb	r2, [r3, r2]
 8018dc2:	187b      	adds	r3, r7, r1
 8018dc4:	729a      	strb	r2, [r3, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8018dc6:	68fb      	ldr	r3, [r7, #12]
 8018dc8:	7b5b      	ldrb	r3, [r3, #13]
 8018dca:	b25a      	sxtb	r2, r3
 8018dcc:	187b      	adds	r3, r7, r1
 8018dce:	72da      	strb	r2, [r3, #11]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8018dd0:	187b      	adds	r3, r7, r1
 8018dd2:	2210      	movs	r2, #16
 8018dd4:	731a      	strb	r2, [r3, #12]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8018dd6:	187b      	adds	r3, r7, r1
 8018dd8:	223a      	movs	r2, #58	; 0x3a
 8018dda:	18ba      	adds	r2, r7, r2
 8018ddc:	611a      	str	r2, [r3, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8018dde:	183b      	adds	r3, r7, r0
 8018de0:	681b      	ldr	r3, [r3, #0]
 8018de2:	b25a      	sxtb	r2, r3
 8018de4:	0008      	movs	r0, r1
 8018de6:	183b      	adds	r3, r7, r0
 8018de8:	751a      	strb	r2, [r3, #20]
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 8018dea:	183b      	adds	r3, r7, r0
 8018dec:	2207      	movs	r2, #7
 8018dee:	755a      	strb	r2, [r3, #21]
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 8018df0:	183b      	adds	r3, r7, r0
 8018df2:	4a23      	ldr	r2, [pc, #140]	; (8018e80 <RegionEU868LinkAdrReq+0x2a8>)
 8018df4:	619a      	str	r2, [r3, #24]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8018df6:	183b      	adds	r3, r7, r0
 8018df8:	2200      	movs	r2, #0
 8018dfa:	771a      	strb	r2, [r3, #28]
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8018dfc:	183b      	adds	r3, r7, r0
 8018dfe:	2200      	movs	r2, #0
 8018e00:	775a      	strb	r2, [r3, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8018e02:	183b      	adds	r3, r7, r0
 8018e04:	68fa      	ldr	r2, [r7, #12]
 8018e06:	6812      	ldr	r2, [r2, #0]
 8018e08:	601a      	str	r2, [r3, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8018e0a:	0026      	movs	r6, r4
 8018e0c:	193c      	adds	r4, r7, r4
 8018e0e:	0029      	movs	r1, r5
 8018e10:	187d      	adds	r5, r7, r1
 8018e12:	187b      	adds	r3, r7, r1
 8018e14:	1c9a      	adds	r2, r3, #2
 8018e16:	187b      	adds	r3, r7, r1
 8018e18:	1c59      	adds	r1, r3, #1
 8018e1a:	1838      	adds	r0, r7, r0
 8018e1c:	002b      	movs	r3, r5
 8018e1e:	f7fe fd66 	bl	80178ee <RegionCommonLinkAdrReqVerifyParams>
 8018e22:	0003      	movs	r3, r0
 8018e24:	7023      	strb	r3, [r4, #0]

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8018e26:	19bb      	adds	r3, r7, r6
 8018e28:	781b      	ldrb	r3, [r3, #0]
 8018e2a:	2b07      	cmp	r3, #7
 8018e2c:	d10c      	bne.n	8018e48 <RegionEU868LinkAdrReq+0x270>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) NvmCtx.ChannelsMask, 0, sizeof( NvmCtx.ChannelsMask ) );
 8018e2e:	4b15      	ldr	r3, [pc, #84]	; (8018e84 <RegionEU868LinkAdrReq+0x2ac>)
 8018e30:	2202      	movs	r2, #2
 8018e32:	2100      	movs	r1, #0
 8018e34:	0018      	movs	r0, r3
 8018e36:	f000 fbe9 	bl	801960c <memset1>
        // Update the channels mask
        NvmCtx.ChannelsMask[0] = chMask;
 8018e3a:	223a      	movs	r2, #58	; 0x3a
 8018e3c:	18bb      	adds	r3, r7, r2
 8018e3e:	8819      	ldrh	r1, [r3, #0]
 8018e40:	4a0f      	ldr	r2, [pc, #60]	; (8018e80 <RegionEU868LinkAdrReq+0x2a8>)
 8018e42:	239c      	movs	r3, #156	; 0x9c
 8018e44:	005b      	lsls	r3, r3, #1
 8018e46:	52d1      	strh	r1, [r2, r3]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8018e48:	213c      	movs	r1, #60	; 0x3c
 8018e4a:	187b      	adds	r3, r7, r1
 8018e4c:	2201      	movs	r2, #1
 8018e4e:	569a      	ldrsb	r2, [r3, r2]
 8018e50:	68bb      	ldr	r3, [r7, #8]
 8018e52:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8018e54:	187b      	adds	r3, r7, r1
 8018e56:	2202      	movs	r2, #2
 8018e58:	569a      	ldrsb	r2, [r3, r2]
 8018e5a:	687b      	ldr	r3, [r7, #4]
 8018e5c:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8018e5e:	187b      	adds	r3, r7, r1
 8018e60:	781a      	ldrb	r2, [r3, #0]
 8018e62:	683b      	ldr	r3, [r7, #0]
 8018e64:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8018e66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018e68:	2246      	movs	r2, #70	; 0x46
 8018e6a:	18ba      	adds	r2, r7, r2
 8018e6c:	7812      	ldrb	r2, [r2, #0]
 8018e6e:	701a      	strb	r2, [r3, #0]

    return status;
 8018e70:	2347      	movs	r3, #71	; 0x47
 8018e72:	18fb      	adds	r3, r7, r3
 8018e74:	781b      	ldrb	r3, [r3, #0]
}
 8018e76:	0018      	movs	r0, r3
 8018e78:	46bd      	mov	sp, r7
 8018e7a:	b013      	add	sp, #76	; 0x4c
 8018e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018e7e:	46c0      	nop			; (mov r8, r8)
 8018e80:	20000d44 	.word	0x20000d44
 8018e84:	20000e7c 	.word	0x20000e7c

08018e88 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8018e88:	b590      	push	{r4, r7, lr}
 8018e8a:	b085      	sub	sp, #20
 8018e8c:	af00      	add	r7, sp, #0
 8018e8e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8018e90:	240f      	movs	r4, #15
 8018e92:	193b      	adds	r3, r7, r4
 8018e94:	2207      	movs	r2, #7
 8018e96:	701a      	strb	r2, [r3, #0]
    uint8_t band = 0;
 8018e98:	210e      	movs	r1, #14
 8018e9a:	187b      	adds	r3, r7, r1
 8018e9c:	2200      	movs	r2, #0
 8018e9e:	701a      	strb	r2, [r3, #0]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8018ea0:	687b      	ldr	r3, [r7, #4]
 8018ea2:	685b      	ldr	r3, [r3, #4]
 8018ea4:	187a      	adds	r2, r7, r1
 8018ea6:	0011      	movs	r1, r2
 8018ea8:	0018      	movs	r0, r3
 8018eaa:	f7ff f87d 	bl	8017fa8 <VerifyRfFreq>
 8018eae:	0003      	movs	r3, r0
 8018eb0:	001a      	movs	r2, r3
 8018eb2:	2301      	movs	r3, #1
 8018eb4:	4053      	eors	r3, r2
 8018eb6:	b2db      	uxtb	r3, r3
 8018eb8:	2b00      	cmp	r3, #0
 8018eba:	d005      	beq.n	8018ec8 <RegionEU868RxParamSetupReq+0x40>
    {
        status &= 0xFE; // Channel frequency KO
 8018ebc:	193b      	adds	r3, r7, r4
 8018ebe:	193a      	adds	r2, r7, r4
 8018ec0:	7812      	ldrb	r2, [r2, #0]
 8018ec2:	2101      	movs	r1, #1
 8018ec4:	438a      	bics	r2, r1
 8018ec6:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8018ec8:	687b      	ldr	r3, [r7, #4]
 8018eca:	781b      	ldrb	r3, [r3, #0]
 8018ecc:	b25b      	sxtb	r3, r3
 8018ece:	2207      	movs	r2, #7
 8018ed0:	2100      	movs	r1, #0
 8018ed2:	0018      	movs	r0, r3
 8018ed4:	f7fe fad9 	bl	801748a <RegionCommonValueInRange>
 8018ed8:	1e03      	subs	r3, r0, #0
 8018eda:	d106      	bne.n	8018eea <RegionEU868RxParamSetupReq+0x62>
    {
        status &= 0xFD; // Datarate KO
 8018edc:	220f      	movs	r2, #15
 8018ede:	18bb      	adds	r3, r7, r2
 8018ee0:	18ba      	adds	r2, r7, r2
 8018ee2:	7812      	ldrb	r2, [r2, #0]
 8018ee4:	2102      	movs	r1, #2
 8018ee6:	438a      	bics	r2, r1
 8018ee8:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8018eea:	687b      	ldr	r3, [r7, #4]
 8018eec:	785b      	ldrb	r3, [r3, #1]
 8018eee:	b25b      	sxtb	r3, r3
 8018ef0:	2205      	movs	r2, #5
 8018ef2:	2100      	movs	r1, #0
 8018ef4:	0018      	movs	r0, r3
 8018ef6:	f7fe fac8 	bl	801748a <RegionCommonValueInRange>
 8018efa:	1e03      	subs	r3, r0, #0
 8018efc:	d106      	bne.n	8018f0c <RegionEU868RxParamSetupReq+0x84>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8018efe:	220f      	movs	r2, #15
 8018f00:	18bb      	adds	r3, r7, r2
 8018f02:	18ba      	adds	r2, r7, r2
 8018f04:	7812      	ldrb	r2, [r2, #0]
 8018f06:	2104      	movs	r1, #4
 8018f08:	438a      	bics	r2, r1
 8018f0a:	701a      	strb	r2, [r3, #0]
    }

    return status;
 8018f0c:	230f      	movs	r3, #15
 8018f0e:	18fb      	adds	r3, r7, r3
 8018f10:	781b      	ldrb	r3, [r3, #0]
}
 8018f12:	0018      	movs	r0, r3
 8018f14:	46bd      	mov	sp, r7
 8018f16:	b005      	add	sp, #20
 8018f18:	bd90      	pop	{r4, r7, pc}

08018f1a <RegionEU868NewChannelReq>:

uint8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8018f1a:	b590      	push	{r4, r7, lr}
 8018f1c:	b087      	sub	sp, #28
 8018f1e:	af00      	add	r7, sp, #0
 8018f20:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8018f22:	2417      	movs	r4, #23
 8018f24:	193b      	adds	r3, r7, r4
 8018f26:	2203      	movs	r2, #3
 8018f28:	701a      	strb	r2, [r3, #0]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8018f2a:	687b      	ldr	r3, [r7, #4]
 8018f2c:	681b      	ldr	r3, [r3, #0]
 8018f2e:	681b      	ldr	r3, [r3, #0]
 8018f30:	2b00      	cmp	r3, #0
 8018f32:	d118      	bne.n	8018f66 <RegionEU868NewChannelReq+0x4c>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8018f34:	687b      	ldr	r3, [r7, #4]
 8018f36:	791b      	ldrb	r3, [r3, #4]
 8018f38:	b25b      	sxtb	r3, r3
 8018f3a:	b2da      	uxtb	r2, r3
 8018f3c:	2108      	movs	r1, #8
 8018f3e:	187b      	adds	r3, r7, r1
 8018f40:	701a      	strb	r2, [r3, #0]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8018f42:	187b      	adds	r3, r7, r1
 8018f44:	0018      	movs	r0, r3
 8018f46:	f000 fa35 	bl	80193b4 <RegionEU868ChannelsRemove>
 8018f4a:	0003      	movs	r3, r0
 8018f4c:	001a      	movs	r2, r3
 8018f4e:	2301      	movs	r3, #1
 8018f50:	4053      	eors	r3, r2
 8018f52:	b2db      	uxtb	r3, r3
 8018f54:	2b00      	cmp	r3, #0
 8018f56:	d041      	beq.n	8018fdc <RegionEU868NewChannelReq+0xc2>
        {
            status &= 0xFC;
 8018f58:	193b      	adds	r3, r7, r4
 8018f5a:	193a      	adds	r2, r7, r4
 8018f5c:	7812      	ldrb	r2, [r2, #0]
 8018f5e:	2103      	movs	r1, #3
 8018f60:	438a      	bics	r2, r1
 8018f62:	701a      	strb	r2, [r3, #0]
 8018f64:	e03a      	b.n	8018fdc <RegionEU868NewChannelReq+0xc2>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8018f66:	687b      	ldr	r3, [r7, #4]
 8018f68:	681a      	ldr	r2, [r3, #0]
 8018f6a:	210c      	movs	r1, #12
 8018f6c:	187b      	adds	r3, r7, r1
 8018f6e:	601a      	str	r2, [r3, #0]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8018f70:	687b      	ldr	r3, [r7, #4]
 8018f72:	791b      	ldrb	r3, [r3, #4]
 8018f74:	b25b      	sxtb	r3, r3
 8018f76:	b2da      	uxtb	r2, r3
 8018f78:	187b      	adds	r3, r7, r1
 8018f7a:	711a      	strb	r2, [r3, #4]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8018f7c:	187b      	adds	r3, r7, r1
 8018f7e:	0018      	movs	r0, r3
 8018f80:	f000 f954 	bl	801922c <RegionEU868ChannelAdd>
 8018f84:	0003      	movs	r3, r0
 8018f86:	2b06      	cmp	r3, #6
 8018f88:	d017      	beq.n	8018fba <RegionEU868NewChannelReq+0xa0>
 8018f8a:	dc1e      	bgt.n	8018fca <RegionEU868NewChannelReq+0xb0>
 8018f8c:	2b05      	cmp	r3, #5
 8018f8e:	d00c      	beq.n	8018faa <RegionEU868NewChannelReq+0x90>
 8018f90:	dc1b      	bgt.n	8018fca <RegionEU868NewChannelReq+0xb0>
 8018f92:	2b00      	cmp	r3, #0
 8018f94:	d021      	beq.n	8018fda <RegionEU868NewChannelReq+0xc0>
 8018f96:	2b04      	cmp	r3, #4
 8018f98:	d117      	bne.n	8018fca <RegionEU868NewChannelReq+0xb0>
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8018f9a:	2217      	movs	r2, #23
 8018f9c:	18bb      	adds	r3, r7, r2
 8018f9e:	18ba      	adds	r2, r7, r2
 8018fa0:	7812      	ldrb	r2, [r2, #0]
 8018fa2:	2101      	movs	r1, #1
 8018fa4:	438a      	bics	r2, r1
 8018fa6:	701a      	strb	r2, [r3, #0]
                break;
 8018fa8:	e018      	b.n	8018fdc <RegionEU868NewChannelReq+0xc2>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8018faa:	2217      	movs	r2, #23
 8018fac:	18bb      	adds	r3, r7, r2
 8018fae:	18ba      	adds	r2, r7, r2
 8018fb0:	7812      	ldrb	r2, [r2, #0]
 8018fb2:	2102      	movs	r1, #2
 8018fb4:	438a      	bics	r2, r1
 8018fb6:	701a      	strb	r2, [r3, #0]
                break;
 8018fb8:	e010      	b.n	8018fdc <RegionEU868NewChannelReq+0xc2>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8018fba:	2217      	movs	r2, #23
 8018fbc:	18bb      	adds	r3, r7, r2
 8018fbe:	18ba      	adds	r2, r7, r2
 8018fc0:	7812      	ldrb	r2, [r2, #0]
 8018fc2:	2103      	movs	r1, #3
 8018fc4:	438a      	bics	r2, r1
 8018fc6:	701a      	strb	r2, [r3, #0]
                break;
 8018fc8:	e008      	b.n	8018fdc <RegionEU868NewChannelReq+0xc2>
            }
            default:
            {
                status &= 0xFC;
 8018fca:	2217      	movs	r2, #23
 8018fcc:	18bb      	adds	r3, r7, r2
 8018fce:	18ba      	adds	r2, r7, r2
 8018fd0:	7812      	ldrb	r2, [r2, #0]
 8018fd2:	2103      	movs	r1, #3
 8018fd4:	438a      	bics	r2, r1
 8018fd6:	701a      	strb	r2, [r3, #0]
                break;
 8018fd8:	e000      	b.n	8018fdc <RegionEU868NewChannelReq+0xc2>
                break;
 8018fda:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    return status;
 8018fdc:	2317      	movs	r3, #23
 8018fde:	18fb      	adds	r3, r7, r3
 8018fe0:	781b      	ldrb	r3, [r3, #0]
}
 8018fe2:	0018      	movs	r0, r3
 8018fe4:	46bd      	mov	sp, r7
 8018fe6:	b007      	add	sp, #28
 8018fe8:	bd90      	pop	{r4, r7, pc}

08018fea <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8018fea:	b580      	push	{r7, lr}
 8018fec:	b082      	sub	sp, #8
 8018fee:	af00      	add	r7, sp, #0
 8018ff0:	6078      	str	r0, [r7, #4]
    return -1;
 8018ff2:	2301      	movs	r3, #1
 8018ff4:	425b      	negs	r3, r3
}
 8018ff6:	0018      	movs	r0, r3
 8018ff8:	46bd      	mov	sp, r7
 8018ffa:	b002      	add	sp, #8
 8018ffc:	bd80      	pop	{r7, pc}
	...

08019000 <RegionEU868DlChannelReq>:

uint8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8019000:	b590      	push	{r4, r7, lr}
 8019002:	b085      	sub	sp, #20
 8019004:	af00      	add	r7, sp, #0
 8019006:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8019008:	240f      	movs	r4, #15
 801900a:	193b      	adds	r3, r7, r4
 801900c:	2203      	movs	r2, #3
 801900e:	701a      	strb	r2, [r3, #0]
    uint8_t band = 0;
 8019010:	210e      	movs	r1, #14
 8019012:	187b      	adds	r3, r7, r1
 8019014:	2200      	movs	r2, #0
 8019016:	701a      	strb	r2, [r3, #0]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8019018:	687b      	ldr	r3, [r7, #4]
 801901a:	685b      	ldr	r3, [r3, #4]
 801901c:	187a      	adds	r2, r7, r1
 801901e:	0011      	movs	r1, r2
 8019020:	0018      	movs	r0, r3
 8019022:	f7fe ffc1 	bl	8017fa8 <VerifyRfFreq>
 8019026:	0003      	movs	r3, r0
 8019028:	001a      	movs	r2, r3
 801902a:	2301      	movs	r3, #1
 801902c:	4053      	eors	r3, r2
 801902e:	b2db      	uxtb	r3, r3
 8019030:	2b00      	cmp	r3, #0
 8019032:	d005      	beq.n	8019040 <RegionEU868DlChannelReq+0x40>
    {
        status &= 0xFE;
 8019034:	193b      	adds	r3, r7, r4
 8019036:	193a      	adds	r2, r7, r4
 8019038:	7812      	ldrb	r2, [r2, #0]
 801903a:	2101      	movs	r1, #1
 801903c:	438a      	bics	r2, r1
 801903e:	701a      	strb	r2, [r3, #0]
    }

    // Verify if an uplink frequency exists
    if( NvmCtx.Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8019040:	687b      	ldr	r3, [r7, #4]
 8019042:	781b      	ldrb	r3, [r3, #0]
 8019044:	0019      	movs	r1, r3
 8019046:	4a14      	ldr	r2, [pc, #80]	; (8019098 <RegionEU868DlChannelReq+0x98>)
 8019048:	000b      	movs	r3, r1
 801904a:	005b      	lsls	r3, r3, #1
 801904c:	185b      	adds	r3, r3, r1
 801904e:	009b      	lsls	r3, r3, #2
 8019050:	589b      	ldr	r3, [r3, r2]
 8019052:	2b00      	cmp	r3, #0
 8019054:	d106      	bne.n	8019064 <RegionEU868DlChannelReq+0x64>
    {
        status &= 0xFD;
 8019056:	220f      	movs	r2, #15
 8019058:	18bb      	adds	r3, r7, r2
 801905a:	18ba      	adds	r2, r7, r2
 801905c:	7812      	ldrb	r2, [r2, #0]
 801905e:	2102      	movs	r1, #2
 8019060:	438a      	bics	r2, r1
 8019062:	701a      	strb	r2, [r3, #0]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8019064:	230f      	movs	r3, #15
 8019066:	18fb      	adds	r3, r7, r3
 8019068:	781b      	ldrb	r3, [r3, #0]
 801906a:	2b03      	cmp	r3, #3
 801906c:	d10c      	bne.n	8019088 <RegionEU868DlChannelReq+0x88>
    {
        NvmCtx.Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 801906e:	687b      	ldr	r3, [r7, #4]
 8019070:	781b      	ldrb	r3, [r3, #0]
 8019072:	0018      	movs	r0, r3
 8019074:	687b      	ldr	r3, [r7, #4]
 8019076:	685a      	ldr	r2, [r3, #4]
 8019078:	4907      	ldr	r1, [pc, #28]	; (8019098 <RegionEU868DlChannelReq+0x98>)
 801907a:	0003      	movs	r3, r0
 801907c:	005b      	lsls	r3, r3, #1
 801907e:	181b      	adds	r3, r3, r0
 8019080:	009b      	lsls	r3, r3, #2
 8019082:	18cb      	adds	r3, r1, r3
 8019084:	3304      	adds	r3, #4
 8019086:	601a      	str	r2, [r3, #0]
    }

    return status;
 8019088:	230f      	movs	r3, #15
 801908a:	18fb      	adds	r3, r7, r3
 801908c:	781b      	ldrb	r3, [r3, #0]
}
 801908e:	0018      	movs	r0, r3
 8019090:	46bd      	mov	sp, r7
 8019092:	b005      	add	sp, #20
 8019094:	bd90      	pop	{r4, r7, pc}
 8019096:	46c0      	nop			; (mov r8, r8)
 8019098:	20000d44 	.word	0x20000d44

0801909c <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 801909c:	b580      	push	{r7, lr}
 801909e:	b082      	sub	sp, #8
 80190a0:	af00      	add	r7, sp, #0
 80190a2:	0002      	movs	r2, r0
 80190a4:	1dfb      	adds	r3, r7, #7
 80190a6:	701a      	strb	r2, [r3, #0]
 80190a8:	1dbb      	adds	r3, r7, #6
 80190aa:	1c0a      	adds	r2, r1, #0
 80190ac:	701a      	strb	r2, [r3, #0]
    return currentDr;
 80190ae:	1dfb      	adds	r3, r7, #7
 80190b0:	781b      	ldrb	r3, [r3, #0]
 80190b2:	b25b      	sxtb	r3, r3
}
 80190b4:	0018      	movs	r0, r3
 80190b6:	46bd      	mov	sp, r7
 80190b8:	b002      	add	sp, #8
 80190ba:	bd80      	pop	{r7, pc}

080190bc <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80190bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80190be:	b099      	sub	sp, #100	; 0x64
 80190c0:	af02      	add	r7, sp, #8
 80190c2:	60f8      	str	r0, [r7, #12]
 80190c4:	60b9      	str	r1, [r7, #8]
 80190c6:	607a      	str	r2, [r7, #4]
 80190c8:	603b      	str	r3, [r7, #0]
    uint8_t nbEnabledChannels = 0;
 80190ca:	2356      	movs	r3, #86	; 0x56
 80190cc:	18fb      	adds	r3, r7, r3
 80190ce:	2200      	movs	r2, #0
 80190d0:	701a      	strb	r2, [r3, #0]
    uint8_t nbRestrictedChannels = 0;
 80190d2:	2355      	movs	r3, #85	; 0x55
 80190d4:	18fb      	adds	r3, r7, r3
 80190d6:	2200      	movs	r2, #0
 80190d8:	701a      	strb	r2, [r3, #0]
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 80190da:	2344      	movs	r3, #68	; 0x44
 80190dc:	18fb      	adds	r3, r7, r3
 80190de:	2200      	movs	r2, #0
 80190e0:	601a      	str	r2, [r3, #0]
 80190e2:	3304      	adds	r3, #4
 80190e4:	220c      	movs	r2, #12
 80190e6:	2100      	movs	r1, #0
 80190e8:	0018      	movs	r0, r3
 80190ea:	f004 ff62 	bl	801dfb2 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80190ee:	2357      	movs	r3, #87	; 0x57
 80190f0:	18fb      	adds	r3, r7, r3
 80190f2:	220c      	movs	r2, #12
 80190f4:	701a      	strb	r2, [r3, #0]

    if( RegionCommonCountChannels( NvmCtx.ChannelsMask, 0, 1 ) == 0 )
 80190f6:	4b4a      	ldr	r3, [pc, #296]	; (8019220 <RegionEU868NextChannel+0x164>)
 80190f8:	2201      	movs	r2, #1
 80190fa:	2100      	movs	r1, #0
 80190fc:	0018      	movs	r0, r3
 80190fe:	f7fe fa2c 	bl	801755a <RegionCommonCountChannels>
 8019102:	1e03      	subs	r3, r0, #0
 8019104:	d10a      	bne.n	801911c <RegionEU868NextChannel+0x60>
    { // Reactivate default channels
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8019106:	4a47      	ldr	r2, [pc, #284]	; (8019224 <RegionEU868NextChannel+0x168>)
 8019108:	239c      	movs	r3, #156	; 0x9c
 801910a:	005b      	lsls	r3, r3, #1
 801910c:	5ad3      	ldrh	r3, [r2, r3]
 801910e:	2207      	movs	r2, #7
 8019110:	4313      	orrs	r3, r2
 8019112:	b299      	uxth	r1, r3
 8019114:	4a43      	ldr	r2, [pc, #268]	; (8019224 <RegionEU868NextChannel+0x168>)
 8019116:	239c      	movs	r3, #156	; 0x9c
 8019118:	005b      	lsls	r3, r3, #1
 801911a:	52d1      	strh	r1, [r2, r3]
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 801911c:	68fb      	ldr	r3, [r7, #12]
 801911e:	7a5a      	ldrb	r2, [r3, #9]
 8019120:	2110      	movs	r1, #16
 8019122:	187b      	adds	r3, r7, r1
 8019124:	701a      	strb	r2, [r3, #0]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8019126:	68fb      	ldr	r3, [r7, #12]
 8019128:	7a1b      	ldrb	r3, [r3, #8]
 801912a:	b25b      	sxtb	r3, r3
 801912c:	b2da      	uxtb	r2, r3
 801912e:	187b      	adds	r3, r7, r1
 8019130:	705a      	strb	r2, [r3, #1]
    countChannelsParams.ChannelsMask = NvmCtx.ChannelsMask;
 8019132:	000d      	movs	r5, r1
 8019134:	197b      	adds	r3, r7, r5
 8019136:	4a3a      	ldr	r2, [pc, #232]	; (8019220 <RegionEU868NextChannel+0x164>)
 8019138:	605a      	str	r2, [r3, #4]
    countChannelsParams.Channels = NvmCtx.Channels;
 801913a:	197b      	adds	r3, r7, r5
 801913c:	4a39      	ldr	r2, [pc, #228]	; (8019224 <RegionEU868NextChannel+0x168>)
 801913e:	609a      	str	r2, [r3, #8]
    countChannelsParams.Bands = NvmCtx.Bands;
 8019140:	197b      	adds	r3, r7, r5
 8019142:	4a39      	ldr	r2, [pc, #228]	; (8019228 <RegionEU868NextChannel+0x16c>)
 8019144:	60da      	str	r2, [r3, #12]
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 8019146:	197b      	adds	r3, r7, r5
 8019148:	2210      	movs	r2, #16
 801914a:	821a      	strh	r2, [r3, #16]
    countChannelsParams.JoinChannels = EU868_JOIN_CHANNELS;
 801914c:	197b      	adds	r3, r7, r5
 801914e:	2207      	movs	r2, #7
 8019150:	825a      	strh	r2, [r3, #18]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8019152:	68fb      	ldr	r3, [r7, #12]
 8019154:	681a      	ldr	r2, [r3, #0]
 8019156:	2424      	movs	r4, #36	; 0x24
 8019158:	193b      	adds	r3, r7, r4
 801915a:	601a      	str	r2, [r3, #0]
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 801915c:	68fb      	ldr	r3, [r7, #12]
 801915e:	685a      	ldr	r2, [r3, #4]
 8019160:	193b      	adds	r3, r7, r4
 8019162:	605a      	str	r2, [r3, #4]
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8019164:	68fb      	ldr	r3, [r7, #12]
 8019166:	7a9a      	ldrb	r2, [r3, #10]
 8019168:	193b      	adds	r3, r7, r4
 801916a:	721a      	strb	r2, [r3, #8]
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 801916c:	193b      	adds	r3, r7, r4
 801916e:	2206      	movs	r2, #6
 8019170:	725a      	strb	r2, [r3, #9]

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8019172:	193b      	adds	r3, r7, r4
 8019174:	68fa      	ldr	r2, [r7, #12]
 8019176:	330c      	adds	r3, #12
 8019178:	320c      	adds	r2, #12
 801917a:	ca03      	ldmia	r2!, {r0, r1}
 801917c:	c303      	stmia	r3!, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 801917e:	68fb      	ldr	r3, [r7, #12]
 8019180:	7d1a      	ldrb	r2, [r3, #20]
 8019182:	193b      	adds	r3, r7, r4
 8019184:	751a      	strb	r2, [r3, #20]
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8019186:	68fb      	ldr	r3, [r7, #12]
 8019188:	2208      	movs	r2, #8
 801918a:	569a      	ldrsb	r2, [r3, r2]
 801918c:	68fb      	ldr	r3, [r7, #12]
 801918e:	8adb      	ldrh	r3, [r3, #22]
 8019190:	0019      	movs	r1, r3
 8019192:	0010      	movs	r0, r2
 8019194:	f7fe ff80 	bl	8018098 <GetTimeOnAir>
 8019198:	0002      	movs	r2, r0
 801919a:	0020      	movs	r0, r4
 801919c:	183b      	adds	r3, r7, r0
 801919e:	619a      	str	r2, [r3, #24]

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 80191a0:	183b      	adds	r3, r7, r0
 80191a2:	197a      	adds	r2, r7, r5
 80191a4:	61da      	str	r2, [r3, #28]

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 80191a6:	2657      	movs	r6, #87	; 0x57
 80191a8:	19bc      	adds	r4, r7, r6
 80191aa:	2356      	movs	r3, #86	; 0x56
 80191ac:	18fd      	adds	r5, r7, r3
 80191ae:	2244      	movs	r2, #68	; 0x44
 80191b0:	18ba      	adds	r2, r7, r2
 80191b2:	6839      	ldr	r1, [r7, #0]
 80191b4:	1838      	adds	r0, r7, r0
 80191b6:	687b      	ldr	r3, [r7, #4]
 80191b8:	9301      	str	r3, [sp, #4]
 80191ba:	2355      	movs	r3, #85	; 0x55
 80191bc:	18fb      	adds	r3, r7, r3
 80191be:	9300      	str	r3, [sp, #0]
 80191c0:	002b      	movs	r3, r5
 80191c2:	f7fe fdcf 	bl	8017d64 <RegionCommonIdentifyChannels>
 80191c6:	0003      	movs	r3, r0
 80191c8:	7023      	strb	r3, [r4, #0]
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 80191ca:	19bb      	adds	r3, r7, r6
 80191cc:	781b      	ldrb	r3, [r3, #0]
 80191ce:	2b00      	cmp	r3, #0
 80191d0:	d10e      	bne.n	80191f0 <RegionEU868NextChannel+0x134>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 80191d2:	2356      	movs	r3, #86	; 0x56
 80191d4:	18fb      	adds	r3, r7, r3
 80191d6:	781b      	ldrb	r3, [r3, #0]
 80191d8:	3b01      	subs	r3, #1
 80191da:	0019      	movs	r1, r3
 80191dc:	2000      	movs	r0, #0
 80191de:	f000 f9c1 	bl	8019564 <randr>
 80191e2:	0002      	movs	r2, r0
 80191e4:	2344      	movs	r3, #68	; 0x44
 80191e6:	18fb      	adds	r3, r7, r3
 80191e8:	5c9a      	ldrb	r2, [r3, r2]
 80191ea:	68bb      	ldr	r3, [r7, #8]
 80191ec:	701a      	strb	r2, [r3, #0]
 80191ee:	e00f      	b.n	8019210 <RegionEU868NextChannel+0x154>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 80191f0:	2357      	movs	r3, #87	; 0x57
 80191f2:	18fb      	adds	r3, r7, r3
 80191f4:	781b      	ldrb	r3, [r3, #0]
 80191f6:	2b0c      	cmp	r3, #12
 80191f8:	d10a      	bne.n	8019210 <RegionEU868NextChannel+0x154>
    {
        // Datarate not supported by any channel, restore defaults
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80191fa:	4a0a      	ldr	r2, [pc, #40]	; (8019224 <RegionEU868NextChannel+0x168>)
 80191fc:	239c      	movs	r3, #156	; 0x9c
 80191fe:	005b      	lsls	r3, r3, #1
 8019200:	5ad3      	ldrh	r3, [r2, r3]
 8019202:	2207      	movs	r2, #7
 8019204:	4313      	orrs	r3, r2
 8019206:	b299      	uxth	r1, r3
 8019208:	4a06      	ldr	r2, [pc, #24]	; (8019224 <RegionEU868NextChannel+0x168>)
 801920a:	239c      	movs	r3, #156	; 0x9c
 801920c:	005b      	lsls	r3, r3, #1
 801920e:	52d1      	strh	r1, [r2, r3]
    }
    return status;
 8019210:	2357      	movs	r3, #87	; 0x57
 8019212:	18fb      	adds	r3, r7, r3
 8019214:	781b      	ldrb	r3, [r3, #0]
}
 8019216:	0018      	movs	r0, r3
 8019218:	46bd      	mov	sp, r7
 801921a:	b017      	add	sp, #92	; 0x5c
 801921c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801921e:	46c0      	nop			; (mov r8, r8)
 8019220:	20000e7c 	.word	0x20000e7c
 8019224:	20000d44 	.word	0x20000d44
 8019228:	20000e04 	.word	0x20000e04

0801922c <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 801922c:	b590      	push	{r4, r7, lr}
 801922e:	b085      	sub	sp, #20
 8019230:	af00      	add	r7, sp, #0
 8019232:	6078      	str	r0, [r7, #4]
    uint8_t band = 0;
 8019234:	230c      	movs	r3, #12
 8019236:	18fb      	adds	r3, r7, r3
 8019238:	2200      	movs	r2, #0
 801923a:	701a      	strb	r2, [r3, #0]
    bool drInvalid = false;
 801923c:	230f      	movs	r3, #15
 801923e:	18fb      	adds	r3, r7, r3
 8019240:	2200      	movs	r2, #0
 8019242:	701a      	strb	r2, [r3, #0]
    bool freqInvalid = false;
 8019244:	230e      	movs	r3, #14
 8019246:	18fb      	adds	r3, r7, r3
 8019248:	2200      	movs	r2, #0
 801924a:	701a      	strb	r2, [r3, #0]
    uint8_t id = channelAdd->ChannelId;
 801924c:	210d      	movs	r1, #13
 801924e:	187b      	adds	r3, r7, r1
 8019250:	687a      	ldr	r2, [r7, #4]
 8019252:	7912      	ldrb	r2, [r2, #4]
 8019254:	701a      	strb	r2, [r3, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8019256:	187b      	adds	r3, r7, r1
 8019258:	781b      	ldrb	r3, [r3, #0]
 801925a:	2b02      	cmp	r3, #2
 801925c:	d801      	bhi.n	8019262 <RegionEU868ChannelAdd+0x36>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801925e:	2306      	movs	r3, #6
 8019260:	e0a1      	b.n	80193a6 <RegionEU868ChannelAdd+0x17a>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8019262:	230d      	movs	r3, #13
 8019264:	18fb      	adds	r3, r7, r3
 8019266:	781b      	ldrb	r3, [r3, #0]
 8019268:	2b0f      	cmp	r3, #15
 801926a:	d901      	bls.n	8019270 <RegionEU868ChannelAdd+0x44>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801926c:	2303      	movs	r3, #3
 801926e:	e09a      	b.n	80193a6 <RegionEU868ChannelAdd+0x17a>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8019270:	687b      	ldr	r3, [r7, #4]
 8019272:	681b      	ldr	r3, [r3, #0]
 8019274:	7a1b      	ldrb	r3, [r3, #8]
 8019276:	011b      	lsls	r3, r3, #4
 8019278:	b25b      	sxtb	r3, r3
 801927a:	111b      	asrs	r3, r3, #4
 801927c:	b25b      	sxtb	r3, r3
 801927e:	2207      	movs	r2, #7
 8019280:	2100      	movs	r1, #0
 8019282:	0018      	movs	r0, r3
 8019284:	f7fe f901 	bl	801748a <RegionCommonValueInRange>
 8019288:	1e03      	subs	r3, r0, #0
 801928a:	d103      	bne.n	8019294 <RegionEU868ChannelAdd+0x68>
    {
        drInvalid = true;
 801928c:	230f      	movs	r3, #15
 801928e:	18fb      	adds	r3, r7, r3
 8019290:	2201      	movs	r2, #1
 8019292:	701a      	strb	r2, [r3, #0]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8019294:	687b      	ldr	r3, [r7, #4]
 8019296:	681b      	ldr	r3, [r3, #0]
 8019298:	7a1b      	ldrb	r3, [r3, #8]
 801929a:	b25b      	sxtb	r3, r3
 801929c:	111b      	asrs	r3, r3, #4
 801929e:	b25b      	sxtb	r3, r3
 80192a0:	2207      	movs	r2, #7
 80192a2:	2100      	movs	r1, #0
 80192a4:	0018      	movs	r0, r3
 80192a6:	f7fe f8f0 	bl	801748a <RegionCommonValueInRange>
 80192aa:	1e03      	subs	r3, r0, #0
 80192ac:	d103      	bne.n	80192b6 <RegionEU868ChannelAdd+0x8a>
    {
        drInvalid = true;
 80192ae:	230f      	movs	r3, #15
 80192b0:	18fb      	adds	r3, r7, r3
 80192b2:	2201      	movs	r2, #1
 80192b4:	701a      	strb	r2, [r3, #0]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 80192b6:	687b      	ldr	r3, [r7, #4]
 80192b8:	681b      	ldr	r3, [r3, #0]
 80192ba:	7a1b      	ldrb	r3, [r3, #8]
 80192bc:	011b      	lsls	r3, r3, #4
 80192be:	b25b      	sxtb	r3, r3
 80192c0:	111b      	asrs	r3, r3, #4
 80192c2:	b25a      	sxtb	r2, r3
 80192c4:	687b      	ldr	r3, [r7, #4]
 80192c6:	681b      	ldr	r3, [r3, #0]
 80192c8:	7a1b      	ldrb	r3, [r3, #8]
 80192ca:	b25b      	sxtb	r3, r3
 80192cc:	111b      	asrs	r3, r3, #4
 80192ce:	b25b      	sxtb	r3, r3
 80192d0:	429a      	cmp	r2, r3
 80192d2:	dd03      	ble.n	80192dc <RegionEU868ChannelAdd+0xb0>
    {
        drInvalid = true;
 80192d4:	230f      	movs	r3, #15
 80192d6:	18fb      	adds	r3, r7, r3
 80192d8:	2201      	movs	r2, #1
 80192da:	701a      	strb	r2, [r3, #0]
    }

    // Check frequency
    if( freqInvalid == false )
 80192dc:	240e      	movs	r4, #14
 80192de:	193b      	adds	r3, r7, r4
 80192e0:	781b      	ldrb	r3, [r3, #0]
 80192e2:	2201      	movs	r2, #1
 80192e4:	4053      	eors	r3, r2
 80192e6:	b2db      	uxtb	r3, r3
 80192e8:	2b00      	cmp	r3, #0
 80192ea:	d012      	beq.n	8019312 <RegionEU868ChannelAdd+0xe6>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 80192ec:	687b      	ldr	r3, [r7, #4]
 80192ee:	681b      	ldr	r3, [r3, #0]
 80192f0:	681b      	ldr	r3, [r3, #0]
 80192f2:	220c      	movs	r2, #12
 80192f4:	18ba      	adds	r2, r7, r2
 80192f6:	0011      	movs	r1, r2
 80192f8:	0018      	movs	r0, r3
 80192fa:	f7fe fe55 	bl	8017fa8 <VerifyRfFreq>
 80192fe:	0003      	movs	r3, r0
 8019300:	001a      	movs	r2, r3
 8019302:	2301      	movs	r3, #1
 8019304:	4053      	eors	r3, r2
 8019306:	b2db      	uxtb	r3, r3
 8019308:	2b00      	cmp	r3, #0
 801930a:	d002      	beq.n	8019312 <RegionEU868ChannelAdd+0xe6>
        {
            freqInvalid = true;
 801930c:	193b      	adds	r3, r7, r4
 801930e:	2201      	movs	r2, #1
 8019310:	701a      	strb	r2, [r3, #0]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8019312:	230f      	movs	r3, #15
 8019314:	18fb      	adds	r3, r7, r3
 8019316:	781b      	ldrb	r3, [r3, #0]
 8019318:	2b00      	cmp	r3, #0
 801931a:	d006      	beq.n	801932a <RegionEU868ChannelAdd+0xfe>
 801931c:	230e      	movs	r3, #14
 801931e:	18fb      	adds	r3, r7, r3
 8019320:	781b      	ldrb	r3, [r3, #0]
 8019322:	2b00      	cmp	r3, #0
 8019324:	d001      	beq.n	801932a <RegionEU868ChannelAdd+0xfe>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8019326:	2306      	movs	r3, #6
 8019328:	e03d      	b.n	80193a6 <RegionEU868ChannelAdd+0x17a>
    }
    if( drInvalid == true )
 801932a:	230f      	movs	r3, #15
 801932c:	18fb      	adds	r3, r7, r3
 801932e:	781b      	ldrb	r3, [r3, #0]
 8019330:	2b00      	cmp	r3, #0
 8019332:	d001      	beq.n	8019338 <RegionEU868ChannelAdd+0x10c>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8019334:	2305      	movs	r3, #5
 8019336:	e036      	b.n	80193a6 <RegionEU868ChannelAdd+0x17a>
    }
    if( freqInvalid == true )
 8019338:	230e      	movs	r3, #14
 801933a:	18fb      	adds	r3, r7, r3
 801933c:	781b      	ldrb	r3, [r3, #0]
 801933e:	2b00      	cmp	r3, #0
 8019340:	d001      	beq.n	8019346 <RegionEU868ChannelAdd+0x11a>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8019342:	2304      	movs	r3, #4
 8019344:	e02f      	b.n	80193a6 <RegionEU868ChannelAdd+0x17a>
    }

    memcpy1( ( uint8_t* ) &(NvmCtx.Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( NvmCtx.Channels[id] ) );
 8019346:	240d      	movs	r4, #13
 8019348:	193b      	adds	r3, r7, r4
 801934a:	781a      	ldrb	r2, [r3, #0]
 801934c:	0013      	movs	r3, r2
 801934e:	005b      	lsls	r3, r3, #1
 8019350:	189b      	adds	r3, r3, r2
 8019352:	009b      	lsls	r3, r3, #2
 8019354:	4a16      	ldr	r2, [pc, #88]	; (80193b0 <RegionEU868ChannelAdd+0x184>)
 8019356:	1898      	adds	r0, r3, r2
 8019358:	687b      	ldr	r3, [r7, #4]
 801935a:	681b      	ldr	r3, [r3, #0]
 801935c:	220c      	movs	r2, #12
 801935e:	0019      	movs	r1, r3
 8019360:	f000 f916 	bl	8019590 <memcpy1>
    NvmCtx.Channels[id].Band = band;
 8019364:	193b      	adds	r3, r7, r4
 8019366:	781a      	ldrb	r2, [r3, #0]
 8019368:	230c      	movs	r3, #12
 801936a:	18fb      	adds	r3, r7, r3
 801936c:	7818      	ldrb	r0, [r3, #0]
 801936e:	4910      	ldr	r1, [pc, #64]	; (80193b0 <RegionEU868ChannelAdd+0x184>)
 8019370:	0013      	movs	r3, r2
 8019372:	005b      	lsls	r3, r3, #1
 8019374:	189b      	adds	r3, r3, r2
 8019376:	009b      	lsls	r3, r3, #2
 8019378:	18cb      	adds	r3, r1, r3
 801937a:	3309      	adds	r3, #9
 801937c:	1c02      	adds	r2, r0, #0
 801937e:	701a      	strb	r2, [r3, #0]
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
 8019380:	4a0b      	ldr	r2, [pc, #44]	; (80193b0 <RegionEU868ChannelAdd+0x184>)
 8019382:	239c      	movs	r3, #156	; 0x9c
 8019384:	005b      	lsls	r3, r3, #1
 8019386:	5ad3      	ldrh	r3, [r2, r3]
 8019388:	b21a      	sxth	r2, r3
 801938a:	193b      	adds	r3, r7, r4
 801938c:	781b      	ldrb	r3, [r3, #0]
 801938e:	2101      	movs	r1, #1
 8019390:	4099      	lsls	r1, r3
 8019392:	000b      	movs	r3, r1
 8019394:	b21b      	sxth	r3, r3
 8019396:	4313      	orrs	r3, r2
 8019398:	b21b      	sxth	r3, r3
 801939a:	b299      	uxth	r1, r3
 801939c:	4a04      	ldr	r2, [pc, #16]	; (80193b0 <RegionEU868ChannelAdd+0x184>)
 801939e:	239c      	movs	r3, #156	; 0x9c
 80193a0:	005b      	lsls	r3, r3, #1
 80193a2:	52d1      	strh	r1, [r2, r3]
    return LORAMAC_STATUS_OK;
 80193a4:	2300      	movs	r3, #0
}
 80193a6:	0018      	movs	r0, r3
 80193a8:	46bd      	mov	sp, r7
 80193aa:	b005      	add	sp, #20
 80193ac:	bd90      	pop	{r4, r7, pc}
 80193ae:	46c0      	nop			; (mov r8, r8)
 80193b0:	20000d44 	.word	0x20000d44

080193b4 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 80193b4:	b590      	push	{r4, r7, lr}
 80193b6:	b087      	sub	sp, #28
 80193b8:	af00      	add	r7, sp, #0
 80193ba:	6078      	str	r0, [r7, #4]
    uint8_t id = channelRemove->ChannelId;
 80193bc:	2117      	movs	r1, #23
 80193be:	187b      	adds	r3, r7, r1
 80193c0:	687a      	ldr	r2, [r7, #4]
 80193c2:	7812      	ldrb	r2, [r2, #0]
 80193c4:	701a      	strb	r2, [r3, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 80193c6:	187b      	adds	r3, r7, r1
 80193c8:	781b      	ldrb	r3, [r3, #0]
 80193ca:	2b02      	cmp	r3, #2
 80193cc:	d801      	bhi.n	80193d2 <RegionEU868ChannelsRemove+0x1e>
    {
        return false;
 80193ce:	2300      	movs	r3, #0
 80193d0:	e015      	b.n	80193fe <RegionEU868ChannelsRemove+0x4a>
    }

    // Remove the channel from the list of channels
    NvmCtx.Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 80193d2:	2417      	movs	r4, #23
 80193d4:	193b      	adds	r3, r7, r4
 80193d6:	781a      	ldrb	r2, [r3, #0]
 80193d8:	490b      	ldr	r1, [pc, #44]	; (8019408 <RegionEU868ChannelsRemove+0x54>)
 80193da:	0013      	movs	r3, r2
 80193dc:	005b      	lsls	r3, r3, #1
 80193de:	189b      	adds	r3, r3, r2
 80193e0:	009b      	lsls	r3, r3, #2
 80193e2:	18cb      	adds	r3, r1, r3
 80193e4:	220c      	movs	r2, #12
 80193e6:	2100      	movs	r1, #0
 80193e8:	0018      	movs	r0, r3
 80193ea:	f004 fde2 	bl	801dfb2 <memset>

    return RegionCommonChanDisable( NvmCtx.ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 80193ee:	193b      	adds	r3, r7, r4
 80193f0:	7819      	ldrb	r1, [r3, #0]
 80193f2:	4b06      	ldr	r3, [pc, #24]	; (801940c <RegionEU868ChannelsRemove+0x58>)
 80193f4:	2210      	movs	r2, #16
 80193f6:	0018      	movs	r0, r3
 80193f8:	f7fe f86d 	bl	80174d6 <RegionCommonChanDisable>
 80193fc:	0003      	movs	r3, r0
}
 80193fe:	0018      	movs	r0, r3
 8019400:	46bd      	mov	sp, r7
 8019402:	b007      	add	sp, #28
 8019404:	bd90      	pop	{r4, r7, pc}
 8019406:	46c0      	nop			; (mov r8, r8)
 8019408:	20000d44 	.word	0x20000d44
 801940c:	20000e7c 	.word	0x20000e7c

08019410 <RegionEU868SetContinuousWave>:

void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8019410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019412:	b085      	sub	sp, #20
 8019414:	af00      	add	r7, sp, #0
 8019416:	6078      	str	r0, [r7, #4]
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 8019418:	687b      	ldr	r3, [r7, #4]
 801941a:	2002      	movs	r0, #2
 801941c:	5618      	ldrsb	r0, [r3, r0]
 801941e:	687b      	ldr	r3, [r7, #4]
 8019420:	781b      	ldrb	r3, [r3, #0]
 8019422:	0019      	movs	r1, r3
 8019424:	4a23      	ldr	r2, [pc, #140]	; (80194b4 <RegionEU868SetContinuousWave+0xa4>)
 8019426:	000b      	movs	r3, r1
 8019428:	005b      	lsls	r3, r3, #1
 801942a:	185b      	adds	r3, r3, r1
 801942c:	009b      	lsls	r3, r3, #2
 801942e:	18d3      	adds	r3, r2, r3
 8019430:	3309      	adds	r3, #9
 8019432:	781b      	ldrb	r3, [r3, #0]
 8019434:	001c      	movs	r4, r3
 8019436:	4a1f      	ldr	r2, [pc, #124]	; (80194b4 <RegionEU868SetContinuousWave+0xa4>)
 8019438:	21c2      	movs	r1, #194	; 0xc2
 801943a:	0023      	movs	r3, r4
 801943c:	009b      	lsls	r3, r3, #2
 801943e:	191b      	adds	r3, r3, r4
 8019440:	009b      	lsls	r3, r3, #2
 8019442:	18d3      	adds	r3, r2, r3
 8019444:	185b      	adds	r3, r3, r1
 8019446:	2100      	movs	r1, #0
 8019448:	5659      	ldrsb	r1, [r3, r1]
 801944a:	687b      	ldr	r3, [r7, #4]
 801944c:	2201      	movs	r2, #1
 801944e:	569a      	ldrsb	r2, [r3, r2]
 8019450:	260f      	movs	r6, #15
 8019452:	19bc      	adds	r4, r7, r6
 8019454:	4b18      	ldr	r3, [pc, #96]	; (80194b8 <RegionEU868SetContinuousWave+0xa8>)
 8019456:	f7fe fd7f 	bl	8017f58 <LimitTxPower>
 801945a:	0003      	movs	r3, r0
 801945c:	7023      	strb	r3, [r4, #0]
    int8_t phyTxPower = 0;
 801945e:	200e      	movs	r0, #14
 8019460:	183b      	adds	r3, r7, r0
 8019462:	2200      	movs	r2, #0
 8019464:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = NvmCtx.Channels[continuousWave->Channel].Frequency;
 8019466:	687b      	ldr	r3, [r7, #4]
 8019468:	781b      	ldrb	r3, [r3, #0]
 801946a:	0019      	movs	r1, r3
 801946c:	4a11      	ldr	r2, [pc, #68]	; (80194b4 <RegionEU868SetContinuousWave+0xa4>)
 801946e:	000b      	movs	r3, r1
 8019470:	005b      	lsls	r3, r3, #1
 8019472:	185b      	adds	r3, r3, r1
 8019474:	009b      	lsls	r3, r3, #2
 8019476:	589b      	ldr	r3, [r3, r2]
 8019478:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 801947a:	687b      	ldr	r3, [r7, #4]
 801947c:	6859      	ldr	r1, [r3, #4]
 801947e:	687b      	ldr	r3, [r7, #4]
 8019480:	689a      	ldr	r2, [r3, #8]
 8019482:	0005      	movs	r5, r0
 8019484:	183c      	adds	r4, r7, r0
 8019486:	19bb      	adds	r3, r7, r6
 8019488:	781b      	ldrb	r3, [r3, #0]
 801948a:	b25b      	sxtb	r3, r3
 801948c:	0018      	movs	r0, r3
 801948e:	f7fe fb41 	bl	8017b14 <RegionCommonComputeTxPower>
 8019492:	0003      	movs	r3, r0
 8019494:	7023      	strb	r3, [r4, #0]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8019496:	4b09      	ldr	r3, [pc, #36]	; (80194bc <RegionEU868SetContinuousWave+0xac>)
 8019498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801949a:	687a      	ldr	r2, [r7, #4]
 801949c:	8994      	ldrh	r4, [r2, #12]
 801949e:	197a      	adds	r2, r7, r5
 80194a0:	2100      	movs	r1, #0
 80194a2:	5651      	ldrsb	r1, [r2, r1]
 80194a4:	68b8      	ldr	r0, [r7, #8]
 80194a6:	0022      	movs	r2, r4
 80194a8:	4798      	blx	r3
}
 80194aa:	46c0      	nop			; (mov r8, r8)
 80194ac:	46bd      	mov	sp, r7
 80194ae:	b005      	add	sp, #20
 80194b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80194b2:	46c0      	nop			; (mov r8, r8)
 80194b4:	20000d44 	.word	0x20000d44
 80194b8:	20000e7c 	.word	0x20000e7c
 80194bc:	0801fe28 	.word	0x0801fe28

080194c0 <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80194c0:	b590      	push	{r4, r7, lr}
 80194c2:	b085      	sub	sp, #20
 80194c4:	af00      	add	r7, sp, #0
 80194c6:	0004      	movs	r4, r0
 80194c8:	0008      	movs	r0, r1
 80194ca:	0011      	movs	r1, r2
 80194cc:	1dfb      	adds	r3, r7, #7
 80194ce:	1c22      	adds	r2, r4, #0
 80194d0:	701a      	strb	r2, [r3, #0]
 80194d2:	1dbb      	adds	r3, r7, #6
 80194d4:	1c02      	adds	r2, r0, #0
 80194d6:	701a      	strb	r2, [r3, #0]
 80194d8:	1d7b      	adds	r3, r7, #5
 80194da:	1c0a      	adds	r2, r1, #0
 80194dc:	701a      	strb	r2, [r3, #0]
    int8_t datarate = dr - drOffset;
 80194de:	1dbb      	adds	r3, r7, #6
 80194e0:	781a      	ldrb	r2, [r3, #0]
 80194e2:	1d7b      	adds	r3, r7, #5
 80194e4:	781b      	ldrb	r3, [r3, #0]
 80194e6:	1ad3      	subs	r3, r2, r3
 80194e8:	b2da      	uxtb	r2, r3
 80194ea:	210f      	movs	r1, #15
 80194ec:	187b      	adds	r3, r7, r1
 80194ee:	701a      	strb	r2, [r3, #0]

    if( datarate < 0 )
 80194f0:	000a      	movs	r2, r1
 80194f2:	18bb      	adds	r3, r7, r2
 80194f4:	781b      	ldrb	r3, [r3, #0]
 80194f6:	2b7f      	cmp	r3, #127	; 0x7f
 80194f8:	d902      	bls.n	8019500 <RegionEU868ApplyDrOffset+0x40>
    {
        datarate = DR_0;
 80194fa:	18bb      	adds	r3, r7, r2
 80194fc:	2200      	movs	r2, #0
 80194fe:	701a      	strb	r2, [r3, #0]
    }
    return datarate;
 8019500:	230f      	movs	r3, #15
 8019502:	18fb      	adds	r3, r7, r3
 8019504:	781b      	ldrb	r3, [r3, #0]
}
 8019506:	0018      	movs	r0, r3
 8019508:	46bd      	mov	sp, r7
 801950a:	b005      	add	sp, #20
 801950c:	bd90      	pop	{r4, r7, pc}
	...

08019510 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8019510:	b580      	push	{r7, lr}
 8019512:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8019514:	4b08      	ldr	r3, [pc, #32]	; (8019538 <rand1+0x28>)
 8019516:	681b      	ldr	r3, [r3, #0]
 8019518:	4a08      	ldr	r2, [pc, #32]	; (801953c <rand1+0x2c>)
 801951a:	4353      	muls	r3, r2
 801951c:	4a08      	ldr	r2, [pc, #32]	; (8019540 <rand1+0x30>)
 801951e:	189a      	adds	r2, r3, r2
 8019520:	4b05      	ldr	r3, [pc, #20]	; (8019538 <rand1+0x28>)
 8019522:	601a      	str	r2, [r3, #0]
 8019524:	4b04      	ldr	r3, [pc, #16]	; (8019538 <rand1+0x28>)
 8019526:	681b      	ldr	r3, [r3, #0]
 8019528:	4906      	ldr	r1, [pc, #24]	; (8019544 <rand1+0x34>)
 801952a:	0018      	movs	r0, r3
 801952c:	f7e6 fe7a 	bl	8000224 <__aeabi_uidivmod>
 8019530:	000b      	movs	r3, r1
}
 8019532:	0018      	movs	r0, r3
 8019534:	46bd      	mov	sp, r7
 8019536:	bd80      	pop	{r7, pc}
 8019538:	200001ac 	.word	0x200001ac
 801953c:	41c64e6d 	.word	0x41c64e6d
 8019540:	00003039 	.word	0x00003039
 8019544:	7fffffff 	.word	0x7fffffff

08019548 <srand1>:

void srand1( uint32_t seed )
{
 8019548:	b580      	push	{r7, lr}
 801954a:	b082      	sub	sp, #8
 801954c:	af00      	add	r7, sp, #0
 801954e:	6078      	str	r0, [r7, #4]
    next = seed;
 8019550:	4b03      	ldr	r3, [pc, #12]	; (8019560 <srand1+0x18>)
 8019552:	687a      	ldr	r2, [r7, #4]
 8019554:	601a      	str	r2, [r3, #0]
}
 8019556:	46c0      	nop			; (mov r8, r8)
 8019558:	46bd      	mov	sp, r7
 801955a:	b002      	add	sp, #8
 801955c:	bd80      	pop	{r7, pc}
 801955e:	46c0      	nop			; (mov r8, r8)
 8019560:	200001ac 	.word	0x200001ac

08019564 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8019564:	b580      	push	{r7, lr}
 8019566:	b082      	sub	sp, #8
 8019568:	af00      	add	r7, sp, #0
 801956a:	6078      	str	r0, [r7, #4]
 801956c:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 801956e:	f7ff ffcf 	bl	8019510 <rand1>
 8019572:	683a      	ldr	r2, [r7, #0]
 8019574:	687b      	ldr	r3, [r7, #4]
 8019576:	1ad3      	subs	r3, r2, r3
 8019578:	3301      	adds	r3, #1
 801957a:	0019      	movs	r1, r3
 801957c:	f7e6 ff3c 	bl	80003f8 <__aeabi_idivmod>
 8019580:	000b      	movs	r3, r1
 8019582:	001a      	movs	r2, r3
 8019584:	687b      	ldr	r3, [r7, #4]
 8019586:	18d3      	adds	r3, r2, r3
}
 8019588:	0018      	movs	r0, r3
 801958a:	46bd      	mov	sp, r7
 801958c:	b002      	add	sp, #8
 801958e:	bd80      	pop	{r7, pc}

08019590 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8019590:	b580      	push	{r7, lr}
 8019592:	b084      	sub	sp, #16
 8019594:	af00      	add	r7, sp, #0
 8019596:	60f8      	str	r0, [r7, #12]
 8019598:	60b9      	str	r1, [r7, #8]
 801959a:	1dbb      	adds	r3, r7, #6
 801959c:	801a      	strh	r2, [r3, #0]
    while( size-- )
 801959e:	e007      	b.n	80195b0 <memcpy1+0x20>
    {
        *dst++ = *src++;
 80195a0:	68ba      	ldr	r2, [r7, #8]
 80195a2:	1c53      	adds	r3, r2, #1
 80195a4:	60bb      	str	r3, [r7, #8]
 80195a6:	68fb      	ldr	r3, [r7, #12]
 80195a8:	1c59      	adds	r1, r3, #1
 80195aa:	60f9      	str	r1, [r7, #12]
 80195ac:	7812      	ldrb	r2, [r2, #0]
 80195ae:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80195b0:	1dbb      	adds	r3, r7, #6
 80195b2:	881b      	ldrh	r3, [r3, #0]
 80195b4:	1dba      	adds	r2, r7, #6
 80195b6:	1e59      	subs	r1, r3, #1
 80195b8:	8011      	strh	r1, [r2, #0]
 80195ba:	2b00      	cmp	r3, #0
 80195bc:	d1f0      	bne.n	80195a0 <memcpy1+0x10>
    }
}
 80195be:	46c0      	nop			; (mov r8, r8)
 80195c0:	46c0      	nop			; (mov r8, r8)
 80195c2:	46bd      	mov	sp, r7
 80195c4:	b004      	add	sp, #16
 80195c6:	bd80      	pop	{r7, pc}

080195c8 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 80195c8:	b580      	push	{r7, lr}
 80195ca:	b084      	sub	sp, #16
 80195cc:	af00      	add	r7, sp, #0
 80195ce:	60f8      	str	r0, [r7, #12]
 80195d0:	60b9      	str	r1, [r7, #8]
 80195d2:	1dbb      	adds	r3, r7, #6
 80195d4:	801a      	strh	r2, [r3, #0]
    dst = dst + ( size - 1 );
 80195d6:	1dbb      	adds	r3, r7, #6
 80195d8:	881b      	ldrh	r3, [r3, #0]
 80195da:	3b01      	subs	r3, #1
 80195dc:	68fa      	ldr	r2, [r7, #12]
 80195de:	18d3      	adds	r3, r2, r3
 80195e0:	60fb      	str	r3, [r7, #12]
    while( size-- )
 80195e2:	e007      	b.n	80195f4 <memcpyr+0x2c>
    {
        *dst-- = *src++;
 80195e4:	68ba      	ldr	r2, [r7, #8]
 80195e6:	1c53      	adds	r3, r2, #1
 80195e8:	60bb      	str	r3, [r7, #8]
 80195ea:	68fb      	ldr	r3, [r7, #12]
 80195ec:	1e59      	subs	r1, r3, #1
 80195ee:	60f9      	str	r1, [r7, #12]
 80195f0:	7812      	ldrb	r2, [r2, #0]
 80195f2:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80195f4:	1dbb      	adds	r3, r7, #6
 80195f6:	881b      	ldrh	r3, [r3, #0]
 80195f8:	1dba      	adds	r2, r7, #6
 80195fa:	1e59      	subs	r1, r3, #1
 80195fc:	8011      	strh	r1, [r2, #0]
 80195fe:	2b00      	cmp	r3, #0
 8019600:	d1f0      	bne.n	80195e4 <memcpyr+0x1c>
    }
}
 8019602:	46c0      	nop			; (mov r8, r8)
 8019604:	46c0      	nop			; (mov r8, r8)
 8019606:	46bd      	mov	sp, r7
 8019608:	b004      	add	sp, #16
 801960a:	bd80      	pop	{r7, pc}

0801960c <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 801960c:	b580      	push	{r7, lr}
 801960e:	b082      	sub	sp, #8
 8019610:	af00      	add	r7, sp, #0
 8019612:	6078      	str	r0, [r7, #4]
 8019614:	0008      	movs	r0, r1
 8019616:	0011      	movs	r1, r2
 8019618:	1cfb      	adds	r3, r7, #3
 801961a:	1c02      	adds	r2, r0, #0
 801961c:	701a      	strb	r2, [r3, #0]
 801961e:	003b      	movs	r3, r7
 8019620:	1c0a      	adds	r2, r1, #0
 8019622:	801a      	strh	r2, [r3, #0]
    while( size-- )
 8019624:	e005      	b.n	8019632 <memset1+0x26>
    {
        *dst++ = value;
 8019626:	687b      	ldr	r3, [r7, #4]
 8019628:	1c5a      	adds	r2, r3, #1
 801962a:	607a      	str	r2, [r7, #4]
 801962c:	1cfa      	adds	r2, r7, #3
 801962e:	7812      	ldrb	r2, [r2, #0]
 8019630:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8019632:	003b      	movs	r3, r7
 8019634:	881b      	ldrh	r3, [r3, #0]
 8019636:	003a      	movs	r2, r7
 8019638:	1e59      	subs	r1, r3, #1
 801963a:	8011      	strh	r1, [r2, #0]
 801963c:	2b00      	cmp	r3, #0
 801963e:	d1f2      	bne.n	8019626 <memset1+0x1a>
    }
}
 8019640:	46c0      	nop			; (mov r8, r8)
 8019642:	46c0      	nop			; (mov r8, r8)
 8019644:	46bd      	mov	sp, r7
 8019646:	b002      	add	sp, #8
 8019648:	bd80      	pop	{r7, pc}
	...

0801964c <SX1276Init>:
/*
 * Radio driver functions implementation
 */

uint32_t SX1276Init( RadioEvents_t *events )
{
 801964c:	b590      	push	{r4, r7, lr}
 801964e:	b087      	sub	sp, #28
 8019650:	af02      	add	r7, sp, #8
 8019652:	6078      	str	r0, [r7, #4]
    uint8_t i;

    RadioEvents = events;
 8019654:	4b34      	ldr	r3, [pc, #208]	; (8019728 <SX1276Init+0xdc>)
 8019656:	687a      	ldr	r2, [r7, #4]
 8019658:	601a      	str	r2, [r3, #0]

    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 801965a:	4b34      	ldr	r3, [pc, #208]	; (801972c <SX1276Init+0xe0>)
 801965c:	2201      	movs	r2, #1
 801965e:	4251      	negs	r1, r2
 8019660:	4833      	ldr	r0, [pc, #204]	; (8019730 <SX1276Init+0xe4>)
 8019662:	2200      	movs	r2, #0
 8019664:	9200      	str	r2, [sp, #0]
 8019666:	2200      	movs	r2, #0
 8019668:	f003 fa9a 	bl	801cba0 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 801966c:	4b2f      	ldr	r3, [pc, #188]	; (801972c <SX1276Init+0xe0>)
 801966e:	2201      	movs	r2, #1
 8019670:	4251      	negs	r1, r2
 8019672:	4830      	ldr	r0, [pc, #192]	; (8019734 <SX1276Init+0xe8>)
 8019674:	2200      	movs	r2, #0
 8019676:	9200      	str	r2, [sp, #0]
 8019678:	2200      	movs	r2, #0
 801967a:	f003 fa91 	bl	801cba0 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 801967e:	4b2b      	ldr	r3, [pc, #172]	; (801972c <SX1276Init+0xe0>)
 8019680:	2201      	movs	r2, #1
 8019682:	4251      	negs	r1, r2
 8019684:	482c      	ldr	r0, [pc, #176]	; (8019738 <SX1276Init+0xec>)
 8019686:	2200      	movs	r2, #0
 8019688:	9200      	str	r2, [sp, #0]
 801968a:	2200      	movs	r2, #0
 801968c:	f003 fa88 	bl	801cba0 <UTIL_TIMER_Create>

    Sx_Board_SetXO( SET );
 8019690:	2001      	movs	r0, #1
 8019692:	f7ec fa69 	bl	8005b68 <CMWX1ZZABZ0XX_RADIO_SetXO>

    SX1276Reset( );
 8019696:	f001 fbf1 	bl	801ae7c <SX1276Reset>

    RxChainCalibration( );
 801969a:	f000 f937 	bl	801990c <RxChainCalibration>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 801969e:	2000      	movs	r0, #0
 80196a0:	f001 fbf3 	bl	801ae8a <SX1276SetOpMode>

    Sx_Board_IoIrqInit( DioIrq );
 80196a4:	4b25      	ldr	r3, [pc, #148]	; (801973c <SX1276Init+0xf0>)
 80196a6:	0018      	movs	r0, r3
 80196a8:	f7ec fbbe 	bl	8005e28 <CMWX1ZZABZ0XX_RADIO_IoIrqInit>

    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 80196ac:	230f      	movs	r3, #15
 80196ae:	18fb      	adds	r3, r7, r3
 80196b0:	2200      	movs	r2, #0
 80196b2:	701a      	strb	r2, [r3, #0]
 80196b4:	e025      	b.n	8019702 <SX1276Init+0xb6>
    {
        SX1276SetModem( RadioRegsInit[i].Modem );
 80196b6:	240f      	movs	r4, #15
 80196b8:	193b      	adds	r3, r7, r4
 80196ba:	781a      	ldrb	r2, [r3, #0]
 80196bc:	4920      	ldr	r1, [pc, #128]	; (8019740 <SX1276Init+0xf4>)
 80196be:	0013      	movs	r3, r2
 80196c0:	005b      	lsls	r3, r3, #1
 80196c2:	189b      	adds	r3, r3, r2
 80196c4:	5c5b      	ldrb	r3, [r3, r1]
 80196c6:	0018      	movs	r0, r3
 80196c8:	f001 fc4c 	bl	801af64 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 80196cc:	193b      	adds	r3, r7, r4
 80196ce:	781a      	ldrb	r2, [r3, #0]
 80196d0:	491b      	ldr	r1, [pc, #108]	; (8019740 <SX1276Init+0xf4>)
 80196d2:	0013      	movs	r3, r2
 80196d4:	005b      	lsls	r3, r3, #1
 80196d6:	189b      	adds	r3, r3, r2
 80196d8:	18cb      	adds	r3, r1, r3
 80196da:	3301      	adds	r3, #1
 80196dc:	781b      	ldrb	r3, [r3, #0]
 80196de:	0018      	movs	r0, r3
 80196e0:	193b      	adds	r3, r7, r4
 80196e2:	781a      	ldrb	r2, [r3, #0]
 80196e4:	4916      	ldr	r1, [pc, #88]	; (8019740 <SX1276Init+0xf4>)
 80196e6:	0013      	movs	r3, r2
 80196e8:	005b      	lsls	r3, r3, #1
 80196ea:	189b      	adds	r3, r3, r2
 80196ec:	18cb      	adds	r3, r1, r3
 80196ee:	3302      	adds	r3, #2
 80196f0:	781b      	ldrb	r3, [r3, #0]
 80196f2:	0019      	movs	r1, r3
 80196f4:	f001 fc90 	bl	801b018 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 80196f8:	193b      	adds	r3, r7, r4
 80196fa:	781a      	ldrb	r2, [r3, #0]
 80196fc:	193b      	adds	r3, r7, r4
 80196fe:	3201      	adds	r2, #1
 8019700:	701a      	strb	r2, [r3, #0]
 8019702:	230f      	movs	r3, #15
 8019704:	18fb      	adds	r3, r7, r3
 8019706:	781b      	ldrb	r3, [r3, #0]
 8019708:	2b0f      	cmp	r3, #15
 801970a:	d9d4      	bls.n	80196b6 <SX1276Init+0x6a>
    }

    SX1276SetModem( MODEM_FSK );
 801970c:	2000      	movs	r0, #0
 801970e:	f001 fc29 	bl	801af64 <SX1276SetModem>

    SX1276.Settings.State = RF_IDLE;
 8019712:	4b0c      	ldr	r3, [pc, #48]	; (8019744 <SX1276Init+0xf8>)
 8019714:	2200      	movs	r2, #0
 8019716:	711a      	strb	r2, [r3, #4]

    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
 8019718:	f7ec fa20 	bl	8005b5c <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>
 801971c:	0003      	movs	r3, r0
 801971e:	3302      	adds	r3, #2
}
 8019720:	0018      	movs	r0, r3
 8019722:	46bd      	mov	sp, r7
 8019724:	b005      	add	sp, #20
 8019726:	bd90      	pop	{r4, r7, pc}
 8019728:	20000e80 	.word	0x20000e80
 801972c:	0801b491 	.word	0x0801b491
 8019730:	2000174c 	.word	0x2000174c
 8019734:	200017e4 	.word	0x200017e4
 8019738:	20001764 	.word	0x20001764
 801973c:	200001b0 	.word	0x200001b0
 8019740:	0801fe94 	.word	0x0801fe94
 8019744:	2000177c 	.word	0x2000177c

08019748 <SX1276GetStatus>:

RadioState_t SX1276GetStatus( void )
{
 8019748:	b580      	push	{r7, lr}
 801974a:	af00      	add	r7, sp, #0
    return SX1276.Settings.State;
 801974c:	4b02      	ldr	r3, [pc, #8]	; (8019758 <SX1276GetStatus+0x10>)
 801974e:	791b      	ldrb	r3, [r3, #4]
}
 8019750:	0018      	movs	r0, r3
 8019752:	46bd      	mov	sp, r7
 8019754:	bd80      	pop	{r7, pc}
 8019756:	46c0      	nop			; (mov r8, r8)
 8019758:	2000177c 	.word	0x2000177c

0801975c <SX1276SetChannel>:

void SX1276SetChannel( uint32_t freq )
{
 801975c:	b590      	push	{r4, r7, lr}
 801975e:	b087      	sub	sp, #28
 8019760:	af00      	add	r7, sp, #0
 8019762:	6078      	str	r0, [r7, #4]
    uint32_t channel;

    SX1276.Settings.Channel = freq;
 8019764:	4b1d      	ldr	r3, [pc, #116]	; (80197dc <SX1276SetChannel+0x80>)
 8019766:	687a      	ldr	r2, [r7, #4]
 8019768:	609a      	str	r2, [r3, #8]

    SX_FREQ_TO_CHANNEL( channel, freq );
 801976a:	687b      	ldr	r3, [r7, #4]
 801976c:	491c      	ldr	r1, [pc, #112]	; (80197e0 <SX1276SetChannel+0x84>)
 801976e:	0018      	movs	r0, r3
 8019770:	f7e6 fcd2 	bl	8000118 <__udivsi3>
 8019774:	0003      	movs	r3, r0
 8019776:	617b      	str	r3, [r7, #20]
 8019778:	6979      	ldr	r1, [r7, #20]
 801977a:	000b      	movs	r3, r1
 801977c:	015b      	lsls	r3, r3, #5
 801977e:	1a5b      	subs	r3, r3, r1
 8019780:	019a      	lsls	r2, r3, #6
 8019782:	1ad2      	subs	r2, r2, r3
 8019784:	00d2      	lsls	r2, r2, #3
 8019786:	1853      	adds	r3, r2, r1
 8019788:	687a      	ldr	r2, [r7, #4]
 801978a:	1ad3      	subs	r3, r2, r3
 801978c:	613b      	str	r3, [r7, #16]
 801978e:	697b      	ldr	r3, [r7, #20]
 8019790:	021c      	lsls	r4, r3, #8
 8019792:	693b      	ldr	r3, [r7, #16]
 8019794:	021b      	lsls	r3, r3, #8
 8019796:	4a13      	ldr	r2, [pc, #76]	; (80197e4 <SX1276SetChannel+0x88>)
 8019798:	4694      	mov	ip, r2
 801979a:	4463      	add	r3, ip
 801979c:	4910      	ldr	r1, [pc, #64]	; (80197e0 <SX1276SetChannel+0x84>)
 801979e:	0018      	movs	r0, r3
 80197a0:	f7e6 fcba 	bl	8000118 <__udivsi3>
 80197a4:	0003      	movs	r3, r0
 80197a6:	18e3      	adds	r3, r4, r3
 80197a8:	60fb      	str	r3, [r7, #12]

    SX1276Write( REG_FRFMSB, ( uint8_t )( ( channel >> 16 ) & 0xFF ) );
 80197aa:	68fb      	ldr	r3, [r7, #12]
 80197ac:	0c1b      	lsrs	r3, r3, #16
 80197ae:	b2db      	uxtb	r3, r3
 80197b0:	0019      	movs	r1, r3
 80197b2:	2006      	movs	r0, #6
 80197b4:	f001 fc30 	bl	801b018 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( channel >> 8 ) & 0xFF ) );
 80197b8:	68fb      	ldr	r3, [r7, #12]
 80197ba:	0a1b      	lsrs	r3, r3, #8
 80197bc:	b2db      	uxtb	r3, r3
 80197be:	0019      	movs	r1, r3
 80197c0:	2007      	movs	r0, #7
 80197c2:	f001 fc29 	bl	801b018 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( channel & 0xFF ) );
 80197c6:	68fb      	ldr	r3, [r7, #12]
 80197c8:	b2db      	uxtb	r3, r3
 80197ca:	0019      	movs	r1, r3
 80197cc:	2008      	movs	r0, #8
 80197ce:	f001 fc23 	bl	801b018 <SX1276Write>
}
 80197d2:	46c0      	nop			; (mov r8, r8)
 80197d4:	46bd      	mov	sp, r7
 80197d6:	b007      	add	sp, #28
 80197d8:	bd90      	pop	{r4, r7, pc}
 80197da:	46c0      	nop			; (mov r8, r8)
 80197dc:	2000177c 	.word	0x2000177c
 80197e0:	00003d09 	.word	0x00003d09
 80197e4:	00001e84 	.word	0x00001e84

080197e8 <SX1276IsChannelFree>:

bool SX1276IsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 80197e8:	b5b0      	push	{r4, r5, r7, lr}
 80197ea:	b086      	sub	sp, #24
 80197ec:	af00      	add	r7, sp, #0
 80197ee:	60f8      	str	r0, [r7, #12]
 80197f0:	60b9      	str	r1, [r7, #8]
 80197f2:	603b      	str	r3, [r7, #0]
 80197f4:	1dbb      	adds	r3, r7, #6
 80197f6:	801a      	strh	r2, [r3, #0]
    bool status = true;
 80197f8:	2317      	movs	r3, #23
 80197fa:	18fb      	adds	r3, r7, r3
 80197fc:	2201      	movs	r2, #1
 80197fe:	701a      	strb	r2, [r3, #0]
    int16_t rssi = 0;
 8019800:	2314      	movs	r3, #20
 8019802:	18fb      	adds	r3, r7, r3
 8019804:	2200      	movs	r2, #0
 8019806:	801a      	strh	r2, [r3, #0]
    uint32_t carrierSenseTime = 0;
 8019808:	2300      	movs	r3, #0
 801980a:	613b      	str	r3, [r7, #16]

    SX1276SetSleep( );
 801980c:	f001 f80c 	bl	801a828 <SX1276SetSleep>

    SX1276SetModem( MODEM_FSK );
 8019810:	2000      	movs	r0, #0
 8019812:	f001 fba7 	bl	801af64 <SX1276SetModem>

    SX1276SetChannel( freq );
 8019816:	68fb      	ldr	r3, [r7, #12]
 8019818:	0018      	movs	r0, r3
 801981a:	f7ff ff9f 	bl	801975c <SX1276SetChannel>

    SX1276Write( REG_RXBW, GetFskBandwidthRegValue( rxBandwidth ) );
 801981e:	68bb      	ldr	r3, [r7, #8]
 8019820:	0018      	movs	r0, r3
 8019822:	f001 fd07 	bl	801b234 <GetFskBandwidthRegValue>
 8019826:	0003      	movs	r3, r0
 8019828:	0019      	movs	r1, r3
 801982a:	2012      	movs	r0, #18
 801982c:	f001 fbf4 	bl	801b018 <SX1276Write>
    SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( rxBandwidth ) );
 8019830:	68bb      	ldr	r3, [r7, #8]
 8019832:	0018      	movs	r0, r3
 8019834:	f001 fcfe 	bl	801b234 <GetFskBandwidthRegValue>
 8019838:	0003      	movs	r3, r0
 801983a:	0019      	movs	r1, r3
 801983c:	2013      	movs	r0, #19
 801983e:	f001 fbeb 	bl	801b018 <SX1276Write>

    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8019842:	2005      	movs	r0, #5
 8019844:	f001 fb21 	bl	801ae8a <SX1276SetOpMode>

    RADIO_DELAY_MS( 1 );
 8019848:	2001      	movs	r0, #1
 801984a:	f7eb face 	bl	8004dea <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 801984e:	f003 fb87 	bl	801cf60 <UTIL_TIMER_GetCurrentTime>
 8019852:	0003      	movs	r3, r0
 8019854:	613b      	str	r3, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8019856:	e013      	b.n	8019880 <SX1276IsChannelFree+0x98>
    {
        rssi = SX1276ReadRssi( MODEM_FSK );
 8019858:	2514      	movs	r5, #20
 801985a:	197c      	adds	r4, r7, r5
 801985c:	2000      	movs	r0, #0
 801985e:	f001 fac1 	bl	801ade4 <SX1276ReadRssi>
 8019862:	0003      	movs	r3, r0
 8019864:	8023      	strh	r3, [r4, #0]

        if( rssi > rssiThresh )
 8019866:	197a      	adds	r2, r7, r5
 8019868:	1dbb      	adds	r3, r7, #6
 801986a:	2100      	movs	r1, #0
 801986c:	5e52      	ldrsh	r2, [r2, r1]
 801986e:	2100      	movs	r1, #0
 8019870:	5e5b      	ldrsh	r3, [r3, r1]
 8019872:	429a      	cmp	r2, r3
 8019874:	dd04      	ble.n	8019880 <SX1276IsChannelFree+0x98>
        {
            status = false;
 8019876:	2317      	movs	r3, #23
 8019878:	18fb      	adds	r3, r7, r3
 801987a:	2200      	movs	r2, #0
 801987c:	701a      	strb	r2, [r3, #0]
            break;
 801987e:	e007      	b.n	8019890 <SX1276IsChannelFree+0xa8>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8019880:	693b      	ldr	r3, [r7, #16]
 8019882:	0018      	movs	r0, r3
 8019884:	f003 fb80 	bl	801cf88 <UTIL_TIMER_GetElapsedTime>
 8019888:	0002      	movs	r2, r0
 801988a:	683b      	ldr	r3, [r7, #0]
 801988c:	4293      	cmp	r3, r2
 801988e:	d8e3      	bhi.n	8019858 <SX1276IsChannelFree+0x70>
        }
    }
    SX1276SetSleep( );
 8019890:	f000 ffca 	bl	801a828 <SX1276SetSleep>
    return status;
 8019894:	2317      	movs	r3, #23
 8019896:	18fb      	adds	r3, r7, r3
 8019898:	781b      	ldrb	r3, [r3, #0]
}
 801989a:	0018      	movs	r0, r3
 801989c:	46bd      	mov	sp, r7
 801989e:	b006      	add	sp, #24
 80198a0:	bdb0      	pop	{r4, r5, r7, pc}

080198a2 <SX1276Random>:

uint32_t SX1276Random( void )
{
 80198a2:	b580      	push	{r7, lr}
 80198a4:	b082      	sub	sp, #8
 80198a6:	af00      	add	r7, sp, #0
    uint8_t i;
    uint32_t rnd = 0;
 80198a8:	2300      	movs	r3, #0
 80198aa:	603b      	str	r3, [r7, #0]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    SX1276SetModem( MODEM_LORA );
 80198ac:	2001      	movs	r0, #1
 80198ae:	f001 fb59 	bl	801af64 <SX1276SetModem>

    // Disable LoRa modem interrupts
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80198b2:	21ff      	movs	r1, #255	; 0xff
 80198b4:	2011      	movs	r0, #17
 80198b6:	f001 fbaf 	bl	801b018 <SX1276Write>
                  RFLR_IRQFLAGS_CADDONE |
                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                  RFLR_IRQFLAGS_CADDETECTED );

    // Set radio in continuous reception
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 80198ba:	2005      	movs	r0, #5
 80198bc:	f001 fae5 	bl	801ae8a <SX1276SetOpMode>

    for( i = 0; i < 32; i++ )
 80198c0:	1dfb      	adds	r3, r7, #7
 80198c2:	2200      	movs	r2, #0
 80198c4:	701a      	strb	r2, [r3, #0]
 80198c6:	e015      	b.n	80198f4 <SX1276Random+0x52>
    {
        RADIO_DELAY_MS( 1 );
 80198c8:	2001      	movs	r0, #1
 80198ca:	f7eb fa8e 	bl	8004dea <HAL_Delay>
        // Unfiltered RSSI value reading. Only takes the LSB value
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 80198ce:	202c      	movs	r0, #44	; 0x2c
 80198d0:	f001 fbb3 	bl	801b03a <SX1276Read>
 80198d4:	0003      	movs	r3, r0
 80198d6:	001a      	movs	r2, r3
 80198d8:	2301      	movs	r3, #1
 80198da:	401a      	ands	r2, r3
 80198dc:	1dfb      	adds	r3, r7, #7
 80198de:	781b      	ldrb	r3, [r3, #0]
 80198e0:	409a      	lsls	r2, r3
 80198e2:	0013      	movs	r3, r2
 80198e4:	683a      	ldr	r2, [r7, #0]
 80198e6:	4313      	orrs	r3, r2
 80198e8:	603b      	str	r3, [r7, #0]
    for( i = 0; i < 32; i++ )
 80198ea:	1dfb      	adds	r3, r7, #7
 80198ec:	781a      	ldrb	r2, [r3, #0]
 80198ee:	1dfb      	adds	r3, r7, #7
 80198f0:	3201      	adds	r2, #1
 80198f2:	701a      	strb	r2, [r3, #0]
 80198f4:	1dfb      	adds	r3, r7, #7
 80198f6:	781b      	ldrb	r3, [r3, #0]
 80198f8:	2b1f      	cmp	r3, #31
 80198fa:	d9e5      	bls.n	80198c8 <SX1276Random+0x26>
    }

    SX1276SetSleep( );
 80198fc:	f000 ff94 	bl	801a828 <SX1276SetSleep>

    return rnd;
 8019900:	683b      	ldr	r3, [r7, #0]
}
 8019902:	0018      	movs	r0, r3
 8019904:	46bd      	mov	sp, r7
 8019906:	b002      	add	sp, #8
 8019908:	bd80      	pop	{r7, pc}
	...

0801990c <RxChainCalibration>:
 * Performs the Rx chain calibration for LF and HF bands
 * \remark Must be called just after the reset so all registers are at their
 *         default values
 */
static void RxChainCalibration( void )
{
 801990c:	b590      	push	{r4, r7, lr}
 801990e:	b087      	sub	sp, #28
 8019910:	af00      	add	r7, sp, #0
    uint8_t regPaConfigInitVal;
    uint32_t initialFreq;
    uint32_t channel;

    // Save context
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 8019912:	2317      	movs	r3, #23
 8019914:	18fc      	adds	r4, r7, r3
 8019916:	2009      	movs	r0, #9
 8019918:	f001 fb8f 	bl	801b03a <SX1276Read>
 801991c:	0003      	movs	r3, r0
 801991e:	7023      	strb	r3, [r4, #0]

    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8019920:	2006      	movs	r0, #6
 8019922:	f001 fb8a 	bl	801b03a <SX1276Read>
 8019926:	0003      	movs	r3, r0
 8019928:	041c      	lsls	r4, r3, #16
                ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 801992a:	2007      	movs	r0, #7
 801992c:	f001 fb85 	bl	801b03a <SX1276Read>
 8019930:	0003      	movs	r3, r0
 8019932:	021b      	lsls	r3, r3, #8
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8019934:	431c      	orrs	r4, r3
                ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) );
 8019936:	2008      	movs	r0, #8
 8019938:	f001 fb7f 	bl	801b03a <SX1276Read>
 801993c:	0003      	movs	r3, r0
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 801993e:	4323      	orrs	r3, r4
 8019940:	613b      	str	r3, [r7, #16]

    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 8019942:	693b      	ldr	r3, [r7, #16]
 8019944:	0a1b      	lsrs	r3, r3, #8
 8019946:	60fb      	str	r3, [r7, #12]
 8019948:	68fb      	ldr	r3, [r7, #12]
 801994a:	021b      	lsls	r3, r3, #8
 801994c:	693a      	ldr	r2, [r7, #16]
 801994e:	1ad3      	subs	r3, r2, r3
 8019950:	60bb      	str	r3, [r7, #8]
 8019952:	68f9      	ldr	r1, [r7, #12]
 8019954:	000b      	movs	r3, r1
 8019956:	015b      	lsls	r3, r3, #5
 8019958:	1a5b      	subs	r3, r3, r1
 801995a:	019a      	lsls	r2, r3, #6
 801995c:	1ad2      	subs	r2, r2, r3
 801995e:	00d2      	lsls	r2, r2, #3
 8019960:	1850      	adds	r0, r2, r1
 8019962:	68b9      	ldr	r1, [r7, #8]
 8019964:	000b      	movs	r3, r1
 8019966:	015b      	lsls	r3, r3, #5
 8019968:	1a5b      	subs	r3, r3, r1
 801996a:	019a      	lsls	r2, r3, #6
 801996c:	1ad2      	subs	r2, r2, r3
 801996e:	00d2      	lsls	r2, r2, #3
 8019970:	1853      	adds	r3, r2, r1
 8019972:	3380      	adds	r3, #128	; 0x80
 8019974:	0a1b      	lsrs	r3, r3, #8
 8019976:	18c3      	adds	r3, r0, r3
 8019978:	607b      	str	r3, [r7, #4]

    // Cut the PA just in case, RFO output, power = -1 dBm
    SX1276Write( REG_PACONFIG, 0x00 );
 801997a:	2100      	movs	r1, #0
 801997c:	2009      	movs	r0, #9
 801997e:	f001 fb4b 	bl	801b018 <SX1276Write>

    // Launch Rx chain calibration for LF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8019982:	203b      	movs	r0, #59	; 0x3b
 8019984:	f001 fb59 	bl	801b03a <SX1276Read>
 8019988:	0003      	movs	r3, r0
 801998a:	001a      	movs	r2, r3
 801998c:	2340      	movs	r3, #64	; 0x40
 801998e:	4313      	orrs	r3, r2
 8019990:	b2db      	uxtb	r3, r3
 8019992:	0019      	movs	r1, r3
 8019994:	203b      	movs	r0, #59	; 0x3b
 8019996:	f001 fb3f 	bl	801b018 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 801999a:	46c0      	nop			; (mov r8, r8)
 801999c:	203b      	movs	r0, #59	; 0x3b
 801999e:	f001 fb4c 	bl	801b03a <SX1276Read>
 80199a2:	0003      	movs	r3, r0
 80199a4:	001a      	movs	r2, r3
 80199a6:	2320      	movs	r3, #32
 80199a8:	4013      	ands	r3, r2
 80199aa:	2b20      	cmp	r3, #32
 80199ac:	d0f6      	beq.n	801999c <RxChainCalibration+0x90>
    {
    }

    // Sets a Frequency in HF band
    SX1276SetChannel( 868000000 );
 80199ae:	4b14      	ldr	r3, [pc, #80]	; (8019a00 <RxChainCalibration+0xf4>)
 80199b0:	0018      	movs	r0, r3
 80199b2:	f7ff fed3 	bl	801975c <SX1276SetChannel>

    // Launch Rx chain calibration for HF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 80199b6:	203b      	movs	r0, #59	; 0x3b
 80199b8:	f001 fb3f 	bl	801b03a <SX1276Read>
 80199bc:	0003      	movs	r3, r0
 80199be:	001a      	movs	r2, r3
 80199c0:	2340      	movs	r3, #64	; 0x40
 80199c2:	4313      	orrs	r3, r2
 80199c4:	b2db      	uxtb	r3, r3
 80199c6:	0019      	movs	r1, r3
 80199c8:	203b      	movs	r0, #59	; 0x3b
 80199ca:	f001 fb25 	bl	801b018 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 80199ce:	46c0      	nop			; (mov r8, r8)
 80199d0:	203b      	movs	r0, #59	; 0x3b
 80199d2:	f001 fb32 	bl	801b03a <SX1276Read>
 80199d6:	0003      	movs	r3, r0
 80199d8:	001a      	movs	r2, r3
 80199da:	2320      	movs	r3, #32
 80199dc:	4013      	ands	r3, r2
 80199de:	2b20      	cmp	r3, #32
 80199e0:	d0f6      	beq.n	80199d0 <RxChainCalibration+0xc4>
    {
    }

    // Restore context
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 80199e2:	2317      	movs	r3, #23
 80199e4:	18fb      	adds	r3, r7, r3
 80199e6:	781b      	ldrb	r3, [r3, #0]
 80199e8:	0019      	movs	r1, r3
 80199ea:	2009      	movs	r0, #9
 80199ec:	f001 fb14 	bl	801b018 <SX1276Write>
    SX1276SetChannel( initialFreq );
 80199f0:	687b      	ldr	r3, [r7, #4]
 80199f2:	0018      	movs	r0, r3
 80199f4:	f7ff feb2 	bl	801975c <SX1276SetChannel>
}
 80199f8:	46c0      	nop			; (mov r8, r8)
 80199fa:	46bd      	mov	sp, r7
 80199fc:	b007      	add	sp, #28
 80199fe:	bd90      	pop	{r4, r7, pc}
 8019a00:	33bca100 	.word	0x33bca100

08019a04 <SX1276SetRxConfig>:
                         uint32_t bandwidthAfc, uint16_t preambleLen,
                         uint16_t symbTimeout, bool fixLen,
                         uint8_t payloadLen,
                         bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                         bool iqInverted, bool rxContinuous )
{
 8019a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019a06:	46c6      	mov	lr, r8
 8019a08:	b500      	push	{lr}
 8019a0a:	b084      	sub	sp, #16
 8019a0c:	af00      	add	r7, sp, #0
 8019a0e:	60b9      	str	r1, [r7, #8]
 8019a10:	607a      	str	r2, [r7, #4]
 8019a12:	0019      	movs	r1, r3
 8019a14:	240f      	movs	r4, #15
 8019a16:	193b      	adds	r3, r7, r4
 8019a18:	1c02      	adds	r2, r0, #0
 8019a1a:	701a      	strb	r2, [r3, #0]
 8019a1c:	230e      	movs	r3, #14
 8019a1e:	18fb      	adds	r3, r7, r3
 8019a20:	1c0a      	adds	r2, r1, #0
 8019a22:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( modem );
 8019a24:	193b      	adds	r3, r7, r4
 8019a26:	781b      	ldrb	r3, [r3, #0]
 8019a28:	0018      	movs	r0, r3
 8019a2a:	f001 fa9b 	bl	801af64 <SX1276SetModem>

    switch( modem )
 8019a2e:	193b      	adds	r3, r7, r4
 8019a30:	781b      	ldrb	r3, [r3, #0]
 8019a32:	2b00      	cmp	r3, #0
 8019a34:	d003      	beq.n	8019a3e <SX1276SetRxConfig+0x3a>
 8019a36:	2b01      	cmp	r3, #1
 8019a38:	d100      	bne.n	8019a3c <SX1276SetRxConfig+0x38>
 8019a3a:	e0fb      	b.n	8019c34 <SX1276SetRxConfig+0x230>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 8019a3c:	e26e      	b.n	8019f1c <SX1276SetRxConfig+0x518>
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8019a3e:	4bbd      	ldr	r3, [pc, #756]	; (8019d34 <SX1276SetRxConfig+0x330>)
 8019a40:	68ba      	ldr	r2, [r7, #8]
 8019a42:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 8019a44:	4bbb      	ldr	r3, [pc, #748]	; (8019d34 <SX1276SetRxConfig+0x330>)
 8019a46:	687a      	ldr	r2, [r7, #4]
 8019a48:	61da      	str	r2, [r3, #28]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 8019a4a:	4bba      	ldr	r3, [pc, #744]	; (8019d34 <SX1276SetRxConfig+0x330>)
 8019a4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019a4e:	619a      	str	r2, [r3, #24]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8019a50:	4bb8      	ldr	r3, [pc, #736]	; (8019d34 <SX1276SetRxConfig+0x330>)
 8019a52:	222c      	movs	r2, #44	; 0x2c
 8019a54:	2108      	movs	r1, #8
 8019a56:	468c      	mov	ip, r1
 8019a58:	44bc      	add	ip, r7
 8019a5a:	4462      	add	r2, ip
 8019a5c:	2122      	movs	r1, #34	; 0x22
 8019a5e:	7812      	ldrb	r2, [r2, #0]
 8019a60:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 8019a62:	4bb4      	ldr	r3, [pc, #720]	; (8019d34 <SX1276SetRxConfig+0x330>)
 8019a64:	2130      	movs	r1, #48	; 0x30
 8019a66:	2408      	movs	r4, #8
 8019a68:	193a      	adds	r2, r7, r4
 8019a6a:	1852      	adds	r2, r2, r1
 8019a6c:	2123      	movs	r1, #35	; 0x23
 8019a6e:	7812      	ldrb	r2, [r2, #0]
 8019a70:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8019a72:	4bb0      	ldr	r3, [pc, #704]	; (8019d34 <SX1276SetRxConfig+0x330>)
 8019a74:	2034      	movs	r0, #52	; 0x34
 8019a76:	193a      	adds	r2, r7, r4
 8019a78:	1812      	adds	r2, r2, r0
 8019a7a:	2124      	movs	r1, #36	; 0x24
 8019a7c:	7812      	ldrb	r2, [r2, #0]
 8019a7e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8019a80:	4bac      	ldr	r3, [pc, #688]	; (8019d34 <SX1276SetRxConfig+0x330>)
 8019a82:	2220      	movs	r2, #32
 8019a84:	2020      	movs	r0, #32
 8019a86:	4684      	mov	ip, r0
 8019a88:	2108      	movs	r1, #8
 8019a8a:	4688      	mov	r8, r1
 8019a8c:	44b8      	add	r8, r7
 8019a8e:	44c4      	add	ip, r8
 8019a90:	4462      	add	r2, ip
 8019a92:	2125      	movs	r1, #37	; 0x25
 8019a94:	7812      	ldrb	r2, [r2, #0]
 8019a96:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 8019a98:	4ba6      	ldr	r3, [pc, #664]	; (8019d34 <SX1276SetRxConfig+0x330>)
 8019a9a:	2224      	movs	r2, #36	; 0x24
 8019a9c:	2020      	movs	r0, #32
 8019a9e:	4684      	mov	ip, r0
 8019aa0:	2108      	movs	r1, #8
 8019aa2:	4688      	mov	r8, r1
 8019aa4:	44b8      	add	r8, r7
 8019aa6:	44c4      	add	ip, r8
 8019aa8:	4462      	add	r2, ip
 8019aaa:	2126      	movs	r1, #38	; 0x26
 8019aac:	7812      	ldrb	r2, [r2, #0]
 8019aae:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8019ab0:	4ba0      	ldr	r3, [pc, #640]	; (8019d34 <SX1276SetRxConfig+0x330>)
 8019ab2:	2624      	movs	r6, #36	; 0x24
 8019ab4:	193a      	adds	r2, r7, r4
 8019ab6:	1992      	adds	r2, r2, r6
 8019ab8:	8812      	ldrh	r2, [r2, #0]
 8019aba:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 8019abc:	2328      	movs	r3, #40	; 0x28
 8019abe:	2208      	movs	r2, #8
 8019ac0:	4694      	mov	ip, r2
 8019ac2:	44bc      	add	ip, r7
 8019ac4:	4463      	add	r3, ip
 8019ac6:	881b      	ldrh	r3, [r3, #0]
 8019ac8:	0018      	movs	r0, r3
 8019aca:	f7e8 fdf5 	bl	80026b8 <__aeabi_i2d>
 8019ace:	0004      	movs	r4, r0
 8019ad0:	000d      	movs	r5, r1
 8019ad2:	6878      	ldr	r0, [r7, #4]
 8019ad4:	f7e8 fe20 	bl	8002718 <__aeabi_ui2d>
 8019ad8:	0002      	movs	r2, r0
 8019ada:	000b      	movs	r3, r1
 8019adc:	2000      	movs	r0, #0
 8019ade:	4996      	ldr	r1, [pc, #600]	; (8019d38 <SX1276SetRxConfig+0x334>)
 8019ae0:	f7e7 fbb0 	bl	8001244 <__aeabi_ddiv>
 8019ae4:	0002      	movs	r2, r0
 8019ae6:	000b      	movs	r3, r1
 8019ae8:	0010      	movs	r0, r2
 8019aea:	0019      	movs	r1, r3
 8019aec:	2200      	movs	r2, #0
 8019aee:	4b93      	ldr	r3, [pc, #588]	; (8019d3c <SX1276SetRxConfig+0x338>)
 8019af0:	f7e7 ffae 	bl	8001a50 <__aeabi_dmul>
 8019af4:	0002      	movs	r2, r0
 8019af6:	000b      	movs	r3, r1
 8019af8:	0020      	movs	r0, r4
 8019afa:	0029      	movs	r1, r5
 8019afc:	f7e7 ffa8 	bl	8001a50 <__aeabi_dmul>
 8019b00:	0002      	movs	r2, r0
 8019b02:	000b      	movs	r3, r1
 8019b04:	0010      	movs	r0, r2
 8019b06:	0019      	movs	r1, r3
 8019b08:	2200      	movs	r2, #0
 8019b0a:	4b8d      	ldr	r3, [pc, #564]	; (8019d40 <SX1276SetRxConfig+0x33c>)
 8019b0c:	f7e7 ffa0 	bl	8001a50 <__aeabi_dmul>
 8019b10:	0002      	movs	r2, r0
 8019b12:	000b      	movs	r3, r1
 8019b14:	0010      	movs	r0, r2
 8019b16:	0019      	movs	r1, r3
 8019b18:	f7e6 fd1e 	bl	8000558 <__aeabi_d2uiz>
 8019b1c:	0002      	movs	r2, r0
 8019b1e:	4b85      	ldr	r3, [pc, #532]	; (8019d34 <SX1276SetRxConfig+0x330>)
 8019b20:	62da      	str	r2, [r3, #44]	; 0x2c
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8019b22:	6878      	ldr	r0, [r7, #4]
 8019b24:	f7e8 fdf8 	bl	8002718 <__aeabi_ui2d>
 8019b28:	0002      	movs	r2, r0
 8019b2a:	000b      	movs	r3, r1
 8019b2c:	2000      	movs	r0, #0
 8019b2e:	4985      	ldr	r1, [pc, #532]	; (8019d44 <SX1276SetRxConfig+0x340>)
 8019b30:	f7e7 fb88 	bl	8001244 <__aeabi_ddiv>
 8019b34:	0002      	movs	r2, r0
 8019b36:	000b      	movs	r3, r1
 8019b38:	0010      	movs	r0, r2
 8019b3a:	0019      	movs	r1, r3
 8019b3c:	f7e6 fd0c 	bl	8000558 <__aeabi_d2uiz>
 8019b40:	0003      	movs	r3, r0
 8019b42:	b29b      	uxth	r3, r3
 8019b44:	607b      	str	r3, [r7, #4]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 8019b46:	687b      	ldr	r3, [r7, #4]
 8019b48:	0a1b      	lsrs	r3, r3, #8
 8019b4a:	b2db      	uxtb	r3, r3
 8019b4c:	0019      	movs	r1, r3
 8019b4e:	2002      	movs	r0, #2
 8019b50:	f001 fa62 	bl	801b018 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8019b54:	687b      	ldr	r3, [r7, #4]
 8019b56:	b2db      	uxtb	r3, r3
 8019b58:	0019      	movs	r1, r3
 8019b5a:	2003      	movs	r0, #3
 8019b5c:	f001 fa5c 	bl	801b018 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 8019b60:	68bb      	ldr	r3, [r7, #8]
 8019b62:	0018      	movs	r0, r3
 8019b64:	f001 fb66 	bl	801b234 <GetFskBandwidthRegValue>
 8019b68:	0003      	movs	r3, r0
 8019b6a:	0019      	movs	r1, r3
 8019b6c:	2012      	movs	r0, #18
 8019b6e:	f001 fa53 	bl	801b018 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 8019b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b74:	0018      	movs	r0, r3
 8019b76:	f001 fb5d 	bl	801b234 <GetFskBandwidthRegValue>
 8019b7a:	0003      	movs	r3, r0
 8019b7c:	0019      	movs	r1, r3
 8019b7e:	2013      	movs	r0, #19
 8019b80:	f001 fa4a 	bl	801b018 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8019b84:	2408      	movs	r4, #8
 8019b86:	193b      	adds	r3, r7, r4
 8019b88:	199b      	adds	r3, r3, r6
 8019b8a:	881b      	ldrh	r3, [r3, #0]
 8019b8c:	0a1b      	lsrs	r3, r3, #8
 8019b8e:	b29b      	uxth	r3, r3
 8019b90:	b2db      	uxtb	r3, r3
 8019b92:	0019      	movs	r1, r3
 8019b94:	2025      	movs	r0, #37	; 0x25
 8019b96:	f001 fa3f 	bl	801b018 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8019b9a:	193b      	adds	r3, r7, r4
 8019b9c:	199b      	adds	r3, r3, r6
 8019b9e:	881b      	ldrh	r3, [r3, #0]
 8019ba0:	b2db      	uxtb	r3, r3
 8019ba2:	0019      	movs	r1, r3
 8019ba4:	2026      	movs	r0, #38	; 0x26
 8019ba6:	f001 fa37 	bl	801b018 <SX1276Write>
            if( fixLen == 1 )
 8019baa:	222c      	movs	r2, #44	; 0x2c
 8019bac:	193b      	adds	r3, r7, r4
 8019bae:	189b      	adds	r3, r3, r2
 8019bb0:	781b      	ldrb	r3, [r3, #0]
 8019bb2:	2b00      	cmp	r3, #0
 8019bb4:	d008      	beq.n	8019bc8 <SX1276SetRxConfig+0x1c4>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 8019bb6:	2130      	movs	r1, #48	; 0x30
 8019bb8:	193b      	adds	r3, r7, r4
 8019bba:	185b      	adds	r3, r3, r1
 8019bbc:	781b      	ldrb	r3, [r3, #0]
 8019bbe:	0019      	movs	r1, r3
 8019bc0:	2032      	movs	r0, #50	; 0x32
 8019bc2:	f001 fa29 	bl	801b018 <SX1276Write>
 8019bc6:	e003      	b.n	8019bd0 <SX1276SetRxConfig+0x1cc>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8019bc8:	21ff      	movs	r1, #255	; 0xff
 8019bca:	2032      	movs	r0, #50	; 0x32
 8019bcc:	f001 fa24 	bl	801b018 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8019bd0:	2030      	movs	r0, #48	; 0x30
 8019bd2:	f001 fa32 	bl	801b03a <SX1276Read>
 8019bd6:	0003      	movs	r3, r0
 8019bd8:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 8019bda:	226f      	movs	r2, #111	; 0x6f
 8019bdc:	4013      	ands	r3, r2
 8019bde:	b25a      	sxtb	r2, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8019be0:	232c      	movs	r3, #44	; 0x2c
 8019be2:	2108      	movs	r1, #8
 8019be4:	468c      	mov	ip, r1
 8019be6:	44bc      	add	ip, r7
 8019be8:	4463      	add	r3, ip
 8019bea:	781b      	ldrb	r3, [r3, #0]
 8019bec:	2b00      	cmp	r3, #0
 8019bee:	d001      	beq.n	8019bf4 <SX1276SetRxConfig+0x1f0>
 8019bf0:	2300      	movs	r3, #0
 8019bf2:	e001      	b.n	8019bf8 <SX1276SetRxConfig+0x1f4>
 8019bf4:	2380      	movs	r3, #128	; 0x80
 8019bf6:	425b      	negs	r3, r3
 8019bf8:	4313      	orrs	r3, r2
 8019bfa:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 8019bfc:	2334      	movs	r3, #52	; 0x34
 8019bfe:	2108      	movs	r1, #8
 8019c00:	468c      	mov	ip, r1
 8019c02:	44bc      	add	ip, r7
 8019c04:	4463      	add	r3, ip
 8019c06:	781b      	ldrb	r3, [r3, #0]
 8019c08:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8019c0a:	b25b      	sxtb	r3, r3
 8019c0c:	4313      	orrs	r3, r2
 8019c0e:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 8019c10:	b2db      	uxtb	r3, r3
 8019c12:	0019      	movs	r1, r3
 8019c14:	2030      	movs	r0, #48	; 0x30
 8019c16:	f001 f9ff 	bl	801b018 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8019c1a:	2031      	movs	r0, #49	; 0x31
 8019c1c:	f001 fa0d 	bl	801b03a <SX1276Read>
 8019c20:	0003      	movs	r3, r0
 8019c22:	001a      	movs	r2, r3
 8019c24:	2340      	movs	r3, #64	; 0x40
 8019c26:	4313      	orrs	r3, r2
 8019c28:	b2db      	uxtb	r3, r3
 8019c2a:	0019      	movs	r1, r3
 8019c2c:	2031      	movs	r0, #49	; 0x31
 8019c2e:	f001 f9f3 	bl	801b018 <SX1276Write>
        break;
 8019c32:	e173      	b.n	8019f1c <SX1276SetRxConfig+0x518>
            if( bandwidth > 2 )
 8019c34:	68bb      	ldr	r3, [r7, #8]
 8019c36:	2b02      	cmp	r3, #2
 8019c38:	d900      	bls.n	8019c3c <SX1276SetRxConfig+0x238>
                while( 1 );
 8019c3a:	e7fe      	b.n	8019c3a <SX1276SetRxConfig+0x236>
            bandwidth += 7;
 8019c3c:	68bb      	ldr	r3, [r7, #8]
 8019c3e:	3307      	adds	r3, #7
 8019c40:	60bb      	str	r3, [r7, #8]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8019c42:	4b3c      	ldr	r3, [pc, #240]	; (8019d34 <SX1276SetRxConfig+0x330>)
 8019c44:	68ba      	ldr	r2, [r7, #8]
 8019c46:	645a      	str	r2, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 8019c48:	4b3a      	ldr	r3, [pc, #232]	; (8019d34 <SX1276SetRxConfig+0x330>)
 8019c4a:	687a      	ldr	r2, [r7, #4]
 8019c4c:	649a      	str	r2, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.Coderate = coderate;
 8019c4e:	4b39      	ldr	r3, [pc, #228]	; (8019d34 <SX1276SetRxConfig+0x330>)
 8019c50:	220e      	movs	r2, #14
 8019c52:	18ba      	adds	r2, r7, r2
 8019c54:	214d      	movs	r1, #77	; 0x4d
 8019c56:	7812      	ldrb	r2, [r2, #0]
 8019c58:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8019c5a:	4b36      	ldr	r3, [pc, #216]	; (8019d34 <SX1276SetRxConfig+0x330>)
 8019c5c:	2224      	movs	r2, #36	; 0x24
 8019c5e:	2108      	movs	r1, #8
 8019c60:	468c      	mov	ip, r1
 8019c62:	44bc      	add	ip, r7
 8019c64:	4462      	add	r2, ip
 8019c66:	214e      	movs	r1, #78	; 0x4e
 8019c68:	8812      	ldrh	r2, [r2, #0]
 8019c6a:	525a      	strh	r2, [r3, r1]
            SX1276.Settings.LoRa.FixLen = fixLen;
 8019c6c:	4b31      	ldr	r3, [pc, #196]	; (8019d34 <SX1276SetRxConfig+0x330>)
 8019c6e:	222c      	movs	r2, #44	; 0x2c
 8019c70:	2108      	movs	r1, #8
 8019c72:	468c      	mov	ip, r1
 8019c74:	44bc      	add	ip, r7
 8019c76:	4462      	add	r2, ip
 8019c78:	2150      	movs	r1, #80	; 0x50
 8019c7a:	7812      	ldrb	r2, [r2, #0]
 8019c7c:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 8019c7e:	4b2d      	ldr	r3, [pc, #180]	; (8019d34 <SX1276SetRxConfig+0x330>)
 8019c80:	2230      	movs	r2, #48	; 0x30
 8019c82:	2108      	movs	r1, #8
 8019c84:	468c      	mov	ip, r1
 8019c86:	44bc      	add	ip, r7
 8019c88:	4462      	add	r2, ip
 8019c8a:	2151      	movs	r1, #81	; 0x51
 8019c8c:	7812      	ldrb	r2, [r2, #0]
 8019c8e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8019c90:	4b28      	ldr	r3, [pc, #160]	; (8019d34 <SX1276SetRxConfig+0x330>)
 8019c92:	2234      	movs	r2, #52	; 0x34
 8019c94:	2108      	movs	r1, #8
 8019c96:	468c      	mov	ip, r1
 8019c98:	44bc      	add	ip, r7
 8019c9a:	4462      	add	r2, ip
 8019c9c:	2152      	movs	r1, #82	; 0x52
 8019c9e:	7812      	ldrb	r2, [r2, #0]
 8019ca0:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8019ca2:	4b24      	ldr	r3, [pc, #144]	; (8019d34 <SX1276SetRxConfig+0x330>)
 8019ca4:	2238      	movs	r2, #56	; 0x38
 8019ca6:	2108      	movs	r1, #8
 8019ca8:	468c      	mov	ip, r1
 8019caa:	44bc      	add	ip, r7
 8019cac:	4462      	add	r2, ip
 8019cae:	2153      	movs	r1, #83	; 0x53
 8019cb0:	7812      	ldrb	r2, [r2, #0]
 8019cb2:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8019cb4:	4b1f      	ldr	r3, [pc, #124]	; (8019d34 <SX1276SetRxConfig+0x330>)
 8019cb6:	223c      	movs	r2, #60	; 0x3c
 8019cb8:	2108      	movs	r1, #8
 8019cba:	468c      	mov	ip, r1
 8019cbc:	44bc      	add	ip, r7
 8019cbe:	4462      	add	r2, ip
 8019cc0:	2154      	movs	r1, #84	; 0x54
 8019cc2:	7812      	ldrb	r2, [r2, #0]
 8019cc4:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8019cc6:	4b1b      	ldr	r3, [pc, #108]	; (8019d34 <SX1276SetRxConfig+0x330>)
 8019cc8:	2220      	movs	r2, #32
 8019cca:	2120      	movs	r1, #32
 8019ccc:	468c      	mov	ip, r1
 8019cce:	2108      	movs	r1, #8
 8019cd0:	4688      	mov	r8, r1
 8019cd2:	44b8      	add	r8, r7
 8019cd4:	44c4      	add	ip, r8
 8019cd6:	4462      	add	r2, ip
 8019cd8:	2155      	movs	r1, #85	; 0x55
 8019cda:	7812      	ldrb	r2, [r2, #0]
 8019cdc:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8019cde:	4b15      	ldr	r3, [pc, #84]	; (8019d34 <SX1276SetRxConfig+0x330>)
 8019ce0:	2224      	movs	r2, #36	; 0x24
 8019ce2:	2120      	movs	r1, #32
 8019ce4:	468c      	mov	ip, r1
 8019ce6:	2108      	movs	r1, #8
 8019ce8:	4688      	mov	r8, r1
 8019cea:	44b8      	add	r8, r7
 8019cec:	44c4      	add	ip, r8
 8019cee:	4462      	add	r2, ip
 8019cf0:	2156      	movs	r1, #86	; 0x56
 8019cf2:	7812      	ldrb	r2, [r2, #0]
 8019cf4:	545a      	strb	r2, [r3, r1]
            if( datarate > 12 )
 8019cf6:	687b      	ldr	r3, [r7, #4]
 8019cf8:	2b0c      	cmp	r3, #12
 8019cfa:	d902      	bls.n	8019d02 <SX1276SetRxConfig+0x2fe>
                datarate = 12;
 8019cfc:	230c      	movs	r3, #12
 8019cfe:	607b      	str	r3, [r7, #4]
 8019d00:	e004      	b.n	8019d0c <SX1276SetRxConfig+0x308>
            else if( datarate < 6 )
 8019d02:	687b      	ldr	r3, [r7, #4]
 8019d04:	2b05      	cmp	r3, #5
 8019d06:	d801      	bhi.n	8019d0c <SX1276SetRxConfig+0x308>
                datarate = 6;
 8019d08:	2306      	movs	r3, #6
 8019d0a:	607b      	str	r3, [r7, #4]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8019d0c:	68bb      	ldr	r3, [r7, #8]
 8019d0e:	2b07      	cmp	r3, #7
 8019d10:	d105      	bne.n	8019d1e <SX1276SetRxConfig+0x31a>
 8019d12:	687b      	ldr	r3, [r7, #4]
 8019d14:	2b0b      	cmp	r3, #11
 8019d16:	d008      	beq.n	8019d2a <SX1276SetRxConfig+0x326>
 8019d18:	687b      	ldr	r3, [r7, #4]
 8019d1a:	2b0c      	cmp	r3, #12
 8019d1c:	d005      	beq.n	8019d2a <SX1276SetRxConfig+0x326>
 8019d1e:	68bb      	ldr	r3, [r7, #8]
 8019d20:	2b08      	cmp	r3, #8
 8019d22:	d111      	bne.n	8019d48 <SX1276SetRxConfig+0x344>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8019d24:	687b      	ldr	r3, [r7, #4]
 8019d26:	2b0c      	cmp	r3, #12
 8019d28:	d10e      	bne.n	8019d48 <SX1276SetRxConfig+0x344>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8019d2a:	4b02      	ldr	r3, [pc, #8]	; (8019d34 <SX1276SetRxConfig+0x330>)
 8019d2c:	224c      	movs	r2, #76	; 0x4c
 8019d2e:	2101      	movs	r1, #1
 8019d30:	5499      	strb	r1, [r3, r2]
 8019d32:	e00d      	b.n	8019d50 <SX1276SetRxConfig+0x34c>
 8019d34:	2000177c 	.word	0x2000177c
 8019d38:	3ff00000 	.word	0x3ff00000
 8019d3c:	40200000 	.word	0x40200000
 8019d40:	408f4000 	.word	0x408f4000
 8019d44:	417e8480 	.word	0x417e8480
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8019d48:	4b77      	ldr	r3, [pc, #476]	; (8019f28 <SX1276SetRxConfig+0x524>)
 8019d4a:	224c      	movs	r2, #76	; 0x4c
 8019d4c:	2100      	movs	r1, #0
 8019d4e:	5499      	strb	r1, [r3, r2]
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8019d50:	201d      	movs	r0, #29
 8019d52:	f001 f972 	bl	801b03a <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8019d56:	68bb      	ldr	r3, [r7, #8]
 8019d58:	b2db      	uxtb	r3, r3
 8019d5a:	011b      	lsls	r3, r3, #4
 8019d5c:	b2da      	uxtb	r2, r3
 8019d5e:	230e      	movs	r3, #14
 8019d60:	18fb      	adds	r3, r7, r3
 8019d62:	781b      	ldrb	r3, [r3, #0]
 8019d64:	18db      	adds	r3, r3, r3
 8019d66:	b2db      	uxtb	r3, r3
 8019d68:	4313      	orrs	r3, r2
 8019d6a:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8019d6c:	242c      	movs	r4, #44	; 0x2c
 8019d6e:	2608      	movs	r6, #8
 8019d70:	19bb      	adds	r3, r7, r6
 8019d72:	191b      	adds	r3, r3, r4
 8019d74:	781b      	ldrb	r3, [r3, #0]
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8019d76:	4313      	orrs	r3, r2
 8019d78:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8019d7a:	0019      	movs	r1, r3
 8019d7c:	201d      	movs	r0, #29
 8019d7e:	f001 f94b 	bl	801b018 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8019d82:	201e      	movs	r0, #30
 8019d84:	f001 f959 	bl	801b03a <SX1276Read>
 8019d88:	0003      	movs	r3, r0
 8019d8a:	001a      	movs	r2, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 8019d8c:	2308      	movs	r3, #8
 8019d8e:	4013      	ands	r3, r2
 8019d90:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8019d92:	687b      	ldr	r3, [r7, #4]
 8019d94:	b2db      	uxtb	r3, r3
 8019d96:	011b      	lsls	r3, r3, #4
 8019d98:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 8019d9a:	4313      	orrs	r3, r2
 8019d9c:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8019d9e:	2334      	movs	r3, #52	; 0x34
 8019da0:	2108      	movs	r1, #8
 8019da2:	468c      	mov	ip, r1
 8019da4:	44bc      	add	ip, r7
 8019da6:	4463      	add	r3, ip
 8019da8:	781b      	ldrb	r3, [r3, #0]
 8019daa:	009b      	lsls	r3, r3, #2
 8019dac:	b2db      	uxtb	r3, r3
 8019dae:	4313      	orrs	r3, r2
 8019db0:	b2da      	uxtb	r2, r3
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8019db2:	2528      	movs	r5, #40	; 0x28
 8019db4:	19bb      	adds	r3, r7, r6
 8019db6:	195b      	adds	r3, r3, r5
 8019db8:	881b      	ldrh	r3, [r3, #0]
 8019dba:	0a1b      	lsrs	r3, r3, #8
 8019dbc:	b29b      	uxth	r3, r3
 8019dbe:	b2db      	uxtb	r3, r3
 8019dc0:	2103      	movs	r1, #3
 8019dc2:	400b      	ands	r3, r1
 8019dc4:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 8019dc6:	4313      	orrs	r3, r2
 8019dc8:	b2db      	uxtb	r3, r3
 8019dca:	0019      	movs	r1, r3
 8019dcc:	201e      	movs	r0, #30
 8019dce:	f001 f923 	bl	801b018 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8019dd2:	2026      	movs	r0, #38	; 0x26
 8019dd4:	f001 f931 	bl	801b03a <SX1276Read>
 8019dd8:	0003      	movs	r3, r0
 8019dda:	b25b      	sxtb	r3, r3
 8019ddc:	2208      	movs	r2, #8
 8019dde:	4393      	bics	r3, r2
 8019de0:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8019de2:	4b51      	ldr	r3, [pc, #324]	; (8019f28 <SX1276SetRxConfig+0x524>)
 8019de4:	214c      	movs	r1, #76	; 0x4c
 8019de6:	5c5b      	ldrb	r3, [r3, r1]
 8019de8:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8019dea:	b25b      	sxtb	r3, r3
 8019dec:	4313      	orrs	r3, r2
 8019dee:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8019df0:	b2db      	uxtb	r3, r3
 8019df2:	0019      	movs	r1, r3
 8019df4:	2026      	movs	r0, #38	; 0x26
 8019df6:	f001 f90f 	bl	801b018 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 8019dfa:	19bb      	adds	r3, r7, r6
 8019dfc:	195b      	adds	r3, r3, r5
 8019dfe:	881b      	ldrh	r3, [r3, #0]
 8019e00:	b2db      	uxtb	r3, r3
 8019e02:	0019      	movs	r1, r3
 8019e04:	201f      	movs	r0, #31
 8019e06:	f001 f907 	bl	801b018 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8019e0a:	2524      	movs	r5, #36	; 0x24
 8019e0c:	19bb      	adds	r3, r7, r6
 8019e0e:	195b      	adds	r3, r3, r5
 8019e10:	881b      	ldrh	r3, [r3, #0]
 8019e12:	0a1b      	lsrs	r3, r3, #8
 8019e14:	b29b      	uxth	r3, r3
 8019e16:	b2db      	uxtb	r3, r3
 8019e18:	0019      	movs	r1, r3
 8019e1a:	2020      	movs	r0, #32
 8019e1c:	f001 f8fc 	bl	801b018 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8019e20:	19bb      	adds	r3, r7, r6
 8019e22:	195b      	adds	r3, r3, r5
 8019e24:	881b      	ldrh	r3, [r3, #0]
 8019e26:	b2db      	uxtb	r3, r3
 8019e28:	0019      	movs	r1, r3
 8019e2a:	2021      	movs	r0, #33	; 0x21
 8019e2c:	f001 f8f4 	bl	801b018 <SX1276Write>
            if( fixLen == 1 )
 8019e30:	19bb      	adds	r3, r7, r6
 8019e32:	191b      	adds	r3, r3, r4
 8019e34:	781b      	ldrb	r3, [r3, #0]
 8019e36:	2b00      	cmp	r3, #0
 8019e38:	d009      	beq.n	8019e4e <SX1276SetRxConfig+0x44a>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 8019e3a:	2330      	movs	r3, #48	; 0x30
 8019e3c:	2208      	movs	r2, #8
 8019e3e:	4694      	mov	ip, r2
 8019e40:	44bc      	add	ip, r7
 8019e42:	4463      	add	r3, ip
 8019e44:	781b      	ldrb	r3, [r3, #0]
 8019e46:	0019      	movs	r1, r3
 8019e48:	2022      	movs	r0, #34	; 0x22
 8019e4a:	f001 f8e5 	bl	801b018 <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8019e4e:	4b36      	ldr	r3, [pc, #216]	; (8019f28 <SX1276SetRxConfig+0x524>)
 8019e50:	2253      	movs	r2, #83	; 0x53
 8019e52:	5c9b      	ldrb	r3, [r3, r2]
 8019e54:	2b00      	cmp	r3, #0
 8019e56:	d013      	beq.n	8019e80 <SX1276SetRxConfig+0x47c>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8019e58:	2044      	movs	r0, #68	; 0x44
 8019e5a:	f001 f8ee 	bl	801b03a <SX1276Read>
 8019e5e:	0003      	movs	r3, r0
 8019e60:	001a      	movs	r2, r3
 8019e62:	2380      	movs	r3, #128	; 0x80
 8019e64:	425b      	negs	r3, r3
 8019e66:	4313      	orrs	r3, r2
 8019e68:	b2db      	uxtb	r3, r3
 8019e6a:	0019      	movs	r1, r3
 8019e6c:	2044      	movs	r0, #68	; 0x44
 8019e6e:	f001 f8d3 	bl	801b018 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8019e72:	4b2d      	ldr	r3, [pc, #180]	; (8019f28 <SX1276SetRxConfig+0x524>)
 8019e74:	2254      	movs	r2, #84	; 0x54
 8019e76:	5c9b      	ldrb	r3, [r3, r2]
 8019e78:	0019      	movs	r1, r3
 8019e7a:	2024      	movs	r0, #36	; 0x24
 8019e7c:	f001 f8cc 	bl	801b018 <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8019e80:	68bb      	ldr	r3, [r7, #8]
 8019e82:	2b09      	cmp	r3, #9
 8019e84:	d10d      	bne.n	8019ea2 <SX1276SetRxConfig+0x49e>
 8019e86:	4b28      	ldr	r3, [pc, #160]	; (8019f28 <SX1276SetRxConfig+0x524>)
 8019e88:	689b      	ldr	r3, [r3, #8]
 8019e8a:	4a28      	ldr	r2, [pc, #160]	; (8019f2c <SX1276SetRxConfig+0x528>)
 8019e8c:	4293      	cmp	r3, r2
 8019e8e:	d908      	bls.n	8019ea2 <SX1276SetRxConfig+0x49e>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8019e90:	2102      	movs	r1, #2
 8019e92:	2036      	movs	r0, #54	; 0x36
 8019e94:	f001 f8c0 	bl	801b018 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 8019e98:	2164      	movs	r1, #100	; 0x64
 8019e9a:	203a      	movs	r0, #58	; 0x3a
 8019e9c:	f001 f8bc 	bl	801b018 <SX1276Write>
 8019ea0:	e00f      	b.n	8019ec2 <SX1276SetRxConfig+0x4be>
            else if( bandwidth == 9 )
 8019ea2:	68bb      	ldr	r3, [r7, #8]
 8019ea4:	2b09      	cmp	r3, #9
 8019ea6:	d108      	bne.n	8019eba <SX1276SetRxConfig+0x4b6>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8019ea8:	2102      	movs	r1, #2
 8019eaa:	2036      	movs	r0, #54	; 0x36
 8019eac:	f001 f8b4 	bl	801b018 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 8019eb0:	217f      	movs	r1, #127	; 0x7f
 8019eb2:	203a      	movs	r0, #58	; 0x3a
 8019eb4:	f001 f8b0 	bl	801b018 <SX1276Write>
 8019eb8:	e003      	b.n	8019ec2 <SX1276SetRxConfig+0x4be>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 8019eba:	2103      	movs	r1, #3
 8019ebc:	2036      	movs	r0, #54	; 0x36
 8019ebe:	f001 f8ab 	bl	801b018 <SX1276Write>
            if( datarate == 6 )
 8019ec2:	687b      	ldr	r3, [r7, #4]
 8019ec4:	2b06      	cmp	r3, #6
 8019ec6:	d114      	bne.n	8019ef2 <SX1276SetRxConfig+0x4ee>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8019ec8:	2031      	movs	r0, #49	; 0x31
 8019eca:	f001 f8b6 	bl	801b03a <SX1276Read>
 8019ece:	0003      	movs	r3, r0
 8019ed0:	b25b      	sxtb	r3, r3
 8019ed2:	2207      	movs	r2, #7
 8019ed4:	4393      	bics	r3, r2
 8019ed6:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8019ed8:	2205      	movs	r2, #5
 8019eda:	4313      	orrs	r3, r2
 8019edc:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8019ede:	b2db      	uxtb	r3, r3
 8019ee0:	0019      	movs	r1, r3
 8019ee2:	2031      	movs	r0, #49	; 0x31
 8019ee4:	f001 f898 	bl	801b018 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8019ee8:	210c      	movs	r1, #12
 8019eea:	2037      	movs	r0, #55	; 0x37
 8019eec:	f001 f894 	bl	801b018 <SX1276Write>
        break;
 8019ef0:	e013      	b.n	8019f1a <SX1276SetRxConfig+0x516>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8019ef2:	2031      	movs	r0, #49	; 0x31
 8019ef4:	f001 f8a1 	bl	801b03a <SX1276Read>
 8019ef8:	0003      	movs	r3, r0
 8019efa:	b25b      	sxtb	r3, r3
 8019efc:	2207      	movs	r2, #7
 8019efe:	4393      	bics	r3, r2
 8019f00:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8019f02:	2203      	movs	r2, #3
 8019f04:	4313      	orrs	r3, r2
 8019f06:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8019f08:	b2db      	uxtb	r3, r3
 8019f0a:	0019      	movs	r1, r3
 8019f0c:	2031      	movs	r0, #49	; 0x31
 8019f0e:	f001 f883 	bl	801b018 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8019f12:	210a      	movs	r1, #10
 8019f14:	2037      	movs	r0, #55	; 0x37
 8019f16:	f001 f87f 	bl	801b018 <SX1276Write>
        break;
 8019f1a:	46c0      	nop			; (mov r8, r8)
}
 8019f1c:	46c0      	nop			; (mov r8, r8)
 8019f1e:	46bd      	mov	sp, r7
 8019f20:	b004      	add	sp, #16
 8019f22:	bc80      	pop	{r7}
 8019f24:	46b8      	mov	r8, r7
 8019f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019f28:	2000177c 	.word	0x2000177c
 8019f2c:	1f4add40 	.word	0x1f4add40

08019f30 <SX1276SetTxConfig>:
void SX1276SetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                        uint32_t bandwidth, uint32_t datarate,
                        uint8_t coderate, uint16_t preambleLen,
                        bool fixLen, bool crcOn, bool freqHopOn,
                        uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8019f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019f32:	46c6      	mov	lr, r8
 8019f34:	b500      	push	{lr}
 8019f36:	b084      	sub	sp, #16
 8019f38:	af00      	add	r7, sp, #0
 8019f3a:	60ba      	str	r2, [r7, #8]
 8019f3c:	607b      	str	r3, [r7, #4]
 8019f3e:	240f      	movs	r4, #15
 8019f40:	193b      	adds	r3, r7, r4
 8019f42:	1c02      	adds	r2, r0, #0
 8019f44:	701a      	strb	r2, [r3, #0]
 8019f46:	230e      	movs	r3, #14
 8019f48:	18fb      	adds	r3, r7, r3
 8019f4a:	1c0a      	adds	r2, r1, #0
 8019f4c:	701a      	strb	r2, [r3, #0]
    if( ( SX1276.Settings.State == RF_RX_RUNNING ) && ( modem == MODEM_FSK ) )
 8019f4e:	4bb7      	ldr	r3, [pc, #732]	; (801a22c <SX1276SetTxConfig+0x2fc>)
 8019f50:	791b      	ldrb	r3, [r3, #4]
 8019f52:	2b01      	cmp	r3, #1
 8019f54:	d108      	bne.n	8019f68 <SX1276SetTxConfig+0x38>
 8019f56:	193b      	adds	r3, r7, r4
 8019f58:	781b      	ldrb	r3, [r3, #0]
 8019f5a:	2b00      	cmp	r3, #0
 8019f5c:	d104      	bne.n	8019f68 <SX1276SetTxConfig+0x38>
    {
        SX1276SetSleep( );
 8019f5e:	f000 fc63 	bl	801a828 <SX1276SetSleep>
        RADIO_DELAY_MS( 1 );
 8019f62:	2001      	movs	r0, #1
 8019f64:	f7ea ff41 	bl	8004dea <HAL_Delay>
    }

    SX1276SetModem( modem );
 8019f68:	240f      	movs	r4, #15
 8019f6a:	193b      	adds	r3, r7, r4
 8019f6c:	781b      	ldrb	r3, [r3, #0]
 8019f6e:	0018      	movs	r0, r3
 8019f70:	f000 fff8 	bl	801af64 <SX1276SetModem>

    SX1276SetRfTxPower( power );
 8019f74:	250e      	movs	r5, #14
 8019f76:	197b      	adds	r3, r7, r5
 8019f78:	781b      	ldrb	r3, [r3, #0]
 8019f7a:	b25b      	sxtb	r3, r3
 8019f7c:	0018      	movs	r0, r3
 8019f7e:	f000 fb41 	bl	801a604 <SX1276SetRfTxPower>
    power = 0;  // Изменение параметра мощности передачи
 8019f82:	197b      	adds	r3, r7, r5
 8019f84:	2200      	movs	r2, #0
 8019f86:	701a      	strb	r2, [r3, #0]
    switch( modem )
 8019f88:	193b      	adds	r3, r7, r4
 8019f8a:	781b      	ldrb	r3, [r3, #0]
 8019f8c:	2b00      	cmp	r3, #0
 8019f8e:	d003      	beq.n	8019f98 <SX1276SetTxConfig+0x68>
 8019f90:	2b01      	cmp	r3, #1
 8019f92:	d100      	bne.n	8019f96 <SX1276SetTxConfig+0x66>
 8019f94:	e0c1      	b.n	801a11a <SX1276SetTxConfig+0x1ea>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 8019f96:	e207      	b.n	801a3a8 <SX1276SetTxConfig+0x478>
            SX1276.Settings.Fsk.Power = power;
 8019f98:	4ba4      	ldr	r3, [pc, #656]	; (801a22c <SX1276SetTxConfig+0x2fc>)
 8019f9a:	220e      	movs	r2, #14
 8019f9c:	18ba      	adds	r2, r7, r2
 8019f9e:	7812      	ldrb	r2, [r2, #0]
 8019fa0:	731a      	strb	r2, [r3, #12]
            SX1276.Settings.Fsk.Fdev = fdev;
 8019fa2:	4ba2      	ldr	r3, [pc, #648]	; (801a22c <SX1276SetTxConfig+0x2fc>)
 8019fa4:	68ba      	ldr	r2, [r7, #8]
 8019fa6:	611a      	str	r2, [r3, #16]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8019fa8:	4ba0      	ldr	r3, [pc, #640]	; (801a22c <SX1276SetTxConfig+0x2fc>)
 8019faa:	687a      	ldr	r2, [r7, #4]
 8019fac:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 8019fae:	4b9f      	ldr	r3, [pc, #636]	; (801a22c <SX1276SetTxConfig+0x2fc>)
 8019fb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019fb2:	61da      	str	r2, [r3, #28]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8019fb4:	4b9d      	ldr	r3, [pc, #628]	; (801a22c <SX1276SetTxConfig+0x2fc>)
 8019fb6:	2420      	movs	r4, #32
 8019fb8:	2608      	movs	r6, #8
 8019fba:	2208      	movs	r2, #8
 8019fbc:	18ba      	adds	r2, r7, r2
 8019fbe:	1992      	adds	r2, r2, r6
 8019fc0:	1912      	adds	r2, r2, r4
 8019fc2:	8812      	ldrh	r2, [r2, #0]
 8019fc4:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8019fc6:	4b99      	ldr	r3, [pc, #612]	; (801a22c <SX1276SetTxConfig+0x2fc>)
 8019fc8:	2524      	movs	r5, #36	; 0x24
 8019fca:	2208      	movs	r2, #8
 8019fcc:	18ba      	adds	r2, r7, r2
 8019fce:	1992      	adds	r2, r2, r6
 8019fd0:	1952      	adds	r2, r2, r5
 8019fd2:	2122      	movs	r1, #34	; 0x22
 8019fd4:	7812      	ldrb	r2, [r2, #0]
 8019fd6:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8019fd8:	4b94      	ldr	r3, [pc, #592]	; (801a22c <SX1276SetTxConfig+0x2fc>)
 8019fda:	2228      	movs	r2, #40	; 0x28
 8019fdc:	2108      	movs	r1, #8
 8019fde:	468c      	mov	ip, r1
 8019fe0:	2108      	movs	r1, #8
 8019fe2:	4688      	mov	r8, r1
 8019fe4:	44b8      	add	r8, r7
 8019fe6:	44c4      	add	ip, r8
 8019fe8:	4462      	add	r2, ip
 8019fea:	2124      	movs	r1, #36	; 0x24
 8019fec:	7812      	ldrb	r2, [r2, #0]
 8019fee:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8019ff0:	4b8e      	ldr	r3, [pc, #568]	; (801a22c <SX1276SetTxConfig+0x2fc>)
 8019ff2:	2234      	movs	r2, #52	; 0x34
 8019ff4:	2108      	movs	r1, #8
 8019ff6:	468c      	mov	ip, r1
 8019ff8:	2108      	movs	r1, #8
 8019ffa:	4688      	mov	r8, r1
 8019ffc:	44b8      	add	r8, r7
 8019ffe:	44c4      	add	ip, r8
 801a000:	4462      	add	r2, ip
 801a002:	2125      	movs	r1, #37	; 0x25
 801a004:	7812      	ldrb	r2, [r2, #0]
 801a006:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 801a008:	4b88      	ldr	r3, [pc, #544]	; (801a22c <SX1276SetTxConfig+0x2fc>)
 801a00a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a00c:	629a      	str	r2, [r3, #40]	; 0x28
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 801a00e:	68b8      	ldr	r0, [r7, #8]
 801a010:	f7e8 fb82 	bl	8002718 <__aeabi_ui2d>
 801a014:	2200      	movs	r2, #0
 801a016:	4b86      	ldr	r3, [pc, #536]	; (801a230 <SX1276SetTxConfig+0x300>)
 801a018:	f7e7 f914 	bl	8001244 <__aeabi_ddiv>
 801a01c:	0002      	movs	r2, r0
 801a01e:	000b      	movs	r3, r1
 801a020:	0010      	movs	r0, r2
 801a022:	0019      	movs	r1, r3
 801a024:	f7e6 fa98 	bl	8000558 <__aeabi_d2uiz>
 801a028:	0003      	movs	r3, r0
 801a02a:	b29b      	uxth	r3, r3
 801a02c:	60bb      	str	r3, [r7, #8]
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 801a02e:	68bb      	ldr	r3, [r7, #8]
 801a030:	0a1b      	lsrs	r3, r3, #8
 801a032:	b2db      	uxtb	r3, r3
 801a034:	0019      	movs	r1, r3
 801a036:	2004      	movs	r0, #4
 801a038:	f000 ffee 	bl	801b018 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 801a03c:	68bb      	ldr	r3, [r7, #8]
 801a03e:	b2db      	uxtb	r3, r3
 801a040:	0019      	movs	r1, r3
 801a042:	2005      	movs	r0, #5
 801a044:	f000 ffe8 	bl	801b018 <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 801a048:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a04a:	f7e8 fb65 	bl	8002718 <__aeabi_ui2d>
 801a04e:	0002      	movs	r2, r0
 801a050:	000b      	movs	r3, r1
 801a052:	2000      	movs	r0, #0
 801a054:	4977      	ldr	r1, [pc, #476]	; (801a234 <SX1276SetTxConfig+0x304>)
 801a056:	f7e7 f8f5 	bl	8001244 <__aeabi_ddiv>
 801a05a:	0002      	movs	r2, r0
 801a05c:	000b      	movs	r3, r1
 801a05e:	0010      	movs	r0, r2
 801a060:	0019      	movs	r1, r3
 801a062:	f7e6 fa79 	bl	8000558 <__aeabi_d2uiz>
 801a066:	0003      	movs	r3, r0
 801a068:	b29b      	uxth	r3, r3
 801a06a:	62bb      	str	r3, [r7, #40]	; 0x28
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 801a06c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a06e:	0a1b      	lsrs	r3, r3, #8
 801a070:	b2db      	uxtb	r3, r3
 801a072:	0019      	movs	r1, r3
 801a074:	2002      	movs	r0, #2
 801a076:	f000 ffcf 	bl	801b018 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 801a07a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a07c:	b2db      	uxtb	r3, r3
 801a07e:	0019      	movs	r1, r3
 801a080:	2003      	movs	r0, #3
 801a082:	f000 ffc9 	bl	801b018 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 801a086:	2308      	movs	r3, #8
 801a088:	18fb      	adds	r3, r7, r3
 801a08a:	199b      	adds	r3, r3, r6
 801a08c:	191b      	adds	r3, r3, r4
 801a08e:	881b      	ldrh	r3, [r3, #0]
 801a090:	0a1b      	lsrs	r3, r3, #8
 801a092:	b29b      	uxth	r3, r3
 801a094:	b2db      	uxtb	r3, r3
 801a096:	0019      	movs	r1, r3
 801a098:	2025      	movs	r0, #37	; 0x25
 801a09a:	f000 ffbd 	bl	801b018 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 801a09e:	2308      	movs	r3, #8
 801a0a0:	18fb      	adds	r3, r7, r3
 801a0a2:	199b      	adds	r3, r3, r6
 801a0a4:	191b      	adds	r3, r3, r4
 801a0a6:	881b      	ldrh	r3, [r3, #0]
 801a0a8:	b2db      	uxtb	r3, r3
 801a0aa:	0019      	movs	r1, r3
 801a0ac:	2026      	movs	r0, #38	; 0x26
 801a0ae:	f000 ffb3 	bl	801b018 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 801a0b2:	2030      	movs	r0, #48	; 0x30
 801a0b4:	f000 ffc1 	bl	801b03a <SX1276Read>
 801a0b8:	0003      	movs	r3, r0
 801a0ba:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 801a0bc:	226f      	movs	r2, #111	; 0x6f
 801a0be:	4013      	ands	r3, r2
 801a0c0:	b25a      	sxtb	r2, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 801a0c2:	2308      	movs	r3, #8
 801a0c4:	18fb      	adds	r3, r7, r3
 801a0c6:	199b      	adds	r3, r3, r6
 801a0c8:	195b      	adds	r3, r3, r5
 801a0ca:	781b      	ldrb	r3, [r3, #0]
 801a0cc:	2b00      	cmp	r3, #0
 801a0ce:	d001      	beq.n	801a0d4 <SX1276SetTxConfig+0x1a4>
 801a0d0:	2300      	movs	r3, #0
 801a0d2:	e001      	b.n	801a0d8 <SX1276SetTxConfig+0x1a8>
 801a0d4:	2380      	movs	r3, #128	; 0x80
 801a0d6:	425b      	negs	r3, r3
 801a0d8:	4313      	orrs	r3, r2
 801a0da:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 801a0dc:	2328      	movs	r3, #40	; 0x28
 801a0de:	2108      	movs	r1, #8
 801a0e0:	468c      	mov	ip, r1
 801a0e2:	2108      	movs	r1, #8
 801a0e4:	4688      	mov	r8, r1
 801a0e6:	44b8      	add	r8, r7
 801a0e8:	44c4      	add	ip, r8
 801a0ea:	4463      	add	r3, ip
 801a0ec:	781b      	ldrb	r3, [r3, #0]
 801a0ee:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 801a0f0:	b25b      	sxtb	r3, r3
 801a0f2:	4313      	orrs	r3, r2
 801a0f4:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 801a0f6:	b2db      	uxtb	r3, r3
 801a0f8:	0019      	movs	r1, r3
 801a0fa:	2030      	movs	r0, #48	; 0x30
 801a0fc:	f000 ff8c 	bl	801b018 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 801a100:	2031      	movs	r0, #49	; 0x31
 801a102:	f000 ff9a 	bl	801b03a <SX1276Read>
 801a106:	0003      	movs	r3, r0
 801a108:	001a      	movs	r2, r3
 801a10a:	2340      	movs	r3, #64	; 0x40
 801a10c:	4313      	orrs	r3, r2
 801a10e:	b2db      	uxtb	r3, r3
 801a110:	0019      	movs	r1, r3
 801a112:	2031      	movs	r0, #49	; 0x31
 801a114:	f000 ff80 	bl	801b018 <SX1276Write>
        break;
 801a118:	e146      	b.n	801a3a8 <SX1276SetTxConfig+0x478>
            SX1276.Settings.LoRa.Power = power;
 801a11a:	4b44      	ldr	r3, [pc, #272]	; (801a22c <SX1276SetTxConfig+0x2fc>)
 801a11c:	220e      	movs	r2, #14
 801a11e:	18ba      	adds	r2, r7, r2
 801a120:	2140      	movs	r1, #64	; 0x40
 801a122:	7812      	ldrb	r2, [r2, #0]
 801a124:	545a      	strb	r2, [r3, r1]
            if( bandwidth > 2 )
 801a126:	687b      	ldr	r3, [r7, #4]
 801a128:	2b02      	cmp	r3, #2
 801a12a:	d900      	bls.n	801a12e <SX1276SetTxConfig+0x1fe>
                while( 1 );
 801a12c:	e7fe      	b.n	801a12c <SX1276SetTxConfig+0x1fc>
            bandwidth += 7;
 801a12e:	687b      	ldr	r3, [r7, #4]
 801a130:	3307      	adds	r3, #7
 801a132:	607b      	str	r3, [r7, #4]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 801a134:	4b3d      	ldr	r3, [pc, #244]	; (801a22c <SX1276SetTxConfig+0x2fc>)
 801a136:	687a      	ldr	r2, [r7, #4]
 801a138:	645a      	str	r2, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 801a13a:	4b3c      	ldr	r3, [pc, #240]	; (801a22c <SX1276SetTxConfig+0x2fc>)
 801a13c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a13e:	649a      	str	r2, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.Coderate = coderate;
 801a140:	4b3a      	ldr	r3, [pc, #232]	; (801a22c <SX1276SetTxConfig+0x2fc>)
 801a142:	221c      	movs	r2, #28
 801a144:	2108      	movs	r1, #8
 801a146:	468c      	mov	ip, r1
 801a148:	2108      	movs	r1, #8
 801a14a:	4688      	mov	r8, r1
 801a14c:	44b8      	add	r8, r7
 801a14e:	44c4      	add	ip, r8
 801a150:	4462      	add	r2, ip
 801a152:	214d      	movs	r1, #77	; 0x4d
 801a154:	7812      	ldrb	r2, [r2, #0]
 801a156:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 801a158:	4b34      	ldr	r3, [pc, #208]	; (801a22c <SX1276SetTxConfig+0x2fc>)
 801a15a:	2220      	movs	r2, #32
 801a15c:	2108      	movs	r1, #8
 801a15e:	468c      	mov	ip, r1
 801a160:	2108      	movs	r1, #8
 801a162:	4688      	mov	r8, r1
 801a164:	44b8      	add	r8, r7
 801a166:	44c4      	add	ip, r8
 801a168:	4462      	add	r2, ip
 801a16a:	214e      	movs	r1, #78	; 0x4e
 801a16c:	8812      	ldrh	r2, [r2, #0]
 801a16e:	525a      	strh	r2, [r3, r1]
            SX1276.Settings.LoRa.FixLen = fixLen;
 801a170:	4b2e      	ldr	r3, [pc, #184]	; (801a22c <SX1276SetTxConfig+0x2fc>)
 801a172:	2224      	movs	r2, #36	; 0x24
 801a174:	2108      	movs	r1, #8
 801a176:	468c      	mov	ip, r1
 801a178:	2108      	movs	r1, #8
 801a17a:	4688      	mov	r8, r1
 801a17c:	44b8      	add	r8, r7
 801a17e:	44c4      	add	ip, r8
 801a180:	4462      	add	r2, ip
 801a182:	2150      	movs	r1, #80	; 0x50
 801a184:	7812      	ldrb	r2, [r2, #0]
 801a186:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 801a188:	4b28      	ldr	r3, [pc, #160]	; (801a22c <SX1276SetTxConfig+0x2fc>)
 801a18a:	222c      	movs	r2, #44	; 0x2c
 801a18c:	2108      	movs	r1, #8
 801a18e:	468c      	mov	ip, r1
 801a190:	2108      	movs	r1, #8
 801a192:	4688      	mov	r8, r1
 801a194:	44b8      	add	r8, r7
 801a196:	44c4      	add	ip, r8
 801a198:	4462      	add	r2, ip
 801a19a:	2153      	movs	r1, #83	; 0x53
 801a19c:	7812      	ldrb	r2, [r2, #0]
 801a19e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 801a1a0:	4b22      	ldr	r3, [pc, #136]	; (801a22c <SX1276SetTxConfig+0x2fc>)
 801a1a2:	2230      	movs	r2, #48	; 0x30
 801a1a4:	2108      	movs	r1, #8
 801a1a6:	468c      	mov	ip, r1
 801a1a8:	2108      	movs	r1, #8
 801a1aa:	4688      	mov	r8, r1
 801a1ac:	44b8      	add	r8, r7
 801a1ae:	44c4      	add	ip, r8
 801a1b0:	4462      	add	r2, ip
 801a1b2:	2154      	movs	r1, #84	; 0x54
 801a1b4:	7812      	ldrb	r2, [r2, #0]
 801a1b6:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 801a1b8:	4b1c      	ldr	r3, [pc, #112]	; (801a22c <SX1276SetTxConfig+0x2fc>)
 801a1ba:	2228      	movs	r2, #40	; 0x28
 801a1bc:	2108      	movs	r1, #8
 801a1be:	468c      	mov	ip, r1
 801a1c0:	2108      	movs	r1, #8
 801a1c2:	4688      	mov	r8, r1
 801a1c4:	44b8      	add	r8, r7
 801a1c6:	44c4      	add	ip, r8
 801a1c8:	4462      	add	r2, ip
 801a1ca:	2152      	movs	r1, #82	; 0x52
 801a1cc:	7812      	ldrb	r2, [r2, #0]
 801a1ce:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 801a1d0:	4b16      	ldr	r3, [pc, #88]	; (801a22c <SX1276SetTxConfig+0x2fc>)
 801a1d2:	2234      	movs	r2, #52	; 0x34
 801a1d4:	2108      	movs	r1, #8
 801a1d6:	468c      	mov	ip, r1
 801a1d8:	2108      	movs	r1, #8
 801a1da:	4688      	mov	r8, r1
 801a1dc:	44b8      	add	r8, r7
 801a1de:	44c4      	add	ip, r8
 801a1e0:	4462      	add	r2, ip
 801a1e2:	2155      	movs	r1, #85	; 0x55
 801a1e4:	7812      	ldrb	r2, [r2, #0]
 801a1e6:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.TxTimeout = timeout;
 801a1e8:	4b10      	ldr	r3, [pc, #64]	; (801a22c <SX1276SetTxConfig+0x2fc>)
 801a1ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a1ec:	659a      	str	r2, [r3, #88]	; 0x58
            if( datarate > 12 )
 801a1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a1f0:	2b0c      	cmp	r3, #12
 801a1f2:	d902      	bls.n	801a1fa <SX1276SetTxConfig+0x2ca>
                datarate = 12;
 801a1f4:	230c      	movs	r3, #12
 801a1f6:	62bb      	str	r3, [r7, #40]	; 0x28
 801a1f8:	e004      	b.n	801a204 <SX1276SetTxConfig+0x2d4>
            else if( datarate < 6 )
 801a1fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a1fc:	2b05      	cmp	r3, #5
 801a1fe:	d801      	bhi.n	801a204 <SX1276SetTxConfig+0x2d4>
                datarate = 6;
 801a200:	2306      	movs	r3, #6
 801a202:	62bb      	str	r3, [r7, #40]	; 0x28
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801a204:	687b      	ldr	r3, [r7, #4]
 801a206:	2b07      	cmp	r3, #7
 801a208:	d105      	bne.n	801a216 <SX1276SetTxConfig+0x2e6>
 801a20a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a20c:	2b0b      	cmp	r3, #11
 801a20e:	d008      	beq.n	801a222 <SX1276SetTxConfig+0x2f2>
 801a210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a212:	2b0c      	cmp	r3, #12
 801a214:	d005      	beq.n	801a222 <SX1276SetTxConfig+0x2f2>
 801a216:	687b      	ldr	r3, [r7, #4]
 801a218:	2b08      	cmp	r3, #8
 801a21a:	d10d      	bne.n	801a238 <SX1276SetTxConfig+0x308>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 801a21c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a21e:	2b0c      	cmp	r3, #12
 801a220:	d10a      	bne.n	801a238 <SX1276SetTxConfig+0x308>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 801a222:	4b02      	ldr	r3, [pc, #8]	; (801a22c <SX1276SetTxConfig+0x2fc>)
 801a224:	224c      	movs	r2, #76	; 0x4c
 801a226:	2101      	movs	r1, #1
 801a228:	5499      	strb	r1, [r3, r2]
 801a22a:	e009      	b.n	801a240 <SX1276SetTxConfig+0x310>
 801a22c:	2000177c 	.word	0x2000177c
 801a230:	404e8480 	.word	0x404e8480
 801a234:	417e8480 	.word	0x417e8480
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 801a238:	4b5e      	ldr	r3, [pc, #376]	; (801a3b4 <SX1276SetTxConfig+0x484>)
 801a23a:	224c      	movs	r2, #76	; 0x4c
 801a23c:	2100      	movs	r1, #0
 801a23e:	5499      	strb	r1, [r3, r2]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 801a240:	4b5c      	ldr	r3, [pc, #368]	; (801a3b4 <SX1276SetTxConfig+0x484>)
 801a242:	2253      	movs	r2, #83	; 0x53
 801a244:	5c9b      	ldrb	r3, [r3, r2]
 801a246:	2b00      	cmp	r3, #0
 801a248:	d013      	beq.n	801a272 <SX1276SetTxConfig+0x342>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 801a24a:	2044      	movs	r0, #68	; 0x44
 801a24c:	f000 fef5 	bl	801b03a <SX1276Read>
 801a250:	0003      	movs	r3, r0
 801a252:	001a      	movs	r2, r3
 801a254:	2380      	movs	r3, #128	; 0x80
 801a256:	425b      	negs	r3, r3
 801a258:	4313      	orrs	r3, r2
 801a25a:	b2db      	uxtb	r3, r3
 801a25c:	0019      	movs	r1, r3
 801a25e:	2044      	movs	r0, #68	; 0x44
 801a260:	f000 feda 	bl	801b018 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 801a264:	4b53      	ldr	r3, [pc, #332]	; (801a3b4 <SX1276SetTxConfig+0x484>)
 801a266:	2254      	movs	r2, #84	; 0x54
 801a268:	5c9b      	ldrb	r3, [r3, r2]
 801a26a:	0019      	movs	r1, r3
 801a26c:	2024      	movs	r0, #36	; 0x24
 801a26e:	f000 fed3 	bl	801b018 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 801a272:	201d      	movs	r0, #29
 801a274:	f000 fee1 	bl	801b03a <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 801a278:	687b      	ldr	r3, [r7, #4]
 801a27a:	b2db      	uxtb	r3, r3
 801a27c:	011b      	lsls	r3, r3, #4
 801a27e:	b2da      	uxtb	r2, r3
 801a280:	231c      	movs	r3, #28
 801a282:	2108      	movs	r1, #8
 801a284:	468c      	mov	ip, r1
 801a286:	2108      	movs	r1, #8
 801a288:	4688      	mov	r8, r1
 801a28a:	44b8      	add	r8, r7
 801a28c:	44c4      	add	ip, r8
 801a28e:	4463      	add	r3, ip
 801a290:	781b      	ldrb	r3, [r3, #0]
 801a292:	18db      	adds	r3, r3, r3
 801a294:	b2db      	uxtb	r3, r3
 801a296:	4313      	orrs	r3, r2
 801a298:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 801a29a:	2324      	movs	r3, #36	; 0x24
 801a29c:	2108      	movs	r1, #8
 801a29e:	468c      	mov	ip, r1
 801a2a0:	2108      	movs	r1, #8
 801a2a2:	4688      	mov	r8, r1
 801a2a4:	44b8      	add	r8, r7
 801a2a6:	44c4      	add	ip, r8
 801a2a8:	4463      	add	r3, ip
 801a2aa:	781b      	ldrb	r3, [r3, #0]
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 801a2ac:	4313      	orrs	r3, r2
 801a2ae:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 801a2b0:	0019      	movs	r1, r3
 801a2b2:	201d      	movs	r0, #29
 801a2b4:	f000 feb0 	bl	801b018 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 801a2b8:	201e      	movs	r0, #30
 801a2ba:	f000 febe 	bl	801b03a <SX1276Read>
 801a2be:	0003      	movs	r3, r0
 801a2c0:	001a      	movs	r2, r3
                           RFLR_MODEMCONFIG2_SF_MASK &
 801a2c2:	230b      	movs	r3, #11
 801a2c4:	4013      	ands	r3, r2
 801a2c6:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 801a2c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a2ca:	b2db      	uxtb	r3, r3
 801a2cc:	011b      	lsls	r3, r3, #4
 801a2ce:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
 801a2d0:	4313      	orrs	r3, r2
 801a2d2:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 801a2d4:	2328      	movs	r3, #40	; 0x28
 801a2d6:	2108      	movs	r1, #8
 801a2d8:	468c      	mov	ip, r1
 801a2da:	2108      	movs	r1, #8
 801a2dc:	4688      	mov	r8, r1
 801a2de:	44b8      	add	r8, r7
 801a2e0:	44c4      	add	ip, r8
 801a2e2:	4463      	add	r3, ip
 801a2e4:	781b      	ldrb	r3, [r3, #0]
 801a2e6:	009b      	lsls	r3, r3, #2
 801a2e8:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 801a2ea:	4313      	orrs	r3, r2
 801a2ec:	b2db      	uxtb	r3, r3
 801a2ee:	0019      	movs	r1, r3
 801a2f0:	201e      	movs	r0, #30
 801a2f2:	f000 fe91 	bl	801b018 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 801a2f6:	2026      	movs	r0, #38	; 0x26
 801a2f8:	f000 fe9f 	bl	801b03a <SX1276Read>
 801a2fc:	0003      	movs	r3, r0
 801a2fe:	b25b      	sxtb	r3, r3
 801a300:	2208      	movs	r2, #8
 801a302:	4393      	bics	r3, r2
 801a304:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 801a306:	4b2b      	ldr	r3, [pc, #172]	; (801a3b4 <SX1276SetTxConfig+0x484>)
 801a308:	214c      	movs	r1, #76	; 0x4c
 801a30a:	5c5b      	ldrb	r3, [r3, r1]
 801a30c:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 801a30e:	b25b      	sxtb	r3, r3
 801a310:	4313      	orrs	r3, r2
 801a312:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 801a314:	b2db      	uxtb	r3, r3
 801a316:	0019      	movs	r1, r3
 801a318:	2026      	movs	r0, #38	; 0x26
 801a31a:	f000 fe7d 	bl	801b018 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 801a31e:	2420      	movs	r4, #32
 801a320:	2508      	movs	r5, #8
 801a322:	2308      	movs	r3, #8
 801a324:	18fb      	adds	r3, r7, r3
 801a326:	195b      	adds	r3, r3, r5
 801a328:	191b      	adds	r3, r3, r4
 801a32a:	881b      	ldrh	r3, [r3, #0]
 801a32c:	0a1b      	lsrs	r3, r3, #8
 801a32e:	b29b      	uxth	r3, r3
 801a330:	b2db      	uxtb	r3, r3
 801a332:	0019      	movs	r1, r3
 801a334:	2020      	movs	r0, #32
 801a336:	f000 fe6f 	bl	801b018 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 801a33a:	2308      	movs	r3, #8
 801a33c:	18fb      	adds	r3, r7, r3
 801a33e:	195b      	adds	r3, r3, r5
 801a340:	191b      	adds	r3, r3, r4
 801a342:	881b      	ldrh	r3, [r3, #0]
 801a344:	b2db      	uxtb	r3, r3
 801a346:	0019      	movs	r1, r3
 801a348:	2021      	movs	r0, #33	; 0x21
 801a34a:	f000 fe65 	bl	801b018 <SX1276Write>
            if( datarate == 6 )
 801a34e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a350:	2b06      	cmp	r3, #6
 801a352:	d114      	bne.n	801a37e <SX1276SetTxConfig+0x44e>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 801a354:	2031      	movs	r0, #49	; 0x31
 801a356:	f000 fe70 	bl	801b03a <SX1276Read>
 801a35a:	0003      	movs	r3, r0
 801a35c:	b25b      	sxtb	r3, r3
 801a35e:	2207      	movs	r2, #7
 801a360:	4393      	bics	r3, r2
 801a362:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 801a364:	2205      	movs	r2, #5
 801a366:	4313      	orrs	r3, r2
 801a368:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 801a36a:	b2db      	uxtb	r3, r3
 801a36c:	0019      	movs	r1, r3
 801a36e:	2031      	movs	r0, #49	; 0x31
 801a370:	f000 fe52 	bl	801b018 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 801a374:	210c      	movs	r1, #12
 801a376:	2037      	movs	r0, #55	; 0x37
 801a378:	f000 fe4e 	bl	801b018 <SX1276Write>
        break;
 801a37c:	e013      	b.n	801a3a6 <SX1276SetTxConfig+0x476>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 801a37e:	2031      	movs	r0, #49	; 0x31
 801a380:	f000 fe5b 	bl	801b03a <SX1276Read>
 801a384:	0003      	movs	r3, r0
 801a386:	b25b      	sxtb	r3, r3
 801a388:	2207      	movs	r2, #7
 801a38a:	4393      	bics	r3, r2
 801a38c:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 801a38e:	2203      	movs	r2, #3
 801a390:	4313      	orrs	r3, r2
 801a392:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 801a394:	b2db      	uxtb	r3, r3
 801a396:	0019      	movs	r1, r3
 801a398:	2031      	movs	r0, #49	; 0x31
 801a39a:	f000 fe3d 	bl	801b018 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 801a39e:	210a      	movs	r1, #10
 801a3a0:	2037      	movs	r0, #55	; 0x37
 801a3a2:	f000 fe39 	bl	801b018 <SX1276Write>
        break;
 801a3a6:	46c0      	nop			; (mov r8, r8)
}
 801a3a8:	46c0      	nop			; (mov r8, r8)
 801a3aa:	46bd      	mov	sp, r7
 801a3ac:	b004      	add	sp, #16
 801a3ae:	bc80      	pop	{r7}
 801a3b0:	46b8      	mov	r8, r7
 801a3b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a3b4:	2000177c 	.word	0x2000177c

0801a3b8 <SX1276GetTimeOnAir>:

uint32_t SX1276GetTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                              uint32_t datarate, uint8_t coderate,
                              uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                              bool crcOn )
{
 801a3b8:	b590      	push	{r4, r7, lr}
 801a3ba:	b08b      	sub	sp, #44	; 0x2c
 801a3bc:	af04      	add	r7, sp, #16
 801a3be:	60b9      	str	r1, [r7, #8]
 801a3c0:	607a      	str	r2, [r7, #4]
 801a3c2:	0019      	movs	r1, r3
 801a3c4:	240f      	movs	r4, #15
 801a3c6:	193b      	adds	r3, r7, r4
 801a3c8:	1c02      	adds	r2, r0, #0
 801a3ca:	701a      	strb	r2, [r3, #0]
 801a3cc:	230e      	movs	r3, #14
 801a3ce:	18fb      	adds	r3, r7, r3
 801a3d0:	1c0a      	adds	r2, r1, #0
 801a3d2:	701a      	strb	r2, [r3, #0]
    uint32_t numerator = 0;
 801a3d4:	2300      	movs	r3, #0
 801a3d6:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 801a3d8:	2301      	movs	r3, #1
 801a3da:	613b      	str	r3, [r7, #16]

    switch( modem )
 801a3dc:	193b      	adds	r3, r7, r4
 801a3de:	781b      	ldrb	r3, [r3, #0]
 801a3e0:	2b00      	cmp	r3, #0
 801a3e2:	d002      	beq.n	801a3ea <SX1276GetTimeOnAir+0x32>
 801a3e4:	2b01      	cmp	r3, #1
 801a3e6:	d01a      	beq.n	801a41e <SX1276GetTimeOnAir+0x66>
 801a3e8:	e03f      	b.n	801a46a <SX1276GetTimeOnAir+0xb2>
    {
    case MODEM_FSK:
        {
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 801a3ea:	2334      	movs	r3, #52	; 0x34
 801a3ec:	18fb      	adds	r3, r7, r3
 801a3ee:	781c      	ldrb	r4, [r3, #0]
 801a3f0:	2330      	movs	r3, #48	; 0x30
 801a3f2:	18fb      	adds	r3, r7, r3
 801a3f4:	781a      	ldrb	r2, [r3, #0]
 801a3f6:	232c      	movs	r3, #44	; 0x2c
 801a3f8:	18fb      	adds	r3, r7, r3
 801a3fa:	7819      	ldrb	r1, [r3, #0]
 801a3fc:	2328      	movs	r3, #40	; 0x28
 801a3fe:	18fb      	adds	r3, r7, r3
 801a400:	8818      	ldrh	r0, [r3, #0]
 801a402:	0023      	movs	r3, r4
 801a404:	f000 ff7e 	bl	801b304 <SX1276GetGfskTimeOnAirNumerator>
 801a408:	0002      	movs	r2, r0
 801a40a:	0013      	movs	r3, r2
 801a40c:	015b      	lsls	r3, r3, #5
 801a40e:	1a9b      	subs	r3, r3, r2
 801a410:	009b      	lsls	r3, r3, #2
 801a412:	189b      	adds	r3, r3, r2
 801a414:	00db      	lsls	r3, r3, #3
 801a416:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 801a418:	687b      	ldr	r3, [r7, #4]
 801a41a:	613b      	str	r3, [r7, #16]
        }
        break;
 801a41c:	e025      	b.n	801a46a <SX1276GetTimeOnAir+0xb2>
    case MODEM_LORA:
        {
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 801a41e:	2328      	movs	r3, #40	; 0x28
 801a420:	18fb      	adds	r3, r7, r3
 801a422:	881c      	ldrh	r4, [r3, #0]
 801a424:	230e      	movs	r3, #14
 801a426:	18fb      	adds	r3, r7, r3
 801a428:	781a      	ldrb	r2, [r3, #0]
 801a42a:	6879      	ldr	r1, [r7, #4]
 801a42c:	68b8      	ldr	r0, [r7, #8]
 801a42e:	2334      	movs	r3, #52	; 0x34
 801a430:	18fb      	adds	r3, r7, r3
 801a432:	781b      	ldrb	r3, [r3, #0]
 801a434:	9302      	str	r3, [sp, #8]
 801a436:	2330      	movs	r3, #48	; 0x30
 801a438:	18fb      	adds	r3, r7, r3
 801a43a:	781b      	ldrb	r3, [r3, #0]
 801a43c:	9301      	str	r3, [sp, #4]
 801a43e:	232c      	movs	r3, #44	; 0x2c
 801a440:	18fb      	adds	r3, r7, r3
 801a442:	781b      	ldrb	r3, [r3, #0]
 801a444:	9300      	str	r3, [sp, #0]
 801a446:	0023      	movs	r3, r4
 801a448:	f000 ff96 	bl	801b378 <SX1276GetLoRaTimeOnAirNumerator>
 801a44c:	0002      	movs	r2, r0
 801a44e:	0013      	movs	r3, r2
 801a450:	015b      	lsls	r3, r3, #5
 801a452:	1a9b      	subs	r3, r3, r2
 801a454:	009b      	lsls	r3, r3, #2
 801a456:	189b      	adds	r3, r3, r2
 801a458:	00db      	lsls	r3, r3, #3
 801a45a:	617b      	str	r3, [r7, #20]
                                                                   payloadLen, crcOn );
            denominator = SX1276GetLoRaBandwidthInHz( bandwidth );
 801a45c:	68bb      	ldr	r3, [r7, #8]
 801a45e:	0018      	movs	r0, r3
 801a460:	f000 ff1e 	bl	801b2a0 <SX1276GetLoRaBandwidthInHz>
 801a464:	0003      	movs	r3, r0
 801a466:	613b      	str	r3, [r7, #16]
        }
        break;
 801a468:	46c0      	nop			; (mov r8, r8)
    }
    // Perform integral ceil()
    return ( numerator + denominator - 1 ) / denominator;
 801a46a:	697a      	ldr	r2, [r7, #20]
 801a46c:	693b      	ldr	r3, [r7, #16]
 801a46e:	18d3      	adds	r3, r2, r3
 801a470:	3b01      	subs	r3, #1
 801a472:	6939      	ldr	r1, [r7, #16]
 801a474:	0018      	movs	r0, r3
 801a476:	f7e5 fe4f 	bl	8000118 <__udivsi3>
 801a47a:	0003      	movs	r3, r0
}
 801a47c:	0018      	movs	r0, r3
 801a47e:	46bd      	mov	sp, r7
 801a480:	b007      	add	sp, #28
 801a482:	bd90      	pop	{r4, r7, pc}

0801a484 <SX1276Send>:

void SX1276Send( uint8_t *buffer, uint8_t size )
{
 801a484:	b580      	push	{r7, lr}
 801a486:	b084      	sub	sp, #16
 801a488:	af00      	add	r7, sp, #0
 801a48a:	6078      	str	r0, [r7, #4]
 801a48c:	000a      	movs	r2, r1
 801a48e:	1cfb      	adds	r3, r7, #3
 801a490:	701a      	strb	r2, [r3, #0]
    uint32_t txTimeout = 0;
 801a492:	2300      	movs	r3, #0
 801a494:	60fb      	str	r3, [r7, #12]

    switch( SX1276.Settings.Modem )
 801a496:	4b59      	ldr	r3, [pc, #356]	; (801a5fc <SX1276Send+0x178>)
 801a498:	795b      	ldrb	r3, [r3, #5]
 801a49a:	2b00      	cmp	r3, #0
 801a49c:	d002      	beq.n	801a4a4 <SX1276Send+0x20>
 801a49e:	2b01      	cmp	r3, #1
 801a4a0:	d04c      	beq.n	801a53c <SX1276Send+0xb8>
 801a4a2:	e0a2      	b.n	801a5ea <SX1276Send+0x166>
    {
    case MODEM_FSK:
        {
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801a4a4:	4b55      	ldr	r3, [pc, #340]	; (801a5fc <SX1276Send+0x178>)
 801a4a6:	2200      	movs	r2, #0
 801a4a8:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = size;
 801a4aa:	1cfb      	adds	r3, r7, #3
 801a4ac:	781b      	ldrb	r3, [r3, #0]
 801a4ae:	b29a      	uxth	r2, r3
 801a4b0:	4b52      	ldr	r3, [pc, #328]	; (801a5fc <SX1276Send+0x178>)
 801a4b2:	875a      	strh	r2, [r3, #58]	; 0x3a

            if( SX1276.Settings.Fsk.FixLen == false )
 801a4b4:	4b51      	ldr	r3, [pc, #324]	; (801a5fc <SX1276Send+0x178>)
 801a4b6:	2222      	movs	r2, #34	; 0x22
 801a4b8:	5c9b      	ldrb	r3, [r3, r2]
 801a4ba:	2201      	movs	r2, #1
 801a4bc:	4053      	eors	r3, r2
 801a4be:	b2db      	uxtb	r3, r3
 801a4c0:	2b00      	cmp	r3, #0
 801a4c2:	d005      	beq.n	801a4d0 <SX1276Send+0x4c>
            {
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 801a4c4:	1cfb      	adds	r3, r7, #3
 801a4c6:	2101      	movs	r1, #1
 801a4c8:	0018      	movs	r0, r3
 801a4ca:	f000 fe31 	bl	801b130 <SX1276WriteFifo>
 801a4ce:	e005      	b.n	801a4dc <SX1276Send+0x58>
            }
            else
            {
                SX1276Write( REG_PAYLOADLENGTH, size );
 801a4d0:	1cfb      	adds	r3, r7, #3
 801a4d2:	781b      	ldrb	r3, [r3, #0]
 801a4d4:	0019      	movs	r1, r3
 801a4d6:	2032      	movs	r0, #50	; 0x32
 801a4d8:	f000 fd9e 	bl	801b018 <SX1276Write>
            }

            if( ( size > 0 ) && ( size <= 64 ) )
 801a4dc:	1cfb      	adds	r3, r7, #3
 801a4de:	781b      	ldrb	r3, [r3, #0]
 801a4e0:	2b00      	cmp	r3, #0
 801a4e2:	d009      	beq.n	801a4f8 <SX1276Send+0x74>
 801a4e4:	1cfb      	adds	r3, r7, #3
 801a4e6:	781b      	ldrb	r3, [r3, #0]
 801a4e8:	2b40      	cmp	r3, #64	; 0x40
 801a4ea:	d805      	bhi.n	801a4f8 <SX1276Send+0x74>
            {
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 801a4ec:	1cfb      	adds	r3, r7, #3
 801a4ee:	7819      	ldrb	r1, [r3, #0]
 801a4f0:	4b42      	ldr	r3, [pc, #264]	; (801a5fc <SX1276Send+0x178>)
 801a4f2:	223f      	movs	r2, #63	; 0x3f
 801a4f4:	5499      	strb	r1, [r3, r2]
 801a4f6:	e00b      	b.n	801a510 <SX1276Send+0x8c>
            }
            else
            {
                RADIO_MEMCPY8( RxTxBuffer, buffer, size );
 801a4f8:	1cfb      	adds	r3, r7, #3
 801a4fa:	781b      	ldrb	r3, [r3, #0]
 801a4fc:	b29a      	uxth	r2, r3
 801a4fe:	6879      	ldr	r1, [r7, #4]
 801a500:	4b3f      	ldr	r3, [pc, #252]	; (801a600 <SX1276Send+0x17c>)
 801a502:	0018      	movs	r0, r3
 801a504:	f002 f838 	bl	801c578 <UTIL_MEM_cpy_8>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 801a508:	4b3c      	ldr	r3, [pc, #240]	; (801a5fc <SX1276Send+0x178>)
 801a50a:	223f      	movs	r2, #63	; 0x3f
 801a50c:	2120      	movs	r1, #32
 801a50e:	5499      	strb	r1, [r3, r2]
            }

            // Write payload buffer
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 801a510:	4b3a      	ldr	r3, [pc, #232]	; (801a5fc <SX1276Send+0x178>)
 801a512:	223f      	movs	r2, #63	; 0x3f
 801a514:	5c9a      	ldrb	r2, [r3, r2]
 801a516:	687b      	ldr	r3, [r7, #4]
 801a518:	0011      	movs	r1, r2
 801a51a:	0018      	movs	r0, r3
 801a51c:	f000 fe08 	bl	801b130 <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 801a520:	4b36      	ldr	r3, [pc, #216]	; (801a5fc <SX1276Send+0x178>)
 801a522:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 801a524:	4b35      	ldr	r3, [pc, #212]	; (801a5fc <SX1276Send+0x178>)
 801a526:	213f      	movs	r1, #63	; 0x3f
 801a528:	5c5b      	ldrb	r3, [r3, r1]
 801a52a:	b29b      	uxth	r3, r3
 801a52c:	18d3      	adds	r3, r2, r3
 801a52e:	b29a      	uxth	r2, r3
 801a530:	4b32      	ldr	r3, [pc, #200]	; (801a5fc <SX1276Send+0x178>)
 801a532:	879a      	strh	r2, [r3, #60]	; 0x3c
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 801a534:	4b31      	ldr	r3, [pc, #196]	; (801a5fc <SX1276Send+0x178>)
 801a536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a538:	60fb      	str	r3, [r7, #12]
        }
        break;
 801a53a:	e056      	b.n	801a5ea <SX1276Send+0x166>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 801a53c:	4b2f      	ldr	r3, [pc, #188]	; (801a5fc <SX1276Send+0x178>)
 801a53e:	2255      	movs	r2, #85	; 0x55
 801a540:	5c9b      	ldrb	r3, [r3, r2]
 801a542:	2b00      	cmp	r3, #0
 801a544:	d011      	beq.n	801a56a <SX1276Send+0xe6>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 801a546:	2033      	movs	r0, #51	; 0x33
 801a548:	f000 fd77 	bl	801b03a <SX1276Read>
 801a54c:	0003      	movs	r3, r0
 801a54e:	001a      	movs	r2, r3
 801a550:	2341      	movs	r3, #65	; 0x41
 801a552:	439a      	bics	r2, r3
 801a554:	0013      	movs	r3, r2
 801a556:	b2db      	uxtb	r3, r3
 801a558:	0019      	movs	r1, r3
 801a55a:	2033      	movs	r0, #51	; 0x33
 801a55c:	f000 fd5c 	bl	801b018 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 801a560:	2119      	movs	r1, #25
 801a562:	203b      	movs	r0, #59	; 0x3b
 801a564:	f000 fd58 	bl	801b018 <SX1276Write>
 801a568:	e013      	b.n	801a592 <SX1276Send+0x10e>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 801a56a:	2033      	movs	r0, #51	; 0x33
 801a56c:	f000 fd65 	bl	801b03a <SX1276Read>
 801a570:	0003      	movs	r3, r0
 801a572:	b25b      	sxtb	r3, r3
 801a574:	2241      	movs	r2, #65	; 0x41
 801a576:	4393      	bics	r3, r2
 801a578:	b25b      	sxtb	r3, r3
 801a57a:	2201      	movs	r2, #1
 801a57c:	4313      	orrs	r3, r2
 801a57e:	b25b      	sxtb	r3, r3
 801a580:	b2db      	uxtb	r3, r3
 801a582:	0019      	movs	r1, r3
 801a584:	2033      	movs	r0, #51	; 0x33
 801a586:	f000 fd47 	bl	801b018 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 801a58a:	211d      	movs	r1, #29
 801a58c:	203b      	movs	r0, #59	; 0x3b
 801a58e:	f000 fd43 	bl	801b018 <SX1276Write>
            }

            SX1276.Settings.LoRaPacketHandler.Size = size;
 801a592:	1cfb      	adds	r3, r7, #3
 801a594:	7819      	ldrb	r1, [r3, #0]
 801a596:	4b19      	ldr	r3, [pc, #100]	; (801a5fc <SX1276Send+0x178>)
 801a598:	2264      	movs	r2, #100	; 0x64
 801a59a:	5499      	strb	r1, [r3, r2]

            // Initializes the payload size
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 801a59c:	1cfb      	adds	r3, r7, #3
 801a59e:	781b      	ldrb	r3, [r3, #0]
 801a5a0:	0019      	movs	r1, r3
 801a5a2:	2022      	movs	r0, #34	; 0x22
 801a5a4:	f000 fd38 	bl	801b018 <SX1276Write>

            // Full buffer used for Tx
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 801a5a8:	2100      	movs	r1, #0
 801a5aa:	200e      	movs	r0, #14
 801a5ac:	f000 fd34 	bl	801b018 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 801a5b0:	2100      	movs	r1, #0
 801a5b2:	200d      	movs	r0, #13
 801a5b4:	f000 fd30 	bl	801b018 <SX1276Write>

            // FIFO operations can not take place in Sleep mode
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 801a5b8:	2001      	movs	r0, #1
 801a5ba:	f000 fd3e 	bl	801b03a <SX1276Read>
 801a5be:	0003      	movs	r3, r0
 801a5c0:	001a      	movs	r2, r3
 801a5c2:	23f8      	movs	r3, #248	; 0xf8
 801a5c4:	439a      	bics	r2, r3
 801a5c6:	1e13      	subs	r3, r2, #0
 801a5c8:	d104      	bne.n	801a5d4 <SX1276Send+0x150>
            {
                SX1276SetStby( );
 801a5ca:	f000 f94f 	bl	801a86c <SX1276SetStby>
                RADIO_DELAY_MS( 1 );
 801a5ce:	2001      	movs	r0, #1
 801a5d0:	f7ea fc0b 	bl	8004dea <HAL_Delay>
            }
            // Write payload buffer
            SX1276WriteFifo( buffer, size );
 801a5d4:	1cfb      	adds	r3, r7, #3
 801a5d6:	781a      	ldrb	r2, [r3, #0]
 801a5d8:	687b      	ldr	r3, [r7, #4]
 801a5da:	0011      	movs	r1, r2
 801a5dc:	0018      	movs	r0, r3
 801a5de:	f000 fda7 	bl	801b130 <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 801a5e2:	4b06      	ldr	r3, [pc, #24]	; (801a5fc <SX1276Send+0x178>)
 801a5e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a5e6:	60fb      	str	r3, [r7, #12]
        }
        break;
 801a5e8:	46c0      	nop			; (mov r8, r8)
    }

    SX1276SetTx( txTimeout );
 801a5ea:	68fb      	ldr	r3, [r7, #12]
 801a5ec:	0018      	movs	r0, r3
 801a5ee:	f000 faf3 	bl	801abd8 <SX1276SetTx>
}
 801a5f2:	46c0      	nop			; (mov r8, r8)
 801a5f4:	46bd      	mov	sp, r7
 801a5f6:	b004      	add	sp, #16
 801a5f8:	bd80      	pop	{r7, pc}
 801a5fa:	46c0      	nop			; (mov r8, r8)
 801a5fc:	2000177c 	.word	0x2000177c
 801a600:	20000e84 	.word	0x20000e84

0801a604 <SX1276SetRfTxPower>:


static void SX1276SetRfTxPower( int8_t power )
{
 801a604:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a606:	b085      	sub	sp, #20
 801a608:	af00      	add	r7, sp, #0
 801a60a:	0002      	movs	r2, r0
 801a60c:	1dfb      	adds	r3, r7, #7
 801a60e:	701a      	strb	r2, [r3, #0]
    uint8_t paConfig = 0;
 801a610:	210f      	movs	r1, #15
 801a612:	187b      	adds	r3, r7, r1
 801a614:	2200      	movs	r2, #0
 801a616:	701a      	strb	r2, [r3, #0]
    uint8_t paDac = 0;
 801a618:	250e      	movs	r5, #14
 801a61a:	197b      	adds	r3, r7, r5
 801a61c:	2200      	movs	r2, #0
 801a61e:	701a      	strb	r2, [r3, #0]
    uint8_t board_config = 0;
 801a620:	260d      	movs	r6, #13
 801a622:	19bb      	adds	r3, r7, r6
 801a624:	2200      	movs	r2, #0
 801a626:	701a      	strb	r2, [r3, #0]

    paConfig = SX1276Read( REG_PACONFIG );
 801a628:	187c      	adds	r4, r7, r1
 801a62a:	2009      	movs	r0, #9
 801a62c:	f000 fd05 	bl	801b03a <SX1276Read>
 801a630:	0003      	movs	r3, r0
 801a632:	7023      	strb	r3, [r4, #0]
    paDac = SX1276Read( REG_PADAC );
 801a634:	197c      	adds	r4, r7, r5
 801a636:	204d      	movs	r0, #77	; 0x4d
 801a638:	f000 fcff 	bl	801b03a <SX1276Read>
 801a63c:	0003      	movs	r3, r0
 801a63e:	7023      	strb	r3, [r4, #0]
    switch( Sx_Board_GetPaSelect(SX1276.Settings.Channel) )
 801a640:	4b78      	ldr	r3, [pc, #480]	; (801a824 <SX1276SetRfTxPower+0x220>)
 801a642:	689b      	ldr	r3, [r3, #8]
 801a644:	0018      	movs	r0, r3
 801a646:	f7eb fc43 	bl	8005ed0 <CMWX1ZZABZ0XX_RADIO_GetPaSelect>
 801a64a:	0003      	movs	r3, r0
 801a64c:	2b03      	cmp	r3, #3
 801a64e:	d01f      	beq.n	801a690 <SX1276SetRfTxPower+0x8c>
 801a650:	dc23      	bgt.n	801a69a <SX1276SetRfTxPower+0x96>
 801a652:	2b02      	cmp	r3, #2
 801a654:	d008      	beq.n	801a668 <SX1276SetRfTxPower+0x64>
 801a656:	dc20      	bgt.n	801a69a <SX1276SetRfTxPower+0x96>
 801a658:	2b00      	cmp	r3, #0
 801a65a:	d00a      	beq.n	801a672 <SX1276SetRfTxPower+0x6e>
 801a65c:	2b01      	cmp	r3, #1
 801a65e:	d11c      	bne.n	801a69a <SX1276SetRfTxPower+0x96>
    {
      case CONF_RFO_LP:
        board_config = RF_PACONFIG_PASELECT_RFO;
 801a660:	19bb      	adds	r3, r7, r6
 801a662:	2200      	movs	r2, #0
 801a664:	701a      	strb	r2, [r3, #0]
        break;
 801a666:	e019      	b.n	801a69c <SX1276SetRfTxPower+0x98>
      case CONF_RFO_HP:
        board_config = RF_PACONFIG_PASELECT_PABOOST;
 801a668:	230d      	movs	r3, #13
 801a66a:	18fb      	adds	r3, r7, r3
 801a66c:	2280      	movs	r2, #128	; 0x80
 801a66e:	701a      	strb	r2, [r3, #0]
        break;
 801a670:	e014      	b.n	801a69c <SX1276SetRfTxPower+0x98>
      case CONF_RFO_LP_HP:
        if (power > 14)
 801a672:	1dfb      	adds	r3, r7, #7
 801a674:	781b      	ldrb	r3, [r3, #0]
 801a676:	b25b      	sxtb	r3, r3
 801a678:	2b0e      	cmp	r3, #14
 801a67a:	dd04      	ble.n	801a686 <SX1276SetRfTxPower+0x82>
        {
          board_config = RF_PACONFIG_PASELECT_PABOOST;
 801a67c:	230d      	movs	r3, #13
 801a67e:	18fb      	adds	r3, r7, r3
 801a680:	2280      	movs	r2, #128	; 0x80
 801a682:	701a      	strb	r2, [r3, #0]
        }
        else
        {
          board_config = RF_PACONFIG_PASELECT_RFO;
        }
        break;
 801a684:	e00a      	b.n	801a69c <SX1276SetRfTxPower+0x98>
          board_config = RF_PACONFIG_PASELECT_RFO;
 801a686:	230d      	movs	r3, #13
 801a688:	18fb      	adds	r3, r7, r3
 801a68a:	2200      	movs	r2, #0
 801a68c:	701a      	strb	r2, [r3, #0]
        break;
 801a68e:	e005      	b.n	801a69c <SX1276SetRfTxPower+0x98>
        case CONF_RFO_LF:
          board_config=RF_PACONFIG_PASELECT_PABOOST;
 801a690:	230d      	movs	r3, #13
 801a692:	18fb      	adds	r3, r7, r3
 801a694:	2280      	movs	r2, #128	; 0x80
 801a696:	701a      	strb	r2, [r3, #0]
          break;
 801a698:	e000      	b.n	801a69c <SX1276SetRfTxPower+0x98>
        default:
        break;
 801a69a:	46c0      	nop			; (mov r8, r8)
    }

    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | board_config;
 801a69c:	210f      	movs	r1, #15
 801a69e:	187b      	adds	r3, r7, r1
 801a6a0:	781b      	ldrb	r3, [r3, #0]
 801a6a2:	b25b      	sxtb	r3, r3
 801a6a4:	227f      	movs	r2, #127	; 0x7f
 801a6a6:	4013      	ands	r3, r2
 801a6a8:	b25a      	sxtb	r2, r3
 801a6aa:	230d      	movs	r3, #13
 801a6ac:	18fb      	adds	r3, r7, r3
 801a6ae:	781b      	ldrb	r3, [r3, #0]
 801a6b0:	b25b      	sxtb	r3, r3
 801a6b2:	4313      	orrs	r3, r2
 801a6b4:	b25a      	sxtb	r2, r3
 801a6b6:	187b      	adds	r3, r7, r1
 801a6b8:	701a      	strb	r2, [r3, #0]

    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 801a6ba:	187b      	adds	r3, r7, r1
 801a6bc:	781b      	ldrb	r3, [r3, #0]
 801a6be:	b25b      	sxtb	r3, r3
 801a6c0:	2b00      	cmp	r3, #0
 801a6c2:	da67      	bge.n	801a794 <SX1276SetRfTxPower+0x190>
    {
        if( power > 17 )
 801a6c4:	1dfb      	adds	r3, r7, #7
 801a6c6:	781b      	ldrb	r3, [r3, #0]
 801a6c8:	b25b      	sxtb	r3, r3
 801a6ca:	2b11      	cmp	r3, #17
 801a6cc:	dd07      	ble.n	801a6de <SX1276SetRfTxPower+0xda>
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 801a6ce:	220e      	movs	r2, #14
 801a6d0:	18bb      	adds	r3, r7, r2
 801a6d2:	18ba      	adds	r2, r7, r2
 801a6d4:	7812      	ldrb	r2, [r2, #0]
 801a6d6:	2107      	movs	r1, #7
 801a6d8:	430a      	orrs	r2, r1
 801a6da:	701a      	strb	r2, [r3, #0]
 801a6dc:	e00b      	b.n	801a6f6 <SX1276SetRfTxPower+0xf2>
        }
        else
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 801a6de:	210e      	movs	r1, #14
 801a6e0:	187b      	adds	r3, r7, r1
 801a6e2:	781b      	ldrb	r3, [r3, #0]
 801a6e4:	b25b      	sxtb	r3, r3
 801a6e6:	2207      	movs	r2, #7
 801a6e8:	4393      	bics	r3, r2
 801a6ea:	b25b      	sxtb	r3, r3
 801a6ec:	2204      	movs	r2, #4
 801a6ee:	4313      	orrs	r3, r2
 801a6f0:	b25a      	sxtb	r2, r3
 801a6f2:	187b      	adds	r3, r7, r1
 801a6f4:	701a      	strb	r2, [r3, #0]
        }
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 801a6f6:	230e      	movs	r3, #14
 801a6f8:	18fb      	adds	r3, r7, r3
 801a6fa:	781b      	ldrb	r3, [r3, #0]
 801a6fc:	2207      	movs	r2, #7
 801a6fe:	4013      	ands	r3, r2
 801a700:	2b07      	cmp	r3, #7
 801a702:	d123      	bne.n	801a74c <SX1276SetRfTxPower+0x148>
        {
            if( power < 5 )
 801a704:	1dfb      	adds	r3, r7, #7
 801a706:	781b      	ldrb	r3, [r3, #0]
 801a708:	b25b      	sxtb	r3, r3
 801a70a:	2b04      	cmp	r3, #4
 801a70c:	dc02      	bgt.n	801a714 <SX1276SetRfTxPower+0x110>
            {
                power = 5;
 801a70e:	1dfb      	adds	r3, r7, #7
 801a710:	2205      	movs	r2, #5
 801a712:	701a      	strb	r2, [r3, #0]
            }
            if( power > 20 )
 801a714:	1dfb      	adds	r3, r7, #7
 801a716:	781b      	ldrb	r3, [r3, #0]
 801a718:	b25b      	sxtb	r3, r3
 801a71a:	2b14      	cmp	r3, #20
 801a71c:	dd02      	ble.n	801a724 <SX1276SetRfTxPower+0x120>
            {
                power = 20;
 801a71e:	1dfb      	adds	r3, r7, #7
 801a720:	2214      	movs	r2, #20
 801a722:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 801a724:	200f      	movs	r0, #15
 801a726:	183b      	adds	r3, r7, r0
 801a728:	781b      	ldrb	r3, [r3, #0]
 801a72a:	b25b      	sxtb	r3, r3
 801a72c:	220f      	movs	r2, #15
 801a72e:	4393      	bics	r3, r2
 801a730:	b25a      	sxtb	r2, r3
 801a732:	1dfb      	adds	r3, r7, #7
 801a734:	781b      	ldrb	r3, [r3, #0]
 801a736:	3b05      	subs	r3, #5
 801a738:	b2db      	uxtb	r3, r3
 801a73a:	b25b      	sxtb	r3, r3
 801a73c:	210f      	movs	r1, #15
 801a73e:	400b      	ands	r3, r1
 801a740:	b25b      	sxtb	r3, r3
 801a742:	4313      	orrs	r3, r2
 801a744:	b25a      	sxtb	r2, r3
 801a746:	183b      	adds	r3, r7, r0
 801a748:	701a      	strb	r2, [r3, #0]
 801a74a:	e059      	b.n	801a800 <SX1276SetRfTxPower+0x1fc>
        }
        else
        {
            if( power < 2 )
 801a74c:	1dfb      	adds	r3, r7, #7
 801a74e:	781b      	ldrb	r3, [r3, #0]
 801a750:	b25b      	sxtb	r3, r3
 801a752:	2b01      	cmp	r3, #1
 801a754:	dc02      	bgt.n	801a75c <SX1276SetRfTxPower+0x158>
            {
                power = 2;
 801a756:	1dfb      	adds	r3, r7, #7
 801a758:	2202      	movs	r2, #2
 801a75a:	701a      	strb	r2, [r3, #0]
            }
            if( power > 17 )
 801a75c:	1dfb      	adds	r3, r7, #7
 801a75e:	781b      	ldrb	r3, [r3, #0]
 801a760:	b25b      	sxtb	r3, r3
 801a762:	2b11      	cmp	r3, #17
 801a764:	dd02      	ble.n	801a76c <SX1276SetRfTxPower+0x168>
            {
                power = 17;
 801a766:	1dfb      	adds	r3, r7, #7
 801a768:	2211      	movs	r2, #17
 801a76a:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 801a76c:	200f      	movs	r0, #15
 801a76e:	183b      	adds	r3, r7, r0
 801a770:	781b      	ldrb	r3, [r3, #0]
 801a772:	b25b      	sxtb	r3, r3
 801a774:	220f      	movs	r2, #15
 801a776:	4393      	bics	r3, r2
 801a778:	b25a      	sxtb	r2, r3
 801a77a:	1dfb      	adds	r3, r7, #7
 801a77c:	781b      	ldrb	r3, [r3, #0]
 801a77e:	3b02      	subs	r3, #2
 801a780:	b2db      	uxtb	r3, r3
 801a782:	b25b      	sxtb	r3, r3
 801a784:	210f      	movs	r1, #15
 801a786:	400b      	ands	r3, r1
 801a788:	b25b      	sxtb	r3, r3
 801a78a:	4313      	orrs	r3, r2
 801a78c:	b25a      	sxtb	r2, r3
 801a78e:	183b      	adds	r3, r7, r0
 801a790:	701a      	strb	r2, [r3, #0]
 801a792:	e035      	b.n	801a800 <SX1276SetRfTxPower+0x1fc>
        }
    }
    else
    {
        if( power > 0 )
 801a794:	1dfb      	adds	r3, r7, #7
 801a796:	781b      	ldrb	r3, [r3, #0]
 801a798:	b25b      	sxtb	r3, r3
 801a79a:	2b00      	cmp	r3, #0
 801a79c:	dd18      	ble.n	801a7d0 <SX1276SetRfTxPower+0x1cc>
        {
            if( power > 15 )
 801a79e:	1dfb      	adds	r3, r7, #7
 801a7a0:	781b      	ldrb	r3, [r3, #0]
 801a7a2:	b25b      	sxtb	r3, r3
 801a7a4:	2b0f      	cmp	r3, #15
 801a7a6:	dd02      	ble.n	801a7ae <SX1276SetRfTxPower+0x1aa>
            {
                power = 15;
 801a7a8:	1dfb      	adds	r3, r7, #7
 801a7aa:	220f      	movs	r2, #15
 801a7ac:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
 801a7ae:	210f      	movs	r1, #15
 801a7b0:	187b      	adds	r3, r7, r1
 801a7b2:	781b      	ldrb	r3, [r3, #0]
 801a7b4:	b25b      	sxtb	r3, r3
 801a7b6:	227f      	movs	r2, #127	; 0x7f
 801a7b8:	4393      	bics	r3, r2
 801a7ba:	b25b      	sxtb	r3, r3
 801a7bc:	2270      	movs	r2, #112	; 0x70
 801a7be:	4313      	orrs	r3, r2
 801a7c0:	b25a      	sxtb	r2, r3
 801a7c2:	1dfb      	adds	r3, r7, #7
 801a7c4:	781b      	ldrb	r3, [r3, #0]
 801a7c6:	4313      	orrs	r3, r2
 801a7c8:	b25a      	sxtb	r2, r3
 801a7ca:	187b      	adds	r3, r7, r1
 801a7cc:	701a      	strb	r2, [r3, #0]
 801a7ce:	e017      	b.n	801a800 <SX1276SetRfTxPower+0x1fc>
        }
        else
        {
            if( power < -4 )
 801a7d0:	1dfb      	adds	r3, r7, #7
 801a7d2:	781b      	ldrb	r3, [r3, #0]
 801a7d4:	b25b      	sxtb	r3, r3
 801a7d6:	3304      	adds	r3, #4
 801a7d8:	da02      	bge.n	801a7e0 <SX1276SetRfTxPower+0x1dc>
            {
                power = -4;
 801a7da:	1dfb      	adds	r3, r7, #7
 801a7dc:	22fc      	movs	r2, #252	; 0xfc
 801a7de:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 801a7e0:	210f      	movs	r1, #15
 801a7e2:	187b      	adds	r3, r7, r1
 801a7e4:	781b      	ldrb	r3, [r3, #0]
 801a7e6:	b25b      	sxtb	r3, r3
 801a7e8:	227f      	movs	r2, #127	; 0x7f
 801a7ea:	4393      	bics	r3, r2
 801a7ec:	b25a      	sxtb	r2, r3
 801a7ee:	1dfb      	adds	r3, r7, #7
 801a7f0:	781b      	ldrb	r3, [r3, #0]
 801a7f2:	3304      	adds	r3, #4
 801a7f4:	b2db      	uxtb	r3, r3
 801a7f6:	b25b      	sxtb	r3, r3
 801a7f8:	4313      	orrs	r3, r2
 801a7fa:	b25a      	sxtb	r2, r3
 801a7fc:	187b      	adds	r3, r7, r1
 801a7fe:	701a      	strb	r2, [r3, #0]
        }
    }
    SX1276Write( REG_PACONFIG, paConfig );
 801a800:	230f      	movs	r3, #15
 801a802:	18fb      	adds	r3, r7, r3
 801a804:	781b      	ldrb	r3, [r3, #0]
 801a806:	0019      	movs	r1, r3
 801a808:	2009      	movs	r0, #9
 801a80a:	f000 fc05 	bl	801b018 <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 801a80e:	230e      	movs	r3, #14
 801a810:	18fb      	adds	r3, r7, r3
 801a812:	781b      	ldrb	r3, [r3, #0]
 801a814:	0019      	movs	r1, r3
 801a816:	204d      	movs	r0, #77	; 0x4d
 801a818:	f000 fbfe 	bl	801b018 <SX1276Write>
}
 801a81c:	46c0      	nop			; (mov r8, r8)
 801a81e:	46bd      	mov	sp, r7
 801a820:	b005      	add	sp, #20
 801a822:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a824:	2000177c 	.word	0x2000177c

0801a828 <SX1276SetSleep>:

void SX1276SetSleep( void )
{
 801a828:	b580      	push	{r7, lr}
 801a82a:	af00      	add	r7, sp, #0
	//SX1276SetOpMode( RF_OPMODE_SLEEP );   // new
    TimerStop( &RxTimeoutTimer );
 801a82c:	4b0b      	ldr	r3, [pc, #44]	; (801a85c <SX1276SetSleep+0x34>)
 801a82e:	0018      	movs	r0, r3
 801a830:	f002 fa66 	bl	801cd00 <UTIL_TIMER_Stop>
    TimerStop( &TxTimeoutTimer );
 801a834:	4b0a      	ldr	r3, [pc, #40]	; (801a860 <SX1276SetSleep+0x38>)
 801a836:	0018      	movs	r0, r3
 801a838:	f002 fa62 	bl	801cd00 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutSyncWord );
 801a83c:	4b09      	ldr	r3, [pc, #36]	; (801a864 <SX1276SetSleep+0x3c>)
 801a83e:	0018      	movs	r0, r3
 801a840:	f002 fa5e 	bl	801cd00 <UTIL_TIMER_Stop>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 801a844:	2000      	movs	r0, #0
 801a846:	f000 fb20 	bl	801ae8a <SX1276SetOpMode>

    // Disable TCXO radio is in SLEEP mode
    Sx_Board_SetXO( RESET );
 801a84a:	2000      	movs	r0, #0
 801a84c:	f7eb f98c 	bl	8005b68 <CMWX1ZZABZ0XX_RADIO_SetXO>

    SX1276.Settings.State = RF_IDLE;
 801a850:	4b05      	ldr	r3, [pc, #20]	; (801a868 <SX1276SetSleep+0x40>)
 801a852:	2200      	movs	r2, #0
 801a854:	711a      	strb	r2, [r3, #4]
}
 801a856:	46c0      	nop			; (mov r8, r8)
 801a858:	46bd      	mov	sp, r7
 801a85a:	bd80      	pop	{r7, pc}
 801a85c:	200017e4 	.word	0x200017e4
 801a860:	2000174c 	.word	0x2000174c
 801a864:	20001764 	.word	0x20001764
 801a868:	2000177c 	.word	0x2000177c

0801a86c <SX1276SetStby>:

void SX1276SetStby( void )
{
 801a86c:	b580      	push	{r7, lr}
 801a86e:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 801a870:	4b0a      	ldr	r3, [pc, #40]	; (801a89c <SX1276SetStby+0x30>)
 801a872:	0018      	movs	r0, r3
 801a874:	f002 fa44 	bl	801cd00 <UTIL_TIMER_Stop>
    TimerStop( &TxTimeoutTimer );
 801a878:	4b09      	ldr	r3, [pc, #36]	; (801a8a0 <SX1276SetStby+0x34>)
 801a87a:	0018      	movs	r0, r3
 801a87c:	f002 fa40 	bl	801cd00 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutSyncWord );
 801a880:	4b08      	ldr	r3, [pc, #32]	; (801a8a4 <SX1276SetStby+0x38>)
 801a882:	0018      	movs	r0, r3
 801a884:	f002 fa3c 	bl	801cd00 <UTIL_TIMER_Stop>

    SX1276SetOpMode( RF_OPMODE_STANDBY );
 801a888:	2001      	movs	r0, #1
 801a88a:	f000 fafe 	bl	801ae8a <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 801a88e:	4b06      	ldr	r3, [pc, #24]	; (801a8a8 <SX1276SetStby+0x3c>)
 801a890:	2200      	movs	r2, #0
 801a892:	711a      	strb	r2, [r3, #4]
}
 801a894:	46c0      	nop			; (mov r8, r8)
 801a896:	46bd      	mov	sp, r7
 801a898:	bd80      	pop	{r7, pc}
 801a89a:	46c0      	nop			; (mov r8, r8)
 801a89c:	200017e4 	.word	0x200017e4
 801a8a0:	2000174c 	.word	0x2000174c
 801a8a4:	20001764 	.word	0x20001764
 801a8a8:	2000177c 	.word	0x2000177c

0801a8ac <SX1276SetRx>:

void SX1276SetRx( uint32_t timeout )
{
 801a8ac:	b580      	push	{r7, lr}
 801a8ae:	b084      	sub	sp, #16
 801a8b0:	af00      	add	r7, sp, #0
 801a8b2:	6078      	str	r0, [r7, #4]
    bool rxContinuous = false;
 801a8b4:	230f      	movs	r3, #15
 801a8b6:	18fb      	adds	r3, r7, r3
 801a8b8:	2200      	movs	r2, #0
 801a8ba:	701a      	strb	r2, [r3, #0]
    TimerStop( &TxTimeoutTimer );
 801a8bc:	4bba      	ldr	r3, [pc, #744]	; (801aba8 <SX1276SetRx+0x2fc>)
 801a8be:	0018      	movs	r0, r3
 801a8c0:	f002 fa1e 	bl	801cd00 <UTIL_TIMER_Stop>

    switch( SX1276.Settings.Modem )
 801a8c4:	4bb9      	ldr	r3, [pc, #740]	; (801abac <SX1276SetRx+0x300>)
 801a8c6:	795b      	ldrb	r3, [r3, #5]
 801a8c8:	2b00      	cmp	r3, #0
 801a8ca:	d002      	beq.n	801a8d2 <SX1276SetRx+0x26>
 801a8cc:	2b01      	cmp	r3, #1
 801a8ce:	d041      	beq.n	801a954 <SX1276SetRx+0xa8>
 801a8d0:	e127      	b.n	801ab22 <SX1276SetRx+0x276>
    {
    case MODEM_FSK:
        {
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 801a8d2:	230f      	movs	r3, #15
 801a8d4:	18fb      	adds	r3, r7, r3
 801a8d6:	4ab5      	ldr	r2, [pc, #724]	; (801abac <SX1276SetRx+0x300>)
 801a8d8:	2126      	movs	r1, #38	; 0x26
 801a8da:	5c52      	ldrb	r2, [r2, r1]
 801a8dc:	701a      	strb	r2, [r3, #0]
            // DIO1=FifoLevel
            // DIO2=SyncAddr
            // DIO3=FifoEmpty
            // DIO4=Preamble
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 801a8de:	2040      	movs	r0, #64	; 0x40
 801a8e0:	f000 fbab 	bl	801b03a <SX1276Read>
 801a8e4:	0003      	movs	r3, r0
 801a8e6:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
                                                                            RF_DIOMAPPING1_DIO0_00 |
 801a8e8:	2203      	movs	r2, #3
 801a8ea:	4013      	ands	r3, r2
 801a8ec:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_00 |
 801a8ee:	220c      	movs	r2, #12
 801a8f0:	4313      	orrs	r3, r2
 801a8f2:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 801a8f4:	b2db      	uxtb	r3, r3
 801a8f6:	0019      	movs	r1, r3
 801a8f8:	2040      	movs	r0, #64	; 0x40
 801a8fa:	f000 fb8d 	bl	801b018 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO2_11 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 801a8fe:	2041      	movs	r0, #65	; 0x41
 801a900:	f000 fb9b 	bl	801b03a <SX1276Read>
 801a904:	0003      	movs	r3, r0
 801a906:	001a      	movs	r2, r3
 801a908:	233f      	movs	r3, #63	; 0x3f
 801a90a:	425b      	negs	r3, r3
 801a90c:	4313      	orrs	r3, r2
 801a90e:	b2db      	uxtb	r3, r3
 801a910:	0019      	movs	r1, r3
 801a912:	2041      	movs	r0, #65	; 0x41
 801a914:	f000 fb80 	bl	801b018 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) |
                                                                            RF_DIOMAPPING2_DIO4_11 |
                                                                            RF_DIOMAPPING2_MAP_PREAMBLEDETECT );

            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 801a918:	2035      	movs	r0, #53	; 0x35
 801a91a:	f000 fb8e 	bl	801b03a <SX1276Read>
 801a91e:	0003      	movs	r3, r0
 801a920:	001a      	movs	r2, r3
 801a922:	233f      	movs	r3, #63	; 0x3f
 801a924:	4013      	ands	r3, r2
 801a926:	b2d9      	uxtb	r1, r3
 801a928:	4ba0      	ldr	r3, [pc, #640]	; (801abac <SX1276SetRx+0x300>)
 801a92a:	223e      	movs	r2, #62	; 0x3e
 801a92c:	5499      	strb	r1, [r3, r2]

            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 801a92e:	211e      	movs	r1, #30
 801a930:	200d      	movs	r0, #13
 801a932:	f000 fb71 	bl	801b018 <SX1276Write>

            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 801a936:	4b9d      	ldr	r3, [pc, #628]	; (801abac <SX1276SetRx+0x300>)
 801a938:	2230      	movs	r2, #48	; 0x30
 801a93a:	2100      	movs	r1, #0
 801a93c:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 801a93e:	4b9b      	ldr	r3, [pc, #620]	; (801abac <SX1276SetRx+0x300>)
 801a940:	2231      	movs	r2, #49	; 0x31
 801a942:	2100      	movs	r1, #0
 801a944:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801a946:	4b99      	ldr	r3, [pc, #612]	; (801abac <SX1276SetRx+0x300>)
 801a948:	2200      	movs	r2, #0
 801a94a:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 801a94c:	4b97      	ldr	r3, [pc, #604]	; (801abac <SX1276SetRx+0x300>)
 801a94e:	2200      	movs	r2, #0
 801a950:	875a      	strh	r2, [r3, #58]	; 0x3a
        }
        break;
 801a952:	e0e6      	b.n	801ab22 <SX1276SetRx+0x276>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 801a954:	4b95      	ldr	r3, [pc, #596]	; (801abac <SX1276SetRx+0x300>)
 801a956:	2255      	movs	r2, #85	; 0x55
 801a958:	5c9b      	ldrb	r3, [r3, r2]
 801a95a:	2b00      	cmp	r3, #0
 801a95c:	d010      	beq.n	801a980 <SX1276SetRx+0xd4>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 801a95e:	2033      	movs	r0, #51	; 0x33
 801a960:	f000 fb6b 	bl	801b03a <SX1276Read>
 801a964:	0003      	movs	r3, r0
 801a966:	001a      	movs	r2, r3
 801a968:	2341      	movs	r3, #65	; 0x41
 801a96a:	4313      	orrs	r3, r2
 801a96c:	b2db      	uxtb	r3, r3
 801a96e:	0019      	movs	r1, r3
 801a970:	2033      	movs	r0, #51	; 0x33
 801a972:	f000 fb51 	bl	801b018 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 801a976:	2119      	movs	r1, #25
 801a978:	203b      	movs	r0, #59	; 0x3b
 801a97a:	f000 fb4d 	bl	801b018 <SX1276Write>
 801a97e:	e013      	b.n	801a9a8 <SX1276SetRx+0xfc>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 801a980:	2033      	movs	r0, #51	; 0x33
 801a982:	f000 fb5a 	bl	801b03a <SX1276Read>
 801a986:	0003      	movs	r3, r0
 801a988:	b25b      	sxtb	r3, r3
 801a98a:	2241      	movs	r2, #65	; 0x41
 801a98c:	4393      	bics	r3, r2
 801a98e:	b25b      	sxtb	r3, r3
 801a990:	2201      	movs	r2, #1
 801a992:	4313      	orrs	r3, r2
 801a994:	b25b      	sxtb	r3, r3
 801a996:	b2db      	uxtb	r3, r3
 801a998:	0019      	movs	r1, r3
 801a99a:	2033      	movs	r0, #51	; 0x33
 801a99c:	f000 fb3c 	bl	801b018 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 801a9a0:	211d      	movs	r1, #29
 801a9a2:	203b      	movs	r0, #59	; 0x3b
 801a9a4:	f000 fb38 	bl	801b018 <SX1276Write>
            }

            // ERRATA 2.3 - Receiver Spurious Reception of a LoRa Signal
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 801a9a8:	4b80      	ldr	r3, [pc, #512]	; (801abac <SX1276SetRx+0x300>)
 801a9aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a9ac:	2b08      	cmp	r3, #8
 801a9ae:	d900      	bls.n	801a9b2 <SX1276SetRx+0x106>
 801a9b0:	e075      	b.n	801aa9e <SX1276SetRx+0x1f2>
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 801a9b2:	2031      	movs	r0, #49	; 0x31
 801a9b4:	f000 fb41 	bl	801b03a <SX1276Read>
 801a9b8:	0003      	movs	r3, r0
 801a9ba:	001a      	movs	r2, r3
 801a9bc:	237f      	movs	r3, #127	; 0x7f
 801a9be:	4013      	ands	r3, r2
 801a9c0:	b2db      	uxtb	r3, r3
 801a9c2:	0019      	movs	r1, r3
 801a9c4:	2031      	movs	r0, #49	; 0x31
 801a9c6:	f000 fb27 	bl	801b018 <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 801a9ca:	2100      	movs	r1, #0
 801a9cc:	2030      	movs	r0, #48	; 0x30
 801a9ce:	f000 fb23 	bl	801b018 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 801a9d2:	4b76      	ldr	r3, [pc, #472]	; (801abac <SX1276SetRx+0x300>)
 801a9d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a9d6:	2b08      	cmp	r3, #8
 801a9d8:	d86e      	bhi.n	801aab8 <SX1276SetRx+0x20c>
 801a9da:	009a      	lsls	r2, r3, #2
 801a9dc:	4b74      	ldr	r3, [pc, #464]	; (801abb0 <SX1276SetRx+0x304>)
 801a9de:	18d3      	adds	r3, r2, r3
 801a9e0:	681b      	ldr	r3, [r3, #0]
 801a9e2:	469f      	mov	pc, r3
                {
                case 0: // 7.8 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 801a9e4:	2148      	movs	r1, #72	; 0x48
 801a9e6:	202f      	movs	r0, #47	; 0x2f
 801a9e8:	f000 fb16 	bl	801b018 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 801a9ec:	4b6f      	ldr	r3, [pc, #444]	; (801abac <SX1276SetRx+0x300>)
 801a9ee:	689b      	ldr	r3, [r3, #8]
 801a9f0:	4a70      	ldr	r2, [pc, #448]	; (801abb4 <SX1276SetRx+0x308>)
 801a9f2:	4694      	mov	ip, r2
 801a9f4:	4463      	add	r3, ip
 801a9f6:	0018      	movs	r0, r3
 801a9f8:	f7fe feb0 	bl	801975c <SX1276SetChannel>
                    break;
 801a9fc:	e05c      	b.n	801aab8 <SX1276SetRx+0x20c>
                case 1: // 10.4 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 801a9fe:	2144      	movs	r1, #68	; 0x44
 801aa00:	202f      	movs	r0, #47	; 0x2f
 801aa02:	f000 fb09 	bl	801b018 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 801aa06:	4b69      	ldr	r3, [pc, #420]	; (801abac <SX1276SetRx+0x300>)
 801aa08:	689b      	ldr	r3, [r3, #8]
 801aa0a:	4a6b      	ldr	r2, [pc, #428]	; (801abb8 <SX1276SetRx+0x30c>)
 801aa0c:	4694      	mov	ip, r2
 801aa0e:	4463      	add	r3, ip
 801aa10:	0018      	movs	r0, r3
 801aa12:	f7fe fea3 	bl	801975c <SX1276SetChannel>
                    break;
 801aa16:	e04f      	b.n	801aab8 <SX1276SetRx+0x20c>
                case 2: // 15.6 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 801aa18:	2144      	movs	r1, #68	; 0x44
 801aa1a:	202f      	movs	r0, #47	; 0x2f
 801aa1c:	f000 fafc 	bl	801b018 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 801aa20:	4b62      	ldr	r3, [pc, #392]	; (801abac <SX1276SetRx+0x300>)
 801aa22:	689b      	ldr	r3, [r3, #8]
 801aa24:	4a65      	ldr	r2, [pc, #404]	; (801abbc <SX1276SetRx+0x310>)
 801aa26:	4694      	mov	ip, r2
 801aa28:	4463      	add	r3, ip
 801aa2a:	0018      	movs	r0, r3
 801aa2c:	f7fe fe96 	bl	801975c <SX1276SetChannel>
                    break;
 801aa30:	e042      	b.n	801aab8 <SX1276SetRx+0x20c>
                case 3: // 20.8 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 801aa32:	2144      	movs	r1, #68	; 0x44
 801aa34:	202f      	movs	r0, #47	; 0x2f
 801aa36:	f000 faef 	bl	801b018 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 801aa3a:	4b5c      	ldr	r3, [pc, #368]	; (801abac <SX1276SetRx+0x300>)
 801aa3c:	689b      	ldr	r3, [r3, #8]
 801aa3e:	4a60      	ldr	r2, [pc, #384]	; (801abc0 <SX1276SetRx+0x314>)
 801aa40:	4694      	mov	ip, r2
 801aa42:	4463      	add	r3, ip
 801aa44:	0018      	movs	r0, r3
 801aa46:	f7fe fe89 	bl	801975c <SX1276SetChannel>
                    break;
 801aa4a:	e035      	b.n	801aab8 <SX1276SetRx+0x20c>
                case 4: // 31.2 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 801aa4c:	2144      	movs	r1, #68	; 0x44
 801aa4e:	202f      	movs	r0, #47	; 0x2f
 801aa50:	f000 fae2 	bl	801b018 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 801aa54:	4b55      	ldr	r3, [pc, #340]	; (801abac <SX1276SetRx+0x300>)
 801aa56:	689b      	ldr	r3, [r3, #8]
 801aa58:	4a5a      	ldr	r2, [pc, #360]	; (801abc4 <SX1276SetRx+0x318>)
 801aa5a:	4694      	mov	ip, r2
 801aa5c:	4463      	add	r3, ip
 801aa5e:	0018      	movs	r0, r3
 801aa60:	f7fe fe7c 	bl	801975c <SX1276SetChannel>
                    break;
 801aa64:	e028      	b.n	801aab8 <SX1276SetRx+0x20c>
                case 5: // 41.4 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 801aa66:	2144      	movs	r1, #68	; 0x44
 801aa68:	202f      	movs	r0, #47	; 0x2f
 801aa6a:	f000 fad5 	bl	801b018 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 801aa6e:	4b4f      	ldr	r3, [pc, #316]	; (801abac <SX1276SetRx+0x300>)
 801aa70:	689b      	ldr	r3, [r3, #8]
 801aa72:	4a55      	ldr	r2, [pc, #340]	; (801abc8 <SX1276SetRx+0x31c>)
 801aa74:	4694      	mov	ip, r2
 801aa76:	4463      	add	r3, ip
 801aa78:	0018      	movs	r0, r3
 801aa7a:	f7fe fe6f 	bl	801975c <SX1276SetChannel>
                    break;
 801aa7e:	e01b      	b.n	801aab8 <SX1276SetRx+0x20c>
                case 6: // 62.5 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 801aa80:	2140      	movs	r1, #64	; 0x40
 801aa82:	202f      	movs	r0, #47	; 0x2f
 801aa84:	f000 fac8 	bl	801b018 <SX1276Write>
                    break;
 801aa88:	e016      	b.n	801aab8 <SX1276SetRx+0x20c>
                case 7: // 125 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 801aa8a:	2140      	movs	r1, #64	; 0x40
 801aa8c:	202f      	movs	r0, #47	; 0x2f
 801aa8e:	f000 fac3 	bl	801b018 <SX1276Write>
                    break;
 801aa92:	e011      	b.n	801aab8 <SX1276SetRx+0x20c>
                case 8: // 250 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 801aa94:	2140      	movs	r1, #64	; 0x40
 801aa96:	202f      	movs	r0, #47	; 0x2f
 801aa98:	f000 fabe 	bl	801b018 <SX1276Write>
                    break;
 801aa9c:	e00c      	b.n	801aab8 <SX1276SetRx+0x20c>
                }
            }
            else
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 801aa9e:	2031      	movs	r0, #49	; 0x31
 801aaa0:	f000 facb 	bl	801b03a <SX1276Read>
 801aaa4:	0003      	movs	r3, r0
 801aaa6:	001a      	movs	r2, r3
 801aaa8:	2380      	movs	r3, #128	; 0x80
 801aaaa:	425b      	negs	r3, r3
 801aaac:	4313      	orrs	r3, r2
 801aaae:	b2db      	uxtb	r3, r3
 801aab0:	0019      	movs	r1, r3
 801aab2:	2031      	movs	r0, #49	; 0x31
 801aab4:	f000 fab0 	bl	801b018 <SX1276Write>
            }

            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 801aab8:	230f      	movs	r3, #15
 801aaba:	18fb      	adds	r3, r7, r3
 801aabc:	4a3b      	ldr	r2, [pc, #236]	; (801abac <SX1276SetRx+0x300>)
 801aabe:	2156      	movs	r1, #86	; 0x56
 801aac0:	5c52      	ldrb	r2, [r2, r1]
 801aac2:	701a      	strb	r2, [r3, #0]

            if( SX1276.Settings.LoRa.FreqHopOn == true )
 801aac4:	4b39      	ldr	r3, [pc, #228]	; (801abac <SX1276SetRx+0x300>)
 801aac6:	2253      	movs	r2, #83	; 0x53
 801aac8:	5c9b      	ldrb	r3, [r3, r2]
 801aaca:	2b00      	cmp	r3, #0
 801aacc:	d010      	beq.n	801aaf0 <SX1276SetRx+0x244>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 801aace:	211d      	movs	r1, #29
 801aad0:	2011      	movs	r0, #17
 801aad2:	f000 faa1 	bl	801b018 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 801aad6:	2040      	movs	r0, #64	; 0x40
 801aad8:	f000 faaf 	bl	801b03a <SX1276Read>
 801aadc:	0003      	movs	r3, r0
 801aade:	001a      	movs	r2, r3
 801aae0:	2333      	movs	r3, #51	; 0x33
 801aae2:	4013      	ands	r3, r2
 801aae4:	b2db      	uxtb	r3, r3
 801aae6:	0019      	movs	r1, r3
 801aae8:	2040      	movs	r0, #64	; 0x40
 801aaea:	f000 fa95 	bl	801b018 <SX1276Write>
 801aaee:	e00f      	b.n	801ab10 <SX1276SetRx+0x264>
            }
            else
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 801aaf0:	211f      	movs	r1, #31
 801aaf2:	2011      	movs	r0, #17
 801aaf4:	f000 fa90 	bl	801b018 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 801aaf8:	2040      	movs	r0, #64	; 0x40
 801aafa:	f000 fa9e 	bl	801b03a <SX1276Read>
 801aafe:	0003      	movs	r3, r0
 801ab00:	001a      	movs	r2, r3
 801ab02:	233f      	movs	r3, #63	; 0x3f
 801ab04:	4013      	ands	r3, r2
 801ab06:	b2db      	uxtb	r3, r3
 801ab08:	0019      	movs	r1, r3
 801ab0a:	2040      	movs	r0, #64	; 0x40
 801ab0c:	f000 fa84 	bl	801b018 <SX1276Write>
            }
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 801ab10:	2100      	movs	r1, #0
 801ab12:	200f      	movs	r0, #15
 801ab14:	f000 fa80 	bl	801b018 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 801ab18:	2100      	movs	r1, #0
 801ab1a:	200d      	movs	r0, #13
 801ab1c:	f000 fa7c 	bl	801b018 <SX1276Write>
        }
        break;
 801ab20:	46c0      	nop			; (mov r8, r8)
    }

    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 801ab22:	2380      	movs	r3, #128	; 0x80
 801ab24:	005a      	lsls	r2, r3, #1
 801ab26:	4b29      	ldr	r3, [pc, #164]	; (801abcc <SX1276SetRx+0x320>)
 801ab28:	2100      	movs	r1, #0
 801ab2a:	0018      	movs	r0, r3
 801ab2c:	f003 fa41 	bl	801dfb2 <memset>

    SX1276.Settings.State = RF_RX_RUNNING;
 801ab30:	4b1e      	ldr	r3, [pc, #120]	; (801abac <SX1276SetRx+0x300>)
 801ab32:	2201      	movs	r2, #1
 801ab34:	711a      	strb	r2, [r3, #4]
    if( timeout != 0 )
 801ab36:	687b      	ldr	r3, [r7, #4]
 801ab38:	2b00      	cmp	r3, #0
 801ab3a:	d009      	beq.n	801ab50 <SX1276SetRx+0x2a4>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801ab3c:	687a      	ldr	r2, [r7, #4]
 801ab3e:	4b24      	ldr	r3, [pc, #144]	; (801abd0 <SX1276SetRx+0x324>)
 801ab40:	0011      	movs	r1, r2
 801ab42:	0018      	movs	r0, r3
 801ab44:	f002 f954 	bl	801cdf0 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801ab48:	4b21      	ldr	r3, [pc, #132]	; (801abd0 <SX1276SetRx+0x324>)
 801ab4a:	0018      	movs	r0, r3
 801ab4c:	f002 f860 	bl	801cc10 <UTIL_TIMER_Start>
    }

    if( SX1276.Settings.Modem == MODEM_FSK )
 801ab50:	4b16      	ldr	r3, [pc, #88]	; (801abac <SX1276SetRx+0x300>)
 801ab52:	795b      	ldrb	r3, [r3, #5]
 801ab54:	2b00      	cmp	r3, #0
 801ab56:	d116      	bne.n	801ab86 <SX1276SetRx+0x2da>
    {
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 801ab58:	2005      	movs	r0, #5
 801ab5a:	f000 f996 	bl	801ae8a <SX1276SetOpMode>

        if( rxContinuous == false )
 801ab5e:	230f      	movs	r3, #15
 801ab60:	18fb      	adds	r3, r7, r3
 801ab62:	781b      	ldrb	r3, [r3, #0]
 801ab64:	2201      	movs	r2, #1
 801ab66:	4053      	eors	r3, r2
 801ab68:	b2db      	uxtb	r3, r3
 801ab6a:	2b00      	cmp	r3, #0
 801ab6c:	d017      	beq.n	801ab9e <SX1276SetRx+0x2f2>
        {
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 801ab6e:	4b0f      	ldr	r3, [pc, #60]	; (801abac <SX1276SetRx+0x300>)
 801ab70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ab72:	4b18      	ldr	r3, [pc, #96]	; (801abd4 <SX1276SetRx+0x328>)
 801ab74:	0011      	movs	r1, r2
 801ab76:	0018      	movs	r0, r3
 801ab78:	f002 f93a 	bl	801cdf0 <UTIL_TIMER_SetPeriod>
            TimerStart( &RxTimeoutSyncWord );
 801ab7c:	4b15      	ldr	r3, [pc, #84]	; (801abd4 <SX1276SetRx+0x328>)
 801ab7e:	0018      	movs	r0, r3
 801ab80:	f002 f846 	bl	801cc10 <UTIL_TIMER_Start>
        else
        {
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
        }
    }
}
 801ab84:	e00b      	b.n	801ab9e <SX1276SetRx+0x2f2>
        if( rxContinuous == true )
 801ab86:	230f      	movs	r3, #15
 801ab88:	18fb      	adds	r3, r7, r3
 801ab8a:	781b      	ldrb	r3, [r3, #0]
 801ab8c:	2b00      	cmp	r3, #0
 801ab8e:	d003      	beq.n	801ab98 <SX1276SetRx+0x2ec>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 801ab90:	2005      	movs	r0, #5
 801ab92:	f000 f97a 	bl	801ae8a <SX1276SetOpMode>
}
 801ab96:	e002      	b.n	801ab9e <SX1276SetRx+0x2f2>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 801ab98:	2006      	movs	r0, #6
 801ab9a:	f000 f976 	bl	801ae8a <SX1276SetOpMode>
}
 801ab9e:	46c0      	nop			; (mov r8, r8)
 801aba0:	46bd      	mov	sp, r7
 801aba2:	b004      	add	sp, #16
 801aba4:	bd80      	pop	{r7, pc}
 801aba6:	46c0      	nop			; (mov r8, r8)
 801aba8:	2000174c 	.word	0x2000174c
 801abac:	2000177c 	.word	0x2000177c
 801abb0:	0801ff74 	.word	0x0801ff74
 801abb4:	00001e82 	.word	0x00001e82
 801abb8:	000028b4 	.word	0x000028b4
 801abbc:	00003d04 	.word	0x00003d04
 801abc0:	0000515e 	.word	0x0000515e
 801abc4:	00007a12 	.word	0x00007a12
 801abc8:	0000a2c6 	.word	0x0000a2c6
 801abcc:	20000e84 	.word	0x20000e84
 801abd0:	200017e4 	.word	0x200017e4
 801abd4:	20001764 	.word	0x20001764

0801abd8 <SX1276SetTx>:

static void SX1276SetTx( uint32_t timeout )
{
 801abd8:	b580      	push	{r7, lr}
 801abda:	b082      	sub	sp, #8
 801abdc:	af00      	add	r7, sp, #0
 801abde:	6078      	str	r0, [r7, #4]
    TimerStop( &RxTimeoutTimer );
 801abe0:	4b38      	ldr	r3, [pc, #224]	; (801acc4 <SX1276SetTx+0xec>)
 801abe2:	0018      	movs	r0, r3
 801abe4:	f002 f88c 	bl	801cd00 <UTIL_TIMER_Stop>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801abe8:	687a      	ldr	r2, [r7, #4]
 801abea:	4b37      	ldr	r3, [pc, #220]	; (801acc8 <SX1276SetTx+0xf0>)
 801abec:	0011      	movs	r1, r2
 801abee:	0018      	movs	r0, r3
 801abf0:	f002 f8fe 	bl	801cdf0 <UTIL_TIMER_SetPeriod>

    switch( SX1276.Settings.Modem )
 801abf4:	4b35      	ldr	r3, [pc, #212]	; (801accc <SX1276SetTx+0xf4>)
 801abf6:	795b      	ldrb	r3, [r3, #5]
 801abf8:	2b00      	cmp	r3, #0
 801abfa:	d002      	beq.n	801ac02 <SX1276SetTx+0x2a>
 801abfc:	2b01      	cmp	r3, #1
 801abfe:	d024      	beq.n	801ac4a <SX1276SetTx+0x72>
 801ac00:	e052      	b.n	801aca8 <SX1276SetTx+0xd0>
            // DIO1=FifoLevel
            // DIO2=FifoFull
            // DIO3=FifoEmpty
            // DIO4=LowBat
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 801ac02:	2040      	movs	r0, #64	; 0x40
 801ac04:	f000 fa19 	bl	801b03a <SX1276Read>
 801ac08:	0003      	movs	r3, r0
 801ac0a:	001a      	movs	r2, r3
 801ac0c:	2303      	movs	r3, #3
 801ac0e:	4013      	ands	r3, r2
 801ac10:	b2db      	uxtb	r3, r3
 801ac12:	0019      	movs	r1, r3
 801ac14:	2040      	movs	r0, #64	; 0x40
 801ac16:	f000 f9ff 	bl	801b018 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 801ac1a:	2041      	movs	r0, #65	; 0x41
 801ac1c:	f000 fa0d 	bl	801b03a <SX1276Read>
 801ac20:	0003      	movs	r3, r0
 801ac22:	001a      	movs	r2, r3
 801ac24:	233e      	movs	r3, #62	; 0x3e
 801ac26:	4013      	ands	r3, r2
 801ac28:	b2db      	uxtb	r3, r3
 801ac2a:	0019      	movs	r1, r3
 801ac2c:	2041      	movs	r0, #65	; 0x41
 801ac2e:	f000 f9f3 	bl	801b018 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) );
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 801ac32:	2035      	movs	r0, #53	; 0x35
 801ac34:	f000 fa01 	bl	801b03a <SX1276Read>
 801ac38:	0003      	movs	r3, r0
 801ac3a:	001a      	movs	r2, r3
 801ac3c:	233f      	movs	r3, #63	; 0x3f
 801ac3e:	4013      	ands	r3, r2
 801ac40:	b2d9      	uxtb	r1, r3
 801ac42:	4b22      	ldr	r3, [pc, #136]	; (801accc <SX1276SetTx+0xf4>)
 801ac44:	223e      	movs	r2, #62	; 0x3e
 801ac46:	5499      	strb	r1, [r3, r2]
        }
        break;
 801ac48:	e02e      	b.n	801aca8 <SX1276SetTx+0xd0>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 801ac4a:	4b20      	ldr	r3, [pc, #128]	; (801accc <SX1276SetTx+0xf4>)
 801ac4c:	2253      	movs	r2, #83	; 0x53
 801ac4e:	5c9b      	ldrb	r3, [r3, r2]
 801ac50:	2b00      	cmp	r3, #0
 801ac52:	d014      	beq.n	801ac7e <SX1276SetTx+0xa6>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 801ac54:	21f5      	movs	r1, #245	; 0xf5
 801ac56:	2011      	movs	r0, #17
 801ac58:	f000 f9de 	bl	801b018 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=TxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 801ac5c:	2040      	movs	r0, #64	; 0x40
 801ac5e:	f000 f9ec 	bl	801b03a <SX1276Read>
 801ac62:	0003      	movs	r3, r0
 801ac64:	b25b      	sxtb	r3, r3
 801ac66:	2233      	movs	r2, #51	; 0x33
 801ac68:	4013      	ands	r3, r2
 801ac6a:	b25b      	sxtb	r3, r3
 801ac6c:	2240      	movs	r2, #64	; 0x40
 801ac6e:	4313      	orrs	r3, r2
 801ac70:	b25b      	sxtb	r3, r3
 801ac72:	b2db      	uxtb	r3, r3
 801ac74:	0019      	movs	r1, r3
 801ac76:	2040      	movs	r0, #64	; 0x40
 801ac78:	f000 f9ce 	bl	801b018 <SX1276Write>

                // DIO0=TxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
            }
        }
        break;
 801ac7c:	e013      	b.n	801aca6 <SX1276SetTx+0xce>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 801ac7e:	21f7      	movs	r1, #247	; 0xf7
 801ac80:	2011      	movs	r0, #17
 801ac82:	f000 f9c9 	bl	801b018 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 801ac86:	2040      	movs	r0, #64	; 0x40
 801ac88:	f000 f9d7 	bl	801b03a <SX1276Read>
 801ac8c:	0003      	movs	r3, r0
 801ac8e:	b25b      	sxtb	r3, r3
 801ac90:	223f      	movs	r2, #63	; 0x3f
 801ac92:	4013      	ands	r3, r2
 801ac94:	b25b      	sxtb	r3, r3
 801ac96:	2240      	movs	r2, #64	; 0x40
 801ac98:	4313      	orrs	r3, r2
 801ac9a:	b25b      	sxtb	r3, r3
 801ac9c:	b2db      	uxtb	r3, r3
 801ac9e:	0019      	movs	r1, r3
 801aca0:	2040      	movs	r0, #64	; 0x40
 801aca2:	f000 f9b9 	bl	801b018 <SX1276Write>
        break;
 801aca6:	46c0      	nop			; (mov r8, r8)
    }

    SX1276.Settings.State = RF_TX_RUNNING;
 801aca8:	4b08      	ldr	r3, [pc, #32]	; (801accc <SX1276SetTx+0xf4>)
 801acaa:	2202      	movs	r2, #2
 801acac:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 801acae:	4b06      	ldr	r3, [pc, #24]	; (801acc8 <SX1276SetTx+0xf0>)
 801acb0:	0018      	movs	r0, r3
 801acb2:	f001 ffad 	bl	801cc10 <UTIL_TIMER_Start>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 801acb6:	2003      	movs	r0, #3
 801acb8:	f000 f8e7 	bl	801ae8a <SX1276SetOpMode>
    //  TimerStop( &TxTimeoutTimer );// новый для возможности передачи только одного сообщения 1 раз сработало а дальше гг
}
 801acbc:	46c0      	nop			; (mov r8, r8)
 801acbe:	46bd      	mov	sp, r7
 801acc0:	b002      	add	sp, #8
 801acc2:	bd80      	pop	{r7, pc}
 801acc4:	200017e4 	.word	0x200017e4
 801acc8:	2000174c 	.word	0x2000174c
 801accc:	2000177c 	.word	0x2000177c

0801acd0 <SX1276StartCad>:

void SX1276StartCad( void )
{
 801acd0:	b580      	push	{r7, lr}
 801acd2:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 801acd4:	4b11      	ldr	r3, [pc, #68]	; (801ad1c <SX1276StartCad+0x4c>)
 801acd6:	795b      	ldrb	r3, [r3, #5]
 801acd8:	2b00      	cmp	r3, #0
 801acda:	d01a      	beq.n	801ad12 <SX1276StartCad+0x42>
 801acdc:	2b01      	cmp	r3, #1
 801acde:	d000      	beq.n	801ace2 <SX1276StartCad+0x12>
            SX1276.Settings.State = RF_CAD;
            SX1276SetOpMode( RFLR_OPMODE_CAD );
        }
        break;
    default:
        break;
 801ace0:	e018      	b.n	801ad14 <SX1276StartCad+0x44>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 801ace2:	21fa      	movs	r1, #250	; 0xfa
 801ace4:	2011      	movs	r0, #17
 801ace6:	f000 f997 	bl	801b018 <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 801acea:	2040      	movs	r0, #64	; 0x40
 801acec:	f000 f9a5 	bl	801b03a <SX1276Read>
 801acf0:	0003      	movs	r3, r0
 801acf2:	001a      	movs	r2, r3
 801acf4:	2303      	movs	r3, #3
 801acf6:	439a      	bics	r2, r3
 801acf8:	0013      	movs	r3, r2
 801acfa:	b2db      	uxtb	r3, r3
 801acfc:	0019      	movs	r1, r3
 801acfe:	2040      	movs	r0, #64	; 0x40
 801ad00:	f000 f98a 	bl	801b018 <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 801ad04:	4b05      	ldr	r3, [pc, #20]	; (801ad1c <SX1276StartCad+0x4c>)
 801ad06:	2203      	movs	r2, #3
 801ad08:	711a      	strb	r2, [r3, #4]
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 801ad0a:	2007      	movs	r0, #7
 801ad0c:	f000 f8bd 	bl	801ae8a <SX1276SetOpMode>
        break;
 801ad10:	e000      	b.n	801ad14 <SX1276StartCad+0x44>
        break;
 801ad12:	46c0      	nop			; (mov r8, r8)
    }
}
 801ad14:	46c0      	nop			; (mov r8, r8)
 801ad16:	46bd      	mov	sp, r7
 801ad18:	bd80      	pop	{r7, pc}
 801ad1a:	46c0      	nop			; (mov r8, r8)
 801ad1c:	2000177c 	.word	0x2000177c

0801ad20 <SX1276SetTxContinuousWave>:

void SX1276SetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 801ad20:	b580      	push	{r7, lr}
 801ad22:	b08e      	sub	sp, #56	; 0x38
 801ad24:	af0a      	add	r7, sp, #40	; 0x28
 801ad26:	6078      	str	r0, [r7, #4]
 801ad28:	0008      	movs	r0, r1
 801ad2a:	0011      	movs	r1, r2
 801ad2c:	1cfb      	adds	r3, r7, #3
 801ad2e:	1c02      	adds	r2, r0, #0
 801ad30:	701a      	strb	r2, [r3, #0]
 801ad32:	003b      	movs	r3, r7
 801ad34:	1c0a      	adds	r2, r1, #0
 801ad36:	801a      	strh	r2, [r3, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 801ad38:	003b      	movs	r3, r7
 801ad3a:	881a      	ldrh	r2, [r3, #0]
 801ad3c:	0013      	movs	r3, r2
 801ad3e:	015b      	lsls	r3, r3, #5
 801ad40:	1a9b      	subs	r3, r3, r2
 801ad42:	009b      	lsls	r3, r3, #2
 801ad44:	189b      	adds	r3, r3, r2
 801ad46:	00db      	lsls	r3, r3, #3
 801ad48:	60fb      	str	r3, [r7, #12]

    SX1276SetChannel( freq );
 801ad4a:	687b      	ldr	r3, [r7, #4]
 801ad4c:	0018      	movs	r0, r3
 801ad4e:	f7fe fd05 	bl	801975c <SX1276SetChannel>

    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 801ad52:	1cfb      	adds	r3, r7, #3
 801ad54:	2100      	movs	r1, #0
 801ad56:	5659      	ldrsb	r1, [r3, r1]
 801ad58:	68fb      	ldr	r3, [r7, #12]
 801ad5a:	9308      	str	r3, [sp, #32]
 801ad5c:	2300      	movs	r3, #0
 801ad5e:	9307      	str	r3, [sp, #28]
 801ad60:	2300      	movs	r3, #0
 801ad62:	9306      	str	r3, [sp, #24]
 801ad64:	2300      	movs	r3, #0
 801ad66:	9305      	str	r3, [sp, #20]
 801ad68:	2300      	movs	r3, #0
 801ad6a:	9304      	str	r3, [sp, #16]
 801ad6c:	2300      	movs	r3, #0
 801ad6e:	9303      	str	r3, [sp, #12]
 801ad70:	2305      	movs	r3, #5
 801ad72:	9302      	str	r3, [sp, #8]
 801ad74:	2300      	movs	r3, #0
 801ad76:	9301      	str	r3, [sp, #4]
 801ad78:	2396      	movs	r3, #150	; 0x96
 801ad7a:	015b      	lsls	r3, r3, #5
 801ad7c:	9300      	str	r3, [sp, #0]
 801ad7e:	2300      	movs	r3, #0
 801ad80:	2200      	movs	r2, #0
 801ad82:	2000      	movs	r0, #0
 801ad84:	f7ff f8d4 	bl	8019f30 <SX1276SetTxConfig>

    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 801ad88:	2031      	movs	r0, #49	; 0x31
 801ad8a:	f000 f956 	bl	801b03a <SX1276Read>
 801ad8e:	0003      	movs	r3, r0
 801ad90:	001a      	movs	r2, r3
 801ad92:	2340      	movs	r3, #64	; 0x40
 801ad94:	439a      	bics	r2, r3
 801ad96:	0013      	movs	r3, r2
 801ad98:	b2db      	uxtb	r3, r3
 801ad9a:	0019      	movs	r1, r3
 801ad9c:	2031      	movs	r0, #49	; 0x31
 801ad9e:	f000 f93b 	bl	801b018 <SX1276Write>
    // Disable radio interrupts
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 801ada2:	21f0      	movs	r1, #240	; 0xf0
 801ada4:	2040      	movs	r0, #64	; 0x40
 801ada6:	f000 f937 	bl	801b018 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 801adaa:	21a0      	movs	r1, #160	; 0xa0
 801adac:	2041      	movs	r0, #65	; 0x41
 801adae:	f000 f933 	bl	801b018 <SX1276Write>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801adb2:	68fa      	ldr	r2, [r7, #12]
 801adb4:	4b09      	ldr	r3, [pc, #36]	; (801addc <SX1276SetTxContinuousWave+0xbc>)
 801adb6:	0011      	movs	r1, r2
 801adb8:	0018      	movs	r0, r3
 801adba:	f002 f819 	bl	801cdf0 <UTIL_TIMER_SetPeriod>

    SX1276.Settings.State = RF_TX_RUNNING;
 801adbe:	4b08      	ldr	r3, [pc, #32]	; (801ade0 <SX1276SetTxContinuousWave+0xc0>)
 801adc0:	2202      	movs	r2, #2
 801adc2:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 801adc4:	4b05      	ldr	r3, [pc, #20]	; (801addc <SX1276SetTxContinuousWave+0xbc>)
 801adc6:	0018      	movs	r0, r3
 801adc8:	f001 ff22 	bl	801cc10 <UTIL_TIMER_Start>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 801adcc:	2003      	movs	r0, #3
 801adce:	f000 f85c 	bl	801ae8a <SX1276SetOpMode>
}
 801add2:	46c0      	nop			; (mov r8, r8)
 801add4:	46bd      	mov	sp, r7
 801add6:	b004      	add	sp, #16
 801add8:	bd80      	pop	{r7, pc}
 801adda:	46c0      	nop			; (mov r8, r8)
 801addc:	2000174c 	.word	0x2000174c
 801ade0:	2000177c 	.word	0x2000177c

0801ade4 <SX1276ReadRssi>:

int16_t SX1276ReadRssi( RadioModems_t modem )
{
 801ade4:	b580      	push	{r7, lr}
 801ade6:	b084      	sub	sp, #16
 801ade8:	af00      	add	r7, sp, #0
 801adea:	0002      	movs	r2, r0
 801adec:	1dfb      	adds	r3, r7, #7
 801adee:	701a      	strb	r2, [r3, #0]
    int16_t rssi = 0;
 801adf0:	230e      	movs	r3, #14
 801adf2:	18fb      	adds	r3, r7, r3
 801adf4:	2200      	movs	r2, #0
 801adf6:	801a      	strh	r2, [r3, #0]

    switch( modem )
 801adf8:	1dfb      	adds	r3, r7, #7
 801adfa:	781b      	ldrb	r3, [r3, #0]
 801adfc:	2b00      	cmp	r3, #0
 801adfe:	d002      	beq.n	801ae06 <SX1276ReadRssi+0x22>
 801ae00:	2b01      	cmp	r3, #1
 801ae02:	d00d      	beq.n	801ae20 <SX1276ReadRssi+0x3c>
 801ae04:	e027      	b.n	801ae56 <SX1276ReadRssi+0x72>
    {
    case MODEM_FSK:
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 801ae06:	2011      	movs	r0, #17
 801ae08:	f000 f917 	bl	801b03a <SX1276Read>
 801ae0c:	0003      	movs	r3, r0
 801ae0e:	085b      	lsrs	r3, r3, #1
 801ae10:	b2db      	uxtb	r3, r3
 801ae12:	b29b      	uxth	r3, r3
 801ae14:	425b      	negs	r3, r3
 801ae16:	b29a      	uxth	r2, r3
 801ae18:	230e      	movs	r3, #14
 801ae1a:	18fb      	adds	r3, r7, r3
 801ae1c:	801a      	strh	r2, [r3, #0]
        break;
 801ae1e:	e020      	b.n	801ae62 <SX1276ReadRssi+0x7e>
    case MODEM_LORA:
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 801ae20:	4b14      	ldr	r3, [pc, #80]	; (801ae74 <SX1276ReadRssi+0x90>)
 801ae22:	689b      	ldr	r3, [r3, #8]
 801ae24:	4a14      	ldr	r2, [pc, #80]	; (801ae78 <SX1276ReadRssi+0x94>)
 801ae26:	4293      	cmp	r3, r2
 801ae28:	d90a      	bls.n	801ae40 <SX1276ReadRssi+0x5c>
        {
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 801ae2a:	201b      	movs	r0, #27
 801ae2c:	f000 f905 	bl	801b03a <SX1276Read>
 801ae30:	0003      	movs	r3, r0
 801ae32:	b29b      	uxth	r3, r3
 801ae34:	3b9d      	subs	r3, #157	; 0x9d
 801ae36:	b29a      	uxth	r2, r3
 801ae38:	230e      	movs	r3, #14
 801ae3a:	18fb      	adds	r3, r7, r3
 801ae3c:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
        }
        break;
 801ae3e:	e010      	b.n	801ae62 <SX1276ReadRssi+0x7e>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 801ae40:	201b      	movs	r0, #27
 801ae42:	f000 f8fa 	bl	801b03a <SX1276Read>
 801ae46:	0003      	movs	r3, r0
 801ae48:	b29b      	uxth	r3, r3
 801ae4a:	3ba4      	subs	r3, #164	; 0xa4
 801ae4c:	b29a      	uxth	r2, r3
 801ae4e:	230e      	movs	r3, #14
 801ae50:	18fb      	adds	r3, r7, r3
 801ae52:	801a      	strh	r2, [r3, #0]
        break;
 801ae54:	e005      	b.n	801ae62 <SX1276ReadRssi+0x7e>
    default:
        rssi = -1;
 801ae56:	230e      	movs	r3, #14
 801ae58:	18fb      	adds	r3, r7, r3
 801ae5a:	2201      	movs	r2, #1
 801ae5c:	4252      	negs	r2, r2
 801ae5e:	801a      	strh	r2, [r3, #0]
        break;
 801ae60:	46c0      	nop			; (mov r8, r8)
    }
    return rssi;
 801ae62:	230e      	movs	r3, #14
 801ae64:	18fb      	adds	r3, r7, r3
 801ae66:	2200      	movs	r2, #0
 801ae68:	5e9b      	ldrsh	r3, [r3, r2]
}
 801ae6a:	0018      	movs	r0, r3
 801ae6c:	46bd      	mov	sp, r7
 801ae6e:	b004      	add	sp, #16
 801ae70:	bd80      	pop	{r7, pc}
 801ae72:	46c0      	nop			; (mov r8, r8)
 801ae74:	2000177c 	.word	0x2000177c
 801ae78:	1f4add40 	.word	0x1f4add40

0801ae7c <SX1276Reset>:

static void SX1276Reset( void )
{
 801ae7c:	b580      	push	{r7, lr}
 801ae7e:	af00      	add	r7, sp, #0
    Sx_Board_Reset();
 801ae80:	f7eb f890 	bl	8005fa4 <CMWX1ZZABZ0XX_RADIO_Reset>
  
}
 801ae84:	46c0      	nop			; (mov r8, r8)
 801ae86:	46bd      	mov	sp, r7
 801ae88:	bd80      	pop	{r7, pc}

0801ae8a <SX1276SetOpMode>:

static void SX1276SetOpMode( uint8_t opMode )
{
 801ae8a:	b5b0      	push	{r4, r5, r7, lr}
 801ae8c:	b084      	sub	sp, #16
 801ae8e:	af00      	add	r7, sp, #0
 801ae90:	0002      	movs	r2, r0
 801ae92:	1dfb      	adds	r3, r7, #7
 801ae94:	701a      	strb	r2, [r3, #0]
    if( opMode == RF_OPMODE_SLEEP )
 801ae96:	1dfb      	adds	r3, r7, #7
 801ae98:	781b      	ldrb	r3, [r3, #0]
 801ae9a:	2b00      	cmp	r3, #0
 801ae9c:	d118      	bne.n	801aed0 <SX1276SetOpMode+0x46>
    {
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 801ae9e:	2001      	movs	r0, #1
 801aea0:	f000 f8cb 	bl	801b03a <SX1276Read>
 801aea4:	0003      	movs	r3, r0
 801aea6:	b25b      	sxtb	r3, r3
 801aea8:	2207      	movs	r2, #7
 801aeaa:	4393      	bics	r3, r2
 801aeac:	b25a      	sxtb	r2, r3
 801aeae:	1dfb      	adds	r3, r7, #7
 801aeb0:	781b      	ldrb	r3, [r3, #0]
 801aeb2:	b25b      	sxtb	r3, r3
 801aeb4:	4313      	orrs	r3, r2
 801aeb6:	b25b      	sxtb	r3, r3
 801aeb8:	b2db      	uxtb	r3, r3
 801aeba:	0019      	movs	r1, r3
 801aebc:	2001      	movs	r0, #1
 801aebe:	f000 f8ab 	bl	801b018 <SX1276Write>

      Sx_Board_SetAntSw( RFSW_OFF );
 801aec2:	2000      	movs	r0, #0
 801aec4:	f7eb f80e 	bl	8005ee4 <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      
      Sx_Board_SetXO( RESET ); 
 801aec8:	2000      	movs	r0, #0
 801aeca:	f7ea fe4d 	bl	8005b68 <CMWX1ZZABZ0XX_RADIO_SetXO>
        Sx_Board_SetAntSw( RFSW_RFO_LP );
      }
      
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
    }
}
 801aece:	e044      	b.n	801af5a <SX1276SetOpMode+0xd0>
    else if ( opMode == RF_OPMODE_RECEIVER )
 801aed0:	1dfb      	adds	r3, r7, #7
 801aed2:	781b      	ldrb	r3, [r3, #0]
 801aed4:	2b05      	cmp	r3, #5
 801aed6:	d118      	bne.n	801af0a <SX1276SetOpMode+0x80>
      Sx_Board_SetXO( SET ); 
 801aed8:	2001      	movs	r0, #1
 801aeda:	f7ea fe45 	bl	8005b68 <CMWX1ZZABZ0XX_RADIO_SetXO>
      Sx_Board_SetAntSw( RFSW_RX );
 801aede:	2001      	movs	r0, #1
 801aee0:	f7eb f800 	bl	8005ee4 <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 801aee4:	2001      	movs	r0, #1
 801aee6:	f000 f8a8 	bl	801b03a <SX1276Read>
 801aeea:	0003      	movs	r3, r0
 801aeec:	b25b      	sxtb	r3, r3
 801aeee:	2207      	movs	r2, #7
 801aef0:	4393      	bics	r3, r2
 801aef2:	b25a      	sxtb	r2, r3
 801aef4:	1dfb      	adds	r3, r7, #7
 801aef6:	781b      	ldrb	r3, [r3, #0]
 801aef8:	b25b      	sxtb	r3, r3
 801aefa:	4313      	orrs	r3, r2
 801aefc:	b25b      	sxtb	r3, r3
 801aefe:	b2db      	uxtb	r3, r3
 801af00:	0019      	movs	r1, r3
 801af02:	2001      	movs	r0, #1
 801af04:	f000 f888 	bl	801b018 <SX1276Write>
}
 801af08:	e027      	b.n	801af5a <SX1276SetOpMode+0xd0>
      uint8_t paConfig =  SX1276Read( REG_PACONFIG );
 801af0a:	250f      	movs	r5, #15
 801af0c:	197c      	adds	r4, r7, r5
 801af0e:	2009      	movs	r0, #9
 801af10:	f000 f893 	bl	801b03a <SX1276Read>
 801af14:	0003      	movs	r3, r0
 801af16:	7023      	strb	r3, [r4, #0]
      Sx_Board_SetXO( SET ); 
 801af18:	2001      	movs	r0, #1
 801af1a:	f7ea fe25 	bl	8005b68 <CMWX1ZZABZ0XX_RADIO_SetXO>
      if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 801af1e:	197b      	adds	r3, r7, r5
 801af20:	781b      	ldrb	r3, [r3, #0]
 801af22:	b25b      	sxtb	r3, r3
 801af24:	2b00      	cmp	r3, #0
 801af26:	da03      	bge.n	801af30 <SX1276SetOpMode+0xa6>
        Sx_Board_SetAntSw( RFSW_RFO_HP );
 801af28:	2003      	movs	r0, #3
 801af2a:	f7ea ffdb 	bl	8005ee4 <CMWX1ZZABZ0XX_RADIO_SetAntSw>
 801af2e:	e002      	b.n	801af36 <SX1276SetOpMode+0xac>
        Sx_Board_SetAntSw( RFSW_RFO_LP );
 801af30:	2002      	movs	r0, #2
 801af32:	f7ea ffd7 	bl	8005ee4 <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 801af36:	2001      	movs	r0, #1
 801af38:	f000 f87f 	bl	801b03a <SX1276Read>
 801af3c:	0003      	movs	r3, r0
 801af3e:	b25b      	sxtb	r3, r3
 801af40:	2207      	movs	r2, #7
 801af42:	4393      	bics	r3, r2
 801af44:	b25a      	sxtb	r2, r3
 801af46:	1dfb      	adds	r3, r7, #7
 801af48:	781b      	ldrb	r3, [r3, #0]
 801af4a:	b25b      	sxtb	r3, r3
 801af4c:	4313      	orrs	r3, r2
 801af4e:	b25b      	sxtb	r3, r3
 801af50:	b2db      	uxtb	r3, r3
 801af52:	0019      	movs	r1, r3
 801af54:	2001      	movs	r0, #1
 801af56:	f000 f85f 	bl	801b018 <SX1276Write>
}
 801af5a:	46c0      	nop			; (mov r8, r8)
 801af5c:	46bd      	mov	sp, r7
 801af5e:	b004      	add	sp, #16
 801af60:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801af64 <SX1276SetModem>:

void SX1276SetModem( RadioModems_t modem )
{
 801af64:	b580      	push	{r7, lr}
 801af66:	b082      	sub	sp, #8
 801af68:	af00      	add	r7, sp, #0
 801af6a:	0002      	movs	r2, r0
 801af6c:	1dfb      	adds	r3, r7, #7
 801af6e:	701a      	strb	r2, [r3, #0]
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 801af70:	2001      	movs	r0, #1
 801af72:	f000 f862 	bl	801b03a <SX1276Read>
 801af76:	0003      	movs	r3, r0
 801af78:	b25b      	sxtb	r3, r3
 801af7a:	2b00      	cmp	r3, #0
 801af7c:	da03      	bge.n	801af86 <SX1276SetModem+0x22>
    {
        SX1276.Settings.Modem = MODEM_LORA;
 801af7e:	4b25      	ldr	r3, [pc, #148]	; (801b014 <SX1276SetModem+0xb0>)
 801af80:	2201      	movs	r2, #1
 801af82:	715a      	strb	r2, [r3, #5]
 801af84:	e002      	b.n	801af8c <SX1276SetModem+0x28>
    }
    else
    {
        SX1276.Settings.Modem = MODEM_FSK;
 801af86:	4b23      	ldr	r3, [pc, #140]	; (801b014 <SX1276SetModem+0xb0>)
 801af88:	2200      	movs	r2, #0
 801af8a:	715a      	strb	r2, [r3, #5]
    }

    if( SX1276.Settings.Modem == modem )
 801af8c:	4b21      	ldr	r3, [pc, #132]	; (801b014 <SX1276SetModem+0xb0>)
 801af8e:	795b      	ldrb	r3, [r3, #5]
 801af90:	1dfa      	adds	r2, r7, #7
 801af92:	7812      	ldrb	r2, [r2, #0]
 801af94:	429a      	cmp	r2, r3
 801af96:	d038      	beq.n	801b00a <SX1276SetModem+0xa6>
    {
        return;
    }

    SX1276.Settings.Modem = modem;
 801af98:	4b1e      	ldr	r3, [pc, #120]	; (801b014 <SX1276SetModem+0xb0>)
 801af9a:	1dfa      	adds	r2, r7, #7
 801af9c:	7812      	ldrb	r2, [r2, #0]
 801af9e:	715a      	strb	r2, [r3, #5]
    switch( SX1276.Settings.Modem )
 801afa0:	4b1c      	ldr	r3, [pc, #112]	; (801b014 <SX1276SetModem+0xb0>)
 801afa2:	795b      	ldrb	r3, [r3, #5]
 801afa4:	2b01      	cmp	r3, #1
 801afa6:	d017      	beq.n	801afd8 <SX1276SetModem+0x74>
    {
    default:
    case MODEM_FSK:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 801afa8:	2000      	movs	r0, #0
 801afaa:	f7ff ff6e 	bl	801ae8a <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 801afae:	2001      	movs	r0, #1
 801afb0:	f000 f843 	bl	801b03a <SX1276Read>
 801afb4:	0003      	movs	r3, r0
 801afb6:	001a      	movs	r2, r3
 801afb8:	237f      	movs	r3, #127	; 0x7f
 801afba:	4013      	ands	r3, r2
 801afbc:	b2db      	uxtb	r3, r3
 801afbe:	0019      	movs	r1, r3
 801afc0:	2001      	movs	r0, #1
 801afc2:	f000 f829 	bl	801b018 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 801afc6:	2100      	movs	r1, #0
 801afc8:	2040      	movs	r0, #64	; 0x40
 801afca:	f000 f825 	bl	801b018 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 801afce:	2130      	movs	r1, #48	; 0x30
 801afd0:	2041      	movs	r0, #65	; 0x41
 801afd2:	f000 f821 	bl	801b018 <SX1276Write>
        break;
 801afd6:	e019      	b.n	801b00c <SX1276SetModem+0xa8>
    case MODEM_LORA:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 801afd8:	2000      	movs	r0, #0
 801afda:	f7ff ff56 	bl	801ae8a <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 801afde:	2001      	movs	r0, #1
 801afe0:	f000 f82b 	bl	801b03a <SX1276Read>
 801afe4:	0003      	movs	r3, r0
 801afe6:	001a      	movs	r2, r3
 801afe8:	2380      	movs	r3, #128	; 0x80
 801afea:	425b      	negs	r3, r3
 801afec:	4313      	orrs	r3, r2
 801afee:	b2db      	uxtb	r3, r3
 801aff0:	0019      	movs	r1, r3
 801aff2:	2001      	movs	r0, #1
 801aff4:	f000 f810 	bl	801b018 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 801aff8:	2100      	movs	r1, #0
 801affa:	2040      	movs	r0, #64	; 0x40
 801affc:	f000 f80c 	bl	801b018 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 801b000:	2100      	movs	r1, #0
 801b002:	2041      	movs	r0, #65	; 0x41
 801b004:	f000 f808 	bl	801b018 <SX1276Write>
        break;
 801b008:	e000      	b.n	801b00c <SX1276SetModem+0xa8>
        return;
 801b00a:	46c0      	nop			; (mov r8, r8)
    }
}
 801b00c:	46bd      	mov	sp, r7
 801b00e:	b002      	add	sp, #8
 801b010:	bd80      	pop	{r7, pc}
 801b012:	46c0      	nop			; (mov r8, r8)
 801b014:	2000177c 	.word	0x2000177c

0801b018 <SX1276Write>:

void SX1276Write( uint32_t addr, uint8_t data )
{
 801b018:	b580      	push	{r7, lr}
 801b01a:	b082      	sub	sp, #8
 801b01c:	af00      	add	r7, sp, #0
 801b01e:	6078      	str	r0, [r7, #4]
 801b020:	000a      	movs	r2, r1
 801b022:	1cfb      	adds	r3, r7, #3
 801b024:	701a      	strb	r2, [r3, #0]
    SX1276WriteBuffer( addr, &data, 1 );
 801b026:	1cf9      	adds	r1, r7, #3
 801b028:	687b      	ldr	r3, [r7, #4]
 801b02a:	2201      	movs	r2, #1
 801b02c:	0018      	movs	r0, r3
 801b02e:	f000 f815 	bl	801b05c <SX1276WriteBuffer>
}
 801b032:	46c0      	nop			; (mov r8, r8)
 801b034:	46bd      	mov	sp, r7
 801b036:	b002      	add	sp, #8
 801b038:	bd80      	pop	{r7, pc}

0801b03a <SX1276Read>:

uint8_t SX1276Read( uint32_t addr )
{
 801b03a:	b590      	push	{r4, r7, lr}
 801b03c:	b085      	sub	sp, #20
 801b03e:	af00      	add	r7, sp, #0
 801b040:	6078      	str	r0, [r7, #4]
    uint8_t data;
    SX1276ReadBuffer( addr, &data, 1 );
 801b042:	240f      	movs	r4, #15
 801b044:	1939      	adds	r1, r7, r4
 801b046:	687b      	ldr	r3, [r7, #4]
 801b048:	2201      	movs	r2, #1
 801b04a:	0018      	movs	r0, r3
 801b04c:	f000 f83a 	bl	801b0c4 <SX1276ReadBuffer>
    return data;
 801b050:	193b      	adds	r3, r7, r4
 801b052:	781b      	ldrb	r3, [r3, #0]
}
 801b054:	0018      	movs	r0, r3
 801b056:	46bd      	mov	sp, r7
 801b058:	b005      	add	sp, #20
 801b05a:	bd90      	pop	{r4, r7, pc}

0801b05c <SX1276WriteBuffer>:

void SX1276WriteBuffer( uint32_t addr, uint8_t *buffer, uint8_t size )
{
 801b05c:	b590      	push	{r4, r7, lr}
 801b05e:	b087      	sub	sp, #28
 801b060:	af00      	add	r7, sp, #0
 801b062:	60f8      	str	r0, [r7, #12]
 801b064:	60b9      	str	r1, [r7, #8]
 801b066:	1dfb      	adds	r3, r7, #7
 801b068:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    //NSS = 0;
    Sx_Board_ChipSelect( 0 );
 801b06a:	2000      	movs	r0, #0
 801b06c:	f7ea ffec 	bl	8006048 <CMWX1ZZABZ0XX_RADIO_ChipSelect>

    Sx_Board_SendRecv( addr | 0x80 );
 801b070:	68fb      	ldr	r3, [r7, #12]
 801b072:	b29b      	uxth	r3, r3
 801b074:	2280      	movs	r2, #128	; 0x80
 801b076:	4313      	orrs	r3, r2
 801b078:	b29b      	uxth	r3, r3
 801b07a:	0018      	movs	r0, r3
 801b07c:	f7ea ffd1 	bl	8006022 <CMWX1ZZABZ0XX_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 801b080:	2317      	movs	r3, #23
 801b082:	18fb      	adds	r3, r7, r3
 801b084:	2200      	movs	r2, #0
 801b086:	701a      	strb	r2, [r3, #0]
 801b088:	e00e      	b.n	801b0a8 <SX1276WriteBuffer+0x4c>
    {
        Sx_Board_SendRecv( buffer[i] );
 801b08a:	2417      	movs	r4, #23
 801b08c:	193b      	adds	r3, r7, r4
 801b08e:	781b      	ldrb	r3, [r3, #0]
 801b090:	68ba      	ldr	r2, [r7, #8]
 801b092:	18d3      	adds	r3, r2, r3
 801b094:	781b      	ldrb	r3, [r3, #0]
 801b096:	b29b      	uxth	r3, r3
 801b098:	0018      	movs	r0, r3
 801b09a:	f7ea ffc2 	bl	8006022 <CMWX1ZZABZ0XX_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 801b09e:	193b      	adds	r3, r7, r4
 801b0a0:	781a      	ldrb	r2, [r3, #0]
 801b0a2:	193b      	adds	r3, r7, r4
 801b0a4:	3201      	adds	r2, #1
 801b0a6:	701a      	strb	r2, [r3, #0]
 801b0a8:	2317      	movs	r3, #23
 801b0aa:	18fa      	adds	r2, r7, r3
 801b0ac:	1dfb      	adds	r3, r7, #7
 801b0ae:	7812      	ldrb	r2, [r2, #0]
 801b0b0:	781b      	ldrb	r3, [r3, #0]
 801b0b2:	429a      	cmp	r2, r3
 801b0b4:	d3e9      	bcc.n	801b08a <SX1276WriteBuffer+0x2e>
    }

    //NSS = 1;
    Sx_Board_ChipSelect( 1 );
 801b0b6:	2001      	movs	r0, #1
 801b0b8:	f7ea ffc6 	bl	8006048 <CMWX1ZZABZ0XX_RADIO_ChipSelect>
}
 801b0bc:	46c0      	nop			; (mov r8, r8)
 801b0be:	46bd      	mov	sp, r7
 801b0c0:	b007      	add	sp, #28
 801b0c2:	bd90      	pop	{r4, r7, pc}

0801b0c4 <SX1276ReadBuffer>:

void SX1276ReadBuffer( uint32_t addr, uint8_t *buffer, uint8_t size )
{
 801b0c4:	b580      	push	{r7, lr}
 801b0c6:	b086      	sub	sp, #24
 801b0c8:	af00      	add	r7, sp, #0
 801b0ca:	60f8      	str	r0, [r7, #12]
 801b0cc:	60b9      	str	r1, [r7, #8]
 801b0ce:	1dfb      	adds	r3, r7, #7
 801b0d0:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    //NSS = 0;
    Sx_Board_ChipSelect( 0 );
 801b0d2:	2000      	movs	r0, #0
 801b0d4:	f7ea ffb8 	bl	8006048 <CMWX1ZZABZ0XX_RADIO_ChipSelect>

    Sx_Board_SendRecv( addr & 0x7F );
 801b0d8:	68fb      	ldr	r3, [r7, #12]
 801b0da:	b29b      	uxth	r3, r3
 801b0dc:	227f      	movs	r2, #127	; 0x7f
 801b0de:	4013      	ands	r3, r2
 801b0e0:	b29b      	uxth	r3, r3
 801b0e2:	0018      	movs	r0, r3
 801b0e4:	f7ea ff9d 	bl	8006022 <CMWX1ZZABZ0XX_RADIO_SendRecv>

    for( i = 0; i < size; i++ )
 801b0e8:	2317      	movs	r3, #23
 801b0ea:	18fb      	adds	r3, r7, r3
 801b0ec:	2200      	movs	r2, #0
 801b0ee:	701a      	strb	r2, [r3, #0]
 801b0f0:	e010      	b.n	801b114 <SX1276ReadBuffer+0x50>
    {
        buffer[i] = Sx_Board_SendRecv( 0 );
 801b0f2:	2000      	movs	r0, #0
 801b0f4:	f7ea ff95 	bl	8006022 <CMWX1ZZABZ0XX_RADIO_SendRecv>
 801b0f8:	0003      	movs	r3, r0
 801b0fa:	0019      	movs	r1, r3
 801b0fc:	2017      	movs	r0, #23
 801b0fe:	183b      	adds	r3, r7, r0
 801b100:	781b      	ldrb	r3, [r3, #0]
 801b102:	68ba      	ldr	r2, [r7, #8]
 801b104:	18d3      	adds	r3, r2, r3
 801b106:	b2ca      	uxtb	r2, r1
 801b108:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 801b10a:	183b      	adds	r3, r7, r0
 801b10c:	781a      	ldrb	r2, [r3, #0]
 801b10e:	183b      	adds	r3, r7, r0
 801b110:	3201      	adds	r2, #1
 801b112:	701a      	strb	r2, [r3, #0]
 801b114:	2317      	movs	r3, #23
 801b116:	18fa      	adds	r2, r7, r3
 801b118:	1dfb      	adds	r3, r7, #7
 801b11a:	7812      	ldrb	r2, [r2, #0]
 801b11c:	781b      	ldrb	r3, [r3, #0]
 801b11e:	429a      	cmp	r2, r3
 801b120:	d3e7      	bcc.n	801b0f2 <SX1276ReadBuffer+0x2e>
    }

    //NSS = 1;
    Sx_Board_ChipSelect( 1 );
 801b122:	2001      	movs	r0, #1
 801b124:	f7ea ff90 	bl	8006048 <CMWX1ZZABZ0XX_RADIO_ChipSelect>
}
 801b128:	46c0      	nop			; (mov r8, r8)
 801b12a:	46bd      	mov	sp, r7
 801b12c:	b006      	add	sp, #24
 801b12e:	bd80      	pop	{r7, pc}

0801b130 <SX1276WriteFifo>:

void SX1276WriteFifo( uint8_t *buffer, uint8_t size )
{
 801b130:	b580      	push	{r7, lr}
 801b132:	b082      	sub	sp, #8
 801b134:	af00      	add	r7, sp, #0
 801b136:	6078      	str	r0, [r7, #4]
 801b138:	000a      	movs	r2, r1
 801b13a:	1cfb      	adds	r3, r7, #3
 801b13c:	701a      	strb	r2, [r3, #0]
    SX1276WriteBuffer( 0, buffer, size );
 801b13e:	1cfb      	adds	r3, r7, #3
 801b140:	781a      	ldrb	r2, [r3, #0]
 801b142:	687b      	ldr	r3, [r7, #4]
 801b144:	0019      	movs	r1, r3
 801b146:	2000      	movs	r0, #0
 801b148:	f7ff ff88 	bl	801b05c <SX1276WriteBuffer>
}
 801b14c:	46c0      	nop			; (mov r8, r8)
 801b14e:	46bd      	mov	sp, r7
 801b150:	b002      	add	sp, #8
 801b152:	bd80      	pop	{r7, pc}

0801b154 <SX1276ReadFifo>:

void SX1276ReadFifo( uint8_t *buffer, uint8_t size )
{
 801b154:	b580      	push	{r7, lr}
 801b156:	b082      	sub	sp, #8
 801b158:	af00      	add	r7, sp, #0
 801b15a:	6078      	str	r0, [r7, #4]
 801b15c:	000a      	movs	r2, r1
 801b15e:	1cfb      	adds	r3, r7, #3
 801b160:	701a      	strb	r2, [r3, #0]
    SX1276ReadBuffer( 0, buffer, size );
 801b162:	1cfb      	adds	r3, r7, #3
 801b164:	781a      	ldrb	r2, [r3, #0]
 801b166:	687b      	ldr	r3, [r7, #4]
 801b168:	0019      	movs	r1, r3
 801b16a:	2000      	movs	r0, #0
 801b16c:	f7ff ffaa 	bl	801b0c4 <SX1276ReadBuffer>
}
 801b170:	46c0      	nop			; (mov r8, r8)
 801b172:	46bd      	mov	sp, r7
 801b174:	b002      	add	sp, #8
 801b176:	bd80      	pop	{r7, pc}

0801b178 <SX1276SetMaxPayloadLength>:

void SX1276SetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 801b178:	b580      	push	{r7, lr}
 801b17a:	b082      	sub	sp, #8
 801b17c:	af00      	add	r7, sp, #0
 801b17e:	0002      	movs	r2, r0
 801b180:	1dfb      	adds	r3, r7, #7
 801b182:	701a      	strb	r2, [r3, #0]
 801b184:	1dbb      	adds	r3, r7, #6
 801b186:	1c0a      	adds	r2, r1, #0
 801b188:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( modem );
 801b18a:	1dfb      	adds	r3, r7, #7
 801b18c:	781b      	ldrb	r3, [r3, #0]
 801b18e:	0018      	movs	r0, r3
 801b190:	f7ff fee8 	bl	801af64 <SX1276SetModem>

    switch( modem )
 801b194:	1dfb      	adds	r3, r7, #7
 801b196:	781b      	ldrb	r3, [r3, #0]
 801b198:	2b00      	cmp	r3, #0
 801b19a:	d002      	beq.n	801b1a2 <SX1276SetMaxPayloadLength+0x2a>
 801b19c:	2b01      	cmp	r3, #1
 801b19e:	d00f      	beq.n	801b1c0 <SX1276SetMaxPayloadLength+0x48>
        break;
    case MODEM_LORA:
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
        break;
    }
}
 801b1a0:	e016      	b.n	801b1d0 <SX1276SetMaxPayloadLength+0x58>
        if( SX1276.Settings.Fsk.FixLen == false )
 801b1a2:	4b0d      	ldr	r3, [pc, #52]	; (801b1d8 <SX1276SetMaxPayloadLength+0x60>)
 801b1a4:	2222      	movs	r2, #34	; 0x22
 801b1a6:	5c9b      	ldrb	r3, [r3, r2]
 801b1a8:	2201      	movs	r2, #1
 801b1aa:	4053      	eors	r3, r2
 801b1ac:	b2db      	uxtb	r3, r3
 801b1ae:	2b00      	cmp	r3, #0
 801b1b0:	d00d      	beq.n	801b1ce <SX1276SetMaxPayloadLength+0x56>
            SX1276Write( REG_PAYLOADLENGTH, max );
 801b1b2:	1dbb      	adds	r3, r7, #6
 801b1b4:	781b      	ldrb	r3, [r3, #0]
 801b1b6:	0019      	movs	r1, r3
 801b1b8:	2032      	movs	r0, #50	; 0x32
 801b1ba:	f7ff ff2d 	bl	801b018 <SX1276Write>
        break;
 801b1be:	e006      	b.n	801b1ce <SX1276SetMaxPayloadLength+0x56>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 801b1c0:	1dbb      	adds	r3, r7, #6
 801b1c2:	781b      	ldrb	r3, [r3, #0]
 801b1c4:	0019      	movs	r1, r3
 801b1c6:	2023      	movs	r0, #35	; 0x23
 801b1c8:	f7ff ff26 	bl	801b018 <SX1276Write>
        break;
 801b1cc:	e000      	b.n	801b1d0 <SX1276SetMaxPayloadLength+0x58>
        break;
 801b1ce:	46c0      	nop			; (mov r8, r8)
}
 801b1d0:	46c0      	nop			; (mov r8, r8)
 801b1d2:	46bd      	mov	sp, r7
 801b1d4:	b002      	add	sp, #8
 801b1d6:	bd80      	pop	{r7, pc}
 801b1d8:	2000177c 	.word	0x2000177c

0801b1dc <SX1276SetPublicNetwork>:

void SX1276SetPublicNetwork( bool enable )
{
 801b1dc:	b580      	push	{r7, lr}
 801b1de:	b082      	sub	sp, #8
 801b1e0:	af00      	add	r7, sp, #0
 801b1e2:	0002      	movs	r2, r0
 801b1e4:	1dfb      	adds	r3, r7, #7
 801b1e6:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( MODEM_LORA );
 801b1e8:	2001      	movs	r0, #1
 801b1ea:	f7ff febb 	bl	801af64 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 801b1ee:	4b0b      	ldr	r3, [pc, #44]	; (801b21c <SX1276SetPublicNetwork+0x40>)
 801b1f0:	1dfa      	adds	r2, r7, #7
 801b1f2:	215c      	movs	r1, #92	; 0x5c
 801b1f4:	7812      	ldrb	r2, [r2, #0]
 801b1f6:	545a      	strb	r2, [r3, r1]
    if( enable == true )
 801b1f8:	1dfb      	adds	r3, r7, #7
 801b1fa:	781b      	ldrb	r3, [r3, #0]
 801b1fc:	2b00      	cmp	r3, #0
 801b1fe:	d004      	beq.n	801b20a <SX1276SetPublicNetwork+0x2e>
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 801b200:	2134      	movs	r1, #52	; 0x34
 801b202:	2039      	movs	r0, #57	; 0x39
 801b204:	f7ff ff08 	bl	801b018 <SX1276Write>
    else
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
    }
}
 801b208:	e003      	b.n	801b212 <SX1276SetPublicNetwork+0x36>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 801b20a:	2112      	movs	r1, #18
 801b20c:	2039      	movs	r0, #57	; 0x39
 801b20e:	f7ff ff03 	bl	801b018 <SX1276Write>
}
 801b212:	46c0      	nop			; (mov r8, r8)
 801b214:	46bd      	mov	sp, r7
 801b216:	b002      	add	sp, #8
 801b218:	bd80      	pop	{r7, pc}
 801b21a:	46c0      	nop			; (mov r8, r8)
 801b21c:	2000177c 	.word	0x2000177c

0801b220 <SX1276GetWakeupTime>:

uint32_t SX1276GetWakeupTime( void )
{
 801b220:	b580      	push	{r7, lr}
 801b222:	af00      	add	r7, sp, #0
    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
 801b224:	f7ea fc9a 	bl	8005b5c <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>
 801b228:	0003      	movs	r3, r0
 801b22a:	3302      	adds	r3, #2
}
 801b22c:	0018      	movs	r0, r3
 801b22e:	46bd      	mov	sp, r7
 801b230:	bd80      	pop	{r7, pc}
	...

0801b234 <GetFskBandwidthRegValue>:

static uint8_t GetFskBandwidthRegValue( uint32_t bw )
{
 801b234:	b580      	push	{r7, lr}
 801b236:	b084      	sub	sp, #16
 801b238:	af00      	add	r7, sp, #0
 801b23a:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 801b23c:	230f      	movs	r3, #15
 801b23e:	18fb      	adds	r3, r7, r3
 801b240:	2200      	movs	r2, #0
 801b242:	701a      	strb	r2, [r3, #0]
 801b244:	e01f      	b.n	801b286 <GetFskBandwidthRegValue+0x52>
    {
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 801b246:	210f      	movs	r1, #15
 801b248:	187b      	adds	r3, r7, r1
 801b24a:	781a      	ldrb	r2, [r3, #0]
 801b24c:	4b13      	ldr	r3, [pc, #76]	; (801b29c <GetFskBandwidthRegValue+0x68>)
 801b24e:	00d2      	lsls	r2, r2, #3
 801b250:	58d3      	ldr	r3, [r2, r3]
 801b252:	687a      	ldr	r2, [r7, #4]
 801b254:	429a      	cmp	r2, r3
 801b256:	d310      	bcc.n	801b27a <GetFskBandwidthRegValue+0x46>
 801b258:	187b      	adds	r3, r7, r1
 801b25a:	781b      	ldrb	r3, [r3, #0]
 801b25c:	1c5a      	adds	r2, r3, #1
 801b25e:	4b0f      	ldr	r3, [pc, #60]	; (801b29c <GetFskBandwidthRegValue+0x68>)
 801b260:	00d2      	lsls	r2, r2, #3
 801b262:	58d3      	ldr	r3, [r2, r3]
 801b264:	687a      	ldr	r2, [r7, #4]
 801b266:	429a      	cmp	r2, r3
 801b268:	d207      	bcs.n	801b27a <GetFskBandwidthRegValue+0x46>
        {
            return FskBandwidths[i].RegValue;
 801b26a:	187b      	adds	r3, r7, r1
 801b26c:	781b      	ldrb	r3, [r3, #0]
 801b26e:	4a0b      	ldr	r2, [pc, #44]	; (801b29c <GetFskBandwidthRegValue+0x68>)
 801b270:	00db      	lsls	r3, r3, #3
 801b272:	18d3      	adds	r3, r2, r3
 801b274:	3304      	adds	r3, #4
 801b276:	781b      	ldrb	r3, [r3, #0]
 801b278:	e00b      	b.n	801b292 <GetFskBandwidthRegValue+0x5e>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 801b27a:	210f      	movs	r1, #15
 801b27c:	187b      	adds	r3, r7, r1
 801b27e:	781a      	ldrb	r2, [r3, #0]
 801b280:	187b      	adds	r3, r7, r1
 801b282:	3201      	adds	r2, #1
 801b284:	701a      	strb	r2, [r3, #0]
 801b286:	230f      	movs	r3, #15
 801b288:	18fb      	adds	r3, r7, r3
 801b28a:	781b      	ldrb	r3, [r3, #0]
 801b28c:	2b14      	cmp	r3, #20
 801b28e:	d9da      	bls.n	801b246 <GetFskBandwidthRegValue+0x12>
        }
    }
    // ERROR: Value not found
    while( 1 );
 801b290:	e7fe      	b.n	801b290 <GetFskBandwidthRegValue+0x5c>
}
 801b292:	0018      	movs	r0, r3
 801b294:	46bd      	mov	sp, r7
 801b296:	b004      	add	sp, #16
 801b298:	bd80      	pop	{r7, pc}
 801b29a:	46c0      	nop			; (mov r8, r8)
 801b29c:	0801fec4 	.word	0x0801fec4

0801b2a0 <SX1276GetLoRaBandwidthInHz>:

static uint32_t SX1276GetLoRaBandwidthInHz( uint32_t bw )
{
 801b2a0:	b580      	push	{r7, lr}
 801b2a2:	b084      	sub	sp, #16
 801b2a4:	af00      	add	r7, sp, #0
 801b2a6:	6078      	str	r0, [r7, #4]
    uint32_t bandwidthInHz = 0;
 801b2a8:	2300      	movs	r3, #0
 801b2aa:	60fb      	str	r3, [r7, #12]

    switch( bw )
 801b2ac:	687b      	ldr	r3, [r7, #4]
 801b2ae:	2b03      	cmp	r3, #3
 801b2b0:	d018      	beq.n	801b2e4 <SX1276GetLoRaBandwidthInHz+0x44>
 801b2b2:	687b      	ldr	r3, [r7, #4]
 801b2b4:	2b03      	cmp	r3, #3
 801b2b6:	d818      	bhi.n	801b2ea <SX1276GetLoRaBandwidthInHz+0x4a>
 801b2b8:	687b      	ldr	r3, [r7, #4]
 801b2ba:	2b02      	cmp	r3, #2
 801b2bc:	d00f      	beq.n	801b2de <SX1276GetLoRaBandwidthInHz+0x3e>
 801b2be:	687b      	ldr	r3, [r7, #4]
 801b2c0:	2b02      	cmp	r3, #2
 801b2c2:	d812      	bhi.n	801b2ea <SX1276GetLoRaBandwidthInHz+0x4a>
 801b2c4:	687b      	ldr	r3, [r7, #4]
 801b2c6:	2b00      	cmp	r3, #0
 801b2c8:	d003      	beq.n	801b2d2 <SX1276GetLoRaBandwidthInHz+0x32>
 801b2ca:	687b      	ldr	r3, [r7, #4]
 801b2cc:	2b01      	cmp	r3, #1
 801b2ce:	d003      	beq.n	801b2d8 <SX1276GetLoRaBandwidthInHz+0x38>
 801b2d0:	e00b      	b.n	801b2ea <SX1276GetLoRaBandwidthInHz+0x4a>
    {
    case 0: // 125 kHz
        bandwidthInHz = 125000UL;
 801b2d2:	4b08      	ldr	r3, [pc, #32]	; (801b2f4 <SX1276GetLoRaBandwidthInHz+0x54>)
 801b2d4:	60fb      	str	r3, [r7, #12]
        break;
 801b2d6:	e008      	b.n	801b2ea <SX1276GetLoRaBandwidthInHz+0x4a>
    case 1: // 250 kHz
        bandwidthInHz = 250000UL;
 801b2d8:	4b07      	ldr	r3, [pc, #28]	; (801b2f8 <SX1276GetLoRaBandwidthInHz+0x58>)
 801b2da:	60fb      	str	r3, [r7, #12]
        break;
 801b2dc:	e005      	b.n	801b2ea <SX1276GetLoRaBandwidthInHz+0x4a>
    case 2: // 500 kHz
        bandwidthInHz = 500000UL;
 801b2de:	4b07      	ldr	r3, [pc, #28]	; (801b2fc <SX1276GetLoRaBandwidthInHz+0x5c>)
 801b2e0:	60fb      	str	r3, [r7, #12]
        break;
 801b2e2:	e002      	b.n	801b2ea <SX1276GetLoRaBandwidthInHz+0x4a>
    case 3: // 62.5 kHz NEW
            bandwidthInHz = 62500UL;
 801b2e4:	4b06      	ldr	r3, [pc, #24]	; (801b300 <SX1276GetLoRaBandwidthInHz+0x60>)
 801b2e6:	60fb      	str	r3, [r7, #12]
            break;
 801b2e8:	46c0      	nop			; (mov r8, r8)
    }

    return bandwidthInHz;
 801b2ea:	68fb      	ldr	r3, [r7, #12]
}
 801b2ec:	0018      	movs	r0, r3
 801b2ee:	46bd      	mov	sp, r7
 801b2f0:	b004      	add	sp, #16
 801b2f2:	bd80      	pop	{r7, pc}
 801b2f4:	0001e848 	.word	0x0001e848
 801b2f8:	0003d090 	.word	0x0003d090
 801b2fc:	0007a120 	.word	0x0007a120
 801b300:	0000f424 	.word	0x0000f424

0801b304 <SX1276GetGfskTimeOnAirNumerator>:

static uint32_t SX1276GetGfskTimeOnAirNumerator( uint16_t preambleLen, bool fixLen,
                                                 uint8_t payloadLen, bool crcOn )
{
 801b304:	b5b0      	push	{r4, r5, r7, lr}
 801b306:	b084      	sub	sp, #16
 801b308:	af00      	add	r7, sp, #0
 801b30a:	0005      	movs	r5, r0
 801b30c:	000c      	movs	r4, r1
 801b30e:	0010      	movs	r0, r2
 801b310:	0019      	movs	r1, r3
 801b312:	1dbb      	adds	r3, r7, #6
 801b314:	1c2a      	adds	r2, r5, #0
 801b316:	801a      	strh	r2, [r3, #0]
 801b318:	1d7b      	adds	r3, r7, #5
 801b31a:	1c22      	adds	r2, r4, #0
 801b31c:	701a      	strb	r2, [r3, #0]
 801b31e:	1d3b      	adds	r3, r7, #4
 801b320:	1c02      	adds	r2, r0, #0
 801b322:	701a      	strb	r2, [r3, #0]
 801b324:	1cfb      	adds	r3, r7, #3
 801b326:	1c0a      	adds	r2, r1, #0
 801b328:	701a      	strb	r2, [r3, #0]
    const uint8_t syncWordLength = 3;
 801b32a:	230f      	movs	r3, #15
 801b32c:	18fb      	adds	r3, r7, r3
 801b32e:	2203      	movs	r2, #3
 801b330:	701a      	strb	r2, [r3, #0]

    return ( preambleLen << 3 ) +
 801b332:	1dbb      	adds	r3, r7, #6
 801b334:	881b      	ldrh	r3, [r3, #0]
 801b336:	00da      	lsls	r2, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) +
 801b338:	1d7b      	adds	r3, r7, #5
 801b33a:	781b      	ldrb	r3, [r3, #0]
 801b33c:	2101      	movs	r1, #1
 801b33e:	404b      	eors	r3, r1
 801b340:	b2db      	uxtb	r3, r3
 801b342:	2b00      	cmp	r3, #0
 801b344:	d001      	beq.n	801b34a <SX1276GetGfskTimeOnAirNumerator+0x46>
 801b346:	2308      	movs	r3, #8
 801b348:	e000      	b.n	801b34c <SX1276GetGfskTimeOnAirNumerator+0x48>
 801b34a:	2300      	movs	r3, #0
    return ( preambleLen << 3 ) +
 801b34c:	189a      	adds	r2, r3, r2
             ( syncWordLength << 3 ) +
 801b34e:	230f      	movs	r3, #15
 801b350:	18fb      	adds	r3, r7, r3
 801b352:	781b      	ldrb	r3, [r3, #0]
 801b354:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) +
 801b356:	18d2      	adds	r2, r2, r3
             ( ( payloadLen +
 801b358:	1d3b      	adds	r3, r7, #4
 801b35a:	7819      	ldrb	r1, [r3, #0]
               ( 0 ) + // Address filter size
               ( ( crcOn == true ) ? 2 : 0 ) 
 801b35c:	1cfb      	adds	r3, r7, #3
 801b35e:	781b      	ldrb	r3, [r3, #0]
 801b360:	2b00      	cmp	r3, #0
 801b362:	d001      	beq.n	801b368 <SX1276GetGfskTimeOnAirNumerator+0x64>
 801b364:	2302      	movs	r3, #2
 801b366:	e000      	b.n	801b36a <SX1276GetGfskTimeOnAirNumerator+0x66>
 801b368:	2300      	movs	r3, #0
               ( 0 ) + // Address filter size
 801b36a:	185b      	adds	r3, r3, r1
               ) << 3 
 801b36c:	00db      	lsls	r3, r3, #3
             ( syncWordLength << 3 ) +
 801b36e:	18d3      	adds	r3, r2, r3
             );
}
 801b370:	0018      	movs	r0, r3
 801b372:	46bd      	mov	sp, r7
 801b374:	b004      	add	sp, #16
 801b376:	bdb0      	pop	{r4, r5, r7, pc}

0801b378 <SX1276GetLoRaTimeOnAirNumerator>:

static uint32_t SX1276GetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                              uint32_t datarate, uint8_t coderate,
                              uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                              bool crcOn )
{
 801b378:	b580      	push	{r7, lr}
 801b37a:	b08a      	sub	sp, #40	; 0x28
 801b37c:	af00      	add	r7, sp, #0
 801b37e:	60f8      	str	r0, [r7, #12]
 801b380:	60b9      	str	r1, [r7, #8]
 801b382:	0019      	movs	r1, r3
 801b384:	1dfb      	adds	r3, r7, #7
 801b386:	701a      	strb	r2, [r3, #0]
 801b388:	1d3b      	adds	r3, r7, #4
 801b38a:	1c0a      	adds	r2, r1, #0
 801b38c:	801a      	strh	r2, [r3, #0]
    int32_t crDenom           = coderate + 4;
 801b38e:	1dfb      	adds	r3, r7, #7
 801b390:	781b      	ldrb	r3, [r3, #0]
 801b392:	3304      	adds	r3, #4
 801b394:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 801b396:	2327      	movs	r3, #39	; 0x27
 801b398:	18fb      	adds	r3, r7, r3
 801b39a:	2200      	movs	r2, #0
 801b39c:	701a      	strb	r2, [r3, #0]

    // Ensure that the preamble length is at least 12 symbols when using SF5 or
    // SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801b39e:	68bb      	ldr	r3, [r7, #8]
 801b3a0:	2b05      	cmp	r3, #5
 801b3a2:	d002      	beq.n	801b3aa <SX1276GetLoRaTimeOnAirNumerator+0x32>
 801b3a4:	68bb      	ldr	r3, [r7, #8]
 801b3a6:	2b06      	cmp	r3, #6
 801b3a8:	d106      	bne.n	801b3b8 <SX1276GetLoRaTimeOnAirNumerator+0x40>
    {
        if( preambleLen < 12 )
 801b3aa:	1d3b      	adds	r3, r7, #4
 801b3ac:	881b      	ldrh	r3, [r3, #0]
 801b3ae:	2b0b      	cmp	r3, #11
 801b3b0:	d802      	bhi.n	801b3b8 <SX1276GetLoRaTimeOnAirNumerator+0x40>
        {
            preambleLen = 12;
 801b3b2:	1d3b      	adds	r3, r7, #4
 801b3b4:	220c      	movs	r2, #12
 801b3b6:	801a      	strh	r2, [r3, #0]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801b3b8:	68fb      	ldr	r3, [r7, #12]
 801b3ba:	2b00      	cmp	r3, #0
 801b3bc:	d105      	bne.n	801b3ca <SX1276GetLoRaTimeOnAirNumerator+0x52>
 801b3be:	68bb      	ldr	r3, [r7, #8]
 801b3c0:	2b0b      	cmp	r3, #11
 801b3c2:	d008      	beq.n	801b3d6 <SX1276GetLoRaTimeOnAirNumerator+0x5e>
 801b3c4:	68bb      	ldr	r3, [r7, #8]
 801b3c6:	2b0c      	cmp	r3, #12
 801b3c8:	d005      	beq.n	801b3d6 <SX1276GetLoRaTimeOnAirNumerator+0x5e>
 801b3ca:	68fb      	ldr	r3, [r7, #12]
 801b3cc:	2b01      	cmp	r3, #1
 801b3ce:	d106      	bne.n	801b3de <SX1276GetLoRaTimeOnAirNumerator+0x66>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801b3d0:	68bb      	ldr	r3, [r7, #8]
 801b3d2:	2b0c      	cmp	r3, #12
 801b3d4:	d103      	bne.n	801b3de <SX1276GetLoRaTimeOnAirNumerator+0x66>
    {
        lowDatareOptimize = true;
 801b3d6:	2327      	movs	r3, #39	; 0x27
 801b3d8:	18fb      	adds	r3, r7, r3
 801b3da:	2201      	movs	r2, #1
 801b3dc:	701a      	strb	r2, [r3, #0]
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801b3de:	2334      	movs	r3, #52	; 0x34
 801b3e0:	18fb      	adds	r3, r7, r3
 801b3e2:	781b      	ldrb	r3, [r3, #0]
 801b3e4:	00da      	lsls	r2, r3, #3
                            ( crcOn ? 16 : 0 ) -
 801b3e6:	2338      	movs	r3, #56	; 0x38
 801b3e8:	18fb      	adds	r3, r7, r3
 801b3ea:	781b      	ldrb	r3, [r3, #0]
 801b3ec:	2b00      	cmp	r3, #0
 801b3ee:	d001      	beq.n	801b3f4 <SX1276GetLoRaTimeOnAirNumerator+0x7c>
 801b3f0:	2310      	movs	r3, #16
 801b3f2:	e000      	b.n	801b3f6 <SX1276GetLoRaTimeOnAirNumerator+0x7e>
 801b3f4:	2300      	movs	r3, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801b3f6:	189b      	adds	r3, r3, r2
 801b3f8:	001a      	movs	r2, r3
                            ( 4 * datarate ) +
 801b3fa:	68bb      	ldr	r3, [r7, #8]
 801b3fc:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 801b3fe:	1ad2      	subs	r2, r2, r3
                            ( fixLen ? 0 : 20 );
 801b400:	2330      	movs	r3, #48	; 0x30
 801b402:	18fb      	adds	r3, r7, r3
 801b404:	781b      	ldrb	r3, [r3, #0]
 801b406:	2b00      	cmp	r3, #0
 801b408:	d001      	beq.n	801b40e <SX1276GetLoRaTimeOnAirNumerator+0x96>
 801b40a:	2300      	movs	r3, #0
 801b40c:	e000      	b.n	801b410 <SX1276GetLoRaTimeOnAirNumerator+0x98>
 801b40e:	2314      	movs	r3, #20
                            ( 4 * datarate ) +
 801b410:	189b      	adds	r3, r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801b412:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 801b414:	68bb      	ldr	r3, [r7, #8]
 801b416:	2b06      	cmp	r3, #6
 801b418:	d803      	bhi.n	801b422 <SX1276GetLoRaTimeOnAirNumerator+0xaa>
    {
        ceilDenominator = 4 * datarate;
 801b41a:	68bb      	ldr	r3, [r7, #8]
 801b41c:	009b      	lsls	r3, r3, #2
 801b41e:	623b      	str	r3, [r7, #32]
 801b420:	e00f      	b.n	801b442 <SX1276GetLoRaTimeOnAirNumerator+0xca>
    }
    else
    {
        ceilNumerator += 8;
 801b422:	69fb      	ldr	r3, [r7, #28]
 801b424:	3308      	adds	r3, #8
 801b426:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 801b428:	2327      	movs	r3, #39	; 0x27
 801b42a:	18fb      	adds	r3, r7, r3
 801b42c:	781b      	ldrb	r3, [r3, #0]
 801b42e:	2b00      	cmp	r3, #0
 801b430:	d004      	beq.n	801b43c <SX1276GetLoRaTimeOnAirNumerator+0xc4>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 801b432:	68bb      	ldr	r3, [r7, #8]
 801b434:	3b02      	subs	r3, #2
 801b436:	009b      	lsls	r3, r3, #2
 801b438:	623b      	str	r3, [r7, #32]
 801b43a:	e002      	b.n	801b442 <SX1276GetLoRaTimeOnAirNumerator+0xca>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 801b43c:	68bb      	ldr	r3, [r7, #8]
 801b43e:	009b      	lsls	r3, r3, #2
 801b440:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 801b442:	69fb      	ldr	r3, [r7, #28]
 801b444:	2b00      	cmp	r3, #0
 801b446:	da01      	bge.n	801b44c <SX1276GetLoRaTimeOnAirNumerator+0xd4>
    {
        ceilNumerator = 0;
 801b448:	2300      	movs	r3, #0
 801b44a:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 801b44c:	69fa      	ldr	r2, [r7, #28]
 801b44e:	6a3b      	ldr	r3, [r7, #32]
 801b450:	18d3      	adds	r3, r2, r3
 801b452:	3b01      	subs	r3, #1
 801b454:	6a39      	ldr	r1, [r7, #32]
 801b456:	0018      	movs	r0, r3
 801b458:	f7e4 fee8 	bl	800022c <__divsi3>
 801b45c:	0003      	movs	r3, r0
 801b45e:	001a      	movs	r2, r3
 801b460:	697b      	ldr	r3, [r7, #20]
 801b462:	435a      	muls	r2, r3
 801b464:	1d3b      	adds	r3, r7, #4
 801b466:	881b      	ldrh	r3, [r3, #0]
 801b468:	18d3      	adds	r3, r2, r3
    int32_t intermediate =
 801b46a:	330c      	adds	r3, #12
 801b46c:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 801b46e:	68bb      	ldr	r3, [r7, #8]
 801b470:	2b06      	cmp	r3, #6
 801b472:	d802      	bhi.n	801b47a <SX1276GetLoRaTimeOnAirNumerator+0x102>
    {
        intermediate += 2;
 801b474:	69bb      	ldr	r3, [r7, #24]
 801b476:	3302      	adds	r3, #2
 801b478:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 801b47a:	69bb      	ldr	r3, [r7, #24]
 801b47c:	009b      	lsls	r3, r3, #2
 801b47e:	1c5a      	adds	r2, r3, #1
 801b480:	68bb      	ldr	r3, [r7, #8]
 801b482:	3b02      	subs	r3, #2
 801b484:	409a      	lsls	r2, r3
 801b486:	0013      	movs	r3, r2
}
 801b488:	0018      	movs	r0, r3
 801b48a:	46bd      	mov	sp, r7
 801b48c:	b00a      	add	sp, #40	; 0x28
 801b48e:	bd80      	pop	{r7, pc}

0801b490 <SX1276OnTimeoutIrq>:

static void SX1276OnTimeoutIrq( void* context )
{
 801b490:	b590      	push	{r4, r7, lr}
 801b492:	b085      	sub	sp, #20
 801b494:	af00      	add	r7, sp, #0
 801b496:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.State )
 801b498:	4b4f      	ldr	r3, [pc, #316]	; (801b5d8 <SX1276OnTimeoutIrq+0x148>)
 801b49a:	791b      	ldrb	r3, [r3, #4]
 801b49c:	2b01      	cmp	r3, #1
 801b49e:	d002      	beq.n	801b4a6 <SX1276OnTimeoutIrq+0x16>
 801b4a0:	2b02      	cmp	r3, #2
 801b4a2:	d041      	beq.n	801b528 <SX1276OnTimeoutIrq+0x98>
        {
            RadioEvents->TxTimeout( );
        }
        break;
    default:
        break;
 801b4a4:	e094      	b.n	801b5d0 <SX1276OnTimeoutIrq+0x140>
        if( SX1276.Settings.Modem == MODEM_FSK )
 801b4a6:	4b4c      	ldr	r3, [pc, #304]	; (801b5d8 <SX1276OnTimeoutIrq+0x148>)
 801b4a8:	795b      	ldrb	r3, [r3, #5]
 801b4aa:	2b00      	cmp	r3, #0
 801b4ac:	d12e      	bne.n	801b50c <SX1276OnTimeoutIrq+0x7c>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 801b4ae:	4b4a      	ldr	r3, [pc, #296]	; (801b5d8 <SX1276OnTimeoutIrq+0x148>)
 801b4b0:	2230      	movs	r2, #48	; 0x30
 801b4b2:	2100      	movs	r1, #0
 801b4b4:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 801b4b6:	4b48      	ldr	r3, [pc, #288]	; (801b5d8 <SX1276OnTimeoutIrq+0x148>)
 801b4b8:	2231      	movs	r2, #49	; 0x31
 801b4ba:	2100      	movs	r1, #0
 801b4bc:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801b4be:	4b46      	ldr	r3, [pc, #280]	; (801b5d8 <SX1276OnTimeoutIrq+0x148>)
 801b4c0:	2200      	movs	r2, #0
 801b4c2:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 801b4c4:	4b44      	ldr	r3, [pc, #272]	; (801b5d8 <SX1276OnTimeoutIrq+0x148>)
 801b4c6:	2200      	movs	r2, #0
 801b4c8:	875a      	strh	r2, [r3, #58]	; 0x3a
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 801b4ca:	210b      	movs	r1, #11
 801b4cc:	203e      	movs	r0, #62	; 0x3e
 801b4ce:	f7ff fda3 	bl	801b018 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 801b4d2:	2110      	movs	r1, #16
 801b4d4:	203f      	movs	r0, #63	; 0x3f
 801b4d6:	f7ff fd9f 	bl	801b018 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 801b4da:	4b3f      	ldr	r3, [pc, #252]	; (801b5d8 <SX1276OnTimeoutIrq+0x148>)
 801b4dc:	2226      	movs	r2, #38	; 0x26
 801b4de:	5c9b      	ldrb	r3, [r3, r2]
 801b4e0:	2b00      	cmp	r3, #0
 801b4e2:	d00c      	beq.n	801b4fe <SX1276OnTimeoutIrq+0x6e>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 801b4e4:	200d      	movs	r0, #13
 801b4e6:	f7ff fda8 	bl	801b03a <SX1276Read>
 801b4ea:	0003      	movs	r3, r0
 801b4ec:	001a      	movs	r2, r3
 801b4ee:	2340      	movs	r3, #64	; 0x40
 801b4f0:	4313      	orrs	r3, r2
 801b4f2:	b2db      	uxtb	r3, r3
 801b4f4:	0019      	movs	r1, r3
 801b4f6:	200d      	movs	r0, #13
 801b4f8:	f7ff fd8e 	bl	801b018 <SX1276Write>
 801b4fc:	e006      	b.n	801b50c <SX1276OnTimeoutIrq+0x7c>
                SX1276.Settings.State = RF_IDLE;
 801b4fe:	4b36      	ldr	r3, [pc, #216]	; (801b5d8 <SX1276OnTimeoutIrq+0x148>)
 801b500:	2200      	movs	r2, #0
 801b502:	711a      	strb	r2, [r3, #4]
                TimerStop( &RxTimeoutSyncWord );
 801b504:	4b35      	ldr	r3, [pc, #212]	; (801b5dc <SX1276OnTimeoutIrq+0x14c>)
 801b506:	0018      	movs	r0, r3
 801b508:	f001 fbfa 	bl	801cd00 <UTIL_TIMER_Stop>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801b50c:	4b34      	ldr	r3, [pc, #208]	; (801b5e0 <SX1276OnTimeoutIrq+0x150>)
 801b50e:	681b      	ldr	r3, [r3, #0]
 801b510:	2b00      	cmp	r3, #0
 801b512:	d05a      	beq.n	801b5ca <SX1276OnTimeoutIrq+0x13a>
 801b514:	4b32      	ldr	r3, [pc, #200]	; (801b5e0 <SX1276OnTimeoutIrq+0x150>)
 801b516:	681b      	ldr	r3, [r3, #0]
 801b518:	68db      	ldr	r3, [r3, #12]
 801b51a:	2b00      	cmp	r3, #0
 801b51c:	d055      	beq.n	801b5ca <SX1276OnTimeoutIrq+0x13a>
            RadioEvents->RxTimeout( );
 801b51e:	4b30      	ldr	r3, [pc, #192]	; (801b5e0 <SX1276OnTimeoutIrq+0x150>)
 801b520:	681b      	ldr	r3, [r3, #0]
 801b522:	68db      	ldr	r3, [r3, #12]
 801b524:	4798      	blx	r3
        break;
 801b526:	e050      	b.n	801b5ca <SX1276OnTimeoutIrq+0x13a>
        SX1276Reset( );
 801b528:	f7ff fca8 	bl	801ae7c <SX1276Reset>
        RxChainCalibration( );
 801b52c:	f7fe f9ee 	bl	801990c <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 801b530:	2000      	movs	r0, #0
 801b532:	f7ff fcaa 	bl	801ae8a <SX1276SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 801b536:	230f      	movs	r3, #15
 801b538:	18fb      	adds	r3, r7, r3
 801b53a:	2200      	movs	r2, #0
 801b53c:	701a      	strb	r2, [r3, #0]
 801b53e:	e025      	b.n	801b58c <SX1276OnTimeoutIrq+0xfc>
            SX1276SetModem( RadioRegsInit[i].Modem );
 801b540:	240f      	movs	r4, #15
 801b542:	193b      	adds	r3, r7, r4
 801b544:	781a      	ldrb	r2, [r3, #0]
 801b546:	4927      	ldr	r1, [pc, #156]	; (801b5e4 <SX1276OnTimeoutIrq+0x154>)
 801b548:	0013      	movs	r3, r2
 801b54a:	005b      	lsls	r3, r3, #1
 801b54c:	189b      	adds	r3, r3, r2
 801b54e:	5c5b      	ldrb	r3, [r3, r1]
 801b550:	0018      	movs	r0, r3
 801b552:	f7ff fd07 	bl	801af64 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 801b556:	193b      	adds	r3, r7, r4
 801b558:	781a      	ldrb	r2, [r3, #0]
 801b55a:	4922      	ldr	r1, [pc, #136]	; (801b5e4 <SX1276OnTimeoutIrq+0x154>)
 801b55c:	0013      	movs	r3, r2
 801b55e:	005b      	lsls	r3, r3, #1
 801b560:	189b      	adds	r3, r3, r2
 801b562:	18cb      	adds	r3, r1, r3
 801b564:	3301      	adds	r3, #1
 801b566:	781b      	ldrb	r3, [r3, #0]
 801b568:	0018      	movs	r0, r3
 801b56a:	193b      	adds	r3, r7, r4
 801b56c:	781a      	ldrb	r2, [r3, #0]
 801b56e:	491d      	ldr	r1, [pc, #116]	; (801b5e4 <SX1276OnTimeoutIrq+0x154>)
 801b570:	0013      	movs	r3, r2
 801b572:	005b      	lsls	r3, r3, #1
 801b574:	189b      	adds	r3, r3, r2
 801b576:	18cb      	adds	r3, r1, r3
 801b578:	3302      	adds	r3, #2
 801b57a:	781b      	ldrb	r3, [r3, #0]
 801b57c:	0019      	movs	r1, r3
 801b57e:	f7ff fd4b 	bl	801b018 <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 801b582:	193b      	adds	r3, r7, r4
 801b584:	781a      	ldrb	r2, [r3, #0]
 801b586:	193b      	adds	r3, r7, r4
 801b588:	3201      	adds	r2, #1
 801b58a:	701a      	strb	r2, [r3, #0]
 801b58c:	230f      	movs	r3, #15
 801b58e:	18fb      	adds	r3, r7, r3
 801b590:	781b      	ldrb	r3, [r3, #0]
 801b592:	2b0f      	cmp	r3, #15
 801b594:	d9d4      	bls.n	801b540 <SX1276OnTimeoutIrq+0xb0>
        SX1276SetModem( MODEM_FSK );
 801b596:	2000      	movs	r0, #0
 801b598:	f7ff fce4 	bl	801af64 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 801b59c:	4b0e      	ldr	r3, [pc, #56]	; (801b5d8 <SX1276OnTimeoutIrq+0x148>)
 801b59e:	225c      	movs	r2, #92	; 0x5c
 801b5a0:	5c9b      	ldrb	r3, [r3, r2]
 801b5a2:	0018      	movs	r0, r3
 801b5a4:	f7ff fe1a 	bl	801b1dc <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 801b5a8:	4b0b      	ldr	r3, [pc, #44]	; (801b5d8 <SX1276OnTimeoutIrq+0x148>)
 801b5aa:	2200      	movs	r2, #0
 801b5ac:	711a      	strb	r2, [r3, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801b5ae:	4b0c      	ldr	r3, [pc, #48]	; (801b5e0 <SX1276OnTimeoutIrq+0x150>)
 801b5b0:	681b      	ldr	r3, [r3, #0]
 801b5b2:	2b00      	cmp	r3, #0
 801b5b4:	d00b      	beq.n	801b5ce <SX1276OnTimeoutIrq+0x13e>
 801b5b6:	4b0a      	ldr	r3, [pc, #40]	; (801b5e0 <SX1276OnTimeoutIrq+0x150>)
 801b5b8:	681b      	ldr	r3, [r3, #0]
 801b5ba:	685b      	ldr	r3, [r3, #4]
 801b5bc:	2b00      	cmp	r3, #0
 801b5be:	d006      	beq.n	801b5ce <SX1276OnTimeoutIrq+0x13e>
            RadioEvents->TxTimeout( );
 801b5c0:	4b07      	ldr	r3, [pc, #28]	; (801b5e0 <SX1276OnTimeoutIrq+0x150>)
 801b5c2:	681b      	ldr	r3, [r3, #0]
 801b5c4:	685b      	ldr	r3, [r3, #4]
 801b5c6:	4798      	blx	r3
        break;
 801b5c8:	e001      	b.n	801b5ce <SX1276OnTimeoutIrq+0x13e>
        break;
 801b5ca:	46c0      	nop			; (mov r8, r8)
 801b5cc:	e000      	b.n	801b5d0 <SX1276OnTimeoutIrq+0x140>
        break;
 801b5ce:	46c0      	nop			; (mov r8, r8)
    }
}
 801b5d0:	46c0      	nop			; (mov r8, r8)
 801b5d2:	46bd      	mov	sp, r7
 801b5d4:	b005      	add	sp, #20
 801b5d6:	bd90      	pop	{r4, r7, pc}
 801b5d8:	2000177c 	.word	0x2000177c
 801b5dc:	20001764 	.word	0x20001764
 801b5e0:	20000e80 	.word	0x20000e80
 801b5e4:	0801fe94 	.word	0x0801fe94

0801b5e8 <SX1276OnDio0Irq>:

static void SX1276OnDio0Irq( void )
{
 801b5e8:	b590      	push	{r4, r7, lr}
 801b5ea:	b083      	sub	sp, #12
 801b5ec:	af00      	add	r7, sp, #0
    volatile uint8_t irqFlags = 0;
 801b5ee:	1d7b      	adds	r3, r7, #5
 801b5f0:	2200      	movs	r2, #0
 801b5f2:	701a      	strb	r2, [r3, #0]

    switch( SX1276.Settings.State )
 801b5f4:	4bc3      	ldr	r3, [pc, #780]	; (801b904 <SX1276OnDio0Irq+0x31c>)
 801b5f6:	791b      	ldrb	r3, [r3, #4]
 801b5f8:	2b01      	cmp	r3, #1
 801b5fa:	d003      	beq.n	801b604 <SX1276OnDio0Irq+0x1c>
 801b5fc:	2b02      	cmp	r3, #2
 801b5fe:	d100      	bne.n	801b602 <SX1276OnDio0Irq+0x1a>
 801b600:	e1e2      	b.n	801b9c8 <SX1276OnDio0Irq+0x3e0>
                }
                break;
            }
            break;
        default:
            break;
 801b602:	e1ff      	b.n	801ba04 <SX1276OnDio0Irq+0x41c>
            switch( SX1276.Settings.Modem )
 801b604:	4bbf      	ldr	r3, [pc, #764]	; (801b904 <SX1276OnDio0Irq+0x31c>)
 801b606:	795b      	ldrb	r3, [r3, #5]
 801b608:	2b00      	cmp	r3, #0
 801b60a:	d003      	beq.n	801b614 <SX1276OnDio0Irq+0x2c>
 801b60c:	2b01      	cmp	r3, #1
 801b60e:	d100      	bne.n	801b612 <SX1276OnDio0Irq+0x2a>
 801b610:	e0e2      	b.n	801b7d8 <SX1276OnDio0Irq+0x1f0>
                break;
 801b612:	e1d8      	b.n	801b9c6 <SX1276OnDio0Irq+0x3de>
                if( SX1276.Settings.Fsk.CrcOn == true )
 801b614:	4bbb      	ldr	r3, [pc, #748]	; (801b904 <SX1276OnDio0Irq+0x31c>)
 801b616:	2224      	movs	r2, #36	; 0x24
 801b618:	5c9b      	ldrb	r3, [r3, r2]
 801b61a:	2b00      	cmp	r3, #0
 801b61c:	d052      	beq.n	801b6c4 <SX1276OnDio0Irq+0xdc>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 801b61e:	203f      	movs	r0, #63	; 0x3f
 801b620:	f7ff fd0b 	bl	801b03a <SX1276Read>
 801b624:	0003      	movs	r3, r0
 801b626:	001a      	movs	r2, r3
 801b628:	1d7b      	adds	r3, r7, #5
 801b62a:	701a      	strb	r2, [r3, #0]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 801b62c:	1d7b      	adds	r3, r7, #5
 801b62e:	781b      	ldrb	r3, [r3, #0]
 801b630:	b2db      	uxtb	r3, r3
 801b632:	001a      	movs	r2, r3
 801b634:	2302      	movs	r3, #2
 801b636:	4013      	ands	r3, r2
 801b638:	2b02      	cmp	r3, #2
 801b63a:	d043      	beq.n	801b6c4 <SX1276OnDio0Irq+0xdc>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 801b63c:	210b      	movs	r1, #11
 801b63e:	203e      	movs	r0, #62	; 0x3e
 801b640:	f7ff fcea 	bl	801b018 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 801b644:	2110      	movs	r1, #16
 801b646:	203f      	movs	r0, #63	; 0x3f
 801b648:	f7ff fce6 	bl	801b018 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 801b64c:	4bae      	ldr	r3, [pc, #696]	; (801b908 <SX1276OnDio0Irq+0x320>)
 801b64e:	0018      	movs	r0, r3
 801b650:	f001 fb56 	bl	801cd00 <UTIL_TIMER_Stop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 801b654:	4bab      	ldr	r3, [pc, #684]	; (801b904 <SX1276OnDio0Irq+0x31c>)
 801b656:	2226      	movs	r2, #38	; 0x26
 801b658:	5c9b      	ldrb	r3, [r3, r2]
 801b65a:	2201      	movs	r2, #1
 801b65c:	4053      	eors	r3, r2
 801b65e:	b2db      	uxtb	r3, r3
 801b660:	2b00      	cmp	r3, #0
 801b662:	d007      	beq.n	801b674 <SX1276OnDio0Irq+0x8c>
                            TimerStop( &RxTimeoutSyncWord );
 801b664:	4ba9      	ldr	r3, [pc, #676]	; (801b90c <SX1276OnDio0Irq+0x324>)
 801b666:	0018      	movs	r0, r3
 801b668:	f001 fb4a 	bl	801cd00 <UTIL_TIMER_Stop>
                            SX1276.Settings.State = RF_IDLE;
 801b66c:	4ba5      	ldr	r3, [pc, #660]	; (801b904 <SX1276OnDio0Irq+0x31c>)
 801b66e:	2200      	movs	r2, #0
 801b670:	711a      	strb	r2, [r3, #4]
 801b672:	e00b      	b.n	801b68c <SX1276OnDio0Irq+0xa4>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 801b674:	200d      	movs	r0, #13
 801b676:	f7ff fce0 	bl	801b03a <SX1276Read>
 801b67a:	0003      	movs	r3, r0
 801b67c:	001a      	movs	r2, r3
 801b67e:	2340      	movs	r3, #64	; 0x40
 801b680:	4313      	orrs	r3, r2
 801b682:	b2db      	uxtb	r3, r3
 801b684:	0019      	movs	r1, r3
 801b686:	200d      	movs	r0, #13
 801b688:	f7ff fcc6 	bl	801b018 <SX1276Write>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 801b68c:	4ba0      	ldr	r3, [pc, #640]	; (801b910 <SX1276OnDio0Irq+0x328>)
 801b68e:	681b      	ldr	r3, [r3, #0]
 801b690:	2b00      	cmp	r3, #0
 801b692:	d008      	beq.n	801b6a6 <SX1276OnDio0Irq+0xbe>
 801b694:	4b9e      	ldr	r3, [pc, #632]	; (801b910 <SX1276OnDio0Irq+0x328>)
 801b696:	681b      	ldr	r3, [r3, #0]
 801b698:	691b      	ldr	r3, [r3, #16]
 801b69a:	2b00      	cmp	r3, #0
 801b69c:	d003      	beq.n	801b6a6 <SX1276OnDio0Irq+0xbe>
                            RadioEvents->RxError( );
 801b69e:	4b9c      	ldr	r3, [pc, #624]	; (801b910 <SX1276OnDio0Irq+0x328>)
 801b6a0:	681b      	ldr	r3, [r3, #0]
 801b6a2:	691b      	ldr	r3, [r3, #16]
 801b6a4:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 801b6a6:	4b97      	ldr	r3, [pc, #604]	; (801b904 <SX1276OnDio0Irq+0x31c>)
 801b6a8:	2230      	movs	r2, #48	; 0x30
 801b6aa:	2100      	movs	r1, #0
 801b6ac:	5499      	strb	r1, [r3, r2]
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 801b6ae:	4b95      	ldr	r3, [pc, #596]	; (801b904 <SX1276OnDio0Irq+0x31c>)
 801b6b0:	2231      	movs	r2, #49	; 0x31
 801b6b2:	2100      	movs	r1, #0
 801b6b4:	5499      	strb	r1, [r3, r2]
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801b6b6:	4b93      	ldr	r3, [pc, #588]	; (801b904 <SX1276OnDio0Irq+0x31c>)
 801b6b8:	2200      	movs	r2, #0
 801b6ba:	879a      	strh	r2, [r3, #60]	; 0x3c
                        SX1276.Settings.FskPacketHandler.Size = 0;
 801b6bc:	4b91      	ldr	r3, [pc, #580]	; (801b904 <SX1276OnDio0Irq+0x31c>)
 801b6be:	2200      	movs	r2, #0
 801b6c0:	875a      	strh	r2, [r3, #58]	; 0x3a
                        break;
 801b6c2:	e180      	b.n	801b9c6 <SX1276OnDio0Irq+0x3de>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 801b6c4:	4b8f      	ldr	r3, [pc, #572]	; (801b904 <SX1276OnDio0Irq+0x31c>)
 801b6c6:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801b6c8:	2b00      	cmp	r3, #0
 801b6ca:	d12d      	bne.n	801b728 <SX1276OnDio0Irq+0x140>
 801b6cc:	4b8d      	ldr	r3, [pc, #564]	; (801b904 <SX1276OnDio0Irq+0x31c>)
 801b6ce:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b6d0:	2b00      	cmp	r3, #0
 801b6d2:	d129      	bne.n	801b728 <SX1276OnDio0Irq+0x140>
                    if( SX1276.Settings.Fsk.FixLen == false )
 801b6d4:	4b8b      	ldr	r3, [pc, #556]	; (801b904 <SX1276OnDio0Irq+0x31c>)
 801b6d6:	2222      	movs	r2, #34	; 0x22
 801b6d8:	5c9b      	ldrb	r3, [r3, r2]
 801b6da:	2201      	movs	r2, #1
 801b6dc:	4053      	eors	r3, r2
 801b6de:	b2db      	uxtb	r3, r3
 801b6e0:	2b00      	cmp	r3, #0
 801b6e2:	d005      	beq.n	801b6f0 <SX1276OnDio0Irq+0x108>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 801b6e4:	4b8b      	ldr	r3, [pc, #556]	; (801b914 <SX1276OnDio0Irq+0x32c>)
 801b6e6:	2101      	movs	r1, #1
 801b6e8:	0018      	movs	r0, r3
 801b6ea:	f7ff fd33 	bl	801b154 <SX1276ReadFifo>
 801b6ee:	e006      	b.n	801b6fe <SX1276OnDio0Irq+0x116>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 801b6f0:	2032      	movs	r0, #50	; 0x32
 801b6f2:	f7ff fca2 	bl	801b03a <SX1276Read>
 801b6f6:	0003      	movs	r3, r0
 801b6f8:	b29a      	uxth	r2, r3
 801b6fa:	4b82      	ldr	r3, [pc, #520]	; (801b904 <SX1276OnDio0Irq+0x31c>)
 801b6fc:	875a      	strh	r2, [r3, #58]	; 0x3a
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801b6fe:	4b81      	ldr	r3, [pc, #516]	; (801b904 <SX1276OnDio0Irq+0x31c>)
 801b700:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b702:	001a      	movs	r2, r3
 801b704:	4b84      	ldr	r3, [pc, #528]	; (801b918 <SX1276OnDio0Irq+0x330>)
 801b706:	18d0      	adds	r0, r2, r3
 801b708:	4b7e      	ldr	r3, [pc, #504]	; (801b904 <SX1276OnDio0Irq+0x31c>)
 801b70a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801b70c:	b2da      	uxtb	r2, r3
 801b70e:	4b7d      	ldr	r3, [pc, #500]	; (801b904 <SX1276OnDio0Irq+0x31c>)
 801b710:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b712:	b2db      	uxtb	r3, r3
 801b714:	1ad3      	subs	r3, r2, r3
 801b716:	b2db      	uxtb	r3, r3
 801b718:	0019      	movs	r1, r3
 801b71a:	f7ff fd1b 	bl	801b154 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801b71e:	4b79      	ldr	r3, [pc, #484]	; (801b904 <SX1276OnDio0Irq+0x31c>)
 801b720:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801b722:	4b78      	ldr	r3, [pc, #480]	; (801b904 <SX1276OnDio0Irq+0x31c>)
 801b724:	879a      	strh	r2, [r3, #60]	; 0x3c
 801b726:	e013      	b.n	801b750 <SX1276OnDio0Irq+0x168>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801b728:	4b76      	ldr	r3, [pc, #472]	; (801b904 <SX1276OnDio0Irq+0x31c>)
 801b72a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b72c:	001a      	movs	r2, r3
 801b72e:	4b7a      	ldr	r3, [pc, #488]	; (801b918 <SX1276OnDio0Irq+0x330>)
 801b730:	18d0      	adds	r0, r2, r3
 801b732:	4b74      	ldr	r3, [pc, #464]	; (801b904 <SX1276OnDio0Irq+0x31c>)
 801b734:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801b736:	b2da      	uxtb	r2, r3
 801b738:	4b72      	ldr	r3, [pc, #456]	; (801b904 <SX1276OnDio0Irq+0x31c>)
 801b73a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801b73c:	b2db      	uxtb	r3, r3
 801b73e:	1ad3      	subs	r3, r2, r3
 801b740:	b2db      	uxtb	r3, r3
 801b742:	0019      	movs	r1, r3
 801b744:	f7ff fd06 	bl	801b154 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801b748:	4b6e      	ldr	r3, [pc, #440]	; (801b904 <SX1276OnDio0Irq+0x31c>)
 801b74a:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801b74c:	4b6d      	ldr	r3, [pc, #436]	; (801b904 <SX1276OnDio0Irq+0x31c>)
 801b74e:	879a      	strh	r2, [r3, #60]	; 0x3c
                TimerStop( &RxTimeoutTimer );
 801b750:	4b6d      	ldr	r3, [pc, #436]	; (801b908 <SX1276OnDio0Irq+0x320>)
 801b752:	0018      	movs	r0, r3
 801b754:	f001 fad4 	bl	801cd00 <UTIL_TIMER_Stop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 801b758:	4b6a      	ldr	r3, [pc, #424]	; (801b904 <SX1276OnDio0Irq+0x31c>)
 801b75a:	2226      	movs	r2, #38	; 0x26
 801b75c:	5c9b      	ldrb	r3, [r3, r2]
 801b75e:	2201      	movs	r2, #1
 801b760:	4053      	eors	r3, r2
 801b762:	b2db      	uxtb	r3, r3
 801b764:	2b00      	cmp	r3, #0
 801b766:	d007      	beq.n	801b778 <SX1276OnDio0Irq+0x190>
                    SX1276.Settings.State = RF_IDLE;
 801b768:	4b66      	ldr	r3, [pc, #408]	; (801b904 <SX1276OnDio0Irq+0x31c>)
 801b76a:	2200      	movs	r2, #0
 801b76c:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutSyncWord );
 801b76e:	4b67      	ldr	r3, [pc, #412]	; (801b90c <SX1276OnDio0Irq+0x324>)
 801b770:	0018      	movs	r0, r3
 801b772:	f001 fac5 	bl	801cd00 <UTIL_TIMER_Stop>
 801b776:	e00b      	b.n	801b790 <SX1276OnDio0Irq+0x1a8>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 801b778:	200d      	movs	r0, #13
 801b77a:	f7ff fc5e 	bl	801b03a <SX1276Read>
 801b77e:	0003      	movs	r3, r0
 801b780:	001a      	movs	r2, r3
 801b782:	2340      	movs	r3, #64	; 0x40
 801b784:	4313      	orrs	r3, r2
 801b786:	b2db      	uxtb	r3, r3
 801b788:	0019      	movs	r1, r3
 801b78a:	200d      	movs	r0, #13
 801b78c:	f7ff fc44 	bl	801b018 <SX1276Write>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801b790:	4b5f      	ldr	r3, [pc, #380]	; (801b910 <SX1276OnDio0Irq+0x328>)
 801b792:	681b      	ldr	r3, [r3, #0]
 801b794:	2b00      	cmp	r3, #0
 801b796:	d010      	beq.n	801b7ba <SX1276OnDio0Irq+0x1d2>
 801b798:	4b5d      	ldr	r3, [pc, #372]	; (801b910 <SX1276OnDio0Irq+0x328>)
 801b79a:	681b      	ldr	r3, [r3, #0]
 801b79c:	689b      	ldr	r3, [r3, #8]
 801b79e:	2b00      	cmp	r3, #0
 801b7a0:	d00b      	beq.n	801b7ba <SX1276OnDio0Irq+0x1d2>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 801b7a2:	4b5b      	ldr	r3, [pc, #364]	; (801b910 <SX1276OnDio0Irq+0x328>)
 801b7a4:	681b      	ldr	r3, [r3, #0]
 801b7a6:	689c      	ldr	r4, [r3, #8]
 801b7a8:	4b56      	ldr	r3, [pc, #344]	; (801b904 <SX1276OnDio0Irq+0x31c>)
 801b7aa:	8f59      	ldrh	r1, [r3, #58]	; 0x3a
 801b7ac:	4b55      	ldr	r3, [pc, #340]	; (801b904 <SX1276OnDio0Irq+0x31c>)
 801b7ae:	2232      	movs	r2, #50	; 0x32
 801b7b0:	569b      	ldrsb	r3, [r3, r2]
 801b7b2:	b21a      	sxth	r2, r3
 801b7b4:	4858      	ldr	r0, [pc, #352]	; (801b918 <SX1276OnDio0Irq+0x330>)
 801b7b6:	2300      	movs	r3, #0
 801b7b8:	47a0      	blx	r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 801b7ba:	4b52      	ldr	r3, [pc, #328]	; (801b904 <SX1276OnDio0Irq+0x31c>)
 801b7bc:	2230      	movs	r2, #48	; 0x30
 801b7be:	2100      	movs	r1, #0
 801b7c0:	5499      	strb	r1, [r3, r2]
                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 801b7c2:	4b50      	ldr	r3, [pc, #320]	; (801b904 <SX1276OnDio0Irq+0x31c>)
 801b7c4:	2231      	movs	r2, #49	; 0x31
 801b7c6:	2100      	movs	r1, #0
 801b7c8:	5499      	strb	r1, [r3, r2]
                SX1276.Settings.FskPacketHandler.NbBytes = 0;
 801b7ca:	4b4e      	ldr	r3, [pc, #312]	; (801b904 <SX1276OnDio0Irq+0x31c>)
 801b7cc:	2200      	movs	r2, #0
 801b7ce:	879a      	strh	r2, [r3, #60]	; 0x3c
                SX1276.Settings.FskPacketHandler.Size = 0;
 801b7d0:	4b4c      	ldr	r3, [pc, #304]	; (801b904 <SX1276OnDio0Irq+0x31c>)
 801b7d2:	2200      	movs	r2, #0
 801b7d4:	875a      	strh	r2, [r3, #58]	; 0x3a
                break;
 801b7d6:	e0f6      	b.n	801b9c6 <SX1276OnDio0Irq+0x3de>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 801b7d8:	2140      	movs	r1, #64	; 0x40
 801b7da:	2012      	movs	r0, #18
 801b7dc:	f7ff fc1c 	bl	801b018 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 801b7e0:	2012      	movs	r0, #18
 801b7e2:	f7ff fc2a 	bl	801b03a <SX1276Read>
 801b7e6:	0003      	movs	r3, r0
 801b7e8:	001a      	movs	r2, r3
 801b7ea:	1d7b      	adds	r3, r7, #5
 801b7ec:	701a      	strb	r2, [r3, #0]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 801b7ee:	1d7b      	adds	r3, r7, #5
 801b7f0:	781b      	ldrb	r3, [r3, #0]
 801b7f2:	b2db      	uxtb	r3, r3
 801b7f4:	001a      	movs	r2, r3
 801b7f6:	2320      	movs	r3, #32
 801b7f8:	4013      	ands	r3, r2
 801b7fa:	2b20      	cmp	r3, #32
 801b7fc:	d122      	bne.n	801b844 <SX1276OnDio0Irq+0x25c>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 801b7fe:	2120      	movs	r1, #32
 801b800:	2012      	movs	r0, #18
 801b802:	f7ff fc09 	bl	801b018 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 801b806:	4b3f      	ldr	r3, [pc, #252]	; (801b904 <SX1276OnDio0Irq+0x31c>)
 801b808:	2256      	movs	r2, #86	; 0x56
 801b80a:	5c9b      	ldrb	r3, [r3, r2]
 801b80c:	2201      	movs	r2, #1
 801b80e:	4053      	eors	r3, r2
 801b810:	b2db      	uxtb	r3, r3
 801b812:	2b00      	cmp	r3, #0
 801b814:	d002      	beq.n	801b81c <SX1276OnDio0Irq+0x234>
                            SX1276.Settings.State = RF_IDLE;
 801b816:	4b3b      	ldr	r3, [pc, #236]	; (801b904 <SX1276OnDio0Irq+0x31c>)
 801b818:	2200      	movs	r2, #0
 801b81a:	711a      	strb	r2, [r3, #4]
                        TimerStop( &RxTimeoutTimer );
 801b81c:	4b3a      	ldr	r3, [pc, #232]	; (801b908 <SX1276OnDio0Irq+0x320>)
 801b81e:	0018      	movs	r0, r3
 801b820:	f001 fa6e 	bl	801cd00 <UTIL_TIMER_Stop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 801b824:	4b3a      	ldr	r3, [pc, #232]	; (801b910 <SX1276OnDio0Irq+0x328>)
 801b826:	681b      	ldr	r3, [r3, #0]
 801b828:	2b00      	cmp	r3, #0
 801b82a:	d100      	bne.n	801b82e <SX1276OnDio0Irq+0x246>
 801b82c:	e0c8      	b.n	801b9c0 <SX1276OnDio0Irq+0x3d8>
 801b82e:	4b38      	ldr	r3, [pc, #224]	; (801b910 <SX1276OnDio0Irq+0x328>)
 801b830:	681b      	ldr	r3, [r3, #0]
 801b832:	691b      	ldr	r3, [r3, #16]
 801b834:	2b00      	cmp	r3, #0
 801b836:	d100      	bne.n	801b83a <SX1276OnDio0Irq+0x252>
 801b838:	e0c2      	b.n	801b9c0 <SX1276OnDio0Irq+0x3d8>
                            RadioEvents->RxError( );
 801b83a:	4b35      	ldr	r3, [pc, #212]	; (801b910 <SX1276OnDio0Irq+0x328>)
 801b83c:	681b      	ldr	r3, [r3, #0]
 801b83e:	691b      	ldr	r3, [r3, #16]
 801b840:	4798      	blx	r3
                        break;
 801b842:	e0bd      	b.n	801b9c0 <SX1276OnDio0Irq+0x3d8>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 801b844:	2019      	movs	r0, #25
 801b846:	f7ff fbf8 	bl	801b03a <SX1276Read>
 801b84a:	0003      	movs	r3, r0
 801b84c:	b25b      	sxtb	r3, r3
 801b84e:	3302      	adds	r3, #2
 801b850:	109b      	asrs	r3, r3, #2
 801b852:	b259      	sxtb	r1, r3
 801b854:	4b2b      	ldr	r3, [pc, #172]	; (801b904 <SX1276OnDio0Irq+0x31c>)
 801b856:	2260      	movs	r2, #96	; 0x60
 801b858:	5499      	strb	r1, [r3, r2]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 801b85a:	201a      	movs	r0, #26
 801b85c:	f7ff fbed 	bl	801b03a <SX1276Read>
 801b860:	0003      	movs	r3, r0
 801b862:	001a      	movs	r2, r3
 801b864:	1dbb      	adds	r3, r7, #6
 801b866:	801a      	strh	r2, [r3, #0]
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 801b868:	4b26      	ldr	r3, [pc, #152]	; (801b904 <SX1276OnDio0Irq+0x31c>)
 801b86a:	2260      	movs	r2, #96	; 0x60
 801b86c:	569b      	ldrsb	r3, [r3, r2]
 801b86e:	2b00      	cmp	r3, #0
 801b870:	da32      	bge.n	801b8d8 <SX1276OnDio0Irq+0x2f0>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 801b872:	4b24      	ldr	r3, [pc, #144]	; (801b904 <SX1276OnDio0Irq+0x31c>)
 801b874:	689b      	ldr	r3, [r3, #8]
 801b876:	4a29      	ldr	r2, [pc, #164]	; (801b91c <SX1276OnDio0Irq+0x334>)
 801b878:	4293      	cmp	r3, r2
 801b87a:	d916      	bls.n	801b8aa <SX1276OnDio0Irq+0x2c2>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 801b87c:	1dbb      	adds	r3, r7, #6
 801b87e:	2200      	movs	r2, #0
 801b880:	5e9b      	ldrsh	r3, [r3, r2]
 801b882:	111b      	asrs	r3, r3, #4
 801b884:	b21b      	sxth	r3, r3
 801b886:	b29a      	uxth	r2, r3
 801b888:	1dbb      	adds	r3, r7, #6
 801b88a:	881b      	ldrh	r3, [r3, #0]
 801b88c:	18d3      	adds	r3, r2, r3
 801b88e:	b29a      	uxth	r2, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 801b890:	4b1c      	ldr	r3, [pc, #112]	; (801b904 <SX1276OnDio0Irq+0x31c>)
 801b892:	2160      	movs	r1, #96	; 0x60
 801b894:	565b      	ldrsb	r3, [r3, r1]
 801b896:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 801b898:	18d3      	adds	r3, r2, r3
 801b89a:	b29b      	uxth	r3, r3
 801b89c:	3b9d      	subs	r3, #157	; 0x9d
 801b89e:	b29b      	uxth	r3, r3
 801b8a0:	b219      	sxth	r1, r3
 801b8a2:	4b18      	ldr	r3, [pc, #96]	; (801b904 <SX1276OnDio0Irq+0x31c>)
 801b8a4:	2262      	movs	r2, #98	; 0x62
 801b8a6:	5299      	strh	r1, [r3, r2]
 801b8a8:	e04a      	b.n	801b940 <SX1276OnDio0Irq+0x358>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 801b8aa:	1dbb      	adds	r3, r7, #6
 801b8ac:	2200      	movs	r2, #0
 801b8ae:	5e9b      	ldrsh	r3, [r3, r2]
 801b8b0:	111b      	asrs	r3, r3, #4
 801b8b2:	b21b      	sxth	r3, r3
 801b8b4:	b29a      	uxth	r2, r3
 801b8b6:	1dbb      	adds	r3, r7, #6
 801b8b8:	881b      	ldrh	r3, [r3, #0]
 801b8ba:	18d3      	adds	r3, r2, r3
 801b8bc:	b29a      	uxth	r2, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 801b8be:	4b11      	ldr	r3, [pc, #68]	; (801b904 <SX1276OnDio0Irq+0x31c>)
 801b8c0:	2160      	movs	r1, #96	; 0x60
 801b8c2:	565b      	ldrsb	r3, [r3, r1]
 801b8c4:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 801b8c6:	18d3      	adds	r3, r2, r3
 801b8c8:	b29b      	uxth	r3, r3
 801b8ca:	3ba4      	subs	r3, #164	; 0xa4
 801b8cc:	b29b      	uxth	r3, r3
 801b8ce:	b219      	sxth	r1, r3
 801b8d0:	4b0c      	ldr	r3, [pc, #48]	; (801b904 <SX1276OnDio0Irq+0x31c>)
 801b8d2:	2262      	movs	r2, #98	; 0x62
 801b8d4:	5299      	strh	r1, [r3, r2]
 801b8d6:	e033      	b.n	801b940 <SX1276OnDio0Irq+0x358>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 801b8d8:	4b0a      	ldr	r3, [pc, #40]	; (801b904 <SX1276OnDio0Irq+0x31c>)
 801b8da:	689b      	ldr	r3, [r3, #8]
 801b8dc:	4a0f      	ldr	r2, [pc, #60]	; (801b91c <SX1276OnDio0Irq+0x334>)
 801b8de:	4293      	cmp	r3, r2
 801b8e0:	d91e      	bls.n	801b920 <SX1276OnDio0Irq+0x338>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 801b8e2:	1dbb      	adds	r3, r7, #6
 801b8e4:	2200      	movs	r2, #0
 801b8e6:	5e9b      	ldrsh	r3, [r3, r2]
 801b8e8:	111b      	asrs	r3, r3, #4
 801b8ea:	b21b      	sxth	r3, r3
 801b8ec:	b29a      	uxth	r2, r3
 801b8ee:	1dbb      	adds	r3, r7, #6
 801b8f0:	881b      	ldrh	r3, [r3, #0]
 801b8f2:	18d3      	adds	r3, r2, r3
 801b8f4:	b29b      	uxth	r3, r3
 801b8f6:	3b9d      	subs	r3, #157	; 0x9d
 801b8f8:	b29b      	uxth	r3, r3
 801b8fa:	b219      	sxth	r1, r3
 801b8fc:	4b01      	ldr	r3, [pc, #4]	; (801b904 <SX1276OnDio0Irq+0x31c>)
 801b8fe:	2262      	movs	r2, #98	; 0x62
 801b900:	5299      	strh	r1, [r3, r2]
 801b902:	e01d      	b.n	801b940 <SX1276OnDio0Irq+0x358>
 801b904:	2000177c 	.word	0x2000177c
 801b908:	200017e4 	.word	0x200017e4
 801b90c:	20001764 	.word	0x20001764
 801b910:	20000e80 	.word	0x20000e80
 801b914:	200017b6 	.word	0x200017b6
 801b918:	20000e84 	.word	0x20000e84
 801b91c:	1f4add40 	.word	0x1f4add40
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 801b920:	1dbb      	adds	r3, r7, #6
 801b922:	2200      	movs	r2, #0
 801b924:	5e9b      	ldrsh	r3, [r3, r2]
 801b926:	111b      	asrs	r3, r3, #4
 801b928:	b21b      	sxth	r3, r3
 801b92a:	b29a      	uxth	r2, r3
 801b92c:	1dbb      	adds	r3, r7, #6
 801b92e:	881b      	ldrh	r3, [r3, #0]
 801b930:	18d3      	adds	r3, r2, r3
 801b932:	b29b      	uxth	r3, r3
 801b934:	3ba4      	subs	r3, #164	; 0xa4
 801b936:	b29b      	uxth	r3, r3
 801b938:	b219      	sxth	r1, r3
 801b93a:	4b34      	ldr	r3, [pc, #208]	; (801ba0c <SX1276OnDio0Irq+0x424>)
 801b93c:	2262      	movs	r2, #98	; 0x62
 801b93e:	5299      	strh	r1, [r3, r2]
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 801b940:	2013      	movs	r0, #19
 801b942:	f7ff fb7a 	bl	801b03a <SX1276Read>
 801b946:	0003      	movs	r3, r0
 801b948:	0019      	movs	r1, r3
 801b94a:	4b30      	ldr	r3, [pc, #192]	; (801ba0c <SX1276OnDio0Irq+0x424>)
 801b94c:	2264      	movs	r2, #100	; 0x64
 801b94e:	5499      	strb	r1, [r3, r2]
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 801b950:	2010      	movs	r0, #16
 801b952:	f7ff fb72 	bl	801b03a <SX1276Read>
 801b956:	0003      	movs	r3, r0
 801b958:	0019      	movs	r1, r3
 801b95a:	200d      	movs	r0, #13
 801b95c:	f7ff fb5c 	bl	801b018 <SX1276Write>
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 801b960:	4b2a      	ldr	r3, [pc, #168]	; (801ba0c <SX1276OnDio0Irq+0x424>)
 801b962:	2264      	movs	r2, #100	; 0x64
 801b964:	5c9a      	ldrb	r2, [r3, r2]
 801b966:	4b2a      	ldr	r3, [pc, #168]	; (801ba10 <SX1276OnDio0Irq+0x428>)
 801b968:	0011      	movs	r1, r2
 801b96a:	0018      	movs	r0, r3
 801b96c:	f7ff fbf2 	bl	801b154 <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 801b970:	4b26      	ldr	r3, [pc, #152]	; (801ba0c <SX1276OnDio0Irq+0x424>)
 801b972:	2256      	movs	r2, #86	; 0x56
 801b974:	5c9b      	ldrb	r3, [r3, r2]
 801b976:	2201      	movs	r2, #1
 801b978:	4053      	eors	r3, r2
 801b97a:	b2db      	uxtb	r3, r3
 801b97c:	2b00      	cmp	r3, #0
 801b97e:	d002      	beq.n	801b986 <SX1276OnDio0Irq+0x39e>
                        SX1276.Settings.State = RF_IDLE;
 801b980:	4b22      	ldr	r3, [pc, #136]	; (801ba0c <SX1276OnDio0Irq+0x424>)
 801b982:	2200      	movs	r2, #0
 801b984:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutTimer );
 801b986:	4b23      	ldr	r3, [pc, #140]	; (801ba14 <SX1276OnDio0Irq+0x42c>)
 801b988:	0018      	movs	r0, r3
 801b98a:	f001 f9b9 	bl	801cd00 <UTIL_TIMER_Stop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801b98e:	4b22      	ldr	r3, [pc, #136]	; (801ba18 <SX1276OnDio0Irq+0x430>)
 801b990:	681b      	ldr	r3, [r3, #0]
 801b992:	2b00      	cmp	r3, #0
 801b994:	d016      	beq.n	801b9c4 <SX1276OnDio0Irq+0x3dc>
 801b996:	4b20      	ldr	r3, [pc, #128]	; (801ba18 <SX1276OnDio0Irq+0x430>)
 801b998:	681b      	ldr	r3, [r3, #0]
 801b99a:	689b      	ldr	r3, [r3, #8]
 801b99c:	2b00      	cmp	r3, #0
 801b99e:	d011      	beq.n	801b9c4 <SX1276OnDio0Irq+0x3dc>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 801b9a0:	4b1d      	ldr	r3, [pc, #116]	; (801ba18 <SX1276OnDio0Irq+0x430>)
 801b9a2:	681b      	ldr	r3, [r3, #0]
 801b9a4:	689c      	ldr	r4, [r3, #8]
 801b9a6:	4b19      	ldr	r3, [pc, #100]	; (801ba0c <SX1276OnDio0Irq+0x424>)
 801b9a8:	2264      	movs	r2, #100	; 0x64
 801b9aa:	5c9b      	ldrb	r3, [r3, r2]
 801b9ac:	b299      	uxth	r1, r3
 801b9ae:	4b17      	ldr	r3, [pc, #92]	; (801ba0c <SX1276OnDio0Irq+0x424>)
 801b9b0:	2262      	movs	r2, #98	; 0x62
 801b9b2:	5e9a      	ldrsh	r2, [r3, r2]
 801b9b4:	4b15      	ldr	r3, [pc, #84]	; (801ba0c <SX1276OnDio0Irq+0x424>)
 801b9b6:	2060      	movs	r0, #96	; 0x60
 801b9b8:	561b      	ldrsb	r3, [r3, r0]
 801b9ba:	4815      	ldr	r0, [pc, #84]	; (801ba10 <SX1276OnDio0Irq+0x428>)
 801b9bc:	47a0      	blx	r4
                break;
 801b9be:	e001      	b.n	801b9c4 <SX1276OnDio0Irq+0x3dc>
                        break;
 801b9c0:	46c0      	nop			; (mov r8, r8)
 801b9c2:	e01f      	b.n	801ba04 <SX1276OnDio0Irq+0x41c>
                break;
 801b9c4:	46c0      	nop			; (mov r8, r8)
            break;
 801b9c6:	e01d      	b.n	801ba04 <SX1276OnDio0Irq+0x41c>
            TimerStop( &TxTimeoutTimer );
 801b9c8:	4b14      	ldr	r3, [pc, #80]	; (801ba1c <SX1276OnDio0Irq+0x434>)
 801b9ca:	0018      	movs	r0, r3
 801b9cc:	f001 f998 	bl	801cd00 <UTIL_TIMER_Stop>
            switch( SX1276.Settings.Modem )
 801b9d0:	4b0e      	ldr	r3, [pc, #56]	; (801ba0c <SX1276OnDio0Irq+0x424>)
 801b9d2:	795b      	ldrb	r3, [r3, #5]
 801b9d4:	2b01      	cmp	r3, #1
 801b9d6:	d103      	bne.n	801b9e0 <SX1276OnDio0Irq+0x3f8>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 801b9d8:	2108      	movs	r1, #8
 801b9da:	2012      	movs	r0, #18
 801b9dc:	f7ff fb1c 	bl	801b018 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 801b9e0:	4b0a      	ldr	r3, [pc, #40]	; (801ba0c <SX1276OnDio0Irq+0x424>)
 801b9e2:	2200      	movs	r2, #0
 801b9e4:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 801b9e6:	4b0c      	ldr	r3, [pc, #48]	; (801ba18 <SX1276OnDio0Irq+0x430>)
 801b9e8:	681b      	ldr	r3, [r3, #0]
 801b9ea:	2b00      	cmp	r3, #0
 801b9ec:	d008      	beq.n	801ba00 <SX1276OnDio0Irq+0x418>
 801b9ee:	4b0a      	ldr	r3, [pc, #40]	; (801ba18 <SX1276OnDio0Irq+0x430>)
 801b9f0:	681b      	ldr	r3, [r3, #0]
 801b9f2:	681b      	ldr	r3, [r3, #0]
 801b9f4:	2b00      	cmp	r3, #0
 801b9f6:	d003      	beq.n	801ba00 <SX1276OnDio0Irq+0x418>
                    RadioEvents->TxDone( );
 801b9f8:	4b07      	ldr	r3, [pc, #28]	; (801ba18 <SX1276OnDio0Irq+0x430>)
 801b9fa:	681b      	ldr	r3, [r3, #0]
 801b9fc:	681b      	ldr	r3, [r3, #0]
 801b9fe:	4798      	blx	r3
                break;
 801ba00:	46c0      	nop			; (mov r8, r8)
            break;
 801ba02:	46c0      	nop			; (mov r8, r8)
    }
}
 801ba04:	46c0      	nop			; (mov r8, r8)
 801ba06:	46bd      	mov	sp, r7
 801ba08:	b003      	add	sp, #12
 801ba0a:	bd90      	pop	{r4, r7, pc}
 801ba0c:	2000177c 	.word	0x2000177c
 801ba10:	20000e84 	.word	0x20000e84
 801ba14:	200017e4 	.word	0x200017e4
 801ba18:	20000e80 	.word	0x20000e80
 801ba1c:	2000174c 	.word	0x2000174c

0801ba20 <SX1276OnDio1Irq>:

static void SX1276OnDio1Irq( void )
{
 801ba20:	b580      	push	{r7, lr}
 801ba22:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.State )
 801ba24:	4b6c      	ldr	r3, [pc, #432]	; (801bbd8 <SX1276OnDio1Irq+0x1b8>)
 801ba26:	791b      	ldrb	r3, [r3, #4]
 801ba28:	2b01      	cmp	r3, #1
 801ba2a:	d003      	beq.n	801ba34 <SX1276OnDio1Irq+0x14>
 801ba2c:	2b02      	cmp	r3, #2
 801ba2e:	d100      	bne.n	801ba32 <SX1276OnDio1Irq+0x12>
 801ba30:	e08b      	b.n	801bb4a <SX1276OnDio1Irq+0x12a>
            default:
                break;
            }
            break;
        default:
            break;
 801ba32:	e0ce      	b.n	801bbd2 <SX1276OnDio1Irq+0x1b2>
            switch( SX1276.Settings.Modem )
 801ba34:	4b68      	ldr	r3, [pc, #416]	; (801bbd8 <SX1276OnDio1Irq+0x1b8>)
 801ba36:	795b      	ldrb	r3, [r3, #5]
 801ba38:	2b00      	cmp	r3, #0
 801ba3a:	d002      	beq.n	801ba42 <SX1276OnDio1Irq+0x22>
 801ba3c:	2b01      	cmp	r3, #1
 801ba3e:	d061      	beq.n	801bb04 <SX1276OnDio1Irq+0xe4>
                break;
 801ba40:	e082      	b.n	801bb48 <SX1276OnDio1Irq+0x128>
                if( Sx_Board_GetDio1PinState( ) == 0 )
 801ba42:	f7ea fb1d 	bl	8006080 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 801ba46:	1e03      	subs	r3, r0, #0
 801ba48:	d100      	bne.n	801ba4c <SX1276OnDio1Irq+0x2c>
 801ba4a:	e078      	b.n	801bb3e <SX1276OnDio1Irq+0x11e>
                TimerStop( &RxTimeoutSyncWord );
 801ba4c:	4b63      	ldr	r3, [pc, #396]	; (801bbdc <SX1276OnDio1Irq+0x1bc>)
 801ba4e:	0018      	movs	r0, r3
 801ba50:	f001 f956 	bl	801cd00 <UTIL_TIMER_Stop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 801ba54:	4b60      	ldr	r3, [pc, #384]	; (801bbd8 <SX1276OnDio1Irq+0x1b8>)
 801ba56:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801ba58:	2b00      	cmp	r3, #0
 801ba5a:	d118      	bne.n	801ba8e <SX1276OnDio1Irq+0x6e>
 801ba5c:	4b5e      	ldr	r3, [pc, #376]	; (801bbd8 <SX1276OnDio1Irq+0x1b8>)
 801ba5e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801ba60:	2b00      	cmp	r3, #0
 801ba62:	d114      	bne.n	801ba8e <SX1276OnDio1Irq+0x6e>
                    if( SX1276.Settings.Fsk.FixLen == false )
 801ba64:	4b5c      	ldr	r3, [pc, #368]	; (801bbd8 <SX1276OnDio1Irq+0x1b8>)
 801ba66:	2222      	movs	r2, #34	; 0x22
 801ba68:	5c9b      	ldrb	r3, [r3, r2]
 801ba6a:	2201      	movs	r2, #1
 801ba6c:	4053      	eors	r3, r2
 801ba6e:	b2db      	uxtb	r3, r3
 801ba70:	2b00      	cmp	r3, #0
 801ba72:	d005      	beq.n	801ba80 <SX1276OnDio1Irq+0x60>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 801ba74:	4b5a      	ldr	r3, [pc, #360]	; (801bbe0 <SX1276OnDio1Irq+0x1c0>)
 801ba76:	2101      	movs	r1, #1
 801ba78:	0018      	movs	r0, r3
 801ba7a:	f7ff fb6b 	bl	801b154 <SX1276ReadFifo>
 801ba7e:	e006      	b.n	801ba8e <SX1276OnDio1Irq+0x6e>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 801ba80:	2032      	movs	r0, #50	; 0x32
 801ba82:	f7ff fada 	bl	801b03a <SX1276Read>
 801ba86:	0003      	movs	r3, r0
 801ba88:	b29a      	uxth	r2, r3
 801ba8a:	4b53      	ldr	r3, [pc, #332]	; (801bbd8 <SX1276OnDio1Irq+0x1b8>)
 801ba8c:	875a      	strh	r2, [r3, #58]	; 0x3a
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 801ba8e:	4b52      	ldr	r3, [pc, #328]	; (801bbd8 <SX1276OnDio1Irq+0x1b8>)
 801ba90:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801ba92:	001a      	movs	r2, r3
 801ba94:	4b50      	ldr	r3, [pc, #320]	; (801bbd8 <SX1276OnDio1Irq+0x1b8>)
 801ba96:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801ba98:	1ad3      	subs	r3, r2, r3
 801ba9a:	4a4f      	ldr	r2, [pc, #316]	; (801bbd8 <SX1276OnDio1Irq+0x1b8>)
 801ba9c:	213e      	movs	r1, #62	; 0x3e
 801ba9e:	5c52      	ldrb	r2, [r2, r1]
 801baa0:	4293      	cmp	r3, r2
 801baa2:	db1a      	blt.n	801bada <SX1276OnDio1Irq+0xba>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 801baa4:	4b4c      	ldr	r3, [pc, #304]	; (801bbd8 <SX1276OnDio1Irq+0x1b8>)
 801baa6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801baa8:	001a      	movs	r2, r3
 801baaa:	4b4e      	ldr	r3, [pc, #312]	; (801bbe4 <SX1276OnDio1Irq+0x1c4>)
 801baac:	18d2      	adds	r2, r2, r3
 801baae:	4b4a      	ldr	r3, [pc, #296]	; (801bbd8 <SX1276OnDio1Irq+0x1b8>)
 801bab0:	213e      	movs	r1, #62	; 0x3e
 801bab2:	5c5b      	ldrb	r3, [r3, r1]
 801bab4:	3b01      	subs	r3, #1
 801bab6:	b2db      	uxtb	r3, r3
 801bab8:	0019      	movs	r1, r3
 801baba:	0010      	movs	r0, r2
 801babc:	f7ff fb4a 	bl	801b154 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 801bac0:	4b45      	ldr	r3, [pc, #276]	; (801bbd8 <SX1276OnDio1Irq+0x1b8>)
 801bac2:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 801bac4:	4b44      	ldr	r3, [pc, #272]	; (801bbd8 <SX1276OnDio1Irq+0x1b8>)
 801bac6:	213e      	movs	r1, #62	; 0x3e
 801bac8:	5c5b      	ldrb	r3, [r3, r1]
 801baca:	b29b      	uxth	r3, r3
 801bacc:	18d3      	adds	r3, r2, r3
 801bace:	b29b      	uxth	r3, r3
 801bad0:	3b01      	subs	r3, #1
 801bad2:	b29a      	uxth	r2, r3
 801bad4:	4b40      	ldr	r3, [pc, #256]	; (801bbd8 <SX1276OnDio1Irq+0x1b8>)
 801bad6:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 801bad8:	e036      	b.n	801bb48 <SX1276OnDio1Irq+0x128>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801bada:	4b3f      	ldr	r3, [pc, #252]	; (801bbd8 <SX1276OnDio1Irq+0x1b8>)
 801badc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801bade:	001a      	movs	r2, r3
 801bae0:	4b40      	ldr	r3, [pc, #256]	; (801bbe4 <SX1276OnDio1Irq+0x1c4>)
 801bae2:	18d0      	adds	r0, r2, r3
 801bae4:	4b3c      	ldr	r3, [pc, #240]	; (801bbd8 <SX1276OnDio1Irq+0x1b8>)
 801bae6:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801bae8:	b2da      	uxtb	r2, r3
 801baea:	4b3b      	ldr	r3, [pc, #236]	; (801bbd8 <SX1276OnDio1Irq+0x1b8>)
 801baec:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801baee:	b2db      	uxtb	r3, r3
 801baf0:	1ad3      	subs	r3, r2, r3
 801baf2:	b2db      	uxtb	r3, r3
 801baf4:	0019      	movs	r1, r3
 801baf6:	f7ff fb2d 	bl	801b154 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801bafa:	4b37      	ldr	r3, [pc, #220]	; (801bbd8 <SX1276OnDio1Irq+0x1b8>)
 801bafc:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801bafe:	4b36      	ldr	r3, [pc, #216]	; (801bbd8 <SX1276OnDio1Irq+0x1b8>)
 801bb00:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 801bb02:	e021      	b.n	801bb48 <SX1276OnDio1Irq+0x128>
                if( Sx_Board_GetDio1PinState( ) == 0 )
 801bb04:	f7ea fabc 	bl	8006080 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 801bb08:	1e03      	subs	r3, r0, #0
 801bb0a:	d01a      	beq.n	801bb42 <SX1276OnDio1Irq+0x122>
                TimerStop( &RxTimeoutTimer );
 801bb0c:	4b36      	ldr	r3, [pc, #216]	; (801bbe8 <SX1276OnDio1Irq+0x1c8>)
 801bb0e:	0018      	movs	r0, r3
 801bb10:	f001 f8f6 	bl	801cd00 <UTIL_TIMER_Stop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 801bb14:	2180      	movs	r1, #128	; 0x80
 801bb16:	2012      	movs	r0, #18
 801bb18:	f7ff fa7e 	bl	801b018 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 801bb1c:	4b2e      	ldr	r3, [pc, #184]	; (801bbd8 <SX1276OnDio1Irq+0x1b8>)
 801bb1e:	2200      	movs	r2, #0
 801bb20:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801bb22:	4b32      	ldr	r3, [pc, #200]	; (801bbec <SX1276OnDio1Irq+0x1cc>)
 801bb24:	681b      	ldr	r3, [r3, #0]
 801bb26:	2b00      	cmp	r3, #0
 801bb28:	d00d      	beq.n	801bb46 <SX1276OnDio1Irq+0x126>
 801bb2a:	4b30      	ldr	r3, [pc, #192]	; (801bbec <SX1276OnDio1Irq+0x1cc>)
 801bb2c:	681b      	ldr	r3, [r3, #0]
 801bb2e:	68db      	ldr	r3, [r3, #12]
 801bb30:	2b00      	cmp	r3, #0
 801bb32:	d008      	beq.n	801bb46 <SX1276OnDio1Irq+0x126>
                    RadioEvents->RxTimeout( );
 801bb34:	4b2d      	ldr	r3, [pc, #180]	; (801bbec <SX1276OnDio1Irq+0x1cc>)
 801bb36:	681b      	ldr	r3, [r3, #0]
 801bb38:	68db      	ldr	r3, [r3, #12]
 801bb3a:	4798      	blx	r3
                break;
 801bb3c:	e003      	b.n	801bb46 <SX1276OnDio1Irq+0x126>
                    break;
 801bb3e:	46c0      	nop			; (mov r8, r8)
 801bb40:	e047      	b.n	801bbd2 <SX1276OnDio1Irq+0x1b2>
                    break;
 801bb42:	46c0      	nop			; (mov r8, r8)
 801bb44:	e045      	b.n	801bbd2 <SX1276OnDio1Irq+0x1b2>
                break;
 801bb46:	46c0      	nop			; (mov r8, r8)
            break;
 801bb48:	e043      	b.n	801bbd2 <SX1276OnDio1Irq+0x1b2>
            switch( SX1276.Settings.Modem )
 801bb4a:	4b23      	ldr	r3, [pc, #140]	; (801bbd8 <SX1276OnDio1Irq+0x1b8>)
 801bb4c:	795b      	ldrb	r3, [r3, #5]
 801bb4e:	2b00      	cmp	r3, #0
 801bb50:	d13b      	bne.n	801bbca <SX1276OnDio1Irq+0x1aa>
                if( Sx_Board_GetDio1PinState( ) == 1 )
 801bb52:	f7ea fa95 	bl	8006080 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 801bb56:	0003      	movs	r3, r0
 801bb58:	2b01      	cmp	r3, #1
 801bb5a:	d038      	beq.n	801bbce <SX1276OnDio1Irq+0x1ae>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 801bb5c:	4b1e      	ldr	r3, [pc, #120]	; (801bbd8 <SX1276OnDio1Irq+0x1b8>)
 801bb5e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801bb60:	001a      	movs	r2, r3
 801bb62:	4b1d      	ldr	r3, [pc, #116]	; (801bbd8 <SX1276OnDio1Irq+0x1b8>)
 801bb64:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801bb66:	1ad3      	subs	r3, r2, r3
 801bb68:	4a1b      	ldr	r2, [pc, #108]	; (801bbd8 <SX1276OnDio1Irq+0x1b8>)
 801bb6a:	213f      	movs	r1, #63	; 0x3f
 801bb6c:	5c52      	ldrb	r2, [r2, r1]
 801bb6e:	4293      	cmp	r3, r2
 801bb70:	dd16      	ble.n	801bba0 <SX1276OnDio1Irq+0x180>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 801bb72:	4b19      	ldr	r3, [pc, #100]	; (801bbd8 <SX1276OnDio1Irq+0x1b8>)
 801bb74:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801bb76:	001a      	movs	r2, r3
 801bb78:	4b1a      	ldr	r3, [pc, #104]	; (801bbe4 <SX1276OnDio1Irq+0x1c4>)
 801bb7a:	18d2      	adds	r2, r2, r3
 801bb7c:	4b16      	ldr	r3, [pc, #88]	; (801bbd8 <SX1276OnDio1Irq+0x1b8>)
 801bb7e:	213f      	movs	r1, #63	; 0x3f
 801bb80:	5c5b      	ldrb	r3, [r3, r1]
 801bb82:	0019      	movs	r1, r3
 801bb84:	0010      	movs	r0, r2
 801bb86:	f7ff fad3 	bl	801b130 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 801bb8a:	4b13      	ldr	r3, [pc, #76]	; (801bbd8 <SX1276OnDio1Irq+0x1b8>)
 801bb8c:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 801bb8e:	4b12      	ldr	r3, [pc, #72]	; (801bbd8 <SX1276OnDio1Irq+0x1b8>)
 801bb90:	213f      	movs	r1, #63	; 0x3f
 801bb92:	5c5b      	ldrb	r3, [r3, r1]
 801bb94:	b29b      	uxth	r3, r3
 801bb96:	18d3      	adds	r3, r2, r3
 801bb98:	b29a      	uxth	r2, r3
 801bb9a:	4b0f      	ldr	r3, [pc, #60]	; (801bbd8 <SX1276OnDio1Irq+0x1b8>)
 801bb9c:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 801bb9e:	e017      	b.n	801bbd0 <SX1276OnDio1Irq+0x1b0>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 801bba0:	4b0d      	ldr	r3, [pc, #52]	; (801bbd8 <SX1276OnDio1Irq+0x1b8>)
 801bba2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801bba4:	001a      	movs	r2, r3
 801bba6:	4b0f      	ldr	r3, [pc, #60]	; (801bbe4 <SX1276OnDio1Irq+0x1c4>)
 801bba8:	18d0      	adds	r0, r2, r3
 801bbaa:	4b0b      	ldr	r3, [pc, #44]	; (801bbd8 <SX1276OnDio1Irq+0x1b8>)
 801bbac:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801bbae:	b2da      	uxtb	r2, r3
 801bbb0:	4b09      	ldr	r3, [pc, #36]	; (801bbd8 <SX1276OnDio1Irq+0x1b8>)
 801bbb2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801bbb4:	b2db      	uxtb	r3, r3
 801bbb6:	1ad3      	subs	r3, r2, r3
 801bbb8:	b2db      	uxtb	r3, r3
 801bbba:	0019      	movs	r1, r3
 801bbbc:	f7ff fab8 	bl	801b130 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 801bbc0:	4b05      	ldr	r3, [pc, #20]	; (801bbd8 <SX1276OnDio1Irq+0x1b8>)
 801bbc2:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 801bbc4:	4b04      	ldr	r3, [pc, #16]	; (801bbd8 <SX1276OnDio1Irq+0x1b8>)
 801bbc6:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 801bbc8:	e002      	b.n	801bbd0 <SX1276OnDio1Irq+0x1b0>
                break;
 801bbca:	46c0      	nop			; (mov r8, r8)
 801bbcc:	e000      	b.n	801bbd0 <SX1276OnDio1Irq+0x1b0>
                    break;
 801bbce:	46c0      	nop			; (mov r8, r8)
            break;
 801bbd0:	46c0      	nop			; (mov r8, r8)
    }
}
 801bbd2:	46c0      	nop			; (mov r8, r8)
 801bbd4:	46bd      	mov	sp, r7
 801bbd6:	bd80      	pop	{r7, pc}
 801bbd8:	2000177c 	.word	0x2000177c
 801bbdc:	20001764 	.word	0x20001764
 801bbe0:	200017b6 	.word	0x200017b6
 801bbe4:	20000e84 	.word	0x20000e84
 801bbe8:	200017e4 	.word	0x200017e4
 801bbec:	20000e80 	.word	0x20000e80

0801bbf0 <SX1276OnDio2Irq>:

static void SX1276OnDio2Irq( void )
{
 801bbf0:	b590      	push	{r4, r7, lr}
 801bbf2:	b085      	sub	sp, #20
 801bbf4:	af00      	add	r7, sp, #0
    uint32_t afcChannel = 0;
 801bbf6:	2300      	movs	r3, #0
 801bbf8:	60fb      	str	r3, [r7, #12]

    switch( SX1276.Settings.State )
 801bbfa:	4b5d      	ldr	r3, [pc, #372]	; (801bd70 <SX1276OnDio2Irq+0x180>)
 801bbfc:	791b      	ldrb	r3, [r3, #4]
 801bbfe:	2b01      	cmp	r3, #1
 801bc00:	d003      	beq.n	801bc0a <SX1276OnDio2Irq+0x1a>
 801bc02:	2b02      	cmp	r3, #2
 801bc04:	d100      	bne.n	801bc08 <SX1276OnDio2Irq+0x18>
 801bc06:	e083      	b.n	801bd10 <SX1276OnDio2Irq+0x120>
            default:
                break;
            }
            break;
        default:
            break;
 801bc08:	e0ae      	b.n	801bd68 <SX1276OnDio2Irq+0x178>
            switch( SX1276.Settings.Modem )
 801bc0a:	4b59      	ldr	r3, [pc, #356]	; (801bd70 <SX1276OnDio2Irq+0x180>)
 801bc0c:	795b      	ldrb	r3, [r3, #5]
 801bc0e:	2b00      	cmp	r3, #0
 801bc10:	d002      	beq.n	801bc18 <SX1276OnDio2Irq+0x28>
 801bc12:	2b01      	cmp	r3, #1
 801bc14:	d058      	beq.n	801bcc8 <SX1276OnDio2Irq+0xd8>
                break;
 801bc16:	e07a      	b.n	801bd0e <SX1276OnDio2Irq+0x11e>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 801bc18:	4b55      	ldr	r3, [pc, #340]	; (801bd70 <SX1276OnDio2Irq+0x180>)
 801bc1a:	2230      	movs	r2, #48	; 0x30
 801bc1c:	2101      	movs	r1, #1
 801bc1e:	5499      	strb	r1, [r3, r2]
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 801bc20:	4b53      	ldr	r3, [pc, #332]	; (801bd70 <SX1276OnDio2Irq+0x180>)
 801bc22:	2230      	movs	r2, #48	; 0x30
 801bc24:	5c9b      	ldrb	r3, [r3, r2]
 801bc26:	2b00      	cmp	r3, #0
 801bc28:	d06e      	beq.n	801bd08 <SX1276OnDio2Irq+0x118>
 801bc2a:	4b51      	ldr	r3, [pc, #324]	; (801bd70 <SX1276OnDio2Irq+0x180>)
 801bc2c:	2231      	movs	r2, #49	; 0x31
 801bc2e:	5c9b      	ldrb	r3, [r3, r2]
 801bc30:	2b00      	cmp	r3, #0
 801bc32:	d169      	bne.n	801bd08 <SX1276OnDio2Irq+0x118>
                    TimerStop( &RxTimeoutSyncWord );
 801bc34:	4b4f      	ldr	r3, [pc, #316]	; (801bd74 <SX1276OnDio2Irq+0x184>)
 801bc36:	0018      	movs	r0, r3
 801bc38:	f001 f862 	bl	801cd00 <UTIL_TIMER_Stop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 801bc3c:	4b4c      	ldr	r3, [pc, #304]	; (801bd70 <SX1276OnDio2Irq+0x180>)
 801bc3e:	2231      	movs	r2, #49	; 0x31
 801bc40:	2101      	movs	r1, #1
 801bc42:	5499      	strb	r1, [r3, r2]
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 801bc44:	2011      	movs	r0, #17
 801bc46:	f7ff f9f8 	bl	801b03a <SX1276Read>
 801bc4a:	0003      	movs	r3, r0
 801bc4c:	085b      	lsrs	r3, r3, #1
 801bc4e:	b2db      	uxtb	r3, r3
 801bc50:	425b      	negs	r3, r3
 801bc52:	b2db      	uxtb	r3, r3
 801bc54:	b259      	sxtb	r1, r3
 801bc56:	4b46      	ldr	r3, [pc, #280]	; (801bd70 <SX1276OnDio2Irq+0x180>)
 801bc58:	2232      	movs	r2, #50	; 0x32
 801bc5a:	5499      	strb	r1, [r3, r2]
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 801bc5c:	201b      	movs	r0, #27
 801bc5e:	f7ff f9ec 	bl	801b03a <SX1276Read>
 801bc62:	0003      	movs	r3, r0
 801bc64:	021c      	lsls	r4, r3, #8
                                     ( uint16_t )SX1276Read( REG_AFCLSB ) );
 801bc66:	201c      	movs	r0, #28
 801bc68:	f7ff f9e7 	bl	801b03a <SX1276Read>
 801bc6c:	0003      	movs	r3, r0
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 801bc6e:	4323      	orrs	r3, r4
 801bc70:	60fb      	str	r3, [r7, #12]
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue );
 801bc72:	68fb      	ldr	r3, [r7, #12]
 801bc74:	0a1b      	lsrs	r3, r3, #8
 801bc76:	60bb      	str	r3, [r7, #8]
 801bc78:	68bb      	ldr	r3, [r7, #8]
 801bc7a:	021b      	lsls	r3, r3, #8
 801bc7c:	68fa      	ldr	r2, [r7, #12]
 801bc7e:	1ad3      	subs	r3, r2, r3
 801bc80:	607b      	str	r3, [r7, #4]
 801bc82:	68b9      	ldr	r1, [r7, #8]
 801bc84:	000b      	movs	r3, r1
 801bc86:	015b      	lsls	r3, r3, #5
 801bc88:	1a5b      	subs	r3, r3, r1
 801bc8a:	019a      	lsls	r2, r3, #6
 801bc8c:	1ad2      	subs	r2, r2, r3
 801bc8e:	00d2      	lsls	r2, r2, #3
 801bc90:	1850      	adds	r0, r2, r1
 801bc92:	6879      	ldr	r1, [r7, #4]
 801bc94:	000b      	movs	r3, r1
 801bc96:	015b      	lsls	r3, r3, #5
 801bc98:	1a5b      	subs	r3, r3, r1
 801bc9a:	019a      	lsls	r2, r3, #6
 801bc9c:	1ad2      	subs	r2, r2, r3
 801bc9e:	00d2      	lsls	r2, r2, #3
 801bca0:	1853      	adds	r3, r2, r1
 801bca2:	3380      	adds	r3, #128	; 0x80
 801bca4:	0a1b      	lsrs	r3, r3, #8
 801bca6:	18c3      	adds	r3, r0, r3
 801bca8:	001a      	movs	r2, r3
 801bcaa:	4b31      	ldr	r3, [pc, #196]	; (801bd70 <SX1276OnDio2Irq+0x180>)
 801bcac:	635a      	str	r2, [r3, #52]	; 0x34
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 801bcae:	200c      	movs	r0, #12
 801bcb0:	f7ff f9c3 	bl	801b03a <SX1276Read>
 801bcb4:	0003      	movs	r3, r0
 801bcb6:	095b      	lsrs	r3, r3, #5
 801bcb8:	b2db      	uxtb	r3, r3
 801bcba:	2207      	movs	r2, #7
 801bcbc:	4013      	ands	r3, r2
 801bcbe:	b2d9      	uxtb	r1, r3
 801bcc0:	4b2b      	ldr	r3, [pc, #172]	; (801bd70 <SX1276OnDio2Irq+0x180>)
 801bcc2:	2238      	movs	r2, #56	; 0x38
 801bcc4:	5499      	strb	r1, [r3, r2]
                break;
 801bcc6:	e01f      	b.n	801bd08 <SX1276OnDio2Irq+0x118>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 801bcc8:	4b29      	ldr	r3, [pc, #164]	; (801bd70 <SX1276OnDio2Irq+0x180>)
 801bcca:	2253      	movs	r2, #83	; 0x53
 801bccc:	5c9b      	ldrb	r3, [r3, r2]
 801bcce:	2b00      	cmp	r3, #0
 801bcd0:	d01c      	beq.n	801bd0c <SX1276OnDio2Irq+0x11c>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 801bcd2:	2102      	movs	r1, #2
 801bcd4:	2012      	movs	r0, #18
 801bcd6:	f7ff f99f 	bl	801b018 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 801bcda:	4b27      	ldr	r3, [pc, #156]	; (801bd78 <SX1276OnDio2Irq+0x188>)
 801bcdc:	681b      	ldr	r3, [r3, #0]
 801bcde:	2b00      	cmp	r3, #0
 801bce0:	d014      	beq.n	801bd0c <SX1276OnDio2Irq+0x11c>
 801bce2:	4b25      	ldr	r3, [pc, #148]	; (801bd78 <SX1276OnDio2Irq+0x188>)
 801bce4:	681b      	ldr	r3, [r3, #0]
 801bce6:	695b      	ldr	r3, [r3, #20]
 801bce8:	2b00      	cmp	r3, #0
 801bcea:	d00f      	beq.n	801bd0c <SX1276OnDio2Irq+0x11c>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 801bcec:	4b22      	ldr	r3, [pc, #136]	; (801bd78 <SX1276OnDio2Irq+0x188>)
 801bcee:	681b      	ldr	r3, [r3, #0]
 801bcf0:	695c      	ldr	r4, [r3, #20]
 801bcf2:	201c      	movs	r0, #28
 801bcf4:	f7ff f9a1 	bl	801b03a <SX1276Read>
 801bcf8:	0003      	movs	r3, r0
 801bcfa:	001a      	movs	r2, r3
 801bcfc:	233f      	movs	r3, #63	; 0x3f
 801bcfe:	4013      	ands	r3, r2
 801bd00:	b2db      	uxtb	r3, r3
 801bd02:	0018      	movs	r0, r3
 801bd04:	47a0      	blx	r4
                break;
 801bd06:	e001      	b.n	801bd0c <SX1276OnDio2Irq+0x11c>
                break;
 801bd08:	46c0      	nop			; (mov r8, r8)
 801bd0a:	e02d      	b.n	801bd68 <SX1276OnDio2Irq+0x178>
                break;
 801bd0c:	46c0      	nop			; (mov r8, r8)
            break;
 801bd0e:	e02b      	b.n	801bd68 <SX1276OnDio2Irq+0x178>
            switch( SX1276.Settings.Modem )
 801bd10:	4b17      	ldr	r3, [pc, #92]	; (801bd70 <SX1276OnDio2Irq+0x180>)
 801bd12:	795b      	ldrb	r3, [r3, #5]
 801bd14:	2b00      	cmp	r3, #0
 801bd16:	d021      	beq.n	801bd5c <SX1276OnDio2Irq+0x16c>
 801bd18:	2b01      	cmp	r3, #1
 801bd1a:	d121      	bne.n	801bd60 <SX1276OnDio2Irq+0x170>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 801bd1c:	4b14      	ldr	r3, [pc, #80]	; (801bd70 <SX1276OnDio2Irq+0x180>)
 801bd1e:	2253      	movs	r2, #83	; 0x53
 801bd20:	5c9b      	ldrb	r3, [r3, r2]
 801bd22:	2b00      	cmp	r3, #0
 801bd24:	d01e      	beq.n	801bd64 <SX1276OnDio2Irq+0x174>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 801bd26:	2102      	movs	r1, #2
 801bd28:	2012      	movs	r0, #18
 801bd2a:	f7ff f975 	bl	801b018 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 801bd2e:	4b12      	ldr	r3, [pc, #72]	; (801bd78 <SX1276OnDio2Irq+0x188>)
 801bd30:	681b      	ldr	r3, [r3, #0]
 801bd32:	2b00      	cmp	r3, #0
 801bd34:	d016      	beq.n	801bd64 <SX1276OnDio2Irq+0x174>
 801bd36:	4b10      	ldr	r3, [pc, #64]	; (801bd78 <SX1276OnDio2Irq+0x188>)
 801bd38:	681b      	ldr	r3, [r3, #0]
 801bd3a:	695b      	ldr	r3, [r3, #20]
 801bd3c:	2b00      	cmp	r3, #0
 801bd3e:	d011      	beq.n	801bd64 <SX1276OnDio2Irq+0x174>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 801bd40:	4b0d      	ldr	r3, [pc, #52]	; (801bd78 <SX1276OnDio2Irq+0x188>)
 801bd42:	681b      	ldr	r3, [r3, #0]
 801bd44:	695c      	ldr	r4, [r3, #20]
 801bd46:	201c      	movs	r0, #28
 801bd48:	f7ff f977 	bl	801b03a <SX1276Read>
 801bd4c:	0003      	movs	r3, r0
 801bd4e:	001a      	movs	r2, r3
 801bd50:	233f      	movs	r3, #63	; 0x3f
 801bd52:	4013      	ands	r3, r2
 801bd54:	b2db      	uxtb	r3, r3
 801bd56:	0018      	movs	r0, r3
 801bd58:	47a0      	blx	r4
                break;
 801bd5a:	e003      	b.n	801bd64 <SX1276OnDio2Irq+0x174>
                break;
 801bd5c:	46c0      	nop			; (mov r8, r8)
 801bd5e:	e002      	b.n	801bd66 <SX1276OnDio2Irq+0x176>
                break;
 801bd60:	46c0      	nop			; (mov r8, r8)
 801bd62:	e000      	b.n	801bd66 <SX1276OnDio2Irq+0x176>
                break;
 801bd64:	46c0      	nop			; (mov r8, r8)
            break;
 801bd66:	46c0      	nop			; (mov r8, r8)
    }
}
 801bd68:	46c0      	nop			; (mov r8, r8)
 801bd6a:	46bd      	mov	sp, r7
 801bd6c:	b005      	add	sp, #20
 801bd6e:	bd90      	pop	{r4, r7, pc}
 801bd70:	2000177c 	.word	0x2000177c
 801bd74:	20001764 	.word	0x20001764
 801bd78:	20000e80 	.word	0x20000e80

0801bd7c <SX1276OnDio3Irq>:

static void SX1276OnDio3Irq( void )
{
 801bd7c:	b580      	push	{r7, lr}
 801bd7e:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 801bd80:	4b1d      	ldr	r3, [pc, #116]	; (801bdf8 <SX1276OnDio3Irq+0x7c>)
 801bd82:	795b      	ldrb	r3, [r3, #5]
 801bd84:	2b00      	cmp	r3, #0
 801bd86:	d031      	beq.n	801bdec <SX1276OnDio3Irq+0x70>
 801bd88:	2b01      	cmp	r3, #1
 801bd8a:	d000      	beq.n	801bd8e <SX1276OnDio3Irq+0x12>
                RadioEvents->CadDone( false );
            }
        }
        break;
    default:
        break;
 801bd8c:	e031      	b.n	801bdf2 <SX1276OnDio3Irq+0x76>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 801bd8e:	2012      	movs	r0, #18
 801bd90:	f7ff f953 	bl	801b03a <SX1276Read>
 801bd94:	0003      	movs	r3, r0
 801bd96:	001a      	movs	r2, r3
 801bd98:	2301      	movs	r3, #1
 801bd9a:	4013      	ands	r3, r2
 801bd9c:	2b01      	cmp	r3, #1
 801bd9e:	d112      	bne.n	801bdc6 <SX1276OnDio3Irq+0x4a>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 801bda0:	2105      	movs	r1, #5
 801bda2:	2012      	movs	r0, #18
 801bda4:	f7ff f938 	bl	801b018 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801bda8:	4b14      	ldr	r3, [pc, #80]	; (801bdfc <SX1276OnDio3Irq+0x80>)
 801bdaa:	681b      	ldr	r3, [r3, #0]
 801bdac:	2b00      	cmp	r3, #0
 801bdae:	d01f      	beq.n	801bdf0 <SX1276OnDio3Irq+0x74>
 801bdb0:	4b12      	ldr	r3, [pc, #72]	; (801bdfc <SX1276OnDio3Irq+0x80>)
 801bdb2:	681b      	ldr	r3, [r3, #0]
 801bdb4:	699b      	ldr	r3, [r3, #24]
 801bdb6:	2b00      	cmp	r3, #0
 801bdb8:	d01a      	beq.n	801bdf0 <SX1276OnDio3Irq+0x74>
                RadioEvents->CadDone( true );
 801bdba:	4b10      	ldr	r3, [pc, #64]	; (801bdfc <SX1276OnDio3Irq+0x80>)
 801bdbc:	681b      	ldr	r3, [r3, #0]
 801bdbe:	699b      	ldr	r3, [r3, #24]
 801bdc0:	2001      	movs	r0, #1
 801bdc2:	4798      	blx	r3
        break;
 801bdc4:	e014      	b.n	801bdf0 <SX1276OnDio3Irq+0x74>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 801bdc6:	2104      	movs	r1, #4
 801bdc8:	2012      	movs	r0, #18
 801bdca:	f7ff f925 	bl	801b018 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801bdce:	4b0b      	ldr	r3, [pc, #44]	; (801bdfc <SX1276OnDio3Irq+0x80>)
 801bdd0:	681b      	ldr	r3, [r3, #0]
 801bdd2:	2b00      	cmp	r3, #0
 801bdd4:	d00c      	beq.n	801bdf0 <SX1276OnDio3Irq+0x74>
 801bdd6:	4b09      	ldr	r3, [pc, #36]	; (801bdfc <SX1276OnDio3Irq+0x80>)
 801bdd8:	681b      	ldr	r3, [r3, #0]
 801bdda:	699b      	ldr	r3, [r3, #24]
 801bddc:	2b00      	cmp	r3, #0
 801bdde:	d007      	beq.n	801bdf0 <SX1276OnDio3Irq+0x74>
                RadioEvents->CadDone( false );
 801bde0:	4b06      	ldr	r3, [pc, #24]	; (801bdfc <SX1276OnDio3Irq+0x80>)
 801bde2:	681b      	ldr	r3, [r3, #0]
 801bde4:	699b      	ldr	r3, [r3, #24]
 801bde6:	2000      	movs	r0, #0
 801bde8:	4798      	blx	r3
        break;
 801bdea:	e001      	b.n	801bdf0 <SX1276OnDio3Irq+0x74>
        break;
 801bdec:	46c0      	nop			; (mov r8, r8)
 801bdee:	e000      	b.n	801bdf2 <SX1276OnDio3Irq+0x76>
        break;
 801bdf0:	46c0      	nop			; (mov r8, r8)
    }
}
 801bdf2:	46c0      	nop			; (mov r8, r8)
 801bdf4:	46bd      	mov	sp, r7
 801bdf6:	bd80      	pop	{r7, pc}
 801bdf8:	2000177c 	.word	0x2000177c
 801bdfc:	20000e80 	.word	0x20000e80

0801be00 <SX1276OnDio4Irq>:

static void SX1276OnDio4Irq( void )
{
 801be00:	b580      	push	{r7, lr}
 801be02:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 801be04:	4b0b      	ldr	r3, [pc, #44]	; (801be34 <SX1276OnDio4Irq+0x34>)
 801be06:	795b      	ldrb	r3, [r3, #5]
 801be08:	2b00      	cmp	r3, #0
 801be0a:	d002      	beq.n	801be12 <SX1276OnDio4Irq+0x12>
 801be0c:	2b01      	cmp	r3, #1
 801be0e:	d00a      	beq.n	801be26 <SX1276OnDio4Irq+0x26>
        }
        break;
    case MODEM_LORA:
        break;
    default:
        break;
 801be10:	e00c      	b.n	801be2c <SX1276OnDio4Irq+0x2c>
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 801be12:	4b08      	ldr	r3, [pc, #32]	; (801be34 <SX1276OnDio4Irq+0x34>)
 801be14:	2230      	movs	r2, #48	; 0x30
 801be16:	5c9b      	ldrb	r3, [r3, r2]
 801be18:	2b00      	cmp	r3, #0
 801be1a:	d106      	bne.n	801be2a <SX1276OnDio4Irq+0x2a>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 801be1c:	4b05      	ldr	r3, [pc, #20]	; (801be34 <SX1276OnDio4Irq+0x34>)
 801be1e:	2230      	movs	r2, #48	; 0x30
 801be20:	2101      	movs	r1, #1
 801be22:	5499      	strb	r1, [r3, r2]
        break;
 801be24:	e001      	b.n	801be2a <SX1276OnDio4Irq+0x2a>
        break;
 801be26:	46c0      	nop			; (mov r8, r8)
 801be28:	e000      	b.n	801be2c <SX1276OnDio4Irq+0x2c>
        break;
 801be2a:	46c0      	nop			; (mov r8, r8)
    }
}
 801be2c:	46c0      	nop			; (mov r8, r8)
 801be2e:	46bd      	mov	sp, r7
 801be30:	bd80      	pop	{r7, pc}
 801be32:	46c0      	nop			; (mov r8, r8)
 801be34:	2000177c 	.word	0x2000177c

0801be38 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801be38:	b580      	push	{r7, lr}
 801be3a:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801be3c:	4b0a      	ldr	r3, [pc, #40]	; (801be68 <UTIL_ADV_TRACE_Init+0x30>)
 801be3e:	2218      	movs	r2, #24
 801be40:	2100      	movs	r1, #0
 801be42:	0018      	movs	r0, r3
 801be44:	f000 fbb8 	bl	801c5b8 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801be48:	2380      	movs	r3, #128	; 0x80
 801be4a:	009a      	lsls	r2, r3, #2
 801be4c:	4b07      	ldr	r3, [pc, #28]	; (801be6c <UTIL_ADV_TRACE_Init+0x34>)
 801be4e:	2100      	movs	r1, #0
 801be50:	0018      	movs	r0, r3
 801be52:	f000 fbb1 	bl	801c5b8 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();
  
  /* Initialize the Low Level interface */  
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801be56:	4b06      	ldr	r3, [pc, #24]	; (801be70 <UTIL_ADV_TRACE_Init+0x38>)
 801be58:	681b      	ldr	r3, [r3, #0]
 801be5a:	4a06      	ldr	r2, [pc, #24]	; (801be74 <UTIL_ADV_TRACE_Init+0x3c>)
 801be5c:	0010      	movs	r0, r2
 801be5e:	4798      	blx	r3
 801be60:	0003      	movs	r3, r0
}
 801be62:	0018      	movs	r0, r3
 801be64:	46bd      	mov	sp, r7
 801be66:	bd80      	pop	{r7, pc}
 801be68:	20000f84 	.word	0x20000f84
 801be6c:	20000f9c 	.word	0x20000f9c
 801be70:	0801f1bc 	.word	0x0801f1bc
 801be74:	0801c0f9 	.word	0x0801c0f9

0801be78 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801be78:	b408      	push	{r3}
 801be7a:	b590      	push	{r4, r7, lr}
 801be7c:	b08c      	sub	sp, #48	; 0x30
 801be7e:	af00      	add	r7, sp, #0
 801be80:	60f8      	str	r0, [r7, #12]
 801be82:	60b9      	str	r1, [r7, #8]
 801be84:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801be86:	2316      	movs	r3, #22
 801be88:	18fb      	adds	r3, r7, r3
 801be8a:	2200      	movs	r2, #0
 801be8c:	801a      	strh	r2, [r3, #0]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801be8e:	232c      	movs	r3, #44	; 0x2c
 801be90:	18fb      	adds	r3, r7, r3
 801be92:	2200      	movs	r2, #0
 801be94:	801a      	strh	r2, [r3, #0]

  /* check verbose level */
  if (!( ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801be96:	4b41      	ldr	r3, [pc, #260]	; (801bf9c <UTIL_ADV_TRACE_COND_FSend+0x124>)
 801be98:	7a1b      	ldrb	r3, [r3, #8]
 801be9a:	001a      	movs	r2, r3
 801be9c:	68fb      	ldr	r3, [r7, #12]
 801be9e:	4293      	cmp	r3, r2
 801bea0:	d902      	bls.n	801bea8 <UTIL_ADV_TRACE_COND_FSend+0x30>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801bea2:	2305      	movs	r3, #5
 801bea4:	425b      	negs	r3, r3
 801bea6:	e072      	b.n	801bf8e <UTIL_ADV_TRACE_COND_FSend+0x116>
  }

  if(( Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801bea8:	4b3c      	ldr	r3, [pc, #240]	; (801bf9c <UTIL_ADV_TRACE_COND_FSend+0x124>)
 801beaa:	68db      	ldr	r3, [r3, #12]
 801beac:	68ba      	ldr	r2, [r7, #8]
 801beae:	4013      	ands	r3, r2
 801beb0:	68ba      	ldr	r2, [r7, #8]
 801beb2:	429a      	cmp	r2, r3
 801beb4:	d002      	beq.n	801bebc <UTIL_ADV_TRACE_COND_FSend+0x44>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801beb6:	2306      	movs	r3, #6
 801beb8:	425b      	negs	r3, r3
 801beba:	e068      	b.n	801bf8e <UTIL_ADV_TRACE_COND_FSend+0x116>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801bebc:	4b37      	ldr	r3, [pc, #220]	; (801bf9c <UTIL_ADV_TRACE_COND_FSend+0x124>)
 801bebe:	685b      	ldr	r3, [r3, #4]
 801bec0:	2b00      	cmp	r3, #0
 801bec2:	d00a      	beq.n	801beda <UTIL_ADV_TRACE_COND_FSend+0x62>
 801bec4:	687b      	ldr	r3, [r7, #4]
 801bec6:	2b00      	cmp	r3, #0
 801bec8:	d007      	beq.n	801beda <UTIL_ADV_TRACE_COND_FSend+0x62>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801beca:	4b34      	ldr	r3, [pc, #208]	; (801bf9c <UTIL_ADV_TRACE_COND_FSend+0x124>)
 801becc:	685b      	ldr	r3, [r3, #4]
 801bece:	2216      	movs	r2, #22
 801bed0:	18b9      	adds	r1, r7, r2
 801bed2:	2218      	movs	r2, #24
 801bed4:	18ba      	adds	r2, r7, r2
 801bed6:	0010      	movs	r0, r2
 801bed8:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801beda:	2340      	movs	r3, #64	; 0x40
 801bedc:	18fb      	adds	r3, r7, r3
 801bede:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801bee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bee2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801bee4:	2180      	movs	r1, #128	; 0x80
 801bee6:	0049      	lsls	r1, r1, #1
 801bee8:	482d      	ldr	r0, [pc, #180]	; (801bfa0 <UTIL_ADV_TRACE_COND_FSend+0x128>)
 801beea:	f001 fa13 	bl	801d314 <tiny_vsnprintf_like>
 801beee:	0002      	movs	r2, r0
 801bef0:	242c      	movs	r4, #44	; 0x2c
 801bef2:	193b      	adds	r3, r7, r4
 801bef4:	801a      	strh	r2, [r3, #0]

  TRACE_Lock();
 801bef6:	f000 fa23 	bl	801c340 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801befa:	2316      	movs	r3, #22
 801befc:	18fb      	adds	r3, r7, r3
 801befe:	881a      	ldrh	r2, [r3, #0]
 801bf00:	193b      	adds	r3, r7, r4
 801bf02:	881b      	ldrh	r3, [r3, #0]
 801bf04:	18d3      	adds	r3, r2, r3
 801bf06:	b29b      	uxth	r3, r3
 801bf08:	2214      	movs	r2, #20
 801bf0a:	18ba      	adds	r2, r7, r2
 801bf0c:	0011      	movs	r1, r2
 801bf0e:	0018      	movs	r0, r3
 801bf10:	f000 f97c 	bl	801c20c <TRACE_AllocateBufer>
 801bf14:	0003      	movs	r3, r0
 801bf16:	3301      	adds	r3, #1
 801bf18:	d035      	beq.n	801bf86 <UTIL_ADV_TRACE_COND_FSend+0x10e>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801bf1a:	232e      	movs	r3, #46	; 0x2e
 801bf1c:	18fb      	adds	r3, r7, r3
 801bf1e:	2200      	movs	r2, #0
 801bf20:	801a      	strh	r2, [r3, #0]
 801bf22:	e016      	b.n	801bf52 <UTIL_ADV_TRACE_COND_FSend+0xda>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801bf24:	202e      	movs	r0, #46	; 0x2e
 801bf26:	183b      	adds	r3, r7, r0
 801bf28:	881b      	ldrh	r3, [r3, #0]
 801bf2a:	2414      	movs	r4, #20
 801bf2c:	193a      	adds	r2, r7, r4
 801bf2e:	8812      	ldrh	r2, [r2, #0]
 801bf30:	0011      	movs	r1, r2
 801bf32:	2218      	movs	r2, #24
 801bf34:	18ba      	adds	r2, r7, r2
 801bf36:	5cd2      	ldrb	r2, [r2, r3]
 801bf38:	4b1a      	ldr	r3, [pc, #104]	; (801bfa4 <UTIL_ADV_TRACE_COND_FSend+0x12c>)
 801bf3a:	545a      	strb	r2, [r3, r1]
      writepos = writepos + 1u;
 801bf3c:	193b      	adds	r3, r7, r4
 801bf3e:	881b      	ldrh	r3, [r3, #0]
 801bf40:	3301      	adds	r3, #1
 801bf42:	b29a      	uxth	r2, r3
 801bf44:	193b      	adds	r3, r7, r4
 801bf46:	801a      	strh	r2, [r3, #0]
    for (idx = 0u; idx < timestamp_size; idx++)
 801bf48:	183b      	adds	r3, r7, r0
 801bf4a:	881a      	ldrh	r2, [r3, #0]
 801bf4c:	183b      	adds	r3, r7, r0
 801bf4e:	3201      	adds	r2, #1
 801bf50:	801a      	strh	r2, [r3, #0]
 801bf52:	2316      	movs	r3, #22
 801bf54:	18fb      	adds	r3, r7, r3
 801bf56:	881b      	ldrh	r3, [r3, #0]
 801bf58:	222e      	movs	r2, #46	; 0x2e
 801bf5a:	18ba      	adds	r2, r7, r2
 801bf5c:	8812      	ldrh	r2, [r2, #0]
 801bf5e:	429a      	cmp	r2, r3
 801bf60:	d3e0      	bcc.n	801bf24 <UTIL_ADV_TRACE_COND_FSend+0xac>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801bf62:	2314      	movs	r3, #20
 801bf64:	18fb      	adds	r3, r7, r3
 801bf66:	881b      	ldrh	r3, [r3, #0]
 801bf68:	001a      	movs	r2, r3
 801bf6a:	4b0e      	ldr	r3, [pc, #56]	; (801bfa4 <UTIL_ADV_TRACE_COND_FSend+0x12c>)
 801bf6c:	18d0      	adds	r0, r2, r3
 801bf6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bf70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801bf72:	2180      	movs	r1, #128	; 0x80
 801bf74:	0049      	lsls	r1, r1, #1
 801bf76:	f001 f9cd 	bl	801d314 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801bf7a:	f000 f9fd 	bl	801c378 <TRACE_UnLock>

    return TRACE_Send();
 801bf7e:	f000 f831 	bl	801bfe4 <TRACE_Send>
 801bf82:	0003      	movs	r3, r0
 801bf84:	e003      	b.n	801bf8e <UTIL_ADV_TRACE_COND_FSend+0x116>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801bf86:	f000 f9f7 	bl	801c378 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801bf8a:	2303      	movs	r3, #3
 801bf8c:	425b      	negs	r3, r3
  buff_size+=(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801bf8e:	0018      	movs	r0, r3
 801bf90:	46bd      	mov	sp, r7
 801bf92:	b00c      	add	sp, #48	; 0x30
 801bf94:	bc90      	pop	{r4, r7}
 801bf96:	bc08      	pop	{r3}
 801bf98:	b001      	add	sp, #4
 801bf9a:	4718      	bx	r3
 801bf9c:	20000f84 	.word	0x20000f84
 801bfa0:	2000119c 	.word	0x2000119c
 801bfa4:	20000f9c 	.word	0x20000f9c

0801bfa8 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801bfa8:	b580      	push	{r7, lr}
 801bfaa:	b082      	sub	sp, #8
 801bfac:	af00      	add	r7, sp, #0
 801bfae:	6078      	str	r0, [r7, #4]
	ADV_TRACE_Ctx.timestamp_func = *cb;
 801bfb0:	4b03      	ldr	r3, [pc, #12]	; (801bfc0 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801bfb2:	687a      	ldr	r2, [r7, #4]
 801bfb4:	605a      	str	r2, [r3, #4]
}
 801bfb6:	46c0      	nop			; (mov r8, r8)
 801bfb8:	46bd      	mov	sp, r7
 801bfba:	b002      	add	sp, #8
 801bfbc:	bd80      	pop	{r7, pc}
 801bfbe:	46c0      	nop			; (mov r8, r8)
 801bfc0:	20000f84 	.word	0x20000f84

0801bfc4 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801bfc4:	b580      	push	{r7, lr}
 801bfc6:	b082      	sub	sp, #8
 801bfc8:	af00      	add	r7, sp, #0
 801bfca:	0002      	movs	r2, r0
 801bfcc:	1dfb      	adds	r3, r7, #7
 801bfce:	701a      	strb	r2, [r3, #0]
	ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801bfd0:	4b03      	ldr	r3, [pc, #12]	; (801bfe0 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801bfd2:	1dfa      	adds	r2, r7, #7
 801bfd4:	7812      	ldrb	r2, [r2, #0]
 801bfd6:	721a      	strb	r2, [r3, #8]
}
 801bfd8:	46c0      	nop			; (mov r8, r8)
 801bfda:	46bd      	mov	sp, r7
 801bfdc:	b002      	add	sp, #8
 801bfde:	bd80      	pop	{r7, pc}
 801bfe0:	20000f84 	.word	0x20000f84

0801bfe4 <TRACE_Send>:
/**
  * @brief send the data of the trace to low layer
  * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
  */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801bfe4:	b590      	push	{r4, r7, lr}
 801bfe6:	b089      	sub	sp, #36	; 0x24
 801bfe8:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;  
 801bfea:	231f      	movs	r3, #31
 801bfec:	18fb      	adds	r3, r7, r3
 801bfee:	2200      	movs	r2, #0
 801bff0:	701a      	strb	r2, [r3, #0]
  uint8_t *ptr = NULL;
 801bff2:	2300      	movs	r3, #0
 801bff4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bff6:	f3ef 8310 	mrs	r3, PRIMASK
 801bffa:	613b      	str	r3, [r7, #16]
  return(result);
 801bffc:	693b      	ldr	r3, [r7, #16]
  
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();  
 801bffe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c000:	b672      	cpsid	i
}
 801c002:	46c0      	nop			; (mov r8, r8)
  
  if(TRACE_IsLocked() == 0u)
 801c004:	f000 f9d4 	bl	801c3b0 <TRACE_IsLocked>
 801c008:	1e03      	subs	r3, r0, #0
 801c00a:	d160      	bne.n	801c0ce <TRACE_Send+0xea>
  {
    TRACE_Lock();
 801c00c:	f000 f998 	bl	801c340 <TRACE_Lock>
	    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send overrun(%d)--\n", ADV_TRACE_Ctx.TraceSentSize);
	    return UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
	}
#endif

    if (ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801c010:	4b36      	ldr	r3, [pc, #216]	; (801c0ec <TRACE_Send+0x108>)
 801c012:	8a1a      	ldrh	r2, [r3, #16]
 801c014:	4b35      	ldr	r3, [pc, #212]	; (801c0ec <TRACE_Send+0x108>)
 801c016:	8a5b      	ldrh	r3, [r3, #18]
 801c018:	429a      	cmp	r2, r3
 801c01a:	d050      	beq.n	801c0be <TRACE_Send+0xda>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
   	  if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801c01c:	4b33      	ldr	r3, [pc, #204]	; (801c0ec <TRACE_Send+0x108>)
 801c01e:	789b      	ldrb	r3, [r3, #2]
 801c020:	2b01      	cmp	r3, #1
 801c022:	d117      	bne.n	801c054 <TRACE_Send+0x70>
   	  {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t)(ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801c024:	4b31      	ldr	r3, [pc, #196]	; (801c0ec <TRACE_Send+0x108>)
 801c026:	881a      	ldrh	r2, [r3, #0]
 801c028:	4b30      	ldr	r3, [pc, #192]	; (801c0ec <TRACE_Send+0x108>)
 801c02a:	8a1b      	ldrh	r3, [r3, #16]
 801c02c:	1ad3      	subs	r3, r2, r3
 801c02e:	b29a      	uxth	r2, r3
 801c030:	4b2e      	ldr	r3, [pc, #184]	; (801c0ec <TRACE_Send+0x108>)
 801c032:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801c034:	4b2d      	ldr	r3, [pc, #180]	; (801c0ec <TRACE_Send+0x108>)
 801c036:	2202      	movs	r2, #2
 801c038:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801c03a:	4b2c      	ldr	r3, [pc, #176]	; (801c0ec <TRACE_Send+0x108>)
 801c03c:	2200      	movs	r2, #0
 801c03e:	801a      	strh	r2, [r3, #0]
        
        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n",ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);
        
        if (0u == ADV_TRACE_Ctx.TraceSentSize)
 801c040:	4b2a      	ldr	r3, [pc, #168]	; (801c0ec <TRACE_Send+0x108>)
 801c042:	8a9b      	ldrh	r3, [r3, #20]
 801c044:	2b00      	cmp	r3, #0
 801c046:	d105      	bne.n	801c054 <TRACE_Send+0x70>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801c048:	4b28      	ldr	r3, [pc, #160]	; (801c0ec <TRACE_Send+0x108>)
 801c04a:	2200      	movs	r2, #0
 801c04c:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801c04e:	4b27      	ldr	r3, [pc, #156]	; (801c0ec <TRACE_Send+0x108>)
 801c050:	2200      	movs	r2, #0
 801c052:	821a      	strh	r2, [r3, #16]
        }
   	  }
      
   	  if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801c054:	4b25      	ldr	r3, [pc, #148]	; (801c0ec <TRACE_Send+0x108>)
 801c056:	789b      	ldrb	r3, [r3, #2]
 801c058:	2b00      	cmp	r3, #0
 801c05a:	d116      	bne.n	801c08a <TRACE_Send+0xa6>
   	  {
#endif
   	    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801c05c:	4b23      	ldr	r3, [pc, #140]	; (801c0ec <TRACE_Send+0x108>)
 801c05e:	8a5a      	ldrh	r2, [r3, #18]
 801c060:	4b22      	ldr	r3, [pc, #136]	; (801c0ec <TRACE_Send+0x108>)
 801c062:	8a1b      	ldrh	r3, [r3, #16]
 801c064:	429a      	cmp	r2, r3
 801c066:	d908      	bls.n	801c07a <TRACE_Send+0x96>
        {
   	    	ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801c068:	4b20      	ldr	r3, [pc, #128]	; (801c0ec <TRACE_Send+0x108>)
 801c06a:	8a5a      	ldrh	r2, [r3, #18]
 801c06c:	4b1f      	ldr	r3, [pc, #124]	; (801c0ec <TRACE_Send+0x108>)
 801c06e:	8a1b      	ldrh	r3, [r3, #16]
 801c070:	1ad3      	subs	r3, r2, r3
 801c072:	b29a      	uxth	r2, r3
 801c074:	4b1d      	ldr	r3, [pc, #116]	; (801c0ec <TRACE_Send+0x108>)
 801c076:	829a      	strh	r2, [r3, #20]
 801c078:	e007      	b.n	801c08a <TRACE_Send+0xa6>
        }
        else  /* TraceRdPtr > TraceWrPtr */
        {
        	ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801c07a:	4b1c      	ldr	r3, [pc, #112]	; (801c0ec <TRACE_Send+0x108>)
 801c07c:	8a1b      	ldrh	r3, [r3, #16]
 801c07e:	2280      	movs	r2, #128	; 0x80
 801c080:	0092      	lsls	r2, r2, #2
 801c082:	1ad3      	subs	r3, r2, r3
 801c084:	b29a      	uxth	r2, r3
 801c086:	4b19      	ldr	r3, [pc, #100]	; (801c0ec <TRACE_Send+0x108>)
 801c088:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801c08a:	4b18      	ldr	r3, [pc, #96]	; (801c0ec <TRACE_Send+0x108>)
 801c08c:	8a1b      	ldrh	r3, [r3, #16]
 801c08e:	001a      	movs	r2, r3
 801c090:	4b17      	ldr	r3, [pc, #92]	; (801c0f0 <TRACE_Send+0x10c>)
 801c092:	18d3      	adds	r3, r2, r3
 801c094:	61bb      	str	r3, [r7, #24]
 801c096:	697b      	ldr	r3, [r7, #20]
 801c098:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c09a:	68fb      	ldr	r3, [r7, #12]
 801c09c:	f383 8810 	msr	PRIMASK, r3
}
 801c0a0:	46c0      	nop			; (mov r8, r8)

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook(); 
 801c0a2:	f7e8 fe69 	bl	8004d78 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n",ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801c0a6:	4b13      	ldr	r3, [pc, #76]	; (801c0f4 <TRACE_Send+0x110>)
 801c0a8:	68db      	ldr	r3, [r3, #12]
 801c0aa:	4a10      	ldr	r2, [pc, #64]	; (801c0ec <TRACE_Send+0x108>)
 801c0ac:	8a91      	ldrh	r1, [r2, #20]
 801c0ae:	221f      	movs	r2, #31
 801c0b0:	18bc      	adds	r4, r7, r2
 801c0b2:	69ba      	ldr	r2, [r7, #24]
 801c0b4:	0010      	movs	r0, r2
 801c0b6:	4798      	blx	r3
 801c0b8:	0003      	movs	r3, r0
 801c0ba:	7023      	strb	r3, [r4, #0]
 801c0bc:	e00d      	b.n	801c0da <TRACE_Send+0xf6>
    }
    else
    {
      TRACE_UnLock();
 801c0be:	f000 f95b 	bl	801c378 <TRACE_UnLock>
 801c0c2:	697b      	ldr	r3, [r7, #20]
 801c0c4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c0c6:	68bb      	ldr	r3, [r7, #8]
 801c0c8:	f383 8810 	msr	PRIMASK, r3
}
 801c0cc:	e005      	b.n	801c0da <TRACE_Send+0xf6>
 801c0ce:	697b      	ldr	r3, [r7, #20]
 801c0d0:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c0d2:	687b      	ldr	r3, [r7, #4]
 801c0d4:	f383 8810 	msr	PRIMASK, r3
}
 801c0d8:	46c0      	nop			; (mov r8, r8)
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();  
  }
  
  return ret;
 801c0da:	231f      	movs	r3, #31
 801c0dc:	18fb      	adds	r3, r7, r3
 801c0de:	781b      	ldrb	r3, [r3, #0]
 801c0e0:	b25b      	sxtb	r3, r3
}
 801c0e2:	0018      	movs	r0, r3
 801c0e4:	46bd      	mov	sp, r7
 801c0e6:	b009      	add	sp, #36	; 0x24
 801c0e8:	bd90      	pop	{r4, r7, pc}
 801c0ea:	46c0      	nop			; (mov r8, r8)
 801c0ec:	20000f84 	.word	0x20000f84
 801c0f0:	20000f9c 	.word	0x20000f9c
 801c0f4:	0801f1bc 	.word	0x0801f1bc

0801c0f8 <TRACE_TxCpltCallback>:
  * @brief Tx callback called by the low layer level to inform a transfer complete
  * @param Ptr pointer not used only for HAL compatibility
  * @retval none
  */
static void TRACE_TxCpltCallback(void *Ptr)
{ 
 801c0f8:	b580      	push	{r7, lr}
 801c0fa:	b086      	sub	sp, #24
 801c0fc:	af00      	add	r7, sp, #0
 801c0fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c100:	f3ef 8310 	mrs	r3, PRIMASK
 801c104:	613b      	str	r3, [r7, #16]
  return(result);
 801c106:	693b      	ldr	r3, [r7, #16]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c108:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c10a:	b672      	cpsid	i
}
 801c10c:	46c0      	nop			; (mov r8, r8)
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif
  
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801c10e:	4b3c      	ldr	r3, [pc, #240]	; (801c200 <TRACE_TxCpltCallback+0x108>)
 801c110:	789b      	ldrb	r3, [r3, #2]
 801c112:	2b02      	cmp	r3, #2
 801c114:	d106      	bne.n	801c124 <TRACE_TxCpltCallback+0x2c>
  {
	  ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801c116:	4b3a      	ldr	r3, [pc, #232]	; (801c200 <TRACE_TxCpltCallback+0x108>)
 801c118:	2200      	movs	r2, #0
 801c11a:	709a      	strb	r2, [r3, #2]
	  ADV_TRACE_Ctx.TraceRdPtr = 0;
 801c11c:	4b38      	ldr	r3, [pc, #224]	; (801c200 <TRACE_TxCpltCallback+0x108>)
 801c11e:	2200      	movs	r2, #0
 801c120:	821a      	strh	r2, [r3, #16]
 801c122:	e00a      	b.n	801c13a <TRACE_TxCpltCallback+0x42>
	  UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
	  ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801c124:	4b36      	ldr	r3, [pc, #216]	; (801c200 <TRACE_TxCpltCallback+0x108>)
 801c126:	8a1a      	ldrh	r2, [r3, #16]
 801c128:	4b35      	ldr	r3, [pc, #212]	; (801c200 <TRACE_TxCpltCallback+0x108>)
 801c12a:	8a9b      	ldrh	r3, [r3, #20]
 801c12c:	18d3      	adds	r3, r2, r3
 801c12e:	b29b      	uxth	r3, r3
 801c130:	05db      	lsls	r3, r3, #23
 801c132:	0ddb      	lsrs	r3, r3, #23
 801c134:	b29a      	uxth	r2, r3
 801c136:	4b32      	ldr	r3, [pc, #200]	; (801c200 <TRACE_TxCpltCallback+0x108>)
 801c138:	821a      	strh	r2, [r3, #16]
		UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
	}
#endif
  
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801c13a:	4b31      	ldr	r3, [pc, #196]	; (801c200 <TRACE_TxCpltCallback+0x108>)
 801c13c:	8a1a      	ldrh	r2, [r3, #16]
 801c13e:	4b30      	ldr	r3, [pc, #192]	; (801c200 <TRACE_TxCpltCallback+0x108>)
 801c140:	8a5b      	ldrh	r3, [r3, #18]
 801c142:	429a      	cmp	r2, r3
 801c144:	d04c      	beq.n	801c1e0 <TRACE_TxCpltCallback+0xe8>
 801c146:	4b2e      	ldr	r3, [pc, #184]	; (801c200 <TRACE_TxCpltCallback+0x108>)
 801c148:	8adb      	ldrh	r3, [r3, #22]
 801c14a:	2b01      	cmp	r3, #1
 801c14c:	d148      	bne.n	801c1e0 <TRACE_TxCpltCallback+0xe8>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801c14e:	4b2c      	ldr	r3, [pc, #176]	; (801c200 <TRACE_TxCpltCallback+0x108>)
 801c150:	789b      	ldrb	r3, [r3, #2]
 801c152:	2b01      	cmp	r3, #1
 801c154:	d117      	bne.n	801c186 <TRACE_TxCpltCallback+0x8e>
    {
   		ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801c156:	4b2a      	ldr	r3, [pc, #168]	; (801c200 <TRACE_TxCpltCallback+0x108>)
 801c158:	881a      	ldrh	r2, [r3, #0]
 801c15a:	4b29      	ldr	r3, [pc, #164]	; (801c200 <TRACE_TxCpltCallback+0x108>)
 801c15c:	8a1b      	ldrh	r3, [r3, #16]
 801c15e:	1ad3      	subs	r3, r2, r3
 801c160:	b29a      	uxth	r2, r3
 801c162:	4b27      	ldr	r3, [pc, #156]	; (801c200 <TRACE_TxCpltCallback+0x108>)
 801c164:	829a      	strh	r2, [r3, #20]
   		ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801c166:	4b26      	ldr	r3, [pc, #152]	; (801c200 <TRACE_TxCpltCallback+0x108>)
 801c168:	2202      	movs	r2, #2
 801c16a:	709a      	strb	r2, [r3, #2]
   		ADV_TRACE_Ctx.unchunk_enabled = 0;
 801c16c:	4b24      	ldr	r3, [pc, #144]	; (801c200 <TRACE_TxCpltCallback+0x108>)
 801c16e:	2200      	movs	r2, #0
 801c170:	801a      	strh	r2, [r3, #0]
      
    	UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n",ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);
      
    	if (0u == ADV_TRACE_Ctx.TraceSentSize)
 801c172:	4b23      	ldr	r3, [pc, #140]	; (801c200 <TRACE_TxCpltCallback+0x108>)
 801c174:	8a9b      	ldrh	r3, [r3, #20]
 801c176:	2b00      	cmp	r3, #0
 801c178:	d105      	bne.n	801c186 <TRACE_TxCpltCallback+0x8e>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801c17a:	4b21      	ldr	r3, [pc, #132]	; (801c200 <TRACE_TxCpltCallback+0x108>)
 801c17c:	2200      	movs	r2, #0
 801c17e:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801c180:	4b1f      	ldr	r3, [pc, #124]	; (801c200 <TRACE_TxCpltCallback+0x108>)
 801c182:	2200      	movs	r2, #0
 801c184:	821a      	strh	r2, [r3, #16]
      }
    }
    
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801c186:	4b1e      	ldr	r3, [pc, #120]	; (801c200 <TRACE_TxCpltCallback+0x108>)
 801c188:	789b      	ldrb	r3, [r3, #2]
 801c18a:	2b00      	cmp	r3, #0
 801c18c:	d116      	bne.n	801c1bc <TRACE_TxCpltCallback+0xc4>
    {
#endif
      if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801c18e:	4b1c      	ldr	r3, [pc, #112]	; (801c200 <TRACE_TxCpltCallback+0x108>)
 801c190:	8a5a      	ldrh	r2, [r3, #18]
 801c192:	4b1b      	ldr	r3, [pc, #108]	; (801c200 <TRACE_TxCpltCallback+0x108>)
 801c194:	8a1b      	ldrh	r3, [r3, #16]
 801c196:	429a      	cmp	r2, r3
 801c198:	d908      	bls.n	801c1ac <TRACE_TxCpltCallback+0xb4>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801c19a:	4b19      	ldr	r3, [pc, #100]	; (801c200 <TRACE_TxCpltCallback+0x108>)
 801c19c:	8a5a      	ldrh	r2, [r3, #18]
 801c19e:	4b18      	ldr	r3, [pc, #96]	; (801c200 <TRACE_TxCpltCallback+0x108>)
 801c1a0:	8a1b      	ldrh	r3, [r3, #16]
 801c1a2:	1ad3      	subs	r3, r2, r3
 801c1a4:	b29a      	uxth	r2, r3
 801c1a6:	4b16      	ldr	r3, [pc, #88]	; (801c200 <TRACE_TxCpltCallback+0x108>)
 801c1a8:	829a      	strh	r2, [r3, #20]
 801c1aa:	e007      	b.n	801c1bc <TRACE_TxCpltCallback+0xc4>
      }
      else  /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801c1ac:	4b14      	ldr	r3, [pc, #80]	; (801c200 <TRACE_TxCpltCallback+0x108>)
 801c1ae:	8a1b      	ldrh	r3, [r3, #16]
 801c1b0:	2280      	movs	r2, #128	; 0x80
 801c1b2:	0092      	lsls	r2, r2, #2
 801c1b4:	1ad3      	subs	r3, r2, r3
 801c1b6:	b29a      	uxth	r2, r3
 801c1b8:	4b11      	ldr	r3, [pc, #68]	; (801c200 <TRACE_TxCpltCallback+0x108>)
 801c1ba:	829a      	strh	r2, [r3, #20]
 801c1bc:	697b      	ldr	r3, [r7, #20]
 801c1be:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c1c0:	68fb      	ldr	r3, [r7, #12]
 801c1c2:	f383 8810 	msr	PRIMASK, r3
}
 801c1c6:	46c0      	nop			; (mov r8, r8)
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION(); 
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(&ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr], ADV_TRACE_Ctx.TraceSentSize);
 801c1c8:	4b0e      	ldr	r3, [pc, #56]	; (801c204 <TRACE_TxCpltCallback+0x10c>)
 801c1ca:	68db      	ldr	r3, [r3, #12]
 801c1cc:	4a0c      	ldr	r2, [pc, #48]	; (801c200 <TRACE_TxCpltCallback+0x108>)
 801c1ce:	8a12      	ldrh	r2, [r2, #16]
 801c1d0:	0011      	movs	r1, r2
 801c1d2:	4a0d      	ldr	r2, [pc, #52]	; (801c208 <TRACE_TxCpltCallback+0x110>)
 801c1d4:	1888      	adds	r0, r1, r2
 801c1d6:	4a0a      	ldr	r2, [pc, #40]	; (801c200 <TRACE_TxCpltCallback+0x108>)
 801c1d8:	8a92      	ldrh	r2, [r2, #20]
 801c1da:	0011      	movs	r1, r2
 801c1dc:	4798      	blx	r3
 801c1de:	e00a      	b.n	801c1f6 <TRACE_TxCpltCallback+0xfe>
  }
  else
  {
    UTIL_ADV_TRACE_PostSendHook();      
 801c1e0:	f7e8 fdd3 	bl	8004d8a <UTIL_ADV_TRACE_PostSendHook>
 801c1e4:	697b      	ldr	r3, [r7, #20]
 801c1e6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c1e8:	68bb      	ldr	r3, [r7, #8]
 801c1ea:	f383 8810 	msr	PRIMASK, r3
}
 801c1ee:	46c0      	nop			; (mov r8, r8)
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION(); 
    TRACE_UnLock();
 801c1f0:	f000 f8c2 	bl	801c378 <TRACE_UnLock>
  }
}
 801c1f4:	46c0      	nop			; (mov r8, r8)
 801c1f6:	46c0      	nop			; (mov r8, r8)
 801c1f8:	46bd      	mov	sp, r7
 801c1fa:	b006      	add	sp, #24
 801c1fc:	bd80      	pop	{r7, pc}
 801c1fe:	46c0      	nop			; (mov r8, r8)
 801c200:	20000f84 	.word	0x20000f84
 801c204:	0801f1bc 	.word	0x0801f1bc
 801c208:	20000f9c 	.word	0x20000f9c

0801c20c <TRACE_AllocateBufer>:
  * @param  Size to allocate within fifo
  * @param  Pos position within the fifo
  * @retval write position inside the buffer is -1 no space available.
  */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801c20c:	b580      	push	{r7, lr}
 801c20e:	b086      	sub	sp, #24
 801c210:	af00      	add	r7, sp, #0
 801c212:	0002      	movs	r2, r0
 801c214:	6039      	str	r1, [r7, #0]
 801c216:	1dbb      	adds	r3, r7, #6
 801c218:	801a      	strh	r2, [r3, #0]
  uint16_t freesize;
  int16_t ret = -1;
 801c21a:	2314      	movs	r3, #20
 801c21c:	18fb      	adds	r3, r7, r3
 801c21e:	2201      	movs	r2, #1
 801c220:	4252      	negs	r2, r2
 801c222:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c224:	f3ef 8310 	mrs	r3, PRIMASK
 801c228:	60fb      	str	r3, [r7, #12]
  return(result);
 801c22a:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c22c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801c22e:	b672      	cpsid	i
}
 801c230:	46c0      	nop			; (mov r8, r8)

  if (ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801c232:	4b42      	ldr	r3, [pc, #264]	; (801c33c <TRACE_AllocateBufer+0x130>)
 801c234:	8a5a      	ldrh	r2, [r3, #18]
 801c236:	4b41      	ldr	r3, [pc, #260]	; (801c33c <TRACE_AllocateBufer+0x130>)
 801c238:	8a1b      	ldrh	r3, [r3, #16]
 801c23a:	429a      	cmp	r2, r3
 801c23c:	d123      	bne.n	801c286 <TRACE_AllocateBufer+0x7a>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801c23e:	4b3f      	ldr	r3, [pc, #252]	; (801c33c <TRACE_AllocateBufer+0x130>)
 801c240:	8a5a      	ldrh	r2, [r3, #18]
 801c242:	2016      	movs	r0, #22
 801c244:	183b      	adds	r3, r7, r0
 801c246:	2180      	movs	r1, #128	; 0x80
 801c248:	0089      	lsls	r1, r1, #2
 801c24a:	1a8a      	subs	r2, r1, r2
 801c24c:	801a      	strh	r2, [r3, #0]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801c24e:	1dba      	adds	r2, r7, #6
 801c250:	0001      	movs	r1, r0
 801c252:	187b      	adds	r3, r7, r1
 801c254:	8812      	ldrh	r2, [r2, #0]
 801c256:	881b      	ldrh	r3, [r3, #0]
 801c258:	429a      	cmp	r2, r3
 801c25a:	d346      	bcc.n	801c2ea <TRACE_AllocateBufer+0xde>
 801c25c:	4b37      	ldr	r3, [pc, #220]	; (801c33c <TRACE_AllocateBufer+0x130>)
 801c25e:	8a1b      	ldrh	r3, [r3, #16]
 801c260:	1dba      	adds	r2, r7, #6
 801c262:	8812      	ldrh	r2, [r2, #0]
 801c264:	429a      	cmp	r2, r3
 801c266:	d240      	bcs.n	801c2ea <TRACE_AllocateBufer+0xde>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801c268:	4b34      	ldr	r3, [pc, #208]	; (801c33c <TRACE_AllocateBufer+0x130>)
 801c26a:	2201      	movs	r2, #1
 801c26c:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801c26e:	4b33      	ldr	r3, [pc, #204]	; (801c33c <TRACE_AllocateBufer+0x130>)
 801c270:	8a5a      	ldrh	r2, [r3, #18]
 801c272:	4b32      	ldr	r3, [pc, #200]	; (801c33c <TRACE_AllocateBufer+0x130>)
 801c274:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801c276:	187b      	adds	r3, r7, r1
 801c278:	4a30      	ldr	r2, [pc, #192]	; (801c33c <TRACE_AllocateBufer+0x130>)
 801c27a:	8a12      	ldrh	r2, [r2, #16]
 801c27c:	801a      	strh	r2, [r3, #0]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801c27e:	4b2f      	ldr	r3, [pc, #188]	; (801c33c <TRACE_AllocateBufer+0x130>)
 801c280:	2200      	movs	r2, #0
 801c282:	825a      	strh	r2, [r3, #18]
 801c284:	e031      	b.n	801c2ea <TRACE_AllocateBufer+0xde>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801c286:	4b2d      	ldr	r3, [pc, #180]	; (801c33c <TRACE_AllocateBufer+0x130>)
 801c288:	8a5a      	ldrh	r2, [r3, #18]
 801c28a:	4b2c      	ldr	r3, [pc, #176]	; (801c33c <TRACE_AllocateBufer+0x130>)
 801c28c:	8a1b      	ldrh	r3, [r3, #16]
 801c28e:	429a      	cmp	r2, r3
 801c290:	d923      	bls.n	801c2da <TRACE_AllocateBufer+0xce>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801c292:	4b2a      	ldr	r3, [pc, #168]	; (801c33c <TRACE_AllocateBufer+0x130>)
 801c294:	8a5a      	ldrh	r2, [r3, #18]
 801c296:	2016      	movs	r0, #22
 801c298:	183b      	adds	r3, r7, r0
 801c29a:	2180      	movs	r1, #128	; 0x80
 801c29c:	0089      	lsls	r1, r1, #2
 801c29e:	1a8a      	subs	r2, r1, r2
 801c2a0:	801a      	strh	r2, [r3, #0]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801c2a2:	1dba      	adds	r2, r7, #6
 801c2a4:	0001      	movs	r1, r0
 801c2a6:	187b      	adds	r3, r7, r1
 801c2a8:	8812      	ldrh	r2, [r2, #0]
 801c2aa:	881b      	ldrh	r3, [r3, #0]
 801c2ac:	429a      	cmp	r2, r3
 801c2ae:	d31c      	bcc.n	801c2ea <TRACE_AllocateBufer+0xde>
 801c2b0:	4b22      	ldr	r3, [pc, #136]	; (801c33c <TRACE_AllocateBufer+0x130>)
 801c2b2:	8a1b      	ldrh	r3, [r3, #16]
 801c2b4:	1dba      	adds	r2, r7, #6
 801c2b6:	8812      	ldrh	r2, [r2, #0]
 801c2b8:	429a      	cmp	r2, r3
 801c2ba:	d216      	bcs.n	801c2ea <TRACE_AllocateBufer+0xde>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801c2bc:	4b1f      	ldr	r3, [pc, #124]	; (801c33c <TRACE_AllocateBufer+0x130>)
 801c2be:	2201      	movs	r2, #1
 801c2c0:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801c2c2:	4b1e      	ldr	r3, [pc, #120]	; (801c33c <TRACE_AllocateBufer+0x130>)
 801c2c4:	8a5a      	ldrh	r2, [r3, #18]
 801c2c6:	4b1d      	ldr	r3, [pc, #116]	; (801c33c <TRACE_AllocateBufer+0x130>)
 801c2c8:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801c2ca:	187b      	adds	r3, r7, r1
 801c2cc:	4a1b      	ldr	r2, [pc, #108]	; (801c33c <TRACE_AllocateBufer+0x130>)
 801c2ce:	8a12      	ldrh	r2, [r2, #16]
 801c2d0:	801a      	strh	r2, [r3, #0]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801c2d2:	4b1a      	ldr	r3, [pc, #104]	; (801c33c <TRACE_AllocateBufer+0x130>)
 801c2d4:	2200      	movs	r2, #0
 801c2d6:	825a      	strh	r2, [r3, #18]
 801c2d8:	e007      	b.n	801c2ea <TRACE_AllocateBufer+0xde>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801c2da:	4b18      	ldr	r3, [pc, #96]	; (801c33c <TRACE_AllocateBufer+0x130>)
 801c2dc:	8a19      	ldrh	r1, [r3, #16]
 801c2de:	4b17      	ldr	r3, [pc, #92]	; (801c33c <TRACE_AllocateBufer+0x130>)
 801c2e0:	8a5a      	ldrh	r2, [r3, #18]
 801c2e2:	2316      	movs	r3, #22
 801c2e4:	18fb      	adds	r3, r7, r3
 801c2e6:	1a8a      	subs	r2, r1, r2
 801c2e8:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }
  
  if (freesize > Size)
 801c2ea:	2316      	movs	r3, #22
 801c2ec:	18fa      	adds	r2, r7, r3
 801c2ee:	1dbb      	adds	r3, r7, #6
 801c2f0:	8812      	ldrh	r2, [r2, #0]
 801c2f2:	881b      	ldrh	r3, [r3, #0]
 801c2f4:	429a      	cmp	r2, r3
 801c2f6:	d912      	bls.n	801c31e <TRACE_AllocateBufer+0x112>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801c2f8:	4b10      	ldr	r3, [pc, #64]	; (801c33c <TRACE_AllocateBufer+0x130>)
 801c2fa:	8a5a      	ldrh	r2, [r3, #18]
 801c2fc:	683b      	ldr	r3, [r7, #0]
 801c2fe:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801c300:	4b0e      	ldr	r3, [pc, #56]	; (801c33c <TRACE_AllocateBufer+0x130>)
 801c302:	8a5a      	ldrh	r2, [r3, #18]
 801c304:	1dbb      	adds	r3, r7, #6
 801c306:	881b      	ldrh	r3, [r3, #0]
 801c308:	18d3      	adds	r3, r2, r3
 801c30a:	b29b      	uxth	r3, r3
 801c30c:	05db      	lsls	r3, r3, #23
 801c30e:	0ddb      	lsrs	r3, r3, #23
 801c310:	b29a      	uxth	r2, r3
 801c312:	4b0a      	ldr	r3, [pc, #40]	; (801c33c <TRACE_AllocateBufer+0x130>)
 801c314:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801c316:	2314      	movs	r3, #20
 801c318:	18fb      	adds	r3, r7, r3
 801c31a:	2200      	movs	r2, #0
 801c31c:	801a      	strh	r2, [r3, #0]
 801c31e:	693b      	ldr	r3, [r7, #16]
 801c320:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c322:	68bb      	ldr	r3, [r7, #8]
 801c324:	f383 8810 	msr	PRIMASK, r3
}
 801c328:	46c0      	nop			; (mov r8, r8)
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_AllocateBufer(%d-%d::%d-%d)--\n",freesize - Size, Size, ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceWrPtr);
#endif
  }

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();  
  return ret;
 801c32a:	2314      	movs	r3, #20
 801c32c:	18fb      	adds	r3, r7, r3
 801c32e:	2200      	movs	r2, #0
 801c330:	5e9b      	ldrsh	r3, [r3, r2]
}
 801c332:	0018      	movs	r0, r3
 801c334:	46bd      	mov	sp, r7
 801c336:	b006      	add	sp, #24
 801c338:	bd80      	pop	{r7, pc}
 801c33a:	46c0      	nop			; (mov r8, r8)
 801c33c:	20000f84 	.word	0x20000f84

0801c340 <TRACE_Lock>:
/**
  * @brief  Lock the trace buffer.
  * @retval None.
  */
static void TRACE_Lock(void)
{
 801c340:	b580      	push	{r7, lr}
 801c342:	b084      	sub	sp, #16
 801c344:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c346:	f3ef 8310 	mrs	r3, PRIMASK
 801c34a:	607b      	str	r3, [r7, #4]
  return(result);
 801c34c:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c34e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801c350:	b672      	cpsid	i
}
 801c352:	46c0      	nop			; (mov r8, r8)
  ADV_TRACE_Ctx.TraceLock++;
 801c354:	4b07      	ldr	r3, [pc, #28]	; (801c374 <TRACE_Lock+0x34>)
 801c356:	8adb      	ldrh	r3, [r3, #22]
 801c358:	3301      	adds	r3, #1
 801c35a:	b29a      	uxth	r2, r3
 801c35c:	4b05      	ldr	r3, [pc, #20]	; (801c374 <TRACE_Lock+0x34>)
 801c35e:	82da      	strh	r2, [r3, #22]
 801c360:	68fb      	ldr	r3, [r7, #12]
 801c362:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c364:	68bb      	ldr	r3, [r7, #8]
 801c366:	f383 8810 	msr	PRIMASK, r3
}
 801c36a:	46c0      	nop			; (mov r8, r8)
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801c36c:	46c0      	nop			; (mov r8, r8)
 801c36e:	46bd      	mov	sp, r7
 801c370:	b004      	add	sp, #16
 801c372:	bd80      	pop	{r7, pc}
 801c374:	20000f84 	.word	0x20000f84

0801c378 <TRACE_UnLock>:
/**
  * @brief  UnLock the trace buffer.
  * @retval None.
  */
static void TRACE_UnLock(void)
{
 801c378:	b580      	push	{r7, lr}
 801c37a:	b084      	sub	sp, #16
 801c37c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c37e:	f3ef 8310 	mrs	r3, PRIMASK
 801c382:	607b      	str	r3, [r7, #4]
  return(result);
 801c384:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c386:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801c388:	b672      	cpsid	i
}
 801c38a:	46c0      	nop			; (mov r8, r8)
  ADV_TRACE_Ctx.TraceLock--;
 801c38c:	4b07      	ldr	r3, [pc, #28]	; (801c3ac <TRACE_UnLock+0x34>)
 801c38e:	8adb      	ldrh	r3, [r3, #22]
 801c390:	3b01      	subs	r3, #1
 801c392:	b29a      	uxth	r2, r3
 801c394:	4b05      	ldr	r3, [pc, #20]	; (801c3ac <TRACE_UnLock+0x34>)
 801c396:	82da      	strh	r2, [r3, #22]
 801c398:	68fb      	ldr	r3, [r7, #12]
 801c39a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c39c:	68bb      	ldr	r3, [r7, #8]
 801c39e:	f383 8810 	msr	PRIMASK, r3
}
 801c3a2:	46c0      	nop			; (mov r8, r8)
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801c3a4:	46c0      	nop			; (mov r8, r8)
 801c3a6:	46bd      	mov	sp, r7
 801c3a8:	b004      	add	sp, #16
 801c3aa:	bd80      	pop	{r7, pc}
 801c3ac:	20000f84 	.word	0x20000f84

0801c3b0 <TRACE_IsLocked>:
/**
  * @brief  UnLock the trace buffer.
  * @retval None.
  */
static uint32_t TRACE_IsLocked(void)
{
 801c3b0:	b580      	push	{r7, lr}
 801c3b2:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801c3b4:	4b03      	ldr	r3, [pc, #12]	; (801c3c4 <TRACE_IsLocked+0x14>)
 801c3b6:	8adb      	ldrh	r3, [r3, #22]
 801c3b8:	1e5a      	subs	r2, r3, #1
 801c3ba:	4193      	sbcs	r3, r2
 801c3bc:	b2db      	uxtb	r3, r3
}
 801c3be:	0018      	movs	r0, r3
 801c3c0:	46bd      	mov	sp, r7
 801c3c2:	bd80      	pop	{r7, pc}
 801c3c4:	20000f84 	.word	0x20000f84

0801c3c8 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801c3c8:	b580      	push	{r7, lr}
 801c3ca:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801c3cc:	4b04      	ldr	r3, [pc, #16]	; (801c3e0 <UTIL_LPM_Init+0x18>)
 801c3ce:	2200      	movs	r2, #0
 801c3d0:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801c3d2:	4b04      	ldr	r3, [pc, #16]	; (801c3e4 <UTIL_LPM_Init+0x1c>)
 801c3d4:	2200      	movs	r2, #0
 801c3d6:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801c3d8:	46c0      	nop			; (mov r8, r8)
 801c3da:	46bd      	mov	sp, r7
 801c3dc:	bd80      	pop	{r7, pc}
 801c3de:	46c0      	nop			; (mov r8, r8)
 801c3e0:	2000129c 	.word	0x2000129c
 801c3e4:	200012a0 	.word	0x200012a0

0801c3e8 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801c3e8:	b580      	push	{r7, lr}
 801c3ea:	b086      	sub	sp, #24
 801c3ec:	af00      	add	r7, sp, #0
 801c3ee:	6078      	str	r0, [r7, #4]
 801c3f0:	000a      	movs	r2, r1
 801c3f2:	1cfb      	adds	r3, r7, #3
 801c3f4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c3f6:	f3ef 8310 	mrs	r3, PRIMASK
 801c3fa:	613b      	str	r3, [r7, #16]
  return(result);
 801c3fc:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801c3fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c400:	b672      	cpsid	i
}
 801c402:	46c0      	nop			; (mov r8, r8)
  
  switch( state )
 801c404:	1cfb      	adds	r3, r7, #3
 801c406:	781b      	ldrb	r3, [r3, #0]
 801c408:	2b00      	cmp	r3, #0
 801c40a:	d008      	beq.n	801c41e <UTIL_LPM_SetStopMode+0x36>
 801c40c:	2b01      	cmp	r3, #1
 801c40e:	d10e      	bne.n	801c42e <UTIL_LPM_SetStopMode+0x46>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801c410:	4b0c      	ldr	r3, [pc, #48]	; (801c444 <UTIL_LPM_SetStopMode+0x5c>)
 801c412:	681a      	ldr	r2, [r3, #0]
 801c414:	687b      	ldr	r3, [r7, #4]
 801c416:	431a      	orrs	r2, r3
 801c418:	4b0a      	ldr	r3, [pc, #40]	; (801c444 <UTIL_LPM_SetStopMode+0x5c>)
 801c41a:	601a      	str	r2, [r3, #0]
      break;
 801c41c:	e008      	b.n	801c430 <UTIL_LPM_SetStopMode+0x48>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801c41e:	687b      	ldr	r3, [r7, #4]
 801c420:	43da      	mvns	r2, r3
 801c422:	4b08      	ldr	r3, [pc, #32]	; (801c444 <UTIL_LPM_SetStopMode+0x5c>)
 801c424:	681b      	ldr	r3, [r3, #0]
 801c426:	401a      	ands	r2, r3
 801c428:	4b06      	ldr	r3, [pc, #24]	; (801c444 <UTIL_LPM_SetStopMode+0x5c>)
 801c42a:	601a      	str	r2, [r3, #0]
      break;
 801c42c:	e000      	b.n	801c430 <UTIL_LPM_SetStopMode+0x48>
    }
  default :
    {
      break;
 801c42e:	46c0      	nop			; (mov r8, r8)
 801c430:	697b      	ldr	r3, [r7, #20]
 801c432:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c434:	68fb      	ldr	r3, [r7, #12]
 801c436:	f383 8810 	msr	PRIMASK, r3
}
 801c43a:	46c0      	nop			; (mov r8, r8)
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801c43c:	46c0      	nop			; (mov r8, r8)
 801c43e:	46bd      	mov	sp, r7
 801c440:	b006      	add	sp, #24
 801c442:	bd80      	pop	{r7, pc}
 801c444:	2000129c 	.word	0x2000129c

0801c448 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801c448:	b580      	push	{r7, lr}
 801c44a:	b086      	sub	sp, #24
 801c44c:	af00      	add	r7, sp, #0
 801c44e:	6078      	str	r0, [r7, #4]
 801c450:	000a      	movs	r2, r1
 801c452:	1cfb      	adds	r3, r7, #3
 801c454:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c456:	f3ef 8310 	mrs	r3, PRIMASK
 801c45a:	613b      	str	r3, [r7, #16]
  return(result);
 801c45c:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801c45e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c460:	b672      	cpsid	i
}
 801c462:	46c0      	nop			; (mov r8, r8)
  
  switch(state)
 801c464:	1cfb      	adds	r3, r7, #3
 801c466:	781b      	ldrb	r3, [r3, #0]
 801c468:	2b00      	cmp	r3, #0
 801c46a:	d008      	beq.n	801c47e <UTIL_LPM_SetOffMode+0x36>
 801c46c:	2b01      	cmp	r3, #1
 801c46e:	d10e      	bne.n	801c48e <UTIL_LPM_SetOffMode+0x46>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801c470:	4b0c      	ldr	r3, [pc, #48]	; (801c4a4 <UTIL_LPM_SetOffMode+0x5c>)
 801c472:	681a      	ldr	r2, [r3, #0]
 801c474:	687b      	ldr	r3, [r7, #4]
 801c476:	431a      	orrs	r2, r3
 801c478:	4b0a      	ldr	r3, [pc, #40]	; (801c4a4 <UTIL_LPM_SetOffMode+0x5c>)
 801c47a:	601a      	str	r2, [r3, #0]
      break;
 801c47c:	e008      	b.n	801c490 <UTIL_LPM_SetOffMode+0x48>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801c47e:	687b      	ldr	r3, [r7, #4]
 801c480:	43da      	mvns	r2, r3
 801c482:	4b08      	ldr	r3, [pc, #32]	; (801c4a4 <UTIL_LPM_SetOffMode+0x5c>)
 801c484:	681b      	ldr	r3, [r3, #0]
 801c486:	401a      	ands	r2, r3
 801c488:	4b06      	ldr	r3, [pc, #24]	; (801c4a4 <UTIL_LPM_SetOffMode+0x5c>)
 801c48a:	601a      	str	r2, [r3, #0]
      break;
 801c48c:	e000      	b.n	801c490 <UTIL_LPM_SetOffMode+0x48>
    }
  default :
    {
      break;
 801c48e:	46c0      	nop			; (mov r8, r8)
 801c490:	697b      	ldr	r3, [r7, #20]
 801c492:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c494:	68fb      	ldr	r3, [r7, #12]
 801c496:	f383 8810 	msr	PRIMASK, r3
}
 801c49a:	46c0      	nop			; (mov r8, r8)
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801c49c:	46c0      	nop			; (mov r8, r8)
 801c49e:	46bd      	mov	sp, r7
 801c4a0:	b006      	add	sp, #24
 801c4a2:	bd80      	pop	{r7, pc}
 801c4a4:	200012a0 	.word	0x200012a0

0801c4a8 <UTIL_LPM_GetMode>:

UTIL_LPM_Mode_t UTIL_LPM_GetMode( void )
{
 801c4a8:	b580      	push	{r7, lr}
 801c4aa:	b084      	sub	sp, #16
 801c4ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c4ae:	f3ef 8310 	mrs	r3, PRIMASK
 801c4b2:	607b      	str	r3, [r7, #4]
  return(result);
 801c4b4:	687b      	ldr	r3, [r7, #4]
  UTIL_LPM_Mode_t mode_selected;

  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801c4b6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 801c4b8:	b672      	cpsid	i
}
 801c4ba:	46c0      	nop			; (mov r8, r8)

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801c4bc:	4b11      	ldr	r3, [pc, #68]	; (801c504 <UTIL_LPM_GetMode+0x5c>)
 801c4be:	681b      	ldr	r3, [r3, #0]
 801c4c0:	2b00      	cmp	r3, #0
 801c4c2:	d004      	beq.n	801c4ce <UTIL_LPM_GetMode+0x26>
  {
    /**
     * At least one user disallows Stop Mode
     */
    mode_selected = UTIL_LPM_SLEEPMODE;
 801c4c4:	230f      	movs	r3, #15
 801c4c6:	18fb      	adds	r3, r7, r3
 801c4c8:	2200      	movs	r2, #0
 801c4ca:	701a      	strb	r2, [r3, #0]
 801c4cc:	e00c      	b.n	801c4e8 <UTIL_LPM_GetMode+0x40>
  }
  else
  {
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801c4ce:	4b0e      	ldr	r3, [pc, #56]	; (801c508 <UTIL_LPM_GetMode+0x60>)
 801c4d0:	681b      	ldr	r3, [r3, #0]
 801c4d2:	2b00      	cmp	r3, #0
 801c4d4:	d004      	beq.n	801c4e0 <UTIL_LPM_GetMode+0x38>
    {
      /**
       * At least one user disallows Off Mode
       */
      mode_selected = UTIL_LPM_STOPMODE;
 801c4d6:	230f      	movs	r3, #15
 801c4d8:	18fb      	adds	r3, r7, r3
 801c4da:	2201      	movs	r2, #1
 801c4dc:	701a      	strb	r2, [r3, #0]
 801c4de:	e003      	b.n	801c4e8 <UTIL_LPM_GetMode+0x40>
    }
    else
    {
      mode_selected = UTIL_LPM_OFFMODE;
 801c4e0:	230f      	movs	r3, #15
 801c4e2:	18fb      	adds	r3, r7, r3
 801c4e4:	2202      	movs	r2, #2
 801c4e6:	701a      	strb	r2, [r3, #0]
 801c4e8:	68bb      	ldr	r3, [r7, #8]
 801c4ea:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c4ec:	683b      	ldr	r3, [r7, #0]
 801c4ee:	f383 8810 	msr	PRIMASK, r3
}
 801c4f2:	46c0      	nop			; (mov r8, r8)
    }
  }

  UTIL_LPM_EXIT_CRITICAL_SECTION( );

  return mode_selected;
 801c4f4:	230f      	movs	r3, #15
 801c4f6:	18fb      	adds	r3, r7, r3
 801c4f8:	781b      	ldrb	r3, [r3, #0]
}
 801c4fa:	0018      	movs	r0, r3
 801c4fc:	46bd      	mov	sp, r7
 801c4fe:	b004      	add	sp, #16
 801c500:	bd80      	pop	{r7, pc}
 801c502:	46c0      	nop			; (mov r8, r8)
 801c504:	2000129c 	.word	0x2000129c
 801c508:	200012a0 	.word	0x200012a0

0801c50c <UTIL_LPM_EnterLowPower>:

void UTIL_LPM_EnterLowPower( void )
{
 801c50c:	b580      	push	{r7, lr}
 801c50e:	b084      	sub	sp, #16
 801c510:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c512:	f3ef 8310 	mrs	r3, PRIMASK
 801c516:	60bb      	str	r3, [r7, #8]
  return(result);
 801c518:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801c51a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801c51c:	b672      	cpsid	i
}
 801c51e:	46c0      	nop			; (mov r8, r8)

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801c520:	4b12      	ldr	r3, [pc, #72]	; (801c56c <UTIL_LPM_EnterLowPower+0x60>)
 801c522:	681b      	ldr	r3, [r3, #0]
 801c524:	2b00      	cmp	r3, #0
 801c526:	d006      	beq.n	801c536 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801c528:	4b11      	ldr	r3, [pc, #68]	; (801c570 <UTIL_LPM_EnterLowPower+0x64>)
 801c52a:	681b      	ldr	r3, [r3, #0]
 801c52c:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801c52e:	4b10      	ldr	r3, [pc, #64]	; (801c570 <UTIL_LPM_EnterLowPower+0x64>)
 801c530:	685b      	ldr	r3, [r3, #4]
 801c532:	4798      	blx	r3
 801c534:	e010      	b.n	801c558 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801c536:	4b0f      	ldr	r3, [pc, #60]	; (801c574 <UTIL_LPM_EnterLowPower+0x68>)
 801c538:	681b      	ldr	r3, [r3, #0]
 801c53a:	2b00      	cmp	r3, #0
 801c53c:	d006      	beq.n	801c54c <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801c53e:	4b0c      	ldr	r3, [pc, #48]	; (801c570 <UTIL_LPM_EnterLowPower+0x64>)
 801c540:	689b      	ldr	r3, [r3, #8]
 801c542:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801c544:	4b0a      	ldr	r3, [pc, #40]	; (801c570 <UTIL_LPM_EnterLowPower+0x64>)
 801c546:	68db      	ldr	r3, [r3, #12]
 801c548:	4798      	blx	r3
 801c54a:	e005      	b.n	801c558 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801c54c:	4b08      	ldr	r3, [pc, #32]	; (801c570 <UTIL_LPM_EnterLowPower+0x64>)
 801c54e:	691b      	ldr	r3, [r3, #16]
 801c550:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801c552:	4b07      	ldr	r3, [pc, #28]	; (801c570 <UTIL_LPM_EnterLowPower+0x64>)
 801c554:	695b      	ldr	r3, [r3, #20]
 801c556:	4798      	blx	r3
 801c558:	68fb      	ldr	r3, [r7, #12]
 801c55a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c55c:	687b      	ldr	r3, [r7, #4]
 801c55e:	f383 8810 	msr	PRIMASK, r3
}
 801c562:	46c0      	nop			; (mov r8, r8)
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801c564:	46c0      	nop			; (mov r8, r8)
 801c566:	46bd      	mov	sp, r7
 801c568:	b004      	add	sp, #16
 801c56a:	bd80      	pop	{r7, pc}
 801c56c:	2000129c 	.word	0x2000129c
 801c570:	0801f198 	.word	0x0801f198
 801c574:	200012a0 	.word	0x200012a0

0801c578 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801c578:	b580      	push	{r7, lr}
 801c57a:	b086      	sub	sp, #24
 801c57c:	af00      	add	r7, sp, #0
 801c57e:	60f8      	str	r0, [r7, #12]
 801c580:	60b9      	str	r1, [r7, #8]
 801c582:	1dbb      	adds	r3, r7, #6
 801c584:	801a      	strh	r2, [r3, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801c586:	68fb      	ldr	r3, [r7, #12]
 801c588:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801c58a:	68bb      	ldr	r3, [r7, #8]
 801c58c:	613b      	str	r3, [r7, #16]

  while( size-- )
 801c58e:	e007      	b.n	801c5a0 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801c590:	693a      	ldr	r2, [r7, #16]
 801c592:	1c53      	adds	r3, r2, #1
 801c594:	613b      	str	r3, [r7, #16]
 801c596:	697b      	ldr	r3, [r7, #20]
 801c598:	1c59      	adds	r1, r3, #1
 801c59a:	6179      	str	r1, [r7, #20]
 801c59c:	7812      	ldrb	r2, [r2, #0]
 801c59e:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801c5a0:	1dbb      	adds	r3, r7, #6
 801c5a2:	881b      	ldrh	r3, [r3, #0]
 801c5a4:	1dba      	adds	r2, r7, #6
 801c5a6:	1e59      	subs	r1, r3, #1
 801c5a8:	8011      	strh	r1, [r2, #0]
 801c5aa:	2b00      	cmp	r3, #0
 801c5ac:	d1f0      	bne.n	801c590 <UTIL_MEM_cpy_8+0x18>
    }
}
 801c5ae:	46c0      	nop			; (mov r8, r8)
 801c5b0:	46c0      	nop			; (mov r8, r8)
 801c5b2:	46bd      	mov	sp, r7
 801c5b4:	b006      	add	sp, #24
 801c5b6:	bd80      	pop	{r7, pc}

0801c5b8 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801c5b8:	b580      	push	{r7, lr}
 801c5ba:	b084      	sub	sp, #16
 801c5bc:	af00      	add	r7, sp, #0
 801c5be:	6078      	str	r0, [r7, #4]
 801c5c0:	0008      	movs	r0, r1
 801c5c2:	0011      	movs	r1, r2
 801c5c4:	1cfb      	adds	r3, r7, #3
 801c5c6:	1c02      	adds	r2, r0, #0
 801c5c8:	701a      	strb	r2, [r3, #0]
 801c5ca:	003b      	movs	r3, r7
 801c5cc:	1c0a      	adds	r2, r1, #0
 801c5ce:	801a      	strh	r2, [r3, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801c5d0:	687b      	ldr	r3, [r7, #4]
 801c5d2:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801c5d4:	e005      	b.n	801c5e2 <UTIL_MEM_set_8+0x2a>
  {
    *dst8++ = value;
 801c5d6:	68fb      	ldr	r3, [r7, #12]
 801c5d8:	1c5a      	adds	r2, r3, #1
 801c5da:	60fa      	str	r2, [r7, #12]
 801c5dc:	1cfa      	adds	r2, r7, #3
 801c5de:	7812      	ldrb	r2, [r2, #0]
 801c5e0:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801c5e2:	003b      	movs	r3, r7
 801c5e4:	881b      	ldrh	r3, [r3, #0]
 801c5e6:	003a      	movs	r2, r7
 801c5e8:	1e59      	subs	r1, r3, #1
 801c5ea:	8011      	strh	r1, [r2, #0]
 801c5ec:	2b00      	cmp	r3, #0
 801c5ee:	d1f2      	bne.n	801c5d6 <UTIL_MEM_set_8+0x1e>
  }
}
 801c5f0:	46c0      	nop			; (mov r8, r8)
 801c5f2:	46c0      	nop			; (mov r8, r8)
 801c5f4:	46bd      	mov	sp, r7
 801c5f6:	b004      	add	sp, #16
 801c5f8:	bd80      	pop	{r7, pc}
	...

0801c5fc <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801c5fc:	b580      	push	{r7, lr}
 801c5fe:	b08c      	sub	sp, #48	; 0x30
 801c600:	af00      	add	r7, sp, #0
 801c602:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801c604:	4b66      	ldr	r3, [pc, #408]	; (801c7a0 <UTIL_SEQ_Run+0x1a4>)
 801c606:	681b      	ldr	r3, [r3, #0]
 801c608:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 801c60a:	4b65      	ldr	r3, [pc, #404]	; (801c7a0 <UTIL_SEQ_Run+0x1a4>)
 801c60c:	681b      	ldr	r3, [r3, #0]
 801c60e:	687a      	ldr	r2, [r7, #4]
 801c610:	401a      	ands	r2, r3
 801c612:	4b63      	ldr	r3, [pc, #396]	; (801c7a0 <UTIL_SEQ_Run+0x1a4>)
 801c614:	601a      	str	r2, [r3, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 801c616:	e086      	b.n	801c726 <UTIL_SEQ_Run+0x12a>
  {
    counter = 0U;
 801c618:	2300      	movs	r3, #0
 801c61a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 801c61c:	e002      	b.n	801c624 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 801c61e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c620:	3301      	adds	r3, #1
 801c622:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 801c624:	4b5f      	ldr	r3, [pc, #380]	; (801c7a4 <UTIL_SEQ_Run+0x1a8>)
 801c626:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c628:	00d2      	lsls	r2, r2, #3
 801c62a:	58d2      	ldr	r2, [r2, r3]
 801c62c:	4b5e      	ldr	r3, [pc, #376]	; (801c7a8 <UTIL_SEQ_Run+0x1ac>)
 801c62e:	681b      	ldr	r3, [r3, #0]
 801c630:	401a      	ands	r2, r3
 801c632:	4b5b      	ldr	r3, [pc, #364]	; (801c7a0 <UTIL_SEQ_Run+0x1a4>)
 801c634:	681b      	ldr	r3, [r3, #0]
 801c636:	4013      	ands	r3, r2
 801c638:	d0f1      	beq.n	801c61e <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 801c63a:	4b5a      	ldr	r3, [pc, #360]	; (801c7a4 <UTIL_SEQ_Run+0x1a8>)
 801c63c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c63e:	00d2      	lsls	r2, r2, #3
 801c640:	58d2      	ldr	r2, [r2, r3]
 801c642:	4b59      	ldr	r3, [pc, #356]	; (801c7a8 <UTIL_SEQ_Run+0x1ac>)
 801c644:	681b      	ldr	r3, [r3, #0]
 801c646:	401a      	ands	r2, r3
 801c648:	4b55      	ldr	r3, [pc, #340]	; (801c7a0 <UTIL_SEQ_Run+0x1a4>)
 801c64a:	681b      	ldr	r3, [r3, #0]
 801c64c:	4013      	ands	r3, r2
 801c64e:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801c650:	4a54      	ldr	r2, [pc, #336]	; (801c7a4 <UTIL_SEQ_Run+0x1a8>)
 801c652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c654:	00db      	lsls	r3, r3, #3
 801c656:	18d3      	adds	r3, r2, r3
 801c658:	3304      	adds	r3, #4
 801c65a:	681b      	ldr	r3, [r3, #0]
 801c65c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c65e:	4013      	ands	r3, r2
 801c660:	d107      	bne.n	801c672 <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801c662:	4a50      	ldr	r2, [pc, #320]	; (801c7a4 <UTIL_SEQ_Run+0x1a8>)
 801c664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c666:	00db      	lsls	r3, r3, #3
 801c668:	18d3      	adds	r3, r2, r3
 801c66a:	3304      	adds	r3, #4
 801c66c:	2201      	movs	r2, #1
 801c66e:	4252      	negs	r2, r2
 801c670:	601a      	str	r2, [r3, #0]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801c672:	4a4c      	ldr	r2, [pc, #304]	; (801c7a4 <UTIL_SEQ_Run+0x1a8>)
 801c674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c676:	00db      	lsls	r3, r3, #3
 801c678:	18d3      	adds	r3, r2, r3
 801c67a:	3304      	adds	r3, #4
 801c67c:	681b      	ldr	r3, [r3, #0]
 801c67e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c680:	4013      	ands	r3, r2
 801c682:	0018      	movs	r0, r3
 801c684:	f000 f8f6 	bl	801c874 <SEQ_BitPosition>
 801c688:	0003      	movs	r3, r0
 801c68a:	001a      	movs	r2, r3
 801c68c:	4b47      	ldr	r3, [pc, #284]	; (801c7ac <UTIL_SEQ_Run+0x1b0>)
 801c68e:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801c690:	4a44      	ldr	r2, [pc, #272]	; (801c7a4 <UTIL_SEQ_Run+0x1a8>)
 801c692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c694:	00db      	lsls	r3, r3, #3
 801c696:	18d3      	adds	r3, r2, r3
 801c698:	3304      	adds	r3, #4
 801c69a:	681a      	ldr	r2, [r3, #0]
 801c69c:	4b43      	ldr	r3, [pc, #268]	; (801c7ac <UTIL_SEQ_Run+0x1b0>)
 801c69e:	681b      	ldr	r3, [r3, #0]
 801c6a0:	2101      	movs	r1, #1
 801c6a2:	4099      	lsls	r1, r3
 801c6a4:	000b      	movs	r3, r1
 801c6a6:	43db      	mvns	r3, r3
 801c6a8:	401a      	ands	r2, r3
 801c6aa:	493e      	ldr	r1, [pc, #248]	; (801c7a4 <UTIL_SEQ_Run+0x1a8>)
 801c6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c6ae:	00db      	lsls	r3, r3, #3
 801c6b0:	18cb      	adds	r3, r1, r3
 801c6b2:	3304      	adds	r3, #4
 801c6b4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c6b6:	f3ef 8310 	mrs	r3, PRIMASK
 801c6ba:	61bb      	str	r3, [r7, #24]
  return(result);
 801c6bc:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801c6be:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801c6c0:	b672      	cpsid	i
}
 801c6c2:	46c0      	nop			; (mov r8, r8)
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801c6c4:	4b39      	ldr	r3, [pc, #228]	; (801c7ac <UTIL_SEQ_Run+0x1b0>)
 801c6c6:	681b      	ldr	r3, [r3, #0]
 801c6c8:	2201      	movs	r2, #1
 801c6ca:	409a      	lsls	r2, r3
 801c6cc:	0013      	movs	r3, r2
 801c6ce:	43da      	mvns	r2, r3
 801c6d0:	4b37      	ldr	r3, [pc, #220]	; (801c7b0 <UTIL_SEQ_Run+0x1b4>)
 801c6d2:	681b      	ldr	r3, [r3, #0]
 801c6d4:	401a      	ands	r2, r3
 801c6d6:	4b36      	ldr	r3, [pc, #216]	; (801c7b0 <UTIL_SEQ_Run+0x1b4>)
 801c6d8:	601a      	str	r2, [r3, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801c6da:	2302      	movs	r3, #2
 801c6dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c6de:	e013      	b.n	801c708 <UTIL_SEQ_Run+0x10c>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801c6e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c6e2:	1e5a      	subs	r2, r3, #1
 801c6e4:	4b2f      	ldr	r3, [pc, #188]	; (801c7a4 <UTIL_SEQ_Run+0x1a8>)
 801c6e6:	00d2      	lsls	r2, r2, #3
 801c6e8:	58d1      	ldr	r1, [r2, r3]
 801c6ea:	4b30      	ldr	r3, [pc, #192]	; (801c7ac <UTIL_SEQ_Run+0x1b0>)
 801c6ec:	681b      	ldr	r3, [r3, #0]
 801c6ee:	2201      	movs	r2, #1
 801c6f0:	409a      	lsls	r2, r3
 801c6f2:	0013      	movs	r3, r2
 801c6f4:	43db      	mvns	r3, r3
 801c6f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c6f8:	3a01      	subs	r2, #1
 801c6fa:	4019      	ands	r1, r3
 801c6fc:	4b29      	ldr	r3, [pc, #164]	; (801c7a4 <UTIL_SEQ_Run+0x1a8>)
 801c6fe:	00d2      	lsls	r2, r2, #3
 801c700:	50d1      	str	r1, [r2, r3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801c702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c704:	3b01      	subs	r3, #1
 801c706:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c70a:	2b00      	cmp	r3, #0
 801c70c:	d1e8      	bne.n	801c6e0 <UTIL_SEQ_Run+0xe4>
 801c70e:	6a3b      	ldr	r3, [r7, #32]
 801c710:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c712:	697b      	ldr	r3, [r7, #20]
 801c714:	f383 8810 	msr	PRIMASK, r3
}
 801c718:	46c0      	nop			; (mov r8, r8)
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801c71a:	4b24      	ldr	r3, [pc, #144]	; (801c7ac <UTIL_SEQ_Run+0x1b0>)
 801c71c:	681a      	ldr	r2, [r3, #0]
 801c71e:	4b25      	ldr	r3, [pc, #148]	; (801c7b4 <UTIL_SEQ_Run+0x1b8>)
 801c720:	0092      	lsls	r2, r2, #2
 801c722:	58d3      	ldr	r3, [r2, r3]
 801c724:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 801c726:	4b22      	ldr	r3, [pc, #136]	; (801c7b0 <UTIL_SEQ_Run+0x1b4>)
 801c728:	681a      	ldr	r2, [r3, #0]
 801c72a:	4b1f      	ldr	r3, [pc, #124]	; (801c7a8 <UTIL_SEQ_Run+0x1ac>)
 801c72c:	681b      	ldr	r3, [r3, #0]
 801c72e:	401a      	ands	r2, r3
 801c730:	4b1b      	ldr	r3, [pc, #108]	; (801c7a0 <UTIL_SEQ_Run+0x1a4>)
 801c732:	681b      	ldr	r3, [r3, #0]
 801c734:	4013      	ands	r3, r2
 801c736:	d006      	beq.n	801c746 <UTIL_SEQ_Run+0x14a>
 801c738:	4b1f      	ldr	r3, [pc, #124]	; (801c7b8 <UTIL_SEQ_Run+0x1bc>)
 801c73a:	681a      	ldr	r2, [r3, #0]
 801c73c:	4b1f      	ldr	r3, [pc, #124]	; (801c7bc <UTIL_SEQ_Run+0x1c0>)
 801c73e:	681b      	ldr	r3, [r3, #0]
 801c740:	4013      	ands	r3, r2
 801c742:	d100      	bne.n	801c746 <UTIL_SEQ_Run+0x14a>
 801c744:	e768      	b.n	801c618 <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801c746:	4b19      	ldr	r3, [pc, #100]	; (801c7ac <UTIL_SEQ_Run+0x1b0>)
 801c748:	2201      	movs	r2, #1
 801c74a:	4252      	negs	r2, r2
 801c74c:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801c74e:	f000 f887 	bl	801c860 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c752:	f3ef 8310 	mrs	r3, PRIMASK
 801c756:	613b      	str	r3, [r7, #16]
  return(result);
 801c758:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801c75a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c75c:	b672      	cpsid	i
}
 801c75e:	46c0      	nop			; (mov r8, r8)
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 801c760:	4b13      	ldr	r3, [pc, #76]	; (801c7b0 <UTIL_SEQ_Run+0x1b4>)
 801c762:	681a      	ldr	r2, [r3, #0]
 801c764:	4b10      	ldr	r3, [pc, #64]	; (801c7a8 <UTIL_SEQ_Run+0x1ac>)
 801c766:	681b      	ldr	r3, [r3, #0]
 801c768:	401a      	ands	r2, r3
 801c76a:	4b0d      	ldr	r3, [pc, #52]	; (801c7a0 <UTIL_SEQ_Run+0x1a4>)
 801c76c:	681b      	ldr	r3, [r3, #0]
 801c76e:	4013      	ands	r3, r2
 801c770:	d107      	bne.n	801c782 <UTIL_SEQ_Run+0x186>
 801c772:	4b11      	ldr	r3, [pc, #68]	; (801c7b8 <UTIL_SEQ_Run+0x1bc>)
 801c774:	681a      	ldr	r2, [r3, #0]
 801c776:	4b11      	ldr	r3, [pc, #68]	; (801c7bc <UTIL_SEQ_Run+0x1c0>)
 801c778:	681b      	ldr	r3, [r3, #0]
 801c77a:	4013      	ands	r3, r2
 801c77c:	d101      	bne.n	801c782 <UTIL_SEQ_Run+0x186>
  {
	UTIL_SEQ_Idle( );
 801c77e:	f7e8 f99b 	bl	8004ab8 <UTIL_SEQ_Idle>
 801c782:	69fb      	ldr	r3, [r7, #28]
 801c784:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c786:	68fb      	ldr	r3, [r7, #12]
 801c788:	f383 8810 	msr	PRIMASK, r3
}
 801c78c:	46c0      	nop			; (mov r8, r8)
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 801c78e:	f000 f86c 	bl	801c86a <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801c792:	4b03      	ldr	r3, [pc, #12]	; (801c7a0 <UTIL_SEQ_Run+0x1a4>)
 801c794:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c796:	601a      	str	r2, [r3, #0]

  return;
 801c798:	46c0      	nop			; (mov r8, r8)
}
 801c79a:	46bd      	mov	sp, r7
 801c79c:	b00c      	add	sp, #48	; 0x30
 801c79e:	bd80      	pop	{r7, pc}
 801c7a0:	200001cc 	.word	0x200001cc
 801c7a4:	20001334 	.word	0x20001334
 801c7a8:	200001c8 	.word	0x200001c8
 801c7ac:	200012b0 	.word	0x200012b0
 801c7b0:	200012a4 	.word	0x200012a4
 801c7b4:	200012b4 	.word	0x200012b4
 801c7b8:	200012a8 	.word	0x200012a8
 801c7bc:	200012ac 	.word	0x200012ac

0801c7c0 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801c7c0:	b580      	push	{r7, lr}
 801c7c2:	b088      	sub	sp, #32
 801c7c4:	af00      	add	r7, sp, #0
 801c7c6:	60f8      	str	r0, [r7, #12]
 801c7c8:	60b9      	str	r1, [r7, #8]
 801c7ca:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c7cc:	f3ef 8310 	mrs	r3, PRIMASK
 801c7d0:	617b      	str	r3, [r7, #20]
  return(result);
 801c7d2:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801c7d4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c7d6:	b672      	cpsid	i
}
 801c7d8:	46c0      	nop			; (mov r8, r8)

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801c7da:	68fb      	ldr	r3, [r7, #12]
 801c7dc:	0018      	movs	r0, r3
 801c7de:	f000 f849 	bl	801c874 <SEQ_BitPosition>
 801c7e2:	0003      	movs	r3, r0
 801c7e4:	001a      	movs	r2, r3
 801c7e6:	4b07      	ldr	r3, [pc, #28]	; (801c804 <UTIL_SEQ_RegTask+0x44>)
 801c7e8:	0092      	lsls	r2, r2, #2
 801c7ea:	6879      	ldr	r1, [r7, #4]
 801c7ec:	50d1      	str	r1, [r2, r3]
 801c7ee:	69fb      	ldr	r3, [r7, #28]
 801c7f0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c7f2:	69bb      	ldr	r3, [r7, #24]
 801c7f4:	f383 8810 	msr	PRIMASK, r3
}
 801c7f8:	46c0      	nop			; (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801c7fa:	46c0      	nop			; (mov r8, r8)
}
 801c7fc:	46bd      	mov	sp, r7
 801c7fe:	b008      	add	sp, #32
 801c800:	bd80      	pop	{r7, pc}
 801c802:	46c0      	nop			; (mov r8, r8)
 801c804:	200012b4 	.word	0x200012b4

0801c808 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801c808:	b580      	push	{r7, lr}
 801c80a:	b086      	sub	sp, #24
 801c80c:	af00      	add	r7, sp, #0
 801c80e:	6078      	str	r0, [r7, #4]
 801c810:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c812:	f3ef 8310 	mrs	r3, PRIMASK
 801c816:	60fb      	str	r3, [r7, #12]
  return(result);
 801c818:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801c81a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c81c:	b672      	cpsid	i
}
 801c81e:	46c0      	nop			; (mov r8, r8)

  TaskSet |= TaskId_bm;
 801c820:	4b0d      	ldr	r3, [pc, #52]	; (801c858 <UTIL_SEQ_SetTask+0x50>)
 801c822:	681a      	ldr	r2, [r3, #0]
 801c824:	687b      	ldr	r3, [r7, #4]
 801c826:	431a      	orrs	r2, r3
 801c828:	4b0b      	ldr	r3, [pc, #44]	; (801c858 <UTIL_SEQ_SetTask+0x50>)
 801c82a:	601a      	str	r2, [r3, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801c82c:	4b0b      	ldr	r3, [pc, #44]	; (801c85c <UTIL_SEQ_SetTask+0x54>)
 801c82e:	683a      	ldr	r2, [r7, #0]
 801c830:	00d2      	lsls	r2, r2, #3
 801c832:	58d2      	ldr	r2, [r2, r3]
 801c834:	687b      	ldr	r3, [r7, #4]
 801c836:	431a      	orrs	r2, r3
 801c838:	0011      	movs	r1, r2
 801c83a:	4b08      	ldr	r3, [pc, #32]	; (801c85c <UTIL_SEQ_SetTask+0x54>)
 801c83c:	683a      	ldr	r2, [r7, #0]
 801c83e:	00d2      	lsls	r2, r2, #3
 801c840:	50d1      	str	r1, [r2, r3]
 801c842:	697b      	ldr	r3, [r7, #20]
 801c844:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c846:	693b      	ldr	r3, [r7, #16]
 801c848:	f383 8810 	msr	PRIMASK, r3
}
 801c84c:	46c0      	nop			; (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801c84e:	46c0      	nop			; (mov r8, r8)
}
 801c850:	46bd      	mov	sp, r7
 801c852:	b006      	add	sp, #24
 801c854:	bd80      	pop	{r7, pc}
 801c856:	46c0      	nop			; (mov r8, r8)
 801c858:	200012a4 	.word	0x200012a4
 801c85c:	20001334 	.word	0x20001334

0801c860 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801c860:	b580      	push	{r7, lr}
 801c862:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801c864:	46c0      	nop			; (mov r8, r8)
}
 801c866:	46bd      	mov	sp, r7
 801c868:	bd80      	pop	{r7, pc}

0801c86a <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801c86a:	b580      	push	{r7, lr}
 801c86c:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801c86e:	46c0      	nop			; (mov r8, r8)
}
 801c870:	46bd      	mov	sp, r7
 801c872:	bd80      	pop	{r7, pc}

0801c874 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801c874:	b580      	push	{r7, lr}
 801c876:	b084      	sub	sp, #16
 801c878:	af00      	add	r7, sp, #0
 801c87a:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 801c87c:	210f      	movs	r1, #15
 801c87e:	187b      	adds	r3, r7, r1
 801c880:	2200      	movs	r2, #0
 801c882:	701a      	strb	r2, [r3, #0]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 801c884:	687b      	ldr	r3, [r7, #4]
 801c886:	0c1b      	lsrs	r3, r3, #16
 801c888:	041b      	lsls	r3, r3, #16
 801c88a:	d105      	bne.n	801c898 <SEQ_BitPosition+0x24>
 801c88c:	187b      	adds	r3, r7, r1
 801c88e:	2210      	movs	r2, #16
 801c890:	701a      	strb	r2, [r3, #0]
 801c892:	687b      	ldr	r3, [r7, #4]
 801c894:	041b      	lsls	r3, r3, #16
 801c896:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 801c898:	687b      	ldr	r3, [r7, #4]
 801c89a:	0e1b      	lsrs	r3, r3, #24
 801c89c:	061b      	lsls	r3, r3, #24
 801c89e:	d108      	bne.n	801c8b2 <SEQ_BitPosition+0x3e>
 801c8a0:	220f      	movs	r2, #15
 801c8a2:	18bb      	adds	r3, r7, r2
 801c8a4:	18ba      	adds	r2, r7, r2
 801c8a6:	7812      	ldrb	r2, [r2, #0]
 801c8a8:	3208      	adds	r2, #8
 801c8aa:	701a      	strb	r2, [r3, #0]
 801c8ac:	687b      	ldr	r3, [r7, #4]
 801c8ae:	021b      	lsls	r3, r3, #8
 801c8b0:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 801c8b2:	687b      	ldr	r3, [r7, #4]
 801c8b4:	0f1b      	lsrs	r3, r3, #28
 801c8b6:	071b      	lsls	r3, r3, #28
 801c8b8:	d108      	bne.n	801c8cc <SEQ_BitPosition+0x58>
 801c8ba:	220f      	movs	r2, #15
 801c8bc:	18bb      	adds	r3, r7, r2
 801c8be:	18ba      	adds	r2, r7, r2
 801c8c0:	7812      	ldrb	r2, [r2, #0]
 801c8c2:	3204      	adds	r2, #4
 801c8c4:	701a      	strb	r2, [r3, #0]
 801c8c6:	687b      	ldr	r3, [r7, #4]
 801c8c8:	011b      	lsls	r3, r3, #4
 801c8ca:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 801c8cc:	687b      	ldr	r3, [r7, #4]
 801c8ce:	0f1b      	lsrs	r3, r3, #28
 801c8d0:	4a08      	ldr	r2, [pc, #32]	; (801c8f4 <SEQ_BitPosition+0x80>)
 801c8d2:	5cd1      	ldrb	r1, [r2, r3]
 801c8d4:	200f      	movs	r0, #15
 801c8d6:	183b      	adds	r3, r7, r0
 801c8d8:	183a      	adds	r2, r7, r0
 801c8da:	7812      	ldrb	r2, [r2, #0]
 801c8dc:	188a      	adds	r2, r1, r2
 801c8de:	701a      	strb	r2, [r3, #0]

  return (uint8_t)(31U-n);
 801c8e0:	183b      	adds	r3, r7, r0
 801c8e2:	781b      	ldrb	r3, [r3, #0]
 801c8e4:	221f      	movs	r2, #31
 801c8e6:	1ad3      	subs	r3, r2, r3
 801c8e8:	b2db      	uxtb	r3, r3
}
 801c8ea:	0018      	movs	r0, r3
 801c8ec:	46bd      	mov	sp, r7
 801c8ee:	b004      	add	sp, #16
 801c8f0:	bd80      	pop	{r7, pc}
 801c8f2:	46c0      	nop			; (mov r8, r8)
 801c8f4:	0801ff98 	.word	0x0801ff98

0801c8f8 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801c8f8:	b082      	sub	sp, #8
 801c8fa:	b580      	push	{r7, lr}
 801c8fc:	b086      	sub	sp, #24
 801c8fe:	af00      	add	r7, sp, #0
 801c900:	60f8      	str	r0, [r7, #12]
 801c902:	1d38      	adds	r0, r7, #4
 801c904:	6001      	str	r1, [r0, #0]
 801c906:	6042      	str	r2, [r0, #4]
 801c908:	2204      	movs	r2, #4
 801c90a:	2120      	movs	r1, #32
 801c90c:	468c      	mov	ip, r1
 801c90e:	44bc      	add	ip, r7
 801c910:	4462      	add	r2, ip
 801c912:	6013      	str	r3, [r2, #0]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801c914:	2110      	movs	r1, #16
 801c916:	187b      	adds	r3, r7, r1
 801c918:	2200      	movs	r2, #0
 801c91a:	601a      	str	r2, [r3, #0]
 801c91c:	187b      	adds	r3, r7, r1
 801c91e:	2200      	movs	r2, #0
 801c920:	809a      	strh	r2, [r3, #4]

  c.Seconds = a.Seconds + b.Seconds;
 801c922:	1d3b      	adds	r3, r7, #4
 801c924:	681a      	ldr	r2, [r3, #0]
 801c926:	2304      	movs	r3, #4
 801c928:	2020      	movs	r0, #32
 801c92a:	4684      	mov	ip, r0
 801c92c:	44bc      	add	ip, r7
 801c92e:	4463      	add	r3, ip
 801c930:	681b      	ldr	r3, [r3, #0]
 801c932:	18d2      	adds	r2, r2, r3
 801c934:	187b      	adds	r3, r7, r1
 801c936:	601a      	str	r2, [r3, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801c938:	1d3b      	adds	r3, r7, #4
 801c93a:	2204      	movs	r2, #4
 801c93c:	5e9b      	ldrsh	r3, [r3, r2]
 801c93e:	b29a      	uxth	r2, r3
 801c940:	2304      	movs	r3, #4
 801c942:	2020      	movs	r0, #32
 801c944:	4684      	mov	ip, r0
 801c946:	44bc      	add	ip, r7
 801c948:	4463      	add	r3, ip
 801c94a:	2004      	movs	r0, #4
 801c94c:	5e1b      	ldrsh	r3, [r3, r0]
 801c94e:	b29b      	uxth	r3, r3
 801c950:	18d3      	adds	r3, r2, r3
 801c952:	b29b      	uxth	r3, r3
 801c954:	b21a      	sxth	r2, r3
 801c956:	187b      	adds	r3, r7, r1
 801c958:	809a      	strh	r2, [r3, #4]
  if( c.SubSeconds >= 1000 )
 801c95a:	187b      	adds	r3, r7, r1
 801c95c:	2204      	movs	r2, #4
 801c95e:	5e9a      	ldrsh	r2, [r3, r2]
 801c960:	23fa      	movs	r3, #250	; 0xfa
 801c962:	009b      	lsls	r3, r3, #2
 801c964:	429a      	cmp	r2, r3
 801c966:	db0f      	blt.n	801c988 <SysTimeAdd+0x90>
  {
    c.Seconds++;
 801c968:	187b      	adds	r3, r7, r1
 801c96a:	681b      	ldr	r3, [r3, #0]
 801c96c:	1c5a      	adds	r2, r3, #1
 801c96e:	187b      	adds	r3, r7, r1
 801c970:	601a      	str	r2, [r3, #0]
    c.SubSeconds -= 1000;
 801c972:	187b      	adds	r3, r7, r1
 801c974:	2204      	movs	r2, #4
 801c976:	5e9b      	ldrsh	r3, [r3, r2]
 801c978:	b29b      	uxth	r3, r3
 801c97a:	4a09      	ldr	r2, [pc, #36]	; (801c9a0 <SysTimeAdd+0xa8>)
 801c97c:	4694      	mov	ip, r2
 801c97e:	4463      	add	r3, ip
 801c980:	b29b      	uxth	r3, r3
 801c982:	b21a      	sxth	r2, r3
 801c984:	187b      	adds	r3, r7, r1
 801c986:	809a      	strh	r2, [r3, #4]
  }
  return c;
 801c988:	68fb      	ldr	r3, [r7, #12]
 801c98a:	2210      	movs	r2, #16
 801c98c:	18ba      	adds	r2, r7, r2
 801c98e:	ca03      	ldmia	r2!, {r0, r1}
 801c990:	c303      	stmia	r3!, {r0, r1}
}
 801c992:	68f8      	ldr	r0, [r7, #12]
 801c994:	46bd      	mov	sp, r7
 801c996:	b006      	add	sp, #24
 801c998:	bc80      	pop	{r7}
 801c99a:	bc08      	pop	{r3}
 801c99c:	b002      	add	sp, #8
 801c99e:	4718      	bx	r3
 801c9a0:	fffffc18 	.word	0xfffffc18

0801c9a4 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801c9a4:	b082      	sub	sp, #8
 801c9a6:	b580      	push	{r7, lr}
 801c9a8:	b086      	sub	sp, #24
 801c9aa:	af00      	add	r7, sp, #0
 801c9ac:	60f8      	str	r0, [r7, #12]
 801c9ae:	1d38      	adds	r0, r7, #4
 801c9b0:	6001      	str	r1, [r0, #0]
 801c9b2:	6042      	str	r2, [r0, #4]
 801c9b4:	2204      	movs	r2, #4
 801c9b6:	2120      	movs	r1, #32
 801c9b8:	468c      	mov	ip, r1
 801c9ba:	44bc      	add	ip, r7
 801c9bc:	4462      	add	r2, ip
 801c9be:	6013      	str	r3, [r2, #0]
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801c9c0:	2110      	movs	r1, #16
 801c9c2:	187b      	adds	r3, r7, r1
 801c9c4:	2200      	movs	r2, #0
 801c9c6:	601a      	str	r2, [r3, #0]
 801c9c8:	187b      	adds	r3, r7, r1
 801c9ca:	2200      	movs	r2, #0
 801c9cc:	809a      	strh	r2, [r3, #4]

  c.Seconds = a.Seconds - b.Seconds;
 801c9ce:	1d3b      	adds	r3, r7, #4
 801c9d0:	681a      	ldr	r2, [r3, #0]
 801c9d2:	2304      	movs	r3, #4
 801c9d4:	2020      	movs	r0, #32
 801c9d6:	4684      	mov	ip, r0
 801c9d8:	44bc      	add	ip, r7
 801c9da:	4463      	add	r3, ip
 801c9dc:	681b      	ldr	r3, [r3, #0]
 801c9de:	1ad2      	subs	r2, r2, r3
 801c9e0:	187b      	adds	r3, r7, r1
 801c9e2:	601a      	str	r2, [r3, #0]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801c9e4:	1d3b      	adds	r3, r7, #4
 801c9e6:	2204      	movs	r2, #4
 801c9e8:	5e9b      	ldrsh	r3, [r3, r2]
 801c9ea:	b29a      	uxth	r2, r3
 801c9ec:	2304      	movs	r3, #4
 801c9ee:	2020      	movs	r0, #32
 801c9f0:	4684      	mov	ip, r0
 801c9f2:	44bc      	add	ip, r7
 801c9f4:	4463      	add	r3, ip
 801c9f6:	2004      	movs	r0, #4
 801c9f8:	5e1b      	ldrsh	r3, [r3, r0]
 801c9fa:	b29b      	uxth	r3, r3
 801c9fc:	1ad3      	subs	r3, r2, r3
 801c9fe:	b29b      	uxth	r3, r3
 801ca00:	b21a      	sxth	r2, r3
 801ca02:	187b      	adds	r3, r7, r1
 801ca04:	809a      	strh	r2, [r3, #4]
  if( c.SubSeconds < 0 )
 801ca06:	187b      	adds	r3, r7, r1
 801ca08:	2204      	movs	r2, #4
 801ca0a:	5e9b      	ldrsh	r3, [r3, r2]
 801ca0c:	2b00      	cmp	r3, #0
 801ca0e:	da10      	bge.n	801ca32 <SysTimeSub+0x8e>
  {
    c.Seconds--;
 801ca10:	187b      	adds	r3, r7, r1
 801ca12:	681b      	ldr	r3, [r3, #0]
 801ca14:	1e5a      	subs	r2, r3, #1
 801ca16:	187b      	adds	r3, r7, r1
 801ca18:	601a      	str	r2, [r3, #0]
    c.SubSeconds += 1000;
 801ca1a:	187b      	adds	r3, r7, r1
 801ca1c:	2204      	movs	r2, #4
 801ca1e:	5e9b      	ldrsh	r3, [r3, r2]
 801ca20:	b29b      	uxth	r3, r3
 801ca22:	22fa      	movs	r2, #250	; 0xfa
 801ca24:	0092      	lsls	r2, r2, #2
 801ca26:	4694      	mov	ip, r2
 801ca28:	4463      	add	r3, ip
 801ca2a:	b29b      	uxth	r3, r3
 801ca2c:	b21a      	sxth	r2, r3
 801ca2e:	187b      	adds	r3, r7, r1
 801ca30:	809a      	strh	r2, [r3, #4]
  }
  return c;
 801ca32:	68fb      	ldr	r3, [r7, #12]
 801ca34:	2210      	movs	r2, #16
 801ca36:	18ba      	adds	r2, r7, r2
 801ca38:	ca03      	ldmia	r2!, {r0, r1}
 801ca3a:	c303      	stmia	r3!, {r0, r1}
}
 801ca3c:	68f8      	ldr	r0, [r7, #12]
 801ca3e:	46bd      	mov	sp, r7
 801ca40:	b006      	add	sp, #24
 801ca42:	bc80      	pop	{r7}
 801ca44:	bc08      	pop	{r3}
 801ca46:	b002      	add	sp, #8
 801ca48:	4718      	bx	r3
	...

0801ca4c <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801ca4c:	b5b0      	push	{r4, r5, r7, lr}
 801ca4e:	b088      	sub	sp, #32
 801ca50:	af02      	add	r7, sp, #8
 801ca52:	003b      	movs	r3, r7
 801ca54:	6018      	str	r0, [r3, #0]
 801ca56:	6059      	str	r1, [r3, #4]
  SysTime_t DeltaTime;
  
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801ca58:	2108      	movs	r1, #8
 801ca5a:	187b      	adds	r3, r7, r1
 801ca5c:	2200      	movs	r2, #0
 801ca5e:	601a      	str	r2, [r3, #0]
 801ca60:	187b      	adds	r3, r7, r1
 801ca62:	2200      	movs	r2, #0
 801ca64:	809a      	strh	r2, [r3, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801ca66:	4b14      	ldr	r3, [pc, #80]	; (801cab8 <SysTimeSet+0x6c>)
 801ca68:	691b      	ldr	r3, [r3, #16]
 801ca6a:	000c      	movs	r4, r1
 801ca6c:	187a      	adds	r2, r7, r1
 801ca6e:	3204      	adds	r2, #4
 801ca70:	0010      	movs	r0, r2
 801ca72:	4798      	blx	r3
 801ca74:	0002      	movs	r2, r0
 801ca76:	0021      	movs	r1, r4
 801ca78:	187b      	adds	r3, r7, r1
 801ca7a:	601a      	str	r2, [r3, #0]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801ca7c:	2510      	movs	r5, #16
 801ca7e:	197c      	adds	r4, r7, r5
 801ca80:	187b      	adds	r3, r7, r1
 801ca82:	003a      	movs	r2, r7
 801ca84:	4669      	mov	r1, sp
 801ca86:	6858      	ldr	r0, [r3, #4]
 801ca88:	6008      	str	r0, [r1, #0]
 801ca8a:	681b      	ldr	r3, [r3, #0]
 801ca8c:	6811      	ldr	r1, [r2, #0]
 801ca8e:	6852      	ldr	r2, [r2, #4]
 801ca90:	0020      	movs	r0, r4
 801ca92:	f7ff ff87 	bl	801c9a4 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801ca96:	4b08      	ldr	r3, [pc, #32]	; (801cab8 <SysTimeSet+0x6c>)
 801ca98:	681a      	ldr	r2, [r3, #0]
 801ca9a:	197b      	adds	r3, r7, r5
 801ca9c:	681b      	ldr	r3, [r3, #0]
 801ca9e:	0018      	movs	r0, r3
 801caa0:	4790      	blx	r2
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801caa2:	4b05      	ldr	r3, [pc, #20]	; (801cab8 <SysTimeSet+0x6c>)
 801caa4:	689b      	ldr	r3, [r3, #8]
 801caa6:	197a      	adds	r2, r7, r5
 801caa8:	2104      	movs	r1, #4
 801caaa:	5e52      	ldrsh	r2, [r2, r1]
 801caac:	0010      	movs	r0, r2
 801caae:	4798      	blx	r3
}
 801cab0:	46c0      	nop			; (mov r8, r8)
 801cab2:	46bd      	mov	sp, r7
 801cab4:	b006      	add	sp, #24
 801cab6:	bdb0      	pop	{r4, r5, r7, pc}
 801cab8:	0801f184 	.word	0x0801f184

0801cabc <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801cabc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cabe:	b08b      	sub	sp, #44	; 0x2c
 801cac0:	af02      	add	r7, sp, #8
 801cac2:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801cac4:	2518      	movs	r5, #24
 801cac6:	197b      	adds	r3, r7, r5
 801cac8:	2200      	movs	r2, #0
 801caca:	601a      	str	r2, [r3, #0]
 801cacc:	197b      	adds	r3, r7, r5
 801cace:	2200      	movs	r2, #0
 801cad0:	809a      	strh	r2, [r3, #4]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801cad2:	2410      	movs	r4, #16
 801cad4:	193b      	adds	r3, r7, r4
 801cad6:	2200      	movs	r2, #0
 801cad8:	601a      	str	r2, [r3, #0]
 801cada:	193b      	adds	r3, r7, r4
 801cadc:	2200      	movs	r2, #0
 801cade:	809a      	strh	r2, [r3, #4]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801cae0:	4b16      	ldr	r3, [pc, #88]	; (801cb3c <SysTimeGet+0x80>)
 801cae2:	691b      	ldr	r3, [r3, #16]
 801cae4:	197a      	adds	r2, r7, r5
 801cae6:	3204      	adds	r2, #4
 801cae8:	0010      	movs	r0, r2
 801caea:	4798      	blx	r3
 801caec:	0002      	movs	r2, r0
 801caee:	197b      	adds	r3, r7, r5
 801caf0:	601a      	str	r2, [r3, #0]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801caf2:	4b12      	ldr	r3, [pc, #72]	; (801cb3c <SysTimeGet+0x80>)
 801caf4:	68db      	ldr	r3, [r3, #12]
 801caf6:	4798      	blx	r3
 801caf8:	0003      	movs	r3, r0
 801cafa:	b21a      	sxth	r2, r3
 801cafc:	2608      	movs	r6, #8
 801cafe:	19bb      	adds	r3, r7, r6
 801cb00:	809a      	strh	r2, [r3, #4]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801cb02:	4b0e      	ldr	r3, [pc, #56]	; (801cb3c <SysTimeGet+0x80>)
 801cb04:	685b      	ldr	r3, [r3, #4]
 801cb06:	4798      	blx	r3
 801cb08:	0002      	movs	r2, r0
 801cb0a:	0031      	movs	r1, r6
 801cb0c:	187b      	adds	r3, r7, r1
 801cb0e:	601a      	str	r2, [r3, #0]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801cb10:	0026      	movs	r6, r4
 801cb12:	193c      	adds	r4, r7, r4
 801cb14:	197b      	adds	r3, r7, r5
 801cb16:	187a      	adds	r2, r7, r1
 801cb18:	4669      	mov	r1, sp
 801cb1a:	6858      	ldr	r0, [r3, #4]
 801cb1c:	6008      	str	r0, [r1, #0]
 801cb1e:	681b      	ldr	r3, [r3, #0]
 801cb20:	6811      	ldr	r1, [r2, #0]
 801cb22:	6852      	ldr	r2, [r2, #4]
 801cb24:	0020      	movs	r0, r4
 801cb26:	f7ff fee7 	bl	801c8f8 <SysTimeAdd>

  return sysTime;
 801cb2a:	687b      	ldr	r3, [r7, #4]
 801cb2c:	19ba      	adds	r2, r7, r6
 801cb2e:	ca03      	ldmia	r2!, {r0, r1}
 801cb30:	c303      	stmia	r3!, {r0, r1}
}
 801cb32:	6878      	ldr	r0, [r7, #4]
 801cb34:	46bd      	mov	sp, r7
 801cb36:	b009      	add	sp, #36	; 0x24
 801cb38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cb3a:	46c0      	nop			; (mov r8, r8)
 801cb3c:	0801f184 	.word	0x0801f184

0801cb40 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801cb40:	b590      	push	{r4, r7, lr}
 801cb42:	b085      	sub	sp, #20
 801cb44:	af00      	add	r7, sp, #0
 801cb46:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801cb48:	2108      	movs	r1, #8
 801cb4a:	187b      	adds	r3, r7, r1
 801cb4c:	2200      	movs	r2, #0
 801cb4e:	601a      	str	r2, [r3, #0]
 801cb50:	187b      	adds	r3, r7, r1
 801cb52:	2200      	movs	r2, #0
 801cb54:	809a      	strh	r2, [r3, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801cb56:	4b09      	ldr	r3, [pc, #36]	; (801cb7c <SysTimeGetMcuTime+0x3c>)
 801cb58:	691b      	ldr	r3, [r3, #16]
 801cb5a:	000c      	movs	r4, r1
 801cb5c:	187a      	adds	r2, r7, r1
 801cb5e:	3204      	adds	r2, #4
 801cb60:	0010      	movs	r0, r2
 801cb62:	4798      	blx	r3
 801cb64:	0002      	movs	r2, r0
 801cb66:	193b      	adds	r3, r7, r4
 801cb68:	601a      	str	r2, [r3, #0]
  
  return calendarTime;
 801cb6a:	687b      	ldr	r3, [r7, #4]
 801cb6c:	193a      	adds	r2, r7, r4
 801cb6e:	ca03      	ldmia	r2!, {r0, r1}
 801cb70:	c303      	stmia	r3!, {r0, r1}
}
 801cb72:	6878      	ldr	r0, [r7, #4]
 801cb74:	46bd      	mov	sp, r7
 801cb76:	b005      	add	sp, #20
 801cb78:	bd90      	pop	{r4, r7, pc}
 801cb7a:	46c0      	nop			; (mov r8, r8)
 801cb7c:	0801f184 	.word	0x0801f184

0801cb80 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801cb80:	b580      	push	{r7, lr}
 801cb82:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801cb84:	4b04      	ldr	r3, [pc, #16]	; (801cb98 <UTIL_TIMER_Init+0x18>)
 801cb86:	2200      	movs	r2, #0
 801cb88:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801cb8a:	4b04      	ldr	r3, [pc, #16]	; (801cb9c <UTIL_TIMER_Init+0x1c>)
 801cb8c:	681b      	ldr	r3, [r3, #0]
 801cb8e:	4798      	blx	r3
 801cb90:	0003      	movs	r3, r0
}
 801cb92:	0018      	movs	r0, r3
 801cb94:	46bd      	mov	sp, r7
 801cb96:	bd80      	pop	{r7, pc}
 801cb98:	20001344 	.word	0x20001344
 801cb9c:	0801f158 	.word	0x0801f158

0801cba0 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801cba0:	b580      	push	{r7, lr}
 801cba2:	b084      	sub	sp, #16
 801cba4:	af00      	add	r7, sp, #0
 801cba6:	60f8      	str	r0, [r7, #12]
 801cba8:	60b9      	str	r1, [r7, #8]
 801cbaa:	603b      	str	r3, [r7, #0]
 801cbac:	1dfb      	adds	r3, r7, #7
 801cbae:	701a      	strb	r2, [r3, #0]
  if((TimerObject != NULL) && (Callback != NULL))
 801cbb0:	68fb      	ldr	r3, [r7, #12]
 801cbb2:	2b00      	cmp	r3, #0
 801cbb4:	d025      	beq.n	801cc02 <UTIL_TIMER_Create+0x62>
 801cbb6:	683b      	ldr	r3, [r7, #0]
 801cbb8:	2b00      	cmp	r3, #0
 801cbba:	d022      	beq.n	801cc02 <UTIL_TIMER_Create+0x62>
  {
    TimerObject->Timestamp = 0U;
 801cbbc:	68fb      	ldr	r3, [r7, #12]
 801cbbe:	2200      	movs	r2, #0
 801cbc0:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801cbc2:	4b12      	ldr	r3, [pc, #72]	; (801cc0c <UTIL_TIMER_Create+0x6c>)
 801cbc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cbc6:	68ba      	ldr	r2, [r7, #8]
 801cbc8:	0010      	movs	r0, r2
 801cbca:	4798      	blx	r3
 801cbcc:	0002      	movs	r2, r0
 801cbce:	68fb      	ldr	r3, [r7, #12]
 801cbd0:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801cbd2:	68fb      	ldr	r3, [r7, #12]
 801cbd4:	2200      	movs	r2, #0
 801cbd6:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801cbd8:	68fb      	ldr	r3, [r7, #12]
 801cbda:	2200      	movs	r2, #0
 801cbdc:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801cbde:	68fb      	ldr	r3, [r7, #12]
 801cbe0:	2200      	movs	r2, #0
 801cbe2:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801cbe4:	68fb      	ldr	r3, [r7, #12]
 801cbe6:	683a      	ldr	r2, [r7, #0]
 801cbe8:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801cbea:	68fb      	ldr	r3, [r7, #12]
 801cbec:	69ba      	ldr	r2, [r7, #24]
 801cbee:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801cbf0:	68fb      	ldr	r3, [r7, #12]
 801cbf2:	1dfa      	adds	r2, r7, #7
 801cbf4:	7812      	ldrb	r2, [r2, #0]
 801cbf6:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801cbf8:	68fb      	ldr	r3, [r7, #12]
 801cbfa:	2200      	movs	r2, #0
 801cbfc:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801cbfe:	2300      	movs	r3, #0
 801cc00:	e000      	b.n	801cc04 <UTIL_TIMER_Create+0x64>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801cc02:	2301      	movs	r3, #1
  }
}
 801cc04:	0018      	movs	r0, r3
 801cc06:	46bd      	mov	sp, r7
 801cc08:	b004      	add	sp, #16
 801cc0a:	bd80      	pop	{r7, pc}
 801cc0c:	0801f158 	.word	0x0801f158

0801cc10 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801cc10:	b580      	push	{r7, lr}
 801cc12:	b08a      	sub	sp, #40	; 0x28
 801cc14:	af00      	add	r7, sp, #0
 801cc16:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801cc18:	2327      	movs	r3, #39	; 0x27
 801cc1a:	18fb      	adds	r3, r7, r3
 801cc1c:	2200      	movs	r2, #0
 801cc1e:	701a      	strb	r2, [r3, #0]
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801cc20:	687b      	ldr	r3, [r7, #4]
 801cc22:	2b00      	cmp	r3, #0
 801cc24:	d05d      	beq.n	801cce2 <UTIL_TIMER_Start+0xd2>
 801cc26:	687b      	ldr	r3, [r7, #4]
 801cc28:	0018      	movs	r0, r3
 801cc2a:	f000 f9cb 	bl	801cfc4 <TimerExists>
 801cc2e:	0003      	movs	r3, r0
 801cc30:	001a      	movs	r2, r3
 801cc32:	2301      	movs	r3, #1
 801cc34:	4053      	eors	r3, r2
 801cc36:	b2db      	uxtb	r3, r3
 801cc38:	2b00      	cmp	r3, #0
 801cc3a:	d052      	beq.n	801cce2 <UTIL_TIMER_Start+0xd2>
 801cc3c:	687b      	ldr	r3, [r7, #4]
 801cc3e:	7a5b      	ldrb	r3, [r3, #9]
 801cc40:	2b00      	cmp	r3, #0
 801cc42:	d14e      	bne.n	801cce2 <UTIL_TIMER_Start+0xd2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cc44:	f3ef 8310 	mrs	r3, PRIMASK
 801cc48:	613b      	str	r3, [r7, #16]
  return(result);
 801cc4a:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801cc4c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801cc4e:	b672      	cpsid	i
}
 801cc50:	46c0      	nop			; (mov r8, r8)
    ticks = TimerObject->ReloadValue;
 801cc52:	687b      	ldr	r3, [r7, #4]
 801cc54:	685b      	ldr	r3, [r3, #4]
 801cc56:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801cc58:	4b27      	ldr	r3, [pc, #156]	; (801ccf8 <UTIL_TIMER_Start+0xe8>)
 801cc5a:	6a1b      	ldr	r3, [r3, #32]
 801cc5c:	4798      	blx	r3
 801cc5e:	0003      	movs	r3, r0
 801cc60:	61bb      	str	r3, [r7, #24]
    
    if( ticks < minValue )
 801cc62:	6a3a      	ldr	r2, [r7, #32]
 801cc64:	69bb      	ldr	r3, [r7, #24]
 801cc66:	429a      	cmp	r2, r3
 801cc68:	d201      	bcs.n	801cc6e <UTIL_TIMER_Start+0x5e>
    {
      ticks = minValue;
 801cc6a:	69bb      	ldr	r3, [r7, #24]
 801cc6c:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801cc6e:	687b      	ldr	r3, [r7, #4]
 801cc70:	6a3a      	ldr	r2, [r7, #32]
 801cc72:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801cc74:	687b      	ldr	r3, [r7, #4]
 801cc76:	2200      	movs	r2, #0
 801cc78:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801cc7a:	687b      	ldr	r3, [r7, #4]
 801cc7c:	2201      	movs	r2, #1
 801cc7e:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801cc80:	687b      	ldr	r3, [r7, #4]
 801cc82:	2200      	movs	r2, #0
 801cc84:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801cc86:	4b1d      	ldr	r3, [pc, #116]	; (801ccfc <UTIL_TIMER_Start+0xec>)
 801cc88:	681b      	ldr	r3, [r3, #0]
 801cc8a:	2b00      	cmp	r3, #0
 801cc8c:	d107      	bne.n	801cc9e <UTIL_TIMER_Start+0x8e>
    {
      UTIL_TimerDriver.SetTimerContext();
 801cc8e:	4b1a      	ldr	r3, [pc, #104]	; (801ccf8 <UTIL_TIMER_Start+0xe8>)
 801cc90:	691b      	ldr	r3, [r3, #16]
 801cc92:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801cc94:	687b      	ldr	r3, [r7, #4]
 801cc96:	0018      	movs	r0, r3
 801cc98:	f000 fa08 	bl	801d0ac <TimerInsertNewHeadTimer>
 801cc9c:	e01a      	b.n	801ccd4 <UTIL_TIMER_Start+0xc4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801cc9e:	4b16      	ldr	r3, [pc, #88]	; (801ccf8 <UTIL_TIMER_Start+0xe8>)
 801cca0:	699b      	ldr	r3, [r3, #24]
 801cca2:	4798      	blx	r3
 801cca4:	0003      	movs	r3, r0
 801cca6:	617b      	str	r3, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801cca8:	687b      	ldr	r3, [r7, #4]
 801ccaa:	681a      	ldr	r2, [r3, #0]
 801ccac:	697b      	ldr	r3, [r7, #20]
 801ccae:	18d2      	adds	r2, r2, r3
 801ccb0:	687b      	ldr	r3, [r7, #4]
 801ccb2:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801ccb4:	687b      	ldr	r3, [r7, #4]
 801ccb6:	681a      	ldr	r2, [r3, #0]
 801ccb8:	4b10      	ldr	r3, [pc, #64]	; (801ccfc <UTIL_TIMER_Start+0xec>)
 801ccba:	681b      	ldr	r3, [r3, #0]
 801ccbc:	681b      	ldr	r3, [r3, #0]
 801ccbe:	429a      	cmp	r2, r3
 801ccc0:	d204      	bcs.n	801cccc <UTIL_TIMER_Start+0xbc>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801ccc2:	687b      	ldr	r3, [r7, #4]
 801ccc4:	0018      	movs	r0, r3
 801ccc6:	f000 f9f1 	bl	801d0ac <TimerInsertNewHeadTimer>
 801ccca:	e003      	b.n	801ccd4 <UTIL_TIMER_Start+0xc4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801cccc:	687b      	ldr	r3, [r7, #4]
 801ccce:	0018      	movs	r0, r3
 801ccd0:	f000 f9be 	bl	801d050 <TimerInsertTimer>
 801ccd4:	69fb      	ldr	r3, [r7, #28]
 801ccd6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ccd8:	68fb      	ldr	r3, [r7, #12]
 801ccda:	f383 8810 	msr	PRIMASK, r3
}
 801ccde:	46c0      	nop			; (mov r8, r8)
  {
 801cce0:	e003      	b.n	801ccea <UTIL_TIMER_Start+0xda>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801cce2:	2327      	movs	r3, #39	; 0x27
 801cce4:	18fb      	adds	r3, r7, r3
 801cce6:	2201      	movs	r2, #1
 801cce8:	701a      	strb	r2, [r3, #0]
  }
  return ret;
 801ccea:	2327      	movs	r3, #39	; 0x27
 801ccec:	18fb      	adds	r3, r7, r3
 801ccee:	781b      	ldrb	r3, [r3, #0]
}
 801ccf0:	0018      	movs	r0, r3
 801ccf2:	46bd      	mov	sp, r7
 801ccf4:	b00a      	add	sp, #40	; 0x28
 801ccf6:	bd80      	pop	{r7, pc}
 801ccf8:	0801f158 	.word	0x0801f158
 801ccfc:	20001344 	.word	0x20001344

0801cd00 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801cd00:	b580      	push	{r7, lr}
 801cd02:	b088      	sub	sp, #32
 801cd04:	af00      	add	r7, sp, #0
 801cd06:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801cd08:	231f      	movs	r3, #31
 801cd0a:	18fb      	adds	r3, r7, r3
 801cd0c:	2200      	movs	r2, #0
 801cd0e:	701a      	strb	r2, [r3, #0]

  if (NULL != TimerObject)
 801cd10:	687b      	ldr	r3, [r7, #4]
 801cd12:	2b00      	cmp	r3, #0
 801cd14:	d05d      	beq.n	801cdd2 <UTIL_TIMER_Stop+0xd2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cd16:	f3ef 8310 	mrs	r3, PRIMASK
 801cd1a:	60fb      	str	r3, [r7, #12]
  return(result);
 801cd1c:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801cd1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801cd20:	b672      	cpsid	i
}
 801cd22:	46c0      	nop			; (mov r8, r8)
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801cd24:	4b30      	ldr	r3, [pc, #192]	; (801cde8 <UTIL_TIMER_Stop+0xe8>)
 801cd26:	681b      	ldr	r3, [r3, #0]
 801cd28:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801cd2a:	4b2f      	ldr	r3, [pc, #188]	; (801cde8 <UTIL_TIMER_Stop+0xe8>)
 801cd2c:	681b      	ldr	r3, [r3, #0]
 801cd2e:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801cd30:	687b      	ldr	r3, [r7, #4]
 801cd32:	2201      	movs	r2, #1
 801cd34:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801cd36:	4b2c      	ldr	r3, [pc, #176]	; (801cde8 <UTIL_TIMER_Stop+0xe8>)
 801cd38:	681b      	ldr	r3, [r3, #0]
 801cd3a:	2b00      	cmp	r3, #0
 801cd3c:	d043      	beq.n	801cdc6 <UTIL_TIMER_Stop+0xc6>
    {
      TimerObject->IsRunning = 0U;
 801cd3e:	687b      	ldr	r3, [r7, #4]
 801cd40:	2200      	movs	r2, #0
 801cd42:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801cd44:	4b28      	ldr	r3, [pc, #160]	; (801cde8 <UTIL_TIMER_Stop+0xe8>)
 801cd46:	681b      	ldr	r3, [r3, #0]
 801cd48:	687a      	ldr	r2, [r7, #4]
 801cd4a:	429a      	cmp	r2, r3
 801cd4c:	d134      	bne.n	801cdb8 <UTIL_TIMER_Stop+0xb8>
      {
          TimerListHead->IsPending = 0;
 801cd4e:	4b26      	ldr	r3, [pc, #152]	; (801cde8 <UTIL_TIMER_Stop+0xe8>)
 801cd50:	681b      	ldr	r3, [r3, #0]
 801cd52:	2200      	movs	r2, #0
 801cd54:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801cd56:	4b24      	ldr	r3, [pc, #144]	; (801cde8 <UTIL_TIMER_Stop+0xe8>)
 801cd58:	681b      	ldr	r3, [r3, #0]
 801cd5a:	695b      	ldr	r3, [r3, #20]
 801cd5c:	2b00      	cmp	r3, #0
 801cd5e:	d00a      	beq.n	801cd76 <UTIL_TIMER_Stop+0x76>
          {
            TimerListHead = TimerListHead->Next;
 801cd60:	4b21      	ldr	r3, [pc, #132]	; (801cde8 <UTIL_TIMER_Stop+0xe8>)
 801cd62:	681b      	ldr	r3, [r3, #0]
 801cd64:	695a      	ldr	r2, [r3, #20]
 801cd66:	4b20      	ldr	r3, [pc, #128]	; (801cde8 <UTIL_TIMER_Stop+0xe8>)
 801cd68:	601a      	str	r2, [r3, #0]
            TimerSetTimeout( TimerListHead );
 801cd6a:	4b1f      	ldr	r3, [pc, #124]	; (801cde8 <UTIL_TIMER_Stop+0xe8>)
 801cd6c:	681b      	ldr	r3, [r3, #0]
 801cd6e:	0018      	movs	r0, r3
 801cd70:	f000 f944 	bl	801cffc <TimerSetTimeout>
 801cd74:	e023      	b.n	801cdbe <UTIL_TIMER_Stop+0xbe>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801cd76:	4b1d      	ldr	r3, [pc, #116]	; (801cdec <UTIL_TIMER_Stop+0xec>)
 801cd78:	68db      	ldr	r3, [r3, #12]
 801cd7a:	4798      	blx	r3
            TimerListHead = NULL;
 801cd7c:	4b1a      	ldr	r3, [pc, #104]	; (801cde8 <UTIL_TIMER_Stop+0xe8>)
 801cd7e:	2200      	movs	r2, #0
 801cd80:	601a      	str	r2, [r3, #0]
 801cd82:	e01c      	b.n	801cdbe <UTIL_TIMER_Stop+0xbe>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801cd84:	697a      	ldr	r2, [r7, #20]
 801cd86:	687b      	ldr	r3, [r7, #4]
 801cd88:	429a      	cmp	r2, r3
 801cd8a:	d110      	bne.n	801cdae <UTIL_TIMER_Stop+0xae>
          {
            if( cur->Next != NULL )
 801cd8c:	697b      	ldr	r3, [r7, #20]
 801cd8e:	695b      	ldr	r3, [r3, #20]
 801cd90:	2b00      	cmp	r3, #0
 801cd92:	d006      	beq.n	801cda2 <UTIL_TIMER_Stop+0xa2>
            {
              cur = cur->Next;
 801cd94:	697b      	ldr	r3, [r7, #20]
 801cd96:	695b      	ldr	r3, [r3, #20]
 801cd98:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801cd9a:	69bb      	ldr	r3, [r7, #24]
 801cd9c:	697a      	ldr	r2, [r7, #20]
 801cd9e:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801cda0:	e00d      	b.n	801cdbe <UTIL_TIMER_Stop+0xbe>
              cur = NULL;
 801cda2:	2300      	movs	r3, #0
 801cda4:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801cda6:	69bb      	ldr	r3, [r7, #24]
 801cda8:	697a      	ldr	r2, [r7, #20]
 801cdaa:	615a      	str	r2, [r3, #20]
            break;
 801cdac:	e007      	b.n	801cdbe <UTIL_TIMER_Stop+0xbe>
          }
          else
          {
            prev = cur;
 801cdae:	697b      	ldr	r3, [r7, #20]
 801cdb0:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801cdb2:	697b      	ldr	r3, [r7, #20]
 801cdb4:	695b      	ldr	r3, [r3, #20]
 801cdb6:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801cdb8:	697b      	ldr	r3, [r7, #20]
 801cdba:	2b00      	cmp	r3, #0
 801cdbc:	d1e2      	bne.n	801cd84 <UTIL_TIMER_Stop+0x84>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801cdbe:	231f      	movs	r3, #31
 801cdc0:	18fb      	adds	r3, r7, r3
 801cdc2:	2200      	movs	r2, #0
 801cdc4:	701a      	strb	r2, [r3, #0]
 801cdc6:	693b      	ldr	r3, [r7, #16]
 801cdc8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cdca:	68bb      	ldr	r3, [r7, #8]
 801cdcc:	f383 8810 	msr	PRIMASK, r3
}
 801cdd0:	e003      	b.n	801cdda <UTIL_TIMER_Stop+0xda>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801cdd2:	231f      	movs	r3, #31
 801cdd4:	18fb      	adds	r3, r7, r3
 801cdd6:	2201      	movs	r2, #1
 801cdd8:	701a      	strb	r2, [r3, #0]
  }
  return ret;
 801cdda:	231f      	movs	r3, #31
 801cddc:	18fb      	adds	r3, r7, r3
 801cdde:	781b      	ldrb	r3, [r3, #0]
}
 801cde0:	0018      	movs	r0, r3
 801cde2:	46bd      	mov	sp, r7
 801cde4:	b008      	add	sp, #32
 801cde6:	bd80      	pop	{r7, pc}
 801cde8:	20001344 	.word	0x20001344
 801cdec:	0801f158 	.word	0x0801f158

0801cdf0 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801cdf0:	b590      	push	{r4, r7, lr}
 801cdf2:	b085      	sub	sp, #20
 801cdf4:	af00      	add	r7, sp, #0
 801cdf6:	6078      	str	r0, [r7, #4]
 801cdf8:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801cdfa:	210f      	movs	r1, #15
 801cdfc:	187b      	adds	r3, r7, r1
 801cdfe:	2200      	movs	r2, #0
 801ce00:	701a      	strb	r2, [r3, #0]
  
  if(NULL == TimerObject)
 801ce02:	687b      	ldr	r3, [r7, #4]
 801ce04:	2b00      	cmp	r3, #0
 801ce06:	d103      	bne.n	801ce10 <UTIL_TIMER_SetPeriod+0x20>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801ce08:	187b      	adds	r3, r7, r1
 801ce0a:	2201      	movs	r2, #1
 801ce0c:	701a      	strb	r2, [r3, #0]
 801ce0e:	e019      	b.n	801ce44 <UTIL_TIMER_SetPeriod+0x54>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801ce10:	4b10      	ldr	r3, [pc, #64]	; (801ce54 <UTIL_TIMER_SetPeriod+0x64>)
 801ce12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ce14:	683a      	ldr	r2, [r7, #0]
 801ce16:	0010      	movs	r0, r2
 801ce18:	4798      	blx	r3
 801ce1a:	0002      	movs	r2, r0
 801ce1c:	687b      	ldr	r3, [r7, #4]
 801ce1e:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801ce20:	687b      	ldr	r3, [r7, #4]
 801ce22:	0018      	movs	r0, r3
 801ce24:	f000 f8ce 	bl	801cfc4 <TimerExists>
 801ce28:	1e03      	subs	r3, r0, #0
 801ce2a:	d00b      	beq.n	801ce44 <UTIL_TIMER_SetPeriod+0x54>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801ce2c:	687b      	ldr	r3, [r7, #4]
 801ce2e:	0018      	movs	r0, r3
 801ce30:	f7ff ff66 	bl	801cd00 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801ce34:	230f      	movs	r3, #15
 801ce36:	18fc      	adds	r4, r7, r3
 801ce38:	687b      	ldr	r3, [r7, #4]
 801ce3a:	0018      	movs	r0, r3
 801ce3c:	f7ff fee8 	bl	801cc10 <UTIL_TIMER_Start>
 801ce40:	0003      	movs	r3, r0
 801ce42:	7023      	strb	r3, [r4, #0]
    }
  }
  return ret;
 801ce44:	230f      	movs	r3, #15
 801ce46:	18fb      	adds	r3, r7, r3
 801ce48:	781b      	ldrb	r3, [r3, #0]
}
 801ce4a:	0018      	movs	r0, r3
 801ce4c:	46bd      	mov	sp, r7
 801ce4e:	b005      	add	sp, #20
 801ce50:	bd90      	pop	{r4, r7, pc}
 801ce52:	46c0      	nop			; (mov r8, r8)
 801ce54:	0801f158 	.word	0x0801f158

0801ce58 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801ce58:	b590      	push	{r4, r7, lr}
 801ce5a:	b089      	sub	sp, #36	; 0x24
 801ce5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ce5e:	f3ef 8310 	mrs	r3, PRIMASK
 801ce62:	60bb      	str	r3, [r7, #8]
  return(result);
 801ce64:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801ce66:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801ce68:	b672      	cpsid	i
}
 801ce6a:	46c0      	nop			; (mov r8, r8)

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801ce6c:	4b3a      	ldr	r3, [pc, #232]	; (801cf58 <UTIL_TIMER_IRQ_Handler+0x100>)
 801ce6e:	695b      	ldr	r3, [r3, #20]
 801ce70:	4798      	blx	r3
 801ce72:	0003      	movs	r3, r0
 801ce74:	617b      	str	r3, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801ce76:	4b38      	ldr	r3, [pc, #224]	; (801cf58 <UTIL_TIMER_IRQ_Handler+0x100>)
 801ce78:	691b      	ldr	r3, [r3, #16]
 801ce7a:	4798      	blx	r3
 801ce7c:	0003      	movs	r3, r0
 801ce7e:	613b      	str	r3, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801ce80:	693a      	ldr	r2, [r7, #16]
 801ce82:	697b      	ldr	r3, [r7, #20]
 801ce84:	1ad3      	subs	r3, r2, r3
 801ce86:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801ce88:	4b34      	ldr	r3, [pc, #208]	; (801cf5c <UTIL_TIMER_IRQ_Handler+0x104>)
 801ce8a:	681b      	ldr	r3, [r3, #0]
 801ce8c:	2b00      	cmp	r3, #0
 801ce8e:	d038      	beq.n	801cf02 <UTIL_TIMER_IRQ_Handler+0xaa>
  {
    cur = TimerListHead;
 801ce90:	4b32      	ldr	r3, [pc, #200]	; (801cf5c <UTIL_TIMER_IRQ_Handler+0x104>)
 801ce92:	681b      	ldr	r3, [r3, #0]
 801ce94:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801ce96:	69fb      	ldr	r3, [r7, #28]
 801ce98:	681b      	ldr	r3, [r3, #0]
 801ce9a:	68fa      	ldr	r2, [r7, #12]
 801ce9c:	429a      	cmp	r2, r3
 801ce9e:	d206      	bcs.n	801ceae <UTIL_TIMER_IRQ_Handler+0x56>
      {
        cur->Timestamp -= DeltaContext;
 801cea0:	69fb      	ldr	r3, [r7, #28]
 801cea2:	681a      	ldr	r2, [r3, #0]
 801cea4:	68fb      	ldr	r3, [r7, #12]
 801cea6:	1ad2      	subs	r2, r2, r3
 801cea8:	69fb      	ldr	r3, [r7, #28]
 801ceaa:	601a      	str	r2, [r3, #0]
 801ceac:	e002      	b.n	801ceb4 <UTIL_TIMER_IRQ_Handler+0x5c>
      }
      else
      {
        cur->Timestamp = 0;
 801ceae:	69fb      	ldr	r3, [r7, #28]
 801ceb0:	2200      	movs	r2, #0
 801ceb2:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801ceb4:	69fb      	ldr	r3, [r7, #28]
 801ceb6:	695b      	ldr	r3, [r3, #20]
 801ceb8:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801ceba:	69fb      	ldr	r3, [r7, #28]
 801cebc:	2b00      	cmp	r3, #0
 801cebe:	d1ea      	bne.n	801ce96 <UTIL_TIMER_IRQ_Handler+0x3e>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801cec0:	e01f      	b.n	801cf02 <UTIL_TIMER_IRQ_Handler+0xaa>
  {
      cur = TimerListHead;
 801cec2:	4b26      	ldr	r3, [pc, #152]	; (801cf5c <UTIL_TIMER_IRQ_Handler+0x104>)
 801cec4:	681b      	ldr	r3, [r3, #0]
 801cec6:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801cec8:	4b24      	ldr	r3, [pc, #144]	; (801cf5c <UTIL_TIMER_IRQ_Handler+0x104>)
 801ceca:	681b      	ldr	r3, [r3, #0]
 801cecc:	695a      	ldr	r2, [r3, #20]
 801cece:	4b23      	ldr	r3, [pc, #140]	; (801cf5c <UTIL_TIMER_IRQ_Handler+0x104>)
 801ced0:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 801ced2:	69fb      	ldr	r3, [r7, #28]
 801ced4:	2200      	movs	r2, #0
 801ced6:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801ced8:	69fb      	ldr	r3, [r7, #28]
 801ceda:	2200      	movs	r2, #0
 801cedc:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801cede:	69fb      	ldr	r3, [r7, #28]
 801cee0:	68da      	ldr	r2, [r3, #12]
 801cee2:	69fb      	ldr	r3, [r7, #28]
 801cee4:	691b      	ldr	r3, [r3, #16]
 801cee6:	0018      	movs	r0, r3
 801cee8:	4790      	blx	r2
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801ceea:	69fb      	ldr	r3, [r7, #28]
 801ceec:	7adb      	ldrb	r3, [r3, #11]
 801ceee:	2b01      	cmp	r3, #1
 801cef0:	d107      	bne.n	801cf02 <UTIL_TIMER_IRQ_Handler+0xaa>
 801cef2:	69fb      	ldr	r3, [r7, #28]
 801cef4:	7a9b      	ldrb	r3, [r3, #10]
 801cef6:	2b00      	cmp	r3, #0
 801cef8:	d103      	bne.n	801cf02 <UTIL_TIMER_IRQ_Handler+0xaa>
      {
        (void)UTIL_TIMER_Start(cur);
 801cefa:	69fb      	ldr	r3, [r7, #28]
 801cefc:	0018      	movs	r0, r3
 801cefe:	f7ff fe87 	bl	801cc10 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801cf02:	4b16      	ldr	r3, [pc, #88]	; (801cf5c <UTIL_TIMER_IRQ_Handler+0x104>)
 801cf04:	681b      	ldr	r3, [r3, #0]
 801cf06:	2b00      	cmp	r3, #0
 801cf08:	d00d      	beq.n	801cf26 <UTIL_TIMER_IRQ_Handler+0xce>
 801cf0a:	4b14      	ldr	r3, [pc, #80]	; (801cf5c <UTIL_TIMER_IRQ_Handler+0x104>)
 801cf0c:	681b      	ldr	r3, [r3, #0]
 801cf0e:	681b      	ldr	r3, [r3, #0]
 801cf10:	2b00      	cmp	r3, #0
 801cf12:	d0d6      	beq.n	801cec2 <UTIL_TIMER_IRQ_Handler+0x6a>
 801cf14:	4b11      	ldr	r3, [pc, #68]	; (801cf5c <UTIL_TIMER_IRQ_Handler+0x104>)
 801cf16:	681b      	ldr	r3, [r3, #0]
 801cf18:	681c      	ldr	r4, [r3, #0]
 801cf1a:	4b0f      	ldr	r3, [pc, #60]	; (801cf58 <UTIL_TIMER_IRQ_Handler+0x100>)
 801cf1c:	699b      	ldr	r3, [r3, #24]
 801cf1e:	4798      	blx	r3
 801cf20:	0003      	movs	r3, r0
 801cf22:	429c      	cmp	r4, r3
 801cf24:	d3cd      	bcc.n	801cec2 <UTIL_TIMER_IRQ_Handler+0x6a>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801cf26:	4b0d      	ldr	r3, [pc, #52]	; (801cf5c <UTIL_TIMER_IRQ_Handler+0x104>)
 801cf28:	681b      	ldr	r3, [r3, #0]
 801cf2a:	2b00      	cmp	r3, #0
 801cf2c:	d009      	beq.n	801cf42 <UTIL_TIMER_IRQ_Handler+0xea>
 801cf2e:	4b0b      	ldr	r3, [pc, #44]	; (801cf5c <UTIL_TIMER_IRQ_Handler+0x104>)
 801cf30:	681b      	ldr	r3, [r3, #0]
 801cf32:	7a1b      	ldrb	r3, [r3, #8]
 801cf34:	2b00      	cmp	r3, #0
 801cf36:	d104      	bne.n	801cf42 <UTIL_TIMER_IRQ_Handler+0xea>
  {
    TimerSetTimeout( TimerListHead );
 801cf38:	4b08      	ldr	r3, [pc, #32]	; (801cf5c <UTIL_TIMER_IRQ_Handler+0x104>)
 801cf3a:	681b      	ldr	r3, [r3, #0]
 801cf3c:	0018      	movs	r0, r3
 801cf3e:	f000 f85d 	bl	801cffc <TimerSetTimeout>
 801cf42:	69bb      	ldr	r3, [r7, #24]
 801cf44:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cf46:	687b      	ldr	r3, [r7, #4]
 801cf48:	f383 8810 	msr	PRIMASK, r3
}
 801cf4c:	46c0      	nop			; (mov r8, r8)
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801cf4e:	46c0      	nop			; (mov r8, r8)
 801cf50:	46bd      	mov	sp, r7
 801cf52:	b009      	add	sp, #36	; 0x24
 801cf54:	bd90      	pop	{r4, r7, pc}
 801cf56:	46c0      	nop			; (mov r8, r8)
 801cf58:	0801f158 	.word	0x0801f158
 801cf5c:	20001344 	.word	0x20001344

0801cf60 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801cf60:	b580      	push	{r7, lr}
 801cf62:	b082      	sub	sp, #8
 801cf64:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801cf66:	4b07      	ldr	r3, [pc, #28]	; (801cf84 <UTIL_TIMER_GetCurrentTime+0x24>)
 801cf68:	69db      	ldr	r3, [r3, #28]
 801cf6a:	4798      	blx	r3
 801cf6c:	0003      	movs	r3, r0
 801cf6e:	607b      	str	r3, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801cf70:	4b04      	ldr	r3, [pc, #16]	; (801cf84 <UTIL_TIMER_GetCurrentTime+0x24>)
 801cf72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cf74:	687a      	ldr	r2, [r7, #4]
 801cf76:	0010      	movs	r0, r2
 801cf78:	4798      	blx	r3
 801cf7a:	0003      	movs	r3, r0
}
 801cf7c:	0018      	movs	r0, r3
 801cf7e:	46bd      	mov	sp, r7
 801cf80:	b002      	add	sp, #8
 801cf82:	bd80      	pop	{r7, pc}
 801cf84:	0801f158 	.word	0x0801f158

0801cf88 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801cf88:	b580      	push	{r7, lr}
 801cf8a:	b084      	sub	sp, #16
 801cf8c:	af00      	add	r7, sp, #0
 801cf8e:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801cf90:	4b0b      	ldr	r3, [pc, #44]	; (801cfc0 <UTIL_TIMER_GetElapsedTime+0x38>)
 801cf92:	69db      	ldr	r3, [r3, #28]
 801cf94:	4798      	blx	r3
 801cf96:	0003      	movs	r3, r0
 801cf98:	60fb      	str	r3, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801cf9a:	4b09      	ldr	r3, [pc, #36]	; (801cfc0 <UTIL_TIMER_GetElapsedTime+0x38>)
 801cf9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cf9e:	687a      	ldr	r2, [r7, #4]
 801cfa0:	0010      	movs	r0, r2
 801cfa2:	4798      	blx	r3
 801cfa4:	0003      	movs	r3, r0
 801cfa6:	60bb      	str	r3, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801cfa8:	4b05      	ldr	r3, [pc, #20]	; (801cfc0 <UTIL_TIMER_GetElapsedTime+0x38>)
 801cfaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cfac:	68f9      	ldr	r1, [r7, #12]
 801cfae:	68ba      	ldr	r2, [r7, #8]
 801cfb0:	1a8a      	subs	r2, r1, r2
 801cfb2:	0010      	movs	r0, r2
 801cfb4:	4798      	blx	r3
 801cfb6:	0003      	movs	r3, r0
}
 801cfb8:	0018      	movs	r0, r3
 801cfba:	46bd      	mov	sp, r7
 801cfbc:	b004      	add	sp, #16
 801cfbe:	bd80      	pop	{r7, pc}
 801cfc0:	0801f158 	.word	0x0801f158

0801cfc4 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801cfc4:	b580      	push	{r7, lr}
 801cfc6:	b084      	sub	sp, #16
 801cfc8:	af00      	add	r7, sp, #0
 801cfca:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801cfcc:	4b0a      	ldr	r3, [pc, #40]	; (801cff8 <TimerExists+0x34>)
 801cfce:	681b      	ldr	r3, [r3, #0]
 801cfd0:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801cfd2:	e008      	b.n	801cfe6 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801cfd4:	68fa      	ldr	r2, [r7, #12]
 801cfd6:	687b      	ldr	r3, [r7, #4]
 801cfd8:	429a      	cmp	r2, r3
 801cfda:	d101      	bne.n	801cfe0 <TimerExists+0x1c>
    {
      return true;
 801cfdc:	2301      	movs	r3, #1
 801cfde:	e006      	b.n	801cfee <TimerExists+0x2a>
    }
    cur = cur->Next;
 801cfe0:	68fb      	ldr	r3, [r7, #12]
 801cfe2:	695b      	ldr	r3, [r3, #20]
 801cfe4:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801cfe6:	68fb      	ldr	r3, [r7, #12]
 801cfe8:	2b00      	cmp	r3, #0
 801cfea:	d1f3      	bne.n	801cfd4 <TimerExists+0x10>
  }
  return false;
 801cfec:	2300      	movs	r3, #0
}
 801cfee:	0018      	movs	r0, r3
 801cff0:	46bd      	mov	sp, r7
 801cff2:	b004      	add	sp, #16
 801cff4:	bd80      	pop	{r7, pc}
 801cff6:	46c0      	nop			; (mov r8, r8)
 801cff8:	20001344 	.word	0x20001344

0801cffc <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801cffc:	b590      	push	{r4, r7, lr}
 801cffe:	b085      	sub	sp, #20
 801d000:	af00      	add	r7, sp, #0
 801d002:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801d004:	4b11      	ldr	r3, [pc, #68]	; (801d04c <TimerSetTimeout+0x50>)
 801d006:	6a1b      	ldr	r3, [r3, #32]
 801d008:	4798      	blx	r3
 801d00a:	0003      	movs	r3, r0
 801d00c:	60fb      	str	r3, [r7, #12]
  TimerObject->IsPending = 1;
 801d00e:	687b      	ldr	r3, [r7, #4]
 801d010:	2201      	movs	r2, #1
 801d012:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801d014:	687b      	ldr	r3, [r7, #4]
 801d016:	681c      	ldr	r4, [r3, #0]
 801d018:	4b0c      	ldr	r3, [pc, #48]	; (801d04c <TimerSetTimeout+0x50>)
 801d01a:	699b      	ldr	r3, [r3, #24]
 801d01c:	4798      	blx	r3
 801d01e:	0002      	movs	r2, r0
 801d020:	68fb      	ldr	r3, [r7, #12]
 801d022:	18d3      	adds	r3, r2, r3
 801d024:	429c      	cmp	r4, r3
 801d026:	d207      	bcs.n	801d038 <TimerSetTimeout+0x3c>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801d028:	4b08      	ldr	r3, [pc, #32]	; (801d04c <TimerSetTimeout+0x50>)
 801d02a:	699b      	ldr	r3, [r3, #24]
 801d02c:	4798      	blx	r3
 801d02e:	0002      	movs	r2, r0
 801d030:	68fb      	ldr	r3, [r7, #12]
 801d032:	18d2      	adds	r2, r2, r3
 801d034:	687b      	ldr	r3, [r7, #4]
 801d036:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801d038:	4b04      	ldr	r3, [pc, #16]	; (801d04c <TimerSetTimeout+0x50>)
 801d03a:	689a      	ldr	r2, [r3, #8]
 801d03c:	687b      	ldr	r3, [r7, #4]
 801d03e:	681b      	ldr	r3, [r3, #0]
 801d040:	0018      	movs	r0, r3
 801d042:	4790      	blx	r2
}
 801d044:	46c0      	nop			; (mov r8, r8)
 801d046:	46bd      	mov	sp, r7
 801d048:	b005      	add	sp, #20
 801d04a:	bd90      	pop	{r4, r7, pc}
 801d04c:	0801f158 	.word	0x0801f158

0801d050 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801d050:	b580      	push	{r7, lr}
 801d052:	b084      	sub	sp, #16
 801d054:	af00      	add	r7, sp, #0
 801d056:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801d058:	4b13      	ldr	r3, [pc, #76]	; (801d0a8 <TimerInsertTimer+0x58>)
 801d05a:	681b      	ldr	r3, [r3, #0]
 801d05c:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801d05e:	4b12      	ldr	r3, [pc, #72]	; (801d0a8 <TimerInsertTimer+0x58>)
 801d060:	681b      	ldr	r3, [r3, #0]
 801d062:	695b      	ldr	r3, [r3, #20]
 801d064:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801d066:	e012      	b.n	801d08e <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801d068:	687b      	ldr	r3, [r7, #4]
 801d06a:	681a      	ldr	r2, [r3, #0]
 801d06c:	68bb      	ldr	r3, [r7, #8]
 801d06e:	681b      	ldr	r3, [r3, #0]
 801d070:	429a      	cmp	r2, r3
 801d072:	d905      	bls.n	801d080 <TimerInsertTimer+0x30>
    {
        cur = next;
 801d074:	68bb      	ldr	r3, [r7, #8]
 801d076:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801d078:	68bb      	ldr	r3, [r7, #8]
 801d07a:	695b      	ldr	r3, [r3, #20]
 801d07c:	60bb      	str	r3, [r7, #8]
 801d07e:	e006      	b.n	801d08e <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801d080:	68fb      	ldr	r3, [r7, #12]
 801d082:	687a      	ldr	r2, [r7, #4]
 801d084:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801d086:	687b      	ldr	r3, [r7, #4]
 801d088:	68ba      	ldr	r2, [r7, #8]
 801d08a:	615a      	str	r2, [r3, #20]
        return;
 801d08c:	e009      	b.n	801d0a2 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801d08e:	68fb      	ldr	r3, [r7, #12]
 801d090:	695b      	ldr	r3, [r3, #20]
 801d092:	2b00      	cmp	r3, #0
 801d094:	d1e8      	bne.n	801d068 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801d096:	68fb      	ldr	r3, [r7, #12]
 801d098:	687a      	ldr	r2, [r7, #4]
 801d09a:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801d09c:	687b      	ldr	r3, [r7, #4]
 801d09e:	2200      	movs	r2, #0
 801d0a0:	615a      	str	r2, [r3, #20]
}
 801d0a2:	46bd      	mov	sp, r7
 801d0a4:	b004      	add	sp, #16
 801d0a6:	bd80      	pop	{r7, pc}
 801d0a8:	20001344 	.word	0x20001344

0801d0ac <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801d0ac:	b580      	push	{r7, lr}
 801d0ae:	b084      	sub	sp, #16
 801d0b0:	af00      	add	r7, sp, #0
 801d0b2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801d0b4:	4b0b      	ldr	r3, [pc, #44]	; (801d0e4 <TimerInsertNewHeadTimer+0x38>)
 801d0b6:	681b      	ldr	r3, [r3, #0]
 801d0b8:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801d0ba:	68fb      	ldr	r3, [r7, #12]
 801d0bc:	2b00      	cmp	r3, #0
 801d0be:	d002      	beq.n	801d0c6 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801d0c0:	68fb      	ldr	r3, [r7, #12]
 801d0c2:	2200      	movs	r2, #0
 801d0c4:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801d0c6:	687b      	ldr	r3, [r7, #4]
 801d0c8:	68fa      	ldr	r2, [r7, #12]
 801d0ca:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801d0cc:	4b05      	ldr	r3, [pc, #20]	; (801d0e4 <TimerInsertNewHeadTimer+0x38>)
 801d0ce:	687a      	ldr	r2, [r7, #4]
 801d0d0:	601a      	str	r2, [r3, #0]
  TimerSetTimeout( TimerListHead );
 801d0d2:	4b04      	ldr	r3, [pc, #16]	; (801d0e4 <TimerInsertNewHeadTimer+0x38>)
 801d0d4:	681b      	ldr	r3, [r3, #0]
 801d0d6:	0018      	movs	r0, r3
 801d0d8:	f7ff ff90 	bl	801cffc <TimerSetTimeout>
}
 801d0dc:	46c0      	nop			; (mov r8, r8)
 801d0de:	46bd      	mov	sp, r7
 801d0e0:	b004      	add	sp, #16
 801d0e2:	bd80      	pop	{r7, pc}
 801d0e4:	20001344 	.word	0x20001344

0801d0e8 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801d0e8:	b580      	push	{r7, lr}
 801d0ea:	b084      	sub	sp, #16
 801d0ec:	af00      	add	r7, sp, #0
 801d0ee:	6078      	str	r0, [r7, #4]
  int i = 0;
 801d0f0:	2300      	movs	r3, #0
 801d0f2:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801d0f4:	e00e      	b.n	801d114 <ee_skip_atoi+0x2c>
 801d0f6:	68fa      	ldr	r2, [r7, #12]
 801d0f8:	0013      	movs	r3, r2
 801d0fa:	009b      	lsls	r3, r3, #2
 801d0fc:	189b      	adds	r3, r3, r2
 801d0fe:	005b      	lsls	r3, r3, #1
 801d100:	0018      	movs	r0, r3
 801d102:	687b      	ldr	r3, [r7, #4]
 801d104:	681b      	ldr	r3, [r3, #0]
 801d106:	1c59      	adds	r1, r3, #1
 801d108:	687a      	ldr	r2, [r7, #4]
 801d10a:	6011      	str	r1, [r2, #0]
 801d10c:	781b      	ldrb	r3, [r3, #0]
 801d10e:	18c3      	adds	r3, r0, r3
 801d110:	3b30      	subs	r3, #48	; 0x30
 801d112:	60fb      	str	r3, [r7, #12]
 801d114:	687b      	ldr	r3, [r7, #4]
 801d116:	681b      	ldr	r3, [r3, #0]
 801d118:	781b      	ldrb	r3, [r3, #0]
 801d11a:	2b2f      	cmp	r3, #47	; 0x2f
 801d11c:	d904      	bls.n	801d128 <ee_skip_atoi+0x40>
 801d11e:	687b      	ldr	r3, [r7, #4]
 801d120:	681b      	ldr	r3, [r3, #0]
 801d122:	781b      	ldrb	r3, [r3, #0]
 801d124:	2b39      	cmp	r3, #57	; 0x39
 801d126:	d9e6      	bls.n	801d0f6 <ee_skip_atoi+0xe>
  return i;
 801d128:	68fb      	ldr	r3, [r7, #12]
}
 801d12a:	0018      	movs	r0, r3
 801d12c:	46bd      	mov	sp, r7
 801d12e:	b004      	add	sp, #16
 801d130:	bd80      	pop	{r7, pc}
	...

0801d134 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801d134:	b580      	push	{r7, lr}
 801d136:	b098      	sub	sp, #96	; 0x60
 801d138:	af00      	add	r7, sp, #0
 801d13a:	60f8      	str	r0, [r7, #12]
 801d13c:	60b9      	str	r1, [r7, #8]
 801d13e:	607a      	str	r2, [r7, #4]
 801d140:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801d142:	4b72      	ldr	r3, [pc, #456]	; (801d30c <ee_number+0x1d8>)
 801d144:	681b      	ldr	r3, [r3, #0]
 801d146:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801d148:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d14a:	2240      	movs	r2, #64	; 0x40
 801d14c:	4013      	ands	r3, r2
 801d14e:	d002      	beq.n	801d156 <ee_number+0x22>
 801d150:	4b6f      	ldr	r3, [pc, #444]	; (801d310 <ee_number+0x1dc>)
 801d152:	681b      	ldr	r3, [r3, #0]
 801d154:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801d156:	683b      	ldr	r3, [r7, #0]
 801d158:	2b01      	cmp	r3, #1
 801d15a:	dd02      	ble.n	801d162 <ee_number+0x2e>
 801d15c:	683b      	ldr	r3, [r7, #0]
 801d15e:	2b24      	cmp	r3, #36	; 0x24
 801d160:	dd01      	ble.n	801d166 <ee_number+0x32>
 801d162:	2300      	movs	r3, #0
 801d164:	e0cd      	b.n	801d302 <ee_number+0x1ce>
  
  c = (type & ZEROPAD) ? '0' : ' ';
 801d166:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d168:	2201      	movs	r2, #1
 801d16a:	4013      	ands	r3, r2
 801d16c:	d001      	beq.n	801d172 <ee_number+0x3e>
 801d16e:	2230      	movs	r2, #48	; 0x30
 801d170:	e000      	b.n	801d174 <ee_number+0x40>
 801d172:	2220      	movs	r2, #32
 801d174:	2353      	movs	r3, #83	; 0x53
 801d176:	18fb      	adds	r3, r7, r3
 801d178:	701a      	strb	r2, [r3, #0]
  sign = 0;
 801d17a:	215f      	movs	r1, #95	; 0x5f
 801d17c:	187b      	adds	r3, r7, r1
 801d17e:	2200      	movs	r2, #0
 801d180:	701a      	strb	r2, [r3, #0]
  if (type & SIGN)
 801d182:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d184:	2202      	movs	r2, #2
 801d186:	4013      	ands	r3, r2
 801d188:	d00b      	beq.n	801d1a2 <ee_number+0x6e>
  {
    if (num < 0)
 801d18a:	687b      	ldr	r3, [r7, #4]
 801d18c:	2b00      	cmp	r3, #0
 801d18e:	da08      	bge.n	801d1a2 <ee_number+0x6e>
    {
      sign = '-';
 801d190:	187b      	adds	r3, r7, r1
 801d192:	222d      	movs	r2, #45	; 0x2d
 801d194:	701a      	strb	r2, [r3, #0]
      num = -num;
 801d196:	687b      	ldr	r3, [r7, #4]
 801d198:	425b      	negs	r3, r3
 801d19a:	607b      	str	r3, [r7, #4]
      size--;
 801d19c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d19e:	3b01      	subs	r3, #1
 801d1a0:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif
  
  i = 0;
 801d1a2:	2300      	movs	r3, #0
 801d1a4:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 801d1a6:	687b      	ldr	r3, [r7, #4]
 801d1a8:	2b00      	cmp	r3, #0
 801d1aa:	d120      	bne.n	801d1ee <ee_number+0xba>
    tmp[i++] = '0';
 801d1ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d1ae:	1c5a      	adds	r2, r3, #1
 801d1b0:	657a      	str	r2, [r7, #84]	; 0x54
 801d1b2:	2210      	movs	r2, #16
 801d1b4:	18ba      	adds	r2, r7, r2
 801d1b6:	2130      	movs	r1, #48	; 0x30
 801d1b8:	54d1      	strb	r1, [r2, r3]
 801d1ba:	e01b      	b.n	801d1f4 <ee_number+0xc0>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801d1bc:	687b      	ldr	r3, [r7, #4]
 801d1be:	683a      	ldr	r2, [r7, #0]
 801d1c0:	0011      	movs	r1, r2
 801d1c2:	0018      	movs	r0, r3
 801d1c4:	f7e3 f82e 	bl	8000224 <__aeabi_uidivmod>
 801d1c8:	000b      	movs	r3, r1
 801d1ca:	001a      	movs	r2, r3
 801d1cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801d1ce:	189a      	adds	r2, r3, r2
 801d1d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d1d2:	1c59      	adds	r1, r3, #1
 801d1d4:	6579      	str	r1, [r7, #84]	; 0x54
 801d1d6:	7811      	ldrb	r1, [r2, #0]
 801d1d8:	2210      	movs	r2, #16
 801d1da:	18ba      	adds	r2, r7, r2
 801d1dc:	54d1      	strb	r1, [r2, r3]
      num = ((unsigned long) num) / (unsigned) base;
 801d1de:	687b      	ldr	r3, [r7, #4]
 801d1e0:	683a      	ldr	r2, [r7, #0]
 801d1e2:	0011      	movs	r1, r2
 801d1e4:	0018      	movs	r0, r3
 801d1e6:	f7e2 ff97 	bl	8000118 <__udivsi3>
 801d1ea:	0003      	movs	r3, r0
 801d1ec:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801d1ee:	687b      	ldr	r3, [r7, #4]
 801d1f0:	2b00      	cmp	r3, #0
 801d1f2:	d1e3      	bne.n	801d1bc <ee_number+0x88>
    }
  }

  if (i > precision) precision = i;
 801d1f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d1f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d1f8:	429a      	cmp	r2, r3
 801d1fa:	dd01      	ble.n	801d200 <ee_number+0xcc>
 801d1fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d1fe:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 801d200:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801d202:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d204:	1ad3      	subs	r3, r2, r3
 801d206:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801d208:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d20a:	2201      	movs	r2, #1
 801d20c:	4013      	ands	r3, r2
 801d20e:	d112      	bne.n	801d236 <ee_number+0x102>
 801d210:	e00c      	b.n	801d22c <ee_number+0xf8>
 801d212:	68fb      	ldr	r3, [r7, #12]
 801d214:	1c5a      	adds	r2, r3, #1
 801d216:	60fa      	str	r2, [r7, #12]
 801d218:	2220      	movs	r2, #32
 801d21a:	701a      	strb	r2, [r3, #0]
 801d21c:	68bb      	ldr	r3, [r7, #8]
 801d21e:	3b01      	subs	r3, #1
 801d220:	60bb      	str	r3, [r7, #8]
 801d222:	68bb      	ldr	r3, [r7, #8]
 801d224:	2b00      	cmp	r3, #0
 801d226:	d101      	bne.n	801d22c <ee_number+0xf8>
 801d228:	68fb      	ldr	r3, [r7, #12]
 801d22a:	e06a      	b.n	801d302 <ee_number+0x1ce>
 801d22c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d22e:	1e5a      	subs	r2, r3, #1
 801d230:	66ba      	str	r2, [r7, #104]	; 0x68
 801d232:	2b00      	cmp	r3, #0
 801d234:	dced      	bgt.n	801d212 <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801d236:	215f      	movs	r1, #95	; 0x5f
 801d238:	187b      	adds	r3, r7, r1
 801d23a:	781b      	ldrb	r3, [r3, #0]
 801d23c:	2b00      	cmp	r3, #0
 801d23e:	d01c      	beq.n	801d27a <ee_number+0x146>
 801d240:	68fb      	ldr	r3, [r7, #12]
 801d242:	1c5a      	adds	r2, r3, #1
 801d244:	60fa      	str	r2, [r7, #12]
 801d246:	187a      	adds	r2, r7, r1
 801d248:	7812      	ldrb	r2, [r2, #0]
 801d24a:	701a      	strb	r2, [r3, #0]
 801d24c:	68bb      	ldr	r3, [r7, #8]
 801d24e:	3b01      	subs	r3, #1
 801d250:	60bb      	str	r3, [r7, #8]
 801d252:	68bb      	ldr	r3, [r7, #8]
 801d254:	2b00      	cmp	r3, #0
 801d256:	d110      	bne.n	801d27a <ee_number+0x146>
 801d258:	68fb      	ldr	r3, [r7, #12]
 801d25a:	e052      	b.n	801d302 <ee_number+0x1ce>
    }
  }
#endif
  
#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801d25c:	68fb      	ldr	r3, [r7, #12]
 801d25e:	1c5a      	adds	r2, r3, #1
 801d260:	60fa      	str	r2, [r7, #12]
 801d262:	2253      	movs	r2, #83	; 0x53
 801d264:	18ba      	adds	r2, r7, r2
 801d266:	7812      	ldrb	r2, [r2, #0]
 801d268:	701a      	strb	r2, [r3, #0]
 801d26a:	68bb      	ldr	r3, [r7, #8]
 801d26c:	3b01      	subs	r3, #1
 801d26e:	60bb      	str	r3, [r7, #8]
 801d270:	68bb      	ldr	r3, [r7, #8]
 801d272:	2b00      	cmp	r3, #0
 801d274:	d101      	bne.n	801d27a <ee_number+0x146>
 801d276:	68fb      	ldr	r3, [r7, #12]
 801d278:	e043      	b.n	801d302 <ee_number+0x1ce>
 801d27a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d27c:	1e5a      	subs	r2, r3, #1
 801d27e:	66ba      	str	r2, [r7, #104]	; 0x68
 801d280:	2b00      	cmp	r3, #0
 801d282:	dceb      	bgt.n	801d25c <ee_number+0x128>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801d284:	e00c      	b.n	801d2a0 <ee_number+0x16c>
 801d286:	68fb      	ldr	r3, [r7, #12]
 801d288:	1c5a      	adds	r2, r3, #1
 801d28a:	60fa      	str	r2, [r7, #12]
 801d28c:	2230      	movs	r2, #48	; 0x30
 801d28e:	701a      	strb	r2, [r3, #0]
 801d290:	68bb      	ldr	r3, [r7, #8]
 801d292:	3b01      	subs	r3, #1
 801d294:	60bb      	str	r3, [r7, #8]
 801d296:	68bb      	ldr	r3, [r7, #8]
 801d298:	2b00      	cmp	r3, #0
 801d29a:	d101      	bne.n	801d2a0 <ee_number+0x16c>
 801d29c:	68fb      	ldr	r3, [r7, #12]
 801d29e:	e030      	b.n	801d302 <ee_number+0x1ce>
 801d2a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d2a2:	1e5a      	subs	r2, r3, #1
 801d2a4:	66fa      	str	r2, [r7, #108]	; 0x6c
 801d2a6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d2a8:	429a      	cmp	r2, r3
 801d2aa:	dbec      	blt.n	801d286 <ee_number+0x152>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801d2ac:	e010      	b.n	801d2d0 <ee_number+0x19c>
 801d2ae:	68fb      	ldr	r3, [r7, #12]
 801d2b0:	1c5a      	adds	r2, r3, #1
 801d2b2:	60fa      	str	r2, [r7, #12]
 801d2b4:	2210      	movs	r2, #16
 801d2b6:	18b9      	adds	r1, r7, r2
 801d2b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d2ba:	188a      	adds	r2, r1, r2
 801d2bc:	7812      	ldrb	r2, [r2, #0]
 801d2be:	701a      	strb	r2, [r3, #0]
 801d2c0:	68bb      	ldr	r3, [r7, #8]
 801d2c2:	3b01      	subs	r3, #1
 801d2c4:	60bb      	str	r3, [r7, #8]
 801d2c6:	68bb      	ldr	r3, [r7, #8]
 801d2c8:	2b00      	cmp	r3, #0
 801d2ca:	d101      	bne.n	801d2d0 <ee_number+0x19c>
 801d2cc:	68fb      	ldr	r3, [r7, #12]
 801d2ce:	e018      	b.n	801d302 <ee_number+0x1ce>
 801d2d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d2d2:	1e5a      	subs	r2, r3, #1
 801d2d4:	657a      	str	r2, [r7, #84]	; 0x54
 801d2d6:	2b00      	cmp	r3, #0
 801d2d8:	dce9      	bgt.n	801d2ae <ee_number+0x17a>
  while (size-- > 0) ASSIGN_STR(' ');
 801d2da:	e00c      	b.n	801d2f6 <ee_number+0x1c2>
 801d2dc:	68fb      	ldr	r3, [r7, #12]
 801d2de:	1c5a      	adds	r2, r3, #1
 801d2e0:	60fa      	str	r2, [r7, #12]
 801d2e2:	2220      	movs	r2, #32
 801d2e4:	701a      	strb	r2, [r3, #0]
 801d2e6:	68bb      	ldr	r3, [r7, #8]
 801d2e8:	3b01      	subs	r3, #1
 801d2ea:	60bb      	str	r3, [r7, #8]
 801d2ec:	68bb      	ldr	r3, [r7, #8]
 801d2ee:	2b00      	cmp	r3, #0
 801d2f0:	d101      	bne.n	801d2f6 <ee_number+0x1c2>
 801d2f2:	68fb      	ldr	r3, [r7, #12]
 801d2f4:	e005      	b.n	801d302 <ee_number+0x1ce>
 801d2f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d2f8:	1e5a      	subs	r2, r3, #1
 801d2fa:	66ba      	str	r2, [r7, #104]	; 0x68
 801d2fc:	2b00      	cmp	r3, #0
 801d2fe:	dced      	bgt.n	801d2dc <ee_number+0x1a8>

  return str;
 801d300:	68fb      	ldr	r3, [r7, #12]
}
 801d302:	0018      	movs	r0, r3
 801d304:	46bd      	mov	sp, r7
 801d306:	b018      	add	sp, #96	; 0x60
 801d308:	bd80      	pop	{r7, pc}
 801d30a:	46c0      	nop			; (mov r8, r8)
 801d30c:	200001d0 	.word	0x200001d0
 801d310:	200001d4 	.word	0x200001d4

0801d314 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801d314:	b590      	push	{r4, r7, lr}
 801d316:	b093      	sub	sp, #76	; 0x4c
 801d318:	af04      	add	r7, sp, #16
 801d31a:	60f8      	str	r0, [r7, #12]
 801d31c:	60b9      	str	r1, [r7, #8]
 801d31e:	607a      	str	r2, [r7, #4]
 801d320:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801d322:	68bb      	ldr	r3, [r7, #8]
 801d324:	2b00      	cmp	r3, #0
 801d326:	dc01      	bgt.n	801d32c <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801d328:	2300      	movs	r3, #0
 801d32a:	e104      	b.n	801d536 <tiny_vsnprintf_like+0x222>
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801d32c:	68fb      	ldr	r3, [r7, #12]
 801d32e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d330:	e0ec      	b.n	801d50c <tiny_vsnprintf_like+0x1f8>
  {
    CHECK_STR_SIZE(buf, str, size);
 801d332:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d334:	68fb      	ldr	r3, [r7, #12]
 801d336:	1ad2      	subs	r2, r2, r3
 801d338:	68bb      	ldr	r3, [r7, #8]
 801d33a:	3b01      	subs	r3, #1
 801d33c:	429a      	cmp	r2, r3
 801d33e:	db00      	blt.n	801d342 <tiny_vsnprintf_like+0x2e>
 801d340:	e0f2      	b.n	801d528 <tiny_vsnprintf_like+0x214>
    
    if (*fmt != '%')
 801d342:	687b      	ldr	r3, [r7, #4]
 801d344:	781b      	ldrb	r3, [r3, #0]
 801d346:	2b25      	cmp	r3, #37	; 0x25
 801d348:	d006      	beq.n	801d358 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801d34a:	687a      	ldr	r2, [r7, #4]
 801d34c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d34e:	1c59      	adds	r1, r3, #1
 801d350:	62f9      	str	r1, [r7, #44]	; 0x2c
 801d352:	7812      	ldrb	r2, [r2, #0]
 801d354:	701a      	strb	r2, [r3, #0]
      continue;
 801d356:	e0d6      	b.n	801d506 <tiny_vsnprintf_like+0x1f2>
    }
                  
    // Process flags
    flags = 0;
 801d358:	2300      	movs	r3, #0
 801d35a:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801d35c:	687b      	ldr	r3, [r7, #4]
 801d35e:	3301      	adds	r3, #1
 801d360:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801d362:	687b      	ldr	r3, [r7, #4]
 801d364:	781b      	ldrb	r3, [r3, #0]
 801d366:	2b30      	cmp	r3, #48	; 0x30
 801d368:	d103      	bne.n	801d372 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801d36a:	6a3b      	ldr	r3, [r7, #32]
 801d36c:	2201      	movs	r2, #1
 801d36e:	4313      	orrs	r3, r2
 801d370:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif
    
    // Get field width
    field_width = -1;
 801d372:	2301      	movs	r3, #1
 801d374:	425b      	negs	r3, r3
 801d376:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801d378:	687b      	ldr	r3, [r7, #4]
 801d37a:	781b      	ldrb	r3, [r3, #0]
 801d37c:	2b2f      	cmp	r3, #47	; 0x2f
 801d37e:	d909      	bls.n	801d394 <tiny_vsnprintf_like+0x80>
 801d380:	687b      	ldr	r3, [r7, #4]
 801d382:	781b      	ldrb	r3, [r3, #0]
 801d384:	2b39      	cmp	r3, #57	; 0x39
 801d386:	d805      	bhi.n	801d394 <tiny_vsnprintf_like+0x80>
      field_width = ee_skip_atoi(&fmt);
 801d388:	1d3b      	adds	r3, r7, #4
 801d38a:	0018      	movs	r0, r3
 801d38c:	f7ff feac 	bl	801d0e8 <ee_skip_atoi>
 801d390:	0003      	movs	r3, r0
 801d392:	61fb      	str	r3, [r7, #28]
      }
    }
#endif
    
    // Get the precision
    precision = -1;
 801d394:	2301      	movs	r3, #1
 801d396:	425b      	negs	r3, r3
 801d398:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif
    
    // Get the conversion qualifier
    qualifier = -1;
 801d39a:	2301      	movs	r3, #1
 801d39c:	425b      	negs	r3, r3
 801d39e:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif
    
    // Default base
    base = 10;
 801d3a0:	230a      	movs	r3, #10
 801d3a2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 801d3a4:	687b      	ldr	r3, [r7, #4]
 801d3a6:	781b      	ldrb	r3, [r3, #0]
 801d3a8:	3b58      	subs	r3, #88	; 0x58
 801d3aa:	2b20      	cmp	r3, #32
 801d3ac:	d854      	bhi.n	801d458 <tiny_vsnprintf_like+0x144>
 801d3ae:	009a      	lsls	r2, r3, #2
 801d3b0:	4b63      	ldr	r3, [pc, #396]	; (801d540 <tiny_vsnprintf_like+0x22c>)
 801d3b2:	18d3      	adds	r3, r2, r3
 801d3b4:	681b      	ldr	r3, [r3, #0]
 801d3b6:	469f      	mov	pc, r3
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801d3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d3ba:	1c5a      	adds	r2, r3, #1
 801d3bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d3be:	2220      	movs	r2, #32
 801d3c0:	701a      	strb	r2, [r3, #0]
 801d3c2:	69fb      	ldr	r3, [r7, #28]
 801d3c4:	3b01      	subs	r3, #1
 801d3c6:	61fb      	str	r3, [r7, #28]
 801d3c8:	69fb      	ldr	r3, [r7, #28]
 801d3ca:	2b00      	cmp	r3, #0
 801d3cc:	dcf4      	bgt.n	801d3b8 <tiny_vsnprintf_like+0xa4>
        *str++ = (unsigned char) va_arg(args, int);
 801d3ce:	683b      	ldr	r3, [r7, #0]
 801d3d0:	1d1a      	adds	r2, r3, #4
 801d3d2:	603a      	str	r2, [r7, #0]
 801d3d4:	6819      	ldr	r1, [r3, #0]
 801d3d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d3d8:	1c5a      	adds	r2, r3, #1
 801d3da:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d3dc:	b2ca      	uxtb	r2, r1
 801d3de:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801d3e0:	e091      	b.n	801d506 <tiny_vsnprintf_like+0x1f2>

      case 's':
        s = va_arg(args, char *);
 801d3e2:	683b      	ldr	r3, [r7, #0]
 801d3e4:	1d1a      	adds	r2, r3, #4
 801d3e6:	603a      	str	r2, [r7, #0]
 801d3e8:	681b      	ldr	r3, [r3, #0]
 801d3ea:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801d3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d3ee:	2b00      	cmp	r3, #0
 801d3f0:	d101      	bne.n	801d3f6 <tiny_vsnprintf_like+0xe2>
 801d3f2:	4b54      	ldr	r3, [pc, #336]	; (801d544 <tiny_vsnprintf_like+0x230>)
 801d3f4:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801d3f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d3f8:	0018      	movs	r0, r3
 801d3fa:	f7e2 fe85 	bl	8000108 <strlen>
 801d3fe:	0003      	movs	r3, r0
 801d400:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801d402:	e004      	b.n	801d40e <tiny_vsnprintf_like+0xfa>
 801d404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d406:	1c5a      	adds	r2, r3, #1
 801d408:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d40a:	2220      	movs	r2, #32
 801d40c:	701a      	strb	r2, [r3, #0]
 801d40e:	69fb      	ldr	r3, [r7, #28]
 801d410:	1e5a      	subs	r2, r3, #1
 801d412:	61fa      	str	r2, [r7, #28]
 801d414:	693a      	ldr	r2, [r7, #16]
 801d416:	429a      	cmp	r2, r3
 801d418:	dbf4      	blt.n	801d404 <tiny_vsnprintf_like+0xf0>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801d41a:	2300      	movs	r3, #0
 801d41c:	62bb      	str	r3, [r7, #40]	; 0x28
 801d41e:	e00a      	b.n	801d436 <tiny_vsnprintf_like+0x122>
 801d420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d422:	1c53      	adds	r3, r2, #1
 801d424:	627b      	str	r3, [r7, #36]	; 0x24
 801d426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d428:	1c59      	adds	r1, r3, #1
 801d42a:	62f9      	str	r1, [r7, #44]	; 0x2c
 801d42c:	7812      	ldrb	r2, [r2, #0]
 801d42e:	701a      	strb	r2, [r3, #0]
 801d430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d432:	3301      	adds	r3, #1
 801d434:	62bb      	str	r3, [r7, #40]	; 0x28
 801d436:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d438:	693b      	ldr	r3, [r7, #16]
 801d43a:	429a      	cmp	r2, r3
 801d43c:	dbf0      	blt.n	801d420 <tiny_vsnprintf_like+0x10c>
#ifdef TINY_PRINTF
#else        
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801d43e:	e062      	b.n	801d506 <tiny_vsnprintf_like+0x1f2>
        base = 8;
        break;
#endif
      
      case 'X':
        flags |= UPPERCASE;
 801d440:	6a3b      	ldr	r3, [r7, #32]
 801d442:	2240      	movs	r2, #64	; 0x40
 801d444:	4313      	orrs	r3, r2
 801d446:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801d448:	2310      	movs	r3, #16
 801d44a:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801d44c:	e02d      	b.n	801d4aa <tiny_vsnprintf_like+0x196>

      case 'd':
      case 'i':
        flags |= SIGN;
 801d44e:	6a3b      	ldr	r3, [r7, #32]
 801d450:	2202      	movs	r2, #2
 801d452:	4313      	orrs	r3, r2
 801d454:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801d456:	e025      	b.n	801d4a4 <tiny_vsnprintf_like+0x190>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801d458:	687b      	ldr	r3, [r7, #4]
 801d45a:	781b      	ldrb	r3, [r3, #0]
 801d45c:	2b25      	cmp	r3, #37	; 0x25
 801d45e:	d004      	beq.n	801d46a <tiny_vsnprintf_like+0x156>
 801d460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d462:	1c5a      	adds	r2, r3, #1
 801d464:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d466:	2225      	movs	r2, #37	; 0x25
 801d468:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801d46a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d46c:	68fb      	ldr	r3, [r7, #12]
 801d46e:	1ad2      	subs	r2, r2, r3
 801d470:	68bb      	ldr	r3, [r7, #8]
 801d472:	3b01      	subs	r3, #1
 801d474:	429a      	cmp	r2, r3
 801d476:	da17      	bge.n	801d4a8 <tiny_vsnprintf_like+0x194>
        if (*fmt)
 801d478:	687b      	ldr	r3, [r7, #4]
 801d47a:	781b      	ldrb	r3, [r3, #0]
 801d47c:	2b00      	cmp	r3, #0
 801d47e:	d006      	beq.n	801d48e <tiny_vsnprintf_like+0x17a>
          *str++ = *fmt;
 801d480:	687a      	ldr	r2, [r7, #4]
 801d482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d484:	1c59      	adds	r1, r3, #1
 801d486:	62f9      	str	r1, [r7, #44]	; 0x2c
 801d488:	7812      	ldrb	r2, [r2, #0]
 801d48a:	701a      	strb	r2, [r3, #0]
 801d48c:	e002      	b.n	801d494 <tiny_vsnprintf_like+0x180>
        else
          --fmt;
 801d48e:	687b      	ldr	r3, [r7, #4]
 801d490:	3b01      	subs	r3, #1
 801d492:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801d494:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d496:	68fb      	ldr	r3, [r7, #12]
 801d498:	1ad2      	subs	r2, r2, r3
 801d49a:	68bb      	ldr	r3, [r7, #8]
 801d49c:	3b01      	subs	r3, #1
 801d49e:	429a      	cmp	r2, r3
 801d4a0:	db30      	blt.n	801d504 <tiny_vsnprintf_like+0x1f0>
 801d4a2:	e002      	b.n	801d4aa <tiny_vsnprintf_like+0x196>
        break;
 801d4a4:	46c0      	nop			; (mov r8, r8)
 801d4a6:	e000      	b.n	801d4aa <tiny_vsnprintf_like+0x196>
        CHECK_STR_SIZE(buf, str, size);
 801d4a8:	46c0      	nop			; (mov r8, r8)
        continue;
    }

    if (qualifier == 'l')
 801d4aa:	697b      	ldr	r3, [r7, #20]
 801d4ac:	2b6c      	cmp	r3, #108	; 0x6c
 801d4ae:	d105      	bne.n	801d4bc <tiny_vsnprintf_like+0x1a8>
      num = va_arg(args, unsigned long);
 801d4b0:	683b      	ldr	r3, [r7, #0]
 801d4b2:	1d1a      	adds	r2, r3, #4
 801d4b4:	603a      	str	r2, [r7, #0]
 801d4b6:	681b      	ldr	r3, [r3, #0]
 801d4b8:	637b      	str	r3, [r7, #52]	; 0x34
 801d4ba:	e00e      	b.n	801d4da <tiny_vsnprintf_like+0x1c6>
    else if (flags & SIGN)
 801d4bc:	6a3b      	ldr	r3, [r7, #32]
 801d4be:	2202      	movs	r2, #2
 801d4c0:	4013      	ands	r3, r2
 801d4c2:	d005      	beq.n	801d4d0 <tiny_vsnprintf_like+0x1bc>
      num = va_arg(args, int);
 801d4c4:	683b      	ldr	r3, [r7, #0]
 801d4c6:	1d1a      	adds	r2, r3, #4
 801d4c8:	603a      	str	r2, [r7, #0]
 801d4ca:	681b      	ldr	r3, [r3, #0]
 801d4cc:	637b      	str	r3, [r7, #52]	; 0x34
 801d4ce:	e004      	b.n	801d4da <tiny_vsnprintf_like+0x1c6>
    else
      num = va_arg(args, unsigned int);
 801d4d0:	683b      	ldr	r3, [r7, #0]
 801d4d2:	1d1a      	adds	r2, r3, #4
 801d4d4:	603a      	str	r2, [r7, #0]
 801d4d6:	681b      	ldr	r3, [r3, #0]
 801d4d8:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801d4da:	68bb      	ldr	r3, [r7, #8]
 801d4dc:	1e5a      	subs	r2, r3, #1
 801d4de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801d4e0:	68fb      	ldr	r3, [r7, #12]
 801d4e2:	1acb      	subs	r3, r1, r3
 801d4e4:	1ad1      	subs	r1, r2, r3
 801d4e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d4e8:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 801d4ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801d4ec:	6a3b      	ldr	r3, [r7, #32]
 801d4ee:	9302      	str	r3, [sp, #8]
 801d4f0:	69bb      	ldr	r3, [r7, #24]
 801d4f2:	9301      	str	r3, [sp, #4]
 801d4f4:	69fb      	ldr	r3, [r7, #28]
 801d4f6:	9300      	str	r3, [sp, #0]
 801d4f8:	0023      	movs	r3, r4
 801d4fa:	f7ff fe1b 	bl	801d134 <ee_number>
 801d4fe:	0003      	movs	r3, r0
 801d500:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d502:	e000      	b.n	801d506 <tiny_vsnprintf_like+0x1f2>
        continue;
 801d504:	46c0      	nop			; (mov r8, r8)
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801d506:	687b      	ldr	r3, [r7, #4]
 801d508:	3301      	adds	r3, #1
 801d50a:	607b      	str	r3, [r7, #4]
 801d50c:	687b      	ldr	r3, [r7, #4]
 801d50e:	781b      	ldrb	r3, [r3, #0]
 801d510:	2b00      	cmp	r3, #0
 801d512:	d000      	beq.n	801d516 <tiny_vsnprintf_like+0x202>
 801d514:	e70d      	b.n	801d332 <tiny_vsnprintf_like+0x1e>
 801d516:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d518:	68fb      	ldr	r3, [r7, #12]
 801d51a:	1ad2      	subs	r2, r2, r3
 801d51c:	68bb      	ldr	r3, [r7, #8]
 801d51e:	3b01      	subs	r3, #1
 801d520:	429a      	cmp	r2, r3
 801d522:	db00      	blt.n	801d526 <tiny_vsnprintf_like+0x212>
 801d524:	e705      	b.n	801d332 <tiny_vsnprintf_like+0x1e>
 801d526:	e000      	b.n	801d52a <tiny_vsnprintf_like+0x216>
    CHECK_STR_SIZE(buf, str, size);
 801d528:	46c0      	nop			; (mov r8, r8)
  }

  *str = '\0';
 801d52a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d52c:	2200      	movs	r2, #0
 801d52e:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801d530:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d532:	68fb      	ldr	r3, [r7, #12]
 801d534:	1ad3      	subs	r3, r2, r3
}
 801d536:	0018      	movs	r0, r3
 801d538:	46bd      	mov	sp, r7
 801d53a:	b00f      	add	sp, #60	; 0x3c
 801d53c:	bd90      	pop	{r4, r7, pc}
 801d53e:	46c0      	nop			; (mov r8, r8)
 801d540:	08020000 	.word	0x08020000
 801d544:	0801fff8 	.word	0x0801fff8

0801d548 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 801d548:	b580      	push	{r7, lr}
 801d54a:	b082      	sub	sp, #8
 801d54c:	af00      	add	r7, sp, #0
 801d54e:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 801d550:	687b      	ldr	r3, [r7, #4]
 801d552:	2203      	movs	r2, #3
 801d554:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 801d556:	687b      	ldr	r3, [r7, #4]
 801d558:	2200      	movs	r2, #0
 801d55a:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 801d55c:	687b      	ldr	r3, [r7, #4]
 801d55e:	2203      	movs	r2, #3
 801d560:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 801d562:	687b      	ldr	r3, [r7, #4]
 801d564:	2203      	movs	r2, #3
 801d566:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 801d568:	687b      	ldr	r3, [r7, #4]
 801d56a:	2203      	movs	r2, #3
 801d56c:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 801d56e:	687b      	ldr	r3, [r7, #4]
 801d570:	2203      	movs	r2, #3
 801d572:	715a      	strb	r2, [r3, #5]
}
 801d574:	46c0      	nop			; (mov r8, r8)
 801d576:	46bd      	mov	sp, r7
 801d578:	b002      	add	sp, #8
 801d57a:	bd80      	pop	{r7, pc}

0801d57c <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 801d57c:	b590      	push	{r4, r7, lr}
 801d57e:	b08b      	sub	sp, #44	; 0x2c
 801d580:	af04      	add	r7, sp, #16
 801d582:	60f8      	str	r0, [r7, #12]
 801d584:	607a      	str	r2, [r7, #4]
 801d586:	240b      	movs	r4, #11
 801d588:	193b      	adds	r3, r7, r4
 801d58a:	1c0a      	adds	r2, r1, #0
 801d58c:	701a      	strb	r2, [r3, #0]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 801d58e:	68fb      	ldr	r3, [r7, #12]
 801d590:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801d592:	2116      	movs	r1, #22
 801d594:	187a      	adds	r2, r7, r1
 801d596:	18db      	adds	r3, r3, r3
 801d598:	8013      	strh	r3, [r2, #0]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 801d59a:	68fb      	ldr	r3, [r7, #12]
 801d59c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 801d59e:	193b      	adds	r3, r7, r4
 801d5a0:	781b      	ldrb	r3, [r3, #0]
 801d5a2:	b29a      	uxth	r2, r3
 801d5a4:	187b      	adds	r3, r7, r1
 801d5a6:	8819      	ldrh	r1, [r3, #0]
 801d5a8:	4b0f      	ldr	r3, [pc, #60]	; (801d5e8 <read_register16+0x6c>)
 801d5aa:	9302      	str	r3, [sp, #8]
 801d5ac:	2302      	movs	r3, #2
 801d5ae:	9301      	str	r3, [sp, #4]
 801d5b0:	2414      	movs	r4, #20
 801d5b2:	193b      	adds	r3, r7, r4
 801d5b4:	9300      	str	r3, [sp, #0]
 801d5b6:	2301      	movs	r3, #1
 801d5b8:	f7ea fe76 	bl	80082a8 <HAL_I2C_Mem_Read>
 801d5bc:	1e03      	subs	r3, r0, #0
 801d5be:	d10e      	bne.n	801d5de <read_register16+0x62>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 801d5c0:	0021      	movs	r1, r4
 801d5c2:	187b      	adds	r3, r7, r1
 801d5c4:	785b      	ldrb	r3, [r3, #1]
 801d5c6:	021b      	lsls	r3, r3, #8
 801d5c8:	b21a      	sxth	r2, r3
 801d5ca:	187b      	adds	r3, r7, r1
 801d5cc:	781b      	ldrb	r3, [r3, #0]
 801d5ce:	b21b      	sxth	r3, r3
 801d5d0:	4313      	orrs	r3, r2
 801d5d2:	b21b      	sxth	r3, r3
 801d5d4:	b29a      	uxth	r2, r3
 801d5d6:	687b      	ldr	r3, [r7, #4]
 801d5d8:	801a      	strh	r2, [r3, #0]
		return true;
 801d5da:	2301      	movs	r3, #1
 801d5dc:	e000      	b.n	801d5e0 <read_register16+0x64>
	} else
		return false;
 801d5de:	2300      	movs	r3, #0

}
 801d5e0:	0018      	movs	r0, r3
 801d5e2:	46bd      	mov	sp, r7
 801d5e4:	b007      	add	sp, #28
 801d5e6:	bd90      	pop	{r4, r7, pc}
 801d5e8:	00001388 	.word	0x00001388

0801d5ec <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 801d5ec:	b5b0      	push	{r4, r5, r7, lr}
 801d5ee:	b08a      	sub	sp, #40	; 0x28
 801d5f0:	af04      	add	r7, sp, #16
 801d5f2:	60f8      	str	r0, [r7, #12]
 801d5f4:	0008      	movs	r0, r1
 801d5f6:	607a      	str	r2, [r7, #4]
 801d5f8:	0019      	movs	r1, r3
 801d5fa:	240b      	movs	r4, #11
 801d5fc:	193b      	adds	r3, r7, r4
 801d5fe:	1c02      	adds	r2, r0, #0
 801d600:	701a      	strb	r2, [r3, #0]
 801d602:	250a      	movs	r5, #10
 801d604:	197b      	adds	r3, r7, r5
 801d606:	1c0a      	adds	r2, r1, #0
 801d608:	701a      	strb	r2, [r3, #0]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 801d60a:	68fb      	ldr	r3, [r7, #12]
 801d60c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801d60e:	2116      	movs	r1, #22
 801d610:	187a      	adds	r2, r7, r1
 801d612:	18db      	adds	r3, r3, r3
 801d614:	8013      	strh	r3, [r2, #0]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 801d616:	68fb      	ldr	r3, [r7, #12]
 801d618:	6a98      	ldr	r0, [r3, #40]	; 0x28
 801d61a:	193b      	adds	r3, r7, r4
 801d61c:	781b      	ldrb	r3, [r3, #0]
 801d61e:	b29c      	uxth	r4, r3
 801d620:	197b      	adds	r3, r7, r5
 801d622:	781b      	ldrb	r3, [r3, #0]
 801d624:	b29b      	uxth	r3, r3
 801d626:	187a      	adds	r2, r7, r1
 801d628:	8811      	ldrh	r1, [r2, #0]
 801d62a:	4a09      	ldr	r2, [pc, #36]	; (801d650 <read_data+0x64>)
 801d62c:	9202      	str	r2, [sp, #8]
 801d62e:	9301      	str	r3, [sp, #4]
 801d630:	687b      	ldr	r3, [r7, #4]
 801d632:	9300      	str	r3, [sp, #0]
 801d634:	2301      	movs	r3, #1
 801d636:	0022      	movs	r2, r4
 801d638:	f7ea fe36 	bl	80082a8 <HAL_I2C_Mem_Read>
 801d63c:	1e03      	subs	r3, r0, #0
 801d63e:	d101      	bne.n	801d644 <read_data+0x58>
		return 0;
 801d640:	2300      	movs	r3, #0
 801d642:	e000      	b.n	801d646 <read_data+0x5a>
	else
		return 1;
 801d644:	2301      	movs	r3, #1

}
 801d646:	0018      	movs	r0, r3
 801d648:	46bd      	mov	sp, r7
 801d64a:	b006      	add	sp, #24
 801d64c:	bdb0      	pop	{r4, r5, r7, pc}
 801d64e:	46c0      	nop			; (mov r8, r8)
 801d650:	00001388 	.word	0x00001388

0801d654 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 801d654:	b580      	push	{r7, lr}
 801d656:	b082      	sub	sp, #8
 801d658:	af00      	add	r7, sp, #0
 801d65a:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 801d65c:	687a      	ldr	r2, [r7, #4]
 801d65e:	687b      	ldr	r3, [r7, #4]
 801d660:	2188      	movs	r1, #136	; 0x88
 801d662:	0018      	movs	r0, r3
 801d664:	f7ff ff8a 	bl	801d57c <read_register16>
 801d668:	1e03      	subs	r3, r0, #0
 801d66a:	d100      	bne.n	801d66e <read_calibration_data+0x1a>
 801d66c:	e06d      	b.n	801d74a <read_calibration_data+0xf6>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 801d66e:	687b      	ldr	r3, [r7, #4]
 801d670:	1c9a      	adds	r2, r3, #2
 801d672:	687b      	ldr	r3, [r7, #4]
 801d674:	218a      	movs	r1, #138	; 0x8a
 801d676:	0018      	movs	r0, r3
 801d678:	f7ff ff80 	bl	801d57c <read_register16>
 801d67c:	1e03      	subs	r3, r0, #0
 801d67e:	d100      	bne.n	801d682 <read_calibration_data+0x2e>
 801d680:	e063      	b.n	801d74a <read_calibration_data+0xf6>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 801d682:	687b      	ldr	r3, [r7, #4]
 801d684:	1d1a      	adds	r2, r3, #4
 801d686:	687b      	ldr	r3, [r7, #4]
 801d688:	218c      	movs	r1, #140	; 0x8c
 801d68a:	0018      	movs	r0, r3
 801d68c:	f7ff ff76 	bl	801d57c <read_register16>
 801d690:	1e03      	subs	r3, r0, #0
 801d692:	d05a      	beq.n	801d74a <read_calibration_data+0xf6>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 801d694:	687b      	ldr	r3, [r7, #4]
 801d696:	1d9a      	adds	r2, r3, #6
 801d698:	687b      	ldr	r3, [r7, #4]
 801d69a:	218e      	movs	r1, #142	; 0x8e
 801d69c:	0018      	movs	r0, r3
 801d69e:	f7ff ff6d 	bl	801d57c <read_register16>
 801d6a2:	1e03      	subs	r3, r0, #0
 801d6a4:	d051      	beq.n	801d74a <read_calibration_data+0xf6>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 801d6a6:	687b      	ldr	r3, [r7, #4]
 801d6a8:	3308      	adds	r3, #8
 801d6aa:	001a      	movs	r2, r3
 801d6ac:	687b      	ldr	r3, [r7, #4]
 801d6ae:	2190      	movs	r1, #144	; 0x90
 801d6b0:	0018      	movs	r0, r3
 801d6b2:	f7ff ff63 	bl	801d57c <read_register16>
 801d6b6:	1e03      	subs	r3, r0, #0
 801d6b8:	d047      	beq.n	801d74a <read_calibration_data+0xf6>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 801d6ba:	687b      	ldr	r3, [r7, #4]
 801d6bc:	330a      	adds	r3, #10
 801d6be:	001a      	movs	r2, r3
 801d6c0:	687b      	ldr	r3, [r7, #4]
 801d6c2:	2192      	movs	r1, #146	; 0x92
 801d6c4:	0018      	movs	r0, r3
 801d6c6:	f7ff ff59 	bl	801d57c <read_register16>
 801d6ca:	1e03      	subs	r3, r0, #0
 801d6cc:	d03d      	beq.n	801d74a <read_calibration_data+0xf6>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 801d6ce:	687b      	ldr	r3, [r7, #4]
 801d6d0:	330c      	adds	r3, #12
 801d6d2:	001a      	movs	r2, r3
 801d6d4:	687b      	ldr	r3, [r7, #4]
 801d6d6:	2194      	movs	r1, #148	; 0x94
 801d6d8:	0018      	movs	r0, r3
 801d6da:	f7ff ff4f 	bl	801d57c <read_register16>
 801d6de:	1e03      	subs	r3, r0, #0
 801d6e0:	d033      	beq.n	801d74a <read_calibration_data+0xf6>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 801d6e2:	687b      	ldr	r3, [r7, #4]
 801d6e4:	330e      	adds	r3, #14
 801d6e6:	001a      	movs	r2, r3
 801d6e8:	687b      	ldr	r3, [r7, #4]
 801d6ea:	2196      	movs	r1, #150	; 0x96
 801d6ec:	0018      	movs	r0, r3
 801d6ee:	f7ff ff45 	bl	801d57c <read_register16>
 801d6f2:	1e03      	subs	r3, r0, #0
 801d6f4:	d029      	beq.n	801d74a <read_calibration_data+0xf6>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 801d6f6:	687b      	ldr	r3, [r7, #4]
 801d6f8:	3310      	adds	r3, #16
 801d6fa:	001a      	movs	r2, r3
 801d6fc:	687b      	ldr	r3, [r7, #4]
 801d6fe:	2198      	movs	r1, #152	; 0x98
 801d700:	0018      	movs	r0, r3
 801d702:	f7ff ff3b 	bl	801d57c <read_register16>
 801d706:	1e03      	subs	r3, r0, #0
 801d708:	d01f      	beq.n	801d74a <read_calibration_data+0xf6>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 801d70a:	687b      	ldr	r3, [r7, #4]
 801d70c:	3312      	adds	r3, #18
 801d70e:	001a      	movs	r2, r3
 801d710:	687b      	ldr	r3, [r7, #4]
 801d712:	219a      	movs	r1, #154	; 0x9a
 801d714:	0018      	movs	r0, r3
 801d716:	f7ff ff31 	bl	801d57c <read_register16>
 801d71a:	1e03      	subs	r3, r0, #0
 801d71c:	d015      	beq.n	801d74a <read_calibration_data+0xf6>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 801d71e:	687b      	ldr	r3, [r7, #4]
 801d720:	3314      	adds	r3, #20
 801d722:	001a      	movs	r2, r3
 801d724:	687b      	ldr	r3, [r7, #4]
 801d726:	219c      	movs	r1, #156	; 0x9c
 801d728:	0018      	movs	r0, r3
 801d72a:	f7ff ff27 	bl	801d57c <read_register16>
 801d72e:	1e03      	subs	r3, r0, #0
 801d730:	d00b      	beq.n	801d74a <read_calibration_data+0xf6>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 801d732:	687b      	ldr	r3, [r7, #4]
 801d734:	3316      	adds	r3, #22
 801d736:	001a      	movs	r2, r3
			&& read_register16(dev, 0x9e,
 801d738:	687b      	ldr	r3, [r7, #4]
 801d73a:	219e      	movs	r1, #158	; 0x9e
 801d73c:	0018      	movs	r0, r3
 801d73e:	f7ff ff1d 	bl	801d57c <read_register16>
 801d742:	1e03      	subs	r3, r0, #0
 801d744:	d001      	beq.n	801d74a <read_calibration_data+0xf6>

		return true;
 801d746:	2301      	movs	r3, #1
 801d748:	e000      	b.n	801d74c <read_calibration_data+0xf8>
	}

	return false;
 801d74a:	2300      	movs	r3, #0
}
 801d74c:	0018      	movs	r0, r3
 801d74e:	46bd      	mov	sp, r7
 801d750:	b002      	add	sp, #8
 801d752:	bd80      	pop	{r7, pc}

0801d754 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 801d754:	b5b0      	push	{r4, r5, r7, lr}
 801d756:	b084      	sub	sp, #16
 801d758:	af00      	add	r7, sp, #0
 801d75a:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 801d75c:	687b      	ldr	r3, [r7, #4]
 801d75e:	3318      	adds	r3, #24
 801d760:	001a      	movs	r2, r3
 801d762:	6878      	ldr	r0, [r7, #4]
 801d764:	2301      	movs	r3, #1
 801d766:	21a1      	movs	r1, #161	; 0xa1
 801d768:	f7ff ff40 	bl	801d5ec <read_data>
 801d76c:	1e03      	subs	r3, r0, #0
 801d76e:	d14b      	bne.n	801d808 <read_hum_calibration_data+0xb4>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 801d770:	687b      	ldr	r3, [r7, #4]
 801d772:	331a      	adds	r3, #26
 801d774:	001a      	movs	r2, r3
 801d776:	687b      	ldr	r3, [r7, #4]
 801d778:	21e1      	movs	r1, #225	; 0xe1
 801d77a:	0018      	movs	r0, r3
 801d77c:	f7ff fefe 	bl	801d57c <read_register16>
 801d780:	1e03      	subs	r3, r0, #0
 801d782:	d041      	beq.n	801d808 <read_hum_calibration_data+0xb4>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 801d784:	687b      	ldr	r3, [r7, #4]
 801d786:	331c      	adds	r3, #28
 801d788:	001a      	movs	r2, r3
 801d78a:	6878      	ldr	r0, [r7, #4]
 801d78c:	2301      	movs	r3, #1
 801d78e:	21e3      	movs	r1, #227	; 0xe3
 801d790:	f7ff ff2c 	bl	801d5ec <read_data>
 801d794:	1e03      	subs	r3, r0, #0
 801d796:	d137      	bne.n	801d808 <read_hum_calibration_data+0xb4>
			&& read_register16(dev, 0xe4, &h4)
 801d798:	240e      	movs	r4, #14
 801d79a:	193a      	adds	r2, r7, r4
 801d79c:	687b      	ldr	r3, [r7, #4]
 801d79e:	21e4      	movs	r1, #228	; 0xe4
 801d7a0:	0018      	movs	r0, r3
 801d7a2:	f7ff feeb 	bl	801d57c <read_register16>
 801d7a6:	1e03      	subs	r3, r0, #0
 801d7a8:	d02e      	beq.n	801d808 <read_hum_calibration_data+0xb4>
			&& read_register16(dev, 0xe5, &h5)
 801d7aa:	250c      	movs	r5, #12
 801d7ac:	197a      	adds	r2, r7, r5
 801d7ae:	687b      	ldr	r3, [r7, #4]
 801d7b0:	21e5      	movs	r1, #229	; 0xe5
 801d7b2:	0018      	movs	r0, r3
 801d7b4:	f7ff fee2 	bl	801d57c <read_register16>
 801d7b8:	1e03      	subs	r3, r0, #0
 801d7ba:	d025      	beq.n	801d808 <read_hum_calibration_data+0xb4>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 801d7bc:	687b      	ldr	r3, [r7, #4]
 801d7be:	3322      	adds	r3, #34	; 0x22
 801d7c0:	001a      	movs	r2, r3
 801d7c2:	6878      	ldr	r0, [r7, #4]
 801d7c4:	2301      	movs	r3, #1
 801d7c6:	21e7      	movs	r1, #231	; 0xe7
 801d7c8:	f7ff ff10 	bl	801d5ec <read_data>
 801d7cc:	1e03      	subs	r3, r0, #0
 801d7ce:	d11b      	bne.n	801d808 <read_hum_calibration_data+0xb4>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 801d7d0:	193b      	adds	r3, r7, r4
 801d7d2:	881b      	ldrh	r3, [r3, #0]
 801d7d4:	011b      	lsls	r3, r3, #4
 801d7d6:	b21a      	sxth	r2, r3
 801d7d8:	23ff      	movs	r3, #255	; 0xff
 801d7da:	011b      	lsls	r3, r3, #4
 801d7dc:	4013      	ands	r3, r2
 801d7de:	b21a      	sxth	r2, r3
 801d7e0:	193b      	adds	r3, r7, r4
 801d7e2:	881b      	ldrh	r3, [r3, #0]
 801d7e4:	121b      	asrs	r3, r3, #8
 801d7e6:	b21b      	sxth	r3, r3
 801d7e8:	210f      	movs	r1, #15
 801d7ea:	400b      	ands	r3, r1
 801d7ec:	b21b      	sxth	r3, r3
 801d7ee:	4313      	orrs	r3, r2
 801d7f0:	b21a      	sxth	r2, r3
 801d7f2:	687b      	ldr	r3, [r7, #4]
 801d7f4:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 801d7f6:	197b      	adds	r3, r7, r5
 801d7f8:	881b      	ldrh	r3, [r3, #0]
 801d7fa:	091b      	lsrs	r3, r3, #4
 801d7fc:	b29b      	uxth	r3, r3
 801d7fe:	b21a      	sxth	r2, r3
 801d800:	687b      	ldr	r3, [r7, #4]
 801d802:	841a      	strh	r2, [r3, #32]

		return true;
 801d804:	2301      	movs	r3, #1
 801d806:	e000      	b.n	801d80a <read_hum_calibration_data+0xb6>
	}

	return false;
 801d808:	2300      	movs	r3, #0
}
 801d80a:	0018      	movs	r0, r3
 801d80c:	46bd      	mov	sp, r7
 801d80e:	b004      	add	sp, #16
 801d810:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801d814 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 801d814:	b580      	push	{r7, lr}
 801d816:	b088      	sub	sp, #32
 801d818:	af04      	add	r7, sp, #16
 801d81a:	6078      	str	r0, [r7, #4]
 801d81c:	0008      	movs	r0, r1
 801d81e:	0011      	movs	r1, r2
 801d820:	1cfb      	adds	r3, r7, #3
 801d822:	1c02      	adds	r2, r0, #0
 801d824:	701a      	strb	r2, [r3, #0]
 801d826:	1cbb      	adds	r3, r7, #2
 801d828:	1c0a      	adds	r2, r1, #0
 801d82a:	701a      	strb	r2, [r3, #0]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 801d82c:	687b      	ldr	r3, [r7, #4]
 801d82e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801d830:	210e      	movs	r1, #14
 801d832:	187a      	adds	r2, r7, r1
 801d834:	18db      	adds	r3, r3, r3
 801d836:	8013      	strh	r3, [r2, #0]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 801d838:	687b      	ldr	r3, [r7, #4]
 801d83a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 801d83c:	1cfb      	adds	r3, r7, #3
 801d83e:	781b      	ldrb	r3, [r3, #0]
 801d840:	b29a      	uxth	r2, r3
 801d842:	187b      	adds	r3, r7, r1
 801d844:	8819      	ldrh	r1, [r3, #0]
 801d846:	4b09      	ldr	r3, [pc, #36]	; (801d86c <write_register8+0x58>)
 801d848:	9302      	str	r3, [sp, #8]
 801d84a:	2301      	movs	r3, #1
 801d84c:	9301      	str	r3, [sp, #4]
 801d84e:	1cbb      	adds	r3, r7, #2
 801d850:	9300      	str	r3, [sp, #0]
 801d852:	2301      	movs	r3, #1
 801d854:	f7ea fbfa 	bl	800804c <HAL_I2C_Mem_Write>
 801d858:	1e03      	subs	r3, r0, #0
 801d85a:	d101      	bne.n	801d860 <write_register8+0x4c>
		return false;
 801d85c:	2300      	movs	r3, #0
 801d85e:	e000      	b.n	801d862 <write_register8+0x4e>
	else
		return true;
 801d860:	2301      	movs	r3, #1
}
 801d862:	0018      	movs	r0, r3
 801d864:	46bd      	mov	sp, r7
 801d866:	b004      	add	sp, #16
 801d868:	bd80      	pop	{r7, pc}
 801d86a:	46c0      	nop			; (mov r8, r8)
 801d86c:	00002710 	.word	0x00002710

0801d870 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 801d870:	b590      	push	{r4, r7, lr}
 801d872:	b085      	sub	sp, #20
 801d874:	af00      	add	r7, sp, #0
 801d876:	6078      	str	r0, [r7, #4]
 801d878:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 801d87a:	687b      	ldr	r3, [r7, #4]
 801d87c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801d87e:	2b76      	cmp	r3, #118	; 0x76
 801d880:	d005      	beq.n	801d88e <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 801d882:	687b      	ldr	r3, [r7, #4]
 801d884:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801d886:	2b77      	cmp	r3, #119	; 0x77
 801d888:	d001      	beq.n	801d88e <bmp280_init+0x1e>

		return false;
 801d88a:	2300      	movs	r3, #0
 801d88c:	e0a3      	b.n	801d9d6 <bmp280_init+0x166>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 801d88e:	687b      	ldr	r3, [r7, #4]
 801d890:	3332      	adds	r3, #50	; 0x32
 801d892:	001a      	movs	r2, r3
 801d894:	6878      	ldr	r0, [r7, #4]
 801d896:	2301      	movs	r3, #1
 801d898:	21d0      	movs	r1, #208	; 0xd0
 801d89a:	f7ff fea7 	bl	801d5ec <read_data>
 801d89e:	1e03      	subs	r3, r0, #0
 801d8a0:	d001      	beq.n	801d8a6 <bmp280_init+0x36>
		return false;
 801d8a2:	2300      	movs	r3, #0
 801d8a4:	e097      	b.n	801d9d6 <bmp280_init+0x166>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 801d8a6:	687b      	ldr	r3, [r7, #4]
 801d8a8:	2232      	movs	r2, #50	; 0x32
 801d8aa:	5c9b      	ldrb	r3, [r3, r2]
 801d8ac:	2b58      	cmp	r3, #88	; 0x58
 801d8ae:	d006      	beq.n	801d8be <bmp280_init+0x4e>
 801d8b0:	687b      	ldr	r3, [r7, #4]
 801d8b2:	2232      	movs	r2, #50	; 0x32
 801d8b4:	5c9b      	ldrb	r3, [r3, r2]
 801d8b6:	2b60      	cmp	r3, #96	; 0x60
 801d8b8:	d001      	beq.n	801d8be <bmp280_init+0x4e>

		return false;
 801d8ba:	2300      	movs	r3, #0
 801d8bc:	e08b      	b.n	801d9d6 <bmp280_init+0x166>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 801d8be:	687b      	ldr	r3, [r7, #4]
 801d8c0:	22b6      	movs	r2, #182	; 0xb6
 801d8c2:	21e0      	movs	r1, #224	; 0xe0
 801d8c4:	0018      	movs	r0, r3
 801d8c6:	f7ff ffa5 	bl	801d814 <write_register8>
 801d8ca:	1e03      	subs	r3, r0, #0
 801d8cc:	d001      	beq.n	801d8d2 <bmp280_init+0x62>
		return false;
 801d8ce:	2300      	movs	r3, #0
 801d8d0:	e081      	b.n	801d9d6 <bmp280_init+0x166>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 801d8d2:	240c      	movs	r4, #12
 801d8d4:	193a      	adds	r2, r7, r4
 801d8d6:	6878      	ldr	r0, [r7, #4]
 801d8d8:	2301      	movs	r3, #1
 801d8da:	21f3      	movs	r1, #243	; 0xf3
 801d8dc:	f7ff fe86 	bl	801d5ec <read_data>
 801d8e0:	1e03      	subs	r3, r0, #0
 801d8e2:	d1f6      	bne.n	801d8d2 <bmp280_init+0x62>
				&& (status & 1) == 0)
 801d8e4:	193b      	adds	r3, r7, r4
 801d8e6:	781b      	ldrb	r3, [r3, #0]
 801d8e8:	001a      	movs	r2, r3
 801d8ea:	2301      	movs	r3, #1
 801d8ec:	4013      	ands	r3, r2
 801d8ee:	d1f0      	bne.n	801d8d2 <bmp280_init+0x62>
			break;
	}

	if (!read_calibration_data(dev)) {
 801d8f0:	687b      	ldr	r3, [r7, #4]
 801d8f2:	0018      	movs	r0, r3
 801d8f4:	f7ff feae 	bl	801d654 <read_calibration_data>
 801d8f8:	0003      	movs	r3, r0
 801d8fa:	001a      	movs	r2, r3
 801d8fc:	2301      	movs	r3, #1
 801d8fe:	4053      	eors	r3, r2
 801d900:	b2db      	uxtb	r3, r3
 801d902:	2b00      	cmp	r3, #0
 801d904:	d100      	bne.n	801d908 <bmp280_init+0x98>
 801d906:	e001      	b.n	801d90c <bmp280_init+0x9c>
		return false;
 801d908:	2300      	movs	r3, #0
 801d90a:	e064      	b.n	801d9d6 <bmp280_init+0x166>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 801d90c:	687b      	ldr	r3, [r7, #4]
 801d90e:	2232      	movs	r2, #50	; 0x32
 801d910:	5c9b      	ldrb	r3, [r3, r2]
 801d912:	2b60      	cmp	r3, #96	; 0x60
 801d914:	d10c      	bne.n	801d930 <bmp280_init+0xc0>
 801d916:	687b      	ldr	r3, [r7, #4]
 801d918:	0018      	movs	r0, r3
 801d91a:	f7ff ff1b 	bl	801d754 <read_hum_calibration_data>
 801d91e:	0003      	movs	r3, r0
 801d920:	001a      	movs	r2, r3
 801d922:	2301      	movs	r3, #1
 801d924:	4053      	eors	r3, r2
 801d926:	b2db      	uxtb	r3, r3
 801d928:	2b00      	cmp	r3, #0
 801d92a:	d001      	beq.n	801d930 <bmp280_init+0xc0>
		return false;
 801d92c:	2300      	movs	r3, #0
 801d92e:	e052      	b.n	801d9d6 <bmp280_init+0x166>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 801d930:	683b      	ldr	r3, [r7, #0]
 801d932:	795b      	ldrb	r3, [r3, #5]
 801d934:	015b      	lsls	r3, r3, #5
 801d936:	b25a      	sxtb	r2, r3
 801d938:	683b      	ldr	r3, [r7, #0]
 801d93a:	785b      	ldrb	r3, [r3, #1]
 801d93c:	009b      	lsls	r3, r3, #2
 801d93e:	b25b      	sxtb	r3, r3
 801d940:	4313      	orrs	r3, r2
 801d942:	b25a      	sxtb	r2, r3
 801d944:	210f      	movs	r1, #15
 801d946:	187b      	adds	r3, r7, r1
 801d948:	701a      	strb	r2, [r3, #0]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 801d94a:	187b      	adds	r3, r7, r1
 801d94c:	781a      	ldrb	r2, [r3, #0]
 801d94e:	687b      	ldr	r3, [r7, #4]
 801d950:	21f5      	movs	r1, #245	; 0xf5
 801d952:	0018      	movs	r0, r3
 801d954:	f7ff ff5e 	bl	801d814 <write_register8>
 801d958:	1e03      	subs	r3, r0, #0
 801d95a:	d001      	beq.n	801d960 <bmp280_init+0xf0>
		return false;
 801d95c:	2300      	movs	r3, #0
 801d95e:	e03a      	b.n	801d9d6 <bmp280_init+0x166>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 801d960:	683b      	ldr	r3, [r7, #0]
 801d962:	781b      	ldrb	r3, [r3, #0]
 801d964:	2b01      	cmp	r3, #1
 801d966:	d102      	bne.n	801d96e <bmp280_init+0xfe>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 801d968:	683b      	ldr	r3, [r7, #0]
 801d96a:	2200      	movs	r2, #0
 801d96c:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 801d96e:	683b      	ldr	r3, [r7, #0]
 801d970:	78db      	ldrb	r3, [r3, #3]
 801d972:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 801d974:	b25a      	sxtb	r2, r3
 801d976:	683b      	ldr	r3, [r7, #0]
 801d978:	789b      	ldrb	r3, [r3, #2]
 801d97a:	009b      	lsls	r3, r3, #2
 801d97c:	b25b      	sxtb	r3, r3
 801d97e:	4313      	orrs	r3, r2
 801d980:	b25a      	sxtb	r2, r3
 801d982:	683b      	ldr	r3, [r7, #0]
 801d984:	781b      	ldrb	r3, [r3, #0]
 801d986:	b25b      	sxtb	r3, r3
 801d988:	4313      	orrs	r3, r2
 801d98a:	b25a      	sxtb	r2, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 801d98c:	230e      	movs	r3, #14
 801d98e:	18fb      	adds	r3, r7, r3
 801d990:	701a      	strb	r2, [r3, #0]

	if (dev->id == BME280_CHIP_ID) {
 801d992:	687b      	ldr	r3, [r7, #4]
 801d994:	2232      	movs	r2, #50	; 0x32
 801d996:	5c9b      	ldrb	r3, [r3, r2]
 801d998:	2b60      	cmp	r3, #96	; 0x60
 801d99a:	d10f      	bne.n	801d9bc <bmp280_init+0x14c>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 801d99c:	210d      	movs	r1, #13
 801d99e:	187b      	adds	r3, r7, r1
 801d9a0:	683a      	ldr	r2, [r7, #0]
 801d9a2:	7912      	ldrb	r2, [r2, #4]
 801d9a4:	701a      	strb	r2, [r3, #0]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 801d9a6:	187b      	adds	r3, r7, r1
 801d9a8:	781a      	ldrb	r2, [r3, #0]
 801d9aa:	687b      	ldr	r3, [r7, #4]
 801d9ac:	21f2      	movs	r1, #242	; 0xf2
 801d9ae:	0018      	movs	r0, r3
 801d9b0:	f7ff ff30 	bl	801d814 <write_register8>
 801d9b4:	1e03      	subs	r3, r0, #0
 801d9b6:	d001      	beq.n	801d9bc <bmp280_init+0x14c>
			return false;
 801d9b8:	2300      	movs	r3, #0
 801d9ba:	e00c      	b.n	801d9d6 <bmp280_init+0x166>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 801d9bc:	230e      	movs	r3, #14
 801d9be:	18fb      	adds	r3, r7, r3
 801d9c0:	781a      	ldrb	r2, [r3, #0]
 801d9c2:	687b      	ldr	r3, [r7, #4]
 801d9c4:	21f4      	movs	r1, #244	; 0xf4
 801d9c6:	0018      	movs	r0, r3
 801d9c8:	f7ff ff24 	bl	801d814 <write_register8>
 801d9cc:	1e03      	subs	r3, r0, #0
 801d9ce:	d001      	beq.n	801d9d4 <bmp280_init+0x164>
		return false;
 801d9d0:	2300      	movs	r3, #0
 801d9d2:	e000      	b.n	801d9d6 <bmp280_init+0x166>
	}

	return true;
 801d9d4:	2301      	movs	r3, #1
}
 801d9d6:	0018      	movs	r0, r3
 801d9d8:	46bd      	mov	sp, r7
 801d9da:	b005      	add	sp, #20
 801d9dc:	bd90      	pop	{r4, r7, pc}

0801d9de <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 801d9de:	b580      	push	{r7, lr}
 801d9e0:	b086      	sub	sp, #24
 801d9e2:	af00      	add	r7, sp, #0
 801d9e4:	60f8      	str	r0, [r7, #12]
 801d9e6:	60b9      	str	r1, [r7, #8]
 801d9e8:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 801d9ea:	68bb      	ldr	r3, [r7, #8]
 801d9ec:	10da      	asrs	r2, r3, #3
 801d9ee:	68fb      	ldr	r3, [r7, #12]
 801d9f0:	881b      	ldrh	r3, [r3, #0]
 801d9f2:	005b      	lsls	r3, r3, #1
 801d9f4:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 801d9f6:	68fa      	ldr	r2, [r7, #12]
 801d9f8:	2102      	movs	r1, #2
 801d9fa:	5e52      	ldrsh	r2, [r2, r1]
 801d9fc:	4353      	muls	r3, r2
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 801d9fe:	12db      	asrs	r3, r3, #11
 801da00:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 801da02:	68bb      	ldr	r3, [r7, #8]
 801da04:	111b      	asrs	r3, r3, #4
 801da06:	68fa      	ldr	r2, [r7, #12]
 801da08:	8812      	ldrh	r2, [r2, #0]
 801da0a:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 801da0c:	68ba      	ldr	r2, [r7, #8]
 801da0e:	1112      	asrs	r2, r2, #4
 801da10:	68f9      	ldr	r1, [r7, #12]
 801da12:	8809      	ldrh	r1, [r1, #0]
 801da14:	1a52      	subs	r2, r2, r1
 801da16:	4353      	muls	r3, r2
 801da18:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 801da1a:	68fa      	ldr	r2, [r7, #12]
 801da1c:	2104      	movs	r1, #4
 801da1e:	5e52      	ldrsh	r2, [r2, r1]
 801da20:	4353      	muls	r3, r2
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 801da22:	139b      	asrs	r3, r3, #14
 801da24:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 801da26:	697a      	ldr	r2, [r7, #20]
 801da28:	693b      	ldr	r3, [r7, #16]
 801da2a:	18d2      	adds	r2, r2, r3
 801da2c:	687b      	ldr	r3, [r7, #4]
 801da2e:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 801da30:	687b      	ldr	r3, [r7, #4]
 801da32:	681a      	ldr	r2, [r3, #0]
 801da34:	0013      	movs	r3, r2
 801da36:	009b      	lsls	r3, r3, #2
 801da38:	189b      	adds	r3, r3, r2
 801da3a:	3380      	adds	r3, #128	; 0x80
 801da3c:	121b      	asrs	r3, r3, #8
}
 801da3e:	0018      	movs	r0, r3
 801da40:	46bd      	mov	sp, r7
 801da42:	b006      	add	sp, #24
 801da44:	bd80      	pop	{r7, pc}
	...

0801da48 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 801da48:	b5f0      	push	{r4, r5, r6, r7, lr}
 801da4a:	b0af      	sub	sp, #188	; 0xbc
 801da4c:	af00      	add	r7, sp, #0
 801da4e:	239c      	movs	r3, #156	; 0x9c
 801da50:	18fe      	adds	r6, r7, r3
 801da52:	6030      	str	r0, [r6, #0]
 801da54:	2098      	movs	r0, #152	; 0x98
 801da56:	1838      	adds	r0, r7, r0
 801da58:	6001      	str	r1, [r0, #0]
 801da5a:	2194      	movs	r1, #148	; 0x94
 801da5c:	1878      	adds	r0, r7, r1
 801da5e:	6002      	str	r2, [r0, #0]
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 801da60:	187a      	adds	r2, r7, r1
 801da62:	6813      	ldr	r3, [r2, #0]
 801da64:	65bb      	str	r3, [r7, #88]	; 0x58
 801da66:	17db      	asrs	r3, r3, #31
 801da68:	65fb      	str	r3, [r7, #92]	; 0x5c
 801da6a:	4ace      	ldr	r2, [pc, #824]	; (801dda4 <compensate_pressure+0x35c>)
 801da6c:	2301      	movs	r3, #1
 801da6e:	425b      	negs	r3, r3
 801da70:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801da72:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 801da74:	1880      	adds	r0, r0, r2
 801da76:	4159      	adcs	r1, r3
 801da78:	0002      	movs	r2, r0
 801da7a:	000b      	movs	r3, r1
 801da7c:	26b0      	movs	r6, #176	; 0xb0
 801da7e:	19b9      	adds	r1, r7, r6
 801da80:	600a      	str	r2, [r1, #0]
 801da82:	604b      	str	r3, [r1, #4]
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 801da84:	19ba      	adds	r2, r7, r6
 801da86:	6853      	ldr	r3, [r2, #4]
 801da88:	6812      	ldr	r2, [r2, #0]
 801da8a:	19b9      	adds	r1, r7, r6
 801da8c:	6808      	ldr	r0, [r1, #0]
 801da8e:	6849      	ldr	r1, [r1, #4]
 801da90:	f7e2 fd3a 	bl	8000508 <__aeabi_lmul>
 801da94:	0002      	movs	r2, r0
 801da96:	000b      	movs	r3, r1
 801da98:	0010      	movs	r0, r2
 801da9a:	0019      	movs	r1, r3
 801da9c:	239c      	movs	r3, #156	; 0x9c
 801da9e:	18fa      	adds	r2, r7, r3
 801daa0:	6813      	ldr	r3, [r2, #0]
 801daa2:	2210      	movs	r2, #16
 801daa4:	5e9b      	ldrsh	r3, [r3, r2]
 801daa6:	653b      	str	r3, [r7, #80]	; 0x50
 801daa8:	17db      	asrs	r3, r3, #31
 801daaa:	657b      	str	r3, [r7, #84]	; 0x54
 801daac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801daae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801dab0:	f7e2 fd2a 	bl	8000508 <__aeabi_lmul>
 801dab4:	0002      	movs	r2, r0
 801dab6:	000b      	movs	r3, r1
 801dab8:	21a8      	movs	r1, #168	; 0xa8
 801daba:	1878      	adds	r0, r7, r1
 801dabc:	6002      	str	r2, [r0, #0]
 801dabe:	6043      	str	r3, [r0, #4]
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 801dac0:	239c      	movs	r3, #156	; 0x9c
 801dac2:	18fa      	adds	r2, r7, r3
 801dac4:	6813      	ldr	r3, [r2, #0]
 801dac6:	220e      	movs	r2, #14
 801dac8:	5e9b      	ldrsh	r3, [r3, r2]
 801daca:	64bb      	str	r3, [r7, #72]	; 0x48
 801dacc:	17db      	asrs	r3, r3, #31
 801dace:	64fb      	str	r3, [r7, #76]	; 0x4c
 801dad0:	19ba      	adds	r2, r7, r6
 801dad2:	6853      	ldr	r3, [r2, #4]
 801dad4:	6812      	ldr	r2, [r2, #0]
 801dad6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801dad8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801dada:	f7e2 fd15 	bl	8000508 <__aeabi_lmul>
 801dade:	0002      	movs	r2, r0
 801dae0:	000b      	movs	r3, r1
 801dae2:	0bd1      	lsrs	r1, r2, #15
 801dae4:	045d      	lsls	r5, r3, #17
 801dae6:	430d      	orrs	r5, r1
 801dae8:	0454      	lsls	r4, r2, #17
 801daea:	21a8      	movs	r1, #168	; 0xa8
 801daec:	187a      	adds	r2, r7, r1
 801daee:	6853      	ldr	r3, [r2, #4]
 801daf0:	6812      	ldr	r2, [r2, #0]
 801daf2:	1912      	adds	r2, r2, r4
 801daf4:	416b      	adcs	r3, r5
 801daf6:	1878      	adds	r0, r7, r1
 801daf8:	6002      	str	r2, [r0, #0]
 801dafa:	6043      	str	r3, [r0, #4]
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 801dafc:	259c      	movs	r5, #156	; 0x9c
 801dafe:	197b      	adds	r3, r7, r5
 801db00:	681b      	ldr	r3, [r3, #0]
 801db02:	220c      	movs	r2, #12
 801db04:	5e9b      	ldrsh	r3, [r3, r2]
 801db06:	643b      	str	r3, [r7, #64]	; 0x40
 801db08:	17db      	asrs	r3, r3, #31
 801db0a:	647b      	str	r3, [r7, #68]	; 0x44
 801db0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801db0e:	00db      	lsls	r3, r3, #3
 801db10:	63fb      	str	r3, [r7, #60]	; 0x3c
 801db12:	2300      	movs	r3, #0
 801db14:	63bb      	str	r3, [r7, #56]	; 0x38
 801db16:	000c      	movs	r4, r1
 801db18:	187b      	adds	r3, r7, r1
 801db1a:	681a      	ldr	r2, [r3, #0]
 801db1c:	685b      	ldr	r3, [r3, #4]
 801db1e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801db20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801db22:	1812      	adds	r2, r2, r0
 801db24:	414b      	adcs	r3, r1
 801db26:	1939      	adds	r1, r7, r4
 801db28:	600a      	str	r2, [r1, #0]
 801db2a:	604b      	str	r3, [r1, #4]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 801db2c:	0034      	movs	r4, r6
 801db2e:	193b      	adds	r3, r7, r4
 801db30:	681a      	ldr	r2, [r3, #0]
 801db32:	685b      	ldr	r3, [r3, #4]
 801db34:	1939      	adds	r1, r7, r4
 801db36:	6808      	ldr	r0, [r1, #0]
 801db38:	6849      	ldr	r1, [r1, #4]
 801db3a:	f7e2 fce5 	bl	8000508 <__aeabi_lmul>
 801db3e:	0002      	movs	r2, r0
 801db40:	000b      	movs	r3, r1
 801db42:	0010      	movs	r0, r2
 801db44:	0019      	movs	r1, r3
 801db46:	197b      	adds	r3, r7, r5
 801db48:	681b      	ldr	r3, [r3, #0]
 801db4a:	220a      	movs	r2, #10
 801db4c:	5e9b      	ldrsh	r3, [r3, r2]
 801db4e:	633b      	str	r3, [r7, #48]	; 0x30
 801db50:	17db      	asrs	r3, r3, #31
 801db52:	637b      	str	r3, [r7, #52]	; 0x34
 801db54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801db56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801db58:	f7e2 fcd6 	bl	8000508 <__aeabi_lmul>
 801db5c:	0002      	movs	r2, r0
 801db5e:	000b      	movs	r3, r1
 801db60:	0619      	lsls	r1, r3, #24
 801db62:	468c      	mov	ip, r1
 801db64:	0a10      	lsrs	r0, r2, #8
 801db66:	2688      	movs	r6, #136	; 0x88
 801db68:	19b9      	adds	r1, r7, r6
 801db6a:	6008      	str	r0, [r1, #0]
 801db6c:	19b8      	adds	r0, r7, r6
 801db6e:	6800      	ldr	r0, [r0, #0]
 801db70:	4661      	mov	r1, ip
 801db72:	4308      	orrs	r0, r1
 801db74:	19b9      	adds	r1, r7, r6
 801db76:	6008      	str	r0, [r1, #0]
 801db78:	121b      	asrs	r3, r3, #8
 801db7a:	228c      	movs	r2, #140	; 0x8c
 801db7c:	18ba      	adds	r2, r7, r2
 801db7e:	6013      	str	r3, [r2, #0]
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 801db80:	197b      	adds	r3, r7, r5
 801db82:	681b      	ldr	r3, [r3, #0]
 801db84:	2208      	movs	r2, #8
 801db86:	5e9b      	ldrsh	r3, [r3, r2]
 801db88:	62bb      	str	r3, [r7, #40]	; 0x28
 801db8a:	17db      	asrs	r3, r3, #31
 801db8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801db8e:	193b      	adds	r3, r7, r4
 801db90:	681a      	ldr	r2, [r3, #0]
 801db92:	685b      	ldr	r3, [r3, #4]
 801db94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801db96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801db98:	f7e2 fcb6 	bl	8000508 <__aeabi_lmul>
 801db9c:	0002      	movs	r2, r0
 801db9e:	000b      	movs	r3, r1
 801dba0:	0d11      	lsrs	r1, r2, #20
 801dba2:	468c      	mov	ip, r1
 801dba4:	0318      	lsls	r0, r3, #12
 801dba6:	2184      	movs	r1, #132	; 0x84
 801dba8:	1879      	adds	r1, r7, r1
 801dbaa:	6008      	str	r0, [r1, #0]
 801dbac:	2084      	movs	r0, #132	; 0x84
 801dbae:	1839      	adds	r1, r7, r0
 801dbb0:	6808      	ldr	r0, [r1, #0]
 801dbb2:	4661      	mov	r1, ip
 801dbb4:	4308      	orrs	r0, r1
 801dbb6:	2184      	movs	r1, #132	; 0x84
 801dbb8:	1879      	adds	r1, r7, r1
 801dbba:	6008      	str	r0, [r1, #0]
 801dbbc:	0313      	lsls	r3, r2, #12
 801dbbe:	2180      	movs	r1, #128	; 0x80
 801dbc0:	187a      	adds	r2, r7, r1
 801dbc2:	6013      	str	r3, [r2, #0]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 801dbc4:	19bb      	adds	r3, r7, r6
 801dbc6:	681a      	ldr	r2, [r3, #0]
 801dbc8:	685b      	ldr	r3, [r3, #4]
 801dbca:	1879      	adds	r1, r7, r1
 801dbcc:	6808      	ldr	r0, [r1, #0]
 801dbce:	6849      	ldr	r1, [r1, #4]
 801dbd0:	1812      	adds	r2, r2, r0
 801dbd2:	414b      	adcs	r3, r1
 801dbd4:	1939      	adds	r1, r7, r4
 801dbd6:	600a      	str	r2, [r1, #0]
 801dbd8:	604b      	str	r3, [r1, #4]
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 801dbda:	193b      	adds	r3, r7, r4
 801dbdc:	6818      	ldr	r0, [r3, #0]
 801dbde:	6859      	ldr	r1, [r3, #4]
 801dbe0:	2200      	movs	r2, #0
 801dbe2:	2380      	movs	r3, #128	; 0x80
 801dbe4:	021b      	lsls	r3, r3, #8
 801dbe6:	1880      	adds	r0, r0, r2
 801dbe8:	4159      	adcs	r1, r3
 801dbea:	197b      	adds	r3, r7, r5
 801dbec:	681b      	ldr	r3, [r3, #0]
 801dbee:	88db      	ldrh	r3, [r3, #6]
 801dbf0:	623b      	str	r3, [r7, #32]
 801dbf2:	2300      	movs	r3, #0
 801dbf4:	627b      	str	r3, [r7, #36]	; 0x24
 801dbf6:	6a3a      	ldr	r2, [r7, #32]
 801dbf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dbfa:	f7e2 fc85 	bl	8000508 <__aeabi_lmul>
 801dbfe:	0002      	movs	r2, r0
 801dc00:	000b      	movs	r3, r1
 801dc02:	1059      	asrs	r1, r3, #1
 801dc04:	1938      	adds	r0, r7, r4
 801dc06:	6001      	str	r1, [r0, #0]
 801dc08:	17db      	asrs	r3, r3, #31
 801dc0a:	21b4      	movs	r1, #180	; 0xb4
 801dc0c:	187a      	adds	r2, r7, r1
 801dc0e:	6013      	str	r3, [r2, #0]

	if (var1 == 0) {
 801dc10:	193b      	adds	r3, r7, r4
 801dc12:	681a      	ldr	r2, [r3, #0]
 801dc14:	187b      	adds	r3, r7, r1
 801dc16:	681b      	ldr	r3, [r3, #0]
 801dc18:	431a      	orrs	r2, r3
 801dc1a:	d101      	bne.n	801dc20 <compensate_pressure+0x1d8>
		return 0;  // avoid exception caused by division by zero
 801dc1c:	2300      	movs	r3, #0
 801dc1e:	e0bc      	b.n	801dd9a <compensate_pressure+0x352>
	}

	p = 1048576 - adc_press;
 801dc20:	2398      	movs	r3, #152	; 0x98
 801dc22:	18fb      	adds	r3, r7, r3
 801dc24:	681a      	ldr	r2, [r3, #0]
 801dc26:	2380      	movs	r3, #128	; 0x80
 801dc28:	035b      	lsls	r3, r3, #13
 801dc2a:	1a9b      	subs	r3, r3, r2
 801dc2c:	24a0      	movs	r4, #160	; 0xa0
 801dc2e:	193a      	adds	r2, r7, r4
 801dc30:	6013      	str	r3, [r2, #0]
 801dc32:	17db      	asrs	r3, r3, #31
 801dc34:	25a4      	movs	r5, #164	; 0xa4
 801dc36:	197a      	adds	r2, r7, r5
 801dc38:	6013      	str	r3, [r2, #0]
	p = (((p << 31) - var2) * 3125) / var1;
 801dc3a:	193b      	adds	r3, r7, r4
 801dc3c:	681b      	ldr	r3, [r3, #0]
 801dc3e:	105b      	asrs	r3, r3, #1
 801dc40:	61fb      	str	r3, [r7, #28]
 801dc42:	193b      	adds	r3, r7, r4
 801dc44:	681b      	ldr	r3, [r3, #0]
 801dc46:	07db      	lsls	r3, r3, #31
 801dc48:	61bb      	str	r3, [r7, #24]
 801dc4a:	20a8      	movs	r0, #168	; 0xa8
 801dc4c:	183a      	adds	r2, r7, r0
 801dc4e:	6853      	ldr	r3, [r2, #4]
 801dc50:	6812      	ldr	r2, [r2, #0]
 801dc52:	69b8      	ldr	r0, [r7, #24]
 801dc54:	69f9      	ldr	r1, [r7, #28]
 801dc56:	1a80      	subs	r0, r0, r2
 801dc58:	4199      	sbcs	r1, r3
 801dc5a:	4a53      	ldr	r2, [pc, #332]	; (801dda8 <compensate_pressure+0x360>)
 801dc5c:	2300      	movs	r3, #0
 801dc5e:	f7e2 fc53 	bl	8000508 <__aeabi_lmul>
 801dc62:	0002      	movs	r2, r0
 801dc64:	000b      	movs	r3, r1
 801dc66:	0010      	movs	r0, r2
 801dc68:	0019      	movs	r1, r3
 801dc6a:	23b0      	movs	r3, #176	; 0xb0
 801dc6c:	18fa      	adds	r2, r7, r3
 801dc6e:	6853      	ldr	r3, [r2, #4]
 801dc70:	6812      	ldr	r2, [r2, #0]
 801dc72:	f7e2 fc05 	bl	8000480 <__aeabi_ldivmod>
 801dc76:	0002      	movs	r2, r0
 801dc78:	000b      	movs	r3, r1
 801dc7a:	1939      	adds	r1, r7, r4
 801dc7c:	600a      	str	r2, [r1, #0]
 801dc7e:	604b      	str	r3, [r1, #4]
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 801dc80:	269c      	movs	r6, #156	; 0x9c
 801dc82:	19ba      	adds	r2, r7, r6
 801dc84:	6813      	ldr	r3, [r2, #0]
 801dc86:	2216      	movs	r2, #22
 801dc88:	5e9b      	ldrsh	r3, [r3, r2]
 801dc8a:	613b      	str	r3, [r7, #16]
 801dc8c:	17db      	asrs	r3, r3, #31
 801dc8e:	617b      	str	r3, [r7, #20]
 801dc90:	197a      	adds	r2, r7, r5
 801dc92:	6813      	ldr	r3, [r2, #0]
 801dc94:	04da      	lsls	r2, r3, #19
 801dc96:	1939      	adds	r1, r7, r4
 801dc98:	680b      	ldr	r3, [r1, #0]
 801dc9a:	0b5b      	lsrs	r3, r3, #13
 801dc9c:	67bb      	str	r3, [r7, #120]	; 0x78
 801dc9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801dca0:	4313      	orrs	r3, r2
 801dca2:	67bb      	str	r3, [r7, #120]	; 0x78
 801dca4:	197a      	adds	r2, r7, r5
 801dca6:	6813      	ldr	r3, [r2, #0]
 801dca8:	135b      	asrs	r3, r3, #13
 801dcaa:	67fb      	str	r3, [r7, #124]	; 0x7c
 801dcac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801dcae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801dcb0:	6938      	ldr	r0, [r7, #16]
 801dcb2:	6979      	ldr	r1, [r7, #20]
 801dcb4:	f7e2 fc28 	bl	8000508 <__aeabi_lmul>
 801dcb8:	0002      	movs	r2, r0
 801dcba:	000b      	movs	r3, r1
 801dcbc:	0010      	movs	r0, r2
 801dcbe:	0019      	movs	r1, r3
 801dcc0:	197a      	adds	r2, r7, r5
 801dcc2:	6813      	ldr	r3, [r2, #0]
 801dcc4:	04da      	lsls	r2, r3, #19
 801dcc6:	193b      	adds	r3, r7, r4
 801dcc8:	681b      	ldr	r3, [r3, #0]
 801dcca:	0b5b      	lsrs	r3, r3, #13
 801dccc:	673b      	str	r3, [r7, #112]	; 0x70
 801dcce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801dcd0:	4313      	orrs	r3, r2
 801dcd2:	673b      	str	r3, [r7, #112]	; 0x70
 801dcd4:	197a      	adds	r2, r7, r5
 801dcd6:	6813      	ldr	r3, [r2, #0]
 801dcd8:	135b      	asrs	r3, r3, #13
 801dcda:	677b      	str	r3, [r7, #116]	; 0x74
 801dcdc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801dcde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801dce0:	f7e2 fc12 	bl	8000508 <__aeabi_lmul>
 801dce4:	0002      	movs	r2, r0
 801dce6:	000b      	movs	r3, r1
 801dce8:	01d9      	lsls	r1, r3, #7
 801dcea:	0e50      	lsrs	r0, r2, #25
 801dcec:	4301      	orrs	r1, r0
 801dcee:	25b0      	movs	r5, #176	; 0xb0
 801dcf0:	1978      	adds	r0, r7, r5
 801dcf2:	6001      	str	r1, [r0, #0]
 801dcf4:	165b      	asrs	r3, r3, #25
 801dcf6:	22b4      	movs	r2, #180	; 0xb4
 801dcf8:	18ba      	adds	r2, r7, r2
 801dcfa:	6013      	str	r3, [r2, #0]
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 801dcfc:	19ba      	adds	r2, r7, r6
 801dcfe:	6813      	ldr	r3, [r2, #0]
 801dd00:	2214      	movs	r2, #20
 801dd02:	5e9b      	ldrsh	r3, [r3, r2]
 801dd04:	60bb      	str	r3, [r7, #8]
 801dd06:	17db      	asrs	r3, r3, #31
 801dd08:	60fb      	str	r3, [r7, #12]
 801dd0a:	193a      	adds	r2, r7, r4
 801dd0c:	6853      	ldr	r3, [r2, #4]
 801dd0e:	6812      	ldr	r2, [r2, #0]
 801dd10:	68b8      	ldr	r0, [r7, #8]
 801dd12:	68f9      	ldr	r1, [r7, #12]
 801dd14:	f7e2 fbf8 	bl	8000508 <__aeabi_lmul>
 801dd18:	0002      	movs	r2, r0
 801dd1a:	000b      	movs	r3, r1
 801dd1c:	0359      	lsls	r1, r3, #13
 801dd1e:	0cd0      	lsrs	r0, r2, #19
 801dd20:	4301      	orrs	r1, r0
 801dd22:	20a8      	movs	r0, #168	; 0xa8
 801dd24:	1838      	adds	r0, r7, r0
 801dd26:	6001      	str	r1, [r0, #0]
 801dd28:	14db      	asrs	r3, r3, #19
 801dd2a:	22ac      	movs	r2, #172	; 0xac
 801dd2c:	18ba      	adds	r2, r7, r2
 801dd2e:	6013      	str	r3, [r2, #0]

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 801dd30:	193a      	adds	r2, r7, r4
 801dd32:	6810      	ldr	r0, [r2, #0]
 801dd34:	6851      	ldr	r1, [r2, #4]
 801dd36:	197a      	adds	r2, r7, r5
 801dd38:	6853      	ldr	r3, [r2, #4]
 801dd3a:	6812      	ldr	r2, [r2, #0]
 801dd3c:	1880      	adds	r0, r0, r2
 801dd3e:	4159      	adcs	r1, r3
 801dd40:	23a8      	movs	r3, #168	; 0xa8
 801dd42:	18fb      	adds	r3, r7, r3
 801dd44:	681a      	ldr	r2, [r3, #0]
 801dd46:	685b      	ldr	r3, [r3, #4]
 801dd48:	1812      	adds	r2, r2, r0
 801dd4a:	414b      	adcs	r3, r1
 801dd4c:	0619      	lsls	r1, r3, #24
 801dd4e:	0a10      	lsrs	r0, r2, #8
 801dd50:	66b8      	str	r0, [r7, #104]	; 0x68
 801dd52:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 801dd54:	4308      	orrs	r0, r1
 801dd56:	66b8      	str	r0, [r7, #104]	; 0x68
 801dd58:	121b      	asrs	r3, r3, #8
 801dd5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 801dd5c:	19bb      	adds	r3, r7, r6
 801dd5e:	681b      	ldr	r3, [r3, #0]
 801dd60:	2212      	movs	r2, #18
 801dd62:	5e9b      	ldrsh	r3, [r3, r2]
 801dd64:	603b      	str	r3, [r7, #0]
 801dd66:	17db      	asrs	r3, r3, #31
 801dd68:	607b      	str	r3, [r7, #4]
 801dd6a:	6839      	ldr	r1, [r7, #0]
 801dd6c:	687a      	ldr	r2, [r7, #4]
 801dd6e:	000b      	movs	r3, r1
 801dd70:	0f1b      	lsrs	r3, r3, #28
 801dd72:	0010      	movs	r0, r2
 801dd74:	0100      	lsls	r0, r0, #4
 801dd76:	6678      	str	r0, [r7, #100]	; 0x64
 801dd78:	6e78      	ldr	r0, [r7, #100]	; 0x64
 801dd7a:	4318      	orrs	r0, r3
 801dd7c:	6678      	str	r0, [r7, #100]	; 0x64
 801dd7e:	000b      	movs	r3, r1
 801dd80:	011b      	lsls	r3, r3, #4
 801dd82:	663b      	str	r3, [r7, #96]	; 0x60
 801dd84:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801dd86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801dd88:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801dd8a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801dd8c:	1812      	adds	r2, r2, r0
 801dd8e:	414b      	adcs	r3, r1
 801dd90:	1939      	adds	r1, r7, r4
 801dd92:	600a      	str	r2, [r1, #0]
 801dd94:	604b      	str	r3, [r1, #4]
	return p;
 801dd96:	193b      	adds	r3, r7, r4
 801dd98:	681b      	ldr	r3, [r3, #0]
}
 801dd9a:	0018      	movs	r0, r3
 801dd9c:	46bd      	mov	sp, r7
 801dd9e:	b02f      	add	sp, #188	; 0xbc
 801dda0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dda2:	46c0      	nop			; (mov r8, r8)
 801dda4:	fffe0c00 	.word	0xfffe0c00
 801dda8:	00000c35 	.word	0x00000c35

0801ddac <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 801ddac:	b580      	push	{r7, lr}
 801ddae:	b086      	sub	sp, #24
 801ddb0:	af00      	add	r7, sp, #0
 801ddb2:	60f8      	str	r0, [r7, #12]
 801ddb4:	60b9      	str	r1, [r7, #8]
 801ddb6:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 801ddb8:	687b      	ldr	r3, [r7, #4]
 801ddba:	4a2c      	ldr	r2, [pc, #176]	; (801de6c <compensate_humidity+0xc0>)
 801ddbc:	4694      	mov	ip, r2
 801ddbe:	4463      	add	r3, ip
 801ddc0:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 801ddc2:	68bb      	ldr	r3, [r7, #8]
 801ddc4:	039a      	lsls	r2, r3, #14
 801ddc6:	68fb      	ldr	r3, [r7, #12]
 801ddc8:	211e      	movs	r1, #30
 801ddca:	5e5b      	ldrsh	r3, [r3, r1]
 801ddcc:	051b      	lsls	r3, r3, #20
 801ddce:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 801ddd0:	68fb      	ldr	r3, [r7, #12]
 801ddd2:	2120      	movs	r1, #32
 801ddd4:	5e5b      	ldrsh	r3, [r3, r1]
 801ddd6:	0019      	movs	r1, r3
 801ddd8:	697b      	ldr	r3, [r7, #20]
 801ddda:	434b      	muls	r3, r1
 801dddc:	1ad3      	subs	r3, r2, r3
 801ddde:	2280      	movs	r2, #128	; 0x80
 801dde0:	01d2      	lsls	r2, r2, #7
 801dde2:	4694      	mov	ip, r2
 801dde4:	4463      	add	r3, ip
 801dde6:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 801dde8:	68fa      	ldr	r2, [r7, #12]
 801ddea:	2122      	movs	r1, #34	; 0x22
 801ddec:	5652      	ldrsb	r2, [r2, r1]
 801ddee:	0011      	movs	r1, r2
 801ddf0:	697a      	ldr	r2, [r7, #20]
 801ddf2:	434a      	muls	r2, r1
 801ddf4:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 801ddf6:	68f9      	ldr	r1, [r7, #12]
 801ddf8:	7f09      	ldrb	r1, [r1, #28]
 801ddfa:	0008      	movs	r0, r1
 801ddfc:	6979      	ldr	r1, [r7, #20]
 801ddfe:	4341      	muls	r1, r0
 801de00:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 801de02:	2080      	movs	r0, #128	; 0x80
 801de04:	0200      	lsls	r0, r0, #8
 801de06:	4684      	mov	ip, r0
 801de08:	4461      	add	r1, ip
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 801de0a:	434a      	muls	r2, r1
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 801de0c:	1292      	asrs	r2, r2, #10
 801de0e:	2180      	movs	r1, #128	; 0x80
 801de10:	0389      	lsls	r1, r1, #14
 801de12:	468c      	mov	ip, r1
 801de14:	4462      	add	r2, ip
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 801de16:	68f9      	ldr	r1, [r7, #12]
 801de18:	201a      	movs	r0, #26
 801de1a:	5e09      	ldrsh	r1, [r1, r0]
 801de1c:	434a      	muls	r2, r1
 801de1e:	2180      	movs	r1, #128	; 0x80
 801de20:	0189      	lsls	r1, r1, #6
 801de22:	468c      	mov	ip, r1
 801de24:	4462      	add	r2, ip
 801de26:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 801de28:	4353      	muls	r3, r2
 801de2a:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 801de2c:	697b      	ldr	r3, [r7, #20]
 801de2e:	13db      	asrs	r3, r3, #15
 801de30:	697a      	ldr	r2, [r7, #20]
 801de32:	13d2      	asrs	r2, r2, #15
 801de34:	4353      	muls	r3, r2
 801de36:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 801de38:	68fa      	ldr	r2, [r7, #12]
 801de3a:	7e12      	ldrb	r2, [r2, #24]
 801de3c:	4353      	muls	r3, r2
 801de3e:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 801de40:	697a      	ldr	r2, [r7, #20]
 801de42:	1ad3      	subs	r3, r2, r3
 801de44:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 801de46:	697b      	ldr	r3, [r7, #20]
 801de48:	2b00      	cmp	r3, #0
 801de4a:	da00      	bge.n	801de4e <compensate_humidity+0xa2>
 801de4c:	2300      	movs	r3, #0
 801de4e:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 801de50:	697b      	ldr	r3, [r7, #20]
 801de52:	22c8      	movs	r2, #200	; 0xc8
 801de54:	0552      	lsls	r2, r2, #21
 801de56:	4293      	cmp	r3, r2
 801de58:	dd01      	ble.n	801de5e <compensate_humidity+0xb2>
 801de5a:	23c8      	movs	r3, #200	; 0xc8
 801de5c:	055b      	lsls	r3, r3, #21
 801de5e:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 801de60:	697b      	ldr	r3, [r7, #20]
 801de62:	131b      	asrs	r3, r3, #12
}
 801de64:	0018      	movs	r0, r3
 801de66:	46bd      	mov	sp, r7
 801de68:	b006      	add	sp, #24
 801de6a:	bd80      	pop	{r7, pc}
 801de6c:	fffed400 	.word	0xfffed400

0801de70 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 801de70:	b590      	push	{r4, r7, lr}
 801de72:	b08d      	sub	sp, #52	; 0x34
 801de74:	af00      	add	r7, sp, #0
 801de76:	60f8      	str	r0, [r7, #12]
 801de78:	60b9      	str	r1, [r7, #8]
 801de7a:	607a      	str	r2, [r7, #4]
 801de7c:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 801de7e:	68fb      	ldr	r3, [r7, #12]
 801de80:	2232      	movs	r2, #50	; 0x32
 801de82:	5c9b      	ldrb	r3, [r3, r2]
 801de84:	2b60      	cmp	r3, #96	; 0x60
 801de86:	d007      	beq.n	801de98 <bmp280_read_fixed+0x28>
		if (humidity)
 801de88:	683b      	ldr	r3, [r7, #0]
 801de8a:	2b00      	cmp	r3, #0
 801de8c:	d002      	beq.n	801de94 <bmp280_read_fixed+0x24>
			*humidity = 0;
 801de8e:	683b      	ldr	r3, [r7, #0]
 801de90:	2200      	movs	r2, #0
 801de92:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 801de94:	2300      	movs	r3, #0
 801de96:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 801de98:	683b      	ldr	r3, [r7, #0]
 801de9a:	2b00      	cmp	r3, #0
 801de9c:	d001      	beq.n	801dea2 <bmp280_read_fixed+0x32>
 801de9e:	2308      	movs	r3, #8
 801dea0:	e000      	b.n	801dea4 <bmp280_read_fixed+0x34>
 801dea2:	2306      	movs	r3, #6
 801dea4:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 801dea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dea8:	b2db      	uxtb	r3, r3
 801deaa:	2218      	movs	r2, #24
 801deac:	18ba      	adds	r2, r7, r2
 801deae:	68f8      	ldr	r0, [r7, #12]
 801deb0:	21f7      	movs	r1, #247	; 0xf7
 801deb2:	f7ff fb9b 	bl	801d5ec <read_data>
 801deb6:	1e03      	subs	r3, r0, #0
 801deb8:	d001      	beq.n	801debe <bmp280_read_fixed+0x4e>
		return false;
 801deba:	2300      	movs	r3, #0
 801debc:	e041      	b.n	801df42 <bmp280_read_fixed+0xd2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 801debe:	2418      	movs	r4, #24
 801dec0:	193b      	adds	r3, r7, r4
 801dec2:	781b      	ldrb	r3, [r3, #0]
 801dec4:	031a      	lsls	r2, r3, #12
 801dec6:	193b      	adds	r3, r7, r4
 801dec8:	785b      	ldrb	r3, [r3, #1]
 801deca:	011b      	lsls	r3, r3, #4
 801decc:	4313      	orrs	r3, r2
 801dece:	193a      	adds	r2, r7, r4
 801ded0:	7892      	ldrb	r2, [r2, #2]
 801ded2:	0912      	lsrs	r2, r2, #4
 801ded4:	b2d2      	uxtb	r2, r2
 801ded6:	4313      	orrs	r3, r2
 801ded8:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 801deda:	193b      	adds	r3, r7, r4
 801dedc:	78db      	ldrb	r3, [r3, #3]
 801dede:	031a      	lsls	r2, r3, #12
 801dee0:	193b      	adds	r3, r7, r4
 801dee2:	791b      	ldrb	r3, [r3, #4]
 801dee4:	011b      	lsls	r3, r3, #4
 801dee6:	4313      	orrs	r3, r2
 801dee8:	193a      	adds	r2, r7, r4
 801deea:	7952      	ldrb	r2, [r2, #5]
 801deec:	0912      	lsrs	r2, r2, #4
 801deee:	b2d2      	uxtb	r2, r2
 801def0:	4313      	orrs	r3, r2
 801def2:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 801def4:	2314      	movs	r3, #20
 801def6:	18fa      	adds	r2, r7, r3
 801def8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801defa:	68fb      	ldr	r3, [r7, #12]
 801defc:	0018      	movs	r0, r3
 801defe:	f7ff fd6e 	bl	801d9de <compensate_temperature>
 801df02:	0002      	movs	r2, r0
 801df04:	68bb      	ldr	r3, [r7, #8]
 801df06:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 801df08:	697a      	ldr	r2, [r7, #20]
 801df0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801df0c:	68fb      	ldr	r3, [r7, #12]
 801df0e:	0018      	movs	r0, r3
 801df10:	f7ff fd9a 	bl	801da48 <compensate_pressure>
 801df14:	0002      	movs	r2, r0
 801df16:	687b      	ldr	r3, [r7, #4]
 801df18:	601a      	str	r2, [r3, #0]

	if (humidity) {
 801df1a:	683b      	ldr	r3, [r7, #0]
 801df1c:	2b00      	cmp	r3, #0
 801df1e:	d00f      	beq.n	801df40 <bmp280_read_fixed+0xd0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 801df20:	193b      	adds	r3, r7, r4
 801df22:	799b      	ldrb	r3, [r3, #6]
 801df24:	021b      	lsls	r3, r3, #8
 801df26:	193a      	adds	r2, r7, r4
 801df28:	79d2      	ldrb	r2, [r2, #7]
 801df2a:	4313      	orrs	r3, r2
 801df2c:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 801df2e:	697a      	ldr	r2, [r7, #20]
 801df30:	6a39      	ldr	r1, [r7, #32]
 801df32:	68fb      	ldr	r3, [r7, #12]
 801df34:	0018      	movs	r0, r3
 801df36:	f7ff ff39 	bl	801ddac <compensate_humidity>
 801df3a:	0002      	movs	r2, r0
 801df3c:	683b      	ldr	r3, [r7, #0]
 801df3e:	601a      	str	r2, [r3, #0]
	}

	return true;
 801df40:	2301      	movs	r3, #1
}
 801df42:	0018      	movs	r0, r3
 801df44:	46bd      	mov	sp, r7
 801df46:	b00d      	add	sp, #52	; 0x34
 801df48:	bd90      	pop	{r4, r7, pc}
	...

0801df4c <__errno>:
 801df4c:	4b01      	ldr	r3, [pc, #4]	; (801df54 <__errno+0x8>)
 801df4e:	6818      	ldr	r0, [r3, #0]
 801df50:	4770      	bx	lr
 801df52:	46c0      	nop			; (mov r8, r8)
 801df54:	200001d8 	.word	0x200001d8

0801df58 <__libc_init_array>:
 801df58:	b570      	push	{r4, r5, r6, lr}
 801df5a:	2600      	movs	r6, #0
 801df5c:	4d0c      	ldr	r5, [pc, #48]	; (801df90 <__libc_init_array+0x38>)
 801df5e:	4c0d      	ldr	r4, [pc, #52]	; (801df94 <__libc_init_array+0x3c>)
 801df60:	1b64      	subs	r4, r4, r5
 801df62:	10a4      	asrs	r4, r4, #2
 801df64:	42a6      	cmp	r6, r4
 801df66:	d109      	bne.n	801df7c <__libc_init_array+0x24>
 801df68:	2600      	movs	r6, #0
 801df6a:	f000 fdc5 	bl	801eaf8 <_init>
 801df6e:	4d0a      	ldr	r5, [pc, #40]	; (801df98 <__libc_init_array+0x40>)
 801df70:	4c0a      	ldr	r4, [pc, #40]	; (801df9c <__libc_init_array+0x44>)
 801df72:	1b64      	subs	r4, r4, r5
 801df74:	10a4      	asrs	r4, r4, #2
 801df76:	42a6      	cmp	r6, r4
 801df78:	d105      	bne.n	801df86 <__libc_init_array+0x2e>
 801df7a:	bd70      	pop	{r4, r5, r6, pc}
 801df7c:	00b3      	lsls	r3, r6, #2
 801df7e:	58eb      	ldr	r3, [r5, r3]
 801df80:	4798      	blx	r3
 801df82:	3601      	adds	r6, #1
 801df84:	e7ee      	b.n	801df64 <__libc_init_array+0xc>
 801df86:	00b3      	lsls	r3, r6, #2
 801df88:	58eb      	ldr	r3, [r5, r3]
 801df8a:	4798      	blx	r3
 801df8c:	3601      	adds	r6, #1
 801df8e:	e7f2      	b.n	801df76 <__libc_init_array+0x1e>
 801df90:	08020170 	.word	0x08020170
 801df94:	08020170 	.word	0x08020170
 801df98:	08020170 	.word	0x08020170
 801df9c:	08020174 	.word	0x08020174

0801dfa0 <memcpy>:
 801dfa0:	2300      	movs	r3, #0
 801dfa2:	b510      	push	{r4, lr}
 801dfa4:	429a      	cmp	r2, r3
 801dfa6:	d100      	bne.n	801dfaa <memcpy+0xa>
 801dfa8:	bd10      	pop	{r4, pc}
 801dfaa:	5ccc      	ldrb	r4, [r1, r3]
 801dfac:	54c4      	strb	r4, [r0, r3]
 801dfae:	3301      	adds	r3, #1
 801dfb0:	e7f8      	b.n	801dfa4 <memcpy+0x4>

0801dfb2 <memset>:
 801dfb2:	0003      	movs	r3, r0
 801dfb4:	1882      	adds	r2, r0, r2
 801dfb6:	4293      	cmp	r3, r2
 801dfb8:	d100      	bne.n	801dfbc <memset+0xa>
 801dfba:	4770      	bx	lr
 801dfbc:	7019      	strb	r1, [r3, #0]
 801dfbe:	3301      	adds	r3, #1
 801dfc0:	e7f9      	b.n	801dfb6 <memset+0x4>
	...

0801dfc4 <_puts_r>:
 801dfc4:	b570      	push	{r4, r5, r6, lr}
 801dfc6:	0005      	movs	r5, r0
 801dfc8:	000e      	movs	r6, r1
 801dfca:	2800      	cmp	r0, #0
 801dfcc:	d004      	beq.n	801dfd8 <_puts_r+0x14>
 801dfce:	6983      	ldr	r3, [r0, #24]
 801dfd0:	2b00      	cmp	r3, #0
 801dfd2:	d101      	bne.n	801dfd8 <_puts_r+0x14>
 801dfd4:	f000 fa6e 	bl	801e4b4 <__sinit>
 801dfd8:	69ab      	ldr	r3, [r5, #24]
 801dfda:	68ac      	ldr	r4, [r5, #8]
 801dfdc:	2b00      	cmp	r3, #0
 801dfde:	d102      	bne.n	801dfe6 <_puts_r+0x22>
 801dfe0:	0028      	movs	r0, r5
 801dfe2:	f000 fa67 	bl	801e4b4 <__sinit>
 801dfe6:	4b2d      	ldr	r3, [pc, #180]	; (801e09c <_puts_r+0xd8>)
 801dfe8:	429c      	cmp	r4, r3
 801dfea:	d122      	bne.n	801e032 <_puts_r+0x6e>
 801dfec:	686c      	ldr	r4, [r5, #4]
 801dfee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801dff0:	07db      	lsls	r3, r3, #31
 801dff2:	d405      	bmi.n	801e000 <_puts_r+0x3c>
 801dff4:	89a3      	ldrh	r3, [r4, #12]
 801dff6:	059b      	lsls	r3, r3, #22
 801dff8:	d402      	bmi.n	801e000 <_puts_r+0x3c>
 801dffa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dffc:	f000 fafb 	bl	801e5f6 <__retarget_lock_acquire_recursive>
 801e000:	89a3      	ldrh	r3, [r4, #12]
 801e002:	071b      	lsls	r3, r3, #28
 801e004:	d502      	bpl.n	801e00c <_puts_r+0x48>
 801e006:	6923      	ldr	r3, [r4, #16]
 801e008:	2b00      	cmp	r3, #0
 801e00a:	d129      	bne.n	801e060 <_puts_r+0x9c>
 801e00c:	0021      	movs	r1, r4
 801e00e:	0028      	movs	r0, r5
 801e010:	f000 f8aa 	bl	801e168 <__swsetup_r>
 801e014:	2800      	cmp	r0, #0
 801e016:	d023      	beq.n	801e060 <_puts_r+0x9c>
 801e018:	2501      	movs	r5, #1
 801e01a:	426d      	negs	r5, r5
 801e01c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e01e:	07db      	lsls	r3, r3, #31
 801e020:	d405      	bmi.n	801e02e <_puts_r+0x6a>
 801e022:	89a3      	ldrh	r3, [r4, #12]
 801e024:	059b      	lsls	r3, r3, #22
 801e026:	d402      	bmi.n	801e02e <_puts_r+0x6a>
 801e028:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e02a:	f000 fae5 	bl	801e5f8 <__retarget_lock_release_recursive>
 801e02e:	0028      	movs	r0, r5
 801e030:	bd70      	pop	{r4, r5, r6, pc}
 801e032:	4b1b      	ldr	r3, [pc, #108]	; (801e0a0 <_puts_r+0xdc>)
 801e034:	429c      	cmp	r4, r3
 801e036:	d101      	bne.n	801e03c <_puts_r+0x78>
 801e038:	68ac      	ldr	r4, [r5, #8]
 801e03a:	e7d8      	b.n	801dfee <_puts_r+0x2a>
 801e03c:	4b19      	ldr	r3, [pc, #100]	; (801e0a4 <_puts_r+0xe0>)
 801e03e:	429c      	cmp	r4, r3
 801e040:	d1d5      	bne.n	801dfee <_puts_r+0x2a>
 801e042:	68ec      	ldr	r4, [r5, #12]
 801e044:	e7d3      	b.n	801dfee <_puts_r+0x2a>
 801e046:	3601      	adds	r6, #1
 801e048:	60a3      	str	r3, [r4, #8]
 801e04a:	2b00      	cmp	r3, #0
 801e04c:	da04      	bge.n	801e058 <_puts_r+0x94>
 801e04e:	69a2      	ldr	r2, [r4, #24]
 801e050:	429a      	cmp	r2, r3
 801e052:	dc16      	bgt.n	801e082 <_puts_r+0xbe>
 801e054:	290a      	cmp	r1, #10
 801e056:	d014      	beq.n	801e082 <_puts_r+0xbe>
 801e058:	6823      	ldr	r3, [r4, #0]
 801e05a:	1c5a      	adds	r2, r3, #1
 801e05c:	6022      	str	r2, [r4, #0]
 801e05e:	7019      	strb	r1, [r3, #0]
 801e060:	68a3      	ldr	r3, [r4, #8]
 801e062:	7831      	ldrb	r1, [r6, #0]
 801e064:	3b01      	subs	r3, #1
 801e066:	2900      	cmp	r1, #0
 801e068:	d1ed      	bne.n	801e046 <_puts_r+0x82>
 801e06a:	60a3      	str	r3, [r4, #8]
 801e06c:	2b00      	cmp	r3, #0
 801e06e:	da0f      	bge.n	801e090 <_puts_r+0xcc>
 801e070:	0028      	movs	r0, r5
 801e072:	0022      	movs	r2, r4
 801e074:	310a      	adds	r1, #10
 801e076:	f000 f821 	bl	801e0bc <__swbuf_r>
 801e07a:	250a      	movs	r5, #10
 801e07c:	1c43      	adds	r3, r0, #1
 801e07e:	d1cd      	bne.n	801e01c <_puts_r+0x58>
 801e080:	e7ca      	b.n	801e018 <_puts_r+0x54>
 801e082:	0022      	movs	r2, r4
 801e084:	0028      	movs	r0, r5
 801e086:	f000 f819 	bl	801e0bc <__swbuf_r>
 801e08a:	1c43      	adds	r3, r0, #1
 801e08c:	d1e8      	bne.n	801e060 <_puts_r+0x9c>
 801e08e:	e7c3      	b.n	801e018 <_puts_r+0x54>
 801e090:	250a      	movs	r5, #10
 801e092:	6823      	ldr	r3, [r4, #0]
 801e094:	1c5a      	adds	r2, r3, #1
 801e096:	6022      	str	r2, [r4, #0]
 801e098:	701d      	strb	r5, [r3, #0]
 801e09a:	e7bf      	b.n	801e01c <_puts_r+0x58>
 801e09c:	08020128 	.word	0x08020128
 801e0a0:	08020148 	.word	0x08020148
 801e0a4:	08020108 	.word	0x08020108

0801e0a8 <puts>:
 801e0a8:	b510      	push	{r4, lr}
 801e0aa:	4b03      	ldr	r3, [pc, #12]	; (801e0b8 <puts+0x10>)
 801e0ac:	0001      	movs	r1, r0
 801e0ae:	6818      	ldr	r0, [r3, #0]
 801e0b0:	f7ff ff88 	bl	801dfc4 <_puts_r>
 801e0b4:	bd10      	pop	{r4, pc}
 801e0b6:	46c0      	nop			; (mov r8, r8)
 801e0b8:	200001d8 	.word	0x200001d8

0801e0bc <__swbuf_r>:
 801e0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e0be:	0005      	movs	r5, r0
 801e0c0:	000e      	movs	r6, r1
 801e0c2:	0014      	movs	r4, r2
 801e0c4:	2800      	cmp	r0, #0
 801e0c6:	d004      	beq.n	801e0d2 <__swbuf_r+0x16>
 801e0c8:	6983      	ldr	r3, [r0, #24]
 801e0ca:	2b00      	cmp	r3, #0
 801e0cc:	d101      	bne.n	801e0d2 <__swbuf_r+0x16>
 801e0ce:	f000 f9f1 	bl	801e4b4 <__sinit>
 801e0d2:	4b22      	ldr	r3, [pc, #136]	; (801e15c <__swbuf_r+0xa0>)
 801e0d4:	429c      	cmp	r4, r3
 801e0d6:	d12e      	bne.n	801e136 <__swbuf_r+0x7a>
 801e0d8:	686c      	ldr	r4, [r5, #4]
 801e0da:	69a3      	ldr	r3, [r4, #24]
 801e0dc:	60a3      	str	r3, [r4, #8]
 801e0de:	89a3      	ldrh	r3, [r4, #12]
 801e0e0:	071b      	lsls	r3, r3, #28
 801e0e2:	d532      	bpl.n	801e14a <__swbuf_r+0x8e>
 801e0e4:	6923      	ldr	r3, [r4, #16]
 801e0e6:	2b00      	cmp	r3, #0
 801e0e8:	d02f      	beq.n	801e14a <__swbuf_r+0x8e>
 801e0ea:	6823      	ldr	r3, [r4, #0]
 801e0ec:	6922      	ldr	r2, [r4, #16]
 801e0ee:	b2f7      	uxtb	r7, r6
 801e0f0:	1a98      	subs	r0, r3, r2
 801e0f2:	6963      	ldr	r3, [r4, #20]
 801e0f4:	b2f6      	uxtb	r6, r6
 801e0f6:	4283      	cmp	r3, r0
 801e0f8:	dc05      	bgt.n	801e106 <__swbuf_r+0x4a>
 801e0fa:	0021      	movs	r1, r4
 801e0fc:	0028      	movs	r0, r5
 801e0fe:	f000 f937 	bl	801e370 <_fflush_r>
 801e102:	2800      	cmp	r0, #0
 801e104:	d127      	bne.n	801e156 <__swbuf_r+0x9a>
 801e106:	68a3      	ldr	r3, [r4, #8]
 801e108:	3001      	adds	r0, #1
 801e10a:	3b01      	subs	r3, #1
 801e10c:	60a3      	str	r3, [r4, #8]
 801e10e:	6823      	ldr	r3, [r4, #0]
 801e110:	1c5a      	adds	r2, r3, #1
 801e112:	6022      	str	r2, [r4, #0]
 801e114:	701f      	strb	r7, [r3, #0]
 801e116:	6963      	ldr	r3, [r4, #20]
 801e118:	4283      	cmp	r3, r0
 801e11a:	d004      	beq.n	801e126 <__swbuf_r+0x6a>
 801e11c:	89a3      	ldrh	r3, [r4, #12]
 801e11e:	07db      	lsls	r3, r3, #31
 801e120:	d507      	bpl.n	801e132 <__swbuf_r+0x76>
 801e122:	2e0a      	cmp	r6, #10
 801e124:	d105      	bne.n	801e132 <__swbuf_r+0x76>
 801e126:	0021      	movs	r1, r4
 801e128:	0028      	movs	r0, r5
 801e12a:	f000 f921 	bl	801e370 <_fflush_r>
 801e12e:	2800      	cmp	r0, #0
 801e130:	d111      	bne.n	801e156 <__swbuf_r+0x9a>
 801e132:	0030      	movs	r0, r6
 801e134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e136:	4b0a      	ldr	r3, [pc, #40]	; (801e160 <__swbuf_r+0xa4>)
 801e138:	429c      	cmp	r4, r3
 801e13a:	d101      	bne.n	801e140 <__swbuf_r+0x84>
 801e13c:	68ac      	ldr	r4, [r5, #8]
 801e13e:	e7cc      	b.n	801e0da <__swbuf_r+0x1e>
 801e140:	4b08      	ldr	r3, [pc, #32]	; (801e164 <__swbuf_r+0xa8>)
 801e142:	429c      	cmp	r4, r3
 801e144:	d1c9      	bne.n	801e0da <__swbuf_r+0x1e>
 801e146:	68ec      	ldr	r4, [r5, #12]
 801e148:	e7c7      	b.n	801e0da <__swbuf_r+0x1e>
 801e14a:	0021      	movs	r1, r4
 801e14c:	0028      	movs	r0, r5
 801e14e:	f000 f80b 	bl	801e168 <__swsetup_r>
 801e152:	2800      	cmp	r0, #0
 801e154:	d0c9      	beq.n	801e0ea <__swbuf_r+0x2e>
 801e156:	2601      	movs	r6, #1
 801e158:	4276      	negs	r6, r6
 801e15a:	e7ea      	b.n	801e132 <__swbuf_r+0x76>
 801e15c:	08020128 	.word	0x08020128
 801e160:	08020148 	.word	0x08020148
 801e164:	08020108 	.word	0x08020108

0801e168 <__swsetup_r>:
 801e168:	4b37      	ldr	r3, [pc, #220]	; (801e248 <__swsetup_r+0xe0>)
 801e16a:	b570      	push	{r4, r5, r6, lr}
 801e16c:	681d      	ldr	r5, [r3, #0]
 801e16e:	0006      	movs	r6, r0
 801e170:	000c      	movs	r4, r1
 801e172:	2d00      	cmp	r5, #0
 801e174:	d005      	beq.n	801e182 <__swsetup_r+0x1a>
 801e176:	69ab      	ldr	r3, [r5, #24]
 801e178:	2b00      	cmp	r3, #0
 801e17a:	d102      	bne.n	801e182 <__swsetup_r+0x1a>
 801e17c:	0028      	movs	r0, r5
 801e17e:	f000 f999 	bl	801e4b4 <__sinit>
 801e182:	4b32      	ldr	r3, [pc, #200]	; (801e24c <__swsetup_r+0xe4>)
 801e184:	429c      	cmp	r4, r3
 801e186:	d10f      	bne.n	801e1a8 <__swsetup_r+0x40>
 801e188:	686c      	ldr	r4, [r5, #4]
 801e18a:	230c      	movs	r3, #12
 801e18c:	5ee2      	ldrsh	r2, [r4, r3]
 801e18e:	b293      	uxth	r3, r2
 801e190:	0711      	lsls	r1, r2, #28
 801e192:	d42d      	bmi.n	801e1f0 <__swsetup_r+0x88>
 801e194:	06d9      	lsls	r1, r3, #27
 801e196:	d411      	bmi.n	801e1bc <__swsetup_r+0x54>
 801e198:	2309      	movs	r3, #9
 801e19a:	2001      	movs	r0, #1
 801e19c:	6033      	str	r3, [r6, #0]
 801e19e:	3337      	adds	r3, #55	; 0x37
 801e1a0:	4313      	orrs	r3, r2
 801e1a2:	81a3      	strh	r3, [r4, #12]
 801e1a4:	4240      	negs	r0, r0
 801e1a6:	bd70      	pop	{r4, r5, r6, pc}
 801e1a8:	4b29      	ldr	r3, [pc, #164]	; (801e250 <__swsetup_r+0xe8>)
 801e1aa:	429c      	cmp	r4, r3
 801e1ac:	d101      	bne.n	801e1b2 <__swsetup_r+0x4a>
 801e1ae:	68ac      	ldr	r4, [r5, #8]
 801e1b0:	e7eb      	b.n	801e18a <__swsetup_r+0x22>
 801e1b2:	4b28      	ldr	r3, [pc, #160]	; (801e254 <__swsetup_r+0xec>)
 801e1b4:	429c      	cmp	r4, r3
 801e1b6:	d1e8      	bne.n	801e18a <__swsetup_r+0x22>
 801e1b8:	68ec      	ldr	r4, [r5, #12]
 801e1ba:	e7e6      	b.n	801e18a <__swsetup_r+0x22>
 801e1bc:	075b      	lsls	r3, r3, #29
 801e1be:	d513      	bpl.n	801e1e8 <__swsetup_r+0x80>
 801e1c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e1c2:	2900      	cmp	r1, #0
 801e1c4:	d008      	beq.n	801e1d8 <__swsetup_r+0x70>
 801e1c6:	0023      	movs	r3, r4
 801e1c8:	3344      	adds	r3, #68	; 0x44
 801e1ca:	4299      	cmp	r1, r3
 801e1cc:	d002      	beq.n	801e1d4 <__swsetup_r+0x6c>
 801e1ce:	0030      	movs	r0, r6
 801e1d0:	f000 fa80 	bl	801e6d4 <_free_r>
 801e1d4:	2300      	movs	r3, #0
 801e1d6:	6363      	str	r3, [r4, #52]	; 0x34
 801e1d8:	2224      	movs	r2, #36	; 0x24
 801e1da:	89a3      	ldrh	r3, [r4, #12]
 801e1dc:	4393      	bics	r3, r2
 801e1de:	81a3      	strh	r3, [r4, #12]
 801e1e0:	2300      	movs	r3, #0
 801e1e2:	6063      	str	r3, [r4, #4]
 801e1e4:	6923      	ldr	r3, [r4, #16]
 801e1e6:	6023      	str	r3, [r4, #0]
 801e1e8:	2308      	movs	r3, #8
 801e1ea:	89a2      	ldrh	r2, [r4, #12]
 801e1ec:	4313      	orrs	r3, r2
 801e1ee:	81a3      	strh	r3, [r4, #12]
 801e1f0:	6923      	ldr	r3, [r4, #16]
 801e1f2:	2b00      	cmp	r3, #0
 801e1f4:	d10b      	bne.n	801e20e <__swsetup_r+0xa6>
 801e1f6:	21a0      	movs	r1, #160	; 0xa0
 801e1f8:	2280      	movs	r2, #128	; 0x80
 801e1fa:	89a3      	ldrh	r3, [r4, #12]
 801e1fc:	0089      	lsls	r1, r1, #2
 801e1fe:	0092      	lsls	r2, r2, #2
 801e200:	400b      	ands	r3, r1
 801e202:	4293      	cmp	r3, r2
 801e204:	d003      	beq.n	801e20e <__swsetup_r+0xa6>
 801e206:	0021      	movs	r1, r4
 801e208:	0030      	movs	r0, r6
 801e20a:	f000 fa1f 	bl	801e64c <__smakebuf_r>
 801e20e:	220c      	movs	r2, #12
 801e210:	5ea3      	ldrsh	r3, [r4, r2]
 801e212:	2001      	movs	r0, #1
 801e214:	001a      	movs	r2, r3
 801e216:	b299      	uxth	r1, r3
 801e218:	4002      	ands	r2, r0
 801e21a:	4203      	tst	r3, r0
 801e21c:	d00f      	beq.n	801e23e <__swsetup_r+0xd6>
 801e21e:	2200      	movs	r2, #0
 801e220:	60a2      	str	r2, [r4, #8]
 801e222:	6962      	ldr	r2, [r4, #20]
 801e224:	4252      	negs	r2, r2
 801e226:	61a2      	str	r2, [r4, #24]
 801e228:	2000      	movs	r0, #0
 801e22a:	6922      	ldr	r2, [r4, #16]
 801e22c:	4282      	cmp	r2, r0
 801e22e:	d1ba      	bne.n	801e1a6 <__swsetup_r+0x3e>
 801e230:	060a      	lsls	r2, r1, #24
 801e232:	d5b8      	bpl.n	801e1a6 <__swsetup_r+0x3e>
 801e234:	2240      	movs	r2, #64	; 0x40
 801e236:	4313      	orrs	r3, r2
 801e238:	81a3      	strh	r3, [r4, #12]
 801e23a:	3801      	subs	r0, #1
 801e23c:	e7b3      	b.n	801e1a6 <__swsetup_r+0x3e>
 801e23e:	0788      	lsls	r0, r1, #30
 801e240:	d400      	bmi.n	801e244 <__swsetup_r+0xdc>
 801e242:	6962      	ldr	r2, [r4, #20]
 801e244:	60a2      	str	r2, [r4, #8]
 801e246:	e7ef      	b.n	801e228 <__swsetup_r+0xc0>
 801e248:	200001d8 	.word	0x200001d8
 801e24c:	08020128 	.word	0x08020128
 801e250:	08020148 	.word	0x08020148
 801e254:	08020108 	.word	0x08020108

0801e258 <__sflush_r>:
 801e258:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e25a:	898b      	ldrh	r3, [r1, #12]
 801e25c:	0005      	movs	r5, r0
 801e25e:	000c      	movs	r4, r1
 801e260:	071a      	lsls	r2, r3, #28
 801e262:	d45f      	bmi.n	801e324 <__sflush_r+0xcc>
 801e264:	684a      	ldr	r2, [r1, #4]
 801e266:	2a00      	cmp	r2, #0
 801e268:	dc04      	bgt.n	801e274 <__sflush_r+0x1c>
 801e26a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 801e26c:	2a00      	cmp	r2, #0
 801e26e:	dc01      	bgt.n	801e274 <__sflush_r+0x1c>
 801e270:	2000      	movs	r0, #0
 801e272:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801e274:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 801e276:	2f00      	cmp	r7, #0
 801e278:	d0fa      	beq.n	801e270 <__sflush_r+0x18>
 801e27a:	2200      	movs	r2, #0
 801e27c:	2180      	movs	r1, #128	; 0x80
 801e27e:	682e      	ldr	r6, [r5, #0]
 801e280:	602a      	str	r2, [r5, #0]
 801e282:	001a      	movs	r2, r3
 801e284:	0149      	lsls	r1, r1, #5
 801e286:	400a      	ands	r2, r1
 801e288:	420b      	tst	r3, r1
 801e28a:	d034      	beq.n	801e2f6 <__sflush_r+0x9e>
 801e28c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801e28e:	89a3      	ldrh	r3, [r4, #12]
 801e290:	075b      	lsls	r3, r3, #29
 801e292:	d506      	bpl.n	801e2a2 <__sflush_r+0x4a>
 801e294:	6863      	ldr	r3, [r4, #4]
 801e296:	1ac0      	subs	r0, r0, r3
 801e298:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e29a:	2b00      	cmp	r3, #0
 801e29c:	d001      	beq.n	801e2a2 <__sflush_r+0x4a>
 801e29e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e2a0:	1ac0      	subs	r0, r0, r3
 801e2a2:	0002      	movs	r2, r0
 801e2a4:	6a21      	ldr	r1, [r4, #32]
 801e2a6:	2300      	movs	r3, #0
 801e2a8:	0028      	movs	r0, r5
 801e2aa:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 801e2ac:	47b8      	blx	r7
 801e2ae:	89a1      	ldrh	r1, [r4, #12]
 801e2b0:	1c43      	adds	r3, r0, #1
 801e2b2:	d106      	bne.n	801e2c2 <__sflush_r+0x6a>
 801e2b4:	682b      	ldr	r3, [r5, #0]
 801e2b6:	2b1d      	cmp	r3, #29
 801e2b8:	d831      	bhi.n	801e31e <__sflush_r+0xc6>
 801e2ba:	4a2c      	ldr	r2, [pc, #176]	; (801e36c <__sflush_r+0x114>)
 801e2bc:	40da      	lsrs	r2, r3
 801e2be:	07d3      	lsls	r3, r2, #31
 801e2c0:	d52d      	bpl.n	801e31e <__sflush_r+0xc6>
 801e2c2:	2300      	movs	r3, #0
 801e2c4:	6063      	str	r3, [r4, #4]
 801e2c6:	6923      	ldr	r3, [r4, #16]
 801e2c8:	6023      	str	r3, [r4, #0]
 801e2ca:	04cb      	lsls	r3, r1, #19
 801e2cc:	d505      	bpl.n	801e2da <__sflush_r+0x82>
 801e2ce:	1c43      	adds	r3, r0, #1
 801e2d0:	d102      	bne.n	801e2d8 <__sflush_r+0x80>
 801e2d2:	682b      	ldr	r3, [r5, #0]
 801e2d4:	2b00      	cmp	r3, #0
 801e2d6:	d100      	bne.n	801e2da <__sflush_r+0x82>
 801e2d8:	6560      	str	r0, [r4, #84]	; 0x54
 801e2da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e2dc:	602e      	str	r6, [r5, #0]
 801e2de:	2900      	cmp	r1, #0
 801e2e0:	d0c6      	beq.n	801e270 <__sflush_r+0x18>
 801e2e2:	0023      	movs	r3, r4
 801e2e4:	3344      	adds	r3, #68	; 0x44
 801e2e6:	4299      	cmp	r1, r3
 801e2e8:	d002      	beq.n	801e2f0 <__sflush_r+0x98>
 801e2ea:	0028      	movs	r0, r5
 801e2ec:	f000 f9f2 	bl	801e6d4 <_free_r>
 801e2f0:	2000      	movs	r0, #0
 801e2f2:	6360      	str	r0, [r4, #52]	; 0x34
 801e2f4:	e7bd      	b.n	801e272 <__sflush_r+0x1a>
 801e2f6:	2301      	movs	r3, #1
 801e2f8:	0028      	movs	r0, r5
 801e2fa:	6a21      	ldr	r1, [r4, #32]
 801e2fc:	47b8      	blx	r7
 801e2fe:	1c43      	adds	r3, r0, #1
 801e300:	d1c5      	bne.n	801e28e <__sflush_r+0x36>
 801e302:	682b      	ldr	r3, [r5, #0]
 801e304:	2b00      	cmp	r3, #0
 801e306:	d0c2      	beq.n	801e28e <__sflush_r+0x36>
 801e308:	2b1d      	cmp	r3, #29
 801e30a:	d001      	beq.n	801e310 <__sflush_r+0xb8>
 801e30c:	2b16      	cmp	r3, #22
 801e30e:	d101      	bne.n	801e314 <__sflush_r+0xbc>
 801e310:	602e      	str	r6, [r5, #0]
 801e312:	e7ad      	b.n	801e270 <__sflush_r+0x18>
 801e314:	2340      	movs	r3, #64	; 0x40
 801e316:	89a2      	ldrh	r2, [r4, #12]
 801e318:	4313      	orrs	r3, r2
 801e31a:	81a3      	strh	r3, [r4, #12]
 801e31c:	e7a9      	b.n	801e272 <__sflush_r+0x1a>
 801e31e:	2340      	movs	r3, #64	; 0x40
 801e320:	430b      	orrs	r3, r1
 801e322:	e7fa      	b.n	801e31a <__sflush_r+0xc2>
 801e324:	690f      	ldr	r7, [r1, #16]
 801e326:	2f00      	cmp	r7, #0
 801e328:	d0a2      	beq.n	801e270 <__sflush_r+0x18>
 801e32a:	680a      	ldr	r2, [r1, #0]
 801e32c:	600f      	str	r7, [r1, #0]
 801e32e:	1bd2      	subs	r2, r2, r7
 801e330:	9201      	str	r2, [sp, #4]
 801e332:	2200      	movs	r2, #0
 801e334:	079b      	lsls	r3, r3, #30
 801e336:	d100      	bne.n	801e33a <__sflush_r+0xe2>
 801e338:	694a      	ldr	r2, [r1, #20]
 801e33a:	60a2      	str	r2, [r4, #8]
 801e33c:	9b01      	ldr	r3, [sp, #4]
 801e33e:	2b00      	cmp	r3, #0
 801e340:	dc00      	bgt.n	801e344 <__sflush_r+0xec>
 801e342:	e795      	b.n	801e270 <__sflush_r+0x18>
 801e344:	003a      	movs	r2, r7
 801e346:	0028      	movs	r0, r5
 801e348:	9b01      	ldr	r3, [sp, #4]
 801e34a:	6a21      	ldr	r1, [r4, #32]
 801e34c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801e34e:	47b0      	blx	r6
 801e350:	2800      	cmp	r0, #0
 801e352:	dc06      	bgt.n	801e362 <__sflush_r+0x10a>
 801e354:	2340      	movs	r3, #64	; 0x40
 801e356:	2001      	movs	r0, #1
 801e358:	89a2      	ldrh	r2, [r4, #12]
 801e35a:	4240      	negs	r0, r0
 801e35c:	4313      	orrs	r3, r2
 801e35e:	81a3      	strh	r3, [r4, #12]
 801e360:	e787      	b.n	801e272 <__sflush_r+0x1a>
 801e362:	9b01      	ldr	r3, [sp, #4]
 801e364:	183f      	adds	r7, r7, r0
 801e366:	1a1b      	subs	r3, r3, r0
 801e368:	9301      	str	r3, [sp, #4]
 801e36a:	e7e7      	b.n	801e33c <__sflush_r+0xe4>
 801e36c:	20400001 	.word	0x20400001

0801e370 <_fflush_r>:
 801e370:	690b      	ldr	r3, [r1, #16]
 801e372:	b570      	push	{r4, r5, r6, lr}
 801e374:	0005      	movs	r5, r0
 801e376:	000c      	movs	r4, r1
 801e378:	2b00      	cmp	r3, #0
 801e37a:	d102      	bne.n	801e382 <_fflush_r+0x12>
 801e37c:	2500      	movs	r5, #0
 801e37e:	0028      	movs	r0, r5
 801e380:	bd70      	pop	{r4, r5, r6, pc}
 801e382:	2800      	cmp	r0, #0
 801e384:	d004      	beq.n	801e390 <_fflush_r+0x20>
 801e386:	6983      	ldr	r3, [r0, #24]
 801e388:	2b00      	cmp	r3, #0
 801e38a:	d101      	bne.n	801e390 <_fflush_r+0x20>
 801e38c:	f000 f892 	bl	801e4b4 <__sinit>
 801e390:	4b14      	ldr	r3, [pc, #80]	; (801e3e4 <_fflush_r+0x74>)
 801e392:	429c      	cmp	r4, r3
 801e394:	d11b      	bne.n	801e3ce <_fflush_r+0x5e>
 801e396:	686c      	ldr	r4, [r5, #4]
 801e398:	220c      	movs	r2, #12
 801e39a:	5ea3      	ldrsh	r3, [r4, r2]
 801e39c:	2b00      	cmp	r3, #0
 801e39e:	d0ed      	beq.n	801e37c <_fflush_r+0xc>
 801e3a0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801e3a2:	07d2      	lsls	r2, r2, #31
 801e3a4:	d404      	bmi.n	801e3b0 <_fflush_r+0x40>
 801e3a6:	059b      	lsls	r3, r3, #22
 801e3a8:	d402      	bmi.n	801e3b0 <_fflush_r+0x40>
 801e3aa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e3ac:	f000 f923 	bl	801e5f6 <__retarget_lock_acquire_recursive>
 801e3b0:	0028      	movs	r0, r5
 801e3b2:	0021      	movs	r1, r4
 801e3b4:	f7ff ff50 	bl	801e258 <__sflush_r>
 801e3b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e3ba:	0005      	movs	r5, r0
 801e3bc:	07db      	lsls	r3, r3, #31
 801e3be:	d4de      	bmi.n	801e37e <_fflush_r+0xe>
 801e3c0:	89a3      	ldrh	r3, [r4, #12]
 801e3c2:	059b      	lsls	r3, r3, #22
 801e3c4:	d4db      	bmi.n	801e37e <_fflush_r+0xe>
 801e3c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e3c8:	f000 f916 	bl	801e5f8 <__retarget_lock_release_recursive>
 801e3cc:	e7d7      	b.n	801e37e <_fflush_r+0xe>
 801e3ce:	4b06      	ldr	r3, [pc, #24]	; (801e3e8 <_fflush_r+0x78>)
 801e3d0:	429c      	cmp	r4, r3
 801e3d2:	d101      	bne.n	801e3d8 <_fflush_r+0x68>
 801e3d4:	68ac      	ldr	r4, [r5, #8]
 801e3d6:	e7df      	b.n	801e398 <_fflush_r+0x28>
 801e3d8:	4b04      	ldr	r3, [pc, #16]	; (801e3ec <_fflush_r+0x7c>)
 801e3da:	429c      	cmp	r4, r3
 801e3dc:	d1dc      	bne.n	801e398 <_fflush_r+0x28>
 801e3de:	68ec      	ldr	r4, [r5, #12]
 801e3e0:	e7da      	b.n	801e398 <_fflush_r+0x28>
 801e3e2:	46c0      	nop			; (mov r8, r8)
 801e3e4:	08020128 	.word	0x08020128
 801e3e8:	08020148 	.word	0x08020148
 801e3ec:	08020108 	.word	0x08020108

0801e3f0 <std>:
 801e3f0:	2300      	movs	r3, #0
 801e3f2:	b510      	push	{r4, lr}
 801e3f4:	0004      	movs	r4, r0
 801e3f6:	6003      	str	r3, [r0, #0]
 801e3f8:	6043      	str	r3, [r0, #4]
 801e3fa:	6083      	str	r3, [r0, #8]
 801e3fc:	8181      	strh	r1, [r0, #12]
 801e3fe:	6643      	str	r3, [r0, #100]	; 0x64
 801e400:	0019      	movs	r1, r3
 801e402:	81c2      	strh	r2, [r0, #14]
 801e404:	6103      	str	r3, [r0, #16]
 801e406:	6143      	str	r3, [r0, #20]
 801e408:	6183      	str	r3, [r0, #24]
 801e40a:	2208      	movs	r2, #8
 801e40c:	305c      	adds	r0, #92	; 0x5c
 801e40e:	f7ff fdd0 	bl	801dfb2 <memset>
 801e412:	4b05      	ldr	r3, [pc, #20]	; (801e428 <std+0x38>)
 801e414:	6263      	str	r3, [r4, #36]	; 0x24
 801e416:	4b05      	ldr	r3, [pc, #20]	; (801e42c <std+0x3c>)
 801e418:	6224      	str	r4, [r4, #32]
 801e41a:	62a3      	str	r3, [r4, #40]	; 0x28
 801e41c:	4b04      	ldr	r3, [pc, #16]	; (801e430 <std+0x40>)
 801e41e:	62e3      	str	r3, [r4, #44]	; 0x2c
 801e420:	4b04      	ldr	r3, [pc, #16]	; (801e434 <std+0x44>)
 801e422:	6323      	str	r3, [r4, #48]	; 0x30
 801e424:	bd10      	pop	{r4, pc}
 801e426:	46c0      	nop			; (mov r8, r8)
 801e428:	0801e849 	.word	0x0801e849
 801e42c:	0801e871 	.word	0x0801e871
 801e430:	0801e8a9 	.word	0x0801e8a9
 801e434:	0801e8d5 	.word	0x0801e8d5

0801e438 <_cleanup_r>:
 801e438:	b510      	push	{r4, lr}
 801e43a:	4902      	ldr	r1, [pc, #8]	; (801e444 <_cleanup_r+0xc>)
 801e43c:	f000 f8ba 	bl	801e5b4 <_fwalk_reent>
 801e440:	bd10      	pop	{r4, pc}
 801e442:	46c0      	nop			; (mov r8, r8)
 801e444:	0801e371 	.word	0x0801e371

0801e448 <__sfmoreglue>:
 801e448:	b570      	push	{r4, r5, r6, lr}
 801e44a:	2568      	movs	r5, #104	; 0x68
 801e44c:	1e4a      	subs	r2, r1, #1
 801e44e:	4355      	muls	r5, r2
 801e450:	000e      	movs	r6, r1
 801e452:	0029      	movs	r1, r5
 801e454:	3174      	adds	r1, #116	; 0x74
 801e456:	f000 f987 	bl	801e768 <_malloc_r>
 801e45a:	1e04      	subs	r4, r0, #0
 801e45c:	d008      	beq.n	801e470 <__sfmoreglue+0x28>
 801e45e:	2100      	movs	r1, #0
 801e460:	002a      	movs	r2, r5
 801e462:	6001      	str	r1, [r0, #0]
 801e464:	6046      	str	r6, [r0, #4]
 801e466:	300c      	adds	r0, #12
 801e468:	60a0      	str	r0, [r4, #8]
 801e46a:	3268      	adds	r2, #104	; 0x68
 801e46c:	f7ff fda1 	bl	801dfb2 <memset>
 801e470:	0020      	movs	r0, r4
 801e472:	bd70      	pop	{r4, r5, r6, pc}

0801e474 <__sfp_lock_acquire>:
 801e474:	b510      	push	{r4, lr}
 801e476:	4802      	ldr	r0, [pc, #8]	; (801e480 <__sfp_lock_acquire+0xc>)
 801e478:	f000 f8bd 	bl	801e5f6 <__retarget_lock_acquire_recursive>
 801e47c:	bd10      	pop	{r4, pc}
 801e47e:	46c0      	nop			; (mov r8, r8)
 801e480:	20001804 	.word	0x20001804

0801e484 <__sfp_lock_release>:
 801e484:	b510      	push	{r4, lr}
 801e486:	4802      	ldr	r0, [pc, #8]	; (801e490 <__sfp_lock_release+0xc>)
 801e488:	f000 f8b6 	bl	801e5f8 <__retarget_lock_release_recursive>
 801e48c:	bd10      	pop	{r4, pc}
 801e48e:	46c0      	nop			; (mov r8, r8)
 801e490:	20001804 	.word	0x20001804

0801e494 <__sinit_lock_acquire>:
 801e494:	b510      	push	{r4, lr}
 801e496:	4802      	ldr	r0, [pc, #8]	; (801e4a0 <__sinit_lock_acquire+0xc>)
 801e498:	f000 f8ad 	bl	801e5f6 <__retarget_lock_acquire_recursive>
 801e49c:	bd10      	pop	{r4, pc}
 801e49e:	46c0      	nop			; (mov r8, r8)
 801e4a0:	200017ff 	.word	0x200017ff

0801e4a4 <__sinit_lock_release>:
 801e4a4:	b510      	push	{r4, lr}
 801e4a6:	4802      	ldr	r0, [pc, #8]	; (801e4b0 <__sinit_lock_release+0xc>)
 801e4a8:	f000 f8a6 	bl	801e5f8 <__retarget_lock_release_recursive>
 801e4ac:	bd10      	pop	{r4, pc}
 801e4ae:	46c0      	nop			; (mov r8, r8)
 801e4b0:	200017ff 	.word	0x200017ff

0801e4b4 <__sinit>:
 801e4b4:	b513      	push	{r0, r1, r4, lr}
 801e4b6:	0004      	movs	r4, r0
 801e4b8:	f7ff ffec 	bl	801e494 <__sinit_lock_acquire>
 801e4bc:	69a3      	ldr	r3, [r4, #24]
 801e4be:	2b00      	cmp	r3, #0
 801e4c0:	d002      	beq.n	801e4c8 <__sinit+0x14>
 801e4c2:	f7ff ffef 	bl	801e4a4 <__sinit_lock_release>
 801e4c6:	bd13      	pop	{r0, r1, r4, pc}
 801e4c8:	64a3      	str	r3, [r4, #72]	; 0x48
 801e4ca:	64e3      	str	r3, [r4, #76]	; 0x4c
 801e4cc:	6523      	str	r3, [r4, #80]	; 0x50
 801e4ce:	4b13      	ldr	r3, [pc, #76]	; (801e51c <__sinit+0x68>)
 801e4d0:	4a13      	ldr	r2, [pc, #76]	; (801e520 <__sinit+0x6c>)
 801e4d2:	681b      	ldr	r3, [r3, #0]
 801e4d4:	62a2      	str	r2, [r4, #40]	; 0x28
 801e4d6:	9301      	str	r3, [sp, #4]
 801e4d8:	42a3      	cmp	r3, r4
 801e4da:	d101      	bne.n	801e4e0 <__sinit+0x2c>
 801e4dc:	2301      	movs	r3, #1
 801e4de:	61a3      	str	r3, [r4, #24]
 801e4e0:	0020      	movs	r0, r4
 801e4e2:	f000 f81f 	bl	801e524 <__sfp>
 801e4e6:	6060      	str	r0, [r4, #4]
 801e4e8:	0020      	movs	r0, r4
 801e4ea:	f000 f81b 	bl	801e524 <__sfp>
 801e4ee:	60a0      	str	r0, [r4, #8]
 801e4f0:	0020      	movs	r0, r4
 801e4f2:	f000 f817 	bl	801e524 <__sfp>
 801e4f6:	2200      	movs	r2, #0
 801e4f8:	2104      	movs	r1, #4
 801e4fa:	60e0      	str	r0, [r4, #12]
 801e4fc:	6860      	ldr	r0, [r4, #4]
 801e4fe:	f7ff ff77 	bl	801e3f0 <std>
 801e502:	2201      	movs	r2, #1
 801e504:	2109      	movs	r1, #9
 801e506:	68a0      	ldr	r0, [r4, #8]
 801e508:	f7ff ff72 	bl	801e3f0 <std>
 801e50c:	2202      	movs	r2, #2
 801e50e:	2112      	movs	r1, #18
 801e510:	68e0      	ldr	r0, [r4, #12]
 801e512:	f7ff ff6d 	bl	801e3f0 <std>
 801e516:	2301      	movs	r3, #1
 801e518:	61a3      	str	r3, [r4, #24]
 801e51a:	e7d2      	b.n	801e4c2 <__sinit+0xe>
 801e51c:	08020104 	.word	0x08020104
 801e520:	0801e439 	.word	0x0801e439

0801e524 <__sfp>:
 801e524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e526:	0007      	movs	r7, r0
 801e528:	f7ff ffa4 	bl	801e474 <__sfp_lock_acquire>
 801e52c:	4b1f      	ldr	r3, [pc, #124]	; (801e5ac <__sfp+0x88>)
 801e52e:	681e      	ldr	r6, [r3, #0]
 801e530:	69b3      	ldr	r3, [r6, #24]
 801e532:	2b00      	cmp	r3, #0
 801e534:	d102      	bne.n	801e53c <__sfp+0x18>
 801e536:	0030      	movs	r0, r6
 801e538:	f7ff ffbc 	bl	801e4b4 <__sinit>
 801e53c:	3648      	adds	r6, #72	; 0x48
 801e53e:	68b4      	ldr	r4, [r6, #8]
 801e540:	6873      	ldr	r3, [r6, #4]
 801e542:	3b01      	subs	r3, #1
 801e544:	d504      	bpl.n	801e550 <__sfp+0x2c>
 801e546:	6833      	ldr	r3, [r6, #0]
 801e548:	2b00      	cmp	r3, #0
 801e54a:	d022      	beq.n	801e592 <__sfp+0x6e>
 801e54c:	6836      	ldr	r6, [r6, #0]
 801e54e:	e7f6      	b.n	801e53e <__sfp+0x1a>
 801e550:	220c      	movs	r2, #12
 801e552:	5ea5      	ldrsh	r5, [r4, r2]
 801e554:	2d00      	cmp	r5, #0
 801e556:	d11a      	bne.n	801e58e <__sfp+0x6a>
 801e558:	0020      	movs	r0, r4
 801e55a:	4b15      	ldr	r3, [pc, #84]	; (801e5b0 <__sfp+0x8c>)
 801e55c:	3058      	adds	r0, #88	; 0x58
 801e55e:	60e3      	str	r3, [r4, #12]
 801e560:	6665      	str	r5, [r4, #100]	; 0x64
 801e562:	f000 f847 	bl	801e5f4 <__retarget_lock_init_recursive>
 801e566:	f7ff ff8d 	bl	801e484 <__sfp_lock_release>
 801e56a:	0020      	movs	r0, r4
 801e56c:	2208      	movs	r2, #8
 801e56e:	0029      	movs	r1, r5
 801e570:	6025      	str	r5, [r4, #0]
 801e572:	60a5      	str	r5, [r4, #8]
 801e574:	6065      	str	r5, [r4, #4]
 801e576:	6125      	str	r5, [r4, #16]
 801e578:	6165      	str	r5, [r4, #20]
 801e57a:	61a5      	str	r5, [r4, #24]
 801e57c:	305c      	adds	r0, #92	; 0x5c
 801e57e:	f7ff fd18 	bl	801dfb2 <memset>
 801e582:	6365      	str	r5, [r4, #52]	; 0x34
 801e584:	63a5      	str	r5, [r4, #56]	; 0x38
 801e586:	64a5      	str	r5, [r4, #72]	; 0x48
 801e588:	64e5      	str	r5, [r4, #76]	; 0x4c
 801e58a:	0020      	movs	r0, r4
 801e58c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e58e:	3468      	adds	r4, #104	; 0x68
 801e590:	e7d7      	b.n	801e542 <__sfp+0x1e>
 801e592:	2104      	movs	r1, #4
 801e594:	0038      	movs	r0, r7
 801e596:	f7ff ff57 	bl	801e448 <__sfmoreglue>
 801e59a:	1e04      	subs	r4, r0, #0
 801e59c:	6030      	str	r0, [r6, #0]
 801e59e:	d1d5      	bne.n	801e54c <__sfp+0x28>
 801e5a0:	f7ff ff70 	bl	801e484 <__sfp_lock_release>
 801e5a4:	230c      	movs	r3, #12
 801e5a6:	603b      	str	r3, [r7, #0]
 801e5a8:	e7ef      	b.n	801e58a <__sfp+0x66>
 801e5aa:	46c0      	nop			; (mov r8, r8)
 801e5ac:	08020104 	.word	0x08020104
 801e5b0:	ffff0001 	.word	0xffff0001

0801e5b4 <_fwalk_reent>:
 801e5b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e5b6:	0004      	movs	r4, r0
 801e5b8:	0006      	movs	r6, r0
 801e5ba:	2700      	movs	r7, #0
 801e5bc:	9101      	str	r1, [sp, #4]
 801e5be:	3448      	adds	r4, #72	; 0x48
 801e5c0:	6863      	ldr	r3, [r4, #4]
 801e5c2:	68a5      	ldr	r5, [r4, #8]
 801e5c4:	9300      	str	r3, [sp, #0]
 801e5c6:	9b00      	ldr	r3, [sp, #0]
 801e5c8:	3b01      	subs	r3, #1
 801e5ca:	9300      	str	r3, [sp, #0]
 801e5cc:	d504      	bpl.n	801e5d8 <_fwalk_reent+0x24>
 801e5ce:	6824      	ldr	r4, [r4, #0]
 801e5d0:	2c00      	cmp	r4, #0
 801e5d2:	d1f5      	bne.n	801e5c0 <_fwalk_reent+0xc>
 801e5d4:	0038      	movs	r0, r7
 801e5d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801e5d8:	89ab      	ldrh	r3, [r5, #12]
 801e5da:	2b01      	cmp	r3, #1
 801e5dc:	d908      	bls.n	801e5f0 <_fwalk_reent+0x3c>
 801e5de:	220e      	movs	r2, #14
 801e5e0:	5eab      	ldrsh	r3, [r5, r2]
 801e5e2:	3301      	adds	r3, #1
 801e5e4:	d004      	beq.n	801e5f0 <_fwalk_reent+0x3c>
 801e5e6:	0029      	movs	r1, r5
 801e5e8:	0030      	movs	r0, r6
 801e5ea:	9b01      	ldr	r3, [sp, #4]
 801e5ec:	4798      	blx	r3
 801e5ee:	4307      	orrs	r7, r0
 801e5f0:	3568      	adds	r5, #104	; 0x68
 801e5f2:	e7e8      	b.n	801e5c6 <_fwalk_reent+0x12>

0801e5f4 <__retarget_lock_init_recursive>:
 801e5f4:	4770      	bx	lr

0801e5f6 <__retarget_lock_acquire_recursive>:
 801e5f6:	4770      	bx	lr

0801e5f8 <__retarget_lock_release_recursive>:
 801e5f8:	4770      	bx	lr
	...

0801e5fc <__swhatbuf_r>:
 801e5fc:	b570      	push	{r4, r5, r6, lr}
 801e5fe:	000e      	movs	r6, r1
 801e600:	001d      	movs	r5, r3
 801e602:	230e      	movs	r3, #14
 801e604:	5ec9      	ldrsh	r1, [r1, r3]
 801e606:	0014      	movs	r4, r2
 801e608:	b096      	sub	sp, #88	; 0x58
 801e60a:	2900      	cmp	r1, #0
 801e60c:	da07      	bge.n	801e61e <__swhatbuf_r+0x22>
 801e60e:	2300      	movs	r3, #0
 801e610:	602b      	str	r3, [r5, #0]
 801e612:	89b3      	ldrh	r3, [r6, #12]
 801e614:	061b      	lsls	r3, r3, #24
 801e616:	d411      	bmi.n	801e63c <__swhatbuf_r+0x40>
 801e618:	2380      	movs	r3, #128	; 0x80
 801e61a:	00db      	lsls	r3, r3, #3
 801e61c:	e00f      	b.n	801e63e <__swhatbuf_r+0x42>
 801e61e:	466a      	mov	r2, sp
 801e620:	f000 f984 	bl	801e92c <_fstat_r>
 801e624:	2800      	cmp	r0, #0
 801e626:	dbf2      	blt.n	801e60e <__swhatbuf_r+0x12>
 801e628:	23f0      	movs	r3, #240	; 0xf0
 801e62a:	9901      	ldr	r1, [sp, #4]
 801e62c:	021b      	lsls	r3, r3, #8
 801e62e:	4019      	ands	r1, r3
 801e630:	4b05      	ldr	r3, [pc, #20]	; (801e648 <__swhatbuf_r+0x4c>)
 801e632:	18c9      	adds	r1, r1, r3
 801e634:	424b      	negs	r3, r1
 801e636:	4159      	adcs	r1, r3
 801e638:	6029      	str	r1, [r5, #0]
 801e63a:	e7ed      	b.n	801e618 <__swhatbuf_r+0x1c>
 801e63c:	2340      	movs	r3, #64	; 0x40
 801e63e:	2000      	movs	r0, #0
 801e640:	6023      	str	r3, [r4, #0]
 801e642:	b016      	add	sp, #88	; 0x58
 801e644:	bd70      	pop	{r4, r5, r6, pc}
 801e646:	46c0      	nop			; (mov r8, r8)
 801e648:	ffffe000 	.word	0xffffe000

0801e64c <__smakebuf_r>:
 801e64c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e64e:	2602      	movs	r6, #2
 801e650:	898b      	ldrh	r3, [r1, #12]
 801e652:	0005      	movs	r5, r0
 801e654:	000c      	movs	r4, r1
 801e656:	4233      	tst	r3, r6
 801e658:	d006      	beq.n	801e668 <__smakebuf_r+0x1c>
 801e65a:	0023      	movs	r3, r4
 801e65c:	3347      	adds	r3, #71	; 0x47
 801e65e:	6023      	str	r3, [r4, #0]
 801e660:	6123      	str	r3, [r4, #16]
 801e662:	2301      	movs	r3, #1
 801e664:	6163      	str	r3, [r4, #20]
 801e666:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 801e668:	466a      	mov	r2, sp
 801e66a:	ab01      	add	r3, sp, #4
 801e66c:	f7ff ffc6 	bl	801e5fc <__swhatbuf_r>
 801e670:	9900      	ldr	r1, [sp, #0]
 801e672:	0007      	movs	r7, r0
 801e674:	0028      	movs	r0, r5
 801e676:	f000 f877 	bl	801e768 <_malloc_r>
 801e67a:	2800      	cmp	r0, #0
 801e67c:	d108      	bne.n	801e690 <__smakebuf_r+0x44>
 801e67e:	220c      	movs	r2, #12
 801e680:	5ea3      	ldrsh	r3, [r4, r2]
 801e682:	059a      	lsls	r2, r3, #22
 801e684:	d4ef      	bmi.n	801e666 <__smakebuf_r+0x1a>
 801e686:	2203      	movs	r2, #3
 801e688:	4393      	bics	r3, r2
 801e68a:	431e      	orrs	r6, r3
 801e68c:	81a6      	strh	r6, [r4, #12]
 801e68e:	e7e4      	b.n	801e65a <__smakebuf_r+0xe>
 801e690:	4b0f      	ldr	r3, [pc, #60]	; (801e6d0 <__smakebuf_r+0x84>)
 801e692:	62ab      	str	r3, [r5, #40]	; 0x28
 801e694:	2380      	movs	r3, #128	; 0x80
 801e696:	89a2      	ldrh	r2, [r4, #12]
 801e698:	6020      	str	r0, [r4, #0]
 801e69a:	4313      	orrs	r3, r2
 801e69c:	81a3      	strh	r3, [r4, #12]
 801e69e:	9b00      	ldr	r3, [sp, #0]
 801e6a0:	6120      	str	r0, [r4, #16]
 801e6a2:	6163      	str	r3, [r4, #20]
 801e6a4:	9b01      	ldr	r3, [sp, #4]
 801e6a6:	2b00      	cmp	r3, #0
 801e6a8:	d00d      	beq.n	801e6c6 <__smakebuf_r+0x7a>
 801e6aa:	0028      	movs	r0, r5
 801e6ac:	230e      	movs	r3, #14
 801e6ae:	5ee1      	ldrsh	r1, [r4, r3]
 801e6b0:	f000 f94e 	bl	801e950 <_isatty_r>
 801e6b4:	2800      	cmp	r0, #0
 801e6b6:	d006      	beq.n	801e6c6 <__smakebuf_r+0x7a>
 801e6b8:	2203      	movs	r2, #3
 801e6ba:	89a3      	ldrh	r3, [r4, #12]
 801e6bc:	4393      	bics	r3, r2
 801e6be:	001a      	movs	r2, r3
 801e6c0:	2301      	movs	r3, #1
 801e6c2:	4313      	orrs	r3, r2
 801e6c4:	81a3      	strh	r3, [r4, #12]
 801e6c6:	89a0      	ldrh	r0, [r4, #12]
 801e6c8:	4307      	orrs	r7, r0
 801e6ca:	81a7      	strh	r7, [r4, #12]
 801e6cc:	e7cb      	b.n	801e666 <__smakebuf_r+0x1a>
 801e6ce:	46c0      	nop			; (mov r8, r8)
 801e6d0:	0801e439 	.word	0x0801e439

0801e6d4 <_free_r>:
 801e6d4:	b570      	push	{r4, r5, r6, lr}
 801e6d6:	0005      	movs	r5, r0
 801e6d8:	2900      	cmp	r1, #0
 801e6da:	d010      	beq.n	801e6fe <_free_r+0x2a>
 801e6dc:	1f0c      	subs	r4, r1, #4
 801e6de:	6823      	ldr	r3, [r4, #0]
 801e6e0:	2b00      	cmp	r3, #0
 801e6e2:	da00      	bge.n	801e6e6 <_free_r+0x12>
 801e6e4:	18e4      	adds	r4, r4, r3
 801e6e6:	0028      	movs	r0, r5
 801e6e8:	f000 f958 	bl	801e99c <__malloc_lock>
 801e6ec:	4a1d      	ldr	r2, [pc, #116]	; (801e764 <_free_r+0x90>)
 801e6ee:	6813      	ldr	r3, [r2, #0]
 801e6f0:	2b00      	cmp	r3, #0
 801e6f2:	d105      	bne.n	801e700 <_free_r+0x2c>
 801e6f4:	6063      	str	r3, [r4, #4]
 801e6f6:	6014      	str	r4, [r2, #0]
 801e6f8:	0028      	movs	r0, r5
 801e6fa:	f000 f957 	bl	801e9ac <__malloc_unlock>
 801e6fe:	bd70      	pop	{r4, r5, r6, pc}
 801e700:	42a3      	cmp	r3, r4
 801e702:	d908      	bls.n	801e716 <_free_r+0x42>
 801e704:	6821      	ldr	r1, [r4, #0]
 801e706:	1860      	adds	r0, r4, r1
 801e708:	4283      	cmp	r3, r0
 801e70a:	d1f3      	bne.n	801e6f4 <_free_r+0x20>
 801e70c:	6818      	ldr	r0, [r3, #0]
 801e70e:	685b      	ldr	r3, [r3, #4]
 801e710:	1841      	adds	r1, r0, r1
 801e712:	6021      	str	r1, [r4, #0]
 801e714:	e7ee      	b.n	801e6f4 <_free_r+0x20>
 801e716:	001a      	movs	r2, r3
 801e718:	685b      	ldr	r3, [r3, #4]
 801e71a:	2b00      	cmp	r3, #0
 801e71c:	d001      	beq.n	801e722 <_free_r+0x4e>
 801e71e:	42a3      	cmp	r3, r4
 801e720:	d9f9      	bls.n	801e716 <_free_r+0x42>
 801e722:	6811      	ldr	r1, [r2, #0]
 801e724:	1850      	adds	r0, r2, r1
 801e726:	42a0      	cmp	r0, r4
 801e728:	d10b      	bne.n	801e742 <_free_r+0x6e>
 801e72a:	6820      	ldr	r0, [r4, #0]
 801e72c:	1809      	adds	r1, r1, r0
 801e72e:	1850      	adds	r0, r2, r1
 801e730:	6011      	str	r1, [r2, #0]
 801e732:	4283      	cmp	r3, r0
 801e734:	d1e0      	bne.n	801e6f8 <_free_r+0x24>
 801e736:	6818      	ldr	r0, [r3, #0]
 801e738:	685b      	ldr	r3, [r3, #4]
 801e73a:	1841      	adds	r1, r0, r1
 801e73c:	6011      	str	r1, [r2, #0]
 801e73e:	6053      	str	r3, [r2, #4]
 801e740:	e7da      	b.n	801e6f8 <_free_r+0x24>
 801e742:	42a0      	cmp	r0, r4
 801e744:	d902      	bls.n	801e74c <_free_r+0x78>
 801e746:	230c      	movs	r3, #12
 801e748:	602b      	str	r3, [r5, #0]
 801e74a:	e7d5      	b.n	801e6f8 <_free_r+0x24>
 801e74c:	6821      	ldr	r1, [r4, #0]
 801e74e:	1860      	adds	r0, r4, r1
 801e750:	4283      	cmp	r3, r0
 801e752:	d103      	bne.n	801e75c <_free_r+0x88>
 801e754:	6818      	ldr	r0, [r3, #0]
 801e756:	685b      	ldr	r3, [r3, #4]
 801e758:	1841      	adds	r1, r0, r1
 801e75a:	6021      	str	r1, [r4, #0]
 801e75c:	6063      	str	r3, [r4, #4]
 801e75e:	6054      	str	r4, [r2, #4]
 801e760:	e7ca      	b.n	801e6f8 <_free_r+0x24>
 801e762:	46c0      	nop			; (mov r8, r8)
 801e764:	20001348 	.word	0x20001348

0801e768 <_malloc_r>:
 801e768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e76a:	2303      	movs	r3, #3
 801e76c:	1ccd      	adds	r5, r1, #3
 801e76e:	439d      	bics	r5, r3
 801e770:	3508      	adds	r5, #8
 801e772:	0006      	movs	r6, r0
 801e774:	2d0c      	cmp	r5, #12
 801e776:	d21f      	bcs.n	801e7b8 <_malloc_r+0x50>
 801e778:	250c      	movs	r5, #12
 801e77a:	42a9      	cmp	r1, r5
 801e77c:	d81e      	bhi.n	801e7bc <_malloc_r+0x54>
 801e77e:	0030      	movs	r0, r6
 801e780:	f000 f90c 	bl	801e99c <__malloc_lock>
 801e784:	4925      	ldr	r1, [pc, #148]	; (801e81c <_malloc_r+0xb4>)
 801e786:	680a      	ldr	r2, [r1, #0]
 801e788:	0014      	movs	r4, r2
 801e78a:	2c00      	cmp	r4, #0
 801e78c:	d11a      	bne.n	801e7c4 <_malloc_r+0x5c>
 801e78e:	4f24      	ldr	r7, [pc, #144]	; (801e820 <_malloc_r+0xb8>)
 801e790:	683b      	ldr	r3, [r7, #0]
 801e792:	2b00      	cmp	r3, #0
 801e794:	d104      	bne.n	801e7a0 <_malloc_r+0x38>
 801e796:	0021      	movs	r1, r4
 801e798:	0030      	movs	r0, r6
 801e79a:	f000 f843 	bl	801e824 <_sbrk_r>
 801e79e:	6038      	str	r0, [r7, #0]
 801e7a0:	0029      	movs	r1, r5
 801e7a2:	0030      	movs	r0, r6
 801e7a4:	f000 f83e 	bl	801e824 <_sbrk_r>
 801e7a8:	1c43      	adds	r3, r0, #1
 801e7aa:	d12b      	bne.n	801e804 <_malloc_r+0x9c>
 801e7ac:	230c      	movs	r3, #12
 801e7ae:	0030      	movs	r0, r6
 801e7b0:	6033      	str	r3, [r6, #0]
 801e7b2:	f000 f8fb 	bl	801e9ac <__malloc_unlock>
 801e7b6:	e003      	b.n	801e7c0 <_malloc_r+0x58>
 801e7b8:	2d00      	cmp	r5, #0
 801e7ba:	dade      	bge.n	801e77a <_malloc_r+0x12>
 801e7bc:	230c      	movs	r3, #12
 801e7be:	6033      	str	r3, [r6, #0]
 801e7c0:	2000      	movs	r0, #0
 801e7c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e7c4:	6823      	ldr	r3, [r4, #0]
 801e7c6:	1b5b      	subs	r3, r3, r5
 801e7c8:	d419      	bmi.n	801e7fe <_malloc_r+0x96>
 801e7ca:	2b0b      	cmp	r3, #11
 801e7cc:	d903      	bls.n	801e7d6 <_malloc_r+0x6e>
 801e7ce:	6023      	str	r3, [r4, #0]
 801e7d0:	18e4      	adds	r4, r4, r3
 801e7d2:	6025      	str	r5, [r4, #0]
 801e7d4:	e003      	b.n	801e7de <_malloc_r+0x76>
 801e7d6:	6863      	ldr	r3, [r4, #4]
 801e7d8:	42a2      	cmp	r2, r4
 801e7da:	d10e      	bne.n	801e7fa <_malloc_r+0x92>
 801e7dc:	600b      	str	r3, [r1, #0]
 801e7de:	0030      	movs	r0, r6
 801e7e0:	f000 f8e4 	bl	801e9ac <__malloc_unlock>
 801e7e4:	0020      	movs	r0, r4
 801e7e6:	2207      	movs	r2, #7
 801e7e8:	300b      	adds	r0, #11
 801e7ea:	1d23      	adds	r3, r4, #4
 801e7ec:	4390      	bics	r0, r2
 801e7ee:	1ac2      	subs	r2, r0, r3
 801e7f0:	4298      	cmp	r0, r3
 801e7f2:	d0e6      	beq.n	801e7c2 <_malloc_r+0x5a>
 801e7f4:	1a1b      	subs	r3, r3, r0
 801e7f6:	50a3      	str	r3, [r4, r2]
 801e7f8:	e7e3      	b.n	801e7c2 <_malloc_r+0x5a>
 801e7fa:	6053      	str	r3, [r2, #4]
 801e7fc:	e7ef      	b.n	801e7de <_malloc_r+0x76>
 801e7fe:	0022      	movs	r2, r4
 801e800:	6864      	ldr	r4, [r4, #4]
 801e802:	e7c2      	b.n	801e78a <_malloc_r+0x22>
 801e804:	2303      	movs	r3, #3
 801e806:	1cc4      	adds	r4, r0, #3
 801e808:	439c      	bics	r4, r3
 801e80a:	42a0      	cmp	r0, r4
 801e80c:	d0e1      	beq.n	801e7d2 <_malloc_r+0x6a>
 801e80e:	1a21      	subs	r1, r4, r0
 801e810:	0030      	movs	r0, r6
 801e812:	f000 f807 	bl	801e824 <_sbrk_r>
 801e816:	1c43      	adds	r3, r0, #1
 801e818:	d1db      	bne.n	801e7d2 <_malloc_r+0x6a>
 801e81a:	e7c7      	b.n	801e7ac <_malloc_r+0x44>
 801e81c:	20001348 	.word	0x20001348
 801e820:	2000134c 	.word	0x2000134c

0801e824 <_sbrk_r>:
 801e824:	2300      	movs	r3, #0
 801e826:	b570      	push	{r4, r5, r6, lr}
 801e828:	4d06      	ldr	r5, [pc, #24]	; (801e844 <_sbrk_r+0x20>)
 801e82a:	0004      	movs	r4, r0
 801e82c:	0008      	movs	r0, r1
 801e82e:	602b      	str	r3, [r5, #0]
 801e830:	f7e6 fdd0 	bl	80053d4 <_sbrk>
 801e834:	1c43      	adds	r3, r0, #1
 801e836:	d103      	bne.n	801e840 <_sbrk_r+0x1c>
 801e838:	682b      	ldr	r3, [r5, #0]
 801e83a:	2b00      	cmp	r3, #0
 801e83c:	d000      	beq.n	801e840 <_sbrk_r+0x1c>
 801e83e:	6023      	str	r3, [r4, #0]
 801e840:	bd70      	pop	{r4, r5, r6, pc}
 801e842:	46c0      	nop			; (mov r8, r8)
 801e844:	20001808 	.word	0x20001808

0801e848 <__sread>:
 801e848:	b570      	push	{r4, r5, r6, lr}
 801e84a:	000c      	movs	r4, r1
 801e84c:	250e      	movs	r5, #14
 801e84e:	5f49      	ldrsh	r1, [r1, r5]
 801e850:	f000 f8b4 	bl	801e9bc <_read_r>
 801e854:	2800      	cmp	r0, #0
 801e856:	db03      	blt.n	801e860 <__sread+0x18>
 801e858:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801e85a:	181b      	adds	r3, r3, r0
 801e85c:	6563      	str	r3, [r4, #84]	; 0x54
 801e85e:	bd70      	pop	{r4, r5, r6, pc}
 801e860:	89a3      	ldrh	r3, [r4, #12]
 801e862:	4a02      	ldr	r2, [pc, #8]	; (801e86c <__sread+0x24>)
 801e864:	4013      	ands	r3, r2
 801e866:	81a3      	strh	r3, [r4, #12]
 801e868:	e7f9      	b.n	801e85e <__sread+0x16>
 801e86a:	46c0      	nop			; (mov r8, r8)
 801e86c:	ffffefff 	.word	0xffffefff

0801e870 <__swrite>:
 801e870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e872:	001f      	movs	r7, r3
 801e874:	898b      	ldrh	r3, [r1, #12]
 801e876:	0005      	movs	r5, r0
 801e878:	000c      	movs	r4, r1
 801e87a:	0016      	movs	r6, r2
 801e87c:	05db      	lsls	r3, r3, #23
 801e87e:	d505      	bpl.n	801e88c <__swrite+0x1c>
 801e880:	230e      	movs	r3, #14
 801e882:	5ec9      	ldrsh	r1, [r1, r3]
 801e884:	2200      	movs	r2, #0
 801e886:	2302      	movs	r3, #2
 801e888:	f000 f874 	bl	801e974 <_lseek_r>
 801e88c:	89a3      	ldrh	r3, [r4, #12]
 801e88e:	4a05      	ldr	r2, [pc, #20]	; (801e8a4 <__swrite+0x34>)
 801e890:	0028      	movs	r0, r5
 801e892:	4013      	ands	r3, r2
 801e894:	81a3      	strh	r3, [r4, #12]
 801e896:	0032      	movs	r2, r6
 801e898:	230e      	movs	r3, #14
 801e89a:	5ee1      	ldrsh	r1, [r4, r3]
 801e89c:	003b      	movs	r3, r7
 801e89e:	f000 f81f 	bl	801e8e0 <_write_r>
 801e8a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e8a4:	ffffefff 	.word	0xffffefff

0801e8a8 <__sseek>:
 801e8a8:	b570      	push	{r4, r5, r6, lr}
 801e8aa:	000c      	movs	r4, r1
 801e8ac:	250e      	movs	r5, #14
 801e8ae:	5f49      	ldrsh	r1, [r1, r5]
 801e8b0:	f000 f860 	bl	801e974 <_lseek_r>
 801e8b4:	89a3      	ldrh	r3, [r4, #12]
 801e8b6:	1c42      	adds	r2, r0, #1
 801e8b8:	d103      	bne.n	801e8c2 <__sseek+0x1a>
 801e8ba:	4a05      	ldr	r2, [pc, #20]	; (801e8d0 <__sseek+0x28>)
 801e8bc:	4013      	ands	r3, r2
 801e8be:	81a3      	strh	r3, [r4, #12]
 801e8c0:	bd70      	pop	{r4, r5, r6, pc}
 801e8c2:	2280      	movs	r2, #128	; 0x80
 801e8c4:	0152      	lsls	r2, r2, #5
 801e8c6:	4313      	orrs	r3, r2
 801e8c8:	81a3      	strh	r3, [r4, #12]
 801e8ca:	6560      	str	r0, [r4, #84]	; 0x54
 801e8cc:	e7f8      	b.n	801e8c0 <__sseek+0x18>
 801e8ce:	46c0      	nop			; (mov r8, r8)
 801e8d0:	ffffefff 	.word	0xffffefff

0801e8d4 <__sclose>:
 801e8d4:	b510      	push	{r4, lr}
 801e8d6:	230e      	movs	r3, #14
 801e8d8:	5ec9      	ldrsh	r1, [r1, r3]
 801e8da:	f000 f815 	bl	801e908 <_close_r>
 801e8de:	bd10      	pop	{r4, pc}

0801e8e0 <_write_r>:
 801e8e0:	b570      	push	{r4, r5, r6, lr}
 801e8e2:	0004      	movs	r4, r0
 801e8e4:	0008      	movs	r0, r1
 801e8e6:	0011      	movs	r1, r2
 801e8e8:	001a      	movs	r2, r3
 801e8ea:	2300      	movs	r3, #0
 801e8ec:	4d05      	ldr	r5, [pc, #20]	; (801e904 <_write_r+0x24>)
 801e8ee:	602b      	str	r3, [r5, #0]
 801e8f0:	f7e6 fd54 	bl	800539c <_write>
 801e8f4:	1c43      	adds	r3, r0, #1
 801e8f6:	d103      	bne.n	801e900 <_write_r+0x20>
 801e8f8:	682b      	ldr	r3, [r5, #0]
 801e8fa:	2b00      	cmp	r3, #0
 801e8fc:	d000      	beq.n	801e900 <_write_r+0x20>
 801e8fe:	6023      	str	r3, [r4, #0]
 801e900:	bd70      	pop	{r4, r5, r6, pc}
 801e902:	46c0      	nop			; (mov r8, r8)
 801e904:	20001808 	.word	0x20001808

0801e908 <_close_r>:
 801e908:	2300      	movs	r3, #0
 801e90a:	b570      	push	{r4, r5, r6, lr}
 801e90c:	4d06      	ldr	r5, [pc, #24]	; (801e928 <_close_r+0x20>)
 801e90e:	0004      	movs	r4, r0
 801e910:	0008      	movs	r0, r1
 801e912:	602b      	str	r3, [r5, #0]
 801e914:	f7e6 fd8a 	bl	800542c <_close>
 801e918:	1c43      	adds	r3, r0, #1
 801e91a:	d103      	bne.n	801e924 <_close_r+0x1c>
 801e91c:	682b      	ldr	r3, [r5, #0]
 801e91e:	2b00      	cmp	r3, #0
 801e920:	d000      	beq.n	801e924 <_close_r+0x1c>
 801e922:	6023      	str	r3, [r4, #0]
 801e924:	bd70      	pop	{r4, r5, r6, pc}
 801e926:	46c0      	nop			; (mov r8, r8)
 801e928:	20001808 	.word	0x20001808

0801e92c <_fstat_r>:
 801e92c:	2300      	movs	r3, #0
 801e92e:	b570      	push	{r4, r5, r6, lr}
 801e930:	4d06      	ldr	r5, [pc, #24]	; (801e94c <_fstat_r+0x20>)
 801e932:	0004      	movs	r4, r0
 801e934:	0008      	movs	r0, r1
 801e936:	0011      	movs	r1, r2
 801e938:	602b      	str	r3, [r5, #0]
 801e93a:	f7e6 fd81 	bl	8005440 <_fstat>
 801e93e:	1c43      	adds	r3, r0, #1
 801e940:	d103      	bne.n	801e94a <_fstat_r+0x1e>
 801e942:	682b      	ldr	r3, [r5, #0]
 801e944:	2b00      	cmp	r3, #0
 801e946:	d000      	beq.n	801e94a <_fstat_r+0x1e>
 801e948:	6023      	str	r3, [r4, #0]
 801e94a:	bd70      	pop	{r4, r5, r6, pc}
 801e94c:	20001808 	.word	0x20001808

0801e950 <_isatty_r>:
 801e950:	2300      	movs	r3, #0
 801e952:	b570      	push	{r4, r5, r6, lr}
 801e954:	4d06      	ldr	r5, [pc, #24]	; (801e970 <_isatty_r+0x20>)
 801e956:	0004      	movs	r4, r0
 801e958:	0008      	movs	r0, r1
 801e95a:	602b      	str	r3, [r5, #0]
 801e95c:	f7e6 fd7e 	bl	800545c <_isatty>
 801e960:	1c43      	adds	r3, r0, #1
 801e962:	d103      	bne.n	801e96c <_isatty_r+0x1c>
 801e964:	682b      	ldr	r3, [r5, #0]
 801e966:	2b00      	cmp	r3, #0
 801e968:	d000      	beq.n	801e96c <_isatty_r+0x1c>
 801e96a:	6023      	str	r3, [r4, #0]
 801e96c:	bd70      	pop	{r4, r5, r6, pc}
 801e96e:	46c0      	nop			; (mov r8, r8)
 801e970:	20001808 	.word	0x20001808

0801e974 <_lseek_r>:
 801e974:	b570      	push	{r4, r5, r6, lr}
 801e976:	0004      	movs	r4, r0
 801e978:	0008      	movs	r0, r1
 801e97a:	0011      	movs	r1, r2
 801e97c:	001a      	movs	r2, r3
 801e97e:	2300      	movs	r3, #0
 801e980:	4d05      	ldr	r5, [pc, #20]	; (801e998 <_lseek_r+0x24>)
 801e982:	602b      	str	r3, [r5, #0]
 801e984:	f7e6 fd73 	bl	800546e <_lseek>
 801e988:	1c43      	adds	r3, r0, #1
 801e98a:	d103      	bne.n	801e994 <_lseek_r+0x20>
 801e98c:	682b      	ldr	r3, [r5, #0]
 801e98e:	2b00      	cmp	r3, #0
 801e990:	d000      	beq.n	801e994 <_lseek_r+0x20>
 801e992:	6023      	str	r3, [r4, #0]
 801e994:	bd70      	pop	{r4, r5, r6, pc}
 801e996:	46c0      	nop			; (mov r8, r8)
 801e998:	20001808 	.word	0x20001808

0801e99c <__malloc_lock>:
 801e99c:	b510      	push	{r4, lr}
 801e99e:	4802      	ldr	r0, [pc, #8]	; (801e9a8 <__malloc_lock+0xc>)
 801e9a0:	f7ff fe29 	bl	801e5f6 <__retarget_lock_acquire_recursive>
 801e9a4:	bd10      	pop	{r4, pc}
 801e9a6:	46c0      	nop			; (mov r8, r8)
 801e9a8:	20001800 	.word	0x20001800

0801e9ac <__malloc_unlock>:
 801e9ac:	b510      	push	{r4, lr}
 801e9ae:	4802      	ldr	r0, [pc, #8]	; (801e9b8 <__malloc_unlock+0xc>)
 801e9b0:	f7ff fe22 	bl	801e5f8 <__retarget_lock_release_recursive>
 801e9b4:	bd10      	pop	{r4, pc}
 801e9b6:	46c0      	nop			; (mov r8, r8)
 801e9b8:	20001800 	.word	0x20001800

0801e9bc <_read_r>:
 801e9bc:	b570      	push	{r4, r5, r6, lr}
 801e9be:	0004      	movs	r4, r0
 801e9c0:	0008      	movs	r0, r1
 801e9c2:	0011      	movs	r1, r2
 801e9c4:	001a      	movs	r2, r3
 801e9c6:	2300      	movs	r3, #0
 801e9c8:	4d05      	ldr	r5, [pc, #20]	; (801e9e0 <_read_r+0x24>)
 801e9ca:	602b      	str	r3, [r5, #0]
 801e9cc:	f7e6 fcc9 	bl	8005362 <_read>
 801e9d0:	1c43      	adds	r3, r0, #1
 801e9d2:	d103      	bne.n	801e9dc <_read_r+0x20>
 801e9d4:	682b      	ldr	r3, [r5, #0]
 801e9d6:	2b00      	cmp	r3, #0
 801e9d8:	d000      	beq.n	801e9dc <_read_r+0x20>
 801e9da:	6023      	str	r3, [r4, #0]
 801e9dc:	bd70      	pop	{r4, r5, r6, pc}
 801e9de:	46c0      	nop			; (mov r8, r8)
 801e9e0:	20001808 	.word	0x20001808

0801e9e4 <floor>:
 801e9e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e9e6:	004b      	lsls	r3, r1, #1
 801e9e8:	4a3d      	ldr	r2, [pc, #244]	; (801eae0 <floor+0xfc>)
 801e9ea:	0d5b      	lsrs	r3, r3, #21
 801e9ec:	189f      	adds	r7, r3, r2
 801e9ee:	4684      	mov	ip, r0
 801e9f0:	000e      	movs	r6, r1
 801e9f2:	000d      	movs	r5, r1
 801e9f4:	0004      	movs	r4, r0
 801e9f6:	9001      	str	r0, [sp, #4]
 801e9f8:	2f13      	cmp	r7, #19
 801e9fa:	dc34      	bgt.n	801ea66 <floor+0x82>
 801e9fc:	2f00      	cmp	r7, #0
 801e9fe:	da16      	bge.n	801ea2e <floor+0x4a>
 801ea00:	4a38      	ldr	r2, [pc, #224]	; (801eae4 <floor+0x100>)
 801ea02:	4b39      	ldr	r3, [pc, #228]	; (801eae8 <floor+0x104>)
 801ea04:	4660      	mov	r0, ip
 801ea06:	0031      	movs	r1, r6
 801ea08:	f7e2 f8b2 	bl	8000b70 <__aeabi_dadd>
 801ea0c:	2200      	movs	r2, #0
 801ea0e:	2300      	movs	r3, #0
 801ea10:	f7e1 fd22 	bl	8000458 <__aeabi_dcmpgt>
 801ea14:	2800      	cmp	r0, #0
 801ea16:	d007      	beq.n	801ea28 <floor+0x44>
 801ea18:	2e00      	cmp	r6, #0
 801ea1a:	da5d      	bge.n	801ead8 <floor+0xf4>
 801ea1c:	0073      	lsls	r3, r6, #1
 801ea1e:	085b      	lsrs	r3, r3, #1
 801ea20:	431c      	orrs	r4, r3
 801ea22:	d001      	beq.n	801ea28 <floor+0x44>
 801ea24:	2400      	movs	r4, #0
 801ea26:	4d31      	ldr	r5, [pc, #196]	; (801eaec <floor+0x108>)
 801ea28:	46a4      	mov	ip, r4
 801ea2a:	002e      	movs	r6, r5
 801ea2c:	e029      	b.n	801ea82 <floor+0x9e>
 801ea2e:	4b30      	ldr	r3, [pc, #192]	; (801eaf0 <floor+0x10c>)
 801ea30:	413b      	asrs	r3, r7
 801ea32:	9300      	str	r3, [sp, #0]
 801ea34:	400b      	ands	r3, r1
 801ea36:	4303      	orrs	r3, r0
 801ea38:	d023      	beq.n	801ea82 <floor+0x9e>
 801ea3a:	4a2a      	ldr	r2, [pc, #168]	; (801eae4 <floor+0x100>)
 801ea3c:	4b2a      	ldr	r3, [pc, #168]	; (801eae8 <floor+0x104>)
 801ea3e:	4660      	mov	r0, ip
 801ea40:	0031      	movs	r1, r6
 801ea42:	f7e2 f895 	bl	8000b70 <__aeabi_dadd>
 801ea46:	2200      	movs	r2, #0
 801ea48:	2300      	movs	r3, #0
 801ea4a:	f7e1 fd05 	bl	8000458 <__aeabi_dcmpgt>
 801ea4e:	2800      	cmp	r0, #0
 801ea50:	d0ea      	beq.n	801ea28 <floor+0x44>
 801ea52:	2e00      	cmp	r6, #0
 801ea54:	da03      	bge.n	801ea5e <floor+0x7a>
 801ea56:	2380      	movs	r3, #128	; 0x80
 801ea58:	035b      	lsls	r3, r3, #13
 801ea5a:	413b      	asrs	r3, r7
 801ea5c:	18f5      	adds	r5, r6, r3
 801ea5e:	9b00      	ldr	r3, [sp, #0]
 801ea60:	2400      	movs	r4, #0
 801ea62:	439d      	bics	r5, r3
 801ea64:	e7e0      	b.n	801ea28 <floor+0x44>
 801ea66:	2f33      	cmp	r7, #51	; 0x33
 801ea68:	dd0f      	ble.n	801ea8a <floor+0xa6>
 801ea6a:	2380      	movs	r3, #128	; 0x80
 801ea6c:	00db      	lsls	r3, r3, #3
 801ea6e:	429f      	cmp	r7, r3
 801ea70:	d107      	bne.n	801ea82 <floor+0x9e>
 801ea72:	0002      	movs	r2, r0
 801ea74:	000b      	movs	r3, r1
 801ea76:	4660      	mov	r0, ip
 801ea78:	0031      	movs	r1, r6
 801ea7a:	f7e2 f879 	bl	8000b70 <__aeabi_dadd>
 801ea7e:	4684      	mov	ip, r0
 801ea80:	000e      	movs	r6, r1
 801ea82:	4660      	mov	r0, ip
 801ea84:	0031      	movs	r1, r6
 801ea86:	b003      	add	sp, #12
 801ea88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ea8a:	4a1a      	ldr	r2, [pc, #104]	; (801eaf4 <floor+0x110>)
 801ea8c:	189b      	adds	r3, r3, r2
 801ea8e:	2201      	movs	r2, #1
 801ea90:	4252      	negs	r2, r2
 801ea92:	40da      	lsrs	r2, r3
 801ea94:	9200      	str	r2, [sp, #0]
 801ea96:	4210      	tst	r0, r2
 801ea98:	d0f3      	beq.n	801ea82 <floor+0x9e>
 801ea9a:	4a12      	ldr	r2, [pc, #72]	; (801eae4 <floor+0x100>)
 801ea9c:	4b12      	ldr	r3, [pc, #72]	; (801eae8 <floor+0x104>)
 801ea9e:	4660      	mov	r0, ip
 801eaa0:	0031      	movs	r1, r6
 801eaa2:	f7e2 f865 	bl	8000b70 <__aeabi_dadd>
 801eaa6:	2200      	movs	r2, #0
 801eaa8:	2300      	movs	r3, #0
 801eaaa:	f7e1 fcd5 	bl	8000458 <__aeabi_dcmpgt>
 801eaae:	2800      	cmp	r0, #0
 801eab0:	d0ba      	beq.n	801ea28 <floor+0x44>
 801eab2:	2e00      	cmp	r6, #0
 801eab4:	da02      	bge.n	801eabc <floor+0xd8>
 801eab6:	2f14      	cmp	r7, #20
 801eab8:	d103      	bne.n	801eac2 <floor+0xde>
 801eaba:	3501      	adds	r5, #1
 801eabc:	9b00      	ldr	r3, [sp, #0]
 801eabe:	439c      	bics	r4, r3
 801eac0:	e7b2      	b.n	801ea28 <floor+0x44>
 801eac2:	2334      	movs	r3, #52	; 0x34
 801eac4:	1bdf      	subs	r7, r3, r7
 801eac6:	3b33      	subs	r3, #51	; 0x33
 801eac8:	40bb      	lsls	r3, r7
 801eaca:	18e4      	adds	r4, r4, r3
 801eacc:	9b01      	ldr	r3, [sp, #4]
 801eace:	429c      	cmp	r4, r3
 801ead0:	419b      	sbcs	r3, r3
 801ead2:	425b      	negs	r3, r3
 801ead4:	18f5      	adds	r5, r6, r3
 801ead6:	e7f1      	b.n	801eabc <floor+0xd8>
 801ead8:	2400      	movs	r4, #0
 801eada:	0025      	movs	r5, r4
 801eadc:	e7a4      	b.n	801ea28 <floor+0x44>
 801eade:	46c0      	nop			; (mov r8, r8)
 801eae0:	fffffc01 	.word	0xfffffc01
 801eae4:	8800759c 	.word	0x8800759c
 801eae8:	7e37e43c 	.word	0x7e37e43c
 801eaec:	bff00000 	.word	0xbff00000
 801eaf0:	000fffff 	.word	0x000fffff
 801eaf4:	fffffbed 	.word	0xfffffbed

0801eaf8 <_init>:
 801eaf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eafa:	46c0      	nop			; (mov r8, r8)
 801eafc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801eafe:	bc08      	pop	{r3}
 801eb00:	469e      	mov	lr, r3
 801eb02:	4770      	bx	lr

0801eb04 <_fini>:
 801eb04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eb06:	46c0      	nop			; (mov r8, r8)
 801eb08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801eb0a:	bc08      	pop	{r3}
 801eb0c:	469e      	mov	lr, r3
 801eb0e:	4770      	bx	lr
